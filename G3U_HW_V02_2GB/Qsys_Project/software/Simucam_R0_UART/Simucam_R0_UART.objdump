
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0003d03c memsz 0x00064824 flags rwx
    LOAD off    0x0003f000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0003f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00038238  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002e58  81138494  81138494  00039494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d70  8113b2ec  8113b2ec  0003c2ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000277e8  8113d05c  8113d05c  0003e05c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  81164844  81164844  0003f000  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  81200800  81200800  0003f000  2**0
                  CONTENTS
  8 .ext_flash    00000000  86020020  86020020  0003f000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0003f000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001b38  00000000  00000000  0003f028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00055e02  00000000  00000000  00040b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00013b40  00000000  00000000  00096962  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001bf51  00000000  00000000  000aa4a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00007010  00000000  00000000  000c63f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000a602  00000000  00000000  000cd404  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00026d68  00000000  00000000  000d7a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  000fe770  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002390  00000000  00000000  000fe7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  0010aa59  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  0010aa5f  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0010aa6b  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0010aa6c  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0010aa6d  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0010aa71  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0010aa75  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  0010aa79  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000a  00000000  00000000  0010aa84  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000a  00000000  00000000  0010aa8e  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000011  00000000  00000000  0010aa98  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003f  00000000  00000000  0010aaa9  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00277c09  00000000  00000000  0010aae8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
81138494 l    d  .rodata	00000000 .rodata
8113b2ec l    d  .rwdata	00000000 .rwdata
8113d05c l    d  .bss	00000000 .bss
81164844 l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 spwc.c
00000000 l    df *ABS*	00000000 tran.c
00000000 l    df *ABS*	00000000 eth.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 pgen.c
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
8113d0ae l     O .bss	00000004 xRAckLocal.4460
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
8113d0b2 l     O .bss	00000004 xSAckLocal.4456
00000000 l    df *ABS*	00000000 parser_comm_task.c
8113d200 l     O .bss	0000004c PreParsedLocal.4513
00000000 l    df *ABS*	00000000 receiver_uart_task.c
8113d24c l     O .bss	0000004c xPreParsedReader.4514
00000000 l    df *ABS*	00000000 rtos_tasks.c
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
81139973 l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113a9c1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8113b2ec l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
8110ed38 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113ab8e l     O .rodata	00000010 zeroes.4389
8113ab9e l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113abae l     O .rodata	00000010 zeroes.4404
8111396c l     F .text	000000c4 __sbprintf
8113abbe l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113abd6 l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
811154f4 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81117044 l     F .text	00000008 __fp_unlock
81117058 l     F .text	000001a4 __sinit.part.1
811171fc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8113bb38 l     O .rwdata	00000020 lc_ctype_charset
8113bb18 l     O .rwdata	00000020 lc_message_charset
8113bb58 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113ac14 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111a1e4 l     F .text	0000006c sulp
8113ad5c l     O .rodata	00000014 fpi.2737
8113ad70 l     O .rodata	00000028 tinytens
8113ad48 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113ada8 l     O .rodata	00000010 blanks.4332
8113ad98 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111d854 l     F .text	00000104 __sprint_r.part.0
8113adc8 l     O .rodata	00000010 blanks.4348
8113adb8 l     O .rodata	00000010 zeroes.4349
8111edf0 l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
8111f404 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
81123070 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
811231b4 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
811231e8 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
811232e4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
811233d4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
811235b8 l     F .text	00000044 alt_get_errno
811235fc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81123824 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8113cfc0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81123dc4 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
8113cfcc l     O .rwdata	00000004 lockid
8113d144 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
8113cfd0 l     O .rwdata	00000004 lockid
8113d14c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
811258c8 l     F .text	00000050 OS_InitMisc
81125918 l     F .text	00000074 OS_InitRdyList
81125a9c l     F .text	000000ec OS_InitTCBList
811257e0 l     F .text	000000e8 OS_InitEventList
8112598c l     F .text	00000088 OS_InitTaskIdle
81125a14 l     F .text	00000088 OS_InitTaskStat
81125d2c l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
81127b44 l     F .text	000000fc OS_FlagTaskRdy
811278f4 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
81129430 l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
8112de60 l     F .text	00000044 OSTmr_Lock
8112d900 l     F .text	00000074 OSTmr_Alloc
8112dea4 l     F .text	0000003c OSTmr_Unlock
8112dd64 l     F .text	000000fc OSTmr_Unlink
8112d974 l     F .text	000000a4 OSTmr_Free
8112dc14 l     F .text	00000150 OSTmr_Link
8112db8c l     F .text	00000088 OSTmr_InitTask
8112dee0 l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
8112dff0 l     F .text	0000003c alt_dev_reg
8113bd38 l     O .rwdata	0000106c jtag_uart_0
8113cda4 l     O .rwdata	00000030 sgdma_rx
8113cdd4 l     O .rwdata	00000030 sgdma_tx
8113ce04 l     O .rwdata	000000d0 rs232_uart
8113ced4 l     O .rwdata	00000064 dma_DDR_M
8113cf38 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81132800 l     F .text	000002ac altera_avalon_jtag_uart_irq
81132aac l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
811332b0 l     F .text	00000044 alt_get_errno
81133f70 l     F .text	000000c4 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
811340e4 l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81134478 l     F .text	000000a4 altera_avalon_uart_irq
8113451c l     F .text	00000140 altera_avalon_uart_rxirq
8113465c l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
81134864 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81134b18 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
81134d9c l     F .text	00000044 alt_get_errno
81134de0 l     F .text	0000009c alt_msgdma_write_standard_descriptor
81134e7c l     F .text	00000134 alt_msgdma_write_extended_descriptor
81134fb0 l     F .text	0000018c alt_msgdma_irq
8113513c l     F .text	00000094 alt_msgdma_construct_standard_descriptor
811351d0 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
8113532c l     F .text	00000340 alt_msgdma_descriptor_async_transfer
8113566c l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
81135d74 l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
81135e20 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113714c l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81137860 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
8113d1f8 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8113d1fc g     O .bss	00000004 alt_instruction_exception_handler
8110b2a4 g     F .text	0000004c vFailDeleteInitialization
8113d1c8 g     O .bss	00000004 aux_status_register
811516c0 g     O .bss	00002000 vInAckHandlerTask_stk
81136da8 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
8110ec44 g     F .text	00000018 putchar
81102944 g     F .text	00000130 SPWC_WRITE_REG32
811196f0 g     F .text	0000007c _mprec_log10
81104088 g     F .text	00000130 TRAN_READ_REG32
81105364 g     F .text	00000108 I2C_Read
8113d01e g     O .rwdata	00000002 OSTaskNameSize
811536c0 g     O .bss	00000118 xBuffer64
811197e4 g     F .text	0000008c __any_on
811181b8 g     F .text	0000005c _isatty_r
8113ac20 g     O .rodata	00000028 __mprec_tinytens
811234f4 g     F .text	000000c4 alt_main
8113d0bc g     O .bss	00000004 DMADev
8110ec5c g     F .text	000000c8 _puts_r
8113d154 g     O .bss	00000004 OSTmrFreeList
8113cf70 g     O .rwdata	00000004 ul_spwc_c_spacewire_link_control_status_register_value
81164744 g     O .bss	00000100 alt_irq
8113d090 g     O .bss	00000004 ul_tran_d_interface_control_status_register_value
81118328 g     F .text	00000068 _lseek_r
811283a4 g     F .text	000000d4 OS_MemInit
81109efc g     F .text	0000098c vLoadDefaultETHConf
8112ce40 g     F .text	00000068 OSTimeSet
8113cf7c g     O .rwdata	00000004 ul_spwc_f_spacewire_link_control_status_register_value
811173fc g     F .text	000000ac __sflags
81122300 g     F .text	00000088 .hidden __eqdf2
81101a14 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
81100f38 g     F .text	000003a0 DDR2_MEMORY_READ_TEST
8112e4f0 g     F .text	000001ac Check_for_Master_Boot_Record
8115fb80 g     O .bss	00000010 OSTmrWheelTbl
81135b34 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
8113d064 g     O .bss	00000004 ul_spwc_a_interface_control_status_register_value
811244a8 g     F .text	00000618 OSEventPendMulti
81164844 g       *ABS*	00000000 __alt_heap_start
81137e98 g     F .text	0000002c OSTaskCreateHook
81132368 g     F .text	000001c4 alt_up_sd_card_fclose
8113d0c0 g     O .bss	00000004 xSemCountBuffer64
8113d0ac g     O .bss	00000001 SspdConfigControl
8110ebf8 g     F .text	00000044 printf
8113cff6 g     O .rwdata	00000002 OSMboxEn
811097e8 g     F .text	00000394 bSendUART128
81133420 g     F .text	00000118 alt_avalon_sgdma_do_sync_transfer
8110c1a4 g     F .text	000000a4 aatoh
81124b24 g     F .text	00000054 OSIntEnter
81120070 g     F .text	000000a4 _wcrtomb_r
8110b20c g     F .text	0000004c vFailReceiverCreate
8110f1c4 g     F .text	00000064 __sseek
811173ac g     F .text	00000010 __sinit
8111eeb4 g     F .text	00000148 __swbuf_r
81109398 g     F .text	000002cc bResourcesInitRTOS
8113d006 g     O .rwdata	00000002 OSQEn
81118244 g     F .text	00000084 _setlocale_r
8113d0a8 g     O .bss	00000004 LedsPainelControl
81117204 g     F .text	00000070 __sfmoreglue
8111d83c g     F .text	00000018 ungetc
81124164 g     F .text	000000d4 __malloc_unlock
81101d04 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
81137f18 g     F .text	00000028 OSTaskStatHook
8113d158 g     O .bss	00000001 OSLockNesting
8113d15c g     O .bss	00000004 OSTmrSemSignal
8113d0c4 g     O .bss	00000004 xSemCommInit
8111a250 g     F .text	00001600 _strtod_r
8113d0c8 g     O .bss	00000004 xSemCountSenderACK
8110c2d0 g     F .text	00000448 .hidden __divsf3
81104294 g     F .text	000001fc v_Transparent_Interface_Enable_Control
8113d1ec g     O .bss	00000004 current_sector_modified
8113d044 g     O .rwdata	00000002 OSDataSize
8113d160 g     O .bss	00000001 OSRunning
81104ed0 g     F .text	000002b0 ui_Transparent_Interface_Get_SpaceWire_Data
8113d08c g     O .bss	00000004 ul_tran_c_interface_control_status_register_value
811537d8 g     O .bss	00002000 senderTask_stk
81133bb0 g     F .text	000003c0 alt_avalon_sgdma_construct_descriptor_burst
811034b0 g     F .text	00000060 ul_SpaceWire_Interface_Interrupts_Flags_Read
8113d0cc g     O .bss	00000004 fp
8113d6c0 g     O .bss	00002000 SPWHTaskStk
811186b8 g     F .text	0000015c memmove
81137f94 g     F .text	0000002c OSInitHookBegin
81103f58 g     F .text	00000130 TRAN_WRITE_REG32
8113d03c g     O .rwdata	00000002 OSTmrSize
81117394 g     F .text	00000018 _cleanup
8110becc g     F .text	00000040 siCloseFile
81118814 g     F .text	000000b0 _Balloc
81130f44 g     F .text	000000cc alt_up_sd_card_is_Present
81135a74 g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
811087dc g     F .text	000001a0 Set_SpW_Led
8113f6c0 g     O .bss	00002000 SPWFTaskStk
81101aac g     F .text	000000a4 DMA_DISPATCHER_STOP
8112e218 g     F .text	00000054 Save_Modified_Sector
8113d164 g     O .bss	00000004 OSIdleCtr
81122388 g     F .text	000000dc .hidden __gtdf2
81137c28 g     F .text	0000002c altera_nios2_gen2_irq_init
81137d10 g       .text	00000000 OSStartTsk
8112609c g     F .text	000002dc OS_TCBInit
8110bc70 g     F .text	0000006c vInitSimucamBasicHW
811557d8 g     O .bss	00002000 vTimeoutCheckerTask_stk
811056e0 g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
8113d1e4 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
8113d168 g     O .bss	00000002 OSTmrUsed
8113d0d0 g     O .bss	00000004 xSemCountBuffer128
81102158 g     F .text	000000f8 TEMP_Read
8113d042 g     O .rwdata	00000002 OSTmrWheelTblSize
811336a8 g     F .text	00000080 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
8113cfe2 g     O .rwdata	00000002 OSEventSize
8113d16a g     O .bss	00000001 OSPrioHighRdy
8110dd94 g     F .text	00000064 _fstat_r
81137ec4 g     F .text	0000002c OSTaskDelHook
8113d110 g     O .bss	00000004 errno
81115264 g     F .text	0000001c __svfscanf
8110f138 g     F .text	00000008 __seofread
81137cf0 g       .text	00000000 OSStartHighRdy
8112b870 g     F .text	000001ec OSTaskCreateExt
8110b490 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
8111c380 g     F .text	00001244 ___svfiprintf_internal_r
81127424 g     F .text	00000068 OSFlagPendGetFlagsRdy
8113d022 g     O .rwdata	00000002 OSTaskStatStkSize
81103a08 g     F .text	00000078 uc_SpaceWire_Interface_Get_TimeCode
81126570 g     F .text	00000310 OSFlagAccept
81129b4c g     F .text	000000c0 OSQFlush
811295c8 g     F .text	00000148 OSQAccept
8113d134 g     O .bss	00000004 alt_argv
81144f64 g       *ABS*	00000000 _gp
8110aed4 g     F .text	0000004c vFailSendPreAckReceiverSemaphore
81123c88 g     F .text	0000013c usleep
8113151c g     F .text	00000384 alt_up_sd_card_fopen
8110bd38 g     F .text	00000030 bSDcardIsPresent
8110870c g     F .text	000000d0 Configure_SpW_Autostart
8110897c g     F .text	0000013c vSenderComTask
81131084 g     F .text	000000d8 alt_up_sd_card_find_first
81103948 g     F .text	00000064 v_SpaceWire_Interface_Send_TimeCode
8112b6bc g     F .text	000001b4 OSTaskCreate
8110b630 g     F .text	00000068 vFailSendNack
8113d1d8 g     O .bss	00000004 command_argument_register
8112b1c4 g     F .text	000004f8 OSTaskChangePrio
8113d150 g     O .bss	00000004 alt_heapsem
81103888 g     F .text	00000060 ul_SpaceWire_Interface_Link_Error_Read
81105978 g     F .text	00000080 bSetBoardLeds
81126378 g     F .text	000001f8 OSDebugInit
8112ba5c g     F .text	0000034c OSTaskDel
81108230 g     F .text	00000054 SPWDTask
81128478 g     F .text	000001ac OSMutexAccept
8113661c g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8113d0d4 g     O .bss	00000004 xSemCountPreParsed
8113bbb8 g     O .rwdata	00000180 alt_fd_list
8115fb90 g     O .bss	00000370 OSFlagTbl
8110b03c g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110ec3c g     F .text	00000008 _putchar_r
811255a8 g     F .text	000000c0 OS_EventTaskRemove
81130798 g     F .text	00000134 find_first_empty_record_in_root_directory
8113730c g     F .text	00000098 alt_find_dev
8110e8e0 g     F .text	00000150 memcpy
8111fd3c g     F .text	00000264 __hexnan
811038e8 g     F .text	00000060 ul_SpaceWire_Interface_Link_Status_Read
811577d8 g     O .bss	00000130 xBuffer32
8113d00c g     O .rwdata	00000002 OSRdyTblSize
8115ff00 g     O .bss	000001a0 OSTmrTbl
8111704c g     F .text	0000000c _cleanup_r
81122edc g     F .text	000000e4 .hidden __floatsidf
8113d09c g     O .bss	00000004 ul_tran_g_interface_control_status_register_value
811071d0 g     F .text	000002c0 vParserCommTask
8113792c g     F .text	00000084 alt_io_redirect
81122464 g     F .text	000000f4 .hidden __ltdf2
8110bba0 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
8113d0d8 g     O .bss	00000004 xMutexReceivedACK
81138494 g       *ABS*	00000000 __DTOR_END__
81136aa4 g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
81136dec g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81136d4c g     F .text	0000005c alt_msgdma_register_callback
8110a888 g     F .text	00000330 vShowEthConfig
8113d080 g     O .bss	00000004 ul_spwc_h_interface_control_status_register_value
8110bcdc g     F .text	00000030 bLogWriteSDCard
8110b358 g     F .text	00000068 vFailSetCountSemaphorexBuffer64
811075a8 g     F .text	000000a0 bTrySendSemaphoreCommInit
8110ed24 g     F .text	00000014 puts
8113803c g     F .text	000000a4 alt_exception_cause_generated_bad_addr
81124238 g     F .text	00000128 OSEventNameGet
8113cff0 g     O .rwdata	00000002 OSFlagMax
81118444 g     F .text	000000e0 mbrtowc
81130390 g     F .text	000001b4 find_first_empty_cluster
81119fbc g     F .text	00000074 __fpclassifyd
81115280 g     F .text	00000054 _vfscanf_r
81128af8 g     F .text	000005a4 OSMutexPend
8113cf84 g     O .rwdata	00000004 ul_spwc_h_spacewire_link_control_status_register_value
81119644 g     F .text	000000ac __ratio
81130e80 g     F .text	000000c4 alt_up_sd_card_open_dev
81103510 g     F .text	0000017c v_SpaceWire_Interface_Interrupts_Flags_Clear
81124b78 g     F .text	00000100 OSIntExit
8111edd4 g     F .text	0000001c __vfiprintf_internal
8113d02a g     O .rwdata	00000002 OSTCBSize
811337b0 g     F .text	00000094 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
8113d16b g     O .bss	00000001 OSPrioCur
81132d20 g     F .text	000002c4 altera_avalon_jtag_uart_read
8110bd0c g     F .text	0000002c bLogWriteETH
811362e4 g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
8110ebc0 g     F .text	00000038 _printf_r
81120ea4 g     F .text	00000064 .hidden __udivsi3
81123328 g     F .text	000000ac isatty
8113d0a4 g     O .bss	00000001 LedsBoardControl
8113d0dc g     O .bss	00000004 xSemCountReceivedACK
8113d010 g     O .rwdata	00000002 OSStkWidth
81118214 g     F .text	00000030 iswspace
81104ad0 g     F .text	0000005c b_Transparent_Interface_TX_FIFO_Status_Full
8113ac70 g     O .rodata	000000c8 __mprec_tens
8113d004 g     O .rwdata	00000002 OSPtrSize
8113d07c g     O .bss	00000004 ul_spwc_g_interface_control_status_register_value
8113d074 g     O .bss	00000004 ul_spwc_e_interface_control_status_register_value
811182c8 g     F .text	0000000c __locale_charset
81121094 g     F .text	000000c8 .hidden __lesf2
8113cfe4 g     O .rwdata	00000002 OSEventTblSize
81105bec g     F .text	0000003c v_Pattern_Generator_Start
81120270 g     F .text	0000007c .hidden __fixunsdfsi
81137c54 g       .text	00000000 OSCtxSw
8110546c g     F .text	00000160 I2C_MultipleRead
8113d11c g     O .bss	00000004 __malloc_top_pad
8113d16c g     O .bss	00000004 OSTCBList
8112d8c0 g     F .text	00000040 OSTmrSignal
8113d12c g     O .bss	00000004 alt_fd_list_lock
8111beac g     F .text	0000001c strtoul
8113cf9c g     O .rwdata	00000004 __mb_cur_max
811182f8 g     F .text	0000000c _localeconv_r
8111bec8 g     F .text	000002e0 _strtoull_r
8110368c g     F .text	000001fc v_SpaceWire_Interface_Link_Control
81118c38 g     F .text	00000044 __i2b
81117b5c g     F .text	000004c4 __sfvwrite_r
81133900 g     F .text	00000064 alt_avalon_sgdma_stop
8112f670 g     F .text	000000c0 get_dir_divider_location
811600a0 g     O .bss	00000c30 OSMemTbl
8113d170 g     O .bss	00000001 OSTickStepState
81157908 g     O .bss	00002000 vReceiverUartTask_stk
8110ef30 g     F .text	0000005c _sbrk_r
8113d0e0 g     O .bss	00000004 xSemTimeoutChecker
8112f330 g     F .text	000000cc filename_to_upper_case
8113d008 g     O .rwdata	00000002 OSQMax
811318a0 g     F .text	00000090 alt_up_sd_card_set_attributes
811287f4 g     F .text	00000304 OSMutexDel
81160cd0 g     O .bss	00000800 OSTaskStatStk
8110bd68 g     F .text	00000030 bSDcardFAT16Check
81127fc0 g     F .text	000000f8 OSMemNameGet
8110ad28 g     F .text	00000060 vFailCreateMutexSResources
8112e69c g     F .text	00000284 Read_File_Record_At_Offset
811080f0 g     F .text	00000044 MemDMATask
8113cfe8 g     O .rwdata	00000002 OSFlagEn
811199e8 g     F .text	00000068 _read_r
8113d02e g     O .rwdata	00000002 OSTimeTickHookEn
8113711c g     F .text	00000030 alt_dcache_flush
8112a014 g     F .text	00000170 OSQPost
81127c40 g     F .text	000000ac OS_FlagUnlink
8113cfb8 g     O .rwdata	00000004 alt_max_fd
8110b94c g     F .text	0000004c vFailTimeoutCheckerTaskCreate
81125be4 g     F .text	00000070 OS_MemCopy
81125c54 g     F .text	000000d8 OS_Sched
8112ff14 g     F .text	0000047c find_file_in_directory
8111f0e0 g     F .text	000000f8 _fclose_r
81127ec8 g     F .text	000000f8 OSMemGet
8112c0a0 g     F .text	000001bc OSTaskNameSet
81117014 g     F .text	00000030 fflush
8113d118 g     O .bss	00000004 __malloc_max_sbrked_mem
8113d174 g     O .bss	00000004 OSCtxSwCtr
81137f40 g     F .text	00000054 OSTimeTickHook
81159908 g     O .bss	00002000 vOutAckHandlerTask_stk
8113cff2 g     O .rwdata	00000002 OSFlagNameSize
8110832c g     F .text	00000054 SPWGTask
8110d460 g     F .text	00000118 .hidden __extendsfdf2
81125668 g     F .text	00000108 OS_EventTaskRemoveMulti
81131010 g     F .text	00000074 alt_up_sd_card_is_FAT16
811051fc g     F .text	00000088 I2C_TestAdress
8112115c g     F .text	000008b4 .hidden __adddf3
81120f60 g     F .text	00000078 .hidden __nesf2
81125450 g     F .text	00000158 OS_EventTaskWaitMulti
811193dc g     F .text	00000114 __b2d
8113601c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8113d00a g     O .rwdata	00000002 OSQSize
8112086c g     F .text	00000540 .hidden __umoddi3
81123418 g     F .text	000000dc lseek
8112ab04 g     F .text	00000214 OSSemPend
8113cf8c g     O .rwdata	00000004 _global_impure_ptr
811066d4 g     F .text	0000004c bSSDisplayUpdate
8112f9d4 g     F .text	00000540 get_home_directory_cluster_for_file
81104b2c g     F .text	0000005c b_Transparent_Interface_TX_FIFO_Status_Empty
81119a50 g     F .text	0000056c _realloc_r
8113cff4 g     O .rwdata	00000002 OSLowestPrio
81164844 g       *ABS*	00000000 __bss_end
81137768 g     F .text	000000f8 alt_iic_isr_register
811332f4 g     F .text	0000012c alt_avalon_sgdma_do_async_transfer
81138010 g     F .text	0000002c OSTCBInitHook
8113d03a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
811031ac g     F .text	00000108 v_SpaceWire_Interface_Force_Reset
81123b78 g     F .text	00000110 alt_tick
8110afd4 g     F .text	00000068 vFailGetMutexSenderTask
8113add8 g     O .rodata	00000100 __hexdig
81136b98 g     F .text	000001b4 alt_msgdma_init
811202ec g     F .text	00000580 .hidden __udivdi3
81107da8 g     F .text	000001a4 setPreAckSenderFreePos
8111f358 g     F .text	00000024 _fputwc_r
8113cfdc g     O .rwdata	00000002 OSEventEn
8113ac48 g     O .rodata	00000028 __mprec_bigtens
81118a14 g     F .text	0000010c __s2b
8113d036 g     O .rwdata	00000002 OSTmrCfgNameSize
81122fc0 g     F .text	000000b0 .hidden __floatunsidf
8110b428 g     F .text	00000068 vFailFoundBufferRetransmission
81119114 g     F .text	00000060 __mcmp
8113d1f0 g     O .bss	00000004 current_sector_index
81134310 g     F .text	00000168 altera_avalon_uart_init
81136e74 g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
811173cc g     F .text	00000018 __fp_lock_all
81137714 g     F .text	00000054 alt_ic_irq_enabled
81105284 g     F .text	000000e0 I2C_Write
8113d178 g     O .bss	00000002 OSTmrFree
81103ae8 g     F .text	000001b8 b_SpaceWire_Interface_Set_TX_Div
81105b94 g     F .text	00000058 ul_Pattern_Generator_Read_Register
81127a5c g     F .text	000000e8 OS_FlagInit
81123ad4 g     F .text	000000a4 alt_alarm_stop
8110f554 g     F .text	0000001c strtol
8112d06c g     F .text	00000140 OSTmrDel
8112e408 g     F .text	000000e8 mark_cluster
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
8113d018 g     O .rwdata	00000002 OSTaskIdleStkSize
8113d1f4 g     O .bss	00000004 alt_irq_active
8112a724 g     F .text	000000b8 OSSemAccept
8110d92c g     F .text	0000044c _fseeko_r
81104be0 g     F .text	000001a0 b_Transparent_Interface_Switch_Channel
811281d4 g     F .text	000000e0 OSMemPut
81127cec g     F .text	000001dc OSMemCreate
8113d17c g     O .bss	00000004 OSIdleCtrMax
81100104 g     F .exceptions	000000dc alt_irq_handler
8113bb90 g     O .rwdata	00000028 alt_dev_null
81135c2c g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
8113d02c g     O .rwdata	00000002 OSTicksPerSec
811308cc g     F .text	00000194 convert_filename_to_name_extension
8113d0b9 g     O .bss	00000001 tempFPGA
81133964 g     F .text	0000006c alt_avalon_sgdma_check_descriptor_status
81103df4 g     F .text	000000b4 b_SpaceWire_Interface_Read_RX_Data
811055cc g     F .text	00000094 i2c_start
81137c54 g       .text	00000000 OSIntCtxSw
81104970 g     F .text	0000005c b_Transparent_Interface_RX_FIFO_Status_Full
81136a10 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81103ea8 g     F .text	000000b0 ui_SpaceWire_Interface_Get_SpaceWire_Data
8112318c g     F .text	00000028 alt_dcache_flush_all
81118b20 g     F .text	00000068 __hi0bits
8113d1c4 g     O .bss	00000004 is_sd_card_formated_as_FAT16
81122e5c g     F .text	00000080 .hidden __fixdfsi
8115b908 g     O .bss	00002000 vInitialTask_stk
8113d0e4 g     O .bss	00000002 usiIdCMD
81130544 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
81107838 g     F .text	00000410 bPreParser
8111b850 g     F .text	00000018 strtod
8113d180 g     O .bss	00000004 OSTCBFreeList
8112ad18 g     F .text	00000174 OSSemPendAbort
8110b174 g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110b8b4 g     F .text	0000004c vFailCreateTimerRetransmisison
8113cfb0 g     O .rwdata	00000008 alt_dev_list
81123e08 g     F .text	00000100 write
81133ac0 g     F .text	00000088 alt_avalon_sgdma_enable_desc_poll
81119870 g     F .text	000000a8 _putc_r
8113d1e8 g     O .bss	00000004 device_pointer
8113d030 g     O .rwdata	00000002 OSVersionNbr
81120fd8 g     F .text	000000bc .hidden __gtsf2
81107490 g     F .text	00000118 getPreParsedPacket
8112322c g     F .text	000000b8 fstat
8110d8e0 g     F .text	0000002c fprintf
81101bf4 g     F .text	00000110 DMA_SINGLE_TRANSFER
8110ba00 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
8110bf74 g     F .text	00000058 _reg_write
81122464 g     F .text	000000f4 .hidden __ledf2
8110422c g     F .text	00000068 ul_Transparent_Interface_Read_Register
8112d2ec g     F .text	000001b8 OSTmrRemainGet
8113cfd8 g     O .rwdata	00000004 OSEndiannessTest
8110626c g     F .text	00000058 v_spi_start
81118e7c g     F .text	00000148 __pow5mult
8111d970 g     F .text	00001464 ___vfiprintf_internal_r
8113d128 g     O .bss	00000004 __nlocale_changed
81120f08 g     F .text	00000058 .hidden __umodsi3
8110bd98 g     F .text	000000f8 bInitializeSDCard
81100b0c g     F .text	0000042c DDR2_MEMORY_WRITE_TEST
8110b7d0 g     F .text	0000004c vFailParserCommTaskCreate
8110efd0 g     F .text	00000038 _scanf_r
8110b868 g     F .text	0000004c vFailOutAckHandlerTaskCreate
81133728 g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc
8113cfea g     O .rwdata	00000002 OSFlagGrpSize
8113607c g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81133844 g     F .text	0000005c alt_avalon_sgdma_register_callback
8112d4a4 g     F .text	000000ec OSTmrStateGet
81164844 g       *ABS*	00000000 end
8110b560 g     F .text	00000068 vNoContentInPreParsedBuffer
8110dd78 g     F .text	0000001c fseeko
81105180 g     F .text	0000003c vEthHoldReset
8110d790 g     F .text	0000000c _atoi_r
81134b5c g     F .text	00000240 altera_avalon_uart_write
811032b4 g     F .text	000001fc v_SpaceWire_Interface_Interrupts_Enable_Control
8110d910 g     F .text	0000001c fseek
811326b0 g     F .text	00000150 altera_avalon_jtag_uart_init
81125ee4 g     F .text	000000e4 OS_TaskStat
8113d088 g     O .bss	00000004 ul_tran_b_interface_control_status_register_value
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110add4 g     F .text	0000004c vFailTestCriticasParts
81138494 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81133b48 g     F .text	00000068 alt_avalon_sgdma_disable_desc_poll
81104a24 g     F .text	0000004c v_Transparent_Interface_TX_FIFO_Reset
81134164 g     F .text	00000084 alt_avalon_timer_sc_init
81134250 g     F .text	00000068 altera_avalon_uart_write_fd
8110d720 g     F .text	00000064 .hidden __clzsi2
81105c28 g     F .text	0000003c v_Pattern_Generator_Stop
8113d06c g     O .bss	00000004 ul_spwc_c_interface_control_status_register_value
811342b8 g     F .text	00000058 altera_avalon_uart_close_fd
81132fe4 g     F .text	000002cc altera_avalon_jtag_uart_write
81133538 g     F .text	0000007c alt_avalon_sgdma_construct_mem_to_mem_desc
8112da18 g     F .text	00000174 OSTmr_Init
8115d908 g     O .bss	0000010c xBuffer128
8110468c g     F .text	00000060 ul_Transparent_Interface_Interrupts_Flags_Read
811173bc g     F .text	00000004 __sfp_lock_acquire
81102250 g     F .text	00000048 sense_log_temp
811185d4 g     F .text	000000e4 memchr
81125b88 g     F .text	0000005c OS_MemClr
81111750 g     F .text	00002200 ___vfprintf_internal_r
81137d34 g     F .text	00000164 OSTaskStkInit
8110f008 g     F .text	00000060 _sprintf_r
81104a70 g     F .text	00000060 ul_Transparent_Interface_TX_FIFO_Status_Read
81133640 g     F .text	00000068 alt_avalon_sgdma_construct_stream_to_mem_desc
81117844 g     F .text	00000318 _free_r
811379b0 g     F .text	00000234 alt_printf
81109eac g     F .text	00000050 vTimeoutCheck
8110c024 g     F .text	0000010c _print_codec_status
8113cf68 g     O .rwdata	00000004 ul_spwc_a_spacewire_link_control_status_register_value
811182d4 g     F .text	00000010 __locale_mb_cur_max
81125198 g     F .text	000001a0 OS_EventTaskRdy
81101b50 g     F .text	000000a4 DMA_DISPATCHER_RESET
811382d0 g     F .text	00000188 __call_exitprocs
8113d184 g     O .bss	00000001 OSCPUUsage
81100298 g     F .text	000002ac DDR2_EEPROM_TEST
81100a7c g     F .text	00000090 DDR2_SWITCH_MEMORY
8113d124 g     O .bss	00000004 __mlocale_changed
8113cf94 g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	0000003c _start
8113d13c g     O .bss	00000004 _alt_tick_rate
81129c0c g     F .text	00000294 OSQPend
8111b970 g     F .text	000002e8 _strtoll_r
811339d0 g     F .text	0000005c alt_avalon_sgdma_open
8112c990 g     F .text	0000010c OSTimeDly
81118fc4 g     F .text	00000150 __lshift
81106f48 g     F .text	00000288 vOutAckHandlerTask
8113d0ba g     O .bss	00000001 tempBoard
81135ad4 g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
8113d140 g     O .bss	00000004 _alt_nticks
81123868 g     F .text	00000104 read
8112e06c g     F .text	000000f0 alt_sys_init
81105ca0 g     F .text	00000050 Pattern_Generator_Status
8110cb1c g     F .text	0000012c .hidden __floatsisf
8111c1a8 g     F .text	000001d8 __ssprint_r
8110eb58 g     F .text	00000068 _open_r
8110bf4c g     F .text	00000028 bTestSimucamCriticalHW
8110abb8 g     F .text	000000a4 ucCrc8
81102c18 g     F .text	00000068 ul_SpaceWire_Interface_Read_Register
811381b0 g     F .text	00000120 __register_exitproc
8113d185 g     O .bss	00000001 OSTaskCtr
81108380 g     F .text	00000054 SPWHTask
811416c0 g     O .bss	00002000 SPWETaskStk
81109e5c g     F .text	00000050 siPosStr
8111ffa0 g     F .text	000000d0 strncmp
81105b30 g     F .text	00000064 b_Pattern_Generator_Write_Register
8112ca9c g     F .text	00000164 OSTimeDlyHMSM
81118c7c g     F .text	00000200 __multiply
81132bb8 g     F .text	00000070 altera_avalon_jtag_uart_close
8110643c g     F .text	00000058 v_spi_end
8110bf0c g     F .text	00000040 cGetNextChar
81108188 g     F .text	00000054 SPWBTask
8113d298 g     O .bss	00000028 __malloc_current_mallinfo
8113cfde g     O .rwdata	00000002 OSEventMax
811051bc g     F .text	00000040 vEthReleaseReset
81120f60 g     F .text	00000078 .hidden __eqsf2
811194f0 g     F .text	00000154 __d2b
8112ae8c g     F .text	00000118 OSSemPost
8113d1c0 g     O .bss	00000004 initialized
81124d0c g     F .text	000000e4 OSSchedUnlock
81106494 g     F .text	00000170 RTCC_SPI_R_MAC
8113252c g     F .text	00000068 altera_avalon_jtag_uart_read_fd
8111bc58 g     F .text	00000254 _strtoul_r
811374b4 g     F .text	000000e4 alt_get_fd
8113d188 g     O .bss	00000004 OSMemFreeList
81124e68 g     F .text	000000b8 OSStatInit
81101918 g     F .text	00000064 DMA_OPEN_DEVICE
811641dc g     O .bss	00000014 search_data
81136fec g     F .text	00000130 alt_busy_sleep
81127828 g     F .text	000000cc OSFlagQuery
8113d070 g     O .bss	00000004 ul_spwc_d_interface_control_status_register_value
8113d014 g     O .rwdata	00000002 OSTaskCreateExtEn
8110c130 g     F .text	00000074 _split_codec_status
81115498 g     F .text	0000005c _close_r
8110b5c8 g     F .text	00000068 vCouldNotSendEthConfUART
811012d8 g     F .text	000002e8 DDR2_MEMORY_RANDOM_WRITE_TEST
8113d068 g     O .bss	00000004 ul_spwc_b_interface_control_status_register_value
81106c28 g     F .text	00000320 vInitialTask
81135fbc g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81138134 g     F .text	0000007c memcmp
81125170 g     F .text	00000028 OS_Dummy
811325fc g     F .text	00000058 altera_avalon_jtag_uart_close_fd
81164844 g       *ABS*	00000000 __alt_stack_base
81132654 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
8110ddf8 g     F .text	000000d4 _fwrite_r
811360dc g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
8111533c g     F .text	0000015c __swsetup_r
811614d0 g     O .bss	000001e0 OSQTbl
81108ab8 g     F .text	000008e0 vTimeoutCheckerTask
8115fb64 g     O .bss	0000001c xConfEth
81121a10 g     F .text	000008f0 .hidden __divdf3
8113d098 g     O .bss	00000004 ul_tran_f_interface_control_status_register_value
81117274 g     F .text	00000120 __sfp
811641f0 g     O .bss	00000054 boot_sector_data
81101a60 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111976c g     F .text	00000078 __copybits
8113b710 g     O .rwdata	00000408 __malloc_av_
811173c8 g     F .text	00000004 __sinit_lock_release
81105660 g     F .text	00000080 i2c_stop
8110c248 g     F .text	00000054 Verif_Error
8110c29c g     F .text	00000034 toInt
8110af20 g     F .text	0000004c vFailSendPreAckSenderSemaphore
8113d18c g     O .bss	00000004 OSTCBHighRdy
8110cd40 g     F .text	00000720 .hidden __muldf3
8110f0dc g     F .text	0000005c __sread
811176dc g     F .text	0000003c fread
8113d190 g     O .bss	00000004 OSQFreeList
811373a4 g     F .text	00000110 alt_find_file
81137190 g     F .text	000000ac alt_dev_llist_insert
8112403c g     F .text	00000128 __malloc_lock
8110d8b0 g     F .text	00000030 _fprintf_r
811239d8 g     F .text	000000fc sbrk
8110f570 g     F .text	000021e0 ___svfprintf_internal_r
811338a0 g     F .text	00000060 alt_avalon_sgdma_start
81124360 g     F .text	00000148 OSEventNameSet
81116fb0 g     F .text	00000064 _fflush_r
8111f014 g     F .text	000000cc _calloc_r
81108434 g     F .text	000002d8 Init_Simucam_Tasks
8113d194 g     O .bss	00000001 OSRdyGrp
8112d590 g     F .text	00000148 OSTmrStart
8110d898 g     F .text	00000018 fopen
8110197c g     F .text	0000004c DMA_CONFIG
8113d05c g       *ABS*	00000000 __bss_start
81105ad0 g     F .text	00000060 PGEN_READ_REG32
8110ea30 g     F .text	00000128 memset
811048b4 g     F .text	00000060 ul_Transparent_Interface_RX_FIFO_Status_Read
811436c0 g     O .bss	00002000 SPWDTaskStk
81107c48 g     F .text	00000160 setPreParsedFreePos
81136b38 g     F .text	00000060 alt_msgdma_open
81106720 g     F .text	00000508 vInAckHandlerTask
81100544 g     F .text	00000538 DDR2_EEPROM_DUMP
81109690 g     F .text	00000158 main
8110b0a4 g     F .text	00000068 vFailGetMutexReceiverTask
8113d138 g     O .bss	00000004 alt_envp
811456c0 g     O .bss	00002000 SPWATaskStk
8113d114 g     O .bss	00000004 __malloc_max_total_mem
811363dc g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
81105c64 g     F .text	0000003c v_Pattern_Generator_Reset
8110ac5c g     F .text	0000005c ucCrc8wInit
8110b900 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81132594 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81101f14 g     F .text	00000244 POWER_Read
81105818 g     F .text	00000160 i2c_read
8111effc g     F .text	00000018 __swbuf
8113af08 g     O .rodata	00000100 OSUnMapTbl
81121094 g     F .text	000000c8 .hidden __ltsf2
81131930 g     F .text	00000090 alt_up_sd_card_get_attributes
811174a8 g     F .text	00000234 _fread_r
8110af6c g     F .text	00000068 vFailGetCountSemaphoreSenderTask
8113d048 g     O .rwdata	00000008 alt_sgdma_list
8113d00e g     O .rwdata	00000002 OSSemEn
8112e15c g     F .text	000000bc Write_Sector_Data
81131d40 g     F .text	00000628 alt_up_sd_card_write
8112748c g     F .text	0000039c OSFlagPost
8110f228 g     F .text	00000008 __sclose
8110bc08 g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
8111f1d8 g     F .text	00000014 fclose
81125338 g     F .text	00000118 OS_EventTaskWait
8110bad0 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
8110f314 g     F .text	00000240 _strtol_r
8110d578 g     F .text	000001a8 .hidden __truncdfsf2
8113cf74 g     O .rwdata	00000004 ul_spwc_d_spacewire_link_control_status_register_value
81125fc8 g     F .text	000000d4 OS_TaskStatStkChk
8112bda8 g     F .text	00000158 OSTaskDelReq
811156fc g     F .text	00001690 _dtoa_r
811366f8 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
8110e0cc g     F .text	00000814 _malloc_r
811201dc g     F .text	00000030 __ascii_wctomb
81128624 g     F .text	000001d0 OSMutexCreate
8110ba68 g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
8113cfbc g     O .rwdata	00000004 alt_errno
81136224 g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81124df0 g     F .text	00000078 OSStart
811476c0 g     O .bss	00002000 LogTaskStk
81105d84 g     F .text	000004e8 POWER_SPI_RW
8111d5c4 g     F .text	000000dc __submore
81123fd4 g     F .text	00000068 __env_unlock
81118020 g     F .text	000000cc _fwalk
8113d05c g     O .bss	00000004 InitialState
8112c25c g     F .text	000001dc OSTaskResume
811282b4 g     F .text	000000f0 OSMemQuery
81102a74 g     F .text	00000130 SPWC_READ_REG32
8113d020 g     O .rwdata	00000002 OSTaskStatEn
81164844 g       *ABS*	00000000 __alt_stack_limit
81118570 g     F .text	00000064 _mbtowc_r
8113cffa g     O .rwdata	00000002 OSMemMax
8112a184 g     F .text	00000178 OSQPostFront
81119918 g     F .text	000000d0 putc
81120dac g     F .text	00000084 .hidden __divsi3
8113d195 g     O .bss	00000006 OSRdyTbl
8113cfd4 g     O .rwdata	00000002 OSDebugEn
81117718 g     F .text	0000012c _malloc_trim_r
81138494 g       *ABS*	00000000 __CTOR_END__
8113d108 g     O .bss	00000008 xSdHandle
8110c718 g     F .text	00000404 .hidden __mulsf3
8113cfec g     O .rwdata	00000002 OSFlagNodeSize
8113d060 g     O .bss	00000004 pnt_memory
8113d1cc g     O .bss	00000004 status_register
8113d034 g     O .rwdata	00000002 OSTmrCfgMax
8110b698 g     F .text	00000068 vFailSetPreAckSenderBuffer
8111a108 g     F .text	000000dc strcmp
8113d1d4 g     O .bss	00000004 command_register
81129710 g     F .text	000001b4 OSQCreate
8112bf00 g     F .text	000001a0 OSTaskNameGet
8115da14 g     O .bss	00000010 xReceivedACK
8112a2fc g     F .text	00000214 OSQPostOpt
81124f20 g     F .text	00000228 OSTimeTick
8113d01c g     O .rwdata	00000002 OSTaskMax
81138494 g       *ABS*	00000000 __DTOR_LIST__
8112a7dc g     F .text	000000e0 OSSemCreate
8113d040 g     O .rwdata	00000002 OSTmrWheelSize
8110bfcc g     F .text	00000058 _reg_read
811292bc g     F .text	00000174 OSMutexQuery
81122300 g     F .text	00000088 .hidden __nedf2
8113d016 g     O .rwdata	00000002 OSTaskDelEn
8112afa4 g     F .text	00000118 OSSemQuery
811298c4 g     F .text	00000288 OSQDel
81129ea0 g     F .text	00000174 OSQPendAbort
8113d0e8 g     O .bss	00000004 xMutexPreParsed
8112e02c g     F .text	00000040 alt_irq_init
8112396c g     F .text	0000006c alt_release_fd
8112e34c g     F .text	000000bc get_cluster_flag
81136e30 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
8110f068 g     F .text	00000074 sprintf
8113a7c0 g     O .rodata	00000100 .hidden __clz_tab
811081dc g     F .text	00000054 SPWCTask
8112e920 g     F .text	00000294 Write_File_Record_At_Offset
8110b10c g     F .text	00000068 vFailGetMutexTxUARTSenderTask
8113d120 g     O .bss	00000004 _PathLocale
8112d6d8 g     F .text	000001e8 OSTmrStop
81109e0c g     F .text	00000050 usiGetIdCMD
8111b868 g     F .text	00000108 strtof
811380e0 g     F .text	00000014 atexit
81120fd8 g     F .text	000000bc .hidden __gesf2
8110f230 g     F .text	0000004c strcspn
811152d4 g     F .text	00000068 _write_r
8110b81c g     F .text	0000004c vFailInAckHandlerTaskCreate
81124c78 g     F .text	00000094 OSSchedLock
81118304 g     F .text	00000018 setlocale
81136184 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
811616b0 g     O .bss	00000800 OSTmrTaskStk
8110ef8c g     F .text	00000044 scanf
81126880 g     F .text	00000110 OSFlagCreate
8112ebb4 g     F .text	00000688 Check_for_DOS_FAT
81130a60 g     F .text	000002d0 create_file
8111a100 g     F .text	00000008 nanf
8113cf90 g     O .rwdata	00000004 _impure_ptr
8113d1d0 g     O .bss	00000004 CSD_register_w0
8113cf78 g     O .rwdata	00000004 ul_spwc_e_spacewire_link_control_status_register_value
8113d130 g     O .bss	00000004 alt_argc
81108284 g     F .text	00000054 SPWETask
811496c0 g     O .bss	00002000 SPWBTaskStk
81116d8c g     F .text	00000224 __sflush_r
81118390 g     F .text	000000b4 _mbrtowc_r
8113d2c0 g     O .bss	00000400 szData
811372a4 g     F .text	00000068 _do_dtors
811182f0 g     F .text	00000008 __locale_cjk_lang
81102298 g     F .text	000006ac sense_log
8113cfe6 g     O .rwdata	00000002 OSEventMultiEn
8110d90c g     F .text	00000004 _fseek_r
8115da24 g     O .bss	00002000 vParserCommTask_stk
8110acb8 g     F .text	00000070 printErrorTask
8112cea8 g     F .text	000001c4 OSTmrCreate
8114b6c0 g     O .bss	00002000 SPWGTaskStk
8110ed54 g     F .text	000001dc __srefill_r
8113d0ec g     O .bss	00000004 xMutexBuffer32
81126990 g     F .text	00000250 OSFlagDel
8113d19c g     O .bss	00000004 OSEventFreeList
81100020 g       .exceptions	00000000 alt_irq_entry
81118524 g     F .text	0000004c __ascii_mbtowc
81119378 g     F .text	00000064 __ulp
81126e64 g     F .text	000005c0 OSFlagPend
8113d032 g     O .rwdata	00000002 OSTmrEn
811173e4 g     F .text	00000018 __fp_unlock_all
81107f4c g     F .text	000001a4 setPreAckReceiverFreePos
8113cfa8 g     O .rwdata	00000008 alt_fs_list
8113d0a0 g     O .bss	00000004 ul_tran_h_interface_control_status_register_value
8112f3fc g     F .text	00000274 check_file_name_for_FAT16_compliance
8112d1ac g     F .text	00000140 OSTmrNameGet
81125da8 g     F .text	0000007c OS_StrCopy
8113d1dc g     O .bss	00000004 buffer_memory
8113d084 g     O .bss	00000004 ul_tran_a_interface_control_status_register_value
8110b4f8 g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
81102e7c g     F .text	00000330 b_SpaceWire_Interface_Mode_Control
81104914 g     F .text	0000005c b_Transparent_Interface_RX_FIFO_Status_Empty
8113cffc g     O .rwdata	00000002 OSMemNameSize
81104868 g     F .text	0000004c v_Transparent_Interface_RX_FIFO_Reset
81137fc0 g     F .text	00000028 OSInitHookEnd
8110b768 g     F .text	00000068 vFailSetPreAckReceiverBuffer
8113d028 g     O .rwdata	00000002 OSTCBPrioTblMax
8111831c g     F .text	0000000c localeconv
8113d0f0 g     O .bss	00000004 xTimerRetransmission
81107648 g     F .text	000001f0 vReceiverUartTask
8113d024 g     O .rwdata	00000002 OSTaskStatStkChkEn
8113d0f4 g     O .bss	00000004 xMutexBuffer128
8114d6c0 g     O .bss	00002000 MemDMATaskStk
81137598 g     F .text	00000058 alt_ic_isr_register
8113cff8 g     O .rwdata	00000002 OSMemEn
8113cf64 g     O .rwdata	00000004 alt_stack_limit_value
8113d094 g     O .bss	00000004 ul_tran_e_interface_control_status_register_value
8110decc g     F .text	0000003c fwrite
8113d1e0 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
8113d002 g     O .rwdata	00000002 OSMutexEn
8113cf6c g     O .rwdata	00000004 ul_spwc_b_spacewire_link_control_status_register_value
81108134 g     F .text	00000054 SPWATask
8113d05c g       *ABS*	00000000 _edata
811015c0 g     F .text	000002d8 DDR2_MEMORY_RANDOM_READ_TEST
811341e8 g     F .text	00000068 altera_avalon_uart_read_fd
81164844 g       *ABS*	00000000 _end
81164244 g     O .bss	00000500 active_files
8113d1a0 g     O .bss	00000001 OSIntNesting
8110b1c0 g     F .text	0000004c vFailInitialization
81104b88 g     F .text	00000058 uc_Transparent_Interface_TX_FIFO_Status_Used
8113d0f8 g     O .bss	00000004 xSemCountBuffer32
8111f1ec g     F .text	0000016c __fputwc
811151f4 g     F .text	00000070 vfscanf
81130d30 g     F .text	00000150 copy_file_record_name_to_string
81132c28 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
81102c80 g     F .text	000001fc b_SpaceWire_Interface_Enable_Control
8112cc00 g     F .text	000001dc OSTimeDlyResume
8112f23c g     F .text	000000f4 Look_for_FAT16
81126d10 g     F .text	00000154 OSFlagNameSet
8113d0fc g     O .bss	00000004 xMutexBuffer64
81105cf0 g     F .text	00000094 Pattern_Generator_Configure_Initial_State
8112c438 g     F .text	000001c8 OSTaskStkChk
81137680 g     F .text	00000094 alt_ic_irq_disable
8113cffe g     O .rwdata	00000002 OSMemSize
8110b2f0 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
81133a2c g     F .text	00000094 alt_avalon_sgdma_construct_descriptor
8110f140 g     F .text	00000084 __swrite
8113cf98 g     O .rwdata	00000004 __malloc_trim_threshold
811182e4 g     F .text	0000000c __locale_msgcharset
8113d1a4 g     O .bss	00000004 OSTCBCur
8110bb38 g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
811380f4 g     F .text	00000040 exit
8112909c g     F .text	00000220 OSMutexPost
8113115c g     F .text	000003c0 alt_up_sd_card_find_next
8113d000 g     O .rwdata	00000002 OSMemTblSize
811180ec g     F .text	000000cc _fwalk_reent
8113657c g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110cc48 g     F .text	000000f8 .hidden __floatunsisf
81119174 g     F .text	00000204 __mdiff
8110b258 g     F .text	0000004c vFailSenderCreate
81120e30 g     F .text	00000074 .hidden __modsi3
8113d100 g     O .bss	00000004 xMutexSenderACK
8110b998 g     F .text	00000068 vFailGetBlockingSemTimeoutTask
8113cf88 g     O .rwdata	00000004 __ctype_ptr__
8110b700 g     F .text	00000068 vFailSetPreParsedBuffer
8112e26c g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
811173c0 g     F .text	00000004 __sfp_lock_release
81124ac0 g     F .text	00000064 OSInit
811059f8 g     F .text	00000078 bSetPainelLeds
81135cc4 g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
811083d4 g     F .text	00000060 LogTask
811039ac g     F .text	0000005c b_SpaceWire_Interface_TimeCode_Arrived
8113d1a8 g     O .bss	00000004 OSTmrTime
8112c7ec g     F .text	0000012c OSTaskQuery
8112a674 g     F .text	000000b0 OS_QInit
8111a030 g     F .text	000000d0 __sccl
8110d784 g     F .text	0000000c atoi
81125e24 g     F .text	0000005c OS_StrLen
811280b8 g     F .text	0000011c OSMemNameSet
8113a8c0 g     O .rodata	00000101 _ctype_
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110b3c0 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
81103d30 g     F .text	000000c4 b_SpaceWire_Interface_Send_SpaceWire_Data
8113d01a g     O .rwdata	00000002 OSTaskProfileEn
81135b94 g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
8113d104 g     O .bss	00000004 xTxUARTMutex
8113d1ac g     O .bss	00000004 OSTime
8113cfa0 g     O .rwdata	00000004 __mbtowc
81134808 g     F .text	0000005c altera_avalon_uart_close
8113d1b0 g     O .bss	00000004 OSTmrSem
81161eb0 g     O .bss	00000800 OSTaskIdleStk
8110d79c g     F .text	000000fc _fopen_r
811041b8 g     F .text	00000074 b_Transparent_Interface_Write_Register
81138458 g     F .text	0000003c _exit
81136eb8 g     F .text	00000134 alt_alarm_start
81126be0 g     F .text	00000130 OSFlagNameGet
8112cddc g     F .text	00000064 OSTimeGet
8113d0b8 g     O .bss	00000001 error_code
811319c0 g     F .text	00000380 alt_up_sd_card_read
8110df08 g     F .text	000001c4 __smakebuf_r
81104d80 g     F .text	00000150 b_Transparent_Interface_Send_SpaceWire_Data
8113d050 g     O .rwdata	00000008 alt_msgdma_list
8110f27c g     F .text	00000098 strlen
81106388 g     F .text	000000b4 uc_spi_get_byte
811049cc g     F .text	00000058 uc_Transparent_Interface_RX_FIFO_Status_Used
81137ef0 g     F .text	00000028 OSTaskSwHook
811236c8 g     F .text	0000015c open
811626b0 g     O .bss	00000c30 OSEventTbl
81122388 g     F .text	000000dc .hidden __gedf2
8113d078 g     O .bss	00000004 ul_spwc_f_interface_control_status_register_value
8115fa24 g     O .bss	00000010 xSenderACK
81137be4 g     F .text	00000044 alt_putchar
811632e0 g     O .bss	00000e58 OSTCBTbl
8111f504 g     F .text	00000838 __gethex
8112b0bc g     F .text	00000108 OSSemSet
8113cfa4 g     O .rwdata	00000004 __wctomb
81109664 g     F .text	0000002c vVariablesInitialization
8111d958 g     F .text	00000018 __sprint_r
81103a80 g     F .text	00000068 uc_SpaceWire_Interface_Get_TX_Div
8113cf80 g     O .rwdata	00000004 ul_spwc_g_spacewire_link_control_status_register_value
8110ad88 g     F .text	0000004c vFailCreateSemaphoreResources
81102ba4 g     F .text	00000074 b_SpaceWire_Interface_Write_Register
8113d058 g     O .rwdata	00000004 alt_priority_mask
8112a8bc g     F .text	00000248 OSSemDel
8113d1b4 g     O .bss	00000004 OSFlagFreeList
811062c4 g     F .text	000000c4 v_spi_send_byte
81106604 g     F .text	000000d0 bSSDisplayConfig
811375f0 g     F .text	00000090 alt_ic_irq_enable
8113cfe0 g     O .rwdata	00000002 OSEventNameSize
81113950 g     F .text	0000001c __vfprintf_internal
81105a70 g     F .text	00000060 PGEN_WRITE_REG32
8113d1b8 g     O .bss	00000001 OSStatRdy
81164138 g     O .bss	000000a4 OSTCBPrioTbl
811348a8 g     F .text	00000270 altera_avalon_uart_read
8112020c g     F .text	00000064 _wctomb_r
81123f08 g     F .text	000000cc __env_lock
8113d026 g     O .rwdata	00000002 OSTaskSwHookEn
811335b4 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_mem_desc_burst
811046ec g     F .text	0000017c v_Transparent_Interface_Interrupts_Flags_Clear
8114f6c0 g     O .bss	00002000 SPWCTaskStk
81122558 g     F .text	00000904 .hidden __subdf3
8115fa34 g     O .bss	00000130 xPreParsed
81109b7c g     F .text	00000290 vSendEthConf
81118b88 g     F .text	000000b0 __lo0bits
81113a30 g     F .text	000017c4 __svfscanf_r
8113cfc4 g     O .rwdata	00000008 alt_alarm_list
8111d6a0 g     F .text	0000019c _ungetc_r
8113cfee g     O .rwdata	00000002 OSFlagWidth
8113723c g     F .text	00000068 _do_ctors
811019c8 g     F .text	0000004c DMA_BUSY
81120114 g     F .text	000000c8 wcrtomb
811230b4 g     F .text	000000d8 close
81104490 g     F .text	000001fc v_Transparent_Interface_Interrupts_Enable_Control
8113d148 g     O .bss	00000004 alt_envsem
81103ca0 g     F .text	00000090 b_SpaceWire_Interface_Write_TX_Data
8113d1bc g     O .bss	00000004 OSIdleCtrRun
811082d8 g     F .text	00000054 SPWFTask
81125148 g     F .text	00000028 OSVersion
8113d038 g     O .rwdata	00000002 OSTmrCfgWheelSize
81101898 g     F .text	00000080 xorshift32
8112c918 g     F .text	00000078 OS_TaskStkClr
8110be90 g     F .text	0000003c siOpenFile
8113d012 g     O .rwdata	00000002 OSTaskCreateEn
8110ae88 g     F .text	0000004c vFailSendPreParsedSemaphore
8112f730 g     F .text	000002a4 match_file_record_to_name_ext
81125770 g     F .text	00000070 OS_EventWaitListInit
81134034 g     F .text	000000b0 alt_avalon_sgdma_init
8111f37c g     F .text	00000088 fputwc
8110ae20 g     F .text	00000068 vFailSendxSemCommInit
81137fe8 g     F .text	00000028 OSTaskIdleHook
811173c4 g     F .text	00000004 __sinit_lock_acquire
811188ec g     F .text	00000128 __multadd
8112c600 g     F .text	000001ec OSTaskSuspend
811188c4 g     F .text	00000028 _Bfree
81125e80 g     F .text	00000064 OS_TaskIdle
8113d03e g     O .rwdata	00000002 OSTmrTblSize
8112a510 g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	1124b240 	call	81124b24 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a045b4 	movhi	r2,33046
81100150:	1091d104 	addi	r2,r2,18244
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a045b4 	movhi	r2,33046
81100168:	1091d104 	addi	r2,r2,18244
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	1124b780 	call	81124b78 <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a0a617 	ldw	r2,-32104(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a0a617 	ldw	r2,-32104(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
8110025c:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100260:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
81100264:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
81100268:	d693d914 	ori	gp,gp,20324
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
8110026c:	00a044f4 	movhi	r2,33043
    ori r2, r2, %lo(__bss_start)
81100270:	10b41714 	ori	r2,r2,53340

    movhi r3, %hi(__bss_end)
81100274:	00e045b4 	movhi	r3,33046
    ori r3, r3, %lo(__bss_end)
81100278:	18d21114 	ori	r3,r3,18500

    beq r2, r3, 1f
8110027c:	10c00326 	beq	r2,r3,8110028c <_start+0x30>

0:
    stw zero, (r2)
81100280:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
81100284:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100288:	10fffd36 	bltu	r2,r3,81100280 <__reset+0xfb0e0280>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
8110028c:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100290:	11234f40 	call	811234f4 <alt_main>

81100294 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100294:	003fff06 	br	81100294 <__reset+0xfb0e0294>

81100298 <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
81100298:	defff604 	addi	sp,sp,-40
8110029c:	de00012e 	bgeu	sp,et,811002a4 <DDR2_EEPROM_TEST+0xc>
811002a0:	003b68fa 	trap	3
811002a4:	dfc00915 	stw	ra,36(sp)
811002a8:	df000815 	stw	fp,32(sp)
811002ac:	df000804 	addi	fp,sp,32
811002b0:	2005883a 	mov	r2,r4
811002b4:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
811002b8:	01204534 	movhi	r4,33044
811002bc:	21212504 	addi	r4,r4,-31596
811002c0:	110ed240 	call	8110ed24 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002c4:	00bfe804 	movi	r2,-96
811002c8:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
811002cc:	00800044 	movi	r2,1
811002d0:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
811002d4:	e0bfff03 	ldbu	r2,-4(fp)
811002d8:	10c00060 	cmpeqi	r3,r2,1
811002dc:	1800031e 	bne	r3,zero,811002ec <DDR2_EEPROM_TEST+0x54>
811002e0:	108000a0 	cmpeqi	r2,r2,2
811002e4:	1000081e 	bne	r2,zero,81100308 <DDR2_EEPROM_TEST+0x70>
811002e8:	00000e06 	br	81100324 <DDR2_EEPROM_TEST+0x8c>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811002ec:	00a00034 	movhi	r2,32768
811002f0:	10817404 	addi	r2,r2,1488
811002f4:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811002f8:	00a00034 	movhi	r2,32768
811002fc:	10817804 	addi	r2,r2,1504
81100300:	e0bffb15 	stw	r2,-20(fp)
    break;
81100304:	00000d06 	br	8110033c <DDR2_EEPROM_TEST+0xa4>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100308:	00a00034 	movhi	r2,32768
8110030c:	10815004 	addi	r2,r2,1344
81100310:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81100314:	00a00034 	movhi	r2,32768
81100318:	10815404 	addi	r2,r2,1360
8110031c:	e0bffb15 	stw	r2,-20(fp)
    break;
81100320:	00000606 	br	8110033c <DDR2_EEPROM_TEST+0xa4>
    default:
      bSuccess = FALSE;
81100324:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100328:	01204534 	movhi	r4,33044
8110032c:	21212e04 	addi	r4,r4,-31560
81100330:	110ed240 	call	8110ed24 <puts>
      return bSuccess;
81100334:	e0bff917 	ldw	r2,-28(fp)
81100338:	00007d06 	br	81100530 <DDR2_EEPROM_TEST+0x298>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
8110033c:	01204534 	movhi	r4,33044
81100340:	21213a04 	addi	r4,r4,-31512
81100344:	110ed240 	call	8110ed24 <puts>
  usleep(20*1000);
81100348:	01138804 	movi	r4,20000
8110034c:	1123c880 	call	81123c88 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
81100350:	e03ffc15 	stw	zero,-16(fp)
81100354:	00002006 	br	811003d8 <DDR2_EEPROM_TEST+0x140>
    ControlAddr = i;
81100358:	e0bffc17 	ldw	r2,-16(fp)
8110035c:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
81100360:	e0bffd03 	ldbu	r2,-12(fp)
81100364:	10c03fcc 	andi	r3,r2,255
81100368:	18c0201c 	xori	r3,r3,128
8110036c:	18ffe004 	addi	r3,r3,-128
81100370:	e13ffd43 	ldbu	r4,-11(fp)
81100374:	e0bffe04 	addi	r2,fp,-8
81100378:	d8800015 	stw	r2,0(sp)
8110037c:	200f883a 	mov	r7,r4
81100380:	180d883a 	mov	r6,r3
81100384:	e17ffb17 	ldw	r5,-20(fp)
81100388:	e13ffa17 	ldw	r4,-24(fp)
8110038c:	11053640 	call	81105364 <I2C_Read>
81100390:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
81100394:	e0bff917 	ldw	r2,-28(fp)
81100398:	10000926 	beq	r2,zero,811003c0 <DDR2_EEPROM_TEST+0x128>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
8110039c:	e0bffd43 	ldbu	r2,-11(fp)
811003a0:	e0fffe03 	ldbu	r3,-8(fp)
811003a4:	18c03fcc 	andi	r3,r3,255
811003a8:	180d883a 	mov	r6,r3
811003ac:	100b883a 	mov	r5,r2
811003b0:	01204534 	movhi	r4,33044
811003b4:	21214004 	addi	r4,r4,-31488
811003b8:	110ebf80 	call	8110ebf8 <printf>
811003bc:	00000306 	br	811003cc <DDR2_EEPROM_TEST+0x134>
    }else{
      printf("Failed to read EEPROM\n");
811003c0:	01204534 	movhi	r4,33044
811003c4:	21214504 	addi	r4,r4,-31468
811003c8:	110ed240 	call	8110ed24 <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
811003cc:	e0bffc17 	ldw	r2,-16(fp)
811003d0:	10800044 	addi	r2,r2,1
811003d4:	e0bffc15 	stw	r2,-16(fp)
811003d8:	e0bffc17 	ldw	r2,-16(fp)
811003dc:	10804008 	cmpgei	r2,r2,256
811003e0:	1000021e 	bne	r2,zero,811003ec <DDR2_EEPROM_TEST+0x154>
811003e4:	e0bff917 	ldw	r2,-28(fp)
811003e8:	103fdb1e 	bne	r2,zero,81100358 <__reset+0xfb0e0358>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
811003ec:	e0bff917 	ldw	r2,-28(fp)
811003f0:	10000426 	beq	r2,zero,81100404 <DDR2_EEPROM_TEST+0x16c>
    printf("DDR2 EEPROM Read Test Completed\n\n");
811003f4:	01204534 	movhi	r4,33044
811003f8:	21214b04 	addi	r4,r4,-31444
811003fc:	110ed240 	call	8110ed24 <puts>
81100400:	00000306 	br	81100410 <DDR2_EEPROM_TEST+0x178>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
81100404:	01204534 	movhi	r4,33044
81100408:	21215404 	addi	r4,r4,-31408
8110040c:	110ed240 	call	8110ed24 <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
81100410:	01204534 	movhi	r4,33044
81100414:	21215c04 	addi	r4,r4,-31376
81100418:	110ed240 	call	8110ed24 <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
8110041c:	00800484 	movi	r2,18
81100420:	e0bffd85 	stb	r2,-10(fp)
81100424:	00bfe004 	movi	r2,-128
81100428:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
8110042c:	01138804 	movi	r4,20000
81100430:	1123c880 	call	81123c88 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
81100434:	e0bffd03 	ldbu	r2,-12(fp)
81100438:	10c03fcc 	andi	r3,r2,255
8110043c:	18c0201c 	xori	r3,r3,128
81100440:	18ffe004 	addi	r3,r3,-128
81100444:	e13ffdc3 	ldbu	r4,-9(fp)
81100448:	e0bffd83 	ldbu	r2,-10(fp)
8110044c:	d8800015 	stw	r2,0(sp)
81100450:	200f883a 	mov	r7,r4
81100454:	180d883a 	mov	r6,r3
81100458:	e17ffb17 	ldw	r5,-20(fp)
8110045c:	e13ffa17 	ldw	r4,-24(fp)
81100460:	11052840 	call	81105284 <I2C_Write>
81100464:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
81100468:	e0bff917 	ldw	r2,-28(fp)
8110046c:	1000041e 	bne	r2,zero,81100480 <DDR2_EEPROM_TEST+0x1e8>
    printf("Failed to write EEPROM\n");            
81100470:	01204534 	movhi	r4,33044
81100474:	21216204 	addi	r4,r4,-31352
81100478:	110ed240 	call	8110ed24 <puts>
8110047c:	00002006 	br	81100500 <DDR2_EEPROM_TEST+0x268>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
81100480:	e0bffd03 	ldbu	r2,-12(fp)
81100484:	10c03fcc 	andi	r3,r2,255
81100488:	18c0201c 	xori	r3,r3,128
8110048c:	18ffe004 	addi	r3,r3,-128
81100490:	e13ffdc3 	ldbu	r4,-9(fp)
81100494:	e0bffe44 	addi	r2,fp,-7
81100498:	d8800015 	stw	r2,0(sp)
8110049c:	200f883a 	mov	r7,r4
811004a0:	180d883a 	mov	r6,r3
811004a4:	e17ffb17 	ldw	r5,-20(fp)
811004a8:	e13ffa17 	ldw	r4,-24(fp)
811004ac:	11053640 	call	81105364 <I2C_Read>
811004b0:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
811004b4:	e0bff917 	ldw	r2,-28(fp)
811004b8:	1000041e 	bne	r2,zero,811004cc <DDR2_EEPROM_TEST+0x234>
      printf("Failed to read EEPROM for verify\n");            
811004bc:	01204534 	movhi	r4,33044
811004c0:	21216804 	addi	r4,r4,-31328
811004c4:	110ed240 	call	8110ed24 <puts>
811004c8:	00000d06 	br	81100500 <DDR2_EEPROM_TEST+0x268>
    } else {
      if (ReadData != WriteData){
811004cc:	e0bffe43 	ldbu	r2,-7(fp)
811004d0:	10c03fcc 	andi	r3,r2,255
811004d4:	e0bffd83 	ldbu	r2,-10(fp)
811004d8:	18800926 	beq	r3,r2,81100500 <DDR2_EEPROM_TEST+0x268>
        bSuccess = FALSE;
811004dc:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
811004e0:	e0bffe43 	ldbu	r2,-7(fp)
811004e4:	10803fcc 	andi	r2,r2,255
811004e8:	e0fffd83 	ldbu	r3,-10(fp)
811004ec:	180d883a 	mov	r6,r3
811004f0:	100b883a 	mov	r5,r2
811004f4:	01204534 	movhi	r4,33044
811004f8:	21217104 	addi	r4,r4,-31292
811004fc:	110ebf80 	call	8110ebf8 <printf>
      }
    }
  }
  if (bSuccess){
81100500:	e0bff917 	ldw	r2,-28(fp)
81100504:	10000426 	beq	r2,zero,81100518 <DDR2_EEPROM_TEST+0x280>
    printf("DDR2 EEPROM Write Test Completed\n\n");
81100508:	01204534 	movhi	r4,33044
8110050c:	21218004 	addi	r4,r4,-31232
81100510:	110ed240 	call	8110ed24 <puts>
81100514:	00000306 	br	81100524 <DDR2_EEPROM_TEST+0x28c>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
81100518:	01204534 	movhi	r4,33044
8110051c:	21218904 	addi	r4,r4,-31196
81100520:	110ed240 	call	8110ed24 <puts>
  }
  printf("\n");
81100524:	01000284 	movi	r4,10
81100528:	110ec440 	call	8110ec44 <putchar>

  return bSuccess;
8110052c:	e0bff917 	ldw	r2,-28(fp)
}
81100530:	e037883a 	mov	sp,fp
81100534:	dfc00117 	ldw	ra,4(sp)
81100538:	df000017 	ldw	fp,0(sp)
8110053c:	dec00204 	addi	sp,sp,8
81100540:	f800283a 	ret

81100544 <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
81100544:	deffb704 	addi	sp,sp,-292
81100548:	de00012e 	bgeu	sp,et,81100550 <DDR2_EEPROM_DUMP+0xc>
8110054c:	003b68fa 	trap	3
81100550:	dfc04815 	stw	ra,288(sp)
81100554:	df004715 	stw	fp,284(sp)
81100558:	df004704 	addi	fp,sp,284
8110055c:	2005883a 	mov	r2,r4
81100560:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
81100564:	01204534 	movhi	r4,33044
81100568:	21219104 	addi	r4,r4,-31164
8110056c:	110ed240 	call	8110ed24 <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100570:	00bfe804 	movi	r2,-96
81100574:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
81100578:	00800044 	movi	r2,1
8110057c:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
81100580:	e0bfff03 	ldbu	r2,-4(fp)
81100584:	10c00060 	cmpeqi	r3,r2,1
81100588:	1800031e 	bne	r3,zero,81100598 <DDR2_EEPROM_DUMP+0x54>
8110058c:	108000a0 	cmpeqi	r2,r2,2
81100590:	1000081e 	bne	r2,zero,811005b4 <DDR2_EEPROM_DUMP+0x70>
81100594:	00000e06 	br	811005d0 <DDR2_EEPROM_DUMP+0x8c>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100598:	00a00034 	movhi	r2,32768
8110059c:	10817404 	addi	r2,r2,1488
811005a0:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811005a4:	00a00034 	movhi	r2,32768
811005a8:	10817804 	addi	r2,r2,1504
811005ac:	e0bfbb15 	stw	r2,-276(fp)
    break;
811005b0:	00000d06 	br	811005e8 <DDR2_EEPROM_DUMP+0xa4>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811005b4:	00a00034 	movhi	r2,32768
811005b8:	10815004 	addi	r2,r2,1344
811005bc:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
811005c0:	00a00034 	movhi	r2,32768
811005c4:	10815404 	addi	r2,r2,1360
811005c8:	e0bfbb15 	stw	r2,-276(fp)
    break;
811005cc:	00000606 	br	811005e8 <DDR2_EEPROM_DUMP+0xa4>
    default:
      bSuccess = FALSE;
811005d0:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
811005d4:	01204534 	movhi	r4,33044
811005d8:	21219a04 	addi	r4,r4,-31128
811005dc:	110ed240 	call	8110ed24 <puts>
      return bSuccess;
811005e0:	e0bfbe17 	ldw	r2,-264(fp)
811005e4:	00012006 	br	81100a68 <DDR2_EEPROM_DUMP+0x524>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
811005e8:	e0bfbd03 	ldbu	r2,-268(fp)
811005ec:	10c03fcc 	andi	r3,r2,255
811005f0:	18c0201c 	xori	r3,r3,128
811005f4:	18ffe004 	addi	r3,r3,-128
811005f8:	e13fbf04 	addi	r4,fp,-260
811005fc:	00804004 	movi	r2,256
81100600:	d8800015 	stw	r2,0(sp)
81100604:	200f883a 	mov	r7,r4
81100608:	180d883a 	mov	r6,r3
8110060c:	e17fbb17 	ldw	r5,-276(fp)
81100610:	e13fba17 	ldw	r4,-280(fp)
81100614:	110546c0 	call	8110546c <I2C_MultipleRead>
81100618:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
8110061c:	e0bfbe17 	ldw	r2,-264(fp)
81100620:	10010b26 	beq	r2,zero,81100a50 <DDR2_EEPROM_DUMP+0x50c>
    for(i = 0; i < 256 && bSuccess; i++){
81100624:	e03fbc15 	stw	zero,-272(fp)
81100628:	00010306 	br	81100a38 <DDR2_EEPROM_DUMP+0x4f4>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
8110062c:	e0ffbf04 	addi	r3,fp,-260
81100630:	e0bfbc17 	ldw	r2,-272(fp)
81100634:	1885883a 	add	r2,r3,r2
81100638:	10800003 	ldbu	r2,0(r2)
8110063c:	10803fcc 	andi	r2,r2,255
81100640:	100d883a 	mov	r6,r2
81100644:	e17fbc17 	ldw	r5,-272(fp)
81100648:	01204534 	movhi	r4,33044
8110064c:	2121a604 	addi	r4,r4,-31080
81100650:	110ebf80 	call	8110ebf8 <printf>
      if (i == 0)
81100654:	e0bfbc17 	ldw	r2,-272(fp)
81100658:	1000041e 	bne	r2,zero,8110066c <DDR2_EEPROM_DUMP+0x128>
        printf("(Number of SPD Bytes Used)\n");
8110065c:	01204534 	movhi	r4,33044
81100660:	2121ab04 	addi	r4,r4,-31060
81100664:	110ed240 	call	8110ed24 <puts>
81100668:	0000f006 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 1)
8110066c:	e0bfbc17 	ldw	r2,-272(fp)
81100670:	10800058 	cmpnei	r2,r2,1
81100674:	1000041e 	bne	r2,zero,81100688 <DDR2_EEPROM_DUMP+0x144>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
81100678:	01204534 	movhi	r4,33044
8110067c:	2121b204 	addi	r4,r4,-31032
81100680:	110ed240 	call	8110ed24 <puts>
81100684:	0000e906 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 2)
81100688:	e0bfbc17 	ldw	r2,-272(fp)
8110068c:	10800098 	cmpnei	r2,r2,2
81100690:	1000041e 	bne	r2,zero,811006a4 <DDR2_EEPROM_DUMP+0x160>
        printf("(Basic Memory Type[08h:DDR2])\n");
81100694:	01204534 	movhi	r4,33044
81100698:	2121be04 	addi	r4,r4,-30984
8110069c:	110ed240 	call	8110ed24 <puts>
811006a0:	0000e206 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 3)
811006a4:	e0bfbc17 	ldw	r2,-272(fp)
811006a8:	108000d8 	cmpnei	r2,r2,3
811006ac:	1000041e 	bne	r2,zero,811006c0 <DDR2_EEPROM_DUMP+0x17c>
        printf("(Number of Row Addresses on Assembly)\n");
811006b0:	01204534 	movhi	r4,33044
811006b4:	2121c604 	addi	r4,r4,-30952
811006b8:	110ed240 	call	8110ed24 <puts>
811006bc:	0000db06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 4)
811006c0:	e0bfbc17 	ldw	r2,-272(fp)
811006c4:	10800118 	cmpnei	r2,r2,4
811006c8:	1000041e 	bne	r2,zero,811006dc <DDR2_EEPROM_DUMP+0x198>
        printf("(Number of Column Addresses on Assembly)\n");
811006cc:	01204534 	movhi	r4,33044
811006d0:	2121d004 	addi	r4,r4,-30912
811006d4:	110ed240 	call	8110ed24 <puts>
811006d8:	0000d406 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 5)
811006dc:	e0bfbc17 	ldw	r2,-272(fp)
811006e0:	10800158 	cmpnei	r2,r2,5
811006e4:	1000041e 	bne	r2,zero,811006f8 <DDR2_EEPROM_DUMP+0x1b4>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
811006e8:	01204534 	movhi	r4,33044
811006ec:	2121db04 	addi	r4,r4,-30868
811006f0:	110ed240 	call	8110ed24 <puts>
811006f4:	0000cd06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 6)
811006f8:	e0bfbc17 	ldw	r2,-272(fp)
811006fc:	10800198 	cmpnei	r2,r2,6
81100700:	1000041e 	bne	r2,zero,81100714 <DDR2_EEPROM_DUMP+0x1d0>
        printf("(Module Data Width)\n");
81100704:	01204534 	movhi	r4,33044
81100708:	2121e704 	addi	r4,r4,-30820
8110070c:	110ed240 	call	8110ed24 <puts>
81100710:	0000c606 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 7)
81100714:	e0bfbc17 	ldw	r2,-272(fp)
81100718:	108001d8 	cmpnei	r2,r2,7
8110071c:	1000041e 	bne	r2,zero,81100730 <DDR2_EEPROM_DUMP+0x1ec>
        printf("(Module Data Width, Continued)\n");
81100720:	01204534 	movhi	r4,33044
81100724:	2121ec04 	addi	r4,r4,-30800
81100728:	110ed240 	call	8110ed24 <puts>
8110072c:	0000bf06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 16)
81100730:	e0bfbc17 	ldw	r2,-272(fp)
81100734:	10800418 	cmpnei	r2,r2,16
81100738:	1000041e 	bne	r2,zero,8110074c <DDR2_EEPROM_DUMP+0x208>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
8110073c:	01204534 	movhi	r4,33044
81100740:	2121f404 	addi	r4,r4,-30768
81100744:	110ed240 	call	8110ed24 <puts>
81100748:	0000b806 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 13)
8110074c:	e0bfbc17 	ldw	r2,-272(fp)
81100750:	10800358 	cmpnei	r2,r2,13
81100754:	1000041e 	bne	r2,zero,81100768 <DDR2_EEPROM_DUMP+0x224>
        printf("(Primary SDRAM width)\n");
81100758:	01204534 	movhi	r4,33044
8110075c:	21220104 	addi	r4,r4,-30716
81100760:	110ed240 	call	8110ed24 <puts>
81100764:	0000b106 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 14)
81100768:	e0bfbc17 	ldw	r2,-272(fp)
8110076c:	10800398 	cmpnei	r2,r2,14
81100770:	1000041e 	bne	r2,zero,81100784 <DDR2_EEPROM_DUMP+0x240>
        printf("(ECC SDRAM width)\n");
81100774:	01204534 	movhi	r4,33044
81100778:	21220704 	addi	r4,r4,-30692
8110077c:	110ed240 	call	8110ed24 <puts>
81100780:	0000aa06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 17)
81100784:	e0bfbc17 	ldw	r2,-272(fp)
81100788:	10800458 	cmpnei	r2,r2,17
8110078c:	1000041e 	bne	r2,zero,811007a0 <DDR2_EEPROM_DUMP+0x25c>
        printf("(Banks per SDRAM device)\n");
81100790:	01204534 	movhi	r4,33044
81100794:	21220c04 	addi	r4,r4,-30672
81100798:	110ed240 	call	8110ed24 <puts>
8110079c:	0000a306 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 18)
811007a0:	e0bfbc17 	ldw	r2,-272(fp)
811007a4:	10800498 	cmpnei	r2,r2,18
811007a8:	1000041e 	bne	r2,zero,811007bc <DDR2_EEPROM_DUMP+0x278>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
811007ac:	01204534 	movhi	r4,33044
811007b0:	21221304 	addi	r4,r4,-30644
811007b4:	110ed240 	call	8110ed24 <puts>
811007b8:	00009c06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 20)
811007bc:	e0bfbc17 	ldw	r2,-272(fp)
811007c0:	10800518 	cmpnei	r2,r2,20
811007c4:	1000041e 	bne	r2,zero,811007d8 <DDR2_EEPROM_DUMP+0x294>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
811007c8:	01204534 	movhi	r4,33044
811007cc:	21222004 	addi	r4,r4,-30592
811007d0:	110ed240 	call	8110ed24 <puts>
811007d4:	00009506 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 22)
811007d8:	e0bfbc17 	ldw	r2,-272(fp)
811007dc:	10800598 	cmpnei	r2,r2,22
811007e0:	1000041e 	bne	r2,zero,811007f4 <DDR2_EEPROM_DUMP+0x2b0>
        printf("(Memory Chip feature bitmap)\n");
811007e4:	01204534 	movhi	r4,33044
811007e8:	21223204 	addi	r4,r4,-30520
811007ec:	110ed240 	call	8110ed24 <puts>
811007f0:	00008e06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 27)
811007f4:	e0bfbc17 	ldw	r2,-272(fp)
811007f8:	108006d8 	cmpnei	r2,r2,27
811007fc:	1000041e 	bne	r2,zero,81100810 <DDR2_EEPROM_DUMP+0x2cc>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
81100800:	01204534 	movhi	r4,33044
81100804:	21223a04 	addi	r4,r4,-30488
81100808:	110ed240 	call	8110ed24 <puts>
8110080c:	00008706 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 28)
81100810:	e0bfbc17 	ldw	r2,-272(fp)
81100814:	10800718 	cmpnei	r2,r2,28
81100818:	1000041e 	bne	r2,zero,8110082c <DDR2_EEPROM_DUMP+0x2e8>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
8110081c:	01204534 	movhi	r4,33044
81100820:	21224404 	addi	r4,r4,-30448
81100824:	110ed240 	call	8110ed24 <puts>
81100828:	00008006 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 29)
8110082c:	e0bfbc17 	ldw	r2,-272(fp)
81100830:	10800758 	cmpnei	r2,r2,29
81100834:	1000041e 	bne	r2,zero,81100848 <DDR2_EEPROM_DUMP+0x304>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
81100838:	01204534 	movhi	r4,33044
8110083c:	21225104 	addi	r4,r4,-30396
81100840:	110ed240 	call	8110ed24 <puts>
81100844:	00007906 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 30)
81100848:	e0bfbc17 	ldw	r2,-272(fp)
8110084c:	10800798 	cmpnei	r2,r2,30
81100850:	1000041e 	bne	r2,zero,81100864 <DDR2_EEPROM_DUMP+0x320>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
81100854:	01204534 	movhi	r4,33044
81100858:	21225b04 	addi	r4,r4,-30356
8110085c:	110ed240 	call	8110ed24 <puts>
81100860:	00007206 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 31)
81100864:	e0bfbc17 	ldw	r2,-272(fp)
81100868:	108007d8 	cmpnei	r2,r2,31
8110086c:	1000041e 	bne	r2,zero,81100880 <DDR2_EEPROM_DUMP+0x33c>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
81100870:	01204534 	movhi	r4,33044
81100874:	21226604 	addi	r4,r4,-30312
81100878:	110ed240 	call	8110ed24 <puts>
8110087c:	00006b06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 36)
81100880:	e0bfbc17 	ldw	r2,-272(fp)
81100884:	10800918 	cmpnei	r2,r2,36
81100888:	1000041e 	bne	r2,zero,8110089c <DDR2_EEPROM_DUMP+0x358>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
8110088c:	01204534 	movhi	r4,33044
81100890:	21227704 	addi	r4,r4,-30244
81100894:	110ed240 	call	8110ed24 <puts>
81100898:	00006406 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 37)
8110089c:	e0bfbc17 	ldw	r2,-272(fp)
811008a0:	10800958 	cmpnei	r2,r2,37
811008a4:	1000041e 	bne	r2,zero,811008b8 <DDR2_EEPROM_DUMP+0x374>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
811008a8:	01204534 	movhi	r4,33044
811008ac:	21228204 	addi	r4,r4,-30200
811008b0:	110ed240 	call	8110ed24 <puts>
811008b4:	00005d06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 38)
811008b8:	e0bfbc17 	ldw	r2,-272(fp)
811008bc:	10800998 	cmpnei	r2,r2,38
811008c0:	1000041e 	bne	r2,zero,811008d4 <DDR2_EEPROM_DUMP+0x390>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
811008c4:	01204534 	movhi	r4,33044
811008c8:	21228f04 	addi	r4,r4,-30148
811008cc:	110ed240 	call	8110ed24 <puts>
811008d0:	00005606 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 41)
811008d4:	e0bfbc17 	ldw	r2,-272(fp)
811008d8:	10800a58 	cmpnei	r2,r2,41
811008dc:	1000041e 	bne	r2,zero,811008f0 <DDR2_EEPROM_DUMP+0x3ac>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
811008e0:	01204534 	movhi	r4,33044
811008e4:	21229d04 	addi	r4,r4,-30092
811008e8:	110ed240 	call	8110ed24 <puts>
811008ec:	00004f06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 42)
811008f0:	e0bfbc17 	ldw	r2,-272(fp)
811008f4:	10800a98 	cmpnei	r2,r2,42
811008f8:	1000041e 	bne	r2,zero,8110090c <DDR2_EEPROM_DUMP+0x3c8>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
811008fc:	01204534 	movhi	r4,33044
81100900:	2122aa04 	addi	r4,r4,-30040
81100904:	110ed240 	call	8110ed24 <puts>
81100908:	00004806 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 62)
8110090c:	e0bfbc17 	ldw	r2,-272(fp)
81100910:	10800f98 	cmpnei	r2,r2,62
81100914:	1000041e 	bne	r2,zero,81100928 <DDR2_EEPROM_DUMP+0x3e4>
        printf("(SPD Revision)\n");
81100918:	01204534 	movhi	r4,33044
8110091c:	2122b704 	addi	r4,r4,-29988
81100920:	110ed240 	call	8110ed24 <puts>
81100924:	00004106 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 63)
81100928:	e0bfbc17 	ldw	r2,-272(fp)
8110092c:	10800fd8 	cmpnei	r2,r2,63
81100930:	1000041e 	bne	r2,zero,81100944 <DDR2_EEPROM_DUMP+0x400>
        printf("(Checksum)\n");
81100934:	01204534 	movhi	r4,33044
81100938:	2122bb04 	addi	r4,r4,-29972
8110093c:	110ed240 	call	8110ed24 <puts>
81100940:	00003a06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 64)
81100944:	e0bfbc17 	ldw	r2,-272(fp)
81100948:	10801018 	cmpnei	r2,r2,64
8110094c:	1000041e 	bne	r2,zero,81100960 <DDR2_EEPROM_DUMP+0x41c>
        printf("(64~71: Manufacturer JEDEC ID)\n");
81100950:	01204534 	movhi	r4,33044
81100954:	2122be04 	addi	r4,r4,-29960
81100958:	110ed240 	call	8110ed24 <puts>
8110095c:	00003306 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 72)
81100960:	e0bfbc17 	ldw	r2,-272(fp)
81100964:	10801218 	cmpnei	r2,r2,72
81100968:	1000041e 	bne	r2,zero,8110097c <DDR2_EEPROM_DUMP+0x438>
        printf("(Module manufacturing location[Vendor-specific code])\n");
8110096c:	01204534 	movhi	r4,33044
81100970:	2122c604 	addi	r4,r4,-29928
81100974:	110ed240 	call	8110ed24 <puts>
81100978:	00002c06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 73)
8110097c:	e0bfbc17 	ldw	r2,-272(fp)
81100980:	10801258 	cmpnei	r2,r2,73
81100984:	1000041e 	bne	r2,zero,81100998 <DDR2_EEPROM_DUMP+0x454>
        printf("(73~90: Moduloe part number)\n");
81100988:	01204534 	movhi	r4,33044
8110098c:	2122d404 	addi	r4,r4,-29872
81100990:	110ed240 	call	8110ed24 <puts>
81100994:	00002506 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 91)
81100998:	e0bfbc17 	ldw	r2,-272(fp)
8110099c:	108016d8 	cmpnei	r2,r2,91
811009a0:	1000041e 	bne	r2,zero,811009b4 <DDR2_EEPROM_DUMP+0x470>
        printf("(91~92: Moduloe revision code)\n");
811009a4:	01204534 	movhi	r4,33044
811009a8:	2122dc04 	addi	r4,r4,-29840
811009ac:	110ed240 	call	8110ed24 <puts>
811009b0:	00001e06 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 93)
811009b4:	e0bfbc17 	ldw	r2,-272(fp)
811009b8:	10801758 	cmpnei	r2,r2,93
811009bc:	1000041e 	bne	r2,zero,811009d0 <DDR2_EEPROM_DUMP+0x48c>
        printf("(Manufacture Years since 2000[0-255])\n");
811009c0:	01204534 	movhi	r4,33044
811009c4:	2122e404 	addi	r4,r4,-29808
811009c8:	110ed240 	call	8110ed24 <puts>
811009cc:	00001706 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 94)
811009d0:	e0bfbc17 	ldw	r2,-272(fp)
811009d4:	10801798 	cmpnei	r2,r2,94
811009d8:	1000041e 	bne	r2,zero,811009ec <DDR2_EEPROM_DUMP+0x4a8>
        printf("(Manufacture Weeks[1-52])\n");
811009dc:	01204534 	movhi	r4,33044
811009e0:	2122ee04 	addi	r4,r4,-29768
811009e4:	110ed240 	call	8110ed24 <puts>
811009e8:	00001006 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 95)
811009ec:	e0bfbc17 	ldw	r2,-272(fp)
811009f0:	108017d8 	cmpnei	r2,r2,95
811009f4:	1000041e 	bne	r2,zero,81100a08 <DDR2_EEPROM_DUMP+0x4c4>
        printf("(95~98[4-bytes]: Module serial number)\n");
811009f8:	01204534 	movhi	r4,33044
811009fc:	2122f504 	addi	r4,r4,-29740
81100a00:	110ed240 	call	8110ed24 <puts>
81100a04:	00000906 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else if (i == 99)
81100a08:	e0bfbc17 	ldw	r2,-272(fp)
81100a0c:	108018d8 	cmpnei	r2,r2,99
81100a10:	1000041e 	bne	r2,zero,81100a24 <DDR2_EEPROM_DUMP+0x4e0>
        printf("(99~128: Manufacturer-specific data)\n");
81100a14:	01204534 	movhi	r4,33044
81100a18:	2122ff04 	addi	r4,r4,-29700
81100a1c:	110ed240 	call	8110ed24 <puts>
81100a20:	00000206 	br	81100a2c <DDR2_EEPROM_DUMP+0x4e8>
      else
        printf("\n");
81100a24:	01000284 	movi	r4,10
81100a28:	110ec440 	call	8110ec44 <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
81100a2c:	e0bfbc17 	ldw	r2,-272(fp)
81100a30:	10800044 	addi	r2,r2,1
81100a34:	e0bfbc15 	stw	r2,-272(fp)
81100a38:	e0bfbc17 	ldw	r2,-272(fp)
81100a3c:	10804008 	cmpgei	r2,r2,256
81100a40:	1000061e 	bne	r2,zero,81100a5c <DDR2_EEPROM_DUMP+0x518>
81100a44:	e0bfbe17 	ldw	r2,-264(fp)
81100a48:	103ef81e 	bne	r2,zero,8110062c <__reset+0xfb0e062c>
81100a4c:	00000306 	br	81100a5c <DDR2_EEPROM_DUMP+0x518>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
81100a50:	01204534 	movhi	r4,33044
81100a54:	21230904 	addi	r4,r4,-29660
81100a58:	110ed240 	call	8110ed24 <puts>
  }
  printf("\n");
81100a5c:	01000284 	movi	r4,10
81100a60:	110ec440 	call	8110ec44 <putchar>

  return bSuccess;  
81100a64:	e0bfbe17 	ldw	r2,-264(fp)
}
81100a68:	e037883a 	mov	sp,fp
81100a6c:	dfc00117 	ldw	ra,4(sp)
81100a70:	df000017 	ldw	fp,0(sp)
81100a74:	dec00204 	addi	sp,sp,8
81100a78:	f800283a 	ret

81100a7c <DDR2_SWITCH_MEMORY>:

bool DDR2_SWITCH_MEMORY(alt_u8 MemoryId){
81100a7c:	defffb04 	addi	sp,sp,-20
81100a80:	de00012e 	bgeu	sp,et,81100a88 <DDR2_SWITCH_MEMORY+0xc>
81100a84:	003b68fa 	trap	3
81100a88:	dfc00415 	stw	ra,16(sp)
81100a8c:	df000315 	stw	fp,12(sp)
81100a90:	df000304 	addi	fp,sp,12
81100a94:	2005883a 	mov	r2,r4
81100a98:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *pDdr2MemAddr = DDR2_EXTENDED_ADDRESS_CONTROL_BASE;
81100a9c:	00a04834 	movhi	r2,33056
81100aa0:	10903204 	addi	r2,r2,16584
81100aa4:	e0bffe15 	stw	r2,-8(fp)

	  bSuccess = TRUE;
81100aa8:	00800044 	movi	r2,1
81100aac:	e0bffd15 	stw	r2,-12(fp)
	  switch (MemoryId) {
81100ab0:	e0bfff03 	ldbu	r2,-4(fp)
81100ab4:	10c00060 	cmpeqi	r3,r2,1
81100ab8:	1800031e 	bne	r3,zero,81100ac8 <DDR2_SWITCH_MEMORY+0x4c>
81100abc:	108000a0 	cmpeqi	r2,r2,2
81100ac0:	1000041e 	bne	r2,zero,81100ad4 <DDR2_SWITCH_MEMORY+0x58>
81100ac4:	00000706 	br	81100ae4 <DDR2_SWITCH_MEMORY+0x68>
	    case DDR2_M1_ID:
	  	  *(pDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
81100ac8:	e0bffe17 	ldw	r2,-8(fp)
81100acc:	10000015 	stw	zero,0(r2)
	    break;
81100ad0:	00000806 	br	81100af4 <DDR2_SWITCH_MEMORY+0x78>
	    case DDR2_M2_ID:
		  *(pDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81100ad4:	e0bffe17 	ldw	r2,-8(fp)
81100ad8:	00e00034 	movhi	r3,32768
81100adc:	10c00015 	stw	r3,0(r2)
	    break;
81100ae0:	00000406 	br	81100af4 <DDR2_SWITCH_MEMORY+0x78>
	    default:
	      bSuccess = FALSE;
81100ae4:	e03ffd15 	stw	zero,-12(fp)
		  printf("DR2 Memory ID not identified!! Error switching memories!! \n");
81100ae8:	01204534 	movhi	r4,33044
81100aec:	21230f04 	addi	r4,r4,-29636
81100af0:	110ed240 	call	8110ed24 <puts>
	  }

	  return bSuccess;
81100af4:	e0bffd17 	ldw	r2,-12(fp)
}
81100af8:	e037883a 	mov	sp,fp
81100afc:	dfc00117 	ldw	ra,4(sp)
81100b00:	df000017 	ldw	fp,0(sp)
81100b04:	dec00204 	addi	sp,sp,8
81100b08:	f800283a 	ret

81100b0c <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
81100b0c:	deffe304 	addi	sp,sp,-116
81100b10:	de00012e 	bgeu	sp,et,81100b18 <DDR2_MEMORY_WRITE_TEST+0xc>
81100b14:	003b68fa 	trap	3
81100b18:	dfc01c15 	stw	ra,112(sp)
81100b1c:	df001b15 	stw	fp,108(sp)
81100b20:	dc401a15 	stw	r17,104(sp)
81100b24:	dc001915 	stw	r16,100(sp)
81100b28:	df001b04 	addi	fp,sp,108
81100b2c:	2005883a 	mov	r2,r4
81100b30:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
81100b34:	01204534 	movhi	r4,33044
81100b38:	21231e04 	addi	r4,r4,-29576
81100b3c:	110ed240 	call	8110ed24 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100b40:	00800044 	movi	r2,1
81100b44:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
81100b48:	e0bffd03 	ldbu	r2,-12(fp)
81100b4c:	10c00060 	cmpeqi	r3,r2,1
81100b50:	1800031e 	bne	r3,zero,81100b60 <DDR2_MEMORY_WRITE_TEST+0x54>
81100b54:	108000a0 	cmpeqi	r2,r2,2
81100b58:	1000081e 	bne	r2,zero,81100b7c <DDR2_MEMORY_WRITE_TEST+0x70>
81100b5c:	00000e06 	br	81100b98 <DDR2_MEMORY_WRITE_TEST+0x8c>
    case DDR2_M1_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b60:	e0bffd03 	ldbu	r2,-12(fp)
81100b64:	1009883a 	mov	r4,r2
81100b68:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b6c:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81100b70:	00a00034 	movhi	r2,32768
81100b74:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b78:	00000d06 	br	81100bb0 <DDR2_MEMORY_WRITE_TEST+0xa4>
    case DDR2_M2_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b7c:	e0bffd03 	ldbu	r2,-12(fp)
81100b80:	1009883a 	mov	r4,r2
81100b84:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b88:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
81100b8c:	00a00034 	movhi	r2,32768
81100b90:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b94:	00000606 	br	81100bb0 <DDR2_MEMORY_WRITE_TEST+0xa4>
    default:
      bSuccess = FALSE;
81100b98:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100b9c:	01204534 	movhi	r4,33044
81100ba0:	21212e04 	addi	r4,r4,-31560
81100ba4:	110ed240 	call	8110ed24 <puts>
      return bSuccess;
81100ba8:	e0bfed17 	ldw	r2,-76(fp)
81100bac:	0000db06 	br	81100f1c <DDR2_MEMORY_WRITE_TEST+0x410>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100bb0:	e0bfe617 	ldw	r2,-104(fp)
81100bb4:	1004d53a 	srli	r2,r2,20
81100bb8:	100b883a 	mov	r5,r2
81100bbc:	01204534 	movhi	r4,33044
81100bc0:	21232804 	addi	r4,r4,-29536
81100bc4:	110ebf80 	call	8110ebf8 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
81100bc8:	00800104 	movi	r2,4
81100bcc:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
81100bd0:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81100bd4:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
81100bd8:	e03fe715 	stw	zero,-100(fp)
81100bdc:	00001506 	br	81100c34 <DDR2_MEMORY_WRITE_TEST+0x128>
    szProgress[i] = ByteLen/10*(i+1);
81100be0:	e0ffe617 	ldw	r3,-104(fp)
81100be4:	00b33374 	movhi	r2,52429
81100be8:	10b33344 	addi	r2,r2,-13107
81100bec:	1888383a 	mulxuu	r4,r3,r2
81100bf0:	1885383a 	mul	r2,r3,r2
81100bf4:	1021883a 	mov	r16,r2
81100bf8:	2023883a 	mov	r17,r4
81100bfc:	8804d0fa 	srli	r2,r17,3
81100c00:	e0ffe717 	ldw	r3,-100(fp)
81100c04:	18c00044 	addi	r3,r3,1
81100c08:	10c7383a 	mul	r3,r2,r3
81100c0c:	e0bfe717 	ldw	r2,-100(fp)
81100c10:	1085883a 	add	r2,r2,r2
81100c14:	1085883a 	add	r2,r2,r2
81100c18:	e13fe504 	addi	r4,fp,-108
81100c1c:	2085883a 	add	r2,r4,r2
81100c20:	10800e04 	addi	r2,r2,56
81100c24:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
81100c28:	e0bfe717 	ldw	r2,-100(fp)
81100c2c:	10800044 	addi	r2,r2,1
81100c30:	e0bfe715 	stw	r2,-100(fp)
81100c34:	e0bfe717 	ldw	r2,-100(fp)
81100c38:	10800290 	cmplti	r2,r2,10
81100c3c:	103fe81e 	bne	r2,zero,81100be0 <__reset+0xfb0e0be0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81100c40:	d0a07717 	ldw	r2,-32292(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
81100c44:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100c48:	00804004 	movi	r2,256
81100c4c:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
81100c50:	e03fe715 	stw	zero,-100(fp)
81100c54:	00001e06 	br	81100cd0 <DDR2_MEMORY_WRITE_TEST+0x1c4>
    if (i == 0) {
81100c58:	e0bfe717 	ldw	r2,-100(fp)
81100c5c:	1000091e 	bne	r2,zero,81100c84 <DDR2_MEMORY_WRITE_TEST+0x178>
      szData[i] = InitValue;
81100c60:	00a04534 	movhi	r2,33044
81100c64:	10b4b004 	addi	r2,r2,-11584
81100c68:	e0ffe717 	ldw	r3,-100(fp)
81100c6c:	18c7883a 	add	r3,r3,r3
81100c70:	18c7883a 	add	r3,r3,r3
81100c74:	10c5883a 	add	r2,r2,r3
81100c78:	e0fff017 	ldw	r3,-64(fp)
81100c7c:	10c00015 	stw	r3,0(r2)
81100c80:	00001006 	br	81100cc4 <DDR2_MEMORY_WRITE_TEST+0x1b8>
    } else {
      szData[i] = szData[i-1] * 13;
81100c84:	e0bfe717 	ldw	r2,-100(fp)
81100c88:	10ffffc4 	addi	r3,r2,-1
81100c8c:	00a04534 	movhi	r2,33044
81100c90:	10b4b004 	addi	r2,r2,-11584
81100c94:	18c7883a 	add	r3,r3,r3
81100c98:	18c7883a 	add	r3,r3,r3
81100c9c:	10c5883a 	add	r2,r2,r3
81100ca0:	10800017 	ldw	r2,0(r2)
81100ca4:	11000364 	muli	r4,r2,13
81100ca8:	00a04534 	movhi	r2,33044
81100cac:	10b4b004 	addi	r2,r2,-11584
81100cb0:	e0ffe717 	ldw	r3,-100(fp)
81100cb4:	18c7883a 	add	r3,r3,r3
81100cb8:	18c7883a 	add	r3,r3,r3
81100cbc:	10c5883a 	add	r2,r2,r3
81100cc0:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
81100cc4:	e0bfe717 	ldw	r2,-100(fp)
81100cc8:	10800044 	addi	r2,r2,1
81100ccc:	e0bfe715 	stw	r2,-100(fp)
81100cd0:	e0ffe717 	ldw	r3,-100(fp)
81100cd4:	e0bfea17 	ldw	r2,-88(fp)
81100cd8:	18bfdf16 	blt	r3,r2,81100c58 <__reset+0xfb0e0c58>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
81100cdc:	e0bfea17 	ldw	r2,-88(fp)
81100ce0:	10ffffc4 	addi	r3,r2,-1
81100ce4:	00a04534 	movhi	r2,33044
81100ce8:	10b4b004 	addi	r2,r2,-11584
81100cec:	18c7883a 	add	r3,r3,r3
81100cf0:	18c7883a 	add	r3,r3,r3
81100cf4:	10c7883a 	add	r3,r2,r3
81100cf8:	00aaaaf4 	movhi	r2,43691
81100cfc:	10aaaa84 	addi	r2,r2,-21846
81100d00:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
81100d04:	e0bfea17 	ldw	r2,-88(fp)
81100d08:	10ffff84 	addi	r3,r2,-2
81100d0c:	00a04534 	movhi	r2,33044
81100d10:	10b4b004 	addi	r2,r2,-11584
81100d14:	18c7883a 	add	r3,r3,r3
81100d18:	18c7883a 	add	r3,r3,r3
81100d1c:	10c7883a 	add	r3,r2,r3
81100d20:	00955574 	movhi	r2,21845
81100d24:	10955544 	addi	r2,r2,21845
81100d28:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
81100d2c:	e0bfea17 	ldw	r2,-88(fp)
81100d30:	10ffff44 	addi	r3,r2,-3
81100d34:	00a04534 	movhi	r2,33044
81100d38:	10b4b004 	addi	r2,r2,-11584
81100d3c:	18c7883a 	add	r3,r3,r3
81100d40:	18c7883a 	add	r3,r3,r3
81100d44:	10c5883a 	add	r2,r2,r3
81100d48:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
81100d4c:	e0bfea17 	ldw	r2,-88(fp)
81100d50:	10ffff04 	addi	r3,r2,-4
81100d54:	00a04534 	movhi	r2,33044
81100d58:	10b4b004 	addi	r2,r2,-11584
81100d5c:	18c7883a 	add	r3,r3,r3
81100d60:	18c7883a 	add	r3,r3,r3
81100d64:	10c5883a 	add	r2,r2,r3
81100d68:	00ffffc4 	movi	r3,-1
81100d6c:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
81100d70:	01204534 	movhi	r4,33044
81100d74:	21232e04 	addi	r4,r4,-29512
81100d78:	110ed240 	call	8110ed24 <puts>
81100d7c:	d0a07717 	ldw	r2,-32292(gp)
  TimeStart = alt_nticks();
81100d80:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
81100d84:	e0bfe517 	ldw	r2,-108(fp)
81100d88:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
81100d8c:	00810004 	movi	r2,1024
81100d90:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
81100d94:	e0ffe817 	ldw	r3,-96(fp)
81100d98:	e0bfee17 	ldw	r2,-72(fp)
81100d9c:	1885283a 	div	r2,r3,r2
81100da0:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
81100da4:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
81100da8:	00003306 	br	81100e78 <DDR2_MEMORY_WRITE_TEST+0x36c>
    nRemainedLen = ByteLen - nPos;
81100dac:	e0bfeb17 	ldw	r2,-84(fp)
81100db0:	e0ffe617 	ldw	r3,-104(fp)
81100db4:	1885c83a 	sub	r2,r3,r2
81100db8:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81100dbc:	e0bfe817 	ldw	r2,-96(fp)
81100dc0:	e0fff217 	ldw	r3,-56(fp)
81100dc4:	1880060e 	bge	r3,r2,81100de0 <DDR2_MEMORY_WRITE_TEST+0x2d4>
      nAccessLen = nRemainedLen;
81100dc8:	e0bff217 	ldw	r2,-56(fp)
81100dcc:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
81100dd0:	e0ffe817 	ldw	r3,-96(fp)
81100dd4:	e0bfee17 	ldw	r2,-72(fp)
81100dd8:	1885283a 	div	r2,r3,r2
81100ddc:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
81100de0:	e0bfe817 	ldw	r2,-96(fp)
81100de4:	100d883a 	mov	r6,r2
81100de8:	01604534 	movhi	r5,33044
81100dec:	2974b004 	addi	r5,r5,-11584
81100df0:	e13fe917 	ldw	r4,-92(fp)
81100df4:	110e8e00 	call	8110e8e0 <memcpy>
    pDes += nItemNum;
81100df8:	e0bfea17 	ldw	r2,-88(fp)
81100dfc:	1085883a 	add	r2,r2,r2
81100e00:	1085883a 	add	r2,r2,r2
81100e04:	1007883a 	mov	r3,r2
81100e08:	e0bfe917 	ldw	r2,-92(fp)
81100e0c:	10c5883a 	add	r2,r2,r3
81100e10:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
81100e14:	e0ffeb17 	ldw	r3,-84(fp)
81100e18:	e0bfe817 	ldw	r2,-96(fp)
81100e1c:	1885883a 	add	r2,r3,r2
81100e20:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81100e24:	e0bfec17 	ldw	r2,-80(fp)
81100e28:	10800288 	cmpgei	r2,r2,10
81100e2c:	1000121e 	bne	r2,zero,81100e78 <DDR2_MEMORY_WRITE_TEST+0x36c>
81100e30:	e0bfec17 	ldw	r2,-80(fp)
81100e34:	1085883a 	add	r2,r2,r2
81100e38:	1085883a 	add	r2,r2,r2
81100e3c:	e0ffe504 	addi	r3,fp,-108
81100e40:	1885883a 	add	r2,r3,r2
81100e44:	10800e04 	addi	r2,r2,56
81100e48:	10800017 	ldw	r2,0(r2)
81100e4c:	e0ffeb17 	ldw	r3,-84(fp)
81100e50:	18800936 	bltu	r3,r2,81100e78 <DDR2_MEMORY_WRITE_TEST+0x36c>
      nProgressIndex++;
81100e54:	e0bfec17 	ldw	r2,-80(fp)
81100e58:	10800044 	addi	r2,r2,1
81100e5c:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
81100e60:	e0bfec17 	ldw	r2,-80(fp)
81100e64:	108002a4 	muli	r2,r2,10
81100e68:	100b883a 	mov	r5,r2
81100e6c:	01204534 	movhi	r4,33044
81100e70:	21233204 	addi	r4,r4,-29496
81100e74:	110ebf80 	call	8110ebf8 <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
81100e78:	e0ffeb17 	ldw	r3,-84(fp)
81100e7c:	e0bfe617 	ldw	r2,-104(fp)
81100e80:	18bfca36 	bltu	r3,r2,81100dac <__reset+0xfb0e0dac>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
81100e84:	112318c0 	call	8112318c <alt_dcache_flush_all>
  printf("\n");
81100e88:	01000284 	movi	r4,10
81100e8c:	110ec440 	call	8110ec44 <putchar>
81100e90:	d0e07717 	ldw	r3,-32292(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81100e94:	e0bff117 	ldw	r2,-60(fp)
81100e98:	1885c83a 	sub	r2,r3,r2
81100e9c:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
81100ea0:	e0bfed17 	ldw	r2,-76(fp)
81100ea4:	10001726 	beq	r2,zero,81100f04 <DDR2_MEMORY_WRITE_TEST+0x3f8>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81100ea8:	e13fef17 	ldw	r4,-68(fp)
81100eac:	110cb1c0 	call	8110cb1c <__floatsisf>
81100eb0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81100eb4:	d0a07617 	ldw	r2,-32296(gp)
81100eb8:	1009883a 	mov	r4,r2
81100ebc:	110cc480 	call	8110cc48 <__floatunsisf>
81100ec0:	1007883a 	mov	r3,r2
81100ec4:	180b883a 	mov	r5,r3
81100ec8:	8009883a 	mov	r4,r16
81100ecc:	110c2d00 	call	8110c2d0 <__divsf3>
81100ed0:	1007883a 	mov	r3,r2
81100ed4:	1805883a 	mov	r2,r3
81100ed8:	1009883a 	mov	r4,r2
81100edc:	110d4600 	call	8110d460 <__extendsfdf2>
81100ee0:	1009883a 	mov	r4,r2
81100ee4:	180b883a 	mov	r5,r3
81100ee8:	200d883a 	mov	r6,r4
81100eec:	280f883a 	mov	r7,r5
81100ef0:	e17fe617 	ldw	r5,-104(fp)
81100ef4:	01204534 	movhi	r4,33044
81100ef8:	21233404 	addi	r4,r4,-29488
81100efc:	110ebf80 	call	8110ebf8 <printf>
81100f00:	00000306 	br	81100f10 <DDR2_MEMORY_WRITE_TEST+0x404>
  } else {
    printf("DDR2 write test fail\n");
81100f04:	01204534 	movhi	r4,33044
81100f08:	21234004 	addi	r4,r4,-29440
81100f0c:	110ed240 	call	8110ed24 <puts>
  }
  printf("\n");
81100f10:	01000284 	movi	r4,10
81100f14:	110ec440 	call	8110ec44 <putchar>

  return bSuccess;
81100f18:	e0bfed17 	ldw	r2,-76(fp)
}
81100f1c:	e6fffe04 	addi	sp,fp,-8
81100f20:	dfc00317 	ldw	ra,12(sp)
81100f24:	df000217 	ldw	fp,8(sp)
81100f28:	dc400117 	ldw	r17,4(sp)
81100f2c:	dc000017 	ldw	r16,0(sp)
81100f30:	dec00404 	addi	sp,sp,16
81100f34:	f800283a 	ret

81100f38 <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
81100f38:	deffe304 	addi	sp,sp,-116
81100f3c:	de00012e 	bgeu	sp,et,81100f44 <DDR2_MEMORY_READ_TEST+0xc>
81100f40:	003b68fa 	trap	3
81100f44:	dfc01c15 	stw	ra,112(sp)
81100f48:	df001b15 	stw	fp,108(sp)
81100f4c:	dc401a15 	stw	r17,104(sp)
81100f50:	dc001915 	stw	r16,100(sp)
81100f54:	df001b04 	addi	fp,sp,108
81100f58:	2005883a 	mov	r2,r4
81100f5c:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
81100f60:	01204534 	movhi	r4,33044
81100f64:	21234604 	addi	r4,r4,-29416
81100f68:	110ed240 	call	8110ed24 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100f6c:	00800044 	movi	r2,1
81100f70:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
81100f74:	e0bffd03 	ldbu	r2,-12(fp)
81100f78:	10c00060 	cmpeqi	r3,r2,1
81100f7c:	1800031e 	bne	r3,zero,81100f8c <DDR2_MEMORY_READ_TEST+0x54>
81100f80:	108000a0 	cmpeqi	r2,r2,2
81100f84:	1000081e 	bne	r2,zero,81100fa8 <DDR2_MEMORY_READ_TEST+0x70>
81100f88:	00000e06 	br	81100fc4 <DDR2_MEMORY_READ_TEST+0x8c>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100f8c:	e0bffd03 	ldbu	r2,-12(fp)
81100f90:	1009883a 	mov	r4,r2
81100f94:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100f98:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81100f9c:	00a00034 	movhi	r2,32768
81100fa0:	e0bfe715 	stw	r2,-100(fp)
    break;
81100fa4:	00000d06 	br	81100fdc <DDR2_MEMORY_READ_TEST+0xa4>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100fa8:	e0bffd03 	ldbu	r2,-12(fp)
81100fac:	1009883a 	mov	r4,r2
81100fb0:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100fb4:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81100fb8:	00a00034 	movhi	r2,32768
81100fbc:	e0bfe715 	stw	r2,-100(fp)
    break;
81100fc0:	00000606 	br	81100fdc <DDR2_MEMORY_READ_TEST+0xa4>
    default:
      bSuccess = FALSE;
81100fc4:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100fc8:	01204534 	movhi	r4,33044
81100fcc:	21212e04 	addi	r4,r4,-31560
81100fd0:	110ed240 	call	8110ed24 <puts>
      return bSuccess;
81100fd4:	e0bfe517 	ldw	r2,-108(fp)
81100fd8:	0000b806 	br	811012bc <DDR2_MEMORY_READ_TEST+0x384>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100fdc:	e0bfe717 	ldw	r2,-100(fp)
81100fe0:	1004d53a 	srli	r2,r2,20
81100fe4:	100b883a 	mov	r5,r2
81100fe8:	01204534 	movhi	r4,33044
81100fec:	21232804 	addi	r4,r4,-29536
81100ff0:	110ebf80 	call	8110ebf8 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100ff4:	00804004 	movi	r2,256
81100ff8:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
81100ffc:	00800104 	movi	r2,4
81101000:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
81101004:	e0ffec17 	ldw	r3,-80(fp)
81101008:	e0bfef17 	ldw	r2,-68(fp)
8110100c:	1885383a 	mul	r2,r3,r2
81101010:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
81101014:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81101018:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
8110101c:	e03fe815 	stw	zero,-96(fp)
81101020:	00001506 	br	81101078 <DDR2_MEMORY_READ_TEST+0x140>
    szProgress[i] = ByteLen/10*(i+1);
81101024:	e0ffe717 	ldw	r3,-100(fp)
81101028:	00b33374 	movhi	r2,52429
8110102c:	10b33344 	addi	r2,r2,-13107
81101030:	1888383a 	mulxuu	r4,r3,r2
81101034:	1885383a 	mul	r2,r3,r2
81101038:	1021883a 	mov	r16,r2
8110103c:	2023883a 	mov	r17,r4
81101040:	8804d0fa 	srli	r2,r17,3
81101044:	e0ffe817 	ldw	r3,-96(fp)
81101048:	18c00044 	addi	r3,r3,1
8110104c:	10c7383a 	mul	r3,r2,r3
81101050:	e0bfe817 	ldw	r2,-96(fp)
81101054:	1085883a 	add	r2,r2,r2
81101058:	1085883a 	add	r2,r2,r2
8110105c:	e13fe504 	addi	r4,fp,-108
81101060:	2085883a 	add	r2,r4,r2
81101064:	10800e04 	addi	r2,r2,56
81101068:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
8110106c:	e0bfe817 	ldw	r2,-96(fp)
81101070:	10800044 	addi	r2,r2,1
81101074:	e0bfe815 	stw	r2,-96(fp)
81101078:	e0bfe817 	ldw	r2,-96(fp)
8110107c:	10800290 	cmplti	r2,r2,10
81101080:	103fe81e 	bne	r2,zero,81101024 <__reset+0xfb0e1024>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
81101084:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
81101088:	01204534 	movhi	r4,33044
8110108c:	21235004 	addi	r4,r4,-29376
81101090:	110ed240 	call	8110ed24 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101094:	d0a07717 	ldw	r2,-32292(gp)
  TimeStart = alt_nticks();
81101098:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
8110109c:	e0bfe617 	ldw	r2,-104(fp)
811010a0:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
811010a4:	00810004 	movi	r2,1024
811010a8:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
811010ac:	e0ffe917 	ldw	r3,-92(fp)
811010b0:	e0bfef17 	ldw	r2,-68(fp)
811010b4:	1885283a 	div	r2,r3,r2
811010b8:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
811010bc:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
811010c0:	00005406 	br	81101214 <DDR2_MEMORY_READ_TEST+0x2dc>
    nRemainedLen = ByteLen - nPos;
811010c4:	e0bfed17 	ldw	r2,-76(fp)
811010c8:	e0ffe717 	ldw	r3,-100(fp)
811010cc:	1885c83a 	sub	r2,r3,r2
811010d0:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
811010d4:	e0bfe917 	ldw	r2,-92(fp)
811010d8:	e0fff217 	ldw	r3,-56(fp)
811010dc:	1880060e 	bge	r3,r2,811010f8 <DDR2_MEMORY_READ_TEST+0x1c0>
      nAccessLen = nRemainedLen;
811010e0:	e0bff217 	ldw	r2,-56(fp)
811010e4:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
811010e8:	e0ffe917 	ldw	r3,-92(fp)
811010ec:	e0bfef17 	ldw	r2,-68(fp)
811010f0:	1885283a 	div	r2,r3,r2
811010f4:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
811010f8:	00a04534 	movhi	r2,33044
811010fc:	10b4b004 	addi	r2,r2,-11584
81101100:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
81101104:	e03fe815 	stw	zero,-96(fp)
81101108:	00002406 	br	8110119c <DDR2_MEMORY_READ_TEST+0x264>
      if (*pSrc++ != *pDes++){
8110110c:	e0bfeb17 	ldw	r2,-84(fp)
81101110:	10c00104 	addi	r3,r2,4
81101114:	e0ffeb15 	stw	r3,-84(fp)
81101118:	10c00017 	ldw	r3,0(r2)
8110111c:	e0bfea17 	ldw	r2,-88(fp)
81101120:	11000104 	addi	r4,r2,4
81101124:	e13fea15 	stw	r4,-88(fp)
81101128:	10800017 	ldw	r2,0(r2)
8110112c:	18801826 	beq	r3,r2,81101190 <DDR2_MEMORY_READ_TEST+0x258>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
81101130:	e0bfeb17 	ldw	r2,-84(fp)
81101134:	10bfff04 	addi	r2,r2,-4
81101138:	10800017 	ldw	r2,0(r2)
8110113c:	1009883a 	mov	r4,r2
81101140:	00a04534 	movhi	r2,33044
81101144:	10b4b004 	addi	r2,r2,-11584
81101148:	e0ffe817 	ldw	r3,-96(fp)
8110114c:	18c7883a 	add	r3,r3,r3
81101150:	18c7883a 	add	r3,r3,r3
81101154:	10c5883a 	add	r2,r2,r3
81101158:	10800017 	ldw	r2,0(r2)
8110115c:	100b883a 	mov	r5,r2
81101160:	e0ffed17 	ldw	r3,-76(fp)
81101164:	e0bfef17 	ldw	r2,-68(fp)
81101168:	1887283a 	div	r3,r3,r2
8110116c:	e0bfe817 	ldw	r2,-96(fp)
81101170:	1885883a 	add	r2,r3,r2
81101174:	100f883a 	mov	r7,r2
81101178:	280d883a 	mov	r6,r5
8110117c:	200b883a 	mov	r5,r4
81101180:	01204534 	movhi	r4,33044
81101184:	21235704 	addi	r4,r4,-29348
81101188:	110ebf80 	call	8110ebf8 <printf>
        bSuccess = FALSE;
8110118c:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
81101190:	e0bfe817 	ldw	r2,-96(fp)
81101194:	10800044 	addi	r2,r2,1
81101198:	e0bfe815 	stw	r2,-96(fp)
8110119c:	e0ffe817 	ldw	r3,-96(fp)
811011a0:	e0bfec17 	ldw	r2,-80(fp)
811011a4:	1880020e 	bge	r3,r2,811011b0 <DDR2_MEMORY_READ_TEST+0x278>
811011a8:	e0bfe517 	ldw	r2,-108(fp)
811011ac:	103fd71e 	bne	r2,zero,8110110c <__reset+0xfb0e110c>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
811011b0:	e0ffed17 	ldw	r3,-76(fp)
811011b4:	e0bfe917 	ldw	r2,-92(fp)
811011b8:	1885883a 	add	r2,r3,r2
811011bc:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
811011c0:	e0bfee17 	ldw	r2,-72(fp)
811011c4:	10800288 	cmpgei	r2,r2,10
811011c8:	1000121e 	bne	r2,zero,81101214 <DDR2_MEMORY_READ_TEST+0x2dc>
811011cc:	e0bfee17 	ldw	r2,-72(fp)
811011d0:	1085883a 	add	r2,r2,r2
811011d4:	1085883a 	add	r2,r2,r2
811011d8:	e0ffe504 	addi	r3,fp,-108
811011dc:	1885883a 	add	r2,r3,r2
811011e0:	10800e04 	addi	r2,r2,56
811011e4:	10800017 	ldw	r2,0(r2)
811011e8:	e0ffed17 	ldw	r3,-76(fp)
811011ec:	18800936 	bltu	r3,r2,81101214 <DDR2_MEMORY_READ_TEST+0x2dc>
      nProgressIndex++;
811011f0:	e0bfee17 	ldw	r2,-72(fp)
811011f4:	10800044 	addi	r2,r2,1
811011f8:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
811011fc:	e0bfee17 	ldw	r2,-72(fp)
81101200:	108002a4 	muli	r2,r2,10
81101204:	100b883a 	mov	r5,r2
81101208:	01204534 	movhi	r4,33044
8110120c:	21233204 	addi	r4,r4,-29496
81101210:	110ebf80 	call	8110ebf8 <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
81101214:	e0bfe517 	ldw	r2,-108(fp)
81101218:	10000326 	beq	r2,zero,81101228 <DDR2_MEMORY_READ_TEST+0x2f0>
8110121c:	e0ffed17 	ldw	r3,-76(fp)
81101220:	e0bfe717 	ldw	r2,-100(fp)
81101224:	18bfa736 	bltu	r3,r2,811010c4 <__reset+0xfb0e10c4>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
81101228:	01000284 	movi	r4,10
8110122c:	110ec440 	call	8110ec44 <putchar>
81101230:	d0e07717 	ldw	r3,-32292(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81101234:	e0bff117 	ldw	r2,-60(fp)
81101238:	1885c83a 	sub	r2,r3,r2
8110123c:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
81101240:	e0bfe517 	ldw	r2,-108(fp)
81101244:	10001726 	beq	r2,zero,811012a4 <DDR2_MEMORY_READ_TEST+0x36c>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101248:	e13ff017 	ldw	r4,-64(fp)
8110124c:	110cb1c0 	call	8110cb1c <__floatsisf>
81101250:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101254:	d0a07617 	ldw	r2,-32296(gp)
81101258:	1009883a 	mov	r4,r2
8110125c:	110cc480 	call	8110cc48 <__floatunsisf>
81101260:	1007883a 	mov	r3,r2
81101264:	180b883a 	mov	r5,r3
81101268:	8009883a 	mov	r4,r16
8110126c:	110c2d00 	call	8110c2d0 <__divsf3>
81101270:	1007883a 	mov	r3,r2
81101274:	1805883a 	mov	r2,r3
81101278:	1009883a 	mov	r4,r2
8110127c:	110d4600 	call	8110d460 <__extendsfdf2>
81101280:	1009883a 	mov	r4,r2
81101284:	180b883a 	mov	r5,r3
81101288:	200d883a 	mov	r6,r4
8110128c:	280f883a 	mov	r7,r5
81101290:	e17fe717 	ldw	r5,-100(fp)
81101294:	01204534 	movhi	r4,33044
81101298:	21236504 	addi	r4,r4,-29292
8110129c:	110ebf80 	call	8110ebf8 <printf>
811012a0:	00000306 	br	811012b0 <DDR2_MEMORY_READ_TEST+0x378>
  } else {
    printf("DDR2 read test fail\n");
811012a4:	01204534 	movhi	r4,33044
811012a8:	21237104 	addi	r4,r4,-29244
811012ac:	110ed240 	call	8110ed24 <puts>
  }
  printf("\n");
811012b0:	01000284 	movi	r4,10
811012b4:	110ec440 	call	8110ec44 <putchar>

  return bSuccess;
811012b8:	e0bfe517 	ldw	r2,-108(fp)
}
811012bc:	e6fffe04 	addi	sp,fp,-8
811012c0:	dfc00317 	ldw	ra,12(sp)
811012c4:	df000217 	ldw	fp,8(sp)
811012c8:	dc400117 	ldw	r17,4(sp)
811012cc:	dc000017 	ldw	r16,0(sp)
811012d0:	dec00404 	addi	sp,sp,16
811012d4:	f800283a 	ret

811012d8 <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
811012d8:	deffed04 	addi	sp,sp,-76
811012dc:	de00012e 	bgeu	sp,et,811012e4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xc>
811012e0:	003b68fa 	trap	3
811012e4:	dfc01215 	stw	ra,72(sp)
811012e8:	df001115 	stw	fp,68(sp)
811012ec:	dcc01015 	stw	r19,64(sp)
811012f0:	dc800f15 	stw	r18,60(sp)
811012f4:	dc400e15 	stw	r17,56(sp)
811012f8:	dc000d15 	stw	r16,52(sp)
811012fc:	df001104 	addi	fp,sp,68
81101300:	2005883a 	mov	r2,r4
81101304:	e17ffa15 	stw	r5,-24(fp)
81101308:	e1bffb15 	stw	r6,-20(fp)
8110130c:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
81101310:	01204534 	movhi	r4,33044
81101314:	21237604 	addi	r4,r4,-29224
81101318:	110ed240 	call	8110ed24 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
8110131c:	00800044 	movi	r2,1
81101320:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
81101324:	e0bff903 	ldbu	r2,-28(fp)
81101328:	10c00060 	cmpeqi	r3,r2,1
8110132c:	1800031e 	bne	r3,zero,8110133c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x64>
81101330:	108000a0 	cmpeqi	r2,r2,2
81101334:	1000081e 	bne	r2,zero,81101358 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x80>
81101338:	00000e06 	br	81101374 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x9c>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
8110133c:	e0bff903 	ldbu	r2,-28(fp)
81101340:	1009883a 	mov	r4,r2
81101344:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101348:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
8110134c:	00a00034 	movhi	r2,32768
81101350:	e0bff015 	stw	r2,-64(fp)
    break;
81101354:	00000d06 	br	8110138c <DDR2_MEMORY_RANDOM_WRITE_TEST+0xb4>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81101358:	e0bff903 	ldbu	r2,-28(fp)
8110135c:	1009883a 	mov	r4,r2
81101360:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101364:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81101368:	00a00034 	movhi	r2,32768
8110136c:	e0bff015 	stw	r2,-64(fp)
    break;
81101370:	00000606 	br	8110138c <DDR2_MEMORY_RANDOM_WRITE_TEST+0xb4>
    default:
      bSuccess = FALSE;
81101374:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81101378:	01204534 	movhi	r4,33044
8110137c:	21212e04 	addi	r4,r4,-31560
81101380:	110ed240 	call	8110ed24 <puts>
      return bSuccess;
81101384:	e0bff417 	ldw	r2,-48(fp)
81101388:	00008406 	br	8110159c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2c4>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
8110138c:	e0bff017 	ldw	r2,-64(fp)
81101390:	1004d53a 	srli	r2,r2,20
81101394:	100b883a 	mov	r5,r2
81101398:	01204534 	movhi	r4,33044
8110139c:	21232804 	addi	r4,r4,-29536
811013a0:	110ebf80 	call	8110ebf8 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811013a4:	d0a07717 	ldw	r2,-32292(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
811013a8:	d0a03e15 	stw	r2,-32520(gp)
  CurrentState = InitialState;
811013ac:	d0a03e17 	ldw	r2,-32520(gp)
811013b0:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
811013b4:	e0ffef17 	ldw	r3,-68(fp)
811013b8:	e0bff017 	ldw	r2,-64(fp)
811013bc:	1885883a 	add	r2,r3,r2
811013c0:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
811013c4:	e0fff017 	ldw	r3,-64(fp)
811013c8:	00b33374 	movhi	r2,52429
811013cc:	10b33344 	addi	r2,r2,-13107
811013d0:	1888383a 	mulxuu	r4,r3,r2
811013d4:	1885383a 	mul	r2,r3,r2
811013d8:	1025883a 	mov	r18,r2
811013dc:	2027883a 	mov	r19,r4
811013e0:	9806d13a 	srli	r3,r19,4
811013e4:	e0bfef17 	ldw	r2,-68(fp)
811013e8:	1885883a 	add	r2,r3,r2
811013ec:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
811013f0:	00800144 	movi	r2,5
811013f4:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
811013f8:	01204534 	movhi	r4,33044
811013fc:	21238204 	addi	r4,r4,-29176
81101400:	110ed240 	call	8110ed24 <puts>
  if (bVerbose == DDR2_VERBOSE) {
81101404:	e0bffa17 	ldw	r2,-24(fp)
81101408:	10800058 	cmpnei	r2,r2,1
8110140c:	1000031e 	bne	r2,zero,8110141c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x144>
    printf("00%%..");
81101410:	01204534 	movhi	r4,33044
81101414:	21238804 	addi	r4,r4,-29152
81101418:	110ebf80 	call	8110ebf8 <printf>
  }
  int TimeStart, TimeElapsed = 0;
8110141c:	e03ff615 	stw	zero,-40(fp)
81101420:	d0a07717 	ldw	r2,-32292(gp)

  TimeStart = alt_nticks();
81101424:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81101428:	e0bfef17 	ldw	r2,-68(fp)
8110142c:	e0bff115 	stw	r2,-60(fp)
81101430:	00002506 	br	811014c8 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1f0>
    *pDestination = xorshift32(&CurrentState);
81101434:	e0bff804 	addi	r2,fp,-32
81101438:	1009883a 	mov	r4,r2
8110143c:	11018980 	call	81101898 <xorshift32>
81101440:	1007883a 	mov	r3,r2
81101444:	e0bff117 	ldw	r2,-60(fp)
81101448:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
8110144c:	e0bffa17 	ldw	r2,-24(fp)
81101450:	10800060 	cmpeqi	r2,r2,1
81101454:	1009883a 	mov	r4,r2
81101458:	e0bff117 	ldw	r2,-60(fp)
8110145c:	e0fff217 	ldw	r3,-56(fp)
81101460:	1885803a 	cmpltu	r2,r3,r2
81101464:	2084703a 	and	r2,r4,r2
81101468:	10803fcc 	andi	r2,r2,255
8110146c:	10001326 	beq	r2,zero,811014bc <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1e4>
      printf("..%02d%%..",Percentage);
81101470:	e0bff303 	ldbu	r2,-52(fp)
81101474:	100b883a 	mov	r5,r2
81101478:	01204534 	movhi	r4,33044
8110147c:	21238a04 	addi	r4,r4,-29144
81101480:	110ebf80 	call	8110ebf8 <printf>
	  NextMilestone += ByteLen/20;
81101484:	e0fff017 	ldw	r3,-64(fp)
81101488:	00b33374 	movhi	r2,52429
8110148c:	10b33344 	addi	r2,r2,-13107
81101490:	1888383a 	mulxuu	r4,r3,r2
81101494:	1885383a 	mul	r2,r3,r2
81101498:	1021883a 	mov	r16,r2
8110149c:	2023883a 	mov	r17,r4
811014a0:	8804d13a 	srli	r2,r17,4
811014a4:	e0fff217 	ldw	r3,-56(fp)
811014a8:	1885883a 	add	r2,r3,r2
811014ac:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
811014b0:	e0bff303 	ldbu	r2,-52(fp)
811014b4:	10800144 	addi	r2,r2,5
811014b8:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
811014bc:	e0bff117 	ldw	r2,-60(fp)
811014c0:	10800104 	addi	r2,r2,4
811014c4:	e0bff115 	stw	r2,-60(fp)
811014c8:	e0fff117 	ldw	r3,-60(fp)
811014cc:	e0bff517 	ldw	r2,-44(fp)
811014d0:	18bfd836 	bltu	r3,r2,81101434 <__reset+0xfb0e1434>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
811014d4:	112318c0 	call	8112318c <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
811014d8:	e0bffa17 	ldw	r2,-24(fp)
811014dc:	10800058 	cmpnei	r2,r2,1
811014e0:	1000031e 	bne	r2,zero,811014f0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x218>
    printf("..100%%\n");
811014e4:	01204534 	movhi	r4,33044
811014e8:	21238d04 	addi	r4,r4,-29132
811014ec:	110ebf80 	call	8110ebf8 <printf>
  }

  if (bSuccess){
811014f0:	e0bff417 	ldw	r2,-48(fp)
811014f4:	10002326 	beq	r2,zero,81101584 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2ac>
    if (bTime == TRUE){
811014f8:	e0bffb17 	ldw	r2,-20(fp)
811014fc:	10800058 	cmpnei	r2,r2,1
81101500:	10001b1e 	bne	r2,zero,81101570 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x298>
81101504:	d0e07717 	ldw	r3,-32292(gp)
      TimeElapsed = alt_nticks() - TimeStart;
81101508:	e0bff717 	ldw	r2,-36(fp)
8110150c:	1885c83a 	sub	r2,r3,r2
81101510:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101514:	e13ff617 	ldw	r4,-40(fp)
81101518:	110cb1c0 	call	8110cb1c <__floatsisf>
8110151c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101520:	d0a07617 	ldw	r2,-32296(gp)
81101524:	1009883a 	mov	r4,r2
81101528:	110cc480 	call	8110cc48 <__floatunsisf>
8110152c:	1007883a 	mov	r3,r2
81101530:	180b883a 	mov	r5,r3
81101534:	8009883a 	mov	r4,r16
81101538:	110c2d00 	call	8110c2d0 <__divsf3>
8110153c:	1007883a 	mov	r3,r2
81101540:	1805883a 	mov	r2,r3
81101544:	1009883a 	mov	r4,r2
81101548:	110d4600 	call	8110d460 <__extendsfdf2>
8110154c:	1009883a 	mov	r4,r2
81101550:	180b883a 	mov	r5,r3
81101554:	200d883a 	mov	r6,r4
81101558:	280f883a 	mov	r7,r5
8110155c:	e17ff017 	ldw	r5,-64(fp)
81101560:	01204534 	movhi	r4,33044
81101564:	21233404 	addi	r4,r4,-29488
81101568:	110ebf80 	call	8110ebf8 <printf>
8110156c:	00000806 	br	81101590 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b8>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
81101570:	e17ff017 	ldw	r5,-64(fp)
81101574:	01204534 	movhi	r4,33044
81101578:	21239004 	addi	r4,r4,-29120
8110157c:	110ebf80 	call	8110ebf8 <printf>
81101580:	00000306 	br	81101590 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b8>
    }
  } else {
    printf("DDR2 write test fail\n");
81101584:	01204534 	movhi	r4,33044
81101588:	21234004 	addi	r4,r4,-29440
8110158c:	110ed240 	call	8110ed24 <puts>
  }
  printf("\n");
81101590:	01000284 	movi	r4,10
81101594:	110ec440 	call	8110ec44 <putchar>

  return bSuccess;
81101598:	e0bff417 	ldw	r2,-48(fp)
}
8110159c:	e6fffc04 	addi	sp,fp,-16
811015a0:	dfc00517 	ldw	ra,20(sp)
811015a4:	df000417 	ldw	fp,16(sp)
811015a8:	dcc00317 	ldw	r19,12(sp)
811015ac:	dc800217 	ldw	r18,8(sp)
811015b0:	dc400117 	ldw	r17,4(sp)
811015b4:	dc000017 	ldw	r16,0(sp)
811015b8:	dec00604 	addi	sp,sp,24
811015bc:	f800283a 	ret

811015c0 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
811015c0:	deffed04 	addi	sp,sp,-76
811015c4:	de00012e 	bgeu	sp,et,811015cc <DDR2_MEMORY_RANDOM_READ_TEST+0xc>
811015c8:	003b68fa 	trap	3
811015cc:	dfc01215 	stw	ra,72(sp)
811015d0:	df001115 	stw	fp,68(sp)
811015d4:	dcc01015 	stw	r19,64(sp)
811015d8:	dc800f15 	stw	r18,60(sp)
811015dc:	dc400e15 	stw	r17,56(sp)
811015e0:	dc000d15 	stw	r16,52(sp)
811015e4:	df001104 	addi	fp,sp,68
811015e8:	2005883a 	mov	r2,r4
811015ec:	e17ffa15 	stw	r5,-24(fp)
811015f0:	e1bffb15 	stw	r6,-20(fp)
811015f4:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
811015f8:	01204534 	movhi	r4,33044
811015fc:	21239a04 	addi	r4,r4,-29080
81101600:	110ed240 	call	8110ed24 <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81101604:	00800044 	movi	r2,1
81101608:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
8110160c:	e0bff903 	ldbu	r2,-28(fp)
81101610:	10c00060 	cmpeqi	r3,r2,1
81101614:	1800031e 	bne	r3,zero,81101624 <DDR2_MEMORY_RANDOM_READ_TEST+0x64>
81101618:	108000a0 	cmpeqi	r2,r2,2
8110161c:	1000081e 	bne	r2,zero,81101640 <DDR2_MEMORY_RANDOM_READ_TEST+0x80>
81101620:	00000e06 	br	8110165c <DDR2_MEMORY_RANDOM_READ_TEST+0x9c>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81101624:	e0bff903 	ldbu	r2,-28(fp)
81101628:	1009883a 	mov	r4,r2
8110162c:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101630:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81101634:	00a00034 	movhi	r2,32768
81101638:	e0bff115 	stw	r2,-60(fp)
    break;
8110163c:	00000d06 	br	81101674 <DDR2_MEMORY_RANDOM_READ_TEST+0xb4>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81101640:	e0bff903 	ldbu	r2,-28(fp)
81101644:	1009883a 	mov	r4,r2
81101648:	1100a7c0 	call	81100a7c <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
8110164c:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81101650:	00a00034 	movhi	r2,32768
81101654:	e0bff115 	stw	r2,-60(fp)
    break;
81101658:	00000606 	br	81101674 <DDR2_MEMORY_RANDOM_READ_TEST+0xb4>
    default:
      bSuccess = FALSE;
8110165c:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81101660:	01204534 	movhi	r4,33044
81101664:	21212e04 	addi	r4,r4,-31560
81101668:	110ed240 	call	8110ed24 <puts>
      return bSuccess;
8110166c:	e0bfef17 	ldw	r2,-68(fp)
81101670:	00008006 	br	81101874 <DDR2_MEMORY_RANDOM_READ_TEST+0x2b4>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81101674:	e0bff117 	ldw	r2,-60(fp)
81101678:	1004d53a 	srli	r2,r2,20
8110167c:	100b883a 	mov	r5,r2
81101680:	01204534 	movhi	r4,33044
81101684:	21232804 	addi	r4,r4,-29536
81101688:	110ebf80 	call	8110ebf8 <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
8110168c:	d0a03e17 	ldw	r2,-32520(gp)
81101690:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81101694:	e0fff017 	ldw	r3,-64(fp)
81101698:	e0bff117 	ldw	r2,-60(fp)
8110169c:	1885883a 	add	r2,r3,r2
811016a0:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
811016a4:	e0fff117 	ldw	r3,-60(fp)
811016a8:	00b33374 	movhi	r2,52429
811016ac:	10b33344 	addi	r2,r2,-13107
811016b0:	1888383a 	mulxuu	r4,r3,r2
811016b4:	1885383a 	mul	r2,r3,r2
811016b8:	1025883a 	mov	r18,r2
811016bc:	2027883a 	mov	r19,r4
811016c0:	9806d13a 	srli	r3,r19,4
811016c4:	e0bff017 	ldw	r2,-64(fp)
811016c8:	1885883a 	add	r2,r3,r2
811016cc:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
811016d0:	00800144 	movi	r2,5
811016d4:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
811016d8:	01204534 	movhi	r4,33044
811016dc:	2123a604 	addi	r4,r4,-29032
811016e0:	110ed240 	call	8110ed24 <puts>
  if (bVerbose == DDR2_VERBOSE) {
811016e4:	e0bffa17 	ldw	r2,-24(fp)
811016e8:	10800058 	cmpnei	r2,r2,1
811016ec:	1000031e 	bne	r2,zero,811016fc <DDR2_MEMORY_RANDOM_READ_TEST+0x13c>
    printf("00%%..");
811016f0:	01204534 	movhi	r4,33044
811016f4:	21238804 	addi	r4,r4,-29152
811016f8:	110ebf80 	call	8110ebf8 <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
811016fc:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101700:	d0a07717 	ldw	r2,-32292(gp)

  TimeStart = alt_nticks();
81101704:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81101708:	e0bff017 	ldw	r2,-64(fp)
8110170c:	e0bff215 	stw	r2,-56(fp)
81101710:	00002406 	br	811017a4 <DDR2_MEMORY_RANDOM_READ_TEST+0x1e4>
    if (xorshift32(&CurrentState) != *pSource){
81101714:	e0bff804 	addi	r2,fp,-32
81101718:	1009883a 	mov	r4,r2
8110171c:	11018980 	call	81101898 <xorshift32>
81101720:	1007883a 	mov	r3,r2
81101724:	e0bff217 	ldw	r2,-56(fp)
81101728:	10800017 	ldw	r2,0(r2)
8110172c:	18800126 	beq	r3,r2,81101734 <DDR2_MEMORY_RANDOM_READ_TEST+0x174>
      bSuccess = FALSE;
81101730:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
        //printf("Failed to read adress 0x%08X\n", pSource);
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
81101734:	e0bffa17 	ldw	r2,-24(fp)
81101738:	10800058 	cmpnei	r2,r2,1
8110173c:	1000161e 	bne	r2,zero,81101798 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d8>
81101740:	e0bff217 	ldw	r2,-56(fp)
81101744:	e0fff317 	ldw	r3,-52(fp)
81101748:	1880132e 	bgeu	r3,r2,81101798 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d8>
      printf("..%02d%%..",Percentage);
8110174c:	e0bff403 	ldbu	r2,-48(fp)
81101750:	100b883a 	mov	r5,r2
81101754:	01204534 	movhi	r4,33044
81101758:	21238a04 	addi	r4,r4,-29144
8110175c:	110ebf80 	call	8110ebf8 <printf>
	  NextMilestone += ByteLen/20;
81101760:	e0fff117 	ldw	r3,-60(fp)
81101764:	00b33374 	movhi	r2,52429
81101768:	10b33344 	addi	r2,r2,-13107
8110176c:	1888383a 	mulxuu	r4,r3,r2
81101770:	1885383a 	mul	r2,r3,r2
81101774:	1021883a 	mov	r16,r2
81101778:	2023883a 	mov	r17,r4
8110177c:	8804d13a 	srli	r2,r17,4
81101780:	e0fff317 	ldw	r3,-52(fp)
81101784:	1885883a 	add	r2,r3,r2
81101788:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
8110178c:	e0bff403 	ldbu	r2,-48(fp)
81101790:	10800144 	addi	r2,r2,5
81101794:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81101798:	e0bff217 	ldw	r2,-56(fp)
8110179c:	10800104 	addi	r2,r2,4
811017a0:	e0bff215 	stw	r2,-56(fp)
811017a4:	e0fff217 	ldw	r3,-56(fp)
811017a8:	e0bff517 	ldw	r2,-44(fp)
811017ac:	18bfd936 	bltu	r3,r2,81101714 <__reset+0xfb0e1714>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
811017b0:	e0bffa17 	ldw	r2,-24(fp)
811017b4:	10800058 	cmpnei	r2,r2,1
811017b8:	1000031e 	bne	r2,zero,811017c8 <DDR2_MEMORY_RANDOM_READ_TEST+0x208>
    printf("..100%%\n");
811017bc:	01204534 	movhi	r4,33044
811017c0:	21238d04 	addi	r4,r4,-29132
811017c4:	110ebf80 	call	8110ebf8 <printf>
  }

  if (bSuccess){
811017c8:	e0bfef17 	ldw	r2,-68(fp)
811017cc:	10002326 	beq	r2,zero,8110185c <DDR2_MEMORY_RANDOM_READ_TEST+0x29c>
    if (bTime == TRUE){
811017d0:	e0bffb17 	ldw	r2,-20(fp)
811017d4:	10800058 	cmpnei	r2,r2,1
811017d8:	10001b1e 	bne	r2,zero,81101848 <DDR2_MEMORY_RANDOM_READ_TEST+0x288>
811017dc:	d0e07717 	ldw	r3,-32292(gp)
      TimeElapsed = alt_nticks() - TimeStart;
811017e0:	e0bff717 	ldw	r2,-36(fp)
811017e4:	1885c83a 	sub	r2,r3,r2
811017e8:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
811017ec:	e13ff617 	ldw	r4,-40(fp)
811017f0:	110cb1c0 	call	8110cb1c <__floatsisf>
811017f4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811017f8:	d0a07617 	ldw	r2,-32296(gp)
811017fc:	1009883a 	mov	r4,r2
81101800:	110cc480 	call	8110cc48 <__floatunsisf>
81101804:	1007883a 	mov	r3,r2
81101808:	180b883a 	mov	r5,r3
8110180c:	8009883a 	mov	r4,r16
81101810:	110c2d00 	call	8110c2d0 <__divsf3>
81101814:	1007883a 	mov	r3,r2
81101818:	1805883a 	mov	r2,r3
8110181c:	1009883a 	mov	r4,r2
81101820:	110d4600 	call	8110d460 <__extendsfdf2>
81101824:	1009883a 	mov	r4,r2
81101828:	180b883a 	mov	r5,r3
8110182c:	200d883a 	mov	r6,r4
81101830:	280f883a 	mov	r7,r5
81101834:	e17ff117 	ldw	r5,-60(fp)
81101838:	01204534 	movhi	r4,33044
8110183c:	21236504 	addi	r4,r4,-29292
81101840:	110ebf80 	call	8110ebf8 <printf>
81101844:	00000806 	br	81101868 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a8>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
81101848:	e17ff117 	ldw	r5,-60(fp)
8110184c:	01204534 	movhi	r4,33044
81101850:	2123ac04 	addi	r4,r4,-29008
81101854:	110ebf80 	call	8110ebf8 <printf>
81101858:	00000306 	br	81101868 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a8>
    }
  } else {
    printf("DDR2 read test fail\n");
8110185c:	01204534 	movhi	r4,33044
81101860:	21237104 	addi	r4,r4,-29244
81101864:	110ed240 	call	8110ed24 <puts>
  }
  printf("\n");
81101868:	01000284 	movi	r4,10
8110186c:	110ec440 	call	8110ec44 <putchar>

  return bSuccess;
81101870:	e0bfef17 	ldw	r2,-68(fp)
}
81101874:	e6fffc04 	addi	sp,fp,-16
81101878:	dfc00517 	ldw	ra,20(sp)
8110187c:	df000417 	ldw	fp,16(sp)
81101880:	dcc00317 	ldw	r19,12(sp)
81101884:	dc800217 	ldw	r18,8(sp)
81101888:	dc400117 	ldw	r17,4(sp)
8110188c:	dc000017 	ldw	r16,0(sp)
81101890:	dec00604 	addi	sp,sp,24
81101894:	f800283a 	ret

81101898 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
81101898:	defffd04 	addi	sp,sp,-12
8110189c:	de00012e 	bgeu	sp,et,811018a4 <xorshift32+0xc>
811018a0:	003b68fa 	trap	3
811018a4:	df000215 	stw	fp,8(sp)
811018a8:	df000204 	addi	fp,sp,8
811018ac:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
811018b0:	e0bfff17 	ldw	r2,-4(fp)
811018b4:	10800017 	ldw	r2,0(r2)
811018b8:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
811018bc:	e0bffe17 	ldw	r2,-8(fp)
811018c0:	1004937a 	slli	r2,r2,13
811018c4:	e0fffe17 	ldw	r3,-8(fp)
811018c8:	1884f03a 	xor	r2,r3,r2
811018cc:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
811018d0:	e0bffe17 	ldw	r2,-8(fp)
811018d4:	1004d47a 	srli	r2,r2,17
811018d8:	e0fffe17 	ldw	r3,-8(fp)
811018dc:	1884f03a 	xor	r2,r3,r2
811018e0:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
811018e4:	e0bffe17 	ldw	r2,-8(fp)
811018e8:	1004917a 	slli	r2,r2,5
811018ec:	e0fffe17 	ldw	r3,-8(fp)
811018f0:	1884f03a 	xor	r2,r3,r2
811018f4:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
811018f8:	e0bfff17 	ldw	r2,-4(fp)
811018fc:	e0fffe17 	ldw	r3,-8(fp)
81101900:	10c00015 	stw	r3,0(r2)

  return x;
81101904:	e0bffe17 	ldw	r2,-8(fp)
}
81101908:	e037883a 	mov	sp,fp
8110190c:	df000017 	ldw	fp,0(sp)
81101910:	dec00104 	addi	sp,sp,4
81101914:	f800283a 	ret

81101918 <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
81101918:	defffb04 	addi	sp,sp,-20
8110191c:	de00012e 	bgeu	sp,et,81101924 <DMA_OPEN_DEVICE+0xc>
81101920:	003b68fa 	trap	3
81101924:	dfc00415 	stw	ra,16(sp)
81101928:	df000315 	stw	fp,12(sp)
8110192c:	df000304 	addi	fp,sp,12
81101930:	e13ffe15 	stw	r4,-8(fp)
81101934:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81101938:	00800044 	movi	r2,1
8110193c:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81101940:	e13fff17 	ldw	r4,-4(fp)
81101944:	1136b380 	call	81136b38 <alt_msgdma_open>
81101948:	1007883a 	mov	r3,r2
8110194c:	e0bffe17 	ldw	r2,-8(fp)
81101950:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81101954:	e0bffe17 	ldw	r2,-8(fp)
81101958:	10800017 	ldw	r2,0(r2)
8110195c:	1000011e 	bne	r2,zero,81101964 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
81101960:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81101964:	e0bffd17 	ldw	r2,-12(fp)
}
81101968:	e037883a 	mov	sp,fp
8110196c:	dfc00117 	ldw	ra,4(sp)
81101970:	df000017 	ldw	fp,0(sp)
81101974:	dec00204 	addi	sp,sp,8
81101978:	f800283a 	ret

8110197c <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
8110197c:	defffc04 	addi	sp,sp,-16
81101980:	de00012e 	bgeu	sp,et,81101988 <DMA_CONFIG+0xc>
81101984:	003b68fa 	trap	3
81101988:	df000315 	stw	fp,12(sp)
8110198c:	df000304 	addi	fp,sp,12
81101990:	e13ffe15 	stw	r4,-8(fp)
81101994:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
81101998:	00800044 	movi	r2,1
8110199c:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
811019a0:	e0bffe17 	ldw	r2,-8(fp)
811019a4:	10800317 	ldw	r2,12(r2)
811019a8:	10800104 	addi	r2,r2,4
811019ac:	e0ffff17 	ldw	r3,-4(fp)
811019b0:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811019b4:	e0bffd17 	ldw	r2,-12(fp)
}
811019b8:	e037883a 	mov	sp,fp
811019bc:	df000017 	ldw	fp,0(sp)
811019c0:	dec00104 	addi	sp,sp,4
811019c4:	f800283a 	ret

811019c8 <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811019c8:	defffd04 	addi	sp,sp,-12
811019cc:	de00012e 	bgeu	sp,et,811019d4 <DMA_BUSY+0xc>
811019d0:	003b68fa 	trap	3
811019d4:	df000215 	stw	fp,8(sp)
811019d8:	df000204 	addi	fp,sp,8
811019dc:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
811019e0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
811019e4:	e0bfff17 	ldw	r2,-4(fp)
811019e8:	10800317 	ldw	r2,12(r2)
811019ec:	10800037 	ldwio	r2,0(r2)
811019f0:	1080004c 	andi	r2,r2,1
811019f4:	10000226 	beq	r2,zero,81101a00 <DMA_BUSY+0x38>
    bBusy = TRUE;
811019f8:	00800044 	movi	r2,1
811019fc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81101a00:	e0bffe17 	ldw	r2,-8(fp)
}
81101a04:	e037883a 	mov	sp,fp
81101a08:	df000017 	ldw	fp,0(sp)
81101a0c:	dec00104 	addi	sp,sp,4
81101a10:	f800283a 	ret

81101a14 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81101a14:	defffd04 	addi	sp,sp,-12
81101a18:	de00012e 	bgeu	sp,et,81101a20 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81101a1c:	003b68fa 	trap	3
81101a20:	df000215 	stw	fp,8(sp)
81101a24:	df000204 	addi	fp,sp,8
81101a28:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81101a2c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81101a30:	e0bfff17 	ldw	r2,-4(fp)
81101a34:	10800317 	ldw	r2,12(r2)
81101a38:	10800037 	ldwio	r2,0(r2)
81101a3c:	1080010c 	andi	r2,r2,4
81101a40:	10000226 	beq	r2,zero,81101a4c <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81101a44:	00800044 	movi	r2,1
81101a48:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81101a4c:	e0bffe17 	ldw	r2,-8(fp)
}
81101a50:	e037883a 	mov	sp,fp
81101a54:	df000017 	ldw	fp,0(sp)
81101a58:	dec00104 	addi	sp,sp,4
81101a5c:	f800283a 	ret

81101a60 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81101a60:	defffd04 	addi	sp,sp,-12
81101a64:	de00012e 	bgeu	sp,et,81101a6c <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81101a68:	003b68fa 	trap	3
81101a6c:	df000215 	stw	fp,8(sp)
81101a70:	df000204 	addi	fp,sp,8
81101a74:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81101a78:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81101a7c:	e0bfff17 	ldw	r2,-4(fp)
81101a80:	10800317 	ldw	r2,12(r2)
81101a84:	10800037 	ldwio	r2,0(r2)
81101a88:	1080008c 	andi	r2,r2,2
81101a8c:	10000226 	beq	r2,zero,81101a98 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81101a90:	00800044 	movi	r2,1
81101a94:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81101a98:	e0bffe17 	ldw	r2,-8(fp)
}
81101a9c:	e037883a 	mov	sp,fp
81101aa0:	df000017 	ldw	fp,0(sp)
81101aa4:	dec00104 	addi	sp,sp,4
81101aa8:	f800283a 	ret

81101aac <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101aac:	defffa04 	addi	sp,sp,-24
81101ab0:	de00012e 	bgeu	sp,et,81101ab8 <DMA_DISPATCHER_STOP+0xc>
81101ab4:	003b68fa 	trap	3
81101ab8:	dfc00515 	stw	ra,20(sp)
81101abc:	df000415 	stw	fp,16(sp)
81101ac0:	df000404 	addi	fp,sp,16
81101ac4:	e13ffd15 	stw	r4,-12(fp)
81101ac8:	e17ffe15 	stw	r5,-8(fp)
81101acc:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101ad0:	00800044 	movi	r2,1
81101ad4:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81101ad8:	e0bffd17 	ldw	r2,-12(fp)
81101adc:	10800317 	ldw	r2,12(r2)
81101ae0:	10800104 	addi	r2,r2,4
81101ae4:	00c00044 	movi	r3,1
81101ae8:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101aec:	e0bffe17 	ldw	r2,-8(fp)
81101af0:	10800058 	cmpnei	r2,r2,1
81101af4:	10000e1e 	bne	r2,zero,81101b30 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101af8:	00000706 	br	81101b18 <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101afc:	e0bfff17 	ldw	r2,-4(fp)
81101b00:	1000031e 	bne	r2,zero,81101b10 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81101b04:	01000044 	movi	r4,1
81101b08:	1123c880 	call	81123c88 <usleep>
81101b0c:	00000206 	br	81101b18 <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81101b10:	e13fff17 	ldw	r4,-4(fp)
81101b14:	1123c880 	call	81123c88 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101b18:	e0bffd17 	ldw	r2,-12(fp)
81101b1c:	10800317 	ldw	r2,12(r2)
81101b20:	10800037 	ldwio	r2,0(r2)
81101b24:	1080080c 	andi	r2,r2,32
81101b28:	103ff41e 	bne	r2,zero,81101afc <__reset+0xfb0e1afc>
81101b2c:	00000206 	br	81101b38 <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101b30:	e0bffc17 	ldw	r2,-16(fp)
81101b34:	00000106 	br	81101b3c <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81101b38:	e0bffc17 	ldw	r2,-16(fp)
}
81101b3c:	e037883a 	mov	sp,fp
81101b40:	dfc00117 	ldw	ra,4(sp)
81101b44:	df000017 	ldw	fp,0(sp)
81101b48:	dec00204 	addi	sp,sp,8
81101b4c:	f800283a 	ret

81101b50 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101b50:	defffa04 	addi	sp,sp,-24
81101b54:	de00012e 	bgeu	sp,et,81101b5c <DMA_DISPATCHER_RESET+0xc>
81101b58:	003b68fa 	trap	3
81101b5c:	dfc00515 	stw	ra,20(sp)
81101b60:	df000415 	stw	fp,16(sp)
81101b64:	df000404 	addi	fp,sp,16
81101b68:	e13ffd15 	stw	r4,-12(fp)
81101b6c:	e17ffe15 	stw	r5,-8(fp)
81101b70:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101b74:	00800044 	movi	r2,1
81101b78:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81101b7c:	e0bffd17 	ldw	r2,-12(fp)
81101b80:	10800317 	ldw	r2,12(r2)
81101b84:	10800104 	addi	r2,r2,4
81101b88:	00c00084 	movi	r3,2
81101b8c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101b90:	e0bffe17 	ldw	r2,-8(fp)
81101b94:	10800058 	cmpnei	r2,r2,1
81101b98:	10000e1e 	bne	r2,zero,81101bd4 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101b9c:	00000706 	br	81101bbc <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101ba0:	e0bfff17 	ldw	r2,-4(fp)
81101ba4:	1000031e 	bne	r2,zero,81101bb4 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81101ba8:	01000044 	movi	r4,1
81101bac:	1123c880 	call	81123c88 <usleep>
81101bb0:	00000206 	br	81101bbc <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81101bb4:	e13fff17 	ldw	r4,-4(fp)
81101bb8:	1123c880 	call	81123c88 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101bbc:	e0bffd17 	ldw	r2,-12(fp)
81101bc0:	10800317 	ldw	r2,12(r2)
81101bc4:	10800037 	ldwio	r2,0(r2)
81101bc8:	1080100c 	andi	r2,r2,64
81101bcc:	103ff41e 	bne	r2,zero,81101ba0 <__reset+0xfb0e1ba0>
81101bd0:	00000206 	br	81101bdc <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101bd4:	e0bffc17 	ldw	r2,-16(fp)
81101bd8:	00000106 	br	81101be0 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81101bdc:	e0bffc17 	ldw	r2,-16(fp)
}
81101be0:	e037883a 	mov	sp,fp
81101be4:	dfc00117 	ldw	ra,4(sp)
81101be8:	df000017 	ldw	fp,0(sp)
81101bec:	dec00204 	addi	sp,sp,8
81101bf0:	f800283a 	ret

81101bf4 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101bf4:	defff604 	addi	sp,sp,-40
81101bf8:	de00012e 	bgeu	sp,et,81101c00 <DMA_SINGLE_TRANSFER+0xc>
81101bfc:	003b68fa 	trap	3
81101c00:	dfc00915 	stw	ra,36(sp)
81101c04:	df000815 	stw	fp,32(sp)
81101c08:	dc000715 	stw	r16,28(sp)
81101c0c:	df000804 	addi	fp,sp,32
81101c10:	e13ffb15 	stw	r4,-20(fp)
81101c14:	e17ffc15 	stw	r5,-16(fp)
81101c18:	e1bffd15 	stw	r6,-12(fp)
81101c1c:	e1fffe15 	stw	r7,-8(fp)
81101c20:	defff804 	addi	sp,sp,-32
81101c24:	d8800204 	addi	r2,sp,8
81101c28:	108003c4 	addi	r2,r2,15
81101c2c:	1004d13a 	srli	r2,r2,4
81101c30:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101c34:	00800044 	movi	r2,1
81101c38:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81101c3c:	e0fffc17 	ldw	r3,-16(fp)
81101c40:	e13ffd17 	ldw	r4,-12(fp)
81101c44:	e0800217 	ldw	r2,8(fp)
81101c48:	d8800115 	stw	r2,4(sp)
81101c4c:	e0bffe17 	ldw	r2,-8(fp)
81101c50:	d8800015 	stw	r2,0(sp)
81101c54:	200f883a 	mov	r7,r4
81101c58:	180d883a 	mov	r6,r3
81101c5c:	800b883a 	mov	r5,r16
81101c60:	e13ffb17 	ldw	r4,-20(fp)
81101c64:	1135b340 	call	81135b34 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101c68:	10000326 	beq	r2,zero,81101c78 <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81101c6c:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81101c70:	e0bffa17 	ldw	r2,-24(fp)
81101c74:	00001d06 	br	81101cec <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101c78:	800b883a 	mov	r5,r16
81101c7c:	e13ffb17 	ldw	r4,-20(fp)
81101c80:	1136da80 	call	81136da8 <alt_msgdma_standard_descriptor_async_transfer>
81101c84:	10000326 	beq	r2,zero,81101c94 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81101c88:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81101c8c:	e0bffa17 	ldw	r2,-24(fp)
81101c90:	00001606 	br	81101cec <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101c94:	e0bffa17 	ldw	r2,-24(fp)
81101c98:	10800060 	cmpeqi	r2,r2,1
81101c9c:	1007883a 	mov	r3,r2
81101ca0:	e0800317 	ldw	r2,12(fp)
81101ca4:	10800060 	cmpeqi	r2,r2,1
81101ca8:	1884703a 	and	r2,r3,r2
81101cac:	10803fcc 	andi	r2,r2,255
81101cb0:	10000d26 	beq	r2,zero,81101ce8 <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101cb4:	00000706 	br	81101cd4 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101cb8:	e0800417 	ldw	r2,16(fp)
81101cbc:	1000031e 	bne	r2,zero,81101ccc <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81101cc0:	0100fa04 	movi	r4,1000
81101cc4:	1123c880 	call	81123c88 <usleep>
81101cc8:	00000206 	br	81101cd4 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81101ccc:	e1000417 	ldw	r4,16(fp)
81101cd0:	1123c880 	call	81123c88 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101cd4:	e0bffb17 	ldw	r2,-20(fp)
81101cd8:	10800317 	ldw	r2,12(r2)
81101cdc:	10800037 	ldwio	r2,0(r2)
81101ce0:	1080004c 	andi	r2,r2,1
81101ce4:	103ff41e 	bne	r2,zero,81101cb8 <__reset+0xfb0e1cb8>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101ce8:	e0bffa17 	ldw	r2,-24(fp)
}
81101cec:	e6ffff04 	addi	sp,fp,-4
81101cf0:	dfc00217 	ldw	ra,8(sp)
81101cf4:	df000117 	ldw	fp,4(sp)
81101cf8:	dc000017 	ldw	r16,0(sp)
81101cfc:	dec00304 	addi	sp,sp,12
81101d00:	f800283a 	ret

81101d04 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101d04:	defff504 	addi	sp,sp,-44
81101d08:	de00012e 	bgeu	sp,et,81101d10 <DMA_MULTIPLE_TRANSFER+0xc>
81101d0c:	003b68fa 	trap	3
81101d10:	dfc00a15 	stw	ra,40(sp)
81101d14:	df000915 	stw	fp,36(sp)
81101d18:	dc000815 	stw	r16,32(sp)
81101d1c:	df000904 	addi	fp,sp,36
81101d20:	e13ffb15 	stw	r4,-20(fp)
81101d24:	e17ffc15 	stw	r5,-16(fp)
81101d28:	e1bffd15 	stw	r6,-12(fp)
81101d2c:	3805883a 	mov	r2,r7
81101d30:	e0bffe05 	stb	r2,-8(fp)
81101d34:	defff804 	addi	sp,sp,-32
81101d38:	d8800204 	addi	r2,sp,8
81101d3c:	108003c4 	addi	r2,r2,15
81101d40:	1004d13a 	srli	r2,r2,4
81101d44:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101d48:	00800044 	movi	r2,1
81101d4c:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81101d50:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101d54:	00002506 	br	81101dec <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81101d58:	e0bffa03 	ldbu	r2,-24(fp)
81101d5c:	1085883a 	add	r2,r2,r2
81101d60:	1085883a 	add	r2,r2,r2
81101d64:	1007883a 	mov	r3,r2
81101d68:	e0bffc17 	ldw	r2,-16(fp)
81101d6c:	10c5883a 	add	r2,r2,r3
81101d70:	10800017 	ldw	r2,0(r2)
81101d74:	1009883a 	mov	r4,r2
81101d78:	e0bffa03 	ldbu	r2,-24(fp)
81101d7c:	1085883a 	add	r2,r2,r2
81101d80:	1085883a 	add	r2,r2,r2
81101d84:	1007883a 	mov	r3,r2
81101d88:	e0bffd17 	ldw	r2,-12(fp)
81101d8c:	10c5883a 	add	r2,r2,r3
81101d90:	10800017 	ldw	r2,0(r2)
81101d94:	1007883a 	mov	r3,r2
81101d98:	e0800317 	ldw	r2,12(fp)
81101d9c:	10804034 	orhi	r2,r2,256
81101da0:	d8800115 	stw	r2,4(sp)
81101da4:	e0800217 	ldw	r2,8(fp)
81101da8:	d8800015 	stw	r2,0(sp)
81101dac:	180f883a 	mov	r7,r3
81101db0:	200d883a 	mov	r6,r4
81101db4:	800b883a 	mov	r5,r16
81101db8:	e13ffb17 	ldw	r4,-20(fp)
81101dbc:	1135b340 	call	81135b34 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101dc0:	10000226 	beq	r2,zero,81101dcc <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81101dc4:	e03ff915 	stw	zero,-28(fp)
81101dc8:	00000506 	br	81101de0 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101dcc:	800b883a 	mov	r5,r16
81101dd0:	e13ffb17 	ldw	r4,-20(fp)
81101dd4:	1136da80 	call	81136da8 <alt_msgdma_standard_descriptor_async_transfer>
81101dd8:	10000126 	beq	r2,zero,81101de0 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81101ddc:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81101de0:	e0bffa03 	ldbu	r2,-24(fp)
81101de4:	10800044 	addi	r2,r2,1
81101de8:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101dec:	e0bff917 	ldw	r2,-28(fp)
81101df0:	10800060 	cmpeqi	r2,r2,1
81101df4:	1009883a 	mov	r4,r2
81101df8:	e0fffa03 	ldbu	r3,-24(fp)
81101dfc:	e0bffe03 	ldbu	r2,-8(fp)
81101e00:	10bfffc4 	addi	r2,r2,-1
81101e04:	1884803a 	cmplt	r2,r3,r2
81101e08:	2084703a 	and	r2,r4,r2
81101e0c:	10803fcc 	andi	r2,r2,255
81101e10:	103fd11e 	bne	r2,zero,81101d58 <__reset+0xfb0e1d58>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81101e14:	e0bff917 	ldw	r2,-28(fp)
81101e18:	10800058 	cmpnei	r2,r2,1
81101e1c:	1000211e 	bne	r2,zero,81101ea4 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81101e20:	e0bffa03 	ldbu	r2,-24(fp)
81101e24:	1085883a 	add	r2,r2,r2
81101e28:	1085883a 	add	r2,r2,r2
81101e2c:	1007883a 	mov	r3,r2
81101e30:	e0bffc17 	ldw	r2,-16(fp)
81101e34:	10c5883a 	add	r2,r2,r3
81101e38:	10800017 	ldw	r2,0(r2)
81101e3c:	1009883a 	mov	r4,r2
81101e40:	e0bffa03 	ldbu	r2,-24(fp)
81101e44:	1085883a 	add	r2,r2,r2
81101e48:	1085883a 	add	r2,r2,r2
81101e4c:	1007883a 	mov	r3,r2
81101e50:	e0bffd17 	ldw	r2,-12(fp)
81101e54:	10c5883a 	add	r2,r2,r3
81101e58:	10800017 	ldw	r2,0(r2)
81101e5c:	1007883a 	mov	r3,r2
81101e60:	e0800317 	ldw	r2,12(fp)
81101e64:	d8800115 	stw	r2,4(sp)
81101e68:	e0800217 	ldw	r2,8(fp)
81101e6c:	d8800015 	stw	r2,0(sp)
81101e70:	180f883a 	mov	r7,r3
81101e74:	200d883a 	mov	r6,r4
81101e78:	800b883a 	mov	r5,r16
81101e7c:	e13ffb17 	ldw	r4,-20(fp)
81101e80:	1135b340 	call	81135b34 <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101e84:	10000226 	beq	r2,zero,81101e90 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81101e88:	e03ff915 	stw	zero,-28(fp)
81101e8c:	00000506 	br	81101ea4 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101e90:	800b883a 	mov	r5,r16
81101e94:	e13ffb17 	ldw	r4,-20(fp)
81101e98:	1136da80 	call	81136da8 <alt_msgdma_standard_descriptor_async_transfer>
81101e9c:	10000126 	beq	r2,zero,81101ea4 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81101ea0:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101ea4:	e0bff917 	ldw	r2,-28(fp)
81101ea8:	10800060 	cmpeqi	r2,r2,1
81101eac:	1007883a 	mov	r3,r2
81101eb0:	e0800417 	ldw	r2,16(fp)
81101eb4:	10800060 	cmpeqi	r2,r2,1
81101eb8:	1884703a 	and	r2,r3,r2
81101ebc:	10803fcc 	andi	r2,r2,255
81101ec0:	10000d26 	beq	r2,zero,81101ef8 <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101ec4:	00000706 	br	81101ee4 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101ec8:	e0800517 	ldw	r2,20(fp)
81101ecc:	1000031e 	bne	r2,zero,81101edc <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81101ed0:	0100fa04 	movi	r4,1000
81101ed4:	1123c880 	call	81123c88 <usleep>
81101ed8:	00000206 	br	81101ee4 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81101edc:	e1000517 	ldw	r4,20(fp)
81101ee0:	1123c880 	call	81123c88 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101ee4:	e0bffb17 	ldw	r2,-20(fp)
81101ee8:	10800317 	ldw	r2,12(r2)
81101eec:	10800037 	ldwio	r2,0(r2)
81101ef0:	1080004c 	andi	r2,r2,1
81101ef4:	103ff41e 	bne	r2,zero,81101ec8 <__reset+0xfb0e1ec8>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101ef8:	e0bff917 	ldw	r2,-28(fp)
}
81101efc:	e6ffff04 	addi	sp,fp,-4
81101f00:	dfc00217 	ldw	ra,8(sp)
81101f04:	df000117 	ldw	fp,4(sp)
81101f08:	dc000017 	ldw	r16,0(sp)
81101f0c:	dec00304 	addi	sp,sp,12
81101f10:	f800283a 	ret

81101f14 <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
81101f14:	deffef04 	addi	sp,sp,-68
81101f18:	de00012e 	bgeu	sp,et,81101f20 <POWER_Read+0xc>
81101f1c:	003b68fa 	trap	3
81101f20:	dfc01015 	stw	ra,64(sp)
81101f24:	df000f15 	stw	fp,60(sp)
81101f28:	df000f04 	addi	fp,sp,60
81101f2c:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
81101f30:	00800044 	movi	r2,1
81101f34:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
81101f38:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
81101f3c:	00800204 	movi	r2,8
81101f40:	e0bffc15 	stw	r2,-16(fp)
81101f44:	00800104 	movi	r2,4
81101f48:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
81101f4c:	00800044 	movi	r2,1
81101f50:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
81101f54:	00800044 	movi	r2,1
81101f58:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
81101f5c:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81101f60:	e03ff515 	stw	zero,-44(fp)
81101f64:	00007106 	br	8110212c <POWER_Read+0x218>
        NextChannel = 0;
81101f68:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81101f6c:	e0bff517 	ldw	r2,-44(fp)
81101f70:	10c03fcc 	andi	r3,r2,255
81101f74:	e13ffa03 	ldbu	r4,-24(fp)
81101f78:	e0bfff17 	ldw	r2,-4(fp)
81101f7c:	d8800115 	stw	r2,4(sp)
81101f80:	e0bff917 	ldw	r2,-28(fp)
81101f84:	d8800015 	stw	r2,0(sp)
81101f88:	e1fff817 	ldw	r7,-32(fp)
81101f8c:	e1bff717 	ldw	r6,-36(fp)
81101f90:	200b883a 	mov	r5,r4
81101f94:	1809883a 	mov	r4,r3
81101f98:	1105d840 	call	81105d84 <POWER_SPI_RW>
81101f9c:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81101fa0:	e03ff415 	stw	zero,-48(fp)
81101fa4:	00005306 	br	811020f4 <POWER_Read+0x1e0>
            NextChannel = i + 1;
81101fa8:	e0bff417 	ldw	r2,-48(fp)
81101fac:	10800044 	addi	r2,r2,1
81101fb0:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81101fb4:	e0bff517 	ldw	r2,-44(fp)
81101fb8:	10c03fcc 	andi	r3,r2,255
81101fbc:	e13ffa03 	ldbu	r4,-24(fp)
81101fc0:	e0bffe04 	addi	r2,fp,-8
81101fc4:	d8800115 	stw	r2,4(sp)
81101fc8:	e0bff917 	ldw	r2,-28(fp)
81101fcc:	d8800015 	stw	r2,0(sp)
81101fd0:	e1fff817 	ldw	r7,-32(fp)
81101fd4:	e1bff717 	ldw	r6,-36(fp)
81101fd8:	200b883a 	mov	r5,r4
81101fdc:	1809883a 	mov	r4,r3
81101fe0:	1105d840 	call	81105d84 <POWER_SPI_RW>
81101fe4:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
81101fe8:	e0bff317 	ldw	r2,-52(fp)
81101fec:	10003b26 	beq	r2,zero,811020dc <POWER_Read+0x1c8>
                HEAD = (Value32 >> 30) & 0x03;
81101ff0:	e0bffe17 	ldw	r2,-8(fp)
81101ff4:	1004d7ba 	srli	r2,r2,30
81101ff8:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
81101ffc:	e0bffe17 	ldw	r2,-8(fp)
81102000:	1004d07a 	srli	r2,r2,1
81102004:	108001cc 	andi	r2,r2,7
81102008:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
8110200c:	e0bffe17 	ldw	r2,-8(fp)
81102010:	1004d13a 	srli	r2,r2,4
81102014:	1080004c 	andi	r2,r2,1
81102018:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
8110201c:	e0bffe17 	ldw	r2,-8(fp)
81102020:	1004d17a 	srli	r2,r2,5
81102024:	1080004c 	andi	r2,r2,1
81102028:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
8110202c:	e0bffe17 	ldw	r2,-8(fp)
81102030:	1080004c 	andi	r2,r2,1
81102034:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
81102038:	e0bffa43 	ldbu	r2,-23(fp)
8110203c:	10000626 	beq	r2,zero,81102058 <POWER_Read+0x144>
                    printf("[%d]Unexpected HEAD\r\n",i);
81102040:	e17ff417 	ldw	r5,-48(fp)
81102044:	01204534 	movhi	r4,33044
81102048:	2123b504 	addi	r4,r4,-28972
8110204c:	110ebf80 	call	8110ebf8 <printf>
                    bSuccess = FALSE;
81102050:	e03ff315 	stw	zero,-52(fp)
81102054:	00001406 	br	811020a8 <POWER_Read+0x194>
                }else if (Channel != i){
81102058:	e0fffa83 	ldbu	r3,-22(fp)
8110205c:	e0bff417 	ldw	r2,-48(fp)
81102060:	18800926 	beq	r3,r2,81102088 <POWER_Read+0x174>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
81102064:	e0bffa83 	ldbu	r2,-22(fp)
81102068:	100f883a 	mov	r7,r2
8110206c:	e1bff417 	ldw	r6,-48(fp)
81102070:	e17ff417 	ldw	r5,-48(fp)
81102074:	01204534 	movhi	r4,33044
81102078:	2123bb04 	addi	r4,r4,-28948
8110207c:	110ebf80 	call	8110ebf8 <printf>
                    bSuccess = FALSE;
81102080:	e03ff315 	stw	zero,-52(fp)
81102084:	00000806 	br	811020a8 <POWER_Read+0x194>
                }else if (SIGN ^ bSIGN){
81102088:	e0fffac3 	ldbu	r3,-21(fp)
8110208c:	e0bff817 	ldw	r2,-32(fp)
81102090:	18800526 	beq	r3,r2,811020a8 <POWER_Read+0x194>
                    printf("[%d]Unexpected SIGN\r\n",i);
81102094:	e17ff417 	ldw	r5,-48(fp)
81102098:	01204534 	movhi	r4,33044
8110209c:	2123c704 	addi	r4,r4,-28900
811020a0:	110ebf80 	call	8110ebf8 <printf>
                    bSuccess = FALSE;
811020a4:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
811020a8:	e0bff317 	ldw	r2,-52(fp)
811020ac:	10000e26 	beq	r2,zero,811020e8 <POWER_Read+0x1d4>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
811020b0:	e0bff617 	ldw	r2,-40(fp)
811020b4:	10c00044 	addi	r3,r2,1
811020b8:	e0fff615 	stw	r3,-40(fp)
811020bc:	1085883a 	add	r2,r2,r2
811020c0:	1085883a 	add	r2,r2,r2
811020c4:	1007883a 	mov	r3,r2
811020c8:	e0bfff17 	ldw	r2,-4(fp)
811020cc:	10c5883a 	add	r2,r2,r3
811020d0:	e0fffe17 	ldw	r3,-8(fp)
811020d4:	10c00015 	stw	r3,0(r2)
811020d8:	00000306 	br	811020e8 <POWER_Read+0x1d4>
            }else{
                printf("SPI Read Error\r\n");
811020dc:	01204534 	movhi	r4,33044
811020e0:	2123cd04 	addi	r4,r4,-28876
811020e4:	110ed240 	call	8110ed24 <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
811020e8:	e0bff417 	ldw	r2,-48(fp)
811020ec:	10800044 	addi	r2,r2,1
811020f0:	e0bff415 	stw	r2,-48(fp)
811020f4:	e0bff517 	ldw	r2,-44(fp)
811020f8:	1085883a 	add	r2,r2,r2
811020fc:	1085883a 	add	r2,r2,r2
81102100:	e0fff304 	addi	r3,fp,-52
81102104:	1885883a 	add	r2,r3,r2
81102108:	10800904 	addi	r2,r2,36
8110210c:	10800017 	ldw	r2,0(r2)
81102110:	e0fff417 	ldw	r3,-48(fp)
81102114:	1880020e 	bge	r3,r2,81102120 <POWER_Read+0x20c>
81102118:	e0bff317 	ldw	r2,-52(fp)
8110211c:	103fa21e 	bne	r2,zero,81101fa8 <__reset+0xfb0e1fa8>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81102120:	e0bff517 	ldw	r2,-44(fp)
81102124:	10800044 	addi	r2,r2,1
81102128:	e0bff515 	stw	r2,-44(fp)
8110212c:	e0bff517 	ldw	r2,-44(fp)
81102130:	10800088 	cmpgei	r2,r2,2
81102134:	1000021e 	bne	r2,zero,81102140 <POWER_Read+0x22c>
81102138:	e0bff317 	ldw	r2,-52(fp)
8110213c:	103f8a1e 	bne	r2,zero,81101f68 <__reset+0xfb0e1f68>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
81102140:	e0bff317 	ldw	r2,-52(fp)
 }
81102144:	e037883a 	mov	sp,fp
81102148:	dfc00117 	ldw	ra,4(sp)
8110214c:	df000017 	ldw	fp,0(sp)
81102150:	dec00204 	addi	sp,sp,8
81102154:	f800283a 	ret

81102158 <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
81102158:	defff904 	addi	sp,sp,-28
8110215c:	de00012e 	bgeu	sp,et,81102164 <TEMP_Read+0xc>
81102160:	003b68fa 	trap	3
81102164:	dfc00615 	stw	ra,24(sp)
81102168:	df000515 	stw	fp,20(sp)
8110216c:	df000504 	addi	fp,sp,20
81102170:	e13ffe15 	stw	r4,-8(fp)
81102174:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
81102178:	00800c04 	movi	r2,48
8110217c:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
81102180:	e0bffd83 	ldbu	r2,-10(fp)
81102184:	10c03fcc 	andi	r3,r2,255
81102188:	18c0201c 	xori	r3,r3,128
8110218c:	18ffe004 	addi	r3,r3,-128
81102190:	e0bffdc4 	addi	r2,fp,-9
81102194:	d8800015 	stw	r2,0(sp)
81102198:	000f883a 	mov	r7,zero
8110219c:	180d883a 	mov	r6,r3
811021a0:	01600034 	movhi	r5,32768
811021a4:	29415804 	addi	r5,r5,1376
811021a8:	01200034 	movhi	r4,32768
811021ac:	21015c04 	addi	r4,r4,1392
811021b0:	11053640 	call	81105364 <I2C_Read>
811021b4:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
811021b8:	e0bffc17 	ldw	r2,-16(fp)
811021bc:	10000226 	beq	r2,zero,811021c8 <TEMP_Read+0x70>
            BoardTemp = Data;
811021c0:	e0bffdc3 	ldbu	r2,-9(fp)
811021c4:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
811021c8:	e0bffc17 	ldw	r2,-16(fp)
811021cc:	10001226 	beq	r2,zero,81102218 <TEMP_Read+0xc0>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
811021d0:	e0bffd83 	ldbu	r2,-10(fp)
811021d4:	10c03fcc 	andi	r3,r2,255
811021d8:	18c0201c 	xori	r3,r3,128
811021dc:	18ffe004 	addi	r3,r3,-128
811021e0:	e0bffdc4 	addi	r2,fp,-9
811021e4:	d8800015 	stw	r2,0(sp)
811021e8:	01c00044 	movi	r7,1
811021ec:	180d883a 	mov	r6,r3
811021f0:	01600034 	movhi	r5,32768
811021f4:	29415804 	addi	r5,r5,1376
811021f8:	01200034 	movhi	r4,32768
811021fc:	21015c04 	addi	r4,r4,1392
81102200:	11053640 	call	81105364 <I2C_Read>
81102204:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
81102208:	e0bffc17 	ldw	r2,-16(fp)
8110220c:	10000226 	beq	r2,zero,81102218 <TEMP_Read+0xc0>
                FpgaTemp = Data;
81102210:	e0bffdc3 	ldbu	r2,-9(fp)
81102214:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
81102218:	e0bffc17 	ldw	r2,-16(fp)
8110221c:	10000626 	beq	r2,zero,81102238 <TEMP_Read+0xe0>
           *pFpgaTemp = FpgaTemp;
81102220:	e0bffe17 	ldw	r2,-8(fp)
81102224:	e0fffd03 	ldbu	r3,-12(fp)
81102228:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
8110222c:	e0bfff17 	ldw	r2,-4(fp)
81102230:	e0fffd43 	ldbu	r3,-11(fp)
81102234:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
81102238:	e0bffc17 	ldw	r2,-16(fp)
 }
8110223c:	e037883a 	mov	sp,fp
81102240:	dfc00117 	ldw	ra,4(sp)
81102244:	df000017 	ldw	fp,0(sp)
81102248:	dec00204 	addi	sp,sp,8
8110224c:	f800283a 	ret

81102250 <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
81102250:	defffb04 	addi	sp,sp,-20
81102254:	de00012e 	bgeu	sp,et,8110225c <sense_log_temp+0xc>
81102258:	003b68fa 	trap	3
8110225c:	dfc00415 	stw	ra,16(sp)
81102260:	df000315 	stw	fp,12(sp)
81102264:	df000304 	addi	fp,sp,12
81102268:	e13ffe15 	stw	r4,-8(fp)
8110226c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
81102270:	e17fff17 	ldw	r5,-4(fp)
81102274:	e13ffe17 	ldw	r4,-8(fp)
81102278:	11021580 	call	81102158 <TEMP_Read>
8110227c:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
81102280:	e0bffd17 	ldw	r2,-12(fp)
 }
81102284:	e037883a 	mov	sp,fp
81102288:	dfc00117 	ldw	ra,4(sp)
8110228c:	df000017 	ldw	fp,0(sp)
81102290:	dec00204 	addi	sp,sp,8
81102294:	f800283a 	ret

81102298 <sense_log>:


 void sense_log(void){
81102298:	deff0504 	addi	sp,sp,-1004
8110229c:	de00012e 	bgeu	sp,et,811022a4 <sense_log+0xc>
811022a0:	003b68fa 	trap	3
811022a4:	dfc0fa15 	stw	ra,1000(sp)
811022a8:	df00f915 	stw	fp,996(sp)
811022ac:	dd40f815 	stw	r21,992(sp)
811022b0:	dd00f715 	stw	r20,988(sp)
811022b4:	dcc0f615 	stw	r19,984(sp)
811022b8:	dc80f515 	stw	r18,980(sp)
811022bc:	dc40f415 	stw	r17,976(sp)
811022c0:	dc00f315 	stw	r16,972(sp)
811022c4:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
811022c8:	00902834 	movhi	r2,16544
811022cc:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
811022d0:	008ed174 	movhi	r2,15173
811022d4:	10a6e984 	addi	r2,r2,-25690
811022d8:	e0bf2215 	stw	r2,-888(fp)
811022dc:	008ea0f4 	movhi	r2,14979
811022e0:	10849bc4 	addi	r2,r2,4719
811022e4:	e0bf2315 	stw	r2,-884(fp)
811022e8:	008ed174 	movhi	r2,15173
811022ec:	10a6e984 	addi	r2,r2,-25690
811022f0:	e0bf2415 	stw	r2,-880(fp)
811022f4:	008ed174 	movhi	r2,15173
811022f8:	10a6e984 	addi	r2,r2,-25690
811022fc:	e0bf2515 	stw	r2,-876(fp)
81102300:	008ed174 	movhi	r2,15173
81102304:	10a6e984 	addi	r2,r2,-25690
81102308:	e0bf2615 	stw	r2,-872(fp)
8110230c:	008ed174 	movhi	r2,15173
81102310:	10a6e984 	addi	r2,r2,-25690
81102314:	e0bf2715 	stw	r2,-868(fp)
81102318:	008ed174 	movhi	r2,15173
8110231c:	10a6e984 	addi	r2,r2,-25690
81102320:	e0bf2815 	stw	r2,-864(fp)
81102324:	008ed174 	movhi	r2,15173
81102328:	10a6e984 	addi	r2,r2,-25690
8110232c:	e0bf2915 	stw	r2,-860(fp)
81102330:	008ed174 	movhi	r2,15173
81102334:	10a6e984 	addi	r2,r2,-25690
81102338:	e0bf2a15 	stw	r2,-856(fp)
8110233c:	008ed174 	movhi	r2,15173
81102340:	10a6e984 	addi	r2,r2,-25690
81102344:	e0bf2b15 	stw	r2,-852(fp)
81102348:	008ed174 	movhi	r2,15173
8110234c:	10a6e984 	addi	r2,r2,-25690
81102350:	e0bf2c15 	stw	r2,-848(fp)
81102354:	008ed174 	movhi	r2,15173
81102358:	10a6e984 	addi	r2,r2,-25690
8110235c:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
81102360:	008fd9b4 	movhi	r2,16230
81102364:	10999984 	addi	r2,r2,26214
81102368:	e0bf2e15 	stw	r2,-840(fp)
8110236c:	008fd9b4 	movhi	r2,16230
81102370:	10999984 	addi	r2,r2,26214
81102374:	e0bf2f15 	stw	r2,-836(fp)
81102378:	00901034 	movhi	r2,16448
8110237c:	e0bf3015 	stw	r2,-832(fp)
81102380:	008fd9b4 	movhi	r2,16230
81102384:	10999984 	addi	r2,r2,26214
81102388:	e0bf3115 	stw	r2,-828(fp)
8110238c:	008ff9b4 	movhi	r2,16358
81102390:	10999984 	addi	r2,r2,26214
81102394:	e0bf3215 	stw	r2,-824(fp)
81102398:	00900834 	movhi	r2,16416
8110239c:	e0bf3315 	stw	r2,-820(fp)
811023a0:	008ff9b4 	movhi	r2,16358
811023a4:	10999984 	addi	r2,r2,26214
811023a8:	e0bf3415 	stw	r2,-816(fp)
811023ac:	00900834 	movhi	r2,16416
811023b0:	e0bf3515 	stw	r2,-812(fp)
811023b4:	008fe374 	movhi	r2,16269
811023b8:	10b33344 	addi	r2,r2,-13107
811023bc:	e0bf3615 	stw	r2,-808(fp)
811023c0:	008fecf4 	movhi	r2,16307
811023c4:	108cccc4 	addi	r2,r2,13107
811023c8:	e0bf3715 	stw	r2,-804(fp)
811023cc:	009014f4 	movhi	r2,16467
811023d0:	108cccc4 	addi	r2,r2,13107
811023d4:	e0bf3815 	stw	r2,-800(fp)
811023d8:	00900834 	movhi	r2,16416
811023dc:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
811023e0:	00a04534 	movhi	r2,33044
811023e4:	10a405c4 	addi	r2,r2,-28649
811023e8:	e0ff3a04 	addi	r3,fp,-792
811023ec:	1009883a 	mov	r4,r2
811023f0:	0080c004 	movi	r2,768
811023f4:	100d883a 	mov	r6,r2
811023f8:	200b883a 	mov	r5,r4
811023fc:	1809883a 	mov	r4,r3
81102400:	110e8e00 	call	8110e8e0 <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
81102404:	e0bf1604 	addi	r2,fp,-936
81102408:	1009883a 	mov	r4,r2
8110240c:	1101f140 	call	81101f14 <POWER_Read>
81102410:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
81102414:	e0bf0f17 	ldw	r2,-964(fp)
81102418:	10013b26 	beq	r2,zero,81102908 <sense_log+0x670>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
8110241c:	e03f0c15 	stw	zero,-976(fp)
81102420:	00013006 	br	811028e4 <sense_log+0x64c>
 	                SIG = (szVol[i] >> 29) & 0x01;
81102424:	e0bf0c17 	ldw	r2,-976(fp)
81102428:	1085883a 	add	r2,r2,r2
8110242c:	1085883a 	add	r2,r2,r2
81102430:	e0ff0c04 	addi	r3,fp,-976
81102434:	1885883a 	add	r2,r3,r2
81102438:	10800a04 	addi	r2,r2,40
8110243c:	10800017 	ldw	r2,0(r2)
81102440:	1004d77a 	srli	r2,r2,29
81102444:	1080004c 	andi	r2,r2,1
81102448:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
8110244c:	e0bf0c17 	ldw	r2,-976(fp)
81102450:	1085883a 	add	r2,r2,r2
81102454:	1085883a 	add	r2,r2,r2
81102458:	e0ff0c04 	addi	r3,fp,-976
8110245c:	1885883a 	add	r2,r3,r2
81102460:	10800a04 	addi	r2,r2,40
81102464:	10800017 	ldw	r2,0(r2)
81102468:	1004d73a 	srli	r2,r2,28
8110246c:	1080004c 	andi	r2,r2,1
81102470:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
81102474:	e0bf0c17 	ldw	r2,-976(fp)
81102478:	1085883a 	add	r2,r2,r2
8110247c:	1085883a 	add	r2,r2,r2
81102480:	e0ff0c04 	addi	r3,fp,-976
81102484:	1885883a 	add	r2,r3,r2
81102488:	10800a04 	addi	r2,r2,40
8110248c:	10800017 	ldw	r2,0(r2)
81102490:	1006d1ba 	srli	r3,r2,6
81102494:	00801034 	movhi	r2,64
81102498:	10bfffc4 	addi	r2,r2,-1
8110249c:	1884703a 	and	r2,r3,r2
811024a0:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
811024a4:	e0bf1117 	ldw	r2,-956(fp)
811024a8:	1000091e 	bne	r2,zero,811024d0 <sense_log+0x238>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
811024ac:	e13f1217 	ldw	r4,-952(fp)
811024b0:	110cc480 	call	8110cc48 <__floatunsisf>
811024b4:	1007883a 	mov	r3,r2
811024b8:	0152a034 	movhi	r5,19072
811024bc:	1809883a 	mov	r4,r3
811024c0:	110c2d00 	call	8110c2d0 <__divsf3>
811024c4:	1007883a 	mov	r3,r2
811024c8:	e0ff0d15 	stw	r3,-972(fp)
811024cc:	00000106 	br	811024d4 <sense_log+0x23c>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
811024d0:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
811024d4:	e0bf1017 	ldw	r2,-960(fp)
811024d8:	10001f26 	beq	r2,zero,81102558 <sense_log+0x2c0>
811024dc:	e0bf1117 	ldw	r2,-956(fp)
811024e0:	10001d26 	beq	r2,zero,81102558 <sense_log+0x2c0>
 	                    fVol = fRef*0.5;
811024e4:	014fc034 	movhi	r5,16128
811024e8:	e13f0e17 	ldw	r4,-968(fp)
811024ec:	110c7180 	call	8110c718 <__mulsf3>
811024f0:	1007883a 	mov	r3,r2
811024f4:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
811024f8:	e0ff3a04 	addi	r3,fp,-792
811024fc:	e0bf0c17 	ldw	r2,-976(fp)
81102500:	100491ba 	slli	r2,r2,6
81102504:	18a1883a 	add	r16,r3,r2
81102508:	e0bf0c17 	ldw	r2,-976(fp)
8110250c:	1085883a 	add	r2,r2,r2
81102510:	1085883a 	add	r2,r2,r2
81102514:	e0ff0c04 	addi	r3,fp,-976
81102518:	1885883a 	add	r2,r3,r2
8110251c:	10800a04 	addi	r2,r2,40
81102520:	10800017 	ldw	r2,0(r2)
81102524:	1023883a 	mov	r17,r2
81102528:	e13f1317 	ldw	r4,-948(fp)
8110252c:	110d4600 	call	8110d460 <__extendsfdf2>
81102530:	1009883a 	mov	r4,r2
81102534:	180b883a 	mov	r5,r3
81102538:	d9400015 	stw	r5,0(sp)
8110253c:	200f883a 	mov	r7,r4
81102540:	880d883a 	mov	r6,r17
81102544:	800b883a 	mov	r5,r16
81102548:	01204534 	movhi	r4,33044
8110254c:	2123d104 	addi	r4,r4,-28860
81102550:	110ebf80 	call	8110ebf8 <printf>
81102554:	0000e006 	br	811028d8 <sense_log+0x640>
 	                }else if (SIG && !MSB){
81102558:	e0bf1017 	ldw	r2,-960(fp)
8110255c:	10005d26 	beq	r2,zero,811026d4 <sense_log+0x43c>
81102560:	e0bf1117 	ldw	r2,-956(fp)
81102564:	10005b1e 	bne	r2,zero,811026d4 <sense_log+0x43c>
 	                    fVol = fRef*0.5*fVolDrop;
81102568:	e13f0e17 	ldw	r4,-968(fp)
8110256c:	110d4600 	call	8110d460 <__extendsfdf2>
81102570:	1011883a 	mov	r8,r2
81102574:	1813883a 	mov	r9,r3
81102578:	000d883a 	mov	r6,zero
8110257c:	01cff834 	movhi	r7,16352
81102580:	4009883a 	mov	r4,r8
81102584:	480b883a 	mov	r5,r9
81102588:	110cd400 	call	8110cd40 <__muldf3>
8110258c:	1009883a 	mov	r4,r2
81102590:	180b883a 	mov	r5,r3
81102594:	2021883a 	mov	r16,r4
81102598:	2823883a 	mov	r17,r5
8110259c:	e13f0d17 	ldw	r4,-972(fp)
811025a0:	110d4600 	call	8110d460 <__extendsfdf2>
811025a4:	1009883a 	mov	r4,r2
811025a8:	180b883a 	mov	r5,r3
811025ac:	200d883a 	mov	r6,r4
811025b0:	280f883a 	mov	r7,r5
811025b4:	8009883a 	mov	r4,r16
811025b8:	880b883a 	mov	r5,r17
811025bc:	110cd400 	call	8110cd40 <__muldf3>
811025c0:	1009883a 	mov	r4,r2
811025c4:	180b883a 	mov	r5,r3
811025c8:	2005883a 	mov	r2,r4
811025cc:	2807883a 	mov	r3,r5
811025d0:	1009883a 	mov	r4,r2
811025d4:	180b883a 	mov	r5,r3
811025d8:	110d5780 	call	8110d578 <__truncdfsf2>
811025dc:	1007883a 	mov	r3,r2
811025e0:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
811025e4:	e0bf0c17 	ldw	r2,-976(fp)
811025e8:	1085883a 	add	r2,r2,r2
811025ec:	1085883a 	add	r2,r2,r2
811025f0:	e0ff0c04 	addi	r3,fp,-976
811025f4:	1885883a 	add	r2,r3,r2
811025f8:	10801604 	addi	r2,r2,88
811025fc:	10c00017 	ldw	r3,0(r2)
81102600:	180b883a 	mov	r5,r3
81102604:	e13f0d17 	ldw	r4,-972(fp)
81102608:	110c2d00 	call	8110c2d0 <__divsf3>
8110260c:	1007883a 	mov	r3,r2
81102610:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81102614:	e0bf0c17 	ldw	r2,-976(fp)
81102618:	1085883a 	add	r2,r2,r2
8110261c:	1085883a 	add	r2,r2,r2
81102620:	e0ff0c04 	addi	r3,fp,-976
81102624:	1885883a 	add	r2,r3,r2
81102628:	10802204 	addi	r2,r2,136
8110262c:	10c00017 	ldw	r3,0(r2)
81102630:	e17f1417 	ldw	r5,-944(fp)
81102634:	1809883a 	mov	r4,r3
81102638:	110c7180 	call	8110c718 <__mulsf3>
8110263c:	1007883a 	mov	r3,r2
81102640:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81102644:	e0ff3a04 	addi	r3,fp,-792
81102648:	e0bf0c17 	ldw	r2,-976(fp)
8110264c:	100491ba 	slli	r2,r2,6
81102650:	18a9883a 	add	r20,r3,r2
81102654:	e0bf0c17 	ldw	r2,-976(fp)
81102658:	1085883a 	add	r2,r2,r2
8110265c:	1085883a 	add	r2,r2,r2
81102660:	e0ff0c04 	addi	r3,fp,-976
81102664:	1885883a 	add	r2,r3,r2
81102668:	10800a04 	addi	r2,r2,40
8110266c:	10800017 	ldw	r2,0(r2)
81102670:	102b883a 	mov	r21,r2
81102674:	e13f0d17 	ldw	r4,-972(fp)
81102678:	110d4600 	call	8110d460 <__extendsfdf2>
8110267c:	1025883a 	mov	r18,r2
81102680:	1827883a 	mov	r19,r3
81102684:	e13f1417 	ldw	r4,-944(fp)
81102688:	110d4600 	call	8110d460 <__extendsfdf2>
8110268c:	1021883a 	mov	r16,r2
81102690:	1823883a 	mov	r17,r3
81102694:	e13f1517 	ldw	r4,-940(fp)
81102698:	110d4600 	call	8110d460 <__extendsfdf2>
8110269c:	1009883a 	mov	r4,r2
811026a0:	180b883a 	mov	r5,r3
811026a4:	d9000315 	stw	r4,12(sp)
811026a8:	d9400415 	stw	r5,16(sp)
811026ac:	dc000115 	stw	r16,4(sp)
811026b0:	dc400215 	stw	r17,8(sp)
811026b4:	dcc00015 	stw	r19,0(sp)
811026b8:	900f883a 	mov	r7,r18
811026bc:	a80d883a 	mov	r6,r21
811026c0:	a00b883a 	mov	r5,r20
811026c4:	01204534 	movhi	r4,33044
811026c8:	2123da04 	addi	r4,r4,-28824
811026cc:	110ebf80 	call	8110ebf8 <printf>
811026d0:	00008106 	br	811028d8 <sense_log+0x640>
 	                }else if (!SIG && MSB){
811026d4:	e0bf1017 	ldw	r2,-960(fp)
811026d8:	10005d1e 	bne	r2,zero,81102850 <sense_log+0x5b8>
811026dc:	e0bf1117 	ldw	r2,-956(fp)
811026e0:	10005b26 	beq	r2,zero,81102850 <sense_log+0x5b8>
 	                    fVol = fRef*0.5*fVolDrop;
811026e4:	e13f0e17 	ldw	r4,-968(fp)
811026e8:	110d4600 	call	8110d460 <__extendsfdf2>
811026ec:	1011883a 	mov	r8,r2
811026f0:	1813883a 	mov	r9,r3
811026f4:	000d883a 	mov	r6,zero
811026f8:	01cff834 	movhi	r7,16352
811026fc:	4009883a 	mov	r4,r8
81102700:	480b883a 	mov	r5,r9
81102704:	110cd400 	call	8110cd40 <__muldf3>
81102708:	1009883a 	mov	r4,r2
8110270c:	180b883a 	mov	r5,r3
81102710:	2021883a 	mov	r16,r4
81102714:	2823883a 	mov	r17,r5
81102718:	e13f0d17 	ldw	r4,-972(fp)
8110271c:	110d4600 	call	8110d460 <__extendsfdf2>
81102720:	1009883a 	mov	r4,r2
81102724:	180b883a 	mov	r5,r3
81102728:	200d883a 	mov	r6,r4
8110272c:	280f883a 	mov	r7,r5
81102730:	8009883a 	mov	r4,r16
81102734:	880b883a 	mov	r5,r17
81102738:	110cd400 	call	8110cd40 <__muldf3>
8110273c:	1009883a 	mov	r4,r2
81102740:	180b883a 	mov	r5,r3
81102744:	2005883a 	mov	r2,r4
81102748:	2807883a 	mov	r3,r5
8110274c:	1009883a 	mov	r4,r2
81102750:	180b883a 	mov	r5,r3
81102754:	110d5780 	call	8110d578 <__truncdfsf2>
81102758:	1007883a 	mov	r3,r2
8110275c:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81102760:	e0bf0c17 	ldw	r2,-976(fp)
81102764:	1085883a 	add	r2,r2,r2
81102768:	1085883a 	add	r2,r2,r2
8110276c:	e0ff0c04 	addi	r3,fp,-976
81102770:	1885883a 	add	r2,r3,r2
81102774:	10801604 	addi	r2,r2,88
81102778:	10c00017 	ldw	r3,0(r2)
8110277c:	180b883a 	mov	r5,r3
81102780:	e13f0d17 	ldw	r4,-972(fp)
81102784:	110c2d00 	call	8110c2d0 <__divsf3>
81102788:	1007883a 	mov	r3,r2
8110278c:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81102790:	e0bf0c17 	ldw	r2,-976(fp)
81102794:	1085883a 	add	r2,r2,r2
81102798:	1085883a 	add	r2,r2,r2
8110279c:	e0ff0c04 	addi	r3,fp,-976
811027a0:	1885883a 	add	r2,r3,r2
811027a4:	10802204 	addi	r2,r2,136
811027a8:	10c00017 	ldw	r3,0(r2)
811027ac:	e17f1417 	ldw	r5,-944(fp)
811027b0:	1809883a 	mov	r4,r3
811027b4:	110c7180 	call	8110c718 <__mulsf3>
811027b8:	1007883a 	mov	r3,r2
811027bc:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
811027c0:	e0ff3a04 	addi	r3,fp,-792
811027c4:	e0bf0c17 	ldw	r2,-976(fp)
811027c8:	100491ba 	slli	r2,r2,6
811027cc:	18a9883a 	add	r20,r3,r2
811027d0:	e0bf0c17 	ldw	r2,-976(fp)
811027d4:	1085883a 	add	r2,r2,r2
811027d8:	1085883a 	add	r2,r2,r2
811027dc:	e0ff0c04 	addi	r3,fp,-976
811027e0:	1885883a 	add	r2,r3,r2
811027e4:	10800a04 	addi	r2,r2,40
811027e8:	10800017 	ldw	r2,0(r2)
811027ec:	102b883a 	mov	r21,r2
811027f0:	e13f0d17 	ldw	r4,-972(fp)
811027f4:	110d4600 	call	8110d460 <__extendsfdf2>
811027f8:	1025883a 	mov	r18,r2
811027fc:	1827883a 	mov	r19,r3
81102800:	e13f1417 	ldw	r4,-944(fp)
81102804:	110d4600 	call	8110d460 <__extendsfdf2>
81102808:	1021883a 	mov	r16,r2
8110280c:	1823883a 	mov	r17,r3
81102810:	e13f1517 	ldw	r4,-940(fp)
81102814:	110d4600 	call	8110d460 <__extendsfdf2>
81102818:	1009883a 	mov	r4,r2
8110281c:	180b883a 	mov	r5,r3
81102820:	d9000315 	stw	r4,12(sp)
81102824:	d9400415 	stw	r5,16(sp)
81102828:	dc000115 	stw	r16,4(sp)
8110282c:	dc400215 	stw	r17,8(sp)
81102830:	dcc00015 	stw	r19,0(sp)
81102834:	900f883a 	mov	r7,r18
81102838:	a80d883a 	mov	r6,r21
8110283c:	a00b883a 	mov	r5,r20
81102840:	01204534 	movhi	r4,33044
81102844:	2123ea04 	addi	r4,r4,-28760
81102848:	110ebf80 	call	8110ebf8 <printf>
8110284c:	00002206 	br	811028d8 <sense_log+0x640>
 	                }else if (!SIG && !MSB){
81102850:	e0bf1017 	ldw	r2,-960(fp)
81102854:	1000201e 	bne	r2,zero,811028d8 <sense_log+0x640>
81102858:	e0bf1117 	ldw	r2,-956(fp)
8110285c:	10001e1e 	bne	r2,zero,811028d8 <sense_log+0x640>
 	                    fVol = -fRef*0.5;
81102860:	e0bf0e17 	ldw	r2,-968(fp)
81102864:	10a0003c 	xorhi	r2,r2,32768
81102868:	014fc034 	movhi	r5,16128
8110286c:	1009883a 	mov	r4,r2
81102870:	110c7180 	call	8110c718 <__mulsf3>
81102874:	1007883a 	mov	r3,r2
81102878:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
8110287c:	e0ff3a04 	addi	r3,fp,-792
81102880:	e0bf0c17 	ldw	r2,-976(fp)
81102884:	100491ba 	slli	r2,r2,6
81102888:	18a1883a 	add	r16,r3,r2
8110288c:	e0bf0c17 	ldw	r2,-976(fp)
81102890:	1085883a 	add	r2,r2,r2
81102894:	1085883a 	add	r2,r2,r2
81102898:	e0ff0c04 	addi	r3,fp,-976
8110289c:	1885883a 	add	r2,r3,r2
811028a0:	10800a04 	addi	r2,r2,40
811028a4:	10800017 	ldw	r2,0(r2)
811028a8:	1023883a 	mov	r17,r2
811028ac:	e13f1317 	ldw	r4,-948(fp)
811028b0:	110d4600 	call	8110d460 <__extendsfdf2>
811028b4:	1009883a 	mov	r4,r2
811028b8:	180b883a 	mov	r5,r3
811028bc:	d9400015 	stw	r5,0(sp)
811028c0:	200f883a 	mov	r7,r4
811028c4:	880d883a 	mov	r6,r17
811028c8:	800b883a 	mov	r5,r16
811028cc:	01204534 	movhi	r4,33044
811028d0:	2123fa04 	addi	r4,r4,-28696
811028d4:	110ebf80 	call	8110ebf8 <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
811028d8:	e0bf0c17 	ldw	r2,-976(fp)
811028dc:	10800044 	addi	r2,r2,1
811028e0:	e0bf0c15 	stw	r2,-976(fp)
811028e4:	e0bf0c17 	ldw	r2,-976(fp)
811028e8:	10800308 	cmpgei	r2,r2,12
811028ec:	1000021e 	bne	r2,zero,811028f8 <sense_log+0x660>
811028f0:	e0bf0f17 	ldw	r2,-964(fp)
811028f4:	103ecb1e 	bne	r2,zero,81102424 <__reset+0xfb0e2424>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
811028f8:	01204534 	movhi	r4,33044
811028fc:	21240304 	addi	r4,r4,-28660
81102900:	110ed240 	call	8110ed24 <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
81102904:	00000306 	br	81102914 <sense_log+0x67c>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
81102908:	01204534 	movhi	r4,33044
8110290c:	21240404 	addi	r4,r4,-28656
81102910:	110ed240 	call	8110ed24 <puts>
 	        }
 }
81102914:	0001883a 	nop
81102918:	e6fffa04 	addi	sp,fp,-24
8110291c:	dfc00717 	ldw	ra,28(sp)
81102920:	df000617 	ldw	fp,24(sp)
81102924:	dd400517 	ldw	r21,20(sp)
81102928:	dd000417 	ldw	r20,16(sp)
8110292c:	dcc00317 	ldw	r19,12(sp)
81102930:	dc800217 	ldw	r18,8(sp)
81102934:	dc400117 	ldw	r17,4(sp)
81102938:	dc000017 	ldw	r16,0(sp)
8110293c:	dec00804 	addi	sp,sp,32
81102940:	f800283a 	ret

81102944 <SPWC_WRITE_REG32>:
	alt_u32 ul_spwc_g_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_g_spacewire_link_control_status_register_value = 0x00000400;
	alt_u32 ul_spwc_h_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_h_spacewire_link_control_status_register_value = 0x00000400;

	void SPWC_WRITE_REG32(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102944:	defffb04 	addi	sp,sp,-20
81102948:	de00012e 	bgeu	sp,et,81102950 <SPWC_WRITE_REG32+0xc>
8110294c:	003b68fa 	trap	3
81102950:	df000415 	stw	fp,16(sp)
81102954:	df000404 	addi	fp,sp,16
81102958:	2007883a 	mov	r3,r4
8110295c:	2805883a 	mov	r2,r5
81102960:	e1bfff15 	stw	r6,-4(fp)
81102964:	e0fffd05 	stb	r3,-12(fp)
81102968:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
8110296c:	00a04834 	movhi	r2,33056
81102970:	108e0004 	addi	r2,r2,14336
81102974:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81102978:	e0bffd07 	ldb	r2,-12(fp)
8110297c:	10bfefc4 	addi	r2,r2,-65
81102980:	10c00228 	cmpgeui	r3,r2,8
81102984:	18002e1e 	bne	r3,zero,81102a40 <SPWC_WRITE_REG32+0xfc>
81102988:	100690ba 	slli	r3,r2,2
8110298c:	00a04434 	movhi	r2,33040
81102990:	108a6804 	addi	r2,r2,10656
81102994:	1885883a 	add	r2,r3,r2
81102998:	10800017 	ldw	r2,0(r2)
8110299c:	1000683a 	jmp	r2
811029a0:	811029c0 	call	8811029c <__reset+0x20f029c>
811029a4:	811029d0 	cmplti	r4,r16,16551
811029a8:	811029e0 	cmpeqi	r4,r16,16551
811029ac:	811029f0 	cmpltui	r4,r16,16551
811029b0:	81102a00 	call	881102a0 <__reset+0x20f02a0>
811029b4:	81102a10 	cmplti	r4,r16,16552
811029b8:	81102a20 	cmpeqi	r4,r16,16552
811029bc:	81102a30 	cmpltui	r4,r16,16552
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811029c0:	00a04834 	movhi	r2,33056
811029c4:	108e0004 	addi	r2,r2,14336
811029c8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029cc:	00001c06 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
811029d0:	00a04834 	movhi	r2,33056
811029d4:	108d0004 	addi	r2,r2,13312
811029d8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029dc:	00001806 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
811029e0:	00a04834 	movhi	r2,33056
811029e4:	108c0004 	addi	r2,r2,12288
811029e8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029ec:	00001406 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
811029f0:	00a04834 	movhi	r2,33056
811029f4:	108b0004 	addi	r2,r2,11264
811029f8:	e0bffc15 	stw	r2,-16(fp)
			break;
811029fc:	00001006 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102a00:	00a04834 	movhi	r2,33056
81102a04:	108a0004 	addi	r2,r2,10240
81102a08:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a0c:	00000c06 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102a10:	00a04834 	movhi	r2,33056
81102a14:	10890004 	addi	r2,r2,9216
81102a18:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a1c:	00000806 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102a20:	00a04834 	movhi	r2,33056
81102a24:	10880004 	addi	r2,r2,8192
81102a28:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a2c:	00000406 	br	81102a40 <SPWC_WRITE_REG32+0xfc>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102a30:	00a04834 	movhi	r2,33056
81102a34:	10870004 	addi	r2,r2,7168
81102a38:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a3c:	0001883a 	nop
		}
		*(pSpwcAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81102a40:	e0bffe03 	ldbu	r2,-8(fp)
81102a44:	1085883a 	add	r2,r2,r2
81102a48:	1085883a 	add	r2,r2,r2
81102a4c:	1007883a 	mov	r3,r2
81102a50:	e0bffc17 	ldw	r2,-16(fp)
81102a54:	10c5883a 	add	r2,r2,r3
81102a58:	e0ffff17 	ldw	r3,-4(fp)
81102a5c:	10c00015 	stw	r3,0(r2)
	}
81102a60:	0001883a 	nop
81102a64:	e037883a 	mov	sp,fp
81102a68:	df000017 	ldw	fp,0(sp)
81102a6c:	dec00104 	addi	sp,sp,4
81102a70:	f800283a 	ret

81102a74 <SPWC_READ_REG32>:

	alt_u32 SPWC_READ_REG32(char c_SpwID, alt_u8 uc_RegisterAddress){
81102a74:	defffb04 	addi	sp,sp,-20
81102a78:	de00012e 	bgeu	sp,et,81102a80 <SPWC_READ_REG32+0xc>
81102a7c:	003b68fa 	trap	3
81102a80:	df000415 	stw	fp,16(sp)
81102a84:	df000404 	addi	fp,sp,16
81102a88:	2007883a 	mov	r3,r4
81102a8c:	2805883a 	mov	r2,r5
81102a90:	e0fffe05 	stb	r3,-8(fp)
81102a94:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81102a98:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81102a9c:	00a04834 	movhi	r2,33056
81102aa0:	108e0004 	addi	r2,r2,14336
81102aa4:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81102aa8:	e0bffe07 	ldb	r2,-8(fp)
81102aac:	10bfefc4 	addi	r2,r2,-65
81102ab0:	10c00228 	cmpgeui	r3,r2,8
81102ab4:	18002e1e 	bne	r3,zero,81102b70 <SPWC_READ_REG32+0xfc>
81102ab8:	100690ba 	slli	r3,r2,2
81102abc:	00a04434 	movhi	r2,33040
81102ac0:	108ab404 	addi	r2,r2,10960
81102ac4:	1885883a 	add	r2,r3,r2
81102ac8:	10800017 	ldw	r2,0(r2)
81102acc:	1000683a 	jmp	r2
81102ad0:	81102af0 	cmpltui	r4,r16,16555
81102ad4:	81102b00 	call	881102b0 <__reset+0x20f02b0>
81102ad8:	81102b10 	cmplti	r4,r16,16556
81102adc:	81102b20 	cmpeqi	r4,r16,16556
81102ae0:	81102b30 	cmpltui	r4,r16,16556
81102ae4:	81102b40 	call	881102b4 <__reset+0x20f02b4>
81102ae8:	81102b50 	cmplti	r4,r16,16557
81102aec:	81102b60 	cmpeqi	r4,r16,16557
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81102af0:	00a04834 	movhi	r2,33056
81102af4:	108e0004 	addi	r2,r2,14336
81102af8:	e0bffc15 	stw	r2,-16(fp)
			break;
81102afc:	00001c06 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81102b00:	00a04834 	movhi	r2,33056
81102b04:	108d0004 	addi	r2,r2,13312
81102b08:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b0c:	00001806 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81102b10:	00a04834 	movhi	r2,33056
81102b14:	108c0004 	addi	r2,r2,12288
81102b18:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b1c:	00001406 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81102b20:	00a04834 	movhi	r2,33056
81102b24:	108b0004 	addi	r2,r2,11264
81102b28:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b2c:	00001006 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102b30:	00a04834 	movhi	r2,33056
81102b34:	108a0004 	addi	r2,r2,10240
81102b38:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b3c:	00000c06 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102b40:	00a04834 	movhi	r2,33056
81102b44:	10890004 	addi	r2,r2,9216
81102b48:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b4c:	00000806 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102b50:	00a04834 	movhi	r2,33056
81102b54:	10880004 	addi	r2,r2,8192
81102b58:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b5c:	00000406 	br	81102b70 <SPWC_READ_REG32+0xfc>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102b60:	00a04834 	movhi	r2,33056
81102b64:	10870004 	addi	r2,r2,7168
81102b68:	e0bffc15 	stw	r2,-16(fp)
			break;
81102b6c:	0001883a 	nop
		}
		RegisterValue = *(pSpwcAddr + (alt_u32)uc_RegisterAddress);
81102b70:	e0bfff03 	ldbu	r2,-4(fp)
81102b74:	1085883a 	add	r2,r2,r2
81102b78:	1085883a 	add	r2,r2,r2
81102b7c:	1007883a 	mov	r3,r2
81102b80:	e0bffc17 	ldw	r2,-16(fp)
81102b84:	10c5883a 	add	r2,r2,r3
81102b88:	10800017 	ldw	r2,0(r2)
81102b8c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81102b90:	e0bffd17 	ldw	r2,-12(fp)
	}
81102b94:	e037883a 	mov	sp,fp
81102b98:	df000017 	ldw	fp,0(sp)
81102b9c:	dec00104 	addi	sp,sp,4
81102ba0:	f800283a 	ret

81102ba4 <b_SpaceWire_Interface_Write_Register>:

	bool b_SpaceWire_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102ba4:	defffa04 	addi	sp,sp,-24
81102ba8:	de00012e 	bgeu	sp,et,81102bb0 <b_SpaceWire_Interface_Write_Register+0xc>
81102bac:	003b68fa 	trap	3
81102bb0:	dfc00515 	stw	ra,20(sp)
81102bb4:	df000415 	stw	fp,16(sp)
81102bb8:	df000404 	addi	fp,sp,16
81102bbc:	2007883a 	mov	r3,r4
81102bc0:	2805883a 	mov	r2,r5
81102bc4:	e1bfff15 	stw	r6,-4(fp)
81102bc8:	e0fffd05 	stb	r3,-12(fp)
81102bcc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102bd0:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
81102bd4:	e0bffe03 	ldbu	r2,-8(fp)
81102bd8:	108000e8 	cmpgeui	r2,r2,3
81102bdc:	1000081e 	bne	r2,zero,81102c00 <b_SpaceWire_Interface_Write_Register+0x5c>
			SPWC_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81102be0:	e0bffd07 	ldb	r2,-12(fp)
81102be4:	e0fffe03 	ldbu	r3,-8(fp)
81102be8:	e1bfff17 	ldw	r6,-4(fp)
81102bec:	180b883a 	mov	r5,r3
81102bf0:	1009883a 	mov	r4,r2
81102bf4:	11029440 	call	81102944 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81102bf8:	00800044 	movi	r2,1
81102bfc:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81102c00:	e0bffc17 	ldw	r2,-16(fp)
	}
81102c04:	e037883a 	mov	sp,fp
81102c08:	dfc00117 	ldw	ra,4(sp)
81102c0c:	df000017 	ldw	fp,0(sp)
81102c10:	dec00204 	addi	sp,sp,8
81102c14:	f800283a 	ret

81102c18 <ul_SpaceWire_Interface_Read_Register>:

	alt_u32 ul_SpaceWire_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81102c18:	defffb04 	addi	sp,sp,-20
81102c1c:	de00012e 	bgeu	sp,et,81102c24 <ul_SpaceWire_Interface_Read_Register+0xc>
81102c20:	003b68fa 	trap	3
81102c24:	dfc00415 	stw	ra,16(sp)
81102c28:	df000315 	stw	fp,12(sp)
81102c2c:	df000304 	addi	fp,sp,12
81102c30:	2007883a 	mov	r3,r4
81102c34:	2805883a 	mov	r2,r5
81102c38:	e0fffe05 	stb	r3,-8(fp)
81102c3c:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81102c40:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81102c44:	e0bfff03 	ldbu	r2,-4(fp)
81102c48:	108000e8 	cmpgeui	r2,r2,3
81102c4c:	1000061e 	bne	r2,zero,81102c68 <ul_SpaceWire_Interface_Read_Register+0x50>
			ul_RegisterValue = SPWC_READ_REG32(c_SpwID, uc_RegisterAddress);
81102c50:	e0bffe07 	ldb	r2,-8(fp)
81102c54:	e0ffff03 	ldbu	r3,-4(fp)
81102c58:	180b883a 	mov	r5,r3
81102c5c:	1009883a 	mov	r4,r2
81102c60:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81102c64:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
81102c68:	e0bffd17 	ldw	r2,-12(fp)
	}
81102c6c:	e037883a 	mov	sp,fp
81102c70:	dfc00117 	ldw	ra,4(sp)
81102c74:	df000017 	ldw	fp,0(sp)
81102c78:	dec00204 	addi	sp,sp,8
81102c7c:	f800283a 	ret

81102c80 <b_SpaceWire_Interface_Enable_Control>:

	bool b_SpaceWire_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81102c80:	defff804 	addi	sp,sp,-32
81102c84:	de00012e 	bgeu	sp,et,81102c8c <b_SpaceWire_Interface_Enable_Control+0xc>
81102c88:	003b68fa 	trap	3
81102c8c:	dfc00715 	stw	ra,28(sp)
81102c90:	df000615 	stw	fp,24(sp)
81102c94:	df000604 	addi	fp,sp,24
81102c98:	2007883a 	mov	r3,r4
81102c9c:	2805883a 	mov	r2,r5
81102ca0:	e1bfff15 	stw	r6,-4(fp)
81102ca4:	e0fffd05 	stb	r3,-12(fp)
81102ca8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102cac:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK;
81102cb0:	0081c004 	movi	r2,1792
81102cb4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102cb8:	d0a04004 	addi	r2,gp,-32512
81102cbc:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81102cc0:	e0bffd07 	ldb	r2,-12(fp)
81102cc4:	10bfefc4 	addi	r2,r2,-65
81102cc8:	10c00228 	cmpgeui	r3,r2,8
81102ccc:	1800361e 	bne	r3,zero,81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
81102cd0:	100690ba 	slli	r3,r2,2
81102cd4:	00a04434 	movhi	r2,33040
81102cd8:	108b3a04 	addi	r2,r2,11496
81102cdc:	1885883a 	add	r2,r3,r2
81102ce0:	10800017 	ldw	r2,0(r2)
81102ce4:	1000683a 	jmp	r2
81102ce8:	81102d08 	cmpgei	r4,r16,16564
81102cec:	81102d1c 	xori	r4,r16,16564
81102cf0:	81102d30 	cmpltui	r4,r16,16564
81102cf4:	81102d44 	addi	r4,r16,16565
81102cf8:	81102d58 	cmpnei	r4,r16,16565
81102cfc:	81102d6c 	andhi	r4,r16,16565
81102d00:	81102d80 	call	881102d8 <__reset+0x20f02d8>
81102d04:	81102d94 	ori	r4,r16,16566
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102d08:	d0a04004 	addi	r2,gp,-32512
81102d0c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d10:	00800044 	movi	r2,1
81102d14:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d18:	00002306 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102d1c:	d0a04104 	addi	r2,gp,-32508
81102d20:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d24:	00800044 	movi	r2,1
81102d28:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d2c:	00001e06 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102d30:	d0a04204 	addi	r2,gp,-32504
81102d34:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d38:	00800044 	movi	r2,1
81102d3c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d40:	00001906 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102d44:	d0a04304 	addi	r2,gp,-32500
81102d48:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d4c:	00800044 	movi	r2,1
81102d50:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d54:	00001406 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102d58:	d0a04404 	addi	r2,gp,-32496
81102d5c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d60:	00800044 	movi	r2,1
81102d64:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d68:	00000f06 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102d6c:	d0a04504 	addi	r2,gp,-32492
81102d70:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d74:	00800044 	movi	r2,1
81102d78:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d7c:	00000a06 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102d80:	d0a04604 	addi	r2,gp,-32488
81102d84:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d88:	00800044 	movi	r2,1
81102d8c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102d90:	00000506 	br	81102da8 <b_SpaceWire_Interface_Enable_Control+0x128>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102d94:	d0a04704 	addi	r2,gp,-32484
81102d98:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102d9c:	00800044 	movi	r2,1
81102da0:	e0bffa15 	stw	r2,-24(fp)
			break;
81102da4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
81102da8:	e0bffa17 	ldw	r2,-24(fp)
81102dac:	10800058 	cmpnei	r2,r2,1
81102db0:	10002b1e 	bne	r2,zero,81102e60 <b_SpaceWire_Interface_Enable_Control+0x1e0>
81102db4:	e0ffff17 	ldw	r3,-4(fp)
81102db8:	e0bffc17 	ldw	r2,-16(fp)
81102dbc:	1884703a 	and	r2,r3,r2
81102dc0:	10002726 	beq	r2,zero,81102e60 <b_SpaceWire_Interface_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
81102dc4:	e0bffe03 	ldbu	r2,-8(fp)
81102dc8:	10000326 	beq	r2,zero,81102dd8 <b_SpaceWire_Interface_Enable_Control+0x158>
81102dcc:	10800060 	cmpeqi	r2,r2,1
81102dd0:	1000121e 	bne	r2,zero,81102e1c <b_SpaceWire_Interface_Enable_Control+0x19c>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81102dd4:	00002306 	br	81102e64 <b_SpaceWire_Interface_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_EnableMask;
81102dd8:	e0bffb17 	ldw	r2,-20(fp)
81102ddc:	10c00017 	ldw	r3,0(r2)
81102de0:	e0bfff17 	ldw	r2,-4(fp)
81102de4:	0084303a 	nor	r2,zero,r2
81102de8:	1886703a 	and	r3,r3,r2
81102dec:	e0bffb17 	ldw	r2,-20(fp)
81102df0:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102df4:	e0fffd07 	ldb	r3,-12(fp)
81102df8:	e0bffb17 	ldw	r2,-20(fp)
81102dfc:	10800017 	ldw	r2,0(r2)
81102e00:	100d883a 	mov	r6,r2
81102e04:	000b883a 	mov	r5,zero
81102e08:	1809883a 	mov	r4,r3
81102e0c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102e10:	00800044 	movi	r2,1
81102e14:	e0bffa15 	stw	r2,-24(fp)
				break;
81102e18:	00001006 	br	81102e5c <b_SpaceWire_Interface_Enable_Control+0x1dc>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_EnableMask;
81102e1c:	e0bffb17 	ldw	r2,-20(fp)
81102e20:	10c00017 	ldw	r3,0(r2)
81102e24:	e0bfff17 	ldw	r2,-4(fp)
81102e28:	1886b03a 	or	r3,r3,r2
81102e2c:	e0bffb17 	ldw	r2,-20(fp)
81102e30:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102e34:	e0fffd07 	ldb	r3,-12(fp)
81102e38:	e0bffb17 	ldw	r2,-20(fp)
81102e3c:	10800017 	ldw	r2,0(r2)
81102e40:	100d883a 	mov	r6,r2
81102e44:	000b883a 	mov	r5,zero
81102e48:	1809883a 	mov	r4,r3
81102e4c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102e50:	00800044 	movi	r2,1
81102e54:	e0bffa15 	stw	r2,-24(fp)
				break;
81102e58:	0001883a 	nop

			}
		} else {
81102e5c:	00000106 	br	81102e64 <b_SpaceWire_Interface_Enable_Control+0x1e4>
			bSuccess = FALSE;
81102e60:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81102e64:	e0bffa17 	ldw	r2,-24(fp)
	}
81102e68:	e037883a 	mov	sp,fp
81102e6c:	dfc00117 	ldw	ra,4(sp)
81102e70:	df000017 	ldw	fp,0(sp)
81102e74:	dec00204 	addi	sp,sp,8
81102e78:	f800283a 	ret

81102e7c <b_SpaceWire_Interface_Mode_Control>:

	bool b_SpaceWire_Interface_Mode_Control(char c_SpwID, alt_u8 uc_InterfaceMode){
81102e7c:	defffa04 	addi	sp,sp,-24
81102e80:	de00012e 	bgeu	sp,et,81102e88 <b_SpaceWire_Interface_Mode_Control+0xc>
81102e84:	003b68fa 	trap	3
81102e88:	dfc00515 	stw	ra,20(sp)
81102e8c:	df000415 	stw	fp,16(sp)
81102e90:	df000404 	addi	fp,sp,16
81102e94:	2007883a 	mov	r3,r4
81102e98:	2805883a 	mov	r2,r5
81102e9c:	e0fffe05 	stb	r3,-8(fp)
81102ea0:	e0bfff05 	stb	r2,-4(fp)
		bool bSuccess = FALSE;
81102ea4:	e03ffc15 	stw	zero,-16(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102ea8:	d0a04004 	addi	r2,gp,-32512
81102eac:	e0bffd15 	stw	r2,-12(fp)
		switch (c_SpwID) {
81102eb0:	e0bffe07 	ldb	r2,-8(fp)
81102eb4:	10bfefc4 	addi	r2,r2,-65
81102eb8:	10c00228 	cmpgeui	r3,r2,8
81102ebc:	1800361e 	bne	r3,zero,81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
81102ec0:	100690ba 	slli	r3,r2,2
81102ec4:	00a04434 	movhi	r2,33040
81102ec8:	108bb604 	addi	r2,r2,11992
81102ecc:	1885883a 	add	r2,r3,r2
81102ed0:	10800017 	ldw	r2,0(r2)
81102ed4:	1000683a 	jmp	r2
81102ed8:	81102ef8 	rdprs	r4,r16,16571
81102edc:	81102f0c 	andi	r4,r16,16572
81102ee0:	81102f20 	cmpeqi	r4,r16,16572
81102ee4:	81102f34 	orhi	r4,r16,16572
81102ee8:	81102f48 	cmpgei	r4,r16,16573
81102eec:	81102f5c 	xori	r4,r16,16573
81102ef0:	81102f70 	cmpltui	r4,r16,16573
81102ef4:	81102f84 	addi	r4,r16,16574
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102ef8:	d0a04004 	addi	r2,gp,-32512
81102efc:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f00:	00800044 	movi	r2,1
81102f04:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f08:	00002306 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102f0c:	d0a04104 	addi	r2,gp,-32508
81102f10:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f14:	00800044 	movi	r2,1
81102f18:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f1c:	00001e06 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102f20:	d0a04204 	addi	r2,gp,-32504
81102f24:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f28:	00800044 	movi	r2,1
81102f2c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f30:	00001906 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102f34:	d0a04304 	addi	r2,gp,-32500
81102f38:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f3c:	00800044 	movi	r2,1
81102f40:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f44:	00001406 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102f48:	d0a04404 	addi	r2,gp,-32496
81102f4c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f50:	00800044 	movi	r2,1
81102f54:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f58:	00000f06 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102f5c:	d0a04504 	addi	r2,gp,-32492
81102f60:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f64:	00800044 	movi	r2,1
81102f68:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f6c:	00000a06 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102f70:	d0a04604 	addi	r2,gp,-32488
81102f74:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f78:	00800044 	movi	r2,1
81102f7c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f80:	00000506 	br	81102f98 <b_SpaceWire_Interface_Mode_Control+0x11c>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102f84:	d0a04704 	addi	r2,gp,-32484
81102f88:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102f8c:	00800044 	movi	r2,1
81102f90:	e0bffc15 	stw	r2,-16(fp)
			break;
81102f94:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81102f98:	e0bffc17 	ldw	r2,-16(fp)
81102f9c:	10800058 	cmpnei	r2,r2,1
81102fa0:	10007b1e 	bne	r2,zero,81103190 <b_SpaceWire_Interface_Mode_Control+0x314>
			switch (uc_InterfaceMode){
81102fa4:	e0bfff03 	ldbu	r2,-4(fp)
81102fa8:	10c00060 	cmpeqi	r3,r2,1
81102fac:	1800241e 	bne	r3,zero,81103040 <b_SpaceWire_Interface_Mode_Control+0x1c4>
81102fb0:	10c00088 	cmpgei	r3,r2,2
81102fb4:	1800021e 	bne	r3,zero,81102fc0 <b_SpaceWire_Interface_Mode_Control+0x144>
81102fb8:	10000626 	beq	r2,zero,81102fd4 <b_SpaceWire_Interface_Mode_Control+0x158>
81102fbc:	00007206 	br	81103188 <b_SpaceWire_Interface_Mode_Control+0x30c>
81102fc0:	10c000a0 	cmpeqi	r3,r2,2
81102fc4:	1800391e 	bne	r3,zero,811030ac <b_SpaceWire_Interface_Mode_Control+0x230>
81102fc8:	108000e0 	cmpeqi	r2,r2,3
81102fcc:	1000521e 	bne	r2,zero,81103118 <b_SpaceWire_Interface_Mode_Control+0x29c>
81102fd0:	00006d06 	br	81103188 <b_SpaceWire_Interface_Mode_Control+0x30c>

				case SPWC_INTERFACE_BACKDOOR_MODE:
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK;
81102fd4:	e0bffd17 	ldw	r2,-12(fp)
81102fd8:	10800017 	ldw	r2,0(r2)
81102fdc:	10c40014 	ori	r3,r2,4096
81102fe0:	e0bffd17 	ldw	r2,-12(fp)
81102fe4:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102fe8:	e0bffd17 	ldw	r2,-12(fp)
81102fec:	10c00017 	ldw	r3,0(r2)
81102ff0:	00bdffc4 	movi	r2,-2049
81102ff4:	1886703a 	and	r3,r3,r2
81102ff8:	e0bffd17 	ldw	r2,-12(fp)
81102ffc:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103000:	e0bffd17 	ldw	r2,-12(fp)
81103004:	10c00017 	ldw	r3,0(r2)
81103008:	00bfdfc4 	movi	r2,-129
8110300c:	1886703a 	and	r3,r3,r2
81103010:	e0bffd17 	ldw	r2,-12(fp)
81103014:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103018:	e0fffe07 	ldb	r3,-8(fp)
8110301c:	e0bffd17 	ldw	r2,-12(fp)
81103020:	10800017 	ldw	r2,0(r2)
81103024:	100d883a 	mov	r6,r2
81103028:	000b883a 	mov	r5,zero
8110302c:	1809883a 	mov	r4,r3
81103030:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103034:	00800044 	movi	r2,1
81103038:	e0bffc15 	stw	r2,-16(fp)
				break;
8110303c:	00005506 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>

				case SPWC_INTERFACE_EXTERNAL_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103040:	e0bffd17 	ldw	r2,-12(fp)
81103044:	10c00017 	ldw	r3,0(r2)
81103048:	00bbffc4 	movi	r2,-4097
8110304c:	1886703a 	and	r3,r3,r2
81103050:	e0bffd17 	ldw	r2,-12(fp)
81103054:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK;
81103058:	e0bffd17 	ldw	r2,-12(fp)
8110305c:	10800017 	ldw	r2,0(r2)
81103060:	10c20014 	ori	r3,r2,2048
81103064:	e0bffd17 	ldw	r2,-12(fp)
81103068:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
8110306c:	e0bffd17 	ldw	r2,-12(fp)
81103070:	10c00017 	ldw	r3,0(r2)
81103074:	00bfdfc4 	movi	r2,-129
81103078:	1886703a 	and	r3,r3,r2
8110307c:	e0bffd17 	ldw	r2,-12(fp)
81103080:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103084:	e0fffe07 	ldb	r3,-8(fp)
81103088:	e0bffd17 	ldw	r2,-12(fp)
8110308c:	10800017 	ldw	r2,0(r2)
81103090:	100d883a 	mov	r6,r2
81103094:	000b883a 	mov	r5,zero
81103098:	1809883a 	mov	r4,r3
8110309c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
811030a0:	00800044 	movi	r2,1
811030a4:	e0bffc15 	stw	r2,-16(fp)
				break;
811030a8:	00003a06 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>

				case SPWC_INTERFACE_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
811030ac:	e0bffd17 	ldw	r2,-12(fp)
811030b0:	10c00017 	ldw	r3,0(r2)
811030b4:	00bbffc4 	movi	r2,-4097
811030b8:	1886703a 	and	r3,r3,r2
811030bc:	e0bffd17 	ldw	r2,-12(fp)
811030c0:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
811030c4:	e0bffd17 	ldw	r2,-12(fp)
811030c8:	10c00017 	ldw	r3,0(r2)
811030cc:	00bdffc4 	movi	r2,-2049
811030d0:	1886703a 	and	r3,r3,r2
811030d4:	e0bffd17 	ldw	r2,-12(fp)
811030d8:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK;
811030dc:	e0bffd17 	ldw	r2,-12(fp)
811030e0:	10800017 	ldw	r2,0(r2)
811030e4:	10c02014 	ori	r3,r2,128
811030e8:	e0bffd17 	ldw	r2,-12(fp)
811030ec:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
811030f0:	e0fffe07 	ldb	r3,-8(fp)
811030f4:	e0bffd17 	ldw	r2,-12(fp)
811030f8:	10800017 	ldw	r2,0(r2)
811030fc:	100d883a 	mov	r6,r2
81103100:	000b883a 	mov	r5,zero
81103104:	1809883a 	mov	r4,r3
81103108:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110310c:	00800044 	movi	r2,1
81103110:	e0bffc15 	stw	r2,-16(fp)
				break;
81103114:	00001f06 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>

				case SPWC_INTERFACE_NORMAL_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103118:	e0bffd17 	ldw	r2,-12(fp)
8110311c:	10c00017 	ldw	r3,0(r2)
81103120:	00bbffc4 	movi	r2,-4097
81103124:	1886703a 	and	r3,r3,r2
81103128:	e0bffd17 	ldw	r2,-12(fp)
8110312c:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103130:	e0bffd17 	ldw	r2,-12(fp)
81103134:	10c00017 	ldw	r3,0(r2)
81103138:	00bdffc4 	movi	r2,-2049
8110313c:	1886703a 	and	r3,r3,r2
81103140:	e0bffd17 	ldw	r2,-12(fp)
81103144:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103148:	e0bffd17 	ldw	r2,-12(fp)
8110314c:	10c00017 	ldw	r3,0(r2)
81103150:	00bfdfc4 	movi	r2,-129
81103154:	1886703a 	and	r3,r3,r2
81103158:	e0bffd17 	ldw	r2,-12(fp)
8110315c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103160:	e0fffe07 	ldb	r3,-8(fp)
81103164:	e0bffd17 	ldw	r2,-12(fp)
81103168:	10800017 	ldw	r2,0(r2)
8110316c:	100d883a 	mov	r6,r2
81103170:	000b883a 	mov	r5,zero
81103174:	1809883a 	mov	r4,r3
81103178:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110317c:	00800044 	movi	r2,1
81103180:	e0bffc15 	stw	r2,-16(fp)
				break;
81103184:	00000306 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>
				
				default:
					bSuccess = FALSE;
81103188:	e03ffc15 	stw	zero,-16(fp)
8110318c:	00000106 	br	81103194 <b_SpaceWire_Interface_Mode_Control+0x318>
	
			}
		} else {
			bSuccess = FALSE;
81103190:	e03ffc15 	stw	zero,-16(fp)
		}

		return bSuccess;
81103194:	e0bffc17 	ldw	r2,-16(fp)
	}
81103198:	e037883a 	mov	sp,fp
8110319c:	dfc00117 	ldw	ra,4(sp)
811031a0:	df000017 	ldw	fp,0(sp)
811031a4:	dec00204 	addi	sp,sp,8
811031a8:	f800283a 	ret

811031ac <v_SpaceWire_Interface_Force_Reset>:

	void v_SpaceWire_Interface_Force_Reset(char c_SpwID){
811031ac:	defffc04 	addi	sp,sp,-16
811031b0:	de00012e 	bgeu	sp,et,811031b8 <v_SpaceWire_Interface_Force_Reset+0xc>
811031b4:	003b68fa 	trap	3
811031b8:	dfc00315 	stw	ra,12(sp)
811031bc:	df000215 	stw	fp,8(sp)
811031c0:	df000204 	addi	fp,sp,8
811031c4:	2005883a 	mov	r2,r4
811031c8:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811031cc:	d0a04004 	addi	r2,gp,-32512
811031d0:	e0bffe15 	stw	r2,-8(fp)
		switch (c_SpwID) {
811031d4:	e0bfff07 	ldb	r2,-4(fp)
811031d8:	10bfefc4 	addi	r2,r2,-65
811031dc:	10c00228 	cmpgeui	r3,r2,8
811031e0:	1800261e 	bne	r3,zero,8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
811031e4:	100690ba 	slli	r3,r2,2
811031e8:	00a04434 	movhi	r2,33040
811031ec:	108c7f04 	addi	r2,r2,12796
811031f0:	1885883a 	add	r2,r3,r2
811031f4:	10800017 	ldw	r2,0(r2)
811031f8:	1000683a 	jmp	r2
811031fc:	8110321c 	xori	r4,r16,16584
81103200:	81103228 	cmpgeui	r4,r16,16584
81103204:	81103234 	orhi	r4,r16,16584
81103208:	81103240 	call	88110324 <__reset+0x20f0324>
8110320c:	8110324c 	andi	r4,r16,16585
81103210:	81103258 	cmpnei	r4,r16,16585
81103214:	81103264 	muli	r4,r16,16585
81103218:	81103270 	cmpltui	r4,r16,16585
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110321c:	d0a04004 	addi	r2,gp,-32512
81103220:	e0bffe15 	stw	r2,-8(fp)
			break;
81103224:	00001506 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103228:	d0a04104 	addi	r2,gp,-32508
8110322c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103230:	00001206 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103234:	d0a04204 	addi	r2,gp,-32504
81103238:	e0bffe15 	stw	r2,-8(fp)
			break;
8110323c:	00000f06 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103240:	d0a04304 	addi	r2,gp,-32500
81103244:	e0bffe15 	stw	r2,-8(fp)
			break;
81103248:	00000c06 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
8110324c:	d0a04404 	addi	r2,gp,-32496
81103250:	e0bffe15 	stw	r2,-8(fp)
			break;
81103254:	00000906 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81103258:	d0a04504 	addi	r2,gp,-32492
8110325c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103260:	00000606 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103264:	d0a04604 	addi	r2,gp,-32488
81103268:	e0bffe15 	stw	r2,-8(fp)
			break;
8110326c:	00000306 	br	8110327c <v_SpaceWire_Interface_Force_Reset+0xd0>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103270:	d0a04704 	addi	r2,gp,-32484
81103274:	e0bffe15 	stw	r2,-8(fp)
			break;
81103278:	0001883a 	nop
		}
		SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value | SPWC_CODEC_FORCE_RESET_CONTROL_BIT_MASK);
8110327c:	e0ffff07 	ldb	r3,-4(fp)
81103280:	e0bffe17 	ldw	r2,-8(fp)
81103284:	10800017 	ldw	r2,0(r2)
81103288:	10801014 	ori	r2,r2,64
8110328c:	100d883a 	mov	r6,r2
81103290:	000b883a 	mov	r5,zero
81103294:	1809883a 	mov	r4,r3
81103298:	11029440 	call	81102944 <SPWC_WRITE_REG32>

	}
8110329c:	0001883a 	nop
811032a0:	e037883a 	mov	sp,fp
811032a4:	dfc00117 	ldw	ra,4(sp)
811032a8:	df000017 	ldw	fp,0(sp)
811032ac:	dec00204 	addi	sp,sp,8
811032b0:	f800283a 	ret

811032b4 <v_SpaceWire_Interface_Interrupts_Enable_Control>:

	bool v_SpaceWire_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
811032b4:	defff804 	addi	sp,sp,-32
811032b8:	de00012e 	bgeu	sp,et,811032c0 <v_SpaceWire_Interface_Interrupts_Enable_Control+0xc>
811032bc:	003b68fa 	trap	3
811032c0:	dfc00715 	stw	ra,28(sp)
811032c4:	df000615 	stw	fp,24(sp)
811032c8:	df000604 	addi	fp,sp,24
811032cc:	2007883a 	mov	r3,r4
811032d0:	2805883a 	mov	r2,r5
811032d4:	e1bfff15 	stw	r6,-4(fp)
811032d8:	e0fffd05 	stb	r3,-12(fp)
811032dc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811032e0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_ENABLE_BIT_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | SPWC_LINK_RUNNING_INTERRUPT_ENABLE_BIT_MASK;
811032e4:	00800e04 	movi	r2,56
811032e8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811032ec:	d0a04004 	addi	r2,gp,-32512
811032f0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811032f4:	e0bffd07 	ldb	r2,-12(fp)
811032f8:	10bfefc4 	addi	r2,r2,-65
811032fc:	10c00228 	cmpgeui	r3,r2,8
81103300:	1800361e 	bne	r3,zero,811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
81103304:	100690ba 	slli	r3,r2,2
81103308:	00a04434 	movhi	r2,33040
8110330c:	108cc704 	addi	r2,r2,13084
81103310:	1885883a 	add	r2,r3,r2
81103314:	10800017 	ldw	r2,0(r2)
81103318:	1000683a 	jmp	r2
8110331c:	8110333c 	xorhi	r4,r16,16588
81103320:	81103350 	cmplti	r4,r16,16589
81103324:	81103364 	muli	r4,r16,16589
81103328:	81103378 	rdprs	r4,r16,16589
8110332c:	8110338c 	andi	r4,r16,16590
81103330:	811033a0 	cmpeqi	r4,r16,16590
81103334:	811033b4 	orhi	r4,r16,16590
81103338:	811033c8 	cmpgei	r4,r16,16591
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110333c:	d0a04004 	addi	r2,gp,-32512
81103340:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103344:	00800044 	movi	r2,1
81103348:	e0bffa15 	stw	r2,-24(fp)
			break;
8110334c:	00002306 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103350:	d0a04104 	addi	r2,gp,-32508
81103354:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103358:	00800044 	movi	r2,1
8110335c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103360:	00001e06 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103364:	d0a04204 	addi	r2,gp,-32504
81103368:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110336c:	00800044 	movi	r2,1
81103370:	e0bffa15 	stw	r2,-24(fp)
			break;
81103374:	00001906 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103378:	d0a04304 	addi	r2,gp,-32500
8110337c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103380:	00800044 	movi	r2,1
81103384:	e0bffa15 	stw	r2,-24(fp)
			break;
81103388:	00001406 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
8110338c:	d0a04404 	addi	r2,gp,-32496
81103390:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103394:	00800044 	movi	r2,1
81103398:	e0bffa15 	stw	r2,-24(fp)
			break;
8110339c:	00000f06 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811033a0:	d0a04504 	addi	r2,gp,-32492
811033a4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811033a8:	00800044 	movi	r2,1
811033ac:	e0bffa15 	stw	r2,-24(fp)
			break;
811033b0:	00000a06 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811033b4:	d0a04604 	addi	r2,gp,-32488
811033b8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811033bc:	00800044 	movi	r2,1
811033c0:	e0bffa15 	stw	r2,-24(fp)
			break;
811033c4:	00000506 	br	811033dc <v_SpaceWire_Interface_Interrupts_Enable_Control+0x128>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811033c8:	d0a04704 	addi	r2,gp,-32484
811033cc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811033d0:	00800044 	movi	r2,1
811033d4:	e0bffa15 	stw	r2,-24(fp)
			break;
811033d8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
811033dc:	e0bffa17 	ldw	r2,-24(fp)
811033e0:	10800058 	cmpnei	r2,r2,1
811033e4:	10002b1e 	bne	r2,zero,81103494 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e0>
811033e8:	e0ffff17 	ldw	r3,-4(fp)
811033ec:	e0bffc17 	ldw	r2,-16(fp)
811033f0:	1884703a 	and	r2,r3,r2
811033f4:	10002726 	beq	r2,zero,81103494 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
811033f8:	e0bffe03 	ldbu	r2,-8(fp)
811033fc:	10000326 	beq	r2,zero,8110340c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x158>
81103400:	10800060 	cmpeqi	r2,r2,1
81103404:	1000121e 	bne	r2,zero,81103450 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x19c>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81103408:	00002306 	br	81103498 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_InterruptMask;
8110340c:	e0bffb17 	ldw	r2,-20(fp)
81103410:	10c00017 	ldw	r3,0(r2)
81103414:	e0bfff17 	ldw	r2,-4(fp)
81103418:	0084303a 	nor	r2,zero,r2
8110341c:	1886703a 	and	r3,r3,r2
81103420:	e0bffb17 	ldw	r2,-20(fp)
81103424:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103428:	e0fffd07 	ldb	r3,-12(fp)
8110342c:	e0bffb17 	ldw	r2,-20(fp)
81103430:	10800017 	ldw	r2,0(r2)
81103434:	100d883a 	mov	r6,r2
81103438:	000b883a 	mov	r5,zero
8110343c:	1809883a 	mov	r4,r3
81103440:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103444:	00800044 	movi	r2,1
81103448:	e0bffa15 	stw	r2,-24(fp)
				break;
8110344c:	00001006 	br	81103490 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_InterruptMask;
81103450:	e0bffb17 	ldw	r2,-20(fp)
81103454:	10c00017 	ldw	r3,0(r2)
81103458:	e0bfff17 	ldw	r2,-4(fp)
8110345c:	1886b03a 	or	r3,r3,r2
81103460:	e0bffb17 	ldw	r2,-20(fp)
81103464:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103468:	e0fffd07 	ldb	r3,-12(fp)
8110346c:	e0bffb17 	ldw	r2,-20(fp)
81103470:	10800017 	ldw	r2,0(r2)
81103474:	100d883a 	mov	r6,r2
81103478:	000b883a 	mov	r5,zero
8110347c:	1809883a 	mov	r4,r3
81103480:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103484:	00800044 	movi	r2,1
81103488:	e0bffa15 	stw	r2,-24(fp)
				break;
8110348c:	0001883a 	nop

			}
		} else {
81103490:	00000106 	br	81103498 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1e4>
			bSuccess = FALSE;
81103494:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103498:	e0bffa17 	ldw	r2,-24(fp)
	}
8110349c:	e037883a 	mov	sp,fp
811034a0:	dfc00117 	ldw	ra,4(sp)
811034a4:	df000017 	ldw	fp,0(sp)
811034a8:	dec00204 	addi	sp,sp,8
811034ac:	f800283a 	ret

811034b0 <ul_SpaceWire_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_SpaceWire_Interface_Interrupts_Flags_Read(char c_SpwID){
811034b0:	defffb04 	addi	sp,sp,-20
811034b4:	de00012e 	bgeu	sp,et,811034bc <ul_SpaceWire_Interface_Interrupts_Flags_Read+0xc>
811034b8:	003b68fa 	trap	3
811034bc:	dfc00415 	stw	ra,16(sp)
811034c0:	df000315 	stw	fp,12(sp)
811034c4:	df000304 	addi	fp,sp,12
811034c8:	2005883a 	mov	r2,r4
811034cc:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
811034d0:	008001c4 	movi	r2,7
811034d4:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_interrupts_flags_value = SPWC_READ_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811034d8:	e0bfff07 	ldb	r2,-4(fp)
811034dc:	000b883a 	mov	r5,zero
811034e0:	1009883a 	mov	r4,r2
811034e4:	1102a740 	call	81102a74 <SPWC_READ_REG32>
811034e8:	1007883a 	mov	r3,r2
811034ec:	e0bffd17 	ldw	r2,-12(fp)
811034f0:	1884703a 	and	r2,r3,r2
811034f4:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_interrupts_flags_value;
811034f8:	e0bffe17 	ldw	r2,-8(fp)
	}
811034fc:	e037883a 	mov	sp,fp
81103500:	dfc00117 	ldw	ra,4(sp)
81103504:	df000017 	ldw	fp,0(sp)
81103508:	dec00204 	addi	sp,sp,8
8110350c:	f800283a 	ret

81103510 <v_SpaceWire_Interface_Interrupts_Flags_Clear>:

	void v_SpaceWire_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81103510:	defff904 	addi	sp,sp,-28
81103514:	de00012e 	bgeu	sp,et,8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0xc>
81103518:	003b68fa 	trap	3
8110351c:	dfc00615 	stw	ra,24(sp)
81103520:	df000515 	stw	fp,20(sp)
81103524:	df000504 	addi	fp,sp,20
81103528:	2005883a 	mov	r2,r4
8110352c:	e17fff15 	stw	r5,-4(fp)
81103530:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81103534:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
81103538:	008001c4 	movi	r2,7
8110353c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103540:	d0a04004 	addi	r2,gp,-32512
81103544:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103548:	e0bffe07 	ldb	r2,-8(fp)
8110354c:	10bfefc4 	addi	r2,r2,-65
81103550:	10c00228 	cmpgeui	r3,r2,8
81103554:	1800361e 	bne	r3,zero,81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
81103558:	100690ba 	slli	r3,r2,2
8110355c:	00a04434 	movhi	r2,33040
81103560:	108d5c04 	addi	r2,r2,13680
81103564:	1885883a 	add	r2,r3,r2
81103568:	10800017 	ldw	r2,0(r2)
8110356c:	1000683a 	jmp	r2
81103570:	81103590 	cmplti	r4,r16,16598
81103574:	811035a4 	muli	r4,r16,16598
81103578:	811035b8 	rdprs	r4,r16,16598
8110357c:	811035cc 	andi	r4,r16,16599
81103580:	811035e0 	cmpeqi	r4,r16,16599
81103584:	811035f4 	orhi	r4,r16,16599
81103588:	81103608 	cmpgei	r4,r16,16600
8110358c:	8110361c 	xori	r4,r16,16600
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103590:	d0a04004 	addi	r2,gp,-32512
81103594:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103598:	00800044 	movi	r2,1
8110359c:	e0bffb15 	stw	r2,-20(fp)
			break;
811035a0:	00002306 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
811035a4:	d0a04104 	addi	r2,gp,-32508
811035a8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035ac:	00800044 	movi	r2,1
811035b0:	e0bffb15 	stw	r2,-20(fp)
			break;
811035b4:	00001e06 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
811035b8:	d0a04204 	addi	r2,gp,-32504
811035bc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035c0:	00800044 	movi	r2,1
811035c4:	e0bffb15 	stw	r2,-20(fp)
			break;
811035c8:	00001906 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
811035cc:	d0a04304 	addi	r2,gp,-32500
811035d0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035d4:	00800044 	movi	r2,1
811035d8:	e0bffb15 	stw	r2,-20(fp)
			break;
811035dc:	00001406 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811035e0:	d0a04404 	addi	r2,gp,-32496
811035e4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035e8:	00800044 	movi	r2,1
811035ec:	e0bffb15 	stw	r2,-20(fp)
			break;
811035f0:	00000f06 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811035f4:	d0a04504 	addi	r2,gp,-32492
811035f8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811035fc:	00800044 	movi	r2,1
81103600:	e0bffb15 	stw	r2,-20(fp)
			break;
81103604:	00000a06 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103608:	d0a04604 	addi	r2,gp,-32488
8110360c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103610:	00800044 	movi	r2,1
81103614:	e0bffb15 	stw	r2,-20(fp)
			break;
81103618:	00000506 	br	81103630 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
8110361c:	d0a04704 	addi	r2,gp,-32484
81103620:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103624:	00800044 	movi	r2,1
81103628:	e0bffb15 	stw	r2,-20(fp)
			break;
8110362c:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
81103630:	e0bffb17 	ldw	r2,-20(fp)
81103634:	10800058 	cmpnei	r2,r2,1
81103638:	10000d1e 	bne	r2,zero,81103670 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x160>
8110363c:	e0ffff17 	ldw	r3,-4(fp)
81103640:	e0bffd17 	ldw	r2,-12(fp)
81103644:	1884703a 	and	r2,r3,r2
81103648:	10000926 	beq	r2,zero,81103670 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x160>
			SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_spwc_interface_control_status_register_value | ul_spwc_mask));
8110364c:	e13ffe07 	ldb	r4,-8(fp)
81103650:	e0bffc17 	ldw	r2,-16(fp)
81103654:	10c00017 	ldw	r3,0(r2)
81103658:	e0bffd17 	ldw	r2,-12(fp)
8110365c:	1884b03a 	or	r2,r3,r2
81103660:	100d883a 	mov	r6,r2
81103664:	000b883a 	mov	r5,zero
81103668:	11029440 	call	81102944 <SPWC_WRITE_REG32>
8110366c:	00000106 	br	81103674 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x164>
		} else {
			bSuccess = FALSE;
81103670:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81103674:	0001883a 	nop
81103678:	e037883a 	mov	sp,fp
8110367c:	dfc00117 	ldw	ra,4(sp)
81103680:	df000017 	ldw	fp,0(sp)
81103684:	dec00204 	addi	sp,sp,8
81103688:	f800283a 	ret

8110368c <v_SpaceWire_Interface_Link_Control>:

	bool v_SpaceWire_Interface_Link_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_ControlMask){
8110368c:	defff804 	addi	sp,sp,-32
81103690:	de00012e 	bgeu	sp,et,81103698 <v_SpaceWire_Interface_Link_Control+0xc>
81103694:	003b68fa 	trap	3
81103698:	dfc00715 	stw	ra,28(sp)
8110369c:	df000615 	stw	fp,24(sp)
811036a0:	df000604 	addi	fp,sp,24
811036a4:	2007883a 	mov	r3,r4
811036a8:	2805883a 	mov	r2,r5
811036ac:	e1bfff15 	stw	r6,-4(fp)
811036b0:	e0fffd05 	stb	r3,-12(fp)
811036b4:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811036b8:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_AUTOSTART_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK | SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK;
811036bc:	0080e004 	movi	r2,896
811036c0:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811036c4:	d0a00104 	addi	r2,gp,-32764
811036c8:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811036cc:	e0bffd07 	ldb	r2,-12(fp)
811036d0:	10bfefc4 	addi	r2,r2,-65
811036d4:	10c00228 	cmpgeui	r3,r2,8
811036d8:	1800361e 	bne	r3,zero,811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
811036dc:	100690ba 	slli	r3,r2,2
811036e0:	00a04434 	movhi	r2,33040
811036e4:	108dbd04 	addi	r2,r2,14068
811036e8:	1885883a 	add	r2,r3,r2
811036ec:	10800017 	ldw	r2,0(r2)
811036f0:	1000683a 	jmp	r2
811036f4:	81103714 	ori	r4,r16,16604
811036f8:	81103728 	cmpgeui	r4,r16,16604
811036fc:	8110373c 	xorhi	r4,r16,16604
81103700:	81103750 	cmplti	r4,r16,16605
81103704:	81103764 	muli	r4,r16,16605
81103708:	81103778 	rdprs	r4,r16,16605
8110370c:	8110378c 	andi	r4,r16,16606
81103710:	811037a0 	cmpeqi	r4,r16,16606
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103714:	d0a00104 	addi	r2,gp,-32764
81103718:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110371c:	00800044 	movi	r2,1
81103720:	e0bffa15 	stw	r2,-24(fp)
			break;
81103724:	00002306 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81103728:	d0a00204 	addi	r2,gp,-32760
8110372c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103730:	00800044 	movi	r2,1
81103734:	e0bffa15 	stw	r2,-24(fp)
			break;
81103738:	00001e06 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
8110373c:	d0a00304 	addi	r2,gp,-32756
81103740:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103744:	00800044 	movi	r2,1
81103748:	e0bffa15 	stw	r2,-24(fp)
			break;
8110374c:	00001906 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103750:	d0a00404 	addi	r2,gp,-32752
81103754:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103758:	00800044 	movi	r2,1
8110375c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103760:	00001406 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103764:	d0a00504 	addi	r2,gp,-32748
81103768:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110376c:	00800044 	movi	r2,1
81103770:	e0bffa15 	stw	r2,-24(fp)
			break;
81103774:	00000f06 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81103778:	d0a00604 	addi	r2,gp,-32744
8110377c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103780:	00800044 	movi	r2,1
81103784:	e0bffa15 	stw	r2,-24(fp)
			break;
81103788:	00000a06 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
8110378c:	d0a00704 	addi	r2,gp,-32740
81103790:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103794:	00800044 	movi	r2,1
81103798:	e0bffa15 	stw	r2,-24(fp)
			break;
8110379c:	00000506 	br	811037b4 <v_SpaceWire_Interface_Link_Control+0x128>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
811037a0:	d0a00804 	addi	r2,gp,-32736
811037a4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811037a8:	00800044 	movi	r2,1
811037ac:	e0bffa15 	stw	r2,-24(fp)
			break;
811037b0:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
811037b4:	e0bffa17 	ldw	r2,-24(fp)
811037b8:	10800058 	cmpnei	r2,r2,1
811037bc:	10002b1e 	bne	r2,zero,8110386c <v_SpaceWire_Interface_Link_Control+0x1e0>
811037c0:	e0ffff17 	ldw	r3,-4(fp)
811037c4:	e0bffc17 	ldw	r2,-16(fp)
811037c8:	1884703a 	and	r2,r3,r2
811037cc:	10002726 	beq	r2,zero,8110386c <v_SpaceWire_Interface_Link_Control+0x1e0>
			switch (uc_RegisterOperation){
811037d0:	e0bffe03 	ldbu	r2,-8(fp)
811037d4:	10000326 	beq	r2,zero,811037e4 <v_SpaceWire_Interface_Link_Control+0x158>
811037d8:	10800060 	cmpeqi	r2,r2,1
811037dc:	1000121e 	bne	r2,zero,81103828 <v_SpaceWire_Interface_Link_Control+0x19c>
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811037e0:	00002306 	br	81103870 <v_SpaceWire_Interface_Link_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_spacewire_link_control_status_register_value &= ~ul_ControlMask;
811037e4:	e0bffb17 	ldw	r2,-20(fp)
811037e8:	10c00017 	ldw	r3,0(r2)
811037ec:	e0bfff17 	ldw	r2,-4(fp)
811037f0:	0084303a 	nor	r2,zero,r2
811037f4:	1886703a 	and	r3,r3,r2
811037f8:	e0bffb17 	ldw	r2,-20(fp)
811037fc:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103800:	e0fffd07 	ldb	r3,-12(fp)
81103804:	e0bffb17 	ldw	r2,-20(fp)
81103808:	10800017 	ldw	r2,0(r2)
8110380c:	100d883a 	mov	r6,r2
81103810:	01400044 	movi	r5,1
81103814:	1809883a 	mov	r4,r3
81103818:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110381c:	00800044 	movi	r2,1
81103820:	e0bffa15 	stw	r2,-24(fp)
				break;
81103824:	00001006 	br	81103868 <v_SpaceWire_Interface_Link_Control+0x1dc>

				case SPWC_REG_SET:
					*ul_spwc_spacewire_link_control_status_register_value |= ul_ControlMask;
81103828:	e0bffb17 	ldw	r2,-20(fp)
8110382c:	10c00017 	ldw	r3,0(r2)
81103830:	e0bfff17 	ldw	r2,-4(fp)
81103834:	1886b03a 	or	r3,r3,r2
81103838:	e0bffb17 	ldw	r2,-20(fp)
8110383c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103840:	e0fffd07 	ldb	r3,-12(fp)
81103844:	e0bffb17 	ldw	r2,-20(fp)
81103848:	10800017 	ldw	r2,0(r2)
8110384c:	100d883a 	mov	r6,r2
81103850:	01400044 	movi	r5,1
81103854:	1809883a 	mov	r4,r3
81103858:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
8110385c:	00800044 	movi	r2,1
81103860:	e0bffa15 	stw	r2,-24(fp)
				break;
81103864:	0001883a 	nop

			}
		} else {
81103868:	00000106 	br	81103870 <v_SpaceWire_Interface_Link_Control+0x1e4>
			bSuccess = FALSE;
8110386c:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103870:	e0bffa17 	ldw	r2,-24(fp)
	}
81103874:	e037883a 	mov	sp,fp
81103878:	dfc00117 	ldw	ra,4(sp)
8110387c:	df000017 	ldw	fp,0(sp)
81103880:	dec00204 	addi	sp,sp,8
81103884:	f800283a 	ret

81103888 <ul_SpaceWire_Interface_Link_Error_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Error_Read(char c_SpwID){
81103888:	defffb04 	addi	sp,sp,-20
8110388c:	de00012e 	bgeu	sp,et,81103894 <ul_SpaceWire_Interface_Link_Error_Read+0xc>
81103890:	003b68fa 	trap	3
81103894:	dfc00415 	stw	ra,16(sp)
81103898:	df000315 	stw	fp,12(sp)
8110389c:	df000304 	addi	fp,sp,12
811038a0:	2005883a 	mov	r2,r4
811038a4:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_DISCONNECT_ERROR_BIT_MASK | SPWC_LINK_PARITY_ERROR_BIT_MASK | SPWC_LINK_ESCAPE_ERROR_BIT_MASK | SPWC_LINK_CREDIT_ERROR_BIT_MASK;
811038a8:	00801e04 	movi	r2,120
811038ac:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_error_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811038b0:	e0bfff07 	ldb	r2,-4(fp)
811038b4:	01400044 	movi	r5,1
811038b8:	1009883a 	mov	r4,r2
811038bc:	1102a740 	call	81102a74 <SPWC_READ_REG32>
811038c0:	1007883a 	mov	r3,r2
811038c4:	e0bffd17 	ldw	r2,-12(fp)
811038c8:	1884703a 	and	r2,r3,r2
811038cc:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_error_value;
811038d0:	e0bffe17 	ldw	r2,-8(fp)
	}
811038d4:	e037883a 	mov	sp,fp
811038d8:	dfc00117 	ldw	ra,4(sp)
811038dc:	df000017 	ldw	fp,0(sp)
811038e0:	dec00204 	addi	sp,sp,8
811038e4:	f800283a 	ret

811038e8 <ul_SpaceWire_Interface_Link_Status_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Status_Read(char c_SpwID){
811038e8:	defffb04 	addi	sp,sp,-20
811038ec:	de00012e 	bgeu	sp,et,811038f4 <ul_SpaceWire_Interface_Link_Status_Read+0xc>
811038f0:	003b68fa 	trap	3
811038f4:	dfc00415 	stw	ra,16(sp)
811038f8:	df000315 	stw	fp,12(sp)
811038fc:	df000304 	addi	fp,sp,12
81103900:	2005883a 	mov	r2,r4
81103904:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_STARTED_STATUS_BIT_MASK | SPWC_LINK_CONNECTING_STATUS_BIT_MASK | SPWC_LINK_RUNNING_STATUS_BIT_MASK;
81103908:	008001c4 	movi	r2,7
8110390c:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_status_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
81103910:	e0bfff07 	ldb	r2,-4(fp)
81103914:	01400044 	movi	r5,1
81103918:	1009883a 	mov	r4,r2
8110391c:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103920:	1007883a 	mov	r3,r2
81103924:	e0bffd17 	ldw	r2,-12(fp)
81103928:	1884703a 	and	r2,r3,r2
8110392c:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_status_value;
81103930:	e0bffe17 	ldw	r2,-8(fp)
	}
81103934:	e037883a 	mov	sp,fp
81103938:	dfc00117 	ldw	ra,4(sp)
8110393c:	df000017 	ldw	fp,0(sp)
81103940:	dec00204 	addi	sp,sp,8
81103944:	f800283a 	ret

81103948 <v_SpaceWire_Interface_Send_TimeCode>:

	void v_SpaceWire_Interface_Send_TimeCode(char c_SpwID, alt_u8 TimeCode){
81103948:	defffb04 	addi	sp,sp,-20
8110394c:	de00012e 	bgeu	sp,et,81103954 <v_SpaceWire_Interface_Send_TimeCode+0xc>
81103950:	003b68fa 	trap	3
81103954:	dfc00415 	stw	ra,16(sp)
81103958:	df000315 	stw	fp,12(sp)
8110395c:	df000304 	addi	fp,sp,12
81103960:	2007883a 	mov	r3,r4
81103964:	2805883a 	mov	r2,r5
81103968:	e0fffe05 	stb	r3,-8(fp)
8110396c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = (((alt_u32)TimeCode) << 1) | SPWC_TX_TIMECODE_CONTROL_BIT_MASK;
81103970:	e0bfff03 	ldbu	r2,-4(fp)
81103974:	1085883a 	add	r2,r2,r2
81103978:	10800054 	ori	r2,r2,1
8110397c:	e0bffd15 	stw	r2,-12(fp)
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, ul_spwc_mask);
81103980:	e0bffe07 	ldb	r2,-8(fp)
81103984:	e1bffd17 	ldw	r6,-12(fp)
81103988:	01400084 	movi	r5,2
8110398c:	1009883a 	mov	r4,r2
81103990:	11029440 	call	81102944 <SPWC_WRITE_REG32>

	}
81103994:	0001883a 	nop
81103998:	e037883a 	mov	sp,fp
8110399c:	dfc00117 	ldw	ra,4(sp)
811039a0:	df000017 	ldw	fp,0(sp)
811039a4:	dec00204 	addi	sp,sp,8
811039a8:	f800283a 	ret

811039ac <b_SpaceWire_Interface_TimeCode_Arrived>:

	bool b_SpaceWire_Interface_TimeCode_Arrived(char c_SpwID){
811039ac:	defffc04 	addi	sp,sp,-16
811039b0:	de00012e 	bgeu	sp,et,811039b8 <b_SpaceWire_Interface_TimeCode_Arrived+0xc>
811039b4:	003b68fa 	trap	3
811039b8:	dfc00315 	stw	ra,12(sp)
811039bc:	df000215 	stw	fp,8(sp)
811039c0:	df000204 	addi	fp,sp,8
811039c4:	2005883a 	mov	r2,r4
811039c8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_timecode_arrived = FALSE;
811039cc:	e03ffe15 	stw	zero,-8(fp)
		
		if (SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS) & SPWC_RX_TIMECODE_STATUS_BIT_MASK) {
811039d0:	e0bfff07 	ldb	r2,-4(fp)
811039d4:	01400084 	movi	r5,2
811039d8:	1009883a 	mov	r4,r2
811039dc:	1102a740 	call	81102a74 <SPWC_READ_REG32>
811039e0:	1080006c 	andhi	r2,r2,1
811039e4:	10000226 	beq	r2,zero,811039f0 <b_SpaceWire_Interface_TimeCode_Arrived+0x44>
			b_timecode_arrived = TRUE;
811039e8:	00800044 	movi	r2,1
811039ec:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_timecode_arrived;
811039f0:	e0bffe17 	ldw	r2,-8(fp)
	}
811039f4:	e037883a 	mov	sp,fp
811039f8:	dfc00117 	ldw	ra,4(sp)
811039fc:	df000017 	ldw	fp,0(sp)
81103a00:	dec00204 	addi	sp,sp,8
81103a04:	f800283a 	ret

81103a08 <uc_SpaceWire_Interface_Get_TimeCode>:
	
	alt_u8 uc_SpaceWire_Interface_Get_TimeCode(char c_SpwID){
81103a08:	defffb04 	addi	sp,sp,-20
81103a0c:	de00012e 	bgeu	sp,et,81103a14 <uc_SpaceWire_Interface_Get_TimeCode+0xc>
81103a10:	003b68fa 	trap	3
81103a14:	dfc00415 	stw	ra,16(sp)
81103a18:	df000315 	stw	fp,12(sp)
81103a1c:	df000304 	addi	fp,sp,12
81103a20:	2005883a 	mov	r2,r4
81103a24:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_timecode_register = SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS);
81103a28:	e0bfff07 	ldb	r2,-4(fp)
81103a2c:	01400084 	movi	r5,2
81103a30:	1009883a 	mov	r4,r2
81103a34:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103a38:	e0bffd15 	stw	r2,-12(fp)
		
		alt_u8 uc_timecode_value = (alt_u8)((ul_timecode_register & (SPWC_RX_TIMECODE_CONTROL_BITS_MASK | SPWC_RX_TIMECODE_COUNTER_VALUE_MASK)) >> 17);
81103a3c:	e0bffd17 	ldw	r2,-12(fp)
81103a40:	10807fac 	andhi	r2,r2,510
81103a44:	1004d47a 	srli	r2,r2,17
81103a48:	e0bffe05 	stb	r2,-8(fp)
	
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, (ul_timecode_register | SPWC_RX_TIMECODE_STATUS_BIT_MASK));
81103a4c:	e0ffff07 	ldb	r3,-4(fp)
81103a50:	e0bffd17 	ldw	r2,-12(fp)
81103a54:	10800074 	orhi	r2,r2,1
81103a58:	100d883a 	mov	r6,r2
81103a5c:	01400084 	movi	r5,2
81103a60:	1809883a 	mov	r4,r3
81103a64:	11029440 	call	81102944 <SPWC_WRITE_REG32>

		return uc_timecode_value;
81103a68:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103a6c:	e037883a 	mov	sp,fp
81103a70:	dfc00117 	ldw	ra,4(sp)
81103a74:	df000017 	ldw	fp,0(sp)
81103a78:	dec00204 	addi	sp,sp,8
81103a7c:	f800283a 	ret

81103a80 <uc_SpaceWire_Interface_Get_TX_Div>:

	alt_u8 uc_SpaceWire_Interface_Get_TX_Div(char c_SpwID){
81103a80:	defffb04 	addi	sp,sp,-20
81103a84:	de00012e 	bgeu	sp,et,81103a8c <uc_SpaceWire_Interface_Get_TX_Div+0xc>
81103a88:	003b68fa 	trap	3
81103a8c:	dfc00415 	stw	ra,16(sp)
81103a90:	df000315 	stw	fp,12(sp)
81103a94:	df000304 	addi	fp,sp,12
81103a98:	2005883a 	mov	r2,r4
81103a9c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81103aa0:	00800134 	movhi	r2,4
81103aa4:	10bf0004 	addi	r2,r2,-1024
81103aa8:	e0bffd15 	stw	r2,-12(fp)
		alt_u8 uc_txdiv_value = (alt_u8)((SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask) >> 10);
81103aac:	e0bfff07 	ldb	r2,-4(fp)
81103ab0:	01400044 	movi	r5,1
81103ab4:	1009883a 	mov	r4,r2
81103ab8:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103abc:	1007883a 	mov	r3,r2
81103ac0:	e0bffd17 	ldw	r2,-12(fp)
81103ac4:	1884703a 	and	r2,r3,r2
81103ac8:	1004d2ba 	srli	r2,r2,10
81103acc:	e0bffe05 	stb	r2,-8(fp)

		return uc_txdiv_value;
81103ad0:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103ad4:	e037883a 	mov	sp,fp
81103ad8:	dfc00117 	ldw	ra,4(sp)
81103adc:	df000017 	ldw	fp,0(sp)
81103ae0:	dec00204 	addi	sp,sp,8
81103ae4:	f800283a 	ret

81103ae8 <b_SpaceWire_Interface_Set_TX_Div>:

	bool b_SpaceWire_Interface_Set_TX_Div(char c_SpwID, alt_u8 uc_TxDiv){
81103ae8:	defff804 	addi	sp,sp,-32
81103aec:	de00012e 	bgeu	sp,et,81103af4 <b_SpaceWire_Interface_Set_TX_Div+0xc>
81103af0:	003b68fa 	trap	3
81103af4:	dfc00715 	stw	ra,28(sp)
81103af8:	df000615 	stw	fp,24(sp)
81103afc:	df000604 	addi	fp,sp,24
81103b00:	2007883a 	mov	r3,r4
81103b04:	2805883a 	mov	r2,r5
81103b08:	e0fffe05 	stb	r3,-8(fp)
81103b0c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81103b10:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81103b14:	00800134 	movhi	r2,4
81103b18:	10bf0004 	addi	r2,r2,-1024
81103b1c:	e0bffc15 	stw	r2,-16(fp)
		const alt_u32 ul_txdiv_mask = (alt_u32)(uc_TxDiv << 10);
81103b20:	e0bfff03 	ldbu	r2,-4(fp)
81103b24:	100492ba 	slli	r2,r2,10
81103b28:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103b2c:	d0a00104 	addi	r2,gp,-32764
81103b30:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81103b34:	e0bffe07 	ldb	r2,-8(fp)
81103b38:	10bfefc4 	addi	r2,r2,-65
81103b3c:	10c00228 	cmpgeui	r3,r2,8
81103b40:	1800361e 	bne	r3,zero,81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
81103b44:	100690ba 	slli	r3,r2,2
81103b48:	00a04434 	movhi	r2,33040
81103b4c:	108ed704 	addi	r2,r2,15196
81103b50:	1885883a 	add	r2,r3,r2
81103b54:	10800017 	ldw	r2,0(r2)
81103b58:	1000683a 	jmp	r2
81103b5c:	81103b7c 	xorhi	r4,r16,16621
81103b60:	81103b90 	cmplti	r4,r16,16622
81103b64:	81103ba4 	muli	r4,r16,16622
81103b68:	81103bb8 	rdprs	r4,r16,16622
81103b6c:	81103bcc 	andi	r4,r16,16623
81103b70:	81103be0 	cmpeqi	r4,r16,16623
81103b74:	81103bf4 	orhi	r4,r16,16623
81103b78:	81103c08 	cmpgei	r4,r16,16624
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103b7c:	d0a00104 	addi	r2,gp,-32764
81103b80:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103b84:	00800044 	movi	r2,1
81103b88:	e0bffa15 	stw	r2,-24(fp)
			break;
81103b8c:	00002306 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81103b90:	d0a00204 	addi	r2,gp,-32760
81103b94:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103b98:	00800044 	movi	r2,1
81103b9c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103ba0:	00001e06 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81103ba4:	d0a00304 	addi	r2,gp,-32756
81103ba8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bac:	00800044 	movi	r2,1
81103bb0:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bb4:	00001906 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103bb8:	d0a00404 	addi	r2,gp,-32752
81103bbc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bc0:	00800044 	movi	r2,1
81103bc4:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bc8:	00001406 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103bcc:	d0a00504 	addi	r2,gp,-32748
81103bd0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bd4:	00800044 	movi	r2,1
81103bd8:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bdc:	00000f06 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81103be0:	d0a00604 	addi	r2,gp,-32744
81103be4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103be8:	00800044 	movi	r2,1
81103bec:	e0bffa15 	stw	r2,-24(fp)
			break;
81103bf0:	00000a06 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81103bf4:	d0a00704 	addi	r2,gp,-32740
81103bf8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103bfc:	00800044 	movi	r2,1
81103c00:	e0bffa15 	stw	r2,-24(fp)
			break;
81103c04:	00000506 	br	81103c1c <b_SpaceWire_Interface_Set_TX_Div+0x134>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81103c08:	d0a00804 	addi	r2,gp,-32736
81103c0c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103c10:	00800044 	movi	r2,1
81103c14:	e0bffa15 	stw	r2,-24(fp)
			break;
81103c18:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81103c1c:	e0bffa17 	ldw	r2,-24(fp)
81103c20:	10800058 	cmpnei	r2,r2,1
81103c24:	1000171e 	bne	r2,zero,81103c84 <b_SpaceWire_Interface_Set_TX_Div+0x19c>
			*ul_spwc_spacewire_link_control_status_register_value &= ~(ul_spwc_mask);
81103c28:	e0bffb17 	ldw	r2,-20(fp)
81103c2c:	10c00017 	ldw	r3,0(r2)
81103c30:	e0bffc17 	ldw	r2,-16(fp)
81103c34:	0084303a 	nor	r2,zero,r2
81103c38:	1886703a 	and	r3,r3,r2
81103c3c:	e0bffb17 	ldw	r2,-20(fp)
81103c40:	10c00015 	stw	r3,0(r2)
			*ul_spwc_spacewire_link_control_status_register_value |= ul_txdiv_mask;
81103c44:	e0bffb17 	ldw	r2,-20(fp)
81103c48:	10c00017 	ldw	r3,0(r2)
81103c4c:	e0bffd17 	ldw	r2,-12(fp)
81103c50:	1886b03a 	or	r3,r3,r2
81103c54:	e0bffb17 	ldw	r2,-20(fp)
81103c58:	10c00015 	stw	r3,0(r2)
			SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103c5c:	e0fffe07 	ldb	r3,-8(fp)
81103c60:	e0bffb17 	ldw	r2,-20(fp)
81103c64:	10800017 	ldw	r2,0(r2)
81103c68:	100d883a 	mov	r6,r2
81103c6c:	01400044 	movi	r5,1
81103c70:	1809883a 	mov	r4,r3
81103c74:	11029440 	call	81102944 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81103c78:	00800044 	movi	r2,1
81103c7c:	e0bffa15 	stw	r2,-24(fp)
81103c80:	00000106 	br	81103c88 <b_SpaceWire_Interface_Set_TX_Div+0x1a0>
		} else {
			bSuccess = FALSE;
81103c84:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103c88:	e0bffa17 	ldw	r2,-24(fp)
	}
81103c8c:	e037883a 	mov	sp,fp
81103c90:	dfc00117 	ldw	ra,4(sp)
81103c94:	df000017 	ldw	fp,0(sp)
81103c98:	dec00204 	addi	sp,sp,8
81103c9c:	f800283a 	ret

81103ca0 <b_SpaceWire_Interface_Write_TX_Data>:

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){
81103ca0:	defffa04 	addi	sp,sp,-24
81103ca4:	de00012e 	bgeu	sp,et,81103cac <b_SpaceWire_Interface_Write_TX_Data+0xc>
81103ca8:	003b68fa 	trap	3
81103cac:	dfc00515 	stw	ra,20(sp)
81103cb0:	df000415 	stw	fp,16(sp)
81103cb4:	df000404 	addi	fp,sp,16
81103cb8:	2807883a 	mov	r3,r5
81103cbc:	3005883a 	mov	r2,r6
81103cc0:	e13ffd05 	stb	r4,-12(fp)
81103cc4:	e0fffe05 	stb	r3,-8(fp)
81103cc8:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81103ccc:	e03ffc15 	stw	zero,-16(fp)
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
81103cd0:	e0bffd07 	ldb	r2,-12(fp)
81103cd4:	014000c4 	movi	r5,3
81103cd8:	1009883a 	mov	r4,r2
81103cdc:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103ce0:	1081000c 	andi	r2,r2,1024
81103ce4:	10000c26 	beq	r2,zero,81103d18 <b_SpaceWire_Interface_Write_TX_Data+0x78>
			SPWC_WRITE_REG32(c_SpwID,
81103ce8:	e13ffd07 	ldb	r4,-12(fp)
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
81103cec:	e0bffe03 	ldbu	r2,-8(fp)
81103cf0:	1080004c 	andi	r2,r2,1
81103cf4:	1004923a 	slli	r2,r2,8
81103cf8:	10c08014 	ori	r3,r2,512
81103cfc:	e0bfff03 	ldbu	r2,-4(fp)
81103d00:	1884b03a 	or	r2,r3,r2

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){

		bool bSuccess = FALSE;
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
			SPWC_WRITE_REG32(c_SpwID,
81103d04:	100d883a 	mov	r6,r2
81103d08:	014000c4 	movi	r5,3
81103d0c:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
			bSuccess = TRUE;
81103d10:	00800044 	movi	r2,1
81103d14:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81103d18:	e0bffc17 	ldw	r2,-16(fp)
	}
81103d1c:	e037883a 	mov	sp,fp
81103d20:	dfc00117 	ldw	ra,4(sp)
81103d24:	df000017 	ldw	fp,0(sp)
81103d28:	dec00204 	addi	sp,sp,8
81103d2c:	f800283a 	ret

81103d30 <b_SpaceWire_Interface_Send_SpaceWire_Data>:

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81103d30:	defff904 	addi	sp,sp,-28
81103d34:	de00012e 	bgeu	sp,et,81103d3c <b_SpaceWire_Interface_Send_SpaceWire_Data+0xc>
81103d38:	003b68fa 	trap	3
81103d3c:	dfc00615 	stw	ra,24(sp)
81103d40:	df000515 	stw	fp,20(sp)
81103d44:	df000504 	addi	fp,sp,20
81103d48:	2007883a 	mov	r3,r4
81103d4c:	e17ffe15 	stw	r5,-8(fp)
81103d50:	3005883a 	mov	r2,r6
81103d54:	e0fffd05 	stb	r3,-12(fp)
81103d58:	e0bfff0d 	sth	r2,-4(fp)
		bool bSuccess = FALSE;
81103d5c:	e03ffb15 	stw	zero,-20(fp)

		alt_u16 cnt = 0;
81103d60:	e03ffc0d 	sth	zero,-16(fp)
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103d64:	00000306 	br	81103d74 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x44>
			cnt++;
81103d68:	e0bffc0b 	ldhu	r2,-16(fp)
81103d6c:	10800044 	addi	r2,r2,1
81103d70:	e0bffc0d 	sth	r2,-16(fp)

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
		bool bSuccess = FALSE;

		alt_u16 cnt = 0;
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103d74:	e13ffd07 	ldb	r4,-12(fp)
81103d78:	e0bffc0b 	ldhu	r2,-16(fp)
81103d7c:	e0fffe17 	ldw	r3,-8(fp)
81103d80:	1885883a 	add	r2,r3,r2
81103d84:	10800003 	ldbu	r2,0(r2)
81103d88:	10803fcc 	andi	r2,r2,255
81103d8c:	100d883a 	mov	r6,r2
81103d90:	000b883a 	mov	r5,zero
81103d94:	1103ca00 	call	81103ca0 <b_SpaceWire_Interface_Write_TX_Data>
81103d98:	10000426 	beq	r2,zero,81103dac <b_SpaceWire_Interface_Send_SpaceWire_Data+0x7c>
81103d9c:	e0fffc0b 	ldhu	r3,-16(fp)
81103da0:	e0bfff0b 	ldhu	r2,-4(fp)
81103da4:	10bfffc4 	addi	r2,r2,-1
81103da8:	18bfef16 	blt	r3,r2,81103d68 <__reset+0xfb0e3d68>
			cnt++;
		}
		if (cnt == (data_size - 1)) {
81103dac:	e0fffc0b 	ldhu	r3,-16(fp)
81103db0:	e0bfff0b 	ldhu	r2,-4(fp)
81103db4:	10bfffc4 	addi	r2,r2,-1
81103db8:	1880081e 	bne	r3,r2,81103ddc <b_SpaceWire_Interface_Send_SpaceWire_Data+0xac>
			if (b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 1, 0)){
81103dbc:	e0bffd07 	ldb	r2,-12(fp)
81103dc0:	000d883a 	mov	r6,zero
81103dc4:	01400044 	movi	r5,1
81103dc8:	1009883a 	mov	r4,r2
81103dcc:	1103ca00 	call	81103ca0 <b_SpaceWire_Interface_Write_TX_Data>
81103dd0:	10000226 	beq	r2,zero,81103ddc <b_SpaceWire_Interface_Send_SpaceWire_Data+0xac>
				bSuccess = TRUE;
81103dd4:	00800044 	movi	r2,1
81103dd8:	e0bffb15 	stw	r2,-20(fp)
			}
		}

		return bSuccess;
81103ddc:	e0bffb17 	ldw	r2,-20(fp)
	}
81103de0:	e037883a 	mov	sp,fp
81103de4:	dfc00117 	ldw	ra,4(sp)
81103de8:	df000017 	ldw	fp,0(sp)
81103dec:	dec00204 	addi	sp,sp,8
81103df0:	f800283a 	ret

81103df4 <b_SpaceWire_Interface_Read_RX_Data>:

	bool b_SpaceWire_Interface_Read_RX_Data(char c_SpwID, alt_u8 *uc_RxFlag, alt_u8 *uc_RxData){
81103df4:	defff904 	addi	sp,sp,-28
81103df8:	de00012e 	bgeu	sp,et,81103e00 <b_SpaceWire_Interface_Read_RX_Data+0xc>
81103dfc:	003b68fa 	trap	3
81103e00:	dfc00615 	stw	ra,24(sp)
81103e04:	df000515 	stw	fp,20(sp)
81103e08:	df000504 	addi	fp,sp,20
81103e0c:	2005883a 	mov	r2,r4
81103e10:	e17ffe15 	stw	r5,-8(fp)
81103e14:	e1bfff15 	stw	r6,-4(fp)
81103e18:	e0bffd05 	stb	r2,-12(fp)

		bool bSuccess = FALSE;
81103e1c:	e03ffb15 	stw	zero,-20(fp)
		alt_u32 backdoor_register = 0;
81103e20:	e03ffc15 	stw	zero,-16(fp)

		backdoor_register = SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS);
81103e24:	e0bffd07 	ldb	r2,-12(fp)
81103e28:	014000c4 	movi	r5,3
81103e2c:	1009883a 	mov	r4,r2
81103e30:	1102a740 	call	81102a74 <SPWC_READ_REG32>
81103e34:	e0bffc15 	stw	r2,-16(fp)
		if (backdoor_register & SPWC_RX_CODEC_RX_DATAVALID_STATUS_BIT_MASK) {
81103e38:	e0bffc17 	ldw	r2,-16(fp)
81103e3c:	1081002c 	andhi	r2,r2,1024
81103e40:	10001326 	beq	r2,zero,81103e90 <b_SpaceWire_Interface_Read_RX_Data+0x9c>

			*uc_RxFlag = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_FLAG_VALUE_MASK) >> 24);
81103e44:	e0bffc17 	ldw	r2,-16(fp)
81103e48:	1080402c 	andhi	r2,r2,256
81103e4c:	1004d63a 	srli	r2,r2,24
81103e50:	1007883a 	mov	r3,r2
81103e54:	e0bffe17 	ldw	r2,-8(fp)
81103e58:	10c00005 	stb	r3,0(r2)
			*uc_RxData = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_DATA_VALUE_MASK) >> 16);
81103e5c:	e0bffc17 	ldw	r2,-16(fp)
81103e60:	10803fec 	andhi	r2,r2,255
81103e64:	1004d43a 	srli	r2,r2,16
81103e68:	1007883a 	mov	r3,r2
81103e6c:	e0bfff17 	ldw	r2,-4(fp)
81103e70:	10c00005 	stb	r3,0(r2)

			SPWC_WRITE_REG32(c_SpwID,
81103e74:	e0bffd07 	ldb	r2,-12(fp)
81103e78:	01808034 	movhi	r6,512
81103e7c:	014000c4 	movi	r5,3
81103e80:	1009883a 	mov	r4,r2
81103e84:	11029440 	call	81102944 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_RX_CODEC_RX_READ_CONTROL_BIT_MASK));
			bSuccess = TRUE;
81103e88:	00800044 	movi	r2,1
81103e8c:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81103e90:	e0bffb17 	ldw	r2,-20(fp)
	}
81103e94:	e037883a 	mov	sp,fp
81103e98:	dfc00117 	ldw	ra,4(sp)
81103e9c:	df000017 	ldw	fp,0(sp)
81103ea0:	dec00204 	addi	sp,sp,8
81103ea4:	f800283a 	ret

81103ea8 <ui_SpaceWire_Interface_Get_SpaceWire_Data>:

	alt_u16 ui_SpaceWire_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 buffer_size){
81103ea8:	defffa04 	addi	sp,sp,-24
81103eac:	de00012e 	bgeu	sp,et,81103eb4 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0xc>
81103eb0:	003b68fa 	trap	3
81103eb4:	dfc00515 	stw	ra,20(sp)
81103eb8:	df000415 	stw	fp,16(sp)
81103ebc:	df000404 	addi	fp,sp,16
81103ec0:	2007883a 	mov	r3,r4
81103ec4:	e17ffe15 	stw	r5,-8(fp)
81103ec8:	3005883a 	mov	r2,r6
81103ecc:	e0fffd05 	stb	r3,-12(fp)
81103ed0:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 ui_rx_data_size = 0;
81103ed4:	e03ffc0d 	sth	zero,-16(fp)

		alt_u8 spw_flag = 0;
81103ed8:	e03ffc85 	stb	zero,-14(fp)
		alt_u8 spw_data = 0;
81103edc:	e03ffcc5 	stb	zero,-13(fp)

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103ee0:	00000b06 	br	81103f10 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x68>
			if (spw_flag == 0) {
81103ee4:	e0bffc83 	ldbu	r2,-14(fp)
81103ee8:	10803fcc 	andi	r2,r2,255
81103eec:	1000081e 	bne	r2,zero,81103f10 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x68>
				data_buffer[ui_rx_data_size] = spw_data;
81103ef0:	e0bffc0b 	ldhu	r2,-16(fp)
81103ef4:	e0fffe17 	ldw	r3,-8(fp)
81103ef8:	1885883a 	add	r2,r3,r2
81103efc:	e0fffcc3 	ldbu	r3,-13(fp)
81103f00:	10c00005 	stb	r3,0(r2)
				ui_rx_data_size++;
81103f04:	e0bffc0b 	ldhu	r2,-16(fp)
81103f08:	10800044 	addi	r2,r2,1
81103f0c:	e0bffc0d 	sth	r2,-16(fp)
		alt_u16 ui_rx_data_size = 0;

		alt_u8 spw_flag = 0;
		alt_u8 spw_data = 0;

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103f10:	e0bffd07 	ldb	r2,-12(fp)
81103f14:	e13ffcc4 	addi	r4,fp,-13
81103f18:	e0fffc84 	addi	r3,fp,-14
81103f1c:	200d883a 	mov	r6,r4
81103f20:	180b883a 	mov	r5,r3
81103f24:	1009883a 	mov	r4,r2
81103f28:	1103df40 	call	81103df4 <b_SpaceWire_Interface_Read_RX_Data>
81103f2c:	10000426 	beq	r2,zero,81103f40 <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x98>
81103f30:	e0fffc0b 	ldhu	r3,-16(fp)
81103f34:	e0bfff0b 	ldhu	r2,-4(fp)
81103f38:	10bfffc4 	addi	r2,r2,-1
81103f3c:	18bfe916 	blt	r3,r2,81103ee4 <__reset+0xfb0e3ee4>
				data_buffer[ui_rx_data_size] = spw_data;
				ui_rx_data_size++;
			}
		}

		return ui_rx_data_size;
81103f40:	e0bffc0b 	ldhu	r2,-16(fp)
	}
81103f44:	e037883a 	mov	sp,fp
81103f48:	dfc00117 	ldw	ra,4(sp)
81103f4c:	df000017 	ldw	fp,0(sp)
81103f50:	dec00204 	addi	sp,sp,8
81103f54:	f800283a 	ret

81103f58 <TRAN_WRITE_REG32>:
	alt_u32 ul_tran_e_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_f_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_g_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_h_interface_control_status_register_value = 0x00000000;

	void TRAN_WRITE_REG32(char c_SpwID, alt_u8 RegisterOffset, alt_u32 RegisterValue){
81103f58:	defffb04 	addi	sp,sp,-20
81103f5c:	de00012e 	bgeu	sp,et,81103f64 <TRAN_WRITE_REG32+0xc>
81103f60:	003b68fa 	trap	3
81103f64:	df000415 	stw	fp,16(sp)
81103f68:	df000404 	addi	fp,sp,16
81103f6c:	2007883a 	mov	r3,r4
81103f70:	2805883a 	mov	r2,r5
81103f74:	e1bfff15 	stw	r6,-4(fp)
81103f78:	e0fffd05 	stb	r3,-12(fp)
81103f7c:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103f80:	00a04834 	movhi	r2,33056
81103f84:	108e0004 	addi	r2,r2,14336
81103f88:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103f8c:	e0bffd07 	ldb	r2,-12(fp)
81103f90:	10bfefc4 	addi	r2,r2,-65
81103f94:	10c00228 	cmpgeui	r3,r2,8
81103f98:	18002e1e 	bne	r3,zero,81104054 <TRAN_WRITE_REG32+0xfc>
81103f9c:	100690ba 	slli	r3,r2,2
81103fa0:	00a04434 	movhi	r2,33040
81103fa4:	108fed04 	addi	r2,r2,16308
81103fa8:	1885883a 	add	r2,r3,r2
81103fac:	10800017 	ldw	r2,0(r2)
81103fb0:	1000683a 	jmp	r2
81103fb4:	81103fd4 	ori	r4,r16,16639
81103fb8:	81103fe4 	muli	r4,r16,16639
81103fbc:	81103ff4 	orhi	r4,r16,16639
81103fc0:	81104004 	addi	r4,r16,16640
81103fc4:	81104014 	ori	r4,r16,16640
81103fc8:	81104024 	muli	r4,r16,16640
81103fcc:	81104034 	orhi	r4,r16,16640
81103fd0:	81104044 	addi	r4,r16,16641
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103fd4:	00a04834 	movhi	r2,33056
81103fd8:	108e0004 	addi	r2,r2,14336
81103fdc:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fe0:	00001c06 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81103fe4:	00a04834 	movhi	r2,33056
81103fe8:	108d0004 	addi	r2,r2,13312
81103fec:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ff0:	00001806 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81103ff4:	00a04834 	movhi	r2,33056
81103ff8:	108c0004 	addi	r2,r2,12288
81103ffc:	e0bffc15 	stw	r2,-16(fp)
			break;
81104000:	00001406 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81104004:	00a04834 	movhi	r2,33056
81104008:	108b0004 	addi	r2,r2,11264
8110400c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104010:	00001006 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81104014:	00a04834 	movhi	r2,33056
81104018:	108a0004 	addi	r2,r2,10240
8110401c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104020:	00000c06 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81104024:	00a04834 	movhi	r2,33056
81104028:	10890004 	addi	r2,r2,9216
8110402c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104030:	00000806 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81104034:	00a04834 	movhi	r2,33056
81104038:	10880004 	addi	r2,r2,8192
8110403c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104040:	00000406 	br	81104054 <TRAN_WRITE_REG32+0xfc>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81104044:	00a04834 	movhi	r2,33056
81104048:	10870004 	addi	r2,r2,7168
8110404c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104050:	0001883a 	nop
		}
		*(pTranAddr + (alt_u32)RegisterOffset) = (alt_u32) RegisterValue;
81104054:	e0bffe03 	ldbu	r2,-8(fp)
81104058:	1085883a 	add	r2,r2,r2
8110405c:	1085883a 	add	r2,r2,r2
81104060:	1007883a 	mov	r3,r2
81104064:	e0bffc17 	ldw	r2,-16(fp)
81104068:	10c5883a 	add	r2,r2,r3
8110406c:	e0ffff17 	ldw	r3,-4(fp)
81104070:	10c00015 	stw	r3,0(r2)
	}
81104074:	0001883a 	nop
81104078:	e037883a 	mov	sp,fp
8110407c:	df000017 	ldw	fp,0(sp)
81104080:	dec00104 	addi	sp,sp,4
81104084:	f800283a 	ret

81104088 <TRAN_READ_REG32>:

	alt_u32 TRAN_READ_REG32(char c_SpwID, alt_u8 RegisterOffset){
81104088:	defffb04 	addi	sp,sp,-20
8110408c:	de00012e 	bgeu	sp,et,81104094 <TRAN_READ_REG32+0xc>
81104090:	003b68fa 	trap	3
81104094:	df000415 	stw	fp,16(sp)
81104098:	df000404 	addi	fp,sp,16
8110409c:	2007883a 	mov	r3,r4
811040a0:	2805883a 	mov	r2,r5
811040a4:	e0fffe05 	stb	r3,-8(fp)
811040a8:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
811040ac:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
811040b0:	00a04834 	movhi	r2,33056
811040b4:	108e0004 	addi	r2,r2,14336
811040b8:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
811040bc:	e0bffe07 	ldb	r2,-8(fp)
811040c0:	10bfefc4 	addi	r2,r2,-65
811040c4:	10c00228 	cmpgeui	r3,r2,8
811040c8:	18002e1e 	bne	r3,zero,81104184 <TRAN_READ_REG32+0xfc>
811040cc:	100690ba 	slli	r3,r2,2
811040d0:	00a04434 	movhi	r2,33040
811040d4:	10903904 	addi	r2,r2,16612
811040d8:	1885883a 	add	r2,r3,r2
811040dc:	10800017 	ldw	r2,0(r2)
811040e0:	1000683a 	jmp	r2
811040e4:	81104104 	addi	r4,r16,16644
811040e8:	81104114 	ori	r4,r16,16644
811040ec:	81104124 	muli	r4,r16,16644
811040f0:	81104134 	orhi	r4,r16,16644
811040f4:	81104144 	addi	r4,r16,16645
811040f8:	81104154 	ori	r4,r16,16645
811040fc:	81104164 	muli	r4,r16,16645
81104100:	81104174 	orhi	r4,r16,16645
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81104104:	00a04834 	movhi	r2,33056
81104108:	108e0004 	addi	r2,r2,14336
8110410c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104110:	00001c06 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81104114:	00a04834 	movhi	r2,33056
81104118:	108d0004 	addi	r2,r2,13312
8110411c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104120:	00001806 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81104124:	00a04834 	movhi	r2,33056
81104128:	108c0004 	addi	r2,r2,12288
8110412c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104130:	00001406 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81104134:	00a04834 	movhi	r2,33056
81104138:	108b0004 	addi	r2,r2,11264
8110413c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104140:	00001006 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81104144:	00a04834 	movhi	r2,33056
81104148:	108a0004 	addi	r2,r2,10240
8110414c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104150:	00000c06 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81104154:	00a04834 	movhi	r2,33056
81104158:	10890004 	addi	r2,r2,9216
8110415c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104160:	00000806 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81104164:	00a04834 	movhi	r2,33056
81104168:	10880004 	addi	r2,r2,8192
8110416c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104170:	00000406 	br	81104184 <TRAN_READ_REG32+0xfc>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81104174:	00a04834 	movhi	r2,33056
81104178:	10870004 	addi	r2,r2,7168
8110417c:	e0bffc15 	stw	r2,-16(fp)
			break;
81104180:	0001883a 	nop
		}
		RegisterValue = *(pTranAddr + (alt_u32)RegisterOffset);
81104184:	e0bfff03 	ldbu	r2,-4(fp)
81104188:	1085883a 	add	r2,r2,r2
8110418c:	1085883a 	add	r2,r2,r2
81104190:	1007883a 	mov	r3,r2
81104194:	e0bffc17 	ldw	r2,-16(fp)
81104198:	10c5883a 	add	r2,r2,r3
8110419c:	10800017 	ldw	r2,0(r2)
811041a0:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
811041a4:	e0bffd17 	ldw	r2,-12(fp)
	}
811041a8:	e037883a 	mov	sp,fp
811041ac:	df000017 	ldw	fp,0(sp)
811041b0:	dec00104 	addi	sp,sp,4
811041b4:	f800283a 	ret

811041b8 <b_Transparent_Interface_Write_Register>:

	bool b_Transparent_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811041b8:	defffa04 	addi	sp,sp,-24
811041bc:	de00012e 	bgeu	sp,et,811041c4 <b_Transparent_Interface_Write_Register+0xc>
811041c0:	003b68fa 	trap	3
811041c4:	dfc00515 	stw	ra,20(sp)
811041c8:	df000415 	stw	fp,16(sp)
811041cc:	df000404 	addi	fp,sp,16
811041d0:	2007883a 	mov	r3,r4
811041d4:	2805883a 	mov	r2,r5
811041d8:	e1bfff15 	stw	r6,-4(fp)
811041dc:	e0fffd05 	stb	r3,-12(fp)
811041e0:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811041e4:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
811041e8:	e0bffe03 	ldbu	r2,-8(fp)
811041ec:	108000e8 	cmpgeui	r2,r2,3
811041f0:	1000081e 	bne	r2,zero,81104214 <b_Transparent_Interface_Write_Register+0x5c>
			TRAN_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
811041f4:	e0bffd07 	ldb	r2,-12(fp)
811041f8:	e0fffe03 	ldbu	r3,-8(fp)
811041fc:	e1bfff17 	ldw	r6,-4(fp)
81104200:	180b883a 	mov	r5,r3
81104204:	1009883a 	mov	r4,r2
81104208:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
			bSuccess = TRUE;
8110420c:	00800044 	movi	r2,1
81104210:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81104214:	e0bffc17 	ldw	r2,-16(fp)
	}
81104218:	e037883a 	mov	sp,fp
8110421c:	dfc00117 	ldw	ra,4(sp)
81104220:	df000017 	ldw	fp,0(sp)
81104224:	dec00204 	addi	sp,sp,8
81104228:	f800283a 	ret

8110422c <ul_Transparent_Interface_Read_Register>:

	alt_u32 ul_Transparent_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
8110422c:	defffb04 	addi	sp,sp,-20
81104230:	de00012e 	bgeu	sp,et,81104238 <ul_Transparent_Interface_Read_Register+0xc>
81104234:	003b68fa 	trap	3
81104238:	dfc00415 	stw	ra,16(sp)
8110423c:	df000315 	stw	fp,12(sp)
81104240:	df000304 	addi	fp,sp,12
81104244:	2007883a 	mov	r3,r4
81104248:	2805883a 	mov	r2,r5
8110424c:	e0fffe05 	stb	r3,-8(fp)
81104250:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81104254:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81104258:	e0bfff03 	ldbu	r2,-4(fp)
8110425c:	108000e8 	cmpgeui	r2,r2,3
81104260:	1000061e 	bne	r2,zero,8110427c <ul_Transparent_Interface_Read_Register+0x50>
			ul_RegisterValue = TRAN_READ_REG32(c_SpwID, uc_RegisterAddress);
81104264:	e0bffe07 	ldb	r2,-8(fp)
81104268:	e0ffff03 	ldbu	r3,-4(fp)
8110426c:	180b883a 	mov	r5,r3
81104270:	1009883a 	mov	r4,r2
81104274:	11040880 	call	81104088 <TRAN_READ_REG32>
81104278:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
8110427c:	e0bffd17 	ldw	r2,-12(fp)
	}
81104280:	e037883a 	mov	sp,fp
81104284:	dfc00117 	ldw	ra,4(sp)
81104288:	df000017 	ldw	fp,0(sp)
8110428c:	dec00204 	addi	sp,sp,8
81104290:	f800283a 	ret

81104294 <v_Transparent_Interface_Enable_Control>:

	bool v_Transparent_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81104294:	defff804 	addi	sp,sp,-32
81104298:	de00012e 	bgeu	sp,et,811042a0 <v_Transparent_Interface_Enable_Control+0xc>
8110429c:	003b68fa 	trap	3
811042a0:	dfc00715 	stw	ra,28(sp)
811042a4:	df000615 	stw	fp,24(sp)
811042a8:	df000604 	addi	fp,sp,24
811042ac:	2007883a 	mov	r3,r4
811042b0:	2805883a 	mov	r2,r5
811042b4:	e1bfff15 	stw	r6,-4(fp)
811042b8:	e0fffd05 	stb	r3,-12(fp)
811042bc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811042c0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK;
811042c4:	0081c004 	movi	r2,1792
811042c8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811042cc:	d0a04804 	addi	r2,gp,-32480
811042d0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811042d4:	e0bffd07 	ldb	r2,-12(fp)
811042d8:	10bfefc4 	addi	r2,r2,-65
811042dc:	10c00228 	cmpgeui	r3,r2,8
811042e0:	1800361e 	bne	r3,zero,811043bc <v_Transparent_Interface_Enable_Control+0x128>
811042e4:	100690ba 	slli	r3,r2,2
811042e8:	00a04434 	movhi	r2,33040
811042ec:	1090bf04 	addi	r2,r2,17148
811042f0:	1885883a 	add	r2,r3,r2
811042f4:	10800017 	ldw	r2,0(r2)
811042f8:	1000683a 	jmp	r2
811042fc:	8110431c 	xori	r4,r16,16652
81104300:	81104330 	cmpltui	r4,r16,16652
81104304:	81104344 	addi	r4,r16,16653
81104308:	81104358 	cmpnei	r4,r16,16653
8110430c:	8110436c 	andhi	r4,r16,16653
81104310:	81104380 	call	88110438 <__reset+0x20f0438>
81104314:	81104394 	ori	r4,r16,16654
81104318:	811043a8 	cmpgeui	r4,r16,16654
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
8110431c:	d0a04804 	addi	r2,gp,-32480
81104320:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104324:	00800044 	movi	r2,1
81104328:	e0bffa15 	stw	r2,-24(fp)
			break;
8110432c:	00002306 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104330:	d0a04904 	addi	r2,gp,-32476
81104334:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104338:	00800044 	movi	r2,1
8110433c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104340:	00001e06 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81104344:	d0a04a04 	addi	r2,gp,-32472
81104348:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110434c:	00800044 	movi	r2,1
81104350:	e0bffa15 	stw	r2,-24(fp)
			break;
81104354:	00001906 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81104358:	d0a04b04 	addi	r2,gp,-32468
8110435c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104360:	00800044 	movi	r2,1
81104364:	e0bffa15 	stw	r2,-24(fp)
			break;
81104368:	00001406 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
8110436c:	d0a04c04 	addi	r2,gp,-32464
81104370:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104374:	00800044 	movi	r2,1
81104378:	e0bffa15 	stw	r2,-24(fp)
			break;
8110437c:	00000f06 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
81104380:	d0a04d04 	addi	r2,gp,-32460
81104384:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104388:	00800044 	movi	r2,1
8110438c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104390:	00000a06 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81104394:	d0a04e04 	addi	r2,gp,-32456
81104398:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110439c:	00800044 	movi	r2,1
811043a0:	e0bffa15 	stw	r2,-24(fp)
			break;
811043a4:	00000506 	br	811043bc <v_Transparent_Interface_Enable_Control+0x128>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811043a8:	d0a04f04 	addi	r2,gp,-32452
811043ac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043b0:	00800044 	movi	r2,1
811043b4:	e0bffa15 	stw	r2,-24(fp)
			break;
811043b8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
811043bc:	e0bffa17 	ldw	r2,-24(fp)
811043c0:	10800058 	cmpnei	r2,r2,1
811043c4:	10002b1e 	bne	r2,zero,81104474 <v_Transparent_Interface_Enable_Control+0x1e0>
811043c8:	e0ffff17 	ldw	r3,-4(fp)
811043cc:	e0bffc17 	ldw	r2,-16(fp)
811043d0:	1884703a 	and	r2,r3,r2
811043d4:	10002726 	beq	r2,zero,81104474 <v_Transparent_Interface_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
811043d8:	e0bffe03 	ldbu	r2,-8(fp)
811043dc:	10000326 	beq	r2,zero,811043ec <v_Transparent_Interface_Enable_Control+0x158>
811043e0:	10800060 	cmpeqi	r2,r2,1
811043e4:	1000121e 	bne	r2,zero,81104430 <v_Transparent_Interface_Enable_Control+0x19c>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811043e8:	00002306 	br	81104478 <v_Transparent_Interface_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){
			
				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_EnableMask;
811043ec:	e0bffb17 	ldw	r2,-20(fp)
811043f0:	10c00017 	ldw	r3,0(r2)
811043f4:	e0bfff17 	ldw	r2,-4(fp)
811043f8:	0084303a 	nor	r2,zero,r2
811043fc:	1886703a 	and	r3,r3,r2
81104400:	e0bffb17 	ldw	r2,-20(fp)
81104404:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104408:	e0fffd07 	ldb	r3,-12(fp)
8110440c:	e0bffb17 	ldw	r2,-20(fp)
81104410:	10800017 	ldw	r2,0(r2)
81104414:	100d883a 	mov	r6,r2
81104418:	01400804 	movi	r5,32
8110441c:	1809883a 	mov	r4,r3
81104420:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104424:	00800044 	movi	r2,1
81104428:	e0bffa15 	stw	r2,-24(fp)
				break;
8110442c:	00001006 	br	81104470 <v_Transparent_Interface_Enable_Control+0x1dc>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_EnableMask;
81104430:	e0bffb17 	ldw	r2,-20(fp)
81104434:	10c00017 	ldw	r3,0(r2)
81104438:	e0bfff17 	ldw	r2,-4(fp)
8110443c:	1886b03a 	or	r3,r3,r2
81104440:	e0bffb17 	ldw	r2,-20(fp)
81104444:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104448:	e0fffd07 	ldb	r3,-12(fp)
8110444c:	e0bffb17 	ldw	r2,-20(fp)
81104450:	10800017 	ldw	r2,0(r2)
81104454:	100d883a 	mov	r6,r2
81104458:	01400804 	movi	r5,32
8110445c:	1809883a 	mov	r4,r3
81104460:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104464:	00800044 	movi	r2,1
81104468:	e0bffa15 	stw	r2,-24(fp)
				break;
8110446c:	0001883a 	nop

			}
		} else {
81104470:	00000106 	br	81104478 <v_Transparent_Interface_Enable_Control+0x1e4>
			bSuccess = FALSE;
81104474:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104478:	e0bffa17 	ldw	r2,-24(fp)
	}
8110447c:	e037883a 	mov	sp,fp
81104480:	dfc00117 	ldw	ra,4(sp)
81104484:	df000017 	ldw	fp,0(sp)
81104488:	dec00204 	addi	sp,sp,8
8110448c:	f800283a 	ret

81104490 <v_Transparent_Interface_Interrupts_Enable_Control>:

	bool v_Transparent_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
81104490:	defff804 	addi	sp,sp,-32
81104494:	de00012e 	bgeu	sp,et,8110449c <v_Transparent_Interface_Interrupts_Enable_Control+0xc>
81104498:	003b68fa 	trap	3
8110449c:	dfc00715 	stw	ra,28(sp)
811044a0:	df000615 	stw	fp,24(sp)
811044a4:	df000604 	addi	fp,sp,24
811044a8:	2007883a 	mov	r3,r4
811044ac:	2805883a 	mov	r2,r5
811044b0:	e1bfff15 	stw	r6,-4(fp)
811044b4:	e0fffd05 	stb	r3,-12(fp)
811044b8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811044bc:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_ENABLE_BIT_MASK | TRAN_DATA_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_ENABLE_BIT_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_ENABLE_BIT_MASK;
811044c0:	00803c04 	movi	r2,240
811044c4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811044c8:	d0a04804 	addi	r2,gp,-32480
811044cc:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811044d0:	e0bffd07 	ldb	r2,-12(fp)
811044d4:	10bfefc4 	addi	r2,r2,-65
811044d8:	10c00228 	cmpgeui	r3,r2,8
811044dc:	1800361e 	bne	r3,zero,811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
811044e0:	100690ba 	slli	r3,r2,2
811044e4:	00a04434 	movhi	r2,33040
811044e8:	10913e04 	addi	r2,r2,17656
811044ec:	1885883a 	add	r2,r3,r2
811044f0:	10800017 	ldw	r2,0(r2)
811044f4:	1000683a 	jmp	r2
811044f8:	81104518 	cmpnei	r4,r16,16660
811044fc:	8110452c 	andhi	r4,r16,16660
81104500:	81104540 	call	88110454 <__reset+0x20f0454>
81104504:	81104554 	ori	r4,r16,16661
81104508:	81104568 	cmpgeui	r4,r16,16661
8110450c:	8110457c 	xorhi	r4,r16,16661
81104510:	81104590 	cmplti	r4,r16,16662
81104514:	811045a4 	muli	r4,r16,16662
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104518:	d0a04804 	addi	r2,gp,-32480
8110451c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104520:	00800044 	movi	r2,1
81104524:	e0bffa15 	stw	r2,-24(fp)
			break;
81104528:	00002306 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
8110452c:	d0a04904 	addi	r2,gp,-32476
81104530:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104534:	00800044 	movi	r2,1
81104538:	e0bffa15 	stw	r2,-24(fp)
			break;
8110453c:	00001e06 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81104540:	d0a04a04 	addi	r2,gp,-32472
81104544:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104548:	00800044 	movi	r2,1
8110454c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104550:	00001906 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
81104554:	d0a04b04 	addi	r2,gp,-32468
81104558:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110455c:	00800044 	movi	r2,1
81104560:	e0bffa15 	stw	r2,-24(fp)
			break;
81104564:	00001406 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81104568:	d0a04c04 	addi	r2,gp,-32464
8110456c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104570:	00800044 	movi	r2,1
81104574:	e0bffa15 	stw	r2,-24(fp)
			break;
81104578:	00000f06 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
8110457c:	d0a04d04 	addi	r2,gp,-32460
81104580:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104584:	00800044 	movi	r2,1
81104588:	e0bffa15 	stw	r2,-24(fp)
			break;
8110458c:	00000a06 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81104590:	d0a04e04 	addi	r2,gp,-32456
81104594:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104598:	00800044 	movi	r2,1
8110459c:	e0bffa15 	stw	r2,-24(fp)
			break;
811045a0:	00000506 	br	811045b8 <v_Transparent_Interface_Interrupts_Enable_Control+0x128>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811045a4:	d0a04f04 	addi	r2,gp,-32452
811045a8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811045ac:	00800044 	movi	r2,1
811045b0:	e0bffa15 	stw	r2,-24(fp)
			break;
811045b4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
811045b8:	e0bffa17 	ldw	r2,-24(fp)
811045bc:	10800058 	cmpnei	r2,r2,1
811045c0:	10002b1e 	bne	r2,zero,81104670 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e0>
811045c4:	e0ffff17 	ldw	r3,-4(fp)
811045c8:	e0bffc17 	ldw	r2,-16(fp)
811045cc:	1884703a 	and	r2,r3,r2
811045d0:	10002726 	beq	r2,zero,81104670 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e0>
			switch (uc_RegisterOperation){
811045d4:	e0bffe03 	ldbu	r2,-8(fp)
811045d8:	10000326 	beq	r2,zero,811045e8 <v_Transparent_Interface_Interrupts_Enable_Control+0x158>
811045dc:	10800060 	cmpeqi	r2,r2,1
811045e0:	1000121e 	bne	r2,zero,8110462c <v_Transparent_Interface_Interrupts_Enable_Control+0x19c>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811045e4:	00002306 	br	81104674 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e4>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){

				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_InterruptMask;
811045e8:	e0bffb17 	ldw	r2,-20(fp)
811045ec:	10c00017 	ldw	r3,0(r2)
811045f0:	e0bfff17 	ldw	r2,-4(fp)
811045f4:	0084303a 	nor	r2,zero,r2
811045f8:	1886703a 	and	r3,r3,r2
811045fc:	e0bffb17 	ldw	r2,-20(fp)
81104600:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104604:	e0fffd07 	ldb	r3,-12(fp)
81104608:	e0bffb17 	ldw	r2,-20(fp)
8110460c:	10800017 	ldw	r2,0(r2)
81104610:	100d883a 	mov	r6,r2
81104614:	01400804 	movi	r5,32
81104618:	1809883a 	mov	r4,r3
8110461c:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104620:	00800044 	movi	r2,1
81104624:	e0bffa15 	stw	r2,-24(fp)
				break;
81104628:	00001006 	br	8110466c <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_InterruptMask;
8110462c:	e0bffb17 	ldw	r2,-20(fp)
81104630:	10c00017 	ldw	r3,0(r2)
81104634:	e0bfff17 	ldw	r2,-4(fp)
81104638:	1886b03a 	or	r3,r3,r2
8110463c:	e0bffb17 	ldw	r2,-20(fp)
81104640:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104644:	e0fffd07 	ldb	r3,-12(fp)
81104648:	e0bffb17 	ldw	r2,-20(fp)
8110464c:	10800017 	ldw	r2,0(r2)
81104650:	100d883a 	mov	r6,r2
81104654:	01400804 	movi	r5,32
81104658:	1809883a 	mov	r4,r3
8110465c:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104660:	00800044 	movi	r2,1
81104664:	e0bffa15 	stw	r2,-24(fp)
				break;
81104668:	0001883a 	nop

			}
		} else {
8110466c:	00000106 	br	81104674 <v_Transparent_Interface_Interrupts_Enable_Control+0x1e4>
			bSuccess = FALSE;
81104670:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81104674:	e0bffa17 	ldw	r2,-24(fp)
	}
81104678:	e037883a 	mov	sp,fp
8110467c:	dfc00117 	ldw	ra,4(sp)
81104680:	df000017 	ldw	fp,0(sp)
81104684:	dec00204 	addi	sp,sp,8
81104688:	f800283a 	ret

8110468c <ul_Transparent_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_Transparent_Interface_Interrupts_Flags_Read(char c_SpwID){
8110468c:	defffb04 	addi	sp,sp,-20
81104690:	de00012e 	bgeu	sp,et,81104698 <ul_Transparent_Interface_Interrupts_Flags_Read+0xc>
81104694:	003b68fa 	trap	3
81104698:	dfc00415 	stw	ra,16(sp)
8110469c:	df000315 	stw	fp,12(sp)
811046a0:	df000304 	addi	fp,sp,12
811046a4:	2005883a 	mov	r2,r4
811046a8:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
811046ac:	008003c4 	movi	r2,15
811046b0:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_interrupts_flags_value = TRAN_READ_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_tran_mask;
811046b4:	e0bfff07 	ldb	r2,-4(fp)
811046b8:	01400804 	movi	r5,32
811046bc:	1009883a 	mov	r4,r2
811046c0:	11040880 	call	81104088 <TRAN_READ_REG32>
811046c4:	1007883a 	mov	r3,r2
811046c8:	e0bffd17 	ldw	r2,-12(fp)
811046cc:	1884703a 	and	r2,r3,r2
811046d0:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_interrupts_flags_value;
811046d4:	e0bffe17 	ldw	r2,-8(fp)
	}
811046d8:	e037883a 	mov	sp,fp
811046dc:	dfc00117 	ldw	ra,4(sp)
811046e0:	df000017 	ldw	fp,0(sp)
811046e4:	dec00204 	addi	sp,sp,8
811046e8:	f800283a 	ret

811046ec <v_Transparent_Interface_Interrupts_Flags_Clear>:

	void v_Transparent_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
811046ec:	defff904 	addi	sp,sp,-28
811046f0:	de00012e 	bgeu	sp,et,811046f8 <v_Transparent_Interface_Interrupts_Flags_Clear+0xc>
811046f4:	003b68fa 	trap	3
811046f8:	dfc00615 	stw	ra,24(sp)
811046fc:	df000515 	stw	fp,20(sp)
81104700:	df000504 	addi	fp,sp,20
81104704:	2005883a 	mov	r2,r4
81104708:	e17fff15 	stw	r5,-4(fp)
8110470c:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81104710:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81104714:	008003c4 	movi	r2,15
81104718:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
8110471c:	d0a04804 	addi	r2,gp,-32480
81104720:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81104724:	e0bffe07 	ldb	r2,-8(fp)
81104728:	10bfefc4 	addi	r2,r2,-65
8110472c:	10c00228 	cmpgeui	r3,r2,8
81104730:	1800361e 	bne	r3,zero,8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
81104734:	100690ba 	slli	r3,r2,2
81104738:	00a04434 	movhi	r2,33040
8110473c:	1091d304 	addi	r2,r2,18252
81104740:	1885883a 	add	r2,r3,r2
81104744:	10800017 	ldw	r2,0(r2)
81104748:	1000683a 	jmp	r2
8110474c:	8110476c 	andhi	r4,r16,16669
81104750:	81104780 	call	88110478 <__reset+0x20f0478>
81104754:	81104794 	ori	r4,r16,16670
81104758:	811047a8 	cmpgeui	r4,r16,16670
8110475c:	811047bc 	xorhi	r4,r16,16670
81104760:	811047d0 	cmplti	r4,r16,16671
81104764:	811047e4 	muli	r4,r16,16671
81104768:	811047f8 	rdprs	r4,r16,16671
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
8110476c:	d0a04804 	addi	r2,gp,-32480
81104770:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104774:	00800044 	movi	r2,1
81104778:	e0bffb15 	stw	r2,-20(fp)
			break;
8110477c:	00002306 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104780:	d0a04904 	addi	r2,gp,-32476
81104784:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104788:	00800044 	movi	r2,1
8110478c:	e0bffb15 	stw	r2,-20(fp)
			break;
81104790:	00001e06 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
81104794:	d0a04a04 	addi	r2,gp,-32472
81104798:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
8110479c:	00800044 	movi	r2,1
811047a0:	e0bffb15 	stw	r2,-20(fp)
			break;
811047a4:	00001906 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811047a8:	d0a04b04 	addi	r2,gp,-32468
811047ac:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047b0:	00800044 	movi	r2,1
811047b4:	e0bffb15 	stw	r2,-20(fp)
			break;
811047b8:	00001406 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
811047bc:	d0a04c04 	addi	r2,gp,-32464
811047c0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047c4:	00800044 	movi	r2,1
811047c8:	e0bffb15 	stw	r2,-20(fp)
			break;
811047cc:	00000f06 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
811047d0:	d0a04d04 	addi	r2,gp,-32460
811047d4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047d8:	00800044 	movi	r2,1
811047dc:	e0bffb15 	stw	r2,-20(fp)
			break;
811047e0:	00000a06 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811047e4:	d0a04e04 	addi	r2,gp,-32456
811047e8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811047ec:	00800044 	movi	r2,1
811047f0:	e0bffb15 	stw	r2,-20(fp)
			break;
811047f4:	00000506 	br	8110480c <v_Transparent_Interface_Interrupts_Flags_Clear+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
811047f8:	d0a04f04 	addi	r2,gp,-32452
811047fc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104800:	00800044 	movi	r2,1
81104804:	e0bffb15 	stw	r2,-20(fp)
			break;
81104808:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
8110480c:	e0bffb17 	ldw	r2,-20(fp)
81104810:	10800058 	cmpnei	r2,r2,1
81104814:	10000d1e 	bne	r2,zero,8110484c <v_Transparent_Interface_Interrupts_Flags_Clear+0x160>
81104818:	e0ffff17 	ldw	r3,-4(fp)
8110481c:	e0bffd17 	ldw	r2,-12(fp)
81104820:	1884703a 	and	r2,r3,r2
81104824:	10000926 	beq	r2,zero,8110484c <v_Transparent_Interface_Interrupts_Flags_Clear+0x160>
			TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_tran_interface_control_status_register_value | ul_InterruptMask));
81104828:	e13ffe07 	ldb	r4,-8(fp)
8110482c:	e0bffc17 	ldw	r2,-16(fp)
81104830:	10c00017 	ldw	r3,0(r2)
81104834:	e0bfff17 	ldw	r2,-4(fp)
81104838:	1884b03a 	or	r2,r3,r2
8110483c:	100d883a 	mov	r6,r2
81104840:	01400804 	movi	r5,32
81104844:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>
81104848:	00000106 	br	81104850 <v_Transparent_Interface_Interrupts_Flags_Clear+0x164>
		} else {
			bSuccess = FALSE;
8110484c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81104850:	0001883a 	nop
81104854:	e037883a 	mov	sp,fp
81104858:	dfc00117 	ldw	ra,4(sp)
8110485c:	df000017 	ldw	fp,0(sp)
81104860:	dec00204 	addi	sp,sp,8
81104864:	f800283a 	ret

81104868 <v_Transparent_Interface_RX_FIFO_Reset>:

	void v_Transparent_Interface_RX_FIFO_Reset(char c_SpwID){
81104868:	defffd04 	addi	sp,sp,-12
8110486c:	de00012e 	bgeu	sp,et,81104874 <v_Transparent_Interface_RX_FIFO_Reset+0xc>
81104870:	003b68fa 	trap	3
81104874:	dfc00215 	stw	ra,8(sp)
81104878:	df000115 	stw	fp,4(sp)
8110487c:	df000104 	addi	fp,sp,4
81104880:	2005883a 	mov	r2,r4
81104884:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_RX_FIFO_RESET_CONTROL_BIT_MASK);
81104888:	e0bfff07 	ldb	r2,-4(fp)
8110488c:	01800104 	movi	r6,4
81104890:	01400844 	movi	r5,33
81104894:	1009883a 	mov	r4,r2
81104898:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>

	}
8110489c:	0001883a 	nop
811048a0:	e037883a 	mov	sp,fp
811048a4:	dfc00117 	ldw	ra,4(sp)
811048a8:	df000017 	ldw	fp,0(sp)
811048ac:	dec00204 	addi	sp,sp,8
811048b0:	f800283a 	ret

811048b4 <ul_Transparent_Interface_RX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_RX_FIFO_Status_Read(char c_SpwID){
811048b4:	defffb04 	addi	sp,sp,-20
811048b8:	de00012e 	bgeu	sp,et,811048c0 <ul_Transparent_Interface_RX_FIFO_Status_Read+0xc>
811048bc:	003b68fa 	trap	3
811048c0:	dfc00415 	stw	ra,16(sp)
811048c4:	df000315 	stw	fp,12(sp)
811048c8:	df000304 	addi	fp,sp,12
811048cc:	2005883a 	mov	r2,r4
811048d0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_RX_FIFO_USED_SPACE_VALUE_MASK | TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_RX_FIFO_FULL_STATUS_BIT_MASK;
811048d4:	0081fec4 	movi	r2,2043
811048d8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_rx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
811048dc:	e0bfff07 	ldb	r2,-4(fp)
811048e0:	01400844 	movi	r5,33
811048e4:	1009883a 	mov	r4,r2
811048e8:	11040880 	call	81104088 <TRAN_READ_REG32>
811048ec:	1007883a 	mov	r3,r2
811048f0:	e0bffd17 	ldw	r2,-12(fp)
811048f4:	1884703a 	and	r2,r3,r2
811048f8:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_rx_fifo_status_value;
811048fc:	e0bffe17 	ldw	r2,-8(fp)
	}
81104900:	e037883a 	mov	sp,fp
81104904:	dfc00117 	ldw	ra,4(sp)
81104908:	df000017 	ldw	fp,0(sp)
8110490c:	dec00204 	addi	sp,sp,8
81104910:	f800283a 	ret

81104914 <b_Transparent_Interface_RX_FIFO_Status_Empty>:

	bool b_Transparent_Interface_RX_FIFO_Status_Empty(char c_SpwID){
81104914:	defffc04 	addi	sp,sp,-16
81104918:	de00012e 	bgeu	sp,et,81104920 <b_Transparent_Interface_RX_FIFO_Status_Empty+0xc>
8110491c:	003b68fa 	trap	3
81104920:	dfc00315 	stw	ra,12(sp)
81104924:	df000215 	stw	fp,8(sp)
81104928:	df000204 	addi	fp,sp,8
8110492c:	2005883a 	mov	r2,r4
81104930:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_empty = FALSE;
81104934:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK) {
81104938:	e0bfff07 	ldb	r2,-4(fp)
8110493c:	01400844 	movi	r5,33
81104940:	1009883a 	mov	r4,r2
81104944:	11040880 	call	81104088 <TRAN_READ_REG32>
81104948:	1080008c 	andi	r2,r2,2
8110494c:	10000226 	beq	r2,zero,81104958 <b_Transparent_Interface_RX_FIFO_Status_Empty+0x44>
			b_rx_fifo_empty = TRUE;
81104950:	00800044 	movi	r2,1
81104954:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_empty;		
81104958:	e0bffe17 	ldw	r2,-8(fp)
	}
8110495c:	e037883a 	mov	sp,fp
81104960:	dfc00117 	ldw	ra,4(sp)
81104964:	df000017 	ldw	fp,0(sp)
81104968:	dec00204 	addi	sp,sp,8
8110496c:	f800283a 	ret

81104970 <b_Transparent_Interface_RX_FIFO_Status_Full>:
	
	bool b_Transparent_Interface_RX_FIFO_Status_Full(char c_SpwID){
81104970:	defffc04 	addi	sp,sp,-16
81104974:	de00012e 	bgeu	sp,et,8110497c <b_Transparent_Interface_RX_FIFO_Status_Full+0xc>
81104978:	003b68fa 	trap	3
8110497c:	dfc00315 	stw	ra,12(sp)
81104980:	df000215 	stw	fp,8(sp)
81104984:	df000204 	addi	fp,sp,8
81104988:	2005883a 	mov	r2,r4
8110498c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_full = FALSE;
81104990:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_FULL_STATUS_BIT_MASK) {
81104994:	e0bfff07 	ldb	r2,-4(fp)
81104998:	01400844 	movi	r5,33
8110499c:	1009883a 	mov	r4,r2
811049a0:	11040880 	call	81104088 <TRAN_READ_REG32>
811049a4:	1080004c 	andi	r2,r2,1
811049a8:	10000226 	beq	r2,zero,811049b4 <b_Transparent_Interface_RX_FIFO_Status_Full+0x44>
			b_rx_fifo_full = TRUE;
811049ac:	00800044 	movi	r2,1
811049b0:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_full;
811049b4:	e0bffe17 	ldw	r2,-8(fp)
	}
811049b8:	e037883a 	mov	sp,fp
811049bc:	dfc00117 	ldw	ra,4(sp)
811049c0:	df000017 	ldw	fp,0(sp)
811049c4:	dec00204 	addi	sp,sp,8
811049c8:	f800283a 	ret

811049cc <uc_Transparent_Interface_RX_FIFO_Status_Used>:

	alt_u8 uc_Transparent_Interface_RX_FIFO_Status_Used(char c_SpwID){
811049cc:	defffc04 	addi	sp,sp,-16
811049d0:	de00012e 	bgeu	sp,et,811049d8 <uc_Transparent_Interface_RX_FIFO_Status_Used+0xc>
811049d4:	003b68fa 	trap	3
811049d8:	dfc00315 	stw	ra,12(sp)
811049dc:	df000215 	stw	fp,8(sp)
811049e0:	df000204 	addi	fp,sp,8
811049e4:	2005883a 	mov	r2,r4
811049e8:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_rx_fifo_used = 0;
811049ec:	e03ffe05 	stb	zero,-8(fp)
		
		uc_rx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
811049f0:	e0bfff07 	ldb	r2,-4(fp)
811049f4:	01400844 	movi	r5,33
811049f8:	1009883a 	mov	r4,r2
811049fc:	11040880 	call	81104088 <TRAN_READ_REG32>
81104a00:	1081fe0c 	andi	r2,r2,2040
81104a04:	1004d0fa 	srli	r2,r2,3
81104a08:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_rx_fifo_used;
81104a0c:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104a10:	e037883a 	mov	sp,fp
81104a14:	dfc00117 	ldw	ra,4(sp)
81104a18:	df000017 	ldw	fp,0(sp)
81104a1c:	dec00204 	addi	sp,sp,8
81104a20:	f800283a 	ret

81104a24 <v_Transparent_Interface_TX_FIFO_Reset>:
	
	
	void v_Transparent_Interface_TX_FIFO_Reset(char c_SpwID){
81104a24:	defffd04 	addi	sp,sp,-12
81104a28:	de00012e 	bgeu	sp,et,81104a30 <v_Transparent_Interface_TX_FIFO_Reset+0xc>
81104a2c:	003b68fa 	trap	3
81104a30:	dfc00215 	stw	ra,8(sp)
81104a34:	df000115 	stw	fp,4(sp)
81104a38:	df000104 	addi	fp,sp,4
81104a3c:	2005883a 	mov	r2,r4
81104a40:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_TX_FIFO_RESET_CONTROL_BIT_MASK);
81104a44:	e0bfff07 	ldb	r2,-4(fp)
81104a48:	01800104 	movi	r6,4
81104a4c:	01400884 	movi	r5,34
81104a50:	1009883a 	mov	r4,r2
81104a54:	1103f580 	call	81103f58 <TRAN_WRITE_REG32>

	}
81104a58:	0001883a 	nop
81104a5c:	e037883a 	mov	sp,fp
81104a60:	dfc00117 	ldw	ra,4(sp)
81104a64:	df000017 	ldw	fp,0(sp)
81104a68:	dec00204 	addi	sp,sp,8
81104a6c:	f800283a 	ret

81104a70 <ul_Transparent_Interface_TX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_TX_FIFO_Status_Read(char c_SpwID){
81104a70:	defffb04 	addi	sp,sp,-20
81104a74:	de00012e 	bgeu	sp,et,81104a7c <ul_Transparent_Interface_TX_FIFO_Status_Read+0xc>
81104a78:	003b68fa 	trap	3
81104a7c:	dfc00415 	stw	ra,16(sp)
81104a80:	df000315 	stw	fp,12(sp)
81104a84:	df000304 	addi	fp,sp,12
81104a88:	2005883a 	mov	r2,r4
81104a8c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_TX_FIFO_USED_SPACE_VALUE_MASK | TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_TX_FIFO_FULL_STATUS_BIT_MASK;
81104a90:	0081fec4 	movi	r2,2043
81104a94:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_tx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
81104a98:	e0bfff07 	ldb	r2,-4(fp)
81104a9c:	01400884 	movi	r5,34
81104aa0:	1009883a 	mov	r4,r2
81104aa4:	11040880 	call	81104088 <TRAN_READ_REG32>
81104aa8:	1007883a 	mov	r3,r2
81104aac:	e0bffd17 	ldw	r2,-12(fp)
81104ab0:	1884703a 	and	r2,r3,r2
81104ab4:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_tx_fifo_status_value;
81104ab8:	e0bffe17 	ldw	r2,-8(fp)
	}
81104abc:	e037883a 	mov	sp,fp
81104ac0:	dfc00117 	ldw	ra,4(sp)
81104ac4:	df000017 	ldw	fp,0(sp)
81104ac8:	dec00204 	addi	sp,sp,8
81104acc:	f800283a 	ret

81104ad0 <b_Transparent_Interface_TX_FIFO_Status_Full>:

	bool b_Transparent_Interface_TX_FIFO_Status_Full(char c_SpwID){
81104ad0:	defffc04 	addi	sp,sp,-16
81104ad4:	de00012e 	bgeu	sp,et,81104adc <b_Transparent_Interface_TX_FIFO_Status_Full+0xc>
81104ad8:	003b68fa 	trap	3
81104adc:	dfc00315 	stw	ra,12(sp)
81104ae0:	df000215 	stw	fp,8(sp)
81104ae4:	df000204 	addi	fp,sp,8
81104ae8:	2005883a 	mov	r2,r4
81104aec:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_empty = FALSE;
81104af0:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK) {
81104af4:	e0bfff07 	ldb	r2,-4(fp)
81104af8:	01400884 	movi	r5,34
81104afc:	1009883a 	mov	r4,r2
81104b00:	11040880 	call	81104088 <TRAN_READ_REG32>
81104b04:	1080008c 	andi	r2,r2,2
81104b08:	10000226 	beq	r2,zero,81104b14 <b_Transparent_Interface_TX_FIFO_Status_Full+0x44>
			b_tx_fifo_empty = TRUE;
81104b0c:	00800044 	movi	r2,1
81104b10:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_empty;		
81104b14:	e0bffe17 	ldw	r2,-8(fp)
	}
81104b18:	e037883a 	mov	sp,fp
81104b1c:	dfc00117 	ldw	ra,4(sp)
81104b20:	df000017 	ldw	fp,0(sp)
81104b24:	dec00204 	addi	sp,sp,8
81104b28:	f800283a 	ret

81104b2c <b_Transparent_Interface_TX_FIFO_Status_Empty>:
	
	bool b_Transparent_Interface_TX_FIFO_Status_Empty(char c_SpwID){
81104b2c:	defffc04 	addi	sp,sp,-16
81104b30:	de00012e 	bgeu	sp,et,81104b38 <b_Transparent_Interface_TX_FIFO_Status_Empty+0xc>
81104b34:	003b68fa 	trap	3
81104b38:	dfc00315 	stw	ra,12(sp)
81104b3c:	df000215 	stw	fp,8(sp)
81104b40:	df000204 	addi	fp,sp,8
81104b44:	2005883a 	mov	r2,r4
81104b48:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_full = FALSE;
81104b4c:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_FULL_STATUS_BIT_MASK) {
81104b50:	e0bfff07 	ldb	r2,-4(fp)
81104b54:	01400884 	movi	r5,34
81104b58:	1009883a 	mov	r4,r2
81104b5c:	11040880 	call	81104088 <TRAN_READ_REG32>
81104b60:	1080004c 	andi	r2,r2,1
81104b64:	10000226 	beq	r2,zero,81104b70 <b_Transparent_Interface_TX_FIFO_Status_Empty+0x44>
			b_tx_fifo_full = TRUE;
81104b68:	00800044 	movi	r2,1
81104b6c:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_full;
81104b70:	e0bffe17 	ldw	r2,-8(fp)
	}
81104b74:	e037883a 	mov	sp,fp
81104b78:	dfc00117 	ldw	ra,4(sp)
81104b7c:	df000017 	ldw	fp,0(sp)
81104b80:	dec00204 	addi	sp,sp,8
81104b84:	f800283a 	ret

81104b88 <uc_Transparent_Interface_TX_FIFO_Status_Used>:
	
	alt_u8 uc_Transparent_Interface_TX_FIFO_Status_Used(char c_SpwID){
81104b88:	defffc04 	addi	sp,sp,-16
81104b8c:	de00012e 	bgeu	sp,et,81104b94 <uc_Transparent_Interface_TX_FIFO_Status_Used+0xc>
81104b90:	003b68fa 	trap	3
81104b94:	dfc00315 	stw	ra,12(sp)
81104b98:	df000215 	stw	fp,8(sp)
81104b9c:	df000204 	addi	fp,sp,8
81104ba0:	2005883a 	mov	r2,r4
81104ba4:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_tx_fifo_used = 0;
81104ba8:	e03ffe05 	stb	zero,-8(fp)
		
		uc_tx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
81104bac:	e0bfff07 	ldb	r2,-4(fp)
81104bb0:	01400884 	movi	r5,34
81104bb4:	1009883a 	mov	r4,r2
81104bb8:	11040880 	call	81104088 <TRAN_READ_REG32>
81104bbc:	1081fe0c 	andi	r2,r2,2040
81104bc0:	1004d0fa 	srli	r2,r2,3
81104bc4:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_tx_fifo_used;
81104bc8:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104bcc:	e037883a 	mov	sp,fp
81104bd0:	dfc00117 	ldw	ra,4(sp)
81104bd4:	df000017 	ldw	fp,0(sp)
81104bd8:	dec00204 	addi	sp,sp,8
81104bdc:	f800283a 	ret

81104be0 <b_Transparent_Interface_Switch_Channel>:
	
	bool b_Transparent_Interface_Switch_Channel(char c_SpwID){
81104be0:	defffb04 	addi	sp,sp,-20
81104be4:	de00012e 	bgeu	sp,et,81104bec <b_Transparent_Interface_Switch_Channel+0xc>
81104be8:	003b68fa 	trap	3
81104bec:	dfc00415 	stw	ra,16(sp)
81104bf0:	df000315 	stw	fp,12(sp)
81104bf4:	df000304 	addi	fp,sp,12
81104bf8:	2005883a 	mov	r2,r4
81104bfc:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess;
		alt_u32 *pTranAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
81104c00:	00a04834 	movhi	r2,33056
81104c04:	10903204 	addi	r2,r2,16584
81104c08:	e0bffe15 	stw	r2,-8(fp)

		  bSuccess = TRUE;
81104c0c:	00800044 	movi	r2,1
81104c10:	e0bffd15 	stw	r2,-12(fp)
		  switch (c_SpwID) {
81104c14:	e0bfff07 	ldb	r2,-4(fp)
81104c18:	10bfefc4 	addi	r2,r2,-65
81104c1c:	10c00228 	cmpgeui	r3,r2,8
81104c20:	18004d1e 	bne	r3,zero,81104d58 <b_Transparent_Interface_Switch_Channel+0x178>
81104c24:	100690ba 	slli	r3,r2,2
81104c28:	00a04434 	movhi	r2,33040
81104c2c:	10930f04 	addi	r2,r2,19516
81104c30:	1885883a 	add	r2,r3,r2
81104c34:	10800017 	ldw	r2,0(r2)
81104c38:	1000683a 	jmp	r2
81104c3c:	81104c5c 	xori	r4,r16,16689
81104c40:	81104c7c 	xorhi	r4,r16,16689
81104c44:	81104c9c 	xori	r4,r16,16690
81104c48:	81104cbc 	xorhi	r4,r16,16690
81104c4c:	81104cdc 	xori	r4,r16,16691
81104c50:	81104cfc 	xorhi	r4,r16,16691
81104c54:	81104d1c 	xori	r4,r16,16692
81104c58:	81104d3c 	xorhi	r4,r16,16692
			  case 'A':
				*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_A_CHANNEL_WINDOWED_OFFSET);
81104c5c:	e0bffe17 	ldw	r2,-8(fp)
81104c60:	00f80034 	movhi	r3,57344
81104c64:	10c00015 	stw	r3,0(r2)
				*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_A_CHANNEL_WINDOWED_OFFSET) >> 32);
81104c68:	e0bffe17 	ldw	r2,-8(fp)
81104c6c:	10800104 	addi	r2,r2,4
81104c70:	00c00044 	movi	r3,1
81104c74:	10c00015 	stw	r3,0(r2)
			  break;
81104c78:	00003b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'B':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_B_CHANNEL_WINDOWED_OFFSET);
81104c7c:	e0bffe17 	ldw	r2,-8(fp)
81104c80:	00f00034 	movhi	r3,49152
81104c84:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_B_CHANNEL_WINDOWED_OFFSET) >> 32);
81104c88:	e0bffe17 	ldw	r2,-8(fp)
81104c8c:	10800104 	addi	r2,r2,4
81104c90:	00c00044 	movi	r3,1
81104c94:	10c00015 	stw	r3,0(r2)
				  break;
81104c98:	00003306 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'C':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_C_CHANNEL_WINDOWED_OFFSET);
81104c9c:	e0bffe17 	ldw	r2,-8(fp)
81104ca0:	00e80034 	movhi	r3,40960
81104ca4:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_C_CHANNEL_WINDOWED_OFFSET) >> 32);
81104ca8:	e0bffe17 	ldw	r2,-8(fp)
81104cac:	10800104 	addi	r2,r2,4
81104cb0:	00c00044 	movi	r3,1
81104cb4:	10c00015 	stw	r3,0(r2)
				  break;
81104cb8:	00002b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'D':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_E_CHANNEL_WINDOWED_OFFSET);
81104cbc:	e0bffe17 	ldw	r2,-8(fp)
81104cc0:	00d80034 	movhi	r3,24576
81104cc4:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_E_CHANNEL_WINDOWED_OFFSET) >> 32);
81104cc8:	e0bffe17 	ldw	r2,-8(fp)
81104ccc:	10800104 	addi	r2,r2,4
81104cd0:	00c00044 	movi	r3,1
81104cd4:	10c00015 	stw	r3,0(r2)
				  break;
81104cd8:	00002306 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'E':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_D_CHANNEL_WINDOWED_OFFSET);
81104cdc:	e0bffe17 	ldw	r2,-8(fp)
81104ce0:	00e00034 	movhi	r3,32768
81104ce4:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_D_CHANNEL_WINDOWED_OFFSET) >> 32);
81104ce8:	e0bffe17 	ldw	r2,-8(fp)
81104cec:	10800104 	addi	r2,r2,4
81104cf0:	00c00044 	movi	r3,1
81104cf4:	10c00015 	stw	r3,0(r2)
				  break;
81104cf8:	00001b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'F':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_F_CHANNEL_WINDOWED_OFFSET);
81104cfc:	e0bffe17 	ldw	r2,-8(fp)
81104d00:	00d00034 	movhi	r3,16384
81104d04:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_F_CHANNEL_WINDOWED_OFFSET) >> 32);
81104d08:	e0bffe17 	ldw	r2,-8(fp)
81104d0c:	10800104 	addi	r2,r2,4
81104d10:	00c00044 	movi	r3,1
81104d14:	10c00015 	stw	r3,0(r2)
				  break;
81104d18:	00001306 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'G':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_G_CHANNEL_WINDOWED_OFFSET);
81104d1c:	e0bffe17 	ldw	r2,-8(fp)
81104d20:	00c80034 	movhi	r3,8192
81104d24:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_G_CHANNEL_WINDOWED_OFFSET) >> 32);
81104d28:	e0bffe17 	ldw	r2,-8(fp)
81104d2c:	10800104 	addi	r2,r2,4
81104d30:	00c00044 	movi	r3,1
81104d34:	10c00015 	stw	r3,0(r2)
				  break;
81104d38:	00000b06 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  case 'H':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_H_CHANNEL_WINDOWED_OFFSET);
81104d3c:	e0bffe17 	ldw	r2,-8(fp)
81104d40:	10000015 	stw	zero,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_H_CHANNEL_WINDOWED_OFFSET) >> 32);
81104d44:	e0bffe17 	ldw	r2,-8(fp)
81104d48:	10800104 	addi	r2,r2,4
81104d4c:	00c00044 	movi	r3,1
81104d50:	10c00015 	stw	r3,0(r2)
				  break;
81104d54:	00000406 	br	81104d68 <b_Transparent_Interface_Switch_Channel+0x188>
			  default:
				  bSuccess = FALSE;
81104d58:	e03ffd15 	stw	zero,-12(fp)
				  printf("SpW Channel not identified!! Error switching channels!! \n");
81104d5c:	01204534 	movhi	r4,33044
81104d60:	2124c604 	addi	r4,r4,-27880
81104d64:	110ed240 	call	8110ed24 <puts>
		  }

		  return bSuccess;
81104d68:	e0bffd17 	ldw	r2,-12(fp)
	}
81104d6c:	e037883a 	mov	sp,fp
81104d70:	dfc00117 	ldw	ra,4(sp)
81104d74:	df000017 	ldw	fp,0(sp)
81104d78:	dec00204 	addi	sp,sp,8
81104d7c:	f800283a 	ret

81104d80 <b_Transparent_Interface_Send_SpaceWire_Data>:


	bool b_Transparent_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81104d80:	defff704 	addi	sp,sp,-36
81104d84:	de00012e 	bgeu	sp,et,81104d8c <b_Transparent_Interface_Send_SpaceWire_Data+0xc>
81104d88:	003b68fa 	trap	3
81104d8c:	dfc00815 	stw	ra,32(sp)
81104d90:	df000715 	stw	fp,28(sp)
81104d94:	df000704 	addi	fp,sp,28
81104d98:	2007883a 	mov	r3,r4
81104d9c:	e17ffe15 	stw	r5,-8(fp)
81104da0:	3005883a 	mov	r2,r6
81104da4:	e0fffd05 	stb	r3,-12(fp)
81104da8:	e0bfff0d 	sth	r2,-4(fp)
		
		bool bSuccess = FALSE;
81104dac:	e03ff915 	stw	zero,-28(fp)
		
		alt_u32 *memory_location = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
81104db0:	e03ffb15 	stw	zero,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104db4:	e17ffb17 	ldw	r5,-20(fp)
81104db8:	01204534 	movhi	r4,33044
81104dbc:	2124d504 	addi	r4,r4,-27820
81104dc0:	110ebf80 	call	8110ebf8 <printf>
		memory_location += (TRAN_BURST_REGISTERS_OFFSET + TRAN_TX_REGISTER_OFFSET)*2;
81104dc4:	e0bffb17 	ldw	r2,-20(fp)
81104dc8:	10804204 	addi	r2,r2,264
81104dcc:	e0bffb15 	stw	r2,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104dd0:	e17ffb17 	ldw	r5,-20(fp)
81104dd4:	01204534 	movhi	r4,33044
81104dd8:	2124d504 	addi	r4,r4,-27820
81104ddc:	110ebf80 	call	8110ebf8 <printf>

		alt_u16 cnt = 0;
81104de0:	e03ffa0d 	sth	zero,-24(fp)
		alt_u8 resto = 0;
81104de4:	e03ffc05 	stb	zero,-16(fp)
		
		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104de8:	e0bffd07 	ldb	r2,-12(fp)
81104dec:	10801050 	cmplti	r2,r2,65
81104df0:	1000081e 	bne	r2,zero,81104e14 <b_Transparent_Interface_Send_SpaceWire_Data+0x94>
81104df4:	e0bffd07 	ldb	r2,-12(fp)
81104df8:	10801248 	cmpgei	r2,r2,73
81104dfc:	1000051e 	bne	r2,zero,81104e14 <b_Transparent_Interface_Send_SpaceWire_Data+0x94>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104e00:	e0bffd07 	ldb	r2,-12(fp)
81104e04:	1009883a 	mov	r4,r2
81104e08:	1104be00 	call	81104be0 <b_Transparent_Interface_Switch_Channel>
			bSuccess          = TRUE;
81104e0c:	00800044 	movi	r2,1
81104e10:	e0bff915 	stw	r2,-28(fp)
		}

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
81104e14:	e0bff917 	ldw	r2,-28(fp)
81104e18:	10002626 	beq	r2,zero,81104eb4 <b_Transparent_Interface_Send_SpaceWire_Data+0x134>
81104e1c:	e0bffd07 	ldb	r2,-12(fp)
81104e20:	1009883a 	mov	r4,r2
81104e24:	1104b880 	call	81104b88 <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104e28:	10803fcc 	andi	r2,r2,255
81104e2c:	00c04004 	movi	r3,256
81104e30:	1887c83a 	sub	r3,r3,r2
81104e34:	e0bfff0b 	ldhu	r2,-4(fp)
81104e38:	1004d0ba 	srli	r2,r2,2
81104e3c:	10bfffcc 	andi	r2,r2,65535
81104e40:	10800044 	addi	r2,r2,1
81104e44:	18801b16 	blt	r3,r2,81104eb4 <b_Transparent_Interface_Send_SpaceWire_Data+0x134>
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104e48:	e03ffa0d 	sth	zero,-24(fp)
81104e4c:	00000b06 	br	81104e7c <b_Transparent_Interface_Send_SpaceWire_Data+0xfc>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
81104e50:	e0bffa0b 	ldhu	r2,-24(fp)
81104e54:	e0fffe17 	ldw	r3,-8(fp)
81104e58:	1885883a 	add	r2,r3,r2
81104e5c:	10800003 	ldbu	r2,0(r2)
81104e60:	10803fcc 	andi	r2,r2,255
81104e64:	10fffff4 	orhi	r3,r2,65535
81104e68:	e0bffb17 	ldw	r2,-20(fp)
81104e6c:	10c00015 	stw	r3,0(r2)

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104e70:	e0bffa0b 	ldhu	r2,-24(fp)
81104e74:	10800044 	addi	r2,r2,1
81104e78:	e0bffa0d 	sth	r2,-24(fp)
81104e7c:	e0fffa0b 	ldhu	r3,-24(fp)
81104e80:	e0bfff0b 	ldhu	r2,-4(fp)
81104e84:	18bff236 	bltu	r3,r2,81104e50 <__reset+0xfb0e4e50>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
			}
			/* Append an EOP to the end of the data in the Channel Memory Location */
			*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | 0x0100 | (alt_u16)data_buffer[data_size]);
81104e88:	e0bfff0b 	ldhu	r2,-4(fp)
81104e8c:	e0fffe17 	ldw	r3,-8(fp)
81104e90:	1885883a 	add	r2,r3,r2
81104e94:	10800003 	ldbu	r2,0(r2)
81104e98:	10c03fcc 	andi	r3,r2,255
81104e9c:	00bffff4 	movhi	r2,65535
81104ea0:	10804004 	addi	r2,r2,256
81104ea4:	1886b03a 	or	r3,r3,r2
81104ea8:	e0bffb17 	ldw	r2,-20(fp)
81104eac:	10c00015 	stw	r3,0(r2)
81104eb0:	00000106 	br	81104eb8 <b_Transparent_Interface_Send_SpaceWire_Data+0x138>
			
		} else {
			bSuccess = FALSE;
81104eb4:	e03ff915 	stw	zero,-28(fp)
		}
		
		return bSuccess;
81104eb8:	e0bff917 	ldw	r2,-28(fp)
	}
81104ebc:	e037883a 	mov	sp,fp
81104ec0:	dfc00117 	ldw	ra,4(sp)
81104ec4:	df000017 	ldw	fp,0(sp)
81104ec8:	dec00204 	addi	sp,sp,8
81104ecc:	f800283a 	ret

81104ed0 <ui_Transparent_Interface_Get_SpaceWire_Data>:
	
	alt_u16 ui_Transparent_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer){
81104ed0:	deffeb04 	addi	sp,sp,-84
81104ed4:	de00012e 	bgeu	sp,et,81104edc <ui_Transparent_Interface_Get_SpaceWire_Data+0xc>
81104ed8:	003b68fa 	trap	3
81104edc:	dfc01415 	stw	ra,80(sp)
81104ee0:	df001315 	stw	fp,76(sp)
81104ee4:	ddc01215 	stw	r23,72(sp)
81104ee8:	dd801115 	stw	r22,68(sp)
81104eec:	dd401015 	stw	r21,64(sp)
81104ef0:	dd000f15 	stw	r20,60(sp)
81104ef4:	dcc00e15 	stw	r19,56(sp)
81104ef8:	dc800d15 	stw	r18,52(sp)
81104efc:	dc400c15 	stw	r17,48(sp)
81104f00:	dc000b15 	stw	r16,44(sp)
81104f04:	df001304 	addi	fp,sp,76
81104f08:	2005883a 	mov	r2,r4
81104f0c:	e17ff515 	stw	r5,-44(fp)
81104f10:	e0bff405 	stb	r2,-48(fp)
		
		alt_u16 ui_rx_data_size = 0;
81104f14:	e03fed0d 	sth	zero,-76(fp)
		
		alt_u64 *memory_location = 0;
81104f18:	e03fef15 	stw	zero,-68(fp)
		memory_location += TRAN_BURST_REGISTERS_OFFSET + TRAN_RX_REGISTER_OFFSET;
81104f1c:	e0bfef17 	ldw	r2,-68(fp)
81104f20:	10804004 	addi	r2,r2,256
81104f24:	e0bfef15 	stw	r2,-68(fp)

		alt_u16 cnt = 0;
81104f28:	e03fed8d 	sth	zero,-74(fp)
		alt_u16 rx_buffer_data_size = 0;
81104f2c:	e03fee0d 	sth	zero,-72(fp)
		alt_u64 rx_data = 0;
81104f30:	e03ff015 	stw	zero,-64(fp)
81104f34:	e03ff115 	stw	zero,-60(fp)
		alt_u16 rx_data_buffer[4] = {0,0,0,0};
81104f38:	e03ff20d 	sth	zero,-56(fp)
81104f3c:	e03ff28d 	sth	zero,-54(fp)
81104f40:	e03ff30d 	sth	zero,-52(fp)
81104f44:	e03ff38d 	sth	zero,-50(fp)

		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104f48:	e0bff407 	ldb	r2,-48(fp)
81104f4c:	10801050 	cmplti	r2,r2,65
81104f50:	1000081e 	bne	r2,zero,81104f74 <ui_Transparent_Interface_Get_SpaceWire_Data+0xa4>
81104f54:	e0bff407 	ldb	r2,-48(fp)
81104f58:	10801248 	cmpgei	r2,r2,73
81104f5c:	1000051e 	bne	r2,zero,81104f74 <ui_Transparent_Interface_Get_SpaceWire_Data+0xa4>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104f60:	e0bff407 	ldb	r2,-48(fp)
81104f64:	1009883a 	mov	r4,r2
81104f68:	1104be00 	call	81104be0 <b_Transparent_Interface_Switch_Channel>
			rx_buffer_data_size = 0xFFFF;
81104f6c:	00bfffc4 	movi	r2,-1
81104f70:	e0bfee0d 	sth	r2,-72(fp)
		}
		
		if (0xFFFF == rx_buffer_data_size) {
81104f74:	e0ffee0b 	ldhu	r3,-72(fp)
81104f78:	00bfffd4 	movui	r2,65535
81104f7c:	1880711e 	bne	r3,r2,81105144 <ui_Transparent_Interface_Get_SpaceWire_Data+0x274>
			/* Check the amount of data in the RX Buffer*/
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
81104f80:	e0bff407 	ldb	r2,-48(fp)
81104f84:	1009883a 	mov	r4,r2
81104f88:	1104b880 	call	81104b88 <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104f8c:	10803fcc 	andi	r2,r2,255
81104f90:	e0bfee0d 	sth	r2,-72(fp)
			if (rx_buffer_data_size > 0) {
81104f94:	e0bfee0b 	ldhu	r2,-72(fp)
81104f98:	10006826 	beq	r2,zero,8110513c <ui_Transparent_Interface_Get_SpaceWire_Data+0x26c>
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81104f9c:	e03fed8d 	sth	zero,-74(fp)
81104fa0:	00006206 	br	8110512c <ui_Transparent_Interface_Get_SpaceWire_Data+0x25c>

					rx_data = *memory_location;
81104fa4:	e0bfef17 	ldw	r2,-68(fp)
81104fa8:	10c00017 	ldw	r3,0(r2)
81104fac:	e0fff015 	stw	r3,-64(fp)
81104fb0:	10800117 	ldw	r2,4(r2)
81104fb4:	e0bff115 	stw	r2,-60(fp)

					rx_data_buffer[0] = (alt_u16)(0x000000000000FFFF & rx_data);
81104fb8:	e0bff017 	ldw	r2,-64(fp)
81104fbc:	e0bff20d 	sth	r2,-56(fp)
					rx_data_buffer[1] = (alt_u16)((0x00000000FFFF0000 & rx_data) >> 16);
81104fc0:	e0bff017 	ldw	r2,-64(fp)
81104fc4:	143fffec 	andhi	r16,r2,65535
81104fc8:	e0bff117 	ldw	r2,-60(fp)
81104fcc:	1022703a 	and	r17,r2,zero
81104fd0:	8804943a 	slli	r2,r17,16
81104fd4:	8024d43a 	srli	r18,r16,16
81104fd8:	14a4b03a 	or	r18,r2,r18
81104fdc:	8826d43a 	srli	r19,r17,16
81104fe0:	9005883a 	mov	r2,r18
81104fe4:	e0bff28d 	sth	r2,-54(fp)
					rx_data_buffer[2] = (alt_u16)((0x0000FFFF00000000 & rx_data) >> 32);
81104fe8:	e0bff017 	ldw	r2,-64(fp)
81104fec:	1028703a 	and	r20,r2,zero
81104ff0:	e0bff117 	ldw	r2,-60(fp)
81104ff4:	157fffcc 	andi	r21,r2,65535
81104ff8:	a82cd83a 	srl	r22,r21,zero
81104ffc:	002f883a 	mov	r23,zero
81105000:	b005883a 	mov	r2,r22
81105004:	e0bff30d 	sth	r2,-52(fp)
					rx_data_buffer[3] = (alt_u16)((0xFFFF000000000000 & rx_data) >> 48);
81105008:	e0bff117 	ldw	r2,-60(fp)
8110500c:	1004d43a 	srli	r2,r2,16
81105010:	e0bff615 	stw	r2,-40(fp)
81105014:	e03ff715 	stw	zero,-36(fp)
81105018:	e0bff60b 	ldhu	r2,-40(fp)
8110501c:	e0bff38d 	sth	r2,-50(fp)

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[0] & 0x0100) || (rx_data_buffer[0] == 0xFFFF))) {
81105020:	e0bff20b 	ldhu	r2,-56(fp)
81105024:	10bfffcc 	andi	r2,r2,65535
81105028:	1080400c 	andi	r2,r2,256
8110502c:	10000c1e 	bne	r2,zero,81105060 <ui_Transparent_Interface_Get_SpaceWire_Data+0x190>
81105030:	e0bff20b 	ldhu	r2,-56(fp)
81105034:	10ffffcc 	andi	r3,r2,65535
81105038:	00bfffd4 	movui	r2,65535
8110503c:	18800826 	beq	r3,r2,81105060 <ui_Transparent_Interface_Get_SpaceWire_Data+0x190>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[0]);
81105040:	e0bfed0b 	ldhu	r2,-76(fp)
81105044:	e0fff517 	ldw	r3,-44(fp)
81105048:	1885883a 	add	r2,r3,r2
8110504c:	e0fff20b 	ldhu	r3,-56(fp)
81105050:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105054:	e0bfed0b 	ldhu	r2,-76(fp)
81105058:	10800044 	addi	r2,r2,1
8110505c:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[1] & 0x0100) || (rx_data_buffer[1] == 0xFFFF))) {
81105060:	e0bff28b 	ldhu	r2,-54(fp)
81105064:	10bfffcc 	andi	r2,r2,65535
81105068:	1080400c 	andi	r2,r2,256
8110506c:	10000c1e 	bne	r2,zero,811050a0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1d0>
81105070:	e0bff28b 	ldhu	r2,-54(fp)
81105074:	10ffffcc 	andi	r3,r2,65535
81105078:	00bfffd4 	movui	r2,65535
8110507c:	18800826 	beq	r3,r2,811050a0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1d0>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[1]);
81105080:	e0bfed0b 	ldhu	r2,-76(fp)
81105084:	e0fff517 	ldw	r3,-44(fp)
81105088:	1885883a 	add	r2,r3,r2
8110508c:	e0fff28b 	ldhu	r3,-54(fp)
81105090:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105094:	e0bfed0b 	ldhu	r2,-76(fp)
81105098:	10800044 	addi	r2,r2,1
8110509c:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[2] & 0x0100) || (rx_data_buffer[2] == 0xFFFF))) {
811050a0:	e0bff30b 	ldhu	r2,-52(fp)
811050a4:	10bfffcc 	andi	r2,r2,65535
811050a8:	1080400c 	andi	r2,r2,256
811050ac:	10000c1e 	bne	r2,zero,811050e0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x210>
811050b0:	e0bff30b 	ldhu	r2,-52(fp)
811050b4:	10ffffcc 	andi	r3,r2,65535
811050b8:	00bfffd4 	movui	r2,65535
811050bc:	18800826 	beq	r3,r2,811050e0 <ui_Transparent_Interface_Get_SpaceWire_Data+0x210>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[2]);
811050c0:	e0bfed0b 	ldhu	r2,-76(fp)
811050c4:	e0fff517 	ldw	r3,-44(fp)
811050c8:	1885883a 	add	r2,r3,r2
811050cc:	e0fff30b 	ldhu	r3,-52(fp)
811050d0:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
811050d4:	e0bfed0b 	ldhu	r2,-76(fp)
811050d8:	10800044 	addi	r2,r2,1
811050dc:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[3] & 0x0100) || (rx_data_buffer[3] == 0xFFFF))) {
811050e0:	e0bff38b 	ldhu	r2,-50(fp)
811050e4:	10bfffcc 	andi	r2,r2,65535
811050e8:	1080400c 	andi	r2,r2,256
811050ec:	10000c1e 	bne	r2,zero,81105120 <ui_Transparent_Interface_Get_SpaceWire_Data+0x250>
811050f0:	e0bff38b 	ldhu	r2,-50(fp)
811050f4:	10ffffcc 	andi	r3,r2,65535
811050f8:	00bfffd4 	movui	r2,65535
811050fc:	18800826 	beq	r3,r2,81105120 <ui_Transparent_Interface_Get_SpaceWire_Data+0x250>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[3]);
81105100:	e0bfed0b 	ldhu	r2,-76(fp)
81105104:	e0fff517 	ldw	r3,-44(fp)
81105108:	1885883a 	add	r2,r3,r2
8110510c:	e0fff38b 	ldhu	r3,-50(fp)
81105110:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81105114:	e0bfed0b 	ldhu	r2,-76(fp)
81105118:	10800044 	addi	r2,r2,1
8110511c:	e0bfed0d 	sth	r2,-76(fp)
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
			if (rx_buffer_data_size > 0) {
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81105120:	e0bfed8b 	ldhu	r2,-74(fp)
81105124:	10800044 	addi	r2,r2,1
81105128:	e0bfed8d 	sth	r2,-74(fp)
8110512c:	e0ffed8b 	ldhu	r3,-74(fp)
81105130:	e0bfee0b 	ldhu	r2,-72(fp)
81105134:	18bf9b36 	bltu	r3,r2,81104fa4 <__reset+0xfb0e4fa4>
81105138:	00000306 	br	81105148 <ui_Transparent_Interface_Get_SpaceWire_Data+0x278>
						ui_rx_data_size++;
					}

				}
			} else {
				ui_rx_data_size = 0;
8110513c:	e03fed0d 	sth	zero,-76(fp)
81105140:	00000106 	br	81105148 <ui_Transparent_Interface_Get_SpaceWire_Data+0x278>
			}
		} else {
			ui_rx_data_size = 0;
81105144:	e03fed0d 	sth	zero,-76(fp)
		}
	
		return ui_rx_data_size;
81105148:	e0bfed0b 	ldhu	r2,-76(fp)
	}
8110514c:	e6fff804 	addi	sp,fp,-32
81105150:	dfc00917 	ldw	ra,36(sp)
81105154:	df000817 	ldw	fp,32(sp)
81105158:	ddc00717 	ldw	r23,28(sp)
8110515c:	dd800617 	ldw	r22,24(sp)
81105160:	dd400517 	ldw	r21,20(sp)
81105164:	dd000417 	ldw	r20,16(sp)
81105168:	dcc00317 	ldw	r19,12(sp)
8110516c:	dc800217 	ldw	r18,8(sp)
81105170:	dc400117 	ldw	r17,4(sp)
81105174:	dc000017 	ldw	r16,0(sp)
81105178:	dec00a04 	addi	sp,sp,40
8110517c:	f800283a 	ret

81105180 <vEthHoldReset>:
 */

#include "eth.h"

void vEthHoldReset(void)
{
81105180:	defffe04 	addi	sp,sp,-8
81105184:	de00012e 	bgeu	sp,et,8110518c <vEthHoldReset+0xc>
81105188:	003b68fa 	trap	3
8110518c:	df000115 	stw	fp,4(sp)
81105190:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
81105194:	00a00034 	movhi	r2,32768
81105198:	10813404 	addi	r2,r2,1232
8110519c:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000000;
811051a0:	e0bfff17 	ldw	r2,-4(fp)
811051a4:	10000015 	stw	zero,0(r2)
}
811051a8:	0001883a 	nop
811051ac:	e037883a 	mov	sp,fp
811051b0:	df000017 	ldw	fp,0(sp)
811051b4:	dec00104 	addi	sp,sp,4
811051b8:	f800283a 	ret

811051bc <vEthReleaseReset>:

void vEthReleaseReset(void)
{
811051bc:	defffe04 	addi	sp,sp,-8
811051c0:	de00012e 	bgeu	sp,et,811051c8 <vEthReleaseReset+0xc>
811051c4:	003b68fa 	trap	3
811051c8:	df000115 	stw	fp,4(sp)
811051cc:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
811051d0:	00a00034 	movhi	r2,32768
811051d4:	10813404 	addi	r2,r2,1232
811051d8:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000001;
811051dc:	e0bfff17 	ldw	r2,-4(fp)
811051e0:	00c00044 	movi	r3,1
811051e4:	10c00015 	stw	r3,0(r2)
}
811051e8:	0001883a 	nop
811051ec:	e037883a 	mov	sp,fp
811051f0:	df000017 	ldw	fp,0(sp)
811051f4:	dec00104 	addi	sp,sp,4
811051f8:	f800283a 	ret

811051fc <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
811051fc:	defffa04 	addi	sp,sp,-24
81105200:	de00012e 	bgeu	sp,et,81105208 <I2C_TestAdress+0xc>
81105204:	003b68fa 	trap	3
81105208:	dfc00515 	stw	ra,20(sp)
8110520c:	df000415 	stw	fp,16(sp)
81105210:	df000404 	addi	fp,sp,16
81105214:	e13ffd15 	stw	r4,-12(fp)
81105218:	e17ffe15 	stw	r5,-8(fp)
8110521c:	3005883a 	mov	r2,r6
81105220:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105224:	00800044 	movi	r2,1
81105228:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110522c:	e17ffe17 	ldw	r5,-8(fp)
81105230:	e13ffd17 	ldw	r4,-12(fp)
81105234:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105238:	e0bfff03 	ldbu	r2,-4(fp)
8110523c:	10803fcc 	andi	r2,r2,255
81105240:	100d883a 	mov	r6,r2
81105244:	e17ffe17 	ldw	r5,-8(fp)
81105248:	e13ffd17 	ldw	r4,-12(fp)
8110524c:	11056e00 	call	811056e0 <i2c_write>
81105250:	1000011e 	bne	r2,zero,81105258 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
81105254:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105258:	e17ffe17 	ldw	r5,-8(fp)
8110525c:	e13ffd17 	ldw	r4,-12(fp)
81105260:	11056600 	call	81105660 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105264:	0106d604 	movi	r4,7000
81105268:	1123c880 	call	81123c88 <usleep>
    
    return bSuccess;
8110526c:	e0bffc17 	ldw	r2,-16(fp)

}
81105270:	e037883a 	mov	sp,fp
81105274:	dfc00117 	ldw	ra,4(sp)
81105278:	df000017 	ldw	fp,0(sp)
8110527c:	dec00204 	addi	sp,sp,8
81105280:	f800283a 	ret

81105284 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105284:	defff804 	addi	sp,sp,-32
81105288:	de00012e 	bgeu	sp,et,81105290 <I2C_Write+0xc>
8110528c:	003b68fa 	trap	3
81105290:	dfc00715 	stw	ra,28(sp)
81105294:	df000615 	stw	fp,24(sp)
81105298:	df000604 	addi	fp,sp,24
8110529c:	e13ffb15 	stw	r4,-20(fp)
811052a0:	e17ffc15 	stw	r5,-16(fp)
811052a4:	3009883a 	mov	r4,r6
811052a8:	3807883a 	mov	r3,r7
811052ac:	e0800217 	ldw	r2,8(fp)
811052b0:	e13ffd05 	stb	r4,-12(fp)
811052b4:	e0fffe05 	stb	r3,-8(fp)
811052b8:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
811052bc:	00800044 	movi	r2,1
811052c0:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811052c4:	e17ffc17 	ldw	r5,-16(fp)
811052c8:	e13ffb17 	ldw	r4,-20(fp)
811052cc:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811052d0:	e0bffd03 	ldbu	r2,-12(fp)
811052d4:	10803fcc 	andi	r2,r2,255
811052d8:	100d883a 	mov	r6,r2
811052dc:	e17ffc17 	ldw	r5,-16(fp)
811052e0:	e13ffb17 	ldw	r4,-20(fp)
811052e4:	11056e00 	call	811056e0 <i2c_write>
811052e8:	1000011e 	bne	r2,zero,811052f0 <I2C_Write+0x6c>
        bSuccess = FALSE;
811052ec:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811052f0:	e0bffa17 	ldw	r2,-24(fp)
811052f4:	10000726 	beq	r2,zero,81105314 <I2C_Write+0x90>
811052f8:	e0bffe03 	ldbu	r2,-8(fp)
811052fc:	100d883a 	mov	r6,r2
81105300:	e17ffc17 	ldw	r5,-16(fp)
81105304:	e13ffb17 	ldw	r4,-20(fp)
81105308:	11056e00 	call	811056e0 <i2c_write>
8110530c:	1000011e 	bne	r2,zero,81105314 <I2C_Write+0x90>
        bSuccess = FALSE;
81105310:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105314:	e0bffa17 	ldw	r2,-24(fp)
81105318:	10000726 	beq	r2,zero,81105338 <I2C_Write+0xb4>
8110531c:	e0bfff03 	ldbu	r2,-4(fp)
81105320:	100d883a 	mov	r6,r2
81105324:	e17ffc17 	ldw	r5,-16(fp)
81105328:	e13ffb17 	ldw	r4,-20(fp)
8110532c:	11056e00 	call	811056e0 <i2c_write>
81105330:	1000011e 	bne	r2,zero,81105338 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105334:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105338:	e17ffc17 	ldw	r5,-16(fp)
8110533c:	e13ffb17 	ldw	r4,-20(fp)
81105340:	11056600 	call	81105660 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105344:	0106d604 	movi	r4,7000
81105348:	1123c880 	call	81123c88 <usleep>
    
    return bSuccess;
8110534c:	e0bffa17 	ldw	r2,-24(fp)

}
81105350:	e037883a 	mov	sp,fp
81105354:	dfc00117 	ldw	ra,4(sp)
81105358:	df000017 	ldw	fp,0(sp)
8110535c:	dec00204 	addi	sp,sp,8
81105360:	f800283a 	ret

81105364 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105364:	defff904 	addi	sp,sp,-28
81105368:	de00012e 	bgeu	sp,et,81105370 <I2C_Read+0xc>
8110536c:	003b68fa 	trap	3
81105370:	dfc00615 	stw	ra,24(sp)
81105374:	df000515 	stw	fp,20(sp)
81105378:	df000504 	addi	fp,sp,20
8110537c:	e13ffc15 	stw	r4,-16(fp)
81105380:	e17ffd15 	stw	r5,-12(fp)
81105384:	3007883a 	mov	r3,r6
81105388:	3805883a 	mov	r2,r7
8110538c:	e0fffe05 	stb	r3,-8(fp)
81105390:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105394:	00800044 	movi	r2,1
81105398:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
8110539c:	e17ffd17 	ldw	r5,-12(fp)
811053a0:	e13ffc17 	ldw	r4,-16(fp)
811053a4:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811053a8:	e0bffe03 	ldbu	r2,-8(fp)
811053ac:	10803fcc 	andi	r2,r2,255
811053b0:	100d883a 	mov	r6,r2
811053b4:	e17ffd17 	ldw	r5,-12(fp)
811053b8:	e13ffc17 	ldw	r4,-16(fp)
811053bc:	11056e00 	call	811056e0 <i2c_write>
811053c0:	1000011e 	bne	r2,zero,811053c8 <I2C_Read+0x64>
        bSuccess = FALSE;
811053c4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811053c8:	e0bffb17 	ldw	r2,-20(fp)
811053cc:	10000726 	beq	r2,zero,811053ec <I2C_Read+0x88>
811053d0:	e0bfff03 	ldbu	r2,-4(fp)
811053d4:	100d883a 	mov	r6,r2
811053d8:	e17ffd17 	ldw	r5,-12(fp)
811053dc:	e13ffc17 	ldw	r4,-16(fp)
811053e0:	11056e00 	call	811056e0 <i2c_write>
811053e4:	1000011e 	bne	r2,zero,811053ec <I2C_Read+0x88>
        bSuccess = FALSE;
811053e8:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
811053ec:	e17ffd17 	ldw	r5,-12(fp)
811053f0:	e13ffc17 	ldw	r4,-16(fp)
811053f4:	11055cc0 	call	811055cc <i2c_start>
    DeviceAddr |= 1; // Read
811053f8:	e0bffe03 	ldbu	r2,-8(fp)
811053fc:	10800054 	ori	r2,r2,1
81105400:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105404:	e0bffb17 	ldw	r2,-20(fp)
81105408:	10000826 	beq	r2,zero,8110542c <I2C_Read+0xc8>
8110540c:	e0bffe03 	ldbu	r2,-8(fp)
81105410:	10803fcc 	andi	r2,r2,255
81105414:	100d883a 	mov	r6,r2
81105418:	e17ffd17 	ldw	r5,-12(fp)
8110541c:	e13ffc17 	ldw	r4,-16(fp)
81105420:	11056e00 	call	811056e0 <i2c_write>
81105424:	1000011e 	bne	r2,zero,8110542c <I2C_Read+0xc8>
        bSuccess = FALSE;
81105428:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
8110542c:	e0bffb17 	ldw	r2,-20(fp)
81105430:	10000526 	beq	r2,zero,81105448 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105434:	000f883a 	mov	r7,zero
81105438:	e1800217 	ldw	r6,8(fp)
8110543c:	e17ffd17 	ldw	r5,-12(fp)
81105440:	e13ffc17 	ldw	r4,-16(fp)
81105444:	11058180 	call	81105818 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105448:	e17ffd17 	ldw	r5,-12(fp)
8110544c:	e13ffc17 	ldw	r4,-16(fp)
81105450:	11056600 	call	81105660 <i2c_stop>
    
    return bSuccess;
81105454:	e0bffb17 	ldw	r2,-20(fp)
}
81105458:	e037883a 	mov	sp,fp
8110545c:	dfc00117 	ldw	ra,4(sp)
81105460:	df000017 	ldw	fp,0(sp)
81105464:	dec00204 	addi	sp,sp,8
81105468:	f800283a 	ret

8110546c <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
8110546c:	defff604 	addi	sp,sp,-40
81105470:	de00012e 	bgeu	sp,et,81105478 <I2C_MultipleRead+0xc>
81105474:	003b68fa 	trap	3
81105478:	dfc00915 	stw	ra,36(sp)
8110547c:	df000815 	stw	fp,32(sp)
81105480:	df000804 	addi	fp,sp,32
81105484:	e13ffb15 	stw	r4,-20(fp)
81105488:	e17ffc15 	stw	r5,-16(fp)
8110548c:	3007883a 	mov	r3,r6
81105490:	e1fffe15 	stw	r7,-8(fp)
81105494:	e0800217 	ldw	r2,8(fp)
81105498:	e0fffd05 	stb	r3,-12(fp)
8110549c:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
811054a0:	00800044 	movi	r2,1
811054a4:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
811054a8:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
811054ac:	e17ffc17 	ldw	r5,-16(fp)
811054b0:	e13ffb17 	ldw	r4,-20(fp)
811054b4:	11055cc0 	call	811055cc <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
811054b8:	e0bffd03 	ldbu	r2,-12(fp)
811054bc:	10803fcc 	andi	r2,r2,255
811054c0:	100d883a 	mov	r6,r2
811054c4:	e17ffc17 	ldw	r5,-16(fp)
811054c8:	e13ffb17 	ldw	r4,-20(fp)
811054cc:	11056e00 	call	811056e0 <i2c_write>
811054d0:	1000011e 	bne	r2,zero,811054d8 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
811054d4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811054d8:	e0bff917 	ldw	r2,-28(fp)
811054dc:	10000726 	beq	r2,zero,811054fc <I2C_MultipleRead+0x90>
811054e0:	e0bffa03 	ldbu	r2,-24(fp)
811054e4:	100d883a 	mov	r6,r2
811054e8:	e17ffc17 	ldw	r5,-16(fp)
811054ec:	e13ffb17 	ldw	r4,-20(fp)
811054f0:	11056e00 	call	811056e0 <i2c_write>
811054f4:	1000011e 	bne	r2,zero,811054fc <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
811054f8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
811054fc:	e0bff917 	ldw	r2,-28(fp)
81105500:	10000326 	beq	r2,zero,81105510 <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105504:	e17ffc17 	ldw	r5,-16(fp)
81105508:	e13ffb17 	ldw	r4,-20(fp)
8110550c:	11055cc0 	call	811055cc <i2c_start>
    DeviceAddr |= 1; // Read
81105510:	e0bffd03 	ldbu	r2,-12(fp)
81105514:	10800054 	ori	r2,r2,1
81105518:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
8110551c:	e0bff917 	ldw	r2,-28(fp)
81105520:	10000826 	beq	r2,zero,81105544 <I2C_MultipleRead+0xd8>
81105524:	e0bffd03 	ldbu	r2,-12(fp)
81105528:	10803fcc 	andi	r2,r2,255
8110552c:	100d883a 	mov	r6,r2
81105530:	e17ffc17 	ldw	r5,-16(fp)
81105534:	e13ffb17 	ldw	r4,-20(fp)
81105538:	11056e00 	call	811056e0 <i2c_write>
8110553c:	1000011e 	bne	r2,zero,81105544 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105540:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105544:	e0bff917 	ldw	r2,-28(fp)
81105548:	10001726 	beq	r2,zero,811055a8 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
8110554c:	e03ff815 	stw	zero,-32(fp)
81105550:	00001006 	br	81105594 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105554:	e0bff817 	ldw	r2,-32(fp)
81105558:	e0fffe17 	ldw	r3,-8(fp)
8110555c:	1889883a 	add	r4,r3,r2
81105560:	e0bfff0b 	ldhu	r2,-4(fp)
81105564:	10ffffc4 	addi	r3,r2,-1
81105568:	e0bff817 	ldw	r2,-32(fp)
8110556c:	1884c03a 	cmpne	r2,r3,r2
81105570:	10803fcc 	andi	r2,r2,255
81105574:	100f883a 	mov	r7,r2
81105578:	200d883a 	mov	r6,r4
8110557c:	e17ffc17 	ldw	r5,-16(fp)
81105580:	e13ffb17 	ldw	r4,-20(fp)
81105584:	11058180 	call	81105818 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105588:	e0bff817 	ldw	r2,-32(fp)
8110558c:	10800044 	addi	r2,r2,1
81105590:	e0bff815 	stw	r2,-32(fp)
81105594:	e0bfff0b 	ldhu	r2,-4(fp)
81105598:	e0fff817 	ldw	r3,-32(fp)
8110559c:	1880020e 	bge	r3,r2,811055a8 <I2C_MultipleRead+0x13c>
811055a0:	e0bff917 	ldw	r2,-28(fp)
811055a4:	103feb1e 	bne	r2,zero,81105554 <__reset+0xfb0e5554>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
811055a8:	e17ffc17 	ldw	r5,-16(fp)
811055ac:	e13ffb17 	ldw	r4,-20(fp)
811055b0:	11056600 	call	81105660 <i2c_stop>
    
    return bSuccess;    
811055b4:	e0bff917 	ldw	r2,-28(fp)
    
}
811055b8:	e037883a 	mov	sp,fp
811055bc:	dfc00117 	ldw	ra,4(sp)
811055c0:	df000017 	ldw	fp,0(sp)
811055c4:	dec00204 	addi	sp,sp,8
811055c8:	f800283a 	ret

811055cc <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
811055cc:	defffc04 	addi	sp,sp,-16
811055d0:	de00012e 	bgeu	sp,et,811055d8 <i2c_start+0xc>
811055d4:	003b68fa 	trap	3
811055d8:	dfc00315 	stw	ra,12(sp)
811055dc:	df000215 	stw	fp,8(sp)
811055e0:	df000204 	addi	fp,sp,8
811055e4:	e13ffe15 	stw	r4,-8(fp)
811055e8:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
811055ec:	e0bfff17 	ldw	r2,-4(fp)
811055f0:	10800104 	addi	r2,r2,4
811055f4:	1007883a 	mov	r3,r2
811055f8:	00800044 	movi	r2,1
811055fc:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105600:	e0bfff17 	ldw	r2,-4(fp)
81105604:	00c00044 	movi	r3,1
81105608:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
8110560c:	e0bffe17 	ldw	r2,-8(fp)
81105610:	00c00044 	movi	r3,1
81105614:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105618:	01000044 	movi	r4,1
8110561c:	1123c880 	call	81123c88 <usleep>
     
    SDA_LOW(data_base); // data low
81105620:	e0bfff17 	ldw	r2,-4(fp)
81105624:	0007883a 	mov	r3,zero
81105628:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
8110562c:	01000044 	movi	r4,1
81105630:	1123c880 	call	81123c88 <usleep>
    SCL_LOW(clk_base); // clock low
81105634:	e0bffe17 	ldw	r2,-8(fp)
81105638:	0007883a 	mov	r3,zero
8110563c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105640:	01000044 	movi	r4,1
81105644:	1123c880 	call	81123c88 <usleep>
}
81105648:	0001883a 	nop
8110564c:	e037883a 	mov	sp,fp
81105650:	dfc00117 	ldw	ra,4(sp)
81105654:	df000017 	ldw	fp,0(sp)
81105658:	dec00204 	addi	sp,sp,8
8110565c:	f800283a 	ret

81105660 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105660:	defffc04 	addi	sp,sp,-16
81105664:	de00012e 	bgeu	sp,et,8110566c <i2c_stop+0xc>
81105668:	003b68fa 	trap	3
8110566c:	dfc00315 	stw	ra,12(sp)
81105670:	df000215 	stw	fp,8(sp)
81105674:	df000204 	addi	fp,sp,8
81105678:	e13ffe15 	stw	r4,-8(fp)
8110567c:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105680:	e0bfff17 	ldw	r2,-4(fp)
81105684:	10800104 	addi	r2,r2,4
81105688:	1007883a 	mov	r3,r2
8110568c:	00800044 	movi	r2,1
81105690:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105694:	e0bfff17 	ldw	r2,-4(fp)
81105698:	0007883a 	mov	r3,zero
8110569c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
811056a0:	e0bffe17 	ldw	r2,-8(fp)
811056a4:	00c00044 	movi	r3,1
811056a8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
811056ac:	01000044 	movi	r4,1
811056b0:	1123c880 	call	81123c88 <usleep>
    SDA_HIGH(data_base); // data high
811056b4:	e0bfff17 	ldw	r2,-4(fp)
811056b8:	00c00044 	movi	r3,1
811056bc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
811056c0:	01000044 	movi	r4,1
811056c4:	1123c880 	call	81123c88 <usleep>
    

    
}
811056c8:	0001883a 	nop
811056cc:	e037883a 	mov	sp,fp
811056d0:	dfc00117 	ldw	ra,4(sp)
811056d4:	df000017 	ldw	fp,0(sp)
811056d8:	dec00204 	addi	sp,sp,8
811056dc:	f800283a 	ret

811056e0 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
811056e0:	defff804 	addi	sp,sp,-32
811056e4:	de00012e 	bgeu	sp,et,811056ec <i2c_write+0xc>
811056e8:	003b68fa 	trap	3
811056ec:	dfc00715 	stw	ra,28(sp)
811056f0:	df000615 	stw	fp,24(sp)
811056f4:	df000604 	addi	fp,sp,24
811056f8:	e13ffd15 	stw	r4,-12(fp)
811056fc:	e17ffe15 	stw	r5,-8(fp)
81105700:	3005883a 	mov	r2,r6
81105704:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105708:	00bfe004 	movi	r2,-128
8110570c:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105710:	e0bffe17 	ldw	r2,-8(fp)
81105714:	10800104 	addi	r2,r2,4
81105718:	1007883a 	mov	r3,r2
8110571c:	00800044 	movi	r2,1
81105720:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105724:	e03ffb15 	stw	zero,-20(fp)
81105728:	00001f06 	br	811057a8 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
8110572c:	e0bffd17 	ldw	r2,-12(fp)
81105730:	0007883a 	mov	r3,zero
81105734:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105738:	e0ffff03 	ldbu	r3,-4(fp)
8110573c:	e0bffa03 	ldbu	r2,-24(fp)
81105740:	1884703a 	and	r2,r3,r2
81105744:	10803fcc 	andi	r2,r2,255
81105748:	10000426 	beq	r2,zero,8110575c <i2c_write+0x7c>
            SDA_HIGH(data_base);
8110574c:	e0bffe17 	ldw	r2,-8(fp)
81105750:	00c00044 	movi	r3,1
81105754:	10c00035 	stwio	r3,0(r2)
81105758:	00000306 	br	81105768 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
8110575c:	e0bffe17 	ldw	r2,-8(fp)
81105760:	0007883a 	mov	r3,zero
81105764:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105768:	e0bffa03 	ldbu	r2,-24(fp)
8110576c:	1004d07a 	srli	r2,r2,1
81105770:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105774:	e0bffd17 	ldw	r2,-12(fp)
81105778:	00c00044 	movi	r3,1
8110577c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105780:	01000044 	movi	r4,1
81105784:	1123c880 	call	81123c88 <usleep>
        SCL_LOW(clk_base);
81105788:	e0bffd17 	ldw	r2,-12(fp)
8110578c:	0007883a 	mov	r3,zero
81105790:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105794:	01000044 	movi	r4,1
81105798:	1123c880 	call	81123c88 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
8110579c:	e0bffb17 	ldw	r2,-20(fp)
811057a0:	10800044 	addi	r2,r2,1
811057a4:	e0bffb15 	stw	r2,-20(fp)
811057a8:	e0bffb17 	ldw	r2,-20(fp)
811057ac:	10800210 	cmplti	r2,r2,8
811057b0:	103fde1e 	bne	r2,zero,8110572c <__reset+0xfb0e572c>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
811057b4:	e0bffe17 	ldw	r2,-8(fp)
811057b8:	10800104 	addi	r2,r2,4
811057bc:	0007883a 	mov	r3,zero
811057c0:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
811057c4:	e0bffd17 	ldw	r2,-12(fp)
811057c8:	00c00044 	movi	r3,1
811057cc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
811057d0:	01000044 	movi	r4,1
811057d4:	1123c880 	call	81123c88 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
811057d8:	e0bffe17 	ldw	r2,-8(fp)
811057dc:	10800037 	ldwio	r2,0(r2)
811057e0:	1005003a 	cmpeq	r2,r2,zero
811057e4:	10803fcc 	andi	r2,r2,255
811057e8:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
811057ec:	e0bffd17 	ldw	r2,-12(fp)
811057f0:	0007883a 	mov	r3,zero
811057f4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811057f8:	01000044 	movi	r4,1
811057fc:	1123c880 	call	81123c88 <usleep>
    return bAck;
81105800:	e0bffc17 	ldw	r2,-16(fp)
}    
81105804:	e037883a 	mov	sp,fp
81105808:	dfc00117 	ldw	ra,4(sp)
8110580c:	df000017 	ldw	fp,0(sp)
81105810:	dec00204 	addi	sp,sp,8
81105814:	f800283a 	ret

81105818 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105818:	defff804 	addi	sp,sp,-32
8110581c:	de00012e 	bgeu	sp,et,81105824 <i2c_read+0xc>
81105820:	003b68fa 	trap	3
81105824:	dfc00715 	stw	ra,28(sp)
81105828:	df000615 	stw	fp,24(sp)
8110582c:	df000604 	addi	fp,sp,24
81105830:	e13ffc15 	stw	r4,-16(fp)
81105834:	e17ffd15 	stw	r5,-12(fp)
81105838:	e1bffe15 	stw	r6,-8(fp)
8110583c:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105840:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105844:	e0bffd17 	ldw	r2,-12(fp)
81105848:	10800104 	addi	r2,r2,4
8110584c:	0007883a 	mov	r3,zero
81105850:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105854:	e0bffc17 	ldw	r2,-16(fp)
81105858:	0007883a 	mov	r3,zero
8110585c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105860:	01000044 	movi	r4,1
81105864:	1123c880 	call	81123c88 <usleep>

    for(i=0;i<8;i++){
81105868:	e03ffb15 	stw	zero,-20(fp)
8110586c:	00001606 	br	811058c8 <i2c_read+0xb0>
        Data <<= 1;
81105870:	e0bffa03 	ldbu	r2,-24(fp)
81105874:	1085883a 	add	r2,r2,r2
81105878:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
8110587c:	e0bffc17 	ldw	r2,-16(fp)
81105880:	00c00044 	movi	r3,1
81105884:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105888:	01000044 	movi	r4,1
8110588c:	1123c880 	call	81123c88 <usleep>
        if (SDA_READ(data_base))  // read data   
81105890:	e0bffd17 	ldw	r2,-12(fp)
81105894:	10800037 	ldwio	r2,0(r2)
81105898:	10000326 	beq	r2,zero,811058a8 <i2c_read+0x90>
            Data |= 0x01;
8110589c:	e0bffa03 	ldbu	r2,-24(fp)
811058a0:	10800054 	ori	r2,r2,1
811058a4:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
811058a8:	e0bffc17 	ldw	r2,-16(fp)
811058ac:	0007883a 	mov	r3,zero
811058b0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
811058b4:	01000044 	movi	r4,1
811058b8:	1123c880 	call	81123c88 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
811058bc:	e0bffb17 	ldw	r2,-20(fp)
811058c0:	10800044 	addi	r2,r2,1
811058c4:	e0bffb15 	stw	r2,-20(fp)
811058c8:	e0bffb17 	ldw	r2,-20(fp)
811058cc:	10800210 	cmplti	r2,r2,8
811058d0:	103fe71e 	bne	r2,zero,81105870 <__reset+0xfb0e5870>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
811058d4:	e0bffc17 	ldw	r2,-16(fp)
811058d8:	0007883a 	mov	r3,zero
811058dc:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
811058e0:	e0bffd17 	ldw	r2,-12(fp)
811058e4:	10800104 	addi	r2,r2,4
811058e8:	1007883a 	mov	r3,r2
811058ec:	00800044 	movi	r2,1
811058f0:	18800035 	stwio	r2,0(r3)
    if (bAck)
811058f4:	e0bfff17 	ldw	r2,-4(fp)
811058f8:	10000426 	beq	r2,zero,8110590c <i2c_read+0xf4>
        SDA_LOW(data_base);
811058fc:	e0bffd17 	ldw	r2,-12(fp)
81105900:	0007883a 	mov	r3,zero
81105904:	10c00035 	stwio	r3,0(r2)
81105908:	00000306 	br	81105918 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
8110590c:	e0bffd17 	ldw	r2,-12(fp)
81105910:	00c00044 	movi	r3,1
81105914:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81105918:	e0bffc17 	ldw	r2,-16(fp)
8110591c:	00c00044 	movi	r3,1
81105920:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81105924:	01000044 	movi	r4,1
81105928:	1123c880 	call	81123c88 <usleep>
    SCL_LOW(clk_base); // clock low
8110592c:	e0bffc17 	ldw	r2,-16(fp)
81105930:	0007883a 	mov	r3,zero
81105934:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105938:	01000044 	movi	r4,1
8110593c:	1123c880 	call	81123c88 <usleep>
    SDA_LOW(data_base);  // data low
81105940:	e0bffd17 	ldw	r2,-12(fp)
81105944:	0007883a 	mov	r3,zero
81105948:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
8110594c:	01000044 	movi	r4,1
81105950:	1123c880 	call	81123c88 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
81105954:	e0bffe17 	ldw	r2,-8(fp)
81105958:	e0fffa03 	ldbu	r3,-24(fp)
8110595c:	10c00005 	stb	r3,0(r2)
}
81105960:	0001883a 	nop
81105964:	e037883a 	mov	sp,fp
81105968:	dfc00117 	ldw	ra,4(sp)
8110596c:	df000017 	ldw	fp,0(sp)
81105970:	dec00204 	addi	sp,sp,8
81105974:	f800283a 	ret

81105978 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
81105978:	defffd04 	addi	sp,sp,-12
8110597c:	de00012e 	bgeu	sp,et,81105984 <bSetBoardLeds+0xc>
81105980:	003b68fa 	trap	3
81105984:	df000215 	stw	fp,8(sp)
81105988:	df000204 	addi	fp,sp,8
8110598c:	e13ffe15 	stw	r4,-8(fp)
81105990:	2805883a 	mov	r2,r5
81105994:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81105998:	e0bffe17 	ldw	r2,-8(fp)
8110599c:	10800058 	cmpnei	r2,r2,1
811059a0:	1000071e 	bne	r2,zero,811059c0 <bSetBoardLeds+0x48>
	  LedsBoardControl &= (~LedsMask);
811059a4:	e0bfff03 	ldbu	r2,-4(fp)
811059a8:	0084303a 	nor	r2,zero,r2
811059ac:	1007883a 	mov	r3,r2
811059b0:	d0a05003 	ldbu	r2,-32448(gp)
811059b4:	1884703a 	and	r2,r3,r2
811059b8:	d0a05005 	stb	r2,-32448(gp)
811059bc:	00000406 	br	811059d0 <bSetBoardLeds+0x58>
  } else {
	  LedsBoardControl |= LedsMask;
811059c0:	d0e05003 	ldbu	r3,-32448(gp)
811059c4:	e0bfff03 	ldbu	r2,-4(fp)
811059c8:	1884b03a 	or	r2,r3,r2
811059cc:	d0a05005 	stb	r2,-32448(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
811059d0:	d0a05003 	ldbu	r2,-32448(gp)
811059d4:	10c03fcc 	andi	r3,r2,255
811059d8:	00a00034 	movhi	r2,32768
811059dc:	10816c04 	addi	r2,r2,1456
811059e0:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811059e4:	00800044 	movi	r2,1
}
811059e8:	e037883a 	mov	sp,fp
811059ec:	df000017 	ldw	fp,0(sp)
811059f0:	dec00104 	addi	sp,sp,4
811059f4:	f800283a 	ret

811059f8 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
811059f8:	defffd04 	addi	sp,sp,-12
811059fc:	de00012e 	bgeu	sp,et,81105a04 <bSetPainelLeds+0xc>
81105a00:	003b68fa 	trap	3
81105a04:	df000215 	stw	fp,8(sp)
81105a08:	df000204 	addi	fp,sp,8
81105a0c:	e13ffe15 	stw	r4,-8(fp)
81105a10:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81105a14:	e0bffe17 	ldw	r2,-8(fp)
81105a18:	10800058 	cmpnei	r2,r2,1
81105a1c:	1000051e 	bne	r2,zero,81105a34 <bSetPainelLeds+0x3c>
	  LedsPainelControl |= LedsMask;
81105a20:	d0e05117 	ldw	r3,-32444(gp)
81105a24:	e0bfff17 	ldw	r2,-4(fp)
81105a28:	1884b03a 	or	r2,r3,r2
81105a2c:	d0a05115 	stw	r2,-32444(gp)
81105a30:	00000506 	br	81105a48 <bSetPainelLeds+0x50>
  } else {
	  LedsPainelControl &= (~LedsMask);
81105a34:	e0bfff17 	ldw	r2,-4(fp)
81105a38:	0086303a 	nor	r3,zero,r2
81105a3c:	d0a05117 	ldw	r2,-32444(gp)
81105a40:	1884703a 	and	r2,r3,r2
81105a44:	d0a05115 	stw	r2,-32444(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
81105a48:	d0a05117 	ldw	r2,-32444(gp)
81105a4c:	1007883a 	mov	r3,r2
81105a50:	00a00034 	movhi	r2,32768
81105a54:	10813804 	addi	r2,r2,1248
81105a58:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81105a5c:	00800044 	movi	r2,1
}
81105a60:	e037883a 	mov	sp,fp
81105a64:	df000017 	ldw	fp,0(sp)
81105a68:	dec00104 	addi	sp,sp,4
81105a6c:	f800283a 	ret

81105a70 <PGEN_WRITE_REG32>:
 */

	#include "pgen.h"


	void PGEN_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81105a70:	defffc04 	addi	sp,sp,-16
81105a74:	de00012e 	bgeu	sp,et,81105a7c <PGEN_WRITE_REG32+0xc>
81105a78:	003b68fa 	trap	3
81105a7c:	df000315 	stw	fp,12(sp)
81105a80:	df000304 	addi	fp,sp,12
81105a84:	2005883a 	mov	r2,r4
81105a88:	e17fff15 	stw	r5,-4(fp)
81105a8c:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81105a90:	00a04834 	movhi	r2,33056
81105a94:	108f0004 	addi	r2,r2,15360
81105a98:	e0bffd15 	stw	r2,-12(fp)
		*(pPgenAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81105a9c:	e0bffe03 	ldbu	r2,-8(fp)
81105aa0:	1085883a 	add	r2,r2,r2
81105aa4:	1085883a 	add	r2,r2,r2
81105aa8:	1007883a 	mov	r3,r2
81105aac:	e0bffd17 	ldw	r2,-12(fp)
81105ab0:	10c5883a 	add	r2,r2,r3
81105ab4:	e0ffff17 	ldw	r3,-4(fp)
81105ab8:	10c00015 	stw	r3,0(r2)
	}
81105abc:	0001883a 	nop
81105ac0:	e037883a 	mov	sp,fp
81105ac4:	df000017 	ldw	fp,0(sp)
81105ac8:	dec00104 	addi	sp,sp,4
81105acc:	f800283a 	ret

81105ad0 <PGEN_READ_REG32>:

	alt_u32 PGEN_READ_REG32(alt_u8 uc_RegisterAddress){
81105ad0:	defffc04 	addi	sp,sp,-16
81105ad4:	de00012e 	bgeu	sp,et,81105adc <PGEN_READ_REG32+0xc>
81105ad8:	003b68fa 	trap	3
81105adc:	df000315 	stw	fp,12(sp)
81105ae0:	df000304 	addi	fp,sp,12
81105ae4:	2005883a 	mov	r2,r4
81105ae8:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81105aec:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81105af0:	00a04834 	movhi	r2,33056
81105af4:	108f0004 	addi	r2,r2,15360
81105af8:	e0bffe15 	stw	r2,-8(fp)
		RegisterValue = *(pPgenAddr + (alt_u32)uc_RegisterAddress);
81105afc:	e0bfff03 	ldbu	r2,-4(fp)
81105b00:	1085883a 	add	r2,r2,r2
81105b04:	1085883a 	add	r2,r2,r2
81105b08:	1007883a 	mov	r3,r2
81105b0c:	e0bffe17 	ldw	r2,-8(fp)
81105b10:	10c5883a 	add	r2,r2,r3
81105b14:	10800017 	ldw	r2,0(r2)
81105b18:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81105b1c:	e0bffd17 	ldw	r2,-12(fp)
	}
81105b20:	e037883a 	mov	sp,fp
81105b24:	df000017 	ldw	fp,0(sp)
81105b28:	dec00104 	addi	sp,sp,4
81105b2c:	f800283a 	ret

81105b30 <b_Pattern_Generator_Write_Register>:

	bool b_Pattern_Generator_Write_Register(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81105b30:	defffb04 	addi	sp,sp,-20
81105b34:	de00012e 	bgeu	sp,et,81105b3c <b_Pattern_Generator_Write_Register+0xc>
81105b38:	003b68fa 	trap	3
81105b3c:	dfc00415 	stw	ra,16(sp)
81105b40:	df000315 	stw	fp,12(sp)
81105b44:	df000304 	addi	fp,sp,12
81105b48:	2005883a 	mov	r2,r4
81105b4c:	e17fff15 	stw	r5,-4(fp)
81105b50:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81105b54:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x01) {
81105b58:	e0bffe03 	ldbu	r2,-8(fp)
81105b5c:	108000a8 	cmpgeui	r2,r2,2
81105b60:	1000061e 	bne	r2,zero,81105b7c <b_Pattern_Generator_Write_Register+0x4c>
			PGEN_WRITE_REG32(uc_RegisterAddress, ul_RegisterValue);
81105b64:	e0bffe03 	ldbu	r2,-8(fp)
81105b68:	e17fff17 	ldw	r5,-4(fp)
81105b6c:	1009883a 	mov	r4,r2
81105b70:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81105b74:	00800044 	movi	r2,1
81105b78:	e0bffd15 	stw	r2,-12(fp)
		}

		return bSuccess;
81105b7c:	e0bffd17 	ldw	r2,-12(fp)
	}
81105b80:	e037883a 	mov	sp,fp
81105b84:	dfc00117 	ldw	ra,4(sp)
81105b88:	df000017 	ldw	fp,0(sp)
81105b8c:	dec00204 	addi	sp,sp,8
81105b90:	f800283a 	ret

81105b94 <ul_Pattern_Generator_Read_Register>:

	alt_u32 ul_Pattern_Generator_Read_Register(alt_u8 uc_RegisterAddress){
81105b94:	defffc04 	addi	sp,sp,-16
81105b98:	de00012e 	bgeu	sp,et,81105ba0 <ul_Pattern_Generator_Read_Register+0xc>
81105b9c:	003b68fa 	trap	3
81105ba0:	dfc00315 	stw	ra,12(sp)
81105ba4:	df000215 	stw	fp,8(sp)
81105ba8:	df000204 	addi	fp,sp,8
81105bac:	2005883a 	mov	r2,r4
81105bb0:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81105bb4:	e03ffe15 	stw	zero,-8(fp)

		if (uc_RegisterAddress <= 0x01) {
81105bb8:	e0bfff03 	ldbu	r2,-4(fp)
81105bbc:	108000a8 	cmpgeui	r2,r2,2
81105bc0:	1000041e 	bne	r2,zero,81105bd4 <ul_Pattern_Generator_Read_Register+0x40>
			ul_RegisterValue = PGEN_READ_REG32(uc_RegisterAddress);
81105bc4:	e0bfff03 	ldbu	r2,-4(fp)
81105bc8:	1009883a 	mov	r4,r2
81105bcc:	1105ad00 	call	81105ad0 <PGEN_READ_REG32>
81105bd0:	e0bffe15 	stw	r2,-8(fp)
		}

		return ul_RegisterValue;
81105bd4:	e0bffe17 	ldw	r2,-8(fp)
	}
81105bd8:	e037883a 	mov	sp,fp
81105bdc:	dfc00117 	ldw	ra,4(sp)
81105be0:	df000017 	ldw	fp,0(sp)
81105be4:	dec00204 	addi	sp,sp,8
81105be8:	f800283a 	ret

81105bec <v_Pattern_Generator_Start>:

	void v_Pattern_Generator_Start(void){
81105bec:	defffe04 	addi	sp,sp,-8
81105bf0:	de00012e 	bgeu	sp,et,81105bf8 <v_Pattern_Generator_Start+0xc>
81105bf4:	003b68fa 	trap	3
81105bf8:	dfc00115 	stw	ra,4(sp)
81105bfc:	df000015 	stw	fp,0(sp)
81105c00:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_START_CONTROL_BIT_MASK);
81105c04:	01400404 	movi	r5,16
81105c08:	0009883a 	mov	r4,zero
81105c0c:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>

	}
81105c10:	0001883a 	nop
81105c14:	e037883a 	mov	sp,fp
81105c18:	dfc00117 	ldw	ra,4(sp)
81105c1c:	df000017 	ldw	fp,0(sp)
81105c20:	dec00204 	addi	sp,sp,8
81105c24:	f800283a 	ret

81105c28 <v_Pattern_Generator_Stop>:

	void v_Pattern_Generator_Stop(void){
81105c28:	defffe04 	addi	sp,sp,-8
81105c2c:	de00012e 	bgeu	sp,et,81105c34 <v_Pattern_Generator_Stop+0xc>
81105c30:	003b68fa 	trap	3
81105c34:	dfc00115 	stw	ra,4(sp)
81105c38:	df000015 	stw	fp,0(sp)
81105c3c:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_STOP_CONTROL_BIT_MASK);
81105c40:	01400204 	movi	r5,8
81105c44:	0009883a 	mov	r4,zero
81105c48:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>

	}
81105c4c:	0001883a 	nop
81105c50:	e037883a 	mov	sp,fp
81105c54:	dfc00117 	ldw	ra,4(sp)
81105c58:	df000017 	ldw	fp,0(sp)
81105c5c:	dec00204 	addi	sp,sp,8
81105c60:	f800283a 	ret

81105c64 <v_Pattern_Generator_Reset>:

	void v_Pattern_Generator_Reset(void){
81105c64:	defffe04 	addi	sp,sp,-8
81105c68:	de00012e 	bgeu	sp,et,81105c70 <v_Pattern_Generator_Reset+0xc>
81105c6c:	003b68fa 	trap	3
81105c70:	dfc00115 	stw	ra,4(sp)
81105c74:	df000015 	stw	fp,0(sp)
81105c78:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_RESET_CONTROL_BIT_MASK);
81105c7c:	01400104 	movi	r5,4
81105c80:	0009883a 	mov	r4,zero
81105c84:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>

	}
81105c88:	0001883a 	nop
81105c8c:	e037883a 	mov	sp,fp
81105c90:	dfc00117 	ldw	ra,4(sp)
81105c94:	df000017 	ldw	fp,0(sp)
81105c98:	dec00204 	addi	sp,sp,8
81105c9c:	f800283a 	ret

81105ca0 <Pattern_Generator_Status>:

	alt_u32 Pattern_Generator_Status(void){
81105ca0:	defffc04 	addi	sp,sp,-16
81105ca4:	de00012e 	bgeu	sp,et,81105cac <Pattern_Generator_Status+0xc>
81105ca8:	003b68fa 	trap	3
81105cac:	dfc00315 	stw	ra,12(sp)
81105cb0:	df000215 	stw	fp,8(sp)
81105cb4:	df000204 	addi	fp,sp,8

		const alt_u32 ul_pgen_mask = PGEN_RESETED_STATUS_BIT_MASK | PGEN_STOPPED_STATUS_BIT_MASK;
81105cb8:	008000c4 	movi	r2,3
81105cbc:	e0bffe15 	stw	r2,-8(fp)
		alt_u32 ul_pgen_status_value = PGEN_READ_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS) & ul_pgen_mask;
81105cc0:	0009883a 	mov	r4,zero
81105cc4:	1105ad00 	call	81105ad0 <PGEN_READ_REG32>
81105cc8:	1007883a 	mov	r3,r2
81105ccc:	e0bffe17 	ldw	r2,-8(fp)
81105cd0:	1884703a 	and	r2,r3,r2
81105cd4:	e0bfff15 	stw	r2,-4(fp)

		return ul_pgen_status_value;
81105cd8:	e0bfff17 	ldw	r2,-4(fp)
	}
81105cdc:	e037883a 	mov	sp,fp
81105ce0:	dfc00117 	ldw	ra,4(sp)
81105ce4:	df000017 	ldw	fp,0(sp)
81105ce8:	dec00204 	addi	sp,sp,8
81105cec:	f800283a 	ret

81105cf0 <Pattern_Generator_Configure_Initial_State>:

	bool Pattern_Generator_Configure_Initial_State(alt_u8 uc_Initial_CCD_ID, alt_u8 uc_Initial_CCD_SIDE, alt_u8 uc_Initial_TimeCode){
81105cf0:	defff904 	addi	sp,sp,-28
81105cf4:	de00012e 	bgeu	sp,et,81105cfc <Pattern_Generator_Configure_Initial_State+0xc>
81105cf8:	003b68fa 	trap	3
81105cfc:	dfc00615 	stw	ra,24(sp)
81105d00:	df000515 	stw	fp,20(sp)
81105d04:	df000504 	addi	fp,sp,20
81105d08:	2807883a 	mov	r3,r5
81105d0c:	3005883a 	mov	r2,r6
81105d10:	e13ffd05 	stb	r4,-12(fp)
81105d14:	e0fffe05 	stb	r3,-8(fp)
81105d18:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81105d1c:	e03ffb15 	stw	zero,-20(fp)

		alt_u32 initial_state_config_value;
		if ((uc_Initial_CCD_ID < 4) && (uc_Initial_CCD_SIDE < 2)) {
81105d20:	e0bffd03 	ldbu	r2,-12(fp)
81105d24:	10800128 	cmpgeui	r2,r2,4
81105d28:	1000101e 	bne	r2,zero,81105d6c <Pattern_Generator_Configure_Initial_State+0x7c>
81105d2c:	e0bffe03 	ldbu	r2,-8(fp)
81105d30:	108000a8 	cmpgeui	r2,r2,2
81105d34:	10000d1e 	bne	r2,zero,81105d6c <Pattern_Generator_Configure_Initial_State+0x7c>
			initial_state_config_value = (((alt_u32)uc_Initial_CCD_ID) << 9) | (((alt_u32)uc_Initial_CCD_SIDE) << 8) | ((alt_u32)uc_Initial_TimeCode);
81105d38:	e0bffd03 	ldbu	r2,-12(fp)
81105d3c:	1006927a 	slli	r3,r2,9
81105d40:	e0bffe03 	ldbu	r2,-8(fp)
81105d44:	1004923a 	slli	r2,r2,8
81105d48:	1886b03a 	or	r3,r3,r2
81105d4c:	e0bfff03 	ldbu	r2,-4(fp)
81105d50:	1884b03a 	or	r2,r3,r2
81105d54:	e0bffc15 	stw	r2,-16(fp)
			PGEN_WRITE_REG32(PGEN_INITIAL_TRANSMISSION_STATE_REGISTER_ADDRESS, initial_state_config_value);
81105d58:	e17ffc17 	ldw	r5,-16(fp)
81105d5c:	01000044 	movi	r4,1
81105d60:	1105a700 	call	81105a70 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81105d64:	00800044 	movi	r2,1
81105d68:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81105d6c:	e0bffb17 	ldw	r2,-20(fp)
	}
81105d70:	e037883a 	mov	sp,fp
81105d74:	dfc00117 	ldw	ra,4(sp)
81105d78:	df000017 	ldw	fp,0(sp)
81105d7c:	dec00204 	addi	sp,sp,8
81105d80:	f800283a 	ret

81105d84 <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
81105d84:	defff204 	addi	sp,sp,-56
81105d88:	de00012e 	bgeu	sp,et,81105d90 <POWER_SPI_RW+0xc>
81105d8c:	003b68fa 	trap	3
81105d90:	dfc00d15 	stw	ra,52(sp)
81105d94:	df000c15 	stw	fp,48(sp)
81105d98:	df000c04 	addi	fp,sp,48
81105d9c:	2007883a 	mov	r3,r4
81105da0:	2805883a 	mov	r2,r5
81105da4:	e1bffe15 	stw	r6,-8(fp)
81105da8:	e1ffff15 	stw	r7,-4(fp)
81105dac:	e0fffc05 	stb	r3,-16(fp)
81105db0:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
81105db4:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
81105db8:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
81105dbc:	008003f4 	movhi	r2,15
81105dc0:	10909004 	addi	r2,r2,16960
81105dc4:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
81105dc8:	00bfe004 	movi	r2,-128
81105dcc:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
81105dd0:	e0bffe17 	ldw	r2,-8(fp)
81105dd4:	10000226 	beq	r2,zero,81105de0 <POWER_SPI_RW+0x5c>
81105dd8:	00800804 	movi	r2,32
81105ddc:	00000106 	br	81105de4 <POWER_SPI_RW+0x60>
81105de0:	0005883a 	mov	r2,zero
81105de4:	e0fff403 	ldbu	r3,-48(fp)
81105de8:	10c4b03a 	or	r2,r2,r3
81105dec:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
81105df0:	e0800217 	ldw	r2,8(fp)
81105df4:	10000226 	beq	r2,zero,81105e00 <POWER_SPI_RW+0x7c>
81105df8:	00800404 	movi	r2,16
81105dfc:	00000106 	br	81105e04 <POWER_SPI_RW+0x80>
81105e00:	0005883a 	mov	r2,zero
81105e04:	e0fff403 	ldbu	r3,-48(fp)
81105e08:	10c4b03a 	or	r2,r2,r3
81105e0c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
81105e10:	e0bfff17 	ldw	r2,-4(fp)
81105e14:	10000226 	beq	r2,zero,81105e20 <POWER_SPI_RW+0x9c>
81105e18:	00800204 	movi	r2,8
81105e1c:	00000106 	br	81105e24 <POWER_SPI_RW+0xa0>
81105e20:	0005883a 	mov	r2,zero
81105e24:	e0fff403 	ldbu	r3,-48(fp)
81105e28:	10c4b03a 	or	r2,r2,r3
81105e2c:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
81105e30:	e0bffd03 	ldbu	r2,-12(fp)
81105e34:	108001cc 	andi	r2,r2,7
81105e38:	1007883a 	mov	r3,r2
81105e3c:	e0bff403 	ldbu	r2,-48(fp)
81105e40:	1884b03a 	or	r2,r3,r2
81105e44:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
81105e48:	0007883a 	mov	r3,zero
81105e4c:	00a00034 	movhi	r2,32768
81105e50:	10813c04 	addi	r2,r2,1264
81105e54:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
81105e58:	0007883a 	mov	r3,zero
81105e5c:	00a00034 	movhi	r2,32768
81105e60:	10814404 	addi	r2,r2,1296
81105e64:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
81105e68:	e0bffc03 	ldbu	r2,-16(fp)
81105e6c:	1000021e 	bne	r2,zero,81105e78 <POWER_SPI_RW+0xf4>
81105e70:	00c00084 	movi	r3,2
81105e74:	00000106 	br	81105e7c <POWER_SPI_RW+0xf8>
81105e78:	00c00044 	movi	r3,1
81105e7c:	00a00034 	movhi	r2,32768
81105e80:	10814004 	addi	r2,r2,1280
81105e84:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105e88:	010003c4 	movi	r4,15
81105e8c:	1123c880 	call	81123c88 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105e90:	00000306 	br	81105ea0 <POWER_SPI_RW+0x11c>
        nWait++;
81105e94:	e0bff817 	ldw	r2,-32(fp)
81105e98:	10800044 	addi	r2,r2,1
81105e9c:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105ea0:	00a00034 	movhi	r2,32768
81105ea4:	10814c04 	addi	r2,r2,1328
81105ea8:	10800037 	ldwio	r2,0(r2)
81105eac:	1080004c 	andi	r2,r2,1
81105eb0:	10000326 	beq	r2,zero,81105ec0 <POWER_SPI_RW+0x13c>
81105eb4:	e0fff817 	ldw	r3,-32(fp)
81105eb8:	e0bffa17 	ldw	r2,-24(fp)
81105ebc:	18bff516 	blt	r3,r2,81105e94 <__reset+0xfb0e5e94>
        nWait++;
    }
    
    if (SPI_SDO){
81105ec0:	00a00034 	movhi	r2,32768
81105ec4:	10814c04 	addi	r2,r2,1328
81105ec8:	10800037 	ldwio	r2,0(r2)
81105ecc:	1080004c 	andi	r2,r2,1
81105ed0:	10000626 	beq	r2,zero,81105eec <POWER_SPI_RW+0x168>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
81105ed4:	00c000c4 	movi	r3,3
81105ed8:	00a00034 	movhi	r2,32768
81105edc:	10814004 	addi	r2,r2,1280
81105ee0:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
81105ee4:	0005883a 	mov	r2,zero
81105ee8:	0000db06 	br	81106258 <POWER_SPI_RW+0x4d4>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105eec:	e03ff715 	stw	zero,-36(fp)
81105ef0:	00002406 	br	81105f84 <POWER_SPI_RW+0x200>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105ef4:	e0bff403 	ldbu	r2,-48(fp)
81105ef8:	10803fcc 	andi	r2,r2,255
81105efc:	1004d1fa 	srli	r2,r2,7
81105f00:	10c03fcc 	andi	r3,r2,255
81105f04:	00a00034 	movhi	r2,32768
81105f08:	10814804 	addi	r2,r2,1312
81105f0c:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105f10:	e0bff403 	ldbu	r2,-48(fp)
81105f14:	1085883a 	add	r2,r2,r2
81105f18:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81105f1c:	e0bff517 	ldw	r2,-44(fp)
81105f20:	1085883a 	add	r2,r2,r2
81105f24:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81105f28:	00a00034 	movhi	r2,32768
81105f2c:	10814c04 	addi	r2,r2,1328
81105f30:	10800037 	ldwio	r2,0(r2)
81105f34:	1080004c 	andi	r2,r2,1
81105f38:	1007883a 	mov	r3,r2
81105f3c:	e0bff517 	ldw	r2,-44(fp)
81105f40:	10c4b03a 	or	r2,r2,r3
81105f44:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105f48:	00c00044 	movi	r3,1
81105f4c:	00a00034 	movhi	r2,32768
81105f50:	10814404 	addi	r2,r2,1296
81105f54:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105f58:	010003c4 	movi	r4,15
81105f5c:	1123c880 	call	81123c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105f60:	0007883a 	mov	r3,zero
81105f64:	00a00034 	movhi	r2,32768
81105f68:	10814404 	addi	r2,r2,1296
81105f6c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105f70:	010003c4 	movi	r4,15
81105f74:	1123c880 	call	81123c88 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105f78:	e0bff717 	ldw	r2,-36(fp)
81105f7c:	10800044 	addi	r2,r2,1
81105f80:	e0bff715 	stw	r2,-36(fp)
81105f84:	e0bff717 	ldw	r2,-36(fp)
81105f88:	10800090 	cmplti	r2,r2,2
81105f8c:	103fd91e 	bne	r2,zero,81105ef4 <__reset+0xfb0e5ef4>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81105f90:	e03ff715 	stw	zero,-36(fp)
81105f94:	00002406 	br	81106028 <POWER_SPI_RW+0x2a4>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105f98:	e0bff403 	ldbu	r2,-48(fp)
81105f9c:	10803fcc 	andi	r2,r2,255
81105fa0:	1004d1fa 	srli	r2,r2,7
81105fa4:	10c03fcc 	andi	r3,r2,255
81105fa8:	00a00034 	movhi	r2,32768
81105fac:	10814804 	addi	r2,r2,1312
81105fb0:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105fb4:	e0bff403 	ldbu	r2,-48(fp)
81105fb8:	1085883a 	add	r2,r2,r2
81105fbc:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81105fc0:	e0bff517 	ldw	r2,-44(fp)
81105fc4:	1085883a 	add	r2,r2,r2
81105fc8:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81105fcc:	00a00034 	movhi	r2,32768
81105fd0:	10814c04 	addi	r2,r2,1328
81105fd4:	10800037 	ldwio	r2,0(r2)
81105fd8:	1080004c 	andi	r2,r2,1
81105fdc:	1007883a 	mov	r3,r2
81105fe0:	e0bff517 	ldw	r2,-44(fp)
81105fe4:	10c4b03a 	or	r2,r2,r3
81105fe8:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105fec:	00c00044 	movi	r3,1
81105ff0:	00a00034 	movhi	r2,32768
81105ff4:	10814404 	addi	r2,r2,1296
81105ff8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ffc:	010003c4 	movi	r4,15
81106000:	1123c880 	call	81123c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106004:	0007883a 	mov	r3,zero
81106008:	00a00034 	movhi	r2,32768
8110600c:	10814404 	addi	r2,r2,1296
81106010:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106014:	010003c4 	movi	r4,15
81106018:	1123c880 	call	81123c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
8110601c:	e0bff717 	ldw	r2,-36(fp)
81106020:	10800044 	addi	r2,r2,1
81106024:	e0bff715 	stw	r2,-36(fp)
81106028:	e0bff717 	ldw	r2,-36(fp)
8110602c:	10800210 	cmplti	r2,r2,8
81106030:	103fd91e 	bne	r2,zero,81105f98 <__reset+0xfb0e5f98>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81106034:	e03ff715 	stw	zero,-36(fp)
81106038:	00001a06 	br	811060a4 <POWER_SPI_RW+0x320>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
8110603c:	e0bff517 	ldw	r2,-44(fp)
81106040:	1085883a 	add	r2,r2,r2
81106044:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106048:	00a00034 	movhi	r2,32768
8110604c:	10814c04 	addi	r2,r2,1328
81106050:	10800037 	ldwio	r2,0(r2)
81106054:	1080004c 	andi	r2,r2,1
81106058:	1007883a 	mov	r3,r2
8110605c:	e0bff517 	ldw	r2,-44(fp)
81106060:	10c4b03a 	or	r2,r2,r3
81106064:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81106068:	00c00044 	movi	r3,1
8110606c:	00a00034 	movhi	r2,32768
81106070:	10814404 	addi	r2,r2,1296
81106074:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106078:	010003c4 	movi	r4,15
8110607c:	1123c880 	call	81123c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106080:	0007883a 	mov	r3,zero
81106084:	00a00034 	movhi	r2,32768
81106088:	10814404 	addi	r2,r2,1296
8110608c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106090:	010003c4 	movi	r4,15
81106094:	1123c880 	call	81123c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81106098:	e0bff717 	ldw	r2,-36(fp)
8110609c:	10800044 	addi	r2,r2,1
811060a0:	e0bff715 	stw	r2,-36(fp)
811060a4:	e0bff717 	ldw	r2,-36(fp)
811060a8:	10800210 	cmplti	r2,r2,8
811060ac:	103fe31e 	bne	r2,zero,8110603c <__reset+0xfb0e603c>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
811060b0:	e03ff715 	stw	zero,-36(fp)
811060b4:	00001a06 	br	81106120 <POWER_SPI_RW+0x39c>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
811060b8:	e0bff517 	ldw	r2,-44(fp)
811060bc:	1085883a 	add	r2,r2,r2
811060c0:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
811060c4:	00a00034 	movhi	r2,32768
811060c8:	10814c04 	addi	r2,r2,1328
811060cc:	10800037 	ldwio	r2,0(r2)
811060d0:	1080004c 	andi	r2,r2,1
811060d4:	1007883a 	mov	r3,r2
811060d8:	e0bff517 	ldw	r2,-44(fp)
811060dc:	10c4b03a 	or	r2,r2,r3
811060e0:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
811060e4:	00c00044 	movi	r3,1
811060e8:	00a00034 	movhi	r2,32768
811060ec:	10814404 	addi	r2,r2,1296
811060f0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811060f4:	010003c4 	movi	r4,15
811060f8:	1123c880 	call	81123c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811060fc:	0007883a 	mov	r3,zero
81106100:	00a00034 	movhi	r2,32768
81106104:	10814404 	addi	r2,r2,1296
81106108:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110610c:	010003c4 	movi	r4,15
81106110:	1123c880 	call	81123c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81106114:	e0bff717 	ldw	r2,-36(fp)
81106118:	10800044 	addi	r2,r2,1
8110611c:	e0bff715 	stw	r2,-36(fp)
81106120:	e0bff717 	ldw	r2,-36(fp)
81106124:	10800210 	cmplti	r2,r2,8
81106128:	103fe31e 	bne	r2,zero,811060b8 <__reset+0xfb0e60b8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
8110612c:	e03ff715 	stw	zero,-36(fp)
81106130:	00001a06 	br	8110619c <POWER_SPI_RW+0x418>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81106134:	e0bff517 	ldw	r2,-44(fp)
81106138:	1085883a 	add	r2,r2,r2
8110613c:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81106140:	00a00034 	movhi	r2,32768
81106144:	10814c04 	addi	r2,r2,1328
81106148:	10800037 	ldwio	r2,0(r2)
8110614c:	1080004c 	andi	r2,r2,1
81106150:	1007883a 	mov	r3,r2
81106154:	e0bff517 	ldw	r2,-44(fp)
81106158:	10c4b03a 	or	r2,r2,r3
8110615c:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81106160:	00c00044 	movi	r3,1
81106164:	00a00034 	movhi	r2,32768
81106168:	10814404 	addi	r2,r2,1296
8110616c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106170:	010003c4 	movi	r4,15
81106174:	1123c880 	call	81123c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106178:	0007883a 	mov	r3,zero
8110617c:	00a00034 	movhi	r2,32768
81106180:	10814404 	addi	r2,r2,1296
81106184:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106188:	010003c4 	movi	r4,15
8110618c:	1123c880 	call	81123c88 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81106190:	e0bff717 	ldw	r2,-36(fp)
81106194:	10800044 	addi	r2,r2,1
81106198:	e0bff715 	stw	r2,-36(fp)
8110619c:	e0bff717 	ldw	r2,-36(fp)
811061a0:	10800190 	cmplti	r2,r2,6
811061a4:	103fe31e 	bne	r2,zero,81106134 <__reset+0xfb0e6134>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
811061a8:	00c00044 	movi	r3,1
811061ac:	00a00034 	movhi	r2,32768
811061b0:	10814404 	addi	r2,r2,1296
811061b4:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811061b8:	010003c4 	movi	r4,15
811061bc:	1123c880 	call	81123c88 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
811061c0:	00c000c4 	movi	r3,3
811061c4:	00a00034 	movhi	r2,32768
811061c8:	10814004 	addi	r2,r2,1280
811061cc:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
811061d0:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
811061d4:	00800044 	movi	r2,1
811061d8:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
811061dc:	e03ff715 	stw	zero,-36(fp)
811061e0:	00000d06 	br	81106218 <POWER_SPI_RW+0x494>
        if ((Value32 & Mask32) == 0x00){
811061e4:	e0fff517 	ldw	r3,-44(fp)
811061e8:	e0bff617 	ldw	r2,-40(fp)
811061ec:	1884703a 	and	r2,r3,r2
811061f0:	1000031e 	bne	r2,zero,81106200 <POWER_SPI_RW+0x47c>
            nZeroCnt++;
811061f4:	e0bff917 	ldw	r2,-28(fp)
811061f8:	10800044 	addi	r2,r2,1
811061fc:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
81106200:	e0bff617 	ldw	r2,-40(fp)
81106204:	1085883a 	add	r2,r2,r2
81106208:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
8110620c:	e0bff717 	ldw	r2,-36(fp)
81106210:	10800044 	addi	r2,r2,1
81106214:	e0bff715 	stw	r2,-36(fp)
81106218:	e0bff717 	ldw	r2,-36(fp)
8110621c:	10800810 	cmplti	r2,r2,32
81106220:	103ff01e 	bne	r2,zero,811061e4 <__reset+0xfb0e61e4>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
81106224:	e0bff917 	ldw	r2,-28(fp)
81106228:	1080004c 	andi	r2,r2,1
8110622c:	1005003a 	cmpeq	r2,r2,zero
81106230:	10803fcc 	andi	r2,r2,255
81106234:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
81106238:	e0bffb17 	ldw	r2,-20(fp)
8110623c:	1000021e 	bne	r2,zero,81106248 <POWER_SPI_RW+0x4c4>
//        printf("Parity Check Error \r\n");
        return FALSE;
81106240:	0005883a 	mov	r2,zero
81106244:	00000406 	br	81106258 <POWER_SPI_RW+0x4d4>
    }        
    
    
    *pValue = Value32;
81106248:	e0800317 	ldw	r2,12(fp)
8110624c:	e0fff517 	ldw	r3,-44(fp)
81106250:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
81106254:	e0bffb17 	ldw	r2,-20(fp)
}
81106258:	e037883a 	mov	sp,fp
8110625c:	dfc00117 	ldw	ra,4(sp)
81106260:	df000017 	ldw	fp,0(sp)
81106264:	dec00204 	addi	sp,sp,8
81106268:	f800283a 	ret

8110626c <v_spi_start>:
#define SPI_CS_N(x) IOWR_ALTERA_AVALON_PIO_DATA(RTCC_CS_N_BASE,x)
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(RTCC_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(RTCC_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(150)  // based on 50MHZ of CPU clock

void v_spi_start(void){
8110626c:	defffe04 	addi	sp,sp,-8
81106270:	de00012e 	bgeu	sp,et,81106278 <v_spi_start+0xc>
81106274:	003b68fa 	trap	3
81106278:	dfc00115 	stw	ra,4(sp)
8110627c:	df000015 	stw	fp,0(sp)
81106280:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
81106284:	0007883a 	mov	r3,zero
81106288:	00a00034 	movhi	r2,32768
8110628c:	10812404 	addi	r2,r2,1168
81106290:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
81106294:	0007883a 	mov	r3,zero
81106298:	00a00034 	movhi	r2,32768
8110629c:	10812004 	addi	r2,r2,1152
811062a0:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811062a4:	01002584 	movi	r4,150
811062a8:	1123c880 	call	81123c88 <usleep>
}
811062ac:	0001883a 	nop
811062b0:	e037883a 	mov	sp,fp
811062b4:	dfc00117 	ldw	ra,4(sp)
811062b8:	df000017 	ldw	fp,0(sp)
811062bc:	dec00204 	addi	sp,sp,8
811062c0:	f800283a 	ret

811062c4 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811062c4:	defffc04 	addi	sp,sp,-16
811062c8:	de00012e 	bgeu	sp,et,811062d0 <v_spi_send_byte+0xc>
811062cc:	003b68fa 	trap	3
811062d0:	dfc00315 	stw	ra,12(sp)
811062d4:	df000215 	stw	fp,8(sp)
811062d8:	df000204 	addi	fp,sp,8
811062dc:	2005883a 	mov	r2,r4
811062e0:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
811062e4:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
811062e8:	00bfe004 	movi	r2,-128
811062ec:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
811062f0:	e03ffe05 	stb	zero,-8(fp)
811062f4:	00001b06 	br	81106364 <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
811062f8:	e0ffff03 	ldbu	r3,-4(fp)
811062fc:	e0bffe43 	ldbu	r2,-7(fp)
81106300:	1884703a 	and	r2,r3,r2
81106304:	10803fcc 	andi	r2,r2,255
81106308:	1004c03a 	cmpne	r2,r2,zero
8110630c:	10c03fcc 	andi	r3,r2,255
81106310:	00a00034 	movhi	r2,32768
81106314:	10812804 	addi	r2,r2,1184
81106318:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
8110631c:	e0bffe43 	ldbu	r2,-7(fp)
81106320:	1004d07a 	srli	r2,r2,1
81106324:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81106328:	00c00044 	movi	r3,1
8110632c:	00a00034 	movhi	r2,32768
81106330:	10812404 	addi	r2,r2,1168
81106334:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106338:	01002584 	movi	r4,150
8110633c:	1123c880 	call	81123c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106340:	0007883a 	mov	r3,zero
81106344:	00a00034 	movhi	r2,32768
81106348:	10812404 	addi	r2,r2,1168
8110634c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106350:	01002584 	movi	r4,150
81106354:	1123c880 	call	81123c88 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81106358:	e0bffe03 	ldbu	r2,-8(fp)
8110635c:	10800044 	addi	r2,r2,1
81106360:	e0bffe05 	stb	r2,-8(fp)
81106364:	e0bffe03 	ldbu	r2,-8(fp)
81106368:	10800230 	cmpltui	r2,r2,8
8110636c:	103fe21e 	bne	r2,zero,811062f8 <__reset+0xfb0e62f8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81106370:	0001883a 	nop
81106374:	e037883a 	mov	sp,fp
81106378:	dfc00117 	ldw	ra,4(sp)
8110637c:	df000017 	ldw	fp,0(sp)
81106380:	dec00204 	addi	sp,sp,8
81106384:	f800283a 	ret

81106388 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
81106388:	defffd04 	addi	sp,sp,-12
8110638c:	de00012e 	bgeu	sp,et,81106394 <uc_spi_get_byte+0xc>
81106390:	003b68fa 	trap	3
81106394:	dfc00215 	stw	ra,8(sp)
81106398:	df000115 	stw	fp,4(sp)
8110639c:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811063a0:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811063a4:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811063a8:	e03fff05 	stb	zero,-4(fp)
811063ac:	00001a06 	br	81106418 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
811063b0:	e0bfff43 	ldbu	r2,-3(fp)
811063b4:	1085883a 	add	r2,r2,r2
811063b8:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811063bc:	00a00034 	movhi	r2,32768
811063c0:	10812c04 	addi	r2,r2,1200
811063c4:	10800037 	ldwio	r2,0(r2)
811063c8:	1080004c 	andi	r2,r2,1
811063cc:	1007883a 	mov	r3,r2
811063d0:	e0bfff43 	ldbu	r2,-3(fp)
811063d4:	1884b03a 	or	r2,r3,r2
811063d8:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
811063dc:	00c00044 	movi	r3,1
811063e0:	00a00034 	movhi	r2,32768
811063e4:	10812404 	addi	r2,r2,1168
811063e8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
811063ec:	01002584 	movi	r4,150
811063f0:	1123c880 	call	81123c88 <usleep>
        SPI_SCK(0);//sck=0; // clock low
811063f4:	0007883a 	mov	r3,zero
811063f8:	00a00034 	movhi	r2,32768
811063fc:	10812404 	addi	r2,r2,1168
81106400:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106404:	01002584 	movi	r4,150
81106408:	1123c880 	call	81123c88 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
8110640c:	e0bfff03 	ldbu	r2,-4(fp)
81106410:	10800044 	addi	r2,r2,1
81106414:	e0bfff05 	stb	r2,-4(fp)
81106418:	e0bfff03 	ldbu	r2,-4(fp)
8110641c:	10800230 	cmpltui	r2,r2,8
81106420:	103fe31e 	bne	r2,zero,811063b0 <__reset+0xfb0e63b0>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
81106424:	e0bfff43 	ldbu	r2,-3(fp)
}
81106428:	e037883a 	mov	sp,fp
8110642c:	dfc00117 	ldw	ra,4(sp)
81106430:	df000017 	ldw	fp,0(sp)
81106434:	dec00204 	addi	sp,sp,8
81106438:	f800283a 	ret

8110643c <v_spi_end>:

void v_spi_end(void){
8110643c:	defffe04 	addi	sp,sp,-8
81106440:	de00012e 	bgeu	sp,et,81106448 <v_spi_end+0xc>
81106444:	003b68fa 	trap	3
81106448:	dfc00115 	stw	ra,4(sp)
8110644c:	df000015 	stw	fp,0(sp)
81106450:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
81106454:	0007883a 	mov	r3,zero
81106458:	00a00034 	movhi	r2,32768
8110645c:	10812404 	addi	r2,r2,1168
81106460:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81106464:	01002584 	movi	r4,150
81106468:	1123c880 	call	81123c88 <usleep>
    SPI_CS_N(1);
8110646c:	00c00044 	movi	r3,1
81106470:	00a00034 	movhi	r2,32768
81106474:	10812004 	addi	r2,r2,1152
81106478:	10c00035 	stwio	r3,0(r2)
}
8110647c:	0001883a 	nop
81106480:	e037883a 	mov	sp,fp
81106484:	dfc00117 	ldw	ra,4(sp)
81106488:	df000017 	ldw	fp,0(sp)
8110648c:	dec00204 	addi	sp,sp,8
81106490:	f800283a 	ret

81106494 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
81106494:	defff404 	addi	sp,sp,-48
81106498:	de00012e 	bgeu	sp,et,811064a0 <RTCC_SPI_R_MAC+0xc>
8110649c:	003b68fa 	trap	3
811064a0:	dfc00b15 	stw	ra,44(sp)
811064a4:	df000a15 	stw	fp,40(sp)
811064a8:	df000a04 	addi	fp,sp,40
811064ac:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811064b0:	e03ff915 	stw	zero,-28(fp)

    alt_u8 uc_EUI48_B0 = 0;
811064b4:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 uc_EUI48_B1 = 0;
811064b8:	e03ffa45 	stb	zero,-23(fp)
    alt_u8 uc_EUI48_B2 = 0;
811064bc:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 uc_EUI48_B3 = 0;
811064c0:	e03ffac5 	stb	zero,-21(fp)
    alt_u8 uc_EUI48_B4 = 0;
811064c4:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 uc_EUI48_B5 = 0;
811064c8:	e03ffb45 	stb	zero,-19(fp)

    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
811064cc:	00800084 	movi	r2,2
811064d0:	e0bffb85 	stb	r2,-18(fp)
    const alt_u8 uc_EUI48_B1_addr = 0x03;
811064d4:	008000c4 	movi	r2,3
811064d8:	e0bffbc5 	stb	r2,-17(fp)
    const alt_u8 uc_EUI48_B2_addr = 0x04;
811064dc:	00800104 	movi	r2,4
811064e0:	e0bffc05 	stb	r2,-16(fp)
    const alt_u8 uc_EUI48_B3_addr = 0x05;
811064e4:	00800144 	movi	r2,5
811064e8:	e0bffc45 	stb	r2,-15(fp)
    const alt_u8 uc_EUI48_B4_addr = 0x06;
811064ec:	00800184 	movi	r2,6
811064f0:	e0bffc85 	stb	r2,-14(fp)
    const alt_u8 uc_EUI48_B5_addr = 0x07;
811064f4:	008001c4 	movi	r2,7
811064f8:	e0bffcc5 	stb	r2,-13(fp)

    const alt_u8 uc_IDREAD_cmd = 0x33;
811064fc:	00800cc4 	movi	r2,51
81106500:	e0bffd05 	stb	r2,-12(fp)

    int i = 0;
81106504:	e03ffe15 	stw	zero,-8(fp)
    
    // Start Communication
    v_spi_start();
81106508:	110626c0 	call	8110626c <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
8110650c:	e0bffd03 	ldbu	r2,-12(fp)
81106510:	1009883a 	mov	r4,r2
81106514:	11062c40 	call	811062c4 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81106518:	e0bffb83 	ldbu	r2,-18(fp)
8110651c:	1009883a 	mov	r4,r2
81106520:	11062c40 	call	811062c4 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81106524:	11063880 	call	81106388 <uc_spi_get_byte>
81106528:	e0bffa05 	stb	r2,-24(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
8110652c:	11063880 	call	81106388 <uc_spi_get_byte>
81106530:	e0bffa45 	stb	r2,-23(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81106534:	11063880 	call	81106388 <uc_spi_get_byte>
81106538:	e0bffa85 	stb	r2,-22(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
8110653c:	11063880 	call	81106388 <uc_spi_get_byte>
81106540:	e0bffac5 	stb	r2,-21(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81106544:	11063880 	call	81106388 <uc_spi_get_byte>
81106548:	e0bffb05 	stb	r2,-20(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
8110654c:	11063880 	call	81106388 <uc_spi_get_byte>
81106550:	e0bffb45 	stb	r2,-19(fp)

    // End communication
    v_spi_end();
81106554:	110643c0 	call	8110643c <v_spi_end>

    bSuccess = TRUE;
81106558:	00800044 	movi	r2,1
8110655c:	e0bff915 	stw	r2,-28(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
81106560:	e0bfff17 	ldw	r2,-4(fp)
81106564:	e0fffa03 	ldbu	r3,-24(fp)
81106568:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
8110656c:	e0bfff17 	ldw	r2,-4(fp)
81106570:	10800044 	addi	r2,r2,1
81106574:	e0fffa43 	ldbu	r3,-23(fp)
81106578:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
8110657c:	e0bfff17 	ldw	r2,-4(fp)
81106580:	10800084 	addi	r2,r2,2
81106584:	e0fffa83 	ldbu	r3,-22(fp)
81106588:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
8110658c:	e0bfff17 	ldw	r2,-4(fp)
81106590:	108000c4 	addi	r2,r2,3
81106594:	e0fffac3 	ldbu	r3,-21(fp)
81106598:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
8110659c:	e0bfff17 	ldw	r2,-4(fp)
811065a0:	10800104 	addi	r2,r2,4
811065a4:	e0fffb03 	ldbu	r3,-20(fp)
811065a8:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811065ac:	e0bfff17 	ldw	r2,-4(fp)
811065b0:	10800144 	addi	r2,r2,5
811065b4:	e0fffb43 	ldbu	r3,-19(fp)
811065b8:	10c00005 	stb	r3,0(r2)

    printf("RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811065bc:	e17ffa03 	ldbu	r5,-24(fp)
811065c0:	e1bffa43 	ldbu	r6,-23(fp)
811065c4:	e1fffa83 	ldbu	r7,-22(fp)
811065c8:	e0bffac3 	ldbu	r2,-21(fp)
811065cc:	e0fffb03 	ldbu	r3,-20(fp)
811065d0:	e13ffb43 	ldbu	r4,-19(fp)
811065d4:	d9000215 	stw	r4,8(sp)
811065d8:	d8c00115 	stw	r3,4(sp)
811065dc:	d8800015 	stw	r2,0(sp)
811065e0:	01204534 	movhi	r4,33044
811065e4:	2124db04 	addi	r4,r4,-27796
811065e8:	110ebf80 	call	8110ebf8 <printf>

    return bSuccess;
811065ec:	e0bff917 	ldw	r2,-28(fp)
}
811065f0:	e037883a 	mov	sp,fp
811065f4:	dfc00117 	ldw	ra,4(sp)
811065f8:	df000017 	ldw	fp,0(sp)
811065fc:	dec00204 	addi	sp,sp,8
81106600:	f800283a 	ret

81106604 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81106604:	defffd04 	addi	sp,sp,-12
81106608:	de00012e 	bgeu	sp,et,81106610 <bSSDisplayConfig+0xc>
8110660c:	003b68fa 	trap	3
81106610:	df000215 	stw	fp,8(sp)
81106614:	df000204 	addi	fp,sp,8
81106618:	2005883a 	mov	r2,r4
8110661c:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
81106620:	e0bfff03 	ldbu	r2,-4(fp)
81106624:	10c00168 	cmpgeui	r3,r2,5
81106628:	18001c1e 	bne	r3,zero,8110669c <bSSDisplayConfig+0x98>
8110662c:	100690ba 	slli	r3,r2,2
81106630:	00a04434 	movhi	r2,33040
81106634:	10999104 	addi	r2,r2,26180
81106638:	1885883a 	add	r2,r3,r2
8110663c:	10800017 	ldw	r2,0(r2)
81106640:	1000683a 	jmp	r2
81106644:	81106658 	cmpnei	r4,r16,16793
81106648:	81106664 	muli	r4,r16,16793
8110664c:	81106670 	cmpltui	r4,r16,16793
81106650:	81106684 	addi	r4,r16,16794
81106654:	81106694 	ori	r4,r16,16794
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81106658:	00800cc4 	movi	r2,51
8110665c:	d0a05205 	stb	r2,-32440(gp)
	    break;
81106660:	00001006 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81106664:	00801544 	movi	r2,85
81106668:	d0a05205 	stb	r2,-32440(gp)
	    break;
8110666c:	00000d06 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
81106670:	d0e05203 	ldbu	r3,-32440(gp)
81106674:	00bff744 	movi	r2,-35
81106678:	1884703a 	and	r2,r3,r2
8110667c:	d0a05205 	stb	r2,-32440(gp)
	    break;
81106680:	00000806 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81106684:	d0a05203 	ldbu	r2,-32440(gp)
81106688:	10800894 	ori	r2,r2,34
8110668c:	d0a05205 	stb	r2,-32440(gp)
	    break;
81106690:	00000406 	br	811066a4 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81106694:	d0205205 	stb	zero,-32440(gp)
	    break;
81106698:	00000206 	br	811066a4 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
8110669c:	0005883a 	mov	r2,zero
811066a0:	00000806 	br	811066c4 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
811066a4:	00a00034 	movhi	r2,32768
811066a8:	10817c04 	addi	r2,r2,1520
811066ac:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811066b0:	d0a05203 	ldbu	r2,-32440(gp)
811066b4:	10c03fcc 	andi	r3,r2,255
811066b8:	e0bffe17 	ldw	r2,-8(fp)
811066bc:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811066c0:	00800044 	movi	r2,1
}
811066c4:	e037883a 	mov	sp,fp
811066c8:	df000017 	ldw	fp,0(sp)
811066cc:	dec00104 	addi	sp,sp,4
811066d0:	f800283a 	ret

811066d4 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
811066d4:	defffd04 	addi	sp,sp,-12
811066d8:	de00012e 	bgeu	sp,et,811066e0 <bSSDisplayUpdate+0xc>
811066dc:	003b68fa 	trap	3
811066e0:	df000215 	stw	fp,8(sp)
811066e4:	df000204 	addi	fp,sp,8
811066e8:	2005883a 	mov	r2,r4
811066ec:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
811066f0:	00a00034 	movhi	r2,32768
811066f4:	10817c04 	addi	r2,r2,1520
811066f8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
811066fc:	e0bffe17 	ldw	r2,-8(fp)
81106700:	10800104 	addi	r2,r2,4
81106704:	e0ffff03 	ldbu	r3,-4(fp)
81106708:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
8110670c:	00800044 	movi	r2,1
}
81106710:	e037883a 	mov	sp,fp
81106714:	df000017 	ldw	fp,0(sp)
81106718:	dec00104 	addi	sp,sp,4
8110671c:	f800283a 	ret

81106720 <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
81106720:	defff704 	addi	sp,sp,-36
81106724:	de00012e 	bgeu	sp,et,8110672c <vInAckHandlerTask+0xc>
81106728:	003b68fa 	trap	3
8110672c:	dfc00815 	stw	ra,32(sp)
81106730:	df000715 	stw	fp,28(sp)
81106734:	df000704 	addi	fp,sp,28
81106738:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110673c:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81106740:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81106744:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
81106748:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
8110674c:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81106750:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81106754:	d0a05a17 	ldw	r2,-32408(gp)
81106758:	100f883a 	mov	r7,r2
8110675c:	01800784 	movi	r6,30
81106760:	01400044 	movi	r5,1
81106764:	01204534 	movhi	r4,33044
81106768:	2124ea04 	addi	r4,r4,-27736
8110676c:	110decc0 	call	8110decc <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
81106770:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
81106774:	e0bffd17 	ldw	r2,-12(fp)
81106778:	10c00060 	cmpeqi	r3,r2,1
8110677c:	1800071e 	bne	r3,zero,8110679c <vInAckHandlerTask+0x7c>
81106780:	0080032e 	bgeu	zero,r2,81106790 <vInAckHandlerTask+0x70>
81106784:	108000a0 	cmpeqi	r2,r2,2
81106788:	10005a1e 	bne	r2,zero,811068f4 <vInAckHandlerTask+0x1d4>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
8110678c:	00012506 	br	81106c24 <vInAckHandlerTask+0x504>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81106790:	00800044 	movi	r2,1
81106794:	e0bffd15 	stw	r2,-12(fp)
				break;
81106798:	00012206 	br	81106c24 <vInAckHandlerTask+0x504>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
8110679c:	d0a05e17 	ldw	r2,-32392(gp)
811067a0:	e0fffec4 	addi	r3,fp,-5
811067a4:	180d883a 	mov	r6,r3
811067a8:	000b883a 	mov	r5,zero
811067ac:	1009883a 	mov	r4,r2
811067b0:	112ab040 	call	8112ab04 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811067b4:	e0bffec3 	ldbu	r2,-5(fp)
811067b8:	10803fcc 	andi	r2,r2,255
811067bc:	10004b1e 	bne	r2,zero,811068ec <vInAckHandlerTask+0x1cc>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811067c0:	d0a05d17 	ldw	r2,-32396(gp)
811067c4:	e0fffec4 	addi	r3,fp,-5
811067c8:	180d883a 	mov	r6,r3
811067cc:	000b883a 	mov	r5,zero
811067d0:	1009883a 	mov	r4,r2
811067d4:	1128af80 	call	81128af8 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811067d8:	e0bffec3 	ldbu	r2,-5(fp)
811067dc:	10803fcc 	andi	r2,r2,255
811067e0:	1000401e 	bne	r2,zero,811068e4 <vInAckHandlerTask+0x1c4>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811067e4:	e03ffe45 	stb	zero,-7(fp)
811067e8:	00003706 	br	811068c8 <vInAckHandlerTask+0x1a8>
                        {
                            
                            if ( xReceivedACK[i].cType != 0 ) {
811067ec:	e0fffe43 	ldbu	r3,-7(fp)
811067f0:	00a045b4 	movhi	r2,33046
811067f4:	10b68504 	addi	r2,r2,-9708
811067f8:	18c7883a 	add	r3,r3,r3
811067fc:	18c7883a 	add	r3,r3,r3
81106800:	10c5883a 	add	r2,r2,r3
81106804:	10800003 	ldbu	r2,0(r2)
81106808:	10803fcc 	andi	r2,r2,255
8110680c:	1080201c 	xori	r2,r2,128
81106810:	10bfe004 	addi	r2,r2,-128
81106814:	10002926 	beq	r2,zero,811068bc <vInAckHandlerTask+0x19c>

                                /*  Is it a NACK? */
                                if ( xReceivedACK[i].cType != NACK_CHAR ) {
81106818:	e0fffe43 	ldbu	r3,-7(fp)
8110681c:	00a045b4 	movhi	r2,33046
81106820:	10b68504 	addi	r2,r2,-9708
81106824:	18c7883a 	add	r3,r3,r3
81106828:	18c7883a 	add	r3,r3,r3
8110682c:	10c5883a 	add	r2,r2,r3
81106830:	10800003 	ldbu	r2,0(r2)
81106834:	10803fcc 	andi	r2,r2,255
81106838:	1080201c 	xori	r2,r2,128
8110683c:	10bfe004 	addi	r2,r2,-128
81106840:	108008e0 	cmpeqi	r2,r2,35
81106844:	10000d1e 	bne	r2,zero,8110687c <vInAckHandlerTask+0x15c>
                                    /* Locate the message, copy for the local variable in order to free the mutex. */
                                    xRAckLocal = xReceivedACK[i];
81106848:	e0fffe43 	ldbu	r3,-7(fp)
8110684c:	00a045b4 	movhi	r2,33046
81106850:	10b68504 	addi	r2,r2,-9708
81106854:	18c7883a 	add	r3,r3,r3
81106858:	18c7883a 	add	r3,r3,r3
8110685c:	10c5883a 	add	r2,r2,r3
81106860:	10c0000b 	ldhu	r3,0(r2)
81106864:	d0e0528d 	sth	r3,-32438(gp)
81106868:	1080008b 	ldhu	r2,2(r2)
8110686c:	d0a0530d 	sth	r2,-32436(gp)
                                    eReceiverAckState = sRACleanningBuffer;
81106870:	00800084 	movi	r2,2
81106874:	e0bffd15 	stw	r2,-12(fp)
                                    break;
81106878:	00001606 	br	811068d4 <vInAckHandlerTask+0x1b4>
                                } else {
                                    /*  Yes is a NACK, do nothing. The packet will be retransmited after timeout, since we can't know which message
                                        was not transmited, is too much expensive retransmit all "waiting ack" packets. So, do nothing, excet clear the pipe buffer*/
                                    #ifdef DEBUG_ON
                                        debug(fp,"NACK received.");
8110687c:	d0a05a17 	ldw	r2,-32408(gp)
81106880:	100f883a 	mov	r7,r2
81106884:	01800384 	movi	r6,14
81106888:	01400044 	movi	r5,1
8110688c:	01204534 	movhi	r4,33044
81106890:	2124f204 	addi	r4,r4,-27704
81106894:	110decc0 	call	8110decc <fwrite>
                                    #endif
                                    eReceiverAckState = sRAGettingACK;
81106898:	00800044 	movi	r2,1
8110689c:	e0bffd15 	stw	r2,-12(fp)
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
811068a0:	e0fffe43 	ldbu	r3,-7(fp)
811068a4:	00a045b4 	movhi	r2,33046
811068a8:	10b68504 	addi	r2,r2,-9708
811068ac:	18c7883a 	add	r3,r3,r3
811068b0:	18c7883a 	add	r3,r3,r3
811068b4:	10c5883a 	add	r2,r2,r3
811068b8:	10000005 	stb	zero,0(r2)

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811068bc:	e0bffe43 	ldbu	r2,-7(fp)
811068c0:	10800044 	addi	r2,r2,1
811068c4:	e0bffe45 	stb	r2,-7(fp)
811068c8:	e0bffe43 	ldbu	r2,-7(fp)
811068cc:	10800130 	cmpltui	r2,r2,4
811068d0:	103fc61e 	bne	r2,zero,811067ec <__reset+0xfb0e67ec>
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                            }

                        }
                        OSMutexPost(xMutexReceivedACK);
811068d4:	d0a05d17 	ldw	r2,-32396(gp)
811068d8:	1009883a 	mov	r4,r2
811068dc:	112909c0 	call	8112909c <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811068e0:	0000d006 	br	81106c24 <vInAckHandlerTask+0x504>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
811068e4:	110b0a40 	call	8110b0a4 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811068e8:	0000ce06 	br	81106c24 <vInAckHandlerTask+0x504>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
811068ec:	110b03c0 	call	8110b03c <vFailGetCountSemaphoreReceiverTask>
                }
                break;
811068f0:	0000cc06 	br	81106c24 <vInAckHandlerTask+0x504>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
811068f4:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
811068f8:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
811068fc:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
81106900:	e03ffc15 	stw	zero,-16(fp)
                ucCountRetries = 0;
81106904:	e03ffe05 	stb	zero,-8(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81106908:	0000b506 	br	81106be0 <vInAckHandlerTask+0x4c0>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
8110690c:	e0bff917 	ldw	r2,-28(fp)
81106910:	1000361e 	bne	r2,zero,811069ec <vInAckHandlerTask+0x2cc>
81106914:	e0bffa17 	ldw	r2,-24(fp)
81106918:	1000341e 	bne	r2,zero,811069ec <vInAckHandlerTask+0x2cc>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
8110691c:	d0a06217 	ldw	r2,-32376(gp)
81106920:	e0fffec4 	addi	r3,fp,-5
81106924:	180b883a 	mov	r5,r3
81106928:	1009883a 	mov	r4,r2
8110692c:	11284780 	call	81128478 <OSMutexAccept>
81106930:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81106934:	e0bffe83 	ldbu	r2,-6(fp)
81106938:	10002c26 	beq	r2,zero,811069ec <vInAckHandlerTask+0x2cc>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
8110693c:	e03ffe45 	stb	zero,-7(fp)
81106940:	00002306 	br	811069d0 <vInAckHandlerTask+0x2b0>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
81106944:	e0fffe43 	ldbu	r3,-7(fp)
81106948:	00a04574 	movhi	r2,33045
8110694c:	109df604 	addi	r2,r2,30680
81106950:	18c009a4 	muli	r3,r3,38
81106954:	10c5883a 	add	r2,r2,r3
81106958:	10800804 	addi	r2,r2,32
8110695c:	10c0000b 	ldhu	r3,0(r2)
81106960:	d0a0530b 	ldhu	r2,-32436(gp)
81106964:	18ffffcc 	andi	r3,r3,65535
81106968:	10bfffcc 	andi	r2,r2,65535
8110696c:	1880151e 	bne	r3,r2,811069c4 <vInAckHandlerTask+0x2a4>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
81106970:	e0fffe43 	ldbu	r3,-7(fp)
81106974:	00a04574 	movhi	r2,33045
81106978:	109df604 	addi	r2,r2,30680
8110697c:	18c009a4 	muli	r3,r3,38
81106980:	10c5883a 	add	r2,r2,r3
81106984:	10800804 	addi	r2,r2,32
81106988:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110698c:	d0a06217 	ldw	r2,-32376(gp)
81106990:	1009883a 	mov	r4,r2
81106994:	112909c0 	call	8112909c <OSMutexPost>
                                    bFound = TRUE;
81106998:	00800044 	movi	r2,1
8110699c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
811069a0:	d0a06517 	ldw	r2,-32364(gp)
811069a4:	1009883a 	mov	r4,r2
811069a8:	112ae8c0 	call	8112ae8c <OSSemPost>
811069ac:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
811069b0:	e0bffec3 	ldbu	r2,-5(fp)
811069b4:	10803fcc 	andi	r2,r2,255
811069b8:	10000926 	beq	r2,zero,811069e0 <vInAckHandlerTask+0x2c0>
                                        vFailSetCountSemaphorexBuffer32();
811069bc:	110b2f00 	call	8110b2f0 <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
811069c0:	00000706 	br	811069e0 <vInAckHandlerTask+0x2c0>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811069c4:	e0bffe43 	ldbu	r2,-7(fp)
811069c8:	10800044 	addi	r2,r2,1
811069cc:	e0bffe45 	stb	r2,-7(fp)
811069d0:	e0bffe43 	ldbu	r2,-7(fp)
811069d4:	10800230 	cmpltui	r2,r2,8
811069d8:	103fda1e 	bne	r2,zero,81106944 <__reset+0xfb0e6944>
811069dc:	00000106 	br	811069e4 <vInAckHandlerTask+0x2c4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
811069e0:	0001883a 	nop
                                }
                            }
                            bFinished32 = TRUE;
811069e4:	00800044 	movi	r2,1
811069e8:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
811069ec:	e0bff917 	ldw	r2,-28(fp)
811069f0:	1000361e 	bne	r2,zero,81106acc <vInAckHandlerTask+0x3ac>
811069f4:	e0bffb17 	ldw	r2,-20(fp)
811069f8:	1000341e 	bne	r2,zero,81106acc <vInAckHandlerTask+0x3ac>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
811069fc:	d0a06617 	ldw	r2,-32360(gp)
81106a00:	e0fffec4 	addi	r3,fp,-5
81106a04:	180b883a 	mov	r5,r3
81106a08:	1009883a 	mov	r4,r2
81106a0c:	11284780 	call	81128478 <OSMutexAccept>
81106a10:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81106a14:	e0bffe83 	ldbu	r2,-6(fp)
81106a18:	10002c26 	beq	r2,zero,81106acc <vInAckHandlerTask+0x3ac>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81106a1c:	e03ffe45 	stb	zero,-7(fp)
81106a20:	00002306 	br	81106ab0 <vInAckHandlerTask+0x390>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
81106a24:	e0fffe43 	ldbu	r3,-7(fp)
81106a28:	00a04574 	movhi	r2,33045
81106a2c:	108db004 	addi	r2,r2,14016
81106a30:	18c011a4 	muli	r3,r3,70
81106a34:	10c5883a 	add	r2,r2,r3
81106a38:	10801004 	addi	r2,r2,64
81106a3c:	10c0000b 	ldhu	r3,0(r2)
81106a40:	d0a0530b 	ldhu	r2,-32436(gp)
81106a44:	18ffffcc 	andi	r3,r3,65535
81106a48:	10bfffcc 	andi	r2,r2,65535
81106a4c:	1880151e 	bne	r3,r2,81106aa4 <vInAckHandlerTask+0x384>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81106a50:	e0fffe43 	ldbu	r3,-7(fp)
81106a54:	00a04574 	movhi	r2,33045
81106a58:	108db004 	addi	r2,r2,14016
81106a5c:	18c011a4 	muli	r3,r3,70
81106a60:	10c5883a 	add	r2,r2,r3
81106a64:	10801004 	addi	r2,r2,64
81106a68:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81106a6c:	d0a06617 	ldw	r2,-32360(gp)
81106a70:	1009883a 	mov	r4,r2
81106a74:	112909c0 	call	8112909c <OSMutexPost>
                                    bFound = TRUE;
81106a78:	00800044 	movi	r2,1
81106a7c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81106a80:	d0a05717 	ldw	r2,-32420(gp)
81106a84:	1009883a 	mov	r4,r2
81106a88:	112ae8c0 	call	8112ae8c <OSSemPost>
81106a8c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81106a90:	e0bffec3 	ldbu	r2,-5(fp)
81106a94:	10803fcc 	andi	r2,r2,255
81106a98:	10000926 	beq	r2,zero,81106ac0 <vInAckHandlerTask+0x3a0>
                                        vFailSetCountSemaphorexBuffer64();
81106a9c:	110b3580 	call	8110b358 <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81106aa0:	00000706 	br	81106ac0 <vInAckHandlerTask+0x3a0>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81106aa4:	e0bffe43 	ldbu	r2,-7(fp)
81106aa8:	10800044 	addi	r2,r2,1
81106aac:	e0bffe45 	stb	r2,-7(fp)
81106ab0:	e0bffe43 	ldbu	r2,-7(fp)
81106ab4:	10800130 	cmpltui	r2,r2,4
81106ab8:	103fda1e 	bne	r2,zero,81106a24 <__reset+0xfb0e6a24>
81106abc:	00000106 	br	81106ac4 <vInAckHandlerTask+0x3a4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
81106ac0:	0001883a 	nop
                                }
                            }
                            bFinished64 = TRUE;
81106ac4:	00800044 	movi	r2,1
81106ac8:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
81106acc:	e0bff917 	ldw	r2,-28(fp)
81106ad0:	1000361e 	bne	r2,zero,81106bac <vInAckHandlerTask+0x48c>
81106ad4:	e0bffc17 	ldw	r2,-16(fp)
81106ad8:	1000341e 	bne	r2,zero,81106bac <vInAckHandlerTask+0x48c>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
81106adc:	d0a06417 	ldw	r2,-32368(gp)
81106ae0:	e0fffec4 	addi	r3,fp,-5
81106ae4:	180b883a 	mov	r5,r3
81106ae8:	1009883a 	mov	r4,r2
81106aec:	11284780 	call	81128478 <OSMutexAccept>
81106af0:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81106af4:	e0bffe83 	ldbu	r2,-6(fp)
81106af8:	10002c26 	beq	r2,zero,81106bac <vInAckHandlerTask+0x48c>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81106afc:	e03ffe45 	stb	zero,-7(fp)
81106b00:	00002306 	br	81106b90 <vInAckHandlerTask+0x470>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
81106b04:	e0fffe43 	ldbu	r3,-7(fp)
81106b08:	00a045b4 	movhi	r2,33046
81106b0c:	10b64204 	addi	r2,r2,-9976
81106b10:	18c021a4 	muli	r3,r3,134
81106b14:	10c5883a 	add	r2,r2,r3
81106b18:	10802004 	addi	r2,r2,128
81106b1c:	10c0000b 	ldhu	r3,0(r2)
81106b20:	d0a0530b 	ldhu	r2,-32436(gp)
81106b24:	18ffffcc 	andi	r3,r3,65535
81106b28:	10bfffcc 	andi	r2,r2,65535
81106b2c:	1880151e 	bne	r3,r2,81106b84 <vInAckHandlerTask+0x464>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81106b30:	e0fffe43 	ldbu	r3,-7(fp)
81106b34:	00a045b4 	movhi	r2,33046
81106b38:	10b64204 	addi	r2,r2,-9976
81106b3c:	18c021a4 	muli	r3,r3,134
81106b40:	10c5883a 	add	r2,r2,r3
81106b44:	10802004 	addi	r2,r2,128
81106b48:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81106b4c:	d0a06417 	ldw	r2,-32368(gp)
81106b50:	1009883a 	mov	r4,r2
81106b54:	112909c0 	call	8112909c <OSMutexPost>
                                    bFound = TRUE;
81106b58:	00800044 	movi	r2,1
81106b5c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81106b60:	d0a05b17 	ldw	r2,-32404(gp)
81106b64:	1009883a 	mov	r4,r2
81106b68:	112ae8c0 	call	8112ae8c <OSSemPost>
81106b6c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81106b70:	e0bffec3 	ldbu	r2,-5(fp)
81106b74:	10803fcc 	andi	r2,r2,255
81106b78:	10000926 	beq	r2,zero,81106ba0 <vInAckHandlerTask+0x480>
                                        vFailSetCountSemaphorexBuffer128();
81106b7c:	110b3c00 	call	8110b3c0 <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81106b80:	00000706 	br	81106ba0 <vInAckHandlerTask+0x480>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81106b84:	e0bffe43 	ldbu	r2,-7(fp)
81106b88:	10800044 	addi	r2,r2,1
81106b8c:	e0bffe45 	stb	r2,-7(fp)
81106b90:	e0bffe43 	ldbu	r2,-7(fp)
81106b94:	108000b0 	cmpltui	r2,r2,2
81106b98:	103fda1e 	bne	r2,zero,81106b04 <__reset+0xfb0e6b04>
81106b9c:	00000106 	br	81106ba4 <vInAckHandlerTask+0x484>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
81106ba0:	0001883a 	nop
                                }
                            }
                            bFinished128 = TRUE;
81106ba4:	00800044 	movi	r2,1
81106ba8:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    /* Check if finish the search, if not probably some mutex is in use, so put the task to sleep for some time*/
                    if ( ( bFound == FALSE ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) )) {
81106bac:	e0bff917 	ldw	r2,-28(fp)
81106bb0:	10000b1e 	bne	r2,zero,81106be0 <vInAckHandlerTask+0x4c0>
81106bb4:	e0bffa17 	ldw	r2,-24(fp)
81106bb8:	10000426 	beq	r2,zero,81106bcc <vInAckHandlerTask+0x4ac>
81106bbc:	e0bffb17 	ldw	r2,-20(fp)
81106bc0:	10000226 	beq	r2,zero,81106bcc <vInAckHandlerTask+0x4ac>
81106bc4:	e0bffc17 	ldw	r2,-16(fp)
81106bc8:	1000051e 	bne	r2,zero,81106be0 <vInAckHandlerTask+0x4c0>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
81106bcc:	01000144 	movi	r4,5
81106bd0:	112c9900 	call	8112c990 <OSTimeDly>
                        ucCountRetries++;
81106bd4:	e0bffe03 	ldbu	r2,-8(fp)
81106bd8:	10800044 	addi	r2,r2,1
81106bdc:	e0bffe05 	stb	r2,-8(fp)
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                ucCountRetries = 0;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81106be0:	e0bff917 	ldw	r2,-28(fp)
81106be4:	1000091e 	bne	r2,zero,81106c0c <vInAckHandlerTask+0x4ec>
81106be8:	e0bffe03 	ldbu	r2,-8(fp)
81106bec:	108001a8 	cmpgeui	r2,r2,6
81106bf0:	1000061e 	bne	r2,zero,81106c0c <vInAckHandlerTask+0x4ec>
81106bf4:	e0bffa17 	ldw	r2,-24(fp)
81106bf8:	103f4426 	beq	r2,zero,8110690c <__reset+0xfb0e690c>
81106bfc:	e0bffb17 	ldw	r2,-20(fp)
81106c00:	103f4226 	beq	r2,zero,8110690c <__reset+0xfb0e690c>
81106c04:	e0bffc17 	ldw	r2,-16(fp)
81106c08:	103f4026 	beq	r2,zero,8110690c <__reset+0xfb0e690c>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
                        ucCountRetries++;
                    }
                }
                
                if (bFound == FALSE) {
81106c0c:	e0bff917 	ldw	r2,-28(fp)
81106c10:	1000011e 	bne	r2,zero,81106c18 <vInAckHandlerTask+0x4f8>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81106c14:	110b4280 	call	8110b428 <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
81106c18:	00800044 	movi	r2,1
81106c1c:	e0bffd15 	stw	r2,-12(fp)
				break;
81106c20:	0001883a 	nop
			default:
				break;
		}
	}
81106c24:	003ed306 	br	81106774 <__reset+0xfb0e6774>

81106c28 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81106c28:	defff704 	addi	sp,sp,-36
81106c2c:	de00012e 	bgeu	sp,et,81106c34 <vInitialTask+0xc>
81106c30:	003b68fa 	trap	3
81106c34:	dfc00815 	stw	ra,32(sp)
81106c38:	df000715 	stw	fp,28(sp)
81106c3c:	df000704 	addi	fp,sp,28
81106c40:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81106c44:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverUartTask,
81106c48:	00800104 	movi	r2,4
81106c4c:	d8800415 	stw	r2,16(sp)
81106c50:	d8000315 	stw	zero,12(sp)
81106c54:	00820004 	movi	r2,2048
81106c58:	d8800215 	stw	r2,8(sp)
81106c5c:	00a04574 	movhi	r2,33045
81106c60:	109e4204 	addi	r2,r2,30984
81106c64:	d8800115 	stw	r2,4(sp)
81106c68:	00800784 	movi	r2,30
81106c6c:	d8800015 	stw	r2,0(sp)
81106c70:	01c00784 	movi	r7,30
81106c74:	01a045b4 	movhi	r6,33046
81106c78:	31a64104 	addi	r6,r6,-26364
81106c7c:	000b883a 	mov	r5,zero
81106c80:	01204434 	movhi	r4,33040
81106c84:	211d9204 	addi	r4,r4,30280
81106c88:	112b8700 	call	8112b870 <OSTaskCreateExt>
81106c8c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106c90:	e0bffe03 	ldbu	r2,-8(fp)
81106c94:	10803fcc 	andi	r2,r2,255
81106c98:	10000526 	beq	r2,zero,81106cb0 <vInitialTask+0x88>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106c9c:	e0bffe03 	ldbu	r2,-8(fp)
81106ca0:	10803fcc 	andi	r2,r2,255
81106ca4:	1009883a 	mov	r4,r2
81106ca8:	110acb80 	call	8110acb8 <printErrorTask>
		#endif
		vFailReceiverCreate();
81106cac:	110b20c0 	call	8110b20c <vFailReceiverCreate>
	}


	/* Create the task that is responsible to parse all received messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vParserCommTask,
81106cb0:	00800104 	movi	r2,4
81106cb4:	d8800415 	stw	r2,16(sp)
81106cb8:	d8000315 	stw	zero,12(sp)
81106cbc:	00820004 	movi	r2,2048
81106cc0:	d8800215 	stw	r2,8(sp)
81106cc4:	00a045b4 	movhi	r2,33046
81106cc8:	10b68904 	addi	r2,r2,-9692
81106ccc:	d8800115 	stw	r2,4(sp)
81106cd0:	00800684 	movi	r2,26
81106cd4:	d8800015 	stw	r2,0(sp)
81106cd8:	01c00684 	movi	r7,26
81106cdc:	01a045b4 	movhi	r6,33046
81106ce0:	31be8804 	addi	r6,r6,-1504
81106ce4:	000b883a 	mov	r5,zero
81106ce8:	01204434 	movhi	r4,33040
81106cec:	211c7404 	addi	r4,r4,29136
81106cf0:	112b8700 	call	8112b870 <OSTaskCreateExt>
81106cf4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106cf8:	e0bffe03 	ldbu	r2,-8(fp)
81106cfc:	10803fcc 	andi	r2,r2,255
81106d00:	10000526 	beq	r2,zero,81106d18 <vInitialTask+0xf0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106d04:	e0bffe03 	ldbu	r2,-8(fp)
81106d08:	10803fcc 	andi	r2,r2,255
81106d0c:	1009883a 	mov	r4,r2
81106d10:	110acb80 	call	8110acb8 <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81106d14:	110b7d00 	call	8110b7d0 <vFailParserCommTaskCreate>
	}


	/* Create the task that is responsible to handle incomming ack packet */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInAckHandlerTask,
81106d18:	00800104 	movi	r2,4
81106d1c:	d8800415 	stw	r2,16(sp)
81106d20:	d8000315 	stw	zero,12(sp)
81106d24:	00820004 	movi	r2,2048
81106d28:	d8800215 	stw	r2,8(sp)
81106d2c:	00a04574 	movhi	r2,33045
81106d30:	1085b004 	addi	r2,r2,5824
81106d34:	d8800115 	stw	r2,4(sp)
81106d38:	008005c4 	movi	r2,23
81106d3c:	d8800015 	stw	r2,0(sp)
81106d40:	01c005c4 	movi	r7,23
81106d44:	01a04574 	movhi	r6,33045
81106d48:	318daf04 	addi	r6,r6,14012
81106d4c:	000b883a 	mov	r5,zero
81106d50:	01204434 	movhi	r4,33040
81106d54:	2119c804 	addi	r4,r4,26400
81106d58:	112b8700 	call	8112b870 <OSTaskCreateExt>
81106d5c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106d60:	e0bffe03 	ldbu	r2,-8(fp)
81106d64:	10803fcc 	andi	r2,r2,255
81106d68:	10000526 	beq	r2,zero,81106d80 <vInitialTask+0x158>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106d6c:	e0bffe03 	ldbu	r2,-8(fp)
81106d70:	10803fcc 	andi	r2,r2,255
81106d74:	1009883a 	mov	r4,r2
81106d78:	110acb80 	call	8110acb8 <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81106d7c:	110b81c0 	call	8110b81c <vFailInAckHandlerTaskCreate>



	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81106d80:	00800104 	movi	r2,4
81106d84:	d8800415 	stw	r2,16(sp)
81106d88:	d8000315 	stw	zero,12(sp)
81106d8c:	00820004 	movi	r2,2048
81106d90:	d8800215 	stw	r2,8(sp)
81106d94:	00a045b4 	movhi	r2,33046
81106d98:	10a64204 	addi	r2,r2,-26360
81106d9c:	d8800115 	stw	r2,4(sp)
81106da0:	00800644 	movi	r2,25
81106da4:	d8800015 	stw	r2,0(sp)
81106da8:	01c00644 	movi	r7,25
81106dac:	01a045b4 	movhi	r6,33046
81106db0:	31ae4104 	addi	r6,r6,-18172
81106db4:	000b883a 	mov	r5,zero
81106db8:	01204434 	movhi	r4,33040
81106dbc:	211bd204 	addi	r4,r4,28488
81106dc0:	112b8700 	call	8112b870 <OSTaskCreateExt>
81106dc4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106dc8:	e0bffe03 	ldbu	r2,-8(fp)
81106dcc:	10803fcc 	andi	r2,r2,255
81106dd0:	10000526 	beq	r2,zero,81106de8 <vInitialTask+0x1c0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106dd4:	e0bffe03 	ldbu	r2,-8(fp)
81106dd8:	10803fcc 	andi	r2,r2,255
81106ddc:	1009883a 	mov	r4,r2
81106de0:	110acb80 	call	8110acb8 <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81106de4:	110b8680 	call	8110b868 <vFailOutAckHandlerTaskCreate>
	}


	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vTimeoutCheckerTask,
81106de8:	00800104 	movi	r2,4
81106dec:	d8800415 	stw	r2,16(sp)
81106df0:	d8000315 	stw	zero,12(sp)
81106df4:	00820004 	movi	r2,2048
81106df8:	d8800215 	stw	r2,8(sp)
81106dfc:	00a04574 	movhi	r2,33045
81106e00:	1095f604 	addi	r2,r2,22488
81106e04:	d8800115 	stw	r2,4(sp)
81106e08:	00800704 	movi	r2,28
81106e0c:	d8800015 	stw	r2,0(sp)
81106e10:	01c00704 	movi	r7,28
81106e14:	01a04574 	movhi	r6,33045
81106e18:	319df504 	addi	r6,r6,30676
81106e1c:	000b883a 	mov	r5,zero
81106e20:	01204474 	movhi	r4,33041
81106e24:	2122ae04 	addi	r4,r4,-30024
81106e28:	112b8700 	call	8112b870 <OSTaskCreateExt>
81106e2c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106e30:	e0bffe03 	ldbu	r2,-8(fp)
81106e34:	10803fcc 	andi	r2,r2,255
81106e38:	10000526 	beq	r2,zero,81106e50 <vInitialTask+0x228>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106e3c:	e0bffe03 	ldbu	r2,-8(fp)
81106e40:	10803fcc 	andi	r2,r2,255
81106e44:	1009883a 	mov	r4,r2
81106e48:	110acb80 	call	8110acb8 <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81106e4c:	110b94c0 	call	8110b94c <vFailTimeoutCheckerTaskCreate>



	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81106e50:	00800104 	movi	r2,4
81106e54:	d8800415 	stw	r2,16(sp)
81106e58:	d8000315 	stw	zero,12(sp)
81106e5c:	00820004 	movi	r2,2048
81106e60:	d8800215 	stw	r2,8(sp)
81106e64:	00a04574 	movhi	r2,33045
81106e68:	108df604 	addi	r2,r2,14296
81106e6c:	d8800115 	stw	r2,4(sp)
81106e70:	00800604 	movi	r2,24
81106e74:	d8800015 	stw	r2,0(sp)
81106e78:	01c00604 	movi	r7,24
81106e7c:	01a04574 	movhi	r6,33045
81106e80:	3195f504 	addi	r6,r6,22484
81106e84:	000b883a 	mov	r5,zero
81106e88:	01204474 	movhi	r4,33041
81106e8c:	21225f04 	addi	r4,r4,-30340
81106e90:	112b8700 	call	8112b870 <OSTaskCreateExt>
81106e94:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106e98:	e0bffe03 	ldbu	r2,-8(fp)
81106e9c:	10803fcc 	andi	r2,r2,255
81106ea0:	10000526 	beq	r2,zero,81106eb8 <vInitialTask+0x290>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106ea4:	e0bffe03 	ldbu	r2,-8(fp)
81106ea8:	10803fcc 	andi	r2,r2,255
81106eac:	1009883a 	mov	r4,r2
81106eb0:	110acb80 	call	8110acb8 <printErrorTask>
		#endif
		vFailSenderCreate();
81106eb4:	110b2580 	call	8110b258 <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
81106eb8:	d0a06317 	ldw	r2,-32372(gp)
81106ebc:	e17ffe04 	addi	r5,fp,-8
81106ec0:	1009883a 	mov	r4,r2
81106ec4:	112d5900 	call	8112d590 <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
81106ec8:	e0bffe03 	ldbu	r2,-8(fp)
81106ecc:	10803fcc 	andi	r2,r2,255
81106ed0:	10000126 	beq	r2,zero,81106ed8 <vInitialTask+0x2b0>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
81106ed4:	110bc080 	call	8110bc08 <vFailStartTimerRetransmission>




	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81106ed8:	01003fc4 	movi	r4,255
81106edc:	112ba5c0 	call	8112ba5c <OSTaskDel>
81106ee0:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81106ee4:	e0bffe03 	ldbu	r2,-8(fp)
81106ee8:	10803fcc 	andi	r2,r2,255
81106eec:	10001026 	beq	r2,zero,81106f30 <vInitialTask+0x308>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106ef0:	e0bffe03 	ldbu	r2,-8(fp)
81106ef4:	10803fcc 	andi	r2,r2,255
81106ef8:	1009883a 	mov	r4,r2
81106efc:	110acb80 	call	8110acb8 <printErrorTask>
		#endif
		vFailDeleteInitialization();
81106f00:	110b2a40 	call	8110b2a4 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81106f04:	014009c4 	movi	r5,39
81106f08:	01000044 	movi	r4,1
81106f0c:	112b1c40 	call	8112b1c4 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81106f10:	01003fc4 	movi	r4,255
81106f14:	112ba5c0 	call	8112ba5c <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81106f18:	000f883a 	mov	r7,zero
81106f1c:	01800284 	movi	r6,10
81106f20:	000b883a 	mov	r5,zero
81106f24:	0009883a 	mov	r4,zero
81106f28:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
		}
81106f2c:	003ff806 	br	81106f10 <__reset+0xfb0e6f10>
	}

}
81106f30:	0001883a 	nop
81106f34:	e037883a 	mov	sp,fp
81106f38:	dfc00117 	ldw	ra,4(sp)
81106f3c:	df000017 	ldw	fp,0(sp)
81106f40:	dec00204 	addi	sp,sp,8
81106f44:	f800283a 	ret

81106f48 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81106f48:	defff604 	addi	sp,sp,-40
81106f4c:	de00012e 	bgeu	sp,et,81106f54 <vOutAckHandlerTask+0xc>
81106f50:	003b68fa 	trap	3
81106f54:	dfc00915 	stw	ra,36(sp)
81106f58:	df000815 	stw	fp,32(sp)
81106f5c:	df000804 	addi	fp,sp,32
81106f60:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81106f64:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81106f68:	e03ffb15 	stw	zero,-20(fp)
81106f6c:	e03ffc15 	stw	zero,-16(fp)
81106f70:	e03ffd15 	stw	zero,-12(fp)
81106f74:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81106f78:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81106f7c:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81106f80:	d0a05a17 	ldw	r2,-32408(gp)
81106f84:	100f883a 	mov	r7,r2
81106f88:	01800704 	movi	r6,28
81106f8c:	01400044 	movi	r5,1
81106f90:	01204534 	movhi	r4,33044
81106f94:	2124f604 	addi	r4,r4,-27688
81106f98:	110decc0 	call	8110decc <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81106f9c:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81106fa0:	e0bff917 	ldw	r2,-28(fp)
81106fa4:	10c00060 	cmpeqi	r3,r2,1
81106fa8:	1800071e 	bne	r3,zero,81106fc8 <vOutAckHandlerTask+0x80>
81106fac:	0080032e 	bgeu	zero,r2,81106fbc <vOutAckHandlerTask+0x74>
81106fb0:	108000a0 	cmpeqi	r2,r2,2
81106fb4:	1000451e 	bne	r2,zero,811070cc <vOutAckHandlerTask+0x184>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81106fb8:	00008406 	br	811071cc <vOutAckHandlerTask+0x284>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81106fbc:	00800044 	movi	r2,1
81106fc0:	e0bff915 	stw	r2,-28(fp)
				break;
81106fc4:	00008106 	br	811071cc <vOutAckHandlerTask+0x284>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
81106fc8:	d0a05917 	ldw	r2,-32412(gp)
81106fcc:	e0fffac4 	addi	r3,fp,-21
81106fd0:	180d883a 	mov	r6,r3
81106fd4:	000b883a 	mov	r5,zero
81106fd8:	1009883a 	mov	r4,r2
81106fdc:	112ab040 	call	8112ab04 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81106fe0:	e0bffac3 	ldbu	r2,-21(fp)
81106fe4:	10803fcc 	andi	r2,r2,255
81106fe8:	1000361e 	bne	r2,zero,811070c4 <vOutAckHandlerTask+0x17c>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81106fec:	d0a06717 	ldw	r2,-32356(gp)
81106ff0:	e0fffac4 	addi	r3,fp,-21
81106ff4:	180d883a 	mov	r6,r3
81106ff8:	000b883a 	mov	r5,zero
81106ffc:	1009883a 	mov	r4,r2
81107000:	1128af80 	call	81128af8 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81107004:	e0bffac3 	ldbu	r2,-21(fp)
81107008:	10803fcc 	andi	r2,r2,255
8110700c:	10002b1e 	bne	r2,zero,811070bc <vOutAckHandlerTask+0x174>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107010:	e03ffa45 	stb	zero,-23(fp)
81107014:	00002206 	br	811070a0 <vOutAckHandlerTask+0x158>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81107018:	e0fffa43 	ldbu	r3,-23(fp)
8110701c:	00a045b4 	movhi	r2,33046
81107020:	10be8904 	addi	r2,r2,-1500
81107024:	18c7883a 	add	r3,r3,r3
81107028:	18c7883a 	add	r3,r3,r3
8110702c:	10c5883a 	add	r2,r2,r3
81107030:	10800003 	ldbu	r2,0(r2)
81107034:	10803fcc 	andi	r2,r2,255
81107038:	1080201c 	xori	r2,r2,128
8110703c:	10bfe004 	addi	r2,r2,-128
81107040:	10001426 	beq	r2,zero,81107094 <vOutAckHandlerTask+0x14c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81107044:	e0fffa43 	ldbu	r3,-23(fp)
81107048:	00a045b4 	movhi	r2,33046
8110704c:	10be8904 	addi	r2,r2,-1500
81107050:	18c7883a 	add	r3,r3,r3
81107054:	18c7883a 	add	r3,r3,r3
81107058:	10c5883a 	add	r2,r2,r3
8110705c:	10c0000b 	ldhu	r3,0(r2)
81107060:	d0e0538d 	sth	r3,-32434(gp)
81107064:	1080008b 	ldhu	r2,2(r2)
81107068:	d0a0540d 	sth	r2,-32432(gp)
                                eSenderAckState = sSASending;
8110706c:	00800084 	movi	r2,2
81107070:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81107074:	e0fffa43 	ldbu	r3,-23(fp)
81107078:	00a045b4 	movhi	r2,33046
8110707c:	10be8904 	addi	r2,r2,-1500
81107080:	18c7883a 	add	r3,r3,r3
81107084:	18c7883a 	add	r3,r3,r3
81107088:	10c5883a 	add	r2,r2,r3
8110708c:	10000005 	stb	zero,0(r2)
                                break;
81107090:	00000606 	br	811070ac <vOutAckHandlerTask+0x164>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107094:	e0bffa43 	ldbu	r2,-23(fp)
81107098:	10800044 	addi	r2,r2,1
8110709c:	e0bffa45 	stb	r2,-23(fp)
811070a0:	e0bffa43 	ldbu	r2,-23(fp)
811070a4:	10800130 	cmpltui	r2,r2,4
811070a8:	103fdb1e 	bne	r2,zero,81107018 <__reset+0xfb0e7018>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
811070ac:	d0a06717 	ldw	r2,-32356(gp)
811070b0:	1009883a 	mov	r4,r2
811070b4:	112909c0 	call	8112909c <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811070b8:	00004406 	br	811071cc <vOutAckHandlerTask+0x284>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811070bc:	110afd40 	call	8110afd4 <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811070c0:	00004206 	br	811071cc <vOutAckHandlerTask+0x284>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811070c4:	110af6c0 	call	8110af6c <vFailGetCountSemaphoreSenderTask>
                }
                break;
811070c8:	00004006 	br	811071cc <vOutAckHandlerTask+0x284>
			case sSASending:
                /* In this state has a parsed ack packet in the variable xSAckLocal
                   we just need to calc the crc8 and create the uart packet to send. */
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
811070cc:	d0a053c3 	ldbu	r2,-32433(gp)
811070d0:	10c03fcc 	andi	r3,r2,255
811070d4:	18c0201c 	xori	r3,r3,128
811070d8:	18ffe004 	addi	r3,r3,-128
811070dc:	d0a0540b 	ldhu	r2,-32432(gp)
811070e0:	113fffcc 	andi	r4,r2,65535
811070e4:	e0bffb04 	addi	r2,fp,-20
811070e8:	200f883a 	mov	r7,r4
811070ec:	180d883a 	mov	r6,r3
811070f0:	01604534 	movhi	r5,33044
811070f4:	2964fe04 	addi	r5,r5,-27656
811070f8:	1009883a 	mov	r4,r2
811070fc:	110f0680 	call	8110f068 <sprintf>
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81107100:	e0bffb04 	addi	r2,fp,-20
81107104:	1009883a 	mov	r4,r2
81107108:	110f27c0 	call	8110f27c <strlen>
8110710c:	1007883a 	mov	r3,r2
81107110:	e0bffb04 	addi	r2,fp,-20
81107114:	180b883a 	mov	r5,r3
81107118:	1009883a 	mov	r4,r2
8110711c:	110ac5c0 	call	8110ac5c <ucCrc8wInit>
81107120:	e0bffa85 	stb	r2,-22(fp)
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81107124:	e13ffa83 	ldbu	r4,-22(fp)
81107128:	e0fffb04 	addi	r3,fp,-20
8110712c:	e0bffb04 	addi	r2,fp,-20
81107130:	200f883a 	mov	r7,r4
81107134:	180d883a 	mov	r6,r3
81107138:	01604534 	movhi	r5,33044
8110713c:	29650004 	addi	r5,r5,-27648
81107140:	1009883a 	mov	r4,r2
81107144:	110f0680 	call	8110f068 <sprintf>

                bSuccess = FALSE;
81107148:	e03ff815 	stw	zero,-32(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
8110714c:	00001406 	br	811071a0 <vOutAckHandlerTask+0x258>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
81107150:	d0a06817 	ldw	r2,-32352(gp)
81107154:	e0fffac4 	addi	r3,fp,-21
81107158:	180d883a 	mov	r6,r3
8110715c:	01400144 	movi	r5,5
81107160:	1009883a 	mov	r4,r2
81107164:	1128af80 	call	81128af8 <OSMutexPend>
                    if ( error_code == OS_NO_ERR ) {
81107168:	e0bffac3 	ldbu	r2,-21(fp)
8110716c:	10803fcc 	andi	r2,r2,255
81107170:	1000081e 	bne	r2,zero,81107194 <vOutAckHandlerTask+0x24c>
                        puts(cBufferAck);
81107174:	e0bffb04 	addi	r2,fp,-20
81107178:	1009883a 	mov	r4,r2
8110717c:	110ed240 	call	8110ed24 <puts>
                        OSMutexPost(xTxUARTMutex);
81107180:	d0a06817 	ldw	r2,-32352(gp)
81107184:	1009883a 	mov	r4,r2
81107188:	112909c0 	call	8112909c <OSMutexPost>
                        bSuccess = TRUE;
8110718c:	00800044 	movi	r2,1
81107190:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
81107194:	e0bffa03 	ldbu	r2,-24(fp)
81107198:	10800044 	addi	r2,r2,1
8110719c:	e0bffa05 	stb	r2,-24(fp)
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);

                bSuccess = FALSE;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
811071a0:	e0bff817 	ldw	r2,-32(fp)
811071a4:	1000031e 	bne	r2,zero,811071b4 <vOutAckHandlerTask+0x26c>
811071a8:	e0bffa03 	ldbu	r2,-24(fp)
811071ac:	108001b0 	cmpltui	r2,r2,6
811071b0:	103fe71e 	bne	r2,zero,81107150 <__reset+0xfb0e7150>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
811071b4:	e0bff817 	ldw	r2,-32(fp)
811071b8:	1000011e 	bne	r2,zero,811071c0 <vOutAckHandlerTask+0x278>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
811071bc:	110b10c0 	call	8110b10c <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
811071c0:	00800044 	movi	r2,1
811071c4:	e0bff915 	stw	r2,-28(fp)
				break;
811071c8:	0001883a 	nop
			default:
				break;
		}
	}
811071cc:	003f7406 	br	81106fa0 <__reset+0xfb0e6fa0>

811071d0 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
811071d0:	defffa04 	addi	sp,sp,-24
811071d4:	de00012e 	bgeu	sp,et,811071dc <vParserCommTask+0xc>
811071d8:	003b68fa 	trap	3
811071dc:	dfc00515 	stw	ra,20(sp)
811071e0:	df000415 	stw	fp,16(sp)
811071e4:	df000404 	addi	fp,sp,16
811071e8:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
811071ec:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tParserStates eParserMode;
	static tPreParsed PreParsedLocal;

	#ifdef DEBUG_ON
		debug(fp,"vParserRXTask, enter task.\n");
811071f0:	d0a05a17 	ldw	r2,-32408(gp)
811071f4:	100f883a 	mov	r7,r2
811071f8:	018006c4 	movi	r6,27
811071fc:	01400044 	movi	r5,1
81107200:	01204534 	movhi	r4,33044
81107204:	21250304 	addi	r4,r4,-27636
81107208:	110decc0 	call	8110decc <fwrite>
	#endif

	eParserMode = sConfiguring;
8110720c:	e03ffc15 	stw	zero,-16(fp)

	for(;;){

		switch (eParserMode) {
81107210:	e0bffc17 	ldw	r2,-16(fp)
81107214:	10800168 	cmpgeui	r2,r2,5
81107218:	1000981e 	bne	r2,zero,8110747c <vParserCommTask+0x2ac>
8110721c:	e0bffc17 	ldw	r2,-16(fp)
81107220:	100690ba 	slli	r3,r2,2
81107224:	00a04434 	movhi	r2,33040
81107228:	109c8e04 	addi	r2,r2,29240
8110722c:	1885883a 	add	r2,r3,r2
81107230:	10800017 	ldw	r2,0(r2)
81107234:	1000683a 	jmp	r2
81107238:	8110724c 	andi	r4,r16,16841
8110723c:	81107258 	cmpnei	r4,r16,16841
81107240:	81107324 	muli	r4,r16,16844
81107244:	811073b8 	rdprs	r4,r16,16846
81107248:	811073f8 	rdprs	r4,r16,16847
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
8110724c:	00800044 	movi	r2,1
81107250:	e0bffc15 	stw	r2,-16(fp)
				break;
81107254:	00008d06 	br	8110748c <vParserCommTask+0x2bc>
			case sWaitingConn:

				bSuccess = FALSE;
81107258:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingConn;
8110725c:	00800044 	movi	r2,1
81107260:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81107264:	d0a05c17 	ldw	r2,-32400(gp)
81107268:	e0fffe04 	addi	r3,fp,-8
8110726c:	180d883a 	mov	r6,r3
81107270:	000b883a 	mov	r5,zero
81107274:	1009883a 	mov	r4,r2
81107278:	112ab040 	call	8112ab04 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
8110727c:	e0bffe03 	ldbu	r2,-8(fp)
81107280:	10803fcc 	andi	r2,r2,255
81107284:	1000251e 	bne	r2,zero,8110731c <vParserCommTask+0x14c>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
81107288:	d0a05817 	ldw	r2,-32416(gp)
8110728c:	1009883a 	mov	r4,r2
81107290:	112ae8c0 	call	8112ae8c <OSSemPost>
81107294:	e0bffe05 	stb	r2,-8(fp)
                    if ( error_code == OS_ERR_NONE ) {
81107298:	e0bffe03 	ldbu	r2,-8(fp)
8110729c:	10803fcc 	andi	r2,r2,255
811072a0:	1000171e 	bne	r2,zero,81107300 <vParserCommTask+0x130>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
811072a4:	01204534 	movhi	r4,33044
811072a8:	21348004 	addi	r4,r4,-11776
811072ac:	11074900 	call	81107490 <getPreParsedPacket>
811072b0:	e0bffd15 	stw	r2,-12(fp)
                    	if (bSuccess == TRUE) {
811072b4:	e0bffd17 	ldw	r2,-12(fp)
811072b8:	10800058 	cmpnei	r2,r2,1
811072bc:	10000e1e 	bne	r2,zero,811072f8 <vParserCommTask+0x128>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
811072c0:	00a04534 	movhi	r2,33044
811072c4:	10b48004 	addi	r2,r2,-11776
811072c8:	10800103 	ldbu	r2,4(r2)
811072cc:	10803fcc 	andi	r2,r2,255
811072d0:	1080201c 	xori	r2,r2,128
811072d4:	10bfe004 	addi	r2,r2,-128
811072d8:	10800858 	cmpnei	r2,r2,33
811072dc:	1000031e 	bne	r2,zero,811072ec <vParserCommTask+0x11c>
                            	eParserMode = sReplyParsing;
811072e0:	00800104 	movi	r2,4
811072e4:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811072e8:	00006706 	br	81107488 <vParserCommTask+0x2b8>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
811072ec:	008000c4 	movi	r2,3
811072f0:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811072f4:	00006406 	br	81107488 <vParserCommTask+0x2b8>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
811072f8:	110b5600 	call	8110b560 <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811072fc:	00006206 	br	81107488 <vParserCommTask+0x2b8>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
81107300:	11075a80 	call	811075a8 <bTrySendSemaphoreCommInit>
81107304:	e0bffd15 	stw	r2,-12(fp)
						if (bSuccess == TRUE) {
81107308:	e0bffd17 	ldw	r2,-12(fp)
8110730c:	10800058 	cmpnei	r2,r2,1
81107310:	10005d1e 	bne	r2,zero,81107488 <vParserCommTask+0x2b8>
							vFailSendxSemCommInit();
81107314:	110ae200 	call	8110ae20 <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81107318:	00005b06 	br	81107488 <vParserCommTask+0x2b8>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
8110731c:	110b4900 	call	8110b490 <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
81107320:	00005906 	br	81107488 <vParserCommTask+0x2b8>
			case sWaitingMessage:

				bSuccess = FALSE;
81107324:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingMessage;
81107328:	00800084 	movi	r2,2
8110732c:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81107330:	d0a05c17 	ldw	r2,-32400(gp)
81107334:	e0fffe04 	addi	r3,fp,-8
81107338:	180d883a 	mov	r6,r3
8110733c:	000b883a 	mov	r5,zero
81107340:	1009883a 	mov	r4,r2
81107344:	112ab040 	call	8112ab04 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81107348:	e0bffe03 	ldbu	r2,-8(fp)
8110734c:	10803fcc 	andi	r2,r2,255
81107350:	1000171e 	bne	r2,zero,811073b0 <vParserCommTask+0x1e0>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81107354:	01204534 	movhi	r4,33044
81107358:	21348004 	addi	r4,r4,-11776
8110735c:	11074900 	call	81107490 <getPreParsedPacket>
81107360:	e0bffd15 	stw	r2,-12(fp)
					if (bSuccess == TRUE) {
81107364:	e0bffd17 	ldw	r2,-12(fp)
81107368:	10800058 	cmpnei	r2,r2,1
8110736c:	10000e1e 	bne	r2,zero,811073a8 <vParserCommTask+0x1d8>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
81107370:	00a04534 	movhi	r2,33044
81107374:	10b48004 	addi	r2,r2,-11776
81107378:	10800103 	ldbu	r2,4(r2)
8110737c:	10803fcc 	andi	r2,r2,255
81107380:	1080201c 	xori	r2,r2,128
81107384:	10bfe004 	addi	r2,r2,-128
81107388:	10800858 	cmpnei	r2,r2,33
8110738c:	1000031e 	bne	r2,zero,8110739c <vParserCommTask+0x1cc>
							eParserMode = sReplyParsing;
81107390:	00800104 	movi	r2,4
81107394:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81107398:	00003c06 	br	8110748c <vParserCommTask+0x2bc>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
8110739c:	008000c4 	movi	r2,3
811073a0:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811073a4:	00003906 	br	8110748c <vParserCommTask+0x2bc>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
811073a8:	110b5600 	call	8110b560 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
811073ac:	00003706 	br	8110748c <vParserCommTask+0x2bc>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
811073b0:	110b4900 	call	8110b490 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
811073b4:	00003506 	br	8110748c <vParserCommTask+0x2bc>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cType)
811073b8:	00a04534 	movhi	r2,33044
811073bc:	10b48004 	addi	r2,r2,-11776
811073c0:	10800103 	ldbu	r2,4(r2)
811073c4:	10803fcc 	andi	r2,r2,255
811073c8:	1080201c 	xori	r2,r2,128
811073cc:	10bfe004 	addi	r2,r2,-128
811073d0:	108010e0 	cmpeqi	r2,r2,67
811073d4:	10000426 	beq	r2,zero,811073e8 <vParserCommTask+0x218>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
							vSendEthConf();
811073d8:	1109b7c0 	call	81109b7c <vSendEthConf>
							eParserMode = sWaitingMessage;
811073dc:	00800084 	movi	r2,2
811073e0:	e0bffc15 	stw	r2,-16(fp)
						break;
811073e4:	00000306 	br	811073f4 <vParserCommTask+0x224>
					default:
						eParserMode = sWaitingMessage;
811073e8:	00800084 	movi	r2,2
811073ec:	e0bffc15 	stw	r2,-16(fp)
						break;
811073f0:	0001883a 	nop
				}
				break;
811073f4:	00002506 	br	8110748c <vParserCommTask+0x2bc>
			case sReplyParsing:
                switch (PreParsedLocal.cType)
811073f8:	00a04534 	movhi	r2,33044
811073fc:	10b48004 	addi	r2,r2,-11776
81107400:	10800103 	ldbu	r2,4(r2)
81107404:	10803fcc 	andi	r2,r2,255
81107408:	1080201c 	xori	r2,r2,128
8110740c:	10bfe004 	addi	r2,r2,-128
81107410:	10c01220 	cmpeqi	r3,r2,72
81107414:	1800121e 	bne	r3,zero,81107460 <vParserCommTask+0x290>
81107418:	10c01248 	cmpgei	r3,r2,73
8110741c:	1800031e 	bne	r3,zero,8110742c <vParserCommTask+0x25c>
81107420:	10801120 	cmpeqi	r2,r2,68
81107424:	1000081e 	bne	r2,zero,81107448 <vParserCommTask+0x278>
81107428:	00001006 	br	8110746c <vParserCommTask+0x29c>
8110742c:	10c01420 	cmpeqi	r3,r2,80
81107430:	1800081e 	bne	r3,zero,81107454 <vParserCommTask+0x284>
81107434:	108014e0 	cmpeqi	r2,r2,83
81107438:	10000c26 	beq	r2,zero,8110746c <vParserCommTask+0x29c>
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						eParserMode = sWaitingMessage;
8110743c:	00800084 	movi	r2,2
81107440:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107444:	00000c06 	br	81107478 <vParserCommTask+0x2a8>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/

						eParserMode = sWaitingMessage;
81107448:	00800084 	movi	r2,2
8110744c:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107450:	00000906 	br	81107478 <vParserCommTask+0x2a8>
                    case PUS_CMD: /*PUS command to MEB*/

						eParserMode = sWaitingMessage;
81107454:	00800084 	movi	r2,2
81107458:	e0bffc15 	stw	r2,-16(fp)
                        break;
8110745c:	00000606 	br	81107478 <vParserCommTask+0x2a8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						eParserMode = sWaitingMessage;
81107460:	00800084 	movi	r2,2
81107464:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107468:	00000306 	br	81107478 <vParserCommTask+0x2a8>
                    default:
						eParserMode = sWaitingMessage;
8110746c:	00800084 	movi	r2,2
81107470:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107474:	0001883a 	nop
                }
				break;
81107478:	00000406 	br	8110748c <vParserCommTask+0x2bc>
			default:
				eParserMode = sWaitingMessage;
8110747c:	00800084 	movi	r2,2
81107480:	e0bffc15 	stw	r2,-16(fp)
				break;
81107484:	00000106 	br	8110748c <vParserCommTask+0x2bc>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81107488:	0001883a 	nop
				break;
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
8110748c:	003f6006 	br	81107210 <__reset+0xfb0e7210>

81107490 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81107490:	defffb04 	addi	sp,sp,-20
81107494:	de00012e 	bgeu	sp,et,8110749c <getPreParsedPacket+0xc>
81107498:	003b68fa 	trap	3
8110749c:	dfc00415 	stw	ra,16(sp)
811074a0:	df000315 	stw	fp,12(sp)
811074a4:	df000304 	addi	fp,sp,12
811074a8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811074ac:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
811074b0:	d0a06117 	ldw	r2,-32380(gp)
811074b4:	e0fffe44 	addi	r3,fp,-7
811074b8:	180d883a 	mov	r6,r3
811074bc:	000b883a 	mov	r5,zero
811074c0:	1009883a 	mov	r4,r2
811074c4:	1128af80 	call	81128af8 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
811074c8:	e0bffe43 	ldbu	r2,-7(fp)
811074cc:	10803fcc 	andi	r2,r2,255
811074d0:	10002e1e 	bne	r2,zero,8110758c <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
811074d4:	e03ffe05 	stb	zero,-8(fp)
811074d8:	00002506 	br	81107570 <getPreParsedPacket+0xe0>
		{
            if ( xPreParsed[i].cType != 0 ) {
811074dc:	e0fffe03 	ldbu	r3,-8(fp)
811074e0:	00a045b4 	movhi	r2,33046
811074e4:	10be8d04 	addi	r2,r2,-1484
811074e8:	18c01324 	muli	r3,r3,76
811074ec:	10c5883a 	add	r2,r2,r3
811074f0:	10800104 	addi	r2,r2,4
811074f4:	10800003 	ldbu	r2,0(r2)
811074f8:	10803fcc 	andi	r2,r2,255
811074fc:	1080201c 	xori	r2,r2,128
81107500:	10bfe004 	addi	r2,r2,-128
81107504:	10001726 	beq	r2,zero,81107564 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
81107508:	e0fffe03 	ldbu	r3,-8(fp)
8110750c:	e13fff17 	ldw	r4,-4(fp)
81107510:	00a045b4 	movhi	r2,33046
81107514:	10be8d04 	addi	r2,r2,-1484
81107518:	18c01324 	muli	r3,r3,76
8110751c:	10c5883a 	add	r2,r2,r3
81107520:	2007883a 	mov	r3,r4
81107524:	1009883a 	mov	r4,r2
81107528:	00801304 	movi	r2,76
8110752c:	100d883a 	mov	r6,r2
81107530:	200b883a 	mov	r5,r4
81107534:	1809883a 	mov	r4,r3
81107538:	110e8e00 	call	8110e8e0 <memcpy>
                bSuccess = TRUE;
8110753c:	00800044 	movi	r2,1
81107540:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81107544:	e0fffe03 	ldbu	r3,-8(fp)
81107548:	00a045b4 	movhi	r2,33046
8110754c:	10be8d04 	addi	r2,r2,-1484
81107550:	18c01324 	muli	r3,r3,76
81107554:	10c5883a 	add	r2,r2,r3
81107558:	10800104 	addi	r2,r2,4
8110755c:	10000005 	stb	zero,0(r2)
                break;
81107560:	00000606 	br	8110757c <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107564:	e0bffe03 	ldbu	r2,-8(fp)
81107568:	10800044 	addi	r2,r2,1
8110756c:	e0bffe05 	stb	r2,-8(fp)
81107570:	e0bffe03 	ldbu	r2,-8(fp)
81107574:	10800130 	cmpltui	r2,r2,4
81107578:	103fd81e 	bne	r2,zero,811074dc <__reset+0xfb0e74dc>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
8110757c:	d0a06117 	ldw	r2,-32380(gp)
81107580:	1009883a 	mov	r4,r2
81107584:	112909c0 	call	8112909c <OSMutexPost>
81107588:	00000106 	br	81107590 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
8110758c:	110b4f80 	call	8110b4f8 <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
81107590:	e0bffd17 	ldw	r2,-12(fp)
}
81107594:	e037883a 	mov	sp,fp
81107598:	dfc00117 	ldw	ra,4(sp)
8110759c:	df000017 	ldw	fp,0(sp)
811075a0:	dec00204 	addi	sp,sp,8
811075a4:	f800283a 	ret

811075a8 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
811075a8:	defffc04 	addi	sp,sp,-16
811075ac:	de00012e 	bgeu	sp,et,811075b4 <bTrySendSemaphoreCommInit+0xc>
811075b0:	003b68fa 	trap	3
811075b4:	dfc00315 	stw	ra,12(sp)
811075b8:	df000215 	stw	fp,8(sp)
811075bc:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
811075c0:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
811075c4:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
811075c8:	d0a05a17 	ldw	r2,-32408(gp)
811075cc:	100f883a 	mov	r7,r2
811075d0:	01800e84 	movi	r6,58
811075d4:	01400044 	movi	r5,1
811075d8:	01204534 	movhi	r4,33044
811075dc:	21250a04 	addi	r4,r4,-27608
811075e0:	110decc0 	call	8110decc <fwrite>
	#endif

	ucCountRetries = 0;
811075e4:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
811075e8:	e0bfff03 	ldbu	r2,-4(fp)
811075ec:	10800044 	addi	r2,r2,1
811075f0:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
811075f4:	01000c84 	movi	r4,50
811075f8:	112c9900 	call	8112c990 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
811075fc:	d0a05817 	ldw	r2,-32416(gp)
81107600:	1009883a 	mov	r4,r2
81107604:	112ae8c0 	call	8112ae8c <OSSemPost>
81107608:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
8110760c:	e0bfff43 	ldbu	r2,-3(fp)
81107610:	10000326 	beq	r2,zero,81107620 <bTrySendSemaphoreCommInit+0x78>
81107614:	e0bfff03 	ldbu	r2,-4(fp)
81107618:	108002f0 	cmpltui	r2,r2,11
8110761c:	103ff21e 	bne	r2,zero,811075e8 <__reset+0xfb0e75e8>

	if ( error_code == OS_ERR_NONE ) {
81107620:	e0bfff43 	ldbu	r2,-3(fp)
81107624:	1000021e 	bne	r2,zero,81107630 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
81107628:	00800044 	movi	r2,1
8110762c:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81107630:	e0bffe17 	ldw	r2,-8(fp)
}
81107634:	e037883a 	mov	sp,fp
81107638:	dfc00117 	ldw	ra,4(sp)
8110763c:	df000017 	ldw	fp,0(sp)
81107640:	dec00204 	addi	sp,sp,8
81107644:	f800283a 	ret

81107648 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81107648:	deffeb04 	addi	sp,sp,-84
8110764c:	de00012e 	bgeu	sp,et,81107654 <vReceiverUartTask+0xc>
81107650:	003b68fa 	trap	3
81107654:	dfc01415 	stw	ra,80(sp)
81107658:	df001315 	stw	fp,76(sp)
8110765c:	df001304 	addi	fp,sp,76
81107660:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107664:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81107668:	d0a05a17 	ldw	r2,-32408(gp)
8110766c:	100f883a 	mov	r7,r2
81107670:	018006c4 	movi	r6,27
81107674:	01400044 	movi	r5,1
81107678:	01204534 	movhi	r4,33044
8110767c:	21251904 	addi	r4,r4,-27548
81107680:	110decc0 	call	8110decc <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
81107684:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
81107688:	e0bfed17 	ldw	r2,-76(fp)
8110768c:	10c00060 	cmpeqi	r3,r2,1
81107690:	1800091e 	bne	r3,zero,811076b8 <vReceiverUartTask+0x70>
81107694:	0080052e 	bgeu	zero,r2,811076ac <vReceiverUartTask+0x64>
81107698:	10c000a0 	cmpeqi	r3,r2,2
8110769c:	1800451e 	bne	r3,zero,811077b4 <vReceiverUartTask+0x16c>
811076a0:	108000e0 	cmpeqi	r2,r2,3
811076a4:	1000561e 	bne	r2,zero,81107800 <vReceiverUartTask+0x1b8>
811076a8:	00005f06 	br	81107828 <vReceiverUartTask+0x1e0>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
811076ac:	00800044 	movi	r2,1
811076b0:	e0bfed15 	stw	r2,-76(fp)
                break;
811076b4:	00005f06 	br	81107834 <vReceiverUartTask+0x1ec>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
811076b8:	e0bfef04 	addi	r2,fp,-68
811076bc:	01801004 	movi	r6,64
811076c0:	000b883a 	mov	r5,zero
811076c4:	1009883a 	mov	r4,r2
811076c8:	110ea300 	call	8110ea30 <memset>
                scanf("%s", cReceiveBuffer);
811076cc:	e0bfef04 	addi	r2,fp,-68
811076d0:	100b883a 	mov	r5,r2
811076d4:	01204534 	movhi	r4,33044
811076d8:	21252004 	addi	r4,r4,-27520
811076dc:	110ef8c0 	call	8110ef8c <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
811076e0:	e0bfef04 	addi	r2,fp,-68
811076e4:	01604534 	movhi	r5,33044
811076e8:	29749304 	addi	r5,r5,-11700
811076ec:	1009883a 	mov	r4,r2
811076f0:	11078380 	call	81107838 <bPreParser>
811076f4:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
811076f8:	e0bfee17 	ldw	r2,-72(fp)
811076fc:	10800058 	cmpnei	r2,r2,1
81107700:	1000161e 	bne	r2,zero,8110775c <vReceiverUartTask+0x114>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
81107704:	00a04534 	movhi	r2,33044
81107708:	10b49304 	addi	r2,r2,-11700
8110770c:	10800103 	ldbu	r2,4(r2)
81107710:	10803fcc 	andi	r2,r2,255
81107714:	1080201c 	xori	r2,r2,128
81107718:	10bfe004 	addi	r2,r2,-128
8110771c:	10800fe0 	cmpeqi	r2,r2,63
81107720:	1000081e 	bne	r2,zero,81107744 <vReceiverUartTask+0xfc>
81107724:	00a04534 	movhi	r2,33044
81107728:	10b49304 	addi	r2,r2,-11700
8110772c:	10800103 	ldbu	r2,4(r2)
81107730:	10803fcc 	andi	r2,r2,255
81107734:	1080201c 	xori	r2,r2,128
81107738:	10bfe004 	addi	r2,r2,-128
8110773c:	10800858 	cmpnei	r2,r2,33
81107740:	1000031e 	bne	r2,zero,81107750 <vReceiverUartTask+0x108>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
81107744:	00800084 	movi	r2,2
81107748:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110774c:	00003906 	br	81107834 <vReceiverUartTask+0x1ec>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81107750:	008000c4 	movi	r2,3
81107754:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81107758:	00003606 	br	81107834 <vReceiverUartTask+0x1ec>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110775c:	00a04534 	movhi	r2,33044
81107760:	10b49304 	addi	r2,r2,-11700
81107764:	00c008c4 	movi	r3,35
81107768:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
8110776c:	00a04534 	movhi	r2,33044
81107770:	10b49304 	addi	r2,r2,-11700
81107774:	00c00a44 	movi	r3,41
81107778:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
8110777c:	00a04534 	movhi	r2,33044
81107780:	10b49304 	addi	r2,r2,-11700
81107784:	00c00044 	movi	r3,1
81107788:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110778c:	01204534 	movhi	r4,33044
81107790:	21349304 	addi	r4,r4,-11700
81107794:	1107da80 	call	81107da8 <setPreAckSenderFreePos>
81107798:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
8110779c:	e0bfee17 	ldw	r2,-72(fp)
811077a0:	1000011e 	bne	r2,zero,811077a8 <vReceiverUartTask+0x160>
                        vFailSendNack();
811077a4:	110b6300 	call	8110b630 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
811077a8:	00800044 	movi	r2,1
811077ac:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
811077b0:	00002006 	br	81107834 <vReceiverUartTask+0x1ec>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
811077b4:	01204534 	movhi	r4,33044
811077b8:	21349304 	addi	r4,r4,-11700
811077bc:	1107da80 	call	81107da8 <setPreAckSenderFreePos>
811077c0:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
811077c4:	e0bfee17 	ldw	r2,-72(fp)
811077c8:	10800058 	cmpnei	r2,r2,1
811077cc:	1000081e 	bne	r2,zero,811077f0 <vReceiverUartTask+0x1a8>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
811077d0:	01204534 	movhi	r4,33044
811077d4:	21349304 	addi	r4,r4,-11700
811077d8:	1107c480 	call	81107c48 <setPreParsedFreePos>
811077dc:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
811077e0:	e0bfee17 	ldw	r2,-72(fp)
811077e4:	1000031e 	bne	r2,zero,811077f4 <vReceiverUartTask+0x1ac>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
811077e8:	110b7000 	call	8110b700 <vFailSetPreParsedBuffer>
811077ec:	00000106 	br	811077f4 <vReceiverUartTask+0x1ac>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
811077f0:	110b6980 	call	8110b698 <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
811077f4:	00800044 	movi	r2,1
811077f8:	e0bfed15 	stw	r2,-76(fp)
                break;
811077fc:	00000d06 	br	81107834 <vReceiverUartTask+0x1ec>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
81107800:	01204534 	movhi	r4,33044
81107804:	21349304 	addi	r4,r4,-11700
81107808:	1107f4c0 	call	81107f4c <setPreAckReceiverFreePos>
8110780c:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
81107810:	e0bfee17 	ldw	r2,-72(fp)
81107814:	1000011e 	bne	r2,zero,8110781c <vReceiverUartTask+0x1d4>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
81107818:	110b7680 	call	8110b768 <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110781c:	00800044 	movi	r2,1
81107820:	e0bfed15 	stw	r2,-76(fp)
                break;
81107824:	00000306 	br	81107834 <vReceiverUartTask+0x1ec>
            default:
                eReaderRXMode = sGetRxUart;
81107828:	00800044 	movi	r2,1
8110782c:	e0bfed15 	stw	r2,-76(fp)
                break;
81107830:	0001883a 	nop
        }

    }
81107834:	003f9406 	br	81107688 <__reset+0xfb0e7688>

81107838 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
81107838:	defff204 	addi	sp,sp,-56
8110783c:	de00012e 	bgeu	sp,et,81107844 <bPreParser+0xc>
81107840:	003b68fa 	trap	3
81107844:	dfc00d15 	stw	ra,52(sp)
81107848:	df000c15 	stw	fp,48(sp)
8110784c:	dc000b15 	stw	r16,44(sp)
81107850:	df000c04 	addi	fp,sp,48
81107854:	e13ffd15 	stw	r4,-12(fp)
81107858:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110785c:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
81107860:	e13ffd17 	ldw	r4,-12(fp)
81107864:	110f27c0 	call	8110f27c <strlen>
81107868:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110786c:	01400ec4 	movi	r5,59
81107870:	e13ffd17 	ldw	r4,-12(fp)
81107874:	1109e5c0 	call	81109e5c <siPosStr>
81107878:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
8110787c:	01401004 	movi	r5,64
81107880:	e13ffd17 	ldw	r4,-12(fp)
81107884:	1109e5c0 	call	81109e5c <siPosStr>
81107888:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
8110788c:	014008c4 	movi	r5,35
81107890:	e13ffd17 	ldw	r4,-12(fp)
81107894:	1109e5c0 	call	81109e5c <siPosStr>
81107898:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
8110789c:	e17ff80b 	ldhu	r5,-32(fp)
811078a0:	e0bff88b 	ldhu	r2,-30(fp)
811078a4:	10ffffcc 	andi	r3,r2,65535
811078a8:	18e0001c 	xori	r3,r3,32768
811078ac:	18e00004 	addi	r3,r3,-32768
811078b0:	293fffcc 	andi	r4,r5,65535
811078b4:	2120001c 	xori	r4,r4,32768
811078b8:	21200004 	addi	r4,r4,-32768
811078bc:	20c0010e 	bge	r4,r3,811078c4 <bPreParser+0x8c>
811078c0:	2805883a 	mov	r2,r5
811078c4:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
811078c8:	01400fc4 	movi	r5,63
811078cc:	e13ffd17 	ldw	r4,-12(fp)
811078d0:	1109e5c0 	call	81109e5c <siPosStr>
811078d4:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
811078d8:	01400844 	movi	r5,33
811078dc:	e13ffd17 	ldw	r4,-12(fp)
811078e0:	1109e5c0 	call	81109e5c <siPosStr>
811078e4:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
811078e8:	e17ff90b 	ldhu	r5,-28(fp)
811078ec:	e0bff98b 	ldhu	r2,-26(fp)
811078f0:	10ffffcc 	andi	r3,r2,65535
811078f4:	18e0001c 	xori	r3,r3,32768
811078f8:	18e00004 	addi	r3,r3,-32768
811078fc:	293fffcc 	andi	r4,r5,65535
81107900:	2120001c 	xori	r4,r4,32768
81107904:	21200004 	addi	r4,r4,-32768
81107908:	20c0010e 	bge	r4,r3,81107910 <bPreParser+0xd8>
8110790c:	2805883a 	mov	r2,r5
81107910:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
81107914:	e17ff90b 	ldhu	r5,-28(fp)
81107918:	e0bff80b 	ldhu	r2,-32(fp)
8110791c:	10ffffcc 	andi	r3,r2,65535
81107920:	18e0001c 	xori	r3,r3,32768
81107924:	18e00004 	addi	r3,r3,-32768
81107928:	293fffcc 	andi	r4,r5,65535
8110792c:	2120001c 	xori	r4,r4,32768
81107930:	21200004 	addi	r4,r4,-32768
81107934:	20c0010e 	bge	r4,r3,8110793c <bPreParser+0x104>
81107938:	2805883a 	mov	r2,r5
8110793c:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
81107940:	01401f04 	movi	r5,124
81107944:	e13ffd17 	ldw	r4,-12(fp)
81107948:	1109e5c0 	call	81109e5c <siPosStr>
8110794c:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
81107950:	e0fff78f 	ldh	r3,-34(fp)
81107954:	e0bff70f 	ldh	r2,-36(fp)
81107958:	10bfffc4 	addi	r2,r2,-1
8110795c:	1880ac1e 	bne	r3,r2,81107c10 <bPreParser+0x3d8>
81107960:	e0fffa0f 	ldh	r3,-24(fp)
81107964:	e0bff78f 	ldh	r2,-34(fp)
81107968:	1880a90e 	bge	r3,r2,81107c10 <bPreParser+0x3d8>
8110796c:	e0fff90f 	ldh	r3,-28(fp)
81107970:	e0bffa0f 	ldh	r2,-24(fp)
81107974:	1880a60e 	bge	r3,r2,81107c10 <bPreParser+0x3d8>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
81107978:	e0bff90f 	ldh	r2,-28(fp)
8110797c:	e0fffd17 	ldw	r3,-12(fp)
81107980:	1889883a 	add	r4,r3,r2
81107984:	e0fffa0f 	ldh	r3,-24(fp)
81107988:	e0bff90f 	ldh	r2,-28(fp)
8110798c:	1885c83a 	sub	r2,r3,r2
81107990:	100b883a 	mov	r5,r2
81107994:	110ac5c0 	call	8110ac5c <ucCrc8wInit>
81107998:	1007883a 	mov	r3,r2
8110799c:	e0bffe17 	ldw	r2,-8(fp)
811079a0:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
811079a4:	e0bff90f 	ldh	r2,-28(fp)
811079a8:	e0fffd17 	ldw	r3,-12(fp)
811079ac:	1885883a 	add	r2,r3,r2
811079b0:	10c00003 	ldbu	r3,0(r2)
811079b4:	e0bffe17 	ldw	r2,-8(fp)
811079b8:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811079bc:	e0bffe17 	ldw	r2,-8(fp)
811079c0:	10800103 	ldbu	r2,4(r2)
811079c4:	10803fcc 	andi	r2,r2,255
811079c8:	1080201c 	xori	r2,r2,128
811079cc:	10bfe004 	addi	r2,r2,-128
811079d0:	108008d8 	cmpnei	r2,r2,35
811079d4:	1000091e 	bne	r2,zero,811079fc <bPreParser+0x1c4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
811079d8:	e0bffe17 	ldw	r2,-8(fp)
811079dc:	00c00d84 	movi	r3,54
811079e0:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
811079e4:	e0bffe17 	ldw	r2,-8(fp)
811079e8:	00c00d84 	movi	r3,54
811079ec:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
811079f0:	00800044 	movi	r2,1
811079f4:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811079f8:	00008606 	br	81107c14 <bPreParser+0x3dc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
811079fc:	e0bff90f 	ldh	r2,-28(fp)
81107a00:	10800044 	addi	r2,r2,1
81107a04:	e0fffd17 	ldw	r3,-12(fp)
81107a08:	1885883a 	add	r2,r3,r2
81107a0c:	10c00003 	ldbu	r3,0(r2)
81107a10:	e0bffe17 	ldw	r2,-8(fp)
81107a14:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
81107a18:	e0bffe17 	ldw	r2,-8(fp)
81107a1c:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
81107a20:	e0bffe17 	ldw	r2,-8(fp)
81107a24:	10800204 	addi	r2,r2,8
81107a28:	01800804 	movi	r6,32
81107a2c:	000b883a 	mov	r5,zero
81107a30:	1009883a 	mov	r4,r2
81107a34:	110ea300 	call	8110ea30 <memset>

            i = siIniReq + 3; /* "?C:i..." */
81107a38:	e0bff90b 	ldhu	r2,-28(fp)
81107a3c:	108000c4 	addi	r2,r2,3
81107a40:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
81107a44:	e0bffac4 	addi	r2,fp,-21
81107a48:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
81107a4c:	e0bffac4 	addi	r2,fp,-21
81107a50:	01800184 	movi	r6,6
81107a54:	000b883a 	mov	r5,zero
81107a58:	1009883a 	mov	r4,r2
81107a5c:	110ea300 	call	8110ea30 <memset>
                do {
                    c = buffer[i];
81107a60:	e0bff503 	ldbu	r2,-44(fp)
81107a64:	e0fffd17 	ldw	r3,-12(fp)
81107a68:	1885883a 	add	r2,r3,r2
81107a6c:	10800003 	ldbu	r2,0(r2)
81107a70:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
81107a74:	d0e00917 	ldw	r3,-32732(gp)
81107a78:	e0bffa87 	ldb	r2,-22(fp)
81107a7c:	10800044 	addi	r2,r2,1
81107a80:	1885883a 	add	r2,r3,r2
81107a84:	10800003 	ldbu	r2,0(r2)
81107a88:	10803fcc 	andi	r2,r2,255
81107a8c:	1080010c 	andi	r2,r2,4
81107a90:	10000626 	beq	r2,zero,81107aac <bPreParser+0x274>
                        (*p_inteiro) = c;
81107a94:	e0bff617 	ldw	r2,-40(fp)
81107a98:	e0fffa83 	ldbu	r3,-22(fp)
81107a9c:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
81107aa0:	e0bff617 	ldw	r2,-40(fp)
81107aa4:	10800044 	addi	r2,r2,1
81107aa8:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
81107aac:	e0bff503 	ldbu	r2,-44(fp)
81107ab0:	10800044 	addi	r2,r2,1
81107ab4:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
81107ab8:	e0bff70f 	ldh	r2,-36(fp)
81107abc:	e0fff503 	ldbu	r3,-44(fp)
81107ac0:	1880090e 	bge	r3,r2,81107ae8 <bPreParser+0x2b0>
81107ac4:	e0bffa87 	ldb	r2,-22(fp)
81107ac8:	10800ea0 	cmpeqi	r2,r2,58
81107acc:	1000061e 	bne	r2,zero,81107ae8 <bPreParser+0x2b0>
81107ad0:	e0bffa87 	ldb	r2,-22(fp)
81107ad4:	10800ee0 	cmpeqi	r2,r2,59
81107ad8:	1000031e 	bne	r2,zero,81107ae8 <bPreParser+0x2b0>
81107adc:	e0bffa87 	ldb	r2,-22(fp)
81107ae0:	10801f18 	cmpnei	r2,r2,124
81107ae4:	103fde1e 	bne	r2,zero,81107a60 <__reset+0xfb0e7a60>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81107ae8:	e0bff617 	ldw	r2,-40(fp)
81107aec:	00c00284 	movi	r3,10
81107af0:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
81107af4:	e0bffa87 	ldb	r2,-22(fp)
81107af8:	10800ea0 	cmpeqi	r2,r2,58
81107afc:	1000031e 	bne	r2,zero,81107b0c <bPreParser+0x2d4>
81107b00:	e0bffa87 	ldb	r2,-22(fp)
81107b04:	10801f18 	cmpnei	r2,r2,124
81107b08:	10001a1e 	bne	r2,zero,81107b74 <bPreParser+0x33c>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
81107b0c:	e0bffe17 	ldw	r2,-8(fp)
81107b10:	10800183 	ldbu	r2,6(r2)
81107b14:	10803fcc 	andi	r2,r2,255
81107b18:	10800828 	cmpgeui	r2,r2,32
81107b1c:	1000041e 	bne	r2,zero,81107b30 <bPreParser+0x2f8>
81107b20:	e0bffe17 	ldw	r2,-8(fp)
81107b24:	10800183 	ldbu	r2,6(r2)
81107b28:	14003fcc 	andi	r16,r2,255
81107b2c:	00000106 	br	81107b34 <bPreParser+0x2fc>
81107b30:	04000804 	movi	r16,32
81107b34:	e0bffac4 	addi	r2,fp,-21
81107b38:	1009883a 	mov	r4,r2
81107b3c:	110d7840 	call	8110d784 <atoi>
81107b40:	1009883a 	mov	r4,r2
81107b44:	e0fffe17 	ldw	r3,-8(fp)
81107b48:	80800104 	addi	r2,r16,4
81107b4c:	1085883a 	add	r2,r2,r2
81107b50:	1885883a 	add	r2,r3,r2
81107b54:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
81107b58:	e0bffe17 	ldw	r2,-8(fp)
81107b5c:	10800183 	ldbu	r2,6(r2)
81107b60:	10800044 	addi	r2,r2,1
81107b64:	1007883a 	mov	r3,r2
81107b68:	e0bffe17 	ldw	r2,-8(fp)
81107b6c:	10c00185 	stb	r3,6(r2)
81107b70:	00000906 	br	81107b98 <bPreParser+0x360>
                }
                else if ( c == FINAL_CHAR )
81107b74:	e0bffa87 	ldb	r2,-22(fp)
81107b78:	10800ed8 	cmpnei	r2,r2,59
81107b7c:	1000061e 	bne	r2,zero,81107b98 <bPreParser+0x360>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
81107b80:	e0bffac4 	addi	r2,fp,-21
81107b84:	1009883a 	mov	r4,r2
81107b88:	110d7840 	call	8110d784 <atoi>
81107b8c:	1007883a 	mov	r3,r2
81107b90:	e0bffe17 	ldw	r2,-8(fp)
81107b94:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
81107b98:	e0bffa87 	ldb	r2,-22(fp)
81107b9c:	10800ee0 	cmpeqi	r2,r2,59
81107ba0:	1000031e 	bne	r2,zero,81107bb0 <bPreParser+0x378>
81107ba4:	e0bff70f 	ldh	r2,-36(fp)
81107ba8:	e0fff503 	ldbu	r3,-44(fp)
81107bac:	18bfa516 	blt	r3,r2,81107a44 <__reset+0xfb0e7a44>

            if ( c == FINAL_CHAR )
81107bb0:	e0bffa87 	ldb	r2,-22(fp)
81107bb4:	10800ed8 	cmpnei	r2,r2,59
81107bb8:	1000131e 	bne	r2,zero,81107c08 <bPreParser+0x3d0>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
81107bbc:	e0bffe17 	ldw	r2,-8(fp)
81107bc0:	10c01243 	ldbu	r3,73(r2)
81107bc4:	e0bffe17 	ldw	r2,-8(fp)
81107bc8:	10801203 	ldbu	r2,72(r2)
81107bcc:	18c03fcc 	andi	r3,r3,255
81107bd0:	10803fcc 	andi	r2,r2,255
81107bd4:	1880031e 	bne	r3,r2,81107be4 <bPreParser+0x3ac>
                    bSuccess = TRUE;
81107bd8:	00800044 	movi	r2,1
81107bdc:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107be0:	00000c06 	br	81107c14 <bPreParser+0x3dc>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
81107be4:	d0a05a17 	ldw	r2,-32408(gp)
81107be8:	100f883a 	mov	r7,r2
81107bec:	018005c4 	movi	r6,23
81107bf0:	01400044 	movi	r5,1
81107bf4:	01204534 	movhi	r4,33044
81107bf8:	21252104 	addi	r4,r4,-27516
81107bfc:	110decc0 	call	8110decc <fwrite>
                    #endif
                    bSuccess = FALSE;
81107c00:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107c04:	00000306 	br	81107c14 <bPreParser+0x3dc>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
81107c08:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107c0c:	00000106 	br	81107c14 <bPreParser+0x3dc>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
81107c10:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
81107c14:	e13ffd17 	ldw	r4,-12(fp)
81107c18:	110f27c0 	call	8110f27c <strlen>
81107c1c:	100d883a 	mov	r6,r2
81107c20:	000b883a 	mov	r5,zero
81107c24:	e13ffd17 	ldw	r4,-12(fp)
81107c28:	110ea300 	call	8110ea30 <memset>

    return bSuccess;
81107c2c:	e0bff417 	ldw	r2,-48(fp)
}
81107c30:	e6ffff04 	addi	sp,fp,-4
81107c34:	dfc00217 	ldw	ra,8(sp)
81107c38:	df000117 	ldw	fp,4(sp)
81107c3c:	dc000017 	ldw	r16,0(sp)
81107c40:	dec00304 	addi	sp,sp,12
81107c44:	f800283a 	ret

81107c48 <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
81107c48:	defffb04 	addi	sp,sp,-20
81107c4c:	de00012e 	bgeu	sp,et,81107c54 <setPreParsedFreePos+0xc>
81107c50:	003b68fa 	trap	3
81107c54:	dfc00415 	stw	ra,16(sp)
81107c58:	df000315 	stw	fp,12(sp)
81107c5c:	df000304 	addi	fp,sp,12
81107c60:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107c64:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107c68:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107c6c:	00004306 	br	81107d7c <setPreParsedFreePos+0x134>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81107c70:	d0a06117 	ldw	r2,-32380(gp)
81107c74:	e0fffe84 	addi	r3,fp,-6
81107c78:	180d883a 	mov	r6,r3
81107c7c:	01400084 	movi	r5,2
81107c80:	1009883a 	mov	r4,r2
81107c84:	1128af80 	call	81128af8 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107c88:	e0bffe83 	ldbu	r2,-6(fp)
81107c8c:	10803fcc 	andi	r2,r2,255
81107c90:	1000371e 	bne	r2,zero,81107d70 <setPreParsedFreePos+0x128>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107c94:	e03ffe45 	stb	zero,-7(fp)
81107c98:	00002e06 	br	81107d54 <setPreParsedFreePos+0x10c>
            {
                if ( xPreParsed[i].cType == 0 ) {
81107c9c:	e0fffe43 	ldbu	r3,-7(fp)
81107ca0:	00a045b4 	movhi	r2,33046
81107ca4:	10be8d04 	addi	r2,r2,-1484
81107ca8:	18c01324 	muli	r3,r3,76
81107cac:	10c5883a 	add	r2,r2,r3
81107cb0:	10800104 	addi	r2,r2,4
81107cb4:	10800003 	ldbu	r2,0(r2)
81107cb8:	10803fcc 	andi	r2,r2,255
81107cbc:	1080201c 	xori	r2,r2,128
81107cc0:	10bfe004 	addi	r2,r2,-128
81107cc4:	1000201e 	bne	r2,zero,81107d48 <setPreParsedFreePos+0x100>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
81107cc8:	e0fffe43 	ldbu	r3,-7(fp)
81107ccc:	00a045b4 	movhi	r2,33046
81107cd0:	10be8d04 	addi	r2,r2,-1484
81107cd4:	18c01324 	muli	r3,r3,76
81107cd8:	10c7883a 	add	r3,r2,r3
81107cdc:	e0bfff17 	ldw	r2,-4(fp)
81107ce0:	1009883a 	mov	r4,r2
81107ce4:	00801304 	movi	r2,76
81107ce8:	100d883a 	mov	r6,r2
81107cec:	200b883a 	mov	r5,r4
81107cf0:	1809883a 	mov	r4,r3
81107cf4:	110e8e00 	call	8110e8e0 <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
81107cf8:	d0a05c17 	ldw	r2,-32400(gp)
81107cfc:	1009883a 	mov	r4,r2
81107d00:	112ae8c0 	call	8112ae8c <OSSemPost>
81107d04:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81107d08:	e0bffe83 	ldbu	r2,-6(fp)
81107d0c:	10803fcc 	andi	r2,r2,255
81107d10:	1000031e 	bne	r2,zero,81107d20 <setPreParsedFreePos+0xd8>
                        bSuccess = TRUE;
81107d14:	00800044 	movi	r2,1
81107d18:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81107d1c:	00001006 	br	81107d60 <setPreParsedFreePos+0x118>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
81107d20:	110ae880 	call	8110ae88 <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
81107d24:	e0fffe43 	ldbu	r3,-7(fp)
81107d28:	00a045b4 	movhi	r2,33046
81107d2c:	10be8d04 	addi	r2,r2,-1484
81107d30:	18c01324 	muli	r3,r3,76
81107d34:	10c5883a 	add	r2,r2,r3
81107d38:	10800104 	addi	r2,r2,4
81107d3c:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81107d40:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81107d44:	00000606 	br	81107d60 <setPreParsedFreePos+0x118>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107d48:	e0bffe43 	ldbu	r2,-7(fp)
81107d4c:	10800044 	addi	r2,r2,1
81107d50:	e0bffe45 	stb	r2,-7(fp)
81107d54:	e0bffe43 	ldbu	r2,-7(fp)
81107d58:	10800130 	cmpltui	r2,r2,4
81107d5c:	103fcf1e 	bne	r2,zero,81107c9c <__reset+0xfb0e7c9c>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
81107d60:	d0a06117 	ldw	r2,-32380(gp)
81107d64:	1009883a 	mov	r4,r2
81107d68:	112909c0 	call	8112909c <OSMutexPost>
81107d6c:	00000306 	br	81107d7c <setPreParsedFreePos+0x134>
        } else {
            ucCountRetries++;
81107d70:	e0bffe03 	ldbu	r2,-8(fp)
81107d74:	10800044 	addi	r2,r2,1
81107d78:	e0bffe05 	stb	r2,-8(fp)
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107d7c:	e0bffd17 	ldw	r2,-12(fp)
81107d80:	1000031e 	bne	r2,zero,81107d90 <setPreParsedFreePos+0x148>
81107d84:	e0bffe03 	ldbu	r2,-8(fp)
81107d88:	108000b0 	cmpltui	r2,r2,2
81107d8c:	103fb81e 	bne	r2,zero,81107c70 <__reset+0xfb0e7c70>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81107d90:	e0bffd17 	ldw	r2,-12(fp)
}
81107d94:	e037883a 	mov	sp,fp
81107d98:	dfc00117 	ldw	ra,4(sp)
81107d9c:	df000017 	ldw	fp,0(sp)
81107da0:	dec00204 	addi	sp,sp,8
81107da4:	f800283a 	ret

81107da8 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
81107da8:	defffb04 	addi	sp,sp,-20
81107dac:	de00012e 	bgeu	sp,et,81107db4 <setPreAckSenderFreePos+0xc>
81107db0:	003b68fa 	trap	3
81107db4:	dfc00415 	stw	ra,16(sp)
81107db8:	df000315 	stw	fp,12(sp)
81107dbc:	df000304 	addi	fp,sp,12
81107dc0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107dc4:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107dc8:	e03ffe05 	stb	zero,-8(fp)

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107dcc:	00005406 	br	81107f20 <setPreAckSenderFreePos+0x178>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
81107dd0:	d0a06717 	ldw	r2,-32356(gp)
81107dd4:	e0fffe84 	addi	r3,fp,-6
81107dd8:	180d883a 	mov	r6,r3
81107ddc:	01400104 	movi	r5,4
81107de0:	1009883a 	mov	r4,r2
81107de4:	1128af80 	call	81128af8 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107de8:	e0bffe83 	ldbu	r2,-6(fp)
81107dec:	10803fcc 	andi	r2,r2,255
81107df0:	1000481e 	bne	r2,zero,81107f14 <setPreAckSenderFreePos+0x16c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107df4:	e03ffe45 	stb	zero,-7(fp)
81107df8:	00003f06 	br	81107ef8 <setPreAckSenderFreePos+0x150>
            {
                if ( xSenderACK[i].cType == 0 ) {
81107dfc:	e0fffe43 	ldbu	r3,-7(fp)
81107e00:	00a045b4 	movhi	r2,33046
81107e04:	10be8904 	addi	r2,r2,-1500
81107e08:	18c7883a 	add	r3,r3,r3
81107e0c:	18c7883a 	add	r3,r3,r3
81107e10:	10c5883a 	add	r2,r2,r3
81107e14:	10800003 	ldbu	r2,0(r2)
81107e18:	10803fcc 	andi	r2,r2,255
81107e1c:	1080201c 	xori	r2,r2,128
81107e20:	10bfe004 	addi	r2,r2,-128
81107e24:	1000311e 	bne	r2,zero,81107eec <setPreAckSenderFreePos+0x144>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
81107e28:	e0fffe43 	ldbu	r3,-7(fp)
81107e2c:	e0bfff17 	ldw	r2,-4(fp)
81107e30:	11000103 	ldbu	r4,4(r2)
81107e34:	00a045b4 	movhi	r2,33046
81107e38:	10be8904 	addi	r2,r2,-1500
81107e3c:	18c7883a 	add	r3,r3,r3
81107e40:	18c7883a 	add	r3,r3,r3
81107e44:	10c5883a 	add	r2,r2,r3
81107e48:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
81107e4c:	e0fffe43 	ldbu	r3,-7(fp)
81107e50:	e0bfff17 	ldw	r2,-4(fp)
81107e54:	11000143 	ldbu	r4,5(r2)
81107e58:	00a045b4 	movhi	r2,33046
81107e5c:	10be8904 	addi	r2,r2,-1500
81107e60:	18c7883a 	add	r3,r3,r3
81107e64:	18c7883a 	add	r3,r3,r3
81107e68:	10c5883a 	add	r2,r2,r3
81107e6c:	10800044 	addi	r2,r2,1
81107e70:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
81107e74:	e0fffe43 	ldbu	r3,-7(fp)
81107e78:	e0bfff17 	ldw	r2,-4(fp)
81107e7c:	1100020b 	ldhu	r4,8(r2)
81107e80:	00a045b4 	movhi	r2,33046
81107e84:	10be8904 	addi	r2,r2,-1500
81107e88:	18c7883a 	add	r3,r3,r3
81107e8c:	18c7883a 	add	r3,r3,r3
81107e90:	10c5883a 	add	r2,r2,r3
81107e94:	10800084 	addi	r2,r2,2
81107e98:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
81107e9c:	d0a05917 	ldw	r2,-32412(gp)
81107ea0:	1009883a 	mov	r4,r2
81107ea4:	112ae8c0 	call	8112ae8c <OSSemPost>
81107ea8:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81107eac:	e0bffe83 	ldbu	r2,-6(fp)
81107eb0:	10803fcc 	andi	r2,r2,255
81107eb4:	1000031e 	bne	r2,zero,81107ec4 <setPreAckSenderFreePos+0x11c>
                        bSuccess = TRUE;
81107eb8:	00800044 	movi	r2,1
81107ebc:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81107ec0:	00001006 	br	81107f04 <setPreAckSenderFreePos+0x15c>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
81107ec4:	110af200 	call	8110af20 <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
81107ec8:	e0fffe43 	ldbu	r3,-7(fp)
81107ecc:	00a045b4 	movhi	r2,33046
81107ed0:	10be8904 	addi	r2,r2,-1500
81107ed4:	18c7883a 	add	r3,r3,r3
81107ed8:	18c7883a 	add	r3,r3,r3
81107edc:	10c5883a 	add	r2,r2,r3
81107ee0:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81107ee4:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81107ee8:	00000606 	br	81107f04 <setPreAckSenderFreePos+0x15c>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107eec:	e0bffe43 	ldbu	r2,-7(fp)
81107ef0:	10800044 	addi	r2,r2,1
81107ef4:	e0bffe45 	stb	r2,-7(fp)
81107ef8:	e0bffe43 	ldbu	r2,-7(fp)
81107efc:	10800130 	cmpltui	r2,r2,4
81107f00:	103fbe1e 	bne	r2,zero,81107dfc <__reset+0xfb0e7dfc>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
81107f04:	d0a06717 	ldw	r2,-32356(gp)
81107f08:	1009883a 	mov	r4,r2
81107f0c:	112909c0 	call	8112909c <OSMutexPost>
81107f10:	00000306 	br	81107f20 <setPreAckSenderFreePos+0x178>
        } else {
            ucCountRetries++;
81107f14:	e0bffe03 	ldbu	r2,-8(fp)
81107f18:	10800044 	addi	r2,r2,1
81107f1c:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107f20:	e0bffd17 	ldw	r2,-12(fp)
81107f24:	1000031e 	bne	r2,zero,81107f34 <setPreAckSenderFreePos+0x18c>
81107f28:	e0bffe03 	ldbu	r2,-8(fp)
81107f2c:	108000b0 	cmpltui	r2,r2,2
81107f30:	103fa71e 	bne	r2,zero,81107dd0 <__reset+0xfb0e7dd0>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81107f34:	e0bffd17 	ldw	r2,-12(fp)
}
81107f38:	e037883a 	mov	sp,fp
81107f3c:	dfc00117 	ldw	ra,4(sp)
81107f40:	df000017 	ldw	fp,0(sp)
81107f44:	dec00204 	addi	sp,sp,8
81107f48:	f800283a 	ret

81107f4c <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
81107f4c:	defffb04 	addi	sp,sp,-20
81107f50:	de00012e 	bgeu	sp,et,81107f58 <setPreAckReceiverFreePos+0xc>
81107f54:	003b68fa 	trap	3
81107f58:	dfc00415 	stw	ra,16(sp)
81107f5c:	df000315 	stw	fp,12(sp)
81107f60:	df000304 	addi	fp,sp,12
81107f64:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107f68:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107f6c:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107f70:	00005406 	br	811080c4 <setPreAckReceiverFreePos+0x178>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81107f74:	d0a05d17 	ldw	r2,-32396(gp)
81107f78:	e0fffe84 	addi	r3,fp,-6
81107f7c:	180d883a 	mov	r6,r3
81107f80:	01400084 	movi	r5,2
81107f84:	1009883a 	mov	r4,r2
81107f88:	1128af80 	call	81128af8 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107f8c:	e0bffe83 	ldbu	r2,-6(fp)
81107f90:	10803fcc 	andi	r2,r2,255
81107f94:	1000481e 	bne	r2,zero,811080b8 <setPreAckReceiverFreePos+0x16c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
81107f98:	e03ffe45 	stb	zero,-7(fp)
81107f9c:	00003f06 	br	8110809c <setPreAckReceiverFreePos+0x150>
            {
                if ( xReceivedACK[i].cType == 0 ) {
81107fa0:	e0fffe43 	ldbu	r3,-7(fp)
81107fa4:	00a045b4 	movhi	r2,33046
81107fa8:	10b68504 	addi	r2,r2,-9708
81107fac:	18c7883a 	add	r3,r3,r3
81107fb0:	18c7883a 	add	r3,r3,r3
81107fb4:	10c5883a 	add	r2,r2,r3
81107fb8:	10800003 	ldbu	r2,0(r2)
81107fbc:	10803fcc 	andi	r2,r2,255
81107fc0:	1080201c 	xori	r2,r2,128
81107fc4:	10bfe004 	addi	r2,r2,-128
81107fc8:	1000311e 	bne	r2,zero,81108090 <setPreAckReceiverFreePos+0x144>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
81107fcc:	e0fffe43 	ldbu	r3,-7(fp)
81107fd0:	e0bfff17 	ldw	r2,-4(fp)
81107fd4:	11000103 	ldbu	r4,4(r2)
81107fd8:	00a045b4 	movhi	r2,33046
81107fdc:	10b68504 	addi	r2,r2,-9708
81107fe0:	18c7883a 	add	r3,r3,r3
81107fe4:	18c7883a 	add	r3,r3,r3
81107fe8:	10c5883a 	add	r2,r2,r3
81107fec:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
81107ff0:	e0fffe43 	ldbu	r3,-7(fp)
81107ff4:	e0bfff17 	ldw	r2,-4(fp)
81107ff8:	11000143 	ldbu	r4,5(r2)
81107ffc:	00a045b4 	movhi	r2,33046
81108000:	10b68504 	addi	r2,r2,-9708
81108004:	18c7883a 	add	r3,r3,r3
81108008:	18c7883a 	add	r3,r3,r3
8110800c:	10c5883a 	add	r2,r2,r3
81108010:	10800044 	addi	r2,r2,1
81108014:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
81108018:	e0fffe43 	ldbu	r3,-7(fp)
8110801c:	e0bfff17 	ldw	r2,-4(fp)
81108020:	1100020b 	ldhu	r4,8(r2)
81108024:	00a045b4 	movhi	r2,33046
81108028:	10b68504 	addi	r2,r2,-9708
8110802c:	18c7883a 	add	r3,r3,r3
81108030:	18c7883a 	add	r3,r3,r3
81108034:	10c5883a 	add	r2,r2,r3
81108038:	10800084 	addi	r2,r2,2
8110803c:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
81108040:	d0a05e17 	ldw	r2,-32392(gp)
81108044:	1009883a 	mov	r4,r2
81108048:	112ae8c0 	call	8112ae8c <OSSemPost>
8110804c:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81108050:	e0bffe83 	ldbu	r2,-6(fp)
81108054:	10803fcc 	andi	r2,r2,255
81108058:	1000031e 	bne	r2,zero,81108068 <setPreAckReceiverFreePos+0x11c>
                        bSuccess = TRUE;
8110805c:	00800044 	movi	r2,1
81108060:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81108064:	00001006 	br	811080a8 <setPreAckReceiverFreePos+0x15c>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
81108068:	110aed40 	call	8110aed4 <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
8110806c:	e0fffe43 	ldbu	r3,-7(fp)
81108070:	00a045b4 	movhi	r2,33046
81108074:	10b68504 	addi	r2,r2,-9708
81108078:	18c7883a 	add	r3,r3,r3
8110807c:	18c7883a 	add	r3,r3,r3
81108080:	10c5883a 	add	r2,r2,r3
81108084:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81108088:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110808c:	00000606 	br	811080a8 <setPreAckReceiverFreePos+0x15c>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
81108090:	e0bffe43 	ldbu	r2,-7(fp)
81108094:	10800044 	addi	r2,r2,1
81108098:	e0bffe45 	stb	r2,-7(fp)
8110809c:	e0bffe43 	ldbu	r2,-7(fp)
811080a0:	10800130 	cmpltui	r2,r2,4
811080a4:	103fbe1e 	bne	r2,zero,81107fa0 <__reset+0xfb0e7fa0>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
811080a8:	d0a05d17 	ldw	r2,-32396(gp)
811080ac:	1009883a 	mov	r4,r2
811080b0:	112909c0 	call	8112909c <OSMutexPost>
811080b4:	00000306 	br	811080c4 <setPreAckReceiverFreePos+0x178>
        } else {
            ucCountRetries++;
811080b8:	e0bffe03 	ldbu	r2,-8(fp)
811080bc:	10800044 	addi	r2,r2,1
811080c0:	e0bffe05 	stb	r2,-8(fp)
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
811080c4:	e0bffd17 	ldw	r2,-12(fp)
811080c8:	1000031e 	bne	r2,zero,811080d8 <setPreAckReceiverFreePos+0x18c>
811080cc:	e0bffe03 	ldbu	r2,-8(fp)
811080d0:	108000b0 	cmpltui	r2,r2,2
811080d4:	103fa71e 	bne	r2,zero,81107f74 <__reset+0xfb0e7f74>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
811080d8:	e0bffd17 	ldw	r2,-12(fp)
}
811080dc:	e037883a 	mov	sp,fp
811080e0:	dfc00117 	ldw	ra,4(sp)
811080e4:	df000017 	ldw	fp,0(sp)
811080e8:	dec00204 	addi	sp,sp,8
811080ec:	f800283a 	ret

811080f0 <MemDMATask>:
void Set_SpW_Led(char c_SpwID);

/* OS Tasks */

/* Mem DMA Task, configure and manages the Memories DMA for use of the SpW Transparent Interface*/
void MemDMATask(void *task_data) {
811080f0:	defffd04 	addi	sp,sp,-12
811080f4:	de00012e 	bgeu	sp,et,811080fc <MemDMATask+0xc>
811080f8:	003b68fa 	trap	3
811080fc:	dfc00215 	stw	ra,8(sp)
81108100:	df000115 	stw	fp,4(sp)
81108104:	df000104 	addi	fp,sp,4
81108108:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"mem dma\" Task (Prio:%d) \n", MEM_DMA_TASK_PRIORITY);
8110810c:	014003c4 	movi	r5,15
81108110:	01204534 	movhi	r4,33044
81108114:	21252704 	addi	r4,r4,-27492
81108118:	110ebf80 	call	8110ebf8 <printf>
	/* read address - source address (data buffer) */
	/* write address - destination address (transparent interface) */
	/* transfer size bytes - number of bytes to be transfered */

	while (1) {
		OSTimeDlyHMSM(0, 1, 0, 0);
8110811c:	000f883a 	mov	r7,zero
81108120:	000d883a 	mov	r6,zero
81108124:	01400044 	movi	r5,1
81108128:	0009883a 	mov	r4,zero
8110812c:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
81108130:	003ffa06 	br	8110811c <__reset+0xfb0e811c>

81108134 <SPWATask>:
}

/* SPW A Task, configure and monitor the SpW A channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWATask(void *task_data) {
81108134:	defffd04 	addi	sp,sp,-12
81108138:	de00012e 	bgeu	sp,et,81108140 <SPWATask+0xc>
8110813c:	003b68fa 	trap	3
81108140:	dfc00215 	stw	ra,8(sp)
81108144:	df000115 	stw	fp,4(sp)
81108148:	df000104 	addi	fp,sp,4
8110814c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw a\" Task (Prio:%d) \n", SPW_A_TASK_PRIORITY);
81108150:	01400504 	movi	r5,20
81108154:	01204534 	movhi	r4,33044
81108158:	21253004 	addi	r4,r4,-27456
8110815c:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('A');
81108160:	01001044 	movi	r4,65
81108164:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('A');
81108168:	01001044 	movi	r4,65
8110816c:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81108170:	01c00284 	movi	r7,10
81108174:	000d883a 	mov	r6,zero
81108178:	000b883a 	mov	r5,zero
8110817c:	0009883a 	mov	r4,zero
81108180:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
81108184:	003ff806 	br	81108168 <__reset+0xfb0e8168>

81108188 <SPWBTask>:
}

/* SPW B Task, configure and monitor the SpW B channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWBTask(void *task_data) {
81108188:	defffd04 	addi	sp,sp,-12
8110818c:	de00012e 	bgeu	sp,et,81108194 <SPWBTask+0xc>
81108190:	003b68fa 	trap	3
81108194:	dfc00215 	stw	ra,8(sp)
81108198:	df000115 	stw	fp,4(sp)
8110819c:	df000104 	addi	fp,sp,4
811081a0:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw b\" Task (Prio:%d) \n", SPW_B_TASK_PRIORITY);
811081a4:	01400544 	movi	r5,21
811081a8:	01204534 	movhi	r4,33044
811081ac:	21253904 	addi	r4,r4,-27420
811081b0:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('B');
811081b4:	01001084 	movi	r4,66
811081b8:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('B');
811081bc:	01001084 	movi	r4,66
811081c0:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
811081c4:	01c00284 	movi	r7,10
811081c8:	000d883a 	mov	r6,zero
811081cc:	000b883a 	mov	r5,zero
811081d0:	0009883a 	mov	r4,zero
811081d4:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
811081d8:	003ff806 	br	811081bc <__reset+0xfb0e81bc>

811081dc <SPWCTask>:
}

/* SPW C Task, configure and monitor the SpW C channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWCTask(void *task_data) {
811081dc:	defffd04 	addi	sp,sp,-12
811081e0:	de00012e 	bgeu	sp,et,811081e8 <SPWCTask+0xc>
811081e4:	003b68fa 	trap	3
811081e8:	dfc00215 	stw	ra,8(sp)
811081ec:	df000115 	stw	fp,4(sp)
811081f0:	df000104 	addi	fp,sp,4
811081f4:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw c\" Task (Prio:%d) \n", SPW_C_TASK_PRIORITY);
811081f8:	01400584 	movi	r5,22
811081fc:	01204534 	movhi	r4,33044
81108200:	21254204 	addi	r4,r4,-27384
81108204:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('C');
81108208:	010010c4 	movi	r4,67
8110820c:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('C');
81108210:	010010c4 	movi	r4,67
81108214:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81108218:	01c00284 	movi	r7,10
8110821c:	000d883a 	mov	r6,zero
81108220:	000b883a 	mov	r5,zero
81108224:	0009883a 	mov	r4,zero
81108228:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
8110822c:	003ff806 	br	81108210 <__reset+0xfb0e8210>

81108230 <SPWDTask>:
}

/* SPW D Task, configure and monitor the SpW D channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWDTask(void *task_data) {
81108230:	defffd04 	addi	sp,sp,-12
81108234:	de00012e 	bgeu	sp,et,8110823c <SPWDTask+0xc>
81108238:	003b68fa 	trap	3
8110823c:	dfc00215 	stw	ra,8(sp)
81108240:	df000115 	stw	fp,4(sp)
81108244:	df000104 	addi	fp,sp,4
81108248:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw d\" Task (Prio:%d) \n", SPW_D_TASK_PRIORITY);
8110824c:	014005c4 	movi	r5,23
81108250:	01204534 	movhi	r4,33044
81108254:	21254b04 	addi	r4,r4,-27348
81108258:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('D');
8110825c:	01001104 	movi	r4,68
81108260:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('D');
81108264:	01001104 	movi	r4,68
81108268:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
8110826c:	01c00284 	movi	r7,10
81108270:	000d883a 	mov	r6,zero
81108274:	000b883a 	mov	r5,zero
81108278:	0009883a 	mov	r4,zero
8110827c:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
81108280:	003ff806 	br	81108264 <__reset+0xfb0e8264>

81108284 <SPWETask>:
}

/* SPW E Task, configure and monitor the SpW E channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWETask(void *task_data) {
81108284:	defffd04 	addi	sp,sp,-12
81108288:	de00012e 	bgeu	sp,et,81108290 <SPWETask+0xc>
8110828c:	003b68fa 	trap	3
81108290:	dfc00215 	stw	ra,8(sp)
81108294:	df000115 	stw	fp,4(sp)
81108298:	df000104 	addi	fp,sp,4
8110829c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw e\" Task (Prio:%d) \n", SPW_E_TASK_PRIORITY);
811082a0:	01400604 	movi	r5,24
811082a4:	01204534 	movhi	r4,33044
811082a8:	21255404 	addi	r4,r4,-27312
811082ac:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('E');
811082b0:	01001144 	movi	r4,69
811082b4:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('E');
811082b8:	01001144 	movi	r4,69
811082bc:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
811082c0:	01c00284 	movi	r7,10
811082c4:	000d883a 	mov	r6,zero
811082c8:	000b883a 	mov	r5,zero
811082cc:	0009883a 	mov	r4,zero
811082d0:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
811082d4:	003ff806 	br	811082b8 <__reset+0xfb0e82b8>

811082d8 <SPWFTask>:
}

/* SPW F Task, configure and monitor the SpW F channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWFTask(void *task_data) {
811082d8:	defffd04 	addi	sp,sp,-12
811082dc:	de00012e 	bgeu	sp,et,811082e4 <SPWFTask+0xc>
811082e0:	003b68fa 	trap	3
811082e4:	dfc00215 	stw	ra,8(sp)
811082e8:	df000115 	stw	fp,4(sp)
811082ec:	df000104 	addi	fp,sp,4
811082f0:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw f\" Task (Prio:%d) \n", SPW_F_TASK_PRIORITY);
811082f4:	01400644 	movi	r5,25
811082f8:	01204534 	movhi	r4,33044
811082fc:	21255d04 	addi	r4,r4,-27276
81108300:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('F');
81108304:	01001184 	movi	r4,70
81108308:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('F');
8110830c:	01001184 	movi	r4,70
81108310:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81108314:	01c00284 	movi	r7,10
81108318:	000d883a 	mov	r6,zero
8110831c:	000b883a 	mov	r5,zero
81108320:	0009883a 	mov	r4,zero
81108324:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
81108328:	003ff806 	br	8110830c <__reset+0xfb0e830c>

8110832c <SPWGTask>:
}

/* SPW G Task, configure and monitor the SpW G channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWGTask(void *task_data) {
8110832c:	defffd04 	addi	sp,sp,-12
81108330:	de00012e 	bgeu	sp,et,81108338 <SPWGTask+0xc>
81108334:	003b68fa 	trap	3
81108338:	dfc00215 	stw	ra,8(sp)
8110833c:	df000115 	stw	fp,4(sp)
81108340:	df000104 	addi	fp,sp,4
81108344:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw g\" Task (Prio:%d) \n", SPW_G_TASK_PRIORITY);
81108348:	01400684 	movi	r5,26
8110834c:	01204534 	movhi	r4,33044
81108350:	21256604 	addi	r4,r4,-27240
81108354:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('G');
81108358:	010011c4 	movi	r4,71
8110835c:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('G');
81108360:	010011c4 	movi	r4,71
81108364:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81108368:	01c00284 	movi	r7,10
8110836c:	000d883a 	mov	r6,zero
81108370:	000b883a 	mov	r5,zero
81108374:	0009883a 	mov	r4,zero
81108378:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
8110837c:	003ff806 	br	81108360 <__reset+0xfb0e8360>

81108380 <SPWHTask>:
}

/* SPW H Task, configure and monitor the SpW H channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWHTask(void *task_data) {
81108380:	defffd04 	addi	sp,sp,-12
81108384:	de00012e 	bgeu	sp,et,8110838c <SPWHTask+0xc>
81108388:	003b68fa 	trap	3
8110838c:	dfc00215 	stw	ra,8(sp)
81108390:	df000115 	stw	fp,4(sp)
81108394:	df000104 	addi	fp,sp,4
81108398:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw h\" Task (Prio:%d) \n", SPW_H_TASK_PRIORITY);
8110839c:	014006c4 	movi	r5,27
811083a0:	01204534 	movhi	r4,33044
811083a4:	21256f04 	addi	r4,r4,-27204
811083a8:	110ebf80 	call	8110ebf8 <printf>

	Configure_SpW_Autostart('H');
811083ac:	01001204 	movi	r4,72
811083b0:	110870c0 	call	8110870c <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('H');
811083b4:	01001204 	movi	r4,72
811083b8:	11087dc0 	call	811087dc <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
811083bc:	01c00284 	movi	r7,10
811083c0:	000d883a 	mov	r6,zero
811083c4:	000b883a 	mov	r5,zero
811083c8:	0009883a 	mov	r4,zero
811083cc:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
811083d0:	003ff806 	br	811083b4 <__reset+0xfb0e83b4>

811083d4 <LogTask>:
}

/* Log Task, show the FPGA core temperature in the seven segments display, update rate of 1 s */
void LogTask(void *task_data) {
811083d4:	defffd04 	addi	sp,sp,-12
811083d8:	de00012e 	bgeu	sp,et,811083e0 <LogTask+0xc>
811083dc:	003b68fa 	trap	3
811083e0:	dfc00215 	stw	ra,8(sp)
811083e4:	df000115 	stw	fp,4(sp)
811083e8:	df000104 	addi	fp,sp,4
811083ec:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"log\" Task (Prio:%d) \n", LOG_TASK_PRIORITY);
811083f0:	01400704 	movi	r5,28
811083f4:	01204534 	movhi	r4,33044
811083f8:	21257804 	addi	r4,r4,-27168
811083fc:	110ebf80 	call	8110ebf8 <printf>
	while (1) {
		TEMP_Read(&tempFPGA, &tempBoard);
81108400:	d1605584 	addi	r5,gp,-32426
81108404:	d1205544 	addi	r4,gp,-32427
81108408:	11021580 	call	81102158 <TEMP_Read>
		bSSDisplayUpdate(tempFPGA);
8110840c:	d0a05543 	ldbu	r2,-32427(gp)
81108410:	10803fcc 	andi	r2,r2,255
81108414:	1009883a 	mov	r4,r2
81108418:	11066d40 	call	811066d4 <bSSDisplayUpdate>
		OSTimeDlyHMSM(0, 0, 1, 0);
8110841c:	000f883a 	mov	r7,zero
81108420:	01800044 	movi	r6,1
81108424:	000b883a 	mov	r5,zero
81108428:	0009883a 	mov	r4,zero
8110842c:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
	}
81108430:	003ff306 	br	81108400 <__reset+0xfb0e8400>

81108434 <Init_Simucam_Tasks>:
}

/* Initialize the SimuCam Tasks */
void Init_Simucam_Tasks(void) {
81108434:	defff904 	addi	sp,sp,-28
81108438:	de00012e 	bgeu	sp,et,81108440 <Init_Simucam_Tasks+0xc>
8110843c:	003b68fa 	trap	3
81108440:	dfc00615 	stw	ra,24(sp)
81108444:	df000515 	stw	fp,20(sp)
81108448:	df000504 	addi	fp,sp,20

	error_code = OSTaskCreateExt(MemDMATask,
8110844c:	d8000415 	stw	zero,16(sp)
81108450:	d8000315 	stw	zero,12(sp)
81108454:	00820004 	movi	r2,2048
81108458:	d8800215 	stw	r2,8(sp)
8110845c:	00a04574 	movhi	r2,33045
81108460:	10b5b004 	addi	r2,r2,-10560
81108464:	d8800115 	stw	r2,4(sp)
81108468:	008003c4 	movi	r2,15
8110846c:	d8800015 	stw	r2,0(sp)
81108470:	01c003c4 	movi	r7,15
81108474:	01a04574 	movhi	r6,33045
81108478:	31bdb004 	addi	r6,r6,-2368
8110847c:	000b883a 	mov	r5,zero
81108480:	01204474 	movhi	r4,33041
81108484:	21203c04 	addi	r4,r4,-32528
81108488:	112b8700 	call	8112b870 <OSTaskCreateExt>
8110848c:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWATask,
81108490:	d8000415 	stw	zero,16(sp)
81108494:	d8000315 	stw	zero,12(sp)
81108498:	00820004 	movi	r2,2048
8110849c:	d8800215 	stw	r2,8(sp)
811084a0:	00a04534 	movhi	r2,33044
811084a4:	1095b004 	addi	r2,r2,22208
811084a8:	d8800115 	stw	r2,4(sp)
811084ac:	00800504 	movi	r2,20
811084b0:	d8800015 	stw	r2,0(sp)
811084b4:	01c00504 	movi	r7,20
811084b8:	01a04534 	movhi	r6,33044
811084bc:	319db004 	addi	r6,r6,30400
811084c0:	000b883a 	mov	r5,zero
811084c4:	01204474 	movhi	r4,33041
811084c8:	21204d04 	addi	r4,r4,-32460
811084cc:	112b8700 	call	8112b870 <OSTaskCreateExt>
811084d0:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWBTask,
811084d4:	d8000415 	stw	zero,16(sp)
811084d8:	d8000315 	stw	zero,12(sp)
811084dc:	00820004 	movi	r2,2048
811084e0:	d8800215 	stw	r2,8(sp)
811084e4:	00a04574 	movhi	r2,33045
811084e8:	10a5b004 	addi	r2,r2,-26944
811084ec:	d8800115 	stw	r2,4(sp)
811084f0:	00800544 	movi	r2,21
811084f4:	d8800015 	stw	r2,0(sp)
811084f8:	01c00544 	movi	r7,21
811084fc:	01a04574 	movhi	r6,33045
81108500:	31adb004 	addi	r6,r6,-18752
81108504:	000b883a 	mov	r5,zero
81108508:	01204474 	movhi	r4,33041
8110850c:	21206204 	addi	r4,r4,-32376
81108510:	112b8700 	call	8112b870 <OSTaskCreateExt>
81108514:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWCTask,
81108518:	d8000415 	stw	zero,16(sp)
8110851c:	d8000315 	stw	zero,12(sp)
81108520:	00820004 	movi	r2,2048
81108524:	d8800215 	stw	r2,8(sp)
81108528:	00a04574 	movhi	r2,33045
8110852c:	10bdb004 	addi	r2,r2,-2368
81108530:	d8800115 	stw	r2,4(sp)
81108534:	00800584 	movi	r2,22
81108538:	d8800015 	stw	r2,0(sp)
8110853c:	01c00584 	movi	r7,22
81108540:	01a04574 	movhi	r6,33045
81108544:	3185b004 	addi	r6,r6,5824
81108548:	000b883a 	mov	r5,zero
8110854c:	01204474 	movhi	r4,33041
81108550:	21207704 	addi	r4,r4,-32292
81108554:	112b8700 	call	8112b870 <OSTaskCreateExt>
81108558:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWDTask,
8110855c:	d8000415 	stw	zero,16(sp)
81108560:	d8000315 	stw	zero,12(sp)
81108564:	00820004 	movi	r2,2048
81108568:	d8800215 	stw	r2,8(sp)
8110856c:	00a04534 	movhi	r2,33044
81108570:	108db004 	addi	r2,r2,14016
81108574:	d8800115 	stw	r2,4(sp)
81108578:	008005c4 	movi	r2,23
8110857c:	d8800015 	stw	r2,0(sp)
81108580:	01c005c4 	movi	r7,23
81108584:	01a04534 	movhi	r6,33044
81108588:	3195b004 	addi	r6,r6,22208
8110858c:	000b883a 	mov	r5,zero
81108590:	01204474 	movhi	r4,33041
81108594:	21208c04 	addi	r4,r4,-32208
81108598:	112b8700 	call	8112b870 <OSTaskCreateExt>
8110859c:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWETask,
811085a0:	d8000415 	stw	zero,16(sp)
811085a4:	d8000315 	stw	zero,12(sp)
811085a8:	00820004 	movi	r2,2048
811085ac:	d8800215 	stw	r2,8(sp)
811085b0:	00a04534 	movhi	r2,33044
811085b4:	1085b004 	addi	r2,r2,5824
811085b8:	d8800115 	stw	r2,4(sp)
811085bc:	00800604 	movi	r2,24
811085c0:	d8800015 	stw	r2,0(sp)
811085c4:	01c00604 	movi	r7,24
811085c8:	01a04534 	movhi	r6,33044
811085cc:	318db004 	addi	r6,r6,14016
811085d0:	000b883a 	mov	r5,zero
811085d4:	01204474 	movhi	r4,33041
811085d8:	2120a104 	addi	r4,r4,-32124
811085dc:	112b8700 	call	8112b870 <OSTaskCreateExt>
811085e0:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWFTask,
811085e4:	d8000415 	stw	zero,16(sp)
811085e8:	d8000315 	stw	zero,12(sp)
811085ec:	00820004 	movi	r2,2048
811085f0:	d8800215 	stw	r2,8(sp)
811085f4:	00a04534 	movhi	r2,33044
811085f8:	10bdb004 	addi	r2,r2,-2368
811085fc:	d8800115 	stw	r2,4(sp)
81108600:	00800644 	movi	r2,25
81108604:	d8800015 	stw	r2,0(sp)
81108608:	01c00644 	movi	r7,25
8110860c:	01a04534 	movhi	r6,33044
81108610:	3185b004 	addi	r6,r6,5824
81108614:	000b883a 	mov	r5,zero
81108618:	01204474 	movhi	r4,33041
8110861c:	2120b604 	addi	r4,r4,-32040
81108620:	112b8700 	call	8112b870 <OSTaskCreateExt>
81108624:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWGTask,
81108628:	d8000415 	stw	zero,16(sp)
8110862c:	d8000315 	stw	zero,12(sp)
81108630:	00820004 	movi	r2,2048
81108634:	d8800215 	stw	r2,8(sp)
81108638:	00a04574 	movhi	r2,33045
8110863c:	10adb004 	addi	r2,r2,-18752
81108640:	d8800115 	stw	r2,4(sp)
81108644:	00800684 	movi	r2,26
81108648:	d8800015 	stw	r2,0(sp)
8110864c:	01c00684 	movi	r7,26
81108650:	01a04574 	movhi	r6,33045
81108654:	31b5b004 	addi	r6,r6,-10560
81108658:	000b883a 	mov	r5,zero
8110865c:	01204474 	movhi	r4,33041
81108660:	2120cb04 	addi	r4,r4,-31956
81108664:	112b8700 	call	8112b870 <OSTaskCreateExt>
81108668:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWHTask,
8110866c:	d8000415 	stw	zero,16(sp)
81108670:	d8000315 	stw	zero,12(sp)
81108674:	00820004 	movi	r2,2048
81108678:	d8800215 	stw	r2,8(sp)
8110867c:	00a04534 	movhi	r2,33044
81108680:	10b5b004 	addi	r2,r2,-10560
81108684:	d8800115 	stw	r2,4(sp)
81108688:	008006c4 	movi	r2,27
8110868c:	d8800015 	stw	r2,0(sp)
81108690:	01c006c4 	movi	r7,27
81108694:	01a04534 	movhi	r6,33044
81108698:	31bdb004 	addi	r6,r6,-2368
8110869c:	000b883a 	mov	r5,zero
811086a0:	01204474 	movhi	r4,33041
811086a4:	2120e004 	addi	r4,r4,-31872
811086a8:	112b8700 	call	8112b870 <OSTaskCreateExt>
811086ac:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);
	

	error_code = OSTaskCreateExt(LogTask,
811086b0:	d8000415 	stw	zero,16(sp)
811086b4:	d8000315 	stw	zero,12(sp)
811086b8:	00820004 	movi	r2,2048
811086bc:	d8800215 	stw	r2,8(sp)
811086c0:	00a04534 	movhi	r2,33044
811086c4:	109db004 	addi	r2,r2,30400
811086c8:	d8800115 	stw	r2,4(sp)
811086cc:	00800704 	movi	r2,28
811086d0:	d8800015 	stw	r2,0(sp)
811086d4:	01c00704 	movi	r7,28
811086d8:	01a04574 	movhi	r6,33045
811086dc:	31a5b004 	addi	r6,r6,-26944
811086e0:	000b883a 	mov	r5,zero
811086e4:	01204474 	movhi	r4,33041
811086e8:	2120f504 	addi	r4,r4,-31788
811086ec:	112b8700 	call	8112b870 <OSTaskCreateExt>
811086f0:	d0a05505 	stb	r2,-32428(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


}
811086f4:	0001883a 	nop
811086f8:	e037883a 	mov	sp,fp
811086fc:	dfc00117 	ldw	ra,4(sp)
81108700:	df000017 	ldw	fp,0(sp)
81108704:	dec00204 	addi	sp,sp,8
81108708:	f800283a 	ret

8110870c <Configure_SpW_Autostart>:

void Configure_SpW_Autostart(char c_SpwID) {
8110870c:	defffd04 	addi	sp,sp,-12
81108710:	de00012e 	bgeu	sp,et,81108718 <Configure_SpW_Autostart+0xc>
81108714:	003b68fa 	trap	3
81108718:	dfc00215 	stw	ra,8(sp)
8110871c:	df000115 	stw	fp,4(sp)
81108720:	df000104 	addi	fp,sp,4
81108724:	2005883a 	mov	r2,r4
81108728:	e0bfff05 	stb	r2,-4(fp)
	// Configura COMM
	// Reseta TX e RX Fifo
	v_Transparent_Interface_RX_FIFO_Reset(c_SpwID);
8110872c:	e0bfff07 	ldb	r2,-4(fp)
81108730:	1009883a 	mov	r4,r2
81108734:	11048680 	call	81104868 <v_Transparent_Interface_RX_FIFO_Reset>
	v_Transparent_Interface_TX_FIFO_Reset(c_SpwID);
81108738:	e0bfff07 	ldb	r2,-4(fp)
8110873c:	1009883a 	mov	r4,r2
81108740:	1104a240 	call	81104a24 <v_Transparent_Interface_TX_FIFO_Reset>
	// Habilita a Interface Transparente
	v_Transparent_Interface_Enable_Control(c_SpwID, TRAN_REG_SET,
81108744:	e0bfff07 	ldb	r2,-4(fp)
81108748:	0181c004 	movi	r6,1792
8110874c:	01400044 	movi	r5,1
81108750:	1009883a 	mov	r4,r2
81108754:	11042940 	call	81104294 <v_Transparent_Interface_Enable_Control>
			TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK
					| TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK);
	// Reseta Codec
	v_SpaceWire_Interface_Force_Reset(c_SpwID);
81108758:	e0bfff07 	ldb	r2,-4(fp)
8110875c:	1009883a 	mov	r4,r2
81108760:	11031ac0 	call	811031ac <v_SpaceWire_Interface_Force_Reset>
	// Habilita a Interface SpaceWire
	b_SpaceWire_Interface_Enable_Control(c_SpwID, SPWC_REG_SET,
81108764:	e0bfff07 	ldb	r2,-4(fp)
81108768:	0181c004 	movi	r6,1792
8110876c:	01400044 	movi	r5,1
81108770:	1009883a 	mov	r4,r2
81108774:	1102c800 	call	81102c80 <b_SpaceWire_Interface_Enable_Control>
	SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK);
	// Coloca Codec no modo Normal
//	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_NORMAL_MODE);
	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_BACKDOOR_MODE);
81108778:	e0bfff07 	ldb	r2,-4(fp)
8110877c:	000b883a 	mov	r5,zero
81108780:	1009883a 	mov	r4,r2
81108784:	1102e7c0 	call	81102e7c <b_SpaceWire_Interface_Mode_Control>
	// Coloca Codec no link Autostart
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_CLEAR,
81108788:	e0bfff07 	ldb	r2,-4(fp)
8110878c:	01806004 	movi	r6,384
81108790:	000b883a 	mov	r5,zero
81108794:	1009883a 	mov	r4,r2
81108798:	110368c0 	call	8110368c <v_SpaceWire_Interface_Link_Control>
	SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK);
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_SET,
8110879c:	e0bfff07 	ldb	r2,-4(fp)
811087a0:	01808004 	movi	r6,512
811087a4:	01400044 	movi	r5,1
811087a8:	1009883a 	mov	r4,r2
811087ac:	110368c0 	call	8110368c <v_SpaceWire_Interface_Link_Control>
	SPWC_AUTOSTART_CONTROL_BIT_MASK);
	printf("SpaceWire %c configurado\n", c_SpwID);
811087b0:	e0bfff07 	ldb	r2,-4(fp)
811087b4:	100b883a 	mov	r5,r2
811087b8:	01204534 	movhi	r4,33044
811087bc:	21258004 	addi	r4,r4,-27136
811087c0:	110ebf80 	call	8110ebf8 <printf>
}
811087c4:	0001883a 	nop
811087c8:	e037883a 	mov	sp,fp
811087cc:	dfc00117 	ldw	ra,4(sp)
811087d0:	df000017 	ldw	fp,0(sp)
811087d4:	dec00204 	addi	sp,sp,8
811087d8:	f800283a 	ret

811087dc <Set_SpW_Led>:

void Set_SpW_Led(char c_SpwID) {
811087dc:	defffa04 	addi	sp,sp,-24
811087e0:	de00012e 	bgeu	sp,et,811087e8 <Set_SpW_Led+0xc>
811087e4:	003b68fa 	trap	3
811087e8:	dfc00515 	stw	ra,20(sp)
811087ec:	df000415 	stw	fp,16(sp)
811087f0:	df000404 	addi	fp,sp,16
811087f4:	2005883a 	mov	r2,r4
811087f8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 ui_leds_mask_r = 0;
811087fc:	e03ffc15 	stw	zero,-16(fp)
	alt_u32 ui_leds_mask_g = 0;
81108800:	e03ffd15 	stw	zero,-12(fp)
	switch (c_SpwID) {
81108804:	e0bfff07 	ldb	r2,-4(fp)
81108808:	10bfefc4 	addi	r2,r2,-65
8110880c:	10c00228 	cmpgeui	r3,r2,8
81108810:	1800361e 	bne	r3,zero,811088ec <Set_SpW_Led+0x110>
81108814:	100690ba 	slli	r3,r2,2
81108818:	00a04474 	movhi	r2,33041
8110881c:	10a20b04 	addi	r2,r2,-30676
81108820:	1885883a 	add	r2,r3,r2
81108824:	10800017 	ldw	r2,0(r2)
81108828:	1000683a 	jmp	r2
8110882c:	8110884c 	andi	r4,r16,16929
81108830:	81108860 	cmpeqi	r4,r16,16929
81108834:	81108874 	orhi	r4,r16,16929
81108838:	81108888 	cmpgei	r4,r16,16930
8110883c:	8110889c 	xori	r4,r16,16930
81108840:	811088b0 	cmpltui	r4,r16,16930
81108844:	811088c4 	addi	r4,r16,16931
81108848:	811088d8 	cmpnei	r4,r16,16931
	case 'A':
		ui_leds_mask_r = LEDS_1R_MASK;
8110884c:	00800084 	movi	r2,2
81108850:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_1G_MASK;
81108854:	00800044 	movi	r2,1
81108858:	e0bffd15 	stw	r2,-12(fp)
		break;
8110885c:	00002306 	br	811088ec <Set_SpW_Led+0x110>
	case 'B':
		ui_leds_mask_r = LEDS_2R_MASK;
81108860:	00800204 	movi	r2,8
81108864:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_2G_MASK;
81108868:	00800104 	movi	r2,4
8110886c:	e0bffd15 	stw	r2,-12(fp)
		break;
81108870:	00001e06 	br	811088ec <Set_SpW_Led+0x110>
	case 'C':
		ui_leds_mask_r = LEDS_3R_MASK;
81108874:	00800804 	movi	r2,32
81108878:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_3G_MASK;
8110887c:	00800404 	movi	r2,16
81108880:	e0bffd15 	stw	r2,-12(fp)
		break;
81108884:	00001906 	br	811088ec <Set_SpW_Led+0x110>
	case 'D':
		ui_leds_mask_r = LEDS_4R_MASK;
81108888:	00802004 	movi	r2,128
8110888c:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_4G_MASK;
81108890:	00801004 	movi	r2,64
81108894:	e0bffd15 	stw	r2,-12(fp)
		break;
81108898:	00001406 	br	811088ec <Set_SpW_Led+0x110>
	case 'E':
		ui_leds_mask_r = LEDS_5R_MASK;
8110889c:	00808004 	movi	r2,512
811088a0:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_5G_MASK;
811088a4:	00804004 	movi	r2,256
811088a8:	e0bffd15 	stw	r2,-12(fp)
		break;
811088ac:	00000f06 	br	811088ec <Set_SpW_Led+0x110>
	case 'F':
		ui_leds_mask_r = LEDS_6R_MASK;
811088b0:	00820004 	movi	r2,2048
811088b4:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_6G_MASK;
811088b8:	00810004 	movi	r2,1024
811088bc:	e0bffd15 	stw	r2,-12(fp)
		break;
811088c0:	00000a06 	br	811088ec <Set_SpW_Led+0x110>
	case 'G':
		ui_leds_mask_r = LEDS_7R_MASK;
811088c4:	00880004 	movi	r2,8192
811088c8:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_7G_MASK;
811088cc:	00840004 	movi	r2,4096
811088d0:	e0bffd15 	stw	r2,-12(fp)
		break;
811088d4:	00000506 	br	811088ec <Set_SpW_Led+0x110>
	case 'H':
		ui_leds_mask_r = LEDS_8R_MASK;
811088d8:	00a00014 	movui	r2,32768
811088dc:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_8G_MASK;
811088e0:	00900004 	movi	r2,16384
811088e4:	e0bffd15 	stw	r2,-12(fp)
		break;
811088e8:	0001883a 	nop
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
811088ec:	e0bfff07 	ldb	r2,-4(fp)
811088f0:	1009883a 	mov	r4,r2
811088f4:	11038e80 	call	811038e8 <ul_SpaceWire_Interface_Link_Status_Read>
811088f8:	e0bffe15 	stw	r2,-8(fp)
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
811088fc:	e0bffe17 	ldw	r2,-8(fp)
81108900:	1080004c 	andi	r2,r2,1
81108904:	10000726 	beq	r2,zero,81108924 <Set_SpW_Led+0x148>
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
81108908:	e17ffc17 	ldw	r5,-16(fp)
8110890c:	0009883a 	mov	r4,zero
81108910:	11059f80 	call	811059f8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
81108914:	e17ffd17 	ldw	r5,-12(fp)
81108918:	01000044 	movi	r4,1
8110891c:	11059f80 	call	811059f8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
81108920:	00001006 	br	81108964 <Set_SpW_Led+0x188>
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
81108924:	e0bffe17 	ldw	r2,-8(fp)
81108928:	10801e0c 	andi	r2,r2,120
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
8110892c:	10000726 	beq	r2,zero,8110894c <Set_SpW_Led+0x170>
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
81108930:	e0fffd17 	ldw	r3,-12(fp)
81108934:	e0bffc17 	ldw	r2,-16(fp)
81108938:	1884b03a 	or	r2,r3,r2
8110893c:	100b883a 	mov	r5,r2
81108940:	01000044 	movi	r4,1
81108944:	11059f80 	call	811059f8 <bSetPainelLeds>
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
81108948:	00000606 	br	81108964 <Set_SpW_Led+0x188>
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
8110894c:	e17ffd17 	ldw	r5,-12(fp)
81108950:	0009883a 	mov	r4,zero
81108954:	11059f80 	call	811059f8 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
81108958:	e17ffc17 	ldw	r5,-16(fp)
8110895c:	01000044 	movi	r4,1
81108960:	11059f80 	call	811059f8 <bSetPainelLeds>
	}
}
81108964:	0001883a 	nop
81108968:	e037883a 	mov	sp,fp
8110896c:	dfc00117 	ldw	ra,4(sp)
81108970:	df000017 	ldw	fp,0(sp)
81108974:	dec00204 	addi	sp,sp,8
81108978:	f800283a 	ret

8110897c <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
8110897c:	defffb04 	addi	sp,sp,-20
81108980:	de00012e 	bgeu	sp,et,81108988 <vSenderComTask+0xc>
81108984:	003b68fa 	trap	3
81108988:	dfc00415 	stw	ra,16(sp)
8110898c:	df000315 	stw	fp,12(sp)
81108990:	df000304 	addi	fp,sp,12
81108994:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    int desligarEm = 0;
81108998:	e03ffe15 	stw	zero,-8(fp)

    eSenderMode = sConfiguringSender;
8110899c:	e03ffd15 	stw	zero,-12(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
811089a0:	d0a05a17 	ldw	r2,-32408(gp)
811089a4:	100f883a 	mov	r7,r2
811089a8:	01800704 	movi	r6,28
811089ac:	01400044 	movi	r5,1
811089b0:	01204534 	movhi	r4,33044
811089b4:	21258704 	addi	r4,r4,-27108
811089b8:	110decc0 	call	8110decc <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
811089bc:	e0bffd17 	ldw	r2,-12(fp)
811089c0:	10c00060 	cmpeqi	r3,r2,1
811089c4:	1800091e 	bne	r3,zero,811089ec <vSenderComTask+0x70>
811089c8:	0080052e 	bgeu	zero,r2,811089e0 <vSenderComTask+0x64>
811089cc:	10c000a0 	cmpeqi	r3,r2,2
811089d0:	1800371e 	bne	r3,zero,81108ab0 <vSenderComTask+0x134>
811089d4:	10800160 	cmpeqi	r2,r2,5
811089d8:	1000151e 	bne	r2,zero,81108a30 <vSenderComTask+0xb4>
811089dc:	00002c06 	br	81108a90 <vSenderComTask+0x114>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
811089e0:	00800044 	movi	r2,1
811089e4:	e0bffd15 	stw	r2,-12(fp)
                break;
811089e8:	00003206 	br	81108ab4 <vSenderComTask+0x138>
            case sStartingConnSender:

                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
811089ec:	d0a05817 	ldw	r2,-32416(gp)
811089f0:	1009883a 	mov	r4,r2
811089f4:	112a7240 	call	8112a724 <OSSemAccept>
811089f8:	10bfffcc 	andi	r2,r2,65535
811089fc:	10000326 	beq	r2,zero,81108a0c <vSenderComTask+0x90>
                    eSenderMode = sDummySender;
81108a00:	00800144 	movi	r2,5
81108a04:	e0bffd15 	stw	r2,-12(fp)
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }

                break;
81108a08:	00002a06 	br	81108ab4 <vSenderComTask+0x138>
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
                    eSenderMode = sDummySender;
                } else {
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
81108a0c:	01204534 	movhi	r4,33044
81108a10:	21258f04 	addi	r4,r4,-27076
81108a14:	110ed240 	call	8110ed24 <puts>
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
81108a18:	000f883a 	mov	r7,zero
81108a1c:	01800144 	movi	r6,5
81108a20:	000b883a 	mov	r5,zero
81108a24:	0009883a 	mov	r4,zero
81108a28:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
                }

                break;
81108a2c:	00002106 	br	81108ab4 <vSenderComTask+0x138>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
81108a30:	00800144 	movi	r2,5
81108a34:	e0bffd15 	stw	r2,-12(fp)

                if (desligarEm <= 3) {
81108a38:	e0bffe17 	ldw	r2,-8(fp)
81108a3c:	10800108 	cmpgei	r2,r2,4
81108a40:	1000031e 	bne	r2,zero,81108a50 <vSenderComTask+0xd4>
                    puts(TURNOFF_SEQUENCE);
81108a44:	01204534 	movhi	r4,33044
81108a48:	21259104 	addi	r4,r4,-27068
81108a4c:	110ed240 	call	8110ed24 <puts>
                }
                desligarEm++;
81108a50:	e0bffe17 	ldw	r2,-8(fp)
81108a54:	10800044 	addi	r2,r2,1
81108a58:	e0bffe15 	stw	r2,-8(fp)
#ifdef DEBUG_ON
	debug(fp,"sDummySender\n");
81108a5c:	d0a05a17 	ldw	r2,-32408(gp)
81108a60:	100f883a 	mov	r7,r2
81108a64:	01800344 	movi	r6,13
81108a68:	01400044 	movi	r5,1
81108a6c:	01204534 	movhi	r4,33044
81108a70:	21259304 	addi	r4,r4,-27060
81108a74:	110decc0 	call	8110decc <fwrite>
#endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
81108a78:	000f883a 	mov	r7,zero
81108a7c:	01800284 	movi	r6,10
81108a80:	000b883a 	mov	r5,zero
81108a84:	0009883a 	mov	r4,zero
81108a88:	112ca9c0 	call	8112ca9c <OSTimeDlyHMSM>
                break;
81108a8c:	00000906 	br	81108ab4 <vSenderComTask+0x138>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
81108a90:	d0a05a17 	ldw	r2,-32408(gp)
81108a94:	100f883a 	mov	r7,r2
81108a98:	018003c4 	movi	r6,15
81108a9c:	01400044 	movi	r5,1
81108aa0:	01204534 	movhi	r4,33044
81108aa4:	21259704 	addi	r4,r4,-27044
81108aa8:	110decc0 	call	8110decc <fwrite>
#endif
                break;
81108aac:	00000106 	br	81108ab4 <vSenderComTask+0x138>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
81108ab0:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
81108ab4:	003fc106 	br	811089bc <__reset+0xfb0e89bc>

81108ab8 <vTimeoutCheckerTask>:

#include "timeout_checker_ack_task.h"


/* Could impact in the overall performance of the system due to need many shared resources (many mutexes) */
void vTimeoutCheckerTask(void *task_data) {
81108ab8:	defff504 	addi	sp,sp,-44
81108abc:	de00012e 	bgeu	sp,et,81108ac4 <vTimeoutCheckerTask+0xc>
81108ac0:	003b68fa 	trap	3
81108ac4:	dfc00a15 	stw	ra,40(sp)
81108ac8:	df000915 	stw	fp,36(sp)
81108acc:	df000904 	addi	fp,sp,36
81108ad0:	e13fff15 	stw	r4,-4(fp)
    bool bFinished32 = FALSE;
81108ad4:	e03ff715 	stw	zero,-36(fp)
    bool bFinished64 = FALSE;
81108ad8:	e03ff815 	stw	zero,-32(fp)
    bool bFinished128 = FALSE;
81108adc:	e03ff915 	stw	zero,-28(fp)
	INT8U error_code;
    unsigned char ucCountRetries = 0;
81108ae0:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0, k =0;
81108ae4:	e03ffa45 	stb	zero,-23(fp)
81108ae8:	e03ffa85 	stb	zero,-22(fp)
	unsigned char ucRetransB32[N_32];
	unsigned char ucRetransB64[N_64];
	unsigned char ucRetransB128[N_128];

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
81108aec:	d0a05a17 	ldw	r2,-32408(gp)
81108af0:	100f883a 	mov	r7,r2
81108af4:	01800844 	movi	r6,33
81108af8:	01400044 	movi	r5,1
81108afc:	01204534 	movhi	r4,33044
81108b00:	21259b04 	addi	r4,r4,-27028
81108b04:	110decc0 	call	8110decc <fwrite>
    #endif

    for (;;) {
        /* This semaphore is used to sync the Timer used for check timeout and this task that is for actualy implement the logic of the timeout for the communication*/
        OSSemPend(xSemTimeoutChecker, 0, &error_code);
81108b08:	d0a05f17 	ldw	r2,-32388(gp)
81108b0c:	e0fffac4 	addi	r3,fp,-21
81108b10:	180d883a 	mov	r6,r3
81108b14:	000b883a 	mov	r5,zero
81108b18:	1009883a 	mov	r4,r2
81108b1c:	112ab040 	call	8112ab04 <OSSemPend>
        if ( error_code == OS_NO_ERR ) {
81108b20:	e0bffac3 	ldbu	r2,-21(fp)
81108b24:	10803fcc 	andi	r2,r2,255
81108b28:	1002191e 	bne	r2,zero,81109390 <vTimeoutCheckerTask+0x8d8>
            /*  Time to check all the (re)transmission buffers in order to retransmit if any message got timeout*/

            /*  Writing 0xFF in the buffer to check after if there is any scheduled retransmission
                If there is some, the valur will be between 0 and <max buffer size>*/
            memset(ucRetransB32, 255, N_32);
81108b2c:	e0bffb04 	addi	r2,fp,-20
81108b30:	01800204 	movi	r6,8
81108b34:	01403fc4 	movi	r5,255
81108b38:	1009883a 	mov	r4,r2
81108b3c:	110ea300 	call	8110ea30 <memset>
            memset(ucRetransB64, 255, N_64);
81108b40:	e0bffd04 	addi	r2,fp,-12
81108b44:	01800104 	movi	r6,4
81108b48:	01403fc4 	movi	r5,255
81108b4c:	1009883a 	mov	r4,r2
81108b50:	110ea300 	call	8110ea30 <memset>
            memset(ucRetransB128, 255, N_128);
81108b54:	e0bffe04 	addi	r2,fp,-8
81108b58:	01800084 	movi	r6,2
81108b5c:	01403fc4 	movi	r5,255
81108b60:	1009883a 	mov	r4,r2
81108b64:	110ea300 	call	8110ea30 <memset>

            bFinished32=FALSE;
81108b68:	e03ff715 	stw	zero,-36(fp)
            bFinished64=FALSE;
81108b6c:	e03ff815 	stw	zero,-32(fp)
            bFinished128=FALSE;
81108b70:	e03ff915 	stw	zero,-28(fp)
            ucCountRetries = 0;
81108b74:	e03ffa05 	stb	zero,-24(fp)

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
81108b78:	00011a06 	br	81108fe4 <vTimeoutCheckerTask+0x52c>

                if ( bFinished32 == FALSE ) {
81108b7c:	e0bff717 	ldw	r2,-36(fp)
81108b80:	10005b1e 	bne	r2,zero,81108cf0 <vTimeoutCheckerTask+0x238>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
81108b84:	d0a06217 	ldw	r2,-32376(gp)
81108b88:	e0fffac4 	addi	r3,fp,-21
81108b8c:	180d883a 	mov	r6,r3
81108b90:	01400084 	movi	r5,2
81108b94:	1009883a 	mov	r4,r2
81108b98:	1128af80 	call	81128af8 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108b9c:	e0bffac3 	ldbu	r2,-21(fp)
81108ba0:	10803fcc 	andi	r2,r2,255
81108ba4:	1000521e 	bne	r2,zero,81108cf0 <vTimeoutCheckerTask+0x238>
                        /*Search for the id*/
                        k = 0;
81108ba8:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_32; i++)
81108bac:	e03ffa45 	stb	zero,-23(fp)
81108bb0:	00004706 	br	81108cd0 <vTimeoutCheckerTask+0x218>
                        {
                            if ( xBuffer32[i].usiId != 0 ) {
81108bb4:	e0fffa43 	ldbu	r3,-23(fp)
81108bb8:	00a04574 	movhi	r2,33045
81108bbc:	109df604 	addi	r2,r2,30680
81108bc0:	18c009a4 	muli	r3,r3,38
81108bc4:	10c5883a 	add	r2,r2,r3
81108bc8:	10800804 	addi	r2,r2,32
81108bcc:	1080000b 	ldhu	r2,0(r2)
81108bd0:	10bfffcc 	andi	r2,r2,65535
81108bd4:	10003b26 	beq	r2,zero,81108cc4 <vTimeoutCheckerTask+0x20c>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer32[i].ucNofRetries < 1 ) {
81108bd8:	e0fffa43 	ldbu	r3,-23(fp)
81108bdc:	00a04574 	movhi	r2,33045
81108be0:	109df604 	addi	r2,r2,30680
81108be4:	18c009a4 	muli	r3,r3,38
81108be8:	10c5883a 	add	r2,r2,r3
81108bec:	10800904 	addi	r2,r2,36
81108bf0:	10800003 	ldbu	r2,0(r2)
81108bf4:	10803fcc 	andi	r2,r2,255
81108bf8:	1000101e 	bne	r2,zero,81108c3c <vTimeoutCheckerTask+0x184>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer32[i].usiId = 0;
81108bfc:	e0fffa43 	ldbu	r3,-23(fp)
81108c00:	00a04574 	movhi	r2,33045
81108c04:	109df604 	addi	r2,r2,30680
81108c08:	18c009a4 	muli	r3,r3,38
81108c0c:	10c5883a 	add	r2,r2,r3
81108c10:	10800804 	addi	r2,r2,32
81108c14:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer32);
81108c18:	d0a06517 	ldw	r2,-32364(gp)
81108c1c:	1009883a 	mov	r4,r2
81108c20:	112ae8c0 	call	8112ae8c <OSSemPost>
81108c24:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108c28:	e0bffac3 	ldbu	r2,-21(fp)
81108c2c:	10803fcc 	andi	r2,r2,255
81108c30:	10002426 	beq	r2,zero,81108cc4 <vTimeoutCheckerTask+0x20c>
                                        vFailSetCountSemaphorexBuffer32();
81108c34:	110b2f00 	call	8110b2f0 <vFailSetCountSemaphorexBuffer32>
81108c38:	00002206 	br	81108cc4 <vTimeoutCheckerTask+0x20c>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer32[i].usiTimeOut--;
81108c3c:	e0fffa43 	ldbu	r3,-23(fp)
81108c40:	00a04574 	movhi	r2,33045
81108c44:	109df604 	addi	r2,r2,30680
81108c48:	190009a4 	muli	r4,r3,38
81108c4c:	1105883a 	add	r2,r2,r4
81108c50:	10800884 	addi	r2,r2,34
81108c54:	1080000b 	ldhu	r2,0(r2)
81108c58:	10bfffc4 	addi	r2,r2,-1
81108c5c:	1009883a 	mov	r4,r2
81108c60:	00a04574 	movhi	r2,33045
81108c64:	109df604 	addi	r2,r2,30680
81108c68:	18c009a4 	muli	r3,r3,38
81108c6c:	10c5883a 	add	r2,r2,r3
81108c70:	10800884 	addi	r2,r2,34
81108c74:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer32[i].usiTimeOut < 1 ) {
81108c78:	e0fffa43 	ldbu	r3,-23(fp)
81108c7c:	00a04574 	movhi	r2,33045
81108c80:	109df604 	addi	r2,r2,30680
81108c84:	18c009a4 	muli	r3,r3,38
81108c88:	10c5883a 	add	r2,r2,r3
81108c8c:	10800884 	addi	r2,r2,34
81108c90:	1080000b 	ldhu	r2,0(r2)
81108c94:	10bfffcc 	andi	r2,r2,65535
81108c98:	10a0001c 	xori	r2,r2,32768
81108c9c:	10a00004 	addi	r2,r2,-32768
81108ca0:	00800816 	blt	zero,r2,81108cc4 <vTimeoutCheckerTask+0x20c>
                                        /* Schedule to retransmit */
                                        ucRetransB32[k] = i;
81108ca4:	e0bffa83 	ldbu	r2,-22(fp)
81108ca8:	e0fffb04 	addi	r3,fp,-20
81108cac:	1885883a 	add	r2,r3,r2
81108cb0:	e0fffa43 	ldbu	r3,-23(fp)
81108cb4:	10c00005 	stb	r3,0(r2)
                                        k++;
81108cb8:	e0bffa83 	ldbu	r2,-22(fp)
81108cbc:	10800044 	addi	r2,r2,1
81108cc0:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_32; i++)
81108cc4:	e0bffa43 	ldbu	r2,-23(fp)
81108cc8:	10800044 	addi	r2,r2,1
81108ccc:	e0bffa45 	stb	r2,-23(fp)
81108cd0:	e0bffa43 	ldbu	r2,-23(fp)
81108cd4:	10800230 	cmpltui	r2,r2,8
81108cd8:	103fb61e 	bne	r2,zero,81108bb4 <__reset+0xfb0e8bb4>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
81108cdc:	d0a06217 	ldw	r2,-32376(gp)
81108ce0:	1009883a 	mov	r4,r2
81108ce4:	112909c0 	call	8112909c <OSMutexPost>
                        bFinished32 = TRUE;
81108ce8:	00800044 	movi	r2,1
81108cec:	e0bff715 	stw	r2,-36(fp)
                    }
                }

                if ( bFinished64 == FALSE ) {
81108cf0:	e0bff817 	ldw	r2,-32(fp)
81108cf4:	10005b1e 	bne	r2,zero,81108e64 <vTimeoutCheckerTask+0x3ac>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
81108cf8:	d0a06617 	ldw	r2,-32360(gp)
81108cfc:	e0fffac4 	addi	r3,fp,-21
81108d00:	180d883a 	mov	r6,r3
81108d04:	01400084 	movi	r5,2
81108d08:	1009883a 	mov	r4,r2
81108d0c:	1128af80 	call	81128af8 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108d10:	e0bffac3 	ldbu	r2,-21(fp)
81108d14:	10803fcc 	andi	r2,r2,255
81108d18:	1000521e 	bne	r2,zero,81108e64 <vTimeoutCheckerTask+0x3ac>
                        /*Search for the id*/
                        k = 0;
81108d1c:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_64; i++)
81108d20:	e03ffa45 	stb	zero,-23(fp)
81108d24:	00004706 	br	81108e44 <vTimeoutCheckerTask+0x38c>
                        {
                            if ( xBuffer64[i].usiId != 0 ) {
81108d28:	e0fffa43 	ldbu	r3,-23(fp)
81108d2c:	00a04574 	movhi	r2,33045
81108d30:	108db004 	addi	r2,r2,14016
81108d34:	18c011a4 	muli	r3,r3,70
81108d38:	10c5883a 	add	r2,r2,r3
81108d3c:	10801004 	addi	r2,r2,64
81108d40:	1080000b 	ldhu	r2,0(r2)
81108d44:	10bfffcc 	andi	r2,r2,65535
81108d48:	10003b26 	beq	r2,zero,81108e38 <vTimeoutCheckerTask+0x380>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer64[i].ucNofRetries < 1 ) {
81108d4c:	e0fffa43 	ldbu	r3,-23(fp)
81108d50:	00a04574 	movhi	r2,33045
81108d54:	108db004 	addi	r2,r2,14016
81108d58:	18c011a4 	muli	r3,r3,70
81108d5c:	10c5883a 	add	r2,r2,r3
81108d60:	10801104 	addi	r2,r2,68
81108d64:	10800003 	ldbu	r2,0(r2)
81108d68:	10803fcc 	andi	r2,r2,255
81108d6c:	1000101e 	bne	r2,zero,81108db0 <vTimeoutCheckerTask+0x2f8>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer64[i].usiId = 0;
81108d70:	e0fffa43 	ldbu	r3,-23(fp)
81108d74:	00a04574 	movhi	r2,33045
81108d78:	108db004 	addi	r2,r2,14016
81108d7c:	18c011a4 	muli	r3,r3,70
81108d80:	10c5883a 	add	r2,r2,r3
81108d84:	10801004 	addi	r2,r2,64
81108d88:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer64);
81108d8c:	d0a05717 	ldw	r2,-32420(gp)
81108d90:	1009883a 	mov	r4,r2
81108d94:	112ae8c0 	call	8112ae8c <OSSemPost>
81108d98:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108d9c:	e0bffac3 	ldbu	r2,-21(fp)
81108da0:	10803fcc 	andi	r2,r2,255
81108da4:	10002426 	beq	r2,zero,81108e38 <vTimeoutCheckerTask+0x380>
                                        vFailSetCountSemaphorexBuffer64();
81108da8:	110b3580 	call	8110b358 <vFailSetCountSemaphorexBuffer64>
81108dac:	00002206 	br	81108e38 <vTimeoutCheckerTask+0x380>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer64[i].usiTimeOut--;
81108db0:	e0fffa43 	ldbu	r3,-23(fp)
81108db4:	00a04574 	movhi	r2,33045
81108db8:	108db004 	addi	r2,r2,14016
81108dbc:	190011a4 	muli	r4,r3,70
81108dc0:	1105883a 	add	r2,r2,r4
81108dc4:	10801084 	addi	r2,r2,66
81108dc8:	1080000b 	ldhu	r2,0(r2)
81108dcc:	10bfffc4 	addi	r2,r2,-1
81108dd0:	1009883a 	mov	r4,r2
81108dd4:	00a04574 	movhi	r2,33045
81108dd8:	108db004 	addi	r2,r2,14016
81108ddc:	18c011a4 	muli	r3,r3,70
81108de0:	10c5883a 	add	r2,r2,r3
81108de4:	10801084 	addi	r2,r2,66
81108de8:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer64[i].usiTimeOut < 1 ) {
81108dec:	e0fffa43 	ldbu	r3,-23(fp)
81108df0:	00a04574 	movhi	r2,33045
81108df4:	108db004 	addi	r2,r2,14016
81108df8:	18c011a4 	muli	r3,r3,70
81108dfc:	10c5883a 	add	r2,r2,r3
81108e00:	10801084 	addi	r2,r2,66
81108e04:	1080000b 	ldhu	r2,0(r2)
81108e08:	10bfffcc 	andi	r2,r2,65535
81108e0c:	10a0001c 	xori	r2,r2,32768
81108e10:	10a00004 	addi	r2,r2,-32768
81108e14:	00800816 	blt	zero,r2,81108e38 <vTimeoutCheckerTask+0x380>
                                        /* Schedule to retransmit */
                                        ucRetransB64[k] = i;
81108e18:	e0bffa83 	ldbu	r2,-22(fp)
81108e1c:	e0fffd04 	addi	r3,fp,-12
81108e20:	1885883a 	add	r2,r3,r2
81108e24:	e0fffa43 	ldbu	r3,-23(fp)
81108e28:	10c00005 	stb	r3,0(r2)
                                        k++;
81108e2c:	e0bffa83 	ldbu	r2,-22(fp)
81108e30:	10800044 	addi	r2,r2,1
81108e34:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_64; i++)
81108e38:	e0bffa43 	ldbu	r2,-23(fp)
81108e3c:	10800044 	addi	r2,r2,1
81108e40:	e0bffa45 	stb	r2,-23(fp)
81108e44:	e0bffa43 	ldbu	r2,-23(fp)
81108e48:	10800130 	cmpltui	r2,r2,4
81108e4c:	103fb61e 	bne	r2,zero,81108d28 <__reset+0xfb0e8d28>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer32*/
81108e50:	d0a06617 	ldw	r2,-32360(gp)
81108e54:	1009883a 	mov	r4,r2
81108e58:	112909c0 	call	8112909c <OSMutexPost>
                        bFinished64 = TRUE;
81108e5c:	00800044 	movi	r2,1
81108e60:	e0bff815 	stw	r2,-32(fp)
                    }
                }

                if ( bFinished128 == FALSE ) {
81108e64:	e0bff917 	ldw	r2,-28(fp)
81108e68:	10005b1e 	bne	r2,zero,81108fd8 <vTimeoutCheckerTask+0x520>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
81108e6c:	d0a06417 	ldw	r2,-32368(gp)
81108e70:	e0fffac4 	addi	r3,fp,-21
81108e74:	180d883a 	mov	r6,r3
81108e78:	01400084 	movi	r5,2
81108e7c:	1009883a 	mov	r4,r2
81108e80:	1128af80 	call	81128af8 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108e84:	e0bffac3 	ldbu	r2,-21(fp)
81108e88:	10803fcc 	andi	r2,r2,255
81108e8c:	1000521e 	bne	r2,zero,81108fd8 <vTimeoutCheckerTask+0x520>
                        /*Search for the id*/
                        k = 0;
81108e90:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_128; i++)
81108e94:	e03ffa45 	stb	zero,-23(fp)
81108e98:	00004706 	br	81108fb8 <vTimeoutCheckerTask+0x500>
                        {
                            if ( xBuffer128[i].usiId != 0 ) {
81108e9c:	e0fffa43 	ldbu	r3,-23(fp)
81108ea0:	00a045b4 	movhi	r2,33046
81108ea4:	10b64204 	addi	r2,r2,-9976
81108ea8:	18c021a4 	muli	r3,r3,134
81108eac:	10c5883a 	add	r2,r2,r3
81108eb0:	10802004 	addi	r2,r2,128
81108eb4:	1080000b 	ldhu	r2,0(r2)
81108eb8:	10bfffcc 	andi	r2,r2,65535
81108ebc:	10003b26 	beq	r2,zero,81108fac <vTimeoutCheckerTask+0x4f4>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer128[i].ucNofRetries < 1 ) {
81108ec0:	e0fffa43 	ldbu	r3,-23(fp)
81108ec4:	00a045b4 	movhi	r2,33046
81108ec8:	10b64204 	addi	r2,r2,-9976
81108ecc:	18c021a4 	muli	r3,r3,134
81108ed0:	10c5883a 	add	r2,r2,r3
81108ed4:	10802104 	addi	r2,r2,132
81108ed8:	10800003 	ldbu	r2,0(r2)
81108edc:	10803fcc 	andi	r2,r2,255
81108ee0:	1000101e 	bne	r2,zero,81108f24 <vTimeoutCheckerTask+0x46c>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer128[i].usiId = 0;
81108ee4:	e0fffa43 	ldbu	r3,-23(fp)
81108ee8:	00a045b4 	movhi	r2,33046
81108eec:	10b64204 	addi	r2,r2,-9976
81108ef0:	18c021a4 	muli	r3,r3,134
81108ef4:	10c5883a 	add	r2,r2,r3
81108ef8:	10802004 	addi	r2,r2,128
81108efc:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer128);
81108f00:	d0a05b17 	ldw	r2,-32404(gp)
81108f04:	1009883a 	mov	r4,r2
81108f08:	112ae8c0 	call	8112ae8c <OSSemPost>
81108f0c:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108f10:	e0bffac3 	ldbu	r2,-21(fp)
81108f14:	10803fcc 	andi	r2,r2,255
81108f18:	10002426 	beq	r2,zero,81108fac <vTimeoutCheckerTask+0x4f4>
                                        vFailSetCountSemaphorexBuffer128();
81108f1c:	110b3c00 	call	8110b3c0 <vFailSetCountSemaphorexBuffer128>
81108f20:	00002206 	br	81108fac <vTimeoutCheckerTask+0x4f4>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer128[i].usiTimeOut--;
81108f24:	e0fffa43 	ldbu	r3,-23(fp)
81108f28:	00a045b4 	movhi	r2,33046
81108f2c:	10b64204 	addi	r2,r2,-9976
81108f30:	190021a4 	muli	r4,r3,134
81108f34:	1105883a 	add	r2,r2,r4
81108f38:	10802084 	addi	r2,r2,130
81108f3c:	1080000b 	ldhu	r2,0(r2)
81108f40:	10bfffc4 	addi	r2,r2,-1
81108f44:	1009883a 	mov	r4,r2
81108f48:	00a045b4 	movhi	r2,33046
81108f4c:	10b64204 	addi	r2,r2,-9976
81108f50:	18c021a4 	muli	r3,r3,134
81108f54:	10c5883a 	add	r2,r2,r3
81108f58:	10802084 	addi	r2,r2,130
81108f5c:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer128[i].usiTimeOut < 1 ) {
81108f60:	e0fffa43 	ldbu	r3,-23(fp)
81108f64:	00a045b4 	movhi	r2,33046
81108f68:	10b64204 	addi	r2,r2,-9976
81108f6c:	18c021a4 	muli	r3,r3,134
81108f70:	10c5883a 	add	r2,r2,r3
81108f74:	10802084 	addi	r2,r2,130
81108f78:	1080000b 	ldhu	r2,0(r2)
81108f7c:	10bfffcc 	andi	r2,r2,65535
81108f80:	10a0001c 	xori	r2,r2,32768
81108f84:	10a00004 	addi	r2,r2,-32768
81108f88:	00800816 	blt	zero,r2,81108fac <vTimeoutCheckerTask+0x4f4>
                                        /* Schedule to retransmit */
                                        ucRetransB128[k] = i;
81108f8c:	e0bffa83 	ldbu	r2,-22(fp)
81108f90:	e0fffe04 	addi	r3,fp,-8
81108f94:	1885883a 	add	r2,r3,r2
81108f98:	e0fffa43 	ldbu	r3,-23(fp)
81108f9c:	10c00005 	stb	r3,0(r2)
                                        k++;
81108fa0:	e0bffa83 	ldbu	r2,-22(fp)
81108fa4:	10800044 	addi	r2,r2,1
81108fa8:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_128; i++)
81108fac:	e0bffa43 	ldbu	r2,-23(fp)
81108fb0:	10800044 	addi	r2,r2,1
81108fb4:	e0bffa45 	stb	r2,-23(fp)
81108fb8:	e0bffa43 	ldbu	r2,-23(fp)
81108fbc:	108000b0 	cmpltui	r2,r2,2
81108fc0:	103fb61e 	bne	r2,zero,81108e9c <__reset+0xfb0e8e9c>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer32*/
81108fc4:	d0a06417 	ldw	r2,-32368(gp)
81108fc8:	1009883a 	mov	r4,r2
81108fcc:	112909c0 	call	8112909c <OSMutexPost>
                        bFinished128 = TRUE;
81108fd0:	00800044 	movi	r2,1
81108fd4:	e0bff915 	stw	r2,-28(fp)
                    }
                }
                ucCountRetries++;
81108fd8:	e0bffa03 	ldbu	r2,-24(fp)
81108fdc:	10800044 	addi	r2,r2,1
81108fe0:	e0bffa05 	stb	r2,-24(fp)
            bFinished64=FALSE;
            bFinished128=FALSE;
            ucCountRetries = 0;

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
81108fe4:	e0bffa03 	ldbu	r2,-24(fp)
81108fe8:	108001a8 	cmpgeui	r2,r2,6
81108fec:	1000061e 	bne	r2,zero,81109008 <vTimeoutCheckerTask+0x550>
81108ff0:	e0bff717 	ldw	r2,-36(fp)
81108ff4:	103ee126 	beq	r2,zero,81108b7c <__reset+0xfb0e8b7c>
81108ff8:	e0bff817 	ldw	r2,-32(fp)
81108ffc:	103edf26 	beq	r2,zero,81108b7c <__reset+0xfb0e8b7c>
81109000:	e0bff917 	ldw	r2,-28(fp)
81109004:	103edd26 	beq	r2,zero,81108b7c <__reset+0xfb0e8b7c>
                }
                ucCountRetries++;
            }

            /*  Check if could not check some of the (re)transmission buffer*/
            if ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) {
81109008:	e0bff717 	ldw	r2,-36(fp)
8110900c:	10000426 	beq	r2,zero,81109020 <vTimeoutCheckerTask+0x568>
81109010:	e0bff817 	ldw	r2,-32(fp)
81109014:	10000226 	beq	r2,zero,81109020 <vTimeoutCheckerTask+0x568>
81109018:	e0bff917 	ldw	r2,-28(fp)
8110901c:	1000011e 	bne	r2,zero,81109024 <vTimeoutCheckerTask+0x56c>
                /*  Could not check all (re)transmission buffer, only show message for now. There's no hard impact to thesystem
                    but we need to know that is accurring*/
                vCouldNotCheckBufferTimeOutFunction();
81109020:	110b9000 	call	8110b900 <vCouldNotCheckBufferTimeOutFunction>
            /*  Retransmit could slow down the system in the worst case, because need to get more than one mutex at same time
                this also could impact in various task that need the mutex also, as this operation may be rare
                before try to get all mutexes, will check if there is anything in the scheduler buffers (ucRetransB32,ucRetransB64,ucRetransB128). */
                
            /*  Most part of the time this will be false, and many processing and kernell resources will be saved with this verification*/
            if ( (ucRetransB32[0] != 255) && (ucRetransB64[0] != 255) && (ucRetransB128[0] != 255) ) {
81109024:	e0bffb03 	ldbu	r2,-20(fp)
81109028:	10803fcc 	andi	r2,r2,255
8110902c:	10803fe0 	cmpeqi	r2,r2,255
81109030:	103eb51e 	bne	r2,zero,81108b08 <__reset+0xfb0e8b08>
81109034:	e0bffd03 	ldbu	r2,-12(fp)
81109038:	10803fcc 	andi	r2,r2,255
8110903c:	10803fe0 	cmpeqi	r2,r2,255
81109040:	103eb11e 	bne	r2,zero,81108b08 <__reset+0xfb0e8b08>
81109044:	e0bffe03 	ldbu	r2,-8(fp)
81109048:	10803fcc 	andi	r2,r2,255
8110904c:	10803fe0 	cmpeqi	r2,r2,255
81109050:	103ead1e 	bne	r2,zero,81108b08 <__reset+0xfb0e8b08>
                /*  This operation will try to use the UART TX buffer, so after get the mutex it will remain for almost 3 or 4 ticks in the worst case.
                    In order to avoid that all the system lost the access to the communication for more time, and to minimize the priority inversion
                    if we can't get the mutex for the buffer32, buffer 64 or buffer128, we continue and in the next cycle of checkout it will try to re-send finaly. */                

                /*  Sleep for 50 ticks (50 milli) in the worst case*/
                OSMutexPend(xTxUARTMutex, 50, &error_code); /* Wait 50 ticks = 50 ms */
81109054:	d0a06817 	ldw	r2,-32352(gp)
81109058:	e0fffac4 	addi	r3,fp,-21
8110905c:	180d883a 	mov	r6,r3
81109060:	01400c84 	movi	r5,50
81109064:	1009883a 	mov	r4,r2
81109068:	1128af80 	call	81128af8 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110906c:	e0bffac3 	ldbu	r2,-21(fp)
81109070:	10803fcc 	andi	r2,r2,255
81109074:	1000c41e 	bne	r2,zero,81109388 <vTimeoutCheckerTask+0x8d0>


                    if ( ucRetransB32[0] != 255 ) {
81109078:	e0bffb03 	ldbu	r2,-20(fp)
8110907c:	10803fcc 	andi	r2,r2,255
81109080:	10803fe0 	cmpeqi	r2,r2,255
81109084:	10003c1e 	bne	r2,zero,81109178 <vTimeoutCheckerTask+0x6c0>
                        OSMutexPend(xMutexBuffer32, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
81109088:	d0a06217 	ldw	r2,-32376(gp)
8110908c:	e0fffac4 	addi	r3,fp,-21
81109090:	180d883a 	mov	r6,r3
81109094:	01400044 	movi	r5,1
81109098:	1009883a 	mov	r4,r2
8110909c:	1128af80 	call	81128af8 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
811090a0:	e0bffac3 	ldbu	r2,-21(fp)
811090a4:	10803fcc 	andi	r2,r2,255
811090a8:	1000321e 	bne	r2,zero,81109174 <vTimeoutCheckerTask+0x6bc>
                            k = 0;
811090ac:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB32[k];
811090b0:	e0bffa83 	ldbu	r2,-22(fp)
811090b4:	e0fffb04 	addi	r3,fp,-20
811090b8:	1885883a 	add	r2,r3,r2
811090bc:	10800003 	ldbu	r2,0(r2)
811090c0:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer32[i].ucNofRetries--;
811090c4:	e0fffa43 	ldbu	r3,-23(fp)
811090c8:	00a04574 	movhi	r2,33045
811090cc:	109df604 	addi	r2,r2,30680
811090d0:	190009a4 	muli	r4,r3,38
811090d4:	1105883a 	add	r2,r2,r4
811090d8:	10800904 	addi	r2,r2,36
811090dc:	10800003 	ldbu	r2,0(r2)
811090e0:	10bfffc4 	addi	r2,r2,-1
811090e4:	1009883a 	mov	r4,r2
811090e8:	00a04574 	movhi	r2,33045
811090ec:	109df604 	addi	r2,r2,30680
811090f0:	18c009a4 	muli	r3,r3,38
811090f4:	10c5883a 	add	r2,r2,r3
811090f8:	10800904 	addi	r2,r2,36
811090fc:	11000005 	stb	r4,0(r2)
                                xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
81109100:	e0fffa43 	ldbu	r3,-23(fp)
81109104:	00a04574 	movhi	r2,33045
81109108:	109df604 	addi	r2,r2,30680
8110910c:	18c009a4 	muli	r3,r3,38
81109110:	10c5883a 	add	r2,r2,r3
81109114:	10800884 	addi	r2,r2,34
81109118:	00c00104 	movi	r3,4
8110911c:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer32[i].buffer);                                
81109120:	e0bffa43 	ldbu	r2,-23(fp)
81109124:	10c009a4 	muli	r3,r2,38
81109128:	00a04574 	movhi	r2,33045
8110912c:	109df604 	addi	r2,r2,30680
81109130:	1885883a 	add	r2,r3,r2
81109134:	1009883a 	mov	r4,r2
81109138:	110ed240 	call	8110ed24 <puts>
                                k++;
8110913c:	e0bffa83 	ldbu	r2,-22(fp)
81109140:	10800044 	addi	r2,r2,1
81109144:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB32[k] != 255 );                       
81109148:	e0bffa83 	ldbu	r2,-22(fp)
8110914c:	e0fffb04 	addi	r3,fp,-20
81109150:	1885883a 	add	r2,r3,r2
81109154:	10800003 	ldbu	r2,0(r2)
81109158:	10803fcc 	andi	r2,r2,255
8110915c:	10803fd8 	cmpnei	r2,r2,255
81109160:	103fd31e 	bne	r2,zero,811090b0 <__reset+0xfb0e90b0>

                            OSMutexPost(xMutexBuffer32);
81109164:	d0a06217 	ldw	r2,-32376(gp)
81109168:	1009883a 	mov	r4,r2
8110916c:	112909c0 	call	8112909c <OSMutexPost>
81109170:	00000106 	br	81109178 <vTimeoutCheckerTask+0x6c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB32TimeoutTask();
81109174:	110bad00 	call	8110bad0 <vCouldNotRetransmitB32TimeoutTask>
                        }
                    }

                    if ( ucRetransB64[0] != 255 ) {
81109178:	e0bffd03 	ldbu	r2,-12(fp)
8110917c:	10803fcc 	andi	r2,r2,255
81109180:	10803fe0 	cmpeqi	r2,r2,255
81109184:	10003c1e 	bne	r2,zero,81109278 <vTimeoutCheckerTask+0x7c0>
                        OSMutexPend(xMutexBuffer64, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
81109188:	d0a06617 	ldw	r2,-32360(gp)
8110918c:	e0fffac4 	addi	r3,fp,-21
81109190:	180d883a 	mov	r6,r3
81109194:	01400044 	movi	r5,1
81109198:	1009883a 	mov	r4,r2
8110919c:	1128af80 	call	81128af8 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
811091a0:	e0bffac3 	ldbu	r2,-21(fp)
811091a4:	10803fcc 	andi	r2,r2,255
811091a8:	1000321e 	bne	r2,zero,81109274 <vTimeoutCheckerTask+0x7bc>
                            k = 0;
811091ac:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB64[k];
811091b0:	e0bffa83 	ldbu	r2,-22(fp)
811091b4:	e0fffd04 	addi	r3,fp,-12
811091b8:	1885883a 	add	r2,r3,r2
811091bc:	10800003 	ldbu	r2,0(r2)
811091c0:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer64[i].ucNofRetries--;
811091c4:	e0fffa43 	ldbu	r3,-23(fp)
811091c8:	00a04574 	movhi	r2,33045
811091cc:	108db004 	addi	r2,r2,14016
811091d0:	190011a4 	muli	r4,r3,70
811091d4:	1105883a 	add	r2,r2,r4
811091d8:	10801104 	addi	r2,r2,68
811091dc:	10800003 	ldbu	r2,0(r2)
811091e0:	10bfffc4 	addi	r2,r2,-1
811091e4:	1009883a 	mov	r4,r2
811091e8:	00a04574 	movhi	r2,33045
811091ec:	108db004 	addi	r2,r2,14016
811091f0:	18c011a4 	muli	r3,r3,70
811091f4:	10c5883a 	add	r2,r2,r3
811091f8:	10801104 	addi	r2,r2,68
811091fc:	11000005 	stb	r4,0(r2)
                                xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
81109200:	e0fffa43 	ldbu	r3,-23(fp)
81109204:	00a04574 	movhi	r2,33045
81109208:	108db004 	addi	r2,r2,14016
8110920c:	18c011a4 	muli	r3,r3,70
81109210:	10c5883a 	add	r2,r2,r3
81109214:	10801084 	addi	r2,r2,66
81109218:	00c00104 	movi	r3,4
8110921c:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer64[i].buffer);                                
81109220:	e0bffa43 	ldbu	r2,-23(fp)
81109224:	10c011a4 	muli	r3,r2,70
81109228:	00a04574 	movhi	r2,33045
8110922c:	108db004 	addi	r2,r2,14016
81109230:	1885883a 	add	r2,r3,r2
81109234:	1009883a 	mov	r4,r2
81109238:	110ed240 	call	8110ed24 <puts>
                                k++;
8110923c:	e0bffa83 	ldbu	r2,-22(fp)
81109240:	10800044 	addi	r2,r2,1
81109244:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB64[k] != 255 );
81109248:	e0bffa83 	ldbu	r2,-22(fp)
8110924c:	e0fffd04 	addi	r3,fp,-12
81109250:	1885883a 	add	r2,r3,r2
81109254:	10800003 	ldbu	r2,0(r2)
81109258:	10803fcc 	andi	r2,r2,255
8110925c:	10803fd8 	cmpnei	r2,r2,255
81109260:	103fd31e 	bne	r2,zero,811091b0 <__reset+0xfb0e91b0>

                            OSMutexPost(xMutexBuffer64);
81109264:	d0a06617 	ldw	r2,-32360(gp)
81109268:	1009883a 	mov	r4,r2
8110926c:	112909c0 	call	8112909c <OSMutexPost>
81109270:	00000106 	br	81109278 <vTimeoutCheckerTask+0x7c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB64TimeoutTask();
81109274:	110bb380 	call	8110bb38 <vCouldNotRetransmitB64TimeoutTask>
                        }    
                    }

                    if ( ucRetransB128[0] != 255 ) {
81109278:	e0bffe03 	ldbu	r2,-8(fp)
8110927c:	10803fcc 	andi	r2,r2,255
81109280:	10803fe0 	cmpeqi	r2,r2,255
81109284:	10003c1e 	bne	r2,zero,81109378 <vTimeoutCheckerTask+0x8c0>
                        OSMutexPend(xMutexBuffer128, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
81109288:	d0a06417 	ldw	r2,-32368(gp)
8110928c:	e0fffac4 	addi	r3,fp,-21
81109290:	180d883a 	mov	r6,r3
81109294:	01400044 	movi	r5,1
81109298:	1009883a 	mov	r4,r2
8110929c:	1128af80 	call	81128af8 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
811092a0:	e0bffac3 	ldbu	r2,-21(fp)
811092a4:	10803fcc 	andi	r2,r2,255
811092a8:	1000321e 	bne	r2,zero,81109374 <vTimeoutCheckerTask+0x8bc>
                            k = 0;
811092ac:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB128[k];
811092b0:	e0bffa83 	ldbu	r2,-22(fp)
811092b4:	e0fffe04 	addi	r3,fp,-8
811092b8:	1885883a 	add	r2,r3,r2
811092bc:	10800003 	ldbu	r2,0(r2)
811092c0:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer128[i].ucNofRetries--;
811092c4:	e0fffa43 	ldbu	r3,-23(fp)
811092c8:	00a045b4 	movhi	r2,33046
811092cc:	10b64204 	addi	r2,r2,-9976
811092d0:	190021a4 	muli	r4,r3,134
811092d4:	1105883a 	add	r2,r2,r4
811092d8:	10802104 	addi	r2,r2,132
811092dc:	10800003 	ldbu	r2,0(r2)
811092e0:	10bfffc4 	addi	r2,r2,-1
811092e4:	1009883a 	mov	r4,r2
811092e8:	00a045b4 	movhi	r2,33046
811092ec:	10b64204 	addi	r2,r2,-9976
811092f0:	18c021a4 	muli	r3,r3,134
811092f4:	10c5883a 	add	r2,r2,r3
811092f8:	10802104 	addi	r2,r2,132
811092fc:	11000005 	stb	r4,0(r2)
                                xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81109300:	e0fffa43 	ldbu	r3,-23(fp)
81109304:	00a045b4 	movhi	r2,33046
81109308:	10b64204 	addi	r2,r2,-9976
8110930c:	18c021a4 	muli	r3,r3,134
81109310:	10c5883a 	add	r2,r2,r3
81109314:	10802084 	addi	r2,r2,130
81109318:	00c00104 	movi	r3,4
8110931c:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer128[i].buffer);                                
81109320:	e0bffa43 	ldbu	r2,-23(fp)
81109324:	10c021a4 	muli	r3,r2,134
81109328:	00a045b4 	movhi	r2,33046
8110932c:	10b64204 	addi	r2,r2,-9976
81109330:	1885883a 	add	r2,r3,r2
81109334:	1009883a 	mov	r4,r2
81109338:	110ed240 	call	8110ed24 <puts>
                                k++;
8110933c:	e0bffa83 	ldbu	r2,-22(fp)
81109340:	10800044 	addi	r2,r2,1
81109344:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB128[k] != 255 );
81109348:	e0bffa83 	ldbu	r2,-22(fp)
8110934c:	e0fffe04 	addi	r3,fp,-8
81109350:	1885883a 	add	r2,r3,r2
81109354:	10800003 	ldbu	r2,0(r2)
81109358:	10803fcc 	andi	r2,r2,255
8110935c:	10803fd8 	cmpnei	r2,r2,255
81109360:	103fd31e 	bne	r2,zero,811092b0 <__reset+0xfb0e92b0>

                            OSMutexPost(xMutexBuffer128);
81109364:	d0a06417 	ldw	r2,-32368(gp)
81109368:	1009883a 	mov	r4,r2
8110936c:	112909c0 	call	8112909c <OSMutexPost>
81109370:	00000106 	br	81109378 <vTimeoutCheckerTask+0x8c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB128TimeoutTask();
81109374:	110bba00 	call	8110bba0 <vCouldNotRetransmitB128TimeoutTask>
                        }
                    }                    
                    OSMutexPost(xTxUARTMutex);
81109378:	d0a06817 	ldw	r2,-32352(gp)
8110937c:	1009883a 	mov	r4,r2
81109380:	112909c0 	call	8112909c <OSMutexPost>
81109384:	003de006 	br	81108b08 <__reset+0xfb0e8b08>
                } else {
                    /*  Couldn't get access to the UART tx buffer, there is no big impact to the system. So next cycle it may be transmited.
                        This is not a reason to exit the execution of all Simucam.*/
                    vFailCouldNotRetransmitTimeoutTask();
81109388:	110ba680 	call	8110ba68 <vFailCouldNotRetransmitTimeoutTask>
8110938c:	003dde06 	br	81108b08 <__reset+0xfb0e8b08>
                }
            }

        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
81109390:	110b9980 	call	8110b998 <vFailGetBlockingSemTimeoutTask>
        }
    }
81109394:	003ddc06 	br	81108b08 <__reset+0xfb0e8b08>

81109398 <bResourcesInitRTOS>:



/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
81109398:	defff904 	addi	sp,sp,-28
8110939c:	de00012e 	bgeu	sp,et,811093a4 <bResourcesInitRTOS+0xc>
811093a0:	003b68fa 	trap	3
811093a4:	dfc00615 	stw	ra,24(sp)
811093a8:	df000515 	stw	fp,20(sp)
811093ac:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
811093b0:	00800044 	movi	r2,1
811093b4:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
811093b8:	0009883a 	mov	r4,zero
811093bc:	112a7dc0 	call	8112a7dc <OSSemCreate>
811093c0:	d0a05815 	stw	r2,-32416(gp)
	if (!xSemCommInit) {
811093c4:	d0a05817 	ldw	r2,-32416(gp)
811093c8:	1000021e 	bne	r2,zero,811093d4 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
811093cc:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811093d0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
811093d4:	e0bfff04 	addi	r2,fp,-4
811093d8:	100b883a 	mov	r5,r2
811093dc:	010000c4 	movi	r4,3
811093e0:	11286240 	call	81128624 <OSMutexCreate>
811093e4:	d0a06815 	stw	r2,-32352(gp)
	if ( err != OS_ERR_NONE ) {
811093e8:	e0bfff03 	ldbu	r2,-4(fp)
811093ec:	10803fcc 	andi	r2,r2,255
811093f0:	10000526 	beq	r2,zero,81109408 <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
811093f4:	e0bfff03 	ldbu	r2,-4(fp)
811093f8:	10803fcc 	andi	r2,r2,255
811093fc:	1009883a 	mov	r4,r2
81109400:	110ad280 	call	8110ad28 <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109404:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
81109408:	e0bfff04 	addi	r2,fp,-4
8110940c:	100b883a 	mov	r5,r2
81109410:	01000184 	movi	r4,6
81109414:	11286240 	call	81128624 <OSMutexCreate>
81109418:	d0a06415 	stw	r2,-32368(gp)
	if ( err != OS_ERR_NONE ) {
8110941c:	e0bfff03 	ldbu	r2,-4(fp)
81109420:	10803fcc 	andi	r2,r2,255
81109424:	10000526 	beq	r2,zero,8110943c <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
81109428:	e0bfff03 	ldbu	r2,-4(fp)
8110942c:	10803fcc 	andi	r2,r2,255
81109430:	1009883a 	mov	r4,r2
81109434:	110ad280 	call	8110ad28 <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109438:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110943c:	e0bfff04 	addi	r2,fp,-4
81109440:	100b883a 	mov	r5,r2
81109444:	010001c4 	movi	r4,7
81109448:	11286240 	call	81128624 <OSMutexCreate>
8110944c:	d0a06615 	stw	r2,-32360(gp)
	if ( err != OS_ERR_NONE ) {
81109450:	e0bfff03 	ldbu	r2,-4(fp)
81109454:	10803fcc 	andi	r2,r2,255
81109458:	10000526 	beq	r2,zero,81109470 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110945c:	e0bfff03 	ldbu	r2,-4(fp)
81109460:	10803fcc 	andi	r2,r2,255
81109464:	1009883a 	mov	r4,r2
81109468:	110ad280 	call	8110ad28 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110946c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
81109470:	e0bfff04 	addi	r2,fp,-4
81109474:	100b883a 	mov	r5,r2
81109478:	01000204 	movi	r4,8
8110947c:	11286240 	call	81128624 <OSMutexCreate>
81109480:	d0a06215 	stw	r2,-32376(gp)
	if ( err != OS_ERR_NONE ) {
81109484:	e0bfff03 	ldbu	r2,-4(fp)
81109488:	10803fcc 	andi	r2,r2,255
8110948c:	10000526 	beq	r2,zero,811094a4 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
81109490:	e0bfff03 	ldbu	r2,-4(fp)
81109494:	10803fcc 	andi	r2,r2,255
81109498:	1009883a 	mov	r4,r2
8110949c:	110ad280 	call	8110ad28 <vFailCreateMutexSResources>
		bSuccess = FALSE;
811094a0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
811094a4:	01000084 	movi	r4,2
811094a8:	112a7dc0 	call	8112a7dc <OSSemCreate>
811094ac:	d0a05b15 	stw	r2,-32404(gp)
	if (!xSemCountBuffer128) {
811094b0:	d0a05b17 	ldw	r2,-32404(gp)
811094b4:	1000021e 	bne	r2,zero,811094c0 <bResourcesInitRTOS+0x128>
		vFailCreateSemaphoreResources();
811094b8:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811094bc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
811094c0:	01000104 	movi	r4,4
811094c4:	112a7dc0 	call	8112a7dc <OSSemCreate>
811094c8:	d0a05715 	stw	r2,-32420(gp)
	if (!xSemCountBuffer64) {
811094cc:	d0a05717 	ldw	r2,-32420(gp)
811094d0:	1000021e 	bne	r2,zero,811094dc <bResourcesInitRTOS+0x144>
		vFailCreateSemaphoreResources();
811094d4:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811094d8:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
811094dc:	01000204 	movi	r4,8
811094e0:	112a7dc0 	call	8112a7dc <OSSemCreate>
811094e4:	d0a06515 	stw	r2,-32364(gp)
	if (!xSemCountBuffer32) {
811094e8:	d0a06517 	ldw	r2,-32364(gp)
811094ec:	1000021e 	bne	r2,zero,811094f8 <bResourcesInitRTOS+0x160>
		vFailCreateSemaphoreResources();
811094f0:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811094f4:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
811094f8:	e0bfff04 	addi	r2,fp,-4
811094fc:	100b883a 	mov	r5,r2
81109500:	01000144 	movi	r4,5
81109504:	11286240 	call	81128624 <OSMutexCreate>
81109508:	d0a05d15 	stw	r2,-32396(gp)
	if ( err != OS_ERR_NONE ) {
8110950c:	e0bfff03 	ldbu	r2,-4(fp)
81109510:	10803fcc 	andi	r2,r2,255
81109514:	10000526 	beq	r2,zero,8110952c <bResourcesInitRTOS+0x194>
		vFailCreateMutexSResources(err);
81109518:	e0bfff03 	ldbu	r2,-4(fp)
8110951c:	10803fcc 	andi	r2,r2,255
81109520:	1009883a 	mov	r4,r2
81109524:	110ad280 	call	8110ad28 <vFailCreateMutexSResources>
		bSuccess = FALSE;
81109528:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110952c:	e0bfff04 	addi	r2,fp,-4
81109530:	100b883a 	mov	r5,r2
81109534:	01000244 	movi	r4,9
81109538:	11286240 	call	81128624 <OSMutexCreate>
8110953c:	d0a06115 	stw	r2,-32380(gp)
	if ( err != OS_ERR_NONE ) {
81109540:	e0bfff03 	ldbu	r2,-4(fp)
81109544:	10803fcc 	andi	r2,r2,255
81109548:	10000526 	beq	r2,zero,81109560 <bResourcesInitRTOS+0x1c8>
		vFailCreateMutexSResources(err);
8110954c:	e0bfff03 	ldbu	r2,-4(fp)
81109550:	10803fcc 	andi	r2,r2,255
81109554:	1009883a 	mov	r4,r2
81109558:	110ad280 	call	8110ad28 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110955c:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
81109560:	0009883a 	mov	r4,zero
81109564:	112a7dc0 	call	8112a7dc <OSSemCreate>
81109568:	d0a05e15 	stw	r2,-32392(gp)
	if (!xSemCountReceivedACK) {
8110956c:	d0a05e17 	ldw	r2,-32392(gp)
81109570:	1000021e 	bne	r2,zero,8110957c <bResourcesInitRTOS+0x1e4>
		vFailCreateSemaphoreResources();
81109574:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109578:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110957c:	0009883a 	mov	r4,zero
81109580:	112a7dc0 	call	8112a7dc <OSSemCreate>
81109584:	d0a05c15 	stw	r2,-32400(gp)
	if (!xSemCountPreParsed) {
81109588:	d0a05c17 	ldw	r2,-32400(gp)
8110958c:	1000021e 	bne	r2,zero,81109598 <bResourcesInitRTOS+0x200>
		vFailCreateSemaphoreResources();
81109590:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109594:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
81109598:	0009883a 	mov	r4,zero
8110959c:	112a7dc0 	call	8112a7dc <OSSemCreate>
811095a0:	d0a05915 	stw	r2,-32412(gp)
	if (!xSemCountSenderACK) {
811095a4:	d0a05917 	ldw	r2,-32412(gp)
811095a8:	1000021e 	bne	r2,zero,811095b4 <bResourcesInitRTOS+0x21c>
		vFailCreateSemaphoreResources();
811095ac:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811095b0:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
811095b4:	e0bfff04 	addi	r2,fp,-4
811095b8:	100b883a 	mov	r5,r2
811095bc:	01000104 	movi	r4,4
811095c0:	11286240 	call	81128624 <OSMutexCreate>
811095c4:	d0a06715 	stw	r2,-32356(gp)
	if ( err != OS_ERR_NONE ) {
811095c8:	e0bfff03 	ldbu	r2,-4(fp)
811095cc:	10803fcc 	andi	r2,r2,255
811095d0:	10000526 	beq	r2,zero,811095e8 <bResourcesInitRTOS+0x250>
		vFailCreateMutexSResources(err);
811095d4:	e0bfff03 	ldbu	r2,-4(fp)
811095d8:	10803fcc 	andi	r2,r2,255
811095dc:	1009883a 	mov	r4,r2
811095e0:	110ad280 	call	8110ad28 <vFailCreateMutexSResources>
		bSuccess = FALSE;
811095e4:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
811095e8:	0009883a 	mov	r4,zero
811095ec:	112a7dc0 	call	8112a7dc <OSSemCreate>
811095f0:	d0a05f15 	stw	r2,-32388(gp)
	if (!xSemTimeoutChecker) {
811095f4:	d0a05f17 	ldw	r2,-32388(gp)
811095f8:	1000021e 	bne	r2,zero,81109604 <bResourcesInitRTOS+0x26c>
		vFailCreateSemaphoreResources();
811095fc:	110ad880 	call	8110ad88 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81109600:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
81109604:	e0bfff04 	addi	r2,fp,-4
81109608:	d8800215 	stw	r2,8(sp)
8110960c:	00a04534 	movhi	r2,33044
81109610:	10a5a404 	addi	r2,r2,-26992
81109614:	d8800115 	stw	r2,4(sp)
81109618:	d8000015 	stw	zero,0(sp)
8110961c:	01e04474 	movhi	r7,33041
81109620:	39e7ab04 	addi	r7,r7,-24916
81109624:	01800084 	movi	r6,2
81109628:	01400144 	movi	r5,5
8110962c:	01003204 	movi	r4,200
81109630:	112cea80 	call	8112cea8 <OSTmrCreate>
81109634:	d0a06315 	stw	r2,-32372(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
81109638:	e0bfff03 	ldbu	r2,-4(fp)
8110963c:	10803fcc 	andi	r2,r2,255
81109640:	10000226 	beq	r2,zero,8110964c <bResourcesInitRTOS+0x2b4>
		vFailCreateTimerRetransmisison();
81109644:	110b8b40 	call	8110b8b4 <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
81109648:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110964c:	e0bffe17 	ldw	r2,-8(fp)
}
81109650:	e037883a 	mov	sp,fp
81109654:	dfc00117 	ldw	ra,4(sp)
81109658:	df000017 	ldw	fp,0(sp)
8110965c:	dec00204 	addi	sp,sp,8
81109660:	f800283a 	ret

81109664 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
81109664:	deffff04 	addi	sp,sp,-4
81109668:	de00012e 	bgeu	sp,et,81109670 <vVariablesInitialization+0xc>
8110966c:	003b68fa 	trap	3
81109670:	df000015 	stw	fp,0(sp)
81109674:	d839883a 	mov	fp,sp
	usiIdCMD = 0;
81109678:	d020600d 	sth	zero,-32384(gp)
}
8110967c:	0001883a 	nop
81109680:	e037883a 	mov	sp,fp
81109684:	df000017 	ldw	fp,0(sp)
81109688:	dec00104 	addi	sp,sp,4
8110968c:	f800283a 	ret

81109690 <main>:



/* Entry point */
int main(void)
{
81109690:	defff704 	addi	sp,sp,-36
81109694:	de00012e 	bgeu	sp,et,8110969c <main+0xc>
81109698:	003b68fa 	trap	3
8110969c:	dfc00815 	stw	ra,32(sp)
811096a0:	df000715 	stw	fp,28(sp)
811096a4:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
811096a8:	e03ffe15 	stw	zero,-8(fp)
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
811096ac:	0009883a 	mov	r4,zero
811096b0:	112ce400 	call	8112ce40 <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
811096b4:	01604534 	movhi	r5,33044
811096b8:	2965a804 	addi	r5,r5,-26976
811096bc:	01204534 	movhi	r4,33044
811096c0:	2125a904 	addi	r4,r4,-26972
811096c4:	110d8980 	call	8110d898 <fopen>
811096c8:	d0a05a15 	stw	r2,-32408(gp)
	#endif	


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
811096cc:	110bc700 	call	8110bc70 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
811096d0:	110bf4c0 	call	8110bf4c <bTestSimucamCriticalHW>
811096d4:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
811096d8:	e0bffe17 	ldw	r2,-8(fp)
811096dc:	1000031e 	bne	r2,zero,811096ec <main+0x5c>
		vFailTestCriticasParts();
811096e0:	110add40 	call	8110add4 <vFailTestCriticasParts>
		return -1;
811096e4:	00bfffc4 	movi	r2,-1
811096e8:	00003a06 	br	811097d4 <main+0x144>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
811096ec:	110bd980 	call	8110bd98 <bInitializeSDCard>
811096f0:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
811096f4:	e0bffe17 	ldw	r2,-8(fp)
811096f8:	1000031e 	bne	r2,zero,81109708 <main+0x78>
		vFailTestCriticasParts();
811096fc:	110add40 	call	8110add4 <vFailTestCriticasParts>
		return -1;
81109700:	00bfffc4 	movi	r2,-1
81109704:	00003306 	br	811097d4 <main+0x144>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
81109708:	1109efc0 	call	81109efc <vLoadDefaultETHConf>
8110970c:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
81109710:	e0bffe17 	ldw	r2,-8(fp)
81109714:	1000091e 	bne	r2,zero,8110973c <main+0xac>
		/* Default configuration for eth connection loaded */
		debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
81109718:	d0a05a17 	ldw	r2,-32408(gp)
8110971c:	100f883a 	mov	r7,r2
81109720:	01801644 	movi	r6,89
81109724:	01400044 	movi	r5,1
81109728:	01204534 	movhi	r4,33044
8110972c:	2125ae04 	addi	r4,r4,-26952
81109730:	110decc0 	call	8110decc <fwrite>
		return -1;
81109734:	00bfffc4 	movi	r2,-1
81109738:	00002606 	br	811097d4 <main+0x144>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110973c:	110a8880 	call	8110a888 <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
81109740:	11093980 	call	81109398 <bResourcesInitRTOS>
81109744:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
81109748:	e0bffe17 	ldw	r2,-8(fp)
8110974c:	1000091e 	bne	r2,zero,81109774 <main+0xe4>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't alocate resources for RTOS. (exit) \n");
81109750:	d0a05a17 	ldw	r2,-32408(gp)
81109754:	100f883a 	mov	r7,r2
81109758:	01800a84 	movi	r6,42
8110975c:	01400044 	movi	r5,1
81109760:	01204534 	movhi	r4,33044
81109764:	2125c504 	addi	r4,r4,-26860
81109768:	110decc0 	call	8110decc <fwrite>
		return -1;
8110976c:	00bfffc4 	movi	r2,-1
81109770:	00001806 	br	811097d4 <main+0x144>
	}

	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
81109774:	00800104 	movi	r2,4
81109778:	d8800415 	stw	r2,16(sp)
8110977c:	d8000315 	stw	zero,12(sp)
81109780:	00820004 	movi	r2,2048
81109784:	d8800215 	stw	r2,8(sp)
81109788:	00a045b4 	movhi	r2,33046
8110978c:	10ae4204 	addi	r2,r2,-18168
81109790:	d8800115 	stw	r2,4(sp)
81109794:	00800044 	movi	r2,1
81109798:	d8800015 	stw	r2,0(sp)
8110979c:	01c00044 	movi	r7,1
811097a0:	01a045b4 	movhi	r6,33046
811097a4:	31b64104 	addi	r6,r6,-9980
811097a8:	000b883a 	mov	r5,zero
811097ac:	01204434 	movhi	r4,33040
811097b0:	211b0a04 	addi	r4,r4,27688
811097b4:	112b8700 	call	8112b870 <OSTaskCreateExt>
811097b8:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
811097bc:	e0bfff03 	ldbu	r2,-4(fp)
811097c0:	1000021e 	bne	r2,zero,811097cc <main+0x13c>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
811097c4:	1124df00 	call	81124df0 <OSStart>
811097c8:	00000106 	br	811097d0 <main+0x140>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
811097cc:	110b1c00 	call	8110b1c0 <vFailInitialization>
	}
  
	return 0;
811097d0:	0005883a 	mov	r2,zero
}
811097d4:	e037883a 	mov	sp,fp
811097d8:	dfc00117 	ldw	ra,4(sp)
811097dc:	df000017 	ldw	fp,0(sp)
811097e0:	dec00204 	addi	sp,sp,8
811097e4:	f800283a 	ret

811097e8 <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
811097e8:	deffd804 	addi	sp,sp,-160
811097ec:	de00012e 	bgeu	sp,et,811097f4 <bSendUART128+0xc>
811097f0:	003b68fa 	trap	3
811097f4:	dfc02715 	stw	ra,156(sp)
811097f8:	df002615 	stw	fp,152(sp)
811097fc:	df002604 	addi	fp,sp,152
81109800:	e13ffe15 	stw	r4,-8(fp)
81109804:	2805883a 	mov	r2,r5
81109808:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110980c:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
81109810:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
81109814:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
81109818:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
8110981c:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, 128);
81109820:	e0fffe17 	ldw	r3,-8(fp)
81109824:	e0bfdd44 	addi	r2,fp,-139
81109828:	1809883a 	mov	r4,r3
8110982c:	00c02004 	movi	r3,128
81109830:	180d883a 	mov	r6,r3
81109834:	200b883a 	mov	r5,r4
81109838:	1009883a 	mov	r4,r2
8110983c:	110e8e00 	call	8110e8e0 <memcpy>
	bSuccess = FALSE;
81109840:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
81109844:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
81109848:	e0bfda03 	ldbu	r2,-152(fp)
8110984c:	10800044 	addi	r2,r2,1
81109850:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
81109854:	d0a05b17 	ldw	r2,-32404(gp)
81109858:	e0ffdc84 	addi	r3,fp,-142
8110985c:	180d883a 	mov	r6,r3
81109860:	01401904 	movi	r5,100
81109864:	1009883a 	mov	r4,r2
81109868:	112ab040 	call	8112ab04 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110986c:	e0bfdc83 	ldbu	r2,-142(fp)
81109870:	10803fcc 	andi	r2,r2,255
81109874:	1000b51e 	bne	r2,zero,81109b4c <bSendUART128+0x364>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
81109878:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110987c:	e0bfda83 	ldbu	r2,-150(fp)
81109880:	10800044 	addi	r2,r2,1
81109884:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
81109888:	d0a06817 	ldw	r2,-32352(gp)
8110988c:	e0ffdd04 	addi	r3,fp,-140
81109890:	180d883a 	mov	r6,r3
81109894:	01400144 	movi	r5,5
81109898:	1009883a 	mov	r4,r2
8110989c:	1128af80 	call	81128af8 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
811098a0:	e0bfdd03 	ldbu	r2,-140(fp)
811098a4:	10803fcc 	andi	r2,r2,255
811098a8:	1000981e 	bne	r2,zero,81109b0c <bSendUART128+0x324>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
811098ac:	e0bfdd44 	addi	r2,fp,-139
811098b0:	1009883a 	mov	r4,r2
811098b4:	110ed240 	call	8110ed24 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
811098b8:	d0a06417 	ldw	r2,-32368(gp)
811098bc:	e0ffdcc4 	addi	r3,fp,-141
811098c0:	180b883a 	mov	r5,r3
811098c4:	1009883a 	mov	r4,r2
811098c8:	11284780 	call	81128478 <OSMutexAccept>
811098cc:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
811098d0:	e0bfdc03 	ldbu	r2,-144(fp)
811098d4:	10003a26 	beq	r2,zero,811099c0 <bSendUART128+0x1d8>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
811098d8:	e03fdac5 	stb	zero,-149(fp)
811098dc:	00003206 	br	811099a8 <bSendUART128+0x1c0>
						{
							if ( xBuffer128[i].usiId == 0 ) {
811098e0:	e0ffdac3 	ldbu	r3,-149(fp)
811098e4:	00a045b4 	movhi	r2,33046
811098e8:	10b64204 	addi	r2,r2,-9976
811098ec:	18c021a4 	muli	r3,r3,134
811098f0:	10c5883a 	add	r2,r2,r3
811098f4:	10802004 	addi	r2,r2,128
811098f8:	1080000b 	ldhu	r2,0(r2)
811098fc:	10bfffcc 	andi	r2,r2,65535
81109900:	1000261e 	bne	r2,zero,8110999c <bSendUART128+0x1b4>
								/* Found a free place */
								bSuccess = TRUE;
81109904:	00800044 	movi	r2,1
81109908:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110990c:	e0bfdac3 	ldbu	r2,-149(fp)
81109910:	10c021a4 	muli	r3,r2,134
81109914:	00a045b4 	movhi	r2,33046
81109918:	10b64204 	addi	r2,r2,-9976
8110991c:	1885883a 	add	r2,r3,r2
81109920:	1009883a 	mov	r4,r2
81109924:	e0bfdd44 	addi	r2,fp,-139
81109928:	00c02004 	movi	r3,128
8110992c:	180d883a 	mov	r6,r3
81109930:	100b883a 	mov	r5,r2
81109934:	110e8e00 	call	8110e8e0 <memcpy>
								xBuffer128[i].usiId = siIdMessage;
81109938:	e13fdac3 	ldbu	r4,-149(fp)
8110993c:	e0ffff0b 	ldhu	r3,-4(fp)
81109940:	00a045b4 	movhi	r2,33046
81109944:	10b64204 	addi	r2,r2,-9976
81109948:	210021a4 	muli	r4,r4,134
8110994c:	1105883a 	add	r2,r2,r4
81109950:	10802004 	addi	r2,r2,128
81109954:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
81109958:	e0ffdac3 	ldbu	r3,-149(fp)
8110995c:	00a045b4 	movhi	r2,33046
81109960:	10b64204 	addi	r2,r2,-9976
81109964:	18c021a4 	muli	r3,r3,134
81109968:	10c5883a 	add	r2,r2,r3
8110996c:	10802104 	addi	r2,r2,132
81109970:	00c000c4 	movi	r3,3
81109974:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81109978:	e0ffdac3 	ldbu	r3,-149(fp)
8110997c:	00a045b4 	movhi	r2,33046
81109980:	10b64204 	addi	r2,r2,-9976
81109984:	18c021a4 	muli	r3,r3,134
81109988:	10c5883a 	add	r2,r2,r3
8110998c:	10802084 	addi	r2,r2,130
81109990:	00c00104 	movi	r3,4
81109994:	10c0000d 	sth	r3,0(r2)
								break;
81109998:	00000606 	br	811099b4 <bSendUART128+0x1cc>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110999c:	e0bfdac3 	ldbu	r2,-149(fp)
811099a0:	10800044 	addi	r2,r2,1
811099a4:	e0bfdac5 	stb	r2,-149(fp)
811099a8:	e0bfdac3 	ldbu	r2,-149(fp)
811099ac:	108000b0 	cmpltui	r2,r2,2
811099b0:	103fcb1e 	bne	r2,zero,811098e0 <__reset+0xfb0e98e0>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
811099b4:	d0a06417 	ldw	r2,-32368(gp)
811099b8:	1009883a 	mov	r4,r2
811099bc:	112909c0 	call	8112909c <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
811099c0:	d0a06817 	ldw	r2,-32352(gp)
811099c4:	1009883a 	mov	r4,r2
811099c8:	112909c0 	call	8112909c <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
811099cc:	e0bfdb17 	ldw	r2,-148(fp)
811099d0:	10800060 	cmpeqi	r2,r2,1
811099d4:	10004d1e 	bne	r2,zero,81109b0c <bSendUART128+0x324>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
811099d8:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
811099dc:	e0bfda43 	ldbu	r2,-151(fp)
811099e0:	10800044 	addi	r2,r2,1
811099e4:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
811099e8:	d0a06417 	ldw	r2,-32368(gp)
811099ec:	e0ffdcc4 	addi	r3,fp,-141
811099f0:	180d883a 	mov	r6,r3
811099f4:	01400144 	movi	r5,5
811099f8:	1009883a 	mov	r4,r2
811099fc:	1128af80 	call	81128af8 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
81109a00:	e0bfdcc3 	ldbu	r2,-141(fp)
81109a04:	10803fcc 	andi	r2,r2,255
81109a08:	10003a1e 	bne	r2,zero,81109af4 <bSendUART128+0x30c>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
81109a0c:	e03fdac5 	stb	zero,-149(fp)
81109a10:	00003206 	br	81109adc <bSendUART128+0x2f4>
								{
									if ( xBuffer128[i].usiId == 0 ) {
81109a14:	e0ffdac3 	ldbu	r3,-149(fp)
81109a18:	00a045b4 	movhi	r2,33046
81109a1c:	10b64204 	addi	r2,r2,-9976
81109a20:	18c021a4 	muli	r3,r3,134
81109a24:	10c5883a 	add	r2,r2,r3
81109a28:	10802004 	addi	r2,r2,128
81109a2c:	1080000b 	ldhu	r2,0(r2)
81109a30:	10bfffcc 	andi	r2,r2,65535
81109a34:	1000261e 	bne	r2,zero,81109ad0 <bSendUART128+0x2e8>
										/* Found a free place */
										bSuccess = TRUE;
81109a38:	00800044 	movi	r2,1
81109a3c:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
81109a40:	e0bfdac3 	ldbu	r2,-149(fp)
81109a44:	10c021a4 	muli	r3,r2,134
81109a48:	00a045b4 	movhi	r2,33046
81109a4c:	10b64204 	addi	r2,r2,-9976
81109a50:	1885883a 	add	r2,r3,r2
81109a54:	1009883a 	mov	r4,r2
81109a58:	e0bfdd44 	addi	r2,fp,-139
81109a5c:	00c02004 	movi	r3,128
81109a60:	180d883a 	mov	r6,r3
81109a64:	100b883a 	mov	r5,r2
81109a68:	110e8e00 	call	8110e8e0 <memcpy>
										xBuffer128[i].usiId = siIdMessage;
81109a6c:	e13fdac3 	ldbu	r4,-149(fp)
81109a70:	e0ffff0b 	ldhu	r3,-4(fp)
81109a74:	00a045b4 	movhi	r2,33046
81109a78:	10b64204 	addi	r2,r2,-9976
81109a7c:	210021a4 	muli	r4,r4,134
81109a80:	1105883a 	add	r2,r2,r4
81109a84:	10802004 	addi	r2,r2,128
81109a88:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
81109a8c:	e0ffdac3 	ldbu	r3,-149(fp)
81109a90:	00a045b4 	movhi	r2,33046
81109a94:	10b64204 	addi	r2,r2,-9976
81109a98:	18c021a4 	muli	r3,r3,134
81109a9c:	10c5883a 	add	r2,r2,r3
81109aa0:	10802104 	addi	r2,r2,132
81109aa4:	00c000c4 	movi	r3,3
81109aa8:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81109aac:	e0ffdac3 	ldbu	r3,-149(fp)
81109ab0:	00a045b4 	movhi	r2,33046
81109ab4:	10b64204 	addi	r2,r2,-9976
81109ab8:	18c021a4 	muli	r3,r3,134
81109abc:	10c5883a 	add	r2,r2,r3
81109ac0:	10802084 	addi	r2,r2,130
81109ac4:	00c00104 	movi	r3,4
81109ac8:	10c0000d 	sth	r3,0(r2)
										break;
81109acc:	00000606 	br	81109ae8 <bSendUART128+0x300>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
81109ad0:	e0bfdac3 	ldbu	r2,-149(fp)
81109ad4:	10800044 	addi	r2,r2,1
81109ad8:	e0bfdac5 	stb	r2,-149(fp)
81109adc:	e0bfdac3 	ldbu	r2,-149(fp)
81109ae0:	108000b0 	cmpltui	r2,r2,2
81109ae4:	103fcb1e 	bne	r2,zero,81109a14 <__reset+0xfb0e9a14>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81109ae8:	d0a06417 	ldw	r2,-32368(gp)
81109aec:	1009883a 	mov	r4,r2
81109af0:	112909c0 	call	8112909c <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) || ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
81109af4:	e0bfdcc3 	ldbu	r2,-141(fp)
81109af8:	10803fcc 	andi	r2,r2,255
81109afc:	103fb71e 	bne	r2,zero,811099dc <__reset+0xfb0e99dc>
81109b00:	e0bfda43 	ldbu	r2,-151(fp)
81109b04:	10800130 	cmpltui	r2,r2,4
81109b08:	103fb41e 	bne	r2,zero,811099dc <__reset+0xfb0e99dc>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) || ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
81109b0c:	e0bfdd03 	ldbu	r2,-140(fp)
81109b10:	10803fcc 	andi	r2,r2,255
81109b14:	103f591e 	bne	r2,zero,8110987c <__reset+0xfb0e987c>
81109b18:	e0bfda83 	ldbu	r2,-150(fp)
81109b1c:	10800130 	cmpltui	r2,r2,4
81109b20:	103f561e 	bne	r2,zero,8110987c <__reset+0xfb0e987c>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
81109b24:	e0bfdb17 	ldw	r2,-148(fp)
81109b28:	10800060 	cmpeqi	r2,r2,1
81109b2c:	1000071e 	bne	r2,zero,81109b4c <bSendUART128+0x364>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
81109b30:	d0a05b17 	ldw	r2,-32404(gp)
81109b34:	1009883a 	mov	r4,r2
81109b38:	112ae8c0 	call	8112ae8c <OSSemPost>
81109b3c:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
81109b40:	e0bfdc43 	ldbu	r2,-143(fp)
81109b44:	10000126 	beq	r2,zero,81109b4c <bSendUART128+0x364>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
81109b48:	110b3c00 	call	8110b3c0 <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) || ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
81109b4c:	e0bfdc83 	ldbu	r2,-142(fp)
81109b50:	10803fcc 	andi	r2,r2,255
81109b54:	103f3c1e 	bne	r2,zero,81109848 <__reset+0xfb0e9848>
81109b58:	e0bfda03 	ldbu	r2,-152(fp)
81109b5c:	108001b0 	cmpltui	r2,r2,6
81109b60:	103f391e 	bne	r2,zero,81109848 <__reset+0xfb0e9848>

	return bSuccess;
81109b64:	e0bfdb17 	ldw	r2,-148(fp)
}
81109b68:	e037883a 	mov	sp,fp
81109b6c:	dfc00117 	ldw	ra,4(sp)
81109b70:	df000017 	ldw	fp,0(sp)
81109b74:	dec00204 	addi	sp,sp,8
81109b78:	f800283a 	ret

81109b7c <vSendEthConf>:



void vSendEthConf ( void ) {
81109b7c:	deffc304 	addi	sp,sp,-244
81109b80:	de00012e 	bgeu	sp,et,81109b88 <vSendEthConf+0xc>
81109b84:	003b68fa 	trap	3
81109b88:	dfc03c15 	stw	ra,240(sp)
81109b8c:	df003b15 	stw	fp,236(sp)
81109b90:	dd403a15 	stw	r21,232(sp)
81109b94:	dd003915 	stw	r20,228(sp)
81109b98:	dcc03815 	stw	r19,224(sp)
81109b9c:	dc803715 	stw	r18,220(sp)
81109ba0:	dc403615 	stw	r17,216(sp)
81109ba4:	dc003515 	stw	r16,212(sp)
81109ba8:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
81109bac:	e03fd98d 	sth	zero,-154(fp)
81109bb0:	e03fda0d 	sth	zero,-152(fp)
81109bb4:	e0bfda84 	addi	r2,fp,-150
81109bb8:	00c01f04 	movi	r3,124
81109bbc:	180d883a 	mov	r6,r3
81109bc0:	000b883a 	mov	r5,zero
81109bc4:	1009883a 	mov	r4,r2
81109bc8:	110ea300 	call	8110ea30 <memset>
    unsigned char crc = 0;
81109bcc:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
81109bd0:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
81109bd4:	1109e0c0 	call	81109e0c <usiGetIdCMD>
81109bd8:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109bdc:	e57fd90b 	ldhu	r21,-156(fp)
81109be0:	00a045b4 	movhi	r2,33046
81109be4:	10bed904 	addi	r2,r2,-1180
81109be8:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109bec:	00a045b4 	movhi	r2,33046
81109bf0:	10bed904 	addi	r2,r2,-1180
81109bf4:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109bf8:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109bfc:	00a045b4 	movhi	r2,33046
81109c00:	10bed904 	addi	r2,r2,-1180
81109c04:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c08:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109c0c:	00a045b4 	movhi	r2,33046
81109c10:	10bed904 	addi	r2,r2,-1180
81109c14:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c18:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81109c1c:	00a045b4 	movhi	r2,33046
81109c20:	10bed904 	addi	r2,r2,-1180
81109c24:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c28:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109c2c:	00a045b4 	movhi	r2,33046
81109c30:	10bed904 	addi	r2,r2,-1180
81109c34:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c38:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109c3c:	00a045b4 	movhi	r2,33046
81109c40:	10bed904 	addi	r2,r2,-1180
81109c44:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c48:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109c4c:	00a045b4 	movhi	r2,33046
81109c50:	10bed904 	addi	r2,r2,-1180
81109c54:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c58:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81109c5c:	00a045b4 	movhi	r2,33046
81109c60:	10bed904 	addi	r2,r2,-1180
81109c64:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c68:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109c6c:	00a045b4 	movhi	r2,33046
81109c70:	10bed904 	addi	r2,r2,-1180
81109c74:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c78:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109c7c:	00a045b4 	movhi	r2,33046
81109c80:	10bed904 	addi	r2,r2,-1180
81109c84:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c88:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109c8c:	00a045b4 	movhi	r2,33046
81109c90:	10bed904 	addi	r2,r2,-1180
81109c94:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109c98:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81109c9c:	00a045b4 	movhi	r2,33046
81109ca0:	10bed904 	addi	r2,r2,-1180
81109ca4:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109ca8:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109cac:	00a045b4 	movhi	r2,33046
81109cb0:	10bed904 	addi	r2,r2,-1180
81109cb4:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109cb8:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109cbc:	00a045b4 	movhi	r2,33046
81109cc0:	10bed904 	addi	r2,r2,-1180
81109cc4:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109cc8:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109ccc:	00a045b4 	movhi	r2,33046
81109cd0:	10bed904 	addi	r2,r2,-1180
81109cd4:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109cd8:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81109cdc:	00a045b4 	movhi	r2,33046
81109ce0:	10bed904 	addi	r2,r2,-1180
81109ce4:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109ce8:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
81109cec:	00a045b4 	movhi	r2,33046
81109cf0:	10bed904 	addi	r2,r2,-1180
81109cf4:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81109cf8:	10bfffcc 	andi	r2,r2,65535
81109cfc:	e53fd984 	addi	r20,fp,-154
81109d00:	d8801115 	stw	r2,68(sp)
81109d04:	dcc01015 	stw	r19,64(sp)
81109d08:	dc800f15 	stw	r18,60(sp)
81109d0c:	dc400e15 	stw	r17,56(sp)
81109d10:	dc000d15 	stw	r16,52(sp)
81109d14:	dbc00c15 	stw	r15,48(sp)
81109d18:	db800b15 	stw	r14,44(sp)
81109d1c:	db400a15 	stw	r13,40(sp)
81109d20:	db000915 	stw	r12,36(sp)
81109d24:	dac00815 	stw	r11,32(sp)
81109d28:	da800715 	stw	r10,28(sp)
81109d2c:	da400615 	stw	r9,24(sp)
81109d30:	da000515 	stw	r8,20(sp)
81109d34:	d9c00415 	stw	r7,16(sp)
81109d38:	d9800315 	stw	r6,12(sp)
81109d3c:	d9400215 	stw	r5,8(sp)
81109d40:	d9000115 	stw	r4,4(sp)
81109d44:	d8c00015 	stw	r3,0(sp)
81109d48:	a80f883a 	mov	r7,r21
81109d4c:	018010c4 	movi	r6,67
81109d50:	01604534 	movhi	r5,33044
81109d54:	2965d004 	addi	r5,r5,-26816
81109d58:	a009883a 	mov	r4,r20
81109d5c:	110f0680 	call	8110f068 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
81109d60:	e0bfd984 	addi	r2,fp,-154
81109d64:	1009883a 	mov	r4,r2
81109d68:	110f27c0 	call	8110f27c <strlen>
81109d6c:	1007883a 	mov	r3,r2
81109d70:	e0bfd984 	addi	r2,fp,-154
81109d74:	180b883a 	mov	r5,r3
81109d78:	1009883a 	mov	r4,r2
81109d7c:	110ac5c0 	call	8110ac5c <ucCrc8wInit>
81109d80:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
81109d84:	e13fd703 	ldbu	r4,-164(fp)
81109d88:	e0ffd984 	addi	r3,fp,-154
81109d8c:	e0bfd984 	addi	r2,fp,-154
81109d90:	200f883a 	mov	r7,r4
81109d94:	180d883a 	mov	r6,r3
81109d98:	01604534 	movhi	r5,33044
81109d9c:	2965e804 	addi	r5,r5,-26720
81109da0:	1009883a 	mov	r4,r2
81109da4:	110f0680 	call	8110f068 <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
81109da8:	e0bfd90b 	ldhu	r2,-156(fp)
81109dac:	10ffffcc 	andi	r3,r2,65535
81109db0:	18e0001c 	xori	r3,r3,32768
81109db4:	18e00004 	addi	r3,r3,-32768
81109db8:	e0bfd984 	addi	r2,fp,-154
81109dbc:	180b883a 	mov	r5,r3
81109dc0:	1009883a 	mov	r4,r2
81109dc4:	11097e80 	call	811097e8 <bSendUART128>
81109dc8:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
81109dcc:	e0bfd817 	ldw	r2,-160(fp)
81109dd0:	10800060 	cmpeqi	r2,r2,1
81109dd4:	1000011e 	bne	r2,zero,81109ddc <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
81109dd8:	110b5c80 	call	8110b5c8 <vCouldNotSendEthConfUART>
	}
}
81109ddc:	0001883a 	nop
81109de0:	e6fffa04 	addi	sp,fp,-24
81109de4:	dfc00717 	ldw	ra,28(sp)
81109de8:	df000617 	ldw	fp,24(sp)
81109dec:	dd400517 	ldw	r21,20(sp)
81109df0:	dd000417 	ldw	r20,16(sp)
81109df4:	dcc00317 	ldw	r19,12(sp)
81109df8:	dc800217 	ldw	r18,8(sp)
81109dfc:	dc400117 	ldw	r17,4(sp)
81109e00:	dc000017 	ldw	r16,0(sp)
81109e04:	dec00804 	addi	sp,sp,32
81109e08:	f800283a 	ret

81109e0c <usiGetIdCMD>:


unsigned short int usiGetIdCMD ( void ) {
81109e0c:	deffff04 	addi	sp,sp,-4
81109e10:	de00012e 	bgeu	sp,et,81109e18 <usiGetIdCMD+0xc>
81109e14:	003b68fa 	trap	3
81109e18:	df000015 	stw	fp,0(sp)
81109e1c:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
81109e20:	d0a0600b 	ldhu	r2,-32384(gp)
81109e24:	10ffffcc 	andi	r3,r2,65535
81109e28:	00bfffd4 	movui	r2,65535
81109e2c:	1880031e 	bne	r3,r2,81109e3c <usiGetIdCMD+0x30>
        usiIdCMD = 1;
81109e30:	00800044 	movi	r2,1
81109e34:	d0a0600d 	sth	r2,-32384(gp)
81109e38:	00000306 	br	81109e48 <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
81109e3c:	d0a0600b 	ldhu	r2,-32384(gp)
81109e40:	10800044 	addi	r2,r2,1
81109e44:	d0a0600d 	sth	r2,-32384(gp)
    return usiIdCMD;
81109e48:	d0a0600b 	ldhu	r2,-32384(gp)
}
81109e4c:	e037883a 	mov	sp,fp
81109e50:	df000017 	ldw	fp,0(sp)
81109e54:	dec00104 	addi	sp,sp,4
81109e58:	f800283a 	ret

81109e5c <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
81109e5c:	defffb04 	addi	sp,sp,-20
81109e60:	de00012e 	bgeu	sp,et,81109e68 <siPosStr+0xc>
81109e64:	003b68fa 	trap	3
81109e68:	dfc00415 	stw	ra,16(sp)
81109e6c:	df000315 	stw	fp,12(sp)
81109e70:	df000304 	addi	fp,sp,12
81109e74:	e13ffe15 	stw	r4,-8(fp)
81109e78:	2805883a 	mov	r2,r5
81109e7c:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
81109e80:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
81109e84:	e0bfff03 	ldbu	r2,-4(fp)
81109e88:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
81109e8c:	e17ffd04 	addi	r5,fp,-12
81109e90:	e13ffe17 	ldw	r4,-8(fp)
81109e94:	110f2300 	call	8110f230 <strcspn>
}
81109e98:	e037883a 	mov	sp,fp
81109e9c:	dfc00117 	ldw	ra,4(sp)
81109ea0:	df000017 	ldw	fp,0(sp)
81109ea4:	dec00204 	addi	sp,sp,8
81109ea8:	f800283a 	ret

81109eac <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
81109eac:	defffc04 	addi	sp,sp,-16
81109eb0:	de00012e 	bgeu	sp,et,81109eb8 <vTimeoutCheck+0xc>
81109eb4:	003b68fa 	trap	3
81109eb8:	dfc00315 	stw	ra,12(sp)
81109ebc:	df000215 	stw	fp,8(sp)
81109ec0:	df000204 	addi	fp,sp,8
81109ec4:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
81109ec8:	d0a05f17 	ldw	r2,-32388(gp)
81109ecc:	1009883a 	mov	r4,r2
81109ed0:	112ae8c0 	call	8112ae8c <OSSemPost>
81109ed4:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
81109ed8:	e0bffe03 	ldbu	r2,-8(fp)
81109edc:	10000126 	beq	r2,zero,81109ee4 <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
81109ee0:	110ba000 	call	8110ba00 <vFailPostBlockingSemTimeoutTask>
	}
}
81109ee4:	0001883a 	nop
81109ee8:	e037883a 	mov	sp,fp
81109eec:	dfc00117 	ldw	ra,4(sp)
81109ef0:	df000017 	ldw	fp,0(sp)
81109ef4:	dec00204 	addi	sp,sp,8
81109ef8:	f800283a 	ret

81109efc <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
81109efc:	defff504 	addi	sp,sp,-44
81109f00:	de00012e 	bgeu	sp,et,81109f08 <vLoadDefaultETHConf+0xc>
81109f04:	003b68fa 	trap	3
81109f08:	dfc00a15 	stw	ra,40(sp)
81109f0c:	df000915 	stw	fp,36(sp)
81109f10:	dc000815 	stw	r16,32(sp)
81109f14:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
81109f18:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
81109f1c:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
81109f20:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
81109f24:	d0a06917 	ldw	r2,-32348(gp)
81109f28:	10800058 	cmpnei	r2,r2,1
81109f2c:	1001f61e 	bne	r2,zero,8110a708 <vLoadDefaultETHConf+0x80c>
81109f30:	110bd380 	call	8110bd38 <bSDcardIsPresent>
81109f34:	1001f426 	beq	r2,zero,8110a708 <vLoadDefaultETHConf+0x80c>
81109f38:	110bd680 	call	8110bd68 <bSDcardFAT16Check>
81109f3c:	1001f226 	beq	r2,zero,8110a708 <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
81109f40:	01204534 	movhi	r4,33044
81109f44:	2125eb04 	addi	r4,r4,-26708
81109f48:	110be900 	call	8110be90 <siOpenFile>
81109f4c:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
81109f50:	e0bffc0f 	ldh	r2,-16(fp)
81109f54:	1001e816 	blt	r2,zero,8110a6f8 <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
81109f58:	e0bffd04 	addi	r2,fp,-12
81109f5c:	01800204 	movi	r6,8
81109f60:	01400284 	movi	r5,10
81109f64:	1009883a 	mov	r4,r2
81109f68:	110ea300 	call	8110ea30 <memset>
			p_inteiro = inteiro;
81109f6c:	e0bffd04 	addi	r2,fp,-12
81109f70:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
81109f74:	e0bffc0f 	ldh	r2,-16(fp)
81109f78:	1009883a 	mov	r4,r2
81109f7c:	110bf0c0 	call	8110bf0c <cGetNextChar>
81109f80:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
81109f84:	e0bff947 	ldb	r2,-27(fp)
81109f88:	10800084 	addi	r2,r2,2
81109f8c:	10c015a8 	cmpgeui	r3,r2,86
81109f90:	1801cf1e 	bne	r3,zero,8110a6d0 <vLoadDefaultETHConf+0x7d4>
81109f94:	100690ba 	slli	r3,r2,2
81109f98:	00a04474 	movhi	r2,33041
81109f9c:	10a7eb04 	addi	r2,r2,-24660
81109fa0:	1885883a 	add	r2,r3,r2
81109fa4:	10800017 	ldw	r2,0(r2)
81109fa8:	1000683a 	jmp	r2
81109fac:	8110a144 	addi	r4,r16,17029
81109fb0:	8110a138 	rdprs	r4,r16,17028
81109fb4:	8110a6d0 	cmplti	r4,r16,17051
81109fb8:	8110a6d0 	cmplti	r4,r16,17051
81109fbc:	8110a6d0 	cmplti	r4,r16,17051
81109fc0:	8110a6d0 	cmplti	r4,r16,17051
81109fc4:	8110a6d0 	cmplti	r4,r16,17051
81109fc8:	8110a6d0 	cmplti	r4,r16,17051
81109fcc:	8110a6d0 	cmplti	r4,r16,17051
81109fd0:	8110a6d0 	cmplti	r4,r16,17051
81109fd4:	8110a6d0 	cmplti	r4,r16,17051
81109fd8:	8110a6d0 	cmplti	r4,r16,17051
81109fdc:	8110a6e8 	cmpgeui	r4,r16,17051
81109fe0:	8110a6d0 	cmplti	r4,r16,17051
81109fe4:	8110a6d0 	cmplti	r4,r16,17051
81109fe8:	8110a6e8 	cmpgeui	r4,r16,17051
81109fec:	8110a6d0 	cmplti	r4,r16,17051
81109ff0:	8110a6d0 	cmplti	r4,r16,17051
81109ff4:	8110a6d0 	cmplti	r4,r16,17051
81109ff8:	8110a6d0 	cmplti	r4,r16,17051
81109ffc:	8110a6d0 	cmplti	r4,r16,17051
8110a000:	8110a6d0 	cmplti	r4,r16,17051
8110a004:	8110a6d0 	cmplti	r4,r16,17051
8110a008:	8110a6d0 	cmplti	r4,r16,17051
8110a00c:	8110a6d0 	cmplti	r4,r16,17051
8110a010:	8110a6d0 	cmplti	r4,r16,17051
8110a014:	8110a6d0 	cmplti	r4,r16,17051
8110a018:	8110a6d0 	cmplti	r4,r16,17051
8110a01c:	8110a6d0 	cmplti	r4,r16,17051
8110a020:	8110a6d0 	cmplti	r4,r16,17051
8110a024:	8110a6d0 	cmplti	r4,r16,17051
8110a028:	8110a6d0 	cmplti	r4,r16,17051
8110a02c:	8110a6d0 	cmplti	r4,r16,17051
8110a030:	8110a6d0 	cmplti	r4,r16,17051
8110a034:	8110a6e8 	cmpgeui	r4,r16,17051
8110a038:	8110a6d0 	cmplti	r4,r16,17051
8110a03c:	8110a6d0 	cmplti	r4,r16,17051
8110a040:	8110a6d0 	cmplti	r4,r16,17051
8110a044:	8110a6d0 	cmplti	r4,r16,17051
8110a048:	8110a6d0 	cmplti	r4,r16,17051
8110a04c:	8110a6d0 	cmplti	r4,r16,17051
8110a050:	8110a104 	addi	r4,r16,17028
8110a054:	8110a6d0 	cmplti	r4,r16,17051
8110a058:	8110a6d0 	cmplti	r4,r16,17051
8110a05c:	8110a6d0 	cmplti	r4,r16,17051
8110a060:	8110a6d0 	cmplti	r4,r16,17051
8110a064:	8110a6d0 	cmplti	r4,r16,17051
8110a068:	8110a6d0 	cmplti	r4,r16,17051
8110a06c:	8110a6d0 	cmplti	r4,r16,17051
8110a070:	8110a6d0 	cmplti	r4,r16,17051
8110a074:	8110a6d0 	cmplti	r4,r16,17051
8110a078:	8110a6d0 	cmplti	r4,r16,17051
8110a07c:	8110a6d0 	cmplti	r4,r16,17051
8110a080:	8110a6d0 	cmplti	r4,r16,17051
8110a084:	8110a6d0 	cmplti	r4,r16,17051
8110a088:	8110a6d0 	cmplti	r4,r16,17051
8110a08c:	8110a6d0 	cmplti	r4,r16,17051
8110a090:	8110a6d0 	cmplti	r4,r16,17051
8110a094:	8110a6d0 	cmplti	r4,r16,17051
8110a098:	8110a6d0 	cmplti	r4,r16,17051
8110a09c:	8110a6d0 	cmplti	r4,r16,17051
8110a0a0:	8110a6d0 	cmplti	r4,r16,17051
8110a0a4:	8110a698 	cmpnei	r4,r16,17050
8110a0a8:	8110a6d0 	cmplti	r4,r16,17051
8110a0ac:	8110a6d0 	cmplti	r4,r16,17051
8110a0b0:	8110a6d0 	cmplti	r4,r16,17051
8110a0b4:	8110a6d0 	cmplti	r4,r16,17051
8110a0b8:	8110a6d0 	cmplti	r4,r16,17051
8110a0bc:	8110a6d0 	cmplti	r4,r16,17051
8110a0c0:	8110a6d0 	cmplti	r4,r16,17051
8110a0c4:	8110a498 	cmpnei	r4,r16,17042
8110a0c8:	8110a6d0 	cmplti	r4,r16,17051
8110a0cc:	8110a6d0 	cmplti	r4,r16,17051
8110a0d0:	8110a2f8 	rdprs	r4,r16,17035
8110a0d4:	8110a5f0 	cmpltui	r4,r16,17047
8110a0d8:	8110a22c 	andhi	r4,r16,17032
8110a0dc:	8110a6d0 	cmplti	r4,r16,17051
8110a0e0:	8110a6d0 	cmplti	r4,r16,17051
8110a0e4:	8110a6d0 	cmplti	r4,r16,17051
8110a0e8:	8110a15c 	xori	r4,r16,17029
8110a0ec:	8110a6d0 	cmplti	r4,r16,17051
8110a0f0:	8110a6d0 	cmplti	r4,r16,17051
8110a0f4:	8110a568 	cmpgeui	r4,r16,17045
8110a0f8:	8110a6d0 	cmplti	r4,r16,17051
8110a0fc:	8110a6d0 	cmplti	r4,r16,17051
8110a100:	8110a3c8 	cmpgei	r4,r16,17039
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110a104:	e0bffc0f 	ldh	r2,-16(fp)
8110a108:	1009883a 	mov	r4,r2
8110a10c:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a110:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110a114:	00000406 	br	8110a128 <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110a118:	e0bffc0f 	ldh	r2,-16(fp)
8110a11c:	1009883a 	mov	r4,r2
8110a120:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a124:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110a128:	e0bff947 	ldb	r2,-27(fp)
8110a12c:	108009d8 	cmpnei	r2,r2,39
8110a130:	103ff91e 	bne	r2,zero,8110a118 <__reset+0xfb0ea118>
							c = cGetNextChar(siFile);
						}
						break;
8110a134:	00016d06 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110a138:	00800044 	movi	r2,1
8110a13c:	e0bff815 	stw	r2,-32(fp)
						break;
8110a140:	00016a06 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110a144:	01204534 	movhi	r4,33044
8110a148:	2125ed04 	addi	r4,r4,-26700
8110a14c:	110ebf80 	call	8110ebf8 <printf>
						bEOF = TRUE;
8110a150:	00800044 	movi	r2,1
8110a154:	e0bff815 	stw	r2,-32(fp)
						break;
8110a158:	00016406 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110a15c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a160:	e0bffc0f 	ldh	r2,-16(fp)
8110a164:	1009883a 	mov	r4,r2
8110a168:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a16c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a170:	d0e00917 	ldw	r3,-32732(gp)
8110a174:	e0bff947 	ldb	r2,-27(fp)
8110a178:	10800044 	addi	r2,r2,1
8110a17c:	1885883a 	add	r2,r3,r2
8110a180:	10800003 	ldbu	r2,0(r2)
8110a184:	10803fcc 	andi	r2,r2,255
8110a188:	1080010c 	andi	r2,r2,4
8110a18c:	10000626 	beq	r2,zero,8110a1a8 <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110a190:	e0bffa17 	ldw	r2,-24(fp)
8110a194:	e0fff943 	ldbu	r3,-27(fp)
8110a198:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a19c:	e0bffa17 	ldw	r2,-24(fp)
8110a1a0:	10800044 	addi	r2,r2,1
8110a1a4:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110a1a8:	e0bff947 	ldb	r2,-27(fp)
8110a1ac:	10800ea0 	cmpeqi	r2,r2,58
8110a1b0:	1000031e 	bne	r2,zero,8110a1c0 <vLoadDefaultETHConf+0x2c4>
8110a1b4:	e0bff947 	ldb	r2,-27(fp)
8110a1b8:	10800ed8 	cmpnei	r2,r2,59
8110a1bc:	103fe81e 	bne	r2,zero,8110a160 <__reset+0xfb0ea160>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a1c0:	e0bffa17 	ldw	r2,-24(fp)
8110a1c4:	00c00284 	movi	r3,10
8110a1c8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110a1cc:	e0bff903 	ldbu	r2,-28(fp)
8110a1d0:	10800168 	cmpgeui	r2,r2,5
8110a1d4:	1000021e 	bne	r2,zero,8110a1e0 <vLoadDefaultETHConf+0x2e4>
8110a1d8:	e43ff903 	ldbu	r16,-28(fp)
8110a1dc:	00000106 	br	8110a1e4 <vLoadDefaultETHConf+0x2e8>
8110a1e0:	04000144 	movi	r16,5
8110a1e4:	e0bffd04 	addi	r2,fp,-12
8110a1e8:	1009883a 	mov	r4,r2
8110a1ec:	110d7840 	call	8110d784 <atoi>
8110a1f0:	1007883a 	mov	r3,r2
8110a1f4:	00a045b4 	movhi	r2,33046
8110a1f8:	10bed904 	addi	r2,r2,-1180
8110a1fc:	1405883a 	add	r2,r2,r16
8110a200:	10800404 	addi	r2,r2,16
8110a204:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a208:	e0bffd04 	addi	r2,fp,-12
8110a20c:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a210:	e0bff903 	ldbu	r2,-28(fp)
8110a214:	10800044 	addi	r2,r2,1
8110a218:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a21c:	e0bff947 	ldb	r2,-27(fp)
8110a220:	10800ed8 	cmpnei	r2,r2,59
8110a224:	103fce1e 	bne	r2,zero,8110a160 <__reset+0xfb0ea160>

						break;
8110a228:	00013006 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110a22c:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a230:	e0bffc0f 	ldh	r2,-16(fp)
8110a234:	1009883a 	mov	r4,r2
8110a238:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a23c:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a240:	d0e00917 	ldw	r3,-32732(gp)
8110a244:	e0bff947 	ldb	r2,-27(fp)
8110a248:	10800044 	addi	r2,r2,1
8110a24c:	1885883a 	add	r2,r3,r2
8110a250:	10800003 	ldbu	r2,0(r2)
8110a254:	10803fcc 	andi	r2,r2,255
8110a258:	1080010c 	andi	r2,r2,4
8110a25c:	10000626 	beq	r2,zero,8110a278 <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110a260:	e0bffa17 	ldw	r2,-24(fp)
8110a264:	e0fff943 	ldbu	r3,-27(fp)
8110a268:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a26c:	e0bffa17 	ldw	r2,-24(fp)
8110a270:	10800044 	addi	r2,r2,1
8110a274:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a278:	e0bff947 	ldb	r2,-27(fp)
8110a27c:	10800ba0 	cmpeqi	r2,r2,46
8110a280:	1000031e 	bne	r2,zero,8110a290 <vLoadDefaultETHConf+0x394>
8110a284:	e0bff947 	ldb	r2,-27(fp)
8110a288:	10800ed8 	cmpnei	r2,r2,59
8110a28c:	103fe81e 	bne	r2,zero,8110a230 <__reset+0xfb0ea230>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a290:	e0bffa17 	ldw	r2,-24(fp)
8110a294:	00c00284 	movi	r3,10
8110a298:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110a29c:	e0bff903 	ldbu	r2,-28(fp)
8110a2a0:	108000e8 	cmpgeui	r2,r2,3
8110a2a4:	1000021e 	bne	r2,zero,8110a2b0 <vLoadDefaultETHConf+0x3b4>
8110a2a8:	e43ff903 	ldbu	r16,-28(fp)
8110a2ac:	00000106 	br	8110a2b4 <vLoadDefaultETHConf+0x3b8>
8110a2b0:	040000c4 	movi	r16,3
8110a2b4:	e0bffd04 	addi	r2,fp,-12
8110a2b8:	1009883a 	mov	r4,r2
8110a2bc:	110d7840 	call	8110d784 <atoi>
8110a2c0:	1007883a 	mov	r3,r2
8110a2c4:	00a045b4 	movhi	r2,33046
8110a2c8:	10bed904 	addi	r2,r2,-1180
8110a2cc:	1405883a 	add	r2,r2,r16
8110a2d0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a2d4:	e0bffd04 	addi	r2,fp,-12
8110a2d8:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a2dc:	e0bff903 	ldbu	r2,-28(fp)
8110a2e0:	10800044 	addi	r2,r2,1
8110a2e4:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a2e8:	e0bff947 	ldb	r2,-27(fp)
8110a2ec:	10800ed8 	cmpnei	r2,r2,59
8110a2f0:	103fcf1e 	bne	r2,zero,8110a230 <__reset+0xfb0ea230>

						break;
8110a2f4:	0000fd06 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110a2f8:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a2fc:	e0bffc0f 	ldh	r2,-16(fp)
8110a300:	1009883a 	mov	r4,r2
8110a304:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a308:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a30c:	d0e00917 	ldw	r3,-32732(gp)
8110a310:	e0bff947 	ldb	r2,-27(fp)
8110a314:	10800044 	addi	r2,r2,1
8110a318:	1885883a 	add	r2,r3,r2
8110a31c:	10800003 	ldbu	r2,0(r2)
8110a320:	10803fcc 	andi	r2,r2,255
8110a324:	1080010c 	andi	r2,r2,4
8110a328:	10000626 	beq	r2,zero,8110a344 <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110a32c:	e0bffa17 	ldw	r2,-24(fp)
8110a330:	e0fff943 	ldbu	r3,-27(fp)
8110a334:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a338:	e0bffa17 	ldw	r2,-24(fp)
8110a33c:	10800044 	addi	r2,r2,1
8110a340:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a344:	e0bff947 	ldb	r2,-27(fp)
8110a348:	10800ba0 	cmpeqi	r2,r2,46
8110a34c:	1000031e 	bne	r2,zero,8110a35c <vLoadDefaultETHConf+0x460>
8110a350:	e0bff947 	ldb	r2,-27(fp)
8110a354:	10800ed8 	cmpnei	r2,r2,59
8110a358:	103fe81e 	bne	r2,zero,8110a2fc <__reset+0xfb0ea2fc>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a35c:	e0bffa17 	ldw	r2,-24(fp)
8110a360:	00c00284 	movi	r3,10
8110a364:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110a368:	e0bff903 	ldbu	r2,-28(fp)
8110a36c:	108000e8 	cmpgeui	r2,r2,3
8110a370:	1000021e 	bne	r2,zero,8110a37c <vLoadDefaultETHConf+0x480>
8110a374:	e43ff903 	ldbu	r16,-28(fp)
8110a378:	00000106 	br	8110a380 <vLoadDefaultETHConf+0x484>
8110a37c:	040000c4 	movi	r16,3
8110a380:	e0bffd04 	addi	r2,fp,-12
8110a384:	1009883a 	mov	r4,r2
8110a388:	110d7840 	call	8110d784 <atoi>
8110a38c:	1007883a 	mov	r3,r2
8110a390:	00a045b4 	movhi	r2,33046
8110a394:	10bed904 	addi	r2,r2,-1180
8110a398:	1405883a 	add	r2,r2,r16
8110a39c:	10800104 	addi	r2,r2,4
8110a3a0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a3a4:	e0bffd04 	addi	r2,fp,-12
8110a3a8:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a3ac:	e0bff903 	ldbu	r2,-28(fp)
8110a3b0:	10800044 	addi	r2,r2,1
8110a3b4:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a3b8:	e0bff947 	ldb	r2,-27(fp)
8110a3bc:	10800ed8 	cmpnei	r2,r2,59
8110a3c0:	103fce1e 	bne	r2,zero,8110a2fc <__reset+0xfb0ea2fc>

						break;
8110a3c4:	0000c906 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110a3c8:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a3cc:	e0bffc0f 	ldh	r2,-16(fp)
8110a3d0:	1009883a 	mov	r4,r2
8110a3d4:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a3d8:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a3dc:	d0e00917 	ldw	r3,-32732(gp)
8110a3e0:	e0bff947 	ldb	r2,-27(fp)
8110a3e4:	10800044 	addi	r2,r2,1
8110a3e8:	1885883a 	add	r2,r3,r2
8110a3ec:	10800003 	ldbu	r2,0(r2)
8110a3f0:	10803fcc 	andi	r2,r2,255
8110a3f4:	1080010c 	andi	r2,r2,4
8110a3f8:	10000626 	beq	r2,zero,8110a414 <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110a3fc:	e0bffa17 	ldw	r2,-24(fp)
8110a400:	e0fff943 	ldbu	r3,-27(fp)
8110a404:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a408:	e0bffa17 	ldw	r2,-24(fp)
8110a40c:	10800044 	addi	r2,r2,1
8110a410:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a414:	e0bff947 	ldb	r2,-27(fp)
8110a418:	10800ba0 	cmpeqi	r2,r2,46
8110a41c:	1000031e 	bne	r2,zero,8110a42c <vLoadDefaultETHConf+0x530>
8110a420:	e0bff947 	ldb	r2,-27(fp)
8110a424:	10800ed8 	cmpnei	r2,r2,59
8110a428:	103fe81e 	bne	r2,zero,8110a3cc <__reset+0xfb0ea3cc>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a42c:	e0bffa17 	ldw	r2,-24(fp)
8110a430:	00c00284 	movi	r3,10
8110a434:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110a438:	e0bff903 	ldbu	r2,-28(fp)
8110a43c:	108000e8 	cmpgeui	r2,r2,3
8110a440:	1000021e 	bne	r2,zero,8110a44c <vLoadDefaultETHConf+0x550>
8110a444:	e43ff903 	ldbu	r16,-28(fp)
8110a448:	00000106 	br	8110a450 <vLoadDefaultETHConf+0x554>
8110a44c:	040000c4 	movi	r16,3
8110a450:	e0bffd04 	addi	r2,fp,-12
8110a454:	1009883a 	mov	r4,r2
8110a458:	110d7840 	call	8110d784 <atoi>
8110a45c:	1007883a 	mov	r3,r2
8110a460:	00a045b4 	movhi	r2,33046
8110a464:	10bed904 	addi	r2,r2,-1180
8110a468:	1405883a 	add	r2,r2,r16
8110a46c:	10800204 	addi	r2,r2,8
8110a470:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a474:	e0bffd04 	addi	r2,fp,-12
8110a478:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a47c:	e0bff903 	ldbu	r2,-28(fp)
8110a480:	10800044 	addi	r2,r2,1
8110a484:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a488:	e0bff947 	ldb	r2,-27(fp)
8110a48c:	10800ed8 	cmpnei	r2,r2,59
8110a490:	103fce1e 	bne	r2,zero,8110a3cc <__reset+0xfb0ea3cc>

						break;
8110a494:	00009506 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110a498:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110a49c:	e0bffc0f 	ldh	r2,-16(fp)
8110a4a0:	1009883a 	mov	r4,r2
8110a4a4:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a4a8:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110a4ac:	d0e00917 	ldw	r3,-32732(gp)
8110a4b0:	e0bff947 	ldb	r2,-27(fp)
8110a4b4:	10800044 	addi	r2,r2,1
8110a4b8:	1885883a 	add	r2,r3,r2
8110a4bc:	10800003 	ldbu	r2,0(r2)
8110a4c0:	10803fcc 	andi	r2,r2,255
8110a4c4:	1080010c 	andi	r2,r2,4
8110a4c8:	10000626 	beq	r2,zero,8110a4e4 <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110a4cc:	e0bffa17 	ldw	r2,-24(fp)
8110a4d0:	e0fff943 	ldbu	r3,-27(fp)
8110a4d4:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110a4d8:	e0bffa17 	ldw	r2,-24(fp)
8110a4dc:	10800044 	addi	r2,r2,1
8110a4e0:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110a4e4:	e0bff947 	ldb	r2,-27(fp)
8110a4e8:	10800ba0 	cmpeqi	r2,r2,46
8110a4ec:	1000031e 	bne	r2,zero,8110a4fc <vLoadDefaultETHConf+0x600>
8110a4f0:	e0bff947 	ldb	r2,-27(fp)
8110a4f4:	10800ed8 	cmpnei	r2,r2,59
8110a4f8:	103fe81e 	bne	r2,zero,8110a49c <__reset+0xfb0ea49c>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a4fc:	e0bffa17 	ldw	r2,-24(fp)
8110a500:	00c00284 	movi	r3,10
8110a504:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110a508:	e0bff903 	ldbu	r2,-28(fp)
8110a50c:	108000e8 	cmpgeui	r2,r2,3
8110a510:	1000021e 	bne	r2,zero,8110a51c <vLoadDefaultETHConf+0x620>
8110a514:	e43ff903 	ldbu	r16,-28(fp)
8110a518:	00000106 	br	8110a520 <vLoadDefaultETHConf+0x624>
8110a51c:	040000c4 	movi	r16,3
8110a520:	e0bffd04 	addi	r2,fp,-12
8110a524:	1009883a 	mov	r4,r2
8110a528:	110d7840 	call	8110d784 <atoi>
8110a52c:	1007883a 	mov	r3,r2
8110a530:	00a045b4 	movhi	r2,33046
8110a534:	10bed904 	addi	r2,r2,-1180
8110a538:	1405883a 	add	r2,r2,r16
8110a53c:	10800304 	addi	r2,r2,12
8110a540:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110a544:	e0bffd04 	addi	r2,fp,-12
8110a548:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110a54c:	e0bff903 	ldbu	r2,-28(fp)
8110a550:	10800044 	addi	r2,r2,1
8110a554:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110a558:	e0bff947 	ldb	r2,-27(fp)
8110a55c:	10800ed8 	cmpnei	r2,r2,59
8110a560:	103fce1e 	bne	r2,zero,8110a49c <__reset+0xfb0ea49c>

						break;						
8110a564:	00006106 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110a568:	e0bffc0f 	ldh	r2,-16(fp)
8110a56c:	1009883a 	mov	r4,r2
8110a570:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a574:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110a578:	d0e00917 	ldw	r3,-32732(gp)
8110a57c:	e0bff947 	ldb	r2,-27(fp)
8110a580:	10800044 	addi	r2,r2,1
8110a584:	1885883a 	add	r2,r3,r2
8110a588:	10800003 	ldbu	r2,0(r2)
8110a58c:	10803fcc 	andi	r2,r2,255
8110a590:	1080010c 	andi	r2,r2,4
8110a594:	10000626 	beq	r2,zero,8110a5b0 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110a598:	e0bffa17 	ldw	r2,-24(fp)
8110a59c:	e0fff943 	ldbu	r3,-27(fp)
8110a5a0:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110a5a4:	e0bffa17 	ldw	r2,-24(fp)
8110a5a8:	10800044 	addi	r2,r2,1
8110a5ac:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110a5b0:	e0bff947 	ldb	r2,-27(fp)
8110a5b4:	10800ed8 	cmpnei	r2,r2,59
8110a5b8:	103feb1e 	bne	r2,zero,8110a568 <__reset+0xfb0ea568>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a5bc:	e0bffa17 	ldw	r2,-24(fp)
8110a5c0:	00c00284 	movi	r3,10
8110a5c4:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110a5c8:	e0bffd04 	addi	r2,fp,-12
8110a5cc:	1009883a 	mov	r4,r2
8110a5d0:	110d7840 	call	8110d784 <atoi>
8110a5d4:	1007883a 	mov	r3,r2
8110a5d8:	00a045b4 	movhi	r2,33046
8110a5dc:	10bed904 	addi	r2,r2,-1180
8110a5e0:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110a5e4:	e0bffd04 	addi	r2,fp,-12
8110a5e8:	e0bffa15 	stw	r2,-24(fp)

						break;
8110a5ec:	00003f06 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110a5f0:	e0bffc0f 	ldh	r2,-16(fp)
8110a5f4:	1009883a 	mov	r4,r2
8110a5f8:	110bf0c0 	call	8110bf0c <cGetNextChar>
8110a5fc:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110a600:	d0e00917 	ldw	r3,-32732(gp)
8110a604:	e0bff947 	ldb	r2,-27(fp)
8110a608:	10800044 	addi	r2,r2,1
8110a60c:	1885883a 	add	r2,r3,r2
8110a610:	10800003 	ldbu	r2,0(r2)
8110a614:	10803fcc 	andi	r2,r2,255
8110a618:	1080010c 	andi	r2,r2,4
8110a61c:	10000626 	beq	r2,zero,8110a638 <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110a620:	e0bffa17 	ldw	r2,-24(fp)
8110a624:	e0fff943 	ldbu	r3,-27(fp)
8110a628:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110a62c:	e0bffa17 	ldw	r2,-24(fp)
8110a630:	10800044 	addi	r2,r2,1
8110a634:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110a638:	e0bff947 	ldb	r2,-27(fp)
8110a63c:	10800ed8 	cmpnei	r2,r2,59
8110a640:	103feb1e 	bne	r2,zero,8110a5f0 <__reset+0xfb0ea5f0>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110a644:	e0bffa17 	ldw	r2,-24(fp)
8110a648:	00c00284 	movi	r3,10
8110a64c:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110a650:	e0bffd04 	addi	r2,fp,-12
8110a654:	1009883a 	mov	r4,r2
8110a658:	110d7840 	call	8110d784 <atoi>
8110a65c:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110a660:	e0bffc8f 	ldh	r2,-14(fp)
8110a664:	10800058 	cmpnei	r2,r2,1
8110a668:	1000051e 	bne	r2,zero,8110a680 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110a66c:	00a045b4 	movhi	r2,33046
8110a670:	10bed904 	addi	r2,r2,-1180
8110a674:	00c00044 	movi	r3,1
8110a678:	10c00615 	stw	r3,24(r2)
8110a67c:	00000306 	br	8110a68c <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110a680:	00a045b4 	movhi	r2,33046
8110a684:	10bed904 	addi	r2,r2,-1180
8110a688:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110a68c:	e0bffd04 	addi	r2,fp,-12
8110a690:	e0bffa15 	stw	r2,-24(fp)

						break;
8110a694:	00001506 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110a698:	e0bffc0f 	ldh	r2,-16(fp)
8110a69c:	1009883a 	mov	r4,r2
8110a6a0:	110becc0 	call	8110becc <siCloseFile>
8110a6a4:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110a6a8:	e0bffb17 	ldw	r2,-20(fp)
8110a6ac:	1000031e 	bne	r2,zero,8110a6bc <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110a6b0:	01204534 	movhi	r4,33044
8110a6b4:	2125f204 	addi	r4,r4,-26680
8110a6b8:	110ed240 	call	8110ed24 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110a6bc:	00800044 	movi	r2,1
8110a6c0:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110a6c4:	00800044 	movi	r2,1
8110a6c8:	e0bff715 	stw	r2,-36(fp)
						break;
8110a6cc:	00000706 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110a6d0:	e0bff947 	ldb	r2,-27(fp)
8110a6d4:	100b883a 	mov	r5,r2
8110a6d8:	01204534 	movhi	r4,33044
8110a6dc:	2125fa04 	addi	r4,r4,-26648
8110a6e0:	110ebf80 	call	8110ebf8 <printf>
						break;
8110a6e4:	00000106 	br	8110a6ec <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110a6e8:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110a6ec:	e0bff817 	ldw	r2,-32(fp)
8110a6f0:	103e2026 	beq	r2,zero,81109f74 <__reset+0xfb0e9f74>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110a6f4:	00000706 	br	8110a714 <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110a6f8:	01204534 	movhi	r4,33044
8110a6fc:	21260704 	addi	r4,r4,-26596
8110a700:	110ed240 	call	8110ed24 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110a704:	00000306 	br	8110a714 <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110a708:	01204534 	movhi	r4,33044
8110a70c:	21261004 	addi	r4,r4,-26560
8110a710:	110ed240 	call	8110ed24 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110a714:	e0bff717 	ldw	r2,-36(fp)
8110a718:	1000541e 	bne	r2,zero,8110a86c <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110a71c:	01204534 	movhi	r4,33044
8110a720:	21261304 	addi	r4,r4,-26548
8110a724:	110ed240 	call	8110ed24 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110a728:	01604534 	movhi	r5,33044
8110a72c:	2965eb04 	addi	r5,r5,-26708
8110a730:	01204534 	movhi	r4,33044
8110a734:	21262704 	addi	r4,r4,-26468
8110a738:	110ebf80 	call	8110ebf8 <printf>


		xConfEth.siPortPUS = 17000;
8110a73c:	00a045b4 	movhi	r2,33046
8110a740:	10bed904 	addi	r2,r2,-1180
8110a744:	00d09a04 	movi	r3,17000
8110a748:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110a74c:	00a045b4 	movhi	r2,33046
8110a750:	10bed904 	addi	r2,r2,-1180
8110a754:	00fff004 	movi	r3,-64
8110a758:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110a75c:	00a045b4 	movhi	r2,33046
8110a760:	10bed904 	addi	r2,r2,-1180
8110a764:	00ffea04 	movi	r3,-88
8110a768:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110a76c:	00a045b4 	movhi	r2,33046
8110a770:	10bed904 	addi	r2,r2,-1180
8110a774:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110a778:	00a045b4 	movhi	r2,33046
8110a77c:	10bed904 	addi	r2,r2,-1180
8110a780:	00c00144 	movi	r3,5
8110a784:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110a788:	00a045b4 	movhi	r2,33046
8110a78c:	10bed904 	addi	r2,r2,-1180
8110a790:	00fff004 	movi	r3,-64
8110a794:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110a798:	00a045b4 	movhi	r2,33046
8110a79c:	10bed904 	addi	r2,r2,-1180
8110a7a0:	00ffea04 	movi	r3,-88
8110a7a4:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110a7a8:	00a045b4 	movhi	r2,33046
8110a7ac:	10bed904 	addi	r2,r2,-1180
8110a7b0:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110a7b4:	00a045b4 	movhi	r2,33046
8110a7b8:	10bed904 	addi	r2,r2,-1180
8110a7bc:	00c00044 	movi	r3,1
8110a7c0:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110a7c4:	00a045b4 	movhi	r2,33046
8110a7c8:	10bed904 	addi	r2,r2,-1180
8110a7cc:	00ffffc4 	movi	r3,-1
8110a7d0:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110a7d4:	00a045b4 	movhi	r2,33046
8110a7d8:	10bed904 	addi	r2,r2,-1180
8110a7dc:	00ffffc4 	movi	r3,-1
8110a7e0:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110a7e4:	00a045b4 	movhi	r2,33046
8110a7e8:	10bed904 	addi	r2,r2,-1180
8110a7ec:	00ffffc4 	movi	r3,-1
8110a7f0:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110a7f4:	00a045b4 	movhi	r2,33046
8110a7f8:	10bed904 	addi	r2,r2,-1180
8110a7fc:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110a800:	00a045b4 	movhi	r2,33046
8110a804:	10bed904 	addi	r2,r2,-1180
8110a808:	00ffff04 	movi	r3,-4
8110a80c:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110a810:	00a045b4 	movhi	r2,33046
8110a814:	10bed904 	addi	r2,r2,-1180
8110a818:	00fffdc4 	movi	r3,-9
8110a81c:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110a820:	00a045b4 	movhi	r2,33046
8110a824:	10bed904 	addi	r2,r2,-1180
8110a828:	00c018c4 	movi	r3,99
8110a82c:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110a830:	00a045b4 	movhi	r2,33046
8110a834:	10bed904 	addi	r2,r2,-1180
8110a838:	00c01344 	movi	r3,77
8110a83c:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110a840:	00a045b4 	movhi	r2,33046
8110a844:	10bed904 	addi	r2,r2,-1180
8110a848:	00c007c4 	movi	r3,31
8110a84c:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110a850:	00a045b4 	movhi	r2,33046
8110a854:	10bed904 	addi	r2,r2,-1180
8110a858:	00c01084 	movi	r3,66
8110a85c:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110a860:	00a045b4 	movhi	r2,33046
8110a864:	10bed904 	addi	r2,r2,-1180
8110a868:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110a86c:	e0bff717 	ldw	r2,-36(fp)
}
8110a870:	e6ffff04 	addi	sp,fp,-4
8110a874:	dfc00217 	ldw	ra,8(sp)
8110a878:	df000117 	ldw	fp,4(sp)
8110a87c:	dc000017 	ldw	r16,0(sp)
8110a880:	dec00304 	addi	sp,sp,12
8110a884:	f800283a 	ret

8110a888 <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110a888:	defff004 	addi	sp,sp,-64
8110a88c:	de00012e 	bgeu	sp,et,8110a894 <vShowEthConfig+0xc>
8110a890:	003b68fa 	trap	3
8110a894:	dfc00f15 	stw	ra,60(sp)
8110a898:	df000e15 	stw	fp,56(sp)
8110a89c:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110a8a0:	d0a05a17 	ldw	r2,-32408(gp)
8110a8a4:	100f883a 	mov	r7,r2
8110a8a8:	018007c4 	movi	r6,31
8110a8ac:	01400044 	movi	r5,1
8110a8b0:	01204534 	movhi	r4,33044
8110a8b4:	21262d04 	addi	r4,r4,-26444
8110a8b8:	110decc0 	call	8110decc <fwrite>

		memset(buffer,0,40);
8110a8bc:	01800a04 	movi	r6,40
8110a8c0:	000b883a 	mov	r5,zero
8110a8c4:	e13ff604 	addi	r4,fp,-40
8110a8c8:	110ea300 	call	8110ea30 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110a8cc:	00a045b4 	movhi	r2,33046
8110a8d0:	10bed904 	addi	r2,r2,-1180
8110a8d4:	10800403 	ldbu	r2,16(r2)
8110a8d8:	11803fcc 	andi	r6,r2,255
8110a8dc:	00a045b4 	movhi	r2,33046
8110a8e0:	10bed904 	addi	r2,r2,-1180
8110a8e4:	10800443 	ldbu	r2,17(r2)
8110a8e8:	11c03fcc 	andi	r7,r2,255
8110a8ec:	00a045b4 	movhi	r2,33046
8110a8f0:	10bed904 	addi	r2,r2,-1180
8110a8f4:	10800483 	ldbu	r2,18(r2)
8110a8f8:	10c03fcc 	andi	r3,r2,255
8110a8fc:	00a045b4 	movhi	r2,33046
8110a900:	10bed904 	addi	r2,r2,-1180
8110a904:	108004c3 	ldbu	r2,19(r2)
8110a908:	11003fcc 	andi	r4,r2,255
8110a90c:	00a045b4 	movhi	r2,33046
8110a910:	10bed904 	addi	r2,r2,-1180
8110a914:	10800503 	ldbu	r2,20(r2)
8110a918:	11403fcc 	andi	r5,r2,255
8110a91c:	00a045b4 	movhi	r2,33046
8110a920:	10bed904 	addi	r2,r2,-1180
8110a924:	10800543 	ldbu	r2,21(r2)
8110a928:	10803fcc 	andi	r2,r2,255
8110a92c:	d8800315 	stw	r2,12(sp)
8110a930:	d9400215 	stw	r5,8(sp)
8110a934:	d9000115 	stw	r4,4(sp)
8110a938:	d8c00015 	stw	r3,0(sp)
8110a93c:	01604534 	movhi	r5,33044
8110a940:	29663504 	addi	r5,r5,-26412
8110a944:	e13ff604 	addi	r4,fp,-40
8110a948:	110f0680 	call	8110f068 <sprintf>
		debug(fp, buffer );
8110a94c:	d0a05a17 	ldw	r2,-32408(gp)
8110a950:	e17ff604 	addi	r5,fp,-40
8110a954:	1009883a 	mov	r4,r2
8110a958:	110d8e00 	call	8110d8e0 <fprintf>

		memset(buffer,0,40);
8110a95c:	01800a04 	movi	r6,40
8110a960:	000b883a 	mov	r5,zero
8110a964:	e13ff604 	addi	r4,fp,-40
8110a968:	110ea300 	call	8110ea30 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110a96c:	00a045b4 	movhi	r2,33046
8110a970:	10bed904 	addi	r2,r2,-1180
8110a974:	10800003 	ldbu	r2,0(r2)
8110a978:	11003fcc 	andi	r4,r2,255
8110a97c:	00a045b4 	movhi	r2,33046
8110a980:	10bed904 	addi	r2,r2,-1180
8110a984:	10800043 	ldbu	r2,1(r2)
8110a988:	11403fcc 	andi	r5,r2,255
8110a98c:	00a045b4 	movhi	r2,33046
8110a990:	10bed904 	addi	r2,r2,-1180
8110a994:	10800083 	ldbu	r2,2(r2)
8110a998:	10c03fcc 	andi	r3,r2,255
8110a99c:	00a045b4 	movhi	r2,33046
8110a9a0:	10bed904 	addi	r2,r2,-1180
8110a9a4:	108000c3 	ldbu	r2,3(r2)
8110a9a8:	10803fcc 	andi	r2,r2,255
8110a9ac:	d8800115 	stw	r2,4(sp)
8110a9b0:	d8c00015 	stw	r3,0(sp)
8110a9b4:	280f883a 	mov	r7,r5
8110a9b8:	200d883a 	mov	r6,r4
8110a9bc:	01604534 	movhi	r5,33044
8110a9c0:	29663e04 	addi	r5,r5,-26376
8110a9c4:	e13ff604 	addi	r4,fp,-40
8110a9c8:	110f0680 	call	8110f068 <sprintf>
		debug(fp, buffer );
8110a9cc:	d0a05a17 	ldw	r2,-32408(gp)
8110a9d0:	e17ff604 	addi	r5,fp,-40
8110a9d4:	1009883a 	mov	r4,r2
8110a9d8:	110d8e00 	call	8110d8e0 <fprintf>

		memset(buffer,0,40);
8110a9dc:	01800a04 	movi	r6,40
8110a9e0:	000b883a 	mov	r5,zero
8110a9e4:	e13ff604 	addi	r4,fp,-40
8110a9e8:	110ea300 	call	8110ea30 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110a9ec:	00a045b4 	movhi	r2,33046
8110a9f0:	10bed904 	addi	r2,r2,-1180
8110a9f4:	10800103 	ldbu	r2,4(r2)
8110a9f8:	11003fcc 	andi	r4,r2,255
8110a9fc:	00a045b4 	movhi	r2,33046
8110aa00:	10bed904 	addi	r2,r2,-1180
8110aa04:	10800143 	ldbu	r2,5(r2)
8110aa08:	11403fcc 	andi	r5,r2,255
8110aa0c:	00a045b4 	movhi	r2,33046
8110aa10:	10bed904 	addi	r2,r2,-1180
8110aa14:	10800183 	ldbu	r2,6(r2)
8110aa18:	10c03fcc 	andi	r3,r2,255
8110aa1c:	00a045b4 	movhi	r2,33046
8110aa20:	10bed904 	addi	r2,r2,-1180
8110aa24:	108001c3 	ldbu	r2,7(r2)
8110aa28:	10803fcc 	andi	r2,r2,255
8110aa2c:	d8800115 	stw	r2,4(sp)
8110aa30:	d8c00015 	stw	r3,0(sp)
8110aa34:	280f883a 	mov	r7,r5
8110aa38:	200d883a 	mov	r6,r4
8110aa3c:	01604534 	movhi	r5,33044
8110aa40:	29664404 	addi	r5,r5,-26352
8110aa44:	e13ff604 	addi	r4,fp,-40
8110aa48:	110f0680 	call	8110f068 <sprintf>
		debug(fp, buffer );
8110aa4c:	d0a05a17 	ldw	r2,-32408(gp)
8110aa50:	e17ff604 	addi	r5,fp,-40
8110aa54:	1009883a 	mov	r4,r2
8110aa58:	110d8e00 	call	8110d8e0 <fprintf>

		memset(buffer,0,40);
8110aa5c:	01800a04 	movi	r6,40
8110aa60:	000b883a 	mov	r5,zero
8110aa64:	e13ff604 	addi	r4,fp,-40
8110aa68:	110ea300 	call	8110ea30 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110aa6c:	00a045b4 	movhi	r2,33046
8110aa70:	10bed904 	addi	r2,r2,-1180
8110aa74:	10800203 	ldbu	r2,8(r2)
8110aa78:	11003fcc 	andi	r4,r2,255
8110aa7c:	00a045b4 	movhi	r2,33046
8110aa80:	10bed904 	addi	r2,r2,-1180
8110aa84:	10800243 	ldbu	r2,9(r2)
8110aa88:	11403fcc 	andi	r5,r2,255
8110aa8c:	00a045b4 	movhi	r2,33046
8110aa90:	10bed904 	addi	r2,r2,-1180
8110aa94:	10800283 	ldbu	r2,10(r2)
8110aa98:	10c03fcc 	andi	r3,r2,255
8110aa9c:	00a045b4 	movhi	r2,33046
8110aaa0:	10bed904 	addi	r2,r2,-1180
8110aaa4:	108002c3 	ldbu	r2,11(r2)
8110aaa8:	10803fcc 	andi	r2,r2,255
8110aaac:	d8800115 	stw	r2,4(sp)
8110aab0:	d8c00015 	stw	r3,0(sp)
8110aab4:	280f883a 	mov	r7,r5
8110aab8:	200d883a 	mov	r6,r4
8110aabc:	01604534 	movhi	r5,33044
8110aac0:	29664b04 	addi	r5,r5,-26324
8110aac4:	e13ff604 	addi	r4,fp,-40
8110aac8:	110f0680 	call	8110f068 <sprintf>
		debug(fp, buffer );
8110aacc:	d0a05a17 	ldw	r2,-32408(gp)
8110aad0:	e17ff604 	addi	r5,fp,-40
8110aad4:	1009883a 	mov	r4,r2
8110aad8:	110d8e00 	call	8110d8e0 <fprintf>

		memset(buffer,0,40);
8110aadc:	01800a04 	movi	r6,40
8110aae0:	000b883a 	mov	r5,zero
8110aae4:	e13ff604 	addi	r4,fp,-40
8110aae8:	110ea300 	call	8110ea30 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110aaec:	00a045b4 	movhi	r2,33046
8110aaf0:	10bed904 	addi	r2,r2,-1180
8110aaf4:	10800303 	ldbu	r2,12(r2)
8110aaf8:	11003fcc 	andi	r4,r2,255
8110aafc:	00a045b4 	movhi	r2,33046
8110ab00:	10bed904 	addi	r2,r2,-1180
8110ab04:	10800343 	ldbu	r2,13(r2)
8110ab08:	11403fcc 	andi	r5,r2,255
8110ab0c:	00a045b4 	movhi	r2,33046
8110ab10:	10bed904 	addi	r2,r2,-1180
8110ab14:	10800383 	ldbu	r2,14(r2)
8110ab18:	10c03fcc 	andi	r3,r2,255
8110ab1c:	00a045b4 	movhi	r2,33046
8110ab20:	10bed904 	addi	r2,r2,-1180
8110ab24:	108003c3 	ldbu	r2,15(r2)
8110ab28:	10803fcc 	andi	r2,r2,255
8110ab2c:	d8800115 	stw	r2,4(sp)
8110ab30:	d8c00015 	stw	r3,0(sp)
8110ab34:	280f883a 	mov	r7,r5
8110ab38:	200d883a 	mov	r6,r4
8110ab3c:	01604534 	movhi	r5,33044
8110ab40:	29665204 	addi	r5,r5,-26296
8110ab44:	e13ff604 	addi	r4,fp,-40
8110ab48:	110f0680 	call	8110f068 <sprintf>
		debug(fp, buffer );
8110ab4c:	d0a05a17 	ldw	r2,-32408(gp)
8110ab50:	e17ff604 	addi	r5,fp,-40
8110ab54:	1009883a 	mov	r4,r2
8110ab58:	110d8e00 	call	8110d8e0 <fprintf>

		memset(buffer,0,40);
8110ab5c:	01800a04 	movi	r6,40
8110ab60:	000b883a 	mov	r5,zero
8110ab64:	e13ff604 	addi	r4,fp,-40
8110ab68:	110ea300 	call	8110ea30 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110ab6c:	00a045b4 	movhi	r2,33046
8110ab70:	10bed904 	addi	r2,r2,-1180
8110ab74:	1080058b 	ldhu	r2,22(r2)
8110ab78:	10bfffcc 	andi	r2,r2,65535
8110ab7c:	100d883a 	mov	r6,r2
8110ab80:	01604534 	movhi	r5,33044
8110ab84:	29665904 	addi	r5,r5,-26268
8110ab88:	e13ff604 	addi	r4,fp,-40
8110ab8c:	110f0680 	call	8110f068 <sprintf>
		debug(fp, buffer );
8110ab90:	d0a05a17 	ldw	r2,-32408(gp)
8110ab94:	e17ff604 	addi	r5,fp,-40
8110ab98:	1009883a 	mov	r4,r2
8110ab9c:	110d8e00 	call	8110d8e0 <fprintf>

	}
8110aba0:	0001883a 	nop
8110aba4:	e037883a 	mov	sp,fp
8110aba8:	dfc00117 	ldw	ra,4(sp)
8110abac:	df000017 	ldw	fp,0(sp)
8110abb0:	dec00204 	addi	sp,sp,8
8110abb4:	f800283a 	ret

8110abb8 <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110abb8:	defffb04 	addi	sp,sp,-20
8110abbc:	de00012e 	bgeu	sp,et,8110abc4 <ucCrc8+0xc>
8110abc0:	003b68fa 	trap	3
8110abc4:	df000415 	stw	fp,16(sp)
8110abc8:	df000404 	addi	fp,sp,16
8110abcc:	e13ffd15 	stw	r4,-12(fp)
8110abd0:	e17ffe15 	stw	r5,-8(fp)
8110abd4:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110abd8:	e0bffe17 	ldw	r2,-8(fp)
8110abdc:	1000021e 	bne	r2,zero,8110abe8 <ucCrc8+0x30>
        return 0;
8110abe0:	0005883a 	mov	r2,zero
8110abe4:	00001906 	br	8110ac4c <ucCrc8+0x94>
    crc &= 0xff;
8110abe8:	e0bffd17 	ldw	r2,-12(fp)
8110abec:	10803fcc 	andi	r2,r2,255
8110abf0:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110abf4:	e0fffe17 	ldw	r3,-8(fp)
8110abf8:	e0bfff17 	ldw	r2,-4(fp)
8110abfc:	1885883a 	add	r2,r3,r2
8110ac00:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110ac04:	00000d06 	br	8110ac3c <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110ac08:	e0bffe17 	ldw	r2,-8(fp)
8110ac0c:	10c00044 	addi	r3,r2,1
8110ac10:	e0fffe15 	stw	r3,-8(fp)
8110ac14:	10800003 	ldbu	r2,0(r2)
8110ac18:	10c03fcc 	andi	r3,r2,255
8110ac1c:	e0bffd17 	ldw	r2,-12(fp)
8110ac20:	1886f03a 	xor	r3,r3,r2
8110ac24:	00a04534 	movhi	r2,33044
8110ac28:	10a65cc4 	addi	r2,r2,-26253
8110ac2c:	10c5883a 	add	r2,r2,r3
8110ac30:	10800003 	ldbu	r2,0(r2)
8110ac34:	10803fcc 	andi	r2,r2,255
8110ac38:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110ac3c:	e0fffe17 	ldw	r3,-8(fp)
8110ac40:	e0bffc17 	ldw	r2,-16(fp)
8110ac44:	18bff036 	bltu	r3,r2,8110ac08 <__reset+0xfb0eac08>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110ac48:	e0bffd17 	ldw	r2,-12(fp)
}
8110ac4c:	e037883a 	mov	sp,fp
8110ac50:	df000017 	ldw	fp,0(sp)
8110ac54:	dec00104 	addi	sp,sp,4
8110ac58:	f800283a 	ret

8110ac5c <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110ac5c:	defffb04 	addi	sp,sp,-20
8110ac60:	de00012e 	bgeu	sp,et,8110ac68 <ucCrc8wInit+0xc>
8110ac64:	003b68fa 	trap	3
8110ac68:	dfc00415 	stw	ra,16(sp)
8110ac6c:	df000315 	stw	fp,12(sp)
8110ac70:	df000304 	addi	fp,sp,12
8110ac74:	e13ffe15 	stw	r4,-8(fp)
8110ac78:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
8110ac7c:	000d883a 	mov	r6,zero
8110ac80:	000b883a 	mov	r5,zero
8110ac84:	0009883a 	mov	r4,zero
8110ac88:	110abb80 	call	8110abb8 <ucCrc8>
8110ac8c:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110ac90:	e0bffd03 	ldbu	r2,-12(fp)
8110ac94:	e1bfff17 	ldw	r6,-4(fp)
8110ac98:	e17ffe17 	ldw	r5,-8(fp)
8110ac9c:	1009883a 	mov	r4,r2
8110aca0:	110abb80 	call	8110abb8 <ucCrc8>
}
8110aca4:	e037883a 	mov	sp,fp
8110aca8:	dfc00117 	ldw	ra,4(sp)
8110acac:	df000017 	ldw	fp,0(sp)
8110acb0:	dec00204 	addi	sp,sp,8
8110acb4:	f800283a 	ret

8110acb8 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110acb8:	defff904 	addi	sp,sp,-28
8110acbc:	de00012e 	bgeu	sp,et,8110acc4 <printErrorTask+0xc>
8110acc0:	003b68fa 	trap	3
8110acc4:	dfc00615 	stw	ra,24(sp)
8110acc8:	df000515 	stw	fp,20(sp)
8110accc:	df000504 	addi	fp,sp,20
8110acd0:	2005883a 	mov	r2,r4
8110acd4:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110acd8:	e03ffb15 	stw	zero,-20(fp)
8110acdc:	e03ffc15 	stw	zero,-16(fp)
8110ace0:	e03ffd15 	stw	zero,-12(fp)
8110ace4:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110ace8:	e0bfff03 	ldbu	r2,-4(fp)
8110acec:	100d883a 	mov	r6,r2
8110acf0:	01604534 	movhi	r5,33044
8110acf4:	29669d04 	addi	r5,r5,-25996
8110acf8:	e13ffb04 	addi	r4,fp,-20
8110acfc:	110f0680 	call	8110f068 <sprintf>
		debug(fp, buffer);
8110ad00:	d0a05a17 	ldw	r2,-32408(gp)
8110ad04:	e17ffb04 	addi	r5,fp,-20
8110ad08:	1009883a 	mov	r4,r2
8110ad0c:	110d8e00 	call	8110d8e0 <fprintf>
	}
8110ad10:	0001883a 	nop
8110ad14:	e037883a 	mov	sp,fp
8110ad18:	dfc00117 	ldw	ra,4(sp)
8110ad1c:	df000017 	ldw	fp,0(sp)
8110ad20:	dec00204 	addi	sp,sp,8
8110ad24:	f800283a 	ret

8110ad28 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110ad28:	defffd04 	addi	sp,sp,-12
8110ad2c:	de00012e 	bgeu	sp,et,8110ad34 <vFailCreateMutexSResources+0xc>
8110ad30:	003b68fa 	trap	3
8110ad34:	dfc00215 	stw	ra,8(sp)
8110ad38:	df000115 	stw	fp,4(sp)
8110ad3c:	df000104 	addi	fp,sp,4
8110ad40:	2005883a 	mov	r2,r4
8110ad44:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)");
8110ad48:	d0a05a17 	ldw	r2,-32408(gp)
8110ad4c:	100f883a 	mov	r7,r2
8110ad50:	01800884 	movi	r6,34
8110ad54:	01400044 	movi	r5,1
8110ad58:	01204534 	movhi	r4,33044
8110ad5c:	2126a004 	addi	r4,r4,-25984
8110ad60:	110decc0 	call	8110decc <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110ad64:	e0bfff03 	ldbu	r2,-4(fp)
8110ad68:	1009883a 	mov	r4,r2
8110ad6c:	110acb80 	call	8110acb8 <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ad70:	0001883a 	nop
8110ad74:	e037883a 	mov	sp,fp
8110ad78:	dfc00117 	ldw	ra,4(sp)
8110ad7c:	df000017 	ldw	fp,0(sp)
8110ad80:	dec00204 	addi	sp,sp,8
8110ad84:	f800283a 	ret

8110ad88 <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110ad88:	defffe04 	addi	sp,sp,-8
8110ad8c:	de00012e 	bgeu	sp,et,8110ad94 <vFailCreateSemaphoreResources+0xc>
8110ad90:	003b68fa 	trap	3
8110ad94:	dfc00115 	stw	ra,4(sp)
8110ad98:	df000015 	stw	fp,0(sp)
8110ad9c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)");
8110ada0:	d0a05a17 	ldw	r2,-32408(gp)
8110ada4:	100f883a 	mov	r7,r2
8110ada8:	01800944 	movi	r6,37
8110adac:	01400044 	movi	r5,1
8110adb0:	01204534 	movhi	r4,33044
8110adb4:	2126a904 	addi	r4,r4,-25948
8110adb8:	110decc0 	call	8110decc <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110adbc:	0001883a 	nop
8110adc0:	e037883a 	mov	sp,fp
8110adc4:	dfc00117 	ldw	ra,4(sp)
8110adc8:	df000017 	ldw	fp,0(sp)
8110adcc:	dec00204 	addi	sp,sp,8
8110add0:	f800283a 	ret

8110add4 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110add4:	defffe04 	addi	sp,sp,-8
8110add8:	de00012e 	bgeu	sp,et,8110ade0 <vFailTestCriticasParts+0xc>
8110addc:	003b68fa 	trap	3
8110ade0:	dfc00115 	stw	ra,4(sp)
8110ade4:	df000015 	stw	fp,0(sp)
8110ade8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)");
8110adec:	d0a05a17 	ldw	r2,-32408(gp)
8110adf0:	100f883a 	mov	r7,r2
8110adf4:	01800784 	movi	r6,30
8110adf8:	01400044 	movi	r5,1
8110adfc:	01204534 	movhi	r4,33044
8110ae00:	2126b304 	addi	r4,r4,-25908
8110ae04:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ae08:	0001883a 	nop
8110ae0c:	e037883a 	mov	sp,fp
8110ae10:	dfc00117 	ldw	ra,4(sp)
8110ae14:	df000017 	ldw	fp,0(sp)
8110ae18:	dec00204 	addi	sp,sp,8
8110ae1c:	f800283a 	ret

8110ae20 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110ae20:	defffe04 	addi	sp,sp,-8
8110ae24:	de00012e 	bgeu	sp,et,8110ae2c <vFailSendxSemCommInit+0xc>
8110ae28:	003b68fa 	trap	3
8110ae2c:	dfc00115 	stw	ra,4(sp)
8110ae30:	df000015 	stw	fp,0(sp)
8110ae34:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110ae38:	d0a05a17 	ldw	r2,-32408(gp)
8110ae3c:	100f883a 	mov	r7,r2
8110ae40:	01800744 	movi	r6,29
8110ae44:	01400044 	movi	r5,1
8110ae48:	01204534 	movhi	r4,33044
8110ae4c:	2126bb04 	addi	r4,r4,-25876
8110ae50:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)");
8110ae54:	d0a05a17 	ldw	r2,-32408(gp)
8110ae58:	100f883a 	mov	r7,r2
8110ae5c:	01800a04 	movi	r6,40
8110ae60:	01400044 	movi	r5,1
8110ae64:	01204534 	movhi	r4,33044
8110ae68:	2126c304 	addi	r4,r4,-25844
8110ae6c:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ae70:	0001883a 	nop
8110ae74:	e037883a 	mov	sp,fp
8110ae78:	dfc00117 	ldw	ra,4(sp)
8110ae7c:	df000017 	ldw	fp,0(sp)
8110ae80:	dec00204 	addi	sp,sp,8
8110ae84:	f800283a 	ret

8110ae88 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110ae88:	defffe04 	addi	sp,sp,-8
8110ae8c:	de00012e 	bgeu	sp,et,8110ae94 <vFailSendPreParsedSemaphore+0xc>
8110ae90:	003b68fa 	trap	3
8110ae94:	dfc00115 	stw	ra,4(sp)
8110ae98:	df000015 	stw	fp,0(sp)
8110ae9c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)");
8110aea0:	d0a05a17 	ldw	r2,-32408(gp)
8110aea4:	100f883a 	mov	r7,r2
8110aea8:	018008c4 	movi	r6,35
8110aeac:	01400044 	movi	r5,1
8110aeb0:	01204534 	movhi	r4,33044
8110aeb4:	2126ce04 	addi	r4,r4,-25800
8110aeb8:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110aebc:	0001883a 	nop
8110aec0:	e037883a 	mov	sp,fp
8110aec4:	dfc00117 	ldw	ra,4(sp)
8110aec8:	df000017 	ldw	fp,0(sp)
8110aecc:	dec00204 	addi	sp,sp,8
8110aed0:	f800283a 	ret

8110aed4 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110aed4:	defffe04 	addi	sp,sp,-8
8110aed8:	de00012e 	bgeu	sp,et,8110aee0 <vFailSendPreAckReceiverSemaphore+0xc>
8110aedc:	003b68fa 	trap	3
8110aee0:	dfc00115 	stw	ra,4(sp)
8110aee4:	df000015 	stw	fp,0(sp)
8110aee8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)");
8110aeec:	d0a05a17 	ldw	r2,-32408(gp)
8110aef0:	100f883a 	mov	r7,r2
8110aef4:	01800a04 	movi	r6,40
8110aef8:	01400044 	movi	r5,1
8110aefc:	01204534 	movhi	r4,33044
8110af00:	2126d704 	addi	r4,r4,-25764
8110af04:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110af08:	0001883a 	nop
8110af0c:	e037883a 	mov	sp,fp
8110af10:	dfc00117 	ldw	ra,4(sp)
8110af14:	df000017 	ldw	fp,0(sp)
8110af18:	dec00204 	addi	sp,sp,8
8110af1c:	f800283a 	ret

8110af20 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110af20:	defffe04 	addi	sp,sp,-8
8110af24:	de00012e 	bgeu	sp,et,8110af2c <vFailSendPreAckSenderSemaphore+0xc>
8110af28:	003b68fa 	trap	3
8110af2c:	dfc00115 	stw	ra,4(sp)
8110af30:	df000015 	stw	fp,0(sp)
8110af34:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)");
8110af38:	d0a05a17 	ldw	r2,-32408(gp)
8110af3c:	100f883a 	mov	r7,r2
8110af40:	01800984 	movi	r6,38
8110af44:	01400044 	movi	r5,1
8110af48:	01204534 	movhi	r4,33044
8110af4c:	2126e204 	addi	r4,r4,-25720
8110af50:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110af54:	0001883a 	nop
8110af58:	e037883a 	mov	sp,fp
8110af5c:	dfc00117 	ldw	ra,4(sp)
8110af60:	df000017 	ldw	fp,0(sp)
8110af64:	dec00204 	addi	sp,sp,8
8110af68:	f800283a 	ret

8110af6c <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110af6c:	defffe04 	addi	sp,sp,-8
8110af70:	de00012e 	bgeu	sp,et,8110af78 <vFailGetCountSemaphoreSenderTask+0xc>
8110af74:	003b68fa 	trap	3
8110af78:	dfc00115 	stw	ra,4(sp)
8110af7c:	df000015 	stw	fp,0(sp)
8110af80:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)");
8110af84:	d0a05a17 	ldw	r2,-32408(gp)
8110af88:	100f883a 	mov	r7,r2
8110af8c:	01800a04 	movi	r6,40
8110af90:	01400044 	movi	r5,1
8110af94:	01204534 	movhi	r4,33044
8110af98:	2126ec04 	addi	r4,r4,-25680
8110af9c:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110afa0:	d0a05a17 	ldw	r2,-32408(gp)
8110afa4:	100f883a 	mov	r7,r2
8110afa8:	01801104 	movi	r6,68
8110afac:	01400044 	movi	r5,1
8110afb0:	01204534 	movhi	r4,33044
8110afb4:	2126f704 	addi	r4,r4,-25636
8110afb8:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110afbc:	0001883a 	nop
8110afc0:	e037883a 	mov	sp,fp
8110afc4:	dfc00117 	ldw	ra,4(sp)
8110afc8:	df000017 	ldw	fp,0(sp)
8110afcc:	dec00204 	addi	sp,sp,8
8110afd0:	f800283a 	ret

8110afd4 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110afd4:	defffe04 	addi	sp,sp,-8
8110afd8:	de00012e 	bgeu	sp,et,8110afe0 <vFailGetMutexSenderTask+0xc>
8110afdc:	003b68fa 	trap	3
8110afe0:	dfc00115 	stw	ra,4(sp)
8110afe4:	df000015 	stw	fp,0(sp)
8110afe8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)");
8110afec:	d0a05a17 	ldw	r2,-32408(gp)
8110aff0:	100f883a 	mov	r7,r2
8110aff4:	018007c4 	movi	r6,31
8110aff8:	01400044 	movi	r5,1
8110affc:	01204534 	movhi	r4,33044
8110b000:	21270904 	addi	r4,r4,-25564
8110b004:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110b008:	d0a05a17 	ldw	r2,-32408(gp)
8110b00c:	100f883a 	mov	r7,r2
8110b010:	01801084 	movi	r6,66
8110b014:	01400044 	movi	r5,1
8110b018:	01204534 	movhi	r4,33044
8110b01c:	21271104 	addi	r4,r4,-25532
8110b020:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b024:	0001883a 	nop
8110b028:	e037883a 	mov	sp,fp
8110b02c:	dfc00117 	ldw	ra,4(sp)
8110b030:	df000017 	ldw	fp,0(sp)
8110b034:	dec00204 	addi	sp,sp,8
8110b038:	f800283a 	ret

8110b03c <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110b03c:	defffe04 	addi	sp,sp,-8
8110b040:	de00012e 	bgeu	sp,et,8110b048 <vFailGetCountSemaphoreReceiverTask+0xc>
8110b044:	003b68fa 	trap	3
8110b048:	dfc00115 	stw	ra,4(sp)
8110b04c:	df000015 	stw	fp,0(sp)
8110b050:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)");
8110b054:	d0a05a17 	ldw	r2,-32408(gp)
8110b058:	100f883a 	mov	r7,r2
8110b05c:	01800a84 	movi	r6,42
8110b060:	01400044 	movi	r5,1
8110b064:	01204534 	movhi	r4,33044
8110b068:	21272204 	addi	r4,r4,-25464
8110b06c:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110b070:	d0a05a17 	ldw	r2,-32408(gp)
8110b074:	100f883a 	mov	r7,r2
8110b078:	01801184 	movi	r6,70
8110b07c:	01400044 	movi	r5,1
8110b080:	01204534 	movhi	r4,33044
8110b084:	21272d04 	addi	r4,r4,-25420
8110b088:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b08c:	0001883a 	nop
8110b090:	e037883a 	mov	sp,fp
8110b094:	dfc00117 	ldw	ra,4(sp)
8110b098:	df000017 	ldw	fp,0(sp)
8110b09c:	dec00204 	addi	sp,sp,8
8110b0a0:	f800283a 	ret

8110b0a4 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110b0a4:	defffe04 	addi	sp,sp,-8
8110b0a8:	de00012e 	bgeu	sp,et,8110b0b0 <vFailGetMutexReceiverTask+0xc>
8110b0ac:	003b68fa 	trap	3
8110b0b0:	dfc00115 	stw	ra,4(sp)
8110b0b4:	df000015 	stw	fp,0(sp)
8110b0b8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)");
8110b0bc:	d0a05a17 	ldw	r2,-32408(gp)
8110b0c0:	100f883a 	mov	r7,r2
8110b0c4:	01800844 	movi	r6,33
8110b0c8:	01400044 	movi	r5,1
8110b0cc:	01204534 	movhi	r4,33044
8110b0d0:	21273f04 	addi	r4,r4,-25348
8110b0d4:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110b0d8:	d0a05a17 	ldw	r2,-32408(gp)
8110b0dc:	100f883a 	mov	r7,r2
8110b0e0:	01801104 	movi	r6,68
8110b0e4:	01400044 	movi	r5,1
8110b0e8:	01204534 	movhi	r4,33044
8110b0ec:	21274804 	addi	r4,r4,-25312
8110b0f0:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b0f4:	0001883a 	nop
8110b0f8:	e037883a 	mov	sp,fp
8110b0fc:	dfc00117 	ldw	ra,4(sp)
8110b100:	df000017 	ldw	fp,0(sp)
8110b104:	dec00204 	addi	sp,sp,8
8110b108:	f800283a 	ret

8110b10c <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110b10c:	defffe04 	addi	sp,sp,-8
8110b110:	de00012e 	bgeu	sp,et,8110b118 <vFailGetMutexTxUARTSenderTask+0xc>
8110b114:	003b68fa 	trap	3
8110b118:	dfc00115 	stw	ra,4(sp)
8110b11c:	df000015 	stw	fp,0(sp)
8110b120:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)");
8110b124:	d0a05a17 	ldw	r2,-32408(gp)
8110b128:	100f883a 	mov	r7,r2
8110b12c:	01800944 	movi	r6,37
8110b130:	01400044 	movi	r5,1
8110b134:	01204534 	movhi	r4,33044
8110b138:	21275a04 	addi	r4,r4,-25240
8110b13c:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110b140:	d0a05a17 	ldw	r2,-32408(gp)
8110b144:	100f883a 	mov	r7,r2
8110b148:	01801044 	movi	r6,65
8110b14c:	01400044 	movi	r5,1
8110b150:	01204534 	movhi	r4,33044
8110b154:	21276404 	addi	r4,r4,-25200
8110b158:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b15c:	0001883a 	nop
8110b160:	e037883a 	mov	sp,fp
8110b164:	dfc00117 	ldw	ra,4(sp)
8110b168:	df000017 	ldw	fp,0(sp)
8110b16c:	dec00204 	addi	sp,sp,8
8110b170:	f800283a 	ret

8110b174 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110b174:	defffe04 	addi	sp,sp,-8
8110b178:	de00012e 	bgeu	sp,et,8110b180 <vFailGetMacRTC+0xc>
8110b17c:	003b68fa 	trap	3
8110b180:	dfc00115 	stw	ra,4(sp)
8110b184:	df000015 	stw	fp,0(sp)
8110b188:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC");
8110b18c:	d0a05a17 	ldw	r2,-32408(gp)
8110b190:	100f883a 	mov	r7,r2
8110b194:	01800384 	movi	r6,14
8110b198:	01400044 	movi	r5,1
8110b19c:	01204534 	movhi	r4,33044
8110b1a0:	21277504 	addi	r4,r4,-25132
8110b1a4:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b1a8:	0001883a 	nop
8110b1ac:	e037883a 	mov	sp,fp
8110b1b0:	dfc00117 	ldw	ra,4(sp)
8110b1b4:	df000017 	ldw	fp,0(sp)
8110b1b8:	dec00204 	addi	sp,sp,8
8110b1bc:	f800283a 	ret

8110b1c0 <vFailInitialization>:


void vFailInitialization( void )
{
8110b1c0:	defffe04 	addi	sp,sp,-8
8110b1c4:	de00012e 	bgeu	sp,et,8110b1cc <vFailInitialization+0xc>
8110b1c8:	003b68fa 	trap	3
8110b1cc:	dfc00115 	stw	ra,4(sp)
8110b1d0:	df000015 	stw	fp,0(sp)
8110b1d4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization");
8110b1d8:	d0a05a17 	ldw	r2,-32408(gp)
8110b1dc:	100f883a 	mov	r7,r2
8110b1e0:	018004c4 	movi	r6,19
8110b1e4:	01400044 	movi	r5,1
8110b1e8:	01204534 	movhi	r4,33044
8110b1ec:	21277904 	addi	r4,r4,-25116
8110b1f0:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b1f4:	0001883a 	nop
8110b1f8:	e037883a 	mov	sp,fp
8110b1fc:	dfc00117 	ldw	ra,4(sp)
8110b200:	df000017 	ldw	fp,0(sp)
8110b204:	dec00204 	addi	sp,sp,8
8110b208:	f800283a 	ret

8110b20c <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110b20c:	defffe04 	addi	sp,sp,-8
8110b210:	de00012e 	bgeu	sp,et,8110b218 <vFailReceiverCreate+0xc>
8110b214:	003b68fa 	trap	3
8110b218:	dfc00115 	stw	ra,4(sp)
8110b21c:	df000015 	stw	fp,0(sp)
8110b220:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask");
8110b224:	d0a05a17 	ldw	r2,-32408(gp)
8110b228:	100f883a 	mov	r7,r2
8110b22c:	01800444 	movi	r6,17
8110b230:	01400044 	movi	r5,1
8110b234:	01204534 	movhi	r4,33044
8110b238:	21277e04 	addi	r4,r4,-25096
8110b23c:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b240:	0001883a 	nop
8110b244:	e037883a 	mov	sp,fp
8110b248:	dfc00117 	ldw	ra,4(sp)
8110b24c:	df000017 	ldw	fp,0(sp)
8110b250:	dec00204 	addi	sp,sp,8
8110b254:	f800283a 	ret

8110b258 <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110b258:	defffe04 	addi	sp,sp,-8
8110b25c:	de00012e 	bgeu	sp,et,8110b264 <vFailSenderCreate+0xc>
8110b260:	003b68fa 	trap	3
8110b264:	dfc00115 	stw	ra,4(sp)
8110b268:	df000015 	stw	fp,0(sp)
8110b26c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate");
8110b270:	d0a05a17 	ldw	r2,-32408(gp)
8110b274:	100f883a 	mov	r7,r2
8110b278:	01800444 	movi	r6,17
8110b27c:	01400044 	movi	r5,1
8110b280:	01204534 	movhi	r4,33044
8110b284:	21278304 	addi	r4,r4,-25076
8110b288:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b28c:	0001883a 	nop
8110b290:	e037883a 	mov	sp,fp
8110b294:	dfc00117 	ldw	ra,4(sp)
8110b298:	df000017 	ldw	fp,0(sp)
8110b29c:	dec00204 	addi	sp,sp,8
8110b2a0:	f800283a 	ret

8110b2a4 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110b2a4:	defffe04 	addi	sp,sp,-8
8110b2a8:	de00012e 	bgeu	sp,et,8110b2b0 <vFailDeleteInitialization+0xc>
8110b2ac:	003b68fa 	trap	3
8110b2b0:	dfc00115 	stw	ra,4(sp)
8110b2b4:	df000015 	stw	fp,0(sp)
8110b2b8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization");
8110b2bc:	d0a05a17 	ldw	r2,-32408(gp)
8110b2c0:	100f883a 	mov	r7,r2
8110b2c4:	01800644 	movi	r6,25
8110b2c8:	01400044 	movi	r5,1
8110b2cc:	01204534 	movhi	r4,33044
8110b2d0:	21278804 	addi	r4,r4,-25056
8110b2d4:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b2d8:	0001883a 	nop
8110b2dc:	e037883a 	mov	sp,fp
8110b2e0:	dfc00117 	ldw	ra,4(sp)
8110b2e4:	df000017 	ldw	fp,0(sp)
8110b2e8:	dec00204 	addi	sp,sp,8
8110b2ec:	f800283a 	ret

8110b2f0 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110b2f0:	defffe04 	addi	sp,sp,-8
8110b2f4:	de00012e 	bgeu	sp,et,8110b2fc <vFailSetCountSemaphorexBuffer32+0xc>
8110b2f8:	003b68fa 	trap	3
8110b2fc:	dfc00115 	stw	ra,4(sp)
8110b300:	df000015 	stw	fp,0(sp)
8110b304:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)");
8110b308:	d0a05a17 	ldw	r2,-32408(gp)
8110b30c:	100f883a 	mov	r7,r2
8110b310:	018009c4 	movi	r6,39
8110b314:	01400044 	movi	r5,1
8110b318:	01204534 	movhi	r4,33044
8110b31c:	21278f04 	addi	r4,r4,-25028
8110b320:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110b324:	d0a05a17 	ldw	r2,-32408(gp)
8110b328:	100f883a 	mov	r7,r2
8110b32c:	018008c4 	movi	r6,35
8110b330:	01400044 	movi	r5,1
8110b334:	01204534 	movhi	r4,33044
8110b338:	21279904 	addi	r4,r4,-24988
8110b33c:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b340:	0001883a 	nop
8110b344:	e037883a 	mov	sp,fp
8110b348:	dfc00117 	ldw	ra,4(sp)
8110b34c:	df000017 	ldw	fp,0(sp)
8110b350:	dec00204 	addi	sp,sp,8
8110b354:	f800283a 	ret

8110b358 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110b358:	defffe04 	addi	sp,sp,-8
8110b35c:	de00012e 	bgeu	sp,et,8110b364 <vFailSetCountSemaphorexBuffer64+0xc>
8110b360:	003b68fa 	trap	3
8110b364:	dfc00115 	stw	ra,4(sp)
8110b368:	df000015 	stw	fp,0(sp)
8110b36c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)");
8110b370:	d0a05a17 	ldw	r2,-32408(gp)
8110b374:	100f883a 	mov	r7,r2
8110b378:	018009c4 	movi	r6,39
8110b37c:	01400044 	movi	r5,1
8110b380:	01204534 	movhi	r4,33044
8110b384:	2127a204 	addi	r4,r4,-24952
8110b388:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110b38c:	d0a05a17 	ldw	r2,-32408(gp)
8110b390:	100f883a 	mov	r7,r2
8110b394:	018008c4 	movi	r6,35
8110b398:	01400044 	movi	r5,1
8110b39c:	01204534 	movhi	r4,33044
8110b3a0:	21279904 	addi	r4,r4,-24988
8110b3a4:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b3a8:	0001883a 	nop
8110b3ac:	e037883a 	mov	sp,fp
8110b3b0:	dfc00117 	ldw	ra,4(sp)
8110b3b4:	df000017 	ldw	fp,0(sp)
8110b3b8:	dec00204 	addi	sp,sp,8
8110b3bc:	f800283a 	ret

8110b3c0 <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110b3c0:	defffe04 	addi	sp,sp,-8
8110b3c4:	de00012e 	bgeu	sp,et,8110b3cc <vFailSetCountSemaphorexBuffer128+0xc>
8110b3c8:	003b68fa 	trap	3
8110b3cc:	dfc00115 	stw	ra,4(sp)
8110b3d0:	df000015 	stw	fp,0(sp)
8110b3d4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)");
8110b3d8:	d0a05a17 	ldw	r2,-32408(gp)
8110b3dc:	100f883a 	mov	r7,r2
8110b3e0:	01800a04 	movi	r6,40
8110b3e4:	01400044 	movi	r5,1
8110b3e8:	01204534 	movhi	r4,33044
8110b3ec:	2127ac04 	addi	r4,r4,-24912
8110b3f0:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110b3f4:	d0a05a17 	ldw	r2,-32408(gp)
8110b3f8:	100f883a 	mov	r7,r2
8110b3fc:	018008c4 	movi	r6,35
8110b400:	01400044 	movi	r5,1
8110b404:	01204534 	movhi	r4,33044
8110b408:	21279904 	addi	r4,r4,-24988
8110b40c:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b410:	0001883a 	nop
8110b414:	e037883a 	mov	sp,fp
8110b418:	dfc00117 	ldw	ra,4(sp)
8110b41c:	df000017 	ldw	fp,0(sp)
8110b420:	dec00204 	addi	sp,sp,8
8110b424:	f800283a 	ret

8110b428 <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110b428:	defffe04 	addi	sp,sp,-8
8110b42c:	de00012e 	bgeu	sp,et,8110b434 <vFailFoundBufferRetransmission+0xc>
8110b430:	003b68fa 	trap	3
8110b434:	dfc00115 	stw	ra,4(sp)
8110b438:	df000015 	stw	fp,0(sp)
8110b43c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)");
8110b440:	d0a05a17 	ldw	r2,-32408(gp)
8110b444:	100f883a 	mov	r7,r2
8110b448:	01800984 	movi	r6,38
8110b44c:	01400044 	movi	r5,1
8110b450:	01204534 	movhi	r4,33044
8110b454:	2127b704 	addi	r4,r4,-24868
8110b458:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110b45c:	d0a05a17 	ldw	r2,-32408(gp)
8110b460:	100f883a 	mov	r7,r2
8110b464:	01801284 	movi	r6,74
8110b468:	01400044 	movi	r5,1
8110b46c:	01204534 	movhi	r4,33044
8110b470:	2127c104 	addi	r4,r4,-24828
8110b474:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b478:	0001883a 	nop
8110b47c:	e037883a 	mov	sp,fp
8110b480:	dfc00117 	ldw	ra,4(sp)
8110b484:	df000017 	ldw	fp,0(sp)
8110b488:	dec00204 	addi	sp,sp,8
8110b48c:	f800283a 	ret

8110b490 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110b490:	defffe04 	addi	sp,sp,-8
8110b494:	de00012e 	bgeu	sp,et,8110b49c <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110b498:	003b68fa 	trap	3
8110b49c:	dfc00115 	stw	ra,4(sp)
8110b4a0:	df000015 	stw	fp,0(sp)
8110b4a4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)");
8110b4a8:	d0a05a17 	ldw	r2,-32408(gp)
8110b4ac:	100f883a 	mov	r7,r2
8110b4b0:	01800b44 	movi	r6,45
8110b4b4:	01400044 	movi	r5,1
8110b4b8:	01204534 	movhi	r4,33044
8110b4bc:	2127d404 	addi	r4,r4,-24752
8110b4c0:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110b4c4:	d0a05a17 	ldw	r2,-32408(gp)
8110b4c8:	100f883a 	mov	r7,r2
8110b4cc:	018010c4 	movi	r6,67
8110b4d0:	01400044 	movi	r5,1
8110b4d4:	01204534 	movhi	r4,33044
8110b4d8:	2127e004 	addi	r4,r4,-24704
8110b4dc:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b4e0:	0001883a 	nop
8110b4e4:	e037883a 	mov	sp,fp
8110b4e8:	dfc00117 	ldw	ra,4(sp)
8110b4ec:	df000017 	ldw	fp,0(sp)
8110b4f0:	dec00204 	addi	sp,sp,8
8110b4f4:	f800283a 	ret

8110b4f8 <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110b4f8:	defffe04 	addi	sp,sp,-8
8110b4fc:	de00012e 	bgeu	sp,et,8110b504 <vFailGetxMutexPreParsedParserRxTask+0xc>
8110b500:	003b68fa 	trap	3
8110b504:	dfc00115 	stw	ra,4(sp)
8110b508:	df000015 	stw	fp,0(sp)
8110b50c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)");
8110b510:	d0a05a17 	ldw	r2,-32408(gp)
8110b514:	100f883a 	mov	r7,r2
8110b518:	01800ac4 	movi	r6,43
8110b51c:	01400044 	movi	r5,1
8110b520:	01204534 	movhi	r4,33044
8110b524:	2127f104 	addi	r4,r4,-24636
8110b528:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110b52c:	d0a05a17 	ldw	r2,-32408(gp)
8110b530:	100f883a 	mov	r7,r2
8110b534:	01800fc4 	movi	r6,63
8110b538:	01400044 	movi	r5,1
8110b53c:	01204534 	movhi	r4,33044
8110b540:	2127fc04 	addi	r4,r4,-24592
8110b544:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b548:	0001883a 	nop
8110b54c:	e037883a 	mov	sp,fp
8110b550:	dfc00117 	ldw	ra,4(sp)
8110b554:	df000017 	ldw	fp,0(sp)
8110b558:	dec00204 	addi	sp,sp,8
8110b55c:	f800283a 	ret

8110b560 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110b560:	defffe04 	addi	sp,sp,-8
8110b564:	de00012e 	bgeu	sp,et,8110b56c <vNoContentInPreParsedBuffer+0xc>
8110b568:	003b68fa 	trap	3
8110b56c:	dfc00115 	stw	ra,4(sp)
8110b570:	df000015 	stw	fp,0(sp)
8110b574:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)");
8110b578:	d0a05a17 	ldw	r2,-32408(gp)
8110b57c:	100f883a 	mov	r7,r2
8110b580:	018008c4 	movi	r6,35
8110b584:	01400044 	movi	r5,1
8110b588:	01204534 	movhi	r4,33044
8110b58c:	21280c04 	addi	r4,r4,-24528
8110b590:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110b594:	d0a05a17 	ldw	r2,-32408(gp)
8110b598:	100f883a 	mov	r7,r2
8110b59c:	01801684 	movi	r6,90
8110b5a0:	01400044 	movi	r5,1
8110b5a4:	01204534 	movhi	r4,33044
8110b5a8:	21281504 	addi	r4,r4,-24492
8110b5ac:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b5b0:	0001883a 	nop
8110b5b4:	e037883a 	mov	sp,fp
8110b5b8:	dfc00117 	ldw	ra,4(sp)
8110b5bc:	df000017 	ldw	fp,0(sp)
8110b5c0:	dec00204 	addi	sp,sp,8
8110b5c4:	f800283a 	ret

8110b5c8 <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110b5c8:	defffe04 	addi	sp,sp,-8
8110b5cc:	de00012e 	bgeu	sp,et,8110b5d4 <vCouldNotSendEthConfUART+0xc>
8110b5d0:	003b68fa 	trap	3
8110b5d4:	dfc00115 	stw	ra,4(sp)
8110b5d8:	df000015 	stw	fp,0(sp)
8110b5dc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)");
8110b5e0:	d0a05a17 	ldw	r2,-32408(gp)
8110b5e4:	100f883a 	mov	r7,r2
8110b5e8:	01800804 	movi	r6,32
8110b5ec:	01400044 	movi	r5,1
8110b5f0:	01204534 	movhi	r4,33044
8110b5f4:	21282c04 	addi	r4,r4,-24400
8110b5f8:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110b5fc:	d0a05a17 	ldw	r2,-32408(gp)
8110b600:	100f883a 	mov	r7,r2
8110b604:	01801784 	movi	r6,94
8110b608:	01400044 	movi	r5,1
8110b60c:	01204534 	movhi	r4,33044
8110b610:	21283504 	addi	r4,r4,-24364
8110b614:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b618:	0001883a 	nop
8110b61c:	e037883a 	mov	sp,fp
8110b620:	dfc00117 	ldw	ra,4(sp)
8110b624:	df000017 	ldw	fp,0(sp)
8110b628:	dec00204 	addi	sp,sp,8
8110b62c:	f800283a 	ret

8110b630 <vFailSendNack>:

void vFailSendNack( void )
{
8110b630:	defffe04 	addi	sp,sp,-8
8110b634:	de00012e 	bgeu	sp,et,8110b63c <vFailSendNack+0xc>
8110b638:	003b68fa 	trap	3
8110b63c:	dfc00115 	stw	ra,4(sp)
8110b640:	df000015 	stw	fp,0(sp)
8110b644:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)");
8110b648:	d0a05a17 	ldw	r2,-32408(gp)
8110b64c:	100f883a 	mov	r7,r2
8110b650:	01800544 	movi	r6,21
8110b654:	01400044 	movi	r5,1
8110b658:	01204534 	movhi	r4,33044
8110b65c:	21284d04 	addi	r4,r4,-24268
8110b660:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110b664:	d0a05a17 	ldw	r2,-32408(gp)
8110b668:	100f883a 	mov	r7,r2
8110b66c:	01800a84 	movi	r6,42
8110b670:	01400044 	movi	r5,1
8110b674:	01204534 	movhi	r4,33044
8110b678:	21285304 	addi	r4,r4,-24244
8110b67c:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b680:	0001883a 	nop
8110b684:	e037883a 	mov	sp,fp
8110b688:	dfc00117 	ldw	ra,4(sp)
8110b68c:	df000017 	ldw	fp,0(sp)
8110b690:	dec00204 	addi	sp,sp,8
8110b694:	f800283a 	ret

8110b698 <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110b698:	defffe04 	addi	sp,sp,-8
8110b69c:	de00012e 	bgeu	sp,et,8110b6a4 <vFailSetPreAckSenderBuffer+0xc>
8110b6a0:	003b68fa 	trap	3
8110b6a4:	dfc00115 	stw	ra,4(sp)
8110b6a8:	df000015 	stw	fp,0(sp)
8110b6ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)");
8110b6b0:	d0a05a17 	ldw	r2,-32408(gp)
8110b6b4:	100f883a 	mov	r7,r2
8110b6b8:	01800884 	movi	r6,34
8110b6bc:	01400044 	movi	r5,1
8110b6c0:	01204534 	movhi	r4,33044
8110b6c4:	21285e04 	addi	r4,r4,-24200
8110b6c8:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110b6cc:	d0a05a17 	ldw	r2,-32408(gp)
8110b6d0:	100f883a 	mov	r7,r2
8110b6d4:	01801584 	movi	r6,86
8110b6d8:	01400044 	movi	r5,1
8110b6dc:	01204534 	movhi	r4,33044
8110b6e0:	21286704 	addi	r4,r4,-24164
8110b6e4:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b6e8:	0001883a 	nop
8110b6ec:	e037883a 	mov	sp,fp
8110b6f0:	dfc00117 	ldw	ra,4(sp)
8110b6f4:	df000017 	ldw	fp,0(sp)
8110b6f8:	dec00204 	addi	sp,sp,8
8110b6fc:	f800283a 	ret

8110b700 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110b700:	defffe04 	addi	sp,sp,-8
8110b704:	de00012e 	bgeu	sp,et,8110b70c <vFailSetPreParsedBuffer+0xc>
8110b708:	003b68fa 	trap	3
8110b70c:	dfc00115 	stw	ra,4(sp)
8110b710:	df000015 	stw	fp,0(sp)
8110b714:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)");
8110b718:	d0a05a17 	ldw	r2,-32408(gp)
8110b71c:	100f883a 	mov	r7,r2
8110b720:	018007c4 	movi	r6,31
8110b724:	01400044 	movi	r5,1
8110b728:	01204534 	movhi	r4,33044
8110b72c:	21287d04 	addi	r4,r4,-24076
8110b730:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110b734:	d0a05a17 	ldw	r2,-32408(gp)
8110b738:	100f883a 	mov	r7,r2
8110b73c:	018013c4 	movi	r6,79
8110b740:	01400044 	movi	r5,1
8110b744:	01204534 	movhi	r4,33044
8110b748:	21288504 	addi	r4,r4,-24044
8110b74c:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b750:	0001883a 	nop
8110b754:	e037883a 	mov	sp,fp
8110b758:	dfc00117 	ldw	ra,4(sp)
8110b75c:	df000017 	ldw	fp,0(sp)
8110b760:	dec00204 	addi	sp,sp,8
8110b764:	f800283a 	ret

8110b768 <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110b768:	defffe04 	addi	sp,sp,-8
8110b76c:	de00012e 	bgeu	sp,et,8110b774 <vFailSetPreAckReceiverBuffer+0xc>
8110b770:	003b68fa 	trap	3
8110b774:	dfc00115 	stw	ra,4(sp)
8110b778:	df000015 	stw	fp,0(sp)
8110b77c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)");
8110b780:	d0a05a17 	ldw	r2,-32408(gp)
8110b784:	100f883a 	mov	r7,r2
8110b788:	01800904 	movi	r6,36
8110b78c:	01400044 	movi	r5,1
8110b790:	01204534 	movhi	r4,33044
8110b794:	21289904 	addi	r4,r4,-23964
8110b798:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110b79c:	d0a05a17 	ldw	r2,-32408(gp)
8110b7a0:	100f883a 	mov	r7,r2
8110b7a4:	018015c4 	movi	r6,87
8110b7a8:	01400044 	movi	r5,1
8110b7ac:	01204534 	movhi	r4,33044
8110b7b0:	2128a304 	addi	r4,r4,-23924
8110b7b4:	110decc0 	call	8110decc <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b7b8:	0001883a 	nop
8110b7bc:	e037883a 	mov	sp,fp
8110b7c0:	dfc00117 	ldw	ra,4(sp)
8110b7c4:	df000017 	ldw	fp,0(sp)
8110b7c8:	dec00204 	addi	sp,sp,8
8110b7cc:	f800283a 	ret

8110b7d0 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110b7d0:	defffe04 	addi	sp,sp,-8
8110b7d4:	de00012e 	bgeu	sp,et,8110b7dc <vFailParserCommTaskCreate+0xc>
8110b7d8:	003b68fa 	trap	3
8110b7dc:	dfc00115 	stw	ra,4(sp)
8110b7e0:	df000015 	stw	fp,0(sp)
8110b7e4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate");
8110b7e8:	d0a05a17 	ldw	r2,-32408(gp)
8110b7ec:	100f883a 	mov	r7,r2
8110b7f0:	01800644 	movi	r6,25
8110b7f4:	01400044 	movi	r5,1
8110b7f8:	01204534 	movhi	r4,33044
8110b7fc:	2128b904 	addi	r4,r4,-23836
8110b800:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b804:	0001883a 	nop
8110b808:	e037883a 	mov	sp,fp
8110b80c:	dfc00117 	ldw	ra,4(sp)
8110b810:	df000017 	ldw	fp,0(sp)
8110b814:	dec00204 	addi	sp,sp,8
8110b818:	f800283a 	ret

8110b81c <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110b81c:	defffe04 	addi	sp,sp,-8
8110b820:	de00012e 	bgeu	sp,et,8110b828 <vFailInAckHandlerTaskCreate+0xc>
8110b824:	003b68fa 	trap	3
8110b828:	dfc00115 	stw	ra,4(sp)
8110b82c:	df000015 	stw	fp,0(sp)
8110b830:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110b834:	d0a05a17 	ldw	r2,-32408(gp)
8110b838:	100f883a 	mov	r7,r2
8110b83c:	018006c4 	movi	r6,27
8110b840:	01400044 	movi	r5,1
8110b844:	01204534 	movhi	r4,33044
8110b848:	2128c004 	addi	r4,r4,-23808
8110b84c:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b850:	0001883a 	nop
8110b854:	e037883a 	mov	sp,fp
8110b858:	dfc00117 	ldw	ra,4(sp)
8110b85c:	df000017 	ldw	fp,0(sp)
8110b860:	dec00204 	addi	sp,sp,8
8110b864:	f800283a 	ret

8110b868 <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110b868:	defffe04 	addi	sp,sp,-8
8110b86c:	de00012e 	bgeu	sp,et,8110b874 <vFailOutAckHandlerTaskCreate+0xc>
8110b870:	003b68fa 	trap	3
8110b874:	dfc00115 	stw	ra,4(sp)
8110b878:	df000015 	stw	fp,0(sp)
8110b87c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110b880:	d0a05a17 	ldw	r2,-32408(gp)
8110b884:	100f883a 	mov	r7,r2
8110b888:	018006c4 	movi	r6,27
8110b88c:	01400044 	movi	r5,1
8110b890:	01204534 	movhi	r4,33044
8110b894:	2128c004 	addi	r4,r4,-23808
8110b898:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b89c:	0001883a 	nop
8110b8a0:	e037883a 	mov	sp,fp
8110b8a4:	dfc00117 	ldw	ra,4(sp)
8110b8a8:	df000017 	ldw	fp,0(sp)
8110b8ac:	dec00204 	addi	sp,sp,8
8110b8b0:	f800283a 	ret

8110b8b4 <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110b8b4:	defffe04 	addi	sp,sp,-8
8110b8b8:	de00012e 	bgeu	sp,et,8110b8c0 <vFailCreateTimerRetransmisison+0xc>
8110b8bc:	003b68fa 	trap	3
8110b8c0:	dfc00115 	stw	ra,4(sp)
8110b8c4:	df000015 	stw	fp,0(sp)
8110b8c8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison");
8110b8cc:	d0a05a17 	ldw	r2,-32408(gp)
8110b8d0:	100f883a 	mov	r7,r2
8110b8d4:	01800784 	movi	r6,30
8110b8d8:	01400044 	movi	r5,1
8110b8dc:	01204534 	movhi	r4,33044
8110b8e0:	2128c704 	addi	r4,r4,-23780
8110b8e4:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b8e8:	0001883a 	nop
8110b8ec:	e037883a 	mov	sp,fp
8110b8f0:	dfc00117 	ldw	ra,4(sp)
8110b8f4:	df000017 	ldw	fp,0(sp)
8110b8f8:	dec00204 	addi	sp,sp,8
8110b8fc:	f800283a 	ret

8110b900 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110b900:	defffe04 	addi	sp,sp,-8
8110b904:	de00012e 	bgeu	sp,et,8110b90c <vCouldNotCheckBufferTimeOutFunction+0xc>
8110b908:	003b68fa 	trap	3
8110b90c:	dfc00115 	stw	ra,4(sp)
8110b910:	df000015 	stw	fp,0(sp)
8110b914:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction");
8110b918:	d0a05a17 	ldw	r2,-32408(gp)
8110b91c:	100f883a 	mov	r7,r2
8110b920:	018008c4 	movi	r6,35
8110b924:	01400044 	movi	r5,1
8110b928:	01204534 	movhi	r4,33044
8110b92c:	2128cf04 	addi	r4,r4,-23748
8110b930:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b934:	0001883a 	nop
8110b938:	e037883a 	mov	sp,fp
8110b93c:	dfc00117 	ldw	ra,4(sp)
8110b940:	df000017 	ldw	fp,0(sp)
8110b944:	dec00204 	addi	sp,sp,8
8110b948:	f800283a 	ret

8110b94c <vFailTimeoutCheckerTaskCreate>:

void vFailTimeoutCheckerTaskCreate( void )
{
8110b94c:	defffe04 	addi	sp,sp,-8
8110b950:	de00012e 	bgeu	sp,et,8110b958 <vFailTimeoutCheckerTaskCreate+0xc>
8110b954:	003b68fa 	trap	3
8110b958:	dfc00115 	stw	ra,4(sp)
8110b95c:	df000015 	stw	fp,0(sp)
8110b960:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate");
8110b964:	d0a05a17 	ldw	r2,-32408(gp)
8110b968:	100f883a 	mov	r7,r2
8110b96c:	01800744 	movi	r6,29
8110b970:	01400044 	movi	r5,1
8110b974:	01204534 	movhi	r4,33044
8110b978:	2128d804 	addi	r4,r4,-23712
8110b97c:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110b980:	0001883a 	nop
8110b984:	e037883a 	mov	sp,fp
8110b988:	dfc00117 	ldw	ra,4(sp)
8110b98c:	df000017 	ldw	fp,0(sp)
8110b990:	dec00204 	addi	sp,sp,8
8110b994:	f800283a 	ret

8110b998 <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110b998:	defffe04 	addi	sp,sp,-8
8110b99c:	de00012e 	bgeu	sp,et,8110b9a4 <vFailGetBlockingSemTimeoutTask+0xc>
8110b9a0:	003b68fa 	trap	3
8110b9a4:	dfc00115 	stw	ra,4(sp)
8110b9a8:	df000015 	stw	fp,0(sp)
8110b9ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)");
8110b9b0:	d0a05a17 	ldw	r2,-32408(gp)
8110b9b4:	100f883a 	mov	r7,r2
8110b9b8:	01800984 	movi	r6,38
8110b9bc:	01400044 	movi	r5,1
8110b9c0:	01204534 	movhi	r4,33044
8110b9c4:	2128e004 	addi	r4,r4,-23680
8110b9c8:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.");
8110b9cc:	d0a05a17 	ldw	r2,-32408(gp)
8110b9d0:	100f883a 	mov	r7,r2
8110b9d4:	01800c84 	movi	r6,50
8110b9d8:	01400044 	movi	r5,1
8110b9dc:	01204534 	movhi	r4,33044
8110b9e0:	2128ea04 	addi	r4,r4,-23640
8110b9e4:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110b9e8:	0001883a 	nop
8110b9ec:	e037883a 	mov	sp,fp
8110b9f0:	dfc00117 	ldw	ra,4(sp)
8110b9f4:	df000017 	ldw	fp,0(sp)
8110b9f8:	dec00204 	addi	sp,sp,8
8110b9fc:	f800283a 	ret

8110ba00 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110ba00:	defffe04 	addi	sp,sp,-8
8110ba04:	de00012e 	bgeu	sp,et,8110ba0c <vFailPostBlockingSemTimeoutTask+0xc>
8110ba08:	003b68fa 	trap	3
8110ba0c:	dfc00115 	stw	ra,4(sp)
8110ba10:	df000015 	stw	fp,0(sp)
8110ba14:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)");
8110ba18:	d0a05a17 	ldw	r2,-32408(gp)
8110ba1c:	100f883a 	mov	r7,r2
8110ba20:	018009c4 	movi	r6,39
8110ba24:	01400044 	movi	r5,1
8110ba28:	01204534 	movhi	r4,33044
8110ba2c:	2128f704 	addi	r4,r4,-23588
8110ba30:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.");
8110ba34:	d0a05a17 	ldw	r2,-32408(gp)
8110ba38:	100f883a 	mov	r7,r2
8110ba3c:	01800c44 	movi	r6,49
8110ba40:	01400044 	movi	r5,1
8110ba44:	01204534 	movhi	r4,33044
8110ba48:	21290104 	addi	r4,r4,-23548
8110ba4c:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ba50:	0001883a 	nop
8110ba54:	e037883a 	mov	sp,fp
8110ba58:	dfc00117 	ldw	ra,4(sp)
8110ba5c:	df000017 	ldw	fp,0(sp)
8110ba60:	dec00204 	addi	sp,sp,8
8110ba64:	f800283a 	ret

8110ba68 <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110ba68:	defffe04 	addi	sp,sp,-8
8110ba6c:	de00012e 	bgeu	sp,et,8110ba74 <vFailCouldNotRetransmitTimeoutTask+0xc>
8110ba70:	003b68fa 	trap	3
8110ba74:	dfc00115 	stw	ra,4(sp)
8110ba78:	df000015 	stw	fp,0(sp)
8110ba7c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)");
8110ba80:	d0a05a17 	ldw	r2,-32408(gp)
8110ba84:	100f883a 	mov	r7,r2
8110ba88:	01800a84 	movi	r6,42
8110ba8c:	01400044 	movi	r5,1
8110ba90:	01204534 	movhi	r4,33044
8110ba94:	21290e04 	addi	r4,r4,-23496
8110ba98:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.");
8110ba9c:	d0a05a17 	ldw	r2,-32408(gp)
8110baa0:	100f883a 	mov	r7,r2
8110baa4:	01801604 	movi	r6,88
8110baa8:	01400044 	movi	r5,1
8110baac:	01204534 	movhi	r4,33044
8110bab0:	21291904 	addi	r4,r4,-23452
8110bab4:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bab8:	0001883a 	nop
8110babc:	e037883a 	mov	sp,fp
8110bac0:	dfc00117 	ldw	ra,4(sp)
8110bac4:	df000017 	ldw	fp,0(sp)
8110bac8:	dec00204 	addi	sp,sp,8
8110bacc:	f800283a 	ret

8110bad0 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110bad0:	defffe04 	addi	sp,sp,-8
8110bad4:	de00012e 	bgeu	sp,et,8110badc <vCouldNotRetransmitB32TimeoutTask+0xc>
8110bad8:	003b68fa 	trap	3
8110badc:	dfc00115 	stw	ra,4(sp)
8110bae0:	df000015 	stw	fp,0(sp)
8110bae4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)");
8110bae8:	d0a05a17 	ldw	r2,-32408(gp)
8110baec:	100f883a 	mov	r7,r2
8110baf0:	01800a44 	movi	r6,41
8110baf4:	01400044 	movi	r5,1
8110baf8:	01204534 	movhi	r4,33044
8110bafc:	21293004 	addi	r4,r4,-23360
8110bb00:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).");
8110bb04:	d0a05a17 	ldw	r2,-32408(gp)
8110bb08:	100f883a 	mov	r7,r2
8110bb0c:	01801404 	movi	r6,80
8110bb10:	01400044 	movi	r5,1
8110bb14:	01204534 	movhi	r4,33044
8110bb18:	21293b04 	addi	r4,r4,-23316
8110bb1c:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bb20:	0001883a 	nop
8110bb24:	e037883a 	mov	sp,fp
8110bb28:	dfc00117 	ldw	ra,4(sp)
8110bb2c:	df000017 	ldw	fp,0(sp)
8110bb30:	dec00204 	addi	sp,sp,8
8110bb34:	f800283a 	ret

8110bb38 <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110bb38:	defffe04 	addi	sp,sp,-8
8110bb3c:	de00012e 	bgeu	sp,et,8110bb44 <vCouldNotRetransmitB64TimeoutTask+0xc>
8110bb40:	003b68fa 	trap	3
8110bb44:	dfc00115 	stw	ra,4(sp)
8110bb48:	df000015 	stw	fp,0(sp)
8110bb4c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)");
8110bb50:	d0a05a17 	ldw	r2,-32408(gp)
8110bb54:	100f883a 	mov	r7,r2
8110bb58:	01800a44 	movi	r6,41
8110bb5c:	01400044 	movi	r5,1
8110bb60:	01204534 	movhi	r4,33044
8110bb64:	21295004 	addi	r4,r4,-23232
8110bb68:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).");
8110bb6c:	d0a05a17 	ldw	r2,-32408(gp)
8110bb70:	100f883a 	mov	r7,r2
8110bb74:	01801404 	movi	r6,80
8110bb78:	01400044 	movi	r5,1
8110bb7c:	01204534 	movhi	r4,33044
8110bb80:	21295b04 	addi	r4,r4,-23188
8110bb84:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bb88:	0001883a 	nop
8110bb8c:	e037883a 	mov	sp,fp
8110bb90:	dfc00117 	ldw	ra,4(sp)
8110bb94:	df000017 	ldw	fp,0(sp)
8110bb98:	dec00204 	addi	sp,sp,8
8110bb9c:	f800283a 	ret

8110bba0 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110bba0:	defffe04 	addi	sp,sp,-8
8110bba4:	de00012e 	bgeu	sp,et,8110bbac <vCouldNotRetransmitB128TimeoutTask+0xc>
8110bba8:	003b68fa 	trap	3
8110bbac:	dfc00115 	stw	ra,4(sp)
8110bbb0:	df000015 	stw	fp,0(sp)
8110bbb4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)");
8110bbb8:	d0a05a17 	ldw	r2,-32408(gp)
8110bbbc:	100f883a 	mov	r7,r2
8110bbc0:	01800a84 	movi	r6,42
8110bbc4:	01400044 	movi	r5,1
8110bbc8:	01204534 	movhi	r4,33044
8110bbcc:	21297004 	addi	r4,r4,-23104
8110bbd0:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).");
8110bbd4:	d0a05a17 	ldw	r2,-32408(gp)
8110bbd8:	100f883a 	mov	r7,r2
8110bbdc:	01801444 	movi	r6,81
8110bbe0:	01400044 	movi	r5,1
8110bbe4:	01204534 	movhi	r4,33044
8110bbe8:	21297b04 	addi	r4,r4,-23060
8110bbec:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110bbf0:	0001883a 	nop
8110bbf4:	e037883a 	mov	sp,fp
8110bbf8:	dfc00117 	ldw	ra,4(sp)
8110bbfc:	df000017 	ldw	fp,0(sp)
8110bc00:	dec00204 	addi	sp,sp,8
8110bc04:	f800283a 	ret

8110bc08 <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110bc08:	defffe04 	addi	sp,sp,-8
8110bc0c:	de00012e 	bgeu	sp,et,8110bc14 <vFailStartTimerRetransmission+0xc>
8110bc10:	003b68fa 	trap	3
8110bc14:	dfc00115 	stw	ra,4(sp)
8110bc18:	df000015 	stw	fp,0(sp)
8110bc1c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)");
8110bc20:	d0a05a17 	ldw	r2,-32408(gp)
8110bc24:	100f883a 	mov	r7,r2
8110bc28:	01800944 	movi	r6,37
8110bc2c:	01400044 	movi	r5,1
8110bc30:	01204534 	movhi	r4,33044
8110bc34:	21299004 	addi	r4,r4,-22976
8110bc38:	110decc0 	call	8110decc <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.");
8110bc3c:	d0a05a17 	ldw	r2,-32408(gp)
8110bc40:	100f883a 	mov	r7,r2
8110bc44:	01800d04 	movi	r6,52
8110bc48:	01400044 	movi	r5,1
8110bc4c:	01204534 	movhi	r4,33044
8110bc50:	21299a04 	addi	r4,r4,-22936
8110bc54:	110decc0 	call	8110decc <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
8110bc58:	0001883a 	nop
8110bc5c:	e037883a 	mov	sp,fp
8110bc60:	dfc00117 	ldw	ra,4(sp)
8110bc64:	df000017 	ldw	fp,0(sp)
8110bc68:	dec00204 	addi	sp,sp,8
8110bc6c:	f800283a 	ret

8110bc70 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110bc70:	defffe04 	addi	sp,sp,-8
8110bc74:	de00012e 	bgeu	sp,et,8110bc7c <vInitSimucamBasicHW+0xc>
8110bc78:	003b68fa 	trap	3
8110bc7c:	dfc00115 	stw	ra,4(sp)
8110bc80:	df000015 	stw	fp,0(sp)
8110bc84:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110bc88:	01403fc4 	movi	r5,255
8110bc8c:	0009883a 	mov	r4,zero
8110bc90:	11059780 	call	81105978 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110bc94:	01400834 	movhi	r5,32
8110bc98:	297fffc4 	addi	r5,r5,-1
8110bc9c:	0009883a 	mov	r4,zero
8110bca0:	11059f80 	call	811059f8 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110bca4:	01400074 	movhi	r5,1
8110bca8:	01000044 	movi	r4,1
8110bcac:	11059f80 	call	811059f8 <bSetPainelLeds>

	/* Release ETH Reset */
	vEthReleaseReset();
8110bcb0:	11051bc0 	call	811051bc <vEthReleaseReset>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110bcb4:	0009883a 	mov	r4,zero
8110bcb8:	11066040 	call	81106604 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110bcbc:	0009883a 	mov	r4,zero
8110bcc0:	11066d40 	call	811066d4 <bSSDisplayUpdate>

}
8110bcc4:	0001883a 	nop
8110bcc8:	e037883a 	mov	sp,fp
8110bccc:	dfc00117 	ldw	ra,4(sp)
8110bcd0:	df000017 	ldw	fp,0(sp)
8110bcd4:	dec00204 	addi	sp,sp,8
8110bcd8:	f800283a 	ret

8110bcdc <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110bcdc:	defffd04 	addi	sp,sp,-12
8110bce0:	de00012e 	bgeu	sp,et,8110bce8 <bLogWriteSDCard+0xc>
8110bce4:	003b68fa 	trap	3
8110bce8:	df000215 	stw	fp,8(sp)
8110bcec:	df000204 	addi	fp,sp,8
8110bcf0:	e13ffe15 	stw	r4,-8(fp)
8110bcf4:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110bcf8:	00800044 	movi	r2,1
}
8110bcfc:	e037883a 	mov	sp,fp
8110bd00:	df000017 	ldw	fp,0(sp)
8110bd04:	dec00104 	addi	sp,sp,4
8110bd08:	f800283a 	ret

8110bd0c <bLogWriteETH>:

bool bLogWriteETH ( const char * cDataIn )
{
8110bd0c:	defffe04 	addi	sp,sp,-8
8110bd10:	de00012e 	bgeu	sp,et,8110bd18 <bLogWriteETH+0xc>
8110bd14:	003b68fa 	trap	3
8110bd18:	df000115 	stw	fp,4(sp)
8110bd1c:	df000104 	addi	fp,sp,4
8110bd20:	e13fff15 	stw	r4,-4(fp)

	return TRUE;
8110bd24:	00800044 	movi	r2,1
}
8110bd28:	e037883a 	mov	sp,fp
8110bd2c:	df000017 	ldw	fp,0(sp)
8110bd30:	dec00104 	addi	sp,sp,4
8110bd34:	f800283a 	ret

8110bd38 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110bd38:	defffe04 	addi	sp,sp,-8
8110bd3c:	de00012e 	bgeu	sp,et,8110bd44 <bSDcardIsPresent+0xc>
8110bd40:	003b68fa 	trap	3
8110bd44:	dfc00115 	stw	ra,4(sp)
8110bd48:	df000015 	stw	fp,0(sp)
8110bd4c:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110bd50:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
}
8110bd54:	e037883a 	mov	sp,fp
8110bd58:	dfc00117 	ldw	ra,4(sp)
8110bd5c:	df000017 	ldw	fp,0(sp)
8110bd60:	dec00204 	addi	sp,sp,8
8110bd64:	f800283a 	ret

8110bd68 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110bd68:	defffe04 	addi	sp,sp,-8
8110bd6c:	de00012e 	bgeu	sp,et,8110bd74 <bSDcardFAT16Check+0xc>
8110bd70:	003b68fa 	trap	3
8110bd74:	dfc00115 	stw	ra,4(sp)
8110bd78:	df000015 	stw	fp,0(sp)
8110bd7c:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110bd80:	11310100 	call	81131010 <alt_up_sd_card_is_FAT16>
}
8110bd84:	e037883a 	mov	sp,fp
8110bd88:	dfc00117 	ldw	ra,4(sp)
8110bd8c:	df000017 	ldw	fp,0(sp)
8110bd90:	dec00204 	addi	sp,sp,8
8110bd94:	f800283a 	ret

8110bd98 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110bd98:	defffd04 	addi	sp,sp,-12
8110bd9c:	de00012e 	bgeu	sp,et,8110bda4 <bInitializeSDCard+0xc>
8110bda0:	003b68fa 	trap	3
8110bda4:	dfc00215 	stw	ra,8(sp)
8110bda8:	df000115 	stw	fp,4(sp)
8110bdac:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110bdb0:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110bdb4:	d0206a15 	stw	zero,-32344(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110bdb8:	01204534 	movhi	r4,33044
8110bdbc:	2129a804 	addi	r4,r4,-22880
8110bdc0:	1130e800 	call	81130e80 <alt_up_sd_card_open_dev>
8110bdc4:	d0a06a15 	stw	r2,-32344(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110bdc8:	d0a06a17 	ldw	r2,-32344(gp)
8110bdcc:	10002226 	beq	r2,zero,8110be58 <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
8110bdd0:	110bd380 	call	8110bd38 <bSDcardIsPresent>
8110bdd4:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110bdd8:	e0bfff17 	ldw	r2,-4(fp)
8110bddc:	10001626 	beq	r2,zero,8110be38 <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
8110bde0:	110bd680 	call	8110bd68 <bSDcardFAT16Check>
8110bde4:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110bde8:	e0bfff17 	ldw	r2,-4(fp)
8110bdec:	10000a26 	beq	r2,zero,8110be18 <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
8110bdf0:	00800044 	movi	r2,1
8110bdf4:	d0a06915 	stw	r2,-32348(gp)
				debug(fp, "SD is up.\r\n");
8110bdf8:	d0a05a17 	ldw	r2,-32408(gp)
8110bdfc:	100f883a 	mov	r7,r2
8110be00:	018002c4 	movi	r6,11
8110be04:	01400044 	movi	r5,1
8110be08:	01204534 	movhi	r4,33044
8110be0c:	2129b304 	addi	r4,r4,-22836
8110be10:	110decc0 	call	8110decc <fwrite>
8110be14:	00001806 	br	8110be78 <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110be18:	d0a05a17 	ldw	r2,-32408(gp)
8110be1c:	100f883a 	mov	r7,r2
8110be20:	01800984 	movi	r6,38
8110be24:	01400044 	movi	r5,1
8110be28:	01204534 	movhi	r4,33044
8110be2c:	2129b604 	addi	r4,r4,-22824
8110be30:	110decc0 	call	8110decc <fwrite>
8110be34:	00001006 	br	8110be78 <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110be38:	d0a05a17 	ldw	r2,-32408(gp)
8110be3c:	100f883a 	mov	r7,r2
8110be40:	01800744 	movi	r6,29
8110be44:	01400044 	movi	r5,1
8110be48:	01204534 	movhi	r4,33044
8110be4c:	2129c004 	addi	r4,r4,-22784
8110be50:	110decc0 	call	8110decc <fwrite>
8110be54:	00000806 	br	8110be78 <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110be58:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110be5c:	d0a05a17 	ldw	r2,-32408(gp)
8110be60:	100f883a 	mov	r7,r2
8110be64:	018008c4 	movi	r6,35
8110be68:	01400044 	movi	r5,1
8110be6c:	01204534 	movhi	r4,33044
8110be70:	2129c804 	addi	r4,r4,-22752
8110be74:	110decc0 	call	8110decc <fwrite>
	}

	return bSucess;
8110be78:	e0bfff17 	ldw	r2,-4(fp)
}
8110be7c:	e037883a 	mov	sp,fp
8110be80:	dfc00117 	ldw	ra,4(sp)
8110be84:	df000017 	ldw	fp,0(sp)
8110be88:	dec00204 	addi	sp,sp,8
8110be8c:	f800283a 	ret

8110be90 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110be90:	defffd04 	addi	sp,sp,-12
8110be94:	de00012e 	bgeu	sp,et,8110be9c <siOpenFile+0xc>
8110be98:	003b68fa 	trap	3
8110be9c:	dfc00215 	stw	ra,8(sp)
8110bea0:	df000115 	stw	fp,4(sp)
8110bea4:	df000104 	addi	fp,sp,4
8110bea8:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
8110beac:	000b883a 	mov	r5,zero
8110beb0:	e13fff17 	ldw	r4,-4(fp)
8110beb4:	113151c0 	call	8113151c <alt_up_sd_card_fopen>
}
8110beb8:	e037883a 	mov	sp,fp
8110bebc:	dfc00117 	ldw	ra,4(sp)
8110bec0:	df000017 	ldw	fp,0(sp)
8110bec4:	dec00204 	addi	sp,sp,8
8110bec8:	f800283a 	ret

8110becc <siCloseFile>:

bool siCloseFile( short int file_handle ) {
8110becc:	defffd04 	addi	sp,sp,-12
8110bed0:	de00012e 	bgeu	sp,et,8110bed8 <siCloseFile+0xc>
8110bed4:	003b68fa 	trap	3
8110bed8:	dfc00215 	stw	ra,8(sp)
8110bedc:	df000115 	stw	fp,4(sp)
8110bee0:	df000104 	addi	fp,sp,4
8110bee4:	2005883a 	mov	r2,r4
8110bee8:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
8110beec:	e0bfff0f 	ldh	r2,-4(fp)
8110bef0:	1009883a 	mov	r4,r2
8110bef4:	11323680 	call	81132368 <alt_up_sd_card_fclose>
}
8110bef8:	e037883a 	mov	sp,fp
8110befc:	dfc00117 	ldw	ra,4(sp)
8110bf00:	df000017 	ldw	fp,0(sp)
8110bf04:	dec00204 	addi	sp,sp,8
8110bf08:	f800283a 	ret

8110bf0c <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
8110bf0c:	defffd04 	addi	sp,sp,-12
8110bf10:	de00012e 	bgeu	sp,et,8110bf18 <cGetNextChar+0xc>
8110bf14:	003b68fa 	trap	3
8110bf18:	dfc00215 	stw	ra,8(sp)
8110bf1c:	df000115 	stw	fp,4(sp)
8110bf20:	df000104 	addi	fp,sp,4
8110bf24:	2005883a 	mov	r2,r4
8110bf28:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
8110bf2c:	e0bfff0f 	ldh	r2,-4(fp)
8110bf30:	1009883a 	mov	r4,r2
8110bf34:	11319c00 	call	811319c0 <alt_up_sd_card_read>
}
8110bf38:	e037883a 	mov	sp,fp
8110bf3c:	dfc00117 	ldw	ra,4(sp)
8110bf40:	df000017 	ldw	fp,0(sp)
8110bf44:	dec00204 	addi	sp,sp,8
8110bf48:	f800283a 	ret

8110bf4c <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
8110bf4c:	deffff04 	addi	sp,sp,-4
8110bf50:	de00012e 	bgeu	sp,et,8110bf58 <bTestSimucamCriticalHW+0xc>
8110bf54:	003b68fa 	trap	3
8110bf58:	df000015 	stw	fp,0(sp)
8110bf5c:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110bf60:	00800044 	movi	r2,1
}
8110bf64:	e037883a 	mov	sp,fp
8110bf68:	df000017 	ldw	fp,0(sp)
8110bf6c:	dec00104 	addi	sp,sp,4
8110bf70:	f800283a 	ret

8110bf74 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110bf74:	defffc04 	addi	sp,sp,-16
8110bf78:	de00012e 	bgeu	sp,et,8110bf80 <_reg_write+0xc>
8110bf7c:	003b68fa 	trap	3
8110bf80:	df000315 	stw	fp,12(sp)
8110bf84:	df000304 	addi	fp,sp,12
8110bf88:	e13ffd15 	stw	r4,-12(fp)
8110bf8c:	e17ffe15 	stw	r5,-8(fp)
8110bf90:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110bf94:	e0bffe17 	ldw	r2,-8(fp)
8110bf98:	1085883a 	add	r2,r2,r2
8110bf9c:	1085883a 	add	r2,r2,r2
8110bfa0:	1007883a 	mov	r3,r2
8110bfa4:	e0bffd17 	ldw	r2,-12(fp)
8110bfa8:	1885883a 	add	r2,r3,r2
8110bfac:	1007883a 	mov	r3,r2
8110bfb0:	e0bfff17 	ldw	r2,-4(fp)
8110bfb4:	18800035 	stwio	r2,0(r3)
	return 1;
8110bfb8:	00800044 	movi	r2,1

}
8110bfbc:	e037883a 	mov	sp,fp
8110bfc0:	df000017 	ldw	fp,0(sp)
8110bfc4:	dec00104 	addi	sp,sp,4
8110bfc8:	f800283a 	ret

8110bfcc <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110bfcc:	defffc04 	addi	sp,sp,-16
8110bfd0:	de00012e 	bgeu	sp,et,8110bfd8 <_reg_read+0xc>
8110bfd4:	003b68fa 	trap	3
8110bfd8:	df000315 	stw	fp,12(sp)
8110bfdc:	df000304 	addi	fp,sp,12
8110bfe0:	e13ffd15 	stw	r4,-12(fp)
8110bfe4:	e17ffe15 	stw	r5,-8(fp)
8110bfe8:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110bfec:	e0bffe17 	ldw	r2,-8(fp)
8110bff0:	1085883a 	add	r2,r2,r2
8110bff4:	1085883a 	add	r2,r2,r2
8110bff8:	1007883a 	mov	r3,r2
8110bffc:	e0bffd17 	ldw	r2,-12(fp)
8110c000:	1885883a 	add	r2,r3,r2
8110c004:	10c00037 	ldwio	r3,0(r2)
8110c008:	e0bfff17 	ldw	r2,-4(fp)
8110c00c:	10c00015 	stw	r3,0(r2)
	return 1;
8110c010:	00800044 	movi	r2,1

}
8110c014:	e037883a 	mov	sp,fp
8110c018:	df000017 	ldw	fp,0(sp)
8110c01c:	dec00104 	addi	sp,sp,4
8110c020:	f800283a 	ret

8110c024 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110c024:	defffa04 	addi	sp,sp,-24
8110c028:	de00012e 	bgeu	sp,et,8110c030 <_print_codec_status+0xc>
8110c02c:	003b68fa 	trap	3
8110c030:	dfc00515 	stw	ra,20(sp)
8110c034:	df000415 	stw	fp,16(sp)
8110c038:	df000404 	addi	fp,sp,16
8110c03c:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110c040:	e0bfff17 	ldw	r2,-4(fp)
8110c044:	1005d1ba 	srai	r2,r2,6
8110c048:	1080004c 	andi	r2,r2,1
8110c04c:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110c050:	e0bfff17 	ldw	r2,-4(fp)
8110c054:	1005d17a 	srai	r2,r2,5
8110c058:	1080004c 	andi	r2,r2,1
8110c05c:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110c060:	e0bfff17 	ldw	r2,-4(fp)
8110c064:	1005d13a 	srai	r2,r2,4
8110c068:	1080004c 	andi	r2,r2,1
8110c06c:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
8110c070:	01204534 	movhi	r4,33044
8110c074:	2129d104 	addi	r4,r4,-22716
8110c078:	110ed240 	call	8110ed24 <puts>
	printf("Link started    : %s \n", (started == 1) ? "S" : "N");
8110c07c:	e0bffc17 	ldw	r2,-16(fp)
8110c080:	10800058 	cmpnei	r2,r2,1
8110c084:	1000031e 	bne	r2,zero,8110c094 <_print_codec_status+0x70>
8110c088:	00a04534 	movhi	r2,33044
8110c08c:	10a9d704 	addi	r2,r2,-22692
8110c090:	00000206 	br	8110c09c <_print_codec_status+0x78>
8110c094:	00a04534 	movhi	r2,33044
8110c098:	10a9d804 	addi	r2,r2,-22688
8110c09c:	100b883a 	mov	r5,r2
8110c0a0:	01204534 	movhi	r4,33044
8110c0a4:	2129d904 	addi	r4,r4,-22684
8110c0a8:	110ebf80 	call	8110ebf8 <printf>
	printf("Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110c0ac:	e0bffd17 	ldw	r2,-12(fp)
8110c0b0:	10800058 	cmpnei	r2,r2,1
8110c0b4:	1000031e 	bne	r2,zero,8110c0c4 <_print_codec_status+0xa0>
8110c0b8:	00a04534 	movhi	r2,33044
8110c0bc:	10a9d704 	addi	r2,r2,-22692
8110c0c0:	00000206 	br	8110c0cc <_print_codec_status+0xa8>
8110c0c4:	00a04534 	movhi	r2,33044
8110c0c8:	10a9d804 	addi	r2,r2,-22688
8110c0cc:	100b883a 	mov	r5,r2
8110c0d0:	01204534 	movhi	r4,33044
8110c0d4:	2129df04 	addi	r4,r4,-22660
8110c0d8:	110ebf80 	call	8110ebf8 <printf>
	printf("Link running    : %s \n", (running == 1) ? "S" : "N");
8110c0dc:	e0bffe17 	ldw	r2,-8(fp)
8110c0e0:	10800058 	cmpnei	r2,r2,1
8110c0e4:	1000031e 	bne	r2,zero,8110c0f4 <_print_codec_status+0xd0>
8110c0e8:	00a04534 	movhi	r2,33044
8110c0ec:	10a9d704 	addi	r2,r2,-22692
8110c0f0:	00000206 	br	8110c0fc <_print_codec_status+0xd8>
8110c0f4:	00a04534 	movhi	r2,33044
8110c0f8:	10a9d804 	addi	r2,r2,-22688
8110c0fc:	100b883a 	mov	r5,r2
8110c100:	01204534 	movhi	r4,33044
8110c104:	2129e504 	addi	r4,r4,-22636
8110c108:	110ebf80 	call	8110ebf8 <printf>
	printf("--------  \n");
8110c10c:	01204534 	movhi	r4,33044
8110c110:	2129eb04 	addi	r4,r4,-22612
8110c114:	110ed240 	call	8110ed24 <puts>
}
8110c118:	0001883a 	nop
8110c11c:	e037883a 	mov	sp,fp
8110c120:	dfc00117 	ldw	ra,4(sp)
8110c124:	df000017 	ldw	fp,0(sp)
8110c128:	dec00204 	addi	sp,sp,8
8110c12c:	f800283a 	ret

8110c130 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110c130:	defffb04 	addi	sp,sp,-20
8110c134:	de00012e 	bgeu	sp,et,8110c13c <_split_codec_status+0xc>
8110c138:	003b68fa 	trap	3
8110c13c:	df000415 	stw	fp,16(sp)
8110c140:	df000404 	addi	fp,sp,16
8110c144:	e13ffc15 	stw	r4,-16(fp)
8110c148:	e17ffd15 	stw	r5,-12(fp)
8110c14c:	e1bffe15 	stw	r6,-8(fp)
8110c150:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110c154:	e0bffc17 	ldw	r2,-16(fp)
8110c158:	1005d1ba 	srai	r2,r2,6
8110c15c:	10c0004c 	andi	r3,r2,1
8110c160:	e0bffd17 	ldw	r2,-12(fp)
8110c164:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110c168:	e0bffc17 	ldw	r2,-16(fp)
8110c16c:	1005d17a 	srai	r2,r2,5
8110c170:	10c0004c 	andi	r3,r2,1
8110c174:	e0bffe17 	ldw	r2,-8(fp)
8110c178:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110c17c:	e0bffc17 	ldw	r2,-16(fp)
8110c180:	1005d13a 	srai	r2,r2,4
8110c184:	10c0004c 	andi	r3,r2,1
8110c188:	e0bfff17 	ldw	r2,-4(fp)
8110c18c:	10c00015 	stw	r3,0(r2)
}
8110c190:	0001883a 	nop
8110c194:	e037883a 	mov	sp,fp
8110c198:	df000017 	ldw	fp,0(sp)
8110c19c:	dec00104 	addi	sp,sp,4
8110c1a0:	f800283a 	ret

8110c1a4 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
INT8U aatoh(INT8U *buffer) {
8110c1a4:	defffc04 	addi	sp,sp,-16
8110c1a8:	de00012e 	bgeu	sp,et,8110c1b0 <aatoh+0xc>
8110c1ac:	003b68fa 	trap	3
8110c1b0:	df000315 	stw	fp,12(sp)
8110c1b4:	df000304 	addi	fp,sp,12
8110c1b8:	e13fff15 	stw	r4,-4(fp)
	INT8U* a;
	INT8U v;
	a = buffer;
8110c1bc:	e0bfff17 	ldw	r2,-4(fp)
8110c1c0:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110c1c4:	e0bffd17 	ldw	r2,-12(fp)
8110c1c8:	10c00003 	ldbu	r3,0(r2)
8110c1cc:	e0bffd17 	ldw	r2,-12(fp)
8110c1d0:	10800003 	ldbu	r2,0(r2)
8110c1d4:	10803fcc 	andi	r2,r2,255
8110c1d8:	10800eb0 	cmpltui	r2,r2,58
8110c1dc:	1000021e 	bne	r2,zero,8110c1e8 <aatoh+0x44>
8110c1e0:	00800dc4 	movi	r2,55
8110c1e4:	00000106 	br	8110c1ec <aatoh+0x48>
8110c1e8:	00800c04 	movi	r2,48
8110c1ec:	1885c83a 	sub	r2,r3,r2
8110c1f0:	1004913a 	slli	r2,r2,4
8110c1f4:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110c1f8:	e0bffd17 	ldw	r2,-12(fp)
8110c1fc:	10800044 	addi	r2,r2,1
8110c200:	10c00003 	ldbu	r3,0(r2)
8110c204:	e0bffd17 	ldw	r2,-12(fp)
8110c208:	10800044 	addi	r2,r2,1
8110c20c:	10800003 	ldbu	r2,0(r2)
 */
INT8U aatoh(INT8U *buffer) {
	INT8U* a;
	INT8U v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110c210:	10803fcc 	andi	r2,r2,255
8110c214:	10800eb0 	cmpltui	r2,r2,58
8110c218:	1000021e 	bne	r2,zero,8110c224 <aatoh+0x80>
8110c21c:	00800dc4 	movi	r2,55
8110c220:	00000106 	br	8110c228 <aatoh+0x84>
8110c224:	00800c04 	movi	r2,48
8110c228:	1885c83a 	sub	r2,r3,r2
8110c22c:	2085883a 	add	r2,r4,r2
8110c230:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110c234:	e0bffe03 	ldbu	r2,-8(fp)
}
8110c238:	e037883a 	mov	sp,fp
8110c23c:	df000017 	ldw	fp,0(sp)
8110c240:	dec00104 	addi	sp,sp,4
8110c244:	f800283a 	ret

8110c248 <Verif_Error>:
 * *
 * @retval int
 *
 */

INT8U Verif_Error(INT8U error_code) {
8110c248:	defffd04 	addi	sp,sp,-12
8110c24c:	de00012e 	bgeu	sp,et,8110c254 <Verif_Error+0xc>
8110c250:	003b68fa 	trap	3
8110c254:	dfc00215 	stw	ra,8(sp)
8110c258:	df000115 	stw	fp,4(sp)
8110c25c:	df000104 	addi	fp,sp,4
8110c260:	2005883a 	mov	r2,r4
8110c264:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110c268:	e0bfff03 	ldbu	r2,-4(fp)
8110c26c:	1000051e 	bne	r2,zero,8110c284 <Verif_Error+0x3c>
		printf("ERROR\n\r");
8110c270:	01204534 	movhi	r4,33044
8110c274:	2129ee04 	addi	r4,r4,-22600
8110c278:	110ebf80 	call	8110ebf8 <printf>
		return 0;
8110c27c:	0005883a 	mov	r2,zero
8110c280:	00000106 	br	8110c288 <Verif_Error+0x40>
	} else
		return 1;
8110c284:	00800044 	movi	r2,1
}
8110c288:	e037883a 	mov	sp,fp
8110c28c:	dfc00117 	ldw	ra,4(sp)
8110c290:	df000017 	ldw	fp,0(sp)
8110c294:	dec00204 	addi	sp,sp,8
8110c298:	f800283a 	ret

8110c29c <toInt>:
 * *
 * @retval int
 *
 */

INT8U toInt(INT8U ascii) {
8110c29c:	defffe04 	addi	sp,sp,-8
8110c2a0:	de00012e 	bgeu	sp,et,8110c2a8 <toInt+0xc>
8110c2a4:	003b68fa 	trap	3
8110c2a8:	df000115 	stw	fp,4(sp)
8110c2ac:	df000104 	addi	fp,sp,4
8110c2b0:	2005883a 	mov	r2,r4
8110c2b4:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110c2b8:	e0bfff03 	ldbu	r2,-4(fp)
8110c2bc:	10bff404 	addi	r2,r2,-48
8110c2c0:	e037883a 	mov	sp,fp
8110c2c4:	df000017 	ldw	fp,0(sp)
8110c2c8:	dec00104 	addi	sp,sp,4
8110c2cc:	f800283a 	ret

8110c2d0 <__divsf3>:
8110c2d0:	defff504 	addi	sp,sp,-44
8110c2d4:	200cd5fa 	srli	r6,r4,23
8110c2d8:	de00012e 	bgeu	sp,et,8110c2e0 <__divsf3+0x10>
8110c2dc:	003b68fa 	trap	3
8110c2e0:	dcc00415 	stw	r19,16(sp)
8110c2e4:	2026d7fa 	srli	r19,r4,31
8110c2e8:	00c02034 	movhi	r3,128
8110c2ec:	dd800715 	stw	r22,28(sp)
8110c2f0:	dd000515 	stw	r20,20(sp)
8110c2f4:	dc800315 	stw	r18,12(sp)
8110c2f8:	18ffffc4 	addi	r3,r3,-1
8110c2fc:	dfc00a15 	stw	ra,40(sp)
8110c300:	df000915 	stw	fp,36(sp)
8110c304:	ddc00815 	stw	r23,32(sp)
8110c308:	dd400615 	stw	r21,24(sp)
8110c30c:	dc400215 	stw	r17,8(sp)
8110c310:	dc000115 	stw	r16,4(sp)
8110c314:	35003fcc 	andi	r20,r6,255
8110c318:	1924703a 	and	r18,r3,r4
8110c31c:	9d803fcc 	andi	r22,r19,255
8110c320:	a0005226 	beq	r20,zero,8110c46c <__divsf3+0x19c>
8110c324:	00803fc4 	movi	r2,255
8110c328:	a0802e26 	beq	r20,r2,8110c3e4 <__divsf3+0x114>
8110c32c:	91002034 	orhi	r4,r18,128
8110c330:	202490fa 	slli	r18,r4,3
8110c334:	a53fe044 	addi	r20,r20,-127
8110c338:	0021883a 	mov	r16,zero
8110c33c:	002f883a 	mov	r23,zero
8110c340:	280cd5fa 	srli	r6,r5,23
8110c344:	282ad7fa 	srli	r21,r5,31
8110c348:	00c02034 	movhi	r3,128
8110c34c:	18ffffc4 	addi	r3,r3,-1
8110c350:	31803fcc 	andi	r6,r6,255
8110c354:	1962703a 	and	r17,r3,r5
8110c358:	af003fcc 	andi	fp,r21,255
8110c35c:	30004a26 	beq	r6,zero,8110c488 <__divsf3+0x1b8>
8110c360:	00803fc4 	movi	r2,255
8110c364:	30804526 	beq	r6,r2,8110c47c <__divsf3+0x1ac>
8110c368:	89402034 	orhi	r5,r17,128
8110c36c:	282290fa 	slli	r17,r5,3
8110c370:	31bfe044 	addi	r6,r6,-127
8110c374:	000b883a 	mov	r5,zero
8110c378:	2c20b03a 	or	r16,r5,r16
8110c37c:	802090ba 	slli	r16,r16,2
8110c380:	00a04474 	movhi	r2,33041
8110c384:	10b0e904 	addi	r2,r2,-15452
8110c388:	80a1883a 	add	r16,r16,r2
8110c38c:	81000017 	ldw	r4,0(r16)
8110c390:	9d46f03a 	xor	r3,r19,r21
8110c394:	180f883a 	mov	r7,r3
8110c398:	18803fcc 	andi	r2,r3,255
8110c39c:	a18dc83a 	sub	r6,r20,r6
8110c3a0:	2000683a 	jmp	r4
8110c3a4:	8110c588 	cmpgei	r4,r16,17174
8110c3a8:	8110c40c 	andi	r4,r16,17168
8110c3ac:	8110c57c 	xorhi	r4,r16,17173
8110c3b0:	8110c3f8 	rdprs	r4,r16,17167
8110c3b4:	8110c57c 	xorhi	r4,r16,17173
8110c3b8:	8110c554 	ori	r4,r16,17173
8110c3bc:	8110c57c 	xorhi	r4,r16,17173
8110c3c0:	8110c3f8 	rdprs	r4,r16,17167
8110c3c4:	8110c40c 	andi	r4,r16,17168
8110c3c8:	8110c40c 	andi	r4,r16,17168
8110c3cc:	8110c554 	ori	r4,r16,17173
8110c3d0:	8110c3f8 	rdprs	r4,r16,17167
8110c3d4:	8110c668 	cmpgeui	r4,r16,17177
8110c3d8:	8110c668 	cmpgeui	r4,r16,17177
8110c3dc:	8110c668 	cmpgeui	r4,r16,17177
8110c3e0:	8110c61c 	xori	r4,r16,17176
8110c3e4:	9000581e 	bne	r18,zero,8110c548 <__divsf3+0x278>
8110c3e8:	04000204 	movi	r16,8
8110c3ec:	05c00084 	movi	r23,2
8110c3f0:	003fd306 	br	8110c340 <__reset+0xfb0ec340>
8110c3f4:	0023883a 	mov	r17,zero
8110c3f8:	e02d883a 	mov	r22,fp
8110c3fc:	282f883a 	mov	r23,r5
8110c400:	00800084 	movi	r2,2
8110c404:	b8808f1e 	bne	r23,r2,8110c644 <__divsf3+0x374>
8110c408:	b005883a 	mov	r2,r22
8110c40c:	11c0004c 	andi	r7,r2,1
8110c410:	013fffc4 	movi	r4,-1
8110c414:	000d883a 	mov	r6,zero
8110c418:	21003fcc 	andi	r4,r4,255
8110c41c:	200895fa 	slli	r4,r4,23
8110c420:	38803fcc 	andi	r2,r7,255
8110c424:	00c02034 	movhi	r3,128
8110c428:	100497fa 	slli	r2,r2,31
8110c42c:	18ffffc4 	addi	r3,r3,-1
8110c430:	30c6703a 	and	r3,r6,r3
8110c434:	1906b03a 	or	r3,r3,r4
8110c438:	1884b03a 	or	r2,r3,r2
8110c43c:	dfc00a17 	ldw	ra,40(sp)
8110c440:	df000917 	ldw	fp,36(sp)
8110c444:	ddc00817 	ldw	r23,32(sp)
8110c448:	dd800717 	ldw	r22,28(sp)
8110c44c:	dd400617 	ldw	r21,24(sp)
8110c450:	dd000517 	ldw	r20,20(sp)
8110c454:	dcc00417 	ldw	r19,16(sp)
8110c458:	dc800317 	ldw	r18,12(sp)
8110c45c:	dc400217 	ldw	r17,8(sp)
8110c460:	dc000117 	ldw	r16,4(sp)
8110c464:	dec00b04 	addi	sp,sp,44
8110c468:	f800283a 	ret
8110c46c:	90002b1e 	bne	r18,zero,8110c51c <__divsf3+0x24c>
8110c470:	04000104 	movi	r16,4
8110c474:	05c00044 	movi	r23,1
8110c478:	003fb106 	br	8110c340 <__reset+0xfb0ec340>
8110c47c:	8800251e 	bne	r17,zero,8110c514 <__divsf3+0x244>
8110c480:	01400084 	movi	r5,2
8110c484:	00000206 	br	8110c490 <__divsf3+0x1c0>
8110c488:	88001a1e 	bne	r17,zero,8110c4f4 <__divsf3+0x224>
8110c48c:	01400044 	movi	r5,1
8110c490:	8160b03a 	or	r16,r16,r5
8110c494:	802090ba 	slli	r16,r16,2
8110c498:	00e04474 	movhi	r3,33041
8110c49c:	18f12d04 	addi	r3,r3,-15180
8110c4a0:	80e1883a 	add	r16,r16,r3
8110c4a4:	80c00017 	ldw	r3,0(r16)
8110c4a8:	9d44f03a 	xor	r2,r19,r21
8110c4ac:	a18dc83a 	sub	r6,r20,r6
8110c4b0:	1800683a 	jmp	r3
8110c4b4:	8110c40c 	andi	r4,r16,17168
8110c4b8:	8110c40c 	andi	r4,r16,17168
8110c4bc:	8110c658 	cmpnei	r4,r16,17177
8110c4c0:	8110c3f4 	orhi	r4,r16,17167
8110c4c4:	8110c658 	cmpnei	r4,r16,17177
8110c4c8:	8110c554 	ori	r4,r16,17173
8110c4cc:	8110c658 	cmpnei	r4,r16,17177
8110c4d0:	8110c3f4 	orhi	r4,r16,17167
8110c4d4:	8110c40c 	andi	r4,r16,17168
8110c4d8:	8110c40c 	andi	r4,r16,17168
8110c4dc:	8110c554 	ori	r4,r16,17173
8110c4e0:	8110c3f4 	orhi	r4,r16,17167
8110c4e4:	8110c668 	cmpgeui	r4,r16,17177
8110c4e8:	8110c668 	cmpgeui	r4,r16,17177
8110c4ec:	8110c668 	cmpgeui	r4,r16,17177
8110c4f0:	8110c680 	call	88110c68 <__reset+0x20f0c68>
8110c4f4:	8809883a 	mov	r4,r17
8110c4f8:	110d7200 	call	8110d720 <__clzsi2>
8110c4fc:	10fffec4 	addi	r3,r2,-5
8110c500:	10801d84 	addi	r2,r2,118
8110c504:	88e2983a 	sll	r17,r17,r3
8110c508:	008dc83a 	sub	r6,zero,r2
8110c50c:	000b883a 	mov	r5,zero
8110c510:	003f9906 	br	8110c378 <__reset+0xfb0ec378>
8110c514:	014000c4 	movi	r5,3
8110c518:	003f9706 	br	8110c378 <__reset+0xfb0ec378>
8110c51c:	9009883a 	mov	r4,r18
8110c520:	d9400015 	stw	r5,0(sp)
8110c524:	110d7200 	call	8110d720 <__clzsi2>
8110c528:	10fffec4 	addi	r3,r2,-5
8110c52c:	11801d84 	addi	r6,r2,118
8110c530:	90e4983a 	sll	r18,r18,r3
8110c534:	01a9c83a 	sub	r20,zero,r6
8110c538:	0021883a 	mov	r16,zero
8110c53c:	002f883a 	mov	r23,zero
8110c540:	d9400017 	ldw	r5,0(sp)
8110c544:	003f7e06 	br	8110c340 <__reset+0xfb0ec340>
8110c548:	04000304 	movi	r16,12
8110c54c:	05c000c4 	movi	r23,3
8110c550:	003f7b06 	br	8110c340 <__reset+0xfb0ec340>
8110c554:	01802034 	movhi	r6,128
8110c558:	000f883a 	mov	r7,zero
8110c55c:	31bfffc4 	addi	r6,r6,-1
8110c560:	013fffc4 	movi	r4,-1
8110c564:	003fac06 	br	8110c418 <__reset+0xfb0ec418>
8110c568:	01400044 	movi	r5,1
8110c56c:	2909c83a 	sub	r4,r5,r4
8110c570:	00c006c4 	movi	r3,27
8110c574:	19004b0e 	bge	r3,r4,8110c6a4 <__divsf3+0x3d4>
8110c578:	114e703a 	and	r7,r2,r5
8110c57c:	0009883a 	mov	r4,zero
8110c580:	000d883a 	mov	r6,zero
8110c584:	003fa406 	br	8110c418 <__reset+0xfb0ec418>
8110c588:	9006917a 	slli	r3,r18,5
8110c58c:	8822917a 	slli	r17,r17,5
8110c590:	1c40372e 	bgeu	r3,r17,8110c670 <__divsf3+0x3a0>
8110c594:	31bfffc4 	addi	r6,r6,-1
8110c598:	010006c4 	movi	r4,27
8110c59c:	000b883a 	mov	r5,zero
8110c5a0:	180f883a 	mov	r7,r3
8110c5a4:	294b883a 	add	r5,r5,r5
8110c5a8:	18c7883a 	add	r3,r3,r3
8110c5ac:	38000116 	blt	r7,zero,8110c5b4 <__divsf3+0x2e4>
8110c5b0:	1c400236 	bltu	r3,r17,8110c5bc <__divsf3+0x2ec>
8110c5b4:	1c47c83a 	sub	r3,r3,r17
8110c5b8:	29400054 	ori	r5,r5,1
8110c5bc:	213fffc4 	addi	r4,r4,-1
8110c5c0:	203ff71e 	bne	r4,zero,8110c5a0 <__reset+0xfb0ec5a0>
8110c5c4:	1806c03a 	cmpne	r3,r3,zero
8110c5c8:	1962b03a 	or	r17,r3,r5
8110c5cc:	31001fc4 	addi	r4,r6,127
8110c5d0:	013fe50e 	bge	zero,r4,8110c568 <__reset+0xfb0ec568>
8110c5d4:	88c001cc 	andi	r3,r17,7
8110c5d8:	18000426 	beq	r3,zero,8110c5ec <__divsf3+0x31c>
8110c5dc:	88c003cc 	andi	r3,r17,15
8110c5e0:	01400104 	movi	r5,4
8110c5e4:	19400126 	beq	r3,r5,8110c5ec <__divsf3+0x31c>
8110c5e8:	8963883a 	add	r17,r17,r5
8110c5ec:	88c2002c 	andhi	r3,r17,2048
8110c5f0:	18000426 	beq	r3,zero,8110c604 <__divsf3+0x334>
8110c5f4:	00fe0034 	movhi	r3,63488
8110c5f8:	18ffffc4 	addi	r3,r3,-1
8110c5fc:	31002004 	addi	r4,r6,128
8110c600:	88e2703a 	and	r17,r17,r3
8110c604:	00c03f84 	movi	r3,254
8110c608:	193f8016 	blt	r3,r4,8110c40c <__reset+0xfb0ec40c>
8110c60c:	880c91ba 	slli	r6,r17,6
8110c610:	11c0004c 	andi	r7,r2,1
8110c614:	300cd27a 	srli	r6,r6,9
8110c618:	003f7f06 	br	8110c418 <__reset+0xfb0ec418>
8110c61c:	9080102c 	andhi	r2,r18,64
8110c620:	10000226 	beq	r2,zero,8110c62c <__divsf3+0x35c>
8110c624:	8880102c 	andhi	r2,r17,64
8110c628:	10001826 	beq	r2,zero,8110c68c <__divsf3+0x3bc>
8110c62c:	00802034 	movhi	r2,128
8110c630:	91801034 	orhi	r6,r18,64
8110c634:	10bfffc4 	addi	r2,r2,-1
8110c638:	980f883a 	mov	r7,r19
8110c63c:	308c703a 	and	r6,r6,r2
8110c640:	003fc706 	br	8110c560 <__reset+0xfb0ec560>
8110c644:	008000c4 	movi	r2,3
8110c648:	b8802d26 	beq	r23,r2,8110c700 <__divsf3+0x430>
8110c64c:	00c00044 	movi	r3,1
8110c650:	b005883a 	mov	r2,r22
8110c654:	b8ffdd1e 	bne	r23,r3,8110c5cc <__reset+0xfb0ec5cc>
8110c658:	11c0004c 	andi	r7,r2,1
8110c65c:	0009883a 	mov	r4,zero
8110c660:	000d883a 	mov	r6,zero
8110c664:	003f6c06 	br	8110c418 <__reset+0xfb0ec418>
8110c668:	9023883a 	mov	r17,r18
8110c66c:	003f6406 	br	8110c400 <__reset+0xfb0ec400>
8110c670:	1c47c83a 	sub	r3,r3,r17
8110c674:	01000684 	movi	r4,26
8110c678:	01400044 	movi	r5,1
8110c67c:	003fc806 	br	8110c5a0 <__reset+0xfb0ec5a0>
8110c680:	9080102c 	andhi	r2,r18,64
8110c684:	103fe926 	beq	r2,zero,8110c62c <__reset+0xfb0ec62c>
8110c688:	0023883a 	mov	r17,zero
8110c68c:	00802034 	movhi	r2,128
8110c690:	89801034 	orhi	r6,r17,64
8110c694:	10bfffc4 	addi	r2,r2,-1
8110c698:	a80f883a 	mov	r7,r21
8110c69c:	308c703a 	and	r6,r6,r2
8110c6a0:	003faf06 	br	8110c560 <__reset+0xfb0ec560>
8110c6a4:	01c00804 	movi	r7,32
8110c6a8:	390fc83a 	sub	r7,r7,r4
8110c6ac:	89ce983a 	sll	r7,r17,r7
8110c6b0:	890ad83a 	srl	r5,r17,r4
8110c6b4:	380ec03a 	cmpne	r7,r7,zero
8110c6b8:	29cab03a 	or	r5,r5,r7
8110c6bc:	28c001cc 	andi	r3,r5,7
8110c6c0:	18000426 	beq	r3,zero,8110c6d4 <__divsf3+0x404>
8110c6c4:	28c003cc 	andi	r3,r5,15
8110c6c8:	01000104 	movi	r4,4
8110c6cc:	19000126 	beq	r3,r4,8110c6d4 <__divsf3+0x404>
8110c6d0:	290b883a 	add	r5,r5,r4
8110c6d4:	28c1002c 	andhi	r3,r5,1024
8110c6d8:	18000426 	beq	r3,zero,8110c6ec <__divsf3+0x41c>
8110c6dc:	11c0004c 	andi	r7,r2,1
8110c6e0:	01000044 	movi	r4,1
8110c6e4:	000d883a 	mov	r6,zero
8110c6e8:	003f4b06 	br	8110c418 <__reset+0xfb0ec418>
8110c6ec:	280a91ba 	slli	r5,r5,6
8110c6f0:	11c0004c 	andi	r7,r2,1
8110c6f4:	0009883a 	mov	r4,zero
8110c6f8:	280cd27a 	srli	r6,r5,9
8110c6fc:	003f4606 	br	8110c418 <__reset+0xfb0ec418>
8110c700:	00802034 	movhi	r2,128
8110c704:	89801034 	orhi	r6,r17,64
8110c708:	10bfffc4 	addi	r2,r2,-1
8110c70c:	b00f883a 	mov	r7,r22
8110c710:	308c703a 	and	r6,r6,r2
8110c714:	003f9206 	br	8110c560 <__reset+0xfb0ec560>

8110c718 <__mulsf3>:
8110c718:	defff504 	addi	sp,sp,-44
8110c71c:	de00012e 	bgeu	sp,et,8110c724 <__mulsf3+0xc>
8110c720:	003b68fa 	trap	3
8110c724:	dc000115 	stw	r16,4(sp)
8110c728:	2020d5fa 	srli	r16,r4,23
8110c72c:	dd400615 	stw	r21,24(sp)
8110c730:	202ad7fa 	srli	r21,r4,31
8110c734:	dc800315 	stw	r18,12(sp)
8110c738:	04802034 	movhi	r18,128
8110c73c:	df000915 	stw	fp,36(sp)
8110c740:	dd000515 	stw	r20,20(sp)
8110c744:	94bfffc4 	addi	r18,r18,-1
8110c748:	dfc00a15 	stw	ra,40(sp)
8110c74c:	ddc00815 	stw	r23,32(sp)
8110c750:	dd800715 	stw	r22,28(sp)
8110c754:	dcc00415 	stw	r19,16(sp)
8110c758:	dc400215 	stw	r17,8(sp)
8110c75c:	84003fcc 	andi	r16,r16,255
8110c760:	9124703a 	and	r18,r18,r4
8110c764:	a829883a 	mov	r20,r21
8110c768:	af003fcc 	andi	fp,r21,255
8110c76c:	80005426 	beq	r16,zero,8110c8c0 <__mulsf3+0x1a8>
8110c770:	00803fc4 	movi	r2,255
8110c774:	80802f26 	beq	r16,r2,8110c834 <__mulsf3+0x11c>
8110c778:	91002034 	orhi	r4,r18,128
8110c77c:	202490fa 	slli	r18,r4,3
8110c780:	843fe044 	addi	r16,r16,-127
8110c784:	0023883a 	mov	r17,zero
8110c788:	002f883a 	mov	r23,zero
8110c78c:	2804d5fa 	srli	r2,r5,23
8110c790:	282cd7fa 	srli	r22,r5,31
8110c794:	01002034 	movhi	r4,128
8110c798:	213fffc4 	addi	r4,r4,-1
8110c79c:	10803fcc 	andi	r2,r2,255
8110c7a0:	2166703a 	and	r19,r4,r5
8110c7a4:	b1803fcc 	andi	r6,r22,255
8110c7a8:	10004c26 	beq	r2,zero,8110c8dc <__mulsf3+0x1c4>
8110c7ac:	00c03fc4 	movi	r3,255
8110c7b0:	10c04726 	beq	r2,r3,8110c8d0 <__mulsf3+0x1b8>
8110c7b4:	99002034 	orhi	r4,r19,128
8110c7b8:	202690fa 	slli	r19,r4,3
8110c7bc:	10bfe044 	addi	r2,r2,-127
8110c7c0:	0007883a 	mov	r3,zero
8110c7c4:	80a1883a 	add	r16,r16,r2
8110c7c8:	010003c4 	movi	r4,15
8110c7cc:	1c44b03a 	or	r2,r3,r17
8110c7d0:	b56af03a 	xor	r21,r22,r21
8110c7d4:	81c00044 	addi	r7,r16,1
8110c7d8:	20806b36 	bltu	r4,r2,8110c988 <__mulsf3+0x270>
8110c7dc:	100490ba 	slli	r2,r2,2
8110c7e0:	01204474 	movhi	r4,33041
8110c7e4:	2131fd04 	addi	r4,r4,-14348
8110c7e8:	1105883a 	add	r2,r2,r4
8110c7ec:	10800017 	ldw	r2,0(r2)
8110c7f0:	1000683a 	jmp	r2
8110c7f4:	8110c988 	cmpgei	r4,r16,17190
8110c7f8:	8110c848 	cmpgei	r4,r16,17185
8110c7fc:	8110c848 	cmpgei	r4,r16,17185
8110c800:	8110c844 	addi	r4,r16,17185
8110c804:	8110c96c 	andhi	r4,r16,17189
8110c808:	8110c96c 	andhi	r4,r16,17189
8110c80c:	8110c958 	cmpnei	r4,r16,17189
8110c810:	8110c844 	addi	r4,r16,17185
8110c814:	8110c96c 	andhi	r4,r16,17189
8110c818:	8110c958 	cmpnei	r4,r16,17189
8110c81c:	8110c96c 	andhi	r4,r16,17189
8110c820:	8110c844 	addi	r4,r16,17185
8110c824:	8110c978 	rdprs	r4,r16,17189
8110c828:	8110c978 	rdprs	r4,r16,17189
8110c82c:	8110c978 	rdprs	r4,r16,17189
8110c830:	8110ca54 	ori	r4,r16,17193
8110c834:	90003b1e 	bne	r18,zero,8110c924 <__mulsf3+0x20c>
8110c838:	04400204 	movi	r17,8
8110c83c:	05c00084 	movi	r23,2
8110c840:	003fd206 	br	8110c78c <__reset+0xfb0ec78c>
8110c844:	302b883a 	mov	r21,r6
8110c848:	00800084 	movi	r2,2
8110c84c:	18802626 	beq	r3,r2,8110c8e8 <__mulsf3+0x1d0>
8110c850:	008000c4 	movi	r2,3
8110c854:	1880ab26 	beq	r3,r2,8110cb04 <__mulsf3+0x3ec>
8110c858:	00800044 	movi	r2,1
8110c85c:	1880a21e 	bne	r3,r2,8110cae8 <__mulsf3+0x3d0>
8110c860:	a829883a 	mov	r20,r21
8110c864:	0007883a 	mov	r3,zero
8110c868:	0009883a 	mov	r4,zero
8110c86c:	18803fcc 	andi	r2,r3,255
8110c870:	100695fa 	slli	r3,r2,23
8110c874:	a0803fcc 	andi	r2,r20,255
8110c878:	100a97fa 	slli	r5,r2,31
8110c87c:	00802034 	movhi	r2,128
8110c880:	10bfffc4 	addi	r2,r2,-1
8110c884:	2084703a 	and	r2,r4,r2
8110c888:	10c4b03a 	or	r2,r2,r3
8110c88c:	1144b03a 	or	r2,r2,r5
8110c890:	dfc00a17 	ldw	ra,40(sp)
8110c894:	df000917 	ldw	fp,36(sp)
8110c898:	ddc00817 	ldw	r23,32(sp)
8110c89c:	dd800717 	ldw	r22,28(sp)
8110c8a0:	dd400617 	ldw	r21,24(sp)
8110c8a4:	dd000517 	ldw	r20,20(sp)
8110c8a8:	dcc00417 	ldw	r19,16(sp)
8110c8ac:	dc800317 	ldw	r18,12(sp)
8110c8b0:	dc400217 	ldw	r17,8(sp)
8110c8b4:	dc000117 	ldw	r16,4(sp)
8110c8b8:	dec00b04 	addi	sp,sp,44
8110c8bc:	f800283a 	ret
8110c8c0:	90000d1e 	bne	r18,zero,8110c8f8 <__mulsf3+0x1e0>
8110c8c4:	04400104 	movi	r17,4
8110c8c8:	05c00044 	movi	r23,1
8110c8cc:	003faf06 	br	8110c78c <__reset+0xfb0ec78c>
8110c8d0:	9806c03a 	cmpne	r3,r19,zero
8110c8d4:	18c00084 	addi	r3,r3,2
8110c8d8:	003fba06 	br	8110c7c4 <__reset+0xfb0ec7c4>
8110c8dc:	9800141e 	bne	r19,zero,8110c930 <__mulsf3+0x218>
8110c8e0:	00c00044 	movi	r3,1
8110c8e4:	003fb706 	br	8110c7c4 <__reset+0xfb0ec7c4>
8110c8e8:	a829883a 	mov	r20,r21
8110c8ec:	00ffffc4 	movi	r3,-1
8110c8f0:	0009883a 	mov	r4,zero
8110c8f4:	003fdd06 	br	8110c86c <__reset+0xfb0ec86c>
8110c8f8:	9009883a 	mov	r4,r18
8110c8fc:	d9400015 	stw	r5,0(sp)
8110c900:	110d7200 	call	8110d720 <__clzsi2>
8110c904:	10fffec4 	addi	r3,r2,-5
8110c908:	10801d84 	addi	r2,r2,118
8110c90c:	90e4983a 	sll	r18,r18,r3
8110c910:	00a1c83a 	sub	r16,zero,r2
8110c914:	0023883a 	mov	r17,zero
8110c918:	002f883a 	mov	r23,zero
8110c91c:	d9400017 	ldw	r5,0(sp)
8110c920:	003f9a06 	br	8110c78c <__reset+0xfb0ec78c>
8110c924:	04400304 	movi	r17,12
8110c928:	05c000c4 	movi	r23,3
8110c92c:	003f9706 	br	8110c78c <__reset+0xfb0ec78c>
8110c930:	9809883a 	mov	r4,r19
8110c934:	d9800015 	stw	r6,0(sp)
8110c938:	110d7200 	call	8110d720 <__clzsi2>
8110c93c:	10fffec4 	addi	r3,r2,-5
8110c940:	10801d84 	addi	r2,r2,118
8110c944:	98e6983a 	sll	r19,r19,r3
8110c948:	0085c83a 	sub	r2,zero,r2
8110c94c:	0007883a 	mov	r3,zero
8110c950:	d9800017 	ldw	r6,0(sp)
8110c954:	003f9b06 	br	8110c7c4 <__reset+0xfb0ec7c4>
8110c958:	01002034 	movhi	r4,128
8110c95c:	0029883a 	mov	r20,zero
8110c960:	213fffc4 	addi	r4,r4,-1
8110c964:	00ffffc4 	movi	r3,-1
8110c968:	003fc006 	br	8110c86c <__reset+0xfb0ec86c>
8110c96c:	9027883a 	mov	r19,r18
8110c970:	b807883a 	mov	r3,r23
8110c974:	003fb406 	br	8110c848 <__reset+0xfb0ec848>
8110c978:	9027883a 	mov	r19,r18
8110c97c:	e02b883a 	mov	r21,fp
8110c980:	b807883a 	mov	r3,r23
8110c984:	003fb006 	br	8110c848 <__reset+0xfb0ec848>
8110c988:	9004d43a 	srli	r2,r18,16
8110c98c:	9810d43a 	srli	r8,r19,16
8110c990:	94bfffcc 	andi	r18,r18,65535
8110c994:	993fffcc 	andi	r4,r19,65535
8110c998:	910d383a 	mul	r6,r18,r4
8110c99c:	20a7383a 	mul	r19,r4,r2
8110c9a0:	9225383a 	mul	r18,r18,r8
8110c9a4:	3006d43a 	srli	r3,r6,16
8110c9a8:	1211383a 	mul	r8,r2,r8
8110c9ac:	94e5883a 	add	r18,r18,r19
8110c9b0:	1c87883a 	add	r3,r3,r18
8110c9b4:	1cc0022e 	bgeu	r3,r19,8110c9c0 <__mulsf3+0x2a8>
8110c9b8:	00800074 	movhi	r2,1
8110c9bc:	4091883a 	add	r8,r8,r2
8110c9c0:	1804943a 	slli	r2,r3,16
8110c9c4:	31bfffcc 	andi	r6,r6,65535
8110c9c8:	1806d43a 	srli	r3,r3,16
8110c9cc:	1185883a 	add	r2,r2,r6
8110c9d0:	102691ba 	slli	r19,r2,6
8110c9d4:	1a07883a 	add	r3,r3,r8
8110c9d8:	1004d6ba 	srli	r2,r2,26
8110c9dc:	180891ba 	slli	r4,r3,6
8110c9e0:	9826c03a 	cmpne	r19,r19,zero
8110c9e4:	9884b03a 	or	r2,r19,r2
8110c9e8:	1126b03a 	or	r19,r2,r4
8110c9ec:	9882002c 	andhi	r2,r19,2048
8110c9f0:	10000426 	beq	r2,zero,8110ca04 <__mulsf3+0x2ec>
8110c9f4:	9804d07a 	srli	r2,r19,1
8110c9f8:	9900004c 	andi	r4,r19,1
8110c9fc:	3821883a 	mov	r16,r7
8110ca00:	1126b03a 	or	r19,r2,r4
8110ca04:	80c01fc4 	addi	r3,r16,127
8110ca08:	00c0210e 	bge	zero,r3,8110ca90 <__mulsf3+0x378>
8110ca0c:	988001cc 	andi	r2,r19,7
8110ca10:	10000426 	beq	r2,zero,8110ca24 <__mulsf3+0x30c>
8110ca14:	988003cc 	andi	r2,r19,15
8110ca18:	01000104 	movi	r4,4
8110ca1c:	11000126 	beq	r2,r4,8110ca24 <__mulsf3+0x30c>
8110ca20:	9927883a 	add	r19,r19,r4
8110ca24:	9882002c 	andhi	r2,r19,2048
8110ca28:	10000426 	beq	r2,zero,8110ca3c <__mulsf3+0x324>
8110ca2c:	00be0034 	movhi	r2,63488
8110ca30:	10bfffc4 	addi	r2,r2,-1
8110ca34:	80c02004 	addi	r3,r16,128
8110ca38:	98a6703a 	and	r19,r19,r2
8110ca3c:	00803f84 	movi	r2,254
8110ca40:	10ffa916 	blt	r2,r3,8110c8e8 <__reset+0xfb0ec8e8>
8110ca44:	980891ba 	slli	r4,r19,6
8110ca48:	a829883a 	mov	r20,r21
8110ca4c:	2008d27a 	srli	r4,r4,9
8110ca50:	003f8606 	br	8110c86c <__reset+0xfb0ec86c>
8110ca54:	9080102c 	andhi	r2,r18,64
8110ca58:	10000826 	beq	r2,zero,8110ca7c <__mulsf3+0x364>
8110ca5c:	9880102c 	andhi	r2,r19,64
8110ca60:	1000061e 	bne	r2,zero,8110ca7c <__mulsf3+0x364>
8110ca64:	00802034 	movhi	r2,128
8110ca68:	99001034 	orhi	r4,r19,64
8110ca6c:	10bfffc4 	addi	r2,r2,-1
8110ca70:	b029883a 	mov	r20,r22
8110ca74:	2088703a 	and	r4,r4,r2
8110ca78:	003fba06 	br	8110c964 <__reset+0xfb0ec964>
8110ca7c:	00802034 	movhi	r2,128
8110ca80:	91001034 	orhi	r4,r18,64
8110ca84:	10bfffc4 	addi	r2,r2,-1
8110ca88:	2088703a 	and	r4,r4,r2
8110ca8c:	003fb506 	br	8110c964 <__reset+0xfb0ec964>
8110ca90:	00800044 	movi	r2,1
8110ca94:	10c7c83a 	sub	r3,r2,r3
8110ca98:	008006c4 	movi	r2,27
8110ca9c:	10ff7016 	blt	r2,r3,8110c860 <__reset+0xfb0ec860>
8110caa0:	00800804 	movi	r2,32
8110caa4:	10c5c83a 	sub	r2,r2,r3
8110caa8:	9884983a 	sll	r2,r19,r2
8110caac:	98c6d83a 	srl	r3,r19,r3
8110cab0:	1004c03a 	cmpne	r2,r2,zero
8110cab4:	1884b03a 	or	r2,r3,r2
8110cab8:	10c001cc 	andi	r3,r2,7
8110cabc:	18000426 	beq	r3,zero,8110cad0 <__mulsf3+0x3b8>
8110cac0:	10c003cc 	andi	r3,r2,15
8110cac4:	01000104 	movi	r4,4
8110cac8:	19000126 	beq	r3,r4,8110cad0 <__mulsf3+0x3b8>
8110cacc:	1105883a 	add	r2,r2,r4
8110cad0:	10c1002c 	andhi	r3,r2,1024
8110cad4:	18000626 	beq	r3,zero,8110caf0 <__mulsf3+0x3d8>
8110cad8:	a829883a 	mov	r20,r21
8110cadc:	00c00044 	movi	r3,1
8110cae0:	0009883a 	mov	r4,zero
8110cae4:	003f6106 	br	8110c86c <__reset+0xfb0ec86c>
8110cae8:	3821883a 	mov	r16,r7
8110caec:	003fc506 	br	8110ca04 <__reset+0xfb0eca04>
8110caf0:	100491ba 	slli	r2,r2,6
8110caf4:	a829883a 	mov	r20,r21
8110caf8:	0007883a 	mov	r3,zero
8110cafc:	1008d27a 	srli	r4,r2,9
8110cb00:	003f5a06 	br	8110c86c <__reset+0xfb0ec86c>
8110cb04:	00802034 	movhi	r2,128
8110cb08:	99001034 	orhi	r4,r19,64
8110cb0c:	10bfffc4 	addi	r2,r2,-1
8110cb10:	a829883a 	mov	r20,r21
8110cb14:	2088703a 	and	r4,r4,r2
8110cb18:	003f9206 	br	8110c964 <__reset+0xfb0ec964>

8110cb1c <__floatsisf>:
8110cb1c:	defffd04 	addi	sp,sp,-12
8110cb20:	de00012e 	bgeu	sp,et,8110cb28 <__floatsisf+0xc>
8110cb24:	003b68fa 	trap	3
8110cb28:	dfc00215 	stw	ra,8(sp)
8110cb2c:	dc400115 	stw	r17,4(sp)
8110cb30:	dc000015 	stw	r16,0(sp)
8110cb34:	20003526 	beq	r4,zero,8110cc0c <__floatsisf+0xf0>
8110cb38:	2021883a 	mov	r16,r4
8110cb3c:	2022d7fa 	srli	r17,r4,31
8110cb40:	20003616 	blt	r4,zero,8110cc1c <__floatsisf+0x100>
8110cb44:	8009883a 	mov	r4,r16
8110cb48:	110d7200 	call	8110d720 <__clzsi2>
8110cb4c:	00c02784 	movi	r3,158
8110cb50:	1887c83a 	sub	r3,r3,r2
8110cb54:	01002584 	movi	r4,150
8110cb58:	20c01416 	blt	r4,r3,8110cbac <__floatsisf+0x90>
8110cb5c:	20c9c83a 	sub	r4,r4,r3
8110cb60:	8120983a 	sll	r16,r16,r4
8110cb64:	00802034 	movhi	r2,128
8110cb68:	10bfffc4 	addi	r2,r2,-1
8110cb6c:	8809883a 	mov	r4,r17
8110cb70:	80a0703a 	and	r16,r16,r2
8110cb74:	18803fcc 	andi	r2,r3,255
8110cb78:	100695fa 	slli	r3,r2,23
8110cb7c:	20803fcc 	andi	r2,r4,255
8110cb80:	100897fa 	slli	r4,r2,31
8110cb84:	00802034 	movhi	r2,128
8110cb88:	10bfffc4 	addi	r2,r2,-1
8110cb8c:	8084703a 	and	r2,r16,r2
8110cb90:	10c4b03a 	or	r2,r2,r3
8110cb94:	1104b03a 	or	r2,r2,r4
8110cb98:	dfc00217 	ldw	ra,8(sp)
8110cb9c:	dc400117 	ldw	r17,4(sp)
8110cba0:	dc000017 	ldw	r16,0(sp)
8110cba4:	dec00304 	addi	sp,sp,12
8110cba8:	f800283a 	ret
8110cbac:	01002644 	movi	r4,153
8110cbb0:	20c01c16 	blt	r4,r3,8110cc24 <__floatsisf+0x108>
8110cbb4:	20c9c83a 	sub	r4,r4,r3
8110cbb8:	8120983a 	sll	r16,r16,r4
8110cbbc:	013f0034 	movhi	r4,64512
8110cbc0:	213fffc4 	addi	r4,r4,-1
8110cbc4:	814001cc 	andi	r5,r16,7
8110cbc8:	8108703a 	and	r4,r16,r4
8110cbcc:	28000426 	beq	r5,zero,8110cbe0 <__floatsisf+0xc4>
8110cbd0:	840003cc 	andi	r16,r16,15
8110cbd4:	01400104 	movi	r5,4
8110cbd8:	81400126 	beq	r16,r5,8110cbe0 <__floatsisf+0xc4>
8110cbdc:	2149883a 	add	r4,r4,r5
8110cbe0:	2141002c 	andhi	r5,r4,1024
8110cbe4:	28000526 	beq	r5,zero,8110cbfc <__floatsisf+0xe0>
8110cbe8:	00c027c4 	movi	r3,159
8110cbec:	1887c83a 	sub	r3,r3,r2
8110cbf0:	00bf0034 	movhi	r2,64512
8110cbf4:	10bfffc4 	addi	r2,r2,-1
8110cbf8:	2088703a 	and	r4,r4,r2
8110cbfc:	202091ba 	slli	r16,r4,6
8110cc00:	8809883a 	mov	r4,r17
8110cc04:	8020d27a 	srli	r16,r16,9
8110cc08:	003fda06 	br	8110cb74 <__reset+0xfb0ecb74>
8110cc0c:	0009883a 	mov	r4,zero
8110cc10:	0007883a 	mov	r3,zero
8110cc14:	0021883a 	mov	r16,zero
8110cc18:	003fd606 	br	8110cb74 <__reset+0xfb0ecb74>
8110cc1c:	0121c83a 	sub	r16,zero,r4
8110cc20:	003fc806 	br	8110cb44 <__reset+0xfb0ecb44>
8110cc24:	01002e44 	movi	r4,185
8110cc28:	20c9c83a 	sub	r4,r4,r3
8110cc2c:	01400144 	movi	r5,5
8110cc30:	8108983a 	sll	r4,r16,r4
8110cc34:	288bc83a 	sub	r5,r5,r2
8110cc38:	8160d83a 	srl	r16,r16,r5
8110cc3c:	2008c03a 	cmpne	r4,r4,zero
8110cc40:	8120b03a 	or	r16,r16,r4
8110cc44:	003fdd06 	br	8110cbbc <__reset+0xfb0ecbbc>

8110cc48 <__floatunsisf>:
8110cc48:	defffe04 	addi	sp,sp,-8
8110cc4c:	de00012e 	bgeu	sp,et,8110cc54 <__floatunsisf+0xc>
8110cc50:	003b68fa 	trap	3
8110cc54:	dfc00115 	stw	ra,4(sp)
8110cc58:	dc000015 	stw	r16,0(sp)
8110cc5c:	20002c26 	beq	r4,zero,8110cd10 <__floatunsisf+0xc8>
8110cc60:	2021883a 	mov	r16,r4
8110cc64:	110d7200 	call	8110d720 <__clzsi2>
8110cc68:	00c02784 	movi	r3,158
8110cc6c:	1887c83a 	sub	r3,r3,r2
8110cc70:	01002584 	movi	r4,150
8110cc74:	20c00f16 	blt	r4,r3,8110ccb4 <__floatunsisf+0x6c>
8110cc78:	20c9c83a 	sub	r4,r4,r3
8110cc7c:	8108983a 	sll	r4,r16,r4
8110cc80:	00802034 	movhi	r2,128
8110cc84:	10bfffc4 	addi	r2,r2,-1
8110cc88:	2088703a 	and	r4,r4,r2
8110cc8c:	18803fcc 	andi	r2,r3,255
8110cc90:	100695fa 	slli	r3,r2,23
8110cc94:	00802034 	movhi	r2,128
8110cc98:	10bfffc4 	addi	r2,r2,-1
8110cc9c:	2084703a 	and	r2,r4,r2
8110cca0:	10c4b03a 	or	r2,r2,r3
8110cca4:	dfc00117 	ldw	ra,4(sp)
8110cca8:	dc000017 	ldw	r16,0(sp)
8110ccac:	dec00204 	addi	sp,sp,8
8110ccb0:	f800283a 	ret
8110ccb4:	01002644 	movi	r4,153
8110ccb8:	20c01816 	blt	r4,r3,8110cd1c <__floatunsisf+0xd4>
8110ccbc:	20c9c83a 	sub	r4,r4,r3
8110ccc0:	8108983a 	sll	r4,r16,r4
8110ccc4:	017f0034 	movhi	r5,64512
8110ccc8:	297fffc4 	addi	r5,r5,-1
8110cccc:	218001cc 	andi	r6,r4,7
8110ccd0:	214a703a 	and	r5,r4,r5
8110ccd4:	30000426 	beq	r6,zero,8110cce8 <__floatunsisf+0xa0>
8110ccd8:	210003cc 	andi	r4,r4,15
8110ccdc:	01800104 	movi	r6,4
8110cce0:	21800126 	beq	r4,r6,8110cce8 <__floatunsisf+0xa0>
8110cce4:	298b883a 	add	r5,r5,r6
8110cce8:	2901002c 	andhi	r4,r5,1024
8110ccec:	20000526 	beq	r4,zero,8110cd04 <__floatunsisf+0xbc>
8110ccf0:	00c027c4 	movi	r3,159
8110ccf4:	1887c83a 	sub	r3,r3,r2
8110ccf8:	00bf0034 	movhi	r2,64512
8110ccfc:	10bfffc4 	addi	r2,r2,-1
8110cd00:	288a703a 	and	r5,r5,r2
8110cd04:	280891ba 	slli	r4,r5,6
8110cd08:	2008d27a 	srli	r4,r4,9
8110cd0c:	003fdf06 	br	8110cc8c <__reset+0xfb0ecc8c>
8110cd10:	0007883a 	mov	r3,zero
8110cd14:	0009883a 	mov	r4,zero
8110cd18:	003fdc06 	br	8110cc8c <__reset+0xfb0ecc8c>
8110cd1c:	01402e44 	movi	r5,185
8110cd20:	28cbc83a 	sub	r5,r5,r3
8110cd24:	01000144 	movi	r4,5
8110cd28:	2089c83a 	sub	r4,r4,r2
8110cd2c:	814a983a 	sll	r5,r16,r5
8110cd30:	8108d83a 	srl	r4,r16,r4
8110cd34:	2820c03a 	cmpne	r16,r5,zero
8110cd38:	2408b03a 	or	r4,r4,r16
8110cd3c:	003fe106 	br	8110ccc4 <__reset+0xfb0eccc4>

8110cd40 <__muldf3>:
8110cd40:	defff304 	addi	sp,sp,-52
8110cd44:	2804d53a 	srli	r2,r5,20
8110cd48:	de00012e 	bgeu	sp,et,8110cd50 <__muldf3+0x10>
8110cd4c:	003b68fa 	trap	3
8110cd50:	dd800915 	stw	r22,36(sp)
8110cd54:	282cd7fa 	srli	r22,r5,31
8110cd58:	dc000315 	stw	r16,12(sp)
8110cd5c:	04000434 	movhi	r16,16
8110cd60:	dd400815 	stw	r21,32(sp)
8110cd64:	dc800515 	stw	r18,20(sp)
8110cd68:	843fffc4 	addi	r16,r16,-1
8110cd6c:	dfc00c15 	stw	ra,48(sp)
8110cd70:	df000b15 	stw	fp,44(sp)
8110cd74:	ddc00a15 	stw	r23,40(sp)
8110cd78:	dd000715 	stw	r20,28(sp)
8110cd7c:	dcc00615 	stw	r19,24(sp)
8110cd80:	dc400415 	stw	r17,16(sp)
8110cd84:	1481ffcc 	andi	r18,r2,2047
8110cd88:	2c20703a 	and	r16,r5,r16
8110cd8c:	b02b883a 	mov	r21,r22
8110cd90:	b2403fcc 	andi	r9,r22,255
8110cd94:	90006026 	beq	r18,zero,8110cf18 <__muldf3+0x1d8>
8110cd98:	0081ffc4 	movi	r2,2047
8110cd9c:	2029883a 	mov	r20,r4
8110cda0:	90803626 	beq	r18,r2,8110ce7c <__muldf3+0x13c>
8110cda4:	80800434 	orhi	r2,r16,16
8110cda8:	100490fa 	slli	r2,r2,3
8110cdac:	2020d77a 	srli	r16,r4,29
8110cdb0:	202890fa 	slli	r20,r4,3
8110cdb4:	94bf0044 	addi	r18,r18,-1023
8110cdb8:	80a0b03a 	or	r16,r16,r2
8110cdbc:	0027883a 	mov	r19,zero
8110cdc0:	0039883a 	mov	fp,zero
8110cdc4:	3804d53a 	srli	r2,r7,20
8110cdc8:	382ed7fa 	srli	r23,r7,31
8110cdcc:	04400434 	movhi	r17,16
8110cdd0:	8c7fffc4 	addi	r17,r17,-1
8110cdd4:	1081ffcc 	andi	r2,r2,2047
8110cdd8:	3011883a 	mov	r8,r6
8110cddc:	3c62703a 	and	r17,r7,r17
8110cde0:	ba803fcc 	andi	r10,r23,255
8110cde4:	10006d26 	beq	r2,zero,8110cf9c <__muldf3+0x25c>
8110cde8:	00c1ffc4 	movi	r3,2047
8110cdec:	10c06526 	beq	r2,r3,8110cf84 <__muldf3+0x244>
8110cdf0:	88c00434 	orhi	r3,r17,16
8110cdf4:	180690fa 	slli	r3,r3,3
8110cdf8:	3022d77a 	srli	r17,r6,29
8110cdfc:	301090fa 	slli	r8,r6,3
8110ce00:	10bf0044 	addi	r2,r2,-1023
8110ce04:	88e2b03a 	or	r17,r17,r3
8110ce08:	000b883a 	mov	r5,zero
8110ce0c:	9085883a 	add	r2,r18,r2
8110ce10:	2cc8b03a 	or	r4,r5,r19
8110ce14:	00c003c4 	movi	r3,15
8110ce18:	bdacf03a 	xor	r22,r23,r22
8110ce1c:	12c00044 	addi	r11,r2,1
8110ce20:	19009936 	bltu	r3,r4,8110d088 <__muldf3+0x348>
8110ce24:	200890ba 	slli	r4,r4,2
8110ce28:	00e04474 	movhi	r3,33041
8110ce2c:	18f38f04 	addi	r3,r3,-12740
8110ce30:	20c9883a 	add	r4,r4,r3
8110ce34:	20c00017 	ldw	r3,0(r4)
8110ce38:	1800683a 	jmp	r3
8110ce3c:	8110d088 	cmpgei	r4,r16,17218
8110ce40:	8110ce9c 	xori	r4,r16,17210
8110ce44:	8110ce9c 	xori	r4,r16,17210
8110ce48:	8110ce98 	cmpnei	r4,r16,17210
8110ce4c:	8110d064 	muli	r4,r16,17217
8110ce50:	8110d064 	muli	r4,r16,17217
8110ce54:	8110d04c 	andi	r4,r16,17217
8110ce58:	8110ce98 	cmpnei	r4,r16,17210
8110ce5c:	8110d064 	muli	r4,r16,17217
8110ce60:	8110d04c 	andi	r4,r16,17217
8110ce64:	8110d064 	muli	r4,r16,17217
8110ce68:	8110ce98 	cmpnei	r4,r16,17210
8110ce6c:	8110d074 	orhi	r4,r16,17217
8110ce70:	8110d074 	orhi	r4,r16,17217
8110ce74:	8110d074 	orhi	r4,r16,17217
8110ce78:	8110d290 	cmplti	r4,r16,17226
8110ce7c:	2404b03a 	or	r2,r4,r16
8110ce80:	10006f1e 	bne	r2,zero,8110d040 <__muldf3+0x300>
8110ce84:	04c00204 	movi	r19,8
8110ce88:	0021883a 	mov	r16,zero
8110ce8c:	0029883a 	mov	r20,zero
8110ce90:	07000084 	movi	fp,2
8110ce94:	003fcb06 	br	8110cdc4 <__reset+0xfb0ecdc4>
8110ce98:	502d883a 	mov	r22,r10
8110ce9c:	00800084 	movi	r2,2
8110cea0:	28805726 	beq	r5,r2,8110d000 <__muldf3+0x2c0>
8110cea4:	008000c4 	movi	r2,3
8110cea8:	28816626 	beq	r5,r2,8110d444 <__muldf3+0x704>
8110ceac:	00800044 	movi	r2,1
8110ceb0:	2881411e 	bne	r5,r2,8110d3b8 <__muldf3+0x678>
8110ceb4:	b02b883a 	mov	r21,r22
8110ceb8:	0005883a 	mov	r2,zero
8110cebc:	000b883a 	mov	r5,zero
8110cec0:	0029883a 	mov	r20,zero
8110cec4:	1004953a 	slli	r2,r2,20
8110cec8:	a8c03fcc 	andi	r3,r21,255
8110cecc:	04400434 	movhi	r17,16
8110ced0:	8c7fffc4 	addi	r17,r17,-1
8110ced4:	180697fa 	slli	r3,r3,31
8110ced8:	2c4a703a 	and	r5,r5,r17
8110cedc:	288ab03a 	or	r5,r5,r2
8110cee0:	28c6b03a 	or	r3,r5,r3
8110cee4:	a005883a 	mov	r2,r20
8110cee8:	dfc00c17 	ldw	ra,48(sp)
8110ceec:	df000b17 	ldw	fp,44(sp)
8110cef0:	ddc00a17 	ldw	r23,40(sp)
8110cef4:	dd800917 	ldw	r22,36(sp)
8110cef8:	dd400817 	ldw	r21,32(sp)
8110cefc:	dd000717 	ldw	r20,28(sp)
8110cf00:	dcc00617 	ldw	r19,24(sp)
8110cf04:	dc800517 	ldw	r18,20(sp)
8110cf08:	dc400417 	ldw	r17,16(sp)
8110cf0c:	dc000317 	ldw	r16,12(sp)
8110cf10:	dec00d04 	addi	sp,sp,52
8110cf14:	f800283a 	ret
8110cf18:	2404b03a 	or	r2,r4,r16
8110cf1c:	2027883a 	mov	r19,r4
8110cf20:	10004226 	beq	r2,zero,8110d02c <__muldf3+0x2ec>
8110cf24:	8000fc26 	beq	r16,zero,8110d318 <__muldf3+0x5d8>
8110cf28:	8009883a 	mov	r4,r16
8110cf2c:	d9800215 	stw	r6,8(sp)
8110cf30:	d9c00015 	stw	r7,0(sp)
8110cf34:	da400115 	stw	r9,4(sp)
8110cf38:	110d7200 	call	8110d720 <__clzsi2>
8110cf3c:	d9800217 	ldw	r6,8(sp)
8110cf40:	d9c00017 	ldw	r7,0(sp)
8110cf44:	da400117 	ldw	r9,4(sp)
8110cf48:	113ffd44 	addi	r4,r2,-11
8110cf4c:	00c00704 	movi	r3,28
8110cf50:	1900ed16 	blt	r3,r4,8110d308 <__muldf3+0x5c8>
8110cf54:	00c00744 	movi	r3,29
8110cf58:	147ffe04 	addi	r17,r2,-8
8110cf5c:	1907c83a 	sub	r3,r3,r4
8110cf60:	8460983a 	sll	r16,r16,r17
8110cf64:	98c6d83a 	srl	r3,r19,r3
8110cf68:	9c68983a 	sll	r20,r19,r17
8110cf6c:	1c20b03a 	or	r16,r3,r16
8110cf70:	1080fcc4 	addi	r2,r2,1011
8110cf74:	00a5c83a 	sub	r18,zero,r2
8110cf78:	0027883a 	mov	r19,zero
8110cf7c:	0039883a 	mov	fp,zero
8110cf80:	003f9006 	br	8110cdc4 <__reset+0xfb0ecdc4>
8110cf84:	3446b03a 	or	r3,r6,r17
8110cf88:	1800261e 	bne	r3,zero,8110d024 <__muldf3+0x2e4>
8110cf8c:	0023883a 	mov	r17,zero
8110cf90:	0011883a 	mov	r8,zero
8110cf94:	01400084 	movi	r5,2
8110cf98:	003f9c06 	br	8110ce0c <__reset+0xfb0ece0c>
8110cf9c:	3446b03a 	or	r3,r6,r17
8110cfa0:	18001c26 	beq	r3,zero,8110d014 <__muldf3+0x2d4>
8110cfa4:	8800ce26 	beq	r17,zero,8110d2e0 <__muldf3+0x5a0>
8110cfa8:	8809883a 	mov	r4,r17
8110cfac:	d9800215 	stw	r6,8(sp)
8110cfb0:	da400115 	stw	r9,4(sp)
8110cfb4:	da800015 	stw	r10,0(sp)
8110cfb8:	110d7200 	call	8110d720 <__clzsi2>
8110cfbc:	d9800217 	ldw	r6,8(sp)
8110cfc0:	da400117 	ldw	r9,4(sp)
8110cfc4:	da800017 	ldw	r10,0(sp)
8110cfc8:	113ffd44 	addi	r4,r2,-11
8110cfcc:	00c00704 	movi	r3,28
8110cfd0:	1900bf16 	blt	r3,r4,8110d2d0 <__muldf3+0x590>
8110cfd4:	00c00744 	movi	r3,29
8110cfd8:	123ffe04 	addi	r8,r2,-8
8110cfdc:	1907c83a 	sub	r3,r3,r4
8110cfe0:	8a22983a 	sll	r17,r17,r8
8110cfe4:	30c6d83a 	srl	r3,r6,r3
8110cfe8:	3210983a 	sll	r8,r6,r8
8110cfec:	1c62b03a 	or	r17,r3,r17
8110cff0:	1080fcc4 	addi	r2,r2,1011
8110cff4:	0085c83a 	sub	r2,zero,r2
8110cff8:	000b883a 	mov	r5,zero
8110cffc:	003f8306 	br	8110ce0c <__reset+0xfb0ece0c>
8110d000:	b02b883a 	mov	r21,r22
8110d004:	0081ffc4 	movi	r2,2047
8110d008:	000b883a 	mov	r5,zero
8110d00c:	0029883a 	mov	r20,zero
8110d010:	003fac06 	br	8110cec4 <__reset+0xfb0ecec4>
8110d014:	0023883a 	mov	r17,zero
8110d018:	0011883a 	mov	r8,zero
8110d01c:	01400044 	movi	r5,1
8110d020:	003f7a06 	br	8110ce0c <__reset+0xfb0ece0c>
8110d024:	014000c4 	movi	r5,3
8110d028:	003f7806 	br	8110ce0c <__reset+0xfb0ece0c>
8110d02c:	04c00104 	movi	r19,4
8110d030:	0021883a 	mov	r16,zero
8110d034:	0029883a 	mov	r20,zero
8110d038:	07000044 	movi	fp,1
8110d03c:	003f6106 	br	8110cdc4 <__reset+0xfb0ecdc4>
8110d040:	04c00304 	movi	r19,12
8110d044:	070000c4 	movi	fp,3
8110d048:	003f5e06 	br	8110cdc4 <__reset+0xfb0ecdc4>
8110d04c:	01400434 	movhi	r5,16
8110d050:	002b883a 	mov	r21,zero
8110d054:	297fffc4 	addi	r5,r5,-1
8110d058:	053fffc4 	movi	r20,-1
8110d05c:	0081ffc4 	movi	r2,2047
8110d060:	003f9806 	br	8110cec4 <__reset+0xfb0ecec4>
8110d064:	8023883a 	mov	r17,r16
8110d068:	a011883a 	mov	r8,r20
8110d06c:	e00b883a 	mov	r5,fp
8110d070:	003f8a06 	br	8110ce9c <__reset+0xfb0ece9c>
8110d074:	8023883a 	mov	r17,r16
8110d078:	a011883a 	mov	r8,r20
8110d07c:	482d883a 	mov	r22,r9
8110d080:	e00b883a 	mov	r5,fp
8110d084:	003f8506 	br	8110ce9c <__reset+0xfb0ece9c>
8110d088:	a00ad43a 	srli	r5,r20,16
8110d08c:	401ad43a 	srli	r13,r8,16
8110d090:	a53fffcc 	andi	r20,r20,65535
8110d094:	423fffcc 	andi	r8,r8,65535
8110d098:	4519383a 	mul	r12,r8,r20
8110d09c:	4147383a 	mul	r3,r8,r5
8110d0a0:	6d09383a 	mul	r4,r13,r20
8110d0a4:	600cd43a 	srli	r6,r12,16
8110d0a8:	2b5d383a 	mul	r14,r5,r13
8110d0ac:	20c9883a 	add	r4,r4,r3
8110d0b0:	310d883a 	add	r6,r6,r4
8110d0b4:	30c0022e 	bgeu	r6,r3,8110d0c0 <__muldf3+0x380>
8110d0b8:	00c00074 	movhi	r3,1
8110d0bc:	70dd883a 	add	r14,r14,r3
8110d0c0:	8826d43a 	srli	r19,r17,16
8110d0c4:	8bffffcc 	andi	r15,r17,65535
8110d0c8:	7d23383a 	mul	r17,r15,r20
8110d0cc:	7949383a 	mul	r4,r15,r5
8110d0d0:	9d29383a 	mul	r20,r19,r20
8110d0d4:	8814d43a 	srli	r10,r17,16
8110d0d8:	3012943a 	slli	r9,r6,16
8110d0dc:	a129883a 	add	r20,r20,r4
8110d0e0:	633fffcc 	andi	r12,r12,65535
8110d0e4:	5515883a 	add	r10,r10,r20
8110d0e8:	3006d43a 	srli	r3,r6,16
8110d0ec:	4b13883a 	add	r9,r9,r12
8110d0f0:	2ccb383a 	mul	r5,r5,r19
8110d0f4:	5100022e 	bgeu	r10,r4,8110d100 <__muldf3+0x3c0>
8110d0f8:	01000074 	movhi	r4,1
8110d0fc:	290b883a 	add	r5,r5,r4
8110d100:	802ad43a 	srli	r21,r16,16
8110d104:	843fffcc 	andi	r16,r16,65535
8110d108:	440d383a 	mul	r6,r8,r16
8110d10c:	4565383a 	mul	r18,r8,r21
8110d110:	8349383a 	mul	r4,r16,r13
8110d114:	500e943a 	slli	r7,r10,16
8110d118:	3010d43a 	srli	r8,r6,16
8110d11c:	5028d43a 	srli	r20,r10,16
8110d120:	2489883a 	add	r4,r4,r18
8110d124:	8abfffcc 	andi	r10,r17,65535
8110d128:	3a95883a 	add	r10,r7,r10
8110d12c:	4119883a 	add	r12,r8,r4
8110d130:	a169883a 	add	r20,r20,r5
8110d134:	1a87883a 	add	r3,r3,r10
8110d138:	6d5b383a 	mul	r13,r13,r21
8110d13c:	6480022e 	bgeu	r12,r18,8110d148 <__muldf3+0x408>
8110d140:	01000074 	movhi	r4,1
8110d144:	691b883a 	add	r13,r13,r4
8110d148:	7c25383a 	mul	r18,r15,r16
8110d14c:	7d4b383a 	mul	r5,r15,r21
8110d150:	84cf383a 	mul	r7,r16,r19
8110d154:	901ed43a 	srli	r15,r18,16
8110d158:	6008d43a 	srli	r4,r12,16
8110d15c:	6010943a 	slli	r8,r12,16
8110d160:	394f883a 	add	r7,r7,r5
8110d164:	333fffcc 	andi	r12,r6,65535
8110d168:	79df883a 	add	r15,r15,r7
8110d16c:	235b883a 	add	r13,r4,r13
8110d170:	9d63383a 	mul	r17,r19,r21
8110d174:	4309883a 	add	r4,r8,r12
8110d178:	7940022e 	bgeu	r15,r5,8110d184 <__muldf3+0x444>
8110d17c:	01400074 	movhi	r5,1
8110d180:	8963883a 	add	r17,r17,r5
8110d184:	780a943a 	slli	r5,r15,16
8110d188:	91bfffcc 	andi	r6,r18,65535
8110d18c:	70c7883a 	add	r3,r14,r3
8110d190:	298d883a 	add	r6,r5,r6
8110d194:	1a8f803a 	cmpltu	r7,r3,r10
8110d198:	350b883a 	add	r5,r6,r20
8110d19c:	20c7883a 	add	r3,r4,r3
8110d1a0:	3955883a 	add	r10,r7,r5
8110d1a4:	1909803a 	cmpltu	r4,r3,r4
8110d1a8:	6a91883a 	add	r8,r13,r10
8110d1ac:	780cd43a 	srli	r6,r15,16
8110d1b0:	2219883a 	add	r12,r4,r8
8110d1b4:	2d0b803a 	cmpltu	r5,r5,r20
8110d1b8:	51cf803a 	cmpltu	r7,r10,r7
8110d1bc:	29ceb03a 	or	r7,r5,r7
8110d1c0:	4351803a 	cmpltu	r8,r8,r13
8110d1c4:	610b803a 	cmpltu	r5,r12,r4
8110d1c8:	4148b03a 	or	r4,r8,r5
8110d1cc:	398f883a 	add	r7,r7,r6
8110d1d0:	3909883a 	add	r4,r7,r4
8110d1d4:	1810927a 	slli	r8,r3,9
8110d1d8:	2449883a 	add	r4,r4,r17
8110d1dc:	2008927a 	slli	r4,r4,9
8110d1e0:	6022d5fa 	srli	r17,r12,23
8110d1e4:	1806d5fa 	srli	r3,r3,23
8110d1e8:	4252b03a 	or	r9,r8,r9
8110d1ec:	600a927a 	slli	r5,r12,9
8110d1f0:	4810c03a 	cmpne	r8,r9,zero
8110d1f4:	2462b03a 	or	r17,r4,r17
8110d1f8:	40c6b03a 	or	r3,r8,r3
8110d1fc:	8900402c 	andhi	r4,r17,256
8110d200:	1950b03a 	or	r8,r3,r5
8110d204:	20000726 	beq	r4,zero,8110d224 <__muldf3+0x4e4>
8110d208:	4006d07a 	srli	r3,r8,1
8110d20c:	880497fa 	slli	r2,r17,31
8110d210:	4200004c 	andi	r8,r8,1
8110d214:	8822d07a 	srli	r17,r17,1
8110d218:	1a10b03a 	or	r8,r3,r8
8110d21c:	1210b03a 	or	r8,r2,r8
8110d220:	5805883a 	mov	r2,r11
8110d224:	1140ffc4 	addi	r5,r2,1023
8110d228:	0140440e 	bge	zero,r5,8110d33c <__muldf3+0x5fc>
8110d22c:	40c001cc 	andi	r3,r8,7
8110d230:	18000726 	beq	r3,zero,8110d250 <__muldf3+0x510>
8110d234:	40c003cc 	andi	r3,r8,15
8110d238:	01000104 	movi	r4,4
8110d23c:	19000426 	beq	r3,r4,8110d250 <__muldf3+0x510>
8110d240:	4107883a 	add	r3,r8,r4
8110d244:	1a11803a 	cmpltu	r8,r3,r8
8110d248:	8a23883a 	add	r17,r17,r8
8110d24c:	1811883a 	mov	r8,r3
8110d250:	88c0402c 	andhi	r3,r17,256
8110d254:	18000426 	beq	r3,zero,8110d268 <__muldf3+0x528>
8110d258:	11410004 	addi	r5,r2,1024
8110d25c:	00bfc034 	movhi	r2,65280
8110d260:	10bfffc4 	addi	r2,r2,-1
8110d264:	88a2703a 	and	r17,r17,r2
8110d268:	0081ff84 	movi	r2,2046
8110d26c:	117f6416 	blt	r2,r5,8110d000 <__reset+0xfb0ed000>
8110d270:	8828977a 	slli	r20,r17,29
8110d274:	4010d0fa 	srli	r8,r8,3
8110d278:	8822927a 	slli	r17,r17,9
8110d27c:	2881ffcc 	andi	r2,r5,2047
8110d280:	a228b03a 	or	r20,r20,r8
8110d284:	880ad33a 	srli	r5,r17,12
8110d288:	b02b883a 	mov	r21,r22
8110d28c:	003f0d06 	br	8110cec4 <__reset+0xfb0ecec4>
8110d290:	8080022c 	andhi	r2,r16,8
8110d294:	10000926 	beq	r2,zero,8110d2bc <__muldf3+0x57c>
8110d298:	8880022c 	andhi	r2,r17,8
8110d29c:	1000071e 	bne	r2,zero,8110d2bc <__muldf3+0x57c>
8110d2a0:	00800434 	movhi	r2,16
8110d2a4:	89400234 	orhi	r5,r17,8
8110d2a8:	10bfffc4 	addi	r2,r2,-1
8110d2ac:	b82b883a 	mov	r21,r23
8110d2b0:	288a703a 	and	r5,r5,r2
8110d2b4:	4029883a 	mov	r20,r8
8110d2b8:	003f6806 	br	8110d05c <__reset+0xfb0ed05c>
8110d2bc:	00800434 	movhi	r2,16
8110d2c0:	81400234 	orhi	r5,r16,8
8110d2c4:	10bfffc4 	addi	r2,r2,-1
8110d2c8:	288a703a 	and	r5,r5,r2
8110d2cc:	003f6306 	br	8110d05c <__reset+0xfb0ed05c>
8110d2d0:	147ff604 	addi	r17,r2,-40
8110d2d4:	3462983a 	sll	r17,r6,r17
8110d2d8:	0011883a 	mov	r8,zero
8110d2dc:	003f4406 	br	8110cff0 <__reset+0xfb0ecff0>
8110d2e0:	3009883a 	mov	r4,r6
8110d2e4:	d9800215 	stw	r6,8(sp)
8110d2e8:	da400115 	stw	r9,4(sp)
8110d2ec:	da800015 	stw	r10,0(sp)
8110d2f0:	110d7200 	call	8110d720 <__clzsi2>
8110d2f4:	10800804 	addi	r2,r2,32
8110d2f8:	da800017 	ldw	r10,0(sp)
8110d2fc:	da400117 	ldw	r9,4(sp)
8110d300:	d9800217 	ldw	r6,8(sp)
8110d304:	003f3006 	br	8110cfc8 <__reset+0xfb0ecfc8>
8110d308:	143ff604 	addi	r16,r2,-40
8110d30c:	9c20983a 	sll	r16,r19,r16
8110d310:	0029883a 	mov	r20,zero
8110d314:	003f1606 	br	8110cf70 <__reset+0xfb0ecf70>
8110d318:	d9800215 	stw	r6,8(sp)
8110d31c:	d9c00015 	stw	r7,0(sp)
8110d320:	da400115 	stw	r9,4(sp)
8110d324:	110d7200 	call	8110d720 <__clzsi2>
8110d328:	10800804 	addi	r2,r2,32
8110d32c:	da400117 	ldw	r9,4(sp)
8110d330:	d9c00017 	ldw	r7,0(sp)
8110d334:	d9800217 	ldw	r6,8(sp)
8110d338:	003f0306 	br	8110cf48 <__reset+0xfb0ecf48>
8110d33c:	00c00044 	movi	r3,1
8110d340:	1947c83a 	sub	r3,r3,r5
8110d344:	00800e04 	movi	r2,56
8110d348:	10feda16 	blt	r2,r3,8110ceb4 <__reset+0xfb0eceb4>
8110d34c:	008007c4 	movi	r2,31
8110d350:	10c01b16 	blt	r2,r3,8110d3c0 <__muldf3+0x680>
8110d354:	00800804 	movi	r2,32
8110d358:	10c5c83a 	sub	r2,r2,r3
8110d35c:	888a983a 	sll	r5,r17,r2
8110d360:	40c8d83a 	srl	r4,r8,r3
8110d364:	4084983a 	sll	r2,r8,r2
8110d368:	88e2d83a 	srl	r17,r17,r3
8110d36c:	2906b03a 	or	r3,r5,r4
8110d370:	1004c03a 	cmpne	r2,r2,zero
8110d374:	1886b03a 	or	r3,r3,r2
8110d378:	188001cc 	andi	r2,r3,7
8110d37c:	10000726 	beq	r2,zero,8110d39c <__muldf3+0x65c>
8110d380:	188003cc 	andi	r2,r3,15
8110d384:	01000104 	movi	r4,4
8110d388:	11000426 	beq	r2,r4,8110d39c <__muldf3+0x65c>
8110d38c:	1805883a 	mov	r2,r3
8110d390:	10c00104 	addi	r3,r2,4
8110d394:	1885803a 	cmpltu	r2,r3,r2
8110d398:	88a3883a 	add	r17,r17,r2
8110d39c:	8880202c 	andhi	r2,r17,128
8110d3a0:	10001c26 	beq	r2,zero,8110d414 <__muldf3+0x6d4>
8110d3a4:	b02b883a 	mov	r21,r22
8110d3a8:	00800044 	movi	r2,1
8110d3ac:	000b883a 	mov	r5,zero
8110d3b0:	0029883a 	mov	r20,zero
8110d3b4:	003ec306 	br	8110cec4 <__reset+0xfb0ecec4>
8110d3b8:	5805883a 	mov	r2,r11
8110d3bc:	003f9906 	br	8110d224 <__reset+0xfb0ed224>
8110d3c0:	00bff844 	movi	r2,-31
8110d3c4:	1145c83a 	sub	r2,r2,r5
8110d3c8:	8888d83a 	srl	r4,r17,r2
8110d3cc:	00800804 	movi	r2,32
8110d3d0:	18801a26 	beq	r3,r2,8110d43c <__muldf3+0x6fc>
8110d3d4:	00801004 	movi	r2,64
8110d3d8:	10c5c83a 	sub	r2,r2,r3
8110d3dc:	8884983a 	sll	r2,r17,r2
8110d3e0:	1204b03a 	or	r2,r2,r8
8110d3e4:	1004c03a 	cmpne	r2,r2,zero
8110d3e8:	2084b03a 	or	r2,r4,r2
8110d3ec:	144001cc 	andi	r17,r2,7
8110d3f0:	88000d1e 	bne	r17,zero,8110d428 <__muldf3+0x6e8>
8110d3f4:	000b883a 	mov	r5,zero
8110d3f8:	1028d0fa 	srli	r20,r2,3
8110d3fc:	b02b883a 	mov	r21,r22
8110d400:	0005883a 	mov	r2,zero
8110d404:	a468b03a 	or	r20,r20,r17
8110d408:	003eae06 	br	8110cec4 <__reset+0xfb0ecec4>
8110d40c:	1007883a 	mov	r3,r2
8110d410:	0023883a 	mov	r17,zero
8110d414:	880a927a 	slli	r5,r17,9
8110d418:	1805883a 	mov	r2,r3
8110d41c:	8822977a 	slli	r17,r17,29
8110d420:	280ad33a 	srli	r5,r5,12
8110d424:	003ff406 	br	8110d3f8 <__reset+0xfb0ed3f8>
8110d428:	10c003cc 	andi	r3,r2,15
8110d42c:	01000104 	movi	r4,4
8110d430:	193ff626 	beq	r3,r4,8110d40c <__reset+0xfb0ed40c>
8110d434:	0023883a 	mov	r17,zero
8110d438:	003fd506 	br	8110d390 <__reset+0xfb0ed390>
8110d43c:	0005883a 	mov	r2,zero
8110d440:	003fe706 	br	8110d3e0 <__reset+0xfb0ed3e0>
8110d444:	00800434 	movhi	r2,16
8110d448:	89400234 	orhi	r5,r17,8
8110d44c:	10bfffc4 	addi	r2,r2,-1
8110d450:	b02b883a 	mov	r21,r22
8110d454:	288a703a 	and	r5,r5,r2
8110d458:	4029883a 	mov	r20,r8
8110d45c:	003eff06 	br	8110d05c <__reset+0xfb0ed05c>

8110d460 <__extendsfdf2>:
8110d460:	200ad5fa 	srli	r5,r4,23
8110d464:	defffd04 	addi	sp,sp,-12
8110d468:	de00012e 	bgeu	sp,et,8110d470 <__extendsfdf2+0x10>
8110d46c:	003b68fa 	trap	3
8110d470:	29403fcc 	andi	r5,r5,255
8110d474:	dc400115 	stw	r17,4(sp)
8110d478:	29800044 	addi	r6,r5,1
8110d47c:	04402034 	movhi	r17,128
8110d480:	dc000015 	stw	r16,0(sp)
8110d484:	8c7fffc4 	addi	r17,r17,-1
8110d488:	dfc00215 	stw	ra,8(sp)
8110d48c:	31803fcc 	andi	r6,r6,255
8110d490:	00800044 	movi	r2,1
8110d494:	8922703a 	and	r17,r17,r4
8110d498:	2020d7fa 	srli	r16,r4,31
8110d49c:	1180110e 	bge	r2,r6,8110d4e4 <__extendsfdf2+0x84>
8110d4a0:	880cd0fa 	srli	r6,r17,3
8110d4a4:	8822977a 	slli	r17,r17,29
8110d4a8:	2940e004 	addi	r5,r5,896
8110d4ac:	2941ffcc 	andi	r5,r5,2047
8110d4b0:	2804953a 	slli	r2,r5,20
8110d4b4:	01400434 	movhi	r5,16
8110d4b8:	800697fa 	slli	r3,r16,31
8110d4bc:	297fffc4 	addi	r5,r5,-1
8110d4c0:	314a703a 	and	r5,r6,r5
8110d4c4:	288ab03a 	or	r5,r5,r2
8110d4c8:	28c6b03a 	or	r3,r5,r3
8110d4cc:	8805883a 	mov	r2,r17
8110d4d0:	dfc00217 	ldw	ra,8(sp)
8110d4d4:	dc400117 	ldw	r17,4(sp)
8110d4d8:	dc000017 	ldw	r16,0(sp)
8110d4dc:	dec00304 	addi	sp,sp,12
8110d4e0:	f800283a 	ret
8110d4e4:	2800111e 	bne	r5,zero,8110d52c <__extendsfdf2+0xcc>
8110d4e8:	88001c26 	beq	r17,zero,8110d55c <__extendsfdf2+0xfc>
8110d4ec:	8809883a 	mov	r4,r17
8110d4f0:	110d7200 	call	8110d720 <__clzsi2>
8110d4f4:	00c00284 	movi	r3,10
8110d4f8:	18801b16 	blt	r3,r2,8110d568 <__extendsfdf2+0x108>
8110d4fc:	018002c4 	movi	r6,11
8110d500:	308dc83a 	sub	r6,r6,r2
8110d504:	11000544 	addi	r4,r2,21
8110d508:	8986d83a 	srl	r3,r17,r6
8110d50c:	8922983a 	sll	r17,r17,r4
8110d510:	0180e244 	movi	r6,905
8110d514:	01400434 	movhi	r5,16
8110d518:	3085c83a 	sub	r2,r6,r2
8110d51c:	297fffc4 	addi	r5,r5,-1
8110d520:	194c703a 	and	r6,r3,r5
8110d524:	1141ffcc 	andi	r5,r2,2047
8110d528:	003fe006 	br	8110d4ac <__reset+0xfb0ed4ac>
8110d52c:	88000826 	beq	r17,zero,8110d550 <__extendsfdf2+0xf0>
8110d530:	880cd0fa 	srli	r6,r17,3
8110d534:	00800434 	movhi	r2,16
8110d538:	10bfffc4 	addi	r2,r2,-1
8110d53c:	31800234 	orhi	r6,r6,8
8110d540:	8822977a 	slli	r17,r17,29
8110d544:	308c703a 	and	r6,r6,r2
8110d548:	0141ffc4 	movi	r5,2047
8110d54c:	003fd706 	br	8110d4ac <__reset+0xfb0ed4ac>
8110d550:	0141ffc4 	movi	r5,2047
8110d554:	000d883a 	mov	r6,zero
8110d558:	003fd406 	br	8110d4ac <__reset+0xfb0ed4ac>
8110d55c:	000b883a 	mov	r5,zero
8110d560:	000d883a 	mov	r6,zero
8110d564:	003fd106 	br	8110d4ac <__reset+0xfb0ed4ac>
8110d568:	11bffd44 	addi	r6,r2,-11
8110d56c:	8986983a 	sll	r3,r17,r6
8110d570:	0023883a 	mov	r17,zero
8110d574:	003fe606 	br	8110d510 <__reset+0xfb0ed510>

8110d578 <__truncdfsf2>:
8110d578:	2810d53a 	srli	r8,r5,20
8110d57c:	01c00434 	movhi	r7,16
8110d580:	39ffffc4 	addi	r7,r7,-1
8110d584:	29ce703a 	and	r7,r5,r7
8110d588:	4201ffcc 	andi	r8,r8,2047
8110d58c:	380e90fa 	slli	r7,r7,3
8110d590:	200cd77a 	srli	r6,r4,29
8110d594:	42400044 	addi	r9,r8,1
8110d598:	4a41ffcc 	andi	r9,r9,2047
8110d59c:	00c00044 	movi	r3,1
8110d5a0:	280ad7fa 	srli	r5,r5,31
8110d5a4:	31ceb03a 	or	r7,r6,r7
8110d5a8:	200490fa 	slli	r2,r4,3
8110d5ac:	1a40230e 	bge	r3,r9,8110d63c <__truncdfsf2+0xc4>
8110d5b0:	40ff2004 	addi	r3,r8,-896
8110d5b4:	01803f84 	movi	r6,254
8110d5b8:	30c01516 	blt	r6,r3,8110d610 <__truncdfsf2+0x98>
8110d5bc:	00c0380e 	bge	zero,r3,8110d6a0 <__truncdfsf2+0x128>
8110d5c0:	200c91ba 	slli	r6,r4,6
8110d5c4:	380e90fa 	slli	r7,r7,3
8110d5c8:	1004d77a 	srli	r2,r2,29
8110d5cc:	300cc03a 	cmpne	r6,r6,zero
8110d5d0:	31ccb03a 	or	r6,r6,r7
8110d5d4:	308cb03a 	or	r6,r6,r2
8110d5d8:	308001cc 	andi	r2,r6,7
8110d5dc:	10000426 	beq	r2,zero,8110d5f0 <__truncdfsf2+0x78>
8110d5e0:	308003cc 	andi	r2,r6,15
8110d5e4:	01000104 	movi	r4,4
8110d5e8:	11000126 	beq	r2,r4,8110d5f0 <__truncdfsf2+0x78>
8110d5ec:	31800104 	addi	r6,r6,4
8110d5f0:	3081002c 	andhi	r2,r6,1024
8110d5f4:	10001626 	beq	r2,zero,8110d650 <__truncdfsf2+0xd8>
8110d5f8:	18c00044 	addi	r3,r3,1
8110d5fc:	00803fc4 	movi	r2,255
8110d600:	18800326 	beq	r3,r2,8110d610 <__truncdfsf2+0x98>
8110d604:	300c91ba 	slli	r6,r6,6
8110d608:	300cd27a 	srli	r6,r6,9
8110d60c:	00000206 	br	8110d618 <__truncdfsf2+0xa0>
8110d610:	00ffffc4 	movi	r3,-1
8110d614:	000d883a 	mov	r6,zero
8110d618:	18c03fcc 	andi	r3,r3,255
8110d61c:	180895fa 	slli	r4,r3,23
8110d620:	00c02034 	movhi	r3,128
8110d624:	280a97fa 	slli	r5,r5,31
8110d628:	18ffffc4 	addi	r3,r3,-1
8110d62c:	30c6703a 	and	r3,r6,r3
8110d630:	1906b03a 	or	r3,r3,r4
8110d634:	1944b03a 	or	r2,r3,r5
8110d638:	f800283a 	ret
8110d63c:	40000b1e 	bne	r8,zero,8110d66c <__truncdfsf2+0xf4>
8110d640:	388cb03a 	or	r6,r7,r2
8110d644:	0007883a 	mov	r3,zero
8110d648:	30000426 	beq	r6,zero,8110d65c <__truncdfsf2+0xe4>
8110d64c:	01800144 	movi	r6,5
8110d650:	00803fc4 	movi	r2,255
8110d654:	300cd0fa 	srli	r6,r6,3
8110d658:	18800a26 	beq	r3,r2,8110d684 <__truncdfsf2+0x10c>
8110d65c:	00802034 	movhi	r2,128
8110d660:	10bfffc4 	addi	r2,r2,-1
8110d664:	308c703a 	and	r6,r6,r2
8110d668:	003feb06 	br	8110d618 <__reset+0xfb0ed618>
8110d66c:	3888b03a 	or	r4,r7,r2
8110d670:	203fe726 	beq	r4,zero,8110d610 <__reset+0xfb0ed610>
8110d674:	380c90fa 	slli	r6,r7,3
8110d678:	00c03fc4 	movi	r3,255
8110d67c:	31808034 	orhi	r6,r6,512
8110d680:	003fd506 	br	8110d5d8 <__reset+0xfb0ed5d8>
8110d684:	303fe226 	beq	r6,zero,8110d610 <__reset+0xfb0ed610>
8110d688:	00802034 	movhi	r2,128
8110d68c:	31801034 	orhi	r6,r6,64
8110d690:	10bfffc4 	addi	r2,r2,-1
8110d694:	00ffffc4 	movi	r3,-1
8110d698:	308c703a 	and	r6,r6,r2
8110d69c:	003fde06 	br	8110d618 <__reset+0xfb0ed618>
8110d6a0:	013ffa44 	movi	r4,-23
8110d6a4:	19000e16 	blt	r3,r4,8110d6e0 <__truncdfsf2+0x168>
8110d6a8:	01000784 	movi	r4,30
8110d6ac:	20c9c83a 	sub	r4,r4,r3
8110d6b0:	018007c4 	movi	r6,31
8110d6b4:	39c02034 	orhi	r7,r7,128
8110d6b8:	31000b16 	blt	r6,r4,8110d6e8 <__truncdfsf2+0x170>
8110d6bc:	423f2084 	addi	r8,r8,-894
8110d6c0:	120c983a 	sll	r6,r2,r8
8110d6c4:	3a0e983a 	sll	r7,r7,r8
8110d6c8:	1104d83a 	srl	r2,r2,r4
8110d6cc:	300cc03a 	cmpne	r6,r6,zero
8110d6d0:	31ceb03a 	or	r7,r6,r7
8110d6d4:	388cb03a 	or	r6,r7,r2
8110d6d8:	0007883a 	mov	r3,zero
8110d6dc:	003fbe06 	br	8110d5d8 <__reset+0xfb0ed5d8>
8110d6e0:	0007883a 	mov	r3,zero
8110d6e4:	003fd906 	br	8110d64c <__reset+0xfb0ed64c>
8110d6e8:	01bfff84 	movi	r6,-2
8110d6ec:	30cdc83a 	sub	r6,r6,r3
8110d6f0:	00c00804 	movi	r3,32
8110d6f4:	398cd83a 	srl	r6,r7,r6
8110d6f8:	20c00726 	beq	r4,r3,8110d718 <__truncdfsf2+0x1a0>
8110d6fc:	423f2884 	addi	r8,r8,-862
8110d700:	3a0e983a 	sll	r7,r7,r8
8110d704:	3884b03a 	or	r2,r7,r2
8110d708:	1004c03a 	cmpne	r2,r2,zero
8110d70c:	118cb03a 	or	r6,r2,r6
8110d710:	0007883a 	mov	r3,zero
8110d714:	003fb006 	br	8110d5d8 <__reset+0xfb0ed5d8>
8110d718:	000f883a 	mov	r7,zero
8110d71c:	003ff906 	br	8110d704 <__reset+0xfb0ed704>

8110d720 <__clzsi2>:
8110d720:	00bfffd4 	movui	r2,65535
8110d724:	11000536 	bltu	r2,r4,8110d73c <__clzsi2+0x1c>
8110d728:	00803fc4 	movi	r2,255
8110d72c:	11000f36 	bltu	r2,r4,8110d76c <__clzsi2+0x4c>
8110d730:	00800804 	movi	r2,32
8110d734:	0007883a 	mov	r3,zero
8110d738:	00000506 	br	8110d750 <__clzsi2+0x30>
8110d73c:	00804034 	movhi	r2,256
8110d740:	10bfffc4 	addi	r2,r2,-1
8110d744:	11000c2e 	bgeu	r2,r4,8110d778 <__clzsi2+0x58>
8110d748:	00800204 	movi	r2,8
8110d74c:	00c00604 	movi	r3,24
8110d750:	20c8d83a 	srl	r4,r4,r3
8110d754:	00e04534 	movhi	r3,33044
8110d758:	18e9f004 	addi	r3,r3,-22592
8110d75c:	1909883a 	add	r4,r3,r4
8110d760:	20c00003 	ldbu	r3,0(r4)
8110d764:	10c5c83a 	sub	r2,r2,r3
8110d768:	f800283a 	ret
8110d76c:	00800604 	movi	r2,24
8110d770:	00c00204 	movi	r3,8
8110d774:	003ff606 	br	8110d750 <__reset+0xfb0ed750>
8110d778:	00800404 	movi	r2,16
8110d77c:	1007883a 	mov	r3,r2
8110d780:	003ff306 	br	8110d750 <__reset+0xfb0ed750>

8110d784 <atoi>:
8110d784:	01800284 	movi	r6,10
8110d788:	000b883a 	mov	r5,zero
8110d78c:	110f5541 	jmpi	8110f554 <strtol>

8110d790 <_atoi_r>:
8110d790:	01c00284 	movi	r7,10
8110d794:	000d883a 	mov	r6,zero
8110d798:	110f3141 	jmpi	8110f314 <_strtol_r>

8110d79c <_fopen_r>:
8110d79c:	defffa04 	addi	sp,sp,-24
8110d7a0:	3005883a 	mov	r2,r6
8110d7a4:	de00012e 	bgeu	sp,et,8110d7ac <_fopen_r+0x10>
8110d7a8:	003b68fa 	trap	3
8110d7ac:	d80d883a 	mov	r6,sp
8110d7b0:	dcc00415 	stw	r19,16(sp)
8110d7b4:	2827883a 	mov	r19,r5
8110d7b8:	100b883a 	mov	r5,r2
8110d7bc:	dc800315 	stw	r18,12(sp)
8110d7c0:	dfc00515 	stw	ra,20(sp)
8110d7c4:	dc400215 	stw	r17,8(sp)
8110d7c8:	dc000115 	stw	r16,4(sp)
8110d7cc:	2025883a 	mov	r18,r4
8110d7d0:	11173fc0 	call	811173fc <__sflags>
8110d7d4:	10002726 	beq	r2,zero,8110d874 <_fopen_r+0xd8>
8110d7d8:	9009883a 	mov	r4,r18
8110d7dc:	1023883a 	mov	r17,r2
8110d7e0:	11172740 	call	81117274 <__sfp>
8110d7e4:	1021883a 	mov	r16,r2
8110d7e8:	10002226 	beq	r2,zero,8110d874 <_fopen_r+0xd8>
8110d7ec:	d9800017 	ldw	r6,0(sp)
8110d7f0:	01c06d84 	movi	r7,438
8110d7f4:	980b883a 	mov	r5,r19
8110d7f8:	9009883a 	mov	r4,r18
8110d7fc:	110eb580 	call	8110eb58 <_open_r>
8110d800:	10001916 	blt	r2,zero,8110d868 <_fopen_r+0xcc>
8110d804:	8080038d 	sth	r2,14(r16)
8110d808:	00a04474 	movhi	r2,33041
8110d80c:	10bc3704 	addi	r2,r2,-3876
8110d810:	80800815 	stw	r2,32(r16)
8110d814:	00a04474 	movhi	r2,33041
8110d818:	10bc5004 	addi	r2,r2,-3776
8110d81c:	80800915 	stw	r2,36(r16)
8110d820:	00a04474 	movhi	r2,33041
8110d824:	10bc7104 	addi	r2,r2,-3644
8110d828:	80800a15 	stw	r2,40(r16)
8110d82c:	00a04474 	movhi	r2,33041
8110d830:	10bc8a04 	addi	r2,r2,-3544
8110d834:	8440030d 	sth	r17,12(r16)
8110d838:	84000715 	stw	r16,28(r16)
8110d83c:	80800b15 	stw	r2,44(r16)
8110d840:	8c40400c 	andi	r17,r17,256
8110d844:	88000d1e 	bne	r17,zero,8110d87c <_fopen_r+0xe0>
8110d848:	8005883a 	mov	r2,r16
8110d84c:	dfc00517 	ldw	ra,20(sp)
8110d850:	dcc00417 	ldw	r19,16(sp)
8110d854:	dc800317 	ldw	r18,12(sp)
8110d858:	dc400217 	ldw	r17,8(sp)
8110d85c:	dc000117 	ldw	r16,4(sp)
8110d860:	dec00604 	addi	sp,sp,24
8110d864:	f800283a 	ret
8110d868:	11173bc0 	call	811173bc <__sfp_lock_acquire>
8110d86c:	8000030d 	sth	zero,12(r16)
8110d870:	11173c00 	call	811173c0 <__sfp_lock_release>
8110d874:	0005883a 	mov	r2,zero
8110d878:	003ff406 	br	8110d84c <__reset+0xfb0ed84c>
8110d87c:	01c00084 	movi	r7,2
8110d880:	000d883a 	mov	r6,zero
8110d884:	800b883a 	mov	r5,r16
8110d888:	9009883a 	mov	r4,r18
8110d88c:	110d90c0 	call	8110d90c <_fseek_r>
8110d890:	8005883a 	mov	r2,r16
8110d894:	003fed06 	br	8110d84c <__reset+0xfb0ed84c>

8110d898 <fopen>:
8110d898:	00a04534 	movhi	r2,33044
8110d89c:	10b3e404 	addi	r2,r2,-12400
8110d8a0:	280d883a 	mov	r6,r5
8110d8a4:	200b883a 	mov	r5,r4
8110d8a8:	11000017 	ldw	r4,0(r2)
8110d8ac:	110d79c1 	jmpi	8110d79c <_fopen_r>

8110d8b0 <_fprintf_r>:
8110d8b0:	defffe04 	addi	sp,sp,-8
8110d8b4:	2809883a 	mov	r4,r5
8110d8b8:	300b883a 	mov	r5,r6
8110d8bc:	de00012e 	bgeu	sp,et,8110d8c4 <_fprintf_r+0x14>
8110d8c0:	003b68fa 	trap	3
8110d8c4:	dfc00015 	stw	ra,0(sp)
8110d8c8:	d9c00115 	stw	r7,4(sp)
8110d8cc:	d9800104 	addi	r6,sp,4
8110d8d0:	11139500 	call	81113950 <__vfprintf_internal>
8110d8d4:	dfc00017 	ldw	ra,0(sp)
8110d8d8:	dec00204 	addi	sp,sp,8
8110d8dc:	f800283a 	ret

8110d8e0 <fprintf>:
8110d8e0:	defffd04 	addi	sp,sp,-12
8110d8e4:	de00012e 	bgeu	sp,et,8110d8ec <fprintf+0xc>
8110d8e8:	003b68fa 	trap	3
8110d8ec:	dfc00015 	stw	ra,0(sp)
8110d8f0:	d9800115 	stw	r6,4(sp)
8110d8f4:	d9c00215 	stw	r7,8(sp)
8110d8f8:	d9800104 	addi	r6,sp,4
8110d8fc:	11139500 	call	81113950 <__vfprintf_internal>
8110d900:	dfc00017 	ldw	ra,0(sp)
8110d904:	dec00304 	addi	sp,sp,12
8110d908:	f800283a 	ret

8110d90c <_fseek_r>:
8110d90c:	110d92c1 	jmpi	8110d92c <_fseeko_r>

8110d910 <fseek>:
8110d910:	00a04534 	movhi	r2,33044
8110d914:	10b3e404 	addi	r2,r2,-12400
8110d918:	300f883a 	mov	r7,r6
8110d91c:	280d883a 	mov	r6,r5
8110d920:	200b883a 	mov	r5,r4
8110d924:	11000017 	ldw	r4,0(r2)
8110d928:	110d92c1 	jmpi	8110d92c <_fseeko_r>

8110d92c <_fseeko_r>:
8110d92c:	deffe804 	addi	sp,sp,-96
8110d930:	de00012e 	bgeu	sp,et,8110d938 <_fseeko_r+0xc>
8110d934:	003b68fa 	trap	3
8110d938:	dd401415 	stw	r21,80(sp)
8110d93c:	dc801115 	stw	r18,68(sp)
8110d940:	dc401015 	stw	r17,64(sp)
8110d944:	dc000f15 	stw	r16,60(sp)
8110d948:	dfc01715 	stw	ra,92(sp)
8110d94c:	ddc01615 	stw	r23,88(sp)
8110d950:	dd801515 	stw	r22,84(sp)
8110d954:	dd001315 	stw	r20,76(sp)
8110d958:	dcc01215 	stw	r19,72(sp)
8110d95c:	2023883a 	mov	r17,r4
8110d960:	2821883a 	mov	r16,r5
8110d964:	302b883a 	mov	r21,r6
8110d968:	3825883a 	mov	r18,r7
8110d96c:	20000226 	beq	r4,zero,8110d978 <_fseeko_r+0x4c>
8110d970:	20800e17 	ldw	r2,56(r4)
8110d974:	10005a26 	beq	r2,zero,8110dae0 <_fseeko_r+0x1b4>
8110d978:	8080030b 	ldhu	r2,12(r16)
8110d97c:	00c04204 	movi	r3,264
8110d980:	1080420c 	andi	r2,r2,264
8110d984:	10c05b26 	beq	r2,r3,8110daf4 <_fseeko_r+0x1c8>
8110d988:	85000a17 	ldw	r20,40(r16)
8110d98c:	a000f626 	beq	r20,zero,8110dd68 <_fseeko_r+0x43c>
8110d990:	00800044 	movi	r2,1
8110d994:	90803e26 	beq	r18,r2,8110da90 <_fseeko_r+0x164>
8110d998:	00800084 	movi	r2,2
8110d99c:	90801026 	beq	r18,r2,8110d9e0 <_fseeko_r+0xb4>
8110d9a0:	90000f26 	beq	r18,zero,8110d9e0 <_fseeko_r+0xb4>
8110d9a4:	00800584 	movi	r2,22
8110d9a8:	88800015 	stw	r2,0(r17)
8110d9ac:	04ffffc4 	movi	r19,-1
8110d9b0:	9805883a 	mov	r2,r19
8110d9b4:	dfc01717 	ldw	ra,92(sp)
8110d9b8:	ddc01617 	ldw	r23,88(sp)
8110d9bc:	dd801517 	ldw	r22,84(sp)
8110d9c0:	dd401417 	ldw	r21,80(sp)
8110d9c4:	dd001317 	ldw	r20,76(sp)
8110d9c8:	dcc01217 	ldw	r19,72(sp)
8110d9cc:	dc801117 	ldw	r18,68(sp)
8110d9d0:	dc401017 	ldw	r17,64(sp)
8110d9d4:	dc000f17 	ldw	r16,60(sp)
8110d9d8:	dec01804 	addi	sp,sp,96
8110d9dc:	f800283a 	ret
8110d9e0:	80800417 	ldw	r2,16(r16)
8110d9e4:	002f883a 	mov	r23,zero
8110d9e8:	0027883a 	mov	r19,zero
8110d9ec:	1000cb26 	beq	r2,zero,8110dd1c <_fseeko_r+0x3f0>
8110d9f0:	8080030b 	ldhu	r2,12(r16)
8110d9f4:	10c2068c 	andi	r3,r2,2074
8110d9f8:	1800071e 	bne	r3,zero,8110da18 <_fseeko_r+0xec>
8110d9fc:	10c1000c 	andi	r3,r2,1024
8110da00:	1800451e 	bne	r3,zero,8110db18 <_fseeko_r+0x1ec>
8110da04:	00e04474 	movhi	r3,33041
8110da08:	18fc7104 	addi	r3,r3,-3644
8110da0c:	a0c0b726 	beq	r20,r3,8110dcec <_fseeko_r+0x3c0>
8110da10:	10820014 	ori	r2,r2,2048
8110da14:	8080030d 	sth	r2,12(r16)
8110da18:	800b883a 	mov	r5,r16
8110da1c:	8809883a 	mov	r4,r17
8110da20:	1116fb00 	call	81116fb0 <_fflush_r>
8110da24:	1027883a 	mov	r19,r2
8110da28:	103fe01e 	bne	r2,zero,8110d9ac <__reset+0xfb0ed9ac>
8110da2c:	81400717 	ldw	r5,28(r16)
8110da30:	900f883a 	mov	r7,r18
8110da34:	a80d883a 	mov	r6,r21
8110da38:	8809883a 	mov	r4,r17
8110da3c:	a03ee83a 	callr	r20
8110da40:	00ffffc4 	movi	r3,-1
8110da44:	10ffd926 	beq	r2,r3,8110d9ac <__reset+0xfb0ed9ac>
8110da48:	81400c17 	ldw	r5,48(r16)
8110da4c:	28000526 	beq	r5,zero,8110da64 <_fseeko_r+0x138>
8110da50:	80801004 	addi	r2,r16,64
8110da54:	28800226 	beq	r5,r2,8110da60 <_fseeko_r+0x134>
8110da58:	8809883a 	mov	r4,r17
8110da5c:	11178440 	call	81117844 <_free_r>
8110da60:	80000c15 	stw	zero,48(r16)
8110da64:	8080030b 	ldhu	r2,12(r16)
8110da68:	80c00417 	ldw	r3,16(r16)
8110da6c:	80000115 	stw	zero,4(r16)
8110da70:	10bdf7cc 	andi	r2,r2,63455
8110da74:	80c00015 	stw	r3,0(r16)
8110da78:	8080030d 	sth	r2,12(r16)
8110da7c:	01800204 	movi	r6,8
8110da80:	000b883a 	mov	r5,zero
8110da84:	81001704 	addi	r4,r16,92
8110da88:	110ea300 	call	8110ea30 <memset>
8110da8c:	003fc806 	br	8110d9b0 <__reset+0xfb0ed9b0>
8110da90:	800b883a 	mov	r5,r16
8110da94:	8809883a 	mov	r4,r17
8110da98:	1116fb00 	call	81116fb0 <_fflush_r>
8110da9c:	8080030b 	ldhu	r2,12(r16)
8110daa0:	10c4000c 	andi	r3,r2,4096
8110daa4:	18008726 	beq	r3,zero,8110dcc4 <_fseeko_r+0x398>
8110daa8:	84c01417 	ldw	r19,80(r16)
8110daac:	10c0010c 	andi	r3,r2,4
8110dab0:	1800431e 	bne	r3,zero,8110dbc0 <_fseeko_r+0x294>
8110dab4:	1080020c 	andi	r2,r2,8
8110dab8:	10008026 	beq	r2,zero,8110dcbc <_fseeko_r+0x390>
8110dabc:	80c00017 	ldw	r3,0(r16)
8110dac0:	80800417 	ldw	r2,16(r16)
8110dac4:	18000226 	beq	r3,zero,8110dad0 <_fseeko_r+0x1a4>
8110dac8:	1887c83a 	sub	r3,r3,r2
8110dacc:	98e7883a 	add	r19,r19,r3
8110dad0:	aceb883a 	add	r21,r21,r19
8110dad4:	05c00044 	movi	r23,1
8110dad8:	0025883a 	mov	r18,zero
8110dadc:	003fc306 	br	8110d9ec <__reset+0xfb0ed9ec>
8110dae0:	11173ac0 	call	811173ac <__sinit>
8110dae4:	8080030b 	ldhu	r2,12(r16)
8110dae8:	00c04204 	movi	r3,264
8110daec:	1080420c 	andi	r2,r2,264
8110daf0:	10ffa51e 	bne	r2,r3,8110d988 <__reset+0xfb0ed988>
8110daf4:	800b883a 	mov	r5,r16
8110daf8:	8809883a 	mov	r4,r17
8110dafc:	1116fb00 	call	81116fb0 <_fflush_r>
8110db00:	003fa106 	br	8110d988 <__reset+0xfb0ed988>
8110db04:	8080030b 	ldhu	r2,12(r16)
8110db08:	00c10004 	movi	r3,1024
8110db0c:	80c01315 	stw	r3,76(r16)
8110db10:	10c4b03a 	or	r2,r2,r3
8110db14:	8080030d 	sth	r2,12(r16)
8110db18:	9000311e 	bne	r18,zero,8110dbe0 <_fseeko_r+0x2b4>
8110db1c:	a82d883a 	mov	r22,r21
8110db20:	b800371e 	bne	r23,zero,8110dc00 <_fseeko_r+0x2d4>
8110db24:	8080030b 	ldhu	r2,12(r16)
8110db28:	1084000c 	andi	r2,r2,4096
8110db2c:	10007f26 	beq	r2,zero,8110dd2c <_fseeko_r+0x400>
8110db30:	80801417 	ldw	r2,80(r16)
8110db34:	81800117 	ldw	r6,4(r16)
8110db38:	81400c17 	ldw	r5,48(r16)
8110db3c:	11a7c83a 	sub	r19,r2,r6
8110db40:	28008226 	beq	r5,zero,8110dd4c <_fseeko_r+0x420>
8110db44:	81c00f17 	ldw	r7,60(r16)
8110db48:	99e7c83a 	sub	r19,r19,r7
8110db4c:	81000e17 	ldw	r4,56(r16)
8110db50:	80800417 	ldw	r2,16(r16)
8110db54:	99a7883a 	add	r19,r19,r6
8110db58:	2087c83a 	sub	r3,r4,r2
8110db5c:	98e7c83a 	sub	r19,r19,r3
8110db60:	38c7883a 	add	r3,r7,r3
8110db64:	b4c02b16 	blt	r22,r19,8110dc14 <_fseeko_r+0x2e8>
8110db68:	98c9883a 	add	r4,r19,r3
8110db6c:	b100292e 	bgeu	r22,r4,8110dc14 <_fseeko_r+0x2e8>
8110db70:	b4e7c83a 	sub	r19,r22,r19
8110db74:	14c5883a 	add	r2,r2,r19
8110db78:	1ce7c83a 	sub	r19,r3,r19
8110db7c:	80800015 	stw	r2,0(r16)
8110db80:	84c00115 	stw	r19,4(r16)
8110db84:	28000526 	beq	r5,zero,8110db9c <_fseeko_r+0x270>
8110db88:	80801004 	addi	r2,r16,64
8110db8c:	28800226 	beq	r5,r2,8110db98 <_fseeko_r+0x26c>
8110db90:	8809883a 	mov	r4,r17
8110db94:	11178440 	call	81117844 <_free_r>
8110db98:	80000c15 	stw	zero,48(r16)
8110db9c:	8080030b 	ldhu	r2,12(r16)
8110dba0:	01800204 	movi	r6,8
8110dba4:	000b883a 	mov	r5,zero
8110dba8:	10bff7cc 	andi	r2,r2,65503
8110dbac:	8080030d 	sth	r2,12(r16)
8110dbb0:	81001704 	addi	r4,r16,92
8110dbb4:	110ea300 	call	8110ea30 <memset>
8110dbb8:	0027883a 	mov	r19,zero
8110dbbc:	003f7c06 	br	8110d9b0 <__reset+0xfb0ed9b0>
8110dbc0:	80c00117 	ldw	r3,4(r16)
8110dbc4:	80800c17 	ldw	r2,48(r16)
8110dbc8:	98e7c83a 	sub	r19,r19,r3
8110dbcc:	10003b26 	beq	r2,zero,8110dcbc <_fseeko_r+0x390>
8110dbd0:	80c00f17 	ldw	r3,60(r16)
8110dbd4:	80800417 	ldw	r2,16(r16)
8110dbd8:	98e7c83a 	sub	r19,r19,r3
8110dbdc:	003fbc06 	br	8110dad0 <__reset+0xfb0edad0>
8110dbe0:	8140038f 	ldh	r5,14(r16)
8110dbe4:	d80d883a 	mov	r6,sp
8110dbe8:	8809883a 	mov	r4,r17
8110dbec:	110dd940 	call	8110dd94 <_fstat_r>
8110dbf0:	103f891e 	bne	r2,zero,8110da18 <__reset+0xfb0eda18>
8110dbf4:	dd800417 	ldw	r22,16(sp)
8110dbf8:	adad883a 	add	r22,r21,r22
8110dbfc:	b83fc926 	beq	r23,zero,8110db24 <__reset+0xfb0edb24>
8110dc00:	81400c17 	ldw	r5,48(r16)
8110dc04:	81800117 	ldw	r6,4(r16)
8110dc08:	28005026 	beq	r5,zero,8110dd4c <_fseeko_r+0x420>
8110dc0c:	81c00f17 	ldw	r7,60(r16)
8110dc10:	003fce06 	br	8110db4c <__reset+0xfb0edb4c>
8110dc14:	84c01317 	ldw	r19,76(r16)
8110dc18:	81400717 	ldw	r5,28(r16)
8110dc1c:	000f883a 	mov	r7,zero
8110dc20:	04e7c83a 	sub	r19,zero,r19
8110dc24:	9da6703a 	and	r19,r19,r22
8110dc28:	980d883a 	mov	r6,r19
8110dc2c:	8809883a 	mov	r4,r17
8110dc30:	a03ee83a 	callr	r20
8110dc34:	00ffffc4 	movi	r3,-1
8110dc38:	10ff7726 	beq	r2,r3,8110da18 <__reset+0xfb0eda18>
8110dc3c:	80800417 	ldw	r2,16(r16)
8110dc40:	81400c17 	ldw	r5,48(r16)
8110dc44:	80000115 	stw	zero,4(r16)
8110dc48:	80800015 	stw	r2,0(r16)
8110dc4c:	28000526 	beq	r5,zero,8110dc64 <_fseeko_r+0x338>
8110dc50:	80801004 	addi	r2,r16,64
8110dc54:	28800226 	beq	r5,r2,8110dc60 <_fseeko_r+0x334>
8110dc58:	8809883a 	mov	r4,r17
8110dc5c:	11178440 	call	81117844 <_free_r>
8110dc60:	80000c15 	stw	zero,48(r16)
8110dc64:	8080030b 	ldhu	r2,12(r16)
8110dc68:	b4e7c83a 	sub	r19,r22,r19
8110dc6c:	10bff7cc 	andi	r2,r2,65503
8110dc70:	8080030d 	sth	r2,12(r16)
8110dc74:	98000b26 	beq	r19,zero,8110dca4 <_fseeko_r+0x378>
8110dc78:	800b883a 	mov	r5,r16
8110dc7c:	8809883a 	mov	r4,r17
8110dc80:	110ed540 	call	8110ed54 <__srefill_r>
8110dc84:	103f641e 	bne	r2,zero,8110da18 <__reset+0xfb0eda18>
8110dc88:	80800117 	ldw	r2,4(r16)
8110dc8c:	14ff6236 	bltu	r2,r19,8110da18 <__reset+0xfb0eda18>
8110dc90:	80c00017 	ldw	r3,0(r16)
8110dc94:	14c5c83a 	sub	r2,r2,r19
8110dc98:	80800115 	stw	r2,4(r16)
8110dc9c:	1ce7883a 	add	r19,r3,r19
8110dca0:	84c00015 	stw	r19,0(r16)
8110dca4:	01800204 	movi	r6,8
8110dca8:	000b883a 	mov	r5,zero
8110dcac:	81001704 	addi	r4,r16,92
8110dcb0:	110ea300 	call	8110ea30 <memset>
8110dcb4:	0027883a 	mov	r19,zero
8110dcb8:	003f3d06 	br	8110d9b0 <__reset+0xfb0ed9b0>
8110dcbc:	80800417 	ldw	r2,16(r16)
8110dcc0:	003f8306 	br	8110dad0 <__reset+0xfb0edad0>
8110dcc4:	81400717 	ldw	r5,28(r16)
8110dcc8:	900f883a 	mov	r7,r18
8110dccc:	000d883a 	mov	r6,zero
8110dcd0:	8809883a 	mov	r4,r17
8110dcd4:	a03ee83a 	callr	r20
8110dcd8:	1027883a 	mov	r19,r2
8110dcdc:	00bfffc4 	movi	r2,-1
8110dce0:	98bf3226 	beq	r19,r2,8110d9ac <__reset+0xfb0ed9ac>
8110dce4:	8080030b 	ldhu	r2,12(r16)
8110dce8:	003f7006 	br	8110daac <__reset+0xfb0edaac>
8110dcec:	8140038f 	ldh	r5,14(r16)
8110dcf0:	283f4716 	blt	r5,zero,8110da10 <__reset+0xfb0eda10>
8110dcf4:	d80d883a 	mov	r6,sp
8110dcf8:	8809883a 	mov	r4,r17
8110dcfc:	110dd940 	call	8110dd94 <_fstat_r>
8110dd00:	1000041e 	bne	r2,zero,8110dd14 <_fseeko_r+0x3e8>
8110dd04:	d8800117 	ldw	r2,4(sp)
8110dd08:	00e00014 	movui	r3,32768
8110dd0c:	10bc000c 	andi	r2,r2,61440
8110dd10:	10ff7c26 	beq	r2,r3,8110db04 <__reset+0xfb0edb04>
8110dd14:	8080030b 	ldhu	r2,12(r16)
8110dd18:	003f3d06 	br	8110da10 <__reset+0xfb0eda10>
8110dd1c:	800b883a 	mov	r5,r16
8110dd20:	8809883a 	mov	r4,r17
8110dd24:	110df080 	call	8110df08 <__smakebuf_r>
8110dd28:	003f3106 	br	8110d9f0 <__reset+0xfb0ed9f0>
8110dd2c:	81400717 	ldw	r5,28(r16)
8110dd30:	01c00044 	movi	r7,1
8110dd34:	000d883a 	mov	r6,zero
8110dd38:	8809883a 	mov	r4,r17
8110dd3c:	a03ee83a 	callr	r20
8110dd40:	00ffffc4 	movi	r3,-1
8110dd44:	10ff7b1e 	bne	r2,r3,8110db34 <__reset+0xfb0edb34>
8110dd48:	003f3306 	br	8110da18 <__reset+0xfb0eda18>
8110dd4c:	80c00017 	ldw	r3,0(r16)
8110dd50:	80800417 	ldw	r2,16(r16)
8110dd54:	000b883a 	mov	r5,zero
8110dd58:	1887c83a 	sub	r3,r3,r2
8110dd5c:	98e7c83a 	sub	r19,r19,r3
8110dd60:	30c7883a 	add	r3,r6,r3
8110dd64:	003f7f06 	br	8110db64 <__reset+0xfb0edb64>
8110dd68:	00800744 	movi	r2,29
8110dd6c:	88800015 	stw	r2,0(r17)
8110dd70:	04ffffc4 	movi	r19,-1
8110dd74:	003f0e06 	br	8110d9b0 <__reset+0xfb0ed9b0>

8110dd78 <fseeko>:
8110dd78:	00a04534 	movhi	r2,33044
8110dd7c:	10b3e404 	addi	r2,r2,-12400
8110dd80:	300f883a 	mov	r7,r6
8110dd84:	280d883a 	mov	r6,r5
8110dd88:	200b883a 	mov	r5,r4
8110dd8c:	11000017 	ldw	r4,0(r2)
8110dd90:	110d92c1 	jmpi	8110d92c <_fseeko_r>

8110dd94 <_fstat_r>:
8110dd94:	defffd04 	addi	sp,sp,-12
8110dd98:	de00012e 	bgeu	sp,et,8110dda0 <_fstat_r+0xc>
8110dd9c:	003b68fa 	trap	3
8110dda0:	2805883a 	mov	r2,r5
8110dda4:	dc000015 	stw	r16,0(sp)
8110dda8:	04204534 	movhi	r16,33044
8110ddac:	dc400115 	stw	r17,4(sp)
8110ddb0:	84344404 	addi	r16,r16,-12016
8110ddb4:	2023883a 	mov	r17,r4
8110ddb8:	300b883a 	mov	r5,r6
8110ddbc:	1009883a 	mov	r4,r2
8110ddc0:	dfc00215 	stw	ra,8(sp)
8110ddc4:	80000015 	stw	zero,0(r16)
8110ddc8:	112322c0 	call	8112322c <fstat>
8110ddcc:	00ffffc4 	movi	r3,-1
8110ddd0:	10c00526 	beq	r2,r3,8110dde8 <_fstat_r+0x54>
8110ddd4:	dfc00217 	ldw	ra,8(sp)
8110ddd8:	dc400117 	ldw	r17,4(sp)
8110dddc:	dc000017 	ldw	r16,0(sp)
8110dde0:	dec00304 	addi	sp,sp,12
8110dde4:	f800283a 	ret
8110dde8:	80c00017 	ldw	r3,0(r16)
8110ddec:	183ff926 	beq	r3,zero,8110ddd4 <__reset+0xfb0eddd4>
8110ddf0:	88c00015 	stw	r3,0(r17)
8110ddf4:	003ff706 	br	8110ddd4 <__reset+0xfb0eddd4>

8110ddf8 <_fwrite_r>:
8110ddf8:	defff504 	addi	sp,sp,-44
8110ddfc:	de00012e 	bgeu	sp,et,8110de04 <_fwrite_r+0xc>
8110de00:	003b68fa 	trap	3
8110de04:	dc800815 	stw	r18,32(sp)
8110de08:	39a5383a 	mul	r18,r7,r6
8110de0c:	d8800304 	addi	r2,sp,12
8110de10:	d8800015 	stw	r2,0(sp)
8110de14:	00800044 	movi	r2,1
8110de18:	dcc00915 	stw	r19,36(sp)
8110de1c:	dc400715 	stw	r17,28(sp)
8110de20:	dc000615 	stw	r16,24(sp)
8110de24:	d9400315 	stw	r5,12(sp)
8110de28:	dfc00a15 	stw	ra,40(sp)
8110de2c:	dc800415 	stw	r18,16(sp)
8110de30:	dc800215 	stw	r18,8(sp)
8110de34:	d8800115 	stw	r2,4(sp)
8110de38:	3027883a 	mov	r19,r6
8110de3c:	3821883a 	mov	r16,r7
8110de40:	2023883a 	mov	r17,r4
8110de44:	d9400b17 	ldw	r5,44(sp)
8110de48:	20000226 	beq	r4,zero,8110de54 <_fwrite_r+0x5c>
8110de4c:	20800e17 	ldw	r2,56(r4)
8110de50:	10001a26 	beq	r2,zero,8110debc <_fwrite_r+0xc4>
8110de54:	2880030b 	ldhu	r2,12(r5)
8110de58:	10c8000c 	andi	r3,r2,8192
8110de5c:	1800061e 	bne	r3,zero,8110de78 <_fwrite_r+0x80>
8110de60:	29001917 	ldw	r4,100(r5)
8110de64:	00f7ffc4 	movi	r3,-8193
8110de68:	10880014 	ori	r2,r2,8192
8110de6c:	20c6703a 	and	r3,r4,r3
8110de70:	2880030d 	sth	r2,12(r5)
8110de74:	28c01915 	stw	r3,100(r5)
8110de78:	d80d883a 	mov	r6,sp
8110de7c:	8809883a 	mov	r4,r17
8110de80:	1117b5c0 	call	81117b5c <__sfvwrite_r>
8110de84:	10000b26 	beq	r2,zero,8110deb4 <_fwrite_r+0xbc>
8110de88:	d9000217 	ldw	r4,8(sp)
8110de8c:	980b883a 	mov	r5,r19
8110de90:	9109c83a 	sub	r4,r18,r4
8110de94:	1120ea40 	call	81120ea4 <__udivsi3>
8110de98:	dfc00a17 	ldw	ra,40(sp)
8110de9c:	dcc00917 	ldw	r19,36(sp)
8110dea0:	dc800817 	ldw	r18,32(sp)
8110dea4:	dc400717 	ldw	r17,28(sp)
8110dea8:	dc000617 	ldw	r16,24(sp)
8110deac:	dec00b04 	addi	sp,sp,44
8110deb0:	f800283a 	ret
8110deb4:	8005883a 	mov	r2,r16
8110deb8:	003ff706 	br	8110de98 <__reset+0xfb0ede98>
8110debc:	d9400515 	stw	r5,20(sp)
8110dec0:	11173ac0 	call	811173ac <__sinit>
8110dec4:	d9400517 	ldw	r5,20(sp)
8110dec8:	003fe206 	br	8110de54 <__reset+0xfb0ede54>

8110decc <fwrite>:
8110decc:	defffe04 	addi	sp,sp,-8
8110ded0:	00a04534 	movhi	r2,33044
8110ded4:	de00012e 	bgeu	sp,et,8110dedc <fwrite+0x10>
8110ded8:	003b68fa 	trap	3
8110dedc:	10b3e404 	addi	r2,r2,-12400
8110dee0:	d9c00015 	stw	r7,0(sp)
8110dee4:	300f883a 	mov	r7,r6
8110dee8:	280d883a 	mov	r6,r5
8110deec:	200b883a 	mov	r5,r4
8110def0:	11000017 	ldw	r4,0(r2)
8110def4:	dfc00115 	stw	ra,4(sp)
8110def8:	110ddf80 	call	8110ddf8 <_fwrite_r>
8110defc:	dfc00117 	ldw	ra,4(sp)
8110df00:	dec00204 	addi	sp,sp,8
8110df04:	f800283a 	ret

8110df08 <__smakebuf_r>:
8110df08:	2880030b 	ldhu	r2,12(r5)
8110df0c:	10c0008c 	andi	r3,r2,2
8110df10:	1800431e 	bne	r3,zero,8110e020 <__smakebuf_r+0x118>
8110df14:	deffec04 	addi	sp,sp,-80
8110df18:	de00012e 	bgeu	sp,et,8110df20 <__smakebuf_r+0x18>
8110df1c:	003b68fa 	trap	3
8110df20:	dc000f15 	stw	r16,60(sp)
8110df24:	2821883a 	mov	r16,r5
8110df28:	2940038f 	ldh	r5,14(r5)
8110df2c:	dc401015 	stw	r17,64(sp)
8110df30:	dfc01315 	stw	ra,76(sp)
8110df34:	dcc01215 	stw	r19,72(sp)
8110df38:	dc801115 	stw	r18,68(sp)
8110df3c:	2023883a 	mov	r17,r4
8110df40:	28001c16 	blt	r5,zero,8110dfb4 <__smakebuf_r+0xac>
8110df44:	d80d883a 	mov	r6,sp
8110df48:	110dd940 	call	8110dd94 <_fstat_r>
8110df4c:	10001816 	blt	r2,zero,8110dfb0 <__smakebuf_r+0xa8>
8110df50:	d8800117 	ldw	r2,4(sp)
8110df54:	00e00014 	movui	r3,32768
8110df58:	10bc000c 	andi	r2,r2,61440
8110df5c:	14c80020 	cmpeqi	r19,r2,8192
8110df60:	10c03726 	beq	r2,r3,8110e040 <__smakebuf_r+0x138>
8110df64:	80c0030b 	ldhu	r3,12(r16)
8110df68:	18c20014 	ori	r3,r3,2048
8110df6c:	80c0030d 	sth	r3,12(r16)
8110df70:	00c80004 	movi	r3,8192
8110df74:	10c0521e 	bne	r2,r3,8110e0c0 <__smakebuf_r+0x1b8>
8110df78:	8140038f 	ldh	r5,14(r16)
8110df7c:	8809883a 	mov	r4,r17
8110df80:	11181b80 	call	811181b8 <_isatty_r>
8110df84:	10004c26 	beq	r2,zero,8110e0b8 <__smakebuf_r+0x1b0>
8110df88:	8080030b 	ldhu	r2,12(r16)
8110df8c:	80c010c4 	addi	r3,r16,67
8110df90:	80c00015 	stw	r3,0(r16)
8110df94:	10800054 	ori	r2,r2,1
8110df98:	8080030d 	sth	r2,12(r16)
8110df9c:	00800044 	movi	r2,1
8110dfa0:	80c00415 	stw	r3,16(r16)
8110dfa4:	80800515 	stw	r2,20(r16)
8110dfa8:	04810004 	movi	r18,1024
8110dfac:	00000706 	br	8110dfcc <__smakebuf_r+0xc4>
8110dfb0:	8080030b 	ldhu	r2,12(r16)
8110dfb4:	10c0200c 	andi	r3,r2,128
8110dfb8:	18001f1e 	bne	r3,zero,8110e038 <__smakebuf_r+0x130>
8110dfbc:	04810004 	movi	r18,1024
8110dfc0:	10820014 	ori	r2,r2,2048
8110dfc4:	8080030d 	sth	r2,12(r16)
8110dfc8:	0027883a 	mov	r19,zero
8110dfcc:	900b883a 	mov	r5,r18
8110dfd0:	8809883a 	mov	r4,r17
8110dfd4:	110e0cc0 	call	8110e0cc <_malloc_r>
8110dfd8:	10002c26 	beq	r2,zero,8110e08c <__smakebuf_r+0x184>
8110dfdc:	80c0030b 	ldhu	r3,12(r16)
8110dfe0:	01204474 	movhi	r4,33041
8110dfe4:	211c1304 	addi	r4,r4,28748
8110dfe8:	89000f15 	stw	r4,60(r17)
8110dfec:	18c02014 	ori	r3,r3,128
8110dff0:	80c0030d 	sth	r3,12(r16)
8110dff4:	80800015 	stw	r2,0(r16)
8110dff8:	80800415 	stw	r2,16(r16)
8110dffc:	84800515 	stw	r18,20(r16)
8110e000:	98001a1e 	bne	r19,zero,8110e06c <__smakebuf_r+0x164>
8110e004:	dfc01317 	ldw	ra,76(sp)
8110e008:	dcc01217 	ldw	r19,72(sp)
8110e00c:	dc801117 	ldw	r18,68(sp)
8110e010:	dc401017 	ldw	r17,64(sp)
8110e014:	dc000f17 	ldw	r16,60(sp)
8110e018:	dec01404 	addi	sp,sp,80
8110e01c:	f800283a 	ret
8110e020:	288010c4 	addi	r2,r5,67
8110e024:	28800015 	stw	r2,0(r5)
8110e028:	28800415 	stw	r2,16(r5)
8110e02c:	00800044 	movi	r2,1
8110e030:	28800515 	stw	r2,20(r5)
8110e034:	f800283a 	ret
8110e038:	04801004 	movi	r18,64
8110e03c:	003fe006 	br	8110dfc0 <__reset+0xfb0edfc0>
8110e040:	81000a17 	ldw	r4,40(r16)
8110e044:	00e04474 	movhi	r3,33041
8110e048:	18fc7104 	addi	r3,r3,-3644
8110e04c:	20ffc51e 	bne	r4,r3,8110df64 <__reset+0xfb0edf64>
8110e050:	8080030b 	ldhu	r2,12(r16)
8110e054:	04810004 	movi	r18,1024
8110e058:	84801315 	stw	r18,76(r16)
8110e05c:	1484b03a 	or	r2,r2,r18
8110e060:	8080030d 	sth	r2,12(r16)
8110e064:	0027883a 	mov	r19,zero
8110e068:	003fd806 	br	8110dfcc <__reset+0xfb0edfcc>
8110e06c:	8140038f 	ldh	r5,14(r16)
8110e070:	8809883a 	mov	r4,r17
8110e074:	11181b80 	call	811181b8 <_isatty_r>
8110e078:	103fe226 	beq	r2,zero,8110e004 <__reset+0xfb0ee004>
8110e07c:	8080030b 	ldhu	r2,12(r16)
8110e080:	10800054 	ori	r2,r2,1
8110e084:	8080030d 	sth	r2,12(r16)
8110e088:	003fde06 	br	8110e004 <__reset+0xfb0ee004>
8110e08c:	8080030b 	ldhu	r2,12(r16)
8110e090:	10c0800c 	andi	r3,r2,512
8110e094:	183fdb1e 	bne	r3,zero,8110e004 <__reset+0xfb0ee004>
8110e098:	10800094 	ori	r2,r2,2
8110e09c:	80c010c4 	addi	r3,r16,67
8110e0a0:	8080030d 	sth	r2,12(r16)
8110e0a4:	00800044 	movi	r2,1
8110e0a8:	80c00015 	stw	r3,0(r16)
8110e0ac:	80c00415 	stw	r3,16(r16)
8110e0b0:	80800515 	stw	r2,20(r16)
8110e0b4:	003fd306 	br	8110e004 <__reset+0xfb0ee004>
8110e0b8:	04810004 	movi	r18,1024
8110e0bc:	003fc306 	br	8110dfcc <__reset+0xfb0edfcc>
8110e0c0:	0027883a 	mov	r19,zero
8110e0c4:	04810004 	movi	r18,1024
8110e0c8:	003fc006 	br	8110dfcc <__reset+0xfb0edfcc>

8110e0cc <_malloc_r>:
8110e0cc:	defff504 	addi	sp,sp,-44
8110e0d0:	de00012e 	bgeu	sp,et,8110e0d8 <_malloc_r+0xc>
8110e0d4:	003b68fa 	trap	3
8110e0d8:	288002c4 	addi	r2,r5,11
8110e0dc:	dc800315 	stw	r18,12(sp)
8110e0e0:	dfc00a15 	stw	ra,40(sp)
8110e0e4:	df000915 	stw	fp,36(sp)
8110e0e8:	ddc00815 	stw	r23,32(sp)
8110e0ec:	dd800715 	stw	r22,28(sp)
8110e0f0:	dd400615 	stw	r21,24(sp)
8110e0f4:	dd000515 	stw	r20,20(sp)
8110e0f8:	dcc00415 	stw	r19,16(sp)
8110e0fc:	dc400215 	stw	r17,8(sp)
8110e100:	dc000115 	stw	r16,4(sp)
8110e104:	00c00584 	movi	r3,22
8110e108:	2025883a 	mov	r18,r4
8110e10c:	18807f2e 	bgeu	r3,r2,8110e30c <_malloc_r+0x240>
8110e110:	047ffe04 	movi	r17,-8
8110e114:	1462703a 	and	r17,r2,r17
8110e118:	8800a316 	blt	r17,zero,8110e3a8 <_malloc_r+0x2dc>
8110e11c:	8940a236 	bltu	r17,r5,8110e3a8 <_malloc_r+0x2dc>
8110e120:	112403c0 	call	8112403c <__malloc_lock>
8110e124:	00807dc4 	movi	r2,503
8110e128:	1441e92e 	bgeu	r2,r17,8110e8d0 <_malloc_r+0x804>
8110e12c:	8804d27a 	srli	r2,r17,9
8110e130:	1000a126 	beq	r2,zero,8110e3b8 <_malloc_r+0x2ec>
8110e134:	00c00104 	movi	r3,4
8110e138:	18811e36 	bltu	r3,r2,8110e5b4 <_malloc_r+0x4e8>
8110e13c:	8804d1ba 	srli	r2,r17,6
8110e140:	12000e44 	addi	r8,r2,57
8110e144:	11c00e04 	addi	r7,r2,56
8110e148:	4209883a 	add	r4,r8,r8
8110e14c:	04e04534 	movhi	r19,33044
8110e150:	2109883a 	add	r4,r4,r4
8110e154:	9cedc404 	addi	r19,r19,-18672
8110e158:	2109883a 	add	r4,r4,r4
8110e15c:	9909883a 	add	r4,r19,r4
8110e160:	24000117 	ldw	r16,4(r4)
8110e164:	213ffe04 	addi	r4,r4,-8
8110e168:	24009726 	beq	r4,r16,8110e3c8 <_malloc_r+0x2fc>
8110e16c:	80800117 	ldw	r2,4(r16)
8110e170:	01bfff04 	movi	r6,-4
8110e174:	014003c4 	movi	r5,15
8110e178:	1184703a 	and	r2,r2,r6
8110e17c:	1447c83a 	sub	r3,r2,r17
8110e180:	28c00716 	blt	r5,r3,8110e1a0 <_malloc_r+0xd4>
8110e184:	1800920e 	bge	r3,zero,8110e3d0 <_malloc_r+0x304>
8110e188:	84000317 	ldw	r16,12(r16)
8110e18c:	24008e26 	beq	r4,r16,8110e3c8 <_malloc_r+0x2fc>
8110e190:	80800117 	ldw	r2,4(r16)
8110e194:	1184703a 	and	r2,r2,r6
8110e198:	1447c83a 	sub	r3,r2,r17
8110e19c:	28fff90e 	bge	r5,r3,8110e184 <__reset+0xfb0ee184>
8110e1a0:	3809883a 	mov	r4,r7
8110e1a4:	01a04534 	movhi	r6,33044
8110e1a8:	9c000417 	ldw	r16,16(r19)
8110e1ac:	31adc404 	addi	r6,r6,-18672
8110e1b0:	32000204 	addi	r8,r6,8
8110e1b4:	82013426 	beq	r16,r8,8110e688 <_malloc_r+0x5bc>
8110e1b8:	80c00117 	ldw	r3,4(r16)
8110e1bc:	00bfff04 	movi	r2,-4
8110e1c0:	188e703a 	and	r7,r3,r2
8110e1c4:	3c45c83a 	sub	r2,r7,r17
8110e1c8:	00c003c4 	movi	r3,15
8110e1cc:	18811f16 	blt	r3,r2,8110e64c <_malloc_r+0x580>
8110e1d0:	32000515 	stw	r8,20(r6)
8110e1d4:	32000415 	stw	r8,16(r6)
8110e1d8:	10007f0e 	bge	r2,zero,8110e3d8 <_malloc_r+0x30c>
8110e1dc:	00807fc4 	movi	r2,511
8110e1e0:	11c0fd36 	bltu	r2,r7,8110e5d8 <_malloc_r+0x50c>
8110e1e4:	3806d0fa 	srli	r3,r7,3
8110e1e8:	01c00044 	movi	r7,1
8110e1ec:	30800117 	ldw	r2,4(r6)
8110e1f0:	19400044 	addi	r5,r3,1
8110e1f4:	294b883a 	add	r5,r5,r5
8110e1f8:	1807d0ba 	srai	r3,r3,2
8110e1fc:	294b883a 	add	r5,r5,r5
8110e200:	294b883a 	add	r5,r5,r5
8110e204:	298b883a 	add	r5,r5,r6
8110e208:	38c6983a 	sll	r3,r7,r3
8110e20c:	29c00017 	ldw	r7,0(r5)
8110e210:	2a7ffe04 	addi	r9,r5,-8
8110e214:	1886b03a 	or	r3,r3,r2
8110e218:	82400315 	stw	r9,12(r16)
8110e21c:	81c00215 	stw	r7,8(r16)
8110e220:	30c00115 	stw	r3,4(r6)
8110e224:	2c000015 	stw	r16,0(r5)
8110e228:	3c000315 	stw	r16,12(r7)
8110e22c:	2005d0ba 	srai	r2,r4,2
8110e230:	01400044 	movi	r5,1
8110e234:	288a983a 	sll	r5,r5,r2
8110e238:	19406f36 	bltu	r3,r5,8110e3f8 <_malloc_r+0x32c>
8110e23c:	28c4703a 	and	r2,r5,r3
8110e240:	10000a1e 	bne	r2,zero,8110e26c <_malloc_r+0x1a0>
8110e244:	00bfff04 	movi	r2,-4
8110e248:	294b883a 	add	r5,r5,r5
8110e24c:	2088703a 	and	r4,r4,r2
8110e250:	28c4703a 	and	r2,r5,r3
8110e254:	21000104 	addi	r4,r4,4
8110e258:	1000041e 	bne	r2,zero,8110e26c <_malloc_r+0x1a0>
8110e25c:	294b883a 	add	r5,r5,r5
8110e260:	28c4703a 	and	r2,r5,r3
8110e264:	21000104 	addi	r4,r4,4
8110e268:	103ffc26 	beq	r2,zero,8110e25c <__reset+0xfb0ee25c>
8110e26c:	02bfff04 	movi	r10,-4
8110e270:	024003c4 	movi	r9,15
8110e274:	21800044 	addi	r6,r4,1
8110e278:	318d883a 	add	r6,r6,r6
8110e27c:	318d883a 	add	r6,r6,r6
8110e280:	318d883a 	add	r6,r6,r6
8110e284:	998d883a 	add	r6,r19,r6
8110e288:	333ffe04 	addi	r12,r6,-8
8110e28c:	2017883a 	mov	r11,r4
8110e290:	31800104 	addi	r6,r6,4
8110e294:	34000017 	ldw	r16,0(r6)
8110e298:	31fffd04 	addi	r7,r6,-12
8110e29c:	81c0041e 	bne	r16,r7,8110e2b0 <_malloc_r+0x1e4>
8110e2a0:	0000fb06 	br	8110e690 <_malloc_r+0x5c4>
8110e2a4:	1801030e 	bge	r3,zero,8110e6b4 <_malloc_r+0x5e8>
8110e2a8:	84000317 	ldw	r16,12(r16)
8110e2ac:	81c0f826 	beq	r16,r7,8110e690 <_malloc_r+0x5c4>
8110e2b0:	80800117 	ldw	r2,4(r16)
8110e2b4:	1284703a 	and	r2,r2,r10
8110e2b8:	1447c83a 	sub	r3,r2,r17
8110e2bc:	48fff90e 	bge	r9,r3,8110e2a4 <__reset+0xfb0ee2a4>
8110e2c0:	80800317 	ldw	r2,12(r16)
8110e2c4:	81000217 	ldw	r4,8(r16)
8110e2c8:	89400054 	ori	r5,r17,1
8110e2cc:	81400115 	stw	r5,4(r16)
8110e2d0:	20800315 	stw	r2,12(r4)
8110e2d4:	11000215 	stw	r4,8(r2)
8110e2d8:	8463883a 	add	r17,r16,r17
8110e2dc:	9c400515 	stw	r17,20(r19)
8110e2e0:	9c400415 	stw	r17,16(r19)
8110e2e4:	18800054 	ori	r2,r3,1
8110e2e8:	88800115 	stw	r2,4(r17)
8110e2ec:	8a000315 	stw	r8,12(r17)
8110e2f0:	8a000215 	stw	r8,8(r17)
8110e2f4:	88e3883a 	add	r17,r17,r3
8110e2f8:	88c00015 	stw	r3,0(r17)
8110e2fc:	9009883a 	mov	r4,r18
8110e300:	11241640 	call	81124164 <__malloc_unlock>
8110e304:	80800204 	addi	r2,r16,8
8110e308:	00001b06 	br	8110e378 <_malloc_r+0x2ac>
8110e30c:	04400404 	movi	r17,16
8110e310:	89402536 	bltu	r17,r5,8110e3a8 <_malloc_r+0x2dc>
8110e314:	112403c0 	call	8112403c <__malloc_lock>
8110e318:	00800184 	movi	r2,6
8110e31c:	01000084 	movi	r4,2
8110e320:	04e04534 	movhi	r19,33044
8110e324:	1085883a 	add	r2,r2,r2
8110e328:	9cedc404 	addi	r19,r19,-18672
8110e32c:	1085883a 	add	r2,r2,r2
8110e330:	9885883a 	add	r2,r19,r2
8110e334:	14000117 	ldw	r16,4(r2)
8110e338:	10fffe04 	addi	r3,r2,-8
8110e33c:	80c0d926 	beq	r16,r3,8110e6a4 <_malloc_r+0x5d8>
8110e340:	80c00117 	ldw	r3,4(r16)
8110e344:	81000317 	ldw	r4,12(r16)
8110e348:	00bfff04 	movi	r2,-4
8110e34c:	1884703a 	and	r2,r3,r2
8110e350:	81400217 	ldw	r5,8(r16)
8110e354:	8085883a 	add	r2,r16,r2
8110e358:	10c00117 	ldw	r3,4(r2)
8110e35c:	29000315 	stw	r4,12(r5)
8110e360:	21400215 	stw	r5,8(r4)
8110e364:	18c00054 	ori	r3,r3,1
8110e368:	10c00115 	stw	r3,4(r2)
8110e36c:	9009883a 	mov	r4,r18
8110e370:	11241640 	call	81124164 <__malloc_unlock>
8110e374:	80800204 	addi	r2,r16,8
8110e378:	dfc00a17 	ldw	ra,40(sp)
8110e37c:	df000917 	ldw	fp,36(sp)
8110e380:	ddc00817 	ldw	r23,32(sp)
8110e384:	dd800717 	ldw	r22,28(sp)
8110e388:	dd400617 	ldw	r21,24(sp)
8110e38c:	dd000517 	ldw	r20,20(sp)
8110e390:	dcc00417 	ldw	r19,16(sp)
8110e394:	dc800317 	ldw	r18,12(sp)
8110e398:	dc400217 	ldw	r17,8(sp)
8110e39c:	dc000117 	ldw	r16,4(sp)
8110e3a0:	dec00b04 	addi	sp,sp,44
8110e3a4:	f800283a 	ret
8110e3a8:	00800304 	movi	r2,12
8110e3ac:	90800015 	stw	r2,0(r18)
8110e3b0:	0005883a 	mov	r2,zero
8110e3b4:	003ff006 	br	8110e378 <__reset+0xfb0ee378>
8110e3b8:	01002004 	movi	r4,128
8110e3bc:	02001004 	movi	r8,64
8110e3c0:	01c00fc4 	movi	r7,63
8110e3c4:	003f6106 	br	8110e14c <__reset+0xfb0ee14c>
8110e3c8:	4009883a 	mov	r4,r8
8110e3cc:	003f7506 	br	8110e1a4 <__reset+0xfb0ee1a4>
8110e3d0:	81000317 	ldw	r4,12(r16)
8110e3d4:	003fde06 	br	8110e350 <__reset+0xfb0ee350>
8110e3d8:	81c5883a 	add	r2,r16,r7
8110e3dc:	11400117 	ldw	r5,4(r2)
8110e3e0:	9009883a 	mov	r4,r18
8110e3e4:	29400054 	ori	r5,r5,1
8110e3e8:	11400115 	stw	r5,4(r2)
8110e3ec:	11241640 	call	81124164 <__malloc_unlock>
8110e3f0:	80800204 	addi	r2,r16,8
8110e3f4:	003fe006 	br	8110e378 <__reset+0xfb0ee378>
8110e3f8:	9c000217 	ldw	r16,8(r19)
8110e3fc:	00bfff04 	movi	r2,-4
8110e400:	85800117 	ldw	r22,4(r16)
8110e404:	b0ac703a 	and	r22,r22,r2
8110e408:	b4400336 	bltu	r22,r17,8110e418 <_malloc_r+0x34c>
8110e40c:	b445c83a 	sub	r2,r22,r17
8110e410:	00c003c4 	movi	r3,15
8110e414:	18805d16 	blt	r3,r2,8110e58c <_malloc_r+0x4c0>
8110e418:	05e04534 	movhi	r23,33044
8110e41c:	00a04534 	movhi	r2,33044
8110e420:	10b44704 	addi	r2,r2,-12004
8110e424:	bdf3e504 	addi	r23,r23,-12396
8110e428:	15400017 	ldw	r21,0(r2)
8110e42c:	b8c00017 	ldw	r3,0(r23)
8110e430:	00bfffc4 	movi	r2,-1
8110e434:	858d883a 	add	r6,r16,r22
8110e438:	8d6b883a 	add	r21,r17,r21
8110e43c:	1880ea26 	beq	r3,r2,8110e7e8 <_malloc_r+0x71c>
8110e440:	ad4403c4 	addi	r21,r21,4111
8110e444:	00bc0004 	movi	r2,-4096
8110e448:	a8aa703a 	and	r21,r21,r2
8110e44c:	a80b883a 	mov	r5,r21
8110e450:	9009883a 	mov	r4,r18
8110e454:	d9800015 	stw	r6,0(sp)
8110e458:	110ef300 	call	8110ef30 <_sbrk_r>
8110e45c:	1029883a 	mov	r20,r2
8110e460:	00bfffc4 	movi	r2,-1
8110e464:	d9800017 	ldw	r6,0(sp)
8110e468:	a080e826 	beq	r20,r2,8110e80c <_malloc_r+0x740>
8110e46c:	a180a636 	bltu	r20,r6,8110e708 <_malloc_r+0x63c>
8110e470:	07204534 	movhi	fp,33044
8110e474:	e734a604 	addi	fp,fp,-11624
8110e478:	e0800017 	ldw	r2,0(fp)
8110e47c:	a887883a 	add	r3,r21,r2
8110e480:	e0c00015 	stw	r3,0(fp)
8110e484:	3500e626 	beq	r6,r20,8110e820 <_malloc_r+0x754>
8110e488:	b9000017 	ldw	r4,0(r23)
8110e48c:	00bfffc4 	movi	r2,-1
8110e490:	2080ee26 	beq	r4,r2,8110e84c <_malloc_r+0x780>
8110e494:	a185c83a 	sub	r2,r20,r6
8110e498:	10c5883a 	add	r2,r2,r3
8110e49c:	e0800015 	stw	r2,0(fp)
8110e4a0:	a0c001cc 	andi	r3,r20,7
8110e4a4:	1800bc26 	beq	r3,zero,8110e798 <_malloc_r+0x6cc>
8110e4a8:	a0e9c83a 	sub	r20,r20,r3
8110e4ac:	00840204 	movi	r2,4104
8110e4b0:	a5000204 	addi	r20,r20,8
8110e4b4:	10c7c83a 	sub	r3,r2,r3
8110e4b8:	a545883a 	add	r2,r20,r21
8110e4bc:	1083ffcc 	andi	r2,r2,4095
8110e4c0:	18abc83a 	sub	r21,r3,r2
8110e4c4:	a80b883a 	mov	r5,r21
8110e4c8:	9009883a 	mov	r4,r18
8110e4cc:	110ef300 	call	8110ef30 <_sbrk_r>
8110e4d0:	00ffffc4 	movi	r3,-1
8110e4d4:	10c0e126 	beq	r2,r3,8110e85c <_malloc_r+0x790>
8110e4d8:	1505c83a 	sub	r2,r2,r20
8110e4dc:	1545883a 	add	r2,r2,r21
8110e4e0:	10800054 	ori	r2,r2,1
8110e4e4:	e0c00017 	ldw	r3,0(fp)
8110e4e8:	9d000215 	stw	r20,8(r19)
8110e4ec:	a0800115 	stw	r2,4(r20)
8110e4f0:	a8c7883a 	add	r3,r21,r3
8110e4f4:	e0c00015 	stw	r3,0(fp)
8110e4f8:	84c00e26 	beq	r16,r19,8110e534 <_malloc_r+0x468>
8110e4fc:	018003c4 	movi	r6,15
8110e500:	3580a72e 	bgeu	r6,r22,8110e7a0 <_malloc_r+0x6d4>
8110e504:	81400117 	ldw	r5,4(r16)
8110e508:	013ffe04 	movi	r4,-8
8110e50c:	b0bffd04 	addi	r2,r22,-12
8110e510:	1104703a 	and	r2,r2,r4
8110e514:	2900004c 	andi	r4,r5,1
8110e518:	2088b03a 	or	r4,r4,r2
8110e51c:	81000115 	stw	r4,4(r16)
8110e520:	01400144 	movi	r5,5
8110e524:	8089883a 	add	r4,r16,r2
8110e528:	21400115 	stw	r5,4(r4)
8110e52c:	21400215 	stw	r5,8(r4)
8110e530:	3080cd36 	bltu	r6,r2,8110e868 <_malloc_r+0x79c>
8110e534:	00a04534 	movhi	r2,33044
8110e538:	10b44604 	addi	r2,r2,-12008
8110e53c:	11000017 	ldw	r4,0(r2)
8110e540:	20c0012e 	bgeu	r4,r3,8110e548 <_malloc_r+0x47c>
8110e544:	10c00015 	stw	r3,0(r2)
8110e548:	00a04534 	movhi	r2,33044
8110e54c:	10b44504 	addi	r2,r2,-12012
8110e550:	11000017 	ldw	r4,0(r2)
8110e554:	9c000217 	ldw	r16,8(r19)
8110e558:	20c0012e 	bgeu	r4,r3,8110e560 <_malloc_r+0x494>
8110e55c:	10c00015 	stw	r3,0(r2)
8110e560:	80c00117 	ldw	r3,4(r16)
8110e564:	00bfff04 	movi	r2,-4
8110e568:	1886703a 	and	r3,r3,r2
8110e56c:	1c45c83a 	sub	r2,r3,r17
8110e570:	1c400236 	bltu	r3,r17,8110e57c <_malloc_r+0x4b0>
8110e574:	00c003c4 	movi	r3,15
8110e578:	18800416 	blt	r3,r2,8110e58c <_malloc_r+0x4c0>
8110e57c:	9009883a 	mov	r4,r18
8110e580:	11241640 	call	81124164 <__malloc_unlock>
8110e584:	0005883a 	mov	r2,zero
8110e588:	003f7b06 	br	8110e378 <__reset+0xfb0ee378>
8110e58c:	88c00054 	ori	r3,r17,1
8110e590:	80c00115 	stw	r3,4(r16)
8110e594:	8463883a 	add	r17,r16,r17
8110e598:	10800054 	ori	r2,r2,1
8110e59c:	9c400215 	stw	r17,8(r19)
8110e5a0:	88800115 	stw	r2,4(r17)
8110e5a4:	9009883a 	mov	r4,r18
8110e5a8:	11241640 	call	81124164 <__malloc_unlock>
8110e5ac:	80800204 	addi	r2,r16,8
8110e5b0:	003f7106 	br	8110e378 <__reset+0xfb0ee378>
8110e5b4:	00c00504 	movi	r3,20
8110e5b8:	18804a2e 	bgeu	r3,r2,8110e6e4 <_malloc_r+0x618>
8110e5bc:	00c01504 	movi	r3,84
8110e5c0:	18806e36 	bltu	r3,r2,8110e77c <_malloc_r+0x6b0>
8110e5c4:	8804d33a 	srli	r2,r17,12
8110e5c8:	12001bc4 	addi	r8,r2,111
8110e5cc:	11c01b84 	addi	r7,r2,110
8110e5d0:	4209883a 	add	r4,r8,r8
8110e5d4:	003edd06 	br	8110e14c <__reset+0xfb0ee14c>
8110e5d8:	3804d27a 	srli	r2,r7,9
8110e5dc:	00c00104 	movi	r3,4
8110e5e0:	1880442e 	bgeu	r3,r2,8110e6f4 <_malloc_r+0x628>
8110e5e4:	00c00504 	movi	r3,20
8110e5e8:	18808136 	bltu	r3,r2,8110e7f0 <_malloc_r+0x724>
8110e5ec:	11401704 	addi	r5,r2,92
8110e5f0:	10c016c4 	addi	r3,r2,91
8110e5f4:	294b883a 	add	r5,r5,r5
8110e5f8:	294b883a 	add	r5,r5,r5
8110e5fc:	294b883a 	add	r5,r5,r5
8110e600:	994b883a 	add	r5,r19,r5
8110e604:	28800017 	ldw	r2,0(r5)
8110e608:	01a04534 	movhi	r6,33044
8110e60c:	297ffe04 	addi	r5,r5,-8
8110e610:	31adc404 	addi	r6,r6,-18672
8110e614:	28806526 	beq	r5,r2,8110e7ac <_malloc_r+0x6e0>
8110e618:	01bfff04 	movi	r6,-4
8110e61c:	10c00117 	ldw	r3,4(r2)
8110e620:	1986703a 	and	r3,r3,r6
8110e624:	38c0022e 	bgeu	r7,r3,8110e630 <_malloc_r+0x564>
8110e628:	10800217 	ldw	r2,8(r2)
8110e62c:	28bffb1e 	bne	r5,r2,8110e61c <__reset+0xfb0ee61c>
8110e630:	11400317 	ldw	r5,12(r2)
8110e634:	98c00117 	ldw	r3,4(r19)
8110e638:	81400315 	stw	r5,12(r16)
8110e63c:	80800215 	stw	r2,8(r16)
8110e640:	2c000215 	stw	r16,8(r5)
8110e644:	14000315 	stw	r16,12(r2)
8110e648:	003ef806 	br	8110e22c <__reset+0xfb0ee22c>
8110e64c:	88c00054 	ori	r3,r17,1
8110e650:	80c00115 	stw	r3,4(r16)
8110e654:	8463883a 	add	r17,r16,r17
8110e658:	34400515 	stw	r17,20(r6)
8110e65c:	34400415 	stw	r17,16(r6)
8110e660:	10c00054 	ori	r3,r2,1
8110e664:	8a000315 	stw	r8,12(r17)
8110e668:	8a000215 	stw	r8,8(r17)
8110e66c:	88c00115 	stw	r3,4(r17)
8110e670:	88a3883a 	add	r17,r17,r2
8110e674:	88800015 	stw	r2,0(r17)
8110e678:	9009883a 	mov	r4,r18
8110e67c:	11241640 	call	81124164 <__malloc_unlock>
8110e680:	80800204 	addi	r2,r16,8
8110e684:	003f3c06 	br	8110e378 <__reset+0xfb0ee378>
8110e688:	30c00117 	ldw	r3,4(r6)
8110e68c:	003ee706 	br	8110e22c <__reset+0xfb0ee22c>
8110e690:	5ac00044 	addi	r11,r11,1
8110e694:	588000cc 	andi	r2,r11,3
8110e698:	31800204 	addi	r6,r6,8
8110e69c:	103efd1e 	bne	r2,zero,8110e294 <__reset+0xfb0ee294>
8110e6a0:	00002406 	br	8110e734 <_malloc_r+0x668>
8110e6a4:	14000317 	ldw	r16,12(r2)
8110e6a8:	143f251e 	bne	r2,r16,8110e340 <__reset+0xfb0ee340>
8110e6ac:	21000084 	addi	r4,r4,2
8110e6b0:	003ebc06 	br	8110e1a4 <__reset+0xfb0ee1a4>
8110e6b4:	8085883a 	add	r2,r16,r2
8110e6b8:	10c00117 	ldw	r3,4(r2)
8110e6bc:	81000317 	ldw	r4,12(r16)
8110e6c0:	81400217 	ldw	r5,8(r16)
8110e6c4:	18c00054 	ori	r3,r3,1
8110e6c8:	10c00115 	stw	r3,4(r2)
8110e6cc:	29000315 	stw	r4,12(r5)
8110e6d0:	21400215 	stw	r5,8(r4)
8110e6d4:	9009883a 	mov	r4,r18
8110e6d8:	11241640 	call	81124164 <__malloc_unlock>
8110e6dc:	80800204 	addi	r2,r16,8
8110e6e0:	003f2506 	br	8110e378 <__reset+0xfb0ee378>
8110e6e4:	12001704 	addi	r8,r2,92
8110e6e8:	11c016c4 	addi	r7,r2,91
8110e6ec:	4209883a 	add	r4,r8,r8
8110e6f0:	003e9606 	br	8110e14c <__reset+0xfb0ee14c>
8110e6f4:	3804d1ba 	srli	r2,r7,6
8110e6f8:	11400e44 	addi	r5,r2,57
8110e6fc:	10c00e04 	addi	r3,r2,56
8110e700:	294b883a 	add	r5,r5,r5
8110e704:	003fbc06 	br	8110e5f8 <__reset+0xfb0ee5f8>
8110e708:	84ff5926 	beq	r16,r19,8110e470 <__reset+0xfb0ee470>
8110e70c:	00a04534 	movhi	r2,33044
8110e710:	10adc404 	addi	r2,r2,-18672
8110e714:	14000217 	ldw	r16,8(r2)
8110e718:	00bfff04 	movi	r2,-4
8110e71c:	80c00117 	ldw	r3,4(r16)
8110e720:	1886703a 	and	r3,r3,r2
8110e724:	003f9106 	br	8110e56c <__reset+0xfb0ee56c>
8110e728:	60800217 	ldw	r2,8(r12)
8110e72c:	213fffc4 	addi	r4,r4,-1
8110e730:	1300651e 	bne	r2,r12,8110e8c8 <_malloc_r+0x7fc>
8110e734:	208000cc 	andi	r2,r4,3
8110e738:	633ffe04 	addi	r12,r12,-8
8110e73c:	103ffa1e 	bne	r2,zero,8110e728 <__reset+0xfb0ee728>
8110e740:	98800117 	ldw	r2,4(r19)
8110e744:	0146303a 	nor	r3,zero,r5
8110e748:	1884703a 	and	r2,r3,r2
8110e74c:	98800115 	stw	r2,4(r19)
8110e750:	294b883a 	add	r5,r5,r5
8110e754:	117f2836 	bltu	r2,r5,8110e3f8 <__reset+0xfb0ee3f8>
8110e758:	283f2726 	beq	r5,zero,8110e3f8 <__reset+0xfb0ee3f8>
8110e75c:	2886703a 	and	r3,r5,r2
8110e760:	5809883a 	mov	r4,r11
8110e764:	183ec31e 	bne	r3,zero,8110e274 <__reset+0xfb0ee274>
8110e768:	294b883a 	add	r5,r5,r5
8110e76c:	2886703a 	and	r3,r5,r2
8110e770:	21000104 	addi	r4,r4,4
8110e774:	183ffc26 	beq	r3,zero,8110e768 <__reset+0xfb0ee768>
8110e778:	003ebe06 	br	8110e274 <__reset+0xfb0ee274>
8110e77c:	00c05504 	movi	r3,340
8110e780:	18801236 	bltu	r3,r2,8110e7cc <_malloc_r+0x700>
8110e784:	8804d3fa 	srli	r2,r17,15
8110e788:	12001e04 	addi	r8,r2,120
8110e78c:	11c01dc4 	addi	r7,r2,119
8110e790:	4209883a 	add	r4,r8,r8
8110e794:	003e6d06 	br	8110e14c <__reset+0xfb0ee14c>
8110e798:	00c40004 	movi	r3,4096
8110e79c:	003f4606 	br	8110e4b8 <__reset+0xfb0ee4b8>
8110e7a0:	00800044 	movi	r2,1
8110e7a4:	a0800115 	stw	r2,4(r20)
8110e7a8:	003f7406 	br	8110e57c <__reset+0xfb0ee57c>
8110e7ac:	1805d0ba 	srai	r2,r3,2
8110e7b0:	01c00044 	movi	r7,1
8110e7b4:	30c00117 	ldw	r3,4(r6)
8110e7b8:	388e983a 	sll	r7,r7,r2
8110e7bc:	2805883a 	mov	r2,r5
8110e7c0:	38c6b03a 	or	r3,r7,r3
8110e7c4:	30c00115 	stw	r3,4(r6)
8110e7c8:	003f9b06 	br	8110e638 <__reset+0xfb0ee638>
8110e7cc:	00c15504 	movi	r3,1364
8110e7d0:	18801a36 	bltu	r3,r2,8110e83c <_malloc_r+0x770>
8110e7d4:	8804d4ba 	srli	r2,r17,18
8110e7d8:	12001f44 	addi	r8,r2,125
8110e7dc:	11c01f04 	addi	r7,r2,124
8110e7e0:	4209883a 	add	r4,r8,r8
8110e7e4:	003e5906 	br	8110e14c <__reset+0xfb0ee14c>
8110e7e8:	ad400404 	addi	r21,r21,16
8110e7ec:	003f1706 	br	8110e44c <__reset+0xfb0ee44c>
8110e7f0:	00c01504 	movi	r3,84
8110e7f4:	18802336 	bltu	r3,r2,8110e884 <_malloc_r+0x7b8>
8110e7f8:	3804d33a 	srli	r2,r7,12
8110e7fc:	11401bc4 	addi	r5,r2,111
8110e800:	10c01b84 	addi	r3,r2,110
8110e804:	294b883a 	add	r5,r5,r5
8110e808:	003f7b06 	br	8110e5f8 <__reset+0xfb0ee5f8>
8110e80c:	9c000217 	ldw	r16,8(r19)
8110e810:	00bfff04 	movi	r2,-4
8110e814:	80c00117 	ldw	r3,4(r16)
8110e818:	1886703a 	and	r3,r3,r2
8110e81c:	003f5306 	br	8110e56c <__reset+0xfb0ee56c>
8110e820:	3083ffcc 	andi	r2,r6,4095
8110e824:	103f181e 	bne	r2,zero,8110e488 <__reset+0xfb0ee488>
8110e828:	99000217 	ldw	r4,8(r19)
8110e82c:	b545883a 	add	r2,r22,r21
8110e830:	10800054 	ori	r2,r2,1
8110e834:	20800115 	stw	r2,4(r4)
8110e838:	003f3e06 	br	8110e534 <__reset+0xfb0ee534>
8110e83c:	01003f84 	movi	r4,254
8110e840:	02001fc4 	movi	r8,127
8110e844:	01c01f84 	movi	r7,126
8110e848:	003e4006 	br	8110e14c <__reset+0xfb0ee14c>
8110e84c:	00a04534 	movhi	r2,33044
8110e850:	10b3e504 	addi	r2,r2,-12396
8110e854:	15000015 	stw	r20,0(r2)
8110e858:	003f1106 	br	8110e4a0 <__reset+0xfb0ee4a0>
8110e85c:	00800044 	movi	r2,1
8110e860:	002b883a 	mov	r21,zero
8110e864:	003f1f06 	br	8110e4e4 <__reset+0xfb0ee4e4>
8110e868:	81400204 	addi	r5,r16,8
8110e86c:	9009883a 	mov	r4,r18
8110e870:	11178440 	call	81117844 <_free_r>
8110e874:	00a04534 	movhi	r2,33044
8110e878:	10b4a604 	addi	r2,r2,-11624
8110e87c:	10c00017 	ldw	r3,0(r2)
8110e880:	003f2c06 	br	8110e534 <__reset+0xfb0ee534>
8110e884:	00c05504 	movi	r3,340
8110e888:	18800536 	bltu	r3,r2,8110e8a0 <_malloc_r+0x7d4>
8110e88c:	3804d3fa 	srli	r2,r7,15
8110e890:	11401e04 	addi	r5,r2,120
8110e894:	10c01dc4 	addi	r3,r2,119
8110e898:	294b883a 	add	r5,r5,r5
8110e89c:	003f5606 	br	8110e5f8 <__reset+0xfb0ee5f8>
8110e8a0:	00c15504 	movi	r3,1364
8110e8a4:	18800536 	bltu	r3,r2,8110e8bc <_malloc_r+0x7f0>
8110e8a8:	3804d4ba 	srli	r2,r7,18
8110e8ac:	11401f44 	addi	r5,r2,125
8110e8b0:	10c01f04 	addi	r3,r2,124
8110e8b4:	294b883a 	add	r5,r5,r5
8110e8b8:	003f4f06 	br	8110e5f8 <__reset+0xfb0ee5f8>
8110e8bc:	01403f84 	movi	r5,254
8110e8c0:	00c01f84 	movi	r3,126
8110e8c4:	003f4c06 	br	8110e5f8 <__reset+0xfb0ee5f8>
8110e8c8:	98800117 	ldw	r2,4(r19)
8110e8cc:	003fa006 	br	8110e750 <__reset+0xfb0ee750>
8110e8d0:	8808d0fa 	srli	r4,r17,3
8110e8d4:	20800044 	addi	r2,r4,1
8110e8d8:	1085883a 	add	r2,r2,r2
8110e8dc:	003e9006 	br	8110e320 <__reset+0xfb0ee320>

8110e8e0 <memcpy>:
8110e8e0:	defffd04 	addi	sp,sp,-12
8110e8e4:	de00012e 	bgeu	sp,et,8110e8ec <memcpy+0xc>
8110e8e8:	003b68fa 	trap	3
8110e8ec:	00c003c4 	movi	r3,15
8110e8f0:	dfc00215 	stw	ra,8(sp)
8110e8f4:	dc400115 	stw	r17,4(sp)
8110e8f8:	dc000015 	stw	r16,0(sp)
8110e8fc:	2005883a 	mov	r2,r4
8110e900:	1980452e 	bgeu	r3,r6,8110ea18 <memcpy+0x138>
8110e904:	2906b03a 	or	r3,r5,r4
8110e908:	18c000cc 	andi	r3,r3,3
8110e90c:	1800441e 	bne	r3,zero,8110ea20 <memcpy+0x140>
8110e910:	347ffc04 	addi	r17,r6,-16
8110e914:	8822d13a 	srli	r17,r17,4
8110e918:	28c00104 	addi	r3,r5,4
8110e91c:	23400104 	addi	r13,r4,4
8110e920:	8820913a 	slli	r16,r17,4
8110e924:	2b000204 	addi	r12,r5,8
8110e928:	22c00204 	addi	r11,r4,8
8110e92c:	84000504 	addi	r16,r16,20
8110e930:	2a800304 	addi	r10,r5,12
8110e934:	22400304 	addi	r9,r4,12
8110e938:	2c21883a 	add	r16,r5,r16
8110e93c:	2811883a 	mov	r8,r5
8110e940:	200f883a 	mov	r7,r4
8110e944:	41000017 	ldw	r4,0(r8)
8110e948:	1fc00017 	ldw	ra,0(r3)
8110e94c:	63c00017 	ldw	r15,0(r12)
8110e950:	39000015 	stw	r4,0(r7)
8110e954:	53800017 	ldw	r14,0(r10)
8110e958:	6fc00015 	stw	ra,0(r13)
8110e95c:	5bc00015 	stw	r15,0(r11)
8110e960:	4b800015 	stw	r14,0(r9)
8110e964:	18c00404 	addi	r3,r3,16
8110e968:	39c00404 	addi	r7,r7,16
8110e96c:	42000404 	addi	r8,r8,16
8110e970:	6b400404 	addi	r13,r13,16
8110e974:	63000404 	addi	r12,r12,16
8110e978:	5ac00404 	addi	r11,r11,16
8110e97c:	52800404 	addi	r10,r10,16
8110e980:	4a400404 	addi	r9,r9,16
8110e984:	1c3fef1e 	bne	r3,r16,8110e944 <__reset+0xfb0ee944>
8110e988:	89c00044 	addi	r7,r17,1
8110e98c:	380e913a 	slli	r7,r7,4
8110e990:	310003cc 	andi	r4,r6,15
8110e994:	02c000c4 	movi	r11,3
8110e998:	11c7883a 	add	r3,r2,r7
8110e99c:	29cb883a 	add	r5,r5,r7
8110e9a0:	5900212e 	bgeu	r11,r4,8110ea28 <memcpy+0x148>
8110e9a4:	1813883a 	mov	r9,r3
8110e9a8:	2811883a 	mov	r8,r5
8110e9ac:	200f883a 	mov	r7,r4
8110e9b0:	42800017 	ldw	r10,0(r8)
8110e9b4:	4a400104 	addi	r9,r9,4
8110e9b8:	39ffff04 	addi	r7,r7,-4
8110e9bc:	4abfff15 	stw	r10,-4(r9)
8110e9c0:	42000104 	addi	r8,r8,4
8110e9c4:	59fffa36 	bltu	r11,r7,8110e9b0 <__reset+0xfb0ee9b0>
8110e9c8:	213fff04 	addi	r4,r4,-4
8110e9cc:	2008d0ba 	srli	r4,r4,2
8110e9d0:	318000cc 	andi	r6,r6,3
8110e9d4:	21000044 	addi	r4,r4,1
8110e9d8:	2109883a 	add	r4,r4,r4
8110e9dc:	2109883a 	add	r4,r4,r4
8110e9e0:	1907883a 	add	r3,r3,r4
8110e9e4:	290b883a 	add	r5,r5,r4
8110e9e8:	30000626 	beq	r6,zero,8110ea04 <memcpy+0x124>
8110e9ec:	198d883a 	add	r6,r3,r6
8110e9f0:	29c00003 	ldbu	r7,0(r5)
8110e9f4:	18c00044 	addi	r3,r3,1
8110e9f8:	29400044 	addi	r5,r5,1
8110e9fc:	19ffffc5 	stb	r7,-1(r3)
8110ea00:	19bffb1e 	bne	r3,r6,8110e9f0 <__reset+0xfb0ee9f0>
8110ea04:	dfc00217 	ldw	ra,8(sp)
8110ea08:	dc400117 	ldw	r17,4(sp)
8110ea0c:	dc000017 	ldw	r16,0(sp)
8110ea10:	dec00304 	addi	sp,sp,12
8110ea14:	f800283a 	ret
8110ea18:	2007883a 	mov	r3,r4
8110ea1c:	003ff206 	br	8110e9e8 <__reset+0xfb0ee9e8>
8110ea20:	2007883a 	mov	r3,r4
8110ea24:	003ff106 	br	8110e9ec <__reset+0xfb0ee9ec>
8110ea28:	200d883a 	mov	r6,r4
8110ea2c:	003fee06 	br	8110e9e8 <__reset+0xfb0ee9e8>

8110ea30 <memset>:
8110ea30:	20c000cc 	andi	r3,r4,3
8110ea34:	2005883a 	mov	r2,r4
8110ea38:	18004426 	beq	r3,zero,8110eb4c <memset+0x11c>
8110ea3c:	31ffffc4 	addi	r7,r6,-1
8110ea40:	30004026 	beq	r6,zero,8110eb44 <memset+0x114>
8110ea44:	2813883a 	mov	r9,r5
8110ea48:	200d883a 	mov	r6,r4
8110ea4c:	2007883a 	mov	r3,r4
8110ea50:	00000406 	br	8110ea64 <memset+0x34>
8110ea54:	3a3fffc4 	addi	r8,r7,-1
8110ea58:	31800044 	addi	r6,r6,1
8110ea5c:	38003926 	beq	r7,zero,8110eb44 <memset+0x114>
8110ea60:	400f883a 	mov	r7,r8
8110ea64:	18c00044 	addi	r3,r3,1
8110ea68:	32400005 	stb	r9,0(r6)
8110ea6c:	1a0000cc 	andi	r8,r3,3
8110ea70:	403ff81e 	bne	r8,zero,8110ea54 <__reset+0xfb0eea54>
8110ea74:	010000c4 	movi	r4,3
8110ea78:	21c02d2e 	bgeu	r4,r7,8110eb30 <memset+0x100>
8110ea7c:	29003fcc 	andi	r4,r5,255
8110ea80:	200c923a 	slli	r6,r4,8
8110ea84:	3108b03a 	or	r4,r6,r4
8110ea88:	200c943a 	slli	r6,r4,16
8110ea8c:	218cb03a 	or	r6,r4,r6
8110ea90:	010003c4 	movi	r4,15
8110ea94:	21c0182e 	bgeu	r4,r7,8110eaf8 <memset+0xc8>
8110ea98:	3b3ffc04 	addi	r12,r7,-16
8110ea9c:	6018d13a 	srli	r12,r12,4
8110eaa0:	1a000104 	addi	r8,r3,4
8110eaa4:	1ac00204 	addi	r11,r3,8
8110eaa8:	6008913a 	slli	r4,r12,4
8110eaac:	1a800304 	addi	r10,r3,12
8110eab0:	1813883a 	mov	r9,r3
8110eab4:	21000504 	addi	r4,r4,20
8110eab8:	1909883a 	add	r4,r3,r4
8110eabc:	49800015 	stw	r6,0(r9)
8110eac0:	41800015 	stw	r6,0(r8)
8110eac4:	59800015 	stw	r6,0(r11)
8110eac8:	51800015 	stw	r6,0(r10)
8110eacc:	42000404 	addi	r8,r8,16
8110ead0:	4a400404 	addi	r9,r9,16
8110ead4:	5ac00404 	addi	r11,r11,16
8110ead8:	52800404 	addi	r10,r10,16
8110eadc:	413ff71e 	bne	r8,r4,8110eabc <__reset+0xfb0eeabc>
8110eae0:	63000044 	addi	r12,r12,1
8110eae4:	6018913a 	slli	r12,r12,4
8110eae8:	39c003cc 	andi	r7,r7,15
8110eaec:	010000c4 	movi	r4,3
8110eaf0:	1b07883a 	add	r3,r3,r12
8110eaf4:	21c00e2e 	bgeu	r4,r7,8110eb30 <memset+0x100>
8110eaf8:	1813883a 	mov	r9,r3
8110eafc:	3811883a 	mov	r8,r7
8110eb00:	010000c4 	movi	r4,3
8110eb04:	49800015 	stw	r6,0(r9)
8110eb08:	423fff04 	addi	r8,r8,-4
8110eb0c:	4a400104 	addi	r9,r9,4
8110eb10:	223ffc36 	bltu	r4,r8,8110eb04 <__reset+0xfb0eeb04>
8110eb14:	393fff04 	addi	r4,r7,-4
8110eb18:	2008d0ba 	srli	r4,r4,2
8110eb1c:	39c000cc 	andi	r7,r7,3
8110eb20:	21000044 	addi	r4,r4,1
8110eb24:	2109883a 	add	r4,r4,r4
8110eb28:	2109883a 	add	r4,r4,r4
8110eb2c:	1907883a 	add	r3,r3,r4
8110eb30:	38000526 	beq	r7,zero,8110eb48 <memset+0x118>
8110eb34:	19cf883a 	add	r7,r3,r7
8110eb38:	19400005 	stb	r5,0(r3)
8110eb3c:	18c00044 	addi	r3,r3,1
8110eb40:	38fffd1e 	bne	r7,r3,8110eb38 <__reset+0xfb0eeb38>
8110eb44:	f800283a 	ret
8110eb48:	f800283a 	ret
8110eb4c:	2007883a 	mov	r3,r4
8110eb50:	300f883a 	mov	r7,r6
8110eb54:	003fc706 	br	8110ea74 <__reset+0xfb0eea74>

8110eb58 <_open_r>:
8110eb58:	defffd04 	addi	sp,sp,-12
8110eb5c:	de00012e 	bgeu	sp,et,8110eb64 <_open_r+0xc>
8110eb60:	003b68fa 	trap	3
8110eb64:	2805883a 	mov	r2,r5
8110eb68:	dc000015 	stw	r16,0(sp)
8110eb6c:	04204534 	movhi	r16,33044
8110eb70:	dc400115 	stw	r17,4(sp)
8110eb74:	300b883a 	mov	r5,r6
8110eb78:	84344404 	addi	r16,r16,-12016
8110eb7c:	2023883a 	mov	r17,r4
8110eb80:	380d883a 	mov	r6,r7
8110eb84:	1009883a 	mov	r4,r2
8110eb88:	dfc00215 	stw	ra,8(sp)
8110eb8c:	80000015 	stw	zero,0(r16)
8110eb90:	11236c80 	call	811236c8 <open>
8110eb94:	00ffffc4 	movi	r3,-1
8110eb98:	10c00526 	beq	r2,r3,8110ebb0 <_open_r+0x58>
8110eb9c:	dfc00217 	ldw	ra,8(sp)
8110eba0:	dc400117 	ldw	r17,4(sp)
8110eba4:	dc000017 	ldw	r16,0(sp)
8110eba8:	dec00304 	addi	sp,sp,12
8110ebac:	f800283a 	ret
8110ebb0:	80c00017 	ldw	r3,0(r16)
8110ebb4:	183ff926 	beq	r3,zero,8110eb9c <__reset+0xfb0eeb9c>
8110ebb8:	88c00015 	stw	r3,0(r17)
8110ebbc:	003ff706 	br	8110eb9c <__reset+0xfb0eeb9c>

8110ebc0 <_printf_r>:
8110ebc0:	defffd04 	addi	sp,sp,-12
8110ebc4:	2805883a 	mov	r2,r5
8110ebc8:	de00012e 	bgeu	sp,et,8110ebd0 <_printf_r+0x10>
8110ebcc:	003b68fa 	trap	3
8110ebd0:	dfc00015 	stw	ra,0(sp)
8110ebd4:	d9800115 	stw	r6,4(sp)
8110ebd8:	d9c00215 	stw	r7,8(sp)
8110ebdc:	21400217 	ldw	r5,8(r4)
8110ebe0:	d9c00104 	addi	r7,sp,4
8110ebe4:	100d883a 	mov	r6,r2
8110ebe8:	11117500 	call	81111750 <___vfprintf_internal_r>
8110ebec:	dfc00017 	ldw	ra,0(sp)
8110ebf0:	dec00304 	addi	sp,sp,12
8110ebf4:	f800283a 	ret

8110ebf8 <printf>:
8110ebf8:	defffc04 	addi	sp,sp,-16
8110ebfc:	de00012e 	bgeu	sp,et,8110ec04 <printf+0xc>
8110ec00:	003b68fa 	trap	3
8110ec04:	dfc00015 	stw	ra,0(sp)
8110ec08:	d9400115 	stw	r5,4(sp)
8110ec0c:	d9800215 	stw	r6,8(sp)
8110ec10:	d9c00315 	stw	r7,12(sp)
8110ec14:	00a04534 	movhi	r2,33044
8110ec18:	10b3e404 	addi	r2,r2,-12400
8110ec1c:	10800017 	ldw	r2,0(r2)
8110ec20:	200b883a 	mov	r5,r4
8110ec24:	d9800104 	addi	r6,sp,4
8110ec28:	11000217 	ldw	r4,8(r2)
8110ec2c:	11139500 	call	81113950 <__vfprintf_internal>
8110ec30:	dfc00017 	ldw	ra,0(sp)
8110ec34:	dec00404 	addi	sp,sp,16
8110ec38:	f800283a 	ret

8110ec3c <_putchar_r>:
8110ec3c:	21800217 	ldw	r6,8(r4)
8110ec40:	11198701 	jmpi	81119870 <_putc_r>

8110ec44 <putchar>:
8110ec44:	00a04534 	movhi	r2,33044
8110ec48:	10b3e404 	addi	r2,r2,-12400
8110ec4c:	200b883a 	mov	r5,r4
8110ec50:	11000017 	ldw	r4,0(r2)
8110ec54:	21800217 	ldw	r6,8(r4)
8110ec58:	11198701 	jmpi	81119870 <_putc_r>

8110ec5c <_puts_r>:
8110ec5c:	defff604 	addi	sp,sp,-40
8110ec60:	de00012e 	bgeu	sp,et,8110ec68 <_puts_r+0xc>
8110ec64:	003b68fa 	trap	3
8110ec68:	dc000715 	stw	r16,28(sp)
8110ec6c:	2021883a 	mov	r16,r4
8110ec70:	2809883a 	mov	r4,r5
8110ec74:	dc400815 	stw	r17,32(sp)
8110ec78:	dfc00915 	stw	ra,36(sp)
8110ec7c:	2823883a 	mov	r17,r5
8110ec80:	110f27c0 	call	8110f27c <strlen>
8110ec84:	10c00044 	addi	r3,r2,1
8110ec88:	d8800115 	stw	r2,4(sp)
8110ec8c:	00a04534 	movhi	r2,33044
8110ec90:	10aad204 	addi	r2,r2,-21688
8110ec94:	d8800215 	stw	r2,8(sp)
8110ec98:	00800044 	movi	r2,1
8110ec9c:	d8800315 	stw	r2,12(sp)
8110eca0:	00800084 	movi	r2,2
8110eca4:	dc400015 	stw	r17,0(sp)
8110eca8:	d8c00615 	stw	r3,24(sp)
8110ecac:	dec00415 	stw	sp,16(sp)
8110ecb0:	d8800515 	stw	r2,20(sp)
8110ecb4:	80000226 	beq	r16,zero,8110ecc0 <_puts_r+0x64>
8110ecb8:	80800e17 	ldw	r2,56(r16)
8110ecbc:	10001426 	beq	r2,zero,8110ed10 <_puts_r+0xb4>
8110ecc0:	81400217 	ldw	r5,8(r16)
8110ecc4:	2880030b 	ldhu	r2,12(r5)
8110ecc8:	10c8000c 	andi	r3,r2,8192
8110eccc:	1800061e 	bne	r3,zero,8110ece8 <_puts_r+0x8c>
8110ecd0:	29001917 	ldw	r4,100(r5)
8110ecd4:	00f7ffc4 	movi	r3,-8193
8110ecd8:	10880014 	ori	r2,r2,8192
8110ecdc:	20c6703a 	and	r3,r4,r3
8110ece0:	2880030d 	sth	r2,12(r5)
8110ece4:	28c01915 	stw	r3,100(r5)
8110ece8:	d9800404 	addi	r6,sp,16
8110ecec:	8009883a 	mov	r4,r16
8110ecf0:	1117b5c0 	call	81117b5c <__sfvwrite_r>
8110ecf4:	1000091e 	bne	r2,zero,8110ed1c <_puts_r+0xc0>
8110ecf8:	00800284 	movi	r2,10
8110ecfc:	dfc00917 	ldw	ra,36(sp)
8110ed00:	dc400817 	ldw	r17,32(sp)
8110ed04:	dc000717 	ldw	r16,28(sp)
8110ed08:	dec00a04 	addi	sp,sp,40
8110ed0c:	f800283a 	ret
8110ed10:	8009883a 	mov	r4,r16
8110ed14:	11173ac0 	call	811173ac <__sinit>
8110ed18:	003fe906 	br	8110ecc0 <__reset+0xfb0eecc0>
8110ed1c:	00bfffc4 	movi	r2,-1
8110ed20:	003ff606 	br	8110ecfc <__reset+0xfb0eecfc>

8110ed24 <puts>:
8110ed24:	00a04534 	movhi	r2,33044
8110ed28:	10b3e404 	addi	r2,r2,-12400
8110ed2c:	200b883a 	mov	r5,r4
8110ed30:	11000017 	ldw	r4,0(r2)
8110ed34:	110ec5c1 	jmpi	8110ec5c <_puts_r>

8110ed38 <lflush>:
8110ed38:	2080030b 	ldhu	r2,12(r4)
8110ed3c:	00c00244 	movi	r3,9
8110ed40:	1080024c 	andi	r2,r2,9
8110ed44:	10c00226 	beq	r2,r3,8110ed50 <lflush+0x18>
8110ed48:	0005883a 	mov	r2,zero
8110ed4c:	f800283a 	ret
8110ed50:	11170141 	jmpi	81117014 <fflush>

8110ed54 <__srefill_r>:
8110ed54:	defffc04 	addi	sp,sp,-16
8110ed58:	de00012e 	bgeu	sp,et,8110ed60 <__srefill_r+0xc>
8110ed5c:	003b68fa 	trap	3
8110ed60:	dc400115 	stw	r17,4(sp)
8110ed64:	dc000015 	stw	r16,0(sp)
8110ed68:	dfc00315 	stw	ra,12(sp)
8110ed6c:	dc800215 	stw	r18,8(sp)
8110ed70:	2023883a 	mov	r17,r4
8110ed74:	2821883a 	mov	r16,r5
8110ed78:	20000226 	beq	r4,zero,8110ed84 <__srefill_r+0x30>
8110ed7c:	20800e17 	ldw	r2,56(r4)
8110ed80:	10003c26 	beq	r2,zero,8110ee74 <__srefill_r+0x120>
8110ed84:	80c0030b 	ldhu	r3,12(r16)
8110ed88:	1908000c 	andi	r4,r3,8192
8110ed8c:	1805883a 	mov	r2,r3
8110ed90:	2000071e 	bne	r4,zero,8110edb0 <__srefill_r+0x5c>
8110ed94:	81001917 	ldw	r4,100(r16)
8110ed98:	18880014 	ori	r2,r3,8192
8110ed9c:	00f7ffc4 	movi	r3,-8193
8110eda0:	20c8703a 	and	r4,r4,r3
8110eda4:	8080030d 	sth	r2,12(r16)
8110eda8:	1007883a 	mov	r3,r2
8110edac:	81001915 	stw	r4,100(r16)
8110edb0:	80000115 	stw	zero,4(r16)
8110edb4:	1100080c 	andi	r4,r2,32
8110edb8:	2000571e 	bne	r4,zero,8110ef18 <__srefill_r+0x1c4>
8110edbc:	1100010c 	andi	r4,r2,4
8110edc0:	20001f26 	beq	r4,zero,8110ee40 <__srefill_r+0xec>
8110edc4:	81400c17 	ldw	r5,48(r16)
8110edc8:	28000826 	beq	r5,zero,8110edec <__srefill_r+0x98>
8110edcc:	80801004 	addi	r2,r16,64
8110edd0:	28800226 	beq	r5,r2,8110eddc <__srefill_r+0x88>
8110edd4:	8809883a 	mov	r4,r17
8110edd8:	11178440 	call	81117844 <_free_r>
8110eddc:	80800f17 	ldw	r2,60(r16)
8110ede0:	80000c15 	stw	zero,48(r16)
8110ede4:	80800115 	stw	r2,4(r16)
8110ede8:	1000391e 	bne	r2,zero,8110eed0 <__srefill_r+0x17c>
8110edec:	80800417 	ldw	r2,16(r16)
8110edf0:	10004b26 	beq	r2,zero,8110ef20 <__srefill_r+0x1cc>
8110edf4:	8480030b 	ldhu	r18,12(r16)
8110edf8:	908000cc 	andi	r2,r18,3
8110edfc:	10001f1e 	bne	r2,zero,8110ee7c <__srefill_r+0x128>
8110ee00:	81800417 	ldw	r6,16(r16)
8110ee04:	80800817 	ldw	r2,32(r16)
8110ee08:	81c00517 	ldw	r7,20(r16)
8110ee0c:	81400717 	ldw	r5,28(r16)
8110ee10:	81800015 	stw	r6,0(r16)
8110ee14:	8809883a 	mov	r4,r17
8110ee18:	103ee83a 	callr	r2
8110ee1c:	80800115 	stw	r2,4(r16)
8110ee20:	00800e0e 	bge	zero,r2,8110ee5c <__srefill_r+0x108>
8110ee24:	0005883a 	mov	r2,zero
8110ee28:	dfc00317 	ldw	ra,12(sp)
8110ee2c:	dc800217 	ldw	r18,8(sp)
8110ee30:	dc400117 	ldw	r17,4(sp)
8110ee34:	dc000017 	ldw	r16,0(sp)
8110ee38:	dec00404 	addi	sp,sp,16
8110ee3c:	f800283a 	ret
8110ee40:	1100040c 	andi	r4,r2,16
8110ee44:	20003026 	beq	r4,zero,8110ef08 <__srefill_r+0x1b4>
8110ee48:	1080020c 	andi	r2,r2,8
8110ee4c:	1000241e 	bne	r2,zero,8110eee0 <__srefill_r+0x18c>
8110ee50:	18c00114 	ori	r3,r3,4
8110ee54:	80c0030d 	sth	r3,12(r16)
8110ee58:	003fe406 	br	8110edec <__reset+0xfb0eedec>
8110ee5c:	80c0030b 	ldhu	r3,12(r16)
8110ee60:	1000161e 	bne	r2,zero,8110eebc <__srefill_r+0x168>
8110ee64:	18c00814 	ori	r3,r3,32
8110ee68:	00bfffc4 	movi	r2,-1
8110ee6c:	80c0030d 	sth	r3,12(r16)
8110ee70:	003fed06 	br	8110ee28 <__reset+0xfb0eee28>
8110ee74:	11173ac0 	call	811173ac <__sinit>
8110ee78:	003fc206 	br	8110ed84 <__reset+0xfb0eed84>
8110ee7c:	00a04534 	movhi	r2,33044
8110ee80:	10b3e304 	addi	r2,r2,-12404
8110ee84:	11000017 	ldw	r4,0(r2)
8110ee88:	01604474 	movhi	r5,33041
8110ee8c:	00800044 	movi	r2,1
8110ee90:	297b4e04 	addi	r5,r5,-4808
8110ee94:	8080030d 	sth	r2,12(r16)
8110ee98:	11180200 	call	81118020 <_fwalk>
8110ee9c:	00800244 	movi	r2,9
8110eea0:	8480030d 	sth	r18,12(r16)
8110eea4:	9480024c 	andi	r18,r18,9
8110eea8:	90bfd51e 	bne	r18,r2,8110ee00 <__reset+0xfb0eee00>
8110eeac:	800b883a 	mov	r5,r16
8110eeb0:	8809883a 	mov	r4,r17
8110eeb4:	1116d8c0 	call	81116d8c <__sflush_r>
8110eeb8:	003fd106 	br	8110ee00 <__reset+0xfb0eee00>
8110eebc:	18c01014 	ori	r3,r3,64
8110eec0:	80000115 	stw	zero,4(r16)
8110eec4:	00bfffc4 	movi	r2,-1
8110eec8:	80c0030d 	sth	r3,12(r16)
8110eecc:	003fd606 	br	8110ee28 <__reset+0xfb0eee28>
8110eed0:	80c00e17 	ldw	r3,56(r16)
8110eed4:	0005883a 	mov	r2,zero
8110eed8:	80c00015 	stw	r3,0(r16)
8110eedc:	003fd206 	br	8110ee28 <__reset+0xfb0eee28>
8110eee0:	800b883a 	mov	r5,r16
8110eee4:	8809883a 	mov	r4,r17
8110eee8:	1116fb00 	call	81116fb0 <_fflush_r>
8110eeec:	10000a1e 	bne	r2,zero,8110ef18 <__srefill_r+0x1c4>
8110eef0:	8080030b 	ldhu	r2,12(r16)
8110eef4:	00fffdc4 	movi	r3,-9
8110eef8:	80000215 	stw	zero,8(r16)
8110eefc:	1886703a 	and	r3,r3,r2
8110ef00:	80000615 	stw	zero,24(r16)
8110ef04:	003fd206 	br	8110ee50 <__reset+0xfb0eee50>
8110ef08:	00800244 	movi	r2,9
8110ef0c:	88800015 	stw	r2,0(r17)
8110ef10:	18c01014 	ori	r3,r3,64
8110ef14:	80c0030d 	sth	r3,12(r16)
8110ef18:	00bfffc4 	movi	r2,-1
8110ef1c:	003fc206 	br	8110ee28 <__reset+0xfb0eee28>
8110ef20:	800b883a 	mov	r5,r16
8110ef24:	8809883a 	mov	r4,r17
8110ef28:	110df080 	call	8110df08 <__smakebuf_r>
8110ef2c:	003fb106 	br	8110edf4 <__reset+0xfb0eedf4>

8110ef30 <_sbrk_r>:
8110ef30:	defffd04 	addi	sp,sp,-12
8110ef34:	de00012e 	bgeu	sp,et,8110ef3c <_sbrk_r+0xc>
8110ef38:	003b68fa 	trap	3
8110ef3c:	dc000015 	stw	r16,0(sp)
8110ef40:	04204534 	movhi	r16,33044
8110ef44:	dc400115 	stw	r17,4(sp)
8110ef48:	84344404 	addi	r16,r16,-12016
8110ef4c:	2023883a 	mov	r17,r4
8110ef50:	2809883a 	mov	r4,r5
8110ef54:	dfc00215 	stw	ra,8(sp)
8110ef58:	80000015 	stw	zero,0(r16)
8110ef5c:	11239d80 	call	811239d8 <sbrk>
8110ef60:	00ffffc4 	movi	r3,-1
8110ef64:	10c00526 	beq	r2,r3,8110ef7c <_sbrk_r+0x4c>
8110ef68:	dfc00217 	ldw	ra,8(sp)
8110ef6c:	dc400117 	ldw	r17,4(sp)
8110ef70:	dc000017 	ldw	r16,0(sp)
8110ef74:	dec00304 	addi	sp,sp,12
8110ef78:	f800283a 	ret
8110ef7c:	80c00017 	ldw	r3,0(r16)
8110ef80:	183ff926 	beq	r3,zero,8110ef68 <__reset+0xfb0eef68>
8110ef84:	88c00015 	stw	r3,0(r17)
8110ef88:	003ff706 	br	8110ef68 <__reset+0xfb0eef68>

8110ef8c <scanf>:
8110ef8c:	defffc04 	addi	sp,sp,-16
8110ef90:	de00012e 	bgeu	sp,et,8110ef98 <scanf+0xc>
8110ef94:	003b68fa 	trap	3
8110ef98:	dfc00015 	stw	ra,0(sp)
8110ef9c:	d9400115 	stw	r5,4(sp)
8110efa0:	d9800215 	stw	r6,8(sp)
8110efa4:	d9c00315 	stw	r7,12(sp)
8110efa8:	00a04534 	movhi	r2,33044
8110efac:	10b3e404 	addi	r2,r2,-12400
8110efb0:	200d883a 	mov	r6,r4
8110efb4:	11000017 	ldw	r4,0(r2)
8110efb8:	d9c00104 	addi	r7,sp,4
8110efbc:	21400117 	ldw	r5,4(r4)
8110efc0:	11152800 	call	81115280 <_vfscanf_r>
8110efc4:	dfc00017 	ldw	ra,0(sp)
8110efc8:	dec00404 	addi	sp,sp,16
8110efcc:	f800283a 	ret

8110efd0 <_scanf_r>:
8110efd0:	defffd04 	addi	sp,sp,-12
8110efd4:	2805883a 	mov	r2,r5
8110efd8:	de00012e 	bgeu	sp,et,8110efe0 <_scanf_r+0x10>
8110efdc:	003b68fa 	trap	3
8110efe0:	dfc00015 	stw	ra,0(sp)
8110efe4:	d9800115 	stw	r6,4(sp)
8110efe8:	d9c00215 	stw	r7,8(sp)
8110efec:	21400117 	ldw	r5,4(r4)
8110eff0:	d9c00104 	addi	r7,sp,4
8110eff4:	100d883a 	mov	r6,r2
8110eff8:	11152800 	call	81115280 <_vfscanf_r>
8110effc:	dfc00017 	ldw	ra,0(sp)
8110f000:	dec00304 	addi	sp,sp,12
8110f004:	f800283a 	ret

8110f008 <_sprintf_r>:
8110f008:	deffe404 	addi	sp,sp,-112
8110f00c:	2807883a 	mov	r3,r5
8110f010:	de00012e 	bgeu	sp,et,8110f018 <_sprintf_r+0x10>
8110f014:	003b68fa 	trap	3
8110f018:	dfc01a15 	stw	ra,104(sp)
8110f01c:	d9c01b15 	stw	r7,108(sp)
8110f020:	00a00034 	movhi	r2,32768
8110f024:	10bfffc4 	addi	r2,r2,-1
8110f028:	02008204 	movi	r8,520
8110f02c:	d8800215 	stw	r2,8(sp)
8110f030:	d8800515 	stw	r2,20(sp)
8110f034:	d9c01b04 	addi	r7,sp,108
8110f038:	d80b883a 	mov	r5,sp
8110f03c:	00bfffc4 	movi	r2,-1
8110f040:	d8c00015 	stw	r3,0(sp)
8110f044:	d8c00415 	stw	r3,16(sp)
8110f048:	da00030d 	sth	r8,12(sp)
8110f04c:	d880038d 	sth	r2,14(sp)
8110f050:	110f5700 	call	8110f570 <___svfprintf_internal_r>
8110f054:	d8c00017 	ldw	r3,0(sp)
8110f058:	18000005 	stb	zero,0(r3)
8110f05c:	dfc01a17 	ldw	ra,104(sp)
8110f060:	dec01c04 	addi	sp,sp,112
8110f064:	f800283a 	ret

8110f068 <sprintf>:
8110f068:	deffe304 	addi	sp,sp,-116
8110f06c:	2007883a 	mov	r3,r4
8110f070:	de00012e 	bgeu	sp,et,8110f078 <sprintf+0x10>
8110f074:	003b68fa 	trap	3
8110f078:	dfc01a15 	stw	ra,104(sp)
8110f07c:	d9801b15 	stw	r6,108(sp)
8110f080:	d9c01c15 	stw	r7,112(sp)
8110f084:	01204534 	movhi	r4,33044
8110f088:	2133e404 	addi	r4,r4,-12400
8110f08c:	21000017 	ldw	r4,0(r4)
8110f090:	00a00034 	movhi	r2,32768
8110f094:	10bfffc4 	addi	r2,r2,-1
8110f098:	280d883a 	mov	r6,r5
8110f09c:	02008204 	movi	r8,520
8110f0a0:	d8800215 	stw	r2,8(sp)
8110f0a4:	d8800515 	stw	r2,20(sp)
8110f0a8:	d9c01b04 	addi	r7,sp,108
8110f0ac:	d80b883a 	mov	r5,sp
8110f0b0:	00bfffc4 	movi	r2,-1
8110f0b4:	d8c00015 	stw	r3,0(sp)
8110f0b8:	d8c00415 	stw	r3,16(sp)
8110f0bc:	da00030d 	sth	r8,12(sp)
8110f0c0:	d880038d 	sth	r2,14(sp)
8110f0c4:	110f5700 	call	8110f570 <___svfprintf_internal_r>
8110f0c8:	d8c00017 	ldw	r3,0(sp)
8110f0cc:	18000005 	stb	zero,0(r3)
8110f0d0:	dfc01a17 	ldw	ra,104(sp)
8110f0d4:	dec01d04 	addi	sp,sp,116
8110f0d8:	f800283a 	ret

8110f0dc <__sread>:
8110f0dc:	defffe04 	addi	sp,sp,-8
8110f0e0:	de00012e 	bgeu	sp,et,8110f0e8 <__sread+0xc>
8110f0e4:	003b68fa 	trap	3
8110f0e8:	dc000015 	stw	r16,0(sp)
8110f0ec:	2821883a 	mov	r16,r5
8110f0f0:	2940038f 	ldh	r5,14(r5)
8110f0f4:	dfc00115 	stw	ra,4(sp)
8110f0f8:	11199e80 	call	811199e8 <_read_r>
8110f0fc:	10000716 	blt	r2,zero,8110f11c <__sread+0x40>
8110f100:	80c01417 	ldw	r3,80(r16)
8110f104:	1887883a 	add	r3,r3,r2
8110f108:	80c01415 	stw	r3,80(r16)
8110f10c:	dfc00117 	ldw	ra,4(sp)
8110f110:	dc000017 	ldw	r16,0(sp)
8110f114:	dec00204 	addi	sp,sp,8
8110f118:	f800283a 	ret
8110f11c:	80c0030b 	ldhu	r3,12(r16)
8110f120:	18fbffcc 	andi	r3,r3,61439
8110f124:	80c0030d 	sth	r3,12(r16)
8110f128:	dfc00117 	ldw	ra,4(sp)
8110f12c:	dc000017 	ldw	r16,0(sp)
8110f130:	dec00204 	addi	sp,sp,8
8110f134:	f800283a 	ret

8110f138 <__seofread>:
8110f138:	0005883a 	mov	r2,zero
8110f13c:	f800283a 	ret

8110f140 <__swrite>:
8110f140:	defffb04 	addi	sp,sp,-20
8110f144:	de00012e 	bgeu	sp,et,8110f14c <__swrite+0xc>
8110f148:	003b68fa 	trap	3
8110f14c:	2880030b 	ldhu	r2,12(r5)
8110f150:	dcc00315 	stw	r19,12(sp)
8110f154:	dc800215 	stw	r18,8(sp)
8110f158:	dc400115 	stw	r17,4(sp)
8110f15c:	dc000015 	stw	r16,0(sp)
8110f160:	dfc00415 	stw	ra,16(sp)
8110f164:	10c0400c 	andi	r3,r2,256
8110f168:	2821883a 	mov	r16,r5
8110f16c:	2023883a 	mov	r17,r4
8110f170:	3025883a 	mov	r18,r6
8110f174:	3827883a 	mov	r19,r7
8110f178:	18000526 	beq	r3,zero,8110f190 <__swrite+0x50>
8110f17c:	2940038f 	ldh	r5,14(r5)
8110f180:	01c00084 	movi	r7,2
8110f184:	000d883a 	mov	r6,zero
8110f188:	11183280 	call	81118328 <_lseek_r>
8110f18c:	8080030b 	ldhu	r2,12(r16)
8110f190:	8140038f 	ldh	r5,14(r16)
8110f194:	10bbffcc 	andi	r2,r2,61439
8110f198:	980f883a 	mov	r7,r19
8110f19c:	900d883a 	mov	r6,r18
8110f1a0:	8809883a 	mov	r4,r17
8110f1a4:	8080030d 	sth	r2,12(r16)
8110f1a8:	dfc00417 	ldw	ra,16(sp)
8110f1ac:	dcc00317 	ldw	r19,12(sp)
8110f1b0:	dc800217 	ldw	r18,8(sp)
8110f1b4:	dc400117 	ldw	r17,4(sp)
8110f1b8:	dc000017 	ldw	r16,0(sp)
8110f1bc:	dec00504 	addi	sp,sp,20
8110f1c0:	11152d41 	jmpi	811152d4 <_write_r>

8110f1c4 <__sseek>:
8110f1c4:	defffe04 	addi	sp,sp,-8
8110f1c8:	de00012e 	bgeu	sp,et,8110f1d0 <__sseek+0xc>
8110f1cc:	003b68fa 	trap	3
8110f1d0:	dc000015 	stw	r16,0(sp)
8110f1d4:	2821883a 	mov	r16,r5
8110f1d8:	2940038f 	ldh	r5,14(r5)
8110f1dc:	dfc00115 	stw	ra,4(sp)
8110f1e0:	11183280 	call	81118328 <_lseek_r>
8110f1e4:	00ffffc4 	movi	r3,-1
8110f1e8:	10c00826 	beq	r2,r3,8110f20c <__sseek+0x48>
8110f1ec:	80c0030b 	ldhu	r3,12(r16)
8110f1f0:	80801415 	stw	r2,80(r16)
8110f1f4:	18c40014 	ori	r3,r3,4096
8110f1f8:	80c0030d 	sth	r3,12(r16)
8110f1fc:	dfc00117 	ldw	ra,4(sp)
8110f200:	dc000017 	ldw	r16,0(sp)
8110f204:	dec00204 	addi	sp,sp,8
8110f208:	f800283a 	ret
8110f20c:	80c0030b 	ldhu	r3,12(r16)
8110f210:	18fbffcc 	andi	r3,r3,61439
8110f214:	80c0030d 	sth	r3,12(r16)
8110f218:	dfc00117 	ldw	ra,4(sp)
8110f21c:	dc000017 	ldw	r16,0(sp)
8110f220:	dec00204 	addi	sp,sp,8
8110f224:	f800283a 	ret

8110f228 <__sclose>:
8110f228:	2940038f 	ldh	r5,14(r5)
8110f22c:	11154981 	jmpi	81115498 <_close_r>

8110f230 <strcspn>:
8110f230:	21c00007 	ldb	r7,0(r4)
8110f234:	38000f26 	beq	r7,zero,8110f274 <strcspn+0x44>
8110f238:	2a000007 	ldb	r8,0(r5)
8110f23c:	2005883a 	mov	r2,r4
8110f240:	40000726 	beq	r8,zero,8110f260 <strcspn+0x30>
8110f244:	3a000926 	beq	r7,r8,8110f26c <strcspn+0x3c>
8110f248:	2807883a 	mov	r3,r5
8110f24c:	00000106 	br	8110f254 <strcspn+0x24>
8110f250:	31c00626 	beq	r6,r7,8110f26c <strcspn+0x3c>
8110f254:	18c00044 	addi	r3,r3,1
8110f258:	19800007 	ldb	r6,0(r3)
8110f25c:	303ffc1e 	bne	r6,zero,8110f250 <__reset+0xfb0ef250>
8110f260:	10800044 	addi	r2,r2,1
8110f264:	11c00007 	ldb	r7,0(r2)
8110f268:	383ff51e 	bne	r7,zero,8110f240 <__reset+0xfb0ef240>
8110f26c:	1105c83a 	sub	r2,r2,r4
8110f270:	f800283a 	ret
8110f274:	0005883a 	mov	r2,zero
8110f278:	f800283a 	ret

8110f27c <strlen>:
8110f27c:	208000cc 	andi	r2,r4,3
8110f280:	10002026 	beq	r2,zero,8110f304 <strlen+0x88>
8110f284:	20800007 	ldb	r2,0(r4)
8110f288:	10002026 	beq	r2,zero,8110f30c <strlen+0x90>
8110f28c:	2005883a 	mov	r2,r4
8110f290:	00000206 	br	8110f29c <strlen+0x20>
8110f294:	10c00007 	ldb	r3,0(r2)
8110f298:	18001826 	beq	r3,zero,8110f2fc <strlen+0x80>
8110f29c:	10800044 	addi	r2,r2,1
8110f2a0:	10c000cc 	andi	r3,r2,3
8110f2a4:	183ffb1e 	bne	r3,zero,8110f294 <__reset+0xfb0ef294>
8110f2a8:	10c00017 	ldw	r3,0(r2)
8110f2ac:	01ffbff4 	movhi	r7,65279
8110f2b0:	39ffbfc4 	addi	r7,r7,-257
8110f2b4:	00ca303a 	nor	r5,zero,r3
8110f2b8:	01a02074 	movhi	r6,32897
8110f2bc:	19c7883a 	add	r3,r3,r7
8110f2c0:	31a02004 	addi	r6,r6,-32640
8110f2c4:	1946703a 	and	r3,r3,r5
8110f2c8:	1986703a 	and	r3,r3,r6
8110f2cc:	1800091e 	bne	r3,zero,8110f2f4 <strlen+0x78>
8110f2d0:	10800104 	addi	r2,r2,4
8110f2d4:	10c00017 	ldw	r3,0(r2)
8110f2d8:	19cb883a 	add	r5,r3,r7
8110f2dc:	00c6303a 	nor	r3,zero,r3
8110f2e0:	28c6703a 	and	r3,r5,r3
8110f2e4:	1986703a 	and	r3,r3,r6
8110f2e8:	183ff926 	beq	r3,zero,8110f2d0 <__reset+0xfb0ef2d0>
8110f2ec:	00000106 	br	8110f2f4 <strlen+0x78>
8110f2f0:	10800044 	addi	r2,r2,1
8110f2f4:	10c00007 	ldb	r3,0(r2)
8110f2f8:	183ffd1e 	bne	r3,zero,8110f2f0 <__reset+0xfb0ef2f0>
8110f2fc:	1105c83a 	sub	r2,r2,r4
8110f300:	f800283a 	ret
8110f304:	2005883a 	mov	r2,r4
8110f308:	003fe706 	br	8110f2a8 <__reset+0xfb0ef2a8>
8110f30c:	0005883a 	mov	r2,zero
8110f310:	f800283a 	ret

8110f314 <_strtol_r>:
8110f314:	00a04534 	movhi	r2,33044
8110f318:	defff404 	addi	sp,sp,-48
8110f31c:	10b3e204 	addi	r2,r2,-12408
8110f320:	de00012e 	bgeu	sp,et,8110f328 <_strtol_r+0x14>
8110f324:	003b68fa 	trap	3
8110f328:	dd400715 	stw	r21,28(sp)
8110f32c:	15400017 	ldw	r21,0(r2)
8110f330:	dd800815 	stw	r22,32(sp)
8110f334:	dd000615 	stw	r20,24(sp)
8110f338:	dcc00515 	stw	r19,20(sp)
8110f33c:	d9000015 	stw	r4,0(sp)
8110f340:	dfc00b15 	stw	ra,44(sp)
8110f344:	df000a15 	stw	fp,40(sp)
8110f348:	ddc00915 	stw	r23,36(sp)
8110f34c:	dc800415 	stw	r18,16(sp)
8110f350:	dc400315 	stw	r17,12(sp)
8110f354:	dc000215 	stw	r16,8(sp)
8110f358:	2829883a 	mov	r20,r5
8110f35c:	3027883a 	mov	r19,r6
8110f360:	382d883a 	mov	r22,r7
8110f364:	2809883a 	mov	r4,r5
8110f368:	24000003 	ldbu	r16,0(r4)
8110f36c:	24400044 	addi	r17,r4,1
8110f370:	2007883a 	mov	r3,r4
8110f374:	ac05883a 	add	r2,r21,r16
8110f378:	10800043 	ldbu	r2,1(r2)
8110f37c:	8809883a 	mov	r4,r17
8110f380:	1080020c 	andi	r2,r2,8
8110f384:	103ff81e 	bne	r2,zero,8110f368 <__reset+0xfb0ef368>
8110f388:	00800b44 	movi	r2,45
8110f38c:	80805826 	beq	r16,r2,8110f4f0 <_strtol_r+0x1dc>
8110f390:	00800ac4 	movi	r2,43
8110f394:	80805a26 	beq	r16,r2,8110f500 <_strtol_r+0x1ec>
8110f398:	0039883a 	mov	fp,zero
8110f39c:	b0004426 	beq	r22,zero,8110f4b0 <_strtol_r+0x19c>
8110f3a0:	00800404 	movi	r2,16
8110f3a4:	b0806026 	beq	r22,r2,8110f528 <_strtol_r+0x214>
8110f3a8:	b02f883a 	mov	r23,r22
8110f3ac:	00a00034 	movhi	r2,32768
8110f3b0:	e025003a 	cmpeq	r18,fp,zero
8110f3b4:	14a5c83a 	sub	r18,r2,r18
8110f3b8:	b80b883a 	mov	r5,r23
8110f3bc:	9009883a 	mov	r4,r18
8110f3c0:	1120f080 	call	81120f08 <__umodsi3>
8110f3c4:	b80b883a 	mov	r5,r23
8110f3c8:	9009883a 	mov	r4,r18
8110f3cc:	d8800115 	stw	r2,4(sp)
8110f3d0:	1120ea40 	call	81120ea4 <__udivsi3>
8110f3d4:	ac07883a 	add	r3,r21,r16
8110f3d8:	18c00043 	ldbu	r3,1(r3)
8110f3dc:	880b883a 	mov	r5,r17
8110f3e0:	000d883a 	mov	r6,zero
8110f3e4:	1a00010c 	andi	r8,r3,4
8110f3e8:	0009883a 	mov	r4,zero
8110f3ec:	02800044 	movi	r10,1
8110f3f0:	027fffc4 	movi	r9,-1
8110f3f4:	d9c00117 	ldw	r7,4(sp)
8110f3f8:	40000e26 	beq	r8,zero,8110f434 <_strtol_r+0x120>
8110f3fc:	843ff404 	addi	r16,r16,-48
8110f400:	8580120e 	bge	r16,r22,8110f44c <_strtol_r+0x138>
8110f404:	32400526 	beq	r6,r9,8110f41c <_strtol_r+0x108>
8110f408:	11002536 	bltu	r2,r4,8110f4a0 <_strtol_r+0x18c>
8110f40c:	20802326 	beq	r4,r2,8110f49c <_strtol_r+0x188>
8110f410:	25c9383a 	mul	r4,r4,r23
8110f414:	01800044 	movi	r6,1
8110f418:	8109883a 	add	r4,r16,r4
8110f41c:	2c000003 	ldbu	r16,0(r5)
8110f420:	29400044 	addi	r5,r5,1
8110f424:	ac07883a 	add	r3,r21,r16
8110f428:	18c00043 	ldbu	r3,1(r3)
8110f42c:	1a00010c 	andi	r8,r3,4
8110f430:	403ff21e 	bne	r8,zero,8110f3fc <__reset+0xfb0ef3fc>
8110f434:	18c000cc 	andi	r3,r3,3
8110f438:	18000426 	beq	r3,zero,8110f44c <_strtol_r+0x138>
8110f43c:	1a801a26 	beq	r3,r10,8110f4a8 <_strtol_r+0x194>
8110f440:	00c015c4 	movi	r3,87
8110f444:	80e1c83a 	sub	r16,r16,r3
8110f448:	85bfee16 	blt	r16,r22,8110f404 <__reset+0xfb0ef404>
8110f44c:	00bfffc4 	movi	r2,-1
8110f450:	30801e26 	beq	r6,r2,8110f4cc <_strtol_r+0x1b8>
8110f454:	e0001b1e 	bne	fp,zero,8110f4c4 <_strtol_r+0x1b0>
8110f458:	2005883a 	mov	r2,r4
8110f45c:	98000326 	beq	r19,zero,8110f46c <_strtol_r+0x158>
8110f460:	3000211e 	bne	r6,zero,8110f4e8 <_strtol_r+0x1d4>
8110f464:	a00b883a 	mov	r5,r20
8110f468:	99400015 	stw	r5,0(r19)
8110f46c:	dfc00b17 	ldw	ra,44(sp)
8110f470:	df000a17 	ldw	fp,40(sp)
8110f474:	ddc00917 	ldw	r23,36(sp)
8110f478:	dd800817 	ldw	r22,32(sp)
8110f47c:	dd400717 	ldw	r21,28(sp)
8110f480:	dd000617 	ldw	r20,24(sp)
8110f484:	dcc00517 	ldw	r19,20(sp)
8110f488:	dc800417 	ldw	r18,16(sp)
8110f48c:	dc400317 	ldw	r17,12(sp)
8110f490:	dc000217 	ldw	r16,8(sp)
8110f494:	dec00c04 	addi	sp,sp,48
8110f498:	f800283a 	ret
8110f49c:	3c3fdc0e 	bge	r7,r16,8110f410 <__reset+0xfb0ef410>
8110f4a0:	01bfffc4 	movi	r6,-1
8110f4a4:	003fdd06 	br	8110f41c <__reset+0xfb0ef41c>
8110f4a8:	00c00dc4 	movi	r3,55
8110f4ac:	003fe506 	br	8110f444 <__reset+0xfb0ef444>
8110f4b0:	00800c04 	movi	r2,48
8110f4b4:	80801626 	beq	r16,r2,8110f510 <_strtol_r+0x1fc>
8110f4b8:	05800284 	movi	r22,10
8110f4bc:	b02f883a 	mov	r23,r22
8110f4c0:	003fba06 	br	8110f3ac <__reset+0xfb0ef3ac>
8110f4c4:	0109c83a 	sub	r4,zero,r4
8110f4c8:	003fe306 	br	8110f458 <__reset+0xfb0ef458>
8110f4cc:	d9000017 	ldw	r4,0(sp)
8110f4d0:	00c00884 	movi	r3,34
8110f4d4:	e005003a 	cmpeq	r2,fp,zero
8110f4d8:	20c00015 	stw	r3,0(r4)
8110f4dc:	00e00034 	movhi	r3,32768
8110f4e0:	1885c83a 	sub	r2,r3,r2
8110f4e4:	983fe126 	beq	r19,zero,8110f46c <__reset+0xfb0ef46c>
8110f4e8:	297fffc4 	addi	r5,r5,-1
8110f4ec:	003fde06 	br	8110f468 <__reset+0xfb0ef468>
8110f4f0:	1c400084 	addi	r17,r3,2
8110f4f4:	1c000043 	ldbu	r16,1(r3)
8110f4f8:	07000044 	movi	fp,1
8110f4fc:	003fa706 	br	8110f39c <__reset+0xfb0ef39c>
8110f500:	1c400084 	addi	r17,r3,2
8110f504:	1c000043 	ldbu	r16,1(r3)
8110f508:	0039883a 	mov	fp,zero
8110f50c:	003fa306 	br	8110f39c <__reset+0xfb0ef39c>
8110f510:	88800003 	ldbu	r2,0(r17)
8110f514:	00c01604 	movi	r3,88
8110f518:	108037cc 	andi	r2,r2,223
8110f51c:	10c00826 	beq	r2,r3,8110f540 <_strtol_r+0x22c>
8110f520:	05800204 	movi	r22,8
8110f524:	003fa006 	br	8110f3a8 <__reset+0xfb0ef3a8>
8110f528:	00800c04 	movi	r2,48
8110f52c:	80bf9e1e 	bne	r16,r2,8110f3a8 <__reset+0xfb0ef3a8>
8110f530:	88800003 	ldbu	r2,0(r17)
8110f534:	00c01604 	movi	r3,88
8110f538:	108037cc 	andi	r2,r2,223
8110f53c:	10ff9a1e 	bne	r2,r3,8110f3a8 <__reset+0xfb0ef3a8>
8110f540:	05c00404 	movi	r23,16
8110f544:	8c000043 	ldbu	r16,1(r17)
8110f548:	b82d883a 	mov	r22,r23
8110f54c:	8c400084 	addi	r17,r17,2
8110f550:	003f9606 	br	8110f3ac <__reset+0xfb0ef3ac>

8110f554 <strtol>:
8110f554:	00a04534 	movhi	r2,33044
8110f558:	10b3e404 	addi	r2,r2,-12400
8110f55c:	300f883a 	mov	r7,r6
8110f560:	280d883a 	mov	r6,r5
8110f564:	200b883a 	mov	r5,r4
8110f568:	11000017 	ldw	r4,0(r2)
8110f56c:	110f3141 	jmpi	8110f314 <_strtol_r>

8110f570 <___svfprintf_internal_r>:
8110f570:	deffb704 	addi	sp,sp,-292
8110f574:	de00012e 	bgeu	sp,et,8110f57c <___svfprintf_internal_r+0xc>
8110f578:	003b68fa 	trap	3
8110f57c:	dfc04815 	stw	ra,288(sp)
8110f580:	ddc04615 	stw	r23,280(sp)
8110f584:	d9402c15 	stw	r5,176(sp)
8110f588:	d9003915 	stw	r4,228(sp)
8110f58c:	302f883a 	mov	r23,r6
8110f590:	d9c02d15 	stw	r7,180(sp)
8110f594:	df004715 	stw	fp,284(sp)
8110f598:	dd804515 	stw	r22,276(sp)
8110f59c:	dd404415 	stw	r21,272(sp)
8110f5a0:	dd004315 	stw	r20,268(sp)
8110f5a4:	dcc04215 	stw	r19,264(sp)
8110f5a8:	dc804115 	stw	r18,260(sp)
8110f5ac:	dc404015 	stw	r17,256(sp)
8110f5b0:	dc003f15 	stw	r16,252(sp)
8110f5b4:	11182f80 	call	811182f8 <_localeconv_r>
8110f5b8:	10800017 	ldw	r2,0(r2)
8110f5bc:	1009883a 	mov	r4,r2
8110f5c0:	d8803415 	stw	r2,208(sp)
8110f5c4:	110f27c0 	call	8110f27c <strlen>
8110f5c8:	d8c02c17 	ldw	r3,176(sp)
8110f5cc:	d8803815 	stw	r2,224(sp)
8110f5d0:	1880030b 	ldhu	r2,12(r3)
8110f5d4:	1080200c 	andi	r2,r2,128
8110f5d8:	10000226 	beq	r2,zero,8110f5e4 <___svfprintf_internal_r+0x74>
8110f5dc:	18800417 	ldw	r2,16(r3)
8110f5e0:	10067f26 	beq	r2,zero,81110fe0 <___svfprintf_internal_r+0x1a70>
8110f5e4:	dcc03917 	ldw	r19,228(sp)
8110f5e8:	d8c00404 	addi	r3,sp,16
8110f5ec:	05604534 	movhi	r21,33044
8110f5f0:	d9001e04 	addi	r4,sp,120
8110f5f4:	ad6ae384 	addi	r21,r21,-21618
8110f5f8:	d8c01e15 	stw	r3,120(sp)
8110f5fc:	d8002015 	stw	zero,128(sp)
8110f600:	d8001f15 	stw	zero,124(sp)
8110f604:	d8003315 	stw	zero,204(sp)
8110f608:	d8003615 	stw	zero,216(sp)
8110f60c:	d8003715 	stw	zero,220(sp)
8110f610:	1811883a 	mov	r8,r3
8110f614:	d8003a15 	stw	zero,232(sp)
8110f618:	d8003b15 	stw	zero,236(sp)
8110f61c:	d8002f15 	stw	zero,188(sp)
8110f620:	d9002815 	stw	r4,160(sp)
8110f624:	b8800007 	ldb	r2,0(r23)
8110f628:	10026726 	beq	r2,zero,8110ffc8 <___svfprintf_internal_r+0xa58>
8110f62c:	00c00944 	movi	r3,37
8110f630:	b821883a 	mov	r16,r23
8110f634:	10c0021e 	bne	r2,r3,8110f640 <___svfprintf_internal_r+0xd0>
8110f638:	00001406 	br	8110f68c <___svfprintf_internal_r+0x11c>
8110f63c:	10c00326 	beq	r2,r3,8110f64c <___svfprintf_internal_r+0xdc>
8110f640:	84000044 	addi	r16,r16,1
8110f644:	80800007 	ldb	r2,0(r16)
8110f648:	103ffc1e 	bne	r2,zero,8110f63c <__reset+0xfb0ef63c>
8110f64c:	85e3c83a 	sub	r17,r16,r23
8110f650:	88000e26 	beq	r17,zero,8110f68c <___svfprintf_internal_r+0x11c>
8110f654:	d8c02017 	ldw	r3,128(sp)
8110f658:	d8801f17 	ldw	r2,124(sp)
8110f65c:	45c00015 	stw	r23,0(r8)
8110f660:	1c47883a 	add	r3,r3,r17
8110f664:	10800044 	addi	r2,r2,1
8110f668:	d8c02015 	stw	r3,128(sp)
8110f66c:	44400115 	stw	r17,4(r8)
8110f670:	d8801f15 	stw	r2,124(sp)
8110f674:	00c001c4 	movi	r3,7
8110f678:	18809716 	blt	r3,r2,8110f8d8 <___svfprintf_internal_r+0x368>
8110f67c:	42000204 	addi	r8,r8,8
8110f680:	d9402f17 	ldw	r5,188(sp)
8110f684:	2c4b883a 	add	r5,r5,r17
8110f688:	d9402f15 	stw	r5,188(sp)
8110f68c:	80800007 	ldb	r2,0(r16)
8110f690:	10009826 	beq	r2,zero,8110f8f4 <___svfprintf_internal_r+0x384>
8110f694:	84400047 	ldb	r17,1(r16)
8110f698:	00bfffc4 	movi	r2,-1
8110f69c:	85c00044 	addi	r23,r16,1
8110f6a0:	d8002785 	stb	zero,158(sp)
8110f6a4:	0007883a 	mov	r3,zero
8110f6a8:	000f883a 	mov	r7,zero
8110f6ac:	d8802915 	stw	r2,164(sp)
8110f6b0:	d8003115 	stw	zero,196(sp)
8110f6b4:	0025883a 	mov	r18,zero
8110f6b8:	01401604 	movi	r5,88
8110f6bc:	01800244 	movi	r6,9
8110f6c0:	02800a84 	movi	r10,42
8110f6c4:	02401b04 	movi	r9,108
8110f6c8:	bdc00044 	addi	r23,r23,1
8110f6cc:	88bff804 	addi	r2,r17,-32
8110f6d0:	2882f036 	bltu	r5,r2,81110294 <___svfprintf_internal_r+0xd24>
8110f6d4:	100490ba 	slli	r2,r2,2
8110f6d8:	01204474 	movhi	r4,33041
8110f6dc:	213dbb04 	addi	r4,r4,-2324
8110f6e0:	1105883a 	add	r2,r2,r4
8110f6e4:	10800017 	ldw	r2,0(r2)
8110f6e8:	1000683a 	jmp	r2
8110f6ec:	811101fc 	xorhi	r4,r16,17415
8110f6f0:	81110294 	ori	r4,r16,17418
8110f6f4:	81110294 	ori	r4,r16,17418
8110f6f8:	811101f0 	cmpltui	r4,r16,17415
8110f6fc:	81110294 	ori	r4,r16,17418
8110f700:	81110294 	ori	r4,r16,17418
8110f704:	81110294 	ori	r4,r16,17418
8110f708:	81110294 	ori	r4,r16,17418
8110f70c:	81110294 	ori	r4,r16,17418
8110f710:	81110294 	ori	r4,r16,17418
8110f714:	8110f950 	cmplti	r4,r16,17381
8110f718:	8111012c 	andhi	r4,r16,17412
8110f71c:	81110294 	ori	r4,r16,17418
8110f720:	8110f860 	cmpeqi	r4,r16,17377
8110f724:	8110f978 	rdprs	r4,r16,17381
8110f728:	81110294 	ori	r4,r16,17418
8110f72c:	8110f9ec 	andhi	r4,r16,17383
8110f730:	8110f9b8 	rdprs	r4,r16,17382
8110f734:	8110f9b8 	rdprs	r4,r16,17382
8110f738:	8110f9b8 	rdprs	r4,r16,17382
8110f73c:	8110f9b8 	rdprs	r4,r16,17382
8110f740:	8110f9b8 	rdprs	r4,r16,17382
8110f744:	8110f9b8 	rdprs	r4,r16,17382
8110f748:	8110f9b8 	rdprs	r4,r16,17382
8110f74c:	8110f9b8 	rdprs	r4,r16,17382
8110f750:	8110f9b8 	rdprs	r4,r16,17382
8110f754:	81110294 	ori	r4,r16,17418
8110f758:	81110294 	ori	r4,r16,17418
8110f75c:	81110294 	ori	r4,r16,17418
8110f760:	81110294 	ori	r4,r16,17418
8110f764:	81110294 	ori	r4,r16,17418
8110f768:	81110294 	ori	r4,r16,17418
8110f76c:	81110294 	ori	r4,r16,17418
8110f770:	81110294 	ori	r4,r16,17418
8110f774:	81110294 	ori	r4,r16,17418
8110f778:	81110294 	ori	r4,r16,17418
8110f77c:	8110faa4 	muli	r4,r16,17386
8110f780:	8110f9f8 	rdprs	r4,r16,17383
8110f784:	81110294 	ori	r4,r16,17418
8110f788:	8110f9f8 	rdprs	r4,r16,17383
8110f78c:	81110294 	ori	r4,r16,17418
8110f790:	81110294 	ori	r4,r16,17418
8110f794:	81110294 	ori	r4,r16,17418
8110f798:	81110294 	ori	r4,r16,17418
8110f79c:	8110fa98 	cmpnei	r4,r16,17386
8110f7a0:	81110294 	ori	r4,r16,17418
8110f7a4:	81110294 	ori	r4,r16,17418
8110f7a8:	8110fb60 	cmpeqi	r4,r16,17389
8110f7ac:	81110294 	ori	r4,r16,17418
8110f7b0:	81110294 	ori	r4,r16,17418
8110f7b4:	81110294 	ori	r4,r16,17418
8110f7b8:	81110294 	ori	r4,r16,17418
8110f7bc:	81110294 	ori	r4,r16,17418
8110f7c0:	8110ffd0 	cmplti	r4,r16,17407
8110f7c4:	81110294 	ori	r4,r16,17418
8110f7c8:	81110294 	ori	r4,r16,17418
8110f7cc:	81110030 	cmpltui	r4,r16,17408
8110f7d0:	81110294 	ori	r4,r16,17418
8110f7d4:	81110294 	ori	r4,r16,17418
8110f7d8:	81110294 	ori	r4,r16,17418
8110f7dc:	81110294 	ori	r4,r16,17418
8110f7e0:	81110294 	ori	r4,r16,17418
8110f7e4:	81110294 	ori	r4,r16,17418
8110f7e8:	81110294 	ori	r4,r16,17418
8110f7ec:	81110294 	ori	r4,r16,17418
8110f7f0:	81110294 	ori	r4,r16,17418
8110f7f4:	81110294 	ori	r4,r16,17418
8110f7f8:	811100e0 	cmpeqi	r4,r16,17411
8110f7fc:	8111021c 	xori	r4,r16,17416
8110f800:	8110f9f8 	rdprs	r4,r16,17383
8110f804:	8110f9f8 	rdprs	r4,r16,17383
8110f808:	8110f9f8 	rdprs	r4,r16,17383
8110f80c:	81110270 	cmpltui	r4,r16,17417
8110f810:	8111021c 	xori	r4,r16,17416
8110f814:	81110294 	ori	r4,r16,17418
8110f818:	81110294 	ori	r4,r16,17418
8110f81c:	8111022c 	andhi	r4,r16,17416
8110f820:	81110294 	ori	r4,r16,17418
8110f824:	8111023c 	xorhi	r4,r16,17416
8110f828:	8111011c 	xori	r4,r16,17412
8110f82c:	8110f86c 	andhi	r4,r16,17377
8110f830:	8111013c 	xorhi	r4,r16,17412
8110f834:	81110294 	ori	r4,r16,17418
8110f838:	81110148 	cmpgei	r4,r16,17413
8110f83c:	81110294 	ori	r4,r16,17418
8110f840:	811101a4 	muli	r4,r16,17414
8110f844:	81110294 	ori	r4,r16,17418
8110f848:	81110294 	ori	r4,r16,17418
8110f84c:	811101b4 	orhi	r4,r16,17414
8110f850:	d9003117 	ldw	r4,196(sp)
8110f854:	d8802d15 	stw	r2,180(sp)
8110f858:	0109c83a 	sub	r4,zero,r4
8110f85c:	d9003115 	stw	r4,196(sp)
8110f860:	94800114 	ori	r18,r18,4
8110f864:	bc400007 	ldb	r17,0(r23)
8110f868:	003f9706 	br	8110f6c8 <__reset+0xfb0ef6c8>
8110f86c:	00800c04 	movi	r2,48
8110f870:	d9002d17 	ldw	r4,180(sp)
8110f874:	d9402917 	ldw	r5,164(sp)
8110f878:	d8802705 	stb	r2,156(sp)
8110f87c:	00801e04 	movi	r2,120
8110f880:	d8802745 	stb	r2,157(sp)
8110f884:	d8002785 	stb	zero,158(sp)
8110f888:	20c00104 	addi	r3,r4,4
8110f88c:	25000017 	ldw	r20,0(r4)
8110f890:	002d883a 	mov	r22,zero
8110f894:	90800094 	ori	r2,r18,2
8110f898:	28028616 	blt	r5,zero,811102b4 <___svfprintf_internal_r+0xd44>
8110f89c:	00bfdfc4 	movi	r2,-129
8110f8a0:	90a4703a 	and	r18,r18,r2
8110f8a4:	d8c02d15 	stw	r3,180(sp)
8110f8a8:	94800094 	ori	r18,r18,2
8110f8ac:	a002731e 	bne	r20,zero,8111027c <___svfprintf_internal_r+0xd0c>
8110f8b0:	00a04534 	movhi	r2,33044
8110f8b4:	10aadc04 	addi	r2,r2,-21648
8110f8b8:	d8803a15 	stw	r2,232(sp)
8110f8bc:	04401e04 	movi	r17,120
8110f8c0:	d8c02917 	ldw	r3,164(sp)
8110f8c4:	0039883a 	mov	fp,zero
8110f8c8:	1801d526 	beq	r3,zero,81110020 <___svfprintf_internal_r+0xab0>
8110f8cc:	0029883a 	mov	r20,zero
8110f8d0:	002d883a 	mov	r22,zero
8110f8d4:	0001f106 	br	8111009c <___svfprintf_internal_r+0xb2c>
8110f8d8:	d9402c17 	ldw	r5,176(sp)
8110f8dc:	d9801e04 	addi	r6,sp,120
8110f8e0:	9809883a 	mov	r4,r19
8110f8e4:	111c1a80 	call	8111c1a8 <__ssprint_r>
8110f8e8:	1000081e 	bne	r2,zero,8110f90c <___svfprintf_internal_r+0x39c>
8110f8ec:	da000404 	addi	r8,sp,16
8110f8f0:	003f6306 	br	8110f680 <__reset+0xfb0ef680>
8110f8f4:	d8802017 	ldw	r2,128(sp)
8110f8f8:	10000426 	beq	r2,zero,8110f90c <___svfprintf_internal_r+0x39c>
8110f8fc:	d9402c17 	ldw	r5,176(sp)
8110f900:	d9003917 	ldw	r4,228(sp)
8110f904:	d9801e04 	addi	r6,sp,120
8110f908:	111c1a80 	call	8111c1a8 <__ssprint_r>
8110f90c:	d8802c17 	ldw	r2,176(sp)
8110f910:	10c0030b 	ldhu	r3,12(r2)
8110f914:	d8802f17 	ldw	r2,188(sp)
8110f918:	18c0100c 	andi	r3,r3,64
8110f91c:	1805f51e 	bne	r3,zero,811110f4 <___svfprintf_internal_r+0x1b84>
8110f920:	dfc04817 	ldw	ra,288(sp)
8110f924:	df004717 	ldw	fp,284(sp)
8110f928:	ddc04617 	ldw	r23,280(sp)
8110f92c:	dd804517 	ldw	r22,276(sp)
8110f930:	dd404417 	ldw	r21,272(sp)
8110f934:	dd004317 	ldw	r20,268(sp)
8110f938:	dcc04217 	ldw	r19,264(sp)
8110f93c:	dc804117 	ldw	r18,260(sp)
8110f940:	dc404017 	ldw	r17,256(sp)
8110f944:	dc003f17 	ldw	r16,252(sp)
8110f948:	dec04904 	addi	sp,sp,292
8110f94c:	f800283a 	ret
8110f950:	d8802d17 	ldw	r2,180(sp)
8110f954:	d9002d17 	ldw	r4,180(sp)
8110f958:	10800017 	ldw	r2,0(r2)
8110f95c:	d8803115 	stw	r2,196(sp)
8110f960:	20800104 	addi	r2,r4,4
8110f964:	d9003117 	ldw	r4,196(sp)
8110f968:	203fb916 	blt	r4,zero,8110f850 <__reset+0xfb0ef850>
8110f96c:	d8802d15 	stw	r2,180(sp)
8110f970:	bc400007 	ldb	r17,0(r23)
8110f974:	003f5406 	br	8110f6c8 <__reset+0xfb0ef6c8>
8110f978:	bc400007 	ldb	r17,0(r23)
8110f97c:	bac00044 	addi	r11,r23,1
8110f980:	8a873926 	beq	r17,r10,81111668 <___svfprintf_internal_r+0x20f8>
8110f984:	88bff404 	addi	r2,r17,-48
8110f988:	0009883a 	mov	r4,zero
8110f98c:	30868836 	bltu	r6,r2,811113b0 <___svfprintf_internal_r+0x1e40>
8110f990:	5c400007 	ldb	r17,0(r11)
8110f994:	210002a4 	muli	r4,r4,10
8110f998:	5dc00044 	addi	r23,r11,1
8110f99c:	b817883a 	mov	r11,r23
8110f9a0:	2089883a 	add	r4,r4,r2
8110f9a4:	88bff404 	addi	r2,r17,-48
8110f9a8:	30bff92e 	bgeu	r6,r2,8110f990 <__reset+0xfb0ef990>
8110f9ac:	2005d716 	blt	r4,zero,8111110c <___svfprintf_internal_r+0x1b9c>
8110f9b0:	d9002915 	stw	r4,164(sp)
8110f9b4:	003f4506 	br	8110f6cc <__reset+0xfb0ef6cc>
8110f9b8:	b809883a 	mov	r4,r23
8110f9bc:	d8003115 	stw	zero,196(sp)
8110f9c0:	88bff404 	addi	r2,r17,-48
8110f9c4:	0017883a 	mov	r11,zero
8110f9c8:	24400007 	ldb	r17,0(r4)
8110f9cc:	5ac002a4 	muli	r11,r11,10
8110f9d0:	bdc00044 	addi	r23,r23,1
8110f9d4:	b809883a 	mov	r4,r23
8110f9d8:	12d7883a 	add	r11,r2,r11
8110f9dc:	88bff404 	addi	r2,r17,-48
8110f9e0:	30bff92e 	bgeu	r6,r2,8110f9c8 <__reset+0xfb0ef9c8>
8110f9e4:	dac03115 	stw	r11,196(sp)
8110f9e8:	003f3806 	br	8110f6cc <__reset+0xfb0ef6cc>
8110f9ec:	94802014 	ori	r18,r18,128
8110f9f0:	bc400007 	ldb	r17,0(r23)
8110f9f4:	003f3406 	br	8110f6c8 <__reset+0xfb0ef6c8>
8110f9f8:	18c03fcc 	andi	r3,r3,255
8110f9fc:	1807471e 	bne	r3,zero,8111171c <___svfprintf_internal_r+0x21ac>
8110fa00:	9080020c 	andi	r2,r18,8
8110fa04:	10047d26 	beq	r2,zero,81110bfc <___svfprintf_internal_r+0x168c>
8110fa08:	d8c02d17 	ldw	r3,180(sp)
8110fa0c:	d9002d17 	ldw	r4,180(sp)
8110fa10:	d9402d17 	ldw	r5,180(sp)
8110fa14:	18c00017 	ldw	r3,0(r3)
8110fa18:	21000117 	ldw	r4,4(r4)
8110fa1c:	29400204 	addi	r5,r5,8
8110fa20:	d8c03615 	stw	r3,216(sp)
8110fa24:	d9003715 	stw	r4,220(sp)
8110fa28:	d9402d15 	stw	r5,180(sp)
8110fa2c:	d9003617 	ldw	r4,216(sp)
8110fa30:	d9403717 	ldw	r5,220(sp)
8110fa34:	da003e15 	stw	r8,248(sp)
8110fa38:	04000044 	movi	r16,1
8110fa3c:	1119fbc0 	call	81119fbc <__fpclassifyd>
8110fa40:	da003e17 	ldw	r8,248(sp)
8110fa44:	14044b1e 	bne	r2,r16,81110b74 <___svfprintf_internal_r+0x1604>
8110fa48:	d9003617 	ldw	r4,216(sp)
8110fa4c:	d9403717 	ldw	r5,220(sp)
8110fa50:	000d883a 	mov	r6,zero
8110fa54:	000f883a 	mov	r7,zero
8110fa58:	11224640 	call	81122464 <__ledf2>
8110fa5c:	da003e17 	ldw	r8,248(sp)
8110fa60:	1005f316 	blt	r2,zero,81111230 <___svfprintf_internal_r+0x1cc0>
8110fa64:	df002783 	ldbu	fp,158(sp)
8110fa68:	008011c4 	movi	r2,71
8110fa6c:	1445590e 	bge	r2,r17,81110fd4 <___svfprintf_internal_r+0x1a64>
8110fa70:	04204534 	movhi	r16,33044
8110fa74:	842ad404 	addi	r16,r16,-21680
8110fa78:	00c000c4 	movi	r3,3
8110fa7c:	00bfdfc4 	movi	r2,-129
8110fa80:	d8c02a15 	stw	r3,168(sp)
8110fa84:	90a4703a 	and	r18,r18,r2
8110fa88:	d8c02e15 	stw	r3,184(sp)
8110fa8c:	d8002915 	stw	zero,164(sp)
8110fa90:	d8003215 	stw	zero,200(sp)
8110fa94:	00006606 	br	8110fc30 <___svfprintf_internal_r+0x6c0>
8110fa98:	94800214 	ori	r18,r18,8
8110fa9c:	bc400007 	ldb	r17,0(r23)
8110faa0:	003f0906 	br	8110f6c8 <__reset+0xfb0ef6c8>
8110faa4:	18c03fcc 	andi	r3,r3,255
8110faa8:	1807181e 	bne	r3,zero,8111170c <___svfprintf_internal_r+0x219c>
8110faac:	94800414 	ori	r18,r18,16
8110fab0:	9080080c 	andi	r2,r18,32
8110fab4:	10039626 	beq	r2,zero,81110910 <___svfprintf_internal_r+0x13a0>
8110fab8:	d9402d17 	ldw	r5,180(sp)
8110fabc:	28800117 	ldw	r2,4(r5)
8110fac0:	2d000017 	ldw	r20,0(r5)
8110fac4:	29400204 	addi	r5,r5,8
8110fac8:	d9402d15 	stw	r5,180(sp)
8110facc:	102d883a 	mov	r22,r2
8110fad0:	10039816 	blt	r2,zero,81110934 <___svfprintf_internal_r+0x13c4>
8110fad4:	d9402917 	ldw	r5,164(sp)
8110fad8:	df002783 	ldbu	fp,158(sp)
8110fadc:	2803ab16 	blt	r5,zero,8111098c <___svfprintf_internal_r+0x141c>
8110fae0:	00ffdfc4 	movi	r3,-129
8110fae4:	a584b03a 	or	r2,r20,r22
8110fae8:	90e4703a 	and	r18,r18,r3
8110faec:	10014a26 	beq	r2,zero,81110018 <___svfprintf_internal_r+0xaa8>
8110faf0:	b0034b26 	beq	r22,zero,81110820 <___svfprintf_internal_r+0x12b0>
8110faf4:	dc402a15 	stw	r17,168(sp)
8110faf8:	dc001e04 	addi	r16,sp,120
8110fafc:	b023883a 	mov	r17,r22
8110fb00:	402d883a 	mov	r22,r8
8110fb04:	a009883a 	mov	r4,r20
8110fb08:	880b883a 	mov	r5,r17
8110fb0c:	01800284 	movi	r6,10
8110fb10:	000f883a 	mov	r7,zero
8110fb14:	112086c0 	call	8112086c <__umoddi3>
8110fb18:	10800c04 	addi	r2,r2,48
8110fb1c:	843fffc4 	addi	r16,r16,-1
8110fb20:	a009883a 	mov	r4,r20
8110fb24:	880b883a 	mov	r5,r17
8110fb28:	80800005 	stb	r2,0(r16)
8110fb2c:	01800284 	movi	r6,10
8110fb30:	000f883a 	mov	r7,zero
8110fb34:	11202ec0 	call	811202ec <__udivdi3>
8110fb38:	1029883a 	mov	r20,r2
8110fb3c:	10c4b03a 	or	r2,r2,r3
8110fb40:	1823883a 	mov	r17,r3
8110fb44:	103fef1e 	bne	r2,zero,8110fb04 <__reset+0xfb0efb04>
8110fb48:	d8c02817 	ldw	r3,160(sp)
8110fb4c:	dc402a17 	ldw	r17,168(sp)
8110fb50:	b011883a 	mov	r8,r22
8110fb54:	1c07c83a 	sub	r3,r3,r16
8110fb58:	d8c02e15 	stw	r3,184(sp)
8110fb5c:	00002e06 	br	8110fc18 <___svfprintf_internal_r+0x6a8>
8110fb60:	18c03fcc 	andi	r3,r3,255
8110fb64:	1806e71e 	bne	r3,zero,81111704 <___svfprintf_internal_r+0x2194>
8110fb68:	94800414 	ori	r18,r18,16
8110fb6c:	9080080c 	andi	r2,r18,32
8110fb70:	1002d426 	beq	r2,zero,811106c4 <___svfprintf_internal_r+0x1154>
8110fb74:	d9402d17 	ldw	r5,180(sp)
8110fb78:	d8c02917 	ldw	r3,164(sp)
8110fb7c:	d8002785 	stb	zero,158(sp)
8110fb80:	28800204 	addi	r2,r5,8
8110fb84:	2d000017 	ldw	r20,0(r5)
8110fb88:	2d800117 	ldw	r22,4(r5)
8110fb8c:	18041516 	blt	r3,zero,81110be4 <___svfprintf_internal_r+0x1674>
8110fb90:	013fdfc4 	movi	r4,-129
8110fb94:	a586b03a 	or	r3,r20,r22
8110fb98:	d8802d15 	stw	r2,180(sp)
8110fb9c:	9124703a 	and	r18,r18,r4
8110fba0:	1802d51e 	bne	r3,zero,811106f8 <___svfprintf_internal_r+0x1188>
8110fba4:	d9402917 	ldw	r5,164(sp)
8110fba8:	0039883a 	mov	fp,zero
8110fbac:	2806be26 	beq	r5,zero,811116a8 <___svfprintf_internal_r+0x2138>
8110fbb0:	0029883a 	mov	r20,zero
8110fbb4:	002d883a 	mov	r22,zero
8110fbb8:	dc001e04 	addi	r16,sp,120
8110fbbc:	a006d0fa 	srli	r3,r20,3
8110fbc0:	b008977a 	slli	r4,r22,29
8110fbc4:	b02cd0fa 	srli	r22,r22,3
8110fbc8:	a50001cc 	andi	r20,r20,7
8110fbcc:	a0800c04 	addi	r2,r20,48
8110fbd0:	843fffc4 	addi	r16,r16,-1
8110fbd4:	20e8b03a 	or	r20,r4,r3
8110fbd8:	80800005 	stb	r2,0(r16)
8110fbdc:	a586b03a 	or	r3,r20,r22
8110fbe0:	183ff61e 	bne	r3,zero,8110fbbc <__reset+0xfb0efbbc>
8110fbe4:	90c0004c 	andi	r3,r18,1
8110fbe8:	18013926 	beq	r3,zero,811100d0 <___svfprintf_internal_r+0xb60>
8110fbec:	10803fcc 	andi	r2,r2,255
8110fbf0:	1080201c 	xori	r2,r2,128
8110fbf4:	10bfe004 	addi	r2,r2,-128
8110fbf8:	00c00c04 	movi	r3,48
8110fbfc:	10c13426 	beq	r2,r3,811100d0 <___svfprintf_internal_r+0xb60>
8110fc00:	80ffffc5 	stb	r3,-1(r16)
8110fc04:	d8c02817 	ldw	r3,160(sp)
8110fc08:	80bfffc4 	addi	r2,r16,-1
8110fc0c:	1021883a 	mov	r16,r2
8110fc10:	1887c83a 	sub	r3,r3,r2
8110fc14:	d8c02e15 	stw	r3,184(sp)
8110fc18:	d8802e17 	ldw	r2,184(sp)
8110fc1c:	d9002917 	ldw	r4,164(sp)
8110fc20:	1100010e 	bge	r2,r4,8110fc28 <___svfprintf_internal_r+0x6b8>
8110fc24:	2005883a 	mov	r2,r4
8110fc28:	d8802a15 	stw	r2,168(sp)
8110fc2c:	d8003215 	stw	zero,200(sp)
8110fc30:	e7003fcc 	andi	fp,fp,255
8110fc34:	e700201c 	xori	fp,fp,128
8110fc38:	e73fe004 	addi	fp,fp,-128
8110fc3c:	e0000326 	beq	fp,zero,8110fc4c <___svfprintf_internal_r+0x6dc>
8110fc40:	d8c02a17 	ldw	r3,168(sp)
8110fc44:	18c00044 	addi	r3,r3,1
8110fc48:	d8c02a15 	stw	r3,168(sp)
8110fc4c:	90c0008c 	andi	r3,r18,2
8110fc50:	d8c02b15 	stw	r3,172(sp)
8110fc54:	18000326 	beq	r3,zero,8110fc64 <___svfprintf_internal_r+0x6f4>
8110fc58:	d8c02a17 	ldw	r3,168(sp)
8110fc5c:	18c00084 	addi	r3,r3,2
8110fc60:	d8c02a15 	stw	r3,168(sp)
8110fc64:	90c0210c 	andi	r3,r18,132
8110fc68:	d8c03015 	stw	r3,192(sp)
8110fc6c:	1801a11e 	bne	r3,zero,811102f4 <___svfprintf_internal_r+0xd84>
8110fc70:	d9003117 	ldw	r4,196(sp)
8110fc74:	d8c02a17 	ldw	r3,168(sp)
8110fc78:	20e9c83a 	sub	r20,r4,r3
8110fc7c:	05019d0e 	bge	zero,r20,811102f4 <___svfprintf_internal_r+0xd84>
8110fc80:	02400404 	movi	r9,16
8110fc84:	d8c02017 	ldw	r3,128(sp)
8110fc88:	d8801f17 	ldw	r2,124(sp)
8110fc8c:	4d051b0e 	bge	r9,r20,811110fc <___svfprintf_internal_r+0x1b8c>
8110fc90:	01604534 	movhi	r5,33044
8110fc94:	296ae784 	addi	r5,r5,-21602
8110fc98:	dc403c15 	stw	r17,240(sp)
8110fc9c:	d9403515 	stw	r5,212(sp)
8110fca0:	a023883a 	mov	r17,r20
8110fca4:	482d883a 	mov	r22,r9
8110fca8:	9029883a 	mov	r20,r18
8110fcac:	070001c4 	movi	fp,7
8110fcb0:	8025883a 	mov	r18,r16
8110fcb4:	dc002c17 	ldw	r16,176(sp)
8110fcb8:	00000306 	br	8110fcc8 <___svfprintf_internal_r+0x758>
8110fcbc:	8c7ffc04 	addi	r17,r17,-16
8110fcc0:	42000204 	addi	r8,r8,8
8110fcc4:	b440130e 	bge	r22,r17,8110fd14 <___svfprintf_internal_r+0x7a4>
8110fcc8:	01204534 	movhi	r4,33044
8110fccc:	18c00404 	addi	r3,r3,16
8110fcd0:	10800044 	addi	r2,r2,1
8110fcd4:	212ae784 	addi	r4,r4,-21602
8110fcd8:	41000015 	stw	r4,0(r8)
8110fcdc:	45800115 	stw	r22,4(r8)
8110fce0:	d8c02015 	stw	r3,128(sp)
8110fce4:	d8801f15 	stw	r2,124(sp)
8110fce8:	e0bff40e 	bge	fp,r2,8110fcbc <__reset+0xfb0efcbc>
8110fcec:	d9801e04 	addi	r6,sp,120
8110fcf0:	800b883a 	mov	r5,r16
8110fcf4:	9809883a 	mov	r4,r19
8110fcf8:	111c1a80 	call	8111c1a8 <__ssprint_r>
8110fcfc:	103f031e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
8110fd00:	8c7ffc04 	addi	r17,r17,-16
8110fd04:	d8c02017 	ldw	r3,128(sp)
8110fd08:	d8801f17 	ldw	r2,124(sp)
8110fd0c:	da000404 	addi	r8,sp,16
8110fd10:	b47fed16 	blt	r22,r17,8110fcc8 <__reset+0xfb0efcc8>
8110fd14:	9021883a 	mov	r16,r18
8110fd18:	a025883a 	mov	r18,r20
8110fd1c:	8829883a 	mov	r20,r17
8110fd20:	dc403c17 	ldw	r17,240(sp)
8110fd24:	d9403517 	ldw	r5,212(sp)
8110fd28:	a0c7883a 	add	r3,r20,r3
8110fd2c:	10800044 	addi	r2,r2,1
8110fd30:	41400015 	stw	r5,0(r8)
8110fd34:	45000115 	stw	r20,4(r8)
8110fd38:	d8c02015 	stw	r3,128(sp)
8110fd3c:	d8801f15 	stw	r2,124(sp)
8110fd40:	010001c4 	movi	r4,7
8110fd44:	20829f16 	blt	r4,r2,811107c4 <___svfprintf_internal_r+0x1254>
8110fd48:	df002787 	ldb	fp,158(sp)
8110fd4c:	42000204 	addi	r8,r8,8
8110fd50:	e0000c26 	beq	fp,zero,8110fd84 <___svfprintf_internal_r+0x814>
8110fd54:	d8801f17 	ldw	r2,124(sp)
8110fd58:	d9002784 	addi	r4,sp,158
8110fd5c:	18c00044 	addi	r3,r3,1
8110fd60:	10800044 	addi	r2,r2,1
8110fd64:	41000015 	stw	r4,0(r8)
8110fd68:	01000044 	movi	r4,1
8110fd6c:	41000115 	stw	r4,4(r8)
8110fd70:	d8c02015 	stw	r3,128(sp)
8110fd74:	d8801f15 	stw	r2,124(sp)
8110fd78:	010001c4 	movi	r4,7
8110fd7c:	20823816 	blt	r4,r2,81110660 <___svfprintf_internal_r+0x10f0>
8110fd80:	42000204 	addi	r8,r8,8
8110fd84:	d8802b17 	ldw	r2,172(sp)
8110fd88:	10000c26 	beq	r2,zero,8110fdbc <___svfprintf_internal_r+0x84c>
8110fd8c:	d8801f17 	ldw	r2,124(sp)
8110fd90:	d9002704 	addi	r4,sp,156
8110fd94:	18c00084 	addi	r3,r3,2
8110fd98:	10800044 	addi	r2,r2,1
8110fd9c:	41000015 	stw	r4,0(r8)
8110fda0:	01000084 	movi	r4,2
8110fda4:	41000115 	stw	r4,4(r8)
8110fda8:	d8c02015 	stw	r3,128(sp)
8110fdac:	d8801f15 	stw	r2,124(sp)
8110fdb0:	010001c4 	movi	r4,7
8110fdb4:	20823216 	blt	r4,r2,81110680 <___svfprintf_internal_r+0x1110>
8110fdb8:	42000204 	addi	r8,r8,8
8110fdbc:	d9003017 	ldw	r4,192(sp)
8110fdc0:	00802004 	movi	r2,128
8110fdc4:	20819726 	beq	r4,r2,81110424 <___svfprintf_internal_r+0xeb4>
8110fdc8:	d9402917 	ldw	r5,164(sp)
8110fdcc:	d8802e17 	ldw	r2,184(sp)
8110fdd0:	28adc83a 	sub	r22,r5,r2
8110fdd4:	05802f0e 	bge	zero,r22,8110fe94 <___svfprintf_internal_r+0x924>
8110fdd8:	07000404 	movi	fp,16
8110fddc:	d8801f17 	ldw	r2,124(sp)
8110fde0:	e583c00e 	bge	fp,r22,81110ce4 <___svfprintf_internal_r+0x1774>
8110fde4:	01604534 	movhi	r5,33044
8110fde8:	296ae384 	addi	r5,r5,-21618
8110fdec:	dc402915 	stw	r17,164(sp)
8110fdf0:	d9402b15 	stw	r5,172(sp)
8110fdf4:	b023883a 	mov	r17,r22
8110fdf8:	050001c4 	movi	r20,7
8110fdfc:	902d883a 	mov	r22,r18
8110fe00:	8025883a 	mov	r18,r16
8110fe04:	dc002c17 	ldw	r16,176(sp)
8110fe08:	00000306 	br	8110fe18 <___svfprintf_internal_r+0x8a8>
8110fe0c:	8c7ffc04 	addi	r17,r17,-16
8110fe10:	42000204 	addi	r8,r8,8
8110fe14:	e440110e 	bge	fp,r17,8110fe5c <___svfprintf_internal_r+0x8ec>
8110fe18:	18c00404 	addi	r3,r3,16
8110fe1c:	10800044 	addi	r2,r2,1
8110fe20:	45400015 	stw	r21,0(r8)
8110fe24:	47000115 	stw	fp,4(r8)
8110fe28:	d8c02015 	stw	r3,128(sp)
8110fe2c:	d8801f15 	stw	r2,124(sp)
8110fe30:	a0bff60e 	bge	r20,r2,8110fe0c <__reset+0xfb0efe0c>
8110fe34:	d9801e04 	addi	r6,sp,120
8110fe38:	800b883a 	mov	r5,r16
8110fe3c:	9809883a 	mov	r4,r19
8110fe40:	111c1a80 	call	8111c1a8 <__ssprint_r>
8110fe44:	103eb11e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
8110fe48:	8c7ffc04 	addi	r17,r17,-16
8110fe4c:	d8c02017 	ldw	r3,128(sp)
8110fe50:	d8801f17 	ldw	r2,124(sp)
8110fe54:	da000404 	addi	r8,sp,16
8110fe58:	e47fef16 	blt	fp,r17,8110fe18 <__reset+0xfb0efe18>
8110fe5c:	9021883a 	mov	r16,r18
8110fe60:	b025883a 	mov	r18,r22
8110fe64:	882d883a 	mov	r22,r17
8110fe68:	dc402917 	ldw	r17,164(sp)
8110fe6c:	d9002b17 	ldw	r4,172(sp)
8110fe70:	1d87883a 	add	r3,r3,r22
8110fe74:	10800044 	addi	r2,r2,1
8110fe78:	41000015 	stw	r4,0(r8)
8110fe7c:	45800115 	stw	r22,4(r8)
8110fe80:	d8c02015 	stw	r3,128(sp)
8110fe84:	d8801f15 	stw	r2,124(sp)
8110fe88:	010001c4 	movi	r4,7
8110fe8c:	2081ec16 	blt	r4,r2,81110640 <___svfprintf_internal_r+0x10d0>
8110fe90:	42000204 	addi	r8,r8,8
8110fe94:	9080400c 	andi	r2,r18,256
8110fe98:	1001181e 	bne	r2,zero,811102fc <___svfprintf_internal_r+0xd8c>
8110fe9c:	d9402e17 	ldw	r5,184(sp)
8110fea0:	d8801f17 	ldw	r2,124(sp)
8110fea4:	44000015 	stw	r16,0(r8)
8110fea8:	1947883a 	add	r3,r3,r5
8110feac:	10800044 	addi	r2,r2,1
8110feb0:	41400115 	stw	r5,4(r8)
8110feb4:	d8c02015 	stw	r3,128(sp)
8110feb8:	d8801f15 	stw	r2,124(sp)
8110febc:	010001c4 	movi	r4,7
8110fec0:	2081d116 	blt	r4,r2,81110608 <___svfprintf_internal_r+0x1098>
8110fec4:	42000204 	addi	r8,r8,8
8110fec8:	9480010c 	andi	r18,r18,4
8110fecc:	90003226 	beq	r18,zero,8110ff98 <___svfprintf_internal_r+0xa28>
8110fed0:	d9403117 	ldw	r5,196(sp)
8110fed4:	d8802a17 	ldw	r2,168(sp)
8110fed8:	28a1c83a 	sub	r16,r5,r2
8110fedc:	04002e0e 	bge	zero,r16,8110ff98 <___svfprintf_internal_r+0xa28>
8110fee0:	04400404 	movi	r17,16
8110fee4:	d8801f17 	ldw	r2,124(sp)
8110fee8:	8c04b90e 	bge	r17,r16,811111d0 <___svfprintf_internal_r+0x1c60>
8110feec:	01604534 	movhi	r5,33044
8110fef0:	296ae784 	addi	r5,r5,-21602
8110fef4:	d9403515 	stw	r5,212(sp)
8110fef8:	048001c4 	movi	r18,7
8110fefc:	dd002c17 	ldw	r20,176(sp)
8110ff00:	00000306 	br	8110ff10 <___svfprintf_internal_r+0x9a0>
8110ff04:	843ffc04 	addi	r16,r16,-16
8110ff08:	42000204 	addi	r8,r8,8
8110ff0c:	8c00130e 	bge	r17,r16,8110ff5c <___svfprintf_internal_r+0x9ec>
8110ff10:	01204534 	movhi	r4,33044
8110ff14:	18c00404 	addi	r3,r3,16
8110ff18:	10800044 	addi	r2,r2,1
8110ff1c:	212ae784 	addi	r4,r4,-21602
8110ff20:	41000015 	stw	r4,0(r8)
8110ff24:	44400115 	stw	r17,4(r8)
8110ff28:	d8c02015 	stw	r3,128(sp)
8110ff2c:	d8801f15 	stw	r2,124(sp)
8110ff30:	90bff40e 	bge	r18,r2,8110ff04 <__reset+0xfb0eff04>
8110ff34:	d9801e04 	addi	r6,sp,120
8110ff38:	a00b883a 	mov	r5,r20
8110ff3c:	9809883a 	mov	r4,r19
8110ff40:	111c1a80 	call	8111c1a8 <__ssprint_r>
8110ff44:	103e711e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
8110ff48:	843ffc04 	addi	r16,r16,-16
8110ff4c:	d8c02017 	ldw	r3,128(sp)
8110ff50:	d8801f17 	ldw	r2,124(sp)
8110ff54:	da000404 	addi	r8,sp,16
8110ff58:	8c3fed16 	blt	r17,r16,8110ff10 <__reset+0xfb0eff10>
8110ff5c:	d9403517 	ldw	r5,212(sp)
8110ff60:	1c07883a 	add	r3,r3,r16
8110ff64:	10800044 	addi	r2,r2,1
8110ff68:	41400015 	stw	r5,0(r8)
8110ff6c:	44000115 	stw	r16,4(r8)
8110ff70:	d8c02015 	stw	r3,128(sp)
8110ff74:	d8801f15 	stw	r2,124(sp)
8110ff78:	010001c4 	movi	r4,7
8110ff7c:	2080060e 	bge	r4,r2,8110ff98 <___svfprintf_internal_r+0xa28>
8110ff80:	d9402c17 	ldw	r5,176(sp)
8110ff84:	d9801e04 	addi	r6,sp,120
8110ff88:	9809883a 	mov	r4,r19
8110ff8c:	111c1a80 	call	8111c1a8 <__ssprint_r>
8110ff90:	103e5e1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
8110ff94:	d8c02017 	ldw	r3,128(sp)
8110ff98:	d8803117 	ldw	r2,196(sp)
8110ff9c:	d9002a17 	ldw	r4,168(sp)
8110ffa0:	1100010e 	bge	r2,r4,8110ffa8 <___svfprintf_internal_r+0xa38>
8110ffa4:	2005883a 	mov	r2,r4
8110ffa8:	d9402f17 	ldw	r5,188(sp)
8110ffac:	288b883a 	add	r5,r5,r2
8110ffb0:	d9402f15 	stw	r5,188(sp)
8110ffb4:	18019c1e 	bne	r3,zero,81110628 <___svfprintf_internal_r+0x10b8>
8110ffb8:	b8800007 	ldb	r2,0(r23)
8110ffbc:	d8001f15 	stw	zero,124(sp)
8110ffc0:	da000404 	addi	r8,sp,16
8110ffc4:	103d991e 	bne	r2,zero,8110f62c <__reset+0xfb0ef62c>
8110ffc8:	b821883a 	mov	r16,r23
8110ffcc:	003daf06 	br	8110f68c <__reset+0xfb0ef68c>
8110ffd0:	18c03fcc 	andi	r3,r3,255
8110ffd4:	1805c71e 	bne	r3,zero,811116f4 <___svfprintf_internal_r+0x2184>
8110ffd8:	94800414 	ori	r18,r18,16
8110ffdc:	9080080c 	andi	r2,r18,32
8110ffe0:	10020126 	beq	r2,zero,811107e8 <___svfprintf_internal_r+0x1278>
8110ffe4:	d8802d17 	ldw	r2,180(sp)
8110ffe8:	d9002917 	ldw	r4,164(sp)
8110ffec:	d8002785 	stb	zero,158(sp)
8110fff0:	10c00204 	addi	r3,r2,8
8110fff4:	15000017 	ldw	r20,0(r2)
8110fff8:	15800117 	ldw	r22,4(r2)
8110fffc:	20038e16 	blt	r4,zero,81110e38 <___svfprintf_internal_r+0x18c8>
81110000:	013fdfc4 	movi	r4,-129
81110004:	a584b03a 	or	r2,r20,r22
81110008:	d8c02d15 	stw	r3,180(sp)
8111000c:	9124703a 	and	r18,r18,r4
81110010:	0039883a 	mov	fp,zero
81110014:	103eb61e 	bne	r2,zero,8110faf0 <__reset+0xfb0efaf0>
81110018:	d8802917 	ldw	r2,164(sp)
8111001c:	1002c81e 	bne	r2,zero,81110b40 <___svfprintf_internal_r+0x15d0>
81110020:	d8002915 	stw	zero,164(sp)
81110024:	d8002e15 	stw	zero,184(sp)
81110028:	dc001e04 	addi	r16,sp,120
8111002c:	003efa06 	br	8110fc18 <__reset+0xfb0efc18>
81110030:	18c03fcc 	andi	r3,r3,255
81110034:	1805ad1e 	bne	r3,zero,811116ec <___svfprintf_internal_r+0x217c>
81110038:	01604534 	movhi	r5,33044
8111003c:	296ad704 	addi	r5,r5,-21668
81110040:	d9403a15 	stw	r5,232(sp)
81110044:	9080080c 	andi	r2,r18,32
81110048:	10006126 	beq	r2,zero,811101d0 <___svfprintf_internal_r+0xc60>
8111004c:	d8802d17 	ldw	r2,180(sp)
81110050:	15000017 	ldw	r20,0(r2)
81110054:	15800117 	ldw	r22,4(r2)
81110058:	10800204 	addi	r2,r2,8
8111005c:	d8802d15 	stw	r2,180(sp)
81110060:	9080004c 	andi	r2,r18,1
81110064:	10018e26 	beq	r2,zero,811106a0 <___svfprintf_internal_r+0x1130>
81110068:	a584b03a 	or	r2,r20,r22
8111006c:	10030926 	beq	r2,zero,81110c94 <___svfprintf_internal_r+0x1724>
81110070:	d8c02917 	ldw	r3,164(sp)
81110074:	00800c04 	movi	r2,48
81110078:	d8802705 	stb	r2,156(sp)
8111007c:	dc402745 	stb	r17,157(sp)
81110080:	d8002785 	stb	zero,158(sp)
81110084:	90800094 	ori	r2,r18,2
81110088:	18048716 	blt	r3,zero,811112a8 <___svfprintf_internal_r+0x1d38>
8111008c:	00bfdfc4 	movi	r2,-129
81110090:	90a4703a 	and	r18,r18,r2
81110094:	94800094 	ori	r18,r18,2
81110098:	0039883a 	mov	fp,zero
8111009c:	d9003a17 	ldw	r4,232(sp)
811100a0:	dc001e04 	addi	r16,sp,120
811100a4:	a08003cc 	andi	r2,r20,15
811100a8:	b006973a 	slli	r3,r22,28
811100ac:	2085883a 	add	r2,r4,r2
811100b0:	a028d13a 	srli	r20,r20,4
811100b4:	10800003 	ldbu	r2,0(r2)
811100b8:	b02cd13a 	srli	r22,r22,4
811100bc:	843fffc4 	addi	r16,r16,-1
811100c0:	1d28b03a 	or	r20,r3,r20
811100c4:	80800005 	stb	r2,0(r16)
811100c8:	a584b03a 	or	r2,r20,r22
811100cc:	103ff51e 	bne	r2,zero,811100a4 <__reset+0xfb0f00a4>
811100d0:	d8c02817 	ldw	r3,160(sp)
811100d4:	1c07c83a 	sub	r3,r3,r16
811100d8:	d8c02e15 	stw	r3,184(sp)
811100dc:	003ece06 	br	8110fc18 <__reset+0xfb0efc18>
811100e0:	d8c02d17 	ldw	r3,180(sp)
811100e4:	d9002d17 	ldw	r4,180(sp)
811100e8:	d8002785 	stb	zero,158(sp)
811100ec:	18800017 	ldw	r2,0(r3)
811100f0:	21000104 	addi	r4,r4,4
811100f4:	00c00044 	movi	r3,1
811100f8:	d8c02a15 	stw	r3,168(sp)
811100fc:	d8801405 	stb	r2,80(sp)
81110100:	d9002d15 	stw	r4,180(sp)
81110104:	d8c02e15 	stw	r3,184(sp)
81110108:	d8002915 	stw	zero,164(sp)
8111010c:	d8003215 	stw	zero,200(sp)
81110110:	dc001404 	addi	r16,sp,80
81110114:	0039883a 	mov	fp,zero
81110118:	003ecc06 	br	8110fc4c <__reset+0xfb0efc4c>
8111011c:	18c03fcc 	andi	r3,r3,255
81110120:	183e9226 	beq	r3,zero,8110fb6c <__reset+0xfb0efb6c>
81110124:	d9c02785 	stb	r7,158(sp)
81110128:	003e9006 	br	8110fb6c <__reset+0xfb0efb6c>
8111012c:	00c00044 	movi	r3,1
81110130:	01c00ac4 	movi	r7,43
81110134:	bc400007 	ldb	r17,0(r23)
81110138:	003d6306 	br	8110f6c8 <__reset+0xfb0ef6c8>
8111013c:	94800814 	ori	r18,r18,32
81110140:	bc400007 	ldb	r17,0(r23)
81110144:	003d6006 	br	8110f6c8 <__reset+0xfb0ef6c8>
81110148:	d8c02d17 	ldw	r3,180(sp)
8111014c:	d8002785 	stb	zero,158(sp)
81110150:	1c000017 	ldw	r16,0(r3)
81110154:	1d000104 	addi	r20,r3,4
81110158:	80040f26 	beq	r16,zero,81111198 <___svfprintf_internal_r+0x1c28>
8111015c:	d9002917 	ldw	r4,164(sp)
81110160:	2003dc16 	blt	r4,zero,811110d4 <___svfprintf_internal_r+0x1b64>
81110164:	200d883a 	mov	r6,r4
81110168:	000b883a 	mov	r5,zero
8111016c:	8009883a 	mov	r4,r16
81110170:	da003e15 	stw	r8,248(sp)
81110174:	11185d40 	call	811185d4 <memchr>
81110178:	da003e17 	ldw	r8,248(sp)
8111017c:	10045826 	beq	r2,zero,811112e0 <___svfprintf_internal_r+0x1d70>
81110180:	1405c83a 	sub	r2,r2,r16
81110184:	d8802e15 	stw	r2,184(sp)
81110188:	1003d816 	blt	r2,zero,811110ec <___svfprintf_internal_r+0x1b7c>
8111018c:	df002783 	ldbu	fp,158(sp)
81110190:	d8802a15 	stw	r2,168(sp)
81110194:	dd002d15 	stw	r20,180(sp)
81110198:	d8002915 	stw	zero,164(sp)
8111019c:	d8003215 	stw	zero,200(sp)
811101a0:	003ea306 	br	8110fc30 <__reset+0xfb0efc30>
811101a4:	18c03fcc 	andi	r3,r3,255
811101a8:	183f8c26 	beq	r3,zero,8110ffdc <__reset+0xfb0effdc>
811101ac:	d9c02785 	stb	r7,158(sp)
811101b0:	003f8a06 	br	8110ffdc <__reset+0xfb0effdc>
811101b4:	18c03fcc 	andi	r3,r3,255
811101b8:	1805631e 	bne	r3,zero,81111748 <___svfprintf_internal_r+0x21d8>
811101bc:	01604534 	movhi	r5,33044
811101c0:	296adc04 	addi	r5,r5,-21648
811101c4:	d9403a15 	stw	r5,232(sp)
811101c8:	9080080c 	andi	r2,r18,32
811101cc:	103f9f1e 	bne	r2,zero,8111004c <__reset+0xfb0f004c>
811101d0:	9080040c 	andi	r2,r18,16
811101d4:	10029c26 	beq	r2,zero,81110c48 <___svfprintf_internal_r+0x16d8>
811101d8:	d8c02d17 	ldw	r3,180(sp)
811101dc:	002d883a 	mov	r22,zero
811101e0:	1d000017 	ldw	r20,0(r3)
811101e4:	18c00104 	addi	r3,r3,4
811101e8:	d8c02d15 	stw	r3,180(sp)
811101ec:	003f9c06 	br	81110060 <__reset+0xfb0f0060>
811101f0:	94800054 	ori	r18,r18,1
811101f4:	bc400007 	ldb	r17,0(r23)
811101f8:	003d3306 	br	8110f6c8 <__reset+0xfb0ef6c8>
811101fc:	38803fcc 	andi	r2,r7,255
81110200:	1080201c 	xori	r2,r2,128
81110204:	10bfe004 	addi	r2,r2,-128
81110208:	1002971e 	bne	r2,zero,81110c68 <___svfprintf_internal_r+0x16f8>
8111020c:	00c00044 	movi	r3,1
81110210:	01c00804 	movi	r7,32
81110214:	bc400007 	ldb	r17,0(r23)
81110218:	003d2b06 	br	8110f6c8 <__reset+0xfb0ef6c8>
8111021c:	18c03fcc 	andi	r3,r3,255
81110220:	183e2326 	beq	r3,zero,8110fab0 <__reset+0xfb0efab0>
81110224:	d9c02785 	stb	r7,158(sp)
81110228:	003e2106 	br	8110fab0 <__reset+0xfb0efab0>
8111022c:	bc400007 	ldb	r17,0(r23)
81110230:	8a430426 	beq	r17,r9,81110e44 <___svfprintf_internal_r+0x18d4>
81110234:	94800414 	ori	r18,r18,16
81110238:	003d2306 	br	8110f6c8 <__reset+0xfb0ef6c8>
8111023c:	18c03fcc 	andi	r3,r3,255
81110240:	18053f1e 	bne	r3,zero,81111740 <___svfprintf_internal_r+0x21d0>
81110244:	9080080c 	andi	r2,r18,32
81110248:	10028926 	beq	r2,zero,81110c70 <___svfprintf_internal_r+0x1700>
8111024c:	d9402d17 	ldw	r5,180(sp)
81110250:	d9002f17 	ldw	r4,188(sp)
81110254:	28800017 	ldw	r2,0(r5)
81110258:	2007d7fa 	srai	r3,r4,31
8111025c:	29400104 	addi	r5,r5,4
81110260:	d9402d15 	stw	r5,180(sp)
81110264:	11000015 	stw	r4,0(r2)
81110268:	10c00115 	stw	r3,4(r2)
8111026c:	003ced06 	br	8110f624 <__reset+0xfb0ef624>
81110270:	94801014 	ori	r18,r18,64
81110274:	bc400007 	ldb	r17,0(r23)
81110278:	003d1306 	br	8110f6c8 <__reset+0xfb0ef6c8>
8111027c:	01204534 	movhi	r4,33044
81110280:	212adc04 	addi	r4,r4,-21648
81110284:	0039883a 	mov	fp,zero
81110288:	d9003a15 	stw	r4,232(sp)
8111028c:	04401e04 	movi	r17,120
81110290:	003f8206 	br	8111009c <__reset+0xfb0f009c>
81110294:	18c03fcc 	andi	r3,r3,255
81110298:	1805221e 	bne	r3,zero,81111724 <___svfprintf_internal_r+0x21b4>
8111029c:	883d9526 	beq	r17,zero,8110f8f4 <__reset+0xfb0ef8f4>
811102a0:	00c00044 	movi	r3,1
811102a4:	d8c02a15 	stw	r3,168(sp)
811102a8:	dc401405 	stb	r17,80(sp)
811102ac:	d8002785 	stb	zero,158(sp)
811102b0:	003f9406 	br	81110104 <__reset+0xfb0f0104>
811102b4:	01204534 	movhi	r4,33044
811102b8:	212adc04 	addi	r4,r4,-21648
811102bc:	d9003a15 	stw	r4,232(sp)
811102c0:	d8c02d15 	stw	r3,180(sp)
811102c4:	1025883a 	mov	r18,r2
811102c8:	04401e04 	movi	r17,120
811102cc:	a584b03a 	or	r2,r20,r22
811102d0:	1000fa1e 	bne	r2,zero,811106bc <___svfprintf_internal_r+0x114c>
811102d4:	0039883a 	mov	fp,zero
811102d8:	00800084 	movi	r2,2
811102dc:	10803fcc 	andi	r2,r2,255
811102e0:	00c00044 	movi	r3,1
811102e4:	10c21626 	beq	r2,r3,81110b40 <___svfprintf_internal_r+0x15d0>
811102e8:	00c00084 	movi	r3,2
811102ec:	10fe301e 	bne	r2,r3,8110fbb0 <__reset+0xfb0efbb0>
811102f0:	003d7606 	br	8110f8cc <__reset+0xfb0ef8cc>
811102f4:	d8c02017 	ldw	r3,128(sp)
811102f8:	003e9506 	br	8110fd50 <__reset+0xfb0efd50>
811102fc:	00801944 	movi	r2,101
81110300:	14407c0e 	bge	r2,r17,811104f4 <___svfprintf_internal_r+0xf84>
81110304:	d9003617 	ldw	r4,216(sp)
81110308:	d9403717 	ldw	r5,220(sp)
8111030c:	000d883a 	mov	r6,zero
81110310:	000f883a 	mov	r7,zero
81110314:	d8c03d15 	stw	r3,244(sp)
81110318:	da003e15 	stw	r8,248(sp)
8111031c:	11223000 	call	81122300 <__eqdf2>
81110320:	d8c03d17 	ldw	r3,244(sp)
81110324:	da003e17 	ldw	r8,248(sp)
81110328:	1000f51e 	bne	r2,zero,81110700 <___svfprintf_internal_r+0x1190>
8111032c:	d8801f17 	ldw	r2,124(sp)
81110330:	01204534 	movhi	r4,33044
81110334:	212ae304 	addi	r4,r4,-21620
81110338:	18c00044 	addi	r3,r3,1
8111033c:	10800044 	addi	r2,r2,1
81110340:	41000015 	stw	r4,0(r8)
81110344:	01000044 	movi	r4,1
81110348:	41000115 	stw	r4,4(r8)
8111034c:	d8c02015 	stw	r3,128(sp)
81110350:	d8801f15 	stw	r2,124(sp)
81110354:	010001c4 	movi	r4,7
81110358:	20826616 	blt	r4,r2,81110cf4 <___svfprintf_internal_r+0x1784>
8111035c:	42000204 	addi	r8,r8,8
81110360:	d8802617 	ldw	r2,152(sp)
81110364:	d9403317 	ldw	r5,204(sp)
81110368:	11400216 	blt	r2,r5,81110374 <___svfprintf_internal_r+0xe04>
8111036c:	9080004c 	andi	r2,r18,1
81110370:	103ed526 	beq	r2,zero,8110fec8 <__reset+0xfb0efec8>
81110374:	d8803817 	ldw	r2,224(sp)
81110378:	d9003417 	ldw	r4,208(sp)
8111037c:	d9403817 	ldw	r5,224(sp)
81110380:	1887883a 	add	r3,r3,r2
81110384:	d8801f17 	ldw	r2,124(sp)
81110388:	41000015 	stw	r4,0(r8)
8111038c:	41400115 	stw	r5,4(r8)
81110390:	10800044 	addi	r2,r2,1
81110394:	d8c02015 	stw	r3,128(sp)
81110398:	d8801f15 	stw	r2,124(sp)
8111039c:	010001c4 	movi	r4,7
811103a0:	2082af16 	blt	r4,r2,81110e60 <___svfprintf_internal_r+0x18f0>
811103a4:	42000204 	addi	r8,r8,8
811103a8:	d8803317 	ldw	r2,204(sp)
811103ac:	143fffc4 	addi	r16,r2,-1
811103b0:	043ec50e 	bge	zero,r16,8110fec8 <__reset+0xfb0efec8>
811103b4:	04400404 	movi	r17,16
811103b8:	d8801f17 	ldw	r2,124(sp)
811103bc:	8c00860e 	bge	r17,r16,811105d8 <___svfprintf_internal_r+0x1068>
811103c0:	01604534 	movhi	r5,33044
811103c4:	296ae384 	addi	r5,r5,-21618
811103c8:	d9402b15 	stw	r5,172(sp)
811103cc:	058001c4 	movi	r22,7
811103d0:	dd002c17 	ldw	r20,176(sp)
811103d4:	00000306 	br	811103e4 <___svfprintf_internal_r+0xe74>
811103d8:	42000204 	addi	r8,r8,8
811103dc:	843ffc04 	addi	r16,r16,-16
811103e0:	8c00800e 	bge	r17,r16,811105e4 <___svfprintf_internal_r+0x1074>
811103e4:	18c00404 	addi	r3,r3,16
811103e8:	10800044 	addi	r2,r2,1
811103ec:	45400015 	stw	r21,0(r8)
811103f0:	44400115 	stw	r17,4(r8)
811103f4:	d8c02015 	stw	r3,128(sp)
811103f8:	d8801f15 	stw	r2,124(sp)
811103fc:	b0bff60e 	bge	r22,r2,811103d8 <__reset+0xfb0f03d8>
81110400:	d9801e04 	addi	r6,sp,120
81110404:	a00b883a 	mov	r5,r20
81110408:	9809883a 	mov	r4,r19
8111040c:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110410:	103d3e1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110414:	d8c02017 	ldw	r3,128(sp)
81110418:	d8801f17 	ldw	r2,124(sp)
8111041c:	da000404 	addi	r8,sp,16
81110420:	003fee06 	br	811103dc <__reset+0xfb0f03dc>
81110424:	d9403117 	ldw	r5,196(sp)
81110428:	d8802a17 	ldw	r2,168(sp)
8111042c:	28adc83a 	sub	r22,r5,r2
81110430:	05be650e 	bge	zero,r22,8110fdc8 <__reset+0xfb0efdc8>
81110434:	07000404 	movi	fp,16
81110438:	d8801f17 	ldw	r2,124(sp)
8111043c:	e583a20e 	bge	fp,r22,811112c8 <___svfprintf_internal_r+0x1d58>
81110440:	01604534 	movhi	r5,33044
81110444:	296ae384 	addi	r5,r5,-21618
81110448:	dc403015 	stw	r17,192(sp)
8111044c:	d9402b15 	stw	r5,172(sp)
81110450:	b023883a 	mov	r17,r22
81110454:	050001c4 	movi	r20,7
81110458:	902d883a 	mov	r22,r18
8111045c:	8025883a 	mov	r18,r16
81110460:	dc002c17 	ldw	r16,176(sp)
81110464:	00000306 	br	81110474 <___svfprintf_internal_r+0xf04>
81110468:	8c7ffc04 	addi	r17,r17,-16
8111046c:	42000204 	addi	r8,r8,8
81110470:	e440110e 	bge	fp,r17,811104b8 <___svfprintf_internal_r+0xf48>
81110474:	18c00404 	addi	r3,r3,16
81110478:	10800044 	addi	r2,r2,1
8111047c:	45400015 	stw	r21,0(r8)
81110480:	47000115 	stw	fp,4(r8)
81110484:	d8c02015 	stw	r3,128(sp)
81110488:	d8801f15 	stw	r2,124(sp)
8111048c:	a0bff60e 	bge	r20,r2,81110468 <__reset+0xfb0f0468>
81110490:	d9801e04 	addi	r6,sp,120
81110494:	800b883a 	mov	r5,r16
81110498:	9809883a 	mov	r4,r19
8111049c:	111c1a80 	call	8111c1a8 <__ssprint_r>
811104a0:	103d1a1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
811104a4:	8c7ffc04 	addi	r17,r17,-16
811104a8:	d8c02017 	ldw	r3,128(sp)
811104ac:	d8801f17 	ldw	r2,124(sp)
811104b0:	da000404 	addi	r8,sp,16
811104b4:	e47fef16 	blt	fp,r17,81110474 <__reset+0xfb0f0474>
811104b8:	9021883a 	mov	r16,r18
811104bc:	b025883a 	mov	r18,r22
811104c0:	882d883a 	mov	r22,r17
811104c4:	dc403017 	ldw	r17,192(sp)
811104c8:	d9002b17 	ldw	r4,172(sp)
811104cc:	1d87883a 	add	r3,r3,r22
811104d0:	10800044 	addi	r2,r2,1
811104d4:	41000015 	stw	r4,0(r8)
811104d8:	45800115 	stw	r22,4(r8)
811104dc:	d8c02015 	stw	r3,128(sp)
811104e0:	d8801f15 	stw	r2,124(sp)
811104e4:	010001c4 	movi	r4,7
811104e8:	20819a16 	blt	r4,r2,81110b54 <___svfprintf_internal_r+0x15e4>
811104ec:	42000204 	addi	r8,r8,8
811104f0:	003e3506 	br	8110fdc8 <__reset+0xfb0efdc8>
811104f4:	d9403317 	ldw	r5,204(sp)
811104f8:	00800044 	movi	r2,1
811104fc:	18c00044 	addi	r3,r3,1
81110500:	1141710e 	bge	r2,r5,81110ac8 <___svfprintf_internal_r+0x1558>
81110504:	dc401f17 	ldw	r17,124(sp)
81110508:	00800044 	movi	r2,1
8111050c:	40800115 	stw	r2,4(r8)
81110510:	8c400044 	addi	r17,r17,1
81110514:	44000015 	stw	r16,0(r8)
81110518:	d8c02015 	stw	r3,128(sp)
8111051c:	dc401f15 	stw	r17,124(sp)
81110520:	008001c4 	movi	r2,7
81110524:	14417416 	blt	r2,r17,81110af8 <___svfprintf_internal_r+0x1588>
81110528:	42000204 	addi	r8,r8,8
8111052c:	d8803817 	ldw	r2,224(sp)
81110530:	d9003417 	ldw	r4,208(sp)
81110534:	8c400044 	addi	r17,r17,1
81110538:	10c7883a 	add	r3,r2,r3
8111053c:	40800115 	stw	r2,4(r8)
81110540:	41000015 	stw	r4,0(r8)
81110544:	d8c02015 	stw	r3,128(sp)
81110548:	dc401f15 	stw	r17,124(sp)
8111054c:	008001c4 	movi	r2,7
81110550:	14417216 	blt	r2,r17,81110b1c <___svfprintf_internal_r+0x15ac>
81110554:	45800204 	addi	r22,r8,8
81110558:	d9003617 	ldw	r4,216(sp)
8111055c:	d9403717 	ldw	r5,220(sp)
81110560:	000d883a 	mov	r6,zero
81110564:	000f883a 	mov	r7,zero
81110568:	d8c03d15 	stw	r3,244(sp)
8111056c:	11223000 	call	81122300 <__eqdf2>
81110570:	d8c03d17 	ldw	r3,244(sp)
81110574:	1000b326 	beq	r2,zero,81110844 <___svfprintf_internal_r+0x12d4>
81110578:	d9403317 	ldw	r5,204(sp)
8111057c:	84000044 	addi	r16,r16,1
81110580:	8c400044 	addi	r17,r17,1
81110584:	28bfffc4 	addi	r2,r5,-1
81110588:	1887883a 	add	r3,r3,r2
8111058c:	b0800115 	stw	r2,4(r22)
81110590:	b4000015 	stw	r16,0(r22)
81110594:	d8c02015 	stw	r3,128(sp)
81110598:	dc401f15 	stw	r17,124(sp)
8111059c:	008001c4 	movi	r2,7
811105a0:	1440d216 	blt	r2,r17,811108ec <___svfprintf_internal_r+0x137c>
811105a4:	b5800204 	addi	r22,r22,8
811105a8:	d9003b17 	ldw	r4,236(sp)
811105ac:	df0022c4 	addi	fp,sp,139
811105b0:	8c400044 	addi	r17,r17,1
811105b4:	20c7883a 	add	r3,r4,r3
811105b8:	b7000015 	stw	fp,0(r22)
811105bc:	b1000115 	stw	r4,4(r22)
811105c0:	d8c02015 	stw	r3,128(sp)
811105c4:	dc401f15 	stw	r17,124(sp)
811105c8:	008001c4 	movi	r2,7
811105cc:	14400e16 	blt	r2,r17,81110608 <___svfprintf_internal_r+0x1098>
811105d0:	b2000204 	addi	r8,r22,8
811105d4:	003e3c06 	br	8110fec8 <__reset+0xfb0efec8>
811105d8:	01204534 	movhi	r4,33044
811105dc:	212ae384 	addi	r4,r4,-21618
811105e0:	d9002b15 	stw	r4,172(sp)
811105e4:	d9002b17 	ldw	r4,172(sp)
811105e8:	1c07883a 	add	r3,r3,r16
811105ec:	44000115 	stw	r16,4(r8)
811105f0:	41000015 	stw	r4,0(r8)
811105f4:	10800044 	addi	r2,r2,1
811105f8:	d8c02015 	stw	r3,128(sp)
811105fc:	d8801f15 	stw	r2,124(sp)
81110600:	010001c4 	movi	r4,7
81110604:	20be2f0e 	bge	r4,r2,8110fec4 <__reset+0xfb0efec4>
81110608:	d9402c17 	ldw	r5,176(sp)
8111060c:	d9801e04 	addi	r6,sp,120
81110610:	9809883a 	mov	r4,r19
81110614:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110618:	103cbc1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
8111061c:	d8c02017 	ldw	r3,128(sp)
81110620:	da000404 	addi	r8,sp,16
81110624:	003e2806 	br	8110fec8 <__reset+0xfb0efec8>
81110628:	d9402c17 	ldw	r5,176(sp)
8111062c:	d9801e04 	addi	r6,sp,120
81110630:	9809883a 	mov	r4,r19
81110634:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110638:	103e5f26 	beq	r2,zero,8110ffb8 <__reset+0xfb0effb8>
8111063c:	003cb306 	br	8110f90c <__reset+0xfb0ef90c>
81110640:	d9402c17 	ldw	r5,176(sp)
81110644:	d9801e04 	addi	r6,sp,120
81110648:	9809883a 	mov	r4,r19
8111064c:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110650:	103cae1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110654:	d8c02017 	ldw	r3,128(sp)
81110658:	da000404 	addi	r8,sp,16
8111065c:	003e0d06 	br	8110fe94 <__reset+0xfb0efe94>
81110660:	d9402c17 	ldw	r5,176(sp)
81110664:	d9801e04 	addi	r6,sp,120
81110668:	9809883a 	mov	r4,r19
8111066c:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110670:	103ca61e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110674:	d8c02017 	ldw	r3,128(sp)
81110678:	da000404 	addi	r8,sp,16
8111067c:	003dc106 	br	8110fd84 <__reset+0xfb0efd84>
81110680:	d9402c17 	ldw	r5,176(sp)
81110684:	d9801e04 	addi	r6,sp,120
81110688:	9809883a 	mov	r4,r19
8111068c:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110690:	103c9e1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110694:	d8c02017 	ldw	r3,128(sp)
81110698:	da000404 	addi	r8,sp,16
8111069c:	003dc706 	br	8110fdbc <__reset+0xfb0efdbc>
811106a0:	d8802917 	ldw	r2,164(sp)
811106a4:	d8002785 	stb	zero,158(sp)
811106a8:	103f0816 	blt	r2,zero,811102cc <__reset+0xfb0f02cc>
811106ac:	00ffdfc4 	movi	r3,-129
811106b0:	a584b03a 	or	r2,r20,r22
811106b4:	90e4703a 	and	r18,r18,r3
811106b8:	103c8126 	beq	r2,zero,8110f8c0 <__reset+0xfb0ef8c0>
811106bc:	0039883a 	mov	fp,zero
811106c0:	003e7606 	br	8111009c <__reset+0xfb0f009c>
811106c4:	9080040c 	andi	r2,r18,16
811106c8:	10013d26 	beq	r2,zero,81110bc0 <___svfprintf_internal_r+0x1650>
811106cc:	d9002d17 	ldw	r4,180(sp)
811106d0:	d9402917 	ldw	r5,164(sp)
811106d4:	d8002785 	stb	zero,158(sp)
811106d8:	20800104 	addi	r2,r4,4
811106dc:	25000017 	ldw	r20,0(r4)
811106e0:	002d883a 	mov	r22,zero
811106e4:	28013f16 	blt	r5,zero,81110be4 <___svfprintf_internal_r+0x1674>
811106e8:	00ffdfc4 	movi	r3,-129
811106ec:	d8802d15 	stw	r2,180(sp)
811106f0:	90e4703a 	and	r18,r18,r3
811106f4:	a03d2b26 	beq	r20,zero,8110fba4 <__reset+0xfb0efba4>
811106f8:	0039883a 	mov	fp,zero
811106fc:	003d2e06 	br	8110fbb8 <__reset+0xfb0efbb8>
81110700:	dc402617 	ldw	r17,152(sp)
81110704:	0441830e 	bge	zero,r17,81110d14 <___svfprintf_internal_r+0x17a4>
81110708:	dc403217 	ldw	r17,200(sp)
8111070c:	d8803317 	ldw	r2,204(sp)
81110710:	1440010e 	bge	r2,r17,81110718 <___svfprintf_internal_r+0x11a8>
81110714:	1023883a 	mov	r17,r2
81110718:	04400a0e 	bge	zero,r17,81110744 <___svfprintf_internal_r+0x11d4>
8111071c:	d8801f17 	ldw	r2,124(sp)
81110720:	1c47883a 	add	r3,r3,r17
81110724:	44000015 	stw	r16,0(r8)
81110728:	10800044 	addi	r2,r2,1
8111072c:	44400115 	stw	r17,4(r8)
81110730:	d8c02015 	stw	r3,128(sp)
81110734:	d8801f15 	stw	r2,124(sp)
81110738:	010001c4 	movi	r4,7
8111073c:	20827516 	blt	r4,r2,81111114 <___svfprintf_internal_r+0x1ba4>
81110740:	42000204 	addi	r8,r8,8
81110744:	88027b16 	blt	r17,zero,81111134 <___svfprintf_internal_r+0x1bc4>
81110748:	d9003217 	ldw	r4,200(sp)
8111074c:	2463c83a 	sub	r17,r4,r17
81110750:	0440990e 	bge	zero,r17,811109b8 <___svfprintf_internal_r+0x1448>
81110754:	05800404 	movi	r22,16
81110758:	d8801f17 	ldw	r2,124(sp)
8111075c:	b441530e 	bge	r22,r17,81110cac <___svfprintf_internal_r+0x173c>
81110760:	01204534 	movhi	r4,33044
81110764:	212ae384 	addi	r4,r4,-21618
81110768:	d9002b15 	stw	r4,172(sp)
8111076c:	070001c4 	movi	fp,7
81110770:	dd002c17 	ldw	r20,176(sp)
81110774:	00000306 	br	81110784 <___svfprintf_internal_r+0x1214>
81110778:	42000204 	addi	r8,r8,8
8111077c:	8c7ffc04 	addi	r17,r17,-16
81110780:	b4414d0e 	bge	r22,r17,81110cb8 <___svfprintf_internal_r+0x1748>
81110784:	18c00404 	addi	r3,r3,16
81110788:	10800044 	addi	r2,r2,1
8111078c:	45400015 	stw	r21,0(r8)
81110790:	45800115 	stw	r22,4(r8)
81110794:	d8c02015 	stw	r3,128(sp)
81110798:	d8801f15 	stw	r2,124(sp)
8111079c:	e0bff60e 	bge	fp,r2,81110778 <__reset+0xfb0f0778>
811107a0:	d9801e04 	addi	r6,sp,120
811107a4:	a00b883a 	mov	r5,r20
811107a8:	9809883a 	mov	r4,r19
811107ac:	111c1a80 	call	8111c1a8 <__ssprint_r>
811107b0:	103c561e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
811107b4:	d8c02017 	ldw	r3,128(sp)
811107b8:	d8801f17 	ldw	r2,124(sp)
811107bc:	da000404 	addi	r8,sp,16
811107c0:	003fee06 	br	8111077c <__reset+0xfb0f077c>
811107c4:	d9402c17 	ldw	r5,176(sp)
811107c8:	d9801e04 	addi	r6,sp,120
811107cc:	9809883a 	mov	r4,r19
811107d0:	111c1a80 	call	8111c1a8 <__ssprint_r>
811107d4:	103c4d1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
811107d8:	d8c02017 	ldw	r3,128(sp)
811107dc:	df002787 	ldb	fp,158(sp)
811107e0:	da000404 	addi	r8,sp,16
811107e4:	003d5a06 	br	8110fd50 <__reset+0xfb0efd50>
811107e8:	9080040c 	andi	r2,r18,16
811107ec:	10005c26 	beq	r2,zero,81110960 <___svfprintf_internal_r+0x13f0>
811107f0:	d9402d17 	ldw	r5,180(sp)
811107f4:	d8c02917 	ldw	r3,164(sp)
811107f8:	d8002785 	stb	zero,158(sp)
811107fc:	28800104 	addi	r2,r5,4
81110800:	2d000017 	ldw	r20,0(r5)
81110804:	002d883a 	mov	r22,zero
81110808:	18005e16 	blt	r3,zero,81110984 <___svfprintf_internal_r+0x1414>
8111080c:	00ffdfc4 	movi	r3,-129
81110810:	d8802d15 	stw	r2,180(sp)
81110814:	90e4703a 	and	r18,r18,r3
81110818:	0039883a 	mov	fp,zero
8111081c:	a03dfe26 	beq	r20,zero,81110018 <__reset+0xfb0f0018>
81110820:	00800244 	movi	r2,9
81110824:	153cb336 	bltu	r2,r20,8110faf4 <__reset+0xfb0efaf4>
81110828:	a5000c04 	addi	r20,r20,48
8111082c:	dc001dc4 	addi	r16,sp,119
81110830:	dd001dc5 	stb	r20,119(sp)
81110834:	d8c02817 	ldw	r3,160(sp)
81110838:	1c07c83a 	sub	r3,r3,r16
8111083c:	d8c02e15 	stw	r3,184(sp)
81110840:	003cf506 	br	8110fc18 <__reset+0xfb0efc18>
81110844:	d8803317 	ldw	r2,204(sp)
81110848:	143fffc4 	addi	r16,r2,-1
8111084c:	043f560e 	bge	zero,r16,811105a8 <__reset+0xfb0f05a8>
81110850:	07000404 	movi	fp,16
81110854:	e403530e 	bge	fp,r16,811115a4 <___svfprintf_internal_r+0x2034>
81110858:	01604534 	movhi	r5,33044
8111085c:	296ae384 	addi	r5,r5,-21618
81110860:	d9402b15 	stw	r5,172(sp)
81110864:	01c001c4 	movi	r7,7
81110868:	dd002c17 	ldw	r20,176(sp)
8111086c:	00000306 	br	8111087c <___svfprintf_internal_r+0x130c>
81110870:	843ffc04 	addi	r16,r16,-16
81110874:	b5800204 	addi	r22,r22,8
81110878:	e400130e 	bge	fp,r16,811108c8 <___svfprintf_internal_r+0x1358>
8111087c:	18c00404 	addi	r3,r3,16
81110880:	8c400044 	addi	r17,r17,1
81110884:	b5400015 	stw	r21,0(r22)
81110888:	b7000115 	stw	fp,4(r22)
8111088c:	d8c02015 	stw	r3,128(sp)
81110890:	dc401f15 	stw	r17,124(sp)
81110894:	3c7ff60e 	bge	r7,r17,81110870 <__reset+0xfb0f0870>
81110898:	d9801e04 	addi	r6,sp,120
8111089c:	a00b883a 	mov	r5,r20
811108a0:	9809883a 	mov	r4,r19
811108a4:	d9c03d15 	stw	r7,244(sp)
811108a8:	111c1a80 	call	8111c1a8 <__ssprint_r>
811108ac:	d9c03d17 	ldw	r7,244(sp)
811108b0:	103c161e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
811108b4:	843ffc04 	addi	r16,r16,-16
811108b8:	d8c02017 	ldw	r3,128(sp)
811108bc:	dc401f17 	ldw	r17,124(sp)
811108c0:	dd800404 	addi	r22,sp,16
811108c4:	e43fed16 	blt	fp,r16,8111087c <__reset+0xfb0f087c>
811108c8:	d8802b17 	ldw	r2,172(sp)
811108cc:	1c07883a 	add	r3,r3,r16
811108d0:	8c400044 	addi	r17,r17,1
811108d4:	b0800015 	stw	r2,0(r22)
811108d8:	b4000115 	stw	r16,4(r22)
811108dc:	d8c02015 	stw	r3,128(sp)
811108e0:	dc401f15 	stw	r17,124(sp)
811108e4:	008001c4 	movi	r2,7
811108e8:	147f2e0e 	bge	r2,r17,811105a4 <__reset+0xfb0f05a4>
811108ec:	d9402c17 	ldw	r5,176(sp)
811108f0:	d9801e04 	addi	r6,sp,120
811108f4:	9809883a 	mov	r4,r19
811108f8:	111c1a80 	call	8111c1a8 <__ssprint_r>
811108fc:	103c031e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110900:	d8c02017 	ldw	r3,128(sp)
81110904:	dc401f17 	ldw	r17,124(sp)
81110908:	dd800404 	addi	r22,sp,16
8111090c:	003f2606 	br	811105a8 <__reset+0xfb0f05a8>
81110910:	9080040c 	andi	r2,r18,16
81110914:	1000c326 	beq	r2,zero,81110c24 <___svfprintf_internal_r+0x16b4>
81110918:	d8802d17 	ldw	r2,180(sp)
8111091c:	15000017 	ldw	r20,0(r2)
81110920:	10800104 	addi	r2,r2,4
81110924:	d8802d15 	stw	r2,180(sp)
81110928:	a02dd7fa 	srai	r22,r20,31
8111092c:	b005883a 	mov	r2,r22
81110930:	103c680e 	bge	r2,zero,8110fad4 <__reset+0xfb0efad4>
81110934:	0529c83a 	sub	r20,zero,r20
81110938:	a004c03a 	cmpne	r2,r20,zero
8111093c:	05adc83a 	sub	r22,zero,r22
81110940:	b0adc83a 	sub	r22,r22,r2
81110944:	d8802917 	ldw	r2,164(sp)
81110948:	07000b44 	movi	fp,45
8111094c:	df002785 	stb	fp,158(sp)
81110950:	10022e16 	blt	r2,zero,8111120c <___svfprintf_internal_r+0x1c9c>
81110954:	00bfdfc4 	movi	r2,-129
81110958:	90a4703a 	and	r18,r18,r2
8111095c:	003c6406 	br	8110faf0 <__reset+0xfb0efaf0>
81110960:	9080100c 	andi	r2,r18,64
81110964:	d8002785 	stb	zero,158(sp)
81110968:	10012526 	beq	r2,zero,81110e00 <___svfprintf_internal_r+0x1890>
8111096c:	d9002d17 	ldw	r4,180(sp)
81110970:	d9402917 	ldw	r5,164(sp)
81110974:	002d883a 	mov	r22,zero
81110978:	20800104 	addi	r2,r4,4
8111097c:	2500000b 	ldhu	r20,0(r4)
81110980:	283fa20e 	bge	r5,zero,8111080c <__reset+0xfb0f080c>
81110984:	d8802d15 	stw	r2,180(sp)
81110988:	0039883a 	mov	fp,zero
8111098c:	a584b03a 	or	r2,r20,r22
81110990:	103c571e 	bne	r2,zero,8110faf0 <__reset+0xfb0efaf0>
81110994:	00800044 	movi	r2,1
81110998:	003e5006 	br	811102dc <__reset+0xfb0f02dc>
8111099c:	d9402c17 	ldw	r5,176(sp)
811109a0:	d9801e04 	addi	r6,sp,120
811109a4:	9809883a 	mov	r4,r19
811109a8:	111c1a80 	call	8111c1a8 <__ssprint_r>
811109ac:	103bd71e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
811109b0:	d8c02017 	ldw	r3,128(sp)
811109b4:	da000404 	addi	r8,sp,16
811109b8:	d9003217 	ldw	r4,200(sp)
811109bc:	d8802617 	ldw	r2,152(sp)
811109c0:	d9403317 	ldw	r5,204(sp)
811109c4:	8123883a 	add	r17,r16,r4
811109c8:	11400216 	blt	r2,r5,811109d4 <___svfprintf_internal_r+0x1464>
811109cc:	9100004c 	andi	r4,r18,1
811109d0:	20000d26 	beq	r4,zero,81110a08 <___svfprintf_internal_r+0x1498>
811109d4:	d9003817 	ldw	r4,224(sp)
811109d8:	d9403417 	ldw	r5,208(sp)
811109dc:	1907883a 	add	r3,r3,r4
811109e0:	d9001f17 	ldw	r4,124(sp)
811109e4:	41400015 	stw	r5,0(r8)
811109e8:	d9403817 	ldw	r5,224(sp)
811109ec:	21000044 	addi	r4,r4,1
811109f0:	d8c02015 	stw	r3,128(sp)
811109f4:	41400115 	stw	r5,4(r8)
811109f8:	d9001f15 	stw	r4,124(sp)
811109fc:	014001c4 	movi	r5,7
81110a00:	2901dc16 	blt	r5,r4,81111174 <___svfprintf_internal_r+0x1c04>
81110a04:	42000204 	addi	r8,r8,8
81110a08:	d9003317 	ldw	r4,204(sp)
81110a0c:	8121883a 	add	r16,r16,r4
81110a10:	2085c83a 	sub	r2,r4,r2
81110a14:	8461c83a 	sub	r16,r16,r17
81110a18:	1400010e 	bge	r2,r16,81110a20 <___svfprintf_internal_r+0x14b0>
81110a1c:	1021883a 	mov	r16,r2
81110a20:	04000a0e 	bge	zero,r16,81110a4c <___svfprintf_internal_r+0x14dc>
81110a24:	d9001f17 	ldw	r4,124(sp)
81110a28:	1c07883a 	add	r3,r3,r16
81110a2c:	44400015 	stw	r17,0(r8)
81110a30:	21000044 	addi	r4,r4,1
81110a34:	44000115 	stw	r16,4(r8)
81110a38:	d8c02015 	stw	r3,128(sp)
81110a3c:	d9001f15 	stw	r4,124(sp)
81110a40:	014001c4 	movi	r5,7
81110a44:	2901e616 	blt	r5,r4,811111e0 <___svfprintf_internal_r+0x1c70>
81110a48:	42000204 	addi	r8,r8,8
81110a4c:	8001f616 	blt	r16,zero,81111228 <___svfprintf_internal_r+0x1cb8>
81110a50:	1421c83a 	sub	r16,r2,r16
81110a54:	043d1c0e 	bge	zero,r16,8110fec8 <__reset+0xfb0efec8>
81110a58:	04400404 	movi	r17,16
81110a5c:	d8801f17 	ldw	r2,124(sp)
81110a60:	8c3edd0e 	bge	r17,r16,811105d8 <__reset+0xfb0f05d8>
81110a64:	01604534 	movhi	r5,33044
81110a68:	296ae384 	addi	r5,r5,-21618
81110a6c:	d9402b15 	stw	r5,172(sp)
81110a70:	058001c4 	movi	r22,7
81110a74:	dd002c17 	ldw	r20,176(sp)
81110a78:	00000306 	br	81110a88 <___svfprintf_internal_r+0x1518>
81110a7c:	42000204 	addi	r8,r8,8
81110a80:	843ffc04 	addi	r16,r16,-16
81110a84:	8c3ed70e 	bge	r17,r16,811105e4 <__reset+0xfb0f05e4>
81110a88:	18c00404 	addi	r3,r3,16
81110a8c:	10800044 	addi	r2,r2,1
81110a90:	45400015 	stw	r21,0(r8)
81110a94:	44400115 	stw	r17,4(r8)
81110a98:	d8c02015 	stw	r3,128(sp)
81110a9c:	d8801f15 	stw	r2,124(sp)
81110aa0:	b0bff60e 	bge	r22,r2,81110a7c <__reset+0xfb0f0a7c>
81110aa4:	d9801e04 	addi	r6,sp,120
81110aa8:	a00b883a 	mov	r5,r20
81110aac:	9809883a 	mov	r4,r19
81110ab0:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110ab4:	103b951e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110ab8:	d8c02017 	ldw	r3,128(sp)
81110abc:	d8801f17 	ldw	r2,124(sp)
81110ac0:	da000404 	addi	r8,sp,16
81110ac4:	003fee06 	br	81110a80 <__reset+0xfb0f0a80>
81110ac8:	9088703a 	and	r4,r18,r2
81110acc:	203e8d1e 	bne	r4,zero,81110504 <__reset+0xfb0f0504>
81110ad0:	dc401f17 	ldw	r17,124(sp)
81110ad4:	40800115 	stw	r2,4(r8)
81110ad8:	44000015 	stw	r16,0(r8)
81110adc:	8c400044 	addi	r17,r17,1
81110ae0:	d8c02015 	stw	r3,128(sp)
81110ae4:	dc401f15 	stw	r17,124(sp)
81110ae8:	008001c4 	movi	r2,7
81110aec:	147f7f16 	blt	r2,r17,811108ec <__reset+0xfb0f08ec>
81110af0:	45800204 	addi	r22,r8,8
81110af4:	003eac06 	br	811105a8 <__reset+0xfb0f05a8>
81110af8:	d9402c17 	ldw	r5,176(sp)
81110afc:	d9801e04 	addi	r6,sp,120
81110b00:	9809883a 	mov	r4,r19
81110b04:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110b08:	103b801e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110b0c:	d8c02017 	ldw	r3,128(sp)
81110b10:	dc401f17 	ldw	r17,124(sp)
81110b14:	da000404 	addi	r8,sp,16
81110b18:	003e8406 	br	8111052c <__reset+0xfb0f052c>
81110b1c:	d9402c17 	ldw	r5,176(sp)
81110b20:	d9801e04 	addi	r6,sp,120
81110b24:	9809883a 	mov	r4,r19
81110b28:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110b2c:	103b771e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110b30:	d8c02017 	ldw	r3,128(sp)
81110b34:	dc401f17 	ldw	r17,124(sp)
81110b38:	dd800404 	addi	r22,sp,16
81110b3c:	003e8606 	br	81110558 <__reset+0xfb0f0558>
81110b40:	0029883a 	mov	r20,zero
81110b44:	a5000c04 	addi	r20,r20,48
81110b48:	dc001dc4 	addi	r16,sp,119
81110b4c:	dd001dc5 	stb	r20,119(sp)
81110b50:	003f3806 	br	81110834 <__reset+0xfb0f0834>
81110b54:	d9402c17 	ldw	r5,176(sp)
81110b58:	d9801e04 	addi	r6,sp,120
81110b5c:	9809883a 	mov	r4,r19
81110b60:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110b64:	103b691e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110b68:	d8c02017 	ldw	r3,128(sp)
81110b6c:	da000404 	addi	r8,sp,16
81110b70:	003c9506 	br	8110fdc8 <__reset+0xfb0efdc8>
81110b74:	d9003617 	ldw	r4,216(sp)
81110b78:	d9403717 	ldw	r5,220(sp)
81110b7c:	da003e15 	stw	r8,248(sp)
81110b80:	1119fbc0 	call	81119fbc <__fpclassifyd>
81110b84:	da003e17 	ldw	r8,248(sp)
81110b88:	1000bd1e 	bne	r2,zero,81110e80 <___svfprintf_internal_r+0x1910>
81110b8c:	008011c4 	movi	r2,71
81110b90:	14411e0e 	bge	r2,r17,8111100c <___svfprintf_internal_r+0x1a9c>
81110b94:	04204534 	movhi	r16,33044
81110b98:	842ad604 	addi	r16,r16,-21672
81110b9c:	00c000c4 	movi	r3,3
81110ba0:	00bfdfc4 	movi	r2,-129
81110ba4:	d8c02a15 	stw	r3,168(sp)
81110ba8:	90a4703a 	and	r18,r18,r2
81110bac:	df002783 	ldbu	fp,158(sp)
81110bb0:	d8c02e15 	stw	r3,184(sp)
81110bb4:	d8002915 	stw	zero,164(sp)
81110bb8:	d8003215 	stw	zero,200(sp)
81110bbc:	003c1c06 	br	8110fc30 <__reset+0xfb0efc30>
81110bc0:	9080100c 	andi	r2,r18,64
81110bc4:	d8002785 	stb	zero,158(sp)
81110bc8:	10009426 	beq	r2,zero,81110e1c <___svfprintf_internal_r+0x18ac>
81110bcc:	d8c02d17 	ldw	r3,180(sp)
81110bd0:	d9002917 	ldw	r4,164(sp)
81110bd4:	002d883a 	mov	r22,zero
81110bd8:	18800104 	addi	r2,r3,4
81110bdc:	1d00000b 	ldhu	r20,0(r3)
81110be0:	203ec10e 	bge	r4,zero,811106e8 <__reset+0xfb0f06e8>
81110be4:	a586b03a 	or	r3,r20,r22
81110be8:	d8802d15 	stw	r2,180(sp)
81110bec:	183ec21e 	bne	r3,zero,811106f8 <__reset+0xfb0f06f8>
81110bf0:	0039883a 	mov	fp,zero
81110bf4:	0005883a 	mov	r2,zero
81110bf8:	003db806 	br	811102dc <__reset+0xfb0f02dc>
81110bfc:	d8802d17 	ldw	r2,180(sp)
81110c00:	d8c02d17 	ldw	r3,180(sp)
81110c04:	d9002d17 	ldw	r4,180(sp)
81110c08:	10800017 	ldw	r2,0(r2)
81110c0c:	18c00117 	ldw	r3,4(r3)
81110c10:	21000204 	addi	r4,r4,8
81110c14:	d8803615 	stw	r2,216(sp)
81110c18:	d8c03715 	stw	r3,220(sp)
81110c1c:	d9002d15 	stw	r4,180(sp)
81110c20:	003b8206 	br	8110fa2c <__reset+0xfb0efa2c>
81110c24:	9080100c 	andi	r2,r18,64
81110c28:	10010726 	beq	r2,zero,81111048 <___svfprintf_internal_r+0x1ad8>
81110c2c:	d8c02d17 	ldw	r3,180(sp)
81110c30:	1d00000f 	ldh	r20,0(r3)
81110c34:	18c00104 	addi	r3,r3,4
81110c38:	d8c02d15 	stw	r3,180(sp)
81110c3c:	a02dd7fa 	srai	r22,r20,31
81110c40:	b005883a 	mov	r2,r22
81110c44:	003ba206 	br	8110fad0 <__reset+0xfb0efad0>
81110c48:	9080100c 	andi	r2,r18,64
81110c4c:	10010526 	beq	r2,zero,81111064 <___svfprintf_internal_r+0x1af4>
81110c50:	d9002d17 	ldw	r4,180(sp)
81110c54:	002d883a 	mov	r22,zero
81110c58:	2500000b 	ldhu	r20,0(r4)
81110c5c:	21000104 	addi	r4,r4,4
81110c60:	d9002d15 	stw	r4,180(sp)
81110c64:	003cfe06 	br	81110060 <__reset+0xfb0f0060>
81110c68:	bc400007 	ldb	r17,0(r23)
81110c6c:	003a9606 	br	8110f6c8 <__reset+0xfb0ef6c8>
81110c70:	9080040c 	andi	r2,r18,16
81110c74:	10010126 	beq	r2,zero,8111107c <___svfprintf_internal_r+0x1b0c>
81110c78:	d9402d17 	ldw	r5,180(sp)
81110c7c:	d8c02f17 	ldw	r3,188(sp)
81110c80:	28800017 	ldw	r2,0(r5)
81110c84:	29400104 	addi	r5,r5,4
81110c88:	d9402d15 	stw	r5,180(sp)
81110c8c:	10c00015 	stw	r3,0(r2)
81110c90:	003a6406 	br	8110f624 <__reset+0xfb0ef624>
81110c94:	d9002917 	ldw	r4,164(sp)
81110c98:	d8002785 	stb	zero,158(sp)
81110c9c:	203d8d16 	blt	r4,zero,811102d4 <__reset+0xfb0f02d4>
81110ca0:	00bfdfc4 	movi	r2,-129
81110ca4:	90a4703a 	and	r18,r18,r2
81110ca8:	003b0506 	br	8110f8c0 <__reset+0xfb0ef8c0>
81110cac:	01604534 	movhi	r5,33044
81110cb0:	296ae384 	addi	r5,r5,-21618
81110cb4:	d9402b15 	stw	r5,172(sp)
81110cb8:	d9402b17 	ldw	r5,172(sp)
81110cbc:	1c47883a 	add	r3,r3,r17
81110cc0:	10800044 	addi	r2,r2,1
81110cc4:	41400015 	stw	r5,0(r8)
81110cc8:	44400115 	stw	r17,4(r8)
81110ccc:	d8c02015 	stw	r3,128(sp)
81110cd0:	d8801f15 	stw	r2,124(sp)
81110cd4:	010001c4 	movi	r4,7
81110cd8:	20bf3016 	blt	r4,r2,8111099c <__reset+0xfb0f099c>
81110cdc:	42000204 	addi	r8,r8,8
81110ce0:	003f3506 	br	811109b8 <__reset+0xfb0f09b8>
81110ce4:	01204534 	movhi	r4,33044
81110ce8:	212ae384 	addi	r4,r4,-21618
81110cec:	d9002b15 	stw	r4,172(sp)
81110cf0:	003c5e06 	br	8110fe6c <__reset+0xfb0efe6c>
81110cf4:	d9402c17 	ldw	r5,176(sp)
81110cf8:	d9801e04 	addi	r6,sp,120
81110cfc:	9809883a 	mov	r4,r19
81110d00:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110d04:	103b011e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110d08:	d8c02017 	ldw	r3,128(sp)
81110d0c:	da000404 	addi	r8,sp,16
81110d10:	003d9306 	br	81110360 <__reset+0xfb0f0360>
81110d14:	d8801f17 	ldw	r2,124(sp)
81110d18:	01604534 	movhi	r5,33044
81110d1c:	01000044 	movi	r4,1
81110d20:	18c00044 	addi	r3,r3,1
81110d24:	10800044 	addi	r2,r2,1
81110d28:	296ae304 	addi	r5,r5,-21620
81110d2c:	41000115 	stw	r4,4(r8)
81110d30:	41400015 	stw	r5,0(r8)
81110d34:	d8c02015 	stw	r3,128(sp)
81110d38:	d8801f15 	stw	r2,124(sp)
81110d3c:	010001c4 	movi	r4,7
81110d40:	2080b516 	blt	r4,r2,81111018 <___svfprintf_internal_r+0x1aa8>
81110d44:	42000204 	addi	r8,r8,8
81110d48:	8800041e 	bne	r17,zero,81110d5c <___svfprintf_internal_r+0x17ec>
81110d4c:	d8803317 	ldw	r2,204(sp)
81110d50:	1000021e 	bne	r2,zero,81110d5c <___svfprintf_internal_r+0x17ec>
81110d54:	9080004c 	andi	r2,r18,1
81110d58:	103c5b26 	beq	r2,zero,8110fec8 <__reset+0xfb0efec8>
81110d5c:	d9003817 	ldw	r4,224(sp)
81110d60:	d8801f17 	ldw	r2,124(sp)
81110d64:	d9403417 	ldw	r5,208(sp)
81110d68:	20c7883a 	add	r3,r4,r3
81110d6c:	10800044 	addi	r2,r2,1
81110d70:	41000115 	stw	r4,4(r8)
81110d74:	41400015 	stw	r5,0(r8)
81110d78:	d8c02015 	stw	r3,128(sp)
81110d7c:	d8801f15 	stw	r2,124(sp)
81110d80:	010001c4 	movi	r4,7
81110d84:	20818016 	blt	r4,r2,81111388 <___svfprintf_internal_r+0x1e18>
81110d88:	42000204 	addi	r8,r8,8
81110d8c:	0463c83a 	sub	r17,zero,r17
81110d90:	0440cb0e 	bge	zero,r17,811110c0 <___svfprintf_internal_r+0x1b50>
81110d94:	05800404 	movi	r22,16
81110d98:	b440e80e 	bge	r22,r17,8111113c <___svfprintf_internal_r+0x1bcc>
81110d9c:	01604534 	movhi	r5,33044
81110da0:	296ae384 	addi	r5,r5,-21618
81110da4:	d9402b15 	stw	r5,172(sp)
81110da8:	070001c4 	movi	fp,7
81110dac:	dd002c17 	ldw	r20,176(sp)
81110db0:	00000306 	br	81110dc0 <___svfprintf_internal_r+0x1850>
81110db4:	42000204 	addi	r8,r8,8
81110db8:	8c7ffc04 	addi	r17,r17,-16
81110dbc:	b440e20e 	bge	r22,r17,81111148 <___svfprintf_internal_r+0x1bd8>
81110dc0:	18c00404 	addi	r3,r3,16
81110dc4:	10800044 	addi	r2,r2,1
81110dc8:	45400015 	stw	r21,0(r8)
81110dcc:	45800115 	stw	r22,4(r8)
81110dd0:	d8c02015 	stw	r3,128(sp)
81110dd4:	d8801f15 	stw	r2,124(sp)
81110dd8:	e0bff60e 	bge	fp,r2,81110db4 <__reset+0xfb0f0db4>
81110ddc:	d9801e04 	addi	r6,sp,120
81110de0:	a00b883a 	mov	r5,r20
81110de4:	9809883a 	mov	r4,r19
81110de8:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110dec:	103ac71e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110df0:	d8c02017 	ldw	r3,128(sp)
81110df4:	d8801f17 	ldw	r2,124(sp)
81110df8:	da000404 	addi	r8,sp,16
81110dfc:	003fee06 	br	81110db8 <__reset+0xfb0f0db8>
81110e00:	d8c02d17 	ldw	r3,180(sp)
81110e04:	d9002917 	ldw	r4,164(sp)
81110e08:	002d883a 	mov	r22,zero
81110e0c:	18800104 	addi	r2,r3,4
81110e10:	1d000017 	ldw	r20,0(r3)
81110e14:	203e7d0e 	bge	r4,zero,8111080c <__reset+0xfb0f080c>
81110e18:	003eda06 	br	81110984 <__reset+0xfb0f0984>
81110e1c:	d9402d17 	ldw	r5,180(sp)
81110e20:	d8c02917 	ldw	r3,164(sp)
81110e24:	002d883a 	mov	r22,zero
81110e28:	28800104 	addi	r2,r5,4
81110e2c:	2d000017 	ldw	r20,0(r5)
81110e30:	183e2d0e 	bge	r3,zero,811106e8 <__reset+0xfb0f06e8>
81110e34:	003f6b06 	br	81110be4 <__reset+0xfb0f0be4>
81110e38:	d8c02d15 	stw	r3,180(sp)
81110e3c:	0039883a 	mov	fp,zero
81110e40:	003ed206 	br	8111098c <__reset+0xfb0f098c>
81110e44:	bc400043 	ldbu	r17,1(r23)
81110e48:	94800814 	ori	r18,r18,32
81110e4c:	bdc00044 	addi	r23,r23,1
81110e50:	8c403fcc 	andi	r17,r17,255
81110e54:	8c40201c 	xori	r17,r17,128
81110e58:	8c7fe004 	addi	r17,r17,-128
81110e5c:	003a1a06 	br	8110f6c8 <__reset+0xfb0ef6c8>
81110e60:	d9402c17 	ldw	r5,176(sp)
81110e64:	d9801e04 	addi	r6,sp,120
81110e68:	9809883a 	mov	r4,r19
81110e6c:	111c1a80 	call	8111c1a8 <__ssprint_r>
81110e70:	103aa61e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81110e74:	d8c02017 	ldw	r3,128(sp)
81110e78:	da000404 	addi	r8,sp,16
81110e7c:	003d4a06 	br	811103a8 <__reset+0xfb0f03a8>
81110e80:	d9002917 	ldw	r4,164(sp)
81110e84:	05bff7c4 	movi	r22,-33
81110e88:	00bfffc4 	movi	r2,-1
81110e8c:	8dac703a 	and	r22,r17,r22
81110e90:	20806a26 	beq	r4,r2,8111103c <___svfprintf_internal_r+0x1acc>
81110e94:	008011c4 	movi	r2,71
81110e98:	b0813726 	beq	r22,r2,81111378 <___svfprintf_internal_r+0x1e08>
81110e9c:	d9003717 	ldw	r4,220(sp)
81110ea0:	90c04014 	ori	r3,r18,256
81110ea4:	d8c02b15 	stw	r3,172(sp)
81110ea8:	20015d16 	blt	r4,zero,81111420 <___svfprintf_internal_r+0x1eb0>
81110eac:	dd003717 	ldw	r20,220(sp)
81110eb0:	d8002a05 	stb	zero,168(sp)
81110eb4:	00801984 	movi	r2,102
81110eb8:	88814026 	beq	r17,r2,811113bc <___svfprintf_internal_r+0x1e4c>
81110ebc:	00801184 	movi	r2,70
81110ec0:	88817126 	beq	r17,r2,81111488 <___svfprintf_internal_r+0x1f18>
81110ec4:	00801144 	movi	r2,69
81110ec8:	b0816226 	beq	r22,r2,81111454 <___svfprintf_internal_r+0x1ee4>
81110ecc:	d8c02917 	ldw	r3,164(sp)
81110ed0:	d8802104 	addi	r2,sp,132
81110ed4:	d8800315 	stw	r2,12(sp)
81110ed8:	d9403617 	ldw	r5,216(sp)
81110edc:	d8802504 	addi	r2,sp,148
81110ee0:	d8800215 	stw	r2,8(sp)
81110ee4:	d8802604 	addi	r2,sp,152
81110ee8:	d8c00015 	stw	r3,0(sp)
81110eec:	d8800115 	stw	r2,4(sp)
81110ef0:	01c00084 	movi	r7,2
81110ef4:	a00d883a 	mov	r6,r20
81110ef8:	9809883a 	mov	r4,r19
81110efc:	d8c03d15 	stw	r3,244(sp)
81110f00:	da003e15 	stw	r8,248(sp)
81110f04:	11156fc0 	call	811156fc <_dtoa_r>
81110f08:	1021883a 	mov	r16,r2
81110f0c:	008019c4 	movi	r2,103
81110f10:	d8c03d17 	ldw	r3,244(sp)
81110f14:	da003e17 	ldw	r8,248(sp)
81110f18:	8880e726 	beq	r17,r2,811112b8 <___svfprintf_internal_r+0x1d48>
81110f1c:	008011c4 	movi	r2,71
81110f20:	8880d426 	beq	r17,r2,81111274 <___svfprintf_internal_r+0x1d04>
81110f24:	80f9883a 	add	fp,r16,r3
81110f28:	d9003617 	ldw	r4,216(sp)
81110f2c:	000d883a 	mov	r6,zero
81110f30:	000f883a 	mov	r7,zero
81110f34:	a00b883a 	mov	r5,r20
81110f38:	da003e15 	stw	r8,248(sp)
81110f3c:	11223000 	call	81122300 <__eqdf2>
81110f40:	da003e17 	ldw	r8,248(sp)
81110f44:	1000e426 	beq	r2,zero,811112d8 <___svfprintf_internal_r+0x1d68>
81110f48:	d8802117 	ldw	r2,132(sp)
81110f4c:	1700062e 	bgeu	r2,fp,81110f68 <___svfprintf_internal_r+0x19f8>
81110f50:	01000c04 	movi	r4,48
81110f54:	10c00044 	addi	r3,r2,1
81110f58:	d8c02115 	stw	r3,132(sp)
81110f5c:	11000005 	stb	r4,0(r2)
81110f60:	d8802117 	ldw	r2,132(sp)
81110f64:	173ffb36 	bltu	r2,fp,81110f54 <__reset+0xfb0f0f54>
81110f68:	1405c83a 	sub	r2,r2,r16
81110f6c:	d8803315 	stw	r2,204(sp)
81110f70:	008011c4 	movi	r2,71
81110f74:	b080c526 	beq	r22,r2,8111128c <___svfprintf_internal_r+0x1d1c>
81110f78:	00801944 	movi	r2,101
81110f7c:	1441d90e 	bge	r2,r17,811116e4 <___svfprintf_internal_r+0x2174>
81110f80:	d8c02617 	ldw	r3,152(sp)
81110f84:	00801984 	movi	r2,102
81110f88:	d8c03215 	stw	r3,200(sp)
81110f8c:	88813426 	beq	r17,r2,81111460 <___svfprintf_internal_r+0x1ef0>
81110f90:	d8c03217 	ldw	r3,200(sp)
81110f94:	d9003317 	ldw	r4,204(sp)
81110f98:	19012516 	blt	r3,r4,81111430 <___svfprintf_internal_r+0x1ec0>
81110f9c:	9480004c 	andi	r18,r18,1
81110fa0:	9001841e 	bne	r18,zero,811115b4 <___svfprintf_internal_r+0x2044>
81110fa4:	1805883a 	mov	r2,r3
81110fa8:	1801cc16 	blt	r3,zero,811116dc <___svfprintf_internal_r+0x216c>
81110fac:	d8c03217 	ldw	r3,200(sp)
81110fb0:	044019c4 	movi	r17,103
81110fb4:	d8c02e15 	stw	r3,184(sp)
81110fb8:	df002a07 	ldb	fp,168(sp)
81110fbc:	e000a61e 	bne	fp,zero,81111258 <___svfprintf_internal_r+0x1ce8>
81110fc0:	df002783 	ldbu	fp,158(sp)
81110fc4:	d8802a15 	stw	r2,168(sp)
81110fc8:	dc802b17 	ldw	r18,172(sp)
81110fcc:	d8002915 	stw	zero,164(sp)
81110fd0:	003b1706 	br	8110fc30 <__reset+0xfb0efc30>
81110fd4:	04204534 	movhi	r16,33044
81110fd8:	842ad304 	addi	r16,r16,-21684
81110fdc:	003aa606 	br	8110fa78 <__reset+0xfb0efa78>
81110fe0:	d9003917 	ldw	r4,228(sp)
81110fe4:	04001004 	movi	r16,64
81110fe8:	800b883a 	mov	r5,r16
81110fec:	110e0cc0 	call	8110e0cc <_malloc_r>
81110ff0:	d9002c17 	ldw	r4,176(sp)
81110ff4:	20800015 	stw	r2,0(r4)
81110ff8:	20800415 	stw	r2,16(r4)
81110ffc:	1001cb26 	beq	r2,zero,8111172c <___svfprintf_internal_r+0x21bc>
81111000:	d8802c17 	ldw	r2,176(sp)
81111004:	14000515 	stw	r16,20(r2)
81111008:	00397606 	br	8110f5e4 <__reset+0xfb0ef5e4>
8111100c:	04204534 	movhi	r16,33044
81111010:	842ad504 	addi	r16,r16,-21676
81111014:	003ee106 	br	81110b9c <__reset+0xfb0f0b9c>
81111018:	d9402c17 	ldw	r5,176(sp)
8111101c:	d9801e04 	addi	r6,sp,120
81111020:	9809883a 	mov	r4,r19
81111024:	111c1a80 	call	8111c1a8 <__ssprint_r>
81111028:	103a381e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
8111102c:	dc402617 	ldw	r17,152(sp)
81111030:	d8c02017 	ldw	r3,128(sp)
81111034:	da000404 	addi	r8,sp,16
81111038:	003f4306 	br	81110d48 <__reset+0xfb0f0d48>
8111103c:	01400184 	movi	r5,6
81111040:	d9402915 	stw	r5,164(sp)
81111044:	003f9506 	br	81110e9c <__reset+0xfb0f0e9c>
81111048:	d9002d17 	ldw	r4,180(sp)
8111104c:	25000017 	ldw	r20,0(r4)
81111050:	21000104 	addi	r4,r4,4
81111054:	d9002d15 	stw	r4,180(sp)
81111058:	a02dd7fa 	srai	r22,r20,31
8111105c:	b005883a 	mov	r2,r22
81111060:	003a9b06 	br	8110fad0 <__reset+0xfb0efad0>
81111064:	d9402d17 	ldw	r5,180(sp)
81111068:	002d883a 	mov	r22,zero
8111106c:	2d000017 	ldw	r20,0(r5)
81111070:	29400104 	addi	r5,r5,4
81111074:	d9402d15 	stw	r5,180(sp)
81111078:	003bf906 	br	81110060 <__reset+0xfb0f0060>
8111107c:	9480100c 	andi	r18,r18,64
81111080:	90006e26 	beq	r18,zero,8111123c <___svfprintf_internal_r+0x1ccc>
81111084:	d9002d17 	ldw	r4,180(sp)
81111088:	d9402f17 	ldw	r5,188(sp)
8111108c:	20800017 	ldw	r2,0(r4)
81111090:	21000104 	addi	r4,r4,4
81111094:	d9002d15 	stw	r4,180(sp)
81111098:	1140000d 	sth	r5,0(r2)
8111109c:	00396106 	br	8110f624 <__reset+0xfb0ef624>
811110a0:	d9402c17 	ldw	r5,176(sp)
811110a4:	d9801e04 	addi	r6,sp,120
811110a8:	9809883a 	mov	r4,r19
811110ac:	111c1a80 	call	8111c1a8 <__ssprint_r>
811110b0:	103a161e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
811110b4:	d8c02017 	ldw	r3,128(sp)
811110b8:	d8801f17 	ldw	r2,124(sp)
811110bc:	da000404 	addi	r8,sp,16
811110c0:	d9403317 	ldw	r5,204(sp)
811110c4:	10800044 	addi	r2,r2,1
811110c8:	44000015 	stw	r16,0(r8)
811110cc:	28c7883a 	add	r3,r5,r3
811110d0:	003b7706 	br	8110feb0 <__reset+0xfb0efeb0>
811110d4:	8009883a 	mov	r4,r16
811110d8:	da003e15 	stw	r8,248(sp)
811110dc:	110f27c0 	call	8110f27c <strlen>
811110e0:	d8802e15 	stw	r2,184(sp)
811110e4:	da003e17 	ldw	r8,248(sp)
811110e8:	103c280e 	bge	r2,zero,8111018c <__reset+0xfb0f018c>
811110ec:	0005883a 	mov	r2,zero
811110f0:	003c2606 	br	8111018c <__reset+0xfb0f018c>
811110f4:	00bfffc4 	movi	r2,-1
811110f8:	003a0906 	br	8110f920 <__reset+0xfb0ef920>
811110fc:	01204534 	movhi	r4,33044
81111100:	212ae784 	addi	r4,r4,-21602
81111104:	d9003515 	stw	r4,212(sp)
81111108:	003b0606 	br	8110fd24 <__reset+0xfb0efd24>
8111110c:	013fffc4 	movi	r4,-1
81111110:	003a2706 	br	8110f9b0 <__reset+0xfb0ef9b0>
81111114:	d9402c17 	ldw	r5,176(sp)
81111118:	d9801e04 	addi	r6,sp,120
8111111c:	9809883a 	mov	r4,r19
81111120:	111c1a80 	call	8111c1a8 <__ssprint_r>
81111124:	1039f91e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81111128:	d8c02017 	ldw	r3,128(sp)
8111112c:	da000404 	addi	r8,sp,16
81111130:	003d8406 	br	81110744 <__reset+0xfb0f0744>
81111134:	0023883a 	mov	r17,zero
81111138:	003d8306 	br	81110748 <__reset+0xfb0f0748>
8111113c:	01204534 	movhi	r4,33044
81111140:	212ae384 	addi	r4,r4,-21618
81111144:	d9002b15 	stw	r4,172(sp)
81111148:	d9002b17 	ldw	r4,172(sp)
8111114c:	1c47883a 	add	r3,r3,r17
81111150:	10800044 	addi	r2,r2,1
81111154:	41000015 	stw	r4,0(r8)
81111158:	44400115 	stw	r17,4(r8)
8111115c:	d8c02015 	stw	r3,128(sp)
81111160:	d8801f15 	stw	r2,124(sp)
81111164:	010001c4 	movi	r4,7
81111168:	20bfcd16 	blt	r4,r2,811110a0 <__reset+0xfb0f10a0>
8111116c:	42000204 	addi	r8,r8,8
81111170:	003fd306 	br	811110c0 <__reset+0xfb0f10c0>
81111174:	d9402c17 	ldw	r5,176(sp)
81111178:	d9801e04 	addi	r6,sp,120
8111117c:	9809883a 	mov	r4,r19
81111180:	111c1a80 	call	8111c1a8 <__ssprint_r>
81111184:	1039e11e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
81111188:	d8802617 	ldw	r2,152(sp)
8111118c:	d8c02017 	ldw	r3,128(sp)
81111190:	da000404 	addi	r8,sp,16
81111194:	003e1c06 	br	81110a08 <__reset+0xfb0f0a08>
81111198:	d8802917 	ldw	r2,164(sp)
8111119c:	00c00184 	movi	r3,6
811111a0:	1880012e 	bgeu	r3,r2,811111a8 <___svfprintf_internal_r+0x1c38>
811111a4:	1805883a 	mov	r2,r3
811111a8:	d8802e15 	stw	r2,184(sp)
811111ac:	1000f316 	blt	r2,zero,8111157c <___svfprintf_internal_r+0x200c>
811111b0:	04204534 	movhi	r16,33044
811111b4:	d8802a15 	stw	r2,168(sp)
811111b8:	dd002d15 	stw	r20,180(sp)
811111bc:	d8002915 	stw	zero,164(sp)
811111c0:	d8003215 	stw	zero,200(sp)
811111c4:	842ae104 	addi	r16,r16,-21628
811111c8:	0039883a 	mov	fp,zero
811111cc:	003a9f06 	br	8110fc4c <__reset+0xfb0efc4c>
811111d0:	01204534 	movhi	r4,33044
811111d4:	212ae784 	addi	r4,r4,-21602
811111d8:	d9003515 	stw	r4,212(sp)
811111dc:	003b5f06 	br	8110ff5c <__reset+0xfb0eff5c>
811111e0:	d9402c17 	ldw	r5,176(sp)
811111e4:	d9801e04 	addi	r6,sp,120
811111e8:	9809883a 	mov	r4,r19
811111ec:	111c1a80 	call	8111c1a8 <__ssprint_r>
811111f0:	1039c61e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
811111f4:	d8802617 	ldw	r2,152(sp)
811111f8:	d9403317 	ldw	r5,204(sp)
811111fc:	d8c02017 	ldw	r3,128(sp)
81111200:	da000404 	addi	r8,sp,16
81111204:	2885c83a 	sub	r2,r5,r2
81111208:	003e1006 	br	81110a4c <__reset+0xfb0f0a4c>
8111120c:	00800044 	movi	r2,1
81111210:	10803fcc 	andi	r2,r2,255
81111214:	00c00044 	movi	r3,1
81111218:	10fa3526 	beq	r2,r3,8110faf0 <__reset+0xfb0efaf0>
8111121c:	00c00084 	movi	r3,2
81111220:	10fb9e26 	beq	r2,r3,8111009c <__reset+0xfb0f009c>
81111224:	003a6406 	br	8110fbb8 <__reset+0xfb0efbb8>
81111228:	0021883a 	mov	r16,zero
8111122c:	003e0806 	br	81110a50 <__reset+0xfb0f0a50>
81111230:	07000b44 	movi	fp,45
81111234:	df002785 	stb	fp,158(sp)
81111238:	003a0b06 	br	8110fa68 <__reset+0xfb0efa68>
8111123c:	d8c02d17 	ldw	r3,180(sp)
81111240:	d9002f17 	ldw	r4,188(sp)
81111244:	18800017 	ldw	r2,0(r3)
81111248:	18c00104 	addi	r3,r3,4
8111124c:	d8c02d15 	stw	r3,180(sp)
81111250:	11000015 	stw	r4,0(r2)
81111254:	0038f306 	br	8110f624 <__reset+0xfb0ef624>
81111258:	00c00b44 	movi	r3,45
8111125c:	d8c02785 	stb	r3,158(sp)
81111260:	d8802a15 	stw	r2,168(sp)
81111264:	dc802b17 	ldw	r18,172(sp)
81111268:	d8002915 	stw	zero,164(sp)
8111126c:	07000b44 	movi	fp,45
81111270:	003a7306 	br	8110fc40 <__reset+0xfb0efc40>
81111274:	9080004c 	andi	r2,r18,1
81111278:	1000941e 	bne	r2,zero,811114cc <___svfprintf_internal_r+0x1f5c>
8111127c:	d8802117 	ldw	r2,132(sp)
81111280:	1405c83a 	sub	r2,r2,r16
81111284:	d8803315 	stw	r2,204(sp)
81111288:	b441161e 	bne	r22,r17,811116e4 <___svfprintf_internal_r+0x2174>
8111128c:	dd802617 	ldw	r22,152(sp)
81111290:	00bfff44 	movi	r2,-3
81111294:	b0801a16 	blt	r22,r2,81111300 <___svfprintf_internal_r+0x1d90>
81111298:	d9402917 	ldw	r5,164(sp)
8111129c:	2d801816 	blt	r5,r22,81111300 <___svfprintf_internal_r+0x1d90>
811112a0:	dd803215 	stw	r22,200(sp)
811112a4:	003f3a06 	br	81110f90 <__reset+0xfb0f0f90>
811112a8:	1025883a 	mov	r18,r2
811112ac:	0039883a 	mov	fp,zero
811112b0:	00800084 	movi	r2,2
811112b4:	003fd606 	br	81111210 <__reset+0xfb0f1210>
811112b8:	9080004c 	andi	r2,r18,1
811112bc:	103f191e 	bne	r2,zero,81110f24 <__reset+0xfb0f0f24>
811112c0:	d8802117 	ldw	r2,132(sp)
811112c4:	003f2806 	br	81110f68 <__reset+0xfb0f0f68>
811112c8:	01204534 	movhi	r4,33044
811112cc:	212ae384 	addi	r4,r4,-21618
811112d0:	d9002b15 	stw	r4,172(sp)
811112d4:	003c7c06 	br	811104c8 <__reset+0xfb0f04c8>
811112d8:	e005883a 	mov	r2,fp
811112dc:	003f2206 	br	81110f68 <__reset+0xfb0f0f68>
811112e0:	d9402917 	ldw	r5,164(sp)
811112e4:	df002783 	ldbu	fp,158(sp)
811112e8:	dd002d15 	stw	r20,180(sp)
811112ec:	d9402a15 	stw	r5,168(sp)
811112f0:	d9402e15 	stw	r5,184(sp)
811112f4:	d8002915 	stw	zero,164(sp)
811112f8:	d8003215 	stw	zero,200(sp)
811112fc:	003a4c06 	br	8110fc30 <__reset+0xfb0efc30>
81111300:	8c7fff84 	addi	r17,r17,-2
81111304:	b5bfffc4 	addi	r22,r22,-1
81111308:	dd802615 	stw	r22,152(sp)
8111130c:	dc4022c5 	stb	r17,139(sp)
81111310:	b000c316 	blt	r22,zero,81111620 <___svfprintf_internal_r+0x20b0>
81111314:	00800ac4 	movi	r2,43
81111318:	d8802305 	stb	r2,140(sp)
8111131c:	00800244 	movi	r2,9
81111320:	15806e16 	blt	r2,r22,811114dc <___svfprintf_internal_r+0x1f6c>
81111324:	00800c04 	movi	r2,48
81111328:	b5800c04 	addi	r22,r22,48
8111132c:	d8802345 	stb	r2,141(sp)
81111330:	dd802385 	stb	r22,142(sp)
81111334:	d88023c4 	addi	r2,sp,143
81111338:	df0022c4 	addi	fp,sp,139
8111133c:	d8c03317 	ldw	r3,204(sp)
81111340:	1739c83a 	sub	fp,r2,fp
81111344:	d9003317 	ldw	r4,204(sp)
81111348:	e0c7883a 	add	r3,fp,r3
8111134c:	df003b15 	stw	fp,236(sp)
81111350:	d8c02e15 	stw	r3,184(sp)
81111354:	00800044 	movi	r2,1
81111358:	1100b70e 	bge	r2,r4,81111638 <___svfprintf_internal_r+0x20c8>
8111135c:	d8c02e17 	ldw	r3,184(sp)
81111360:	18c00044 	addi	r3,r3,1
81111364:	d8c02e15 	stw	r3,184(sp)
81111368:	1805883a 	mov	r2,r3
8111136c:	1800b016 	blt	r3,zero,81111630 <___svfprintf_internal_r+0x20c0>
81111370:	d8003215 	stw	zero,200(sp)
81111374:	003f1006 	br	81110fb8 <__reset+0xfb0f0fb8>
81111378:	d8802917 	ldw	r2,164(sp)
8111137c:	103ec71e 	bne	r2,zero,81110e9c <__reset+0xfb0f0e9c>
81111380:	dc002915 	stw	r16,164(sp)
81111384:	003ec506 	br	81110e9c <__reset+0xfb0f0e9c>
81111388:	d9402c17 	ldw	r5,176(sp)
8111138c:	d9801e04 	addi	r6,sp,120
81111390:	9809883a 	mov	r4,r19
81111394:	111c1a80 	call	8111c1a8 <__ssprint_r>
81111398:	10395c1e 	bne	r2,zero,8110f90c <__reset+0xfb0ef90c>
8111139c:	dc402617 	ldw	r17,152(sp)
811113a0:	d8c02017 	ldw	r3,128(sp)
811113a4:	d8801f17 	ldw	r2,124(sp)
811113a8:	da000404 	addi	r8,sp,16
811113ac:	003e7706 	br	81110d8c <__reset+0xfb0f0d8c>
811113b0:	582f883a 	mov	r23,r11
811113b4:	d8002915 	stw	zero,164(sp)
811113b8:	0038c406 	br	8110f6cc <__reset+0xfb0ef6cc>
811113bc:	d8c02917 	ldw	r3,164(sp)
811113c0:	d8802104 	addi	r2,sp,132
811113c4:	d8800315 	stw	r2,12(sp)
811113c8:	d9403617 	ldw	r5,216(sp)
811113cc:	d8802504 	addi	r2,sp,148
811113d0:	d8800215 	stw	r2,8(sp)
811113d4:	d8802604 	addi	r2,sp,152
811113d8:	d8c00015 	stw	r3,0(sp)
811113dc:	9809883a 	mov	r4,r19
811113e0:	d8800115 	stw	r2,4(sp)
811113e4:	01c000c4 	movi	r7,3
811113e8:	a00d883a 	mov	r6,r20
811113ec:	da003e15 	stw	r8,248(sp)
811113f0:	11156fc0 	call	811156fc <_dtoa_r>
811113f4:	d9002917 	ldw	r4,164(sp)
811113f8:	da003e17 	ldw	r8,248(sp)
811113fc:	1021883a 	mov	r16,r2
81111400:	1139883a 	add	fp,r2,r4
81111404:	2007883a 	mov	r3,r4
81111408:	81000007 	ldb	r4,0(r16)
8111140c:	00800c04 	movi	r2,48
81111410:	20806f26 	beq	r4,r2,811115d0 <___svfprintf_internal_r+0x2060>
81111414:	d8c02617 	ldw	r3,152(sp)
81111418:	e0f9883a 	add	fp,fp,r3
8111141c:	003ec206 	br	81110f28 <__reset+0xfb0f0f28>
81111420:	00c00b44 	movi	r3,45
81111424:	2520003c 	xorhi	r20,r4,32768
81111428:	d8c02a05 	stb	r3,168(sp)
8111142c:	003ea106 	br	81110eb4 <__reset+0xfb0f0eb4>
81111430:	d8c03217 	ldw	r3,200(sp)
81111434:	00c0890e 	bge	zero,r3,8111165c <___svfprintf_internal_r+0x20ec>
81111438:	00800044 	movi	r2,1
8111143c:	d9003317 	ldw	r4,204(sp)
81111440:	1105883a 	add	r2,r2,r4
81111444:	d8802e15 	stw	r2,184(sp)
81111448:	10005f16 	blt	r2,zero,811115c8 <___svfprintf_internal_r+0x2058>
8111144c:	044019c4 	movi	r17,103
81111450:	003ed906 	br	81110fb8 <__reset+0xfb0f0fb8>
81111454:	d9002917 	ldw	r4,164(sp)
81111458:	20c00044 	addi	r3,r4,1
8111145c:	003e9c06 	br	81110ed0 <__reset+0xfb0f0ed0>
81111460:	d9002917 	ldw	r4,164(sp)
81111464:	00c0680e 	bge	zero,r3,81111608 <___svfprintf_internal_r+0x2098>
81111468:	2000461e 	bne	r4,zero,81111584 <___svfprintf_internal_r+0x2014>
8111146c:	9480004c 	andi	r18,r18,1
81111470:	9000441e 	bne	r18,zero,81111584 <___svfprintf_internal_r+0x2014>
81111474:	1805883a 	mov	r2,r3
81111478:	1800a016 	blt	r3,zero,811116fc <___svfprintf_internal_r+0x218c>
8111147c:	d8c03217 	ldw	r3,200(sp)
81111480:	d8c02e15 	stw	r3,184(sp)
81111484:	003ecc06 	br	81110fb8 <__reset+0xfb0f0fb8>
81111488:	d9402917 	ldw	r5,164(sp)
8111148c:	d8802104 	addi	r2,sp,132
81111490:	d8800315 	stw	r2,12(sp)
81111494:	d9400015 	stw	r5,0(sp)
81111498:	d8802504 	addi	r2,sp,148
8111149c:	d9403617 	ldw	r5,216(sp)
811114a0:	d8800215 	stw	r2,8(sp)
811114a4:	d8802604 	addi	r2,sp,152
811114a8:	d8800115 	stw	r2,4(sp)
811114ac:	01c000c4 	movi	r7,3
811114b0:	a00d883a 	mov	r6,r20
811114b4:	9809883a 	mov	r4,r19
811114b8:	da003e15 	stw	r8,248(sp)
811114bc:	11156fc0 	call	811156fc <_dtoa_r>
811114c0:	d8c02917 	ldw	r3,164(sp)
811114c4:	da003e17 	ldw	r8,248(sp)
811114c8:	1021883a 	mov	r16,r2
811114cc:	00801184 	movi	r2,70
811114d0:	80f9883a 	add	fp,r16,r3
811114d4:	88bfcc26 	beq	r17,r2,81111408 <__reset+0xfb0f1408>
811114d8:	003e9306 	br	81110f28 <__reset+0xfb0f0f28>
811114dc:	df0022c4 	addi	fp,sp,139
811114e0:	dc002915 	stw	r16,164(sp)
811114e4:	9829883a 	mov	r20,r19
811114e8:	e021883a 	mov	r16,fp
811114ec:	4027883a 	mov	r19,r8
811114f0:	b009883a 	mov	r4,r22
811114f4:	01400284 	movi	r5,10
811114f8:	1120e300 	call	81120e30 <__modsi3>
811114fc:	10800c04 	addi	r2,r2,48
81111500:	843fffc4 	addi	r16,r16,-1
81111504:	b009883a 	mov	r4,r22
81111508:	01400284 	movi	r5,10
8111150c:	80800005 	stb	r2,0(r16)
81111510:	1120dac0 	call	81120dac <__divsi3>
81111514:	102d883a 	mov	r22,r2
81111518:	00800244 	movi	r2,9
8111151c:	15bff416 	blt	r2,r22,811114f0 <__reset+0xfb0f14f0>
81111520:	9811883a 	mov	r8,r19
81111524:	b0800c04 	addi	r2,r22,48
81111528:	a027883a 	mov	r19,r20
8111152c:	8029883a 	mov	r20,r16
81111530:	a17fffc4 	addi	r5,r20,-1
81111534:	a0bfffc5 	stb	r2,-1(r20)
81111538:	dc002917 	ldw	r16,164(sp)
8111153c:	2f00752e 	bgeu	r5,fp,81111714 <___svfprintf_internal_r+0x21a4>
81111540:	d9c02384 	addi	r7,sp,142
81111544:	3d0fc83a 	sub	r7,r7,r20
81111548:	d9002344 	addi	r4,sp,141
8111154c:	e1cf883a 	add	r7,fp,r7
81111550:	00000106 	br	81111558 <___svfprintf_internal_r+0x1fe8>
81111554:	28800003 	ldbu	r2,0(r5)
81111558:	20800005 	stb	r2,0(r4)
8111155c:	21000044 	addi	r4,r4,1
81111560:	29400044 	addi	r5,r5,1
81111564:	21fffb1e 	bne	r4,r7,81111554 <__reset+0xfb0f1554>
81111568:	d8802304 	addi	r2,sp,140
8111156c:	1505c83a 	sub	r2,r2,r20
81111570:	d8c02344 	addi	r3,sp,141
81111574:	1885883a 	add	r2,r3,r2
81111578:	003f7006 	br	8111133c <__reset+0xfb0f133c>
8111157c:	0005883a 	mov	r2,zero
81111580:	003f0b06 	br	811111b0 <__reset+0xfb0f11b0>
81111584:	d9002917 	ldw	r4,164(sp)
81111588:	d8c03217 	ldw	r3,200(sp)
8111158c:	20800044 	addi	r2,r4,1
81111590:	1885883a 	add	r2,r3,r2
81111594:	d8802e15 	stw	r2,184(sp)
81111598:	103e870e 	bge	r2,zero,81110fb8 <__reset+0xfb0f0fb8>
8111159c:	0005883a 	mov	r2,zero
811115a0:	003e8506 	br	81110fb8 <__reset+0xfb0f0fb8>
811115a4:	01204534 	movhi	r4,33044
811115a8:	212ae384 	addi	r4,r4,-21618
811115ac:	d9002b15 	stw	r4,172(sp)
811115b0:	003cc506 	br	811108c8 <__reset+0xfb0f08c8>
811115b4:	d8c03217 	ldw	r3,200(sp)
811115b8:	18c00044 	addi	r3,r3,1
811115bc:	d8c02e15 	stw	r3,184(sp)
811115c0:	1805883a 	mov	r2,r3
811115c4:	183fa10e 	bge	r3,zero,8111144c <__reset+0xfb0f144c>
811115c8:	0005883a 	mov	r2,zero
811115cc:	003f9f06 	br	8111144c <__reset+0xfb0f144c>
811115d0:	d9003617 	ldw	r4,216(sp)
811115d4:	000d883a 	mov	r6,zero
811115d8:	000f883a 	mov	r7,zero
811115dc:	a00b883a 	mov	r5,r20
811115e0:	d8c03d15 	stw	r3,244(sp)
811115e4:	da003e15 	stw	r8,248(sp)
811115e8:	11223000 	call	81122300 <__eqdf2>
811115ec:	d8c03d17 	ldw	r3,244(sp)
811115f0:	da003e17 	ldw	r8,248(sp)
811115f4:	103f8726 	beq	r2,zero,81111414 <__reset+0xfb0f1414>
811115f8:	00800044 	movi	r2,1
811115fc:	10c7c83a 	sub	r3,r2,r3
81111600:	d8c02615 	stw	r3,152(sp)
81111604:	003f8406 	br	81111418 <__reset+0xfb0f1418>
81111608:	20000e1e 	bne	r4,zero,81111644 <___svfprintf_internal_r+0x20d4>
8111160c:	9480004c 	andi	r18,r18,1
81111610:	90000c1e 	bne	r18,zero,81111644 <___svfprintf_internal_r+0x20d4>
81111614:	00800044 	movi	r2,1
81111618:	d8802e15 	stw	r2,184(sp)
8111161c:	003e6606 	br	81110fb8 <__reset+0xfb0f0fb8>
81111620:	00800b44 	movi	r2,45
81111624:	05adc83a 	sub	r22,zero,r22
81111628:	d8802305 	stb	r2,140(sp)
8111162c:	003f3b06 	br	8111131c <__reset+0xfb0f131c>
81111630:	0005883a 	mov	r2,zero
81111634:	003f4e06 	br	81111370 <__reset+0xfb0f1370>
81111638:	90a4703a 	and	r18,r18,r2
8111163c:	903f4a26 	beq	r18,zero,81111368 <__reset+0xfb0f1368>
81111640:	003f4606 	br	8111135c <__reset+0xfb0f135c>
81111644:	d8c02917 	ldw	r3,164(sp)
81111648:	18c00084 	addi	r3,r3,2
8111164c:	d8c02e15 	stw	r3,184(sp)
81111650:	1805883a 	mov	r2,r3
81111654:	183e580e 	bge	r3,zero,81110fb8 <__reset+0xfb0f0fb8>
81111658:	003fd006 	br	8111159c <__reset+0xfb0f159c>
8111165c:	00800084 	movi	r2,2
81111660:	10c5c83a 	sub	r2,r2,r3
81111664:	003f7506 	br	8111143c <__reset+0xfb0f143c>
81111668:	d8802d17 	ldw	r2,180(sp)
8111166c:	d9002d17 	ldw	r4,180(sp)
81111670:	bc400043 	ldbu	r17,1(r23)
81111674:	10800017 	ldw	r2,0(r2)
81111678:	582f883a 	mov	r23,r11
8111167c:	d8802915 	stw	r2,164(sp)
81111680:	20800104 	addi	r2,r4,4
81111684:	d9002917 	ldw	r4,164(sp)
81111688:	d8802d15 	stw	r2,180(sp)
8111168c:	203df00e 	bge	r4,zero,81110e50 <__reset+0xfb0f0e50>
81111690:	8c403fcc 	andi	r17,r17,255
81111694:	00bfffc4 	movi	r2,-1
81111698:	8c40201c 	xori	r17,r17,128
8111169c:	d8802915 	stw	r2,164(sp)
811116a0:	8c7fe004 	addi	r17,r17,-128
811116a4:	00380806 	br	8110f6c8 <__reset+0xfb0ef6c8>
811116a8:	9080004c 	andi	r2,r18,1
811116ac:	0039883a 	mov	fp,zero
811116b0:	10000726 	beq	r2,zero,811116d0 <___svfprintf_internal_r+0x2160>
811116b4:	d8c02817 	ldw	r3,160(sp)
811116b8:	dc001dc4 	addi	r16,sp,119
811116bc:	00800c04 	movi	r2,48
811116c0:	1c07c83a 	sub	r3,r3,r16
811116c4:	d8801dc5 	stb	r2,119(sp)
811116c8:	d8c02e15 	stw	r3,184(sp)
811116cc:	00395206 	br	8110fc18 <__reset+0xfb0efc18>
811116d0:	d8002e15 	stw	zero,184(sp)
811116d4:	dc001e04 	addi	r16,sp,120
811116d8:	00394f06 	br	8110fc18 <__reset+0xfb0efc18>
811116dc:	0005883a 	mov	r2,zero
811116e0:	003e3206 	br	81110fac <__reset+0xfb0f0fac>
811116e4:	dd802617 	ldw	r22,152(sp)
811116e8:	003f0606 	br	81111304 <__reset+0xfb0f1304>
811116ec:	d9c02785 	stb	r7,158(sp)
811116f0:	003a5106 	br	81110038 <__reset+0xfb0f0038>
811116f4:	d9c02785 	stb	r7,158(sp)
811116f8:	003a3706 	br	8110ffd8 <__reset+0xfb0effd8>
811116fc:	0005883a 	mov	r2,zero
81111700:	003f5e06 	br	8111147c <__reset+0xfb0f147c>
81111704:	d9c02785 	stb	r7,158(sp)
81111708:	00391706 	br	8110fb68 <__reset+0xfb0efb68>
8111170c:	d9c02785 	stb	r7,158(sp)
81111710:	0038e606 	br	8110faac <__reset+0xfb0efaac>
81111714:	d8802344 	addi	r2,sp,141
81111718:	003f0806 	br	8111133c <__reset+0xfb0f133c>
8111171c:	d9c02785 	stb	r7,158(sp)
81111720:	0038b706 	br	8110fa00 <__reset+0xfb0efa00>
81111724:	d9c02785 	stb	r7,158(sp)
81111728:	003adc06 	br	8111029c <__reset+0xfb0f029c>
8111172c:	d9403917 	ldw	r5,228(sp)
81111730:	00800304 	movi	r2,12
81111734:	28800015 	stw	r2,0(r5)
81111738:	00bfffc4 	movi	r2,-1
8111173c:	00387806 	br	8110f920 <__reset+0xfb0ef920>
81111740:	d9c02785 	stb	r7,158(sp)
81111744:	003abf06 	br	81110244 <__reset+0xfb0f0244>
81111748:	d9c02785 	stb	r7,158(sp)
8111174c:	003a9b06 	br	811101bc <__reset+0xfb0f01bc>

81111750 <___vfprintf_internal_r>:
81111750:	deffb804 	addi	sp,sp,-288
81111754:	de00012e 	bgeu	sp,et,8111175c <___vfprintf_internal_r+0xc>
81111758:	003b68fa 	trap	3
8111175c:	dfc04715 	stw	ra,284(sp)
81111760:	ddc04515 	stw	r23,276(sp)
81111764:	dd404315 	stw	r21,268(sp)
81111768:	d9002c15 	stw	r4,176(sp)
8111176c:	282f883a 	mov	r23,r5
81111770:	302b883a 	mov	r21,r6
81111774:	d9c02d15 	stw	r7,180(sp)
81111778:	df004615 	stw	fp,280(sp)
8111177c:	dd804415 	stw	r22,272(sp)
81111780:	dd004215 	stw	r20,264(sp)
81111784:	dcc04115 	stw	r19,260(sp)
81111788:	dc804015 	stw	r18,256(sp)
8111178c:	dc403f15 	stw	r17,252(sp)
81111790:	dc003e15 	stw	r16,248(sp)
81111794:	11182f80 	call	811182f8 <_localeconv_r>
81111798:	10800017 	ldw	r2,0(r2)
8111179c:	1009883a 	mov	r4,r2
811117a0:	d8803415 	stw	r2,208(sp)
811117a4:	110f27c0 	call	8110f27c <strlen>
811117a8:	d8803715 	stw	r2,220(sp)
811117ac:	d8802c17 	ldw	r2,176(sp)
811117b0:	10000226 	beq	r2,zero,811117bc <___vfprintf_internal_r+0x6c>
811117b4:	10800e17 	ldw	r2,56(r2)
811117b8:	1000f926 	beq	r2,zero,81111ba0 <___vfprintf_internal_r+0x450>
811117bc:	b880030b 	ldhu	r2,12(r23)
811117c0:	10c8000c 	andi	r3,r2,8192
811117c4:	1800061e 	bne	r3,zero,811117e0 <___vfprintf_internal_r+0x90>
811117c8:	b9001917 	ldw	r4,100(r23)
811117cc:	00f7ffc4 	movi	r3,-8193
811117d0:	10880014 	ori	r2,r2,8192
811117d4:	20c6703a 	and	r3,r4,r3
811117d8:	b880030d 	sth	r2,12(r23)
811117dc:	b8c01915 	stw	r3,100(r23)
811117e0:	10c0020c 	andi	r3,r2,8
811117e4:	1800c126 	beq	r3,zero,81111aec <___vfprintf_internal_r+0x39c>
811117e8:	b8c00417 	ldw	r3,16(r23)
811117ec:	1800bf26 	beq	r3,zero,81111aec <___vfprintf_internal_r+0x39c>
811117f0:	1080068c 	andi	r2,r2,26
811117f4:	00c00284 	movi	r3,10
811117f8:	10c0c426 	beq	r2,r3,81111b0c <___vfprintf_internal_r+0x3bc>
811117fc:	d8c00404 	addi	r3,sp,16
81111800:	05204534 	movhi	r20,33044
81111804:	d9001e04 	addi	r4,sp,120
81111808:	a52aeb84 	addi	r20,r20,-21586
8111180c:	d8c01e15 	stw	r3,120(sp)
81111810:	d8002015 	stw	zero,128(sp)
81111814:	d8001f15 	stw	zero,124(sp)
81111818:	d8003315 	stw	zero,204(sp)
8111181c:	d8003615 	stw	zero,216(sp)
81111820:	d8003815 	stw	zero,224(sp)
81111824:	1811883a 	mov	r8,r3
81111828:	d8003915 	stw	zero,228(sp)
8111182c:	d8003a15 	stw	zero,232(sp)
81111830:	d8002f15 	stw	zero,188(sp)
81111834:	d9002815 	stw	r4,160(sp)
81111838:	a8800007 	ldb	r2,0(r21)
8111183c:	10027b26 	beq	r2,zero,8111222c <___vfprintf_internal_r+0xadc>
81111840:	00c00944 	movi	r3,37
81111844:	a821883a 	mov	r16,r21
81111848:	10c0021e 	bne	r2,r3,81111854 <___vfprintf_internal_r+0x104>
8111184c:	00001406 	br	811118a0 <___vfprintf_internal_r+0x150>
81111850:	10c00326 	beq	r2,r3,81111860 <___vfprintf_internal_r+0x110>
81111854:	84000044 	addi	r16,r16,1
81111858:	80800007 	ldb	r2,0(r16)
8111185c:	103ffc1e 	bne	r2,zero,81111850 <__reset+0xfb0f1850>
81111860:	8563c83a 	sub	r17,r16,r21
81111864:	88000e26 	beq	r17,zero,811118a0 <___vfprintf_internal_r+0x150>
81111868:	d8c02017 	ldw	r3,128(sp)
8111186c:	d8801f17 	ldw	r2,124(sp)
81111870:	45400015 	stw	r21,0(r8)
81111874:	1c47883a 	add	r3,r3,r17
81111878:	10800044 	addi	r2,r2,1
8111187c:	d8c02015 	stw	r3,128(sp)
81111880:	44400115 	stw	r17,4(r8)
81111884:	d8801f15 	stw	r2,124(sp)
81111888:	00c001c4 	movi	r3,7
8111188c:	1880a716 	blt	r3,r2,81111b2c <___vfprintf_internal_r+0x3dc>
81111890:	42000204 	addi	r8,r8,8
81111894:	d9402f17 	ldw	r5,188(sp)
81111898:	2c4b883a 	add	r5,r5,r17
8111189c:	d9402f15 	stw	r5,188(sp)
811118a0:	80800007 	ldb	r2,0(r16)
811118a4:	1000a826 	beq	r2,zero,81111b48 <___vfprintf_internal_r+0x3f8>
811118a8:	84400047 	ldb	r17,1(r16)
811118ac:	00bfffc4 	movi	r2,-1
811118b0:	85400044 	addi	r21,r16,1
811118b4:	d8002785 	stb	zero,158(sp)
811118b8:	0007883a 	mov	r3,zero
811118bc:	000f883a 	mov	r7,zero
811118c0:	d8802915 	stw	r2,164(sp)
811118c4:	d8003115 	stw	zero,196(sp)
811118c8:	0025883a 	mov	r18,zero
811118cc:	01401604 	movi	r5,88
811118d0:	01800244 	movi	r6,9
811118d4:	02800a84 	movi	r10,42
811118d8:	02401b04 	movi	r9,108
811118dc:	ad400044 	addi	r21,r21,1
811118e0:	88bff804 	addi	r2,r17,-32
811118e4:	28830436 	bltu	r5,r2,811124f8 <___vfprintf_internal_r+0xda8>
811118e8:	100490ba 	slli	r2,r2,2
811118ec:	01204474 	movhi	r4,33041
811118f0:	21064004 	addi	r4,r4,6400
811118f4:	1105883a 	add	r2,r2,r4
811118f8:	10800017 	ldw	r2,0(r2)
811118fc:	1000683a 	jmp	r2
81111900:	81112418 	cmpnei	r4,r16,17552
81111904:	811124f8 	rdprs	r4,r16,17555
81111908:	811124f8 	rdprs	r4,r16,17555
8111190c:	81112438 	rdprs	r4,r16,17552
81111910:	811124f8 	rdprs	r4,r16,17555
81111914:	811124f8 	rdprs	r4,r16,17555
81111918:	811124f8 	rdprs	r4,r16,17555
8111191c:	811124f8 	rdprs	r4,r16,17555
81111920:	811124f8 	rdprs	r4,r16,17555
81111924:	811124f8 	rdprs	r4,r16,17555
81111928:	81111bac 	andhi	r4,r16,17518
8111192c:	81112354 	ori	r4,r16,17549
81111930:	811124f8 	rdprs	r4,r16,17555
81111934:	81111a74 	orhi	r4,r16,17513
81111938:	81111bd4 	ori	r4,r16,17519
8111193c:	811124f8 	rdprs	r4,r16,17555
81111940:	81111c14 	ori	r4,r16,17520
81111944:	81111c20 	cmpeqi	r4,r16,17520
81111948:	81111c20 	cmpeqi	r4,r16,17520
8111194c:	81111c20 	cmpeqi	r4,r16,17520
81111950:	81111c20 	cmpeqi	r4,r16,17520
81111954:	81111c20 	cmpeqi	r4,r16,17520
81111958:	81111c20 	cmpeqi	r4,r16,17520
8111195c:	81111c20 	cmpeqi	r4,r16,17520
81111960:	81111c20 	cmpeqi	r4,r16,17520
81111964:	81111c20 	cmpeqi	r4,r16,17520
81111968:	811124f8 	rdprs	r4,r16,17555
8111196c:	811124f8 	rdprs	r4,r16,17555
81111970:	811124f8 	rdprs	r4,r16,17555
81111974:	811124f8 	rdprs	r4,r16,17555
81111978:	811124f8 	rdprs	r4,r16,17555
8111197c:	811124f8 	rdprs	r4,r16,17555
81111980:	811124f8 	rdprs	r4,r16,17555
81111984:	811124f8 	rdprs	r4,r16,17555
81111988:	811124f8 	rdprs	r4,r16,17555
8111198c:	811124f8 	rdprs	r4,r16,17555
81111990:	81111c54 	ori	r4,r16,17521
81111994:	81111d10 	cmplti	r4,r16,17524
81111998:	811124f8 	rdprs	r4,r16,17555
8111199c:	81111d10 	cmplti	r4,r16,17524
811119a0:	811124f8 	rdprs	r4,r16,17555
811119a4:	811124f8 	rdprs	r4,r16,17555
811119a8:	811124f8 	rdprs	r4,r16,17555
811119ac:	811124f8 	rdprs	r4,r16,17555
811119b0:	81111db0 	cmpltui	r4,r16,17526
811119b4:	811124f8 	rdprs	r4,r16,17555
811119b8:	811124f8 	rdprs	r4,r16,17555
811119bc:	81111dbc 	xorhi	r4,r16,17526
811119c0:	811124f8 	rdprs	r4,r16,17555
811119c4:	811124f8 	rdprs	r4,r16,17555
811119c8:	811124f8 	rdprs	r4,r16,17555
811119cc:	811124f8 	rdprs	r4,r16,17555
811119d0:	811124f8 	rdprs	r4,r16,17555
811119d4:	81112234 	orhi	r4,r16,17544
811119d8:	811124f8 	rdprs	r4,r16,17555
811119dc:	811124f8 	rdprs	r4,r16,17555
811119e0:	81112294 	ori	r4,r16,17546
811119e4:	811124f8 	rdprs	r4,r16,17555
811119e8:	811124f8 	rdprs	r4,r16,17555
811119ec:	811124f8 	rdprs	r4,r16,17555
811119f0:	811124f8 	rdprs	r4,r16,17555
811119f4:	811124f8 	rdprs	r4,r16,17555
811119f8:	811124f8 	rdprs	r4,r16,17555
811119fc:	811124f8 	rdprs	r4,r16,17555
81111a00:	811124f8 	rdprs	r4,r16,17555
81111a04:	811124f8 	rdprs	r4,r16,17555
81111a08:	811124f8 	rdprs	r4,r16,17555
81111a0c:	811124a4 	muli	r4,r16,17554
81111a10:	81112444 	addi	r4,r16,17553
81111a14:	81111d10 	cmplti	r4,r16,17524
81111a18:	81111d10 	cmplti	r4,r16,17524
81111a1c:	81111d10 	cmplti	r4,r16,17524
81111a20:	81112454 	ori	r4,r16,17553
81111a24:	81112444 	addi	r4,r16,17553
81111a28:	811124f8 	rdprs	r4,r16,17555
81111a2c:	811124f8 	rdprs	r4,r16,17555
81111a30:	81112460 	cmpeqi	r4,r16,17553
81111a34:	811124f8 	rdprs	r4,r16,17555
81111a38:	81112470 	cmpltui	r4,r16,17553
81111a3c:	81112344 	addi	r4,r16,17549
81111a40:	81111a80 	call	881111a8 <__reset+0x20f11a8>
81111a44:	81112364 	muli	r4,r16,17549
81111a48:	811124f8 	rdprs	r4,r16,17555
81111a4c:	81112370 	cmpltui	r4,r16,17549
81111a50:	811124f8 	rdprs	r4,r16,17555
81111a54:	811123cc 	andi	r4,r16,17551
81111a58:	811124f8 	rdprs	r4,r16,17555
81111a5c:	811124f8 	rdprs	r4,r16,17555
81111a60:	811123dc 	xori	r4,r16,17551
81111a64:	d9003117 	ldw	r4,196(sp)
81111a68:	d8802d15 	stw	r2,180(sp)
81111a6c:	0109c83a 	sub	r4,zero,r4
81111a70:	d9003115 	stw	r4,196(sp)
81111a74:	94800114 	ori	r18,r18,4
81111a78:	ac400007 	ldb	r17,0(r21)
81111a7c:	003f9706 	br	811118dc <__reset+0xfb0f18dc>
81111a80:	00800c04 	movi	r2,48
81111a84:	d9002d17 	ldw	r4,180(sp)
81111a88:	d9402917 	ldw	r5,164(sp)
81111a8c:	d8802705 	stb	r2,156(sp)
81111a90:	00801e04 	movi	r2,120
81111a94:	d8802745 	stb	r2,157(sp)
81111a98:	d8002785 	stb	zero,158(sp)
81111a9c:	20c00104 	addi	r3,r4,4
81111aa0:	24c00017 	ldw	r19,0(r4)
81111aa4:	002d883a 	mov	r22,zero
81111aa8:	90800094 	ori	r2,r18,2
81111aac:	28029a16 	blt	r5,zero,81112518 <___vfprintf_internal_r+0xdc8>
81111ab0:	00bfdfc4 	movi	r2,-129
81111ab4:	90a4703a 	and	r18,r18,r2
81111ab8:	d8c02d15 	stw	r3,180(sp)
81111abc:	94800094 	ori	r18,r18,2
81111ac0:	9802871e 	bne	r19,zero,811124e0 <___vfprintf_internal_r+0xd90>
81111ac4:	00a04534 	movhi	r2,33044
81111ac8:	10aadc04 	addi	r2,r2,-21648
81111acc:	d8803915 	stw	r2,228(sp)
81111ad0:	04401e04 	movi	r17,120
81111ad4:	d8802917 	ldw	r2,164(sp)
81111ad8:	0039883a 	mov	fp,zero
81111adc:	1001e926 	beq	r2,zero,81112284 <___vfprintf_internal_r+0xb34>
81111ae0:	0027883a 	mov	r19,zero
81111ae4:	002d883a 	mov	r22,zero
81111ae8:	00020506 	br	81112300 <___vfprintf_internal_r+0xbb0>
81111aec:	d9002c17 	ldw	r4,176(sp)
81111af0:	b80b883a 	mov	r5,r23
81111af4:	111533c0 	call	8111533c <__swsetup_r>
81111af8:	1005ac1e 	bne	r2,zero,811131ac <___vfprintf_internal_r+0x1a5c>
81111afc:	b880030b 	ldhu	r2,12(r23)
81111b00:	00c00284 	movi	r3,10
81111b04:	1080068c 	andi	r2,r2,26
81111b08:	10ff3c1e 	bne	r2,r3,811117fc <__reset+0xfb0f17fc>
81111b0c:	b880038f 	ldh	r2,14(r23)
81111b10:	103f3a16 	blt	r2,zero,811117fc <__reset+0xfb0f17fc>
81111b14:	d9c02d17 	ldw	r7,180(sp)
81111b18:	d9002c17 	ldw	r4,176(sp)
81111b1c:	a80d883a 	mov	r6,r21
81111b20:	b80b883a 	mov	r5,r23
81111b24:	111396c0 	call	8111396c <__sbprintf>
81111b28:	00001106 	br	81111b70 <___vfprintf_internal_r+0x420>
81111b2c:	d9002c17 	ldw	r4,176(sp)
81111b30:	d9801e04 	addi	r6,sp,120
81111b34:	b80b883a 	mov	r5,r23
81111b38:	111d9580 	call	8111d958 <__sprint_r>
81111b3c:	1000081e 	bne	r2,zero,81111b60 <___vfprintf_internal_r+0x410>
81111b40:	da000404 	addi	r8,sp,16
81111b44:	003f5306 	br	81111894 <__reset+0xfb0f1894>
81111b48:	d8802017 	ldw	r2,128(sp)
81111b4c:	10000426 	beq	r2,zero,81111b60 <___vfprintf_internal_r+0x410>
81111b50:	d9002c17 	ldw	r4,176(sp)
81111b54:	d9801e04 	addi	r6,sp,120
81111b58:	b80b883a 	mov	r5,r23
81111b5c:	111d9580 	call	8111d958 <__sprint_r>
81111b60:	b880030b 	ldhu	r2,12(r23)
81111b64:	1080100c 	andi	r2,r2,64
81111b68:	1005901e 	bne	r2,zero,811131ac <___vfprintf_internal_r+0x1a5c>
81111b6c:	d8802f17 	ldw	r2,188(sp)
81111b70:	dfc04717 	ldw	ra,284(sp)
81111b74:	df004617 	ldw	fp,280(sp)
81111b78:	ddc04517 	ldw	r23,276(sp)
81111b7c:	dd804417 	ldw	r22,272(sp)
81111b80:	dd404317 	ldw	r21,268(sp)
81111b84:	dd004217 	ldw	r20,264(sp)
81111b88:	dcc04117 	ldw	r19,260(sp)
81111b8c:	dc804017 	ldw	r18,256(sp)
81111b90:	dc403f17 	ldw	r17,252(sp)
81111b94:	dc003e17 	ldw	r16,248(sp)
81111b98:	dec04804 	addi	sp,sp,288
81111b9c:	f800283a 	ret
81111ba0:	d9002c17 	ldw	r4,176(sp)
81111ba4:	11173ac0 	call	811173ac <__sinit>
81111ba8:	003f0406 	br	811117bc <__reset+0xfb0f17bc>
81111bac:	d8802d17 	ldw	r2,180(sp)
81111bb0:	d9002d17 	ldw	r4,180(sp)
81111bb4:	10800017 	ldw	r2,0(r2)
81111bb8:	d8803115 	stw	r2,196(sp)
81111bbc:	20800104 	addi	r2,r4,4
81111bc0:	d9003117 	ldw	r4,196(sp)
81111bc4:	203fa716 	blt	r4,zero,81111a64 <__reset+0xfb0f1a64>
81111bc8:	d8802d15 	stw	r2,180(sp)
81111bcc:	ac400007 	ldb	r17,0(r21)
81111bd0:	003f4206 	br	811118dc <__reset+0xfb0f18dc>
81111bd4:	ac400007 	ldb	r17,0(r21)
81111bd8:	aac00044 	addi	r11,r21,1
81111bdc:	8a872826 	beq	r17,r10,81113880 <___vfprintf_internal_r+0x2130>
81111be0:	88bff404 	addi	r2,r17,-48
81111be4:	0009883a 	mov	r4,zero
81111be8:	30867d36 	bltu	r6,r2,811135e0 <___vfprintf_internal_r+0x1e90>
81111bec:	5c400007 	ldb	r17,0(r11)
81111bf0:	210002a4 	muli	r4,r4,10
81111bf4:	5d400044 	addi	r21,r11,1
81111bf8:	a817883a 	mov	r11,r21
81111bfc:	2089883a 	add	r4,r4,r2
81111c00:	88bff404 	addi	r2,r17,-48
81111c04:	30bff92e 	bgeu	r6,r2,81111bec <__reset+0xfb0f1bec>
81111c08:	2005c916 	blt	r4,zero,81113330 <___vfprintf_internal_r+0x1be0>
81111c0c:	d9002915 	stw	r4,164(sp)
81111c10:	003f3306 	br	811118e0 <__reset+0xfb0f18e0>
81111c14:	94802014 	ori	r18,r18,128
81111c18:	ac400007 	ldb	r17,0(r21)
81111c1c:	003f2f06 	br	811118dc <__reset+0xfb0f18dc>
81111c20:	a809883a 	mov	r4,r21
81111c24:	d8003115 	stw	zero,196(sp)
81111c28:	88bff404 	addi	r2,r17,-48
81111c2c:	0017883a 	mov	r11,zero
81111c30:	24400007 	ldb	r17,0(r4)
81111c34:	5ac002a4 	muli	r11,r11,10
81111c38:	ad400044 	addi	r21,r21,1
81111c3c:	a809883a 	mov	r4,r21
81111c40:	12d7883a 	add	r11,r2,r11
81111c44:	88bff404 	addi	r2,r17,-48
81111c48:	30bff92e 	bgeu	r6,r2,81111c30 <__reset+0xfb0f1c30>
81111c4c:	dac03115 	stw	r11,196(sp)
81111c50:	003f2306 	br	811118e0 <__reset+0xfb0f18e0>
81111c54:	18c03fcc 	andi	r3,r3,255
81111c58:	18072b1e 	bne	r3,zero,81113908 <___vfprintf_internal_r+0x21b8>
81111c5c:	94800414 	ori	r18,r18,16
81111c60:	9080080c 	andi	r2,r18,32
81111c64:	10037b26 	beq	r2,zero,81112a54 <___vfprintf_internal_r+0x1304>
81111c68:	d9402d17 	ldw	r5,180(sp)
81111c6c:	28800117 	ldw	r2,4(r5)
81111c70:	2cc00017 	ldw	r19,0(r5)
81111c74:	29400204 	addi	r5,r5,8
81111c78:	d9402d15 	stw	r5,180(sp)
81111c7c:	102d883a 	mov	r22,r2
81111c80:	10044b16 	blt	r2,zero,81112db0 <___vfprintf_internal_r+0x1660>
81111c84:	d9402917 	ldw	r5,164(sp)
81111c88:	df002783 	ldbu	fp,158(sp)
81111c8c:	2803bc16 	blt	r5,zero,81112b80 <___vfprintf_internal_r+0x1430>
81111c90:	00ffdfc4 	movi	r3,-129
81111c94:	9d84b03a 	or	r2,r19,r22
81111c98:	90e4703a 	and	r18,r18,r3
81111c9c:	10017726 	beq	r2,zero,8111227c <___vfprintf_internal_r+0xb2c>
81111ca0:	b0038326 	beq	r22,zero,81112ab0 <___vfprintf_internal_r+0x1360>
81111ca4:	dc402a15 	stw	r17,168(sp)
81111ca8:	dc001e04 	addi	r16,sp,120
81111cac:	b023883a 	mov	r17,r22
81111cb0:	402d883a 	mov	r22,r8
81111cb4:	9809883a 	mov	r4,r19
81111cb8:	880b883a 	mov	r5,r17
81111cbc:	01800284 	movi	r6,10
81111cc0:	000f883a 	mov	r7,zero
81111cc4:	112086c0 	call	8112086c <__umoddi3>
81111cc8:	10800c04 	addi	r2,r2,48
81111ccc:	843fffc4 	addi	r16,r16,-1
81111cd0:	9809883a 	mov	r4,r19
81111cd4:	880b883a 	mov	r5,r17
81111cd8:	80800005 	stb	r2,0(r16)
81111cdc:	01800284 	movi	r6,10
81111ce0:	000f883a 	mov	r7,zero
81111ce4:	11202ec0 	call	811202ec <__udivdi3>
81111ce8:	1027883a 	mov	r19,r2
81111cec:	10c4b03a 	or	r2,r2,r3
81111cf0:	1823883a 	mov	r17,r3
81111cf4:	103fef1e 	bne	r2,zero,81111cb4 <__reset+0xfb0f1cb4>
81111cf8:	d8c02817 	ldw	r3,160(sp)
81111cfc:	dc402a17 	ldw	r17,168(sp)
81111d00:	b011883a 	mov	r8,r22
81111d04:	1c07c83a 	sub	r3,r3,r16
81111d08:	d8c02e15 	stw	r3,184(sp)
81111d0c:	00005906 	br	81111e74 <___vfprintf_internal_r+0x724>
81111d10:	18c03fcc 	andi	r3,r3,255
81111d14:	1806fa1e 	bne	r3,zero,81113900 <___vfprintf_internal_r+0x21b0>
81111d18:	9080020c 	andi	r2,r18,8
81111d1c:	10048a26 	beq	r2,zero,81112f48 <___vfprintf_internal_r+0x17f8>
81111d20:	d8c02d17 	ldw	r3,180(sp)
81111d24:	d9002d17 	ldw	r4,180(sp)
81111d28:	d9402d17 	ldw	r5,180(sp)
81111d2c:	18c00017 	ldw	r3,0(r3)
81111d30:	21000117 	ldw	r4,4(r4)
81111d34:	29400204 	addi	r5,r5,8
81111d38:	d8c03615 	stw	r3,216(sp)
81111d3c:	d9003815 	stw	r4,224(sp)
81111d40:	d9402d15 	stw	r5,180(sp)
81111d44:	d9003617 	ldw	r4,216(sp)
81111d48:	d9403817 	ldw	r5,224(sp)
81111d4c:	da003d15 	stw	r8,244(sp)
81111d50:	04000044 	movi	r16,1
81111d54:	1119fbc0 	call	81119fbc <__fpclassifyd>
81111d58:	da003d17 	ldw	r8,244(sp)
81111d5c:	14041f1e 	bne	r2,r16,81112ddc <___vfprintf_internal_r+0x168c>
81111d60:	d9003617 	ldw	r4,216(sp)
81111d64:	d9403817 	ldw	r5,224(sp)
81111d68:	000d883a 	mov	r6,zero
81111d6c:	000f883a 	mov	r7,zero
81111d70:	11224640 	call	81122464 <__ledf2>
81111d74:	da003d17 	ldw	r8,244(sp)
81111d78:	1005be16 	blt	r2,zero,81113474 <___vfprintf_internal_r+0x1d24>
81111d7c:	df002783 	ldbu	fp,158(sp)
81111d80:	008011c4 	movi	r2,71
81111d84:	1445330e 	bge	r2,r17,81113254 <___vfprintf_internal_r+0x1b04>
81111d88:	04204534 	movhi	r16,33044
81111d8c:	842ad404 	addi	r16,r16,-21680
81111d90:	00c000c4 	movi	r3,3
81111d94:	00bfdfc4 	movi	r2,-129
81111d98:	d8c02a15 	stw	r3,168(sp)
81111d9c:	90a4703a 	and	r18,r18,r2
81111da0:	d8c02e15 	stw	r3,184(sp)
81111da4:	d8002915 	stw	zero,164(sp)
81111da8:	d8003215 	stw	zero,200(sp)
81111dac:	00003706 	br	81111e8c <___vfprintf_internal_r+0x73c>
81111db0:	94800214 	ori	r18,r18,8
81111db4:	ac400007 	ldb	r17,0(r21)
81111db8:	003ec806 	br	811118dc <__reset+0xfb0f18dc>
81111dbc:	18c03fcc 	andi	r3,r3,255
81111dc0:	1806db1e 	bne	r3,zero,81113930 <___vfprintf_internal_r+0x21e0>
81111dc4:	94800414 	ori	r18,r18,16
81111dc8:	9080080c 	andi	r2,r18,32
81111dcc:	1002d826 	beq	r2,zero,81112930 <___vfprintf_internal_r+0x11e0>
81111dd0:	d9402d17 	ldw	r5,180(sp)
81111dd4:	d8c02917 	ldw	r3,164(sp)
81111dd8:	d8002785 	stb	zero,158(sp)
81111ddc:	28800204 	addi	r2,r5,8
81111de0:	2cc00017 	ldw	r19,0(r5)
81111de4:	2d800117 	ldw	r22,4(r5)
81111de8:	18048f16 	blt	r3,zero,81113028 <___vfprintf_internal_r+0x18d8>
81111dec:	013fdfc4 	movi	r4,-129
81111df0:	9d86b03a 	or	r3,r19,r22
81111df4:	d8802d15 	stw	r2,180(sp)
81111df8:	9124703a 	and	r18,r18,r4
81111dfc:	1802d91e 	bne	r3,zero,81112964 <___vfprintf_internal_r+0x1214>
81111e00:	d8c02917 	ldw	r3,164(sp)
81111e04:	0039883a 	mov	fp,zero
81111e08:	1805c326 	beq	r3,zero,81113518 <___vfprintf_internal_r+0x1dc8>
81111e0c:	0027883a 	mov	r19,zero
81111e10:	002d883a 	mov	r22,zero
81111e14:	dc001e04 	addi	r16,sp,120
81111e18:	9806d0fa 	srli	r3,r19,3
81111e1c:	b008977a 	slli	r4,r22,29
81111e20:	b02cd0fa 	srli	r22,r22,3
81111e24:	9cc001cc 	andi	r19,r19,7
81111e28:	98800c04 	addi	r2,r19,48
81111e2c:	843fffc4 	addi	r16,r16,-1
81111e30:	20e6b03a 	or	r19,r4,r3
81111e34:	80800005 	stb	r2,0(r16)
81111e38:	9d86b03a 	or	r3,r19,r22
81111e3c:	183ff61e 	bne	r3,zero,81111e18 <__reset+0xfb0f1e18>
81111e40:	90c0004c 	andi	r3,r18,1
81111e44:	18013b26 	beq	r3,zero,81112334 <___vfprintf_internal_r+0xbe4>
81111e48:	10803fcc 	andi	r2,r2,255
81111e4c:	1080201c 	xori	r2,r2,128
81111e50:	10bfe004 	addi	r2,r2,-128
81111e54:	00c00c04 	movi	r3,48
81111e58:	10c13626 	beq	r2,r3,81112334 <___vfprintf_internal_r+0xbe4>
81111e5c:	80ffffc5 	stb	r3,-1(r16)
81111e60:	d8c02817 	ldw	r3,160(sp)
81111e64:	80bfffc4 	addi	r2,r16,-1
81111e68:	1021883a 	mov	r16,r2
81111e6c:	1887c83a 	sub	r3,r3,r2
81111e70:	d8c02e15 	stw	r3,184(sp)
81111e74:	d8802e17 	ldw	r2,184(sp)
81111e78:	d9002917 	ldw	r4,164(sp)
81111e7c:	1100010e 	bge	r2,r4,81111e84 <___vfprintf_internal_r+0x734>
81111e80:	2005883a 	mov	r2,r4
81111e84:	d8802a15 	stw	r2,168(sp)
81111e88:	d8003215 	stw	zero,200(sp)
81111e8c:	e7003fcc 	andi	fp,fp,255
81111e90:	e700201c 	xori	fp,fp,128
81111e94:	e73fe004 	addi	fp,fp,-128
81111e98:	e0000326 	beq	fp,zero,81111ea8 <___vfprintf_internal_r+0x758>
81111e9c:	d8c02a17 	ldw	r3,168(sp)
81111ea0:	18c00044 	addi	r3,r3,1
81111ea4:	d8c02a15 	stw	r3,168(sp)
81111ea8:	90c0008c 	andi	r3,r18,2
81111eac:	d8c02b15 	stw	r3,172(sp)
81111eb0:	18000326 	beq	r3,zero,81111ec0 <___vfprintf_internal_r+0x770>
81111eb4:	d8c02a17 	ldw	r3,168(sp)
81111eb8:	18c00084 	addi	r3,r3,2
81111ebc:	d8c02a15 	stw	r3,168(sp)
81111ec0:	90c0210c 	andi	r3,r18,132
81111ec4:	d8c03015 	stw	r3,192(sp)
81111ec8:	1801a31e 	bne	r3,zero,81112558 <___vfprintf_internal_r+0xe08>
81111ecc:	d9003117 	ldw	r4,196(sp)
81111ed0:	d8c02a17 	ldw	r3,168(sp)
81111ed4:	20e7c83a 	sub	r19,r4,r3
81111ed8:	04c19f0e 	bge	zero,r19,81112558 <___vfprintf_internal_r+0xe08>
81111edc:	02400404 	movi	r9,16
81111ee0:	d8c02017 	ldw	r3,128(sp)
81111ee4:	d8801f17 	ldw	r2,124(sp)
81111ee8:	4cc50d0e 	bge	r9,r19,81113320 <___vfprintf_internal_r+0x1bd0>
81111eec:	01604534 	movhi	r5,33044
81111ef0:	296aef84 	addi	r5,r5,-21570
81111ef4:	dc403b15 	stw	r17,236(sp)
81111ef8:	d9403515 	stw	r5,212(sp)
81111efc:	9823883a 	mov	r17,r19
81111f00:	482d883a 	mov	r22,r9
81111f04:	9027883a 	mov	r19,r18
81111f08:	070001c4 	movi	fp,7
81111f0c:	8025883a 	mov	r18,r16
81111f10:	dc002c17 	ldw	r16,176(sp)
81111f14:	00000306 	br	81111f24 <___vfprintf_internal_r+0x7d4>
81111f18:	8c7ffc04 	addi	r17,r17,-16
81111f1c:	42000204 	addi	r8,r8,8
81111f20:	b440130e 	bge	r22,r17,81111f70 <___vfprintf_internal_r+0x820>
81111f24:	01204534 	movhi	r4,33044
81111f28:	18c00404 	addi	r3,r3,16
81111f2c:	10800044 	addi	r2,r2,1
81111f30:	212aef84 	addi	r4,r4,-21570
81111f34:	41000015 	stw	r4,0(r8)
81111f38:	45800115 	stw	r22,4(r8)
81111f3c:	d8c02015 	stw	r3,128(sp)
81111f40:	d8801f15 	stw	r2,124(sp)
81111f44:	e0bff40e 	bge	fp,r2,81111f18 <__reset+0xfb0f1f18>
81111f48:	d9801e04 	addi	r6,sp,120
81111f4c:	b80b883a 	mov	r5,r23
81111f50:	8009883a 	mov	r4,r16
81111f54:	111d9580 	call	8111d958 <__sprint_r>
81111f58:	103f011e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81111f5c:	8c7ffc04 	addi	r17,r17,-16
81111f60:	d8c02017 	ldw	r3,128(sp)
81111f64:	d8801f17 	ldw	r2,124(sp)
81111f68:	da000404 	addi	r8,sp,16
81111f6c:	b47fed16 	blt	r22,r17,81111f24 <__reset+0xfb0f1f24>
81111f70:	9021883a 	mov	r16,r18
81111f74:	9825883a 	mov	r18,r19
81111f78:	8827883a 	mov	r19,r17
81111f7c:	dc403b17 	ldw	r17,236(sp)
81111f80:	d9403517 	ldw	r5,212(sp)
81111f84:	98c7883a 	add	r3,r19,r3
81111f88:	10800044 	addi	r2,r2,1
81111f8c:	41400015 	stw	r5,0(r8)
81111f90:	44c00115 	stw	r19,4(r8)
81111f94:	d8c02015 	stw	r3,128(sp)
81111f98:	d8801f15 	stw	r2,124(sp)
81111f9c:	010001c4 	movi	r4,7
81111fa0:	2082a316 	blt	r4,r2,81112a30 <___vfprintf_internal_r+0x12e0>
81111fa4:	df002787 	ldb	fp,158(sp)
81111fa8:	42000204 	addi	r8,r8,8
81111fac:	e0000c26 	beq	fp,zero,81111fe0 <___vfprintf_internal_r+0x890>
81111fb0:	d8801f17 	ldw	r2,124(sp)
81111fb4:	d9002784 	addi	r4,sp,158
81111fb8:	18c00044 	addi	r3,r3,1
81111fbc:	10800044 	addi	r2,r2,1
81111fc0:	41000015 	stw	r4,0(r8)
81111fc4:	01000044 	movi	r4,1
81111fc8:	41000115 	stw	r4,4(r8)
81111fcc:	d8c02015 	stw	r3,128(sp)
81111fd0:	d8801f15 	stw	r2,124(sp)
81111fd4:	010001c4 	movi	r4,7
81111fd8:	20823c16 	blt	r4,r2,811128cc <___vfprintf_internal_r+0x117c>
81111fdc:	42000204 	addi	r8,r8,8
81111fe0:	d8802b17 	ldw	r2,172(sp)
81111fe4:	10000c26 	beq	r2,zero,81112018 <___vfprintf_internal_r+0x8c8>
81111fe8:	d8801f17 	ldw	r2,124(sp)
81111fec:	d9002704 	addi	r4,sp,156
81111ff0:	18c00084 	addi	r3,r3,2
81111ff4:	10800044 	addi	r2,r2,1
81111ff8:	41000015 	stw	r4,0(r8)
81111ffc:	01000084 	movi	r4,2
81112000:	41000115 	stw	r4,4(r8)
81112004:	d8c02015 	stw	r3,128(sp)
81112008:	d8801f15 	stw	r2,124(sp)
8111200c:	010001c4 	movi	r4,7
81112010:	20823616 	blt	r4,r2,811128ec <___vfprintf_internal_r+0x119c>
81112014:	42000204 	addi	r8,r8,8
81112018:	d9003017 	ldw	r4,192(sp)
8111201c:	00802004 	movi	r2,128
81112020:	20819926 	beq	r4,r2,81112688 <___vfprintf_internal_r+0xf38>
81112024:	d9402917 	ldw	r5,164(sp)
81112028:	d8802e17 	ldw	r2,184(sp)
8111202c:	28adc83a 	sub	r22,r5,r2
81112030:	0580310e 	bge	zero,r22,811120f8 <___vfprintf_internal_r+0x9a8>
81112034:	07000404 	movi	fp,16
81112038:	d8801f17 	ldw	r2,124(sp)
8111203c:	e584140e 	bge	fp,r22,81113090 <___vfprintf_internal_r+0x1940>
81112040:	01604534 	movhi	r5,33044
81112044:	296aeb84 	addi	r5,r5,-21586
81112048:	dc402915 	stw	r17,164(sp)
8111204c:	d9402b15 	stw	r5,172(sp)
81112050:	b023883a 	mov	r17,r22
81112054:	04c001c4 	movi	r19,7
81112058:	a82d883a 	mov	r22,r21
8111205c:	902b883a 	mov	r21,r18
81112060:	8025883a 	mov	r18,r16
81112064:	dc002c17 	ldw	r16,176(sp)
81112068:	00000306 	br	81112078 <___vfprintf_internal_r+0x928>
8111206c:	8c7ffc04 	addi	r17,r17,-16
81112070:	42000204 	addi	r8,r8,8
81112074:	e440110e 	bge	fp,r17,811120bc <___vfprintf_internal_r+0x96c>
81112078:	18c00404 	addi	r3,r3,16
8111207c:	10800044 	addi	r2,r2,1
81112080:	45000015 	stw	r20,0(r8)
81112084:	47000115 	stw	fp,4(r8)
81112088:	d8c02015 	stw	r3,128(sp)
8111208c:	d8801f15 	stw	r2,124(sp)
81112090:	98bff60e 	bge	r19,r2,8111206c <__reset+0xfb0f206c>
81112094:	d9801e04 	addi	r6,sp,120
81112098:	b80b883a 	mov	r5,r23
8111209c:	8009883a 	mov	r4,r16
811120a0:	111d9580 	call	8111d958 <__sprint_r>
811120a4:	103eae1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811120a8:	8c7ffc04 	addi	r17,r17,-16
811120ac:	d8c02017 	ldw	r3,128(sp)
811120b0:	d8801f17 	ldw	r2,124(sp)
811120b4:	da000404 	addi	r8,sp,16
811120b8:	e47fef16 	blt	fp,r17,81112078 <__reset+0xfb0f2078>
811120bc:	9021883a 	mov	r16,r18
811120c0:	a825883a 	mov	r18,r21
811120c4:	b02b883a 	mov	r21,r22
811120c8:	882d883a 	mov	r22,r17
811120cc:	dc402917 	ldw	r17,164(sp)
811120d0:	d9002b17 	ldw	r4,172(sp)
811120d4:	1d87883a 	add	r3,r3,r22
811120d8:	10800044 	addi	r2,r2,1
811120dc:	41000015 	stw	r4,0(r8)
811120e0:	45800115 	stw	r22,4(r8)
811120e4:	d8c02015 	stw	r3,128(sp)
811120e8:	d8801f15 	stw	r2,124(sp)
811120ec:	010001c4 	movi	r4,7
811120f0:	2081ee16 	blt	r4,r2,811128ac <___vfprintf_internal_r+0x115c>
811120f4:	42000204 	addi	r8,r8,8
811120f8:	9080400c 	andi	r2,r18,256
811120fc:	1001181e 	bne	r2,zero,81112560 <___vfprintf_internal_r+0xe10>
81112100:	d9402e17 	ldw	r5,184(sp)
81112104:	d8801f17 	ldw	r2,124(sp)
81112108:	44000015 	stw	r16,0(r8)
8111210c:	1947883a 	add	r3,r3,r5
81112110:	10800044 	addi	r2,r2,1
81112114:	41400115 	stw	r5,4(r8)
81112118:	d8c02015 	stw	r3,128(sp)
8111211c:	d8801f15 	stw	r2,124(sp)
81112120:	010001c4 	movi	r4,7
81112124:	2081d316 	blt	r4,r2,81112874 <___vfprintf_internal_r+0x1124>
81112128:	42000204 	addi	r8,r8,8
8111212c:	9480010c 	andi	r18,r18,4
81112130:	90003226 	beq	r18,zero,811121fc <___vfprintf_internal_r+0xaac>
81112134:	d9403117 	ldw	r5,196(sp)
81112138:	d8802a17 	ldw	r2,168(sp)
8111213c:	28a1c83a 	sub	r16,r5,r2
81112140:	04002e0e 	bge	zero,r16,811121fc <___vfprintf_internal_r+0xaac>
81112144:	04400404 	movi	r17,16
81112148:	d8801f17 	ldw	r2,124(sp)
8111214c:	8c04a20e 	bge	r17,r16,811133d8 <___vfprintf_internal_r+0x1c88>
81112150:	01604534 	movhi	r5,33044
81112154:	296aef84 	addi	r5,r5,-21570
81112158:	d9403515 	stw	r5,212(sp)
8111215c:	048001c4 	movi	r18,7
81112160:	dcc02c17 	ldw	r19,176(sp)
81112164:	00000306 	br	81112174 <___vfprintf_internal_r+0xa24>
81112168:	843ffc04 	addi	r16,r16,-16
8111216c:	42000204 	addi	r8,r8,8
81112170:	8c00130e 	bge	r17,r16,811121c0 <___vfprintf_internal_r+0xa70>
81112174:	01204534 	movhi	r4,33044
81112178:	18c00404 	addi	r3,r3,16
8111217c:	10800044 	addi	r2,r2,1
81112180:	212aef84 	addi	r4,r4,-21570
81112184:	41000015 	stw	r4,0(r8)
81112188:	44400115 	stw	r17,4(r8)
8111218c:	d8c02015 	stw	r3,128(sp)
81112190:	d8801f15 	stw	r2,124(sp)
81112194:	90bff40e 	bge	r18,r2,81112168 <__reset+0xfb0f2168>
81112198:	d9801e04 	addi	r6,sp,120
8111219c:	b80b883a 	mov	r5,r23
811121a0:	9809883a 	mov	r4,r19
811121a4:	111d9580 	call	8111d958 <__sprint_r>
811121a8:	103e6d1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811121ac:	843ffc04 	addi	r16,r16,-16
811121b0:	d8c02017 	ldw	r3,128(sp)
811121b4:	d8801f17 	ldw	r2,124(sp)
811121b8:	da000404 	addi	r8,sp,16
811121bc:	8c3fed16 	blt	r17,r16,81112174 <__reset+0xfb0f2174>
811121c0:	d9403517 	ldw	r5,212(sp)
811121c4:	1c07883a 	add	r3,r3,r16
811121c8:	10800044 	addi	r2,r2,1
811121cc:	41400015 	stw	r5,0(r8)
811121d0:	44000115 	stw	r16,4(r8)
811121d4:	d8c02015 	stw	r3,128(sp)
811121d8:	d8801f15 	stw	r2,124(sp)
811121dc:	010001c4 	movi	r4,7
811121e0:	2080060e 	bge	r4,r2,811121fc <___vfprintf_internal_r+0xaac>
811121e4:	d9002c17 	ldw	r4,176(sp)
811121e8:	d9801e04 	addi	r6,sp,120
811121ec:	b80b883a 	mov	r5,r23
811121f0:	111d9580 	call	8111d958 <__sprint_r>
811121f4:	103e5a1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811121f8:	d8c02017 	ldw	r3,128(sp)
811121fc:	d8803117 	ldw	r2,196(sp)
81112200:	d9002a17 	ldw	r4,168(sp)
81112204:	1100010e 	bge	r2,r4,8111220c <___vfprintf_internal_r+0xabc>
81112208:	2005883a 	mov	r2,r4
8111220c:	d9402f17 	ldw	r5,188(sp)
81112210:	288b883a 	add	r5,r5,r2
81112214:	d9402f15 	stw	r5,188(sp)
81112218:	18019e1e 	bne	r3,zero,81112894 <___vfprintf_internal_r+0x1144>
8111221c:	a8800007 	ldb	r2,0(r21)
81112220:	d8001f15 	stw	zero,124(sp)
81112224:	da000404 	addi	r8,sp,16
81112228:	103d851e 	bne	r2,zero,81111840 <__reset+0xfb0f1840>
8111222c:	a821883a 	mov	r16,r21
81112230:	003d9b06 	br	811118a0 <__reset+0xfb0f18a0>
81112234:	18c03fcc 	andi	r3,r3,255
81112238:	1805c11e 	bne	r3,zero,81113940 <___vfprintf_internal_r+0x21f0>
8111223c:	94800414 	ori	r18,r18,16
81112240:	9080080c 	andi	r2,r18,32
81112244:	10020c26 	beq	r2,zero,81112a78 <___vfprintf_internal_r+0x1328>
81112248:	d8802d17 	ldw	r2,180(sp)
8111224c:	d9002917 	ldw	r4,164(sp)
81112250:	d8002785 	stb	zero,158(sp)
81112254:	10c00204 	addi	r3,r2,8
81112258:	14c00017 	ldw	r19,0(r2)
8111225c:	15800117 	ldw	r22,4(r2)
81112260:	20040f16 	blt	r4,zero,811132a0 <___vfprintf_internal_r+0x1b50>
81112264:	013fdfc4 	movi	r4,-129
81112268:	9d84b03a 	or	r2,r19,r22
8111226c:	d8c02d15 	stw	r3,180(sp)
81112270:	9124703a 	and	r18,r18,r4
81112274:	0039883a 	mov	fp,zero
81112278:	103e891e 	bne	r2,zero,81111ca0 <__reset+0xfb0f1ca0>
8111227c:	d9002917 	ldw	r4,164(sp)
81112280:	2002c11e 	bne	r4,zero,81112d88 <___vfprintf_internal_r+0x1638>
81112284:	d8002915 	stw	zero,164(sp)
81112288:	d8002e15 	stw	zero,184(sp)
8111228c:	dc001e04 	addi	r16,sp,120
81112290:	003ef806 	br	81111e74 <__reset+0xfb0f1e74>
81112294:	18c03fcc 	andi	r3,r3,255
81112298:	18059d1e 	bne	r3,zero,81113910 <___vfprintf_internal_r+0x21c0>
8111229c:	01604534 	movhi	r5,33044
811122a0:	296ad704 	addi	r5,r5,-21668
811122a4:	d9403915 	stw	r5,228(sp)
811122a8:	9080080c 	andi	r2,r18,32
811122ac:	10005226 	beq	r2,zero,811123f8 <___vfprintf_internal_r+0xca8>
811122b0:	d8802d17 	ldw	r2,180(sp)
811122b4:	14c00017 	ldw	r19,0(r2)
811122b8:	15800117 	ldw	r22,4(r2)
811122bc:	10800204 	addi	r2,r2,8
811122c0:	d8802d15 	stw	r2,180(sp)
811122c4:	9080004c 	andi	r2,r18,1
811122c8:	10019026 	beq	r2,zero,8111290c <___vfprintf_internal_r+0x11bc>
811122cc:	9d84b03a 	or	r2,r19,r22
811122d0:	10036926 	beq	r2,zero,81113078 <___vfprintf_internal_r+0x1928>
811122d4:	d8c02917 	ldw	r3,164(sp)
811122d8:	00800c04 	movi	r2,48
811122dc:	d8802705 	stb	r2,156(sp)
811122e0:	dc402745 	stb	r17,157(sp)
811122e4:	d8002785 	stb	zero,158(sp)
811122e8:	90800094 	ori	r2,r18,2
811122ec:	18045d16 	blt	r3,zero,81113464 <___vfprintf_internal_r+0x1d14>
811122f0:	00bfdfc4 	movi	r2,-129
811122f4:	90a4703a 	and	r18,r18,r2
811122f8:	94800094 	ori	r18,r18,2
811122fc:	0039883a 	mov	fp,zero
81112300:	d9003917 	ldw	r4,228(sp)
81112304:	dc001e04 	addi	r16,sp,120
81112308:	988003cc 	andi	r2,r19,15
8111230c:	b006973a 	slli	r3,r22,28
81112310:	2085883a 	add	r2,r4,r2
81112314:	9826d13a 	srli	r19,r19,4
81112318:	10800003 	ldbu	r2,0(r2)
8111231c:	b02cd13a 	srli	r22,r22,4
81112320:	843fffc4 	addi	r16,r16,-1
81112324:	1ce6b03a 	or	r19,r3,r19
81112328:	80800005 	stb	r2,0(r16)
8111232c:	9d84b03a 	or	r2,r19,r22
81112330:	103ff51e 	bne	r2,zero,81112308 <__reset+0xfb0f2308>
81112334:	d8c02817 	ldw	r3,160(sp)
81112338:	1c07c83a 	sub	r3,r3,r16
8111233c:	d8c02e15 	stw	r3,184(sp)
81112340:	003ecc06 	br	81111e74 <__reset+0xfb0f1e74>
81112344:	18c03fcc 	andi	r3,r3,255
81112348:	183e9f26 	beq	r3,zero,81111dc8 <__reset+0xfb0f1dc8>
8111234c:	d9c02785 	stb	r7,158(sp)
81112350:	003e9d06 	br	81111dc8 <__reset+0xfb0f1dc8>
81112354:	00c00044 	movi	r3,1
81112358:	01c00ac4 	movi	r7,43
8111235c:	ac400007 	ldb	r17,0(r21)
81112360:	003d5e06 	br	811118dc <__reset+0xfb0f18dc>
81112364:	94800814 	ori	r18,r18,32
81112368:	ac400007 	ldb	r17,0(r21)
8111236c:	003d5b06 	br	811118dc <__reset+0xfb0f18dc>
81112370:	d8c02d17 	ldw	r3,180(sp)
81112374:	d8002785 	stb	zero,158(sp)
81112378:	1c000017 	ldw	r16,0(r3)
8111237c:	1cc00104 	addi	r19,r3,4
81112380:	80041926 	beq	r16,zero,811133e8 <___vfprintf_internal_r+0x1c98>
81112384:	d9002917 	ldw	r4,164(sp)
81112388:	2003d016 	blt	r4,zero,811132cc <___vfprintf_internal_r+0x1b7c>
8111238c:	200d883a 	mov	r6,r4
81112390:	000b883a 	mov	r5,zero
81112394:	8009883a 	mov	r4,r16
81112398:	da003d15 	stw	r8,244(sp)
8111239c:	11185d40 	call	811185d4 <memchr>
811123a0:	da003d17 	ldw	r8,244(sp)
811123a4:	10045426 	beq	r2,zero,811134f8 <___vfprintf_internal_r+0x1da8>
811123a8:	1405c83a 	sub	r2,r2,r16
811123ac:	d8802e15 	stw	r2,184(sp)
811123b0:	1003cc16 	blt	r2,zero,811132e4 <___vfprintf_internal_r+0x1b94>
811123b4:	df002783 	ldbu	fp,158(sp)
811123b8:	d8802a15 	stw	r2,168(sp)
811123bc:	dcc02d15 	stw	r19,180(sp)
811123c0:	d8002915 	stw	zero,164(sp)
811123c4:	d8003215 	stw	zero,200(sp)
811123c8:	003eb006 	br	81111e8c <__reset+0xfb0f1e8c>
811123cc:	18c03fcc 	andi	r3,r3,255
811123d0:	183f9b26 	beq	r3,zero,81112240 <__reset+0xfb0f2240>
811123d4:	d9c02785 	stb	r7,158(sp)
811123d8:	003f9906 	br	81112240 <__reset+0xfb0f2240>
811123dc:	18c03fcc 	andi	r3,r3,255
811123e0:	1805551e 	bne	r3,zero,81113938 <___vfprintf_internal_r+0x21e8>
811123e4:	01604534 	movhi	r5,33044
811123e8:	296adc04 	addi	r5,r5,-21648
811123ec:	d9403915 	stw	r5,228(sp)
811123f0:	9080080c 	andi	r2,r18,32
811123f4:	103fae1e 	bne	r2,zero,811122b0 <__reset+0xfb0f22b0>
811123f8:	9080040c 	andi	r2,r18,16
811123fc:	1002de26 	beq	r2,zero,81112f78 <___vfprintf_internal_r+0x1828>
81112400:	d8c02d17 	ldw	r3,180(sp)
81112404:	002d883a 	mov	r22,zero
81112408:	1cc00017 	ldw	r19,0(r3)
8111240c:	18c00104 	addi	r3,r3,4
81112410:	d8c02d15 	stw	r3,180(sp)
81112414:	003fab06 	br	811122c4 <__reset+0xfb0f22c4>
81112418:	38803fcc 	andi	r2,r7,255
8111241c:	1080201c 	xori	r2,r2,128
81112420:	10bfe004 	addi	r2,r2,-128
81112424:	1002d21e 	bne	r2,zero,81112f70 <___vfprintf_internal_r+0x1820>
81112428:	00c00044 	movi	r3,1
8111242c:	01c00804 	movi	r7,32
81112430:	ac400007 	ldb	r17,0(r21)
81112434:	003d2906 	br	811118dc <__reset+0xfb0f18dc>
81112438:	94800054 	ori	r18,r18,1
8111243c:	ac400007 	ldb	r17,0(r21)
81112440:	003d2606 	br	811118dc <__reset+0xfb0f18dc>
81112444:	18c03fcc 	andi	r3,r3,255
81112448:	183e0526 	beq	r3,zero,81111c60 <__reset+0xfb0f1c60>
8111244c:	d9c02785 	stb	r7,158(sp)
81112450:	003e0306 	br	81111c60 <__reset+0xfb0f1c60>
81112454:	94801014 	ori	r18,r18,64
81112458:	ac400007 	ldb	r17,0(r21)
8111245c:	003d1f06 	br	811118dc <__reset+0xfb0f18dc>
81112460:	ac400007 	ldb	r17,0(r21)
81112464:	8a438726 	beq	r17,r9,81113284 <___vfprintf_internal_r+0x1b34>
81112468:	94800414 	ori	r18,r18,16
8111246c:	003d1b06 	br	811118dc <__reset+0xfb0f18dc>
81112470:	18c03fcc 	andi	r3,r3,255
81112474:	1805341e 	bne	r3,zero,81113948 <___vfprintf_internal_r+0x21f8>
81112478:	9080080c 	andi	r2,r18,32
8111247c:	1002cd26 	beq	r2,zero,81112fb4 <___vfprintf_internal_r+0x1864>
81112480:	d9402d17 	ldw	r5,180(sp)
81112484:	d9002f17 	ldw	r4,188(sp)
81112488:	28800017 	ldw	r2,0(r5)
8111248c:	2007d7fa 	srai	r3,r4,31
81112490:	29400104 	addi	r5,r5,4
81112494:	d9402d15 	stw	r5,180(sp)
81112498:	11000015 	stw	r4,0(r2)
8111249c:	10c00115 	stw	r3,4(r2)
811124a0:	003ce506 	br	81111838 <__reset+0xfb0f1838>
811124a4:	d8c02d17 	ldw	r3,180(sp)
811124a8:	d9002d17 	ldw	r4,180(sp)
811124ac:	d8002785 	stb	zero,158(sp)
811124b0:	18800017 	ldw	r2,0(r3)
811124b4:	21000104 	addi	r4,r4,4
811124b8:	00c00044 	movi	r3,1
811124bc:	d8c02a15 	stw	r3,168(sp)
811124c0:	d8801405 	stb	r2,80(sp)
811124c4:	d9002d15 	stw	r4,180(sp)
811124c8:	d8c02e15 	stw	r3,184(sp)
811124cc:	d8002915 	stw	zero,164(sp)
811124d0:	d8003215 	stw	zero,200(sp)
811124d4:	dc001404 	addi	r16,sp,80
811124d8:	0039883a 	mov	fp,zero
811124dc:	003e7206 	br	81111ea8 <__reset+0xfb0f1ea8>
811124e0:	01204534 	movhi	r4,33044
811124e4:	212adc04 	addi	r4,r4,-21648
811124e8:	0039883a 	mov	fp,zero
811124ec:	d9003915 	stw	r4,228(sp)
811124f0:	04401e04 	movi	r17,120
811124f4:	003f8206 	br	81112300 <__reset+0xfb0f2300>
811124f8:	18c03fcc 	andi	r3,r3,255
811124fc:	1805061e 	bne	r3,zero,81113918 <___vfprintf_internal_r+0x21c8>
81112500:	883d9126 	beq	r17,zero,81111b48 <__reset+0xfb0f1b48>
81112504:	00c00044 	movi	r3,1
81112508:	d8c02a15 	stw	r3,168(sp)
8111250c:	dc401405 	stb	r17,80(sp)
81112510:	d8002785 	stb	zero,158(sp)
81112514:	003fec06 	br	811124c8 <__reset+0xfb0f24c8>
81112518:	01604534 	movhi	r5,33044
8111251c:	296adc04 	addi	r5,r5,-21648
81112520:	d9403915 	stw	r5,228(sp)
81112524:	d8c02d15 	stw	r3,180(sp)
81112528:	1025883a 	mov	r18,r2
8111252c:	04401e04 	movi	r17,120
81112530:	9d84b03a 	or	r2,r19,r22
81112534:	1000fc1e 	bne	r2,zero,81112928 <___vfprintf_internal_r+0x11d8>
81112538:	0039883a 	mov	fp,zero
8111253c:	00800084 	movi	r2,2
81112540:	10803fcc 	andi	r2,r2,255
81112544:	00c00044 	movi	r3,1
81112548:	10c20f26 	beq	r2,r3,81112d88 <___vfprintf_internal_r+0x1638>
8111254c:	00c00084 	movi	r3,2
81112550:	10fd6326 	beq	r2,r3,81111ae0 <__reset+0xfb0f1ae0>
81112554:	003e2d06 	br	81111e0c <__reset+0xfb0f1e0c>
81112558:	d8c02017 	ldw	r3,128(sp)
8111255c:	003e9306 	br	81111fac <__reset+0xfb0f1fac>
81112560:	00801944 	movi	r2,101
81112564:	14407e0e 	bge	r2,r17,81112760 <___vfprintf_internal_r+0x1010>
81112568:	d9003617 	ldw	r4,216(sp)
8111256c:	d9403817 	ldw	r5,224(sp)
81112570:	000d883a 	mov	r6,zero
81112574:	000f883a 	mov	r7,zero
81112578:	d8c03c15 	stw	r3,240(sp)
8111257c:	da003d15 	stw	r8,244(sp)
81112580:	11223000 	call	81122300 <__eqdf2>
81112584:	d8c03c17 	ldw	r3,240(sp)
81112588:	da003d17 	ldw	r8,244(sp)
8111258c:	1000f71e 	bne	r2,zero,8111296c <___vfprintf_internal_r+0x121c>
81112590:	d8801f17 	ldw	r2,124(sp)
81112594:	01204534 	movhi	r4,33044
81112598:	212ae304 	addi	r4,r4,-21620
8111259c:	18c00044 	addi	r3,r3,1
811125a0:	10800044 	addi	r2,r2,1
811125a4:	41000015 	stw	r4,0(r8)
811125a8:	01000044 	movi	r4,1
811125ac:	41000115 	stw	r4,4(r8)
811125b0:	d8c02015 	stw	r3,128(sp)
811125b4:	d8801f15 	stw	r2,124(sp)
811125b8:	010001c4 	movi	r4,7
811125bc:	2082b816 	blt	r4,r2,811130a0 <___vfprintf_internal_r+0x1950>
811125c0:	42000204 	addi	r8,r8,8
811125c4:	d8802617 	ldw	r2,152(sp)
811125c8:	d9403317 	ldw	r5,204(sp)
811125cc:	11400216 	blt	r2,r5,811125d8 <___vfprintf_internal_r+0xe88>
811125d0:	9080004c 	andi	r2,r18,1
811125d4:	103ed526 	beq	r2,zero,8111212c <__reset+0xfb0f212c>
811125d8:	d8803717 	ldw	r2,220(sp)
811125dc:	d9003417 	ldw	r4,208(sp)
811125e0:	d9403717 	ldw	r5,220(sp)
811125e4:	1887883a 	add	r3,r3,r2
811125e8:	d8801f17 	ldw	r2,124(sp)
811125ec:	41000015 	stw	r4,0(r8)
811125f0:	41400115 	stw	r5,4(r8)
811125f4:	10800044 	addi	r2,r2,1
811125f8:	d8c02015 	stw	r3,128(sp)
811125fc:	d8801f15 	stw	r2,124(sp)
81112600:	010001c4 	movi	r4,7
81112604:	20832916 	blt	r4,r2,811132ac <___vfprintf_internal_r+0x1b5c>
81112608:	42000204 	addi	r8,r8,8
8111260c:	d8803317 	ldw	r2,204(sp)
81112610:	143fffc4 	addi	r16,r2,-1
81112614:	043ec50e 	bge	zero,r16,8111212c <__reset+0xfb0f212c>
81112618:	04400404 	movi	r17,16
8111261c:	d8801f17 	ldw	r2,124(sp)
81112620:	8c00880e 	bge	r17,r16,81112844 <___vfprintf_internal_r+0x10f4>
81112624:	01604534 	movhi	r5,33044
81112628:	296aeb84 	addi	r5,r5,-21586
8111262c:	d9402b15 	stw	r5,172(sp)
81112630:	058001c4 	movi	r22,7
81112634:	dcc02c17 	ldw	r19,176(sp)
81112638:	00000306 	br	81112648 <___vfprintf_internal_r+0xef8>
8111263c:	42000204 	addi	r8,r8,8
81112640:	843ffc04 	addi	r16,r16,-16
81112644:	8c00820e 	bge	r17,r16,81112850 <___vfprintf_internal_r+0x1100>
81112648:	18c00404 	addi	r3,r3,16
8111264c:	10800044 	addi	r2,r2,1
81112650:	45000015 	stw	r20,0(r8)
81112654:	44400115 	stw	r17,4(r8)
81112658:	d8c02015 	stw	r3,128(sp)
8111265c:	d8801f15 	stw	r2,124(sp)
81112660:	b0bff60e 	bge	r22,r2,8111263c <__reset+0xfb0f263c>
81112664:	d9801e04 	addi	r6,sp,120
81112668:	b80b883a 	mov	r5,r23
8111266c:	9809883a 	mov	r4,r19
81112670:	111d9580 	call	8111d958 <__sprint_r>
81112674:	103d3a1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112678:	d8c02017 	ldw	r3,128(sp)
8111267c:	d8801f17 	ldw	r2,124(sp)
81112680:	da000404 	addi	r8,sp,16
81112684:	003fee06 	br	81112640 <__reset+0xfb0f2640>
81112688:	d9403117 	ldw	r5,196(sp)
8111268c:	d8802a17 	ldw	r2,168(sp)
81112690:	28adc83a 	sub	r22,r5,r2
81112694:	05be630e 	bge	zero,r22,81112024 <__reset+0xfb0f2024>
81112698:	07000404 	movi	fp,16
8111269c:	d8801f17 	ldw	r2,124(sp)
811126a0:	e5838f0e 	bge	fp,r22,811134e0 <___vfprintf_internal_r+0x1d90>
811126a4:	01604534 	movhi	r5,33044
811126a8:	296aeb84 	addi	r5,r5,-21586
811126ac:	dc403015 	stw	r17,192(sp)
811126b0:	d9402b15 	stw	r5,172(sp)
811126b4:	b023883a 	mov	r17,r22
811126b8:	04c001c4 	movi	r19,7
811126bc:	a82d883a 	mov	r22,r21
811126c0:	902b883a 	mov	r21,r18
811126c4:	8025883a 	mov	r18,r16
811126c8:	dc002c17 	ldw	r16,176(sp)
811126cc:	00000306 	br	811126dc <___vfprintf_internal_r+0xf8c>
811126d0:	8c7ffc04 	addi	r17,r17,-16
811126d4:	42000204 	addi	r8,r8,8
811126d8:	e440110e 	bge	fp,r17,81112720 <___vfprintf_internal_r+0xfd0>
811126dc:	18c00404 	addi	r3,r3,16
811126e0:	10800044 	addi	r2,r2,1
811126e4:	45000015 	stw	r20,0(r8)
811126e8:	47000115 	stw	fp,4(r8)
811126ec:	d8c02015 	stw	r3,128(sp)
811126f0:	d8801f15 	stw	r2,124(sp)
811126f4:	98bff60e 	bge	r19,r2,811126d0 <__reset+0xfb0f26d0>
811126f8:	d9801e04 	addi	r6,sp,120
811126fc:	b80b883a 	mov	r5,r23
81112700:	8009883a 	mov	r4,r16
81112704:	111d9580 	call	8111d958 <__sprint_r>
81112708:	103d151e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
8111270c:	8c7ffc04 	addi	r17,r17,-16
81112710:	d8c02017 	ldw	r3,128(sp)
81112714:	d8801f17 	ldw	r2,124(sp)
81112718:	da000404 	addi	r8,sp,16
8111271c:	e47fef16 	blt	fp,r17,811126dc <__reset+0xfb0f26dc>
81112720:	9021883a 	mov	r16,r18
81112724:	a825883a 	mov	r18,r21
81112728:	b02b883a 	mov	r21,r22
8111272c:	882d883a 	mov	r22,r17
81112730:	dc403017 	ldw	r17,192(sp)
81112734:	d9002b17 	ldw	r4,172(sp)
81112738:	1d87883a 	add	r3,r3,r22
8111273c:	10800044 	addi	r2,r2,1
81112740:	41000015 	stw	r4,0(r8)
81112744:	45800115 	stw	r22,4(r8)
81112748:	d8c02015 	stw	r3,128(sp)
8111274c:	d8801f15 	stw	r2,124(sp)
81112750:	010001c4 	movi	r4,7
81112754:	20818e16 	blt	r4,r2,81112d90 <___vfprintf_internal_r+0x1640>
81112758:	42000204 	addi	r8,r8,8
8111275c:	003e3106 	br	81112024 <__reset+0xfb0f2024>
81112760:	d9403317 	ldw	r5,204(sp)
81112764:	00800044 	movi	r2,1
81112768:	18c00044 	addi	r3,r3,1
8111276c:	1141530e 	bge	r2,r5,81112cbc <___vfprintf_internal_r+0x156c>
81112770:	dc401f17 	ldw	r17,124(sp)
81112774:	00800044 	movi	r2,1
81112778:	40800115 	stw	r2,4(r8)
8111277c:	8c400044 	addi	r17,r17,1
81112780:	44000015 	stw	r16,0(r8)
81112784:	d8c02015 	stw	r3,128(sp)
81112788:	dc401f15 	stw	r17,124(sp)
8111278c:	008001c4 	movi	r2,7
81112790:	14416b16 	blt	r2,r17,81112d40 <___vfprintf_internal_r+0x15f0>
81112794:	42000204 	addi	r8,r8,8
81112798:	d8803717 	ldw	r2,220(sp)
8111279c:	d9003417 	ldw	r4,208(sp)
811127a0:	8c400044 	addi	r17,r17,1
811127a4:	10c7883a 	add	r3,r2,r3
811127a8:	40800115 	stw	r2,4(r8)
811127ac:	41000015 	stw	r4,0(r8)
811127b0:	d8c02015 	stw	r3,128(sp)
811127b4:	dc401f15 	stw	r17,124(sp)
811127b8:	008001c4 	movi	r2,7
811127bc:	14416916 	blt	r2,r17,81112d64 <___vfprintf_internal_r+0x1614>
811127c0:	45800204 	addi	r22,r8,8
811127c4:	d9003617 	ldw	r4,216(sp)
811127c8:	d9403817 	ldw	r5,224(sp)
811127cc:	000d883a 	mov	r6,zero
811127d0:	000f883a 	mov	r7,zero
811127d4:	d8c03c15 	stw	r3,240(sp)
811127d8:	11223000 	call	81122300 <__eqdf2>
811127dc:	d8c03c17 	ldw	r3,240(sp)
811127e0:	1000bc26 	beq	r2,zero,81112ad4 <___vfprintf_internal_r+0x1384>
811127e4:	d9403317 	ldw	r5,204(sp)
811127e8:	84000044 	addi	r16,r16,1
811127ec:	8c400044 	addi	r17,r17,1
811127f0:	28bfffc4 	addi	r2,r5,-1
811127f4:	1887883a 	add	r3,r3,r2
811127f8:	b0800115 	stw	r2,4(r22)
811127fc:	b4000015 	stw	r16,0(r22)
81112800:	d8c02015 	stw	r3,128(sp)
81112804:	dc401f15 	stw	r17,124(sp)
81112808:	008001c4 	movi	r2,7
8111280c:	14414316 	blt	r2,r17,81112d1c <___vfprintf_internal_r+0x15cc>
81112810:	b5800204 	addi	r22,r22,8
81112814:	d9003a17 	ldw	r4,232(sp)
81112818:	df0022c4 	addi	fp,sp,139
8111281c:	8c400044 	addi	r17,r17,1
81112820:	20c7883a 	add	r3,r4,r3
81112824:	b7000015 	stw	fp,0(r22)
81112828:	b1000115 	stw	r4,4(r22)
8111282c:	d8c02015 	stw	r3,128(sp)
81112830:	dc401f15 	stw	r17,124(sp)
81112834:	008001c4 	movi	r2,7
81112838:	14400e16 	blt	r2,r17,81112874 <___vfprintf_internal_r+0x1124>
8111283c:	b2000204 	addi	r8,r22,8
81112840:	003e3a06 	br	8111212c <__reset+0xfb0f212c>
81112844:	01204534 	movhi	r4,33044
81112848:	212aeb84 	addi	r4,r4,-21586
8111284c:	d9002b15 	stw	r4,172(sp)
81112850:	d9002b17 	ldw	r4,172(sp)
81112854:	1c07883a 	add	r3,r3,r16
81112858:	44000115 	stw	r16,4(r8)
8111285c:	41000015 	stw	r4,0(r8)
81112860:	10800044 	addi	r2,r2,1
81112864:	d8c02015 	stw	r3,128(sp)
81112868:	d8801f15 	stw	r2,124(sp)
8111286c:	010001c4 	movi	r4,7
81112870:	20be2d0e 	bge	r4,r2,81112128 <__reset+0xfb0f2128>
81112874:	d9002c17 	ldw	r4,176(sp)
81112878:	d9801e04 	addi	r6,sp,120
8111287c:	b80b883a 	mov	r5,r23
81112880:	111d9580 	call	8111d958 <__sprint_r>
81112884:	103cb61e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112888:	d8c02017 	ldw	r3,128(sp)
8111288c:	da000404 	addi	r8,sp,16
81112890:	003e2606 	br	8111212c <__reset+0xfb0f212c>
81112894:	d9002c17 	ldw	r4,176(sp)
81112898:	d9801e04 	addi	r6,sp,120
8111289c:	b80b883a 	mov	r5,r23
811128a0:	111d9580 	call	8111d958 <__sprint_r>
811128a4:	103e5d26 	beq	r2,zero,8111221c <__reset+0xfb0f221c>
811128a8:	003cad06 	br	81111b60 <__reset+0xfb0f1b60>
811128ac:	d9002c17 	ldw	r4,176(sp)
811128b0:	d9801e04 	addi	r6,sp,120
811128b4:	b80b883a 	mov	r5,r23
811128b8:	111d9580 	call	8111d958 <__sprint_r>
811128bc:	103ca81e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811128c0:	d8c02017 	ldw	r3,128(sp)
811128c4:	da000404 	addi	r8,sp,16
811128c8:	003e0b06 	br	811120f8 <__reset+0xfb0f20f8>
811128cc:	d9002c17 	ldw	r4,176(sp)
811128d0:	d9801e04 	addi	r6,sp,120
811128d4:	b80b883a 	mov	r5,r23
811128d8:	111d9580 	call	8111d958 <__sprint_r>
811128dc:	103ca01e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811128e0:	d8c02017 	ldw	r3,128(sp)
811128e4:	da000404 	addi	r8,sp,16
811128e8:	003dbd06 	br	81111fe0 <__reset+0xfb0f1fe0>
811128ec:	d9002c17 	ldw	r4,176(sp)
811128f0:	d9801e04 	addi	r6,sp,120
811128f4:	b80b883a 	mov	r5,r23
811128f8:	111d9580 	call	8111d958 <__sprint_r>
811128fc:	103c981e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112900:	d8c02017 	ldw	r3,128(sp)
81112904:	da000404 	addi	r8,sp,16
81112908:	003dc306 	br	81112018 <__reset+0xfb0f2018>
8111290c:	d8802917 	ldw	r2,164(sp)
81112910:	d8002785 	stb	zero,158(sp)
81112914:	103f0616 	blt	r2,zero,81112530 <__reset+0xfb0f2530>
81112918:	00ffdfc4 	movi	r3,-129
8111291c:	9d84b03a 	or	r2,r19,r22
81112920:	90e4703a 	and	r18,r18,r3
81112924:	103c6b26 	beq	r2,zero,81111ad4 <__reset+0xfb0f1ad4>
81112928:	0039883a 	mov	fp,zero
8111292c:	003e7406 	br	81112300 <__reset+0xfb0f2300>
81112930:	9080040c 	andi	r2,r18,16
81112934:	1001b326 	beq	r2,zero,81113004 <___vfprintf_internal_r+0x18b4>
81112938:	d9002d17 	ldw	r4,180(sp)
8111293c:	d9402917 	ldw	r5,164(sp)
81112940:	d8002785 	stb	zero,158(sp)
81112944:	20800104 	addi	r2,r4,4
81112948:	24c00017 	ldw	r19,0(r4)
8111294c:	002d883a 	mov	r22,zero
81112950:	2801b516 	blt	r5,zero,81113028 <___vfprintf_internal_r+0x18d8>
81112954:	00ffdfc4 	movi	r3,-129
81112958:	d8802d15 	stw	r2,180(sp)
8111295c:	90e4703a 	and	r18,r18,r3
81112960:	983d2726 	beq	r19,zero,81111e00 <__reset+0xfb0f1e00>
81112964:	0039883a 	mov	fp,zero
81112968:	003d2a06 	br	81111e14 <__reset+0xfb0f1e14>
8111296c:	dc402617 	ldw	r17,152(sp)
81112970:	0441d30e 	bge	zero,r17,811130c0 <___vfprintf_internal_r+0x1970>
81112974:	dc403217 	ldw	r17,200(sp)
81112978:	d8803317 	ldw	r2,204(sp)
8111297c:	1440010e 	bge	r2,r17,81112984 <___vfprintf_internal_r+0x1234>
81112980:	1023883a 	mov	r17,r2
81112984:	04400a0e 	bge	zero,r17,811129b0 <___vfprintf_internal_r+0x1260>
81112988:	d8801f17 	ldw	r2,124(sp)
8111298c:	1c47883a 	add	r3,r3,r17
81112990:	44000015 	stw	r16,0(r8)
81112994:	10800044 	addi	r2,r2,1
81112998:	44400115 	stw	r17,4(r8)
8111299c:	d8c02015 	stw	r3,128(sp)
811129a0:	d8801f15 	stw	r2,124(sp)
811129a4:	010001c4 	movi	r4,7
811129a8:	20826516 	blt	r4,r2,81113340 <___vfprintf_internal_r+0x1bf0>
811129ac:	42000204 	addi	r8,r8,8
811129b0:	88026116 	blt	r17,zero,81113338 <___vfprintf_internal_r+0x1be8>
811129b4:	d9003217 	ldw	r4,200(sp)
811129b8:	2463c83a 	sub	r17,r4,r17
811129bc:	04407b0e 	bge	zero,r17,81112bac <___vfprintf_internal_r+0x145c>
811129c0:	05800404 	movi	r22,16
811129c4:	d8801f17 	ldw	r2,124(sp)
811129c8:	b4419d0e 	bge	r22,r17,81113040 <___vfprintf_internal_r+0x18f0>
811129cc:	01204534 	movhi	r4,33044
811129d0:	212aeb84 	addi	r4,r4,-21586
811129d4:	d9002b15 	stw	r4,172(sp)
811129d8:	070001c4 	movi	fp,7
811129dc:	dcc02c17 	ldw	r19,176(sp)
811129e0:	00000306 	br	811129f0 <___vfprintf_internal_r+0x12a0>
811129e4:	42000204 	addi	r8,r8,8
811129e8:	8c7ffc04 	addi	r17,r17,-16
811129ec:	b441970e 	bge	r22,r17,8111304c <___vfprintf_internal_r+0x18fc>
811129f0:	18c00404 	addi	r3,r3,16
811129f4:	10800044 	addi	r2,r2,1
811129f8:	45000015 	stw	r20,0(r8)
811129fc:	45800115 	stw	r22,4(r8)
81112a00:	d8c02015 	stw	r3,128(sp)
81112a04:	d8801f15 	stw	r2,124(sp)
81112a08:	e0bff60e 	bge	fp,r2,811129e4 <__reset+0xfb0f29e4>
81112a0c:	d9801e04 	addi	r6,sp,120
81112a10:	b80b883a 	mov	r5,r23
81112a14:	9809883a 	mov	r4,r19
81112a18:	111d9580 	call	8111d958 <__sprint_r>
81112a1c:	103c501e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112a20:	d8c02017 	ldw	r3,128(sp)
81112a24:	d8801f17 	ldw	r2,124(sp)
81112a28:	da000404 	addi	r8,sp,16
81112a2c:	003fee06 	br	811129e8 <__reset+0xfb0f29e8>
81112a30:	d9002c17 	ldw	r4,176(sp)
81112a34:	d9801e04 	addi	r6,sp,120
81112a38:	b80b883a 	mov	r5,r23
81112a3c:	111d9580 	call	8111d958 <__sprint_r>
81112a40:	103c471e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112a44:	d8c02017 	ldw	r3,128(sp)
81112a48:	df002787 	ldb	fp,158(sp)
81112a4c:	da000404 	addi	r8,sp,16
81112a50:	003d5606 	br	81111fac <__reset+0xfb0f1fac>
81112a54:	9080040c 	andi	r2,r18,16
81112a58:	10016126 	beq	r2,zero,81112fe0 <___vfprintf_internal_r+0x1890>
81112a5c:	d8802d17 	ldw	r2,180(sp)
81112a60:	14c00017 	ldw	r19,0(r2)
81112a64:	10800104 	addi	r2,r2,4
81112a68:	d8802d15 	stw	r2,180(sp)
81112a6c:	982dd7fa 	srai	r22,r19,31
81112a70:	b005883a 	mov	r2,r22
81112a74:	003c8206 	br	81111c80 <__reset+0xfb0f1c80>
81112a78:	9080040c 	andi	r2,r18,16
81112a7c:	10003526 	beq	r2,zero,81112b54 <___vfprintf_internal_r+0x1404>
81112a80:	d9402d17 	ldw	r5,180(sp)
81112a84:	d8c02917 	ldw	r3,164(sp)
81112a88:	d8002785 	stb	zero,158(sp)
81112a8c:	28800104 	addi	r2,r5,4
81112a90:	2cc00017 	ldw	r19,0(r5)
81112a94:	002d883a 	mov	r22,zero
81112a98:	18003716 	blt	r3,zero,81112b78 <___vfprintf_internal_r+0x1428>
81112a9c:	00ffdfc4 	movi	r3,-129
81112aa0:	d8802d15 	stw	r2,180(sp)
81112aa4:	90e4703a 	and	r18,r18,r3
81112aa8:	0039883a 	mov	fp,zero
81112aac:	983df326 	beq	r19,zero,8111227c <__reset+0xfb0f227c>
81112ab0:	00800244 	movi	r2,9
81112ab4:	14fc7b36 	bltu	r2,r19,81111ca4 <__reset+0xfb0f1ca4>
81112ab8:	d8c02817 	ldw	r3,160(sp)
81112abc:	dc001dc4 	addi	r16,sp,119
81112ac0:	9cc00c04 	addi	r19,r19,48
81112ac4:	1c07c83a 	sub	r3,r3,r16
81112ac8:	dcc01dc5 	stb	r19,119(sp)
81112acc:	d8c02e15 	stw	r3,184(sp)
81112ad0:	003ce806 	br	81111e74 <__reset+0xfb0f1e74>
81112ad4:	d8803317 	ldw	r2,204(sp)
81112ad8:	143fffc4 	addi	r16,r2,-1
81112adc:	043f4d0e 	bge	zero,r16,81112814 <__reset+0xfb0f2814>
81112ae0:	07000404 	movi	fp,16
81112ae4:	e400810e 	bge	fp,r16,81112cec <___vfprintf_internal_r+0x159c>
81112ae8:	01604534 	movhi	r5,33044
81112aec:	296aeb84 	addi	r5,r5,-21586
81112af0:	d9402b15 	stw	r5,172(sp)
81112af4:	01c001c4 	movi	r7,7
81112af8:	dcc02c17 	ldw	r19,176(sp)
81112afc:	00000306 	br	81112b0c <___vfprintf_internal_r+0x13bc>
81112b00:	b5800204 	addi	r22,r22,8
81112b04:	843ffc04 	addi	r16,r16,-16
81112b08:	e4007b0e 	bge	fp,r16,81112cf8 <___vfprintf_internal_r+0x15a8>
81112b0c:	18c00404 	addi	r3,r3,16
81112b10:	8c400044 	addi	r17,r17,1
81112b14:	b5000015 	stw	r20,0(r22)
81112b18:	b7000115 	stw	fp,4(r22)
81112b1c:	d8c02015 	stw	r3,128(sp)
81112b20:	dc401f15 	stw	r17,124(sp)
81112b24:	3c7ff60e 	bge	r7,r17,81112b00 <__reset+0xfb0f2b00>
81112b28:	d9801e04 	addi	r6,sp,120
81112b2c:	b80b883a 	mov	r5,r23
81112b30:	9809883a 	mov	r4,r19
81112b34:	d9c03c15 	stw	r7,240(sp)
81112b38:	111d9580 	call	8111d958 <__sprint_r>
81112b3c:	d9c03c17 	ldw	r7,240(sp)
81112b40:	103c071e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112b44:	d8c02017 	ldw	r3,128(sp)
81112b48:	dc401f17 	ldw	r17,124(sp)
81112b4c:	dd800404 	addi	r22,sp,16
81112b50:	003fec06 	br	81112b04 <__reset+0xfb0f2b04>
81112b54:	9080100c 	andi	r2,r18,64
81112b58:	d8002785 	stb	zero,158(sp)
81112b5c:	10010e26 	beq	r2,zero,81112f98 <___vfprintf_internal_r+0x1848>
81112b60:	d9002d17 	ldw	r4,180(sp)
81112b64:	d9402917 	ldw	r5,164(sp)
81112b68:	002d883a 	mov	r22,zero
81112b6c:	20800104 	addi	r2,r4,4
81112b70:	24c0000b 	ldhu	r19,0(r4)
81112b74:	283fc90e 	bge	r5,zero,81112a9c <__reset+0xfb0f2a9c>
81112b78:	d8802d15 	stw	r2,180(sp)
81112b7c:	0039883a 	mov	fp,zero
81112b80:	9d84b03a 	or	r2,r19,r22
81112b84:	103c461e 	bne	r2,zero,81111ca0 <__reset+0xfb0f1ca0>
81112b88:	00800044 	movi	r2,1
81112b8c:	003e6c06 	br	81112540 <__reset+0xfb0f2540>
81112b90:	d9002c17 	ldw	r4,176(sp)
81112b94:	d9801e04 	addi	r6,sp,120
81112b98:	b80b883a 	mov	r5,r23
81112b9c:	111d9580 	call	8111d958 <__sprint_r>
81112ba0:	103bef1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112ba4:	d8c02017 	ldw	r3,128(sp)
81112ba8:	da000404 	addi	r8,sp,16
81112bac:	d9003217 	ldw	r4,200(sp)
81112bb0:	d8802617 	ldw	r2,152(sp)
81112bb4:	d9403317 	ldw	r5,204(sp)
81112bb8:	8123883a 	add	r17,r16,r4
81112bbc:	11400216 	blt	r2,r5,81112bc8 <___vfprintf_internal_r+0x1478>
81112bc0:	9100004c 	andi	r4,r18,1
81112bc4:	20000d26 	beq	r4,zero,81112bfc <___vfprintf_internal_r+0x14ac>
81112bc8:	d9003717 	ldw	r4,220(sp)
81112bcc:	d9403417 	ldw	r5,208(sp)
81112bd0:	1907883a 	add	r3,r3,r4
81112bd4:	d9001f17 	ldw	r4,124(sp)
81112bd8:	41400015 	stw	r5,0(r8)
81112bdc:	d9403717 	ldw	r5,220(sp)
81112be0:	21000044 	addi	r4,r4,1
81112be4:	d8c02015 	stw	r3,128(sp)
81112be8:	41400115 	stw	r5,4(r8)
81112bec:	d9001f15 	stw	r4,124(sp)
81112bf0:	014001c4 	movi	r5,7
81112bf4:	2901e816 	blt	r5,r4,81113398 <___vfprintf_internal_r+0x1c48>
81112bf8:	42000204 	addi	r8,r8,8
81112bfc:	d9003317 	ldw	r4,204(sp)
81112c00:	8121883a 	add	r16,r16,r4
81112c04:	2085c83a 	sub	r2,r4,r2
81112c08:	8461c83a 	sub	r16,r16,r17
81112c0c:	1400010e 	bge	r2,r16,81112c14 <___vfprintf_internal_r+0x14c4>
81112c10:	1021883a 	mov	r16,r2
81112c14:	04000a0e 	bge	zero,r16,81112c40 <___vfprintf_internal_r+0x14f0>
81112c18:	d9001f17 	ldw	r4,124(sp)
81112c1c:	1c07883a 	add	r3,r3,r16
81112c20:	44400015 	stw	r17,0(r8)
81112c24:	21000044 	addi	r4,r4,1
81112c28:	44000115 	stw	r16,4(r8)
81112c2c:	d8c02015 	stw	r3,128(sp)
81112c30:	d9001f15 	stw	r4,124(sp)
81112c34:	014001c4 	movi	r5,7
81112c38:	2901fb16 	blt	r5,r4,81113428 <___vfprintf_internal_r+0x1cd8>
81112c3c:	42000204 	addi	r8,r8,8
81112c40:	8001f716 	blt	r16,zero,81113420 <___vfprintf_internal_r+0x1cd0>
81112c44:	1421c83a 	sub	r16,r2,r16
81112c48:	043d380e 	bge	zero,r16,8111212c <__reset+0xfb0f212c>
81112c4c:	04400404 	movi	r17,16
81112c50:	d8801f17 	ldw	r2,124(sp)
81112c54:	8c3efb0e 	bge	r17,r16,81112844 <__reset+0xfb0f2844>
81112c58:	01604534 	movhi	r5,33044
81112c5c:	296aeb84 	addi	r5,r5,-21586
81112c60:	d9402b15 	stw	r5,172(sp)
81112c64:	058001c4 	movi	r22,7
81112c68:	dcc02c17 	ldw	r19,176(sp)
81112c6c:	00000306 	br	81112c7c <___vfprintf_internal_r+0x152c>
81112c70:	42000204 	addi	r8,r8,8
81112c74:	843ffc04 	addi	r16,r16,-16
81112c78:	8c3ef50e 	bge	r17,r16,81112850 <__reset+0xfb0f2850>
81112c7c:	18c00404 	addi	r3,r3,16
81112c80:	10800044 	addi	r2,r2,1
81112c84:	45000015 	stw	r20,0(r8)
81112c88:	44400115 	stw	r17,4(r8)
81112c8c:	d8c02015 	stw	r3,128(sp)
81112c90:	d8801f15 	stw	r2,124(sp)
81112c94:	b0bff60e 	bge	r22,r2,81112c70 <__reset+0xfb0f2c70>
81112c98:	d9801e04 	addi	r6,sp,120
81112c9c:	b80b883a 	mov	r5,r23
81112ca0:	9809883a 	mov	r4,r19
81112ca4:	111d9580 	call	8111d958 <__sprint_r>
81112ca8:	103bad1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112cac:	d8c02017 	ldw	r3,128(sp)
81112cb0:	d8801f17 	ldw	r2,124(sp)
81112cb4:	da000404 	addi	r8,sp,16
81112cb8:	003fee06 	br	81112c74 <__reset+0xfb0f2c74>
81112cbc:	9088703a 	and	r4,r18,r2
81112cc0:	203eab1e 	bne	r4,zero,81112770 <__reset+0xfb0f2770>
81112cc4:	dc401f17 	ldw	r17,124(sp)
81112cc8:	40800115 	stw	r2,4(r8)
81112ccc:	44000015 	stw	r16,0(r8)
81112cd0:	8c400044 	addi	r17,r17,1
81112cd4:	d8c02015 	stw	r3,128(sp)
81112cd8:	dc401f15 	stw	r17,124(sp)
81112cdc:	008001c4 	movi	r2,7
81112ce0:	14400e16 	blt	r2,r17,81112d1c <___vfprintf_internal_r+0x15cc>
81112ce4:	45800204 	addi	r22,r8,8
81112ce8:	003eca06 	br	81112814 <__reset+0xfb0f2814>
81112cec:	01204534 	movhi	r4,33044
81112cf0:	212aeb84 	addi	r4,r4,-21586
81112cf4:	d9002b15 	stw	r4,172(sp)
81112cf8:	d8802b17 	ldw	r2,172(sp)
81112cfc:	1c07883a 	add	r3,r3,r16
81112d00:	8c400044 	addi	r17,r17,1
81112d04:	b0800015 	stw	r2,0(r22)
81112d08:	b4000115 	stw	r16,4(r22)
81112d0c:	d8c02015 	stw	r3,128(sp)
81112d10:	dc401f15 	stw	r17,124(sp)
81112d14:	008001c4 	movi	r2,7
81112d18:	147ebd0e 	bge	r2,r17,81112810 <__reset+0xfb0f2810>
81112d1c:	d9002c17 	ldw	r4,176(sp)
81112d20:	d9801e04 	addi	r6,sp,120
81112d24:	b80b883a 	mov	r5,r23
81112d28:	111d9580 	call	8111d958 <__sprint_r>
81112d2c:	103b8c1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112d30:	d8c02017 	ldw	r3,128(sp)
81112d34:	dc401f17 	ldw	r17,124(sp)
81112d38:	dd800404 	addi	r22,sp,16
81112d3c:	003eb506 	br	81112814 <__reset+0xfb0f2814>
81112d40:	d9002c17 	ldw	r4,176(sp)
81112d44:	d9801e04 	addi	r6,sp,120
81112d48:	b80b883a 	mov	r5,r23
81112d4c:	111d9580 	call	8111d958 <__sprint_r>
81112d50:	103b831e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112d54:	d8c02017 	ldw	r3,128(sp)
81112d58:	dc401f17 	ldw	r17,124(sp)
81112d5c:	da000404 	addi	r8,sp,16
81112d60:	003e8d06 	br	81112798 <__reset+0xfb0f2798>
81112d64:	d9002c17 	ldw	r4,176(sp)
81112d68:	d9801e04 	addi	r6,sp,120
81112d6c:	b80b883a 	mov	r5,r23
81112d70:	111d9580 	call	8111d958 <__sprint_r>
81112d74:	103b7a1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112d78:	d8c02017 	ldw	r3,128(sp)
81112d7c:	dc401f17 	ldw	r17,124(sp)
81112d80:	dd800404 	addi	r22,sp,16
81112d84:	003e8f06 	br	811127c4 <__reset+0xfb0f27c4>
81112d88:	0027883a 	mov	r19,zero
81112d8c:	003f4a06 	br	81112ab8 <__reset+0xfb0f2ab8>
81112d90:	d9002c17 	ldw	r4,176(sp)
81112d94:	d9801e04 	addi	r6,sp,120
81112d98:	b80b883a 	mov	r5,r23
81112d9c:	111d9580 	call	8111d958 <__sprint_r>
81112da0:	103b6f1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81112da4:	d8c02017 	ldw	r3,128(sp)
81112da8:	da000404 	addi	r8,sp,16
81112dac:	003c9d06 	br	81112024 <__reset+0xfb0f2024>
81112db0:	04e7c83a 	sub	r19,zero,r19
81112db4:	9804c03a 	cmpne	r2,r19,zero
81112db8:	05adc83a 	sub	r22,zero,r22
81112dbc:	b0adc83a 	sub	r22,r22,r2
81112dc0:	d8802917 	ldw	r2,164(sp)
81112dc4:	07000b44 	movi	fp,45
81112dc8:	df002785 	stb	fp,158(sp)
81112dcc:	10017b16 	blt	r2,zero,811133bc <___vfprintf_internal_r+0x1c6c>
81112dd0:	00bfdfc4 	movi	r2,-129
81112dd4:	90a4703a 	and	r18,r18,r2
81112dd8:	003bb106 	br	81111ca0 <__reset+0xfb0f1ca0>
81112ddc:	d9003617 	ldw	r4,216(sp)
81112de0:	d9403817 	ldw	r5,224(sp)
81112de4:	da003d15 	stw	r8,244(sp)
81112de8:	1119fbc0 	call	81119fbc <__fpclassifyd>
81112dec:	da003d17 	ldw	r8,244(sp)
81112df0:	1000f026 	beq	r2,zero,811131b4 <___vfprintf_internal_r+0x1a64>
81112df4:	d9002917 	ldw	r4,164(sp)
81112df8:	05bff7c4 	movi	r22,-33
81112dfc:	00bfffc4 	movi	r2,-1
81112e00:	8dac703a 	and	r22,r17,r22
81112e04:	20820026 	beq	r4,r2,81113608 <___vfprintf_internal_r+0x1eb8>
81112e08:	008011c4 	movi	r2,71
81112e0c:	b081f726 	beq	r22,r2,811135ec <___vfprintf_internal_r+0x1e9c>
81112e10:	d9003817 	ldw	r4,224(sp)
81112e14:	90c04014 	ori	r3,r18,256
81112e18:	d8c02b15 	stw	r3,172(sp)
81112e1c:	20021516 	blt	r4,zero,81113674 <___vfprintf_internal_r+0x1f24>
81112e20:	dcc03817 	ldw	r19,224(sp)
81112e24:	d8002a05 	stb	zero,168(sp)
81112e28:	00801984 	movi	r2,102
81112e2c:	8881f926 	beq	r17,r2,81113614 <___vfprintf_internal_r+0x1ec4>
81112e30:	00801184 	movi	r2,70
81112e34:	88821c26 	beq	r17,r2,811136a8 <___vfprintf_internal_r+0x1f58>
81112e38:	00801144 	movi	r2,69
81112e3c:	b081ef26 	beq	r22,r2,811135fc <___vfprintf_internal_r+0x1eac>
81112e40:	d8c02917 	ldw	r3,164(sp)
81112e44:	d8802104 	addi	r2,sp,132
81112e48:	d8800315 	stw	r2,12(sp)
81112e4c:	d9403617 	ldw	r5,216(sp)
81112e50:	d8802504 	addi	r2,sp,148
81112e54:	d9002c17 	ldw	r4,176(sp)
81112e58:	d8800215 	stw	r2,8(sp)
81112e5c:	d8802604 	addi	r2,sp,152
81112e60:	d8c00015 	stw	r3,0(sp)
81112e64:	d8800115 	stw	r2,4(sp)
81112e68:	01c00084 	movi	r7,2
81112e6c:	980d883a 	mov	r6,r19
81112e70:	d8c03c15 	stw	r3,240(sp)
81112e74:	da003d15 	stw	r8,244(sp)
81112e78:	11156fc0 	call	811156fc <_dtoa_r>
81112e7c:	1021883a 	mov	r16,r2
81112e80:	008019c4 	movi	r2,103
81112e84:	d8c03c17 	ldw	r3,240(sp)
81112e88:	da003d17 	ldw	r8,244(sp)
81112e8c:	88817126 	beq	r17,r2,81113454 <___vfprintf_internal_r+0x1d04>
81112e90:	008011c4 	movi	r2,71
81112e94:	88829226 	beq	r17,r2,811138e0 <___vfprintf_internal_r+0x2190>
81112e98:	80f9883a 	add	fp,r16,r3
81112e9c:	d9003617 	ldw	r4,216(sp)
81112ea0:	000d883a 	mov	r6,zero
81112ea4:	000f883a 	mov	r7,zero
81112ea8:	980b883a 	mov	r5,r19
81112eac:	da003d15 	stw	r8,244(sp)
81112eb0:	11223000 	call	81122300 <__eqdf2>
81112eb4:	da003d17 	ldw	r8,244(sp)
81112eb8:	10018d26 	beq	r2,zero,811134f0 <___vfprintf_internal_r+0x1da0>
81112ebc:	d8802117 	ldw	r2,132(sp)
81112ec0:	1700062e 	bgeu	r2,fp,81112edc <___vfprintf_internal_r+0x178c>
81112ec4:	01000c04 	movi	r4,48
81112ec8:	10c00044 	addi	r3,r2,1
81112ecc:	d8c02115 	stw	r3,132(sp)
81112ed0:	11000005 	stb	r4,0(r2)
81112ed4:	d8802117 	ldw	r2,132(sp)
81112ed8:	173ffb36 	bltu	r2,fp,81112ec8 <__reset+0xfb0f2ec8>
81112edc:	1405c83a 	sub	r2,r2,r16
81112ee0:	d8803315 	stw	r2,204(sp)
81112ee4:	008011c4 	movi	r2,71
81112ee8:	b0817626 	beq	r22,r2,811134c4 <___vfprintf_internal_r+0x1d74>
81112eec:	00801944 	movi	r2,101
81112ef0:	1442810e 	bge	r2,r17,811138f8 <___vfprintf_internal_r+0x21a8>
81112ef4:	d8c02617 	ldw	r3,152(sp)
81112ef8:	00801984 	movi	r2,102
81112efc:	d8c03215 	stw	r3,200(sp)
81112f00:	8881fe26 	beq	r17,r2,811136fc <___vfprintf_internal_r+0x1fac>
81112f04:	d8c03217 	ldw	r3,200(sp)
81112f08:	d9003317 	ldw	r4,204(sp)
81112f0c:	1901dd16 	blt	r3,r4,81113684 <___vfprintf_internal_r+0x1f34>
81112f10:	9480004c 	andi	r18,r18,1
81112f14:	90022b1e 	bne	r18,zero,811137c4 <___vfprintf_internal_r+0x2074>
81112f18:	1805883a 	mov	r2,r3
81112f1c:	18028016 	blt	r3,zero,81113920 <___vfprintf_internal_r+0x21d0>
81112f20:	d8c03217 	ldw	r3,200(sp)
81112f24:	044019c4 	movi	r17,103
81112f28:	d8c02e15 	stw	r3,184(sp)
81112f2c:	df002a07 	ldb	fp,168(sp)
81112f30:	e001531e 	bne	fp,zero,81113480 <___vfprintf_internal_r+0x1d30>
81112f34:	df002783 	ldbu	fp,158(sp)
81112f38:	d8802a15 	stw	r2,168(sp)
81112f3c:	dc802b17 	ldw	r18,172(sp)
81112f40:	d8002915 	stw	zero,164(sp)
81112f44:	003bd106 	br	81111e8c <__reset+0xfb0f1e8c>
81112f48:	d8802d17 	ldw	r2,180(sp)
81112f4c:	d8c02d17 	ldw	r3,180(sp)
81112f50:	d9002d17 	ldw	r4,180(sp)
81112f54:	10800017 	ldw	r2,0(r2)
81112f58:	18c00117 	ldw	r3,4(r3)
81112f5c:	21000204 	addi	r4,r4,8
81112f60:	d8803615 	stw	r2,216(sp)
81112f64:	d8c03815 	stw	r3,224(sp)
81112f68:	d9002d15 	stw	r4,180(sp)
81112f6c:	003b7506 	br	81111d44 <__reset+0xfb0f1d44>
81112f70:	ac400007 	ldb	r17,0(r21)
81112f74:	003a5906 	br	811118dc <__reset+0xfb0f18dc>
81112f78:	9080100c 	andi	r2,r18,64
81112f7c:	1000a826 	beq	r2,zero,81113220 <___vfprintf_internal_r+0x1ad0>
81112f80:	d9002d17 	ldw	r4,180(sp)
81112f84:	002d883a 	mov	r22,zero
81112f88:	24c0000b 	ldhu	r19,0(r4)
81112f8c:	21000104 	addi	r4,r4,4
81112f90:	d9002d15 	stw	r4,180(sp)
81112f94:	003ccb06 	br	811122c4 <__reset+0xfb0f22c4>
81112f98:	d8c02d17 	ldw	r3,180(sp)
81112f9c:	d9002917 	ldw	r4,164(sp)
81112fa0:	002d883a 	mov	r22,zero
81112fa4:	18800104 	addi	r2,r3,4
81112fa8:	1cc00017 	ldw	r19,0(r3)
81112fac:	203ebb0e 	bge	r4,zero,81112a9c <__reset+0xfb0f2a9c>
81112fb0:	003ef106 	br	81112b78 <__reset+0xfb0f2b78>
81112fb4:	9080040c 	andi	r2,r18,16
81112fb8:	1000921e 	bne	r2,zero,81113204 <___vfprintf_internal_r+0x1ab4>
81112fbc:	9480100c 	andi	r18,r18,64
81112fc0:	90013926 	beq	r18,zero,811134a8 <___vfprintf_internal_r+0x1d58>
81112fc4:	d9002d17 	ldw	r4,180(sp)
81112fc8:	d9402f17 	ldw	r5,188(sp)
81112fcc:	20800017 	ldw	r2,0(r4)
81112fd0:	21000104 	addi	r4,r4,4
81112fd4:	d9002d15 	stw	r4,180(sp)
81112fd8:	1140000d 	sth	r5,0(r2)
81112fdc:	003a1606 	br	81111838 <__reset+0xfb0f1838>
81112fe0:	9080100c 	andi	r2,r18,64
81112fe4:	10008026 	beq	r2,zero,811131e8 <___vfprintf_internal_r+0x1a98>
81112fe8:	d8c02d17 	ldw	r3,180(sp)
81112fec:	1cc0000f 	ldh	r19,0(r3)
81112ff0:	18c00104 	addi	r3,r3,4
81112ff4:	d8c02d15 	stw	r3,180(sp)
81112ff8:	982dd7fa 	srai	r22,r19,31
81112ffc:	b005883a 	mov	r2,r22
81113000:	003b1f06 	br	81111c80 <__reset+0xfb0f1c80>
81113004:	9080100c 	andi	r2,r18,64
81113008:	d8002785 	stb	zero,158(sp)
8111300c:	10008a1e 	bne	r2,zero,81113238 <___vfprintf_internal_r+0x1ae8>
81113010:	d9402d17 	ldw	r5,180(sp)
81113014:	d8c02917 	ldw	r3,164(sp)
81113018:	002d883a 	mov	r22,zero
8111301c:	28800104 	addi	r2,r5,4
81113020:	2cc00017 	ldw	r19,0(r5)
81113024:	183e4b0e 	bge	r3,zero,81112954 <__reset+0xfb0f2954>
81113028:	9d86b03a 	or	r3,r19,r22
8111302c:	d8802d15 	stw	r2,180(sp)
81113030:	183e4c1e 	bne	r3,zero,81112964 <__reset+0xfb0f2964>
81113034:	0039883a 	mov	fp,zero
81113038:	0005883a 	mov	r2,zero
8111303c:	003d4006 	br	81112540 <__reset+0xfb0f2540>
81113040:	01604534 	movhi	r5,33044
81113044:	296aeb84 	addi	r5,r5,-21586
81113048:	d9402b15 	stw	r5,172(sp)
8111304c:	d9402b17 	ldw	r5,172(sp)
81113050:	1c47883a 	add	r3,r3,r17
81113054:	10800044 	addi	r2,r2,1
81113058:	41400015 	stw	r5,0(r8)
8111305c:	44400115 	stw	r17,4(r8)
81113060:	d8c02015 	stw	r3,128(sp)
81113064:	d8801f15 	stw	r2,124(sp)
81113068:	010001c4 	movi	r4,7
8111306c:	20bec816 	blt	r4,r2,81112b90 <__reset+0xfb0f2b90>
81113070:	42000204 	addi	r8,r8,8
81113074:	003ecd06 	br	81112bac <__reset+0xfb0f2bac>
81113078:	d9002917 	ldw	r4,164(sp)
8111307c:	d8002785 	stb	zero,158(sp)
81113080:	203d2d16 	blt	r4,zero,81112538 <__reset+0xfb0f2538>
81113084:	00bfdfc4 	movi	r2,-129
81113088:	90a4703a 	and	r18,r18,r2
8111308c:	003a9106 	br	81111ad4 <__reset+0xfb0f1ad4>
81113090:	01204534 	movhi	r4,33044
81113094:	212aeb84 	addi	r4,r4,-21586
81113098:	d9002b15 	stw	r4,172(sp)
8111309c:	003c0c06 	br	811120d0 <__reset+0xfb0f20d0>
811130a0:	d9002c17 	ldw	r4,176(sp)
811130a4:	d9801e04 	addi	r6,sp,120
811130a8:	b80b883a 	mov	r5,r23
811130ac:	111d9580 	call	8111d958 <__sprint_r>
811130b0:	103aab1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811130b4:	d8c02017 	ldw	r3,128(sp)
811130b8:	da000404 	addi	r8,sp,16
811130bc:	003d4106 	br	811125c4 <__reset+0xfb0f25c4>
811130c0:	d8801f17 	ldw	r2,124(sp)
811130c4:	01604534 	movhi	r5,33044
811130c8:	01000044 	movi	r4,1
811130cc:	18c00044 	addi	r3,r3,1
811130d0:	10800044 	addi	r2,r2,1
811130d4:	296ae304 	addi	r5,r5,-21620
811130d8:	41000115 	stw	r4,4(r8)
811130dc:	41400015 	stw	r5,0(r8)
811130e0:	d8c02015 	stw	r3,128(sp)
811130e4:	d8801f15 	stw	r2,124(sp)
811130e8:	010001c4 	movi	r4,7
811130ec:	20805c16 	blt	r4,r2,81113260 <___vfprintf_internal_r+0x1b10>
811130f0:	42000204 	addi	r8,r8,8
811130f4:	8800041e 	bne	r17,zero,81113108 <___vfprintf_internal_r+0x19b8>
811130f8:	d8803317 	ldw	r2,204(sp)
811130fc:	1000021e 	bne	r2,zero,81113108 <___vfprintf_internal_r+0x19b8>
81113100:	9080004c 	andi	r2,r18,1
81113104:	103c0926 	beq	r2,zero,8111212c <__reset+0xfb0f212c>
81113108:	d9003717 	ldw	r4,220(sp)
8111310c:	d8801f17 	ldw	r2,124(sp)
81113110:	d9403417 	ldw	r5,208(sp)
81113114:	20c7883a 	add	r3,r4,r3
81113118:	10800044 	addi	r2,r2,1
8111311c:	41000115 	stw	r4,4(r8)
81113120:	41400015 	stw	r5,0(r8)
81113124:	d8c02015 	stw	r3,128(sp)
81113128:	d8801f15 	stw	r2,124(sp)
8111312c:	010001c4 	movi	r4,7
81113130:	20812116 	blt	r4,r2,811135b8 <___vfprintf_internal_r+0x1e68>
81113134:	42000204 	addi	r8,r8,8
81113138:	0463c83a 	sub	r17,zero,r17
8111313c:	0440730e 	bge	zero,r17,8111330c <___vfprintf_internal_r+0x1bbc>
81113140:	05800404 	movi	r22,16
81113144:	b440860e 	bge	r22,r17,81113360 <___vfprintf_internal_r+0x1c10>
81113148:	01604534 	movhi	r5,33044
8111314c:	296aeb84 	addi	r5,r5,-21586
81113150:	d9402b15 	stw	r5,172(sp)
81113154:	070001c4 	movi	fp,7
81113158:	dcc02c17 	ldw	r19,176(sp)
8111315c:	00000306 	br	8111316c <___vfprintf_internal_r+0x1a1c>
81113160:	42000204 	addi	r8,r8,8
81113164:	8c7ffc04 	addi	r17,r17,-16
81113168:	b440800e 	bge	r22,r17,8111336c <___vfprintf_internal_r+0x1c1c>
8111316c:	18c00404 	addi	r3,r3,16
81113170:	10800044 	addi	r2,r2,1
81113174:	45000015 	stw	r20,0(r8)
81113178:	45800115 	stw	r22,4(r8)
8111317c:	d8c02015 	stw	r3,128(sp)
81113180:	d8801f15 	stw	r2,124(sp)
81113184:	e0bff60e 	bge	fp,r2,81113160 <__reset+0xfb0f3160>
81113188:	d9801e04 	addi	r6,sp,120
8111318c:	b80b883a 	mov	r5,r23
81113190:	9809883a 	mov	r4,r19
81113194:	111d9580 	call	8111d958 <__sprint_r>
81113198:	103a711e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
8111319c:	d8c02017 	ldw	r3,128(sp)
811131a0:	d8801f17 	ldw	r2,124(sp)
811131a4:	da000404 	addi	r8,sp,16
811131a8:	003fee06 	br	81113164 <__reset+0xfb0f3164>
811131ac:	00bfffc4 	movi	r2,-1
811131b0:	003a6f06 	br	81111b70 <__reset+0xfb0f1b70>
811131b4:	008011c4 	movi	r2,71
811131b8:	1440b816 	blt	r2,r17,8111349c <___vfprintf_internal_r+0x1d4c>
811131bc:	04204534 	movhi	r16,33044
811131c0:	842ad504 	addi	r16,r16,-21676
811131c4:	00c000c4 	movi	r3,3
811131c8:	00bfdfc4 	movi	r2,-129
811131cc:	d8c02a15 	stw	r3,168(sp)
811131d0:	90a4703a 	and	r18,r18,r2
811131d4:	df002783 	ldbu	fp,158(sp)
811131d8:	d8c02e15 	stw	r3,184(sp)
811131dc:	d8002915 	stw	zero,164(sp)
811131e0:	d8003215 	stw	zero,200(sp)
811131e4:	003b2906 	br	81111e8c <__reset+0xfb0f1e8c>
811131e8:	d9002d17 	ldw	r4,180(sp)
811131ec:	24c00017 	ldw	r19,0(r4)
811131f0:	21000104 	addi	r4,r4,4
811131f4:	d9002d15 	stw	r4,180(sp)
811131f8:	982dd7fa 	srai	r22,r19,31
811131fc:	b005883a 	mov	r2,r22
81113200:	003a9f06 	br	81111c80 <__reset+0xfb0f1c80>
81113204:	d9402d17 	ldw	r5,180(sp)
81113208:	d8c02f17 	ldw	r3,188(sp)
8111320c:	28800017 	ldw	r2,0(r5)
81113210:	29400104 	addi	r5,r5,4
81113214:	d9402d15 	stw	r5,180(sp)
81113218:	10c00015 	stw	r3,0(r2)
8111321c:	00398606 	br	81111838 <__reset+0xfb0f1838>
81113220:	d9402d17 	ldw	r5,180(sp)
81113224:	002d883a 	mov	r22,zero
81113228:	2cc00017 	ldw	r19,0(r5)
8111322c:	29400104 	addi	r5,r5,4
81113230:	d9402d15 	stw	r5,180(sp)
81113234:	003c2306 	br	811122c4 <__reset+0xfb0f22c4>
81113238:	d8c02d17 	ldw	r3,180(sp)
8111323c:	d9002917 	ldw	r4,164(sp)
81113240:	002d883a 	mov	r22,zero
81113244:	18800104 	addi	r2,r3,4
81113248:	1cc0000b 	ldhu	r19,0(r3)
8111324c:	203dc10e 	bge	r4,zero,81112954 <__reset+0xfb0f2954>
81113250:	003f7506 	br	81113028 <__reset+0xfb0f3028>
81113254:	04204534 	movhi	r16,33044
81113258:	842ad304 	addi	r16,r16,-21684
8111325c:	003acc06 	br	81111d90 <__reset+0xfb0f1d90>
81113260:	d9002c17 	ldw	r4,176(sp)
81113264:	d9801e04 	addi	r6,sp,120
81113268:	b80b883a 	mov	r5,r23
8111326c:	111d9580 	call	8111d958 <__sprint_r>
81113270:	103a3b1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81113274:	dc402617 	ldw	r17,152(sp)
81113278:	d8c02017 	ldw	r3,128(sp)
8111327c:	da000404 	addi	r8,sp,16
81113280:	003f9c06 	br	811130f4 <__reset+0xfb0f30f4>
81113284:	ac400043 	ldbu	r17,1(r21)
81113288:	94800814 	ori	r18,r18,32
8111328c:	ad400044 	addi	r21,r21,1
81113290:	8c403fcc 	andi	r17,r17,255
81113294:	8c40201c 	xori	r17,r17,128
81113298:	8c7fe004 	addi	r17,r17,-128
8111329c:	00398f06 	br	811118dc <__reset+0xfb0f18dc>
811132a0:	d8c02d15 	stw	r3,180(sp)
811132a4:	0039883a 	mov	fp,zero
811132a8:	003e3506 	br	81112b80 <__reset+0xfb0f2b80>
811132ac:	d9002c17 	ldw	r4,176(sp)
811132b0:	d9801e04 	addi	r6,sp,120
811132b4:	b80b883a 	mov	r5,r23
811132b8:	111d9580 	call	8111d958 <__sprint_r>
811132bc:	103a281e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811132c0:	d8c02017 	ldw	r3,128(sp)
811132c4:	da000404 	addi	r8,sp,16
811132c8:	003cd006 	br	8111260c <__reset+0xfb0f260c>
811132cc:	8009883a 	mov	r4,r16
811132d0:	da003d15 	stw	r8,244(sp)
811132d4:	110f27c0 	call	8110f27c <strlen>
811132d8:	d8802e15 	stw	r2,184(sp)
811132dc:	da003d17 	ldw	r8,244(sp)
811132e0:	103c340e 	bge	r2,zero,811123b4 <__reset+0xfb0f23b4>
811132e4:	0005883a 	mov	r2,zero
811132e8:	003c3206 	br	811123b4 <__reset+0xfb0f23b4>
811132ec:	d9002c17 	ldw	r4,176(sp)
811132f0:	d9801e04 	addi	r6,sp,120
811132f4:	b80b883a 	mov	r5,r23
811132f8:	111d9580 	call	8111d958 <__sprint_r>
811132fc:	103a181e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81113300:	d8c02017 	ldw	r3,128(sp)
81113304:	d8801f17 	ldw	r2,124(sp)
81113308:	da000404 	addi	r8,sp,16
8111330c:	d9403317 	ldw	r5,204(sp)
81113310:	10800044 	addi	r2,r2,1
81113314:	44000015 	stw	r16,0(r8)
81113318:	28c7883a 	add	r3,r5,r3
8111331c:	003b7d06 	br	81112114 <__reset+0xfb0f2114>
81113320:	01204534 	movhi	r4,33044
81113324:	212aef84 	addi	r4,r4,-21570
81113328:	d9003515 	stw	r4,212(sp)
8111332c:	003b1406 	br	81111f80 <__reset+0xfb0f1f80>
81113330:	013fffc4 	movi	r4,-1
81113334:	003a3506 	br	81111c0c <__reset+0xfb0f1c0c>
81113338:	0023883a 	mov	r17,zero
8111333c:	003d9d06 	br	811129b4 <__reset+0xfb0f29b4>
81113340:	d9002c17 	ldw	r4,176(sp)
81113344:	d9801e04 	addi	r6,sp,120
81113348:	b80b883a 	mov	r5,r23
8111334c:	111d9580 	call	8111d958 <__sprint_r>
81113350:	103a031e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
81113354:	d8c02017 	ldw	r3,128(sp)
81113358:	da000404 	addi	r8,sp,16
8111335c:	003d9406 	br	811129b0 <__reset+0xfb0f29b0>
81113360:	01204534 	movhi	r4,33044
81113364:	212aeb84 	addi	r4,r4,-21586
81113368:	d9002b15 	stw	r4,172(sp)
8111336c:	d9002b17 	ldw	r4,172(sp)
81113370:	1c47883a 	add	r3,r3,r17
81113374:	10800044 	addi	r2,r2,1
81113378:	41000015 	stw	r4,0(r8)
8111337c:	44400115 	stw	r17,4(r8)
81113380:	d8c02015 	stw	r3,128(sp)
81113384:	d8801f15 	stw	r2,124(sp)
81113388:	010001c4 	movi	r4,7
8111338c:	20bfd716 	blt	r4,r2,811132ec <__reset+0xfb0f32ec>
81113390:	42000204 	addi	r8,r8,8
81113394:	003fdd06 	br	8111330c <__reset+0xfb0f330c>
81113398:	d9002c17 	ldw	r4,176(sp)
8111339c:	d9801e04 	addi	r6,sp,120
811133a0:	b80b883a 	mov	r5,r23
811133a4:	111d9580 	call	8111d958 <__sprint_r>
811133a8:	1039ed1e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811133ac:	d8802617 	ldw	r2,152(sp)
811133b0:	d8c02017 	ldw	r3,128(sp)
811133b4:	da000404 	addi	r8,sp,16
811133b8:	003e1006 	br	81112bfc <__reset+0xfb0f2bfc>
811133bc:	00800044 	movi	r2,1
811133c0:	10803fcc 	andi	r2,r2,255
811133c4:	00c00044 	movi	r3,1
811133c8:	10fa3526 	beq	r2,r3,81111ca0 <__reset+0xfb0f1ca0>
811133cc:	00c00084 	movi	r3,2
811133d0:	10fbcb26 	beq	r2,r3,81112300 <__reset+0xfb0f2300>
811133d4:	003a8f06 	br	81111e14 <__reset+0xfb0f1e14>
811133d8:	01204534 	movhi	r4,33044
811133dc:	212aef84 	addi	r4,r4,-21570
811133e0:	d9003515 	stw	r4,212(sp)
811133e4:	003b7606 	br	811121c0 <__reset+0xfb0f21c0>
811133e8:	d8802917 	ldw	r2,164(sp)
811133ec:	00c00184 	movi	r3,6
811133f0:	1880012e 	bgeu	r3,r2,811133f8 <___vfprintf_internal_r+0x1ca8>
811133f4:	1805883a 	mov	r2,r3
811133f8:	d8802e15 	stw	r2,184(sp)
811133fc:	1000ef16 	blt	r2,zero,811137bc <___vfprintf_internal_r+0x206c>
81113400:	04204534 	movhi	r16,33044
81113404:	d8802a15 	stw	r2,168(sp)
81113408:	dcc02d15 	stw	r19,180(sp)
8111340c:	d8002915 	stw	zero,164(sp)
81113410:	d8003215 	stw	zero,200(sp)
81113414:	842ae104 	addi	r16,r16,-21628
81113418:	0039883a 	mov	fp,zero
8111341c:	003aa206 	br	81111ea8 <__reset+0xfb0f1ea8>
81113420:	0021883a 	mov	r16,zero
81113424:	003e0706 	br	81112c44 <__reset+0xfb0f2c44>
81113428:	d9002c17 	ldw	r4,176(sp)
8111342c:	d9801e04 	addi	r6,sp,120
81113430:	b80b883a 	mov	r5,r23
81113434:	111d9580 	call	8111d958 <__sprint_r>
81113438:	1039c91e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
8111343c:	d8802617 	ldw	r2,152(sp)
81113440:	d9403317 	ldw	r5,204(sp)
81113444:	d8c02017 	ldw	r3,128(sp)
81113448:	da000404 	addi	r8,sp,16
8111344c:	2885c83a 	sub	r2,r5,r2
81113450:	003dfb06 	br	81112c40 <__reset+0xfb0f2c40>
81113454:	9080004c 	andi	r2,r18,1
81113458:	103e8f1e 	bne	r2,zero,81112e98 <__reset+0xfb0f2e98>
8111345c:	d8802117 	ldw	r2,132(sp)
81113460:	003e9e06 	br	81112edc <__reset+0xfb0f2edc>
81113464:	1025883a 	mov	r18,r2
81113468:	0039883a 	mov	fp,zero
8111346c:	00800084 	movi	r2,2
81113470:	003fd306 	br	811133c0 <__reset+0xfb0f33c0>
81113474:	07000b44 	movi	fp,45
81113478:	df002785 	stb	fp,158(sp)
8111347c:	003a4006 	br	81111d80 <__reset+0xfb0f1d80>
81113480:	00c00b44 	movi	r3,45
81113484:	d8c02785 	stb	r3,158(sp)
81113488:	d8802a15 	stw	r2,168(sp)
8111348c:	dc802b17 	ldw	r18,172(sp)
81113490:	d8002915 	stw	zero,164(sp)
81113494:	07000b44 	movi	fp,45
81113498:	003a8006 	br	81111e9c <__reset+0xfb0f1e9c>
8111349c:	04204534 	movhi	r16,33044
811134a0:	842ad604 	addi	r16,r16,-21672
811134a4:	003f4706 	br	811131c4 <__reset+0xfb0f31c4>
811134a8:	d8c02d17 	ldw	r3,180(sp)
811134ac:	d9002f17 	ldw	r4,188(sp)
811134b0:	18800017 	ldw	r2,0(r3)
811134b4:	18c00104 	addi	r3,r3,4
811134b8:	d8c02d15 	stw	r3,180(sp)
811134bc:	11000015 	stw	r4,0(r2)
811134c0:	0038dd06 	br	81111838 <__reset+0xfb0f1838>
811134c4:	dd802617 	ldw	r22,152(sp)
811134c8:	00bfff44 	movi	r2,-3
811134cc:	b0801c16 	blt	r22,r2,81113540 <___vfprintf_internal_r+0x1df0>
811134d0:	d9402917 	ldw	r5,164(sp)
811134d4:	2d801a16 	blt	r5,r22,81113540 <___vfprintf_internal_r+0x1df0>
811134d8:	dd803215 	stw	r22,200(sp)
811134dc:	003e8906 	br	81112f04 <__reset+0xfb0f2f04>
811134e0:	01204534 	movhi	r4,33044
811134e4:	212aeb84 	addi	r4,r4,-21586
811134e8:	d9002b15 	stw	r4,172(sp)
811134ec:	003c9106 	br	81112734 <__reset+0xfb0f2734>
811134f0:	e005883a 	mov	r2,fp
811134f4:	003e7906 	br	81112edc <__reset+0xfb0f2edc>
811134f8:	d9402917 	ldw	r5,164(sp)
811134fc:	df002783 	ldbu	fp,158(sp)
81113500:	dcc02d15 	stw	r19,180(sp)
81113504:	d9402a15 	stw	r5,168(sp)
81113508:	d9402e15 	stw	r5,184(sp)
8111350c:	d8002915 	stw	zero,164(sp)
81113510:	d8003215 	stw	zero,200(sp)
81113514:	003a5d06 	br	81111e8c <__reset+0xfb0f1e8c>
81113518:	9080004c 	andi	r2,r18,1
8111351c:	0039883a 	mov	fp,zero
81113520:	10000426 	beq	r2,zero,81113534 <___vfprintf_internal_r+0x1de4>
81113524:	00800c04 	movi	r2,48
81113528:	dc001dc4 	addi	r16,sp,119
8111352c:	d8801dc5 	stb	r2,119(sp)
81113530:	003b8006 	br	81112334 <__reset+0xfb0f2334>
81113534:	d8002e15 	stw	zero,184(sp)
81113538:	dc001e04 	addi	r16,sp,120
8111353c:	003a4d06 	br	81111e74 <__reset+0xfb0f1e74>
81113540:	8c7fff84 	addi	r17,r17,-2
81113544:	b5bfffc4 	addi	r22,r22,-1
81113548:	dd802615 	stw	r22,152(sp)
8111354c:	dc4022c5 	stb	r17,139(sp)
81113550:	b000bf16 	blt	r22,zero,81113850 <___vfprintf_internal_r+0x2100>
81113554:	00800ac4 	movi	r2,43
81113558:	d8802305 	stb	r2,140(sp)
8111355c:	00800244 	movi	r2,9
81113560:	15807016 	blt	r2,r22,81113724 <___vfprintf_internal_r+0x1fd4>
81113564:	00800c04 	movi	r2,48
81113568:	b5800c04 	addi	r22,r22,48
8111356c:	d8802345 	stb	r2,141(sp)
81113570:	dd802385 	stb	r22,142(sp)
81113574:	d88023c4 	addi	r2,sp,143
81113578:	df0022c4 	addi	fp,sp,139
8111357c:	d8c03317 	ldw	r3,204(sp)
81113580:	1739c83a 	sub	fp,r2,fp
81113584:	d9003317 	ldw	r4,204(sp)
81113588:	e0c7883a 	add	r3,fp,r3
8111358c:	df003a15 	stw	fp,232(sp)
81113590:	d8c02e15 	stw	r3,184(sp)
81113594:	00800044 	movi	r2,1
81113598:	1100b30e 	bge	r2,r4,81113868 <___vfprintf_internal_r+0x2118>
8111359c:	d8c02e17 	ldw	r3,184(sp)
811135a0:	18c00044 	addi	r3,r3,1
811135a4:	d8c02e15 	stw	r3,184(sp)
811135a8:	1805883a 	mov	r2,r3
811135ac:	1800ac16 	blt	r3,zero,81113860 <___vfprintf_internal_r+0x2110>
811135b0:	d8003215 	stw	zero,200(sp)
811135b4:	003e5d06 	br	81112f2c <__reset+0xfb0f2f2c>
811135b8:	d9002c17 	ldw	r4,176(sp)
811135bc:	d9801e04 	addi	r6,sp,120
811135c0:	b80b883a 	mov	r5,r23
811135c4:	111d9580 	call	8111d958 <__sprint_r>
811135c8:	1039651e 	bne	r2,zero,81111b60 <__reset+0xfb0f1b60>
811135cc:	dc402617 	ldw	r17,152(sp)
811135d0:	d8c02017 	ldw	r3,128(sp)
811135d4:	d8801f17 	ldw	r2,124(sp)
811135d8:	da000404 	addi	r8,sp,16
811135dc:	003ed606 	br	81113138 <__reset+0xfb0f3138>
811135e0:	582b883a 	mov	r21,r11
811135e4:	d8002915 	stw	zero,164(sp)
811135e8:	0038bd06 	br	811118e0 <__reset+0xfb0f18e0>
811135ec:	d8802917 	ldw	r2,164(sp)
811135f0:	103e071e 	bne	r2,zero,81112e10 <__reset+0xfb0f2e10>
811135f4:	dc002915 	stw	r16,164(sp)
811135f8:	003e0506 	br	81112e10 <__reset+0xfb0f2e10>
811135fc:	d9002917 	ldw	r4,164(sp)
81113600:	20c00044 	addi	r3,r4,1
81113604:	003e0f06 	br	81112e44 <__reset+0xfb0f2e44>
81113608:	01400184 	movi	r5,6
8111360c:	d9402915 	stw	r5,164(sp)
81113610:	003dff06 	br	81112e10 <__reset+0xfb0f2e10>
81113614:	d8802104 	addi	r2,sp,132
81113618:	d8800315 	stw	r2,12(sp)
8111361c:	d8802504 	addi	r2,sp,148
81113620:	d8800215 	stw	r2,8(sp)
81113624:	d8802604 	addi	r2,sp,152
81113628:	d8800115 	stw	r2,4(sp)
8111362c:	d8802917 	ldw	r2,164(sp)
81113630:	d9403617 	ldw	r5,216(sp)
81113634:	d9002c17 	ldw	r4,176(sp)
81113638:	d8800015 	stw	r2,0(sp)
8111363c:	01c000c4 	movi	r7,3
81113640:	980d883a 	mov	r6,r19
81113644:	da003d15 	stw	r8,244(sp)
81113648:	11156fc0 	call	811156fc <_dtoa_r>
8111364c:	d8c02917 	ldw	r3,164(sp)
81113650:	da003d17 	ldw	r8,244(sp)
81113654:	1021883a 	mov	r16,r2
81113658:	10f9883a 	add	fp,r2,r3
8111365c:	81000007 	ldb	r4,0(r16)
81113660:	00800c04 	movi	r2,48
81113664:	20805e26 	beq	r4,r2,811137e0 <___vfprintf_internal_r+0x2090>
81113668:	d8c02617 	ldw	r3,152(sp)
8111366c:	e0f9883a 	add	fp,fp,r3
81113670:	003e0a06 	br	81112e9c <__reset+0xfb0f2e9c>
81113674:	00c00b44 	movi	r3,45
81113678:	24e0003c 	xorhi	r19,r4,32768
8111367c:	d8c02a05 	stb	r3,168(sp)
81113680:	003de906 	br	81112e28 <__reset+0xfb0f2e28>
81113684:	d8c03217 	ldw	r3,200(sp)
81113688:	00c07a0e 	bge	zero,r3,81113874 <___vfprintf_internal_r+0x2124>
8111368c:	00800044 	movi	r2,1
81113690:	d9003317 	ldw	r4,204(sp)
81113694:	1105883a 	add	r2,r2,r4
81113698:	d8802e15 	stw	r2,184(sp)
8111369c:	10004e16 	blt	r2,zero,811137d8 <___vfprintf_internal_r+0x2088>
811136a0:	044019c4 	movi	r17,103
811136a4:	003e2106 	br	81112f2c <__reset+0xfb0f2f2c>
811136a8:	d9002917 	ldw	r4,164(sp)
811136ac:	d8802104 	addi	r2,sp,132
811136b0:	d8800315 	stw	r2,12(sp)
811136b4:	d9000015 	stw	r4,0(sp)
811136b8:	d8802504 	addi	r2,sp,148
811136bc:	d9403617 	ldw	r5,216(sp)
811136c0:	d9002c17 	ldw	r4,176(sp)
811136c4:	d8800215 	stw	r2,8(sp)
811136c8:	d8802604 	addi	r2,sp,152
811136cc:	d8800115 	stw	r2,4(sp)
811136d0:	01c000c4 	movi	r7,3
811136d4:	980d883a 	mov	r6,r19
811136d8:	da003d15 	stw	r8,244(sp)
811136dc:	11156fc0 	call	811156fc <_dtoa_r>
811136e0:	d8c02917 	ldw	r3,164(sp)
811136e4:	da003d17 	ldw	r8,244(sp)
811136e8:	1021883a 	mov	r16,r2
811136ec:	00801184 	movi	r2,70
811136f0:	80f9883a 	add	fp,r16,r3
811136f4:	88bfd926 	beq	r17,r2,8111365c <__reset+0xfb0f365c>
811136f8:	003de806 	br	81112e9c <__reset+0xfb0f2e9c>
811136fc:	d9002917 	ldw	r4,164(sp)
81113700:	00c04d0e 	bge	zero,r3,81113838 <___vfprintf_internal_r+0x20e8>
81113704:	2000441e 	bne	r4,zero,81113818 <___vfprintf_internal_r+0x20c8>
81113708:	9480004c 	andi	r18,r18,1
8111370c:	9000421e 	bne	r18,zero,81113818 <___vfprintf_internal_r+0x20c8>
81113710:	1805883a 	mov	r2,r3
81113714:	18007016 	blt	r3,zero,811138d8 <___vfprintf_internal_r+0x2188>
81113718:	d8c03217 	ldw	r3,200(sp)
8111371c:	d8c02e15 	stw	r3,184(sp)
81113720:	003e0206 	br	81112f2c <__reset+0xfb0f2f2c>
81113724:	df0022c4 	addi	fp,sp,139
81113728:	dc002915 	stw	r16,164(sp)
8111372c:	4027883a 	mov	r19,r8
81113730:	e021883a 	mov	r16,fp
81113734:	b009883a 	mov	r4,r22
81113738:	01400284 	movi	r5,10
8111373c:	1120e300 	call	81120e30 <__modsi3>
81113740:	10800c04 	addi	r2,r2,48
81113744:	843fffc4 	addi	r16,r16,-1
81113748:	b009883a 	mov	r4,r22
8111374c:	01400284 	movi	r5,10
81113750:	80800005 	stb	r2,0(r16)
81113754:	1120dac0 	call	81120dac <__divsi3>
81113758:	102d883a 	mov	r22,r2
8111375c:	00800244 	movi	r2,9
81113760:	15bff416 	blt	r2,r22,81113734 <__reset+0xfb0f3734>
81113764:	9811883a 	mov	r8,r19
81113768:	b0800c04 	addi	r2,r22,48
8111376c:	8027883a 	mov	r19,r16
81113770:	997fffc4 	addi	r5,r19,-1
81113774:	98bfffc5 	stb	r2,-1(r19)
81113778:	dc002917 	ldw	r16,164(sp)
8111377c:	2f006a2e 	bgeu	r5,fp,81113928 <___vfprintf_internal_r+0x21d8>
81113780:	d9c02384 	addi	r7,sp,142
81113784:	3ccfc83a 	sub	r7,r7,r19
81113788:	d9002344 	addi	r4,sp,141
8111378c:	e1cf883a 	add	r7,fp,r7
81113790:	00000106 	br	81113798 <___vfprintf_internal_r+0x2048>
81113794:	28800003 	ldbu	r2,0(r5)
81113798:	20800005 	stb	r2,0(r4)
8111379c:	21000044 	addi	r4,r4,1
811137a0:	29400044 	addi	r5,r5,1
811137a4:	393ffb1e 	bne	r7,r4,81113794 <__reset+0xfb0f3794>
811137a8:	d8802304 	addi	r2,sp,140
811137ac:	14c5c83a 	sub	r2,r2,r19
811137b0:	d8c02344 	addi	r3,sp,141
811137b4:	1885883a 	add	r2,r3,r2
811137b8:	003f7006 	br	8111357c <__reset+0xfb0f357c>
811137bc:	0005883a 	mov	r2,zero
811137c0:	003f0f06 	br	81113400 <__reset+0xfb0f3400>
811137c4:	d8c03217 	ldw	r3,200(sp)
811137c8:	18c00044 	addi	r3,r3,1
811137cc:	d8c02e15 	stw	r3,184(sp)
811137d0:	1805883a 	mov	r2,r3
811137d4:	183fb20e 	bge	r3,zero,811136a0 <__reset+0xfb0f36a0>
811137d8:	0005883a 	mov	r2,zero
811137dc:	003fb006 	br	811136a0 <__reset+0xfb0f36a0>
811137e0:	d9003617 	ldw	r4,216(sp)
811137e4:	000d883a 	mov	r6,zero
811137e8:	000f883a 	mov	r7,zero
811137ec:	980b883a 	mov	r5,r19
811137f0:	d8c03c15 	stw	r3,240(sp)
811137f4:	da003d15 	stw	r8,244(sp)
811137f8:	11223000 	call	81122300 <__eqdf2>
811137fc:	d8c03c17 	ldw	r3,240(sp)
81113800:	da003d17 	ldw	r8,244(sp)
81113804:	103f9826 	beq	r2,zero,81113668 <__reset+0xfb0f3668>
81113808:	00800044 	movi	r2,1
8111380c:	10c7c83a 	sub	r3,r2,r3
81113810:	d8c02615 	stw	r3,152(sp)
81113814:	003f9506 	br	8111366c <__reset+0xfb0f366c>
81113818:	d9002917 	ldw	r4,164(sp)
8111381c:	d8c03217 	ldw	r3,200(sp)
81113820:	20800044 	addi	r2,r4,1
81113824:	1885883a 	add	r2,r3,r2
81113828:	d8802e15 	stw	r2,184(sp)
8111382c:	103dbf0e 	bge	r2,zero,81112f2c <__reset+0xfb0f2f2c>
81113830:	0005883a 	mov	r2,zero
81113834:	003dbd06 	br	81112f2c <__reset+0xfb0f2f2c>
81113838:	2000211e 	bne	r4,zero,811138c0 <___vfprintf_internal_r+0x2170>
8111383c:	9480004c 	andi	r18,r18,1
81113840:	90001f1e 	bne	r18,zero,811138c0 <___vfprintf_internal_r+0x2170>
81113844:	00800044 	movi	r2,1
81113848:	d8802e15 	stw	r2,184(sp)
8111384c:	003db706 	br	81112f2c <__reset+0xfb0f2f2c>
81113850:	00800b44 	movi	r2,45
81113854:	05adc83a 	sub	r22,zero,r22
81113858:	d8802305 	stb	r2,140(sp)
8111385c:	003f3f06 	br	8111355c <__reset+0xfb0f355c>
81113860:	0005883a 	mov	r2,zero
81113864:	003f5206 	br	811135b0 <__reset+0xfb0f35b0>
81113868:	90a4703a 	and	r18,r18,r2
8111386c:	903f4e26 	beq	r18,zero,811135a8 <__reset+0xfb0f35a8>
81113870:	003f4a06 	br	8111359c <__reset+0xfb0f359c>
81113874:	00800084 	movi	r2,2
81113878:	10c5c83a 	sub	r2,r2,r3
8111387c:	003f8406 	br	81113690 <__reset+0xfb0f3690>
81113880:	d8802d17 	ldw	r2,180(sp)
81113884:	d9002d17 	ldw	r4,180(sp)
81113888:	ac400043 	ldbu	r17,1(r21)
8111388c:	10800017 	ldw	r2,0(r2)
81113890:	582b883a 	mov	r21,r11
81113894:	d8802915 	stw	r2,164(sp)
81113898:	20800104 	addi	r2,r4,4
8111389c:	d9002917 	ldw	r4,164(sp)
811138a0:	d8802d15 	stw	r2,180(sp)
811138a4:	203e7a0e 	bge	r4,zero,81113290 <__reset+0xfb0f3290>
811138a8:	8c403fcc 	andi	r17,r17,255
811138ac:	00bfffc4 	movi	r2,-1
811138b0:	8c40201c 	xori	r17,r17,128
811138b4:	d8802915 	stw	r2,164(sp)
811138b8:	8c7fe004 	addi	r17,r17,-128
811138bc:	00380706 	br	811118dc <__reset+0xfb0f18dc>
811138c0:	d8c02917 	ldw	r3,164(sp)
811138c4:	18c00084 	addi	r3,r3,2
811138c8:	d8c02e15 	stw	r3,184(sp)
811138cc:	1805883a 	mov	r2,r3
811138d0:	183d960e 	bge	r3,zero,81112f2c <__reset+0xfb0f2f2c>
811138d4:	003fd606 	br	81113830 <__reset+0xfb0f3830>
811138d8:	0005883a 	mov	r2,zero
811138dc:	003f8e06 	br	81113718 <__reset+0xfb0f3718>
811138e0:	9080004c 	andi	r2,r18,1
811138e4:	103f811e 	bne	r2,zero,811136ec <__reset+0xfb0f36ec>
811138e8:	d8802117 	ldw	r2,132(sp)
811138ec:	1405c83a 	sub	r2,r2,r16
811138f0:	d8803315 	stw	r2,204(sp)
811138f4:	b47ef326 	beq	r22,r17,811134c4 <__reset+0xfb0f34c4>
811138f8:	dd802617 	ldw	r22,152(sp)
811138fc:	003f1106 	br	81113544 <__reset+0xfb0f3544>
81113900:	d9c02785 	stb	r7,158(sp)
81113904:	00390406 	br	81111d18 <__reset+0xfb0f1d18>
81113908:	d9c02785 	stb	r7,158(sp)
8111390c:	0038d306 	br	81111c5c <__reset+0xfb0f1c5c>
81113910:	d9c02785 	stb	r7,158(sp)
81113914:	003a6106 	br	8111229c <__reset+0xfb0f229c>
81113918:	d9c02785 	stb	r7,158(sp)
8111391c:	003af806 	br	81112500 <__reset+0xfb0f2500>
81113920:	0005883a 	mov	r2,zero
81113924:	003d7e06 	br	81112f20 <__reset+0xfb0f2f20>
81113928:	d8802344 	addi	r2,sp,141
8111392c:	003f1306 	br	8111357c <__reset+0xfb0f357c>
81113930:	d9c02785 	stb	r7,158(sp)
81113934:	00392306 	br	81111dc4 <__reset+0xfb0f1dc4>
81113938:	d9c02785 	stb	r7,158(sp)
8111393c:	003aa906 	br	811123e4 <__reset+0xfb0f23e4>
81113940:	d9c02785 	stb	r7,158(sp)
81113944:	003a3d06 	br	8111223c <__reset+0xfb0f223c>
81113948:	d9c02785 	stb	r7,158(sp)
8111394c:	003aca06 	br	81112478 <__reset+0xfb0f2478>

81113950 <__vfprintf_internal>:
81113950:	00a04534 	movhi	r2,33044
81113954:	10b3e404 	addi	r2,r2,-12400
81113958:	300f883a 	mov	r7,r6
8111395c:	280d883a 	mov	r6,r5
81113960:	200b883a 	mov	r5,r4
81113964:	11000017 	ldw	r4,0(r2)
81113968:	11117501 	jmpi	81111750 <___vfprintf_internal_r>

8111396c <__sbprintf>:
8111396c:	defee204 	addi	sp,sp,-1144
81113970:	de00012e 	bgeu	sp,et,81113978 <__sbprintf+0xc>
81113974:	003b68fa 	trap	3
81113978:	2880030b 	ldhu	r2,12(r5)
8111397c:	2ac01917 	ldw	r11,100(r5)
81113980:	2a80038b 	ldhu	r10,14(r5)
81113984:	2a400717 	ldw	r9,28(r5)
81113988:	2a000917 	ldw	r8,36(r5)
8111398c:	00c10004 	movi	r3,1024
81113990:	dc011a15 	stw	r16,1128(sp)
81113994:	10bfff4c 	andi	r2,r2,65533
81113998:	2821883a 	mov	r16,r5
8111399c:	d8cb883a 	add	r5,sp,r3
811139a0:	dc811c15 	stw	r18,1136(sp)
811139a4:	dc411b15 	stw	r17,1132(sp)
811139a8:	dfc11d15 	stw	ra,1140(sp)
811139ac:	2025883a 	mov	r18,r4
811139b0:	d881030d 	sth	r2,1036(sp)
811139b4:	dac11915 	stw	r11,1124(sp)
811139b8:	da81038d 	sth	r10,1038(sp)
811139bc:	da410715 	stw	r9,1052(sp)
811139c0:	da010915 	stw	r8,1060(sp)
811139c4:	dec10015 	stw	sp,1024(sp)
811139c8:	dec10415 	stw	sp,1040(sp)
811139cc:	d8c10215 	stw	r3,1032(sp)
811139d0:	d8c10515 	stw	r3,1044(sp)
811139d4:	d8010615 	stw	zero,1048(sp)
811139d8:	11117500 	call	81111750 <___vfprintf_internal_r>
811139dc:	1023883a 	mov	r17,r2
811139e0:	10000416 	blt	r2,zero,811139f4 <__sbprintf+0x88>
811139e4:	d9410004 	addi	r5,sp,1024
811139e8:	9009883a 	mov	r4,r18
811139ec:	1116fb00 	call	81116fb0 <_fflush_r>
811139f0:	10000d1e 	bne	r2,zero,81113a28 <__sbprintf+0xbc>
811139f4:	d881030b 	ldhu	r2,1036(sp)
811139f8:	1080100c 	andi	r2,r2,64
811139fc:	10000326 	beq	r2,zero,81113a0c <__sbprintf+0xa0>
81113a00:	8080030b 	ldhu	r2,12(r16)
81113a04:	10801014 	ori	r2,r2,64
81113a08:	8080030d 	sth	r2,12(r16)
81113a0c:	8805883a 	mov	r2,r17
81113a10:	dfc11d17 	ldw	ra,1140(sp)
81113a14:	dc811c17 	ldw	r18,1136(sp)
81113a18:	dc411b17 	ldw	r17,1132(sp)
81113a1c:	dc011a17 	ldw	r16,1128(sp)
81113a20:	dec11e04 	addi	sp,sp,1144
81113a24:	f800283a 	ret
81113a28:	047fffc4 	movi	r17,-1
81113a2c:	003ff106 	br	811139f4 <__reset+0xfb0f39f4>

81113a30 <__svfscanf_r>:
81113a30:	deff4b04 	addi	sp,sp,-724
81113a34:	de00012e 	bgeu	sp,et,81113a3c <__svfscanf_r+0xc>
81113a38:	003b68fa 	trap	3
81113a3c:	2880030b 	ldhu	r2,12(r5)
81113a40:	df00b315 	stw	fp,716(sp)
81113a44:	dd80b115 	stw	r22,708(sp)
81113a48:	dfc0b415 	stw	ra,720(sp)
81113a4c:	ddc0b215 	stw	r23,712(sp)
81113a50:	dd40b015 	stw	r21,704(sp)
81113a54:	dd00af15 	stw	r20,700(sp)
81113a58:	dcc0ae15 	stw	r19,696(sp)
81113a5c:	dc80ad15 	stw	r18,692(sp)
81113a60:	dc40ac15 	stw	r17,688(sp)
81113a64:	dc00ab15 	stw	r16,684(sp)
81113a68:	10c8000c 	andi	r3,r2,8192
81113a6c:	d9c09c15 	stw	r7,624(sp)
81113a70:	2839883a 	mov	fp,r5
81113a74:	202d883a 	mov	r22,r4
81113a78:	1800061e 	bne	r3,zero,81113a94 <__svfscanf_r+0x64>
81113a7c:	29001917 	ldw	r4,100(r5)
81113a80:	00f7ffc4 	movi	r3,-8193
81113a84:	10880014 	ori	r2,r2,8192
81113a88:	20c6703a 	and	r3,r4,r3
81113a8c:	2880030d 	sth	r2,12(r5)
81113a90:	28c01915 	stw	r3,100(r5)
81113a94:	30800003 	ldbu	r2,0(r6)
81113a98:	0021883a 	mov	r16,zero
81113a9c:	05e04534 	movhi	r23,33044
81113aa0:	d800a115 	stw	zero,644(sp)
81113aa4:	d8009e15 	stw	zero,632(sp)
81113aa8:	d800a015 	stw	zero,640(sp)
81113aac:	d8809b15 	stw	r2,620(sp)
81113ab0:	bdf3e204 	addi	r23,r23,-12408
81113ab4:	8025883a 	mov	r18,r16
81113ab8:	35000044 	addi	r20,r6,1
81113abc:	10001e26 	beq	r2,zero,81113b38 <__svfscanf_r+0x108>
81113ac0:	b9c00017 	ldw	r7,0(r23)
81113ac4:	3887883a 	add	r3,r7,r2
81113ac8:	18c00043 	ldbu	r3,1(r3)
81113acc:	18c0020c 	andi	r3,r3,8
81113ad0:	18001b26 	beq	r3,zero,81113b40 <__svfscanf_r+0x110>
81113ad4:	e0800117 	ldw	r2,4(fp)
81113ad8:	00800e0e 	bge	zero,r2,81113b14 <__svfscanf_r+0xe4>
81113adc:	e0c00017 	ldw	r3,0(fp)
81113ae0:	b9000017 	ldw	r4,0(r23)
81113ae4:	18800003 	ldbu	r2,0(r3)
81113ae8:	2085883a 	add	r2,r4,r2
81113aec:	10800043 	ldbu	r2,1(r2)
81113af0:	1080020c 	andi	r2,r2,8
81113af4:	10000b26 	beq	r2,zero,81113b24 <__svfscanf_r+0xf4>
81113af8:	e0800117 	ldw	r2,4(fp)
81113afc:	18c00044 	addi	r3,r3,1
81113b00:	e0c00015 	stw	r3,0(fp)
81113b04:	10bfffc4 	addi	r2,r2,-1
81113b08:	e0800115 	stw	r2,4(fp)
81113b0c:	94800044 	addi	r18,r18,1
81113b10:	00bff216 	blt	zero,r2,81113adc <__reset+0xfb0f3adc>
81113b14:	e00b883a 	mov	r5,fp
81113b18:	b009883a 	mov	r4,r22
81113b1c:	110ed540 	call	8110ed54 <__srefill_r>
81113b20:	103fee26 	beq	r2,zero,81113adc <__reset+0xfb0f3adc>
81113b24:	a00d883a 	mov	r6,r20
81113b28:	30800003 	ldbu	r2,0(r6)
81113b2c:	35000044 	addi	r20,r6,1
81113b30:	d8809b15 	stw	r2,620(sp)
81113b34:	103fe21e 	bne	r2,zero,81113ac0 <__reset+0xfb0f3ac0>
81113b38:	d880a017 	ldw	r2,640(sp)
81113b3c:	00009906 	br	81113da4 <__svfscanf_r+0x374>
81113b40:	00c00944 	movi	r3,37
81113b44:	10c0881e 	bne	r2,r3,81113d68 <__svfscanf_r+0x338>
81113b48:	30c00043 	ldbu	r3,1(r6)
81113b4c:	0023883a 	mov	r17,zero
81113b50:	0027883a 	mov	r19,zero
81113b54:	01001e04 	movi	r4,120
81113b58:	01401b04 	movi	r5,108
81113b5c:	a1800044 	addi	r6,r20,1
81113b60:	20c0a236 	bltu	r4,r3,81113dec <__svfscanf_r+0x3bc>
81113b64:	180490ba 	slli	r2,r3,2
81113b68:	02204474 	movhi	r8,33041
81113b6c:	420edf04 	addi	r8,r8,15228
81113b70:	1205883a 	add	r2,r2,r8
81113b74:	10800017 	ldw	r2,0(r2)
81113b78:	1000683a 	jmp	r2
81113b7c:	81113da0 	cmpeqi	r4,r16,17654
81113b80:	81113dec 	andhi	r4,r16,17655
81113b84:	81113dec 	andhi	r4,r16,17655
81113b88:	81113dec 	andhi	r4,r16,17655
81113b8c:	81113dec 	andhi	r4,r16,17655
81113b90:	81113dec 	andhi	r4,r16,17655
81113b94:	81113dec 	andhi	r4,r16,17655
81113b98:	81113dec 	andhi	r4,r16,17655
81113b9c:	81113dec 	andhi	r4,r16,17655
81113ba0:	81113dec 	andhi	r4,r16,17655
81113ba4:	81113dec 	andhi	r4,r16,17655
81113ba8:	81113dec 	andhi	r4,r16,17655
81113bac:	81113dec 	andhi	r4,r16,17655
81113bb0:	81113dec 	andhi	r4,r16,17655
81113bb4:	81113dec 	andhi	r4,r16,17655
81113bb8:	81113dec 	andhi	r4,r16,17655
81113bbc:	81113dec 	andhi	r4,r16,17655
81113bc0:	81113dec 	andhi	r4,r16,17655
81113bc4:	81113dec 	andhi	r4,r16,17655
81113bc8:	81113dec 	andhi	r4,r16,17655
81113bcc:	81113dec 	andhi	r4,r16,17655
81113bd0:	81113dec 	andhi	r4,r16,17655
81113bd4:	81113dec 	andhi	r4,r16,17655
81113bd8:	81113dec 	andhi	r4,r16,17655
81113bdc:	81113dec 	andhi	r4,r16,17655
81113be0:	81113dec 	andhi	r4,r16,17655
81113be4:	81113dec 	andhi	r4,r16,17655
81113be8:	81113dec 	andhi	r4,r16,17655
81113bec:	81113dec 	andhi	r4,r16,17655
81113bf0:	81113dec 	andhi	r4,r16,17655
81113bf4:	81113dec 	andhi	r4,r16,17655
81113bf8:	81113dec 	andhi	r4,r16,17655
81113bfc:	81113dec 	andhi	r4,r16,17655
81113c00:	81113dec 	andhi	r4,r16,17655
81113c04:	81113dec 	andhi	r4,r16,17655
81113c08:	81113dec 	andhi	r4,r16,17655
81113c0c:	81113dec 	andhi	r4,r16,17655
81113c10:	81113d60 	cmpeqi	r4,r16,17653
81113c14:	81113dec 	andhi	r4,r16,17655
81113c18:	81113dec 	andhi	r4,r16,17655
81113c1c:	81113dec 	andhi	r4,r16,17655
81113c20:	81113dec 	andhi	r4,r16,17655
81113c24:	81113dd4 	ori	r4,r16,17655
81113c28:	81113dec 	andhi	r4,r16,17655
81113c2c:	81113dec 	andhi	r4,r16,17655
81113c30:	81113dec 	andhi	r4,r16,17655
81113c34:	81113dec 	andhi	r4,r16,17655
81113c38:	81113dec 	andhi	r4,r16,17655
81113c3c:	81113f08 	cmpgei	r4,r16,17660
81113c40:	81113f08 	cmpgei	r4,r16,17660
81113c44:	81113f08 	cmpgei	r4,r16,17660
81113c48:	81113f08 	cmpgei	r4,r16,17660
81113c4c:	81113f08 	cmpgei	r4,r16,17660
81113c50:	81113f08 	cmpgei	r4,r16,17660
81113c54:	81113f08 	cmpgei	r4,r16,17660
81113c58:	81113f08 	cmpgei	r4,r16,17660
81113c5c:	81113f08 	cmpgei	r4,r16,17660
81113c60:	81113f08 	cmpgei	r4,r16,17660
81113c64:	81113dec 	andhi	r4,r16,17655
81113c68:	81113dec 	andhi	r4,r16,17655
81113c6c:	81113dec 	andhi	r4,r16,17655
81113c70:	81113dec 	andhi	r4,r16,17655
81113c74:	81113dec 	andhi	r4,r16,17655
81113c78:	81113dec 	andhi	r4,r16,17655
81113c7c:	81113dec 	andhi	r4,r16,17655
81113c80:	81113dec 	andhi	r4,r16,17655
81113c84:	81113dec 	andhi	r4,r16,17655
81113c88:	81113dec 	andhi	r4,r16,17655
81113c8c:	81113edc 	xori	r4,r16,17659
81113c90:	81113f8c 	andi	r4,r16,17662
81113c94:	81113dec 	andhi	r4,r16,17655
81113c98:	81113f8c 	andi	r4,r16,17662
81113c9c:	81113dec 	andhi	r4,r16,17655
81113ca0:	81113dec 	andhi	r4,r16,17655
81113ca4:	81113dec 	andhi	r4,r16,17655
81113ca8:	81113dec 	andhi	r4,r16,17655
81113cac:	81113f78 	rdprs	r4,r16,17661
81113cb0:	81113dec 	andhi	r4,r16,17655
81113cb4:	81113dec 	andhi	r4,r16,17655
81113cb8:	81113f4c 	andi	r4,r16,17661
81113cbc:	81113dec 	andhi	r4,r16,17655
81113cc0:	81113dec 	andhi	r4,r16,17655
81113cc4:	81113dec 	andhi	r4,r16,17655
81113cc8:	81113dec 	andhi	r4,r16,17655
81113ccc:	81113dec 	andhi	r4,r16,17655
81113cd0:	81113dec 	andhi	r4,r16,17655
81113cd4:	81113dec 	andhi	r4,r16,17655
81113cd8:	81113dec 	andhi	r4,r16,17655
81113cdc:	81113f24 	muli	r4,r16,17660
81113ce0:	81113dec 	andhi	r4,r16,17655
81113ce4:	81113dec 	andhi	r4,r16,17655
81113ce8:	811140c0 	call	8811140c <__reset+0x20f140c>
81113cec:	81113dec 	andhi	r4,r16,17655
81113cf0:	81113dec 	andhi	r4,r16,17655
81113cf4:	81113dec 	andhi	r4,r16,17655
81113cf8:	81113dec 	andhi	r4,r16,17655
81113cfc:	81113dec 	andhi	r4,r16,17655
81113d00:	81113dec 	andhi	r4,r16,17655
81113d04:	81113dec 	andhi	r4,r16,17655
81113d08:	81114044 	addi	r4,r16,17665
81113d0c:	8111401c 	xori	r4,r16,17664
81113d10:	81113f8c 	andi	r4,r16,17662
81113d14:	81113f8c 	andi	r4,r16,17662
81113d18:	81113f8c 	andi	r4,r16,17662
81113d1c:	81114008 	cmpgei	r4,r16,17664
81113d20:	8111414c 	andi	r4,r16,17669
81113d24:	81113dec 	andhi	r4,r16,17655
81113d28:	81113dec 	andhi	r4,r16,17655
81113d2c:	81113ff4 	orhi	r4,r16,17663
81113d30:	81113dec 	andhi	r4,r16,17655
81113d34:	81113fc4 	addi	r4,r16,17663
81113d38:	81113fa0 	cmpeqi	r4,r16,17662
81113d3c:	81113eb0 	cmpltui	r4,r16,17658
81113d40:	81113dec 	andhi	r4,r16,17655
81113d44:	81113dec 	andhi	r4,r16,17655
81113d48:	81113e9c 	xori	r4,r16,17658
81113d4c:	81113dec 	andhi	r4,r16,17655
81113d50:	81113e24 	muli	r4,r16,17656
81113d54:	81113dec 	andhi	r4,r16,17655
81113d58:	81113dec 	andhi	r4,r16,17655
81113d5c:	81113f24 	muli	r4,r16,17660
81113d60:	d9809d15 	stw	r6,628(sp)
81113d64:	3029883a 	mov	r20,r6
81113d68:	e0800117 	ldw	r2,4(fp)
81113d6c:	0081aa0e 	bge	zero,r2,81114418 <__svfscanf_r+0x9e8>
81113d70:	e0800017 	ldw	r2,0(fp)
81113d74:	a0ffffc3 	ldbu	r3,-1(r20)
81113d78:	11000003 	ldbu	r4,0(r2)
81113d7c:	20ff6e1e 	bne	r4,r3,81113b38 <__reset+0xfb0f3b38>
81113d80:	e0c00117 	ldw	r3,4(fp)
81113d84:	10800044 	addi	r2,r2,1
81113d88:	e0800015 	stw	r2,0(fp)
81113d8c:	18bfffc4 	addi	r2,r3,-1
81113d90:	e0800115 	stw	r2,4(fp)
81113d94:	94800044 	addi	r18,r18,1
81113d98:	a00d883a 	mov	r6,r20
81113d9c:	003f6206 	br	81113b28 <__reset+0xfb0f3b28>
81113da0:	00bfffc4 	movi	r2,-1
81113da4:	dfc0b417 	ldw	ra,720(sp)
81113da8:	df00b317 	ldw	fp,716(sp)
81113dac:	ddc0b217 	ldw	r23,712(sp)
81113db0:	dd80b117 	ldw	r22,708(sp)
81113db4:	dd40b017 	ldw	r21,704(sp)
81113db8:	dd00af17 	ldw	r20,700(sp)
81113dbc:	dcc0ae17 	ldw	r19,696(sp)
81113dc0:	dc80ad17 	ldw	r18,692(sp)
81113dc4:	dc40ac17 	ldw	r17,688(sp)
81113dc8:	dc00ab17 	ldw	r16,684(sp)
81113dcc:	dec0b504 	addi	sp,sp,724
81113dd0:	f800283a 	ret
81113dd4:	a0800043 	ldbu	r2,1(r20)
81113dd8:	3029883a 	mov	r20,r6
81113ddc:	8c400414 	ori	r17,r17,16
81113de0:	10c03fcc 	andi	r3,r2,255
81113de4:	a1800044 	addi	r6,r20,1
81113de8:	20ff5e2e 	bgeu	r4,r3,81113b64 <__reset+0xfb0f3b64>
81113dec:	38c7883a 	add	r3,r7,r3
81113df0:	18800043 	ldbu	r2,1(r3)
81113df4:	d9809d15 	stw	r6,628(sp)
81113df8:	00c00044 	movi	r3,1
81113dfc:	108000cc 	andi	r2,r2,3
81113e00:	10c18f26 	beq	r2,r3,81114440 <__svfscanf_r+0xa10>
81113e04:	e0800117 	ldw	r2,4(fp)
81113e08:	00808716 	blt	zero,r2,81114028 <__svfscanf_r+0x5f8>
81113e0c:	e00b883a 	mov	r5,fp
81113e10:	b009883a 	mov	r4,r22
81113e14:	110ed540 	call	8110ed54 <__srefill_r>
81113e18:	1001431e 	bne	r2,zero,81114328 <__svfscanf_r+0x8f8>
81113e1c:	b9c00017 	ldw	r7,0(r23)
81113e20:	00008106 	br	81114028 <__svfscanf_r+0x5f8>
81113e24:	e0800117 	ldw	r2,4(fp)
81113e28:	d9809d15 	stw	r6,628(sp)
81113e2c:	0081a30e 	bge	zero,r2,811144bc <__svfscanf_r+0xa8c>
81113e30:	00a044b4 	movhi	r2,33042
81113e34:	10af1604 	addi	r2,r2,-17320
81113e38:	02000284 	movi	r8,10
81113e3c:	d880a115 	stw	r2,644(sp)
81113e40:	da009e15 	stw	r8,632(sp)
81113e44:	050000c4 	movi	r20,3
81113e48:	e0c00017 	ldw	r3,0(fp)
81113e4c:	00000206 	br	81113e58 <__svfscanf_r+0x428>
81113e50:	18c00044 	addi	r3,r3,1
81113e54:	e0c00015 	stw	r3,0(fp)
81113e58:	19000003 	ldbu	r4,0(r3)
81113e5c:	20803fcc 	andi	r2,r4,255
81113e60:	3885883a 	add	r2,r7,r2
81113e64:	10800043 	ldbu	r2,1(r2)
81113e68:	1140020c 	andi	r5,r2,8
81113e6c:	2801ab26 	beq	r5,zero,8111451c <__svfscanf_r+0xaec>
81113e70:	e0800117 	ldw	r2,4(fp)
81113e74:	94800044 	addi	r18,r18,1
81113e78:	10bfffc4 	addi	r2,r2,-1
81113e7c:	e0800115 	stw	r2,4(fp)
81113e80:	00bff316 	blt	zero,r2,81113e50 <__reset+0xfb0f3e50>
81113e84:	e00b883a 	mov	r5,fp
81113e88:	b009883a 	mov	r4,r22
81113e8c:	110ed540 	call	8110ed54 <__srefill_r>
81113e90:	1001251e 	bne	r2,zero,81114328 <__svfscanf_r+0x8f8>
81113e94:	b9c00017 	ldw	r7,0(r23)
81113e98:	003feb06 	br	81113e48 <__reset+0xfb0f3e48>
81113e9c:	e0800117 	ldw	r2,4(fp)
81113ea0:	d9809d15 	stw	r6,628(sp)
81113ea4:	00818b0e 	bge	zero,r2,811144d4 <__svfscanf_r+0xaa4>
81113ea8:	05000084 	movi	r20,2
81113eac:	003fe606 	br	81113e48 <__reset+0xfb0f3e48>
81113eb0:	e0800117 	ldw	r2,4(fp)
81113eb4:	d9809d15 	stw	r6,628(sp)
81113eb8:	8c408814 	ori	r17,r17,544
81113ebc:	00801d0e 	bge	zero,r2,81113f34 <__svfscanf_r+0x504>
81113ec0:	00a044b4 	movhi	r2,33042
81113ec4:	10af1604 	addi	r2,r2,-17320
81113ec8:	02000404 	movi	r8,16
81113ecc:	d880a115 	stw	r2,644(sp)
81113ed0:	da009e15 	stw	r8,632(sp)
81113ed4:	050000c4 	movi	r20,3
81113ed8:	003fdb06 	br	81113e48 <__reset+0xfb0f3e48>
81113edc:	e0800117 	ldw	r2,4(fp)
81113ee0:	d9809d15 	stw	r6,628(sp)
81113ee4:	8c400054 	ori	r17,r17,1
81113ee8:	00bfc80e 	bge	zero,r2,81113e0c <__reset+0xfb0f3e0c>
81113eec:	00e04474 	movhi	r3,33041
81113ef0:	18fcc504 	addi	r3,r3,-3308
81113ef4:	02000284 	movi	r8,10
81113ef8:	d8c0a115 	stw	r3,644(sp)
81113efc:	da009e15 	stw	r8,632(sp)
81113f00:	050000c4 	movi	r20,3
81113f04:	003fd006 	br	81113e48 <__reset+0xfb0f3e48>
81113f08:	9cc002a4 	muli	r19,r19,10
81113f0c:	a0800043 	ldbu	r2,1(r20)
81113f10:	3029883a 	mov	r20,r6
81113f14:	98e7883a 	add	r19,r19,r3
81113f18:	9cfff404 	addi	r19,r19,-48
81113f1c:	10c03fcc 	andi	r3,r2,255
81113f20:	003f0e06 	br	81113b5c <__reset+0xfb0f3b5c>
81113f24:	e0800117 	ldw	r2,4(fp)
81113f28:	d9809d15 	stw	r6,628(sp)
81113f2c:	8c408014 	ori	r17,r17,512
81113f30:	00bfe316 	blt	zero,r2,81113ec0 <__reset+0xfb0f3ec0>
81113f34:	e00b883a 	mov	r5,fp
81113f38:	b009883a 	mov	r4,r22
81113f3c:	110ed540 	call	8110ed54 <__srefill_r>
81113f40:	1000f91e 	bne	r2,zero,81114328 <__svfscanf_r+0x8f8>
81113f44:	b9c00017 	ldw	r7,0(r23)
81113f48:	003fdd06 	br	81113ec0 <__reset+0xfb0f3ec0>
81113f4c:	e0800117 	ldw	r2,4(fp)
81113f50:	d9809d15 	stw	r6,628(sp)
81113f54:	8c400054 	ori	r17,r17,1
81113f58:	0080140e 	bge	zero,r2,81113fac <__svfscanf_r+0x57c>
81113f5c:	00a044b4 	movhi	r2,33042
81113f60:	10af1604 	addi	r2,r2,-17320
81113f64:	02000204 	movi	r8,8
81113f68:	d880a115 	stw	r2,644(sp)
81113f6c:	da009e15 	stw	r8,632(sp)
81113f70:	050000c4 	movi	r20,3
81113f74:	003fb406 	br	81113e48 <__reset+0xfb0f3e48>
81113f78:	a0800043 	ldbu	r2,1(r20)
81113f7c:	8c400094 	ori	r17,r17,2
81113f80:	3029883a 	mov	r20,r6
81113f84:	10c03fcc 	andi	r3,r2,255
81113f88:	003ef406 	br	81113b5c <__reset+0xfb0f3b5c>
81113f8c:	e0800117 	ldw	r2,4(fp)
81113f90:	d9809d15 	stw	r6,628(sp)
81113f94:	0081420e 	bge	zero,r2,811144a0 <__svfscanf_r+0xa70>
81113f98:	05000104 	movi	r20,4
81113f9c:	003faa06 	br	81113e48 <__reset+0xfb0f3e48>
81113fa0:	e0800117 	ldw	r2,4(fp)
81113fa4:	d9809d15 	stw	r6,628(sp)
81113fa8:	00bfec16 	blt	zero,r2,81113f5c <__reset+0xfb0f3f5c>
81113fac:	e00b883a 	mov	r5,fp
81113fb0:	b009883a 	mov	r4,r22
81113fb4:	110ed540 	call	8110ed54 <__srefill_r>
81113fb8:	1000db1e 	bne	r2,zero,81114328 <__svfscanf_r+0x8f8>
81113fbc:	b9c00017 	ldw	r7,0(r23)
81113fc0:	003fe606 	br	81113f5c <__reset+0xfb0f3f5c>
81113fc4:	d9809d15 	stw	r6,628(sp)
81113fc8:	8880040c 	andi	r2,r17,16
81113fcc:	10009c1e 	bne	r2,zero,81114240 <__svfscanf_r+0x810>
81113fd0:	8880010c 	andi	r2,r17,4
81113fd4:	10011e26 	beq	r2,zero,81114450 <__svfscanf_r+0xa20>
81113fd8:	da009c17 	ldw	r8,624(sp)
81113fdc:	3029883a 	mov	r20,r6
81113fe0:	40800017 	ldw	r2,0(r8)
81113fe4:	42000104 	addi	r8,r8,4
81113fe8:	da009c15 	stw	r8,624(sp)
81113fec:	1480000d 	sth	r18,0(r2)
81113ff0:	003ecc06 	br	81113b24 <__reset+0xfb0f3b24>
81113ff4:	a0c00043 	ldbu	r3,1(r20)
81113ff8:	19410c26 	beq	r3,r5,8111442c <__svfscanf_r+0x9fc>
81113ffc:	8c400054 	ori	r17,r17,1
81114000:	3029883a 	mov	r20,r6
81114004:	003ed506 	br	81113b5c <__reset+0xfb0f3b5c>
81114008:	a0800043 	ldbu	r2,1(r20)
8111400c:	8c400114 	ori	r17,r17,4
81114010:	3029883a 	mov	r20,r6
81114014:	10c03fcc 	andi	r3,r2,255
81114018:	003ed006 	br	81113b5c <__reset+0xfb0f3b5c>
8111401c:	e0800117 	ldw	r2,4(fp)
81114020:	d9809d15 	stw	r6,628(sp)
81114024:	00bf790e 	bge	zero,r2,81113e0c <__reset+0xfb0f3e0c>
81114028:	00a04474 	movhi	r2,33041
8111402c:	10bcc504 	addi	r2,r2,-3308
81114030:	02000284 	movi	r8,10
81114034:	d880a115 	stw	r2,644(sp)
81114038:	da009e15 	stw	r8,632(sp)
8111403c:	050000c4 	movi	r20,3
81114040:	003f8106 	br	81113e48 <__reset+0xfb0f3e48>
81114044:	e0800117 	ldw	r2,4(fp)
81114048:	d9809d15 	stw	r6,628(sp)
8111404c:	0080c40e 	bge	zero,r2,81114360 <__svfscanf_r+0x930>
81114050:	9800011e 	bne	r19,zero,81114058 <__svfscanf_r+0x628>
81114054:	04c00044 	movi	r19,1
81114058:	8880004c 	andi	r2,r17,1
8111405c:	1000441e 	bne	r2,zero,81114170 <__svfscanf_r+0x740>
81114060:	8c40040c 	andi	r17,r17,16
81114064:	8800da26 	beq	r17,zero,811143d0 <__svfscanf_r+0x9a0>
81114068:	0021883a 	mov	r16,zero
8111406c:	00000806 	br	81114090 <__svfscanf_r+0x660>
81114070:	1887883a 	add	r3,r3,r2
81114074:	e00b883a 	mov	r5,fp
81114078:	b009883a 	mov	r4,r22
8111407c:	e0c00015 	stw	r3,0(fp)
81114080:	80a1883a 	add	r16,r16,r2
81114084:	98a7c83a 	sub	r19,r19,r2
81114088:	110ed540 	call	8110ed54 <__srefill_r>
8111408c:	1000ca1e 	bne	r2,zero,811143b8 <__svfscanf_r+0x988>
81114090:	e0800117 	ldw	r2,4(fp)
81114094:	e0c00017 	ldw	r3,0(fp)
81114098:	14fff516 	blt	r2,r19,81114070 <__reset+0xfb0f4070>
8111409c:	14c5c83a 	sub	r2,r2,r19
811140a0:	1cd5883a 	add	r10,r3,r19
811140a4:	84e1883a 	add	r16,r16,r19
811140a8:	e0800115 	stw	r2,4(fp)
811140ac:	e2800015 	stw	r10,0(fp)
811140b0:	dd009d17 	ldw	r20,628(sp)
811140b4:	9425883a 	add	r18,r18,r16
811140b8:	a00d883a 	mov	r6,r20
811140bc:	003e9a06 	br	81113b28 <__reset+0xfb0f3b28>
811140c0:	300b883a 	mov	r5,r6
811140c4:	d9005884 	addi	r4,sp,354
811140c8:	d9809d15 	stw	r6,628(sp)
811140cc:	111a0300 	call	8111a030 <__sccl>
811140d0:	1029883a 	mov	r20,r2
811140d4:	e0800117 	ldw	r2,4(fp)
811140d8:	0081050e 	bge	zero,r2,811144f0 <__svfscanf_r+0xac0>
811140dc:	e1000017 	ldw	r4,0(fp)
811140e0:	20800003 	ldbu	r2,0(r4)
811140e4:	98005926 	beq	r19,zero,8111424c <__svfscanf_r+0x81c>
811140e8:	8c40040c 	andi	r17,r17,16
811140ec:	88005a26 	beq	r17,zero,81114258 <__svfscanf_r+0x828>
811140f0:	9823883a 	mov	r17,r19
811140f4:	0021883a 	mov	r16,zero
811140f8:	00000106 	br	81114100 <__svfscanf_r+0x6d0>
811140fc:	20800003 	ldbu	r2,0(r4)
81114100:	10803fcc 	andi	r2,r2,255
81114104:	d8c05884 	addi	r3,sp,354
81114108:	1885883a 	add	r2,r3,r2
8111410c:	10800007 	ldb	r2,0(r2)
81114110:	1000ad26 	beq	r2,zero,811143c8 <__svfscanf_r+0x998>
81114114:	e0800117 	ldw	r2,4(fp)
81114118:	21000044 	addi	r4,r4,1
8111411c:	84000044 	addi	r16,r16,1
81114120:	10bfffc4 	addi	r2,r2,-1
81114124:	e0800115 	stw	r2,4(fp)
81114128:	e1000015 	stw	r4,0(fp)
8111412c:	84c0a026 	beq	r16,r19,811143b0 <__svfscanf_r+0x980>
81114130:	00bff216 	blt	zero,r2,811140fc <__reset+0xfb0f40fc>
81114134:	e00b883a 	mov	r5,fp
81114138:	b009883a 	mov	r4,r22
8111413c:	110ed540 	call	8110ed54 <__srefill_r>
81114140:	10009a1e 	bne	r2,zero,811143ac <__svfscanf_r+0x97c>
81114144:	e1000017 	ldw	r4,0(fp)
81114148:	003fec06 	br	811140fc <__reset+0xfb0f40fc>
8111414c:	e0800117 	ldw	r2,4(fp)
81114150:	d9809d15 	stw	r6,628(sp)
81114154:	0080eb0e 	bge	zero,r2,81114504 <__svfscanf_r+0xad4>
81114158:	00a04474 	movhi	r2,33041
8111415c:	10bcc504 	addi	r2,r2,-3308
81114160:	d880a115 	stw	r2,644(sp)
81114164:	d8009e15 	stw	zero,632(sp)
81114168:	050000c4 	movi	r20,3
8111416c:	003f3606 	br	81113e48 <__reset+0xfb0f3e48>
81114170:	dd409904 	addi	r21,sp,612
81114174:	8c40040c 	andi	r17,r17,16
81114178:	01800204 	movi	r6,8
8111417c:	000b883a 	mov	r5,zero
81114180:	a809883a 	mov	r4,r21
81114184:	dc409f15 	stw	r17,636(sp)
81114188:	110ea300 	call	8110ea30 <memset>
8111418c:	dc409f17 	ldw	r17,636(sp)
81114190:	88006e26 	beq	r17,zero,8111434c <__svfscanf_r+0x91c>
81114194:	0029883a 	mov	r20,zero
81114198:	0023883a 	mov	r17,zero
8111419c:	11182d40 	call	811182d4 <__locale_mb_cur_max>
811141a0:	14406126 	beq	r2,r17,81114328 <__svfscanf_r+0x8f8>
811141a4:	e0800017 	ldw	r2,0(fp)
811141a8:	e0c00117 	ldw	r3,4(fp)
811141ac:	d9000104 	addi	r4,sp,4
811141b0:	12000003 	ldbu	r8,0(r2)
811141b4:	18ffffc4 	addi	r3,r3,-1
811141b8:	10800044 	addi	r2,r2,1
811141bc:	e0c00115 	stw	r3,4(fp)
811141c0:	e0800015 	stw	r2,0(fp)
811141c4:	8c000044 	addi	r16,r17,1
811141c8:	dd400015 	stw	r21,0(sp)
811141cc:	2463883a 	add	r17,r4,r17
811141d0:	200d883a 	mov	r6,r4
811141d4:	a00b883a 	mov	r5,r20
811141d8:	800f883a 	mov	r7,r16
811141dc:	b009883a 	mov	r4,r22
811141e0:	8a000005 	stb	r8,0(r17)
811141e4:	11183900 	call	81118390 <_mbrtowc_r>
811141e8:	017fffc4 	movi	r5,-1
811141ec:	11404e26 	beq	r2,r5,81114328 <__svfscanf_r+0x8f8>
811141f0:	1000601e 	bne	r2,zero,81114374 <__svfscanf_r+0x944>
811141f4:	da009f17 	ldw	r8,636(sp)
811141f8:	4000641e 	bne	r8,zero,8111438c <__svfscanf_r+0x95c>
811141fc:	a0000015 	stw	zero,0(r20)
81114200:	9425883a 	add	r18,r18,r16
81114204:	9967883a 	add	r19,r19,r5
81114208:	a5000104 	addi	r20,r20,4
8111420c:	e0800117 	ldw	r2,4(fp)
81114210:	0023883a 	mov	r17,zero
81114214:	00804b16 	blt	zero,r2,81114344 <__svfscanf_r+0x914>
81114218:	e00b883a 	mov	r5,fp
8111421c:	b009883a 	mov	r4,r22
81114220:	110ed540 	call	8110ed54 <__srefill_r>
81114224:	10004726 	beq	r2,zero,81114344 <__svfscanf_r+0x914>
81114228:	88003f1e 	bne	r17,zero,81114328 <__svfscanf_r+0x8f8>
8111422c:	d8c09f17 	ldw	r3,636(sp)
81114230:	1800031e 	bne	r3,zero,81114240 <__svfscanf_r+0x810>
81114234:	da00a017 	ldw	r8,640(sp)
81114238:	42000044 	addi	r8,r8,1
8111423c:	da00a015 	stw	r8,640(sp)
81114240:	dd009d17 	ldw	r20,628(sp)
81114244:	a00d883a 	mov	r6,r20
81114248:	003e3706 	br	81113b28 <__reset+0xfb0f3b28>
8111424c:	8c40040c 	andi	r17,r17,16
81114250:	04ffffc4 	movi	r19,-1
81114254:	883fa61e 	bne	r17,zero,811140f0 <__reset+0xfb0f40f0>
81114258:	da009c17 	ldw	r8,624(sp)
8111425c:	9abfffc4 	addi	r10,r19,-1
81114260:	44000017 	ldw	r16,0(r8)
81114264:	44400104 	addi	r17,r8,4
81114268:	8007883a 	mov	r3,r16
8111426c:	82ab883a 	add	r21,r16,r10
81114270:	00000306 	br	81114280 <__svfscanf_r+0x850>
81114274:	e1000017 	ldw	r4,0(fp)
81114278:	9807883a 	mov	r3,r19
8111427c:	20800003 	ldbu	r2,0(r4)
81114280:	10803fcc 	andi	r2,r2,255
81114284:	d9405884 	addi	r5,sp,354
81114288:	2885883a 	add	r2,r5,r2
8111428c:	10800007 	ldb	r2,0(r2)
81114290:	10004b26 	beq	r2,zero,811143c0 <__svfscanf_r+0x990>
81114294:	e0800117 	ldw	r2,4(fp)
81114298:	21400044 	addi	r5,r4,1
8111429c:	e1400015 	stw	r5,0(fp)
811142a0:	10bfffc4 	addi	r2,r2,-1
811142a4:	e0800115 	stw	r2,4(fp)
811142a8:	20800003 	ldbu	r2,0(r4)
811142ac:	1cc00044 	addi	r19,r3,1
811142b0:	18800005 	stb	r2,0(r3)
811142b4:	1d400726 	beq	r3,r21,811142d4 <__svfscanf_r+0x8a4>
811142b8:	e0800117 	ldw	r2,4(fp)
811142bc:	00bfed16 	blt	zero,r2,81114274 <__reset+0xfb0f4274>
811142c0:	e00b883a 	mov	r5,fp
811142c4:	b009883a 	mov	r4,r22
811142c8:	110ed540 	call	8110ed54 <__srefill_r>
811142cc:	103fe926 	beq	r2,zero,81114274 <__reset+0xfb0f4274>
811142d0:	84c01526 	beq	r16,r19,81114328 <__svfscanf_r+0x8f8>
811142d4:	9c21c83a 	sub	r16,r19,r16
811142d8:	803e1726 	beq	r16,zero,81113b38 <__reset+0xfb0f3b38>
811142dc:	da00a017 	ldw	r8,640(sp)
811142e0:	98000005 	stb	zero,0(r19)
811142e4:	dc409c15 	stw	r17,624(sp)
811142e8:	42000044 	addi	r8,r8,1
811142ec:	da00a015 	stw	r8,640(sp)
811142f0:	9425883a 	add	r18,r18,r16
811142f4:	a00d883a 	mov	r6,r20
811142f8:	003e0b06 	br	81113b28 <__reset+0xfb0f3b28>
811142fc:	017fff84 	movi	r5,-2
81114300:	11439b1e 	bne	r2,r5,81115170 <__svfscanf_r+0x1740>
81114304:	8821883a 	mov	r16,r17
81114308:	e0800117 	ldw	r2,4(fp)
8111430c:	0082e516 	blt	zero,r2,81114ea4 <__svfscanf_r+0x1474>
81114310:	e00b883a 	mov	r5,fp
81114314:	b009883a 	mov	r4,r22
81114318:	110ed540 	call	8110ed54 <__srefill_r>
8111431c:	1002e126 	beq	r2,zero,81114ea4 <__svfscanf_r+0x1474>
81114320:	dc409f17 	ldw	r17,636(sp)
81114324:	8002e826 	beq	r16,zero,81114ec8 <__svfscanf_r+0x1498>
81114328:	da00a017 	ldw	r8,640(sp)
8111432c:	403e9c26 	beq	r8,zero,81113da0 <__reset+0xfb0f3da0>
81114330:	e080030b 	ldhu	r2,12(fp)
81114334:	1080100c 	andi	r2,r2,64
81114338:	103e991e 	bne	r2,zero,81113da0 <__reset+0xfb0f3da0>
8111433c:	4005883a 	mov	r2,r8
81114340:	003e9806 	br	81113da4 <__reset+0xfb0f3da4>
81114344:	983f951e 	bne	r19,zero,8111419c <__reset+0xfb0f419c>
81114348:	003fb806 	br	8111422c <__reset+0xfb0f422c>
8111434c:	da009c17 	ldw	r8,624(sp)
81114350:	45000017 	ldw	r20,0(r8)
81114354:	42000104 	addi	r8,r8,4
81114358:	da009c15 	stw	r8,624(sp)
8111435c:	003f8e06 	br	81114198 <__reset+0xfb0f4198>
81114360:	e00b883a 	mov	r5,fp
81114364:	b009883a 	mov	r4,r22
81114368:	110ed540 	call	8110ed54 <__srefill_r>
8111436c:	103f3826 	beq	r2,zero,81114050 <__reset+0xfb0f4050>
81114370:	003fed06 	br	81114328 <__reset+0xfb0f4328>
81114374:	00ffff84 	movi	r3,-2
81114378:	10c0071e 	bne	r2,r3,81114398 <__svfscanf_r+0x968>
8111437c:	e0800117 	ldw	r2,4(fp)
81114380:	8023883a 	mov	r17,r16
81114384:	00bf8516 	blt	zero,r2,8111419c <__reset+0xfb0f419c>
81114388:	003fa306 	br	81114218 <__reset+0xfb0f4218>
8111438c:	9425883a 	add	r18,r18,r16
81114390:	9cffffc4 	addi	r19,r19,-1
81114394:	003f9d06 	br	8111420c <__reset+0xfb0f420c>
81114398:	da009f17 	ldw	r8,636(sp)
8111439c:	9425883a 	add	r18,r18,r16
811143a0:	9cffffc4 	addi	r19,r19,-1
811143a4:	403f9826 	beq	r8,zero,81114208 <__reset+0xfb0f4208>
811143a8:	003f9806 	br	8111420c <__reset+0xfb0f420c>
811143ac:	8023883a 	mov	r17,r16
811143b0:	8821883a 	mov	r16,r17
811143b4:	003fce06 	br	811142f0 <__reset+0xfb0f42f0>
811143b8:	803f3d1e 	bne	r16,zero,811140b0 <__reset+0xfb0f40b0>
811143bc:	003fda06 	br	81114328 <__reset+0xfb0f4328>
811143c0:	1827883a 	mov	r19,r3
811143c4:	003fc306 	br	811142d4 <__reset+0xfb0f42d4>
811143c8:	803fc91e 	bne	r16,zero,811142f0 <__reset+0xfb0f42f0>
811143cc:	003dda06 	br	81113b38 <__reset+0xfb0f3b38>
811143d0:	da009c17 	ldw	r8,624(sp)
811143d4:	df000015 	stw	fp,0(sp)
811143d8:	980f883a 	mov	r7,r19
811143dc:	41400017 	ldw	r5,0(r8)
811143e0:	01800044 	movi	r6,1
811143e4:	b009883a 	mov	r4,r22
811143e8:	11174a80 	call	811174a8 <_fread_r>
811143ec:	da009c17 	ldw	r8,624(sp)
811143f0:	40c00104 	addi	r3,r8,4
811143f4:	103fcc26 	beq	r2,zero,81114328 <__reset+0xfb0f4328>
811143f8:	da00a017 	ldw	r8,640(sp)
811143fc:	dd009d17 	ldw	r20,628(sp)
81114400:	90a5883a 	add	r18,r18,r2
81114404:	42000044 	addi	r8,r8,1
81114408:	da00a015 	stw	r8,640(sp)
8111440c:	d8c09c15 	stw	r3,624(sp)
81114410:	a00d883a 	mov	r6,r20
81114414:	003dc406 	br	81113b28 <__reset+0xfb0f3b28>
81114418:	e00b883a 	mov	r5,fp
8111441c:	b009883a 	mov	r4,r22
81114420:	110ed540 	call	8110ed54 <__srefill_r>
81114424:	103e5226 	beq	r2,zero,81113d70 <__reset+0xfb0f3d70>
81114428:	003fbf06 	br	81114328 <__reset+0xfb0f4328>
8111442c:	a0800083 	ldbu	r2,2(r20)
81114430:	8c400094 	ori	r17,r17,2
81114434:	a5000084 	addi	r20,r20,2
81114438:	10c03fcc 	andi	r3,r2,255
8111443c:	003dc706 	br	81113b5c <__reset+0xfb0f3b5c>
81114440:	e0800117 	ldw	r2,4(fp)
81114444:	88e2b03a 	or	r17,r17,r3
81114448:	00bef716 	blt	zero,r2,81114028 <__reset+0xfb0f4028>
8111444c:	003e6f06 	br	81113e0c <__reset+0xfb0f3e0c>
81114450:	8880004c 	andi	r2,r17,1
81114454:	10000b1e 	bne	r2,zero,81114484 <__svfscanf_r+0xa54>
81114458:	8c40008c 	andi	r17,r17,2
8111445c:	88000926 	beq	r17,zero,81114484 <__svfscanf_r+0xa54>
81114460:	da009c17 	ldw	r8,624(sp)
81114464:	9007d7fa 	srai	r3,r18,31
81114468:	dd009d17 	ldw	r20,628(sp)
8111446c:	40800017 	ldw	r2,0(r8)
81114470:	42000104 	addi	r8,r8,4
81114474:	da009c15 	stw	r8,624(sp)
81114478:	14800015 	stw	r18,0(r2)
8111447c:	10c00115 	stw	r3,4(r2)
81114480:	003da806 	br	81113b24 <__reset+0xfb0f3b24>
81114484:	da009c17 	ldw	r8,624(sp)
81114488:	dd009d17 	ldw	r20,628(sp)
8111448c:	40800017 	ldw	r2,0(r8)
81114490:	42000104 	addi	r8,r8,4
81114494:	da009c15 	stw	r8,624(sp)
81114498:	14800015 	stw	r18,0(r2)
8111449c:	003da106 	br	81113b24 <__reset+0xfb0f3b24>
811144a0:	e00b883a 	mov	r5,fp
811144a4:	b009883a 	mov	r4,r22
811144a8:	110ed540 	call	8110ed54 <__srefill_r>
811144ac:	103f9e1e 	bne	r2,zero,81114328 <__reset+0xfb0f4328>
811144b0:	b9c00017 	ldw	r7,0(r23)
811144b4:	05000104 	movi	r20,4
811144b8:	003e6306 	br	81113e48 <__reset+0xfb0f3e48>
811144bc:	e00b883a 	mov	r5,fp
811144c0:	b009883a 	mov	r4,r22
811144c4:	110ed540 	call	8110ed54 <__srefill_r>
811144c8:	103f971e 	bne	r2,zero,81114328 <__reset+0xfb0f4328>
811144cc:	b9c00017 	ldw	r7,0(r23)
811144d0:	003e5706 	br	81113e30 <__reset+0xfb0f3e30>
811144d4:	e00b883a 	mov	r5,fp
811144d8:	b009883a 	mov	r4,r22
811144dc:	110ed540 	call	8110ed54 <__srefill_r>
811144e0:	103f911e 	bne	r2,zero,81114328 <__reset+0xfb0f4328>
811144e4:	b9c00017 	ldw	r7,0(r23)
811144e8:	05000084 	movi	r20,2
811144ec:	003e5606 	br	81113e48 <__reset+0xfb0f3e48>
811144f0:	e00b883a 	mov	r5,fp
811144f4:	b009883a 	mov	r4,r22
811144f8:	110ed540 	call	8110ed54 <__srefill_r>
811144fc:	103ef726 	beq	r2,zero,811140dc <__reset+0xfb0f40dc>
81114500:	003f8906 	br	81114328 <__reset+0xfb0f4328>
81114504:	e00b883a 	mov	r5,fp
81114508:	b009883a 	mov	r4,r22
8111450c:	110ed540 	call	8110ed54 <__srefill_r>
81114510:	103f851e 	bne	r2,zero,81114328 <__reset+0xfb0f4328>
81114514:	b9c00017 	ldw	r7,0(r23)
81114518:	003f0f06 	br	81114158 <__reset+0xfb0f4158>
8111451c:	014000c4 	movi	r5,3
81114520:	a1414a26 	beq	r20,r5,81114a4c <__svfscanf_r+0x101c>
81114524:	01000104 	movi	r4,4
81114528:	a101f11e 	bne	r20,r4,81114cf0 <__svfscanf_r+0x12c0>
8111452c:	b009883a 	mov	r4,r22
81114530:	11182f80 	call	811182f8 <_localeconv_r>
81114534:	10800017 	ldw	r2,0(r2)
81114538:	98ffffc4 	addi	r3,r19,-1
8111453c:	d880a315 	stw	r2,652(sp)
81114540:	00805704 	movi	r2,348
81114544:	10c21e2e 	bgeu	r2,r3,81114dc0 <__svfscanf_r+0x1390>
81114548:	9cffa8c4 	addi	r19,r19,-349
8111454c:	dcc0a215 	stw	r19,648(sp)
81114550:	04c05744 	movi	r19,349
81114554:	8d01e014 	ori	r20,r17,1920
81114558:	0023883a 	mov	r17,zero
8111455c:	dc000104 	addi	r16,sp,4
81114560:	8805883a 	mov	r2,r17
81114564:	0019883a 	mov	r12,zero
81114568:	8023883a 	mov	r17,r16
8111456c:	b007883a 	mov	r3,r22
81114570:	9821883a 	mov	r16,r19
81114574:	002b883a 	mov	r21,zero
81114578:	d800a515 	stw	zero,660(sp)
8111457c:	d800a415 	stw	zero,656(sp)
81114580:	d8009f15 	stw	zero,636(sp)
81114584:	01c01384 	movi	r7,78
81114588:	602d883a 	mov	r22,r12
8111458c:	1027883a 	mov	r19,r2
81114590:	e1000017 	ldw	r4,0(fp)
81114594:	21400003 	ldbu	r5,0(r4)
81114598:	28bff544 	addi	r2,r5,-43
8111459c:	10803fcc 	andi	r2,r2,255
811145a0:	38810e36 	bltu	r7,r2,811149dc <__svfscanf_r+0xfac>
811145a4:	100490ba 	slli	r2,r2,2
811145a8:	01a04474 	movhi	r6,33041
811145ac:	31916f04 	addi	r6,r6,17852
811145b0:	1185883a 	add	r2,r2,r6
811145b4:	10800017 	ldw	r2,0(r2)
811145b8:	1000683a 	jmp	r2
811145bc:	811148b4 	orhi	r4,r16,17698
811145c0:	811149dc 	xori	r4,r16,17703
811145c4:	811148b4 	orhi	r4,r16,17698
811145c8:	811149dc 	xori	r4,r16,17703
811145cc:	811149dc 	xori	r4,r16,17703
811145d0:	81114888 	cmpgei	r4,r16,17698
811145d4:	811146f8 	rdprs	r4,r16,17691
811145d8:	811146f8 	rdprs	r4,r16,17691
811145dc:	811146f8 	rdprs	r4,r16,17691
811145e0:	811146f8 	rdprs	r4,r16,17691
811145e4:	811146f8 	rdprs	r4,r16,17691
811145e8:	811146f8 	rdprs	r4,r16,17691
811145ec:	811146f8 	rdprs	r4,r16,17691
811145f0:	811146f8 	rdprs	r4,r16,17691
811145f4:	811146f8 	rdprs	r4,r16,17691
811145f8:	811149dc 	xori	r4,r16,17703
811145fc:	811149dc 	xori	r4,r16,17703
81114600:	811149dc 	xori	r4,r16,17703
81114604:	811149dc 	xori	r4,r16,17703
81114608:	811149dc 	xori	r4,r16,17703
8111460c:	811149dc 	xori	r4,r16,17703
81114610:	811149dc 	xori	r4,r16,17703
81114614:	811149cc 	andi	r4,r16,17703
81114618:	811149dc 	xori	r4,r16,17703
8111461c:	811149dc 	xori	r4,r16,17703
81114620:	811149dc 	xori	r4,r16,17703
81114624:	81114988 	cmpgei	r4,r16,17702
81114628:	8111496c 	andhi	r4,r16,17701
8111462c:	811149dc 	xori	r4,r16,17703
81114630:	811149dc 	xori	r4,r16,17703
81114634:	81114938 	rdprs	r4,r16,17700
81114638:	811149dc 	xori	r4,r16,17703
8111463c:	811149dc 	xori	r4,r16,17703
81114640:	811149dc 	xori	r4,r16,17703
81114644:	811149dc 	xori	r4,r16,17703
81114648:	81114900 	call	88111490 <__reset+0x20f1490>
8111464c:	811149dc 	xori	r4,r16,17703
81114650:	811149dc 	xori	r4,r16,17703
81114654:	811149dc 	xori	r4,r16,17703
81114658:	811149dc 	xori	r4,r16,17703
8111465c:	811149dc 	xori	r4,r16,17703
81114660:	811148e4 	muli	r4,r16,17699
81114664:	811149dc 	xori	r4,r16,17703
81114668:	811149dc 	xori	r4,r16,17703
8111466c:	811149dc 	xori	r4,r16,17703
81114670:	811149dc 	xori	r4,r16,17703
81114674:	811148c8 	cmpgei	r4,r16,17699
81114678:	811149dc 	xori	r4,r16,17703
8111467c:	811149dc 	xori	r4,r16,17703
81114680:	811149dc 	xori	r4,r16,17703
81114684:	811149dc 	xori	r4,r16,17703
81114688:	811149dc 	xori	r4,r16,17703
8111468c:	811149dc 	xori	r4,r16,17703
81114690:	811149dc 	xori	r4,r16,17703
81114694:	811149cc 	andi	r4,r16,17703
81114698:	811149dc 	xori	r4,r16,17703
8111469c:	811149dc 	xori	r4,r16,17703
811146a0:	811149dc 	xori	r4,r16,17703
811146a4:	81114988 	cmpgei	r4,r16,17702
811146a8:	8111496c 	andhi	r4,r16,17701
811146ac:	811149dc 	xori	r4,r16,17703
811146b0:	811149dc 	xori	r4,r16,17703
811146b4:	81114938 	rdprs	r4,r16,17700
811146b8:	811149dc 	xori	r4,r16,17703
811146bc:	811149dc 	xori	r4,r16,17703
811146c0:	811149dc 	xori	r4,r16,17703
811146c4:	811149dc 	xori	r4,r16,17703
811146c8:	81114900 	call	88111490 <__reset+0x20f1490>
811146cc:	811149dc 	xori	r4,r16,17703
811146d0:	811149dc 	xori	r4,r16,17703
811146d4:	811149dc 	xori	r4,r16,17703
811146d8:	811149dc 	xori	r4,r16,17703
811146dc:	811149dc 	xori	r4,r16,17703
811146e0:	811148e4 	muli	r4,r16,17699
811146e4:	811149dc 	xori	r4,r16,17703
811146e8:	811149dc 	xori	r4,r16,17703
811146ec:	811149dc 	xori	r4,r16,17703
811146f0:	811149dc 	xori	r4,r16,17703
811146f4:	811148c8 	cmpgei	r4,r16,17699
811146f8:	a8803fcc 	andi	r2,r21,255
811146fc:	1080201c 	xori	r2,r2,128
81114700:	10bfe004 	addi	r2,r2,-128
81114704:	b085883a 	add	r2,r22,r2
81114708:	10000d1e 	bne	r2,zero,81114740 <__svfscanf_r+0xd10>
8111470c:	00bf9fc4 	movi	r2,-385
81114710:	a0a8703a 	and	r20,r20,r2
81114714:	89400005 	stb	r5,0(r17)
81114718:	8c400044 	addi	r17,r17,1
8111471c:	e0800117 	ldw	r2,4(fp)
81114720:	843fffc4 	addi	r16,r16,-1
81114724:	94800044 	addi	r18,r18,1
81114728:	10bfffc4 	addi	r2,r2,-1
8111472c:	e0800115 	stw	r2,4(fp)
81114730:	0080b40e 	bge	zero,r2,81114a04 <__svfscanf_r+0xfd4>
81114734:	21000044 	addi	r4,r4,1
81114738:	e1000015 	stw	r4,0(fp)
8111473c:	803f941e 	bne	r16,zero,81114590 <__reset+0xfb0f4590>
81114740:	8821883a 	mov	r16,r17
81114744:	b019883a 	mov	r12,r22
81114748:	9823883a 	mov	r17,r19
8111474c:	182d883a 	mov	r22,r3
81114750:	9801961e 	bne	r19,zero,81114dac <__svfscanf_r+0x137c>
81114754:	633fffc4 	addi	r12,r12,-1
81114758:	00800044 	movi	r2,1
8111475c:	1302882e 	bgeu	r2,r12,81115180 <__svfscanf_r+0x1750>
81114760:	a8803fcc 	andi	r2,r21,255
81114764:	1080201c 	xori	r2,r2,128
81114768:	10bfe004 	addi	r2,r2,-128
8111476c:	113fffc4 	addi	r4,r2,-1
81114770:	01400184 	movi	r5,6
81114774:	29001136 	bltu	r5,r4,811147bc <__svfscanf_r+0xd8c>
81114778:	01000084 	movi	r4,2
8111477c:	2082900e 	bge	r4,r2,811151c0 <__svfscanf_r+0x1790>
81114780:	00c000c4 	movi	r3,3
81114784:	10c00d26 	beq	r2,r3,811147bc <__svfscanf_r+0xd8c>
81114788:	9425c83a 	sub	r18,r18,r16
8111478c:	1827883a 	mov	r19,r3
81114790:	843fffc4 	addi	r16,r16,-1
81114794:	81400007 	ldb	r5,0(r16)
81114798:	e00d883a 	mov	r6,fp
8111479c:	b009883a 	mov	r4,r22
811147a0:	111d6a00 	call	8111d6a0 <_ungetc_r>
811147a4:	a8bfffc4 	addi	r2,r21,-1
811147a8:	10c03fcc 	andi	r3,r2,255
811147ac:	8493883a 	add	r9,r16,r18
811147b0:	102b883a 	mov	r21,r2
811147b4:	98fff636 	bltu	r19,r3,81114790 <__reset+0xfb0f4790>
811147b8:	4825883a 	mov	r18,r9
811147bc:	a080400c 	andi	r2,r20,256
811147c0:	10001426 	beq	r2,zero,81114814 <__svfscanf_r+0xde4>
811147c4:	a081000c 	andi	r2,r20,1024
811147c8:	1002571e 	bne	r2,zero,81115128 <__svfscanf_r+0x16f8>
811147cc:	817fffc7 	ldb	r5,-1(r16)
811147d0:	00801944 	movi	r2,101
811147d4:	84ffffc4 	addi	r19,r16,-1
811147d8:	957fffc4 	addi	r21,r18,-1
811147dc:	28800826 	beq	r5,r2,81114800 <__svfscanf_r+0xdd0>
811147e0:	00801144 	movi	r2,69
811147e4:	28800626 	beq	r5,r2,81114800 <__svfscanf_r+0xdd0>
811147e8:	e00d883a 	mov	r6,fp
811147ec:	b009883a 	mov	r4,r22
811147f0:	111d6a00 	call	8111d6a0 <_ungetc_r>
811147f4:	817fff87 	ldb	r5,-2(r16)
811147f8:	84ffff84 	addi	r19,r16,-2
811147fc:	957fff84 	addi	r21,r18,-2
81114800:	e00d883a 	mov	r6,fp
81114804:	b009883a 	mov	r4,r22
81114808:	111d6a00 	call	8111d6a0 <_ungetc_r>
8111480c:	a825883a 	mov	r18,r21
81114810:	9821883a 	mov	r16,r19
81114814:	a080040c 	andi	r2,r20,16
81114818:	103e891e 	bne	r2,zero,81114240 <__reset+0xfb0f4240>
8111481c:	80000005 	stb	zero,0(r16)
81114820:	a081800c 	andi	r2,r20,1536
81114824:	01010004 	movi	r4,1024
81114828:	1101dd26 	beq	r2,r4,81114fa0 <__svfscanf_r+0x1570>
8111482c:	da00a417 	ldw	r8,656(sp)
81114830:	4001e71e 	bne	r8,zero,81114fd0 <__svfscanf_r+0x15a0>
81114834:	000d883a 	mov	r6,zero
81114838:	d9400104 	addi	r5,sp,4
8111483c:	b009883a 	mov	r4,r22
81114840:	111a2500 	call	8111a250 <_strtod_r>
81114844:	1021883a 	mov	r16,r2
81114848:	a080004c 	andi	r2,r20,1
8111484c:	1000021e 	bne	r2,zero,81114858 <__svfscanf_r+0xe28>
81114850:	a2c0008c 	andi	r11,r20,2
81114854:	5801e826 	beq	r11,zero,81114ff8 <__svfscanf_r+0x15c8>
81114858:	da009c17 	ldw	r8,624(sp)
8111485c:	40800017 	ldw	r2,0(r8)
81114860:	42000104 	addi	r8,r8,4
81114864:	da009c15 	stw	r8,624(sp)
81114868:	14000015 	stw	r16,0(r2)
8111486c:	10c00115 	stw	r3,4(r2)
81114870:	da00a017 	ldw	r8,640(sp)
81114874:	dd009d17 	ldw	r20,628(sp)
81114878:	42000044 	addi	r8,r8,1
8111487c:	da00a015 	stw	r8,640(sp)
81114880:	a00d883a 	mov	r6,r20
81114884:	003ca806 	br	81113b28 <__reset+0xfb0f3b28>
81114888:	a080400c 	andi	r2,r20,256
8111488c:	103f9a26 	beq	r2,zero,811146f8 <__reset+0xfb0f46f8>
81114890:	da00a217 	ldw	r8,648(sp)
81114894:	00bfdfc4 	movi	r2,-129
81114898:	a0a8703a 	and	r20,r20,r2
8111489c:	9cc00044 	addi	r19,r19,1
811148a0:	403f9e26 	beq	r8,zero,8111471c <__reset+0xfb0f471c>
811148a4:	423fffc4 	addi	r8,r8,-1
811148a8:	da00a215 	stw	r8,648(sp)
811148ac:	84000044 	addi	r16,r16,1
811148b0:	003f9a06 	br	8111471c <__reset+0xfb0f471c>
811148b4:	a080200c 	andi	r2,r20,128
811148b8:	103fa126 	beq	r2,zero,81114740 <__reset+0xfb0f4740>
811148bc:	00bfdfc4 	movi	r2,-129
811148c0:	a0a8703a 	and	r20,r20,r2
811148c4:	003f9306 	br	81114714 <__reset+0xfb0f4714>
811148c8:	a8803fcc 	andi	r2,r21,255
811148cc:	1080201c 	xori	r2,r2,128
811148d0:	10bfe004 	addi	r2,r2,-128
811148d4:	020001c4 	movi	r8,7
811148d8:	123f991e 	bne	r2,r8,81114740 <__reset+0xfb0f4740>
811148dc:	05400204 	movi	r21,8
811148e0:	003f8c06 	br	81114714 <__reset+0xfb0f4714>
811148e4:	a8803fcc 	andi	r2,r21,255
811148e8:	1080201c 	xori	r2,r2,128
811148ec:	10bfe004 	addi	r2,r2,-128
811148f0:	01800184 	movi	r6,6
811148f4:	11bf921e 	bne	r2,r6,81114740 <__reset+0xfb0f4740>
811148f8:	054001c4 	movi	r21,7
811148fc:	003f8506 	br	81114714 <__reset+0xfb0f4714>
81114900:	b000491e 	bne	r22,zero,81114a28 <__svfscanf_r+0xff8>
81114904:	9800031e 	bne	r19,zero,81114914 <__svfscanf_r+0xee4>
81114908:	a081c00c 	andi	r2,r20,1792
8111490c:	0181c004 	movi	r6,1792
81114910:	11819f26 	beq	r2,r6,81114f90 <__svfscanf_r+0x1560>
81114914:	a8803fcc 	andi	r2,r21,255
81114918:	1080201c 	xori	r2,r2,128
8111491c:	10bfe004 	addi	r2,r2,-128
81114920:	01800044 	movi	r6,1
81114924:	11800226 	beq	r2,r6,81114930 <__svfscanf_r+0xf00>
81114928:	01800104 	movi	r6,4
8111492c:	11bf841e 	bne	r2,r6,81114740 <__reset+0xfb0f4740>
81114930:	ad400044 	addi	r21,r21,1
81114934:	003f7706 	br	81114714 <__reset+0xfb0f4714>
81114938:	a8803fcc 	andi	r2,r21,255
8111493c:	1080201c 	xori	r2,r2,128
81114940:	10bfe004 	addi	r2,r2,-128
81114944:	10003c1e 	bne	r2,zero,81114a38 <__svfscanf_r+0x1008>
81114948:	9801141e 	bne	r19,zero,81114d9c <__svfscanf_r+0x136c>
8111494c:	a081c00c 	andi	r2,r20,1792
81114950:	0181c004 	movi	r6,1792
81114954:	11818226 	beq	r2,r6,81114f60 <__svfscanf_r+0x1530>
81114958:	8821883a 	mov	r16,r17
8111495c:	b019883a 	mov	r12,r22
81114960:	9823883a 	mov	r17,r19
81114964:	182d883a 	mov	r22,r3
81114968:	003f7a06 	br	81114754 <__reset+0xfb0f4754>
8111496c:	a8803fcc 	andi	r2,r21,255
81114970:	1080201c 	xori	r2,r2,128
81114974:	10bfe004 	addi	r2,r2,-128
81114978:	01800084 	movi	r6,2
8111497c:	11bf701e 	bne	r2,r6,81114740 <__reset+0xfb0f4740>
81114980:	054000c4 	movi	r21,3
81114984:	003f6306 	br	81114714 <__reset+0xfb0f4714>
81114988:	a081400c 	andi	r2,r20,1280
8111498c:	01810004 	movi	r6,1024
81114990:	11800326 	beq	r2,r6,811149a0 <__svfscanf_r+0xf70>
81114994:	a184703a 	and	r2,r20,r6
81114998:	103f6926 	beq	r2,zero,81114740 <__reset+0xfb0f4740>
8111499c:	983fee26 	beq	r19,zero,81114958 <__reset+0xfb0f4958>
811149a0:	a080800c 	andi	r2,r20,512
811149a4:	1000041e 	bne	r2,zero,811149b8 <__svfscanf_r+0xf88>
811149a8:	da009f17 	ldw	r8,636(sp)
811149ac:	dc40a515 	stw	r17,660(sp)
811149b0:	9a27c83a 	sub	r19,r19,r8
811149b4:	dcc0a415 	stw	r19,656(sp)
811149b8:	00be1fc4 	movi	r2,-1921
811149bc:	a0a8703a 	and	r20,r20,r2
811149c0:	a5006014 	ori	r20,r20,384
811149c4:	0027883a 	mov	r19,zero
811149c8:	003f5206 	br	81114714 <__reset+0xfb0f4714>
811149cc:	00800044 	movi	r2,1
811149d0:	b0bf5b1e 	bne	r22,r2,81114740 <__reset+0xfb0f4740>
811149d4:	05800084 	movi	r22,2
811149d8:	003f4e06 	br	81114714 <__reset+0xfb0f4714>
811149dc:	d980a317 	ldw	r6,652(sp)
811149e0:	30800003 	ldbu	r2,0(r6)
811149e4:	29803fcc 	andi	r6,r5,255
811149e8:	30bf551e 	bne	r6,r2,81114740 <__reset+0xfb0f4740>
811149ec:	a080800c 	andi	r2,r20,512
811149f0:	103f5326 	beq	r2,zero,81114740 <__reset+0xfb0f4740>
811149f4:	023f5fc4 	movi	r8,-641
811149f8:	a228703a 	and	r20,r20,r8
811149fc:	dcc09f15 	stw	r19,636(sp)
81114a00:	003f4406 	br	81114714 <__reset+0xfb0f4714>
81114a04:	1809883a 	mov	r4,r3
81114a08:	e00b883a 	mov	r5,fp
81114a0c:	d8c0a615 	stw	r3,664(sp)
81114a10:	d9c0aa15 	stw	r7,680(sp)
81114a14:	110ed540 	call	8110ed54 <__srefill_r>
81114a18:	d8c0a617 	ldw	r3,664(sp)
81114a1c:	d9c0aa17 	ldw	r7,680(sp)
81114a20:	103f4626 	beq	r2,zero,8111473c <__reset+0xfb0f473c>
81114a24:	003f4606 	br	81114740 <__reset+0xfb0f4740>
81114a28:	00800084 	movi	r2,2
81114a2c:	b0bfb91e 	bne	r22,r2,81114914 <__reset+0xfb0f4914>
81114a30:	058000c4 	movi	r22,3
81114a34:	003f3706 	br	81114714 <__reset+0xfb0f4714>
81114a38:	018000c4 	movi	r6,3
81114a3c:	11bfbc26 	beq	r2,r6,81114930 <__reset+0xfb0f4930>
81114a40:	01800144 	movi	r6,5
81114a44:	11bfba26 	beq	r2,r6,81114930 <__reset+0xfb0f4930>
81114a48:	003f3d06 	br	81114740 <__reset+0xfb0f4740>
81114a4c:	98bfffc4 	addi	r2,r19,-1
81114a50:	01405704 	movi	r5,348
81114a54:	2880d82e 	bgeu	r5,r2,81114db8 <__svfscanf_r+0x1388>
81114a58:	99ffa8c4 	addi	r7,r19,-349
81114a5c:	04c05744 	movi	r19,349
81114a60:	8c436014 	ori	r17,r17,3456
81114a64:	9013883a 	mov	r9,r18
81114a68:	8825883a 	mov	r18,r17
81114a6c:	dc409e17 	ldw	r17,632(sp)
81114a70:	0029883a 	mov	r20,zero
81114a74:	dc000104 	addi	r16,sp,4
81114a78:	05401344 	movi	r21,77
81114a7c:	02c08004 	movi	r11,512
81114a80:	01bf7fc4 	movi	r6,-513
81114a84:	023fdfc4 	movi	r8,-129
81114a88:	20bff544 	addi	r2,r4,-43
81114a8c:	10803fcc 	andi	r2,r2,255
81114a90:	a8807236 	bltu	r21,r2,81114c5c <__svfscanf_r+0x122c>
81114a94:	100490ba 	slli	r2,r2,2
81114a98:	01604474 	movhi	r5,33041
81114a9c:	2952ab04 	addi	r5,r5,19116
81114aa0:	1145883a 	add	r2,r2,r5
81114aa4:	10800017 	ldw	r2,0(r2)
81114aa8:	1000683a 	jmp	r2
81114aac:	81114ce0 	cmpeqi	r4,r16,17715
81114ab0:	81114c5c 	xori	r4,r16,17713
81114ab4:	81114ce0 	cmpeqi	r4,r16,17715
81114ab8:	81114c5c 	xori	r4,r16,17713
81114abc:	81114c5c 	xori	r4,r16,17713
81114ac0:	81114cb8 	rdprs	r4,r16,17714
81114ac4:	81114c98 	cmpnei	r4,r16,17714
81114ac8:	81114c98 	cmpnei	r4,r16,17714
81114acc:	81114c98 	cmpnei	r4,r16,17714
81114ad0:	81114c98 	cmpnei	r4,r16,17714
81114ad4:	81114c98 	cmpnei	r4,r16,17714
81114ad8:	81114c98 	cmpnei	r4,r16,17714
81114adc:	81114c98 	cmpnei	r4,r16,17714
81114ae0:	81114c40 	call	881114c4 <__reset+0x20f14c4>
81114ae4:	81114c40 	call	881114c4 <__reset+0x20f14c4>
81114ae8:	81114c5c 	xori	r4,r16,17713
81114aec:	81114c5c 	xori	r4,r16,17713
81114af0:	81114c5c 	xori	r4,r16,17713
81114af4:	81114c5c 	xori	r4,r16,17713
81114af8:	81114c5c 	xori	r4,r16,17713
81114afc:	81114c5c 	xori	r4,r16,17713
81114b00:	81114c5c 	xori	r4,r16,17713
81114b04:	81114c2c 	andhi	r4,r16,17712
81114b08:	81114c2c 	andhi	r4,r16,17712
81114b0c:	81114c2c 	andhi	r4,r16,17712
81114b10:	81114c2c 	andhi	r4,r16,17712
81114b14:	81114c2c 	andhi	r4,r16,17712
81114b18:	81114c2c 	andhi	r4,r16,17712
81114b1c:	81114c5c 	xori	r4,r16,17713
81114b20:	81114c5c 	xori	r4,r16,17713
81114b24:	81114c5c 	xori	r4,r16,17713
81114b28:	81114c5c 	xori	r4,r16,17713
81114b2c:	81114c5c 	xori	r4,r16,17713
81114b30:	81114c5c 	xori	r4,r16,17713
81114b34:	81114c5c 	xori	r4,r16,17713
81114b38:	81114c5c 	xori	r4,r16,17713
81114b3c:	81114c5c 	xori	r4,r16,17713
81114b40:	81114c5c 	xori	r4,r16,17713
81114b44:	81114c5c 	xori	r4,r16,17713
81114b48:	81114c5c 	xori	r4,r16,17713
81114b4c:	81114c5c 	xori	r4,r16,17713
81114b50:	81114c5c 	xori	r4,r16,17713
81114b54:	81114c5c 	xori	r4,r16,17713
81114b58:	81114c5c 	xori	r4,r16,17713
81114b5c:	81114c5c 	xori	r4,r16,17713
81114b60:	81114be4 	muli	r4,r16,17711
81114b64:	81114c5c 	xori	r4,r16,17713
81114b68:	81114c5c 	xori	r4,r16,17713
81114b6c:	81114c5c 	xori	r4,r16,17713
81114b70:	81114c5c 	xori	r4,r16,17713
81114b74:	81114c5c 	xori	r4,r16,17713
81114b78:	81114c5c 	xori	r4,r16,17713
81114b7c:	81114c5c 	xori	r4,r16,17713
81114b80:	81114c5c 	xori	r4,r16,17713
81114b84:	81114c2c 	andhi	r4,r16,17712
81114b88:	81114c2c 	andhi	r4,r16,17712
81114b8c:	81114c2c 	andhi	r4,r16,17712
81114b90:	81114c2c 	andhi	r4,r16,17712
81114b94:	81114c2c 	andhi	r4,r16,17712
81114b98:	81114c2c 	andhi	r4,r16,17712
81114b9c:	81114c5c 	xori	r4,r16,17713
81114ba0:	81114c5c 	xori	r4,r16,17713
81114ba4:	81114c5c 	xori	r4,r16,17713
81114ba8:	81114c5c 	xori	r4,r16,17713
81114bac:	81114c5c 	xori	r4,r16,17713
81114bb0:	81114c5c 	xori	r4,r16,17713
81114bb4:	81114c5c 	xori	r4,r16,17713
81114bb8:	81114c5c 	xori	r4,r16,17713
81114bbc:	81114c5c 	xori	r4,r16,17713
81114bc0:	81114c5c 	xori	r4,r16,17713
81114bc4:	81114c5c 	xori	r4,r16,17713
81114bc8:	81114c5c 	xori	r4,r16,17713
81114bcc:	81114c5c 	xori	r4,r16,17713
81114bd0:	81114c5c 	xori	r4,r16,17713
81114bd4:	81114c5c 	xori	r4,r16,17713
81114bd8:	81114c5c 	xori	r4,r16,17713
81114bdc:	81114c5c 	xori	r4,r16,17713
81114be0:	81114be4 	muli	r4,r16,17711
81114be4:	9081800c 	andi	r2,r18,1536
81114be8:	12c01c1e 	bne	r2,r11,81114c5c <__svfscanf_r+0x122c>
81114bec:	91a4703a 	and	r18,r18,r6
81114bf0:	94814014 	ori	r18,r18,1280
81114bf4:	04400404 	movi	r17,16
81114bf8:	81000005 	stb	r4,0(r16)
81114bfc:	84000044 	addi	r16,r16,1
81114c00:	e0800117 	ldw	r2,4(fp)
81114c04:	10bfffc4 	addi	r2,r2,-1
81114c08:	e0800115 	stw	r2,4(fp)
81114c0c:	0080540e 	bge	zero,r2,81114d60 <__svfscanf_r+0x1330>
81114c10:	18c00044 	addi	r3,r3,1
81114c14:	e0c00015 	stw	r3,0(fp)
81114c18:	9cffffc4 	addi	r19,r19,-1
81114c1c:	98000f26 	beq	r19,zero,81114c5c <__svfscanf_r+0x122c>
81114c20:	e0c00017 	ldw	r3,0(fp)
81114c24:	19000003 	ldbu	r4,0(r3)
81114c28:	003f9706 	br	81114a88 <__reset+0xfb0f4a88>
81114c2c:	00800284 	movi	r2,10
81114c30:	14400a0e 	bge	r2,r17,81114c5c <__svfscanf_r+0x122c>
81114c34:	00bd1fc4 	movi	r2,-2945
81114c38:	90a4703a 	and	r18,r18,r2
81114c3c:	003fee06 	br	81114bf8 <__reset+0xfb0f4bf8>
81114c40:	01604534 	movhi	r5,33044
81114c44:	8c63883a 	add	r17,r17,r17
81114c48:	296af584 	addi	r5,r5,-21546
81114c4c:	2c45883a 	add	r2,r5,r17
81114c50:	1440000f 	ldh	r17,0(r2)
81114c54:	00800204 	movi	r2,8
81114c58:	147ff616 	blt	r2,r17,81114c34 <__reset+0xfb0f4c34>
81114c5c:	dc409e15 	stw	r17,632(sp)
81114c60:	9023883a 	mov	r17,r18
81114c64:	8880400c 	andi	r2,r17,256
81114c68:	4825883a 	mov	r18,r9
81114c6c:	10000426 	beq	r2,zero,81114c80 <__svfscanf_r+0x1250>
81114c70:	d9800104 	addi	r6,sp,4
81114c74:	3400be36 	bltu	r6,r16,81114f70 <__svfscanf_r+0x1540>
81114c78:	da000104 	addi	r8,sp,4
81114c7c:	443bae26 	beq	r8,r16,81113b38 <__reset+0xfb0f3b38>
81114c80:	8880040c 	andi	r2,r17,16
81114c84:	10009326 	beq	r2,zero,81114ed4 <__svfscanf_r+0x14a4>
81114c88:	d8800104 	addi	r2,sp,4
81114c8c:	80a1c83a 	sub	r16,r16,r2
81114c90:	8521883a 	add	r16,r16,r20
81114c94:	003d0606 	br	811140b0 <__reset+0xfb0f40b0>
81114c98:	01604534 	movhi	r5,33044
81114c9c:	8c63883a 	add	r17,r17,r17
81114ca0:	296af584 	addi	r5,r5,-21546
81114ca4:	2c45883a 	add	r2,r5,r17
81114ca8:	1440000f 	ldh	r17,0(r2)
81114cac:	00bd1fc4 	movi	r2,-2945
81114cb0:	90a4703a 	and	r18,r18,r2
81114cb4:	003fd006 	br	81114bf8 <__reset+0xfb0f4bf8>
81114cb8:	9082000c 	andi	r2,r18,2048
81114cbc:	103fce26 	beq	r2,zero,81114bf8 <__reset+0xfb0f4bf8>
81114cc0:	8800021e 	bne	r17,zero,81114ccc <__svfscanf_r+0x129c>
81114cc4:	94808014 	ori	r18,r18,512
81114cc8:	04400204 	movi	r17,8
81114ccc:	9081000c 	andi	r2,r18,1024
81114cd0:	10009426 	beq	r2,zero,81114f24 <__svfscanf_r+0x14f4>
81114cd4:	00be9fc4 	movi	r2,-1409
81114cd8:	90a4703a 	and	r18,r18,r2
81114cdc:	003fc606 	br	81114bf8 <__reset+0xfb0f4bf8>
81114ce0:	9080200c 	andi	r2,r18,128
81114ce4:	103fdd26 	beq	r2,zero,81114c5c <__reset+0xfb0f4c5c>
81114ce8:	9224703a 	and	r18,r18,r8
81114cec:	003fc206 	br	81114bf8 <__reset+0xfb0f4bf8>
81114cf0:	9800011e 	bne	r19,zero,81114cf8 <__svfscanf_r+0x12c8>
81114cf4:	04ffffc4 	movi	r19,-1
81114cf8:	8900004c 	andi	r4,r17,1
81114cfc:	20005b1e 	bne	r4,zero,81114e6c <__svfscanf_r+0x143c>
81114d00:	8c40040c 	andi	r17,r17,16
81114d04:	88003026 	beq	r17,zero,81114dc8 <__svfscanf_r+0x1398>
81114d08:	0021883a 	mov	r16,zero
81114d0c:	00000306 	br	81114d1c <__svfscanf_r+0x12ec>
81114d10:	18800003 	ldbu	r2,0(r3)
81114d14:	3885883a 	add	r2,r7,r2
81114d18:	10800043 	ldbu	r2,1(r2)
81114d1c:	1080020c 	andi	r2,r2,8
81114d20:	103ce31e 	bne	r2,zero,811140b0 <__reset+0xfb0f40b0>
81114d24:	e0800117 	ldw	r2,4(fp)
81114d28:	18c00044 	addi	r3,r3,1
81114d2c:	84000044 	addi	r16,r16,1
81114d30:	10bfffc4 	addi	r2,r2,-1
81114d34:	e0800115 	stw	r2,4(fp)
81114d38:	e0c00015 	stw	r3,0(fp)
81114d3c:	84fcdc26 	beq	r16,r19,811140b0 <__reset+0xfb0f40b0>
81114d40:	00bff316 	blt	zero,r2,81114d10 <__reset+0xfb0f4d10>
81114d44:	e00b883a 	mov	r5,fp
81114d48:	b009883a 	mov	r4,r22
81114d4c:	110ed540 	call	8110ed54 <__srefill_r>
81114d50:	103cd71e 	bne	r2,zero,811140b0 <__reset+0xfb0f40b0>
81114d54:	b9c00017 	ldw	r7,0(r23)
81114d58:	e0c00017 	ldw	r3,0(fp)
81114d5c:	003fec06 	br	81114d10 <__reset+0xfb0f4d10>
81114d60:	e00b883a 	mov	r5,fp
81114d64:	b009883a 	mov	r4,r22
81114d68:	d980a715 	stw	r6,668(sp)
81114d6c:	d9c0aa15 	stw	r7,680(sp)
81114d70:	da00a815 	stw	r8,672(sp)
81114d74:	da40a915 	stw	r9,676(sp)
81114d78:	dac0a615 	stw	r11,664(sp)
81114d7c:	110ed540 	call	8110ed54 <__srefill_r>
81114d80:	d980a717 	ldw	r6,668(sp)
81114d84:	d9c0aa17 	ldw	r7,680(sp)
81114d88:	da00a817 	ldw	r8,672(sp)
81114d8c:	da40a917 	ldw	r9,676(sp)
81114d90:	dac0a617 	ldw	r11,664(sp)
81114d94:	103fa026 	beq	r2,zero,81114c18 <__reset+0xfb0f4c18>
81114d98:	003fb006 	br	81114c5c <__reset+0xfb0f4c5c>
81114d9c:	8821883a 	mov	r16,r17
81114da0:	b019883a 	mov	r12,r22
81114da4:	9823883a 	mov	r17,r19
81114da8:	182d883a 	mov	r22,r3
81114dac:	00bfbfc4 	movi	r2,-257
81114db0:	a0a8703a 	and	r20,r20,r2
81114db4:	003e6706 	br	81114754 <__reset+0xfb0f4754>
81114db8:	000f883a 	mov	r7,zero
81114dbc:	003f2806 	br	81114a60 <__reset+0xfb0f4a60>
81114dc0:	d800a215 	stw	zero,648(sp)
81114dc4:	003de306 	br	81114554 <__reset+0xfb0f4554>
81114dc8:	da009c17 	ldw	r8,624(sp)
81114dcc:	9abfffc4 	addi	r10,r19,-1
81114dd0:	44400017 	ldw	r17,0(r8)
81114dd4:	44000104 	addi	r16,r8,4
81114dd8:	880b883a 	mov	r5,r17
81114ddc:	8aa9883a 	add	r20,r17,r10
81114de0:	00000606 	br	81114dfc <__svfscanf_r+0x13cc>
81114de4:	e0c00017 	ldw	r3,0(fp)
81114de8:	b9000017 	ldw	r4,0(r23)
81114dec:	a80b883a 	mov	r5,r21
81114df0:	18800003 	ldbu	r2,0(r3)
81114df4:	2085883a 	add	r2,r4,r2
81114df8:	10800043 	ldbu	r2,1(r2)
81114dfc:	1080020c 	andi	r2,r2,8
81114e00:	1000551e 	bne	r2,zero,81114f58 <__svfscanf_r+0x1528>
81114e04:	e0800117 	ldw	r2,4(fp)
81114e08:	19000044 	addi	r4,r3,1
81114e0c:	e1000015 	stw	r4,0(fp)
81114e10:	10bfffc4 	addi	r2,r2,-1
81114e14:	e0800115 	stw	r2,4(fp)
81114e18:	18800003 	ldbu	r2,0(r3)
81114e1c:	2d400044 	addi	r21,r5,1
81114e20:	a827883a 	mov	r19,r21
81114e24:	28800005 	stb	r2,0(r5)
81114e28:	2d000626 	beq	r5,r20,81114e44 <__svfscanf_r+0x1414>
81114e2c:	e0800117 	ldw	r2,4(fp)
81114e30:	00bfec16 	blt	zero,r2,81114de4 <__reset+0xfb0f4de4>
81114e34:	e00b883a 	mov	r5,fp
81114e38:	b009883a 	mov	r4,r22
81114e3c:	110ed540 	call	8110ed54 <__srefill_r>
81114e40:	103fe826 	beq	r2,zero,81114de4 <__reset+0xfb0f4de4>
81114e44:	da00a017 	ldw	r8,640(sp)
81114e48:	dd009d17 	ldw	r20,628(sp)
81114e4c:	9c63c83a 	sub	r17,r19,r17
81114e50:	42000044 	addi	r8,r8,1
81114e54:	98000005 	stb	zero,0(r19)
81114e58:	9465883a 	add	r18,r18,r17
81114e5c:	da00a015 	stw	r8,640(sp)
81114e60:	dc009c15 	stw	r16,624(sp)
81114e64:	a00d883a 	mov	r6,r20
81114e68:	003b2f06 	br	81113b28 <__reset+0xfb0f3b28>
81114e6c:	dd409904 	addi	r21,sp,612
81114e70:	8c40040c 	andi	r17,r17,16
81114e74:	01800204 	movi	r6,8
81114e78:	000b883a 	mov	r5,zero
81114e7c:	a809883a 	mov	r4,r21
81114e80:	110ea300 	call	8110ea30 <memset>
81114e84:	8800401e 	bne	r17,zero,81114f88 <__svfscanf_r+0x1558>
81114e88:	da009c17 	ldw	r8,624(sp)
81114e8c:	45000017 	ldw	r20,0(r8)
81114e90:	42000104 	addi	r8,r8,4
81114e94:	da009c15 	stw	r8,624(sp)
81114e98:	000d883a 	mov	r6,zero
81114e9c:	3021883a 	mov	r16,r6
81114ea0:	dc409f15 	stw	r17,636(sp)
81114ea4:	e0800017 	ldw	r2,0(fp)
81114ea8:	b8c00017 	ldw	r3,0(r23)
81114eac:	10800003 	ldbu	r2,0(r2)
81114eb0:	1885883a 	add	r2,r3,r2
81114eb4:	10800043 	ldbu	r2,1(r2)
81114eb8:	1080020c 	andi	r2,r2,8
81114ebc:	1000011e 	bne	r2,zero,81114ec4 <__svfscanf_r+0x1494>
81114ec0:	9800701e 	bne	r19,zero,81115084 <__svfscanf_r+0x1654>
81114ec4:	dc409f17 	ldw	r17,636(sp)
81114ec8:	883cdd1e 	bne	r17,zero,81114240 <__reset+0xfb0f4240>
81114ecc:	a0000015 	stw	zero,0(r20)
81114ed0:	003cd806 	br	81114234 <__reset+0xfb0f4234>
81114ed4:	d9c09e17 	ldw	r7,632(sp)
81114ed8:	da00a117 	ldw	r8,644(sp)
81114edc:	000d883a 	mov	r6,zero
81114ee0:	d9400104 	addi	r5,sp,4
81114ee4:	b009883a 	mov	r4,r22
81114ee8:	80000005 	stb	zero,0(r16)
81114eec:	403ee83a 	callr	r8
81114ef0:	88c0080c 	andi	r3,r17,32
81114ef4:	1800121e 	bne	r3,zero,81114f40 <__svfscanf_r+0x1510>
81114ef8:	88c0010c 	andi	r3,r17,4
81114efc:	18004d26 	beq	r3,zero,81115034 <__svfscanf_r+0x1604>
81114f00:	da009c17 	ldw	r8,624(sp)
81114f04:	40c00017 	ldw	r3,0(r8)
81114f08:	42000104 	addi	r8,r8,4
81114f0c:	da009c15 	stw	r8,624(sp)
81114f10:	1880000d 	sth	r2,0(r3)
81114f14:	da00a017 	ldw	r8,640(sp)
81114f18:	42000044 	addi	r8,r8,1
81114f1c:	da00a015 	stw	r8,640(sp)
81114f20:	003f5906 	br	81114c88 <__reset+0xfb0f4c88>
81114f24:	00bf1fc4 	movi	r2,-897
81114f28:	90a4703a 	and	r18,r18,r2
81114f2c:	38000226 	beq	r7,zero,81114f38 <__svfscanf_r+0x1508>
81114f30:	39ffffc4 	addi	r7,r7,-1
81114f34:	9cc00044 	addi	r19,r19,1
81114f38:	a5000044 	addi	r20,r20,1
81114f3c:	003f3006 	br	81114c00 <__reset+0xfb0f4c00>
81114f40:	da009c17 	ldw	r8,624(sp)
81114f44:	40c00017 	ldw	r3,0(r8)
81114f48:	42000104 	addi	r8,r8,4
81114f4c:	da009c15 	stw	r8,624(sp)
81114f50:	18800015 	stw	r2,0(r3)
81114f54:	003fef06 	br	81114f14 <__reset+0xfb0f4f14>
81114f58:	2827883a 	mov	r19,r5
81114f5c:	003fb906 	br	81114e44 <__reset+0xfb0f4e44>
81114f60:	01be1fc4 	movi	r6,-1921
81114f64:	a1a8703a 	and	r20,r20,r6
81114f68:	05400044 	movi	r21,1
81114f6c:	003de906 	br	81114714 <__reset+0xfb0f4714>
81114f70:	817fffc7 	ldb	r5,-1(r16)
81114f74:	e00d883a 	mov	r6,fp
81114f78:	b009883a 	mov	r4,r22
81114f7c:	843fffc4 	addi	r16,r16,-1
81114f80:	111d6a00 	call	8111d6a0 <_ungetc_r>
81114f84:	003f3c06 	br	81114c78 <__reset+0xfb0f4c78>
81114f88:	dd009b04 	addi	r20,sp,620
81114f8c:	003fc206 	br	81114e98 <__reset+0xfb0f4e98>
81114f90:	00be1fc4 	movi	r2,-1921
81114f94:	a0a8703a 	and	r20,r20,r2
81114f98:	05800044 	movi	r22,1
81114f9c:	003ddd06 	br	81114714 <__reset+0xfb0f4714>
81114fa0:	d8c09f17 	ldw	r3,636(sp)
81114fa4:	88e3c83a 	sub	r17,r17,r3
81114fa8:	044dc83a 	sub	r6,zero,r17
81114fac:	883e2126 	beq	r17,zero,81114834 <__reset+0xfb0f4834>
81114fb0:	d88055c4 	addi	r2,sp,343
81114fb4:	80800136 	bltu	r16,r2,81114fbc <__svfscanf_r+0x158c>
81114fb8:	dc005584 	addi	r16,sp,342
81114fbc:	01604534 	movhi	r5,33044
81114fc0:	296af404 	addi	r5,r5,-21552
81114fc4:	8009883a 	mov	r4,r16
81114fc8:	110f0680 	call	8110f068 <sprintf>
81114fcc:	003e1906 	br	81114834 <__reset+0xfb0f4834>
81114fd0:	d8c0a517 	ldw	r3,660(sp)
81114fd4:	000d883a 	mov	r6,zero
81114fd8:	01c00284 	movi	r7,10
81114fdc:	19400044 	addi	r5,r3,1
81114fe0:	b009883a 	mov	r4,r22
81114fe4:	110f3140 	call	8110f314 <_strtol_r>
81114fe8:	da00a417 	ldw	r8,656(sp)
81114fec:	dc00a517 	ldw	r16,660(sp)
81114ff0:	120dc83a 	sub	r6,r2,r8
81114ff4:	003fee06 	br	81114fb0 <__reset+0xfb0f4fb0>
81114ff8:	da009c17 	ldw	r8,624(sp)
81114ffc:	180b883a 	mov	r5,r3
81115000:	8009883a 	mov	r4,r16
81115004:	45000017 	ldw	r20,0(r8)
81115008:	44400104 	addi	r17,r8,4
8111500c:	d8c0a615 	stw	r3,664(sp)
81115010:	1119fbc0 	call	81119fbc <__fpclassifyd>
81115014:	d8c0a617 	ldw	r3,664(sp)
81115018:	10006426 	beq	r2,zero,811151ac <__svfscanf_r+0x177c>
8111501c:	8009883a 	mov	r4,r16
81115020:	180b883a 	mov	r5,r3
81115024:	110d5780 	call	8110d578 <__truncdfsf2>
81115028:	a0800015 	stw	r2,0(r20)
8111502c:	dc409c15 	stw	r17,624(sp)
81115030:	003e0f06 	br	81114870 <__reset+0xfb0f4870>
81115034:	88c0004c 	andi	r3,r17,1
81115038:	183fc11e 	bne	r3,zero,81114f40 <__reset+0xfb0f4f40>
8111503c:	8c40008c 	andi	r17,r17,2
81115040:	883fbf26 	beq	r17,zero,81114f40 <__reset+0xfb0f4f40>
81115044:	da00a117 	ldw	r8,644(sp)
81115048:	00a044b4 	movhi	r2,33042
8111504c:	10af1604 	addi	r2,r2,-17320
81115050:	d9c09e17 	ldw	r7,632(sp)
81115054:	000d883a 	mov	r6,zero
81115058:	d9400104 	addi	r5,sp,4
8111505c:	b009883a 	mov	r4,r22
81115060:	40806226 	beq	r8,r2,811151ec <__svfscanf_r+0x17bc>
81115064:	111b9700 	call	8111b970 <_strtoll_r>
81115068:	da009c17 	ldw	r8,624(sp)
8111506c:	41000017 	ldw	r4,0(r8)
81115070:	42000104 	addi	r8,r8,4
81115074:	da009c15 	stw	r8,624(sp)
81115078:	20800015 	stw	r2,0(r4)
8111507c:	20c00115 	stw	r3,4(r4)
81115080:	003fa406 	br	81114f14 <__reset+0xfb0f4f14>
81115084:	11182d40 	call	811182d4 <__locale_mb_cur_max>
81115088:	80bca726 	beq	r16,r2,81114328 <__reset+0xfb0f4328>
8111508c:	e0800017 	ldw	r2,0(fp)
81115090:	e1000117 	ldw	r4,4(fp)
81115094:	d8c00104 	addi	r3,sp,4
81115098:	12000003 	ldbu	r8,0(r2)
8111509c:	213fffc4 	addi	r4,r4,-1
811150a0:	10800044 	addi	r2,r2,1
811150a4:	e1000115 	stw	r4,4(fp)
811150a8:	e0800015 	stw	r2,0(fp)
811150ac:	84400044 	addi	r17,r16,1
811150b0:	dd400015 	stw	r21,0(sp)
811150b4:	1c21883a 	add	r16,r3,r16
811150b8:	b009883a 	mov	r4,r22
811150bc:	880f883a 	mov	r7,r17
811150c0:	180d883a 	mov	r6,r3
811150c4:	a00b883a 	mov	r5,r20
811150c8:	82000005 	stb	r8,0(r16)
811150cc:	11183900 	call	81118390 <_mbrtowc_r>
811150d0:	013fffc4 	movi	r4,-1
811150d4:	113c9426 	beq	r2,r4,81114328 <__reset+0xfb0f4328>
811150d8:	103c881e 	bne	r2,zero,811142fc <__reset+0xfb0f42fc>
811150dc:	a0000015 	stw	zero,0(r20)
811150e0:	0009883a 	mov	r4,zero
811150e4:	11182140 	call	81118214 <iswspace>
811150e8:	10001a26 	beq	r2,zero,81115154 <__svfscanf_r+0x1724>
811150ec:	8821883a 	mov	r16,r17
811150f0:	dc409f17 	ldw	r17,636(sp)
811150f4:	803f7426 	beq	r16,zero,81114ec8 <__reset+0xfb0f4ec8>
811150f8:	843fffc4 	addi	r16,r16,-1
811150fc:	d9800104 	addi	r6,sp,4
81115100:	342b883a 	add	r21,r6,r16
81115104:	00000106 	br	8111510c <__svfscanf_r+0x16dc>
81115108:	843fffc4 	addi	r16,r16,-1
8111510c:	a9400003 	ldbu	r5,0(r21)
81115110:	e00d883a 	mov	r6,fp
81115114:	b009883a 	mov	r4,r22
81115118:	111d6a00 	call	8111d6a0 <_ungetc_r>
8111511c:	ad7fffc4 	addi	r21,r21,-1
81115120:	803ff91e 	bne	r16,zero,81115108 <__reset+0xfb0f5108>
81115124:	003f6806 	br	81114ec8 <__reset+0xfb0f4ec8>
81115128:	d9800104 	addi	r6,sp,4
8111512c:	802b883a 	mov	r21,r16
81115130:	343a812e 	bgeu	r6,r16,81113b38 <__reset+0xfb0f3b38>
81115134:	ad7fffc4 	addi	r21,r21,-1
81115138:	a9400007 	ldb	r5,0(r21)
8111513c:	e00d883a 	mov	r6,fp
81115140:	b009883a 	mov	r4,r22
81115144:	111d6a00 	call	8111d6a0 <_ungetc_r>
81115148:	da000104 	addi	r8,sp,4
8111514c:	457ff91e 	bne	r8,r21,81115134 <__reset+0xfb0f5134>
81115150:	003a7906 	br	81113b38 <__reset+0xfb0f3b38>
81115154:	da009f17 	ldw	r8,636(sp)
81115158:	9465883a 	add	r18,r18,r17
8111515c:	9cffffc4 	addi	r19,r19,-1
81115160:	4000051e 	bne	r8,zero,81115178 <__svfscanf_r+0x1748>
81115164:	a5000104 	addi	r20,r20,4
81115168:	0021883a 	mov	r16,zero
8111516c:	003c6606 	br	81114308 <__reset+0xfb0f4308>
81115170:	a1000017 	ldw	r4,0(r20)
81115174:	003fdb06 	br	811150e4 <__reset+0xfb0f50e4>
81115178:	0021883a 	mov	r16,zero
8111517c:	003c6206 	br	81114308 <__reset+0xfb0f4308>
81115180:	d8800104 	addi	r2,sp,4
81115184:	802b883a 	mov	r21,r16
81115188:	143a6b2e 	bgeu	r2,r16,81113b38 <__reset+0xfb0f3b38>
8111518c:	ad7fffc4 	addi	r21,r21,-1
81115190:	a9400007 	ldb	r5,0(r21)
81115194:	e00d883a 	mov	r6,fp
81115198:	b009883a 	mov	r4,r22
8111519c:	111d6a00 	call	8111d6a0 <_ungetc_r>
811151a0:	d8c00104 	addi	r3,sp,4
811151a4:	1d7ff91e 	bne	r3,r21,8111518c <__reset+0xfb0f518c>
811151a8:	003a6306 	br	81113b38 <__reset+0xfb0f3b38>
811151ac:	0009883a 	mov	r4,zero
811151b0:	111a1000 	call	8111a100 <nanf>
811151b4:	a0800015 	stw	r2,0(r20)
811151b8:	dc409c15 	stw	r17,624(sp)
811151bc:	003dac06 	br	81114870 <__reset+0xfb0f4870>
811151c0:	d9000104 	addi	r4,sp,4
811151c4:	802b883a 	mov	r21,r16
811151c8:	243a5b2e 	bgeu	r4,r16,81113b38 <__reset+0xfb0f3b38>
811151cc:	ad7fffc4 	addi	r21,r21,-1
811151d0:	a9400007 	ldb	r5,0(r21)
811151d4:	e00d883a 	mov	r6,fp
811151d8:	b009883a 	mov	r4,r22
811151dc:	111d6a00 	call	8111d6a0 <_ungetc_r>
811151e0:	d9400104 	addi	r5,sp,4
811151e4:	2d7ff91e 	bne	r5,r21,811151cc <__reset+0xfb0f51cc>
811151e8:	003a5306 	br	81113b38 <__reset+0xfb0f3b38>
811151ec:	111bec80 	call	8111bec8 <_strtoull_r>
811151f0:	003f9d06 	br	81115068 <__reset+0xfb0f5068>

811151f4 <vfscanf>:
811151f4:	00a04534 	movhi	r2,33044
811151f8:	defffb04 	addi	sp,sp,-20
811151fc:	10b3e404 	addi	r2,r2,-12400
81115200:	de00012e 	bgeu	sp,et,81115208 <vfscanf+0x14>
81115204:	003b68fa 	trap	3
81115208:	dc000215 	stw	r16,8(sp)
8111520c:	14000017 	ldw	r16,0(r2)
81115210:	dc400315 	stw	r17,12(sp)
81115214:	dfc00415 	stw	ra,16(sp)
81115218:	2023883a 	mov	r17,r4
8111521c:	80000826 	beq	r16,zero,81115240 <vfscanf+0x4c>
81115220:	80800e17 	ldw	r2,56(r16)
81115224:	1000061e 	bne	r2,zero,81115240 <vfscanf+0x4c>
81115228:	8009883a 	mov	r4,r16
8111522c:	d9400015 	stw	r5,0(sp)
81115230:	d9800115 	stw	r6,4(sp)
81115234:	11173ac0 	call	811173ac <__sinit>
81115238:	d9800117 	ldw	r6,4(sp)
8111523c:	d9400017 	ldw	r5,0(sp)
81115240:	300f883a 	mov	r7,r6
81115244:	8009883a 	mov	r4,r16
81115248:	280d883a 	mov	r6,r5
8111524c:	880b883a 	mov	r5,r17
81115250:	dfc00417 	ldw	ra,16(sp)
81115254:	dc400317 	ldw	r17,12(sp)
81115258:	dc000217 	ldw	r16,8(sp)
8111525c:	dec00504 	addi	sp,sp,20
81115260:	1113a301 	jmpi	81113a30 <__svfscanf_r>

81115264 <__svfscanf>:
81115264:	00a04534 	movhi	r2,33044
81115268:	10b3e404 	addi	r2,r2,-12400
8111526c:	300f883a 	mov	r7,r6
81115270:	280d883a 	mov	r6,r5
81115274:	200b883a 	mov	r5,r4
81115278:	11000017 	ldw	r4,0(r2)
8111527c:	1113a301 	jmpi	81113a30 <__svfscanf_r>

81115280 <_vfscanf_r>:
81115280:	defffb04 	addi	sp,sp,-20
81115284:	de00012e 	bgeu	sp,et,8111528c <_vfscanf_r+0xc>
81115288:	003b68fa 	trap	3
8111528c:	dc000315 	stw	r16,12(sp)
81115290:	dfc00415 	stw	ra,16(sp)
81115294:	2021883a 	mov	r16,r4
81115298:	20000926 	beq	r4,zero,811152c0 <_vfscanf_r+0x40>
8111529c:	20800e17 	ldw	r2,56(r4)
811152a0:	1000071e 	bne	r2,zero,811152c0 <_vfscanf_r+0x40>
811152a4:	d9400015 	stw	r5,0(sp)
811152a8:	d9800115 	stw	r6,4(sp)
811152ac:	d9c00215 	stw	r7,8(sp)
811152b0:	11173ac0 	call	811173ac <__sinit>
811152b4:	d9c00217 	ldw	r7,8(sp)
811152b8:	d9800117 	ldw	r6,4(sp)
811152bc:	d9400017 	ldw	r5,0(sp)
811152c0:	8009883a 	mov	r4,r16
811152c4:	dfc00417 	ldw	ra,16(sp)
811152c8:	dc000317 	ldw	r16,12(sp)
811152cc:	dec00504 	addi	sp,sp,20
811152d0:	1113a301 	jmpi	81113a30 <__svfscanf_r>

811152d4 <_write_r>:
811152d4:	defffd04 	addi	sp,sp,-12
811152d8:	de00012e 	bgeu	sp,et,811152e0 <_write_r+0xc>
811152dc:	003b68fa 	trap	3
811152e0:	2805883a 	mov	r2,r5
811152e4:	dc000015 	stw	r16,0(sp)
811152e8:	04204534 	movhi	r16,33044
811152ec:	dc400115 	stw	r17,4(sp)
811152f0:	300b883a 	mov	r5,r6
811152f4:	84344404 	addi	r16,r16,-12016
811152f8:	2023883a 	mov	r17,r4
811152fc:	380d883a 	mov	r6,r7
81115300:	1009883a 	mov	r4,r2
81115304:	dfc00215 	stw	ra,8(sp)
81115308:	80000015 	stw	zero,0(r16)
8111530c:	1123e080 	call	81123e08 <write>
81115310:	00ffffc4 	movi	r3,-1
81115314:	10c00526 	beq	r2,r3,8111532c <_write_r+0x58>
81115318:	dfc00217 	ldw	ra,8(sp)
8111531c:	dc400117 	ldw	r17,4(sp)
81115320:	dc000017 	ldw	r16,0(sp)
81115324:	dec00304 	addi	sp,sp,12
81115328:	f800283a 	ret
8111532c:	80c00017 	ldw	r3,0(r16)
81115330:	183ff926 	beq	r3,zero,81115318 <__reset+0xfb0f5318>
81115334:	88c00015 	stw	r3,0(r17)
81115338:	003ff706 	br	81115318 <__reset+0xfb0f5318>

8111533c <__swsetup_r>:
8111533c:	00a04534 	movhi	r2,33044
81115340:	defffd04 	addi	sp,sp,-12
81115344:	10b3e404 	addi	r2,r2,-12400
81115348:	de00012e 	bgeu	sp,et,81115350 <__swsetup_r+0x14>
8111534c:	003b68fa 	trap	3
81115350:	dc400115 	stw	r17,4(sp)
81115354:	2023883a 	mov	r17,r4
81115358:	11000017 	ldw	r4,0(r2)
8111535c:	dc000015 	stw	r16,0(sp)
81115360:	dfc00215 	stw	ra,8(sp)
81115364:	2821883a 	mov	r16,r5
81115368:	20000226 	beq	r4,zero,81115374 <__swsetup_r+0x38>
8111536c:	20800e17 	ldw	r2,56(r4)
81115370:	10003126 	beq	r2,zero,81115438 <__swsetup_r+0xfc>
81115374:	8080030b 	ldhu	r2,12(r16)
81115378:	10c0020c 	andi	r3,r2,8
8111537c:	1009883a 	mov	r4,r2
81115380:	18000f26 	beq	r3,zero,811153c0 <__swsetup_r+0x84>
81115384:	80c00417 	ldw	r3,16(r16)
81115388:	18001526 	beq	r3,zero,811153e0 <__swsetup_r+0xa4>
8111538c:	1100004c 	andi	r4,r2,1
81115390:	20001c1e 	bne	r4,zero,81115404 <__swsetup_r+0xc8>
81115394:	1080008c 	andi	r2,r2,2
81115398:	1000291e 	bne	r2,zero,81115440 <__swsetup_r+0x104>
8111539c:	80800517 	ldw	r2,20(r16)
811153a0:	80800215 	stw	r2,8(r16)
811153a4:	18001c26 	beq	r3,zero,81115418 <__swsetup_r+0xdc>
811153a8:	0005883a 	mov	r2,zero
811153ac:	dfc00217 	ldw	ra,8(sp)
811153b0:	dc400117 	ldw	r17,4(sp)
811153b4:	dc000017 	ldw	r16,0(sp)
811153b8:	dec00304 	addi	sp,sp,12
811153bc:	f800283a 	ret
811153c0:	2080040c 	andi	r2,r4,16
811153c4:	10002e26 	beq	r2,zero,81115480 <__swsetup_r+0x144>
811153c8:	2080010c 	andi	r2,r4,4
811153cc:	10001e1e 	bne	r2,zero,81115448 <__swsetup_r+0x10c>
811153d0:	80c00417 	ldw	r3,16(r16)
811153d4:	20800214 	ori	r2,r4,8
811153d8:	8080030d 	sth	r2,12(r16)
811153dc:	183feb1e 	bne	r3,zero,8111538c <__reset+0xfb0f538c>
811153e0:	1100a00c 	andi	r4,r2,640
811153e4:	01408004 	movi	r5,512
811153e8:	217fe826 	beq	r4,r5,8111538c <__reset+0xfb0f538c>
811153ec:	800b883a 	mov	r5,r16
811153f0:	8809883a 	mov	r4,r17
811153f4:	110df080 	call	8110df08 <__smakebuf_r>
811153f8:	8080030b 	ldhu	r2,12(r16)
811153fc:	80c00417 	ldw	r3,16(r16)
81115400:	003fe206 	br	8111538c <__reset+0xfb0f538c>
81115404:	80800517 	ldw	r2,20(r16)
81115408:	80000215 	stw	zero,8(r16)
8111540c:	0085c83a 	sub	r2,zero,r2
81115410:	80800615 	stw	r2,24(r16)
81115414:	183fe41e 	bne	r3,zero,811153a8 <__reset+0xfb0f53a8>
81115418:	80c0030b 	ldhu	r3,12(r16)
8111541c:	0005883a 	mov	r2,zero
81115420:	1900200c 	andi	r4,r3,128
81115424:	203fe126 	beq	r4,zero,811153ac <__reset+0xfb0f53ac>
81115428:	18c01014 	ori	r3,r3,64
8111542c:	80c0030d 	sth	r3,12(r16)
81115430:	00bfffc4 	movi	r2,-1
81115434:	003fdd06 	br	811153ac <__reset+0xfb0f53ac>
81115438:	11173ac0 	call	811173ac <__sinit>
8111543c:	003fcd06 	br	81115374 <__reset+0xfb0f5374>
81115440:	0005883a 	mov	r2,zero
81115444:	003fd606 	br	811153a0 <__reset+0xfb0f53a0>
81115448:	81400c17 	ldw	r5,48(r16)
8111544c:	28000626 	beq	r5,zero,81115468 <__swsetup_r+0x12c>
81115450:	80801004 	addi	r2,r16,64
81115454:	28800326 	beq	r5,r2,81115464 <__swsetup_r+0x128>
81115458:	8809883a 	mov	r4,r17
8111545c:	11178440 	call	81117844 <_free_r>
81115460:	8100030b 	ldhu	r4,12(r16)
81115464:	80000c15 	stw	zero,48(r16)
81115468:	80c00417 	ldw	r3,16(r16)
8111546c:	00bff6c4 	movi	r2,-37
81115470:	1108703a 	and	r4,r2,r4
81115474:	80000115 	stw	zero,4(r16)
81115478:	80c00015 	stw	r3,0(r16)
8111547c:	003fd506 	br	811153d4 <__reset+0xfb0f53d4>
81115480:	00800244 	movi	r2,9
81115484:	88800015 	stw	r2,0(r17)
81115488:	20801014 	ori	r2,r4,64
8111548c:	8080030d 	sth	r2,12(r16)
81115490:	00bfffc4 	movi	r2,-1
81115494:	003fc506 	br	811153ac <__reset+0xfb0f53ac>

81115498 <_close_r>:
81115498:	defffd04 	addi	sp,sp,-12
8111549c:	de00012e 	bgeu	sp,et,811154a4 <_close_r+0xc>
811154a0:	003b68fa 	trap	3
811154a4:	dc000015 	stw	r16,0(sp)
811154a8:	04204534 	movhi	r16,33044
811154ac:	dc400115 	stw	r17,4(sp)
811154b0:	84344404 	addi	r16,r16,-12016
811154b4:	2023883a 	mov	r17,r4
811154b8:	2809883a 	mov	r4,r5
811154bc:	dfc00215 	stw	ra,8(sp)
811154c0:	80000015 	stw	zero,0(r16)
811154c4:	11230b40 	call	811230b4 <close>
811154c8:	00ffffc4 	movi	r3,-1
811154cc:	10c00526 	beq	r2,r3,811154e4 <_close_r+0x4c>
811154d0:	dfc00217 	ldw	ra,8(sp)
811154d4:	dc400117 	ldw	r17,4(sp)
811154d8:	dc000017 	ldw	r16,0(sp)
811154dc:	dec00304 	addi	sp,sp,12
811154e0:	f800283a 	ret
811154e4:	80c00017 	ldw	r3,0(r16)
811154e8:	183ff926 	beq	r3,zero,811154d0 <__reset+0xfb0f54d0>
811154ec:	88c00015 	stw	r3,0(r17)
811154f0:	003ff706 	br	811154d0 <__reset+0xfb0f54d0>

811154f4 <quorem>:
811154f4:	defff704 	addi	sp,sp,-36
811154f8:	de00012e 	bgeu	sp,et,81115500 <quorem+0xc>
811154fc:	003b68fa 	trap	3
81115500:	dc800215 	stw	r18,8(sp)
81115504:	20800417 	ldw	r2,16(r4)
81115508:	2c800417 	ldw	r18,16(r5)
8111550c:	dfc00815 	stw	ra,32(sp)
81115510:	ddc00715 	stw	r23,28(sp)
81115514:	dd800615 	stw	r22,24(sp)
81115518:	dd400515 	stw	r21,20(sp)
8111551c:	dd000415 	stw	r20,16(sp)
81115520:	dcc00315 	stw	r19,12(sp)
81115524:	dc400115 	stw	r17,4(sp)
81115528:	dc000015 	stw	r16,0(sp)
8111552c:	14807116 	blt	r2,r18,811156f4 <quorem+0x200>
81115530:	94bfffc4 	addi	r18,r18,-1
81115534:	94ad883a 	add	r22,r18,r18
81115538:	b5ad883a 	add	r22,r22,r22
8111553c:	2c400504 	addi	r17,r5,20
81115540:	8da9883a 	add	r20,r17,r22
81115544:	25400504 	addi	r21,r4,20
81115548:	282f883a 	mov	r23,r5
8111554c:	adad883a 	add	r22,r21,r22
81115550:	a1400017 	ldw	r5,0(r20)
81115554:	2021883a 	mov	r16,r4
81115558:	b1000017 	ldw	r4,0(r22)
8111555c:	29400044 	addi	r5,r5,1
81115560:	1120ea40 	call	81120ea4 <__udivsi3>
81115564:	1027883a 	mov	r19,r2
81115568:	10002c26 	beq	r2,zero,8111561c <quorem+0x128>
8111556c:	a813883a 	mov	r9,r21
81115570:	880b883a 	mov	r5,r17
81115574:	0009883a 	mov	r4,zero
81115578:	000d883a 	mov	r6,zero
8111557c:	2a000017 	ldw	r8,0(r5)
81115580:	49c00017 	ldw	r7,0(r9)
81115584:	29400104 	addi	r5,r5,4
81115588:	40bfffcc 	andi	r2,r8,65535
8111558c:	14c5383a 	mul	r2,r2,r19
81115590:	4010d43a 	srli	r8,r8,16
81115594:	38ffffcc 	andi	r3,r7,65535
81115598:	1105883a 	add	r2,r2,r4
8111559c:	1008d43a 	srli	r4,r2,16
811155a0:	44d1383a 	mul	r8,r8,r19
811155a4:	198d883a 	add	r6,r3,r6
811155a8:	10ffffcc 	andi	r3,r2,65535
811155ac:	30c7c83a 	sub	r3,r6,r3
811155b0:	380ed43a 	srli	r7,r7,16
811155b4:	4105883a 	add	r2,r8,r4
811155b8:	180dd43a 	srai	r6,r3,16
811155bc:	113fffcc 	andi	r4,r2,65535
811155c0:	390fc83a 	sub	r7,r7,r4
811155c4:	398d883a 	add	r6,r7,r6
811155c8:	300e943a 	slli	r7,r6,16
811155cc:	18ffffcc 	andi	r3,r3,65535
811155d0:	1008d43a 	srli	r4,r2,16
811155d4:	38ceb03a 	or	r7,r7,r3
811155d8:	49c00015 	stw	r7,0(r9)
811155dc:	300dd43a 	srai	r6,r6,16
811155e0:	4a400104 	addi	r9,r9,4
811155e4:	a17fe52e 	bgeu	r20,r5,8111557c <__reset+0xfb0f557c>
811155e8:	b0800017 	ldw	r2,0(r22)
811155ec:	10000b1e 	bne	r2,zero,8111561c <quorem+0x128>
811155f0:	b0bfff04 	addi	r2,r22,-4
811155f4:	a880082e 	bgeu	r21,r2,81115618 <quorem+0x124>
811155f8:	b0ffff17 	ldw	r3,-4(r22)
811155fc:	18000326 	beq	r3,zero,8111560c <quorem+0x118>
81115600:	00000506 	br	81115618 <quorem+0x124>
81115604:	10c00017 	ldw	r3,0(r2)
81115608:	1800031e 	bne	r3,zero,81115618 <quorem+0x124>
8111560c:	10bfff04 	addi	r2,r2,-4
81115610:	94bfffc4 	addi	r18,r18,-1
81115614:	a8bffb36 	bltu	r21,r2,81115604 <__reset+0xfb0f5604>
81115618:	84800415 	stw	r18,16(r16)
8111561c:	b80b883a 	mov	r5,r23
81115620:	8009883a 	mov	r4,r16
81115624:	11191140 	call	81119114 <__mcmp>
81115628:	10002616 	blt	r2,zero,811156c4 <quorem+0x1d0>
8111562c:	9cc00044 	addi	r19,r19,1
81115630:	a805883a 	mov	r2,r21
81115634:	000b883a 	mov	r5,zero
81115638:	11000017 	ldw	r4,0(r2)
8111563c:	89800017 	ldw	r6,0(r17)
81115640:	10800104 	addi	r2,r2,4
81115644:	20ffffcc 	andi	r3,r4,65535
81115648:	194b883a 	add	r5,r3,r5
8111564c:	30ffffcc 	andi	r3,r6,65535
81115650:	28c7c83a 	sub	r3,r5,r3
81115654:	300cd43a 	srli	r6,r6,16
81115658:	2008d43a 	srli	r4,r4,16
8111565c:	180bd43a 	srai	r5,r3,16
81115660:	18ffffcc 	andi	r3,r3,65535
81115664:	2189c83a 	sub	r4,r4,r6
81115668:	2149883a 	add	r4,r4,r5
8111566c:	200c943a 	slli	r6,r4,16
81115670:	8c400104 	addi	r17,r17,4
81115674:	200bd43a 	srai	r5,r4,16
81115678:	30c6b03a 	or	r3,r6,r3
8111567c:	10ffff15 	stw	r3,-4(r2)
81115680:	a47fed2e 	bgeu	r20,r17,81115638 <__reset+0xfb0f5638>
81115684:	9485883a 	add	r2,r18,r18
81115688:	1085883a 	add	r2,r2,r2
8111568c:	a887883a 	add	r3,r21,r2
81115690:	18800017 	ldw	r2,0(r3)
81115694:	10000b1e 	bne	r2,zero,811156c4 <quorem+0x1d0>
81115698:	18bfff04 	addi	r2,r3,-4
8111569c:	a880082e 	bgeu	r21,r2,811156c0 <quorem+0x1cc>
811156a0:	18ffff17 	ldw	r3,-4(r3)
811156a4:	18000326 	beq	r3,zero,811156b4 <quorem+0x1c0>
811156a8:	00000506 	br	811156c0 <quorem+0x1cc>
811156ac:	10c00017 	ldw	r3,0(r2)
811156b0:	1800031e 	bne	r3,zero,811156c0 <quorem+0x1cc>
811156b4:	10bfff04 	addi	r2,r2,-4
811156b8:	94bfffc4 	addi	r18,r18,-1
811156bc:	a8bffb36 	bltu	r21,r2,811156ac <__reset+0xfb0f56ac>
811156c0:	84800415 	stw	r18,16(r16)
811156c4:	9805883a 	mov	r2,r19
811156c8:	dfc00817 	ldw	ra,32(sp)
811156cc:	ddc00717 	ldw	r23,28(sp)
811156d0:	dd800617 	ldw	r22,24(sp)
811156d4:	dd400517 	ldw	r21,20(sp)
811156d8:	dd000417 	ldw	r20,16(sp)
811156dc:	dcc00317 	ldw	r19,12(sp)
811156e0:	dc800217 	ldw	r18,8(sp)
811156e4:	dc400117 	ldw	r17,4(sp)
811156e8:	dc000017 	ldw	r16,0(sp)
811156ec:	dec00904 	addi	sp,sp,36
811156f0:	f800283a 	ret
811156f4:	0005883a 	mov	r2,zero
811156f8:	003ff306 	br	811156c8 <__reset+0xfb0f56c8>

811156fc <_dtoa_r>:
811156fc:	deffde04 	addi	sp,sp,-136
81115700:	de00012e 	bgeu	sp,et,81115708 <_dtoa_r+0xc>
81115704:	003b68fa 	trap	3
81115708:	20801017 	ldw	r2,64(r4)
8111570c:	df002015 	stw	fp,128(sp)
81115710:	dcc01b15 	stw	r19,108(sp)
81115714:	dc801a15 	stw	r18,104(sp)
81115718:	dc401915 	stw	r17,100(sp)
8111571c:	dc001815 	stw	r16,96(sp)
81115720:	dfc02115 	stw	ra,132(sp)
81115724:	ddc01f15 	stw	r23,124(sp)
81115728:	dd801e15 	stw	r22,120(sp)
8111572c:	dd401d15 	stw	r21,116(sp)
81115730:	dd001c15 	stw	r20,112(sp)
81115734:	d9c00315 	stw	r7,12(sp)
81115738:	2039883a 	mov	fp,r4
8111573c:	3023883a 	mov	r17,r6
81115740:	2825883a 	mov	r18,r5
81115744:	dc002417 	ldw	r16,144(sp)
81115748:	3027883a 	mov	r19,r6
8111574c:	10000826 	beq	r2,zero,81115770 <_dtoa_r+0x74>
81115750:	21801117 	ldw	r6,68(r4)
81115754:	00c00044 	movi	r3,1
81115758:	100b883a 	mov	r5,r2
8111575c:	1986983a 	sll	r3,r3,r6
81115760:	11800115 	stw	r6,4(r2)
81115764:	10c00215 	stw	r3,8(r2)
81115768:	11188c40 	call	811188c4 <_Bfree>
8111576c:	e0001015 	stw	zero,64(fp)
81115770:	88002e16 	blt	r17,zero,8111582c <_dtoa_r+0x130>
81115774:	80000015 	stw	zero,0(r16)
81115778:	889ffc2c 	andhi	r2,r17,32752
8111577c:	00dffc34 	movhi	r3,32752
81115780:	10c01c26 	beq	r2,r3,811157f4 <_dtoa_r+0xf8>
81115784:	000d883a 	mov	r6,zero
81115788:	000f883a 	mov	r7,zero
8111578c:	9009883a 	mov	r4,r18
81115790:	980b883a 	mov	r5,r19
81115794:	11223000 	call	81122300 <__eqdf2>
81115798:	10002b1e 	bne	r2,zero,81115848 <_dtoa_r+0x14c>
8111579c:	d9c02317 	ldw	r7,140(sp)
811157a0:	00800044 	movi	r2,1
811157a4:	38800015 	stw	r2,0(r7)
811157a8:	d8802517 	ldw	r2,148(sp)
811157ac:	10019e26 	beq	r2,zero,81115e28 <_dtoa_r+0x72c>
811157b0:	d8c02517 	ldw	r3,148(sp)
811157b4:	00a04534 	movhi	r2,33044
811157b8:	10aae344 	addi	r2,r2,-21619
811157bc:	18800015 	stw	r2,0(r3)
811157c0:	10bfffc4 	addi	r2,r2,-1
811157c4:	dfc02117 	ldw	ra,132(sp)
811157c8:	df002017 	ldw	fp,128(sp)
811157cc:	ddc01f17 	ldw	r23,124(sp)
811157d0:	dd801e17 	ldw	r22,120(sp)
811157d4:	dd401d17 	ldw	r21,116(sp)
811157d8:	dd001c17 	ldw	r20,112(sp)
811157dc:	dcc01b17 	ldw	r19,108(sp)
811157e0:	dc801a17 	ldw	r18,104(sp)
811157e4:	dc401917 	ldw	r17,100(sp)
811157e8:	dc001817 	ldw	r16,96(sp)
811157ec:	dec02204 	addi	sp,sp,136
811157f0:	f800283a 	ret
811157f4:	d8c02317 	ldw	r3,140(sp)
811157f8:	0089c3c4 	movi	r2,9999
811157fc:	18800015 	stw	r2,0(r3)
81115800:	90017726 	beq	r18,zero,81115de0 <_dtoa_r+0x6e4>
81115804:	00a04534 	movhi	r2,33044
81115808:	10ab0104 	addi	r2,r2,-21500
8111580c:	d9002517 	ldw	r4,148(sp)
81115810:	203fec26 	beq	r4,zero,811157c4 <__reset+0xfb0f57c4>
81115814:	10c000c7 	ldb	r3,3(r2)
81115818:	1801781e 	bne	r3,zero,81115dfc <_dtoa_r+0x700>
8111581c:	10c000c4 	addi	r3,r2,3
81115820:	d9802517 	ldw	r6,148(sp)
81115824:	30c00015 	stw	r3,0(r6)
81115828:	003fe606 	br	811157c4 <__reset+0xfb0f57c4>
8111582c:	04e00034 	movhi	r19,32768
81115830:	9cffffc4 	addi	r19,r19,-1
81115834:	00800044 	movi	r2,1
81115838:	8ce6703a 	and	r19,r17,r19
8111583c:	80800015 	stw	r2,0(r16)
81115840:	9823883a 	mov	r17,r19
81115844:	003fcc06 	br	81115778 <__reset+0xfb0f5778>
81115848:	d8800204 	addi	r2,sp,8
8111584c:	d8800015 	stw	r2,0(sp)
81115850:	d9c00104 	addi	r7,sp,4
81115854:	900b883a 	mov	r5,r18
81115858:	980d883a 	mov	r6,r19
8111585c:	e009883a 	mov	r4,fp
81115860:	8820d53a 	srli	r16,r17,20
81115864:	11194f00 	call	811194f0 <__d2b>
81115868:	d8800915 	stw	r2,36(sp)
8111586c:	8001651e 	bne	r16,zero,81115e04 <_dtoa_r+0x708>
81115870:	dd800217 	ldw	r22,8(sp)
81115874:	dc000117 	ldw	r16,4(sp)
81115878:	00800804 	movi	r2,32
8111587c:	b421883a 	add	r16,r22,r16
81115880:	80c10c84 	addi	r3,r16,1074
81115884:	10c2d10e 	bge	r2,r3,811163cc <_dtoa_r+0xcd0>
81115888:	00801004 	movi	r2,64
8111588c:	81010484 	addi	r4,r16,1042
81115890:	10c7c83a 	sub	r3,r2,r3
81115894:	9108d83a 	srl	r4,r18,r4
81115898:	88e2983a 	sll	r17,r17,r3
8111589c:	2448b03a 	or	r4,r4,r17
811158a0:	1122fc00 	call	81122fc0 <__floatunsidf>
811158a4:	017f8434 	movhi	r5,65040
811158a8:	01800044 	movi	r6,1
811158ac:	1009883a 	mov	r4,r2
811158b0:	194b883a 	add	r5,r3,r5
811158b4:	843fffc4 	addi	r16,r16,-1
811158b8:	d9801115 	stw	r6,68(sp)
811158bc:	000d883a 	mov	r6,zero
811158c0:	01cffe34 	movhi	r7,16376
811158c4:	11225580 	call	81122558 <__subdf3>
811158c8:	0198dbf4 	movhi	r6,25455
811158cc:	01cff4f4 	movhi	r7,16339
811158d0:	3190d844 	addi	r6,r6,17249
811158d4:	39e1e9c4 	addi	r7,r7,-30809
811158d8:	1009883a 	mov	r4,r2
811158dc:	180b883a 	mov	r5,r3
811158e0:	110cd400 	call	8110cd40 <__muldf3>
811158e4:	01a2d874 	movhi	r6,35681
811158e8:	01cff1f4 	movhi	r7,16327
811158ec:	31b22cc4 	addi	r6,r6,-14157
811158f0:	39e28a04 	addi	r7,r7,-30168
811158f4:	180b883a 	mov	r5,r3
811158f8:	1009883a 	mov	r4,r2
811158fc:	112115c0 	call	8112115c <__adddf3>
81115900:	8009883a 	mov	r4,r16
81115904:	1029883a 	mov	r20,r2
81115908:	1823883a 	mov	r17,r3
8111590c:	1122edc0 	call	81122edc <__floatsidf>
81115910:	019427f4 	movhi	r6,20639
81115914:	01cff4f4 	movhi	r7,16339
81115918:	319e7ec4 	addi	r6,r6,31227
8111591c:	39d104c4 	addi	r7,r7,17427
81115920:	1009883a 	mov	r4,r2
81115924:	180b883a 	mov	r5,r3
81115928:	110cd400 	call	8110cd40 <__muldf3>
8111592c:	100d883a 	mov	r6,r2
81115930:	180f883a 	mov	r7,r3
81115934:	a009883a 	mov	r4,r20
81115938:	880b883a 	mov	r5,r17
8111593c:	112115c0 	call	8112115c <__adddf3>
81115940:	1009883a 	mov	r4,r2
81115944:	180b883a 	mov	r5,r3
81115948:	1029883a 	mov	r20,r2
8111594c:	1823883a 	mov	r17,r3
81115950:	1122e5c0 	call	81122e5c <__fixdfsi>
81115954:	000d883a 	mov	r6,zero
81115958:	000f883a 	mov	r7,zero
8111595c:	a009883a 	mov	r4,r20
81115960:	880b883a 	mov	r5,r17
81115964:	d8800515 	stw	r2,20(sp)
81115968:	11224640 	call	81122464 <__ledf2>
8111596c:	10028716 	blt	r2,zero,8111638c <_dtoa_r+0xc90>
81115970:	d8c00517 	ldw	r3,20(sp)
81115974:	00800584 	movi	r2,22
81115978:	10c27536 	bltu	r2,r3,81116350 <_dtoa_r+0xc54>
8111597c:	180490fa 	slli	r2,r3,3
81115980:	00e04534 	movhi	r3,33044
81115984:	18eb1c04 	addi	r3,r3,-21392
81115988:	1885883a 	add	r2,r3,r2
8111598c:	11000017 	ldw	r4,0(r2)
81115990:	11400117 	ldw	r5,4(r2)
81115994:	900d883a 	mov	r6,r18
81115998:	980f883a 	mov	r7,r19
8111599c:	11223880 	call	81122388 <__gedf2>
811159a0:	00828d0e 	bge	zero,r2,811163d8 <_dtoa_r+0xcdc>
811159a4:	d9000517 	ldw	r4,20(sp)
811159a8:	d8000e15 	stw	zero,56(sp)
811159ac:	213fffc4 	addi	r4,r4,-1
811159b0:	d9000515 	stw	r4,20(sp)
811159b4:	b42dc83a 	sub	r22,r22,r16
811159b8:	b5bfffc4 	addi	r22,r22,-1
811159bc:	b0026f16 	blt	r22,zero,8111637c <_dtoa_r+0xc80>
811159c0:	d8000815 	stw	zero,32(sp)
811159c4:	d9c00517 	ldw	r7,20(sp)
811159c8:	38026416 	blt	r7,zero,8111635c <_dtoa_r+0xc60>
811159cc:	b1ed883a 	add	r22,r22,r7
811159d0:	d9c00d15 	stw	r7,52(sp)
811159d4:	d8000a15 	stw	zero,40(sp)
811159d8:	d9800317 	ldw	r6,12(sp)
811159dc:	00800244 	movi	r2,9
811159e0:	11811436 	bltu	r2,r6,81115e34 <_dtoa_r+0x738>
811159e4:	00800144 	movi	r2,5
811159e8:	1184e10e 	bge	r2,r6,81116d70 <_dtoa_r+0x1674>
811159ec:	31bfff04 	addi	r6,r6,-4
811159f0:	d9800315 	stw	r6,12(sp)
811159f4:	0023883a 	mov	r17,zero
811159f8:	d9800317 	ldw	r6,12(sp)
811159fc:	008000c4 	movi	r2,3
81115a00:	30836726 	beq	r6,r2,811167a0 <_dtoa_r+0x10a4>
81115a04:	1183410e 	bge	r2,r6,8111670c <_dtoa_r+0x1010>
81115a08:	d9c00317 	ldw	r7,12(sp)
81115a0c:	00800104 	movi	r2,4
81115a10:	38827c26 	beq	r7,r2,81116404 <_dtoa_r+0xd08>
81115a14:	00800144 	movi	r2,5
81115a18:	3884c41e 	bne	r7,r2,81116d2c <_dtoa_r+0x1630>
81115a1c:	00800044 	movi	r2,1
81115a20:	d8800b15 	stw	r2,44(sp)
81115a24:	d8c00517 	ldw	r3,20(sp)
81115a28:	d9002217 	ldw	r4,136(sp)
81115a2c:	1907883a 	add	r3,r3,r4
81115a30:	19800044 	addi	r6,r3,1
81115a34:	d8c00c15 	stw	r3,48(sp)
81115a38:	d9800615 	stw	r6,24(sp)
81115a3c:	0183a40e 	bge	zero,r6,811168d0 <_dtoa_r+0x11d4>
81115a40:	d9800617 	ldw	r6,24(sp)
81115a44:	3021883a 	mov	r16,r6
81115a48:	e0001115 	stw	zero,68(fp)
81115a4c:	008005c4 	movi	r2,23
81115a50:	1184c92e 	bgeu	r2,r6,81116d78 <_dtoa_r+0x167c>
81115a54:	00c00044 	movi	r3,1
81115a58:	00800104 	movi	r2,4
81115a5c:	1085883a 	add	r2,r2,r2
81115a60:	11000504 	addi	r4,r2,20
81115a64:	180b883a 	mov	r5,r3
81115a68:	18c00044 	addi	r3,r3,1
81115a6c:	313ffb2e 	bgeu	r6,r4,81115a5c <__reset+0xfb0f5a5c>
81115a70:	e1401115 	stw	r5,68(fp)
81115a74:	e009883a 	mov	r4,fp
81115a78:	11188140 	call	81118814 <_Balloc>
81115a7c:	d8800715 	stw	r2,28(sp)
81115a80:	e0801015 	stw	r2,64(fp)
81115a84:	00800384 	movi	r2,14
81115a88:	1400f736 	bltu	r2,r16,81115e68 <_dtoa_r+0x76c>
81115a8c:	8800f626 	beq	r17,zero,81115e68 <_dtoa_r+0x76c>
81115a90:	d9c00517 	ldw	r7,20(sp)
81115a94:	01c39a0e 	bge	zero,r7,81116900 <_dtoa_r+0x1204>
81115a98:	388003cc 	andi	r2,r7,15
81115a9c:	100490fa 	slli	r2,r2,3
81115aa0:	382bd13a 	srai	r21,r7,4
81115aa4:	00e04534 	movhi	r3,33044
81115aa8:	18eb1c04 	addi	r3,r3,-21392
81115aac:	1885883a 	add	r2,r3,r2
81115ab0:	a8c0040c 	andi	r3,r21,16
81115ab4:	12400017 	ldw	r9,0(r2)
81115ab8:	12000117 	ldw	r8,4(r2)
81115abc:	18037926 	beq	r3,zero,811168a4 <_dtoa_r+0x11a8>
81115ac0:	00a04534 	movhi	r2,33044
81115ac4:	10ab1204 	addi	r2,r2,-21432
81115ac8:	11800817 	ldw	r6,32(r2)
81115acc:	11c00917 	ldw	r7,36(r2)
81115ad0:	9009883a 	mov	r4,r18
81115ad4:	980b883a 	mov	r5,r19
81115ad8:	da001715 	stw	r8,92(sp)
81115adc:	da401615 	stw	r9,88(sp)
81115ae0:	1121a100 	call	81121a10 <__divdf3>
81115ae4:	da001717 	ldw	r8,92(sp)
81115ae8:	da401617 	ldw	r9,88(sp)
81115aec:	ad4003cc 	andi	r21,r21,15
81115af0:	040000c4 	movi	r16,3
81115af4:	1023883a 	mov	r17,r2
81115af8:	1829883a 	mov	r20,r3
81115afc:	a8001126 	beq	r21,zero,81115b44 <_dtoa_r+0x448>
81115b00:	05e04534 	movhi	r23,33044
81115b04:	bdeb1204 	addi	r23,r23,-21432
81115b08:	4805883a 	mov	r2,r9
81115b0c:	4007883a 	mov	r3,r8
81115b10:	a980004c 	andi	r6,r21,1
81115b14:	1009883a 	mov	r4,r2
81115b18:	a82bd07a 	srai	r21,r21,1
81115b1c:	180b883a 	mov	r5,r3
81115b20:	30000426 	beq	r6,zero,81115b34 <_dtoa_r+0x438>
81115b24:	b9800017 	ldw	r6,0(r23)
81115b28:	b9c00117 	ldw	r7,4(r23)
81115b2c:	84000044 	addi	r16,r16,1
81115b30:	110cd400 	call	8110cd40 <__muldf3>
81115b34:	bdc00204 	addi	r23,r23,8
81115b38:	a83ff51e 	bne	r21,zero,81115b10 <__reset+0xfb0f5b10>
81115b3c:	1013883a 	mov	r9,r2
81115b40:	1811883a 	mov	r8,r3
81115b44:	480d883a 	mov	r6,r9
81115b48:	400f883a 	mov	r7,r8
81115b4c:	8809883a 	mov	r4,r17
81115b50:	a00b883a 	mov	r5,r20
81115b54:	1121a100 	call	81121a10 <__divdf3>
81115b58:	d8800f15 	stw	r2,60(sp)
81115b5c:	d8c01015 	stw	r3,64(sp)
81115b60:	d8c00e17 	ldw	r3,56(sp)
81115b64:	18000626 	beq	r3,zero,81115b80 <_dtoa_r+0x484>
81115b68:	d9000f17 	ldw	r4,60(sp)
81115b6c:	d9401017 	ldw	r5,64(sp)
81115b70:	000d883a 	mov	r6,zero
81115b74:	01cffc34 	movhi	r7,16368
81115b78:	11224640 	call	81122464 <__ledf2>
81115b7c:	10040b16 	blt	r2,zero,81116bac <_dtoa_r+0x14b0>
81115b80:	8009883a 	mov	r4,r16
81115b84:	1122edc0 	call	81122edc <__floatsidf>
81115b88:	d9800f17 	ldw	r6,60(sp)
81115b8c:	d9c01017 	ldw	r7,64(sp)
81115b90:	1009883a 	mov	r4,r2
81115b94:	180b883a 	mov	r5,r3
81115b98:	110cd400 	call	8110cd40 <__muldf3>
81115b9c:	000d883a 	mov	r6,zero
81115ba0:	01d00734 	movhi	r7,16412
81115ba4:	1009883a 	mov	r4,r2
81115ba8:	180b883a 	mov	r5,r3
81115bac:	112115c0 	call	8112115c <__adddf3>
81115bb0:	1021883a 	mov	r16,r2
81115bb4:	d8800617 	ldw	r2,24(sp)
81115bb8:	047f3034 	movhi	r17,64704
81115bbc:	1c63883a 	add	r17,r3,r17
81115bc0:	10031826 	beq	r2,zero,81116824 <_dtoa_r+0x1128>
81115bc4:	d8c00517 	ldw	r3,20(sp)
81115bc8:	db000617 	ldw	r12,24(sp)
81115bcc:	d8c01315 	stw	r3,76(sp)
81115bd0:	d9000b17 	ldw	r4,44(sp)
81115bd4:	20038f26 	beq	r4,zero,81116a14 <_dtoa_r+0x1318>
81115bd8:	60bfffc4 	addi	r2,r12,-1
81115bdc:	100490fa 	slli	r2,r2,3
81115be0:	00e04534 	movhi	r3,33044
81115be4:	18eb1c04 	addi	r3,r3,-21392
81115be8:	1885883a 	add	r2,r3,r2
81115bec:	11800017 	ldw	r6,0(r2)
81115bf0:	11c00117 	ldw	r7,4(r2)
81115bf4:	d8800717 	ldw	r2,28(sp)
81115bf8:	0009883a 	mov	r4,zero
81115bfc:	014ff834 	movhi	r5,16352
81115c00:	db001615 	stw	r12,88(sp)
81115c04:	15c00044 	addi	r23,r2,1
81115c08:	1121a100 	call	81121a10 <__divdf3>
81115c0c:	800d883a 	mov	r6,r16
81115c10:	880f883a 	mov	r7,r17
81115c14:	1009883a 	mov	r4,r2
81115c18:	180b883a 	mov	r5,r3
81115c1c:	11225580 	call	81122558 <__subdf3>
81115c20:	d9401017 	ldw	r5,64(sp)
81115c24:	d9000f17 	ldw	r4,60(sp)
81115c28:	102b883a 	mov	r21,r2
81115c2c:	d8c01215 	stw	r3,72(sp)
81115c30:	1122e5c0 	call	81122e5c <__fixdfsi>
81115c34:	1009883a 	mov	r4,r2
81115c38:	1029883a 	mov	r20,r2
81115c3c:	1122edc0 	call	81122edc <__floatsidf>
81115c40:	d9000f17 	ldw	r4,60(sp)
81115c44:	d9401017 	ldw	r5,64(sp)
81115c48:	100d883a 	mov	r6,r2
81115c4c:	180f883a 	mov	r7,r3
81115c50:	11225580 	call	81122558 <__subdf3>
81115c54:	1823883a 	mov	r17,r3
81115c58:	d8c00717 	ldw	r3,28(sp)
81115c5c:	d9401217 	ldw	r5,72(sp)
81115c60:	a2000c04 	addi	r8,r20,48
81115c64:	1021883a 	mov	r16,r2
81115c68:	1a000005 	stb	r8,0(r3)
81115c6c:	800d883a 	mov	r6,r16
81115c70:	880f883a 	mov	r7,r17
81115c74:	a809883a 	mov	r4,r21
81115c78:	4029883a 	mov	r20,r8
81115c7c:	11223880 	call	81122388 <__gedf2>
81115c80:	00841d16 	blt	zero,r2,81116cf8 <_dtoa_r+0x15fc>
81115c84:	800d883a 	mov	r6,r16
81115c88:	880f883a 	mov	r7,r17
81115c8c:	0009883a 	mov	r4,zero
81115c90:	014ffc34 	movhi	r5,16368
81115c94:	11225580 	call	81122558 <__subdf3>
81115c98:	d9401217 	ldw	r5,72(sp)
81115c9c:	100d883a 	mov	r6,r2
81115ca0:	180f883a 	mov	r7,r3
81115ca4:	a809883a 	mov	r4,r21
81115ca8:	11223880 	call	81122388 <__gedf2>
81115cac:	db001617 	ldw	r12,88(sp)
81115cb0:	00840e16 	blt	zero,r2,81116cec <_dtoa_r+0x15f0>
81115cb4:	00800044 	movi	r2,1
81115cb8:	13006b0e 	bge	r2,r12,81115e68 <_dtoa_r+0x76c>
81115cbc:	d9000717 	ldw	r4,28(sp)
81115cc0:	dd800f15 	stw	r22,60(sp)
81115cc4:	dcc01015 	stw	r19,64(sp)
81115cc8:	2319883a 	add	r12,r4,r12
81115ccc:	dcc01217 	ldw	r19,72(sp)
81115cd0:	602d883a 	mov	r22,r12
81115cd4:	dc801215 	stw	r18,72(sp)
81115cd8:	b825883a 	mov	r18,r23
81115cdc:	00000906 	br	81115d04 <_dtoa_r+0x608>
81115ce0:	11225580 	call	81122558 <__subdf3>
81115ce4:	a80d883a 	mov	r6,r21
81115ce8:	980f883a 	mov	r7,r19
81115cec:	1009883a 	mov	r4,r2
81115cf0:	180b883a 	mov	r5,r3
81115cf4:	11224640 	call	81122464 <__ledf2>
81115cf8:	1003e816 	blt	r2,zero,81116c9c <_dtoa_r+0x15a0>
81115cfc:	b825883a 	mov	r18,r23
81115d00:	bd83e926 	beq	r23,r22,81116ca8 <_dtoa_r+0x15ac>
81115d04:	a809883a 	mov	r4,r21
81115d08:	980b883a 	mov	r5,r19
81115d0c:	000d883a 	mov	r6,zero
81115d10:	01d00934 	movhi	r7,16420
81115d14:	110cd400 	call	8110cd40 <__muldf3>
81115d18:	000d883a 	mov	r6,zero
81115d1c:	01d00934 	movhi	r7,16420
81115d20:	8009883a 	mov	r4,r16
81115d24:	880b883a 	mov	r5,r17
81115d28:	102b883a 	mov	r21,r2
81115d2c:	1827883a 	mov	r19,r3
81115d30:	110cd400 	call	8110cd40 <__muldf3>
81115d34:	180b883a 	mov	r5,r3
81115d38:	1009883a 	mov	r4,r2
81115d3c:	1821883a 	mov	r16,r3
81115d40:	1023883a 	mov	r17,r2
81115d44:	1122e5c0 	call	81122e5c <__fixdfsi>
81115d48:	1009883a 	mov	r4,r2
81115d4c:	1029883a 	mov	r20,r2
81115d50:	1122edc0 	call	81122edc <__floatsidf>
81115d54:	8809883a 	mov	r4,r17
81115d58:	800b883a 	mov	r5,r16
81115d5c:	100d883a 	mov	r6,r2
81115d60:	180f883a 	mov	r7,r3
81115d64:	11225580 	call	81122558 <__subdf3>
81115d68:	a5000c04 	addi	r20,r20,48
81115d6c:	a80d883a 	mov	r6,r21
81115d70:	980f883a 	mov	r7,r19
81115d74:	1009883a 	mov	r4,r2
81115d78:	180b883a 	mov	r5,r3
81115d7c:	95000005 	stb	r20,0(r18)
81115d80:	1021883a 	mov	r16,r2
81115d84:	1823883a 	mov	r17,r3
81115d88:	11224640 	call	81122464 <__ledf2>
81115d8c:	bdc00044 	addi	r23,r23,1
81115d90:	800d883a 	mov	r6,r16
81115d94:	880f883a 	mov	r7,r17
81115d98:	0009883a 	mov	r4,zero
81115d9c:	014ffc34 	movhi	r5,16368
81115da0:	103fcf0e 	bge	r2,zero,81115ce0 <__reset+0xfb0f5ce0>
81115da4:	d8c01317 	ldw	r3,76(sp)
81115da8:	d8c00515 	stw	r3,20(sp)
81115dac:	d9400917 	ldw	r5,36(sp)
81115db0:	e009883a 	mov	r4,fp
81115db4:	11188c40 	call	811188c4 <_Bfree>
81115db8:	d9000517 	ldw	r4,20(sp)
81115dbc:	d9802317 	ldw	r6,140(sp)
81115dc0:	d9c02517 	ldw	r7,148(sp)
81115dc4:	b8000005 	stb	zero,0(r23)
81115dc8:	20800044 	addi	r2,r4,1
81115dcc:	30800015 	stw	r2,0(r6)
81115dd0:	3802aa26 	beq	r7,zero,8111687c <_dtoa_r+0x1180>
81115dd4:	3dc00015 	stw	r23,0(r7)
81115dd8:	d8800717 	ldw	r2,28(sp)
81115ddc:	003e7906 	br	811157c4 <__reset+0xfb0f57c4>
81115de0:	00800434 	movhi	r2,16
81115de4:	10bfffc4 	addi	r2,r2,-1
81115de8:	88a2703a 	and	r17,r17,r2
81115dec:	883e851e 	bne	r17,zero,81115804 <__reset+0xfb0f5804>
81115df0:	00a04534 	movhi	r2,33044
81115df4:	10aafe04 	addi	r2,r2,-21512
81115df8:	003e8406 	br	8111580c <__reset+0xfb0f580c>
81115dfc:	10c00204 	addi	r3,r2,8
81115e00:	003e8706 	br	81115820 <__reset+0xfb0f5820>
81115e04:	01400434 	movhi	r5,16
81115e08:	297fffc4 	addi	r5,r5,-1
81115e0c:	994a703a 	and	r5,r19,r5
81115e10:	9009883a 	mov	r4,r18
81115e14:	843f0044 	addi	r16,r16,-1023
81115e18:	294ffc34 	orhi	r5,r5,16368
81115e1c:	dd800217 	ldw	r22,8(sp)
81115e20:	d8001115 	stw	zero,68(sp)
81115e24:	003ea506 	br	811158bc <__reset+0xfb0f58bc>
81115e28:	00a04534 	movhi	r2,33044
81115e2c:	10aae304 	addi	r2,r2,-21620
81115e30:	003e6406 	br	811157c4 <__reset+0xfb0f57c4>
81115e34:	e0001115 	stw	zero,68(fp)
81115e38:	000b883a 	mov	r5,zero
81115e3c:	e009883a 	mov	r4,fp
81115e40:	11188140 	call	81118814 <_Balloc>
81115e44:	01bfffc4 	movi	r6,-1
81115e48:	01c00044 	movi	r7,1
81115e4c:	d8800715 	stw	r2,28(sp)
81115e50:	d9800c15 	stw	r6,48(sp)
81115e54:	e0801015 	stw	r2,64(fp)
81115e58:	d8000315 	stw	zero,12(sp)
81115e5c:	d9c00b15 	stw	r7,44(sp)
81115e60:	d9800615 	stw	r6,24(sp)
81115e64:	d8002215 	stw	zero,136(sp)
81115e68:	d8800117 	ldw	r2,4(sp)
81115e6c:	10008916 	blt	r2,zero,81116094 <_dtoa_r+0x998>
81115e70:	d9000517 	ldw	r4,20(sp)
81115e74:	00c00384 	movi	r3,14
81115e78:	19008616 	blt	r3,r4,81116094 <_dtoa_r+0x998>
81115e7c:	200490fa 	slli	r2,r4,3
81115e80:	00e04534 	movhi	r3,33044
81115e84:	d9802217 	ldw	r6,136(sp)
81115e88:	18eb1c04 	addi	r3,r3,-21392
81115e8c:	1885883a 	add	r2,r3,r2
81115e90:	14000017 	ldw	r16,0(r2)
81115e94:	14400117 	ldw	r17,4(r2)
81115e98:	30016316 	blt	r6,zero,81116428 <_dtoa_r+0xd2c>
81115e9c:	800d883a 	mov	r6,r16
81115ea0:	880f883a 	mov	r7,r17
81115ea4:	9009883a 	mov	r4,r18
81115ea8:	980b883a 	mov	r5,r19
81115eac:	1121a100 	call	81121a10 <__divdf3>
81115eb0:	180b883a 	mov	r5,r3
81115eb4:	1009883a 	mov	r4,r2
81115eb8:	1122e5c0 	call	81122e5c <__fixdfsi>
81115ebc:	1009883a 	mov	r4,r2
81115ec0:	102b883a 	mov	r21,r2
81115ec4:	1122edc0 	call	81122edc <__floatsidf>
81115ec8:	800d883a 	mov	r6,r16
81115ecc:	880f883a 	mov	r7,r17
81115ed0:	1009883a 	mov	r4,r2
81115ed4:	180b883a 	mov	r5,r3
81115ed8:	110cd400 	call	8110cd40 <__muldf3>
81115edc:	100d883a 	mov	r6,r2
81115ee0:	180f883a 	mov	r7,r3
81115ee4:	9009883a 	mov	r4,r18
81115ee8:	980b883a 	mov	r5,r19
81115eec:	11225580 	call	81122558 <__subdf3>
81115ef0:	d9c00717 	ldw	r7,28(sp)
81115ef4:	1009883a 	mov	r4,r2
81115ef8:	a8800c04 	addi	r2,r21,48
81115efc:	38800005 	stb	r2,0(r7)
81115f00:	3dc00044 	addi	r23,r7,1
81115f04:	d9c00617 	ldw	r7,24(sp)
81115f08:	01800044 	movi	r6,1
81115f0c:	180b883a 	mov	r5,r3
81115f10:	2005883a 	mov	r2,r4
81115f14:	39803826 	beq	r7,r6,81115ff8 <_dtoa_r+0x8fc>
81115f18:	000d883a 	mov	r6,zero
81115f1c:	01d00934 	movhi	r7,16420
81115f20:	110cd400 	call	8110cd40 <__muldf3>
81115f24:	000d883a 	mov	r6,zero
81115f28:	000f883a 	mov	r7,zero
81115f2c:	1009883a 	mov	r4,r2
81115f30:	180b883a 	mov	r5,r3
81115f34:	1025883a 	mov	r18,r2
81115f38:	1827883a 	mov	r19,r3
81115f3c:	11223000 	call	81122300 <__eqdf2>
81115f40:	103f9a26 	beq	r2,zero,81115dac <__reset+0xfb0f5dac>
81115f44:	d9c00617 	ldw	r7,24(sp)
81115f48:	d8c00717 	ldw	r3,28(sp)
81115f4c:	b829883a 	mov	r20,r23
81115f50:	38bfffc4 	addi	r2,r7,-1
81115f54:	18ad883a 	add	r22,r3,r2
81115f58:	00000a06 	br	81115f84 <_dtoa_r+0x888>
81115f5c:	110cd400 	call	8110cd40 <__muldf3>
81115f60:	000d883a 	mov	r6,zero
81115f64:	000f883a 	mov	r7,zero
81115f68:	1009883a 	mov	r4,r2
81115f6c:	180b883a 	mov	r5,r3
81115f70:	1025883a 	mov	r18,r2
81115f74:	1827883a 	mov	r19,r3
81115f78:	b829883a 	mov	r20,r23
81115f7c:	11223000 	call	81122300 <__eqdf2>
81115f80:	103f8a26 	beq	r2,zero,81115dac <__reset+0xfb0f5dac>
81115f84:	800d883a 	mov	r6,r16
81115f88:	880f883a 	mov	r7,r17
81115f8c:	9009883a 	mov	r4,r18
81115f90:	980b883a 	mov	r5,r19
81115f94:	1121a100 	call	81121a10 <__divdf3>
81115f98:	180b883a 	mov	r5,r3
81115f9c:	1009883a 	mov	r4,r2
81115fa0:	1122e5c0 	call	81122e5c <__fixdfsi>
81115fa4:	1009883a 	mov	r4,r2
81115fa8:	102b883a 	mov	r21,r2
81115fac:	1122edc0 	call	81122edc <__floatsidf>
81115fb0:	800d883a 	mov	r6,r16
81115fb4:	880f883a 	mov	r7,r17
81115fb8:	1009883a 	mov	r4,r2
81115fbc:	180b883a 	mov	r5,r3
81115fc0:	110cd400 	call	8110cd40 <__muldf3>
81115fc4:	100d883a 	mov	r6,r2
81115fc8:	180f883a 	mov	r7,r3
81115fcc:	9009883a 	mov	r4,r18
81115fd0:	980b883a 	mov	r5,r19
81115fd4:	11225580 	call	81122558 <__subdf3>
81115fd8:	aa000c04 	addi	r8,r21,48
81115fdc:	a2000005 	stb	r8,0(r20)
81115fe0:	000d883a 	mov	r6,zero
81115fe4:	01d00934 	movhi	r7,16420
81115fe8:	1009883a 	mov	r4,r2
81115fec:	180b883a 	mov	r5,r3
81115ff0:	a5c00044 	addi	r23,r20,1
81115ff4:	b53fd91e 	bne	r22,r20,81115f5c <__reset+0xfb0f5f5c>
81115ff8:	100d883a 	mov	r6,r2
81115ffc:	180f883a 	mov	r7,r3
81116000:	1009883a 	mov	r4,r2
81116004:	180b883a 	mov	r5,r3
81116008:	112115c0 	call	8112115c <__adddf3>
8111600c:	100d883a 	mov	r6,r2
81116010:	180f883a 	mov	r7,r3
81116014:	8009883a 	mov	r4,r16
81116018:	880b883a 	mov	r5,r17
8111601c:	1027883a 	mov	r19,r2
81116020:	1825883a 	mov	r18,r3
81116024:	11224640 	call	81122464 <__ledf2>
81116028:	10000816 	blt	r2,zero,8111604c <_dtoa_r+0x950>
8111602c:	980d883a 	mov	r6,r19
81116030:	900f883a 	mov	r7,r18
81116034:	8009883a 	mov	r4,r16
81116038:	880b883a 	mov	r5,r17
8111603c:	11223000 	call	81122300 <__eqdf2>
81116040:	103f5a1e 	bne	r2,zero,81115dac <__reset+0xfb0f5dac>
81116044:	ad40004c 	andi	r21,r21,1
81116048:	a83f5826 	beq	r21,zero,81115dac <__reset+0xfb0f5dac>
8111604c:	bd3fffc3 	ldbu	r20,-1(r23)
81116050:	b8bfffc4 	addi	r2,r23,-1
81116054:	1007883a 	mov	r3,r2
81116058:	01400e44 	movi	r5,57
8111605c:	d9800717 	ldw	r6,28(sp)
81116060:	00000506 	br	81116078 <_dtoa_r+0x97c>
81116064:	18ffffc4 	addi	r3,r3,-1
81116068:	11824726 	beq	r2,r6,81116988 <_dtoa_r+0x128c>
8111606c:	1d000003 	ldbu	r20,0(r3)
81116070:	102f883a 	mov	r23,r2
81116074:	10bfffc4 	addi	r2,r2,-1
81116078:	a1003fcc 	andi	r4,r20,255
8111607c:	2100201c 	xori	r4,r4,128
81116080:	213fe004 	addi	r4,r4,-128
81116084:	217ff726 	beq	r4,r5,81116064 <__reset+0xfb0f6064>
81116088:	a2000044 	addi	r8,r20,1
8111608c:	12000005 	stb	r8,0(r2)
81116090:	003f4606 	br	81115dac <__reset+0xfb0f5dac>
81116094:	d9000b17 	ldw	r4,44(sp)
81116098:	2000c826 	beq	r4,zero,811163bc <_dtoa_r+0xcc0>
8111609c:	d9800317 	ldw	r6,12(sp)
811160a0:	00c00044 	movi	r3,1
811160a4:	1980f90e 	bge	r3,r6,8111648c <_dtoa_r+0xd90>
811160a8:	d8800617 	ldw	r2,24(sp)
811160ac:	d8c00a17 	ldw	r3,40(sp)
811160b0:	157fffc4 	addi	r21,r2,-1
811160b4:	1d41f316 	blt	r3,r21,81116884 <_dtoa_r+0x1188>
811160b8:	1d6bc83a 	sub	r21,r3,r21
811160bc:	d9c00617 	ldw	r7,24(sp)
811160c0:	3802aa16 	blt	r7,zero,81116b6c <_dtoa_r+0x1470>
811160c4:	dd000817 	ldw	r20,32(sp)
811160c8:	d8800617 	ldw	r2,24(sp)
811160cc:	d8c00817 	ldw	r3,32(sp)
811160d0:	01400044 	movi	r5,1
811160d4:	e009883a 	mov	r4,fp
811160d8:	1887883a 	add	r3,r3,r2
811160dc:	d8c00815 	stw	r3,32(sp)
811160e0:	b0ad883a 	add	r22,r22,r2
811160e4:	1118c380 	call	81118c38 <__i2b>
811160e8:	1023883a 	mov	r17,r2
811160ec:	a0000826 	beq	r20,zero,81116110 <_dtoa_r+0xa14>
811160f0:	0580070e 	bge	zero,r22,81116110 <_dtoa_r+0xa14>
811160f4:	a005883a 	mov	r2,r20
811160f8:	b500b916 	blt	r22,r20,811163e0 <_dtoa_r+0xce4>
811160fc:	d9000817 	ldw	r4,32(sp)
81116100:	a0a9c83a 	sub	r20,r20,r2
81116104:	b0adc83a 	sub	r22,r22,r2
81116108:	2089c83a 	sub	r4,r4,r2
8111610c:	d9000815 	stw	r4,32(sp)
81116110:	d9800a17 	ldw	r6,40(sp)
81116114:	0181810e 	bge	zero,r6,8111671c <_dtoa_r+0x1020>
81116118:	d9c00b17 	ldw	r7,44(sp)
8111611c:	3800b326 	beq	r7,zero,811163ec <_dtoa_r+0xcf0>
81116120:	a800b226 	beq	r21,zero,811163ec <_dtoa_r+0xcf0>
81116124:	880b883a 	mov	r5,r17
81116128:	a80d883a 	mov	r6,r21
8111612c:	e009883a 	mov	r4,fp
81116130:	1118e7c0 	call	81118e7c <__pow5mult>
81116134:	d9800917 	ldw	r6,36(sp)
81116138:	100b883a 	mov	r5,r2
8111613c:	e009883a 	mov	r4,fp
81116140:	1023883a 	mov	r17,r2
81116144:	1118c7c0 	call	81118c7c <__multiply>
81116148:	1021883a 	mov	r16,r2
8111614c:	d8800a17 	ldw	r2,40(sp)
81116150:	d9400917 	ldw	r5,36(sp)
81116154:	e009883a 	mov	r4,fp
81116158:	1545c83a 	sub	r2,r2,r21
8111615c:	d8800a15 	stw	r2,40(sp)
81116160:	11188c40 	call	811188c4 <_Bfree>
81116164:	d8c00a17 	ldw	r3,40(sp)
81116168:	18009f1e 	bne	r3,zero,811163e8 <_dtoa_r+0xcec>
8111616c:	05c00044 	movi	r23,1
81116170:	e009883a 	mov	r4,fp
81116174:	b80b883a 	mov	r5,r23
81116178:	1118c380 	call	81118c38 <__i2b>
8111617c:	d9000d17 	ldw	r4,52(sp)
81116180:	102b883a 	mov	r21,r2
81116184:	2000ce26 	beq	r4,zero,811164c0 <_dtoa_r+0xdc4>
81116188:	200d883a 	mov	r6,r4
8111618c:	100b883a 	mov	r5,r2
81116190:	e009883a 	mov	r4,fp
81116194:	1118e7c0 	call	81118e7c <__pow5mult>
81116198:	d9800317 	ldw	r6,12(sp)
8111619c:	102b883a 	mov	r21,r2
811161a0:	b981810e 	bge	r23,r6,811167a8 <_dtoa_r+0x10ac>
811161a4:	0027883a 	mov	r19,zero
811161a8:	a8800417 	ldw	r2,16(r21)
811161ac:	05c00804 	movi	r23,32
811161b0:	10800104 	addi	r2,r2,4
811161b4:	1085883a 	add	r2,r2,r2
811161b8:	1085883a 	add	r2,r2,r2
811161bc:	a885883a 	add	r2,r21,r2
811161c0:	11000017 	ldw	r4,0(r2)
811161c4:	1118b200 	call	81118b20 <__hi0bits>
811161c8:	b885c83a 	sub	r2,r23,r2
811161cc:	1585883a 	add	r2,r2,r22
811161d0:	108007cc 	andi	r2,r2,31
811161d4:	1000b326 	beq	r2,zero,811164a4 <_dtoa_r+0xda8>
811161d8:	00c00804 	movi	r3,32
811161dc:	1887c83a 	sub	r3,r3,r2
811161e0:	01000104 	movi	r4,4
811161e4:	20c2cd0e 	bge	r4,r3,81116d1c <_dtoa_r+0x1620>
811161e8:	00c00704 	movi	r3,28
811161ec:	1885c83a 	sub	r2,r3,r2
811161f0:	d8c00817 	ldw	r3,32(sp)
811161f4:	a0a9883a 	add	r20,r20,r2
811161f8:	b0ad883a 	add	r22,r22,r2
811161fc:	1887883a 	add	r3,r3,r2
81116200:	d8c00815 	stw	r3,32(sp)
81116204:	d9800817 	ldw	r6,32(sp)
81116208:	0180040e 	bge	zero,r6,8111621c <_dtoa_r+0xb20>
8111620c:	800b883a 	mov	r5,r16
81116210:	e009883a 	mov	r4,fp
81116214:	1118fc40 	call	81118fc4 <__lshift>
81116218:	1021883a 	mov	r16,r2
8111621c:	0580050e 	bge	zero,r22,81116234 <_dtoa_r+0xb38>
81116220:	a80b883a 	mov	r5,r21
81116224:	b00d883a 	mov	r6,r22
81116228:	e009883a 	mov	r4,fp
8111622c:	1118fc40 	call	81118fc4 <__lshift>
81116230:	102b883a 	mov	r21,r2
81116234:	d9c00e17 	ldw	r7,56(sp)
81116238:	3801211e 	bne	r7,zero,811166c0 <_dtoa_r+0xfc4>
8111623c:	d9800617 	ldw	r6,24(sp)
81116240:	0181380e 	bge	zero,r6,81116724 <_dtoa_r+0x1028>
81116244:	d8c00b17 	ldw	r3,44(sp)
81116248:	1800ab1e 	bne	r3,zero,811164f8 <_dtoa_r+0xdfc>
8111624c:	dc800717 	ldw	r18,28(sp)
81116250:	dcc00617 	ldw	r19,24(sp)
81116254:	9029883a 	mov	r20,r18
81116258:	00000206 	br	81116264 <_dtoa_r+0xb68>
8111625c:	11188ec0 	call	811188ec <__multadd>
81116260:	1021883a 	mov	r16,r2
81116264:	a80b883a 	mov	r5,r21
81116268:	8009883a 	mov	r4,r16
8111626c:	11154f40 	call	811154f4 <quorem>
81116270:	10800c04 	addi	r2,r2,48
81116274:	90800005 	stb	r2,0(r18)
81116278:	94800044 	addi	r18,r18,1
8111627c:	9507c83a 	sub	r3,r18,r20
81116280:	000f883a 	mov	r7,zero
81116284:	01800284 	movi	r6,10
81116288:	800b883a 	mov	r5,r16
8111628c:	e009883a 	mov	r4,fp
81116290:	1cfff216 	blt	r3,r19,8111625c <__reset+0xfb0f625c>
81116294:	1011883a 	mov	r8,r2
81116298:	d8800617 	ldw	r2,24(sp)
8111629c:	0082370e 	bge	zero,r2,81116b7c <_dtoa_r+0x1480>
811162a0:	d9000717 	ldw	r4,28(sp)
811162a4:	0025883a 	mov	r18,zero
811162a8:	20af883a 	add	r23,r4,r2
811162ac:	01800044 	movi	r6,1
811162b0:	800b883a 	mov	r5,r16
811162b4:	e009883a 	mov	r4,fp
811162b8:	da001715 	stw	r8,92(sp)
811162bc:	1118fc40 	call	81118fc4 <__lshift>
811162c0:	a80b883a 	mov	r5,r21
811162c4:	1009883a 	mov	r4,r2
811162c8:	d8800915 	stw	r2,36(sp)
811162cc:	11191140 	call	81119114 <__mcmp>
811162d0:	da001717 	ldw	r8,92(sp)
811162d4:	0081800e 	bge	zero,r2,811168d8 <_dtoa_r+0x11dc>
811162d8:	b93fffc3 	ldbu	r4,-1(r23)
811162dc:	b8bfffc4 	addi	r2,r23,-1
811162e0:	1007883a 	mov	r3,r2
811162e4:	01800e44 	movi	r6,57
811162e8:	d9c00717 	ldw	r7,28(sp)
811162ec:	00000506 	br	81116304 <_dtoa_r+0xc08>
811162f0:	18ffffc4 	addi	r3,r3,-1
811162f4:	11c12326 	beq	r2,r7,81116784 <_dtoa_r+0x1088>
811162f8:	19000003 	ldbu	r4,0(r3)
811162fc:	102f883a 	mov	r23,r2
81116300:	10bfffc4 	addi	r2,r2,-1
81116304:	21403fcc 	andi	r5,r4,255
81116308:	2940201c 	xori	r5,r5,128
8111630c:	297fe004 	addi	r5,r5,-128
81116310:	29bff726 	beq	r5,r6,811162f0 <__reset+0xfb0f62f0>
81116314:	21000044 	addi	r4,r4,1
81116318:	11000005 	stb	r4,0(r2)
8111631c:	a80b883a 	mov	r5,r21
81116320:	e009883a 	mov	r4,fp
81116324:	11188c40 	call	811188c4 <_Bfree>
81116328:	883ea026 	beq	r17,zero,81115dac <__reset+0xfb0f5dac>
8111632c:	90000426 	beq	r18,zero,81116340 <_dtoa_r+0xc44>
81116330:	94400326 	beq	r18,r17,81116340 <_dtoa_r+0xc44>
81116334:	900b883a 	mov	r5,r18
81116338:	e009883a 	mov	r4,fp
8111633c:	11188c40 	call	811188c4 <_Bfree>
81116340:	880b883a 	mov	r5,r17
81116344:	e009883a 	mov	r4,fp
81116348:	11188c40 	call	811188c4 <_Bfree>
8111634c:	003e9706 	br	81115dac <__reset+0xfb0f5dac>
81116350:	01800044 	movi	r6,1
81116354:	d9800e15 	stw	r6,56(sp)
81116358:	003d9606 	br	811159b4 <__reset+0xfb0f59b4>
8111635c:	d8800817 	ldw	r2,32(sp)
81116360:	d8c00517 	ldw	r3,20(sp)
81116364:	d8000d15 	stw	zero,52(sp)
81116368:	10c5c83a 	sub	r2,r2,r3
8111636c:	00c9c83a 	sub	r4,zero,r3
81116370:	d8800815 	stw	r2,32(sp)
81116374:	d9000a15 	stw	r4,40(sp)
81116378:	003d9706 	br	811159d8 <__reset+0xfb0f59d8>
8111637c:	05adc83a 	sub	r22,zero,r22
81116380:	dd800815 	stw	r22,32(sp)
81116384:	002d883a 	mov	r22,zero
81116388:	003d8e06 	br	811159c4 <__reset+0xfb0f59c4>
8111638c:	d9000517 	ldw	r4,20(sp)
81116390:	1122edc0 	call	81122edc <__floatsidf>
81116394:	100d883a 	mov	r6,r2
81116398:	180f883a 	mov	r7,r3
8111639c:	a009883a 	mov	r4,r20
811163a0:	880b883a 	mov	r5,r17
811163a4:	11223000 	call	81122300 <__eqdf2>
811163a8:	103d7126 	beq	r2,zero,81115970 <__reset+0xfb0f5970>
811163ac:	d9c00517 	ldw	r7,20(sp)
811163b0:	39ffffc4 	addi	r7,r7,-1
811163b4:	d9c00515 	stw	r7,20(sp)
811163b8:	003d6d06 	br	81115970 <__reset+0xfb0f5970>
811163bc:	dd400a17 	ldw	r21,40(sp)
811163c0:	dd000817 	ldw	r20,32(sp)
811163c4:	0023883a 	mov	r17,zero
811163c8:	003f4806 	br	811160ec <__reset+0xfb0f60ec>
811163cc:	10e3c83a 	sub	r17,r2,r3
811163d0:	9448983a 	sll	r4,r18,r17
811163d4:	003d3206 	br	811158a0 <__reset+0xfb0f58a0>
811163d8:	d8000e15 	stw	zero,56(sp)
811163dc:	003d7506 	br	811159b4 <__reset+0xfb0f59b4>
811163e0:	b005883a 	mov	r2,r22
811163e4:	003f4506 	br	811160fc <__reset+0xfb0f60fc>
811163e8:	dc000915 	stw	r16,36(sp)
811163ec:	d9800a17 	ldw	r6,40(sp)
811163f0:	d9400917 	ldw	r5,36(sp)
811163f4:	e009883a 	mov	r4,fp
811163f8:	1118e7c0 	call	81118e7c <__pow5mult>
811163fc:	1021883a 	mov	r16,r2
81116400:	003f5a06 	br	8111616c <__reset+0xfb0f616c>
81116404:	01c00044 	movi	r7,1
81116408:	d9c00b15 	stw	r7,44(sp)
8111640c:	d8802217 	ldw	r2,136(sp)
81116410:	0081280e 	bge	zero,r2,811168b4 <_dtoa_r+0x11b8>
81116414:	100d883a 	mov	r6,r2
81116418:	1021883a 	mov	r16,r2
8111641c:	d8800c15 	stw	r2,48(sp)
81116420:	d8800615 	stw	r2,24(sp)
81116424:	003d8806 	br	81115a48 <__reset+0xfb0f5a48>
81116428:	d8800617 	ldw	r2,24(sp)
8111642c:	00be9b16 	blt	zero,r2,81115e9c <__reset+0xfb0f5e9c>
81116430:	10010f1e 	bne	r2,zero,81116870 <_dtoa_r+0x1174>
81116434:	880b883a 	mov	r5,r17
81116438:	000d883a 	mov	r6,zero
8111643c:	01d00534 	movhi	r7,16404
81116440:	8009883a 	mov	r4,r16
81116444:	110cd400 	call	8110cd40 <__muldf3>
81116448:	900d883a 	mov	r6,r18
8111644c:	980f883a 	mov	r7,r19
81116450:	1009883a 	mov	r4,r2
81116454:	180b883a 	mov	r5,r3
81116458:	11223880 	call	81122388 <__gedf2>
8111645c:	002b883a 	mov	r21,zero
81116460:	0023883a 	mov	r17,zero
81116464:	1000bf16 	blt	r2,zero,81116764 <_dtoa_r+0x1068>
81116468:	d9802217 	ldw	r6,136(sp)
8111646c:	ddc00717 	ldw	r23,28(sp)
81116470:	018c303a 	nor	r6,zero,r6
81116474:	d9800515 	stw	r6,20(sp)
81116478:	a80b883a 	mov	r5,r21
8111647c:	e009883a 	mov	r4,fp
81116480:	11188c40 	call	811188c4 <_Bfree>
81116484:	883e4926 	beq	r17,zero,81115dac <__reset+0xfb0f5dac>
81116488:	003fad06 	br	81116340 <__reset+0xfb0f6340>
8111648c:	d9c01117 	ldw	r7,68(sp)
81116490:	3801bc26 	beq	r7,zero,81116b84 <_dtoa_r+0x1488>
81116494:	10810cc4 	addi	r2,r2,1075
81116498:	dd400a17 	ldw	r21,40(sp)
8111649c:	dd000817 	ldw	r20,32(sp)
811164a0:	003f0a06 	br	811160cc <__reset+0xfb0f60cc>
811164a4:	00800704 	movi	r2,28
811164a8:	d9000817 	ldw	r4,32(sp)
811164ac:	a0a9883a 	add	r20,r20,r2
811164b0:	b0ad883a 	add	r22,r22,r2
811164b4:	2089883a 	add	r4,r4,r2
811164b8:	d9000815 	stw	r4,32(sp)
811164bc:	003f5106 	br	81116204 <__reset+0xfb0f6204>
811164c0:	d8c00317 	ldw	r3,12(sp)
811164c4:	b8c1fc0e 	bge	r23,r3,81116cb8 <_dtoa_r+0x15bc>
811164c8:	0027883a 	mov	r19,zero
811164cc:	b805883a 	mov	r2,r23
811164d0:	003f3e06 	br	811161cc <__reset+0xfb0f61cc>
811164d4:	880b883a 	mov	r5,r17
811164d8:	e009883a 	mov	r4,fp
811164dc:	000f883a 	mov	r7,zero
811164e0:	01800284 	movi	r6,10
811164e4:	11188ec0 	call	811188ec <__multadd>
811164e8:	d9000c17 	ldw	r4,48(sp)
811164ec:	1023883a 	mov	r17,r2
811164f0:	0102040e 	bge	zero,r4,81116d04 <_dtoa_r+0x1608>
811164f4:	d9000615 	stw	r4,24(sp)
811164f8:	0500050e 	bge	zero,r20,81116510 <_dtoa_r+0xe14>
811164fc:	880b883a 	mov	r5,r17
81116500:	a00d883a 	mov	r6,r20
81116504:	e009883a 	mov	r4,fp
81116508:	1118fc40 	call	81118fc4 <__lshift>
8111650c:	1023883a 	mov	r17,r2
81116510:	9801241e 	bne	r19,zero,811169a4 <_dtoa_r+0x12a8>
81116514:	8829883a 	mov	r20,r17
81116518:	d9000617 	ldw	r4,24(sp)
8111651c:	dcc00717 	ldw	r19,28(sp)
81116520:	9480004c 	andi	r18,r18,1
81116524:	20bfffc4 	addi	r2,r4,-1
81116528:	9885883a 	add	r2,r19,r2
8111652c:	d8800415 	stw	r2,16(sp)
81116530:	dc800615 	stw	r18,24(sp)
81116534:	a80b883a 	mov	r5,r21
81116538:	8009883a 	mov	r4,r16
8111653c:	11154f40 	call	811154f4 <quorem>
81116540:	880b883a 	mov	r5,r17
81116544:	8009883a 	mov	r4,r16
81116548:	102f883a 	mov	r23,r2
8111654c:	11191140 	call	81119114 <__mcmp>
81116550:	a80b883a 	mov	r5,r21
81116554:	a00d883a 	mov	r6,r20
81116558:	e009883a 	mov	r4,fp
8111655c:	102d883a 	mov	r22,r2
81116560:	11191740 	call	81119174 <__mdiff>
81116564:	1007883a 	mov	r3,r2
81116568:	10800317 	ldw	r2,12(r2)
8111656c:	bc800c04 	addi	r18,r23,48
81116570:	180b883a 	mov	r5,r3
81116574:	10004e1e 	bne	r2,zero,811166b0 <_dtoa_r+0xfb4>
81116578:	8009883a 	mov	r4,r16
8111657c:	d8c01615 	stw	r3,88(sp)
81116580:	11191140 	call	81119114 <__mcmp>
81116584:	d8c01617 	ldw	r3,88(sp)
81116588:	e009883a 	mov	r4,fp
8111658c:	d8801615 	stw	r2,88(sp)
81116590:	180b883a 	mov	r5,r3
81116594:	11188c40 	call	811188c4 <_Bfree>
81116598:	d8801617 	ldw	r2,88(sp)
8111659c:	1000041e 	bne	r2,zero,811165b0 <_dtoa_r+0xeb4>
811165a0:	d9800317 	ldw	r6,12(sp)
811165a4:	3000021e 	bne	r6,zero,811165b0 <_dtoa_r+0xeb4>
811165a8:	d8c00617 	ldw	r3,24(sp)
811165ac:	18003726 	beq	r3,zero,8111668c <_dtoa_r+0xf90>
811165b0:	b0002016 	blt	r22,zero,81116634 <_dtoa_r+0xf38>
811165b4:	b000041e 	bne	r22,zero,811165c8 <_dtoa_r+0xecc>
811165b8:	d9000317 	ldw	r4,12(sp)
811165bc:	2000021e 	bne	r4,zero,811165c8 <_dtoa_r+0xecc>
811165c0:	d8c00617 	ldw	r3,24(sp)
811165c4:	18001b26 	beq	r3,zero,81116634 <_dtoa_r+0xf38>
811165c8:	00810716 	blt	zero,r2,811169e8 <_dtoa_r+0x12ec>
811165cc:	d8c00417 	ldw	r3,16(sp)
811165d0:	9d800044 	addi	r22,r19,1
811165d4:	9c800005 	stb	r18,0(r19)
811165d8:	b02f883a 	mov	r23,r22
811165dc:	98c10626 	beq	r19,r3,811169f8 <_dtoa_r+0x12fc>
811165e0:	800b883a 	mov	r5,r16
811165e4:	000f883a 	mov	r7,zero
811165e8:	01800284 	movi	r6,10
811165ec:	e009883a 	mov	r4,fp
811165f0:	11188ec0 	call	811188ec <__multadd>
811165f4:	1021883a 	mov	r16,r2
811165f8:	000f883a 	mov	r7,zero
811165fc:	01800284 	movi	r6,10
81116600:	880b883a 	mov	r5,r17
81116604:	e009883a 	mov	r4,fp
81116608:	8d002526 	beq	r17,r20,811166a0 <_dtoa_r+0xfa4>
8111660c:	11188ec0 	call	811188ec <__multadd>
81116610:	a00b883a 	mov	r5,r20
81116614:	000f883a 	mov	r7,zero
81116618:	01800284 	movi	r6,10
8111661c:	e009883a 	mov	r4,fp
81116620:	1023883a 	mov	r17,r2
81116624:	11188ec0 	call	811188ec <__multadd>
81116628:	1029883a 	mov	r20,r2
8111662c:	b027883a 	mov	r19,r22
81116630:	003fc006 	br	81116534 <__reset+0xfb0f6534>
81116634:	9011883a 	mov	r8,r18
81116638:	00800e0e 	bge	zero,r2,81116674 <_dtoa_r+0xf78>
8111663c:	800b883a 	mov	r5,r16
81116640:	01800044 	movi	r6,1
81116644:	e009883a 	mov	r4,fp
81116648:	da001715 	stw	r8,92(sp)
8111664c:	1118fc40 	call	81118fc4 <__lshift>
81116650:	a80b883a 	mov	r5,r21
81116654:	1009883a 	mov	r4,r2
81116658:	1021883a 	mov	r16,r2
8111665c:	11191140 	call	81119114 <__mcmp>
81116660:	da001717 	ldw	r8,92(sp)
81116664:	0081960e 	bge	zero,r2,81116cc0 <_dtoa_r+0x15c4>
81116668:	00800e44 	movi	r2,57
8111666c:	40817026 	beq	r8,r2,81116c30 <_dtoa_r+0x1534>
81116670:	ba000c44 	addi	r8,r23,49
81116674:	8825883a 	mov	r18,r17
81116678:	9dc00044 	addi	r23,r19,1
8111667c:	9a000005 	stb	r8,0(r19)
81116680:	a023883a 	mov	r17,r20
81116684:	dc000915 	stw	r16,36(sp)
81116688:	003f2406 	br	8111631c <__reset+0xfb0f631c>
8111668c:	00800e44 	movi	r2,57
81116690:	9011883a 	mov	r8,r18
81116694:	90816626 	beq	r18,r2,81116c30 <_dtoa_r+0x1534>
81116698:	05bff516 	blt	zero,r22,81116670 <__reset+0xfb0f6670>
8111669c:	003ff506 	br	81116674 <__reset+0xfb0f6674>
811166a0:	11188ec0 	call	811188ec <__multadd>
811166a4:	1023883a 	mov	r17,r2
811166a8:	1029883a 	mov	r20,r2
811166ac:	003fdf06 	br	8111662c <__reset+0xfb0f662c>
811166b0:	e009883a 	mov	r4,fp
811166b4:	11188c40 	call	811188c4 <_Bfree>
811166b8:	00800044 	movi	r2,1
811166bc:	003fbc06 	br	811165b0 <__reset+0xfb0f65b0>
811166c0:	a80b883a 	mov	r5,r21
811166c4:	8009883a 	mov	r4,r16
811166c8:	11191140 	call	81119114 <__mcmp>
811166cc:	103edb0e 	bge	r2,zero,8111623c <__reset+0xfb0f623c>
811166d0:	800b883a 	mov	r5,r16
811166d4:	000f883a 	mov	r7,zero
811166d8:	01800284 	movi	r6,10
811166dc:	e009883a 	mov	r4,fp
811166e0:	11188ec0 	call	811188ec <__multadd>
811166e4:	1021883a 	mov	r16,r2
811166e8:	d8800517 	ldw	r2,20(sp)
811166ec:	d8c00b17 	ldw	r3,44(sp)
811166f0:	10bfffc4 	addi	r2,r2,-1
811166f4:	d8800515 	stw	r2,20(sp)
811166f8:	183f761e 	bne	r3,zero,811164d4 <__reset+0xfb0f64d4>
811166fc:	d9000c17 	ldw	r4,48(sp)
81116700:	0101730e 	bge	zero,r4,81116cd0 <_dtoa_r+0x15d4>
81116704:	d9000615 	stw	r4,24(sp)
81116708:	003ed006 	br	8111624c <__reset+0xfb0f624c>
8111670c:	00800084 	movi	r2,2
81116710:	3081861e 	bne	r6,r2,81116d2c <_dtoa_r+0x1630>
81116714:	d8000b15 	stw	zero,44(sp)
81116718:	003f3c06 	br	8111640c <__reset+0xfb0f640c>
8111671c:	dc000917 	ldw	r16,36(sp)
81116720:	003e9206 	br	8111616c <__reset+0xfb0f616c>
81116724:	d9c00317 	ldw	r7,12(sp)
81116728:	00800084 	movi	r2,2
8111672c:	11fec50e 	bge	r2,r7,81116244 <__reset+0xfb0f6244>
81116730:	d9000617 	ldw	r4,24(sp)
81116734:	20013c1e 	bne	r4,zero,81116c28 <_dtoa_r+0x152c>
81116738:	a80b883a 	mov	r5,r21
8111673c:	000f883a 	mov	r7,zero
81116740:	01800144 	movi	r6,5
81116744:	e009883a 	mov	r4,fp
81116748:	11188ec0 	call	811188ec <__multadd>
8111674c:	100b883a 	mov	r5,r2
81116750:	8009883a 	mov	r4,r16
81116754:	102b883a 	mov	r21,r2
81116758:	11191140 	call	81119114 <__mcmp>
8111675c:	dc000915 	stw	r16,36(sp)
81116760:	00bf410e 	bge	zero,r2,81116468 <__reset+0xfb0f6468>
81116764:	d9c00717 	ldw	r7,28(sp)
81116768:	00800c44 	movi	r2,49
8111676c:	38800005 	stb	r2,0(r7)
81116770:	d8800517 	ldw	r2,20(sp)
81116774:	3dc00044 	addi	r23,r7,1
81116778:	10800044 	addi	r2,r2,1
8111677c:	d8800515 	stw	r2,20(sp)
81116780:	003f3d06 	br	81116478 <__reset+0xfb0f6478>
81116784:	d9800517 	ldw	r6,20(sp)
81116788:	d9c00717 	ldw	r7,28(sp)
8111678c:	00800c44 	movi	r2,49
81116790:	31800044 	addi	r6,r6,1
81116794:	d9800515 	stw	r6,20(sp)
81116798:	38800005 	stb	r2,0(r7)
8111679c:	003edf06 	br	8111631c <__reset+0xfb0f631c>
811167a0:	d8000b15 	stw	zero,44(sp)
811167a4:	003c9f06 	br	81115a24 <__reset+0xfb0f5a24>
811167a8:	903e7e1e 	bne	r18,zero,811161a4 <__reset+0xfb0f61a4>
811167ac:	00800434 	movhi	r2,16
811167b0:	10bfffc4 	addi	r2,r2,-1
811167b4:	9884703a 	and	r2,r19,r2
811167b8:	1000ea1e 	bne	r2,zero,81116b64 <_dtoa_r+0x1468>
811167bc:	9cdffc2c 	andhi	r19,r19,32752
811167c0:	9800e826 	beq	r19,zero,81116b64 <_dtoa_r+0x1468>
811167c4:	d9c00817 	ldw	r7,32(sp)
811167c8:	b5800044 	addi	r22,r22,1
811167cc:	04c00044 	movi	r19,1
811167d0:	39c00044 	addi	r7,r7,1
811167d4:	d9c00815 	stw	r7,32(sp)
811167d8:	d8800d17 	ldw	r2,52(sp)
811167dc:	103e721e 	bne	r2,zero,811161a8 <__reset+0xfb0f61a8>
811167e0:	00800044 	movi	r2,1
811167e4:	003e7906 	br	811161cc <__reset+0xfb0f61cc>
811167e8:	8009883a 	mov	r4,r16
811167ec:	1122edc0 	call	81122edc <__floatsidf>
811167f0:	d9800f17 	ldw	r6,60(sp)
811167f4:	d9c01017 	ldw	r7,64(sp)
811167f8:	1009883a 	mov	r4,r2
811167fc:	180b883a 	mov	r5,r3
81116800:	110cd400 	call	8110cd40 <__muldf3>
81116804:	000d883a 	mov	r6,zero
81116808:	01d00734 	movhi	r7,16412
8111680c:	1009883a 	mov	r4,r2
81116810:	180b883a 	mov	r5,r3
81116814:	112115c0 	call	8112115c <__adddf3>
81116818:	047f3034 	movhi	r17,64704
8111681c:	1021883a 	mov	r16,r2
81116820:	1c63883a 	add	r17,r3,r17
81116824:	d9000f17 	ldw	r4,60(sp)
81116828:	d9401017 	ldw	r5,64(sp)
8111682c:	000d883a 	mov	r6,zero
81116830:	01d00534 	movhi	r7,16404
81116834:	11225580 	call	81122558 <__subdf3>
81116838:	800d883a 	mov	r6,r16
8111683c:	880f883a 	mov	r7,r17
81116840:	1009883a 	mov	r4,r2
81116844:	180b883a 	mov	r5,r3
81116848:	102b883a 	mov	r21,r2
8111684c:	1829883a 	mov	r20,r3
81116850:	11223880 	call	81122388 <__gedf2>
81116854:	00806c16 	blt	zero,r2,81116a08 <_dtoa_r+0x130c>
81116858:	89e0003c 	xorhi	r7,r17,32768
8111685c:	800d883a 	mov	r6,r16
81116860:	a809883a 	mov	r4,r21
81116864:	a00b883a 	mov	r5,r20
81116868:	11224640 	call	81122464 <__ledf2>
8111686c:	103d7e0e 	bge	r2,zero,81115e68 <__reset+0xfb0f5e68>
81116870:	002b883a 	mov	r21,zero
81116874:	0023883a 	mov	r17,zero
81116878:	003efb06 	br	81116468 <__reset+0xfb0f6468>
8111687c:	d8800717 	ldw	r2,28(sp)
81116880:	003bd006 	br	811157c4 <__reset+0xfb0f57c4>
81116884:	d9000a17 	ldw	r4,40(sp)
81116888:	d9800d17 	ldw	r6,52(sp)
8111688c:	dd400a15 	stw	r21,40(sp)
81116890:	a905c83a 	sub	r2,r21,r4
81116894:	308d883a 	add	r6,r6,r2
81116898:	d9800d15 	stw	r6,52(sp)
8111689c:	002b883a 	mov	r21,zero
811168a0:	003e0606 	br	811160bc <__reset+0xfb0f60bc>
811168a4:	9023883a 	mov	r17,r18
811168a8:	9829883a 	mov	r20,r19
811168ac:	04000084 	movi	r16,2
811168b0:	003c9206 	br	81115afc <__reset+0xfb0f5afc>
811168b4:	04000044 	movi	r16,1
811168b8:	dc000c15 	stw	r16,48(sp)
811168bc:	dc000615 	stw	r16,24(sp)
811168c0:	dc002215 	stw	r16,136(sp)
811168c4:	e0001115 	stw	zero,68(fp)
811168c8:	000b883a 	mov	r5,zero
811168cc:	003c6906 	br	81115a74 <__reset+0xfb0f5a74>
811168d0:	3021883a 	mov	r16,r6
811168d4:	003ffb06 	br	811168c4 <__reset+0xfb0f68c4>
811168d8:	1000021e 	bne	r2,zero,811168e4 <_dtoa_r+0x11e8>
811168dc:	4200004c 	andi	r8,r8,1
811168e0:	403e7d1e 	bne	r8,zero,811162d8 <__reset+0xfb0f62d8>
811168e4:	01000c04 	movi	r4,48
811168e8:	00000106 	br	811168f0 <_dtoa_r+0x11f4>
811168ec:	102f883a 	mov	r23,r2
811168f0:	b8bfffc4 	addi	r2,r23,-1
811168f4:	10c00007 	ldb	r3,0(r2)
811168f8:	193ffc26 	beq	r3,r4,811168ec <__reset+0xfb0f68ec>
811168fc:	003e8706 	br	8111631c <__reset+0xfb0f631c>
81116900:	d8800517 	ldw	r2,20(sp)
81116904:	00a3c83a 	sub	r17,zero,r2
81116908:	8800a426 	beq	r17,zero,81116b9c <_dtoa_r+0x14a0>
8111690c:	888003cc 	andi	r2,r17,15
81116910:	100490fa 	slli	r2,r2,3
81116914:	00e04534 	movhi	r3,33044
81116918:	18eb1c04 	addi	r3,r3,-21392
8111691c:	1885883a 	add	r2,r3,r2
81116920:	11800017 	ldw	r6,0(r2)
81116924:	11c00117 	ldw	r7,4(r2)
81116928:	9009883a 	mov	r4,r18
8111692c:	980b883a 	mov	r5,r19
81116930:	8823d13a 	srai	r17,r17,4
81116934:	110cd400 	call	8110cd40 <__muldf3>
81116938:	d8800f15 	stw	r2,60(sp)
8111693c:	d8c01015 	stw	r3,64(sp)
81116940:	8800e826 	beq	r17,zero,81116ce4 <_dtoa_r+0x15e8>
81116944:	05204534 	movhi	r20,33044
81116948:	a52b1204 	addi	r20,r20,-21432
8111694c:	04000084 	movi	r16,2
81116950:	8980004c 	andi	r6,r17,1
81116954:	1009883a 	mov	r4,r2
81116958:	8823d07a 	srai	r17,r17,1
8111695c:	180b883a 	mov	r5,r3
81116960:	30000426 	beq	r6,zero,81116974 <_dtoa_r+0x1278>
81116964:	a1800017 	ldw	r6,0(r20)
81116968:	a1c00117 	ldw	r7,4(r20)
8111696c:	84000044 	addi	r16,r16,1
81116970:	110cd400 	call	8110cd40 <__muldf3>
81116974:	a5000204 	addi	r20,r20,8
81116978:	883ff51e 	bne	r17,zero,81116950 <__reset+0xfb0f6950>
8111697c:	d8800f15 	stw	r2,60(sp)
81116980:	d8c01015 	stw	r3,64(sp)
81116984:	003c7606 	br	81115b60 <__reset+0xfb0f5b60>
81116988:	00c00c04 	movi	r3,48
8111698c:	10c00005 	stb	r3,0(r2)
81116990:	d8c00517 	ldw	r3,20(sp)
81116994:	bd3fffc3 	ldbu	r20,-1(r23)
81116998:	18c00044 	addi	r3,r3,1
8111699c:	d8c00515 	stw	r3,20(sp)
811169a0:	003db906 	br	81116088 <__reset+0xfb0f6088>
811169a4:	89400117 	ldw	r5,4(r17)
811169a8:	e009883a 	mov	r4,fp
811169ac:	11188140 	call	81118814 <_Balloc>
811169b0:	89800417 	ldw	r6,16(r17)
811169b4:	89400304 	addi	r5,r17,12
811169b8:	11000304 	addi	r4,r2,12
811169bc:	31800084 	addi	r6,r6,2
811169c0:	318d883a 	add	r6,r6,r6
811169c4:	318d883a 	add	r6,r6,r6
811169c8:	1027883a 	mov	r19,r2
811169cc:	110e8e00 	call	8110e8e0 <memcpy>
811169d0:	01800044 	movi	r6,1
811169d4:	980b883a 	mov	r5,r19
811169d8:	e009883a 	mov	r4,fp
811169dc:	1118fc40 	call	81118fc4 <__lshift>
811169e0:	1029883a 	mov	r20,r2
811169e4:	003ecc06 	br	81116518 <__reset+0xfb0f6518>
811169e8:	00800e44 	movi	r2,57
811169ec:	90809026 	beq	r18,r2,81116c30 <_dtoa_r+0x1534>
811169f0:	92000044 	addi	r8,r18,1
811169f4:	003f1f06 	br	81116674 <__reset+0xfb0f6674>
811169f8:	9011883a 	mov	r8,r18
811169fc:	8825883a 	mov	r18,r17
81116a00:	a023883a 	mov	r17,r20
81116a04:	003e2906 	br	811162ac <__reset+0xfb0f62ac>
81116a08:	002b883a 	mov	r21,zero
81116a0c:	0023883a 	mov	r17,zero
81116a10:	003f5406 	br	81116764 <__reset+0xfb0f6764>
81116a14:	61bfffc4 	addi	r6,r12,-1
81116a18:	300490fa 	slli	r2,r6,3
81116a1c:	00e04534 	movhi	r3,33044
81116a20:	18eb1c04 	addi	r3,r3,-21392
81116a24:	1885883a 	add	r2,r3,r2
81116a28:	11000017 	ldw	r4,0(r2)
81116a2c:	11400117 	ldw	r5,4(r2)
81116a30:	d8800717 	ldw	r2,28(sp)
81116a34:	880f883a 	mov	r7,r17
81116a38:	d9801215 	stw	r6,72(sp)
81116a3c:	800d883a 	mov	r6,r16
81116a40:	db001615 	stw	r12,88(sp)
81116a44:	15c00044 	addi	r23,r2,1
81116a48:	110cd400 	call	8110cd40 <__muldf3>
81116a4c:	d9401017 	ldw	r5,64(sp)
81116a50:	d9000f17 	ldw	r4,60(sp)
81116a54:	d8c01515 	stw	r3,84(sp)
81116a58:	d8801415 	stw	r2,80(sp)
81116a5c:	1122e5c0 	call	81122e5c <__fixdfsi>
81116a60:	1009883a 	mov	r4,r2
81116a64:	1021883a 	mov	r16,r2
81116a68:	1122edc0 	call	81122edc <__floatsidf>
81116a6c:	d9000f17 	ldw	r4,60(sp)
81116a70:	d9401017 	ldw	r5,64(sp)
81116a74:	100d883a 	mov	r6,r2
81116a78:	180f883a 	mov	r7,r3
81116a7c:	11225580 	call	81122558 <__subdf3>
81116a80:	1829883a 	mov	r20,r3
81116a84:	d8c00717 	ldw	r3,28(sp)
81116a88:	84000c04 	addi	r16,r16,48
81116a8c:	1023883a 	mov	r17,r2
81116a90:	1c000005 	stb	r16,0(r3)
81116a94:	db001617 	ldw	r12,88(sp)
81116a98:	00800044 	movi	r2,1
81116a9c:	60802226 	beq	r12,r2,81116b28 <_dtoa_r+0x142c>
81116aa0:	d9c00717 	ldw	r7,28(sp)
81116aa4:	8805883a 	mov	r2,r17
81116aa8:	b82b883a 	mov	r21,r23
81116aac:	3b19883a 	add	r12,r7,r12
81116ab0:	6023883a 	mov	r17,r12
81116ab4:	a007883a 	mov	r3,r20
81116ab8:	dc800f15 	stw	r18,60(sp)
81116abc:	000d883a 	mov	r6,zero
81116ac0:	01d00934 	movhi	r7,16420
81116ac4:	1009883a 	mov	r4,r2
81116ac8:	180b883a 	mov	r5,r3
81116acc:	110cd400 	call	8110cd40 <__muldf3>
81116ad0:	180b883a 	mov	r5,r3
81116ad4:	1009883a 	mov	r4,r2
81116ad8:	1829883a 	mov	r20,r3
81116adc:	1025883a 	mov	r18,r2
81116ae0:	1122e5c0 	call	81122e5c <__fixdfsi>
81116ae4:	1009883a 	mov	r4,r2
81116ae8:	1021883a 	mov	r16,r2
81116aec:	1122edc0 	call	81122edc <__floatsidf>
81116af0:	100d883a 	mov	r6,r2
81116af4:	180f883a 	mov	r7,r3
81116af8:	9009883a 	mov	r4,r18
81116afc:	a00b883a 	mov	r5,r20
81116b00:	84000c04 	addi	r16,r16,48
81116b04:	11225580 	call	81122558 <__subdf3>
81116b08:	ad400044 	addi	r21,r21,1
81116b0c:	ac3fffc5 	stb	r16,-1(r21)
81116b10:	ac7fea1e 	bne	r21,r17,81116abc <__reset+0xfb0f6abc>
81116b14:	1023883a 	mov	r17,r2
81116b18:	d8801217 	ldw	r2,72(sp)
81116b1c:	dc800f17 	ldw	r18,60(sp)
81116b20:	1829883a 	mov	r20,r3
81116b24:	b8af883a 	add	r23,r23,r2
81116b28:	d9001417 	ldw	r4,80(sp)
81116b2c:	d9401517 	ldw	r5,84(sp)
81116b30:	000d883a 	mov	r6,zero
81116b34:	01cff834 	movhi	r7,16352
81116b38:	112115c0 	call	8112115c <__adddf3>
81116b3c:	880d883a 	mov	r6,r17
81116b40:	a00f883a 	mov	r7,r20
81116b44:	1009883a 	mov	r4,r2
81116b48:	180b883a 	mov	r5,r3
81116b4c:	11224640 	call	81122464 <__ledf2>
81116b50:	10003e0e 	bge	r2,zero,81116c4c <_dtoa_r+0x1550>
81116b54:	d9001317 	ldw	r4,76(sp)
81116b58:	bd3fffc3 	ldbu	r20,-1(r23)
81116b5c:	d9000515 	stw	r4,20(sp)
81116b60:	003d3b06 	br	81116050 <__reset+0xfb0f6050>
81116b64:	0027883a 	mov	r19,zero
81116b68:	003f1b06 	br	811167d8 <__reset+0xfb0f67d8>
81116b6c:	d8800817 	ldw	r2,32(sp)
81116b70:	11e9c83a 	sub	r20,r2,r7
81116b74:	0005883a 	mov	r2,zero
81116b78:	003d5406 	br	811160cc <__reset+0xfb0f60cc>
81116b7c:	00800044 	movi	r2,1
81116b80:	003dc706 	br	811162a0 <__reset+0xfb0f62a0>
81116b84:	d8c00217 	ldw	r3,8(sp)
81116b88:	00800d84 	movi	r2,54
81116b8c:	dd400a17 	ldw	r21,40(sp)
81116b90:	10c5c83a 	sub	r2,r2,r3
81116b94:	dd000817 	ldw	r20,32(sp)
81116b98:	003d4c06 	br	811160cc <__reset+0xfb0f60cc>
81116b9c:	dc800f15 	stw	r18,60(sp)
81116ba0:	dcc01015 	stw	r19,64(sp)
81116ba4:	04000084 	movi	r16,2
81116ba8:	003bed06 	br	81115b60 <__reset+0xfb0f5b60>
81116bac:	d9000617 	ldw	r4,24(sp)
81116bb0:	203f0d26 	beq	r4,zero,811167e8 <__reset+0xfb0f67e8>
81116bb4:	d9800c17 	ldw	r6,48(sp)
81116bb8:	01bcab0e 	bge	zero,r6,81115e68 <__reset+0xfb0f5e68>
81116bbc:	d9401017 	ldw	r5,64(sp)
81116bc0:	d9000f17 	ldw	r4,60(sp)
81116bc4:	000d883a 	mov	r6,zero
81116bc8:	01d00934 	movhi	r7,16420
81116bcc:	110cd400 	call	8110cd40 <__muldf3>
81116bd0:	81000044 	addi	r4,r16,1
81116bd4:	d8800f15 	stw	r2,60(sp)
81116bd8:	d8c01015 	stw	r3,64(sp)
81116bdc:	1122edc0 	call	81122edc <__floatsidf>
81116be0:	d9800f17 	ldw	r6,60(sp)
81116be4:	d9c01017 	ldw	r7,64(sp)
81116be8:	1009883a 	mov	r4,r2
81116bec:	180b883a 	mov	r5,r3
81116bf0:	110cd400 	call	8110cd40 <__muldf3>
81116bf4:	01d00734 	movhi	r7,16412
81116bf8:	000d883a 	mov	r6,zero
81116bfc:	1009883a 	mov	r4,r2
81116c00:	180b883a 	mov	r5,r3
81116c04:	112115c0 	call	8112115c <__adddf3>
81116c08:	d9c00517 	ldw	r7,20(sp)
81116c0c:	047f3034 	movhi	r17,64704
81116c10:	1021883a 	mov	r16,r2
81116c14:	39ffffc4 	addi	r7,r7,-1
81116c18:	d9c01315 	stw	r7,76(sp)
81116c1c:	1c63883a 	add	r17,r3,r17
81116c20:	db000c17 	ldw	r12,48(sp)
81116c24:	003bea06 	br	81115bd0 <__reset+0xfb0f5bd0>
81116c28:	dc000915 	stw	r16,36(sp)
81116c2c:	003e0e06 	br	81116468 <__reset+0xfb0f6468>
81116c30:	01000e44 	movi	r4,57
81116c34:	8825883a 	mov	r18,r17
81116c38:	9dc00044 	addi	r23,r19,1
81116c3c:	99000005 	stb	r4,0(r19)
81116c40:	a023883a 	mov	r17,r20
81116c44:	dc000915 	stw	r16,36(sp)
81116c48:	003da406 	br	811162dc <__reset+0xfb0f62dc>
81116c4c:	d9801417 	ldw	r6,80(sp)
81116c50:	d9c01517 	ldw	r7,84(sp)
81116c54:	0009883a 	mov	r4,zero
81116c58:	014ff834 	movhi	r5,16352
81116c5c:	11225580 	call	81122558 <__subdf3>
81116c60:	880d883a 	mov	r6,r17
81116c64:	a00f883a 	mov	r7,r20
81116c68:	1009883a 	mov	r4,r2
81116c6c:	180b883a 	mov	r5,r3
81116c70:	11223880 	call	81122388 <__gedf2>
81116c74:	00bc7c0e 	bge	zero,r2,81115e68 <__reset+0xfb0f5e68>
81116c78:	01000c04 	movi	r4,48
81116c7c:	00000106 	br	81116c84 <_dtoa_r+0x1588>
81116c80:	102f883a 	mov	r23,r2
81116c84:	b8bfffc4 	addi	r2,r23,-1
81116c88:	10c00007 	ldb	r3,0(r2)
81116c8c:	193ffc26 	beq	r3,r4,81116c80 <__reset+0xfb0f6c80>
81116c90:	d9801317 	ldw	r6,76(sp)
81116c94:	d9800515 	stw	r6,20(sp)
81116c98:	003c4406 	br	81115dac <__reset+0xfb0f5dac>
81116c9c:	d9801317 	ldw	r6,76(sp)
81116ca0:	d9800515 	stw	r6,20(sp)
81116ca4:	003cea06 	br	81116050 <__reset+0xfb0f6050>
81116ca8:	dd800f17 	ldw	r22,60(sp)
81116cac:	dcc01017 	ldw	r19,64(sp)
81116cb0:	dc801217 	ldw	r18,72(sp)
81116cb4:	003c6c06 	br	81115e68 <__reset+0xfb0f5e68>
81116cb8:	903e031e 	bne	r18,zero,811164c8 <__reset+0xfb0f64c8>
81116cbc:	003ebb06 	br	811167ac <__reset+0xfb0f67ac>
81116cc0:	103e6c1e 	bne	r2,zero,81116674 <__reset+0xfb0f6674>
81116cc4:	4080004c 	andi	r2,r8,1
81116cc8:	103e6a26 	beq	r2,zero,81116674 <__reset+0xfb0f6674>
81116ccc:	003e6606 	br	81116668 <__reset+0xfb0f6668>
81116cd0:	d8c00317 	ldw	r3,12(sp)
81116cd4:	00800084 	movi	r2,2
81116cd8:	10c02916 	blt	r2,r3,81116d80 <_dtoa_r+0x1684>
81116cdc:	d9000c17 	ldw	r4,48(sp)
81116ce0:	003e8806 	br	81116704 <__reset+0xfb0f6704>
81116ce4:	04000084 	movi	r16,2
81116ce8:	003b9d06 	br	81115b60 <__reset+0xfb0f5b60>
81116cec:	d9001317 	ldw	r4,76(sp)
81116cf0:	d9000515 	stw	r4,20(sp)
81116cf4:	003cd606 	br	81116050 <__reset+0xfb0f6050>
81116cf8:	d8801317 	ldw	r2,76(sp)
81116cfc:	d8800515 	stw	r2,20(sp)
81116d00:	003c2a06 	br	81115dac <__reset+0xfb0f5dac>
81116d04:	d9800317 	ldw	r6,12(sp)
81116d08:	00800084 	movi	r2,2
81116d0c:	11801516 	blt	r2,r6,81116d64 <_dtoa_r+0x1668>
81116d10:	d9c00c17 	ldw	r7,48(sp)
81116d14:	d9c00615 	stw	r7,24(sp)
81116d18:	003df706 	br	811164f8 <__reset+0xfb0f64f8>
81116d1c:	193d3926 	beq	r3,r4,81116204 <__reset+0xfb0f6204>
81116d20:	00c00f04 	movi	r3,60
81116d24:	1885c83a 	sub	r2,r3,r2
81116d28:	003ddf06 	br	811164a8 <__reset+0xfb0f64a8>
81116d2c:	e009883a 	mov	r4,fp
81116d30:	e0001115 	stw	zero,68(fp)
81116d34:	000b883a 	mov	r5,zero
81116d38:	11188140 	call	81118814 <_Balloc>
81116d3c:	d8800715 	stw	r2,28(sp)
81116d40:	d8c00717 	ldw	r3,28(sp)
81116d44:	00bfffc4 	movi	r2,-1
81116d48:	01000044 	movi	r4,1
81116d4c:	d8800c15 	stw	r2,48(sp)
81116d50:	e0c01015 	stw	r3,64(fp)
81116d54:	d9000b15 	stw	r4,44(sp)
81116d58:	d8800615 	stw	r2,24(sp)
81116d5c:	d8002215 	stw	zero,136(sp)
81116d60:	003c4106 	br	81115e68 <__reset+0xfb0f5e68>
81116d64:	d8c00c17 	ldw	r3,48(sp)
81116d68:	d8c00615 	stw	r3,24(sp)
81116d6c:	003e7006 	br	81116730 <__reset+0xfb0f6730>
81116d70:	04400044 	movi	r17,1
81116d74:	003b2006 	br	811159f8 <__reset+0xfb0f59f8>
81116d78:	000b883a 	mov	r5,zero
81116d7c:	003b3d06 	br	81115a74 <__reset+0xfb0f5a74>
81116d80:	d8800c17 	ldw	r2,48(sp)
81116d84:	d8800615 	stw	r2,24(sp)
81116d88:	003e6906 	br	81116730 <__reset+0xfb0f6730>

81116d8c <__sflush_r>:
81116d8c:	defffb04 	addi	sp,sp,-20
81116d90:	de00012e 	bgeu	sp,et,81116d98 <__sflush_r+0xc>
81116d94:	003b68fa 	trap	3
81116d98:	2880030b 	ldhu	r2,12(r5)
81116d9c:	dcc00315 	stw	r19,12(sp)
81116da0:	dc400115 	stw	r17,4(sp)
81116da4:	dfc00415 	stw	ra,16(sp)
81116da8:	dc800215 	stw	r18,8(sp)
81116dac:	dc000015 	stw	r16,0(sp)
81116db0:	10c0020c 	andi	r3,r2,8
81116db4:	2823883a 	mov	r17,r5
81116db8:	2027883a 	mov	r19,r4
81116dbc:	1800311e 	bne	r3,zero,81116e84 <__sflush_r+0xf8>
81116dc0:	28c00117 	ldw	r3,4(r5)
81116dc4:	10820014 	ori	r2,r2,2048
81116dc8:	2880030d 	sth	r2,12(r5)
81116dcc:	00c04b0e 	bge	zero,r3,81116efc <__sflush_r+0x170>
81116dd0:	8a000a17 	ldw	r8,40(r17)
81116dd4:	40002326 	beq	r8,zero,81116e64 <__sflush_r+0xd8>
81116dd8:	9c000017 	ldw	r16,0(r19)
81116ddc:	10c4000c 	andi	r3,r2,4096
81116de0:	98000015 	stw	zero,0(r19)
81116de4:	18004826 	beq	r3,zero,81116f08 <__sflush_r+0x17c>
81116de8:	89801417 	ldw	r6,80(r17)
81116dec:	10c0010c 	andi	r3,r2,4
81116df0:	18000626 	beq	r3,zero,81116e0c <__sflush_r+0x80>
81116df4:	88c00117 	ldw	r3,4(r17)
81116df8:	88800c17 	ldw	r2,48(r17)
81116dfc:	30cdc83a 	sub	r6,r6,r3
81116e00:	10000226 	beq	r2,zero,81116e0c <__sflush_r+0x80>
81116e04:	88800f17 	ldw	r2,60(r17)
81116e08:	308dc83a 	sub	r6,r6,r2
81116e0c:	89400717 	ldw	r5,28(r17)
81116e10:	000f883a 	mov	r7,zero
81116e14:	9809883a 	mov	r4,r19
81116e18:	403ee83a 	callr	r8
81116e1c:	00ffffc4 	movi	r3,-1
81116e20:	10c04426 	beq	r2,r3,81116f34 <__sflush_r+0x1a8>
81116e24:	88c0030b 	ldhu	r3,12(r17)
81116e28:	89000417 	ldw	r4,16(r17)
81116e2c:	88000115 	stw	zero,4(r17)
81116e30:	197dffcc 	andi	r5,r3,63487
81116e34:	8940030d 	sth	r5,12(r17)
81116e38:	89000015 	stw	r4,0(r17)
81116e3c:	18c4000c 	andi	r3,r3,4096
81116e40:	18002c1e 	bne	r3,zero,81116ef4 <__sflush_r+0x168>
81116e44:	89400c17 	ldw	r5,48(r17)
81116e48:	9c000015 	stw	r16,0(r19)
81116e4c:	28000526 	beq	r5,zero,81116e64 <__sflush_r+0xd8>
81116e50:	88801004 	addi	r2,r17,64
81116e54:	28800226 	beq	r5,r2,81116e60 <__sflush_r+0xd4>
81116e58:	9809883a 	mov	r4,r19
81116e5c:	11178440 	call	81117844 <_free_r>
81116e60:	88000c15 	stw	zero,48(r17)
81116e64:	0005883a 	mov	r2,zero
81116e68:	dfc00417 	ldw	ra,16(sp)
81116e6c:	dcc00317 	ldw	r19,12(sp)
81116e70:	dc800217 	ldw	r18,8(sp)
81116e74:	dc400117 	ldw	r17,4(sp)
81116e78:	dc000017 	ldw	r16,0(sp)
81116e7c:	dec00504 	addi	sp,sp,20
81116e80:	f800283a 	ret
81116e84:	2c800417 	ldw	r18,16(r5)
81116e88:	903ff626 	beq	r18,zero,81116e64 <__reset+0xfb0f6e64>
81116e8c:	2c000017 	ldw	r16,0(r5)
81116e90:	108000cc 	andi	r2,r2,3
81116e94:	2c800015 	stw	r18,0(r5)
81116e98:	84a1c83a 	sub	r16,r16,r18
81116e9c:	1000131e 	bne	r2,zero,81116eec <__sflush_r+0x160>
81116ea0:	28800517 	ldw	r2,20(r5)
81116ea4:	88800215 	stw	r2,8(r17)
81116ea8:	04000316 	blt	zero,r16,81116eb8 <__sflush_r+0x12c>
81116eac:	003fed06 	br	81116e64 <__reset+0xfb0f6e64>
81116eb0:	90a5883a 	add	r18,r18,r2
81116eb4:	043feb0e 	bge	zero,r16,81116e64 <__reset+0xfb0f6e64>
81116eb8:	88800917 	ldw	r2,36(r17)
81116ebc:	89400717 	ldw	r5,28(r17)
81116ec0:	800f883a 	mov	r7,r16
81116ec4:	900d883a 	mov	r6,r18
81116ec8:	9809883a 	mov	r4,r19
81116ecc:	103ee83a 	callr	r2
81116ed0:	80a1c83a 	sub	r16,r16,r2
81116ed4:	00bff616 	blt	zero,r2,81116eb0 <__reset+0xfb0f6eb0>
81116ed8:	88c0030b 	ldhu	r3,12(r17)
81116edc:	00bfffc4 	movi	r2,-1
81116ee0:	18c01014 	ori	r3,r3,64
81116ee4:	88c0030d 	sth	r3,12(r17)
81116ee8:	003fdf06 	br	81116e68 <__reset+0xfb0f6e68>
81116eec:	0005883a 	mov	r2,zero
81116ef0:	003fec06 	br	81116ea4 <__reset+0xfb0f6ea4>
81116ef4:	88801415 	stw	r2,80(r17)
81116ef8:	003fd206 	br	81116e44 <__reset+0xfb0f6e44>
81116efc:	28c00f17 	ldw	r3,60(r5)
81116f00:	00ffb316 	blt	zero,r3,81116dd0 <__reset+0xfb0f6dd0>
81116f04:	003fd706 	br	81116e64 <__reset+0xfb0f6e64>
81116f08:	89400717 	ldw	r5,28(r17)
81116f0c:	000d883a 	mov	r6,zero
81116f10:	01c00044 	movi	r7,1
81116f14:	9809883a 	mov	r4,r19
81116f18:	403ee83a 	callr	r8
81116f1c:	100d883a 	mov	r6,r2
81116f20:	00bfffc4 	movi	r2,-1
81116f24:	30801426 	beq	r6,r2,81116f78 <__sflush_r+0x1ec>
81116f28:	8880030b 	ldhu	r2,12(r17)
81116f2c:	8a000a17 	ldw	r8,40(r17)
81116f30:	003fae06 	br	81116dec <__reset+0xfb0f6dec>
81116f34:	98c00017 	ldw	r3,0(r19)
81116f38:	183fba26 	beq	r3,zero,81116e24 <__reset+0xfb0f6e24>
81116f3c:	01000744 	movi	r4,29
81116f40:	19000626 	beq	r3,r4,81116f5c <__sflush_r+0x1d0>
81116f44:	01000584 	movi	r4,22
81116f48:	19000426 	beq	r3,r4,81116f5c <__sflush_r+0x1d0>
81116f4c:	88c0030b 	ldhu	r3,12(r17)
81116f50:	18c01014 	ori	r3,r3,64
81116f54:	88c0030d 	sth	r3,12(r17)
81116f58:	003fc306 	br	81116e68 <__reset+0xfb0f6e68>
81116f5c:	8880030b 	ldhu	r2,12(r17)
81116f60:	88c00417 	ldw	r3,16(r17)
81116f64:	88000115 	stw	zero,4(r17)
81116f68:	10bdffcc 	andi	r2,r2,63487
81116f6c:	8880030d 	sth	r2,12(r17)
81116f70:	88c00015 	stw	r3,0(r17)
81116f74:	003fb306 	br	81116e44 <__reset+0xfb0f6e44>
81116f78:	98800017 	ldw	r2,0(r19)
81116f7c:	103fea26 	beq	r2,zero,81116f28 <__reset+0xfb0f6f28>
81116f80:	00c00744 	movi	r3,29
81116f84:	10c00226 	beq	r2,r3,81116f90 <__sflush_r+0x204>
81116f88:	00c00584 	movi	r3,22
81116f8c:	10c0031e 	bne	r2,r3,81116f9c <__sflush_r+0x210>
81116f90:	9c000015 	stw	r16,0(r19)
81116f94:	0005883a 	mov	r2,zero
81116f98:	003fb306 	br	81116e68 <__reset+0xfb0f6e68>
81116f9c:	88c0030b 	ldhu	r3,12(r17)
81116fa0:	3005883a 	mov	r2,r6
81116fa4:	18c01014 	ori	r3,r3,64
81116fa8:	88c0030d 	sth	r3,12(r17)
81116fac:	003fae06 	br	81116e68 <__reset+0xfb0f6e68>

81116fb0 <_fflush_r>:
81116fb0:	defffd04 	addi	sp,sp,-12
81116fb4:	de00012e 	bgeu	sp,et,81116fbc <_fflush_r+0xc>
81116fb8:	003b68fa 	trap	3
81116fbc:	dc000115 	stw	r16,4(sp)
81116fc0:	dfc00215 	stw	ra,8(sp)
81116fc4:	2021883a 	mov	r16,r4
81116fc8:	20000226 	beq	r4,zero,81116fd4 <_fflush_r+0x24>
81116fcc:	20800e17 	ldw	r2,56(r4)
81116fd0:	10000c26 	beq	r2,zero,81117004 <_fflush_r+0x54>
81116fd4:	2880030f 	ldh	r2,12(r5)
81116fd8:	1000051e 	bne	r2,zero,81116ff0 <_fflush_r+0x40>
81116fdc:	0005883a 	mov	r2,zero
81116fe0:	dfc00217 	ldw	ra,8(sp)
81116fe4:	dc000117 	ldw	r16,4(sp)
81116fe8:	dec00304 	addi	sp,sp,12
81116fec:	f800283a 	ret
81116ff0:	8009883a 	mov	r4,r16
81116ff4:	dfc00217 	ldw	ra,8(sp)
81116ff8:	dc000117 	ldw	r16,4(sp)
81116ffc:	dec00304 	addi	sp,sp,12
81117000:	1116d8c1 	jmpi	81116d8c <__sflush_r>
81117004:	d9400015 	stw	r5,0(sp)
81117008:	11173ac0 	call	811173ac <__sinit>
8111700c:	d9400017 	ldw	r5,0(sp)
81117010:	003ff006 	br	81116fd4 <__reset+0xfb0f6fd4>

81117014 <fflush>:
81117014:	20000526 	beq	r4,zero,8111702c <fflush+0x18>
81117018:	00a04534 	movhi	r2,33044
8111701c:	10b3e404 	addi	r2,r2,-12400
81117020:	200b883a 	mov	r5,r4
81117024:	11000017 	ldw	r4,0(r2)
81117028:	1116fb01 	jmpi	81116fb0 <_fflush_r>
8111702c:	00a04534 	movhi	r2,33044
81117030:	10b3e304 	addi	r2,r2,-12404
81117034:	11000017 	ldw	r4,0(r2)
81117038:	01604474 	movhi	r5,33041
8111703c:	295bec04 	addi	r5,r5,28592
81117040:	11180ec1 	jmpi	811180ec <_fwalk_reent>

81117044 <__fp_unlock>:
81117044:	0005883a 	mov	r2,zero
81117048:	f800283a 	ret

8111704c <_cleanup_r>:
8111704c:	016044b4 	movhi	r5,33042
81117050:	297c3804 	addi	r5,r5,-3872
81117054:	11180ec1 	jmpi	811180ec <_fwalk_reent>

81117058 <__sinit.part.1>:
81117058:	defff704 	addi	sp,sp,-36
8111705c:	00e04474 	movhi	r3,33041
81117060:	de00012e 	bgeu	sp,et,81117068 <__sinit.part.1+0x10>
81117064:	003b68fa 	trap	3
81117068:	18dc1304 	addi	r3,r3,28748
8111706c:	dfc00815 	stw	ra,32(sp)
81117070:	ddc00715 	stw	r23,28(sp)
81117074:	dd800615 	stw	r22,24(sp)
81117078:	dd400515 	stw	r21,20(sp)
8111707c:	dd000415 	stw	r20,16(sp)
81117080:	dcc00315 	stw	r19,12(sp)
81117084:	dc800215 	stw	r18,8(sp)
81117088:	dc400115 	stw	r17,4(sp)
8111708c:	dc000015 	stw	r16,0(sp)
81117090:	24000117 	ldw	r16,4(r4)
81117094:	20c00f15 	stw	r3,60(r4)
81117098:	2080bb04 	addi	r2,r4,748
8111709c:	00c000c4 	movi	r3,3
811170a0:	20c0b915 	stw	r3,740(r4)
811170a4:	2080ba15 	stw	r2,744(r4)
811170a8:	2000b815 	stw	zero,736(r4)
811170ac:	05c00204 	movi	r23,8
811170b0:	00800104 	movi	r2,4
811170b4:	2025883a 	mov	r18,r4
811170b8:	b80d883a 	mov	r6,r23
811170bc:	81001704 	addi	r4,r16,92
811170c0:	000b883a 	mov	r5,zero
811170c4:	80000015 	stw	zero,0(r16)
811170c8:	80000115 	stw	zero,4(r16)
811170cc:	80000215 	stw	zero,8(r16)
811170d0:	8080030d 	sth	r2,12(r16)
811170d4:	80001915 	stw	zero,100(r16)
811170d8:	8000038d 	sth	zero,14(r16)
811170dc:	80000415 	stw	zero,16(r16)
811170e0:	80000515 	stw	zero,20(r16)
811170e4:	80000615 	stw	zero,24(r16)
811170e8:	110ea300 	call	8110ea30 <memset>
811170ec:	05a04474 	movhi	r22,33041
811170f0:	94400217 	ldw	r17,8(r18)
811170f4:	05604474 	movhi	r21,33041
811170f8:	05204474 	movhi	r20,33041
811170fc:	04e04474 	movhi	r19,33041
81117100:	b5bc3704 	addi	r22,r22,-3876
81117104:	ad7c5004 	addi	r21,r21,-3776
81117108:	a53c7104 	addi	r20,r20,-3644
8111710c:	9cfc8a04 	addi	r19,r19,-3544
81117110:	85800815 	stw	r22,32(r16)
81117114:	85400915 	stw	r21,36(r16)
81117118:	85000a15 	stw	r20,40(r16)
8111711c:	84c00b15 	stw	r19,44(r16)
81117120:	84000715 	stw	r16,28(r16)
81117124:	00800284 	movi	r2,10
81117128:	8880030d 	sth	r2,12(r17)
8111712c:	00800044 	movi	r2,1
81117130:	b80d883a 	mov	r6,r23
81117134:	89001704 	addi	r4,r17,92
81117138:	000b883a 	mov	r5,zero
8111713c:	88000015 	stw	zero,0(r17)
81117140:	88000115 	stw	zero,4(r17)
81117144:	88000215 	stw	zero,8(r17)
81117148:	88001915 	stw	zero,100(r17)
8111714c:	8880038d 	sth	r2,14(r17)
81117150:	88000415 	stw	zero,16(r17)
81117154:	88000515 	stw	zero,20(r17)
81117158:	88000615 	stw	zero,24(r17)
8111715c:	110ea300 	call	8110ea30 <memset>
81117160:	94000317 	ldw	r16,12(r18)
81117164:	00800484 	movi	r2,18
81117168:	8c400715 	stw	r17,28(r17)
8111716c:	8d800815 	stw	r22,32(r17)
81117170:	8d400915 	stw	r21,36(r17)
81117174:	8d000a15 	stw	r20,40(r17)
81117178:	8cc00b15 	stw	r19,44(r17)
8111717c:	8080030d 	sth	r2,12(r16)
81117180:	00800084 	movi	r2,2
81117184:	80000015 	stw	zero,0(r16)
81117188:	80000115 	stw	zero,4(r16)
8111718c:	80000215 	stw	zero,8(r16)
81117190:	80001915 	stw	zero,100(r16)
81117194:	8080038d 	sth	r2,14(r16)
81117198:	80000415 	stw	zero,16(r16)
8111719c:	80000515 	stw	zero,20(r16)
811171a0:	80000615 	stw	zero,24(r16)
811171a4:	b80d883a 	mov	r6,r23
811171a8:	000b883a 	mov	r5,zero
811171ac:	81001704 	addi	r4,r16,92
811171b0:	110ea300 	call	8110ea30 <memset>
811171b4:	00800044 	movi	r2,1
811171b8:	84000715 	stw	r16,28(r16)
811171bc:	85800815 	stw	r22,32(r16)
811171c0:	85400915 	stw	r21,36(r16)
811171c4:	85000a15 	stw	r20,40(r16)
811171c8:	84c00b15 	stw	r19,44(r16)
811171cc:	90800e15 	stw	r2,56(r18)
811171d0:	dfc00817 	ldw	ra,32(sp)
811171d4:	ddc00717 	ldw	r23,28(sp)
811171d8:	dd800617 	ldw	r22,24(sp)
811171dc:	dd400517 	ldw	r21,20(sp)
811171e0:	dd000417 	ldw	r20,16(sp)
811171e4:	dcc00317 	ldw	r19,12(sp)
811171e8:	dc800217 	ldw	r18,8(sp)
811171ec:	dc400117 	ldw	r17,4(sp)
811171f0:	dc000017 	ldw	r16,0(sp)
811171f4:	dec00904 	addi	sp,sp,36
811171f8:	f800283a 	ret

811171fc <__fp_lock>:
811171fc:	0005883a 	mov	r2,zero
81117200:	f800283a 	ret

81117204 <__sfmoreglue>:
81117204:	defffc04 	addi	sp,sp,-16
81117208:	de00012e 	bgeu	sp,et,81117210 <__sfmoreglue+0xc>
8111720c:	003b68fa 	trap	3
81117210:	dc400115 	stw	r17,4(sp)
81117214:	2c7fffc4 	addi	r17,r5,-1
81117218:	8c401a24 	muli	r17,r17,104
8111721c:	dc800215 	stw	r18,8(sp)
81117220:	2825883a 	mov	r18,r5
81117224:	89401d04 	addi	r5,r17,116
81117228:	dc000015 	stw	r16,0(sp)
8111722c:	dfc00315 	stw	ra,12(sp)
81117230:	110e0cc0 	call	8110e0cc <_malloc_r>
81117234:	1021883a 	mov	r16,r2
81117238:	10000726 	beq	r2,zero,81117258 <__sfmoreglue+0x54>
8111723c:	11000304 	addi	r4,r2,12
81117240:	10000015 	stw	zero,0(r2)
81117244:	14800115 	stw	r18,4(r2)
81117248:	11000215 	stw	r4,8(r2)
8111724c:	89801a04 	addi	r6,r17,104
81117250:	000b883a 	mov	r5,zero
81117254:	110ea300 	call	8110ea30 <memset>
81117258:	8005883a 	mov	r2,r16
8111725c:	dfc00317 	ldw	ra,12(sp)
81117260:	dc800217 	ldw	r18,8(sp)
81117264:	dc400117 	ldw	r17,4(sp)
81117268:	dc000017 	ldw	r16,0(sp)
8111726c:	dec00404 	addi	sp,sp,16
81117270:	f800283a 	ret

81117274 <__sfp>:
81117274:	defffb04 	addi	sp,sp,-20
81117278:	de00012e 	bgeu	sp,et,81117280 <__sfp+0xc>
8111727c:	003b68fa 	trap	3
81117280:	dc000015 	stw	r16,0(sp)
81117284:	04204534 	movhi	r16,33044
81117288:	8433e304 	addi	r16,r16,-12404
8111728c:	dcc00315 	stw	r19,12(sp)
81117290:	2027883a 	mov	r19,r4
81117294:	81000017 	ldw	r4,0(r16)
81117298:	dfc00415 	stw	ra,16(sp)
8111729c:	dc800215 	stw	r18,8(sp)
811172a0:	20800e17 	ldw	r2,56(r4)
811172a4:	dc400115 	stw	r17,4(sp)
811172a8:	1000021e 	bne	r2,zero,811172b4 <__sfp+0x40>
811172ac:	11170580 	call	81117058 <__sinit.part.1>
811172b0:	81000017 	ldw	r4,0(r16)
811172b4:	2480b804 	addi	r18,r4,736
811172b8:	047fffc4 	movi	r17,-1
811172bc:	91000117 	ldw	r4,4(r18)
811172c0:	94000217 	ldw	r16,8(r18)
811172c4:	213fffc4 	addi	r4,r4,-1
811172c8:	20000a16 	blt	r4,zero,811172f4 <__sfp+0x80>
811172cc:	8080030f 	ldh	r2,12(r16)
811172d0:	10000c26 	beq	r2,zero,81117304 <__sfp+0x90>
811172d4:	80c01d04 	addi	r3,r16,116
811172d8:	00000206 	br	811172e4 <__sfp+0x70>
811172dc:	18bfe60f 	ldh	r2,-104(r3)
811172e0:	10000826 	beq	r2,zero,81117304 <__sfp+0x90>
811172e4:	213fffc4 	addi	r4,r4,-1
811172e8:	1c3ffd04 	addi	r16,r3,-12
811172ec:	18c01a04 	addi	r3,r3,104
811172f0:	247ffa1e 	bne	r4,r17,811172dc <__reset+0xfb0f72dc>
811172f4:	90800017 	ldw	r2,0(r18)
811172f8:	10001d26 	beq	r2,zero,81117370 <__sfp+0xfc>
811172fc:	1025883a 	mov	r18,r2
81117300:	003fee06 	br	811172bc <__reset+0xfb0f72bc>
81117304:	00bfffc4 	movi	r2,-1
81117308:	8080038d 	sth	r2,14(r16)
8111730c:	00800044 	movi	r2,1
81117310:	8080030d 	sth	r2,12(r16)
81117314:	80001915 	stw	zero,100(r16)
81117318:	80000015 	stw	zero,0(r16)
8111731c:	80000215 	stw	zero,8(r16)
81117320:	80000115 	stw	zero,4(r16)
81117324:	80000415 	stw	zero,16(r16)
81117328:	80000515 	stw	zero,20(r16)
8111732c:	80000615 	stw	zero,24(r16)
81117330:	01800204 	movi	r6,8
81117334:	000b883a 	mov	r5,zero
81117338:	81001704 	addi	r4,r16,92
8111733c:	110ea300 	call	8110ea30 <memset>
81117340:	8005883a 	mov	r2,r16
81117344:	80000c15 	stw	zero,48(r16)
81117348:	80000d15 	stw	zero,52(r16)
8111734c:	80001115 	stw	zero,68(r16)
81117350:	80001215 	stw	zero,72(r16)
81117354:	dfc00417 	ldw	ra,16(sp)
81117358:	dcc00317 	ldw	r19,12(sp)
8111735c:	dc800217 	ldw	r18,8(sp)
81117360:	dc400117 	ldw	r17,4(sp)
81117364:	dc000017 	ldw	r16,0(sp)
81117368:	dec00504 	addi	sp,sp,20
8111736c:	f800283a 	ret
81117370:	01400104 	movi	r5,4
81117374:	9809883a 	mov	r4,r19
81117378:	11172040 	call	81117204 <__sfmoreglue>
8111737c:	90800015 	stw	r2,0(r18)
81117380:	103fde1e 	bne	r2,zero,811172fc <__reset+0xfb0f72fc>
81117384:	00800304 	movi	r2,12
81117388:	98800015 	stw	r2,0(r19)
8111738c:	0005883a 	mov	r2,zero
81117390:	003ff006 	br	81117354 <__reset+0xfb0f7354>

81117394 <_cleanup>:
81117394:	00a04534 	movhi	r2,33044
81117398:	10b3e304 	addi	r2,r2,-12404
8111739c:	11000017 	ldw	r4,0(r2)
811173a0:	016044b4 	movhi	r5,33042
811173a4:	297c3804 	addi	r5,r5,-3872
811173a8:	11180ec1 	jmpi	811180ec <_fwalk_reent>

811173ac <__sinit>:
811173ac:	20800e17 	ldw	r2,56(r4)
811173b0:	10000126 	beq	r2,zero,811173b8 <__sinit+0xc>
811173b4:	f800283a 	ret
811173b8:	11170581 	jmpi	81117058 <__sinit.part.1>

811173bc <__sfp_lock_acquire>:
811173bc:	f800283a 	ret

811173c0 <__sfp_lock_release>:
811173c0:	f800283a 	ret

811173c4 <__sinit_lock_acquire>:
811173c4:	f800283a 	ret

811173c8 <__sinit_lock_release>:
811173c8:	f800283a 	ret

811173cc <__fp_lock_all>:
811173cc:	00a04534 	movhi	r2,33044
811173d0:	10b3e404 	addi	r2,r2,-12400
811173d4:	11000017 	ldw	r4,0(r2)
811173d8:	01604474 	movhi	r5,33041
811173dc:	295c7f04 	addi	r5,r5,29180
811173e0:	11180201 	jmpi	81118020 <_fwalk>

811173e4 <__fp_unlock_all>:
811173e4:	00a04534 	movhi	r2,33044
811173e8:	10b3e404 	addi	r2,r2,-12400
811173ec:	11000017 	ldw	r4,0(r2)
811173f0:	01604474 	movhi	r5,33041
811173f4:	295c1104 	addi	r5,r5,28740
811173f8:	11180201 	jmpi	81118020 <_fwalk>

811173fc <__sflags>:
811173fc:	28800007 	ldb	r2,0(r5)
81117400:	00c01c84 	movi	r3,114
81117404:	10c02426 	beq	r2,r3,81117498 <__sflags+0x9c>
81117408:	00c01dc4 	movi	r3,119
8111740c:	10c01e26 	beq	r2,r3,81117488 <__sflags+0x8c>
81117410:	00c01844 	movi	r3,97
81117414:	10c00426 	beq	r2,r3,81117428 <__sflags+0x2c>
81117418:	00800584 	movi	r2,22
8111741c:	20800015 	stw	r2,0(r4)
81117420:	0005883a 	mov	r2,zero
81117424:	f800283a 	ret
81117428:	02c08204 	movi	r11,520
8111742c:	01000044 	movi	r4,1
81117430:	00804204 	movi	r2,264
81117434:	01c00ac4 	movi	r7,43
81117438:	02bff8c4 	movi	r10,-29
8111743c:	027fff04 	movi	r9,-4
81117440:	02001e04 	movi	r8,120
81117444:	29400044 	addi	r5,r5,1
81117448:	28c00007 	ldb	r3,0(r5)
8111744c:	18000626 	beq	r3,zero,81117468 <__sflags+0x6c>
81117450:	19c00826 	beq	r3,r7,81117474 <__sflags+0x78>
81117454:	1a3ffb1e 	bne	r3,r8,81117444 <__reset+0xfb0f7444>
81117458:	29400044 	addi	r5,r5,1
8111745c:	28c00007 	ldb	r3,0(r5)
81117460:	21020014 	ori	r4,r4,2048
81117464:	183ffa1e 	bne	r3,zero,81117450 <__reset+0xfb0f7450>
81117468:	22c8b03a 	or	r4,r4,r11
8111746c:	31000015 	stw	r4,0(r6)
81117470:	f800283a 	ret
81117474:	1284703a 	and	r2,r2,r10
81117478:	2248703a 	and	r4,r4,r9
8111747c:	10800414 	ori	r2,r2,16
81117480:	21000094 	ori	r4,r4,2
81117484:	003fef06 	br	81117444 <__reset+0xfb0f7444>
81117488:	02c18004 	movi	r11,1536
8111748c:	01000044 	movi	r4,1
81117490:	00800204 	movi	r2,8
81117494:	003fe706 	br	81117434 <__reset+0xfb0f7434>
81117498:	0017883a 	mov	r11,zero
8111749c:	0009883a 	mov	r4,zero
811174a0:	00800104 	movi	r2,4
811174a4:	003fe306 	br	81117434 <__reset+0xfb0f7434>

811174a8 <_fread_r>:
811174a8:	defff404 	addi	sp,sp,-48
811174ac:	de00012e 	bgeu	sp,et,811174b4 <_fread_r+0xc>
811174b0:	003b68fa 	trap	3
811174b4:	dd800815 	stw	r22,32(sp)
811174b8:	39ad383a 	mul	r22,r7,r6
811174bc:	dc000215 	stw	r16,8(sp)
811174c0:	dfc00b15 	stw	ra,44(sp)
811174c4:	df000a15 	stw	fp,40(sp)
811174c8:	ddc00915 	stw	r23,36(sp)
811174cc:	dd400715 	stw	r21,28(sp)
811174d0:	dd000615 	stw	r20,24(sp)
811174d4:	dcc00515 	stw	r19,20(sp)
811174d8:	dc800415 	stw	r18,16(sp)
811174dc:	dc400315 	stw	r17,12(sp)
811174e0:	dc000c17 	ldw	r16,48(sp)
811174e4:	b0003b26 	beq	r22,zero,811175d4 <_fread_r+0x12c>
811174e8:	302f883a 	mov	r23,r6
811174ec:	382b883a 	mov	r21,r7
811174f0:	2029883a 	mov	r20,r4
811174f4:	2827883a 	mov	r19,r5
811174f8:	20000226 	beq	r4,zero,81117504 <_fread_r+0x5c>
811174fc:	20800e17 	ldw	r2,56(r4)
81117500:	10006e26 	beq	r2,zero,811176bc <_fread_r+0x214>
81117504:	8080030b 	ldhu	r2,12(r16)
81117508:	10c8000c 	andi	r3,r2,8192
8111750c:	1800061e 	bne	r3,zero,81117528 <_fread_r+0x80>
81117510:	81001917 	ldw	r4,100(r16)
81117514:	00f7ffc4 	movi	r3,-8193
81117518:	10880014 	ori	r2,r2,8192
8111751c:	20c6703a 	and	r3,r4,r3
81117520:	8080030d 	sth	r2,12(r16)
81117524:	80c01915 	stw	r3,100(r16)
81117528:	84400117 	ldw	r17,4(r16)
8111752c:	88005f16 	blt	r17,zero,811176ac <_fread_r+0x204>
81117530:	8809883a 	mov	r4,r17
81117534:	1080008c 	andi	r2,r2,2
81117538:	1000281e 	bne	r2,zero,811175dc <_fread_r+0x134>
8111753c:	b025883a 	mov	r18,r22
81117540:	00000b06 	br	81117570 <_fread_r+0xc8>
81117544:	110e8e00 	call	8110e8e0 <memcpy>
81117548:	80800017 	ldw	r2,0(r16)
8111754c:	9c67883a 	add	r19,r19,r17
81117550:	9465c83a 	sub	r18,r18,r17
81117554:	1463883a 	add	r17,r2,r17
81117558:	800b883a 	mov	r5,r16
8111755c:	a009883a 	mov	r4,r20
81117560:	84400015 	stw	r17,0(r16)
81117564:	110ed540 	call	8110ed54 <__srefill_r>
81117568:	10004c1e 	bne	r2,zero,8111769c <_fread_r+0x1f4>
8111756c:	84400117 	ldw	r17,4(r16)
81117570:	880d883a 	mov	r6,r17
81117574:	9809883a 	mov	r4,r19
81117578:	81400017 	ldw	r5,0(r16)
8111757c:	8cbff136 	bltu	r17,r18,81117544 <__reset+0xfb0f7544>
81117580:	900d883a 	mov	r6,r18
81117584:	110e8e00 	call	8110e8e0 <memcpy>
81117588:	80c00117 	ldw	r3,4(r16)
8111758c:	81000017 	ldw	r4,0(r16)
81117590:	a805883a 	mov	r2,r21
81117594:	1c87c83a 	sub	r3,r3,r18
81117598:	24a5883a 	add	r18,r4,r18
8111759c:	80c00115 	stw	r3,4(r16)
811175a0:	84800015 	stw	r18,0(r16)
811175a4:	dfc00b17 	ldw	ra,44(sp)
811175a8:	df000a17 	ldw	fp,40(sp)
811175ac:	ddc00917 	ldw	r23,36(sp)
811175b0:	dd800817 	ldw	r22,32(sp)
811175b4:	dd400717 	ldw	r21,28(sp)
811175b8:	dd000617 	ldw	r20,24(sp)
811175bc:	dcc00517 	ldw	r19,20(sp)
811175c0:	dc800417 	ldw	r18,16(sp)
811175c4:	dc400317 	ldw	r17,12(sp)
811175c8:	dc000217 	ldw	r16,8(sp)
811175cc:	dec00c04 	addi	sp,sp,48
811175d0:	f800283a 	ret
811175d4:	0005883a 	mov	r2,zero
811175d8:	003ff206 	br	811175a4 <__reset+0xfb0f75a4>
811175dc:	b007883a 	mov	r3,r22
811175e0:	2580012e 	bgeu	r4,r22,811175e8 <_fread_r+0x140>
811175e4:	2007883a 	mov	r3,r4
811175e8:	81400017 	ldw	r5,0(r16)
811175ec:	180d883a 	mov	r6,r3
811175f0:	9809883a 	mov	r4,r19
811175f4:	d8c00115 	stw	r3,4(sp)
811175f8:	110e8e00 	call	8110e8e0 <memcpy>
811175fc:	d8c00117 	ldw	r3,4(sp)
81117600:	84400017 	ldw	r17,0(r16)
81117604:	80800117 	ldw	r2,4(r16)
81117608:	81400c17 	ldw	r5,48(r16)
8111760c:	88e3883a 	add	r17,r17,r3
81117610:	10c5c83a 	sub	r2,r2,r3
81117614:	84400015 	stw	r17,0(r16)
81117618:	80800115 	stw	r2,4(r16)
8111761c:	b0e5c83a 	sub	r18,r22,r3
81117620:	28002b26 	beq	r5,zero,811176d0 <_fread_r+0x228>
81117624:	90002b26 	beq	r18,zero,811176d4 <_fread_r+0x22c>
81117628:	80801004 	addi	r2,r16,64
8111762c:	28800526 	beq	r5,r2,81117644 <_fread_r+0x19c>
81117630:	a009883a 	mov	r4,r20
81117634:	d8c00115 	stw	r3,4(sp)
81117638:	11178440 	call	81117844 <_free_r>
8111763c:	d8c00117 	ldw	r3,4(sp)
81117640:	84400017 	ldw	r17,0(r16)
81117644:	80000c15 	stw	zero,48(r16)
81117648:	80800517 	ldw	r2,20(r16)
8111764c:	87000417 	ldw	fp,16(r16)
81117650:	98e7883a 	add	r19,r19,r3
81117654:	d8800015 	stw	r2,0(sp)
81117658:	00000106 	br	81117660 <_fread_r+0x1b8>
8111765c:	90001d26 	beq	r18,zero,811176d4 <_fread_r+0x22c>
81117660:	84c00415 	stw	r19,16(r16)
81117664:	84800515 	stw	r18,20(r16)
81117668:	84c00015 	stw	r19,0(r16)
8111766c:	a009883a 	mov	r4,r20
81117670:	800b883a 	mov	r5,r16
81117674:	110ed540 	call	8110ed54 <__srefill_r>
81117678:	d9000017 	ldw	r4,0(sp)
8111767c:	80c00117 	ldw	r3,4(r16)
81117680:	87000415 	stw	fp,16(r16)
81117684:	81000515 	stw	r4,20(r16)
81117688:	84400015 	stw	r17,0(r16)
8111768c:	80000115 	stw	zero,4(r16)
81117690:	90e5c83a 	sub	r18,r18,r3
81117694:	98e7883a 	add	r19,r19,r3
81117698:	103ff026 	beq	r2,zero,8111765c <__reset+0xfb0f765c>
8111769c:	b80b883a 	mov	r5,r23
811176a0:	b489c83a 	sub	r4,r22,r18
811176a4:	1120ea40 	call	81120ea4 <__udivsi3>
811176a8:	003fbe06 	br	811175a4 <__reset+0xfb0f75a4>
811176ac:	80000115 	stw	zero,4(r16)
811176b0:	0009883a 	mov	r4,zero
811176b4:	0023883a 	mov	r17,zero
811176b8:	003f9e06 	br	81117534 <__reset+0xfb0f7534>
811176bc:	11173ac0 	call	811173ac <__sinit>
811176c0:	8080030b 	ldhu	r2,12(r16)
811176c4:	10c8000c 	andi	r3,r2,8192
811176c8:	183f971e 	bne	r3,zero,81117528 <__reset+0xfb0f7528>
811176cc:	003f9006 	br	81117510 <__reset+0xfb0f7510>
811176d0:	903fdd1e 	bne	r18,zero,81117648 <__reset+0xfb0f7648>
811176d4:	a805883a 	mov	r2,r21
811176d8:	003fb206 	br	811175a4 <__reset+0xfb0f75a4>

811176dc <fread>:
811176dc:	defffe04 	addi	sp,sp,-8
811176e0:	00a04534 	movhi	r2,33044
811176e4:	de00012e 	bgeu	sp,et,811176ec <fread+0x10>
811176e8:	003b68fa 	trap	3
811176ec:	10b3e404 	addi	r2,r2,-12400
811176f0:	d9c00015 	stw	r7,0(sp)
811176f4:	300f883a 	mov	r7,r6
811176f8:	280d883a 	mov	r6,r5
811176fc:	200b883a 	mov	r5,r4
81117700:	11000017 	ldw	r4,0(r2)
81117704:	dfc00115 	stw	ra,4(sp)
81117708:	11174a80 	call	811174a8 <_fread_r>
8111770c:	dfc00117 	ldw	ra,4(sp)
81117710:	dec00204 	addi	sp,sp,8
81117714:	f800283a 	ret

81117718 <_malloc_trim_r>:
81117718:	defffb04 	addi	sp,sp,-20
8111771c:	de00012e 	bgeu	sp,et,81117724 <_malloc_trim_r+0xc>
81117720:	003b68fa 	trap	3
81117724:	dcc00315 	stw	r19,12(sp)
81117728:	04e04534 	movhi	r19,33044
8111772c:	dc800215 	stw	r18,8(sp)
81117730:	dc400115 	stw	r17,4(sp)
81117734:	dc000015 	stw	r16,0(sp)
81117738:	dfc00415 	stw	ra,16(sp)
8111773c:	2821883a 	mov	r16,r5
81117740:	9cedc404 	addi	r19,r19,-18672
81117744:	2025883a 	mov	r18,r4
81117748:	112403c0 	call	8112403c <__malloc_lock>
8111774c:	98800217 	ldw	r2,8(r19)
81117750:	14400117 	ldw	r17,4(r2)
81117754:	00bfff04 	movi	r2,-4
81117758:	88a2703a 	and	r17,r17,r2
8111775c:	8c21c83a 	sub	r16,r17,r16
81117760:	8403fbc4 	addi	r16,r16,4079
81117764:	8020d33a 	srli	r16,r16,12
81117768:	0083ffc4 	movi	r2,4095
8111776c:	843fffc4 	addi	r16,r16,-1
81117770:	8020933a 	slli	r16,r16,12
81117774:	1400060e 	bge	r2,r16,81117790 <_malloc_trim_r+0x78>
81117778:	000b883a 	mov	r5,zero
8111777c:	9009883a 	mov	r4,r18
81117780:	110ef300 	call	8110ef30 <_sbrk_r>
81117784:	98c00217 	ldw	r3,8(r19)
81117788:	1c47883a 	add	r3,r3,r17
8111778c:	10c00a26 	beq	r2,r3,811177b8 <_malloc_trim_r+0xa0>
81117790:	9009883a 	mov	r4,r18
81117794:	11241640 	call	81124164 <__malloc_unlock>
81117798:	0005883a 	mov	r2,zero
8111779c:	dfc00417 	ldw	ra,16(sp)
811177a0:	dcc00317 	ldw	r19,12(sp)
811177a4:	dc800217 	ldw	r18,8(sp)
811177a8:	dc400117 	ldw	r17,4(sp)
811177ac:	dc000017 	ldw	r16,0(sp)
811177b0:	dec00504 	addi	sp,sp,20
811177b4:	f800283a 	ret
811177b8:	040bc83a 	sub	r5,zero,r16
811177bc:	9009883a 	mov	r4,r18
811177c0:	110ef300 	call	8110ef30 <_sbrk_r>
811177c4:	00ffffc4 	movi	r3,-1
811177c8:	10c00d26 	beq	r2,r3,81117800 <_malloc_trim_r+0xe8>
811177cc:	00e04534 	movhi	r3,33044
811177d0:	18f4a604 	addi	r3,r3,-11624
811177d4:	18800017 	ldw	r2,0(r3)
811177d8:	99000217 	ldw	r4,8(r19)
811177dc:	8c23c83a 	sub	r17,r17,r16
811177e0:	8c400054 	ori	r17,r17,1
811177e4:	1421c83a 	sub	r16,r2,r16
811177e8:	24400115 	stw	r17,4(r4)
811177ec:	9009883a 	mov	r4,r18
811177f0:	1c000015 	stw	r16,0(r3)
811177f4:	11241640 	call	81124164 <__malloc_unlock>
811177f8:	00800044 	movi	r2,1
811177fc:	003fe706 	br	8111779c <__reset+0xfb0f779c>
81117800:	000b883a 	mov	r5,zero
81117804:	9009883a 	mov	r4,r18
81117808:	110ef300 	call	8110ef30 <_sbrk_r>
8111780c:	99000217 	ldw	r4,8(r19)
81117810:	014003c4 	movi	r5,15
81117814:	1107c83a 	sub	r3,r2,r4
81117818:	28ffdd0e 	bge	r5,r3,81117790 <__reset+0xfb0f7790>
8111781c:	01604534 	movhi	r5,33044
81117820:	2973e504 	addi	r5,r5,-12396
81117824:	29400017 	ldw	r5,0(r5)
81117828:	18c00054 	ori	r3,r3,1
8111782c:	20c00115 	stw	r3,4(r4)
81117830:	00e04534 	movhi	r3,33044
81117834:	1145c83a 	sub	r2,r2,r5
81117838:	18f4a604 	addi	r3,r3,-11624
8111783c:	18800015 	stw	r2,0(r3)
81117840:	003fd306 	br	81117790 <__reset+0xfb0f7790>

81117844 <_free_r>:
81117844:	28004326 	beq	r5,zero,81117954 <_free_r+0x110>
81117848:	defffd04 	addi	sp,sp,-12
8111784c:	de00012e 	bgeu	sp,et,81117854 <_free_r+0x10>
81117850:	003b68fa 	trap	3
81117854:	dc400115 	stw	r17,4(sp)
81117858:	dc000015 	stw	r16,0(sp)
8111785c:	2023883a 	mov	r17,r4
81117860:	2821883a 	mov	r16,r5
81117864:	dfc00215 	stw	ra,8(sp)
81117868:	112403c0 	call	8112403c <__malloc_lock>
8111786c:	81ffff17 	ldw	r7,-4(r16)
81117870:	00bfff84 	movi	r2,-2
81117874:	01204534 	movhi	r4,33044
81117878:	81bffe04 	addi	r6,r16,-8
8111787c:	3884703a 	and	r2,r7,r2
81117880:	212dc404 	addi	r4,r4,-18672
81117884:	308b883a 	add	r5,r6,r2
81117888:	2a400117 	ldw	r9,4(r5)
8111788c:	22000217 	ldw	r8,8(r4)
81117890:	00ffff04 	movi	r3,-4
81117894:	48c6703a 	and	r3,r9,r3
81117898:	2a005726 	beq	r5,r8,811179f8 <_free_r+0x1b4>
8111789c:	28c00115 	stw	r3,4(r5)
811178a0:	39c0004c 	andi	r7,r7,1
811178a4:	3800091e 	bne	r7,zero,811178cc <_free_r+0x88>
811178a8:	823ffe17 	ldw	r8,-8(r16)
811178ac:	22400204 	addi	r9,r4,8
811178b0:	320dc83a 	sub	r6,r6,r8
811178b4:	31c00217 	ldw	r7,8(r6)
811178b8:	1205883a 	add	r2,r2,r8
811178bc:	3a406526 	beq	r7,r9,81117a54 <_free_r+0x210>
811178c0:	32000317 	ldw	r8,12(r6)
811178c4:	3a000315 	stw	r8,12(r7)
811178c8:	41c00215 	stw	r7,8(r8)
811178cc:	28cf883a 	add	r7,r5,r3
811178d0:	39c00117 	ldw	r7,4(r7)
811178d4:	39c0004c 	andi	r7,r7,1
811178d8:	38003a26 	beq	r7,zero,811179c4 <_free_r+0x180>
811178dc:	10c00054 	ori	r3,r2,1
811178e0:	30c00115 	stw	r3,4(r6)
811178e4:	3087883a 	add	r3,r6,r2
811178e8:	18800015 	stw	r2,0(r3)
811178ec:	00c07fc4 	movi	r3,511
811178f0:	18801936 	bltu	r3,r2,81117958 <_free_r+0x114>
811178f4:	1004d0fa 	srli	r2,r2,3
811178f8:	01c00044 	movi	r7,1
811178fc:	21400117 	ldw	r5,4(r4)
81117900:	10c00044 	addi	r3,r2,1
81117904:	18c7883a 	add	r3,r3,r3
81117908:	1005d0ba 	srai	r2,r2,2
8111790c:	18c7883a 	add	r3,r3,r3
81117910:	18c7883a 	add	r3,r3,r3
81117914:	1907883a 	add	r3,r3,r4
81117918:	3884983a 	sll	r2,r7,r2
8111791c:	19c00017 	ldw	r7,0(r3)
81117920:	1a3ffe04 	addi	r8,r3,-8
81117924:	1144b03a 	or	r2,r2,r5
81117928:	32000315 	stw	r8,12(r6)
8111792c:	31c00215 	stw	r7,8(r6)
81117930:	20800115 	stw	r2,4(r4)
81117934:	19800015 	stw	r6,0(r3)
81117938:	39800315 	stw	r6,12(r7)
8111793c:	8809883a 	mov	r4,r17
81117940:	dfc00217 	ldw	ra,8(sp)
81117944:	dc400117 	ldw	r17,4(sp)
81117948:	dc000017 	ldw	r16,0(sp)
8111794c:	dec00304 	addi	sp,sp,12
81117950:	11241641 	jmpi	81124164 <__malloc_unlock>
81117954:	f800283a 	ret
81117958:	100ad27a 	srli	r5,r2,9
8111795c:	00c00104 	movi	r3,4
81117960:	19404a36 	bltu	r3,r5,81117a8c <_free_r+0x248>
81117964:	100ad1ba 	srli	r5,r2,6
81117968:	28c00e44 	addi	r3,r5,57
8111796c:	18c7883a 	add	r3,r3,r3
81117970:	29400e04 	addi	r5,r5,56
81117974:	18c7883a 	add	r3,r3,r3
81117978:	18c7883a 	add	r3,r3,r3
8111797c:	1909883a 	add	r4,r3,r4
81117980:	20c00017 	ldw	r3,0(r4)
81117984:	01e04534 	movhi	r7,33044
81117988:	213ffe04 	addi	r4,r4,-8
8111798c:	39edc404 	addi	r7,r7,-18672
81117990:	20c04426 	beq	r4,r3,81117aa4 <_free_r+0x260>
81117994:	01ffff04 	movi	r7,-4
81117998:	19400117 	ldw	r5,4(r3)
8111799c:	29ca703a 	and	r5,r5,r7
811179a0:	1140022e 	bgeu	r2,r5,811179ac <_free_r+0x168>
811179a4:	18c00217 	ldw	r3,8(r3)
811179a8:	20fffb1e 	bne	r4,r3,81117998 <__reset+0xfb0f7998>
811179ac:	19000317 	ldw	r4,12(r3)
811179b0:	31000315 	stw	r4,12(r6)
811179b4:	30c00215 	stw	r3,8(r6)
811179b8:	21800215 	stw	r6,8(r4)
811179bc:	19800315 	stw	r6,12(r3)
811179c0:	003fde06 	br	8111793c <__reset+0xfb0f793c>
811179c4:	29c00217 	ldw	r7,8(r5)
811179c8:	10c5883a 	add	r2,r2,r3
811179cc:	00e04534 	movhi	r3,33044
811179d0:	18edc604 	addi	r3,r3,-18664
811179d4:	38c03b26 	beq	r7,r3,81117ac4 <_free_r+0x280>
811179d8:	2a000317 	ldw	r8,12(r5)
811179dc:	11400054 	ori	r5,r2,1
811179e0:	3087883a 	add	r3,r6,r2
811179e4:	3a000315 	stw	r8,12(r7)
811179e8:	41c00215 	stw	r7,8(r8)
811179ec:	31400115 	stw	r5,4(r6)
811179f0:	18800015 	stw	r2,0(r3)
811179f4:	003fbd06 	br	811178ec <__reset+0xfb0f78ec>
811179f8:	39c0004c 	andi	r7,r7,1
811179fc:	10c5883a 	add	r2,r2,r3
81117a00:	3800071e 	bne	r7,zero,81117a20 <_free_r+0x1dc>
81117a04:	81fffe17 	ldw	r7,-8(r16)
81117a08:	31cdc83a 	sub	r6,r6,r7
81117a0c:	30c00317 	ldw	r3,12(r6)
81117a10:	31400217 	ldw	r5,8(r6)
81117a14:	11c5883a 	add	r2,r2,r7
81117a18:	28c00315 	stw	r3,12(r5)
81117a1c:	19400215 	stw	r5,8(r3)
81117a20:	10c00054 	ori	r3,r2,1
81117a24:	30c00115 	stw	r3,4(r6)
81117a28:	00e04534 	movhi	r3,33044
81117a2c:	18f3e604 	addi	r3,r3,-12392
81117a30:	18c00017 	ldw	r3,0(r3)
81117a34:	21800215 	stw	r6,8(r4)
81117a38:	10ffc036 	bltu	r2,r3,8111793c <__reset+0xfb0f793c>
81117a3c:	00a04534 	movhi	r2,33044
81117a40:	10b44704 	addi	r2,r2,-12004
81117a44:	11400017 	ldw	r5,0(r2)
81117a48:	8809883a 	mov	r4,r17
81117a4c:	11177180 	call	81117718 <_malloc_trim_r>
81117a50:	003fba06 	br	8111793c <__reset+0xfb0f793c>
81117a54:	28c9883a 	add	r4,r5,r3
81117a58:	21000117 	ldw	r4,4(r4)
81117a5c:	2100004c 	andi	r4,r4,1
81117a60:	2000391e 	bne	r4,zero,81117b48 <_free_r+0x304>
81117a64:	29c00217 	ldw	r7,8(r5)
81117a68:	29000317 	ldw	r4,12(r5)
81117a6c:	1885883a 	add	r2,r3,r2
81117a70:	10c00054 	ori	r3,r2,1
81117a74:	39000315 	stw	r4,12(r7)
81117a78:	21c00215 	stw	r7,8(r4)
81117a7c:	30c00115 	stw	r3,4(r6)
81117a80:	308d883a 	add	r6,r6,r2
81117a84:	30800015 	stw	r2,0(r6)
81117a88:	003fac06 	br	8111793c <__reset+0xfb0f793c>
81117a8c:	00c00504 	movi	r3,20
81117a90:	19401536 	bltu	r3,r5,81117ae8 <_free_r+0x2a4>
81117a94:	28c01704 	addi	r3,r5,92
81117a98:	18c7883a 	add	r3,r3,r3
81117a9c:	294016c4 	addi	r5,r5,91
81117aa0:	003fb406 	br	81117974 <__reset+0xfb0f7974>
81117aa4:	280bd0ba 	srai	r5,r5,2
81117aa8:	00c00044 	movi	r3,1
81117aac:	38800117 	ldw	r2,4(r7)
81117ab0:	194a983a 	sll	r5,r3,r5
81117ab4:	2007883a 	mov	r3,r4
81117ab8:	2884b03a 	or	r2,r5,r2
81117abc:	38800115 	stw	r2,4(r7)
81117ac0:	003fbb06 	br	811179b0 <__reset+0xfb0f79b0>
81117ac4:	21800515 	stw	r6,20(r4)
81117ac8:	21800415 	stw	r6,16(r4)
81117acc:	10c00054 	ori	r3,r2,1
81117ad0:	31c00315 	stw	r7,12(r6)
81117ad4:	31c00215 	stw	r7,8(r6)
81117ad8:	30c00115 	stw	r3,4(r6)
81117adc:	308d883a 	add	r6,r6,r2
81117ae0:	30800015 	stw	r2,0(r6)
81117ae4:	003f9506 	br	8111793c <__reset+0xfb0f793c>
81117ae8:	00c01504 	movi	r3,84
81117aec:	19400536 	bltu	r3,r5,81117b04 <_free_r+0x2c0>
81117af0:	100ad33a 	srli	r5,r2,12
81117af4:	28c01bc4 	addi	r3,r5,111
81117af8:	18c7883a 	add	r3,r3,r3
81117afc:	29401b84 	addi	r5,r5,110
81117b00:	003f9c06 	br	81117974 <__reset+0xfb0f7974>
81117b04:	00c05504 	movi	r3,340
81117b08:	19400536 	bltu	r3,r5,81117b20 <_free_r+0x2dc>
81117b0c:	100ad3fa 	srli	r5,r2,15
81117b10:	28c01e04 	addi	r3,r5,120
81117b14:	18c7883a 	add	r3,r3,r3
81117b18:	29401dc4 	addi	r5,r5,119
81117b1c:	003f9506 	br	81117974 <__reset+0xfb0f7974>
81117b20:	00c15504 	movi	r3,1364
81117b24:	19400536 	bltu	r3,r5,81117b3c <_free_r+0x2f8>
81117b28:	100ad4ba 	srli	r5,r2,18
81117b2c:	28c01f44 	addi	r3,r5,125
81117b30:	18c7883a 	add	r3,r3,r3
81117b34:	29401f04 	addi	r5,r5,124
81117b38:	003f8e06 	br	81117974 <__reset+0xfb0f7974>
81117b3c:	00c03f84 	movi	r3,254
81117b40:	01401f84 	movi	r5,126
81117b44:	003f8b06 	br	81117974 <__reset+0xfb0f7974>
81117b48:	10c00054 	ori	r3,r2,1
81117b4c:	30c00115 	stw	r3,4(r6)
81117b50:	308d883a 	add	r6,r6,r2
81117b54:	30800015 	stw	r2,0(r6)
81117b58:	003f7806 	br	8111793c <__reset+0xfb0f793c>

81117b5c <__sfvwrite_r>:
81117b5c:	30800217 	ldw	r2,8(r6)
81117b60:	10006926 	beq	r2,zero,81117d08 <__sfvwrite_r+0x1ac>
81117b64:	defff404 	addi	sp,sp,-48
81117b68:	de00012e 	bgeu	sp,et,81117b70 <__sfvwrite_r+0x14>
81117b6c:	003b68fa 	trap	3
81117b70:	28c0030b 	ldhu	r3,12(r5)
81117b74:	dd400715 	stw	r21,28(sp)
81117b78:	dd000615 	stw	r20,24(sp)
81117b7c:	dc000215 	stw	r16,8(sp)
81117b80:	dfc00b15 	stw	ra,44(sp)
81117b84:	df000a15 	stw	fp,40(sp)
81117b88:	ddc00915 	stw	r23,36(sp)
81117b8c:	dd800815 	stw	r22,32(sp)
81117b90:	dcc00515 	stw	r19,20(sp)
81117b94:	dc800415 	stw	r18,16(sp)
81117b98:	dc400315 	stw	r17,12(sp)
81117b9c:	1880020c 	andi	r2,r3,8
81117ba0:	2821883a 	mov	r16,r5
81117ba4:	202b883a 	mov	r21,r4
81117ba8:	3029883a 	mov	r20,r6
81117bac:	10002726 	beq	r2,zero,81117c4c <__sfvwrite_r+0xf0>
81117bb0:	28800417 	ldw	r2,16(r5)
81117bb4:	10002526 	beq	r2,zero,81117c4c <__sfvwrite_r+0xf0>
81117bb8:	1880008c 	andi	r2,r3,2
81117bbc:	a4400017 	ldw	r17,0(r20)
81117bc0:	10002a26 	beq	r2,zero,81117c6c <__sfvwrite_r+0x110>
81117bc4:	05a00034 	movhi	r22,32768
81117bc8:	0027883a 	mov	r19,zero
81117bcc:	0025883a 	mov	r18,zero
81117bd0:	b5bf0004 	addi	r22,r22,-1024
81117bd4:	980d883a 	mov	r6,r19
81117bd8:	a809883a 	mov	r4,r21
81117bdc:	90004626 	beq	r18,zero,81117cf8 <__sfvwrite_r+0x19c>
81117be0:	900f883a 	mov	r7,r18
81117be4:	b480022e 	bgeu	r22,r18,81117bf0 <__sfvwrite_r+0x94>
81117be8:	01e00034 	movhi	r7,32768
81117bec:	39ff0004 	addi	r7,r7,-1024
81117bf0:	80800917 	ldw	r2,36(r16)
81117bf4:	81400717 	ldw	r5,28(r16)
81117bf8:	103ee83a 	callr	r2
81117bfc:	0080570e 	bge	zero,r2,81117d5c <__sfvwrite_r+0x200>
81117c00:	a0c00217 	ldw	r3,8(r20)
81117c04:	98a7883a 	add	r19,r19,r2
81117c08:	90a5c83a 	sub	r18,r18,r2
81117c0c:	1885c83a 	sub	r2,r3,r2
81117c10:	a0800215 	stw	r2,8(r20)
81117c14:	103fef1e 	bne	r2,zero,81117bd4 <__reset+0xfb0f7bd4>
81117c18:	0005883a 	mov	r2,zero
81117c1c:	dfc00b17 	ldw	ra,44(sp)
81117c20:	df000a17 	ldw	fp,40(sp)
81117c24:	ddc00917 	ldw	r23,36(sp)
81117c28:	dd800817 	ldw	r22,32(sp)
81117c2c:	dd400717 	ldw	r21,28(sp)
81117c30:	dd000617 	ldw	r20,24(sp)
81117c34:	dcc00517 	ldw	r19,20(sp)
81117c38:	dc800417 	ldw	r18,16(sp)
81117c3c:	dc400317 	ldw	r17,12(sp)
81117c40:	dc000217 	ldw	r16,8(sp)
81117c44:	dec00c04 	addi	sp,sp,48
81117c48:	f800283a 	ret
81117c4c:	800b883a 	mov	r5,r16
81117c50:	a809883a 	mov	r4,r21
81117c54:	111533c0 	call	8111533c <__swsetup_r>
81117c58:	1000eb1e 	bne	r2,zero,81118008 <__sfvwrite_r+0x4ac>
81117c5c:	80c0030b 	ldhu	r3,12(r16)
81117c60:	a4400017 	ldw	r17,0(r20)
81117c64:	1880008c 	andi	r2,r3,2
81117c68:	103fd61e 	bne	r2,zero,81117bc4 <__reset+0xfb0f7bc4>
81117c6c:	1880004c 	andi	r2,r3,1
81117c70:	10003f1e 	bne	r2,zero,81117d70 <__sfvwrite_r+0x214>
81117c74:	0039883a 	mov	fp,zero
81117c78:	0025883a 	mov	r18,zero
81117c7c:	90001a26 	beq	r18,zero,81117ce8 <__sfvwrite_r+0x18c>
81117c80:	1880800c 	andi	r2,r3,512
81117c84:	84c00217 	ldw	r19,8(r16)
81117c88:	10002126 	beq	r2,zero,81117d10 <__sfvwrite_r+0x1b4>
81117c8c:	982f883a 	mov	r23,r19
81117c90:	94c09336 	bltu	r18,r19,81117ee0 <__sfvwrite_r+0x384>
81117c94:	1881200c 	andi	r2,r3,1152
81117c98:	10009e1e 	bne	r2,zero,81117f14 <__sfvwrite_r+0x3b8>
81117c9c:	81000017 	ldw	r4,0(r16)
81117ca0:	b80d883a 	mov	r6,r23
81117ca4:	e00b883a 	mov	r5,fp
81117ca8:	11186b80 	call	811186b8 <memmove>
81117cac:	80c00217 	ldw	r3,8(r16)
81117cb0:	81000017 	ldw	r4,0(r16)
81117cb4:	9005883a 	mov	r2,r18
81117cb8:	1ce7c83a 	sub	r19,r3,r19
81117cbc:	25cf883a 	add	r7,r4,r23
81117cc0:	84c00215 	stw	r19,8(r16)
81117cc4:	81c00015 	stw	r7,0(r16)
81117cc8:	a0c00217 	ldw	r3,8(r20)
81117ccc:	e0b9883a 	add	fp,fp,r2
81117cd0:	90a5c83a 	sub	r18,r18,r2
81117cd4:	18a7c83a 	sub	r19,r3,r2
81117cd8:	a4c00215 	stw	r19,8(r20)
81117cdc:	983fce26 	beq	r19,zero,81117c18 <__reset+0xfb0f7c18>
81117ce0:	80c0030b 	ldhu	r3,12(r16)
81117ce4:	903fe61e 	bne	r18,zero,81117c80 <__reset+0xfb0f7c80>
81117ce8:	8f000017 	ldw	fp,0(r17)
81117cec:	8c800117 	ldw	r18,4(r17)
81117cf0:	8c400204 	addi	r17,r17,8
81117cf4:	003fe106 	br	81117c7c <__reset+0xfb0f7c7c>
81117cf8:	8cc00017 	ldw	r19,0(r17)
81117cfc:	8c800117 	ldw	r18,4(r17)
81117d00:	8c400204 	addi	r17,r17,8
81117d04:	003fb306 	br	81117bd4 <__reset+0xfb0f7bd4>
81117d08:	0005883a 	mov	r2,zero
81117d0c:	f800283a 	ret
81117d10:	81000017 	ldw	r4,0(r16)
81117d14:	80800417 	ldw	r2,16(r16)
81117d18:	11005736 	bltu	r2,r4,81117e78 <__sfvwrite_r+0x31c>
81117d1c:	85c00517 	ldw	r23,20(r16)
81117d20:	95c05536 	bltu	r18,r23,81117e78 <__sfvwrite_r+0x31c>
81117d24:	00a00034 	movhi	r2,32768
81117d28:	10bfffc4 	addi	r2,r2,-1
81117d2c:	9009883a 	mov	r4,r18
81117d30:	1480012e 	bgeu	r2,r18,81117d38 <__sfvwrite_r+0x1dc>
81117d34:	1009883a 	mov	r4,r2
81117d38:	b80b883a 	mov	r5,r23
81117d3c:	1120dac0 	call	81120dac <__divsi3>
81117d40:	15cf383a 	mul	r7,r2,r23
81117d44:	81400717 	ldw	r5,28(r16)
81117d48:	80800917 	ldw	r2,36(r16)
81117d4c:	e00d883a 	mov	r6,fp
81117d50:	a809883a 	mov	r4,r21
81117d54:	103ee83a 	callr	r2
81117d58:	00bfdb16 	blt	zero,r2,81117cc8 <__reset+0xfb0f7cc8>
81117d5c:	8080030b 	ldhu	r2,12(r16)
81117d60:	10801014 	ori	r2,r2,64
81117d64:	8080030d 	sth	r2,12(r16)
81117d68:	00bfffc4 	movi	r2,-1
81117d6c:	003fab06 	br	81117c1c <__reset+0xfb0f7c1c>
81117d70:	0027883a 	mov	r19,zero
81117d74:	0011883a 	mov	r8,zero
81117d78:	0039883a 	mov	fp,zero
81117d7c:	0025883a 	mov	r18,zero
81117d80:	90001f26 	beq	r18,zero,81117e00 <__sfvwrite_r+0x2a4>
81117d84:	40005a26 	beq	r8,zero,81117ef0 <__sfvwrite_r+0x394>
81117d88:	982d883a 	mov	r22,r19
81117d8c:	94c0012e 	bgeu	r18,r19,81117d94 <__sfvwrite_r+0x238>
81117d90:	902d883a 	mov	r22,r18
81117d94:	81000017 	ldw	r4,0(r16)
81117d98:	80800417 	ldw	r2,16(r16)
81117d9c:	b02f883a 	mov	r23,r22
81117da0:	81c00517 	ldw	r7,20(r16)
81117da4:	1100032e 	bgeu	r2,r4,81117db4 <__sfvwrite_r+0x258>
81117da8:	80c00217 	ldw	r3,8(r16)
81117dac:	38c7883a 	add	r3,r7,r3
81117db0:	1d801816 	blt	r3,r22,81117e14 <__sfvwrite_r+0x2b8>
81117db4:	b1c03e16 	blt	r22,r7,81117eb0 <__sfvwrite_r+0x354>
81117db8:	80800917 	ldw	r2,36(r16)
81117dbc:	81400717 	ldw	r5,28(r16)
81117dc0:	e00d883a 	mov	r6,fp
81117dc4:	da000115 	stw	r8,4(sp)
81117dc8:	a809883a 	mov	r4,r21
81117dcc:	103ee83a 	callr	r2
81117dd0:	102f883a 	mov	r23,r2
81117dd4:	da000117 	ldw	r8,4(sp)
81117dd8:	00bfe00e 	bge	zero,r2,81117d5c <__reset+0xfb0f7d5c>
81117ddc:	9de7c83a 	sub	r19,r19,r23
81117de0:	98001f26 	beq	r19,zero,81117e60 <__sfvwrite_r+0x304>
81117de4:	a0800217 	ldw	r2,8(r20)
81117de8:	e5f9883a 	add	fp,fp,r23
81117dec:	95e5c83a 	sub	r18,r18,r23
81117df0:	15efc83a 	sub	r23,r2,r23
81117df4:	a5c00215 	stw	r23,8(r20)
81117df8:	b83f8726 	beq	r23,zero,81117c18 <__reset+0xfb0f7c18>
81117dfc:	903fe11e 	bne	r18,zero,81117d84 <__reset+0xfb0f7d84>
81117e00:	8f000017 	ldw	fp,0(r17)
81117e04:	8c800117 	ldw	r18,4(r17)
81117e08:	0011883a 	mov	r8,zero
81117e0c:	8c400204 	addi	r17,r17,8
81117e10:	003fdb06 	br	81117d80 <__reset+0xfb0f7d80>
81117e14:	180d883a 	mov	r6,r3
81117e18:	e00b883a 	mov	r5,fp
81117e1c:	da000115 	stw	r8,4(sp)
81117e20:	d8c00015 	stw	r3,0(sp)
81117e24:	11186b80 	call	811186b8 <memmove>
81117e28:	d8c00017 	ldw	r3,0(sp)
81117e2c:	80800017 	ldw	r2,0(r16)
81117e30:	800b883a 	mov	r5,r16
81117e34:	a809883a 	mov	r4,r21
81117e38:	10c5883a 	add	r2,r2,r3
81117e3c:	80800015 	stw	r2,0(r16)
81117e40:	d8c00015 	stw	r3,0(sp)
81117e44:	1116fb00 	call	81116fb0 <_fflush_r>
81117e48:	d8c00017 	ldw	r3,0(sp)
81117e4c:	da000117 	ldw	r8,4(sp)
81117e50:	103fc21e 	bne	r2,zero,81117d5c <__reset+0xfb0f7d5c>
81117e54:	182f883a 	mov	r23,r3
81117e58:	9de7c83a 	sub	r19,r19,r23
81117e5c:	983fe11e 	bne	r19,zero,81117de4 <__reset+0xfb0f7de4>
81117e60:	800b883a 	mov	r5,r16
81117e64:	a809883a 	mov	r4,r21
81117e68:	1116fb00 	call	81116fb0 <_fflush_r>
81117e6c:	103fbb1e 	bne	r2,zero,81117d5c <__reset+0xfb0f7d5c>
81117e70:	0011883a 	mov	r8,zero
81117e74:	003fdb06 	br	81117de4 <__reset+0xfb0f7de4>
81117e78:	94c0012e 	bgeu	r18,r19,81117e80 <__sfvwrite_r+0x324>
81117e7c:	9027883a 	mov	r19,r18
81117e80:	980d883a 	mov	r6,r19
81117e84:	e00b883a 	mov	r5,fp
81117e88:	11186b80 	call	811186b8 <memmove>
81117e8c:	80800217 	ldw	r2,8(r16)
81117e90:	80c00017 	ldw	r3,0(r16)
81117e94:	14c5c83a 	sub	r2,r2,r19
81117e98:	1cc7883a 	add	r3,r3,r19
81117e9c:	80800215 	stw	r2,8(r16)
81117ea0:	80c00015 	stw	r3,0(r16)
81117ea4:	10004326 	beq	r2,zero,81117fb4 <__sfvwrite_r+0x458>
81117ea8:	9805883a 	mov	r2,r19
81117eac:	003f8606 	br	81117cc8 <__reset+0xfb0f7cc8>
81117eb0:	b00d883a 	mov	r6,r22
81117eb4:	e00b883a 	mov	r5,fp
81117eb8:	da000115 	stw	r8,4(sp)
81117ebc:	11186b80 	call	811186b8 <memmove>
81117ec0:	80800217 	ldw	r2,8(r16)
81117ec4:	80c00017 	ldw	r3,0(r16)
81117ec8:	da000117 	ldw	r8,4(sp)
81117ecc:	1585c83a 	sub	r2,r2,r22
81117ed0:	1dad883a 	add	r22,r3,r22
81117ed4:	80800215 	stw	r2,8(r16)
81117ed8:	85800015 	stw	r22,0(r16)
81117edc:	003fbf06 	br	81117ddc <__reset+0xfb0f7ddc>
81117ee0:	81000017 	ldw	r4,0(r16)
81117ee4:	9027883a 	mov	r19,r18
81117ee8:	902f883a 	mov	r23,r18
81117eec:	003f6c06 	br	81117ca0 <__reset+0xfb0f7ca0>
81117ef0:	900d883a 	mov	r6,r18
81117ef4:	01400284 	movi	r5,10
81117ef8:	e009883a 	mov	r4,fp
81117efc:	11185d40 	call	811185d4 <memchr>
81117f00:	10003e26 	beq	r2,zero,81117ffc <__sfvwrite_r+0x4a0>
81117f04:	10800044 	addi	r2,r2,1
81117f08:	1727c83a 	sub	r19,r2,fp
81117f0c:	02000044 	movi	r8,1
81117f10:	003f9d06 	br	81117d88 <__reset+0xfb0f7d88>
81117f14:	80800517 	ldw	r2,20(r16)
81117f18:	81400417 	ldw	r5,16(r16)
81117f1c:	81c00017 	ldw	r7,0(r16)
81117f20:	10a7883a 	add	r19,r2,r2
81117f24:	9885883a 	add	r2,r19,r2
81117f28:	1026d7fa 	srli	r19,r2,31
81117f2c:	396dc83a 	sub	r22,r7,r5
81117f30:	b1000044 	addi	r4,r22,1
81117f34:	9885883a 	add	r2,r19,r2
81117f38:	1027d07a 	srai	r19,r2,1
81117f3c:	2485883a 	add	r2,r4,r18
81117f40:	980d883a 	mov	r6,r19
81117f44:	9880022e 	bgeu	r19,r2,81117f50 <__sfvwrite_r+0x3f4>
81117f48:	1027883a 	mov	r19,r2
81117f4c:	100d883a 	mov	r6,r2
81117f50:	18c1000c 	andi	r3,r3,1024
81117f54:	18001c26 	beq	r3,zero,81117fc8 <__sfvwrite_r+0x46c>
81117f58:	300b883a 	mov	r5,r6
81117f5c:	a809883a 	mov	r4,r21
81117f60:	110e0cc0 	call	8110e0cc <_malloc_r>
81117f64:	102f883a 	mov	r23,r2
81117f68:	10002926 	beq	r2,zero,81118010 <__sfvwrite_r+0x4b4>
81117f6c:	81400417 	ldw	r5,16(r16)
81117f70:	b00d883a 	mov	r6,r22
81117f74:	1009883a 	mov	r4,r2
81117f78:	110e8e00 	call	8110e8e0 <memcpy>
81117f7c:	8080030b 	ldhu	r2,12(r16)
81117f80:	00fedfc4 	movi	r3,-1153
81117f84:	10c4703a 	and	r2,r2,r3
81117f88:	10802014 	ori	r2,r2,128
81117f8c:	8080030d 	sth	r2,12(r16)
81117f90:	bd89883a 	add	r4,r23,r22
81117f94:	9d8fc83a 	sub	r7,r19,r22
81117f98:	85c00415 	stw	r23,16(r16)
81117f9c:	84c00515 	stw	r19,20(r16)
81117fa0:	81000015 	stw	r4,0(r16)
81117fa4:	9027883a 	mov	r19,r18
81117fa8:	81c00215 	stw	r7,8(r16)
81117fac:	902f883a 	mov	r23,r18
81117fb0:	003f3b06 	br	81117ca0 <__reset+0xfb0f7ca0>
81117fb4:	800b883a 	mov	r5,r16
81117fb8:	a809883a 	mov	r4,r21
81117fbc:	1116fb00 	call	81116fb0 <_fflush_r>
81117fc0:	103fb926 	beq	r2,zero,81117ea8 <__reset+0xfb0f7ea8>
81117fc4:	003f6506 	br	81117d5c <__reset+0xfb0f7d5c>
81117fc8:	a809883a 	mov	r4,r21
81117fcc:	1119a500 	call	81119a50 <_realloc_r>
81117fd0:	102f883a 	mov	r23,r2
81117fd4:	103fee1e 	bne	r2,zero,81117f90 <__reset+0xfb0f7f90>
81117fd8:	81400417 	ldw	r5,16(r16)
81117fdc:	a809883a 	mov	r4,r21
81117fe0:	11178440 	call	81117844 <_free_r>
81117fe4:	8080030b 	ldhu	r2,12(r16)
81117fe8:	00ffdfc4 	movi	r3,-129
81117fec:	1884703a 	and	r2,r3,r2
81117ff0:	00c00304 	movi	r3,12
81117ff4:	a8c00015 	stw	r3,0(r21)
81117ff8:	003f5906 	br	81117d60 <__reset+0xfb0f7d60>
81117ffc:	94c00044 	addi	r19,r18,1
81118000:	02000044 	movi	r8,1
81118004:	003f6006 	br	81117d88 <__reset+0xfb0f7d88>
81118008:	00bfffc4 	movi	r2,-1
8111800c:	003f0306 	br	81117c1c <__reset+0xfb0f7c1c>
81118010:	00800304 	movi	r2,12
81118014:	a8800015 	stw	r2,0(r21)
81118018:	8080030b 	ldhu	r2,12(r16)
8111801c:	003f5006 	br	81117d60 <__reset+0xfb0f7d60>

81118020 <_fwalk>:
81118020:	defff704 	addi	sp,sp,-36
81118024:	de00012e 	bgeu	sp,et,8111802c <_fwalk+0xc>
81118028:	003b68fa 	trap	3
8111802c:	dd000415 	stw	r20,16(sp)
81118030:	dfc00815 	stw	ra,32(sp)
81118034:	ddc00715 	stw	r23,28(sp)
81118038:	dd800615 	stw	r22,24(sp)
8111803c:	dd400515 	stw	r21,20(sp)
81118040:	dcc00315 	stw	r19,12(sp)
81118044:	dc800215 	stw	r18,8(sp)
81118048:	dc400115 	stw	r17,4(sp)
8111804c:	dc000015 	stw	r16,0(sp)
81118050:	2500b804 	addi	r20,r4,736
81118054:	a0002326 	beq	r20,zero,811180e4 <_fwalk+0xc4>
81118058:	282b883a 	mov	r21,r5
8111805c:	002f883a 	mov	r23,zero
81118060:	05800044 	movi	r22,1
81118064:	04ffffc4 	movi	r19,-1
81118068:	a4400117 	ldw	r17,4(r20)
8111806c:	a4800217 	ldw	r18,8(r20)
81118070:	8c7fffc4 	addi	r17,r17,-1
81118074:	88000d16 	blt	r17,zero,811180ac <_fwalk+0x8c>
81118078:	94000304 	addi	r16,r18,12
8111807c:	94800384 	addi	r18,r18,14
81118080:	8080000b 	ldhu	r2,0(r16)
81118084:	8c7fffc4 	addi	r17,r17,-1
81118088:	813ffd04 	addi	r4,r16,-12
8111808c:	b080042e 	bgeu	r22,r2,811180a0 <_fwalk+0x80>
81118090:	9080000f 	ldh	r2,0(r18)
81118094:	14c00226 	beq	r2,r19,811180a0 <_fwalk+0x80>
81118098:	a83ee83a 	callr	r21
8111809c:	b8aeb03a 	or	r23,r23,r2
811180a0:	84001a04 	addi	r16,r16,104
811180a4:	94801a04 	addi	r18,r18,104
811180a8:	8cfff51e 	bne	r17,r19,81118080 <__reset+0xfb0f8080>
811180ac:	a5000017 	ldw	r20,0(r20)
811180b0:	a03fed1e 	bne	r20,zero,81118068 <__reset+0xfb0f8068>
811180b4:	b805883a 	mov	r2,r23
811180b8:	dfc00817 	ldw	ra,32(sp)
811180bc:	ddc00717 	ldw	r23,28(sp)
811180c0:	dd800617 	ldw	r22,24(sp)
811180c4:	dd400517 	ldw	r21,20(sp)
811180c8:	dd000417 	ldw	r20,16(sp)
811180cc:	dcc00317 	ldw	r19,12(sp)
811180d0:	dc800217 	ldw	r18,8(sp)
811180d4:	dc400117 	ldw	r17,4(sp)
811180d8:	dc000017 	ldw	r16,0(sp)
811180dc:	dec00904 	addi	sp,sp,36
811180e0:	f800283a 	ret
811180e4:	002f883a 	mov	r23,zero
811180e8:	003ff206 	br	811180b4 <__reset+0xfb0f80b4>

811180ec <_fwalk_reent>:
811180ec:	defff704 	addi	sp,sp,-36
811180f0:	de00012e 	bgeu	sp,et,811180f8 <_fwalk_reent+0xc>
811180f4:	003b68fa 	trap	3
811180f8:	dd000415 	stw	r20,16(sp)
811180fc:	dfc00815 	stw	ra,32(sp)
81118100:	ddc00715 	stw	r23,28(sp)
81118104:	dd800615 	stw	r22,24(sp)
81118108:	dd400515 	stw	r21,20(sp)
8111810c:	dcc00315 	stw	r19,12(sp)
81118110:	dc800215 	stw	r18,8(sp)
81118114:	dc400115 	stw	r17,4(sp)
81118118:	dc000015 	stw	r16,0(sp)
8111811c:	2500b804 	addi	r20,r4,736
81118120:	a0002326 	beq	r20,zero,811181b0 <_fwalk_reent+0xc4>
81118124:	282b883a 	mov	r21,r5
81118128:	2027883a 	mov	r19,r4
8111812c:	002f883a 	mov	r23,zero
81118130:	05800044 	movi	r22,1
81118134:	04bfffc4 	movi	r18,-1
81118138:	a4400117 	ldw	r17,4(r20)
8111813c:	a4000217 	ldw	r16,8(r20)
81118140:	8c7fffc4 	addi	r17,r17,-1
81118144:	88000c16 	blt	r17,zero,81118178 <_fwalk_reent+0x8c>
81118148:	84000304 	addi	r16,r16,12
8111814c:	8080000b 	ldhu	r2,0(r16)
81118150:	8c7fffc4 	addi	r17,r17,-1
81118154:	817ffd04 	addi	r5,r16,-12
81118158:	b080052e 	bgeu	r22,r2,81118170 <_fwalk_reent+0x84>
8111815c:	8080008f 	ldh	r2,2(r16)
81118160:	9809883a 	mov	r4,r19
81118164:	14800226 	beq	r2,r18,81118170 <_fwalk_reent+0x84>
81118168:	a83ee83a 	callr	r21
8111816c:	b8aeb03a 	or	r23,r23,r2
81118170:	84001a04 	addi	r16,r16,104
81118174:	8cbff51e 	bne	r17,r18,8111814c <__reset+0xfb0f814c>
81118178:	a5000017 	ldw	r20,0(r20)
8111817c:	a03fee1e 	bne	r20,zero,81118138 <__reset+0xfb0f8138>
81118180:	b805883a 	mov	r2,r23
81118184:	dfc00817 	ldw	ra,32(sp)
81118188:	ddc00717 	ldw	r23,28(sp)
8111818c:	dd800617 	ldw	r22,24(sp)
81118190:	dd400517 	ldw	r21,20(sp)
81118194:	dd000417 	ldw	r20,16(sp)
81118198:	dcc00317 	ldw	r19,12(sp)
8111819c:	dc800217 	ldw	r18,8(sp)
811181a0:	dc400117 	ldw	r17,4(sp)
811181a4:	dc000017 	ldw	r16,0(sp)
811181a8:	dec00904 	addi	sp,sp,36
811181ac:	f800283a 	ret
811181b0:	002f883a 	mov	r23,zero
811181b4:	003ff206 	br	81118180 <__reset+0xfb0f8180>

811181b8 <_isatty_r>:
811181b8:	defffd04 	addi	sp,sp,-12
811181bc:	de00012e 	bgeu	sp,et,811181c4 <_isatty_r+0xc>
811181c0:	003b68fa 	trap	3
811181c4:	dc000015 	stw	r16,0(sp)
811181c8:	04204534 	movhi	r16,33044
811181cc:	dc400115 	stw	r17,4(sp)
811181d0:	84344404 	addi	r16,r16,-12016
811181d4:	2023883a 	mov	r17,r4
811181d8:	2809883a 	mov	r4,r5
811181dc:	dfc00215 	stw	ra,8(sp)
811181e0:	80000015 	stw	zero,0(r16)
811181e4:	11233280 	call	81123328 <isatty>
811181e8:	00ffffc4 	movi	r3,-1
811181ec:	10c00526 	beq	r2,r3,81118204 <_isatty_r+0x4c>
811181f0:	dfc00217 	ldw	ra,8(sp)
811181f4:	dc400117 	ldw	r17,4(sp)
811181f8:	dc000017 	ldw	r16,0(sp)
811181fc:	dec00304 	addi	sp,sp,12
81118200:	f800283a 	ret
81118204:	80c00017 	ldw	r3,0(r16)
81118208:	183ff926 	beq	r3,zero,811181f0 <__reset+0xfb0f81f0>
8111820c:	88c00015 	stw	r3,0(r17)
81118210:	003ff706 	br	811181f0 <__reset+0xfb0f81f0>

81118214 <iswspace>:
81118214:	00803fc4 	movi	r2,255
81118218:	11000836 	bltu	r2,r4,8111823c <iswspace+0x28>
8111821c:	00a04534 	movhi	r2,33044
81118220:	10b3e204 	addi	r2,r2,-12408
81118224:	10800017 	ldw	r2,0(r2)
81118228:	1109883a 	add	r4,r2,r4
8111822c:	20800043 	ldbu	r2,1(r4)
81118230:	1080020c 	andi	r2,r2,8
81118234:	10803fcc 	andi	r2,r2,255
81118238:	f800283a 	ret
8111823c:	0005883a 	mov	r2,zero
81118240:	f800283a 	ret

81118244 <_setlocale_r>:
81118244:	30001d26 	beq	r6,zero,811182bc <_setlocale_r+0x78>
81118248:	01604534 	movhi	r5,33044
8111824c:	defffe04 	addi	sp,sp,-8
81118250:	296b0204 	addi	r5,r5,-21496
81118254:	3009883a 	mov	r4,r6
81118258:	de00012e 	bgeu	sp,et,81118260 <_setlocale_r+0x1c>
8111825c:	003b68fa 	trap	3
81118260:	dc000015 	stw	r16,0(sp)
81118264:	dfc00115 	stw	ra,4(sp)
81118268:	3021883a 	mov	r16,r6
8111826c:	111a1080 	call	8111a108 <strcmp>
81118270:	1000061e 	bne	r2,zero,8111828c <_setlocale_r+0x48>
81118274:	00a04534 	movhi	r2,33044
81118278:	10aad104 	addi	r2,r2,-21692
8111827c:	dfc00117 	ldw	ra,4(sp)
81118280:	dc000017 	ldw	r16,0(sp)
81118284:	dec00204 	addi	sp,sp,8
81118288:	f800283a 	ret
8111828c:	01604534 	movhi	r5,33044
81118290:	296ad104 	addi	r5,r5,-21692
81118294:	8009883a 	mov	r4,r16
81118298:	111a1080 	call	8111a108 <strcmp>
8111829c:	103ff526 	beq	r2,zero,81118274 <__reset+0xfb0f8274>
811182a0:	01604534 	movhi	r5,33044
811182a4:	296adb04 	addi	r5,r5,-21652
811182a8:	8009883a 	mov	r4,r16
811182ac:	111a1080 	call	8111a108 <strcmp>
811182b0:	103ff026 	beq	r2,zero,81118274 <__reset+0xfb0f8274>
811182b4:	0005883a 	mov	r2,zero
811182b8:	003ff006 	br	8111827c <__reset+0xfb0f827c>
811182bc:	00a04534 	movhi	r2,33044
811182c0:	10aad104 	addi	r2,r2,-21692
811182c4:	f800283a 	ret

811182c8 <__locale_charset>:
811182c8:	00a04534 	movhi	r2,33044
811182cc:	10aece04 	addi	r2,r2,-17608
811182d0:	f800283a 	ret

811182d4 <__locale_mb_cur_max>:
811182d4:	00a04534 	movhi	r2,33044
811182d8:	10b3e704 	addi	r2,r2,-12388
811182dc:	10800017 	ldw	r2,0(r2)
811182e0:	f800283a 	ret

811182e4 <__locale_msgcharset>:
811182e4:	00a04534 	movhi	r2,33044
811182e8:	10aec604 	addi	r2,r2,-17640
811182ec:	f800283a 	ret

811182f0 <__locale_cjk_lang>:
811182f0:	0005883a 	mov	r2,zero
811182f4:	f800283a 	ret

811182f8 <_localeconv_r>:
811182f8:	00a04534 	movhi	r2,33044
811182fc:	10aed604 	addi	r2,r2,-17576
81118300:	f800283a 	ret

81118304 <setlocale>:
81118304:	00a04534 	movhi	r2,33044
81118308:	10b3e404 	addi	r2,r2,-12400
8111830c:	280d883a 	mov	r6,r5
81118310:	200b883a 	mov	r5,r4
81118314:	11000017 	ldw	r4,0(r2)
81118318:	11182441 	jmpi	81118244 <_setlocale_r>

8111831c <localeconv>:
8111831c:	00a04534 	movhi	r2,33044
81118320:	10aed604 	addi	r2,r2,-17576
81118324:	f800283a 	ret

81118328 <_lseek_r>:
81118328:	defffd04 	addi	sp,sp,-12
8111832c:	de00012e 	bgeu	sp,et,81118334 <_lseek_r+0xc>
81118330:	003b68fa 	trap	3
81118334:	2805883a 	mov	r2,r5
81118338:	dc000015 	stw	r16,0(sp)
8111833c:	04204534 	movhi	r16,33044
81118340:	dc400115 	stw	r17,4(sp)
81118344:	300b883a 	mov	r5,r6
81118348:	84344404 	addi	r16,r16,-12016
8111834c:	2023883a 	mov	r17,r4
81118350:	380d883a 	mov	r6,r7
81118354:	1009883a 	mov	r4,r2
81118358:	dfc00215 	stw	ra,8(sp)
8111835c:	80000015 	stw	zero,0(r16)
81118360:	11234180 	call	81123418 <lseek>
81118364:	00ffffc4 	movi	r3,-1
81118368:	10c00526 	beq	r2,r3,81118380 <_lseek_r+0x58>
8111836c:	dfc00217 	ldw	ra,8(sp)
81118370:	dc400117 	ldw	r17,4(sp)
81118374:	dc000017 	ldw	r16,0(sp)
81118378:	dec00304 	addi	sp,sp,12
8111837c:	f800283a 	ret
81118380:	80c00017 	ldw	r3,0(r16)
81118384:	183ff926 	beq	r3,zero,8111836c <__reset+0xfb0f836c>
81118388:	88c00015 	stw	r3,0(r17)
8111838c:	003ff706 	br	8111836c <__reset+0xfb0f836c>

81118390 <_mbrtowc_r>:
81118390:	defff704 	addi	sp,sp,-36
81118394:	00a04534 	movhi	r2,33044
81118398:	de00012e 	bgeu	sp,et,811183a0 <_mbrtowc_r+0x10>
8111839c:	003b68fa 	trap	3
811183a0:	10b3e804 	addi	r2,r2,-12384
811183a4:	dc800715 	stw	r18,28(sp)
811183a8:	dc400615 	stw	r17,24(sp)
811183ac:	dc000515 	stw	r16,20(sp)
811183b0:	dfc00815 	stw	ra,32(sp)
811183b4:	2021883a 	mov	r16,r4
811183b8:	dc400917 	ldw	r17,36(sp)
811183bc:	14800017 	ldw	r18,0(r2)
811183c0:	30001626 	beq	r6,zero,8111841c <_mbrtowc_r+0x8c>
811183c4:	d9400215 	stw	r5,8(sp)
811183c8:	d9800315 	stw	r6,12(sp)
811183cc:	d9c00415 	stw	r7,16(sp)
811183d0:	11182c80 	call	811182c8 <__locale_charset>
811183d4:	d9c00417 	ldw	r7,16(sp)
811183d8:	d9800317 	ldw	r6,12(sp)
811183dc:	d9400217 	ldw	r5,8(sp)
811183e0:	d8800015 	stw	r2,0(sp)
811183e4:	dc400115 	stw	r17,4(sp)
811183e8:	8009883a 	mov	r4,r16
811183ec:	903ee83a 	callr	r18
811183f0:	00ffffc4 	movi	r3,-1
811183f4:	10c0031e 	bne	r2,r3,81118404 <_mbrtowc_r+0x74>
811183f8:	88000015 	stw	zero,0(r17)
811183fc:	00c02284 	movi	r3,138
81118400:	80c00015 	stw	r3,0(r16)
81118404:	dfc00817 	ldw	ra,32(sp)
81118408:	dc800717 	ldw	r18,28(sp)
8111840c:	dc400617 	ldw	r17,24(sp)
81118410:	dc000517 	ldw	r16,20(sp)
81118414:	dec00904 	addi	sp,sp,36
81118418:	f800283a 	ret
8111841c:	11182c80 	call	811182c8 <__locale_charset>
81118420:	01a04534 	movhi	r6,33044
81118424:	31aadb04 	addi	r6,r6,-21652
81118428:	dc400115 	stw	r17,4(sp)
8111842c:	d8800015 	stw	r2,0(sp)
81118430:	01c00044 	movi	r7,1
81118434:	000b883a 	mov	r5,zero
81118438:	8009883a 	mov	r4,r16
8111843c:	903ee83a 	callr	r18
81118440:	003feb06 	br	811183f0 <__reset+0xfb0f83f0>

81118444 <mbrtowc>:
81118444:	defff704 	addi	sp,sp,-36
81118448:	00a04534 	movhi	r2,33044
8111844c:	de00012e 	bgeu	sp,et,81118454 <mbrtowc+0x10>
81118450:	003b68fa 	trap	3
81118454:	10b3e404 	addi	r2,r2,-12400
81118458:	dc800415 	stw	r18,16(sp)
8111845c:	dc400315 	stw	r17,12(sp)
81118460:	dfc00815 	stw	ra,32(sp)
81118464:	dd400715 	stw	r21,28(sp)
81118468:	dd000615 	stw	r20,24(sp)
8111846c:	dcc00515 	stw	r19,20(sp)
81118470:	dc000215 	stw	r16,8(sp)
81118474:	3825883a 	mov	r18,r7
81118478:	14400017 	ldw	r17,0(r2)
8111847c:	28001c26 	beq	r5,zero,811184f0 <mbrtowc+0xac>
81118480:	00a04534 	movhi	r2,33044
81118484:	10b3e804 	addi	r2,r2,-12384
81118488:	15400017 	ldw	r21,0(r2)
8111848c:	2821883a 	mov	r16,r5
81118490:	2027883a 	mov	r19,r4
81118494:	3029883a 	mov	r20,r6
81118498:	11182c80 	call	811182c8 <__locale_charset>
8111849c:	d8800015 	stw	r2,0(sp)
811184a0:	dc800115 	stw	r18,4(sp)
811184a4:	a00f883a 	mov	r7,r20
811184a8:	800d883a 	mov	r6,r16
811184ac:	980b883a 	mov	r5,r19
811184b0:	8809883a 	mov	r4,r17
811184b4:	a83ee83a 	callr	r21
811184b8:	00ffffc4 	movi	r3,-1
811184bc:	10c0031e 	bne	r2,r3,811184cc <mbrtowc+0x88>
811184c0:	90000015 	stw	zero,0(r18)
811184c4:	00c02284 	movi	r3,138
811184c8:	88c00015 	stw	r3,0(r17)
811184cc:	dfc00817 	ldw	ra,32(sp)
811184d0:	dd400717 	ldw	r21,28(sp)
811184d4:	dd000617 	ldw	r20,24(sp)
811184d8:	dcc00517 	ldw	r19,20(sp)
811184dc:	dc800417 	ldw	r18,16(sp)
811184e0:	dc400317 	ldw	r17,12(sp)
811184e4:	dc000217 	ldw	r16,8(sp)
811184e8:	dec00904 	addi	sp,sp,36
811184ec:	f800283a 	ret
811184f0:	00a04534 	movhi	r2,33044
811184f4:	10b3e804 	addi	r2,r2,-12384
811184f8:	14000017 	ldw	r16,0(r2)
811184fc:	11182c80 	call	811182c8 <__locale_charset>
81118500:	01a04534 	movhi	r6,33044
81118504:	31aadb04 	addi	r6,r6,-21652
81118508:	dc800115 	stw	r18,4(sp)
8111850c:	d8800015 	stw	r2,0(sp)
81118510:	01c00044 	movi	r7,1
81118514:	000b883a 	mov	r5,zero
81118518:	8809883a 	mov	r4,r17
8111851c:	803ee83a 	callr	r16
81118520:	003fe506 	br	811184b8 <__reset+0xfb0f84b8>

81118524 <__ascii_mbtowc>:
81118524:	deffff04 	addi	sp,sp,-4
81118528:	de00012e 	bgeu	sp,et,81118530 <__ascii_mbtowc+0xc>
8111852c:	003b68fa 	trap	3
81118530:	28000826 	beq	r5,zero,81118554 <__ascii_mbtowc+0x30>
81118534:	30000926 	beq	r6,zero,8111855c <__ascii_mbtowc+0x38>
81118538:	38000b26 	beq	r7,zero,81118568 <__ascii_mbtowc+0x44>
8111853c:	30800003 	ldbu	r2,0(r6)
81118540:	28800015 	stw	r2,0(r5)
81118544:	30800003 	ldbu	r2,0(r6)
81118548:	1004c03a 	cmpne	r2,r2,zero
8111854c:	dec00104 	addi	sp,sp,4
81118550:	f800283a 	ret
81118554:	d80b883a 	mov	r5,sp
81118558:	303ff71e 	bne	r6,zero,81118538 <__reset+0xfb0f8538>
8111855c:	0005883a 	mov	r2,zero
81118560:	dec00104 	addi	sp,sp,4
81118564:	f800283a 	ret
81118568:	00bfff84 	movi	r2,-2
8111856c:	003ff706 	br	8111854c <__reset+0xfb0f854c>

81118570 <_mbtowc_r>:
81118570:	00a04534 	movhi	r2,33044
81118574:	defff804 	addi	sp,sp,-32
81118578:	10b3e804 	addi	r2,r2,-12384
8111857c:	de00012e 	bgeu	sp,et,81118584 <_mbtowc_r+0x14>
81118580:	003b68fa 	trap	3
81118584:	dfc00715 	stw	ra,28(sp)
81118588:	dc000615 	stw	r16,24(sp)
8111858c:	14000017 	ldw	r16,0(r2)
81118590:	d9000215 	stw	r4,8(sp)
81118594:	d9400315 	stw	r5,12(sp)
81118598:	d9800415 	stw	r6,16(sp)
8111859c:	d9c00515 	stw	r7,20(sp)
811185a0:	11182c80 	call	811182c8 <__locale_charset>
811185a4:	d8800015 	stw	r2,0(sp)
811185a8:	d8800817 	ldw	r2,32(sp)
811185ac:	d9c00517 	ldw	r7,20(sp)
811185b0:	d9800417 	ldw	r6,16(sp)
811185b4:	d9400317 	ldw	r5,12(sp)
811185b8:	d9000217 	ldw	r4,8(sp)
811185bc:	d8800115 	stw	r2,4(sp)
811185c0:	803ee83a 	callr	r16
811185c4:	dfc00717 	ldw	ra,28(sp)
811185c8:	dc000617 	ldw	r16,24(sp)
811185cc:	dec00804 	addi	sp,sp,32
811185d0:	f800283a 	ret

811185d4 <memchr>:
811185d4:	208000cc 	andi	r2,r4,3
811185d8:	280f883a 	mov	r7,r5
811185dc:	10003426 	beq	r2,zero,811186b0 <memchr+0xdc>
811185e0:	30bfffc4 	addi	r2,r6,-1
811185e4:	30001a26 	beq	r6,zero,81118650 <memchr+0x7c>
811185e8:	20c00003 	ldbu	r3,0(r4)
811185ec:	29803fcc 	andi	r6,r5,255
811185f0:	30c0051e 	bne	r6,r3,81118608 <memchr+0x34>
811185f4:	00001806 	br	81118658 <memchr+0x84>
811185f8:	10001526 	beq	r2,zero,81118650 <memchr+0x7c>
811185fc:	20c00003 	ldbu	r3,0(r4)
81118600:	10bfffc4 	addi	r2,r2,-1
81118604:	30c01426 	beq	r6,r3,81118658 <memchr+0x84>
81118608:	21000044 	addi	r4,r4,1
8111860c:	20c000cc 	andi	r3,r4,3
81118610:	183ff91e 	bne	r3,zero,811185f8 <__reset+0xfb0f85f8>
81118614:	020000c4 	movi	r8,3
81118618:	40801136 	bltu	r8,r2,81118660 <memchr+0x8c>
8111861c:	10000c26 	beq	r2,zero,81118650 <memchr+0x7c>
81118620:	20c00003 	ldbu	r3,0(r4)
81118624:	29403fcc 	andi	r5,r5,255
81118628:	28c00b26 	beq	r5,r3,81118658 <memchr+0x84>
8111862c:	20c00044 	addi	r3,r4,1
81118630:	39803fcc 	andi	r6,r7,255
81118634:	2089883a 	add	r4,r4,r2
81118638:	00000306 	br	81118648 <memchr+0x74>
8111863c:	18c00044 	addi	r3,r3,1
81118640:	197fffc3 	ldbu	r5,-1(r3)
81118644:	31400526 	beq	r6,r5,8111865c <memchr+0x88>
81118648:	1805883a 	mov	r2,r3
8111864c:	20fffb1e 	bne	r4,r3,8111863c <__reset+0xfb0f863c>
81118650:	0005883a 	mov	r2,zero
81118654:	f800283a 	ret
81118658:	2005883a 	mov	r2,r4
8111865c:	f800283a 	ret
81118660:	28c03fcc 	andi	r3,r5,255
81118664:	1812923a 	slli	r9,r3,8
81118668:	02ffbff4 	movhi	r11,65279
8111866c:	02a02074 	movhi	r10,32897
81118670:	48d2b03a 	or	r9,r9,r3
81118674:	4806943a 	slli	r3,r9,16
81118678:	5affbfc4 	addi	r11,r11,-257
8111867c:	52a02004 	addi	r10,r10,-32640
81118680:	48d2b03a 	or	r9,r9,r3
81118684:	20c00017 	ldw	r3,0(r4)
81118688:	48c6f03a 	xor	r3,r9,r3
8111868c:	1acd883a 	add	r6,r3,r11
81118690:	00c6303a 	nor	r3,zero,r3
81118694:	30c6703a 	and	r3,r6,r3
81118698:	1a86703a 	and	r3,r3,r10
8111869c:	183fe01e 	bne	r3,zero,81118620 <__reset+0xfb0f8620>
811186a0:	10bfff04 	addi	r2,r2,-4
811186a4:	21000104 	addi	r4,r4,4
811186a8:	40bff636 	bltu	r8,r2,81118684 <__reset+0xfb0f8684>
811186ac:	003fdb06 	br	8111861c <__reset+0xfb0f861c>
811186b0:	3005883a 	mov	r2,r6
811186b4:	003fd706 	br	81118614 <__reset+0xfb0f8614>

811186b8 <memmove>:
811186b8:	2005883a 	mov	r2,r4
811186bc:	29000b2e 	bgeu	r5,r4,811186ec <memmove+0x34>
811186c0:	298f883a 	add	r7,r5,r6
811186c4:	21c0092e 	bgeu	r4,r7,811186ec <memmove+0x34>
811186c8:	2187883a 	add	r3,r4,r6
811186cc:	198bc83a 	sub	r5,r3,r6
811186d0:	30004826 	beq	r6,zero,811187f4 <memmove+0x13c>
811186d4:	39ffffc4 	addi	r7,r7,-1
811186d8:	39000003 	ldbu	r4,0(r7)
811186dc:	18ffffc4 	addi	r3,r3,-1
811186e0:	19000005 	stb	r4,0(r3)
811186e4:	28fffb1e 	bne	r5,r3,811186d4 <__reset+0xfb0f86d4>
811186e8:	f800283a 	ret
811186ec:	00c003c4 	movi	r3,15
811186f0:	1980412e 	bgeu	r3,r6,811187f8 <memmove+0x140>
811186f4:	2886b03a 	or	r3,r5,r2
811186f8:	18c000cc 	andi	r3,r3,3
811186fc:	1800401e 	bne	r3,zero,81118800 <memmove+0x148>
81118700:	33fffc04 	addi	r15,r6,-16
81118704:	781ed13a 	srli	r15,r15,4
81118708:	28c00104 	addi	r3,r5,4
8111870c:	13400104 	addi	r13,r2,4
81118710:	781c913a 	slli	r14,r15,4
81118714:	2b000204 	addi	r12,r5,8
81118718:	12c00204 	addi	r11,r2,8
8111871c:	73800504 	addi	r14,r14,20
81118720:	2a800304 	addi	r10,r5,12
81118724:	12400304 	addi	r9,r2,12
81118728:	2b9d883a 	add	r14,r5,r14
8111872c:	2811883a 	mov	r8,r5
81118730:	100f883a 	mov	r7,r2
81118734:	41000017 	ldw	r4,0(r8)
81118738:	39c00404 	addi	r7,r7,16
8111873c:	18c00404 	addi	r3,r3,16
81118740:	393ffc15 	stw	r4,-16(r7)
81118744:	193ffc17 	ldw	r4,-16(r3)
81118748:	6b400404 	addi	r13,r13,16
8111874c:	5ac00404 	addi	r11,r11,16
81118750:	693ffc15 	stw	r4,-16(r13)
81118754:	61000017 	ldw	r4,0(r12)
81118758:	4a400404 	addi	r9,r9,16
8111875c:	42000404 	addi	r8,r8,16
81118760:	593ffc15 	stw	r4,-16(r11)
81118764:	51000017 	ldw	r4,0(r10)
81118768:	63000404 	addi	r12,r12,16
8111876c:	52800404 	addi	r10,r10,16
81118770:	493ffc15 	stw	r4,-16(r9)
81118774:	1bbfef1e 	bne	r3,r14,81118734 <__reset+0xfb0f8734>
81118778:	79000044 	addi	r4,r15,1
8111877c:	2008913a 	slli	r4,r4,4
81118780:	328003cc 	andi	r10,r6,15
81118784:	02c000c4 	movi	r11,3
81118788:	1107883a 	add	r3,r2,r4
8111878c:	290b883a 	add	r5,r5,r4
81118790:	5a801e2e 	bgeu	r11,r10,8111880c <memmove+0x154>
81118794:	1813883a 	mov	r9,r3
81118798:	2811883a 	mov	r8,r5
8111879c:	500f883a 	mov	r7,r10
811187a0:	41000017 	ldw	r4,0(r8)
811187a4:	4a400104 	addi	r9,r9,4
811187a8:	39ffff04 	addi	r7,r7,-4
811187ac:	493fff15 	stw	r4,-4(r9)
811187b0:	42000104 	addi	r8,r8,4
811187b4:	59fffa36 	bltu	r11,r7,811187a0 <__reset+0xfb0f87a0>
811187b8:	513fff04 	addi	r4,r10,-4
811187bc:	2008d0ba 	srli	r4,r4,2
811187c0:	318000cc 	andi	r6,r6,3
811187c4:	21000044 	addi	r4,r4,1
811187c8:	2109883a 	add	r4,r4,r4
811187cc:	2109883a 	add	r4,r4,r4
811187d0:	1907883a 	add	r3,r3,r4
811187d4:	290b883a 	add	r5,r5,r4
811187d8:	30000b26 	beq	r6,zero,81118808 <memmove+0x150>
811187dc:	198d883a 	add	r6,r3,r6
811187e0:	29c00003 	ldbu	r7,0(r5)
811187e4:	18c00044 	addi	r3,r3,1
811187e8:	29400044 	addi	r5,r5,1
811187ec:	19ffffc5 	stb	r7,-1(r3)
811187f0:	19bffb1e 	bne	r3,r6,811187e0 <__reset+0xfb0f87e0>
811187f4:	f800283a 	ret
811187f8:	1007883a 	mov	r3,r2
811187fc:	003ff606 	br	811187d8 <__reset+0xfb0f87d8>
81118800:	1007883a 	mov	r3,r2
81118804:	003ff506 	br	811187dc <__reset+0xfb0f87dc>
81118808:	f800283a 	ret
8111880c:	500d883a 	mov	r6,r10
81118810:	003ff106 	br	811187d8 <__reset+0xfb0f87d8>

81118814 <_Balloc>:
81118814:	defffc04 	addi	sp,sp,-16
81118818:	de00012e 	bgeu	sp,et,81118820 <_Balloc+0xc>
8111881c:	003b68fa 	trap	3
81118820:	20801317 	ldw	r2,76(r4)
81118824:	dc400115 	stw	r17,4(sp)
81118828:	dc000015 	stw	r16,0(sp)
8111882c:	dfc00315 	stw	ra,12(sp)
81118830:	dc800215 	stw	r18,8(sp)
81118834:	2023883a 	mov	r17,r4
81118838:	2821883a 	mov	r16,r5
8111883c:	10000f26 	beq	r2,zero,8111887c <_Balloc+0x68>
81118840:	8407883a 	add	r3,r16,r16
81118844:	18c7883a 	add	r3,r3,r3
81118848:	10c7883a 	add	r3,r2,r3
8111884c:	18800017 	ldw	r2,0(r3)
81118850:	10001126 	beq	r2,zero,81118898 <_Balloc+0x84>
81118854:	11000017 	ldw	r4,0(r2)
81118858:	19000015 	stw	r4,0(r3)
8111885c:	10000415 	stw	zero,16(r2)
81118860:	10000315 	stw	zero,12(r2)
81118864:	dfc00317 	ldw	ra,12(sp)
81118868:	dc800217 	ldw	r18,8(sp)
8111886c:	dc400117 	ldw	r17,4(sp)
81118870:	dc000017 	ldw	r16,0(sp)
81118874:	dec00404 	addi	sp,sp,16
81118878:	f800283a 	ret
8111887c:	01800844 	movi	r6,33
81118880:	01400104 	movi	r5,4
81118884:	111f0140 	call	8111f014 <_calloc_r>
81118888:	88801315 	stw	r2,76(r17)
8111888c:	103fec1e 	bne	r2,zero,81118840 <__reset+0xfb0f8840>
81118890:	0005883a 	mov	r2,zero
81118894:	003ff306 	br	81118864 <__reset+0xfb0f8864>
81118898:	01400044 	movi	r5,1
8111889c:	2c24983a 	sll	r18,r5,r16
811188a0:	8809883a 	mov	r4,r17
811188a4:	91800144 	addi	r6,r18,5
811188a8:	318d883a 	add	r6,r6,r6
811188ac:	318d883a 	add	r6,r6,r6
811188b0:	111f0140 	call	8111f014 <_calloc_r>
811188b4:	103ff626 	beq	r2,zero,81118890 <__reset+0xfb0f8890>
811188b8:	14000115 	stw	r16,4(r2)
811188bc:	14800215 	stw	r18,8(r2)
811188c0:	003fe606 	br	8111885c <__reset+0xfb0f885c>

811188c4 <_Bfree>:
811188c4:	28000826 	beq	r5,zero,811188e8 <_Bfree+0x24>
811188c8:	28c00117 	ldw	r3,4(r5)
811188cc:	20801317 	ldw	r2,76(r4)
811188d0:	18c7883a 	add	r3,r3,r3
811188d4:	18c7883a 	add	r3,r3,r3
811188d8:	10c5883a 	add	r2,r2,r3
811188dc:	10c00017 	ldw	r3,0(r2)
811188e0:	28c00015 	stw	r3,0(r5)
811188e4:	11400015 	stw	r5,0(r2)
811188e8:	f800283a 	ret

811188ec <__multadd>:
811188ec:	defffa04 	addi	sp,sp,-24
811188f0:	de00012e 	bgeu	sp,et,811188f8 <__multadd+0xc>
811188f4:	003b68fa 	trap	3
811188f8:	0011883a 	mov	r8,zero
811188fc:	dc800315 	stw	r18,12(sp)
81118900:	dc400215 	stw	r17,8(sp)
81118904:	dc000115 	stw	r16,4(sp)
81118908:	2823883a 	mov	r17,r5
8111890c:	2c000417 	ldw	r16,16(r5)
81118910:	dfc00515 	stw	ra,20(sp)
81118914:	dcc00415 	stw	r19,16(sp)
81118918:	2025883a 	mov	r18,r4
8111891c:	29400504 	addi	r5,r5,20
81118920:	28c00017 	ldw	r3,0(r5)
81118924:	29400104 	addi	r5,r5,4
81118928:	42000044 	addi	r8,r8,1
8111892c:	18bfffcc 	andi	r2,r3,65535
81118930:	1185383a 	mul	r2,r2,r6
81118934:	1806d43a 	srli	r3,r3,16
81118938:	11cf883a 	add	r7,r2,r7
8111893c:	3808d43a 	srli	r4,r7,16
81118940:	1987383a 	mul	r3,r3,r6
81118944:	38bfffcc 	andi	r2,r7,65535
81118948:	1907883a 	add	r3,r3,r4
8111894c:	1808943a 	slli	r4,r3,16
81118950:	180ed43a 	srli	r7,r3,16
81118954:	2085883a 	add	r2,r4,r2
81118958:	28bfff15 	stw	r2,-4(r5)
8111895c:	443ff016 	blt	r8,r16,81118920 <__reset+0xfb0f8920>
81118960:	38000926 	beq	r7,zero,81118988 <__multadd+0x9c>
81118964:	88800217 	ldw	r2,8(r17)
81118968:	80800f0e 	bge	r16,r2,811189a8 <__multadd+0xbc>
8111896c:	80800144 	addi	r2,r16,5
81118970:	1085883a 	add	r2,r2,r2
81118974:	1085883a 	add	r2,r2,r2
81118978:	8885883a 	add	r2,r17,r2
8111897c:	11c00015 	stw	r7,0(r2)
81118980:	84000044 	addi	r16,r16,1
81118984:	8c000415 	stw	r16,16(r17)
81118988:	8805883a 	mov	r2,r17
8111898c:	dfc00517 	ldw	ra,20(sp)
81118990:	dcc00417 	ldw	r19,16(sp)
81118994:	dc800317 	ldw	r18,12(sp)
81118998:	dc400217 	ldw	r17,8(sp)
8111899c:	dc000117 	ldw	r16,4(sp)
811189a0:	dec00604 	addi	sp,sp,24
811189a4:	f800283a 	ret
811189a8:	89400117 	ldw	r5,4(r17)
811189ac:	9009883a 	mov	r4,r18
811189b0:	d9c00015 	stw	r7,0(sp)
811189b4:	29400044 	addi	r5,r5,1
811189b8:	11188140 	call	81118814 <_Balloc>
811189bc:	89800417 	ldw	r6,16(r17)
811189c0:	89400304 	addi	r5,r17,12
811189c4:	11000304 	addi	r4,r2,12
811189c8:	31800084 	addi	r6,r6,2
811189cc:	318d883a 	add	r6,r6,r6
811189d0:	318d883a 	add	r6,r6,r6
811189d4:	1027883a 	mov	r19,r2
811189d8:	110e8e00 	call	8110e8e0 <memcpy>
811189dc:	d9c00017 	ldw	r7,0(sp)
811189e0:	88000a26 	beq	r17,zero,81118a0c <__multadd+0x120>
811189e4:	88c00117 	ldw	r3,4(r17)
811189e8:	90801317 	ldw	r2,76(r18)
811189ec:	18c7883a 	add	r3,r3,r3
811189f0:	18c7883a 	add	r3,r3,r3
811189f4:	10c5883a 	add	r2,r2,r3
811189f8:	10c00017 	ldw	r3,0(r2)
811189fc:	88c00015 	stw	r3,0(r17)
81118a00:	14400015 	stw	r17,0(r2)
81118a04:	9823883a 	mov	r17,r19
81118a08:	003fd806 	br	8111896c <__reset+0xfb0f896c>
81118a0c:	9823883a 	mov	r17,r19
81118a10:	003fd606 	br	8111896c <__reset+0xfb0f896c>

81118a14 <__s2b>:
81118a14:	defff904 	addi	sp,sp,-28
81118a18:	de00012e 	bgeu	sp,et,81118a20 <__s2b+0xc>
81118a1c:	003b68fa 	trap	3
81118a20:	dc400115 	stw	r17,4(sp)
81118a24:	dc000015 	stw	r16,0(sp)
81118a28:	2023883a 	mov	r17,r4
81118a2c:	2821883a 	mov	r16,r5
81118a30:	39000204 	addi	r4,r7,8
81118a34:	01400244 	movi	r5,9
81118a38:	dcc00315 	stw	r19,12(sp)
81118a3c:	dc800215 	stw	r18,8(sp)
81118a40:	dfc00615 	stw	ra,24(sp)
81118a44:	dd400515 	stw	r21,20(sp)
81118a48:	dd000415 	stw	r20,16(sp)
81118a4c:	3825883a 	mov	r18,r7
81118a50:	3027883a 	mov	r19,r6
81118a54:	1120dac0 	call	81120dac <__divsi3>
81118a58:	00c00044 	movi	r3,1
81118a5c:	000b883a 	mov	r5,zero
81118a60:	1880030e 	bge	r3,r2,81118a70 <__s2b+0x5c>
81118a64:	18c7883a 	add	r3,r3,r3
81118a68:	29400044 	addi	r5,r5,1
81118a6c:	18bffd16 	blt	r3,r2,81118a64 <__reset+0xfb0f8a64>
81118a70:	8809883a 	mov	r4,r17
81118a74:	11188140 	call	81118814 <_Balloc>
81118a78:	d8c00717 	ldw	r3,28(sp)
81118a7c:	10c00515 	stw	r3,20(r2)
81118a80:	00c00044 	movi	r3,1
81118a84:	10c00415 	stw	r3,16(r2)
81118a88:	00c00244 	movi	r3,9
81118a8c:	1cc0210e 	bge	r3,r19,81118b14 <__s2b+0x100>
81118a90:	80eb883a 	add	r21,r16,r3
81118a94:	a829883a 	mov	r20,r21
81118a98:	84e1883a 	add	r16,r16,r19
81118a9c:	a1c00007 	ldb	r7,0(r20)
81118aa0:	01800284 	movi	r6,10
81118aa4:	a5000044 	addi	r20,r20,1
81118aa8:	100b883a 	mov	r5,r2
81118aac:	39fff404 	addi	r7,r7,-48
81118ab0:	8809883a 	mov	r4,r17
81118ab4:	11188ec0 	call	811188ec <__multadd>
81118ab8:	a43ff81e 	bne	r20,r16,81118a9c <__reset+0xfb0f8a9c>
81118abc:	ace1883a 	add	r16,r21,r19
81118ac0:	843ffe04 	addi	r16,r16,-8
81118ac4:	9c800a0e 	bge	r19,r18,81118af0 <__s2b+0xdc>
81118ac8:	94e5c83a 	sub	r18,r18,r19
81118acc:	84a5883a 	add	r18,r16,r18
81118ad0:	81c00007 	ldb	r7,0(r16)
81118ad4:	01800284 	movi	r6,10
81118ad8:	84000044 	addi	r16,r16,1
81118adc:	100b883a 	mov	r5,r2
81118ae0:	39fff404 	addi	r7,r7,-48
81118ae4:	8809883a 	mov	r4,r17
81118ae8:	11188ec0 	call	811188ec <__multadd>
81118aec:	84bff81e 	bne	r16,r18,81118ad0 <__reset+0xfb0f8ad0>
81118af0:	dfc00617 	ldw	ra,24(sp)
81118af4:	dd400517 	ldw	r21,20(sp)
81118af8:	dd000417 	ldw	r20,16(sp)
81118afc:	dcc00317 	ldw	r19,12(sp)
81118b00:	dc800217 	ldw	r18,8(sp)
81118b04:	dc400117 	ldw	r17,4(sp)
81118b08:	dc000017 	ldw	r16,0(sp)
81118b0c:	dec00704 	addi	sp,sp,28
81118b10:	f800283a 	ret
81118b14:	84000284 	addi	r16,r16,10
81118b18:	1827883a 	mov	r19,r3
81118b1c:	003fe906 	br	81118ac4 <__reset+0xfb0f8ac4>

81118b20 <__hi0bits>:
81118b20:	20bfffec 	andhi	r2,r4,65535
81118b24:	1000141e 	bne	r2,zero,81118b78 <__hi0bits+0x58>
81118b28:	2008943a 	slli	r4,r4,16
81118b2c:	00800404 	movi	r2,16
81118b30:	20ffc02c 	andhi	r3,r4,65280
81118b34:	1800021e 	bne	r3,zero,81118b40 <__hi0bits+0x20>
81118b38:	2008923a 	slli	r4,r4,8
81118b3c:	10800204 	addi	r2,r2,8
81118b40:	20fc002c 	andhi	r3,r4,61440
81118b44:	1800021e 	bne	r3,zero,81118b50 <__hi0bits+0x30>
81118b48:	2008913a 	slli	r4,r4,4
81118b4c:	10800104 	addi	r2,r2,4
81118b50:	20f0002c 	andhi	r3,r4,49152
81118b54:	1800031e 	bne	r3,zero,81118b64 <__hi0bits+0x44>
81118b58:	2109883a 	add	r4,r4,r4
81118b5c:	10800084 	addi	r2,r2,2
81118b60:	2109883a 	add	r4,r4,r4
81118b64:	20000316 	blt	r4,zero,81118b74 <__hi0bits+0x54>
81118b68:	2110002c 	andhi	r4,r4,16384
81118b6c:	2000041e 	bne	r4,zero,81118b80 <__hi0bits+0x60>
81118b70:	00800804 	movi	r2,32
81118b74:	f800283a 	ret
81118b78:	0005883a 	mov	r2,zero
81118b7c:	003fec06 	br	81118b30 <__reset+0xfb0f8b30>
81118b80:	10800044 	addi	r2,r2,1
81118b84:	f800283a 	ret

81118b88 <__lo0bits>:
81118b88:	20c00017 	ldw	r3,0(r4)
81118b8c:	188001cc 	andi	r2,r3,7
81118b90:	10000826 	beq	r2,zero,81118bb4 <__lo0bits+0x2c>
81118b94:	1880004c 	andi	r2,r3,1
81118b98:	1000211e 	bne	r2,zero,81118c20 <__lo0bits+0x98>
81118b9c:	1880008c 	andi	r2,r3,2
81118ba0:	1000211e 	bne	r2,zero,81118c28 <__lo0bits+0xa0>
81118ba4:	1806d0ba 	srli	r3,r3,2
81118ba8:	00800084 	movi	r2,2
81118bac:	20c00015 	stw	r3,0(r4)
81118bb0:	f800283a 	ret
81118bb4:	18bfffcc 	andi	r2,r3,65535
81118bb8:	10001326 	beq	r2,zero,81118c08 <__lo0bits+0x80>
81118bbc:	0005883a 	mov	r2,zero
81118bc0:	19403fcc 	andi	r5,r3,255
81118bc4:	2800021e 	bne	r5,zero,81118bd0 <__lo0bits+0x48>
81118bc8:	1806d23a 	srli	r3,r3,8
81118bcc:	10800204 	addi	r2,r2,8
81118bd0:	194003cc 	andi	r5,r3,15
81118bd4:	2800021e 	bne	r5,zero,81118be0 <__lo0bits+0x58>
81118bd8:	1806d13a 	srli	r3,r3,4
81118bdc:	10800104 	addi	r2,r2,4
81118be0:	194000cc 	andi	r5,r3,3
81118be4:	2800021e 	bne	r5,zero,81118bf0 <__lo0bits+0x68>
81118be8:	1806d0ba 	srli	r3,r3,2
81118bec:	10800084 	addi	r2,r2,2
81118bf0:	1940004c 	andi	r5,r3,1
81118bf4:	2800081e 	bne	r5,zero,81118c18 <__lo0bits+0x90>
81118bf8:	1806d07a 	srli	r3,r3,1
81118bfc:	1800051e 	bne	r3,zero,81118c14 <__lo0bits+0x8c>
81118c00:	00800804 	movi	r2,32
81118c04:	f800283a 	ret
81118c08:	1806d43a 	srli	r3,r3,16
81118c0c:	00800404 	movi	r2,16
81118c10:	003feb06 	br	81118bc0 <__reset+0xfb0f8bc0>
81118c14:	10800044 	addi	r2,r2,1
81118c18:	20c00015 	stw	r3,0(r4)
81118c1c:	f800283a 	ret
81118c20:	0005883a 	mov	r2,zero
81118c24:	f800283a 	ret
81118c28:	1806d07a 	srli	r3,r3,1
81118c2c:	00800044 	movi	r2,1
81118c30:	20c00015 	stw	r3,0(r4)
81118c34:	f800283a 	ret

81118c38 <__i2b>:
81118c38:	defffd04 	addi	sp,sp,-12
81118c3c:	de00012e 	bgeu	sp,et,81118c44 <__i2b+0xc>
81118c40:	003b68fa 	trap	3
81118c44:	dc000015 	stw	r16,0(sp)
81118c48:	04000044 	movi	r16,1
81118c4c:	dc400115 	stw	r17,4(sp)
81118c50:	2823883a 	mov	r17,r5
81118c54:	800b883a 	mov	r5,r16
81118c58:	dfc00215 	stw	ra,8(sp)
81118c5c:	11188140 	call	81118814 <_Balloc>
81118c60:	14400515 	stw	r17,20(r2)
81118c64:	14000415 	stw	r16,16(r2)
81118c68:	dfc00217 	ldw	ra,8(sp)
81118c6c:	dc400117 	ldw	r17,4(sp)
81118c70:	dc000017 	ldw	r16,0(sp)
81118c74:	dec00304 	addi	sp,sp,12
81118c78:	f800283a 	ret

81118c7c <__multiply>:
81118c7c:	defffa04 	addi	sp,sp,-24
81118c80:	de00012e 	bgeu	sp,et,81118c88 <__multiply+0xc>
81118c84:	003b68fa 	trap	3
81118c88:	dcc00315 	stw	r19,12(sp)
81118c8c:	dc800215 	stw	r18,8(sp)
81118c90:	34c00417 	ldw	r19,16(r6)
81118c94:	2c800417 	ldw	r18,16(r5)
81118c98:	dd000415 	stw	r20,16(sp)
81118c9c:	dc400115 	stw	r17,4(sp)
81118ca0:	dfc00515 	stw	ra,20(sp)
81118ca4:	dc000015 	stw	r16,0(sp)
81118ca8:	2829883a 	mov	r20,r5
81118cac:	3023883a 	mov	r17,r6
81118cb0:	94c0050e 	bge	r18,r19,81118cc8 <__multiply+0x4c>
81118cb4:	9007883a 	mov	r3,r18
81118cb8:	3029883a 	mov	r20,r6
81118cbc:	9825883a 	mov	r18,r19
81118cc0:	2823883a 	mov	r17,r5
81118cc4:	1827883a 	mov	r19,r3
81118cc8:	a0800217 	ldw	r2,8(r20)
81118ccc:	94e1883a 	add	r16,r18,r19
81118cd0:	a1400117 	ldw	r5,4(r20)
81118cd4:	1400010e 	bge	r2,r16,81118cdc <__multiply+0x60>
81118cd8:	29400044 	addi	r5,r5,1
81118cdc:	11188140 	call	81118814 <_Balloc>
81118ce0:	8415883a 	add	r10,r16,r16
81118ce4:	12c00504 	addi	r11,r2,20
81118ce8:	5295883a 	add	r10,r10,r10
81118cec:	5a95883a 	add	r10,r11,r10
81118cf0:	5807883a 	mov	r3,r11
81118cf4:	5a80032e 	bgeu	r11,r10,81118d04 <__multiply+0x88>
81118cf8:	18000015 	stw	zero,0(r3)
81118cfc:	18c00104 	addi	r3,r3,4
81118d00:	1abffd36 	bltu	r3,r10,81118cf8 <__reset+0xfb0f8cf8>
81118d04:	9ce7883a 	add	r19,r19,r19
81118d08:	94a5883a 	add	r18,r18,r18
81118d0c:	89800504 	addi	r6,r17,20
81118d10:	9ce7883a 	add	r19,r19,r19
81118d14:	a3400504 	addi	r13,r20,20
81118d18:	94a5883a 	add	r18,r18,r18
81118d1c:	34d9883a 	add	r12,r6,r19
81118d20:	6c93883a 	add	r9,r13,r18
81118d24:	3300422e 	bgeu	r6,r12,81118e30 <__multiply+0x1b4>
81118d28:	37c00017 	ldw	ra,0(r6)
81118d2c:	fbffffcc 	andi	r15,ra,65535
81118d30:	78001b26 	beq	r15,zero,81118da0 <__multiply+0x124>
81118d34:	5811883a 	mov	r8,r11
81118d38:	681d883a 	mov	r14,r13
81118d3c:	000f883a 	mov	r7,zero
81118d40:	71000017 	ldw	r4,0(r14)
81118d44:	40c00017 	ldw	r3,0(r8)
81118d48:	73800104 	addi	r14,r14,4
81118d4c:	217fffcc 	andi	r5,r4,65535
81118d50:	2bcb383a 	mul	r5,r5,r15
81118d54:	2008d43a 	srli	r4,r4,16
81118d58:	1c7fffcc 	andi	r17,r3,65535
81118d5c:	2c4b883a 	add	r5,r5,r17
81118d60:	29cb883a 	add	r5,r5,r7
81118d64:	23c9383a 	mul	r4,r4,r15
81118d68:	1806d43a 	srli	r3,r3,16
81118d6c:	280ed43a 	srli	r7,r5,16
81118d70:	297fffcc 	andi	r5,r5,65535
81118d74:	20c7883a 	add	r3,r4,r3
81118d78:	19c7883a 	add	r3,r3,r7
81118d7c:	1808943a 	slli	r4,r3,16
81118d80:	4023883a 	mov	r17,r8
81118d84:	180ed43a 	srli	r7,r3,16
81118d88:	214ab03a 	or	r5,r4,r5
81118d8c:	41400015 	stw	r5,0(r8)
81118d90:	42000104 	addi	r8,r8,4
81118d94:	727fea36 	bltu	r14,r9,81118d40 <__reset+0xfb0f8d40>
81118d98:	89c00115 	stw	r7,4(r17)
81118d9c:	37c00017 	ldw	ra,0(r6)
81118da0:	f83ed43a 	srli	ra,ra,16
81118da4:	f8001f26 	beq	ra,zero,81118e24 <__multiply+0x1a8>
81118da8:	58c00017 	ldw	r3,0(r11)
81118dac:	681d883a 	mov	r14,r13
81118db0:	581f883a 	mov	r15,r11
81118db4:	1811883a 	mov	r8,r3
81118db8:	5825883a 	mov	r18,r11
81118dbc:	000f883a 	mov	r7,zero
81118dc0:	00000106 	br	81118dc8 <__multiply+0x14c>
81118dc4:	8825883a 	mov	r18,r17
81118dc8:	7140000b 	ldhu	r5,0(r14)
81118dcc:	4010d43a 	srli	r8,r8,16
81118dd0:	193fffcc 	andi	r4,r3,65535
81118dd4:	2fcb383a 	mul	r5,r5,ra
81118dd8:	7bc00104 	addi	r15,r15,4
81118ddc:	73800104 	addi	r14,r14,4
81118de0:	2a0b883a 	add	r5,r5,r8
81118de4:	29cb883a 	add	r5,r5,r7
81118de8:	2806943a 	slli	r3,r5,16
81118dec:	94400104 	addi	r17,r18,4
81118df0:	280ad43a 	srli	r5,r5,16
81118df4:	1908b03a 	or	r4,r3,r4
81118df8:	793fff15 	stw	r4,-4(r15)
81118dfc:	70ffff17 	ldw	r3,-4(r14)
81118e00:	8a000017 	ldw	r8,0(r17)
81118e04:	1806d43a 	srli	r3,r3,16
81118e08:	413fffcc 	andi	r4,r8,65535
81118e0c:	1fc7383a 	mul	r3,r3,ra
81118e10:	1907883a 	add	r3,r3,r4
81118e14:	1947883a 	add	r3,r3,r5
81118e18:	180ed43a 	srli	r7,r3,16
81118e1c:	727fe936 	bltu	r14,r9,81118dc4 <__reset+0xfb0f8dc4>
81118e20:	90c00115 	stw	r3,4(r18)
81118e24:	31800104 	addi	r6,r6,4
81118e28:	5ac00104 	addi	r11,r11,4
81118e2c:	333fbe36 	bltu	r6,r12,81118d28 <__reset+0xfb0f8d28>
81118e30:	0400090e 	bge	zero,r16,81118e58 <__multiply+0x1dc>
81118e34:	50ffff17 	ldw	r3,-4(r10)
81118e38:	52bfff04 	addi	r10,r10,-4
81118e3c:	18000326 	beq	r3,zero,81118e4c <__multiply+0x1d0>
81118e40:	00000506 	br	81118e58 <__multiply+0x1dc>
81118e44:	50c00017 	ldw	r3,0(r10)
81118e48:	1800031e 	bne	r3,zero,81118e58 <__multiply+0x1dc>
81118e4c:	843fffc4 	addi	r16,r16,-1
81118e50:	52bfff04 	addi	r10,r10,-4
81118e54:	803ffb1e 	bne	r16,zero,81118e44 <__reset+0xfb0f8e44>
81118e58:	14000415 	stw	r16,16(r2)
81118e5c:	dfc00517 	ldw	ra,20(sp)
81118e60:	dd000417 	ldw	r20,16(sp)
81118e64:	dcc00317 	ldw	r19,12(sp)
81118e68:	dc800217 	ldw	r18,8(sp)
81118e6c:	dc400117 	ldw	r17,4(sp)
81118e70:	dc000017 	ldw	r16,0(sp)
81118e74:	dec00604 	addi	sp,sp,24
81118e78:	f800283a 	ret

81118e7c <__pow5mult>:
81118e7c:	defffa04 	addi	sp,sp,-24
81118e80:	de00012e 	bgeu	sp,et,81118e88 <__pow5mult+0xc>
81118e84:	003b68fa 	trap	3
81118e88:	308000cc 	andi	r2,r6,3
81118e8c:	dcc00315 	stw	r19,12(sp)
81118e90:	dc000015 	stw	r16,0(sp)
81118e94:	dfc00515 	stw	ra,20(sp)
81118e98:	dd000415 	stw	r20,16(sp)
81118e9c:	dc800215 	stw	r18,8(sp)
81118ea0:	dc400115 	stw	r17,4(sp)
81118ea4:	3021883a 	mov	r16,r6
81118ea8:	2027883a 	mov	r19,r4
81118eac:	10002f1e 	bne	r2,zero,81118f6c <__pow5mult+0xf0>
81118eb0:	2825883a 	mov	r18,r5
81118eb4:	8021d0ba 	srai	r16,r16,2
81118eb8:	80001a26 	beq	r16,zero,81118f24 <__pow5mult+0xa8>
81118ebc:	9c401217 	ldw	r17,72(r19)
81118ec0:	8800061e 	bne	r17,zero,81118edc <__pow5mult+0x60>
81118ec4:	00003406 	br	81118f98 <__pow5mult+0x11c>
81118ec8:	8021d07a 	srai	r16,r16,1
81118ecc:	80001526 	beq	r16,zero,81118f24 <__pow5mult+0xa8>
81118ed0:	88800017 	ldw	r2,0(r17)
81118ed4:	10001c26 	beq	r2,zero,81118f48 <__pow5mult+0xcc>
81118ed8:	1023883a 	mov	r17,r2
81118edc:	8080004c 	andi	r2,r16,1
81118ee0:	103ff926 	beq	r2,zero,81118ec8 <__reset+0xfb0f8ec8>
81118ee4:	880d883a 	mov	r6,r17
81118ee8:	900b883a 	mov	r5,r18
81118eec:	9809883a 	mov	r4,r19
81118ef0:	1118c7c0 	call	81118c7c <__multiply>
81118ef4:	90001b26 	beq	r18,zero,81118f64 <__pow5mult+0xe8>
81118ef8:	91000117 	ldw	r4,4(r18)
81118efc:	98c01317 	ldw	r3,76(r19)
81118f00:	8021d07a 	srai	r16,r16,1
81118f04:	2109883a 	add	r4,r4,r4
81118f08:	2109883a 	add	r4,r4,r4
81118f0c:	1907883a 	add	r3,r3,r4
81118f10:	19000017 	ldw	r4,0(r3)
81118f14:	91000015 	stw	r4,0(r18)
81118f18:	1c800015 	stw	r18,0(r3)
81118f1c:	1025883a 	mov	r18,r2
81118f20:	803feb1e 	bne	r16,zero,81118ed0 <__reset+0xfb0f8ed0>
81118f24:	9005883a 	mov	r2,r18
81118f28:	dfc00517 	ldw	ra,20(sp)
81118f2c:	dd000417 	ldw	r20,16(sp)
81118f30:	dcc00317 	ldw	r19,12(sp)
81118f34:	dc800217 	ldw	r18,8(sp)
81118f38:	dc400117 	ldw	r17,4(sp)
81118f3c:	dc000017 	ldw	r16,0(sp)
81118f40:	dec00604 	addi	sp,sp,24
81118f44:	f800283a 	ret
81118f48:	880d883a 	mov	r6,r17
81118f4c:	880b883a 	mov	r5,r17
81118f50:	9809883a 	mov	r4,r19
81118f54:	1118c7c0 	call	81118c7c <__multiply>
81118f58:	88800015 	stw	r2,0(r17)
81118f5c:	10000015 	stw	zero,0(r2)
81118f60:	003fdd06 	br	81118ed8 <__reset+0xfb0f8ed8>
81118f64:	1025883a 	mov	r18,r2
81118f68:	003fd706 	br	81118ec8 <__reset+0xfb0f8ec8>
81118f6c:	10bfffc4 	addi	r2,r2,-1
81118f70:	1085883a 	add	r2,r2,r2
81118f74:	00e04534 	movhi	r3,33044
81118f78:	18eb0504 	addi	r3,r3,-21484
81118f7c:	1085883a 	add	r2,r2,r2
81118f80:	1885883a 	add	r2,r3,r2
81118f84:	11800017 	ldw	r6,0(r2)
81118f88:	000f883a 	mov	r7,zero
81118f8c:	11188ec0 	call	811188ec <__multadd>
81118f90:	1025883a 	mov	r18,r2
81118f94:	003fc706 	br	81118eb4 <__reset+0xfb0f8eb4>
81118f98:	05000044 	movi	r20,1
81118f9c:	a00b883a 	mov	r5,r20
81118fa0:	9809883a 	mov	r4,r19
81118fa4:	11188140 	call	81118814 <_Balloc>
81118fa8:	1023883a 	mov	r17,r2
81118fac:	00809c44 	movi	r2,625
81118fb0:	88800515 	stw	r2,20(r17)
81118fb4:	8d000415 	stw	r20,16(r17)
81118fb8:	9c401215 	stw	r17,72(r19)
81118fbc:	88000015 	stw	zero,0(r17)
81118fc0:	003fc606 	br	81118edc <__reset+0xfb0f8edc>

81118fc4 <__lshift>:
81118fc4:	defff904 	addi	sp,sp,-28
81118fc8:	de00012e 	bgeu	sp,et,81118fd0 <__lshift+0xc>
81118fcc:	003b68fa 	trap	3
81118fd0:	dd400515 	stw	r21,20(sp)
81118fd4:	dcc00315 	stw	r19,12(sp)
81118fd8:	302bd17a 	srai	r21,r6,5
81118fdc:	2cc00417 	ldw	r19,16(r5)
81118fe0:	28800217 	ldw	r2,8(r5)
81118fe4:	dd000415 	stw	r20,16(sp)
81118fe8:	ace7883a 	add	r19,r21,r19
81118fec:	dc800215 	stw	r18,8(sp)
81118ff0:	dc400115 	stw	r17,4(sp)
81118ff4:	dc000015 	stw	r16,0(sp)
81118ff8:	dfc00615 	stw	ra,24(sp)
81118ffc:	9c000044 	addi	r16,r19,1
81119000:	2823883a 	mov	r17,r5
81119004:	3029883a 	mov	r20,r6
81119008:	2025883a 	mov	r18,r4
8111900c:	29400117 	ldw	r5,4(r5)
81119010:	1400030e 	bge	r2,r16,81119020 <__lshift+0x5c>
81119014:	1085883a 	add	r2,r2,r2
81119018:	29400044 	addi	r5,r5,1
8111901c:	143ffd16 	blt	r2,r16,81119014 <__reset+0xfb0f9014>
81119020:	9009883a 	mov	r4,r18
81119024:	11188140 	call	81118814 <_Balloc>
81119028:	10c00504 	addi	r3,r2,20
8111902c:	0540070e 	bge	zero,r21,8111904c <__lshift+0x88>
81119030:	ad6b883a 	add	r21,r21,r21
81119034:	ad6b883a 	add	r21,r21,r21
81119038:	1809883a 	mov	r4,r3
8111903c:	1d47883a 	add	r3,r3,r21
81119040:	20000015 	stw	zero,0(r4)
81119044:	21000104 	addi	r4,r4,4
81119048:	193ffd1e 	bne	r3,r4,81119040 <__reset+0xfb0f9040>
8111904c:	8a000417 	ldw	r8,16(r17)
81119050:	89000504 	addi	r4,r17,20
81119054:	a18007cc 	andi	r6,r20,31
81119058:	4211883a 	add	r8,r8,r8
8111905c:	4211883a 	add	r8,r8,r8
81119060:	2211883a 	add	r8,r4,r8
81119064:	30002326 	beq	r6,zero,811190f4 <__lshift+0x130>
81119068:	02400804 	movi	r9,32
8111906c:	4993c83a 	sub	r9,r9,r6
81119070:	000b883a 	mov	r5,zero
81119074:	21c00017 	ldw	r7,0(r4)
81119078:	1815883a 	mov	r10,r3
8111907c:	18c00104 	addi	r3,r3,4
81119080:	398e983a 	sll	r7,r7,r6
81119084:	21000104 	addi	r4,r4,4
81119088:	394ab03a 	or	r5,r7,r5
8111908c:	197fff15 	stw	r5,-4(r3)
81119090:	217fff17 	ldw	r5,-4(r4)
81119094:	2a4ad83a 	srl	r5,r5,r9
81119098:	223ff636 	bltu	r4,r8,81119074 <__reset+0xfb0f9074>
8111909c:	51400115 	stw	r5,4(r10)
811190a0:	28001a1e 	bne	r5,zero,8111910c <__lshift+0x148>
811190a4:	843fffc4 	addi	r16,r16,-1
811190a8:	14000415 	stw	r16,16(r2)
811190ac:	88000826 	beq	r17,zero,811190d0 <__lshift+0x10c>
811190b0:	89000117 	ldw	r4,4(r17)
811190b4:	90c01317 	ldw	r3,76(r18)
811190b8:	2109883a 	add	r4,r4,r4
811190bc:	2109883a 	add	r4,r4,r4
811190c0:	1907883a 	add	r3,r3,r4
811190c4:	19000017 	ldw	r4,0(r3)
811190c8:	89000015 	stw	r4,0(r17)
811190cc:	1c400015 	stw	r17,0(r3)
811190d0:	dfc00617 	ldw	ra,24(sp)
811190d4:	dd400517 	ldw	r21,20(sp)
811190d8:	dd000417 	ldw	r20,16(sp)
811190dc:	dcc00317 	ldw	r19,12(sp)
811190e0:	dc800217 	ldw	r18,8(sp)
811190e4:	dc400117 	ldw	r17,4(sp)
811190e8:	dc000017 	ldw	r16,0(sp)
811190ec:	dec00704 	addi	sp,sp,28
811190f0:	f800283a 	ret
811190f4:	21400017 	ldw	r5,0(r4)
811190f8:	18c00104 	addi	r3,r3,4
811190fc:	21000104 	addi	r4,r4,4
81119100:	197fff15 	stw	r5,-4(r3)
81119104:	223ffb36 	bltu	r4,r8,811190f4 <__reset+0xfb0f90f4>
81119108:	003fe606 	br	811190a4 <__reset+0xfb0f90a4>
8111910c:	9c000084 	addi	r16,r19,2
81119110:	003fe406 	br	811190a4 <__reset+0xfb0f90a4>

81119114 <__mcmp>:
81119114:	20800417 	ldw	r2,16(r4)
81119118:	28c00417 	ldw	r3,16(r5)
8111911c:	10c5c83a 	sub	r2,r2,r3
81119120:	1000111e 	bne	r2,zero,81119168 <__mcmp+0x54>
81119124:	18c7883a 	add	r3,r3,r3
81119128:	18c7883a 	add	r3,r3,r3
8111912c:	21000504 	addi	r4,r4,20
81119130:	29400504 	addi	r5,r5,20
81119134:	20c5883a 	add	r2,r4,r3
81119138:	28cb883a 	add	r5,r5,r3
8111913c:	00000106 	br	81119144 <__mcmp+0x30>
81119140:	20800a2e 	bgeu	r4,r2,8111916c <__mcmp+0x58>
81119144:	10bfff04 	addi	r2,r2,-4
81119148:	297fff04 	addi	r5,r5,-4
8111914c:	11800017 	ldw	r6,0(r2)
81119150:	28c00017 	ldw	r3,0(r5)
81119154:	30fffa26 	beq	r6,r3,81119140 <__reset+0xfb0f9140>
81119158:	30c00236 	bltu	r6,r3,81119164 <__mcmp+0x50>
8111915c:	00800044 	movi	r2,1
81119160:	f800283a 	ret
81119164:	00bfffc4 	movi	r2,-1
81119168:	f800283a 	ret
8111916c:	0005883a 	mov	r2,zero
81119170:	f800283a 	ret

81119174 <__mdiff>:
81119174:	defffa04 	addi	sp,sp,-24
81119178:	de00012e 	bgeu	sp,et,81119180 <__mdiff+0xc>
8111917c:	003b68fa 	trap	3
81119180:	28c00417 	ldw	r3,16(r5)
81119184:	30800417 	ldw	r2,16(r6)
81119188:	dcc00315 	stw	r19,12(sp)
8111918c:	dc800215 	stw	r18,8(sp)
81119190:	dfc00515 	stw	ra,20(sp)
81119194:	dd000415 	stw	r20,16(sp)
81119198:	dc400115 	stw	r17,4(sp)
8111919c:	dc000015 	stw	r16,0(sp)
811191a0:	1887c83a 	sub	r3,r3,r2
811191a4:	2825883a 	mov	r18,r5
811191a8:	3027883a 	mov	r19,r6
811191ac:	1800141e 	bne	r3,zero,81119200 <__mdiff+0x8c>
811191b0:	1085883a 	add	r2,r2,r2
811191b4:	1085883a 	add	r2,r2,r2
811191b8:	2a000504 	addi	r8,r5,20
811191bc:	34000504 	addi	r16,r6,20
811191c0:	4087883a 	add	r3,r8,r2
811191c4:	8085883a 	add	r2,r16,r2
811191c8:	00000106 	br	811191d0 <__mdiff+0x5c>
811191cc:	40c0592e 	bgeu	r8,r3,81119334 <__mdiff+0x1c0>
811191d0:	18ffff04 	addi	r3,r3,-4
811191d4:	10bfff04 	addi	r2,r2,-4
811191d8:	19c00017 	ldw	r7,0(r3)
811191dc:	11400017 	ldw	r5,0(r2)
811191e0:	397ffa26 	beq	r7,r5,811191cc <__reset+0xfb0f91cc>
811191e4:	3940592e 	bgeu	r7,r5,8111934c <__mdiff+0x1d8>
811191e8:	9005883a 	mov	r2,r18
811191ec:	4023883a 	mov	r17,r8
811191f0:	9825883a 	mov	r18,r19
811191f4:	05000044 	movi	r20,1
811191f8:	1027883a 	mov	r19,r2
811191fc:	00000406 	br	81119210 <__mdiff+0x9c>
81119200:	18005616 	blt	r3,zero,8111935c <__mdiff+0x1e8>
81119204:	34400504 	addi	r17,r6,20
81119208:	2c000504 	addi	r16,r5,20
8111920c:	0029883a 	mov	r20,zero
81119210:	91400117 	ldw	r5,4(r18)
81119214:	11188140 	call	81118814 <_Balloc>
81119218:	92400417 	ldw	r9,16(r18)
8111921c:	9b000417 	ldw	r12,16(r19)
81119220:	12c00504 	addi	r11,r2,20
81119224:	4a51883a 	add	r8,r9,r9
81119228:	6319883a 	add	r12,r12,r12
8111922c:	4211883a 	add	r8,r8,r8
81119230:	6319883a 	add	r12,r12,r12
81119234:	15000315 	stw	r20,12(r2)
81119238:	8211883a 	add	r8,r16,r8
8111923c:	8b19883a 	add	r12,r17,r12
81119240:	0007883a 	mov	r3,zero
81119244:	81400017 	ldw	r5,0(r16)
81119248:	89c00017 	ldw	r7,0(r17)
8111924c:	59800104 	addi	r6,r11,4
81119250:	293fffcc 	andi	r4,r5,65535
81119254:	20c7883a 	add	r3,r4,r3
81119258:	393fffcc 	andi	r4,r7,65535
8111925c:	1909c83a 	sub	r4,r3,r4
81119260:	280ad43a 	srli	r5,r5,16
81119264:	380ed43a 	srli	r7,r7,16
81119268:	2007d43a 	srai	r3,r4,16
8111926c:	213fffcc 	andi	r4,r4,65535
81119270:	29cbc83a 	sub	r5,r5,r7
81119274:	28c7883a 	add	r3,r5,r3
81119278:	180a943a 	slli	r5,r3,16
8111927c:	8c400104 	addi	r17,r17,4
81119280:	84000104 	addi	r16,r16,4
81119284:	2908b03a 	or	r4,r5,r4
81119288:	59000015 	stw	r4,0(r11)
8111928c:	1807d43a 	srai	r3,r3,16
81119290:	3015883a 	mov	r10,r6
81119294:	3017883a 	mov	r11,r6
81119298:	8b3fea36 	bltu	r17,r12,81119244 <__reset+0xfb0f9244>
8111929c:	8200162e 	bgeu	r16,r8,811192f8 <__mdiff+0x184>
811192a0:	8017883a 	mov	r11,r16
811192a4:	59400017 	ldw	r5,0(r11)
811192a8:	31800104 	addi	r6,r6,4
811192ac:	5ac00104 	addi	r11,r11,4
811192b0:	293fffcc 	andi	r4,r5,65535
811192b4:	20c7883a 	add	r3,r4,r3
811192b8:	280ed43a 	srli	r7,r5,16
811192bc:	180bd43a 	srai	r5,r3,16
811192c0:	193fffcc 	andi	r4,r3,65535
811192c4:	3947883a 	add	r3,r7,r5
811192c8:	180a943a 	slli	r5,r3,16
811192cc:	1807d43a 	srai	r3,r3,16
811192d0:	2908b03a 	or	r4,r5,r4
811192d4:	313fff15 	stw	r4,-4(r6)
811192d8:	5a3ff236 	bltu	r11,r8,811192a4 <__reset+0xfb0f92a4>
811192dc:	0406303a 	nor	r3,zero,r16
811192e0:	1a07883a 	add	r3,r3,r8
811192e4:	1806d0ba 	srli	r3,r3,2
811192e8:	18c00044 	addi	r3,r3,1
811192ec:	18c7883a 	add	r3,r3,r3
811192f0:	18c7883a 	add	r3,r3,r3
811192f4:	50d5883a 	add	r10,r10,r3
811192f8:	50ffff04 	addi	r3,r10,-4
811192fc:	2000041e 	bne	r4,zero,81119310 <__mdiff+0x19c>
81119300:	18ffff04 	addi	r3,r3,-4
81119304:	19000017 	ldw	r4,0(r3)
81119308:	4a7fffc4 	addi	r9,r9,-1
8111930c:	203ffc26 	beq	r4,zero,81119300 <__reset+0xfb0f9300>
81119310:	12400415 	stw	r9,16(r2)
81119314:	dfc00517 	ldw	ra,20(sp)
81119318:	dd000417 	ldw	r20,16(sp)
8111931c:	dcc00317 	ldw	r19,12(sp)
81119320:	dc800217 	ldw	r18,8(sp)
81119324:	dc400117 	ldw	r17,4(sp)
81119328:	dc000017 	ldw	r16,0(sp)
8111932c:	dec00604 	addi	sp,sp,24
81119330:	f800283a 	ret
81119334:	000b883a 	mov	r5,zero
81119338:	11188140 	call	81118814 <_Balloc>
8111933c:	00c00044 	movi	r3,1
81119340:	10c00415 	stw	r3,16(r2)
81119344:	10000515 	stw	zero,20(r2)
81119348:	003ff206 	br	81119314 <__reset+0xfb0f9314>
8111934c:	8023883a 	mov	r17,r16
81119350:	0029883a 	mov	r20,zero
81119354:	4021883a 	mov	r16,r8
81119358:	003fad06 	br	81119210 <__reset+0xfb0f9210>
8111935c:	9005883a 	mov	r2,r18
81119360:	94400504 	addi	r17,r18,20
81119364:	9c000504 	addi	r16,r19,20
81119368:	9825883a 	mov	r18,r19
8111936c:	05000044 	movi	r20,1
81119370:	1027883a 	mov	r19,r2
81119374:	003fa606 	br	81119210 <__reset+0xfb0f9210>

81119378 <__ulp>:
81119378:	295ffc2c 	andhi	r5,r5,32752
8111937c:	00bf3034 	movhi	r2,64704
81119380:	2887883a 	add	r3,r5,r2
81119384:	00c0020e 	bge	zero,r3,81119390 <__ulp+0x18>
81119388:	0005883a 	mov	r2,zero
8111938c:	f800283a 	ret
81119390:	00c7c83a 	sub	r3,zero,r3
81119394:	1807d53a 	srai	r3,r3,20
81119398:	008004c4 	movi	r2,19
8111939c:	10c00b0e 	bge	r2,r3,811193cc <__ulp+0x54>
811193a0:	18bffb04 	addi	r2,r3,-20
811193a4:	01000784 	movi	r4,30
811193a8:	0007883a 	mov	r3,zero
811193ac:	20800516 	blt	r4,r2,811193c4 <__ulp+0x4c>
811193b0:	010007c4 	movi	r4,31
811193b4:	2089c83a 	sub	r4,r4,r2
811193b8:	00800044 	movi	r2,1
811193bc:	1104983a 	sll	r2,r2,r4
811193c0:	f800283a 	ret
811193c4:	00800044 	movi	r2,1
811193c8:	f800283a 	ret
811193cc:	01400234 	movhi	r5,8
811193d0:	28c7d83a 	sra	r3,r5,r3
811193d4:	0005883a 	mov	r2,zero
811193d8:	f800283a 	ret

811193dc <__b2d>:
811193dc:	defffa04 	addi	sp,sp,-24
811193e0:	de00012e 	bgeu	sp,et,811193e8 <__b2d+0xc>
811193e4:	003b68fa 	trap	3
811193e8:	dc000015 	stw	r16,0(sp)
811193ec:	24000417 	ldw	r16,16(r4)
811193f0:	dc400115 	stw	r17,4(sp)
811193f4:	24400504 	addi	r17,r4,20
811193f8:	8421883a 	add	r16,r16,r16
811193fc:	8421883a 	add	r16,r16,r16
81119400:	8c21883a 	add	r16,r17,r16
81119404:	dc800215 	stw	r18,8(sp)
81119408:	84bfff17 	ldw	r18,-4(r16)
8111940c:	dd000415 	stw	r20,16(sp)
81119410:	dcc00315 	stw	r19,12(sp)
81119414:	9009883a 	mov	r4,r18
81119418:	2829883a 	mov	r20,r5
8111941c:	dfc00515 	stw	ra,20(sp)
81119420:	1118b200 	call	81118b20 <__hi0bits>
81119424:	00c00804 	movi	r3,32
81119428:	1889c83a 	sub	r4,r3,r2
8111942c:	a1000015 	stw	r4,0(r20)
81119430:	01000284 	movi	r4,10
81119434:	84ffff04 	addi	r19,r16,-4
81119438:	20801216 	blt	r4,r2,81119484 <__b2d+0xa8>
8111943c:	018002c4 	movi	r6,11
81119440:	308dc83a 	sub	r6,r6,r2
81119444:	9186d83a 	srl	r3,r18,r6
81119448:	18cffc34 	orhi	r3,r3,16368
8111944c:	8cc0212e 	bgeu	r17,r19,811194d4 <__b2d+0xf8>
81119450:	813ffe17 	ldw	r4,-8(r16)
81119454:	218cd83a 	srl	r6,r4,r6
81119458:	10800544 	addi	r2,r2,21
8111945c:	9084983a 	sll	r2,r18,r2
81119460:	1184b03a 	or	r2,r2,r6
81119464:	dfc00517 	ldw	ra,20(sp)
81119468:	dd000417 	ldw	r20,16(sp)
8111946c:	dcc00317 	ldw	r19,12(sp)
81119470:	dc800217 	ldw	r18,8(sp)
81119474:	dc400117 	ldw	r17,4(sp)
81119478:	dc000017 	ldw	r16,0(sp)
8111947c:	dec00604 	addi	sp,sp,24
81119480:	f800283a 	ret
81119484:	8cc00f2e 	bgeu	r17,r19,811194c4 <__b2d+0xe8>
81119488:	117ffd44 	addi	r5,r2,-11
8111948c:	80bffe17 	ldw	r2,-8(r16)
81119490:	28000e26 	beq	r5,zero,811194cc <__b2d+0xf0>
81119494:	1949c83a 	sub	r4,r3,r5
81119498:	9164983a 	sll	r18,r18,r5
8111949c:	1106d83a 	srl	r3,r2,r4
811194a0:	81bffe04 	addi	r6,r16,-8
811194a4:	948ffc34 	orhi	r18,r18,16368
811194a8:	90c6b03a 	or	r3,r18,r3
811194ac:	89800e2e 	bgeu	r17,r6,811194e8 <__b2d+0x10c>
811194b0:	81bffd17 	ldw	r6,-12(r16)
811194b4:	1144983a 	sll	r2,r2,r5
811194b8:	310ad83a 	srl	r5,r6,r4
811194bc:	2884b03a 	or	r2,r5,r2
811194c0:	003fe806 	br	81119464 <__reset+0xfb0f9464>
811194c4:	10bffd44 	addi	r2,r2,-11
811194c8:	1000041e 	bne	r2,zero,811194dc <__b2d+0x100>
811194cc:	90cffc34 	orhi	r3,r18,16368
811194d0:	003fe406 	br	81119464 <__reset+0xfb0f9464>
811194d4:	000d883a 	mov	r6,zero
811194d8:	003fdf06 	br	81119458 <__reset+0xfb0f9458>
811194dc:	90a4983a 	sll	r18,r18,r2
811194e0:	0005883a 	mov	r2,zero
811194e4:	003ff906 	br	811194cc <__reset+0xfb0f94cc>
811194e8:	1144983a 	sll	r2,r2,r5
811194ec:	003fdd06 	br	81119464 <__reset+0xfb0f9464>

811194f0 <__d2b>:
811194f0:	defff804 	addi	sp,sp,-32
811194f4:	de00012e 	bgeu	sp,et,811194fc <__d2b+0xc>
811194f8:	003b68fa 	trap	3
811194fc:	dc000215 	stw	r16,8(sp)
81119500:	3021883a 	mov	r16,r6
81119504:	dc400315 	stw	r17,12(sp)
81119508:	8022907a 	slli	r17,r16,1
8111950c:	dd000615 	stw	r20,24(sp)
81119510:	2829883a 	mov	r20,r5
81119514:	01400044 	movi	r5,1
81119518:	dcc00515 	stw	r19,20(sp)
8111951c:	dc800415 	stw	r18,16(sp)
81119520:	dfc00715 	stw	ra,28(sp)
81119524:	3825883a 	mov	r18,r7
81119528:	8822d57a 	srli	r17,r17,21
8111952c:	11188140 	call	81118814 <_Balloc>
81119530:	1027883a 	mov	r19,r2
81119534:	00800434 	movhi	r2,16
81119538:	10bfffc4 	addi	r2,r2,-1
8111953c:	808c703a 	and	r6,r16,r2
81119540:	88000126 	beq	r17,zero,81119548 <__d2b+0x58>
81119544:	31800434 	orhi	r6,r6,16
81119548:	d9800015 	stw	r6,0(sp)
8111954c:	a0002426 	beq	r20,zero,811195e0 <__d2b+0xf0>
81119550:	d9000104 	addi	r4,sp,4
81119554:	dd000115 	stw	r20,4(sp)
81119558:	1118b880 	call	81118b88 <__lo0bits>
8111955c:	d8c00017 	ldw	r3,0(sp)
81119560:	10002f1e 	bne	r2,zero,81119620 <__d2b+0x130>
81119564:	d9000117 	ldw	r4,4(sp)
81119568:	99000515 	stw	r4,20(r19)
8111956c:	1821003a 	cmpeq	r16,r3,zero
81119570:	01000084 	movi	r4,2
81119574:	2421c83a 	sub	r16,r4,r16
81119578:	98c00615 	stw	r3,24(r19)
8111957c:	9c000415 	stw	r16,16(r19)
81119580:	88001f1e 	bne	r17,zero,81119600 <__d2b+0x110>
81119584:	10bef384 	addi	r2,r2,-1074
81119588:	90800015 	stw	r2,0(r18)
8111958c:	00900034 	movhi	r2,16384
81119590:	10bfffc4 	addi	r2,r2,-1
81119594:	8085883a 	add	r2,r16,r2
81119598:	1085883a 	add	r2,r2,r2
8111959c:	1085883a 	add	r2,r2,r2
811195a0:	9885883a 	add	r2,r19,r2
811195a4:	11000517 	ldw	r4,20(r2)
811195a8:	8020917a 	slli	r16,r16,5
811195ac:	1118b200 	call	81118b20 <__hi0bits>
811195b0:	d8c00817 	ldw	r3,32(sp)
811195b4:	8085c83a 	sub	r2,r16,r2
811195b8:	18800015 	stw	r2,0(r3)
811195bc:	9805883a 	mov	r2,r19
811195c0:	dfc00717 	ldw	ra,28(sp)
811195c4:	dd000617 	ldw	r20,24(sp)
811195c8:	dcc00517 	ldw	r19,20(sp)
811195cc:	dc800417 	ldw	r18,16(sp)
811195d0:	dc400317 	ldw	r17,12(sp)
811195d4:	dc000217 	ldw	r16,8(sp)
811195d8:	dec00804 	addi	sp,sp,32
811195dc:	f800283a 	ret
811195e0:	d809883a 	mov	r4,sp
811195e4:	1118b880 	call	81118b88 <__lo0bits>
811195e8:	d8c00017 	ldw	r3,0(sp)
811195ec:	04000044 	movi	r16,1
811195f0:	9c000415 	stw	r16,16(r19)
811195f4:	98c00515 	stw	r3,20(r19)
811195f8:	10800804 	addi	r2,r2,32
811195fc:	883fe126 	beq	r17,zero,81119584 <__reset+0xfb0f9584>
81119600:	00c00d44 	movi	r3,53
81119604:	8c7ef344 	addi	r17,r17,-1075
81119608:	88a3883a 	add	r17,r17,r2
8111960c:	1885c83a 	sub	r2,r3,r2
81119610:	d8c00817 	ldw	r3,32(sp)
81119614:	94400015 	stw	r17,0(r18)
81119618:	18800015 	stw	r2,0(r3)
8111961c:	003fe706 	br	811195bc <__reset+0xfb0f95bc>
81119620:	01000804 	movi	r4,32
81119624:	2089c83a 	sub	r4,r4,r2
81119628:	1908983a 	sll	r4,r3,r4
8111962c:	d9400117 	ldw	r5,4(sp)
81119630:	1886d83a 	srl	r3,r3,r2
81119634:	2148b03a 	or	r4,r4,r5
81119638:	99000515 	stw	r4,20(r19)
8111963c:	d8c00015 	stw	r3,0(sp)
81119640:	003fca06 	br	8111956c <__reset+0xfb0f956c>

81119644 <__ratio>:
81119644:	defff904 	addi	sp,sp,-28
81119648:	de00012e 	bgeu	sp,et,81119650 <__ratio+0xc>
8111964c:	003b68fa 	trap	3
81119650:	dc400315 	stw	r17,12(sp)
81119654:	2823883a 	mov	r17,r5
81119658:	d9400104 	addi	r5,sp,4
8111965c:	dfc00615 	stw	ra,24(sp)
81119660:	dcc00515 	stw	r19,20(sp)
81119664:	dc800415 	stw	r18,16(sp)
81119668:	2027883a 	mov	r19,r4
8111966c:	dc000215 	stw	r16,8(sp)
81119670:	11193dc0 	call	811193dc <__b2d>
81119674:	d80b883a 	mov	r5,sp
81119678:	8809883a 	mov	r4,r17
8111967c:	1025883a 	mov	r18,r2
81119680:	1821883a 	mov	r16,r3
81119684:	11193dc0 	call	811193dc <__b2d>
81119688:	8a000417 	ldw	r8,16(r17)
8111968c:	99000417 	ldw	r4,16(r19)
81119690:	d9400117 	ldw	r5,4(sp)
81119694:	2209c83a 	sub	r4,r4,r8
81119698:	2010917a 	slli	r8,r4,5
8111969c:	d9000017 	ldw	r4,0(sp)
811196a0:	2909c83a 	sub	r4,r5,r4
811196a4:	4109883a 	add	r4,r8,r4
811196a8:	01000e0e 	bge	zero,r4,811196e4 <__ratio+0xa0>
811196ac:	2008953a 	slli	r4,r4,20
811196b0:	2421883a 	add	r16,r4,r16
811196b4:	100d883a 	mov	r6,r2
811196b8:	180f883a 	mov	r7,r3
811196bc:	9009883a 	mov	r4,r18
811196c0:	800b883a 	mov	r5,r16
811196c4:	1121a100 	call	81121a10 <__divdf3>
811196c8:	dfc00617 	ldw	ra,24(sp)
811196cc:	dcc00517 	ldw	r19,20(sp)
811196d0:	dc800417 	ldw	r18,16(sp)
811196d4:	dc400317 	ldw	r17,12(sp)
811196d8:	dc000217 	ldw	r16,8(sp)
811196dc:	dec00704 	addi	sp,sp,28
811196e0:	f800283a 	ret
811196e4:	2008953a 	slli	r4,r4,20
811196e8:	1907c83a 	sub	r3,r3,r4
811196ec:	003ff106 	br	811196b4 <__reset+0xfb0f96b4>

811196f0 <_mprec_log10>:
811196f0:	defffe04 	addi	sp,sp,-8
811196f4:	de00012e 	bgeu	sp,et,811196fc <_mprec_log10+0xc>
811196f8:	003b68fa 	trap	3
811196fc:	008005c4 	movi	r2,23
81119700:	dc000015 	stw	r16,0(sp)
81119704:	dfc00115 	stw	ra,4(sp)
81119708:	2021883a 	mov	r16,r4
8111970c:	11000d0e 	bge	r2,r4,81119744 <_mprec_log10+0x54>
81119710:	0005883a 	mov	r2,zero
81119714:	00cffc34 	movhi	r3,16368
81119718:	843fffc4 	addi	r16,r16,-1
8111971c:	000d883a 	mov	r6,zero
81119720:	01d00934 	movhi	r7,16420
81119724:	1009883a 	mov	r4,r2
81119728:	180b883a 	mov	r5,r3
8111972c:	110cd400 	call	8110cd40 <__muldf3>
81119730:	803ff91e 	bne	r16,zero,81119718 <__reset+0xfb0f9718>
81119734:	dfc00117 	ldw	ra,4(sp)
81119738:	dc000017 	ldw	r16,0(sp)
8111973c:	dec00204 	addi	sp,sp,8
81119740:	f800283a 	ret
81119744:	202090fa 	slli	r16,r4,3
81119748:	00a04534 	movhi	r2,33044
8111974c:	10ab1c04 	addi	r2,r2,-21392
81119750:	1421883a 	add	r16,r2,r16
81119754:	80800017 	ldw	r2,0(r16)
81119758:	80c00117 	ldw	r3,4(r16)
8111975c:	dfc00117 	ldw	ra,4(sp)
81119760:	dc000017 	ldw	r16,0(sp)
81119764:	dec00204 	addi	sp,sp,8
81119768:	f800283a 	ret

8111976c <__copybits>:
8111976c:	297fffc4 	addi	r5,r5,-1
81119770:	280fd17a 	srai	r7,r5,5
81119774:	30c00417 	ldw	r3,16(r6)
81119778:	30800504 	addi	r2,r6,20
8111977c:	39c00044 	addi	r7,r7,1
81119780:	18c7883a 	add	r3,r3,r3
81119784:	39cf883a 	add	r7,r7,r7
81119788:	18c7883a 	add	r3,r3,r3
8111978c:	39cf883a 	add	r7,r7,r7
81119790:	10c7883a 	add	r3,r2,r3
81119794:	21cf883a 	add	r7,r4,r7
81119798:	10c00d2e 	bgeu	r2,r3,811197d0 <__copybits+0x64>
8111979c:	200b883a 	mov	r5,r4
811197a0:	12000017 	ldw	r8,0(r2)
811197a4:	29400104 	addi	r5,r5,4
811197a8:	10800104 	addi	r2,r2,4
811197ac:	2a3fff15 	stw	r8,-4(r5)
811197b0:	10fffb36 	bltu	r2,r3,811197a0 <__reset+0xfb0f97a0>
811197b4:	1985c83a 	sub	r2,r3,r6
811197b8:	10bffac4 	addi	r2,r2,-21
811197bc:	1004d0ba 	srli	r2,r2,2
811197c0:	10800044 	addi	r2,r2,1
811197c4:	1085883a 	add	r2,r2,r2
811197c8:	1085883a 	add	r2,r2,r2
811197cc:	2089883a 	add	r4,r4,r2
811197d0:	21c0032e 	bgeu	r4,r7,811197e0 <__copybits+0x74>
811197d4:	20000015 	stw	zero,0(r4)
811197d8:	21000104 	addi	r4,r4,4
811197dc:	21fffd36 	bltu	r4,r7,811197d4 <__reset+0xfb0f97d4>
811197e0:	f800283a 	ret

811197e4 <__any_on>:
811197e4:	20c00417 	ldw	r3,16(r4)
811197e8:	2805d17a 	srai	r2,r5,5
811197ec:	21000504 	addi	r4,r4,20
811197f0:	18800d0e 	bge	r3,r2,81119828 <__any_on+0x44>
811197f4:	18c7883a 	add	r3,r3,r3
811197f8:	18c7883a 	add	r3,r3,r3
811197fc:	20c7883a 	add	r3,r4,r3
81119800:	20c0192e 	bgeu	r4,r3,81119868 <__any_on+0x84>
81119804:	18bfff17 	ldw	r2,-4(r3)
81119808:	18ffff04 	addi	r3,r3,-4
8111980c:	1000041e 	bne	r2,zero,81119820 <__any_on+0x3c>
81119810:	20c0142e 	bgeu	r4,r3,81119864 <__any_on+0x80>
81119814:	18ffff04 	addi	r3,r3,-4
81119818:	19400017 	ldw	r5,0(r3)
8111981c:	283ffc26 	beq	r5,zero,81119810 <__reset+0xfb0f9810>
81119820:	00800044 	movi	r2,1
81119824:	f800283a 	ret
81119828:	10c00a0e 	bge	r2,r3,81119854 <__any_on+0x70>
8111982c:	1085883a 	add	r2,r2,r2
81119830:	1085883a 	add	r2,r2,r2
81119834:	294007cc 	andi	r5,r5,31
81119838:	2087883a 	add	r3,r4,r2
8111983c:	283ff026 	beq	r5,zero,81119800 <__reset+0xfb0f9800>
81119840:	19800017 	ldw	r6,0(r3)
81119844:	3144d83a 	srl	r2,r6,r5
81119848:	114a983a 	sll	r5,r2,r5
8111984c:	317ff41e 	bne	r6,r5,81119820 <__reset+0xfb0f9820>
81119850:	003feb06 	br	81119800 <__reset+0xfb0f9800>
81119854:	1085883a 	add	r2,r2,r2
81119858:	1085883a 	add	r2,r2,r2
8111985c:	2087883a 	add	r3,r4,r2
81119860:	003fe706 	br	81119800 <__reset+0xfb0f9800>
81119864:	f800283a 	ret
81119868:	0005883a 	mov	r2,zero
8111986c:	f800283a 	ret

81119870 <_putc_r>:
81119870:	defffc04 	addi	sp,sp,-16
81119874:	de00012e 	bgeu	sp,et,8111987c <_putc_r+0xc>
81119878:	003b68fa 	trap	3
8111987c:	dc000215 	stw	r16,8(sp)
81119880:	dfc00315 	stw	ra,12(sp)
81119884:	2021883a 	mov	r16,r4
81119888:	20000226 	beq	r4,zero,81119894 <_putc_r+0x24>
8111988c:	20800e17 	ldw	r2,56(r4)
81119890:	10001b26 	beq	r2,zero,81119900 <_putc_r+0x90>
81119894:	30800217 	ldw	r2,8(r6)
81119898:	10bfffc4 	addi	r2,r2,-1
8111989c:	30800215 	stw	r2,8(r6)
811198a0:	10000a16 	blt	r2,zero,811198cc <_putc_r+0x5c>
811198a4:	30800017 	ldw	r2,0(r6)
811198a8:	11400005 	stb	r5,0(r2)
811198ac:	30800017 	ldw	r2,0(r6)
811198b0:	10c00044 	addi	r3,r2,1
811198b4:	30c00015 	stw	r3,0(r6)
811198b8:	10800003 	ldbu	r2,0(r2)
811198bc:	dfc00317 	ldw	ra,12(sp)
811198c0:	dc000217 	ldw	r16,8(sp)
811198c4:	dec00404 	addi	sp,sp,16
811198c8:	f800283a 	ret
811198cc:	30c00617 	ldw	r3,24(r6)
811198d0:	10c00616 	blt	r2,r3,811198ec <_putc_r+0x7c>
811198d4:	30800017 	ldw	r2,0(r6)
811198d8:	00c00284 	movi	r3,10
811198dc:	11400005 	stb	r5,0(r2)
811198e0:	30800017 	ldw	r2,0(r6)
811198e4:	11400003 	ldbu	r5,0(r2)
811198e8:	28fff11e 	bne	r5,r3,811198b0 <__reset+0xfb0f98b0>
811198ec:	8009883a 	mov	r4,r16
811198f0:	dfc00317 	ldw	ra,12(sp)
811198f4:	dc000217 	ldw	r16,8(sp)
811198f8:	dec00404 	addi	sp,sp,16
811198fc:	111eeb41 	jmpi	8111eeb4 <__swbuf_r>
81119900:	d9400015 	stw	r5,0(sp)
81119904:	d9800115 	stw	r6,4(sp)
81119908:	11173ac0 	call	811173ac <__sinit>
8111990c:	d9800117 	ldw	r6,4(sp)
81119910:	d9400017 	ldw	r5,0(sp)
81119914:	003fdf06 	br	81119894 <__reset+0xfb0f9894>

81119918 <putc>:
81119918:	00a04534 	movhi	r2,33044
8111991c:	defffc04 	addi	sp,sp,-16
81119920:	10b3e404 	addi	r2,r2,-12400
81119924:	de00012e 	bgeu	sp,et,8111992c <putc+0x14>
81119928:	003b68fa 	trap	3
8111992c:	dc000115 	stw	r16,4(sp)
81119930:	14000017 	ldw	r16,0(r2)
81119934:	dc400215 	stw	r17,8(sp)
81119938:	dfc00315 	stw	ra,12(sp)
8111993c:	2023883a 	mov	r17,r4
81119940:	80000226 	beq	r16,zero,8111994c <putc+0x34>
81119944:	80800e17 	ldw	r2,56(r16)
81119948:	10001a26 	beq	r2,zero,811199b4 <putc+0x9c>
8111994c:	28800217 	ldw	r2,8(r5)
81119950:	10bfffc4 	addi	r2,r2,-1
81119954:	28800215 	stw	r2,8(r5)
81119958:	10000b16 	blt	r2,zero,81119988 <putc+0x70>
8111995c:	28800017 	ldw	r2,0(r5)
81119960:	14400005 	stb	r17,0(r2)
81119964:	28800017 	ldw	r2,0(r5)
81119968:	10c00044 	addi	r3,r2,1
8111996c:	28c00015 	stw	r3,0(r5)
81119970:	10800003 	ldbu	r2,0(r2)
81119974:	dfc00317 	ldw	ra,12(sp)
81119978:	dc400217 	ldw	r17,8(sp)
8111997c:	dc000117 	ldw	r16,4(sp)
81119980:	dec00404 	addi	sp,sp,16
81119984:	f800283a 	ret
81119988:	28c00617 	ldw	r3,24(r5)
8111998c:	10c00e16 	blt	r2,r3,811199c8 <putc+0xb0>
81119990:	28800017 	ldw	r2,0(r5)
81119994:	01000284 	movi	r4,10
81119998:	14400005 	stb	r17,0(r2)
8111999c:	28800017 	ldw	r2,0(r5)
811199a0:	10c00003 	ldbu	r3,0(r2)
811199a4:	193ff01e 	bne	r3,r4,81119968 <__reset+0xfb0f9968>
811199a8:	280d883a 	mov	r6,r5
811199ac:	180b883a 	mov	r5,r3
811199b0:	00000706 	br	811199d0 <putc+0xb8>
811199b4:	8009883a 	mov	r4,r16
811199b8:	d9400015 	stw	r5,0(sp)
811199bc:	11173ac0 	call	811173ac <__sinit>
811199c0:	d9400017 	ldw	r5,0(sp)
811199c4:	003fe106 	br	8111994c <__reset+0xfb0f994c>
811199c8:	280d883a 	mov	r6,r5
811199cc:	880b883a 	mov	r5,r17
811199d0:	8009883a 	mov	r4,r16
811199d4:	dfc00317 	ldw	ra,12(sp)
811199d8:	dc400217 	ldw	r17,8(sp)
811199dc:	dc000117 	ldw	r16,4(sp)
811199e0:	dec00404 	addi	sp,sp,16
811199e4:	111eeb41 	jmpi	8111eeb4 <__swbuf_r>

811199e8 <_read_r>:
811199e8:	defffd04 	addi	sp,sp,-12
811199ec:	de00012e 	bgeu	sp,et,811199f4 <_read_r+0xc>
811199f0:	003b68fa 	trap	3
811199f4:	2805883a 	mov	r2,r5
811199f8:	dc000015 	stw	r16,0(sp)
811199fc:	04204534 	movhi	r16,33044
81119a00:	dc400115 	stw	r17,4(sp)
81119a04:	300b883a 	mov	r5,r6
81119a08:	84344404 	addi	r16,r16,-12016
81119a0c:	2023883a 	mov	r17,r4
81119a10:	380d883a 	mov	r6,r7
81119a14:	1009883a 	mov	r4,r2
81119a18:	dfc00215 	stw	ra,8(sp)
81119a1c:	80000015 	stw	zero,0(r16)
81119a20:	11238680 	call	81123868 <read>
81119a24:	00ffffc4 	movi	r3,-1
81119a28:	10c00526 	beq	r2,r3,81119a40 <_read_r+0x58>
81119a2c:	dfc00217 	ldw	ra,8(sp)
81119a30:	dc400117 	ldw	r17,4(sp)
81119a34:	dc000017 	ldw	r16,0(sp)
81119a38:	dec00304 	addi	sp,sp,12
81119a3c:	f800283a 	ret
81119a40:	80c00017 	ldw	r3,0(r16)
81119a44:	183ff926 	beq	r3,zero,81119a2c <__reset+0xfb0f9a2c>
81119a48:	88c00015 	stw	r3,0(r17)
81119a4c:	003ff706 	br	81119a2c <__reset+0xfb0f9a2c>

81119a50 <_realloc_r>:
81119a50:	defff604 	addi	sp,sp,-40
81119a54:	de00012e 	bgeu	sp,et,81119a5c <_realloc_r+0xc>
81119a58:	003b68fa 	trap	3
81119a5c:	dc800215 	stw	r18,8(sp)
81119a60:	dfc00915 	stw	ra,36(sp)
81119a64:	df000815 	stw	fp,32(sp)
81119a68:	ddc00715 	stw	r23,28(sp)
81119a6c:	dd800615 	stw	r22,24(sp)
81119a70:	dd400515 	stw	r21,20(sp)
81119a74:	dd000415 	stw	r20,16(sp)
81119a78:	dcc00315 	stw	r19,12(sp)
81119a7c:	dc400115 	stw	r17,4(sp)
81119a80:	dc000015 	stw	r16,0(sp)
81119a84:	3025883a 	mov	r18,r6
81119a88:	2800b726 	beq	r5,zero,81119d68 <_realloc_r+0x318>
81119a8c:	282b883a 	mov	r21,r5
81119a90:	2029883a 	mov	r20,r4
81119a94:	112403c0 	call	8112403c <__malloc_lock>
81119a98:	a8bfff17 	ldw	r2,-4(r21)
81119a9c:	043fff04 	movi	r16,-4
81119aa0:	90c002c4 	addi	r3,r18,11
81119aa4:	01000584 	movi	r4,22
81119aa8:	acfffe04 	addi	r19,r21,-8
81119aac:	1420703a 	and	r16,r2,r16
81119ab0:	20c0332e 	bgeu	r4,r3,81119b80 <_realloc_r+0x130>
81119ab4:	047ffe04 	movi	r17,-8
81119ab8:	1c62703a 	and	r17,r3,r17
81119abc:	8807883a 	mov	r3,r17
81119ac0:	88005816 	blt	r17,zero,81119c24 <_realloc_r+0x1d4>
81119ac4:	8c805736 	bltu	r17,r18,81119c24 <_realloc_r+0x1d4>
81119ac8:	80c0300e 	bge	r16,r3,81119b8c <_realloc_r+0x13c>
81119acc:	07204534 	movhi	fp,33044
81119ad0:	e72dc404 	addi	fp,fp,-18672
81119ad4:	e1c00217 	ldw	r7,8(fp)
81119ad8:	9c09883a 	add	r4,r19,r16
81119adc:	22000117 	ldw	r8,4(r4)
81119ae0:	21c06326 	beq	r4,r7,81119c70 <_realloc_r+0x220>
81119ae4:	017fff84 	movi	r5,-2
81119ae8:	414a703a 	and	r5,r8,r5
81119aec:	214b883a 	add	r5,r4,r5
81119af0:	29800117 	ldw	r6,4(r5)
81119af4:	3180004c 	andi	r6,r6,1
81119af8:	30003f26 	beq	r6,zero,81119bf8 <_realloc_r+0x1a8>
81119afc:	1080004c 	andi	r2,r2,1
81119b00:	10008326 	beq	r2,zero,81119d10 <_realloc_r+0x2c0>
81119b04:	900b883a 	mov	r5,r18
81119b08:	a009883a 	mov	r4,r20
81119b0c:	110e0cc0 	call	8110e0cc <_malloc_r>
81119b10:	1025883a 	mov	r18,r2
81119b14:	10011e26 	beq	r2,zero,81119f90 <_realloc_r+0x540>
81119b18:	a93fff17 	ldw	r4,-4(r21)
81119b1c:	10fffe04 	addi	r3,r2,-8
81119b20:	00bfff84 	movi	r2,-2
81119b24:	2084703a 	and	r2,r4,r2
81119b28:	9885883a 	add	r2,r19,r2
81119b2c:	1880ee26 	beq	r3,r2,81119ee8 <_realloc_r+0x498>
81119b30:	81bfff04 	addi	r6,r16,-4
81119b34:	00800904 	movi	r2,36
81119b38:	1180b836 	bltu	r2,r6,81119e1c <_realloc_r+0x3cc>
81119b3c:	00c004c4 	movi	r3,19
81119b40:	19809636 	bltu	r3,r6,81119d9c <_realloc_r+0x34c>
81119b44:	9005883a 	mov	r2,r18
81119b48:	a807883a 	mov	r3,r21
81119b4c:	19000017 	ldw	r4,0(r3)
81119b50:	11000015 	stw	r4,0(r2)
81119b54:	19000117 	ldw	r4,4(r3)
81119b58:	11000115 	stw	r4,4(r2)
81119b5c:	18c00217 	ldw	r3,8(r3)
81119b60:	10c00215 	stw	r3,8(r2)
81119b64:	a80b883a 	mov	r5,r21
81119b68:	a009883a 	mov	r4,r20
81119b6c:	11178440 	call	81117844 <_free_r>
81119b70:	a009883a 	mov	r4,r20
81119b74:	11241640 	call	81124164 <__malloc_unlock>
81119b78:	9005883a 	mov	r2,r18
81119b7c:	00001206 	br	81119bc8 <_realloc_r+0x178>
81119b80:	00c00404 	movi	r3,16
81119b84:	1823883a 	mov	r17,r3
81119b88:	003fce06 	br	81119ac4 <__reset+0xfb0f9ac4>
81119b8c:	a825883a 	mov	r18,r21
81119b90:	8445c83a 	sub	r2,r16,r17
81119b94:	00c003c4 	movi	r3,15
81119b98:	18802636 	bltu	r3,r2,81119c34 <_realloc_r+0x1e4>
81119b9c:	99800117 	ldw	r6,4(r19)
81119ba0:	9c07883a 	add	r3,r19,r16
81119ba4:	3180004c 	andi	r6,r6,1
81119ba8:	3420b03a 	or	r16,r6,r16
81119bac:	9c000115 	stw	r16,4(r19)
81119bb0:	18800117 	ldw	r2,4(r3)
81119bb4:	10800054 	ori	r2,r2,1
81119bb8:	18800115 	stw	r2,4(r3)
81119bbc:	a009883a 	mov	r4,r20
81119bc0:	11241640 	call	81124164 <__malloc_unlock>
81119bc4:	9005883a 	mov	r2,r18
81119bc8:	dfc00917 	ldw	ra,36(sp)
81119bcc:	df000817 	ldw	fp,32(sp)
81119bd0:	ddc00717 	ldw	r23,28(sp)
81119bd4:	dd800617 	ldw	r22,24(sp)
81119bd8:	dd400517 	ldw	r21,20(sp)
81119bdc:	dd000417 	ldw	r20,16(sp)
81119be0:	dcc00317 	ldw	r19,12(sp)
81119be4:	dc800217 	ldw	r18,8(sp)
81119be8:	dc400117 	ldw	r17,4(sp)
81119bec:	dc000017 	ldw	r16,0(sp)
81119bf0:	dec00a04 	addi	sp,sp,40
81119bf4:	f800283a 	ret
81119bf8:	017fff04 	movi	r5,-4
81119bfc:	414a703a 	and	r5,r8,r5
81119c00:	814d883a 	add	r6,r16,r5
81119c04:	30c01f16 	blt	r6,r3,81119c84 <_realloc_r+0x234>
81119c08:	20800317 	ldw	r2,12(r4)
81119c0c:	20c00217 	ldw	r3,8(r4)
81119c10:	a825883a 	mov	r18,r21
81119c14:	3021883a 	mov	r16,r6
81119c18:	18800315 	stw	r2,12(r3)
81119c1c:	10c00215 	stw	r3,8(r2)
81119c20:	003fdb06 	br	81119b90 <__reset+0xfb0f9b90>
81119c24:	00800304 	movi	r2,12
81119c28:	a0800015 	stw	r2,0(r20)
81119c2c:	0005883a 	mov	r2,zero
81119c30:	003fe506 	br	81119bc8 <__reset+0xfb0f9bc8>
81119c34:	98c00117 	ldw	r3,4(r19)
81119c38:	9c4b883a 	add	r5,r19,r17
81119c3c:	11000054 	ori	r4,r2,1
81119c40:	18c0004c 	andi	r3,r3,1
81119c44:	1c62b03a 	or	r17,r3,r17
81119c48:	9c400115 	stw	r17,4(r19)
81119c4c:	29000115 	stw	r4,4(r5)
81119c50:	2885883a 	add	r2,r5,r2
81119c54:	10c00117 	ldw	r3,4(r2)
81119c58:	29400204 	addi	r5,r5,8
81119c5c:	a009883a 	mov	r4,r20
81119c60:	18c00054 	ori	r3,r3,1
81119c64:	10c00115 	stw	r3,4(r2)
81119c68:	11178440 	call	81117844 <_free_r>
81119c6c:	003fd306 	br	81119bbc <__reset+0xfb0f9bbc>
81119c70:	017fff04 	movi	r5,-4
81119c74:	414a703a 	and	r5,r8,r5
81119c78:	89800404 	addi	r6,r17,16
81119c7c:	8151883a 	add	r8,r16,r5
81119c80:	4180590e 	bge	r8,r6,81119de8 <_realloc_r+0x398>
81119c84:	1080004c 	andi	r2,r2,1
81119c88:	103f9e1e 	bne	r2,zero,81119b04 <__reset+0xfb0f9b04>
81119c8c:	adbffe17 	ldw	r22,-8(r21)
81119c90:	00bfff04 	movi	r2,-4
81119c94:	9dadc83a 	sub	r22,r19,r22
81119c98:	b1800117 	ldw	r6,4(r22)
81119c9c:	3084703a 	and	r2,r6,r2
81119ca0:	20002026 	beq	r4,zero,81119d24 <_realloc_r+0x2d4>
81119ca4:	80af883a 	add	r23,r16,r2
81119ca8:	b96f883a 	add	r23,r23,r5
81119cac:	21c05f26 	beq	r4,r7,81119e2c <_realloc_r+0x3dc>
81119cb0:	b8c01c16 	blt	r23,r3,81119d24 <_realloc_r+0x2d4>
81119cb4:	20800317 	ldw	r2,12(r4)
81119cb8:	20c00217 	ldw	r3,8(r4)
81119cbc:	81bfff04 	addi	r6,r16,-4
81119cc0:	01000904 	movi	r4,36
81119cc4:	18800315 	stw	r2,12(r3)
81119cc8:	10c00215 	stw	r3,8(r2)
81119ccc:	b0c00217 	ldw	r3,8(r22)
81119cd0:	b0800317 	ldw	r2,12(r22)
81119cd4:	b4800204 	addi	r18,r22,8
81119cd8:	18800315 	stw	r2,12(r3)
81119cdc:	10c00215 	stw	r3,8(r2)
81119ce0:	21801b36 	bltu	r4,r6,81119d50 <_realloc_r+0x300>
81119ce4:	008004c4 	movi	r2,19
81119ce8:	1180352e 	bgeu	r2,r6,81119dc0 <_realloc_r+0x370>
81119cec:	a8800017 	ldw	r2,0(r21)
81119cf0:	b0800215 	stw	r2,8(r22)
81119cf4:	a8800117 	ldw	r2,4(r21)
81119cf8:	b0800315 	stw	r2,12(r22)
81119cfc:	008006c4 	movi	r2,27
81119d00:	11807f36 	bltu	r2,r6,81119f00 <_realloc_r+0x4b0>
81119d04:	b0800404 	addi	r2,r22,16
81119d08:	ad400204 	addi	r21,r21,8
81119d0c:	00002d06 	br	81119dc4 <_realloc_r+0x374>
81119d10:	adbffe17 	ldw	r22,-8(r21)
81119d14:	00bfff04 	movi	r2,-4
81119d18:	9dadc83a 	sub	r22,r19,r22
81119d1c:	b1000117 	ldw	r4,4(r22)
81119d20:	2084703a 	and	r2,r4,r2
81119d24:	b03f7726 	beq	r22,zero,81119b04 <__reset+0xfb0f9b04>
81119d28:	80af883a 	add	r23,r16,r2
81119d2c:	b8ff7516 	blt	r23,r3,81119b04 <__reset+0xfb0f9b04>
81119d30:	b0800317 	ldw	r2,12(r22)
81119d34:	b0c00217 	ldw	r3,8(r22)
81119d38:	81bfff04 	addi	r6,r16,-4
81119d3c:	01000904 	movi	r4,36
81119d40:	18800315 	stw	r2,12(r3)
81119d44:	10c00215 	stw	r3,8(r2)
81119d48:	b4800204 	addi	r18,r22,8
81119d4c:	21bfe52e 	bgeu	r4,r6,81119ce4 <__reset+0xfb0f9ce4>
81119d50:	a80b883a 	mov	r5,r21
81119d54:	9009883a 	mov	r4,r18
81119d58:	11186b80 	call	811186b8 <memmove>
81119d5c:	b821883a 	mov	r16,r23
81119d60:	b027883a 	mov	r19,r22
81119d64:	003f8a06 	br	81119b90 <__reset+0xfb0f9b90>
81119d68:	300b883a 	mov	r5,r6
81119d6c:	dfc00917 	ldw	ra,36(sp)
81119d70:	df000817 	ldw	fp,32(sp)
81119d74:	ddc00717 	ldw	r23,28(sp)
81119d78:	dd800617 	ldw	r22,24(sp)
81119d7c:	dd400517 	ldw	r21,20(sp)
81119d80:	dd000417 	ldw	r20,16(sp)
81119d84:	dcc00317 	ldw	r19,12(sp)
81119d88:	dc800217 	ldw	r18,8(sp)
81119d8c:	dc400117 	ldw	r17,4(sp)
81119d90:	dc000017 	ldw	r16,0(sp)
81119d94:	dec00a04 	addi	sp,sp,40
81119d98:	110e0cc1 	jmpi	8110e0cc <_malloc_r>
81119d9c:	a8c00017 	ldw	r3,0(r21)
81119da0:	90c00015 	stw	r3,0(r18)
81119da4:	a8c00117 	ldw	r3,4(r21)
81119da8:	90c00115 	stw	r3,4(r18)
81119dac:	00c006c4 	movi	r3,27
81119db0:	19804536 	bltu	r3,r6,81119ec8 <_realloc_r+0x478>
81119db4:	90800204 	addi	r2,r18,8
81119db8:	a8c00204 	addi	r3,r21,8
81119dbc:	003f6306 	br	81119b4c <__reset+0xfb0f9b4c>
81119dc0:	9005883a 	mov	r2,r18
81119dc4:	a8c00017 	ldw	r3,0(r21)
81119dc8:	b821883a 	mov	r16,r23
81119dcc:	b027883a 	mov	r19,r22
81119dd0:	10c00015 	stw	r3,0(r2)
81119dd4:	a8c00117 	ldw	r3,4(r21)
81119dd8:	10c00115 	stw	r3,4(r2)
81119ddc:	a8c00217 	ldw	r3,8(r21)
81119de0:	10c00215 	stw	r3,8(r2)
81119de4:	003f6a06 	br	81119b90 <__reset+0xfb0f9b90>
81119de8:	9c67883a 	add	r19,r19,r17
81119dec:	4445c83a 	sub	r2,r8,r17
81119df0:	e4c00215 	stw	r19,8(fp)
81119df4:	10800054 	ori	r2,r2,1
81119df8:	98800115 	stw	r2,4(r19)
81119dfc:	a8bfff17 	ldw	r2,-4(r21)
81119e00:	a009883a 	mov	r4,r20
81119e04:	1080004c 	andi	r2,r2,1
81119e08:	1462b03a 	or	r17,r2,r17
81119e0c:	ac7fff15 	stw	r17,-4(r21)
81119e10:	11241640 	call	81124164 <__malloc_unlock>
81119e14:	a805883a 	mov	r2,r21
81119e18:	003f6b06 	br	81119bc8 <__reset+0xfb0f9bc8>
81119e1c:	a80b883a 	mov	r5,r21
81119e20:	9009883a 	mov	r4,r18
81119e24:	11186b80 	call	811186b8 <memmove>
81119e28:	003f4e06 	br	81119b64 <__reset+0xfb0f9b64>
81119e2c:	89000404 	addi	r4,r17,16
81119e30:	b93fbc16 	blt	r23,r4,81119d24 <__reset+0xfb0f9d24>
81119e34:	b0800317 	ldw	r2,12(r22)
81119e38:	b0c00217 	ldw	r3,8(r22)
81119e3c:	81bfff04 	addi	r6,r16,-4
81119e40:	01000904 	movi	r4,36
81119e44:	18800315 	stw	r2,12(r3)
81119e48:	10c00215 	stw	r3,8(r2)
81119e4c:	b4800204 	addi	r18,r22,8
81119e50:	21804336 	bltu	r4,r6,81119f60 <_realloc_r+0x510>
81119e54:	008004c4 	movi	r2,19
81119e58:	11803f2e 	bgeu	r2,r6,81119f58 <_realloc_r+0x508>
81119e5c:	a8800017 	ldw	r2,0(r21)
81119e60:	b0800215 	stw	r2,8(r22)
81119e64:	a8800117 	ldw	r2,4(r21)
81119e68:	b0800315 	stw	r2,12(r22)
81119e6c:	008006c4 	movi	r2,27
81119e70:	11803f36 	bltu	r2,r6,81119f70 <_realloc_r+0x520>
81119e74:	b0800404 	addi	r2,r22,16
81119e78:	ad400204 	addi	r21,r21,8
81119e7c:	a8c00017 	ldw	r3,0(r21)
81119e80:	10c00015 	stw	r3,0(r2)
81119e84:	a8c00117 	ldw	r3,4(r21)
81119e88:	10c00115 	stw	r3,4(r2)
81119e8c:	a8c00217 	ldw	r3,8(r21)
81119e90:	10c00215 	stw	r3,8(r2)
81119e94:	b447883a 	add	r3,r22,r17
81119e98:	bc45c83a 	sub	r2,r23,r17
81119e9c:	e0c00215 	stw	r3,8(fp)
81119ea0:	10800054 	ori	r2,r2,1
81119ea4:	18800115 	stw	r2,4(r3)
81119ea8:	b0800117 	ldw	r2,4(r22)
81119eac:	a009883a 	mov	r4,r20
81119eb0:	1080004c 	andi	r2,r2,1
81119eb4:	1462b03a 	or	r17,r2,r17
81119eb8:	b4400115 	stw	r17,4(r22)
81119ebc:	11241640 	call	81124164 <__malloc_unlock>
81119ec0:	9005883a 	mov	r2,r18
81119ec4:	003f4006 	br	81119bc8 <__reset+0xfb0f9bc8>
81119ec8:	a8c00217 	ldw	r3,8(r21)
81119ecc:	90c00215 	stw	r3,8(r18)
81119ed0:	a8c00317 	ldw	r3,12(r21)
81119ed4:	90c00315 	stw	r3,12(r18)
81119ed8:	30801126 	beq	r6,r2,81119f20 <_realloc_r+0x4d0>
81119edc:	90800404 	addi	r2,r18,16
81119ee0:	a8c00404 	addi	r3,r21,16
81119ee4:	003f1906 	br	81119b4c <__reset+0xfb0f9b4c>
81119ee8:	90ffff17 	ldw	r3,-4(r18)
81119eec:	00bfff04 	movi	r2,-4
81119ef0:	a825883a 	mov	r18,r21
81119ef4:	1884703a 	and	r2,r3,r2
81119ef8:	80a1883a 	add	r16,r16,r2
81119efc:	003f2406 	br	81119b90 <__reset+0xfb0f9b90>
81119f00:	a8800217 	ldw	r2,8(r21)
81119f04:	b0800415 	stw	r2,16(r22)
81119f08:	a8800317 	ldw	r2,12(r21)
81119f0c:	b0800515 	stw	r2,20(r22)
81119f10:	31000a26 	beq	r6,r4,81119f3c <_realloc_r+0x4ec>
81119f14:	b0800604 	addi	r2,r22,24
81119f18:	ad400404 	addi	r21,r21,16
81119f1c:	003fa906 	br	81119dc4 <__reset+0xfb0f9dc4>
81119f20:	a9000417 	ldw	r4,16(r21)
81119f24:	90800604 	addi	r2,r18,24
81119f28:	a8c00604 	addi	r3,r21,24
81119f2c:	91000415 	stw	r4,16(r18)
81119f30:	a9000517 	ldw	r4,20(r21)
81119f34:	91000515 	stw	r4,20(r18)
81119f38:	003f0406 	br	81119b4c <__reset+0xfb0f9b4c>
81119f3c:	a8c00417 	ldw	r3,16(r21)
81119f40:	ad400604 	addi	r21,r21,24
81119f44:	b0800804 	addi	r2,r22,32
81119f48:	b0c00615 	stw	r3,24(r22)
81119f4c:	a8ffff17 	ldw	r3,-4(r21)
81119f50:	b0c00715 	stw	r3,28(r22)
81119f54:	003f9b06 	br	81119dc4 <__reset+0xfb0f9dc4>
81119f58:	9005883a 	mov	r2,r18
81119f5c:	003fc706 	br	81119e7c <__reset+0xfb0f9e7c>
81119f60:	a80b883a 	mov	r5,r21
81119f64:	9009883a 	mov	r4,r18
81119f68:	11186b80 	call	811186b8 <memmove>
81119f6c:	003fc906 	br	81119e94 <__reset+0xfb0f9e94>
81119f70:	a8800217 	ldw	r2,8(r21)
81119f74:	b0800415 	stw	r2,16(r22)
81119f78:	a8800317 	ldw	r2,12(r21)
81119f7c:	b0800515 	stw	r2,20(r22)
81119f80:	31000726 	beq	r6,r4,81119fa0 <_realloc_r+0x550>
81119f84:	b0800604 	addi	r2,r22,24
81119f88:	ad400404 	addi	r21,r21,16
81119f8c:	003fbb06 	br	81119e7c <__reset+0xfb0f9e7c>
81119f90:	a009883a 	mov	r4,r20
81119f94:	11241640 	call	81124164 <__malloc_unlock>
81119f98:	0005883a 	mov	r2,zero
81119f9c:	003f0a06 	br	81119bc8 <__reset+0xfb0f9bc8>
81119fa0:	a8c00417 	ldw	r3,16(r21)
81119fa4:	ad400604 	addi	r21,r21,24
81119fa8:	b0800804 	addi	r2,r22,32
81119fac:	b0c00615 	stw	r3,24(r22)
81119fb0:	a8ffff17 	ldw	r3,-4(r21)
81119fb4:	b0c00715 	stw	r3,28(r22)
81119fb8:	003fb006 	br	81119e7c <__reset+0xfb0f9e7c>

81119fbc <__fpclassifyd>:
81119fbc:	00a00034 	movhi	r2,32768
81119fc0:	10bfffc4 	addi	r2,r2,-1
81119fc4:	2884703a 	and	r2,r5,r2
81119fc8:	10000726 	beq	r2,zero,81119fe8 <__fpclassifyd+0x2c>
81119fcc:	00fffc34 	movhi	r3,65520
81119fd0:	019ff834 	movhi	r6,32736
81119fd4:	28c7883a 	add	r3,r5,r3
81119fd8:	31bfffc4 	addi	r6,r6,-1
81119fdc:	30c00536 	bltu	r6,r3,81119ff4 <__fpclassifyd+0x38>
81119fe0:	00800104 	movi	r2,4
81119fe4:	f800283a 	ret
81119fe8:	2000021e 	bne	r4,zero,81119ff4 <__fpclassifyd+0x38>
81119fec:	00800084 	movi	r2,2
81119ff0:	f800283a 	ret
81119ff4:	00dffc34 	movhi	r3,32752
81119ff8:	019ff834 	movhi	r6,32736
81119ffc:	28cb883a 	add	r5,r5,r3
8111a000:	31bfffc4 	addi	r6,r6,-1
8111a004:	317ff62e 	bgeu	r6,r5,81119fe0 <__reset+0xfb0f9fe0>
8111a008:	01400434 	movhi	r5,16
8111a00c:	297fffc4 	addi	r5,r5,-1
8111a010:	28800236 	bltu	r5,r2,8111a01c <__fpclassifyd+0x60>
8111a014:	008000c4 	movi	r2,3
8111a018:	f800283a 	ret
8111a01c:	10c00226 	beq	r2,r3,8111a028 <__fpclassifyd+0x6c>
8111a020:	0005883a 	mov	r2,zero
8111a024:	f800283a 	ret
8111a028:	2005003a 	cmpeq	r2,r4,zero
8111a02c:	f800283a 	ret

8111a030 <__sccl>:
8111a030:	2a000003 	ldbu	r8,0(r5)
8111a034:	00801784 	movi	r2,94
8111a038:	40802a26 	beq	r8,r2,8111a0e4 <__sccl+0xb4>
8111a03c:	29400044 	addi	r5,r5,1
8111a040:	000f883a 	mov	r7,zero
8111a044:	0013883a 	mov	r9,zero
8111a048:	2007883a 	mov	r3,r4
8111a04c:	21804004 	addi	r6,r4,256
8111a050:	19c00005 	stb	r7,0(r3)
8111a054:	18c00044 	addi	r3,r3,1
8111a058:	19bffd1e 	bne	r3,r6,8111a050 <__reset+0xfb0fa050>
8111a05c:	40001126 	beq	r8,zero,8111a0a4 <__sccl+0x74>
8111a060:	00800044 	movi	r2,1
8111a064:	124fc83a 	sub	r7,r2,r9
8111a068:	02800b44 	movi	r10,45
8111a06c:	02c01744 	movi	r11,93
8111a070:	2205883a 	add	r2,r4,r8
8111a074:	11c00005 	stb	r7,0(r2)
8111a078:	28800044 	addi	r2,r5,1
8111a07c:	28c00003 	ldbu	r3,0(r5)
8111a080:	1a800a26 	beq	r3,r10,8111a0ac <__sccl+0x7c>
8111a084:	1ac00426 	beq	r3,r11,8111a098 <__sccl+0x68>
8111a088:	18000426 	beq	r3,zero,8111a09c <__sccl+0x6c>
8111a08c:	1811883a 	mov	r8,r3
8111a090:	100b883a 	mov	r5,r2
8111a094:	003ff606 	br	8111a070 <__reset+0xfb0fa070>
8111a098:	f800283a 	ret
8111a09c:	2805883a 	mov	r2,r5
8111a0a0:	f800283a 	ret
8111a0a4:	28bfffc4 	addi	r2,r5,-1
8111a0a8:	f800283a 	ret
8111a0ac:	12400003 	ldbu	r9,0(r2)
8111a0b0:	4ac01126 	beq	r9,r11,8111a0f8 <__sccl+0xc8>
8111a0b4:	4a001016 	blt	r9,r8,8111a0f8 <__sccl+0xc8>
8111a0b8:	41800044 	addi	r6,r8,1
8111a0bc:	29400084 	addi	r5,r5,2
8111a0c0:	2187883a 	add	r3,r4,r6
8111a0c4:	00000106 	br	8111a0cc <__sccl+0x9c>
8111a0c8:	31800044 	addi	r6,r6,1
8111a0cc:	19c00005 	stb	r7,0(r3)
8111a0d0:	3011883a 	mov	r8,r6
8111a0d4:	18c00044 	addi	r3,r3,1
8111a0d8:	327ffb16 	blt	r6,r9,8111a0c8 <__reset+0xfb0fa0c8>
8111a0dc:	10800084 	addi	r2,r2,2
8111a0e0:	003fe606 	br	8111a07c <__reset+0xfb0fa07c>
8111a0e4:	2a000043 	ldbu	r8,1(r5)
8111a0e8:	01c00044 	movi	r7,1
8111a0ec:	29400084 	addi	r5,r5,2
8111a0f0:	02400044 	movi	r9,1
8111a0f4:	003fd406 	br	8111a048 <__reset+0xfb0fa048>
8111a0f8:	5011883a 	mov	r8,r10
8111a0fc:	003fe406 	br	8111a090 <__reset+0xfb0fa090>

8111a100 <nanf>:
8111a100:	009ff034 	movhi	r2,32704
8111a104:	f800283a 	ret

8111a108 <strcmp>:
8111a108:	2144b03a 	or	r2,r4,r5
8111a10c:	108000cc 	andi	r2,r2,3
8111a110:	1000171e 	bne	r2,zero,8111a170 <strcmp+0x68>
8111a114:	20800017 	ldw	r2,0(r4)
8111a118:	28c00017 	ldw	r3,0(r5)
8111a11c:	10c0141e 	bne	r2,r3,8111a170 <strcmp+0x68>
8111a120:	027fbff4 	movhi	r9,65279
8111a124:	4a7fbfc4 	addi	r9,r9,-257
8111a128:	0086303a 	nor	r3,zero,r2
8111a12c:	02202074 	movhi	r8,32897
8111a130:	1245883a 	add	r2,r2,r9
8111a134:	42202004 	addi	r8,r8,-32640
8111a138:	10c4703a 	and	r2,r2,r3
8111a13c:	1204703a 	and	r2,r2,r8
8111a140:	10000226 	beq	r2,zero,8111a14c <strcmp+0x44>
8111a144:	00002306 	br	8111a1d4 <strcmp+0xcc>
8111a148:	1000221e 	bne	r2,zero,8111a1d4 <strcmp+0xcc>
8111a14c:	21000104 	addi	r4,r4,4
8111a150:	20c00017 	ldw	r3,0(r4)
8111a154:	29400104 	addi	r5,r5,4
8111a158:	29800017 	ldw	r6,0(r5)
8111a15c:	1a4f883a 	add	r7,r3,r9
8111a160:	00c4303a 	nor	r2,zero,r3
8111a164:	3884703a 	and	r2,r7,r2
8111a168:	1204703a 	and	r2,r2,r8
8111a16c:	19bff626 	beq	r3,r6,8111a148 <__reset+0xfb0fa148>
8111a170:	20800003 	ldbu	r2,0(r4)
8111a174:	10c03fcc 	andi	r3,r2,255
8111a178:	18c0201c 	xori	r3,r3,128
8111a17c:	18ffe004 	addi	r3,r3,-128
8111a180:	18000c26 	beq	r3,zero,8111a1b4 <strcmp+0xac>
8111a184:	29800007 	ldb	r6,0(r5)
8111a188:	19800326 	beq	r3,r6,8111a198 <strcmp+0x90>
8111a18c:	00001306 	br	8111a1dc <strcmp+0xd4>
8111a190:	29800007 	ldb	r6,0(r5)
8111a194:	11800b1e 	bne	r2,r6,8111a1c4 <strcmp+0xbc>
8111a198:	21000044 	addi	r4,r4,1
8111a19c:	20c00003 	ldbu	r3,0(r4)
8111a1a0:	29400044 	addi	r5,r5,1
8111a1a4:	18803fcc 	andi	r2,r3,255
8111a1a8:	1080201c 	xori	r2,r2,128
8111a1ac:	10bfe004 	addi	r2,r2,-128
8111a1b0:	103ff71e 	bne	r2,zero,8111a190 <__reset+0xfb0fa190>
8111a1b4:	0007883a 	mov	r3,zero
8111a1b8:	28800003 	ldbu	r2,0(r5)
8111a1bc:	1885c83a 	sub	r2,r3,r2
8111a1c0:	f800283a 	ret
8111a1c4:	28800003 	ldbu	r2,0(r5)
8111a1c8:	18c03fcc 	andi	r3,r3,255
8111a1cc:	1885c83a 	sub	r2,r3,r2
8111a1d0:	f800283a 	ret
8111a1d4:	0005883a 	mov	r2,zero
8111a1d8:	f800283a 	ret
8111a1dc:	10c03fcc 	andi	r3,r2,255
8111a1e0:	003ff506 	br	8111a1b8 <__reset+0xfb0fa1b8>

8111a1e4 <sulp>:
8111a1e4:	defffd04 	addi	sp,sp,-12
8111a1e8:	de00012e 	bgeu	sp,et,8111a1f0 <sulp+0xc>
8111a1ec:	003b68fa 	trap	3
8111a1f0:	dc400115 	stw	r17,4(sp)
8111a1f4:	3023883a 	mov	r17,r6
8111a1f8:	dc000015 	stw	r16,0(sp)
8111a1fc:	dfc00215 	stw	ra,8(sp)
8111a200:	2821883a 	mov	r16,r5
8111a204:	11193780 	call	81119378 <__ulp>
8111a208:	88000c26 	beq	r17,zero,8111a23c <sulp+0x58>
8111a20c:	841ffc2c 	andhi	r16,r16,32752
8111a210:	8020d53a 	srli	r16,r16,20
8111a214:	01c01ac4 	movi	r7,107
8111a218:	3c21c83a 	sub	r16,r7,r16
8111a21c:	0400070e 	bge	zero,r16,8111a23c <sulp+0x58>
8111a220:	8020953a 	slli	r16,r16,20
8111a224:	01cffc34 	movhi	r7,16368
8111a228:	000d883a 	mov	r6,zero
8111a22c:	81cf883a 	add	r7,r16,r7
8111a230:	1009883a 	mov	r4,r2
8111a234:	180b883a 	mov	r5,r3
8111a238:	110cd400 	call	8110cd40 <__muldf3>
8111a23c:	dfc00217 	ldw	ra,8(sp)
8111a240:	dc400117 	ldw	r17,4(sp)
8111a244:	dc000017 	ldw	r16,0(sp)
8111a248:	dec00304 	addi	sp,sp,12
8111a24c:	f800283a 	ret

8111a250 <_strtod_r>:
8111a250:	deffe204 	addi	sp,sp,-120
8111a254:	de00012e 	bgeu	sp,et,8111a25c <_strtod_r+0xc>
8111a258:	003b68fa 	trap	3
8111a25c:	ddc01b15 	stw	r23,108(sp)
8111a260:	dd001815 	stw	r20,96(sp)
8111a264:	dc801615 	stw	r18,88(sp)
8111a268:	dc401515 	stw	r17,84(sp)
8111a26c:	dc001415 	stw	r16,80(sp)
8111a270:	d9400615 	stw	r5,24(sp)
8111a274:	dfc01d15 	stw	ra,116(sp)
8111a278:	df001c15 	stw	fp,112(sp)
8111a27c:	dd801a15 	stw	r22,104(sp)
8111a280:	dd401915 	stw	r21,100(sp)
8111a284:	dcc01715 	stw	r19,92(sp)
8111a288:	2021883a 	mov	r16,r4
8111a28c:	d8000515 	stw	zero,20(sp)
8111a290:	2809883a 	mov	r4,r5
8111a294:	20800003 	ldbu	r2,0(r4)
8111a298:	01e044b4 	movhi	r7,33042
8111a29c:	282f883a 	mov	r23,r5
8111a2a0:	10c03fcc 	andi	r3,r2,255
8111a2a4:	01400b44 	movi	r5,45
8111a2a8:	39e8b304 	addi	r7,r7,-23860
8111a2ac:	3029883a 	mov	r20,r6
8111a2b0:	0025883a 	mov	r18,zero
8111a2b4:	0023883a 	mov	r17,zero
8111a2b8:	28c0ba36 	bltu	r5,r3,8111a5a4 <_strtod_r+0x354>
8111a2bc:	180690ba 	slli	r3,r3,2
8111a2c0:	19c7883a 	add	r3,r3,r7
8111a2c4:	18c00017 	ldw	r3,0(r3)
8111a2c8:	1800683a 	jmp	r3
8111a2cc:	8111a38c 	andi	r4,r16,18062
8111a2d0:	8111a5a4 	muli	r4,r16,18070
8111a2d4:	8111a5a4 	muli	r4,r16,18070
8111a2d8:	8111a5a4 	muli	r4,r16,18070
8111a2dc:	8111a5a4 	muli	r4,r16,18070
8111a2e0:	8111a5a4 	muli	r4,r16,18070
8111a2e4:	8111a5a4 	muli	r4,r16,18070
8111a2e8:	8111a5a4 	muli	r4,r16,18070
8111a2ec:	8111a5a4 	muli	r4,r16,18070
8111a2f0:	8111a590 	cmplti	r4,r16,18070
8111a2f4:	8111a590 	cmplti	r4,r16,18070
8111a2f8:	8111a590 	cmplti	r4,r16,18070
8111a2fc:	8111a590 	cmplti	r4,r16,18070
8111a300:	8111a590 	cmplti	r4,r16,18070
8111a304:	8111a5a4 	muli	r4,r16,18070
8111a308:	8111a5a4 	muli	r4,r16,18070
8111a30c:	8111a5a4 	muli	r4,r16,18070
8111a310:	8111a5a4 	muli	r4,r16,18070
8111a314:	8111a5a4 	muli	r4,r16,18070
8111a318:	8111a5a4 	muli	r4,r16,18070
8111a31c:	8111a5a4 	muli	r4,r16,18070
8111a320:	8111a5a4 	muli	r4,r16,18070
8111a324:	8111a5a4 	muli	r4,r16,18070
8111a328:	8111a5a4 	muli	r4,r16,18070
8111a32c:	8111a5a4 	muli	r4,r16,18070
8111a330:	8111a5a4 	muli	r4,r16,18070
8111a334:	8111a5a4 	muli	r4,r16,18070
8111a338:	8111a5a4 	muli	r4,r16,18070
8111a33c:	8111a5a4 	muli	r4,r16,18070
8111a340:	8111a5a4 	muli	r4,r16,18070
8111a344:	8111a5a4 	muli	r4,r16,18070
8111a348:	8111a5a4 	muli	r4,r16,18070
8111a34c:	8111a590 	cmplti	r4,r16,18070
8111a350:	8111a5a4 	muli	r4,r16,18070
8111a354:	8111a5a4 	muli	r4,r16,18070
8111a358:	8111a5a4 	muli	r4,r16,18070
8111a35c:	8111a5a4 	muli	r4,r16,18070
8111a360:	8111a5a4 	muli	r4,r16,18070
8111a364:	8111a5a4 	muli	r4,r16,18070
8111a368:	8111a5a4 	muli	r4,r16,18070
8111a36c:	8111a5a4 	muli	r4,r16,18070
8111a370:	8111a5a4 	muli	r4,r16,18070
8111a374:	8111a5a4 	muli	r4,r16,18070
8111a378:	8111a3e4 	muli	r4,r16,18063
8111a37c:	8111a5a4 	muli	r4,r16,18070
8111a380:	8111a584 	addi	r4,r16,18070
8111a384:	00801244 	movi	r2,73
8111a388:	88843526 	beq	r17,r2,8111b460 <_strtod_r+0x1210>
8111a38c:	002b883a 	mov	r21,zero
8111a390:	002d883a 	mov	r22,zero
8111a394:	a0000526 	beq	r20,zero,8111a3ac <_strtod_r+0x15c>
8111a398:	d8000715 	stw	zero,28(sp)
8111a39c:	a5c00015 	stw	r23,0(r20)
8111a3a0:	d9000717 	ldw	r4,28(sp)
8111a3a4:	20000126 	beq	r4,zero,8111a3ac <_strtod_r+0x15c>
8111a3a8:	b5a0003c 	xorhi	r22,r22,32768
8111a3ac:	a805883a 	mov	r2,r21
8111a3b0:	b007883a 	mov	r3,r22
8111a3b4:	dfc01d17 	ldw	ra,116(sp)
8111a3b8:	df001c17 	ldw	fp,112(sp)
8111a3bc:	ddc01b17 	ldw	r23,108(sp)
8111a3c0:	dd801a17 	ldw	r22,104(sp)
8111a3c4:	dd401917 	ldw	r21,100(sp)
8111a3c8:	dd001817 	ldw	r20,96(sp)
8111a3cc:	dcc01717 	ldw	r19,92(sp)
8111a3d0:	dc801617 	ldw	r18,88(sp)
8111a3d4:	dc401517 	ldw	r17,84(sp)
8111a3d8:	dc001417 	ldw	r16,80(sp)
8111a3dc:	dec01e04 	addi	sp,sp,120
8111a3e0:	f800283a 	ret
8111a3e4:	d8000715 	stw	zero,28(sp)
8111a3e8:	24c00044 	addi	r19,r4,1
8111a3ec:	dcc00615 	stw	r19,24(sp)
8111a3f0:	20800043 	ldbu	r2,1(r4)
8111a3f4:	10c03fcc 	andi	r3,r2,255
8111a3f8:	18c0201c 	xori	r3,r3,128
8111a3fc:	18ffe004 	addi	r3,r3,-128
8111a400:	183fe226 	beq	r3,zero,8111a38c <__reset+0xfb0fa38c>
8111a404:	11403fcc 	andi	r5,r2,255
8111a408:	2940201c 	xori	r5,r5,128
8111a40c:	297fe004 	addi	r5,r5,-128
8111a410:	00c00c04 	movi	r3,48
8111a414:	28c0e526 	beq	r5,r3,8111a7ac <_strtod_r+0x55c>
8111a418:	dcc00815 	stw	r19,32(sp)
8111a41c:	0025883a 	mov	r18,zero
8111a420:	10fff404 	addi	r3,r2,-48
8111a424:	18c03fcc 	andi	r3,r3,255
8111a428:	01000244 	movi	r4,9
8111a42c:	20c37536 	bltu	r4,r3,8111b204 <_strtod_r+0xfb4>
8111a430:	dd400817 	ldw	r21,32(sp)
8111a434:	0027883a 	mov	r19,zero
8111a438:	0039883a 	mov	fp,zero
8111a43c:	002d883a 	mov	r22,zero
8111a440:	01400204 	movi	r5,8
8111a444:	2d805a16 	blt	r5,r22,8111a5b0 <_strtod_r+0x360>
8111a448:	e70002a4 	muli	fp,fp,10
8111a44c:	10c03fcc 	andi	r3,r2,255
8111a450:	18c0201c 	xori	r3,r3,128
8111a454:	18ffe004 	addi	r3,r3,-128
8111a458:	e0f9883a 	add	fp,fp,r3
8111a45c:	e73ff404 	addi	fp,fp,-48
8111a460:	ad400044 	addi	r21,r21,1
8111a464:	dd400615 	stw	r21,24(sp)
8111a468:	a8800003 	ldbu	r2,0(r21)
8111a46c:	b5800044 	addi	r22,r22,1
8111a470:	10fff404 	addi	r3,r2,-48
8111a474:	18c03fcc 	andi	r3,r3,255
8111a478:	20fff22e 	bgeu	r4,r3,8111a444 <__reset+0xfb0fa444>
8111a47c:	14403fcc 	andi	r17,r2,255
8111a480:	8c40201c 	xori	r17,r17,128
8111a484:	8c7fe004 	addi	r17,r17,-128
8111a488:	8009883a 	mov	r4,r16
8111a48c:	11182f80 	call	811182f8 <_localeconv_r>
8111a490:	11400017 	ldw	r5,0(r2)
8111a494:	8009883a 	mov	r4,r16
8111a498:	d9401315 	stw	r5,76(sp)
8111a49c:	11182f80 	call	811182f8 <_localeconv_r>
8111a4a0:	11000017 	ldw	r4,0(r2)
8111a4a4:	110f27c0 	call	8110f27c <strlen>
8111a4a8:	d9401317 	ldw	r5,76(sp)
8111a4ac:	100d883a 	mov	r6,r2
8111a4b0:	a809883a 	mov	r4,r21
8111a4b4:	111ffa00 	call	8111ffa0 <strncmp>
8111a4b8:	1000ce26 	beq	r2,zero,8111a7f4 <_strtod_r+0x5a4>
8111a4bc:	b013883a 	mov	r9,r22
8111a4c0:	000b883a 	mov	r5,zero
8111a4c4:	0015883a 	mov	r10,zero
8111a4c8:	0017883a 	mov	r11,zero
8111a4cc:	00801944 	movi	r2,101
8111a4d0:	88807826 	beq	r17,r2,8111a6b4 <_strtod_r+0x464>
8111a4d4:	00801144 	movi	r2,69
8111a4d8:	88807626 	beq	r17,r2,8111a6b4 <_strtod_r+0x464>
8111a4dc:	002b883a 	mov	r21,zero
8111a4e0:	48003d1e 	bne	r9,zero,8111a5d8 <_strtod_r+0x388>
8111a4e4:	2800391e 	bne	r5,zero,8111a5cc <_strtod_r+0x37c>
8111a4e8:	9000381e 	bne	r18,zero,8111a5cc <_strtod_r+0x37c>
8111a4ec:	583fa71e 	bne	r11,zero,8111a38c <__reset+0xfb0fa38c>
8111a4f0:	00801384 	movi	r2,78
8111a4f4:	88800526 	beq	r17,r2,8111a50c <_strtod_r+0x2bc>
8111a4f8:	147fa20e 	bge	r2,r17,8111a384 <__reset+0xfb0fa384>
8111a4fc:	00801a44 	movi	r2,105
8111a500:	8883d726 	beq	r17,r2,8111b460 <_strtod_r+0x1210>
8111a504:	00801b84 	movi	r2,110
8111a508:	88bfa01e 	bne	r17,r2,8111a38c <__reset+0xfb0fa38c>
8111a50c:	01604534 	movhi	r5,33044
8111a510:	d9000617 	ldw	r4,24(sp)
8111a514:	296b5104 	addi	r5,r5,-21180
8111a518:	01c00644 	movi	r7,25
8111a51c:	00000b06 	br	8111a54c <_strtod_r+0x2fc>
8111a520:	21000044 	addi	r4,r4,1
8111a524:	20800003 	ldbu	r2,0(r4)
8111a528:	10ffefc4 	addi	r3,r2,-65
8111a52c:	10803fcc 	andi	r2,r2,255
8111a530:	1080201c 	xori	r2,r2,128
8111a534:	18c03fcc 	andi	r3,r3,255
8111a538:	10bfe004 	addi	r2,r2,-128
8111a53c:	38c00136 	bltu	r7,r3,8111a544 <_strtod_r+0x2f4>
8111a540:	10800804 	addi	r2,r2,32
8111a544:	29400044 	addi	r5,r5,1
8111a548:	11bf901e 	bne	r2,r6,8111a38c <__reset+0xfb0fa38c>
8111a54c:	29800007 	ldb	r6,0(r5)
8111a550:	303ff31e 	bne	r6,zero,8111a520 <__reset+0xfb0fa520>
8111a554:	20800044 	addi	r2,r4,1
8111a558:	d8800615 	stw	r2,24(sp)
8111a55c:	20c00047 	ldb	r3,1(r4)
8111a560:	00800a04 	movi	r2,40
8111a564:	18849d26 	beq	r3,r2,8111b7dc <_strtod_r+0x158c>
8111a568:	047ffe34 	movhi	r17,65528
8111a56c:	0025883a 	mov	r18,zero
8111a570:	902b883a 	mov	r21,r18
8111a574:	882d883a 	mov	r22,r17
8111a578:	a03f8926 	beq	r20,zero,8111a3a0 <__reset+0xfb0fa3a0>
8111a57c:	ddc00617 	ldw	r23,24(sp)
8111a580:	003f8606 	br	8111a39c <__reset+0xfb0fa39c>
8111a584:	00800044 	movi	r2,1
8111a588:	d8800715 	stw	r2,28(sp)
8111a58c:	003f9606 	br	8111a3e8 <__reset+0xfb0fa3e8>
8111a590:	21000044 	addi	r4,r4,1
8111a594:	d9000615 	stw	r4,24(sp)
8111a598:	20800003 	ldbu	r2,0(r4)
8111a59c:	10c03fcc 	andi	r3,r2,255
8111a5a0:	28ff462e 	bgeu	r5,r3,8111a2bc <__reset+0xfb0fa2bc>
8111a5a4:	2027883a 	mov	r19,r4
8111a5a8:	d8000715 	stw	zero,28(sp)
8111a5ac:	003f9506 	br	8111a404 <__reset+0xfb0fa404>
8111a5b0:	9cc002a4 	muli	r19,r19,10
8111a5b4:	10803fcc 	andi	r2,r2,255
8111a5b8:	1080201c 	xori	r2,r2,128
8111a5bc:	10bfe004 	addi	r2,r2,-128
8111a5c0:	9885883a 	add	r2,r19,r2
8111a5c4:	14fff404 	addi	r19,r2,-48
8111a5c8:	003fa506 	br	8111a460 <__reset+0xfb0fa460>
8111a5cc:	002b883a 	mov	r21,zero
8111a5d0:	002d883a 	mov	r22,zero
8111a5d4:	003fe806 	br	8111a578 <__reset+0xfb0fa578>
8111a5d8:	aaabc83a 	sub	r21,r21,r10
8111a5dc:	b000011e 	bne	r22,zero,8111a5e4 <_strtod_r+0x394>
8111a5e0:	482d883a 	mov	r22,r9
8111a5e4:	00800404 	movi	r2,16
8111a5e8:	482f883a 	mov	r23,r9
8111a5ec:	1240010e 	bge	r2,r9,8111a5f4 <_strtod_r+0x3a4>
8111a5f0:	102f883a 	mov	r23,r2
8111a5f4:	e009883a 	mov	r4,fp
8111a5f8:	da401315 	stw	r9,76(sp)
8111a5fc:	1122fc00 	call	81122fc0 <__floatunsidf>
8111a600:	1025883a 	mov	r18,r2
8111a604:	00800244 	movi	r2,9
8111a608:	1823883a 	mov	r17,r3
8111a60c:	da401317 	ldw	r9,76(sp)
8111a610:	15c0160e 	bge	r2,r23,8111a66c <_strtod_r+0x41c>
8111a614:	b8bffdc4 	addi	r2,r23,-9
8111a618:	100490fa 	slli	r2,r2,3
8111a61c:	180b883a 	mov	r5,r3
8111a620:	00e04534 	movhi	r3,33044
8111a624:	18eb1c04 	addi	r3,r3,-21392
8111a628:	1885883a 	add	r2,r3,r2
8111a62c:	11800017 	ldw	r6,0(r2)
8111a630:	11c00117 	ldw	r7,4(r2)
8111a634:	9009883a 	mov	r4,r18
8111a638:	110cd400 	call	8110cd40 <__muldf3>
8111a63c:	9809883a 	mov	r4,r19
8111a640:	1025883a 	mov	r18,r2
8111a644:	1823883a 	mov	r17,r3
8111a648:	1122fc00 	call	81122fc0 <__floatunsidf>
8111a64c:	9009883a 	mov	r4,r18
8111a650:	880b883a 	mov	r5,r17
8111a654:	100d883a 	mov	r6,r2
8111a658:	180f883a 	mov	r7,r3
8111a65c:	112115c0 	call	8112115c <__adddf3>
8111a660:	da401317 	ldw	r9,76(sp)
8111a664:	1025883a 	mov	r18,r2
8111a668:	1823883a 	mov	r17,r3
8111a66c:	008003c4 	movi	r2,15
8111a670:	12407b16 	blt	r2,r9,8111a860 <_strtod_r+0x610>
8111a674:	a83fbe26 	beq	r21,zero,8111a570 <__reset+0xfb0fa570>
8111a678:	0543670e 	bge	zero,r21,8111b418 <_strtod_r+0x11c8>
8111a67c:	00c00584 	movi	r3,22
8111a680:	1d42e816 	blt	r3,r21,8111b224 <_strtod_r+0xfd4>
8111a684:	a82a90fa 	slli	r21,r21,3
8111a688:	00a04534 	movhi	r2,33044
8111a68c:	10ab1c04 	addi	r2,r2,-21392
8111a690:	1545883a 	add	r2,r2,r21
8111a694:	11000017 	ldw	r4,0(r2)
8111a698:	11400117 	ldw	r5,4(r2)
8111a69c:	900d883a 	mov	r6,r18
8111a6a0:	880f883a 	mov	r7,r17
8111a6a4:	110cd400 	call	8110cd40 <__muldf3>
8111a6a8:	102b883a 	mov	r21,r2
8111a6ac:	182d883a 	mov	r22,r3
8111a6b0:	003fb106 	br	8111a578 <__reset+0xfb0fa578>
8111a6b4:	4801b526 	beq	r9,zero,8111ad8c <_strtod_r+0xb3c>
8111a6b8:	ddc00617 	ldw	r23,24(sp)
8111a6bc:	00c00ac4 	movi	r3,43
8111a6c0:	b8800044 	addi	r2,r23,1
8111a6c4:	d8800615 	stw	r2,24(sp)
8111a6c8:	b8800047 	ldb	r2,1(r23)
8111a6cc:	10c1e926 	beq	r2,r3,8111ae74 <_strtod_r+0xc24>
8111a6d0:	00c00b44 	movi	r3,45
8111a6d4:	10c1ec26 	beq	r2,r3,8111ae88 <_strtod_r+0xc38>
8111a6d8:	1023883a 	mov	r17,r2
8111a6dc:	0019883a 	mov	r12,zero
8111a6e0:	88bff404 	addi	r2,r17,-48
8111a6e4:	00c00244 	movi	r3,9
8111a6e8:	1881b736 	bltu	r3,r2,8111adc8 <_strtod_r+0xb78>
8111a6ec:	00800c04 	movi	r2,48
8111a6f0:	8880071e 	bne	r17,r2,8111a710 <_strtod_r+0x4c0>
8111a6f4:	d8800617 	ldw	r2,24(sp)
8111a6f8:	8807883a 	mov	r3,r17
8111a6fc:	10800044 	addi	r2,r2,1
8111a700:	d8800615 	stw	r2,24(sp)
8111a704:	14400007 	ldb	r17,0(r2)
8111a708:	10800044 	addi	r2,r2,1
8111a70c:	88fffc26 	beq	r17,r3,8111a700 <__reset+0xfb0fa700>
8111a710:	88bff3c4 	addi	r2,r17,-49
8111a714:	00c00204 	movi	r3,8
8111a718:	18bf7036 	bltu	r3,r2,8111a4dc <__reset+0xfb0fa4dc>
8111a71c:	db800617 	ldw	r14,24(sp)
8111a720:	88bff404 	addi	r2,r17,-48
8111a724:	03400244 	movi	r13,9
8111a728:	71c00044 	addi	r7,r14,1
8111a72c:	d9c00615 	stw	r7,24(sp)
8111a730:	74400043 	ldbu	r17,1(r14)
8111a734:	88fff404 	addi	r3,r17,-48
8111a738:	8c403fcc 	andi	r17,r17,255
8111a73c:	8c40201c 	xori	r17,r17,128
8111a740:	18c03fcc 	andi	r3,r3,255
8111a744:	8c7fe004 	addi	r17,r17,-128
8111a748:	68c00e36 	bltu	r13,r3,8111a784 <_strtod_r+0x534>
8111a74c:	71000084 	addi	r4,r14,2
8111a750:	d9000615 	stw	r4,24(sp)
8111a754:	108002a4 	muli	r2,r2,10
8111a758:	21800003 	ldbu	r6,0(r4)
8111a75c:	200f883a 	mov	r7,r4
8111a760:	1463883a 	add	r17,r2,r17
8111a764:	30fff404 	addi	r3,r6,-48
8111a768:	88bff404 	addi	r2,r17,-48
8111a76c:	34403fcc 	andi	r17,r6,255
8111a770:	8c40201c 	xori	r17,r17,128
8111a774:	18c03fcc 	andi	r3,r3,255
8111a778:	8c7fe004 	addi	r17,r17,-128
8111a77c:	21000044 	addi	r4,r4,1
8111a780:	68fff32e 	bgeu	r13,r3,8111a750 <__reset+0xfb0fa750>
8111a784:	3b8fc83a 	sub	r7,r7,r14
8111a788:	00c00204 	movi	r3,8
8111a78c:	19c29716 	blt	r3,r7,8111b1ec <_strtod_r+0xf9c>
8111a790:	102b883a 	mov	r21,r2
8111a794:	009387c4 	movi	r2,19999
8111a798:	1540010e 	bge	r2,r21,8111a7a0 <_strtod_r+0x550>
8111a79c:	102b883a 	mov	r21,r2
8111a7a0:	603f4f26 	beq	r12,zero,8111a4e0 <__reset+0xfb0fa4e0>
8111a7a4:	056bc83a 	sub	r21,zero,r21
8111a7a8:	003f4d06 	br	8111a4e0 <__reset+0xfb0fa4e0>
8111a7ac:	98800047 	ldb	r2,1(r19)
8111a7b0:	00c01604 	movi	r3,88
8111a7b4:	10c1de26 	beq	r2,r3,8111af30 <_strtod_r+0xce0>
8111a7b8:	00c01e04 	movi	r3,120
8111a7bc:	10c1dc26 	beq	r2,r3,8111af30 <_strtod_r+0xce0>
8111a7c0:	98c00044 	addi	r3,r19,1
8111a7c4:	1827883a 	mov	r19,r3
8111a7c8:	d8c00615 	stw	r3,24(sp)
8111a7cc:	18c00044 	addi	r3,r3,1
8111a7d0:	18bfffc3 	ldbu	r2,-1(r3)
8111a7d4:	11003fcc 	andi	r4,r2,255
8111a7d8:	2100201c 	xori	r4,r4,128
8111a7dc:	213fe004 	addi	r4,r4,-128
8111a7e0:	217ff826 	beq	r4,r5,8111a7c4 <__reset+0xfb0fa7c4>
8111a7e4:	203f7926 	beq	r4,zero,8111a5cc <__reset+0xfb0fa5cc>
8111a7e8:	dcc00815 	stw	r19,32(sp)
8111a7ec:	04800044 	movi	r18,1
8111a7f0:	003f0b06 	br	8111a420 <__reset+0xfb0fa420>
8111a7f4:	8009883a 	mov	r4,r16
8111a7f8:	11182f80 	call	811182f8 <_localeconv_r>
8111a7fc:	11000017 	ldw	r4,0(r2)
8111a800:	110f27c0 	call	8110f27c <strlen>
8111a804:	d8c00617 	ldw	r3,24(sp)
8111a808:	1885883a 	add	r2,r3,r2
8111a80c:	d8800615 	stw	r2,24(sp)
8111a810:	14400007 	ldb	r17,0(r2)
8111a814:	b001881e 	bne	r22,zero,8111ae38 <_strtod_r+0xbe8>
8111a818:	00c00c04 	movi	r3,48
8111a81c:	88c3391e 	bne	r17,r3,8111b504 <_strtod_r+0x12b4>
8111a820:	10c00044 	addi	r3,r2,1
8111a824:	8809883a 	mov	r4,r17
8111a828:	d8c00615 	stw	r3,24(sp)
8111a82c:	1c400007 	ldb	r17,0(r3)
8111a830:	188bc83a 	sub	r5,r3,r2
8111a834:	18c00044 	addi	r3,r3,1
8111a838:	893ffb26 	beq	r17,r4,8111a828 <__reset+0xfb0fa828>
8111a83c:	88bff3c4 	addi	r2,r17,-49
8111a840:	00c00204 	movi	r3,8
8111a844:	1882e72e 	bgeu	r3,r2,8111b3e4 <_strtod_r+0x1194>
8111a848:	00801944 	movi	r2,101
8111a84c:	88814d26 	beq	r17,r2,8111ad84 <_strtod_r+0xb34>
8111a850:	0013883a 	mov	r9,zero
8111a854:	0015883a 	mov	r10,zero
8111a858:	02c00044 	movi	r11,1
8111a85c:	003f1d06 	br	8111a4d4 <__reset+0xfb0fa4d4>
8111a860:	4defc83a 	sub	r23,r9,r23
8111a864:	bd6f883a 	add	r23,r23,r21
8111a868:	05c21e0e 	bge	zero,r23,8111b0e4 <_strtod_r+0xe94>
8111a86c:	b88003cc 	andi	r2,r23,15
8111a870:	10000d26 	beq	r2,zero,8111a8a8 <_strtod_r+0x658>
8111a874:	100490fa 	slli	r2,r2,3
8111a878:	00e04534 	movhi	r3,33044
8111a87c:	18eb1c04 	addi	r3,r3,-21392
8111a880:	1885883a 	add	r2,r3,r2
8111a884:	11000017 	ldw	r4,0(r2)
8111a888:	11400117 	ldw	r5,4(r2)
8111a88c:	900d883a 	mov	r6,r18
8111a890:	880f883a 	mov	r7,r17
8111a894:	da401315 	stw	r9,76(sp)
8111a898:	110cd400 	call	8110cd40 <__muldf3>
8111a89c:	da401317 	ldw	r9,76(sp)
8111a8a0:	1025883a 	mov	r18,r2
8111a8a4:	1823883a 	mov	r17,r3
8111a8a8:	023ffc04 	movi	r8,-16
8111a8ac:	ba10703a 	and	r8,r23,r8
8111a8b0:	40003c26 	beq	r8,zero,8111a9a4 <_strtod_r+0x754>
8111a8b4:	00804d04 	movi	r2,308
8111a8b8:	1201cd16 	blt	r2,r8,8111aff0 <_strtod_r+0xda0>
8111a8bc:	4011d13a 	srai	r8,r8,4
8111a8c0:	03000044 	movi	r12,1
8111a8c4:	62037c0e 	bge	r12,r8,8111b6b8 <_strtod_r+0x1468>
8111a8c8:	01204534 	movhi	r4,33044
8111a8cc:	212b1204 	addi	r4,r4,-21432
8111a8d0:	2015883a 	mov	r10,r4
8111a8d4:	0027883a 	mov	r19,zero
8111a8d8:	d9000915 	stw	r4,36(sp)
8111a8dc:	9005883a 	mov	r2,r18
8111a8e0:	8807883a 	mov	r3,r17
8111a8e4:	dc000c15 	stw	r16,48(sp)
8111a8e8:	dc800e15 	stw	r18,56(sp)
8111a8ec:	9821883a 	mov	r16,r19
8111a8f0:	0009883a 	mov	r4,zero
8111a8f4:	8827883a 	mov	r19,r17
8111a8f8:	602f883a 	mov	r23,r12
8111a8fc:	da400a15 	stw	r9,40(sp)
8111a900:	5025883a 	mov	r18,r10
8111a904:	4023883a 	mov	r17,r8
8111a908:	8980004c 	andi	r6,r17,1
8111a90c:	30000626 	beq	r6,zero,8111a928 <_strtod_r+0x6d8>
8111a910:	91800017 	ldw	r6,0(r18)
8111a914:	91c00117 	ldw	r7,4(r18)
8111a918:	1009883a 	mov	r4,r2
8111a91c:	180b883a 	mov	r5,r3
8111a920:	110cd400 	call	8110cd40 <__muldf3>
8111a924:	01000044 	movi	r4,1
8111a928:	8823d07a 	srai	r17,r17,1
8111a92c:	84000044 	addi	r16,r16,1
8111a930:	94800204 	addi	r18,r18,8
8111a934:	8dfff41e 	bne	r17,r23,8111a908 <__reset+0xfb0fa908>
8111a938:	21003fcc 	andi	r4,r4,255
8111a93c:	9823883a 	mov	r17,r19
8111a940:	da400a17 	ldw	r9,40(sp)
8111a944:	8027883a 	mov	r19,r16
8111a948:	dc800e17 	ldw	r18,56(sp)
8111a94c:	dc000c17 	ldw	r16,48(sp)
8111a950:	2003b11e 	bne	r4,zero,8111b818 <_strtod_r+0x15c8>
8111a954:	981690fa 	slli	r11,r19,3
8111a958:	d8800917 	ldw	r2,36(sp)
8111a95c:	01ff2c34 	movhi	r7,64688
8111a960:	900d883a 	mov	r6,r18
8111a964:	12ef883a 	add	r23,r2,r11
8111a968:	b9000017 	ldw	r4,0(r23)
8111a96c:	b9400117 	ldw	r5,4(r23)
8111a970:	89cf883a 	add	r7,r17,r7
8111a974:	da401315 	stw	r9,76(sp)
8111a978:	110cd400 	call	8110cd40 <__muldf3>
8111a97c:	1025883a 	mov	r18,r2
8111a980:	011f2834 	movhi	r4,31904
8111a984:	189ffc2c 	andhi	r2,r3,32752
8111a988:	da401317 	ldw	r9,76(sp)
8111a98c:	20819836 	bltu	r4,r2,8111aff0 <_strtod_r+0xda0>
8111a990:	011f2434 	movhi	r4,31888
8111a994:	2083382e 	bgeu	r4,r2,8111b678 <_strtod_r+0x1428>
8111a998:	045ffc34 	movhi	r17,32752
8111a99c:	8c7fffc4 	addi	r17,r17,-1
8111a9a0:	04bfffc4 	movi	r18,-1
8111a9a4:	d8000915 	stw	zero,36(sp)
8111a9a8:	d9400817 	ldw	r5,32(sp)
8111a9ac:	df000015 	stw	fp,0(sp)
8111a9b0:	480f883a 	mov	r7,r9
8111a9b4:	b00d883a 	mov	r6,r22
8111a9b8:	8009883a 	mov	r4,r16
8111a9bc:	1118a140 	call	81118a14 <__s2b>
8111a9c0:	d8800815 	stw	r2,32(sp)
8111a9c4:	10018a26 	beq	r2,zero,8111aff0 <_strtod_r+0xda0>
8111a9c8:	a807d7fa 	srai	r3,r21,31
8111a9cc:	0545c83a 	sub	r2,zero,r21
8111a9d0:	dd400a15 	stw	r21,40(sp)
8111a9d4:	1886703a 	and	r3,r3,r2
8111a9d8:	d8c00c15 	stw	r3,48(sp)
8111a9dc:	a8013516 	blt	r21,zero,8111aeb4 <_strtod_r+0xc64>
8111a9e0:	d9400817 	ldw	r5,32(sp)
8111a9e4:	0011883a 	mov	r8,zero
8111a9e8:	0027883a 	mov	r19,zero
8111a9ec:	29400304 	addi	r5,r5,12
8111a9f0:	d9400f15 	stw	r5,60(sp)
8111a9f4:	402b883a 	mov	r21,r8
8111a9f8:	dd001215 	stw	r20,72(sp)
8111a9fc:	d8800817 	ldw	r2,32(sp)
8111aa00:	8009883a 	mov	r4,r16
8111aa04:	11400117 	ldw	r5,4(r2)
8111aa08:	11188140 	call	81118814 <_Balloc>
8111aa0c:	1029883a 	mov	r20,r2
8111aa10:	10012d26 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111aa14:	d8c00817 	ldw	r3,32(sp)
8111aa18:	d9400f17 	ldw	r5,60(sp)
8111aa1c:	11000304 	addi	r4,r2,12
8111aa20:	19800417 	ldw	r6,16(r3)
8111aa24:	31800084 	addi	r6,r6,2
8111aa28:	318d883a 	add	r6,r6,r6
8111aa2c:	318d883a 	add	r6,r6,r6
8111aa30:	110e8e00 	call	8110e8e0 <memcpy>
8111aa34:	d9000204 	addi	r4,sp,8
8111aa38:	d9000015 	stw	r4,0(sp)
8111aa3c:	d9c00404 	addi	r7,sp,16
8111aa40:	900b883a 	mov	r5,r18
8111aa44:	880d883a 	mov	r6,r17
8111aa48:	8009883a 	mov	r4,r16
8111aa4c:	11194f00 	call	811194f0 <__d2b>
8111aa50:	d8800515 	stw	r2,20(sp)
8111aa54:	dc801115 	stw	r18,68(sp)
8111aa58:	dc401015 	stw	r17,64(sp)
8111aa5c:	10027c26 	beq	r2,zero,8111b450 <_strtod_r+0x1200>
8111aa60:	01400044 	movi	r5,1
8111aa64:	8009883a 	mov	r4,r16
8111aa68:	1118c380 	call	81118c38 <__i2b>
8111aa6c:	1027883a 	mov	r19,r2
8111aa70:	10011526 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111aa74:	d8800417 	ldw	r2,16(sp)
8111aa78:	1000c816 	blt	r2,zero,8111ad9c <_strtod_r+0xb4c>
8111aa7c:	d9400c17 	ldw	r5,48(sp)
8111aa80:	d9000a17 	ldw	r4,40(sp)
8111aa84:	28ad883a 	add	r22,r5,r2
8111aa88:	d9400917 	ldw	r5,36(sp)
8111aa8c:	df000217 	ldw	fp,8(sp)
8111aa90:	05ff0084 	movi	r23,-1022
8111aa94:	1147c83a 	sub	r3,r2,r5
8111aa98:	1f07883a 	add	r3,r3,fp
8111aa9c:	00800d84 	movi	r2,54
8111aaa0:	18ffffc4 	addi	r3,r3,-1
8111aaa4:	1739c83a 	sub	fp,r2,fp
8111aaa8:	1dc0a50e 	bge	r3,r23,8111ad40 <_strtod_r+0xaf0>
8111aaac:	b8efc83a 	sub	r23,r23,r3
8111aab0:	008007c4 	movi	r2,31
8111aab4:	e5f9c83a 	sub	fp,fp,r23
8111aab8:	15c0bc16 	blt	r2,r23,8111adac <_strtod_r+0xb5c>
8111aabc:	00800044 	movi	r2,1
8111aac0:	15c4983a 	sll	r2,r2,r23
8111aac4:	d8000b15 	stw	zero,44(sp)
8111aac8:	d8800d15 	stw	r2,52(sp)
8111aacc:	2707883a 	add	r3,r4,fp
8111aad0:	d9000917 	ldw	r4,36(sp)
8111aad4:	b739883a 	add	fp,r22,fp
8111aad8:	20ef883a 	add	r23,r4,r3
8111aadc:	b009883a 	mov	r4,r22
8111aae0:	e580010e 	bge	fp,r22,8111aae8 <_strtod_r+0x898>
8111aae4:	e009883a 	mov	r4,fp
8111aae8:	b805883a 	mov	r2,r23
8111aaec:	25c0010e 	bge	r4,r23,8111aaf4 <_strtod_r+0x8a4>
8111aaf0:	2005883a 	mov	r2,r4
8111aaf4:	0080030e 	bge	zero,r2,8111ab04 <_strtod_r+0x8b4>
8111aaf8:	e0b9c83a 	sub	fp,fp,r2
8111aafc:	b8afc83a 	sub	r23,r23,r2
8111ab00:	b0adc83a 	sub	r22,r22,r2
8111ab04:	d9400c17 	ldw	r5,48(sp)
8111ab08:	28001126 	beq	r5,zero,8111ab50 <_strtod_r+0x900>
8111ab0c:	280d883a 	mov	r6,r5
8111ab10:	8009883a 	mov	r4,r16
8111ab14:	980b883a 	mov	r5,r19
8111ab18:	1118e7c0 	call	81118e7c <__pow5mult>
8111ab1c:	1027883a 	mov	r19,r2
8111ab20:	1000e926 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111ab24:	d9800517 	ldw	r6,20(sp)
8111ab28:	100b883a 	mov	r5,r2
8111ab2c:	8009883a 	mov	r4,r16
8111ab30:	1118c7c0 	call	81118c7c <__multiply>
8111ab34:	1000e426 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111ab38:	d9400517 	ldw	r5,20(sp)
8111ab3c:	8009883a 	mov	r4,r16
8111ab40:	d8801315 	stw	r2,76(sp)
8111ab44:	11188c40 	call	811188c4 <_Bfree>
8111ab48:	d8801317 	ldw	r2,76(sp)
8111ab4c:	d8800515 	stw	r2,20(sp)
8111ab50:	0700060e 	bge	zero,fp,8111ab6c <_strtod_r+0x91c>
8111ab54:	d9400517 	ldw	r5,20(sp)
8111ab58:	e00d883a 	mov	r6,fp
8111ab5c:	8009883a 	mov	r4,r16
8111ab60:	1118fc40 	call	81118fc4 <__lshift>
8111ab64:	d8800515 	stw	r2,20(sp)
8111ab68:	10023926 	beq	r2,zero,8111b450 <_strtod_r+0x1200>
8111ab6c:	d8800a17 	ldw	r2,40(sp)
8111ab70:	10000626 	beq	r2,zero,8111ab8c <_strtod_r+0x93c>
8111ab74:	d9800a17 	ldw	r6,40(sp)
8111ab78:	a00b883a 	mov	r5,r20
8111ab7c:	8009883a 	mov	r4,r16
8111ab80:	1118e7c0 	call	81118e7c <__pow5mult>
8111ab84:	1029883a 	mov	r20,r2
8111ab88:	1000cf26 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111ab8c:	05c0060e 	bge	zero,r23,8111aba8 <_strtod_r+0x958>
8111ab90:	a00b883a 	mov	r5,r20
8111ab94:	b80d883a 	mov	r6,r23
8111ab98:	8009883a 	mov	r4,r16
8111ab9c:	1118fc40 	call	81118fc4 <__lshift>
8111aba0:	1029883a 	mov	r20,r2
8111aba4:	1000c826 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111aba8:	0580060e 	bge	zero,r22,8111abc4 <_strtod_r+0x974>
8111abac:	980b883a 	mov	r5,r19
8111abb0:	b00d883a 	mov	r6,r22
8111abb4:	8009883a 	mov	r4,r16
8111abb8:	1118fc40 	call	81118fc4 <__lshift>
8111abbc:	1027883a 	mov	r19,r2
8111abc0:	1000c126 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111abc4:	d9400517 	ldw	r5,20(sp)
8111abc8:	a00d883a 	mov	r6,r20
8111abcc:	8009883a 	mov	r4,r16
8111abd0:	11191740 	call	81119174 <__mdiff>
8111abd4:	102b883a 	mov	r21,r2
8111abd8:	1000bb26 	beq	r2,zero,8111aec8 <_strtod_r+0xc78>
8111abdc:	10c00317 	ldw	r3,12(r2)
8111abe0:	980b883a 	mov	r5,r19
8111abe4:	10000315 	stw	zero,12(r2)
8111abe8:	1009883a 	mov	r4,r2
8111abec:	d8c00e15 	stw	r3,56(sp)
8111abf0:	11191140 	call	81119114 <__mcmp>
8111abf4:	10027616 	blt	r2,zero,8111b5d0 <_strtod_r+0x1380>
8111abf8:	10024426 	beq	r2,zero,8111b50c <_strtod_r+0x12bc>
8111abfc:	980b883a 	mov	r5,r19
8111ac00:	a809883a 	mov	r4,r21
8111ac04:	11196440 	call	81119644 <__ratio>
8111ac08:	000d883a 	mov	r6,zero
8111ac0c:	01d00034 	movhi	r7,16384
8111ac10:	1009883a 	mov	r4,r2
8111ac14:	180b883a 	mov	r5,r3
8111ac18:	102f883a 	mov	r23,r2
8111ac1c:	182d883a 	mov	r22,r3
8111ac20:	11224640 	call	81122464 <__ledf2>
8111ac24:	00804a16 	blt	zero,r2,8111ad50 <_strtod_r+0xb00>
8111ac28:	d9400e17 	ldw	r5,56(sp)
8111ac2c:	28006b26 	beq	r5,zero,8111addc <_strtod_r+0xb8c>
8111ac30:	058ffc34 	movhi	r22,16368
8111ac34:	d8000b15 	stw	zero,44(sp)
8111ac38:	d8000d15 	stw	zero,52(sp)
8111ac3c:	b02f883a 	mov	r23,r22
8111ac40:	8f1ffc2c 	andhi	fp,r17,32752
8111ac44:	009ff834 	movhi	r2,32736
8111ac48:	e080cd26 	beq	fp,r2,8111af80 <_strtod_r+0xd30>
8111ac4c:	d9400917 	ldw	r5,36(sp)
8111ac50:	28001a26 	beq	r5,zero,8111acbc <_strtod_r+0xa6c>
8111ac54:	0081a834 	movhi	r2,1696
8111ac58:	17001836 	bltu	r2,fp,8111acbc <_strtod_r+0xa6c>
8111ac5c:	d9000d17 	ldw	r4,52(sp)
8111ac60:	01d07834 	movhi	r7,16864
8111ac64:	39ffffc4 	addi	r7,r7,-1
8111ac68:	01bff034 	movhi	r6,65472
8111ac6c:	b80b883a 	mov	r5,r23
8111ac70:	11224640 	call	81122464 <__ledf2>
8111ac74:	00800e16 	blt	zero,r2,8111acb0 <_strtod_r+0xa60>
8111ac78:	d9000d17 	ldw	r4,52(sp)
8111ac7c:	b80b883a 	mov	r5,r23
8111ac80:	11202700 	call	81120270 <__fixunsdfsi>
8111ac84:	10018126 	beq	r2,zero,8111b28c <_strtod_r+0x103c>
8111ac88:	1009883a 	mov	r4,r2
8111ac8c:	1122fc00 	call	81122fc0 <__floatunsidf>
8111ac90:	d8800d15 	stw	r2,52(sp)
8111ac94:	182f883a 	mov	r23,r3
8111ac98:	d8800e17 	ldw	r2,56(sp)
8111ac9c:	1001791e 	bne	r2,zero,8111b284 <_strtod_r+0x1034>
8111aca0:	ba20003c 	xorhi	r8,r23,32768
8111aca4:	d8c00d17 	ldw	r3,52(sp)
8111aca8:	402d883a 	mov	r22,r8
8111acac:	d8c00b15 	stw	r3,44(sp)
8111acb0:	0081ac34 	movhi	r2,1712
8111acb4:	b091883a 	add	r8,r22,r2
8111acb8:	472dc83a 	sub	r22,r8,fp
8111acbc:	9009883a 	mov	r4,r18
8111acc0:	880b883a 	mov	r5,r17
8111acc4:	11193780 	call	81119378 <__ulp>
8111acc8:	d9000b17 	ldw	r4,44(sp)
8111accc:	b00b883a 	mov	r5,r22
8111acd0:	100d883a 	mov	r6,r2
8111acd4:	180f883a 	mov	r7,r3
8111acd8:	110cd400 	call	8110cd40 <__muldf3>
8111acdc:	900d883a 	mov	r6,r18
8111ace0:	880f883a 	mov	r7,r17
8111ace4:	1009883a 	mov	r4,r2
8111ace8:	180b883a 	mov	r5,r3
8111acec:	112115c0 	call	8112115c <__adddf3>
8111acf0:	1025883a 	mov	r18,r2
8111acf4:	1823883a 	mov	r17,r3
8111acf8:	182d883a 	mov	r22,r3
8111acfc:	d9000917 	ldw	r4,36(sp)
8111ad00:	2000021e 	bne	r4,zero,8111ad0c <_strtod_r+0xabc>
8111ad04:	b09ffc2c 	andhi	r2,r22,32752
8111ad08:	e080be26 	beq	fp,r2,8111b004 <_strtod_r+0xdb4>
8111ad0c:	d9400517 	ldw	r5,20(sp)
8111ad10:	8009883a 	mov	r4,r16
8111ad14:	11188c40 	call	811188c4 <_Bfree>
8111ad18:	a00b883a 	mov	r5,r20
8111ad1c:	8009883a 	mov	r4,r16
8111ad20:	11188c40 	call	811188c4 <_Bfree>
8111ad24:	980b883a 	mov	r5,r19
8111ad28:	8009883a 	mov	r4,r16
8111ad2c:	11188c40 	call	811188c4 <_Bfree>
8111ad30:	a80b883a 	mov	r5,r21
8111ad34:	8009883a 	mov	r4,r16
8111ad38:	11188c40 	call	811188c4 <_Bfree>
8111ad3c:	003f2f06 	br	8111a9fc <__reset+0xfb0fa9fc>
8111ad40:	00c00044 	movi	r3,1
8111ad44:	d8000b15 	stw	zero,44(sp)
8111ad48:	d8c00d15 	stw	r3,52(sp)
8111ad4c:	003f5f06 	br	8111aacc <__reset+0xfb0faacc>
8111ad50:	b809883a 	mov	r4,r23
8111ad54:	000d883a 	mov	r6,zero
8111ad58:	01cff834 	movhi	r7,16352
8111ad5c:	b00b883a 	mov	r5,r22
8111ad60:	110cd400 	call	8110cd40 <__muldf3>
8111ad64:	d9000e17 	ldw	r4,56(sp)
8111ad68:	d8800d15 	stw	r2,52(sp)
8111ad6c:	182f883a 	mov	r23,r3
8111ad70:	2000181e 	bne	r4,zero,8111add4 <_strtod_r+0xb84>
8111ad74:	1a20003c 	xorhi	r8,r3,32768
8111ad78:	d8800b15 	stw	r2,44(sp)
8111ad7c:	402d883a 	mov	r22,r8
8111ad80:	003faf06 	br	8111ac40 <__reset+0xfb0fac40>
8111ad84:	0015883a 	mov	r10,zero
8111ad88:	02c00044 	movi	r11,1
8111ad8c:	2800011e 	bne	r5,zero,8111ad94 <_strtod_r+0xb44>
8111ad90:	903d7e26 	beq	r18,zero,8111a38c <__reset+0xfb0fa38c>
8111ad94:	0013883a 	mov	r9,zero
8111ad98:	003e4706 	br	8111a6b8 <__reset+0xfb0fa6b8>
8111ad9c:	d8c00a17 	ldw	r3,40(sp)
8111ada0:	dd800c17 	ldw	r22,48(sp)
8111ada4:	1889c83a 	sub	r4,r3,r2
8111ada8:	003f3706 	br	8111aa88 <__reset+0xfb0faa88>
8111adac:	00bef884 	movi	r2,-1054
8111adb0:	05c00044 	movi	r23,1
8111adb4:	10c5c83a 	sub	r2,r2,r3
8111adb8:	b884983a 	sll	r2,r23,r2
8111adbc:	ddc00d15 	stw	r23,52(sp)
8111adc0:	d8800b15 	stw	r2,44(sp)
8111adc4:	003f4106 	br	8111aacc <__reset+0xfb0faacc>
8111adc8:	ddc00615 	stw	r23,24(sp)
8111adcc:	002b883a 	mov	r21,zero
8111add0:	003dc306 	br	8111a4e0 <__reset+0xfb0fa4e0>
8111add4:	1811883a 	mov	r8,r3
8111add8:	003fe706 	br	8111ad78 <__reset+0xfb0fad78>
8111addc:	90002e1e 	bne	r18,zero,8111ae98 <_strtod_r+0xc48>
8111ade0:	00c00434 	movhi	r3,16
8111ade4:	18ffffc4 	addi	r3,r3,-1
8111ade8:	88c4703a 	and	r2,r17,r3
8111adec:	10002c1e 	bne	r2,zero,8111aea0 <_strtod_r+0xc50>
8111adf0:	000d883a 	mov	r6,zero
8111adf4:	01cffc34 	movhi	r7,16368
8111adf8:	b809883a 	mov	r4,r23
8111adfc:	b00b883a 	mov	r5,r22
8111ae00:	11224640 	call	81122464 <__ledf2>
8111ae04:	10021716 	blt	r2,zero,8111b664 <_strtod_r+0x1414>
8111ae08:	b809883a 	mov	r4,r23
8111ae0c:	b00b883a 	mov	r5,r22
8111ae10:	000d883a 	mov	r6,zero
8111ae14:	01cff834 	movhi	r7,16352
8111ae18:	110cd400 	call	8110cd40 <__muldf3>
8111ae1c:	d8800d15 	stw	r2,52(sp)
8111ae20:	182f883a 	mov	r23,r3
8111ae24:	102d883a 	mov	r22,r2
8111ae28:	1a20003c 	xorhi	r8,r3,32768
8111ae2c:	dd800b15 	stw	r22,44(sp)
8111ae30:	402d883a 	mov	r22,r8
8111ae34:	003f8206 	br	8111ac40 <__reset+0xfb0fac40>
8111ae38:	b013883a 	mov	r9,r22
8111ae3c:	000b883a 	mov	r5,zero
8111ae40:	0015883a 	mov	r10,zero
8111ae44:	893ff404 	addi	r4,r17,-48
8111ae48:	00800244 	movi	r2,9
8111ae4c:	11001036 	bltu	r2,r4,8111ae90 <_strtod_r+0xc40>
8111ae50:	28c00044 	addi	r3,r5,1
8111ae54:	2023883a 	mov	r17,r4
8111ae58:	20014d1e 	bne	r4,zero,8111b390 <_strtod_r+0x1140>
8111ae5c:	d9800617 	ldw	r6,24(sp)
8111ae60:	180b883a 	mov	r5,r3
8111ae64:	30800044 	addi	r2,r6,1
8111ae68:	d8800615 	stw	r2,24(sp)
8111ae6c:	34400047 	ldb	r17,1(r6)
8111ae70:	003ff406 	br	8111ae44 <__reset+0xfb0fae44>
8111ae74:	0019883a 	mov	r12,zero
8111ae78:	b8800084 	addi	r2,r23,2
8111ae7c:	d8800615 	stw	r2,24(sp)
8111ae80:	bc400087 	ldb	r17,2(r23)
8111ae84:	003e1606 	br	8111a6e0 <__reset+0xfb0fa6e0>
8111ae88:	03000044 	movi	r12,1
8111ae8c:	003ffa06 	br	8111ae78 <__reset+0xfb0fae78>
8111ae90:	02c00044 	movi	r11,1
8111ae94:	003d8d06 	br	8111a4cc <__reset+0xfb0fa4cc>
8111ae98:	00800044 	movi	r2,1
8111ae9c:	9080fe26 	beq	r18,r2,8111b298 <_strtod_r+0x1048>
8111aea0:	d8000b15 	stw	zero,44(sp)
8111aea4:	05affc34 	movhi	r22,49136
8111aea8:	d8000d15 	stw	zero,52(sp)
8111aeac:	05cffc34 	movhi	r23,16368
8111aeb0:	003f6306 	br	8111ac40 <__reset+0xfb0fac40>
8111aeb4:	d8000a15 	stw	zero,40(sp)
8111aeb8:	003ec906 	br	8111a9e0 <__reset+0xfb0fa9e0>
8111aebc:	d9001117 	ldw	r4,68(sp)
8111aec0:	00bfffc4 	movi	r2,-1
8111aec4:	2080461e 	bne	r4,r2,8111afe0 <_strtod_r+0xd90>
8111aec8:	dd000a15 	stw	r20,40(sp)
8111aecc:	dd001217 	ldw	r20,72(sp)
8111aed0:	a811883a 	mov	r8,r21
8111aed4:	d8800517 	ldw	r2,20(sp)
8111aed8:	00c00884 	movi	r3,34
8111aedc:	80c00015 	stw	r3,0(r16)
8111aee0:	002b883a 	mov	r21,zero
8111aee4:	059ffc34 	movhi	r22,32752
8111aee8:	100b883a 	mov	r5,r2
8111aeec:	8009883a 	mov	r4,r16
8111aef0:	da001315 	stw	r8,76(sp)
8111aef4:	11188c40 	call	811188c4 <_Bfree>
8111aef8:	d9400a17 	ldw	r5,40(sp)
8111aefc:	8009883a 	mov	r4,r16
8111af00:	11188c40 	call	811188c4 <_Bfree>
8111af04:	980b883a 	mov	r5,r19
8111af08:	8009883a 	mov	r4,r16
8111af0c:	11188c40 	call	811188c4 <_Bfree>
8111af10:	d9400817 	ldw	r5,32(sp)
8111af14:	8009883a 	mov	r4,r16
8111af18:	11188c40 	call	811188c4 <_Bfree>
8111af1c:	da001317 	ldw	r8,76(sp)
8111af20:	8009883a 	mov	r4,r16
8111af24:	400b883a 	mov	r5,r8
8111af28:	11188c40 	call	811188c4 <_Bfree>
8111af2c:	003d9206 	br	8111a578 <__reset+0xfb0fa578>
8111af30:	d8c00717 	ldw	r3,28(sp)
8111af34:	d8800504 	addi	r2,sp,20
8111af38:	01a04534 	movhi	r6,33044
8111af3c:	31ab5704 	addi	r6,r6,-21156
8111af40:	d8c00115 	stw	r3,4(sp)
8111af44:	d8800015 	stw	r2,0(sp)
8111af48:	d9c00404 	addi	r7,sp,16
8111af4c:	d9400604 	addi	r5,sp,24
8111af50:	8009883a 	mov	r4,r16
8111af54:	111f5040 	call	8111f504 <__gethex>
8111af58:	154001cc 	andi	r21,r2,7
8111af5c:	a83d9b26 	beq	r21,zero,8111a5cc <__reset+0xfb0fa5cc>
8111af60:	00c00184 	movi	r3,6
8111af64:	a8c0d61e 	bne	r21,r3,8111b2c0 <_strtod_r+0x1070>
8111af68:	9cc00044 	addi	r19,r19,1
8111af6c:	dcc00615 	stw	r19,24(sp)
8111af70:	002b883a 	mov	r21,zero
8111af74:	002d883a 	mov	r22,zero
8111af78:	d8000715 	stw	zero,28(sp)
8111af7c:	003d7e06 	br	8111a578 <__reset+0xfb0fa578>
8111af80:	00bf2c34 	movhi	r2,64688
8111af84:	88a3883a 	add	r17,r17,r2
8111af88:	9009883a 	mov	r4,r18
8111af8c:	880b883a 	mov	r5,r17
8111af90:	11193780 	call	81119378 <__ulp>
8111af94:	d9000b17 	ldw	r4,44(sp)
8111af98:	100d883a 	mov	r6,r2
8111af9c:	180f883a 	mov	r7,r3
8111afa0:	b00b883a 	mov	r5,r22
8111afa4:	110cd400 	call	8110cd40 <__muldf3>
8111afa8:	900d883a 	mov	r6,r18
8111afac:	180b883a 	mov	r5,r3
8111afb0:	880f883a 	mov	r7,r17
8111afb4:	1009883a 	mov	r4,r2
8111afb8:	112115c0 	call	8112115c <__adddf3>
8111afbc:	015f2834 	movhi	r5,31904
8111afc0:	1025883a 	mov	r18,r2
8111afc4:	297fffc4 	addi	r5,r5,-1
8111afc8:	189ffc2c 	andhi	r2,r3,32752
8111afcc:	2880892e 	bgeu	r5,r2,8111b1f4 <_strtod_r+0xfa4>
8111afd0:	d8801017 	ldw	r2,64(sp)
8111afd4:	00dffc34 	movhi	r3,32752
8111afd8:	18ffffc4 	addi	r3,r3,-1
8111afdc:	10ffb726 	beq	r2,r3,8111aebc <__reset+0xfb0faebc>
8111afe0:	045ffc34 	movhi	r17,32752
8111afe4:	8c7fffc4 	addi	r17,r17,-1
8111afe8:	04bfffc4 	movi	r18,-1
8111afec:	003f4706 	br	8111ad0c <__reset+0xfb0fad0c>
8111aff0:	00800884 	movi	r2,34
8111aff4:	80800015 	stw	r2,0(r16)
8111aff8:	002b883a 	mov	r21,zero
8111affc:	059ffc34 	movhi	r22,32752
8111b000:	003d5d06 	br	8111a578 <__reset+0xfb0fa578>
8111b004:	d9000d17 	ldw	r4,52(sp)
8111b008:	b80b883a 	mov	r5,r23
8111b00c:	1122e5c0 	call	81122e5c <__fixdfsi>
8111b010:	1009883a 	mov	r4,r2
8111b014:	1122edc0 	call	81122edc <__floatsidf>
8111b018:	d9000d17 	ldw	r4,52(sp)
8111b01c:	b80b883a 	mov	r5,r23
8111b020:	100d883a 	mov	r6,r2
8111b024:	180f883a 	mov	r7,r3
8111b028:	11225580 	call	81122558 <__subdf3>
8111b02c:	d9400e17 	ldw	r5,56(sp)
8111b030:	1039883a 	mov	fp,r2
8111b034:	182f883a 	mov	r23,r3
8111b038:	2800141e 	bne	r5,zero,8111b08c <_strtod_r+0xe3c>
8111b03c:	9000131e 	bne	r18,zero,8111b08c <_strtod_r+0xe3c>
8111b040:	00800434 	movhi	r2,16
8111b044:	10bfffc4 	addi	r2,r2,-1
8111b048:	b0ac703a 	and	r22,r22,r2
8111b04c:	b0000f1e 	bne	r22,zero,8111b08c <_strtod_r+0xe3c>
8111b050:	01a52834 	movhi	r6,38048
8111b054:	01cff434 	movhi	r7,16336
8111b058:	318d6544 	addi	r6,r6,13717
8111b05c:	39ffffc4 	addi	r7,r7,-1
8111b060:	e009883a 	mov	r4,fp
8111b064:	180b883a 	mov	r5,r3
8111b068:	11224640 	call	81122464 <__ledf2>
8111b06c:	103f270e 	bge	r2,zero,8111ad0c <__reset+0xfb0fad0c>
8111b070:	dd000a15 	stw	r20,40(sp)
8111b074:	a811883a 	mov	r8,r21
8111b078:	dd001217 	ldw	r20,72(sp)
8111b07c:	d8800517 	ldw	r2,20(sp)
8111b080:	002b883a 	mov	r21,zero
8111b084:	882d883a 	mov	r22,r17
8111b088:	003f9706 	br	8111aee8 <__reset+0xfb0faee8>
8111b08c:	01a52834 	movhi	r6,38048
8111b090:	01cff834 	movhi	r7,16352
8111b094:	318d6544 	addi	r6,r6,13717
8111b098:	39ffffc4 	addi	r7,r7,-1
8111b09c:	e009883a 	mov	r4,fp
8111b0a0:	b80b883a 	mov	r5,r23
8111b0a4:	11224640 	call	81122464 <__ledf2>
8111b0a8:	10000716 	blt	r2,zero,8111b0c8 <_strtod_r+0xe78>
8111b0ac:	018d6c34 	movhi	r6,13744
8111b0b0:	31b94d44 	addi	r6,r6,-6859
8111b0b4:	01cff834 	movhi	r7,16352
8111b0b8:	e009883a 	mov	r4,fp
8111b0bc:	b80b883a 	mov	r5,r23
8111b0c0:	11223880 	call	81122388 <__gedf2>
8111b0c4:	00bf110e 	bge	zero,r2,8111ad0c <__reset+0xfb0fad0c>
8111b0c8:	dd000a15 	stw	r20,40(sp)
8111b0cc:	a811883a 	mov	r8,r21
8111b0d0:	dd001217 	ldw	r20,72(sp)
8111b0d4:	d8800517 	ldw	r2,20(sp)
8111b0d8:	902b883a 	mov	r21,r18
8111b0dc:	882d883a 	mov	r22,r17
8111b0e0:	003f8106 	br	8111aee8 <__reset+0xfb0faee8>
8111b0e4:	b83e2f26 	beq	r23,zero,8111a9a4 <__reset+0xfb0fa9a4>
8111b0e8:	05efc83a 	sub	r23,zero,r23
8111b0ec:	b88003cc 	andi	r2,r23,15
8111b0f0:	10000d26 	beq	r2,zero,8111b128 <_strtod_r+0xed8>
8111b0f4:	100490fa 	slli	r2,r2,3
8111b0f8:	00e04534 	movhi	r3,33044
8111b0fc:	18eb1c04 	addi	r3,r3,-21392
8111b100:	1885883a 	add	r2,r3,r2
8111b104:	11800017 	ldw	r6,0(r2)
8111b108:	11c00117 	ldw	r7,4(r2)
8111b10c:	9009883a 	mov	r4,r18
8111b110:	880b883a 	mov	r5,r17
8111b114:	da401315 	stw	r9,76(sp)
8111b118:	1121a100 	call	81121a10 <__divdf3>
8111b11c:	da401317 	ldw	r9,76(sp)
8111b120:	1025883a 	mov	r18,r2
8111b124:	1823883a 	mov	r17,r3
8111b128:	b82fd13a 	srai	r23,r23,4
8111b12c:	b83e1d26 	beq	r23,zero,8111a9a4 <__reset+0xfb0fa9a4>
8111b130:	008007c4 	movi	r2,31
8111b134:	15c02816 	blt	r2,r23,8111b1d8 <_strtod_r+0xf88>
8111b138:	b880040c 	andi	r2,r23,16
8111b13c:	10019726 	beq	r2,zero,8111b79c <_strtod_r+0x154c>
8111b140:	05c1880e 	bge	zero,r23,8111b764 <_strtod_r+0x1514>
8111b144:	00c01a84 	movi	r3,106
8111b148:	d8c00915 	stw	r3,36(sp)
8111b14c:	04e04534 	movhi	r19,33044
8111b150:	9ceb5c04 	addi	r19,r19,-21136
8111b154:	8807883a 	mov	r3,r17
8111b158:	9005883a 	mov	r2,r18
8111b15c:	8023883a 	mov	r17,r16
8111b160:	0009883a 	mov	r4,zero
8111b164:	9821883a 	mov	r16,r19
8111b168:	da400a15 	stw	r9,40(sp)
8111b16c:	1827883a 	mov	r19,r3
8111b170:	b980004c 	andi	r6,r23,1
8111b174:	30000626 	beq	r6,zero,8111b190 <_strtod_r+0xf40>
8111b178:	81800017 	ldw	r6,0(r16)
8111b17c:	81c00117 	ldw	r7,4(r16)
8111b180:	1009883a 	mov	r4,r2
8111b184:	180b883a 	mov	r5,r3
8111b188:	110cd400 	call	8110cd40 <__muldf3>
8111b18c:	01000044 	movi	r4,1
8111b190:	b82fd07a 	srai	r23,r23,1
8111b194:	84000204 	addi	r16,r16,8
8111b198:	b83ff51e 	bne	r23,zero,8111b170 <__reset+0xfb0fb170>
8111b19c:	21003fcc 	andi	r4,r4,255
8111b1a0:	8821883a 	mov	r16,r17
8111b1a4:	da400a17 	ldw	r9,40(sp)
8111b1a8:	9823883a 	mov	r17,r19
8111b1ac:	2001a51e 	bne	r4,zero,8111b844 <_strtod_r+0x15f4>
8111b1b0:	d9000917 	ldw	r4,36(sp)
8111b1b4:	20016d1e 	bne	r4,zero,8111b76c <_strtod_r+0x151c>
8111b1b8:	000d883a 	mov	r6,zero
8111b1bc:	000f883a 	mov	r7,zero
8111b1c0:	9009883a 	mov	r4,r18
8111b1c4:	880b883a 	mov	r5,r17
8111b1c8:	da401315 	stw	r9,76(sp)
8111b1cc:	11223000 	call	81122300 <__eqdf2>
8111b1d0:	da401317 	ldw	r9,76(sp)
8111b1d4:	103df41e 	bne	r2,zero,8111a9a8 <__reset+0xfb0fa9a8>
8111b1d8:	00800884 	movi	r2,34
8111b1dc:	80800015 	stw	r2,0(r16)
8111b1e0:	002b883a 	mov	r21,zero
8111b1e4:	002d883a 	mov	r22,zero
8111b1e8:	003ce306 	br	8111a578 <__reset+0xfb0fa578>
8111b1ec:	055387c4 	movi	r21,19999
8111b1f0:	003d6b06 	br	8111a7a0 <__reset+0xfb0fa7a0>
8111b1f4:	0440d434 	movhi	r17,848
8111b1f8:	1c63883a 	add	r17,r3,r17
8111b1fc:	882d883a 	mov	r22,r17
8111b200:	003ebe06 	br	8111acfc <__reset+0xfb0facfc>
8111b204:	14403fcc 	andi	r17,r2,255
8111b208:	8c40201c 	xori	r17,r17,128
8111b20c:	8c7fe004 	addi	r17,r17,-128
8111b210:	dd400817 	ldw	r21,32(sp)
8111b214:	0027883a 	mov	r19,zero
8111b218:	0039883a 	mov	fp,zero
8111b21c:	002d883a 	mov	r22,zero
8111b220:	003c9906 	br	8111a488 <__reset+0xfb0fa488>
8111b224:	00c00944 	movi	r3,37
8111b228:	1a47c83a 	sub	r3,r3,r9
8111b22c:	1d7d8c16 	blt	r3,r21,8111a860 <__reset+0xfb0fa860>
8111b230:	1261c83a 	sub	r16,r2,r9
8111b234:	800490fa 	slli	r2,r16,3
8111b238:	04e04534 	movhi	r19,33044
8111b23c:	9ceb1c04 	addi	r19,r19,-21392
8111b240:	9885883a 	add	r2,r19,r2
8111b244:	11000017 	ldw	r4,0(r2)
8111b248:	11400117 	ldw	r5,4(r2)
8111b24c:	900d883a 	mov	r6,r18
8111b250:	880f883a 	mov	r7,r17
8111b254:	110cd400 	call	8110cd40 <__muldf3>
8111b258:	ac0dc83a 	sub	r6,r21,r16
8111b25c:	300c90fa 	slli	r6,r6,3
8111b260:	1009883a 	mov	r4,r2
8111b264:	180b883a 	mov	r5,r3
8111b268:	9985883a 	add	r2,r19,r6
8111b26c:	11800017 	ldw	r6,0(r2)
8111b270:	11c00117 	ldw	r7,4(r2)
8111b274:	110cd400 	call	8110cd40 <__muldf3>
8111b278:	102b883a 	mov	r21,r2
8111b27c:	182d883a 	mov	r22,r3
8111b280:	003cbd06 	br	8111a578 <__reset+0xfb0fa578>
8111b284:	b811883a 	mov	r8,r23
8111b288:	003e8606 	br	8111aca4 <__reset+0xfb0faca4>
8111b28c:	d8000d15 	stw	zero,52(sp)
8111b290:	05cffc34 	movhi	r23,16368
8111b294:	003e8006 	br	8111ac98 <__reset+0xfb0fac98>
8111b298:	883f011e 	bne	r17,zero,8111aea0 <__reset+0xfb0faea0>
8111b29c:	dd000a15 	stw	r20,40(sp)
8111b2a0:	dd001217 	ldw	r20,72(sp)
8111b2a4:	a811883a 	mov	r8,r21
8111b2a8:	00800884 	movi	r2,34
8111b2ac:	80800015 	stw	r2,0(r16)
8111b2b0:	002b883a 	mov	r21,zero
8111b2b4:	d8800517 	ldw	r2,20(sp)
8111b2b8:	002d883a 	mov	r22,zero
8111b2bc:	003f0a06 	br	8111aee8 <__reset+0xfb0faee8>
8111b2c0:	d9800517 	ldw	r6,20(sp)
8111b2c4:	30000826 	beq	r6,zero,8111b2e8 <_strtod_r+0x1098>
8111b2c8:	01400d44 	movi	r5,53
8111b2cc:	d9000204 	addi	r4,sp,8
8111b2d0:	d8801315 	stw	r2,76(sp)
8111b2d4:	111976c0 	call	8111976c <__copybits>
8111b2d8:	d9400517 	ldw	r5,20(sp)
8111b2dc:	8009883a 	mov	r4,r16
8111b2e0:	11188c40 	call	811188c4 <_Bfree>
8111b2e4:	d8801317 	ldw	r2,76(sp)
8111b2e8:	00c00184 	movi	r3,6
8111b2ec:	1d400f36 	bltu	r3,r21,8111b32c <_strtod_r+0x10dc>
8111b2f0:	a82a90ba 	slli	r21,r21,2
8111b2f4:	00e044b4 	movhi	r3,33042
8111b2f8:	18ecc204 	addi	r3,r3,-19704
8111b2fc:	a8eb883a 	add	r21,r21,r3
8111b300:	a8c00017 	ldw	r3,0(r21)
8111b304:	1800683a 	jmp	r3
8111b308:	8111b384 	addi	r4,r16,18126
8111b30c:	8111b35c 	xori	r4,r16,18125
8111b310:	8111b340 	call	88111b34 <__reset+0x20f1b34>
8111b314:	8111b324 	muli	r4,r16,18124
8111b318:	8111b34c 	andi	r4,r16,18125
8111b31c:	8111b35c 	xori	r4,r16,18125
8111b320:	8111b384 	addi	r4,r16,18126
8111b324:	045ffc34 	movhi	r17,32752
8111b328:	0025883a 	mov	r18,zero
8111b32c:	1080020c 	andi	r2,r2,8
8111b330:	902b883a 	mov	r21,r18
8111b334:	103c8f26 	beq	r2,zero,8111a574 <__reset+0xfb0fa574>
8111b338:	8da00034 	orhi	r22,r17,32768
8111b33c:	003c8e06 	br	8111a578 <__reset+0xfb0fa578>
8111b340:	dc800217 	ldw	r18,8(sp)
8111b344:	dc400317 	ldw	r17,12(sp)
8111b348:	003ff806 	br	8111b32c <__reset+0xfb0fb32c>
8111b34c:	04600034 	movhi	r17,32768
8111b350:	8c7fffc4 	addi	r17,r17,-1
8111b354:	04bfffc4 	movi	r18,-1
8111b358:	003ff406 	br	8111b32c <__reset+0xfb0fb32c>
8111b35c:	d8c00417 	ldw	r3,16(sp)
8111b360:	dc400317 	ldw	r17,12(sp)
8111b364:	013ffc34 	movhi	r4,65520
8111b368:	18c10cc4 	addi	r3,r3,1075
8111b36c:	1806953a 	slli	r3,r3,20
8111b370:	213fffc4 	addi	r4,r4,-1
8111b374:	8922703a 	and	r17,r17,r4
8111b378:	dc800217 	ldw	r18,8(sp)
8111b37c:	88e2b03a 	or	r17,r17,r3
8111b380:	003fea06 	br	8111b32c <__reset+0xfb0fb32c>
8111b384:	0023883a 	mov	r17,zero
8111b388:	0025883a 	mov	r18,zero
8111b38c:	003fe706 	br	8111b32c <__reset+0xfb0fb32c>
8111b390:	01800044 	movi	r6,1
8111b394:	50d5883a 	add	r10,r10,r3
8111b398:	2a4b883a 	add	r5,r5,r9
8111b39c:	19811a26 	beq	r3,r6,8111b808 <_strtod_r+0x15b8>
8111b3a0:	01800204 	movi	r6,8
8111b3a4:	01c00404 	movi	r7,16
8111b3a8:	4a400044 	addi	r9,r9,1
8111b3ac:	48bfffc4 	addi	r2,r9,-1
8111b3b0:	30801616 	blt	r6,r2,8111b40c <_strtod_r+0x11bc>
8111b3b4:	e70002a4 	muli	fp,fp,10
8111b3b8:	497ffb1e 	bne	r9,r5,8111b3a8 <__reset+0xfb0fb3a8>
8111b3bc:	d9800617 	ldw	r6,24(sp)
8111b3c0:	4a400044 	addi	r9,r9,1
8111b3c4:	00c00204 	movi	r3,8
8111b3c8:	19400c0e 	bge	r3,r5,8111b3fc <_strtod_r+0x11ac>
8111b3cc:	00800404 	movi	r2,16
8111b3d0:	000b883a 	mov	r5,zero
8111b3d4:	127ea316 	blt	r2,r9,8111ae64 <__reset+0xfb0fae64>
8111b3d8:	988002a4 	muli	r2,r19,10
8111b3dc:	20a7883a 	add	r19,r4,r2
8111b3e0:	003ea006 	br	8111ae64 <__reset+0xfb0fae64>
8111b3e4:	d8800617 	ldw	r2,24(sp)
8111b3e8:	8c7ff404 	addi	r17,r17,-48
8111b3ec:	2a800044 	addi	r10,r5,1
8111b3f0:	d8800815 	stw	r2,32(sp)
8111b3f4:	100d883a 	mov	r6,r2
8111b3f8:	02400044 	movi	r9,1
8111b3fc:	e08002a4 	muli	r2,fp,10
8111b400:	000b883a 	mov	r5,zero
8111b404:	88b9883a 	add	fp,r17,r2
8111b408:	003e9606 	br	8111ae64 <__reset+0xfb0fae64>
8111b40c:	3a7fea16 	blt	r7,r9,8111b3b8 <__reset+0xfb0fb3b8>
8111b410:	9cc002a4 	muli	r19,r19,10
8111b414:	003fe806 	br	8111b3b8 <__reset+0xfb0fb3b8>
8111b418:	00bffa84 	movi	r2,-22
8111b41c:	a8bd1016 	blt	r21,r2,8111a860 <__reset+0xfb0fa860>
8111b420:	a82a90fa 	slli	r21,r21,3
8111b424:	00a04534 	movhi	r2,33044
8111b428:	10ab1c04 	addi	r2,r2,-21392
8111b42c:	1545c83a 	sub	r2,r2,r21
8111b430:	11800017 	ldw	r6,0(r2)
8111b434:	11c00117 	ldw	r7,4(r2)
8111b438:	9009883a 	mov	r4,r18
8111b43c:	880b883a 	mov	r5,r17
8111b440:	1121a100 	call	81121a10 <__divdf3>
8111b444:	102b883a 	mov	r21,r2
8111b448:	182d883a 	mov	r22,r3
8111b44c:	003c4a06 	br	8111a578 <__reset+0xfb0fa578>
8111b450:	dd000a15 	stw	r20,40(sp)
8111b454:	a811883a 	mov	r8,r21
8111b458:	dd001217 	ldw	r20,72(sp)
8111b45c:	003e9e06 	br	8111aed8 <__reset+0xfb0faed8>
8111b460:	01604534 	movhi	r5,33044
8111b464:	d9000617 	ldw	r4,24(sp)
8111b468:	296b4e04 	addi	r5,r5,-21192
8111b46c:	01c00644 	movi	r7,25
8111b470:	00000b06 	br	8111b4a0 <_strtod_r+0x1250>
8111b474:	21000044 	addi	r4,r4,1
8111b478:	20800003 	ldbu	r2,0(r4)
8111b47c:	10ffefc4 	addi	r3,r2,-65
8111b480:	10803fcc 	andi	r2,r2,255
8111b484:	1080201c 	xori	r2,r2,128
8111b488:	18c03fcc 	andi	r3,r3,255
8111b48c:	10bfe004 	addi	r2,r2,-128
8111b490:	38c00136 	bltu	r7,r3,8111b498 <_strtod_r+0x1248>
8111b494:	10800804 	addi	r2,r2,32
8111b498:	29400044 	addi	r5,r5,1
8111b49c:	11bbbb1e 	bne	r2,r6,8111a38c <__reset+0xfb0fa38c>
8111b4a0:	29800007 	ldb	r6,0(r5)
8111b4a4:	303ff31e 	bne	r6,zero,8111b474 <__reset+0xfb0fb474>
8111b4a8:	01a04534 	movhi	r6,33044
8111b4ac:	d9000615 	stw	r4,24(sp)
8111b4b0:	31ab4f04 	addi	r6,r6,-21188
8111b4b4:	200b883a 	mov	r5,r4
8111b4b8:	02000644 	movi	r8,25
8111b4bc:	00000a06 	br	8111b4e8 <_strtod_r+0x1298>
8111b4c0:	28800003 	ldbu	r2,0(r5)
8111b4c4:	10ffefc4 	addi	r3,r2,-65
8111b4c8:	10803fcc 	andi	r2,r2,255
8111b4cc:	1080201c 	xori	r2,r2,128
8111b4d0:	18c03fcc 	andi	r3,r3,255
8111b4d4:	10bfe004 	addi	r2,r2,-128
8111b4d8:	40c00136 	bltu	r8,r3,8111b4e0 <_strtod_r+0x1290>
8111b4dc:	10800804 	addi	r2,r2,32
8111b4e0:	31800044 	addi	r6,r6,1
8111b4e4:	11c0711e 	bne	r2,r7,8111b6ac <_strtod_r+0x145c>
8111b4e8:	31c00007 	ldb	r7,0(r6)
8111b4ec:	29400044 	addi	r5,r5,1
8111b4f0:	383ff31e 	bne	r7,zero,8111b4c0 <__reset+0xfb0fb4c0>
8111b4f4:	d9400615 	stw	r5,24(sp)
8111b4f8:	045ffc34 	movhi	r17,32752
8111b4fc:	0025883a 	mov	r18,zero
8111b500:	003c1b06 	br	8111a570 <__reset+0xfb0fa570>
8111b504:	000b883a 	mov	r5,zero
8111b508:	003ccc06 	br	8111a83c <__reset+0xfb0fa83c>
8111b50c:	d9400e17 	ldw	r5,56(sp)
8111b510:	dd000a15 	stw	r20,40(sp)
8111b514:	00800434 	movhi	r2,16
8111b518:	a811883a 	mov	r8,r21
8111b51c:	dd001217 	ldw	r20,72(sp)
8111b520:	dd401117 	ldw	r21,68(sp)
8111b524:	dd801017 	ldw	r22,64(sp)
8111b528:	10bfffc4 	addi	r2,r2,-1
8111b52c:	28005626 	beq	r5,zero,8111b688 <_strtod_r+0x1438>
8111b530:	8886703a 	and	r3,r17,r2
8111b534:	18807826 	beq	r3,r2,8111b718 <_strtod_r+0x14c8>
8111b538:	d8c00b17 	ldw	r3,44(sp)
8111b53c:	18005726 	beq	r3,zero,8111b69c <_strtod_r+0x144c>
8111b540:	1c44703a 	and	r2,r3,r17
8111b544:	10000f26 	beq	r2,zero,8111b584 <_strtod_r+0x1334>
8111b548:	d9000e17 	ldw	r4,56(sp)
8111b54c:	d9800917 	ldw	r6,36(sp)
8111b550:	20005e26 	beq	r4,zero,8111b6cc <_strtod_r+0x147c>
8111b554:	9009883a 	mov	r4,r18
8111b558:	880b883a 	mov	r5,r17
8111b55c:	da001315 	stw	r8,76(sp)
8111b560:	111a1e40 	call	8111a1e4 <sulp>
8111b564:	100d883a 	mov	r6,r2
8111b568:	180f883a 	mov	r7,r3
8111b56c:	9009883a 	mov	r4,r18
8111b570:	880b883a 	mov	r5,r17
8111b574:	112115c0 	call	8112115c <__adddf3>
8111b578:	da001317 	ldw	r8,76(sp)
8111b57c:	102b883a 	mov	r21,r2
8111b580:	182d883a 	mov	r22,r3
8111b584:	d8c00917 	ldw	r3,36(sp)
8111b588:	18000f26 	beq	r3,zero,8111b5c8 <_strtod_r+0x1378>
8111b58c:	a809883a 	mov	r4,r21
8111b590:	b00b883a 	mov	r5,r22
8111b594:	000d883a 	mov	r6,zero
8111b598:	01ce5434 	movhi	r7,14672
8111b59c:	da001315 	stw	r8,76(sp)
8111b5a0:	110cd400 	call	8110cd40 <__muldf3>
8111b5a4:	102b883a 	mov	r21,r2
8111b5a8:	182d883a 	mov	r22,r3
8111b5ac:	da001317 	ldw	r8,76(sp)
8111b5b0:	1800051e 	bne	r3,zero,8111b5c8 <_strtod_r+0x1378>
8111b5b4:	d8800517 	ldw	r2,20(sp)
8111b5b8:	a83e4b1e 	bne	r21,zero,8111aee8 <__reset+0xfb0faee8>
8111b5bc:	00c00884 	movi	r3,34
8111b5c0:	80c00015 	stw	r3,0(r16)
8111b5c4:	003e4806 	br	8111aee8 <__reset+0xfb0faee8>
8111b5c8:	d8800517 	ldw	r2,20(sp)
8111b5cc:	003e4606 	br	8111aee8 <__reset+0xfb0faee8>
8111b5d0:	d9000e17 	ldw	r4,56(sp)
8111b5d4:	dd000a15 	stw	r20,40(sp)
8111b5d8:	a811883a 	mov	r8,r21
8111b5dc:	dd001217 	ldw	r20,72(sp)
8111b5e0:	dd401117 	ldw	r21,68(sp)
8111b5e4:	dd801017 	ldw	r22,64(sp)
8111b5e8:	203fe61e 	bne	r4,zero,8111b584 <__reset+0xfb0fb584>
8111b5ec:	903fe51e 	bne	r18,zero,8111b584 <__reset+0xfb0fb584>
8111b5f0:	00800434 	movhi	r2,16
8111b5f4:	10bfffc4 	addi	r2,r2,-1
8111b5f8:	8884703a 	and	r2,r17,r2
8111b5fc:	103fe11e 	bne	r2,zero,8111b584 <__reset+0xfb0fb584>
8111b600:	8ddffc2c 	andhi	r23,r17,32752
8111b604:	0081ac34 	movhi	r2,1712
8111b608:	15ffde2e 	bgeu	r2,r23,8111b584 <__reset+0xfb0fb584>
8111b60c:	40800517 	ldw	r2,20(r8)
8111b610:	1000031e 	bne	r2,zero,8111b620 <_strtod_r+0x13d0>
8111b614:	40800417 	ldw	r2,16(r8)
8111b618:	00c00044 	movi	r3,1
8111b61c:	18bfd90e 	bge	r3,r2,8111b584 <__reset+0xfb0fb584>
8111b620:	400b883a 	mov	r5,r8
8111b624:	01800044 	movi	r6,1
8111b628:	8009883a 	mov	r4,r16
8111b62c:	1118fc40 	call	81118fc4 <__lshift>
8111b630:	980b883a 	mov	r5,r19
8111b634:	1009883a 	mov	r4,r2
8111b638:	d8801315 	stw	r2,76(sp)
8111b63c:	11191140 	call	81119114 <__mcmp>
8111b640:	da001317 	ldw	r8,76(sp)
8111b644:	00bfcf0e 	bge	zero,r2,8111b584 <__reset+0xfb0fb584>
8111b648:	d8c00917 	ldw	r3,36(sp)
8111b64c:	18005c26 	beq	r3,zero,8111b7c0 <_strtod_r+0x1570>
8111b650:	0081ac34 	movhi	r2,1712
8111b654:	15c05a16 	blt	r2,r23,8111b7c0 <_strtod_r+0x1570>
8111b658:	0080dc34 	movhi	r2,880
8111b65c:	15ffcb16 	blt	r2,r23,8111b58c <__reset+0xfb0fb58c>
8111b660:	003f1106 	br	8111b2a8 <__reset+0xfb0fb2a8>
8111b664:	002d883a 	mov	r22,zero
8111b668:	022ff834 	movhi	r8,49120
8111b66c:	d8000d15 	stw	zero,52(sp)
8111b670:	05cff834 	movhi	r23,16352
8111b674:	003ded06 	br	8111ae2c <__reset+0xfb0fae2c>
8111b678:	0440d434 	movhi	r17,848
8111b67c:	1c63883a 	add	r17,r3,r17
8111b680:	d8000915 	stw	zero,36(sp)
8111b684:	003cc806 	br	8111a9a8 <__reset+0xfb0fa9a8>
8111b688:	8884703a 	and	r2,r17,r2
8111b68c:	103faa1e 	bne	r2,zero,8111b538 <__reset+0xfb0fb538>
8111b690:	903fa91e 	bne	r18,zero,8111b538 <__reset+0xfb0fb538>
8111b694:	8ddffc2c 	andhi	r23,r17,32752
8111b698:	003feb06 	br	8111b648 <__reset+0xfb0fb648>
8111b69c:	d8c00d17 	ldw	r3,52(sp)
8111b6a0:	1cae703a 	and	r23,r3,r18
8111b6a4:	b83fb726 	beq	r23,zero,8111b584 <__reset+0xfb0fb584>
8111b6a8:	003fa706 	br	8111b548 <__reset+0xfb0fb548>
8111b6ac:	21000044 	addi	r4,r4,1
8111b6b0:	d9000615 	stw	r4,24(sp)
8111b6b4:	003f9006 	br	8111b4f8 <__reset+0xfb0fb4f8>
8111b6b8:	01604534 	movhi	r5,33044
8111b6bc:	296b1204 	addi	r5,r5,-21432
8111b6c0:	d9400915 	stw	r5,36(sp)
8111b6c4:	0027883a 	mov	r19,zero
8111b6c8:	003ca206 	br	8111a954 <__reset+0xfb0fa954>
8111b6cc:	9009883a 	mov	r4,r18
8111b6d0:	880b883a 	mov	r5,r17
8111b6d4:	da001315 	stw	r8,76(sp)
8111b6d8:	111a1e40 	call	8111a1e4 <sulp>
8111b6dc:	100d883a 	mov	r6,r2
8111b6e0:	180f883a 	mov	r7,r3
8111b6e4:	9009883a 	mov	r4,r18
8111b6e8:	880b883a 	mov	r5,r17
8111b6ec:	11225580 	call	81122558 <__subdf3>
8111b6f0:	000d883a 	mov	r6,zero
8111b6f4:	000f883a 	mov	r7,zero
8111b6f8:	1009883a 	mov	r4,r2
8111b6fc:	180b883a 	mov	r5,r3
8111b700:	102b883a 	mov	r21,r2
8111b704:	182d883a 	mov	r22,r3
8111b708:	11223000 	call	81122300 <__eqdf2>
8111b70c:	da001317 	ldw	r8,76(sp)
8111b710:	103ee526 	beq	r2,zero,8111b2a8 <__reset+0xfb0fb2a8>
8111b714:	003f9b06 	br	8111b584 <__reset+0xfb0fb584>
8111b718:	d8800917 	ldw	r2,36(sp)
8111b71c:	10002226 	beq	r2,zero,8111b7a8 <_strtod_r+0x1558>
8111b720:	889ffc2c 	andhi	r2,r17,32752
8111b724:	00c1a834 	movhi	r3,1696
8111b728:	18801f36 	bltu	r3,r2,8111b7a8 <_strtod_r+0x1558>
8111b72c:	1004d53a 	srli	r2,r2,20
8111b730:	00c01ac4 	movi	r3,107
8111b734:	1887c83a 	sub	r3,r3,r2
8111b738:	00bfffc4 	movi	r2,-1
8111b73c:	10c4983a 	sll	r2,r2,r3
8111b740:	14bf7d1e 	bne	r2,r18,8111b538 <__reset+0xfb0fb538>
8111b744:	00dffc34 	movhi	r3,32752
8111b748:	18ffffc4 	addi	r3,r3,-1
8111b74c:	88c03526 	beq	r17,r3,8111b824 <_strtod_r+0x15d4>
8111b750:	8c5ffc2c 	andhi	r17,r17,32752
8111b754:	00800434 	movhi	r2,16
8111b758:	002b883a 	mov	r21,zero
8111b75c:	88ad883a 	add	r22,r17,r2
8111b760:	003f8806 	br	8111b584 <__reset+0xfb0fb584>
8111b764:	01401a84 	movi	r5,106
8111b768:	d9400915 	stw	r5,36(sp)
8111b76c:	8ddffc2c 	andhi	r23,r17,32752
8111b770:	b82ed53a 	srli	r23,r23,20
8111b774:	00801ac4 	movi	r2,107
8111b778:	15c5c83a 	sub	r2,r2,r23
8111b77c:	00be8e0e 	bge	zero,r2,8111b1b8 <__reset+0xfb0fb1b8>
8111b780:	00c007c4 	movi	r3,31
8111b784:	18800a0e 	bge	r3,r2,8111b7b0 <_strtod_r+0x1560>
8111b788:	00c00d04 	movi	r3,52
8111b78c:	0025883a 	mov	r18,zero
8111b790:	1880270e 	bge	r3,r2,8111b830 <_strtod_r+0x15e0>
8111b794:	0440dc34 	movhi	r17,880
8111b798:	003e8706 	br	8111b1b8 <__reset+0xfb0fb1b8>
8111b79c:	d8000915 	stw	zero,36(sp)
8111b7a0:	05fe6a16 	blt	zero,r23,8111b14c <__reset+0xfb0fb14c>
8111b7a4:	003e8406 	br	8111b1b8 <__reset+0xfb0fb1b8>
8111b7a8:	00bfffc4 	movi	r2,-1
8111b7ac:	003fe406 	br	8111b740 <__reset+0xfb0fb740>
8111b7b0:	00ffffc4 	movi	r3,-1
8111b7b4:	1884983a 	sll	r2,r3,r2
8111b7b8:	14a4703a 	and	r18,r2,r18
8111b7bc:	003e7e06 	br	8111b1b8 <__reset+0xfb0fb1b8>
8111b7c0:	00bffc34 	movhi	r2,65520
8111b7c4:	b8af883a 	add	r23,r23,r2
8111b7c8:	057fffc4 	movi	r21,-1
8111b7cc:	00800434 	movhi	r2,16
8111b7d0:	1545883a 	add	r2,r2,r21
8111b7d4:	b8acb03a 	or	r22,r23,r2
8111b7d8:	003f6a06 	br	8111b584 <__reset+0xfb0fb584>
8111b7dc:	01604534 	movhi	r5,33044
8111b7e0:	296b5204 	addi	r5,r5,-21176
8111b7e4:	d9800204 	addi	r6,sp,8
8111b7e8:	d9000604 	addi	r4,sp,24
8111b7ec:	111fd3c0 	call	8111fd3c <__hexnan>
8111b7f0:	00c00144 	movi	r3,5
8111b7f4:	10fb5c1e 	bne	r2,r3,8111a568 <__reset+0xfb0fa568>
8111b7f8:	dc400317 	ldw	r17,12(sp)
8111b7fc:	dc800217 	ldw	r18,8(sp)
8111b800:	8c5ffc34 	orhi	r17,r17,32752
8111b804:	003b5a06 	br	8111a570 <__reset+0xfb0fa570>
8111b808:	480b883a 	mov	r5,r9
8111b80c:	d9800617 	ldw	r6,24(sp)
8111b810:	4a400044 	addi	r9,r9,1
8111b814:	003eeb06 	br	8111b3c4 <__reset+0xfb0fb3c4>
8111b818:	1025883a 	mov	r18,r2
8111b81c:	1823883a 	mov	r17,r3
8111b820:	003c4c06 	br	8111a954 <__reset+0xfb0fa954>
8111b824:	00ffffc4 	movi	r3,-1
8111b828:	10ffc91e 	bne	r2,r3,8111b750 <__reset+0xfb0fb750>
8111b82c:	003da906 	br	8111aed4 <__reset+0xfb0faed4>
8111b830:	10bff804 	addi	r2,r2,-32
8111b834:	00ffffc4 	movi	r3,-1
8111b838:	1884983a 	sll	r2,r3,r2
8111b83c:	1462703a 	and	r17,r2,r17
8111b840:	003e5d06 	br	8111b1b8 <__reset+0xfb0fb1b8>
8111b844:	1025883a 	mov	r18,r2
8111b848:	1823883a 	mov	r17,r3
8111b84c:	003e5806 	br	8111b1b0 <__reset+0xfb0fb1b0>

8111b850 <strtod>:
8111b850:	00a04534 	movhi	r2,33044
8111b854:	10b3e404 	addi	r2,r2,-12400
8111b858:	280d883a 	mov	r6,r5
8111b85c:	200b883a 	mov	r5,r4
8111b860:	11000017 	ldw	r4,0(r2)
8111b864:	111a2501 	jmpi	8111a250 <_strtod_r>

8111b868 <strtof>:
8111b868:	defffb04 	addi	sp,sp,-20
8111b86c:	de00012e 	bgeu	sp,et,8111b874 <strtof+0xc>
8111b870:	003b68fa 	trap	3
8111b874:	dcc00315 	stw	r19,12(sp)
8111b878:	04e04534 	movhi	r19,33044
8111b87c:	9cf3e404 	addi	r19,r19,-12400
8111b880:	280d883a 	mov	r6,r5
8111b884:	200b883a 	mov	r5,r4
8111b888:	99000017 	ldw	r4,0(r19)
8111b88c:	dfc00415 	stw	ra,16(sp)
8111b890:	dc800215 	stw	r18,8(sp)
8111b894:	dc400115 	stw	r17,4(sp)
8111b898:	dc000015 	stw	r16,0(sp)
8111b89c:	111a2500 	call	8111a250 <_strtod_r>
8111b8a0:	1009883a 	mov	r4,r2
8111b8a4:	180b883a 	mov	r5,r3
8111b8a8:	1025883a 	mov	r18,r2
8111b8ac:	1823883a 	mov	r17,r3
8111b8b0:	110d5780 	call	8110d578 <__truncdfsf2>
8111b8b4:	000b883a 	mov	r5,zero
8111b8b8:	1009883a 	mov	r4,r2
8111b8bc:	1021883a 	mov	r16,r2
8111b8c0:	1120f600 	call	81120f60 <__eqsf2>
8111b8c4:	1000111e 	bne	r2,zero,8111b90c <strtof+0xa4>
8111b8c8:	000d883a 	mov	r6,zero
8111b8cc:	000f883a 	mov	r7,zero
8111b8d0:	9009883a 	mov	r4,r18
8111b8d4:	880b883a 	mov	r5,r17
8111b8d8:	11223000 	call	81122300 <__eqdf2>
8111b8dc:	10000b26 	beq	r2,zero,8111b90c <strtof+0xa4>
8111b8e0:	98800017 	ldw	r2,0(r19)
8111b8e4:	00c00884 	movi	r3,34
8111b8e8:	10c00015 	stw	r3,0(r2)
8111b8ec:	8005883a 	mov	r2,r16
8111b8f0:	dfc00417 	ldw	ra,16(sp)
8111b8f4:	dcc00317 	ldw	r19,12(sp)
8111b8f8:	dc800217 	ldw	r18,8(sp)
8111b8fc:	dc400117 	ldw	r17,4(sp)
8111b900:	dc000017 	ldw	r16,0(sp)
8111b904:	dec00504 	addi	sp,sp,20
8111b908:	f800283a 	ret
8111b90c:	015fe034 	movhi	r5,32640
8111b910:	297fffc4 	addi	r5,r5,-1
8111b914:	8009883a 	mov	r4,r16
8111b918:	1120fd80 	call	81120fd8 <__gesf2>
8111b91c:	0080070e 	bge	zero,r2,8111b93c <strtof+0xd4>
8111b920:	01dffc34 	movhi	r7,32752
8111b924:	39ffffc4 	addi	r7,r7,-1
8111b928:	01bfffc4 	movi	r6,-1
8111b92c:	9009883a 	mov	r4,r18
8111b930:	880b883a 	mov	r5,r17
8111b934:	11223880 	call	81122388 <__gedf2>
8111b938:	00bfe90e 	bge	zero,r2,8111b8e0 <__reset+0xfb0fb8e0>
8111b93c:	017fe034 	movhi	r5,65408
8111b940:	297fffc4 	addi	r5,r5,-1
8111b944:	8009883a 	mov	r4,r16
8111b948:	11210940 	call	81121094 <__lesf2>
8111b94c:	103fe70e 	bge	r2,zero,8111b8ec <__reset+0xfb0fb8ec>
8111b950:	01fffc34 	movhi	r7,65520
8111b954:	39ffffc4 	addi	r7,r7,-1
8111b958:	01bfffc4 	movi	r6,-1
8111b95c:	9009883a 	mov	r4,r18
8111b960:	880b883a 	mov	r5,r17
8111b964:	11224640 	call	81122464 <__ledf2>
8111b968:	103fdd0e 	bge	r2,zero,8111b8e0 <__reset+0xfb0fb8e0>
8111b96c:	003fdf06 	br	8111b8ec <__reset+0xfb0fb8ec>

8111b970 <_strtoll_r>:
8111b970:	00a04534 	movhi	r2,33044
8111b974:	defff304 	addi	sp,sp,-52
8111b978:	10b3e204 	addi	r2,r2,-12408
8111b97c:	de00012e 	bgeu	sp,et,8111b984 <_strtoll_r+0x14>
8111b980:	003b68fa 	trap	3
8111b984:	dc800515 	stw	r18,20(sp)
8111b988:	14800017 	ldw	r18,0(r2)
8111b98c:	dd800915 	stw	r22,36(sp)
8111b990:	dd400815 	stw	r21,32(sp)
8111b994:	dcc00615 	stw	r19,24(sp)
8111b998:	d9000015 	stw	r4,0(sp)
8111b99c:	dfc00c15 	stw	ra,48(sp)
8111b9a0:	df000b15 	stw	fp,44(sp)
8111b9a4:	ddc00a15 	stw	r23,40(sp)
8111b9a8:	dd000715 	stw	r20,28(sp)
8111b9ac:	dc400415 	stw	r17,16(sp)
8111b9b0:	dc000315 	stw	r16,12(sp)
8111b9b4:	282d883a 	mov	r22,r5
8111b9b8:	302b883a 	mov	r21,r6
8111b9bc:	3827883a 	mov	r19,r7
8111b9c0:	2809883a 	mov	r4,r5
8111b9c4:	24000003 	ldbu	r16,0(r4)
8111b9c8:	24400044 	addi	r17,r4,1
8111b9cc:	2007883a 	mov	r3,r4
8111b9d0:	9405883a 	add	r2,r18,r16
8111b9d4:	10800043 	ldbu	r2,1(r2)
8111b9d8:	8809883a 	mov	r4,r17
8111b9dc:	1080020c 	andi	r2,r2,8
8111b9e0:	103ff81e 	bne	r2,zero,8111b9c4 <__reset+0xfb0fb9c4>
8111b9e4:	00800b44 	movi	r2,45
8111b9e8:	80807826 	beq	r16,r2,8111bbcc <_strtoll_r+0x25c>
8111b9ec:	00800ac4 	movi	r2,43
8111b9f0:	80807a26 	beq	r16,r2,8111bbdc <_strtoll_r+0x26c>
8111b9f4:	0039883a 	mov	fp,zero
8111b9f8:	98004e26 	beq	r19,zero,8111bb34 <_strtoll_r+0x1c4>
8111b9fc:	00800404 	movi	r2,16
8111ba00:	98808226 	beq	r19,r2,8111bc0c <_strtoll_r+0x29c>
8111ba04:	982fd7fa 	srai	r23,r19,31
8111ba08:	9829883a 	mov	r20,r19
8111ba0c:	e0004f26 	beq	fp,zero,8111bb4c <_strtoll_r+0x1dc>
8111ba10:	0017883a 	mov	r11,zero
8111ba14:	02a00034 	movhi	r10,32768
8111ba18:	5809883a 	mov	r4,r11
8111ba1c:	500b883a 	mov	r5,r10
8111ba20:	a00d883a 	mov	r6,r20
8111ba24:	b80f883a 	mov	r7,r23
8111ba28:	da800215 	stw	r10,8(sp)
8111ba2c:	dac00115 	stw	r11,4(sp)
8111ba30:	112086c0 	call	8112086c <__umoddi3>
8111ba34:	dac00117 	ldw	r11,4(sp)
8111ba38:	da800217 	ldw	r10,8(sp)
8111ba3c:	a00d883a 	mov	r6,r20
8111ba40:	5809883a 	mov	r4,r11
8111ba44:	500b883a 	mov	r5,r10
8111ba48:	b80f883a 	mov	r7,r23
8111ba4c:	d8800115 	stw	r2,4(sp)
8111ba50:	11202ec0 	call	811202ec <__udivdi3>
8111ba54:	9409883a 	add	r4,r18,r16
8111ba58:	21000043 	ldbu	r4,1(r4)
8111ba5c:	1019883a 	mov	r12,r2
8111ba60:	880b883a 	mov	r5,r17
8111ba64:	2240010c 	andi	r9,r4,4
8111ba68:	0015883a 	mov	r10,zero
8111ba6c:	000d883a 	mov	r6,zero
8111ba70:	000f883a 	mov	r7,zero
8111ba74:	03400044 	movi	r13,1
8111ba78:	02ffffc4 	movi	r11,-1
8111ba7c:	da000117 	ldw	r8,4(sp)
8111ba80:	48000d26 	beq	r9,zero,8111bab8 <_strtoll_r+0x148>
8111ba84:	843ff404 	addi	r16,r16,-48
8111ba88:	84c0110e 	bge	r16,r19,8111bad0 <_strtoll_r+0x160>
8111ba8c:	52c00426 	beq	r10,r11,8111baa0 <_strtoll_r+0x130>
8111ba90:	19c00236 	bltu	r3,r7,8111ba9c <_strtoll_r+0x12c>
8111ba94:	38c0311e 	bne	r7,r3,8111bb5c <_strtoll_r+0x1ec>
8111ba98:	6180302e 	bgeu	r12,r6,8111bb5c <_strtoll_r+0x1ec>
8111ba9c:	02bfffc4 	movi	r10,-1
8111baa0:	2c000003 	ldbu	r16,0(r5)
8111baa4:	29400044 	addi	r5,r5,1
8111baa8:	9409883a 	add	r4,r18,r16
8111baac:	21000043 	ldbu	r4,1(r4)
8111bab0:	2240010c 	andi	r9,r4,4
8111bab4:	483ff31e 	bne	r9,zero,8111ba84 <__reset+0xfb0fba84>
8111bab8:	210000cc 	andi	r4,r4,3
8111babc:	20000426 	beq	r4,zero,8111bad0 <_strtoll_r+0x160>
8111bac0:	23403426 	beq	r4,r13,8111bb94 <_strtoll_r+0x224>
8111bac4:	008015c4 	movi	r2,87
8111bac8:	80a1c83a 	sub	r16,r16,r2
8111bacc:	84ffef16 	blt	r16,r19,8111ba8c <__reset+0xfb0fba8c>
8111bad0:	00bfffc4 	movi	r2,-1
8111bad4:	50803426 	beq	r10,r2,8111bba8 <_strtoll_r+0x238>
8111bad8:	e0000426 	beq	fp,zero,8111baec <_strtoll_r+0x17c>
8111badc:	018dc83a 	sub	r6,zero,r6
8111bae0:	3004c03a 	cmpne	r2,r6,zero
8111bae4:	01e1c83a 	sub	r16,zero,r7
8111bae8:	808fc83a 	sub	r7,r16,r2
8111baec:	3005883a 	mov	r2,r6
8111baf0:	3807883a 	mov	r3,r7
8111baf4:	a8000326 	beq	r21,zero,8111bb04 <_strtoll_r+0x194>
8111baf8:	5000321e 	bne	r10,zero,8111bbc4 <_strtoll_r+0x254>
8111bafc:	b00b883a 	mov	r5,r22
8111bb00:	a9400015 	stw	r5,0(r21)
8111bb04:	dfc00c17 	ldw	ra,48(sp)
8111bb08:	df000b17 	ldw	fp,44(sp)
8111bb0c:	ddc00a17 	ldw	r23,40(sp)
8111bb10:	dd800917 	ldw	r22,36(sp)
8111bb14:	dd400817 	ldw	r21,32(sp)
8111bb18:	dd000717 	ldw	r20,28(sp)
8111bb1c:	dcc00617 	ldw	r19,24(sp)
8111bb20:	dc800517 	ldw	r18,20(sp)
8111bb24:	dc400417 	ldw	r17,16(sp)
8111bb28:	dc000317 	ldw	r16,12(sp)
8111bb2c:	dec00d04 	addi	sp,sp,52
8111bb30:	f800283a 	ret
8111bb34:	00800c04 	movi	r2,48
8111bb38:	80802c26 	beq	r16,r2,8111bbec <_strtoll_r+0x27c>
8111bb3c:	05000284 	movi	r20,10
8111bb40:	002f883a 	mov	r23,zero
8111bb44:	a027883a 	mov	r19,r20
8111bb48:	e03fb11e 	bne	fp,zero,8111ba10 <__reset+0xfb0fba10>
8111bb4c:	02a00034 	movhi	r10,32768
8111bb50:	52bfffc4 	addi	r10,r10,-1
8111bb54:	02ffffc4 	movi	r11,-1
8111bb58:	003faf06 	br	8111ba18 <__reset+0xfb0fba18>
8111bb5c:	33000f26 	beq	r6,r12,8111bb9c <_strtoll_r+0x22c>
8111bb60:	b985383a 	mul	r2,r23,r6
8111bb64:	3d0f383a 	mul	r7,r7,r20
8111bb68:	3508383a 	mulxuu	r4,r6,r20
8111bb6c:	350d383a 	mul	r6,r6,r20
8111bb70:	8013d7fa 	srai	r9,r16,31
8111bb74:	388f883a 	add	r7,r7,r2
8111bb78:	818d883a 	add	r6,r16,r6
8111bb7c:	390f883a 	add	r7,r7,r4
8111bb80:	3421803a 	cmpltu	r16,r6,r16
8111bb84:	49cf883a 	add	r7,r9,r7
8111bb88:	81cf883a 	add	r7,r16,r7
8111bb8c:	02800044 	movi	r10,1
8111bb90:	003fc306 	br	8111baa0 <__reset+0xfb0fbaa0>
8111bb94:	00800dc4 	movi	r2,55
8111bb98:	003fcb06 	br	8111bac8 <__reset+0xfb0fbac8>
8111bb9c:	38fff01e 	bne	r7,r3,8111bb60 <__reset+0xfb0fbb60>
8111bba0:	443fbe16 	blt	r8,r16,8111ba9c <__reset+0xfb0fba9c>
8111bba4:	003fee06 	br	8111bb60 <__reset+0xfb0fbb60>
8111bba8:	e0002426 	beq	fp,zero,8111bc3c <_strtoll_r+0x2cc>
8111bbac:	0005883a 	mov	r2,zero
8111bbb0:	00e00034 	movhi	r3,32768
8111bbb4:	d9800017 	ldw	r6,0(sp)
8111bbb8:	01000884 	movi	r4,34
8111bbbc:	31000015 	stw	r4,0(r6)
8111bbc0:	a83fd026 	beq	r21,zero,8111bb04 <__reset+0xfb0fbb04>
8111bbc4:	297fffc4 	addi	r5,r5,-1
8111bbc8:	003fcd06 	br	8111bb00 <__reset+0xfb0fbb00>
8111bbcc:	1c400084 	addi	r17,r3,2
8111bbd0:	1c000043 	ldbu	r16,1(r3)
8111bbd4:	07000044 	movi	fp,1
8111bbd8:	003f8706 	br	8111b9f8 <__reset+0xfb0fb9f8>
8111bbdc:	1c400084 	addi	r17,r3,2
8111bbe0:	1c000043 	ldbu	r16,1(r3)
8111bbe4:	0039883a 	mov	fp,zero
8111bbe8:	003f8306 	br	8111b9f8 <__reset+0xfb0fb9f8>
8111bbec:	88800003 	ldbu	r2,0(r17)
8111bbf0:	00c01604 	movi	r3,88
8111bbf4:	108037cc 	andi	r2,r2,223
8111bbf8:	10c00a26 	beq	r2,r3,8111bc24 <_strtoll_r+0x2b4>
8111bbfc:	05000204 	movi	r20,8
8111bc00:	002f883a 	mov	r23,zero
8111bc04:	a027883a 	mov	r19,r20
8111bc08:	003f8006 	br	8111ba0c <__reset+0xfb0fba0c>
8111bc0c:	00800c04 	movi	r2,48
8111bc10:	80800e1e 	bne	r16,r2,8111bc4c <_strtoll_r+0x2dc>
8111bc14:	88800003 	ldbu	r2,0(r17)
8111bc18:	00c01604 	movi	r3,88
8111bc1c:	108037cc 	andi	r2,r2,223
8111bc20:	10c00a1e 	bne	r2,r3,8111bc4c <_strtoll_r+0x2dc>
8111bc24:	05000404 	movi	r20,16
8111bc28:	8c000043 	ldbu	r16,1(r17)
8111bc2c:	002f883a 	mov	r23,zero
8111bc30:	8c400084 	addi	r17,r17,2
8111bc34:	a027883a 	mov	r19,r20
8111bc38:	003f7406 	br	8111ba0c <__reset+0xfb0fba0c>
8111bc3c:	00e00034 	movhi	r3,32768
8111bc40:	18ffffc4 	addi	r3,r3,-1
8111bc44:	5005883a 	mov	r2,r10
8111bc48:	003fda06 	br	8111bbb4 <__reset+0xfb0fbbb4>
8111bc4c:	9829883a 	mov	r20,r19
8111bc50:	002f883a 	mov	r23,zero
8111bc54:	003f6d06 	br	8111ba0c <__reset+0xfb0fba0c>

8111bc58 <_strtoul_r>:
8111bc58:	00a04534 	movhi	r2,33044
8111bc5c:	defff604 	addi	sp,sp,-40
8111bc60:	10b3e204 	addi	r2,r2,-12408
8111bc64:	de00012e 	bgeu	sp,et,8111bc6c <_strtoul_r+0x14>
8111bc68:	003b68fa 	trap	3
8111bc6c:	dc800315 	stw	r18,12(sp)
8111bc70:	14800017 	ldw	r18,0(r2)
8111bc74:	dd400615 	stw	r21,24(sp)
8111bc78:	dd000515 	stw	r20,20(sp)
8111bc7c:	dcc00415 	stw	r19,16(sp)
8111bc80:	2029883a 	mov	r20,r4
8111bc84:	dfc00915 	stw	ra,36(sp)
8111bc88:	ddc00815 	stw	r23,32(sp)
8111bc8c:	dd800715 	stw	r22,28(sp)
8111bc90:	dc400215 	stw	r17,8(sp)
8111bc94:	dc000115 	stw	r16,4(sp)
8111bc98:	2827883a 	mov	r19,r5
8111bc9c:	382b883a 	mov	r21,r7
8111bca0:	2809883a 	mov	r4,r5
8111bca4:	24000003 	ldbu	r16,0(r4)
8111bca8:	24400044 	addi	r17,r4,1
8111bcac:	2007883a 	mov	r3,r4
8111bcb0:	9405883a 	add	r2,r18,r16
8111bcb4:	10800043 	ldbu	r2,1(r2)
8111bcb8:	8809883a 	mov	r4,r17
8111bcbc:	1080020c 	andi	r2,r2,8
8111bcc0:	103ff81e 	bne	r2,zero,8111bca4 <__reset+0xfb0fbca4>
8111bcc4:	00800b44 	movi	r2,45
8111bcc8:	80805326 	beq	r16,r2,8111be18 <_strtoul_r+0x1c0>
8111bccc:	00800ac4 	movi	r2,43
8111bcd0:	80805526 	beq	r16,r2,8111be28 <_strtoul_r+0x1d0>
8111bcd4:	002f883a 	mov	r23,zero
8111bcd8:	a8000f26 	beq	r21,zero,8111bd18 <_strtoul_r+0xc0>
8111bcdc:	00800404 	movi	r2,16
8111bce0:	a8805f26 	beq	r21,r2,8111be60 <_strtoul_r+0x208>
8111bce4:	013fffc4 	movi	r4,-1
8111bce8:	a80b883a 	mov	r5,r21
8111bcec:	d9800015 	stw	r6,0(sp)
8111bcf0:	1120ea40 	call	81120ea4 <__udivsi3>
8111bcf4:	a80b883a 	mov	r5,r21
8111bcf8:	013fffc4 	movi	r4,-1
8111bcfc:	102d883a 	mov	r22,r2
8111bd00:	1120f080 	call	81120f08 <__umodsi3>
8111bd04:	d9800017 	ldw	r6,0(sp)
8111bd08:	1019883a 	mov	r12,r2
8111bd0c:	a817883a 	mov	r11,r21
8111bd10:	b00f883a 	mov	r7,r22
8111bd14:	00000706 	br	8111bd34 <_strtoul_r+0xdc>
8111bd18:	00800c04 	movi	r2,48
8111bd1c:	80804626 	beq	r16,r2,8111be38 <_strtoul_r+0x1e0>
8111bd20:	05400284 	movi	r21,10
8111bd24:	01c666b4 	movhi	r7,6554
8111bd28:	03000144 	movi	r12,5
8111bd2c:	39e66644 	addi	r7,r7,-26215
8111bd30:	a817883a 	mov	r11,r21
8111bd34:	9407883a 	add	r3,r18,r16
8111bd38:	18c00043 	ldbu	r3,1(r3)
8111bd3c:	8809883a 	mov	r4,r17
8111bd40:	0011883a 	mov	r8,zero
8111bd44:	1940010c 	andi	r5,r3,4
8111bd48:	0005883a 	mov	r2,zero
8111bd4c:	02800044 	movi	r10,1
8111bd50:	027fffc4 	movi	r9,-1
8111bd54:	28000e26 	beq	r5,zero,8111bd90 <_strtoul_r+0x138>
8111bd58:	843ff404 	addi	r16,r16,-48
8111bd5c:	8540120e 	bge	r16,r21,8111bda8 <_strtoul_r+0x150>
8111bd60:	42400526 	beq	r8,r9,8111bd78 <_strtoul_r+0x120>
8111bd64:	38802236 	bltu	r7,r2,8111bdf0 <_strtoul_r+0x198>
8111bd68:	11c02026 	beq	r2,r7,8111bdec <_strtoul_r+0x194>
8111bd6c:	12c5383a 	mul	r2,r2,r11
8111bd70:	02000044 	movi	r8,1
8111bd74:	8085883a 	add	r2,r16,r2
8111bd78:	24000003 	ldbu	r16,0(r4)
8111bd7c:	21000044 	addi	r4,r4,1
8111bd80:	9407883a 	add	r3,r18,r16
8111bd84:	18c00043 	ldbu	r3,1(r3)
8111bd88:	1940010c 	andi	r5,r3,4
8111bd8c:	283ff21e 	bne	r5,zero,8111bd58 <__reset+0xfb0fbd58>
8111bd90:	18c000cc 	andi	r3,r3,3
8111bd94:	18000426 	beq	r3,zero,8111bda8 <_strtoul_r+0x150>
8111bd98:	1a801726 	beq	r3,r10,8111bdf8 <_strtoul_r+0x1a0>
8111bd9c:	00c015c4 	movi	r3,87
8111bda0:	80e1c83a 	sub	r16,r16,r3
8111bda4:	857fee16 	blt	r16,r21,8111bd60 <__reset+0xfb0fbd60>
8111bda8:	40001516 	blt	r8,zero,8111be00 <_strtoul_r+0x1a8>
8111bdac:	b8000126 	beq	r23,zero,8111bdb4 <_strtoul_r+0x15c>
8111bdb0:	0085c83a 	sub	r2,zero,r2
8111bdb4:	30000226 	beq	r6,zero,8111bdc0 <_strtoul_r+0x168>
8111bdb8:	4000151e 	bne	r8,zero,8111be10 <_strtoul_r+0x1b8>
8111bdbc:	34c00015 	stw	r19,0(r6)
8111bdc0:	dfc00917 	ldw	ra,36(sp)
8111bdc4:	ddc00817 	ldw	r23,32(sp)
8111bdc8:	dd800717 	ldw	r22,28(sp)
8111bdcc:	dd400617 	ldw	r21,24(sp)
8111bdd0:	dd000517 	ldw	r20,20(sp)
8111bdd4:	dcc00417 	ldw	r19,16(sp)
8111bdd8:	dc800317 	ldw	r18,12(sp)
8111bddc:	dc400217 	ldw	r17,8(sp)
8111bde0:	dc000117 	ldw	r16,4(sp)
8111bde4:	dec00a04 	addi	sp,sp,40
8111bde8:	f800283a 	ret
8111bdec:	643fdf0e 	bge	r12,r16,8111bd6c <__reset+0xfb0fbd6c>
8111bdf0:	023fffc4 	movi	r8,-1
8111bdf4:	003fe006 	br	8111bd78 <__reset+0xfb0fbd78>
8111bdf8:	00c00dc4 	movi	r3,55
8111bdfc:	003fe806 	br	8111bda0 <__reset+0xfb0fbda0>
8111be00:	00800884 	movi	r2,34
8111be04:	a0800015 	stw	r2,0(r20)
8111be08:	00bfffc4 	movi	r2,-1
8111be0c:	303fec26 	beq	r6,zero,8111bdc0 <__reset+0xfb0fbdc0>
8111be10:	24ffffc4 	addi	r19,r4,-1
8111be14:	003fe906 	br	8111bdbc <__reset+0xfb0fbdbc>
8111be18:	1c400084 	addi	r17,r3,2
8111be1c:	1c000043 	ldbu	r16,1(r3)
8111be20:	05c00044 	movi	r23,1
8111be24:	003fac06 	br	8111bcd8 <__reset+0xfb0fbcd8>
8111be28:	1c400084 	addi	r17,r3,2
8111be2c:	1c000043 	ldbu	r16,1(r3)
8111be30:	002f883a 	mov	r23,zero
8111be34:	003fa806 	br	8111bcd8 <__reset+0xfb0fbcd8>
8111be38:	88800003 	ldbu	r2,0(r17)
8111be3c:	00c01604 	movi	r3,88
8111be40:	108037cc 	andi	r2,r2,223
8111be44:	10c00c26 	beq	r2,r3,8111be78 <_strtoul_r+0x220>
8111be48:	05400204 	movi	r21,8
8111be4c:	01c80034 	movhi	r7,8192
8111be50:	030001c4 	movi	r12,7
8111be54:	39ffffc4 	addi	r7,r7,-1
8111be58:	a817883a 	mov	r11,r21
8111be5c:	003fb506 	br	8111bd34 <__reset+0xfb0fbd34>
8111be60:	00800c04 	movi	r2,48
8111be64:	80800c1e 	bne	r16,r2,8111be98 <_strtoul_r+0x240>
8111be68:	88800003 	ldbu	r2,0(r17)
8111be6c:	00c01604 	movi	r3,88
8111be70:	108037cc 	andi	r2,r2,223
8111be74:	10c0081e 	bne	r2,r3,8111be98 <_strtoul_r+0x240>
8111be78:	02c00404 	movi	r11,16
8111be7c:	05840034 	movhi	r22,4096
8111be80:	8c000043 	ldbu	r16,1(r17)
8111be84:	030003c4 	movi	r12,15
8111be88:	8c400084 	addi	r17,r17,2
8111be8c:	b5bfffc4 	addi	r22,r22,-1
8111be90:	582b883a 	mov	r21,r11
8111be94:	003f9e06 	br	8111bd10 <__reset+0xfb0fbd10>
8111be98:	01c40034 	movhi	r7,4096
8111be9c:	030003c4 	movi	r12,15
8111bea0:	39ffffc4 	addi	r7,r7,-1
8111bea4:	a817883a 	mov	r11,r21
8111bea8:	003fa206 	br	8111bd34 <__reset+0xfb0fbd34>

8111beac <strtoul>:
8111beac:	00a04534 	movhi	r2,33044
8111beb0:	10b3e404 	addi	r2,r2,-12400
8111beb4:	300f883a 	mov	r7,r6
8111beb8:	280d883a 	mov	r6,r5
8111bebc:	200b883a 	mov	r5,r4
8111bec0:	11000017 	ldw	r4,0(r2)
8111bec4:	111bc581 	jmpi	8111bc58 <_strtoul_r>

8111bec8 <_strtoull_r>:
8111bec8:	00a04534 	movhi	r2,33044
8111becc:	defff404 	addi	sp,sp,-48
8111bed0:	10b3e204 	addi	r2,r2,-12408
8111bed4:	de00012e 	bgeu	sp,et,8111bedc <_strtoull_r+0x14>
8111bed8:	003b68fa 	trap	3
8111bedc:	dc400315 	stw	r17,12(sp)
8111bee0:	14400017 	ldw	r17,0(r2)
8111bee4:	dd400715 	stw	r21,28(sp)
8111bee8:	dd000615 	stw	r20,24(sp)
8111beec:	dcc00515 	stw	r19,20(sp)
8111bef0:	dc800415 	stw	r18,16(sp)
8111bef4:	dfc00b15 	stw	ra,44(sp)
8111bef8:	df000a15 	stw	fp,40(sp)
8111befc:	ddc00915 	stw	r23,36(sp)
8111bf00:	dd800815 	stw	r22,32(sp)
8111bf04:	dc000215 	stw	r16,8(sp)
8111bf08:	2827883a 	mov	r19,r5
8111bf0c:	202b883a 	mov	r21,r4
8111bf10:	3029883a 	mov	r20,r6
8111bf14:	3825883a 	mov	r18,r7
8111bf18:	2807883a 	mov	r3,r5
8111bf1c:	1c000003 	ldbu	r16,0(r3)
8111bf20:	1f000044 	addi	fp,r3,1
8111bf24:	1809883a 	mov	r4,r3
8111bf28:	8c05883a 	add	r2,r17,r16
8111bf2c:	10800043 	ldbu	r2,1(r2)
8111bf30:	e007883a 	mov	r3,fp
8111bf34:	1080020c 	andi	r2,r2,8
8111bf38:	103ff81e 	bne	r2,zero,8111bf1c <__reset+0xfb0fbf1c>
8111bf3c:	00800b44 	movi	r2,45
8111bf40:	80806e26 	beq	r16,r2,8111c0fc <_strtoull_r+0x234>
8111bf44:	00800ac4 	movi	r2,43
8111bf48:	80807026 	beq	r16,r2,8111c10c <_strtoull_r+0x244>
8111bf4c:	002f883a 	mov	r23,zero
8111bf50:	90001426 	beq	r18,zero,8111bfa4 <_strtoull_r+0xdc>
8111bf54:	00800404 	movi	r2,16
8111bf58:	90807c26 	beq	r18,r2,8111c14c <_strtoull_r+0x284>
8111bf5c:	902dd7fa 	srai	r22,r18,31
8111bf60:	013fffc4 	movi	r4,-1
8111bf64:	200b883a 	mov	r5,r4
8111bf68:	900d883a 	mov	r6,r18
8111bf6c:	b00f883a 	mov	r7,r22
8111bf70:	11202ec0 	call	811202ec <__udivdi3>
8111bf74:	013fffc4 	movi	r4,-1
8111bf78:	900d883a 	mov	r6,r18
8111bf7c:	b00f883a 	mov	r7,r22
8111bf80:	200b883a 	mov	r5,r4
8111bf84:	d8c00115 	stw	r3,4(sp)
8111bf88:	d8800015 	stw	r2,0(sp)
8111bf8c:	112086c0 	call	8112086c <__umoddi3>
8111bf90:	101b883a 	mov	r13,r2
8111bf94:	9015883a 	mov	r10,r18
8111bf98:	dac00017 	ldw	r11,0(sp)
8111bf9c:	da000117 	ldw	r8,4(sp)
8111bfa0:	00000a06 	br	8111bfcc <_strtoull_r+0x104>
8111bfa4:	00800c04 	movi	r2,48
8111bfa8:	80805c26 	beq	r16,r2,8111c11c <_strtoull_r+0x254>
8111bfac:	02800284 	movi	r10,10
8111bfb0:	02e666b4 	movhi	r11,39322
8111bfb4:	020666b4 	movhi	r8,6554
8111bfb8:	03400144 	movi	r13,5
8111bfbc:	5ae66644 	addi	r11,r11,-26215
8111bfc0:	42266644 	addi	r8,r8,-26215
8111bfc4:	002d883a 	mov	r22,zero
8111bfc8:	5025883a 	mov	r18,r10
8111bfcc:	8c0b883a 	add	r5,r17,r16
8111bfd0:	29400043 	ldbu	r5,1(r5)
8111bfd4:	e009883a 	mov	r4,fp
8111bfd8:	000f883a 	mov	r7,zero
8111bfdc:	2980010c 	andi	r6,r5,4
8111bfe0:	0005883a 	mov	r2,zero
8111bfe4:	0007883a 	mov	r3,zero
8111bfe8:	03000044 	movi	r12,1
8111bfec:	027fffc4 	movi	r9,-1
8111bff0:	30000d26 	beq	r6,zero,8111c028 <_strtoull_r+0x160>
8111bff4:	843ff404 	addi	r16,r16,-48
8111bff8:	8480110e 	bge	r16,r18,8111c040 <_strtoull_r+0x178>
8111bffc:	3a400426 	beq	r7,r9,8111c010 <_strtoull_r+0x148>
8111c000:	40c00236 	bltu	r8,r3,8111c00c <_strtoull_r+0x144>
8111c004:	1a00231e 	bne	r3,r8,8111c094 <_strtoull_r+0x1cc>
8111c008:	5880222e 	bgeu	r11,r2,8111c094 <_strtoull_r+0x1cc>
8111c00c:	01ffffc4 	movi	r7,-1
8111c010:	24000003 	ldbu	r16,0(r4)
8111c014:	21000044 	addi	r4,r4,1
8111c018:	8c0b883a 	add	r5,r17,r16
8111c01c:	29400043 	ldbu	r5,1(r5)
8111c020:	2980010c 	andi	r6,r5,4
8111c024:	303ff31e 	bne	r6,zero,8111bff4 <__reset+0xfb0fbff4>
8111c028:	294000cc 	andi	r5,r5,3
8111c02c:	28000426 	beq	r5,zero,8111c040 <_strtoull_r+0x178>
8111c030:	2b002626 	beq	r5,r12,8111c0cc <_strtoull_r+0x204>
8111c034:	014015c4 	movi	r5,87
8111c038:	8161c83a 	sub	r16,r16,r5
8111c03c:	84bfef16 	blt	r16,r18,8111bffc <__reset+0xfb0fbffc>
8111c040:	38002716 	blt	r7,zero,8111c0e0 <_strtoull_r+0x218>
8111c044:	b8000426 	beq	r23,zero,8111c058 <_strtoull_r+0x190>
8111c048:	0085c83a 	sub	r2,zero,r2
8111c04c:	100ac03a 	cmpne	r5,r2,zero
8111c050:	00e1c83a 	sub	r16,zero,r3
8111c054:	8147c83a 	sub	r3,r16,r5
8111c058:	a0000226 	beq	r20,zero,8111c064 <_strtoull_r+0x19c>
8111c05c:	3800251e 	bne	r7,zero,8111c0f4 <_strtoull_r+0x22c>
8111c060:	a4c00015 	stw	r19,0(r20)
8111c064:	dfc00b17 	ldw	ra,44(sp)
8111c068:	df000a17 	ldw	fp,40(sp)
8111c06c:	ddc00917 	ldw	r23,36(sp)
8111c070:	dd800817 	ldw	r22,32(sp)
8111c074:	dd400717 	ldw	r21,28(sp)
8111c078:	dd000617 	ldw	r20,24(sp)
8111c07c:	dcc00517 	ldw	r19,20(sp)
8111c080:	dc800417 	ldw	r18,16(sp)
8111c084:	dc400317 	ldw	r17,12(sp)
8111c088:	dc000217 	ldw	r16,8(sp)
8111c08c:	dec00c04 	addi	sp,sp,48
8111c090:	f800283a 	ret
8111c094:	12c00f26 	beq	r2,r11,8111c0d4 <_strtoull_r+0x20c>
8111c098:	b08d383a 	mul	r6,r22,r2
8111c09c:	1a87383a 	mul	r3,r3,r10
8111c0a0:	128a383a 	mulxuu	r5,r2,r10
8111c0a4:	1285383a 	mul	r2,r2,r10
8111c0a8:	800fd7fa 	srai	r7,r16,31
8111c0ac:	1987883a 	add	r3,r3,r6
8111c0b0:	8085883a 	add	r2,r16,r2
8111c0b4:	1947883a 	add	r3,r3,r5
8111c0b8:	38c7883a 	add	r3,r7,r3
8111c0bc:	1421803a 	cmpltu	r16,r2,r16
8111c0c0:	80c7883a 	add	r3,r16,r3
8111c0c4:	01c00044 	movi	r7,1
8111c0c8:	003fd106 	br	8111c010 <__reset+0xfb0fc010>
8111c0cc:	01400dc4 	movi	r5,55
8111c0d0:	003fd906 	br	8111c038 <__reset+0xfb0fc038>
8111c0d4:	1a3ff01e 	bne	r3,r8,8111c098 <__reset+0xfb0fc098>
8111c0d8:	6c3fcc16 	blt	r13,r16,8111c00c <__reset+0xfb0fc00c>
8111c0dc:	003fee06 	br	8111c098 <__reset+0xfb0fc098>
8111c0e0:	00800884 	movi	r2,34
8111c0e4:	a8800015 	stw	r2,0(r21)
8111c0e8:	00bfffc4 	movi	r2,-1
8111c0ec:	1007883a 	mov	r3,r2
8111c0f0:	a03fdc26 	beq	r20,zero,8111c064 <__reset+0xfb0fc064>
8111c0f4:	24ffffc4 	addi	r19,r4,-1
8111c0f8:	003fd906 	br	8111c060 <__reset+0xfb0fc060>
8111c0fc:	27000084 	addi	fp,r4,2
8111c100:	24000043 	ldbu	r16,1(r4)
8111c104:	05c00044 	movi	r23,1
8111c108:	003f9106 	br	8111bf50 <__reset+0xfb0fbf50>
8111c10c:	27000084 	addi	fp,r4,2
8111c110:	24000043 	ldbu	r16,1(r4)
8111c114:	002f883a 	mov	r23,zero
8111c118:	003f8d06 	br	8111bf50 <__reset+0xfb0fbf50>
8111c11c:	e0800003 	ldbu	r2,0(fp)
8111c120:	00c01604 	movi	r3,88
8111c124:	108037cc 	andi	r2,r2,223
8111c128:	10c00e26 	beq	r2,r3,8111c164 <_strtoull_r+0x29c>
8111c12c:	02800204 	movi	r10,8
8111c130:	02ffffc4 	movi	r11,-1
8111c134:	02080034 	movhi	r8,8192
8111c138:	034001c4 	movi	r13,7
8111c13c:	42d1883a 	add	r8,r8,r11
8111c140:	002d883a 	mov	r22,zero
8111c144:	5025883a 	mov	r18,r10
8111c148:	003fa006 	br	8111bfcc <__reset+0xfb0fbfcc>
8111c14c:	00800c04 	movi	r2,48
8111c150:	80800e1e 	bne	r16,r2,8111c18c <_strtoull_r+0x2c4>
8111c154:	e0800003 	ldbu	r2,0(fp)
8111c158:	00c01604 	movi	r3,88
8111c15c:	108037cc 	andi	r2,r2,223
8111c160:	10c00a1e 	bne	r2,r3,8111c18c <_strtoull_r+0x2c4>
8111c164:	02800404 	movi	r10,16
8111c168:	02ffffc4 	movi	r11,-1
8111c16c:	02040034 	movhi	r8,4096
8111c170:	e4000043 	ldbu	r16,1(fp)
8111c174:	034003c4 	movi	r13,15
8111c178:	e7000084 	addi	fp,fp,2
8111c17c:	42d1883a 	add	r8,r8,r11
8111c180:	002d883a 	mov	r22,zero
8111c184:	5025883a 	mov	r18,r10
8111c188:	003f9006 	br	8111bfcc <__reset+0xfb0fbfcc>
8111c18c:	02ffffc4 	movi	r11,-1
8111c190:	02040034 	movhi	r8,4096
8111c194:	034003c4 	movi	r13,15
8111c198:	42d1883a 	add	r8,r8,r11
8111c19c:	9015883a 	mov	r10,r18
8111c1a0:	002d883a 	mov	r22,zero
8111c1a4:	003f8906 	br	8111bfcc <__reset+0xfb0fbfcc>

8111c1a8 <__ssprint_r>:
8111c1a8:	defff604 	addi	sp,sp,-40
8111c1ac:	de00012e 	bgeu	sp,et,8111c1b4 <__ssprint_r+0xc>
8111c1b0:	003b68fa 	trap	3
8111c1b4:	30800217 	ldw	r2,8(r6)
8111c1b8:	dc800215 	stw	r18,8(sp)
8111c1bc:	dfc00915 	stw	ra,36(sp)
8111c1c0:	df000815 	stw	fp,32(sp)
8111c1c4:	ddc00715 	stw	r23,28(sp)
8111c1c8:	dd800615 	stw	r22,24(sp)
8111c1cc:	dd400515 	stw	r21,20(sp)
8111c1d0:	dd000415 	stw	r20,16(sp)
8111c1d4:	dcc00315 	stw	r19,12(sp)
8111c1d8:	dc400115 	stw	r17,4(sp)
8111c1dc:	dc000015 	stw	r16,0(sp)
8111c1e0:	3025883a 	mov	r18,r6
8111c1e4:	10005826 	beq	r2,zero,8111c348 <__ssprint_r+0x1a0>
8111c1e8:	2027883a 	mov	r19,r4
8111c1ec:	35c00017 	ldw	r23,0(r6)
8111c1f0:	29000017 	ldw	r4,0(r5)
8111c1f4:	28800217 	ldw	r2,8(r5)
8111c1f8:	2823883a 	mov	r17,r5
8111c1fc:	0039883a 	mov	fp,zero
8111c200:	0021883a 	mov	r16,zero
8111c204:	80003926 	beq	r16,zero,8111c2ec <__ssprint_r+0x144>
8111c208:	102b883a 	mov	r21,r2
8111c20c:	102d883a 	mov	r22,r2
8111c210:	80803a36 	bltu	r16,r2,8111c2fc <__ssprint_r+0x154>
8111c214:	88c0030b 	ldhu	r3,12(r17)
8111c218:	1881200c 	andi	r2,r3,1152
8111c21c:	10002626 	beq	r2,zero,8111c2b8 <__ssprint_r+0x110>
8111c220:	88800517 	ldw	r2,20(r17)
8111c224:	89400417 	ldw	r5,16(r17)
8111c228:	81800044 	addi	r6,r16,1
8111c22c:	108f883a 	add	r7,r2,r2
8111c230:	3885883a 	add	r2,r7,r2
8111c234:	100ed7fa 	srli	r7,r2,31
8111c238:	216dc83a 	sub	r22,r4,r5
8111c23c:	3589883a 	add	r4,r6,r22
8111c240:	3885883a 	add	r2,r7,r2
8111c244:	102bd07a 	srai	r21,r2,1
8111c248:	a80d883a 	mov	r6,r21
8111c24c:	a900022e 	bgeu	r21,r4,8111c258 <__ssprint_r+0xb0>
8111c250:	202b883a 	mov	r21,r4
8111c254:	200d883a 	mov	r6,r4
8111c258:	18c1000c 	andi	r3,r3,1024
8111c25c:	18002a26 	beq	r3,zero,8111c308 <__ssprint_r+0x160>
8111c260:	300b883a 	mov	r5,r6
8111c264:	9809883a 	mov	r4,r19
8111c268:	110e0cc0 	call	8110e0cc <_malloc_r>
8111c26c:	1029883a 	mov	r20,r2
8111c270:	10002c26 	beq	r2,zero,8111c324 <__ssprint_r+0x17c>
8111c274:	89400417 	ldw	r5,16(r17)
8111c278:	b00d883a 	mov	r6,r22
8111c27c:	1009883a 	mov	r4,r2
8111c280:	110e8e00 	call	8110e8e0 <memcpy>
8111c284:	8880030b 	ldhu	r2,12(r17)
8111c288:	00fedfc4 	movi	r3,-1153
8111c28c:	10c4703a 	and	r2,r2,r3
8111c290:	10802014 	ori	r2,r2,128
8111c294:	8880030d 	sth	r2,12(r17)
8111c298:	a589883a 	add	r4,r20,r22
8111c29c:	adadc83a 	sub	r22,r21,r22
8111c2a0:	8d400515 	stw	r21,20(r17)
8111c2a4:	8d800215 	stw	r22,8(r17)
8111c2a8:	8d000415 	stw	r20,16(r17)
8111c2ac:	89000015 	stw	r4,0(r17)
8111c2b0:	802b883a 	mov	r21,r16
8111c2b4:	802d883a 	mov	r22,r16
8111c2b8:	b00d883a 	mov	r6,r22
8111c2bc:	e00b883a 	mov	r5,fp
8111c2c0:	11186b80 	call	811186b8 <memmove>
8111c2c4:	88800217 	ldw	r2,8(r17)
8111c2c8:	89000017 	ldw	r4,0(r17)
8111c2cc:	90c00217 	ldw	r3,8(r18)
8111c2d0:	1545c83a 	sub	r2,r2,r21
8111c2d4:	2589883a 	add	r4,r4,r22
8111c2d8:	88800215 	stw	r2,8(r17)
8111c2dc:	89000015 	stw	r4,0(r17)
8111c2e0:	1c21c83a 	sub	r16,r3,r16
8111c2e4:	94000215 	stw	r16,8(r18)
8111c2e8:	80001726 	beq	r16,zero,8111c348 <__ssprint_r+0x1a0>
8111c2ec:	bf000017 	ldw	fp,0(r23)
8111c2f0:	bc000117 	ldw	r16,4(r23)
8111c2f4:	bdc00204 	addi	r23,r23,8
8111c2f8:	003fc206 	br	8111c204 <__reset+0xfb0fc204>
8111c2fc:	802b883a 	mov	r21,r16
8111c300:	802d883a 	mov	r22,r16
8111c304:	003fec06 	br	8111c2b8 <__reset+0xfb0fc2b8>
8111c308:	9809883a 	mov	r4,r19
8111c30c:	1119a500 	call	81119a50 <_realloc_r>
8111c310:	1029883a 	mov	r20,r2
8111c314:	103fe01e 	bne	r2,zero,8111c298 <__reset+0xfb0fc298>
8111c318:	89400417 	ldw	r5,16(r17)
8111c31c:	9809883a 	mov	r4,r19
8111c320:	11178440 	call	81117844 <_free_r>
8111c324:	88c0030b 	ldhu	r3,12(r17)
8111c328:	00800304 	movi	r2,12
8111c32c:	98800015 	stw	r2,0(r19)
8111c330:	18c01014 	ori	r3,r3,64
8111c334:	88c0030d 	sth	r3,12(r17)
8111c338:	00bfffc4 	movi	r2,-1
8111c33c:	90000215 	stw	zero,8(r18)
8111c340:	90000115 	stw	zero,4(r18)
8111c344:	00000206 	br	8111c350 <__ssprint_r+0x1a8>
8111c348:	90000115 	stw	zero,4(r18)
8111c34c:	0005883a 	mov	r2,zero
8111c350:	dfc00917 	ldw	ra,36(sp)
8111c354:	df000817 	ldw	fp,32(sp)
8111c358:	ddc00717 	ldw	r23,28(sp)
8111c35c:	dd800617 	ldw	r22,24(sp)
8111c360:	dd400517 	ldw	r21,20(sp)
8111c364:	dd000417 	ldw	r20,16(sp)
8111c368:	dcc00317 	ldw	r19,12(sp)
8111c36c:	dc800217 	ldw	r18,8(sp)
8111c370:	dc400117 	ldw	r17,4(sp)
8111c374:	dc000017 	ldw	r16,0(sp)
8111c378:	dec00a04 	addi	sp,sp,40
8111c37c:	f800283a 	ret

8111c380 <___svfiprintf_internal_r>:
8111c380:	deffc804 	addi	sp,sp,-224
8111c384:	de00012e 	bgeu	sp,et,8111c38c <___svfiprintf_internal_r+0xc>
8111c388:	003b68fa 	trap	3
8111c38c:	2880030b 	ldhu	r2,12(r5)
8111c390:	dcc03115 	stw	r19,196(sp)
8111c394:	dfc03715 	stw	ra,220(sp)
8111c398:	df003615 	stw	fp,216(sp)
8111c39c:	ddc03515 	stw	r23,212(sp)
8111c3a0:	dd803415 	stw	r22,208(sp)
8111c3a4:	dd403315 	stw	r21,204(sp)
8111c3a8:	dd003215 	stw	r20,200(sp)
8111c3ac:	dc803015 	stw	r18,192(sp)
8111c3b0:	dc402f15 	stw	r17,188(sp)
8111c3b4:	dc002e15 	stw	r16,184(sp)
8111c3b8:	d9402715 	stw	r5,156(sp)
8111c3bc:	d9002a15 	stw	r4,168(sp)
8111c3c0:	1080200c 	andi	r2,r2,128
8111c3c4:	d9c02315 	stw	r7,140(sp)
8111c3c8:	3027883a 	mov	r19,r6
8111c3cc:	10000226 	beq	r2,zero,8111c3d8 <___svfiprintf_internal_r+0x58>
8111c3d0:	28800417 	ldw	r2,16(r5)
8111c3d4:	10041d26 	beq	r2,zero,8111d44c <___svfiprintf_internal_r+0x10cc>
8111c3d8:	dac01a04 	addi	r11,sp,104
8111c3dc:	dac01e15 	stw	r11,120(sp)
8111c3e0:	d8801e17 	ldw	r2,120(sp)
8111c3e4:	dac019c4 	addi	r11,sp,103
8111c3e8:	dd402a17 	ldw	r21,168(sp)
8111c3ec:	ddc02717 	ldw	r23,156(sp)
8111c3f0:	05a04534 	movhi	r22,33044
8111c3f4:	05204534 	movhi	r20,33044
8111c3f8:	dac01f15 	stw	r11,124(sp)
8111c3fc:	12d7c83a 	sub	r11,r2,r11
8111c400:	b5ab6a04 	addi	r22,r22,-21080
8111c404:	a52b6604 	addi	r20,r20,-21096
8111c408:	dec01a15 	stw	sp,104(sp)
8111c40c:	d8001c15 	stw	zero,112(sp)
8111c410:	d8001b15 	stw	zero,108(sp)
8111c414:	d811883a 	mov	r8,sp
8111c418:	d8002915 	stw	zero,164(sp)
8111c41c:	d8002515 	stw	zero,148(sp)
8111c420:	dac02b15 	stw	r11,172(sp)
8111c424:	98800007 	ldb	r2,0(r19)
8111c428:	1002dd26 	beq	r2,zero,8111cfa0 <___svfiprintf_internal_r+0xc20>
8111c42c:	00c00944 	movi	r3,37
8111c430:	9823883a 	mov	r17,r19
8111c434:	10c0021e 	bne	r2,r3,8111c440 <___svfiprintf_internal_r+0xc0>
8111c438:	00001406 	br	8111c48c <___svfiprintf_internal_r+0x10c>
8111c43c:	10c00326 	beq	r2,r3,8111c44c <___svfiprintf_internal_r+0xcc>
8111c440:	8c400044 	addi	r17,r17,1
8111c444:	88800007 	ldb	r2,0(r17)
8111c448:	103ffc1e 	bne	r2,zero,8111c43c <__reset+0xfb0fc43c>
8111c44c:	8ce1c83a 	sub	r16,r17,r19
8111c450:	80000e26 	beq	r16,zero,8111c48c <___svfiprintf_internal_r+0x10c>
8111c454:	d8c01c17 	ldw	r3,112(sp)
8111c458:	d8801b17 	ldw	r2,108(sp)
8111c45c:	44c00015 	stw	r19,0(r8)
8111c460:	1c07883a 	add	r3,r3,r16
8111c464:	10800044 	addi	r2,r2,1
8111c468:	d8c01c15 	stw	r3,112(sp)
8111c46c:	44000115 	stw	r16,4(r8)
8111c470:	d8801b15 	stw	r2,108(sp)
8111c474:	00c001c4 	movi	r3,7
8111c478:	18831e16 	blt	r3,r2,8111d0f4 <___svfiprintf_internal_r+0xd74>
8111c47c:	42000204 	addi	r8,r8,8
8111c480:	dac02517 	ldw	r11,148(sp)
8111c484:	5c17883a 	add	r11,r11,r16
8111c488:	dac02515 	stw	r11,148(sp)
8111c48c:	88800007 	ldb	r2,0(r17)
8111c490:	1002c526 	beq	r2,zero,8111cfa8 <___svfiprintf_internal_r+0xc28>
8111c494:	88c00047 	ldb	r3,1(r17)
8111c498:	8cc00044 	addi	r19,r17,1
8111c49c:	d8001d85 	stb	zero,118(sp)
8111c4a0:	0009883a 	mov	r4,zero
8111c4a4:	000f883a 	mov	r7,zero
8111c4a8:	043fffc4 	movi	r16,-1
8111c4ac:	d8002415 	stw	zero,144(sp)
8111c4b0:	0025883a 	mov	r18,zero
8111c4b4:	01401604 	movi	r5,88
8111c4b8:	01800244 	movi	r6,9
8111c4bc:	02800a84 	movi	r10,42
8111c4c0:	02401b04 	movi	r9,108
8111c4c4:	9cc00044 	addi	r19,r19,1
8111c4c8:	18bff804 	addi	r2,r3,-32
8111c4cc:	2881dd36 	bltu	r5,r2,8111cc44 <___svfiprintf_internal_r+0x8c4>
8111c4d0:	100490ba 	slli	r2,r2,2
8111c4d4:	02e044b4 	movhi	r11,33042
8111c4d8:	5af13a04 	addi	r11,r11,-15128
8111c4dc:	12c5883a 	add	r2,r2,r11
8111c4e0:	10800017 	ldw	r2,0(r2)
8111c4e4:	1000683a 	jmp	r2
8111c4e8:	8111c6e4 	muli	r4,r16,18203
8111c4ec:	8111cc44 	addi	r4,r16,18225
8111c4f0:	8111cc44 	addi	r4,r16,18225
8111c4f4:	8111c6d8 	cmpnei	r4,r16,18203
8111c4f8:	8111cc44 	addi	r4,r16,18225
8111c4fc:	8111cc44 	addi	r4,r16,18225
8111c500:	8111cc44 	addi	r4,r16,18225
8111c504:	8111cc44 	addi	r4,r16,18225
8111c508:	8111cc44 	addi	r4,r16,18225
8111c50c:	8111cc44 	addi	r4,r16,18225
8111c510:	8111c64c 	andi	r4,r16,18201
8111c514:	8111c828 	cmpgeui	r4,r16,18208
8111c518:	8111cc44 	addi	r4,r16,18225
8111c51c:	8111c678 	rdprs	r4,r16,18201
8111c520:	8111cc78 	rdprs	r4,r16,18225
8111c524:	8111cc44 	addi	r4,r16,18225
8111c528:	8111cc6c 	andhi	r4,r16,18225
8111c52c:	8111cc0c 	andi	r4,r16,18224
8111c530:	8111cc0c 	andi	r4,r16,18224
8111c534:	8111cc0c 	andi	r4,r16,18224
8111c538:	8111cc0c 	andi	r4,r16,18224
8111c53c:	8111cc0c 	andi	r4,r16,18224
8111c540:	8111cc0c 	andi	r4,r16,18224
8111c544:	8111cc0c 	andi	r4,r16,18224
8111c548:	8111cc0c 	andi	r4,r16,18224
8111c54c:	8111cc0c 	andi	r4,r16,18224
8111c550:	8111cc44 	addi	r4,r16,18225
8111c554:	8111cc44 	addi	r4,r16,18225
8111c558:	8111cc44 	addi	r4,r16,18225
8111c55c:	8111cc44 	addi	r4,r16,18225
8111c560:	8111cc44 	addi	r4,r16,18225
8111c564:	8111cc44 	addi	r4,r16,18225
8111c568:	8111cc44 	addi	r4,r16,18225
8111c56c:	8111cc44 	addi	r4,r16,18225
8111c570:	8111cc44 	addi	r4,r16,18225
8111c574:	8111cc44 	addi	r4,r16,18225
8111c578:	8111cba8 	cmpgeui	r4,r16,18222
8111c57c:	8111cc44 	addi	r4,r16,18225
8111c580:	8111cc44 	addi	r4,r16,18225
8111c584:	8111cc44 	addi	r4,r16,18225
8111c588:	8111cc44 	addi	r4,r16,18225
8111c58c:	8111cc44 	addi	r4,r16,18225
8111c590:	8111cc44 	addi	r4,r16,18225
8111c594:	8111cc44 	addi	r4,r16,18225
8111c598:	8111cc44 	addi	r4,r16,18225
8111c59c:	8111cc44 	addi	r4,r16,18225
8111c5a0:	8111cc44 	addi	r4,r16,18225
8111c5a4:	8111cd20 	cmpeqi	r4,r16,18228
8111c5a8:	8111cc44 	addi	r4,r16,18225
8111c5ac:	8111cc44 	addi	r4,r16,18225
8111c5b0:	8111cc44 	addi	r4,r16,18225
8111c5b4:	8111cc44 	addi	r4,r16,18225
8111c5b8:	8111cc44 	addi	r4,r16,18225
8111c5bc:	8111ccb8 	rdprs	r4,r16,18226
8111c5c0:	8111cc44 	addi	r4,r16,18225
8111c5c4:	8111cc44 	addi	r4,r16,18225
8111c5c8:	8111c9ec 	andhi	r4,r16,18215
8111c5cc:	8111cc44 	addi	r4,r16,18225
8111c5d0:	8111cc44 	addi	r4,r16,18225
8111c5d4:	8111cc44 	addi	r4,r16,18225
8111c5d8:	8111cc44 	addi	r4,r16,18225
8111c5dc:	8111cc44 	addi	r4,r16,18225
8111c5e0:	8111cc44 	addi	r4,r16,18225
8111c5e4:	8111cc44 	addi	r4,r16,18225
8111c5e8:	8111cc44 	addi	r4,r16,18225
8111c5ec:	8111cc44 	addi	r4,r16,18225
8111c5f0:	8111cc44 	addi	r4,r16,18225
8111c5f4:	8111c8dc 	xori	r4,r16,18211
8111c5f8:	8111ca88 	cmpgei	r4,r16,18218
8111c5fc:	8111cc44 	addi	r4,r16,18225
8111c600:	8111cc44 	addi	r4,r16,18225
8111c604:	8111cc44 	addi	r4,r16,18225
8111c608:	8111ca7c 	xorhi	r4,r16,18217
8111c60c:	8111ca88 	cmpgei	r4,r16,18218
8111c610:	8111cc44 	addi	r4,r16,18225
8111c614:	8111cc44 	addi	r4,r16,18225
8111c618:	8111ca6c 	andhi	r4,r16,18217
8111c61c:	8111cc44 	addi	r4,r16,18225
8111c620:	8111ca30 	cmpltui	r4,r16,18216
8111c624:	8111c838 	rdprs	r4,r16,18208
8111c628:	8111c684 	addi	r4,r16,18202
8111c62c:	8111cb9c 	xori	r4,r16,18222
8111c630:	8111cc44 	addi	r4,r16,18225
8111c634:	8111cb50 	cmplti	r4,r16,18221
8111c638:	8111cc44 	addi	r4,r16,18225
8111c63c:	8111c7a8 	cmpgeui	r4,r16,18206
8111c640:	8111cc44 	addi	r4,r16,18225
8111c644:	8111cc44 	addi	r4,r16,18225
8111c648:	8111c704 	addi	r4,r16,18204
8111c64c:	dac02317 	ldw	r11,140(sp)
8111c650:	5ac00017 	ldw	r11,0(r11)
8111c654:	dac02415 	stw	r11,144(sp)
8111c658:	dac02317 	ldw	r11,140(sp)
8111c65c:	58800104 	addi	r2,r11,4
8111c660:	dac02417 	ldw	r11,144(sp)
8111c664:	5802e90e 	bge	r11,zero,8111d20c <___svfiprintf_internal_r+0xe8c>
8111c668:	dac02417 	ldw	r11,144(sp)
8111c66c:	d8802315 	stw	r2,140(sp)
8111c670:	02d7c83a 	sub	r11,zero,r11
8111c674:	dac02415 	stw	r11,144(sp)
8111c678:	94800114 	ori	r18,r18,4
8111c67c:	98c00007 	ldb	r3,0(r19)
8111c680:	003f9006 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111c684:	00800c04 	movi	r2,48
8111c688:	dac02317 	ldw	r11,140(sp)
8111c68c:	d8801d05 	stb	r2,116(sp)
8111c690:	00801e04 	movi	r2,120
8111c694:	d8801d45 	stb	r2,117(sp)
8111c698:	d8001d85 	stb	zero,118(sp)
8111c69c:	58c00104 	addi	r3,r11,4
8111c6a0:	5f000017 	ldw	fp,0(r11)
8111c6a4:	0013883a 	mov	r9,zero
8111c6a8:	90800094 	ori	r2,r18,2
8111c6ac:	80032b16 	blt	r16,zero,8111d35c <___svfiprintf_internal_r+0xfdc>
8111c6b0:	00bfdfc4 	movi	r2,-129
8111c6b4:	90a4703a 	and	r18,r18,r2
8111c6b8:	d8c02315 	stw	r3,140(sp)
8111c6bc:	94800094 	ori	r18,r18,2
8111c6c0:	e002dc26 	beq	fp,zero,8111d234 <___svfiprintf_internal_r+0xeb4>
8111c6c4:	01204534 	movhi	r4,33044
8111c6c8:	212adc04 	addi	r4,r4,-21648
8111c6cc:	0015883a 	mov	r10,zero
8111c6d0:	d9002915 	stw	r4,164(sp)
8111c6d4:	00002306 	br	8111c764 <___svfiprintf_internal_r+0x3e4>
8111c6d8:	94800054 	ori	r18,r18,1
8111c6dc:	98c00007 	ldb	r3,0(r19)
8111c6e0:	003f7806 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111c6e4:	38803fcc 	andi	r2,r7,255
8111c6e8:	1080201c 	xori	r2,r2,128
8111c6ec:	10bfe004 	addi	r2,r2,-128
8111c6f0:	1002f31e 	bne	r2,zero,8111d2c0 <___svfiprintf_internal_r+0xf40>
8111c6f4:	01000044 	movi	r4,1
8111c6f8:	01c00804 	movi	r7,32
8111c6fc:	98c00007 	ldb	r3,0(r19)
8111c700:	003f7006 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111c704:	21003fcc 	andi	r4,r4,255
8111c708:	2003aa1e 	bne	r4,zero,8111d5b4 <___svfiprintf_internal_r+0x1234>
8111c70c:	00a04534 	movhi	r2,33044
8111c710:	10aadc04 	addi	r2,r2,-21648
8111c714:	d8802915 	stw	r2,164(sp)
8111c718:	9080080c 	andi	r2,r18,32
8111c71c:	1000ba26 	beq	r2,zero,8111ca08 <___svfiprintf_internal_r+0x688>
8111c720:	dac02317 	ldw	r11,140(sp)
8111c724:	5f000017 	ldw	fp,0(r11)
8111c728:	5a400117 	ldw	r9,4(r11)
8111c72c:	5ac00204 	addi	r11,r11,8
8111c730:	dac02315 	stw	r11,140(sp)
8111c734:	9080004c 	andi	r2,r18,1
8111c738:	10029026 	beq	r2,zero,8111d17c <___svfiprintf_internal_r+0xdfc>
8111c73c:	e244b03a 	or	r2,fp,r9
8111c740:	1002d41e 	bne	r2,zero,8111d294 <___svfiprintf_internal_r+0xf14>
8111c744:	d8001d85 	stb	zero,118(sp)
8111c748:	80030b16 	blt	r16,zero,8111d378 <___svfiprintf_internal_r+0xff8>
8111c74c:	00bfdfc4 	movi	r2,-129
8111c750:	90a4703a 	and	r18,r18,r2
8111c754:	0015883a 	mov	r10,zero
8111c758:	80002426 	beq	r16,zero,8111c7ec <___svfiprintf_internal_r+0x46c>
8111c75c:	0039883a 	mov	fp,zero
8111c760:	0013883a 	mov	r9,zero
8111c764:	d9002917 	ldw	r4,164(sp)
8111c768:	dc401a04 	addi	r17,sp,104
8111c76c:	e08003cc 	andi	r2,fp,15
8111c770:	4806973a 	slli	r3,r9,28
8111c774:	2085883a 	add	r2,r4,r2
8111c778:	e038d13a 	srli	fp,fp,4
8111c77c:	10800003 	ldbu	r2,0(r2)
8111c780:	4812d13a 	srli	r9,r9,4
8111c784:	8c7fffc4 	addi	r17,r17,-1
8111c788:	1f38b03a 	or	fp,r3,fp
8111c78c:	88800005 	stb	r2,0(r17)
8111c790:	e244b03a 	or	r2,fp,r9
8111c794:	103ff51e 	bne	r2,zero,8111c76c <__reset+0xfb0fc76c>
8111c798:	dac01e17 	ldw	r11,120(sp)
8111c79c:	5c57c83a 	sub	r11,r11,r17
8111c7a0:	dac02115 	stw	r11,132(sp)
8111c7a4:	00001406 	br	8111c7f8 <___svfiprintf_internal_r+0x478>
8111c7a8:	21003fcc 	andi	r4,r4,255
8111c7ac:	2003741e 	bne	r4,zero,8111d580 <___svfiprintf_internal_r+0x1200>
8111c7b0:	9080080c 	andi	r2,r18,32
8111c7b4:	10014526 	beq	r2,zero,8111cccc <___svfiprintf_internal_r+0x94c>
8111c7b8:	dac02317 	ldw	r11,140(sp)
8111c7bc:	d8001d85 	stb	zero,118(sp)
8111c7c0:	58c00204 	addi	r3,r11,8
8111c7c4:	5f000017 	ldw	fp,0(r11)
8111c7c8:	5a400117 	ldw	r9,4(r11)
8111c7cc:	8002d916 	blt	r16,zero,8111d334 <___svfiprintf_internal_r+0xfb4>
8111c7d0:	013fdfc4 	movi	r4,-129
8111c7d4:	e244b03a 	or	r2,fp,r9
8111c7d8:	d8c02315 	stw	r3,140(sp)
8111c7dc:	9124703a 	and	r18,r18,r4
8111c7e0:	0015883a 	mov	r10,zero
8111c7e4:	1000b91e 	bne	r2,zero,8111cacc <___svfiprintf_internal_r+0x74c>
8111c7e8:	8002e61e 	bne	r16,zero,8111d384 <___svfiprintf_internal_r+0x1004>
8111c7ec:	0021883a 	mov	r16,zero
8111c7f0:	d8002115 	stw	zero,132(sp)
8111c7f4:	dc401a04 	addi	r17,sp,104
8111c7f8:	d8c02117 	ldw	r3,132(sp)
8111c7fc:	dc002015 	stw	r16,128(sp)
8111c800:	80c0010e 	bge	r16,r3,8111c808 <___svfiprintf_internal_r+0x488>
8111c804:	d8c02015 	stw	r3,128(sp)
8111c808:	52803fcc 	andi	r10,r10,255
8111c80c:	5280201c 	xori	r10,r10,128
8111c810:	52bfe004 	addi	r10,r10,-128
8111c814:	50003c26 	beq	r10,zero,8111c908 <___svfiprintf_internal_r+0x588>
8111c818:	dac02017 	ldw	r11,128(sp)
8111c81c:	5ac00044 	addi	r11,r11,1
8111c820:	dac02015 	stw	r11,128(sp)
8111c824:	00003806 	br	8111c908 <___svfiprintf_internal_r+0x588>
8111c828:	01000044 	movi	r4,1
8111c82c:	01c00ac4 	movi	r7,43
8111c830:	98c00007 	ldb	r3,0(r19)
8111c834:	003f2306 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111c838:	21003fcc 	andi	r4,r4,255
8111c83c:	2003481e 	bne	r4,zero,8111d560 <___svfiprintf_internal_r+0x11e0>
8111c840:	9080080c 	andi	r2,r18,32
8111c844:	10013b26 	beq	r2,zero,8111cd34 <___svfiprintf_internal_r+0x9b4>
8111c848:	dac02317 	ldw	r11,140(sp)
8111c84c:	d8001d85 	stb	zero,118(sp)
8111c850:	58800204 	addi	r2,r11,8
8111c854:	5f000017 	ldw	fp,0(r11)
8111c858:	5a400117 	ldw	r9,4(r11)
8111c85c:	8002a816 	blt	r16,zero,8111d300 <___svfiprintf_internal_r+0xf80>
8111c860:	013fdfc4 	movi	r4,-129
8111c864:	e246b03a 	or	r3,fp,r9
8111c868:	d8802315 	stw	r2,140(sp)
8111c86c:	9124703a 	and	r18,r18,r4
8111c870:	18013c26 	beq	r3,zero,8111cd64 <___svfiprintf_internal_r+0x9e4>
8111c874:	0015883a 	mov	r10,zero
8111c878:	dc401a04 	addi	r17,sp,104
8111c87c:	e006d0fa 	srli	r3,fp,3
8111c880:	4808977a 	slli	r4,r9,29
8111c884:	4812d0fa 	srli	r9,r9,3
8111c888:	e70001cc 	andi	fp,fp,7
8111c88c:	e0800c04 	addi	r2,fp,48
8111c890:	8c7fffc4 	addi	r17,r17,-1
8111c894:	20f8b03a 	or	fp,r4,r3
8111c898:	88800005 	stb	r2,0(r17)
8111c89c:	e246b03a 	or	r3,fp,r9
8111c8a0:	183ff61e 	bne	r3,zero,8111c87c <__reset+0xfb0fc87c>
8111c8a4:	90c0004c 	andi	r3,r18,1
8111c8a8:	1800a526 	beq	r3,zero,8111cb40 <___svfiprintf_internal_r+0x7c0>
8111c8ac:	10803fcc 	andi	r2,r2,255
8111c8b0:	1080201c 	xori	r2,r2,128
8111c8b4:	10bfe004 	addi	r2,r2,-128
8111c8b8:	00c00c04 	movi	r3,48
8111c8bc:	10ffb626 	beq	r2,r3,8111c798 <__reset+0xfb0fc798>
8111c8c0:	88ffffc5 	stb	r3,-1(r17)
8111c8c4:	d8c01e17 	ldw	r3,120(sp)
8111c8c8:	88bfffc4 	addi	r2,r17,-1
8111c8cc:	1023883a 	mov	r17,r2
8111c8d0:	1887c83a 	sub	r3,r3,r2
8111c8d4:	d8c02115 	stw	r3,132(sp)
8111c8d8:	003fc706 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111c8dc:	dac02317 	ldw	r11,140(sp)
8111c8e0:	00c00044 	movi	r3,1
8111c8e4:	d8c02015 	stw	r3,128(sp)
8111c8e8:	58800017 	ldw	r2,0(r11)
8111c8ec:	5ac00104 	addi	r11,r11,4
8111c8f0:	d8001d85 	stb	zero,118(sp)
8111c8f4:	d8801005 	stb	r2,64(sp)
8111c8f8:	dac02315 	stw	r11,140(sp)
8111c8fc:	d8c02115 	stw	r3,132(sp)
8111c900:	dc401004 	addi	r17,sp,64
8111c904:	0021883a 	mov	r16,zero
8111c908:	90c0008c 	andi	r3,r18,2
8111c90c:	d8c02215 	stw	r3,136(sp)
8111c910:	18000326 	beq	r3,zero,8111c920 <___svfiprintf_internal_r+0x5a0>
8111c914:	dac02017 	ldw	r11,128(sp)
8111c918:	5ac00084 	addi	r11,r11,2
8111c91c:	dac02015 	stw	r11,128(sp)
8111c920:	90c0210c 	andi	r3,r18,132
8111c924:	d8c02615 	stw	r3,152(sp)
8111c928:	1801131e 	bne	r3,zero,8111cd78 <___svfiprintf_internal_r+0x9f8>
8111c92c:	dac02417 	ldw	r11,144(sp)
8111c930:	d8c02017 	ldw	r3,128(sp)
8111c934:	58f9c83a 	sub	fp,r11,r3
8111c938:	07010f0e 	bge	zero,fp,8111cd78 <___svfiprintf_internal_r+0x9f8>
8111c93c:	02400404 	movi	r9,16
8111c940:	d8c01c17 	ldw	r3,112(sp)
8111c944:	d8801b17 	ldw	r2,108(sp)
8111c948:	4f02d60e 	bge	r9,fp,8111d4a4 <___svfiprintf_internal_r+0x1124>
8111c94c:	01604534 	movhi	r5,33044
8111c950:	296b6a04 	addi	r5,r5,-21080
8111c954:	d9402815 	stw	r5,160(sp)
8111c958:	028001c4 	movi	r10,7
8111c95c:	00000306 	br	8111c96c <___svfiprintf_internal_r+0x5ec>
8111c960:	e73ffc04 	addi	fp,fp,-16
8111c964:	42000204 	addi	r8,r8,8
8111c968:	4f00150e 	bge	r9,fp,8111c9c0 <___svfiprintf_internal_r+0x640>
8111c96c:	18c00404 	addi	r3,r3,16
8111c970:	10800044 	addi	r2,r2,1
8111c974:	45800015 	stw	r22,0(r8)
8111c978:	42400115 	stw	r9,4(r8)
8111c97c:	d8c01c15 	stw	r3,112(sp)
8111c980:	d8801b15 	stw	r2,108(sp)
8111c984:	50bff60e 	bge	r10,r2,8111c960 <__reset+0xfb0fc960>
8111c988:	d9801a04 	addi	r6,sp,104
8111c98c:	b80b883a 	mov	r5,r23
8111c990:	a809883a 	mov	r4,r21
8111c994:	da402c15 	stw	r9,176(sp)
8111c998:	da802d15 	stw	r10,180(sp)
8111c99c:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111c9a0:	da402c17 	ldw	r9,176(sp)
8111c9a4:	da802d17 	ldw	r10,180(sp)
8111c9a8:	1001851e 	bne	r2,zero,8111cfc0 <___svfiprintf_internal_r+0xc40>
8111c9ac:	e73ffc04 	addi	fp,fp,-16
8111c9b0:	d8c01c17 	ldw	r3,112(sp)
8111c9b4:	d8801b17 	ldw	r2,108(sp)
8111c9b8:	d811883a 	mov	r8,sp
8111c9bc:	4f3feb16 	blt	r9,fp,8111c96c <__reset+0xfb0fc96c>
8111c9c0:	dac02817 	ldw	r11,160(sp)
8111c9c4:	e0c7883a 	add	r3,fp,r3
8111c9c8:	10800044 	addi	r2,r2,1
8111c9cc:	42c00015 	stw	r11,0(r8)
8111c9d0:	47000115 	stw	fp,4(r8)
8111c9d4:	d8c01c15 	stw	r3,112(sp)
8111c9d8:	d8801b15 	stw	r2,108(sp)
8111c9dc:	010001c4 	movi	r4,7
8111c9e0:	2081ee16 	blt	r4,r2,8111d19c <___svfiprintf_internal_r+0xe1c>
8111c9e4:	42000204 	addi	r8,r8,8
8111c9e8:	0000e506 	br	8111cd80 <___svfiprintf_internal_r+0xa00>
8111c9ec:	21003fcc 	andi	r4,r4,255
8111c9f0:	2002dd1e 	bne	r4,zero,8111d568 <___svfiprintf_internal_r+0x11e8>
8111c9f4:	00a04534 	movhi	r2,33044
8111c9f8:	10aad704 	addi	r2,r2,-21668
8111c9fc:	d8802915 	stw	r2,164(sp)
8111ca00:	9080080c 	andi	r2,r18,32
8111ca04:	103f461e 	bne	r2,zero,8111c720 <__reset+0xfb0fc720>
8111ca08:	9080040c 	andi	r2,r18,16
8111ca0c:	10022e1e 	bne	r2,zero,8111d2c8 <___svfiprintf_internal_r+0xf48>
8111ca10:	9080100c 	andi	r2,r18,64
8111ca14:	dac02317 	ldw	r11,140(sp)
8111ca18:	10027326 	beq	r2,zero,8111d3e8 <___svfiprintf_internal_r+0x1068>
8111ca1c:	5f00000b 	ldhu	fp,0(r11)
8111ca20:	5ac00104 	addi	r11,r11,4
8111ca24:	0013883a 	mov	r9,zero
8111ca28:	dac02315 	stw	r11,140(sp)
8111ca2c:	003f4106 	br	8111c734 <__reset+0xfb0fc734>
8111ca30:	21003fcc 	andi	r4,r4,255
8111ca34:	2002e11e 	bne	r4,zero,8111d5bc <___svfiprintf_internal_r+0x123c>
8111ca38:	9080080c 	andi	r2,r18,32
8111ca3c:	1002011e 	bne	r2,zero,8111d244 <___svfiprintf_internal_r+0xec4>
8111ca40:	9080040c 	andi	r2,r18,16
8111ca44:	10023e1e 	bne	r2,zero,8111d340 <___svfiprintf_internal_r+0xfc0>
8111ca48:	9480100c 	andi	r18,r18,64
8111ca4c:	90023c26 	beq	r18,zero,8111d340 <___svfiprintf_internal_r+0xfc0>
8111ca50:	dac02317 	ldw	r11,140(sp)
8111ca54:	58800017 	ldw	r2,0(r11)
8111ca58:	5ac00104 	addi	r11,r11,4
8111ca5c:	dac02315 	stw	r11,140(sp)
8111ca60:	dac02517 	ldw	r11,148(sp)
8111ca64:	12c0000d 	sth	r11,0(r2)
8111ca68:	003e6e06 	br	8111c424 <__reset+0xfb0fc424>
8111ca6c:	98c00007 	ldb	r3,0(r19)
8111ca70:	1a422926 	beq	r3,r9,8111d318 <___svfiprintf_internal_r+0xf98>
8111ca74:	94800414 	ori	r18,r18,16
8111ca78:	003e9206 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111ca7c:	94801014 	ori	r18,r18,64
8111ca80:	98c00007 	ldb	r3,0(r19)
8111ca84:	003e8f06 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111ca88:	21003fcc 	andi	r4,r4,255
8111ca8c:	2002c71e 	bne	r4,zero,8111d5ac <___svfiprintf_internal_r+0x122c>
8111ca90:	9080080c 	andi	r2,r18,32
8111ca94:	10004926 	beq	r2,zero,8111cbbc <___svfiprintf_internal_r+0x83c>
8111ca98:	dac02317 	ldw	r11,140(sp)
8111ca9c:	58800117 	ldw	r2,4(r11)
8111caa0:	5f000017 	ldw	fp,0(r11)
8111caa4:	5ac00204 	addi	r11,r11,8
8111caa8:	dac02315 	stw	r11,140(sp)
8111caac:	1013883a 	mov	r9,r2
8111cab0:	10004b16 	blt	r2,zero,8111cbe0 <___svfiprintf_internal_r+0x860>
8111cab4:	da801d83 	ldbu	r10,118(sp)
8111cab8:	8001cb16 	blt	r16,zero,8111d1e8 <___svfiprintf_internal_r+0xe68>
8111cabc:	00ffdfc4 	movi	r3,-129
8111cac0:	e244b03a 	or	r2,fp,r9
8111cac4:	90e4703a 	and	r18,r18,r3
8111cac8:	103f4726 	beq	r2,zero,8111c7e8 <__reset+0xfb0fc7e8>
8111cacc:	48008c26 	beq	r9,zero,8111cd00 <___svfiprintf_internal_r+0x980>
8111cad0:	dc802015 	stw	r18,128(sp)
8111cad4:	dc002115 	stw	r16,132(sp)
8111cad8:	dc401a04 	addi	r17,sp,104
8111cadc:	e021883a 	mov	r16,fp
8111cae0:	da002215 	stw	r8,136(sp)
8111cae4:	5039883a 	mov	fp,r10
8111cae8:	4825883a 	mov	r18,r9
8111caec:	8009883a 	mov	r4,r16
8111caf0:	900b883a 	mov	r5,r18
8111caf4:	01800284 	movi	r6,10
8111caf8:	000f883a 	mov	r7,zero
8111cafc:	112086c0 	call	8112086c <__umoddi3>
8111cb00:	10800c04 	addi	r2,r2,48
8111cb04:	8c7fffc4 	addi	r17,r17,-1
8111cb08:	8009883a 	mov	r4,r16
8111cb0c:	900b883a 	mov	r5,r18
8111cb10:	88800005 	stb	r2,0(r17)
8111cb14:	01800284 	movi	r6,10
8111cb18:	000f883a 	mov	r7,zero
8111cb1c:	11202ec0 	call	811202ec <__udivdi3>
8111cb20:	1021883a 	mov	r16,r2
8111cb24:	10c4b03a 	or	r2,r2,r3
8111cb28:	1825883a 	mov	r18,r3
8111cb2c:	103fef1e 	bne	r2,zero,8111caec <__reset+0xfb0fcaec>
8111cb30:	dc802017 	ldw	r18,128(sp)
8111cb34:	dc002117 	ldw	r16,132(sp)
8111cb38:	da002217 	ldw	r8,136(sp)
8111cb3c:	e015883a 	mov	r10,fp
8111cb40:	d8c01e17 	ldw	r3,120(sp)
8111cb44:	1c47c83a 	sub	r3,r3,r17
8111cb48:	d8c02115 	stw	r3,132(sp)
8111cb4c:	003f2a06 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111cb50:	dac02317 	ldw	r11,140(sp)
8111cb54:	d8001d85 	stb	zero,118(sp)
8111cb58:	5c400017 	ldw	r17,0(r11)
8111cb5c:	5f000104 	addi	fp,r11,4
8111cb60:	88022f26 	beq	r17,zero,8111d420 <___svfiprintf_internal_r+0x10a0>
8111cb64:	80022516 	blt	r16,zero,8111d3fc <___svfiprintf_internal_r+0x107c>
8111cb68:	800d883a 	mov	r6,r16
8111cb6c:	000b883a 	mov	r5,zero
8111cb70:	8809883a 	mov	r4,r17
8111cb74:	da002c15 	stw	r8,176(sp)
8111cb78:	11185d40 	call	811185d4 <memchr>
8111cb7c:	da002c17 	ldw	r8,176(sp)
8111cb80:	10026426 	beq	r2,zero,8111d514 <___svfiprintf_internal_r+0x1194>
8111cb84:	1445c83a 	sub	r2,r2,r17
8111cb88:	d8802115 	stw	r2,132(sp)
8111cb8c:	da801d83 	ldbu	r10,118(sp)
8111cb90:	df002315 	stw	fp,140(sp)
8111cb94:	0021883a 	mov	r16,zero
8111cb98:	003f1706 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111cb9c:	94800814 	ori	r18,r18,32
8111cba0:	98c00007 	ldb	r3,0(r19)
8111cba4:	003e4706 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111cba8:	21003fcc 	andi	r4,r4,255
8111cbac:	2002701e 	bne	r4,zero,8111d570 <___svfiprintf_internal_r+0x11f0>
8111cbb0:	94800414 	ori	r18,r18,16
8111cbb4:	9080080c 	andi	r2,r18,32
8111cbb8:	103fb71e 	bne	r2,zero,8111ca98 <__reset+0xfb0fca98>
8111cbbc:	9080040c 	andi	r2,r18,16
8111cbc0:	1001ab26 	beq	r2,zero,8111d270 <___svfiprintf_internal_r+0xef0>
8111cbc4:	dac02317 	ldw	r11,140(sp)
8111cbc8:	5f000017 	ldw	fp,0(r11)
8111cbcc:	5ac00104 	addi	r11,r11,4
8111cbd0:	dac02315 	stw	r11,140(sp)
8111cbd4:	e013d7fa 	srai	r9,fp,31
8111cbd8:	4805883a 	mov	r2,r9
8111cbdc:	103fb50e 	bge	r2,zero,8111cab4 <__reset+0xfb0fcab4>
8111cbe0:	0739c83a 	sub	fp,zero,fp
8111cbe4:	02800b44 	movi	r10,45
8111cbe8:	e004c03a 	cmpne	r2,fp,zero
8111cbec:	0253c83a 	sub	r9,zero,r9
8111cbf0:	da801d85 	stb	r10,118(sp)
8111cbf4:	4893c83a 	sub	r9,r9,r2
8111cbf8:	80023016 	blt	r16,zero,8111d4bc <___svfiprintf_internal_r+0x113c>
8111cbfc:	00bfdfc4 	movi	r2,-129
8111cc00:	90a4703a 	and	r18,r18,r2
8111cc04:	483fb21e 	bne	r9,zero,8111cad0 <__reset+0xfb0fcad0>
8111cc08:	00003d06 	br	8111cd00 <___svfiprintf_internal_r+0x980>
8111cc0c:	9817883a 	mov	r11,r19
8111cc10:	d8002415 	stw	zero,144(sp)
8111cc14:	18bff404 	addi	r2,r3,-48
8111cc18:	0019883a 	mov	r12,zero
8111cc1c:	58c00007 	ldb	r3,0(r11)
8111cc20:	630002a4 	muli	r12,r12,10
8111cc24:	9cc00044 	addi	r19,r19,1
8111cc28:	9817883a 	mov	r11,r19
8111cc2c:	1319883a 	add	r12,r2,r12
8111cc30:	18bff404 	addi	r2,r3,-48
8111cc34:	30bff92e 	bgeu	r6,r2,8111cc1c <__reset+0xfb0fcc1c>
8111cc38:	db002415 	stw	r12,144(sp)
8111cc3c:	18bff804 	addi	r2,r3,-32
8111cc40:	28be232e 	bgeu	r5,r2,8111c4d0 <__reset+0xfb0fc4d0>
8111cc44:	21003fcc 	andi	r4,r4,255
8111cc48:	20024b1e 	bne	r4,zero,8111d578 <___svfiprintf_internal_r+0x11f8>
8111cc4c:	1800d626 	beq	r3,zero,8111cfa8 <___svfiprintf_internal_r+0xc28>
8111cc50:	02c00044 	movi	r11,1
8111cc54:	dac02015 	stw	r11,128(sp)
8111cc58:	d8c01005 	stb	r3,64(sp)
8111cc5c:	d8001d85 	stb	zero,118(sp)
8111cc60:	dac02115 	stw	r11,132(sp)
8111cc64:	dc401004 	addi	r17,sp,64
8111cc68:	003f2606 	br	8111c904 <__reset+0xfb0fc904>
8111cc6c:	94802014 	ori	r18,r18,128
8111cc70:	98c00007 	ldb	r3,0(r19)
8111cc74:	003e1306 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111cc78:	98c00007 	ldb	r3,0(r19)
8111cc7c:	9ac00044 	addi	r11,r19,1
8111cc80:	1a822b26 	beq	r3,r10,8111d530 <___svfiprintf_internal_r+0x11b0>
8111cc84:	18bff404 	addi	r2,r3,-48
8111cc88:	0021883a 	mov	r16,zero
8111cc8c:	30821e36 	bltu	r6,r2,8111d508 <___svfiprintf_internal_r+0x1188>
8111cc90:	58c00007 	ldb	r3,0(r11)
8111cc94:	840002a4 	muli	r16,r16,10
8111cc98:	5cc00044 	addi	r19,r11,1
8111cc9c:	9817883a 	mov	r11,r19
8111cca0:	80a1883a 	add	r16,r16,r2
8111cca4:	18bff404 	addi	r2,r3,-48
8111cca8:	30bff92e 	bgeu	r6,r2,8111cc90 <__reset+0xfb0fcc90>
8111ccac:	803e060e 	bge	r16,zero,8111c4c8 <__reset+0xfb0fc4c8>
8111ccb0:	043fffc4 	movi	r16,-1
8111ccb4:	003e0406 	br	8111c4c8 <__reset+0xfb0fc4c8>
8111ccb8:	21003fcc 	andi	r4,r4,255
8111ccbc:	2002371e 	bne	r4,zero,8111d59c <___svfiprintf_internal_r+0x121c>
8111ccc0:	94800414 	ori	r18,r18,16
8111ccc4:	9080080c 	andi	r2,r18,32
8111ccc8:	103ebb1e 	bne	r2,zero,8111c7b8 <__reset+0xfb0fc7b8>
8111cccc:	9080040c 	andi	r2,r18,16
8111ccd0:	10013b26 	beq	r2,zero,8111d1c0 <___svfiprintf_internal_r+0xe40>
8111ccd4:	dac02317 	ldw	r11,140(sp)
8111ccd8:	d8001d85 	stb	zero,118(sp)
8111ccdc:	0013883a 	mov	r9,zero
8111cce0:	58800104 	addi	r2,r11,4
8111cce4:	5f000017 	ldw	fp,0(r11)
8111cce8:	80013d16 	blt	r16,zero,8111d1e0 <___svfiprintf_internal_r+0xe60>
8111ccec:	00ffdfc4 	movi	r3,-129
8111ccf0:	d8802315 	stw	r2,140(sp)
8111ccf4:	90e4703a 	and	r18,r18,r3
8111ccf8:	0015883a 	mov	r10,zero
8111ccfc:	e03eba26 	beq	fp,zero,8111c7e8 <__reset+0xfb0fc7e8>
8111cd00:	00800244 	movi	r2,9
8111cd04:	173f7236 	bltu	r2,fp,8111cad0 <__reset+0xfb0fcad0>
8111cd08:	dac02b17 	ldw	r11,172(sp)
8111cd0c:	e7000c04 	addi	fp,fp,48
8111cd10:	df0019c5 	stb	fp,103(sp)
8111cd14:	dac02115 	stw	r11,132(sp)
8111cd18:	dc4019c4 	addi	r17,sp,103
8111cd1c:	003eb606 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111cd20:	21003fcc 	andi	r4,r4,255
8111cd24:	20021f1e 	bne	r4,zero,8111d5a4 <___svfiprintf_internal_r+0x1224>
8111cd28:	94800414 	ori	r18,r18,16
8111cd2c:	9080080c 	andi	r2,r18,32
8111cd30:	103ec51e 	bne	r2,zero,8111c848 <__reset+0xfb0fc848>
8111cd34:	9080040c 	andi	r2,r18,16
8111cd38:	10016926 	beq	r2,zero,8111d2e0 <___svfiprintf_internal_r+0xf60>
8111cd3c:	dac02317 	ldw	r11,140(sp)
8111cd40:	d8001d85 	stb	zero,118(sp)
8111cd44:	0013883a 	mov	r9,zero
8111cd48:	58800104 	addi	r2,r11,4
8111cd4c:	5f000017 	ldw	fp,0(r11)
8111cd50:	80016b16 	blt	r16,zero,8111d300 <___svfiprintf_internal_r+0xf80>
8111cd54:	00ffdfc4 	movi	r3,-129
8111cd58:	d8802315 	stw	r2,140(sp)
8111cd5c:	90e4703a 	and	r18,r18,r3
8111cd60:	e03ec41e 	bne	fp,zero,8111c874 <__reset+0xfb0fc874>
8111cd64:	0015883a 	mov	r10,zero
8111cd68:	8001c226 	beq	r16,zero,8111d474 <___svfiprintf_internal_r+0x10f4>
8111cd6c:	0039883a 	mov	fp,zero
8111cd70:	0013883a 	mov	r9,zero
8111cd74:	003ec006 	br	8111c878 <__reset+0xfb0fc878>
8111cd78:	d8c01c17 	ldw	r3,112(sp)
8111cd7c:	d8801b17 	ldw	r2,108(sp)
8111cd80:	d9001d87 	ldb	r4,118(sp)
8111cd84:	20000b26 	beq	r4,zero,8111cdb4 <___svfiprintf_internal_r+0xa34>
8111cd88:	d9001d84 	addi	r4,sp,118
8111cd8c:	18c00044 	addi	r3,r3,1
8111cd90:	10800044 	addi	r2,r2,1
8111cd94:	41000015 	stw	r4,0(r8)
8111cd98:	01000044 	movi	r4,1
8111cd9c:	41000115 	stw	r4,4(r8)
8111cda0:	d8c01c15 	stw	r3,112(sp)
8111cda4:	d8801b15 	stw	r2,108(sp)
8111cda8:	010001c4 	movi	r4,7
8111cdac:	2080e116 	blt	r4,r2,8111d134 <___svfiprintf_internal_r+0xdb4>
8111cdb0:	42000204 	addi	r8,r8,8
8111cdb4:	dac02217 	ldw	r11,136(sp)
8111cdb8:	58000b26 	beq	r11,zero,8111cde8 <___svfiprintf_internal_r+0xa68>
8111cdbc:	d9001d04 	addi	r4,sp,116
8111cdc0:	18c00084 	addi	r3,r3,2
8111cdc4:	10800044 	addi	r2,r2,1
8111cdc8:	41000015 	stw	r4,0(r8)
8111cdcc:	01000084 	movi	r4,2
8111cdd0:	41000115 	stw	r4,4(r8)
8111cdd4:	d8c01c15 	stw	r3,112(sp)
8111cdd8:	d8801b15 	stw	r2,108(sp)
8111cddc:	010001c4 	movi	r4,7
8111cde0:	2080dd16 	blt	r4,r2,8111d158 <___svfiprintf_internal_r+0xdd8>
8111cde4:	42000204 	addi	r8,r8,8
8111cde8:	dac02617 	ldw	r11,152(sp)
8111cdec:	01002004 	movi	r4,128
8111cdf0:	59008426 	beq	r11,r4,8111d004 <___svfiprintf_internal_r+0xc84>
8111cdf4:	dac02117 	ldw	r11,132(sp)
8111cdf8:	82e1c83a 	sub	r16,r16,r11
8111cdfc:	0400270e 	bge	zero,r16,8111ce9c <___svfiprintf_internal_r+0xb1c>
8111ce00:	01c00404 	movi	r7,16
8111ce04:	3c016a0e 	bge	r7,r16,8111d3b0 <___svfiprintf_internal_r+0x1030>
8111ce08:	01604534 	movhi	r5,33044
8111ce0c:	296b6604 	addi	r5,r5,-21096
8111ce10:	d9402215 	stw	r5,136(sp)
8111ce14:	070001c4 	movi	fp,7
8111ce18:	00000306 	br	8111ce28 <___svfiprintf_internal_r+0xaa8>
8111ce1c:	843ffc04 	addi	r16,r16,-16
8111ce20:	42000204 	addi	r8,r8,8
8111ce24:	3c00130e 	bge	r7,r16,8111ce74 <___svfiprintf_internal_r+0xaf4>
8111ce28:	18c00404 	addi	r3,r3,16
8111ce2c:	10800044 	addi	r2,r2,1
8111ce30:	45000015 	stw	r20,0(r8)
8111ce34:	41c00115 	stw	r7,4(r8)
8111ce38:	d8c01c15 	stw	r3,112(sp)
8111ce3c:	d8801b15 	stw	r2,108(sp)
8111ce40:	e0bff60e 	bge	fp,r2,8111ce1c <__reset+0xfb0fce1c>
8111ce44:	d9801a04 	addi	r6,sp,104
8111ce48:	b80b883a 	mov	r5,r23
8111ce4c:	a809883a 	mov	r4,r21
8111ce50:	d9c02c15 	stw	r7,176(sp)
8111ce54:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111ce58:	d9c02c17 	ldw	r7,176(sp)
8111ce5c:	1000581e 	bne	r2,zero,8111cfc0 <___svfiprintf_internal_r+0xc40>
8111ce60:	843ffc04 	addi	r16,r16,-16
8111ce64:	d8c01c17 	ldw	r3,112(sp)
8111ce68:	d8801b17 	ldw	r2,108(sp)
8111ce6c:	d811883a 	mov	r8,sp
8111ce70:	3c3fed16 	blt	r7,r16,8111ce28 <__reset+0xfb0fce28>
8111ce74:	dac02217 	ldw	r11,136(sp)
8111ce78:	1c07883a 	add	r3,r3,r16
8111ce7c:	10800044 	addi	r2,r2,1
8111ce80:	42c00015 	stw	r11,0(r8)
8111ce84:	44000115 	stw	r16,4(r8)
8111ce88:	d8c01c15 	stw	r3,112(sp)
8111ce8c:	d8801b15 	stw	r2,108(sp)
8111ce90:	010001c4 	movi	r4,7
8111ce94:	20809e16 	blt	r4,r2,8111d110 <___svfiprintf_internal_r+0xd90>
8111ce98:	42000204 	addi	r8,r8,8
8111ce9c:	dac02117 	ldw	r11,132(sp)
8111cea0:	10800044 	addi	r2,r2,1
8111cea4:	44400015 	stw	r17,0(r8)
8111cea8:	58c7883a 	add	r3,r11,r3
8111ceac:	42c00115 	stw	r11,4(r8)
8111ceb0:	d8c01c15 	stw	r3,112(sp)
8111ceb4:	d8801b15 	stw	r2,108(sp)
8111ceb8:	010001c4 	movi	r4,7
8111cebc:	20807f16 	blt	r4,r2,8111d0bc <___svfiprintf_internal_r+0xd3c>
8111cec0:	42000204 	addi	r8,r8,8
8111cec4:	9480010c 	andi	r18,r18,4
8111cec8:	90002926 	beq	r18,zero,8111cf70 <___svfiprintf_internal_r+0xbf0>
8111cecc:	dac02417 	ldw	r11,144(sp)
8111ced0:	d8802017 	ldw	r2,128(sp)
8111ced4:	58a1c83a 	sub	r16,r11,r2
8111ced8:	0400250e 	bge	zero,r16,8111cf70 <___svfiprintf_internal_r+0xbf0>
8111cedc:	04400404 	movi	r17,16
8111cee0:	d8801b17 	ldw	r2,108(sp)
8111cee4:	8c017c0e 	bge	r17,r16,8111d4d8 <___svfiprintf_internal_r+0x1158>
8111cee8:	01604534 	movhi	r5,33044
8111ceec:	296b6a04 	addi	r5,r5,-21080
8111cef0:	d9402815 	stw	r5,160(sp)
8111cef4:	048001c4 	movi	r18,7
8111cef8:	00000306 	br	8111cf08 <___svfiprintf_internal_r+0xb88>
8111cefc:	843ffc04 	addi	r16,r16,-16
8111cf00:	42000204 	addi	r8,r8,8
8111cf04:	8c00110e 	bge	r17,r16,8111cf4c <___svfiprintf_internal_r+0xbcc>
8111cf08:	18c00404 	addi	r3,r3,16
8111cf0c:	10800044 	addi	r2,r2,1
8111cf10:	45800015 	stw	r22,0(r8)
8111cf14:	44400115 	stw	r17,4(r8)
8111cf18:	d8c01c15 	stw	r3,112(sp)
8111cf1c:	d8801b15 	stw	r2,108(sp)
8111cf20:	90bff60e 	bge	r18,r2,8111cefc <__reset+0xfb0fcefc>
8111cf24:	d9801a04 	addi	r6,sp,104
8111cf28:	b80b883a 	mov	r5,r23
8111cf2c:	a809883a 	mov	r4,r21
8111cf30:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111cf34:	1000221e 	bne	r2,zero,8111cfc0 <___svfiprintf_internal_r+0xc40>
8111cf38:	843ffc04 	addi	r16,r16,-16
8111cf3c:	d8c01c17 	ldw	r3,112(sp)
8111cf40:	d8801b17 	ldw	r2,108(sp)
8111cf44:	d811883a 	mov	r8,sp
8111cf48:	8c3fef16 	blt	r17,r16,8111cf08 <__reset+0xfb0fcf08>
8111cf4c:	dac02817 	ldw	r11,160(sp)
8111cf50:	1c07883a 	add	r3,r3,r16
8111cf54:	10800044 	addi	r2,r2,1
8111cf58:	42c00015 	stw	r11,0(r8)
8111cf5c:	44000115 	stw	r16,4(r8)
8111cf60:	d8c01c15 	stw	r3,112(sp)
8111cf64:	d8801b15 	stw	r2,108(sp)
8111cf68:	010001c4 	movi	r4,7
8111cf6c:	2080aa16 	blt	r4,r2,8111d218 <___svfiprintf_internal_r+0xe98>
8111cf70:	d8802417 	ldw	r2,144(sp)
8111cf74:	dac02017 	ldw	r11,128(sp)
8111cf78:	12c0010e 	bge	r2,r11,8111cf80 <___svfiprintf_internal_r+0xc00>
8111cf7c:	5805883a 	mov	r2,r11
8111cf80:	dac02517 	ldw	r11,148(sp)
8111cf84:	5897883a 	add	r11,r11,r2
8111cf88:	dac02515 	stw	r11,148(sp)
8111cf8c:	1800531e 	bne	r3,zero,8111d0dc <___svfiprintf_internal_r+0xd5c>
8111cf90:	98800007 	ldb	r2,0(r19)
8111cf94:	d8001b15 	stw	zero,108(sp)
8111cf98:	d811883a 	mov	r8,sp
8111cf9c:	103d231e 	bne	r2,zero,8111c42c <__reset+0xfb0fc42c>
8111cfa0:	9823883a 	mov	r17,r19
8111cfa4:	003d3906 	br	8111c48c <__reset+0xfb0fc48c>
8111cfa8:	d8801c17 	ldw	r2,112(sp)
8111cfac:	10000426 	beq	r2,zero,8111cfc0 <___svfiprintf_internal_r+0xc40>
8111cfb0:	d9402717 	ldw	r5,156(sp)
8111cfb4:	d9002a17 	ldw	r4,168(sp)
8111cfb8:	d9801a04 	addi	r6,sp,104
8111cfbc:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111cfc0:	dac02717 	ldw	r11,156(sp)
8111cfc4:	d8802517 	ldw	r2,148(sp)
8111cfc8:	58c0030b 	ldhu	r3,12(r11)
8111cfcc:	18c0100c 	andi	r3,r3,64
8111cfd0:	1801381e 	bne	r3,zero,8111d4b4 <___svfiprintf_internal_r+0x1134>
8111cfd4:	dfc03717 	ldw	ra,220(sp)
8111cfd8:	df003617 	ldw	fp,216(sp)
8111cfdc:	ddc03517 	ldw	r23,212(sp)
8111cfe0:	dd803417 	ldw	r22,208(sp)
8111cfe4:	dd403317 	ldw	r21,204(sp)
8111cfe8:	dd003217 	ldw	r20,200(sp)
8111cfec:	dcc03117 	ldw	r19,196(sp)
8111cff0:	dc803017 	ldw	r18,192(sp)
8111cff4:	dc402f17 	ldw	r17,188(sp)
8111cff8:	dc002e17 	ldw	r16,184(sp)
8111cffc:	dec03804 	addi	sp,sp,224
8111d000:	f800283a 	ret
8111d004:	dac02417 	ldw	r11,144(sp)
8111d008:	d9002017 	ldw	r4,128(sp)
8111d00c:	5939c83a 	sub	fp,r11,r4
8111d010:	073f780e 	bge	zero,fp,8111cdf4 <__reset+0xfb0fcdf4>
8111d014:	02400404 	movi	r9,16
8111d018:	4f01370e 	bge	r9,fp,8111d4f8 <___svfiprintf_internal_r+0x1178>
8111d01c:	02e04534 	movhi	r11,33044
8111d020:	5aeb6604 	addi	r11,r11,-21096
8111d024:	dac02215 	stw	r11,136(sp)
8111d028:	028001c4 	movi	r10,7
8111d02c:	00000306 	br	8111d03c <___svfiprintf_internal_r+0xcbc>
8111d030:	e73ffc04 	addi	fp,fp,-16
8111d034:	42000204 	addi	r8,r8,8
8111d038:	4f00150e 	bge	r9,fp,8111d090 <___svfiprintf_internal_r+0xd10>
8111d03c:	18c00404 	addi	r3,r3,16
8111d040:	10800044 	addi	r2,r2,1
8111d044:	45000015 	stw	r20,0(r8)
8111d048:	42400115 	stw	r9,4(r8)
8111d04c:	d8c01c15 	stw	r3,112(sp)
8111d050:	d8801b15 	stw	r2,108(sp)
8111d054:	50bff60e 	bge	r10,r2,8111d030 <__reset+0xfb0fd030>
8111d058:	d9801a04 	addi	r6,sp,104
8111d05c:	b80b883a 	mov	r5,r23
8111d060:	a809883a 	mov	r4,r21
8111d064:	da402c15 	stw	r9,176(sp)
8111d068:	da802d15 	stw	r10,180(sp)
8111d06c:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d070:	da402c17 	ldw	r9,176(sp)
8111d074:	da802d17 	ldw	r10,180(sp)
8111d078:	103fd11e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d07c:	e73ffc04 	addi	fp,fp,-16
8111d080:	d8c01c17 	ldw	r3,112(sp)
8111d084:	d8801b17 	ldw	r2,108(sp)
8111d088:	d811883a 	mov	r8,sp
8111d08c:	4f3feb16 	blt	r9,fp,8111d03c <__reset+0xfb0fd03c>
8111d090:	dac02217 	ldw	r11,136(sp)
8111d094:	1f07883a 	add	r3,r3,fp
8111d098:	10800044 	addi	r2,r2,1
8111d09c:	42c00015 	stw	r11,0(r8)
8111d0a0:	47000115 	stw	fp,4(r8)
8111d0a4:	d8c01c15 	stw	r3,112(sp)
8111d0a8:	d8801b15 	stw	r2,108(sp)
8111d0ac:	010001c4 	movi	r4,7
8111d0b0:	2080b616 	blt	r4,r2,8111d38c <___svfiprintf_internal_r+0x100c>
8111d0b4:	42000204 	addi	r8,r8,8
8111d0b8:	003f4e06 	br	8111cdf4 <__reset+0xfb0fcdf4>
8111d0bc:	d9801a04 	addi	r6,sp,104
8111d0c0:	b80b883a 	mov	r5,r23
8111d0c4:	a809883a 	mov	r4,r21
8111d0c8:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d0cc:	103fbc1e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d0d0:	d8c01c17 	ldw	r3,112(sp)
8111d0d4:	d811883a 	mov	r8,sp
8111d0d8:	003f7a06 	br	8111cec4 <__reset+0xfb0fcec4>
8111d0dc:	d9801a04 	addi	r6,sp,104
8111d0e0:	b80b883a 	mov	r5,r23
8111d0e4:	a809883a 	mov	r4,r21
8111d0e8:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d0ec:	103fa826 	beq	r2,zero,8111cf90 <__reset+0xfb0fcf90>
8111d0f0:	003fb306 	br	8111cfc0 <__reset+0xfb0fcfc0>
8111d0f4:	d9801a04 	addi	r6,sp,104
8111d0f8:	b80b883a 	mov	r5,r23
8111d0fc:	a809883a 	mov	r4,r21
8111d100:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d104:	103fae1e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d108:	d811883a 	mov	r8,sp
8111d10c:	003cdc06 	br	8111c480 <__reset+0xfb0fc480>
8111d110:	d9801a04 	addi	r6,sp,104
8111d114:	b80b883a 	mov	r5,r23
8111d118:	a809883a 	mov	r4,r21
8111d11c:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d120:	103fa71e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d124:	d8c01c17 	ldw	r3,112(sp)
8111d128:	d8801b17 	ldw	r2,108(sp)
8111d12c:	d811883a 	mov	r8,sp
8111d130:	003f5a06 	br	8111ce9c <__reset+0xfb0fce9c>
8111d134:	d9801a04 	addi	r6,sp,104
8111d138:	b80b883a 	mov	r5,r23
8111d13c:	a809883a 	mov	r4,r21
8111d140:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d144:	103f9e1e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d148:	d8c01c17 	ldw	r3,112(sp)
8111d14c:	d8801b17 	ldw	r2,108(sp)
8111d150:	d811883a 	mov	r8,sp
8111d154:	003f1706 	br	8111cdb4 <__reset+0xfb0fcdb4>
8111d158:	d9801a04 	addi	r6,sp,104
8111d15c:	b80b883a 	mov	r5,r23
8111d160:	a809883a 	mov	r4,r21
8111d164:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d168:	103f951e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d16c:	d8c01c17 	ldw	r3,112(sp)
8111d170:	d8801b17 	ldw	r2,108(sp)
8111d174:	d811883a 	mov	r8,sp
8111d178:	003f1b06 	br	8111cde8 <__reset+0xfb0fcde8>
8111d17c:	d8001d85 	stb	zero,118(sp)
8111d180:	80007b16 	blt	r16,zero,8111d370 <___svfiprintf_internal_r+0xff0>
8111d184:	00ffdfc4 	movi	r3,-129
8111d188:	e244b03a 	or	r2,fp,r9
8111d18c:	90e4703a 	and	r18,r18,r3
8111d190:	103d7026 	beq	r2,zero,8111c754 <__reset+0xfb0fc754>
8111d194:	0015883a 	mov	r10,zero
8111d198:	003d7206 	br	8111c764 <__reset+0xfb0fc764>
8111d19c:	d9801a04 	addi	r6,sp,104
8111d1a0:	b80b883a 	mov	r5,r23
8111d1a4:	a809883a 	mov	r4,r21
8111d1a8:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d1ac:	103f841e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d1b0:	d8c01c17 	ldw	r3,112(sp)
8111d1b4:	d8801b17 	ldw	r2,108(sp)
8111d1b8:	d811883a 	mov	r8,sp
8111d1bc:	003ef006 	br	8111cd80 <__reset+0xfb0fcd80>
8111d1c0:	9080100c 	andi	r2,r18,64
8111d1c4:	d8001d85 	stb	zero,118(sp)
8111d1c8:	dac02317 	ldw	r11,140(sp)
8111d1cc:	10008126 	beq	r2,zero,8111d3d4 <___svfiprintf_internal_r+0x1054>
8111d1d0:	58800104 	addi	r2,r11,4
8111d1d4:	5f00000b 	ldhu	fp,0(r11)
8111d1d8:	0013883a 	mov	r9,zero
8111d1dc:	803ec30e 	bge	r16,zero,8111ccec <__reset+0xfb0fccec>
8111d1e0:	d8802315 	stw	r2,140(sp)
8111d1e4:	0015883a 	mov	r10,zero
8111d1e8:	e244b03a 	or	r2,fp,r9
8111d1ec:	103e371e 	bne	r2,zero,8111cacc <__reset+0xfb0fcacc>
8111d1f0:	00800044 	movi	r2,1
8111d1f4:	10803fcc 	andi	r2,r2,255
8111d1f8:	00c00044 	movi	r3,1
8111d1fc:	10c06126 	beq	r2,r3,8111d384 <___svfiprintf_internal_r+0x1004>
8111d200:	00c00084 	movi	r3,2
8111d204:	10fd5526 	beq	r2,r3,8111c75c <__reset+0xfb0fc75c>
8111d208:	003ed806 	br	8111cd6c <__reset+0xfb0fcd6c>
8111d20c:	d8802315 	stw	r2,140(sp)
8111d210:	98c00007 	ldb	r3,0(r19)
8111d214:	003cab06 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111d218:	d9801a04 	addi	r6,sp,104
8111d21c:	b80b883a 	mov	r5,r23
8111d220:	a809883a 	mov	r4,r21
8111d224:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d228:	103f651e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d22c:	d8c01c17 	ldw	r3,112(sp)
8111d230:	003f4f06 	br	8111cf70 <__reset+0xfb0fcf70>
8111d234:	00a04534 	movhi	r2,33044
8111d238:	10aadc04 	addi	r2,r2,-21648
8111d23c:	d8802915 	stw	r2,164(sp)
8111d240:	003d4406 	br	8111c754 <__reset+0xfb0fc754>
8111d244:	dac02317 	ldw	r11,140(sp)
8111d248:	58800017 	ldw	r2,0(r11)
8111d24c:	dac02517 	ldw	r11,148(sp)
8111d250:	5807d7fa 	srai	r3,r11,31
8111d254:	dac02317 	ldw	r11,140(sp)
8111d258:	10c00115 	stw	r3,4(r2)
8111d25c:	5ac00104 	addi	r11,r11,4
8111d260:	dac02315 	stw	r11,140(sp)
8111d264:	dac02517 	ldw	r11,148(sp)
8111d268:	12c00015 	stw	r11,0(r2)
8111d26c:	003c6d06 	br	8111c424 <__reset+0xfb0fc424>
8111d270:	9080100c 	andi	r2,r18,64
8111d274:	dac02317 	ldw	r11,140(sp)
8111d278:	103e5326 	beq	r2,zero,8111cbc8 <__reset+0xfb0fcbc8>
8111d27c:	5f00000f 	ldh	fp,0(r11)
8111d280:	5ac00104 	addi	r11,r11,4
8111d284:	dac02315 	stw	r11,140(sp)
8111d288:	e013d7fa 	srai	r9,fp,31
8111d28c:	4805883a 	mov	r2,r9
8111d290:	003e0706 	br	8111cab0 <__reset+0xfb0fcab0>
8111d294:	00800c04 	movi	r2,48
8111d298:	d8801d05 	stb	r2,116(sp)
8111d29c:	d8c01d45 	stb	r3,117(sp)
8111d2a0:	d8001d85 	stb	zero,118(sp)
8111d2a4:	90800094 	ori	r2,r18,2
8111d2a8:	80008f16 	blt	r16,zero,8111d4e8 <___svfiprintf_internal_r+0x1168>
8111d2ac:	00bfdfc4 	movi	r2,-129
8111d2b0:	90a4703a 	and	r18,r18,r2
8111d2b4:	94800094 	ori	r18,r18,2
8111d2b8:	0015883a 	mov	r10,zero
8111d2bc:	003d2906 	br	8111c764 <__reset+0xfb0fc764>
8111d2c0:	98c00007 	ldb	r3,0(r19)
8111d2c4:	003c7f06 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111d2c8:	dac02317 	ldw	r11,140(sp)
8111d2cc:	0013883a 	mov	r9,zero
8111d2d0:	5f000017 	ldw	fp,0(r11)
8111d2d4:	5ac00104 	addi	r11,r11,4
8111d2d8:	dac02315 	stw	r11,140(sp)
8111d2dc:	003d1506 	br	8111c734 <__reset+0xfb0fc734>
8111d2e0:	9080100c 	andi	r2,r18,64
8111d2e4:	d8001d85 	stb	zero,118(sp)
8111d2e8:	dac02317 	ldw	r11,140(sp)
8111d2ec:	10003426 	beq	r2,zero,8111d3c0 <___svfiprintf_internal_r+0x1040>
8111d2f0:	58800104 	addi	r2,r11,4
8111d2f4:	5f00000b 	ldhu	fp,0(r11)
8111d2f8:	0013883a 	mov	r9,zero
8111d2fc:	803e950e 	bge	r16,zero,8111cd54 <__reset+0xfb0fcd54>
8111d300:	e246b03a 	or	r3,fp,r9
8111d304:	d8802315 	stw	r2,140(sp)
8111d308:	183d5a1e 	bne	r3,zero,8111c874 <__reset+0xfb0fc874>
8111d30c:	0015883a 	mov	r10,zero
8111d310:	0005883a 	mov	r2,zero
8111d314:	003fb706 	br	8111d1f4 <__reset+0xfb0fd1f4>
8111d318:	98c00043 	ldbu	r3,1(r19)
8111d31c:	94800814 	ori	r18,r18,32
8111d320:	9cc00044 	addi	r19,r19,1
8111d324:	18c03fcc 	andi	r3,r3,255
8111d328:	18c0201c 	xori	r3,r3,128
8111d32c:	18ffe004 	addi	r3,r3,-128
8111d330:	003c6406 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111d334:	d8c02315 	stw	r3,140(sp)
8111d338:	0015883a 	mov	r10,zero
8111d33c:	003faa06 	br	8111d1e8 <__reset+0xfb0fd1e8>
8111d340:	dac02317 	ldw	r11,140(sp)
8111d344:	58800017 	ldw	r2,0(r11)
8111d348:	5ac00104 	addi	r11,r11,4
8111d34c:	dac02315 	stw	r11,140(sp)
8111d350:	dac02517 	ldw	r11,148(sp)
8111d354:	12c00015 	stw	r11,0(r2)
8111d358:	003c3206 	br	8111c424 <__reset+0xfb0fc424>
8111d35c:	01204534 	movhi	r4,33044
8111d360:	212adc04 	addi	r4,r4,-21648
8111d364:	d9002915 	stw	r4,164(sp)
8111d368:	d8c02315 	stw	r3,140(sp)
8111d36c:	1025883a 	mov	r18,r2
8111d370:	e244b03a 	or	r2,fp,r9
8111d374:	103f871e 	bne	r2,zero,8111d194 <__reset+0xfb0fd194>
8111d378:	0015883a 	mov	r10,zero
8111d37c:	00800084 	movi	r2,2
8111d380:	003f9c06 	br	8111d1f4 <__reset+0xfb0fd1f4>
8111d384:	0039883a 	mov	fp,zero
8111d388:	003e5f06 	br	8111cd08 <__reset+0xfb0fcd08>
8111d38c:	d9801a04 	addi	r6,sp,104
8111d390:	b80b883a 	mov	r5,r23
8111d394:	a809883a 	mov	r4,r21
8111d398:	111c1a80 	call	8111c1a8 <__ssprint_r>
8111d39c:	103f081e 	bne	r2,zero,8111cfc0 <__reset+0xfb0fcfc0>
8111d3a0:	d8c01c17 	ldw	r3,112(sp)
8111d3a4:	d8801b17 	ldw	r2,108(sp)
8111d3a8:	d811883a 	mov	r8,sp
8111d3ac:	003e9106 	br	8111cdf4 <__reset+0xfb0fcdf4>
8111d3b0:	01204534 	movhi	r4,33044
8111d3b4:	212b6604 	addi	r4,r4,-21096
8111d3b8:	d9002215 	stw	r4,136(sp)
8111d3bc:	003ead06 	br	8111ce74 <__reset+0xfb0fce74>
8111d3c0:	58800104 	addi	r2,r11,4
8111d3c4:	5f000017 	ldw	fp,0(r11)
8111d3c8:	0013883a 	mov	r9,zero
8111d3cc:	803e610e 	bge	r16,zero,8111cd54 <__reset+0xfb0fcd54>
8111d3d0:	003fcb06 	br	8111d300 <__reset+0xfb0fd300>
8111d3d4:	58800104 	addi	r2,r11,4
8111d3d8:	5f000017 	ldw	fp,0(r11)
8111d3dc:	0013883a 	mov	r9,zero
8111d3e0:	803e420e 	bge	r16,zero,8111ccec <__reset+0xfb0fccec>
8111d3e4:	003f7e06 	br	8111d1e0 <__reset+0xfb0fd1e0>
8111d3e8:	5f000017 	ldw	fp,0(r11)
8111d3ec:	5ac00104 	addi	r11,r11,4
8111d3f0:	0013883a 	mov	r9,zero
8111d3f4:	dac02315 	stw	r11,140(sp)
8111d3f8:	003cce06 	br	8111c734 <__reset+0xfb0fc734>
8111d3fc:	8809883a 	mov	r4,r17
8111d400:	da002c15 	stw	r8,176(sp)
8111d404:	110f27c0 	call	8110f27c <strlen>
8111d408:	d8802115 	stw	r2,132(sp)
8111d40c:	da801d83 	ldbu	r10,118(sp)
8111d410:	df002315 	stw	fp,140(sp)
8111d414:	0021883a 	mov	r16,zero
8111d418:	da002c17 	ldw	r8,176(sp)
8111d41c:	003cf606 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111d420:	00800184 	movi	r2,6
8111d424:	1400012e 	bgeu	r2,r16,8111d42c <___svfiprintf_internal_r+0x10ac>
8111d428:	1021883a 	mov	r16,r2
8111d42c:	dc002115 	stw	r16,132(sp)
8111d430:	8005883a 	mov	r2,r16
8111d434:	80003c16 	blt	r16,zero,8111d528 <___svfiprintf_internal_r+0x11a8>
8111d438:	04604534 	movhi	r17,33044
8111d43c:	d8802015 	stw	r2,128(sp)
8111d440:	df002315 	stw	fp,140(sp)
8111d444:	8c6ae104 	addi	r17,r17,-21628
8111d448:	003d2e06 	br	8111c904 <__reset+0xfb0fc904>
8111d44c:	04001004 	movi	r16,64
8111d450:	800b883a 	mov	r5,r16
8111d454:	110e0cc0 	call	8110e0cc <_malloc_r>
8111d458:	dac02717 	ldw	r11,156(sp)
8111d45c:	58800015 	stw	r2,0(r11)
8111d460:	58800415 	stw	r2,16(r11)
8111d464:	10004826 	beq	r2,zero,8111d588 <___svfiprintf_internal_r+0x1208>
8111d468:	dac02717 	ldw	r11,156(sp)
8111d46c:	5c000515 	stw	r16,20(r11)
8111d470:	003bd906 	br	8111c3d8 <__reset+0xfb0fc3d8>
8111d474:	9080004c 	andi	r2,r18,1
8111d478:	0015883a 	mov	r10,zero
8111d47c:	10000626 	beq	r2,zero,8111d498 <___svfiprintf_internal_r+0x1118>
8111d480:	dac02b17 	ldw	r11,172(sp)
8111d484:	00800c04 	movi	r2,48
8111d488:	d88019c5 	stb	r2,103(sp)
8111d48c:	dac02115 	stw	r11,132(sp)
8111d490:	dc4019c4 	addi	r17,sp,103
8111d494:	003cd806 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111d498:	d8002115 	stw	zero,132(sp)
8111d49c:	dc401a04 	addi	r17,sp,104
8111d4a0:	003cd506 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111d4a4:	01204534 	movhi	r4,33044
8111d4a8:	212b6a04 	addi	r4,r4,-21080
8111d4ac:	d9002815 	stw	r4,160(sp)
8111d4b0:	003d4306 	br	8111c9c0 <__reset+0xfb0fc9c0>
8111d4b4:	00bfffc4 	movi	r2,-1
8111d4b8:	003ec606 	br	8111cfd4 <__reset+0xfb0fcfd4>
8111d4bc:	00800044 	movi	r2,1
8111d4c0:	10803fcc 	andi	r2,r2,255
8111d4c4:	00c00044 	movi	r3,1
8111d4c8:	10fd8026 	beq	r2,r3,8111cacc <__reset+0xfb0fcacc>
8111d4cc:	00c00084 	movi	r3,2
8111d4d0:	10fca426 	beq	r2,r3,8111c764 <__reset+0xfb0fc764>
8111d4d4:	003ce806 	br	8111c878 <__reset+0xfb0fc878>
8111d4d8:	01204534 	movhi	r4,33044
8111d4dc:	212b6a04 	addi	r4,r4,-21080
8111d4e0:	d9002815 	stw	r4,160(sp)
8111d4e4:	003e9906 	br	8111cf4c <__reset+0xfb0fcf4c>
8111d4e8:	1025883a 	mov	r18,r2
8111d4ec:	0015883a 	mov	r10,zero
8111d4f0:	00800084 	movi	r2,2
8111d4f4:	003ff206 	br	8111d4c0 <__reset+0xfb0fd4c0>
8111d4f8:	01604534 	movhi	r5,33044
8111d4fc:	296b6604 	addi	r5,r5,-21096
8111d500:	d9402215 	stw	r5,136(sp)
8111d504:	003ee206 	br	8111d090 <__reset+0xfb0fd090>
8111d508:	5827883a 	mov	r19,r11
8111d50c:	0021883a 	mov	r16,zero
8111d510:	003bed06 	br	8111c4c8 <__reset+0xfb0fc4c8>
8111d514:	dc002115 	stw	r16,132(sp)
8111d518:	da801d83 	ldbu	r10,118(sp)
8111d51c:	df002315 	stw	fp,140(sp)
8111d520:	0021883a 	mov	r16,zero
8111d524:	003cb406 	br	8111c7f8 <__reset+0xfb0fc7f8>
8111d528:	0005883a 	mov	r2,zero
8111d52c:	003fc206 	br	8111d438 <__reset+0xfb0fd438>
8111d530:	d8802317 	ldw	r2,140(sp)
8111d534:	98c00043 	ldbu	r3,1(r19)
8111d538:	5827883a 	mov	r19,r11
8111d53c:	14000017 	ldw	r16,0(r2)
8111d540:	10800104 	addi	r2,r2,4
8111d544:	d8802315 	stw	r2,140(sp)
8111d548:	803f760e 	bge	r16,zero,8111d324 <__reset+0xfb0fd324>
8111d54c:	18c03fcc 	andi	r3,r3,255
8111d550:	18c0201c 	xori	r3,r3,128
8111d554:	043fffc4 	movi	r16,-1
8111d558:	18ffe004 	addi	r3,r3,-128
8111d55c:	003bd906 	br	8111c4c4 <__reset+0xfb0fc4c4>
8111d560:	d9c01d85 	stb	r7,118(sp)
8111d564:	003cb606 	br	8111c840 <__reset+0xfb0fc840>
8111d568:	d9c01d85 	stb	r7,118(sp)
8111d56c:	003d2106 	br	8111c9f4 <__reset+0xfb0fc9f4>
8111d570:	d9c01d85 	stb	r7,118(sp)
8111d574:	003d8e06 	br	8111cbb0 <__reset+0xfb0fcbb0>
8111d578:	d9c01d85 	stb	r7,118(sp)
8111d57c:	003db306 	br	8111cc4c <__reset+0xfb0fcc4c>
8111d580:	d9c01d85 	stb	r7,118(sp)
8111d584:	003c8a06 	br	8111c7b0 <__reset+0xfb0fc7b0>
8111d588:	dac02a17 	ldw	r11,168(sp)
8111d58c:	00800304 	movi	r2,12
8111d590:	58800015 	stw	r2,0(r11)
8111d594:	00bfffc4 	movi	r2,-1
8111d598:	003e8e06 	br	8111cfd4 <__reset+0xfb0fcfd4>
8111d59c:	d9c01d85 	stb	r7,118(sp)
8111d5a0:	003dc706 	br	8111ccc0 <__reset+0xfb0fccc0>
8111d5a4:	d9c01d85 	stb	r7,118(sp)
8111d5a8:	003ddf06 	br	8111cd28 <__reset+0xfb0fcd28>
8111d5ac:	d9c01d85 	stb	r7,118(sp)
8111d5b0:	003d3706 	br	8111ca90 <__reset+0xfb0fca90>
8111d5b4:	d9c01d85 	stb	r7,118(sp)
8111d5b8:	003c5406 	br	8111c70c <__reset+0xfb0fc70c>
8111d5bc:	d9c01d85 	stb	r7,118(sp)
8111d5c0:	003d1d06 	br	8111ca38 <__reset+0xfb0fca38>

8111d5c4 <__submore>:
8111d5c4:	defffa04 	addi	sp,sp,-24
8111d5c8:	de00012e 	bgeu	sp,et,8111d5d0 <__submore+0xc>
8111d5cc:	003b68fa 	trap	3
8111d5d0:	dc000015 	stw	r16,0(sp)
8111d5d4:	2821883a 	mov	r16,r5
8111d5d8:	29400c17 	ldw	r5,48(r5)
8111d5dc:	dfc00515 	stw	ra,20(sp)
8111d5e0:	dd000415 	stw	r20,16(sp)
8111d5e4:	dcc00315 	stw	r19,12(sp)
8111d5e8:	dc800215 	stw	r18,8(sp)
8111d5ec:	dc400115 	stw	r17,4(sp)
8111d5f0:	80801004 	addi	r2,r16,64
8111d5f4:	28801726 	beq	r5,r2,8111d654 <__submore+0x90>
8111d5f8:	84400d17 	ldw	r17,52(r16)
8111d5fc:	8c67883a 	add	r19,r17,r17
8111d600:	980d883a 	mov	r6,r19
8111d604:	1119a500 	call	81119a50 <_realloc_r>
8111d608:	1025883a 	mov	r18,r2
8111d60c:	10002226 	beq	r2,zero,8111d698 <__submore+0xd4>
8111d610:	1469883a 	add	r20,r2,r17
8111d614:	880d883a 	mov	r6,r17
8111d618:	100b883a 	mov	r5,r2
8111d61c:	a009883a 	mov	r4,r20
8111d620:	110e8e00 	call	8110e8e0 <memcpy>
8111d624:	0005883a 	mov	r2,zero
8111d628:	85000015 	stw	r20,0(r16)
8111d62c:	84800c15 	stw	r18,48(r16)
8111d630:	84c00d15 	stw	r19,52(r16)
8111d634:	dfc00517 	ldw	ra,20(sp)
8111d638:	dd000417 	ldw	r20,16(sp)
8111d63c:	dcc00317 	ldw	r19,12(sp)
8111d640:	dc800217 	ldw	r18,8(sp)
8111d644:	dc400117 	ldw	r17,4(sp)
8111d648:	dc000017 	ldw	r16,0(sp)
8111d64c:	dec00604 	addi	sp,sp,24
8111d650:	f800283a 	ret
8111d654:	04410004 	movi	r17,1024
8111d658:	880b883a 	mov	r5,r17
8111d65c:	110e0cc0 	call	8110e0cc <_malloc_r>
8111d660:	1007883a 	mov	r3,r2
8111d664:	10000c26 	beq	r2,zero,8111d698 <__submore+0xd4>
8111d668:	80801083 	ldbu	r2,66(r16)
8111d66c:	80c00c15 	stw	r3,48(r16)
8111d670:	84400d15 	stw	r17,52(r16)
8111d674:	1880ffc5 	stb	r2,1023(r3)
8111d678:	81401043 	ldbu	r5,65(r16)
8111d67c:	1900ff44 	addi	r4,r3,1021
8111d680:	0005883a 	mov	r2,zero
8111d684:	1940ff85 	stb	r5,1022(r3)
8111d688:	81401003 	ldbu	r5,64(r16)
8111d68c:	1940ff45 	stb	r5,1021(r3)
8111d690:	81000015 	stw	r4,0(r16)
8111d694:	003fe706 	br	8111d634 <__reset+0xfb0fd634>
8111d698:	00bfffc4 	movi	r2,-1
8111d69c:	003fe506 	br	8111d634 <__reset+0xfb0fd634>

8111d6a0 <_ungetc_r>:
8111d6a0:	00bfffc4 	movi	r2,-1
8111d6a4:	28806326 	beq	r5,r2,8111d834 <_ungetc_r+0x194>
8111d6a8:	defffb04 	addi	sp,sp,-20
8111d6ac:	de00012e 	bgeu	sp,et,8111d6b4 <_ungetc_r+0x14>
8111d6b0:	003b68fa 	trap	3
8111d6b4:	dcc00315 	stw	r19,12(sp)
8111d6b8:	dc400115 	stw	r17,4(sp)
8111d6bc:	dc000015 	stw	r16,0(sp)
8111d6c0:	dfc00415 	stw	ra,16(sp)
8111d6c4:	dc800215 	stw	r18,8(sp)
8111d6c8:	2023883a 	mov	r17,r4
8111d6cc:	3021883a 	mov	r16,r6
8111d6d0:	2827883a 	mov	r19,r5
8111d6d4:	20000226 	beq	r4,zero,8111d6e0 <_ungetc_r+0x40>
8111d6d8:	20800e17 	ldw	r2,56(r4)
8111d6dc:	10002e26 	beq	r2,zero,8111d798 <_ungetc_r+0xf8>
8111d6e0:	80c0030b 	ldhu	r3,12(r16)
8111d6e4:	1888000c 	andi	r2,r3,8192
8111d6e8:	1000051e 	bne	r2,zero,8111d700 <_ungetc_r+0x60>
8111d6ec:	81001917 	ldw	r4,100(r16)
8111d6f0:	00b7ffc4 	movi	r2,-8193
8111d6f4:	18c80014 	ori	r3,r3,8192
8111d6f8:	2084703a 	and	r2,r4,r2
8111d6fc:	80801915 	stw	r2,100(r16)
8111d700:	00bff7c4 	movi	r2,-33
8111d704:	1884703a 	and	r2,r3,r2
8111d708:	8080030d 	sth	r2,12(r16)
8111d70c:	1900010c 	andi	r4,r3,4
8111d710:	2000061e 	bne	r4,zero,8111d72c <_ungetc_r+0x8c>
8111d714:	1900040c 	andi	r4,r3,16
8111d718:	20001d26 	beq	r4,zero,8111d790 <_ungetc_r+0xf0>
8111d71c:	18c0020c 	andi	r3,r3,8
8111d720:	1800331e 	bne	r3,zero,8111d7f0 <_ungetc_r+0x150>
8111d724:	10800114 	ori	r2,r2,4
8111d728:	8080030d 	sth	r2,12(r16)
8111d72c:	80800c17 	ldw	r2,48(r16)
8111d730:	9c803fcc 	andi	r18,r19,255
8111d734:	10001a26 	beq	r2,zero,8111d7a0 <_ungetc_r+0x100>
8111d738:	80c00117 	ldw	r3,4(r16)
8111d73c:	80800d17 	ldw	r2,52(r16)
8111d740:	18800f0e 	bge	r3,r2,8111d780 <_ungetc_r+0xe0>
8111d744:	80c00017 	ldw	r3,0(r16)
8111d748:	9005883a 	mov	r2,r18
8111d74c:	193fffc4 	addi	r4,r3,-1
8111d750:	81000015 	stw	r4,0(r16)
8111d754:	1cffffc5 	stb	r19,-1(r3)
8111d758:	80c00117 	ldw	r3,4(r16)
8111d75c:	18c00044 	addi	r3,r3,1
8111d760:	80c00115 	stw	r3,4(r16)
8111d764:	dfc00417 	ldw	ra,16(sp)
8111d768:	dcc00317 	ldw	r19,12(sp)
8111d76c:	dc800217 	ldw	r18,8(sp)
8111d770:	dc400117 	ldw	r17,4(sp)
8111d774:	dc000017 	ldw	r16,0(sp)
8111d778:	dec00504 	addi	sp,sp,20
8111d77c:	f800283a 	ret
8111d780:	800b883a 	mov	r5,r16
8111d784:	8809883a 	mov	r4,r17
8111d788:	111d5c40 	call	8111d5c4 <__submore>
8111d78c:	103fed26 	beq	r2,zero,8111d744 <__reset+0xfb0fd744>
8111d790:	00bfffc4 	movi	r2,-1
8111d794:	003ff306 	br	8111d764 <__reset+0xfb0fd764>
8111d798:	11173ac0 	call	811173ac <__sinit>
8111d79c:	003fd006 	br	8111d6e0 <__reset+0xfb0fd6e0>
8111d7a0:	80c00417 	ldw	r3,16(r16)
8111d7a4:	80800017 	ldw	r2,0(r16)
8111d7a8:	18000326 	beq	r3,zero,8111d7b8 <_ungetc_r+0x118>
8111d7ac:	1880022e 	bgeu	r3,r2,8111d7b8 <_ungetc_r+0x118>
8111d7b0:	10ffffc3 	ldbu	r3,-1(r2)
8111d7b4:	90c01826 	beq	r18,r3,8111d818 <_ungetc_r+0x178>
8111d7b8:	81400117 	ldw	r5,4(r16)
8111d7bc:	80800e15 	stw	r2,56(r16)
8111d7c0:	008000c4 	movi	r2,3
8111d7c4:	81001004 	addi	r4,r16,64
8111d7c8:	80c01084 	addi	r3,r16,66
8111d7cc:	80800d15 	stw	r2,52(r16)
8111d7d0:	00800044 	movi	r2,1
8111d7d4:	80800115 	stw	r2,4(r16)
8111d7d8:	81400f15 	stw	r5,60(r16)
8111d7dc:	81000c15 	stw	r4,48(r16)
8111d7e0:	84c01085 	stb	r19,66(r16)
8111d7e4:	80c00015 	stw	r3,0(r16)
8111d7e8:	9005883a 	mov	r2,r18
8111d7ec:	003fdd06 	br	8111d764 <__reset+0xfb0fd764>
8111d7f0:	800b883a 	mov	r5,r16
8111d7f4:	8809883a 	mov	r4,r17
8111d7f8:	1116fb00 	call	81116fb0 <_fflush_r>
8111d7fc:	103fe41e 	bne	r2,zero,8111d790 <__reset+0xfb0fd790>
8111d800:	8080030b 	ldhu	r2,12(r16)
8111d804:	00fffdc4 	movi	r3,-9
8111d808:	80000215 	stw	zero,8(r16)
8111d80c:	1884703a 	and	r2,r3,r2
8111d810:	80000615 	stw	zero,24(r16)
8111d814:	003fc306 	br	8111d724 <__reset+0xfb0fd724>
8111d818:	80c00117 	ldw	r3,4(r16)
8111d81c:	10bfffc4 	addi	r2,r2,-1
8111d820:	80800015 	stw	r2,0(r16)
8111d824:	18800044 	addi	r2,r3,1
8111d828:	80800115 	stw	r2,4(r16)
8111d82c:	9005883a 	mov	r2,r18
8111d830:	003fcc06 	br	8111d764 <__reset+0xfb0fd764>
8111d834:	00bfffc4 	movi	r2,-1
8111d838:	f800283a 	ret

8111d83c <ungetc>:
8111d83c:	00a04534 	movhi	r2,33044
8111d840:	10b3e404 	addi	r2,r2,-12400
8111d844:	280d883a 	mov	r6,r5
8111d848:	200b883a 	mov	r5,r4
8111d84c:	11000017 	ldw	r4,0(r2)
8111d850:	111d6a01 	jmpi	8111d6a0 <_ungetc_r>

8111d854 <__sprint_r.part.0>:
8111d854:	defff604 	addi	sp,sp,-40
8111d858:	de00012e 	bgeu	sp,et,8111d860 <__sprint_r.part.0+0xc>
8111d85c:	003b68fa 	trap	3
8111d860:	28801917 	ldw	r2,100(r5)
8111d864:	dd400515 	stw	r21,20(sp)
8111d868:	dfc00915 	stw	ra,36(sp)
8111d86c:	df000815 	stw	fp,32(sp)
8111d870:	ddc00715 	stw	r23,28(sp)
8111d874:	dd800615 	stw	r22,24(sp)
8111d878:	dd000415 	stw	r20,16(sp)
8111d87c:	dcc00315 	stw	r19,12(sp)
8111d880:	dc800215 	stw	r18,8(sp)
8111d884:	dc400115 	stw	r17,4(sp)
8111d888:	dc000015 	stw	r16,0(sp)
8111d88c:	1088000c 	andi	r2,r2,8192
8111d890:	302b883a 	mov	r21,r6
8111d894:	10002e26 	beq	r2,zero,8111d950 <__sprint_r.part.0+0xfc>
8111d898:	30800217 	ldw	r2,8(r6)
8111d89c:	35800017 	ldw	r22,0(r6)
8111d8a0:	10002926 	beq	r2,zero,8111d948 <__sprint_r.part.0+0xf4>
8111d8a4:	2827883a 	mov	r19,r5
8111d8a8:	2029883a 	mov	r20,r4
8111d8ac:	b5c00104 	addi	r23,r22,4
8111d8b0:	04bfffc4 	movi	r18,-1
8111d8b4:	bc400017 	ldw	r17,0(r23)
8111d8b8:	b4000017 	ldw	r16,0(r22)
8111d8bc:	0039883a 	mov	fp,zero
8111d8c0:	8822d0ba 	srli	r17,r17,2
8111d8c4:	8800031e 	bne	r17,zero,8111d8d4 <__sprint_r.part.0+0x80>
8111d8c8:	00001806 	br	8111d92c <__sprint_r.part.0+0xd8>
8111d8cc:	84000104 	addi	r16,r16,4
8111d8d0:	8f001526 	beq	r17,fp,8111d928 <__sprint_r.part.0+0xd4>
8111d8d4:	81400017 	ldw	r5,0(r16)
8111d8d8:	980d883a 	mov	r6,r19
8111d8dc:	a009883a 	mov	r4,r20
8111d8e0:	111f3580 	call	8111f358 <_fputwc_r>
8111d8e4:	e7000044 	addi	fp,fp,1
8111d8e8:	14bff81e 	bne	r2,r18,8111d8cc <__reset+0xfb0fd8cc>
8111d8ec:	9005883a 	mov	r2,r18
8111d8f0:	a8000215 	stw	zero,8(r21)
8111d8f4:	a8000115 	stw	zero,4(r21)
8111d8f8:	dfc00917 	ldw	ra,36(sp)
8111d8fc:	df000817 	ldw	fp,32(sp)
8111d900:	ddc00717 	ldw	r23,28(sp)
8111d904:	dd800617 	ldw	r22,24(sp)
8111d908:	dd400517 	ldw	r21,20(sp)
8111d90c:	dd000417 	ldw	r20,16(sp)
8111d910:	dcc00317 	ldw	r19,12(sp)
8111d914:	dc800217 	ldw	r18,8(sp)
8111d918:	dc400117 	ldw	r17,4(sp)
8111d91c:	dc000017 	ldw	r16,0(sp)
8111d920:	dec00a04 	addi	sp,sp,40
8111d924:	f800283a 	ret
8111d928:	a8800217 	ldw	r2,8(r21)
8111d92c:	8c63883a 	add	r17,r17,r17
8111d930:	8c63883a 	add	r17,r17,r17
8111d934:	1445c83a 	sub	r2,r2,r17
8111d938:	a8800215 	stw	r2,8(r21)
8111d93c:	b5800204 	addi	r22,r22,8
8111d940:	bdc00204 	addi	r23,r23,8
8111d944:	103fdb1e 	bne	r2,zero,8111d8b4 <__reset+0xfb0fd8b4>
8111d948:	0005883a 	mov	r2,zero
8111d94c:	003fe806 	br	8111d8f0 <__reset+0xfb0fd8f0>
8111d950:	1117b5c0 	call	81117b5c <__sfvwrite_r>
8111d954:	003fe606 	br	8111d8f0 <__reset+0xfb0fd8f0>

8111d958 <__sprint_r>:
8111d958:	30c00217 	ldw	r3,8(r6)
8111d95c:	18000126 	beq	r3,zero,8111d964 <__sprint_r+0xc>
8111d960:	111d8541 	jmpi	8111d854 <__sprint_r.part.0>
8111d964:	30000115 	stw	zero,4(r6)
8111d968:	0005883a 	mov	r2,zero
8111d96c:	f800283a 	ret

8111d970 <___vfiprintf_internal_r>:
8111d970:	deffc904 	addi	sp,sp,-220
8111d974:	de00012e 	bgeu	sp,et,8111d97c <___vfiprintf_internal_r+0xc>
8111d978:	003b68fa 	trap	3
8111d97c:	df003515 	stw	fp,212(sp)
8111d980:	dd003115 	stw	r20,196(sp)
8111d984:	dfc03615 	stw	ra,216(sp)
8111d988:	ddc03415 	stw	r23,208(sp)
8111d98c:	dd803315 	stw	r22,204(sp)
8111d990:	dd403215 	stw	r21,200(sp)
8111d994:	dcc03015 	stw	r19,192(sp)
8111d998:	dc802f15 	stw	r18,188(sp)
8111d99c:	dc402e15 	stw	r17,184(sp)
8111d9a0:	dc002d15 	stw	r16,180(sp)
8111d9a4:	d9002015 	stw	r4,128(sp)
8111d9a8:	d9c02215 	stw	r7,136(sp)
8111d9ac:	2829883a 	mov	r20,r5
8111d9b0:	3039883a 	mov	fp,r6
8111d9b4:	20000226 	beq	r4,zero,8111d9c0 <___vfiprintf_internal_r+0x50>
8111d9b8:	20800e17 	ldw	r2,56(r4)
8111d9bc:	1000cf26 	beq	r2,zero,8111dcfc <___vfiprintf_internal_r+0x38c>
8111d9c0:	a080030b 	ldhu	r2,12(r20)
8111d9c4:	10c8000c 	andi	r3,r2,8192
8111d9c8:	1800061e 	bne	r3,zero,8111d9e4 <___vfiprintf_internal_r+0x74>
8111d9cc:	a1001917 	ldw	r4,100(r20)
8111d9d0:	00f7ffc4 	movi	r3,-8193
8111d9d4:	10880014 	ori	r2,r2,8192
8111d9d8:	20c6703a 	and	r3,r4,r3
8111d9dc:	a080030d 	sth	r2,12(r20)
8111d9e0:	a0c01915 	stw	r3,100(r20)
8111d9e4:	10c0020c 	andi	r3,r2,8
8111d9e8:	1800a926 	beq	r3,zero,8111dc90 <___vfiprintf_internal_r+0x320>
8111d9ec:	a0c00417 	ldw	r3,16(r20)
8111d9f0:	1800a726 	beq	r3,zero,8111dc90 <___vfiprintf_internal_r+0x320>
8111d9f4:	1080068c 	andi	r2,r2,26
8111d9f8:	00c00284 	movi	r3,10
8111d9fc:	10c0ac26 	beq	r2,r3,8111dcb0 <___vfiprintf_internal_r+0x340>
8111da00:	da801a04 	addi	r10,sp,104
8111da04:	da801e15 	stw	r10,120(sp)
8111da08:	d8801e17 	ldw	r2,120(sp)
8111da0c:	da8019c4 	addi	r10,sp,103
8111da10:	05a04534 	movhi	r22,33044
8111da14:	05e04534 	movhi	r23,33044
8111da18:	da801f15 	stw	r10,124(sp)
8111da1c:	1295c83a 	sub	r10,r2,r10
8111da20:	b5ab7204 	addi	r22,r22,-21048
8111da24:	bdeb6e04 	addi	r23,r23,-21064
8111da28:	dec01a15 	stw	sp,104(sp)
8111da2c:	d8001c15 	stw	zero,112(sp)
8111da30:	d8001b15 	stw	zero,108(sp)
8111da34:	d8002615 	stw	zero,152(sp)
8111da38:	d8002315 	stw	zero,140(sp)
8111da3c:	da802715 	stw	r10,156(sp)
8111da40:	d811883a 	mov	r8,sp
8111da44:	dd002115 	stw	r20,132(sp)
8111da48:	e021883a 	mov	r16,fp
8111da4c:	80800007 	ldb	r2,0(r16)
8111da50:	1003ea26 	beq	r2,zero,8111e9fc <___vfiprintf_internal_r+0x108c>
8111da54:	00c00944 	movi	r3,37
8111da58:	8025883a 	mov	r18,r16
8111da5c:	10c0021e 	bne	r2,r3,8111da68 <___vfiprintf_internal_r+0xf8>
8111da60:	00001606 	br	8111dabc <___vfiprintf_internal_r+0x14c>
8111da64:	10c00326 	beq	r2,r3,8111da74 <___vfiprintf_internal_r+0x104>
8111da68:	94800044 	addi	r18,r18,1
8111da6c:	90800007 	ldb	r2,0(r18)
8111da70:	103ffc1e 	bne	r2,zero,8111da64 <__reset+0xfb0fda64>
8111da74:	9423c83a 	sub	r17,r18,r16
8111da78:	88001026 	beq	r17,zero,8111dabc <___vfiprintf_internal_r+0x14c>
8111da7c:	d8c01c17 	ldw	r3,112(sp)
8111da80:	d8801b17 	ldw	r2,108(sp)
8111da84:	44000015 	stw	r16,0(r8)
8111da88:	88c7883a 	add	r3,r17,r3
8111da8c:	10800044 	addi	r2,r2,1
8111da90:	44400115 	stw	r17,4(r8)
8111da94:	d8c01c15 	stw	r3,112(sp)
8111da98:	d8801b15 	stw	r2,108(sp)
8111da9c:	010001c4 	movi	r4,7
8111daa0:	2080760e 	bge	r4,r2,8111dc7c <___vfiprintf_internal_r+0x30c>
8111daa4:	1803821e 	bne	r3,zero,8111e8b0 <___vfiprintf_internal_r+0xf40>
8111daa8:	da802317 	ldw	r10,140(sp)
8111daac:	d8001b15 	stw	zero,108(sp)
8111dab0:	d811883a 	mov	r8,sp
8111dab4:	5455883a 	add	r10,r10,r17
8111dab8:	da802315 	stw	r10,140(sp)
8111dabc:	90800007 	ldb	r2,0(r18)
8111dac0:	10044626 	beq	r2,zero,8111ebdc <___vfiprintf_internal_r+0x126c>
8111dac4:	90c00047 	ldb	r3,1(r18)
8111dac8:	94000044 	addi	r16,r18,1
8111dacc:	d8001d85 	stb	zero,118(sp)
8111dad0:	0009883a 	mov	r4,zero
8111dad4:	000f883a 	mov	r7,zero
8111dad8:	027fffc4 	movi	r9,-1
8111dadc:	0023883a 	mov	r17,zero
8111dae0:	0029883a 	mov	r20,zero
8111dae4:	01401604 	movi	r5,88
8111dae8:	01800244 	movi	r6,9
8111daec:	03400a84 	movi	r13,42
8111daf0:	03001b04 	movi	r12,108
8111daf4:	84000044 	addi	r16,r16,1
8111daf8:	18bff804 	addi	r2,r3,-32
8111dafc:	28827336 	bltu	r5,r2,8111e4cc <___vfiprintf_internal_r+0xb5c>
8111db00:	100490ba 	slli	r2,r2,2
8111db04:	02a044b4 	movhi	r10,33042
8111db08:	52b6c604 	addi	r10,r10,-9448
8111db0c:	1285883a 	add	r2,r2,r10
8111db10:	10800017 	ldw	r2,0(r2)
8111db14:	1000683a 	jmp	r2
8111db18:	8111e200 	call	88111e20 <__reset+0x20f1e20>
8111db1c:	8111e4cc 	andi	r4,r16,18323
8111db20:	8111e4cc 	andi	r4,r16,18323
8111db24:	8111e220 	cmpeqi	r4,r16,18312
8111db28:	8111e4cc 	andi	r4,r16,18323
8111db2c:	8111e4cc 	andi	r4,r16,18323
8111db30:	8111e4cc 	andi	r4,r16,18323
8111db34:	8111e4cc 	andi	r4,r16,18323
8111db38:	8111e4cc 	andi	r4,r16,18323
8111db3c:	8111e4cc 	andi	r4,r16,18323
8111db40:	8111e408 	cmpgei	r4,r16,18320
8111db44:	8111e424 	muli	r4,r16,18320
8111db48:	8111e4cc 	andi	r4,r16,18323
8111db4c:	8111dd0c 	andi	r4,r16,18292
8111db50:	8111e434 	orhi	r4,r16,18320
8111db54:	8111e4cc 	andi	r4,r16,18323
8111db58:	8111e22c 	andhi	r4,r16,18312
8111db5c:	8111e238 	rdprs	r4,r16,18312
8111db60:	8111e238 	rdprs	r4,r16,18312
8111db64:	8111e238 	rdprs	r4,r16,18312
8111db68:	8111e238 	rdprs	r4,r16,18312
8111db6c:	8111e238 	rdprs	r4,r16,18312
8111db70:	8111e238 	rdprs	r4,r16,18312
8111db74:	8111e238 	rdprs	r4,r16,18312
8111db78:	8111e238 	rdprs	r4,r16,18312
8111db7c:	8111e238 	rdprs	r4,r16,18312
8111db80:	8111e4cc 	andi	r4,r16,18323
8111db84:	8111e4cc 	andi	r4,r16,18323
8111db88:	8111e4cc 	andi	r4,r16,18323
8111db8c:	8111e4cc 	andi	r4,r16,18323
8111db90:	8111e4cc 	andi	r4,r16,18323
8111db94:	8111e4cc 	andi	r4,r16,18323
8111db98:	8111e4cc 	andi	r4,r16,18323
8111db9c:	8111e4cc 	andi	r4,r16,18323
8111dba0:	8111e4cc 	andi	r4,r16,18323
8111dba4:	8111e4cc 	andi	r4,r16,18323
8111dba8:	8111e264 	muli	r4,r16,18313
8111dbac:	8111e4cc 	andi	r4,r16,18323
8111dbb0:	8111e4cc 	andi	r4,r16,18323
8111dbb4:	8111e4cc 	andi	r4,r16,18323
8111dbb8:	8111e4cc 	andi	r4,r16,18323
8111dbbc:	8111e4cc 	andi	r4,r16,18323
8111dbc0:	8111e4cc 	andi	r4,r16,18323
8111dbc4:	8111e4cc 	andi	r4,r16,18323
8111dbc8:	8111e4cc 	andi	r4,r16,18323
8111dbcc:	8111e4cc 	andi	r4,r16,18323
8111dbd0:	8111e4cc 	andi	r4,r16,18323
8111dbd4:	8111e29c 	xori	r4,r16,18314
8111dbd8:	8111e4cc 	andi	r4,r16,18323
8111dbdc:	8111e4cc 	andi	r4,r16,18323
8111dbe0:	8111e4cc 	andi	r4,r16,18323
8111dbe4:	8111e4cc 	andi	r4,r16,18323
8111dbe8:	8111e4cc 	andi	r4,r16,18323
8111dbec:	8111e2f4 	orhi	r4,r16,18315
8111dbf0:	8111e4cc 	andi	r4,r16,18323
8111dbf4:	8111e4cc 	andi	r4,r16,18323
8111dbf8:	8111e364 	muli	r4,r16,18317
8111dbfc:	8111e4cc 	andi	r4,r16,18323
8111dc00:	8111e4cc 	andi	r4,r16,18323
8111dc04:	8111e4cc 	andi	r4,r16,18323
8111dc08:	8111e4cc 	andi	r4,r16,18323
8111dc0c:	8111e4cc 	andi	r4,r16,18323
8111dc10:	8111e4cc 	andi	r4,r16,18323
8111dc14:	8111e4cc 	andi	r4,r16,18323
8111dc18:	8111e4cc 	andi	r4,r16,18323
8111dc1c:	8111e4cc 	andi	r4,r16,18323
8111dc20:	8111e4cc 	andi	r4,r16,18323
8111dc24:	8111e110 	cmplti	r4,r16,18308
8111dc28:	8111e13c 	xorhi	r4,r16,18308
8111dc2c:	8111e4cc 	andi	r4,r16,18323
8111dc30:	8111e4cc 	andi	r4,r16,18323
8111dc34:	8111e4cc 	andi	r4,r16,18323
8111dc38:	8111e474 	orhi	r4,r16,18321
8111dc3c:	8111e13c 	xorhi	r4,r16,18308
8111dc40:	8111e4cc 	andi	r4,r16,18323
8111dc44:	8111e4cc 	andi	r4,r16,18323
8111dc48:	8111dfd0 	cmplti	r4,r16,18303
8111dc4c:	8111e4cc 	andi	r4,r16,18323
8111dc50:	8111dfe0 	cmpeqi	r4,r16,18303
8111dc54:	8111e01c 	xori	r4,r16,18304
8111dc58:	8111dd18 	cmpnei	r4,r16,18292
8111dc5c:	8111dfc4 	addi	r4,r16,18303
8111dc60:	8111e4cc 	andi	r4,r16,18323
8111dc64:	8111e3a0 	cmpeqi	r4,r16,18318
8111dc68:	8111e4cc 	andi	r4,r16,18323
8111dc6c:	8111e3f8 	rdprs	r4,r16,18319
8111dc70:	8111e4cc 	andi	r4,r16,18323
8111dc74:	8111e4cc 	andi	r4,r16,18323
8111dc78:	8111e0bc 	xorhi	r4,r16,18306
8111dc7c:	42000204 	addi	r8,r8,8
8111dc80:	da802317 	ldw	r10,140(sp)
8111dc84:	5455883a 	add	r10,r10,r17
8111dc88:	da802315 	stw	r10,140(sp)
8111dc8c:	003f8b06 	br	8111dabc <__reset+0xfb0fdabc>
8111dc90:	d9002017 	ldw	r4,128(sp)
8111dc94:	a00b883a 	mov	r5,r20
8111dc98:	111533c0 	call	8111533c <__swsetup_r>
8111dc9c:	1003b11e 	bne	r2,zero,8111eb64 <___vfiprintf_internal_r+0x11f4>
8111dca0:	a080030b 	ldhu	r2,12(r20)
8111dca4:	00c00284 	movi	r3,10
8111dca8:	1080068c 	andi	r2,r2,26
8111dcac:	10ff541e 	bne	r2,r3,8111da00 <__reset+0xfb0fda00>
8111dcb0:	a080038f 	ldh	r2,14(r20)
8111dcb4:	103f5216 	blt	r2,zero,8111da00 <__reset+0xfb0fda00>
8111dcb8:	d9c02217 	ldw	r7,136(sp)
8111dcbc:	d9002017 	ldw	r4,128(sp)
8111dcc0:	e00d883a 	mov	r6,fp
8111dcc4:	a00b883a 	mov	r5,r20
8111dcc8:	111edf00 	call	8111edf0 <__sbprintf>
8111dccc:	dfc03617 	ldw	ra,216(sp)
8111dcd0:	df003517 	ldw	fp,212(sp)
8111dcd4:	ddc03417 	ldw	r23,208(sp)
8111dcd8:	dd803317 	ldw	r22,204(sp)
8111dcdc:	dd403217 	ldw	r21,200(sp)
8111dce0:	dd003117 	ldw	r20,196(sp)
8111dce4:	dcc03017 	ldw	r19,192(sp)
8111dce8:	dc802f17 	ldw	r18,188(sp)
8111dcec:	dc402e17 	ldw	r17,184(sp)
8111dcf0:	dc002d17 	ldw	r16,180(sp)
8111dcf4:	dec03704 	addi	sp,sp,220
8111dcf8:	f800283a 	ret
8111dcfc:	11173ac0 	call	811173ac <__sinit>
8111dd00:	003f2f06 	br	8111d9c0 <__reset+0xfb0fd9c0>
8111dd04:	0463c83a 	sub	r17,zero,r17
8111dd08:	d8802215 	stw	r2,136(sp)
8111dd0c:	a5000114 	ori	r20,r20,4
8111dd10:	80c00007 	ldb	r3,0(r16)
8111dd14:	003f7706 	br	8111daf4 <__reset+0xfb0fdaf4>
8111dd18:	00800c04 	movi	r2,48
8111dd1c:	da802217 	ldw	r10,136(sp)
8111dd20:	d8801d05 	stb	r2,116(sp)
8111dd24:	00801e04 	movi	r2,120
8111dd28:	d8801d45 	stb	r2,117(sp)
8111dd2c:	d8001d85 	stb	zero,118(sp)
8111dd30:	50c00104 	addi	r3,r10,4
8111dd34:	54800017 	ldw	r18,0(r10)
8111dd38:	0027883a 	mov	r19,zero
8111dd3c:	a0800094 	ori	r2,r20,2
8111dd40:	48030b16 	blt	r9,zero,8111e970 <___vfiprintf_internal_r+0x1000>
8111dd44:	00bfdfc4 	movi	r2,-129
8111dd48:	a096703a 	and	r11,r20,r2
8111dd4c:	d8c02215 	stw	r3,136(sp)
8111dd50:	5d000094 	ori	r20,r11,2
8111dd54:	90032b1e 	bne	r18,zero,8111ea04 <___vfiprintf_internal_r+0x1094>
8111dd58:	00a04534 	movhi	r2,33044
8111dd5c:	10aadc04 	addi	r2,r2,-21648
8111dd60:	d8802615 	stw	r2,152(sp)
8111dd64:	0039883a 	mov	fp,zero
8111dd68:	48017b1e 	bne	r9,zero,8111e358 <___vfiprintf_internal_r+0x9e8>
8111dd6c:	0013883a 	mov	r9,zero
8111dd70:	0027883a 	mov	r19,zero
8111dd74:	dd401a04 	addi	r21,sp,104
8111dd78:	4825883a 	mov	r18,r9
8111dd7c:	4cc0010e 	bge	r9,r19,8111dd84 <___vfiprintf_internal_r+0x414>
8111dd80:	9825883a 	mov	r18,r19
8111dd84:	e7003fcc 	andi	fp,fp,255
8111dd88:	e700201c 	xori	fp,fp,128
8111dd8c:	e73fe004 	addi	fp,fp,-128
8111dd90:	e0000126 	beq	fp,zero,8111dd98 <___vfiprintf_internal_r+0x428>
8111dd94:	94800044 	addi	r18,r18,1
8111dd98:	a380008c 	andi	r14,r20,2
8111dd9c:	70000126 	beq	r14,zero,8111dda4 <___vfiprintf_internal_r+0x434>
8111dda0:	94800084 	addi	r18,r18,2
8111dda4:	a700210c 	andi	fp,r20,132
8111dda8:	e001df1e 	bne	fp,zero,8111e528 <___vfiprintf_internal_r+0xbb8>
8111ddac:	8c87c83a 	sub	r3,r17,r18
8111ddb0:	00c1dd0e 	bge	zero,r3,8111e528 <___vfiprintf_internal_r+0xbb8>
8111ddb4:	01c00404 	movi	r7,16
8111ddb8:	d8801c17 	ldw	r2,112(sp)
8111ddbc:	38c3ad0e 	bge	r7,r3,8111ec74 <___vfiprintf_internal_r+0x1304>
8111ddc0:	02a04534 	movhi	r10,33044
8111ddc4:	52ab7204 	addi	r10,r10,-21048
8111ddc8:	dc002915 	stw	r16,164(sp)
8111ddcc:	d9801b17 	ldw	r6,108(sp)
8111ddd0:	da802415 	stw	r10,144(sp)
8111ddd4:	03c001c4 	movi	r15,7
8111ddd8:	da402515 	stw	r9,148(sp)
8111dddc:	db802815 	stw	r14,160(sp)
8111dde0:	1821883a 	mov	r16,r3
8111dde4:	00000506 	br	8111ddfc <___vfiprintf_internal_r+0x48c>
8111dde8:	31400084 	addi	r5,r6,2
8111ddec:	42000204 	addi	r8,r8,8
8111ddf0:	200d883a 	mov	r6,r4
8111ddf4:	843ffc04 	addi	r16,r16,-16
8111ddf8:	3c000d0e 	bge	r7,r16,8111de30 <___vfiprintf_internal_r+0x4c0>
8111ddfc:	10800404 	addi	r2,r2,16
8111de00:	31000044 	addi	r4,r6,1
8111de04:	45800015 	stw	r22,0(r8)
8111de08:	41c00115 	stw	r7,4(r8)
8111de0c:	d8801c15 	stw	r2,112(sp)
8111de10:	d9001b15 	stw	r4,108(sp)
8111de14:	793ff40e 	bge	r15,r4,8111dde8 <__reset+0xfb0fdde8>
8111de18:	1001b51e 	bne	r2,zero,8111e4f0 <___vfiprintf_internal_r+0xb80>
8111de1c:	843ffc04 	addi	r16,r16,-16
8111de20:	000d883a 	mov	r6,zero
8111de24:	01400044 	movi	r5,1
8111de28:	d811883a 	mov	r8,sp
8111de2c:	3c3ff316 	blt	r7,r16,8111ddfc <__reset+0xfb0fddfc>
8111de30:	8007883a 	mov	r3,r16
8111de34:	da402517 	ldw	r9,148(sp)
8111de38:	db802817 	ldw	r14,160(sp)
8111de3c:	dc002917 	ldw	r16,164(sp)
8111de40:	da802417 	ldw	r10,144(sp)
8111de44:	1885883a 	add	r2,r3,r2
8111de48:	40c00115 	stw	r3,4(r8)
8111de4c:	42800015 	stw	r10,0(r8)
8111de50:	d8801c15 	stw	r2,112(sp)
8111de54:	d9401b15 	stw	r5,108(sp)
8111de58:	00c001c4 	movi	r3,7
8111de5c:	19426016 	blt	r3,r5,8111e7e0 <___vfiprintf_internal_r+0xe70>
8111de60:	d8c01d87 	ldb	r3,118(sp)
8111de64:	42000204 	addi	r8,r8,8
8111de68:	29000044 	addi	r4,r5,1
8111de6c:	1801b31e 	bne	r3,zero,8111e53c <___vfiprintf_internal_r+0xbcc>
8111de70:	7001c026 	beq	r14,zero,8111e574 <___vfiprintf_internal_r+0xc04>
8111de74:	d8c01d04 	addi	r3,sp,116
8111de78:	10800084 	addi	r2,r2,2
8111de7c:	40c00015 	stw	r3,0(r8)
8111de80:	00c00084 	movi	r3,2
8111de84:	40c00115 	stw	r3,4(r8)
8111de88:	d8801c15 	stw	r2,112(sp)
8111de8c:	d9001b15 	stw	r4,108(sp)
8111de90:	00c001c4 	movi	r3,7
8111de94:	1902650e 	bge	r3,r4,8111e82c <___vfiprintf_internal_r+0xebc>
8111de98:	10029a1e 	bne	r2,zero,8111e904 <___vfiprintf_internal_r+0xf94>
8111de9c:	00c02004 	movi	r3,128
8111dea0:	01000044 	movi	r4,1
8111dea4:	000b883a 	mov	r5,zero
8111dea8:	d811883a 	mov	r8,sp
8111deac:	e0c1b31e 	bne	fp,r3,8111e57c <___vfiprintf_internal_r+0xc0c>
8111deb0:	8cb9c83a 	sub	fp,r17,r18
8111deb4:	0701b10e 	bge	zero,fp,8111e57c <___vfiprintf_internal_r+0xc0c>
8111deb8:	01c00404 	movi	r7,16
8111debc:	3f03890e 	bge	r7,fp,8111ece4 <___vfiprintf_internal_r+0x1374>
8111dec0:	00e04534 	movhi	r3,33044
8111dec4:	18eb6e04 	addi	r3,r3,-21064
8111dec8:	d8c02415 	stw	r3,144(sp)
8111decc:	8007883a 	mov	r3,r16
8111ded0:	034001c4 	movi	r13,7
8111ded4:	e021883a 	mov	r16,fp
8111ded8:	da402515 	stw	r9,148(sp)
8111dedc:	1839883a 	mov	fp,r3
8111dee0:	00000506 	br	8111def8 <___vfiprintf_internal_r+0x588>
8111dee4:	29800084 	addi	r6,r5,2
8111dee8:	42000204 	addi	r8,r8,8
8111deec:	180b883a 	mov	r5,r3
8111def0:	843ffc04 	addi	r16,r16,-16
8111def4:	3c000d0e 	bge	r7,r16,8111df2c <___vfiprintf_internal_r+0x5bc>
8111def8:	10800404 	addi	r2,r2,16
8111defc:	28c00044 	addi	r3,r5,1
8111df00:	45c00015 	stw	r23,0(r8)
8111df04:	41c00115 	stw	r7,4(r8)
8111df08:	d8801c15 	stw	r2,112(sp)
8111df0c:	d8c01b15 	stw	r3,108(sp)
8111df10:	68fff40e 	bge	r13,r3,8111dee4 <__reset+0xfb0fdee4>
8111df14:	1002241e 	bne	r2,zero,8111e7a8 <___vfiprintf_internal_r+0xe38>
8111df18:	843ffc04 	addi	r16,r16,-16
8111df1c:	01800044 	movi	r6,1
8111df20:	000b883a 	mov	r5,zero
8111df24:	d811883a 	mov	r8,sp
8111df28:	3c3ff316 	blt	r7,r16,8111def8 <__reset+0xfb0fdef8>
8111df2c:	da402517 	ldw	r9,148(sp)
8111df30:	e007883a 	mov	r3,fp
8111df34:	8039883a 	mov	fp,r16
8111df38:	1821883a 	mov	r16,r3
8111df3c:	d8c02417 	ldw	r3,144(sp)
8111df40:	1705883a 	add	r2,r2,fp
8111df44:	47000115 	stw	fp,4(r8)
8111df48:	40c00015 	stw	r3,0(r8)
8111df4c:	d8801c15 	stw	r2,112(sp)
8111df50:	d9801b15 	stw	r6,108(sp)
8111df54:	00c001c4 	movi	r3,7
8111df58:	19827616 	blt	r3,r6,8111e934 <___vfiprintf_internal_r+0xfc4>
8111df5c:	4cf9c83a 	sub	fp,r9,r19
8111df60:	42000204 	addi	r8,r8,8
8111df64:	31000044 	addi	r4,r6,1
8111df68:	300b883a 	mov	r5,r6
8111df6c:	07018516 	blt	zero,fp,8111e584 <___vfiprintf_internal_r+0xc14>
8111df70:	9885883a 	add	r2,r19,r2
8111df74:	45400015 	stw	r21,0(r8)
8111df78:	44c00115 	stw	r19,4(r8)
8111df7c:	d8801c15 	stw	r2,112(sp)
8111df80:	d9001b15 	stw	r4,108(sp)
8111df84:	00c001c4 	movi	r3,7
8111df88:	1901dd0e 	bge	r3,r4,8111e700 <___vfiprintf_internal_r+0xd90>
8111df8c:	1002401e 	bne	r2,zero,8111e890 <___vfiprintf_internal_r+0xf20>
8111df90:	d8001b15 	stw	zero,108(sp)
8111df94:	a2c0010c 	andi	r11,r20,4
8111df98:	58000226 	beq	r11,zero,8111dfa4 <___vfiprintf_internal_r+0x634>
8111df9c:	8ca7c83a 	sub	r19,r17,r18
8111dfa0:	04c2f216 	blt	zero,r19,8111eb6c <___vfiprintf_internal_r+0x11fc>
8111dfa4:	8c80010e 	bge	r17,r18,8111dfac <___vfiprintf_internal_r+0x63c>
8111dfa8:	9023883a 	mov	r17,r18
8111dfac:	da802317 	ldw	r10,140(sp)
8111dfb0:	5455883a 	add	r10,r10,r17
8111dfb4:	da802315 	stw	r10,140(sp)
8111dfb8:	d8001b15 	stw	zero,108(sp)
8111dfbc:	d811883a 	mov	r8,sp
8111dfc0:	003ea206 	br	8111da4c <__reset+0xfb0fda4c>
8111dfc4:	a5000814 	ori	r20,r20,32
8111dfc8:	80c00007 	ldb	r3,0(r16)
8111dfcc:	003ec906 	br	8111daf4 <__reset+0xfb0fdaf4>
8111dfd0:	80c00007 	ldb	r3,0(r16)
8111dfd4:	1b030926 	beq	r3,r12,8111ebfc <___vfiprintf_internal_r+0x128c>
8111dfd8:	a5000414 	ori	r20,r20,16
8111dfdc:	003ec506 	br	8111daf4 <__reset+0xfb0fdaf4>
8111dfe0:	21003fcc 	andi	r4,r4,255
8111dfe4:	20035e1e 	bne	r4,zero,8111ed60 <___vfiprintf_internal_r+0x13f0>
8111dfe8:	a080080c 	andi	r2,r20,32
8111dfec:	1002a526 	beq	r2,zero,8111ea84 <___vfiprintf_internal_r+0x1114>
8111dff0:	da802217 	ldw	r10,136(sp)
8111dff4:	50800017 	ldw	r2,0(r10)
8111dff8:	da802317 	ldw	r10,140(sp)
8111dffc:	5007d7fa 	srai	r3,r10,31
8111e000:	da802217 	ldw	r10,136(sp)
8111e004:	10c00115 	stw	r3,4(r2)
8111e008:	52800104 	addi	r10,r10,4
8111e00c:	da802215 	stw	r10,136(sp)
8111e010:	da802317 	ldw	r10,140(sp)
8111e014:	12800015 	stw	r10,0(r2)
8111e018:	003e8c06 	br	8111da4c <__reset+0xfb0fda4c>
8111e01c:	21003fcc 	andi	r4,r4,255
8111e020:	2003511e 	bne	r4,zero,8111ed68 <___vfiprintf_internal_r+0x13f8>
8111e024:	a080080c 	andi	r2,r20,32
8111e028:	1000a126 	beq	r2,zero,8111e2b0 <___vfiprintf_internal_r+0x940>
8111e02c:	da802217 	ldw	r10,136(sp)
8111e030:	d8001d85 	stb	zero,118(sp)
8111e034:	50800204 	addi	r2,r10,8
8111e038:	54800017 	ldw	r18,0(r10)
8111e03c:	54c00117 	ldw	r19,4(r10)
8111e040:	4802b416 	blt	r9,zero,8111eb14 <___vfiprintf_internal_r+0x11a4>
8111e044:	013fdfc4 	movi	r4,-129
8111e048:	94c6b03a 	or	r3,r18,r19
8111e04c:	d8802215 	stw	r2,136(sp)
8111e050:	a128703a 	and	r20,r20,r4
8111e054:	1800a226 	beq	r3,zero,8111e2e0 <___vfiprintf_internal_r+0x970>
8111e058:	0039883a 	mov	fp,zero
8111e05c:	dd401a04 	addi	r21,sp,104
8111e060:	9006d0fa 	srli	r3,r18,3
8111e064:	9808977a 	slli	r4,r19,29
8111e068:	9826d0fa 	srli	r19,r19,3
8111e06c:	948001cc 	andi	r18,r18,7
8111e070:	90800c04 	addi	r2,r18,48
8111e074:	ad7fffc4 	addi	r21,r21,-1
8111e078:	20e4b03a 	or	r18,r4,r3
8111e07c:	a8800005 	stb	r2,0(r21)
8111e080:	94c6b03a 	or	r3,r18,r19
8111e084:	183ff61e 	bne	r3,zero,8111e060 <__reset+0xfb0fe060>
8111e088:	a0c0004c 	andi	r3,r20,1
8111e08c:	18005926 	beq	r3,zero,8111e1f4 <___vfiprintf_internal_r+0x884>
8111e090:	10803fcc 	andi	r2,r2,255
8111e094:	1080201c 	xori	r2,r2,128
8111e098:	10bfe004 	addi	r2,r2,-128
8111e09c:	00c00c04 	movi	r3,48
8111e0a0:	10c05426 	beq	r2,r3,8111e1f4 <___vfiprintf_internal_r+0x884>
8111e0a4:	da801e17 	ldw	r10,120(sp)
8111e0a8:	a8bfffc4 	addi	r2,r21,-1
8111e0ac:	a8ffffc5 	stb	r3,-1(r21)
8111e0b0:	50a7c83a 	sub	r19,r10,r2
8111e0b4:	102b883a 	mov	r21,r2
8111e0b8:	003f2f06 	br	8111dd78 <__reset+0xfb0fdd78>
8111e0bc:	21003fcc 	andi	r4,r4,255
8111e0c0:	2003421e 	bne	r4,zero,8111edcc <___vfiprintf_internal_r+0x145c>
8111e0c4:	00a04534 	movhi	r2,33044
8111e0c8:	10aadc04 	addi	r2,r2,-21648
8111e0cc:	d8802615 	stw	r2,152(sp)
8111e0d0:	a080080c 	andi	r2,r20,32
8111e0d4:	1000aa26 	beq	r2,zero,8111e380 <___vfiprintf_internal_r+0xa10>
8111e0d8:	da802217 	ldw	r10,136(sp)
8111e0dc:	54800017 	ldw	r18,0(r10)
8111e0e0:	54c00117 	ldw	r19,4(r10)
8111e0e4:	52800204 	addi	r10,r10,8
8111e0e8:	da802215 	stw	r10,136(sp)
8111e0ec:	a080004c 	andi	r2,r20,1
8111e0f0:	1001d226 	beq	r2,zero,8111e83c <___vfiprintf_internal_r+0xecc>
8111e0f4:	94c4b03a 	or	r2,r18,r19
8111e0f8:	1002351e 	bne	r2,zero,8111e9d0 <___vfiprintf_internal_r+0x1060>
8111e0fc:	d8001d85 	stb	zero,118(sp)
8111e100:	48022216 	blt	r9,zero,8111e98c <___vfiprintf_internal_r+0x101c>
8111e104:	00bfdfc4 	movi	r2,-129
8111e108:	a0a8703a 	and	r20,r20,r2
8111e10c:	003f1506 	br	8111dd64 <__reset+0xfb0fdd64>
8111e110:	da802217 	ldw	r10,136(sp)
8111e114:	04800044 	movi	r18,1
8111e118:	d8001d85 	stb	zero,118(sp)
8111e11c:	50800017 	ldw	r2,0(r10)
8111e120:	52800104 	addi	r10,r10,4
8111e124:	da802215 	stw	r10,136(sp)
8111e128:	d8801005 	stb	r2,64(sp)
8111e12c:	9027883a 	mov	r19,r18
8111e130:	dd401004 	addi	r21,sp,64
8111e134:	0013883a 	mov	r9,zero
8111e138:	003f1706 	br	8111dd98 <__reset+0xfb0fdd98>
8111e13c:	21003fcc 	andi	r4,r4,255
8111e140:	2003201e 	bne	r4,zero,8111edc4 <___vfiprintf_internal_r+0x1454>
8111e144:	a080080c 	andi	r2,r20,32
8111e148:	10004b26 	beq	r2,zero,8111e278 <___vfiprintf_internal_r+0x908>
8111e14c:	da802217 	ldw	r10,136(sp)
8111e150:	50800117 	ldw	r2,4(r10)
8111e154:	54800017 	ldw	r18,0(r10)
8111e158:	52800204 	addi	r10,r10,8
8111e15c:	da802215 	stw	r10,136(sp)
8111e160:	1027883a 	mov	r19,r2
8111e164:	10022c16 	blt	r2,zero,8111ea18 <___vfiprintf_internal_r+0x10a8>
8111e168:	df001d83 	ldbu	fp,118(sp)
8111e16c:	48007216 	blt	r9,zero,8111e338 <___vfiprintf_internal_r+0x9c8>
8111e170:	00ffdfc4 	movi	r3,-129
8111e174:	94c4b03a 	or	r2,r18,r19
8111e178:	a0e8703a 	and	r20,r20,r3
8111e17c:	1000cc26 	beq	r2,zero,8111e4b0 <___vfiprintf_internal_r+0xb40>
8111e180:	98021026 	beq	r19,zero,8111e9c4 <___vfiprintf_internal_r+0x1054>
8111e184:	dc402415 	stw	r17,144(sp)
8111e188:	dc002515 	stw	r16,148(sp)
8111e18c:	9823883a 	mov	r17,r19
8111e190:	9021883a 	mov	r16,r18
8111e194:	dd401a04 	addi	r21,sp,104
8111e198:	4825883a 	mov	r18,r9
8111e19c:	4027883a 	mov	r19,r8
8111e1a0:	8009883a 	mov	r4,r16
8111e1a4:	880b883a 	mov	r5,r17
8111e1a8:	01800284 	movi	r6,10
8111e1ac:	000f883a 	mov	r7,zero
8111e1b0:	112086c0 	call	8112086c <__umoddi3>
8111e1b4:	10800c04 	addi	r2,r2,48
8111e1b8:	ad7fffc4 	addi	r21,r21,-1
8111e1bc:	8009883a 	mov	r4,r16
8111e1c0:	880b883a 	mov	r5,r17
8111e1c4:	a8800005 	stb	r2,0(r21)
8111e1c8:	01800284 	movi	r6,10
8111e1cc:	000f883a 	mov	r7,zero
8111e1d0:	11202ec0 	call	811202ec <__udivdi3>
8111e1d4:	1021883a 	mov	r16,r2
8111e1d8:	10c4b03a 	or	r2,r2,r3
8111e1dc:	1823883a 	mov	r17,r3
8111e1e0:	103fef1e 	bne	r2,zero,8111e1a0 <__reset+0xfb0fe1a0>
8111e1e4:	dc402417 	ldw	r17,144(sp)
8111e1e8:	dc002517 	ldw	r16,148(sp)
8111e1ec:	9013883a 	mov	r9,r18
8111e1f0:	9811883a 	mov	r8,r19
8111e1f4:	da801e17 	ldw	r10,120(sp)
8111e1f8:	5567c83a 	sub	r19,r10,r21
8111e1fc:	003ede06 	br	8111dd78 <__reset+0xfb0fdd78>
8111e200:	38803fcc 	andi	r2,r7,255
8111e204:	1080201c 	xori	r2,r2,128
8111e208:	10bfe004 	addi	r2,r2,-128
8111e20c:	1002371e 	bne	r2,zero,8111eaec <___vfiprintf_internal_r+0x117c>
8111e210:	01000044 	movi	r4,1
8111e214:	01c00804 	movi	r7,32
8111e218:	80c00007 	ldb	r3,0(r16)
8111e21c:	003e3506 	br	8111daf4 <__reset+0xfb0fdaf4>
8111e220:	a5000054 	ori	r20,r20,1
8111e224:	80c00007 	ldb	r3,0(r16)
8111e228:	003e3206 	br	8111daf4 <__reset+0xfb0fdaf4>
8111e22c:	a5002014 	ori	r20,r20,128
8111e230:	80c00007 	ldb	r3,0(r16)
8111e234:	003e2f06 	br	8111daf4 <__reset+0xfb0fdaf4>
8111e238:	8015883a 	mov	r10,r16
8111e23c:	0023883a 	mov	r17,zero
8111e240:	18bff404 	addi	r2,r3,-48
8111e244:	50c00007 	ldb	r3,0(r10)
8111e248:	8c4002a4 	muli	r17,r17,10
8111e24c:	84000044 	addi	r16,r16,1
8111e250:	8015883a 	mov	r10,r16
8111e254:	1463883a 	add	r17,r2,r17
8111e258:	18bff404 	addi	r2,r3,-48
8111e25c:	30bff92e 	bgeu	r6,r2,8111e244 <__reset+0xfb0fe244>
8111e260:	003e2506 	br	8111daf8 <__reset+0xfb0fdaf8>
8111e264:	21003fcc 	andi	r4,r4,255
8111e268:	2002d41e 	bne	r4,zero,8111edbc <___vfiprintf_internal_r+0x144c>
8111e26c:	a5000414 	ori	r20,r20,16
8111e270:	a080080c 	andi	r2,r20,32
8111e274:	103fb51e 	bne	r2,zero,8111e14c <__reset+0xfb0fe14c>
8111e278:	a080040c 	andi	r2,r20,16
8111e27c:	1001f826 	beq	r2,zero,8111ea60 <___vfiprintf_internal_r+0x10f0>
8111e280:	da802217 	ldw	r10,136(sp)
8111e284:	54800017 	ldw	r18,0(r10)
8111e288:	52800104 	addi	r10,r10,4
8111e28c:	da802215 	stw	r10,136(sp)
8111e290:	9027d7fa 	srai	r19,r18,31
8111e294:	9805883a 	mov	r2,r19
8111e298:	003fb206 	br	8111e164 <__reset+0xfb0fe164>
8111e29c:	21003fcc 	andi	r4,r4,255
8111e2a0:	2002c41e 	bne	r4,zero,8111edb4 <___vfiprintf_internal_r+0x1444>
8111e2a4:	a5000414 	ori	r20,r20,16
8111e2a8:	a080080c 	andi	r2,r20,32
8111e2ac:	103f5f1e 	bne	r2,zero,8111e02c <__reset+0xfb0fe02c>
8111e2b0:	a080040c 	andi	r2,r20,16
8111e2b4:	10020f26 	beq	r2,zero,8111eaf4 <___vfiprintf_internal_r+0x1184>
8111e2b8:	da802217 	ldw	r10,136(sp)
8111e2bc:	d8001d85 	stb	zero,118(sp)
8111e2c0:	0027883a 	mov	r19,zero
8111e2c4:	50800104 	addi	r2,r10,4
8111e2c8:	54800017 	ldw	r18,0(r10)
8111e2cc:	48021116 	blt	r9,zero,8111eb14 <___vfiprintf_internal_r+0x11a4>
8111e2d0:	00ffdfc4 	movi	r3,-129
8111e2d4:	d8802215 	stw	r2,136(sp)
8111e2d8:	a0e8703a 	and	r20,r20,r3
8111e2dc:	903f5e1e 	bne	r18,zero,8111e058 <__reset+0xfb0fe058>
8111e2e0:	0039883a 	mov	fp,zero
8111e2e4:	4802a626 	beq	r9,zero,8111ed80 <___vfiprintf_internal_r+0x1410>
8111e2e8:	0025883a 	mov	r18,zero
8111e2ec:	0027883a 	mov	r19,zero
8111e2f0:	003f5a06 	br	8111e05c <__reset+0xfb0fe05c>
8111e2f4:	21003fcc 	andi	r4,r4,255
8111e2f8:	20029f1e 	bne	r4,zero,8111ed78 <___vfiprintf_internal_r+0x1408>
8111e2fc:	a5000414 	ori	r20,r20,16
8111e300:	a080080c 	andi	r2,r20,32
8111e304:	10005e1e 	bne	r2,zero,8111e480 <___vfiprintf_internal_r+0xb10>
8111e308:	a080040c 	andi	r2,r20,16
8111e30c:	1001a21e 	bne	r2,zero,8111e998 <___vfiprintf_internal_r+0x1028>
8111e310:	a080100c 	andi	r2,r20,64
8111e314:	d8001d85 	stb	zero,118(sp)
8111e318:	da802217 	ldw	r10,136(sp)
8111e31c:	1002231e 	bne	r2,zero,8111ebac <___vfiprintf_internal_r+0x123c>
8111e320:	50800104 	addi	r2,r10,4
8111e324:	54800017 	ldw	r18,0(r10)
8111e328:	0027883a 	mov	r19,zero
8111e32c:	4801a00e 	bge	r9,zero,8111e9b0 <___vfiprintf_internal_r+0x1040>
8111e330:	d8802215 	stw	r2,136(sp)
8111e334:	0039883a 	mov	fp,zero
8111e338:	94c4b03a 	or	r2,r18,r19
8111e33c:	103f901e 	bne	r2,zero,8111e180 <__reset+0xfb0fe180>
8111e340:	00800044 	movi	r2,1
8111e344:	10803fcc 	andi	r2,r2,255
8111e348:	00c00044 	movi	r3,1
8111e34c:	10c05926 	beq	r2,r3,8111e4b4 <___vfiprintf_internal_r+0xb44>
8111e350:	00c00084 	movi	r3,2
8111e354:	10ffe41e 	bne	r2,r3,8111e2e8 <__reset+0xfb0fe2e8>
8111e358:	0025883a 	mov	r18,zero
8111e35c:	0027883a 	mov	r19,zero
8111e360:	00013d06 	br	8111e858 <___vfiprintf_internal_r+0xee8>
8111e364:	21003fcc 	andi	r4,r4,255
8111e368:	2002811e 	bne	r4,zero,8111ed70 <___vfiprintf_internal_r+0x1400>
8111e36c:	00a04534 	movhi	r2,33044
8111e370:	10aad704 	addi	r2,r2,-21668
8111e374:	d8802615 	stw	r2,152(sp)
8111e378:	a080080c 	andi	r2,r20,32
8111e37c:	103f561e 	bne	r2,zero,8111e0d8 <__reset+0xfb0fe0d8>
8111e380:	a080040c 	andi	r2,r20,16
8111e384:	1001d126 	beq	r2,zero,8111eacc <___vfiprintf_internal_r+0x115c>
8111e388:	da802217 	ldw	r10,136(sp)
8111e38c:	0027883a 	mov	r19,zero
8111e390:	54800017 	ldw	r18,0(r10)
8111e394:	52800104 	addi	r10,r10,4
8111e398:	da802215 	stw	r10,136(sp)
8111e39c:	003f5306 	br	8111e0ec <__reset+0xfb0fe0ec>
8111e3a0:	da802217 	ldw	r10,136(sp)
8111e3a4:	d8001d85 	stb	zero,118(sp)
8111e3a8:	55400017 	ldw	r21,0(r10)
8111e3ac:	50c00104 	addi	r3,r10,4
8111e3b0:	a8024226 	beq	r21,zero,8111ecbc <___vfiprintf_internal_r+0x134c>
8111e3b4:	48021816 	blt	r9,zero,8111ec18 <___vfiprintf_internal_r+0x12a8>
8111e3b8:	480d883a 	mov	r6,r9
8111e3bc:	000b883a 	mov	r5,zero
8111e3c0:	a809883a 	mov	r4,r21
8111e3c4:	d8c02a15 	stw	r3,168(sp)
8111e3c8:	da002b15 	stw	r8,172(sp)
8111e3cc:	da402c15 	stw	r9,176(sp)
8111e3d0:	11185d40 	call	811185d4 <memchr>
8111e3d4:	d8c02a17 	ldw	r3,168(sp)
8111e3d8:	da002b17 	ldw	r8,172(sp)
8111e3dc:	da402c17 	ldw	r9,176(sp)
8111e3e0:	10024826 	beq	r2,zero,8111ed04 <___vfiprintf_internal_r+0x1394>
8111e3e4:	1567c83a 	sub	r19,r2,r21
8111e3e8:	df001d83 	ldbu	fp,118(sp)
8111e3ec:	d8c02215 	stw	r3,136(sp)
8111e3f0:	0013883a 	mov	r9,zero
8111e3f4:	003e6006 	br	8111dd78 <__reset+0xfb0fdd78>
8111e3f8:	21003fcc 	andi	r4,r4,255
8111e3fc:	203fc026 	beq	r4,zero,8111e300 <__reset+0xfb0fe300>
8111e400:	d9c01d85 	stb	r7,118(sp)
8111e404:	003fbe06 	br	8111e300 <__reset+0xfb0fe300>
8111e408:	da802217 	ldw	r10,136(sp)
8111e40c:	54400017 	ldw	r17,0(r10)
8111e410:	50800104 	addi	r2,r10,4
8111e414:	883e3b16 	blt	r17,zero,8111dd04 <__reset+0xfb0fdd04>
8111e418:	d8802215 	stw	r2,136(sp)
8111e41c:	80c00007 	ldb	r3,0(r16)
8111e420:	003db406 	br	8111daf4 <__reset+0xfb0fdaf4>
8111e424:	01000044 	movi	r4,1
8111e428:	01c00ac4 	movi	r7,43
8111e42c:	80c00007 	ldb	r3,0(r16)
8111e430:	003db006 	br	8111daf4 <__reset+0xfb0fdaf4>
8111e434:	80c00007 	ldb	r3,0(r16)
8111e438:	82800044 	addi	r10,r16,1
8111e43c:	1b423c26 	beq	r3,r13,8111ed30 <___vfiprintf_internal_r+0x13c0>
8111e440:	18bff404 	addi	r2,r3,-48
8111e444:	0013883a 	mov	r9,zero
8111e448:	30822b36 	bltu	r6,r2,8111ecf8 <___vfiprintf_internal_r+0x1388>
8111e44c:	50c00007 	ldb	r3,0(r10)
8111e450:	4a4002a4 	muli	r9,r9,10
8111e454:	54000044 	addi	r16,r10,1
8111e458:	8015883a 	mov	r10,r16
8111e45c:	4893883a 	add	r9,r9,r2
8111e460:	18bff404 	addi	r2,r3,-48
8111e464:	30bff92e 	bgeu	r6,r2,8111e44c <__reset+0xfb0fe44c>
8111e468:	483da30e 	bge	r9,zero,8111daf8 <__reset+0xfb0fdaf8>
8111e46c:	027fffc4 	movi	r9,-1
8111e470:	003da106 	br	8111daf8 <__reset+0xfb0fdaf8>
8111e474:	a5001014 	ori	r20,r20,64
8111e478:	80c00007 	ldb	r3,0(r16)
8111e47c:	003d9d06 	br	8111daf4 <__reset+0xfb0fdaf4>
8111e480:	da802217 	ldw	r10,136(sp)
8111e484:	d8001d85 	stb	zero,118(sp)
8111e488:	50c00204 	addi	r3,r10,8
8111e48c:	54800017 	ldw	r18,0(r10)
8111e490:	54c00117 	ldw	r19,4(r10)
8111e494:	4801ca16 	blt	r9,zero,8111ebc0 <___vfiprintf_internal_r+0x1250>
8111e498:	013fdfc4 	movi	r4,-129
8111e49c:	94c4b03a 	or	r2,r18,r19
8111e4a0:	d8c02215 	stw	r3,136(sp)
8111e4a4:	a128703a 	and	r20,r20,r4
8111e4a8:	0039883a 	mov	fp,zero
8111e4ac:	103f341e 	bne	r2,zero,8111e180 <__reset+0xfb0fe180>
8111e4b0:	483e2e26 	beq	r9,zero,8111dd6c <__reset+0xfb0fdd6c>
8111e4b4:	0025883a 	mov	r18,zero
8111e4b8:	94800c04 	addi	r18,r18,48
8111e4bc:	dc8019c5 	stb	r18,103(sp)
8111e4c0:	dcc02717 	ldw	r19,156(sp)
8111e4c4:	dd4019c4 	addi	r21,sp,103
8111e4c8:	003e2b06 	br	8111dd78 <__reset+0xfb0fdd78>
8111e4cc:	21003fcc 	andi	r4,r4,255
8111e4d0:	2002361e 	bne	r4,zero,8111edac <___vfiprintf_internal_r+0x143c>
8111e4d4:	1801c126 	beq	r3,zero,8111ebdc <___vfiprintf_internal_r+0x126c>
8111e4d8:	04800044 	movi	r18,1
8111e4dc:	d8c01005 	stb	r3,64(sp)
8111e4e0:	d8001d85 	stb	zero,118(sp)
8111e4e4:	9027883a 	mov	r19,r18
8111e4e8:	dd401004 	addi	r21,sp,64
8111e4ec:	003f1106 	br	8111e134 <__reset+0xfb0fe134>
8111e4f0:	d9402117 	ldw	r5,132(sp)
8111e4f4:	d9002017 	ldw	r4,128(sp)
8111e4f8:	d9801a04 	addi	r6,sp,104
8111e4fc:	d9c02b15 	stw	r7,172(sp)
8111e500:	dbc02a15 	stw	r15,168(sp)
8111e504:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e508:	d9c02b17 	ldw	r7,172(sp)
8111e50c:	dbc02a17 	ldw	r15,168(sp)
8111e510:	10006d1e 	bne	r2,zero,8111e6c8 <___vfiprintf_internal_r+0xd58>
8111e514:	d9801b17 	ldw	r6,108(sp)
8111e518:	d8801c17 	ldw	r2,112(sp)
8111e51c:	d811883a 	mov	r8,sp
8111e520:	31400044 	addi	r5,r6,1
8111e524:	003e3306 	br	8111ddf4 <__reset+0xfb0fddf4>
8111e528:	d9401b17 	ldw	r5,108(sp)
8111e52c:	d8801c17 	ldw	r2,112(sp)
8111e530:	29000044 	addi	r4,r5,1
8111e534:	d8c01d87 	ldb	r3,118(sp)
8111e538:	183e4d26 	beq	r3,zero,8111de70 <__reset+0xfb0fde70>
8111e53c:	00c00044 	movi	r3,1
8111e540:	d9401d84 	addi	r5,sp,118
8111e544:	10c5883a 	add	r2,r2,r3
8111e548:	41400015 	stw	r5,0(r8)
8111e54c:	40c00115 	stw	r3,4(r8)
8111e550:	d8801c15 	stw	r2,112(sp)
8111e554:	d9001b15 	stw	r4,108(sp)
8111e558:	014001c4 	movi	r5,7
8111e55c:	2900a90e 	bge	r5,r4,8111e804 <___vfiprintf_internal_r+0xe94>
8111e560:	1000da1e 	bne	r2,zero,8111e8cc <___vfiprintf_internal_r+0xf5c>
8111e564:	7000ab1e 	bne	r14,zero,8111e814 <___vfiprintf_internal_r+0xea4>
8111e568:	000b883a 	mov	r5,zero
8111e56c:	1809883a 	mov	r4,r3
8111e570:	d811883a 	mov	r8,sp
8111e574:	00c02004 	movi	r3,128
8111e578:	e0fe4d26 	beq	fp,r3,8111deb0 <__reset+0xfb0fdeb0>
8111e57c:	4cf9c83a 	sub	fp,r9,r19
8111e580:	073e7b0e 	bge	zero,fp,8111df70 <__reset+0xfb0fdf70>
8111e584:	01c00404 	movi	r7,16
8111e588:	3f01900e 	bge	r7,fp,8111ebcc <___vfiprintf_internal_r+0x125c>
8111e58c:	00e04534 	movhi	r3,33044
8111e590:	18eb6e04 	addi	r3,r3,-21064
8111e594:	d8c02415 	stw	r3,144(sp)
8111e598:	034001c4 	movi	r13,7
8111e59c:	00000506 	br	8111e5b4 <___vfiprintf_internal_r+0xc44>
8111e5a0:	29000084 	addi	r4,r5,2
8111e5a4:	42000204 	addi	r8,r8,8
8111e5a8:	180b883a 	mov	r5,r3
8111e5ac:	e73ffc04 	addi	fp,fp,-16
8111e5b0:	3f000d0e 	bge	r7,fp,8111e5e8 <___vfiprintf_internal_r+0xc78>
8111e5b4:	10800404 	addi	r2,r2,16
8111e5b8:	28c00044 	addi	r3,r5,1
8111e5bc:	45c00015 	stw	r23,0(r8)
8111e5c0:	41c00115 	stw	r7,4(r8)
8111e5c4:	d8801c15 	stw	r2,112(sp)
8111e5c8:	d8c01b15 	stw	r3,108(sp)
8111e5cc:	68fff40e 	bge	r13,r3,8111e5a0 <__reset+0xfb0fe5a0>
8111e5d0:	1000101e 	bne	r2,zero,8111e614 <___vfiprintf_internal_r+0xca4>
8111e5d4:	e73ffc04 	addi	fp,fp,-16
8111e5d8:	01000044 	movi	r4,1
8111e5dc:	000b883a 	mov	r5,zero
8111e5e0:	d811883a 	mov	r8,sp
8111e5e4:	3f3ff316 	blt	r7,fp,8111e5b4 <__reset+0xfb0fe5b4>
8111e5e8:	da802417 	ldw	r10,144(sp)
8111e5ec:	1705883a 	add	r2,r2,fp
8111e5f0:	47000115 	stw	fp,4(r8)
8111e5f4:	42800015 	stw	r10,0(r8)
8111e5f8:	d8801c15 	stw	r2,112(sp)
8111e5fc:	d9001b15 	stw	r4,108(sp)
8111e600:	00c001c4 	movi	r3,7
8111e604:	19003616 	blt	r3,r4,8111e6e0 <___vfiprintf_internal_r+0xd70>
8111e608:	42000204 	addi	r8,r8,8
8111e60c:	21000044 	addi	r4,r4,1
8111e610:	003e5706 	br	8111df70 <__reset+0xfb0fdf70>
8111e614:	d9402117 	ldw	r5,132(sp)
8111e618:	d9002017 	ldw	r4,128(sp)
8111e61c:	d9801a04 	addi	r6,sp,104
8111e620:	d9c02b15 	stw	r7,172(sp)
8111e624:	db402a15 	stw	r13,168(sp)
8111e628:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e62c:	d9c02b17 	ldw	r7,172(sp)
8111e630:	db402a17 	ldw	r13,168(sp)
8111e634:	1000241e 	bne	r2,zero,8111e6c8 <___vfiprintf_internal_r+0xd58>
8111e638:	d9401b17 	ldw	r5,108(sp)
8111e63c:	d8801c17 	ldw	r2,112(sp)
8111e640:	d811883a 	mov	r8,sp
8111e644:	29000044 	addi	r4,r5,1
8111e648:	003fd806 	br	8111e5ac <__reset+0xfb0fe5ac>
8111e64c:	d9401b17 	ldw	r5,108(sp)
8111e650:	00e04534 	movhi	r3,33044
8111e654:	18eb7204 	addi	r3,r3,-21048
8111e658:	d8c02415 	stw	r3,144(sp)
8111e65c:	29400044 	addi	r5,r5,1
8111e660:	d8c02417 	ldw	r3,144(sp)
8111e664:	14c5883a 	add	r2,r2,r19
8111e668:	44c00115 	stw	r19,4(r8)
8111e66c:	40c00015 	stw	r3,0(r8)
8111e670:	d8801c15 	stw	r2,112(sp)
8111e674:	d9401b15 	stw	r5,108(sp)
8111e678:	00c001c4 	movi	r3,7
8111e67c:	1940070e 	bge	r3,r5,8111e69c <___vfiprintf_internal_r+0xd2c>
8111e680:	103e4826 	beq	r2,zero,8111dfa4 <__reset+0xfb0fdfa4>
8111e684:	d9402117 	ldw	r5,132(sp)
8111e688:	d9002017 	ldw	r4,128(sp)
8111e68c:	d9801a04 	addi	r6,sp,104
8111e690:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e694:	10000c1e 	bne	r2,zero,8111e6c8 <___vfiprintf_internal_r+0xd58>
8111e698:	d8801c17 	ldw	r2,112(sp)
8111e69c:	8c80010e 	bge	r17,r18,8111e6a4 <___vfiprintf_internal_r+0xd34>
8111e6a0:	9023883a 	mov	r17,r18
8111e6a4:	da802317 	ldw	r10,140(sp)
8111e6a8:	5455883a 	add	r10,r10,r17
8111e6ac:	da802315 	stw	r10,140(sp)
8111e6b0:	103e4126 	beq	r2,zero,8111dfb8 <__reset+0xfb0fdfb8>
8111e6b4:	d9402117 	ldw	r5,132(sp)
8111e6b8:	d9002017 	ldw	r4,128(sp)
8111e6bc:	d9801a04 	addi	r6,sp,104
8111e6c0:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e6c4:	103e3c26 	beq	r2,zero,8111dfb8 <__reset+0xfb0fdfb8>
8111e6c8:	dd002117 	ldw	r20,132(sp)
8111e6cc:	a080030b 	ldhu	r2,12(r20)
8111e6d0:	1080100c 	andi	r2,r2,64
8111e6d4:	1001231e 	bne	r2,zero,8111eb64 <___vfiprintf_internal_r+0x11f4>
8111e6d8:	d8802317 	ldw	r2,140(sp)
8111e6dc:	003d7b06 	br	8111dccc <__reset+0xfb0fdccc>
8111e6e0:	1000991e 	bne	r2,zero,8111e948 <___vfiprintf_internal_r+0xfd8>
8111e6e4:	00c00044 	movi	r3,1
8111e6e8:	9805883a 	mov	r2,r19
8111e6ec:	dd400015 	stw	r21,0(sp)
8111e6f0:	dcc00115 	stw	r19,4(sp)
8111e6f4:	dcc01c15 	stw	r19,112(sp)
8111e6f8:	d8c01b15 	stw	r3,108(sp)
8111e6fc:	d811883a 	mov	r8,sp
8111e700:	42000204 	addi	r8,r8,8
8111e704:	a2c0010c 	andi	r11,r20,4
8111e708:	583fe426 	beq	r11,zero,8111e69c <__reset+0xfb0fe69c>
8111e70c:	8ca7c83a 	sub	r19,r17,r18
8111e710:	04ffe20e 	bge	zero,r19,8111e69c <__reset+0xfb0fe69c>
8111e714:	01c00404 	movi	r7,16
8111e718:	3cffcc0e 	bge	r7,r19,8111e64c <__reset+0xfb0fe64c>
8111e71c:	02a04534 	movhi	r10,33044
8111e720:	52ab7204 	addi	r10,r10,-21048
8111e724:	d9001b17 	ldw	r4,108(sp)
8111e728:	da802415 	stw	r10,144(sp)
8111e72c:	382b883a 	mov	r21,r7
8111e730:	050001c4 	movi	r20,7
8111e734:	df002017 	ldw	fp,128(sp)
8111e738:	00000506 	br	8111e750 <___vfiprintf_internal_r+0xde0>
8111e73c:	21400084 	addi	r5,r4,2
8111e740:	42000204 	addi	r8,r8,8
8111e744:	1809883a 	mov	r4,r3
8111e748:	9cfffc04 	addi	r19,r19,-16
8111e74c:	acffc40e 	bge	r21,r19,8111e660 <__reset+0xfb0fe660>
8111e750:	10800404 	addi	r2,r2,16
8111e754:	20c00044 	addi	r3,r4,1
8111e758:	45800015 	stw	r22,0(r8)
8111e75c:	45400115 	stw	r21,4(r8)
8111e760:	d8801c15 	stw	r2,112(sp)
8111e764:	d8c01b15 	stw	r3,108(sp)
8111e768:	a0fff40e 	bge	r20,r3,8111e73c <__reset+0xfb0fe73c>
8111e76c:	1000041e 	bne	r2,zero,8111e780 <___vfiprintf_internal_r+0xe10>
8111e770:	01400044 	movi	r5,1
8111e774:	0009883a 	mov	r4,zero
8111e778:	d811883a 	mov	r8,sp
8111e77c:	003ff206 	br	8111e748 <__reset+0xfb0fe748>
8111e780:	d9402117 	ldw	r5,132(sp)
8111e784:	d9801a04 	addi	r6,sp,104
8111e788:	e009883a 	mov	r4,fp
8111e78c:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e790:	103fcd1e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e794:	d9001b17 	ldw	r4,108(sp)
8111e798:	d8801c17 	ldw	r2,112(sp)
8111e79c:	d811883a 	mov	r8,sp
8111e7a0:	21400044 	addi	r5,r4,1
8111e7a4:	003fe806 	br	8111e748 <__reset+0xfb0fe748>
8111e7a8:	d9402117 	ldw	r5,132(sp)
8111e7ac:	d9002017 	ldw	r4,128(sp)
8111e7b0:	d9801a04 	addi	r6,sp,104
8111e7b4:	d9c02b15 	stw	r7,172(sp)
8111e7b8:	db402a15 	stw	r13,168(sp)
8111e7bc:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e7c0:	d9c02b17 	ldw	r7,172(sp)
8111e7c4:	db402a17 	ldw	r13,168(sp)
8111e7c8:	103fbf1e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e7cc:	d9401b17 	ldw	r5,108(sp)
8111e7d0:	d8801c17 	ldw	r2,112(sp)
8111e7d4:	d811883a 	mov	r8,sp
8111e7d8:	29800044 	addi	r6,r5,1
8111e7dc:	003dc406 	br	8111def0 <__reset+0xfb0fdef0>
8111e7e0:	1000d21e 	bne	r2,zero,8111eb2c <___vfiprintf_internal_r+0x11bc>
8111e7e4:	d8c01d87 	ldb	r3,118(sp)
8111e7e8:	18009526 	beq	r3,zero,8111ea40 <___vfiprintf_internal_r+0x10d0>
8111e7ec:	00800044 	movi	r2,1
8111e7f0:	d8c01d84 	addi	r3,sp,118
8111e7f4:	1009883a 	mov	r4,r2
8111e7f8:	d8c00015 	stw	r3,0(sp)
8111e7fc:	d8800115 	stw	r2,4(sp)
8111e800:	d811883a 	mov	r8,sp
8111e804:	200b883a 	mov	r5,r4
8111e808:	42000204 	addi	r8,r8,8
8111e80c:	21000044 	addi	r4,r4,1
8111e810:	003d9706 	br	8111de70 <__reset+0xfb0fde70>
8111e814:	d9001d04 	addi	r4,sp,116
8111e818:	00800084 	movi	r2,2
8111e81c:	d9000015 	stw	r4,0(sp)
8111e820:	d8800115 	stw	r2,4(sp)
8111e824:	1809883a 	mov	r4,r3
8111e828:	d811883a 	mov	r8,sp
8111e82c:	200b883a 	mov	r5,r4
8111e830:	42000204 	addi	r8,r8,8
8111e834:	21000044 	addi	r4,r4,1
8111e838:	003f4e06 	br	8111e574 <__reset+0xfb0fe574>
8111e83c:	d8001d85 	stb	zero,118(sp)
8111e840:	48005016 	blt	r9,zero,8111e984 <___vfiprintf_internal_r+0x1014>
8111e844:	00ffdfc4 	movi	r3,-129
8111e848:	94c4b03a 	or	r2,r18,r19
8111e84c:	a0e8703a 	and	r20,r20,r3
8111e850:	103d4426 	beq	r2,zero,8111dd64 <__reset+0xfb0fdd64>
8111e854:	0039883a 	mov	fp,zero
8111e858:	d9002617 	ldw	r4,152(sp)
8111e85c:	dd401a04 	addi	r21,sp,104
8111e860:	908003cc 	andi	r2,r18,15
8111e864:	9806973a 	slli	r3,r19,28
8111e868:	2085883a 	add	r2,r4,r2
8111e86c:	9024d13a 	srli	r18,r18,4
8111e870:	10800003 	ldbu	r2,0(r2)
8111e874:	9826d13a 	srli	r19,r19,4
8111e878:	ad7fffc4 	addi	r21,r21,-1
8111e87c:	1ca4b03a 	or	r18,r3,r18
8111e880:	a8800005 	stb	r2,0(r21)
8111e884:	94c4b03a 	or	r2,r18,r19
8111e888:	103ff51e 	bne	r2,zero,8111e860 <__reset+0xfb0fe860>
8111e88c:	003e5906 	br	8111e1f4 <__reset+0xfb0fe1f4>
8111e890:	d9402117 	ldw	r5,132(sp)
8111e894:	d9002017 	ldw	r4,128(sp)
8111e898:	d9801a04 	addi	r6,sp,104
8111e89c:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e8a0:	103f891e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e8a4:	d8801c17 	ldw	r2,112(sp)
8111e8a8:	d811883a 	mov	r8,sp
8111e8ac:	003f9506 	br	8111e704 <__reset+0xfb0fe704>
8111e8b0:	d9402117 	ldw	r5,132(sp)
8111e8b4:	d9002017 	ldw	r4,128(sp)
8111e8b8:	d9801a04 	addi	r6,sp,104
8111e8bc:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e8c0:	103f811e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e8c4:	d811883a 	mov	r8,sp
8111e8c8:	003ced06 	br	8111dc80 <__reset+0xfb0fdc80>
8111e8cc:	d9402117 	ldw	r5,132(sp)
8111e8d0:	d9002017 	ldw	r4,128(sp)
8111e8d4:	d9801a04 	addi	r6,sp,104
8111e8d8:	da402c15 	stw	r9,176(sp)
8111e8dc:	db802a15 	stw	r14,168(sp)
8111e8e0:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e8e4:	da402c17 	ldw	r9,176(sp)
8111e8e8:	db802a17 	ldw	r14,168(sp)
8111e8ec:	103f761e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e8f0:	d9401b17 	ldw	r5,108(sp)
8111e8f4:	d8801c17 	ldw	r2,112(sp)
8111e8f8:	d811883a 	mov	r8,sp
8111e8fc:	29000044 	addi	r4,r5,1
8111e900:	003d5b06 	br	8111de70 <__reset+0xfb0fde70>
8111e904:	d9402117 	ldw	r5,132(sp)
8111e908:	d9002017 	ldw	r4,128(sp)
8111e90c:	d9801a04 	addi	r6,sp,104
8111e910:	da402c15 	stw	r9,176(sp)
8111e914:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e918:	da402c17 	ldw	r9,176(sp)
8111e91c:	103f6a1e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e920:	d9401b17 	ldw	r5,108(sp)
8111e924:	d8801c17 	ldw	r2,112(sp)
8111e928:	d811883a 	mov	r8,sp
8111e92c:	29000044 	addi	r4,r5,1
8111e930:	003f1006 	br	8111e574 <__reset+0xfb0fe574>
8111e934:	1000c31e 	bne	r2,zero,8111ec44 <___vfiprintf_internal_r+0x12d4>
8111e938:	01000044 	movi	r4,1
8111e93c:	000b883a 	mov	r5,zero
8111e940:	d811883a 	mov	r8,sp
8111e944:	003f0d06 	br	8111e57c <__reset+0xfb0fe57c>
8111e948:	d9402117 	ldw	r5,132(sp)
8111e94c:	d9002017 	ldw	r4,128(sp)
8111e950:	d9801a04 	addi	r6,sp,104
8111e954:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111e958:	103f5b1e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111e95c:	d9001b17 	ldw	r4,108(sp)
8111e960:	d8801c17 	ldw	r2,112(sp)
8111e964:	d811883a 	mov	r8,sp
8111e968:	21000044 	addi	r4,r4,1
8111e96c:	003d8006 	br	8111df70 <__reset+0xfb0fdf70>
8111e970:	01204534 	movhi	r4,33044
8111e974:	212adc04 	addi	r4,r4,-21648
8111e978:	d9002615 	stw	r4,152(sp)
8111e97c:	d8c02215 	stw	r3,136(sp)
8111e980:	1029883a 	mov	r20,r2
8111e984:	94c4b03a 	or	r2,r18,r19
8111e988:	103fb21e 	bne	r2,zero,8111e854 <__reset+0xfb0fe854>
8111e98c:	0039883a 	mov	fp,zero
8111e990:	00800084 	movi	r2,2
8111e994:	003e6b06 	br	8111e344 <__reset+0xfb0fe344>
8111e998:	da802217 	ldw	r10,136(sp)
8111e99c:	d8001d85 	stb	zero,118(sp)
8111e9a0:	0027883a 	mov	r19,zero
8111e9a4:	50800104 	addi	r2,r10,4
8111e9a8:	54800017 	ldw	r18,0(r10)
8111e9ac:	483e6016 	blt	r9,zero,8111e330 <__reset+0xfb0fe330>
8111e9b0:	00ffdfc4 	movi	r3,-129
8111e9b4:	d8802215 	stw	r2,136(sp)
8111e9b8:	a0e8703a 	and	r20,r20,r3
8111e9bc:	0039883a 	mov	fp,zero
8111e9c0:	903ebb26 	beq	r18,zero,8111e4b0 <__reset+0xfb0fe4b0>
8111e9c4:	00800244 	movi	r2,9
8111e9c8:	14bdee36 	bltu	r2,r18,8111e184 <__reset+0xfb0fe184>
8111e9cc:	003eba06 	br	8111e4b8 <__reset+0xfb0fe4b8>
8111e9d0:	00800c04 	movi	r2,48
8111e9d4:	d8c01d45 	stb	r3,117(sp)
8111e9d8:	d8801d05 	stb	r2,116(sp)
8111e9dc:	d8001d85 	stb	zero,118(sp)
8111e9e0:	a0c00094 	ori	r3,r20,2
8111e9e4:	4800a916 	blt	r9,zero,8111ec8c <___vfiprintf_internal_r+0x131c>
8111e9e8:	00bfdfc4 	movi	r2,-129
8111e9ec:	a096703a 	and	r11,r20,r2
8111e9f0:	5d000094 	ori	r20,r11,2
8111e9f4:	0039883a 	mov	fp,zero
8111e9f8:	003f9706 	br	8111e858 <__reset+0xfb0fe858>
8111e9fc:	8025883a 	mov	r18,r16
8111ea00:	003c2e06 	br	8111dabc <__reset+0xfb0fdabc>
8111ea04:	00a04534 	movhi	r2,33044
8111ea08:	10aadc04 	addi	r2,r2,-21648
8111ea0c:	0039883a 	mov	fp,zero
8111ea10:	d8802615 	stw	r2,152(sp)
8111ea14:	003f9006 	br	8111e858 <__reset+0xfb0fe858>
8111ea18:	04a5c83a 	sub	r18,zero,r18
8111ea1c:	07000b44 	movi	fp,45
8111ea20:	9004c03a 	cmpne	r2,r18,zero
8111ea24:	04e7c83a 	sub	r19,zero,r19
8111ea28:	df001d85 	stb	fp,118(sp)
8111ea2c:	98a7c83a 	sub	r19,r19,r2
8111ea30:	48009f16 	blt	r9,zero,8111ecb0 <___vfiprintf_internal_r+0x1340>
8111ea34:	00bfdfc4 	movi	r2,-129
8111ea38:	a0a8703a 	and	r20,r20,r2
8111ea3c:	003dd006 	br	8111e180 <__reset+0xfb0fe180>
8111ea40:	70004c26 	beq	r14,zero,8111eb74 <___vfiprintf_internal_r+0x1204>
8111ea44:	00800084 	movi	r2,2
8111ea48:	d8c01d04 	addi	r3,sp,116
8111ea4c:	d8c00015 	stw	r3,0(sp)
8111ea50:	d8800115 	stw	r2,4(sp)
8111ea54:	01000044 	movi	r4,1
8111ea58:	d811883a 	mov	r8,sp
8111ea5c:	003f7306 	br	8111e82c <__reset+0xfb0fe82c>
8111ea60:	a080100c 	andi	r2,r20,64
8111ea64:	da802217 	ldw	r10,136(sp)
8111ea68:	103e0626 	beq	r2,zero,8111e284 <__reset+0xfb0fe284>
8111ea6c:	5480000f 	ldh	r18,0(r10)
8111ea70:	52800104 	addi	r10,r10,4
8111ea74:	da802215 	stw	r10,136(sp)
8111ea78:	9027d7fa 	srai	r19,r18,31
8111ea7c:	9805883a 	mov	r2,r19
8111ea80:	003db806 	br	8111e164 <__reset+0xfb0fe164>
8111ea84:	a080040c 	andi	r2,r20,16
8111ea88:	1000091e 	bne	r2,zero,8111eab0 <___vfiprintf_internal_r+0x1140>
8111ea8c:	a2c0100c 	andi	r11,r20,64
8111ea90:	58000726 	beq	r11,zero,8111eab0 <___vfiprintf_internal_r+0x1140>
8111ea94:	da802217 	ldw	r10,136(sp)
8111ea98:	50800017 	ldw	r2,0(r10)
8111ea9c:	52800104 	addi	r10,r10,4
8111eaa0:	da802215 	stw	r10,136(sp)
8111eaa4:	da802317 	ldw	r10,140(sp)
8111eaa8:	1280000d 	sth	r10,0(r2)
8111eaac:	003be706 	br	8111da4c <__reset+0xfb0fda4c>
8111eab0:	da802217 	ldw	r10,136(sp)
8111eab4:	50800017 	ldw	r2,0(r10)
8111eab8:	52800104 	addi	r10,r10,4
8111eabc:	da802215 	stw	r10,136(sp)
8111eac0:	da802317 	ldw	r10,140(sp)
8111eac4:	12800015 	stw	r10,0(r2)
8111eac8:	003be006 	br	8111da4c <__reset+0xfb0fda4c>
8111eacc:	a080100c 	andi	r2,r20,64
8111ead0:	da802217 	ldw	r10,136(sp)
8111ead4:	10003026 	beq	r2,zero,8111eb98 <___vfiprintf_internal_r+0x1228>
8111ead8:	5480000b 	ldhu	r18,0(r10)
8111eadc:	52800104 	addi	r10,r10,4
8111eae0:	0027883a 	mov	r19,zero
8111eae4:	da802215 	stw	r10,136(sp)
8111eae8:	003d8006 	br	8111e0ec <__reset+0xfb0fe0ec>
8111eaec:	80c00007 	ldb	r3,0(r16)
8111eaf0:	003c0006 	br	8111daf4 <__reset+0xfb0fdaf4>
8111eaf4:	a080100c 	andi	r2,r20,64
8111eaf8:	d8001d85 	stb	zero,118(sp)
8111eafc:	da802217 	ldw	r10,136(sp)
8111eb00:	1000201e 	bne	r2,zero,8111eb84 <___vfiprintf_internal_r+0x1214>
8111eb04:	50800104 	addi	r2,r10,4
8111eb08:	54800017 	ldw	r18,0(r10)
8111eb0c:	0027883a 	mov	r19,zero
8111eb10:	483def0e 	bge	r9,zero,8111e2d0 <__reset+0xfb0fe2d0>
8111eb14:	94c6b03a 	or	r3,r18,r19
8111eb18:	d8802215 	stw	r2,136(sp)
8111eb1c:	183d4e1e 	bne	r3,zero,8111e058 <__reset+0xfb0fe058>
8111eb20:	0039883a 	mov	fp,zero
8111eb24:	0005883a 	mov	r2,zero
8111eb28:	003e0606 	br	8111e344 <__reset+0xfb0fe344>
8111eb2c:	d9402117 	ldw	r5,132(sp)
8111eb30:	d9002017 	ldw	r4,128(sp)
8111eb34:	d9801a04 	addi	r6,sp,104
8111eb38:	da402c15 	stw	r9,176(sp)
8111eb3c:	db802a15 	stw	r14,168(sp)
8111eb40:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111eb44:	da402c17 	ldw	r9,176(sp)
8111eb48:	db802a17 	ldw	r14,168(sp)
8111eb4c:	103ede1e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111eb50:	d9401b17 	ldw	r5,108(sp)
8111eb54:	d8801c17 	ldw	r2,112(sp)
8111eb58:	d811883a 	mov	r8,sp
8111eb5c:	29000044 	addi	r4,r5,1
8111eb60:	003e7406 	br	8111e534 <__reset+0xfb0fe534>
8111eb64:	00bfffc4 	movi	r2,-1
8111eb68:	003c5806 	br	8111dccc <__reset+0xfb0fdccc>
8111eb6c:	d811883a 	mov	r8,sp
8111eb70:	003ee806 	br	8111e714 <__reset+0xfb0fe714>
8111eb74:	000b883a 	mov	r5,zero
8111eb78:	01000044 	movi	r4,1
8111eb7c:	d811883a 	mov	r8,sp
8111eb80:	003e7c06 	br	8111e574 <__reset+0xfb0fe574>
8111eb84:	50800104 	addi	r2,r10,4
8111eb88:	5480000b 	ldhu	r18,0(r10)
8111eb8c:	0027883a 	mov	r19,zero
8111eb90:	483dcf0e 	bge	r9,zero,8111e2d0 <__reset+0xfb0fe2d0>
8111eb94:	003fdf06 	br	8111eb14 <__reset+0xfb0feb14>
8111eb98:	54800017 	ldw	r18,0(r10)
8111eb9c:	52800104 	addi	r10,r10,4
8111eba0:	0027883a 	mov	r19,zero
8111eba4:	da802215 	stw	r10,136(sp)
8111eba8:	003d5006 	br	8111e0ec <__reset+0xfb0fe0ec>
8111ebac:	50800104 	addi	r2,r10,4
8111ebb0:	5480000b 	ldhu	r18,0(r10)
8111ebb4:	0027883a 	mov	r19,zero
8111ebb8:	483f7d0e 	bge	r9,zero,8111e9b0 <__reset+0xfb0fe9b0>
8111ebbc:	003ddc06 	br	8111e330 <__reset+0xfb0fe330>
8111ebc0:	d8c02215 	stw	r3,136(sp)
8111ebc4:	0039883a 	mov	fp,zero
8111ebc8:	003ddb06 	br	8111e338 <__reset+0xfb0fe338>
8111ebcc:	02a04534 	movhi	r10,33044
8111ebd0:	52ab6e04 	addi	r10,r10,-21064
8111ebd4:	da802415 	stw	r10,144(sp)
8111ebd8:	003e8306 	br	8111e5e8 <__reset+0xfb0fe5e8>
8111ebdc:	d8801c17 	ldw	r2,112(sp)
8111ebe0:	dd002117 	ldw	r20,132(sp)
8111ebe4:	103eb926 	beq	r2,zero,8111e6cc <__reset+0xfb0fe6cc>
8111ebe8:	d9002017 	ldw	r4,128(sp)
8111ebec:	d9801a04 	addi	r6,sp,104
8111ebf0:	a00b883a 	mov	r5,r20
8111ebf4:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111ebf8:	003eb406 	br	8111e6cc <__reset+0xfb0fe6cc>
8111ebfc:	80c00043 	ldbu	r3,1(r16)
8111ec00:	a5000814 	ori	r20,r20,32
8111ec04:	84000044 	addi	r16,r16,1
8111ec08:	18c03fcc 	andi	r3,r3,255
8111ec0c:	18c0201c 	xori	r3,r3,128
8111ec10:	18ffe004 	addi	r3,r3,-128
8111ec14:	003bb706 	br	8111daf4 <__reset+0xfb0fdaf4>
8111ec18:	a809883a 	mov	r4,r21
8111ec1c:	d8c02a15 	stw	r3,168(sp)
8111ec20:	da002b15 	stw	r8,172(sp)
8111ec24:	110f27c0 	call	8110f27c <strlen>
8111ec28:	d8c02a17 	ldw	r3,168(sp)
8111ec2c:	1027883a 	mov	r19,r2
8111ec30:	df001d83 	ldbu	fp,118(sp)
8111ec34:	d8c02215 	stw	r3,136(sp)
8111ec38:	0013883a 	mov	r9,zero
8111ec3c:	da002b17 	ldw	r8,172(sp)
8111ec40:	003c4d06 	br	8111dd78 <__reset+0xfb0fdd78>
8111ec44:	d9402117 	ldw	r5,132(sp)
8111ec48:	d9002017 	ldw	r4,128(sp)
8111ec4c:	d9801a04 	addi	r6,sp,104
8111ec50:	da402c15 	stw	r9,176(sp)
8111ec54:	111d8540 	call	8111d854 <__sprint_r.part.0>
8111ec58:	da402c17 	ldw	r9,176(sp)
8111ec5c:	103e9a1e 	bne	r2,zero,8111e6c8 <__reset+0xfb0fe6c8>
8111ec60:	d9401b17 	ldw	r5,108(sp)
8111ec64:	d8801c17 	ldw	r2,112(sp)
8111ec68:	d811883a 	mov	r8,sp
8111ec6c:	29000044 	addi	r4,r5,1
8111ec70:	003e4206 	br	8111e57c <__reset+0xfb0fe57c>
8111ec74:	d9401b17 	ldw	r5,108(sp)
8111ec78:	01204534 	movhi	r4,33044
8111ec7c:	212b7204 	addi	r4,r4,-21048
8111ec80:	d9002415 	stw	r4,144(sp)
8111ec84:	29400044 	addi	r5,r5,1
8111ec88:	003c6d06 	br	8111de40 <__reset+0xfb0fde40>
8111ec8c:	0039883a 	mov	fp,zero
8111ec90:	00800084 	movi	r2,2
8111ec94:	10803fcc 	andi	r2,r2,255
8111ec98:	01000044 	movi	r4,1
8111ec9c:	11001e26 	beq	r2,r4,8111ed18 <___vfiprintf_internal_r+0x13a8>
8111eca0:	01000084 	movi	r4,2
8111eca4:	11001e1e 	bne	r2,r4,8111ed20 <___vfiprintf_internal_r+0x13b0>
8111eca8:	1829883a 	mov	r20,r3
8111ecac:	003eea06 	br	8111e858 <__reset+0xfb0fe858>
8111ecb0:	a007883a 	mov	r3,r20
8111ecb4:	00800044 	movi	r2,1
8111ecb8:	003ff606 	br	8111ec94 <__reset+0xfb0fec94>
8111ecbc:	00800184 	movi	r2,6
8111ecc0:	1240012e 	bgeu	r2,r9,8111ecc8 <___vfiprintf_internal_r+0x1358>
8111ecc4:	1013883a 	mov	r9,r2
8111ecc8:	4827883a 	mov	r19,r9
8111eccc:	4825883a 	mov	r18,r9
8111ecd0:	48001516 	blt	r9,zero,8111ed28 <___vfiprintf_internal_r+0x13b8>
8111ecd4:	05604534 	movhi	r21,33044
8111ecd8:	d8c02215 	stw	r3,136(sp)
8111ecdc:	ad6ae104 	addi	r21,r21,-21628
8111ece0:	003d1406 	br	8111e134 <__reset+0xfb0fe134>
8111ece4:	02a04534 	movhi	r10,33044
8111ece8:	52ab6e04 	addi	r10,r10,-21064
8111ecec:	da802415 	stw	r10,144(sp)
8111ecf0:	200d883a 	mov	r6,r4
8111ecf4:	003c9106 	br	8111df3c <__reset+0xfb0fdf3c>
8111ecf8:	5021883a 	mov	r16,r10
8111ecfc:	0013883a 	mov	r9,zero
8111ed00:	003b7d06 	br	8111daf8 <__reset+0xfb0fdaf8>
8111ed04:	4827883a 	mov	r19,r9
8111ed08:	df001d83 	ldbu	fp,118(sp)
8111ed0c:	d8c02215 	stw	r3,136(sp)
8111ed10:	0013883a 	mov	r9,zero
8111ed14:	003c1806 	br	8111dd78 <__reset+0xfb0fdd78>
8111ed18:	1829883a 	mov	r20,r3
8111ed1c:	003d1806 	br	8111e180 <__reset+0xfb0fe180>
8111ed20:	1829883a 	mov	r20,r3
8111ed24:	003ccd06 	br	8111e05c <__reset+0xfb0fe05c>
8111ed28:	0025883a 	mov	r18,zero
8111ed2c:	003fe906 	br	8111ecd4 <__reset+0xfb0fecd4>
8111ed30:	d8802217 	ldw	r2,136(sp)
8111ed34:	80c00043 	ldbu	r3,1(r16)
8111ed38:	5021883a 	mov	r16,r10
8111ed3c:	12400017 	ldw	r9,0(r2)
8111ed40:	10800104 	addi	r2,r2,4
8111ed44:	d8802215 	stw	r2,136(sp)
8111ed48:	483faf0e 	bge	r9,zero,8111ec08 <__reset+0xfb0fec08>
8111ed4c:	18c03fcc 	andi	r3,r3,255
8111ed50:	18c0201c 	xori	r3,r3,128
8111ed54:	027fffc4 	movi	r9,-1
8111ed58:	18ffe004 	addi	r3,r3,-128
8111ed5c:	003b6506 	br	8111daf4 <__reset+0xfb0fdaf4>
8111ed60:	d9c01d85 	stb	r7,118(sp)
8111ed64:	003ca006 	br	8111dfe8 <__reset+0xfb0fdfe8>
8111ed68:	d9c01d85 	stb	r7,118(sp)
8111ed6c:	003cad06 	br	8111e024 <__reset+0xfb0fe024>
8111ed70:	d9c01d85 	stb	r7,118(sp)
8111ed74:	003d7d06 	br	8111e36c <__reset+0xfb0fe36c>
8111ed78:	d9c01d85 	stb	r7,118(sp)
8111ed7c:	003d5f06 	br	8111e2fc <__reset+0xfb0fe2fc>
8111ed80:	a080004c 	andi	r2,r20,1
8111ed84:	0039883a 	mov	fp,zero
8111ed88:	10000526 	beq	r2,zero,8111eda0 <___vfiprintf_internal_r+0x1430>
8111ed8c:	00800c04 	movi	r2,48
8111ed90:	d88019c5 	stb	r2,103(sp)
8111ed94:	dcc02717 	ldw	r19,156(sp)
8111ed98:	dd4019c4 	addi	r21,sp,103
8111ed9c:	003bf606 	br	8111dd78 <__reset+0xfb0fdd78>
8111eda0:	0027883a 	mov	r19,zero
8111eda4:	dd401a04 	addi	r21,sp,104
8111eda8:	003bf306 	br	8111dd78 <__reset+0xfb0fdd78>
8111edac:	d9c01d85 	stb	r7,118(sp)
8111edb0:	003dc806 	br	8111e4d4 <__reset+0xfb0fe4d4>
8111edb4:	d9c01d85 	stb	r7,118(sp)
8111edb8:	003d3a06 	br	8111e2a4 <__reset+0xfb0fe2a4>
8111edbc:	d9c01d85 	stb	r7,118(sp)
8111edc0:	003d2a06 	br	8111e26c <__reset+0xfb0fe26c>
8111edc4:	d9c01d85 	stb	r7,118(sp)
8111edc8:	003cde06 	br	8111e144 <__reset+0xfb0fe144>
8111edcc:	d9c01d85 	stb	r7,118(sp)
8111edd0:	003cbc06 	br	8111e0c4 <__reset+0xfb0fe0c4>

8111edd4 <__vfiprintf_internal>:
8111edd4:	00a04534 	movhi	r2,33044
8111edd8:	10b3e404 	addi	r2,r2,-12400
8111eddc:	300f883a 	mov	r7,r6
8111ede0:	280d883a 	mov	r6,r5
8111ede4:	200b883a 	mov	r5,r4
8111ede8:	11000017 	ldw	r4,0(r2)
8111edec:	111d9701 	jmpi	8111d970 <___vfiprintf_internal_r>

8111edf0 <__sbprintf>:
8111edf0:	defee204 	addi	sp,sp,-1144
8111edf4:	de00012e 	bgeu	sp,et,8111edfc <__sbprintf+0xc>
8111edf8:	003b68fa 	trap	3
8111edfc:	2880030b 	ldhu	r2,12(r5)
8111ee00:	2ac01917 	ldw	r11,100(r5)
8111ee04:	2a80038b 	ldhu	r10,14(r5)
8111ee08:	2a400717 	ldw	r9,28(r5)
8111ee0c:	2a000917 	ldw	r8,36(r5)
8111ee10:	00c10004 	movi	r3,1024
8111ee14:	dc011a15 	stw	r16,1128(sp)
8111ee18:	10bfff4c 	andi	r2,r2,65533
8111ee1c:	2821883a 	mov	r16,r5
8111ee20:	d8cb883a 	add	r5,sp,r3
8111ee24:	dc811c15 	stw	r18,1136(sp)
8111ee28:	dc411b15 	stw	r17,1132(sp)
8111ee2c:	dfc11d15 	stw	ra,1140(sp)
8111ee30:	2025883a 	mov	r18,r4
8111ee34:	d881030d 	sth	r2,1036(sp)
8111ee38:	dac11915 	stw	r11,1124(sp)
8111ee3c:	da81038d 	sth	r10,1038(sp)
8111ee40:	da410715 	stw	r9,1052(sp)
8111ee44:	da010915 	stw	r8,1060(sp)
8111ee48:	dec10015 	stw	sp,1024(sp)
8111ee4c:	dec10415 	stw	sp,1040(sp)
8111ee50:	d8c10215 	stw	r3,1032(sp)
8111ee54:	d8c10515 	stw	r3,1044(sp)
8111ee58:	d8010615 	stw	zero,1048(sp)
8111ee5c:	111d9700 	call	8111d970 <___vfiprintf_internal_r>
8111ee60:	1023883a 	mov	r17,r2
8111ee64:	10000416 	blt	r2,zero,8111ee78 <__sbprintf+0x88>
8111ee68:	d9410004 	addi	r5,sp,1024
8111ee6c:	9009883a 	mov	r4,r18
8111ee70:	1116fb00 	call	81116fb0 <_fflush_r>
8111ee74:	10000d1e 	bne	r2,zero,8111eeac <__sbprintf+0xbc>
8111ee78:	d881030b 	ldhu	r2,1036(sp)
8111ee7c:	1080100c 	andi	r2,r2,64
8111ee80:	10000326 	beq	r2,zero,8111ee90 <__sbprintf+0xa0>
8111ee84:	8080030b 	ldhu	r2,12(r16)
8111ee88:	10801014 	ori	r2,r2,64
8111ee8c:	8080030d 	sth	r2,12(r16)
8111ee90:	8805883a 	mov	r2,r17
8111ee94:	dfc11d17 	ldw	ra,1140(sp)
8111ee98:	dc811c17 	ldw	r18,1136(sp)
8111ee9c:	dc411b17 	ldw	r17,1132(sp)
8111eea0:	dc011a17 	ldw	r16,1128(sp)
8111eea4:	dec11e04 	addi	sp,sp,1144
8111eea8:	f800283a 	ret
8111eeac:	047fffc4 	movi	r17,-1
8111eeb0:	003ff106 	br	8111ee78 <__reset+0xfb0fee78>

8111eeb4 <__swbuf_r>:
8111eeb4:	defffb04 	addi	sp,sp,-20
8111eeb8:	de00012e 	bgeu	sp,et,8111eec0 <__swbuf_r+0xc>
8111eebc:	003b68fa 	trap	3
8111eec0:	dcc00315 	stw	r19,12(sp)
8111eec4:	dc800215 	stw	r18,8(sp)
8111eec8:	dc000015 	stw	r16,0(sp)
8111eecc:	dfc00415 	stw	ra,16(sp)
8111eed0:	dc400115 	stw	r17,4(sp)
8111eed4:	2025883a 	mov	r18,r4
8111eed8:	2827883a 	mov	r19,r5
8111eedc:	3021883a 	mov	r16,r6
8111eee0:	20000226 	beq	r4,zero,8111eeec <__swbuf_r+0x38>
8111eee4:	20800e17 	ldw	r2,56(r4)
8111eee8:	10004226 	beq	r2,zero,8111eff4 <__swbuf_r+0x140>
8111eeec:	80800617 	ldw	r2,24(r16)
8111eef0:	8100030b 	ldhu	r4,12(r16)
8111eef4:	80800215 	stw	r2,8(r16)
8111eef8:	2080020c 	andi	r2,r4,8
8111eefc:	10003626 	beq	r2,zero,8111efd8 <__swbuf_r+0x124>
8111ef00:	80c00417 	ldw	r3,16(r16)
8111ef04:	18003426 	beq	r3,zero,8111efd8 <__swbuf_r+0x124>
8111ef08:	2088000c 	andi	r2,r4,8192
8111ef0c:	9c403fcc 	andi	r17,r19,255
8111ef10:	10001a26 	beq	r2,zero,8111ef7c <__swbuf_r+0xc8>
8111ef14:	80800017 	ldw	r2,0(r16)
8111ef18:	81000517 	ldw	r4,20(r16)
8111ef1c:	10c7c83a 	sub	r3,r2,r3
8111ef20:	1900200e 	bge	r3,r4,8111efa4 <__swbuf_r+0xf0>
8111ef24:	18c00044 	addi	r3,r3,1
8111ef28:	81000217 	ldw	r4,8(r16)
8111ef2c:	11400044 	addi	r5,r2,1
8111ef30:	81400015 	stw	r5,0(r16)
8111ef34:	213fffc4 	addi	r4,r4,-1
8111ef38:	81000215 	stw	r4,8(r16)
8111ef3c:	14c00005 	stb	r19,0(r2)
8111ef40:	80800517 	ldw	r2,20(r16)
8111ef44:	10c01e26 	beq	r2,r3,8111efc0 <__swbuf_r+0x10c>
8111ef48:	8080030b 	ldhu	r2,12(r16)
8111ef4c:	1080004c 	andi	r2,r2,1
8111ef50:	10000226 	beq	r2,zero,8111ef5c <__swbuf_r+0xa8>
8111ef54:	00800284 	movi	r2,10
8111ef58:	88801926 	beq	r17,r2,8111efc0 <__swbuf_r+0x10c>
8111ef5c:	8805883a 	mov	r2,r17
8111ef60:	dfc00417 	ldw	ra,16(sp)
8111ef64:	dcc00317 	ldw	r19,12(sp)
8111ef68:	dc800217 	ldw	r18,8(sp)
8111ef6c:	dc400117 	ldw	r17,4(sp)
8111ef70:	dc000017 	ldw	r16,0(sp)
8111ef74:	dec00504 	addi	sp,sp,20
8111ef78:	f800283a 	ret
8111ef7c:	81401917 	ldw	r5,100(r16)
8111ef80:	00b7ffc4 	movi	r2,-8193
8111ef84:	21080014 	ori	r4,r4,8192
8111ef88:	2884703a 	and	r2,r5,r2
8111ef8c:	80801915 	stw	r2,100(r16)
8111ef90:	80800017 	ldw	r2,0(r16)
8111ef94:	8100030d 	sth	r4,12(r16)
8111ef98:	81000517 	ldw	r4,20(r16)
8111ef9c:	10c7c83a 	sub	r3,r2,r3
8111efa0:	193fe016 	blt	r3,r4,8111ef24 <__reset+0xfb0fef24>
8111efa4:	800b883a 	mov	r5,r16
8111efa8:	9009883a 	mov	r4,r18
8111efac:	1116fb00 	call	81116fb0 <_fflush_r>
8111efb0:	1000071e 	bne	r2,zero,8111efd0 <__swbuf_r+0x11c>
8111efb4:	80800017 	ldw	r2,0(r16)
8111efb8:	00c00044 	movi	r3,1
8111efbc:	003fda06 	br	8111ef28 <__reset+0xfb0fef28>
8111efc0:	800b883a 	mov	r5,r16
8111efc4:	9009883a 	mov	r4,r18
8111efc8:	1116fb00 	call	81116fb0 <_fflush_r>
8111efcc:	103fe326 	beq	r2,zero,8111ef5c <__reset+0xfb0fef5c>
8111efd0:	00bfffc4 	movi	r2,-1
8111efd4:	003fe206 	br	8111ef60 <__reset+0xfb0fef60>
8111efd8:	800b883a 	mov	r5,r16
8111efdc:	9009883a 	mov	r4,r18
8111efe0:	111533c0 	call	8111533c <__swsetup_r>
8111efe4:	103ffa1e 	bne	r2,zero,8111efd0 <__reset+0xfb0fefd0>
8111efe8:	8100030b 	ldhu	r4,12(r16)
8111efec:	80c00417 	ldw	r3,16(r16)
8111eff0:	003fc506 	br	8111ef08 <__reset+0xfb0fef08>
8111eff4:	11173ac0 	call	811173ac <__sinit>
8111eff8:	003fbc06 	br	8111eeec <__reset+0xfb0feeec>

8111effc <__swbuf>:
8111effc:	00a04534 	movhi	r2,33044
8111f000:	10b3e404 	addi	r2,r2,-12400
8111f004:	280d883a 	mov	r6,r5
8111f008:	200b883a 	mov	r5,r4
8111f00c:	11000017 	ldw	r4,0(r2)
8111f010:	111eeb41 	jmpi	8111eeb4 <__swbuf_r>

8111f014 <_calloc_r>:
8111f014:	298b383a 	mul	r5,r5,r6
8111f018:	defffe04 	addi	sp,sp,-8
8111f01c:	de00012e 	bgeu	sp,et,8111f024 <_calloc_r+0x10>
8111f020:	003b68fa 	trap	3
8111f024:	dfc00115 	stw	ra,4(sp)
8111f028:	dc000015 	stw	r16,0(sp)
8111f02c:	110e0cc0 	call	8110e0cc <_malloc_r>
8111f030:	10002926 	beq	r2,zero,8111f0d8 <_calloc_r+0xc4>
8111f034:	11bfff17 	ldw	r6,-4(r2)
8111f038:	1021883a 	mov	r16,r2
8111f03c:	00bfff04 	movi	r2,-4
8111f040:	308c703a 	and	r6,r6,r2
8111f044:	00c00904 	movi	r3,36
8111f048:	308d883a 	add	r6,r6,r2
8111f04c:	19801636 	bltu	r3,r6,8111f0a8 <_calloc_r+0x94>
8111f050:	008004c4 	movi	r2,19
8111f054:	11800b2e 	bgeu	r2,r6,8111f084 <_calloc_r+0x70>
8111f058:	80000015 	stw	zero,0(r16)
8111f05c:	80000115 	stw	zero,4(r16)
8111f060:	008006c4 	movi	r2,27
8111f064:	11801a2e 	bgeu	r2,r6,8111f0d0 <_calloc_r+0xbc>
8111f068:	80000215 	stw	zero,8(r16)
8111f06c:	80000315 	stw	zero,12(r16)
8111f070:	30c0151e 	bne	r6,r3,8111f0c8 <_calloc_r+0xb4>
8111f074:	80000415 	stw	zero,16(r16)
8111f078:	80800604 	addi	r2,r16,24
8111f07c:	80000515 	stw	zero,20(r16)
8111f080:	00000106 	br	8111f088 <_calloc_r+0x74>
8111f084:	8005883a 	mov	r2,r16
8111f088:	10000015 	stw	zero,0(r2)
8111f08c:	10000115 	stw	zero,4(r2)
8111f090:	10000215 	stw	zero,8(r2)
8111f094:	8005883a 	mov	r2,r16
8111f098:	dfc00117 	ldw	ra,4(sp)
8111f09c:	dc000017 	ldw	r16,0(sp)
8111f0a0:	dec00204 	addi	sp,sp,8
8111f0a4:	f800283a 	ret
8111f0a8:	000b883a 	mov	r5,zero
8111f0ac:	8009883a 	mov	r4,r16
8111f0b0:	110ea300 	call	8110ea30 <memset>
8111f0b4:	8005883a 	mov	r2,r16
8111f0b8:	dfc00117 	ldw	ra,4(sp)
8111f0bc:	dc000017 	ldw	r16,0(sp)
8111f0c0:	dec00204 	addi	sp,sp,8
8111f0c4:	f800283a 	ret
8111f0c8:	80800404 	addi	r2,r16,16
8111f0cc:	003fee06 	br	8111f088 <__reset+0xfb0ff088>
8111f0d0:	80800204 	addi	r2,r16,8
8111f0d4:	003fec06 	br	8111f088 <__reset+0xfb0ff088>
8111f0d8:	0005883a 	mov	r2,zero
8111f0dc:	003fee06 	br	8111f098 <__reset+0xfb0ff098>

8111f0e0 <_fclose_r>:
8111f0e0:	28003b26 	beq	r5,zero,8111f1d0 <_fclose_r+0xf0>
8111f0e4:	defffc04 	addi	sp,sp,-16
8111f0e8:	de00012e 	bgeu	sp,et,8111f0f0 <_fclose_r+0x10>
8111f0ec:	003b68fa 	trap	3
8111f0f0:	dc400115 	stw	r17,4(sp)
8111f0f4:	dc000015 	stw	r16,0(sp)
8111f0f8:	dfc00315 	stw	ra,12(sp)
8111f0fc:	dc800215 	stw	r18,8(sp)
8111f100:	2023883a 	mov	r17,r4
8111f104:	2821883a 	mov	r16,r5
8111f108:	20000226 	beq	r4,zero,8111f114 <_fclose_r+0x34>
8111f10c:	20800e17 	ldw	r2,56(r4)
8111f110:	10002726 	beq	r2,zero,8111f1b0 <_fclose_r+0xd0>
8111f114:	8080030f 	ldh	r2,12(r16)
8111f118:	1000071e 	bne	r2,zero,8111f138 <_fclose_r+0x58>
8111f11c:	0005883a 	mov	r2,zero
8111f120:	dfc00317 	ldw	ra,12(sp)
8111f124:	dc800217 	ldw	r18,8(sp)
8111f128:	dc400117 	ldw	r17,4(sp)
8111f12c:	dc000017 	ldw	r16,0(sp)
8111f130:	dec00404 	addi	sp,sp,16
8111f134:	f800283a 	ret
8111f138:	800b883a 	mov	r5,r16
8111f13c:	8809883a 	mov	r4,r17
8111f140:	1116d8c0 	call	81116d8c <__sflush_r>
8111f144:	1025883a 	mov	r18,r2
8111f148:	80800b17 	ldw	r2,44(r16)
8111f14c:	10000426 	beq	r2,zero,8111f160 <_fclose_r+0x80>
8111f150:	81400717 	ldw	r5,28(r16)
8111f154:	8809883a 	mov	r4,r17
8111f158:	103ee83a 	callr	r2
8111f15c:	10001616 	blt	r2,zero,8111f1b8 <_fclose_r+0xd8>
8111f160:	8080030b 	ldhu	r2,12(r16)
8111f164:	1080200c 	andi	r2,r2,128
8111f168:	1000151e 	bne	r2,zero,8111f1c0 <_fclose_r+0xe0>
8111f16c:	81400c17 	ldw	r5,48(r16)
8111f170:	28000526 	beq	r5,zero,8111f188 <_fclose_r+0xa8>
8111f174:	80801004 	addi	r2,r16,64
8111f178:	28800226 	beq	r5,r2,8111f184 <_fclose_r+0xa4>
8111f17c:	8809883a 	mov	r4,r17
8111f180:	11178440 	call	81117844 <_free_r>
8111f184:	80000c15 	stw	zero,48(r16)
8111f188:	81401117 	ldw	r5,68(r16)
8111f18c:	28000326 	beq	r5,zero,8111f19c <_fclose_r+0xbc>
8111f190:	8809883a 	mov	r4,r17
8111f194:	11178440 	call	81117844 <_free_r>
8111f198:	80001115 	stw	zero,68(r16)
8111f19c:	11173bc0 	call	811173bc <__sfp_lock_acquire>
8111f1a0:	8000030d 	sth	zero,12(r16)
8111f1a4:	11173c00 	call	811173c0 <__sfp_lock_release>
8111f1a8:	9005883a 	mov	r2,r18
8111f1ac:	003fdc06 	br	8111f120 <__reset+0xfb0ff120>
8111f1b0:	11173ac0 	call	811173ac <__sinit>
8111f1b4:	003fd706 	br	8111f114 <__reset+0xfb0ff114>
8111f1b8:	04bfffc4 	movi	r18,-1
8111f1bc:	003fe806 	br	8111f160 <__reset+0xfb0ff160>
8111f1c0:	81400417 	ldw	r5,16(r16)
8111f1c4:	8809883a 	mov	r4,r17
8111f1c8:	11178440 	call	81117844 <_free_r>
8111f1cc:	003fe706 	br	8111f16c <__reset+0xfb0ff16c>
8111f1d0:	0005883a 	mov	r2,zero
8111f1d4:	f800283a 	ret

8111f1d8 <fclose>:
8111f1d8:	00a04534 	movhi	r2,33044
8111f1dc:	10b3e404 	addi	r2,r2,-12400
8111f1e0:	200b883a 	mov	r5,r4
8111f1e4:	11000017 	ldw	r4,0(r2)
8111f1e8:	111f0e01 	jmpi	8111f0e0 <_fclose_r>

8111f1ec <__fputwc>:
8111f1ec:	defff804 	addi	sp,sp,-32
8111f1f0:	de00012e 	bgeu	sp,et,8111f1f8 <__fputwc+0xc>
8111f1f4:	003b68fa 	trap	3
8111f1f8:	dcc00415 	stw	r19,16(sp)
8111f1fc:	dc800315 	stw	r18,12(sp)
8111f200:	dc000115 	stw	r16,4(sp)
8111f204:	dfc00715 	stw	ra,28(sp)
8111f208:	dd400615 	stw	r21,24(sp)
8111f20c:	dd000515 	stw	r20,20(sp)
8111f210:	dc400215 	stw	r17,8(sp)
8111f214:	2027883a 	mov	r19,r4
8111f218:	2825883a 	mov	r18,r5
8111f21c:	3021883a 	mov	r16,r6
8111f220:	11182d40 	call	811182d4 <__locale_mb_cur_max>
8111f224:	00c00044 	movi	r3,1
8111f228:	10c03e26 	beq	r2,r3,8111f324 <__fputwc+0x138>
8111f22c:	81c01704 	addi	r7,r16,92
8111f230:	900d883a 	mov	r6,r18
8111f234:	d80b883a 	mov	r5,sp
8111f238:	9809883a 	mov	r4,r19
8111f23c:	11200700 	call	81120070 <_wcrtomb_r>
8111f240:	1029883a 	mov	r20,r2
8111f244:	00bfffc4 	movi	r2,-1
8111f248:	a0802026 	beq	r20,r2,8111f2cc <__fputwc+0xe0>
8111f24c:	d9400003 	ldbu	r5,0(sp)
8111f250:	a0001c26 	beq	r20,zero,8111f2c4 <__fputwc+0xd8>
8111f254:	0023883a 	mov	r17,zero
8111f258:	05400284 	movi	r21,10
8111f25c:	00000906 	br	8111f284 <__fputwc+0x98>
8111f260:	80800017 	ldw	r2,0(r16)
8111f264:	11400005 	stb	r5,0(r2)
8111f268:	80c00017 	ldw	r3,0(r16)
8111f26c:	18c00044 	addi	r3,r3,1
8111f270:	80c00015 	stw	r3,0(r16)
8111f274:	8c400044 	addi	r17,r17,1
8111f278:	dc45883a 	add	r2,sp,r17
8111f27c:	8d00112e 	bgeu	r17,r20,8111f2c4 <__fputwc+0xd8>
8111f280:	11400003 	ldbu	r5,0(r2)
8111f284:	80c00217 	ldw	r3,8(r16)
8111f288:	18ffffc4 	addi	r3,r3,-1
8111f28c:	80c00215 	stw	r3,8(r16)
8111f290:	183ff30e 	bge	r3,zero,8111f260 <__reset+0xfb0ff260>
8111f294:	80800617 	ldw	r2,24(r16)
8111f298:	18801916 	blt	r3,r2,8111f300 <__fputwc+0x114>
8111f29c:	80800017 	ldw	r2,0(r16)
8111f2a0:	11400005 	stb	r5,0(r2)
8111f2a4:	80800017 	ldw	r2,0(r16)
8111f2a8:	10c00003 	ldbu	r3,0(r2)
8111f2ac:	10800044 	addi	r2,r2,1
8111f2b0:	1d402326 	beq	r3,r21,8111f340 <__fputwc+0x154>
8111f2b4:	80800015 	stw	r2,0(r16)
8111f2b8:	8c400044 	addi	r17,r17,1
8111f2bc:	dc45883a 	add	r2,sp,r17
8111f2c0:	8d3fef36 	bltu	r17,r20,8111f280 <__reset+0xfb0ff280>
8111f2c4:	9005883a 	mov	r2,r18
8111f2c8:	00000406 	br	8111f2dc <__fputwc+0xf0>
8111f2cc:	80c0030b 	ldhu	r3,12(r16)
8111f2d0:	a005883a 	mov	r2,r20
8111f2d4:	18c01014 	ori	r3,r3,64
8111f2d8:	80c0030d 	sth	r3,12(r16)
8111f2dc:	dfc00717 	ldw	ra,28(sp)
8111f2e0:	dd400617 	ldw	r21,24(sp)
8111f2e4:	dd000517 	ldw	r20,20(sp)
8111f2e8:	dcc00417 	ldw	r19,16(sp)
8111f2ec:	dc800317 	ldw	r18,12(sp)
8111f2f0:	dc400217 	ldw	r17,8(sp)
8111f2f4:	dc000117 	ldw	r16,4(sp)
8111f2f8:	dec00804 	addi	sp,sp,32
8111f2fc:	f800283a 	ret
8111f300:	800d883a 	mov	r6,r16
8111f304:	29403fcc 	andi	r5,r5,255
8111f308:	9809883a 	mov	r4,r19
8111f30c:	111eeb40 	call	8111eeb4 <__swbuf_r>
8111f310:	10bfffe0 	cmpeqi	r2,r2,-1
8111f314:	10803fcc 	andi	r2,r2,255
8111f318:	103fd626 	beq	r2,zero,8111f274 <__reset+0xfb0ff274>
8111f31c:	00bfffc4 	movi	r2,-1
8111f320:	003fee06 	br	8111f2dc <__reset+0xfb0ff2dc>
8111f324:	90ffffc4 	addi	r3,r18,-1
8111f328:	01003f84 	movi	r4,254
8111f32c:	20ffbf36 	bltu	r4,r3,8111f22c <__reset+0xfb0ff22c>
8111f330:	900b883a 	mov	r5,r18
8111f334:	dc800005 	stb	r18,0(sp)
8111f338:	1029883a 	mov	r20,r2
8111f33c:	003fc506 	br	8111f254 <__reset+0xfb0ff254>
8111f340:	800d883a 	mov	r6,r16
8111f344:	a80b883a 	mov	r5,r21
8111f348:	9809883a 	mov	r4,r19
8111f34c:	111eeb40 	call	8111eeb4 <__swbuf_r>
8111f350:	10bfffe0 	cmpeqi	r2,r2,-1
8111f354:	003fef06 	br	8111f314 <__reset+0xfb0ff314>

8111f358 <_fputwc_r>:
8111f358:	3080030b 	ldhu	r2,12(r6)
8111f35c:	10c8000c 	andi	r3,r2,8192
8111f360:	1800051e 	bne	r3,zero,8111f378 <_fputwc_r+0x20>
8111f364:	30c01917 	ldw	r3,100(r6)
8111f368:	10880014 	ori	r2,r2,8192
8111f36c:	3080030d 	sth	r2,12(r6)
8111f370:	18880014 	ori	r2,r3,8192
8111f374:	30801915 	stw	r2,100(r6)
8111f378:	111f1ec1 	jmpi	8111f1ec <__fputwc>

8111f37c <fputwc>:
8111f37c:	00a04534 	movhi	r2,33044
8111f380:	defffc04 	addi	sp,sp,-16
8111f384:	10b3e404 	addi	r2,r2,-12400
8111f388:	de00012e 	bgeu	sp,et,8111f390 <fputwc+0x14>
8111f38c:	003b68fa 	trap	3
8111f390:	dc000115 	stw	r16,4(sp)
8111f394:	14000017 	ldw	r16,0(r2)
8111f398:	dc400215 	stw	r17,8(sp)
8111f39c:	dfc00315 	stw	ra,12(sp)
8111f3a0:	2023883a 	mov	r17,r4
8111f3a4:	80000226 	beq	r16,zero,8111f3b0 <fputwc+0x34>
8111f3a8:	80800e17 	ldw	r2,56(r16)
8111f3ac:	10001026 	beq	r2,zero,8111f3f0 <fputwc+0x74>
8111f3b0:	2880030b 	ldhu	r2,12(r5)
8111f3b4:	10c8000c 	andi	r3,r2,8192
8111f3b8:	1800051e 	bne	r3,zero,8111f3d0 <fputwc+0x54>
8111f3bc:	28c01917 	ldw	r3,100(r5)
8111f3c0:	10880014 	ori	r2,r2,8192
8111f3c4:	2880030d 	sth	r2,12(r5)
8111f3c8:	18880014 	ori	r2,r3,8192
8111f3cc:	28801915 	stw	r2,100(r5)
8111f3d0:	280d883a 	mov	r6,r5
8111f3d4:	8009883a 	mov	r4,r16
8111f3d8:	880b883a 	mov	r5,r17
8111f3dc:	dfc00317 	ldw	ra,12(sp)
8111f3e0:	dc400217 	ldw	r17,8(sp)
8111f3e4:	dc000117 	ldw	r16,4(sp)
8111f3e8:	dec00404 	addi	sp,sp,16
8111f3ec:	111f1ec1 	jmpi	8111f1ec <__fputwc>
8111f3f0:	8009883a 	mov	r4,r16
8111f3f4:	d9400015 	stw	r5,0(sp)
8111f3f8:	11173ac0 	call	811173ac <__sinit>
8111f3fc:	d9400017 	ldw	r5,0(sp)
8111f400:	003feb06 	br	8111f3b0 <__reset+0xfb0ff3b0>

8111f404 <rshift>:
8111f404:	2807d17a 	srai	r3,r5,5
8111f408:	20800417 	ldw	r2,16(r4)
8111f40c:	22000504 	addi	r8,r4,20
8111f410:	1880250e 	bge	r3,r2,8111f4a8 <rshift+0xa4>
8111f414:	1085883a 	add	r2,r2,r2
8111f418:	18c7883a 	add	r3,r3,r3
8111f41c:	1085883a 	add	r2,r2,r2
8111f420:	18c7883a 	add	r3,r3,r3
8111f424:	294007cc 	andi	r5,r5,31
8111f428:	4085883a 	add	r2,r8,r2
8111f42c:	40c7883a 	add	r3,r8,r3
8111f430:	28002026 	beq	r5,zero,8111f4b4 <rshift+0xb0>
8111f434:	19800017 	ldw	r6,0(r3)
8111f438:	02c00804 	movi	r11,32
8111f43c:	19c00104 	addi	r7,r3,4
8111f440:	5957c83a 	sub	r11,r11,r5
8111f444:	314cd83a 	srl	r6,r6,r5
8111f448:	38802c2e 	bgeu	r7,r2,8111f4fc <rshift+0xf8>
8111f44c:	4015883a 	mov	r10,r8
8111f450:	3a400017 	ldw	r9,0(r7)
8111f454:	52800104 	addi	r10,r10,4
8111f458:	39c00104 	addi	r7,r7,4
8111f45c:	4ad2983a 	sll	r9,r9,r11
8111f460:	498cb03a 	or	r6,r9,r6
8111f464:	51bfff15 	stw	r6,-4(r10)
8111f468:	39bfff17 	ldw	r6,-4(r7)
8111f46c:	314cd83a 	srl	r6,r6,r5
8111f470:	38bff736 	bltu	r7,r2,8111f450 <__reset+0xfb0ff450>
8111f474:	10c7c83a 	sub	r3,r2,r3
8111f478:	18fffec4 	addi	r3,r3,-5
8111f47c:	1806d0ba 	srli	r3,r3,2
8111f480:	18c00044 	addi	r3,r3,1
8111f484:	18c7883a 	add	r3,r3,r3
8111f488:	18c7883a 	add	r3,r3,r3
8111f48c:	40c7883a 	add	r3,r8,r3
8111f490:	19800015 	stw	r6,0(r3)
8111f494:	30000126 	beq	r6,zero,8111f49c <rshift+0x98>
8111f498:	18c00104 	addi	r3,r3,4
8111f49c:	1a05c83a 	sub	r2,r3,r8
8111f4a0:	1005d0ba 	srai	r2,r2,2
8111f4a4:	00001206 	br	8111f4f0 <rshift+0xec>
8111f4a8:	20000415 	stw	zero,16(r4)
8111f4ac:	20000515 	stw	zero,20(r4)
8111f4b0:	f800283a 	ret
8111f4b4:	18bffc2e 	bgeu	r3,r2,8111f4a8 <__reset+0xfb0ff4a8>
8111f4b8:	180d883a 	mov	r6,r3
8111f4bc:	400b883a 	mov	r5,r8
8111f4c0:	31c00017 	ldw	r7,0(r6)
8111f4c4:	29400104 	addi	r5,r5,4
8111f4c8:	31800104 	addi	r6,r6,4
8111f4cc:	29ffff15 	stw	r7,-4(r5)
8111f4d0:	30bffb36 	bltu	r6,r2,8111f4c0 <__reset+0xfb0ff4c0>
8111f4d4:	00c6303a 	nor	r3,zero,r3
8111f4d8:	1885883a 	add	r2,r3,r2
8111f4dc:	1004d0ba 	srli	r2,r2,2
8111f4e0:	10800044 	addi	r2,r2,1
8111f4e4:	1085883a 	add	r2,r2,r2
8111f4e8:	1085883a 	add	r2,r2,r2
8111f4ec:	1005d0ba 	srai	r2,r2,2
8111f4f0:	20800415 	stw	r2,16(r4)
8111f4f4:	103fed26 	beq	r2,zero,8111f4ac <__reset+0xfb0ff4ac>
8111f4f8:	f800283a 	ret
8111f4fc:	4007883a 	mov	r3,r8
8111f500:	003fe306 	br	8111f490 <__reset+0xfb0ff490>

8111f504 <__gethex>:
8111f504:	deffeb04 	addi	sp,sp,-84
8111f508:	de00012e 	bgeu	sp,et,8111f510 <__gethex+0xc>
8111f50c:	003b68fa 	trap	3
8111f510:	dfc01415 	stw	ra,80(sp)
8111f514:	dd801115 	stw	r22,68(sp)
8111f518:	dcc00e15 	stw	r19,56(sp)
8111f51c:	dc800d15 	stw	r18,52(sp)
8111f520:	2827883a 	mov	r19,r5
8111f524:	d9000115 	stw	r4,4(sp)
8111f528:	d9800015 	stw	r6,0(sp)
8111f52c:	d9c00415 	stw	r7,16(sp)
8111f530:	df001315 	stw	fp,76(sp)
8111f534:	ddc01215 	stw	r23,72(sp)
8111f538:	dd401015 	stw	r21,64(sp)
8111f53c:	dd000f15 	stw	r20,60(sp)
8111f540:	dc400c15 	stw	r17,48(sp)
8111f544:	dc000b15 	stw	r16,44(sp)
8111f548:	11182f80 	call	811182f8 <_localeconv_r>
8111f54c:	14800017 	ldw	r18,0(r2)
8111f550:	9009883a 	mov	r4,r18
8111f554:	110f27c0 	call	8110f27c <strlen>
8111f558:	98c00017 	ldw	r3,0(r19)
8111f55c:	102d883a 	mov	r22,r2
8111f560:	9085883a 	add	r2,r18,r2
8111f564:	10bfffc3 	ldbu	r2,-1(r2)
8111f568:	19000083 	ldbu	r4,2(r3)
8111f56c:	d8800305 	stb	r2,12(sp)
8111f570:	00800c04 	movi	r2,48
8111f574:	2081521e 	bne	r4,r2,8111fac0 <__gethex+0x5bc>
8111f578:	017fff84 	movi	r5,-2
8111f57c:	188000c4 	addi	r2,r3,3
8111f580:	28cbc83a 	sub	r5,r5,r3
8111f584:	200d883a 	mov	r6,r4
8111f588:	28a3883a 	add	r17,r5,r2
8111f58c:	102b883a 	mov	r21,r2
8111f590:	10800044 	addi	r2,r2,1
8111f594:	113fffc3 	ldbu	r4,-1(r2)
8111f598:	21bffb26 	beq	r4,r6,8111f588 <__reset+0xfb0ff588>
8111f59c:	05204534 	movhi	r20,33044
8111f5a0:	a52b7604 	addi	r20,r20,-21032
8111f5a4:	a109883a 	add	r4,r20,r4
8111f5a8:	20800003 	ldbu	r2,0(r4)
8111f5ac:	10008826 	beq	r2,zero,8111f7d0 <__gethex+0x2cc>
8111f5b0:	a8800003 	ldbu	r2,0(r21)
8111f5b4:	0015883a 	mov	r10,zero
8111f5b8:	002f883a 	mov	r23,zero
8111f5bc:	a085883a 	add	r2,r20,r2
8111f5c0:	10800003 	ldbu	r2,0(r2)
8111f5c4:	a821883a 	mov	r16,r21
8111f5c8:	10000526 	beq	r2,zero,8111f5e0 <__gethex+0xdc>
8111f5cc:	84000044 	addi	r16,r16,1
8111f5d0:	80800003 	ldbu	r2,0(r16)
8111f5d4:	a085883a 	add	r2,r20,r2
8111f5d8:	10800003 	ldbu	r2,0(r2)
8111f5dc:	103ffb1e 	bne	r2,zero,8111f5cc <__reset+0xfb0ff5cc>
8111f5e0:	b00d883a 	mov	r6,r22
8111f5e4:	900b883a 	mov	r5,r18
8111f5e8:	8009883a 	mov	r4,r16
8111f5ec:	da800a15 	stw	r10,40(sp)
8111f5f0:	111ffa00 	call	8111ffa0 <strncmp>
8111f5f4:	da800a17 	ldw	r10,40(sp)
8111f5f8:	1000031e 	bne	r2,zero,8111f608 <__gethex+0x104>
8111f5fc:	b8015226 	beq	r23,zero,8111fb48 <__gethex+0x644>
8111f600:	80800003 	ldbu	r2,0(r16)
8111f604:	00000206 	br	8111f610 <__gethex+0x10c>
8111f608:	80800003 	ldbu	r2,0(r16)
8111f60c:	b8011f26 	beq	r23,zero,8111fa8c <__gethex+0x588>
8111f610:	85efc83a 	sub	r23,r16,r23
8111f614:	bdef883a 	add	r23,r23,r23
8111f618:	bdef883a 	add	r23,r23,r23
8111f61c:	05efc83a 	sub	r23,zero,r23
8111f620:	10803fcc 	andi	r2,r2,255
8111f624:	01001404 	movi	r4,80
8111f628:	11008626 	beq	r2,r4,8111f844 <__gethex+0x340>
8111f62c:	01001c04 	movi	r4,112
8111f630:	11008426 	beq	r2,r4,8111f844 <__gethex+0x340>
8111f634:	8039883a 	mov	fp,r16
8111f638:	9c000015 	stw	r16,0(r19)
8111f63c:	5000711e 	bne	r10,zero,8111f804 <__gethex+0x300>
8111f640:	e545c83a 	sub	r2,fp,r21
8111f644:	10bfffc4 	addi	r2,r2,-1
8111f648:	010001c4 	movi	r4,7
8111f64c:	000b883a 	mov	r5,zero
8111f650:	2080030e 	bge	r4,r2,8111f660 <__gethex+0x15c>
8111f654:	1005d07a 	srai	r2,r2,1
8111f658:	29400044 	addi	r5,r5,1
8111f65c:	20bffd16 	blt	r4,r2,8111f654 <__reset+0xfb0ff654>
8111f660:	d9000117 	ldw	r4,4(sp)
8111f664:	11188140 	call	81118814 <_Balloc>
8111f668:	10c00504 	addi	r3,r2,20
8111f66c:	d8c00215 	stw	r3,8(sp)
8111f670:	1021883a 	mov	r16,r2
8111f674:	af01732e 	bgeu	r21,fp,8111fc44 <__gethex+0x740>
8111f678:	dc400303 	ldbu	r17,12(sp)
8111f67c:	03400044 	movi	r13,1
8111f680:	1815883a 	mov	r10,r3
8111f684:	0013883a 	mov	r9,zero
8111f688:	0027883a 	mov	r19,zero
8111f68c:	6d9bc83a 	sub	r13,r13,r22
8111f690:	02c00804 	movi	r11,32
8111f694:	e0bfffc3 	ldbu	r2,-1(fp)
8111f698:	e3bfffc4 	addi	r14,fp,-1
8111f69c:	88803026 	beq	r17,r2,8111f760 <__gethex+0x25c>
8111f6a0:	9ac04526 	beq	r19,r11,8111f7b8 <__gethex+0x2b4>
8111f6a4:	980b883a 	mov	r5,r19
8111f6a8:	9cc00104 	addi	r19,r19,4
8111f6ac:	e13fffc3 	ldbu	r4,-1(fp)
8111f6b0:	7039883a 	mov	fp,r14
8111f6b4:	a109883a 	add	r4,r20,r4
8111f6b8:	20800003 	ldbu	r2,0(r4)
8111f6bc:	108003cc 	andi	r2,r2,15
8111f6c0:	1144983a 	sll	r2,r2,r5
8111f6c4:	4892b03a 	or	r9,r9,r2
8111f6c8:	af3ff236 	bltu	r21,fp,8111f694 <__reset+0xfb0ff694>
8111f6cc:	d8c00217 	ldw	r3,8(sp)
8111f6d0:	50800104 	addi	r2,r10,4
8111f6d4:	52400015 	stw	r9,0(r10)
8111f6d8:	10c5c83a 	sub	r2,r2,r3
8111f6dc:	1005d0ba 	srai	r2,r2,2
8111f6e0:	4809883a 	mov	r4,r9
8111f6e4:	80800415 	stw	r2,16(r16)
8111f6e8:	1022917a 	slli	r17,r2,5
8111f6ec:	1118b200 	call	81118b20 <__hi0bits>
8111f6f0:	d8c00017 	ldw	r3,0(sp)
8111f6f4:	8885c83a 	sub	r2,r17,r2
8111f6f8:	1c800017 	ldw	r18,0(r3)
8111f6fc:	9080c716 	blt	r18,r2,8111fa1c <__gethex+0x518>
8111f700:	1480e416 	blt	r2,r18,8111fa94 <__gethex+0x590>
8111f704:	0027883a 	mov	r19,zero
8111f708:	d8c00017 	ldw	r3,0(sp)
8111f70c:	18800217 	ldw	r2,8(r3)
8111f710:	15c08d16 	blt	r2,r23,8111f948 <__gethex+0x444>
8111f714:	d8c00017 	ldw	r3,0(sp)
8111f718:	18800117 	ldw	r2,4(r3)
8111f71c:	b880aa0e 	bge	r23,r2,8111f9c8 <__gethex+0x4c4>
8111f720:	15efc83a 	sub	r23,r2,r23
8111f724:	bc80ed16 	blt	r23,r18,8111fadc <__gethex+0x5d8>
8111f728:	18c00317 	ldw	r3,12(r3)
8111f72c:	01000084 	movi	r4,2
8111f730:	19014926 	beq	r3,r4,8111fc58 <__gethex+0x754>
8111f734:	010000c4 	movi	r4,3
8111f738:	19012e26 	beq	r3,r4,8111fbf4 <__gethex+0x6f0>
8111f73c:	01000044 	movi	r4,1
8111f740:	19014826 	beq	r3,r4,8111fc64 <__gethex+0x760>
8111f744:	d9000117 	ldw	r4,4(sp)
8111f748:	800b883a 	mov	r5,r16
8111f74c:	11188c40 	call	811188c4 <_Bfree>
8111f750:	d8801517 	ldw	r2,84(sp)
8111f754:	10000015 	stw	zero,0(r2)
8111f758:	00801404 	movi	r2,80
8111f75c:	00002b06 	br	8111f80c <__gethex+0x308>
8111f760:	735f883a 	add	r15,r14,r13
8111f764:	7d7fce36 	bltu	r15,r21,8111f6a0 <__reset+0xfb0ff6a0>
8111f768:	7809883a 	mov	r4,r15
8111f76c:	b00d883a 	mov	r6,r22
8111f770:	900b883a 	mov	r5,r18
8111f774:	da400515 	stw	r9,20(sp)
8111f778:	da800a15 	stw	r10,40(sp)
8111f77c:	dac00915 	stw	r11,36(sp)
8111f780:	db400815 	stw	r13,32(sp)
8111f784:	db800615 	stw	r14,24(sp)
8111f788:	dbc00715 	stw	r15,28(sp)
8111f78c:	111ffa00 	call	8111ffa0 <strncmp>
8111f790:	da400517 	ldw	r9,20(sp)
8111f794:	da800a17 	ldw	r10,40(sp)
8111f798:	dac00917 	ldw	r11,36(sp)
8111f79c:	db400817 	ldw	r13,32(sp)
8111f7a0:	db800617 	ldw	r14,24(sp)
8111f7a4:	dbc00717 	ldw	r15,28(sp)
8111f7a8:	103fbd1e 	bne	r2,zero,8111f6a0 <__reset+0xfb0ff6a0>
8111f7ac:	7839883a 	mov	fp,r15
8111f7b0:	af3fb836 	bltu	r21,fp,8111f694 <__reset+0xfb0ff694>
8111f7b4:	003fc506 	br	8111f6cc <__reset+0xfb0ff6cc>
8111f7b8:	04c00104 	movi	r19,4
8111f7bc:	52400015 	stw	r9,0(r10)
8111f7c0:	000b883a 	mov	r5,zero
8111f7c4:	54d5883a 	add	r10,r10,r19
8111f7c8:	0013883a 	mov	r9,zero
8111f7cc:	003fb706 	br	8111f6ac <__reset+0xfb0ff6ac>
8111f7d0:	b00d883a 	mov	r6,r22
8111f7d4:	900b883a 	mov	r5,r18
8111f7d8:	a809883a 	mov	r4,r21
8111f7dc:	111ffa00 	call	8111ffa0 <strncmp>
8111f7e0:	10006426 	beq	r2,zero,8111f974 <__gethex+0x470>
8111f7e4:	a8800003 	ldbu	r2,0(r21)
8111f7e8:	a821883a 	mov	r16,r21
8111f7ec:	10803fcc 	andi	r2,r2,255
8111f7f0:	01001404 	movi	r4,80
8111f7f4:	11001126 	beq	r2,r4,8111f83c <__gethex+0x338>
8111f7f8:	01001c04 	movi	r4,112
8111f7fc:	11000f26 	beq	r2,r4,8111f83c <__gethex+0x338>
8111f800:	9c000015 	stw	r16,0(r19)
8111f804:	8800831e 	bne	r17,zero,8111fa14 <__gethex+0x510>
8111f808:	00800184 	movi	r2,6
8111f80c:	dfc01417 	ldw	ra,80(sp)
8111f810:	df001317 	ldw	fp,76(sp)
8111f814:	ddc01217 	ldw	r23,72(sp)
8111f818:	dd801117 	ldw	r22,68(sp)
8111f81c:	dd401017 	ldw	r21,64(sp)
8111f820:	dd000f17 	ldw	r20,60(sp)
8111f824:	dcc00e17 	ldw	r19,56(sp)
8111f828:	dc800d17 	ldw	r18,52(sp)
8111f82c:	dc400c17 	ldw	r17,48(sp)
8111f830:	dc000b17 	ldw	r16,44(sp)
8111f834:	dec01504 	addi	sp,sp,84
8111f838:	f800283a 	ret
8111f83c:	002f883a 	mov	r23,zero
8111f840:	02800044 	movi	r10,1
8111f844:	80800043 	ldbu	r2,1(r16)
8111f848:	01400ac4 	movi	r5,43
8111f84c:	11003fcc 	andi	r4,r2,255
8111f850:	21406e26 	beq	r4,r5,8111fa0c <__gethex+0x508>
8111f854:	01400b44 	movi	r5,45
8111f858:	21404226 	beq	r4,r5,8111f964 <__gethex+0x460>
8111f85c:	81400044 	addi	r5,r16,1
8111f860:	000d883a 	mov	r6,zero
8111f864:	10803fcc 	andi	r2,r2,255
8111f868:	a085883a 	add	r2,r20,r2
8111f86c:	11000003 	ldbu	r4,0(r2)
8111f870:	03000604 	movi	r12,24
8111f874:	20bfffc4 	addi	r2,r4,-1
8111f878:	10803fcc 	andi	r2,r2,255
8111f87c:	60bf6d36 	bltu	r12,r2,8111f634 <__reset+0xfb0ff634>
8111f880:	2ac00043 	ldbu	r11,1(r5)
8111f884:	20803fcc 	andi	r2,r4,255
8111f888:	01204534 	movhi	r4,33044
8111f88c:	212b7604 	addi	r4,r4,-21032
8111f890:	22c9883a 	add	r4,r4,r11
8111f894:	23400003 	ldbu	r13,0(r4)
8111f898:	10bffc04 	addi	r2,r2,-16
8111f89c:	29400044 	addi	r5,r5,1
8111f8a0:	693fffc4 	addi	r4,r13,-1
8111f8a4:	21003fcc 	andi	r4,r4,255
8111f8a8:	6b403fcc 	andi	r13,r13,255
8111f8ac:	61000b36 	bltu	r12,r4,8111f8dc <__gethex+0x3d8>
8111f8b0:	29400044 	addi	r5,r5,1
8111f8b4:	29000003 	ldbu	r4,0(r5)
8111f8b8:	108002a4 	muli	r2,r2,10
8111f8bc:	a109883a 	add	r4,r20,r4
8111f8c0:	22c00003 	ldbu	r11,0(r4)
8111f8c4:	1345883a 	add	r2,r2,r13
8111f8c8:	10bffc04 	addi	r2,r2,-16
8111f8cc:	593fffc4 	addi	r4,r11,-1
8111f8d0:	21003fcc 	andi	r4,r4,255
8111f8d4:	5b403fcc 	andi	r13,r11,255
8111f8d8:	613ff52e 	bgeu	r12,r4,8111f8b0 <__reset+0xfb0ff8b0>
8111f8dc:	30000126 	beq	r6,zero,8111f8e4 <__gethex+0x3e0>
8111f8e0:	0085c83a 	sub	r2,zero,r2
8111f8e4:	8039883a 	mov	fp,r16
8111f8e8:	b8af883a 	add	r23,r23,r2
8111f8ec:	2821883a 	mov	r16,r5
8111f8f0:	003f5106 	br	8111f638 <__reset+0xfb0ff638>
8111f8f4:	80800217 	ldw	r2,8(r16)
8111f8f8:	e080f00e 	bge	fp,r2,8111fcbc <__gethex+0x7b8>
8111f8fc:	e007883a 	mov	r3,fp
8111f900:	18800144 	addi	r2,r3,5
8111f904:	1085883a 	add	r2,r2,r2
8111f908:	18c00044 	addi	r3,r3,1
8111f90c:	1085883a 	add	r2,r2,r2
8111f910:	8085883a 	add	r2,r16,r2
8111f914:	80c00415 	stw	r3,16(r16)
8111f918:	01000044 	movi	r4,1
8111f91c:	11000015 	stw	r4,0(r2)
8111f920:	00800084 	movi	r2,2
8111f924:	8880d826 	beq	r17,r2,8111fc88 <__gethex+0x784>
8111f928:	e0c0ac0e 	bge	fp,r3,8111fbdc <__gethex+0x6d8>
8111f92c:	01400044 	movi	r5,1
8111f930:	8009883a 	mov	r4,r16
8111f934:	111f4040 	call	8111f404 <rshift>
8111f938:	d8c00017 	ldw	r3,0(sp)
8111f93c:	bdc00044 	addi	r23,r23,1
8111f940:	18800217 	ldw	r2,8(r3)
8111f944:	15c0a70e 	bge	r2,r23,8111fbe4 <__gethex+0x6e0>
8111f948:	d9000117 	ldw	r4,4(sp)
8111f94c:	800b883a 	mov	r5,r16
8111f950:	11188c40 	call	811188c4 <_Bfree>
8111f954:	d9001517 	ldw	r4,84(sp)
8111f958:	008028c4 	movi	r2,163
8111f95c:	20000015 	stw	zero,0(r4)
8111f960:	003faa06 	br	8111f80c <__reset+0xfb0ff80c>
8111f964:	01800044 	movi	r6,1
8111f968:	80800083 	ldbu	r2,2(r16)
8111f96c:	81400084 	addi	r5,r16,2
8111f970:	003fbc06 	br	8111f864 <__reset+0xfb0ff864>
8111f974:	ada1883a 	add	r16,r21,r22
8111f978:	81000003 	ldbu	r4,0(r16)
8111f97c:	21403fcc 	andi	r5,r4,255
8111f980:	a145883a 	add	r2,r20,r5
8111f984:	10800003 	ldbu	r2,0(r2)
8111f988:	11803fcc 	andi	r6,r2,255
8111f98c:	30004f26 	beq	r6,zero,8111facc <__gethex+0x5c8>
8111f990:	00c00c04 	movi	r3,48
8111f994:	802b883a 	mov	r21,r16
8111f998:	28c0061e 	bne	r5,r3,8111f9b4 <__gethex+0x4b0>
8111f99c:	2809883a 	mov	r4,r5
8111f9a0:	ad400044 	addi	r21,r21,1
8111f9a4:	a8800003 	ldbu	r2,0(r21)
8111f9a8:	113ffd26 	beq	r2,r4,8111f9a0 <__reset+0xfb0ff9a0>
8111f9ac:	a085883a 	add	r2,r20,r2
8111f9b0:	10800003 	ldbu	r2,0(r2)
8111f9b4:	10803fcc 	andi	r2,r2,255
8111f9b8:	1015003a 	cmpeq	r10,r2,zero
8111f9bc:	802f883a 	mov	r23,r16
8111f9c0:	04400044 	movi	r17,1
8111f9c4:	003eff06 	br	8111f5c4 <__reset+0xfb0ff5c4>
8111f9c8:	04400044 	movi	r17,1
8111f9cc:	98000926 	beq	r19,zero,8111f9f4 <__gethex+0x4f0>
8111f9d0:	d8c00017 	ldw	r3,0(sp)
8111f9d4:	18800317 	ldw	r2,12(r3)
8111f9d8:	00c00084 	movi	r3,2
8111f9dc:	10c06826 	beq	r2,r3,8111fb80 <__gethex+0x67c>
8111f9e0:	00c000c4 	movi	r3,3
8111f9e4:	10c06a26 	beq	r2,r3,8111fb90 <__gethex+0x68c>
8111f9e8:	00c00044 	movi	r3,1
8111f9ec:	10c08d26 	beq	r2,r3,8111fc24 <__gethex+0x720>
8111f9f0:	8c400414 	ori	r17,r17,16
8111f9f4:	d9001517 	ldw	r4,84(sp)
8111f9f8:	d8c00417 	ldw	r3,16(sp)
8111f9fc:	8805883a 	mov	r2,r17
8111fa00:	24000015 	stw	r16,0(r4)
8111fa04:	1dc00015 	stw	r23,0(r3)
8111fa08:	003f8006 	br	8111f80c <__reset+0xfb0ff80c>
8111fa0c:	000d883a 	mov	r6,zero
8111fa10:	003fd506 	br	8111f968 <__reset+0xfb0ff968>
8111fa14:	0005883a 	mov	r2,zero
8111fa18:	003f7c06 	br	8111f80c <__reset+0xfb0ff80c>
8111fa1c:	14a3c83a 	sub	r17,r2,r18
8111fa20:	880b883a 	mov	r5,r17
8111fa24:	8009883a 	mov	r4,r16
8111fa28:	11197e40 	call	811197e4 <__any_on>
8111fa2c:	10002926 	beq	r2,zero,8111fad4 <__gethex+0x5d0>
8111fa30:	897fffc4 	addi	r5,r17,-1
8111fa34:	2807d17a 	srai	r3,r5,5
8111fa38:	d8800217 	ldw	r2,8(sp)
8111fa3c:	290007cc 	andi	r4,r5,31
8111fa40:	18c7883a 	add	r3,r3,r3
8111fa44:	18c7883a 	add	r3,r3,r3
8111fa48:	04c00044 	movi	r19,1
8111fa4c:	10c7883a 	add	r3,r2,r3
8111fa50:	9908983a 	sll	r4,r19,r4
8111fa54:	18c00017 	ldw	r3,0(r3)
8111fa58:	20c6703a 	and	r3,r4,r3
8111fa5c:	18000626 	beq	r3,zero,8111fa78 <__gethex+0x574>
8111fa60:	99407b0e 	bge	r19,r5,8111fc50 <__gethex+0x74c>
8111fa64:	897fff84 	addi	r5,r17,-2
8111fa68:	8009883a 	mov	r4,r16
8111fa6c:	11197e40 	call	811197e4 <__any_on>
8111fa70:	10007726 	beq	r2,zero,8111fc50 <__gethex+0x74c>
8111fa74:	04c000c4 	movi	r19,3
8111fa78:	880b883a 	mov	r5,r17
8111fa7c:	8009883a 	mov	r4,r16
8111fa80:	111f4040 	call	8111f404 <rshift>
8111fa84:	bc6f883a 	add	r23,r23,r17
8111fa88:	003f1f06 	br	8111f708 <__reset+0xfb0ff708>
8111fa8c:	002f883a 	mov	r23,zero
8111fa90:	003ee306 	br	8111f620 <__reset+0xfb0ff620>
8111fa94:	d9000117 	ldw	r4,4(sp)
8111fa98:	90a3c83a 	sub	r17,r18,r2
8111fa9c:	800b883a 	mov	r5,r16
8111faa0:	880d883a 	mov	r6,r17
8111faa4:	1118fc40 	call	81118fc4 <__lshift>
8111faa8:	10c00504 	addi	r3,r2,20
8111faac:	1021883a 	mov	r16,r2
8111fab0:	bc6fc83a 	sub	r23,r23,r17
8111fab4:	d8c00215 	stw	r3,8(sp)
8111fab8:	0027883a 	mov	r19,zero
8111fabc:	003f1206 	br	8111f708 <__reset+0xfb0ff708>
8111fac0:	1d400084 	addi	r21,r3,2
8111fac4:	0023883a 	mov	r17,zero
8111fac8:	003eb406 	br	8111f59c <__reset+0xfb0ff59c>
8111facc:	2005883a 	mov	r2,r4
8111fad0:	003f4606 	br	8111f7ec <__reset+0xfb0ff7ec>
8111fad4:	0027883a 	mov	r19,zero
8111fad8:	003fe706 	br	8111fa78 <__reset+0xfb0ffa78>
8111fadc:	bc7fffc4 	addi	r17,r23,-1
8111fae0:	9800421e 	bne	r19,zero,8111fbec <__gethex+0x6e8>
8111fae4:	88000426 	beq	r17,zero,8111faf8 <__gethex+0x5f4>
8111fae8:	880b883a 	mov	r5,r17
8111faec:	8009883a 	mov	r4,r16
8111faf0:	11197e40 	call	811197e4 <__any_on>
8111faf4:	1027883a 	mov	r19,r2
8111faf8:	8805d17a 	srai	r2,r17,5
8111fafc:	d8c00217 	ldw	r3,8(sp)
8111fb00:	8c4007cc 	andi	r17,r17,31
8111fb04:	1085883a 	add	r2,r2,r2
8111fb08:	1085883a 	add	r2,r2,r2
8111fb0c:	1885883a 	add	r2,r3,r2
8111fb10:	00c00044 	movi	r3,1
8111fb14:	1c62983a 	sll	r17,r3,r17
8111fb18:	10800017 	ldw	r2,0(r2)
8111fb1c:	8884703a 	and	r2,r17,r2
8111fb20:	10000126 	beq	r2,zero,8111fb28 <__gethex+0x624>
8111fb24:	9cc00094 	ori	r19,r19,2
8111fb28:	b80b883a 	mov	r5,r23
8111fb2c:	8009883a 	mov	r4,r16
8111fb30:	111f4040 	call	8111f404 <rshift>
8111fb34:	d8c00017 	ldw	r3,0(sp)
8111fb38:	95e5c83a 	sub	r18,r18,r23
8111fb3c:	04400084 	movi	r17,2
8111fb40:	1dc00117 	ldw	r23,4(r3)
8111fb44:	003fa106 	br	8111f9cc <__reset+0xfb0ff9cc>
8111fb48:	85af883a 	add	r23,r16,r22
8111fb4c:	b8800003 	ldbu	r2,0(r23)
8111fb50:	b821883a 	mov	r16,r23
8111fb54:	11003fcc 	andi	r4,r2,255
8111fb58:	a109883a 	add	r4,r20,r4
8111fb5c:	21000003 	ldbu	r4,0(r4)
8111fb60:	203eaa26 	beq	r4,zero,8111f60c <__reset+0xfb0ff60c>
8111fb64:	84000044 	addi	r16,r16,1
8111fb68:	80800003 	ldbu	r2,0(r16)
8111fb6c:	11003fcc 	andi	r4,r2,255
8111fb70:	a109883a 	add	r4,r20,r4
8111fb74:	21000003 	ldbu	r4,0(r4)
8111fb78:	203ffa1e 	bne	r4,zero,8111fb64 <__reset+0xfb0ffb64>
8111fb7c:	003ea306 	br	8111f60c <__reset+0xfb0ff60c>
8111fb80:	d9001617 	ldw	r4,88(sp)
8111fb84:	00800044 	movi	r2,1
8111fb88:	1109c83a 	sub	r4,r2,r4
8111fb8c:	d9001615 	stw	r4,88(sp)
8111fb90:	d8801617 	ldw	r2,88(sp)
8111fb94:	103f9626 	beq	r2,zero,8111f9f0 <__reset+0xfb0ff9f0>
8111fb98:	87000417 	ldw	fp,16(r16)
8111fb9c:	d9800217 	ldw	r6,8(sp)
8111fba0:	013fffc4 	movi	r4,-1
8111fba4:	e727883a 	add	r19,fp,fp
8111fba8:	9ce7883a 	add	r19,r19,r19
8111fbac:	3005883a 	mov	r2,r6
8111fbb0:	34cb883a 	add	r5,r6,r19
8111fbb4:	00000306 	br	8111fbc4 <__gethex+0x6c0>
8111fbb8:	10000015 	stw	zero,0(r2)
8111fbbc:	10800104 	addi	r2,r2,4
8111fbc0:	117f4c2e 	bgeu	r2,r5,8111f8f4 <__reset+0xfb0ff8f4>
8111fbc4:	10c00017 	ldw	r3,0(r2)
8111fbc8:	193ffb26 	beq	r3,r4,8111fbb8 <__reset+0xfb0ffbb8>
8111fbcc:	18c00044 	addi	r3,r3,1
8111fbd0:	10c00015 	stw	r3,0(r2)
8111fbd4:	00800084 	movi	r2,2
8111fbd8:	88802b26 	beq	r17,r2,8111fc88 <__gethex+0x784>
8111fbdc:	948007cc 	andi	r18,r18,31
8111fbe0:	90002f1e 	bne	r18,zero,8111fca0 <__gethex+0x79c>
8111fbe4:	04400844 	movi	r17,33
8111fbe8:	003f8206 	br	8111f9f4 <__reset+0xfb0ff9f4>
8111fbec:	04c00044 	movi	r19,1
8111fbf0:	003fc106 	br	8111faf8 <__reset+0xfb0ffaf8>
8111fbf4:	d8c01617 	ldw	r3,88(sp)
8111fbf8:	183ed226 	beq	r3,zero,8111f744 <__reset+0xfb0ff744>
8111fbfc:	d8c00417 	ldw	r3,16(sp)
8111fc00:	d9001517 	ldw	r4,84(sp)
8111fc04:	18800015 	stw	r2,0(r3)
8111fc08:	d8c00217 	ldw	r3,8(sp)
8111fc0c:	00800044 	movi	r2,1
8111fc10:	80800415 	stw	r2,16(r16)
8111fc14:	18800015 	stw	r2,0(r3)
8111fc18:	24000015 	stw	r16,0(r4)
8111fc1c:	00801884 	movi	r2,98
8111fc20:	003efa06 	br	8111f80c <__reset+0xfb0ff80c>
8111fc24:	9880008c 	andi	r2,r19,2
8111fc28:	103f7126 	beq	r2,zero,8111f9f0 <__reset+0xfb0ff9f0>
8111fc2c:	d8c00217 	ldw	r3,8(sp)
8111fc30:	18800017 	ldw	r2,0(r3)
8111fc34:	9884b03a 	or	r2,r19,r2
8111fc38:	1080004c 	andi	r2,r2,1
8111fc3c:	103fd61e 	bne	r2,zero,8111fb98 <__reset+0xfb0ffb98>
8111fc40:	003f6b06 	br	8111f9f0 <__reset+0xfb0ff9f0>
8111fc44:	da800217 	ldw	r10,8(sp)
8111fc48:	0013883a 	mov	r9,zero
8111fc4c:	003e9f06 	br	8111f6cc <__reset+0xfb0ff6cc>
8111fc50:	04c00084 	movi	r19,2
8111fc54:	003f8806 	br	8111fa78 <__reset+0xfb0ffa78>
8111fc58:	d9001617 	ldw	r4,88(sp)
8111fc5c:	203fe726 	beq	r4,zero,8111fbfc <__reset+0xfb0ffbfc>
8111fc60:	003eb806 	br	8111f744 <__reset+0xfb0ff744>
8111fc64:	95feb71e 	bne	r18,r23,8111f744 <__reset+0xfb0ff744>
8111fc68:	1cbfe40e 	bge	r3,r18,8111fbfc <__reset+0xfb0ffbfc>
8111fc6c:	917fffc4 	addi	r5,r18,-1
8111fc70:	8009883a 	mov	r4,r16
8111fc74:	11197e40 	call	811197e4 <__any_on>
8111fc78:	103eb226 	beq	r2,zero,8111f744 <__reset+0xfb0ff744>
8111fc7c:	d8c00017 	ldw	r3,0(sp)
8111fc80:	18800117 	ldw	r2,4(r3)
8111fc84:	003fdd06 	br	8111fbfc <__reset+0xfb0ffbfc>
8111fc88:	d8c00017 	ldw	r3,0(sp)
8111fc8c:	18800017 	ldw	r2,0(r3)
8111fc90:	10bfffc4 	addi	r2,r2,-1
8111fc94:	90801c26 	beq	r18,r2,8111fd08 <__gethex+0x804>
8111fc98:	04400884 	movi	r17,34
8111fc9c:	003f5506 	br	8111f9f4 <__reset+0xfb0ff9f4>
8111fca0:	34c5883a 	add	r2,r6,r19
8111fca4:	113fff17 	ldw	r4,-4(r2)
8111fca8:	1118b200 	call	81118b20 <__hi0bits>
8111fcac:	00c00804 	movi	r3,32
8111fcb0:	1ca5c83a 	sub	r18,r3,r18
8111fcb4:	14bfcb0e 	bge	r2,r18,8111fbe4 <__reset+0xfb0ffbe4>
8111fcb8:	003f1c06 	br	8111f92c <__reset+0xfb0ff92c>
8111fcbc:	81400117 	ldw	r5,4(r16)
8111fcc0:	d9000117 	ldw	r4,4(sp)
8111fcc4:	29400044 	addi	r5,r5,1
8111fcc8:	11188140 	call	81118814 <_Balloc>
8111fccc:	81800417 	ldw	r6,16(r16)
8111fcd0:	81400304 	addi	r5,r16,12
8111fcd4:	11000304 	addi	r4,r2,12
8111fcd8:	31800084 	addi	r6,r6,2
8111fcdc:	318d883a 	add	r6,r6,r6
8111fce0:	318d883a 	add	r6,r6,r6
8111fce4:	1029883a 	mov	r20,r2
8111fce8:	110e8e00 	call	8110e8e0 <memcpy>
8111fcec:	d9000117 	ldw	r4,4(sp)
8111fcf0:	800b883a 	mov	r5,r16
8111fcf4:	a021883a 	mov	r16,r20
8111fcf8:	11188c40 	call	811188c4 <_Bfree>
8111fcfc:	a0c00417 	ldw	r3,16(r20)
8111fd00:	a1800504 	addi	r6,r20,20
8111fd04:	003efe06 	br	8111f900 <__reset+0xfb0ff900>
8111fd08:	9005d17a 	srai	r2,r18,5
8111fd0c:	944007cc 	andi	r17,r18,31
8111fd10:	1085883a 	add	r2,r2,r2
8111fd14:	1085883a 	add	r2,r2,r2
8111fd18:	3087883a 	add	r3,r6,r2
8111fd1c:	00800044 	movi	r2,1
8111fd20:	1462983a 	sll	r17,r2,r17
8111fd24:	18800017 	ldw	r2,0(r3)
8111fd28:	8884703a 	and	r2,r17,r2
8111fd2c:	1022c03a 	cmpne	r17,r2,zero
8111fd30:	00800884 	movi	r2,34
8111fd34:	1463c83a 	sub	r17,r2,r17
8111fd38:	003f2e06 	br	8111f9f4 <__reset+0xfb0ff9f4>

8111fd3c <__hexnan>:
8111fd3c:	defff904 	addi	sp,sp,-28
8111fd40:	de00012e 	bgeu	sp,et,8111fd48 <__hexnan+0xc>
8111fd44:	003b68fa 	trap	3
8111fd48:	dc800215 	stw	r18,8(sp)
8111fd4c:	2c800017 	ldw	r18,0(r5)
8111fd50:	dfc00615 	stw	ra,24(sp)
8111fd54:	dd400515 	stw	r21,20(sp)
8111fd58:	901fd17a 	srai	r15,r18,5
8111fd5c:	dd000415 	stw	r20,16(sp)
8111fd60:	dcc00315 	stw	r19,12(sp)
8111fd64:	7bdf883a 	add	r15,r15,r15
8111fd68:	7bdf883a 	add	r15,r15,r15
8111fd6c:	dc400115 	stw	r17,4(sp)
8111fd70:	dc000015 	stw	r16,0(sp)
8111fd74:	948007cc 	andi	r18,r18,31
8111fd78:	33df883a 	add	r15,r6,r15
8111fd7c:	90000126 	beq	r18,zero,8111fd84 <__hexnan+0x48>
8111fd80:	7bc00104 	addi	r15,r15,4
8111fd84:	22000017 	ldw	r8,0(r4)
8111fd88:	7affff04 	addi	r11,r15,-4
8111fd8c:	03a04534 	movhi	r14,33044
8111fd90:	783fff15 	stw	zero,-4(r15)
8111fd94:	581b883a 	mov	r13,r11
8111fd98:	580b883a 	mov	r5,r11
8111fd9c:	000f883a 	mov	r7,zero
8111fda0:	003f883a 	mov	ra,zero
8111fda4:	0019883a 	mov	r12,zero
8111fda8:	73ab7604 	addi	r14,r14,-21032
8111fdac:	04400204 	movi	r17,8
8111fdb0:	04000804 	movi	r16,32
8111fdb4:	04c001c4 	movi	r19,7
8111fdb8:	42000044 	addi	r8,r8,1
8111fdbc:	40c00003 	ldbu	r3,0(r8)
8111fdc0:	18001d26 	beq	r3,zero,8111fe38 <__hexnan+0xfc>
8111fdc4:	70c5883a 	add	r2,r14,r3
8111fdc8:	10800003 	ldbu	r2,0(r2)
8111fdcc:	12403fcc 	andi	r9,r2,255
8111fdd0:	4800301e 	bne	r9,zero,8111fe94 <__hexnan+0x158>
8111fdd4:	80c04236 	bltu	r16,r3,8111fee0 <__hexnan+0x1a4>
8111fdd8:	fb3ff70e 	bge	ra,r12,8111fdb8 <__reset+0xfb0ffdb8>
8111fddc:	2b40112e 	bgeu	r5,r13,8111fe24 <__hexnan+0xe8>
8111fde0:	99c01016 	blt	r19,r7,8111fe24 <__hexnan+0xe8>
8111fde4:	89e9c83a 	sub	r20,r17,r7
8111fde8:	a529883a 	add	r20,r20,r20
8111fdec:	2a800017 	ldw	r10,0(r5)
8111fdf0:	a529883a 	add	r20,r20,r20
8111fdf4:	852bc83a 	sub	r21,r16,r20
8111fdf8:	28c00104 	addi	r3,r5,4
8111fdfc:	2805883a 	mov	r2,r5
8111fe00:	19c00017 	ldw	r7,0(r3)
8111fe04:	10800104 	addi	r2,r2,4
8111fe08:	18c00104 	addi	r3,r3,4
8111fe0c:	3d52983a 	sll	r9,r7,r21
8111fe10:	4a92b03a 	or	r9,r9,r10
8111fe14:	3d14d83a 	srl	r10,r7,r20
8111fe18:	127fff15 	stw	r9,-4(r2)
8111fe1c:	1abfff15 	stw	r10,-4(r3)
8111fe20:	137ff736 	bltu	r2,r13,8111fe00 <__reset+0xfb0ffe00>
8111fe24:	31402836 	bltu	r6,r5,8111fec8 <__hexnan+0x18c>
8111fe28:	42000044 	addi	r8,r8,1
8111fe2c:	40c00003 	ldbu	r3,0(r8)
8111fe30:	01c00204 	movi	r7,8
8111fe34:	183fe31e 	bne	r3,zero,8111fdc4 <__reset+0xfb0ffdc4>
8111fe38:	60002b26 	beq	r12,zero,8111fee8 <__hexnan+0x1ac>
8111fe3c:	2b40022e 	bgeu	r5,r13,8111fe48 <__hexnan+0x10c>
8111fe40:	008001c4 	movi	r2,7
8111fe44:	11c0430e 	bge	r2,r7,8111ff54 <__hexnan+0x218>
8111fe48:	3140312e 	bgeu	r6,r5,8111ff10 <__hexnan+0x1d4>
8111fe4c:	3007883a 	mov	r3,r6
8111fe50:	29000017 	ldw	r4,0(r5)
8111fe54:	18800104 	addi	r2,r3,4
8111fe58:	29400104 	addi	r5,r5,4
8111fe5c:	19000015 	stw	r4,0(r3)
8111fe60:	1007883a 	mov	r3,r2
8111fe64:	597ffa2e 	bgeu	r11,r5,8111fe50 <__reset+0xfb0ffe50>
8111fe68:	10000015 	stw	zero,0(r2)
8111fe6c:	10800104 	addi	r2,r2,4
8111fe70:	58bffd2e 	bgeu	r11,r2,8111fe68 <__reset+0xfb0ffe68>
8111fe74:	78bfff17 	ldw	r2,-4(r15)
8111fe78:	1000041e 	bne	r2,zero,8111fe8c <__hexnan+0x150>
8111fe7c:	32c02d26 	beq	r6,r11,8111ff34 <__hexnan+0x1f8>
8111fe80:	5affff04 	addi	r11,r11,-4
8111fe84:	58800017 	ldw	r2,0(r11)
8111fe88:	103ffc26 	beq	r2,zero,8111fe7c <__reset+0xfb0ffe7c>
8111fe8c:	00800144 	movi	r2,5
8111fe90:	00001606 	br	8111feec <__hexnan+0x1b0>
8111fe94:	39c00044 	addi	r7,r7,1
8111fe98:	63000044 	addi	r12,r12,1
8111fe9c:	89c0040e 	bge	r17,r7,8111feb0 <__hexnan+0x174>
8111fea0:	317fc52e 	bgeu	r6,r5,8111fdb8 <__reset+0xfb0ffdb8>
8111fea4:	283fff15 	stw	zero,-4(r5)
8111fea8:	01c00044 	movi	r7,1
8111feac:	297fff04 	addi	r5,r5,-4
8111feb0:	28c00017 	ldw	r3,0(r5)
8111feb4:	108003cc 	andi	r2,r2,15
8111feb8:	1806913a 	slli	r3,r3,4
8111febc:	1884b03a 	or	r2,r3,r2
8111fec0:	28800015 	stw	r2,0(r5)
8111fec4:	003fbc06 	br	8111fdb8 <__reset+0xfb0ffdb8>
8111fec8:	2b7fff04 	addi	r13,r5,-4
8111fecc:	283fff15 	stw	zero,-4(r5)
8111fed0:	603f883a 	mov	ra,r12
8111fed4:	680b883a 	mov	r5,r13
8111fed8:	000f883a 	mov	r7,zero
8111fedc:	003fb606 	br	8111fdb8 <__reset+0xfb0ffdb8>
8111fee0:	00800a44 	movi	r2,41
8111fee4:	18801726 	beq	r3,r2,8111ff44 <__hexnan+0x208>
8111fee8:	00800104 	movi	r2,4
8111feec:	dfc00617 	ldw	ra,24(sp)
8111fef0:	dd400517 	ldw	r21,20(sp)
8111fef4:	dd000417 	ldw	r20,16(sp)
8111fef8:	dcc00317 	ldw	r19,12(sp)
8111fefc:	dc800217 	ldw	r18,8(sp)
8111ff00:	dc400117 	ldw	r17,4(sp)
8111ff04:	dc000017 	ldw	r16,0(sp)
8111ff08:	dec00704 	addi	sp,sp,28
8111ff0c:	f800283a 	ret
8111ff10:	903fd826 	beq	r18,zero,8111fe74 <__reset+0xfb0ffe74>
8111ff14:	00c00804 	movi	r3,32
8111ff18:	1ca5c83a 	sub	r18,r3,r18
8111ff1c:	00ffffc4 	movi	r3,-1
8111ff20:	78bfff17 	ldw	r2,-4(r15)
8111ff24:	1c86d83a 	srl	r3,r3,r18
8111ff28:	1884703a 	and	r2,r3,r2
8111ff2c:	78bfff15 	stw	r2,-4(r15)
8111ff30:	003fd106 	br	8111fe78 <__reset+0xfb0ffe78>
8111ff34:	00800044 	movi	r2,1
8111ff38:	58800015 	stw	r2,0(r11)
8111ff3c:	00800144 	movi	r2,5
8111ff40:	003fea06 	br	8111feec <__reset+0xfb0ffeec>
8111ff44:	42000044 	addi	r8,r8,1
8111ff48:	22000015 	stw	r8,0(r4)
8111ff4c:	603fbb1e 	bne	r12,zero,8111fe3c <__reset+0xfb0ffe3c>
8111ff50:	003fe506 	br	8111fee8 <__reset+0xfb0ffee8>
8111ff54:	02400204 	movi	r9,8
8111ff58:	49d3c83a 	sub	r9,r9,r7
8111ff5c:	4a53883a 	add	r9,r9,r9
8111ff60:	2a000017 	ldw	r8,0(r5)
8111ff64:	4a53883a 	add	r9,r9,r9
8111ff68:	02800804 	movi	r10,32
8111ff6c:	5255c83a 	sub	r10,r10,r9
8111ff70:	28c00104 	addi	r3,r5,4
8111ff74:	2805883a 	mov	r2,r5
8111ff78:	19c00017 	ldw	r7,0(r3)
8111ff7c:	10800104 	addi	r2,r2,4
8111ff80:	18c00104 	addi	r3,r3,4
8111ff84:	3a88983a 	sll	r4,r7,r10
8111ff88:	2208b03a 	or	r4,r4,r8
8111ff8c:	3a50d83a 	srl	r8,r7,r9
8111ff90:	113fff15 	stw	r4,-4(r2)
8111ff94:	1a3fff15 	stw	r8,-4(r3)
8111ff98:	137ff736 	bltu	r2,r13,8111ff78 <__reset+0xfb0fff78>
8111ff9c:	003faa06 	br	8111fe48 <__reset+0xfb0ffe48>

8111ffa0 <strncmp>:
8111ffa0:	30003126 	beq	r6,zero,81120068 <strncmp+0xc8>
8111ffa4:	2144b03a 	or	r2,r4,r5
8111ffa8:	108000cc 	andi	r2,r2,3
8111ffac:	10001e1e 	bne	r2,zero,81120028 <strncmp+0x88>
8111ffb0:	024000c4 	movi	r9,3
8111ffb4:	49801c2e 	bgeu	r9,r6,81120028 <strncmp+0x88>
8111ffb8:	20800017 	ldw	r2,0(r4)
8111ffbc:	28c00017 	ldw	r3,0(r5)
8111ffc0:	10c0191e 	bne	r2,r3,81120028 <strncmp+0x88>
8111ffc4:	31bfff04 	addi	r6,r6,-4
8111ffc8:	30002726 	beq	r6,zero,81120068 <strncmp+0xc8>
8111ffcc:	02ffbff4 	movhi	r11,65279
8111ffd0:	5affbfc4 	addi	r11,r11,-257
8111ffd4:	0086303a 	nor	r3,zero,r2
8111ffd8:	02a02074 	movhi	r10,32897
8111ffdc:	12c5883a 	add	r2,r2,r11
8111ffe0:	52a02004 	addi	r10,r10,-32640
8111ffe4:	10c4703a 	and	r2,r2,r3
8111ffe8:	1284703a 	and	r2,r2,r10
8111ffec:	10000b26 	beq	r2,zero,8112001c <strncmp+0x7c>
8111fff0:	00001d06 	br	81120068 <strncmp+0xc8>
8111fff4:	20c00017 	ldw	r3,0(r4)
8111fff8:	29c00017 	ldw	r7,0(r5)
8111fffc:	1ad1883a 	add	r8,r3,r11
81120000:	00c4303a 	nor	r2,zero,r3
81120004:	4084703a 	and	r2,r8,r2
81120008:	1284703a 	and	r2,r2,r10
8112000c:	19c0061e 	bne	r3,r7,81120028 <strncmp+0x88>
81120010:	31bfff04 	addi	r6,r6,-4
81120014:	30001426 	beq	r6,zero,81120068 <strncmp+0xc8>
81120018:	1000131e 	bne	r2,zero,81120068 <strncmp+0xc8>
8112001c:	21000104 	addi	r4,r4,4
81120020:	29400104 	addi	r5,r5,4
81120024:	49bff336 	bltu	r9,r6,8111fff4 <__reset+0xfb0ffff4>
81120028:	28800007 	ldb	r2,0(r5)
8112002c:	20c00007 	ldb	r3,0(r4)
81120030:	31bfffc4 	addi	r6,r6,-1
81120034:	10c0081e 	bne	r2,r3,81120058 <strncmp+0xb8>
81120038:	30000b26 	beq	r6,zero,81120068 <strncmp+0xc8>
8112003c:	10000a26 	beq	r2,zero,81120068 <strncmp+0xc8>
81120040:	21000044 	addi	r4,r4,1
81120044:	29400044 	addi	r5,r5,1
81120048:	20800007 	ldb	r2,0(r4)
8112004c:	28c00007 	ldb	r3,0(r5)
81120050:	31bfffc4 	addi	r6,r6,-1
81120054:	10fff826 	beq	r2,r3,81120038 <__reset+0xfb100038>
81120058:	20800003 	ldbu	r2,0(r4)
8112005c:	28c00003 	ldbu	r3,0(r5)
81120060:	10c5c83a 	sub	r2,r2,r3
81120064:	f800283a 	ret
81120068:	0005883a 	mov	r2,zero
8112006c:	f800283a 	ret

81120070 <_wcrtomb_r>:
81120070:	defff604 	addi	sp,sp,-40
81120074:	00a04534 	movhi	r2,33044
81120078:	de00012e 	bgeu	sp,et,81120080 <_wcrtomb_r+0x10>
8112007c:	003b68fa 	trap	3
81120080:	10b3e904 	addi	r2,r2,-12380
81120084:	dc800815 	stw	r18,32(sp)
81120088:	dc400715 	stw	r17,28(sp)
8112008c:	dc000615 	stw	r16,24(sp)
81120090:	dfc00915 	stw	ra,36(sp)
81120094:	2021883a 	mov	r16,r4
81120098:	3823883a 	mov	r17,r7
8112009c:	14800017 	ldw	r18,0(r2)
811200a0:	28001426 	beq	r5,zero,811200f4 <_wcrtomb_r+0x84>
811200a4:	d9400415 	stw	r5,16(sp)
811200a8:	d9800515 	stw	r6,20(sp)
811200ac:	11182c80 	call	811182c8 <__locale_charset>
811200b0:	d9800517 	ldw	r6,20(sp)
811200b4:	d9400417 	ldw	r5,16(sp)
811200b8:	100f883a 	mov	r7,r2
811200bc:	dc400015 	stw	r17,0(sp)
811200c0:	8009883a 	mov	r4,r16
811200c4:	903ee83a 	callr	r18
811200c8:	00ffffc4 	movi	r3,-1
811200cc:	10c0031e 	bne	r2,r3,811200dc <_wcrtomb_r+0x6c>
811200d0:	88000015 	stw	zero,0(r17)
811200d4:	00c02284 	movi	r3,138
811200d8:	80c00015 	stw	r3,0(r16)
811200dc:	dfc00917 	ldw	ra,36(sp)
811200e0:	dc800817 	ldw	r18,32(sp)
811200e4:	dc400717 	ldw	r17,28(sp)
811200e8:	dc000617 	ldw	r16,24(sp)
811200ec:	dec00a04 	addi	sp,sp,40
811200f0:	f800283a 	ret
811200f4:	11182c80 	call	811182c8 <__locale_charset>
811200f8:	100f883a 	mov	r7,r2
811200fc:	dc400015 	stw	r17,0(sp)
81120100:	000d883a 	mov	r6,zero
81120104:	d9400104 	addi	r5,sp,4
81120108:	8009883a 	mov	r4,r16
8112010c:	903ee83a 	callr	r18
81120110:	003fed06 	br	811200c8 <__reset+0xfb1000c8>

81120114 <wcrtomb>:
81120114:	defff604 	addi	sp,sp,-40
81120118:	00a04534 	movhi	r2,33044
8112011c:	de00012e 	bgeu	sp,et,81120124 <wcrtomb+0x10>
81120120:	003b68fa 	trap	3
81120124:	10b3e404 	addi	r2,r2,-12400
81120128:	dc800615 	stw	r18,24(sp)
8112012c:	dc400515 	stw	r17,20(sp)
81120130:	dfc00915 	stw	ra,36(sp)
81120134:	dd000815 	stw	r20,32(sp)
81120138:	dcc00715 	stw	r19,28(sp)
8112013c:	dc000415 	stw	r16,16(sp)
81120140:	3025883a 	mov	r18,r6
81120144:	14400017 	ldw	r17,0(r2)
81120148:	20001926 	beq	r4,zero,811201b0 <wcrtomb+0x9c>
8112014c:	00a04534 	movhi	r2,33044
81120150:	10b3e904 	addi	r2,r2,-12380
81120154:	15000017 	ldw	r20,0(r2)
81120158:	2021883a 	mov	r16,r4
8112015c:	2827883a 	mov	r19,r5
81120160:	11182c80 	call	811182c8 <__locale_charset>
81120164:	100f883a 	mov	r7,r2
81120168:	dc800015 	stw	r18,0(sp)
8112016c:	980d883a 	mov	r6,r19
81120170:	800b883a 	mov	r5,r16
81120174:	8809883a 	mov	r4,r17
81120178:	a03ee83a 	callr	r20
8112017c:	00ffffc4 	movi	r3,-1
81120180:	10c0031e 	bne	r2,r3,81120190 <wcrtomb+0x7c>
81120184:	90000015 	stw	zero,0(r18)
81120188:	00c02284 	movi	r3,138
8112018c:	88c00015 	stw	r3,0(r17)
81120190:	dfc00917 	ldw	ra,36(sp)
81120194:	dd000817 	ldw	r20,32(sp)
81120198:	dcc00717 	ldw	r19,28(sp)
8112019c:	dc800617 	ldw	r18,24(sp)
811201a0:	dc400517 	ldw	r17,20(sp)
811201a4:	dc000417 	ldw	r16,16(sp)
811201a8:	dec00a04 	addi	sp,sp,40
811201ac:	f800283a 	ret
811201b0:	00a04534 	movhi	r2,33044
811201b4:	10b3e904 	addi	r2,r2,-12380
811201b8:	14000017 	ldw	r16,0(r2)
811201bc:	11182c80 	call	811182c8 <__locale_charset>
811201c0:	100f883a 	mov	r7,r2
811201c4:	dc800015 	stw	r18,0(sp)
811201c8:	000d883a 	mov	r6,zero
811201cc:	d9400104 	addi	r5,sp,4
811201d0:	8809883a 	mov	r4,r17
811201d4:	803ee83a 	callr	r16
811201d8:	003fe806 	br	8112017c <__reset+0xfb10017c>

811201dc <__ascii_wctomb>:
811201dc:	28000526 	beq	r5,zero,811201f4 <__ascii_wctomb+0x18>
811201e0:	00803fc4 	movi	r2,255
811201e4:	11800536 	bltu	r2,r6,811201fc <__ascii_wctomb+0x20>
811201e8:	29800005 	stb	r6,0(r5)
811201ec:	00800044 	movi	r2,1
811201f0:	f800283a 	ret
811201f4:	0005883a 	mov	r2,zero
811201f8:	f800283a 	ret
811201fc:	00802284 	movi	r2,138
81120200:	20800015 	stw	r2,0(r4)
81120204:	00bfffc4 	movi	r2,-1
81120208:	f800283a 	ret

8112020c <_wctomb_r>:
8112020c:	00a04534 	movhi	r2,33044
81120210:	defff904 	addi	sp,sp,-28
81120214:	10b3e904 	addi	r2,r2,-12380
81120218:	de00012e 	bgeu	sp,et,81120220 <_wctomb_r+0x14>
8112021c:	003b68fa 	trap	3
81120220:	dfc00615 	stw	ra,24(sp)
81120224:	dc400515 	stw	r17,20(sp)
81120228:	dc000415 	stw	r16,16(sp)
8112022c:	3823883a 	mov	r17,r7
81120230:	14000017 	ldw	r16,0(r2)
81120234:	d9000115 	stw	r4,4(sp)
81120238:	d9400215 	stw	r5,8(sp)
8112023c:	d9800315 	stw	r6,12(sp)
81120240:	11182c80 	call	811182c8 <__locale_charset>
81120244:	d9800317 	ldw	r6,12(sp)
81120248:	d9400217 	ldw	r5,8(sp)
8112024c:	d9000117 	ldw	r4,4(sp)
81120250:	100f883a 	mov	r7,r2
81120254:	dc400015 	stw	r17,0(sp)
81120258:	803ee83a 	callr	r16
8112025c:	dfc00617 	ldw	ra,24(sp)
81120260:	dc400517 	ldw	r17,20(sp)
81120264:	dc000417 	ldw	r16,16(sp)
81120268:	dec00704 	addi	sp,sp,28
8112026c:	f800283a 	ret

81120270 <__fixunsdfsi>:
81120270:	defffd04 	addi	sp,sp,-12
81120274:	000d883a 	mov	r6,zero
81120278:	01d07834 	movhi	r7,16864
8112027c:	de00012e 	bgeu	sp,et,81120284 <__fixunsdfsi+0x14>
81120280:	003b68fa 	trap	3
81120284:	dc400115 	stw	r17,4(sp)
81120288:	dc000015 	stw	r16,0(sp)
8112028c:	dfc00215 	stw	ra,8(sp)
81120290:	2023883a 	mov	r17,r4
81120294:	2821883a 	mov	r16,r5
81120298:	11223880 	call	81122388 <__gedf2>
8112029c:	1000080e 	bge	r2,zero,811202c0 <__fixunsdfsi+0x50>
811202a0:	8809883a 	mov	r4,r17
811202a4:	800b883a 	mov	r5,r16
811202a8:	1122e5c0 	call	81122e5c <__fixdfsi>
811202ac:	dfc00217 	ldw	ra,8(sp)
811202b0:	dc400117 	ldw	r17,4(sp)
811202b4:	dc000017 	ldw	r16,0(sp)
811202b8:	dec00304 	addi	sp,sp,12
811202bc:	f800283a 	ret
811202c0:	000d883a 	mov	r6,zero
811202c4:	01d07834 	movhi	r7,16864
811202c8:	8809883a 	mov	r4,r17
811202cc:	800b883a 	mov	r5,r16
811202d0:	11225580 	call	81122558 <__subdf3>
811202d4:	180b883a 	mov	r5,r3
811202d8:	1009883a 	mov	r4,r2
811202dc:	1122e5c0 	call	81122e5c <__fixdfsi>
811202e0:	00e00034 	movhi	r3,32768
811202e4:	10c5883a 	add	r2,r2,r3
811202e8:	003ff006 	br	811202ac <__reset+0xfb1002ac>

811202ec <__udivdi3>:
811202ec:	defff504 	addi	sp,sp,-44
811202f0:	de00012e 	bgeu	sp,et,811202f8 <__udivdi3+0xc>
811202f4:	003b68fa 	trap	3
811202f8:	dcc00415 	stw	r19,16(sp)
811202fc:	dc000115 	stw	r16,4(sp)
81120300:	dfc00a15 	stw	ra,40(sp)
81120304:	df000915 	stw	fp,36(sp)
81120308:	ddc00815 	stw	r23,32(sp)
8112030c:	dd800715 	stw	r22,28(sp)
81120310:	dd400615 	stw	r21,24(sp)
81120314:	dd000515 	stw	r20,20(sp)
81120318:	dc800315 	stw	r18,12(sp)
8112031c:	dc400215 	stw	r17,8(sp)
81120320:	2027883a 	mov	r19,r4
81120324:	2821883a 	mov	r16,r5
81120328:	3800411e 	bne	r7,zero,81120430 <__udivdi3+0x144>
8112032c:	3023883a 	mov	r17,r6
81120330:	2025883a 	mov	r18,r4
81120334:	2980522e 	bgeu	r5,r6,81120480 <__udivdi3+0x194>
81120338:	00bfffd4 	movui	r2,65535
8112033c:	282d883a 	mov	r22,r5
81120340:	1180a836 	bltu	r2,r6,811205e4 <__udivdi3+0x2f8>
81120344:	00803fc4 	movi	r2,255
81120348:	1185803a 	cmpltu	r2,r2,r6
8112034c:	100490fa 	slli	r2,r2,3
81120350:	3086d83a 	srl	r3,r6,r2
81120354:	01204534 	movhi	r4,33044
81120358:	2129f004 	addi	r4,r4,-22592
8112035c:	20c7883a 	add	r3,r4,r3
81120360:	18c00003 	ldbu	r3,0(r3)
81120364:	1885883a 	add	r2,r3,r2
81120368:	00c00804 	movi	r3,32
8112036c:	1887c83a 	sub	r3,r3,r2
81120370:	18000526 	beq	r3,zero,81120388 <__udivdi3+0x9c>
81120374:	80e0983a 	sll	r16,r16,r3
81120378:	9884d83a 	srl	r2,r19,r2
8112037c:	30e2983a 	sll	r17,r6,r3
81120380:	98e4983a 	sll	r18,r19,r3
81120384:	142cb03a 	or	r22,r2,r16
81120388:	882ad43a 	srli	r21,r17,16
8112038c:	b009883a 	mov	r4,r22
81120390:	8d3fffcc 	andi	r20,r17,65535
81120394:	a80b883a 	mov	r5,r21
81120398:	1120f080 	call	81120f08 <__umodsi3>
8112039c:	b009883a 	mov	r4,r22
811203a0:	a80b883a 	mov	r5,r21
811203a4:	1027883a 	mov	r19,r2
811203a8:	1120ea40 	call	81120ea4 <__udivsi3>
811203ac:	102d883a 	mov	r22,r2
811203b0:	9826943a 	slli	r19,r19,16
811203b4:	9004d43a 	srli	r2,r18,16
811203b8:	a5a1383a 	mul	r16,r20,r22
811203bc:	14c4b03a 	or	r2,r2,r19
811203c0:	1400052e 	bgeu	r2,r16,811203d8 <__udivdi3+0xec>
811203c4:	1445883a 	add	r2,r2,r17
811203c8:	b0ffffc4 	addi	r3,r22,-1
811203cc:	14400136 	bltu	r2,r17,811203d4 <__udivdi3+0xe8>
811203d0:	14012336 	bltu	r2,r16,81120860 <__udivdi3+0x574>
811203d4:	182d883a 	mov	r22,r3
811203d8:	1421c83a 	sub	r16,r2,r16
811203dc:	a80b883a 	mov	r5,r21
811203e0:	8009883a 	mov	r4,r16
811203e4:	1120f080 	call	81120f08 <__umodsi3>
811203e8:	1027883a 	mov	r19,r2
811203ec:	a80b883a 	mov	r5,r21
811203f0:	8009883a 	mov	r4,r16
811203f4:	1120ea40 	call	81120ea4 <__udivsi3>
811203f8:	9826943a 	slli	r19,r19,16
811203fc:	a0a9383a 	mul	r20,r20,r2
81120400:	94bfffcc 	andi	r18,r18,65535
81120404:	94e4b03a 	or	r18,r18,r19
81120408:	9500052e 	bgeu	r18,r20,81120420 <__udivdi3+0x134>
8112040c:	8ca5883a 	add	r18,r17,r18
81120410:	10ffffc4 	addi	r3,r2,-1
81120414:	9440f136 	bltu	r18,r17,811207dc <__udivdi3+0x4f0>
81120418:	9500f02e 	bgeu	r18,r20,811207dc <__udivdi3+0x4f0>
8112041c:	10bfff84 	addi	r2,r2,-2
81120420:	b00c943a 	slli	r6,r22,16
81120424:	0007883a 	mov	r3,zero
81120428:	3084b03a 	or	r2,r6,r2
8112042c:	00005906 	br	81120594 <__udivdi3+0x2a8>
81120430:	29c05636 	bltu	r5,r7,8112058c <__udivdi3+0x2a0>
81120434:	00bfffd4 	movui	r2,65535
81120438:	11c0622e 	bgeu	r2,r7,811205c4 <__udivdi3+0x2d8>
8112043c:	00804034 	movhi	r2,256
81120440:	10bfffc4 	addi	r2,r2,-1
81120444:	11c0ee36 	bltu	r2,r7,81120800 <__udivdi3+0x514>
81120448:	00800404 	movi	r2,16
8112044c:	3886d83a 	srl	r3,r7,r2
81120450:	01204534 	movhi	r4,33044
81120454:	2129f004 	addi	r4,r4,-22592
81120458:	20c7883a 	add	r3,r4,r3
8112045c:	18c00003 	ldbu	r3,0(r3)
81120460:	05400804 	movi	r21,32
81120464:	1885883a 	add	r2,r3,r2
81120468:	a8abc83a 	sub	r21,r21,r2
8112046c:	a800621e 	bne	r21,zero,811205f8 <__udivdi3+0x30c>
81120470:	3c00e936 	bltu	r7,r16,81120818 <__udivdi3+0x52c>
81120474:	9985403a 	cmpgeu	r2,r19,r6
81120478:	0007883a 	mov	r3,zero
8112047c:	00004506 	br	81120594 <__udivdi3+0x2a8>
81120480:	3000041e 	bne	r6,zero,81120494 <__udivdi3+0x1a8>
81120484:	000b883a 	mov	r5,zero
81120488:	01000044 	movi	r4,1
8112048c:	1120ea40 	call	81120ea4 <__udivsi3>
81120490:	1023883a 	mov	r17,r2
81120494:	00bfffd4 	movui	r2,65535
81120498:	14404e2e 	bgeu	r2,r17,811205d4 <__udivdi3+0x2e8>
8112049c:	00804034 	movhi	r2,256
811204a0:	10bfffc4 	addi	r2,r2,-1
811204a4:	1440d836 	bltu	r2,r17,81120808 <__udivdi3+0x51c>
811204a8:	00800404 	movi	r2,16
811204ac:	8886d83a 	srl	r3,r17,r2
811204b0:	01204534 	movhi	r4,33044
811204b4:	2129f004 	addi	r4,r4,-22592
811204b8:	20c7883a 	add	r3,r4,r3
811204bc:	18c00003 	ldbu	r3,0(r3)
811204c0:	1885883a 	add	r2,r3,r2
811204c4:	00c00804 	movi	r3,32
811204c8:	1887c83a 	sub	r3,r3,r2
811204cc:	18008f1e 	bne	r3,zero,8112070c <__udivdi3+0x420>
811204d0:	882ad43a 	srli	r21,r17,16
811204d4:	8461c83a 	sub	r16,r16,r17
811204d8:	8d3fffcc 	andi	r20,r17,65535
811204dc:	00c00044 	movi	r3,1
811204e0:	8009883a 	mov	r4,r16
811204e4:	a80b883a 	mov	r5,r21
811204e8:	d8c00015 	stw	r3,0(sp)
811204ec:	1120f080 	call	81120f08 <__umodsi3>
811204f0:	8009883a 	mov	r4,r16
811204f4:	a80b883a 	mov	r5,r21
811204f8:	1027883a 	mov	r19,r2
811204fc:	1120ea40 	call	81120ea4 <__udivsi3>
81120500:	9826943a 	slli	r19,r19,16
81120504:	9008d43a 	srli	r4,r18,16
81120508:	1521383a 	mul	r16,r2,r20
8112050c:	102d883a 	mov	r22,r2
81120510:	24c8b03a 	or	r4,r4,r19
81120514:	d8c00017 	ldw	r3,0(sp)
81120518:	2400052e 	bgeu	r4,r16,81120530 <__udivdi3+0x244>
8112051c:	2449883a 	add	r4,r4,r17
81120520:	b0bfffc4 	addi	r2,r22,-1
81120524:	24400136 	bltu	r4,r17,8112052c <__udivdi3+0x240>
81120528:	2400ca36 	bltu	r4,r16,81120854 <__udivdi3+0x568>
8112052c:	102d883a 	mov	r22,r2
81120530:	2421c83a 	sub	r16,r4,r16
81120534:	a80b883a 	mov	r5,r21
81120538:	8009883a 	mov	r4,r16
8112053c:	d8c00015 	stw	r3,0(sp)
81120540:	1120f080 	call	81120f08 <__umodsi3>
81120544:	1027883a 	mov	r19,r2
81120548:	a80b883a 	mov	r5,r21
8112054c:	8009883a 	mov	r4,r16
81120550:	1120ea40 	call	81120ea4 <__udivsi3>
81120554:	9826943a 	slli	r19,r19,16
81120558:	1529383a 	mul	r20,r2,r20
8112055c:	94bfffcc 	andi	r18,r18,65535
81120560:	94e4b03a 	or	r18,r18,r19
81120564:	d8c00017 	ldw	r3,0(sp)
81120568:	9500052e 	bgeu	r18,r20,81120580 <__udivdi3+0x294>
8112056c:	8ca5883a 	add	r18,r17,r18
81120570:	113fffc4 	addi	r4,r2,-1
81120574:	94409736 	bltu	r18,r17,811207d4 <__udivdi3+0x4e8>
81120578:	9500962e 	bgeu	r18,r20,811207d4 <__udivdi3+0x4e8>
8112057c:	10bfff84 	addi	r2,r2,-2
81120580:	b00c943a 	slli	r6,r22,16
81120584:	3084b03a 	or	r2,r6,r2
81120588:	00000206 	br	81120594 <__udivdi3+0x2a8>
8112058c:	0007883a 	mov	r3,zero
81120590:	0005883a 	mov	r2,zero
81120594:	dfc00a17 	ldw	ra,40(sp)
81120598:	df000917 	ldw	fp,36(sp)
8112059c:	ddc00817 	ldw	r23,32(sp)
811205a0:	dd800717 	ldw	r22,28(sp)
811205a4:	dd400617 	ldw	r21,24(sp)
811205a8:	dd000517 	ldw	r20,20(sp)
811205ac:	dcc00417 	ldw	r19,16(sp)
811205b0:	dc800317 	ldw	r18,12(sp)
811205b4:	dc400217 	ldw	r17,8(sp)
811205b8:	dc000117 	ldw	r16,4(sp)
811205bc:	dec00b04 	addi	sp,sp,44
811205c0:	f800283a 	ret
811205c4:	00803fc4 	movi	r2,255
811205c8:	11c5803a 	cmpltu	r2,r2,r7
811205cc:	100490fa 	slli	r2,r2,3
811205d0:	003f9e06 	br	8112044c <__reset+0xfb10044c>
811205d4:	00803fc4 	movi	r2,255
811205d8:	1445803a 	cmpltu	r2,r2,r17
811205dc:	100490fa 	slli	r2,r2,3
811205e0:	003fb206 	br	811204ac <__reset+0xfb1004ac>
811205e4:	00804034 	movhi	r2,256
811205e8:	10bfffc4 	addi	r2,r2,-1
811205ec:	11808836 	bltu	r2,r6,81120810 <__udivdi3+0x524>
811205f0:	00800404 	movi	r2,16
811205f4:	003f5606 	br	81120350 <__reset+0xfb100350>
811205f8:	30aed83a 	srl	r23,r6,r2
811205fc:	3d4e983a 	sll	r7,r7,r21
81120600:	80acd83a 	srl	r22,r16,r2
81120604:	9884d83a 	srl	r2,r19,r2
81120608:	3deeb03a 	or	r23,r7,r23
8112060c:	b824d43a 	srli	r18,r23,16
81120610:	8560983a 	sll	r16,r16,r21
81120614:	b009883a 	mov	r4,r22
81120618:	900b883a 	mov	r5,r18
8112061c:	3568983a 	sll	r20,r6,r21
81120620:	1420b03a 	or	r16,r2,r16
81120624:	1120f080 	call	81120f08 <__umodsi3>
81120628:	b009883a 	mov	r4,r22
8112062c:	900b883a 	mov	r5,r18
81120630:	1023883a 	mov	r17,r2
81120634:	1120ea40 	call	81120ea4 <__udivsi3>
81120638:	8808943a 	slli	r4,r17,16
8112063c:	bf3fffcc 	andi	fp,r23,65535
81120640:	8006d43a 	srli	r3,r16,16
81120644:	e0a3383a 	mul	r17,fp,r2
81120648:	100d883a 	mov	r6,r2
8112064c:	1906b03a 	or	r3,r3,r4
81120650:	1c40042e 	bgeu	r3,r17,81120664 <__udivdi3+0x378>
81120654:	1dc7883a 	add	r3,r3,r23
81120658:	10bfffc4 	addi	r2,r2,-1
8112065c:	1dc0752e 	bgeu	r3,r23,81120834 <__udivdi3+0x548>
81120660:	100d883a 	mov	r6,r2
81120664:	1c63c83a 	sub	r17,r3,r17
81120668:	900b883a 	mov	r5,r18
8112066c:	8809883a 	mov	r4,r17
81120670:	d9800015 	stw	r6,0(sp)
81120674:	1120f080 	call	81120f08 <__umodsi3>
81120678:	102d883a 	mov	r22,r2
8112067c:	8809883a 	mov	r4,r17
81120680:	900b883a 	mov	r5,r18
81120684:	1120ea40 	call	81120ea4 <__udivsi3>
81120688:	b02c943a 	slli	r22,r22,16
8112068c:	e089383a 	mul	r4,fp,r2
81120690:	843fffcc 	andi	r16,r16,65535
81120694:	85a0b03a 	or	r16,r16,r22
81120698:	d9800017 	ldw	r6,0(sp)
8112069c:	8100042e 	bgeu	r16,r4,811206b0 <__udivdi3+0x3c4>
811206a0:	85e1883a 	add	r16,r16,r23
811206a4:	10ffffc4 	addi	r3,r2,-1
811206a8:	85c05e2e 	bgeu	r16,r23,81120824 <__udivdi3+0x538>
811206ac:	1805883a 	mov	r2,r3
811206b0:	300c943a 	slli	r6,r6,16
811206b4:	a17fffcc 	andi	r5,r20,65535
811206b8:	a028d43a 	srli	r20,r20,16
811206bc:	3084b03a 	or	r2,r6,r2
811206c0:	10ffffcc 	andi	r3,r2,65535
811206c4:	100cd43a 	srli	r6,r2,16
811206c8:	194f383a 	mul	r7,r3,r5
811206cc:	1d07383a 	mul	r3,r3,r20
811206d0:	314b383a 	mul	r5,r6,r5
811206d4:	3810d43a 	srli	r8,r7,16
811206d8:	8121c83a 	sub	r16,r16,r4
811206dc:	1947883a 	add	r3,r3,r5
811206e0:	40c7883a 	add	r3,r8,r3
811206e4:	350d383a 	mul	r6,r6,r20
811206e8:	1940022e 	bgeu	r3,r5,811206f4 <__udivdi3+0x408>
811206ec:	01000074 	movhi	r4,1
811206f0:	310d883a 	add	r6,r6,r4
811206f4:	1828d43a 	srli	r20,r3,16
811206f8:	a18d883a 	add	r6,r20,r6
811206fc:	81803e36 	bltu	r16,r6,811207f8 <__udivdi3+0x50c>
81120700:	81803826 	beq	r16,r6,811207e4 <__udivdi3+0x4f8>
81120704:	0007883a 	mov	r3,zero
81120708:	003fa206 	br	81120594 <__reset+0xfb100594>
8112070c:	88e2983a 	sll	r17,r17,r3
81120710:	80a8d83a 	srl	r20,r16,r2
81120714:	80e0983a 	sll	r16,r16,r3
81120718:	882ad43a 	srli	r21,r17,16
8112071c:	9884d83a 	srl	r2,r19,r2
81120720:	a009883a 	mov	r4,r20
81120724:	a80b883a 	mov	r5,r21
81120728:	142eb03a 	or	r23,r2,r16
8112072c:	98e4983a 	sll	r18,r19,r3
81120730:	1120f080 	call	81120f08 <__umodsi3>
81120734:	a009883a 	mov	r4,r20
81120738:	a80b883a 	mov	r5,r21
8112073c:	1021883a 	mov	r16,r2
81120740:	1120ea40 	call	81120ea4 <__udivsi3>
81120744:	1039883a 	mov	fp,r2
81120748:	8d3fffcc 	andi	r20,r17,65535
8112074c:	8020943a 	slli	r16,r16,16
81120750:	b804d43a 	srli	r2,r23,16
81120754:	a72d383a 	mul	r22,r20,fp
81120758:	1404b03a 	or	r2,r2,r16
8112075c:	1580062e 	bgeu	r2,r22,81120778 <__udivdi3+0x48c>
81120760:	1445883a 	add	r2,r2,r17
81120764:	e0ffffc4 	addi	r3,fp,-1
81120768:	14403836 	bltu	r2,r17,8112084c <__udivdi3+0x560>
8112076c:	1580372e 	bgeu	r2,r22,8112084c <__udivdi3+0x560>
81120770:	e73fff84 	addi	fp,fp,-2
81120774:	1445883a 	add	r2,r2,r17
81120778:	15adc83a 	sub	r22,r2,r22
8112077c:	a80b883a 	mov	r5,r21
81120780:	b009883a 	mov	r4,r22
81120784:	1120f080 	call	81120f08 <__umodsi3>
81120788:	1027883a 	mov	r19,r2
8112078c:	b009883a 	mov	r4,r22
81120790:	a80b883a 	mov	r5,r21
81120794:	1120ea40 	call	81120ea4 <__udivsi3>
81120798:	9826943a 	slli	r19,r19,16
8112079c:	a0a1383a 	mul	r16,r20,r2
811207a0:	b93fffcc 	andi	r4,r23,65535
811207a4:	24c8b03a 	or	r4,r4,r19
811207a8:	2400062e 	bgeu	r4,r16,811207c4 <__udivdi3+0x4d8>
811207ac:	2449883a 	add	r4,r4,r17
811207b0:	10ffffc4 	addi	r3,r2,-1
811207b4:	24402336 	bltu	r4,r17,81120844 <__udivdi3+0x558>
811207b8:	2400222e 	bgeu	r4,r16,81120844 <__udivdi3+0x558>
811207bc:	10bfff84 	addi	r2,r2,-2
811207c0:	2449883a 	add	r4,r4,r17
811207c4:	e038943a 	slli	fp,fp,16
811207c8:	2421c83a 	sub	r16,r4,r16
811207cc:	e086b03a 	or	r3,fp,r2
811207d0:	003f4306 	br	811204e0 <__reset+0xfb1004e0>
811207d4:	2005883a 	mov	r2,r4
811207d8:	003f6906 	br	81120580 <__reset+0xfb100580>
811207dc:	1805883a 	mov	r2,r3
811207e0:	003f0f06 	br	81120420 <__reset+0xfb100420>
811207e4:	1806943a 	slli	r3,r3,16
811207e8:	9d66983a 	sll	r19,r19,r21
811207ec:	39ffffcc 	andi	r7,r7,65535
811207f0:	19c7883a 	add	r3,r3,r7
811207f4:	98ffc32e 	bgeu	r19,r3,81120704 <__reset+0xfb100704>
811207f8:	10bfffc4 	addi	r2,r2,-1
811207fc:	003fc106 	br	81120704 <__reset+0xfb100704>
81120800:	00800604 	movi	r2,24
81120804:	003f1106 	br	8112044c <__reset+0xfb10044c>
81120808:	00800604 	movi	r2,24
8112080c:	003f2706 	br	811204ac <__reset+0xfb1004ac>
81120810:	00800604 	movi	r2,24
81120814:	003ece06 	br	81120350 <__reset+0xfb100350>
81120818:	0007883a 	mov	r3,zero
8112081c:	00800044 	movi	r2,1
81120820:	003f5c06 	br	81120594 <__reset+0xfb100594>
81120824:	813fa12e 	bgeu	r16,r4,811206ac <__reset+0xfb1006ac>
81120828:	10bfff84 	addi	r2,r2,-2
8112082c:	85e1883a 	add	r16,r16,r23
81120830:	003f9f06 	br	811206b0 <__reset+0xfb1006b0>
81120834:	1c7f8a2e 	bgeu	r3,r17,81120660 <__reset+0xfb100660>
81120838:	31bfff84 	addi	r6,r6,-2
8112083c:	1dc7883a 	add	r3,r3,r23
81120840:	003f8806 	br	81120664 <__reset+0xfb100664>
81120844:	1805883a 	mov	r2,r3
81120848:	003fde06 	br	811207c4 <__reset+0xfb1007c4>
8112084c:	1839883a 	mov	fp,r3
81120850:	003fc906 	br	81120778 <__reset+0xfb100778>
81120854:	b5bfff84 	addi	r22,r22,-2
81120858:	2449883a 	add	r4,r4,r17
8112085c:	003f3406 	br	81120530 <__reset+0xfb100530>
81120860:	b5bfff84 	addi	r22,r22,-2
81120864:	1445883a 	add	r2,r2,r17
81120868:	003edb06 	br	811203d8 <__reset+0xfb1003d8>

8112086c <__umoddi3>:
8112086c:	defff404 	addi	sp,sp,-48
81120870:	de00012e 	bgeu	sp,et,81120878 <__umoddi3+0xc>
81120874:	003b68fa 	trap	3
81120878:	df000a15 	stw	fp,40(sp)
8112087c:	dc400315 	stw	r17,12(sp)
81120880:	dc000215 	stw	r16,8(sp)
81120884:	dfc00b15 	stw	ra,44(sp)
81120888:	ddc00915 	stw	r23,36(sp)
8112088c:	dd800815 	stw	r22,32(sp)
81120890:	dd400715 	stw	r21,28(sp)
81120894:	dd000615 	stw	r20,24(sp)
81120898:	dcc00515 	stw	r19,20(sp)
8112089c:	dc800415 	stw	r18,16(sp)
811208a0:	2021883a 	mov	r16,r4
811208a4:	2823883a 	mov	r17,r5
811208a8:	2839883a 	mov	fp,r5
811208ac:	38003c1e 	bne	r7,zero,811209a0 <__umoddi3+0x134>
811208b0:	3027883a 	mov	r19,r6
811208b4:	2029883a 	mov	r20,r4
811208b8:	2980512e 	bgeu	r5,r6,81120a00 <__umoddi3+0x194>
811208bc:	00bfffd4 	movui	r2,65535
811208c0:	11809a36 	bltu	r2,r6,81120b2c <__umoddi3+0x2c0>
811208c4:	01003fc4 	movi	r4,255
811208c8:	2189803a 	cmpltu	r4,r4,r6
811208cc:	200890fa 	slli	r4,r4,3
811208d0:	3104d83a 	srl	r2,r6,r4
811208d4:	00e04534 	movhi	r3,33044
811208d8:	18e9f004 	addi	r3,r3,-22592
811208dc:	1885883a 	add	r2,r3,r2
811208e0:	10c00003 	ldbu	r3,0(r2)
811208e4:	00800804 	movi	r2,32
811208e8:	1909883a 	add	r4,r3,r4
811208ec:	1125c83a 	sub	r18,r2,r4
811208f0:	90000526 	beq	r18,zero,81120908 <__umoddi3+0x9c>
811208f4:	8ca2983a 	sll	r17,r17,r18
811208f8:	8108d83a 	srl	r4,r16,r4
811208fc:	34a6983a 	sll	r19,r6,r18
81120900:	84a8983a 	sll	r20,r16,r18
81120904:	2478b03a 	or	fp,r4,r17
81120908:	982ed43a 	srli	r23,r19,16
8112090c:	e009883a 	mov	r4,fp
81120910:	9dbfffcc 	andi	r22,r19,65535
81120914:	b80b883a 	mov	r5,r23
81120918:	1120f080 	call	81120f08 <__umodsi3>
8112091c:	e009883a 	mov	r4,fp
81120920:	b80b883a 	mov	r5,r23
81120924:	102b883a 	mov	r21,r2
81120928:	1120ea40 	call	81120ea4 <__udivsi3>
8112092c:	a806943a 	slli	r3,r21,16
81120930:	a008d43a 	srli	r4,r20,16
81120934:	b085383a 	mul	r2,r22,r2
81120938:	20c8b03a 	or	r4,r4,r3
8112093c:	2080032e 	bgeu	r4,r2,8112094c <__umoddi3+0xe0>
81120940:	24c9883a 	add	r4,r4,r19
81120944:	24c00136 	bltu	r4,r19,8112094c <__umoddi3+0xe0>
81120948:	20811036 	bltu	r4,r2,81120d8c <__umoddi3+0x520>
8112094c:	20abc83a 	sub	r21,r4,r2
81120950:	b80b883a 	mov	r5,r23
81120954:	a809883a 	mov	r4,r21
81120958:	1120f080 	call	81120f08 <__umodsi3>
8112095c:	1023883a 	mov	r17,r2
81120960:	b80b883a 	mov	r5,r23
81120964:	a809883a 	mov	r4,r21
81120968:	1120ea40 	call	81120ea4 <__udivsi3>
8112096c:	8822943a 	slli	r17,r17,16
81120970:	b085383a 	mul	r2,r22,r2
81120974:	a0ffffcc 	andi	r3,r20,65535
81120978:	1c46b03a 	or	r3,r3,r17
8112097c:	1880042e 	bgeu	r3,r2,81120990 <__umoddi3+0x124>
81120980:	1cc7883a 	add	r3,r3,r19
81120984:	1cc00236 	bltu	r3,r19,81120990 <__umoddi3+0x124>
81120988:	1880012e 	bgeu	r3,r2,81120990 <__umoddi3+0x124>
8112098c:	1cc7883a 	add	r3,r3,r19
81120990:	1885c83a 	sub	r2,r3,r2
81120994:	1484d83a 	srl	r2,r2,r18
81120998:	0007883a 	mov	r3,zero
8112099c:	00004f06 	br	81120adc <__umoddi3+0x270>
811209a0:	29c04c36 	bltu	r5,r7,81120ad4 <__umoddi3+0x268>
811209a4:	00bfffd4 	movui	r2,65535
811209a8:	11c0582e 	bgeu	r2,r7,81120b0c <__umoddi3+0x2a0>
811209ac:	00804034 	movhi	r2,256
811209b0:	10bfffc4 	addi	r2,r2,-1
811209b4:	11c0e736 	bltu	r2,r7,81120d54 <__umoddi3+0x4e8>
811209b8:	01000404 	movi	r4,16
811209bc:	3904d83a 	srl	r2,r7,r4
811209c0:	00e04534 	movhi	r3,33044
811209c4:	18e9f004 	addi	r3,r3,-22592
811209c8:	1885883a 	add	r2,r3,r2
811209cc:	14c00003 	ldbu	r19,0(r2)
811209d0:	00c00804 	movi	r3,32
811209d4:	9927883a 	add	r19,r19,r4
811209d8:	1ce9c83a 	sub	r20,r3,r19
811209dc:	a000581e 	bne	r20,zero,81120b40 <__umoddi3+0x2d4>
811209e0:	3c400136 	bltu	r7,r17,811209e8 <__umoddi3+0x17c>
811209e4:	8180eb36 	bltu	r16,r6,81120d94 <__umoddi3+0x528>
811209e8:	8185c83a 	sub	r2,r16,r6
811209ec:	89e3c83a 	sub	r17,r17,r7
811209f0:	8089803a 	cmpltu	r4,r16,r2
811209f4:	8939c83a 	sub	fp,r17,r4
811209f8:	e007883a 	mov	r3,fp
811209fc:	00003706 	br	81120adc <__umoddi3+0x270>
81120a00:	3000041e 	bne	r6,zero,81120a14 <__umoddi3+0x1a8>
81120a04:	000b883a 	mov	r5,zero
81120a08:	01000044 	movi	r4,1
81120a0c:	1120ea40 	call	81120ea4 <__udivsi3>
81120a10:	1027883a 	mov	r19,r2
81120a14:	00bfffd4 	movui	r2,65535
81120a18:	14c0402e 	bgeu	r2,r19,81120b1c <__umoddi3+0x2b0>
81120a1c:	00804034 	movhi	r2,256
81120a20:	10bfffc4 	addi	r2,r2,-1
81120a24:	14c0cd36 	bltu	r2,r19,81120d5c <__umoddi3+0x4f0>
81120a28:	00800404 	movi	r2,16
81120a2c:	9886d83a 	srl	r3,r19,r2
81120a30:	01204534 	movhi	r4,33044
81120a34:	2129f004 	addi	r4,r4,-22592
81120a38:	20c7883a 	add	r3,r4,r3
81120a3c:	18c00003 	ldbu	r3,0(r3)
81120a40:	1887883a 	add	r3,r3,r2
81120a44:	00800804 	movi	r2,32
81120a48:	10e5c83a 	sub	r18,r2,r3
81120a4c:	9000901e 	bne	r18,zero,81120c90 <__umoddi3+0x424>
81120a50:	982cd43a 	srli	r22,r19,16
81120a54:	8ce3c83a 	sub	r17,r17,r19
81120a58:	9d7fffcc 	andi	r21,r19,65535
81120a5c:	b00b883a 	mov	r5,r22
81120a60:	8809883a 	mov	r4,r17
81120a64:	1120f080 	call	81120f08 <__umodsi3>
81120a68:	8809883a 	mov	r4,r17
81120a6c:	b00b883a 	mov	r5,r22
81120a70:	1021883a 	mov	r16,r2
81120a74:	1120ea40 	call	81120ea4 <__udivsi3>
81120a78:	8006943a 	slli	r3,r16,16
81120a7c:	a008d43a 	srli	r4,r20,16
81120a80:	1545383a 	mul	r2,r2,r21
81120a84:	20c8b03a 	or	r4,r4,r3
81120a88:	2080042e 	bgeu	r4,r2,81120a9c <__umoddi3+0x230>
81120a8c:	24c9883a 	add	r4,r4,r19
81120a90:	24c00236 	bltu	r4,r19,81120a9c <__umoddi3+0x230>
81120a94:	2080012e 	bgeu	r4,r2,81120a9c <__umoddi3+0x230>
81120a98:	24c9883a 	add	r4,r4,r19
81120a9c:	20a1c83a 	sub	r16,r4,r2
81120aa0:	b00b883a 	mov	r5,r22
81120aa4:	8009883a 	mov	r4,r16
81120aa8:	1120f080 	call	81120f08 <__umodsi3>
81120aac:	1023883a 	mov	r17,r2
81120ab0:	b00b883a 	mov	r5,r22
81120ab4:	8009883a 	mov	r4,r16
81120ab8:	1120ea40 	call	81120ea4 <__udivsi3>
81120abc:	8822943a 	slli	r17,r17,16
81120ac0:	1545383a 	mul	r2,r2,r21
81120ac4:	a53fffcc 	andi	r20,r20,65535
81120ac8:	a446b03a 	or	r3,r20,r17
81120acc:	18bfb02e 	bgeu	r3,r2,81120990 <__reset+0xfb100990>
81120ad0:	003fab06 	br	81120980 <__reset+0xfb100980>
81120ad4:	2005883a 	mov	r2,r4
81120ad8:	2807883a 	mov	r3,r5
81120adc:	dfc00b17 	ldw	ra,44(sp)
81120ae0:	df000a17 	ldw	fp,40(sp)
81120ae4:	ddc00917 	ldw	r23,36(sp)
81120ae8:	dd800817 	ldw	r22,32(sp)
81120aec:	dd400717 	ldw	r21,28(sp)
81120af0:	dd000617 	ldw	r20,24(sp)
81120af4:	dcc00517 	ldw	r19,20(sp)
81120af8:	dc800417 	ldw	r18,16(sp)
81120afc:	dc400317 	ldw	r17,12(sp)
81120b00:	dc000217 	ldw	r16,8(sp)
81120b04:	dec00c04 	addi	sp,sp,48
81120b08:	f800283a 	ret
81120b0c:	04c03fc4 	movi	r19,255
81120b10:	99c9803a 	cmpltu	r4,r19,r7
81120b14:	200890fa 	slli	r4,r4,3
81120b18:	003fa806 	br	811209bc <__reset+0xfb1009bc>
81120b1c:	00803fc4 	movi	r2,255
81120b20:	14c5803a 	cmpltu	r2,r2,r19
81120b24:	100490fa 	slli	r2,r2,3
81120b28:	003fc006 	br	81120a2c <__reset+0xfb100a2c>
81120b2c:	00804034 	movhi	r2,256
81120b30:	10bfffc4 	addi	r2,r2,-1
81120b34:	11808b36 	bltu	r2,r6,81120d64 <__umoddi3+0x4f8>
81120b38:	01000404 	movi	r4,16
81120b3c:	003f6406 	br	811208d0 <__reset+0xfb1008d0>
81120b40:	34c4d83a 	srl	r2,r6,r19
81120b44:	3d0e983a 	sll	r7,r7,r20
81120b48:	8cf8d83a 	srl	fp,r17,r19
81120b4c:	8d10983a 	sll	r8,r17,r20
81120b50:	38aab03a 	or	r21,r7,r2
81120b54:	a82cd43a 	srli	r22,r21,16
81120b58:	84e2d83a 	srl	r17,r16,r19
81120b5c:	e009883a 	mov	r4,fp
81120b60:	b00b883a 	mov	r5,r22
81120b64:	8a22b03a 	or	r17,r17,r8
81120b68:	3524983a 	sll	r18,r6,r20
81120b6c:	1120f080 	call	81120f08 <__umodsi3>
81120b70:	e009883a 	mov	r4,fp
81120b74:	b00b883a 	mov	r5,r22
81120b78:	102f883a 	mov	r23,r2
81120b7c:	1120ea40 	call	81120ea4 <__udivsi3>
81120b80:	100d883a 	mov	r6,r2
81120b84:	b808943a 	slli	r4,r23,16
81120b88:	aa3fffcc 	andi	r8,r21,65535
81120b8c:	8804d43a 	srli	r2,r17,16
81120b90:	41af383a 	mul	r23,r8,r6
81120b94:	8520983a 	sll	r16,r16,r20
81120b98:	1104b03a 	or	r2,r2,r4
81120b9c:	15c0042e 	bgeu	r2,r23,81120bb0 <__umoddi3+0x344>
81120ba0:	1545883a 	add	r2,r2,r21
81120ba4:	30ffffc4 	addi	r3,r6,-1
81120ba8:	1540742e 	bgeu	r2,r21,81120d7c <__umoddi3+0x510>
81120bac:	180d883a 	mov	r6,r3
81120bb0:	15efc83a 	sub	r23,r2,r23
81120bb4:	b00b883a 	mov	r5,r22
81120bb8:	b809883a 	mov	r4,r23
81120bbc:	d9800115 	stw	r6,4(sp)
81120bc0:	da000015 	stw	r8,0(sp)
81120bc4:	1120f080 	call	81120f08 <__umodsi3>
81120bc8:	b00b883a 	mov	r5,r22
81120bcc:	b809883a 	mov	r4,r23
81120bd0:	1039883a 	mov	fp,r2
81120bd4:	1120ea40 	call	81120ea4 <__udivsi3>
81120bd8:	da000017 	ldw	r8,0(sp)
81120bdc:	e038943a 	slli	fp,fp,16
81120be0:	100b883a 	mov	r5,r2
81120be4:	4089383a 	mul	r4,r8,r2
81120be8:	8a3fffcc 	andi	r8,r17,65535
81120bec:	4710b03a 	or	r8,r8,fp
81120bf0:	d9800117 	ldw	r6,4(sp)
81120bf4:	4100042e 	bgeu	r8,r4,81120c08 <__umoddi3+0x39c>
81120bf8:	4551883a 	add	r8,r8,r21
81120bfc:	10bfffc4 	addi	r2,r2,-1
81120c00:	45405a2e 	bgeu	r8,r21,81120d6c <__umoddi3+0x500>
81120c04:	100b883a 	mov	r5,r2
81120c08:	300c943a 	slli	r6,r6,16
81120c0c:	91ffffcc 	andi	r7,r18,65535
81120c10:	9004d43a 	srli	r2,r18,16
81120c14:	314cb03a 	or	r6,r6,r5
81120c18:	317fffcc 	andi	r5,r6,65535
81120c1c:	300cd43a 	srli	r6,r6,16
81120c20:	29d3383a 	mul	r9,r5,r7
81120c24:	288b383a 	mul	r5,r5,r2
81120c28:	31cf383a 	mul	r7,r6,r7
81120c2c:	4806d43a 	srli	r3,r9,16
81120c30:	4111c83a 	sub	r8,r8,r4
81120c34:	29cb883a 	add	r5,r5,r7
81120c38:	194b883a 	add	r5,r3,r5
81120c3c:	3085383a 	mul	r2,r6,r2
81120c40:	29c0022e 	bgeu	r5,r7,81120c4c <__umoddi3+0x3e0>
81120c44:	00c00074 	movhi	r3,1
81120c48:	10c5883a 	add	r2,r2,r3
81120c4c:	2808d43a 	srli	r4,r5,16
81120c50:	280a943a 	slli	r5,r5,16
81120c54:	4a7fffcc 	andi	r9,r9,65535
81120c58:	2085883a 	add	r2,r4,r2
81120c5c:	2a4b883a 	add	r5,r5,r9
81120c60:	40803636 	bltu	r8,r2,81120d3c <__umoddi3+0x4d0>
81120c64:	40804d26 	beq	r8,r2,81120d9c <__umoddi3+0x530>
81120c68:	4089c83a 	sub	r4,r8,r2
81120c6c:	280f883a 	mov	r7,r5
81120c70:	81cfc83a 	sub	r7,r16,r7
81120c74:	81c7803a 	cmpltu	r3,r16,r7
81120c78:	20c7c83a 	sub	r3,r4,r3
81120c7c:	1cc4983a 	sll	r2,r3,r19
81120c80:	3d0ed83a 	srl	r7,r7,r20
81120c84:	1d06d83a 	srl	r3,r3,r20
81120c88:	11c4b03a 	or	r2,r2,r7
81120c8c:	003f9306 	br	81120adc <__reset+0xfb100adc>
81120c90:	9ca6983a 	sll	r19,r19,r18
81120c94:	88e8d83a 	srl	r20,r17,r3
81120c98:	80c4d83a 	srl	r2,r16,r3
81120c9c:	982cd43a 	srli	r22,r19,16
81120ca0:	8ca2983a 	sll	r17,r17,r18
81120ca4:	a009883a 	mov	r4,r20
81120ca8:	b00b883a 	mov	r5,r22
81120cac:	1478b03a 	or	fp,r2,r17
81120cb0:	1120f080 	call	81120f08 <__umodsi3>
81120cb4:	a009883a 	mov	r4,r20
81120cb8:	b00b883a 	mov	r5,r22
81120cbc:	1023883a 	mov	r17,r2
81120cc0:	1120ea40 	call	81120ea4 <__udivsi3>
81120cc4:	9d7fffcc 	andi	r21,r19,65535
81120cc8:	880a943a 	slli	r5,r17,16
81120ccc:	e008d43a 	srli	r4,fp,16
81120cd0:	a885383a 	mul	r2,r21,r2
81120cd4:	84a8983a 	sll	r20,r16,r18
81120cd8:	2148b03a 	or	r4,r4,r5
81120cdc:	2080042e 	bgeu	r4,r2,81120cf0 <__umoddi3+0x484>
81120ce0:	24c9883a 	add	r4,r4,r19
81120ce4:	24c00236 	bltu	r4,r19,81120cf0 <__umoddi3+0x484>
81120ce8:	2080012e 	bgeu	r4,r2,81120cf0 <__umoddi3+0x484>
81120cec:	24c9883a 	add	r4,r4,r19
81120cf0:	20a3c83a 	sub	r17,r4,r2
81120cf4:	b00b883a 	mov	r5,r22
81120cf8:	8809883a 	mov	r4,r17
81120cfc:	1120f080 	call	81120f08 <__umodsi3>
81120d00:	102f883a 	mov	r23,r2
81120d04:	8809883a 	mov	r4,r17
81120d08:	b00b883a 	mov	r5,r22
81120d0c:	1120ea40 	call	81120ea4 <__udivsi3>
81120d10:	b82e943a 	slli	r23,r23,16
81120d14:	a885383a 	mul	r2,r21,r2
81120d18:	e13fffcc 	andi	r4,fp,65535
81120d1c:	25c8b03a 	or	r4,r4,r23
81120d20:	2080042e 	bgeu	r4,r2,81120d34 <__umoddi3+0x4c8>
81120d24:	24c9883a 	add	r4,r4,r19
81120d28:	24c00236 	bltu	r4,r19,81120d34 <__umoddi3+0x4c8>
81120d2c:	2080012e 	bgeu	r4,r2,81120d34 <__umoddi3+0x4c8>
81120d30:	24c9883a 	add	r4,r4,r19
81120d34:	20a3c83a 	sub	r17,r4,r2
81120d38:	003f4806 	br	81120a5c <__reset+0xfb100a5c>
81120d3c:	2c8fc83a 	sub	r7,r5,r18
81120d40:	1545c83a 	sub	r2,r2,r21
81120d44:	29cb803a 	cmpltu	r5,r5,r7
81120d48:	1145c83a 	sub	r2,r2,r5
81120d4c:	4089c83a 	sub	r4,r8,r2
81120d50:	003fc706 	br	81120c70 <__reset+0xfb100c70>
81120d54:	01000604 	movi	r4,24
81120d58:	003f1806 	br	811209bc <__reset+0xfb1009bc>
81120d5c:	00800604 	movi	r2,24
81120d60:	003f3206 	br	81120a2c <__reset+0xfb100a2c>
81120d64:	01000604 	movi	r4,24
81120d68:	003ed906 	br	811208d0 <__reset+0xfb1008d0>
81120d6c:	413fa52e 	bgeu	r8,r4,81120c04 <__reset+0xfb100c04>
81120d70:	297fff84 	addi	r5,r5,-2
81120d74:	4551883a 	add	r8,r8,r21
81120d78:	003fa306 	br	81120c08 <__reset+0xfb100c08>
81120d7c:	15ff8b2e 	bgeu	r2,r23,81120bac <__reset+0xfb100bac>
81120d80:	31bfff84 	addi	r6,r6,-2
81120d84:	1545883a 	add	r2,r2,r21
81120d88:	003f8906 	br	81120bb0 <__reset+0xfb100bb0>
81120d8c:	24c9883a 	add	r4,r4,r19
81120d90:	003eee06 	br	8112094c <__reset+0xfb10094c>
81120d94:	8005883a 	mov	r2,r16
81120d98:	003f1706 	br	811209f8 <__reset+0xfb1009f8>
81120d9c:	817fe736 	bltu	r16,r5,81120d3c <__reset+0xfb100d3c>
81120da0:	280f883a 	mov	r7,r5
81120da4:	0009883a 	mov	r4,zero
81120da8:	003fb106 	br	81120c70 <__reset+0xfb100c70>

81120dac <__divsi3>:
81120dac:	20001b16 	blt	r4,zero,81120e1c <__divsi3+0x70>
81120db0:	000f883a 	mov	r7,zero
81120db4:	28001616 	blt	r5,zero,81120e10 <__divsi3+0x64>
81120db8:	200d883a 	mov	r6,r4
81120dbc:	29001a2e 	bgeu	r5,r4,81120e28 <__divsi3+0x7c>
81120dc0:	00800804 	movi	r2,32
81120dc4:	00c00044 	movi	r3,1
81120dc8:	00000106 	br	81120dd0 <__divsi3+0x24>
81120dcc:	10000d26 	beq	r2,zero,81120e04 <__divsi3+0x58>
81120dd0:	294b883a 	add	r5,r5,r5
81120dd4:	10bfffc4 	addi	r2,r2,-1
81120dd8:	18c7883a 	add	r3,r3,r3
81120ddc:	293ffb36 	bltu	r5,r4,81120dcc <__reset+0xfb100dcc>
81120de0:	0005883a 	mov	r2,zero
81120de4:	18000726 	beq	r3,zero,81120e04 <__divsi3+0x58>
81120de8:	0005883a 	mov	r2,zero
81120dec:	31400236 	bltu	r6,r5,81120df8 <__divsi3+0x4c>
81120df0:	314dc83a 	sub	r6,r6,r5
81120df4:	10c4b03a 	or	r2,r2,r3
81120df8:	1806d07a 	srli	r3,r3,1
81120dfc:	280ad07a 	srli	r5,r5,1
81120e00:	183ffa1e 	bne	r3,zero,81120dec <__reset+0xfb100dec>
81120e04:	38000126 	beq	r7,zero,81120e0c <__divsi3+0x60>
81120e08:	0085c83a 	sub	r2,zero,r2
81120e0c:	f800283a 	ret
81120e10:	014bc83a 	sub	r5,zero,r5
81120e14:	39c0005c 	xori	r7,r7,1
81120e18:	003fe706 	br	81120db8 <__reset+0xfb100db8>
81120e1c:	0109c83a 	sub	r4,zero,r4
81120e20:	01c00044 	movi	r7,1
81120e24:	003fe306 	br	81120db4 <__reset+0xfb100db4>
81120e28:	00c00044 	movi	r3,1
81120e2c:	003fee06 	br	81120de8 <__reset+0xfb100de8>

81120e30 <__modsi3>:
81120e30:	20001716 	blt	r4,zero,81120e90 <__modsi3+0x60>
81120e34:	000f883a 	mov	r7,zero
81120e38:	2005883a 	mov	r2,r4
81120e3c:	28001216 	blt	r5,zero,81120e88 <__modsi3+0x58>
81120e40:	2900162e 	bgeu	r5,r4,81120e9c <__modsi3+0x6c>
81120e44:	01800804 	movi	r6,32
81120e48:	00c00044 	movi	r3,1
81120e4c:	00000106 	br	81120e54 <__modsi3+0x24>
81120e50:	30000a26 	beq	r6,zero,81120e7c <__modsi3+0x4c>
81120e54:	294b883a 	add	r5,r5,r5
81120e58:	31bfffc4 	addi	r6,r6,-1
81120e5c:	18c7883a 	add	r3,r3,r3
81120e60:	293ffb36 	bltu	r5,r4,81120e50 <__reset+0xfb100e50>
81120e64:	18000526 	beq	r3,zero,81120e7c <__modsi3+0x4c>
81120e68:	1806d07a 	srli	r3,r3,1
81120e6c:	11400136 	bltu	r2,r5,81120e74 <__modsi3+0x44>
81120e70:	1145c83a 	sub	r2,r2,r5
81120e74:	280ad07a 	srli	r5,r5,1
81120e78:	183ffb1e 	bne	r3,zero,81120e68 <__reset+0xfb100e68>
81120e7c:	38000126 	beq	r7,zero,81120e84 <__modsi3+0x54>
81120e80:	0085c83a 	sub	r2,zero,r2
81120e84:	f800283a 	ret
81120e88:	014bc83a 	sub	r5,zero,r5
81120e8c:	003fec06 	br	81120e40 <__reset+0xfb100e40>
81120e90:	0109c83a 	sub	r4,zero,r4
81120e94:	01c00044 	movi	r7,1
81120e98:	003fe706 	br	81120e38 <__reset+0xfb100e38>
81120e9c:	00c00044 	movi	r3,1
81120ea0:	003ff106 	br	81120e68 <__reset+0xfb100e68>

81120ea4 <__udivsi3>:
81120ea4:	200d883a 	mov	r6,r4
81120ea8:	2900152e 	bgeu	r5,r4,81120f00 <__udivsi3+0x5c>
81120eac:	28001416 	blt	r5,zero,81120f00 <__udivsi3+0x5c>
81120eb0:	00800804 	movi	r2,32
81120eb4:	00c00044 	movi	r3,1
81120eb8:	00000206 	br	81120ec4 <__udivsi3+0x20>
81120ebc:	10000e26 	beq	r2,zero,81120ef8 <__udivsi3+0x54>
81120ec0:	28000516 	blt	r5,zero,81120ed8 <__udivsi3+0x34>
81120ec4:	294b883a 	add	r5,r5,r5
81120ec8:	10bfffc4 	addi	r2,r2,-1
81120ecc:	18c7883a 	add	r3,r3,r3
81120ed0:	293ffa36 	bltu	r5,r4,81120ebc <__reset+0xfb100ebc>
81120ed4:	18000826 	beq	r3,zero,81120ef8 <__udivsi3+0x54>
81120ed8:	0005883a 	mov	r2,zero
81120edc:	31400236 	bltu	r6,r5,81120ee8 <__udivsi3+0x44>
81120ee0:	314dc83a 	sub	r6,r6,r5
81120ee4:	10c4b03a 	or	r2,r2,r3
81120ee8:	1806d07a 	srli	r3,r3,1
81120eec:	280ad07a 	srli	r5,r5,1
81120ef0:	183ffa1e 	bne	r3,zero,81120edc <__reset+0xfb100edc>
81120ef4:	f800283a 	ret
81120ef8:	0005883a 	mov	r2,zero
81120efc:	f800283a 	ret
81120f00:	00c00044 	movi	r3,1
81120f04:	003ff406 	br	81120ed8 <__reset+0xfb100ed8>

81120f08 <__umodsi3>:
81120f08:	2005883a 	mov	r2,r4
81120f0c:	2900122e 	bgeu	r5,r4,81120f58 <__umodsi3+0x50>
81120f10:	28001116 	blt	r5,zero,81120f58 <__umodsi3+0x50>
81120f14:	01800804 	movi	r6,32
81120f18:	00c00044 	movi	r3,1
81120f1c:	00000206 	br	81120f28 <__umodsi3+0x20>
81120f20:	30000c26 	beq	r6,zero,81120f54 <__umodsi3+0x4c>
81120f24:	28000516 	blt	r5,zero,81120f3c <__umodsi3+0x34>
81120f28:	294b883a 	add	r5,r5,r5
81120f2c:	31bfffc4 	addi	r6,r6,-1
81120f30:	18c7883a 	add	r3,r3,r3
81120f34:	293ffa36 	bltu	r5,r4,81120f20 <__reset+0xfb100f20>
81120f38:	18000626 	beq	r3,zero,81120f54 <__umodsi3+0x4c>
81120f3c:	1806d07a 	srli	r3,r3,1
81120f40:	11400136 	bltu	r2,r5,81120f48 <__umodsi3+0x40>
81120f44:	1145c83a 	sub	r2,r2,r5
81120f48:	280ad07a 	srli	r5,r5,1
81120f4c:	183ffb1e 	bne	r3,zero,81120f3c <__reset+0xfb100f3c>
81120f50:	f800283a 	ret
81120f54:	f800283a 	ret
81120f58:	00c00044 	movi	r3,1
81120f5c:	003ff706 	br	81120f3c <__reset+0xfb100f3c>

81120f60 <__eqsf2>:
81120f60:	2006d5fa 	srli	r3,r4,23
81120f64:	280cd5fa 	srli	r6,r5,23
81120f68:	01c02034 	movhi	r7,128
81120f6c:	39ffffc4 	addi	r7,r7,-1
81120f70:	18c03fcc 	andi	r3,r3,255
81120f74:	02003fc4 	movi	r8,255
81120f78:	3904703a 	and	r2,r7,r4
81120f7c:	31803fcc 	andi	r6,r6,255
81120f80:	394e703a 	and	r7,r7,r5
81120f84:	2008d7fa 	srli	r4,r4,31
81120f88:	280ad7fa 	srli	r5,r5,31
81120f8c:	1a000d26 	beq	r3,r8,81120fc4 <__eqsf2+0x64>
81120f90:	02003fc4 	movi	r8,255
81120f94:	32000826 	beq	r6,r8,81120fb8 <__eqsf2+0x58>
81120f98:	19800226 	beq	r3,r6,81120fa4 <__eqsf2+0x44>
81120f9c:	00800044 	movi	r2,1
81120fa0:	f800283a 	ret
81120fa4:	11fffd1e 	bne	r2,r7,81120f9c <__reset+0xfb100f9c>
81120fa8:	21400926 	beq	r4,r5,81120fd0 <__eqsf2+0x70>
81120fac:	183ffb1e 	bne	r3,zero,81120f9c <__reset+0xfb100f9c>
81120fb0:	1004c03a 	cmpne	r2,r2,zero
81120fb4:	f800283a 	ret
81120fb8:	383ff726 	beq	r7,zero,81120f98 <__reset+0xfb100f98>
81120fbc:	00800044 	movi	r2,1
81120fc0:	f800283a 	ret
81120fc4:	103ff226 	beq	r2,zero,81120f90 <__reset+0xfb100f90>
81120fc8:	00800044 	movi	r2,1
81120fcc:	f800283a 	ret
81120fd0:	0005883a 	mov	r2,zero
81120fd4:	f800283a 	ret

81120fd8 <__gesf2>:
81120fd8:	2004d5fa 	srli	r2,r4,23
81120fdc:	2806d5fa 	srli	r3,r5,23
81120fe0:	01802034 	movhi	r6,128
81120fe4:	31bfffc4 	addi	r6,r6,-1
81120fe8:	10803fcc 	andi	r2,r2,255
81120fec:	01c03fc4 	movi	r7,255
81120ff0:	3110703a 	and	r8,r6,r4
81120ff4:	18c03fcc 	andi	r3,r3,255
81120ff8:	314c703a 	and	r6,r6,r5
81120ffc:	2008d7fa 	srli	r4,r4,31
81121000:	280ad7fa 	srli	r5,r5,31
81121004:	11c01926 	beq	r2,r7,8112106c <__gesf2+0x94>
81121008:	01c03fc4 	movi	r7,255
8112100c:	19c00f26 	beq	r3,r7,8112104c <__gesf2+0x74>
81121010:	1000061e 	bne	r2,zero,8112102c <__gesf2+0x54>
81121014:	400f003a 	cmpeq	r7,r8,zero
81121018:	1800071e 	bne	r3,zero,81121038 <__gesf2+0x60>
8112101c:	3000061e 	bne	r6,zero,81121038 <__gesf2+0x60>
81121020:	0005883a 	mov	r2,zero
81121024:	40000e1e 	bne	r8,zero,81121060 <__gesf2+0x88>
81121028:	f800283a 	ret
8112102c:	18000a1e 	bne	r3,zero,81121058 <__gesf2+0x80>
81121030:	30000b26 	beq	r6,zero,81121060 <__gesf2+0x88>
81121034:	000f883a 	mov	r7,zero
81121038:	29403fcc 	andi	r5,r5,255
8112103c:	38000726 	beq	r7,zero,8112105c <__gesf2+0x84>
81121040:	28000826 	beq	r5,zero,81121064 <__gesf2+0x8c>
81121044:	00800044 	movi	r2,1
81121048:	f800283a 	ret
8112104c:	303ff026 	beq	r6,zero,81121010 <__reset+0xfb101010>
81121050:	00bfff84 	movi	r2,-2
81121054:	f800283a 	ret
81121058:	29403fcc 	andi	r5,r5,255
8112105c:	21400526 	beq	r4,r5,81121074 <__gesf2+0x9c>
81121060:	203ff826 	beq	r4,zero,81121044 <__reset+0xfb101044>
81121064:	00bfffc4 	movi	r2,-1
81121068:	f800283a 	ret
8112106c:	403fe626 	beq	r8,zero,81121008 <__reset+0xfb101008>
81121070:	003ff706 	br	81121050 <__reset+0xfb101050>
81121074:	18bffa16 	blt	r3,r2,81121060 <__reset+0xfb101060>
81121078:	10c00216 	blt	r2,r3,81121084 <__gesf2+0xac>
8112107c:	323ff836 	bltu	r6,r8,81121060 <__reset+0xfb101060>
81121080:	4180022e 	bgeu	r8,r6,8112108c <__gesf2+0xb4>
81121084:	203fef1e 	bne	r4,zero,81121044 <__reset+0xfb101044>
81121088:	003ff606 	br	81121064 <__reset+0xfb101064>
8112108c:	0005883a 	mov	r2,zero
81121090:	f800283a 	ret

81121094 <__lesf2>:
81121094:	2004d5fa 	srli	r2,r4,23
81121098:	280cd5fa 	srli	r6,r5,23
8112109c:	00c02034 	movhi	r3,128
811210a0:	18ffffc4 	addi	r3,r3,-1
811210a4:	10803fcc 	andi	r2,r2,255
811210a8:	01c03fc4 	movi	r7,255
811210ac:	1910703a 	and	r8,r3,r4
811210b0:	31803fcc 	andi	r6,r6,255
811210b4:	1946703a 	and	r3,r3,r5
811210b8:	2008d7fa 	srli	r4,r4,31
811210bc:	280ad7fa 	srli	r5,r5,31
811210c0:	11c01b26 	beq	r2,r7,81121130 <__lesf2+0x9c>
811210c4:	01c03fc4 	movi	r7,255
811210c8:	31c01126 	beq	r6,r7,81121110 <__lesf2+0x7c>
811210cc:	1000071e 	bne	r2,zero,811210ec <__lesf2+0x58>
811210d0:	400f003a 	cmpeq	r7,r8,zero
811210d4:	21003fcc 	andi	r4,r4,255
811210d8:	3000081e 	bne	r6,zero,811210fc <__lesf2+0x68>
811210dc:	1800071e 	bne	r3,zero,811210fc <__lesf2+0x68>
811210e0:	0005883a 	mov	r2,zero
811210e4:	40000f1e 	bne	r8,zero,81121124 <__lesf2+0x90>
811210e8:	f800283a 	ret
811210ec:	21003fcc 	andi	r4,r4,255
811210f0:	30000a1e 	bne	r6,zero,8112111c <__lesf2+0x88>
811210f4:	18000b26 	beq	r3,zero,81121124 <__lesf2+0x90>
811210f8:	000f883a 	mov	r7,zero
811210fc:	29403fcc 	andi	r5,r5,255
81121100:	38000726 	beq	r7,zero,81121120 <__lesf2+0x8c>
81121104:	28000826 	beq	r5,zero,81121128 <__lesf2+0x94>
81121108:	00800044 	movi	r2,1
8112110c:	f800283a 	ret
81121110:	183fee26 	beq	r3,zero,811210cc <__reset+0xfb1010cc>
81121114:	00800084 	movi	r2,2
81121118:	f800283a 	ret
8112111c:	29403fcc 	andi	r5,r5,255
81121120:	21400626 	beq	r4,r5,8112113c <__lesf2+0xa8>
81121124:	203ff826 	beq	r4,zero,81121108 <__reset+0xfb101108>
81121128:	00bfffc4 	movi	r2,-1
8112112c:	f800283a 	ret
81121130:	403fe426 	beq	r8,zero,811210c4 <__reset+0xfb1010c4>
81121134:	00800084 	movi	r2,2
81121138:	f800283a 	ret
8112113c:	30bff916 	blt	r6,r2,81121124 <__reset+0xfb101124>
81121140:	11800216 	blt	r2,r6,8112114c <__lesf2+0xb8>
81121144:	1a3ff736 	bltu	r3,r8,81121124 <__reset+0xfb101124>
81121148:	40c0022e 	bgeu	r8,r3,81121154 <__lesf2+0xc0>
8112114c:	203fee1e 	bne	r4,zero,81121108 <__reset+0xfb101108>
81121150:	003ff506 	br	81121128 <__reset+0xfb101128>
81121154:	0005883a 	mov	r2,zero
81121158:	f800283a 	ret

8112115c <__adddf3>:
8112115c:	02c00434 	movhi	r11,16
81121160:	5affffc4 	addi	r11,r11,-1
81121164:	2806d7fa 	srli	r3,r5,31
81121168:	2ad4703a 	and	r10,r5,r11
8112116c:	3ad2703a 	and	r9,r7,r11
81121170:	3804d53a 	srli	r2,r7,20
81121174:	3018d77a 	srli	r12,r6,29
81121178:	280ad53a 	srli	r5,r5,20
8112117c:	501490fa 	slli	r10,r10,3
81121180:	2010d77a 	srli	r8,r4,29
81121184:	481290fa 	slli	r9,r9,3
81121188:	380ed7fa 	srli	r7,r7,31
8112118c:	defffb04 	addi	sp,sp,-20
81121190:	de00012e 	bgeu	sp,et,81121198 <__adddf3+0x3c>
81121194:	003b68fa 	trap	3
81121198:	dc800215 	stw	r18,8(sp)
8112119c:	dc400115 	stw	r17,4(sp)
811211a0:	dc000015 	stw	r16,0(sp)
811211a4:	dfc00415 	stw	ra,16(sp)
811211a8:	dcc00315 	stw	r19,12(sp)
811211ac:	1c803fcc 	andi	r18,r3,255
811211b0:	2c01ffcc 	andi	r16,r5,2047
811211b4:	5210b03a 	or	r8,r10,r8
811211b8:	202290fa 	slli	r17,r4,3
811211bc:	1081ffcc 	andi	r2,r2,2047
811211c0:	4b12b03a 	or	r9,r9,r12
811211c4:	300c90fa 	slli	r6,r6,3
811211c8:	91c07526 	beq	r18,r7,811213a0 <__adddf3+0x244>
811211cc:	8087c83a 	sub	r3,r16,r2
811211d0:	00c0ab0e 	bge	zero,r3,81121480 <__adddf3+0x324>
811211d4:	10002a1e 	bne	r2,zero,81121280 <__adddf3+0x124>
811211d8:	4984b03a 	or	r2,r9,r6
811211dc:	1000961e 	bne	r2,zero,81121438 <__adddf3+0x2dc>
811211e0:	888001cc 	andi	r2,r17,7
811211e4:	10000726 	beq	r2,zero,81121204 <__adddf3+0xa8>
811211e8:	888003cc 	andi	r2,r17,15
811211ec:	00c00104 	movi	r3,4
811211f0:	10c00426 	beq	r2,r3,81121204 <__adddf3+0xa8>
811211f4:	88c7883a 	add	r3,r17,r3
811211f8:	1c63803a 	cmpltu	r17,r3,r17
811211fc:	4451883a 	add	r8,r8,r17
81121200:	1823883a 	mov	r17,r3
81121204:	4080202c 	andhi	r2,r8,128
81121208:	10005926 	beq	r2,zero,81121370 <__adddf3+0x214>
8112120c:	84000044 	addi	r16,r16,1
81121210:	0081ffc4 	movi	r2,2047
81121214:	8080ba26 	beq	r16,r2,81121500 <__adddf3+0x3a4>
81121218:	00bfe034 	movhi	r2,65408
8112121c:	10bfffc4 	addi	r2,r2,-1
81121220:	4090703a 	and	r8,r8,r2
81121224:	4004977a 	slli	r2,r8,29
81121228:	4010927a 	slli	r8,r8,9
8112122c:	8822d0fa 	srli	r17,r17,3
81121230:	8401ffcc 	andi	r16,r16,2047
81121234:	4010d33a 	srli	r8,r8,12
81121238:	9007883a 	mov	r3,r18
8112123c:	1444b03a 	or	r2,r2,r17
81121240:	8401ffcc 	andi	r16,r16,2047
81121244:	8020953a 	slli	r16,r16,20
81121248:	18c03fcc 	andi	r3,r3,255
8112124c:	01000434 	movhi	r4,16
81121250:	213fffc4 	addi	r4,r4,-1
81121254:	180697fa 	slli	r3,r3,31
81121258:	4110703a 	and	r8,r8,r4
8112125c:	4410b03a 	or	r8,r8,r16
81121260:	40c6b03a 	or	r3,r8,r3
81121264:	dfc00417 	ldw	ra,16(sp)
81121268:	dcc00317 	ldw	r19,12(sp)
8112126c:	dc800217 	ldw	r18,8(sp)
81121270:	dc400117 	ldw	r17,4(sp)
81121274:	dc000017 	ldw	r16,0(sp)
81121278:	dec00504 	addi	sp,sp,20
8112127c:	f800283a 	ret
81121280:	0081ffc4 	movi	r2,2047
81121284:	80bfd626 	beq	r16,r2,811211e0 <__reset+0xfb1011e0>
81121288:	4a402034 	orhi	r9,r9,128
8112128c:	00800e04 	movi	r2,56
81121290:	10c09f16 	blt	r2,r3,81121510 <__adddf3+0x3b4>
81121294:	008007c4 	movi	r2,31
81121298:	10c0c216 	blt	r2,r3,811215a4 <__adddf3+0x448>
8112129c:	00800804 	movi	r2,32
811212a0:	10c5c83a 	sub	r2,r2,r3
811212a4:	488a983a 	sll	r5,r9,r2
811212a8:	30c8d83a 	srl	r4,r6,r3
811212ac:	3084983a 	sll	r2,r6,r2
811212b0:	48c6d83a 	srl	r3,r9,r3
811212b4:	290cb03a 	or	r6,r5,r4
811212b8:	1004c03a 	cmpne	r2,r2,zero
811212bc:	308cb03a 	or	r6,r6,r2
811212c0:	898dc83a 	sub	r6,r17,r6
811212c4:	89a3803a 	cmpltu	r17,r17,r6
811212c8:	40d1c83a 	sub	r8,r8,r3
811212cc:	4451c83a 	sub	r8,r8,r17
811212d0:	3023883a 	mov	r17,r6
811212d4:	4080202c 	andhi	r2,r8,128
811212d8:	10002326 	beq	r2,zero,81121368 <__adddf3+0x20c>
811212dc:	04c02034 	movhi	r19,128
811212e0:	9cffffc4 	addi	r19,r19,-1
811212e4:	44e6703a 	and	r19,r8,r19
811212e8:	98007626 	beq	r19,zero,811214c4 <__adddf3+0x368>
811212ec:	9809883a 	mov	r4,r19
811212f0:	110d7200 	call	8110d720 <__clzsi2>
811212f4:	10fffe04 	addi	r3,r2,-8
811212f8:	010007c4 	movi	r4,31
811212fc:	20c07716 	blt	r4,r3,811214dc <__adddf3+0x380>
81121300:	00800804 	movi	r2,32
81121304:	10c5c83a 	sub	r2,r2,r3
81121308:	8884d83a 	srl	r2,r17,r2
8112130c:	98d0983a 	sll	r8,r19,r3
81121310:	88e2983a 	sll	r17,r17,r3
81121314:	1204b03a 	or	r2,r2,r8
81121318:	1c007416 	blt	r3,r16,811214ec <__adddf3+0x390>
8112131c:	1c21c83a 	sub	r16,r3,r16
81121320:	82000044 	addi	r8,r16,1
81121324:	00c007c4 	movi	r3,31
81121328:	1a009116 	blt	r3,r8,81121570 <__adddf3+0x414>
8112132c:	00c00804 	movi	r3,32
81121330:	1a07c83a 	sub	r3,r3,r8
81121334:	8a08d83a 	srl	r4,r17,r8
81121338:	88e2983a 	sll	r17,r17,r3
8112133c:	10c6983a 	sll	r3,r2,r3
81121340:	1210d83a 	srl	r8,r2,r8
81121344:	8804c03a 	cmpne	r2,r17,zero
81121348:	1906b03a 	or	r3,r3,r4
8112134c:	18a2b03a 	or	r17,r3,r2
81121350:	0021883a 	mov	r16,zero
81121354:	003fa206 	br	811211e0 <__reset+0xfb1011e0>
81121358:	1890b03a 	or	r8,r3,r2
8112135c:	40017d26 	beq	r8,zero,81121954 <__adddf3+0x7f8>
81121360:	1011883a 	mov	r8,r2
81121364:	1823883a 	mov	r17,r3
81121368:	888001cc 	andi	r2,r17,7
8112136c:	103f9e1e 	bne	r2,zero,811211e8 <__reset+0xfb1011e8>
81121370:	4004977a 	slli	r2,r8,29
81121374:	8822d0fa 	srli	r17,r17,3
81121378:	4010d0fa 	srli	r8,r8,3
8112137c:	9007883a 	mov	r3,r18
81121380:	1444b03a 	or	r2,r2,r17
81121384:	0101ffc4 	movi	r4,2047
81121388:	81002426 	beq	r16,r4,8112141c <__adddf3+0x2c0>
8112138c:	8120703a 	and	r16,r16,r4
81121390:	01000434 	movhi	r4,16
81121394:	213fffc4 	addi	r4,r4,-1
81121398:	4110703a 	and	r8,r8,r4
8112139c:	003fa806 	br	81121240 <__reset+0xfb101240>
811213a0:	8089c83a 	sub	r4,r16,r2
811213a4:	01005e0e 	bge	zero,r4,81121520 <__adddf3+0x3c4>
811213a8:	10002b26 	beq	r2,zero,81121458 <__adddf3+0x2fc>
811213ac:	0081ffc4 	movi	r2,2047
811213b0:	80bf8b26 	beq	r16,r2,811211e0 <__reset+0xfb1011e0>
811213b4:	4a402034 	orhi	r9,r9,128
811213b8:	00800e04 	movi	r2,56
811213bc:	1100a40e 	bge	r2,r4,81121650 <__adddf3+0x4f4>
811213c0:	498cb03a 	or	r6,r9,r6
811213c4:	300ac03a 	cmpne	r5,r6,zero
811213c8:	0013883a 	mov	r9,zero
811213cc:	2c4b883a 	add	r5,r5,r17
811213d0:	2c63803a 	cmpltu	r17,r5,r17
811213d4:	4a11883a 	add	r8,r9,r8
811213d8:	8a11883a 	add	r8,r17,r8
811213dc:	2823883a 	mov	r17,r5
811213e0:	4080202c 	andhi	r2,r8,128
811213e4:	103fe026 	beq	r2,zero,81121368 <__reset+0xfb101368>
811213e8:	84000044 	addi	r16,r16,1
811213ec:	0081ffc4 	movi	r2,2047
811213f0:	8080d226 	beq	r16,r2,8112173c <__adddf3+0x5e0>
811213f4:	00bfe034 	movhi	r2,65408
811213f8:	10bfffc4 	addi	r2,r2,-1
811213fc:	4090703a 	and	r8,r8,r2
81121400:	880ad07a 	srli	r5,r17,1
81121404:	400897fa 	slli	r4,r8,31
81121408:	88c0004c 	andi	r3,r17,1
8112140c:	28e2b03a 	or	r17,r5,r3
81121410:	4010d07a 	srli	r8,r8,1
81121414:	2462b03a 	or	r17,r4,r17
81121418:	003f7106 	br	811211e0 <__reset+0xfb1011e0>
8112141c:	4088b03a 	or	r4,r8,r2
81121420:	20014526 	beq	r4,zero,81121938 <__adddf3+0x7dc>
81121424:	01000434 	movhi	r4,16
81121428:	42000234 	orhi	r8,r8,8
8112142c:	213fffc4 	addi	r4,r4,-1
81121430:	4110703a 	and	r8,r8,r4
81121434:	003f8206 	br	81121240 <__reset+0xfb101240>
81121438:	18ffffc4 	addi	r3,r3,-1
8112143c:	1800491e 	bne	r3,zero,81121564 <__adddf3+0x408>
81121440:	898bc83a 	sub	r5,r17,r6
81121444:	8963803a 	cmpltu	r17,r17,r5
81121448:	4251c83a 	sub	r8,r8,r9
8112144c:	4451c83a 	sub	r8,r8,r17
81121450:	2823883a 	mov	r17,r5
81121454:	003f9f06 	br	811212d4 <__reset+0xfb1012d4>
81121458:	4984b03a 	or	r2,r9,r6
8112145c:	103f6026 	beq	r2,zero,811211e0 <__reset+0xfb1011e0>
81121460:	213fffc4 	addi	r4,r4,-1
81121464:	2000931e 	bne	r4,zero,811216b4 <__adddf3+0x558>
81121468:	898d883a 	add	r6,r17,r6
8112146c:	3463803a 	cmpltu	r17,r6,r17
81121470:	4251883a 	add	r8,r8,r9
81121474:	8a11883a 	add	r8,r17,r8
81121478:	3023883a 	mov	r17,r6
8112147c:	003fd806 	br	811213e0 <__reset+0xfb1013e0>
81121480:	1800541e 	bne	r3,zero,811215d4 <__adddf3+0x478>
81121484:	80800044 	addi	r2,r16,1
81121488:	1081ffcc 	andi	r2,r2,2047
8112148c:	00c00044 	movi	r3,1
81121490:	1880a00e 	bge	r3,r2,81121714 <__adddf3+0x5b8>
81121494:	8989c83a 	sub	r4,r17,r6
81121498:	8905803a 	cmpltu	r2,r17,r4
8112149c:	4267c83a 	sub	r19,r8,r9
811214a0:	98a7c83a 	sub	r19,r19,r2
811214a4:	9880202c 	andhi	r2,r19,128
811214a8:	10006326 	beq	r2,zero,81121638 <__adddf3+0x4dc>
811214ac:	3463c83a 	sub	r17,r6,r17
811214b0:	4a07c83a 	sub	r3,r9,r8
811214b4:	344d803a 	cmpltu	r6,r6,r17
811214b8:	19a7c83a 	sub	r19,r3,r6
811214bc:	3825883a 	mov	r18,r7
811214c0:	983f8a1e 	bne	r19,zero,811212ec <__reset+0xfb1012ec>
811214c4:	8809883a 	mov	r4,r17
811214c8:	110d7200 	call	8110d720 <__clzsi2>
811214cc:	10800804 	addi	r2,r2,32
811214d0:	10fffe04 	addi	r3,r2,-8
811214d4:	010007c4 	movi	r4,31
811214d8:	20ff890e 	bge	r4,r3,81121300 <__reset+0xfb101300>
811214dc:	10bff604 	addi	r2,r2,-40
811214e0:	8884983a 	sll	r2,r17,r2
811214e4:	0023883a 	mov	r17,zero
811214e8:	1c3f8c0e 	bge	r3,r16,8112131c <__reset+0xfb10131c>
811214ec:	023fe034 	movhi	r8,65408
811214f0:	423fffc4 	addi	r8,r8,-1
811214f4:	80e1c83a 	sub	r16,r16,r3
811214f8:	1210703a 	and	r8,r2,r8
811214fc:	003f3806 	br	811211e0 <__reset+0xfb1011e0>
81121500:	9007883a 	mov	r3,r18
81121504:	0011883a 	mov	r8,zero
81121508:	0005883a 	mov	r2,zero
8112150c:	003f4c06 	br	81121240 <__reset+0xfb101240>
81121510:	498cb03a 	or	r6,r9,r6
81121514:	300cc03a 	cmpne	r6,r6,zero
81121518:	0007883a 	mov	r3,zero
8112151c:	003f6806 	br	811212c0 <__reset+0xfb1012c0>
81121520:	20009c1e 	bne	r4,zero,81121794 <__adddf3+0x638>
81121524:	80800044 	addi	r2,r16,1
81121528:	1141ffcc 	andi	r5,r2,2047
8112152c:	01000044 	movi	r4,1
81121530:	2140670e 	bge	r4,r5,811216d0 <__adddf3+0x574>
81121534:	0101ffc4 	movi	r4,2047
81121538:	11007f26 	beq	r2,r4,81121738 <__adddf3+0x5dc>
8112153c:	898d883a 	add	r6,r17,r6
81121540:	4247883a 	add	r3,r8,r9
81121544:	3451803a 	cmpltu	r8,r6,r17
81121548:	40d1883a 	add	r8,r8,r3
8112154c:	402297fa 	slli	r17,r8,31
81121550:	300cd07a 	srli	r6,r6,1
81121554:	4010d07a 	srli	r8,r8,1
81121558:	1021883a 	mov	r16,r2
8112155c:	89a2b03a 	or	r17,r17,r6
81121560:	003f1f06 	br	811211e0 <__reset+0xfb1011e0>
81121564:	0081ffc4 	movi	r2,2047
81121568:	80bf481e 	bne	r16,r2,8112128c <__reset+0xfb10128c>
8112156c:	003f1c06 	br	811211e0 <__reset+0xfb1011e0>
81121570:	843ff844 	addi	r16,r16,-31
81121574:	01000804 	movi	r4,32
81121578:	1406d83a 	srl	r3,r2,r16
8112157c:	41005026 	beq	r8,r4,811216c0 <__adddf3+0x564>
81121580:	01001004 	movi	r4,64
81121584:	2211c83a 	sub	r8,r4,r8
81121588:	1204983a 	sll	r2,r2,r8
8112158c:	88a2b03a 	or	r17,r17,r2
81121590:	8822c03a 	cmpne	r17,r17,zero
81121594:	1c62b03a 	or	r17,r3,r17
81121598:	0011883a 	mov	r8,zero
8112159c:	0021883a 	mov	r16,zero
811215a0:	003f7106 	br	81121368 <__reset+0xfb101368>
811215a4:	193ff804 	addi	r4,r3,-32
811215a8:	00800804 	movi	r2,32
811215ac:	4908d83a 	srl	r4,r9,r4
811215b0:	18804526 	beq	r3,r2,811216c8 <__adddf3+0x56c>
811215b4:	00801004 	movi	r2,64
811215b8:	10c5c83a 	sub	r2,r2,r3
811215bc:	4886983a 	sll	r3,r9,r2
811215c0:	198cb03a 	or	r6,r3,r6
811215c4:	300cc03a 	cmpne	r6,r6,zero
811215c8:	218cb03a 	or	r6,r4,r6
811215cc:	0007883a 	mov	r3,zero
811215d0:	003f3b06 	br	811212c0 <__reset+0xfb1012c0>
811215d4:	80002a26 	beq	r16,zero,81121680 <__adddf3+0x524>
811215d8:	0101ffc4 	movi	r4,2047
811215dc:	11006826 	beq	r2,r4,81121780 <__adddf3+0x624>
811215e0:	00c7c83a 	sub	r3,zero,r3
811215e4:	42002034 	orhi	r8,r8,128
811215e8:	01000e04 	movi	r4,56
811215ec:	20c07c16 	blt	r4,r3,811217e0 <__adddf3+0x684>
811215f0:	010007c4 	movi	r4,31
811215f4:	20c0da16 	blt	r4,r3,81121960 <__adddf3+0x804>
811215f8:	01000804 	movi	r4,32
811215fc:	20c9c83a 	sub	r4,r4,r3
81121600:	4114983a 	sll	r10,r8,r4
81121604:	88cad83a 	srl	r5,r17,r3
81121608:	8908983a 	sll	r4,r17,r4
8112160c:	40c6d83a 	srl	r3,r8,r3
81121610:	5162b03a 	or	r17,r10,r5
81121614:	2008c03a 	cmpne	r4,r4,zero
81121618:	8922b03a 	or	r17,r17,r4
8112161c:	3463c83a 	sub	r17,r6,r17
81121620:	48c7c83a 	sub	r3,r9,r3
81121624:	344d803a 	cmpltu	r6,r6,r17
81121628:	1991c83a 	sub	r8,r3,r6
8112162c:	1021883a 	mov	r16,r2
81121630:	3825883a 	mov	r18,r7
81121634:	003f2706 	br	811212d4 <__reset+0xfb1012d4>
81121638:	24d0b03a 	or	r8,r4,r19
8112163c:	40001b1e 	bne	r8,zero,811216ac <__adddf3+0x550>
81121640:	0005883a 	mov	r2,zero
81121644:	0007883a 	mov	r3,zero
81121648:	0021883a 	mov	r16,zero
8112164c:	003f4d06 	br	81121384 <__reset+0xfb101384>
81121650:	008007c4 	movi	r2,31
81121654:	11003c16 	blt	r2,r4,81121748 <__adddf3+0x5ec>
81121658:	00800804 	movi	r2,32
8112165c:	1105c83a 	sub	r2,r2,r4
81121660:	488e983a 	sll	r7,r9,r2
81121664:	310ad83a 	srl	r5,r6,r4
81121668:	3084983a 	sll	r2,r6,r2
8112166c:	4912d83a 	srl	r9,r9,r4
81121670:	394ab03a 	or	r5,r7,r5
81121674:	1004c03a 	cmpne	r2,r2,zero
81121678:	288ab03a 	or	r5,r5,r2
8112167c:	003f5306 	br	811213cc <__reset+0xfb1013cc>
81121680:	4448b03a 	or	r4,r8,r17
81121684:	20003e26 	beq	r4,zero,81121780 <__adddf3+0x624>
81121688:	00c6303a 	nor	r3,zero,r3
8112168c:	18003a1e 	bne	r3,zero,81121778 <__adddf3+0x61c>
81121690:	3463c83a 	sub	r17,r6,r17
81121694:	4a07c83a 	sub	r3,r9,r8
81121698:	344d803a 	cmpltu	r6,r6,r17
8112169c:	1991c83a 	sub	r8,r3,r6
811216a0:	1021883a 	mov	r16,r2
811216a4:	3825883a 	mov	r18,r7
811216a8:	003f0a06 	br	811212d4 <__reset+0xfb1012d4>
811216ac:	2023883a 	mov	r17,r4
811216b0:	003f0d06 	br	811212e8 <__reset+0xfb1012e8>
811216b4:	0081ffc4 	movi	r2,2047
811216b8:	80bf3f1e 	bne	r16,r2,811213b8 <__reset+0xfb1013b8>
811216bc:	003ec806 	br	811211e0 <__reset+0xfb1011e0>
811216c0:	0005883a 	mov	r2,zero
811216c4:	003fb106 	br	8112158c <__reset+0xfb10158c>
811216c8:	0007883a 	mov	r3,zero
811216cc:	003fbc06 	br	811215c0 <__reset+0xfb1015c0>
811216d0:	4444b03a 	or	r2,r8,r17
811216d4:	8000871e 	bne	r16,zero,811218f4 <__adddf3+0x798>
811216d8:	1000ba26 	beq	r2,zero,811219c4 <__adddf3+0x868>
811216dc:	4984b03a 	or	r2,r9,r6
811216e0:	103ebf26 	beq	r2,zero,811211e0 <__reset+0xfb1011e0>
811216e4:	8985883a 	add	r2,r17,r6
811216e8:	4247883a 	add	r3,r8,r9
811216ec:	1451803a 	cmpltu	r8,r2,r17
811216f0:	40d1883a 	add	r8,r8,r3
811216f4:	40c0202c 	andhi	r3,r8,128
811216f8:	1023883a 	mov	r17,r2
811216fc:	183f1a26 	beq	r3,zero,81121368 <__reset+0xfb101368>
81121700:	00bfe034 	movhi	r2,65408
81121704:	10bfffc4 	addi	r2,r2,-1
81121708:	2021883a 	mov	r16,r4
8112170c:	4090703a 	and	r8,r8,r2
81121710:	003eb306 	br	811211e0 <__reset+0xfb1011e0>
81121714:	4444b03a 	or	r2,r8,r17
81121718:	8000291e 	bne	r16,zero,811217c0 <__adddf3+0x664>
8112171c:	10004b1e 	bne	r2,zero,8112184c <__adddf3+0x6f0>
81121720:	4990b03a 	or	r8,r9,r6
81121724:	40008b26 	beq	r8,zero,81121954 <__adddf3+0x7f8>
81121728:	4811883a 	mov	r8,r9
8112172c:	3023883a 	mov	r17,r6
81121730:	3825883a 	mov	r18,r7
81121734:	003eaa06 	br	811211e0 <__reset+0xfb1011e0>
81121738:	1021883a 	mov	r16,r2
8112173c:	0011883a 	mov	r8,zero
81121740:	0005883a 	mov	r2,zero
81121744:	003f0f06 	br	81121384 <__reset+0xfb101384>
81121748:	217ff804 	addi	r5,r4,-32
8112174c:	00800804 	movi	r2,32
81121750:	494ad83a 	srl	r5,r9,r5
81121754:	20807d26 	beq	r4,r2,8112194c <__adddf3+0x7f0>
81121758:	00801004 	movi	r2,64
8112175c:	1109c83a 	sub	r4,r2,r4
81121760:	4912983a 	sll	r9,r9,r4
81121764:	498cb03a 	or	r6,r9,r6
81121768:	300cc03a 	cmpne	r6,r6,zero
8112176c:	298ab03a 	or	r5,r5,r6
81121770:	0013883a 	mov	r9,zero
81121774:	003f1506 	br	811213cc <__reset+0xfb1013cc>
81121778:	0101ffc4 	movi	r4,2047
8112177c:	113f9a1e 	bne	r2,r4,811215e8 <__reset+0xfb1015e8>
81121780:	4811883a 	mov	r8,r9
81121784:	3023883a 	mov	r17,r6
81121788:	1021883a 	mov	r16,r2
8112178c:	3825883a 	mov	r18,r7
81121790:	003e9306 	br	811211e0 <__reset+0xfb1011e0>
81121794:	8000161e 	bne	r16,zero,811217f0 <__adddf3+0x694>
81121798:	444ab03a 	or	r5,r8,r17
8112179c:	28005126 	beq	r5,zero,811218e4 <__adddf3+0x788>
811217a0:	0108303a 	nor	r4,zero,r4
811217a4:	20004d1e 	bne	r4,zero,811218dc <__adddf3+0x780>
811217a8:	89a3883a 	add	r17,r17,r6
811217ac:	4253883a 	add	r9,r8,r9
811217b0:	898d803a 	cmpltu	r6,r17,r6
811217b4:	3251883a 	add	r8,r6,r9
811217b8:	1021883a 	mov	r16,r2
811217bc:	003f0806 	br	811213e0 <__reset+0xfb1013e0>
811217c0:	1000301e 	bne	r2,zero,81121884 <__adddf3+0x728>
811217c4:	4984b03a 	or	r2,r9,r6
811217c8:	10007126 	beq	r2,zero,81121990 <__adddf3+0x834>
811217cc:	4811883a 	mov	r8,r9
811217d0:	3023883a 	mov	r17,r6
811217d4:	3825883a 	mov	r18,r7
811217d8:	0401ffc4 	movi	r16,2047
811217dc:	003e8006 	br	811211e0 <__reset+0xfb1011e0>
811217e0:	4462b03a 	or	r17,r8,r17
811217e4:	8822c03a 	cmpne	r17,r17,zero
811217e8:	0007883a 	mov	r3,zero
811217ec:	003f8b06 	br	8112161c <__reset+0xfb10161c>
811217f0:	0141ffc4 	movi	r5,2047
811217f4:	11403b26 	beq	r2,r5,811218e4 <__adddf3+0x788>
811217f8:	0109c83a 	sub	r4,zero,r4
811217fc:	42002034 	orhi	r8,r8,128
81121800:	01400e04 	movi	r5,56
81121804:	29006716 	blt	r5,r4,811219a4 <__adddf3+0x848>
81121808:	014007c4 	movi	r5,31
8112180c:	29007016 	blt	r5,r4,811219d0 <__adddf3+0x874>
81121810:	01400804 	movi	r5,32
81121814:	290bc83a 	sub	r5,r5,r4
81121818:	4154983a 	sll	r10,r8,r5
8112181c:	890ed83a 	srl	r7,r17,r4
81121820:	894a983a 	sll	r5,r17,r5
81121824:	4108d83a 	srl	r4,r8,r4
81121828:	51e2b03a 	or	r17,r10,r7
8112182c:	280ac03a 	cmpne	r5,r5,zero
81121830:	8962b03a 	or	r17,r17,r5
81121834:	89a3883a 	add	r17,r17,r6
81121838:	2253883a 	add	r9,r4,r9
8112183c:	898d803a 	cmpltu	r6,r17,r6
81121840:	3251883a 	add	r8,r6,r9
81121844:	1021883a 	mov	r16,r2
81121848:	003ee506 	br	811213e0 <__reset+0xfb1013e0>
8112184c:	4984b03a 	or	r2,r9,r6
81121850:	103e6326 	beq	r2,zero,811211e0 <__reset+0xfb1011e0>
81121854:	8987c83a 	sub	r3,r17,r6
81121858:	88c9803a 	cmpltu	r4,r17,r3
8112185c:	4245c83a 	sub	r2,r8,r9
81121860:	1105c83a 	sub	r2,r2,r4
81121864:	1100202c 	andhi	r4,r2,128
81121868:	203ebb26 	beq	r4,zero,81121358 <__reset+0xfb101358>
8112186c:	3463c83a 	sub	r17,r6,r17
81121870:	4a07c83a 	sub	r3,r9,r8
81121874:	344d803a 	cmpltu	r6,r6,r17
81121878:	1991c83a 	sub	r8,r3,r6
8112187c:	3825883a 	mov	r18,r7
81121880:	003e5706 	br	811211e0 <__reset+0xfb1011e0>
81121884:	4984b03a 	or	r2,r9,r6
81121888:	10002e26 	beq	r2,zero,81121944 <__adddf3+0x7e8>
8112188c:	4004d0fa 	srli	r2,r8,3
81121890:	8822d0fa 	srli	r17,r17,3
81121894:	4010977a 	slli	r8,r8,29
81121898:	10c0022c 	andhi	r3,r2,8
8112189c:	4462b03a 	or	r17,r8,r17
811218a0:	18000826 	beq	r3,zero,811218c4 <__adddf3+0x768>
811218a4:	4808d0fa 	srli	r4,r9,3
811218a8:	20c0022c 	andhi	r3,r4,8
811218ac:	1800051e 	bne	r3,zero,811218c4 <__adddf3+0x768>
811218b0:	300cd0fa 	srli	r6,r6,3
811218b4:	4806977a 	slli	r3,r9,29
811218b8:	2005883a 	mov	r2,r4
811218bc:	3825883a 	mov	r18,r7
811218c0:	19a2b03a 	or	r17,r3,r6
811218c4:	8810d77a 	srli	r8,r17,29
811218c8:	100490fa 	slli	r2,r2,3
811218cc:	882290fa 	slli	r17,r17,3
811218d0:	0401ffc4 	movi	r16,2047
811218d4:	4090b03a 	or	r8,r8,r2
811218d8:	003e4106 	br	811211e0 <__reset+0xfb1011e0>
811218dc:	0141ffc4 	movi	r5,2047
811218e0:	117fc71e 	bne	r2,r5,81121800 <__reset+0xfb101800>
811218e4:	4811883a 	mov	r8,r9
811218e8:	3023883a 	mov	r17,r6
811218ec:	1021883a 	mov	r16,r2
811218f0:	003e3b06 	br	811211e0 <__reset+0xfb1011e0>
811218f4:	10002f26 	beq	r2,zero,811219b4 <__adddf3+0x858>
811218f8:	4984b03a 	or	r2,r9,r6
811218fc:	10001126 	beq	r2,zero,81121944 <__adddf3+0x7e8>
81121900:	4004d0fa 	srli	r2,r8,3
81121904:	8822d0fa 	srli	r17,r17,3
81121908:	4010977a 	slli	r8,r8,29
8112190c:	10c0022c 	andhi	r3,r2,8
81121910:	4462b03a 	or	r17,r8,r17
81121914:	183feb26 	beq	r3,zero,811218c4 <__reset+0xfb1018c4>
81121918:	4808d0fa 	srli	r4,r9,3
8112191c:	20c0022c 	andhi	r3,r4,8
81121920:	183fe81e 	bne	r3,zero,811218c4 <__reset+0xfb1018c4>
81121924:	300cd0fa 	srli	r6,r6,3
81121928:	4806977a 	slli	r3,r9,29
8112192c:	2005883a 	mov	r2,r4
81121930:	19a2b03a 	or	r17,r3,r6
81121934:	003fe306 	br	811218c4 <__reset+0xfb1018c4>
81121938:	0011883a 	mov	r8,zero
8112193c:	0005883a 	mov	r2,zero
81121940:	003e3f06 	br	81121240 <__reset+0xfb101240>
81121944:	0401ffc4 	movi	r16,2047
81121948:	003e2506 	br	811211e0 <__reset+0xfb1011e0>
8112194c:	0013883a 	mov	r9,zero
81121950:	003f8406 	br	81121764 <__reset+0xfb101764>
81121954:	0005883a 	mov	r2,zero
81121958:	0007883a 	mov	r3,zero
8112195c:	003e8906 	br	81121384 <__reset+0xfb101384>
81121960:	197ff804 	addi	r5,r3,-32
81121964:	01000804 	movi	r4,32
81121968:	414ad83a 	srl	r5,r8,r5
8112196c:	19002426 	beq	r3,r4,81121a00 <__adddf3+0x8a4>
81121970:	01001004 	movi	r4,64
81121974:	20c7c83a 	sub	r3,r4,r3
81121978:	40c6983a 	sll	r3,r8,r3
8112197c:	1c46b03a 	or	r3,r3,r17
81121980:	1806c03a 	cmpne	r3,r3,zero
81121984:	28e2b03a 	or	r17,r5,r3
81121988:	0007883a 	mov	r3,zero
8112198c:	003f2306 	br	8112161c <__reset+0xfb10161c>
81121990:	0007883a 	mov	r3,zero
81121994:	5811883a 	mov	r8,r11
81121998:	00bfffc4 	movi	r2,-1
8112199c:	0401ffc4 	movi	r16,2047
811219a0:	003e7806 	br	81121384 <__reset+0xfb101384>
811219a4:	4462b03a 	or	r17,r8,r17
811219a8:	8822c03a 	cmpne	r17,r17,zero
811219ac:	0009883a 	mov	r4,zero
811219b0:	003fa006 	br	81121834 <__reset+0xfb101834>
811219b4:	4811883a 	mov	r8,r9
811219b8:	3023883a 	mov	r17,r6
811219bc:	0401ffc4 	movi	r16,2047
811219c0:	003e0706 	br	811211e0 <__reset+0xfb1011e0>
811219c4:	4811883a 	mov	r8,r9
811219c8:	3023883a 	mov	r17,r6
811219cc:	003e0406 	br	811211e0 <__reset+0xfb1011e0>
811219d0:	21fff804 	addi	r7,r4,-32
811219d4:	01400804 	movi	r5,32
811219d8:	41ced83a 	srl	r7,r8,r7
811219dc:	21400a26 	beq	r4,r5,81121a08 <__adddf3+0x8ac>
811219e0:	01401004 	movi	r5,64
811219e4:	2909c83a 	sub	r4,r5,r4
811219e8:	4108983a 	sll	r4,r8,r4
811219ec:	2448b03a 	or	r4,r4,r17
811219f0:	2008c03a 	cmpne	r4,r4,zero
811219f4:	3922b03a 	or	r17,r7,r4
811219f8:	0009883a 	mov	r4,zero
811219fc:	003f8d06 	br	81121834 <__reset+0xfb101834>
81121a00:	0007883a 	mov	r3,zero
81121a04:	003fdd06 	br	8112197c <__reset+0xfb10197c>
81121a08:	0009883a 	mov	r4,zero
81121a0c:	003ff706 	br	811219ec <__reset+0xfb1019ec>

81121a10 <__divdf3>:
81121a10:	defff204 	addi	sp,sp,-56
81121a14:	de00012e 	bgeu	sp,et,81121a1c <__divdf3+0xc>
81121a18:	003b68fa 	trap	3
81121a1c:	dd400915 	stw	r21,36(sp)
81121a20:	282ad53a 	srli	r21,r5,20
81121a24:	dd000815 	stw	r20,32(sp)
81121a28:	2828d7fa 	srli	r20,r5,31
81121a2c:	dc000415 	stw	r16,16(sp)
81121a30:	04000434 	movhi	r16,16
81121a34:	df000c15 	stw	fp,48(sp)
81121a38:	843fffc4 	addi	r16,r16,-1
81121a3c:	dfc00d15 	stw	ra,52(sp)
81121a40:	ddc00b15 	stw	r23,44(sp)
81121a44:	dd800a15 	stw	r22,40(sp)
81121a48:	dcc00715 	stw	r19,28(sp)
81121a4c:	dc800615 	stw	r18,24(sp)
81121a50:	dc400515 	stw	r17,20(sp)
81121a54:	ad41ffcc 	andi	r21,r21,2047
81121a58:	2c20703a 	and	r16,r5,r16
81121a5c:	a7003fcc 	andi	fp,r20,255
81121a60:	a8006126 	beq	r21,zero,81121be8 <__divdf3+0x1d8>
81121a64:	0081ffc4 	movi	r2,2047
81121a68:	2025883a 	mov	r18,r4
81121a6c:	a8803726 	beq	r21,r2,81121b4c <__divdf3+0x13c>
81121a70:	80800434 	orhi	r2,r16,16
81121a74:	100490fa 	slli	r2,r2,3
81121a78:	2020d77a 	srli	r16,r4,29
81121a7c:	202490fa 	slli	r18,r4,3
81121a80:	ad7f0044 	addi	r21,r21,-1023
81121a84:	80a0b03a 	or	r16,r16,r2
81121a88:	0027883a 	mov	r19,zero
81121a8c:	0013883a 	mov	r9,zero
81121a90:	3804d53a 	srli	r2,r7,20
81121a94:	382cd7fa 	srli	r22,r7,31
81121a98:	04400434 	movhi	r17,16
81121a9c:	8c7fffc4 	addi	r17,r17,-1
81121aa0:	1081ffcc 	andi	r2,r2,2047
81121aa4:	3011883a 	mov	r8,r6
81121aa8:	3c62703a 	and	r17,r7,r17
81121aac:	b5c03fcc 	andi	r23,r22,255
81121ab0:	10006c26 	beq	r2,zero,81121c64 <__divdf3+0x254>
81121ab4:	00c1ffc4 	movi	r3,2047
81121ab8:	10c06426 	beq	r2,r3,81121c4c <__divdf3+0x23c>
81121abc:	88c00434 	orhi	r3,r17,16
81121ac0:	180690fa 	slli	r3,r3,3
81121ac4:	3022d77a 	srli	r17,r6,29
81121ac8:	301090fa 	slli	r8,r6,3
81121acc:	10bf0044 	addi	r2,r2,-1023
81121ad0:	88e2b03a 	or	r17,r17,r3
81121ad4:	000f883a 	mov	r7,zero
81121ad8:	a58cf03a 	xor	r6,r20,r22
81121adc:	3cc8b03a 	or	r4,r7,r19
81121ae0:	a8abc83a 	sub	r21,r21,r2
81121ae4:	008003c4 	movi	r2,15
81121ae8:	3007883a 	mov	r3,r6
81121aec:	34c03fcc 	andi	r19,r6,255
81121af0:	11009036 	bltu	r2,r4,81121d34 <__divdf3+0x324>
81121af4:	200890ba 	slli	r4,r4,2
81121af8:	00a044b4 	movhi	r2,33042
81121afc:	1086c304 	addi	r2,r2,6924
81121b00:	2089883a 	add	r4,r4,r2
81121b04:	20800017 	ldw	r2,0(r4)
81121b08:	1000683a 	jmp	r2
81121b0c:	81121d34 	orhi	r4,r16,18548
81121b10:	81121b84 	addi	r4,r16,18542
81121b14:	81121d24 	muli	r4,r16,18548
81121b18:	81121b78 	rdprs	r4,r16,18541
81121b1c:	81121d24 	muli	r4,r16,18548
81121b20:	81121cf8 	rdprs	r4,r16,18547
81121b24:	81121d24 	muli	r4,r16,18548
81121b28:	81121b78 	rdprs	r4,r16,18541
81121b2c:	81121b84 	addi	r4,r16,18542
81121b30:	81121b84 	addi	r4,r16,18542
81121b34:	81121cf8 	rdprs	r4,r16,18547
81121b38:	81121b78 	rdprs	r4,r16,18541
81121b3c:	81121b68 	cmpgeui	r4,r16,18541
81121b40:	81121b68 	cmpgeui	r4,r16,18541
81121b44:	81121b68 	cmpgeui	r4,r16,18541
81121b48:	81122018 	cmpnei	r4,r16,18560
81121b4c:	2404b03a 	or	r2,r4,r16
81121b50:	1000661e 	bne	r2,zero,81121cec <__divdf3+0x2dc>
81121b54:	04c00204 	movi	r19,8
81121b58:	0021883a 	mov	r16,zero
81121b5c:	0025883a 	mov	r18,zero
81121b60:	02400084 	movi	r9,2
81121b64:	003fca06 	br	81121a90 <__reset+0xfb101a90>
81121b68:	8023883a 	mov	r17,r16
81121b6c:	9011883a 	mov	r8,r18
81121b70:	e02f883a 	mov	r23,fp
81121b74:	480f883a 	mov	r7,r9
81121b78:	00800084 	movi	r2,2
81121b7c:	3881311e 	bne	r7,r2,81122044 <__divdf3+0x634>
81121b80:	b827883a 	mov	r19,r23
81121b84:	98c0004c 	andi	r3,r19,1
81121b88:	0081ffc4 	movi	r2,2047
81121b8c:	000b883a 	mov	r5,zero
81121b90:	0025883a 	mov	r18,zero
81121b94:	1004953a 	slli	r2,r2,20
81121b98:	18c03fcc 	andi	r3,r3,255
81121b9c:	04400434 	movhi	r17,16
81121ba0:	8c7fffc4 	addi	r17,r17,-1
81121ba4:	180697fa 	slli	r3,r3,31
81121ba8:	2c4a703a 	and	r5,r5,r17
81121bac:	288ab03a 	or	r5,r5,r2
81121bb0:	28c6b03a 	or	r3,r5,r3
81121bb4:	9005883a 	mov	r2,r18
81121bb8:	dfc00d17 	ldw	ra,52(sp)
81121bbc:	df000c17 	ldw	fp,48(sp)
81121bc0:	ddc00b17 	ldw	r23,44(sp)
81121bc4:	dd800a17 	ldw	r22,40(sp)
81121bc8:	dd400917 	ldw	r21,36(sp)
81121bcc:	dd000817 	ldw	r20,32(sp)
81121bd0:	dcc00717 	ldw	r19,28(sp)
81121bd4:	dc800617 	ldw	r18,24(sp)
81121bd8:	dc400517 	ldw	r17,20(sp)
81121bdc:	dc000417 	ldw	r16,16(sp)
81121be0:	dec00e04 	addi	sp,sp,56
81121be4:	f800283a 	ret
81121be8:	2404b03a 	or	r2,r4,r16
81121bec:	2027883a 	mov	r19,r4
81121bf0:	10003926 	beq	r2,zero,81121cd8 <__divdf3+0x2c8>
81121bf4:	80012e26 	beq	r16,zero,811220b0 <__divdf3+0x6a0>
81121bf8:	8009883a 	mov	r4,r16
81121bfc:	d9800315 	stw	r6,12(sp)
81121c00:	d9c00215 	stw	r7,8(sp)
81121c04:	110d7200 	call	8110d720 <__clzsi2>
81121c08:	d9800317 	ldw	r6,12(sp)
81121c0c:	d9c00217 	ldw	r7,8(sp)
81121c10:	113ffd44 	addi	r4,r2,-11
81121c14:	00c00704 	movi	r3,28
81121c18:	19012116 	blt	r3,r4,811220a0 <__divdf3+0x690>
81121c1c:	00c00744 	movi	r3,29
81121c20:	147ffe04 	addi	r17,r2,-8
81121c24:	1907c83a 	sub	r3,r3,r4
81121c28:	8460983a 	sll	r16,r16,r17
81121c2c:	98c6d83a 	srl	r3,r19,r3
81121c30:	9c64983a 	sll	r18,r19,r17
81121c34:	1c20b03a 	or	r16,r3,r16
81121c38:	1080fcc4 	addi	r2,r2,1011
81121c3c:	00abc83a 	sub	r21,zero,r2
81121c40:	0027883a 	mov	r19,zero
81121c44:	0013883a 	mov	r9,zero
81121c48:	003f9106 	br	81121a90 <__reset+0xfb101a90>
81121c4c:	3446b03a 	or	r3,r6,r17
81121c50:	18001f1e 	bne	r3,zero,81121cd0 <__divdf3+0x2c0>
81121c54:	0023883a 	mov	r17,zero
81121c58:	0011883a 	mov	r8,zero
81121c5c:	01c00084 	movi	r7,2
81121c60:	003f9d06 	br	81121ad8 <__reset+0xfb101ad8>
81121c64:	3446b03a 	or	r3,r6,r17
81121c68:	18001526 	beq	r3,zero,81121cc0 <__divdf3+0x2b0>
81121c6c:	88011b26 	beq	r17,zero,811220dc <__divdf3+0x6cc>
81121c70:	8809883a 	mov	r4,r17
81121c74:	d9800315 	stw	r6,12(sp)
81121c78:	da400115 	stw	r9,4(sp)
81121c7c:	110d7200 	call	8110d720 <__clzsi2>
81121c80:	d9800317 	ldw	r6,12(sp)
81121c84:	da400117 	ldw	r9,4(sp)
81121c88:	113ffd44 	addi	r4,r2,-11
81121c8c:	00c00704 	movi	r3,28
81121c90:	19010e16 	blt	r3,r4,811220cc <__divdf3+0x6bc>
81121c94:	00c00744 	movi	r3,29
81121c98:	123ffe04 	addi	r8,r2,-8
81121c9c:	1907c83a 	sub	r3,r3,r4
81121ca0:	8a22983a 	sll	r17,r17,r8
81121ca4:	30c6d83a 	srl	r3,r6,r3
81121ca8:	3210983a 	sll	r8,r6,r8
81121cac:	1c62b03a 	or	r17,r3,r17
81121cb0:	1080fcc4 	addi	r2,r2,1011
81121cb4:	0085c83a 	sub	r2,zero,r2
81121cb8:	000f883a 	mov	r7,zero
81121cbc:	003f8606 	br	81121ad8 <__reset+0xfb101ad8>
81121cc0:	0023883a 	mov	r17,zero
81121cc4:	0011883a 	mov	r8,zero
81121cc8:	01c00044 	movi	r7,1
81121ccc:	003f8206 	br	81121ad8 <__reset+0xfb101ad8>
81121cd0:	01c000c4 	movi	r7,3
81121cd4:	003f8006 	br	81121ad8 <__reset+0xfb101ad8>
81121cd8:	04c00104 	movi	r19,4
81121cdc:	0021883a 	mov	r16,zero
81121ce0:	0025883a 	mov	r18,zero
81121ce4:	02400044 	movi	r9,1
81121ce8:	003f6906 	br	81121a90 <__reset+0xfb101a90>
81121cec:	04c00304 	movi	r19,12
81121cf0:	024000c4 	movi	r9,3
81121cf4:	003f6606 	br	81121a90 <__reset+0xfb101a90>
81121cf8:	01400434 	movhi	r5,16
81121cfc:	0007883a 	mov	r3,zero
81121d00:	297fffc4 	addi	r5,r5,-1
81121d04:	04bfffc4 	movi	r18,-1
81121d08:	0081ffc4 	movi	r2,2047
81121d0c:	003fa106 	br	81121b94 <__reset+0xfb101b94>
81121d10:	00c00044 	movi	r3,1
81121d14:	1887c83a 	sub	r3,r3,r2
81121d18:	01000e04 	movi	r4,56
81121d1c:	20c1210e 	bge	r4,r3,811221a4 <__divdf3+0x794>
81121d20:	98c0004c 	andi	r3,r19,1
81121d24:	0005883a 	mov	r2,zero
81121d28:	000b883a 	mov	r5,zero
81121d2c:	0025883a 	mov	r18,zero
81121d30:	003f9806 	br	81121b94 <__reset+0xfb101b94>
81121d34:	8c00fd36 	bltu	r17,r16,8112212c <__divdf3+0x71c>
81121d38:	8440fb26 	beq	r16,r17,81122128 <__divdf3+0x718>
81121d3c:	8007883a 	mov	r3,r16
81121d40:	ad7fffc4 	addi	r21,r21,-1
81121d44:	0021883a 	mov	r16,zero
81121d48:	4004d63a 	srli	r2,r8,24
81121d4c:	8822923a 	slli	r17,r17,8
81121d50:	1809883a 	mov	r4,r3
81121d54:	402c923a 	slli	r22,r8,8
81121d58:	88b8b03a 	or	fp,r17,r2
81121d5c:	e028d43a 	srli	r20,fp,16
81121d60:	d8c00015 	stw	r3,0(sp)
81121d64:	e5ffffcc 	andi	r23,fp,65535
81121d68:	a00b883a 	mov	r5,r20
81121d6c:	1120ea40 	call	81120ea4 <__udivsi3>
81121d70:	d8c00017 	ldw	r3,0(sp)
81121d74:	a00b883a 	mov	r5,r20
81121d78:	d8800315 	stw	r2,12(sp)
81121d7c:	1809883a 	mov	r4,r3
81121d80:	1120f080 	call	81120f08 <__umodsi3>
81121d84:	d9800317 	ldw	r6,12(sp)
81121d88:	1006943a 	slli	r3,r2,16
81121d8c:	9004d43a 	srli	r2,r18,16
81121d90:	b9a3383a 	mul	r17,r23,r6
81121d94:	10c4b03a 	or	r2,r2,r3
81121d98:	1440062e 	bgeu	r2,r17,81121db4 <__divdf3+0x3a4>
81121d9c:	1705883a 	add	r2,r2,fp
81121da0:	30ffffc4 	addi	r3,r6,-1
81121da4:	1700ee36 	bltu	r2,fp,81122160 <__divdf3+0x750>
81121da8:	1440ed2e 	bgeu	r2,r17,81122160 <__divdf3+0x750>
81121dac:	31bfff84 	addi	r6,r6,-2
81121db0:	1705883a 	add	r2,r2,fp
81121db4:	1463c83a 	sub	r17,r2,r17
81121db8:	a00b883a 	mov	r5,r20
81121dbc:	8809883a 	mov	r4,r17
81121dc0:	d9800315 	stw	r6,12(sp)
81121dc4:	1120ea40 	call	81120ea4 <__udivsi3>
81121dc8:	a00b883a 	mov	r5,r20
81121dcc:	8809883a 	mov	r4,r17
81121dd0:	d8800215 	stw	r2,8(sp)
81121dd4:	1120f080 	call	81120f08 <__umodsi3>
81121dd8:	d9c00217 	ldw	r7,8(sp)
81121ddc:	1004943a 	slli	r2,r2,16
81121de0:	94bfffcc 	andi	r18,r18,65535
81121de4:	b9d1383a 	mul	r8,r23,r7
81121de8:	90a4b03a 	or	r18,r18,r2
81121dec:	d9800317 	ldw	r6,12(sp)
81121df0:	9200062e 	bgeu	r18,r8,81121e0c <__divdf3+0x3fc>
81121df4:	9725883a 	add	r18,r18,fp
81121df8:	38bfffc4 	addi	r2,r7,-1
81121dfc:	9700d636 	bltu	r18,fp,81122158 <__divdf3+0x748>
81121e00:	9200d52e 	bgeu	r18,r8,81122158 <__divdf3+0x748>
81121e04:	39ffff84 	addi	r7,r7,-2
81121e08:	9725883a 	add	r18,r18,fp
81121e0c:	3004943a 	slli	r2,r6,16
81121e10:	b012d43a 	srli	r9,r22,16
81121e14:	b1bfffcc 	andi	r6,r22,65535
81121e18:	11e2b03a 	or	r17,r2,r7
81121e1c:	8806d43a 	srli	r3,r17,16
81121e20:	893fffcc 	andi	r4,r17,65535
81121e24:	218b383a 	mul	r5,r4,r6
81121e28:	30c5383a 	mul	r2,r6,r3
81121e2c:	2249383a 	mul	r4,r4,r9
81121e30:	280ed43a 	srli	r7,r5,16
81121e34:	9225c83a 	sub	r18,r18,r8
81121e38:	2089883a 	add	r4,r4,r2
81121e3c:	3909883a 	add	r4,r7,r4
81121e40:	1a47383a 	mul	r3,r3,r9
81121e44:	2080022e 	bgeu	r4,r2,81121e50 <__divdf3+0x440>
81121e48:	00800074 	movhi	r2,1
81121e4c:	1887883a 	add	r3,r3,r2
81121e50:	2004d43a 	srli	r2,r4,16
81121e54:	2008943a 	slli	r4,r4,16
81121e58:	297fffcc 	andi	r5,r5,65535
81121e5c:	10c7883a 	add	r3,r2,r3
81121e60:	2149883a 	add	r4,r4,r5
81121e64:	90c0a536 	bltu	r18,r3,811220fc <__divdf3+0x6ec>
81121e68:	90c0bf26 	beq	r18,r3,81122168 <__divdf3+0x758>
81121e6c:	90c7c83a 	sub	r3,r18,r3
81121e70:	810fc83a 	sub	r7,r16,r4
81121e74:	81e5803a 	cmpltu	r18,r16,r7
81121e78:	1ca5c83a 	sub	r18,r3,r18
81121e7c:	e480c126 	beq	fp,r18,81122184 <__divdf3+0x774>
81121e80:	a00b883a 	mov	r5,r20
81121e84:	9009883a 	mov	r4,r18
81121e88:	d9800315 	stw	r6,12(sp)
81121e8c:	d9c00215 	stw	r7,8(sp)
81121e90:	da400115 	stw	r9,4(sp)
81121e94:	1120ea40 	call	81120ea4 <__udivsi3>
81121e98:	a00b883a 	mov	r5,r20
81121e9c:	9009883a 	mov	r4,r18
81121ea0:	d8800015 	stw	r2,0(sp)
81121ea4:	1120f080 	call	81120f08 <__umodsi3>
81121ea8:	d9c00217 	ldw	r7,8(sp)
81121eac:	da000017 	ldw	r8,0(sp)
81121eb0:	1006943a 	slli	r3,r2,16
81121eb4:	3804d43a 	srli	r2,r7,16
81121eb8:	ba21383a 	mul	r16,r23,r8
81121ebc:	d9800317 	ldw	r6,12(sp)
81121ec0:	10c4b03a 	or	r2,r2,r3
81121ec4:	da400117 	ldw	r9,4(sp)
81121ec8:	1400062e 	bgeu	r2,r16,81121ee4 <__divdf3+0x4d4>
81121ecc:	1705883a 	add	r2,r2,fp
81121ed0:	40ffffc4 	addi	r3,r8,-1
81121ed4:	1700ad36 	bltu	r2,fp,8112218c <__divdf3+0x77c>
81121ed8:	1400ac2e 	bgeu	r2,r16,8112218c <__divdf3+0x77c>
81121edc:	423fff84 	addi	r8,r8,-2
81121ee0:	1705883a 	add	r2,r2,fp
81121ee4:	1421c83a 	sub	r16,r2,r16
81121ee8:	a00b883a 	mov	r5,r20
81121eec:	8009883a 	mov	r4,r16
81121ef0:	d9800315 	stw	r6,12(sp)
81121ef4:	d9c00215 	stw	r7,8(sp)
81121ef8:	da000015 	stw	r8,0(sp)
81121efc:	da400115 	stw	r9,4(sp)
81121f00:	1120ea40 	call	81120ea4 <__udivsi3>
81121f04:	8009883a 	mov	r4,r16
81121f08:	a00b883a 	mov	r5,r20
81121f0c:	1025883a 	mov	r18,r2
81121f10:	1120f080 	call	81120f08 <__umodsi3>
81121f14:	d9c00217 	ldw	r7,8(sp)
81121f18:	1004943a 	slli	r2,r2,16
81121f1c:	bcaf383a 	mul	r23,r23,r18
81121f20:	393fffcc 	andi	r4,r7,65535
81121f24:	2088b03a 	or	r4,r4,r2
81121f28:	d9800317 	ldw	r6,12(sp)
81121f2c:	da000017 	ldw	r8,0(sp)
81121f30:	da400117 	ldw	r9,4(sp)
81121f34:	25c0062e 	bgeu	r4,r23,81121f50 <__divdf3+0x540>
81121f38:	2709883a 	add	r4,r4,fp
81121f3c:	90bfffc4 	addi	r2,r18,-1
81121f40:	27009436 	bltu	r4,fp,81122194 <__divdf3+0x784>
81121f44:	25c0932e 	bgeu	r4,r23,81122194 <__divdf3+0x784>
81121f48:	94bfff84 	addi	r18,r18,-2
81121f4c:	2709883a 	add	r4,r4,fp
81121f50:	4004943a 	slli	r2,r8,16
81121f54:	25efc83a 	sub	r23,r4,r23
81121f58:	1490b03a 	or	r8,r2,r18
81121f5c:	4008d43a 	srli	r4,r8,16
81121f60:	40ffffcc 	andi	r3,r8,65535
81121f64:	30c5383a 	mul	r2,r6,r3
81121f68:	1a47383a 	mul	r3,r3,r9
81121f6c:	310d383a 	mul	r6,r6,r4
81121f70:	100ad43a 	srli	r5,r2,16
81121f74:	4913383a 	mul	r9,r9,r4
81121f78:	1987883a 	add	r3,r3,r6
81121f7c:	28c7883a 	add	r3,r5,r3
81121f80:	1980022e 	bgeu	r3,r6,81121f8c <__divdf3+0x57c>
81121f84:	01000074 	movhi	r4,1
81121f88:	4913883a 	add	r9,r9,r4
81121f8c:	1808d43a 	srli	r4,r3,16
81121f90:	1806943a 	slli	r3,r3,16
81121f94:	10bfffcc 	andi	r2,r2,65535
81121f98:	2253883a 	add	r9,r4,r9
81121f9c:	1887883a 	add	r3,r3,r2
81121fa0:	ba403836 	bltu	r23,r9,81122084 <__divdf3+0x674>
81121fa4:	ba403626 	beq	r23,r9,81122080 <__divdf3+0x670>
81121fa8:	42000054 	ori	r8,r8,1
81121fac:	a880ffc4 	addi	r2,r21,1023
81121fb0:	00bf570e 	bge	zero,r2,81121d10 <__reset+0xfb101d10>
81121fb4:	40c001cc 	andi	r3,r8,7
81121fb8:	18000726 	beq	r3,zero,81121fd8 <__divdf3+0x5c8>
81121fbc:	40c003cc 	andi	r3,r8,15
81121fc0:	01000104 	movi	r4,4
81121fc4:	19000426 	beq	r3,r4,81121fd8 <__divdf3+0x5c8>
81121fc8:	4107883a 	add	r3,r8,r4
81121fcc:	1a11803a 	cmpltu	r8,r3,r8
81121fd0:	8a23883a 	add	r17,r17,r8
81121fd4:	1811883a 	mov	r8,r3
81121fd8:	88c0402c 	andhi	r3,r17,256
81121fdc:	18000426 	beq	r3,zero,81121ff0 <__divdf3+0x5e0>
81121fe0:	00ffc034 	movhi	r3,65280
81121fe4:	18ffffc4 	addi	r3,r3,-1
81121fe8:	a8810004 	addi	r2,r21,1024
81121fec:	88e2703a 	and	r17,r17,r3
81121ff0:	00c1ff84 	movi	r3,2046
81121ff4:	18bee316 	blt	r3,r2,81121b84 <__reset+0xfb101b84>
81121ff8:	8824977a 	slli	r18,r17,29
81121ffc:	4010d0fa 	srli	r8,r8,3
81122000:	8822927a 	slli	r17,r17,9
81122004:	1081ffcc 	andi	r2,r2,2047
81122008:	9224b03a 	or	r18,r18,r8
8112200c:	880ad33a 	srli	r5,r17,12
81122010:	98c0004c 	andi	r3,r19,1
81122014:	003edf06 	br	81121b94 <__reset+0xfb101b94>
81122018:	8080022c 	andhi	r2,r16,8
8112201c:	10001226 	beq	r2,zero,81122068 <__divdf3+0x658>
81122020:	8880022c 	andhi	r2,r17,8
81122024:	1000101e 	bne	r2,zero,81122068 <__divdf3+0x658>
81122028:	00800434 	movhi	r2,16
8112202c:	89400234 	orhi	r5,r17,8
81122030:	10bfffc4 	addi	r2,r2,-1
81122034:	b007883a 	mov	r3,r22
81122038:	288a703a 	and	r5,r5,r2
8112203c:	4025883a 	mov	r18,r8
81122040:	003f3106 	br	81121d08 <__reset+0xfb101d08>
81122044:	008000c4 	movi	r2,3
81122048:	3880a626 	beq	r7,r2,811222e4 <__divdf3+0x8d4>
8112204c:	00800044 	movi	r2,1
81122050:	3880521e 	bne	r7,r2,8112219c <__divdf3+0x78c>
81122054:	b807883a 	mov	r3,r23
81122058:	0005883a 	mov	r2,zero
8112205c:	000b883a 	mov	r5,zero
81122060:	0025883a 	mov	r18,zero
81122064:	003ecb06 	br	81121b94 <__reset+0xfb101b94>
81122068:	00800434 	movhi	r2,16
8112206c:	81400234 	orhi	r5,r16,8
81122070:	10bfffc4 	addi	r2,r2,-1
81122074:	a007883a 	mov	r3,r20
81122078:	288a703a 	and	r5,r5,r2
8112207c:	003f2206 	br	81121d08 <__reset+0xfb101d08>
81122080:	183fca26 	beq	r3,zero,81121fac <__reset+0xfb101fac>
81122084:	e5ef883a 	add	r23,fp,r23
81122088:	40bfffc4 	addi	r2,r8,-1
8112208c:	bf00392e 	bgeu	r23,fp,81122174 <__divdf3+0x764>
81122090:	1011883a 	mov	r8,r2
81122094:	ba7fc41e 	bne	r23,r9,81121fa8 <__reset+0xfb101fa8>
81122098:	b0ffc31e 	bne	r22,r3,81121fa8 <__reset+0xfb101fa8>
8112209c:	003fc306 	br	81121fac <__reset+0xfb101fac>
811220a0:	143ff604 	addi	r16,r2,-40
811220a4:	9c20983a 	sll	r16,r19,r16
811220a8:	0025883a 	mov	r18,zero
811220ac:	003ee206 	br	81121c38 <__reset+0xfb101c38>
811220b0:	d9800315 	stw	r6,12(sp)
811220b4:	d9c00215 	stw	r7,8(sp)
811220b8:	110d7200 	call	8110d720 <__clzsi2>
811220bc:	10800804 	addi	r2,r2,32
811220c0:	d9c00217 	ldw	r7,8(sp)
811220c4:	d9800317 	ldw	r6,12(sp)
811220c8:	003ed106 	br	81121c10 <__reset+0xfb101c10>
811220cc:	147ff604 	addi	r17,r2,-40
811220d0:	3462983a 	sll	r17,r6,r17
811220d4:	0011883a 	mov	r8,zero
811220d8:	003ef506 	br	81121cb0 <__reset+0xfb101cb0>
811220dc:	3009883a 	mov	r4,r6
811220e0:	d9800315 	stw	r6,12(sp)
811220e4:	da400115 	stw	r9,4(sp)
811220e8:	110d7200 	call	8110d720 <__clzsi2>
811220ec:	10800804 	addi	r2,r2,32
811220f0:	da400117 	ldw	r9,4(sp)
811220f4:	d9800317 	ldw	r6,12(sp)
811220f8:	003ee306 	br	81121c88 <__reset+0xfb101c88>
811220fc:	85a1883a 	add	r16,r16,r22
81122100:	8585803a 	cmpltu	r2,r16,r22
81122104:	1705883a 	add	r2,r2,fp
81122108:	14a5883a 	add	r18,r2,r18
8112210c:	88bfffc4 	addi	r2,r17,-1
81122110:	e4800c2e 	bgeu	fp,r18,81122144 <__divdf3+0x734>
81122114:	90c03e36 	bltu	r18,r3,81122210 <__divdf3+0x800>
81122118:	1c806926 	beq	r3,r18,811222c0 <__divdf3+0x8b0>
8112211c:	90c7c83a 	sub	r3,r18,r3
81122120:	1023883a 	mov	r17,r2
81122124:	003f5206 	br	81121e70 <__reset+0xfb101e70>
81122128:	923f0436 	bltu	r18,r8,81121d3c <__reset+0xfb101d3c>
8112212c:	800897fa 	slli	r4,r16,31
81122130:	9004d07a 	srli	r2,r18,1
81122134:	8006d07a 	srli	r3,r16,1
81122138:	902097fa 	slli	r16,r18,31
8112213c:	20a4b03a 	or	r18,r4,r2
81122140:	003f0106 	br	81121d48 <__reset+0xfb101d48>
81122144:	e4bff51e 	bne	fp,r18,8112211c <__reset+0xfb10211c>
81122148:	85bff22e 	bgeu	r16,r22,81122114 <__reset+0xfb102114>
8112214c:	e0c7c83a 	sub	r3,fp,r3
81122150:	1023883a 	mov	r17,r2
81122154:	003f4606 	br	81121e70 <__reset+0xfb101e70>
81122158:	100f883a 	mov	r7,r2
8112215c:	003f2b06 	br	81121e0c <__reset+0xfb101e0c>
81122160:	180d883a 	mov	r6,r3
81122164:	003f1306 	br	81121db4 <__reset+0xfb101db4>
81122168:	813fe436 	bltu	r16,r4,811220fc <__reset+0xfb1020fc>
8112216c:	0007883a 	mov	r3,zero
81122170:	003f3f06 	br	81121e70 <__reset+0xfb101e70>
81122174:	ba402c36 	bltu	r23,r9,81122228 <__divdf3+0x818>
81122178:	4dc05426 	beq	r9,r23,811222cc <__divdf3+0x8bc>
8112217c:	1011883a 	mov	r8,r2
81122180:	003f8906 	br	81121fa8 <__reset+0xfb101fa8>
81122184:	023fffc4 	movi	r8,-1
81122188:	003f8806 	br	81121fac <__reset+0xfb101fac>
8112218c:	1811883a 	mov	r8,r3
81122190:	003f5406 	br	81121ee4 <__reset+0xfb101ee4>
81122194:	1025883a 	mov	r18,r2
81122198:	003f6d06 	br	81121f50 <__reset+0xfb101f50>
8112219c:	b827883a 	mov	r19,r23
811221a0:	003f8206 	br	81121fac <__reset+0xfb101fac>
811221a4:	010007c4 	movi	r4,31
811221a8:	20c02616 	blt	r4,r3,81122244 <__divdf3+0x834>
811221ac:	00800804 	movi	r2,32
811221b0:	10c5c83a 	sub	r2,r2,r3
811221b4:	888a983a 	sll	r5,r17,r2
811221b8:	40c8d83a 	srl	r4,r8,r3
811221bc:	4084983a 	sll	r2,r8,r2
811221c0:	88e2d83a 	srl	r17,r17,r3
811221c4:	2906b03a 	or	r3,r5,r4
811221c8:	1004c03a 	cmpne	r2,r2,zero
811221cc:	1886b03a 	or	r3,r3,r2
811221d0:	188001cc 	andi	r2,r3,7
811221d4:	10000726 	beq	r2,zero,811221f4 <__divdf3+0x7e4>
811221d8:	188003cc 	andi	r2,r3,15
811221dc:	01000104 	movi	r4,4
811221e0:	11000426 	beq	r2,r4,811221f4 <__divdf3+0x7e4>
811221e4:	1805883a 	mov	r2,r3
811221e8:	10c00104 	addi	r3,r2,4
811221ec:	1885803a 	cmpltu	r2,r3,r2
811221f0:	88a3883a 	add	r17,r17,r2
811221f4:	8880202c 	andhi	r2,r17,128
811221f8:	10002726 	beq	r2,zero,81122298 <__divdf3+0x888>
811221fc:	98c0004c 	andi	r3,r19,1
81122200:	00800044 	movi	r2,1
81122204:	000b883a 	mov	r5,zero
81122208:	0025883a 	mov	r18,zero
8112220c:	003e6106 	br	81121b94 <__reset+0xfb101b94>
81122210:	85a1883a 	add	r16,r16,r22
81122214:	8585803a 	cmpltu	r2,r16,r22
81122218:	1705883a 	add	r2,r2,fp
8112221c:	14a5883a 	add	r18,r2,r18
81122220:	8c7fff84 	addi	r17,r17,-2
81122224:	003f1106 	br	81121e6c <__reset+0xfb101e6c>
81122228:	b589883a 	add	r4,r22,r22
8112222c:	25ad803a 	cmpltu	r22,r4,r22
81122230:	b739883a 	add	fp,r22,fp
81122234:	40bfff84 	addi	r2,r8,-2
81122238:	bf2f883a 	add	r23,r23,fp
8112223c:	202d883a 	mov	r22,r4
81122240:	003f9306 	br	81122090 <__reset+0xfb102090>
81122244:	013ff844 	movi	r4,-31
81122248:	2085c83a 	sub	r2,r4,r2
8112224c:	8888d83a 	srl	r4,r17,r2
81122250:	00800804 	movi	r2,32
81122254:	18802126 	beq	r3,r2,811222dc <__divdf3+0x8cc>
81122258:	00801004 	movi	r2,64
8112225c:	10c5c83a 	sub	r2,r2,r3
81122260:	8884983a 	sll	r2,r17,r2
81122264:	1204b03a 	or	r2,r2,r8
81122268:	1004c03a 	cmpne	r2,r2,zero
8112226c:	2084b03a 	or	r2,r4,r2
81122270:	144001cc 	andi	r17,r2,7
81122274:	88000d1e 	bne	r17,zero,811222ac <__divdf3+0x89c>
81122278:	000b883a 	mov	r5,zero
8112227c:	1024d0fa 	srli	r18,r2,3
81122280:	98c0004c 	andi	r3,r19,1
81122284:	0005883a 	mov	r2,zero
81122288:	9464b03a 	or	r18,r18,r17
8112228c:	003e4106 	br	81121b94 <__reset+0xfb101b94>
81122290:	1007883a 	mov	r3,r2
81122294:	0023883a 	mov	r17,zero
81122298:	880a927a 	slli	r5,r17,9
8112229c:	1805883a 	mov	r2,r3
811222a0:	8822977a 	slli	r17,r17,29
811222a4:	280ad33a 	srli	r5,r5,12
811222a8:	003ff406 	br	8112227c <__reset+0xfb10227c>
811222ac:	10c003cc 	andi	r3,r2,15
811222b0:	01000104 	movi	r4,4
811222b4:	193ff626 	beq	r3,r4,81122290 <__reset+0xfb102290>
811222b8:	0023883a 	mov	r17,zero
811222bc:	003fca06 	br	811221e8 <__reset+0xfb1021e8>
811222c0:	813fd336 	bltu	r16,r4,81122210 <__reset+0xfb102210>
811222c4:	1023883a 	mov	r17,r2
811222c8:	003fa806 	br	8112216c <__reset+0xfb10216c>
811222cc:	b0ffd636 	bltu	r22,r3,81122228 <__reset+0xfb102228>
811222d0:	1011883a 	mov	r8,r2
811222d4:	b0ff341e 	bne	r22,r3,81121fa8 <__reset+0xfb101fa8>
811222d8:	003f3406 	br	81121fac <__reset+0xfb101fac>
811222dc:	0005883a 	mov	r2,zero
811222e0:	003fe006 	br	81122264 <__reset+0xfb102264>
811222e4:	00800434 	movhi	r2,16
811222e8:	89400234 	orhi	r5,r17,8
811222ec:	10bfffc4 	addi	r2,r2,-1
811222f0:	b807883a 	mov	r3,r23
811222f4:	288a703a 	and	r5,r5,r2
811222f8:	4025883a 	mov	r18,r8
811222fc:	003e8206 	br	81121d08 <__reset+0xfb101d08>

81122300 <__eqdf2>:
81122300:	2804d53a 	srli	r2,r5,20
81122304:	3806d53a 	srli	r3,r7,20
81122308:	02000434 	movhi	r8,16
8112230c:	423fffc4 	addi	r8,r8,-1
81122310:	1081ffcc 	andi	r2,r2,2047
81122314:	0281ffc4 	movi	r10,2047
81122318:	2a12703a 	and	r9,r5,r8
8112231c:	18c1ffcc 	andi	r3,r3,2047
81122320:	3a10703a 	and	r8,r7,r8
81122324:	280ad7fa 	srli	r5,r5,31
81122328:	380ed7fa 	srli	r7,r7,31
8112232c:	12801026 	beq	r2,r10,81122370 <__eqdf2+0x70>
81122330:	0281ffc4 	movi	r10,2047
81122334:	1a800a26 	beq	r3,r10,81122360 <__eqdf2+0x60>
81122338:	10c00226 	beq	r2,r3,81122344 <__eqdf2+0x44>
8112233c:	00800044 	movi	r2,1
81122340:	f800283a 	ret
81122344:	4a3ffd1e 	bne	r9,r8,8112233c <__reset+0xfb10233c>
81122348:	21bffc1e 	bne	r4,r6,8112233c <__reset+0xfb10233c>
8112234c:	29c00c26 	beq	r5,r7,81122380 <__eqdf2+0x80>
81122350:	103ffa1e 	bne	r2,zero,8112233c <__reset+0xfb10233c>
81122354:	2244b03a 	or	r2,r4,r9
81122358:	1004c03a 	cmpne	r2,r2,zero
8112235c:	f800283a 	ret
81122360:	3214b03a 	or	r10,r6,r8
81122364:	503ff426 	beq	r10,zero,81122338 <__reset+0xfb102338>
81122368:	00800044 	movi	r2,1
8112236c:	f800283a 	ret
81122370:	2254b03a 	or	r10,r4,r9
81122374:	503fee26 	beq	r10,zero,81122330 <__reset+0xfb102330>
81122378:	00800044 	movi	r2,1
8112237c:	f800283a 	ret
81122380:	0005883a 	mov	r2,zero
81122384:	f800283a 	ret

81122388 <__gedf2>:
81122388:	2804d53a 	srli	r2,r5,20
8112238c:	3806d53a 	srli	r3,r7,20
81122390:	02000434 	movhi	r8,16
81122394:	423fffc4 	addi	r8,r8,-1
81122398:	1081ffcc 	andi	r2,r2,2047
8112239c:	0241ffc4 	movi	r9,2047
811223a0:	2a14703a 	and	r10,r5,r8
811223a4:	18c1ffcc 	andi	r3,r3,2047
811223a8:	3a10703a 	and	r8,r7,r8
811223ac:	280ad7fa 	srli	r5,r5,31
811223b0:	380ed7fa 	srli	r7,r7,31
811223b4:	12401d26 	beq	r2,r9,8112242c <__gedf2+0xa4>
811223b8:	0241ffc4 	movi	r9,2047
811223bc:	1a401226 	beq	r3,r9,81122408 <__gedf2+0x80>
811223c0:	1000081e 	bne	r2,zero,811223e4 <__gedf2+0x5c>
811223c4:	2296b03a 	or	r11,r4,r10
811223c8:	5813003a 	cmpeq	r9,r11,zero
811223cc:	1800091e 	bne	r3,zero,811223f4 <__gedf2+0x6c>
811223d0:	3218b03a 	or	r12,r6,r8
811223d4:	6000071e 	bne	r12,zero,811223f4 <__gedf2+0x6c>
811223d8:	0005883a 	mov	r2,zero
811223dc:	5800101e 	bne	r11,zero,81122420 <__gedf2+0x98>
811223e0:	f800283a 	ret
811223e4:	18000c1e 	bne	r3,zero,81122418 <__gedf2+0x90>
811223e8:	3212b03a 	or	r9,r6,r8
811223ec:	48000c26 	beq	r9,zero,81122420 <__gedf2+0x98>
811223f0:	0013883a 	mov	r9,zero
811223f4:	39c03fcc 	andi	r7,r7,255
811223f8:	48000826 	beq	r9,zero,8112241c <__gedf2+0x94>
811223fc:	38000926 	beq	r7,zero,81122424 <__gedf2+0x9c>
81122400:	00800044 	movi	r2,1
81122404:	f800283a 	ret
81122408:	3212b03a 	or	r9,r6,r8
8112240c:	483fec26 	beq	r9,zero,811223c0 <__reset+0xfb1023c0>
81122410:	00bfff84 	movi	r2,-2
81122414:	f800283a 	ret
81122418:	39c03fcc 	andi	r7,r7,255
8112241c:	29c00626 	beq	r5,r7,81122438 <__gedf2+0xb0>
81122420:	283ff726 	beq	r5,zero,81122400 <__reset+0xfb102400>
81122424:	00bfffc4 	movi	r2,-1
81122428:	f800283a 	ret
8112242c:	2292b03a 	or	r9,r4,r10
81122430:	483fe126 	beq	r9,zero,811223b8 <__reset+0xfb1023b8>
81122434:	003ff606 	br	81122410 <__reset+0xfb102410>
81122438:	18bff916 	blt	r3,r2,81122420 <__reset+0xfb102420>
8112243c:	10c00316 	blt	r2,r3,8112244c <__gedf2+0xc4>
81122440:	42bff736 	bltu	r8,r10,81122420 <__reset+0xfb102420>
81122444:	52000326 	beq	r10,r8,81122454 <__gedf2+0xcc>
81122448:	5200042e 	bgeu	r10,r8,8112245c <__gedf2+0xd4>
8112244c:	283fec1e 	bne	r5,zero,81122400 <__reset+0xfb102400>
81122450:	003ff406 	br	81122424 <__reset+0xfb102424>
81122454:	313ff236 	bltu	r6,r4,81122420 <__reset+0xfb102420>
81122458:	21bffc36 	bltu	r4,r6,8112244c <__reset+0xfb10244c>
8112245c:	0005883a 	mov	r2,zero
81122460:	f800283a 	ret

81122464 <__ledf2>:
81122464:	2804d53a 	srli	r2,r5,20
81122468:	3810d53a 	srli	r8,r7,20
8112246c:	00c00434 	movhi	r3,16
81122470:	18ffffc4 	addi	r3,r3,-1
81122474:	1081ffcc 	andi	r2,r2,2047
81122478:	0241ffc4 	movi	r9,2047
8112247c:	28d4703a 	and	r10,r5,r3
81122480:	4201ffcc 	andi	r8,r8,2047
81122484:	38c6703a 	and	r3,r7,r3
81122488:	280ad7fa 	srli	r5,r5,31
8112248c:	380ed7fa 	srli	r7,r7,31
81122490:	12401f26 	beq	r2,r9,81122510 <__ledf2+0xac>
81122494:	0241ffc4 	movi	r9,2047
81122498:	42401426 	beq	r8,r9,811224ec <__ledf2+0x88>
8112249c:	1000091e 	bne	r2,zero,811224c4 <__ledf2+0x60>
811224a0:	2296b03a 	or	r11,r4,r10
811224a4:	5813003a 	cmpeq	r9,r11,zero
811224a8:	29403fcc 	andi	r5,r5,255
811224ac:	40000a1e 	bne	r8,zero,811224d8 <__ledf2+0x74>
811224b0:	30d8b03a 	or	r12,r6,r3
811224b4:	6000081e 	bne	r12,zero,811224d8 <__ledf2+0x74>
811224b8:	0005883a 	mov	r2,zero
811224bc:	5800111e 	bne	r11,zero,81122504 <__ledf2+0xa0>
811224c0:	f800283a 	ret
811224c4:	29403fcc 	andi	r5,r5,255
811224c8:	40000c1e 	bne	r8,zero,811224fc <__ledf2+0x98>
811224cc:	30d2b03a 	or	r9,r6,r3
811224d0:	48000c26 	beq	r9,zero,81122504 <__ledf2+0xa0>
811224d4:	0013883a 	mov	r9,zero
811224d8:	39c03fcc 	andi	r7,r7,255
811224dc:	48000826 	beq	r9,zero,81122500 <__ledf2+0x9c>
811224e0:	38001126 	beq	r7,zero,81122528 <__ledf2+0xc4>
811224e4:	00800044 	movi	r2,1
811224e8:	f800283a 	ret
811224ec:	30d2b03a 	or	r9,r6,r3
811224f0:	483fea26 	beq	r9,zero,8112249c <__reset+0xfb10249c>
811224f4:	00800084 	movi	r2,2
811224f8:	f800283a 	ret
811224fc:	39c03fcc 	andi	r7,r7,255
81122500:	39400726 	beq	r7,r5,81122520 <__ledf2+0xbc>
81122504:	2800081e 	bne	r5,zero,81122528 <__ledf2+0xc4>
81122508:	00800044 	movi	r2,1
8112250c:	f800283a 	ret
81122510:	2292b03a 	or	r9,r4,r10
81122514:	483fdf26 	beq	r9,zero,81122494 <__reset+0xfb102494>
81122518:	00800084 	movi	r2,2
8112251c:	f800283a 	ret
81122520:	4080030e 	bge	r8,r2,81122530 <__ledf2+0xcc>
81122524:	383fef26 	beq	r7,zero,811224e4 <__reset+0xfb1024e4>
81122528:	00bfffc4 	movi	r2,-1
8112252c:	f800283a 	ret
81122530:	123feb16 	blt	r2,r8,811224e0 <__reset+0xfb1024e0>
81122534:	1abff336 	bltu	r3,r10,81122504 <__reset+0xfb102504>
81122538:	50c00326 	beq	r10,r3,81122548 <__ledf2+0xe4>
8112253c:	50c0042e 	bgeu	r10,r3,81122550 <__ledf2+0xec>
81122540:	283fe81e 	bne	r5,zero,811224e4 <__reset+0xfb1024e4>
81122544:	003ff806 	br	81122528 <__reset+0xfb102528>
81122548:	313fee36 	bltu	r6,r4,81122504 <__reset+0xfb102504>
8112254c:	21bffc36 	bltu	r4,r6,81122540 <__reset+0xfb102540>
81122550:	0005883a 	mov	r2,zero
81122554:	f800283a 	ret

81122558 <__subdf3>:
81122558:	02000434 	movhi	r8,16
8112255c:	423fffc4 	addi	r8,r8,-1
81122560:	defffb04 	addi	sp,sp,-20
81122564:	2a14703a 	and	r10,r5,r8
81122568:	3812d53a 	srli	r9,r7,20
8112256c:	3a10703a 	and	r8,r7,r8
81122570:	de00012e 	bgeu	sp,et,81122578 <__subdf3+0x20>
81122574:	003b68fa 	trap	3
81122578:	2006d77a 	srli	r3,r4,29
8112257c:	3004d77a 	srli	r2,r6,29
81122580:	dc000015 	stw	r16,0(sp)
81122584:	501490fa 	slli	r10,r10,3
81122588:	2820d53a 	srli	r16,r5,20
8112258c:	401090fa 	slli	r8,r8,3
81122590:	dc800215 	stw	r18,8(sp)
81122594:	dc400115 	stw	r17,4(sp)
81122598:	dfc00415 	stw	ra,16(sp)
8112259c:	202290fa 	slli	r17,r4,3
811225a0:	dcc00315 	stw	r19,12(sp)
811225a4:	4a41ffcc 	andi	r9,r9,2047
811225a8:	0101ffc4 	movi	r4,2047
811225ac:	2824d7fa 	srli	r18,r5,31
811225b0:	8401ffcc 	andi	r16,r16,2047
811225b4:	50c6b03a 	or	r3,r10,r3
811225b8:	380ed7fa 	srli	r7,r7,31
811225bc:	408ab03a 	or	r5,r8,r2
811225c0:	300c90fa 	slli	r6,r6,3
811225c4:	49009626 	beq	r9,r4,81122820 <__subdf3+0x2c8>
811225c8:	39c0005c 	xori	r7,r7,1
811225cc:	8245c83a 	sub	r2,r16,r9
811225d0:	3c807426 	beq	r7,r18,811227a4 <__subdf3+0x24c>
811225d4:	0080af0e 	bge	zero,r2,81122894 <__subdf3+0x33c>
811225d8:	48002a1e 	bne	r9,zero,81122684 <__subdf3+0x12c>
811225dc:	2988b03a 	or	r4,r5,r6
811225e0:	20009a1e 	bne	r4,zero,8112284c <__subdf3+0x2f4>
811225e4:	888001cc 	andi	r2,r17,7
811225e8:	10000726 	beq	r2,zero,81122608 <__subdf3+0xb0>
811225ec:	888003cc 	andi	r2,r17,15
811225f0:	01000104 	movi	r4,4
811225f4:	11000426 	beq	r2,r4,81122608 <__subdf3+0xb0>
811225f8:	890b883a 	add	r5,r17,r4
811225fc:	2c63803a 	cmpltu	r17,r5,r17
81122600:	1c47883a 	add	r3,r3,r17
81122604:	2823883a 	mov	r17,r5
81122608:	1880202c 	andhi	r2,r3,128
8112260c:	10005926 	beq	r2,zero,81122774 <__subdf3+0x21c>
81122610:	84000044 	addi	r16,r16,1
81122614:	0081ffc4 	movi	r2,2047
81122618:	8080be26 	beq	r16,r2,81122914 <__subdf3+0x3bc>
8112261c:	017fe034 	movhi	r5,65408
81122620:	297fffc4 	addi	r5,r5,-1
81122624:	1946703a 	and	r3,r3,r5
81122628:	1804977a 	slli	r2,r3,29
8112262c:	1806927a 	slli	r3,r3,9
81122630:	8822d0fa 	srli	r17,r17,3
81122634:	8401ffcc 	andi	r16,r16,2047
81122638:	180ad33a 	srli	r5,r3,12
8112263c:	9100004c 	andi	r4,r18,1
81122640:	1444b03a 	or	r2,r2,r17
81122644:	80c1ffcc 	andi	r3,r16,2047
81122648:	1820953a 	slli	r16,r3,20
8112264c:	20c03fcc 	andi	r3,r4,255
81122650:	180897fa 	slli	r4,r3,31
81122654:	00c00434 	movhi	r3,16
81122658:	18ffffc4 	addi	r3,r3,-1
8112265c:	28c6703a 	and	r3,r5,r3
81122660:	1c06b03a 	or	r3,r3,r16
81122664:	1906b03a 	or	r3,r3,r4
81122668:	dfc00417 	ldw	ra,16(sp)
8112266c:	dcc00317 	ldw	r19,12(sp)
81122670:	dc800217 	ldw	r18,8(sp)
81122674:	dc400117 	ldw	r17,4(sp)
81122678:	dc000017 	ldw	r16,0(sp)
8112267c:	dec00504 	addi	sp,sp,20
81122680:	f800283a 	ret
81122684:	0101ffc4 	movi	r4,2047
81122688:	813fd626 	beq	r16,r4,811225e4 <__reset+0xfb1025e4>
8112268c:	29402034 	orhi	r5,r5,128
81122690:	01000e04 	movi	r4,56
81122694:	2080a316 	blt	r4,r2,81122924 <__subdf3+0x3cc>
81122698:	010007c4 	movi	r4,31
8112269c:	2080c616 	blt	r4,r2,811229b8 <__subdf3+0x460>
811226a0:	01000804 	movi	r4,32
811226a4:	2089c83a 	sub	r4,r4,r2
811226a8:	2910983a 	sll	r8,r5,r4
811226ac:	308ed83a 	srl	r7,r6,r2
811226b0:	3108983a 	sll	r4,r6,r4
811226b4:	2884d83a 	srl	r2,r5,r2
811226b8:	41ccb03a 	or	r6,r8,r7
811226bc:	2008c03a 	cmpne	r4,r4,zero
811226c0:	310cb03a 	or	r6,r6,r4
811226c4:	898dc83a 	sub	r6,r17,r6
811226c8:	89a3803a 	cmpltu	r17,r17,r6
811226cc:	1887c83a 	sub	r3,r3,r2
811226d0:	1c47c83a 	sub	r3,r3,r17
811226d4:	3023883a 	mov	r17,r6
811226d8:	1880202c 	andhi	r2,r3,128
811226dc:	10002326 	beq	r2,zero,8112276c <__subdf3+0x214>
811226e0:	04c02034 	movhi	r19,128
811226e4:	9cffffc4 	addi	r19,r19,-1
811226e8:	1ce6703a 	and	r19,r3,r19
811226ec:	98007a26 	beq	r19,zero,811228d8 <__subdf3+0x380>
811226f0:	9809883a 	mov	r4,r19
811226f4:	110d7200 	call	8110d720 <__clzsi2>
811226f8:	113ffe04 	addi	r4,r2,-8
811226fc:	00c007c4 	movi	r3,31
81122700:	19007b16 	blt	r3,r4,811228f0 <__subdf3+0x398>
81122704:	00800804 	movi	r2,32
81122708:	1105c83a 	sub	r2,r2,r4
8112270c:	8884d83a 	srl	r2,r17,r2
81122710:	9906983a 	sll	r3,r19,r4
81122714:	8922983a 	sll	r17,r17,r4
81122718:	10c4b03a 	or	r2,r2,r3
8112271c:	24007816 	blt	r4,r16,81122900 <__subdf3+0x3a8>
81122720:	2421c83a 	sub	r16,r4,r16
81122724:	80c00044 	addi	r3,r16,1
81122728:	010007c4 	movi	r4,31
8112272c:	20c09516 	blt	r4,r3,81122984 <__subdf3+0x42c>
81122730:	01400804 	movi	r5,32
81122734:	28cbc83a 	sub	r5,r5,r3
81122738:	88c8d83a 	srl	r4,r17,r3
8112273c:	8962983a 	sll	r17,r17,r5
81122740:	114a983a 	sll	r5,r2,r5
81122744:	10c6d83a 	srl	r3,r2,r3
81122748:	8804c03a 	cmpne	r2,r17,zero
8112274c:	290ab03a 	or	r5,r5,r4
81122750:	28a2b03a 	or	r17,r5,r2
81122754:	0021883a 	mov	r16,zero
81122758:	003fa206 	br	811225e4 <__reset+0xfb1025e4>
8112275c:	2090b03a 	or	r8,r4,r2
81122760:	40018e26 	beq	r8,zero,81122d9c <__subdf3+0x844>
81122764:	1007883a 	mov	r3,r2
81122768:	2023883a 	mov	r17,r4
8112276c:	888001cc 	andi	r2,r17,7
81122770:	103f9e1e 	bne	r2,zero,811225ec <__reset+0xfb1025ec>
81122774:	1804977a 	slli	r2,r3,29
81122778:	8822d0fa 	srli	r17,r17,3
8112277c:	1810d0fa 	srli	r8,r3,3
81122780:	9100004c 	andi	r4,r18,1
81122784:	1444b03a 	or	r2,r2,r17
81122788:	00c1ffc4 	movi	r3,2047
8112278c:	80c02826 	beq	r16,r3,81122830 <__subdf3+0x2d8>
81122790:	01400434 	movhi	r5,16
81122794:	297fffc4 	addi	r5,r5,-1
81122798:	80e0703a 	and	r16,r16,r3
8112279c:	414a703a 	and	r5,r8,r5
811227a0:	003fa806 	br	81122644 <__reset+0xfb102644>
811227a4:	0080630e 	bge	zero,r2,81122934 <__subdf3+0x3dc>
811227a8:	48003026 	beq	r9,zero,8112286c <__subdf3+0x314>
811227ac:	0101ffc4 	movi	r4,2047
811227b0:	813f8c26 	beq	r16,r4,811225e4 <__reset+0xfb1025e4>
811227b4:	29402034 	orhi	r5,r5,128
811227b8:	01000e04 	movi	r4,56
811227bc:	2080a90e 	bge	r4,r2,81122a64 <__subdf3+0x50c>
811227c0:	298cb03a 	or	r6,r5,r6
811227c4:	3012c03a 	cmpne	r9,r6,zero
811227c8:	0005883a 	mov	r2,zero
811227cc:	4c53883a 	add	r9,r9,r17
811227d0:	4c63803a 	cmpltu	r17,r9,r17
811227d4:	10c7883a 	add	r3,r2,r3
811227d8:	88c7883a 	add	r3,r17,r3
811227dc:	4823883a 	mov	r17,r9
811227e0:	1880202c 	andhi	r2,r3,128
811227e4:	1000d026 	beq	r2,zero,81122b28 <__subdf3+0x5d0>
811227e8:	84000044 	addi	r16,r16,1
811227ec:	0081ffc4 	movi	r2,2047
811227f0:	8080fe26 	beq	r16,r2,81122bec <__subdf3+0x694>
811227f4:	00bfe034 	movhi	r2,65408
811227f8:	10bfffc4 	addi	r2,r2,-1
811227fc:	1886703a 	and	r3,r3,r2
81122800:	880ad07a 	srli	r5,r17,1
81122804:	180497fa 	slli	r2,r3,31
81122808:	8900004c 	andi	r4,r17,1
8112280c:	2922b03a 	or	r17,r5,r4
81122810:	1806d07a 	srli	r3,r3,1
81122814:	1462b03a 	or	r17,r2,r17
81122818:	3825883a 	mov	r18,r7
8112281c:	003f7106 	br	811225e4 <__reset+0xfb1025e4>
81122820:	2984b03a 	or	r2,r5,r6
81122824:	103f6826 	beq	r2,zero,811225c8 <__reset+0xfb1025c8>
81122828:	39c03fcc 	andi	r7,r7,255
8112282c:	003f6706 	br	811225cc <__reset+0xfb1025cc>
81122830:	4086b03a 	or	r3,r8,r2
81122834:	18015226 	beq	r3,zero,81122d80 <__subdf3+0x828>
81122838:	00c00434 	movhi	r3,16
8112283c:	41400234 	orhi	r5,r8,8
81122840:	18ffffc4 	addi	r3,r3,-1
81122844:	28ca703a 	and	r5,r5,r3
81122848:	003f7e06 	br	81122644 <__reset+0xfb102644>
8112284c:	10bfffc4 	addi	r2,r2,-1
81122850:	1000491e 	bne	r2,zero,81122978 <__subdf3+0x420>
81122854:	898fc83a 	sub	r7,r17,r6
81122858:	89e3803a 	cmpltu	r17,r17,r7
8112285c:	1947c83a 	sub	r3,r3,r5
81122860:	1c47c83a 	sub	r3,r3,r17
81122864:	3823883a 	mov	r17,r7
81122868:	003f9b06 	br	811226d8 <__reset+0xfb1026d8>
8112286c:	2988b03a 	or	r4,r5,r6
81122870:	203f5c26 	beq	r4,zero,811225e4 <__reset+0xfb1025e4>
81122874:	10bfffc4 	addi	r2,r2,-1
81122878:	1000931e 	bne	r2,zero,81122ac8 <__subdf3+0x570>
8112287c:	898d883a 	add	r6,r17,r6
81122880:	3463803a 	cmpltu	r17,r6,r17
81122884:	1947883a 	add	r3,r3,r5
81122888:	88c7883a 	add	r3,r17,r3
8112288c:	3023883a 	mov	r17,r6
81122890:	003fd306 	br	811227e0 <__reset+0xfb1027e0>
81122894:	1000541e 	bne	r2,zero,811229e8 <__subdf3+0x490>
81122898:	80800044 	addi	r2,r16,1
8112289c:	1081ffcc 	andi	r2,r2,2047
811228a0:	01000044 	movi	r4,1
811228a4:	2080a20e 	bge	r4,r2,81122b30 <__subdf3+0x5d8>
811228a8:	8989c83a 	sub	r4,r17,r6
811228ac:	8905803a 	cmpltu	r2,r17,r4
811228b0:	1967c83a 	sub	r19,r3,r5
811228b4:	98a7c83a 	sub	r19,r19,r2
811228b8:	9880202c 	andhi	r2,r19,128
811228bc:	10006326 	beq	r2,zero,81122a4c <__subdf3+0x4f4>
811228c0:	3463c83a 	sub	r17,r6,r17
811228c4:	28c7c83a 	sub	r3,r5,r3
811228c8:	344d803a 	cmpltu	r6,r6,r17
811228cc:	19a7c83a 	sub	r19,r3,r6
811228d0:	3825883a 	mov	r18,r7
811228d4:	983f861e 	bne	r19,zero,811226f0 <__reset+0xfb1026f0>
811228d8:	8809883a 	mov	r4,r17
811228dc:	110d7200 	call	8110d720 <__clzsi2>
811228e0:	10800804 	addi	r2,r2,32
811228e4:	113ffe04 	addi	r4,r2,-8
811228e8:	00c007c4 	movi	r3,31
811228ec:	193f850e 	bge	r3,r4,81122704 <__reset+0xfb102704>
811228f0:	10bff604 	addi	r2,r2,-40
811228f4:	8884983a 	sll	r2,r17,r2
811228f8:	0023883a 	mov	r17,zero
811228fc:	243f880e 	bge	r4,r16,81122720 <__reset+0xfb102720>
81122900:	00ffe034 	movhi	r3,65408
81122904:	18ffffc4 	addi	r3,r3,-1
81122908:	8121c83a 	sub	r16,r16,r4
8112290c:	10c6703a 	and	r3,r2,r3
81122910:	003f3406 	br	811225e4 <__reset+0xfb1025e4>
81122914:	9100004c 	andi	r4,r18,1
81122918:	000b883a 	mov	r5,zero
8112291c:	0005883a 	mov	r2,zero
81122920:	003f4806 	br	81122644 <__reset+0xfb102644>
81122924:	298cb03a 	or	r6,r5,r6
81122928:	300cc03a 	cmpne	r6,r6,zero
8112292c:	0005883a 	mov	r2,zero
81122930:	003f6406 	br	811226c4 <__reset+0xfb1026c4>
81122934:	10009a1e 	bne	r2,zero,81122ba0 <__subdf3+0x648>
81122938:	82400044 	addi	r9,r16,1
8112293c:	4881ffcc 	andi	r2,r9,2047
81122940:	02800044 	movi	r10,1
81122944:	5080670e 	bge	r10,r2,81122ae4 <__subdf3+0x58c>
81122948:	0081ffc4 	movi	r2,2047
8112294c:	4880af26 	beq	r9,r2,81122c0c <__subdf3+0x6b4>
81122950:	898d883a 	add	r6,r17,r6
81122954:	1945883a 	add	r2,r3,r5
81122958:	3447803a 	cmpltu	r3,r6,r17
8112295c:	1887883a 	add	r3,r3,r2
81122960:	182297fa 	slli	r17,r3,31
81122964:	300cd07a 	srli	r6,r6,1
81122968:	1806d07a 	srli	r3,r3,1
8112296c:	4821883a 	mov	r16,r9
81122970:	89a2b03a 	or	r17,r17,r6
81122974:	003f1b06 	br	811225e4 <__reset+0xfb1025e4>
81122978:	0101ffc4 	movi	r4,2047
8112297c:	813f441e 	bne	r16,r4,81122690 <__reset+0xfb102690>
81122980:	003f1806 	br	811225e4 <__reset+0xfb1025e4>
81122984:	843ff844 	addi	r16,r16,-31
81122988:	01400804 	movi	r5,32
8112298c:	1408d83a 	srl	r4,r2,r16
81122990:	19405026 	beq	r3,r5,81122ad4 <__subdf3+0x57c>
81122994:	01401004 	movi	r5,64
81122998:	28c7c83a 	sub	r3,r5,r3
8112299c:	10c4983a 	sll	r2,r2,r3
811229a0:	88a2b03a 	or	r17,r17,r2
811229a4:	8822c03a 	cmpne	r17,r17,zero
811229a8:	2462b03a 	or	r17,r4,r17
811229ac:	0007883a 	mov	r3,zero
811229b0:	0021883a 	mov	r16,zero
811229b4:	003f6d06 	br	8112276c <__reset+0xfb10276c>
811229b8:	11fff804 	addi	r7,r2,-32
811229bc:	01000804 	movi	r4,32
811229c0:	29ced83a 	srl	r7,r5,r7
811229c4:	11004526 	beq	r2,r4,81122adc <__subdf3+0x584>
811229c8:	01001004 	movi	r4,64
811229cc:	2089c83a 	sub	r4,r4,r2
811229d0:	2904983a 	sll	r2,r5,r4
811229d4:	118cb03a 	or	r6,r2,r6
811229d8:	300cc03a 	cmpne	r6,r6,zero
811229dc:	398cb03a 	or	r6,r7,r6
811229e0:	0005883a 	mov	r2,zero
811229e4:	003f3706 	br	811226c4 <__reset+0xfb1026c4>
811229e8:	80002a26 	beq	r16,zero,81122a94 <__subdf3+0x53c>
811229ec:	0101ffc4 	movi	r4,2047
811229f0:	49006626 	beq	r9,r4,81122b8c <__subdf3+0x634>
811229f4:	0085c83a 	sub	r2,zero,r2
811229f8:	18c02034 	orhi	r3,r3,128
811229fc:	01000e04 	movi	r4,56
81122a00:	20807e16 	blt	r4,r2,81122bfc <__subdf3+0x6a4>
81122a04:	010007c4 	movi	r4,31
81122a08:	2080e716 	blt	r4,r2,81122da8 <__subdf3+0x850>
81122a0c:	01000804 	movi	r4,32
81122a10:	2089c83a 	sub	r4,r4,r2
81122a14:	1914983a 	sll	r10,r3,r4
81122a18:	8890d83a 	srl	r8,r17,r2
81122a1c:	8908983a 	sll	r4,r17,r4
81122a20:	1884d83a 	srl	r2,r3,r2
81122a24:	5222b03a 	or	r17,r10,r8
81122a28:	2006c03a 	cmpne	r3,r4,zero
81122a2c:	88e2b03a 	or	r17,r17,r3
81122a30:	3463c83a 	sub	r17,r6,r17
81122a34:	2885c83a 	sub	r2,r5,r2
81122a38:	344d803a 	cmpltu	r6,r6,r17
81122a3c:	1187c83a 	sub	r3,r2,r6
81122a40:	4821883a 	mov	r16,r9
81122a44:	3825883a 	mov	r18,r7
81122a48:	003f2306 	br	811226d8 <__reset+0xfb1026d8>
81122a4c:	24d0b03a 	or	r8,r4,r19
81122a50:	40001b1e 	bne	r8,zero,81122ac0 <__subdf3+0x568>
81122a54:	0005883a 	mov	r2,zero
81122a58:	0009883a 	mov	r4,zero
81122a5c:	0021883a 	mov	r16,zero
81122a60:	003f4906 	br	81122788 <__reset+0xfb102788>
81122a64:	010007c4 	movi	r4,31
81122a68:	20803a16 	blt	r4,r2,81122b54 <__subdf3+0x5fc>
81122a6c:	01000804 	movi	r4,32
81122a70:	2089c83a 	sub	r4,r4,r2
81122a74:	2912983a 	sll	r9,r5,r4
81122a78:	3090d83a 	srl	r8,r6,r2
81122a7c:	3108983a 	sll	r4,r6,r4
81122a80:	2884d83a 	srl	r2,r5,r2
81122a84:	4a12b03a 	or	r9,r9,r8
81122a88:	2008c03a 	cmpne	r4,r4,zero
81122a8c:	4912b03a 	or	r9,r9,r4
81122a90:	003f4e06 	br	811227cc <__reset+0xfb1027cc>
81122a94:	1c48b03a 	or	r4,r3,r17
81122a98:	20003c26 	beq	r4,zero,81122b8c <__subdf3+0x634>
81122a9c:	0084303a 	nor	r2,zero,r2
81122aa0:	1000381e 	bne	r2,zero,81122b84 <__subdf3+0x62c>
81122aa4:	3463c83a 	sub	r17,r6,r17
81122aa8:	28c5c83a 	sub	r2,r5,r3
81122aac:	344d803a 	cmpltu	r6,r6,r17
81122ab0:	1187c83a 	sub	r3,r2,r6
81122ab4:	4821883a 	mov	r16,r9
81122ab8:	3825883a 	mov	r18,r7
81122abc:	003f0606 	br	811226d8 <__reset+0xfb1026d8>
81122ac0:	2023883a 	mov	r17,r4
81122ac4:	003f0906 	br	811226ec <__reset+0xfb1026ec>
81122ac8:	0101ffc4 	movi	r4,2047
81122acc:	813f3a1e 	bne	r16,r4,811227b8 <__reset+0xfb1027b8>
81122ad0:	003ec406 	br	811225e4 <__reset+0xfb1025e4>
81122ad4:	0005883a 	mov	r2,zero
81122ad8:	003fb106 	br	811229a0 <__reset+0xfb1029a0>
81122adc:	0005883a 	mov	r2,zero
81122ae0:	003fbc06 	br	811229d4 <__reset+0xfb1029d4>
81122ae4:	1c44b03a 	or	r2,r3,r17
81122ae8:	80008e1e 	bne	r16,zero,81122d24 <__subdf3+0x7cc>
81122aec:	1000c826 	beq	r2,zero,81122e10 <__subdf3+0x8b8>
81122af0:	2984b03a 	or	r2,r5,r6
81122af4:	103ebb26 	beq	r2,zero,811225e4 <__reset+0xfb1025e4>
81122af8:	8989883a 	add	r4,r17,r6
81122afc:	1945883a 	add	r2,r3,r5
81122b00:	2447803a 	cmpltu	r3,r4,r17
81122b04:	1887883a 	add	r3,r3,r2
81122b08:	1880202c 	andhi	r2,r3,128
81122b0c:	2023883a 	mov	r17,r4
81122b10:	103f1626 	beq	r2,zero,8112276c <__reset+0xfb10276c>
81122b14:	00bfe034 	movhi	r2,65408
81122b18:	10bfffc4 	addi	r2,r2,-1
81122b1c:	5021883a 	mov	r16,r10
81122b20:	1886703a 	and	r3,r3,r2
81122b24:	003eaf06 	br	811225e4 <__reset+0xfb1025e4>
81122b28:	3825883a 	mov	r18,r7
81122b2c:	003f0f06 	br	8112276c <__reset+0xfb10276c>
81122b30:	1c44b03a 	or	r2,r3,r17
81122b34:	8000251e 	bne	r16,zero,81122bcc <__subdf3+0x674>
81122b38:	1000661e 	bne	r2,zero,81122cd4 <__subdf3+0x77c>
81122b3c:	2990b03a 	or	r8,r5,r6
81122b40:	40009626 	beq	r8,zero,81122d9c <__subdf3+0x844>
81122b44:	2807883a 	mov	r3,r5
81122b48:	3023883a 	mov	r17,r6
81122b4c:	3825883a 	mov	r18,r7
81122b50:	003ea406 	br	811225e4 <__reset+0xfb1025e4>
81122b54:	127ff804 	addi	r9,r2,-32
81122b58:	01000804 	movi	r4,32
81122b5c:	2a52d83a 	srl	r9,r5,r9
81122b60:	11008c26 	beq	r2,r4,81122d94 <__subdf3+0x83c>
81122b64:	01001004 	movi	r4,64
81122b68:	2085c83a 	sub	r2,r4,r2
81122b6c:	2884983a 	sll	r2,r5,r2
81122b70:	118cb03a 	or	r6,r2,r6
81122b74:	300cc03a 	cmpne	r6,r6,zero
81122b78:	4992b03a 	or	r9,r9,r6
81122b7c:	0005883a 	mov	r2,zero
81122b80:	003f1206 	br	811227cc <__reset+0xfb1027cc>
81122b84:	0101ffc4 	movi	r4,2047
81122b88:	493f9c1e 	bne	r9,r4,811229fc <__reset+0xfb1029fc>
81122b8c:	2807883a 	mov	r3,r5
81122b90:	3023883a 	mov	r17,r6
81122b94:	4821883a 	mov	r16,r9
81122b98:	3825883a 	mov	r18,r7
81122b9c:	003e9106 	br	811225e4 <__reset+0xfb1025e4>
81122ba0:	80001f1e 	bne	r16,zero,81122c20 <__subdf3+0x6c8>
81122ba4:	1c48b03a 	or	r4,r3,r17
81122ba8:	20005a26 	beq	r4,zero,81122d14 <__subdf3+0x7bc>
81122bac:	0084303a 	nor	r2,zero,r2
81122bb0:	1000561e 	bne	r2,zero,81122d0c <__subdf3+0x7b4>
81122bb4:	89a3883a 	add	r17,r17,r6
81122bb8:	1945883a 	add	r2,r3,r5
81122bbc:	898d803a 	cmpltu	r6,r17,r6
81122bc0:	3087883a 	add	r3,r6,r2
81122bc4:	4821883a 	mov	r16,r9
81122bc8:	003f0506 	br	811227e0 <__reset+0xfb1027e0>
81122bcc:	10002b1e 	bne	r2,zero,81122c7c <__subdf3+0x724>
81122bd0:	2984b03a 	or	r2,r5,r6
81122bd4:	10008026 	beq	r2,zero,81122dd8 <__subdf3+0x880>
81122bd8:	2807883a 	mov	r3,r5
81122bdc:	3023883a 	mov	r17,r6
81122be0:	3825883a 	mov	r18,r7
81122be4:	0401ffc4 	movi	r16,2047
81122be8:	003e7e06 	br	811225e4 <__reset+0xfb1025e4>
81122bec:	3809883a 	mov	r4,r7
81122bf0:	0011883a 	mov	r8,zero
81122bf4:	0005883a 	mov	r2,zero
81122bf8:	003ee306 	br	81122788 <__reset+0xfb102788>
81122bfc:	1c62b03a 	or	r17,r3,r17
81122c00:	8822c03a 	cmpne	r17,r17,zero
81122c04:	0005883a 	mov	r2,zero
81122c08:	003f8906 	br	81122a30 <__reset+0xfb102a30>
81122c0c:	3809883a 	mov	r4,r7
81122c10:	4821883a 	mov	r16,r9
81122c14:	0011883a 	mov	r8,zero
81122c18:	0005883a 	mov	r2,zero
81122c1c:	003eda06 	br	81122788 <__reset+0xfb102788>
81122c20:	0101ffc4 	movi	r4,2047
81122c24:	49003b26 	beq	r9,r4,81122d14 <__subdf3+0x7bc>
81122c28:	0085c83a 	sub	r2,zero,r2
81122c2c:	18c02034 	orhi	r3,r3,128
81122c30:	01000e04 	movi	r4,56
81122c34:	20806e16 	blt	r4,r2,81122df0 <__subdf3+0x898>
81122c38:	010007c4 	movi	r4,31
81122c3c:	20807716 	blt	r4,r2,81122e1c <__subdf3+0x8c4>
81122c40:	01000804 	movi	r4,32
81122c44:	2089c83a 	sub	r4,r4,r2
81122c48:	1914983a 	sll	r10,r3,r4
81122c4c:	8890d83a 	srl	r8,r17,r2
81122c50:	8908983a 	sll	r4,r17,r4
81122c54:	1884d83a 	srl	r2,r3,r2
81122c58:	5222b03a 	or	r17,r10,r8
81122c5c:	2006c03a 	cmpne	r3,r4,zero
81122c60:	88e2b03a 	or	r17,r17,r3
81122c64:	89a3883a 	add	r17,r17,r6
81122c68:	1145883a 	add	r2,r2,r5
81122c6c:	898d803a 	cmpltu	r6,r17,r6
81122c70:	3087883a 	add	r3,r6,r2
81122c74:	4821883a 	mov	r16,r9
81122c78:	003ed906 	br	811227e0 <__reset+0xfb1027e0>
81122c7c:	2984b03a 	or	r2,r5,r6
81122c80:	10004226 	beq	r2,zero,81122d8c <__subdf3+0x834>
81122c84:	1808d0fa 	srli	r4,r3,3
81122c88:	8822d0fa 	srli	r17,r17,3
81122c8c:	1806977a 	slli	r3,r3,29
81122c90:	2080022c 	andhi	r2,r4,8
81122c94:	1c62b03a 	or	r17,r3,r17
81122c98:	10000826 	beq	r2,zero,81122cbc <__subdf3+0x764>
81122c9c:	2812d0fa 	srli	r9,r5,3
81122ca0:	4880022c 	andhi	r2,r9,8
81122ca4:	1000051e 	bne	r2,zero,81122cbc <__subdf3+0x764>
81122ca8:	300cd0fa 	srli	r6,r6,3
81122cac:	2804977a 	slli	r2,r5,29
81122cb0:	4809883a 	mov	r4,r9
81122cb4:	3825883a 	mov	r18,r7
81122cb8:	11a2b03a 	or	r17,r2,r6
81122cbc:	8806d77a 	srli	r3,r17,29
81122cc0:	200890fa 	slli	r4,r4,3
81122cc4:	882290fa 	slli	r17,r17,3
81122cc8:	0401ffc4 	movi	r16,2047
81122ccc:	1906b03a 	or	r3,r3,r4
81122cd0:	003e4406 	br	811225e4 <__reset+0xfb1025e4>
81122cd4:	2984b03a 	or	r2,r5,r6
81122cd8:	103e4226 	beq	r2,zero,811225e4 <__reset+0xfb1025e4>
81122cdc:	8989c83a 	sub	r4,r17,r6
81122ce0:	8911803a 	cmpltu	r8,r17,r4
81122ce4:	1945c83a 	sub	r2,r3,r5
81122ce8:	1205c83a 	sub	r2,r2,r8
81122cec:	1200202c 	andhi	r8,r2,128
81122cf0:	403e9a26 	beq	r8,zero,8112275c <__reset+0xfb10275c>
81122cf4:	3463c83a 	sub	r17,r6,r17
81122cf8:	28c5c83a 	sub	r2,r5,r3
81122cfc:	344d803a 	cmpltu	r6,r6,r17
81122d00:	1187c83a 	sub	r3,r2,r6
81122d04:	3825883a 	mov	r18,r7
81122d08:	003e3606 	br	811225e4 <__reset+0xfb1025e4>
81122d0c:	0101ffc4 	movi	r4,2047
81122d10:	493fc71e 	bne	r9,r4,81122c30 <__reset+0xfb102c30>
81122d14:	2807883a 	mov	r3,r5
81122d18:	3023883a 	mov	r17,r6
81122d1c:	4821883a 	mov	r16,r9
81122d20:	003e3006 	br	811225e4 <__reset+0xfb1025e4>
81122d24:	10003626 	beq	r2,zero,81122e00 <__subdf3+0x8a8>
81122d28:	2984b03a 	or	r2,r5,r6
81122d2c:	10001726 	beq	r2,zero,81122d8c <__subdf3+0x834>
81122d30:	1808d0fa 	srli	r4,r3,3
81122d34:	8822d0fa 	srli	r17,r17,3
81122d38:	1806977a 	slli	r3,r3,29
81122d3c:	2080022c 	andhi	r2,r4,8
81122d40:	1c62b03a 	or	r17,r3,r17
81122d44:	10000726 	beq	r2,zero,81122d64 <__subdf3+0x80c>
81122d48:	2812d0fa 	srli	r9,r5,3
81122d4c:	4880022c 	andhi	r2,r9,8
81122d50:	1000041e 	bne	r2,zero,81122d64 <__subdf3+0x80c>
81122d54:	300cd0fa 	srli	r6,r6,3
81122d58:	2804977a 	slli	r2,r5,29
81122d5c:	4809883a 	mov	r4,r9
81122d60:	11a2b03a 	or	r17,r2,r6
81122d64:	8806d77a 	srli	r3,r17,29
81122d68:	200890fa 	slli	r4,r4,3
81122d6c:	882290fa 	slli	r17,r17,3
81122d70:	3825883a 	mov	r18,r7
81122d74:	1906b03a 	or	r3,r3,r4
81122d78:	0401ffc4 	movi	r16,2047
81122d7c:	003e1906 	br	811225e4 <__reset+0xfb1025e4>
81122d80:	000b883a 	mov	r5,zero
81122d84:	0005883a 	mov	r2,zero
81122d88:	003e2e06 	br	81122644 <__reset+0xfb102644>
81122d8c:	0401ffc4 	movi	r16,2047
81122d90:	003e1406 	br	811225e4 <__reset+0xfb1025e4>
81122d94:	0005883a 	mov	r2,zero
81122d98:	003f7506 	br	81122b70 <__reset+0xfb102b70>
81122d9c:	0005883a 	mov	r2,zero
81122da0:	0009883a 	mov	r4,zero
81122da4:	003e7806 	br	81122788 <__reset+0xfb102788>
81122da8:	123ff804 	addi	r8,r2,-32
81122dac:	01000804 	movi	r4,32
81122db0:	1a10d83a 	srl	r8,r3,r8
81122db4:	11002526 	beq	r2,r4,81122e4c <__subdf3+0x8f4>
81122db8:	01001004 	movi	r4,64
81122dbc:	2085c83a 	sub	r2,r4,r2
81122dc0:	1884983a 	sll	r2,r3,r2
81122dc4:	1444b03a 	or	r2,r2,r17
81122dc8:	1004c03a 	cmpne	r2,r2,zero
81122dcc:	40a2b03a 	or	r17,r8,r2
81122dd0:	0005883a 	mov	r2,zero
81122dd4:	003f1606 	br	81122a30 <__reset+0xfb102a30>
81122dd8:	02000434 	movhi	r8,16
81122ddc:	0009883a 	mov	r4,zero
81122de0:	423fffc4 	addi	r8,r8,-1
81122de4:	00bfffc4 	movi	r2,-1
81122de8:	0401ffc4 	movi	r16,2047
81122dec:	003e6606 	br	81122788 <__reset+0xfb102788>
81122df0:	1c62b03a 	or	r17,r3,r17
81122df4:	8822c03a 	cmpne	r17,r17,zero
81122df8:	0005883a 	mov	r2,zero
81122dfc:	003f9906 	br	81122c64 <__reset+0xfb102c64>
81122e00:	2807883a 	mov	r3,r5
81122e04:	3023883a 	mov	r17,r6
81122e08:	0401ffc4 	movi	r16,2047
81122e0c:	003df506 	br	811225e4 <__reset+0xfb1025e4>
81122e10:	2807883a 	mov	r3,r5
81122e14:	3023883a 	mov	r17,r6
81122e18:	003df206 	br	811225e4 <__reset+0xfb1025e4>
81122e1c:	123ff804 	addi	r8,r2,-32
81122e20:	01000804 	movi	r4,32
81122e24:	1a10d83a 	srl	r8,r3,r8
81122e28:	11000a26 	beq	r2,r4,81122e54 <__subdf3+0x8fc>
81122e2c:	01001004 	movi	r4,64
81122e30:	2085c83a 	sub	r2,r4,r2
81122e34:	1884983a 	sll	r2,r3,r2
81122e38:	1444b03a 	or	r2,r2,r17
81122e3c:	1004c03a 	cmpne	r2,r2,zero
81122e40:	40a2b03a 	or	r17,r8,r2
81122e44:	0005883a 	mov	r2,zero
81122e48:	003f8606 	br	81122c64 <__reset+0xfb102c64>
81122e4c:	0005883a 	mov	r2,zero
81122e50:	003fdc06 	br	81122dc4 <__reset+0xfb102dc4>
81122e54:	0005883a 	mov	r2,zero
81122e58:	003ff706 	br	81122e38 <__reset+0xfb102e38>

81122e5c <__fixdfsi>:
81122e5c:	280cd53a 	srli	r6,r5,20
81122e60:	00c00434 	movhi	r3,16
81122e64:	18ffffc4 	addi	r3,r3,-1
81122e68:	3181ffcc 	andi	r6,r6,2047
81122e6c:	01c0ff84 	movi	r7,1022
81122e70:	28c6703a 	and	r3,r5,r3
81122e74:	280ad7fa 	srli	r5,r5,31
81122e78:	3980120e 	bge	r7,r6,81122ec4 <__fixdfsi+0x68>
81122e7c:	00810744 	movi	r2,1053
81122e80:	11800c16 	blt	r2,r6,81122eb4 <__fixdfsi+0x58>
81122e84:	00810cc4 	movi	r2,1075
81122e88:	1185c83a 	sub	r2,r2,r6
81122e8c:	01c007c4 	movi	r7,31
81122e90:	18c00434 	orhi	r3,r3,16
81122e94:	38800d16 	blt	r7,r2,81122ecc <__fixdfsi+0x70>
81122e98:	31befb44 	addi	r6,r6,-1043
81122e9c:	2084d83a 	srl	r2,r4,r2
81122ea0:	1986983a 	sll	r3,r3,r6
81122ea4:	1884b03a 	or	r2,r3,r2
81122ea8:	28000726 	beq	r5,zero,81122ec8 <__fixdfsi+0x6c>
81122eac:	0085c83a 	sub	r2,zero,r2
81122eb0:	f800283a 	ret
81122eb4:	00a00034 	movhi	r2,32768
81122eb8:	10bfffc4 	addi	r2,r2,-1
81122ebc:	2885883a 	add	r2,r5,r2
81122ec0:	f800283a 	ret
81122ec4:	0005883a 	mov	r2,zero
81122ec8:	f800283a 	ret
81122ecc:	008104c4 	movi	r2,1043
81122ed0:	1185c83a 	sub	r2,r2,r6
81122ed4:	1884d83a 	srl	r2,r3,r2
81122ed8:	003ff306 	br	81122ea8 <__reset+0xfb102ea8>

81122edc <__floatsidf>:
81122edc:	defffd04 	addi	sp,sp,-12
81122ee0:	de00012e 	bgeu	sp,et,81122ee8 <__floatsidf+0xc>
81122ee4:	003b68fa 	trap	3
81122ee8:	dfc00215 	stw	ra,8(sp)
81122eec:	dc400115 	stw	r17,4(sp)
81122ef0:	dc000015 	stw	r16,0(sp)
81122ef4:	20002b26 	beq	r4,zero,81122fa4 <__floatsidf+0xc8>
81122ef8:	2023883a 	mov	r17,r4
81122efc:	2020d7fa 	srli	r16,r4,31
81122f00:	20002d16 	blt	r4,zero,81122fb8 <__floatsidf+0xdc>
81122f04:	8809883a 	mov	r4,r17
81122f08:	110d7200 	call	8110d720 <__clzsi2>
81122f0c:	01410784 	movi	r5,1054
81122f10:	288bc83a 	sub	r5,r5,r2
81122f14:	01010cc4 	movi	r4,1075
81122f18:	2149c83a 	sub	r4,r4,r5
81122f1c:	00c007c4 	movi	r3,31
81122f20:	1900160e 	bge	r3,r4,81122f7c <__floatsidf+0xa0>
81122f24:	00c104c4 	movi	r3,1043
81122f28:	1947c83a 	sub	r3,r3,r5
81122f2c:	88c6983a 	sll	r3,r17,r3
81122f30:	00800434 	movhi	r2,16
81122f34:	10bfffc4 	addi	r2,r2,-1
81122f38:	1886703a 	and	r3,r3,r2
81122f3c:	2941ffcc 	andi	r5,r5,2047
81122f40:	800d883a 	mov	r6,r16
81122f44:	0005883a 	mov	r2,zero
81122f48:	280a953a 	slli	r5,r5,20
81122f4c:	31803fcc 	andi	r6,r6,255
81122f50:	01000434 	movhi	r4,16
81122f54:	300c97fa 	slli	r6,r6,31
81122f58:	213fffc4 	addi	r4,r4,-1
81122f5c:	1906703a 	and	r3,r3,r4
81122f60:	1946b03a 	or	r3,r3,r5
81122f64:	1986b03a 	or	r3,r3,r6
81122f68:	dfc00217 	ldw	ra,8(sp)
81122f6c:	dc400117 	ldw	r17,4(sp)
81122f70:	dc000017 	ldw	r16,0(sp)
81122f74:	dec00304 	addi	sp,sp,12
81122f78:	f800283a 	ret
81122f7c:	00c002c4 	movi	r3,11
81122f80:	1887c83a 	sub	r3,r3,r2
81122f84:	88c6d83a 	srl	r3,r17,r3
81122f88:	8904983a 	sll	r2,r17,r4
81122f8c:	01000434 	movhi	r4,16
81122f90:	213fffc4 	addi	r4,r4,-1
81122f94:	2941ffcc 	andi	r5,r5,2047
81122f98:	1906703a 	and	r3,r3,r4
81122f9c:	800d883a 	mov	r6,r16
81122fa0:	003fe906 	br	81122f48 <__reset+0xfb102f48>
81122fa4:	000d883a 	mov	r6,zero
81122fa8:	000b883a 	mov	r5,zero
81122fac:	0007883a 	mov	r3,zero
81122fb0:	0005883a 	mov	r2,zero
81122fb4:	003fe406 	br	81122f48 <__reset+0xfb102f48>
81122fb8:	0123c83a 	sub	r17,zero,r4
81122fbc:	003fd106 	br	81122f04 <__reset+0xfb102f04>

81122fc0 <__floatunsidf>:
81122fc0:	defffe04 	addi	sp,sp,-8
81122fc4:	de00012e 	bgeu	sp,et,81122fcc <__floatunsidf+0xc>
81122fc8:	003b68fa 	trap	3
81122fcc:	dc000015 	stw	r16,0(sp)
81122fd0:	dfc00115 	stw	ra,4(sp)
81122fd4:	2021883a 	mov	r16,r4
81122fd8:	20002226 	beq	r4,zero,81123064 <__floatunsidf+0xa4>
81122fdc:	110d7200 	call	8110d720 <__clzsi2>
81122fe0:	01010784 	movi	r4,1054
81122fe4:	2089c83a 	sub	r4,r4,r2
81122fe8:	01810cc4 	movi	r6,1075
81122fec:	310dc83a 	sub	r6,r6,r4
81122ff0:	00c007c4 	movi	r3,31
81122ff4:	1980120e 	bge	r3,r6,81123040 <__floatunsidf+0x80>
81122ff8:	00c104c4 	movi	r3,1043
81122ffc:	1907c83a 	sub	r3,r3,r4
81123000:	80ca983a 	sll	r5,r16,r3
81123004:	00800434 	movhi	r2,16
81123008:	10bfffc4 	addi	r2,r2,-1
8112300c:	2101ffcc 	andi	r4,r4,2047
81123010:	0021883a 	mov	r16,zero
81123014:	288a703a 	and	r5,r5,r2
81123018:	2008953a 	slli	r4,r4,20
8112301c:	00c00434 	movhi	r3,16
81123020:	18ffffc4 	addi	r3,r3,-1
81123024:	28c6703a 	and	r3,r5,r3
81123028:	8005883a 	mov	r2,r16
8112302c:	1906b03a 	or	r3,r3,r4
81123030:	dfc00117 	ldw	ra,4(sp)
81123034:	dc000017 	ldw	r16,0(sp)
81123038:	dec00204 	addi	sp,sp,8
8112303c:	f800283a 	ret
81123040:	00c002c4 	movi	r3,11
81123044:	188bc83a 	sub	r5,r3,r2
81123048:	814ad83a 	srl	r5,r16,r5
8112304c:	00c00434 	movhi	r3,16
81123050:	18ffffc4 	addi	r3,r3,-1
81123054:	81a0983a 	sll	r16,r16,r6
81123058:	2101ffcc 	andi	r4,r4,2047
8112305c:	28ca703a 	and	r5,r5,r3
81123060:	003fed06 	br	81123018 <__reset+0xfb103018>
81123064:	0009883a 	mov	r4,zero
81123068:	000b883a 	mov	r5,zero
8112306c:	003fea06 	br	81123018 <__reset+0xfb103018>

81123070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81123070:	defffe04 	addi	sp,sp,-8
81123074:	de00012e 	bgeu	sp,et,8112307c <alt_get_errno+0xc>
81123078:	003b68fa 	trap	3
8112307c:	dfc00115 	stw	ra,4(sp)
81123080:	df000015 	stw	fp,0(sp)
81123084:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81123088:	d0a01617 	ldw	r2,-32680(gp)
8112308c:	10000326 	beq	r2,zero,8112309c <alt_get_errno+0x2c>
81123090:	d0a01617 	ldw	r2,-32680(gp)
81123094:	103ee83a 	callr	r2
81123098:	00000106 	br	811230a0 <alt_get_errno+0x30>
8112309c:	d0a06b04 	addi	r2,gp,-32340
}
811230a0:	e037883a 	mov	sp,fp
811230a4:	dfc00117 	ldw	ra,4(sp)
811230a8:	df000017 	ldw	fp,0(sp)
811230ac:	dec00204 	addi	sp,sp,8
811230b0:	f800283a 	ret

811230b4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811230b4:	defffb04 	addi	sp,sp,-20
811230b8:	de00012e 	bgeu	sp,et,811230c0 <close+0xc>
811230bc:	003b68fa 	trap	3
811230c0:	dfc00415 	stw	ra,16(sp)
811230c4:	df000315 	stw	fp,12(sp)
811230c8:	df000304 	addi	fp,sp,12
811230cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811230d0:	e0bfff17 	ldw	r2,-4(fp)
811230d4:	10000616 	blt	r2,zero,811230f0 <close+0x3c>
811230d8:	e0bfff17 	ldw	r2,-4(fp)
811230dc:	10c00324 	muli	r3,r2,12
811230e0:	00a04534 	movhi	r2,33044
811230e4:	10aeee04 	addi	r2,r2,-17480
811230e8:	1885883a 	add	r2,r3,r2
811230ec:	00000106 	br	811230f4 <close+0x40>
811230f0:	0005883a 	mov	r2,zero
811230f4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811230f8:	e0bffd17 	ldw	r2,-12(fp)
811230fc:	10001926 	beq	r2,zero,81123164 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81123100:	e0bffd17 	ldw	r2,-12(fp)
81123104:	10800017 	ldw	r2,0(r2)
81123108:	10800417 	ldw	r2,16(r2)
8112310c:	10000626 	beq	r2,zero,81123128 <close+0x74>
81123110:	e0bffd17 	ldw	r2,-12(fp)
81123114:	10800017 	ldw	r2,0(r2)
81123118:	10800417 	ldw	r2,16(r2)
8112311c:	e13ffd17 	ldw	r4,-12(fp)
81123120:	103ee83a 	callr	r2
81123124:	00000106 	br	8112312c <close+0x78>
81123128:	0005883a 	mov	r2,zero
8112312c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81123130:	e13fff17 	ldw	r4,-4(fp)
81123134:	112396c0 	call	8112396c <alt_release_fd>
    if (rval < 0)
81123138:	e0bffe17 	ldw	r2,-8(fp)
8112313c:	1000070e 	bge	r2,zero,8112315c <close+0xa8>
    {
      ALT_ERRNO = -rval;
81123140:	11230700 	call	81123070 <alt_get_errno>
81123144:	1007883a 	mov	r3,r2
81123148:	e0bffe17 	ldw	r2,-8(fp)
8112314c:	0085c83a 	sub	r2,zero,r2
81123150:	18800015 	stw	r2,0(r3)
      return -1;
81123154:	00bfffc4 	movi	r2,-1
81123158:	00000706 	br	81123178 <close+0xc4>
    }
    return 0;
8112315c:	0005883a 	mov	r2,zero
81123160:	00000506 	br	81123178 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81123164:	11230700 	call	81123070 <alt_get_errno>
81123168:	1007883a 	mov	r3,r2
8112316c:	00801444 	movi	r2,81
81123170:	18800015 	stw	r2,0(r3)
    return -1;
81123174:	00bfffc4 	movi	r2,-1
  }
}
81123178:	e037883a 	mov	sp,fp
8112317c:	dfc00117 	ldw	ra,4(sp)
81123180:	df000017 	ldw	fp,0(sp)
81123184:	dec00204 	addi	sp,sp,8
81123188:	f800283a 	ret

8112318c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
8112318c:	deffff04 	addi	sp,sp,-4
81123190:	de00012e 	bgeu	sp,et,81123198 <alt_dcache_flush_all+0xc>
81123194:	003b68fa 	trap	3
81123198:	df000015 	stw	fp,0(sp)
8112319c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
811231a0:	0001883a 	nop
811231a4:	e037883a 	mov	sp,fp
811231a8:	df000017 	ldw	fp,0(sp)
811231ac:	dec00104 	addi	sp,sp,4
811231b0:	f800283a 	ret

811231b4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
811231b4:	defffc04 	addi	sp,sp,-16
811231b8:	de00012e 	bgeu	sp,et,811231c0 <alt_dev_null_write+0xc>
811231bc:	003b68fa 	trap	3
811231c0:	df000315 	stw	fp,12(sp)
811231c4:	df000304 	addi	fp,sp,12
811231c8:	e13ffd15 	stw	r4,-12(fp)
811231cc:	e17ffe15 	stw	r5,-8(fp)
811231d0:	e1bfff15 	stw	r6,-4(fp)
  return len;
811231d4:	e0bfff17 	ldw	r2,-4(fp)
}
811231d8:	e037883a 	mov	sp,fp
811231dc:	df000017 	ldw	fp,0(sp)
811231e0:	dec00104 	addi	sp,sp,4
811231e4:	f800283a 	ret

811231e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811231e8:	defffe04 	addi	sp,sp,-8
811231ec:	de00012e 	bgeu	sp,et,811231f4 <alt_get_errno+0xc>
811231f0:	003b68fa 	trap	3
811231f4:	dfc00115 	stw	ra,4(sp)
811231f8:	df000015 	stw	fp,0(sp)
811231fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81123200:	d0a01617 	ldw	r2,-32680(gp)
81123204:	10000326 	beq	r2,zero,81123214 <alt_get_errno+0x2c>
81123208:	d0a01617 	ldw	r2,-32680(gp)
8112320c:	103ee83a 	callr	r2
81123210:	00000106 	br	81123218 <alt_get_errno+0x30>
81123214:	d0a06b04 	addi	r2,gp,-32340
}
81123218:	e037883a 	mov	sp,fp
8112321c:	dfc00117 	ldw	ra,4(sp)
81123220:	df000017 	ldw	fp,0(sp)
81123224:	dec00204 	addi	sp,sp,8
81123228:	f800283a 	ret

8112322c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
8112322c:	defffb04 	addi	sp,sp,-20
81123230:	de00012e 	bgeu	sp,et,81123238 <fstat+0xc>
81123234:	003b68fa 	trap	3
81123238:	dfc00415 	stw	ra,16(sp)
8112323c:	df000315 	stw	fp,12(sp)
81123240:	df000304 	addi	fp,sp,12
81123244:	e13ffe15 	stw	r4,-8(fp)
81123248:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112324c:	e0bffe17 	ldw	r2,-8(fp)
81123250:	10000616 	blt	r2,zero,8112326c <fstat+0x40>
81123254:	e0bffe17 	ldw	r2,-8(fp)
81123258:	10c00324 	muli	r3,r2,12
8112325c:	00a04534 	movhi	r2,33044
81123260:	10aeee04 	addi	r2,r2,-17480
81123264:	1885883a 	add	r2,r3,r2
81123268:	00000106 	br	81123270 <fstat+0x44>
8112326c:	0005883a 	mov	r2,zero
81123270:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81123274:	e0bffd17 	ldw	r2,-12(fp)
81123278:	10001026 	beq	r2,zero,811232bc <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
8112327c:	e0bffd17 	ldw	r2,-12(fp)
81123280:	10800017 	ldw	r2,0(r2)
81123284:	10800817 	ldw	r2,32(r2)
81123288:	10000726 	beq	r2,zero,811232a8 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
8112328c:	e0bffd17 	ldw	r2,-12(fp)
81123290:	10800017 	ldw	r2,0(r2)
81123294:	10800817 	ldw	r2,32(r2)
81123298:	e17fff17 	ldw	r5,-4(fp)
8112329c:	e13ffd17 	ldw	r4,-12(fp)
811232a0:	103ee83a 	callr	r2
811232a4:	00000a06 	br	811232d0 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811232a8:	e0bfff17 	ldw	r2,-4(fp)
811232ac:	00c80004 	movi	r3,8192
811232b0:	10c00115 	stw	r3,4(r2)
      return 0;
811232b4:	0005883a 	mov	r2,zero
811232b8:	00000506 	br	811232d0 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811232bc:	11231e80 	call	811231e8 <alt_get_errno>
811232c0:	1007883a 	mov	r3,r2
811232c4:	00801444 	movi	r2,81
811232c8:	18800015 	stw	r2,0(r3)
    return -1;
811232cc:	00bfffc4 	movi	r2,-1
  }
}
811232d0:	e037883a 	mov	sp,fp
811232d4:	dfc00117 	ldw	ra,4(sp)
811232d8:	df000017 	ldw	fp,0(sp)
811232dc:	dec00204 	addi	sp,sp,8
811232e0:	f800283a 	ret

811232e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811232e4:	defffe04 	addi	sp,sp,-8
811232e8:	de00012e 	bgeu	sp,et,811232f0 <alt_get_errno+0xc>
811232ec:	003b68fa 	trap	3
811232f0:	dfc00115 	stw	ra,4(sp)
811232f4:	df000015 	stw	fp,0(sp)
811232f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811232fc:	d0a01617 	ldw	r2,-32680(gp)
81123300:	10000326 	beq	r2,zero,81123310 <alt_get_errno+0x2c>
81123304:	d0a01617 	ldw	r2,-32680(gp)
81123308:	103ee83a 	callr	r2
8112330c:	00000106 	br	81123314 <alt_get_errno+0x30>
81123310:	d0a06b04 	addi	r2,gp,-32340
}
81123314:	e037883a 	mov	sp,fp
81123318:	dfc00117 	ldw	ra,4(sp)
8112331c:	df000017 	ldw	fp,0(sp)
81123320:	dec00204 	addi	sp,sp,8
81123324:	f800283a 	ret

81123328 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81123328:	deffed04 	addi	sp,sp,-76
8112332c:	de00012e 	bgeu	sp,et,81123334 <isatty+0xc>
81123330:	003b68fa 	trap	3
81123334:	dfc01215 	stw	ra,72(sp)
81123338:	df001115 	stw	fp,68(sp)
8112333c:	df001104 	addi	fp,sp,68
81123340:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81123344:	e0bfff17 	ldw	r2,-4(fp)
81123348:	10000616 	blt	r2,zero,81123364 <isatty+0x3c>
8112334c:	e0bfff17 	ldw	r2,-4(fp)
81123350:	10c00324 	muli	r3,r2,12
81123354:	00a04534 	movhi	r2,33044
81123358:	10aeee04 	addi	r2,r2,-17480
8112335c:	1885883a 	add	r2,r3,r2
81123360:	00000106 	br	81123368 <isatty+0x40>
81123364:	0005883a 	mov	r2,zero
81123368:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
8112336c:	e0bfef17 	ldw	r2,-68(fp)
81123370:	10000e26 	beq	r2,zero,811233ac <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81123374:	e0bfef17 	ldw	r2,-68(fp)
81123378:	10800017 	ldw	r2,0(r2)
8112337c:	10800817 	ldw	r2,32(r2)
81123380:	1000021e 	bne	r2,zero,8112338c <isatty+0x64>
    {
      return 1;
81123384:	00800044 	movi	r2,1
81123388:	00000d06 	br	811233c0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
8112338c:	e0bff004 	addi	r2,fp,-64
81123390:	100b883a 	mov	r5,r2
81123394:	e13fff17 	ldw	r4,-4(fp)
81123398:	112322c0 	call	8112322c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
8112339c:	e0bff117 	ldw	r2,-60(fp)
811233a0:	10880020 	cmpeqi	r2,r2,8192
811233a4:	10803fcc 	andi	r2,r2,255
811233a8:	00000506 	br	811233c0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811233ac:	11232e40 	call	811232e4 <alt_get_errno>
811233b0:	1007883a 	mov	r3,r2
811233b4:	00801444 	movi	r2,81
811233b8:	18800015 	stw	r2,0(r3)
    return 0;
811233bc:	0005883a 	mov	r2,zero
  }
}
811233c0:	e037883a 	mov	sp,fp
811233c4:	dfc00117 	ldw	ra,4(sp)
811233c8:	df000017 	ldw	fp,0(sp)
811233cc:	dec00204 	addi	sp,sp,8
811233d0:	f800283a 	ret

811233d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811233d4:	defffe04 	addi	sp,sp,-8
811233d8:	de00012e 	bgeu	sp,et,811233e0 <alt_get_errno+0xc>
811233dc:	003b68fa 	trap	3
811233e0:	dfc00115 	stw	ra,4(sp)
811233e4:	df000015 	stw	fp,0(sp)
811233e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811233ec:	d0a01617 	ldw	r2,-32680(gp)
811233f0:	10000326 	beq	r2,zero,81123400 <alt_get_errno+0x2c>
811233f4:	d0a01617 	ldw	r2,-32680(gp)
811233f8:	103ee83a 	callr	r2
811233fc:	00000106 	br	81123404 <alt_get_errno+0x30>
81123400:	d0a06b04 	addi	r2,gp,-32340
}
81123404:	e037883a 	mov	sp,fp
81123408:	dfc00117 	ldw	ra,4(sp)
8112340c:	df000017 	ldw	fp,0(sp)
81123410:	dec00204 	addi	sp,sp,8
81123414:	f800283a 	ret

81123418 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81123418:	defff904 	addi	sp,sp,-28
8112341c:	de00012e 	bgeu	sp,et,81123424 <lseek+0xc>
81123420:	003b68fa 	trap	3
81123424:	dfc00615 	stw	ra,24(sp)
81123428:	df000515 	stw	fp,20(sp)
8112342c:	df000504 	addi	fp,sp,20
81123430:	e13ffd15 	stw	r4,-12(fp)
81123434:	e17ffe15 	stw	r5,-8(fp)
81123438:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
8112343c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81123440:	e0bffd17 	ldw	r2,-12(fp)
81123444:	10000616 	blt	r2,zero,81123460 <lseek+0x48>
81123448:	e0bffd17 	ldw	r2,-12(fp)
8112344c:	10c00324 	muli	r3,r2,12
81123450:	00a04534 	movhi	r2,33044
81123454:	10aeee04 	addi	r2,r2,-17480
81123458:	1885883a 	add	r2,r3,r2
8112345c:	00000106 	br	81123464 <lseek+0x4c>
81123460:	0005883a 	mov	r2,zero
81123464:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81123468:	e0bffc17 	ldw	r2,-16(fp)
8112346c:	10001026 	beq	r2,zero,811234b0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81123470:	e0bffc17 	ldw	r2,-16(fp)
81123474:	10800017 	ldw	r2,0(r2)
81123478:	10800717 	ldw	r2,28(r2)
8112347c:	10000926 	beq	r2,zero,811234a4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81123480:	e0bffc17 	ldw	r2,-16(fp)
81123484:	10800017 	ldw	r2,0(r2)
81123488:	10800717 	ldw	r2,28(r2)
8112348c:	e1bfff17 	ldw	r6,-4(fp)
81123490:	e17ffe17 	ldw	r5,-8(fp)
81123494:	e13ffc17 	ldw	r4,-16(fp)
81123498:	103ee83a 	callr	r2
8112349c:	e0bffb15 	stw	r2,-20(fp)
811234a0:	00000506 	br	811234b8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
811234a4:	00bfde84 	movi	r2,-134
811234a8:	e0bffb15 	stw	r2,-20(fp)
811234ac:	00000206 	br	811234b8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
811234b0:	00bfebc4 	movi	r2,-81
811234b4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
811234b8:	e0bffb17 	ldw	r2,-20(fp)
811234bc:	1000070e 	bge	r2,zero,811234dc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
811234c0:	11233d40 	call	811233d4 <alt_get_errno>
811234c4:	1007883a 	mov	r3,r2
811234c8:	e0bffb17 	ldw	r2,-20(fp)
811234cc:	0085c83a 	sub	r2,zero,r2
811234d0:	18800015 	stw	r2,0(r3)
    rc = -1;
811234d4:	00bfffc4 	movi	r2,-1
811234d8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
811234dc:	e0bffb17 	ldw	r2,-20(fp)
}
811234e0:	e037883a 	mov	sp,fp
811234e4:	dfc00117 	ldw	ra,4(sp)
811234e8:	df000017 	ldw	fp,0(sp)
811234ec:	dec00204 	addi	sp,sp,8
811234f0:	f800283a 	ret

811234f4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
811234f4:	defff904 	addi	sp,sp,-28
811234f8:	de00012e 	bgeu	sp,et,81123500 <alt_main+0xc>
811234fc:	003b68fa 	trap	3
81123500:	dfc00615 	stw	ra,24(sp)
81123504:	df000515 	stw	fp,20(sp)
81123508:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
8112350c:	0009883a 	mov	r4,zero
81123510:	112e02c0 	call	8112e02c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81123514:	1124ac00 	call	81124ac0 <OSInit>
81123518:	01000044 	movi	r4,1
8112351c:	112a7dc0 	call	8112a7dc <OSSemCreate>
81123520:	d0a07915 	stw	r2,-32284(gp)
81123524:	01000044 	movi	r4,1
81123528:	112a7dc0 	call	8112a7dc <OSSemCreate>
8112352c:	d0a07b15 	stw	r2,-32276(gp)
81123530:	d0a07204 	addi	r2,gp,-32312
81123534:	e0bffc15 	stw	r2,-16(fp)
81123538:	00800044 	movi	r2,1
8112353c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81123540:	e0bffd0b 	ldhu	r2,-12(fp)
81123544:	1009883a 	mov	r4,r2
81123548:	112a7dc0 	call	8112a7dc <OSSemCreate>
8112354c:	1007883a 	mov	r3,r2
81123550:	e0bffc17 	ldw	r2,-16(fp)
81123554:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81123558:	112e06c0 	call	8112e06c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
8112355c:	01a04534 	movhi	r6,33044
81123560:	31abb904 	addi	r6,r6,-20764
81123564:	01604534 	movhi	r5,33044
81123568:	296bbe04 	addi	r5,r5,-20744
8112356c:	01204534 	movhi	r4,33044
81123570:	212bbe04 	addi	r4,r4,-20744
81123574:	113792c0 	call	8113792c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
81123578:	113723c0 	call	8113723c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
8112357c:	012044f4 	movhi	r4,33043
81123580:	211ca904 	addi	r4,r4,29348
81123584:	11380e00 	call	811380e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81123588:	d0a07317 	ldw	r2,-32308(gp)
8112358c:	d0e07417 	ldw	r3,-32304(gp)
81123590:	d1207517 	ldw	r4,-32300(gp)
81123594:	200d883a 	mov	r6,r4
81123598:	180b883a 	mov	r5,r3
8112359c:	1009883a 	mov	r4,r2
811235a0:	11096900 	call	81109690 <main>
811235a4:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
811235a8:	01000044 	movi	r4,1
811235ac:	11230b40 	call	811230b4 <close>
  exit (result);
811235b0:	e13ffb17 	ldw	r4,-20(fp)
811235b4:	11380f40 	call	811380f4 <exit>

811235b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811235b8:	defffe04 	addi	sp,sp,-8
811235bc:	de00012e 	bgeu	sp,et,811235c4 <alt_get_errno+0xc>
811235c0:	003b68fa 	trap	3
811235c4:	dfc00115 	stw	ra,4(sp)
811235c8:	df000015 	stw	fp,0(sp)
811235cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811235d0:	d0a01617 	ldw	r2,-32680(gp)
811235d4:	10000326 	beq	r2,zero,811235e4 <alt_get_errno+0x2c>
811235d8:	d0a01617 	ldw	r2,-32680(gp)
811235dc:	103ee83a 	callr	r2
811235e0:	00000106 	br	811235e8 <alt_get_errno+0x30>
811235e4:	d0a06b04 	addi	r2,gp,-32340
}
811235e8:	e037883a 	mov	sp,fp
811235ec:	dfc00117 	ldw	ra,4(sp)
811235f0:	df000017 	ldw	fp,0(sp)
811235f4:	dec00204 	addi	sp,sp,8
811235f8:	f800283a 	ret

811235fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
811235fc:	defffd04 	addi	sp,sp,-12
81123600:	de00012e 	bgeu	sp,et,81123608 <alt_file_locked+0xc>
81123604:	003b68fa 	trap	3
81123608:	df000215 	stw	fp,8(sp)
8112360c:	df000204 	addi	fp,sp,8
81123610:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81123614:	e0bfff17 	ldw	r2,-4(fp)
81123618:	10800217 	ldw	r2,8(r2)
8112361c:	10d00034 	orhi	r3,r2,16384
81123620:	e0bfff17 	ldw	r2,-4(fp)
81123624:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81123628:	e03ffe15 	stw	zero,-8(fp)
8112362c:	00001d06 	br	811236a4 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81123630:	00a04534 	movhi	r2,33044
81123634:	10aeee04 	addi	r2,r2,-17480
81123638:	e0fffe17 	ldw	r3,-8(fp)
8112363c:	18c00324 	muli	r3,r3,12
81123640:	10c5883a 	add	r2,r2,r3
81123644:	10c00017 	ldw	r3,0(r2)
81123648:	e0bfff17 	ldw	r2,-4(fp)
8112364c:	10800017 	ldw	r2,0(r2)
81123650:	1880111e 	bne	r3,r2,81123698 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81123654:	00a04534 	movhi	r2,33044
81123658:	10aeee04 	addi	r2,r2,-17480
8112365c:	e0fffe17 	ldw	r3,-8(fp)
81123660:	18c00324 	muli	r3,r3,12
81123664:	10c5883a 	add	r2,r2,r3
81123668:	10800204 	addi	r2,r2,8
8112366c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81123670:	1000090e 	bge	r2,zero,81123698 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81123674:	e0bffe17 	ldw	r2,-8(fp)
81123678:	10c00324 	muli	r3,r2,12
8112367c:	00a04534 	movhi	r2,33044
81123680:	10aeee04 	addi	r2,r2,-17480
81123684:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81123688:	e0bfff17 	ldw	r2,-4(fp)
8112368c:	18800226 	beq	r3,r2,81123698 <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81123690:	00bffcc4 	movi	r2,-13
81123694:	00000806 	br	811236b8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81123698:	e0bffe17 	ldw	r2,-8(fp)
8112369c:	10800044 	addi	r2,r2,1
811236a0:	e0bffe15 	stw	r2,-8(fp)
811236a4:	d0a01517 	ldw	r2,-32684(gp)
811236a8:	1007883a 	mov	r3,r2
811236ac:	e0bffe17 	ldw	r2,-8(fp)
811236b0:	18bfdf2e 	bgeu	r3,r2,81123630 <__reset+0xfb103630>
    }
  }
  
  /* The device is not locked */
 
  return 0;
811236b4:	0005883a 	mov	r2,zero
}
811236b8:	e037883a 	mov	sp,fp
811236bc:	df000017 	ldw	fp,0(sp)
811236c0:	dec00104 	addi	sp,sp,4
811236c4:	f800283a 	ret

811236c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
811236c8:	defff604 	addi	sp,sp,-40
811236cc:	de00012e 	bgeu	sp,et,811236d4 <open+0xc>
811236d0:	003b68fa 	trap	3
811236d4:	dfc00915 	stw	ra,36(sp)
811236d8:	df000815 	stw	fp,32(sp)
811236dc:	df000804 	addi	fp,sp,32
811236e0:	e13ffd15 	stw	r4,-12(fp)
811236e4:	e17ffe15 	stw	r5,-8(fp)
811236e8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
811236ec:	00bfffc4 	movi	r2,-1
811236f0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
811236f4:	00bffb44 	movi	r2,-19
811236f8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
811236fc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81123700:	d1601304 	addi	r5,gp,-32692
81123704:	e13ffd17 	ldw	r4,-12(fp)
81123708:	113730c0 	call	8113730c <alt_find_dev>
8112370c:	e0bff815 	stw	r2,-32(fp)
81123710:	e0bff817 	ldw	r2,-32(fp)
81123714:	1000051e 	bne	r2,zero,8112372c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81123718:	e13ffd17 	ldw	r4,-12(fp)
8112371c:	11373a40 	call	811373a4 <alt_find_file>
81123720:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81123724:	00800044 	movi	r2,1
81123728:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
8112372c:	e0bff817 	ldw	r2,-32(fp)
81123730:	10002926 	beq	r2,zero,811237d8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
81123734:	e13ff817 	ldw	r4,-32(fp)
81123738:	11374b40 	call	811374b4 <alt_get_fd>
8112373c:	e0bff915 	stw	r2,-28(fp)
81123740:	e0bff917 	ldw	r2,-28(fp)
81123744:	1000030e 	bge	r2,zero,81123754 <open+0x8c>
    {
      status = index;
81123748:	e0bff917 	ldw	r2,-28(fp)
8112374c:	e0bffa15 	stw	r2,-24(fp)
81123750:	00002306 	br	811237e0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
81123754:	e0bff917 	ldw	r2,-28(fp)
81123758:	10c00324 	muli	r3,r2,12
8112375c:	00a04534 	movhi	r2,33044
81123760:	10aeee04 	addi	r2,r2,-17480
81123764:	1885883a 	add	r2,r3,r2
81123768:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
8112376c:	e0fffe17 	ldw	r3,-8(fp)
81123770:	00900034 	movhi	r2,16384
81123774:	10bfffc4 	addi	r2,r2,-1
81123778:	1886703a 	and	r3,r3,r2
8112377c:	e0bffc17 	ldw	r2,-16(fp)
81123780:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81123784:	e0bffb17 	ldw	r2,-20(fp)
81123788:	1000051e 	bne	r2,zero,811237a0 <open+0xd8>
8112378c:	e13ffc17 	ldw	r4,-16(fp)
81123790:	11235fc0 	call	811235fc <alt_file_locked>
81123794:	e0bffa15 	stw	r2,-24(fp)
81123798:	e0bffa17 	ldw	r2,-24(fp)
8112379c:	10001016 	blt	r2,zero,811237e0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
811237a0:	e0bff817 	ldw	r2,-32(fp)
811237a4:	10800317 	ldw	r2,12(r2)
811237a8:	10000826 	beq	r2,zero,811237cc <open+0x104>
811237ac:	e0bff817 	ldw	r2,-32(fp)
811237b0:	10800317 	ldw	r2,12(r2)
811237b4:	e1ffff17 	ldw	r7,-4(fp)
811237b8:	e1bffe17 	ldw	r6,-8(fp)
811237bc:	e17ffd17 	ldw	r5,-12(fp)
811237c0:	e13ffc17 	ldw	r4,-16(fp)
811237c4:	103ee83a 	callr	r2
811237c8:	00000106 	br	811237d0 <open+0x108>
811237cc:	0005883a 	mov	r2,zero
811237d0:	e0bffa15 	stw	r2,-24(fp)
811237d4:	00000206 	br	811237e0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
811237d8:	00bffb44 	movi	r2,-19
811237dc:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
811237e0:	e0bffa17 	ldw	r2,-24(fp)
811237e4:	1000090e 	bge	r2,zero,8112380c <open+0x144>
  {
    alt_release_fd (index);  
811237e8:	e13ff917 	ldw	r4,-28(fp)
811237ec:	112396c0 	call	8112396c <alt_release_fd>
    ALT_ERRNO = -status;
811237f0:	11235b80 	call	811235b8 <alt_get_errno>
811237f4:	1007883a 	mov	r3,r2
811237f8:	e0bffa17 	ldw	r2,-24(fp)
811237fc:	0085c83a 	sub	r2,zero,r2
81123800:	18800015 	stw	r2,0(r3)
    return -1;
81123804:	00bfffc4 	movi	r2,-1
81123808:	00000106 	br	81123810 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
8112380c:	e0bff917 	ldw	r2,-28(fp)
}
81123810:	e037883a 	mov	sp,fp
81123814:	dfc00117 	ldw	ra,4(sp)
81123818:	df000017 	ldw	fp,0(sp)
8112381c:	dec00204 	addi	sp,sp,8
81123820:	f800283a 	ret

81123824 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81123824:	defffe04 	addi	sp,sp,-8
81123828:	de00012e 	bgeu	sp,et,81123830 <alt_get_errno+0xc>
8112382c:	003b68fa 	trap	3
81123830:	dfc00115 	stw	ra,4(sp)
81123834:	df000015 	stw	fp,0(sp)
81123838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112383c:	d0a01617 	ldw	r2,-32680(gp)
81123840:	10000326 	beq	r2,zero,81123850 <alt_get_errno+0x2c>
81123844:	d0a01617 	ldw	r2,-32680(gp)
81123848:	103ee83a 	callr	r2
8112384c:	00000106 	br	81123854 <alt_get_errno+0x30>
81123850:	d0a06b04 	addi	r2,gp,-32340
}
81123854:	e037883a 	mov	sp,fp
81123858:	dfc00117 	ldw	ra,4(sp)
8112385c:	df000017 	ldw	fp,0(sp)
81123860:	dec00204 	addi	sp,sp,8
81123864:	f800283a 	ret

81123868 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81123868:	defff904 	addi	sp,sp,-28
8112386c:	de00012e 	bgeu	sp,et,81123874 <read+0xc>
81123870:	003b68fa 	trap	3
81123874:	dfc00615 	stw	ra,24(sp)
81123878:	df000515 	stw	fp,20(sp)
8112387c:	df000504 	addi	fp,sp,20
81123880:	e13ffd15 	stw	r4,-12(fp)
81123884:	e17ffe15 	stw	r5,-8(fp)
81123888:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
8112388c:	e0bffd17 	ldw	r2,-12(fp)
81123890:	10000616 	blt	r2,zero,811238ac <read+0x44>
81123894:	e0bffd17 	ldw	r2,-12(fp)
81123898:	10c00324 	muli	r3,r2,12
8112389c:	00a04534 	movhi	r2,33044
811238a0:	10aeee04 	addi	r2,r2,-17480
811238a4:	1885883a 	add	r2,r3,r2
811238a8:	00000106 	br	811238b0 <read+0x48>
811238ac:	0005883a 	mov	r2,zero
811238b0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811238b4:	e0bffb17 	ldw	r2,-20(fp)
811238b8:	10002226 	beq	r2,zero,81123944 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811238bc:	e0bffb17 	ldw	r2,-20(fp)
811238c0:	10800217 	ldw	r2,8(r2)
811238c4:	108000cc 	andi	r2,r2,3
811238c8:	10800060 	cmpeqi	r2,r2,1
811238cc:	1000181e 	bne	r2,zero,81123930 <read+0xc8>
        (fd->dev->read))
811238d0:	e0bffb17 	ldw	r2,-20(fp)
811238d4:	10800017 	ldw	r2,0(r2)
811238d8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811238dc:	10001426 	beq	r2,zero,81123930 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
811238e0:	e0bffb17 	ldw	r2,-20(fp)
811238e4:	10800017 	ldw	r2,0(r2)
811238e8:	10800517 	ldw	r2,20(r2)
811238ec:	e0ffff17 	ldw	r3,-4(fp)
811238f0:	180d883a 	mov	r6,r3
811238f4:	e17ffe17 	ldw	r5,-8(fp)
811238f8:	e13ffb17 	ldw	r4,-20(fp)
811238fc:	103ee83a 	callr	r2
81123900:	e0bffc15 	stw	r2,-16(fp)
81123904:	e0bffc17 	ldw	r2,-16(fp)
81123908:	1000070e 	bge	r2,zero,81123928 <read+0xc0>
        {
          ALT_ERRNO = -rval;
8112390c:	11238240 	call	81123824 <alt_get_errno>
81123910:	1007883a 	mov	r3,r2
81123914:	e0bffc17 	ldw	r2,-16(fp)
81123918:	0085c83a 	sub	r2,zero,r2
8112391c:	18800015 	stw	r2,0(r3)
          return -1;
81123920:	00bfffc4 	movi	r2,-1
81123924:	00000c06 	br	81123958 <read+0xf0>
        }
        return rval;
81123928:	e0bffc17 	ldw	r2,-16(fp)
8112392c:	00000a06 	br	81123958 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
81123930:	11238240 	call	81123824 <alt_get_errno>
81123934:	1007883a 	mov	r3,r2
81123938:	00800344 	movi	r2,13
8112393c:	18800015 	stw	r2,0(r3)
81123940:	00000406 	br	81123954 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81123944:	11238240 	call	81123824 <alt_get_errno>
81123948:	1007883a 	mov	r3,r2
8112394c:	00801444 	movi	r2,81
81123950:	18800015 	stw	r2,0(r3)
  }
  return -1;
81123954:	00bfffc4 	movi	r2,-1
}
81123958:	e037883a 	mov	sp,fp
8112395c:	dfc00117 	ldw	ra,4(sp)
81123960:	df000017 	ldw	fp,0(sp)
81123964:	dec00204 	addi	sp,sp,8
81123968:	f800283a 	ret

8112396c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
8112396c:	defffe04 	addi	sp,sp,-8
81123970:	de00012e 	bgeu	sp,et,81123978 <alt_release_fd+0xc>
81123974:	003b68fa 	trap	3
81123978:	df000115 	stw	fp,4(sp)
8112397c:	df000104 	addi	fp,sp,4
81123980:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81123984:	e0bfff17 	ldw	r2,-4(fp)
81123988:	108000d0 	cmplti	r2,r2,3
8112398c:	10000d1e 	bne	r2,zero,811239c4 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
81123990:	00a04534 	movhi	r2,33044
81123994:	10aeee04 	addi	r2,r2,-17480
81123998:	e0ffff17 	ldw	r3,-4(fp)
8112399c:	18c00324 	muli	r3,r3,12
811239a0:	10c5883a 	add	r2,r2,r3
811239a4:	10800204 	addi	r2,r2,8
811239a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
811239ac:	00a04534 	movhi	r2,33044
811239b0:	10aeee04 	addi	r2,r2,-17480
811239b4:	e0ffff17 	ldw	r3,-4(fp)
811239b8:	18c00324 	muli	r3,r3,12
811239bc:	10c5883a 	add	r2,r2,r3
811239c0:	10000015 	stw	zero,0(r2)
  }
}
811239c4:	0001883a 	nop
811239c8:	e037883a 	mov	sp,fp
811239cc:	df000017 	ldw	fp,0(sp)
811239d0:	dec00104 	addi	sp,sp,4
811239d4:	f800283a 	ret

811239d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
811239d8:	defff604 	addi	sp,sp,-40
811239dc:	de00012e 	bgeu	sp,et,811239e4 <sbrk+0xc>
811239e0:	003b68fa 	trap	3
811239e4:	df000915 	stw	fp,36(sp)
811239e8:	df000904 	addi	fp,sp,36
811239ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811239f0:	0005303a 	rdctl	r2,status
811239f4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811239f8:	e0fffe17 	ldw	r3,-8(fp)
811239fc:	00bfff84 	movi	r2,-2
81123a00:	1884703a 	and	r2,r3,r2
81123a04:	1001703a 	wrctl	status,r2
  
  return context;
81123a08:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81123a0c:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81123a10:	d0a01717 	ldw	r2,-32676(gp)
81123a14:	10c000c4 	addi	r3,r2,3
81123a18:	00bfff04 	movi	r2,-4
81123a1c:	1884703a 	and	r2,r3,r2
81123a20:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81123a24:	d0e01717 	ldw	r3,-32676(gp)
81123a28:	e0bfff17 	ldw	r2,-4(fp)
81123a2c:	1887883a 	add	r3,r3,r2
81123a30:	00a04834 	movhi	r2,33056
81123a34:	10a80004 	addi	r2,r2,-24576
81123a38:	10c0062e 	bgeu	r2,r3,81123a54 <sbrk+0x7c>
81123a3c:	e0bff817 	ldw	r2,-32(fp)
81123a40:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123a44:	e0bff717 	ldw	r2,-36(fp)
81123a48:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
81123a4c:	00bfffc4 	movi	r2,-1
81123a50:	00001c06 	br	81123ac4 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
81123a54:	d0a01717 	ldw	r2,-32676(gp)
81123a58:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
81123a5c:	d0e01717 	ldw	r3,-32676(gp)
81123a60:	e0bfff17 	ldw	r2,-4(fp)
81123a64:	1885883a 	add	r2,r3,r2
81123a68:	d0a01715 	stw	r2,-32676(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
81123a6c:	c005883a 	mov	r2,et
81123a70:	e0bff915 	stw	r2,-28(fp)

  return limit; 
81123a74:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
81123a78:	e0bffa17 	ldw	r2,-24(fp)
81123a7c:	18800c1e 	bne	r3,r2,81123ab0 <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
81123a80:	d805883a 	mov	r2,sp
81123a84:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
81123a88:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
81123a8c:	d0e01717 	ldw	r3,-32676(gp)
81123a90:	18800136 	bltu	r3,r2,81123a98 <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
81123a94:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
81123a98:	d0a01717 	ldw	r2,-32676(gp)
81123a9c:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
81123aa0:	e0bffc17 	ldw	r2,-16(fp)
81123aa4:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
81123aa8:	e0bffc17 	ldw	r2,-16(fp)
81123aac:	1031883a 	mov	et,r2
81123ab0:	e0bff817 	ldw	r2,-32(fp)
81123ab4:	e0bffd15 	stw	r2,-12(fp)
81123ab8:	e0bffd17 	ldw	r2,-12(fp)
81123abc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
81123ac0:	e0bffa17 	ldw	r2,-24(fp)
} 
81123ac4:	e037883a 	mov	sp,fp
81123ac8:	df000017 	ldw	fp,0(sp)
81123acc:	dec00104 	addi	sp,sp,4
81123ad0:	f800283a 	ret

81123ad4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81123ad4:	defffa04 	addi	sp,sp,-24
81123ad8:	de00012e 	bgeu	sp,et,81123ae0 <alt_alarm_stop+0xc>
81123adc:	003b68fa 	trap	3
81123ae0:	df000515 	stw	fp,20(sp)
81123ae4:	df000504 	addi	fp,sp,20
81123ae8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123aec:	0005303a 	rdctl	r2,status
81123af0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123af4:	e0fffc17 	ldw	r3,-16(fp)
81123af8:	00bfff84 	movi	r2,-2
81123afc:	1884703a 	and	r2,r3,r2
81123b00:	1001703a 	wrctl	status,r2
  
  return context;
81123b04:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81123b08:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81123b0c:	e0bfff17 	ldw	r2,-4(fp)
81123b10:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
81123b14:	e0bffd17 	ldw	r2,-12(fp)
81123b18:	10800017 	ldw	r2,0(r2)
81123b1c:	e0fffd17 	ldw	r3,-12(fp)
81123b20:	18c00117 	ldw	r3,4(r3)
81123b24:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
81123b28:	e0bffd17 	ldw	r2,-12(fp)
81123b2c:	10800117 	ldw	r2,4(r2)
81123b30:	e0fffd17 	ldw	r3,-12(fp)
81123b34:	18c00017 	ldw	r3,0(r3)
81123b38:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81123b3c:	e0bffd17 	ldw	r2,-12(fp)
81123b40:	e0fffd17 	ldw	r3,-12(fp)
81123b44:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
81123b48:	e0bffd17 	ldw	r2,-12(fp)
81123b4c:	e0fffd17 	ldw	r3,-12(fp)
81123b50:	10c00015 	stw	r3,0(r2)
81123b54:	e0bffb17 	ldw	r2,-20(fp)
81123b58:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123b5c:	e0bffe17 	ldw	r2,-8(fp)
81123b60:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81123b64:	0001883a 	nop
81123b68:	e037883a 	mov	sp,fp
81123b6c:	df000017 	ldw	fp,0(sp)
81123b70:	dec00104 	addi	sp,sp,4
81123b74:	f800283a 	ret

81123b78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81123b78:	defffb04 	addi	sp,sp,-20
81123b7c:	de00012e 	bgeu	sp,et,81123b84 <alt_tick+0xc>
81123b80:	003b68fa 	trap	3
81123b84:	dfc00415 	stw	ra,16(sp)
81123b88:	df000315 	stw	fp,12(sp)
81123b8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
81123b90:	d0a01817 	ldw	r2,-32672(gp)
81123b94:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81123b98:	d0a07717 	ldw	r2,-32292(gp)
81123b9c:	10800044 	addi	r2,r2,1
81123ba0:	d0a07715 	stw	r2,-32292(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81123ba4:	00002e06 	br	81123c60 <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
81123ba8:	e0bffd17 	ldw	r2,-12(fp)
81123bac:	10800017 	ldw	r2,0(r2)
81123bb0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81123bb4:	e0bffd17 	ldw	r2,-12(fp)
81123bb8:	10800403 	ldbu	r2,16(r2)
81123bbc:	10803fcc 	andi	r2,r2,255
81123bc0:	10000426 	beq	r2,zero,81123bd4 <alt_tick+0x5c>
81123bc4:	d0a07717 	ldw	r2,-32292(gp)
81123bc8:	1000021e 	bne	r2,zero,81123bd4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
81123bcc:	e0bffd17 	ldw	r2,-12(fp)
81123bd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81123bd4:	e0bffd17 	ldw	r2,-12(fp)
81123bd8:	10800217 	ldw	r2,8(r2)
81123bdc:	d0e07717 	ldw	r3,-32292(gp)
81123be0:	18801d36 	bltu	r3,r2,81123c58 <alt_tick+0xe0>
81123be4:	e0bffd17 	ldw	r2,-12(fp)
81123be8:	10800403 	ldbu	r2,16(r2)
81123bec:	10803fcc 	andi	r2,r2,255
81123bf0:	1000191e 	bne	r2,zero,81123c58 <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
81123bf4:	e0bffd17 	ldw	r2,-12(fp)
81123bf8:	10800317 	ldw	r2,12(r2)
81123bfc:	e0fffd17 	ldw	r3,-12(fp)
81123c00:	18c00517 	ldw	r3,20(r3)
81123c04:	1809883a 	mov	r4,r3
81123c08:	103ee83a 	callr	r2
81123c0c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
81123c10:	e0bfff17 	ldw	r2,-4(fp)
81123c14:	1000031e 	bne	r2,zero,81123c24 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
81123c18:	e13ffd17 	ldw	r4,-12(fp)
81123c1c:	1123ad40 	call	81123ad4 <alt_alarm_stop>
81123c20:	00000d06 	br	81123c58 <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
81123c24:	e0bffd17 	ldw	r2,-12(fp)
81123c28:	10c00217 	ldw	r3,8(r2)
81123c2c:	e0bfff17 	ldw	r2,-4(fp)
81123c30:	1887883a 	add	r3,r3,r2
81123c34:	e0bffd17 	ldw	r2,-12(fp)
81123c38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81123c3c:	e0bffd17 	ldw	r2,-12(fp)
81123c40:	10c00217 	ldw	r3,8(r2)
81123c44:	d0a07717 	ldw	r2,-32292(gp)
81123c48:	1880032e 	bgeu	r3,r2,81123c58 <alt_tick+0xe0>
        {
          alarm->rollover = 1;
81123c4c:	e0bffd17 	ldw	r2,-12(fp)
81123c50:	00c00044 	movi	r3,1
81123c54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81123c58:	e0bffe17 	ldw	r2,-8(fp)
81123c5c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81123c60:	e0fffd17 	ldw	r3,-12(fp)
81123c64:	d0a01804 	addi	r2,gp,-32672
81123c68:	18bfcf1e 	bne	r3,r2,81123ba8 <__reset+0xfb103ba8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81123c6c:	1124f200 	call	81124f20 <OSTimeTick>
}
81123c70:	0001883a 	nop
81123c74:	e037883a 	mov	sp,fp
81123c78:	dfc00117 	ldw	ra,4(sp)
81123c7c:	df000017 	ldw	fp,0(sp)
81123c80:	dec00204 	addi	sp,sp,8
81123c84:	f800283a 	ret

81123c88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81123c88:	defffb04 	addi	sp,sp,-20
81123c8c:	de00012e 	bgeu	sp,et,81123c94 <usleep+0xc>
81123c90:	003b68fa 	trap	3
81123c94:	dfc00415 	stw	ra,16(sp)
81123c98:	df000315 	stw	fp,12(sp)
81123c9c:	df000304 	addi	fp,sp,12
81123ca0:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81123ca4:	d0a07f03 	ldbu	r2,-32260(gp)
81123ca8:	10803fcc 	andi	r2,r2,255
81123cac:	1000031e 	bne	r2,zero,81123cbc <usleep+0x34>
  {
    return alt_busy_sleep (us);
81123cb0:	e13fff17 	ldw	r4,-4(fp)
81123cb4:	1136fec0 	call	81136fec <alt_busy_sleep>
81123cb8:	00003d06 	br	81123db0 <usleep+0x128>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81123cbc:	d0a07617 	ldw	r2,-32296(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
81123cc0:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81123cc4:	e0ffff17 	ldw	r3,-4(fp)
81123cc8:	0090c734 	movhi	r2,17180
81123ccc:	10b7a0c4 	addi	r2,r2,-8573
81123cd0:	1888383a 	mulxuu	r4,r3,r2
81123cd4:	1885383a 	mul	r2,r3,r2
81123cd8:	1013883a 	mov	r9,r2
81123cdc:	2015883a 	mov	r10,r4
81123ce0:	5006d4ba 	srli	r3,r10,18
81123ce4:	e0bffe17 	ldw	r2,-8(fp)
81123ce8:	1893383a 	mul	r9,r3,r2
81123cec:	e0ffff17 	ldw	r3,-4(fp)
81123cf0:	0090c734 	movhi	r2,17180
81123cf4:	10b7a0c4 	addi	r2,r2,-8573
81123cf8:	1888383a 	mulxuu	r4,r3,r2
81123cfc:	1885383a 	mul	r2,r3,r2
81123d00:	100f883a 	mov	r7,r2
81123d04:	2011883a 	mov	r8,r4
81123d08:	4004d4ba 	srli	r2,r8,18
81123d0c:	010003f4 	movhi	r4,15
81123d10:	21109004 	addi	r4,r4,16960
81123d14:	1105383a 	mul	r2,r2,r4
81123d18:	1885c83a 	sub	r2,r3,r2
81123d1c:	e0fffe17 	ldw	r3,-8(fp)
81123d20:	10c7383a 	mul	r3,r2,r3
81123d24:	0090c734 	movhi	r2,17180
81123d28:	10b7a0c4 	addi	r2,r2,-8573
81123d2c:	1888383a 	mulxuu	r4,r3,r2
81123d30:	1885383a 	mul	r2,r3,r2
81123d34:	100b883a 	mov	r5,r2
81123d38:	200d883a 	mov	r6,r4
81123d3c:	3004d4ba 	srli	r2,r6,18
81123d40:	4885883a 	add	r2,r9,r2
81123d44:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81123d48:	00000706 	br	81123d68 <usleep+0xe0>
  {
    OSTimeDly(0xffff);
81123d4c:	013fffd4 	movui	r4,65535
81123d50:	112c9900 	call	8112c990 <OSTimeDly>
    ticks -= 0xffff;
81123d54:	e0fffd17 	ldw	r3,-12(fp)
81123d58:	00bffff4 	movhi	r2,65535
81123d5c:	10800044 	addi	r2,r2,1
81123d60:	1885883a 	add	r2,r3,r2
81123d64:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
81123d68:	e0bffd17 	ldw	r2,-12(fp)
81123d6c:	00ffffd4 	movui	r3,65535
81123d70:	18bff636 	bltu	r3,r2,81123d4c <__reset+0xfb103d4c>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
81123d74:	e0bffd17 	ldw	r2,-12(fp)
81123d78:	10bfffcc 	andi	r2,r2,65535
81123d7c:	1009883a 	mov	r4,r2
81123d80:	112c9900 	call	8112c990 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
81123d84:	008003f4 	movhi	r2,15
81123d88:	10909004 	addi	r2,r2,16960
81123d8c:	e0fffe17 	ldw	r3,-8(fp)
81123d90:	10c7203a 	divu	r3,r2,r3
81123d94:	e0bfff17 	ldw	r2,-4(fp)
81123d98:	10c9203a 	divu	r4,r2,r3
81123d9c:	20c7383a 	mul	r3,r4,r3
81123da0:	10c5c83a 	sub	r2,r2,r3
81123da4:	1009883a 	mov	r4,r2
81123da8:	1136fec0 	call	81136fec <alt_busy_sleep>

  return 0;  
81123dac:	0005883a 	mov	r2,zero
}
81123db0:	e037883a 	mov	sp,fp
81123db4:	dfc00117 	ldw	ra,4(sp)
81123db8:	df000017 	ldw	fp,0(sp)
81123dbc:	dec00204 	addi	sp,sp,8
81123dc0:	f800283a 	ret

81123dc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81123dc4:	defffe04 	addi	sp,sp,-8
81123dc8:	de00012e 	bgeu	sp,et,81123dd0 <alt_get_errno+0xc>
81123dcc:	003b68fa 	trap	3
81123dd0:	dfc00115 	stw	ra,4(sp)
81123dd4:	df000015 	stw	fp,0(sp)
81123dd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81123ddc:	d0a01617 	ldw	r2,-32680(gp)
81123de0:	10000326 	beq	r2,zero,81123df0 <alt_get_errno+0x2c>
81123de4:	d0a01617 	ldw	r2,-32680(gp)
81123de8:	103ee83a 	callr	r2
81123dec:	00000106 	br	81123df4 <alt_get_errno+0x30>
81123df0:	d0a06b04 	addi	r2,gp,-32340
}
81123df4:	e037883a 	mov	sp,fp
81123df8:	dfc00117 	ldw	ra,4(sp)
81123dfc:	df000017 	ldw	fp,0(sp)
81123e00:	dec00204 	addi	sp,sp,8
81123e04:	f800283a 	ret

81123e08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81123e08:	defff904 	addi	sp,sp,-28
81123e0c:	de00012e 	bgeu	sp,et,81123e14 <write+0xc>
81123e10:	003b68fa 	trap	3
81123e14:	dfc00615 	stw	ra,24(sp)
81123e18:	df000515 	stw	fp,20(sp)
81123e1c:	df000504 	addi	fp,sp,20
81123e20:	e13ffd15 	stw	r4,-12(fp)
81123e24:	e17ffe15 	stw	r5,-8(fp)
81123e28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81123e2c:	e0bffd17 	ldw	r2,-12(fp)
81123e30:	10000616 	blt	r2,zero,81123e4c <write+0x44>
81123e34:	e0bffd17 	ldw	r2,-12(fp)
81123e38:	10c00324 	muli	r3,r2,12
81123e3c:	00a04534 	movhi	r2,33044
81123e40:	10aeee04 	addi	r2,r2,-17480
81123e44:	1885883a 	add	r2,r3,r2
81123e48:	00000106 	br	81123e50 <write+0x48>
81123e4c:	0005883a 	mov	r2,zero
81123e50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81123e54:	e0bffb17 	ldw	r2,-20(fp)
81123e58:	10002126 	beq	r2,zero,81123ee0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81123e5c:	e0bffb17 	ldw	r2,-20(fp)
81123e60:	10800217 	ldw	r2,8(r2)
81123e64:	108000cc 	andi	r2,r2,3
81123e68:	10001826 	beq	r2,zero,81123ecc <write+0xc4>
81123e6c:	e0bffb17 	ldw	r2,-20(fp)
81123e70:	10800017 	ldw	r2,0(r2)
81123e74:	10800617 	ldw	r2,24(r2)
81123e78:	10001426 	beq	r2,zero,81123ecc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81123e7c:	e0bffb17 	ldw	r2,-20(fp)
81123e80:	10800017 	ldw	r2,0(r2)
81123e84:	10800617 	ldw	r2,24(r2)
81123e88:	e0ffff17 	ldw	r3,-4(fp)
81123e8c:	180d883a 	mov	r6,r3
81123e90:	e17ffe17 	ldw	r5,-8(fp)
81123e94:	e13ffb17 	ldw	r4,-20(fp)
81123e98:	103ee83a 	callr	r2
81123e9c:	e0bffc15 	stw	r2,-16(fp)
81123ea0:	e0bffc17 	ldw	r2,-16(fp)
81123ea4:	1000070e 	bge	r2,zero,81123ec4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
81123ea8:	1123dc40 	call	81123dc4 <alt_get_errno>
81123eac:	1007883a 	mov	r3,r2
81123eb0:	e0bffc17 	ldw	r2,-16(fp)
81123eb4:	0085c83a 	sub	r2,zero,r2
81123eb8:	18800015 	stw	r2,0(r3)
        return -1;
81123ebc:	00bfffc4 	movi	r2,-1
81123ec0:	00000c06 	br	81123ef4 <write+0xec>
      }
      return rval;
81123ec4:	e0bffc17 	ldw	r2,-16(fp)
81123ec8:	00000a06 	br	81123ef4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
81123ecc:	1123dc40 	call	81123dc4 <alt_get_errno>
81123ed0:	1007883a 	mov	r3,r2
81123ed4:	00800344 	movi	r2,13
81123ed8:	18800015 	stw	r2,0(r3)
81123edc:	00000406 	br	81123ef0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
81123ee0:	1123dc40 	call	81123dc4 <alt_get_errno>
81123ee4:	1007883a 	mov	r3,r2
81123ee8:	00801444 	movi	r2,81
81123eec:	18800015 	stw	r2,0(r3)
  }
  return -1;
81123ef0:	00bfffc4 	movi	r2,-1
}
81123ef4:	e037883a 	mov	sp,fp
81123ef8:	dfc00117 	ldw	ra,4(sp)
81123efc:	df000017 	ldw	fp,0(sp)
81123f00:	dec00204 	addi	sp,sp,8
81123f04:	f800283a 	ret

81123f08 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
81123f08:	deffde04 	addi	sp,sp,-136
81123f0c:	de00012e 	bgeu	sp,et,81123f14 <__env_lock+0xc>
81123f10:	003b68fa 	trap	3
81123f14:	dfc02115 	stw	ra,132(sp)
81123f18:	df002015 	stw	fp,128(sp)
81123f1c:	df002004 	addi	fp,sp,128
81123f20:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81123f24:	e0bfe104 	addi	r2,fp,-124
81123f28:	100b883a 	mov	r5,r2
81123f2c:	01003fc4 	movi	r4,255
81123f30:	112c7ec0 	call	8112c7ec <OSTaskQuery>
81123f34:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
81123f38:	e0bffe83 	ldbu	r2,-6(fp)
81123f3c:	10803fcc 	andi	r2,r2,255
81123f40:	10001e1e 	bne	r2,zero,81123fbc <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
81123f44:	e0bfed83 	ldbu	r2,-74(fp)
81123f48:	10803fcc 	andi	r2,r2,255
81123f4c:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
81123f50:	d0a07917 	ldw	r2,-32284(gp)
81123f54:	e0fffc04 	addi	r3,fp,-16
81123f58:	180b883a 	mov	r5,r3
81123f5c:	1009883a 	mov	r4,r2
81123f60:	112afa40 	call	8112afa4 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
81123f64:	e0bffe03 	ldbu	r2,-8(fp)
81123f68:	10803fcc 	andi	r2,r2,255
81123f6c:	10000726 	beq	r2,zero,81123f8c <__env_lock+0x84>
81123f70:	d0a01a17 	ldw	r2,-32664(gp)
81123f74:	e0ffe017 	ldw	r3,-128(fp)
81123f78:	1880041e 	bne	r3,r2,81123f8c <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
81123f7c:	d0a07817 	ldw	r2,-32288(gp)
81123f80:	10800044 	addi	r2,r2,1
81123f84:	d0a07815 	stw	r2,-32288(gp)
81123f88:	00000a06 	br	81123fb4 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81123f8c:	d0a07917 	ldw	r2,-32284(gp)
81123f90:	e0fffe84 	addi	r3,fp,-6
81123f94:	180d883a 	mov	r6,r3
81123f98:	000b883a 	mov	r5,zero
81123f9c:	1009883a 	mov	r4,r2
81123fa0:	112ab040 	call	8112ab04 <OSSemPend>
    locks  = 1;
81123fa4:	00800044 	movi	r2,1
81123fa8:	d0a07815 	stw	r2,-32288(gp)
    lockid = id;
81123fac:	e0bfe017 	ldw	r2,-128(fp)
81123fb0:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81123fb4:	0001883a 	nop
81123fb8:	00000106 	br	81123fc0 <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81123fbc:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81123fc0:	e037883a 	mov	sp,fp
81123fc4:	dfc00117 	ldw	ra,4(sp)
81123fc8:	df000017 	ldw	fp,0(sp)
81123fcc:	dec00204 	addi	sp,sp,8
81123fd0:	f800283a 	ret

81123fd4 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81123fd4:	defffd04 	addi	sp,sp,-12
81123fd8:	de00012e 	bgeu	sp,et,81123fe0 <__env_unlock+0xc>
81123fdc:	003b68fa 	trap	3
81123fe0:	dfc00215 	stw	ra,8(sp)
81123fe4:	df000115 	stw	fp,4(sp)
81123fe8:	df000104 	addi	fp,sp,4
81123fec:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
81123ff0:	d0a07817 	ldw	r2,-32288(gp)
81123ff4:	10000b26 	beq	r2,zero,81124024 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
81123ff8:	d0a07817 	ldw	r2,-32288(gp)
81123ffc:	10bfffc4 	addi	r2,r2,-1
81124000:	d0a07815 	stw	r2,-32288(gp)
81124004:	d0a07817 	ldw	r2,-32288(gp)
81124008:	1000071e 	bne	r2,zero,81124028 <__env_unlock+0x54>
  {
    lockid = -1;
8112400c:	00bfffc4 	movi	r2,-1
81124010:	d0a01a15 	stw	r2,-32664(gp)
    OSSemPost( alt_envsem );
81124014:	d0a07917 	ldw	r2,-32284(gp)
81124018:	1009883a 	mov	r4,r2
8112401c:	112ae8c0 	call	8112ae8c <OSSemPost>
81124020:	00000106 	br	81124028 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
81124024:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81124028:	e037883a 	mov	sp,fp
8112402c:	dfc00117 	ldw	ra,4(sp)
81124030:	df000017 	ldw	fp,0(sp)
81124034:	dec00204 	addi	sp,sp,8
81124038:	f800283a 	ret

8112403c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
8112403c:	deffda04 	addi	sp,sp,-152
81124040:	de00012e 	bgeu	sp,et,81124048 <__malloc_lock+0xc>
81124044:	003b68fa 	trap	3
81124048:	dfc02515 	stw	ra,148(sp)
8112404c:	df002415 	stw	fp,144(sp)
81124050:	df002404 	addi	fp,sp,144
81124054:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124058:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
8112405c:	d0a07f03 	ldbu	r2,-32260(gp)
81124060:	10803fcc 	andi	r2,r2,255
81124064:	10800060 	cmpeqi	r2,r2,1
81124068:	10003626 	beq	r2,zero,81124144 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
8112406c:	e0bfe104 	addi	r2,fp,-124
81124070:	100b883a 	mov	r5,r2
81124074:	01003fc4 	movi	r4,255
81124078:	112c7ec0 	call	8112c7ec <OSTaskQuery>
8112407c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
81124080:	e0bffe83 	ldbu	r2,-6(fp)
81124084:	10803fcc 	andi	r2,r2,255
81124088:	1000301e 	bne	r2,zero,8112414c <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
8112408c:	e0bfed83 	ldbu	r2,-74(fp)
81124090:	10803fcc 	andi	r2,r2,255
81124094:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81124098:	d0a07b17 	ldw	r2,-32276(gp)
8112409c:	e0fffc04 	addi	r3,fp,-16
811240a0:	180b883a 	mov	r5,r3
811240a4:	1009883a 	mov	r4,r2
811240a8:	112afa40 	call	8112afa4 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811240ac:	0005303a 	rdctl	r2,status
811240b0:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811240b4:	e0ffe017 	ldw	r3,-128(fp)
811240b8:	00bfff84 	movi	r2,-2
811240bc:	1884703a 	and	r2,r3,r2
811240c0:	1001703a 	wrctl	status,r2
  
  return context;
811240c4:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
811240c8:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
811240cc:	e0bffc0b 	ldhu	r2,-16(fp)
811240d0:	10bfffcc 	andi	r2,r2,65535
811240d4:	10000b1e 	bne	r2,zero,81124104 <__malloc_lock+0xc8>
811240d8:	d0a01b17 	ldw	r2,-32660(gp)
811240dc:	e0ffdd17 	ldw	r3,-140(fp)
811240e0:	1880081e 	bne	r3,r2,81124104 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
811240e4:	d0a07a17 	ldw	r2,-32280(gp)
811240e8:	10800044 	addi	r2,r2,1
811240ec:	d0a07a15 	stw	r2,-32280(gp)
811240f0:	e0bfdc17 	ldw	r2,-144(fp)
811240f4:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811240f8:	e0bfde17 	ldw	r2,-136(fp)
811240fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
81124100:	00000e06 	br	8112413c <__malloc_lock+0x100>
81124104:	e0bfdc17 	ldw	r2,-144(fp)
81124108:	e0bfdf15 	stw	r2,-132(fp)
8112410c:	e0bfdf17 	ldw	r2,-132(fp)
81124110:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
81124114:	d0a07b17 	ldw	r2,-32276(gp)
81124118:	e0fffe84 	addi	r3,fp,-6
8112411c:	180d883a 	mov	r6,r3
81124120:	000b883a 	mov	r5,zero
81124124:	1009883a 	mov	r4,r2
81124128:	112ab040 	call	8112ab04 <OSSemPend>
    locks  = 1;
8112412c:	00800044 	movi	r2,1
81124130:	d0a07a15 	stw	r2,-32280(gp)
    lockid = id;
81124134:	e0bfdd17 	ldw	r2,-140(fp)
81124138:	d0a01b15 	stw	r2,-32660(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
8112413c:	0001883a 	nop
81124140:	00000306 	br	81124150 <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
81124144:	0001883a 	nop
81124148:	00000106 	br	81124150 <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
8112414c:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
81124150:	e037883a 	mov	sp,fp
81124154:	dfc00117 	ldw	ra,4(sp)
81124158:	df000017 	ldw	fp,0(sp)
8112415c:	dec00204 	addi	sp,sp,8
81124160:	f800283a 	ret

81124164 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81124164:	defff804 	addi	sp,sp,-32
81124168:	de00012e 	bgeu	sp,et,81124170 <__malloc_unlock+0xc>
8112416c:	003b68fa 	trap	3
81124170:	dfc00715 	stw	ra,28(sp)
81124174:	df000615 	stw	fp,24(sp)
81124178:	df000604 	addi	fp,sp,24
8112417c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124180:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81124184:	d0a07f03 	ldbu	r2,-32260(gp)
81124188:	10803fcc 	andi	r2,r2,255
8112418c:	10800060 	cmpeqi	r2,r2,1
81124190:	10002326 	beq	r2,zero,81124220 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124194:	0005303a 	rdctl	r2,status
81124198:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112419c:	e0fffe17 	ldw	r3,-8(fp)
811241a0:	00bfff84 	movi	r2,-2
811241a4:	1884703a 	and	r2,r3,r2
811241a8:	1001703a 	wrctl	status,r2
  
  return context;
811241ac:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
811241b0:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
811241b4:	d0a07a17 	ldw	r2,-32280(gp)
811241b8:	1000051e 	bne	r2,zero,811241d0 <__malloc_unlock+0x6c>
811241bc:	e0bffa17 	ldw	r2,-24(fp)
811241c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811241c4:	e0bffb17 	ldw	r2,-20(fp)
811241c8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
811241cc:	00001506 	br	81124224 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
811241d0:	d0a07a17 	ldw	r2,-32280(gp)
811241d4:	10bfffc4 	addi	r2,r2,-1
811241d8:	d0a07a15 	stw	r2,-32280(gp)
811241dc:	d0a07a17 	ldw	r2,-32280(gp)
811241e0:	10000a1e 	bne	r2,zero,8112420c <__malloc_unlock+0xa8>
  {
    lockid = -1;
811241e4:	00bfffc4 	movi	r2,-1
811241e8:	d0a01b15 	stw	r2,-32660(gp)
811241ec:	e0bffa17 	ldw	r2,-24(fp)
811241f0:	e0bffc15 	stw	r2,-16(fp)
811241f4:	e0bffc17 	ldw	r2,-16(fp)
811241f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
811241fc:	d0a07b17 	ldw	r2,-32276(gp)
81124200:	1009883a 	mov	r4,r2
81124204:	112ae8c0 	call	8112ae8c <OSSemPost>
81124208:	00000606 	br	81124224 <__malloc_unlock+0xc0>
8112420c:	e0bffa17 	ldw	r2,-24(fp)
81124210:	e0bffd15 	stw	r2,-12(fp)
81124214:	e0bffd17 	ldw	r2,-12(fp)
81124218:	1001703a 	wrctl	status,r2
8112421c:	00000106 	br	81124224 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
81124220:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
81124224:	e037883a 	mov	sp,fp
81124228:	dfc00117 	ldw	ra,4(sp)
8112422c:	df000017 	ldw	fp,0(sp)
81124230:	dec00204 	addi	sp,sp,8
81124234:	f800283a 	ret

81124238 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
81124238:	defff704 	addi	sp,sp,-36
8112423c:	de00012e 	bgeu	sp,et,81124244 <OSEventNameGet+0xc>
81124240:	003b68fa 	trap	3
81124244:	dfc00815 	stw	ra,32(sp)
81124248:	df000715 	stw	fp,28(sp)
8112424c:	df000704 	addi	fp,sp,28
81124250:	e13ffd15 	stw	r4,-12(fp)
81124254:	e17ffe15 	stw	r5,-8(fp)
81124258:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112425c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81124260:	e0bfff17 	ldw	r2,-4(fp)
81124264:	1000021e 	bne	r2,zero,81124270 <OSEventNameGet+0x38>
        return (0);
81124268:	0005883a 	mov	r2,zero
8112426c:	00003706 	br	8112434c <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81124270:	e0bffd17 	ldw	r2,-12(fp)
81124274:	1000051e 	bne	r2,zero,8112428c <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
81124278:	e0bfff17 	ldw	r2,-4(fp)
8112427c:	00c00104 	movi	r3,4
81124280:	10c00005 	stb	r3,0(r2)
        return (0);
81124284:	0005883a 	mov	r2,zero
81124288:	00003006 	br	8112434c <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112428c:	e0bffe17 	ldw	r2,-8(fp)
81124290:	1000051e 	bne	r2,zero,811242a8 <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81124294:	e0bfff17 	ldw	r2,-4(fp)
81124298:	00c00304 	movi	r3,12
8112429c:	10c00005 	stb	r3,0(r2)
        return (0);
811242a0:	0005883a 	mov	r2,zero
811242a4:	00002906 	br	8112434c <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811242a8:	d0a08f03 	ldbu	r2,-32196(gp)
811242ac:	10803fcc 	andi	r2,r2,255
811242b0:	10000526 	beq	r2,zero,811242c8 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
811242b4:	e0bfff17 	ldw	r2,-4(fp)
811242b8:	00c00444 	movi	r3,17
811242bc:	10c00005 	stb	r3,0(r2)
        return (0);
811242c0:	0005883a 	mov	r2,zero
811242c4:	00002106 	br	8112434c <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
811242c8:	e0bffd17 	ldw	r2,-12(fp)
811242cc:	10800003 	ldbu	r2,0(r2)
811242d0:	10803fcc 	andi	r2,r2,255
811242d4:	10bfffc4 	addi	r2,r2,-1
811242d8:	10800128 	cmpgeui	r2,r2,4
811242dc:	10000526 	beq	r2,zero,811242f4 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
811242e0:	e0bfff17 	ldw	r2,-4(fp)
811242e4:	00c00044 	movi	r3,1
811242e8:	10c00005 	stb	r3,0(r2)
             return (0);
811242ec:	0005883a 	mov	r2,zero
811242f0:	00001606 	br	8112434c <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
811242f4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811242f8:	0005303a 	rdctl	r2,status
811242fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124300:	e0fffb17 	ldw	r3,-20(fp)
81124304:	00bfff84 	movi	r2,-2
81124308:	1884703a 	and	r2,r3,r2
8112430c:	1001703a 	wrctl	status,r2
  
  return context;
81124310:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
81124314:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
81124318:	e0bffd17 	ldw	r2,-12(fp)
8112431c:	10800444 	addi	r2,r2,17
81124320:	100b883a 	mov	r5,r2
81124324:	e13ffe17 	ldw	r4,-8(fp)
81124328:	1125da80 	call	81125da8 <OS_StrCopy>
8112432c:	e0bffa05 	stb	r2,-24(fp)
81124330:	e0bff917 	ldw	r2,-28(fp)
81124334:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124338:	e0bffc17 	ldw	r2,-16(fp)
8112433c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81124340:	e0bfff17 	ldw	r2,-4(fp)
81124344:	10000005 	stb	zero,0(r2)
    return (len);
81124348:	e0bffa03 	ldbu	r2,-24(fp)
}
8112434c:	e037883a 	mov	sp,fp
81124350:	dfc00117 	ldw	ra,4(sp)
81124354:	df000017 	ldw	fp,0(sp)
81124358:	dec00204 	addi	sp,sp,8
8112435c:	f800283a 	ret

81124360 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
81124360:	defff604 	addi	sp,sp,-40
81124364:	de00012e 	bgeu	sp,et,8112436c <OSEventNameSet+0xc>
81124368:	003b68fa 	trap	3
8112436c:	dfc00915 	stw	ra,36(sp)
81124370:	df000815 	stw	fp,32(sp)
81124374:	df000804 	addi	fp,sp,32
81124378:	e13ffd15 	stw	r4,-12(fp)
8112437c:	e17ffe15 	stw	r5,-8(fp)
81124380:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124384:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81124388:	e0bfff17 	ldw	r2,-4(fp)
8112438c:	10004026 	beq	r2,zero,81124490 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81124390:	e0bffd17 	ldw	r2,-12(fp)
81124394:	1000041e 	bne	r2,zero,811243a8 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81124398:	e0bfff17 	ldw	r2,-4(fp)
8112439c:	00c00104 	movi	r3,4
811243a0:	10c00005 	stb	r3,0(r2)
        return;
811243a4:	00003b06 	br	81124494 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
811243a8:	e0bffe17 	ldw	r2,-8(fp)
811243ac:	1000041e 	bne	r2,zero,811243c0 <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
811243b0:	e0bfff17 	ldw	r2,-4(fp)
811243b4:	00c00304 	movi	r3,12
811243b8:	10c00005 	stb	r3,0(r2)
        return;
811243bc:	00003506 	br	81124494 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811243c0:	d0a08f03 	ldbu	r2,-32196(gp)
811243c4:	10803fcc 	andi	r2,r2,255
811243c8:	10000426 	beq	r2,zero,811243dc <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
811243cc:	e0bfff17 	ldw	r2,-4(fp)
811243d0:	00c00484 	movi	r3,18
811243d4:	10c00005 	stb	r3,0(r2)
        return;
811243d8:	00002e06 	br	81124494 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
811243dc:	e0bffd17 	ldw	r2,-12(fp)
811243e0:	10800003 	ldbu	r2,0(r2)
811243e4:	10803fcc 	andi	r2,r2,255
811243e8:	10bfffc4 	addi	r2,r2,-1
811243ec:	10800128 	cmpgeui	r2,r2,4
811243f0:	10000426 	beq	r2,zero,81124404 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
811243f4:	e0bfff17 	ldw	r2,-4(fp)
811243f8:	00c00044 	movi	r3,1
811243fc:	10c00005 	stb	r3,0(r2)
             return;
81124400:	00002406 	br	81124494 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81124404:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124408:	0005303a 	rdctl	r2,status
8112440c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124410:	e0fffc17 	ldw	r3,-16(fp)
81124414:	00bfff84 	movi	r2,-2
81124418:	1884703a 	and	r2,r3,r2
8112441c:	1001703a 	wrctl	status,r2
  
  return context;
81124420:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
81124424:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
81124428:	e13ffe17 	ldw	r4,-8(fp)
8112442c:	1125e240 	call	81125e24 <OS_StrLen>
81124430:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
81124434:	e0bffa03 	ldbu	r2,-24(fp)
81124438:	10800830 	cmpltui	r2,r2,32
8112443c:	1000081e 	bne	r2,zero,81124460 <OSEventNameSet+0x100>
81124440:	e0bff817 	ldw	r2,-32(fp)
81124444:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124448:	e0bff917 	ldw	r2,-28(fp)
8112444c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
81124450:	e0bfff17 	ldw	r2,-4(fp)
81124454:	00c002c4 	movi	r3,11
81124458:	10c00005 	stb	r3,0(r2)
        return;
8112445c:	00000d06 	br	81124494 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
81124460:	e0bffd17 	ldw	r2,-12(fp)
81124464:	10800444 	addi	r2,r2,17
81124468:	e17ffe17 	ldw	r5,-8(fp)
8112446c:	1009883a 	mov	r4,r2
81124470:	1125da80 	call	81125da8 <OS_StrCopy>
81124474:	e0bff817 	ldw	r2,-32(fp)
81124478:	e0bffb15 	stw	r2,-20(fp)
8112447c:	e0bffb17 	ldw	r2,-20(fp)
81124480:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81124484:	e0bfff17 	ldw	r2,-4(fp)
81124488:	10000005 	stb	zero,0(r2)
8112448c:	00000106 	br	81124494 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81124490:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81124494:	e037883a 	mov	sp,fp
81124498:	dfc00117 	ldw	ra,4(sp)
8112449c:	df000017 	ldw	fp,0(sp)
811244a0:	dec00204 	addi	sp,sp,8
811244a4:	f800283a 	ret

811244a8 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
811244a8:	deffed04 	addi	sp,sp,-76
811244ac:	de00012e 	bgeu	sp,et,811244b4 <OSEventPendMulti+0xc>
811244b0:	003b68fa 	trap	3
811244b4:	dfc01215 	stw	ra,72(sp)
811244b8:	df001115 	stw	fp,68(sp)
811244bc:	df001104 	addi	fp,sp,68
811244c0:	e13ffc15 	stw	r4,-16(fp)
811244c4:	e17ffd15 	stw	r5,-12(fp)
811244c8:	e1bffe15 	stw	r6,-8(fp)
811244cc:	3805883a 	mov	r2,r7
811244d0:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
811244d4:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
811244d8:	e0800217 	ldw	r2,8(fp)
811244dc:	1000021e 	bne	r2,zero,811244e8 <OSEventPendMulti+0x40>
        return (0);
811244e0:	0005883a 	mov	r2,zero
811244e4:	00017106 	br	81124aac <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
811244e8:	e0bffc17 	ldw	r2,-16(fp)
811244ec:	1000051e 	bne	r2,zero,81124504 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
811244f0:	e0800217 	ldw	r2,8(fp)
811244f4:	00c00104 	movi	r3,4
811244f8:	10c00005 	stb	r3,0(r2)
        return (0);
811244fc:	0005883a 	mov	r2,zero
81124500:	00016a06 	br	81124aac <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81124504:	e0bffd17 	ldw	r2,-12(fp)
81124508:	1000051e 	bne	r2,zero,81124520 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
8112450c:	e0800217 	ldw	r2,8(fp)
81124510:	00c00104 	movi	r3,4
81124514:	10c00005 	stb	r3,0(r2)
        return (0);
81124518:	0005883a 	mov	r2,zero
8112451c:	00016306 	br	81124aac <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81124520:	e0bffe17 	ldw	r2,-8(fp)
81124524:	1000051e 	bne	r2,zero,8112453c <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
81124528:	e0800217 	ldw	r2,8(fp)
8112452c:	00c00104 	movi	r3,4
81124530:	10c00005 	stb	r3,0(r2)
        return (0);
81124534:	0005883a 	mov	r2,zero
81124538:	00015c06 	br	81124aac <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
8112453c:	e0bffd17 	ldw	r2,-12(fp)
81124540:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
81124544:	e0bffc17 	ldw	r2,-16(fp)
81124548:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
8112454c:	e0bfef17 	ldw	r2,-68(fp)
81124550:	10800017 	ldw	r2,0(r2)
81124554:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
81124558:	00001906 	br	811245c0 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
8112455c:	e0bff017 	ldw	r2,-64(fp)
81124560:	10800003 	ldbu	r2,0(r2)
81124564:	10803fcc 	andi	r2,r2,255
81124568:	10c000a0 	cmpeqi	r3,r2,2
8112456c:	1800091e 	bne	r3,zero,81124594 <OSEventPendMulti+0xec>
81124570:	10c000e0 	cmpeqi	r3,r2,3
81124574:	1800091e 	bne	r3,zero,8112459c <OSEventPendMulti+0xf4>
81124578:	10800060 	cmpeqi	r2,r2,1
8112457c:	1000091e 	bne	r2,zero,811245a4 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
81124580:	e0800217 	ldw	r2,8(fp)
81124584:	00c00044 	movi	r3,1
81124588:	10c00005 	stb	r3,0(r2)
                 return (0);
8112458c:	0005883a 	mov	r2,zero
81124590:	00014606 	br	81124aac <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81124594:	0001883a 	nop
81124598:	00000306 	br	811245a8 <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
8112459c:	0001883a 	nop
811245a0:	00000106 	br	811245a8 <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
811245a4:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
811245a8:	e0bfef17 	ldw	r2,-68(fp)
811245ac:	10800104 	addi	r2,r2,4
811245b0:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
811245b4:	e0bfef17 	ldw	r2,-68(fp)
811245b8:	10800017 	ldw	r2,0(r2)
811245bc:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
811245c0:	e0bff017 	ldw	r2,-64(fp)
811245c4:	103fe51e 	bne	r2,zero,8112455c <__reset+0xfb10455c>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
811245c8:	d0a08f03 	ldbu	r2,-32196(gp)
811245cc:	10803fcc 	andi	r2,r2,255
811245d0:	10000526 	beq	r2,zero,811245e8 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
811245d4:	e0800217 	ldw	r2,8(fp)
811245d8:	00c00084 	movi	r3,2
811245dc:	10c00005 	stb	r3,0(r2)
        return (0);
811245e0:	0005883a 	mov	r2,zero
811245e4:	00013106 	br	81124aac <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
811245e8:	d0a07d03 	ldbu	r2,-32268(gp)
811245ec:	10803fcc 	andi	r2,r2,255
811245f0:	10000526 	beq	r2,zero,81124608 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
811245f4:	e0800217 	ldw	r2,8(fp)
811245f8:	00c00344 	movi	r3,13
811245fc:	10c00005 	stb	r3,0(r2)
        return (0);
81124600:	0005883a 	mov	r2,zero
81124604:	00012906 	br	81124aac <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124608:	0005303a 	rdctl	r2,status
8112460c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124610:	e0fffb17 	ldw	r3,-20(fp)
81124614:	00bfff84 	movi	r2,-2
81124618:	1884703a 	and	r2,r3,r2
8112461c:	1001703a 	wrctl	status,r2
  
  return context;
81124620:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81124624:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81124628:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
8112462c:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
81124630:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81124634:	e0bffc17 	ldw	r2,-16(fp)
81124638:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
8112463c:	e0bfef17 	ldw	r2,-68(fp)
81124640:	10800017 	ldw	r2,0(r2)
81124644:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81124648:	00008106 	br	81124850 <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
8112464c:	e0bff017 	ldw	r2,-64(fp)
81124650:	10800003 	ldbu	r2,0(r2)
81124654:	10803fcc 	andi	r2,r2,255
81124658:	10c000a0 	cmpeqi	r3,r2,2
8112465c:	18003c1e 	bne	r3,zero,81124750 <OSEventPendMulti+0x2a8>
81124660:	10c000e0 	cmpeqi	r3,r2,3
81124664:	1800031e 	bne	r3,zero,81124674 <OSEventPendMulti+0x1cc>
81124668:	10800060 	cmpeqi	r2,r2,1
8112466c:	10001e1e 	bne	r2,zero,811246e8 <OSEventPendMulti+0x240>
81124670:	00006606 	br	8112480c <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
81124674:	e0bff017 	ldw	r2,-64(fp)
81124678:	1080020b 	ldhu	r2,8(r2)
8112467c:	10bfffcc 	andi	r2,r2,65535
81124680:	10001526 	beq	r2,zero,811246d8 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
81124684:	e0bff017 	ldw	r2,-64(fp)
81124688:	1080020b 	ldhu	r2,8(r2)
8112468c:	10bfffc4 	addi	r2,r2,-1
81124690:	1007883a 	mov	r3,r2
81124694:	e0bff017 	ldw	r2,-64(fp)
81124698:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
8112469c:	e0bffd17 	ldw	r2,-12(fp)
811246a0:	10c00104 	addi	r3,r2,4
811246a4:	e0fffd15 	stw	r3,-12(fp)
811246a8:	e0fff017 	ldw	r3,-64(fp)
811246ac:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
811246b0:	00800044 	movi	r2,1
811246b4:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
811246b8:	e0bffe17 	ldw	r2,-8(fp)
811246bc:	10c00104 	addi	r3,r2,4
811246c0:	e0fffe15 	stw	r3,-8(fp)
811246c4:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
811246c8:	e0bff18b 	ldhu	r2,-58(fp)
811246cc:	10800044 	addi	r2,r2,1
811246d0:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
811246d4:	00005806 	br	81124838 <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
811246d8:	e0bff203 	ldbu	r2,-56(fp)
811246dc:	10800054 	ori	r2,r2,1
811246e0:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
811246e4:	00005406 	br	81124838 <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
811246e8:	e0bff017 	ldw	r2,-64(fp)
811246ec:	10800117 	ldw	r2,4(r2)
811246f0:	10001326 	beq	r2,zero,81124740 <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
811246f4:	e0bffe17 	ldw	r2,-8(fp)
811246f8:	10c00104 	addi	r3,r2,4
811246fc:	e0fffe15 	stw	r3,-8(fp)
81124700:	e0fff017 	ldw	r3,-64(fp)
81124704:	18c00117 	ldw	r3,4(r3)
81124708:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
8112470c:	e0bff017 	ldw	r2,-64(fp)
81124710:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81124714:	e0bffd17 	ldw	r2,-12(fp)
81124718:	10c00104 	addi	r3,r2,4
8112471c:	e0fffd15 	stw	r3,-12(fp)
81124720:	e0fff017 	ldw	r3,-64(fp)
81124724:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81124728:	00800044 	movi	r2,1
8112472c:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81124730:	e0bff18b 	ldhu	r2,-58(fp)
81124734:	10800044 	addi	r2,r2,1
81124738:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
8112473c:	00003e06 	br	81124838 <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
81124740:	e0bff203 	ldbu	r2,-56(fp)
81124744:	10800094 	ori	r2,r2,2
81124748:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
8112474c:	00003a06 	br	81124838 <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
81124750:	e0bff017 	ldw	r2,-64(fp)
81124754:	10800117 	ldw	r2,4(r2)
81124758:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
8112475c:	e0bff517 	ldw	r2,-44(fp)
81124760:	1080058b 	ldhu	r2,22(r2)
81124764:	10bfffcc 	andi	r2,r2,65535
81124768:	10002426 	beq	r2,zero,811247fc <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
8112476c:	e0bffe17 	ldw	r2,-8(fp)
81124770:	10c00104 	addi	r3,r2,4
81124774:	e0fffe15 	stw	r3,-8(fp)
81124778:	e0fff517 	ldw	r3,-44(fp)
8112477c:	18c00417 	ldw	r3,16(r3)
81124780:	19400104 	addi	r5,r3,4
81124784:	e13ff517 	ldw	r4,-44(fp)
81124788:	21400415 	stw	r5,16(r4)
8112478c:	18c00017 	ldw	r3,0(r3)
81124790:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81124794:	e0bff517 	ldw	r2,-44(fp)
81124798:	10c00417 	ldw	r3,16(r2)
8112479c:	e0bff517 	ldw	r2,-44(fp)
811247a0:	10800217 	ldw	r2,8(r2)
811247a4:	1880041e 	bne	r3,r2,811247b8 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
811247a8:	e0bff517 	ldw	r2,-44(fp)
811247ac:	10c00117 	ldw	r3,4(r2)
811247b0:	e0bff517 	ldw	r2,-44(fp)
811247b4:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
811247b8:	e0bff517 	ldw	r2,-44(fp)
811247bc:	1080058b 	ldhu	r2,22(r2)
811247c0:	10bfffc4 	addi	r2,r2,-1
811247c4:	1007883a 	mov	r3,r2
811247c8:	e0bff517 	ldw	r2,-44(fp)
811247cc:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
811247d0:	e0bffd17 	ldw	r2,-12(fp)
811247d4:	10c00104 	addi	r3,r2,4
811247d8:	e0fffd15 	stw	r3,-12(fp)
811247dc:	e0fff017 	ldw	r3,-64(fp)
811247e0:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
811247e4:	00800044 	movi	r2,1
811247e8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
811247ec:	e0bff18b 	ldhu	r2,-58(fp)
811247f0:	10800044 	addi	r2,r2,1
811247f4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
811247f8:	00000f06 	br	81124838 <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
811247fc:	e0bff203 	ldbu	r2,-56(fp)
81124800:	10800114 	ori	r2,r2,4
81124804:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81124808:	00000b06 	br	81124838 <OSEventPendMulti+0x390>
8112480c:	e0bff317 	ldw	r2,-52(fp)
81124810:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124814:	e0bff417 	ldw	r2,-48(fp)
81124818:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
8112481c:	e0bffd17 	ldw	r2,-12(fp)
81124820:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81124824:	e0800217 	ldw	r2,8(fp)
81124828:	00c00044 	movi	r3,1
8112482c:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81124830:	e0bff18b 	ldhu	r2,-58(fp)
81124834:	00009d06 	br	81124aac <OSEventPendMulti+0x604>
        }
        pevents++;
81124838:	e0bfef17 	ldw	r2,-68(fp)
8112483c:	10800104 	addi	r2,r2,4
81124840:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81124844:	e0bfef17 	ldw	r2,-68(fp)
81124848:	10800017 	ldw	r2,0(r2)
8112484c:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81124850:	e0bff017 	ldw	r2,-64(fp)
81124854:	103f7d1e 	bne	r2,zero,8112464c <__reset+0xfb10464c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81124858:	e0bff103 	ldbu	r2,-60(fp)
8112485c:	10800058 	cmpnei	r2,r2,1
81124860:	10000a1e 	bne	r2,zero,8112488c <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81124864:	e0bffd17 	ldw	r2,-12(fp)
81124868:	10000015 	stw	zero,0(r2)
8112486c:	e0bff317 	ldw	r2,-52(fp)
81124870:	e0bff615 	stw	r2,-40(fp)
81124874:	e0bff617 	ldw	r2,-40(fp)
81124878:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
8112487c:	e0800217 	ldw	r2,8(fp)
81124880:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81124884:	e0bff18b 	ldhu	r2,-58(fp)
81124888:	00008806 	br	81124aac <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
8112488c:	d0a09017 	ldw	r2,-32192(gp)
81124890:	d0e09017 	ldw	r3,-32192(gp)
81124894:	19000c03 	ldbu	r4,48(r3)
81124898:	e0fff203 	ldbu	r3,-56(fp)
8112489c:	20c6b03a 	or	r3,r4,r3
811248a0:	1809883a 	mov	r4,r3
811248a4:	00ffe004 	movi	r3,-128
811248a8:	20c6b03a 	or	r3,r4,r3
811248ac:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811248b0:	d0a09017 	ldw	r2,-32192(gp)
811248b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
811248b8:	d0a09017 	ldw	r2,-32192(gp)
811248bc:	e0ffff0b 	ldhu	r3,-4(fp)
811248c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
811248c4:	e13ffc17 	ldw	r4,-16(fp)
811248c8:	11254500 	call	81125450 <OS_EventTaskWaitMulti>
811248cc:	e0bff317 	ldw	r2,-52(fp)
811248d0:	e0bff915 	stw	r2,-28(fp)
811248d4:	e0bff917 	ldw	r2,-28(fp)
811248d8:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
811248dc:	1125c540 	call	81125c54 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811248e0:	0005303a 	rdctl	r2,status
811248e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811248e8:	e0fff717 	ldw	r3,-36(fp)
811248ec:	00bfff84 	movi	r2,-2
811248f0:	1884703a 	and	r2,r3,r2
811248f4:	1001703a 	wrctl	status,r2
  
  return context;
811248f8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
811248fc:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81124900:	d0a09017 	ldw	r2,-32192(gp)
81124904:	10800c43 	ldbu	r2,49(r2)
81124908:	10803fcc 	andi	r2,r2,255
8112490c:	10000226 	beq	r2,zero,81124918 <OSEventPendMulti+0x470>
81124910:	108000a0 	cmpeqi	r2,r2,2
81124914:	10001826 	beq	r2,zero,81124978 <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81124918:	d0a09017 	ldw	r2,-32192(gp)
8112491c:	10800717 	ldw	r2,28(r2)
81124920:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81124924:	e0bff017 	ldw	r2,-64(fp)
81124928:	10000b26 	beq	r2,zero,81124958 <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
8112492c:	e0bffd17 	ldw	r2,-12(fp)
81124930:	10c00104 	addi	r3,r2,4
81124934:	e0fffd15 	stw	r3,-12(fp)
81124938:	e0fff017 	ldw	r3,-64(fp)
8112493c:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
81124940:	e0bffd17 	ldw	r2,-12(fp)
81124944:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81124948:	e0bff18b 	ldhu	r2,-58(fp)
8112494c:	10800044 	addi	r2,r2,1
81124950:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81124954:	00000d06 	br	8112498c <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81124958:	d0a09017 	ldw	r2,-32192(gp)
8112495c:	00c00044 	movi	r3,1
81124960:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81124964:	d0a09017 	ldw	r2,-32192(gp)
81124968:	e17ffc17 	ldw	r5,-16(fp)
8112496c:	1009883a 	mov	r4,r2
81124970:	11256680 	call	81125668 <OS_EventTaskRemoveMulti>
             }
			 break;
81124974:	00000506 	br	8112498c <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81124978:	d0a09017 	ldw	r2,-32192(gp)
8112497c:	e17ffc17 	ldw	r5,-16(fp)
81124980:	1009883a 	mov	r4,r2
81124984:	11256680 	call	81125668 <OS_EventTaskRemoveMulti>
             break;
81124988:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
8112498c:	d0a09017 	ldw	r2,-32192(gp)
81124990:	10800c43 	ldbu	r2,49(r2)
81124994:	10803fcc 	andi	r2,r2,255
81124998:	10000326 	beq	r2,zero,811249a8 <OSEventPendMulti+0x500>
8112499c:	108000a0 	cmpeqi	r2,r2,2
811249a0:	1000231e 	bne	r2,zero,81124a30 <OSEventPendMulti+0x588>
811249a4:	00002a06 	br	81124a50 <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
811249a8:	e0bff017 	ldw	r2,-64(fp)
811249ac:	10800003 	ldbu	r2,0(r2)
811249b0:	10803fcc 	andi	r2,r2,255
811249b4:	0080100e 	bge	zero,r2,811249f8 <OSEventPendMulti+0x550>
811249b8:	10c000d0 	cmplti	r3,r2,3
811249bc:	1800071e 	bne	r3,zero,811249dc <OSEventPendMulti+0x534>
811249c0:	108000e0 	cmpeqi	r2,r2,3
811249c4:	10000c26 	beq	r2,zero,811249f8 <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
811249c8:	e0bffe17 	ldw	r2,-8(fp)
811249cc:	10c00104 	addi	r3,r2,4
811249d0:	e0fffe15 	stw	r3,-8(fp)
811249d4:	10000015 	stw	zero,0(r2)
                      break;
811249d8:	00001206 	br	81124a24 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
811249dc:	e0bffe17 	ldw	r2,-8(fp)
811249e0:	10c00104 	addi	r3,r2,4
811249e4:	e0fffe15 	stw	r3,-8(fp)
811249e8:	d0e09017 	ldw	r3,-32192(gp)
811249ec:	18c00917 	ldw	r3,36(r3)
811249f0:	10c00015 	stw	r3,0(r2)
                      break;
811249f4:	00000b06 	br	81124a24 <OSEventPendMulti+0x57c>
811249f8:	e0bff317 	ldw	r2,-52(fp)
811249fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124a00:	e0bff817 	ldw	r2,-32(fp)
81124a04:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81124a08:	e0bffd17 	ldw	r2,-12(fp)
81124a0c:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
81124a10:	e0800217 	ldw	r2,8(fp)
81124a14:	00c00044 	movi	r3,1
81124a18:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
81124a1c:	e0bff18b 	ldhu	r2,-58(fp)
81124a20:	00002206 	br	81124aac <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
81124a24:	e0800217 	ldw	r2,8(fp)
81124a28:	10000005 	stb	zero,0(r2)
             break;
81124a2c:	00001006 	br	81124a70 <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
81124a30:	e0bffe17 	ldw	r2,-8(fp)
81124a34:	10c00104 	addi	r3,r2,4
81124a38:	e0fffe15 	stw	r3,-8(fp)
81124a3c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
81124a40:	e0800217 	ldw	r2,8(fp)
81124a44:	00c00384 	movi	r3,14
81124a48:	10c00005 	stb	r3,0(r2)
             break;
81124a4c:	00000806 	br	81124a70 <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
81124a50:	e0bffe17 	ldw	r2,-8(fp)
81124a54:	10c00104 	addi	r3,r2,4
81124a58:	e0fffe15 	stw	r3,-8(fp)
81124a5c:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
81124a60:	e0800217 	ldw	r2,8(fp)
81124a64:	00c00284 	movi	r3,10
81124a68:	10c00005 	stb	r3,0(r2)
             break;
81124a6c:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
81124a70:	d0a09017 	ldw	r2,-32192(gp)
81124a74:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
81124a78:	d0a09017 	ldw	r2,-32192(gp)
81124a7c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
81124a80:	d0a09017 	ldw	r2,-32192(gp)
81124a84:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81124a88:	d0a09017 	ldw	r2,-32192(gp)
81124a8c:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
81124a90:	d0a09017 	ldw	r2,-32192(gp)
81124a94:	10000915 	stw	zero,36(r2)
81124a98:	e0bff317 	ldw	r2,-52(fp)
81124a9c:	e0bffa15 	stw	r2,-24(fp)
81124aa0:	e0bffa17 	ldw	r2,-24(fp)
81124aa4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81124aa8:	e0bff18b 	ldhu	r2,-58(fp)
}
81124aac:	e037883a 	mov	sp,fp
81124ab0:	dfc00117 	ldw	ra,4(sp)
81124ab4:	df000017 	ldw	fp,0(sp)
81124ab8:	dec00204 	addi	sp,sp,8
81124abc:	f800283a 	ret

81124ac0 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
81124ac0:	defffe04 	addi	sp,sp,-8
81124ac4:	de00012e 	bgeu	sp,et,81124acc <OSInit+0xc>
81124ac8:	003b68fa 	trap	3
81124acc:	dfc00115 	stw	ra,4(sp)
81124ad0:	df000015 	stw	fp,0(sp)
81124ad4:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81124ad8:	1137f940 	call	81137f94 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81124adc:	11258c80 	call	811258c8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
81124ae0:	11259180 	call	81125918 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81124ae4:	1125a9c0 	call	81125a9c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81124ae8:	11257e00 	call	811257e0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81124aec:	1127a5c0 	call	81127a5c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
81124af0:	11283a40 	call	811283a4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81124af4:	112a6740 	call	8112a674 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81124af8:	112598c0 	call	8112598c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81124afc:	1125a140 	call	81125a14 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
81124b00:	112da180 	call	8112da18 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81124b04:	1137fc00 	call	81137fc0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81124b08:	11263780 	call	81126378 <OSDebugInit>
#endif
}
81124b0c:	0001883a 	nop
81124b10:	e037883a 	mov	sp,fp
81124b14:	dfc00117 	ldw	ra,4(sp)
81124b18:	df000017 	ldw	fp,0(sp)
81124b1c:	dec00204 	addi	sp,sp,8
81124b20:	f800283a 	ret

81124b24 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
81124b24:	deffff04 	addi	sp,sp,-4
81124b28:	de00012e 	bgeu	sp,et,81124b30 <OSIntEnter+0xc>
81124b2c:	003b68fa 	trap	3
81124b30:	df000015 	stw	fp,0(sp)
81124b34:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
81124b38:	d0a07f03 	ldbu	r2,-32260(gp)
81124b3c:	10803fcc 	andi	r2,r2,255
81124b40:	10800058 	cmpnei	r2,r2,1
81124b44:	1000071e 	bne	r2,zero,81124b64 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
81124b48:	d0a08f03 	ldbu	r2,-32196(gp)
81124b4c:	10803fcc 	andi	r2,r2,255
81124b50:	10803fe0 	cmpeqi	r2,r2,255
81124b54:	1000031e 	bne	r2,zero,81124b64 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
81124b58:	d0a08f03 	ldbu	r2,-32196(gp)
81124b5c:	10800044 	addi	r2,r2,1
81124b60:	d0a08f05 	stb	r2,-32196(gp)
        }
    }
}
81124b64:	0001883a 	nop
81124b68:	e037883a 	mov	sp,fp
81124b6c:	df000017 	ldw	fp,0(sp)
81124b70:	dec00104 	addi	sp,sp,4
81124b74:	f800283a 	ret

81124b78 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
81124b78:	defffb04 	addi	sp,sp,-20
81124b7c:	de00012e 	bgeu	sp,et,81124b84 <OSIntExit+0xc>
81124b80:	003b68fa 	trap	3
81124b84:	dfc00415 	stw	ra,16(sp)
81124b88:	df000315 	stw	fp,12(sp)
81124b8c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81124b90:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
81124b94:	d0a07f03 	ldbu	r2,-32260(gp)
81124b98:	10803fcc 	andi	r2,r2,255
81124b9c:	10800058 	cmpnei	r2,r2,1
81124ba0:	10002f1e 	bne	r2,zero,81124c60 <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124ba4:	0005303a 	rdctl	r2,status
81124ba8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124bac:	e0ffff17 	ldw	r3,-4(fp)
81124bb0:	00bfff84 	movi	r2,-2
81124bb4:	1884703a 	and	r2,r3,r2
81124bb8:	1001703a 	wrctl	status,r2
  
  return context;
81124bbc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81124bc0:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81124bc4:	d0a08f03 	ldbu	r2,-32196(gp)
81124bc8:	10803fcc 	andi	r2,r2,255
81124bcc:	10000326 	beq	r2,zero,81124bdc <OSIntExit+0x64>
            OSIntNesting--;
81124bd0:	d0a08f03 	ldbu	r2,-32196(gp)
81124bd4:	10bfffc4 	addi	r2,r2,-1
81124bd8:	d0a08f05 	stb	r2,-32196(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
81124bdc:	d0a08f03 	ldbu	r2,-32196(gp)
81124be0:	10803fcc 	andi	r2,r2,255
81124be4:	10001a1e 	bne	r2,zero,81124c50 <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
81124be8:	d0a07d03 	ldbu	r2,-32268(gp)
81124bec:	10803fcc 	andi	r2,r2,255
81124bf0:	1000171e 	bne	r2,zero,81124c50 <OSIntExit+0xd8>
                OS_SchedNew();
81124bf4:	1125d2c0 	call	81125d2c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
81124bf8:	d0e08183 	ldbu	r3,-32250(gp)
81124bfc:	d0a081c3 	ldbu	r2,-32249(gp)
81124c00:	18c03fcc 	andi	r3,r3,255
81124c04:	10803fcc 	andi	r2,r2,255
81124c08:	18801126 	beq	r3,r2,81124c50 <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
81124c0c:	d0a08183 	ldbu	r2,-32250(gp)
81124c10:	10c03fcc 	andi	r3,r2,255
81124c14:	00a045b4 	movhi	r2,33046
81124c18:	10904e04 	addi	r2,r2,16696
81124c1c:	18c7883a 	add	r3,r3,r3
81124c20:	18c7883a 	add	r3,r3,r3
81124c24:	10c5883a 	add	r2,r2,r3
81124c28:	10800017 	ldw	r2,0(r2)
81124c2c:	d0a08a15 	stw	r2,-32216(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
81124c30:	d0a08a17 	ldw	r2,-32216(gp)
81124c34:	10c00e17 	ldw	r3,56(r2)
81124c38:	18c00044 	addi	r3,r3,1
81124c3c:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
81124c40:	d0a08417 	ldw	r2,-32240(gp)
81124c44:	10800044 	addi	r2,r2,1
81124c48:	d0a08415 	stw	r2,-32240(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
81124c4c:	1137c540 	call	81137c54 <OSCtxSw>
81124c50:	e0bffd17 	ldw	r2,-12(fp)
81124c54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124c58:	e0bffe17 	ldw	r2,-8(fp)
81124c5c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81124c60:	0001883a 	nop
81124c64:	e037883a 	mov	sp,fp
81124c68:	dfc00117 	ldw	ra,4(sp)
81124c6c:	df000017 	ldw	fp,0(sp)
81124c70:	dec00204 	addi	sp,sp,8
81124c74:	f800283a 	ret

81124c78 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
81124c78:	defffc04 	addi	sp,sp,-16
81124c7c:	de00012e 	bgeu	sp,et,81124c84 <OSSchedLock+0xc>
81124c80:	003b68fa 	trap	3
81124c84:	df000315 	stw	fp,12(sp)
81124c88:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124c8c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
81124c90:	d0a07f03 	ldbu	r2,-32260(gp)
81124c94:	10803fcc 	andi	r2,r2,255
81124c98:	10800058 	cmpnei	r2,r2,1
81124c9c:	1000161e 	bne	r2,zero,81124cf8 <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124ca0:	0005303a 	rdctl	r2,status
81124ca4:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124ca8:	e0ffff17 	ldw	r3,-4(fp)
81124cac:	00bfff84 	movi	r2,-2
81124cb0:	1884703a 	and	r2,r3,r2
81124cb4:	1001703a 	wrctl	status,r2
  
  return context;
81124cb8:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81124cbc:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
81124cc0:	d0a08f03 	ldbu	r2,-32196(gp)
81124cc4:	10803fcc 	andi	r2,r2,255
81124cc8:	1000071e 	bne	r2,zero,81124ce8 <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81124ccc:	d0a07d03 	ldbu	r2,-32268(gp)
81124cd0:	10803fcc 	andi	r2,r2,255
81124cd4:	10803fe0 	cmpeqi	r2,r2,255
81124cd8:	1000031e 	bne	r2,zero,81124ce8 <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81124cdc:	d0a07d03 	ldbu	r2,-32268(gp)
81124ce0:	10800044 	addi	r2,r2,1
81124ce4:	d0a07d05 	stb	r2,-32268(gp)
81124ce8:	e0bffd17 	ldw	r2,-12(fp)
81124cec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124cf0:	e0bffe17 	ldw	r2,-8(fp)
81124cf4:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81124cf8:	0001883a 	nop
81124cfc:	e037883a 	mov	sp,fp
81124d00:	df000017 	ldw	fp,0(sp)
81124d04:	dec00104 	addi	sp,sp,4
81124d08:	f800283a 	ret

81124d0c <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81124d0c:	defff804 	addi	sp,sp,-32
81124d10:	de00012e 	bgeu	sp,et,81124d18 <OSSchedUnlock+0xc>
81124d14:	003b68fa 	trap	3
81124d18:	dfc00715 	stw	ra,28(sp)
81124d1c:	df000615 	stw	fp,24(sp)
81124d20:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81124d24:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
81124d28:	d0a07f03 	ldbu	r2,-32260(gp)
81124d2c:	10803fcc 	andi	r2,r2,255
81124d30:	10800058 	cmpnei	r2,r2,1
81124d34:	1000281e 	bne	r2,zero,81124dd8 <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124d38:	0005303a 	rdctl	r2,status
81124d3c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124d40:	e0ffff17 	ldw	r3,-4(fp)
81124d44:	00bfff84 	movi	r2,-2
81124d48:	1884703a 	and	r2,r3,r2
81124d4c:	1001703a 	wrctl	status,r2
  
  return context;
81124d50:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81124d54:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
81124d58:	d0a07d03 	ldbu	r2,-32268(gp)
81124d5c:	10803fcc 	andi	r2,r2,255
81124d60:	10001926 	beq	r2,zero,81124dc8 <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
81124d64:	d0a07d03 	ldbu	r2,-32268(gp)
81124d68:	10bfffc4 	addi	r2,r2,-1
81124d6c:	d0a07d05 	stb	r2,-32268(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
81124d70:	d0a07d03 	ldbu	r2,-32268(gp)
81124d74:	10803fcc 	andi	r2,r2,255
81124d78:	10000e1e 	bne	r2,zero,81124db4 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
81124d7c:	d0a08f03 	ldbu	r2,-32196(gp)
81124d80:	10803fcc 	andi	r2,r2,255
81124d84:	1000061e 	bne	r2,zero,81124da0 <OSSchedUnlock+0x94>
81124d88:	e0bffa17 	ldw	r2,-24(fp)
81124d8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124d90:	e0bffb17 	ldw	r2,-20(fp)
81124d94:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
81124d98:	1125c540 	call	81125c54 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
81124d9c:	00000e06 	br	81124dd8 <OSSchedUnlock+0xcc>
81124da0:	e0bffa17 	ldw	r2,-24(fp)
81124da4:	e0bffc15 	stw	r2,-16(fp)
81124da8:	e0bffc17 	ldw	r2,-16(fp)
81124dac:	1001703a 	wrctl	status,r2
81124db0:	00000906 	br	81124dd8 <OSSchedUnlock+0xcc>
81124db4:	e0bffa17 	ldw	r2,-24(fp)
81124db8:	e0bffd15 	stw	r2,-12(fp)
81124dbc:	e0bffd17 	ldw	r2,-12(fp)
81124dc0:	1001703a 	wrctl	status,r2
81124dc4:	00000406 	br	81124dd8 <OSSchedUnlock+0xcc>
81124dc8:	e0bffa17 	ldw	r2,-24(fp)
81124dcc:	e0bffe15 	stw	r2,-8(fp)
81124dd0:	e0bffe17 	ldw	r2,-8(fp)
81124dd4:	1001703a 	wrctl	status,r2
81124dd8:	0001883a 	nop
81124ddc:	e037883a 	mov	sp,fp
81124de0:	dfc00117 	ldw	ra,4(sp)
81124de4:	df000017 	ldw	fp,0(sp)
81124de8:	dec00204 	addi	sp,sp,8
81124dec:	f800283a 	ret

81124df0 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
81124df0:	defffe04 	addi	sp,sp,-8
81124df4:	de00012e 	bgeu	sp,et,81124dfc <OSStart+0xc>
81124df8:	003b68fa 	trap	3
81124dfc:	dfc00115 	stw	ra,4(sp)
81124e00:	df000015 	stw	fp,0(sp)
81124e04:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
81124e08:	d0a07f03 	ldbu	r2,-32260(gp)
81124e0c:	10803fcc 	andi	r2,r2,255
81124e10:	10000f1e 	bne	r2,zero,81124e50 <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
81124e14:	1125d2c0 	call	81125d2c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
81124e18:	d0a08183 	ldbu	r2,-32250(gp)
81124e1c:	d0a081c5 	stb	r2,-32249(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
81124e20:	d0a08183 	ldbu	r2,-32250(gp)
81124e24:	10c03fcc 	andi	r3,r2,255
81124e28:	00a045b4 	movhi	r2,33046
81124e2c:	10904e04 	addi	r2,r2,16696
81124e30:	18c7883a 	add	r3,r3,r3
81124e34:	18c7883a 	add	r3,r3,r3
81124e38:	10c5883a 	add	r2,r2,r3
81124e3c:	10800017 	ldw	r2,0(r2)
81124e40:	d0a08a15 	stw	r2,-32216(gp)
        OSTCBCur      = OSTCBHighRdy;
81124e44:	d0a08a17 	ldw	r2,-32216(gp)
81124e48:	d0a09015 	stw	r2,-32192(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
81124e4c:	1137cf00 	call	81137cf0 <OSStartHighRdy>
    }
}
81124e50:	0001883a 	nop
81124e54:	e037883a 	mov	sp,fp
81124e58:	dfc00117 	ldw	ra,4(sp)
81124e5c:	df000017 	ldw	fp,0(sp)
81124e60:	dec00204 	addi	sp,sp,8
81124e64:	f800283a 	ret

81124e68 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
81124e68:	defff904 	addi	sp,sp,-28
81124e6c:	de00012e 	bgeu	sp,et,81124e74 <OSStatInit+0xc>
81124e70:	003b68fa 	trap	3
81124e74:	dfc00615 	stw	ra,24(sp)
81124e78:	df000515 	stw	fp,20(sp)
81124e7c:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81124e80:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
81124e84:	01000084 	movi	r4,2
81124e88:	112c9900 	call	8112c990 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124e8c:	0005303a 	rdctl	r2,status
81124e90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124e94:	e0fffc17 	ldw	r3,-16(fp)
81124e98:	00bfff84 	movi	r2,-2
81124e9c:	1884703a 	and	r2,r3,r2
81124ea0:	1001703a 	wrctl	status,r2
  
  return context;
81124ea4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
81124ea8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
81124eac:	d0208015 	stw	zero,-32256(gp)
81124eb0:	e0bffb17 	ldw	r2,-20(fp)
81124eb4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124eb8:	e0bffd17 	ldw	r2,-12(fp)
81124ebc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
81124ec0:	01001904 	movi	r4,100
81124ec4:	112c9900 	call	8112c990 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124ec8:	0005303a 	rdctl	r2,status
81124ecc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124ed0:	e0fffe17 	ldw	r3,-8(fp)
81124ed4:	00bfff84 	movi	r2,-2
81124ed8:	1884703a 	and	r2,r3,r2
81124edc:	1001703a 	wrctl	status,r2
  
  return context;
81124ee0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
81124ee4:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
81124ee8:	d0a08017 	ldw	r2,-32256(gp)
81124eec:	d0a08615 	stw	r2,-32232(gp)
    OSStatRdy    = OS_TRUE;
81124ef0:	00800044 	movi	r2,1
81124ef4:	d0a09505 	stb	r2,-32172(gp)
81124ef8:	e0bffb17 	ldw	r2,-20(fp)
81124efc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124f00:	e0bfff17 	ldw	r2,-4(fp)
81124f04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81124f08:	0001883a 	nop
81124f0c:	e037883a 	mov	sp,fp
81124f10:	dfc00117 	ldw	ra,4(sp)
81124f14:	df000017 	ldw	fp,0(sp)
81124f18:	dec00204 	addi	sp,sp,8
81124f1c:	f800283a 	ret

81124f20 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
81124f20:	defff704 	addi	sp,sp,-36
81124f24:	de00012e 	bgeu	sp,et,81124f2c <OSTimeTick+0xc>
81124f28:	003b68fa 	trap	3
81124f2c:	dfc00815 	stw	ra,32(sp)
81124f30:	df000715 	stw	fp,28(sp)
81124f34:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81124f38:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
81124f3c:	1137f400 	call	81137f40 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124f40:	0005303a 	rdctl	r2,status
81124f44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124f48:	e0fffd17 	ldw	r3,-12(fp)
81124f4c:	00bfff84 	movi	r2,-2
81124f50:	1884703a 	and	r2,r3,r2
81124f54:	1001703a 	wrctl	status,r2
  
  return context;
81124f58:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
81124f5c:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
81124f60:	d0a09217 	ldw	r2,-32184(gp)
81124f64:	10800044 	addi	r2,r2,1
81124f68:	d0a09215 	stw	r2,-32184(gp)
81124f6c:	e0bffb17 	ldw	r2,-20(fp)
81124f70:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124f74:	e0bfff17 	ldw	r2,-4(fp)
81124f78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
81124f7c:	d0a07f03 	ldbu	r2,-32260(gp)
81124f80:	10803fcc 	andi	r2,r2,255
81124f84:	10800058 	cmpnei	r2,r2,1
81124f88:	10006a1e 	bne	r2,zero,81125134 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
81124f8c:	d0a08303 	ldbu	r2,-32244(gp)
81124f90:	10803fcc 	andi	r2,r2,255
81124f94:	10c00060 	cmpeqi	r3,r2,1
81124f98:	1800061e 	bne	r3,zero,81124fb4 <OSTimeTick+0x94>
81124f9c:	10c000a0 	cmpeqi	r3,r2,2
81124fa0:	1800061e 	bne	r3,zero,81124fbc <OSTimeTick+0x9c>
81124fa4:	10000a1e 	bne	r2,zero,81124fd0 <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
81124fa8:	00800044 	movi	r2,1
81124fac:	e0bffa05 	stb	r2,-24(fp)
                 break;
81124fb0:	00000b06 	br	81124fe0 <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
81124fb4:	e03ffa05 	stb	zero,-24(fp)
                 break;
81124fb8:	00000906 	br	81124fe0 <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
81124fbc:	00800044 	movi	r2,1
81124fc0:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
81124fc4:	00800044 	movi	r2,1
81124fc8:	d0a08305 	stb	r2,-32244(gp)
                 break;
81124fcc:	00000406 	br	81124fe0 <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
81124fd0:	00800044 	movi	r2,1
81124fd4:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
81124fd8:	d0208305 	stb	zero,-32244(gp)
                 break;
81124fdc:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
81124fe0:	e0bffa03 	ldbu	r2,-24(fp)
81124fe4:	10005226 	beq	r2,zero,81125130 <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
81124fe8:	d0a08217 	ldw	r2,-32248(gp)
81124fec:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81124ff0:	00004906 	br	81125118 <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124ff4:	0005303a 	rdctl	r2,status
81124ff8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124ffc:	e0fffc17 	ldw	r3,-16(fp)
81125000:	00bfff84 	movi	r2,-2
81125004:	1884703a 	and	r2,r3,r2
81125008:	1001703a 	wrctl	status,r2
  
  return context;
8112500c:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
81125010:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
81125014:	e0bff917 	ldw	r2,-28(fp)
81125018:	10800b8b 	ldhu	r2,46(r2)
8112501c:	10bfffcc 	andi	r2,r2,65535
81125020:	10003626 	beq	r2,zero,811250fc <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
81125024:	e0bff917 	ldw	r2,-28(fp)
81125028:	10800b8b 	ldhu	r2,46(r2)
8112502c:	10bfffc4 	addi	r2,r2,-1
81125030:	1007883a 	mov	r3,r2
81125034:	e0bff917 	ldw	r2,-28(fp)
81125038:	10c00b8d 	sth	r3,46(r2)
8112503c:	e0bff917 	ldw	r2,-28(fp)
81125040:	10800b8b 	ldhu	r2,46(r2)
81125044:	10bfffcc 	andi	r2,r2,65535
81125048:	10002c1e 	bne	r2,zero,811250fc <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112504c:	e0bff917 	ldw	r2,-28(fp)
81125050:	10800c03 	ldbu	r2,48(r2)
81125054:	10803fcc 	andi	r2,r2,255
81125058:	10800dcc 	andi	r2,r2,55
8112505c:	10000b26 	beq	r2,zero,8112508c <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
81125060:	e0bff917 	ldw	r2,-28(fp)
81125064:	10c00c03 	ldbu	r3,48(r2)
81125068:	00bff204 	movi	r2,-56
8112506c:	1884703a 	and	r2,r3,r2
81125070:	1007883a 	mov	r3,r2
81125074:	e0bff917 	ldw	r2,-28(fp)
81125078:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
8112507c:	e0bff917 	ldw	r2,-28(fp)
81125080:	00c00044 	movi	r3,1
81125084:	10c00c45 	stb	r3,49(r2)
81125088:	00000206 	br	81125094 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112508c:	e0bff917 	ldw	r2,-28(fp)
81125090:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
81125094:	e0bff917 	ldw	r2,-28(fp)
81125098:	10800c03 	ldbu	r2,48(r2)
8112509c:	10803fcc 	andi	r2,r2,255
811250a0:	1080020c 	andi	r2,r2,8
811250a4:	1000151e 	bne	r2,zero,811250fc <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
811250a8:	e0bff917 	ldw	r2,-28(fp)
811250ac:	10c00d83 	ldbu	r3,54(r2)
811250b0:	d0a08c03 	ldbu	r2,-32208(gp)
811250b4:	1884b03a 	or	r2,r3,r2
811250b8:	d0a08c05 	stb	r2,-32208(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811250bc:	e0bff917 	ldw	r2,-28(fp)
811250c0:	10800d03 	ldbu	r2,52(r2)
811250c4:	10c03fcc 	andi	r3,r2,255
811250c8:	e0bff917 	ldw	r2,-28(fp)
811250cc:	10800d03 	ldbu	r2,52(r2)
811250d0:	11003fcc 	andi	r4,r2,255
811250d4:	d0a08c44 	addi	r2,gp,-32207
811250d8:	2085883a 	add	r2,r4,r2
811250dc:	11000003 	ldbu	r4,0(r2)
811250e0:	e0bff917 	ldw	r2,-28(fp)
811250e4:	10800d43 	ldbu	r2,53(r2)
811250e8:	2084b03a 	or	r2,r4,r2
811250ec:	1009883a 	mov	r4,r2
811250f0:	d0a08c44 	addi	r2,gp,-32207
811250f4:	1885883a 	add	r2,r3,r2
811250f8:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
811250fc:	e0bff917 	ldw	r2,-28(fp)
81125100:	10800517 	ldw	r2,20(r2)
81125104:	e0bff915 	stw	r2,-28(fp)
81125108:	e0bffb17 	ldw	r2,-20(fp)
8112510c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125110:	e0bffe17 	ldw	r2,-8(fp)
81125114:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81125118:	e0bff917 	ldw	r2,-28(fp)
8112511c:	10800c83 	ldbu	r2,50(r2)
81125120:	10803fcc 	andi	r2,r2,255
81125124:	10800a18 	cmpnei	r2,r2,40
81125128:	103fb21e 	bne	r2,zero,81124ff4 <__reset+0xfb104ff4>
8112512c:	00000106 	br	81125134 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
81125130:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
81125134:	e037883a 	mov	sp,fp
81125138:	dfc00117 	ldw	ra,4(sp)
8112513c:	df000017 	ldw	fp,0(sp)
81125140:	dec00204 	addi	sp,sp,8
81125144:	f800283a 	ret

81125148 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
81125148:	deffff04 	addi	sp,sp,-4
8112514c:	de00012e 	bgeu	sp,et,81125154 <OSVersion+0xc>
81125150:	003b68fa 	trap	3
81125154:	df000015 	stw	fp,0(sp)
81125158:	d839883a 	mov	fp,sp
    return (OS_VERSION);
8112515c:	00804784 	movi	r2,286
}
81125160:	e037883a 	mov	sp,fp
81125164:	df000017 	ldw	fp,0(sp)
81125168:	dec00104 	addi	sp,sp,4
8112516c:	f800283a 	ret

81125170 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
81125170:	deffff04 	addi	sp,sp,-4
81125174:	de00012e 	bgeu	sp,et,8112517c <OS_Dummy+0xc>
81125178:	003b68fa 	trap	3
8112517c:	df000015 	stw	fp,0(sp)
81125180:	d839883a 	mov	fp,sp
}
81125184:	0001883a 	nop
81125188:	e037883a 	mov	sp,fp
8112518c:	df000017 	ldw	fp,0(sp)
81125190:	dec00104 	addi	sp,sp,4
81125194:	f800283a 	ret

81125198 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
81125198:	defff804 	addi	sp,sp,-32
8112519c:	de00012e 	bgeu	sp,et,811251a4 <OS_EventTaskRdy+0xc>
811251a0:	003b68fa 	trap	3
811251a4:	dfc00715 	stw	ra,28(sp)
811251a8:	df000615 	stw	fp,24(sp)
811251ac:	df000604 	addi	fp,sp,24
811251b0:	e13ffc15 	stw	r4,-16(fp)
811251b4:	e17ffd15 	stw	r5,-12(fp)
811251b8:	3007883a 	mov	r3,r6
811251bc:	3805883a 	mov	r2,r7
811251c0:	e0fffe05 	stb	r3,-8(fp)
811251c4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
811251c8:	e0bffc17 	ldw	r2,-16(fp)
811251cc:	10800283 	ldbu	r2,10(r2)
811251d0:	10c03fcc 	andi	r3,r2,255
811251d4:	00a04534 	movhi	r2,33044
811251d8:	10abc204 	addi	r2,r2,-20728
811251dc:	10c5883a 	add	r2,r2,r3
811251e0:	10800003 	ldbu	r2,0(r2)
811251e4:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
811251e8:	e0bffa03 	ldbu	r2,-24(fp)
811251ec:	e0fffc17 	ldw	r3,-16(fp)
811251f0:	1885883a 	add	r2,r3,r2
811251f4:	108002c4 	addi	r2,r2,11
811251f8:	10800003 	ldbu	r2,0(r2)
811251fc:	10c03fcc 	andi	r3,r2,255
81125200:	00a04534 	movhi	r2,33044
81125204:	10abc204 	addi	r2,r2,-20728
81125208:	10c5883a 	add	r2,r2,r3
8112520c:	10800003 	ldbu	r2,0(r2)
81125210:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
81125214:	e0bffa03 	ldbu	r2,-24(fp)
81125218:	100490fa 	slli	r2,r2,3
8112521c:	1007883a 	mov	r3,r2
81125220:	e0bffa43 	ldbu	r2,-23(fp)
81125224:	1885883a 	add	r2,r3,r2
81125228:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
8112522c:	e0fffa83 	ldbu	r3,-22(fp)
81125230:	00a045b4 	movhi	r2,33046
81125234:	10904e04 	addi	r2,r2,16696
81125238:	18c7883a 	add	r3,r3,r3
8112523c:	18c7883a 	add	r3,r3,r3
81125240:	10c5883a 	add	r2,r2,r3
81125244:	10800017 	ldw	r2,0(r2)
81125248:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
8112524c:	e0bffb17 	ldw	r2,-20(fp)
81125250:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
81125254:	e0bffb17 	ldw	r2,-20(fp)
81125258:	e0fffd17 	ldw	r3,-12(fp)
8112525c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
81125260:	e0bffb17 	ldw	r2,-20(fp)
81125264:	10800c03 	ldbu	r2,48(r2)
81125268:	1007883a 	mov	r3,r2
8112526c:	e0bffe03 	ldbu	r2,-8(fp)
81125270:	0084303a 	nor	r2,zero,r2
81125274:	1884703a 	and	r2,r3,r2
81125278:	1007883a 	mov	r3,r2
8112527c:	e0bffb17 	ldw	r2,-20(fp)
81125280:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
81125284:	e0bffb17 	ldw	r2,-20(fp)
81125288:	e0ffff03 	ldbu	r3,-4(fp)
8112528c:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
81125290:	e0bffb17 	ldw	r2,-20(fp)
81125294:	10800c03 	ldbu	r2,48(r2)
81125298:	10803fcc 	andi	r2,r2,255
8112529c:	1080020c 	andi	r2,r2,8
811252a0:	1000111e 	bne	r2,zero,811252e8 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
811252a4:	e0bffb17 	ldw	r2,-20(fp)
811252a8:	10c00d83 	ldbu	r3,54(r2)
811252ac:	d0a08c03 	ldbu	r2,-32208(gp)
811252b0:	1884b03a 	or	r2,r3,r2
811252b4:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
811252b8:	e0fffa03 	ldbu	r3,-24(fp)
811252bc:	e13ffa03 	ldbu	r4,-24(fp)
811252c0:	d0a08c44 	addi	r2,gp,-32207
811252c4:	2085883a 	add	r2,r4,r2
811252c8:	11000003 	ldbu	r4,0(r2)
811252cc:	e0bffb17 	ldw	r2,-20(fp)
811252d0:	10800d43 	ldbu	r2,53(r2)
811252d4:	2084b03a 	or	r2,r4,r2
811252d8:	1009883a 	mov	r4,r2
811252dc:	d0a08c44 	addi	r2,gp,-32207
811252e0:	1885883a 	add	r2,r3,r2
811252e4:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
811252e8:	e17ffc17 	ldw	r5,-16(fp)
811252ec:	e13ffb17 	ldw	r4,-20(fp)
811252f0:	11255a80 	call	811255a8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
811252f4:	e0bffb17 	ldw	r2,-20(fp)
811252f8:	10800817 	ldw	r2,32(r2)
811252fc:	10000826 	beq	r2,zero,81125320 <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81125300:	e0bffb17 	ldw	r2,-20(fp)
81125304:	10800817 	ldw	r2,32(r2)
81125308:	100b883a 	mov	r5,r2
8112530c:	e13ffb17 	ldw	r4,-20(fp)
81125310:	11256680 	call	81125668 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
81125314:	e0bffb17 	ldw	r2,-20(fp)
81125318:	e0fffc17 	ldw	r3,-16(fp)
8112531c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
81125320:	e0bffa83 	ldbu	r2,-22(fp)
}
81125324:	e037883a 	mov	sp,fp
81125328:	dfc00117 	ldw	ra,4(sp)
8112532c:	df000017 	ldw	fp,0(sp)
81125330:	dec00204 	addi	sp,sp,8
81125334:	f800283a 	ret

81125338 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
81125338:	defffd04 	addi	sp,sp,-12
8112533c:	de00012e 	bgeu	sp,et,81125344 <OS_EventTaskWait+0xc>
81125340:	003b68fa 	trap	3
81125344:	df000215 	stw	fp,8(sp)
81125348:	df000204 	addi	fp,sp,8
8112534c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
81125350:	d0a09017 	ldw	r2,-32192(gp)
81125354:	e0ffff17 	ldw	r3,-4(fp)
81125358:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
8112535c:	d0a09017 	ldw	r2,-32192(gp)
81125360:	10800d03 	ldbu	r2,52(r2)
81125364:	10803fcc 	andi	r2,r2,255
81125368:	d0e09017 	ldw	r3,-32192(gp)
8112536c:	18c00d03 	ldbu	r3,52(r3)
81125370:	18c03fcc 	andi	r3,r3,255
81125374:	e13fff17 	ldw	r4,-4(fp)
81125378:	20c7883a 	add	r3,r4,r3
8112537c:	18c002c4 	addi	r3,r3,11
81125380:	19000003 	ldbu	r4,0(r3)
81125384:	d0e09017 	ldw	r3,-32192(gp)
81125388:	18c00d43 	ldbu	r3,53(r3)
8112538c:	20c6b03a 	or	r3,r4,r3
81125390:	1809883a 	mov	r4,r3
81125394:	e0ffff17 	ldw	r3,-4(fp)
81125398:	1885883a 	add	r2,r3,r2
8112539c:	108002c4 	addi	r2,r2,11
811253a0:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
811253a4:	e0bfff17 	ldw	r2,-4(fp)
811253a8:	10c00283 	ldbu	r3,10(r2)
811253ac:	d0a09017 	ldw	r2,-32192(gp)
811253b0:	10800d83 	ldbu	r2,54(r2)
811253b4:	1884b03a 	or	r2,r3,r2
811253b8:	1007883a 	mov	r3,r2
811253bc:	e0bfff17 	ldw	r2,-4(fp)
811253c0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
811253c4:	d0a09017 	ldw	r2,-32192(gp)
811253c8:	10800d03 	ldbu	r2,52(r2)
811253cc:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
811253d0:	e0fffe03 	ldbu	r3,-8(fp)
811253d4:	e13ffe03 	ldbu	r4,-8(fp)
811253d8:	d0a08c44 	addi	r2,gp,-32207
811253dc:	2085883a 	add	r2,r4,r2
811253e0:	10800003 	ldbu	r2,0(r2)
811253e4:	1009883a 	mov	r4,r2
811253e8:	d0a09017 	ldw	r2,-32192(gp)
811253ec:	10800d43 	ldbu	r2,53(r2)
811253f0:	0084303a 	nor	r2,zero,r2
811253f4:	2084703a 	and	r2,r4,r2
811253f8:	1009883a 	mov	r4,r2
811253fc:	d0a08c44 	addi	r2,gp,-32207
81125400:	1885883a 	add	r2,r3,r2
81125404:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81125408:	e0fffe03 	ldbu	r3,-8(fp)
8112540c:	d0a08c44 	addi	r2,gp,-32207
81125410:	1885883a 	add	r2,r3,r2
81125414:	10800003 	ldbu	r2,0(r2)
81125418:	10803fcc 	andi	r2,r2,255
8112541c:	1000071e 	bne	r2,zero,8112543c <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81125420:	d0a09017 	ldw	r2,-32192(gp)
81125424:	10800d83 	ldbu	r2,54(r2)
81125428:	0084303a 	nor	r2,zero,r2
8112542c:	1007883a 	mov	r3,r2
81125430:	d0a08c03 	ldbu	r2,-32208(gp)
81125434:	1884703a 	and	r2,r3,r2
81125438:	d0a08c05 	stb	r2,-32208(gp)
    }
}
8112543c:	0001883a 	nop
81125440:	e037883a 	mov	sp,fp
81125444:	df000017 	ldw	fp,0(sp)
81125448:	dec00104 	addi	sp,sp,4
8112544c:	f800283a 	ret

81125450 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
81125450:	defffb04 	addi	sp,sp,-20
81125454:	de00012e 	bgeu	sp,et,8112545c <OS_EventTaskWaitMulti+0xc>
81125458:	003b68fa 	trap	3
8112545c:	df000415 	stw	fp,16(sp)
81125460:	df000404 	addi	fp,sp,16
81125464:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
81125468:	d0a09017 	ldw	r2,-32192(gp)
8112546c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
81125470:	d0a09017 	ldw	r2,-32192(gp)
81125474:	e0ffff17 	ldw	r3,-4(fp)
81125478:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
8112547c:	e0bfff17 	ldw	r2,-4(fp)
81125480:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
81125484:	e0bffc17 	ldw	r2,-16(fp)
81125488:	10800017 	ldw	r2,0(r2)
8112548c:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81125490:	00002006 	br	81125514 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
81125494:	d0a09017 	ldw	r2,-32192(gp)
81125498:	10800d03 	ldbu	r2,52(r2)
8112549c:	10803fcc 	andi	r2,r2,255
811254a0:	d0e09017 	ldw	r3,-32192(gp)
811254a4:	18c00d03 	ldbu	r3,52(r3)
811254a8:	18c03fcc 	andi	r3,r3,255
811254ac:	e13ffd17 	ldw	r4,-12(fp)
811254b0:	20c7883a 	add	r3,r4,r3
811254b4:	18c002c4 	addi	r3,r3,11
811254b8:	19000003 	ldbu	r4,0(r3)
811254bc:	d0e09017 	ldw	r3,-32192(gp)
811254c0:	18c00d43 	ldbu	r3,53(r3)
811254c4:	20c6b03a 	or	r3,r4,r3
811254c8:	1809883a 	mov	r4,r3
811254cc:	e0fffd17 	ldw	r3,-12(fp)
811254d0:	1885883a 	add	r2,r3,r2
811254d4:	108002c4 	addi	r2,r2,11
811254d8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
811254dc:	e0bffd17 	ldw	r2,-12(fp)
811254e0:	10c00283 	ldbu	r3,10(r2)
811254e4:	d0a09017 	ldw	r2,-32192(gp)
811254e8:	10800d83 	ldbu	r2,54(r2)
811254ec:	1884b03a 	or	r2,r3,r2
811254f0:	1007883a 	mov	r3,r2
811254f4:	e0bffd17 	ldw	r2,-12(fp)
811254f8:	10c00285 	stb	r3,10(r2)
        pevents++;
811254fc:	e0bffc17 	ldw	r2,-16(fp)
81125500:	10800104 	addi	r2,r2,4
81125504:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
81125508:	e0bffc17 	ldw	r2,-16(fp)
8112550c:	10800017 	ldw	r2,0(r2)
81125510:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81125514:	e0bffd17 	ldw	r2,-12(fp)
81125518:	103fde1e 	bne	r2,zero,81125494 <__reset+0xfb105494>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
8112551c:	d0a09017 	ldw	r2,-32192(gp)
81125520:	10800d03 	ldbu	r2,52(r2)
81125524:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81125528:	e0fffe03 	ldbu	r3,-8(fp)
8112552c:	e13ffe03 	ldbu	r4,-8(fp)
81125530:	d0a08c44 	addi	r2,gp,-32207
81125534:	2085883a 	add	r2,r4,r2
81125538:	10800003 	ldbu	r2,0(r2)
8112553c:	1009883a 	mov	r4,r2
81125540:	d0a09017 	ldw	r2,-32192(gp)
81125544:	10800d43 	ldbu	r2,53(r2)
81125548:	0084303a 	nor	r2,zero,r2
8112554c:	2084703a 	and	r2,r4,r2
81125550:	1009883a 	mov	r4,r2
81125554:	d0a08c44 	addi	r2,gp,-32207
81125558:	1885883a 	add	r2,r3,r2
8112555c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81125560:	e0fffe03 	ldbu	r3,-8(fp)
81125564:	d0a08c44 	addi	r2,gp,-32207
81125568:	1885883a 	add	r2,r3,r2
8112556c:	10800003 	ldbu	r2,0(r2)
81125570:	10803fcc 	andi	r2,r2,255
81125574:	1000071e 	bne	r2,zero,81125594 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81125578:	d0a09017 	ldw	r2,-32192(gp)
8112557c:	10800d83 	ldbu	r2,54(r2)
81125580:	0084303a 	nor	r2,zero,r2
81125584:	1007883a 	mov	r3,r2
81125588:	d0a08c03 	ldbu	r2,-32208(gp)
8112558c:	1884703a 	and	r2,r3,r2
81125590:	d0a08c05 	stb	r2,-32208(gp)
    }
}
81125594:	0001883a 	nop
81125598:	e037883a 	mov	sp,fp
8112559c:	df000017 	ldw	fp,0(sp)
811255a0:	dec00104 	addi	sp,sp,4
811255a4:	f800283a 	ret

811255a8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
811255a8:	defffc04 	addi	sp,sp,-16
811255ac:	de00012e 	bgeu	sp,et,811255b4 <OS_EventTaskRemove+0xc>
811255b0:	003b68fa 	trap	3
811255b4:	df000315 	stw	fp,12(sp)
811255b8:	df000304 	addi	fp,sp,12
811255bc:	e13ffe15 	stw	r4,-8(fp)
811255c0:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
811255c4:	e0bffe17 	ldw	r2,-8(fp)
811255c8:	10800d03 	ldbu	r2,52(r2)
811255cc:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
811255d0:	e0bffd03 	ldbu	r2,-12(fp)
811255d4:	e0fffd03 	ldbu	r3,-12(fp)
811255d8:	e13fff17 	ldw	r4,-4(fp)
811255dc:	20c7883a 	add	r3,r4,r3
811255e0:	18c002c4 	addi	r3,r3,11
811255e4:	18c00003 	ldbu	r3,0(r3)
811255e8:	1809883a 	mov	r4,r3
811255ec:	e0fffe17 	ldw	r3,-8(fp)
811255f0:	18c00d43 	ldbu	r3,53(r3)
811255f4:	00c6303a 	nor	r3,zero,r3
811255f8:	20c6703a 	and	r3,r4,r3
811255fc:	1809883a 	mov	r4,r3
81125600:	e0ffff17 	ldw	r3,-4(fp)
81125604:	1885883a 	add	r2,r3,r2
81125608:	108002c4 	addi	r2,r2,11
8112560c:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
81125610:	e0bffd03 	ldbu	r2,-12(fp)
81125614:	e0ffff17 	ldw	r3,-4(fp)
81125618:	1885883a 	add	r2,r3,r2
8112561c:	108002c4 	addi	r2,r2,11
81125620:	10800003 	ldbu	r2,0(r2)
81125624:	10803fcc 	andi	r2,r2,255
81125628:	10000a1e 	bne	r2,zero,81125654 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
8112562c:	e0bfff17 	ldw	r2,-4(fp)
81125630:	10800283 	ldbu	r2,10(r2)
81125634:	1007883a 	mov	r3,r2
81125638:	e0bffe17 	ldw	r2,-8(fp)
8112563c:	10800d83 	ldbu	r2,54(r2)
81125640:	0084303a 	nor	r2,zero,r2
81125644:	1884703a 	and	r2,r3,r2
81125648:	1007883a 	mov	r3,r2
8112564c:	e0bfff17 	ldw	r2,-4(fp)
81125650:	10c00285 	stb	r3,10(r2)
    }
}
81125654:	0001883a 	nop
81125658:	e037883a 	mov	sp,fp
8112565c:	df000017 	ldw	fp,0(sp)
81125660:	dec00104 	addi	sp,sp,4
81125664:	f800283a 	ret

81125668 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
81125668:	defffa04 	addi	sp,sp,-24
8112566c:	de00012e 	bgeu	sp,et,81125674 <OS_EventTaskRemoveMulti+0xc>
81125670:	003b68fa 	trap	3
81125674:	df000515 	stw	fp,20(sp)
81125678:	df000504 	addi	fp,sp,20
8112567c:	e13ffe15 	stw	r4,-8(fp)
81125680:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
81125684:	e0bffe17 	ldw	r2,-8(fp)
81125688:	10800d03 	ldbu	r2,52(r2)
8112568c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
81125690:	e0bffe17 	ldw	r2,-8(fp)
81125694:	10800d83 	ldbu	r2,54(r2)
81125698:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
8112569c:	e0bffe17 	ldw	r2,-8(fp)
811256a0:	10800d43 	ldbu	r2,53(r2)
811256a4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
811256a8:	e0bfff17 	ldw	r2,-4(fp)
811256ac:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
811256b0:	e0bffb17 	ldw	r2,-20(fp)
811256b4:	10800017 	ldw	r2,0(r2)
811256b8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
811256bc:	00002506 	br	81125754 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
811256c0:	e0bffd03 	ldbu	r2,-12(fp)
811256c4:	e0fffd03 	ldbu	r3,-12(fp)
811256c8:	e13ffc17 	ldw	r4,-16(fp)
811256cc:	20c7883a 	add	r3,r4,r3
811256d0:	18c002c4 	addi	r3,r3,11
811256d4:	18c00003 	ldbu	r3,0(r3)
811256d8:	1809883a 	mov	r4,r3
811256dc:	e0fffd83 	ldbu	r3,-10(fp)
811256e0:	00c6303a 	nor	r3,zero,r3
811256e4:	20c6703a 	and	r3,r4,r3
811256e8:	1809883a 	mov	r4,r3
811256ec:	e0fffc17 	ldw	r3,-16(fp)
811256f0:	1885883a 	add	r2,r3,r2
811256f4:	108002c4 	addi	r2,r2,11
811256f8:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
811256fc:	e0bffd03 	ldbu	r2,-12(fp)
81125700:	e0fffc17 	ldw	r3,-16(fp)
81125704:	1885883a 	add	r2,r3,r2
81125708:	108002c4 	addi	r2,r2,11
8112570c:	10800003 	ldbu	r2,0(r2)
81125710:	10803fcc 	andi	r2,r2,255
81125714:	1000091e 	bne	r2,zero,8112573c <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
81125718:	e0bffc17 	ldw	r2,-16(fp)
8112571c:	10800283 	ldbu	r2,10(r2)
81125720:	1007883a 	mov	r3,r2
81125724:	e0bffd43 	ldbu	r2,-11(fp)
81125728:	0084303a 	nor	r2,zero,r2
8112572c:	1884703a 	and	r2,r3,r2
81125730:	1007883a 	mov	r3,r2
81125734:	e0bffc17 	ldw	r2,-16(fp)
81125738:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
8112573c:	e0bffb17 	ldw	r2,-20(fp)
81125740:	10800104 	addi	r2,r2,4
81125744:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
81125748:	e0bffb17 	ldw	r2,-20(fp)
8112574c:	10800017 	ldw	r2,0(r2)
81125750:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81125754:	e0bffc17 	ldw	r2,-16(fp)
81125758:	103fd91e 	bne	r2,zero,811256c0 <__reset+0xfb1056c0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
8112575c:	0001883a 	nop
81125760:	e037883a 	mov	sp,fp
81125764:	df000017 	ldw	fp,0(sp)
81125768:	dec00104 	addi	sp,sp,4
8112576c:	f800283a 	ret

81125770 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
81125770:	defffc04 	addi	sp,sp,-16
81125774:	de00012e 	bgeu	sp,et,8112577c <OS_EventWaitListInit+0xc>
81125778:	003b68fa 	trap	3
8112577c:	df000315 	stw	fp,12(sp)
81125780:	df000304 	addi	fp,sp,12
81125784:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
81125788:	e0bfff17 	ldw	r2,-4(fp)
8112578c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
81125790:	e0bfff17 	ldw	r2,-4(fp)
81125794:	108002c4 	addi	r2,r2,11
81125798:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112579c:	e03ffe05 	stb	zero,-8(fp)
811257a0:	00000706 	br	811257c0 <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
811257a4:	e0bffd17 	ldw	r2,-12(fp)
811257a8:	10c00044 	addi	r3,r2,1
811257ac:	e0fffd15 	stw	r3,-12(fp)
811257b0:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811257b4:	e0bffe03 	ldbu	r2,-8(fp)
811257b8:	10800044 	addi	r2,r2,1
811257bc:	e0bffe05 	stb	r2,-8(fp)
811257c0:	e0bffe03 	ldbu	r2,-8(fp)
811257c4:	108001b0 	cmpltui	r2,r2,6
811257c8:	103ff61e 	bne	r2,zero,811257a4 <__reset+0xfb1057a4>
        *ptbl++ = 0;
    }
}
811257cc:	0001883a 	nop
811257d0:	e037883a 	mov	sp,fp
811257d4:	df000017 	ldw	fp,0(sp)
811257d8:	dec00104 	addi	sp,sp,4
811257dc:	f800283a 	ret

811257e0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
811257e0:	defffb04 	addi	sp,sp,-20
811257e4:	de00012e 	bgeu	sp,et,811257ec <OS_InitEventList+0xc>
811257e8:	003b68fa 	trap	3
811257ec:	dfc00415 	stw	ra,16(sp)
811257f0:	df000315 	stw	fp,12(sp)
811257f4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
811257f8:	01430c04 	movi	r5,3120
811257fc:	012045b4 	movhi	r4,33046
81125800:	2109ac04 	addi	r4,r4,9904
81125804:	1125b880 	call	81125b88 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
81125808:	00a045b4 	movhi	r2,33046
8112580c:	1089ac04 	addi	r2,r2,9904
81125810:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
81125814:	00a045b4 	movhi	r2,33046
81125818:	1089b904 	addi	r2,r2,9956
8112581c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81125820:	e03ffd0d 	sth	zero,-12(fp)
81125824:	00001306 	br	81125874 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
81125828:	e0bffe17 	ldw	r2,-8(fp)
8112582c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
81125830:	e0bffe17 	ldw	r2,-8(fp)
81125834:	e0ffff17 	ldw	r3,-4(fp)
81125838:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
8112583c:	e0bffe17 	ldw	r2,-8(fp)
81125840:	00c00fc4 	movi	r3,63
81125844:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
81125848:	e0bffe17 	ldw	r2,-8(fp)
8112584c:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
81125850:	e0bffe17 	ldw	r2,-8(fp)
81125854:	10800d04 	addi	r2,r2,52
81125858:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
8112585c:	e0bfff17 	ldw	r2,-4(fp)
81125860:	10800d04 	addi	r2,r2,52
81125864:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81125868:	e0bffd0b 	ldhu	r2,-12(fp)
8112586c:	10800044 	addi	r2,r2,1
81125870:	e0bffd0d 	sth	r2,-12(fp)
81125874:	e0bffd0b 	ldhu	r2,-12(fp)
81125878:	10800ef0 	cmpltui	r2,r2,59
8112587c:	103fea1e 	bne	r2,zero,81125828 <__reset+0xfb105828>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
81125880:	e0bffe17 	ldw	r2,-8(fp)
81125884:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
81125888:	e0bffe17 	ldw	r2,-8(fp)
8112588c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
81125890:	e0bffe17 	ldw	r2,-8(fp)
81125894:	00c00fc4 	movi	r3,63
81125898:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
8112589c:	e0bffe17 	ldw	r2,-8(fp)
811258a0:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
811258a4:	00a045b4 	movhi	r2,33046
811258a8:	1089ac04 	addi	r2,r2,9904
811258ac:	d0a08e15 	stw	r2,-32200(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
811258b0:	0001883a 	nop
811258b4:	e037883a 	mov	sp,fp
811258b8:	dfc00117 	ldw	ra,4(sp)
811258bc:	df000017 	ldw	fp,0(sp)
811258c0:	dec00204 	addi	sp,sp,8
811258c4:	f800283a 	ret

811258c8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
811258c8:	deffff04 	addi	sp,sp,-4
811258cc:	de00012e 	bgeu	sp,et,811258d4 <OS_InitMisc+0xc>
811258d0:	003b68fa 	trap	3
811258d4:	df000015 	stw	fp,0(sp)
811258d8:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
811258dc:	d0209215 	stw	zero,-32184(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
811258e0:	d0208f05 	stb	zero,-32196(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
811258e4:	d0207d05 	stb	zero,-32268(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
811258e8:	d0208845 	stb	zero,-32223(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
811258ec:	d0207f05 	stb	zero,-32260(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
811258f0:	d0208415 	stw	zero,-32240(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
811258f4:	d0208015 	stw	zero,-32256(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
811258f8:	d0209615 	stw	zero,-32168(gp)
    OSIdleCtrMax  = 0L;
811258fc:	d0208615 	stw	zero,-32232(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
81125900:	d0209505 	stb	zero,-32172(gp)
#endif
}
81125904:	0001883a 	nop
81125908:	e037883a 	mov	sp,fp
8112590c:	df000017 	ldw	fp,0(sp)
81125910:	dec00104 	addi	sp,sp,4
81125914:	f800283a 	ret

81125918 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
81125918:	defffd04 	addi	sp,sp,-12
8112591c:	de00012e 	bgeu	sp,et,81125924 <OS_InitRdyList+0xc>
81125920:	003b68fa 	trap	3
81125924:	df000215 	stw	fp,8(sp)
81125928:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
8112592c:	d0208c05 	stb	zero,-32208(gp)
    prdytbl       = &OSRdyTbl[0];
81125930:	d0a08c44 	addi	r2,gp,-32207
81125934:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81125938:	e03ffe05 	stb	zero,-8(fp)
8112593c:	00000706 	br	8112595c <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
81125940:	e0bfff17 	ldw	r2,-4(fp)
81125944:	10c00044 	addi	r3,r2,1
81125948:	e0ffff15 	stw	r3,-4(fp)
8112594c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81125950:	e0bffe03 	ldbu	r2,-8(fp)
81125954:	10800044 	addi	r2,r2,1
81125958:	e0bffe05 	stb	r2,-8(fp)
8112595c:	e0bffe03 	ldbu	r2,-8(fp)
81125960:	108001b0 	cmpltui	r2,r2,6
81125964:	103ff61e 	bne	r2,zero,81125940 <__reset+0xfb105940>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
81125968:	d02081c5 	stb	zero,-32249(gp)
    OSPrioHighRdy = 0;
8112596c:	d0208185 	stb	zero,-32250(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
81125970:	d0208a15 	stw	zero,-32216(gp)
    OSTCBCur      = (OS_TCB *)0;
81125974:	d0209015 	stw	zero,-32192(gp)
}
81125978:	0001883a 	nop
8112597c:	e037883a 	mov	sp,fp
81125980:	df000017 	ldw	fp,0(sp)
81125984:	dec00104 	addi	sp,sp,4
81125988:	f800283a 	ret

8112598c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
8112598c:	defff804 	addi	sp,sp,-32
81125990:	de00012e 	bgeu	sp,et,81125998 <OS_InitTaskIdle+0xc>
81125994:	003b68fa 	trap	3
81125998:	dfc00715 	stw	ra,28(sp)
8112599c:	df000615 	stw	fp,24(sp)
811259a0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
811259a4:	008000c4 	movi	r2,3
811259a8:	d8800415 	stw	r2,16(sp)
811259ac:	d8000315 	stw	zero,12(sp)
811259b0:	00808004 	movi	r2,512
811259b4:	d8800215 	stw	r2,8(sp)
811259b8:	00a045b4 	movhi	r2,33046
811259bc:	1087ac04 	addi	r2,r2,7856
811259c0:	d8800115 	stw	r2,4(sp)
811259c4:	00bfffd4 	movui	r2,65535
811259c8:	d8800015 	stw	r2,0(sp)
811259cc:	01c00a04 	movi	r7,40
811259d0:	01a045b4 	movhi	r6,33046
811259d4:	3189ab04 	addi	r6,r6,9900
811259d8:	000b883a 	mov	r5,zero
811259dc:	012044b4 	movhi	r4,33042
811259e0:	2117a004 	addi	r4,r4,24192
811259e4:	112b8700 	call	8112b870 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
811259e8:	e1bfff04 	addi	r6,fp,-4
811259ec:	01604534 	movhi	r5,33044
811259f0:	296c0204 	addi	r5,r5,-20472
811259f4:	01000a04 	movi	r4,40
811259f8:	112c0a00 	call	8112c0a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
811259fc:	0001883a 	nop
81125a00:	e037883a 	mov	sp,fp
81125a04:	dfc00117 	ldw	ra,4(sp)
81125a08:	df000017 	ldw	fp,0(sp)
81125a0c:	dec00204 	addi	sp,sp,8
81125a10:	f800283a 	ret

81125a14 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
81125a14:	defff804 	addi	sp,sp,-32
81125a18:	de00012e 	bgeu	sp,et,81125a20 <OS_InitTaskStat+0xc>
81125a1c:	003b68fa 	trap	3
81125a20:	dfc00715 	stw	ra,28(sp)
81125a24:	df000615 	stw	fp,24(sp)
81125a28:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
81125a2c:	008000c4 	movi	r2,3
81125a30:	d8800415 	stw	r2,16(sp)
81125a34:	d8000315 	stw	zero,12(sp)
81125a38:	00808004 	movi	r2,512
81125a3c:	d8800215 	stw	r2,8(sp)
81125a40:	00a045b4 	movhi	r2,33046
81125a44:	10833404 	addi	r2,r2,3280
81125a48:	d8800115 	stw	r2,4(sp)
81125a4c:	00bfff94 	movui	r2,65534
81125a50:	d8800015 	stw	r2,0(sp)
81125a54:	01c009c4 	movi	r7,39
81125a58:	01a045b4 	movhi	r6,33046
81125a5c:	31853304 	addi	r6,r6,5324
81125a60:	000b883a 	mov	r5,zero
81125a64:	012044b4 	movhi	r4,33042
81125a68:	2117b904 	addi	r4,r4,24292
81125a6c:	112b8700 	call	8112b870 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
81125a70:	e1bfff04 	addi	r6,fp,-4
81125a74:	01604534 	movhi	r5,33044
81125a78:	296c0604 	addi	r5,r5,-20456
81125a7c:	010009c4 	movi	r4,39
81125a80:	112c0a00 	call	8112c0a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
81125a84:	0001883a 	nop
81125a88:	e037883a 	mov	sp,fp
81125a8c:	dfc00117 	ldw	ra,4(sp)
81125a90:	df000017 	ldw	fp,0(sp)
81125a94:	dec00204 	addi	sp,sp,8
81125a98:	f800283a 	ret

81125a9c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
81125a9c:	defffb04 	addi	sp,sp,-20
81125aa0:	de00012e 	bgeu	sp,et,81125aa8 <OS_InitTCBList+0xc>
81125aa4:	003b68fa 	trap	3
81125aa8:	dfc00415 	stw	ra,16(sp)
81125aac:	df000315 	stw	fp,12(sp)
81125ab0:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
81125ab4:	01439604 	movi	r5,3672
81125ab8:	012045b4 	movhi	r4,33046
81125abc:	210cb804 	addi	r4,r4,13024
81125ac0:	1125b880 	call	81125b88 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
81125ac4:	01402904 	movi	r5,164
81125ac8:	012045b4 	movhi	r4,33046
81125acc:	21104e04 	addi	r4,r4,16696
81125ad0:	1125b880 	call	81125b88 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
81125ad4:	00a045b4 	movhi	r2,33046
81125ad8:	108cb804 	addi	r2,r2,13024
81125adc:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
81125ae0:	00a045b4 	movhi	r2,33046
81125ae4:	108cd304 	addi	r2,r2,13132
81125ae8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81125aec:	e03ffd05 	stb	zero,-12(fp)
81125af0:	00001106 	br	81125b38 <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
81125af4:	e0bffe17 	ldw	r2,-8(fp)
81125af8:	e0ffff17 	ldw	r3,-4(fp)
81125afc:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
81125b00:	e0bffe17 	ldw	r2,-8(fp)
81125b04:	00c00fc4 	movi	r3,63
81125b08:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81125b0c:	e0bffe17 	ldw	r2,-8(fp)
81125b10:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
81125b14:	e0bffe17 	ldw	r2,-8(fp)
81125b18:	10801b04 	addi	r2,r2,108
81125b1c:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
81125b20:	e0bfff17 	ldw	r2,-4(fp)
81125b24:	10801b04 	addi	r2,r2,108
81125b28:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81125b2c:	e0bffd03 	ldbu	r2,-12(fp)
81125b30:	10800044 	addi	r2,r2,1
81125b34:	e0bffd05 	stb	r2,-12(fp)
81125b38:	e0bffd03 	ldbu	r2,-12(fp)
81125b3c:	10800870 	cmpltui	r2,r2,33
81125b40:	103fec1e 	bne	r2,zero,81125af4 <__reset+0xfb105af4>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
81125b44:	e0bffe17 	ldw	r2,-8(fp)
81125b48:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
81125b4c:	e0bffe17 	ldw	r2,-8(fp)
81125b50:	00c00fc4 	movi	r3,63
81125b54:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81125b58:	e0bffe17 	ldw	r2,-8(fp)
81125b5c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
81125b60:	d0208215 	stw	zero,-32248(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
81125b64:	00a045b4 	movhi	r2,33046
81125b68:	108cb804 	addi	r2,r2,13024
81125b6c:	d0a08715 	stw	r2,-32228(gp)
}
81125b70:	0001883a 	nop
81125b74:	e037883a 	mov	sp,fp
81125b78:	dfc00117 	ldw	ra,4(sp)
81125b7c:	df000017 	ldw	fp,0(sp)
81125b80:	dec00204 	addi	sp,sp,8
81125b84:	f800283a 	ret

81125b88 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
81125b88:	defffd04 	addi	sp,sp,-12
81125b8c:	de00012e 	bgeu	sp,et,81125b94 <OS_MemClr+0xc>
81125b90:	003b68fa 	trap	3
81125b94:	df000215 	stw	fp,8(sp)
81125b98:	df000204 	addi	fp,sp,8
81125b9c:	e13ffe15 	stw	r4,-8(fp)
81125ba0:	2805883a 	mov	r2,r5
81125ba4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81125ba8:	00000706 	br	81125bc8 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
81125bac:	e0bffe17 	ldw	r2,-8(fp)
81125bb0:	10c00044 	addi	r3,r2,1
81125bb4:	e0fffe15 	stw	r3,-8(fp)
81125bb8:	10000005 	stb	zero,0(r2)
        size--;
81125bbc:	e0bfff0b 	ldhu	r2,-4(fp)
81125bc0:	10bfffc4 	addi	r2,r2,-1
81125bc4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
81125bc8:	e0bfff0b 	ldhu	r2,-4(fp)
81125bcc:	103ff71e 	bne	r2,zero,81125bac <__reset+0xfb105bac>
        *pdest++ = (INT8U)0;
        size--;
    }
}
81125bd0:	0001883a 	nop
81125bd4:	e037883a 	mov	sp,fp
81125bd8:	df000017 	ldw	fp,0(sp)
81125bdc:	dec00104 	addi	sp,sp,4
81125be0:	f800283a 	ret

81125be4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
81125be4:	defffc04 	addi	sp,sp,-16
81125be8:	de00012e 	bgeu	sp,et,81125bf0 <OS_MemCopy+0xc>
81125bec:	003b68fa 	trap	3
81125bf0:	df000315 	stw	fp,12(sp)
81125bf4:	df000304 	addi	fp,sp,12
81125bf8:	e13ffd15 	stw	r4,-12(fp)
81125bfc:	e17ffe15 	stw	r5,-8(fp)
81125c00:	3005883a 	mov	r2,r6
81125c04:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81125c08:	00000b06 	br	81125c38 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
81125c0c:	e0bffd17 	ldw	r2,-12(fp)
81125c10:	10c00044 	addi	r3,r2,1
81125c14:	e0fffd15 	stw	r3,-12(fp)
81125c18:	e0fffe17 	ldw	r3,-8(fp)
81125c1c:	19000044 	addi	r4,r3,1
81125c20:	e13ffe15 	stw	r4,-8(fp)
81125c24:	18c00003 	ldbu	r3,0(r3)
81125c28:	10c00005 	stb	r3,0(r2)
        size--;
81125c2c:	e0bfff0b 	ldhu	r2,-4(fp)
81125c30:	10bfffc4 	addi	r2,r2,-1
81125c34:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
81125c38:	e0bfff0b 	ldhu	r2,-4(fp)
81125c3c:	103ff31e 	bne	r2,zero,81125c0c <__reset+0xfb105c0c>
        *pdest++ = *psrc++;
        size--;
    }
}
81125c40:	0001883a 	nop
81125c44:	e037883a 	mov	sp,fp
81125c48:	df000017 	ldw	fp,0(sp)
81125c4c:	dec00104 	addi	sp,sp,4
81125c50:	f800283a 	ret

81125c54 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
81125c54:	defffb04 	addi	sp,sp,-20
81125c58:	de00012e 	bgeu	sp,et,81125c60 <OS_Sched+0xc>
81125c5c:	003b68fa 	trap	3
81125c60:	dfc00415 	stw	ra,16(sp)
81125c64:	df000315 	stw	fp,12(sp)
81125c68:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81125c6c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125c70:	0005303a 	rdctl	r2,status
81125c74:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125c78:	e0ffff17 	ldw	r3,-4(fp)
81125c7c:	00bfff84 	movi	r2,-2
81125c80:	1884703a 	and	r2,r3,r2
81125c84:	1001703a 	wrctl	status,r2
  
  return context;
81125c88:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
81125c8c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
81125c90:	d0a08f03 	ldbu	r2,-32196(gp)
81125c94:	10803fcc 	andi	r2,r2,255
81125c98:	10001a1e 	bne	r2,zero,81125d04 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
81125c9c:	d0a07d03 	ldbu	r2,-32268(gp)
81125ca0:	10803fcc 	andi	r2,r2,255
81125ca4:	1000171e 	bne	r2,zero,81125d04 <OS_Sched+0xb0>
            OS_SchedNew();
81125ca8:	1125d2c0 	call	81125d2c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
81125cac:	d0e08183 	ldbu	r3,-32250(gp)
81125cb0:	d0a081c3 	ldbu	r2,-32249(gp)
81125cb4:	18c03fcc 	andi	r3,r3,255
81125cb8:	10803fcc 	andi	r2,r2,255
81125cbc:	18801126 	beq	r3,r2,81125d04 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
81125cc0:	d0a08183 	ldbu	r2,-32250(gp)
81125cc4:	10c03fcc 	andi	r3,r2,255
81125cc8:	00a045b4 	movhi	r2,33046
81125ccc:	10904e04 	addi	r2,r2,16696
81125cd0:	18c7883a 	add	r3,r3,r3
81125cd4:	18c7883a 	add	r3,r3,r3
81125cd8:	10c5883a 	add	r2,r2,r3
81125cdc:	10800017 	ldw	r2,0(r2)
81125ce0:	d0a08a15 	stw	r2,-32216(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
81125ce4:	d0a08a17 	ldw	r2,-32216(gp)
81125ce8:	10c00e17 	ldw	r3,56(r2)
81125cec:	18c00044 	addi	r3,r3,1
81125cf0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
81125cf4:	d0a08417 	ldw	r2,-32240(gp)
81125cf8:	10800044 	addi	r2,r2,1
81125cfc:	d0a08415 	stw	r2,-32240(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
81125d00:	1137c540 	call	81137c54 <OSCtxSw>
81125d04:	e0bffd17 	ldw	r2,-12(fp)
81125d08:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125d0c:	e0bffe17 	ldw	r2,-8(fp)
81125d10:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
81125d14:	0001883a 	nop
81125d18:	e037883a 	mov	sp,fp
81125d1c:	dfc00117 	ldw	ra,4(sp)
81125d20:	df000017 	ldw	fp,0(sp)
81125d24:	dec00204 	addi	sp,sp,8
81125d28:	f800283a 	ret

81125d2c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
81125d2c:	defffe04 	addi	sp,sp,-8
81125d30:	de00012e 	bgeu	sp,et,81125d38 <OS_SchedNew+0xc>
81125d34:	003b68fa 	trap	3
81125d38:	df000115 	stw	fp,4(sp)
81125d3c:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
81125d40:	d0a08c03 	ldbu	r2,-32208(gp)
81125d44:	10c03fcc 	andi	r3,r2,255
81125d48:	00a04534 	movhi	r2,33044
81125d4c:	10abc204 	addi	r2,r2,-20728
81125d50:	10c5883a 	add	r2,r2,r3
81125d54:	10800003 	ldbu	r2,0(r2)
81125d58:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
81125d5c:	e0bfff03 	ldbu	r2,-4(fp)
81125d60:	100490fa 	slli	r2,r2,3
81125d64:	1009883a 	mov	r4,r2
81125d68:	e0ffff03 	ldbu	r3,-4(fp)
81125d6c:	d0a08c44 	addi	r2,gp,-32207
81125d70:	1885883a 	add	r2,r3,r2
81125d74:	10800003 	ldbu	r2,0(r2)
81125d78:	10c03fcc 	andi	r3,r2,255
81125d7c:	00a04534 	movhi	r2,33044
81125d80:	10abc204 	addi	r2,r2,-20728
81125d84:	10c5883a 	add	r2,r2,r3
81125d88:	10800003 	ldbu	r2,0(r2)
81125d8c:	2085883a 	add	r2,r4,r2
81125d90:	d0a08185 	stb	r2,-32250(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
81125d94:	0001883a 	nop
81125d98:	e037883a 	mov	sp,fp
81125d9c:	df000017 	ldw	fp,0(sp)
81125da0:	dec00104 	addi	sp,sp,4
81125da4:	f800283a 	ret

81125da8 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
81125da8:	defffc04 	addi	sp,sp,-16
81125dac:	de00012e 	bgeu	sp,et,81125db4 <OS_StrCopy+0xc>
81125db0:	003b68fa 	trap	3
81125db4:	df000315 	stw	fp,12(sp)
81125db8:	df000304 	addi	fp,sp,12
81125dbc:	e13ffe15 	stw	r4,-8(fp)
81125dc0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
81125dc4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
81125dc8:	00000b06 	br	81125df8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
81125dcc:	e0bffe17 	ldw	r2,-8(fp)
81125dd0:	10c00044 	addi	r3,r2,1
81125dd4:	e0fffe15 	stw	r3,-8(fp)
81125dd8:	e0ffff17 	ldw	r3,-4(fp)
81125ddc:	19000044 	addi	r4,r3,1
81125de0:	e13fff15 	stw	r4,-4(fp)
81125de4:	18c00003 	ldbu	r3,0(r3)
81125de8:	10c00005 	stb	r3,0(r2)
        len++;
81125dec:	e0bffd03 	ldbu	r2,-12(fp)
81125df0:	10800044 	addi	r2,r2,1
81125df4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81125df8:	e0bfff17 	ldw	r2,-4(fp)
81125dfc:	10800003 	ldbu	r2,0(r2)
81125e00:	10803fcc 	andi	r2,r2,255
81125e04:	103ff11e 	bne	r2,zero,81125dcc <__reset+0xfb105dcc>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
81125e08:	e0bffe17 	ldw	r2,-8(fp)
81125e0c:	10000005 	stb	zero,0(r2)
    return (len);
81125e10:	e0bffd03 	ldbu	r2,-12(fp)
}
81125e14:	e037883a 	mov	sp,fp
81125e18:	df000017 	ldw	fp,0(sp)
81125e1c:	dec00104 	addi	sp,sp,4
81125e20:	f800283a 	ret

81125e24 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
81125e24:	defffd04 	addi	sp,sp,-12
81125e28:	de00012e 	bgeu	sp,et,81125e30 <OS_StrLen+0xc>
81125e2c:	003b68fa 	trap	3
81125e30:	df000215 	stw	fp,8(sp)
81125e34:	df000204 	addi	fp,sp,8
81125e38:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
81125e3c:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
81125e40:	00000606 	br	81125e5c <OS_StrLen+0x38>
        psrc++;
81125e44:	e0bfff17 	ldw	r2,-4(fp)
81125e48:	10800044 	addi	r2,r2,1
81125e4c:	e0bfff15 	stw	r2,-4(fp)
        len++;
81125e50:	e0bffe03 	ldbu	r2,-8(fp)
81125e54:	10800044 	addi	r2,r2,1
81125e58:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81125e5c:	e0bfff17 	ldw	r2,-4(fp)
81125e60:	10800003 	ldbu	r2,0(r2)
81125e64:	10803fcc 	andi	r2,r2,255
81125e68:	103ff61e 	bne	r2,zero,81125e44 <__reset+0xfb105e44>
        psrc++;
        len++;
    }
    return (len);
81125e6c:	e0bffe03 	ldbu	r2,-8(fp)
}
81125e70:	e037883a 	mov	sp,fp
81125e74:	df000017 	ldw	fp,0(sp)
81125e78:	dec00104 	addi	sp,sp,4
81125e7c:	f800283a 	ret

81125e80 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
81125e80:	defffa04 	addi	sp,sp,-24
81125e84:	de00012e 	bgeu	sp,et,81125e8c <OS_TaskIdle+0xc>
81125e88:	003b68fa 	trap	3
81125e8c:	dfc00515 	stw	ra,20(sp)
81125e90:	df000415 	stw	fp,16(sp)
81125e94:	df000404 	addi	fp,sp,16
81125e98:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81125e9c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125ea0:	0005303a 	rdctl	r2,status
81125ea4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125ea8:	e0fffd17 	ldw	r3,-12(fp)
81125eac:	00bfff84 	movi	r2,-2
81125eb0:	1884703a 	and	r2,r3,r2
81125eb4:	1001703a 	wrctl	status,r2
  
  return context;
81125eb8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
81125ebc:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
81125ec0:	d0a08017 	ldw	r2,-32256(gp)
81125ec4:	10800044 	addi	r2,r2,1
81125ec8:	d0a08015 	stw	r2,-32256(gp)
81125ecc:	e0bffc17 	ldw	r2,-16(fp)
81125ed0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125ed4:	e0bffe17 	ldw	r2,-8(fp)
81125ed8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
81125edc:	1137fe80 	call	81137fe8 <OSTaskIdleHook>
    }
81125ee0:	003fef06 	br	81125ea0 <__reset+0xfb105ea0>

81125ee4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
81125ee4:	defff804 	addi	sp,sp,-32
81125ee8:	de00012e 	bgeu	sp,et,81125ef0 <OS_TaskStat+0xc>
81125eec:	003b68fa 	trap	3
81125ef0:	dfc00715 	stw	ra,28(sp)
81125ef4:	df000615 	stw	fp,24(sp)
81125ef8:	dc400515 	stw	r17,20(sp)
81125efc:	dc000415 	stw	r16,16(sp)
81125f00:	df000604 	addi	fp,sp,24
81125f04:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81125f08:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81125f0c:	00000206 	br	81125f18 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
81125f10:	01003204 	movi	r4,200
81125f14:	112c9900 	call	8112c990 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81125f18:	d0a09503 	ldbu	r2,-32172(gp)
81125f1c:	10803fcc 	andi	r2,r2,255
81125f20:	103ffb26 	beq	r2,zero,81125f10 <__reset+0xfb105f10>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
81125f24:	d0e08617 	ldw	r3,-32232(gp)
81125f28:	00947b34 	movhi	r2,20972
81125f2c:	10a147c4 	addi	r2,r2,-31457
81125f30:	1888383a 	mulxuu	r4,r3,r2
81125f34:	1885383a 	mul	r2,r3,r2
81125f38:	1021883a 	mov	r16,r2
81125f3c:	2023883a 	mov	r17,r4
81125f40:	8804d17a 	srli	r2,r17,5
81125f44:	d0a08615 	stw	r2,-32232(gp)
    if (OSIdleCtrMax == 0L) {
81125f48:	d0a08617 	ldw	r2,-32232(gp)
81125f4c:	1000031e 	bne	r2,zero,81125f5c <OS_TaskStat+0x78>
        OSCPUUsage = 0;
81125f50:	d0208805 	stb	zero,-32224(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
81125f54:	01003fc4 	movi	r4,255
81125f58:	112c6000 	call	8112c600 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125f5c:	0005303a 	rdctl	r2,status
81125f60:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125f64:	e0fffb17 	ldw	r3,-20(fp)
81125f68:	00bfff84 	movi	r2,-2
81125f6c:	1884703a 	and	r2,r3,r2
81125f70:	1001703a 	wrctl	status,r2
  
  return context;
81125f74:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
81125f78:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
81125f7c:	d0a08017 	ldw	r2,-32256(gp)
81125f80:	d0a09615 	stw	r2,-32168(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
81125f84:	d0208015 	stw	zero,-32256(gp)
81125f88:	e0bffa17 	ldw	r2,-24(fp)
81125f8c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125f90:	e0bffc17 	ldw	r2,-16(fp)
81125f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
81125f98:	d0e09617 	ldw	r3,-32168(gp)
81125f9c:	d0a08617 	ldw	r2,-32232(gp)
81125fa0:	1885203a 	divu	r2,r3,r2
81125fa4:	1007883a 	mov	r3,r2
81125fa8:	00801904 	movi	r2,100
81125fac:	10c5c83a 	sub	r2,r2,r3
81125fb0:	d0a08805 	stb	r2,-32224(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
81125fb4:	1137f180 	call	81137f18 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
81125fb8:	1125fc80 	call	81125fc8 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
81125fbc:	01001904 	movi	r4,100
81125fc0:	112c9900 	call	8112c990 <OSTimeDly>
    }
81125fc4:	003fe506 	br	81125f5c <__reset+0xfb105f5c>

81125fc8 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
81125fc8:	defffa04 	addi	sp,sp,-24
81125fcc:	de00012e 	bgeu	sp,et,81125fd4 <OS_TaskStatStkChk+0xc>
81125fd0:	003b68fa 	trap	3
81125fd4:	dfc00515 	stw	ra,20(sp)
81125fd8:	df000415 	stw	fp,16(sp)
81125fdc:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
81125fe0:	e03ffc05 	stb	zero,-16(fp)
81125fe4:	00002406 	br	81126078 <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
81125fe8:	e0bffc03 	ldbu	r2,-16(fp)
81125fec:	e0fffe04 	addi	r3,fp,-8
81125ff0:	180b883a 	mov	r5,r3
81125ff4:	1009883a 	mov	r4,r2
81125ff8:	112c4380 	call	8112c438 <OSTaskStkChk>
81125ffc:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
81126000:	e0bffc43 	ldbu	r2,-15(fp)
81126004:	1000191e 	bne	r2,zero,8112606c <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
81126008:	e0fffc03 	ldbu	r3,-16(fp)
8112600c:	00a045b4 	movhi	r2,33046
81126010:	10904e04 	addi	r2,r2,16696
81126014:	18c7883a 	add	r3,r3,r3
81126018:	18c7883a 	add	r3,r3,r3
8112601c:	10c5883a 	add	r2,r2,r3
81126020:	10800017 	ldw	r2,0(r2)
81126024:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
81126028:	e0bffd17 	ldw	r2,-12(fp)
8112602c:	10000f26 	beq	r2,zero,8112606c <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
81126030:	e0bffd17 	ldw	r2,-12(fp)
81126034:	10800060 	cmpeqi	r2,r2,1
81126038:	10000c1e 	bne	r2,zero,8112606c <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
8112603c:	e0bffd17 	ldw	r2,-12(fp)
81126040:	10c00217 	ldw	r3,8(r2)
81126044:	e0bffd17 	ldw	r2,-12(fp)
81126048:	10800317 	ldw	r2,12(r2)
8112604c:	1085883a 	add	r2,r2,r2
81126050:	1085883a 	add	r2,r2,r2
81126054:	1887883a 	add	r3,r3,r2
81126058:	e0bffd17 	ldw	r2,-12(fp)
8112605c:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
81126060:	e0ffff17 	ldw	r3,-4(fp)
81126064:	e0bffd17 	ldw	r2,-12(fp)
81126068:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112606c:	e0bffc03 	ldbu	r2,-16(fp)
81126070:	10800044 	addi	r2,r2,1
81126074:	e0bffc05 	stb	r2,-16(fp)
81126078:	e0bffc03 	ldbu	r2,-16(fp)
8112607c:	10800a70 	cmpltui	r2,r2,41
81126080:	103fd91e 	bne	r2,zero,81125fe8 <__reset+0xfb105fe8>
#endif
                }
            }
        }
    }
}
81126084:	0001883a 	nop
81126088:	e037883a 	mov	sp,fp
8112608c:	dfc00117 	ldw	ra,4(sp)
81126090:	df000017 	ldw	fp,0(sp)
81126094:	dec00204 	addi	sp,sp,8
81126098:	f800283a 	ret

8112609c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112609c:	defff204 	addi	sp,sp,-56
811260a0:	de00012e 	bgeu	sp,et,811260a8 <OS_TCBInit+0xc>
811260a4:	003b68fa 	trap	3
811260a8:	dfc00d15 	stw	ra,52(sp)
811260ac:	df000c15 	stw	fp,48(sp)
811260b0:	df000c04 	addi	fp,sp,48
811260b4:	e17ffc15 	stw	r5,-16(fp)
811260b8:	e1bffd15 	stw	r6,-12(fp)
811260bc:	3807883a 	mov	r3,r7
811260c0:	e0800417 	ldw	r2,16(fp)
811260c4:	e13ffb05 	stb	r4,-20(fp)
811260c8:	e0fffe0d 	sth	r3,-8(fp)
811260cc:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811260d0:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811260d4:	0005303a 	rdctl	r2,status
811260d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811260dc:	e0fffa17 	ldw	r3,-24(fp)
811260e0:	00bfff84 	movi	r2,-2
811260e4:	1884703a 	and	r2,r3,r2
811260e8:	1001703a 	wrctl	status,r2
  
  return context;
811260ec:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
811260f0:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
811260f4:	d0a08717 	ldw	r2,-32228(gp)
811260f8:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
811260fc:	e0bff617 	ldw	r2,-40(fp)
81126100:	10009326 	beq	r2,zero,81126350 <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
81126104:	e0bff617 	ldw	r2,-40(fp)
81126108:	10800517 	ldw	r2,20(r2)
8112610c:	d0a08715 	stw	r2,-32228(gp)
81126110:	e0bff417 	ldw	r2,-48(fp)
81126114:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126118:	e0bff817 	ldw	r2,-32(fp)
8112611c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
81126120:	e0bff617 	ldw	r2,-40(fp)
81126124:	e0fffc17 	ldw	r3,-16(fp)
81126128:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
8112612c:	e0bff617 	ldw	r2,-40(fp)
81126130:	e0fffb03 	ldbu	r3,-20(fp)
81126134:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
81126138:	e0bff617 	ldw	r2,-40(fp)
8112613c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
81126140:	e0bff617 	ldw	r2,-40(fp)
81126144:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
81126148:	e0bff617 	ldw	r2,-40(fp)
8112614c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
81126150:	e0bff617 	ldw	r2,-40(fp)
81126154:	e0c00317 	ldw	r3,12(fp)
81126158:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
8112615c:	e0bff617 	ldw	r2,-40(fp)
81126160:	e0c00217 	ldw	r3,8(fp)
81126164:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
81126168:	e0bff617 	ldw	r2,-40(fp)
8112616c:	e0fffd17 	ldw	r3,-12(fp)
81126170:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
81126174:	e0bff617 	ldw	r2,-40(fp)
81126178:	e0ffff0b 	ldhu	r3,-4(fp)
8112617c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
81126180:	e0bff617 	ldw	r2,-40(fp)
81126184:	e0fffe0b 	ldhu	r3,-8(fp)
81126188:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
8112618c:	e0bff617 	ldw	r2,-40(fp)
81126190:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
81126194:	e0bffb03 	ldbu	r2,-20(fp)
81126198:	1004d0fa 	srli	r2,r2,3
8112619c:	1007883a 	mov	r3,r2
811261a0:	e0bff617 	ldw	r2,-40(fp)
811261a4:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
811261a8:	e0bffb03 	ldbu	r2,-20(fp)
811261ac:	108001cc 	andi	r2,r2,7
811261b0:	1007883a 	mov	r3,r2
811261b4:	e0bff617 	ldw	r2,-40(fp)
811261b8:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
811261bc:	e0bff617 	ldw	r2,-40(fp)
811261c0:	10800d03 	ldbu	r2,52(r2)
811261c4:	10803fcc 	andi	r2,r2,255
811261c8:	00c00044 	movi	r3,1
811261cc:	1884983a 	sll	r2,r3,r2
811261d0:	1007883a 	mov	r3,r2
811261d4:	e0bff617 	ldw	r2,-40(fp)
811261d8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
811261dc:	e0bff617 	ldw	r2,-40(fp)
811261e0:	10800cc3 	ldbu	r2,51(r2)
811261e4:	10803fcc 	andi	r2,r2,255
811261e8:	00c00044 	movi	r3,1
811261ec:	1884983a 	sll	r2,r3,r2
811261f0:	1007883a 	mov	r3,r2
811261f4:	e0bff617 	ldw	r2,-40(fp)
811261f8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
811261fc:	e0bff617 	ldw	r2,-40(fp)
81126200:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
81126204:	e0bff617 	ldw	r2,-40(fp)
81126208:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
8112620c:	e0bff617 	ldw	r2,-40(fp)
81126210:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
81126214:	e0bff617 	ldw	r2,-40(fp)
81126218:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
8112621c:	e0bff617 	ldw	r2,-40(fp)
81126220:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
81126224:	e0bff617 	ldw	r2,-40(fp)
81126228:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
8112622c:	e0bff617 	ldw	r2,-40(fp)
81126230:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
81126234:	e0bff617 	ldw	r2,-40(fp)
81126238:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
8112623c:	e0bff617 	ldw	r2,-40(fp)
81126240:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
81126244:	e0bff617 	ldw	r2,-40(fp)
81126248:	00c00fc4 	movi	r3,63
8112624c:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
81126250:	e0bff617 	ldw	r2,-40(fp)
81126254:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
81126258:	e13ff617 	ldw	r4,-40(fp)
8112625c:	11380100 	call	81138010 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
81126260:	e13ff617 	ldw	r4,-40(fp)
81126264:	1137e980 	call	81137e98 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126268:	0005303a 	rdctl	r2,status
8112626c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126270:	e0fff517 	ldw	r3,-44(fp)
81126274:	00bfff84 	movi	r2,-2
81126278:	1884703a 	and	r2,r3,r2
8112627c:	1001703a 	wrctl	status,r2
  
  return context;
81126280:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
81126284:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
81126288:	e0fffb03 	ldbu	r3,-20(fp)
8112628c:	00a045b4 	movhi	r2,33046
81126290:	10904e04 	addi	r2,r2,16696
81126294:	18c7883a 	add	r3,r3,r3
81126298:	18c7883a 	add	r3,r3,r3
8112629c:	10c5883a 	add	r2,r2,r3
811262a0:	e0fff617 	ldw	r3,-40(fp)
811262a4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
811262a8:	d0e08217 	ldw	r3,-32248(gp)
811262ac:	e0bff617 	ldw	r2,-40(fp)
811262b0:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
811262b4:	e0bff617 	ldw	r2,-40(fp)
811262b8:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
811262bc:	d0a08217 	ldw	r2,-32248(gp)
811262c0:	10000326 	beq	r2,zero,811262d0 <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
811262c4:	d0a08217 	ldw	r2,-32248(gp)
811262c8:	e0fff617 	ldw	r3,-40(fp)
811262cc:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
811262d0:	e0bff617 	ldw	r2,-40(fp)
811262d4:	d0a08215 	stw	r2,-32248(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
811262d8:	e0bff617 	ldw	r2,-40(fp)
811262dc:	10c00d83 	ldbu	r3,54(r2)
811262e0:	d0a08c03 	ldbu	r2,-32208(gp)
811262e4:	1884b03a 	or	r2,r3,r2
811262e8:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
811262ec:	e0bff617 	ldw	r2,-40(fp)
811262f0:	10800d03 	ldbu	r2,52(r2)
811262f4:	10c03fcc 	andi	r3,r2,255
811262f8:	e0bff617 	ldw	r2,-40(fp)
811262fc:	10800d03 	ldbu	r2,52(r2)
81126300:	11003fcc 	andi	r4,r2,255
81126304:	d0a08c44 	addi	r2,gp,-32207
81126308:	2085883a 	add	r2,r4,r2
8112630c:	11000003 	ldbu	r4,0(r2)
81126310:	e0bff617 	ldw	r2,-40(fp)
81126314:	10800d43 	ldbu	r2,53(r2)
81126318:	2084b03a 	or	r2,r4,r2
8112631c:	1009883a 	mov	r4,r2
81126320:	d0a08c44 	addi	r2,gp,-32207
81126324:	1885883a 	add	r2,r3,r2
81126328:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
8112632c:	d0a08843 	ldbu	r2,-32223(gp)
81126330:	10800044 	addi	r2,r2,1
81126334:	d0a08845 	stb	r2,-32223(gp)
81126338:	e0bff417 	ldw	r2,-48(fp)
8112633c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126340:	e0bff717 	ldw	r2,-36(fp)
81126344:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81126348:	0005883a 	mov	r2,zero
8112634c:	00000506 	br	81126364 <OS_TCBInit+0x2c8>
81126350:	e0bff417 	ldw	r2,-48(fp)
81126354:	e0bff915 	stw	r2,-28(fp)
81126358:	e0bff917 	ldw	r2,-28(fp)
8112635c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
81126360:	00801084 	movi	r2,66
}
81126364:	e037883a 	mov	sp,fp
81126368:	dfc00117 	ldw	ra,4(sp)
8112636c:	df000017 	ldw	fp,0(sp)
81126370:	dec00204 	addi	sp,sp,8
81126374:	f800283a 	ret

81126378 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
81126378:	defffe04 	addi	sp,sp,-8
8112637c:	de00012e 	bgeu	sp,et,81126384 <OSDebugInit+0xc>
81126380:	003b68fa 	trap	3
81126384:	df000115 	stw	fp,4(sp)
81126388:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
8112638c:	d0a01c04 	addi	r2,gp,-32656
81126390:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
81126394:	d0a01d04 	addi	r2,gp,-32652
81126398:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
8112639c:	d0a01e84 	addi	r2,gp,-32646
811263a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
811263a4:	d0a01f04 	addi	r2,gp,-32644
811263a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
811263ac:	d0a01e04 	addi	r2,gp,-32648
811263b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
811263b4:	d0a01f84 	addi	r2,gp,-32642
811263b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
811263bc:	d0a02004 	addi	r2,gp,-32640
811263c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
811263c4:	d0a02084 	addi	r2,gp,-32638
811263c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
811263cc:	d0a02104 	addi	r2,gp,-32636
811263d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
811263d4:	d0a02184 	addi	r2,gp,-32634
811263d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
811263dc:	d0a02204 	addi	r2,gp,-32632
811263e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
811263e4:	d0a02284 	addi	r2,gp,-32630
811263e8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
811263ec:	d0a02304 	addi	r2,gp,-32628
811263f0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
811263f4:	d0a02384 	addi	r2,gp,-32626
811263f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
811263fc:	d0a02404 	addi	r2,gp,-32624
81126400:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
81126404:	d0a02484 	addi	r2,gp,-32622
81126408:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
8112640c:	d0a02504 	addi	r2,gp,-32620
81126410:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
81126414:	d0a02584 	addi	r2,gp,-32618
81126418:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
8112641c:	d0a02604 	addi	r2,gp,-32616
81126420:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
81126424:	d0a02684 	addi	r2,gp,-32614
81126428:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
8112642c:	d0a02704 	addi	r2,gp,-32612
81126430:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
81126434:	d0a02784 	addi	r2,gp,-32610
81126438:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
8112643c:	d0a02804 	addi	r2,gp,-32608
81126440:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
81126444:	d0a02884 	addi	r2,gp,-32606
81126448:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
8112644c:	d0a02904 	addi	r2,gp,-32604
81126450:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
81126454:	d0a02984 	addi	r2,gp,-32602
81126458:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
8112645c:	d0a02a04 	addi	r2,gp,-32600
81126460:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
81126464:	d0a02a84 	addi	r2,gp,-32598
81126468:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
8112646c:	d0a02b04 	addi	r2,gp,-32596
81126470:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
81126474:	d0a02b84 	addi	r2,gp,-32594
81126478:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
8112647c:	d0a02c04 	addi	r2,gp,-32592
81126480:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
81126484:	d0a02c84 	addi	r2,gp,-32590
81126488:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
8112648c:	d0a02d04 	addi	r2,gp,-32588
81126490:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
81126494:	d0a02d84 	addi	r2,gp,-32586
81126498:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
8112649c:	d0a02e04 	addi	r2,gp,-32584
811264a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
811264a4:	d0a02e84 	addi	r2,gp,-32582
811264a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
811264ac:	d0a02f04 	addi	r2,gp,-32580
811264b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
811264b4:	d0a02f84 	addi	r2,gp,-32578
811264b8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
811264bc:	d0a03004 	addi	r2,gp,-32576
811264c0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
811264c4:	d0a03084 	addi	r2,gp,-32574
811264c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
811264cc:	d0a03104 	addi	r2,gp,-32572
811264d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
811264d4:	d0a03184 	addi	r2,gp,-32570
811264d8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
811264dc:	d0a03204 	addi	r2,gp,-32568
811264e0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
811264e4:	d0a03284 	addi	r2,gp,-32566
811264e8:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
811264ec:	00a045b4 	movhi	r2,33046
811264f0:	10bfc004 	addi	r2,r2,-256
811264f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
811264f8:	00a045b4 	movhi	r2,33046
811264fc:	10bee004 	addi	r2,r2,-1152
81126500:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
81126504:	d0a03384 	addi	r2,gp,-32562
81126508:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
8112650c:	d0a03404 	addi	r2,gp,-32560
81126510:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
81126514:	d0a03484 	addi	r2,gp,-32558
81126518:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
8112651c:	d0a03504 	addi	r2,gp,-32556
81126520:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
81126524:	d0a03584 	addi	r2,gp,-32554
81126528:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
8112652c:	d0a03604 	addi	r2,gp,-32552
81126530:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
81126534:	d0a03684 	addi	r2,gp,-32550
81126538:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
8112653c:	d0a03704 	addi	r2,gp,-32548
81126540:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
81126544:	d0a03784 	addi	r2,gp,-32546
81126548:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
8112654c:	d0a03304 	addi	r2,gp,-32564
81126550:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
81126554:	d0a03804 	addi	r2,gp,-32544
81126558:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
8112655c:	0001883a 	nop
81126560:	e037883a 	mov	sp,fp
81126564:	df000017 	ldw	fp,0(sp)
81126568:	dec00104 	addi	sp,sp,4
8112656c:	f800283a 	ret

81126570 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
81126570:	defff204 	addi	sp,sp,-56
81126574:	de00012e 	bgeu	sp,et,8112657c <OSFlagAccept+0xc>
81126578:	003b68fa 	trap	3
8112657c:	df000d15 	stw	fp,52(sp)
81126580:	df000d04 	addi	fp,sp,52
81126584:	e13ffc15 	stw	r4,-16(fp)
81126588:	2807883a 	mov	r3,r5
8112658c:	3005883a 	mov	r2,r6
81126590:	e1ffff15 	stw	r7,-4(fp)
81126594:	e0fffd0d 	sth	r3,-12(fp)
81126598:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
8112659c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811265a0:	e0bfff17 	ldw	r2,-4(fp)
811265a4:	1000021e 	bne	r2,zero,811265b0 <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
811265a8:	0005883a 	mov	r2,zero
811265ac:	0000b006 	br	81126870 <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
811265b0:	e0bffc17 	ldw	r2,-16(fp)
811265b4:	1000051e 	bne	r2,zero,811265cc <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811265b8:	e0bfff17 	ldw	r2,-4(fp)
811265bc:	00c01b84 	movi	r3,110
811265c0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811265c4:	0005883a 	mov	r2,zero
811265c8:	0000a906 	br	81126870 <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
811265cc:	e0bffc17 	ldw	r2,-16(fp)
811265d0:	10800003 	ldbu	r2,0(r2)
811265d4:	10803fcc 	andi	r2,r2,255
811265d8:	10800160 	cmpeqi	r2,r2,5
811265dc:	1000051e 	bne	r2,zero,811265f4 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
811265e0:	e0bfff17 	ldw	r2,-4(fp)
811265e4:	00c00044 	movi	r3,1
811265e8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811265ec:	0005883a 	mov	r2,zero
811265f0:	00009f06 	br	81126870 <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
811265f4:	e0fffe03 	ldbu	r3,-8(fp)
811265f8:	00bfe004 	movi	r2,-128
811265fc:	1884703a 	and	r2,r3,r2
81126600:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
81126604:	e0bff503 	ldbu	r2,-44(fp)
81126608:	10000626 	beq	r2,zero,81126624 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
8112660c:	e0bffe03 	ldbu	r2,-8(fp)
81126610:	10801fcc 	andi	r2,r2,127
81126614:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81126618:	00800044 	movi	r2,1
8112661c:	e0bff385 	stb	r2,-50(fp)
81126620:	00000106 	br	81126628 <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
81126624:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
81126628:	e0bfff17 	ldw	r2,-4(fp)
8112662c:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126630:	0005303a 	rdctl	r2,status
81126634:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126638:	e0fffb17 	ldw	r3,-20(fp)
8112663c:	00bfff84 	movi	r2,-2
81126640:	1884703a 	and	r2,r3,r2
81126644:	1001703a 	wrctl	status,r2
  
  return context;
81126648:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
8112664c:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
81126650:	e0bffe03 	ldbu	r2,-8(fp)
81126654:	10c00060 	cmpeqi	r3,r2,1
81126658:	18005f1e 	bne	r3,zero,811267d8 <OSFlagAccept+0x268>
8112665c:	10c00088 	cmpgei	r3,r2,2
81126660:	1800021e 	bne	r3,zero,8112666c <OSFlagAccept+0xfc>
81126664:	10003f26 	beq	r2,zero,81126764 <OSFlagAccept+0x1f4>
81126668:	00007706 	br	81126848 <OSFlagAccept+0x2d8>
8112666c:	10c000a0 	cmpeqi	r3,r2,2
81126670:	1800031e 	bne	r3,zero,81126680 <OSFlagAccept+0x110>
81126674:	108000e0 	cmpeqi	r2,r2,3
81126678:	10001e1e 	bne	r2,zero,811266f4 <OSFlagAccept+0x184>
8112667c:	00007206 	br	81126848 <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81126680:	e0bffc17 	ldw	r2,-16(fp)
81126684:	10c0020b 	ldhu	r3,8(r2)
81126688:	e0bffd0b 	ldhu	r2,-12(fp)
8112668c:	1884703a 	and	r2,r3,r2
81126690:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81126694:	e0fff30b 	ldhu	r3,-52(fp)
81126698:	e0bffd0b 	ldhu	r2,-12(fp)
8112669c:	18800d1e 	bne	r3,r2,811266d4 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811266a0:	e0bff383 	ldbu	r2,-50(fp)
811266a4:	10800058 	cmpnei	r2,r2,1
811266a8:	10000d1e 	bne	r2,zero,811266e0 <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
811266ac:	e0bffc17 	ldw	r2,-16(fp)
811266b0:	1080020b 	ldhu	r2,8(r2)
811266b4:	1007883a 	mov	r3,r2
811266b8:	e0bff30b 	ldhu	r2,-52(fp)
811266bc:	0084303a 	nor	r2,zero,r2
811266c0:	1884703a 	and	r2,r3,r2
811266c4:	1007883a 	mov	r3,r2
811266c8:	e0bffc17 	ldw	r2,-16(fp)
811266cc:	10c0020d 	sth	r3,8(r2)
811266d0:	00000306 	br	811266e0 <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
811266d4:	e0bfff17 	ldw	r2,-4(fp)
811266d8:	00c01c04 	movi	r3,112
811266dc:	10c00005 	stb	r3,0(r2)
811266e0:	e0bff417 	ldw	r2,-48(fp)
811266e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811266e8:	e0bff617 	ldw	r2,-40(fp)
811266ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
811266f0:	00005e06 	br	8112686c <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
811266f4:	e0bffc17 	ldw	r2,-16(fp)
811266f8:	10c0020b 	ldhu	r3,8(r2)
811266fc:	e0bffd0b 	ldhu	r2,-12(fp)
81126700:	1884703a 	and	r2,r3,r2
81126704:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81126708:	e0bff30b 	ldhu	r2,-52(fp)
8112670c:	10000d26 	beq	r2,zero,81126744 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81126710:	e0bff383 	ldbu	r2,-50(fp)
81126714:	10800058 	cmpnei	r2,r2,1
81126718:	10000d1e 	bne	r2,zero,81126750 <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
8112671c:	e0bffc17 	ldw	r2,-16(fp)
81126720:	1080020b 	ldhu	r2,8(r2)
81126724:	1007883a 	mov	r3,r2
81126728:	e0bff30b 	ldhu	r2,-52(fp)
8112672c:	0084303a 	nor	r2,zero,r2
81126730:	1884703a 	and	r2,r3,r2
81126734:	1007883a 	mov	r3,r2
81126738:	e0bffc17 	ldw	r2,-16(fp)
8112673c:	10c0020d 	sth	r3,8(r2)
81126740:	00000306 	br	81126750 <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81126744:	e0bfff17 	ldw	r2,-4(fp)
81126748:	00c01c04 	movi	r3,112
8112674c:	10c00005 	stb	r3,0(r2)
81126750:	e0bff417 	ldw	r2,-48(fp)
81126754:	e0bff715 	stw	r2,-36(fp)
81126758:	e0bff717 	ldw	r2,-36(fp)
8112675c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81126760:	00004206 	br	8112686c <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81126764:	e0bffc17 	ldw	r2,-16(fp)
81126768:	1080020b 	ldhu	r2,8(r2)
8112676c:	0084303a 	nor	r2,zero,r2
81126770:	1007883a 	mov	r3,r2
81126774:	e0bffd0b 	ldhu	r2,-12(fp)
81126778:	1884703a 	and	r2,r3,r2
8112677c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81126780:	e0fff30b 	ldhu	r3,-52(fp)
81126784:	e0bffd0b 	ldhu	r2,-12(fp)
81126788:	18800b1e 	bne	r3,r2,811267b8 <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
8112678c:	e0bff383 	ldbu	r2,-50(fp)
81126790:	10800058 	cmpnei	r2,r2,1
81126794:	10000b1e 	bne	r2,zero,811267c4 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81126798:	e0bffc17 	ldw	r2,-16(fp)
8112679c:	10c0020b 	ldhu	r3,8(r2)
811267a0:	e0bff30b 	ldhu	r2,-52(fp)
811267a4:	1884b03a 	or	r2,r3,r2
811267a8:	1007883a 	mov	r3,r2
811267ac:	e0bffc17 	ldw	r2,-16(fp)
811267b0:	10c0020d 	sth	r3,8(r2)
811267b4:	00000306 	br	811267c4 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
811267b8:	e0bfff17 	ldw	r2,-4(fp)
811267bc:	00c01c04 	movi	r3,112
811267c0:	10c00005 	stb	r3,0(r2)
811267c4:	e0bff417 	ldw	r2,-48(fp)
811267c8:	e0bff815 	stw	r2,-32(fp)
811267cc:	e0bff817 	ldw	r2,-32(fp)
811267d0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
811267d4:	00002506 	br	8112686c <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
811267d8:	e0bffc17 	ldw	r2,-16(fp)
811267dc:	1080020b 	ldhu	r2,8(r2)
811267e0:	0084303a 	nor	r2,zero,r2
811267e4:	1007883a 	mov	r3,r2
811267e8:	e0bffd0b 	ldhu	r2,-12(fp)
811267ec:	1884703a 	and	r2,r3,r2
811267f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
811267f4:	e0bff30b 	ldhu	r2,-52(fp)
811267f8:	10000b26 	beq	r2,zero,81126828 <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811267fc:	e0bff383 	ldbu	r2,-50(fp)
81126800:	10800058 	cmpnei	r2,r2,1
81126804:	10000b1e 	bne	r2,zero,81126834 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81126808:	e0bffc17 	ldw	r2,-16(fp)
8112680c:	10c0020b 	ldhu	r3,8(r2)
81126810:	e0bff30b 	ldhu	r2,-52(fp)
81126814:	1884b03a 	or	r2,r3,r2
81126818:	1007883a 	mov	r3,r2
8112681c:	e0bffc17 	ldw	r2,-16(fp)
81126820:	10c0020d 	sth	r3,8(r2)
81126824:	00000306 	br	81126834 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81126828:	e0bfff17 	ldw	r2,-4(fp)
8112682c:	00c01c04 	movi	r3,112
81126830:	10c00005 	stb	r3,0(r2)
81126834:	e0bff417 	ldw	r2,-48(fp)
81126838:	e0bff915 	stw	r2,-28(fp)
8112683c:	e0bff917 	ldw	r2,-28(fp)
81126840:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81126844:	00000906 	br	8112686c <OSFlagAccept+0x2fc>
81126848:	e0bff417 	ldw	r2,-48(fp)
8112684c:	e0bffa15 	stw	r2,-24(fp)
81126850:	e0bffa17 	ldw	r2,-24(fp)
81126854:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81126858:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
8112685c:	e0bfff17 	ldw	r2,-4(fp)
81126860:	00c01bc4 	movi	r3,111
81126864:	10c00005 	stb	r3,0(r2)
             break;
81126868:	0001883a 	nop
    }
    return (flags_rdy);
8112686c:	e0bff30b 	ldhu	r2,-52(fp)
}
81126870:	e037883a 	mov	sp,fp
81126874:	df000017 	ldw	fp,0(sp)
81126878:	dec00104 	addi	sp,sp,4
8112687c:	f800283a 	ret

81126880 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
81126880:	defff804 	addi	sp,sp,-32
81126884:	de00012e 	bgeu	sp,et,8112688c <OSFlagCreate+0xc>
81126888:	003b68fa 	trap	3
8112688c:	df000715 	stw	fp,28(sp)
81126890:	df000704 	addi	fp,sp,28
81126894:	2005883a 	mov	r2,r4
81126898:	e17fff15 	stw	r5,-4(fp)
8112689c:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
811268a0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
811268a4:	e0bfff17 	ldw	r2,-4(fp)
811268a8:	1000021e 	bne	r2,zero,811268b4 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
811268ac:	0005883a 	mov	r2,zero
811268b0:	00003306 	br	81126980 <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
811268b4:	d0a08f03 	ldbu	r2,-32196(gp)
811268b8:	10803fcc 	andi	r2,r2,255
811268bc:	10000526 	beq	r2,zero,811268d4 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
811268c0:	e0bfff17 	ldw	r2,-4(fp)
811268c4:	00c00404 	movi	r3,16
811268c8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
811268cc:	0005883a 	mov	r2,zero
811268d0:	00002b06 	br	81126980 <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811268d4:	0005303a 	rdctl	r2,status
811268d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811268dc:	e0fffd17 	ldw	r3,-12(fp)
811268e0:	00bfff84 	movi	r2,-2
811268e4:	1884703a 	and	r2,r3,r2
811268e8:	1001703a 	wrctl	status,r2
  
  return context;
811268ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811268f0:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
811268f4:	d0a09417 	ldw	r2,-32176(gp)
811268f8:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
811268fc:	e0bffb17 	ldw	r2,-20(fp)
81126900:	10001726 	beq	r2,zero,81126960 <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
81126904:	d0a09417 	ldw	r2,-32176(gp)
81126908:	10800117 	ldw	r2,4(r2)
8112690c:	d0a09415 	stw	r2,-32176(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
81126910:	e0bffb17 	ldw	r2,-20(fp)
81126914:	00c00144 	movi	r3,5
81126918:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
8112691c:	e0bffb17 	ldw	r2,-20(fp)
81126920:	e0fffe0b 	ldhu	r3,-8(fp)
81126924:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
81126928:	e0bffb17 	ldw	r2,-20(fp)
8112692c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
81126930:	e0bffb17 	ldw	r2,-20(fp)
81126934:	00c00fc4 	movi	r3,63
81126938:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112693c:	e0bffb17 	ldw	r2,-20(fp)
81126940:	100002c5 	stb	zero,11(r2)
81126944:	e0bff917 	ldw	r2,-28(fp)
81126948:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112694c:	e0bffa17 	ldw	r2,-24(fp)
81126950:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
81126954:	e0bfff17 	ldw	r2,-4(fp)
81126958:	10000005 	stb	zero,0(r2)
8112695c:	00000706 	br	8112697c <OSFlagCreate+0xfc>
81126960:	e0bff917 	ldw	r2,-28(fp)
81126964:	e0bffc15 	stw	r2,-16(fp)
81126968:	e0bffc17 	ldw	r2,-16(fp)
8112696c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
81126970:	e0bfff17 	ldw	r2,-4(fp)
81126974:	00c01c84 	movi	r3,114
81126978:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
8112697c:	e0bffb17 	ldw	r2,-20(fp)
}
81126980:	e037883a 	mov	sp,fp
81126984:	df000017 	ldw	fp,0(sp)
81126988:	dec00104 	addi	sp,sp,4
8112698c:	f800283a 	ret

81126990 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
81126990:	defff204 	addi	sp,sp,-56
81126994:	de00012e 	bgeu	sp,et,8112699c <OSFlagDel+0xc>
81126998:	003b68fa 	trap	3
8112699c:	dfc00d15 	stw	ra,52(sp)
811269a0:	df000c15 	stw	fp,48(sp)
811269a4:	df000c04 	addi	fp,sp,48
811269a8:	e13ffd15 	stw	r4,-12(fp)
811269ac:	2805883a 	mov	r2,r5
811269b0:	e1bfff15 	stw	r6,-4(fp)
811269b4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
811269b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811269bc:	e0bfff17 	ldw	r2,-4(fp)
811269c0:	1000021e 	bne	r2,zero,811269cc <OSFlagDel+0x3c>
        return (pgrp);
811269c4:	e0bffd17 	ldw	r2,-12(fp)
811269c8:	00008006 	br	81126bcc <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
811269cc:	e0bffd17 	ldw	r2,-12(fp)
811269d0:	1000051e 	bne	r2,zero,811269e8 <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811269d4:	e0bfff17 	ldw	r2,-4(fp)
811269d8:	00c01b84 	movi	r3,110
811269dc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
811269e0:	e0bffd17 	ldw	r2,-12(fp)
811269e4:	00007906 	br	81126bcc <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811269e8:	d0a08f03 	ldbu	r2,-32196(gp)
811269ec:	10803fcc 	andi	r2,r2,255
811269f0:	10000526 	beq	r2,zero,81126a08 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
811269f4:	e0bfff17 	ldw	r2,-4(fp)
811269f8:	00c003c4 	movi	r3,15
811269fc:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81126a00:	e0bffd17 	ldw	r2,-12(fp)
81126a04:	00007106 	br	81126bcc <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
81126a08:	e0bffd17 	ldw	r2,-12(fp)
81126a0c:	10800003 	ldbu	r2,0(r2)
81126a10:	10803fcc 	andi	r2,r2,255
81126a14:	10800160 	cmpeqi	r2,r2,5
81126a18:	1000051e 	bne	r2,zero,81126a30 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
81126a1c:	e0bfff17 	ldw	r2,-4(fp)
81126a20:	00c00044 	movi	r3,1
81126a24:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81126a28:	e0bffd17 	ldw	r2,-12(fp)
81126a2c:	00006706 	br	81126bcc <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126a30:	0005303a 	rdctl	r2,status
81126a34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126a38:	e0fffc17 	ldw	r3,-16(fp)
81126a3c:	00bfff84 	movi	r2,-2
81126a40:	1884703a 	and	r2,r3,r2
81126a44:	1001703a 	wrctl	status,r2
  
  return context;
81126a48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81126a4c:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
81126a50:	e0bffd17 	ldw	r2,-12(fp)
81126a54:	10800117 	ldw	r2,4(r2)
81126a58:	10000326 	beq	r2,zero,81126a68 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81126a5c:	00800044 	movi	r2,1
81126a60:	e0bff405 	stb	r2,-48(fp)
81126a64:	00000106 	br	81126a6c <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81126a68:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
81126a6c:	e0bffe03 	ldbu	r2,-8(fp)
81126a70:	10000326 	beq	r2,zero,81126a80 <OSFlagDel+0xf0>
81126a74:	10800060 	cmpeqi	r2,r2,1
81126a78:	1000231e 	bne	r2,zero,81126b08 <OSFlagDel+0x178>
81126a7c:	00004806 	br	81126ba0 <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
81126a80:	e0bff403 	ldbu	r2,-48(fp)
81126a84:	1000161e 	bne	r2,zero,81126ae0 <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
81126a88:	e0bffd17 	ldw	r2,-12(fp)
81126a8c:	00c00fc4 	movi	r3,63
81126a90:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81126a94:	e0bffd17 	ldw	r2,-12(fp)
81126a98:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81126a9c:	e0bffd17 	ldw	r2,-12(fp)
81126aa0:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
81126aa4:	d0e09417 	ldw	r3,-32176(gp)
81126aa8:	e0bffd17 	ldw	r2,-12(fp)
81126aac:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
81126ab0:	e0bffd17 	ldw	r2,-12(fp)
81126ab4:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
81126ab8:	e0bffd17 	ldw	r2,-12(fp)
81126abc:	d0a09415 	stw	r2,-32176(gp)
81126ac0:	e0bff717 	ldw	r2,-36(fp)
81126ac4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126ac8:	e0bff817 	ldw	r2,-32(fp)
81126acc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
81126ad0:	e0bfff17 	ldw	r2,-4(fp)
81126ad4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
81126ad8:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
81126adc:	00003a06 	br	81126bc8 <OSFlagDel+0x238>
81126ae0:	e0bff717 	ldw	r2,-36(fp)
81126ae4:	e0bff915 	stw	r2,-28(fp)
81126ae8:	e0bff917 	ldw	r2,-28(fp)
81126aec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
81126af0:	e0bfff17 	ldw	r2,-4(fp)
81126af4:	00c01244 	movi	r3,73
81126af8:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
81126afc:	e0bffd17 	ldw	r2,-12(fp)
81126b00:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81126b04:	00003006 	br	81126bc8 <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81126b08:	e0bffd17 	ldw	r2,-12(fp)
81126b0c:	10800117 	ldw	r2,4(r2)
81126b10:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
81126b14:	00000606 	br	81126b30 <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
81126b18:	000b883a 	mov	r5,zero
81126b1c:	e13ff517 	ldw	r4,-44(fp)
81126b20:	1127b440 	call	81127b44 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
81126b24:	e0bff517 	ldw	r2,-44(fp)
81126b28:	10800017 	ldw	r2,0(r2)
81126b2c:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
81126b30:	e0bff517 	ldw	r2,-44(fp)
81126b34:	103ff81e 	bne	r2,zero,81126b18 <__reset+0xfb106b18>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
81126b38:	e0bffd17 	ldw	r2,-12(fp)
81126b3c:	00c00fc4 	movi	r3,63
81126b40:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81126b44:	e0bffd17 	ldw	r2,-12(fp)
81126b48:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81126b4c:	e0bffd17 	ldw	r2,-12(fp)
81126b50:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
81126b54:	d0e09417 	ldw	r3,-32176(gp)
81126b58:	e0bffd17 	ldw	r2,-12(fp)
81126b5c:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
81126b60:	e0bffd17 	ldw	r2,-12(fp)
81126b64:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
81126b68:	e0bffd17 	ldw	r2,-12(fp)
81126b6c:	d0a09415 	stw	r2,-32176(gp)
81126b70:	e0bff717 	ldw	r2,-36(fp)
81126b74:	e0bffa15 	stw	r2,-24(fp)
81126b78:	e0bffa17 	ldw	r2,-24(fp)
81126b7c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81126b80:	e0bff403 	ldbu	r2,-48(fp)
81126b84:	10800058 	cmpnei	r2,r2,1
81126b88:	1000011e 	bne	r2,zero,81126b90 <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81126b8c:	1125c540 	call	81125c54 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
81126b90:	e0bfff17 	ldw	r2,-4(fp)
81126b94:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
81126b98:	e03ff615 	stw	zero,-40(fp)
             break;
81126b9c:	00000a06 	br	81126bc8 <OSFlagDel+0x238>
81126ba0:	e0bff717 	ldw	r2,-36(fp)
81126ba4:	e0bffb15 	stw	r2,-20(fp)
81126ba8:	e0bffb17 	ldw	r2,-20(fp)
81126bac:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
81126bb0:	e0bfff17 	ldw	r2,-4(fp)
81126bb4:	00c001c4 	movi	r3,7
81126bb8:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
81126bbc:	e0bffd17 	ldw	r2,-12(fp)
81126bc0:	e0bff615 	stw	r2,-40(fp)
             break;
81126bc4:	0001883a 	nop
    }
    return (pgrp_return);
81126bc8:	e0bff617 	ldw	r2,-40(fp)
}
81126bcc:	e037883a 	mov	sp,fp
81126bd0:	dfc00117 	ldw	ra,4(sp)
81126bd4:	df000017 	ldw	fp,0(sp)
81126bd8:	dec00204 	addi	sp,sp,8
81126bdc:	f800283a 	ret

81126be0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
81126be0:	defff604 	addi	sp,sp,-40
81126be4:	de00012e 	bgeu	sp,et,81126bec <OSFlagNameGet+0xc>
81126be8:	003b68fa 	trap	3
81126bec:	dfc00915 	stw	ra,36(sp)
81126bf0:	df000815 	stw	fp,32(sp)
81126bf4:	df000804 	addi	fp,sp,32
81126bf8:	e13ffd15 	stw	r4,-12(fp)
81126bfc:	e17ffe15 	stw	r5,-8(fp)
81126c00:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126c04:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81126c08:	e0bfff17 	ldw	r2,-4(fp)
81126c0c:	1000021e 	bne	r2,zero,81126c18 <OSFlagNameGet+0x38>
        return (0);
81126c10:	0005883a 	mov	r2,zero
81126c14:	00003906 	br	81126cfc <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81126c18:	e0bffd17 	ldw	r2,-12(fp)
81126c1c:	1000051e 	bne	r2,zero,81126c34 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81126c20:	e0bfff17 	ldw	r2,-4(fp)
81126c24:	00c01b84 	movi	r3,110
81126c28:	10c00005 	stb	r3,0(r2)
        return (0);
81126c2c:	0005883a 	mov	r2,zero
81126c30:	00003206 	br	81126cfc <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81126c34:	e0bffe17 	ldw	r2,-8(fp)
81126c38:	1000051e 	bne	r2,zero,81126c50 <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81126c3c:	e0bfff17 	ldw	r2,-4(fp)
81126c40:	00c00304 	movi	r3,12
81126c44:	10c00005 	stb	r3,0(r2)
        return (0);
81126c48:	0005883a 	mov	r2,zero
81126c4c:	00002b06 	br	81126cfc <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81126c50:	d0a08f03 	ldbu	r2,-32196(gp)
81126c54:	10803fcc 	andi	r2,r2,255
81126c58:	10000526 	beq	r2,zero,81126c70 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
81126c5c:	e0bfff17 	ldw	r2,-4(fp)
81126c60:	00c00444 	movi	r3,17
81126c64:	10c00005 	stb	r3,0(r2)
        return (0);
81126c68:	0005883a 	mov	r2,zero
81126c6c:	00002306 	br	81126cfc <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126c70:	0005303a 	rdctl	r2,status
81126c74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126c78:	e0fffc17 	ldw	r3,-16(fp)
81126c7c:	00bfff84 	movi	r2,-2
81126c80:	1884703a 	and	r2,r3,r2
81126c84:	1001703a 	wrctl	status,r2
  
  return context;
81126c88:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81126c8c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81126c90:	e0bffd17 	ldw	r2,-12(fp)
81126c94:	10800003 	ldbu	r2,0(r2)
81126c98:	10803fcc 	andi	r2,r2,255
81126c9c:	10800160 	cmpeqi	r2,r2,5
81126ca0:	1000091e 	bne	r2,zero,81126cc8 <OSFlagNameGet+0xe8>
81126ca4:	e0bff817 	ldw	r2,-32(fp)
81126ca8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126cac:	e0bff917 	ldw	r2,-28(fp)
81126cb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
81126cb4:	e0bfff17 	ldw	r2,-4(fp)
81126cb8:	00c00044 	movi	r3,1
81126cbc:	10c00005 	stb	r3,0(r2)
        return (0);
81126cc0:	0005883a 	mov	r2,zero
81126cc4:	00000d06 	br	81126cfc <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
81126cc8:	e0bffd17 	ldw	r2,-12(fp)
81126ccc:	10800284 	addi	r2,r2,10
81126cd0:	100b883a 	mov	r5,r2
81126cd4:	e13ffe17 	ldw	r4,-8(fp)
81126cd8:	1125da80 	call	81125da8 <OS_StrCopy>
81126cdc:	e0bffb05 	stb	r2,-20(fp)
81126ce0:	e0bff817 	ldw	r2,-32(fp)
81126ce4:	e0bffa15 	stw	r2,-24(fp)
81126ce8:	e0bffa17 	ldw	r2,-24(fp)
81126cec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81126cf0:	e0bfff17 	ldw	r2,-4(fp)
81126cf4:	10000005 	stb	zero,0(r2)
    return (len);
81126cf8:	e0bffb03 	ldbu	r2,-20(fp)
}
81126cfc:	e037883a 	mov	sp,fp
81126d00:	dfc00117 	ldw	ra,4(sp)
81126d04:	df000017 	ldw	fp,0(sp)
81126d08:	dec00204 	addi	sp,sp,8
81126d0c:	f800283a 	ret

81126d10 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
81126d10:	defff504 	addi	sp,sp,-44
81126d14:	de00012e 	bgeu	sp,et,81126d1c <OSFlagNameSet+0xc>
81126d18:	003b68fa 	trap	3
81126d1c:	dfc00a15 	stw	ra,40(sp)
81126d20:	df000915 	stw	fp,36(sp)
81126d24:	df000904 	addi	fp,sp,36
81126d28:	e13ffd15 	stw	r4,-12(fp)
81126d2c:	e17ffe15 	stw	r5,-8(fp)
81126d30:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126d34:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81126d38:	e0bfff17 	ldw	r2,-4(fp)
81126d3c:	10004326 	beq	r2,zero,81126e4c <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81126d40:	e0bffd17 	ldw	r2,-12(fp)
81126d44:	1000041e 	bne	r2,zero,81126d58 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81126d48:	e0bfff17 	ldw	r2,-4(fp)
81126d4c:	00c01b84 	movi	r3,110
81126d50:	10c00005 	stb	r3,0(r2)
        return;
81126d54:	00003e06 	br	81126e50 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81126d58:	e0bffe17 	ldw	r2,-8(fp)
81126d5c:	1000041e 	bne	r2,zero,81126d70 <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81126d60:	e0bfff17 	ldw	r2,-4(fp)
81126d64:	00c00304 	movi	r3,12
81126d68:	10c00005 	stb	r3,0(r2)
        return;
81126d6c:	00003806 	br	81126e50 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81126d70:	d0a08f03 	ldbu	r2,-32196(gp)
81126d74:	10803fcc 	andi	r2,r2,255
81126d78:	10000426 	beq	r2,zero,81126d8c <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81126d7c:	e0bfff17 	ldw	r2,-4(fp)
81126d80:	00c00484 	movi	r3,18
81126d84:	10c00005 	stb	r3,0(r2)
        return;
81126d88:	00003106 	br	81126e50 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126d8c:	0005303a 	rdctl	r2,status
81126d90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126d94:	e0fffc17 	ldw	r3,-16(fp)
81126d98:	00bfff84 	movi	r2,-2
81126d9c:	1884703a 	and	r2,r3,r2
81126da0:	1001703a 	wrctl	status,r2
  
  return context;
81126da4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81126da8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81126dac:	e0bffd17 	ldw	r2,-12(fp)
81126db0:	10800003 	ldbu	r2,0(r2)
81126db4:	10803fcc 	andi	r2,r2,255
81126db8:	10800160 	cmpeqi	r2,r2,5
81126dbc:	1000081e 	bne	r2,zero,81126de0 <OSFlagNameSet+0xd0>
81126dc0:	e0bff717 	ldw	r2,-36(fp)
81126dc4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126dc8:	e0bff817 	ldw	r2,-32(fp)
81126dcc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
81126dd0:	e0bfff17 	ldw	r2,-4(fp)
81126dd4:	00c00044 	movi	r3,1
81126dd8:	10c00005 	stb	r3,0(r2)
        return;
81126ddc:	00001c06 	br	81126e50 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
81126de0:	e13ffe17 	ldw	r4,-8(fp)
81126de4:	1125e240 	call	81125e24 <OS_StrLen>
81126de8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
81126dec:	e0bffa03 	ldbu	r2,-24(fp)
81126df0:	10800830 	cmpltui	r2,r2,32
81126df4:	1000081e 	bne	r2,zero,81126e18 <OSFlagNameSet+0x108>
81126df8:	e0bff717 	ldw	r2,-36(fp)
81126dfc:	e0bff915 	stw	r2,-28(fp)
81126e00:	e0bff917 	ldw	r2,-28(fp)
81126e04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
81126e08:	e0bfff17 	ldw	r2,-4(fp)
81126e0c:	00c01cc4 	movi	r3,115
81126e10:	10c00005 	stb	r3,0(r2)
        return;
81126e14:	00000e06 	br	81126e50 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
81126e18:	e0bffd17 	ldw	r2,-12(fp)
81126e1c:	10800284 	addi	r2,r2,10
81126e20:	e17ffe17 	ldw	r5,-8(fp)
81126e24:	1009883a 	mov	r4,r2
81126e28:	1125da80 	call	81125da8 <OS_StrCopy>
81126e2c:	e0bff717 	ldw	r2,-36(fp)
81126e30:	e0bffb15 	stw	r2,-20(fp)
81126e34:	e0bffb17 	ldw	r2,-20(fp)
81126e38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81126e3c:	e0bfff17 	ldw	r2,-4(fp)
81126e40:	10000005 	stb	zero,0(r2)
    return;
81126e44:	0001883a 	nop
81126e48:	00000106 	br	81126e50 <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81126e4c:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
81126e50:	e037883a 	mov	sp,fp
81126e54:	dfc00117 	ldw	ra,4(sp)
81126e58:	df000017 	ldw	fp,0(sp)
81126e5c:	dec00204 	addi	sp,sp,8
81126e60:	f800283a 	ret

81126e64 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
81126e64:	deffe104 	addi	sp,sp,-124
81126e68:	de00012e 	bgeu	sp,et,81126e70 <OSFlagPend+0xc>
81126e6c:	003b68fa 	trap	3
81126e70:	dfc01e15 	stw	ra,120(sp)
81126e74:	df001d15 	stw	fp,116(sp)
81126e78:	df001d04 	addi	fp,sp,116
81126e7c:	e13ffc15 	stw	r4,-16(fp)
81126e80:	2809883a 	mov	r4,r5
81126e84:	3007883a 	mov	r3,r6
81126e88:	3805883a 	mov	r2,r7
81126e8c:	e13ffd0d 	sth	r4,-12(fp)
81126e90:	e0fffe05 	stb	r3,-8(fp)
81126e94:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81126e98:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81126e9c:	e0800217 	ldw	r2,8(fp)
81126ea0:	1000021e 	bne	r2,zero,81126eac <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
81126ea4:	0005883a 	mov	r2,zero
81126ea8:	00015906 	br	81127410 <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81126eac:	e0bffc17 	ldw	r2,-16(fp)
81126eb0:	1000051e 	bne	r2,zero,81126ec8 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81126eb4:	e0800217 	ldw	r2,8(fp)
81126eb8:	00c01b84 	movi	r3,110
81126ebc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81126ec0:	0005883a 	mov	r2,zero
81126ec4:	00015206 	br	81127410 <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81126ec8:	d0a08f03 	ldbu	r2,-32196(gp)
81126ecc:	10803fcc 	andi	r2,r2,255
81126ed0:	10000526 	beq	r2,zero,81126ee8 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
81126ed4:	e0800217 	ldw	r2,8(fp)
81126ed8:	00c00084 	movi	r3,2
81126edc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81126ee0:	0005883a 	mov	r2,zero
81126ee4:	00014a06 	br	81127410 <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
81126ee8:	d0a07d03 	ldbu	r2,-32268(gp)
81126eec:	10803fcc 	andi	r2,r2,255
81126ef0:	10000526 	beq	r2,zero,81126f08 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
81126ef4:	e0800217 	ldw	r2,8(fp)
81126ef8:	00c00344 	movi	r3,13
81126efc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81126f00:	0005883a 	mov	r2,zero
81126f04:	00014206 	br	81127410 <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
81126f08:	e0bffc17 	ldw	r2,-16(fp)
81126f0c:	10800003 	ldbu	r2,0(r2)
81126f10:	10803fcc 	andi	r2,r2,255
81126f14:	10800160 	cmpeqi	r2,r2,5
81126f18:	1000051e 	bne	r2,zero,81126f30 <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
81126f1c:	e0800217 	ldw	r2,8(fp)
81126f20:	00c00044 	movi	r3,1
81126f24:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81126f28:	0005883a 	mov	r2,zero
81126f2c:	00013806 	br	81127410 <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
81126f30:	e0fffe03 	ldbu	r3,-8(fp)
81126f34:	00bfe004 	movi	r2,-128
81126f38:	1884703a 	and	r2,r3,r2
81126f3c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
81126f40:	e0bfe603 	ldbu	r2,-104(fp)
81126f44:	10000626 	beq	r2,zero,81126f60 <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
81126f48:	e0bffe03 	ldbu	r2,-8(fp)
81126f4c:	10801fcc 	andi	r2,r2,127
81126f50:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81126f54:	00800044 	movi	r2,1
81126f58:	e0bfe405 	stb	r2,-112(fp)
81126f5c:	00000106 	br	81126f64 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
81126f60:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126f64:	0005303a 	rdctl	r2,status
81126f68:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126f6c:	e0fff617 	ldw	r3,-40(fp)
81126f70:	00bfff84 	movi	r2,-2
81126f74:	1884703a 	and	r2,r3,r2
81126f78:	1001703a 	wrctl	status,r2
  
  return context;
81126f7c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81126f80:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
81126f84:	e0bffe03 	ldbu	r2,-8(fp)
81126f88:	10c00060 	cmpeqi	r3,r2,1
81126f8c:	1800921e 	bne	r3,zero,811271d8 <OSFlagPend+0x374>
81126f90:	10c00088 	cmpgei	r3,r2,2
81126f94:	1800021e 	bne	r3,zero,81126fa0 <OSFlagPend+0x13c>
81126f98:	10006126 	beq	r2,zero,81127120 <OSFlagPend+0x2bc>
81126f9c:	0000bb06 	br	8112728c <OSFlagPend+0x428>
81126fa0:	10c000a0 	cmpeqi	r3,r2,2
81126fa4:	1800031e 	bne	r3,zero,81126fb4 <OSFlagPend+0x150>
81126fa8:	108000e0 	cmpeqi	r2,r2,3
81126fac:	10002f1e 	bne	r2,zero,8112706c <OSFlagPend+0x208>
81126fb0:	0000b606 	br	8112728c <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
81126fb4:	e0bffc17 	ldw	r2,-16(fp)
81126fb8:	10c0020b 	ldhu	r3,8(r2)
81126fbc:	e0bffd0b 	ldhu	r2,-12(fp)
81126fc0:	1884703a 	and	r2,r3,r2
81126fc4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81126fc8:	e0ffe80b 	ldhu	r3,-96(fp)
81126fcc:	e0bffd0b 	ldhu	r2,-12(fp)
81126fd0:	1880171e 	bne	r3,r2,81127030 <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81126fd4:	e0bfe403 	ldbu	r2,-112(fp)
81126fd8:	10800058 	cmpnei	r2,r2,1
81126fdc:	1000091e 	bne	r2,zero,81127004 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
81126fe0:	e0bffc17 	ldw	r2,-16(fp)
81126fe4:	1080020b 	ldhu	r2,8(r2)
81126fe8:	1007883a 	mov	r3,r2
81126fec:	e0bfe80b 	ldhu	r2,-96(fp)
81126ff0:	0084303a 	nor	r2,zero,r2
81126ff4:	1884703a 	and	r2,r3,r2
81126ff8:	1007883a 	mov	r3,r2
81126ffc:	e0bffc17 	ldw	r2,-16(fp)
81127000:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81127004:	d0a09017 	ldw	r2,-32192(gp)
81127008:	e0ffe80b 	ldhu	r3,-96(fp)
8112700c:	10c00b0d 	sth	r3,44(r2)
81127010:	e0bfe517 	ldw	r2,-108(fp)
81127014:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127018:	e0bfe717 	ldw	r2,-100(fp)
8112701c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81127020:	e0800217 	ldw	r2,8(fp)
81127024:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81127028:	e0bfe80b 	ldhu	r2,-96(fp)
8112702c:	0000f806 	br	81127410 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81127030:	e13ffd0b 	ldhu	r4,-12(fp)
81127034:	e17ffe03 	ldbu	r5,-8(fp)
81127038:	e0bfff0b 	ldhu	r2,-4(fp)
8112703c:	e0fff704 	addi	r3,fp,-36
81127040:	d8800015 	stw	r2,0(sp)
81127044:	280f883a 	mov	r7,r5
81127048:	200d883a 	mov	r6,r4
8112704c:	180b883a 	mov	r5,r3
81127050:	e13ffc17 	ldw	r4,-16(fp)
81127054:	11278f40 	call	811278f4 <OS_FlagBlock>
81127058:	e0bfe517 	ldw	r2,-108(fp)
8112705c:	e0bfe915 	stw	r2,-92(fp)
81127060:	e0bfe917 	ldw	r2,-92(fp)
81127064:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81127068:	00009206 	br	811272b4 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112706c:	e0bffc17 	ldw	r2,-16(fp)
81127070:	10c0020b 	ldhu	r3,8(r2)
81127074:	e0bffd0b 	ldhu	r2,-12(fp)
81127078:	1884703a 	and	r2,r3,r2
8112707c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81127080:	e0bfe80b 	ldhu	r2,-96(fp)
81127084:	10001726 	beq	r2,zero,811270e4 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81127088:	e0bfe403 	ldbu	r2,-112(fp)
8112708c:	10800058 	cmpnei	r2,r2,1
81127090:	1000091e 	bne	r2,zero,811270b8 <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81127094:	e0bffc17 	ldw	r2,-16(fp)
81127098:	1080020b 	ldhu	r2,8(r2)
8112709c:	1007883a 	mov	r3,r2
811270a0:	e0bfe80b 	ldhu	r2,-96(fp)
811270a4:	0084303a 	nor	r2,zero,r2
811270a8:	1884703a 	and	r2,r3,r2
811270ac:	1007883a 	mov	r3,r2
811270b0:	e0bffc17 	ldw	r2,-16(fp)
811270b4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
811270b8:	d0a09017 	ldw	r2,-32192(gp)
811270bc:	e0ffe80b 	ldhu	r3,-96(fp)
811270c0:	10c00b0d 	sth	r3,44(r2)
811270c4:	e0bfe517 	ldw	r2,-108(fp)
811270c8:	e0bfea15 	stw	r2,-88(fp)
811270cc:	e0bfea17 	ldw	r2,-88(fp)
811270d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
811270d4:	e0800217 	ldw	r2,8(fp)
811270d8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
811270dc:	e0bfe80b 	ldhu	r2,-96(fp)
811270e0:	0000cb06 	br	81127410 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
811270e4:	e13ffd0b 	ldhu	r4,-12(fp)
811270e8:	e17ffe03 	ldbu	r5,-8(fp)
811270ec:	e0bfff0b 	ldhu	r2,-4(fp)
811270f0:	e0fff704 	addi	r3,fp,-36
811270f4:	d8800015 	stw	r2,0(sp)
811270f8:	280f883a 	mov	r7,r5
811270fc:	200d883a 	mov	r6,r4
81127100:	180b883a 	mov	r5,r3
81127104:	e13ffc17 	ldw	r4,-16(fp)
81127108:	11278f40 	call	811278f4 <OS_FlagBlock>
8112710c:	e0bfe517 	ldw	r2,-108(fp)
81127110:	e0bfeb15 	stw	r2,-84(fp)
81127114:	e0bfeb17 	ldw	r2,-84(fp)
81127118:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112711c:	00006506 	br	811272b4 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81127120:	e0bffc17 	ldw	r2,-16(fp)
81127124:	1080020b 	ldhu	r2,8(r2)
81127128:	0084303a 	nor	r2,zero,r2
8112712c:	1007883a 	mov	r3,r2
81127130:	e0bffd0b 	ldhu	r2,-12(fp)
81127134:	1884703a 	and	r2,r3,r2
81127138:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112713c:	e0ffe80b 	ldhu	r3,-96(fp)
81127140:	e0bffd0b 	ldhu	r2,-12(fp)
81127144:	1880151e 	bne	r3,r2,8112719c <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81127148:	e0bfe403 	ldbu	r2,-112(fp)
8112714c:	10800058 	cmpnei	r2,r2,1
81127150:	1000071e 	bne	r2,zero,81127170 <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81127154:	e0bffc17 	ldw	r2,-16(fp)
81127158:	10c0020b 	ldhu	r3,8(r2)
8112715c:	e0bfe80b 	ldhu	r2,-96(fp)
81127160:	1884b03a 	or	r2,r3,r2
81127164:	1007883a 	mov	r3,r2
81127168:	e0bffc17 	ldw	r2,-16(fp)
8112716c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81127170:	d0a09017 	ldw	r2,-32192(gp)
81127174:	e0ffe80b 	ldhu	r3,-96(fp)
81127178:	10c00b0d 	sth	r3,44(r2)
8112717c:	e0bfe517 	ldw	r2,-108(fp)
81127180:	e0bfec15 	stw	r2,-80(fp)
81127184:	e0bfec17 	ldw	r2,-80(fp)
81127188:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112718c:	e0800217 	ldw	r2,8(fp)
81127190:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81127194:	e0bfe80b 	ldhu	r2,-96(fp)
81127198:	00009d06 	br	81127410 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112719c:	e13ffd0b 	ldhu	r4,-12(fp)
811271a0:	e17ffe03 	ldbu	r5,-8(fp)
811271a4:	e0bfff0b 	ldhu	r2,-4(fp)
811271a8:	e0fff704 	addi	r3,fp,-36
811271ac:	d8800015 	stw	r2,0(sp)
811271b0:	280f883a 	mov	r7,r5
811271b4:	200d883a 	mov	r6,r4
811271b8:	180b883a 	mov	r5,r3
811271bc:	e13ffc17 	ldw	r4,-16(fp)
811271c0:	11278f40 	call	811278f4 <OS_FlagBlock>
811271c4:	e0bfe517 	ldw	r2,-108(fp)
811271c8:	e0bfed15 	stw	r2,-76(fp)
811271cc:	e0bfed17 	ldw	r2,-76(fp)
811271d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
811271d4:	00003706 	br	811272b4 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
811271d8:	e0bffc17 	ldw	r2,-16(fp)
811271dc:	1080020b 	ldhu	r2,8(r2)
811271e0:	0084303a 	nor	r2,zero,r2
811271e4:	1007883a 	mov	r3,r2
811271e8:	e0bffd0b 	ldhu	r2,-12(fp)
811271ec:	1884703a 	and	r2,r3,r2
811271f0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
811271f4:	e0bfe80b 	ldhu	r2,-96(fp)
811271f8:	10001526 	beq	r2,zero,81127250 <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811271fc:	e0bfe403 	ldbu	r2,-112(fp)
81127200:	10800058 	cmpnei	r2,r2,1
81127204:	1000071e 	bne	r2,zero,81127224 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81127208:	e0bffc17 	ldw	r2,-16(fp)
8112720c:	10c0020b 	ldhu	r3,8(r2)
81127210:	e0bfe80b 	ldhu	r2,-96(fp)
81127214:	1884b03a 	or	r2,r3,r2
81127218:	1007883a 	mov	r3,r2
8112721c:	e0bffc17 	ldw	r2,-16(fp)
81127220:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81127224:	d0a09017 	ldw	r2,-32192(gp)
81127228:	e0ffe80b 	ldhu	r3,-96(fp)
8112722c:	10c00b0d 	sth	r3,44(r2)
81127230:	e0bfe517 	ldw	r2,-108(fp)
81127234:	e0bfee15 	stw	r2,-72(fp)
81127238:	e0bfee17 	ldw	r2,-72(fp)
8112723c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81127240:	e0800217 	ldw	r2,8(fp)
81127244:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81127248:	e0bfe80b 	ldhu	r2,-96(fp)
8112724c:	00007006 	br	81127410 <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81127250:	e13ffd0b 	ldhu	r4,-12(fp)
81127254:	e17ffe03 	ldbu	r5,-8(fp)
81127258:	e0bfff0b 	ldhu	r2,-4(fp)
8112725c:	e0fff704 	addi	r3,fp,-36
81127260:	d8800015 	stw	r2,0(sp)
81127264:	280f883a 	mov	r7,r5
81127268:	200d883a 	mov	r6,r4
8112726c:	180b883a 	mov	r5,r3
81127270:	e13ffc17 	ldw	r4,-16(fp)
81127274:	11278f40 	call	811278f4 <OS_FlagBlock>
81127278:	e0bfe517 	ldw	r2,-108(fp)
8112727c:	e0bfef15 	stw	r2,-68(fp)
81127280:	e0bfef17 	ldw	r2,-68(fp)
81127284:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81127288:	00000a06 	br	811272b4 <OSFlagPend+0x450>
8112728c:	e0bfe517 	ldw	r2,-108(fp)
81127290:	e0bff015 	stw	r2,-64(fp)
81127294:	e0bff017 	ldw	r2,-64(fp)
81127298:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112729c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
811272a0:	e0800217 	ldw	r2,8(fp)
811272a4:	00c01bc4 	movi	r3,111
811272a8:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
811272ac:	e0bfe80b 	ldhu	r2,-96(fp)
811272b0:	00005706 	br	81127410 <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
811272b4:	1125c540 	call	81125c54 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811272b8:	0005303a 	rdctl	r2,status
811272bc:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811272c0:	e0fff117 	ldw	r3,-60(fp)
811272c4:	00bfff84 	movi	r2,-2
811272c8:	1884703a 	and	r2,r3,r2
811272cc:	1001703a 	wrctl	status,r2
  
  return context;
811272d0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
811272d4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
811272d8:	d0a09017 	ldw	r2,-32192(gp)
811272dc:	10800c43 	ldbu	r2,49(r2)
811272e0:	10803fcc 	andi	r2,r2,255
811272e4:	10001c26 	beq	r2,zero,81127358 <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
811272e8:	d0a09017 	ldw	r2,-32192(gp)
811272ec:	10800c43 	ldbu	r2,49(r2)
811272f0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811272f4:	d0a09017 	ldw	r2,-32192(gp)
811272f8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
811272fc:	e0bff704 	addi	r2,fp,-36
81127300:	1009883a 	mov	r4,r2
81127304:	1127c400 	call	81127c40 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
81127308:	d0a09017 	ldw	r2,-32192(gp)
8112730c:	10000c05 	stb	zero,48(r2)
81127310:	e0bfe517 	ldw	r2,-108(fp)
81127314:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127318:	e0bff217 	ldw	r2,-56(fp)
8112731c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
81127320:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
81127324:	e0bff303 	ldbu	r2,-52(fp)
81127328:	108000a0 	cmpeqi	r2,r2,2
8112732c:	10000426 	beq	r2,zero,81127340 <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
81127330:	e0800217 	ldw	r2,8(fp)
81127334:	00c00384 	movi	r3,14
81127338:	10c00005 	stb	r3,0(r2)
                 break;
8112733c:	00000406 	br	81127350 <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
81127340:	e0800217 	ldw	r2,8(fp)
81127344:	00c00284 	movi	r3,10
81127348:	10c00005 	stb	r3,0(r2)
                 break;
8112734c:	0001883a 	nop
        }
        return (flags_rdy);
81127350:	e0bfe80b 	ldhu	r2,-96(fp)
81127354:	00002e06 	br	81127410 <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
81127358:	d0a09017 	ldw	r2,-32192(gp)
8112735c:	10800b0b 	ldhu	r2,44(r2)
81127360:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
81127364:	e0bfe403 	ldbu	r2,-112(fp)
81127368:	10800058 	cmpnei	r2,r2,1
8112736c:	1000211e 	bne	r2,zero,811273f4 <OSFlagPend+0x590>
        switch (wait_type) {
81127370:	e0bffe03 	ldbu	r2,-8(fp)
81127374:	10001616 	blt	r2,zero,811273d0 <OSFlagPend+0x56c>
81127378:	10c00090 	cmplti	r3,r2,2
8112737c:	18000c1e 	bne	r3,zero,811273b0 <OSFlagPend+0x54c>
81127380:	10800108 	cmpgei	r2,r2,4
81127384:	1000121e 	bne	r2,zero,811273d0 <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
81127388:	e0bffc17 	ldw	r2,-16(fp)
8112738c:	1080020b 	ldhu	r2,8(r2)
81127390:	1007883a 	mov	r3,r2
81127394:	e0bfe80b 	ldhu	r2,-96(fp)
81127398:	0084303a 	nor	r2,zero,r2
8112739c:	1884703a 	and	r2,r3,r2
811273a0:	1007883a 	mov	r3,r2
811273a4:	e0bffc17 	ldw	r2,-16(fp)
811273a8:	10c0020d 	sth	r3,8(r2)
                 break;
811273ac:	00001106 	br	811273f4 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
811273b0:	e0bffc17 	ldw	r2,-16(fp)
811273b4:	10c0020b 	ldhu	r3,8(r2)
811273b8:	e0bfe80b 	ldhu	r2,-96(fp)
811273bc:	1884b03a 	or	r2,r3,r2
811273c0:	1007883a 	mov	r3,r2
811273c4:	e0bffc17 	ldw	r2,-16(fp)
811273c8:	10c0020d 	sth	r3,8(r2)
                 break;
811273cc:	00000906 	br	811273f4 <OSFlagPend+0x590>
811273d0:	e0bfe517 	ldw	r2,-108(fp)
811273d4:	e0bff415 	stw	r2,-48(fp)
811273d8:	e0bff417 	ldw	r2,-48(fp)
811273dc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
811273e0:	e0800217 	ldw	r2,8(fp)
811273e4:	00c01bc4 	movi	r3,111
811273e8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
811273ec:	0005883a 	mov	r2,zero
811273f0:	00000706 	br	81127410 <OSFlagPend+0x5ac>
811273f4:	e0bfe517 	ldw	r2,-108(fp)
811273f8:	e0bff515 	stw	r2,-44(fp)
811273fc:	e0bff517 	ldw	r2,-44(fp)
81127400:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
81127404:	e0800217 	ldw	r2,8(fp)
81127408:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
8112740c:	e0bfe80b 	ldhu	r2,-96(fp)
}
81127410:	e037883a 	mov	sp,fp
81127414:	dfc00117 	ldw	ra,4(sp)
81127418:	df000017 	ldw	fp,0(sp)
8112741c:	dec00204 	addi	sp,sp,8
81127420:	f800283a 	ret

81127424 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
81127424:	defffb04 	addi	sp,sp,-20
81127428:	de00012e 	bgeu	sp,et,81127430 <OSFlagPendGetFlagsRdy+0xc>
8112742c:	003b68fa 	trap	3
81127430:	df000415 	stw	fp,16(sp)
81127434:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81127438:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112743c:	0005303a 	rdctl	r2,status
81127440:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127444:	e0fffe17 	ldw	r3,-8(fp)
81127448:	00bfff84 	movi	r2,-2
8112744c:	1884703a 	and	r2,r3,r2
81127450:	1001703a 	wrctl	status,r2
  
  return context;
81127454:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81127458:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
8112745c:	d0a09017 	ldw	r2,-32192(gp)
81127460:	10800b0b 	ldhu	r2,44(r2)
81127464:	e0bffd0d 	sth	r2,-12(fp)
81127468:	e0bffc17 	ldw	r2,-16(fp)
8112746c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127470:	e0bfff17 	ldw	r2,-4(fp)
81127474:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
81127478:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112747c:	e037883a 	mov	sp,fp
81127480:	df000017 	ldw	fp,0(sp)
81127484:	dec00104 	addi	sp,sp,4
81127488:	f800283a 	ret

8112748c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
8112748c:	deffef04 	addi	sp,sp,-68
81127490:	de00012e 	bgeu	sp,et,81127498 <OSFlagPost+0xc>
81127494:	003b68fa 	trap	3
81127498:	dfc01015 	stw	ra,64(sp)
8112749c:	df000f15 	stw	fp,60(sp)
811274a0:	df000f04 	addi	fp,sp,60
811274a4:	e13ffc15 	stw	r4,-16(fp)
811274a8:	2807883a 	mov	r3,r5
811274ac:	3005883a 	mov	r2,r6
811274b0:	e1ffff15 	stw	r7,-4(fp)
811274b4:	e0fffd0d 	sth	r3,-12(fp)
811274b8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
811274bc:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
811274c0:	e0bfff17 	ldw	r2,-4(fp)
811274c4:	1000021e 	bne	r2,zero,811274d0 <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
811274c8:	0005883a 	mov	r2,zero
811274cc:	0000d106 	br	81127814 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
811274d0:	e0bffc17 	ldw	r2,-16(fp)
811274d4:	1000051e 	bne	r2,zero,811274ec <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811274d8:	e0bfff17 	ldw	r2,-4(fp)
811274dc:	00c01b84 	movi	r3,110
811274e0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811274e4:	0005883a 	mov	r2,zero
811274e8:	0000ca06 	br	81127814 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
811274ec:	e0bffc17 	ldw	r2,-16(fp)
811274f0:	10800003 	ldbu	r2,0(r2)
811274f4:	10803fcc 	andi	r2,r2,255
811274f8:	10800160 	cmpeqi	r2,r2,5
811274fc:	1000051e 	bne	r2,zero,81127514 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
81127500:	e0bfff17 	ldw	r2,-4(fp)
81127504:	00c00044 	movi	r3,1
81127508:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112750c:	0005883a 	mov	r2,zero
81127510:	0000c006 	br	81127814 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127514:	0005303a 	rdctl	r2,status
81127518:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112751c:	e0fffb17 	ldw	r3,-20(fp)
81127520:	00bfff84 	movi	r2,-2
81127524:	1884703a 	and	r2,r3,r2
81127528:	1001703a 	wrctl	status,r2
  
  return context;
8112752c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81127530:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
81127534:	e0bffe03 	ldbu	r2,-8(fp)
81127538:	10000326 	beq	r2,zero,81127548 <OSFlagPost+0xbc>
8112753c:	10800060 	cmpeqi	r2,r2,1
81127540:	10000b1e 	bne	r2,zero,81127570 <OSFlagPost+0xe4>
81127544:	00001206 	br	81127590 <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
81127548:	e0bffc17 	ldw	r2,-16(fp)
8112754c:	1080020b 	ldhu	r2,8(r2)
81127550:	1007883a 	mov	r3,r2
81127554:	e0bffd0b 	ldhu	r2,-12(fp)
81127558:	0084303a 	nor	r2,zero,r2
8112755c:	1884703a 	and	r2,r3,r2
81127560:	1007883a 	mov	r3,r2
81127564:	e0bffc17 	ldw	r2,-16(fp)
81127568:	10c0020d 	sth	r3,8(r2)
             break;
8112756c:	00001106 	br	811275b4 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
81127570:	e0bffc17 	ldw	r2,-16(fp)
81127574:	10c0020b 	ldhu	r3,8(r2)
81127578:	e0bffd0b 	ldhu	r2,-12(fp)
8112757c:	1884b03a 	or	r2,r3,r2
81127580:	1007883a 	mov	r3,r2
81127584:	e0bffc17 	ldw	r2,-16(fp)
81127588:	10c0020d 	sth	r3,8(r2)
             break;
8112758c:	00000906 	br	811275b4 <OSFlagPost+0x128>
81127590:	e0bff317 	ldw	r2,-52(fp)
81127594:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127598:	e0bff417 	ldw	r2,-48(fp)
8112759c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
811275a0:	e0bfff17 	ldw	r2,-4(fp)
811275a4:	00c01c44 	movi	r3,113
811275a8:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
811275ac:	0005883a 	mov	r2,zero
811275b0:	00009806 	br	81127814 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
811275b4:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
811275b8:	e0bffc17 	ldw	r2,-16(fp)
811275bc:	10800117 	ldw	r2,4(r2)
811275c0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
811275c4:	00007706 	br	811277a4 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
811275c8:	e0bff117 	ldw	r2,-60(fp)
811275cc:	10800483 	ldbu	r2,18(r2)
811275d0:	10803fcc 	andi	r2,r2,255
811275d4:	10c00060 	cmpeqi	r3,r2,1
811275d8:	18004a1e 	bne	r3,zero,81127704 <OSFlagPost+0x278>
811275dc:	10c00088 	cmpgei	r3,r2,2
811275e0:	1800021e 	bne	r3,zero,811275ec <OSFlagPost+0x160>
811275e4:	10002f26 	beq	r2,zero,811276a4 <OSFlagPost+0x218>
811275e8:	00005b06 	br	81127758 <OSFlagPost+0x2cc>
811275ec:	10c000a0 	cmpeqi	r3,r2,2
811275f0:	1800031e 	bne	r3,zero,81127600 <OSFlagPost+0x174>
811275f4:	108000e0 	cmpeqi	r2,r2,3
811275f8:	1000171e 	bne	r2,zero,81127658 <OSFlagPost+0x1cc>
811275fc:	00005606 	br	81127758 <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81127600:	e0bffc17 	ldw	r2,-16(fp)
81127604:	10c0020b 	ldhu	r3,8(r2)
81127608:	e0bff117 	ldw	r2,-60(fp)
8112760c:	1080040b 	ldhu	r2,16(r2)
81127610:	1884703a 	and	r2,r3,r2
81127614:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81127618:	e0bff117 	ldw	r2,-60(fp)
8112761c:	1080040b 	ldhu	r2,16(r2)
81127620:	10ffffcc 	andi	r3,r2,65535
81127624:	e0bff60b 	ldhu	r2,-40(fp)
81127628:	1880541e 	bne	r3,r2,8112777c <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112762c:	e0bff60b 	ldhu	r2,-40(fp)
81127630:	100b883a 	mov	r5,r2
81127634:	e13ff117 	ldw	r4,-60(fp)
81127638:	1127b440 	call	81127b44 <OS_FlagTaskRdy>
8112763c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81127640:	e0bff683 	ldbu	r2,-38(fp)
81127644:	10800058 	cmpnei	r2,r2,1
81127648:	10004c1e 	bne	r2,zero,8112777c <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112764c:	00800044 	movi	r2,1
81127650:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81127654:	00004906 	br	8112777c <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81127658:	e0bffc17 	ldw	r2,-16(fp)
8112765c:	10c0020b 	ldhu	r3,8(r2)
81127660:	e0bff117 	ldw	r2,-60(fp)
81127664:	1080040b 	ldhu	r2,16(r2)
81127668:	1884703a 	and	r2,r3,r2
8112766c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81127670:	e0bff60b 	ldhu	r2,-40(fp)
81127674:	10004326 	beq	r2,zero,81127784 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81127678:	e0bff60b 	ldhu	r2,-40(fp)
8112767c:	100b883a 	mov	r5,r2
81127680:	e13ff117 	ldw	r4,-60(fp)
81127684:	1127b440 	call	81127b44 <OS_FlagTaskRdy>
81127688:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
8112768c:	e0bff683 	ldbu	r2,-38(fp)
81127690:	10800058 	cmpnei	r2,r2,1
81127694:	10003b1e 	bne	r2,zero,81127784 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81127698:	00800044 	movi	r2,1
8112769c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
811276a0:	00003806 	br	81127784 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
811276a4:	e0bffc17 	ldw	r2,-16(fp)
811276a8:	1080020b 	ldhu	r2,8(r2)
811276ac:	0084303a 	nor	r2,zero,r2
811276b0:	1007883a 	mov	r3,r2
811276b4:	e0bff117 	ldw	r2,-60(fp)
811276b8:	1080040b 	ldhu	r2,16(r2)
811276bc:	1884703a 	and	r2,r3,r2
811276c0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
811276c4:	e0bff117 	ldw	r2,-60(fp)
811276c8:	1080040b 	ldhu	r2,16(r2)
811276cc:	10ffffcc 	andi	r3,r2,65535
811276d0:	e0bff60b 	ldhu	r2,-40(fp)
811276d4:	18802d1e 	bne	r3,r2,8112778c <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
811276d8:	e0bff60b 	ldhu	r2,-40(fp)
811276dc:	100b883a 	mov	r5,r2
811276e0:	e13ff117 	ldw	r4,-60(fp)
811276e4:	1127b440 	call	81127b44 <OS_FlagTaskRdy>
811276e8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
811276ec:	e0bff683 	ldbu	r2,-38(fp)
811276f0:	10800058 	cmpnei	r2,r2,1
811276f4:	1000251e 	bne	r2,zero,8112778c <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
811276f8:	00800044 	movi	r2,1
811276fc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81127700:	00002206 	br	8112778c <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81127704:	e0bffc17 	ldw	r2,-16(fp)
81127708:	1080020b 	ldhu	r2,8(r2)
8112770c:	0084303a 	nor	r2,zero,r2
81127710:	1007883a 	mov	r3,r2
81127714:	e0bff117 	ldw	r2,-60(fp)
81127718:	1080040b 	ldhu	r2,16(r2)
8112771c:	1884703a 	and	r2,r3,r2
81127720:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81127724:	e0bff60b 	ldhu	r2,-40(fp)
81127728:	10001a26 	beq	r2,zero,81127794 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
8112772c:	e0bff60b 	ldhu	r2,-40(fp)
81127730:	100b883a 	mov	r5,r2
81127734:	e13ff117 	ldw	r4,-60(fp)
81127738:	1127b440 	call	81127b44 <OS_FlagTaskRdy>
8112773c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81127740:	e0bff683 	ldbu	r2,-38(fp)
81127744:	10800058 	cmpnei	r2,r2,1
81127748:	1000121e 	bne	r2,zero,81127794 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
8112774c:	00800044 	movi	r2,1
81127750:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81127754:	00000f06 	br	81127794 <OSFlagPost+0x308>
81127758:	e0bff317 	ldw	r2,-52(fp)
8112775c:	e0bff515 	stw	r2,-44(fp)
81127760:	e0bff517 	ldw	r2,-44(fp)
81127764:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
81127768:	e0bfff17 	ldw	r2,-4(fp)
8112776c:	00c01bc4 	movi	r3,111
81127770:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
81127774:	0005883a 	mov	r2,zero
81127778:	00002606 	br	81127814 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112777c:	0001883a 	nop
81127780:	00000506 	br	81127798 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81127784:	0001883a 	nop
81127788:	00000306 	br	81127798 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
8112778c:	0001883a 	nop
81127790:	00000106 	br	81127798 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81127794:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
81127798:	e0bff117 	ldw	r2,-60(fp)
8112779c:	10800017 	ldw	r2,0(r2)
811277a0:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
811277a4:	e0bff117 	ldw	r2,-60(fp)
811277a8:	103f871e 	bne	r2,zero,811275c8 <__reset+0xfb1075c8>
811277ac:	e0bff317 	ldw	r2,-52(fp)
811277b0:	e0bff715 	stw	r2,-36(fp)
811277b4:	e0bff717 	ldw	r2,-36(fp)
811277b8:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
811277bc:	e0bff203 	ldbu	r2,-56(fp)
811277c0:	10800058 	cmpnei	r2,r2,1
811277c4:	1000011e 	bne	r2,zero,811277cc <OSFlagPost+0x340>
        OS_Sched();
811277c8:	1125c540 	call	81125c54 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811277cc:	0005303a 	rdctl	r2,status
811277d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811277d4:	e0fffa17 	ldw	r3,-24(fp)
811277d8:	00bfff84 	movi	r2,-2
811277dc:	1884703a 	and	r2,r3,r2
811277e0:	1001703a 	wrctl	status,r2
  
  return context;
811277e4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
811277e8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
811277ec:	e0bffc17 	ldw	r2,-16(fp)
811277f0:	1080020b 	ldhu	r2,8(r2)
811277f4:	e0bff90d 	sth	r2,-28(fp)
811277f8:	e0bff317 	ldw	r2,-52(fp)
811277fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127800:	e0bff817 	ldw	r2,-32(fp)
81127804:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
81127808:	e0bfff17 	ldw	r2,-4(fp)
8112780c:	10000005 	stb	zero,0(r2)
    return (flags_cur);
81127810:	e0bff90b 	ldhu	r2,-28(fp)
}
81127814:	e037883a 	mov	sp,fp
81127818:	dfc00117 	ldw	ra,4(sp)
8112781c:	df000017 	ldw	fp,0(sp)
81127820:	dec00204 	addi	sp,sp,8
81127824:	f800283a 	ret

81127828 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
81127828:	defff904 	addi	sp,sp,-28
8112782c:	de00012e 	bgeu	sp,et,81127834 <OSFlagQuery+0xc>
81127830:	003b68fa 	trap	3
81127834:	df000615 	stw	fp,24(sp)
81127838:	df000604 	addi	fp,sp,24
8112783c:	e13ffe15 	stw	r4,-8(fp)
81127840:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
81127844:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
81127848:	e0bfff17 	ldw	r2,-4(fp)
8112784c:	1000021e 	bne	r2,zero,81127858 <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
81127850:	0005883a 	mov	r2,zero
81127854:	00002306 	br	811278e4 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
81127858:	e0bffe17 	ldw	r2,-8(fp)
8112785c:	1000051e 	bne	r2,zero,81127874 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81127860:	e0bfff17 	ldw	r2,-4(fp)
81127864:	00c01b84 	movi	r3,110
81127868:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112786c:	0005883a 	mov	r2,zero
81127870:	00001c06 	br	811278e4 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
81127874:	e0bffe17 	ldw	r2,-8(fp)
81127878:	10800003 	ldbu	r2,0(r2)
8112787c:	10803fcc 	andi	r2,r2,255
81127880:	10800160 	cmpeqi	r2,r2,5
81127884:	1000051e 	bne	r2,zero,8112789c <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
81127888:	e0bfff17 	ldw	r2,-4(fp)
8112788c:	00c00044 	movi	r3,1
81127890:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81127894:	0005883a 	mov	r2,zero
81127898:	00001206 	br	811278e4 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112789c:	0005303a 	rdctl	r2,status
811278a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811278a4:	e0fffc17 	ldw	r3,-16(fp)
811278a8:	00bfff84 	movi	r2,-2
811278ac:	1884703a 	and	r2,r3,r2
811278b0:	1001703a 	wrctl	status,r2
  
  return context;
811278b4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811278b8:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
811278bc:	e0bffe17 	ldw	r2,-8(fp)
811278c0:	1080020b 	ldhu	r2,8(r2)
811278c4:	e0bffb0d 	sth	r2,-20(fp)
811278c8:	e0bffa17 	ldw	r2,-24(fp)
811278cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811278d0:	e0bffd17 	ldw	r2,-12(fp)
811278d4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811278d8:	e0bfff17 	ldw	r2,-4(fp)
811278dc:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
811278e0:	e0bffb0b 	ldhu	r2,-20(fp)
}
811278e4:	e037883a 	mov	sp,fp
811278e8:	df000017 	ldw	fp,0(sp)
811278ec:	dec00104 	addi	sp,sp,4
811278f0:	f800283a 	ret

811278f4 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
811278f4:	defff804 	addi	sp,sp,-32
811278f8:	de00012e 	bgeu	sp,et,81127900 <OS_FlagBlock+0xc>
811278fc:	003b68fa 	trap	3
81127900:	df000715 	stw	fp,28(sp)
81127904:	df000704 	addi	fp,sp,28
81127908:	e13ffb15 	stw	r4,-20(fp)
8112790c:	e17ffc15 	stw	r5,-16(fp)
81127910:	3009883a 	mov	r4,r6
81127914:	3807883a 	mov	r3,r7
81127918:	e0800117 	ldw	r2,4(fp)
8112791c:	e13ffd0d 	sth	r4,-12(fp)
81127920:	e0fffe05 	stb	r3,-8(fp)
81127924:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
81127928:	d0a09017 	ldw	r2,-32192(gp)
8112792c:	d0e09017 	ldw	r3,-32192(gp)
81127930:	18c00c03 	ldbu	r3,48(r3)
81127934:	18c00814 	ori	r3,r3,32
81127938:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
8112793c:	d0a09017 	ldw	r2,-32192(gp)
81127940:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
81127944:	d0a09017 	ldw	r2,-32192(gp)
81127948:	e0ffff0b 	ldhu	r3,-4(fp)
8112794c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
81127950:	d0a09017 	ldw	r2,-32192(gp)
81127954:	e0fffc17 	ldw	r3,-16(fp)
81127958:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
8112795c:	e0bffc17 	ldw	r2,-16(fp)
81127960:	e0fffd0b 	ldhu	r3,-12(fp)
81127964:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
81127968:	e0bffc17 	ldw	r2,-16(fp)
8112796c:	e0fffe03 	ldbu	r3,-8(fp)
81127970:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
81127974:	d0e09017 	ldw	r3,-32192(gp)
81127978:	e0bffc17 	ldw	r2,-16(fp)
8112797c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
81127980:	e0bffb17 	ldw	r2,-20(fp)
81127984:	10c00117 	ldw	r3,4(r2)
81127988:	e0bffc17 	ldw	r2,-16(fp)
8112798c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
81127990:	e0bffc17 	ldw	r2,-16(fp)
81127994:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
81127998:	e0bffc17 	ldw	r2,-16(fp)
8112799c:	e0fffb17 	ldw	r3,-20(fp)
811279a0:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
811279a4:	e0bffb17 	ldw	r2,-20(fp)
811279a8:	10800117 	ldw	r2,4(r2)
811279ac:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
811279b0:	e0bff917 	ldw	r2,-28(fp)
811279b4:	10000326 	beq	r2,zero,811279c4 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
811279b8:	e0bff917 	ldw	r2,-28(fp)
811279bc:	e0fffc17 	ldw	r3,-16(fp)
811279c0:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
811279c4:	e0bffb17 	ldw	r2,-20(fp)
811279c8:	e0fffc17 	ldw	r3,-16(fp)
811279cc:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
811279d0:	d0a09017 	ldw	r2,-32192(gp)
811279d4:	10800d03 	ldbu	r2,52(r2)
811279d8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
811279dc:	e0fffa03 	ldbu	r3,-24(fp)
811279e0:	e13ffa03 	ldbu	r4,-24(fp)
811279e4:	d0a08c44 	addi	r2,gp,-32207
811279e8:	2085883a 	add	r2,r4,r2
811279ec:	10800003 	ldbu	r2,0(r2)
811279f0:	1009883a 	mov	r4,r2
811279f4:	d0a09017 	ldw	r2,-32192(gp)
811279f8:	10800d43 	ldbu	r2,53(r2)
811279fc:	0084303a 	nor	r2,zero,r2
81127a00:	2084703a 	and	r2,r4,r2
81127a04:	1009883a 	mov	r4,r2
81127a08:	d0a08c44 	addi	r2,gp,-32207
81127a0c:	1885883a 	add	r2,r3,r2
81127a10:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
81127a14:	e0fffa03 	ldbu	r3,-24(fp)
81127a18:	d0a08c44 	addi	r2,gp,-32207
81127a1c:	1885883a 	add	r2,r3,r2
81127a20:	10800003 	ldbu	r2,0(r2)
81127a24:	10803fcc 	andi	r2,r2,255
81127a28:	1000071e 	bne	r2,zero,81127a48 <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81127a2c:	d0a09017 	ldw	r2,-32192(gp)
81127a30:	10800d83 	ldbu	r2,54(r2)
81127a34:	0084303a 	nor	r2,zero,r2
81127a38:	1007883a 	mov	r3,r2
81127a3c:	d0a08c03 	ldbu	r2,-32208(gp)
81127a40:	1884703a 	and	r2,r3,r2
81127a44:	d0a08c05 	stb	r2,-32208(gp)
    }
}
81127a48:	0001883a 	nop
81127a4c:	e037883a 	mov	sp,fp
81127a50:	df000017 	ldw	fp,0(sp)
81127a54:	dec00104 	addi	sp,sp,4
81127a58:	f800283a 	ret

81127a5c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
81127a5c:	defffb04 	addi	sp,sp,-20
81127a60:	de00012e 	bgeu	sp,et,81127a68 <OS_FlagInit+0xc>
81127a64:	003b68fa 	trap	3
81127a68:	dfc00415 	stw	ra,16(sp)
81127a6c:	df000315 	stw	fp,12(sp)
81127a70:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
81127a74:	0140dc04 	movi	r5,880
81127a78:	012045b4 	movhi	r4,33046
81127a7c:	213ee404 	addi	r4,r4,-1136
81127a80:	1125b880 	call	81125b88 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
81127a84:	00a045b4 	movhi	r2,33046
81127a88:	10bee404 	addi	r2,r2,-1136
81127a8c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
81127a90:	00a045b4 	movhi	r2,33046
81127a94:	10beef04 	addi	r2,r2,-1092
81127a98:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
81127a9c:	e03ffd0d 	sth	zero,-12(fp)
81127aa0:	00001306 	br	81127af0 <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81127aa4:	e0bffe17 	ldw	r2,-8(fp)
81127aa8:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
81127aac:	e0bffe17 	ldw	r2,-8(fp)
81127ab0:	e0ffff17 	ldw	r3,-4(fp)
81127ab4:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
81127ab8:	e0bffe17 	ldw	r2,-8(fp)
81127abc:	00c00fc4 	movi	r3,63
81127ac0:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
81127ac4:	e0bffe17 	ldw	r2,-8(fp)
81127ac8:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
81127acc:	e0bffe17 	ldw	r2,-8(fp)
81127ad0:	10800b04 	addi	r2,r2,44
81127ad4:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
81127ad8:	e0bfff17 	ldw	r2,-4(fp)
81127adc:	10800b04 	addi	r2,r2,44
81127ae0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
81127ae4:	e0bffd0b 	ldhu	r2,-12(fp)
81127ae8:	10800044 	addi	r2,r2,1
81127aec:	e0bffd0d 	sth	r2,-12(fp)
81127af0:	e0bffd0b 	ldhu	r2,-12(fp)
81127af4:	108004f0 	cmpltui	r2,r2,19
81127af8:	103fea1e 	bne	r2,zero,81127aa4 <__reset+0xfb107aa4>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81127afc:	e0bffe17 	ldw	r2,-8(fp)
81127b00:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
81127b04:	e0bffe17 	ldw	r2,-8(fp)
81127b08:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
81127b0c:	e0bffe17 	ldw	r2,-8(fp)
81127b10:	00c00fc4 	movi	r3,63
81127b14:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
81127b18:	e0bffe17 	ldw	r2,-8(fp)
81127b1c:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
81127b20:	00a045b4 	movhi	r2,33046
81127b24:	10bee404 	addi	r2,r2,-1136
81127b28:	d0a09415 	stw	r2,-32176(gp)
#endif
}
81127b2c:	0001883a 	nop
81127b30:	e037883a 	mov	sp,fp
81127b34:	dfc00117 	ldw	ra,4(sp)
81127b38:	df000017 	ldw	fp,0(sp)
81127b3c:	dec00204 	addi	sp,sp,8
81127b40:	f800283a 	ret

81127b44 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
81127b44:	defffa04 	addi	sp,sp,-24
81127b48:	de00012e 	bgeu	sp,et,81127b50 <OS_FlagTaskRdy+0xc>
81127b4c:	003b68fa 	trap	3
81127b50:	dfc00515 	stw	ra,20(sp)
81127b54:	df000415 	stw	fp,16(sp)
81127b58:	df000404 	addi	fp,sp,16
81127b5c:	e13ffe15 	stw	r4,-8(fp)
81127b60:	2805883a 	mov	r2,r5
81127b64:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
81127b68:	e0bffe17 	ldw	r2,-8(fp)
81127b6c:	10800217 	ldw	r2,8(r2)
81127b70:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
81127b74:	e0bffd17 	ldw	r2,-12(fp)
81127b78:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
81127b7c:	e0bffd17 	ldw	r2,-12(fp)
81127b80:	e0ffff0b 	ldhu	r3,-4(fp)
81127b84:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
81127b88:	e0bffd17 	ldw	r2,-12(fp)
81127b8c:	10c00c03 	ldbu	r3,48(r2)
81127b90:	00bff7c4 	movi	r2,-33
81127b94:	1884703a 	and	r2,r3,r2
81127b98:	1007883a 	mov	r3,r2
81127b9c:	e0bffd17 	ldw	r2,-12(fp)
81127ba0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
81127ba4:	e0bffd17 	ldw	r2,-12(fp)
81127ba8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
81127bac:	e0bffd17 	ldw	r2,-12(fp)
81127bb0:	10800c03 	ldbu	r2,48(r2)
81127bb4:	10803fcc 	andi	r2,r2,255
81127bb8:	1000181e 	bne	r2,zero,81127c1c <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
81127bbc:	e0bffd17 	ldw	r2,-12(fp)
81127bc0:	10c00d83 	ldbu	r3,54(r2)
81127bc4:	d0a08c03 	ldbu	r2,-32208(gp)
81127bc8:	1884b03a 	or	r2,r3,r2
81127bcc:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81127bd0:	e0bffd17 	ldw	r2,-12(fp)
81127bd4:	10800d03 	ldbu	r2,52(r2)
81127bd8:	10c03fcc 	andi	r3,r2,255
81127bdc:	e0bffd17 	ldw	r2,-12(fp)
81127be0:	10800d03 	ldbu	r2,52(r2)
81127be4:	11003fcc 	andi	r4,r2,255
81127be8:	d0a08c44 	addi	r2,gp,-32207
81127bec:	2085883a 	add	r2,r4,r2
81127bf0:	11000003 	ldbu	r4,0(r2)
81127bf4:	e0bffd17 	ldw	r2,-12(fp)
81127bf8:	10800d43 	ldbu	r2,53(r2)
81127bfc:	2084b03a 	or	r2,r4,r2
81127c00:	1009883a 	mov	r4,r2
81127c04:	d0a08c44 	addi	r2,gp,-32207
81127c08:	1885883a 	add	r2,r3,r2
81127c0c:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
81127c10:	00800044 	movi	r2,1
81127c14:	e0bffc05 	stb	r2,-16(fp)
81127c18:	00000106 	br	81127c20 <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
81127c1c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
81127c20:	e13ffe17 	ldw	r4,-8(fp)
81127c24:	1127c400 	call	81127c40 <OS_FlagUnlink>
    return (sched);
81127c28:	e0bffc03 	ldbu	r2,-16(fp)
}
81127c2c:	e037883a 	mov	sp,fp
81127c30:	dfc00117 	ldw	ra,4(sp)
81127c34:	df000017 	ldw	fp,0(sp)
81127c38:	dec00204 	addi	sp,sp,8
81127c3c:	f800283a 	ret

81127c40 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
81127c40:	defffa04 	addi	sp,sp,-24
81127c44:	de00012e 	bgeu	sp,et,81127c4c <OS_FlagUnlink+0xc>
81127c48:	003b68fa 	trap	3
81127c4c:	df000515 	stw	fp,20(sp)
81127c50:	df000504 	addi	fp,sp,20
81127c54:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
81127c58:	e0bfff17 	ldw	r2,-4(fp)
81127c5c:	10800117 	ldw	r2,4(r2)
81127c60:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
81127c64:	e0bfff17 	ldw	r2,-4(fp)
81127c68:	10800017 	ldw	r2,0(r2)
81127c6c:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
81127c70:	e0bffb17 	ldw	r2,-20(fp)
81127c74:	10000b1e 	bne	r2,zero,81127ca4 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
81127c78:	e0bfff17 	ldw	r2,-4(fp)
81127c7c:	10800317 	ldw	r2,12(r2)
81127c80:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
81127c84:	e0bffd17 	ldw	r2,-12(fp)
81127c88:	e0fffc17 	ldw	r3,-16(fp)
81127c8c:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
81127c90:	e0bffc17 	ldw	r2,-16(fp)
81127c94:	10000b26 	beq	r2,zero,81127cc4 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
81127c98:	e0bffc17 	ldw	r2,-16(fp)
81127c9c:	10000115 	stw	zero,4(r2)
81127ca0:	00000806 	br	81127cc4 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
81127ca4:	e0bffb17 	ldw	r2,-20(fp)
81127ca8:	e0fffc17 	ldw	r3,-16(fp)
81127cac:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
81127cb0:	e0bffc17 	ldw	r2,-16(fp)
81127cb4:	10000326 	beq	r2,zero,81127cc4 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
81127cb8:	e0bffc17 	ldw	r2,-16(fp)
81127cbc:	e0fffb17 	ldw	r3,-20(fp)
81127cc0:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
81127cc4:	e0bfff17 	ldw	r2,-4(fp)
81127cc8:	10800217 	ldw	r2,8(r2)
81127ccc:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
81127cd0:	e0bffe17 	ldw	r2,-8(fp)
81127cd4:	10000a15 	stw	zero,40(r2)
#endif
}
81127cd8:	0001883a 	nop
81127cdc:	e037883a 	mov	sp,fp
81127ce0:	df000017 	ldw	fp,0(sp)
81127ce4:	dec00104 	addi	sp,sp,4
81127ce8:	f800283a 	ret

81127cec <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
81127cec:	defff404 	addi	sp,sp,-48
81127cf0:	de00012e 	bgeu	sp,et,81127cf8 <OSMemCreate+0xc>
81127cf4:	003b68fa 	trap	3
81127cf8:	df000b15 	stw	fp,44(sp)
81127cfc:	df000b04 	addi	fp,sp,44
81127d00:	e13ffc15 	stw	r4,-16(fp)
81127d04:	e17ffd15 	stw	r5,-12(fp)
81127d08:	e1bffe15 	stw	r6,-8(fp)
81127d0c:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81127d10:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81127d14:	e0bfff17 	ldw	r2,-4(fp)
81127d18:	1000021e 	bne	r2,zero,81127d24 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
81127d1c:	0005883a 	mov	r2,zero
81127d20:	00006506 	br	81127eb8 <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
81127d24:	e0bffc17 	ldw	r2,-16(fp)
81127d28:	1000051e 	bne	r2,zero,81127d40 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
81127d2c:	e0bfff17 	ldw	r2,-4(fp)
81127d30:	00c01884 	movi	r3,98
81127d34:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81127d38:	0005883a 	mov	r2,zero
81127d3c:	00005e06 	br	81127eb8 <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
81127d40:	e0bffc17 	ldw	r2,-16(fp)
81127d44:	108000cc 	andi	r2,r2,3
81127d48:	10000526 	beq	r2,zero,81127d60 <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
81127d4c:	e0bfff17 	ldw	r2,-4(fp)
81127d50:	00c01884 	movi	r3,98
81127d54:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81127d58:	0005883a 	mov	r2,zero
81127d5c:	00005606 	br	81127eb8 <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
81127d60:	e0bffd17 	ldw	r2,-12(fp)
81127d64:	108000a8 	cmpgeui	r2,r2,2
81127d68:	1000051e 	bne	r2,zero,81127d80 <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
81127d6c:	e0bfff17 	ldw	r2,-4(fp)
81127d70:	00c016c4 	movi	r3,91
81127d74:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81127d78:	0005883a 	mov	r2,zero
81127d7c:	00004e06 	br	81127eb8 <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
81127d80:	e0bffe17 	ldw	r2,-8(fp)
81127d84:	10800128 	cmpgeui	r2,r2,4
81127d88:	1000051e 	bne	r2,zero,81127da0 <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
81127d8c:	e0bfff17 	ldw	r2,-4(fp)
81127d90:	00c01704 	movi	r3,92
81127d94:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81127d98:	0005883a 	mov	r2,zero
81127d9c:	00004606 	br	81127eb8 <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127da0:	0005303a 	rdctl	r2,status
81127da4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127da8:	e0fffb17 	ldw	r3,-20(fp)
81127dac:	00bfff84 	movi	r2,-2
81127db0:	1884703a 	and	r2,r3,r2
81127db4:	1001703a 	wrctl	status,r2
  
  return context;
81127db8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81127dbc:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
81127dc0:	d0a08917 	ldw	r2,-32220(gp)
81127dc4:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
81127dc8:	d0a08917 	ldw	r2,-32220(gp)
81127dcc:	10000326 	beq	r2,zero,81127ddc <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
81127dd0:	d0a08917 	ldw	r2,-32220(gp)
81127dd4:	10800117 	ldw	r2,4(r2)
81127dd8:	d0a08915 	stw	r2,-32220(gp)
81127ddc:	e0bff817 	ldw	r2,-32(fp)
81127de0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127de4:	e0bff917 	ldw	r2,-28(fp)
81127de8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
81127dec:	e0bffa17 	ldw	r2,-24(fp)
81127df0:	1000051e 	bne	r2,zero,81127e08 <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
81127df4:	e0bfff17 	ldw	r2,-4(fp)
81127df8:	00c01684 	movi	r3,90
81127dfc:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81127e00:	0005883a 	mov	r2,zero
81127e04:	00002c06 	br	81127eb8 <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
81127e08:	e0bffc17 	ldw	r2,-16(fp)
81127e0c:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
81127e10:	e0fffc17 	ldw	r3,-16(fp)
81127e14:	e0bffe17 	ldw	r2,-8(fp)
81127e18:	1885883a 	add	r2,r3,r2
81127e1c:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
81127e20:	e03ff715 	stw	zero,-36(fp)
81127e24:	00000c06 	br	81127e58 <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
81127e28:	e0bff617 	ldw	r2,-40(fp)
81127e2c:	e0fff517 	ldw	r3,-44(fp)
81127e30:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
81127e34:	e0bff517 	ldw	r2,-44(fp)
81127e38:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
81127e3c:	e0fff517 	ldw	r3,-44(fp)
81127e40:	e0bffe17 	ldw	r2,-8(fp)
81127e44:	1885883a 	add	r2,r3,r2
81127e48:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
81127e4c:	e0bff717 	ldw	r2,-36(fp)
81127e50:	10800044 	addi	r2,r2,1
81127e54:	e0bff715 	stw	r2,-36(fp)
81127e58:	e0bffd17 	ldw	r2,-12(fp)
81127e5c:	10bfffc4 	addi	r2,r2,-1
81127e60:	e0fff717 	ldw	r3,-36(fp)
81127e64:	18bff036 	bltu	r3,r2,81127e28 <__reset+0xfb107e28>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
81127e68:	e0bff617 	ldw	r2,-40(fp)
81127e6c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
81127e70:	e0bffa17 	ldw	r2,-24(fp)
81127e74:	e0fffc17 	ldw	r3,-16(fp)
81127e78:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
81127e7c:	e0bffa17 	ldw	r2,-24(fp)
81127e80:	e0fffc17 	ldw	r3,-16(fp)
81127e84:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
81127e88:	e0bffa17 	ldw	r2,-24(fp)
81127e8c:	e0fffd17 	ldw	r3,-12(fp)
81127e90:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
81127e94:	e0bffa17 	ldw	r2,-24(fp)
81127e98:	e0fffd17 	ldw	r3,-12(fp)
81127e9c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
81127ea0:	e0bffa17 	ldw	r2,-24(fp)
81127ea4:	e0fffe17 	ldw	r3,-8(fp)
81127ea8:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
81127eac:	e0bfff17 	ldw	r2,-4(fp)
81127eb0:	10000005 	stb	zero,0(r2)
    return (pmem);
81127eb4:	e0bffa17 	ldw	r2,-24(fp)
}
81127eb8:	e037883a 	mov	sp,fp
81127ebc:	df000017 	ldw	fp,0(sp)
81127ec0:	dec00104 	addi	sp,sp,4
81127ec4:	f800283a 	ret

81127ec8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
81127ec8:	defff804 	addi	sp,sp,-32
81127ecc:	de00012e 	bgeu	sp,et,81127ed4 <OSMemGet+0xc>
81127ed0:	003b68fa 	trap	3
81127ed4:	df000715 	stw	fp,28(sp)
81127ed8:	df000704 	addi	fp,sp,28
81127edc:	e13ffe15 	stw	r4,-8(fp)
81127ee0:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81127ee4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81127ee8:	e0bfff17 	ldw	r2,-4(fp)
81127eec:	1000021e 	bne	r2,zero,81127ef8 <OSMemGet+0x30>
        return ((void *)0);
81127ef0:	0005883a 	mov	r2,zero
81127ef4:	00002e06 	br	81127fb0 <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
81127ef8:	e0bffe17 	ldw	r2,-8(fp)
81127efc:	1000051e 	bne	r2,zero,81127f14 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81127f00:	e0bfff17 	ldw	r2,-4(fp)
81127f04:	00c01804 	movi	r3,96
81127f08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81127f0c:	0005883a 	mov	r2,zero
81127f10:	00002706 	br	81127fb0 <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127f14:	0005303a 	rdctl	r2,status
81127f18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127f1c:	e0fffd17 	ldw	r3,-12(fp)
81127f20:	00bfff84 	movi	r2,-2
81127f24:	1884703a 	and	r2,r3,r2
81127f28:	1001703a 	wrctl	status,r2
  
  return context;
81127f2c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81127f30:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
81127f34:	e0bffe17 	ldw	r2,-8(fp)
81127f38:	10800417 	ldw	r2,16(r2)
81127f3c:	10001426 	beq	r2,zero,81127f90 <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
81127f40:	e0bffe17 	ldw	r2,-8(fp)
81127f44:	10800117 	ldw	r2,4(r2)
81127f48:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
81127f4c:	e0bffb17 	ldw	r2,-20(fp)
81127f50:	10c00017 	ldw	r3,0(r2)
81127f54:	e0bffe17 	ldw	r2,-8(fp)
81127f58:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
81127f5c:	e0bffe17 	ldw	r2,-8(fp)
81127f60:	10800417 	ldw	r2,16(r2)
81127f64:	10ffffc4 	addi	r3,r2,-1
81127f68:	e0bffe17 	ldw	r2,-8(fp)
81127f6c:	10c00415 	stw	r3,16(r2)
81127f70:	e0bff917 	ldw	r2,-28(fp)
81127f74:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127f78:	e0bffa17 	ldw	r2,-24(fp)
81127f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
81127f80:	e0bfff17 	ldw	r2,-4(fp)
81127f84:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
81127f88:	e0bffb17 	ldw	r2,-20(fp)
81127f8c:	00000806 	br	81127fb0 <OSMemGet+0xe8>
81127f90:	e0bff917 	ldw	r2,-28(fp)
81127f94:	e0bffc15 	stw	r2,-16(fp)
81127f98:	e0bffc17 	ldw	r2,-16(fp)
81127f9c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
81127fa0:	e0bfff17 	ldw	r2,-4(fp)
81127fa4:	00c01744 	movi	r3,93
81127fa8:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
81127fac:	0005883a 	mov	r2,zero
}
81127fb0:	e037883a 	mov	sp,fp
81127fb4:	df000017 	ldw	fp,0(sp)
81127fb8:	dec00104 	addi	sp,sp,4
81127fbc:	f800283a 	ret

81127fc0 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
81127fc0:	defff704 	addi	sp,sp,-36
81127fc4:	de00012e 	bgeu	sp,et,81127fcc <OSMemNameGet+0xc>
81127fc8:	003b68fa 	trap	3
81127fcc:	dfc00815 	stw	ra,32(sp)
81127fd0:	df000715 	stw	fp,28(sp)
81127fd4:	df000704 	addi	fp,sp,28
81127fd8:	e13ffd15 	stw	r4,-12(fp)
81127fdc:	e17ffe15 	stw	r5,-8(fp)
81127fe0:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127fe4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81127fe8:	e0bfff17 	ldw	r2,-4(fp)
81127fec:	1000021e 	bne	r2,zero,81127ff8 <OSMemNameGet+0x38>
        return (0);
81127ff0:	0005883a 	mov	r2,zero
81127ff4:	00002b06 	br	811280a4 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
81127ff8:	e0bffd17 	ldw	r2,-12(fp)
81127ffc:	1000051e 	bne	r2,zero,81128014 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81128000:	e0bfff17 	ldw	r2,-4(fp)
81128004:	00c01804 	movi	r3,96
81128008:	10c00005 	stb	r3,0(r2)
        return (0);
8112800c:	0005883a 	mov	r2,zero
81128010:	00002406 	br	811280a4 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81128014:	e0bffe17 	ldw	r2,-8(fp)
81128018:	1000051e 	bne	r2,zero,81128030 <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112801c:	e0bfff17 	ldw	r2,-4(fp)
81128020:	00c00304 	movi	r3,12
81128024:	10c00005 	stb	r3,0(r2)
        return (0);
81128028:	0005883a 	mov	r2,zero
8112802c:	00001d06 	br	811280a4 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81128030:	d0a08f03 	ldbu	r2,-32196(gp)
81128034:	10803fcc 	andi	r2,r2,255
81128038:	10000526 	beq	r2,zero,81128050 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112803c:	e0bfff17 	ldw	r2,-4(fp)
81128040:	00c00444 	movi	r3,17
81128044:	10c00005 	stb	r3,0(r2)
        return (0);
81128048:	0005883a 	mov	r2,zero
8112804c:	00001506 	br	811280a4 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128050:	0005303a 	rdctl	r2,status
81128054:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128058:	e0fffb17 	ldw	r3,-20(fp)
8112805c:	00bfff84 	movi	r2,-2
81128060:	1884703a 	and	r2,r3,r2
81128064:	1001703a 	wrctl	status,r2
  
  return context;
81128068:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112806c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
81128070:	e0bffd17 	ldw	r2,-12(fp)
81128074:	10800504 	addi	r2,r2,20
81128078:	100b883a 	mov	r5,r2
8112807c:	e13ffe17 	ldw	r4,-8(fp)
81128080:	1125da80 	call	81125da8 <OS_StrCopy>
81128084:	e0bffa05 	stb	r2,-24(fp)
81128088:	e0bff917 	ldw	r2,-28(fp)
8112808c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128090:	e0bffc17 	ldw	r2,-16(fp)
81128094:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81128098:	e0bfff17 	ldw	r2,-4(fp)
8112809c:	10000005 	stb	zero,0(r2)
    return (len);
811280a0:	e0bffa03 	ldbu	r2,-24(fp)
}
811280a4:	e037883a 	mov	sp,fp
811280a8:	dfc00117 	ldw	ra,4(sp)
811280ac:	df000017 	ldw	fp,0(sp)
811280b0:	dec00204 	addi	sp,sp,8
811280b4:	f800283a 	ret

811280b8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
811280b8:	defff604 	addi	sp,sp,-40
811280bc:	de00012e 	bgeu	sp,et,811280c4 <OSMemNameSet+0xc>
811280c0:	003b68fa 	trap	3
811280c4:	dfc00915 	stw	ra,36(sp)
811280c8:	df000815 	stw	fp,32(sp)
811280cc:	df000804 	addi	fp,sp,32
811280d0:	e13ffd15 	stw	r4,-12(fp)
811280d4:	e17ffe15 	stw	r5,-8(fp)
811280d8:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811280dc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811280e0:	e0bfff17 	ldw	r2,-4(fp)
811280e4:	10003526 	beq	r2,zero,811281bc <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
811280e8:	e0bffd17 	ldw	r2,-12(fp)
811280ec:	1000041e 	bne	r2,zero,81128100 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
811280f0:	e0bfff17 	ldw	r2,-4(fp)
811280f4:	00c01804 	movi	r3,96
811280f8:	10c00005 	stb	r3,0(r2)
        return;
811280fc:	00003006 	br	811281c0 <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81128100:	e0bffe17 	ldw	r2,-8(fp)
81128104:	1000041e 	bne	r2,zero,81128118 <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81128108:	e0bfff17 	ldw	r2,-4(fp)
8112810c:	00c00304 	movi	r3,12
81128110:	10c00005 	stb	r3,0(r2)
        return;
81128114:	00002a06 	br	811281c0 <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81128118:	d0a08f03 	ldbu	r2,-32196(gp)
8112811c:	10803fcc 	andi	r2,r2,255
81128120:	10000426 	beq	r2,zero,81128134 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81128124:	e0bfff17 	ldw	r2,-4(fp)
81128128:	00c00484 	movi	r3,18
8112812c:	10c00005 	stb	r3,0(r2)
        return;
81128130:	00002306 	br	811281c0 <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128134:	0005303a 	rdctl	r2,status
81128138:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112813c:	e0fffc17 	ldw	r3,-16(fp)
81128140:	00bfff84 	movi	r2,-2
81128144:	1884703a 	and	r2,r3,r2
81128148:	1001703a 	wrctl	status,r2
  
  return context;
8112814c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81128150:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
81128154:	e13ffe17 	ldw	r4,-8(fp)
81128158:	1125e240 	call	81125e24 <OS_StrLen>
8112815c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
81128160:	e0bffa03 	ldbu	r2,-24(fp)
81128164:	10800830 	cmpltui	r2,r2,32
81128168:	1000081e 	bne	r2,zero,8112818c <OSMemNameSet+0xd4>
8112816c:	e0bff817 	ldw	r2,-32(fp)
81128170:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128174:	e0bff917 	ldw	r2,-28(fp)
81128178:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112817c:	e0bfff17 	ldw	r2,-4(fp)
81128180:	00c018c4 	movi	r3,99
81128184:	10c00005 	stb	r3,0(r2)
        return;
81128188:	00000d06 	br	811281c0 <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112818c:	e0bffd17 	ldw	r2,-12(fp)
81128190:	10800504 	addi	r2,r2,20
81128194:	e17ffe17 	ldw	r5,-8(fp)
81128198:	1009883a 	mov	r4,r2
8112819c:	1125da80 	call	81125da8 <OS_StrCopy>
811281a0:	e0bff817 	ldw	r2,-32(fp)
811281a4:	e0bffb15 	stw	r2,-20(fp)
811281a8:	e0bffb17 	ldw	r2,-20(fp)
811281ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811281b0:	e0bfff17 	ldw	r2,-4(fp)
811281b4:	10000005 	stb	zero,0(r2)
811281b8:	00000106 	br	811281c0 <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
811281bc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
811281c0:	e037883a 	mov	sp,fp
811281c4:	dfc00117 	ldw	ra,4(sp)
811281c8:	df000017 	ldw	fp,0(sp)
811281cc:	dec00204 	addi	sp,sp,8
811281d0:	f800283a 	ret

811281d4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
811281d4:	defff904 	addi	sp,sp,-28
811281d8:	de00012e 	bgeu	sp,et,811281e0 <OSMemPut+0xc>
811281dc:	003b68fa 	trap	3
811281e0:	df000615 	stw	fp,24(sp)
811281e4:	df000604 	addi	fp,sp,24
811281e8:	e13ffe15 	stw	r4,-8(fp)
811281ec:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811281f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
811281f4:	e0bffe17 	ldw	r2,-8(fp)
811281f8:	1000021e 	bne	r2,zero,81128204 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
811281fc:	00801804 	movi	r2,96
81128200:	00002806 	br	811282a4 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
81128204:	e0bfff17 	ldw	r2,-4(fp)
81128208:	1000021e 	bne	r2,zero,81128214 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112820c:	008017c4 	movi	r2,95
81128210:	00002406 	br	811282a4 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128214:	0005303a 	rdctl	r2,status
81128218:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112821c:	e0fffd17 	ldw	r3,-12(fp)
81128220:	00bfff84 	movi	r2,-2
81128224:	1884703a 	and	r2,r3,r2
81128228:	1001703a 	wrctl	status,r2
  
  return context;
8112822c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81128230:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
81128234:	e0bffe17 	ldw	r2,-8(fp)
81128238:	10c00417 	ldw	r3,16(r2)
8112823c:	e0bffe17 	ldw	r2,-8(fp)
81128240:	10800317 	ldw	r2,12(r2)
81128244:	18800636 	bltu	r3,r2,81128260 <OSMemPut+0x8c>
81128248:	e0bffa17 	ldw	r2,-24(fp)
8112824c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128250:	e0bffb17 	ldw	r2,-20(fp)
81128254:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
81128258:	00801784 	movi	r2,94
8112825c:	00001106 	br	811282a4 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
81128260:	e0bffe17 	ldw	r2,-8(fp)
81128264:	10c00117 	ldw	r3,4(r2)
81128268:	e0bfff17 	ldw	r2,-4(fp)
8112826c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
81128270:	e0bffe17 	ldw	r2,-8(fp)
81128274:	e0ffff17 	ldw	r3,-4(fp)
81128278:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112827c:	e0bffe17 	ldw	r2,-8(fp)
81128280:	10800417 	ldw	r2,16(r2)
81128284:	10c00044 	addi	r3,r2,1
81128288:	e0bffe17 	ldw	r2,-8(fp)
8112828c:	10c00415 	stw	r3,16(r2)
81128290:	e0bffa17 	ldw	r2,-24(fp)
81128294:	e0bffc15 	stw	r2,-16(fp)
81128298:	e0bffc17 	ldw	r2,-16(fp)
8112829c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
811282a0:	0005883a 	mov	r2,zero
}
811282a4:	e037883a 	mov	sp,fp
811282a8:	df000017 	ldw	fp,0(sp)
811282ac:	dec00104 	addi	sp,sp,4
811282b0:	f800283a 	ret

811282b4 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
811282b4:	defffa04 	addi	sp,sp,-24
811282b8:	de00012e 	bgeu	sp,et,811282c0 <OSMemQuery+0xc>
811282bc:	003b68fa 	trap	3
811282c0:	df000515 	stw	fp,20(sp)
811282c4:	df000504 	addi	fp,sp,20
811282c8:	e13ffe15 	stw	r4,-8(fp)
811282cc:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811282d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
811282d4:	e0bffe17 	ldw	r2,-8(fp)
811282d8:	1000021e 	bne	r2,zero,811282e4 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
811282dc:	00801804 	movi	r2,96
811282e0:	00002c06 	br	81128394 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
811282e4:	e0bfff17 	ldw	r2,-4(fp)
811282e8:	1000021e 	bne	r2,zero,811282f4 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
811282ec:	00801844 	movi	r2,97
811282f0:	00002806 	br	81128394 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811282f4:	0005303a 	rdctl	r2,status
811282f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811282fc:	e0fffc17 	ldw	r3,-16(fp)
81128300:	00bfff84 	movi	r2,-2
81128304:	1884703a 	and	r2,r3,r2
81128308:	1001703a 	wrctl	status,r2
  
  return context;
8112830c:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81128310:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
81128314:	e0bffe17 	ldw	r2,-8(fp)
81128318:	10c00017 	ldw	r3,0(r2)
8112831c:	e0bfff17 	ldw	r2,-4(fp)
81128320:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
81128324:	e0bffe17 	ldw	r2,-8(fp)
81128328:	10c00117 	ldw	r3,4(r2)
8112832c:	e0bfff17 	ldw	r2,-4(fp)
81128330:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
81128334:	e0bffe17 	ldw	r2,-8(fp)
81128338:	10c00217 	ldw	r3,8(r2)
8112833c:	e0bfff17 	ldw	r2,-4(fp)
81128340:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
81128344:	e0bffe17 	ldw	r2,-8(fp)
81128348:	10c00317 	ldw	r3,12(r2)
8112834c:	e0bfff17 	ldw	r2,-4(fp)
81128350:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
81128354:	e0bffe17 	ldw	r2,-8(fp)
81128358:	10c00417 	ldw	r3,16(r2)
8112835c:	e0bfff17 	ldw	r2,-4(fp)
81128360:	10c00415 	stw	r3,16(r2)
81128364:	e0bffb17 	ldw	r2,-20(fp)
81128368:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112836c:	e0bffd17 	ldw	r2,-12(fp)
81128370:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
81128374:	e0bfff17 	ldw	r2,-4(fp)
81128378:	10c00317 	ldw	r3,12(r2)
8112837c:	e0bfff17 	ldw	r2,-4(fp)
81128380:	10800417 	ldw	r2,16(r2)
81128384:	1887c83a 	sub	r3,r3,r2
81128388:	e0bfff17 	ldw	r2,-4(fp)
8112838c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
81128390:	0005883a 	mov	r2,zero
}
81128394:	e037883a 	mov	sp,fp
81128398:	df000017 	ldw	fp,0(sp)
8112839c:	dec00104 	addi	sp,sp,4
811283a0:	f800283a 	ret

811283a4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
811283a4:	defffc04 	addi	sp,sp,-16
811283a8:	de00012e 	bgeu	sp,et,811283b0 <OS_MemInit+0xc>
811283ac:	003b68fa 	trap	3
811283b0:	dfc00315 	stw	ra,12(sp)
811283b4:	df000215 	stw	fp,8(sp)
811283b8:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
811283bc:	01430c04 	movi	r5,3120
811283c0:	012045b4 	movhi	r4,33046
811283c4:	21002804 	addi	r4,r4,160
811283c8:	1125b880 	call	81125b88 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
811283cc:	00a045b4 	movhi	r2,33046
811283d0:	10802804 	addi	r2,r2,160
811283d4:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
811283d8:	e03fff0d 	sth	zero,-4(fp)
811283dc:	00001306 	br	8112842c <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
811283e0:	e0bfff0b 	ldhu	r2,-4(fp)
811283e4:	10800044 	addi	r2,r2,1
811283e8:	10c00d24 	muli	r3,r2,52
811283ec:	00a045b4 	movhi	r2,33046
811283f0:	10802804 	addi	r2,r2,160
811283f4:	1887883a 	add	r3,r3,r2
811283f8:	e0bffe17 	ldw	r2,-8(fp)
811283fc:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
81128400:	e0bffe17 	ldw	r2,-8(fp)
81128404:	00c00fc4 	movi	r3,63
81128408:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112840c:	e0bffe17 	ldw	r2,-8(fp)
81128410:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
81128414:	e0bffe17 	ldw	r2,-8(fp)
81128418:	10800d04 	addi	r2,r2,52
8112841c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
81128420:	e0bfff0b 	ldhu	r2,-4(fp)
81128424:	10800044 	addi	r2,r2,1
81128428:	e0bfff0d 	sth	r2,-4(fp)
8112842c:	e0bfff0b 	ldhu	r2,-4(fp)
81128430:	10800ef0 	cmpltui	r2,r2,59
81128434:	103fea1e 	bne	r2,zero,811283e0 <__reset+0xfb1083e0>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
81128438:	e0bffe17 	ldw	r2,-8(fp)
8112843c:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
81128440:	e0bffe17 	ldw	r2,-8(fp)
81128444:	00c00fc4 	movi	r3,63
81128448:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112844c:	e0bffe17 	ldw	r2,-8(fp)
81128450:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
81128454:	00a045b4 	movhi	r2,33046
81128458:	10802804 	addi	r2,r2,160
8112845c:	d0a08915 	stw	r2,-32220(gp)
#endif
}
81128460:	0001883a 	nop
81128464:	e037883a 	mov	sp,fp
81128468:	dfc00117 	ldw	ra,4(sp)
8112846c:	df000017 	ldw	fp,0(sp)
81128470:	dec00204 	addi	sp,sp,8
81128474:	f800283a 	ret

81128478 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
81128478:	defff704 	addi	sp,sp,-36
8112847c:	de00012e 	bgeu	sp,et,81128484 <OSMutexAccept+0xc>
81128480:	003b68fa 	trap	3
81128484:	df000815 	stw	fp,32(sp)
81128488:	df000804 	addi	fp,sp,32
8112848c:	e13ffe15 	stw	r4,-8(fp)
81128490:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81128494:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
81128498:	e0bfff17 	ldw	r2,-4(fp)
8112849c:	1000021e 	bne	r2,zero,811284a8 <OSMutexAccept+0x30>
        return (OS_FALSE);
811284a0:	0005883a 	mov	r2,zero
811284a4:	00005b06 	br	81128614 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
811284a8:	e0bffe17 	ldw	r2,-8(fp)
811284ac:	1000051e 	bne	r2,zero,811284c4 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
811284b0:	e0bfff17 	ldw	r2,-4(fp)
811284b4:	00c00104 	movi	r3,4
811284b8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811284bc:	0005883a 	mov	r2,zero
811284c0:	00005406 	br	81128614 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
811284c4:	e0bffe17 	ldw	r2,-8(fp)
811284c8:	10800003 	ldbu	r2,0(r2)
811284cc:	10803fcc 	andi	r2,r2,255
811284d0:	10800120 	cmpeqi	r2,r2,4
811284d4:	1000051e 	bne	r2,zero,811284ec <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
811284d8:	e0bfff17 	ldw	r2,-4(fp)
811284dc:	00c00044 	movi	r3,1
811284e0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
811284e4:	0005883a 	mov	r2,zero
811284e8:	00004a06 	br	81128614 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
811284ec:	d0a08f03 	ldbu	r2,-32196(gp)
811284f0:	10803fcc 	andi	r2,r2,255
811284f4:	10000526 	beq	r2,zero,8112850c <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
811284f8:	e0bfff17 	ldw	r2,-4(fp)
811284fc:	00c00084 	movi	r3,2
81128500:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81128504:	0005883a 	mov	r2,zero
81128508:	00004206 	br	81128614 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112850c:	0005303a 	rdctl	r2,status
81128510:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128514:	e0fffd17 	ldw	r3,-12(fp)
81128518:	00bfff84 	movi	r2,-2
8112851c:	1884703a 	and	r2,r3,r2
81128520:	1001703a 	wrctl	status,r2
  
  return context;
81128524:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
81128528:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112852c:	e0bffe17 	ldw	r2,-8(fp)
81128530:	1080020b 	ldhu	r2,8(r2)
81128534:	10bfffcc 	andi	r2,r2,65535
81128538:	1004d23a 	srli	r2,r2,8
8112853c:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
81128540:	e0bffe17 	ldw	r2,-8(fp)
81128544:	1080020b 	ldhu	r2,8(r2)
81128548:	10bfffcc 	andi	r2,r2,65535
8112854c:	10803fcc 	andi	r2,r2,255
81128550:	10803fd8 	cmpnei	r2,r2,255
81128554:	1000281e 	bne	r2,zero,811285f8 <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
81128558:	e0bffe17 	ldw	r2,-8(fp)
8112855c:	10c0020b 	ldhu	r3,8(r2)
81128560:	00bfc004 	movi	r2,-256
81128564:	1884703a 	and	r2,r3,r2
81128568:	1007883a 	mov	r3,r2
8112856c:	e0bffe17 	ldw	r2,-8(fp)
81128570:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
81128574:	e0bffe17 	ldw	r2,-8(fp)
81128578:	10c0020b 	ldhu	r3,8(r2)
8112857c:	d0a09017 	ldw	r2,-32192(gp)
81128580:	10800c83 	ldbu	r2,50(r2)
81128584:	10803fcc 	andi	r2,r2,255
81128588:	1884b03a 	or	r2,r3,r2
8112858c:	1007883a 	mov	r3,r2
81128590:	e0bffe17 	ldw	r2,-8(fp)
81128594:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
81128598:	d0e09017 	ldw	r3,-32192(gp)
8112859c:	e0bffe17 	ldw	r2,-8(fp)
811285a0:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
811285a4:	d0a09017 	ldw	r2,-32192(gp)
811285a8:	10800c83 	ldbu	r2,50(r2)
811285ac:	10803fcc 	andi	r2,r2,255
811285b0:	e0fffa03 	ldbu	r3,-24(fp)
811285b4:	18800836 	bltu	r3,r2,811285d8 <OSMutexAccept+0x160>
811285b8:	e0bff817 	ldw	r2,-32(fp)
811285bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811285c0:	e0bff917 	ldw	r2,-28(fp)
811285c4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
811285c8:	e0bfff17 	ldw	r2,-4(fp)
811285cc:	00c01e04 	movi	r3,120
811285d0:	10c00005 	stb	r3,0(r2)
811285d4:	00000606 	br	811285f0 <OSMutexAccept+0x178>
811285d8:	e0bff817 	ldw	r2,-32(fp)
811285dc:	e0bffb15 	stw	r2,-20(fp)
811285e0:	e0bffb17 	ldw	r2,-20(fp)
811285e4:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
811285e8:	e0bfff17 	ldw	r2,-4(fp)
811285ec:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
811285f0:	00800044 	movi	r2,1
811285f4:	00000706 	br	81128614 <OSMutexAccept+0x19c>
811285f8:	e0bff817 	ldw	r2,-32(fp)
811285fc:	e0bffc15 	stw	r2,-16(fp)
81128600:	e0bffc17 	ldw	r2,-16(fp)
81128604:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81128608:	e0bfff17 	ldw	r2,-4(fp)
8112860c:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
81128610:	0005883a 	mov	r2,zero
}
81128614:	e037883a 	mov	sp,fp
81128618:	df000017 	ldw	fp,0(sp)
8112861c:	dec00104 	addi	sp,sp,4
81128620:	f800283a 	ret

81128624 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
81128624:	defff604 	addi	sp,sp,-40
81128628:	de00012e 	bgeu	sp,et,81128630 <OSMutexCreate+0xc>
8112862c:	003b68fa 	trap	3
81128630:	dfc00915 	stw	ra,36(sp)
81128634:	df000815 	stw	fp,32(sp)
81128638:	df000804 	addi	fp,sp,32
8112863c:	2005883a 	mov	r2,r4
81128640:	e17fff15 	stw	r5,-4(fp)
81128644:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81128648:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112864c:	e0bfff17 	ldw	r2,-4(fp)
81128650:	1000021e 	bne	r2,zero,8112865c <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
81128654:	0005883a 	mov	r2,zero
81128658:	00006106 	br	811287e0 <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112865c:	e0bffe03 	ldbu	r2,-8(fp)
81128660:	10800a30 	cmpltui	r2,r2,40
81128664:	1000051e 	bne	r2,zero,8112867c <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
81128668:	e0bfff17 	ldw	r2,-4(fp)
8112866c:	00c00a84 	movi	r3,42
81128670:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
81128674:	0005883a 	mov	r2,zero
81128678:	00005906 	br	811287e0 <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112867c:	d0a08f03 	ldbu	r2,-32196(gp)
81128680:	10803fcc 	andi	r2,r2,255
81128684:	10000526 	beq	r2,zero,8112869c <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
81128688:	e0bfff17 	ldw	r2,-4(fp)
8112868c:	00c00404 	movi	r3,16
81128690:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
81128694:	0005883a 	mov	r2,zero
81128698:	00005106 	br	811287e0 <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112869c:	0005303a 	rdctl	r2,status
811286a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811286a4:	e0fffd17 	ldw	r3,-12(fp)
811286a8:	00bfff84 	movi	r2,-2
811286ac:	1884703a 	and	r2,r3,r2
811286b0:	1001703a 	wrctl	status,r2
  
  return context;
811286b4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811286b8:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
811286bc:	e0fffe03 	ldbu	r3,-8(fp)
811286c0:	00a045b4 	movhi	r2,33046
811286c4:	10904e04 	addi	r2,r2,16696
811286c8:	18c7883a 	add	r3,r3,r3
811286cc:	18c7883a 	add	r3,r3,r3
811286d0:	10c5883a 	add	r2,r2,r3
811286d4:	10800017 	ldw	r2,0(r2)
811286d8:	10000926 	beq	r2,zero,81128700 <OSMutexCreate+0xdc>
811286dc:	e0bff817 	ldw	r2,-32(fp)
811286e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811286e4:	e0bff917 	ldw	r2,-28(fp)
811286e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
811286ec:	e0bfff17 	ldw	r2,-4(fp)
811286f0:	00c00a04 	movi	r3,40
811286f4:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
811286f8:	0005883a 	mov	r2,zero
811286fc:	00003806 	br	811287e0 <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
81128700:	e0fffe03 	ldbu	r3,-8(fp)
81128704:	00a045b4 	movhi	r2,33046
81128708:	10904e04 	addi	r2,r2,16696
8112870c:	18c7883a 	add	r3,r3,r3
81128710:	18c7883a 	add	r3,r3,r3
81128714:	10c5883a 	add	r2,r2,r3
81128718:	00c00044 	movi	r3,1
8112871c:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
81128720:	d0a08e17 	ldw	r2,-32200(gp)
81128724:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
81128728:	e0bffb17 	ldw	r2,-20(fp)
8112872c:	1000101e 	bne	r2,zero,81128770 <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
81128730:	e0fffe03 	ldbu	r3,-8(fp)
81128734:	00a045b4 	movhi	r2,33046
81128738:	10904e04 	addi	r2,r2,16696
8112873c:	18c7883a 	add	r3,r3,r3
81128740:	18c7883a 	add	r3,r3,r3
81128744:	10c5883a 	add	r2,r2,r3
81128748:	10000015 	stw	zero,0(r2)
8112874c:	e0bff817 	ldw	r2,-32(fp)
81128750:	e0bffa15 	stw	r2,-24(fp)
81128754:	e0bffa17 	ldw	r2,-24(fp)
81128758:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112875c:	e0bfff17 	ldw	r2,-4(fp)
81128760:	00c00104 	movi	r3,4
81128764:	10c00005 	stb	r3,0(r2)
        return (pevent);
81128768:	e0bffb17 	ldw	r2,-20(fp)
8112876c:	00001c06 	br	811287e0 <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
81128770:	d0a08e17 	ldw	r2,-32200(gp)
81128774:	10800117 	ldw	r2,4(r2)
81128778:	d0a08e15 	stw	r2,-32200(gp)
8112877c:	e0bff817 	ldw	r2,-32(fp)
81128780:	e0bffc15 	stw	r2,-16(fp)
81128784:	e0bffc17 	ldw	r2,-16(fp)
81128788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112878c:	e0bffb17 	ldw	r2,-20(fp)
81128790:	00c00104 	movi	r3,4
81128794:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
81128798:	e0bffe03 	ldbu	r2,-8(fp)
8112879c:	1004923a 	slli	r2,r2,8
811287a0:	10803fd4 	ori	r2,r2,255
811287a4:	1007883a 	mov	r3,r2
811287a8:	e0bffb17 	ldw	r2,-20(fp)
811287ac:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
811287b0:	e0bffb17 	ldw	r2,-20(fp)
811287b4:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
811287b8:	e0bffb17 	ldw	r2,-20(fp)
811287bc:	00c00fc4 	movi	r3,63
811287c0:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
811287c4:	e0bffb17 	ldw	r2,-20(fp)
811287c8:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
811287cc:	e13ffb17 	ldw	r4,-20(fp)
811287d0:	11257700 	call	81125770 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
811287d4:	e0bfff17 	ldw	r2,-4(fp)
811287d8:	10000005 	stb	zero,0(r2)
    return (pevent);
811287dc:	e0bffb17 	ldw	r2,-20(fp)
}
811287e0:	e037883a 	mov	sp,fp
811287e4:	dfc00117 	ldw	ra,4(sp)
811287e8:	df000017 	ldw	fp,0(sp)
811287ec:	dec00204 	addi	sp,sp,8
811287f0:	f800283a 	ret

811287f4 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
811287f4:	defff004 	addi	sp,sp,-64
811287f8:	de00012e 	bgeu	sp,et,81128800 <OSMutexDel+0xc>
811287fc:	003b68fa 	trap	3
81128800:	dfc00f15 	stw	ra,60(sp)
81128804:	df000e15 	stw	fp,56(sp)
81128808:	df000e04 	addi	fp,sp,56
8112880c:	e13ffd15 	stw	r4,-12(fp)
81128810:	2805883a 	mov	r2,r5
81128814:	e1bfff15 	stw	r6,-4(fp)
81128818:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112881c:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81128820:	e0bfff17 	ldw	r2,-4(fp)
81128824:	1000021e 	bne	r2,zero,81128830 <OSMutexDel+0x3c>
        return (pevent);
81128828:	e0bffd17 	ldw	r2,-12(fp)
8112882c:	0000ad06 	br	81128ae4 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81128830:	e0bffd17 	ldw	r2,-12(fp)
81128834:	1000051e 	bne	r2,zero,8112884c <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81128838:	e0bfff17 	ldw	r2,-4(fp)
8112883c:	00c00104 	movi	r3,4
81128840:	10c00005 	stb	r3,0(r2)
        return (pevent);
81128844:	e0bffd17 	ldw	r2,-12(fp)
81128848:	0000a606 	br	81128ae4 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112884c:	e0bffd17 	ldw	r2,-12(fp)
81128850:	10800003 	ldbu	r2,0(r2)
81128854:	10803fcc 	andi	r2,r2,255
81128858:	10800120 	cmpeqi	r2,r2,4
8112885c:	1000051e 	bne	r2,zero,81128874 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81128860:	e0bfff17 	ldw	r2,-4(fp)
81128864:	00c00044 	movi	r3,1
81128868:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112886c:	e0bffd17 	ldw	r2,-12(fp)
81128870:	00009c06 	br	81128ae4 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81128874:	d0a08f03 	ldbu	r2,-32196(gp)
81128878:	10803fcc 	andi	r2,r2,255
8112887c:	10000526 	beq	r2,zero,81128894 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
81128880:	e0bfff17 	ldw	r2,-4(fp)
81128884:	00c003c4 	movi	r3,15
81128888:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112888c:	e0bffd17 	ldw	r2,-12(fp)
81128890:	00009406 	br	81128ae4 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128894:	0005303a 	rdctl	r2,status
81128898:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112889c:	e0fffc17 	ldw	r3,-16(fp)
811288a0:	00bfff84 	movi	r2,-2
811288a4:	1884703a 	and	r2,r3,r2
811288a8:	1001703a 	wrctl	status,r2
  
  return context;
811288ac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811288b0:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
811288b4:	e0bffd17 	ldw	r2,-12(fp)
811288b8:	10800283 	ldbu	r2,10(r2)
811288bc:	10803fcc 	andi	r2,r2,255
811288c0:	10000326 	beq	r2,zero,811288d0 <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
811288c4:	00800044 	movi	r2,1
811288c8:	e0bff205 	stb	r2,-56(fp)
811288cc:	00000106 	br	811288d4 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
811288d0:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
811288d4:	e0bffe03 	ldbu	r2,-8(fp)
811288d8:	10000326 	beq	r2,zero,811288e8 <OSMutexDel+0xf4>
811288dc:	10800060 	cmpeqi	r2,r2,1
811288e0:	10002f1e 	bne	r2,zero,811289a0 <OSMutexDel+0x1ac>
811288e4:	00007406 	br	81128ab8 <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
811288e8:	e0bff203 	ldbu	r2,-56(fp)
811288ec:	1000221e 	bne	r2,zero,81128978 <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
811288f0:	e0bffd17 	ldw	r2,-12(fp)
811288f4:	00c00fc4 	movi	r3,63
811288f8:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
811288fc:	e0bffd17 	ldw	r2,-12(fp)
81128900:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
81128904:	e0bffd17 	ldw	r2,-12(fp)
81128908:	1080020b 	ldhu	r2,8(r2)
8112890c:	10bfffcc 	andi	r2,r2,65535
81128910:	1004d23a 	srli	r2,r2,8
81128914:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
81128918:	e0fff603 	ldbu	r3,-40(fp)
8112891c:	00a045b4 	movhi	r2,33046
81128920:	10904e04 	addi	r2,r2,16696
81128924:	18c7883a 	add	r3,r3,r3
81128928:	18c7883a 	add	r3,r3,r3
8112892c:	10c5883a 	add	r2,r2,r3
81128930:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
81128934:	e0bffd17 	ldw	r2,-12(fp)
81128938:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112893c:	d0e08e17 	ldw	r3,-32200(gp)
81128940:	e0bffd17 	ldw	r2,-12(fp)
81128944:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
81128948:	e0bffd17 	ldw	r2,-12(fp)
8112894c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
81128950:	e0bffd17 	ldw	r2,-12(fp)
81128954:	d0a08e15 	stw	r2,-32200(gp)
81128958:	e0bff417 	ldw	r2,-48(fp)
8112895c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128960:	e0bff517 	ldw	r2,-44(fp)
81128964:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
81128968:	e0bfff17 	ldw	r2,-4(fp)
8112896c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
81128970:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
81128974:	00005a06 	br	81128ae0 <OSMutexDel+0x2ec>
81128978:	e0bff417 	ldw	r2,-48(fp)
8112897c:	e0bff715 	stw	r2,-36(fp)
81128980:	e0bff717 	ldw	r2,-36(fp)
81128984:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
81128988:	e0bfff17 	ldw	r2,-4(fp)
8112898c:	00c01244 	movi	r3,73
81128990:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
81128994:	e0bffd17 	ldw	r2,-12(fp)
81128998:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112899c:	00005006 	br	81128ae0 <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
811289a0:	e0bffd17 	ldw	r2,-12(fp)
811289a4:	1080020b 	ldhu	r2,8(r2)
811289a8:	10bfffcc 	andi	r2,r2,65535
811289ac:	1004d23a 	srli	r2,r2,8
811289b0:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
811289b4:	e0bffd17 	ldw	r2,-12(fp)
811289b8:	1080020b 	ldhu	r2,8(r2)
811289bc:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
811289c0:	e0bffd17 	ldw	r2,-12(fp)
811289c4:	10800117 	ldw	r2,4(r2)
811289c8:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
811289cc:	e0bffa17 	ldw	r2,-24(fp)
811289d0:	10000f26 	beq	r2,zero,81128a10 <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
811289d4:	e0bffa17 	ldw	r2,-24(fp)
811289d8:	10800c83 	ldbu	r2,50(r2)
811289dc:	10c03fcc 	andi	r3,r2,255
811289e0:	e0bff603 	ldbu	r2,-40(fp)
811289e4:	18800a1e 	bne	r3,r2,81128a10 <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
811289e8:	e0bff903 	ldbu	r2,-28(fp)
811289ec:	100b883a 	mov	r5,r2
811289f0:	e13ffa17 	ldw	r4,-24(fp)
811289f4:	11294300 	call	81129430 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
811289f8:	00000506 	br	81128a10 <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
811289fc:	000f883a 	mov	r7,zero
81128a00:	01800404 	movi	r6,16
81128a04:	000b883a 	mov	r5,zero
81128a08:	e13ffd17 	ldw	r4,-12(fp)
81128a0c:	11251980 	call	81125198 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
81128a10:	e0bffd17 	ldw	r2,-12(fp)
81128a14:	10800283 	ldbu	r2,10(r2)
81128a18:	10803fcc 	andi	r2,r2,255
81128a1c:	103ff71e 	bne	r2,zero,811289fc <__reset+0xfb1089fc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81128a20:	e0bffd17 	ldw	r2,-12(fp)
81128a24:	00c00fc4 	movi	r3,63
81128a28:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81128a2c:	e0bffd17 	ldw	r2,-12(fp)
81128a30:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
81128a34:	e0bffd17 	ldw	r2,-12(fp)
81128a38:	1080020b 	ldhu	r2,8(r2)
81128a3c:	10bfffcc 	andi	r2,r2,65535
81128a40:	1004d23a 	srli	r2,r2,8
81128a44:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
81128a48:	e0fff603 	ldbu	r3,-40(fp)
81128a4c:	00a045b4 	movhi	r2,33046
81128a50:	10904e04 	addi	r2,r2,16696
81128a54:	18c7883a 	add	r3,r3,r3
81128a58:	18c7883a 	add	r3,r3,r3
81128a5c:	10c5883a 	add	r2,r2,r3
81128a60:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
81128a64:	e0bffd17 	ldw	r2,-12(fp)
81128a68:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
81128a6c:	d0e08e17 	ldw	r3,-32200(gp)
81128a70:	e0bffd17 	ldw	r2,-12(fp)
81128a74:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
81128a78:	e0bffd17 	ldw	r2,-12(fp)
81128a7c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
81128a80:	e0bffd17 	ldw	r2,-12(fp)
81128a84:	d0a08e15 	stw	r2,-32200(gp)
81128a88:	e0bff417 	ldw	r2,-48(fp)
81128a8c:	e0bff815 	stw	r2,-32(fp)
81128a90:	e0bff817 	ldw	r2,-32(fp)
81128a94:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81128a98:	e0bff203 	ldbu	r2,-56(fp)
81128a9c:	10800058 	cmpnei	r2,r2,1
81128aa0:	1000011e 	bne	r2,zero,81128aa8 <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81128aa4:	1125c540 	call	81125c54 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
81128aa8:	e0bfff17 	ldw	r2,-4(fp)
81128aac:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
81128ab0:	e03ff315 	stw	zero,-52(fp)
             break;
81128ab4:	00000a06 	br	81128ae0 <OSMutexDel+0x2ec>
81128ab8:	e0bff417 	ldw	r2,-48(fp)
81128abc:	e0bffb15 	stw	r2,-20(fp)
81128ac0:	e0bffb17 	ldw	r2,-20(fp)
81128ac4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
81128ac8:	e0bfff17 	ldw	r2,-4(fp)
81128acc:	00c001c4 	movi	r3,7
81128ad0:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
81128ad4:	e0bffd17 	ldw	r2,-12(fp)
81128ad8:	e0bff315 	stw	r2,-52(fp)
             break;
81128adc:	0001883a 	nop
    }
    return (pevent_return);
81128ae0:	e0bff317 	ldw	r2,-52(fp)
}
81128ae4:	e037883a 	mov	sp,fp
81128ae8:	dfc00117 	ldw	ra,4(sp)
81128aec:	df000017 	ldw	fp,0(sp)
81128af0:	dec00204 	addi	sp,sp,8
81128af4:	f800283a 	ret

81128af8 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81128af8:	deffee04 	addi	sp,sp,-72
81128afc:	de00012e 	bgeu	sp,et,81128b04 <OSMutexPend+0xc>
81128b00:	003b68fa 	trap	3
81128b04:	dfc01115 	stw	ra,68(sp)
81128b08:	df001015 	stw	fp,64(sp)
81128b0c:	df001004 	addi	fp,sp,64
81128b10:	e13ffd15 	stw	r4,-12(fp)
81128b14:	2805883a 	mov	r2,r5
81128b18:	e1bfff15 	stw	r6,-4(fp)
81128b1c:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81128b20:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81128b24:	e0bfff17 	ldw	r2,-4(fp)
81128b28:	10015626 	beq	r2,zero,81129084 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81128b2c:	e0bffd17 	ldw	r2,-12(fp)
81128b30:	1000041e 	bne	r2,zero,81128b44 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81128b34:	e0bfff17 	ldw	r2,-4(fp)
81128b38:	00c00104 	movi	r3,4
81128b3c:	10c00005 	stb	r3,0(r2)
        return;
81128b40:	00015106 	br	81129088 <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
81128b44:	e0bffd17 	ldw	r2,-12(fp)
81128b48:	10800003 	ldbu	r2,0(r2)
81128b4c:	10803fcc 	andi	r2,r2,255
81128b50:	10800120 	cmpeqi	r2,r2,4
81128b54:	1000041e 	bne	r2,zero,81128b68 <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
81128b58:	e0bfff17 	ldw	r2,-4(fp)
81128b5c:	00c00044 	movi	r3,1
81128b60:	10c00005 	stb	r3,0(r2)
        return;
81128b64:	00014806 	br	81129088 <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81128b68:	d0a08f03 	ldbu	r2,-32196(gp)
81128b6c:	10803fcc 	andi	r2,r2,255
81128b70:	10000426 	beq	r2,zero,81128b84 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
81128b74:	e0bfff17 	ldw	r2,-4(fp)
81128b78:	00c00084 	movi	r3,2
81128b7c:	10c00005 	stb	r3,0(r2)
        return;
81128b80:	00014106 	br	81129088 <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
81128b84:	d0a07d03 	ldbu	r2,-32268(gp)
81128b88:	10803fcc 	andi	r2,r2,255
81128b8c:	10000426 	beq	r2,zero,81128ba0 <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
81128b90:	e0bfff17 	ldw	r2,-4(fp)
81128b94:	00c00344 	movi	r3,13
81128b98:	10c00005 	stb	r3,0(r2)
        return;
81128b9c:	00013a06 	br	81129088 <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128ba0:	0005303a 	rdctl	r2,status
81128ba4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128ba8:	e0fffc17 	ldw	r3,-16(fp)
81128bac:	00bfff84 	movi	r2,-2
81128bb0:	1884703a 	and	r2,r3,r2
81128bb4:	1001703a 	wrctl	status,r2
  
  return context;
81128bb8:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81128bbc:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
81128bc0:	e0bffd17 	ldw	r2,-12(fp)
81128bc4:	1080020b 	ldhu	r2,8(r2)
81128bc8:	10bfffcc 	andi	r2,r2,65535
81128bcc:	1004d23a 	srli	r2,r2,8
81128bd0:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
81128bd4:	e0bffd17 	ldw	r2,-12(fp)
81128bd8:	1080020b 	ldhu	r2,8(r2)
81128bdc:	10803fcc 	andi	r2,r2,255
81128be0:	10803fd8 	cmpnei	r2,r2,255
81128be4:	1000271e 	bne	r2,zero,81128c84 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
81128be8:	e0bffd17 	ldw	r2,-12(fp)
81128bec:	10c0020b 	ldhu	r3,8(r2)
81128bf0:	00bfc004 	movi	r2,-256
81128bf4:	1884703a 	and	r2,r3,r2
81128bf8:	1007883a 	mov	r3,r2
81128bfc:	e0bffd17 	ldw	r2,-12(fp)
81128c00:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
81128c04:	e0bffd17 	ldw	r2,-12(fp)
81128c08:	10c0020b 	ldhu	r3,8(r2)
81128c0c:	d0a09017 	ldw	r2,-32192(gp)
81128c10:	10800c83 	ldbu	r2,50(r2)
81128c14:	10803fcc 	andi	r2,r2,255
81128c18:	1884b03a 	or	r2,r3,r2
81128c1c:	1007883a 	mov	r3,r2
81128c20:	e0bffd17 	ldw	r2,-12(fp)
81128c24:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
81128c28:	d0e09017 	ldw	r3,-32192(gp)
81128c2c:	e0bffd17 	ldw	r2,-12(fp)
81128c30:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
81128c34:	d0a09017 	ldw	r2,-32192(gp)
81128c38:	10800c83 	ldbu	r2,50(r2)
81128c3c:	10803fcc 	andi	r2,r2,255
81128c40:	e0fff303 	ldbu	r3,-52(fp)
81128c44:	18800836 	bltu	r3,r2,81128c68 <OSMutexPend+0x170>
81128c48:	e0bff117 	ldw	r2,-60(fp)
81128c4c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128c50:	e0bff217 	ldw	r2,-56(fp)
81128c54:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
81128c58:	e0bfff17 	ldw	r2,-4(fp)
81128c5c:	00c01e04 	movi	r3,120
81128c60:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
81128c64:	00010806 	br	81129088 <OSMutexPend+0x590>
81128c68:	e0bff117 	ldw	r2,-60(fp)
81128c6c:	e0bff415 	stw	r2,-48(fp)
81128c70:	e0bff417 	ldw	r2,-48(fp)
81128c74:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
81128c78:	e0bfff17 	ldw	r2,-4(fp)
81128c7c:	10000005 	stb	zero,0(r2)
        }
        return;
81128c80:	00010106 	br	81129088 <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
81128c84:	e0bffd17 	ldw	r2,-12(fp)
81128c88:	1080020b 	ldhu	r2,8(r2)
81128c8c:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
81128c90:	e0bffd17 	ldw	r2,-12(fp)
81128c94:	10800117 	ldw	r2,4(r2)
81128c98:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
81128c9c:	e0bff717 	ldw	r2,-36(fp)
81128ca0:	10800c83 	ldbu	r2,50(r2)
81128ca4:	10803fcc 	andi	r2,r2,255
81128ca8:	e0fff303 	ldbu	r3,-52(fp)
81128cac:	1880b92e 	bgeu	r3,r2,81128f94 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
81128cb0:	d0a09017 	ldw	r2,-32192(gp)
81128cb4:	10800c83 	ldbu	r2,50(r2)
81128cb8:	10c03fcc 	andi	r3,r2,255
81128cbc:	e0bff603 	ldbu	r2,-40(fp)
81128cc0:	1880b42e 	bgeu	r3,r2,81128f94 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
81128cc4:	e0bff717 	ldw	r2,-36(fp)
81128cc8:	10800d03 	ldbu	r2,52(r2)
81128ccc:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
81128cd0:	e0fff803 	ldbu	r3,-32(fp)
81128cd4:	d0a08c44 	addi	r2,gp,-32207
81128cd8:	1885883a 	add	r2,r3,r2
81128cdc:	10c00003 	ldbu	r3,0(r2)
81128ce0:	e0bff717 	ldw	r2,-36(fp)
81128ce4:	10800d43 	ldbu	r2,53(r2)
81128ce8:	1884703a 	and	r2,r3,r2
81128cec:	10803fcc 	andi	r2,r2,255
81128cf0:	10001e26 	beq	r2,zero,81128d6c <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
81128cf4:	e0fff803 	ldbu	r3,-32(fp)
81128cf8:	e13ff803 	ldbu	r4,-32(fp)
81128cfc:	d0a08c44 	addi	r2,gp,-32207
81128d00:	2085883a 	add	r2,r4,r2
81128d04:	10800003 	ldbu	r2,0(r2)
81128d08:	1009883a 	mov	r4,r2
81128d0c:	e0bff717 	ldw	r2,-36(fp)
81128d10:	10800d43 	ldbu	r2,53(r2)
81128d14:	0084303a 	nor	r2,zero,r2
81128d18:	2084703a 	and	r2,r4,r2
81128d1c:	1009883a 	mov	r4,r2
81128d20:	d0a08c44 	addi	r2,gp,-32207
81128d24:	1885883a 	add	r2,r3,r2
81128d28:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
81128d2c:	e0fff803 	ldbu	r3,-32(fp)
81128d30:	d0a08c44 	addi	r2,gp,-32207
81128d34:	1885883a 	add	r2,r3,r2
81128d38:	10800003 	ldbu	r2,0(r2)
81128d3c:	10803fcc 	andi	r2,r2,255
81128d40:	1000071e 	bne	r2,zero,81128d60 <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
81128d44:	e0bff717 	ldw	r2,-36(fp)
81128d48:	10800d83 	ldbu	r2,54(r2)
81128d4c:	0084303a 	nor	r2,zero,r2
81128d50:	1007883a 	mov	r3,r2
81128d54:	d0a08c03 	ldbu	r2,-32208(gp)
81128d58:	1884703a 	and	r2,r3,r2
81128d5c:	d0a08c05 	stb	r2,-32208(gp)
                }
                rdy = OS_TRUE;
81128d60:	00800044 	movi	r2,1
81128d64:	e0bff005 	stb	r2,-64(fp)
81128d68:	00002a06 	br	81128e14 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
81128d6c:	e0bff717 	ldw	r2,-36(fp)
81128d70:	10800717 	ldw	r2,28(r2)
81128d74:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
81128d78:	e0bff917 	ldw	r2,-28(fp)
81128d7c:	10002426 	beq	r2,zero,81128e10 <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
81128d80:	e0bff717 	ldw	r2,-36(fp)
81128d84:	10800d03 	ldbu	r2,52(r2)
81128d88:	10803fcc 	andi	r2,r2,255
81128d8c:	e0fff717 	ldw	r3,-36(fp)
81128d90:	18c00d03 	ldbu	r3,52(r3)
81128d94:	18c03fcc 	andi	r3,r3,255
81128d98:	e13ff917 	ldw	r4,-28(fp)
81128d9c:	20c7883a 	add	r3,r4,r3
81128da0:	18c002c4 	addi	r3,r3,11
81128da4:	18c00003 	ldbu	r3,0(r3)
81128da8:	1809883a 	mov	r4,r3
81128dac:	e0fff717 	ldw	r3,-36(fp)
81128db0:	18c00d43 	ldbu	r3,53(r3)
81128db4:	00c6303a 	nor	r3,zero,r3
81128db8:	20c6703a 	and	r3,r4,r3
81128dbc:	1809883a 	mov	r4,r3
81128dc0:	e0fff917 	ldw	r3,-28(fp)
81128dc4:	1887883a 	add	r3,r3,r2
81128dc8:	18c002c4 	addi	r3,r3,11
81128dcc:	19000005 	stb	r4,0(r3)
81128dd0:	e0fff917 	ldw	r3,-28(fp)
81128dd4:	1885883a 	add	r2,r3,r2
81128dd8:	108002c4 	addi	r2,r2,11
81128ddc:	10800003 	ldbu	r2,0(r2)
81128de0:	10803fcc 	andi	r2,r2,255
81128de4:	10000a1e 	bne	r2,zero,81128e10 <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
81128de8:	e0bff917 	ldw	r2,-28(fp)
81128dec:	10800283 	ldbu	r2,10(r2)
81128df0:	1007883a 	mov	r3,r2
81128df4:	e0bff717 	ldw	r2,-36(fp)
81128df8:	10800d83 	ldbu	r2,54(r2)
81128dfc:	0084303a 	nor	r2,zero,r2
81128e00:	1884703a 	and	r2,r3,r2
81128e04:	1007883a 	mov	r3,r2
81128e08:	e0bff917 	ldw	r2,-28(fp)
81128e0c:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
81128e10:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
81128e14:	e0bff717 	ldw	r2,-36(fp)
81128e18:	e0fff303 	ldbu	r3,-52(fp)
81128e1c:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
81128e20:	e0bff717 	ldw	r2,-36(fp)
81128e24:	10800c83 	ldbu	r2,50(r2)
81128e28:	10803fcc 	andi	r2,r2,255
81128e2c:	1004d0fa 	srli	r2,r2,3
81128e30:	1007883a 	mov	r3,r2
81128e34:	e0bff717 	ldw	r2,-36(fp)
81128e38:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
81128e3c:	e0bff717 	ldw	r2,-36(fp)
81128e40:	10800c83 	ldbu	r2,50(r2)
81128e44:	108001cc 	andi	r2,r2,7
81128e48:	1007883a 	mov	r3,r2
81128e4c:	e0bff717 	ldw	r2,-36(fp)
81128e50:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
81128e54:	e0bff717 	ldw	r2,-36(fp)
81128e58:	10800d03 	ldbu	r2,52(r2)
81128e5c:	10803fcc 	andi	r2,r2,255
81128e60:	00c00044 	movi	r3,1
81128e64:	1884983a 	sll	r2,r3,r2
81128e68:	1007883a 	mov	r3,r2
81128e6c:	e0bff717 	ldw	r2,-36(fp)
81128e70:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
81128e74:	e0bff717 	ldw	r2,-36(fp)
81128e78:	10800cc3 	ldbu	r2,51(r2)
81128e7c:	10803fcc 	andi	r2,r2,255
81128e80:	00c00044 	movi	r3,1
81128e84:	1884983a 	sll	r2,r3,r2
81128e88:	1007883a 	mov	r3,r2
81128e8c:	e0bff717 	ldw	r2,-36(fp)
81128e90:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
81128e94:	e0bff003 	ldbu	r2,-64(fp)
81128e98:	10800058 	cmpnei	r2,r2,1
81128e9c:	1000161e 	bne	r2,zero,81128ef8 <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
81128ea0:	e0bff717 	ldw	r2,-36(fp)
81128ea4:	10c00d83 	ldbu	r3,54(r2)
81128ea8:	d0a08c03 	ldbu	r2,-32208(gp)
81128eac:	1884b03a 	or	r2,r3,r2
81128eb0:	d0a08c05 	stb	r2,-32208(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81128eb4:	e0bff717 	ldw	r2,-36(fp)
81128eb8:	10800d03 	ldbu	r2,52(r2)
81128ebc:	10c03fcc 	andi	r3,r2,255
81128ec0:	e0bff717 	ldw	r2,-36(fp)
81128ec4:	10800d03 	ldbu	r2,52(r2)
81128ec8:	11003fcc 	andi	r4,r2,255
81128ecc:	d0a08c44 	addi	r2,gp,-32207
81128ed0:	2085883a 	add	r2,r4,r2
81128ed4:	11000003 	ldbu	r4,0(r2)
81128ed8:	e0bff717 	ldw	r2,-36(fp)
81128edc:	10800d43 	ldbu	r2,53(r2)
81128ee0:	2084b03a 	or	r2,r4,r2
81128ee4:	1009883a 	mov	r4,r2
81128ee8:	d0a08c44 	addi	r2,gp,-32207
81128eec:	1885883a 	add	r2,r3,r2
81128ef0:	11000005 	stb	r4,0(r2)
81128ef4:	00001f06 	br	81128f74 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
81128ef8:	e0bff717 	ldw	r2,-36(fp)
81128efc:	10800717 	ldw	r2,28(r2)
81128f00:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
81128f04:	e0bff917 	ldw	r2,-28(fp)
81128f08:	10001a26 	beq	r2,zero,81128f74 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
81128f0c:	e0bff917 	ldw	r2,-28(fp)
81128f10:	10c00283 	ldbu	r3,10(r2)
81128f14:	e0bff717 	ldw	r2,-36(fp)
81128f18:	10800d83 	ldbu	r2,54(r2)
81128f1c:	1884b03a 	or	r2,r3,r2
81128f20:	1007883a 	mov	r3,r2
81128f24:	e0bff917 	ldw	r2,-28(fp)
81128f28:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81128f2c:	e0bff717 	ldw	r2,-36(fp)
81128f30:	10800d03 	ldbu	r2,52(r2)
81128f34:	10803fcc 	andi	r2,r2,255
81128f38:	e0fff717 	ldw	r3,-36(fp)
81128f3c:	18c00d03 	ldbu	r3,52(r3)
81128f40:	18c03fcc 	andi	r3,r3,255
81128f44:	e13ff917 	ldw	r4,-28(fp)
81128f48:	20c7883a 	add	r3,r4,r3
81128f4c:	18c002c4 	addi	r3,r3,11
81128f50:	19000003 	ldbu	r4,0(r3)
81128f54:	e0fff717 	ldw	r3,-36(fp)
81128f58:	18c00d43 	ldbu	r3,53(r3)
81128f5c:	20c6b03a 	or	r3,r4,r3
81128f60:	1809883a 	mov	r4,r3
81128f64:	e0fff917 	ldw	r3,-28(fp)
81128f68:	1885883a 	add	r2,r3,r2
81128f6c:	108002c4 	addi	r2,r2,11
81128f70:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
81128f74:	e0fff303 	ldbu	r3,-52(fp)
81128f78:	00a045b4 	movhi	r2,33046
81128f7c:	10904e04 	addi	r2,r2,16696
81128f80:	18c7883a 	add	r3,r3,r3
81128f84:	18c7883a 	add	r3,r3,r3
81128f88:	10c5883a 	add	r2,r2,r3
81128f8c:	e0fff717 	ldw	r3,-36(fp)
81128f90:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
81128f94:	d0a09017 	ldw	r2,-32192(gp)
81128f98:	d0e09017 	ldw	r3,-32192(gp)
81128f9c:	18c00c03 	ldbu	r3,48(r3)
81128fa0:	18c00414 	ori	r3,r3,16
81128fa4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81128fa8:	d0a09017 	ldw	r2,-32192(gp)
81128fac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
81128fb0:	d0a09017 	ldw	r2,-32192(gp)
81128fb4:	e0fffe0b 	ldhu	r3,-8(fp)
81128fb8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
81128fbc:	e13ffd17 	ldw	r4,-12(fp)
81128fc0:	11253380 	call	81125338 <OS_EventTaskWait>
81128fc4:	e0bff117 	ldw	r2,-60(fp)
81128fc8:	e0bffb15 	stw	r2,-20(fp)
81128fcc:	e0bffb17 	ldw	r2,-20(fp)
81128fd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81128fd4:	1125c540 	call	81125c54 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128fd8:	0005303a 	rdctl	r2,status
81128fdc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128fe0:	e0fff517 	ldw	r3,-44(fp)
81128fe4:	00bfff84 	movi	r2,-2
81128fe8:	1884703a 	and	r2,r3,r2
81128fec:	1001703a 	wrctl	status,r2
  
  return context;
81128ff0:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
81128ff4:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81128ff8:	d0a09017 	ldw	r2,-32192(gp)
81128ffc:	10800c43 	ldbu	r2,49(r2)
81129000:	10803fcc 	andi	r2,r2,255
81129004:	10000326 	beq	r2,zero,81129014 <OSMutexPend+0x51c>
81129008:	108000a0 	cmpeqi	r2,r2,2
8112900c:	1000041e 	bne	r2,zero,81129020 <OSMutexPend+0x528>
81129010:	00000706 	br	81129030 <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81129014:	e0bfff17 	ldw	r2,-4(fp)
81129018:	10000005 	stb	zero,0(r2)
             break;
8112901c:	00000c06 	br	81129050 <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
81129020:	e0bfff17 	ldw	r2,-4(fp)
81129024:	00c00384 	movi	r3,14
81129028:	10c00005 	stb	r3,0(r2)
             break;
8112902c:	00000806 	br	81129050 <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
81129030:	d0a09017 	ldw	r2,-32192(gp)
81129034:	e17ffd17 	ldw	r5,-12(fp)
81129038:	1009883a 	mov	r4,r2
8112903c:	11255a80 	call	811255a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
81129040:	e0bfff17 	ldw	r2,-4(fp)
81129044:	00c00284 	movi	r3,10
81129048:	10c00005 	stb	r3,0(r2)
             break;
8112904c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81129050:	d0a09017 	ldw	r2,-32192(gp)
81129054:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81129058:	d0a09017 	ldw	r2,-32192(gp)
8112905c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81129060:	d0a09017 	ldw	r2,-32192(gp)
81129064:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81129068:	d0a09017 	ldw	r2,-32192(gp)
8112906c:	10000815 	stw	zero,32(r2)
81129070:	e0bff117 	ldw	r2,-60(fp)
81129074:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129078:	e0bffa17 	ldw	r2,-24(fp)
8112907c:	1001703a 	wrctl	status,r2
81129080:	00000106 	br	81129088 <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
81129084:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
81129088:	e037883a 	mov	sp,fp
8112908c:	dfc00117 	ldw	ra,4(sp)
81129090:	df000017 	ldw	fp,0(sp)
81129094:	dec00204 	addi	sp,sp,8
81129098:	f800283a 	ret

8112909c <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
8112909c:	defff604 	addi	sp,sp,-40
811290a0:	de00012e 	bgeu	sp,et,811290a8 <OSMutexPost+0xc>
811290a4:	003b68fa 	trap	3
811290a8:	dfc00915 	stw	ra,36(sp)
811290ac:	df000815 	stw	fp,32(sp)
811290b0:	df000804 	addi	fp,sp,32
811290b4:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811290b8:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
811290bc:	d0a08f03 	ldbu	r2,-32196(gp)
811290c0:	10803fcc 	andi	r2,r2,255
811290c4:	10000226 	beq	r2,zero,811290d0 <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
811290c8:	00800144 	movi	r2,5
811290cc:	00007606 	br	811292a8 <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811290d0:	e0bfff17 	ldw	r2,-4(fp)
811290d4:	1000021e 	bne	r2,zero,811290e0 <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
811290d8:	00800104 	movi	r2,4
811290dc:	00007206 	br	811292a8 <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
811290e0:	e0bfff17 	ldw	r2,-4(fp)
811290e4:	10800003 	ldbu	r2,0(r2)
811290e8:	10803fcc 	andi	r2,r2,255
811290ec:	10800120 	cmpeqi	r2,r2,4
811290f0:	1000021e 	bne	r2,zero,811290fc <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
811290f4:	00800044 	movi	r2,1
811290f8:	00006b06 	br	811292a8 <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811290fc:	0005303a 	rdctl	r2,status
81129100:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129104:	e0fffe17 	ldw	r3,-8(fp)
81129108:	00bfff84 	movi	r2,-2
8112910c:	1884703a 	and	r2,r3,r2
81129110:	1001703a 	wrctl	status,r2
  
  return context;
81129114:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81129118:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
8112911c:	e0bfff17 	ldw	r2,-4(fp)
81129120:	1080020b 	ldhu	r2,8(r2)
81129124:	10bfffcc 	andi	r2,r2,65535
81129128:	1004d23a 	srli	r2,r2,8
8112912c:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
81129130:	e0bfff17 	ldw	r2,-4(fp)
81129134:	1080020b 	ldhu	r2,8(r2)
81129138:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
8112913c:	e0bfff17 	ldw	r2,-4(fp)
81129140:	10c00117 	ldw	r3,4(r2)
81129144:	d0a09017 	ldw	r2,-32192(gp)
81129148:	18800626 	beq	r3,r2,81129164 <OSMutexPost+0xc8>
8112914c:	e0bff817 	ldw	r2,-32(fp)
81129150:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129154:	e0bff917 	ldw	r2,-28(fp)
81129158:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
8112915c:	00801904 	movi	r2,100
81129160:	00005106 	br	811292a8 <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
81129164:	d0a09017 	ldw	r2,-32192(gp)
81129168:	10800c83 	ldbu	r2,50(r2)
8112916c:	10c03fcc 	andi	r3,r2,255
81129170:	e0bffa03 	ldbu	r2,-24(fp)
81129174:	1880051e 	bne	r3,r2,8112918c <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
81129178:	d0a09017 	ldw	r2,-32192(gp)
8112917c:	e0fffa43 	ldbu	r3,-23(fp)
81129180:	180b883a 	mov	r5,r3
81129184:	1009883a 	mov	r4,r2
81129188:	11294300 	call	81129430 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
8112918c:	e0fffa03 	ldbu	r3,-24(fp)
81129190:	00a045b4 	movhi	r2,33046
81129194:	10904e04 	addi	r2,r2,16696
81129198:	18c7883a 	add	r3,r3,r3
8112919c:	18c7883a 	add	r3,r3,r3
811291a0:	10c5883a 	add	r2,r2,r3
811291a4:	00c00044 	movi	r3,1
811291a8:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
811291ac:	e0bfff17 	ldw	r2,-4(fp)
811291b0:	10800283 	ldbu	r2,10(r2)
811291b4:	10803fcc 	andi	r2,r2,255
811291b8:	10002e26 	beq	r2,zero,81129274 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
811291bc:	000f883a 	mov	r7,zero
811291c0:	01800404 	movi	r6,16
811291c4:	000b883a 	mov	r5,zero
811291c8:	e13fff17 	ldw	r4,-4(fp)
811291cc:	11251980 	call	81125198 <OS_EventTaskRdy>
811291d0:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
811291d4:	e0bfff17 	ldw	r2,-4(fp)
811291d8:	10c0020b 	ldhu	r3,8(r2)
811291dc:	00bfc004 	movi	r2,-256
811291e0:	1884703a 	and	r2,r3,r2
811291e4:	1007883a 	mov	r3,r2
811291e8:	e0bfff17 	ldw	r2,-4(fp)
811291ec:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
811291f0:	e0bfff17 	ldw	r2,-4(fp)
811291f4:	10c0020b 	ldhu	r3,8(r2)
811291f8:	e0bffa43 	ldbu	r2,-23(fp)
811291fc:	1884b03a 	or	r2,r3,r2
81129200:	1007883a 	mov	r3,r2
81129204:	e0bfff17 	ldw	r2,-4(fp)
81129208:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
8112920c:	e0fffa43 	ldbu	r3,-23(fp)
81129210:	00a045b4 	movhi	r2,33046
81129214:	10904e04 	addi	r2,r2,16696
81129218:	18c7883a 	add	r3,r3,r3
8112921c:	18c7883a 	add	r3,r3,r3
81129220:	10c5883a 	add	r2,r2,r3
81129224:	10c00017 	ldw	r3,0(r2)
81129228:	e0bfff17 	ldw	r2,-4(fp)
8112922c:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
81129230:	e0bffa43 	ldbu	r2,-23(fp)
81129234:	e0fffa03 	ldbu	r3,-24(fp)
81129238:	18800736 	bltu	r3,r2,81129258 <OSMutexPost+0x1bc>
8112923c:	e0bff817 	ldw	r2,-32(fp)
81129240:	e0bffb15 	stw	r2,-20(fp)
81129244:	e0bffb17 	ldw	r2,-20(fp)
81129248:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112924c:	1125c540 	call	81125c54 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
81129250:	00801e04 	movi	r2,120
81129254:	00001406 	br	811292a8 <OSMutexPost+0x20c>
81129258:	e0bff817 	ldw	r2,-32(fp)
8112925c:	e0bffc15 	stw	r2,-16(fp)
81129260:	e0bffc17 	ldw	r2,-16(fp)
81129264:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
81129268:	1125c540 	call	81125c54 <OS_Sched>
            return (OS_ERR_NONE);
8112926c:	0005883a 	mov	r2,zero
81129270:	00000d06 	br	811292a8 <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
81129274:	e0bfff17 	ldw	r2,-4(fp)
81129278:	1080020b 	ldhu	r2,8(r2)
8112927c:	10803fd4 	ori	r2,r2,255
81129280:	1007883a 	mov	r3,r2
81129284:	e0bfff17 	ldw	r2,-4(fp)
81129288:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
8112928c:	e0bfff17 	ldw	r2,-4(fp)
81129290:	10000115 	stw	zero,4(r2)
81129294:	e0bff817 	ldw	r2,-32(fp)
81129298:	e0bffd15 	stw	r2,-12(fp)
8112929c:	e0bffd17 	ldw	r2,-12(fp)
811292a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811292a4:	0005883a 	mov	r2,zero
}
811292a8:	e037883a 	mov	sp,fp
811292ac:	dfc00117 	ldw	ra,4(sp)
811292b0:	df000017 	ldw	fp,0(sp)
811292b4:	dec00204 	addi	sp,sp,8
811292b8:	f800283a 	ret

811292bc <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
811292bc:	defff704 	addi	sp,sp,-36
811292c0:	de00012e 	bgeu	sp,et,811292c8 <OSMutexQuery+0xc>
811292c4:	003b68fa 	trap	3
811292c8:	df000815 	stw	fp,32(sp)
811292cc:	df000804 	addi	fp,sp,32
811292d0:	e13ffe15 	stw	r4,-8(fp)
811292d4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811292d8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811292dc:	d0a08f03 	ldbu	r2,-32196(gp)
811292e0:	10803fcc 	andi	r2,r2,255
811292e4:	10000226 	beq	r2,zero,811292f0 <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
811292e8:	00800184 	movi	r2,6
811292ec:	00004c06 	br	81129420 <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
811292f0:	e0bffe17 	ldw	r2,-8(fp)
811292f4:	1000021e 	bne	r2,zero,81129300 <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
811292f8:	00800104 	movi	r2,4
811292fc:	00004806 	br	81129420 <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
81129300:	e0bfff17 	ldw	r2,-4(fp)
81129304:	1000021e 	bne	r2,zero,81129310 <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
81129308:	00800244 	movi	r2,9
8112930c:	00004406 	br	81129420 <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
81129310:	e0bffe17 	ldw	r2,-8(fp)
81129314:	10800003 	ldbu	r2,0(r2)
81129318:	10803fcc 	andi	r2,r2,255
8112931c:	10800120 	cmpeqi	r2,r2,4
81129320:	1000021e 	bne	r2,zero,8112932c <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
81129324:	00800044 	movi	r2,1
81129328:	00003d06 	br	81129420 <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112932c:	0005303a 	rdctl	r2,status
81129330:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129334:	e0fffd17 	ldw	r3,-12(fp)
81129338:	00bfff84 	movi	r2,-2
8112933c:	1884703a 	and	r2,r3,r2
81129340:	1001703a 	wrctl	status,r2
  
  return context;
81129344:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81129348:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112934c:	e0bffe17 	ldw	r2,-8(fp)
81129350:	1080020b 	ldhu	r2,8(r2)
81129354:	10bfffcc 	andi	r2,r2,65535
81129358:	1004d23a 	srli	r2,r2,8
8112935c:	1007883a 	mov	r3,r2
81129360:	e0bfff17 	ldw	r2,-4(fp)
81129364:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
81129368:	e0bffe17 	ldw	r2,-8(fp)
8112936c:	1080020b 	ldhu	r2,8(r2)
81129370:	1007883a 	mov	r3,r2
81129374:	e0bfff17 	ldw	r2,-4(fp)
81129378:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112937c:	e0bfff17 	ldw	r2,-4(fp)
81129380:	10800203 	ldbu	r2,8(r2)
81129384:	10803fcc 	andi	r2,r2,255
81129388:	10803fd8 	cmpnei	r2,r2,255
8112938c:	1000041e 	bne	r2,zero,811293a0 <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
81129390:	e0bfff17 	ldw	r2,-4(fp)
81129394:	00c00044 	movi	r3,1
81129398:	10c001c5 	stb	r3,7(r2)
8112939c:	00000206 	br	811293a8 <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
811293a0:	e0bfff17 	ldw	r2,-4(fp)
811293a4:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
811293a8:	e0bffe17 	ldw	r2,-8(fp)
811293ac:	10c00283 	ldbu	r3,10(r2)
811293b0:	e0bfff17 	ldw	r2,-4(fp)
811293b4:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
811293b8:	e0bffe17 	ldw	r2,-8(fp)
811293bc:	108002c4 	addi	r2,r2,11
811293c0:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
811293c4:	e0bfff17 	ldw	r2,-4(fp)
811293c8:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811293cc:	e03ff805 	stb	zero,-32(fp)
811293d0:	00000b06 	br	81129400 <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
811293d4:	e0bffa17 	ldw	r2,-24(fp)
811293d8:	10c00044 	addi	r3,r2,1
811293dc:	e0fffa15 	stw	r3,-24(fp)
811293e0:	e0fff917 	ldw	r3,-28(fp)
811293e4:	19000044 	addi	r4,r3,1
811293e8:	e13ff915 	stw	r4,-28(fp)
811293ec:	18c00003 	ldbu	r3,0(r3)
811293f0:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
811293f4:	e0bff803 	ldbu	r2,-32(fp)
811293f8:	10800044 	addi	r2,r2,1
811293fc:	e0bff805 	stb	r2,-32(fp)
81129400:	e0bff803 	ldbu	r2,-32(fp)
81129404:	108001b0 	cmpltui	r2,r2,6
81129408:	103ff21e 	bne	r2,zero,811293d4 <__reset+0xfb1093d4>
8112940c:	e0bffb17 	ldw	r2,-20(fp)
81129410:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129414:	e0bffc17 	ldw	r2,-16(fp)
81129418:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112941c:	0005883a 	mov	r2,zero
}
81129420:	e037883a 	mov	sp,fp
81129424:	df000017 	ldw	fp,0(sp)
81129428:	dec00104 	addi	sp,sp,4
8112942c:	f800283a 	ret

81129430 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
81129430:	defffc04 	addi	sp,sp,-16
81129434:	de00012e 	bgeu	sp,et,8112943c <OSMutex_RdyAtPrio+0xc>
81129438:	003b68fa 	trap	3
8112943c:	df000315 	stw	fp,12(sp)
81129440:	df000304 	addi	fp,sp,12
81129444:	e13ffe15 	stw	r4,-8(fp)
81129448:	2805883a 	mov	r2,r5
8112944c:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
81129450:	e0bffe17 	ldw	r2,-8(fp)
81129454:	10800d03 	ldbu	r2,52(r2)
81129458:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
8112945c:	e0fffd03 	ldbu	r3,-12(fp)
81129460:	e13ffd03 	ldbu	r4,-12(fp)
81129464:	d0a08c44 	addi	r2,gp,-32207
81129468:	2085883a 	add	r2,r4,r2
8112946c:	10800003 	ldbu	r2,0(r2)
81129470:	1009883a 	mov	r4,r2
81129474:	e0bffe17 	ldw	r2,-8(fp)
81129478:	10800d43 	ldbu	r2,53(r2)
8112947c:	0084303a 	nor	r2,zero,r2
81129480:	2084703a 	and	r2,r4,r2
81129484:	1009883a 	mov	r4,r2
81129488:	d0a08c44 	addi	r2,gp,-32207
8112948c:	1885883a 	add	r2,r3,r2
81129490:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81129494:	e0fffd03 	ldbu	r3,-12(fp)
81129498:	d0a08c44 	addi	r2,gp,-32207
8112949c:	1885883a 	add	r2,r3,r2
811294a0:	10800003 	ldbu	r2,0(r2)
811294a4:	10803fcc 	andi	r2,r2,255
811294a8:	1000071e 	bne	r2,zero,811294c8 <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
811294ac:	e0bffe17 	ldw	r2,-8(fp)
811294b0:	10800d83 	ldbu	r2,54(r2)
811294b4:	0084303a 	nor	r2,zero,r2
811294b8:	1007883a 	mov	r3,r2
811294bc:	d0a08c03 	ldbu	r2,-32208(gp)
811294c0:	1884703a 	and	r2,r3,r2
811294c4:	d0a08c05 	stb	r2,-32208(gp)
    }
    ptcb->OSTCBPrio         = prio;
811294c8:	e0bffe17 	ldw	r2,-8(fp)
811294cc:	e0ffff03 	ldbu	r3,-4(fp)
811294d0:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
811294d4:	e0bfff03 	ldbu	r2,-4(fp)
811294d8:	1004d0fa 	srli	r2,r2,3
811294dc:	108001cc 	andi	r2,r2,7
811294e0:	1007883a 	mov	r3,r2
811294e4:	e0bffe17 	ldw	r2,-8(fp)
811294e8:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
811294ec:	e0bfff03 	ldbu	r2,-4(fp)
811294f0:	108001cc 	andi	r2,r2,7
811294f4:	1007883a 	mov	r3,r2
811294f8:	e0bffe17 	ldw	r2,-8(fp)
811294fc:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
81129500:	e0bffe17 	ldw	r2,-8(fp)
81129504:	10800d03 	ldbu	r2,52(r2)
81129508:	10803fcc 	andi	r2,r2,255
8112950c:	00c00044 	movi	r3,1
81129510:	1884983a 	sll	r2,r3,r2
81129514:	1007883a 	mov	r3,r2
81129518:	e0bffe17 	ldw	r2,-8(fp)
8112951c:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
81129520:	e0bffe17 	ldw	r2,-8(fp)
81129524:	10800cc3 	ldbu	r2,51(r2)
81129528:	10803fcc 	andi	r2,r2,255
8112952c:	00c00044 	movi	r3,1
81129530:	1884983a 	sll	r2,r3,r2
81129534:	1007883a 	mov	r3,r2
81129538:	e0bffe17 	ldw	r2,-8(fp)
8112953c:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
81129540:	e0bffe17 	ldw	r2,-8(fp)
81129544:	10c00d83 	ldbu	r3,54(r2)
81129548:	d0a08c03 	ldbu	r2,-32208(gp)
8112954c:	1884b03a 	or	r2,r3,r2
81129550:	d0a08c05 	stb	r2,-32208(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81129554:	e0bffe17 	ldw	r2,-8(fp)
81129558:	10800d03 	ldbu	r2,52(r2)
8112955c:	10c03fcc 	andi	r3,r2,255
81129560:	e0bffe17 	ldw	r2,-8(fp)
81129564:	10800d03 	ldbu	r2,52(r2)
81129568:	11003fcc 	andi	r4,r2,255
8112956c:	d0a08c44 	addi	r2,gp,-32207
81129570:	2085883a 	add	r2,r4,r2
81129574:	11000003 	ldbu	r4,0(r2)
81129578:	e0bffe17 	ldw	r2,-8(fp)
8112957c:	10800d43 	ldbu	r2,53(r2)
81129580:	2084b03a 	or	r2,r4,r2
81129584:	1009883a 	mov	r4,r2
81129588:	d0a08c44 	addi	r2,gp,-32207
8112958c:	1885883a 	add	r2,r3,r2
81129590:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
81129594:	e0ffff03 	ldbu	r3,-4(fp)
81129598:	00a045b4 	movhi	r2,33046
8112959c:	10904e04 	addi	r2,r2,16696
811295a0:	18c7883a 	add	r3,r3,r3
811295a4:	18c7883a 	add	r3,r3,r3
811295a8:	10c5883a 	add	r2,r2,r3
811295ac:	e0fffe17 	ldw	r3,-8(fp)
811295b0:	10c00015 	stw	r3,0(r2)
}
811295b4:	0001883a 	nop
811295b8:	e037883a 	mov	sp,fp
811295bc:	df000017 	ldw	fp,0(sp)
811295c0:	dec00104 	addi	sp,sp,4
811295c4:	f800283a 	ret

811295c8 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
811295c8:	defff804 	addi	sp,sp,-32
811295cc:	de00012e 	bgeu	sp,et,811295d4 <OSQAccept+0xc>
811295d0:	003b68fa 	trap	3
811295d4:	df000715 	stw	fp,28(sp)
811295d8:	df000704 	addi	fp,sp,28
811295dc:	e13ffe15 	stw	r4,-8(fp)
811295e0:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811295e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811295e8:	e0bfff17 	ldw	r2,-4(fp)
811295ec:	1000021e 	bne	r2,zero,811295f8 <OSQAccept+0x30>
        return ((void *)0);
811295f0:	0005883a 	mov	r2,zero
811295f4:	00004206 	br	81129700 <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
811295f8:	e0bffe17 	ldw	r2,-8(fp)
811295fc:	1000051e 	bne	r2,zero,81129614 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81129600:	e0bfff17 	ldw	r2,-4(fp)
81129604:	00c00104 	movi	r3,4
81129608:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112960c:	0005883a 	mov	r2,zero
81129610:	00003b06 	br	81129700 <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81129614:	e0bffe17 	ldw	r2,-8(fp)
81129618:	10800003 	ldbu	r2,0(r2)
8112961c:	10803fcc 	andi	r2,r2,255
81129620:	108000a0 	cmpeqi	r2,r2,2
81129624:	1000051e 	bne	r2,zero,8112963c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
81129628:	e0bfff17 	ldw	r2,-4(fp)
8112962c:	00c00044 	movi	r3,1
81129630:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81129634:	0005883a 	mov	r2,zero
81129638:	00003106 	br	81129700 <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112963c:	0005303a 	rdctl	r2,status
81129640:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129644:	e0fffd17 	ldw	r3,-12(fp)
81129648:	00bfff84 	movi	r2,-2
8112964c:	1884703a 	and	r2,r3,r2
81129650:	1001703a 	wrctl	status,r2
  
  return context;
81129654:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81129658:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112965c:	e0bffe17 	ldw	r2,-8(fp)
81129660:	10800117 	ldw	r2,4(r2)
81129664:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
81129668:	e0bffc17 	ldw	r2,-16(fp)
8112966c:	1080058b 	ldhu	r2,22(r2)
81129670:	10bfffcc 	andi	r2,r2,65535
81129674:	10001926 	beq	r2,zero,811296dc <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
81129678:	e0bffc17 	ldw	r2,-16(fp)
8112967c:	10800417 	ldw	r2,16(r2)
81129680:	11000104 	addi	r4,r2,4
81129684:	e0fffc17 	ldw	r3,-16(fp)
81129688:	19000415 	stw	r4,16(r3)
8112968c:	10800017 	ldw	r2,0(r2)
81129690:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81129694:	e0bffc17 	ldw	r2,-16(fp)
81129698:	1080058b 	ldhu	r2,22(r2)
8112969c:	10bfffc4 	addi	r2,r2,-1
811296a0:	1007883a 	mov	r3,r2
811296a4:	e0bffc17 	ldw	r2,-16(fp)
811296a8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
811296ac:	e0bffc17 	ldw	r2,-16(fp)
811296b0:	10c00417 	ldw	r3,16(r2)
811296b4:	e0bffc17 	ldw	r2,-16(fp)
811296b8:	10800217 	ldw	r2,8(r2)
811296bc:	1880041e 	bne	r3,r2,811296d0 <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
811296c0:	e0bffc17 	ldw	r2,-16(fp)
811296c4:	10c00117 	ldw	r3,4(r2)
811296c8:	e0bffc17 	ldw	r2,-16(fp)
811296cc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
811296d0:	e0bfff17 	ldw	r2,-4(fp)
811296d4:	10000005 	stb	zero,0(r2)
811296d8:	00000406 	br	811296ec <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
811296dc:	e0bfff17 	ldw	r2,-4(fp)
811296e0:	00c007c4 	movi	r3,31
811296e4:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
811296e8:	e03ff915 	stw	zero,-28(fp)
811296ec:	e0bffa17 	ldw	r2,-24(fp)
811296f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811296f4:	e0bffb17 	ldw	r2,-20(fp)
811296f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
811296fc:	e0bff917 	ldw	r2,-28(fp)
}
81129700:	e037883a 	mov	sp,fp
81129704:	df000017 	ldw	fp,0(sp)
81129708:	dec00104 	addi	sp,sp,4
8112970c:	f800283a 	ret

81129710 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
81129710:	defff404 	addi	sp,sp,-48
81129714:	de00012e 	bgeu	sp,et,8112971c <OSQCreate+0xc>
81129718:	003b68fa 	trap	3
8112971c:	dfc00b15 	stw	ra,44(sp)
81129720:	df000a15 	stw	fp,40(sp)
81129724:	df000a04 	addi	fp,sp,40
81129728:	e13ffe15 	stw	r4,-8(fp)
8112972c:	2805883a 	mov	r2,r5
81129730:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81129734:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
81129738:	d0a08f03 	ldbu	r2,-32196(gp)
8112973c:	10803fcc 	andi	r2,r2,255
81129740:	10000226 	beq	r2,zero,8112974c <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
81129744:	0005883a 	mov	r2,zero
81129748:	00005906 	br	811298b0 <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112974c:	0005303a 	rdctl	r2,status
81129750:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129754:	e0fffd17 	ldw	r3,-12(fp)
81129758:	00bfff84 	movi	r2,-2
8112975c:	1884703a 	and	r2,r3,r2
81129760:	1001703a 	wrctl	status,r2
  
  return context;
81129764:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81129768:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8112976c:	d0a08e17 	ldw	r2,-32200(gp)
81129770:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
81129774:	d0a08e17 	ldw	r2,-32200(gp)
81129778:	10000326 	beq	r2,zero,81129788 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112977c:	d0a08e17 	ldw	r2,-32200(gp)
81129780:	10800117 	ldw	r2,4(r2)
81129784:	d0a08e15 	stw	r2,-32200(gp)
81129788:	e0bff717 	ldw	r2,-36(fp)
8112978c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129790:	e0bff817 	ldw	r2,-32(fp)
81129794:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
81129798:	e0bff617 	ldw	r2,-40(fp)
8112979c:	10004326 	beq	r2,zero,811298ac <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811297a0:	0005303a 	rdctl	r2,status
811297a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811297a8:	e0fff917 	ldw	r3,-28(fp)
811297ac:	00bfff84 	movi	r2,-2
811297b0:	1884703a 	and	r2,r3,r2
811297b4:	1001703a 	wrctl	status,r2
  
  return context;
811297b8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
811297bc:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
811297c0:	d0a08b17 	ldw	r2,-32212(gp)
811297c4:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
811297c8:	e0bffb17 	ldw	r2,-20(fp)
811297cc:	10002d26 	beq	r2,zero,81129884 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
811297d0:	d0a08b17 	ldw	r2,-32212(gp)
811297d4:	10800017 	ldw	r2,0(r2)
811297d8:	d0a08b15 	stw	r2,-32212(gp)
811297dc:	e0bff717 	ldw	r2,-36(fp)
811297e0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811297e4:	e0bffa17 	ldw	r2,-24(fp)
811297e8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
811297ec:	e0bffb17 	ldw	r2,-20(fp)
811297f0:	e0fffe17 	ldw	r3,-8(fp)
811297f4:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
811297f8:	e0bfff0b 	ldhu	r2,-4(fp)
811297fc:	1085883a 	add	r2,r2,r2
81129800:	1085883a 	add	r2,r2,r2
81129804:	1007883a 	mov	r3,r2
81129808:	e0bffe17 	ldw	r2,-8(fp)
8112980c:	10c7883a 	add	r3,r2,r3
81129810:	e0bffb17 	ldw	r2,-20(fp)
81129814:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
81129818:	e0bffb17 	ldw	r2,-20(fp)
8112981c:	e0fffe17 	ldw	r3,-8(fp)
81129820:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
81129824:	e0bffb17 	ldw	r2,-20(fp)
81129828:	e0fffe17 	ldw	r3,-8(fp)
8112982c:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
81129830:	e0bffb17 	ldw	r2,-20(fp)
81129834:	e0ffff0b 	ldhu	r3,-4(fp)
81129838:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8112983c:	e0bffb17 	ldw	r2,-20(fp)
81129840:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
81129844:	e0bff617 	ldw	r2,-40(fp)
81129848:	00c00084 	movi	r3,2
8112984c:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
81129850:	e0bff617 	ldw	r2,-40(fp)
81129854:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
81129858:	e0bff617 	ldw	r2,-40(fp)
8112985c:	e0fffb17 	ldw	r3,-20(fp)
81129860:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
81129864:	e0bff617 	ldw	r2,-40(fp)
81129868:	00c00fc4 	movi	r3,63
8112986c:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
81129870:	e0bff617 	ldw	r2,-40(fp)
81129874:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
81129878:	e13ff617 	ldw	r4,-40(fp)
8112987c:	11257700 	call	81125770 <OS_EventWaitListInit>
81129880:	00000a06 	br	811298ac <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
81129884:	d0e08e17 	ldw	r3,-32200(gp)
81129888:	e0bff617 	ldw	r2,-40(fp)
8112988c:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
81129890:	e0bff617 	ldw	r2,-40(fp)
81129894:	d0a08e15 	stw	r2,-32200(gp)
81129898:	e0bff717 	ldw	r2,-36(fp)
8112989c:	e0bffc15 	stw	r2,-16(fp)
811298a0:	e0bffc17 	ldw	r2,-16(fp)
811298a4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
811298a8:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
811298ac:	e0bff617 	ldw	r2,-40(fp)
}
811298b0:	e037883a 	mov	sp,fp
811298b4:	dfc00117 	ldw	ra,4(sp)
811298b8:	df000017 	ldw	fp,0(sp)
811298bc:	dec00204 	addi	sp,sp,8
811298c0:	f800283a 	ret

811298c4 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
811298c4:	defff204 	addi	sp,sp,-56
811298c8:	de00012e 	bgeu	sp,et,811298d0 <OSQDel+0xc>
811298cc:	003b68fa 	trap	3
811298d0:	dfc00d15 	stw	ra,52(sp)
811298d4:	df000c15 	stw	fp,48(sp)
811298d8:	df000c04 	addi	fp,sp,48
811298dc:	e13ffd15 	stw	r4,-12(fp)
811298e0:	2805883a 	mov	r2,r5
811298e4:	e1bfff15 	stw	r6,-4(fp)
811298e8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811298ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811298f0:	e0bfff17 	ldw	r2,-4(fp)
811298f4:	1000021e 	bne	r2,zero,81129900 <OSQDel+0x3c>
        return (pevent);
811298f8:	e0bffd17 	ldw	r2,-12(fp)
811298fc:	00008e06 	br	81129b38 <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81129900:	e0bffd17 	ldw	r2,-12(fp)
81129904:	1000051e 	bne	r2,zero,8112991c <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81129908:	e0bfff17 	ldw	r2,-4(fp)
8112990c:	00c00104 	movi	r3,4
81129910:	10c00005 	stb	r3,0(r2)
        return (pevent);
81129914:	e0bffd17 	ldw	r2,-12(fp)
81129918:	00008706 	br	81129b38 <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112991c:	e0bffd17 	ldw	r2,-12(fp)
81129920:	10800003 	ldbu	r2,0(r2)
81129924:	10803fcc 	andi	r2,r2,255
81129928:	108000a0 	cmpeqi	r2,r2,2
8112992c:	1000051e 	bne	r2,zero,81129944 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81129930:	e0bfff17 	ldw	r2,-4(fp)
81129934:	00c00044 	movi	r3,1
81129938:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112993c:	e0bffd17 	ldw	r2,-12(fp)
81129940:	00007d06 	br	81129b38 <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81129944:	d0a08f03 	ldbu	r2,-32196(gp)
81129948:	10803fcc 	andi	r2,r2,255
8112994c:	10000526 	beq	r2,zero,81129964 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81129950:	e0bfff17 	ldw	r2,-4(fp)
81129954:	00c003c4 	movi	r3,15
81129958:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112995c:	e0bffd17 	ldw	r2,-12(fp)
81129960:	00007506 	br	81129b38 <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129964:	0005303a 	rdctl	r2,status
81129968:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112996c:	e0fffc17 	ldw	r3,-16(fp)
81129970:	00bfff84 	movi	r2,-2
81129974:	1884703a 	and	r2,r3,r2
81129978:	1001703a 	wrctl	status,r2
  
  return context;
8112997c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81129980:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
81129984:	e0bffd17 	ldw	r2,-12(fp)
81129988:	10800283 	ldbu	r2,10(r2)
8112998c:	10803fcc 	andi	r2,r2,255
81129990:	10000326 	beq	r2,zero,811299a0 <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81129994:	00800044 	movi	r2,1
81129998:	e0bff405 	stb	r2,-48(fp)
8112999c:	00000106 	br	811299a4 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
811299a0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
811299a4:	e0bffe03 	ldbu	r2,-8(fp)
811299a8:	10000326 	beq	r2,zero,811299b8 <OSQDel+0xf4>
811299ac:	10800060 	cmpeqi	r2,r2,1
811299b0:	1000301e 	bne	r2,zero,81129a74 <OSQDel+0x1b0>
811299b4:	00005506 	br	81129b0c <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
811299b8:	e0bff403 	ldbu	r2,-48(fp)
811299bc:	10001e1e 	bne	r2,zero,81129a38 <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
811299c0:	e0bffd17 	ldw	r2,-12(fp)
811299c4:	00c00fc4 	movi	r3,63
811299c8:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
811299cc:	e0bffd17 	ldw	r2,-12(fp)
811299d0:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
811299d4:	e0bffd17 	ldw	r2,-12(fp)
811299d8:	10800117 	ldw	r2,4(r2)
811299dc:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
811299e0:	d0e08b17 	ldw	r3,-32212(gp)
811299e4:	e0bff817 	ldw	r2,-32(fp)
811299e8:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
811299ec:	e0bff817 	ldw	r2,-32(fp)
811299f0:	d0a08b15 	stw	r2,-32212(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
811299f4:	e0bffd17 	ldw	r2,-12(fp)
811299f8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
811299fc:	d0e08e17 	ldw	r3,-32200(gp)
81129a00:	e0bffd17 	ldw	r2,-12(fp)
81129a04:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81129a08:	e0bffd17 	ldw	r2,-12(fp)
81129a0c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81129a10:	e0bffd17 	ldw	r2,-12(fp)
81129a14:	d0a08e15 	stw	r2,-32200(gp)
81129a18:	e0bff617 	ldw	r2,-40(fp)
81129a1c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129a20:	e0bff717 	ldw	r2,-36(fp)
81129a24:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81129a28:	e0bfff17 	ldw	r2,-4(fp)
81129a2c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
81129a30:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81129a34:	00003f06 	br	81129b34 <OSQDel+0x270>
81129a38:	e0bff617 	ldw	r2,-40(fp)
81129a3c:	e0bff915 	stw	r2,-28(fp)
81129a40:	e0bff917 	ldw	r2,-28(fp)
81129a44:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81129a48:	e0bfff17 	ldw	r2,-4(fp)
81129a4c:	00c01244 	movi	r3,73
81129a50:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81129a54:	e0bffd17 	ldw	r2,-12(fp)
81129a58:	e0bff515 	stw	r2,-44(fp)
             }
             break;
81129a5c:	00003506 	br	81129b34 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
81129a60:	000f883a 	mov	r7,zero
81129a64:	01800104 	movi	r6,4
81129a68:	000b883a 	mov	r5,zero
81129a6c:	e13ffd17 	ldw	r4,-12(fp)
81129a70:	11251980 	call	81125198 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
81129a74:	e0bffd17 	ldw	r2,-12(fp)
81129a78:	10800283 	ldbu	r2,10(r2)
81129a7c:	10803fcc 	andi	r2,r2,255
81129a80:	103ff71e 	bne	r2,zero,81129a60 <__reset+0xfb109a60>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81129a84:	e0bffd17 	ldw	r2,-12(fp)
81129a88:	00c00fc4 	movi	r3,63
81129a8c:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81129a90:	e0bffd17 	ldw	r2,-12(fp)
81129a94:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
81129a98:	e0bffd17 	ldw	r2,-12(fp)
81129a9c:	10800117 	ldw	r2,4(r2)
81129aa0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
81129aa4:	d0e08b17 	ldw	r3,-32212(gp)
81129aa8:	e0bff817 	ldw	r2,-32(fp)
81129aac:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
81129ab0:	e0bff817 	ldw	r2,-32(fp)
81129ab4:	d0a08b15 	stw	r2,-32212(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81129ab8:	e0bffd17 	ldw	r2,-12(fp)
81129abc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81129ac0:	d0e08e17 	ldw	r3,-32200(gp)
81129ac4:	e0bffd17 	ldw	r2,-12(fp)
81129ac8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81129acc:	e0bffd17 	ldw	r2,-12(fp)
81129ad0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81129ad4:	e0bffd17 	ldw	r2,-12(fp)
81129ad8:	d0a08e15 	stw	r2,-32200(gp)
81129adc:	e0bff617 	ldw	r2,-40(fp)
81129ae0:	e0bffa15 	stw	r2,-24(fp)
81129ae4:	e0bffa17 	ldw	r2,-24(fp)
81129ae8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81129aec:	e0bff403 	ldbu	r2,-48(fp)
81129af0:	10800058 	cmpnei	r2,r2,1
81129af4:	1000011e 	bne	r2,zero,81129afc <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81129af8:	1125c540 	call	81125c54 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81129afc:	e0bfff17 	ldw	r2,-4(fp)
81129b00:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
81129b04:	e03ff515 	stw	zero,-44(fp)
             break;
81129b08:	00000a06 	br	81129b34 <OSQDel+0x270>
81129b0c:	e0bff617 	ldw	r2,-40(fp)
81129b10:	e0bffb15 	stw	r2,-20(fp)
81129b14:	e0bffb17 	ldw	r2,-20(fp)
81129b18:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81129b1c:	e0bfff17 	ldw	r2,-4(fp)
81129b20:	00c001c4 	movi	r3,7
81129b24:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81129b28:	e0bffd17 	ldw	r2,-12(fp)
81129b2c:	e0bff515 	stw	r2,-44(fp)
             break;
81129b30:	0001883a 	nop
    }
    return (pevent_return);
81129b34:	e0bff517 	ldw	r2,-44(fp)
}
81129b38:	e037883a 	mov	sp,fp
81129b3c:	dfc00117 	ldw	ra,4(sp)
81129b40:	df000017 	ldw	fp,0(sp)
81129b44:	dec00204 	addi	sp,sp,8
81129b48:	f800283a 	ret

81129b4c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
81129b4c:	defffa04 	addi	sp,sp,-24
81129b50:	de00012e 	bgeu	sp,et,81129b58 <OSQFlush+0xc>
81129b54:	003b68fa 	trap	3
81129b58:	df000515 	stw	fp,20(sp)
81129b5c:	df000504 	addi	fp,sp,20
81129b60:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81129b64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81129b68:	e0bfff17 	ldw	r2,-4(fp)
81129b6c:	1000021e 	bne	r2,zero,81129b78 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
81129b70:	00800104 	movi	r2,4
81129b74:	00002106 	br	81129bfc <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81129b78:	e0bfff17 	ldw	r2,-4(fp)
81129b7c:	10800003 	ldbu	r2,0(r2)
81129b80:	10803fcc 	andi	r2,r2,255
81129b84:	108000a0 	cmpeqi	r2,r2,2
81129b88:	1000021e 	bne	r2,zero,81129b94 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
81129b8c:	00800044 	movi	r2,1
81129b90:	00001a06 	br	81129bfc <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129b94:	0005303a 	rdctl	r2,status
81129b98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129b9c:	e0fffd17 	ldw	r3,-12(fp)
81129ba0:	00bfff84 	movi	r2,-2
81129ba4:	1884703a 	and	r2,r3,r2
81129ba8:	1001703a 	wrctl	status,r2
  
  return context;
81129bac:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81129bb0:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
81129bb4:	e0bfff17 	ldw	r2,-4(fp)
81129bb8:	10800117 	ldw	r2,4(r2)
81129bbc:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
81129bc0:	e0bffc17 	ldw	r2,-16(fp)
81129bc4:	10c00117 	ldw	r3,4(r2)
81129bc8:	e0bffc17 	ldw	r2,-16(fp)
81129bcc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
81129bd0:	e0bffc17 	ldw	r2,-16(fp)
81129bd4:	10c00117 	ldw	r3,4(r2)
81129bd8:	e0bffc17 	ldw	r2,-16(fp)
81129bdc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
81129be0:	e0bffc17 	ldw	r2,-16(fp)
81129be4:	1000058d 	sth	zero,22(r2)
81129be8:	e0bffb17 	ldw	r2,-20(fp)
81129bec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129bf0:	e0bffe17 	ldw	r2,-8(fp)
81129bf4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81129bf8:	0005883a 	mov	r2,zero
}
81129bfc:	e037883a 	mov	sp,fp
81129c00:	df000017 	ldw	fp,0(sp)
81129c04:	dec00104 	addi	sp,sp,4
81129c08:	f800283a 	ret

81129c0c <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81129c0c:	defff304 	addi	sp,sp,-52
81129c10:	de00012e 	bgeu	sp,et,81129c18 <OSQPend+0xc>
81129c14:	003b68fa 	trap	3
81129c18:	dfc00c15 	stw	ra,48(sp)
81129c1c:	df000b15 	stw	fp,44(sp)
81129c20:	df000b04 	addi	fp,sp,44
81129c24:	e13ffd15 	stw	r4,-12(fp)
81129c28:	2805883a 	mov	r2,r5
81129c2c:	e1bfff15 	stw	r6,-4(fp)
81129c30:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81129c34:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81129c38:	e0bfff17 	ldw	r2,-4(fp)
81129c3c:	1000021e 	bne	r2,zero,81129c48 <OSQPend+0x3c>
        return ((void *)0);
81129c40:	0005883a 	mov	r2,zero
81129c44:	00009106 	br	81129e8c <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
81129c48:	e0bffd17 	ldw	r2,-12(fp)
81129c4c:	1000051e 	bne	r2,zero,81129c64 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81129c50:	e0bfff17 	ldw	r2,-4(fp)
81129c54:	00c00104 	movi	r3,4
81129c58:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81129c5c:	0005883a 	mov	r2,zero
81129c60:	00008a06 	br	81129e8c <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81129c64:	e0bffd17 	ldw	r2,-12(fp)
81129c68:	10800003 	ldbu	r2,0(r2)
81129c6c:	10803fcc 	andi	r2,r2,255
81129c70:	108000a0 	cmpeqi	r2,r2,2
81129c74:	1000051e 	bne	r2,zero,81129c8c <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81129c78:	e0bfff17 	ldw	r2,-4(fp)
81129c7c:	00c00044 	movi	r3,1
81129c80:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81129c84:	0005883a 	mov	r2,zero
81129c88:	00008006 	br	81129e8c <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
81129c8c:	d0a08f03 	ldbu	r2,-32196(gp)
81129c90:	10803fcc 	andi	r2,r2,255
81129c94:	10000526 	beq	r2,zero,81129cac <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
81129c98:	e0bfff17 	ldw	r2,-4(fp)
81129c9c:	00c00084 	movi	r3,2
81129ca0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81129ca4:	0005883a 	mov	r2,zero
81129ca8:	00007806 	br	81129e8c <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
81129cac:	d0a07d03 	ldbu	r2,-32268(gp)
81129cb0:	10803fcc 	andi	r2,r2,255
81129cb4:	10000526 	beq	r2,zero,81129ccc <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
81129cb8:	e0bfff17 	ldw	r2,-4(fp)
81129cbc:	00c00344 	movi	r3,13
81129cc0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81129cc4:	0005883a 	mov	r2,zero
81129cc8:	00007006 	br	81129e8c <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129ccc:	0005303a 	rdctl	r2,status
81129cd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129cd4:	e0fffc17 	ldw	r3,-16(fp)
81129cd8:	00bfff84 	movi	r2,-2
81129cdc:	1884703a 	and	r2,r3,r2
81129ce0:	1001703a 	wrctl	status,r2
  
  return context;
81129ce4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81129ce8:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
81129cec:	e0bffd17 	ldw	r2,-12(fp)
81129cf0:	10800117 	ldw	r2,4(r2)
81129cf4:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
81129cf8:	e0bff817 	ldw	r2,-32(fp)
81129cfc:	1080058b 	ldhu	r2,22(r2)
81129d00:	10bfffcc 	andi	r2,r2,65535
81129d04:	10001e26 	beq	r2,zero,81129d80 <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
81129d08:	e0bff817 	ldw	r2,-32(fp)
81129d0c:	10800417 	ldw	r2,16(r2)
81129d10:	11000104 	addi	r4,r2,4
81129d14:	e0fff817 	ldw	r3,-32(fp)
81129d18:	19000415 	stw	r4,16(r3)
81129d1c:	10800017 	ldw	r2,0(r2)
81129d20:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81129d24:	e0bff817 	ldw	r2,-32(fp)
81129d28:	1080058b 	ldhu	r2,22(r2)
81129d2c:	10bfffc4 	addi	r2,r2,-1
81129d30:	1007883a 	mov	r3,r2
81129d34:	e0bff817 	ldw	r2,-32(fp)
81129d38:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
81129d3c:	e0bff817 	ldw	r2,-32(fp)
81129d40:	10c00417 	ldw	r3,16(r2)
81129d44:	e0bff817 	ldw	r2,-32(fp)
81129d48:	10800217 	ldw	r2,8(r2)
81129d4c:	1880041e 	bne	r3,r2,81129d60 <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
81129d50:	e0bff817 	ldw	r2,-32(fp)
81129d54:	10c00117 	ldw	r3,4(r2)
81129d58:	e0bff817 	ldw	r2,-32(fp)
81129d5c:	10c00415 	stw	r3,16(r2)
81129d60:	e0bff617 	ldw	r2,-40(fp)
81129d64:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129d68:	e0bff717 	ldw	r2,-36(fp)
81129d6c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81129d70:	e0bfff17 	ldw	r2,-4(fp)
81129d74:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
81129d78:	e0bff517 	ldw	r2,-44(fp)
81129d7c:	00004306 	br	81129e8c <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
81129d80:	d0a09017 	ldw	r2,-32192(gp)
81129d84:	d0e09017 	ldw	r3,-32192(gp)
81129d88:	18c00c03 	ldbu	r3,48(r3)
81129d8c:	18c00114 	ori	r3,r3,4
81129d90:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81129d94:	d0a09017 	ldw	r2,-32192(gp)
81129d98:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
81129d9c:	d0a09017 	ldw	r2,-32192(gp)
81129da0:	e0fffe0b 	ldhu	r3,-8(fp)
81129da4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
81129da8:	e13ffd17 	ldw	r4,-12(fp)
81129dac:	11253380 	call	81125338 <OS_EventTaskWait>
81129db0:	e0bff617 	ldw	r2,-40(fp)
81129db4:	e0bffb15 	stw	r2,-20(fp)
81129db8:	e0bffb17 	ldw	r2,-20(fp)
81129dbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
81129dc0:	1125c540 	call	81125c54 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129dc4:	0005303a 	rdctl	r2,status
81129dc8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129dcc:	e0fff917 	ldw	r3,-28(fp)
81129dd0:	00bfff84 	movi	r2,-2
81129dd4:	1884703a 	and	r2,r3,r2
81129dd8:	1001703a 	wrctl	status,r2
  
  return context;
81129ddc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81129de0:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81129de4:	d0a09017 	ldw	r2,-32192(gp)
81129de8:	10800c43 	ldbu	r2,49(r2)
81129dec:	10803fcc 	andi	r2,r2,255
81129df0:	10000326 	beq	r2,zero,81129e00 <OSQPend+0x1f4>
81129df4:	108000a0 	cmpeqi	r2,r2,2
81129df8:	1000071e 	bne	r2,zero,81129e18 <OSQPend+0x20c>
81129dfc:	00000b06 	br	81129e2c <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
81129e00:	d0a09017 	ldw	r2,-32192(gp)
81129e04:	10800917 	ldw	r2,36(r2)
81129e08:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
81129e0c:	e0bfff17 	ldw	r2,-4(fp)
81129e10:	10000005 	stb	zero,0(r2)
             break;
81129e14:	00000e06 	br	81129e50 <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
81129e18:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
81129e1c:	e0bfff17 	ldw	r2,-4(fp)
81129e20:	00c00384 	movi	r3,14
81129e24:	10c00005 	stb	r3,0(r2)
             break;
81129e28:	00000906 	br	81129e50 <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
81129e2c:	d0a09017 	ldw	r2,-32192(gp)
81129e30:	e17ffd17 	ldw	r5,-12(fp)
81129e34:	1009883a 	mov	r4,r2
81129e38:	11255a80 	call	811255a8 <OS_EventTaskRemove>
             pmsg = (void *)0;
81129e3c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
81129e40:	e0bfff17 	ldw	r2,-4(fp)
81129e44:	00c00284 	movi	r3,10
81129e48:	10c00005 	stb	r3,0(r2)
             break;
81129e4c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81129e50:	d0a09017 	ldw	r2,-32192(gp)
81129e54:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81129e58:	d0a09017 	ldw	r2,-32192(gp)
81129e5c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81129e60:	d0a09017 	ldw	r2,-32192(gp)
81129e64:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81129e68:	d0a09017 	ldw	r2,-32192(gp)
81129e6c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
81129e70:	d0a09017 	ldw	r2,-32192(gp)
81129e74:	10000915 	stw	zero,36(r2)
81129e78:	e0bff617 	ldw	r2,-40(fp)
81129e7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129e80:	e0bffa17 	ldw	r2,-24(fp)
81129e84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
81129e88:	e0bff517 	ldw	r2,-44(fp)
}
81129e8c:	e037883a 	mov	sp,fp
81129e90:	dfc00117 	ldw	ra,4(sp)
81129e94:	df000017 	ldw	fp,0(sp)
81129e98:	dec00204 	addi	sp,sp,8
81129e9c:	f800283a 	ret

81129ea0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81129ea0:	defff604 	addi	sp,sp,-40
81129ea4:	de00012e 	bgeu	sp,et,81129eac <OSQPendAbort+0xc>
81129ea8:	003b68fa 	trap	3
81129eac:	dfc00915 	stw	ra,36(sp)
81129eb0:	df000815 	stw	fp,32(sp)
81129eb4:	df000804 	addi	fp,sp,32
81129eb8:	e13ffd15 	stw	r4,-12(fp)
81129ebc:	2805883a 	mov	r2,r5
81129ec0:	e1bfff15 	stw	r6,-4(fp)
81129ec4:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81129ec8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81129ecc:	e0bfff17 	ldw	r2,-4(fp)
81129ed0:	1000021e 	bne	r2,zero,81129edc <OSQPendAbort+0x3c>
        return (0);
81129ed4:	0005883a 	mov	r2,zero
81129ed8:	00004906 	br	8112a000 <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81129edc:	e0bffd17 	ldw	r2,-12(fp)
81129ee0:	1000051e 	bne	r2,zero,81129ef8 <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
81129ee4:	e0bfff17 	ldw	r2,-4(fp)
81129ee8:	00c00104 	movi	r3,4
81129eec:	10c00005 	stb	r3,0(r2)
        return (0);
81129ef0:	0005883a 	mov	r2,zero
81129ef4:	00004206 	br	8112a000 <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81129ef8:	e0bffd17 	ldw	r2,-12(fp)
81129efc:	10800003 	ldbu	r2,0(r2)
81129f00:	10803fcc 	andi	r2,r2,255
81129f04:	108000a0 	cmpeqi	r2,r2,2
81129f08:	1000051e 	bne	r2,zero,81129f20 <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81129f0c:	e0bfff17 	ldw	r2,-4(fp)
81129f10:	00c00044 	movi	r3,1
81129f14:	10c00005 	stb	r3,0(r2)
        return (0);
81129f18:	0005883a 	mov	r2,zero
81129f1c:	00003806 	br	8112a000 <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129f20:	0005303a 	rdctl	r2,status
81129f24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129f28:	e0fffc17 	ldw	r3,-16(fp)
81129f2c:	00bfff84 	movi	r2,-2
81129f30:	1884703a 	and	r2,r3,r2
81129f34:	1001703a 	wrctl	status,r2
  
  return context;
81129f38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81129f3c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
81129f40:	e0bffd17 	ldw	r2,-12(fp)
81129f44:	10800283 	ldbu	r2,10(r2)
81129f48:	10803fcc 	andi	r2,r2,255
81129f4c:	10002526 	beq	r2,zero,81129fe4 <OSQPendAbort+0x144>
        nbr_tasks = 0;
81129f50:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
81129f54:	e0bffe03 	ldbu	r2,-8(fp)
81129f58:	10800060 	cmpeqi	r2,r2,1
81129f5c:	10000e26 	beq	r2,zero,81129f98 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81129f60:	00000806 	br	81129f84 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81129f64:	01c00084 	movi	r7,2
81129f68:	01800104 	movi	r6,4
81129f6c:	000b883a 	mov	r5,zero
81129f70:	e13ffd17 	ldw	r4,-12(fp)
81129f74:	11251980 	call	81125198 <OS_EventTaskRdy>
                     nbr_tasks++;
81129f78:	e0bff803 	ldbu	r2,-32(fp)
81129f7c:	10800044 	addi	r2,r2,1
81129f80:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81129f84:	e0bffd17 	ldw	r2,-12(fp)
81129f88:	10800283 	ldbu	r2,10(r2)
81129f8c:	10803fcc 	andi	r2,r2,255
81129f90:	103ff41e 	bne	r2,zero,81129f64 <__reset+0xfb109f64>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
81129f94:	00000906 	br	81129fbc <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
81129f98:	01c00084 	movi	r7,2
81129f9c:	01800104 	movi	r6,4
81129fa0:	000b883a 	mov	r5,zero
81129fa4:	e13ffd17 	ldw	r4,-12(fp)
81129fa8:	11251980 	call	81125198 <OS_EventTaskRdy>
                 nbr_tasks++;
81129fac:	e0bff803 	ldbu	r2,-32(fp)
81129fb0:	10800044 	addi	r2,r2,1
81129fb4:	e0bff805 	stb	r2,-32(fp)
                 break;
81129fb8:	0001883a 	nop
81129fbc:	e0bff917 	ldw	r2,-28(fp)
81129fc0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129fc4:	e0bffa17 	ldw	r2,-24(fp)
81129fc8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
81129fcc:	1125c540 	call	81125c54 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
81129fd0:	e0bfff17 	ldw	r2,-4(fp)
81129fd4:	00c00384 	movi	r3,14
81129fd8:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
81129fdc:	e0bff803 	ldbu	r2,-32(fp)
81129fe0:	00000706 	br	8112a000 <OSQPendAbort+0x160>
81129fe4:	e0bff917 	ldw	r2,-28(fp)
81129fe8:	e0bffb15 	stw	r2,-20(fp)
81129fec:	e0bffb17 	ldw	r2,-20(fp)
81129ff0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81129ff4:	e0bfff17 	ldw	r2,-4(fp)
81129ff8:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
81129ffc:	0005883a 	mov	r2,zero
}
8112a000:	e037883a 	mov	sp,fp
8112a004:	dfc00117 	ldw	ra,4(sp)
8112a008:	df000017 	ldw	fp,0(sp)
8112a00c:	dec00204 	addi	sp,sp,8
8112a010:	f800283a 	ret

8112a014 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112a014:	defff604 	addi	sp,sp,-40
8112a018:	de00012e 	bgeu	sp,et,8112a020 <OSQPost+0xc>
8112a01c:	003b68fa 	trap	3
8112a020:	dfc00915 	stw	ra,36(sp)
8112a024:	df000815 	stw	fp,32(sp)
8112a028:	df000804 	addi	fp,sp,32
8112a02c:	e13ffe15 	stw	r4,-8(fp)
8112a030:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112a034:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112a038:	e0bffe17 	ldw	r2,-8(fp)
8112a03c:	1000021e 	bne	r2,zero,8112a048 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
8112a040:	00800104 	movi	r2,4
8112a044:	00004a06 	br	8112a170 <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112a048:	e0bffe17 	ldw	r2,-8(fp)
8112a04c:	10800003 	ldbu	r2,0(r2)
8112a050:	10803fcc 	andi	r2,r2,255
8112a054:	108000a0 	cmpeqi	r2,r2,2
8112a058:	1000021e 	bne	r2,zero,8112a064 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
8112a05c:	00800044 	movi	r2,1
8112a060:	00004306 	br	8112a170 <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a064:	0005303a 	rdctl	r2,status
8112a068:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a06c:	e0fffd17 	ldw	r3,-12(fp)
8112a070:	00bfff84 	movi	r2,-2
8112a074:	1884703a 	and	r2,r3,r2
8112a078:	1001703a 	wrctl	status,r2
  
  return context;
8112a07c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112a080:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8112a084:	e0bffe17 	ldw	r2,-8(fp)
8112a088:	10800283 	ldbu	r2,10(r2)
8112a08c:	10803fcc 	andi	r2,r2,255
8112a090:	10000c26 	beq	r2,zero,8112a0c4 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112a094:	000f883a 	mov	r7,zero
8112a098:	01800104 	movi	r6,4
8112a09c:	e17fff17 	ldw	r5,-4(fp)
8112a0a0:	e13ffe17 	ldw	r4,-8(fp)
8112a0a4:	11251980 	call	81125198 <OS_EventTaskRdy>
8112a0a8:	e0bff817 	ldw	r2,-32(fp)
8112a0ac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a0b0:	e0bff917 	ldw	r2,-28(fp)
8112a0b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112a0b8:	1125c540 	call	81125c54 <OS_Sched>
        return (OS_ERR_NONE);
8112a0bc:	0005883a 	mov	r2,zero
8112a0c0:	00002b06 	br	8112a170 <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8112a0c4:	e0bffe17 	ldw	r2,-8(fp)
8112a0c8:	10800117 	ldw	r2,4(r2)
8112a0cc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8112a0d0:	e0bffb17 	ldw	r2,-20(fp)
8112a0d4:	10c0058b 	ldhu	r3,22(r2)
8112a0d8:	e0bffb17 	ldw	r2,-20(fp)
8112a0dc:	1080050b 	ldhu	r2,20(r2)
8112a0e0:	18ffffcc 	andi	r3,r3,65535
8112a0e4:	10bfffcc 	andi	r2,r2,65535
8112a0e8:	18800636 	bltu	r3,r2,8112a104 <OSQPost+0xf0>
8112a0ec:	e0bff817 	ldw	r2,-32(fp)
8112a0f0:	e0bffa15 	stw	r2,-24(fp)
8112a0f4:	e0bffa17 	ldw	r2,-24(fp)
8112a0f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112a0fc:	00800784 	movi	r2,30
8112a100:	00001b06 	br	8112a170 <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8112a104:	e0bffb17 	ldw	r2,-20(fp)
8112a108:	10800317 	ldw	r2,12(r2)
8112a10c:	11000104 	addi	r4,r2,4
8112a110:	e0fffb17 	ldw	r3,-20(fp)
8112a114:	19000315 	stw	r4,12(r3)
8112a118:	e0ffff17 	ldw	r3,-4(fp)
8112a11c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8112a120:	e0bffb17 	ldw	r2,-20(fp)
8112a124:	1080058b 	ldhu	r2,22(r2)
8112a128:	10800044 	addi	r2,r2,1
8112a12c:	1007883a 	mov	r3,r2
8112a130:	e0bffb17 	ldw	r2,-20(fp)
8112a134:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112a138:	e0bffb17 	ldw	r2,-20(fp)
8112a13c:	10c00317 	ldw	r3,12(r2)
8112a140:	e0bffb17 	ldw	r2,-20(fp)
8112a144:	10800217 	ldw	r2,8(r2)
8112a148:	1880041e 	bne	r3,r2,8112a15c <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
8112a14c:	e0bffb17 	ldw	r2,-20(fp)
8112a150:	10c00117 	ldw	r3,4(r2)
8112a154:	e0bffb17 	ldw	r2,-20(fp)
8112a158:	10c00315 	stw	r3,12(r2)
8112a15c:	e0bff817 	ldw	r2,-32(fp)
8112a160:	e0bffc15 	stw	r2,-16(fp)
8112a164:	e0bffc17 	ldw	r2,-16(fp)
8112a168:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112a16c:	0005883a 	mov	r2,zero
}
8112a170:	e037883a 	mov	sp,fp
8112a174:	dfc00117 	ldw	ra,4(sp)
8112a178:	df000017 	ldw	fp,0(sp)
8112a17c:	dec00204 	addi	sp,sp,8
8112a180:	f800283a 	ret

8112a184 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8112a184:	defff604 	addi	sp,sp,-40
8112a188:	de00012e 	bgeu	sp,et,8112a190 <OSQPostFront+0xc>
8112a18c:	003b68fa 	trap	3
8112a190:	dfc00915 	stw	ra,36(sp)
8112a194:	df000815 	stw	fp,32(sp)
8112a198:	df000804 	addi	fp,sp,32
8112a19c:	e13ffe15 	stw	r4,-8(fp)
8112a1a0:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112a1a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112a1a8:	e0bffe17 	ldw	r2,-8(fp)
8112a1ac:	1000021e 	bne	r2,zero,8112a1b8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8112a1b0:	00800104 	movi	r2,4
8112a1b4:	00004c06 	br	8112a2e8 <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112a1b8:	e0bffe17 	ldw	r2,-8(fp)
8112a1bc:	10800003 	ldbu	r2,0(r2)
8112a1c0:	10803fcc 	andi	r2,r2,255
8112a1c4:	108000a0 	cmpeqi	r2,r2,2
8112a1c8:	1000021e 	bne	r2,zero,8112a1d4 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
8112a1cc:	00800044 	movi	r2,1
8112a1d0:	00004506 	br	8112a2e8 <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a1d4:	0005303a 	rdctl	r2,status
8112a1d8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a1dc:	e0fffd17 	ldw	r3,-12(fp)
8112a1e0:	00bfff84 	movi	r2,-2
8112a1e4:	1884703a 	and	r2,r3,r2
8112a1e8:	1001703a 	wrctl	status,r2
  
  return context;
8112a1ec:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112a1f0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8112a1f4:	e0bffe17 	ldw	r2,-8(fp)
8112a1f8:	10800283 	ldbu	r2,10(r2)
8112a1fc:	10803fcc 	andi	r2,r2,255
8112a200:	10000c26 	beq	r2,zero,8112a234 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112a204:	000f883a 	mov	r7,zero
8112a208:	01800104 	movi	r6,4
8112a20c:	e17fff17 	ldw	r5,-4(fp)
8112a210:	e13ffe17 	ldw	r4,-8(fp)
8112a214:	11251980 	call	81125198 <OS_EventTaskRdy>
8112a218:	e0bff817 	ldw	r2,-32(fp)
8112a21c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a220:	e0bff917 	ldw	r2,-28(fp)
8112a224:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8112a228:	1125c540 	call	81125c54 <OS_Sched>
        return (OS_ERR_NONE);
8112a22c:	0005883a 	mov	r2,zero
8112a230:	00002d06 	br	8112a2e8 <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112a234:	e0bffe17 	ldw	r2,-8(fp)
8112a238:	10800117 	ldw	r2,4(r2)
8112a23c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112a240:	e0bffb17 	ldw	r2,-20(fp)
8112a244:	10c0058b 	ldhu	r3,22(r2)
8112a248:	e0bffb17 	ldw	r2,-20(fp)
8112a24c:	1080050b 	ldhu	r2,20(r2)
8112a250:	18ffffcc 	andi	r3,r3,65535
8112a254:	10bfffcc 	andi	r2,r2,65535
8112a258:	18800636 	bltu	r3,r2,8112a274 <OSQPostFront+0xf0>
8112a25c:	e0bff817 	ldw	r2,-32(fp)
8112a260:	e0bffa15 	stw	r2,-24(fp)
8112a264:	e0bffa17 	ldw	r2,-24(fp)
8112a268:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112a26c:	00800784 	movi	r2,30
8112a270:	00001d06 	br	8112a2e8 <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112a274:	e0bffb17 	ldw	r2,-20(fp)
8112a278:	10c00417 	ldw	r3,16(r2)
8112a27c:	e0bffb17 	ldw	r2,-20(fp)
8112a280:	10800117 	ldw	r2,4(r2)
8112a284:	1880041e 	bne	r3,r2,8112a298 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
8112a288:	e0bffb17 	ldw	r2,-20(fp)
8112a28c:	10c00217 	ldw	r3,8(r2)
8112a290:	e0bffb17 	ldw	r2,-20(fp)
8112a294:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8112a298:	e0bffb17 	ldw	r2,-20(fp)
8112a29c:	10800417 	ldw	r2,16(r2)
8112a2a0:	10ffff04 	addi	r3,r2,-4
8112a2a4:	e0bffb17 	ldw	r2,-20(fp)
8112a2a8:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8112a2ac:	e0bffb17 	ldw	r2,-20(fp)
8112a2b0:	10800417 	ldw	r2,16(r2)
8112a2b4:	e0ffff17 	ldw	r3,-4(fp)
8112a2b8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112a2bc:	e0bffb17 	ldw	r2,-20(fp)
8112a2c0:	1080058b 	ldhu	r2,22(r2)
8112a2c4:	10800044 	addi	r2,r2,1
8112a2c8:	1007883a 	mov	r3,r2
8112a2cc:	e0bffb17 	ldw	r2,-20(fp)
8112a2d0:	10c0058d 	sth	r3,22(r2)
8112a2d4:	e0bff817 	ldw	r2,-32(fp)
8112a2d8:	e0bffc15 	stw	r2,-16(fp)
8112a2dc:	e0bffc17 	ldw	r2,-16(fp)
8112a2e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112a2e4:	0005883a 	mov	r2,zero
}
8112a2e8:	e037883a 	mov	sp,fp
8112a2ec:	dfc00117 	ldw	ra,4(sp)
8112a2f0:	df000017 	ldw	fp,0(sp)
8112a2f4:	dec00204 	addi	sp,sp,8
8112a2f8:	f800283a 	ret

8112a2fc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8112a2fc:	defff504 	addi	sp,sp,-44
8112a300:	de00012e 	bgeu	sp,et,8112a308 <OSQPostOpt+0xc>
8112a304:	003b68fa 	trap	3
8112a308:	dfc00a15 	stw	ra,40(sp)
8112a30c:	df000915 	stw	fp,36(sp)
8112a310:	df000904 	addi	fp,sp,36
8112a314:	e13ffd15 	stw	r4,-12(fp)
8112a318:	e17ffe15 	stw	r5,-8(fp)
8112a31c:	3005883a 	mov	r2,r6
8112a320:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112a324:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112a328:	e0bffd17 	ldw	r2,-12(fp)
8112a32c:	1000021e 	bne	r2,zero,8112a338 <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
8112a330:	00800104 	movi	r2,4
8112a334:	00007106 	br	8112a4fc <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112a338:	e0bffd17 	ldw	r2,-12(fp)
8112a33c:	10800003 	ldbu	r2,0(r2)
8112a340:	10803fcc 	andi	r2,r2,255
8112a344:	108000a0 	cmpeqi	r2,r2,2
8112a348:	1000021e 	bne	r2,zero,8112a354 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
8112a34c:	00800044 	movi	r2,1
8112a350:	00006a06 	br	8112a4fc <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a354:	0005303a 	rdctl	r2,status
8112a358:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a35c:	e0fffc17 	ldw	r3,-16(fp)
8112a360:	00bfff84 	movi	r2,-2
8112a364:	1884703a 	and	r2,r3,r2
8112a368:	1001703a 	wrctl	status,r2
  
  return context;
8112a36c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112a370:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8112a374:	e0bffd17 	ldw	r2,-12(fp)
8112a378:	10800283 	ldbu	r2,10(r2)
8112a37c:	10803fcc 	andi	r2,r2,255
8112a380:	10001d26 	beq	r2,zero,8112a3f8 <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8112a384:	e0bfff03 	ldbu	r2,-4(fp)
8112a388:	1080004c 	andi	r2,r2,1
8112a38c:	10000b26 	beq	r2,zero,8112a3bc <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112a390:	00000506 	br	8112a3a8 <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112a394:	000f883a 	mov	r7,zero
8112a398:	01800104 	movi	r6,4
8112a39c:	e17ffe17 	ldw	r5,-8(fp)
8112a3a0:	e13ffd17 	ldw	r4,-12(fp)
8112a3a4:	11251980 	call	81125198 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112a3a8:	e0bffd17 	ldw	r2,-12(fp)
8112a3ac:	10800283 	ldbu	r2,10(r2)
8112a3b0:	10803fcc 	andi	r2,r2,255
8112a3b4:	103ff71e 	bne	r2,zero,8112a394 <__reset+0xfb10a394>
8112a3b8:	00000506 	br	8112a3d0 <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112a3bc:	000f883a 	mov	r7,zero
8112a3c0:	01800104 	movi	r6,4
8112a3c4:	e17ffe17 	ldw	r5,-8(fp)
8112a3c8:	e13ffd17 	ldw	r4,-12(fp)
8112a3cc:	11251980 	call	81125198 <OS_EventTaskRdy>
8112a3d0:	e0bff717 	ldw	r2,-36(fp)
8112a3d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a3d8:	e0bff817 	ldw	r2,-32(fp)
8112a3dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8112a3e0:	e0bfff03 	ldbu	r2,-4(fp)
8112a3e4:	1080010c 	andi	r2,r2,4
8112a3e8:	1000011e 	bne	r2,zero,8112a3f0 <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
8112a3ec:	1125c540 	call	81125c54 <OS_Sched>
        }
        return (OS_ERR_NONE);
8112a3f0:	0005883a 	mov	r2,zero
8112a3f4:	00004106 	br	8112a4fc <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112a3f8:	e0bffd17 	ldw	r2,-12(fp)
8112a3fc:	10800117 	ldw	r2,4(r2)
8112a400:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112a404:	e0bffa17 	ldw	r2,-24(fp)
8112a408:	10c0058b 	ldhu	r3,22(r2)
8112a40c:	e0bffa17 	ldw	r2,-24(fp)
8112a410:	1080050b 	ldhu	r2,20(r2)
8112a414:	18ffffcc 	andi	r3,r3,65535
8112a418:	10bfffcc 	andi	r2,r2,65535
8112a41c:	18800636 	bltu	r3,r2,8112a438 <OSQPostOpt+0x13c>
8112a420:	e0bff717 	ldw	r2,-36(fp)
8112a424:	e0bff915 	stw	r2,-28(fp)
8112a428:	e0bff917 	ldw	r2,-28(fp)
8112a42c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112a430:	00800784 	movi	r2,30
8112a434:	00003106 	br	8112a4fc <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112a438:	e0bfff03 	ldbu	r2,-4(fp)
8112a43c:	1080008c 	andi	r2,r2,2
8112a440:	10001326 	beq	r2,zero,8112a490 <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8112a444:	e0bffa17 	ldw	r2,-24(fp)
8112a448:	10c00417 	ldw	r3,16(r2)
8112a44c:	e0bffa17 	ldw	r2,-24(fp)
8112a450:	10800117 	ldw	r2,4(r2)
8112a454:	1880041e 	bne	r3,r2,8112a468 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112a458:	e0bffa17 	ldw	r2,-24(fp)
8112a45c:	10c00217 	ldw	r3,8(r2)
8112a460:	e0bffa17 	ldw	r2,-24(fp)
8112a464:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112a468:	e0bffa17 	ldw	r2,-24(fp)
8112a46c:	10800417 	ldw	r2,16(r2)
8112a470:	10ffff04 	addi	r3,r2,-4
8112a474:	e0bffa17 	ldw	r2,-24(fp)
8112a478:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112a47c:	e0bffa17 	ldw	r2,-24(fp)
8112a480:	10800417 	ldw	r2,16(r2)
8112a484:	e0fffe17 	ldw	r3,-8(fp)
8112a488:	10c00015 	stw	r3,0(r2)
8112a48c:	00001006 	br	8112a4d0 <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8112a490:	e0bffa17 	ldw	r2,-24(fp)
8112a494:	10800317 	ldw	r2,12(r2)
8112a498:	11000104 	addi	r4,r2,4
8112a49c:	e0fffa17 	ldw	r3,-24(fp)
8112a4a0:	19000315 	stw	r4,12(r3)
8112a4a4:	e0fffe17 	ldw	r3,-8(fp)
8112a4a8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8112a4ac:	e0bffa17 	ldw	r2,-24(fp)
8112a4b0:	10c00317 	ldw	r3,12(r2)
8112a4b4:	e0bffa17 	ldw	r2,-24(fp)
8112a4b8:	10800217 	ldw	r2,8(r2)
8112a4bc:	1880041e 	bne	r3,r2,8112a4d0 <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8112a4c0:	e0bffa17 	ldw	r2,-24(fp)
8112a4c4:	10c00117 	ldw	r3,4(r2)
8112a4c8:	e0bffa17 	ldw	r2,-24(fp)
8112a4cc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112a4d0:	e0bffa17 	ldw	r2,-24(fp)
8112a4d4:	1080058b 	ldhu	r2,22(r2)
8112a4d8:	10800044 	addi	r2,r2,1
8112a4dc:	1007883a 	mov	r3,r2
8112a4e0:	e0bffa17 	ldw	r2,-24(fp)
8112a4e4:	10c0058d 	sth	r3,22(r2)
8112a4e8:	e0bff717 	ldw	r2,-36(fp)
8112a4ec:	e0bffb15 	stw	r2,-20(fp)
8112a4f0:	e0bffb17 	ldw	r2,-20(fp)
8112a4f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112a4f8:	0005883a 	mov	r2,zero
}
8112a4fc:	e037883a 	mov	sp,fp
8112a500:	dfc00117 	ldw	ra,4(sp)
8112a504:	df000017 	ldw	fp,0(sp)
8112a508:	dec00204 	addi	sp,sp,8
8112a50c:	f800283a 	ret

8112a510 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8112a510:	defff604 	addi	sp,sp,-40
8112a514:	de00012e 	bgeu	sp,et,8112a51c <OSQQuery+0xc>
8112a518:	003b68fa 	trap	3
8112a51c:	df000915 	stw	fp,36(sp)
8112a520:	df000904 	addi	fp,sp,36
8112a524:	e13ffe15 	stw	r4,-8(fp)
8112a528:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112a52c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112a530:	e0bffe17 	ldw	r2,-8(fp)
8112a534:	1000021e 	bne	r2,zero,8112a540 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112a538:	00800104 	movi	r2,4
8112a53c:	00004906 	br	8112a664 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112a540:	e0bfff17 	ldw	r2,-4(fp)
8112a544:	1000021e 	bne	r2,zero,8112a550 <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112a548:	00800244 	movi	r2,9
8112a54c:	00004506 	br	8112a664 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112a550:	e0bffe17 	ldw	r2,-8(fp)
8112a554:	10800003 	ldbu	r2,0(r2)
8112a558:	10803fcc 	andi	r2,r2,255
8112a55c:	108000a0 	cmpeqi	r2,r2,2
8112a560:	1000021e 	bne	r2,zero,8112a56c <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112a564:	00800044 	movi	r2,1
8112a568:	00003e06 	br	8112a664 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a56c:	0005303a 	rdctl	r2,status
8112a570:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a574:	e0fffd17 	ldw	r3,-12(fp)
8112a578:	00bfff84 	movi	r2,-2
8112a57c:	1884703a 	and	r2,r3,r2
8112a580:	1001703a 	wrctl	status,r2
  
  return context;
8112a584:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112a588:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8112a58c:	e0bffe17 	ldw	r2,-8(fp)
8112a590:	10c00283 	ldbu	r3,10(r2)
8112a594:	e0bfff17 	ldw	r2,-4(fp)
8112a598:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
8112a59c:	e0bffe17 	ldw	r2,-8(fp)
8112a5a0:	108002c4 	addi	r2,r2,11
8112a5a4:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8112a5a8:	e0bfff17 	ldw	r2,-4(fp)
8112a5ac:	10800204 	addi	r2,r2,8
8112a5b0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112a5b4:	e03ff705 	stb	zero,-36(fp)
8112a5b8:	00000b06 	br	8112a5e8 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
8112a5bc:	e0bff917 	ldw	r2,-28(fp)
8112a5c0:	10c00044 	addi	r3,r2,1
8112a5c4:	e0fff915 	stw	r3,-28(fp)
8112a5c8:	e0fff817 	ldw	r3,-32(fp)
8112a5cc:	19000044 	addi	r4,r3,1
8112a5d0:	e13ff815 	stw	r4,-32(fp)
8112a5d4:	18c00003 	ldbu	r3,0(r3)
8112a5d8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112a5dc:	e0bff703 	ldbu	r2,-36(fp)
8112a5e0:	10800044 	addi	r2,r2,1
8112a5e4:	e0bff705 	stb	r2,-36(fp)
8112a5e8:	e0bff703 	ldbu	r2,-36(fp)
8112a5ec:	108001b0 	cmpltui	r2,r2,6
8112a5f0:	103ff21e 	bne	r2,zero,8112a5bc <__reset+0xfb10a5bc>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8112a5f4:	e0bffe17 	ldw	r2,-8(fp)
8112a5f8:	10800117 	ldw	r2,4(r2)
8112a5fc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8112a600:	e0bffc17 	ldw	r2,-16(fp)
8112a604:	1080058b 	ldhu	r2,22(r2)
8112a608:	10bfffcc 	andi	r2,r2,65535
8112a60c:	10000626 	beq	r2,zero,8112a628 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8112a610:	e0bffc17 	ldw	r2,-16(fp)
8112a614:	10800417 	ldw	r2,16(r2)
8112a618:	10c00017 	ldw	r3,0(r2)
8112a61c:	e0bfff17 	ldw	r2,-4(fp)
8112a620:	10c00015 	stw	r3,0(r2)
8112a624:	00000206 	br	8112a630 <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8112a628:	e0bfff17 	ldw	r2,-4(fp)
8112a62c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8112a630:	e0bffc17 	ldw	r2,-16(fp)
8112a634:	10c0058b 	ldhu	r3,22(r2)
8112a638:	e0bfff17 	ldw	r2,-4(fp)
8112a63c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112a640:	e0bffc17 	ldw	r2,-16(fp)
8112a644:	10c0050b 	ldhu	r3,20(r2)
8112a648:	e0bfff17 	ldw	r2,-4(fp)
8112a64c:	10c0018d 	sth	r3,6(r2)
8112a650:	e0bffa17 	ldw	r2,-24(fp)
8112a654:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a658:	e0bffb17 	ldw	r2,-20(fp)
8112a65c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112a660:	0005883a 	mov	r2,zero
}
8112a664:	e037883a 	mov	sp,fp
8112a668:	df000017 	ldw	fp,0(sp)
8112a66c:	dec00104 	addi	sp,sp,4
8112a670:	f800283a 	ret

8112a674 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8112a674:	defffb04 	addi	sp,sp,-20
8112a678:	de00012e 	bgeu	sp,et,8112a680 <OS_QInit+0xc>
8112a67c:	003b68fa 	trap	3
8112a680:	dfc00415 	stw	ra,16(sp)
8112a684:	df000315 	stw	fp,12(sp)
8112a688:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8112a68c:	01407804 	movi	r5,480
8112a690:	012045b4 	movhi	r4,33046
8112a694:	21053404 	addi	r4,r4,5328
8112a698:	1125b880 	call	81125b88 <OS_MemClr>
    pq1 = &OSQTbl[0];
8112a69c:	00a045b4 	movhi	r2,33046
8112a6a0:	10853404 	addi	r2,r2,5328
8112a6a4:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112a6a8:	00a045b4 	movhi	r2,33046
8112a6ac:	10853a04 	addi	r2,r2,5352
8112a6b0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112a6b4:	e03ffd0d 	sth	zero,-12(fp)
8112a6b8:	00000c06 	br	8112a6ec <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
8112a6bc:	e0bffe17 	ldw	r2,-8(fp)
8112a6c0:	e0ffff17 	ldw	r3,-4(fp)
8112a6c4:	10c00015 	stw	r3,0(r2)
        pq1++;
8112a6c8:	e0bffe17 	ldw	r2,-8(fp)
8112a6cc:	10800604 	addi	r2,r2,24
8112a6d0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8112a6d4:	e0bfff17 	ldw	r2,-4(fp)
8112a6d8:	10800604 	addi	r2,r2,24
8112a6dc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112a6e0:	e0bffd0b 	ldhu	r2,-12(fp)
8112a6e4:	10800044 	addi	r2,r2,1
8112a6e8:	e0bffd0d 	sth	r2,-12(fp)
8112a6ec:	e0bffd0b 	ldhu	r2,-12(fp)
8112a6f0:	108004f0 	cmpltui	r2,r2,19
8112a6f4:	103ff11e 	bne	r2,zero,8112a6bc <__reset+0xfb10a6bc>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8112a6f8:	e0bffe17 	ldw	r2,-8(fp)
8112a6fc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8112a700:	00a045b4 	movhi	r2,33046
8112a704:	10853404 	addi	r2,r2,5328
8112a708:	d0a08b15 	stw	r2,-32212(gp)
#endif
}
8112a70c:	0001883a 	nop
8112a710:	e037883a 	mov	sp,fp
8112a714:	dfc00117 	ldw	ra,4(sp)
8112a718:	df000017 	ldw	fp,0(sp)
8112a71c:	dec00204 	addi	sp,sp,8
8112a720:	f800283a 	ret

8112a724 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8112a724:	defffa04 	addi	sp,sp,-24
8112a728:	de00012e 	bgeu	sp,et,8112a730 <OSSemAccept+0xc>
8112a72c:	003b68fa 	trap	3
8112a730:	df000515 	stw	fp,20(sp)
8112a734:	df000504 	addi	fp,sp,20
8112a738:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112a73c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112a740:	e0bfff17 	ldw	r2,-4(fp)
8112a744:	1000021e 	bne	r2,zero,8112a750 <OSSemAccept+0x2c>
        return (0);
8112a748:	0005883a 	mov	r2,zero
8112a74c:	00001f06 	br	8112a7cc <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112a750:	e0bfff17 	ldw	r2,-4(fp)
8112a754:	10800003 	ldbu	r2,0(r2)
8112a758:	10803fcc 	andi	r2,r2,255
8112a75c:	108000e0 	cmpeqi	r2,r2,3
8112a760:	1000021e 	bne	r2,zero,8112a76c <OSSemAccept+0x48>
        return (0);
8112a764:	0005883a 	mov	r2,zero
8112a768:	00001806 	br	8112a7cc <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a76c:	0005303a 	rdctl	r2,status
8112a770:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a774:	e0fffe17 	ldw	r3,-8(fp)
8112a778:	00bfff84 	movi	r2,-2
8112a77c:	1884703a 	and	r2,r3,r2
8112a780:	1001703a 	wrctl	status,r2
  
  return context;
8112a784:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112a788:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8112a78c:	e0bfff17 	ldw	r2,-4(fp)
8112a790:	1080020b 	ldhu	r2,8(r2)
8112a794:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8112a798:	e0bffd0b 	ldhu	r2,-12(fp)
8112a79c:	10000626 	beq	r2,zero,8112a7b8 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112a7a0:	e0bfff17 	ldw	r2,-4(fp)
8112a7a4:	1080020b 	ldhu	r2,8(r2)
8112a7a8:	10bfffc4 	addi	r2,r2,-1
8112a7ac:	1007883a 	mov	r3,r2
8112a7b0:	e0bfff17 	ldw	r2,-4(fp)
8112a7b4:	10c0020d 	sth	r3,8(r2)
8112a7b8:	e0bffb17 	ldw	r2,-20(fp)
8112a7bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a7c0:	e0bffc17 	ldw	r2,-16(fp)
8112a7c4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8112a7c8:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112a7cc:	e037883a 	mov	sp,fp
8112a7d0:	df000017 	ldw	fp,0(sp)
8112a7d4:	dec00104 	addi	sp,sp,4
8112a7d8:	f800283a 	ret

8112a7dc <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8112a7dc:	defff904 	addi	sp,sp,-28
8112a7e0:	de00012e 	bgeu	sp,et,8112a7e8 <OSSemCreate+0xc>
8112a7e4:	003b68fa 	trap	3
8112a7e8:	dfc00615 	stw	ra,24(sp)
8112a7ec:	df000515 	stw	fp,20(sp)
8112a7f0:	df000504 	addi	fp,sp,20
8112a7f4:	2005883a 	mov	r2,r4
8112a7f8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a7fc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112a800:	d0a08f03 	ldbu	r2,-32196(gp)
8112a804:	10803fcc 	andi	r2,r2,255
8112a808:	10000226 	beq	r2,zero,8112a814 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8112a80c:	0005883a 	mov	r2,zero
8112a810:	00002506 	br	8112a8a8 <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a814:	0005303a 	rdctl	r2,status
8112a818:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a81c:	e0fffe17 	ldw	r3,-8(fp)
8112a820:	00bfff84 	movi	r2,-2
8112a824:	1884703a 	and	r2,r3,r2
8112a828:	1001703a 	wrctl	status,r2
  
  return context;
8112a82c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112a830:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8112a834:	d0a08e17 	ldw	r2,-32200(gp)
8112a838:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8112a83c:	d0a08e17 	ldw	r2,-32200(gp)
8112a840:	10000326 	beq	r2,zero,8112a850 <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112a844:	d0a08e17 	ldw	r2,-32200(gp)
8112a848:	10800117 	ldw	r2,4(r2)
8112a84c:	d0a08e15 	stw	r2,-32200(gp)
8112a850:	e0bffb17 	ldw	r2,-20(fp)
8112a854:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a858:	e0bffc17 	ldw	r2,-16(fp)
8112a85c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8112a860:	e0bffd17 	ldw	r2,-12(fp)
8112a864:	10000f26 	beq	r2,zero,8112a8a4 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8112a868:	e0bffd17 	ldw	r2,-12(fp)
8112a86c:	00c000c4 	movi	r3,3
8112a870:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8112a874:	e0bffd17 	ldw	r2,-12(fp)
8112a878:	e0ffff0b 	ldhu	r3,-4(fp)
8112a87c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8112a880:	e0bffd17 	ldw	r2,-12(fp)
8112a884:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8112a888:	e0bffd17 	ldw	r2,-12(fp)
8112a88c:	00c00fc4 	movi	r3,63
8112a890:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8112a894:	e0bffd17 	ldw	r2,-12(fp)
8112a898:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8112a89c:	e13ffd17 	ldw	r4,-12(fp)
8112a8a0:	11257700 	call	81125770 <OS_EventWaitListInit>
    }
    return (pevent);
8112a8a4:	e0bffd17 	ldw	r2,-12(fp)
}
8112a8a8:	e037883a 	mov	sp,fp
8112a8ac:	dfc00117 	ldw	ra,4(sp)
8112a8b0:	df000017 	ldw	fp,0(sp)
8112a8b4:	dec00204 	addi	sp,sp,8
8112a8b8:	f800283a 	ret

8112a8bc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112a8bc:	defff304 	addi	sp,sp,-52
8112a8c0:	de00012e 	bgeu	sp,et,8112a8c8 <OSSemDel+0xc>
8112a8c4:	003b68fa 	trap	3
8112a8c8:	dfc00c15 	stw	ra,48(sp)
8112a8cc:	df000b15 	stw	fp,44(sp)
8112a8d0:	df000b04 	addi	fp,sp,44
8112a8d4:	e13ffd15 	stw	r4,-12(fp)
8112a8d8:	2805883a 	mov	r2,r5
8112a8dc:	e1bfff15 	stw	r6,-4(fp)
8112a8e0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112a8e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112a8e8:	e0bfff17 	ldw	r2,-4(fp)
8112a8ec:	1000021e 	bne	r2,zero,8112a8f8 <OSSemDel+0x3c>
        return (pevent);
8112a8f0:	e0bffd17 	ldw	r2,-12(fp)
8112a8f4:	00007e06 	br	8112aaf0 <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112a8f8:	e0bffd17 	ldw	r2,-12(fp)
8112a8fc:	1000051e 	bne	r2,zero,8112a914 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112a900:	e0bfff17 	ldw	r2,-4(fp)
8112a904:	00c00104 	movi	r3,4
8112a908:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112a90c:	e0bffd17 	ldw	r2,-12(fp)
8112a910:	00007706 	br	8112aaf0 <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112a914:	e0bffd17 	ldw	r2,-12(fp)
8112a918:	10800003 	ldbu	r2,0(r2)
8112a91c:	10803fcc 	andi	r2,r2,255
8112a920:	108000e0 	cmpeqi	r2,r2,3
8112a924:	1000051e 	bne	r2,zero,8112a93c <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112a928:	e0bfff17 	ldw	r2,-4(fp)
8112a92c:	00c00044 	movi	r3,1
8112a930:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112a934:	e0bffd17 	ldw	r2,-12(fp)
8112a938:	00006d06 	br	8112aaf0 <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112a93c:	d0a08f03 	ldbu	r2,-32196(gp)
8112a940:	10803fcc 	andi	r2,r2,255
8112a944:	10000526 	beq	r2,zero,8112a95c <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112a948:	e0bfff17 	ldw	r2,-4(fp)
8112a94c:	00c003c4 	movi	r3,15
8112a950:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112a954:	e0bffd17 	ldw	r2,-12(fp)
8112a958:	00006506 	br	8112aaf0 <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a95c:	0005303a 	rdctl	r2,status
8112a960:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a964:	e0fffc17 	ldw	r3,-16(fp)
8112a968:	00bfff84 	movi	r2,-2
8112a96c:	1884703a 	and	r2,r3,r2
8112a970:	1001703a 	wrctl	status,r2
  
  return context;
8112a974:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112a978:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8112a97c:	e0bffd17 	ldw	r2,-12(fp)
8112a980:	10800283 	ldbu	r2,10(r2)
8112a984:	10803fcc 	andi	r2,r2,255
8112a988:	10000326 	beq	r2,zero,8112a998 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112a98c:	00800044 	movi	r2,1
8112a990:	e0bff505 	stb	r2,-44(fp)
8112a994:	00000106 	br	8112a99c <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112a998:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8112a99c:	e0bffe03 	ldbu	r2,-8(fp)
8112a9a0:	10000326 	beq	r2,zero,8112a9b0 <OSSemDel+0xf4>
8112a9a4:	10800060 	cmpeqi	r2,r2,1
8112a9a8:	1000281e 	bne	r2,zero,8112aa4c <OSSemDel+0x190>
8112a9ac:	00004506 	br	8112aac4 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
8112a9b0:	e0bff503 	ldbu	r2,-44(fp)
8112a9b4:	1000161e 	bne	r2,zero,8112aa10 <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112a9b8:	e0bffd17 	ldw	r2,-12(fp)
8112a9bc:	00c00fc4 	movi	r3,63
8112a9c0:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112a9c4:	e0bffd17 	ldw	r2,-12(fp)
8112a9c8:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112a9cc:	e0bffd17 	ldw	r2,-12(fp)
8112a9d0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112a9d4:	d0e08e17 	ldw	r3,-32200(gp)
8112a9d8:	e0bffd17 	ldw	r2,-12(fp)
8112a9dc:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112a9e0:	e0bffd17 	ldw	r2,-12(fp)
8112a9e4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112a9e8:	e0bffd17 	ldw	r2,-12(fp)
8112a9ec:	d0a08e15 	stw	r2,-32200(gp)
8112a9f0:	e0bff717 	ldw	r2,-36(fp)
8112a9f4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a9f8:	e0bff817 	ldw	r2,-32(fp)
8112a9fc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112aa00:	e0bfff17 	ldw	r2,-4(fp)
8112aa04:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8112aa08:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112aa0c:	00003706 	br	8112aaec <OSSemDel+0x230>
8112aa10:	e0bff717 	ldw	r2,-36(fp)
8112aa14:	e0bff915 	stw	r2,-28(fp)
8112aa18:	e0bff917 	ldw	r2,-28(fp)
8112aa1c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112aa20:	e0bfff17 	ldw	r2,-4(fp)
8112aa24:	00c01244 	movi	r3,73
8112aa28:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112aa2c:	e0bffd17 	ldw	r2,-12(fp)
8112aa30:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112aa34:	00002d06 	br	8112aaec <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112aa38:	000f883a 	mov	r7,zero
8112aa3c:	01800044 	movi	r6,1
8112aa40:	000b883a 	mov	r5,zero
8112aa44:	e13ffd17 	ldw	r4,-12(fp)
8112aa48:	11251980 	call	81125198 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
8112aa4c:	e0bffd17 	ldw	r2,-12(fp)
8112aa50:	10800283 	ldbu	r2,10(r2)
8112aa54:	10803fcc 	andi	r2,r2,255
8112aa58:	103ff71e 	bne	r2,zero,8112aa38 <__reset+0xfb10aa38>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112aa5c:	e0bffd17 	ldw	r2,-12(fp)
8112aa60:	00c00fc4 	movi	r3,63
8112aa64:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112aa68:	e0bffd17 	ldw	r2,-12(fp)
8112aa6c:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112aa70:	e0bffd17 	ldw	r2,-12(fp)
8112aa74:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112aa78:	d0e08e17 	ldw	r3,-32200(gp)
8112aa7c:	e0bffd17 	ldw	r2,-12(fp)
8112aa80:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112aa84:	e0bffd17 	ldw	r2,-12(fp)
8112aa88:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112aa8c:	e0bffd17 	ldw	r2,-12(fp)
8112aa90:	d0a08e15 	stw	r2,-32200(gp)
8112aa94:	e0bff717 	ldw	r2,-36(fp)
8112aa98:	e0bffa15 	stw	r2,-24(fp)
8112aa9c:	e0bffa17 	ldw	r2,-24(fp)
8112aaa0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112aaa4:	e0bff503 	ldbu	r2,-44(fp)
8112aaa8:	10800058 	cmpnei	r2,r2,1
8112aaac:	1000011e 	bne	r2,zero,8112aab4 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112aab0:	1125c540 	call	81125c54 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112aab4:	e0bfff17 	ldw	r2,-4(fp)
8112aab8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8112aabc:	e03ff615 	stw	zero,-40(fp)
             break;
8112aac0:	00000a06 	br	8112aaec <OSSemDel+0x230>
8112aac4:	e0bff717 	ldw	r2,-36(fp)
8112aac8:	e0bffb15 	stw	r2,-20(fp)
8112aacc:	e0bffb17 	ldw	r2,-20(fp)
8112aad0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112aad4:	e0bfff17 	ldw	r2,-4(fp)
8112aad8:	00c001c4 	movi	r3,7
8112aadc:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112aae0:	e0bffd17 	ldw	r2,-12(fp)
8112aae4:	e0bff615 	stw	r2,-40(fp)
             break;
8112aae8:	0001883a 	nop
    }
    return (pevent_return);
8112aaec:	e0bff617 	ldw	r2,-40(fp)
}
8112aaf0:	e037883a 	mov	sp,fp
8112aaf4:	dfc00117 	ldw	ra,4(sp)
8112aaf8:	df000017 	ldw	fp,0(sp)
8112aafc:	dec00204 	addi	sp,sp,8
8112ab00:	f800283a 	ret

8112ab04 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112ab04:	defff504 	addi	sp,sp,-44
8112ab08:	de00012e 	bgeu	sp,et,8112ab10 <OSSemPend+0xc>
8112ab0c:	003b68fa 	trap	3
8112ab10:	dfc00a15 	stw	ra,40(sp)
8112ab14:	df000915 	stw	fp,36(sp)
8112ab18:	df000904 	addi	fp,sp,36
8112ab1c:	e13ffd15 	stw	r4,-12(fp)
8112ab20:	2805883a 	mov	r2,r5
8112ab24:	e1bfff15 	stw	r6,-4(fp)
8112ab28:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ab2c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ab30:	e0bfff17 	ldw	r2,-4(fp)
8112ab34:	10007226 	beq	r2,zero,8112ad00 <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112ab38:	e0bffd17 	ldw	r2,-12(fp)
8112ab3c:	1000041e 	bne	r2,zero,8112ab50 <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112ab40:	e0bfff17 	ldw	r2,-4(fp)
8112ab44:	00c00104 	movi	r3,4
8112ab48:	10c00005 	stb	r3,0(r2)
        return;
8112ab4c:	00006d06 	br	8112ad04 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112ab50:	e0bffd17 	ldw	r2,-12(fp)
8112ab54:	10800003 	ldbu	r2,0(r2)
8112ab58:	10803fcc 	andi	r2,r2,255
8112ab5c:	108000e0 	cmpeqi	r2,r2,3
8112ab60:	1000041e 	bne	r2,zero,8112ab74 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112ab64:	e0bfff17 	ldw	r2,-4(fp)
8112ab68:	00c00044 	movi	r3,1
8112ab6c:	10c00005 	stb	r3,0(r2)
        return;
8112ab70:	00006406 	br	8112ad04 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112ab74:	d0a08f03 	ldbu	r2,-32196(gp)
8112ab78:	10803fcc 	andi	r2,r2,255
8112ab7c:	10000426 	beq	r2,zero,8112ab90 <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
8112ab80:	e0bfff17 	ldw	r2,-4(fp)
8112ab84:	00c00084 	movi	r3,2
8112ab88:	10c00005 	stb	r3,0(r2)
        return;
8112ab8c:	00005d06 	br	8112ad04 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
8112ab90:	d0a07d03 	ldbu	r2,-32268(gp)
8112ab94:	10803fcc 	andi	r2,r2,255
8112ab98:	10000426 	beq	r2,zero,8112abac <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8112ab9c:	e0bfff17 	ldw	r2,-4(fp)
8112aba0:	00c00344 	movi	r3,13
8112aba4:	10c00005 	stb	r3,0(r2)
        return;
8112aba8:	00005606 	br	8112ad04 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112abac:	0005303a 	rdctl	r2,status
8112abb0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112abb4:	e0fffc17 	ldw	r3,-16(fp)
8112abb8:	00bfff84 	movi	r2,-2
8112abbc:	1884703a 	and	r2,r3,r2
8112abc0:	1001703a 	wrctl	status,r2
  
  return context;
8112abc4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112abc8:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8112abcc:	e0bffd17 	ldw	r2,-12(fp)
8112abd0:	1080020b 	ldhu	r2,8(r2)
8112abd4:	10bfffcc 	andi	r2,r2,65535
8112abd8:	10000d26 	beq	r2,zero,8112ac10 <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8112abdc:	e0bffd17 	ldw	r2,-12(fp)
8112abe0:	1080020b 	ldhu	r2,8(r2)
8112abe4:	10bfffc4 	addi	r2,r2,-1
8112abe8:	1007883a 	mov	r3,r2
8112abec:	e0bffd17 	ldw	r2,-12(fp)
8112abf0:	10c0020d 	sth	r3,8(r2)
8112abf4:	e0bff717 	ldw	r2,-36(fp)
8112abf8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112abfc:	e0bff817 	ldw	r2,-32(fp)
8112ac00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112ac04:	e0bfff17 	ldw	r2,-4(fp)
8112ac08:	10000005 	stb	zero,0(r2)
        return;
8112ac0c:	00003d06 	br	8112ad04 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
8112ac10:	d0a09017 	ldw	r2,-32192(gp)
8112ac14:	d0e09017 	ldw	r3,-32192(gp)
8112ac18:	18c00c03 	ldbu	r3,48(r3)
8112ac1c:	18c00054 	ori	r3,r3,1
8112ac20:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112ac24:	d0a09017 	ldw	r2,-32192(gp)
8112ac28:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
8112ac2c:	d0a09017 	ldw	r2,-32192(gp)
8112ac30:	e0fffe0b 	ldhu	r3,-8(fp)
8112ac34:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112ac38:	e13ffd17 	ldw	r4,-12(fp)
8112ac3c:	11253380 	call	81125338 <OS_EventTaskWait>
8112ac40:	e0bff717 	ldw	r2,-36(fp)
8112ac44:	e0bffb15 	stw	r2,-20(fp)
8112ac48:	e0bffb17 	ldw	r2,-20(fp)
8112ac4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112ac50:	1125c540 	call	81125c54 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ac54:	0005303a 	rdctl	r2,status
8112ac58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ac5c:	e0fff917 	ldw	r3,-28(fp)
8112ac60:	00bfff84 	movi	r2,-2
8112ac64:	1884703a 	and	r2,r3,r2
8112ac68:	1001703a 	wrctl	status,r2
  
  return context;
8112ac6c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112ac70:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112ac74:	d0a09017 	ldw	r2,-32192(gp)
8112ac78:	10800c43 	ldbu	r2,49(r2)
8112ac7c:	10803fcc 	andi	r2,r2,255
8112ac80:	10000326 	beq	r2,zero,8112ac90 <OSSemPend+0x18c>
8112ac84:	108000a0 	cmpeqi	r2,r2,2
8112ac88:	1000041e 	bne	r2,zero,8112ac9c <OSSemPend+0x198>
8112ac8c:	00000706 	br	8112acac <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112ac90:	e0bfff17 	ldw	r2,-4(fp)
8112ac94:	10000005 	stb	zero,0(r2)
             break;
8112ac98:	00000c06 	br	8112accc <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112ac9c:	e0bfff17 	ldw	r2,-4(fp)
8112aca0:	00c00384 	movi	r3,14
8112aca4:	10c00005 	stb	r3,0(r2)
             break;
8112aca8:	00000806 	br	8112accc <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8112acac:	d0a09017 	ldw	r2,-32192(gp)
8112acb0:	e17ffd17 	ldw	r5,-12(fp)
8112acb4:	1009883a 	mov	r4,r2
8112acb8:	11255a80 	call	811255a8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112acbc:	e0bfff17 	ldw	r2,-4(fp)
8112acc0:	00c00284 	movi	r3,10
8112acc4:	10c00005 	stb	r3,0(r2)
             break;
8112acc8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112accc:	d0a09017 	ldw	r2,-32192(gp)
8112acd0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112acd4:	d0a09017 	ldw	r2,-32192(gp)
8112acd8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112acdc:	d0a09017 	ldw	r2,-32192(gp)
8112ace0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112ace4:	d0a09017 	ldw	r2,-32192(gp)
8112ace8:	10000815 	stw	zero,32(r2)
8112acec:	e0bff717 	ldw	r2,-36(fp)
8112acf0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112acf4:	e0bffa17 	ldw	r2,-24(fp)
8112acf8:	1001703a 	wrctl	status,r2
8112acfc:	00000106 	br	8112ad04 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112ad00:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112ad04:	e037883a 	mov	sp,fp
8112ad08:	dfc00117 	ldw	ra,4(sp)
8112ad0c:	df000017 	ldw	fp,0(sp)
8112ad10:	dec00204 	addi	sp,sp,8
8112ad14:	f800283a 	ret

8112ad18 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ad18:	defff604 	addi	sp,sp,-40
8112ad1c:	de00012e 	bgeu	sp,et,8112ad24 <OSSemPendAbort+0xc>
8112ad20:	003b68fa 	trap	3
8112ad24:	dfc00915 	stw	ra,36(sp)
8112ad28:	df000815 	stw	fp,32(sp)
8112ad2c:	df000804 	addi	fp,sp,32
8112ad30:	e13ffd15 	stw	r4,-12(fp)
8112ad34:	2805883a 	mov	r2,r5
8112ad38:	e1bfff15 	stw	r6,-4(fp)
8112ad3c:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112ad40:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112ad44:	e0bfff17 	ldw	r2,-4(fp)
8112ad48:	1000021e 	bne	r2,zero,8112ad54 <OSSemPendAbort+0x3c>
        return (0);
8112ad4c:	0005883a 	mov	r2,zero
8112ad50:	00004906 	br	8112ae78 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112ad54:	e0bffd17 	ldw	r2,-12(fp)
8112ad58:	1000051e 	bne	r2,zero,8112ad70 <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112ad5c:	e0bfff17 	ldw	r2,-4(fp)
8112ad60:	00c00104 	movi	r3,4
8112ad64:	10c00005 	stb	r3,0(r2)
        return (0);
8112ad68:	0005883a 	mov	r2,zero
8112ad6c:	00004206 	br	8112ae78 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112ad70:	e0bffd17 	ldw	r2,-12(fp)
8112ad74:	10800003 	ldbu	r2,0(r2)
8112ad78:	10803fcc 	andi	r2,r2,255
8112ad7c:	108000e0 	cmpeqi	r2,r2,3
8112ad80:	1000051e 	bne	r2,zero,8112ad98 <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112ad84:	e0bfff17 	ldw	r2,-4(fp)
8112ad88:	00c00044 	movi	r3,1
8112ad8c:	10c00005 	stb	r3,0(r2)
        return (0);
8112ad90:	0005883a 	mov	r2,zero
8112ad94:	00003806 	br	8112ae78 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ad98:	0005303a 	rdctl	r2,status
8112ad9c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ada0:	e0fffc17 	ldw	r3,-16(fp)
8112ada4:	00bfff84 	movi	r2,-2
8112ada8:	1884703a 	and	r2,r3,r2
8112adac:	1001703a 	wrctl	status,r2
  
  return context;
8112adb0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112adb4:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
8112adb8:	e0bffd17 	ldw	r2,-12(fp)
8112adbc:	10800283 	ldbu	r2,10(r2)
8112adc0:	10803fcc 	andi	r2,r2,255
8112adc4:	10002526 	beq	r2,zero,8112ae5c <OSSemPendAbort+0x144>
        nbr_tasks = 0;
8112adc8:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112adcc:	e0bffe03 	ldbu	r2,-8(fp)
8112add0:	10800060 	cmpeqi	r2,r2,1
8112add4:	10000e26 	beq	r2,zero,8112ae10 <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112add8:	00000806 	br	8112adfc <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112addc:	01c00084 	movi	r7,2
8112ade0:	01800044 	movi	r6,1
8112ade4:	000b883a 	mov	r5,zero
8112ade8:	e13ffd17 	ldw	r4,-12(fp)
8112adec:	11251980 	call	81125198 <OS_EventTaskRdy>
                     nbr_tasks++;
8112adf0:	e0bff803 	ldbu	r2,-32(fp)
8112adf4:	10800044 	addi	r2,r2,1
8112adf8:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112adfc:	e0bffd17 	ldw	r2,-12(fp)
8112ae00:	10800283 	ldbu	r2,10(r2)
8112ae04:	10803fcc 	andi	r2,r2,255
8112ae08:	103ff41e 	bne	r2,zero,8112addc <__reset+0xfb10addc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112ae0c:	00000906 	br	8112ae34 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112ae10:	01c00084 	movi	r7,2
8112ae14:	01800044 	movi	r6,1
8112ae18:	000b883a 	mov	r5,zero
8112ae1c:	e13ffd17 	ldw	r4,-12(fp)
8112ae20:	11251980 	call	81125198 <OS_EventTaskRdy>
                 nbr_tasks++;
8112ae24:	e0bff803 	ldbu	r2,-32(fp)
8112ae28:	10800044 	addi	r2,r2,1
8112ae2c:	e0bff805 	stb	r2,-32(fp)
                 break;
8112ae30:	0001883a 	nop
8112ae34:	e0bff917 	ldw	r2,-28(fp)
8112ae38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ae3c:	e0bffa17 	ldw	r2,-24(fp)
8112ae40:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112ae44:	1125c540 	call	81125c54 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112ae48:	e0bfff17 	ldw	r2,-4(fp)
8112ae4c:	00c00384 	movi	r3,14
8112ae50:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112ae54:	e0bff803 	ldbu	r2,-32(fp)
8112ae58:	00000706 	br	8112ae78 <OSSemPendAbort+0x160>
8112ae5c:	e0bff917 	ldw	r2,-28(fp)
8112ae60:	e0bffb15 	stw	r2,-20(fp)
8112ae64:	e0bffb17 	ldw	r2,-20(fp)
8112ae68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112ae6c:	e0bfff17 	ldw	r2,-4(fp)
8112ae70:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
8112ae74:	0005883a 	mov	r2,zero
}
8112ae78:	e037883a 	mov	sp,fp
8112ae7c:	dfc00117 	ldw	ra,4(sp)
8112ae80:	df000017 	ldw	fp,0(sp)
8112ae84:	dec00204 	addi	sp,sp,8
8112ae88:	f800283a 	ret

8112ae8c <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
8112ae8c:	defff804 	addi	sp,sp,-32
8112ae90:	de00012e 	bgeu	sp,et,8112ae98 <OSSemPost+0xc>
8112ae94:	003b68fa 	trap	3
8112ae98:	dfc00715 	stw	ra,28(sp)
8112ae9c:	df000615 	stw	fp,24(sp)
8112aea0:	df000604 	addi	fp,sp,24
8112aea4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112aea8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112aeac:	e0bfff17 	ldw	r2,-4(fp)
8112aeb0:	1000021e 	bne	r2,zero,8112aebc <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
8112aeb4:	00800104 	movi	r2,4
8112aeb8:	00003506 	br	8112af90 <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112aebc:	e0bfff17 	ldw	r2,-4(fp)
8112aec0:	10800003 	ldbu	r2,0(r2)
8112aec4:	10803fcc 	andi	r2,r2,255
8112aec8:	108000e0 	cmpeqi	r2,r2,3
8112aecc:	1000021e 	bne	r2,zero,8112aed8 <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
8112aed0:	00800044 	movi	r2,1
8112aed4:	00002e06 	br	8112af90 <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112aed8:	0005303a 	rdctl	r2,status
8112aedc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112aee0:	e0fffe17 	ldw	r3,-8(fp)
8112aee4:	00bfff84 	movi	r2,-2
8112aee8:	1884703a 	and	r2,r3,r2
8112aeec:	1001703a 	wrctl	status,r2
  
  return context;
8112aef0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112aef4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
8112aef8:	e0bfff17 	ldw	r2,-4(fp)
8112aefc:	10800283 	ldbu	r2,10(r2)
8112af00:	10803fcc 	andi	r2,r2,255
8112af04:	10000c26 	beq	r2,zero,8112af38 <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112af08:	000f883a 	mov	r7,zero
8112af0c:	01800044 	movi	r6,1
8112af10:	000b883a 	mov	r5,zero
8112af14:	e13fff17 	ldw	r4,-4(fp)
8112af18:	11251980 	call	81125198 <OS_EventTaskRdy>
8112af1c:	e0bffa17 	ldw	r2,-24(fp)
8112af20:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112af24:	e0bffb17 	ldw	r2,-20(fp)
8112af28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112af2c:	1125c540 	call	81125c54 <OS_Sched>
        return (OS_ERR_NONE);
8112af30:	0005883a 	mov	r2,zero
8112af34:	00001606 	br	8112af90 <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
8112af38:	e0bfff17 	ldw	r2,-4(fp)
8112af3c:	1080020b 	ldhu	r2,8(r2)
8112af40:	10ffffcc 	andi	r3,r2,65535
8112af44:	00bfffd4 	movui	r2,65535
8112af48:	18800c26 	beq	r3,r2,8112af7c <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
8112af4c:	e0bfff17 	ldw	r2,-4(fp)
8112af50:	1080020b 	ldhu	r2,8(r2)
8112af54:	10800044 	addi	r2,r2,1
8112af58:	1007883a 	mov	r3,r2
8112af5c:	e0bfff17 	ldw	r2,-4(fp)
8112af60:	10c0020d 	sth	r3,8(r2)
8112af64:	e0bffa17 	ldw	r2,-24(fp)
8112af68:	e0bffc15 	stw	r2,-16(fp)
8112af6c:	e0bffc17 	ldw	r2,-16(fp)
8112af70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112af74:	0005883a 	mov	r2,zero
8112af78:	00000506 	br	8112af90 <OSSemPost+0x104>
8112af7c:	e0bffa17 	ldw	r2,-24(fp)
8112af80:	e0bffd15 	stw	r2,-12(fp)
8112af84:	e0bffd17 	ldw	r2,-12(fp)
8112af88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8112af8c:	00800c84 	movi	r2,50
}
8112af90:	e037883a 	mov	sp,fp
8112af94:	dfc00117 	ldw	ra,4(sp)
8112af98:	df000017 	ldw	fp,0(sp)
8112af9c:	dec00204 	addi	sp,sp,8
8112afa0:	f800283a 	ret

8112afa4 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
8112afa4:	defff704 	addi	sp,sp,-36
8112afa8:	de00012e 	bgeu	sp,et,8112afb0 <OSSemQuery+0xc>
8112afac:	003b68fa 	trap	3
8112afb0:	df000815 	stw	fp,32(sp)
8112afb4:	df000804 	addi	fp,sp,32
8112afb8:	e13ffe15 	stw	r4,-8(fp)
8112afbc:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112afc0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112afc4:	e0bffe17 	ldw	r2,-8(fp)
8112afc8:	1000021e 	bne	r2,zero,8112afd4 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112afcc:	00800104 	movi	r2,4
8112afd0:	00003606 	br	8112b0ac <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
8112afd4:	e0bfff17 	ldw	r2,-4(fp)
8112afd8:	1000021e 	bne	r2,zero,8112afe4 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112afdc:	00800244 	movi	r2,9
8112afe0:	00003206 	br	8112b0ac <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112afe4:	e0bffe17 	ldw	r2,-8(fp)
8112afe8:	10800003 	ldbu	r2,0(r2)
8112afec:	10803fcc 	andi	r2,r2,255
8112aff0:	108000e0 	cmpeqi	r2,r2,3
8112aff4:	1000021e 	bne	r2,zero,8112b000 <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112aff8:	00800044 	movi	r2,1
8112affc:	00002b06 	br	8112b0ac <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b000:	0005303a 	rdctl	r2,status
8112b004:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b008:	e0fffd17 	ldw	r3,-12(fp)
8112b00c:	00bfff84 	movi	r2,-2
8112b010:	1884703a 	and	r2,r3,r2
8112b014:	1001703a 	wrctl	status,r2
  
  return context;
8112b018:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112b01c:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
8112b020:	e0bffe17 	ldw	r2,-8(fp)
8112b024:	10c00283 	ldbu	r3,10(r2)
8112b028:	e0bfff17 	ldw	r2,-4(fp)
8112b02c:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
8112b030:	e0bffe17 	ldw	r2,-8(fp)
8112b034:	108002c4 	addi	r2,r2,11
8112b038:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
8112b03c:	e0bfff17 	ldw	r2,-4(fp)
8112b040:	10800084 	addi	r2,r2,2
8112b044:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112b048:	e03ffa05 	stb	zero,-24(fp)
8112b04c:	00000b06 	br	8112b07c <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
8112b050:	e0bff917 	ldw	r2,-28(fp)
8112b054:	10c00044 	addi	r3,r2,1
8112b058:	e0fff915 	stw	r3,-28(fp)
8112b05c:	e0fff817 	ldw	r3,-32(fp)
8112b060:	19000044 	addi	r4,r3,1
8112b064:	e13ff815 	stw	r4,-32(fp)
8112b068:	18c00003 	ldbu	r3,0(r3)
8112b06c:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112b070:	e0bffa03 	ldbu	r2,-24(fp)
8112b074:	10800044 	addi	r2,r2,1
8112b078:	e0bffa05 	stb	r2,-24(fp)
8112b07c:	e0bffa03 	ldbu	r2,-24(fp)
8112b080:	108001b0 	cmpltui	r2,r2,6
8112b084:	103ff21e 	bne	r2,zero,8112b050 <__reset+0xfb10b050>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
8112b088:	e0bffe17 	ldw	r2,-8(fp)
8112b08c:	10c0020b 	ldhu	r3,8(r2)
8112b090:	e0bfff17 	ldw	r2,-4(fp)
8112b094:	10c0000d 	sth	r3,0(r2)
8112b098:	e0bffb17 	ldw	r2,-20(fp)
8112b09c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b0a0:	e0bffc17 	ldw	r2,-16(fp)
8112b0a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112b0a8:	0005883a 	mov	r2,zero
}
8112b0ac:	e037883a 	mov	sp,fp
8112b0b0:	df000017 	ldw	fp,0(sp)
8112b0b4:	dec00104 	addi	sp,sp,4
8112b0b8:	f800283a 	ret

8112b0bc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8112b0bc:	defff904 	addi	sp,sp,-28
8112b0c0:	de00012e 	bgeu	sp,et,8112b0c8 <OSSemSet+0xc>
8112b0c4:	003b68fa 	trap	3
8112b0c8:	df000615 	stw	fp,24(sp)
8112b0cc:	df000604 	addi	fp,sp,24
8112b0d0:	e13ffd15 	stw	r4,-12(fp)
8112b0d4:	2805883a 	mov	r2,r5
8112b0d8:	e1bfff15 	stw	r6,-4(fp)
8112b0dc:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112b0e0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112b0e4:	e0bfff17 	ldw	r2,-4(fp)
8112b0e8:	10003126 	beq	r2,zero,8112b1b0 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112b0ec:	e0bffd17 	ldw	r2,-12(fp)
8112b0f0:	1000041e 	bne	r2,zero,8112b104 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112b0f4:	e0bfff17 	ldw	r2,-4(fp)
8112b0f8:	00c00104 	movi	r3,4
8112b0fc:	10c00005 	stb	r3,0(r2)
        return;
8112b100:	00002c06 	br	8112b1b4 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112b104:	e0bffd17 	ldw	r2,-12(fp)
8112b108:	10800003 	ldbu	r2,0(r2)
8112b10c:	10803fcc 	andi	r2,r2,255
8112b110:	108000e0 	cmpeqi	r2,r2,3
8112b114:	1000041e 	bne	r2,zero,8112b128 <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8112b118:	e0bfff17 	ldw	r2,-4(fp)
8112b11c:	00c00044 	movi	r3,1
8112b120:	10c00005 	stb	r3,0(r2)
        return;
8112b124:	00002306 	br	8112b1b4 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b128:	0005303a 	rdctl	r2,status
8112b12c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b130:	e0fffc17 	ldw	r3,-16(fp)
8112b134:	00bfff84 	movi	r2,-2
8112b138:	1884703a 	and	r2,r3,r2
8112b13c:	1001703a 	wrctl	status,r2
  
  return context;
8112b140:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112b144:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
8112b148:	e0bfff17 	ldw	r2,-4(fp)
8112b14c:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
8112b150:	e0bffd17 	ldw	r2,-12(fp)
8112b154:	1080020b 	ldhu	r2,8(r2)
8112b158:	10bfffcc 	andi	r2,r2,65535
8112b15c:	10000426 	beq	r2,zero,8112b170 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
8112b160:	e0bffd17 	ldw	r2,-12(fp)
8112b164:	e0fffe0b 	ldhu	r3,-8(fp)
8112b168:	10c0020d 	sth	r3,8(r2)
8112b16c:	00000b06 	br	8112b19c <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
8112b170:	e0bffd17 	ldw	r2,-12(fp)
8112b174:	10800283 	ldbu	r2,10(r2)
8112b178:	10803fcc 	andi	r2,r2,255
8112b17c:	1000041e 	bne	r2,zero,8112b190 <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
8112b180:	e0bffd17 	ldw	r2,-12(fp)
8112b184:	e0fffe0b 	ldhu	r3,-8(fp)
8112b188:	10c0020d 	sth	r3,8(r2)
8112b18c:	00000306 	br	8112b19c <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
8112b190:	e0bfff17 	ldw	r2,-4(fp)
8112b194:	00c01244 	movi	r3,73
8112b198:	10c00005 	stb	r3,0(r2)
8112b19c:	e0bffa17 	ldw	r2,-24(fp)
8112b1a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b1a4:	e0bffb17 	ldw	r2,-20(fp)
8112b1a8:	1001703a 	wrctl	status,r2
8112b1ac:	00000106 	br	8112b1b4 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112b1b0:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
8112b1b4:	e037883a 	mov	sp,fp
8112b1b8:	df000017 	ldw	fp,0(sp)
8112b1bc:	dec00104 	addi	sp,sp,4
8112b1c0:	f800283a 	ret

8112b1c4 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
8112b1c4:	defff104 	addi	sp,sp,-60
8112b1c8:	de00012e 	bgeu	sp,et,8112b1d0 <OSTaskChangePrio+0xc>
8112b1cc:	003b68fa 	trap	3
8112b1d0:	dfc00e15 	stw	ra,56(sp)
8112b1d4:	df000d15 	stw	fp,52(sp)
8112b1d8:	df000d04 	addi	fp,sp,52
8112b1dc:	2007883a 	mov	r3,r4
8112b1e0:	2805883a 	mov	r2,r5
8112b1e4:	e0fffe05 	stb	r3,-8(fp)
8112b1e8:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8112b1ec:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8112b1f0:	e0bffe03 	ldbu	r2,-8(fp)
8112b1f4:	10800a30 	cmpltui	r2,r2,40
8112b1f8:	1000051e 	bne	r2,zero,8112b210 <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
8112b1fc:	e0bffe03 	ldbu	r2,-8(fp)
8112b200:	10803fe0 	cmpeqi	r2,r2,255
8112b204:	1000021e 	bne	r2,zero,8112b210 <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
8112b208:	00800a84 	movi	r2,42
8112b20c:	00012606 	br	8112b6a8 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8112b210:	e0bfff03 	ldbu	r2,-4(fp)
8112b214:	10800a30 	cmpltui	r2,r2,40
8112b218:	1000021e 	bne	r2,zero,8112b224 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
8112b21c:	00800a84 	movi	r2,42
8112b220:	00012106 	br	8112b6a8 <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b224:	0005303a 	rdctl	r2,status
8112b228:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b22c:	e0fffd17 	ldw	r3,-12(fp)
8112b230:	00bfff84 	movi	r2,-2
8112b234:	1884703a 	and	r2,r3,r2
8112b238:	1001703a 	wrctl	status,r2
  
  return context;
8112b23c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112b240:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
8112b244:	e0ffff03 	ldbu	r3,-4(fp)
8112b248:	00a045b4 	movhi	r2,33046
8112b24c:	10904e04 	addi	r2,r2,16696
8112b250:	18c7883a 	add	r3,r3,r3
8112b254:	18c7883a 	add	r3,r3,r3
8112b258:	10c5883a 	add	r2,r2,r3
8112b25c:	10800017 	ldw	r2,0(r2)
8112b260:	10000626 	beq	r2,zero,8112b27c <OSTaskChangePrio+0xb8>
8112b264:	e0bff517 	ldw	r2,-44(fp)
8112b268:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b26c:	e0bff617 	ldw	r2,-40(fp)
8112b270:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
8112b274:	00800a04 	movi	r2,40
8112b278:	00010b06 	br	8112b6a8 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
8112b27c:	e0bffe03 	ldbu	r2,-8(fp)
8112b280:	10803fd8 	cmpnei	r2,r2,255
8112b284:	1000031e 	bne	r2,zero,8112b294 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
8112b288:	d0a09017 	ldw	r2,-32192(gp)
8112b28c:	10800c83 	ldbu	r2,50(r2)
8112b290:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
8112b294:	e0fffe03 	ldbu	r3,-8(fp)
8112b298:	00a045b4 	movhi	r2,33046
8112b29c:	10904e04 	addi	r2,r2,16696
8112b2a0:	18c7883a 	add	r3,r3,r3
8112b2a4:	18c7883a 	add	r3,r3,r3
8112b2a8:	10c5883a 	add	r2,r2,r3
8112b2ac:	10800017 	ldw	r2,0(r2)
8112b2b0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
8112b2b4:	e0bff817 	ldw	r2,-32(fp)
8112b2b8:	1000061e 	bne	r2,zero,8112b2d4 <OSTaskChangePrio+0x110>
8112b2bc:	e0bff517 	ldw	r2,-44(fp)
8112b2c0:	e0bff715 	stw	r2,-36(fp)
8112b2c4:	e0bff717 	ldw	r2,-36(fp)
8112b2c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8112b2cc:	00800a44 	movi	r2,41
8112b2d0:	0000f506 	br	8112b6a8 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
8112b2d4:	e0bff817 	ldw	r2,-32(fp)
8112b2d8:	10800058 	cmpnei	r2,r2,1
8112b2dc:	1000061e 	bne	r2,zero,8112b2f8 <OSTaskChangePrio+0x134>
8112b2e0:	e0bff517 	ldw	r2,-44(fp)
8112b2e4:	e0bff915 	stw	r2,-28(fp)
8112b2e8:	e0bff917 	ldw	r2,-28(fp)
8112b2ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8112b2f0:	008010c4 	movi	r2,67
8112b2f4:	0000ec06 	br	8112b6a8 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
8112b2f8:	e0bfff03 	ldbu	r2,-4(fp)
8112b2fc:	1004d0fa 	srli	r2,r2,3
8112b300:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
8112b304:	e0bfff03 	ldbu	r2,-4(fp)
8112b308:	108001cc 	andi	r2,r2,7
8112b30c:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8112b310:	e0bffb03 	ldbu	r2,-20(fp)
8112b314:	00c00044 	movi	r3,1
8112b318:	1884983a 	sll	r2,r3,r2
8112b31c:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8112b320:	e0bffb43 	ldbu	r2,-19(fp)
8112b324:	00c00044 	movi	r3,1
8112b328:	1884983a 	sll	r2,r3,r2
8112b32c:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
8112b330:	e0fffe03 	ldbu	r3,-8(fp)
8112b334:	00a045b4 	movhi	r2,33046
8112b338:	10904e04 	addi	r2,r2,16696
8112b33c:	18c7883a 	add	r3,r3,r3
8112b340:	18c7883a 	add	r3,r3,r3
8112b344:	10c5883a 	add	r2,r2,r3
8112b348:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
8112b34c:	e0ffff03 	ldbu	r3,-4(fp)
8112b350:	00a045b4 	movhi	r2,33046
8112b354:	10904e04 	addi	r2,r2,16696
8112b358:	18c7883a 	add	r3,r3,r3
8112b35c:	18c7883a 	add	r3,r3,r3
8112b360:	10c5883a 	add	r2,r2,r3
8112b364:	e0fff817 	ldw	r3,-32(fp)
8112b368:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
8112b36c:	e0bff817 	ldw	r2,-32(fp)
8112b370:	10800d03 	ldbu	r2,52(r2)
8112b374:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
8112b378:	e0bff817 	ldw	r2,-32(fp)
8112b37c:	10800d83 	ldbu	r2,54(r2)
8112b380:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
8112b384:	e0bff817 	ldw	r2,-32(fp)
8112b388:	10800d43 	ldbu	r2,53(r2)
8112b38c:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8112b390:	e0fffc03 	ldbu	r3,-16(fp)
8112b394:	d0a08c44 	addi	r2,gp,-32207
8112b398:	1885883a 	add	r2,r3,r2
8112b39c:	10c00003 	ldbu	r3,0(r2)
8112b3a0:	e0bffc83 	ldbu	r2,-14(fp)
8112b3a4:	1884703a 	and	r2,r3,r2
8112b3a8:	10803fcc 	andi	r2,r2,255
8112b3ac:	10002826 	beq	r2,zero,8112b450 <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
8112b3b0:	e0fffc03 	ldbu	r3,-16(fp)
8112b3b4:	e13ffc03 	ldbu	r4,-16(fp)
8112b3b8:	d0a08c44 	addi	r2,gp,-32207
8112b3bc:	2085883a 	add	r2,r4,r2
8112b3c0:	10800003 	ldbu	r2,0(r2)
8112b3c4:	1009883a 	mov	r4,r2
8112b3c8:	e0bffc83 	ldbu	r2,-14(fp)
8112b3cc:	0084303a 	nor	r2,zero,r2
8112b3d0:	2084703a 	and	r2,r4,r2
8112b3d4:	1009883a 	mov	r4,r2
8112b3d8:	d0a08c44 	addi	r2,gp,-32207
8112b3dc:	1885883a 	add	r2,r3,r2
8112b3e0:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
8112b3e4:	e0fffc03 	ldbu	r3,-16(fp)
8112b3e8:	d0a08c44 	addi	r2,gp,-32207
8112b3ec:	1885883a 	add	r2,r3,r2
8112b3f0:	10800003 	ldbu	r2,0(r2)
8112b3f4:	10803fcc 	andi	r2,r2,255
8112b3f8:	1000061e 	bne	r2,zero,8112b414 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
8112b3fc:	e0bffc43 	ldbu	r2,-15(fp)
8112b400:	0084303a 	nor	r2,zero,r2
8112b404:	1007883a 	mov	r3,r2
8112b408:	d0a08c03 	ldbu	r2,-32208(gp)
8112b40c:	1884703a 	and	r2,r3,r2
8112b410:	d0a08c05 	stb	r2,-32208(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
8112b414:	d0e08c03 	ldbu	r3,-32208(gp)
8112b418:	e0bffb83 	ldbu	r2,-18(fp)
8112b41c:	1884b03a 	or	r2,r3,r2
8112b420:	d0a08c05 	stb	r2,-32208(gp)
         OSRdyTbl[y_new] |= bitx_new;
8112b424:	e0fffb03 	ldbu	r3,-20(fp)
8112b428:	e13ffb03 	ldbu	r4,-20(fp)
8112b42c:	d0a08c44 	addi	r2,gp,-32207
8112b430:	2085883a 	add	r2,r4,r2
8112b434:	11000003 	ldbu	r4,0(r2)
8112b438:	e0bffbc3 	ldbu	r2,-17(fp)
8112b43c:	2084b03a 	or	r2,r4,r2
8112b440:	1009883a 	mov	r4,r2
8112b444:	d0a08c44 	addi	r2,gp,-32207
8112b448:	1885883a 	add	r2,r3,r2
8112b44c:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
8112b450:	e0bff817 	ldw	r2,-32(fp)
8112b454:	10800717 	ldw	r2,28(r2)
8112b458:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
8112b45c:	e0bff317 	ldw	r2,-52(fp)
8112b460:	10003326 	beq	r2,zero,8112b530 <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
8112b464:	e0bffc03 	ldbu	r2,-16(fp)
8112b468:	e0fffc03 	ldbu	r3,-16(fp)
8112b46c:	e13ff317 	ldw	r4,-52(fp)
8112b470:	20c7883a 	add	r3,r4,r3
8112b474:	18c002c4 	addi	r3,r3,11
8112b478:	18c00003 	ldbu	r3,0(r3)
8112b47c:	1809883a 	mov	r4,r3
8112b480:	e0fffc83 	ldbu	r3,-14(fp)
8112b484:	00c6303a 	nor	r3,zero,r3
8112b488:	20c6703a 	and	r3,r4,r3
8112b48c:	1809883a 	mov	r4,r3
8112b490:	e0fff317 	ldw	r3,-52(fp)
8112b494:	1885883a 	add	r2,r3,r2
8112b498:	108002c4 	addi	r2,r2,11
8112b49c:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8112b4a0:	e0bffc03 	ldbu	r2,-16(fp)
8112b4a4:	e0fff317 	ldw	r3,-52(fp)
8112b4a8:	1885883a 	add	r2,r3,r2
8112b4ac:	108002c4 	addi	r2,r2,11
8112b4b0:	10800003 	ldbu	r2,0(r2)
8112b4b4:	10803fcc 	andi	r2,r2,255
8112b4b8:	1000091e 	bne	r2,zero,8112b4e0 <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
8112b4bc:	e0bff317 	ldw	r2,-52(fp)
8112b4c0:	10800283 	ldbu	r2,10(r2)
8112b4c4:	1007883a 	mov	r3,r2
8112b4c8:	e0bffc43 	ldbu	r2,-15(fp)
8112b4cc:	0084303a 	nor	r2,zero,r2
8112b4d0:	1884703a 	and	r2,r3,r2
8112b4d4:	1007883a 	mov	r3,r2
8112b4d8:	e0bff317 	ldw	r2,-52(fp)
8112b4dc:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8112b4e0:	e0bff317 	ldw	r2,-52(fp)
8112b4e4:	10c00283 	ldbu	r3,10(r2)
8112b4e8:	e0bffb83 	ldbu	r2,-18(fp)
8112b4ec:	1884b03a 	or	r2,r3,r2
8112b4f0:	1007883a 	mov	r3,r2
8112b4f4:	e0bff317 	ldw	r2,-52(fp)
8112b4f8:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
8112b4fc:	e0bffb03 	ldbu	r2,-20(fp)
8112b500:	e0fffb03 	ldbu	r3,-20(fp)
8112b504:	e13ff317 	ldw	r4,-52(fp)
8112b508:	20c7883a 	add	r3,r4,r3
8112b50c:	18c002c4 	addi	r3,r3,11
8112b510:	19000003 	ldbu	r4,0(r3)
8112b514:	e0fffbc3 	ldbu	r3,-17(fp)
8112b518:	20c6b03a 	or	r3,r4,r3
8112b51c:	1809883a 	mov	r4,r3
8112b520:	e0fff317 	ldw	r3,-52(fp)
8112b524:	1885883a 	add	r2,r3,r2
8112b528:	108002c4 	addi	r2,r2,11
8112b52c:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
8112b530:	e0bff817 	ldw	r2,-32(fp)
8112b534:	10800817 	ldw	r2,32(r2)
8112b538:	10004226 	beq	r2,zero,8112b644 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
8112b53c:	e0bff817 	ldw	r2,-32(fp)
8112b540:	10800817 	ldw	r2,32(r2)
8112b544:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
8112b548:	e0bff417 	ldw	r2,-48(fp)
8112b54c:	10800017 	ldw	r2,0(r2)
8112b550:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
8112b554:	00003906 	br	8112b63c <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
8112b558:	e0bffc03 	ldbu	r2,-16(fp)
8112b55c:	e0fffc03 	ldbu	r3,-16(fp)
8112b560:	e13ff317 	ldw	r4,-52(fp)
8112b564:	20c7883a 	add	r3,r4,r3
8112b568:	18c002c4 	addi	r3,r3,11
8112b56c:	18c00003 	ldbu	r3,0(r3)
8112b570:	1809883a 	mov	r4,r3
8112b574:	e0fffc83 	ldbu	r3,-14(fp)
8112b578:	00c6303a 	nor	r3,zero,r3
8112b57c:	20c6703a 	and	r3,r4,r3
8112b580:	1809883a 	mov	r4,r3
8112b584:	e0fff317 	ldw	r3,-52(fp)
8112b588:	1885883a 	add	r2,r3,r2
8112b58c:	108002c4 	addi	r2,r2,11
8112b590:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
8112b594:	e0bffc03 	ldbu	r2,-16(fp)
8112b598:	e0fff317 	ldw	r3,-52(fp)
8112b59c:	1885883a 	add	r2,r3,r2
8112b5a0:	108002c4 	addi	r2,r2,11
8112b5a4:	10800003 	ldbu	r2,0(r2)
8112b5a8:	10803fcc 	andi	r2,r2,255
8112b5ac:	1000091e 	bne	r2,zero,8112b5d4 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
8112b5b0:	e0bff317 	ldw	r2,-52(fp)
8112b5b4:	10800283 	ldbu	r2,10(r2)
8112b5b8:	1007883a 	mov	r3,r2
8112b5bc:	e0bffc43 	ldbu	r2,-15(fp)
8112b5c0:	0084303a 	nor	r2,zero,r2
8112b5c4:	1884703a 	and	r2,r3,r2
8112b5c8:	1007883a 	mov	r3,r2
8112b5cc:	e0bff317 	ldw	r2,-52(fp)
8112b5d0:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
8112b5d4:	e0bff317 	ldw	r2,-52(fp)
8112b5d8:	10c00283 	ldbu	r3,10(r2)
8112b5dc:	e0bffb83 	ldbu	r2,-18(fp)
8112b5e0:	1884b03a 	or	r2,r3,r2
8112b5e4:	1007883a 	mov	r3,r2
8112b5e8:	e0bff317 	ldw	r2,-52(fp)
8112b5ec:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8112b5f0:	e0bffb03 	ldbu	r2,-20(fp)
8112b5f4:	e0fffb03 	ldbu	r3,-20(fp)
8112b5f8:	e13ff317 	ldw	r4,-52(fp)
8112b5fc:	20c7883a 	add	r3,r4,r3
8112b600:	18c002c4 	addi	r3,r3,11
8112b604:	19000003 	ldbu	r4,0(r3)
8112b608:	e0fffbc3 	ldbu	r3,-17(fp)
8112b60c:	20c6b03a 	or	r3,r4,r3
8112b610:	1809883a 	mov	r4,r3
8112b614:	e0fff317 	ldw	r3,-52(fp)
8112b618:	1885883a 	add	r2,r3,r2
8112b61c:	108002c4 	addi	r2,r2,11
8112b620:	11000005 	stb	r4,0(r2)
            pevents++;
8112b624:	e0bff417 	ldw	r2,-48(fp)
8112b628:	10800104 	addi	r2,r2,4
8112b62c:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
8112b630:	e0bff417 	ldw	r2,-48(fp)
8112b634:	10800017 	ldw	r2,0(r2)
8112b638:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
8112b63c:	e0bff317 	ldw	r2,-52(fp)
8112b640:	103fc51e 	bne	r2,zero,8112b558 <__reset+0xfb10b558>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
8112b644:	e0bff817 	ldw	r2,-32(fp)
8112b648:	e0ffff03 	ldbu	r3,-4(fp)
8112b64c:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
8112b650:	e0bff817 	ldw	r2,-32(fp)
8112b654:	e0fffb03 	ldbu	r3,-20(fp)
8112b658:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
8112b65c:	e0bff817 	ldw	r2,-32(fp)
8112b660:	e0fffb43 	ldbu	r3,-19(fp)
8112b664:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
8112b668:	e0bff817 	ldw	r2,-32(fp)
8112b66c:	e0fffb83 	ldbu	r3,-18(fp)
8112b670:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
8112b674:	e0bff817 	ldw	r2,-32(fp)
8112b678:	e0fffbc3 	ldbu	r3,-17(fp)
8112b67c:	10c00d45 	stb	r3,53(r2)
8112b680:	e0bff517 	ldw	r2,-44(fp)
8112b684:	e0bffa15 	stw	r2,-24(fp)
8112b688:	e0bffa17 	ldw	r2,-24(fp)
8112b68c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112b690:	d0a07f03 	ldbu	r2,-32260(gp)
8112b694:	10803fcc 	andi	r2,r2,255
8112b698:	10800058 	cmpnei	r2,r2,1
8112b69c:	1000011e 	bne	r2,zero,8112b6a4 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
8112b6a0:	1125c540 	call	81125c54 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112b6a4:	0005883a 	mov	r2,zero
}
8112b6a8:	e037883a 	mov	sp,fp
8112b6ac:	dfc00117 	ldw	ra,4(sp)
8112b6b0:	df000017 	ldw	fp,0(sp)
8112b6b4:	dec00204 	addi	sp,sp,8
8112b6b8:	f800283a 	ret

8112b6bc <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
8112b6bc:	deffee04 	addi	sp,sp,-72
8112b6c0:	de00012e 	bgeu	sp,et,8112b6c8 <OSTaskCreate+0xc>
8112b6c4:	003b68fa 	trap	3
8112b6c8:	dfc01115 	stw	ra,68(sp)
8112b6cc:	df001015 	stw	fp,64(sp)
8112b6d0:	df001004 	addi	fp,sp,64
8112b6d4:	e13ffc15 	stw	r4,-16(fp)
8112b6d8:	e17ffd15 	stw	r5,-12(fp)
8112b6dc:	e1bffe15 	stw	r6,-8(fp)
8112b6e0:	3805883a 	mov	r2,r7
8112b6e4:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112b6e8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112b6ec:	e0bfff03 	ldbu	r2,-4(fp)
8112b6f0:	10800a70 	cmpltui	r2,r2,41
8112b6f4:	1000021e 	bne	r2,zero,8112b700 <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
8112b6f8:	00800a84 	movi	r2,42
8112b6fc:	00005706 	br	8112b85c <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b700:	0005303a 	rdctl	r2,status
8112b704:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b708:	e0fffb17 	ldw	r3,-20(fp)
8112b70c:	00bfff84 	movi	r2,-2
8112b710:	1884703a 	and	r2,r3,r2
8112b714:	1001703a 	wrctl	status,r2
  
  return context;
8112b718:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112b71c:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112b720:	d0a08f03 	ldbu	r2,-32196(gp)
8112b724:	10803fcc 	andi	r2,r2,255
8112b728:	10000626 	beq	r2,zero,8112b744 <OSTaskCreate+0x88>
8112b72c:	e0bff317 	ldw	r2,-52(fp)
8112b730:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b734:	e0bff417 	ldw	r2,-48(fp)
8112b738:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112b73c:	00800f04 	movi	r2,60
8112b740:	00004606 	br	8112b85c <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112b744:	e0ffff03 	ldbu	r3,-4(fp)
8112b748:	00a045b4 	movhi	r2,33046
8112b74c:	10904e04 	addi	r2,r2,16696
8112b750:	18c7883a 	add	r3,r3,r3
8112b754:	18c7883a 	add	r3,r3,r3
8112b758:	10c5883a 	add	r2,r2,r3
8112b75c:	10800017 	ldw	r2,0(r2)
8112b760:	1000391e 	bne	r2,zero,8112b848 <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112b764:	e0ffff03 	ldbu	r3,-4(fp)
8112b768:	00a045b4 	movhi	r2,33046
8112b76c:	10904e04 	addi	r2,r2,16696
8112b770:	18c7883a 	add	r3,r3,r3
8112b774:	18c7883a 	add	r3,r3,r3
8112b778:	10c5883a 	add	r2,r2,r3
8112b77c:	00c00044 	movi	r3,1
8112b780:	10c00015 	stw	r3,0(r2)
8112b784:	e0bff317 	ldw	r2,-52(fp)
8112b788:	e0bff515 	stw	r2,-44(fp)
8112b78c:	e0bff517 	ldw	r2,-44(fp)
8112b790:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
8112b794:	000f883a 	mov	r7,zero
8112b798:	e1bffe17 	ldw	r6,-8(fp)
8112b79c:	e17ffd17 	ldw	r5,-12(fp)
8112b7a0:	e13ffc17 	ldw	r4,-16(fp)
8112b7a4:	1137d340 	call	81137d34 <OSTaskStkInit>
8112b7a8:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
8112b7ac:	e0bfff03 	ldbu	r2,-4(fp)
8112b7b0:	d8000215 	stw	zero,8(sp)
8112b7b4:	d8000115 	stw	zero,4(sp)
8112b7b8:	d8000015 	stw	zero,0(sp)
8112b7bc:	000f883a 	mov	r7,zero
8112b7c0:	000d883a 	mov	r6,zero
8112b7c4:	e17ff717 	ldw	r5,-36(fp)
8112b7c8:	1009883a 	mov	r4,r2
8112b7cc:	112609c0 	call	8112609c <OS_TCBInit>
8112b7d0:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
8112b7d4:	e0bff803 	ldbu	r2,-32(fp)
8112b7d8:	1000061e 	bne	r2,zero,8112b7f4 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
8112b7dc:	d0a07f03 	ldbu	r2,-32260(gp)
8112b7e0:	10803fcc 	andi	r2,r2,255
8112b7e4:	10800058 	cmpnei	r2,r2,1
8112b7e8:	1000151e 	bne	r2,zero,8112b840 <OSTaskCreate+0x184>
                OS_Sched();
8112b7ec:	1125c540 	call	81125c54 <OS_Sched>
8112b7f0:	00001306 	br	8112b840 <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b7f4:	0005303a 	rdctl	r2,status
8112b7f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b7fc:	e0fffa17 	ldw	r3,-24(fp)
8112b800:	00bfff84 	movi	r2,-2
8112b804:	1884703a 	and	r2,r3,r2
8112b808:	1001703a 	wrctl	status,r2
  
  return context;
8112b80c:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112b810:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
8112b814:	e0ffff03 	ldbu	r3,-4(fp)
8112b818:	00a045b4 	movhi	r2,33046
8112b81c:	10904e04 	addi	r2,r2,16696
8112b820:	18c7883a 	add	r3,r3,r3
8112b824:	18c7883a 	add	r3,r3,r3
8112b828:	10c5883a 	add	r2,r2,r3
8112b82c:	10000015 	stw	zero,0(r2)
8112b830:	e0bff317 	ldw	r2,-52(fp)
8112b834:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b838:	e0bff617 	ldw	r2,-40(fp)
8112b83c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112b840:	e0bff803 	ldbu	r2,-32(fp)
8112b844:	00000506 	br	8112b85c <OSTaskCreate+0x1a0>
8112b848:	e0bff317 	ldw	r2,-52(fp)
8112b84c:	e0bff915 	stw	r2,-28(fp)
8112b850:	e0bff917 	ldw	r2,-28(fp)
8112b854:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112b858:	00800a04 	movi	r2,40
}
8112b85c:	e037883a 	mov	sp,fp
8112b860:	dfc00117 	ldw	ra,4(sp)
8112b864:	df000017 	ldw	fp,0(sp)
8112b868:	dec00204 	addi	sp,sp,8
8112b86c:	f800283a 	ret

8112b870 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
8112b870:	deffec04 	addi	sp,sp,-80
8112b874:	de00012e 	bgeu	sp,et,8112b87c <OSTaskCreateExt+0xc>
8112b878:	003b68fa 	trap	3
8112b87c:	dfc01315 	stw	ra,76(sp)
8112b880:	df001215 	stw	fp,72(sp)
8112b884:	df001204 	addi	fp,sp,72
8112b888:	e13ffa15 	stw	r4,-24(fp)
8112b88c:	e17ffb15 	stw	r5,-20(fp)
8112b890:	e1bffc15 	stw	r6,-16(fp)
8112b894:	3809883a 	mov	r4,r7
8112b898:	e0c00217 	ldw	r3,8(fp)
8112b89c:	e0800617 	ldw	r2,24(fp)
8112b8a0:	e13ffd05 	stb	r4,-12(fp)
8112b8a4:	e0fffe0d 	sth	r3,-8(fp)
8112b8a8:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112b8ac:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112b8b0:	e0bffd03 	ldbu	r2,-12(fp)
8112b8b4:	10800a70 	cmpltui	r2,r2,41
8112b8b8:	1000021e 	bne	r2,zero,8112b8c4 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
8112b8bc:	00800a84 	movi	r2,42
8112b8c0:	00006106 	br	8112ba48 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b8c4:	0005303a 	rdctl	r2,status
8112b8c8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b8cc:	e0fff917 	ldw	r3,-28(fp)
8112b8d0:	00bfff84 	movi	r2,-2
8112b8d4:	1884703a 	and	r2,r3,r2
8112b8d8:	1001703a 	wrctl	status,r2
  
  return context;
8112b8dc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112b8e0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112b8e4:	d0a08f03 	ldbu	r2,-32196(gp)
8112b8e8:	10803fcc 	andi	r2,r2,255
8112b8ec:	10000626 	beq	r2,zero,8112b908 <OSTaskCreateExt+0x98>
8112b8f0:	e0bff117 	ldw	r2,-60(fp)
8112b8f4:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b8f8:	e0bff217 	ldw	r2,-56(fp)
8112b8fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112b900:	00800f04 	movi	r2,60
8112b904:	00005006 	br	8112ba48 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112b908:	e0fffd03 	ldbu	r3,-12(fp)
8112b90c:	00a045b4 	movhi	r2,33046
8112b910:	10904e04 	addi	r2,r2,16696
8112b914:	18c7883a 	add	r3,r3,r3
8112b918:	18c7883a 	add	r3,r3,r3
8112b91c:	10c5883a 	add	r2,r2,r3
8112b920:	10800017 	ldw	r2,0(r2)
8112b924:	1000431e 	bne	r2,zero,8112ba34 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112b928:	e0fffd03 	ldbu	r3,-12(fp)
8112b92c:	00a045b4 	movhi	r2,33046
8112b930:	10904e04 	addi	r2,r2,16696
8112b934:	18c7883a 	add	r3,r3,r3
8112b938:	18c7883a 	add	r3,r3,r3
8112b93c:	10c5883a 	add	r2,r2,r3
8112b940:	00c00044 	movi	r3,1
8112b944:	10c00015 	stw	r3,0(r2)
8112b948:	e0bff117 	ldw	r2,-60(fp)
8112b94c:	e0bff315 	stw	r2,-52(fp)
8112b950:	e0bff317 	ldw	r2,-52(fp)
8112b954:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
8112b958:	e0bfff0b 	ldhu	r2,-4(fp)
8112b95c:	100d883a 	mov	r6,r2
8112b960:	e1400417 	ldw	r5,16(fp)
8112b964:	e1000317 	ldw	r4,12(fp)
8112b968:	112c9180 	call	8112c918 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
8112b96c:	e0bfff0b 	ldhu	r2,-4(fp)
8112b970:	100f883a 	mov	r7,r2
8112b974:	e1bffc17 	ldw	r6,-16(fp)
8112b978:	e17ffb17 	ldw	r5,-20(fp)
8112b97c:	e13ffa17 	ldw	r4,-24(fp)
8112b980:	1137d340 	call	81137d34 <OSTaskStkInit>
8112b984:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
8112b988:	e0fffd03 	ldbu	r3,-12(fp)
8112b98c:	e13ffe0b 	ldhu	r4,-8(fp)
8112b990:	e0bfff0b 	ldhu	r2,-4(fp)
8112b994:	d8800215 	stw	r2,8(sp)
8112b998:	e0800517 	ldw	r2,20(fp)
8112b99c:	d8800115 	stw	r2,4(sp)
8112b9a0:	e0800417 	ldw	r2,16(fp)
8112b9a4:	d8800015 	stw	r2,0(sp)
8112b9a8:	200f883a 	mov	r7,r4
8112b9ac:	e1800317 	ldw	r6,12(fp)
8112b9b0:	e17ff517 	ldw	r5,-44(fp)
8112b9b4:	1809883a 	mov	r4,r3
8112b9b8:	112609c0 	call	8112609c <OS_TCBInit>
8112b9bc:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
8112b9c0:	e0bff603 	ldbu	r2,-40(fp)
8112b9c4:	1000061e 	bne	r2,zero,8112b9e0 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
8112b9c8:	d0a07f03 	ldbu	r2,-32260(gp)
8112b9cc:	10803fcc 	andi	r2,r2,255
8112b9d0:	10800058 	cmpnei	r2,r2,1
8112b9d4:	1000151e 	bne	r2,zero,8112ba2c <OSTaskCreateExt+0x1bc>
                OS_Sched();
8112b9d8:	1125c540 	call	81125c54 <OS_Sched>
8112b9dc:	00001306 	br	8112ba2c <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b9e0:	0005303a 	rdctl	r2,status
8112b9e4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b9e8:	e0fff817 	ldw	r3,-32(fp)
8112b9ec:	00bfff84 	movi	r2,-2
8112b9f0:	1884703a 	and	r2,r3,r2
8112b9f4:	1001703a 	wrctl	status,r2
  
  return context;
8112b9f8:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112b9fc:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
8112ba00:	e0fffd03 	ldbu	r3,-12(fp)
8112ba04:	00a045b4 	movhi	r2,33046
8112ba08:	10904e04 	addi	r2,r2,16696
8112ba0c:	18c7883a 	add	r3,r3,r3
8112ba10:	18c7883a 	add	r3,r3,r3
8112ba14:	10c5883a 	add	r2,r2,r3
8112ba18:	10000015 	stw	zero,0(r2)
8112ba1c:	e0bff117 	ldw	r2,-60(fp)
8112ba20:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ba24:	e0bff417 	ldw	r2,-48(fp)
8112ba28:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112ba2c:	e0bff603 	ldbu	r2,-40(fp)
8112ba30:	00000506 	br	8112ba48 <OSTaskCreateExt+0x1d8>
8112ba34:	e0bff117 	ldw	r2,-60(fp)
8112ba38:	e0bff715 	stw	r2,-36(fp)
8112ba3c:	e0bff717 	ldw	r2,-36(fp)
8112ba40:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112ba44:	00800a04 	movi	r2,40
}
8112ba48:	e037883a 	mov	sp,fp
8112ba4c:	dfc00117 	ldw	ra,4(sp)
8112ba50:	df000017 	ldw	fp,0(sp)
8112ba54:	dec00204 	addi	sp,sp,8
8112ba58:	f800283a 	ret

8112ba5c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
8112ba5c:	defff404 	addi	sp,sp,-48
8112ba60:	de00012e 	bgeu	sp,et,8112ba68 <OSTaskDel+0xc>
8112ba64:	003b68fa 	trap	3
8112ba68:	dfc00b15 	stw	ra,44(sp)
8112ba6c:	df000a15 	stw	fp,40(sp)
8112ba70:	df000a04 	addi	fp,sp,40
8112ba74:	2005883a 	mov	r2,r4
8112ba78:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
8112ba7c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
8112ba80:	d0a08f03 	ldbu	r2,-32196(gp)
8112ba84:	10803fcc 	andi	r2,r2,255
8112ba88:	10000226 	beq	r2,zero,8112ba94 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
8112ba8c:	00801004 	movi	r2,64
8112ba90:	0000c006 	br	8112bd94 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
8112ba94:	e0bfff03 	ldbu	r2,-4(fp)
8112ba98:	10800a18 	cmpnei	r2,r2,40
8112ba9c:	1000021e 	bne	r2,zero,8112baa8 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
8112baa0:	00800f84 	movi	r2,62
8112baa4:	0000bb06 	br	8112bd94 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
8112baa8:	e0bfff03 	ldbu	r2,-4(fp)
8112baac:	10800a30 	cmpltui	r2,r2,40
8112bab0:	1000051e 	bne	r2,zero,8112bac8 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
8112bab4:	e0bfff03 	ldbu	r2,-4(fp)
8112bab8:	10803fe0 	cmpeqi	r2,r2,255
8112babc:	1000021e 	bne	r2,zero,8112bac8 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
8112bac0:	00800a84 	movi	r2,42
8112bac4:	0000b306 	br	8112bd94 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bac8:	0005303a 	rdctl	r2,status
8112bacc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bad0:	e0fffe17 	ldw	r3,-8(fp)
8112bad4:	00bfff84 	movi	r2,-2
8112bad8:	1884703a 	and	r2,r3,r2
8112badc:	1001703a 	wrctl	status,r2
  
  return context;
8112bae0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
8112bae4:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
8112bae8:	e0bfff03 	ldbu	r2,-4(fp)
8112baec:	10803fd8 	cmpnei	r2,r2,255
8112baf0:	1000031e 	bne	r2,zero,8112bb00 <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
8112baf4:	d0a09017 	ldw	r2,-32192(gp)
8112baf8:	10800c83 	ldbu	r2,50(r2)
8112bafc:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112bb00:	e0ffff03 	ldbu	r3,-4(fp)
8112bb04:	00a045b4 	movhi	r2,33046
8112bb08:	10904e04 	addi	r2,r2,16696
8112bb0c:	18c7883a 	add	r3,r3,r3
8112bb10:	18c7883a 	add	r3,r3,r3
8112bb14:	10c5883a 	add	r2,r2,r3
8112bb18:	10800017 	ldw	r2,0(r2)
8112bb1c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
8112bb20:	e0bff817 	ldw	r2,-32(fp)
8112bb24:	1000061e 	bne	r2,zero,8112bb40 <OSTaskDel+0xe4>
8112bb28:	e0bff617 	ldw	r2,-40(fp)
8112bb2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bb30:	e0bff717 	ldw	r2,-36(fp)
8112bb34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112bb38:	008010c4 	movi	r2,67
8112bb3c:	00009506 	br	8112bd94 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
8112bb40:	e0bff817 	ldw	r2,-32(fp)
8112bb44:	10800058 	cmpnei	r2,r2,1
8112bb48:	1000061e 	bne	r2,zero,8112bb64 <OSTaskDel+0x108>
8112bb4c:	e0bff617 	ldw	r2,-40(fp)
8112bb50:	e0bff915 	stw	r2,-28(fp)
8112bb54:	e0bff917 	ldw	r2,-28(fp)
8112bb58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112bb5c:	00800f44 	movi	r2,61
8112bb60:	00008c06 	br	8112bd94 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
8112bb64:	e0bff817 	ldw	r2,-32(fp)
8112bb68:	10800d03 	ldbu	r2,52(r2)
8112bb6c:	10c03fcc 	andi	r3,r2,255
8112bb70:	e0bff817 	ldw	r2,-32(fp)
8112bb74:	10800d03 	ldbu	r2,52(r2)
8112bb78:	11003fcc 	andi	r4,r2,255
8112bb7c:	d0a08c44 	addi	r2,gp,-32207
8112bb80:	2085883a 	add	r2,r4,r2
8112bb84:	10800003 	ldbu	r2,0(r2)
8112bb88:	1009883a 	mov	r4,r2
8112bb8c:	e0bff817 	ldw	r2,-32(fp)
8112bb90:	10800d43 	ldbu	r2,53(r2)
8112bb94:	0084303a 	nor	r2,zero,r2
8112bb98:	2084703a 	and	r2,r4,r2
8112bb9c:	1009883a 	mov	r4,r2
8112bba0:	d0a08c44 	addi	r2,gp,-32207
8112bba4:	1885883a 	add	r2,r3,r2
8112bba8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8112bbac:	e0bff817 	ldw	r2,-32(fp)
8112bbb0:	10800d03 	ldbu	r2,52(r2)
8112bbb4:	10c03fcc 	andi	r3,r2,255
8112bbb8:	d0a08c44 	addi	r2,gp,-32207
8112bbbc:	1885883a 	add	r2,r3,r2
8112bbc0:	10800003 	ldbu	r2,0(r2)
8112bbc4:	10803fcc 	andi	r2,r2,255
8112bbc8:	1000071e 	bne	r2,zero,8112bbe8 <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8112bbcc:	e0bff817 	ldw	r2,-32(fp)
8112bbd0:	10800d83 	ldbu	r2,54(r2)
8112bbd4:	0084303a 	nor	r2,zero,r2
8112bbd8:	1007883a 	mov	r3,r2
8112bbdc:	d0a08c03 	ldbu	r2,-32208(gp)
8112bbe0:	1884703a 	and	r2,r3,r2
8112bbe4:	d0a08c05 	stb	r2,-32208(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
8112bbe8:	e0bff817 	ldw	r2,-32(fp)
8112bbec:	10800717 	ldw	r2,28(r2)
8112bbf0:	10000526 	beq	r2,zero,8112bc08 <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
8112bbf4:	e0bff817 	ldw	r2,-32(fp)
8112bbf8:	10800717 	ldw	r2,28(r2)
8112bbfc:	100b883a 	mov	r5,r2
8112bc00:	e13ff817 	ldw	r4,-32(fp)
8112bc04:	11255a80 	call	811255a8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8112bc08:	e0bff817 	ldw	r2,-32(fp)
8112bc0c:	10800817 	ldw	r2,32(r2)
8112bc10:	10000526 	beq	r2,zero,8112bc28 <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112bc14:	e0bff817 	ldw	r2,-32(fp)
8112bc18:	10800817 	ldw	r2,32(r2)
8112bc1c:	100b883a 	mov	r5,r2
8112bc20:	e13ff817 	ldw	r4,-32(fp)
8112bc24:	11256680 	call	81125668 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8112bc28:	e0bff817 	ldw	r2,-32(fp)
8112bc2c:	10800a17 	ldw	r2,40(r2)
8112bc30:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
8112bc34:	e0bffb17 	ldw	r2,-20(fp)
8112bc38:	10000226 	beq	r2,zero,8112bc44 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
8112bc3c:	e13ffb17 	ldw	r4,-20(fp)
8112bc40:	1127c400 	call	81127c40 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
8112bc44:	e0bff817 	ldw	r2,-32(fp)
8112bc48:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
8112bc4c:	e0bff817 	ldw	r2,-32(fp)
8112bc50:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112bc54:	e0bff817 	ldw	r2,-32(fp)
8112bc58:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
8112bc5c:	d0a07d03 	ldbu	r2,-32268(gp)
8112bc60:	10803fcc 	andi	r2,r2,255
8112bc64:	10803fe0 	cmpeqi	r2,r2,255
8112bc68:	1000031e 	bne	r2,zero,8112bc78 <OSTaskDel+0x21c>
        OSLockNesting++;
8112bc6c:	d0a07d03 	ldbu	r2,-32268(gp)
8112bc70:	10800044 	addi	r2,r2,1
8112bc74:	d0a07d05 	stb	r2,-32268(gp)
8112bc78:	e0bff617 	ldw	r2,-40(fp)
8112bc7c:	e0bffd15 	stw	r2,-12(fp)
8112bc80:	e0bffd17 	ldw	r2,-12(fp)
8112bc84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8112bc88:	11251700 	call	81125170 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bc8c:	0005303a 	rdctl	r2,status
8112bc90:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bc94:	e0fffa17 	ldw	r3,-24(fp)
8112bc98:	00bfff84 	movi	r2,-2
8112bc9c:	1884703a 	and	r2,r3,r2
8112bca0:	1001703a 	wrctl	status,r2
  
  return context;
8112bca4:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
8112bca8:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8112bcac:	d0a07d03 	ldbu	r2,-32268(gp)
8112bcb0:	10803fcc 	andi	r2,r2,255
8112bcb4:	10000326 	beq	r2,zero,8112bcc4 <OSTaskDel+0x268>
        OSLockNesting--;
8112bcb8:	d0a07d03 	ldbu	r2,-32268(gp)
8112bcbc:	10bfffc4 	addi	r2,r2,-1
8112bcc0:	d0a07d05 	stb	r2,-32268(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
8112bcc4:	e13ff817 	ldw	r4,-32(fp)
8112bcc8:	1137ec40 	call	81137ec4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8112bccc:	d0a08843 	ldbu	r2,-32223(gp)
8112bcd0:	10bfffc4 	addi	r2,r2,-1
8112bcd4:	d0a08845 	stb	r2,-32223(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
8112bcd8:	e0ffff03 	ldbu	r3,-4(fp)
8112bcdc:	00a045b4 	movhi	r2,33046
8112bce0:	10904e04 	addi	r2,r2,16696
8112bce4:	18c7883a 	add	r3,r3,r3
8112bce8:	18c7883a 	add	r3,r3,r3
8112bcec:	10c5883a 	add	r2,r2,r3
8112bcf0:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
8112bcf4:	e0bff817 	ldw	r2,-32(fp)
8112bcf8:	10800617 	ldw	r2,24(r2)
8112bcfc:	1000071e 	bne	r2,zero,8112bd1c <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
8112bd00:	e0bff817 	ldw	r2,-32(fp)
8112bd04:	10800517 	ldw	r2,20(r2)
8112bd08:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
8112bd0c:	e0bff817 	ldw	r2,-32(fp)
8112bd10:	10800517 	ldw	r2,20(r2)
8112bd14:	d0a08215 	stw	r2,-32248(gp)
8112bd18:	00000a06 	br	8112bd44 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
8112bd1c:	e0bff817 	ldw	r2,-32(fp)
8112bd20:	10800617 	ldw	r2,24(r2)
8112bd24:	e0fff817 	ldw	r3,-32(fp)
8112bd28:	18c00517 	ldw	r3,20(r3)
8112bd2c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
8112bd30:	e0bff817 	ldw	r2,-32(fp)
8112bd34:	10800517 	ldw	r2,20(r2)
8112bd38:	e0fff817 	ldw	r3,-32(fp)
8112bd3c:	18c00617 	ldw	r3,24(r3)
8112bd40:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
8112bd44:	d0e08717 	ldw	r3,-32228(gp)
8112bd48:	e0bff817 	ldw	r2,-32(fp)
8112bd4c:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
8112bd50:	e0bff817 	ldw	r2,-32(fp)
8112bd54:	d0a08715 	stw	r2,-32228(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
8112bd58:	e0bff817 	ldw	r2,-32(fp)
8112bd5c:	00c00fc4 	movi	r3,63
8112bd60:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112bd64:	e0bff817 	ldw	r2,-32(fp)
8112bd68:	10001345 	stb	zero,77(r2)
8112bd6c:	e0bff617 	ldw	r2,-40(fp)
8112bd70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bd74:	e0bffc17 	ldw	r2,-16(fp)
8112bd78:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112bd7c:	d0a07f03 	ldbu	r2,-32260(gp)
8112bd80:	10803fcc 	andi	r2,r2,255
8112bd84:	10800058 	cmpnei	r2,r2,1
8112bd88:	1000011e 	bne	r2,zero,8112bd90 <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
8112bd8c:	1125c540 	call	81125c54 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112bd90:	0005883a 	mov	r2,zero
}
8112bd94:	e037883a 	mov	sp,fp
8112bd98:	dfc00117 	ldw	ra,4(sp)
8112bd9c:	df000017 	ldw	fp,0(sp)
8112bda0:	dec00204 	addi	sp,sp,8
8112bda4:	f800283a 	ret

8112bda8 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
8112bda8:	defff504 	addi	sp,sp,-44
8112bdac:	de00012e 	bgeu	sp,et,8112bdb4 <OSTaskDelReq+0xc>
8112bdb0:	003b68fa 	trap	3
8112bdb4:	df000a15 	stw	fp,40(sp)
8112bdb8:	df000a04 	addi	fp,sp,40
8112bdbc:	2005883a 	mov	r2,r4
8112bdc0:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112bdc4:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
8112bdc8:	e0bfff03 	ldbu	r2,-4(fp)
8112bdcc:	10800a18 	cmpnei	r2,r2,40
8112bdd0:	1000021e 	bne	r2,zero,8112bddc <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
8112bdd4:	00800f84 	movi	r2,62
8112bdd8:	00004506 	br	8112bef0 <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112bddc:	e0bfff03 	ldbu	r2,-4(fp)
8112bde0:	10800a30 	cmpltui	r2,r2,40
8112bde4:	1000051e 	bne	r2,zero,8112bdfc <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
8112bde8:	e0bfff03 	ldbu	r2,-4(fp)
8112bdec:	10803fe0 	cmpeqi	r2,r2,255
8112bdf0:	1000021e 	bne	r2,zero,8112bdfc <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
8112bdf4:	00800a84 	movi	r2,42
8112bdf8:	00003d06 	br	8112bef0 <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8112bdfc:	e0bfff03 	ldbu	r2,-4(fp)
8112be00:	10803fd8 	cmpnei	r2,r2,255
8112be04:	1000111e 	bne	r2,zero,8112be4c <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112be08:	0005303a 	rdctl	r2,status
8112be0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112be10:	e0fff917 	ldw	r3,-28(fp)
8112be14:	00bfff84 	movi	r2,-2
8112be18:	1884703a 	and	r2,r3,r2
8112be1c:	1001703a 	wrctl	status,r2
  
  return context;
8112be20:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
8112be24:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
8112be28:	d0a09017 	ldw	r2,-32192(gp)
8112be2c:	10800dc3 	ldbu	r2,55(r2)
8112be30:	e0bff805 	stb	r2,-32(fp)
8112be34:	e0bff617 	ldw	r2,-40(fp)
8112be38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112be3c:	e0bffe17 	ldw	r2,-8(fp)
8112be40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
8112be44:	e0bff803 	ldbu	r2,-32(fp)
8112be48:	00002906 	br	8112bef0 <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112be4c:	0005303a 	rdctl	r2,status
8112be50:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112be54:	e0fff717 	ldw	r3,-36(fp)
8112be58:	00bfff84 	movi	r2,-2
8112be5c:	1884703a 	and	r2,r3,r2
8112be60:	1001703a 	wrctl	status,r2
  
  return context;
8112be64:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
8112be68:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112be6c:	e0ffff03 	ldbu	r3,-4(fp)
8112be70:	00a045b4 	movhi	r2,33046
8112be74:	10904e04 	addi	r2,r2,16696
8112be78:	18c7883a 	add	r3,r3,r3
8112be7c:	18c7883a 	add	r3,r3,r3
8112be80:	10c5883a 	add	r2,r2,r3
8112be84:	10800017 	ldw	r2,0(r2)
8112be88:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
8112be8c:	e0bffb17 	ldw	r2,-20(fp)
8112be90:	1000061e 	bne	r2,zero,8112beac <OSTaskDelReq+0x104>
8112be94:	e0bff617 	ldw	r2,-40(fp)
8112be98:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112be9c:	e0bffa17 	ldw	r2,-24(fp)
8112bea0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
8112bea4:	008010c4 	movi	r2,67
8112bea8:	00001106 	br	8112bef0 <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
8112beac:	e0bffb17 	ldw	r2,-20(fp)
8112beb0:	10800058 	cmpnei	r2,r2,1
8112beb4:	1000061e 	bne	r2,zero,8112bed0 <OSTaskDelReq+0x128>
8112beb8:	e0bff617 	ldw	r2,-40(fp)
8112bebc:	e0bffc15 	stw	r2,-16(fp)
8112bec0:	e0bffc17 	ldw	r2,-16(fp)
8112bec4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112bec8:	00800f44 	movi	r2,61
8112becc:	00000806 	br	8112bef0 <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
8112bed0:	e0bffb17 	ldw	r2,-20(fp)
8112bed4:	00c00fc4 	movi	r3,63
8112bed8:	10c00dc5 	stb	r3,55(r2)
8112bedc:	e0bff617 	ldw	r2,-40(fp)
8112bee0:	e0bffd15 	stw	r2,-12(fp)
8112bee4:	e0bffd17 	ldw	r2,-12(fp)
8112bee8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112beec:	0005883a 	mov	r2,zero
}
8112bef0:	e037883a 	mov	sp,fp
8112bef4:	df000017 	ldw	fp,0(sp)
8112bef8:	dec00104 	addi	sp,sp,4
8112befc:	f800283a 	ret

8112bf00 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112bf00:	defff404 	addi	sp,sp,-48
8112bf04:	de00012e 	bgeu	sp,et,8112bf0c <OSTaskNameGet+0xc>
8112bf08:	003b68fa 	trap	3
8112bf0c:	dfc00b15 	stw	ra,44(sp)
8112bf10:	df000a15 	stw	fp,40(sp)
8112bf14:	df000a04 	addi	fp,sp,40
8112bf18:	2005883a 	mov	r2,r4
8112bf1c:	e17ffe15 	stw	r5,-8(fp)
8112bf20:	e1bfff15 	stw	r6,-4(fp)
8112bf24:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
8112bf28:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
8112bf2c:	e0bfff17 	ldw	r2,-4(fp)
8112bf30:	1000021e 	bne	r2,zero,8112bf3c <OSTaskNameGet+0x3c>
        return (0);
8112bf34:	0005883a 	mov	r2,zero
8112bf38:	00005406 	br	8112c08c <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
8112bf3c:	e0bffd03 	ldbu	r2,-12(fp)
8112bf40:	10800a70 	cmpltui	r2,r2,41
8112bf44:	1000081e 	bne	r2,zero,8112bf68 <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
8112bf48:	e0bffd03 	ldbu	r2,-12(fp)
8112bf4c:	10803fe0 	cmpeqi	r2,r2,255
8112bf50:	1000051e 	bne	r2,zero,8112bf68 <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
8112bf54:	e0bfff17 	ldw	r2,-4(fp)
8112bf58:	00c00a84 	movi	r3,42
8112bf5c:	10c00005 	stb	r3,0(r2)
            return (0);
8112bf60:	0005883a 	mov	r2,zero
8112bf64:	00004906 	br	8112c08c <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
8112bf68:	e0bffe17 	ldw	r2,-8(fp)
8112bf6c:	1000051e 	bne	r2,zero,8112bf84 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
8112bf70:	e0bfff17 	ldw	r2,-4(fp)
8112bf74:	00c00304 	movi	r3,12
8112bf78:	10c00005 	stb	r3,0(r2)
        return (0);
8112bf7c:	0005883a 	mov	r2,zero
8112bf80:	00004206 	br	8112c08c <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
8112bf84:	d0a08f03 	ldbu	r2,-32196(gp)
8112bf88:	10803fcc 	andi	r2,r2,255
8112bf8c:	10000526 	beq	r2,zero,8112bfa4 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
8112bf90:	e0bfff17 	ldw	r2,-4(fp)
8112bf94:	00c00444 	movi	r3,17
8112bf98:	10c00005 	stb	r3,0(r2)
        return (0);
8112bf9c:	0005883a 	mov	r2,zero
8112bfa0:	00003a06 	br	8112c08c <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bfa4:	0005303a 	rdctl	r2,status
8112bfa8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bfac:	e0fffc17 	ldw	r3,-16(fp)
8112bfb0:	00bfff84 	movi	r2,-2
8112bfb4:	1884703a 	and	r2,r3,r2
8112bfb8:	1001703a 	wrctl	status,r2
  
  return context;
8112bfbc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112bfc0:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
8112bfc4:	e0bffd03 	ldbu	r2,-12(fp)
8112bfc8:	10803fd8 	cmpnei	r2,r2,255
8112bfcc:	1000031e 	bne	r2,zero,8112bfdc <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
8112bfd0:	d0a09017 	ldw	r2,-32192(gp)
8112bfd4:	10800c83 	ldbu	r2,50(r2)
8112bfd8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112bfdc:	e0fffd03 	ldbu	r3,-12(fp)
8112bfe0:	00a045b4 	movhi	r2,33046
8112bfe4:	10904e04 	addi	r2,r2,16696
8112bfe8:	18c7883a 	add	r3,r3,r3
8112bfec:	18c7883a 	add	r3,r3,r3
8112bff0:	10c5883a 	add	r2,r2,r3
8112bff4:	10800017 	ldw	r2,0(r2)
8112bff8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
8112bffc:	e0bff817 	ldw	r2,-32(fp)
8112c000:	1000091e 	bne	r2,zero,8112c028 <OSTaskNameGet+0x128>
8112c004:	e0bff617 	ldw	r2,-40(fp)
8112c008:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c00c:	e0bff717 	ldw	r2,-36(fp)
8112c010:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112c014:	e0bfff17 	ldw	r2,-4(fp)
8112c018:	00c010c4 	movi	r3,67
8112c01c:	10c00005 	stb	r3,0(r2)
        return (0);
8112c020:	0005883a 	mov	r2,zero
8112c024:	00001906 	br	8112c08c <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
8112c028:	e0bff817 	ldw	r2,-32(fp)
8112c02c:	10800058 	cmpnei	r2,r2,1
8112c030:	1000091e 	bne	r2,zero,8112c058 <OSTaskNameGet+0x158>
8112c034:	e0bff617 	ldw	r2,-40(fp)
8112c038:	e0bff915 	stw	r2,-28(fp)
8112c03c:	e0bff917 	ldw	r2,-28(fp)
8112c040:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112c044:	e0bfff17 	ldw	r2,-4(fp)
8112c048:	00c010c4 	movi	r3,67
8112c04c:	10c00005 	stb	r3,0(r2)
        return (0);
8112c050:	0005883a 	mov	r2,zero
8112c054:	00000d06 	br	8112c08c <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
8112c058:	e0bff817 	ldw	r2,-32(fp)
8112c05c:	10801304 	addi	r2,r2,76
8112c060:	100b883a 	mov	r5,r2
8112c064:	e13ffe17 	ldw	r4,-8(fp)
8112c068:	1125da80 	call	81125da8 <OS_StrCopy>
8112c06c:	e0bffb05 	stb	r2,-20(fp)
8112c070:	e0bff617 	ldw	r2,-40(fp)
8112c074:	e0bffa15 	stw	r2,-24(fp)
8112c078:	e0bffa17 	ldw	r2,-24(fp)
8112c07c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c080:	e0bfff17 	ldw	r2,-4(fp)
8112c084:	10000005 	stb	zero,0(r2)
    return (len);
8112c088:	e0bffb03 	ldbu	r2,-20(fp)
}
8112c08c:	e037883a 	mov	sp,fp
8112c090:	dfc00117 	ldw	ra,4(sp)
8112c094:	df000017 	ldw	fp,0(sp)
8112c098:	dec00204 	addi	sp,sp,8
8112c09c:	f800283a 	ret

8112c0a0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112c0a0:	defff304 	addi	sp,sp,-52
8112c0a4:	de00012e 	bgeu	sp,et,8112c0ac <OSTaskNameSet+0xc>
8112c0a8:	003b68fa 	trap	3
8112c0ac:	dfc00c15 	stw	ra,48(sp)
8112c0b0:	df000b15 	stw	fp,44(sp)
8112c0b4:	df000b04 	addi	fp,sp,44
8112c0b8:	2005883a 	mov	r2,r4
8112c0bc:	e17ffe15 	stw	r5,-8(fp)
8112c0c0:	e1bfff15 	stw	r6,-4(fp)
8112c0c4:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112c0c8:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112c0cc:	e0bfff17 	ldw	r2,-4(fp)
8112c0d0:	10005c26 	beq	r2,zero,8112c244 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
8112c0d4:	e0bffd03 	ldbu	r2,-12(fp)
8112c0d8:	10800a70 	cmpltui	r2,r2,41
8112c0dc:	1000071e 	bne	r2,zero,8112c0fc <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
8112c0e0:	e0bffd03 	ldbu	r2,-12(fp)
8112c0e4:	10803fe0 	cmpeqi	r2,r2,255
8112c0e8:	1000041e 	bne	r2,zero,8112c0fc <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
8112c0ec:	e0bfff17 	ldw	r2,-4(fp)
8112c0f0:	00c00a84 	movi	r3,42
8112c0f4:	10c00005 	stb	r3,0(r2)
            return;
8112c0f8:	00005306 	br	8112c248 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
8112c0fc:	e0bffe17 	ldw	r2,-8(fp)
8112c100:	1000041e 	bne	r2,zero,8112c114 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
8112c104:	e0bfff17 	ldw	r2,-4(fp)
8112c108:	00c00304 	movi	r3,12
8112c10c:	10c00005 	stb	r3,0(r2)
        return;
8112c110:	00004d06 	br	8112c248 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
8112c114:	d0a08f03 	ldbu	r2,-32196(gp)
8112c118:	10803fcc 	andi	r2,r2,255
8112c11c:	10000426 	beq	r2,zero,8112c130 <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
8112c120:	e0bfff17 	ldw	r2,-4(fp)
8112c124:	00c00484 	movi	r3,18
8112c128:	10c00005 	stb	r3,0(r2)
        return;
8112c12c:	00004606 	br	8112c248 <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c130:	0005303a 	rdctl	r2,status
8112c134:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c138:	e0fffc17 	ldw	r3,-16(fp)
8112c13c:	00bfff84 	movi	r2,-2
8112c140:	1884703a 	and	r2,r3,r2
8112c144:	1001703a 	wrctl	status,r2
  
  return context;
8112c148:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c14c:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
8112c150:	e0bffd03 	ldbu	r2,-12(fp)
8112c154:	10803fd8 	cmpnei	r2,r2,255
8112c158:	1000031e 	bne	r2,zero,8112c168 <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
8112c15c:	d0a09017 	ldw	r2,-32192(gp)
8112c160:	10800c83 	ldbu	r2,50(r2)
8112c164:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112c168:	e0fffd03 	ldbu	r3,-12(fp)
8112c16c:	00a045b4 	movhi	r2,33046
8112c170:	10904e04 	addi	r2,r2,16696
8112c174:	18c7883a 	add	r3,r3,r3
8112c178:	18c7883a 	add	r3,r3,r3
8112c17c:	10c5883a 	add	r2,r2,r3
8112c180:	10800017 	ldw	r2,0(r2)
8112c184:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
8112c188:	e0bff717 	ldw	r2,-36(fp)
8112c18c:	1000081e 	bne	r2,zero,8112c1b0 <OSTaskNameSet+0x110>
8112c190:	e0bff517 	ldw	r2,-44(fp)
8112c194:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c198:	e0bff617 	ldw	r2,-40(fp)
8112c19c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112c1a0:	e0bfff17 	ldw	r2,-4(fp)
8112c1a4:	00c010c4 	movi	r3,67
8112c1a8:	10c00005 	stb	r3,0(r2)
        return;
8112c1ac:	00002606 	br	8112c248 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
8112c1b0:	e0bff717 	ldw	r2,-36(fp)
8112c1b4:	10800058 	cmpnei	r2,r2,1
8112c1b8:	1000081e 	bne	r2,zero,8112c1dc <OSTaskNameSet+0x13c>
8112c1bc:	e0bff517 	ldw	r2,-44(fp)
8112c1c0:	e0bff815 	stw	r2,-32(fp)
8112c1c4:	e0bff817 	ldw	r2,-32(fp)
8112c1c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112c1cc:	e0bfff17 	ldw	r2,-4(fp)
8112c1d0:	00c010c4 	movi	r3,67
8112c1d4:	10c00005 	stb	r3,0(r2)
        return;
8112c1d8:	00001b06 	br	8112c248 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
8112c1dc:	e13ffe17 	ldw	r4,-8(fp)
8112c1e0:	1125e240 	call	81125e24 <OS_StrLen>
8112c1e4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
8112c1e8:	e0bffa03 	ldbu	r2,-24(fp)
8112c1ec:	10800830 	cmpltui	r2,r2,32
8112c1f0:	1000081e 	bne	r2,zero,8112c214 <OSTaskNameSet+0x174>
8112c1f4:	e0bff517 	ldw	r2,-44(fp)
8112c1f8:	e0bff915 	stw	r2,-28(fp)
8112c1fc:	e0bff917 	ldw	r2,-28(fp)
8112c200:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
8112c204:	e0bfff17 	ldw	r2,-4(fp)
8112c208:	00c01044 	movi	r3,65
8112c20c:	10c00005 	stb	r3,0(r2)
        return;
8112c210:	00000d06 	br	8112c248 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
8112c214:	e0bff717 	ldw	r2,-36(fp)
8112c218:	10801304 	addi	r2,r2,76
8112c21c:	e17ffe17 	ldw	r5,-8(fp)
8112c220:	1009883a 	mov	r4,r2
8112c224:	1125da80 	call	81125da8 <OS_StrCopy>
8112c228:	e0bff517 	ldw	r2,-44(fp)
8112c22c:	e0bffb15 	stw	r2,-20(fp)
8112c230:	e0bffb17 	ldw	r2,-20(fp)
8112c234:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c238:	e0bfff17 	ldw	r2,-4(fp)
8112c23c:	10000005 	stb	zero,0(r2)
8112c240:	00000106 	br	8112c248 <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
8112c244:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112c248:	e037883a 	mov	sp,fp
8112c24c:	dfc00117 	ldw	ra,4(sp)
8112c250:	df000017 	ldw	fp,0(sp)
8112c254:	dec00204 	addi	sp,sp,8
8112c258:	f800283a 	ret

8112c25c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
8112c25c:	defff404 	addi	sp,sp,-48
8112c260:	de00012e 	bgeu	sp,et,8112c268 <OSTaskResume+0xc>
8112c264:	003b68fa 	trap	3
8112c268:	dfc00b15 	stw	ra,44(sp)
8112c26c:	df000a15 	stw	fp,40(sp)
8112c270:	df000a04 	addi	fp,sp,40
8112c274:	2005883a 	mov	r2,r4
8112c278:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112c27c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
8112c280:	e0bfff03 	ldbu	r2,-4(fp)
8112c284:	10800a30 	cmpltui	r2,r2,40
8112c288:	1000021e 	bne	r2,zero,8112c294 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
8112c28c:	00800a84 	movi	r2,42
8112c290:	00006406 	br	8112c424 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c294:	0005303a 	rdctl	r2,status
8112c298:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c29c:	e0fffe17 	ldw	r3,-8(fp)
8112c2a0:	00bfff84 	movi	r2,-2
8112c2a4:	1884703a 	and	r2,r3,r2
8112c2a8:	1001703a 	wrctl	status,r2
  
  return context;
8112c2ac:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c2b0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112c2b4:	e0ffff03 	ldbu	r3,-4(fp)
8112c2b8:	00a045b4 	movhi	r2,33046
8112c2bc:	10904e04 	addi	r2,r2,16696
8112c2c0:	18c7883a 	add	r3,r3,r3
8112c2c4:	18c7883a 	add	r3,r3,r3
8112c2c8:	10c5883a 	add	r2,r2,r3
8112c2cc:	10800017 	ldw	r2,0(r2)
8112c2d0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
8112c2d4:	e0bff817 	ldw	r2,-32(fp)
8112c2d8:	1000061e 	bne	r2,zero,8112c2f4 <OSTaskResume+0x98>
8112c2dc:	e0bff617 	ldw	r2,-40(fp)
8112c2e0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c2e4:	e0bff717 	ldw	r2,-36(fp)
8112c2e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
8112c2ec:	00801184 	movi	r2,70
8112c2f0:	00004c06 	br	8112c424 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
8112c2f4:	e0bff817 	ldw	r2,-32(fp)
8112c2f8:	10800058 	cmpnei	r2,r2,1
8112c2fc:	1000061e 	bne	r2,zero,8112c318 <OSTaskResume+0xbc>
8112c300:	e0bff617 	ldw	r2,-40(fp)
8112c304:	e0bff915 	stw	r2,-28(fp)
8112c308:	e0bff917 	ldw	r2,-28(fp)
8112c30c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112c310:	008010c4 	movi	r2,67
8112c314:	00004306 	br	8112c424 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
8112c318:	e0bff817 	ldw	r2,-32(fp)
8112c31c:	10800c03 	ldbu	r2,48(r2)
8112c320:	10803fcc 	andi	r2,r2,255
8112c324:	1080020c 	andi	r2,r2,8
8112c328:	10003926 	beq	r2,zero,8112c410 <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
8112c32c:	e0bff817 	ldw	r2,-32(fp)
8112c330:	10c00c03 	ldbu	r3,48(r2)
8112c334:	00bffdc4 	movi	r2,-9
8112c338:	1884703a 	and	r2,r3,r2
8112c33c:	1007883a 	mov	r3,r2
8112c340:	e0bff817 	ldw	r2,-32(fp)
8112c344:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
8112c348:	e0bff817 	ldw	r2,-32(fp)
8112c34c:	10800c03 	ldbu	r2,48(r2)
8112c350:	10803fcc 	andi	r2,r2,255
8112c354:	1000281e 	bne	r2,zero,8112c3f8 <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
8112c358:	e0bff817 	ldw	r2,-32(fp)
8112c35c:	10800b8b 	ldhu	r2,46(r2)
8112c360:	10bfffcc 	andi	r2,r2,65535
8112c364:	10001f1e 	bne	r2,zero,8112c3e4 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
8112c368:	e0bff817 	ldw	r2,-32(fp)
8112c36c:	10c00d83 	ldbu	r3,54(r2)
8112c370:	d0a08c03 	ldbu	r2,-32208(gp)
8112c374:	1884b03a 	or	r2,r3,r2
8112c378:	d0a08c05 	stb	r2,-32208(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112c37c:	e0bff817 	ldw	r2,-32(fp)
8112c380:	10800d03 	ldbu	r2,52(r2)
8112c384:	10c03fcc 	andi	r3,r2,255
8112c388:	e0bff817 	ldw	r2,-32(fp)
8112c38c:	10800d03 	ldbu	r2,52(r2)
8112c390:	11003fcc 	andi	r4,r2,255
8112c394:	d0a08c44 	addi	r2,gp,-32207
8112c398:	2085883a 	add	r2,r4,r2
8112c39c:	11000003 	ldbu	r4,0(r2)
8112c3a0:	e0bff817 	ldw	r2,-32(fp)
8112c3a4:	10800d43 	ldbu	r2,53(r2)
8112c3a8:	2084b03a 	or	r2,r4,r2
8112c3ac:	1009883a 	mov	r4,r2
8112c3b0:	d0a08c44 	addi	r2,gp,-32207
8112c3b4:	1885883a 	add	r2,r3,r2
8112c3b8:	11000005 	stb	r4,0(r2)
8112c3bc:	e0bff617 	ldw	r2,-40(fp)
8112c3c0:	e0bffa15 	stw	r2,-24(fp)
8112c3c4:	e0bffa17 	ldw	r2,-24(fp)
8112c3c8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
8112c3cc:	d0a07f03 	ldbu	r2,-32260(gp)
8112c3d0:	10803fcc 	andi	r2,r2,255
8112c3d4:	10800058 	cmpnei	r2,r2,1
8112c3d8:	10000b1e 	bne	r2,zero,8112c408 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
8112c3dc:	1125c540 	call	81125c54 <OS_Sched>
8112c3e0:	00000906 	br	8112c408 <OSTaskResume+0x1ac>
8112c3e4:	e0bff617 	ldw	r2,-40(fp)
8112c3e8:	e0bffb15 	stw	r2,-20(fp)
8112c3ec:	e0bffb17 	ldw	r2,-20(fp)
8112c3f0:	1001703a 	wrctl	status,r2
8112c3f4:	00000406 	br	8112c408 <OSTaskResume+0x1ac>
8112c3f8:	e0bff617 	ldw	r2,-40(fp)
8112c3fc:	e0bffc15 	stw	r2,-16(fp)
8112c400:	e0bffc17 	ldw	r2,-16(fp)
8112c404:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8112c408:	0005883a 	mov	r2,zero
8112c40c:	00000506 	br	8112c424 <OSTaskResume+0x1c8>
8112c410:	e0bff617 	ldw	r2,-40(fp)
8112c414:	e0bffd15 	stw	r2,-12(fp)
8112c418:	e0bffd17 	ldw	r2,-12(fp)
8112c41c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
8112c420:	00801104 	movi	r2,68
}
8112c424:	e037883a 	mov	sp,fp
8112c428:	dfc00117 	ldw	ra,4(sp)
8112c42c:	df000017 	ldw	fp,0(sp)
8112c430:	dec00204 	addi	sp,sp,8
8112c434:	f800283a 	ret

8112c438 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
8112c438:	defff304 	addi	sp,sp,-52
8112c43c:	de00012e 	bgeu	sp,et,8112c444 <OSTaskStkChk+0xc>
8112c440:	003b68fa 	trap	3
8112c444:	df000c15 	stw	fp,48(sp)
8112c448:	df000c04 	addi	fp,sp,48
8112c44c:	2005883a 	mov	r2,r4
8112c450:	e17fff15 	stw	r5,-4(fp)
8112c454:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112c458:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
8112c45c:	e0bffe03 	ldbu	r2,-8(fp)
8112c460:	10800a70 	cmpltui	r2,r2,41
8112c464:	1000051e 	bne	r2,zero,8112c47c <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
8112c468:	e0bffe03 	ldbu	r2,-8(fp)
8112c46c:	10803fe0 	cmpeqi	r2,r2,255
8112c470:	1000021e 	bne	r2,zero,8112c47c <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
8112c474:	00800a84 	movi	r2,42
8112c478:	00005d06 	br	8112c5f0 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
8112c47c:	e0bfff17 	ldw	r2,-4(fp)
8112c480:	1000021e 	bne	r2,zero,8112c48c <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
8112c484:	00800244 	movi	r2,9
8112c488:	00005906 	br	8112c5f0 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
8112c48c:	e0bfff17 	ldw	r2,-4(fp)
8112c490:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
8112c494:	e0bfff17 	ldw	r2,-4(fp)
8112c498:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c49c:	0005303a 	rdctl	r2,status
8112c4a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c4a4:	e0fffd17 	ldw	r3,-12(fp)
8112c4a8:	00bfff84 	movi	r2,-2
8112c4ac:	1884703a 	and	r2,r3,r2
8112c4b0:	1001703a 	wrctl	status,r2
  
  return context;
8112c4b4:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
8112c4b8:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
8112c4bc:	e0bffe03 	ldbu	r2,-8(fp)
8112c4c0:	10803fd8 	cmpnei	r2,r2,255
8112c4c4:	1000031e 	bne	r2,zero,8112c4d4 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
8112c4c8:	d0a09017 	ldw	r2,-32192(gp)
8112c4cc:	10800c83 	ldbu	r2,50(r2)
8112c4d0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112c4d4:	e0fffe03 	ldbu	r3,-8(fp)
8112c4d8:	00a045b4 	movhi	r2,33046
8112c4dc:	10904e04 	addi	r2,r2,16696
8112c4e0:	18c7883a 	add	r3,r3,r3
8112c4e4:	18c7883a 	add	r3,r3,r3
8112c4e8:	10c5883a 	add	r2,r2,r3
8112c4ec:	10800017 	ldw	r2,0(r2)
8112c4f0:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
8112c4f4:	e0bff817 	ldw	r2,-32(fp)
8112c4f8:	1000061e 	bne	r2,zero,8112c514 <OSTaskStkChk+0xdc>
8112c4fc:	e0bff617 	ldw	r2,-40(fp)
8112c500:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c504:	e0bff717 	ldw	r2,-36(fp)
8112c508:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112c50c:	008010c4 	movi	r2,67
8112c510:	00003706 	br	8112c5f0 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112c514:	e0bff817 	ldw	r2,-32(fp)
8112c518:	10800058 	cmpnei	r2,r2,1
8112c51c:	1000061e 	bne	r2,zero,8112c538 <OSTaskStkChk+0x100>
8112c520:	e0bff617 	ldw	r2,-40(fp)
8112c524:	e0bff915 	stw	r2,-28(fp)
8112c528:	e0bff917 	ldw	r2,-28(fp)
8112c52c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112c530:	008010c4 	movi	r2,67
8112c534:	00002e06 	br	8112c5f0 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
8112c538:	e0bff817 	ldw	r2,-32(fp)
8112c53c:	1080040b 	ldhu	r2,16(r2)
8112c540:	10bfffcc 	andi	r2,r2,65535
8112c544:	1080004c 	andi	r2,r2,1
8112c548:	1000061e 	bne	r2,zero,8112c564 <OSTaskStkChk+0x12c>
8112c54c:	e0bff617 	ldw	r2,-40(fp)
8112c550:	e0bffa15 	stw	r2,-24(fp)
8112c554:	e0bffa17 	ldw	r2,-24(fp)
8112c558:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
8112c55c:	00801144 	movi	r2,69
8112c560:	00002306 	br	8112c5f0 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
8112c564:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
8112c568:	e0bff817 	ldw	r2,-32(fp)
8112c56c:	10800317 	ldw	r2,12(r2)
8112c570:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
8112c574:	e0bff817 	ldw	r2,-32(fp)
8112c578:	10800217 	ldw	r2,8(r2)
8112c57c:	e0bff415 	stw	r2,-48(fp)
8112c580:	e0bff617 	ldw	r2,-40(fp)
8112c584:	e0bffb15 	stw	r2,-20(fp)
8112c588:	e0bffb17 	ldw	r2,-20(fp)
8112c58c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112c590:	00000306 	br	8112c5a0 <OSTaskStkChk+0x168>
        nfree++;
8112c594:	e0bff517 	ldw	r2,-44(fp)
8112c598:	10800044 	addi	r2,r2,1
8112c59c:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112c5a0:	e0bff417 	ldw	r2,-48(fp)
8112c5a4:	10c00104 	addi	r3,r2,4
8112c5a8:	e0fff415 	stw	r3,-48(fp)
8112c5ac:	10800017 	ldw	r2,0(r2)
8112c5b0:	103ff826 	beq	r2,zero,8112c594 <__reset+0xfb10c594>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
8112c5b4:	e0bff517 	ldw	r2,-44(fp)
8112c5b8:	1085883a 	add	r2,r2,r2
8112c5bc:	1085883a 	add	r2,r2,r2
8112c5c0:	1007883a 	mov	r3,r2
8112c5c4:	e0bfff17 	ldw	r2,-4(fp)
8112c5c8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
8112c5cc:	e0fffc17 	ldw	r3,-16(fp)
8112c5d0:	e0bff517 	ldw	r2,-44(fp)
8112c5d4:	1885c83a 	sub	r2,r3,r2
8112c5d8:	1085883a 	add	r2,r2,r2
8112c5dc:	1085883a 	add	r2,r2,r2
8112c5e0:	1007883a 	mov	r3,r2
8112c5e4:	e0bfff17 	ldw	r2,-4(fp)
8112c5e8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
8112c5ec:	0005883a 	mov	r2,zero
}
8112c5f0:	e037883a 	mov	sp,fp
8112c5f4:	df000017 	ldw	fp,0(sp)
8112c5f8:	dec00104 	addi	sp,sp,4
8112c5fc:	f800283a 	ret

8112c600 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
8112c600:	defff504 	addi	sp,sp,-44
8112c604:	de00012e 	bgeu	sp,et,8112c60c <OSTaskSuspend+0xc>
8112c608:	003b68fa 	trap	3
8112c60c:	dfc00a15 	stw	ra,40(sp)
8112c610:	df000915 	stw	fp,36(sp)
8112c614:	df000904 	addi	fp,sp,36
8112c618:	2005883a 	mov	r2,r4
8112c61c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c620:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
8112c624:	e0bfff03 	ldbu	r2,-4(fp)
8112c628:	10800a18 	cmpnei	r2,r2,40
8112c62c:	1000021e 	bne	r2,zero,8112c638 <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
8112c630:	008011c4 	movi	r2,71
8112c634:	00006806 	br	8112c7d8 <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112c638:	e0bfff03 	ldbu	r2,-4(fp)
8112c63c:	10800a30 	cmpltui	r2,r2,40
8112c640:	1000051e 	bne	r2,zero,8112c658 <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
8112c644:	e0bfff03 	ldbu	r2,-4(fp)
8112c648:	10803fe0 	cmpeqi	r2,r2,255
8112c64c:	1000021e 	bne	r2,zero,8112c658 <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
8112c650:	00800a84 	movi	r2,42
8112c654:	00006006 	br	8112c7d8 <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c658:	0005303a 	rdctl	r2,status
8112c65c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c660:	e0fffe17 	ldw	r3,-8(fp)
8112c664:	00bfff84 	movi	r2,-2
8112c668:	1884703a 	and	r2,r3,r2
8112c66c:	1001703a 	wrctl	status,r2
  
  return context;
8112c670:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
8112c674:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
8112c678:	e0bfff03 	ldbu	r2,-4(fp)
8112c67c:	10803fd8 	cmpnei	r2,r2,255
8112c680:	1000061e 	bne	r2,zero,8112c69c <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
8112c684:	d0a09017 	ldw	r2,-32192(gp)
8112c688:	10800c83 	ldbu	r2,50(r2)
8112c68c:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
8112c690:	00800044 	movi	r2,1
8112c694:	e0bff705 	stb	r2,-36(fp)
8112c698:	00000906 	br	8112c6c0 <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
8112c69c:	d0a09017 	ldw	r2,-32192(gp)
8112c6a0:	10800c83 	ldbu	r2,50(r2)
8112c6a4:	10c03fcc 	andi	r3,r2,255
8112c6a8:	e0bfff03 	ldbu	r2,-4(fp)
8112c6ac:	1880031e 	bne	r3,r2,8112c6bc <OSTaskSuspend+0xbc>
        self = OS_TRUE;
8112c6b0:	00800044 	movi	r2,1
8112c6b4:	e0bff705 	stb	r2,-36(fp)
8112c6b8:	00000106 	br	8112c6c0 <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
8112c6bc:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112c6c0:	e0ffff03 	ldbu	r3,-4(fp)
8112c6c4:	00a045b4 	movhi	r2,33046
8112c6c8:	10904e04 	addi	r2,r2,16696
8112c6cc:	18c7883a 	add	r3,r3,r3
8112c6d0:	18c7883a 	add	r3,r3,r3
8112c6d4:	10c5883a 	add	r2,r2,r3
8112c6d8:	10800017 	ldw	r2,0(r2)
8112c6dc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
8112c6e0:	e0bffa17 	ldw	r2,-24(fp)
8112c6e4:	1000061e 	bne	r2,zero,8112c700 <OSTaskSuspend+0x100>
8112c6e8:	e0bff817 	ldw	r2,-32(fp)
8112c6ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c6f0:	e0bff917 	ldw	r2,-28(fp)
8112c6f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
8112c6f8:	00801204 	movi	r2,72
8112c6fc:	00003606 	br	8112c7d8 <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
8112c700:	e0bffa17 	ldw	r2,-24(fp)
8112c704:	10800058 	cmpnei	r2,r2,1
8112c708:	1000061e 	bne	r2,zero,8112c724 <OSTaskSuspend+0x124>
8112c70c:	e0bff817 	ldw	r2,-32(fp)
8112c710:	e0bffb15 	stw	r2,-20(fp)
8112c714:	e0bffb17 	ldw	r2,-20(fp)
8112c718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112c71c:	008010c4 	movi	r2,67
8112c720:	00002d06 	br	8112c7d8 <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
8112c724:	e0bffa17 	ldw	r2,-24(fp)
8112c728:	10800d03 	ldbu	r2,52(r2)
8112c72c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
8112c730:	e0fffd03 	ldbu	r3,-12(fp)
8112c734:	e13ffd03 	ldbu	r4,-12(fp)
8112c738:	d0a08c44 	addi	r2,gp,-32207
8112c73c:	2085883a 	add	r2,r4,r2
8112c740:	10800003 	ldbu	r2,0(r2)
8112c744:	1009883a 	mov	r4,r2
8112c748:	e0bffa17 	ldw	r2,-24(fp)
8112c74c:	10800d43 	ldbu	r2,53(r2)
8112c750:	0084303a 	nor	r2,zero,r2
8112c754:	2084703a 	and	r2,r4,r2
8112c758:	1009883a 	mov	r4,r2
8112c75c:	d0a08c44 	addi	r2,gp,-32207
8112c760:	1885883a 	add	r2,r3,r2
8112c764:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112c768:	e0fffd03 	ldbu	r3,-12(fp)
8112c76c:	d0a08c44 	addi	r2,gp,-32207
8112c770:	1885883a 	add	r2,r3,r2
8112c774:	10800003 	ldbu	r2,0(r2)
8112c778:	10803fcc 	andi	r2,r2,255
8112c77c:	1000071e 	bne	r2,zero,8112c79c <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112c780:	e0bffa17 	ldw	r2,-24(fp)
8112c784:	10800d83 	ldbu	r2,54(r2)
8112c788:	0084303a 	nor	r2,zero,r2
8112c78c:	1007883a 	mov	r3,r2
8112c790:	d0a08c03 	ldbu	r2,-32208(gp)
8112c794:	1884703a 	and	r2,r3,r2
8112c798:	d0a08c05 	stb	r2,-32208(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
8112c79c:	e0bffa17 	ldw	r2,-24(fp)
8112c7a0:	10800c03 	ldbu	r2,48(r2)
8112c7a4:	10800214 	ori	r2,r2,8
8112c7a8:	1007883a 	mov	r3,r2
8112c7ac:	e0bffa17 	ldw	r2,-24(fp)
8112c7b0:	10c00c05 	stb	r3,48(r2)
8112c7b4:	e0bff817 	ldw	r2,-32(fp)
8112c7b8:	e0bffc15 	stw	r2,-16(fp)
8112c7bc:	e0bffc17 	ldw	r2,-16(fp)
8112c7c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
8112c7c4:	e0bff703 	ldbu	r2,-36(fp)
8112c7c8:	10800058 	cmpnei	r2,r2,1
8112c7cc:	1000011e 	bne	r2,zero,8112c7d4 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
8112c7d0:	1125c540 	call	81125c54 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112c7d4:	0005883a 	mov	r2,zero
}
8112c7d8:	e037883a 	mov	sp,fp
8112c7dc:	dfc00117 	ldw	ra,4(sp)
8112c7e0:	df000017 	ldw	fp,0(sp)
8112c7e4:	dec00204 	addi	sp,sp,8
8112c7e8:	f800283a 	ret

8112c7ec <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
8112c7ec:	defff604 	addi	sp,sp,-40
8112c7f0:	de00012e 	bgeu	sp,et,8112c7f8 <OSTaskQuery+0xc>
8112c7f4:	003b68fa 	trap	3
8112c7f8:	dfc00915 	stw	ra,36(sp)
8112c7fc:	df000815 	stw	fp,32(sp)
8112c800:	df000804 	addi	fp,sp,32
8112c804:	2005883a 	mov	r2,r4
8112c808:	e17fff15 	stw	r5,-4(fp)
8112c80c:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c810:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
8112c814:	e0bffe03 	ldbu	r2,-8(fp)
8112c818:	10800a70 	cmpltui	r2,r2,41
8112c81c:	1000051e 	bne	r2,zero,8112c834 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
8112c820:	e0bffe03 	ldbu	r2,-8(fp)
8112c824:	10803fe0 	cmpeqi	r2,r2,255
8112c828:	1000021e 	bne	r2,zero,8112c834 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
8112c82c:	00800a84 	movi	r2,42
8112c830:	00003406 	br	8112c904 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
8112c834:	e0bfff17 	ldw	r2,-4(fp)
8112c838:	1000021e 	bne	r2,zero,8112c844 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
8112c83c:	00800244 	movi	r2,9
8112c840:	00003006 	br	8112c904 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c844:	0005303a 	rdctl	r2,status
8112c848:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c84c:	e0fffd17 	ldw	r3,-12(fp)
8112c850:	00bfff84 	movi	r2,-2
8112c854:	1884703a 	and	r2,r3,r2
8112c858:	1001703a 	wrctl	status,r2
  
  return context;
8112c85c:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c860:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
8112c864:	e0bffe03 	ldbu	r2,-8(fp)
8112c868:	10803fd8 	cmpnei	r2,r2,255
8112c86c:	1000031e 	bne	r2,zero,8112c87c <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
8112c870:	d0a09017 	ldw	r2,-32192(gp)
8112c874:	10800c83 	ldbu	r2,50(r2)
8112c878:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112c87c:	e0fffe03 	ldbu	r3,-8(fp)
8112c880:	00a045b4 	movhi	r2,33046
8112c884:	10904e04 	addi	r2,r2,16696
8112c888:	18c7883a 	add	r3,r3,r3
8112c88c:	18c7883a 	add	r3,r3,r3
8112c890:	10c5883a 	add	r2,r2,r3
8112c894:	10800017 	ldw	r2,0(r2)
8112c898:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
8112c89c:	e0bffa17 	ldw	r2,-24(fp)
8112c8a0:	1000061e 	bne	r2,zero,8112c8bc <OSTaskQuery+0xd0>
8112c8a4:	e0bff817 	ldw	r2,-32(fp)
8112c8a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c8ac:	e0bff917 	ldw	r2,-28(fp)
8112c8b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
8112c8b4:	00800a44 	movi	r2,41
8112c8b8:	00001206 	br	8112c904 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
8112c8bc:	e0bffa17 	ldw	r2,-24(fp)
8112c8c0:	10800058 	cmpnei	r2,r2,1
8112c8c4:	1000061e 	bne	r2,zero,8112c8e0 <OSTaskQuery+0xf4>
8112c8c8:	e0bff817 	ldw	r2,-32(fp)
8112c8cc:	e0bffb15 	stw	r2,-20(fp)
8112c8d0:	e0bffb17 	ldw	r2,-20(fp)
8112c8d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112c8d8:	008010c4 	movi	r2,67
8112c8dc:	00000906 	br	8112c904 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
8112c8e0:	01801b04 	movi	r6,108
8112c8e4:	e17ffa17 	ldw	r5,-24(fp)
8112c8e8:	e13fff17 	ldw	r4,-4(fp)
8112c8ec:	1125be40 	call	81125be4 <OS_MemCopy>
8112c8f0:	e0bff817 	ldw	r2,-32(fp)
8112c8f4:	e0bffc15 	stw	r2,-16(fp)
8112c8f8:	e0bffc17 	ldw	r2,-16(fp)
8112c8fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112c900:	0005883a 	mov	r2,zero
}
8112c904:	e037883a 	mov	sp,fp
8112c908:	dfc00117 	ldw	ra,4(sp)
8112c90c:	df000017 	ldw	fp,0(sp)
8112c910:	dec00204 	addi	sp,sp,8
8112c914:	f800283a 	ret

8112c918 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
8112c918:	defffc04 	addi	sp,sp,-16
8112c91c:	de00012e 	bgeu	sp,et,8112c924 <OS_TaskStkClr+0xc>
8112c920:	003b68fa 	trap	3
8112c924:	df000315 	stw	fp,12(sp)
8112c928:	df000304 	addi	fp,sp,12
8112c92c:	e13ffd15 	stw	r4,-12(fp)
8112c930:	e17ffe15 	stw	r5,-8(fp)
8112c934:	3005883a 	mov	r2,r6
8112c938:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
8112c93c:	e0bfff0b 	ldhu	r2,-4(fp)
8112c940:	1080004c 	andi	r2,r2,1
8112c944:	10000d26 	beq	r2,zero,8112c97c <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
8112c948:	e0bfff0b 	ldhu	r2,-4(fp)
8112c94c:	1080008c 	andi	r2,r2,2
8112c950:	10000a26 	beq	r2,zero,8112c97c <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112c954:	00000706 	br	8112c974 <OS_TaskStkClr+0x5c>
                size--;
8112c958:	e0bffe17 	ldw	r2,-8(fp)
8112c95c:	10bfffc4 	addi	r2,r2,-1
8112c960:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
8112c964:	e0bffd17 	ldw	r2,-12(fp)
8112c968:	10c00104 	addi	r3,r2,4
8112c96c:	e0fffd15 	stw	r3,-12(fp)
8112c970:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112c974:	e0bffe17 	ldw	r2,-8(fp)
8112c978:	103ff71e 	bne	r2,zero,8112c958 <__reset+0xfb10c958>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
8112c97c:	0001883a 	nop
8112c980:	e037883a 	mov	sp,fp
8112c984:	df000017 	ldw	fp,0(sp)
8112c988:	dec00104 	addi	sp,sp,4
8112c98c:	f800283a 	ret

8112c990 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
8112c990:	defff904 	addi	sp,sp,-28
8112c994:	de00012e 	bgeu	sp,et,8112c99c <OSTimeDly+0xc>
8112c998:	003b68fa 	trap	3
8112c99c:	dfc00615 	stw	ra,24(sp)
8112c9a0:	df000515 	stw	fp,20(sp)
8112c9a4:	df000504 	addi	fp,sp,20
8112c9a8:	2005883a 	mov	r2,r4
8112c9ac:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c9b0:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112c9b4:	d0a08f03 	ldbu	r2,-32196(gp)
8112c9b8:	10803fcc 	andi	r2,r2,255
8112c9bc:	1000311e 	bne	r2,zero,8112ca84 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
8112c9c0:	e0bfff0b 	ldhu	r2,-4(fp)
8112c9c4:	10003026 	beq	r2,zero,8112ca88 <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c9c8:	0005303a 	rdctl	r2,status
8112c9cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c9d0:	e0fffe17 	ldw	r3,-8(fp)
8112c9d4:	00bfff84 	movi	r2,-2
8112c9d8:	1884703a 	and	r2,r3,r2
8112c9dc:	1001703a 	wrctl	status,r2
  
  return context;
8112c9e0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
8112c9e4:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
8112c9e8:	d0a09017 	ldw	r2,-32192(gp)
8112c9ec:	10800d03 	ldbu	r2,52(r2)
8112c9f0:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112c9f4:	e0fffd03 	ldbu	r3,-12(fp)
8112c9f8:	e13ffd03 	ldbu	r4,-12(fp)
8112c9fc:	d0a08c44 	addi	r2,gp,-32207
8112ca00:	2085883a 	add	r2,r4,r2
8112ca04:	10800003 	ldbu	r2,0(r2)
8112ca08:	1009883a 	mov	r4,r2
8112ca0c:	d0a09017 	ldw	r2,-32192(gp)
8112ca10:	10800d43 	ldbu	r2,53(r2)
8112ca14:	0084303a 	nor	r2,zero,r2
8112ca18:	2084703a 	and	r2,r4,r2
8112ca1c:	1009883a 	mov	r4,r2
8112ca20:	d0a08c44 	addi	r2,gp,-32207
8112ca24:	1885883a 	add	r2,r3,r2
8112ca28:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
8112ca2c:	e0fffd03 	ldbu	r3,-12(fp)
8112ca30:	d0a08c44 	addi	r2,gp,-32207
8112ca34:	1885883a 	add	r2,r3,r2
8112ca38:	10800003 	ldbu	r2,0(r2)
8112ca3c:	10803fcc 	andi	r2,r2,255
8112ca40:	1000071e 	bne	r2,zero,8112ca60 <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112ca44:	d0a09017 	ldw	r2,-32192(gp)
8112ca48:	10800d83 	ldbu	r2,54(r2)
8112ca4c:	0084303a 	nor	r2,zero,r2
8112ca50:	1007883a 	mov	r3,r2
8112ca54:	d0a08c03 	ldbu	r2,-32208(gp)
8112ca58:	1884703a 	and	r2,r3,r2
8112ca5c:	d0a08c05 	stb	r2,-32208(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
8112ca60:	d0a09017 	ldw	r2,-32192(gp)
8112ca64:	e0ffff0b 	ldhu	r3,-4(fp)
8112ca68:	10c00b8d 	sth	r3,46(r2)
8112ca6c:	e0bffb17 	ldw	r2,-20(fp)
8112ca70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ca74:	e0bffc17 	ldw	r2,-16(fp)
8112ca78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
8112ca7c:	1125c540 	call	81125c54 <OS_Sched>
8112ca80:	00000106 	br	8112ca88 <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
8112ca84:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
8112ca88:	e037883a 	mov	sp,fp
8112ca8c:	dfc00117 	ldw	ra,4(sp)
8112ca90:	df000017 	ldw	fp,0(sp)
8112ca94:	dec00204 	addi	sp,sp,8
8112ca98:	f800283a 	ret

8112ca9c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
8112ca9c:	defff804 	addi	sp,sp,-32
8112caa0:	de00012e 	bgeu	sp,et,8112caa8 <OSTimeDlyHMSM+0xc>
8112caa4:	003b68fa 	trap	3
8112caa8:	dfc00715 	stw	ra,28(sp)
8112caac:	df000615 	stw	fp,24(sp)
8112cab0:	df000604 	addi	fp,sp,24
8112cab4:	2015883a 	mov	r10,r4
8112cab8:	2809883a 	mov	r4,r5
8112cabc:	3007883a 	mov	r3,r6
8112cac0:	3805883a 	mov	r2,r7
8112cac4:	e2bffc05 	stb	r10,-16(fp)
8112cac8:	e13ffd05 	stb	r4,-12(fp)
8112cacc:	e0fffe05 	stb	r3,-8(fp)
8112cad0:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112cad4:	d0a08f03 	ldbu	r2,-32196(gp)
8112cad8:	10803fcc 	andi	r2,r2,255
8112cadc:	10000226 	beq	r2,zero,8112cae8 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
8112cae0:	00801544 	movi	r2,85
8112cae4:	00004106 	br	8112cbec <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
8112cae8:	e0bffc03 	ldbu	r2,-16(fp)
8112caec:	1000081e 	bne	r2,zero,8112cb10 <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
8112caf0:	e0bffd03 	ldbu	r2,-12(fp)
8112caf4:	1000061e 	bne	r2,zero,8112cb10 <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
8112caf8:	e0bffe03 	ldbu	r2,-8(fp)
8112cafc:	1000041e 	bne	r2,zero,8112cb10 <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
8112cb00:	e0bfff0b 	ldhu	r2,-4(fp)
8112cb04:	1000021e 	bne	r2,zero,8112cb10 <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
8112cb08:	00801504 	movi	r2,84
8112cb0c:	00003706 	br	8112cbec <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
8112cb10:	e0bffd03 	ldbu	r2,-12(fp)
8112cb14:	10800f30 	cmpltui	r2,r2,60
8112cb18:	1000021e 	bne	r2,zero,8112cb24 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
8112cb1c:	00801444 	movi	r2,81
8112cb20:	00003206 	br	8112cbec <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
8112cb24:	e0bffe03 	ldbu	r2,-8(fp)
8112cb28:	10800f30 	cmpltui	r2,r2,60
8112cb2c:	1000021e 	bne	r2,zero,8112cb38 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
8112cb30:	00801484 	movi	r2,82
8112cb34:	00002d06 	br	8112cbec <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
8112cb38:	e0bfff0b 	ldhu	r2,-4(fp)
8112cb3c:	1080fa30 	cmpltui	r2,r2,1000
8112cb40:	1000021e 	bne	r2,zero,8112cb4c <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
8112cb44:	008014c4 	movi	r2,83
8112cb48:	00002806 	br	8112cbec <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112cb4c:	e0bffc03 	ldbu	r2,-16(fp)
8112cb50:	10c38424 	muli	r3,r2,3600
8112cb54:	e0bffd03 	ldbu	r2,-12(fp)
8112cb58:	10800f24 	muli	r2,r2,60
8112cb5c:	1887883a 	add	r3,r3,r2
8112cb60:	e0bffe03 	ldbu	r2,-8(fp)
8112cb64:	1885883a 	add	r2,r3,r2
8112cb68:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
8112cb6c:	e0bfff0b 	ldhu	r2,-4(fp)
8112cb70:	10c0fa24 	muli	r3,r2,1000
8112cb74:	008418b4 	movhi	r2,4194
8112cb78:	109374c4 	addi	r2,r2,19923
8112cb7c:	188a383a 	mulxuu	r5,r3,r2
8112cb80:	1885383a 	mul	r2,r3,r2
8112cb84:	1011883a 	mov	r8,r2
8112cb88:	2813883a 	mov	r9,r5
8112cb8c:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112cb90:	2085883a 	add	r2,r4,r2
8112cb94:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
8112cb98:	e0bffb17 	ldw	r2,-20(fp)
8112cb9c:	1004d43a 	srli	r2,r2,16
8112cba0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
8112cba4:	e0bffb17 	ldw	r2,-20(fp)
8112cba8:	10bfffcc 	andi	r2,r2,65535
8112cbac:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
8112cbb0:	e0bffb17 	ldw	r2,-20(fp)
8112cbb4:	10bfffcc 	andi	r2,r2,65535
8112cbb8:	1009883a 	mov	r4,r2
8112cbbc:	112c9900 	call	8112c990 <OSTimeDly>
    while (loops > 0) {
8112cbc0:	00000706 	br	8112cbe0 <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
8112cbc4:	01200014 	movui	r4,32768
8112cbc8:	112c9900 	call	8112c990 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
8112cbcc:	01200014 	movui	r4,32768
8112cbd0:	112c9900 	call	8112c990 <OSTimeDly>
        loops--;
8112cbd4:	e0bffa0b 	ldhu	r2,-24(fp)
8112cbd8:	10bfffc4 	addi	r2,r2,-1
8112cbdc:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
8112cbe0:	e0bffa0b 	ldhu	r2,-24(fp)
8112cbe4:	103ff71e 	bne	r2,zero,8112cbc4 <__reset+0xfb10cbc4>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
8112cbe8:	0005883a 	mov	r2,zero
}
8112cbec:	e037883a 	mov	sp,fp
8112cbf0:	dfc00117 	ldw	ra,4(sp)
8112cbf4:	df000017 	ldw	fp,0(sp)
8112cbf8:	dec00204 	addi	sp,sp,8
8112cbfc:	f800283a 	ret

8112cc00 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
8112cc00:	defff504 	addi	sp,sp,-44
8112cc04:	de00012e 	bgeu	sp,et,8112cc0c <OSTimeDlyResume+0xc>
8112cc08:	003b68fa 	trap	3
8112cc0c:	dfc00a15 	stw	ra,40(sp)
8112cc10:	df000915 	stw	fp,36(sp)
8112cc14:	df000904 	addi	fp,sp,36
8112cc18:	2005883a 	mov	r2,r4
8112cc1c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112cc20:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
8112cc24:	e0bfff03 	ldbu	r2,-4(fp)
8112cc28:	10800a30 	cmpltui	r2,r2,40
8112cc2c:	1000021e 	bne	r2,zero,8112cc38 <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
8112cc30:	00800a84 	movi	r2,42
8112cc34:	00006406 	br	8112cdc8 <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cc38:	0005303a 	rdctl	r2,status
8112cc3c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cc40:	e0fffe17 	ldw	r3,-8(fp)
8112cc44:	00bfff84 	movi	r2,-2
8112cc48:	1884703a 	and	r2,r3,r2
8112cc4c:	1001703a 	wrctl	status,r2
  
  return context;
8112cc50:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112cc54:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
8112cc58:	e0ffff03 	ldbu	r3,-4(fp)
8112cc5c:	00a045b4 	movhi	r2,33046
8112cc60:	10904e04 	addi	r2,r2,16696
8112cc64:	18c7883a 	add	r3,r3,r3
8112cc68:	18c7883a 	add	r3,r3,r3
8112cc6c:	10c5883a 	add	r2,r2,r3
8112cc70:	10800017 	ldw	r2,0(r2)
8112cc74:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
8112cc78:	e0bff917 	ldw	r2,-28(fp)
8112cc7c:	1000061e 	bne	r2,zero,8112cc98 <OSTimeDlyResume+0x98>
8112cc80:	e0bff717 	ldw	r2,-36(fp)
8112cc84:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cc88:	e0bff817 	ldw	r2,-32(fp)
8112cc8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112cc90:	008010c4 	movi	r2,67
8112cc94:	00004c06 	br	8112cdc8 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112cc98:	e0bff917 	ldw	r2,-28(fp)
8112cc9c:	10800058 	cmpnei	r2,r2,1
8112cca0:	1000061e 	bne	r2,zero,8112ccbc <OSTimeDlyResume+0xbc>
8112cca4:	e0bff717 	ldw	r2,-36(fp)
8112cca8:	e0bffa15 	stw	r2,-24(fp)
8112ccac:	e0bffa17 	ldw	r2,-24(fp)
8112ccb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112ccb4:	008010c4 	movi	r2,67
8112ccb8:	00004306 	br	8112cdc8 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
8112ccbc:	e0bff917 	ldw	r2,-28(fp)
8112ccc0:	10800b8b 	ldhu	r2,46(r2)
8112ccc4:	10bfffcc 	andi	r2,r2,65535
8112ccc8:	1000061e 	bne	r2,zero,8112cce4 <OSTimeDlyResume+0xe4>
8112cccc:	e0bff717 	ldw	r2,-36(fp)
8112ccd0:	e0bffb15 	stw	r2,-20(fp)
8112ccd4:	e0bffb17 	ldw	r2,-20(fp)
8112ccd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
8112ccdc:	00801404 	movi	r2,80
8112cce0:	00003906 	br	8112cdc8 <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
8112cce4:	e0bff917 	ldw	r2,-28(fp)
8112cce8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112ccec:	e0bff917 	ldw	r2,-28(fp)
8112ccf0:	10800c03 	ldbu	r2,48(r2)
8112ccf4:	10803fcc 	andi	r2,r2,255
8112ccf8:	10800dcc 	andi	r2,r2,55
8112ccfc:	10000b26 	beq	r2,zero,8112cd2c <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
8112cd00:	e0bff917 	ldw	r2,-28(fp)
8112cd04:	10c00c03 	ldbu	r3,48(r2)
8112cd08:	00bff204 	movi	r2,-56
8112cd0c:	1884703a 	and	r2,r3,r2
8112cd10:	1007883a 	mov	r3,r2
8112cd14:	e0bff917 	ldw	r2,-28(fp)
8112cd18:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
8112cd1c:	e0bff917 	ldw	r2,-28(fp)
8112cd20:	00c00044 	movi	r3,1
8112cd24:	10c00c45 	stb	r3,49(r2)
8112cd28:	00000206 	br	8112cd34 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
8112cd2c:	e0bff917 	ldw	r2,-28(fp)
8112cd30:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
8112cd34:	e0bff917 	ldw	r2,-28(fp)
8112cd38:	10800c03 	ldbu	r2,48(r2)
8112cd3c:	10803fcc 	andi	r2,r2,255
8112cd40:	1080020c 	andi	r2,r2,8
8112cd44:	10001b1e 	bne	r2,zero,8112cdb4 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
8112cd48:	e0bff917 	ldw	r2,-28(fp)
8112cd4c:	10c00d83 	ldbu	r3,54(r2)
8112cd50:	d0a08c03 	ldbu	r2,-32208(gp)
8112cd54:	1884b03a 	or	r2,r3,r2
8112cd58:	d0a08c05 	stb	r2,-32208(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112cd5c:	e0bff917 	ldw	r2,-28(fp)
8112cd60:	10800d03 	ldbu	r2,52(r2)
8112cd64:	10c03fcc 	andi	r3,r2,255
8112cd68:	e0bff917 	ldw	r2,-28(fp)
8112cd6c:	10800d03 	ldbu	r2,52(r2)
8112cd70:	11003fcc 	andi	r4,r2,255
8112cd74:	d0a08c44 	addi	r2,gp,-32207
8112cd78:	2085883a 	add	r2,r4,r2
8112cd7c:	11000003 	ldbu	r4,0(r2)
8112cd80:	e0bff917 	ldw	r2,-28(fp)
8112cd84:	10800d43 	ldbu	r2,53(r2)
8112cd88:	2084b03a 	or	r2,r4,r2
8112cd8c:	1009883a 	mov	r4,r2
8112cd90:	d0a08c44 	addi	r2,gp,-32207
8112cd94:	1885883a 	add	r2,r3,r2
8112cd98:	11000005 	stb	r4,0(r2)
8112cd9c:	e0bff717 	ldw	r2,-36(fp)
8112cda0:	e0bffc15 	stw	r2,-16(fp)
8112cda4:	e0bffc17 	ldw	r2,-16(fp)
8112cda8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
8112cdac:	1125c540 	call	81125c54 <OS_Sched>
8112cdb0:	00000406 	br	8112cdc4 <OSTimeDlyResume+0x1c4>
8112cdb4:	e0bff717 	ldw	r2,-36(fp)
8112cdb8:	e0bffd15 	stw	r2,-12(fp)
8112cdbc:	e0bffd17 	ldw	r2,-12(fp)
8112cdc0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
8112cdc4:	0005883a 	mov	r2,zero
}
8112cdc8:	e037883a 	mov	sp,fp
8112cdcc:	dfc00117 	ldw	ra,4(sp)
8112cdd0:	df000017 	ldw	fp,0(sp)
8112cdd4:	dec00204 	addi	sp,sp,8
8112cdd8:	f800283a 	ret

8112cddc <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
8112cddc:	defffb04 	addi	sp,sp,-20
8112cde0:	de00012e 	bgeu	sp,et,8112cde8 <OSTimeGet+0xc>
8112cde4:	003b68fa 	trap	3
8112cde8:	df000415 	stw	fp,16(sp)
8112cdec:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112cdf0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cdf4:	0005303a 	rdctl	r2,status
8112cdf8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cdfc:	e0fffe17 	ldw	r3,-8(fp)
8112ce00:	00bfff84 	movi	r2,-2
8112ce04:	1884703a 	and	r2,r3,r2
8112ce08:	1001703a 	wrctl	status,r2
  
  return context;
8112ce0c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112ce10:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
8112ce14:	d0a09217 	ldw	r2,-32184(gp)
8112ce18:	e0bffd15 	stw	r2,-12(fp)
8112ce1c:	e0bffc17 	ldw	r2,-16(fp)
8112ce20:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ce24:	e0bfff17 	ldw	r2,-4(fp)
8112ce28:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
8112ce2c:	e0bffd17 	ldw	r2,-12(fp)
}
8112ce30:	e037883a 	mov	sp,fp
8112ce34:	df000017 	ldw	fp,0(sp)
8112ce38:	dec00104 	addi	sp,sp,4
8112ce3c:	f800283a 	ret

8112ce40 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
8112ce40:	defffb04 	addi	sp,sp,-20
8112ce44:	de00012e 	bgeu	sp,et,8112ce4c <OSTimeSet+0xc>
8112ce48:	003b68fa 	trap	3
8112ce4c:	df000415 	stw	fp,16(sp)
8112ce50:	df000404 	addi	fp,sp,16
8112ce54:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ce58:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ce5c:	0005303a 	rdctl	r2,status
8112ce60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ce64:	e0fffd17 	ldw	r3,-12(fp)
8112ce68:	00bfff84 	movi	r2,-2
8112ce6c:	1884703a 	and	r2,r3,r2
8112ce70:	1001703a 	wrctl	status,r2
  
  return context;
8112ce74:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
8112ce78:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
8112ce7c:	e0bfff17 	ldw	r2,-4(fp)
8112ce80:	d0a09215 	stw	r2,-32184(gp)
8112ce84:	e0bffc17 	ldw	r2,-16(fp)
8112ce88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ce8c:	e0bffe17 	ldw	r2,-8(fp)
8112ce90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112ce94:	0001883a 	nop
8112ce98:	e037883a 	mov	sp,fp
8112ce9c:	df000017 	ldw	fp,0(sp)
8112cea0:	dec00104 	addi	sp,sp,4
8112cea4:	f800283a 	ret

8112cea8 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
8112cea8:	defff804 	addi	sp,sp,-32
8112ceac:	de00012e 	bgeu	sp,et,8112ceb4 <OSTmrCreate+0xc>
8112ceb0:	003b68fa 	trap	3
8112ceb4:	dfc00715 	stw	ra,28(sp)
8112ceb8:	df000615 	stw	fp,24(sp)
8112cebc:	df000604 	addi	fp,sp,24
8112cec0:	e13ffc15 	stw	r4,-16(fp)
8112cec4:	e17ffd15 	stw	r5,-12(fp)
8112cec8:	3005883a 	mov	r2,r6
8112cecc:	e1ffff15 	stw	r7,-4(fp)
8112ced0:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112ced4:	e0800417 	ldw	r2,16(fp)
8112ced8:	1000021e 	bne	r2,zero,8112cee4 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
8112cedc:	0005883a 	mov	r2,zero
8112cee0:	00005d06 	br	8112d058 <OSTmrCreate+0x1b0>
    }
    switch (opt) {
8112cee4:	e0bffe03 	ldbu	r2,-8(fp)
8112cee8:	10c00060 	cmpeqi	r3,r2,1
8112ceec:	1800091e 	bne	r3,zero,8112cf14 <OSTmrCreate+0x6c>
8112cef0:	108000a0 	cmpeqi	r2,r2,2
8112cef4:	10000e26 	beq	r2,zero,8112cf30 <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
8112cef8:	e0bffd17 	ldw	r2,-12(fp)
8112cefc:	1000111e 	bne	r2,zero,8112cf44 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
8112cf00:	e0800417 	ldw	r2,16(fp)
8112cf04:	00ffe0c4 	movi	r3,-125
8112cf08:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8112cf0c:	0005883a 	mov	r2,zero
8112cf10:	00005106 	br	8112d058 <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
8112cf14:	e0bffc17 	ldw	r2,-16(fp)
8112cf18:	10000c1e 	bne	r2,zero,8112cf4c <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
8112cf1c:	e0800417 	ldw	r2,16(fp)
8112cf20:	00ffe084 	movi	r3,-126
8112cf24:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8112cf28:	0005883a 	mov	r2,zero
8112cf2c:	00004a06 	br	8112d058 <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
8112cf30:	e0800417 	ldw	r2,16(fp)
8112cf34:	00ffe104 	movi	r3,-124
8112cf38:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
8112cf3c:	0005883a 	mov	r2,zero
8112cf40:	00004506 	br	8112d058 <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
8112cf44:	0001883a 	nop
8112cf48:	00000106 	br	8112cf50 <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
8112cf4c:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112cf50:	d0a08f03 	ldbu	r2,-32196(gp)
8112cf54:	10803fcc 	andi	r2,r2,255
8112cf58:	10000526 	beq	r2,zero,8112cf70 <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
8112cf5c:	e0800417 	ldw	r2,16(fp)
8112cf60:	00ffe2c4 	movi	r3,-117
8112cf64:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
8112cf68:	0005883a 	mov	r2,zero
8112cf6c:	00003a06 	br	8112d058 <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
8112cf70:	112de600 	call	8112de60 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
8112cf74:	112d9000 	call	8112d900 <OSTmr_Alloc>
8112cf78:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
8112cf7c:	e0bffa17 	ldw	r2,-24(fp)
8112cf80:	1000061e 	bne	r2,zero,8112cf9c <OSTmrCreate+0xf4>
        OSTmr_Unlock();
8112cf84:	112dea40 	call	8112dea4 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
8112cf88:	e0800417 	ldw	r2,16(fp)
8112cf8c:	00ffe184 	movi	r3,-122
8112cf90:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
8112cf94:	0005883a 	mov	r2,zero
8112cf98:	00002f06 	br	8112d058 <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
8112cf9c:	e0bffa17 	ldw	r2,-24(fp)
8112cfa0:	00c00044 	movi	r3,1
8112cfa4:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
8112cfa8:	e0bffa17 	ldw	r2,-24(fp)
8112cfac:	e0fffc17 	ldw	r3,-16(fp)
8112cfb0:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
8112cfb4:	e0bffa17 	ldw	r2,-24(fp)
8112cfb8:	e0fffd17 	ldw	r3,-12(fp)
8112cfbc:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
8112cfc0:	e0bffa17 	ldw	r2,-24(fp)
8112cfc4:	e0fffe03 	ldbu	r3,-8(fp)
8112cfc8:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
8112cfcc:	e0bffa17 	ldw	r2,-24(fp)
8112cfd0:	e0ffff17 	ldw	r3,-4(fp)
8112cfd4:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
8112cfd8:	e0bffa17 	ldw	r2,-24(fp)
8112cfdc:	e0c00217 	ldw	r3,8(fp)
8112cfe0:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
8112cfe4:	e0800317 	ldw	r2,12(fp)
8112cfe8:	10001726 	beq	r2,zero,8112d048 <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
8112cfec:	e1000317 	ldw	r4,12(fp)
8112cff0:	1125e240 	call	81125e24 <OS_StrLen>
8112cff4:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
8112cff8:	e0bffb03 	ldbu	r2,-20(fp)
8112cffc:	10800428 	cmpgeui	r2,r2,16
8112d000:	1000061e 	bne	r2,zero,8112d01c <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
8112d004:	e0bffa17 	ldw	r2,-24(fp)
8112d008:	10800804 	addi	r2,r2,32
8112d00c:	e1400317 	ldw	r5,12(fp)
8112d010:	1009883a 	mov	r4,r2
8112d014:	1125da80 	call	81125da8 <OS_StrCopy>
8112d018:	00000b06 	br	8112d048 <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
8112d01c:	e0bffa17 	ldw	r2,-24(fp)
8112d020:	00c008c4 	movi	r3,35
8112d024:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
8112d028:	e0bffa17 	ldw	r2,-24(fp)
8112d02c:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
8112d030:	e0800417 	ldw	r2,16(fp)
8112d034:	00ffe304 	movi	r3,-116
8112d038:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
8112d03c:	112dea40 	call	8112dea4 <OSTmr_Unlock>
            return (ptmr);
8112d040:	e0bffa17 	ldw	r2,-24(fp)
8112d044:	00000406 	br	8112d058 <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
8112d048:	112dea40 	call	8112dea4 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
8112d04c:	e0800417 	ldw	r2,16(fp)
8112d050:	10000005 	stb	zero,0(r2)
    return (ptmr);
8112d054:	e0bffa17 	ldw	r2,-24(fp)
}
8112d058:	e037883a 	mov	sp,fp
8112d05c:	dfc00117 	ldw	ra,4(sp)
8112d060:	df000017 	ldw	fp,0(sp)
8112d064:	dec00204 	addi	sp,sp,8
8112d068:	f800283a 	ret

8112d06c <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
8112d06c:	defffc04 	addi	sp,sp,-16
8112d070:	de00012e 	bgeu	sp,et,8112d078 <OSTmrDel+0xc>
8112d074:	003b68fa 	trap	3
8112d078:	dfc00315 	stw	ra,12(sp)
8112d07c:	df000215 	stw	fp,8(sp)
8112d080:	df000204 	addi	fp,sp,8
8112d084:	e13ffe15 	stw	r4,-8(fp)
8112d088:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112d08c:	e0bfff17 	ldw	r2,-4(fp)
8112d090:	1000021e 	bne	r2,zero,8112d09c <OSTmrDel+0x30>
        return (OS_FALSE);
8112d094:	0005883a 	mov	r2,zero
8112d098:	00003f06 	br	8112d198 <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8112d09c:	e0bffe17 	ldw	r2,-8(fp)
8112d0a0:	1000051e 	bne	r2,zero,8112d0b8 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112d0a4:	e0bfff17 	ldw	r2,-4(fp)
8112d0a8:	00ffe284 	movi	r3,-118
8112d0ac:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d0b0:	0005883a 	mov	r2,zero
8112d0b4:	00003806 	br	8112d198 <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
8112d0b8:	e0bffe17 	ldw	r2,-8(fp)
8112d0bc:	10800003 	ldbu	r2,0(r2)
8112d0c0:	10803fcc 	andi	r2,r2,255
8112d0c4:	10801920 	cmpeqi	r2,r2,100
8112d0c8:	1000051e 	bne	r2,zero,8112d0e0 <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112d0cc:	e0bfff17 	ldw	r2,-4(fp)
8112d0d0:	00ffe244 	movi	r3,-119
8112d0d4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d0d8:	0005883a 	mov	r2,zero
8112d0dc:	00002e06 	br	8112d198 <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112d0e0:	d0a08f03 	ldbu	r2,-32196(gp)
8112d0e4:	10803fcc 	andi	r2,r2,255
8112d0e8:	10000526 	beq	r2,zero,8112d100 <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
8112d0ec:	e0bfff17 	ldw	r2,-4(fp)
8112d0f0:	00ffe2c4 	movi	r3,-117
8112d0f4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d0f8:	0005883a 	mov	r2,zero
8112d0fc:	00002606 	br	8112d198 <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
8112d100:	112de600 	call	8112de60 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112d104:	e0bffe17 	ldw	r2,-8(fp)
8112d108:	10800c43 	ldbu	r2,49(r2)
8112d10c:	10803fcc 	andi	r2,r2,255
8112d110:	10c000c8 	cmpgei	r3,r2,3
8112d114:	1800031e 	bne	r3,zero,8112d124 <OSTmrDel+0xb8>
8112d118:	00800d16 	blt	zero,r2,8112d150 <OSTmrDel+0xe4>
8112d11c:	10001326 	beq	r2,zero,8112d16c <OSTmrDel+0x100>
8112d120:	00001806 	br	8112d184 <OSTmrDel+0x118>
8112d124:	108000e0 	cmpeqi	r2,r2,3
8112d128:	10001626 	beq	r2,zero,8112d184 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
8112d12c:	e13ffe17 	ldw	r4,-8(fp)
8112d130:	112dd640 	call	8112dd64 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
8112d134:	e13ffe17 	ldw	r4,-8(fp)
8112d138:	112d9740 	call	8112d974 <OSTmr_Free>
             OSTmr_Unlock();
8112d13c:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112d140:	e0bfff17 	ldw	r2,-4(fp)
8112d144:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112d148:	00800044 	movi	r2,1
8112d14c:	00001206 	br	8112d198 <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
8112d150:	e13ffe17 	ldw	r4,-8(fp)
8112d154:	112d9740 	call	8112d974 <OSTmr_Free>
             OSTmr_Unlock();
8112d158:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112d15c:	e0bfff17 	ldw	r2,-4(fp)
8112d160:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112d164:	00800044 	movi	r2,1
8112d168:	00000b06 	br	8112d198 <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
8112d16c:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112d170:	e0bfff17 	ldw	r2,-4(fp)
8112d174:	00ffe1c4 	movi	r3,-121
8112d178:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112d17c:	0005883a 	mov	r2,zero
8112d180:	00000506 	br	8112d198 <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
8112d184:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112d188:	e0bfff17 	ldw	r2,-4(fp)
8112d18c:	00ffe344 	movi	r3,-115
8112d190:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112d194:	0005883a 	mov	r2,zero
    }
}
8112d198:	e037883a 	mov	sp,fp
8112d19c:	dfc00117 	ldw	ra,4(sp)
8112d1a0:	df000017 	ldw	fp,0(sp)
8112d1a4:	dec00204 	addi	sp,sp,8
8112d1a8:	f800283a 	ret

8112d1ac <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
8112d1ac:	defffa04 	addi	sp,sp,-24
8112d1b0:	de00012e 	bgeu	sp,et,8112d1b8 <OSTmrNameGet+0xc>
8112d1b4:	003b68fa 	trap	3
8112d1b8:	dfc00515 	stw	ra,20(sp)
8112d1bc:	df000415 	stw	fp,16(sp)
8112d1c0:	df000404 	addi	fp,sp,16
8112d1c4:	e13ffd15 	stw	r4,-12(fp)
8112d1c8:	e17ffe15 	stw	r5,-8(fp)
8112d1cc:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112d1d0:	e0bfff17 	ldw	r2,-4(fp)
8112d1d4:	1000021e 	bne	r2,zero,8112d1e0 <OSTmrNameGet+0x34>
        return (0);
8112d1d8:	0005883a 	mov	r2,zero
8112d1dc:	00003e06 	br	8112d2d8 <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
8112d1e0:	e0bffe17 	ldw	r2,-8(fp)
8112d1e4:	1000051e 	bne	r2,zero,8112d1fc <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
8112d1e8:	e0bfff17 	ldw	r2,-4(fp)
8112d1ec:	00ffe204 	movi	r3,-120
8112d1f0:	10c00005 	stb	r3,0(r2)
        return (0);
8112d1f4:	0005883a 	mov	r2,zero
8112d1f8:	00003706 	br	8112d2d8 <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8112d1fc:	e0bffd17 	ldw	r2,-12(fp)
8112d200:	1000051e 	bne	r2,zero,8112d218 <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
8112d204:	e0bfff17 	ldw	r2,-4(fp)
8112d208:	00ffe284 	movi	r3,-118
8112d20c:	10c00005 	stb	r3,0(r2)
        return (0);
8112d210:	0005883a 	mov	r2,zero
8112d214:	00003006 	br	8112d2d8 <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112d218:	e0bffd17 	ldw	r2,-12(fp)
8112d21c:	10800003 	ldbu	r2,0(r2)
8112d220:	10803fcc 	andi	r2,r2,255
8112d224:	10801920 	cmpeqi	r2,r2,100
8112d228:	1000051e 	bne	r2,zero,8112d240 <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112d22c:	e0bfff17 	ldw	r2,-4(fp)
8112d230:	00ffe244 	movi	r3,-119
8112d234:	10c00005 	stb	r3,0(r2)
        return (0);
8112d238:	0005883a 	mov	r2,zero
8112d23c:	00002606 	br	8112d2d8 <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112d240:	d0a08f03 	ldbu	r2,-32196(gp)
8112d244:	10803fcc 	andi	r2,r2,255
8112d248:	10000526 	beq	r2,zero,8112d260 <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
8112d24c:	e0bfff17 	ldw	r2,-4(fp)
8112d250:	00c00444 	movi	r3,17
8112d254:	10c00005 	stb	r3,0(r2)
        return (0);
8112d258:	0005883a 	mov	r2,zero
8112d25c:	00001e06 	br	8112d2d8 <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
8112d260:	112de600 	call	8112de60 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112d264:	e0bffd17 	ldw	r2,-12(fp)
8112d268:	10800c43 	ldbu	r2,49(r2)
8112d26c:	10803fcc 	andi	r2,r2,255
8112d270:	10000e26 	beq	r2,zero,8112d2ac <OSTmrNameGet+0x100>
8112d274:	10001316 	blt	r2,zero,8112d2c4 <OSTmrNameGet+0x118>
8112d278:	10800108 	cmpgei	r2,r2,4
8112d27c:	1000111e 	bne	r2,zero,8112d2c4 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
8112d280:	e0bffd17 	ldw	r2,-12(fp)
8112d284:	10800804 	addi	r2,r2,32
8112d288:	100b883a 	mov	r5,r2
8112d28c:	e13ffe17 	ldw	r4,-8(fp)
8112d290:	1125da80 	call	81125da8 <OS_StrCopy>
8112d294:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
8112d298:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112d29c:	e0bfff17 	ldw	r2,-4(fp)
8112d2a0:	10000005 	stb	zero,0(r2)
             return (len);
8112d2a4:	e0bffc03 	ldbu	r2,-16(fp)
8112d2a8:	00000b06 	br	8112d2d8 <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
8112d2ac:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112d2b0:	e0bfff17 	ldw	r2,-4(fp)
8112d2b4:	00ffe1c4 	movi	r3,-121
8112d2b8:	10c00005 	stb	r3,0(r2)
             return (0);
8112d2bc:	0005883a 	mov	r2,zero
8112d2c0:	00000506 	br	8112d2d8 <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
8112d2c4:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112d2c8:	e0bfff17 	ldw	r2,-4(fp)
8112d2cc:	00ffe344 	movi	r3,-115
8112d2d0:	10c00005 	stb	r3,0(r2)
             return (0);
8112d2d4:	0005883a 	mov	r2,zero
    }
}
8112d2d8:	e037883a 	mov	sp,fp
8112d2dc:	dfc00117 	ldw	ra,4(sp)
8112d2e0:	df000017 	ldw	fp,0(sp)
8112d2e4:	dec00204 	addi	sp,sp,8
8112d2e8:	f800283a 	ret

8112d2ec <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
8112d2ec:	defffb04 	addi	sp,sp,-20
8112d2f0:	de00012e 	bgeu	sp,et,8112d2f8 <OSTmrRemainGet+0xc>
8112d2f4:	003b68fa 	trap	3
8112d2f8:	dfc00415 	stw	ra,16(sp)
8112d2fc:	df000315 	stw	fp,12(sp)
8112d300:	df000304 	addi	fp,sp,12
8112d304:	e13ffe15 	stw	r4,-8(fp)
8112d308:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112d30c:	e0bfff17 	ldw	r2,-4(fp)
8112d310:	1000021e 	bne	r2,zero,8112d31c <OSTmrRemainGet+0x30>
        return (0);
8112d314:	0005883a 	mov	r2,zero
8112d318:	00005d06 	br	8112d490 <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
8112d31c:	e0bffe17 	ldw	r2,-8(fp)
8112d320:	1000051e 	bne	r2,zero,8112d338 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112d324:	e0bfff17 	ldw	r2,-4(fp)
8112d328:	00ffe284 	movi	r3,-118
8112d32c:	10c00005 	stb	r3,0(r2)
        return (0);
8112d330:	0005883a 	mov	r2,zero
8112d334:	00005606 	br	8112d490 <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112d338:	e0bffe17 	ldw	r2,-8(fp)
8112d33c:	10800003 	ldbu	r2,0(r2)
8112d340:	10803fcc 	andi	r2,r2,255
8112d344:	10801920 	cmpeqi	r2,r2,100
8112d348:	1000051e 	bne	r2,zero,8112d360 <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112d34c:	e0bfff17 	ldw	r2,-4(fp)
8112d350:	00ffe244 	movi	r3,-119
8112d354:	10c00005 	stb	r3,0(r2)
        return (0);
8112d358:	0005883a 	mov	r2,zero
8112d35c:	00004c06 	br	8112d490 <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112d360:	d0a08f03 	ldbu	r2,-32196(gp)
8112d364:	10803fcc 	andi	r2,r2,255
8112d368:	10000526 	beq	r2,zero,8112d380 <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
8112d36c:	e0bfff17 	ldw	r2,-4(fp)
8112d370:	00ffe2c4 	movi	r3,-117
8112d374:	10c00005 	stb	r3,0(r2)
        return (0);
8112d378:	0005883a 	mov	r2,zero
8112d37c:	00004406 	br	8112d490 <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
8112d380:	112de600 	call	8112de60 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112d384:	e0bffe17 	ldw	r2,-8(fp)
8112d388:	10800c43 	ldbu	r2,49(r2)
8112d38c:	10803fcc 	andi	r2,r2,255
8112d390:	10c00060 	cmpeqi	r3,r2,1
8112d394:	1800121e 	bne	r3,zero,8112d3e0 <OSTmrRemainGet+0xf4>
8112d398:	10c00088 	cmpgei	r3,r2,2
8112d39c:	1800021e 	bne	r3,zero,8112d3a8 <OSTmrRemainGet+0xbc>
8112d3a0:	10003026 	beq	r2,zero,8112d464 <OSTmrRemainGet+0x178>
8112d3a4:	00003506 	br	8112d47c <OSTmrRemainGet+0x190>
8112d3a8:	10c000a0 	cmpeqi	r3,r2,2
8112d3ac:	1800281e 	bne	r3,zero,8112d450 <OSTmrRemainGet+0x164>
8112d3b0:	108000e0 	cmpeqi	r2,r2,3
8112d3b4:	10003126 	beq	r2,zero,8112d47c <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
8112d3b8:	e0bffe17 	ldw	r2,-8(fp)
8112d3bc:	10c00517 	ldw	r3,20(r2)
8112d3c0:	d0a09117 	ldw	r2,-32188(gp)
8112d3c4:	1885c83a 	sub	r2,r3,r2
8112d3c8:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
8112d3cc:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
8112d3d0:	e0bfff17 	ldw	r2,-4(fp)
8112d3d4:	10000005 	stb	zero,0(r2)
             return (remain);
8112d3d8:	e0bffd17 	ldw	r2,-12(fp)
8112d3dc:	00002c06 	br	8112d490 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
8112d3e0:	e0bffe17 	ldw	r2,-8(fp)
8112d3e4:	10800c03 	ldbu	r2,48(r2)
8112d3e8:	10803fcc 	andi	r2,r2,255
8112d3ec:	108000a0 	cmpeqi	r2,r2,2
8112d3f0:	10000e26 	beq	r2,zero,8112d42c <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
8112d3f4:	e0bffe17 	ldw	r2,-8(fp)
8112d3f8:	10800617 	ldw	r2,24(r2)
8112d3fc:	1000041e 	bne	r2,zero,8112d410 <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
8112d400:	e0bffe17 	ldw	r2,-8(fp)
8112d404:	10800717 	ldw	r2,28(r2)
8112d408:	e0bffd15 	stw	r2,-12(fp)
8112d40c:	00000306 	br	8112d41c <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
8112d410:	e0bffe17 	ldw	r2,-8(fp)
8112d414:	10800617 	ldw	r2,24(r2)
8112d418:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
8112d41c:	112dea40 	call	8112dea4 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
8112d420:	e0bfff17 	ldw	r2,-4(fp)
8112d424:	10000005 	stb	zero,0(r2)
                      break;
8112d428:	00000706 	br	8112d448 <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
8112d42c:	e0bffe17 	ldw	r2,-8(fp)
8112d430:	10800617 	ldw	r2,24(r2)
8112d434:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
8112d438:	112dea40 	call	8112dea4 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
8112d43c:	e0bfff17 	ldw	r2,-4(fp)
8112d440:	10000005 	stb	zero,0(r2)
                      break;
8112d444:	0001883a 	nop
             }
             return (remain);
8112d448:	e0bffd17 	ldw	r2,-12(fp)
8112d44c:	00001006 	br	8112d490 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
8112d450:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112d454:	e0bfff17 	ldw	r2,-4(fp)
8112d458:	10000005 	stb	zero,0(r2)
             return (0);
8112d45c:	0005883a 	mov	r2,zero
8112d460:	00000b06 	br	8112d490 <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
8112d464:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112d468:	e0bfff17 	ldw	r2,-4(fp)
8112d46c:	00ffe1c4 	movi	r3,-121
8112d470:	10c00005 	stb	r3,0(r2)
             return (0);
8112d474:	0005883a 	mov	r2,zero
8112d478:	00000506 	br	8112d490 <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
8112d47c:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112d480:	e0bfff17 	ldw	r2,-4(fp)
8112d484:	00ffe344 	movi	r3,-115
8112d488:	10c00005 	stb	r3,0(r2)
             return (0);
8112d48c:	0005883a 	mov	r2,zero
    }
}
8112d490:	e037883a 	mov	sp,fp
8112d494:	dfc00117 	ldw	ra,4(sp)
8112d498:	df000017 	ldw	fp,0(sp)
8112d49c:	dec00204 	addi	sp,sp,8
8112d4a0:	f800283a 	ret

8112d4a4 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
8112d4a4:	defffb04 	addi	sp,sp,-20
8112d4a8:	de00012e 	bgeu	sp,et,8112d4b0 <OSTmrStateGet+0xc>
8112d4ac:	003b68fa 	trap	3
8112d4b0:	dfc00415 	stw	ra,16(sp)
8112d4b4:	df000315 	stw	fp,12(sp)
8112d4b8:	df000304 	addi	fp,sp,12
8112d4bc:	e13ffe15 	stw	r4,-8(fp)
8112d4c0:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112d4c4:	e0bfff17 	ldw	r2,-4(fp)
8112d4c8:	1000021e 	bne	r2,zero,8112d4d4 <OSTmrStateGet+0x30>
        return (0);
8112d4cc:	0005883a 	mov	r2,zero
8112d4d0:	00002a06 	br	8112d57c <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
8112d4d4:	e0bffe17 	ldw	r2,-8(fp)
8112d4d8:	1000051e 	bne	r2,zero,8112d4f0 <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112d4dc:	e0bfff17 	ldw	r2,-4(fp)
8112d4e0:	00ffe284 	movi	r3,-118
8112d4e4:	10c00005 	stb	r3,0(r2)
        return (0);
8112d4e8:	0005883a 	mov	r2,zero
8112d4ec:	00002306 	br	8112d57c <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112d4f0:	e0bffe17 	ldw	r2,-8(fp)
8112d4f4:	10800003 	ldbu	r2,0(r2)
8112d4f8:	10803fcc 	andi	r2,r2,255
8112d4fc:	10801920 	cmpeqi	r2,r2,100
8112d500:	1000051e 	bne	r2,zero,8112d518 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112d504:	e0bfff17 	ldw	r2,-4(fp)
8112d508:	00ffe244 	movi	r3,-119
8112d50c:	10c00005 	stb	r3,0(r2)
        return (0);
8112d510:	0005883a 	mov	r2,zero
8112d514:	00001906 	br	8112d57c <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112d518:	d0a08f03 	ldbu	r2,-32196(gp)
8112d51c:	10803fcc 	andi	r2,r2,255
8112d520:	10000526 	beq	r2,zero,8112d538 <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
8112d524:	e0bfff17 	ldw	r2,-4(fp)
8112d528:	00ffe2c4 	movi	r3,-117
8112d52c:	10c00005 	stb	r3,0(r2)
        return (0);
8112d530:	0005883a 	mov	r2,zero
8112d534:	00001106 	br	8112d57c <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
8112d538:	112de600 	call	8112de60 <OSTmr_Lock>
    state = ptmr->OSTmrState;
8112d53c:	e0bffe17 	ldw	r2,-8(fp)
8112d540:	10800c43 	ldbu	r2,49(r2)
8112d544:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
8112d548:	e0bffd03 	ldbu	r2,-12(fp)
8112d54c:	1005883a 	mov	r2,r2
8112d550:	10800128 	cmpgeui	r2,r2,4
8112d554:	1000031e 	bne	r2,zero,8112d564 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
8112d558:	e0bfff17 	ldw	r2,-4(fp)
8112d55c:	10000005 	stb	zero,0(r2)
             break;
8112d560:	00000406 	br	8112d574 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
8112d564:	e0bfff17 	ldw	r2,-4(fp)
8112d568:	00ffe344 	movi	r3,-115
8112d56c:	10c00005 	stb	r3,0(r2)
             break;
8112d570:	0001883a 	nop
    }
    OSTmr_Unlock();
8112d574:	112dea40 	call	8112dea4 <OSTmr_Unlock>
    return (state);
8112d578:	e0bffd03 	ldbu	r2,-12(fp)
}
8112d57c:	e037883a 	mov	sp,fp
8112d580:	dfc00117 	ldw	ra,4(sp)
8112d584:	df000017 	ldw	fp,0(sp)
8112d588:	dec00204 	addi	sp,sp,8
8112d58c:	f800283a 	ret

8112d590 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
8112d590:	defffc04 	addi	sp,sp,-16
8112d594:	de00012e 	bgeu	sp,et,8112d59c <OSTmrStart+0xc>
8112d598:	003b68fa 	trap	3
8112d59c:	dfc00315 	stw	ra,12(sp)
8112d5a0:	df000215 	stw	fp,8(sp)
8112d5a4:	df000204 	addi	fp,sp,8
8112d5a8:	e13ffe15 	stw	r4,-8(fp)
8112d5ac:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112d5b0:	e0bfff17 	ldw	r2,-4(fp)
8112d5b4:	1000021e 	bne	r2,zero,8112d5c0 <OSTmrStart+0x30>
        return (OS_FALSE);
8112d5b8:	0005883a 	mov	r2,zero
8112d5bc:	00004106 	br	8112d6c4 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
8112d5c0:	e0bffe17 	ldw	r2,-8(fp)
8112d5c4:	1000051e 	bne	r2,zero,8112d5dc <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112d5c8:	e0bfff17 	ldw	r2,-4(fp)
8112d5cc:	00ffe284 	movi	r3,-118
8112d5d0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d5d4:	0005883a 	mov	r2,zero
8112d5d8:	00003a06 	br	8112d6c4 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
8112d5dc:	e0bffe17 	ldw	r2,-8(fp)
8112d5e0:	10800003 	ldbu	r2,0(r2)
8112d5e4:	10803fcc 	andi	r2,r2,255
8112d5e8:	10801920 	cmpeqi	r2,r2,100
8112d5ec:	1000051e 	bne	r2,zero,8112d604 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112d5f0:	e0bfff17 	ldw	r2,-4(fp)
8112d5f4:	00ffe244 	movi	r3,-119
8112d5f8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d5fc:	0005883a 	mov	r2,zero
8112d600:	00003006 	br	8112d6c4 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112d604:	d0a08f03 	ldbu	r2,-32196(gp)
8112d608:	10803fcc 	andi	r2,r2,255
8112d60c:	10000526 	beq	r2,zero,8112d624 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
8112d610:	e0bfff17 	ldw	r2,-4(fp)
8112d614:	00ffe2c4 	movi	r3,-117
8112d618:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d61c:	0005883a 	mov	r2,zero
8112d620:	00002806 	br	8112d6c4 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
8112d624:	112de600 	call	8112de60 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112d628:	e0bffe17 	ldw	r2,-8(fp)
8112d62c:	10800c43 	ldbu	r2,49(r2)
8112d630:	10803fcc 	andi	r2,r2,255
8112d634:	10c000c8 	cmpgei	r3,r2,3
8112d638:	1800031e 	bne	r3,zero,8112d648 <OSTmrStart+0xb8>
8112d63c:	00800e16 	blt	zero,r2,8112d678 <OSTmrStart+0xe8>
8112d640:	10001526 	beq	r2,zero,8112d698 <OSTmrStart+0x108>
8112d644:	00001a06 	br	8112d6b0 <OSTmrStart+0x120>
8112d648:	108000e0 	cmpeqi	r2,r2,3
8112d64c:	10001826 	beq	r2,zero,8112d6b0 <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
8112d650:	e13ffe17 	ldw	r4,-8(fp)
8112d654:	112dd640 	call	8112dd64 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8112d658:	000b883a 	mov	r5,zero
8112d65c:	e13ffe17 	ldw	r4,-8(fp)
8112d660:	112dc140 	call	8112dc14 <OSTmr_Link>
             OSTmr_Unlock();
8112d664:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112d668:	e0bfff17 	ldw	r2,-4(fp)
8112d66c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112d670:	00800044 	movi	r2,1
8112d674:	00001306 	br	8112d6c4 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8112d678:	000b883a 	mov	r5,zero
8112d67c:	e13ffe17 	ldw	r4,-8(fp)
8112d680:	112dc140 	call	8112dc14 <OSTmr_Link>
             OSTmr_Unlock();
8112d684:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112d688:	e0bfff17 	ldw	r2,-4(fp)
8112d68c:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112d690:	00800044 	movi	r2,1
8112d694:	00000b06 	br	8112d6c4 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
8112d698:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112d69c:	e0bfff17 	ldw	r2,-4(fp)
8112d6a0:	00ffe1c4 	movi	r3,-121
8112d6a4:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112d6a8:	0005883a 	mov	r2,zero
8112d6ac:	00000506 	br	8112d6c4 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
8112d6b0:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112d6b4:	e0bfff17 	ldw	r2,-4(fp)
8112d6b8:	00ffe344 	movi	r3,-115
8112d6bc:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112d6c0:	0005883a 	mov	r2,zero
    }
}
8112d6c4:	e037883a 	mov	sp,fp
8112d6c8:	dfc00117 	ldw	ra,4(sp)
8112d6cc:	df000017 	ldw	fp,0(sp)
8112d6d0:	dec00204 	addi	sp,sp,8
8112d6d4:	f800283a 	ret

8112d6d8 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
8112d6d8:	defff904 	addi	sp,sp,-28
8112d6dc:	de00012e 	bgeu	sp,et,8112d6e4 <OSTmrStop+0xc>
8112d6e0:	003b68fa 	trap	3
8112d6e4:	dfc00615 	stw	ra,24(sp)
8112d6e8:	df000515 	stw	fp,20(sp)
8112d6ec:	df000504 	addi	fp,sp,20
8112d6f0:	e13ffc15 	stw	r4,-16(fp)
8112d6f4:	2805883a 	mov	r2,r5
8112d6f8:	e1bffe15 	stw	r6,-8(fp)
8112d6fc:	e1ffff15 	stw	r7,-4(fp)
8112d700:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
8112d704:	e0bfff17 	ldw	r2,-4(fp)
8112d708:	1000021e 	bne	r2,zero,8112d714 <OSTmrStop+0x3c>
        return (OS_FALSE);
8112d70c:	0005883a 	mov	r2,zero
8112d710:	00006606 	br	8112d8ac <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
8112d714:	e0bffc17 	ldw	r2,-16(fp)
8112d718:	1000051e 	bne	r2,zero,8112d730 <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
8112d71c:	e0bfff17 	ldw	r2,-4(fp)
8112d720:	00ffe284 	movi	r3,-118
8112d724:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d728:	0005883a 	mov	r2,zero
8112d72c:	00005f06 	br	8112d8ac <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
8112d730:	e0bffc17 	ldw	r2,-16(fp)
8112d734:	10800003 	ldbu	r2,0(r2)
8112d738:	10803fcc 	andi	r2,r2,255
8112d73c:	10801920 	cmpeqi	r2,r2,100
8112d740:	1000051e 	bne	r2,zero,8112d758 <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112d744:	e0bfff17 	ldw	r2,-4(fp)
8112d748:	00ffe244 	movi	r3,-119
8112d74c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d750:	0005883a 	mov	r2,zero
8112d754:	00005506 	br	8112d8ac <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
8112d758:	d0a08f03 	ldbu	r2,-32196(gp)
8112d75c:	10803fcc 	andi	r2,r2,255
8112d760:	10000526 	beq	r2,zero,8112d778 <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
8112d764:	e0bfff17 	ldw	r2,-4(fp)
8112d768:	00ffe2c4 	movi	r3,-117
8112d76c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112d770:	0005883a 	mov	r2,zero
8112d774:	00004d06 	br	8112d8ac <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
8112d778:	112de600 	call	8112de60 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112d77c:	e0bffc17 	ldw	r2,-16(fp)
8112d780:	10800c43 	ldbu	r2,49(r2)
8112d784:	10803fcc 	andi	r2,r2,255
8112d788:	10c000c8 	cmpgei	r3,r2,3
8112d78c:	1800031e 	bne	r3,zero,8112d79c <OSTmrStop+0xc4>
8112d790:	00803516 	blt	zero,r2,8112d868 <OSTmrStop+0x190>
8112d794:	10003a26 	beq	r2,zero,8112d880 <OSTmrStop+0x1a8>
8112d798:	00003f06 	br	8112d898 <OSTmrStop+0x1c0>
8112d79c:	108000e0 	cmpeqi	r2,r2,3
8112d7a0:	10003d26 	beq	r2,zero,8112d898 <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
8112d7a4:	e13ffc17 	ldw	r4,-16(fp)
8112d7a8:	112dd640 	call	8112dd64 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
8112d7ac:	e0bfff17 	ldw	r2,-4(fp)
8112d7b0:	10000005 	stb	zero,0(r2)
             switch (opt) {
8112d7b4:	e0bffd03 	ldbu	r2,-12(fp)
8112d7b8:	10c000e0 	cmpeqi	r3,r2,3
8112d7bc:	1800041e 	bne	r3,zero,8112d7d0 <OSTmrStop+0xf8>
8112d7c0:	10c00120 	cmpeqi	r3,r2,4
8112d7c4:	1800121e 	bne	r3,zero,8112d810 <OSTmrStop+0x138>
8112d7c8:	10002326 	beq	r2,zero,8112d858 <OSTmrStop+0x180>
8112d7cc:	00001e06 	br	8112d848 <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8112d7d0:	e0bffc17 	ldw	r2,-16(fp)
8112d7d4:	10800117 	ldw	r2,4(r2)
8112d7d8:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
8112d7dc:	e0bffb17 	ldw	r2,-20(fp)
8112d7e0:	10000726 	beq	r2,zero,8112d800 <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
8112d7e4:	e0bffc17 	ldw	r2,-16(fp)
8112d7e8:	10c00217 	ldw	r3,8(r2)
8112d7ec:	e0bffb17 	ldw	r2,-20(fp)
8112d7f0:	180b883a 	mov	r5,r3
8112d7f4:	e13ffc17 	ldw	r4,-16(fp)
8112d7f8:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
8112d7fc:	00001706 	br	8112d85c <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8112d800:	e0bfff17 	ldw	r2,-4(fp)
8112d804:	00ffe3c4 	movi	r3,-113
8112d808:	10c00005 	stb	r3,0(r2)
                      }
                      break;
8112d80c:	00001306 	br	8112d85c <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8112d810:	e0bffc17 	ldw	r2,-16(fp)
8112d814:	10800117 	ldw	r2,4(r2)
8112d818:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
8112d81c:	e0bffb17 	ldw	r2,-20(fp)
8112d820:	10000526 	beq	r2,zero,8112d838 <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
8112d824:	e0bffb17 	ldw	r2,-20(fp)
8112d828:	e17ffe17 	ldw	r5,-8(fp)
8112d82c:	e13ffc17 	ldw	r4,-16(fp)
8112d830:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
8112d834:	00000906 	br	8112d85c <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8112d838:	e0bfff17 	ldw	r2,-4(fp)
8112d83c:	00ffe3c4 	movi	r3,-113
8112d840:	10c00005 	stb	r3,0(r2)
                      }
                      break;
8112d844:	00000506 	br	8112d85c <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
8112d848:	e0bfff17 	ldw	r2,-4(fp)
8112d84c:	00ffe104 	movi	r3,-124
8112d850:	10c00005 	stb	r3,0(r2)
                     break;
8112d854:	00000106 	br	8112d85c <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
8112d858:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
8112d85c:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             return (OS_TRUE);
8112d860:	00800044 	movi	r2,1
8112d864:	00001106 	br	8112d8ac <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
8112d868:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
8112d86c:	e0bfff17 	ldw	r2,-4(fp)
8112d870:	00ffe384 	movi	r3,-114
8112d874:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
8112d878:	00800044 	movi	r2,1
8112d87c:	00000b06 	br	8112d8ac <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
8112d880:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112d884:	e0bfff17 	ldw	r2,-4(fp)
8112d888:	00ffe1c4 	movi	r3,-121
8112d88c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112d890:	0005883a 	mov	r2,zero
8112d894:	00000506 	br	8112d8ac <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
8112d898:	112dea40 	call	8112dea4 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112d89c:	e0bfff17 	ldw	r2,-4(fp)
8112d8a0:	00ffe344 	movi	r3,-115
8112d8a4:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112d8a8:	0005883a 	mov	r2,zero
    }
}
8112d8ac:	e037883a 	mov	sp,fp
8112d8b0:	dfc00117 	ldw	ra,4(sp)
8112d8b4:	df000017 	ldw	fp,0(sp)
8112d8b8:	dec00204 	addi	sp,sp,8
8112d8bc:	f800283a 	ret

8112d8c0 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
8112d8c0:	defffd04 	addi	sp,sp,-12
8112d8c4:	de00012e 	bgeu	sp,et,8112d8cc <OSTmrSignal+0xc>
8112d8c8:	003b68fa 	trap	3
8112d8cc:	dfc00215 	stw	ra,8(sp)
8112d8d0:	df000115 	stw	fp,4(sp)
8112d8d4:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
8112d8d8:	d0a07e17 	ldw	r2,-32264(gp)
8112d8dc:	1009883a 	mov	r4,r2
8112d8e0:	112ae8c0 	call	8112ae8c <OSSemPost>
8112d8e4:	e0bfff05 	stb	r2,-4(fp)
    return (err);
8112d8e8:	e0bfff03 	ldbu	r2,-4(fp)
}
8112d8ec:	e037883a 	mov	sp,fp
8112d8f0:	dfc00117 	ldw	ra,4(sp)
8112d8f4:	df000017 	ldw	fp,0(sp)
8112d8f8:	dec00204 	addi	sp,sp,8
8112d8fc:	f800283a 	ret

8112d900 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
8112d900:	defffe04 	addi	sp,sp,-8
8112d904:	de00012e 	bgeu	sp,et,8112d90c <OSTmr_Alloc+0xc>
8112d908:	003b68fa 	trap	3
8112d90c:	df000115 	stw	fp,4(sp)
8112d910:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
8112d914:	d0a07c17 	ldw	r2,-32272(gp)
8112d918:	1000021e 	bne	r2,zero,8112d924 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
8112d91c:	0005883a 	mov	r2,zero
8112d920:	00001006 	br	8112d964 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
8112d924:	d0a07c17 	ldw	r2,-32272(gp)
8112d928:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
8112d92c:	e0bfff17 	ldw	r2,-4(fp)
8112d930:	10800317 	ldw	r2,12(r2)
8112d934:	d0a07c15 	stw	r2,-32272(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
8112d938:	e0bfff17 	ldw	r2,-4(fp)
8112d93c:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
8112d940:	e0bfff17 	ldw	r2,-4(fp)
8112d944:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
8112d948:	d0a0810b 	ldhu	r2,-32252(gp)
8112d94c:	10800044 	addi	r2,r2,1
8112d950:	d0a0810d 	sth	r2,-32252(gp)
    OSTmrFree--;
8112d954:	d0a0850b 	ldhu	r2,-32236(gp)
8112d958:	10bfffc4 	addi	r2,r2,-1
8112d95c:	d0a0850d 	sth	r2,-32236(gp)
    return (ptmr);
8112d960:	e0bfff17 	ldw	r2,-4(fp)
}
8112d964:	e037883a 	mov	sp,fp
8112d968:	df000017 	ldw	fp,0(sp)
8112d96c:	dec00104 	addi	sp,sp,4
8112d970:	f800283a 	ret

8112d974 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
8112d974:	defffe04 	addi	sp,sp,-8
8112d978:	de00012e 	bgeu	sp,et,8112d980 <OSTmr_Free+0xc>
8112d97c:	003b68fa 	trap	3
8112d980:	df000115 	stw	fp,4(sp)
8112d984:	df000104 	addi	fp,sp,4
8112d988:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
8112d98c:	e0bfff17 	ldw	r2,-4(fp)
8112d990:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
8112d994:	e0bfff17 	ldw	r2,-4(fp)
8112d998:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
8112d99c:	e0bfff17 	ldw	r2,-4(fp)
8112d9a0:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
8112d9a4:	e0bfff17 	ldw	r2,-4(fp)
8112d9a8:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
8112d9ac:	e0bfff17 	ldw	r2,-4(fp)
8112d9b0:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
8112d9b4:	e0bfff17 	ldw	r2,-4(fp)
8112d9b8:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
8112d9bc:	e0bfff17 	ldw	r2,-4(fp)
8112d9c0:	00c00fc4 	movi	r3,63
8112d9c4:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
8112d9c8:	e0bfff17 	ldw	r2,-4(fp)
8112d9cc:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
8112d9d0:	e0bfff17 	ldw	r2,-4(fp)
8112d9d4:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
8112d9d8:	d0e07c17 	ldw	r3,-32272(gp)
8112d9dc:	e0bfff17 	ldw	r2,-4(fp)
8112d9e0:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
8112d9e4:	e0bfff17 	ldw	r2,-4(fp)
8112d9e8:	d0a07c15 	stw	r2,-32272(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
8112d9ec:	d0a0810b 	ldhu	r2,-32252(gp)
8112d9f0:	10bfffc4 	addi	r2,r2,-1
8112d9f4:	d0a0810d 	sth	r2,-32252(gp)
    OSTmrFree++;
8112d9f8:	d0a0850b 	ldhu	r2,-32236(gp)
8112d9fc:	10800044 	addi	r2,r2,1
8112da00:	d0a0850d 	sth	r2,-32236(gp)
}
8112da04:	0001883a 	nop
8112da08:	e037883a 	mov	sp,fp
8112da0c:	df000017 	ldw	fp,0(sp)
8112da10:	dec00104 	addi	sp,sp,4
8112da14:	f800283a 	ret

8112da18 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
8112da18:	defffa04 	addi	sp,sp,-24
8112da1c:	de00012e 	bgeu	sp,et,8112da24 <OSTmr_Init+0xc>
8112da20:	003b68fa 	trap	3
8112da24:	dfc00515 	stw	ra,20(sp)
8112da28:	df000415 	stw	fp,16(sp)
8112da2c:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
8112da30:	01406804 	movi	r5,416
8112da34:	012045b4 	movhi	r4,33046
8112da38:	213fc004 	addi	r4,r4,-256
8112da3c:	1125b880 	call	81125b88 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
8112da40:	01400404 	movi	r5,16
8112da44:	012045b4 	movhi	r4,33046
8112da48:	213ee004 	addi	r4,r4,-1152
8112da4c:	1125b880 	call	81125b88 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
8112da50:	00a045b4 	movhi	r2,33046
8112da54:	10bfc004 	addi	r2,r2,-256
8112da58:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
8112da5c:	00a045b4 	movhi	r2,33046
8112da60:	10bfcd04 	addi	r2,r2,-204
8112da64:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
8112da68:	e03ffc0d 	sth	zero,-16(fp)
8112da6c:	00001606 	br	8112dac8 <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
8112da70:	e0bffd17 	ldw	r2,-12(fp)
8112da74:	00c01904 	movi	r3,100
8112da78:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
8112da7c:	e0bffd17 	ldw	r2,-12(fp)
8112da80:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
8112da84:	e0bffd17 	ldw	r2,-12(fp)
8112da88:	e0fffe17 	ldw	r3,-8(fp)
8112da8c:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
8112da90:	e0bffd17 	ldw	r2,-12(fp)
8112da94:	00c00fc4 	movi	r3,63
8112da98:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
8112da9c:	e0bffd17 	ldw	r2,-12(fp)
8112daa0:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
8112daa4:	e0bffd17 	ldw	r2,-12(fp)
8112daa8:	10800d04 	addi	r2,r2,52
8112daac:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
8112dab0:	e0bffe17 	ldw	r2,-8(fp)
8112dab4:	10800d04 	addi	r2,r2,52
8112dab8:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
8112dabc:	e0bffc0b 	ldhu	r2,-16(fp)
8112dac0:	10800044 	addi	r2,r2,1
8112dac4:	e0bffc0d 	sth	r2,-16(fp)
8112dac8:	e0bffc0b 	ldhu	r2,-16(fp)
8112dacc:	108001f0 	cmpltui	r2,r2,7
8112dad0:	103fe71e 	bne	r2,zero,8112da70 <__reset+0xfb10da70>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
8112dad4:	e0bffd17 	ldw	r2,-12(fp)
8112dad8:	00c01904 	movi	r3,100
8112dadc:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
8112dae0:	e0bffd17 	ldw	r2,-12(fp)
8112dae4:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
8112dae8:	e0bffd17 	ldw	r2,-12(fp)
8112daec:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
8112daf0:	e0bffd17 	ldw	r2,-12(fp)
8112daf4:	00c00fc4 	movi	r3,63
8112daf8:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
8112dafc:	e0bffd17 	ldw	r2,-12(fp)
8112db00:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
8112db04:	d0209115 	stw	zero,-32188(gp)
    OSTmrUsed           = 0;
8112db08:	d020810d 	sth	zero,-32252(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
8112db0c:	00800204 	movi	r2,8
8112db10:	d0a0850d 	sth	r2,-32236(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
8112db14:	00a045b4 	movhi	r2,33046
8112db18:	10bfc004 	addi	r2,r2,-256
8112db1c:	d0a07c15 	stw	r2,-32272(gp)
    OSTmrSem            = OSSemCreate(1);
8112db20:	01000044 	movi	r4,1
8112db24:	112a7dc0 	call	8112a7dc <OSSemCreate>
8112db28:	d0a09315 	stw	r2,-32180(gp)
    OSTmrSemSignal      = OSSemCreate(0);
8112db2c:	0009883a 	mov	r4,zero
8112db30:	112a7dc0 	call	8112a7dc <OSSemCreate>
8112db34:	d0a07e15 	stw	r2,-32264(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
8112db38:	d0a09317 	ldw	r2,-32180(gp)
8112db3c:	e0ffff04 	addi	r3,fp,-4
8112db40:	180d883a 	mov	r6,r3
8112db44:	01604534 	movhi	r5,33044
8112db48:	296c0a04 	addi	r5,r5,-20440
8112db4c:	1009883a 	mov	r4,r2
8112db50:	11243600 	call	81124360 <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
8112db54:	d0a07e17 	ldw	r2,-32264(gp)
8112db58:	e0ffff04 	addi	r3,fp,-4
8112db5c:	180d883a 	mov	r6,r3
8112db60:	01604534 	movhi	r5,33044
8112db64:	296c0f04 	addi	r5,r5,-20420
8112db68:	1009883a 	mov	r4,r2
8112db6c:	11243600 	call	81124360 <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
8112db70:	112db8c0 	call	8112db8c <OSTmr_InitTask>
}
8112db74:	0001883a 	nop
8112db78:	e037883a 	mov	sp,fp
8112db7c:	dfc00117 	ldw	ra,4(sp)
8112db80:	df000017 	ldw	fp,0(sp)
8112db84:	dec00204 	addi	sp,sp,8
8112db88:	f800283a 	ret

8112db8c <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
8112db8c:	defff804 	addi	sp,sp,-32
8112db90:	de00012e 	bgeu	sp,et,8112db98 <OSTmr_InitTask+0xc>
8112db94:	003b68fa 	trap	3
8112db98:	dfc00715 	stw	ra,28(sp)
8112db9c:	df000615 	stw	fp,24(sp)
8112dba0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
8112dba4:	008000c4 	movi	r2,3
8112dba8:	d8800415 	stw	r2,16(sp)
8112dbac:	d8000315 	stw	zero,12(sp)
8112dbb0:	00808004 	movi	r2,512
8112dbb4:	d8800215 	stw	r2,8(sp)
8112dbb8:	00a045b4 	movhi	r2,33046
8112dbbc:	1085ac04 	addi	r2,r2,5808
8112dbc0:	d8800115 	stw	r2,4(sp)
8112dbc4:	00bfff54 	movui	r2,65533
8112dbc8:	d8800015 	stw	r2,0(sp)
8112dbcc:	01c00484 	movi	r7,18
8112dbd0:	01a045b4 	movhi	r6,33046
8112dbd4:	3187ab04 	addi	r6,r6,7852
8112dbd8:	000b883a 	mov	r5,zero
8112dbdc:	012044f4 	movhi	r4,33043
8112dbe0:	2137b804 	addi	r4,r4,-8480
8112dbe4:	112b8700 	call	8112b870 <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
8112dbe8:	e1bfff04 	addi	r6,fp,-4
8112dbec:	01604534 	movhi	r5,33044
8112dbf0:	296c1404 	addi	r5,r5,-20400
8112dbf4:	01000484 	movi	r4,18
8112dbf8:	112c0a00 	call	8112c0a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
8112dbfc:	0001883a 	nop
8112dc00:	e037883a 	mov	sp,fp
8112dc04:	dfc00117 	ldw	ra,4(sp)
8112dc08:	df000017 	ldw	fp,0(sp)
8112dc0c:	dec00204 	addi	sp,sp,8
8112dc10:	f800283a 	ret

8112dc14 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
8112dc14:	defffa04 	addi	sp,sp,-24
8112dc18:	de00012e 	bgeu	sp,et,8112dc20 <OSTmr_Link+0xc>
8112dc1c:	003b68fa 	trap	3
8112dc20:	df000515 	stw	fp,20(sp)
8112dc24:	df000504 	addi	fp,sp,20
8112dc28:	e13ffe15 	stw	r4,-8(fp)
8112dc2c:	2805883a 	mov	r2,r5
8112dc30:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
8112dc34:	e0bffe17 	ldw	r2,-8(fp)
8112dc38:	00c000c4 	movi	r3,3
8112dc3c:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
8112dc40:	e0bfff03 	ldbu	r2,-4(fp)
8112dc44:	10800058 	cmpnei	r2,r2,1
8112dc48:	1000071e 	bne	r2,zero,8112dc68 <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
8112dc4c:	e0bffe17 	ldw	r2,-8(fp)
8112dc50:	10c00717 	ldw	r3,28(r2)
8112dc54:	d0a09117 	ldw	r2,-32188(gp)
8112dc58:	1887883a 	add	r3,r3,r2
8112dc5c:	e0bffe17 	ldw	r2,-8(fp)
8112dc60:	10c00515 	stw	r3,20(r2)
8112dc64:	00001006 	br	8112dca8 <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
8112dc68:	e0bffe17 	ldw	r2,-8(fp)
8112dc6c:	10800617 	ldw	r2,24(r2)
8112dc70:	1000071e 	bne	r2,zero,8112dc90 <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
8112dc74:	e0bffe17 	ldw	r2,-8(fp)
8112dc78:	10c00717 	ldw	r3,28(r2)
8112dc7c:	d0a09117 	ldw	r2,-32188(gp)
8112dc80:	1887883a 	add	r3,r3,r2
8112dc84:	e0bffe17 	ldw	r2,-8(fp)
8112dc88:	10c00515 	stw	r3,20(r2)
8112dc8c:	00000606 	br	8112dca8 <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
8112dc90:	e0bffe17 	ldw	r2,-8(fp)
8112dc94:	10c00617 	ldw	r3,24(r2)
8112dc98:	d0a09117 	ldw	r2,-32188(gp)
8112dc9c:	1887883a 	add	r3,r3,r2
8112dca0:	e0bffe17 	ldw	r2,-8(fp)
8112dca4:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
8112dca8:	e0bffe17 	ldw	r2,-8(fp)
8112dcac:	10800517 	ldw	r2,20(r2)
8112dcb0:	1080004c 	andi	r2,r2,1
8112dcb4:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
8112dcb8:	e0bffb0b 	ldhu	r2,-20(fp)
8112dcbc:	100690fa 	slli	r3,r2,3
8112dcc0:	00a045b4 	movhi	r2,33046
8112dcc4:	10bee004 	addi	r2,r2,-1152
8112dcc8:	1885883a 	add	r2,r3,r2
8112dccc:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
8112dcd0:	e0bffc17 	ldw	r2,-16(fp)
8112dcd4:	10800017 	ldw	r2,0(r2)
8112dcd8:	1000091e 	bne	r2,zero,8112dd00 <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
8112dcdc:	e0bffc17 	ldw	r2,-16(fp)
8112dce0:	e0fffe17 	ldw	r3,-8(fp)
8112dce4:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
8112dce8:	e0bffe17 	ldw	r2,-8(fp)
8112dcec:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
8112dcf0:	e0bffc17 	ldw	r2,-16(fp)
8112dcf4:	00c00044 	movi	r3,1
8112dcf8:	10c0010d 	sth	r3,4(r2)
8112dcfc:	00001206 	br	8112dd48 <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
8112dd00:	e0bffc17 	ldw	r2,-16(fp)
8112dd04:	10800017 	ldw	r2,0(r2)
8112dd08:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
8112dd0c:	e0bffc17 	ldw	r2,-16(fp)
8112dd10:	e0fffe17 	ldw	r3,-8(fp)
8112dd14:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
8112dd18:	e0bffe17 	ldw	r2,-8(fp)
8112dd1c:	e0fffd17 	ldw	r3,-12(fp)
8112dd20:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
8112dd24:	e0bffd17 	ldw	r2,-12(fp)
8112dd28:	e0fffe17 	ldw	r3,-8(fp)
8112dd2c:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
8112dd30:	e0bffc17 	ldw	r2,-16(fp)
8112dd34:	1080010b 	ldhu	r2,4(r2)
8112dd38:	10800044 	addi	r2,r2,1
8112dd3c:	1007883a 	mov	r3,r2
8112dd40:	e0bffc17 	ldw	r2,-16(fp)
8112dd44:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
8112dd48:	e0bffe17 	ldw	r2,-8(fp)
8112dd4c:	10000415 	stw	zero,16(r2)
}
8112dd50:	0001883a 	nop
8112dd54:	e037883a 	mov	sp,fp
8112dd58:	df000017 	ldw	fp,0(sp)
8112dd5c:	dec00104 	addi	sp,sp,4
8112dd60:	f800283a 	ret

8112dd64 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
8112dd64:	defffa04 	addi	sp,sp,-24
8112dd68:	de00012e 	bgeu	sp,et,8112dd70 <OSTmr_Unlink+0xc>
8112dd6c:	003b68fa 	trap	3
8112dd70:	df000515 	stw	fp,20(sp)
8112dd74:	df000504 	addi	fp,sp,20
8112dd78:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
8112dd7c:	e0bfff17 	ldw	r2,-4(fp)
8112dd80:	10800517 	ldw	r2,20(r2)
8112dd84:	1080004c 	andi	r2,r2,1
8112dd88:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
8112dd8c:	e0bffb0b 	ldhu	r2,-20(fp)
8112dd90:	100690fa 	slli	r3,r2,3
8112dd94:	00a045b4 	movhi	r2,33046
8112dd98:	10bee004 	addi	r2,r2,-1152
8112dd9c:	1885883a 	add	r2,r3,r2
8112dda0:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
8112dda4:	e0bffc17 	ldw	r2,-16(fp)
8112dda8:	10c00017 	ldw	r3,0(r2)
8112ddac:	e0bfff17 	ldw	r2,-4(fp)
8112ddb0:	18800b1e 	bne	r3,r2,8112dde0 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
8112ddb4:	e0bfff17 	ldw	r2,-4(fp)
8112ddb8:	10800317 	ldw	r2,12(r2)
8112ddbc:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
8112ddc0:	e0bffc17 	ldw	r2,-16(fp)
8112ddc4:	e0fffd17 	ldw	r3,-12(fp)
8112ddc8:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
8112ddcc:	e0bffd17 	ldw	r2,-12(fp)
8112ddd0:	10001126 	beq	r2,zero,8112de18 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
8112ddd4:	e0bffd17 	ldw	r2,-12(fp)
8112ddd8:	10000415 	stw	zero,16(r2)
8112dddc:	00000e06 	br	8112de18 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
8112dde0:	e0bfff17 	ldw	r2,-4(fp)
8112dde4:	10800417 	ldw	r2,16(r2)
8112dde8:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
8112ddec:	e0bfff17 	ldw	r2,-4(fp)
8112ddf0:	10800317 	ldw	r2,12(r2)
8112ddf4:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
8112ddf8:	e0bffd17 	ldw	r2,-12(fp)
8112ddfc:	e0fffe17 	ldw	r3,-8(fp)
8112de00:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
8112de04:	e0bffe17 	ldw	r2,-8(fp)
8112de08:	10000326 	beq	r2,zero,8112de18 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
8112de0c:	e0bffe17 	ldw	r2,-8(fp)
8112de10:	e0fffd17 	ldw	r3,-12(fp)
8112de14:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
8112de18:	e0bfff17 	ldw	r2,-4(fp)
8112de1c:	00c00044 	movi	r3,1
8112de20:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
8112de24:	e0bfff17 	ldw	r2,-4(fp)
8112de28:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
8112de2c:	e0bfff17 	ldw	r2,-4(fp)
8112de30:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
8112de34:	e0bffc17 	ldw	r2,-16(fp)
8112de38:	1080010b 	ldhu	r2,4(r2)
8112de3c:	10bfffc4 	addi	r2,r2,-1
8112de40:	1007883a 	mov	r3,r2
8112de44:	e0bffc17 	ldw	r2,-16(fp)
8112de48:	10c0010d 	sth	r3,4(r2)
}
8112de4c:	0001883a 	nop
8112de50:	e037883a 	mov	sp,fp
8112de54:	df000017 	ldw	fp,0(sp)
8112de58:	dec00104 	addi	sp,sp,4
8112de5c:	f800283a 	ret

8112de60 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
8112de60:	defffd04 	addi	sp,sp,-12
8112de64:	de00012e 	bgeu	sp,et,8112de6c <OSTmr_Lock+0xc>
8112de68:	003b68fa 	trap	3
8112de6c:	dfc00215 	stw	ra,8(sp)
8112de70:	df000115 	stw	fp,4(sp)
8112de74:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
8112de78:	d0a09317 	ldw	r2,-32180(gp)
8112de7c:	e1bfff04 	addi	r6,fp,-4
8112de80:	000b883a 	mov	r5,zero
8112de84:	1009883a 	mov	r4,r2
8112de88:	112ab040 	call	8112ab04 <OSSemPend>
    (void)err;
}
8112de8c:	0001883a 	nop
8112de90:	e037883a 	mov	sp,fp
8112de94:	dfc00117 	ldw	ra,4(sp)
8112de98:	df000017 	ldw	fp,0(sp)
8112de9c:	dec00204 	addi	sp,sp,8
8112dea0:	f800283a 	ret

8112dea4 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
8112dea4:	defffe04 	addi	sp,sp,-8
8112dea8:	de00012e 	bgeu	sp,et,8112deb0 <OSTmr_Unlock+0xc>
8112deac:	003b68fa 	trap	3
8112deb0:	dfc00115 	stw	ra,4(sp)
8112deb4:	df000015 	stw	fp,0(sp)
8112deb8:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
8112debc:	d0a09317 	ldw	r2,-32180(gp)
8112dec0:	1009883a 	mov	r4,r2
8112dec4:	112ae8c0 	call	8112ae8c <OSSemPost>
}
8112dec8:	0001883a 	nop
8112decc:	e037883a 	mov	sp,fp
8112ded0:	dfc00117 	ldw	ra,4(sp)
8112ded4:	df000017 	ldw	fp,0(sp)
8112ded8:	dec00204 	addi	sp,sp,8
8112dedc:	f800283a 	ret

8112dee0 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
8112dee0:	defff704 	addi	sp,sp,-36
8112dee4:	de00012e 	bgeu	sp,et,8112deec <OSTmr_Task+0xc>
8112dee8:	003b68fa 	trap	3
8112deec:	dfc00815 	stw	ra,32(sp)
8112def0:	df000715 	stw	fp,28(sp)
8112def4:	df000704 	addi	fp,sp,28
8112def8:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
8112defc:	d0a07e17 	ldw	r2,-32264(gp)
8112df00:	e0fffe04 	addi	r3,fp,-8
8112df04:	180d883a 	mov	r6,r3
8112df08:	000b883a 	mov	r5,zero
8112df0c:	1009883a 	mov	r4,r2
8112df10:	112ab040 	call	8112ab04 <OSSemPend>
        OSTmr_Lock();
8112df14:	112de600 	call	8112de60 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
8112df18:	d0a09117 	ldw	r2,-32188(gp)
8112df1c:	10800044 	addi	r2,r2,1
8112df20:	d0a09115 	stw	r2,-32188(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
8112df24:	d0a09117 	ldw	r2,-32188(gp)
8112df28:	1080004c 	andi	r2,r2,1
8112df2c:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
8112df30:	e0bffa0b 	ldhu	r2,-24(fp)
8112df34:	100690fa 	slli	r3,r2,3
8112df38:	00a045b4 	movhi	r2,33046
8112df3c:	10bee004 	addi	r2,r2,-1152
8112df40:	1885883a 	add	r2,r3,r2
8112df44:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
8112df48:	e0bffb17 	ldw	r2,-20(fp)
8112df4c:	10800017 	ldw	r2,0(r2)
8112df50:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
8112df54:	00002206 	br	8112dfe0 <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
8112df58:	e0bff917 	ldw	r2,-28(fp)
8112df5c:	10800317 	ldw	r2,12(r2)
8112df60:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
8112df64:	e0bff917 	ldw	r2,-28(fp)
8112df68:	10c00517 	ldw	r3,20(r2)
8112df6c:	d0a09117 	ldw	r2,-32188(gp)
8112df70:	1880191e 	bne	r3,r2,8112dfd8 <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
8112df74:	e0bff917 	ldw	r2,-28(fp)
8112df78:	10800117 	ldw	r2,4(r2)
8112df7c:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
8112df80:	e0bffd17 	ldw	r2,-12(fp)
8112df84:	10000626 	beq	r2,zero,8112dfa0 <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
8112df88:	e0bff917 	ldw	r2,-28(fp)
8112df8c:	10c00217 	ldw	r3,8(r2)
8112df90:	e0bffd17 	ldw	r2,-12(fp)
8112df94:	180b883a 	mov	r5,r3
8112df98:	e13ff917 	ldw	r4,-28(fp)
8112df9c:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
8112dfa0:	e13ff917 	ldw	r4,-28(fp)
8112dfa4:	112dd640 	call	8112dd64 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
8112dfa8:	e0bff917 	ldw	r2,-28(fp)
8112dfac:	10800c03 	ldbu	r2,48(r2)
8112dfb0:	10803fcc 	andi	r2,r2,255
8112dfb4:	10800098 	cmpnei	r2,r2,2
8112dfb8:	1000041e 	bne	r2,zero,8112dfcc <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
8112dfbc:	01400044 	movi	r5,1
8112dfc0:	e13ff917 	ldw	r4,-28(fp)
8112dfc4:	112dc140 	call	8112dc14 <OSTmr_Link>
8112dfc8:	00000306 	br	8112dfd8 <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
8112dfcc:	e0bff917 	ldw	r2,-28(fp)
8112dfd0:	00c00084 	movi	r3,2
8112dfd4:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
8112dfd8:	e0bffc17 	ldw	r2,-16(fp)
8112dfdc:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
8112dfe0:	e0bff917 	ldw	r2,-28(fp)
8112dfe4:	103fdc1e 	bne	r2,zero,8112df58 <__reset+0xfb10df58>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
8112dfe8:	112dea40 	call	8112dea4 <OSTmr_Unlock>
    }
8112dfec:	003fc306 	br	8112defc <__reset+0xfb10defc>

8112dff0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8112dff0:	defffd04 	addi	sp,sp,-12
8112dff4:	de00012e 	bgeu	sp,et,8112dffc <alt_dev_reg+0xc>
8112dff8:	003b68fa 	trap	3
8112dffc:	dfc00215 	stw	ra,8(sp)
8112e000:	df000115 	stw	fp,4(sp)
8112e004:	df000104 	addi	fp,sp,4
8112e008:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8112e00c:	d1601304 	addi	r5,gp,-32692
8112e010:	e13fff17 	ldw	r4,-4(fp)
8112e014:	11371900 	call	81137190 <alt_dev_llist_insert>
}
8112e018:	e037883a 	mov	sp,fp
8112e01c:	dfc00117 	ldw	ra,4(sp)
8112e020:	df000017 	ldw	fp,0(sp)
8112e024:	dec00204 	addi	sp,sp,8
8112e028:	f800283a 	ret

8112e02c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8112e02c:	defffd04 	addi	sp,sp,-12
8112e030:	de00012e 	bgeu	sp,et,8112e038 <alt_irq_init+0xc>
8112e034:	003b68fa 	trap	3
8112e038:	dfc00215 	stw	ra,8(sp)
8112e03c:	df000115 	stw	fp,4(sp)
8112e040:	df000104 	addi	fp,sp,4
8112e044:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8112e048:	1137c280 	call	81137c28 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8112e04c:	00800044 	movi	r2,1
8112e050:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8112e054:	0001883a 	nop
8112e058:	e037883a 	mov	sp,fp
8112e05c:	dfc00117 	ldw	ra,4(sp)
8112e060:	df000017 	ldw	fp,0(sp)
8112e064:	dec00204 	addi	sp,sp,8
8112e068:	f800283a 	ret

8112e06c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8112e06c:	defffe04 	addi	sp,sp,-8
8112e070:	de00012e 	bgeu	sp,et,8112e078 <alt_sys_init+0xc>
8112e074:	003b68fa 	trap	3
8112e078:	dfc00115 	stw	ra,4(sp)
8112e07c:	df000015 	stw	fp,0(sp)
8112e080:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8112e084:	01c0fa04 	movi	r7,1000
8112e088:	018000c4 	movi	r6,3
8112e08c:	000b883a 	mov	r5,zero
8112e090:	01200034 	movhi	r4,32768
8112e094:	21011004 	addi	r4,r4,1088
8112e098:	11341640 	call	81134164 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8112e09c:	01800084 	movi	r6,2
8112e0a0:	000b883a 	mov	r5,zero
8112e0a4:	01204534 	movhi	r4,33044
8112e0a8:	212f5804 	addi	r4,r4,-17056
8112e0ac:	11326b00 	call	811326b0 <altera_avalon_jtag_uart_init>
8112e0b0:	01204534 	movhi	r4,33044
8112e0b4:	212f4e04 	addi	r4,r4,-17096
8112e0b8:	112dff00 	call	8112dff0 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
8112e0bc:	01800044 	movi	r6,1
8112e0c0:	000b883a 	mov	r5,zero
8112e0c4:	01204534 	movhi	r4,33044
8112e0c8:	21336904 	addi	r4,r4,-12892
8112e0cc:	11340340 	call	81134034 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
8112e0d0:	000d883a 	mov	r6,zero
8112e0d4:	000b883a 	mov	r5,zero
8112e0d8:	01204534 	movhi	r4,33044
8112e0dc:	21337504 	addi	r4,r4,-12844
8112e0e0:	11340340 	call	81134034 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8112e0e4:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8112e0e8:	01800184 	movi	r6,6
8112e0ec:	000b883a 	mov	r5,zero
8112e0f0:	01204534 	movhi	r4,33044
8112e0f4:	21338b04 	addi	r4,r4,-12756
8112e0f8:	11343100 	call	81134310 <altera_avalon_uart_init>
8112e0fc:	01204534 	movhi	r4,33044
8112e100:	21338104 	addi	r4,r4,-12796
8112e104:	112dff00 	call	8112dff0 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
8112e108:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M, dma_DDR_M);
8112e10c:	00a04534 	movhi	r2,33044
8112e110:	10b3b504 	addi	r2,r2,-12588
8112e114:	10c00717 	ldw	r3,28(r2)
8112e118:	00a04534 	movhi	r2,33044
8112e11c:	10b3b504 	addi	r2,r2,-12588
8112e120:	10800817 	ldw	r2,32(r2)
8112e124:	100d883a 	mov	r6,r2
8112e128:	180b883a 	mov	r5,r3
8112e12c:	01204534 	movhi	r4,33044
8112e130:	2133b504 	addi	r4,r4,-12588
8112e134:	1136b980 	call	81136b98 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8112e138:	01204534 	movhi	r4,33044
8112e13c:	2133ce04 	addi	r4,r4,-12488
8112e140:	112dff00 	call	8112dff0 <alt_dev_reg>
}
8112e144:	0001883a 	nop
8112e148:	e037883a 	mov	sp,fp
8112e14c:	dfc00117 	ldw	ra,4(sp)
8112e150:	df000017 	ldw	fp,0(sp)
8112e154:	dec00204 	addi	sp,sp,8
8112e158:	f800283a 	ret

8112e15c <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
8112e15c:	defffa04 	addi	sp,sp,-24
8112e160:	de00012e 	bgeu	sp,et,8112e168 <Write_Sector_Data+0xc>
8112e164:	003b68fa 	trap	3
8112e168:	dfc00515 	stw	ra,20(sp)
8112e16c:	df000415 	stw	fp,16(sp)
8112e170:	df000404 	addi	fp,sp,16
8112e174:	e13ffe15 	stw	r4,-8(fp)
8112e178:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8112e17c:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
8112e180:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
8112e184:	10001e26 	beq	r2,zero,8112e200 <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
8112e188:	00803fc4 	movi	r2,255
8112e18c:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8112e190:	d0a09d17 	ldw	r2,-32140(gp)
8112e194:	e13ffe17 	ldw	r4,-8(fp)
8112e198:	e0ffff17 	ldw	r3,-4(fp)
8112e19c:	20c7883a 	add	r3,r4,r3
8112e1a0:	1806927a 	slli	r3,r3,9
8112e1a4:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
8112e1a8:	d0a09c17 	ldw	r2,-32144(gp)
8112e1ac:	00c00604 	movi	r3,24
8112e1b0:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8112e1b4:	d0a09917 	ldw	r2,-32156(gp)
8112e1b8:	1080002b 	ldhuio	r2,0(r2)
8112e1bc:	10bfffcc 	andi	r2,r2,65535
8112e1c0:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
8112e1c4:	e0bffd0b 	ldhu	r2,-12(fp)
8112e1c8:	10bfffcc 	andi	r2,r2,65535
8112e1cc:	1080010c 	andi	r2,r2,4
8112e1d0:	103ff81e 	bne	r2,zero,8112e1b4 <__reset+0xfb10e1b4>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
8112e1d4:	e0bffd0b 	ldhu	r2,-12(fp)
8112e1d8:	10bfffcc 	andi	r2,r2,65535
8112e1dc:	1080040c 	andi	r2,r2,16
8112e1e0:	1000071e 	bne	r2,zero,8112e200 <Write_Sector_Data+0xa4>
        {
            result = true;
8112e1e4:	00800044 	movi	r2,1
8112e1e8:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8112e1ec:	d020a215 	stw	zero,-32120(gp)
            current_sector_index = sector_index+partition_offset;
8112e1f0:	e0fffe17 	ldw	r3,-8(fp)
8112e1f4:	e0bfff17 	ldw	r2,-4(fp)
8112e1f8:	1885883a 	add	r2,r3,r2
8112e1fc:	d0a0a315 	stw	r2,-32116(gp)
        }
    }
    return result;
8112e200:	e0bffc17 	ldw	r2,-16(fp)
}
8112e204:	e037883a 	mov	sp,fp
8112e208:	dfc00117 	ldw	ra,4(sp)
8112e20c:	df000017 	ldw	fp,0(sp)
8112e210:	dec00204 	addi	sp,sp,8
8112e214:	f800283a 	ret

8112e218 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
8112e218:	defffd04 	addi	sp,sp,-12
8112e21c:	de00012e 	bgeu	sp,et,8112e224 <Save_Modified_Sector+0xc>
8112e220:	003b68fa 	trap	3
8112e224:	dfc00215 	stw	ra,8(sp)
8112e228:	df000115 	stw	fp,4(sp)
8112e22c:	df000104 	addi	fp,sp,4
    bool result = true;
8112e230:	00800044 	movi	r2,1
8112e234:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
8112e238:	d0a0a217 	ldw	r2,-32120(gp)
8112e23c:	10000526 	beq	r2,zero,8112e254 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
8112e240:	d0a0a317 	ldw	r2,-32116(gp)
8112e244:	000b883a 	mov	r5,zero
8112e248:	1009883a 	mov	r4,r2
8112e24c:	112e15c0 	call	8112e15c <Write_Sector_Data>
8112e250:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
8112e254:	e0bfff17 	ldw	r2,-4(fp)
}
8112e258:	e037883a 	mov	sp,fp
8112e25c:	dfc00117 	ldw	ra,4(sp)
8112e260:	df000017 	ldw	fp,0(sp)
8112e264:	dec00204 	addi	sp,sp,8
8112e268:	f800283a 	ret

8112e26c <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
8112e26c:	defffa04 	addi	sp,sp,-24
8112e270:	de00012e 	bgeu	sp,et,8112e278 <Read_Sector_Data+0xc>
8112e274:	003b68fa 	trap	3
8112e278:	dfc00515 	stw	ra,20(sp)
8112e27c:	df000415 	stw	fp,16(sp)
8112e280:	df000404 	addi	fp,sp,16
8112e284:	e13ffe15 	stw	r4,-8(fp)
8112e288:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
8112e28c:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
8112e290:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
8112e294:	10002726 	beq	r2,zero,8112e334 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
8112e298:	00803fc4 	movi	r2,255
8112e29c:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
8112e2a0:	d0a0a217 	ldw	r2,-32120(gp)
8112e2a4:	10000726 	beq	r2,zero,8112e2c4 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
8112e2a8:	d0a0a317 	ldw	r2,-32116(gp)
8112e2ac:	000b883a 	mov	r5,zero
8112e2b0:	1009883a 	mov	r4,r2
8112e2b4:	112e15c0 	call	8112e15c <Write_Sector_Data>
8112e2b8:	1000021e 	bne	r2,zero,8112e2c4 <Read_Sector_Data+0x58>
            {
                return false;
8112e2bc:	0005883a 	mov	r2,zero
8112e2c0:	00001d06 	br	8112e338 <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8112e2c4:	d0a09d17 	ldw	r2,-32140(gp)
8112e2c8:	e13ffe17 	ldw	r4,-8(fp)
8112e2cc:	e0ffff17 	ldw	r3,-4(fp)
8112e2d0:	20c7883a 	add	r3,r4,r3
8112e2d4:	1806927a 	slli	r3,r3,9
8112e2d8:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
8112e2dc:	d0a09c17 	ldw	r2,-32144(gp)
8112e2e0:	00c00444 	movi	r3,17
8112e2e4:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8112e2e8:	d0a09917 	ldw	r2,-32156(gp)
8112e2ec:	1080002b 	ldhuio	r2,0(r2)
8112e2f0:	10bfffcc 	andi	r2,r2,65535
8112e2f4:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
8112e2f8:	e0bffd0b 	ldhu	r2,-12(fp)
8112e2fc:	10bfffcc 	andi	r2,r2,65535
8112e300:	1080010c 	andi	r2,r2,4
8112e304:	103ff81e 	bne	r2,zero,8112e2e8 <__reset+0xfb10e2e8>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
8112e308:	e0bffd0b 	ldhu	r2,-12(fp)
8112e30c:	10bfffcc 	andi	r2,r2,65535
8112e310:	1080040c 	andi	r2,r2,16
8112e314:	1000071e 	bne	r2,zero,8112e334 <Read_Sector_Data+0xc8>
		{
			result = true;
8112e318:	00800044 	movi	r2,1
8112e31c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8112e320:	d020a215 	stw	zero,-32120(gp)
            current_sector_index = sector_index+partition_offset;
8112e324:	e0fffe17 	ldw	r3,-8(fp)
8112e328:	e0bfff17 	ldw	r2,-4(fp)
8112e32c:	1885883a 	add	r2,r3,r2
8112e330:	d0a0a315 	stw	r2,-32116(gp)
		}
	}
	return result;
8112e334:	e0bffc17 	ldw	r2,-16(fp)
}
8112e338:	e037883a 	mov	sp,fp
8112e33c:	dfc00117 	ldw	ra,4(sp)
8112e340:	df000017 	ldw	fp,0(sp)
8112e344:	dec00204 	addi	sp,sp,8
8112e348:	f800283a 	ret

8112e34c <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
8112e34c:	defffb04 	addi	sp,sp,-20
8112e350:	de00012e 	bgeu	sp,et,8112e358 <get_cluster_flag+0xc>
8112e354:	003b68fa 	trap	3
8112e358:	dfc00415 	stw	ra,16(sp)
8112e35c:	df000315 	stw	fp,12(sp)
8112e360:	df000304 	addi	fp,sp,12
8112e364:	e13ffe15 	stw	r4,-8(fp)
8112e368:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
8112e36c:	e0bffe17 	ldw	r2,-8(fp)
8112e370:	1004d23a 	srli	r2,r2,8
8112e374:	d0e09f17 	ldw	r3,-32132(gp)
8112e378:	10c5883a 	add	r2,r2,r3
8112e37c:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
8112e380:	00a045b4 	movhi	r2,33046
8112e384:	10907c04 	addi	r2,r2,16880
8112e388:	10801117 	ldw	r2,68(r2)
8112e38c:	e0fffd17 	ldw	r3,-12(fp)
8112e390:	1885883a 	add	r2,r3,r2
8112e394:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
8112e398:	d0a0a317 	ldw	r2,-32116(gp)
8112e39c:	e0fffd17 	ldw	r3,-12(fp)
8112e3a0:	18800726 	beq	r3,r2,8112e3c0 <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
8112e3a4:	e0bffd17 	ldw	r2,-12(fp)
8112e3a8:	000b883a 	mov	r5,zero
8112e3ac:	1009883a 	mov	r4,r2
8112e3b0:	112e26c0 	call	8112e26c <Read_Sector_Data>
8112e3b4:	1000021e 	bne	r2,zero,8112e3c0 <get_cluster_flag+0x74>
        {
            return false;
8112e3b8:	0005883a 	mov	r2,zero
8112e3bc:	00000d06 	br	8112e3f4 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
8112e3c0:	e0bffe17 	ldw	r2,-8(fp)
8112e3c4:	10803fcc 	andi	r2,r2,255
8112e3c8:	1085883a 	add	r2,r2,r2
8112e3cc:	1007883a 	mov	r3,r2
8112e3d0:	d0a0a117 	ldw	r2,-32124(gp)
8112e3d4:	10800a17 	ldw	r2,40(r2)
8112e3d8:	1885883a 	add	r2,r3,r2
8112e3dc:	1080002b 	ldhuio	r2,0(r2)
8112e3e0:	10bfffcc 	andi	r2,r2,65535
8112e3e4:	1007883a 	mov	r3,r2
8112e3e8:	e0bfff17 	ldw	r2,-4(fp)
8112e3ec:	10c0000d 	sth	r3,0(r2)
    return true;
8112e3f0:	00800044 	movi	r2,1
}
8112e3f4:	e037883a 	mov	sp,fp
8112e3f8:	dfc00117 	ldw	ra,4(sp)
8112e3fc:	df000017 	ldw	fp,0(sp)
8112e400:	dec00204 	addi	sp,sp,8
8112e404:	f800283a 	ret

8112e408 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
8112e408:	defffa04 	addi	sp,sp,-24
8112e40c:	de00012e 	bgeu	sp,et,8112e414 <mark_cluster+0xc>
8112e410:	003b68fa 	trap	3
8112e414:	dfc00515 	stw	ra,20(sp)
8112e418:	df000415 	stw	fp,16(sp)
8112e41c:	df000404 	addi	fp,sp,16
8112e420:	e13ffd15 	stw	r4,-12(fp)
8112e424:	2805883a 	mov	r2,r5
8112e428:	e1bfff15 	stw	r6,-4(fp)
8112e42c:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
8112e430:	e0bffd17 	ldw	r2,-12(fp)
8112e434:	1004d23a 	srli	r2,r2,8
8112e438:	d0e09f17 	ldw	r3,-32132(gp)
8112e43c:	10c5883a 	add	r2,r2,r3
8112e440:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
8112e444:	e0bfff17 	ldw	r2,-4(fp)
8112e448:	10000726 	beq	r2,zero,8112e468 <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
8112e44c:	00a045b4 	movhi	r2,33046
8112e450:	10907c04 	addi	r2,r2,16880
8112e454:	10801117 	ldw	r2,68(r2)
8112e458:	e0fffc17 	ldw	r3,-16(fp)
8112e45c:	1885883a 	add	r2,r3,r2
8112e460:	e0bffc15 	stw	r2,-16(fp)
8112e464:	00000606 	br	8112e480 <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
8112e468:	00a045b4 	movhi	r2,33046
8112e46c:	10907c04 	addi	r2,r2,16880
8112e470:	10801217 	ldw	r2,72(r2)
8112e474:	e0fffc17 	ldw	r3,-16(fp)
8112e478:	1885883a 	add	r2,r3,r2
8112e47c:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
8112e480:	d0a0a317 	ldw	r2,-32116(gp)
8112e484:	e0fffc17 	ldw	r3,-16(fp)
8112e488:	18800726 	beq	r3,r2,8112e4a8 <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
8112e48c:	e0bffc17 	ldw	r2,-16(fp)
8112e490:	000b883a 	mov	r5,zero
8112e494:	1009883a 	mov	r4,r2
8112e498:	112e26c0 	call	8112e26c <Read_Sector_Data>
8112e49c:	1000021e 	bne	r2,zero,8112e4a8 <mark_cluster+0xa0>
        {
            return false;
8112e4a0:	0005883a 	mov	r2,zero
8112e4a4:	00000d06 	br	8112e4dc <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
8112e4a8:	e0bffd17 	ldw	r2,-12(fp)
8112e4ac:	10803fcc 	andi	r2,r2,255
8112e4b0:	1085883a 	add	r2,r2,r2
8112e4b4:	1007883a 	mov	r3,r2
8112e4b8:	d0a0a117 	ldw	r2,-32124(gp)
8112e4bc:	10800a17 	ldw	r2,40(r2)
8112e4c0:	1885883a 	add	r2,r3,r2
8112e4c4:	1007883a 	mov	r3,r2
8112e4c8:	e0bffe0f 	ldh	r2,-8(fp)
8112e4cc:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
8112e4d0:	00800044 	movi	r2,1
8112e4d4:	d0a0a215 	stw	r2,-32120(gp)
    return true;
8112e4d8:	00800044 	movi	r2,1
}
8112e4dc:	e037883a 	mov	sp,fp
8112e4e0:	dfc00117 	ldw	ra,4(sp)
8112e4e4:	df000017 	ldw	fp,0(sp)
8112e4e8:	dec00204 	addi	sp,sp,8
8112e4ec:	f800283a 	ret

8112e4f0 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
8112e4f0:	defff704 	addi	sp,sp,-36
8112e4f4:	de00012e 	bgeu	sp,et,8112e4fc <Check_for_Master_Boot_Record+0xc>
8112e4f8:	003b68fa 	trap	3
8112e4fc:	dfc00815 	stw	ra,32(sp)
8112e500:	df000715 	stw	fp,28(sp)
8112e504:	df000704 	addi	fp,sp,28
	bool result = false;
8112e508:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
8112e50c:	000b883a 	mov	r5,zero
8112e510:	0009883a 	mov	r4,zero
8112e514:	112e26c0 	call	8112e26c <Read_Sector_Data>
8112e518:	10005a26 	beq	r2,zero,8112e684 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
8112e51c:	d0a0a117 	ldw	r2,-32124(gp)
8112e520:	10800a17 	ldw	r2,40(r2)
8112e524:	10807f84 	addi	r2,r2,510
8112e528:	1080002b 	ldhuio	r2,0(r2)
8112e52c:	10bfffcc 	andi	r2,r2,65535
8112e530:	10bfffcc 	andi	r2,r2,65535
8112e534:	10a0001c 	xori	r2,r2,32768
8112e538:	10a00004 	addi	r2,r2,-32768
8112e53c:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
8112e540:	e0bffb17 	ldw	r2,-20(fp)
8112e544:	10ffffcc 	andi	r3,r2,65535
8112e548:	00aa9554 	movui	r2,43605
8112e54c:	18804d1e 	bne	r3,r2,8112e684 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
8112e550:	e03ffa15 	stw	zero,-24(fp)
8112e554:	00004806 	br	8112e678 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
8112e558:	e0bffa17 	ldw	r2,-24(fp)
8112e55c:	1004913a 	slli	r2,r2,4
8112e560:	10806f84 	addi	r2,r2,446
8112e564:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
8112e568:	d0a0a117 	ldw	r2,-32124(gp)
8112e56c:	10c00a17 	ldw	r3,40(r2)
8112e570:	e0bffc17 	ldw	r2,-16(fp)
8112e574:	1885883a 	add	r2,r3,r2
8112e578:	10800104 	addi	r2,r2,4
8112e57c:	10800023 	ldbuio	r2,0(r2)
8112e580:	10803fcc 	andi	r2,r2,255
8112e584:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
8112e588:	e0bffd07 	ldb	r2,-12(fp)
8112e58c:	10800060 	cmpeqi	r2,r2,1
8112e590:	1000091e 	bne	r2,zero,8112e5b8 <Check_for_Master_Boot_Record+0xc8>
8112e594:	e0bffd07 	ldb	r2,-12(fp)
8112e598:	10800120 	cmpeqi	r2,r2,4
8112e59c:	1000061e 	bne	r2,zero,8112e5b8 <Check_for_Master_Boot_Record+0xc8>
8112e5a0:	e0bffd07 	ldb	r2,-12(fp)
8112e5a4:	108001a0 	cmpeqi	r2,r2,6
8112e5a8:	1000031e 	bne	r2,zero,8112e5b8 <Check_for_Master_Boot_Record+0xc8>
8112e5ac:	e0bffd07 	ldb	r2,-12(fp)
8112e5b0:	10800398 	cmpnei	r2,r2,14
8112e5b4:	10002d1e 	bne	r2,zero,8112e66c <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
8112e5b8:	d0a0a117 	ldw	r2,-32124(gp)
8112e5bc:	10c00a17 	ldw	r3,40(r2)
8112e5c0:	e0bffc17 	ldw	r2,-16(fp)
8112e5c4:	1885883a 	add	r2,r3,r2
8112e5c8:	10800284 	addi	r2,r2,10
8112e5cc:	1080002b 	ldhuio	r2,0(r2)
8112e5d0:	10bfffcc 	andi	r2,r2,65535
8112e5d4:	1006943a 	slli	r3,r2,16
8112e5d8:	d0a0a117 	ldw	r2,-32124(gp)
8112e5dc:	11000a17 	ldw	r4,40(r2)
8112e5e0:	e0bffc17 	ldw	r2,-16(fp)
8112e5e4:	2085883a 	add	r2,r4,r2
8112e5e8:	10800204 	addi	r2,r2,8
8112e5ec:	1080002b 	ldhuio	r2,0(r2)
8112e5f0:	10bfffcc 	andi	r2,r2,65535
8112e5f4:	10bfffcc 	andi	r2,r2,65535
8112e5f8:	1884b03a 	or	r2,r3,r2
8112e5fc:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
8112e600:	d0a0a117 	ldw	r2,-32124(gp)
8112e604:	10c00a17 	ldw	r3,40(r2)
8112e608:	e0bffc17 	ldw	r2,-16(fp)
8112e60c:	1885883a 	add	r2,r3,r2
8112e610:	10800384 	addi	r2,r2,14
8112e614:	1080002b 	ldhuio	r2,0(r2)
8112e618:	10bfffcc 	andi	r2,r2,65535
8112e61c:	1006943a 	slli	r3,r2,16
8112e620:	d0a0a117 	ldw	r2,-32124(gp)
8112e624:	11000a17 	ldw	r4,40(r2)
8112e628:	e0bffc17 	ldw	r2,-16(fp)
8112e62c:	2085883a 	add	r2,r4,r2
8112e630:	10800304 	addi	r2,r2,12
8112e634:	1080002b 	ldhuio	r2,0(r2)
8112e638:	10bfffcc 	andi	r2,r2,65535
8112e63c:	10bfffcc 	andi	r2,r2,65535
8112e640:	1884b03a 	or	r2,r3,r2
8112e644:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
8112e648:	e0bfff17 	ldw	r2,-4(fp)
8112e64c:	0080070e 	bge	zero,r2,8112e66c <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
8112e650:	00800044 	movi	r2,1
8112e654:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
8112e658:	e0bfff17 	ldw	r2,-4(fp)
8112e65c:	d0a0a015 	stw	r2,-32128(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
8112e660:	e0bffe17 	ldw	r2,-8(fp)
8112e664:	d0a09f15 	stw	r2,-32132(gp)
						break;
8112e668:	00000606 	br	8112e684 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
8112e66c:	e0bffa17 	ldw	r2,-24(fp)
8112e670:	10800044 	addi	r2,r2,1
8112e674:	e0bffa15 	stw	r2,-24(fp)
8112e678:	e0bffa17 	ldw	r2,-24(fp)
8112e67c:	10800110 	cmplti	r2,r2,4
8112e680:	103fb51e 	bne	r2,zero,8112e558 <__reset+0xfb10e558>
				}
			}
		}
	}

	return result;
8112e684:	e0bff917 	ldw	r2,-28(fp)
}
8112e688:	e037883a 	mov	sp,fp
8112e68c:	dfc00117 	ldw	ra,4(sp)
8112e690:	df000017 	ldw	fp,0(sp)
8112e694:	dec00204 	addi	sp,sp,8
8112e698:	f800283a 	ret

8112e69c <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
8112e69c:	defff804 	addi	sp,sp,-32
8112e6a0:	de00012e 	bgeu	sp,et,8112e6a8 <Read_File_Record_At_Offset+0xc>
8112e6a4:	003b68fa 	trap	3
8112e6a8:	dfc00715 	stw	ra,28(sp)
8112e6ac:	df000615 	stw	fp,24(sp)
8112e6b0:	df000604 	addi	fp,sp,24
8112e6b4:	e13ffc15 	stw	r4,-16(fp)
8112e6b8:	e17ffd15 	stw	r5,-12(fp)
8112e6bc:	e1bffe15 	stw	r6,-8(fp)
8112e6c0:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
8112e6c4:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112e6c8:	e0bffc17 	ldw	r2,-16(fp)
8112e6cc:	108007cc 	andi	r2,r2,31
8112e6d0:	10008d1e 	bne	r2,zero,8112e908 <Read_File_Record_At_Offset+0x26c>
8112e6d4:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
8112e6d8:	10008b26 	beq	r2,zero,8112e908 <Read_File_Record_At_Offset+0x26c>
8112e6dc:	d0a09817 	ldw	r2,-32160(gp)
8112e6e0:	10008926 	beq	r2,zero,8112e908 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
8112e6e4:	e03ffb15 	stw	zero,-20(fp)
8112e6e8:	00001106 	br	8112e730 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
8112e6ec:	e0fffc17 	ldw	r3,-16(fp)
8112e6f0:	e0bffb17 	ldw	r2,-20(fp)
8112e6f4:	1885883a 	add	r2,r3,r2
8112e6f8:	1007883a 	mov	r3,r2
8112e6fc:	d0a0a117 	ldw	r2,-32124(gp)
8112e700:	10800a17 	ldw	r2,40(r2)
8112e704:	1885883a 	add	r2,r3,r2
8112e708:	10800023 	ldbuio	r2,0(r2)
8112e70c:	10803fcc 	andi	r2,r2,255
8112e710:	1009883a 	mov	r4,r2
8112e714:	e0fffd17 	ldw	r3,-12(fp)
8112e718:	e0bffb17 	ldw	r2,-20(fp)
8112e71c:	1885883a 	add	r2,r3,r2
8112e720:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
8112e724:	e0bffb17 	ldw	r2,-20(fp)
8112e728:	10800044 	addi	r2,r2,1
8112e72c:	e0bffb15 	stw	r2,-20(fp)
8112e730:	e0bffb17 	ldw	r2,-20(fp)
8112e734:	10800210 	cmplti	r2,r2,8
8112e738:	103fec1e 	bne	r2,zero,8112e6ec <__reset+0xfb10e6ec>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
8112e73c:	e03ffb15 	stw	zero,-20(fp)
8112e740:	00001306 	br	8112e790 <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
8112e744:	e0fffc17 	ldw	r3,-16(fp)
8112e748:	e0bffb17 	ldw	r2,-20(fp)
8112e74c:	1885883a 	add	r2,r3,r2
8112e750:	1007883a 	mov	r3,r2
8112e754:	d0a0a117 	ldw	r2,-32124(gp)
8112e758:	10800a17 	ldw	r2,40(r2)
8112e75c:	1885883a 	add	r2,r3,r2
8112e760:	10800204 	addi	r2,r2,8
8112e764:	10800023 	ldbuio	r2,0(r2)
8112e768:	10803fcc 	andi	r2,r2,255
8112e76c:	1009883a 	mov	r4,r2
8112e770:	e0fffd17 	ldw	r3,-12(fp)
8112e774:	e0bffb17 	ldw	r2,-20(fp)
8112e778:	1885883a 	add	r2,r3,r2
8112e77c:	10800204 	addi	r2,r2,8
8112e780:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
8112e784:	e0bffb17 	ldw	r2,-20(fp)
8112e788:	10800044 	addi	r2,r2,1
8112e78c:	e0bffb15 	stw	r2,-20(fp)
8112e790:	e0bffb17 	ldw	r2,-20(fp)
8112e794:	108000d0 	cmplti	r2,r2,3
8112e798:	103fea1e 	bne	r2,zero,8112e744 <__reset+0xfb10e744>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
8112e79c:	d0a0a117 	ldw	r2,-32124(gp)
8112e7a0:	10c00a17 	ldw	r3,40(r2)
8112e7a4:	e0bffc17 	ldw	r2,-16(fp)
8112e7a8:	1885883a 	add	r2,r3,r2
8112e7ac:	108002c4 	addi	r2,r2,11
8112e7b0:	10800023 	ldbuio	r2,0(r2)
8112e7b4:	10803fcc 	andi	r2,r2,255
8112e7b8:	1007883a 	mov	r3,r2
8112e7bc:	e0bffd17 	ldw	r2,-12(fp)
8112e7c0:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
8112e7c4:	d0a0a117 	ldw	r2,-32124(gp)
8112e7c8:	10c00a17 	ldw	r3,40(r2)
8112e7cc:	e0bffc17 	ldw	r2,-16(fp)
8112e7d0:	1885883a 	add	r2,r3,r2
8112e7d4:	10800384 	addi	r2,r2,14
8112e7d8:	1080002b 	ldhuio	r2,0(r2)
8112e7dc:	10bfffcc 	andi	r2,r2,65535
8112e7e0:	1007883a 	mov	r3,r2
8112e7e4:	e0bffd17 	ldw	r2,-12(fp)
8112e7e8:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
8112e7ec:	d0a0a117 	ldw	r2,-32124(gp)
8112e7f0:	10c00a17 	ldw	r3,40(r2)
8112e7f4:	e0bffc17 	ldw	r2,-16(fp)
8112e7f8:	1885883a 	add	r2,r3,r2
8112e7fc:	10800404 	addi	r2,r2,16
8112e800:	1080002b 	ldhuio	r2,0(r2)
8112e804:	10bfffcc 	andi	r2,r2,65535
8112e808:	1007883a 	mov	r3,r2
8112e80c:	e0bffd17 	ldw	r2,-12(fp)
8112e810:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
8112e814:	d0a0a117 	ldw	r2,-32124(gp)
8112e818:	10c00a17 	ldw	r3,40(r2)
8112e81c:	e0bffc17 	ldw	r2,-16(fp)
8112e820:	1885883a 	add	r2,r3,r2
8112e824:	10800484 	addi	r2,r2,18
8112e828:	1080002b 	ldhuio	r2,0(r2)
8112e82c:	10bfffcc 	andi	r2,r2,65535
8112e830:	1007883a 	mov	r3,r2
8112e834:	e0bffd17 	ldw	r2,-12(fp)
8112e838:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
8112e83c:	d0a0a117 	ldw	r2,-32124(gp)
8112e840:	10c00a17 	ldw	r3,40(r2)
8112e844:	e0bffc17 	ldw	r2,-16(fp)
8112e848:	1885883a 	add	r2,r3,r2
8112e84c:	10800584 	addi	r2,r2,22
8112e850:	1080002b 	ldhuio	r2,0(r2)
8112e854:	10bfffcc 	andi	r2,r2,65535
8112e858:	1007883a 	mov	r3,r2
8112e85c:	e0bffd17 	ldw	r2,-12(fp)
8112e860:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
8112e864:	d0a0a117 	ldw	r2,-32124(gp)
8112e868:	10c00a17 	ldw	r3,40(r2)
8112e86c:	e0bffc17 	ldw	r2,-16(fp)
8112e870:	1885883a 	add	r2,r3,r2
8112e874:	10800604 	addi	r2,r2,24
8112e878:	1080002b 	ldhuio	r2,0(r2)
8112e87c:	10bfffcc 	andi	r2,r2,65535
8112e880:	1007883a 	mov	r3,r2
8112e884:	e0bffd17 	ldw	r2,-12(fp)
8112e888:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
8112e88c:	d0a0a117 	ldw	r2,-32124(gp)
8112e890:	10c00a17 	ldw	r3,40(r2)
8112e894:	e0bffc17 	ldw	r2,-16(fp)
8112e898:	1885883a 	add	r2,r3,r2
8112e89c:	10800684 	addi	r2,r2,26
8112e8a0:	1080002b 	ldhuio	r2,0(r2)
8112e8a4:	10bfffcc 	andi	r2,r2,65535
8112e8a8:	1007883a 	mov	r3,r2
8112e8ac:	e0bffd17 	ldw	r2,-12(fp)
8112e8b0:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
8112e8b4:	d0a0a117 	ldw	r2,-32124(gp)
8112e8b8:	10c00a17 	ldw	r3,40(r2)
8112e8bc:	e0bffc17 	ldw	r2,-16(fp)
8112e8c0:	1885883a 	add	r2,r3,r2
8112e8c4:	10800704 	addi	r2,r2,28
8112e8c8:	10800037 	ldwio	r2,0(r2)
8112e8cc:	1007883a 	mov	r3,r2
8112e8d0:	e0bffd17 	ldw	r2,-12(fp)
8112e8d4:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
8112e8d8:	e0bffd17 	ldw	r2,-12(fp)
8112e8dc:	e0fffe17 	ldw	r3,-8(fp)
8112e8e0:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
8112e8e4:	e0bffd17 	ldw	r2,-12(fp)
8112e8e8:	e0ffff17 	ldw	r3,-4(fp)
8112e8ec:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
8112e8f0:	e0bffc17 	ldw	r2,-16(fp)
8112e8f4:	1007883a 	mov	r3,r2
8112e8f8:	e0bffd17 	ldw	r2,-12(fp)
8112e8fc:	10c00c0d 	sth	r3,48(r2)
		result = true;
8112e900:	00800044 	movi	r2,1
8112e904:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
8112e908:	e0bffa17 	ldw	r2,-24(fp)
}
8112e90c:	e037883a 	mov	sp,fp
8112e910:	dfc00117 	ldw	ra,4(sp)
8112e914:	df000017 	ldw	fp,0(sp)
8112e918:	dec00204 	addi	sp,sp,8
8112e91c:	f800283a 	ret

8112e920 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
8112e920:	defff904 	addi	sp,sp,-28
8112e924:	de00012e 	bgeu	sp,et,8112e92c <Write_File_Record_At_Offset+0xc>
8112e928:	003b68fa 	trap	3
8112e92c:	dfc00615 	stw	ra,24(sp)
8112e930:	df000515 	stw	fp,20(sp)
8112e934:	df000504 	addi	fp,sp,20
8112e938:	e13ffe15 	stw	r4,-8(fp)
8112e93c:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8112e940:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112e944:	e0bffe17 	ldw	r2,-8(fp)
8112e948:	108007cc 	andi	r2,r2,31
8112e94c:	1000931e 	bne	r2,zero,8112eb9c <Write_File_Record_At_Offset+0x27c>
8112e950:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
8112e954:	10009126 	beq	r2,zero,8112eb9c <Write_File_Record_At_Offset+0x27c>
8112e958:	d0a09817 	ldw	r2,-32160(gp)
8112e95c:	10008f26 	beq	r2,zero,8112eb9c <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
8112e960:	e03ffc15 	stw	zero,-16(fp)
8112e964:	00001f06 	br	8112e9e4 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
8112e968:	e0bffc17 	ldw	r2,-16(fp)
8112e96c:	10800044 	addi	r2,r2,1
8112e970:	e0ffff17 	ldw	r3,-4(fp)
8112e974:	1885883a 	add	r2,r3,r2
8112e978:	10800003 	ldbu	r2,0(r2)
8112e97c:	10803fcc 	andi	r2,r2,255
8112e980:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
8112e984:	e0bffd0f 	ldh	r2,-12(fp)
8112e988:	1004923a 	slli	r2,r2,8
8112e98c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
8112e990:	e0ffff17 	ldw	r3,-4(fp)
8112e994:	e0bffc17 	ldw	r2,-16(fp)
8112e998:	1885883a 	add	r2,r3,r2
8112e99c:	10800003 	ldbu	r2,0(r2)
8112e9a0:	10c03fcc 	andi	r3,r2,255
8112e9a4:	e0bffd0b 	ldhu	r2,-12(fp)
8112e9a8:	1884b03a 	or	r2,r3,r2
8112e9ac:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
8112e9b0:	e0fffe17 	ldw	r3,-8(fp)
8112e9b4:	e0bffc17 	ldw	r2,-16(fp)
8112e9b8:	1885883a 	add	r2,r3,r2
8112e9bc:	1007883a 	mov	r3,r2
8112e9c0:	d0a0a117 	ldw	r2,-32124(gp)
8112e9c4:	10800a17 	ldw	r2,40(r2)
8112e9c8:	1885883a 	add	r2,r3,r2
8112e9cc:	1007883a 	mov	r3,r2
8112e9d0:	e0bffd0f 	ldh	r2,-12(fp)
8112e9d4:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
8112e9d8:	e0bffc17 	ldw	r2,-16(fp)
8112e9dc:	10800084 	addi	r2,r2,2
8112e9e0:	e0bffc15 	stw	r2,-16(fp)
8112e9e4:	e0bffc17 	ldw	r2,-16(fp)
8112e9e8:	10800210 	cmplti	r2,r2,8
8112e9ec:	103fde1e 	bne	r2,zero,8112e968 <__reset+0xfb10e968>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8112e9f0:	e03ffc15 	stw	zero,-16(fp)
8112e9f4:	00001306 	br	8112ea44 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
8112e9f8:	e0fffe17 	ldw	r3,-8(fp)
8112e9fc:	e0bffc17 	ldw	r2,-16(fp)
8112ea00:	1885883a 	add	r2,r3,r2
8112ea04:	1007883a 	mov	r3,r2
8112ea08:	d0a0a117 	ldw	r2,-32124(gp)
8112ea0c:	10800a17 	ldw	r2,40(r2)
8112ea10:	1885883a 	add	r2,r3,r2
8112ea14:	10800204 	addi	r2,r2,8
8112ea18:	1009883a 	mov	r4,r2
8112ea1c:	e0ffff17 	ldw	r3,-4(fp)
8112ea20:	e0bffc17 	ldw	r2,-16(fp)
8112ea24:	1885883a 	add	r2,r3,r2
8112ea28:	10800204 	addi	r2,r2,8
8112ea2c:	10800003 	ldbu	r2,0(r2)
8112ea30:	10803fcc 	andi	r2,r2,255
8112ea34:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8112ea38:	e0bffc17 	ldw	r2,-16(fp)
8112ea3c:	10800044 	addi	r2,r2,1
8112ea40:	e0bffc15 	stw	r2,-16(fp)
8112ea44:	e0bffc17 	ldw	r2,-16(fp)
8112ea48:	108000d0 	cmplti	r2,r2,3
8112ea4c:	103fea1e 	bne	r2,zero,8112e9f8 <__reset+0xfb10e9f8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
8112ea50:	d0a0a117 	ldw	r2,-32124(gp)
8112ea54:	10c00a17 	ldw	r3,40(r2)
8112ea58:	e0bffe17 	ldw	r2,-8(fp)
8112ea5c:	1885883a 	add	r2,r3,r2
8112ea60:	108002c4 	addi	r2,r2,11
8112ea64:	1007883a 	mov	r3,r2
8112ea68:	e0bfff17 	ldw	r2,-4(fp)
8112ea6c:	108002c3 	ldbu	r2,11(r2)
8112ea70:	10803fcc 	andi	r2,r2,255
8112ea74:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
8112ea78:	d0a0a117 	ldw	r2,-32124(gp)
8112ea7c:	10c00a17 	ldw	r3,40(r2)
8112ea80:	e0bffe17 	ldw	r2,-8(fp)
8112ea84:	1885883a 	add	r2,r3,r2
8112ea88:	10800384 	addi	r2,r2,14
8112ea8c:	1007883a 	mov	r3,r2
8112ea90:	e0bfff17 	ldw	r2,-4(fp)
8112ea94:	1080030b 	ldhu	r2,12(r2)
8112ea98:	10bfffcc 	andi	r2,r2,65535
8112ea9c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
8112eaa0:	d0a0a117 	ldw	r2,-32124(gp)
8112eaa4:	10c00a17 	ldw	r3,40(r2)
8112eaa8:	e0bffe17 	ldw	r2,-8(fp)
8112eaac:	1885883a 	add	r2,r3,r2
8112eab0:	10800404 	addi	r2,r2,16
8112eab4:	1007883a 	mov	r3,r2
8112eab8:	e0bfff17 	ldw	r2,-4(fp)
8112eabc:	1080038b 	ldhu	r2,14(r2)
8112eac0:	10bfffcc 	andi	r2,r2,65535
8112eac4:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
8112eac8:	d0a0a117 	ldw	r2,-32124(gp)
8112eacc:	10c00a17 	ldw	r3,40(r2)
8112ead0:	e0bffe17 	ldw	r2,-8(fp)
8112ead4:	1885883a 	add	r2,r3,r2
8112ead8:	10800484 	addi	r2,r2,18
8112eadc:	1007883a 	mov	r3,r2
8112eae0:	e0bfff17 	ldw	r2,-4(fp)
8112eae4:	1080040b 	ldhu	r2,16(r2)
8112eae8:	10bfffcc 	andi	r2,r2,65535
8112eaec:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
8112eaf0:	d0a0a117 	ldw	r2,-32124(gp)
8112eaf4:	10c00a17 	ldw	r3,40(r2)
8112eaf8:	e0bffe17 	ldw	r2,-8(fp)
8112eafc:	1885883a 	add	r2,r3,r2
8112eb00:	10800584 	addi	r2,r2,22
8112eb04:	1007883a 	mov	r3,r2
8112eb08:	e0bfff17 	ldw	r2,-4(fp)
8112eb0c:	1080048b 	ldhu	r2,18(r2)
8112eb10:	10bfffcc 	andi	r2,r2,65535
8112eb14:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
8112eb18:	d0a0a117 	ldw	r2,-32124(gp)
8112eb1c:	10c00a17 	ldw	r3,40(r2)
8112eb20:	e0bffe17 	ldw	r2,-8(fp)
8112eb24:	1885883a 	add	r2,r3,r2
8112eb28:	10800604 	addi	r2,r2,24
8112eb2c:	1007883a 	mov	r3,r2
8112eb30:	e0bfff17 	ldw	r2,-4(fp)
8112eb34:	1080050b 	ldhu	r2,20(r2)
8112eb38:	10bfffcc 	andi	r2,r2,65535
8112eb3c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
8112eb40:	d0a0a117 	ldw	r2,-32124(gp)
8112eb44:	10c00a17 	ldw	r3,40(r2)
8112eb48:	e0bffe17 	ldw	r2,-8(fp)
8112eb4c:	1885883a 	add	r2,r3,r2
8112eb50:	10800684 	addi	r2,r2,26
8112eb54:	1007883a 	mov	r3,r2
8112eb58:	e0bfff17 	ldw	r2,-4(fp)
8112eb5c:	1080058b 	ldhu	r2,22(r2)
8112eb60:	10bfffcc 	andi	r2,r2,65535
8112eb64:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
8112eb68:	d0a0a117 	ldw	r2,-32124(gp)
8112eb6c:	10c00a17 	ldw	r3,40(r2)
8112eb70:	e0bffe17 	ldw	r2,-8(fp)
8112eb74:	1885883a 	add	r2,r3,r2
8112eb78:	10800704 	addi	r2,r2,28
8112eb7c:	1007883a 	mov	r3,r2
8112eb80:	e0bfff17 	ldw	r2,-4(fp)
8112eb84:	10800617 	ldw	r2,24(r2)
8112eb88:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
8112eb8c:	00800044 	movi	r2,1
8112eb90:	d0a0a215 	stw	r2,-32120(gp)
        result = true;
8112eb94:	00800044 	movi	r2,1
8112eb98:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
8112eb9c:	e0bffb17 	ldw	r2,-20(fp)
}
8112eba0:	e037883a 	mov	sp,fp
8112eba4:	dfc00117 	ldw	ra,4(sp)
8112eba8:	df000017 	ldw	fp,0(sp)
8112ebac:	dec00204 	addi	sp,sp,8
8112ebb0:	f800283a 	ret

8112ebb4 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
8112ebb4:	defff904 	addi	sp,sp,-28
8112ebb8:	de00012e 	bgeu	sp,et,8112ebc0 <Check_for_DOS_FAT+0xc>
8112ebbc:	003b68fa 	trap	3
8112ebc0:	dfc00615 	stw	ra,24(sp)
8112ebc4:	df000515 	stw	fp,20(sp)
8112ebc8:	df000504 	addi	fp,sp,20
8112ebcc:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
8112ebd0:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
8112ebd4:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
8112ebd8:	e17fff17 	ldw	r5,-4(fp)
8112ebdc:	0009883a 	mov	r4,zero
8112ebe0:	112e26c0 	call	8112e26c <Read_Sector_Data>
8112ebe4:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
8112ebe8:	d0a0a117 	ldw	r2,-32124(gp)
8112ebec:	10800a17 	ldw	r2,40(r2)
8112ebf0:	10807f84 	addi	r2,r2,510
8112ebf4:	1080002b 	ldhuio	r2,0(r2)
8112ebf8:	10bfffcc 	andi	r2,r2,65535
8112ebfc:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
8112ec00:	e0bffe0f 	ldh	r2,-8(fp)
8112ec04:	10ffffcc 	andi	r3,r2,65535
8112ec08:	00aa9554 	movui	r2,43605
8112ec0c:	1881841e 	bne	r3,r2,8112f220 <Check_for_DOS_FAT+0x66c>
8112ec10:	e0bffb17 	ldw	r2,-20(fp)
8112ec14:	10018226 	beq	r2,zero,8112f220 <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
8112ec18:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
8112ec1c:	d0a0a117 	ldw	r2,-32124(gp)
8112ec20:	10800a17 	ldw	r2,40(r2)
8112ec24:	10800023 	ldbuio	r2,0(r2)
8112ec28:	10803fcc 	andi	r2,r2,255
8112ec2c:	1007883a 	mov	r3,r2
8112ec30:	00a045b4 	movhi	r2,33046
8112ec34:	10907c04 	addi	r2,r2,16880
8112ec38:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
8112ec3c:	d0a0a117 	ldw	r2,-32124(gp)
8112ec40:	10800a17 	ldw	r2,40(r2)
8112ec44:	10800044 	addi	r2,r2,1
8112ec48:	10800023 	ldbuio	r2,0(r2)
8112ec4c:	10803fcc 	andi	r2,r2,255
8112ec50:	1007883a 	mov	r3,r2
8112ec54:	00a045b4 	movhi	r2,33046
8112ec58:	10907c04 	addi	r2,r2,16880
8112ec5c:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
8112ec60:	d0a0a117 	ldw	r2,-32124(gp)
8112ec64:	10800a17 	ldw	r2,40(r2)
8112ec68:	10800084 	addi	r2,r2,2
8112ec6c:	10800023 	ldbuio	r2,0(r2)
8112ec70:	10803fcc 	andi	r2,r2,255
8112ec74:	1007883a 	mov	r3,r2
8112ec78:	00a045b4 	movhi	r2,33046
8112ec7c:	10907c04 	addi	r2,r2,16880
8112ec80:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
8112ec84:	e03ffc15 	stw	zero,-16(fp)
8112ec88:	00001106 	br	8112ecd0 <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
8112ec8c:	d0a0a117 	ldw	r2,-32124(gp)
8112ec90:	10c00a17 	ldw	r3,40(r2)
8112ec94:	e0bffc17 	ldw	r2,-16(fp)
8112ec98:	1885883a 	add	r2,r3,r2
8112ec9c:	108000c4 	addi	r2,r2,3
8112eca0:	10800023 	ldbuio	r2,0(r2)
8112eca4:	10803fcc 	andi	r2,r2,255
8112eca8:	1009883a 	mov	r4,r2
8112ecac:	00a045b4 	movhi	r2,33046
8112ecb0:	10907c04 	addi	r2,r2,16880
8112ecb4:	e0fffc17 	ldw	r3,-16(fp)
8112ecb8:	10c5883a 	add	r2,r2,r3
8112ecbc:	108000c4 	addi	r2,r2,3
8112ecc0:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
8112ecc4:	e0bffc17 	ldw	r2,-16(fp)
8112ecc8:	10800044 	addi	r2,r2,1
8112eccc:	e0bffc15 	stw	r2,-16(fp)
8112ecd0:	e0bffc17 	ldw	r2,-16(fp)
8112ecd4:	10800210 	cmplti	r2,r2,8
8112ecd8:	103fec1e 	bne	r2,zero,8112ec8c <__reset+0xfb10ec8c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
8112ecdc:	d0a0a117 	ldw	r2,-32124(gp)
8112ece0:	10800a17 	ldw	r2,40(r2)
8112ece4:	10800304 	addi	r2,r2,12
8112ece8:	10800023 	ldbuio	r2,0(r2)
8112ecec:	10803fcc 	andi	r2,r2,255
8112ecf0:	1004923a 	slli	r2,r2,8
8112ecf4:	1007883a 	mov	r3,r2
8112ecf8:	d0a0a117 	ldw	r2,-32124(gp)
8112ecfc:	10800a17 	ldw	r2,40(r2)
8112ed00:	108002c4 	addi	r2,r2,11
8112ed04:	10800023 	ldbuio	r2,0(r2)
8112ed08:	10803fcc 	andi	r2,r2,255
8112ed0c:	10803fcc 	andi	r2,r2,255
8112ed10:	1080201c 	xori	r2,r2,128
8112ed14:	10bfe004 	addi	r2,r2,-128
8112ed18:	1884b03a 	or	r2,r3,r2
8112ed1c:	1007883a 	mov	r3,r2
8112ed20:	00a045b4 	movhi	r2,33046
8112ed24:	10907c04 	addi	r2,r2,16880
8112ed28:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
8112ed2c:	d0a0a117 	ldw	r2,-32124(gp)
8112ed30:	10800a17 	ldw	r2,40(r2)
8112ed34:	10800344 	addi	r2,r2,13
8112ed38:	10800023 	ldbuio	r2,0(r2)
8112ed3c:	10803fcc 	andi	r2,r2,255
8112ed40:	1007883a 	mov	r3,r2
8112ed44:	00a045b4 	movhi	r2,33046
8112ed48:	10907c04 	addi	r2,r2,16880
8112ed4c:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
8112ed50:	d0a0a117 	ldw	r2,-32124(gp)
8112ed54:	10800a17 	ldw	r2,40(r2)
8112ed58:	10800384 	addi	r2,r2,14
8112ed5c:	1080002b 	ldhuio	r2,0(r2)
8112ed60:	10bfffcc 	andi	r2,r2,65535
8112ed64:	1007883a 	mov	r3,r2
8112ed68:	00a045b4 	movhi	r2,33046
8112ed6c:	10907c04 	addi	r2,r2,16880
8112ed70:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
8112ed74:	d0a0a117 	ldw	r2,-32124(gp)
8112ed78:	10800a17 	ldw	r2,40(r2)
8112ed7c:	10800404 	addi	r2,r2,16
8112ed80:	10800023 	ldbuio	r2,0(r2)
8112ed84:	10803fcc 	andi	r2,r2,255
8112ed88:	1007883a 	mov	r3,r2
8112ed8c:	00a045b4 	movhi	r2,33046
8112ed90:	10907c04 	addi	r2,r2,16880
8112ed94:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
8112ed98:	d0a0a117 	ldw	r2,-32124(gp)
8112ed9c:	10800a17 	ldw	r2,40(r2)
8112eda0:	10800484 	addi	r2,r2,18
8112eda4:	10800023 	ldbuio	r2,0(r2)
8112eda8:	10803fcc 	andi	r2,r2,255
8112edac:	1004923a 	slli	r2,r2,8
8112edb0:	1007883a 	mov	r3,r2
8112edb4:	d0a0a117 	ldw	r2,-32124(gp)
8112edb8:	10800a17 	ldw	r2,40(r2)
8112edbc:	10800444 	addi	r2,r2,17
8112edc0:	10800023 	ldbuio	r2,0(r2)
8112edc4:	10803fcc 	andi	r2,r2,255
8112edc8:	10803fcc 	andi	r2,r2,255
8112edcc:	1884b03a 	or	r2,r3,r2
8112edd0:	1007883a 	mov	r3,r2
8112edd4:	00a045b4 	movhi	r2,33046
8112edd8:	10907c04 	addi	r2,r2,16880
8112eddc:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
8112ede0:	d0a0a117 	ldw	r2,-32124(gp)
8112ede4:	10800a17 	ldw	r2,40(r2)
8112ede8:	10800504 	addi	r2,r2,20
8112edec:	10800023 	ldbuio	r2,0(r2)
8112edf0:	10803fcc 	andi	r2,r2,255
8112edf4:	1004923a 	slli	r2,r2,8
8112edf8:	1007883a 	mov	r3,r2
8112edfc:	d0a0a117 	ldw	r2,-32124(gp)
8112ee00:	10800a17 	ldw	r2,40(r2)
8112ee04:	108004c4 	addi	r2,r2,19
8112ee08:	10800023 	ldbuio	r2,0(r2)
8112ee0c:	10803fcc 	andi	r2,r2,255
8112ee10:	10803fcc 	andi	r2,r2,255
8112ee14:	1884b03a 	or	r2,r3,r2
8112ee18:	1007883a 	mov	r3,r2
8112ee1c:	00a045b4 	movhi	r2,33046
8112ee20:	10907c04 	addi	r2,r2,16880
8112ee24:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
8112ee28:	d0a0a117 	ldw	r2,-32124(gp)
8112ee2c:	10800a17 	ldw	r2,40(r2)
8112ee30:	10800544 	addi	r2,r2,21
8112ee34:	10800023 	ldbuio	r2,0(r2)
8112ee38:	10803fcc 	andi	r2,r2,255
8112ee3c:	1007883a 	mov	r3,r2
8112ee40:	00a045b4 	movhi	r2,33046
8112ee44:	10907c04 	addi	r2,r2,16880
8112ee48:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
8112ee4c:	d0a0a117 	ldw	r2,-32124(gp)
8112ee50:	10800a17 	ldw	r2,40(r2)
8112ee54:	10800584 	addi	r2,r2,22
8112ee58:	1080002b 	ldhuio	r2,0(r2)
8112ee5c:	10bfffcc 	andi	r2,r2,65535
8112ee60:	1007883a 	mov	r3,r2
8112ee64:	00a045b4 	movhi	r2,33046
8112ee68:	10907c04 	addi	r2,r2,16880
8112ee6c:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
8112ee70:	d0a0a117 	ldw	r2,-32124(gp)
8112ee74:	10800a17 	ldw	r2,40(r2)
8112ee78:	10800604 	addi	r2,r2,24
8112ee7c:	1080002b 	ldhuio	r2,0(r2)
8112ee80:	10bfffcc 	andi	r2,r2,65535
8112ee84:	1007883a 	mov	r3,r2
8112ee88:	00a045b4 	movhi	r2,33046
8112ee8c:	10907c04 	addi	r2,r2,16880
8112ee90:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
8112ee94:	d0a0a117 	ldw	r2,-32124(gp)
8112ee98:	10800a17 	ldw	r2,40(r2)
8112ee9c:	10800684 	addi	r2,r2,26
8112eea0:	1080002b 	ldhuio	r2,0(r2)
8112eea4:	10bfffcc 	andi	r2,r2,65535
8112eea8:	1007883a 	mov	r3,r2
8112eeac:	00a045b4 	movhi	r2,33046
8112eeb0:	10907c04 	addi	r2,r2,16880
8112eeb4:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
8112eeb8:	d0a0a117 	ldw	r2,-32124(gp)
8112eebc:	10800a17 	ldw	r2,40(r2)
8112eec0:	10800704 	addi	r2,r2,28
8112eec4:	10800037 	ldwio	r2,0(r2)
8112eec8:	1007883a 	mov	r3,r2
8112eecc:	00a045b4 	movhi	r2,33046
8112eed0:	10907c04 	addi	r2,r2,16880
8112eed4:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
8112eed8:	d0a0a117 	ldw	r2,-32124(gp)
8112eedc:	10800a17 	ldw	r2,40(r2)
8112eee0:	10800804 	addi	r2,r2,32
8112eee4:	10800037 	ldwio	r2,0(r2)
8112eee8:	1007883a 	mov	r3,r2
8112eeec:	00a045b4 	movhi	r2,33046
8112eef0:	10907c04 	addi	r2,r2,16880
8112eef4:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
8112eef8:	d0a0a117 	ldw	r2,-32124(gp)
8112eefc:	10800a17 	ldw	r2,40(r2)
8112ef00:	10800904 	addi	r2,r2,36
8112ef04:	10800023 	ldbuio	r2,0(r2)
8112ef08:	10803fcc 	andi	r2,r2,255
8112ef0c:	1007883a 	mov	r3,r2
8112ef10:	00a045b4 	movhi	r2,33046
8112ef14:	10907c04 	addi	r2,r2,16880
8112ef18:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
8112ef1c:	d0a0a117 	ldw	r2,-32124(gp)
8112ef20:	10800a17 	ldw	r2,40(r2)
8112ef24:	10800944 	addi	r2,r2,37
8112ef28:	10800023 	ldbuio	r2,0(r2)
8112ef2c:	10803fcc 	andi	r2,r2,255
8112ef30:	1007883a 	mov	r3,r2
8112ef34:	00a045b4 	movhi	r2,33046
8112ef38:	10907c04 	addi	r2,r2,16880
8112ef3c:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
8112ef40:	d0a0a117 	ldw	r2,-32124(gp)
8112ef44:	10800a17 	ldw	r2,40(r2)
8112ef48:	10800984 	addi	r2,r2,38
8112ef4c:	10800023 	ldbuio	r2,0(r2)
8112ef50:	10803fcc 	andi	r2,r2,255
8112ef54:	1007883a 	mov	r3,r2
8112ef58:	00a045b4 	movhi	r2,33046
8112ef5c:	10907c04 	addi	r2,r2,16880
8112ef60:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
8112ef64:	00a045b4 	movhi	r2,33046
8112ef68:	10907c04 	addi	r2,r2,16880
8112ef6c:	1080040b 	ldhu	r2,16(r2)
8112ef70:	10ffffcc 	andi	r3,r2,65535
8112ef74:	00a045b4 	movhi	r2,33046
8112ef78:	10907c04 	addi	r2,r2,16880
8112ef7c:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
8112ef80:	00a045b4 	movhi	r2,33046
8112ef84:	10907c04 	addi	r2,r2,16880
8112ef88:	10c01117 	ldw	r3,68(r2)
8112ef8c:	00a045b4 	movhi	r2,33046
8112ef90:	10907c04 	addi	r2,r2,16880
8112ef94:	1080068b 	ldhu	r2,26(r2)
8112ef98:	10bfffcc 	andi	r2,r2,65535
8112ef9c:	1887883a 	add	r3,r3,r2
8112efa0:	00a045b4 	movhi	r2,33046
8112efa4:	10907c04 	addi	r2,r2,16880
8112efa8:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
8112efac:	00a045b4 	movhi	r2,33046
8112efb0:	10907c04 	addi	r2,r2,16880
8112efb4:	10c01217 	ldw	r3,72(r2)
8112efb8:	00a045b4 	movhi	r2,33046
8112efbc:	10907c04 	addi	r2,r2,16880
8112efc0:	1080068b 	ldhu	r2,26(r2)
8112efc4:	10bfffcc 	andi	r2,r2,65535
8112efc8:	1887883a 	add	r3,r3,r2
8112efcc:	00a045b4 	movhi	r2,33046
8112efd0:	10907c04 	addi	r2,r2,16880
8112efd4:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
8112efd8:	00a045b4 	movhi	r2,33046
8112efdc:	10907c04 	addi	r2,r2,16880
8112efe0:	10c01317 	ldw	r3,76(r2)
8112efe4:	00a045b4 	movhi	r2,33046
8112efe8:	10907c04 	addi	r2,r2,16880
8112efec:	1080050b 	ldhu	r2,20(r2)
8112eff0:	10bfffcc 	andi	r2,r2,65535
8112eff4:	1008917a 	slli	r4,r2,5
8112eff8:	00a045b4 	movhi	r2,33046
8112effc:	10907c04 	addi	r2,r2,16880
8112f000:	1080030b 	ldhu	r2,12(r2)
8112f004:	10bfffcc 	andi	r2,r2,65535
8112f008:	2085283a 	div	r2,r4,r2
8112f00c:	1887883a 	add	r3,r3,r2
8112f010:	00a045b4 	movhi	r2,33046
8112f014:	10907c04 	addi	r2,r2,16880
8112f018:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
8112f01c:	00a045b4 	movhi	r2,33046
8112f020:	10907c04 	addi	r2,r2,16880
8112f024:	1080058b 	ldhu	r2,22(r2)
8112f028:	10bfffcc 	andi	r2,r2,65535
8112f02c:	10000b26 	beq	r2,zero,8112f05c <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
8112f030:	00a045b4 	movhi	r2,33046
8112f034:	10907c04 	addi	r2,r2,16880
8112f038:	1080058b 	ldhu	r2,22(r2)
8112f03c:	10ffffcc 	andi	r3,r2,65535
8112f040:	00a045b4 	movhi	r2,33046
8112f044:	10907c04 	addi	r2,r2,16880
8112f048:	10800383 	ldbu	r2,14(r2)
8112f04c:	10803fcc 	andi	r2,r2,255
8112f050:	1885283a 	div	r2,r3,r2
8112f054:	e0bffd15 	stw	r2,-12(fp)
8112f058:	00000906 	br	8112f080 <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
8112f05c:	00a045b4 	movhi	r2,33046
8112f060:	10907c04 	addi	r2,r2,16880
8112f064:	10c00917 	ldw	r3,36(r2)
8112f068:	00a045b4 	movhi	r2,33046
8112f06c:	10907c04 	addi	r2,r2,16880
8112f070:	10800383 	ldbu	r2,14(r2)
8112f074:	10803fcc 	andi	r2,r2,255
8112f078:	1885203a 	divu	r2,r3,r2
8112f07c:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
8112f080:	e0bffd17 	ldw	r2,-12(fp)
8112f084:	1083fdc8 	cmpgei	r2,r2,4087
8112f088:	1000051e 	bne	r2,zero,8112f0a0 <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
8112f08c:	00a045b4 	movhi	r2,33046
8112f090:	10907c04 	addi	r2,r2,16880
8112f094:	00c00304 	movi	r3,12
8112f098:	10c01085 	stb	r3,66(r2)
8112f09c:	00000c06 	br	8112f0d0 <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
8112f0a0:	e0bffd17 	ldw	r2,-12(fp)
8112f0a4:	00fffb54 	movui	r3,65517
8112f0a8:	18800516 	blt	r3,r2,8112f0c0 <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
8112f0ac:	00a045b4 	movhi	r2,33046
8112f0b0:	10907c04 	addi	r2,r2,16880
8112f0b4:	00c00404 	movi	r3,16
8112f0b8:	10c01085 	stb	r3,66(r2)
8112f0bc:	00000406 	br	8112f0d0 <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
8112f0c0:	00a045b4 	movhi	r2,33046
8112f0c4:	10907c04 	addi	r2,r2,16880
8112f0c8:	00c00804 	movi	r3,32
8112f0cc:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
8112f0d0:	e03ffc15 	stw	zero,-16(fp)
8112f0d4:	00001106 	br	8112f11c <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
8112f0d8:	d0a0a117 	ldw	r2,-32124(gp)
8112f0dc:	10c00a17 	ldw	r3,40(r2)
8112f0e0:	e0bffc17 	ldw	r2,-16(fp)
8112f0e4:	1885883a 	add	r2,r3,r2
8112f0e8:	108009c4 	addi	r2,r2,39
8112f0ec:	10800023 	ldbuio	r2,0(r2)
8112f0f0:	10803fcc 	andi	r2,r2,255
8112f0f4:	1009883a 	mov	r4,r2
8112f0f8:	00a045b4 	movhi	r2,33046
8112f0fc:	10907c04 	addi	r2,r2,16880
8112f100:	e0fffc17 	ldw	r3,-16(fp)
8112f104:	10c5883a 	add	r2,r2,r3
8112f108:	10800ac4 	addi	r2,r2,43
8112f10c:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
8112f110:	e0bffc17 	ldw	r2,-16(fp)
8112f114:	10800044 	addi	r2,r2,1
8112f118:	e0bffc15 	stw	r2,-16(fp)
8112f11c:	e0bffc17 	ldw	r2,-16(fp)
8112f120:	10800110 	cmplti	r2,r2,4
8112f124:	103fec1e 	bne	r2,zero,8112f0d8 <__reset+0xfb10f0d8>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8112f128:	e03ffc15 	stw	zero,-16(fp)
8112f12c:	00001106 	br	8112f174 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
8112f130:	d0a0a117 	ldw	r2,-32124(gp)
8112f134:	10c00a17 	ldw	r3,40(r2)
8112f138:	e0bffc17 	ldw	r2,-16(fp)
8112f13c:	1885883a 	add	r2,r3,r2
8112f140:	10800ac4 	addi	r2,r2,43
8112f144:	10800023 	ldbuio	r2,0(r2)
8112f148:	10803fcc 	andi	r2,r2,255
8112f14c:	1009883a 	mov	r4,r2
8112f150:	00a045b4 	movhi	r2,33046
8112f154:	10907c04 	addi	r2,r2,16880
8112f158:	e0fffc17 	ldw	r3,-16(fp)
8112f15c:	10c5883a 	add	r2,r2,r3
8112f160:	10800bc4 	addi	r2,r2,47
8112f164:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8112f168:	e0bffc17 	ldw	r2,-16(fp)
8112f16c:	10800044 	addi	r2,r2,1
8112f170:	e0bffc15 	stw	r2,-16(fp)
8112f174:	e0bffc17 	ldw	r2,-16(fp)
8112f178:	108002d0 	cmplti	r2,r2,11
8112f17c:	103fec1e 	bne	r2,zero,8112f130 <__reset+0xfb10f130>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8112f180:	e03ffc15 	stw	zero,-16(fp)
8112f184:	00001106 	br	8112f1cc <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
8112f188:	d0a0a117 	ldw	r2,-32124(gp)
8112f18c:	10c00a17 	ldw	r3,40(r2)
8112f190:	e0bffc17 	ldw	r2,-16(fp)
8112f194:	1885883a 	add	r2,r3,r2
8112f198:	10800d84 	addi	r2,r2,54
8112f19c:	10800023 	ldbuio	r2,0(r2)
8112f1a0:	10803fcc 	andi	r2,r2,255
8112f1a4:	1009883a 	mov	r4,r2
8112f1a8:	00a045b4 	movhi	r2,33046
8112f1ac:	10907c04 	addi	r2,r2,16880
8112f1b0:	e0fffc17 	ldw	r3,-16(fp)
8112f1b4:	10c5883a 	add	r2,r2,r3
8112f1b8:	10800e84 	addi	r2,r2,58
8112f1bc:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8112f1c0:	e0bffc17 	ldw	r2,-16(fp)
8112f1c4:	10800044 	addi	r2,r2,1
8112f1c8:	e0bffc15 	stw	r2,-16(fp)
8112f1cc:	e0bffc17 	ldw	r2,-16(fp)
8112f1d0:	10800210 	cmplti	r2,r2,8
8112f1d4:	103fec1e 	bne	r2,zero,8112f188 <__reset+0xfb10f188>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8112f1d8:	e03ffc15 	stw	zero,-16(fp)
8112f1dc:	00000a06 	br	8112f208 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
8112f1e0:	00a045b4 	movhi	r2,33046
8112f1e4:	10909104 	addi	r2,r2,16964
8112f1e8:	e0fffc17 	ldw	r3,-16(fp)
8112f1ec:	180691ba 	slli	r3,r3,6
8112f1f0:	10c5883a 	add	r2,r2,r3
8112f1f4:	10800f04 	addi	r2,r2,60
8112f1f8:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8112f1fc:	e0bffc17 	ldw	r2,-16(fp)
8112f200:	10800044 	addi	r2,r2,1
8112f204:	e0bffc15 	stw	r2,-16(fp)
8112f208:	e0bffc17 	ldw	r2,-16(fp)
8112f20c:	10800510 	cmplti	r2,r2,20
8112f210:	103ff31e 	bne	r2,zero,8112f1e0 <__reset+0xfb10f1e0>
		{
			active_files[counter].in_use = false;
		}
		result = true;
8112f214:	00800044 	movi	r2,1
8112f218:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
8112f21c:	00000106 	br	8112f224 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
8112f220:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
8112f224:	e0bffb17 	ldw	r2,-20(fp)
}
8112f228:	e037883a 	mov	sp,fp
8112f22c:	dfc00117 	ldw	ra,4(sp)
8112f230:	df000017 	ldw	fp,0(sp)
8112f234:	dec00204 	addi	sp,sp,8
8112f238:	f800283a 	ret

8112f23c <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
8112f23c:	defffc04 	addi	sp,sp,-16
8112f240:	de00012e 	bgeu	sp,et,8112f248 <Look_for_FAT16+0xc>
8112f244:	003b68fa 	trap	3
8112f248:	dfc00315 	stw	ra,12(sp)
8112f24c:	df000215 	stw	fp,8(sp)
8112f250:	df000204 	addi	fp,sp,8
	bool result = false;
8112f254:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
8112f258:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
8112f25c:	10002e26 	beq	r2,zero,8112f318 <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
8112f260:	d0a09b17 	ldw	r2,-32148(gp)
8112f264:	1080000b 	ldhu	r2,0(r2)
8112f268:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
8112f26c:	d0209f15 	stw	zero,-32132(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
8112f270:	d020a015 	stw	zero,-32128(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
8112f274:	e0bfff0f 	ldh	r2,-4(fp)
8112f278:	10002716 	blt	r2,zero,8112f318 <Look_for_FAT16+0xdc>
8112f27c:	e0bfff0b 	ldhu	r2,-4(fp)
8112f280:	10bfffcc 	andi	r2,r2,65535
8112f284:	1083000c 	andi	r2,r2,3072
8112f288:	10830020 	cmpeqi	r2,r2,3072
8112f28c:	1000221e 	bne	r2,zero,8112f318 <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
8112f290:	e0bfff0b 	ldhu	r2,-4(fp)
8112f294:	10bfffcc 	andi	r2,r2,65535
8112f298:	1083000c 	andi	r2,r2,3072
8112f29c:	10810018 	cmpnei	r2,r2,1024
8112f2a0:	1000031e 	bne	r2,zero,8112f2b0 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
8112f2a4:	0009883a 	mov	r4,zero
8112f2a8:	112ebb40 	call	8112ebb4 <Check_for_DOS_FAT>
8112f2ac:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
8112f2b0:	e0bfff0b 	ldhu	r2,-4(fp)
8112f2b4:	10bfffcc 	andi	r2,r2,65535
8112f2b8:	1083000c 	andi	r2,r2,3072
8112f2bc:	1000061e 	bne	r2,zero,8112f2d8 <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
8112f2c0:	112e4f00 	call	8112e4f0 <Check_for_Master_Boot_Record>
8112f2c4:	10000426 	beq	r2,zero,8112f2d8 <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
8112f2c8:	d0a09f17 	ldw	r2,-32132(gp)
8112f2cc:	1009883a 	mov	r4,r2
8112f2d0:	112ebb40 	call	8112ebb4 <Check_for_DOS_FAT>
8112f2d4:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
8112f2d8:	e0bffe17 	ldw	r2,-8(fp)
8112f2dc:	10800058 	cmpnei	r2,r2,1
8112f2e0:	10000d1e 	bne	r2,zero,8112f318 <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
8112f2e4:	00a045b4 	movhi	r2,33046
8112f2e8:	10907c04 	addi	r2,r2,16880
8112f2ec:	10801083 	ldbu	r2,66(r2)
8112f2f0:	10803fcc 	andi	r2,r2,255
8112f2f4:	10800420 	cmpeqi	r2,r2,16
8112f2f8:	1000021e 	bne	r2,zero,8112f304 <Look_for_FAT16+0xc8>
				{
					result = false;
8112f2fc:	e03ffe15 	stw	zero,-8(fp)
8112f300:	00000506 	br	8112f318 <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
8112f304:	00a045b4 	movhi	r2,33046
8112f308:	10907c04 	addi	r2,r2,16880
8112f30c:	1080058b 	ldhu	r2,22(r2)
8112f310:	10bfffcc 	andi	r2,r2,65535
8112f314:	d0a0a015 	stw	r2,-32128(gp)
				}
			}
		}
	}
	return result;
8112f318:	e0bffe17 	ldw	r2,-8(fp)
}
8112f31c:	e037883a 	mov	sp,fp
8112f320:	dfc00117 	ldw	ra,4(sp)
8112f324:	df000017 	ldw	fp,0(sp)
8112f328:	dec00204 	addi	sp,sp,8
8112f32c:	f800283a 	ret

8112f330 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
8112f330:	defffb04 	addi	sp,sp,-20
8112f334:	de00012e 	bgeu	sp,et,8112f33c <filename_to_upper_case+0xc>
8112f338:	003b68fa 	trap	3
8112f33c:	dfc00415 	stw	ra,16(sp)
8112f340:	df000315 	stw	fp,12(sp)
8112f344:	df000304 	addi	fp,sp,12
8112f348:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
8112f34c:	e13fff17 	ldw	r4,-4(fp)
8112f350:	110f27c0 	call	8110f27c <strlen>
8112f354:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
8112f358:	e03ffd15 	stw	zero,-12(fp)
8112f35c:	00001e06 	br	8112f3d8 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
8112f360:	e0bffd17 	ldw	r2,-12(fp)
8112f364:	e0ffff17 	ldw	r3,-4(fp)
8112f368:	1885883a 	add	r2,r3,r2
8112f36c:	10800003 	ldbu	r2,0(r2)
8112f370:	10803fcc 	andi	r2,r2,255
8112f374:	1080201c 	xori	r2,r2,128
8112f378:	10bfe004 	addi	r2,r2,-128
8112f37c:	10801850 	cmplti	r2,r2,97
8112f380:	1000121e 	bne	r2,zero,8112f3cc <filename_to_upper_case+0x9c>
8112f384:	e0bffd17 	ldw	r2,-12(fp)
8112f388:	e0ffff17 	ldw	r3,-4(fp)
8112f38c:	1885883a 	add	r2,r3,r2
8112f390:	10800003 	ldbu	r2,0(r2)
8112f394:	10803fcc 	andi	r2,r2,255
8112f398:	1080201c 	xori	r2,r2,128
8112f39c:	10bfe004 	addi	r2,r2,-128
8112f3a0:	10801ec8 	cmpgei	r2,r2,123
8112f3a4:	1000091e 	bne	r2,zero,8112f3cc <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
8112f3a8:	e0bffd17 	ldw	r2,-12(fp)
8112f3ac:	e0ffff17 	ldw	r3,-4(fp)
8112f3b0:	1885883a 	add	r2,r3,r2
8112f3b4:	e0fffd17 	ldw	r3,-12(fp)
8112f3b8:	e13fff17 	ldw	r4,-4(fp)
8112f3bc:	20c7883a 	add	r3,r4,r3
8112f3c0:	18c00003 	ldbu	r3,0(r3)
8112f3c4:	18fff804 	addi	r3,r3,-32
8112f3c8:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
8112f3cc:	e0bffd17 	ldw	r2,-12(fp)
8112f3d0:	10800044 	addi	r2,r2,1
8112f3d4:	e0bffd15 	stw	r2,-12(fp)
8112f3d8:	e0fffd17 	ldw	r3,-12(fp)
8112f3dc:	e0bffe17 	ldw	r2,-8(fp)
8112f3e0:	18bfdf16 	blt	r3,r2,8112f360 <__reset+0xfb10f360>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
8112f3e4:	0001883a 	nop
8112f3e8:	e037883a 	mov	sp,fp
8112f3ec:	dfc00117 	ldw	ra,4(sp)
8112f3f0:	df000017 	ldw	fp,0(sp)
8112f3f4:	dec00204 	addi	sp,sp,8
8112f3f8:	f800283a 	ret

8112f3fc <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
8112f3fc:	defff804 	addi	sp,sp,-32
8112f400:	de00012e 	bgeu	sp,et,8112f408 <check_file_name_for_FAT16_compliance+0xc>
8112f404:	003b68fa 	trap	3
8112f408:	dfc00715 	stw	ra,28(sp)
8112f40c:	df000615 	stw	fp,24(sp)
8112f410:	df000604 	addi	fp,sp,24
8112f414:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
8112f418:	e13fff17 	ldw	r4,-4(fp)
8112f41c:	110f27c0 	call	8110f27c <strlen>
8112f420:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
8112f424:	00bfffc4 	movi	r2,-1
8112f428:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
8112f42c:	00bfffc4 	movi	r2,-1
8112f430:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
8112f434:	00800044 	movi	r2,1
8112f438:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
8112f43c:	e03ffa15 	stw	zero,-24(fp)
8112f440:	00006d06 	br	8112f5f8 <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
8112f444:	e0bffa17 	ldw	r2,-24(fp)
8112f448:	e0ffff17 	ldw	r3,-4(fp)
8112f44c:	1885883a 	add	r2,r3,r2
8112f450:	10800003 	ldbu	r2,0(r2)
8112f454:	10803fcc 	andi	r2,r2,255
8112f458:	1080201c 	xori	r2,r2,128
8112f45c:	10bfe004 	addi	r2,r2,-128
8112f460:	10800820 	cmpeqi	r2,r2,32
8112f464:	10003e1e 	bne	r2,zero,8112f560 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8112f468:	e0bffa17 	ldw	r2,-24(fp)
8112f46c:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
8112f470:	e0bffb17 	ldw	r2,-20(fp)
8112f474:	1880121e 	bne	r3,r2,8112f4c0 <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8112f478:	e0bffa17 	ldw	r2,-24(fp)
8112f47c:	e0ffff17 	ldw	r3,-4(fp)
8112f480:	1885883a 	add	r2,r3,r2
8112f484:	10800003 	ldbu	r2,0(r2)
8112f488:	10803fcc 	andi	r2,r2,255
8112f48c:	1080201c 	xori	r2,r2,128
8112f490:	10bfe004 	addi	r2,r2,-128
8112f494:	10801720 	cmpeqi	r2,r2,92
8112f498:	1000311e 	bne	r2,zero,8112f560 <check_file_name_for_FAT16_compliance+0x164>
8112f49c:	e0bffa17 	ldw	r2,-24(fp)
8112f4a0:	e0ffff17 	ldw	r3,-4(fp)
8112f4a4:	1885883a 	add	r2,r3,r2
8112f4a8:	10800003 	ldbu	r2,0(r2)
8112f4ac:	10803fcc 	andi	r2,r2,255
8112f4b0:	1080201c 	xori	r2,r2,128
8112f4b4:	10bfe004 	addi	r2,r2,-128
8112f4b8:	10800be0 	cmpeqi	r2,r2,47
8112f4bc:	1000281e 	bne	r2,zero,8112f560 <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
8112f4c0:	e0fffa17 	ldw	r3,-24(fp)
8112f4c4:	e0bffc17 	ldw	r2,-16(fp)
8112f4c8:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8112f4cc:	10800258 	cmpnei	r2,r2,9
8112f4d0:	1000091e 	bne	r2,zero,8112f4f8 <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
8112f4d4:	e0bffa17 	ldw	r2,-24(fp)
8112f4d8:	e0ffff17 	ldw	r3,-4(fp)
8112f4dc:	1885883a 	add	r2,r3,r2
8112f4e0:	10800003 	ldbu	r2,0(r2)
8112f4e4:	10803fcc 	andi	r2,r2,255
8112f4e8:	1080201c 	xori	r2,r2,128
8112f4ec:	10bfe004 	addi	r2,r2,-128
8112f4f0:	10800b98 	cmpnei	r2,r2,46
8112f4f4:	10001a1e 	bne	r2,zero,8112f560 <check_file_name_for_FAT16_compliance+0x164>
8112f4f8:	e0fffb17 	ldw	r3,-20(fp)
8112f4fc:	e0bffc17 	ldw	r2,-16(fp)
8112f500:	18801926 	beq	r3,r2,8112f568 <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
8112f504:	e0fffa17 	ldw	r3,-24(fp)
8112f508:	e0bffc17 	ldw	r2,-16(fp)
8112f50c:	1885c83a 	sub	r2,r3,r2
8112f510:	10800110 	cmplti	r2,r2,4
8112f514:	1000141e 	bne	r2,zero,8112f568 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
8112f518:	e0bffa17 	ldw	r2,-24(fp)
8112f51c:	e0ffff17 	ldw	r3,-4(fp)
8112f520:	1885883a 	add	r2,r3,r2
8112f524:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
8112f528:	10803fcc 	andi	r2,r2,255
8112f52c:	1080201c 	xori	r2,r2,128
8112f530:	10bfe004 	addi	r2,r2,-128
8112f534:	10801720 	cmpeqi	r2,r2,92
8112f538:	10000b1e 	bne	r2,zero,8112f568 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
8112f53c:	e0bffa17 	ldw	r2,-24(fp)
8112f540:	e0ffff17 	ldw	r3,-4(fp)
8112f544:	1885883a 	add	r2,r3,r2
8112f548:	10800003 	ldbu	r2,0(r2)
8112f54c:	10803fcc 	andi	r2,r2,255
8112f550:	1080201c 	xori	r2,r2,128
8112f554:	10bfe004 	addi	r2,r2,-128
8112f558:	10800be0 	cmpeqi	r2,r2,47
8112f55c:	1000021e 	bne	r2,zero,8112f568 <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
8112f560:	e03ffd15 	stw	zero,-12(fp)
            break;
8112f564:	00002706 	br	8112f604 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
8112f568:	e0bffa17 	ldw	r2,-24(fp)
8112f56c:	e0ffff17 	ldw	r3,-4(fp)
8112f570:	1885883a 	add	r2,r3,r2
8112f574:	10800003 	ldbu	r2,0(r2)
8112f578:	10803fcc 	andi	r2,r2,255
8112f57c:	1080201c 	xori	r2,r2,128
8112f580:	10bfe004 	addi	r2,r2,-128
8112f584:	10801720 	cmpeqi	r2,r2,92
8112f588:	1000091e 	bne	r2,zero,8112f5b0 <check_file_name_for_FAT16_compliance+0x1b4>
8112f58c:	e0bffa17 	ldw	r2,-24(fp)
8112f590:	e0ffff17 	ldw	r3,-4(fp)
8112f594:	1885883a 	add	r2,r3,r2
8112f598:	10800003 	ldbu	r2,0(r2)
8112f59c:	10803fcc 	andi	r2,r2,255
8112f5a0:	1080201c 	xori	r2,r2,128
8112f5a4:	10bfe004 	addi	r2,r2,-128
8112f5a8:	10800bd8 	cmpnei	r2,r2,47
8112f5ac:	1000041e 	bne	r2,zero,8112f5c0 <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
8112f5b0:	e0bffa17 	ldw	r2,-24(fp)
8112f5b4:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
8112f5b8:	e0bffa17 	ldw	r2,-24(fp)
8112f5bc:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
8112f5c0:	e0bffa17 	ldw	r2,-24(fp)
8112f5c4:	e0ffff17 	ldw	r3,-4(fp)
8112f5c8:	1885883a 	add	r2,r3,r2
8112f5cc:	10800003 	ldbu	r2,0(r2)
8112f5d0:	10803fcc 	andi	r2,r2,255
8112f5d4:	1080201c 	xori	r2,r2,128
8112f5d8:	10bfe004 	addi	r2,r2,-128
8112f5dc:	10800b98 	cmpnei	r2,r2,46
8112f5e0:	1000021e 	bne	r2,zero,8112f5ec <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
8112f5e4:	e0bffa17 	ldw	r2,-24(fp)
8112f5e8:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
8112f5ec:	e0bffa17 	ldw	r2,-24(fp)
8112f5f0:	10800044 	addi	r2,r2,1
8112f5f4:	e0bffa15 	stw	r2,-24(fp)
8112f5f8:	e0fffa17 	ldw	r3,-24(fp)
8112f5fc:	e0bffe17 	ldw	r2,-8(fp)
8112f600:	18bf9016 	blt	r3,r2,8112f444 <__reset+0xfb10f444>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
8112f604:	e0bffe17 	ldw	r2,-8(fp)
8112f608:	10bfffc4 	addi	r2,r2,-1
8112f60c:	e0ffff17 	ldw	r3,-4(fp)
8112f610:	1885883a 	add	r2,r3,r2
8112f614:	10800003 	ldbu	r2,0(r2)
8112f618:	10803fcc 	andi	r2,r2,255
8112f61c:	1080201c 	xori	r2,r2,128
8112f620:	10bfe004 	addi	r2,r2,-128
8112f624:	10801720 	cmpeqi	r2,r2,92
8112f628:	10000a1e 	bne	r2,zero,8112f654 <check_file_name_for_FAT16_compliance+0x258>
8112f62c:	e0bffe17 	ldw	r2,-8(fp)
8112f630:	10bfffc4 	addi	r2,r2,-1
8112f634:	e0ffff17 	ldw	r3,-4(fp)
8112f638:	1885883a 	add	r2,r3,r2
8112f63c:	10800003 	ldbu	r2,0(r2)
8112f640:	10803fcc 	andi	r2,r2,255
8112f644:	1080201c 	xori	r2,r2,128
8112f648:	10bfe004 	addi	r2,r2,-128
8112f64c:	10800bd8 	cmpnei	r2,r2,47
8112f650:	1000011e 	bne	r2,zero,8112f658 <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
8112f654:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
8112f658:	e0bffd17 	ldw	r2,-12(fp)
}
8112f65c:	e037883a 	mov	sp,fp
8112f660:	dfc00117 	ldw	ra,4(sp)
8112f664:	df000017 	ldw	fp,0(sp)
8112f668:	dec00204 	addi	sp,sp,8
8112f66c:	f800283a 	ret

8112f670 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
8112f670:	defffb04 	addi	sp,sp,-20
8112f674:	de00012e 	bgeu	sp,et,8112f67c <get_dir_divider_location+0xc>
8112f678:	003b68fa 	trap	3
8112f67c:	dfc00415 	stw	ra,16(sp)
8112f680:	df000315 	stw	fp,12(sp)
8112f684:	df000304 	addi	fp,sp,12
8112f688:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
8112f68c:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
8112f690:	e13fff17 	ldw	r4,-4(fp)
8112f694:	110f27c0 	call	8110f27c <strlen>
8112f698:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
8112f69c:	e03ffd15 	stw	zero,-12(fp)
8112f6a0:	00001506 	br	8112f6f8 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
8112f6a4:	e0bffd17 	ldw	r2,-12(fp)
8112f6a8:	e0ffff17 	ldw	r3,-4(fp)
8112f6ac:	1885883a 	add	r2,r3,r2
8112f6b0:	10800003 	ldbu	r2,0(r2)
8112f6b4:	10803fcc 	andi	r2,r2,255
8112f6b8:	1080201c 	xori	r2,r2,128
8112f6bc:	10bfe004 	addi	r2,r2,-128
8112f6c0:	10801720 	cmpeqi	r2,r2,92
8112f6c4:	10000f1e 	bne	r2,zero,8112f704 <get_dir_divider_location+0x94>
8112f6c8:	e0bffd17 	ldw	r2,-12(fp)
8112f6cc:	e0ffff17 	ldw	r3,-4(fp)
8112f6d0:	1885883a 	add	r2,r3,r2
8112f6d4:	10800003 	ldbu	r2,0(r2)
8112f6d8:	10803fcc 	andi	r2,r2,255
8112f6dc:	1080201c 	xori	r2,r2,128
8112f6e0:	10bfe004 	addi	r2,r2,-128
8112f6e4:	10800be0 	cmpeqi	r2,r2,47
8112f6e8:	1000061e 	bne	r2,zero,8112f704 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
8112f6ec:	e0bffd17 	ldw	r2,-12(fp)
8112f6f0:	10800044 	addi	r2,r2,1
8112f6f4:	e0bffd15 	stw	r2,-12(fp)
8112f6f8:	e0fffd17 	ldw	r3,-12(fp)
8112f6fc:	e0bffe17 	ldw	r2,-8(fp)
8112f700:	18bfe816 	blt	r3,r2,8112f6a4 <__reset+0xfb10f6a4>
        {
            break;
        }
    }
    
    if (index == length)
8112f704:	e0fffd17 	ldw	r3,-12(fp)
8112f708:	e0bffe17 	ldw	r2,-8(fp)
8112f70c:	1880021e 	bne	r3,r2,8112f718 <get_dir_divider_location+0xa8>
    {
        index = -1;
8112f710:	00bfffc4 	movi	r2,-1
8112f714:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
8112f718:	e0bffd17 	ldw	r2,-12(fp)
}
8112f71c:	e037883a 	mov	sp,fp
8112f720:	dfc00117 	ldw	ra,4(sp)
8112f724:	df000017 	ldw	fp,0(sp)
8112f728:	dec00204 	addi	sp,sp,8
8112f72c:	f800283a 	ret

8112f730 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
8112f730:	defffa04 	addi	sp,sp,-24
8112f734:	de00012e 	bgeu	sp,et,8112f73c <match_file_record_to_name_ext+0xc>
8112f738:	003b68fa 	trap	3
8112f73c:	df000515 	stw	fp,20(sp)
8112f740:	df000504 	addi	fp,sp,20
8112f744:	e13ffd15 	stw	r4,-12(fp)
8112f748:	e17ffe15 	stw	r5,-8(fp)
8112f74c:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
8112f750:	00800044 	movi	r2,1
8112f754:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
8112f758:	e03ffc15 	stw	zero,-16(fp)
8112f75c:	00004606 	br	8112f878 <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
8112f760:	e0fffd17 	ldw	r3,-12(fp)
8112f764:	e0bffc17 	ldw	r2,-16(fp)
8112f768:	1885883a 	add	r2,r3,r2
8112f76c:	10800003 	ldbu	r2,0(r2)
8112f770:	10803fcc 	andi	r2,r2,255
8112f774:	10801870 	cmpltui	r2,r2,97
8112f778:	1000101e 	bne	r2,zero,8112f7bc <match_file_record_to_name_ext+0x8c>
8112f77c:	e0fffd17 	ldw	r3,-12(fp)
8112f780:	e0bffc17 	ldw	r2,-16(fp)
8112f784:	1885883a 	add	r2,r3,r2
8112f788:	10800003 	ldbu	r2,0(r2)
8112f78c:	10803fcc 	andi	r2,r2,255
8112f790:	10801ee8 	cmpgeui	r2,r2,123
8112f794:	1000091e 	bne	r2,zero,8112f7bc <match_file_record_to_name_ext+0x8c>
8112f798:	e0fffd17 	ldw	r3,-12(fp)
8112f79c:	e0bffc17 	ldw	r2,-16(fp)
8112f7a0:	1885883a 	add	r2,r3,r2
8112f7a4:	10800003 	ldbu	r2,0(r2)
8112f7a8:	10bff804 	addi	r2,r2,-32
8112f7ac:	10c03fcc 	andi	r3,r2,255
8112f7b0:	18c0201c 	xori	r3,r3,128
8112f7b4:	18ffe004 	addi	r3,r3,-128
8112f7b8:	00000706 	br	8112f7d8 <match_file_record_to_name_ext+0xa8>
8112f7bc:	e0fffd17 	ldw	r3,-12(fp)
8112f7c0:	e0bffc17 	ldw	r2,-16(fp)
8112f7c4:	1885883a 	add	r2,r3,r2
8112f7c8:	10800003 	ldbu	r2,0(r2)
8112f7cc:	10c03fcc 	andi	r3,r2,255
8112f7d0:	18c0201c 	xori	r3,r3,128
8112f7d4:	18ffe004 	addi	r3,r3,-128
8112f7d8:	e0bffc17 	ldw	r2,-16(fp)
8112f7dc:	e13ffe17 	ldw	r4,-8(fp)
8112f7e0:	2085883a 	add	r2,r4,r2
8112f7e4:	10800003 	ldbu	r2,0(r2)
8112f7e8:	10803fcc 	andi	r2,r2,255
8112f7ec:	1080201c 	xori	r2,r2,128
8112f7f0:	10bfe004 	addi	r2,r2,-128
8112f7f4:	10801850 	cmplti	r2,r2,97
8112f7f8:	1000121e 	bne	r2,zero,8112f844 <match_file_record_to_name_ext+0x114>
8112f7fc:	e0bffc17 	ldw	r2,-16(fp)
8112f800:	e13ffe17 	ldw	r4,-8(fp)
8112f804:	2085883a 	add	r2,r4,r2
8112f808:	10800003 	ldbu	r2,0(r2)
8112f80c:	10803fcc 	andi	r2,r2,255
8112f810:	1080201c 	xori	r2,r2,128
8112f814:	10bfe004 	addi	r2,r2,-128
8112f818:	10801ec8 	cmpgei	r2,r2,123
8112f81c:	1000091e 	bne	r2,zero,8112f844 <match_file_record_to_name_ext+0x114>
8112f820:	e0bffc17 	ldw	r2,-16(fp)
8112f824:	e13ffe17 	ldw	r4,-8(fp)
8112f828:	2085883a 	add	r2,r4,r2
8112f82c:	10800003 	ldbu	r2,0(r2)
8112f830:	10bff804 	addi	r2,r2,-32
8112f834:	10803fcc 	andi	r2,r2,255
8112f838:	1080201c 	xori	r2,r2,128
8112f83c:	10bfe004 	addi	r2,r2,-128
8112f840:	00000706 	br	8112f860 <match_file_record_to_name_ext+0x130>
8112f844:	e0bffc17 	ldw	r2,-16(fp)
8112f848:	e13ffe17 	ldw	r4,-8(fp)
8112f84c:	2085883a 	add	r2,r4,r2
8112f850:	10800003 	ldbu	r2,0(r2)
8112f854:	10803fcc 	andi	r2,r2,255
8112f858:	1080201c 	xori	r2,r2,128
8112f85c:	10bfe004 	addi	r2,r2,-128
8112f860:	18800226 	beq	r3,r2,8112f86c <match_file_record_to_name_ext+0x13c>
        {
            match = false;
8112f864:	e03ffb15 	stw	zero,-20(fp)
			break;
8112f868:	00000606 	br	8112f884 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
8112f86c:	e0bffc17 	ldw	r2,-16(fp)
8112f870:	10800044 	addi	r2,r2,1
8112f874:	e0bffc15 	stw	r2,-16(fp)
8112f878:	e0bffc17 	ldw	r2,-16(fp)
8112f87c:	10800210 	cmplti	r2,r2,8
8112f880:	103fb71e 	bne	r2,zero,8112f760 <__reset+0xfb10f760>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
8112f884:	e03ffc15 	stw	zero,-16(fp)
8112f888:	00004a06 	br	8112f9b4 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
8112f88c:	e0fffd17 	ldw	r3,-12(fp)
8112f890:	e0bffc17 	ldw	r2,-16(fp)
8112f894:	1885883a 	add	r2,r3,r2
8112f898:	10800204 	addi	r2,r2,8
8112f89c:	10800003 	ldbu	r2,0(r2)
8112f8a0:	10803fcc 	andi	r2,r2,255
8112f8a4:	10801870 	cmpltui	r2,r2,97
8112f8a8:	1000121e 	bne	r2,zero,8112f8f4 <match_file_record_to_name_ext+0x1c4>
8112f8ac:	e0fffd17 	ldw	r3,-12(fp)
8112f8b0:	e0bffc17 	ldw	r2,-16(fp)
8112f8b4:	1885883a 	add	r2,r3,r2
8112f8b8:	10800204 	addi	r2,r2,8
8112f8bc:	10800003 	ldbu	r2,0(r2)
8112f8c0:	10803fcc 	andi	r2,r2,255
8112f8c4:	10801ee8 	cmpgeui	r2,r2,123
8112f8c8:	10000a1e 	bne	r2,zero,8112f8f4 <match_file_record_to_name_ext+0x1c4>
8112f8cc:	e0fffd17 	ldw	r3,-12(fp)
8112f8d0:	e0bffc17 	ldw	r2,-16(fp)
8112f8d4:	1885883a 	add	r2,r3,r2
8112f8d8:	10800204 	addi	r2,r2,8
8112f8dc:	10800003 	ldbu	r2,0(r2)
8112f8e0:	10bff804 	addi	r2,r2,-32
8112f8e4:	10c03fcc 	andi	r3,r2,255
8112f8e8:	18c0201c 	xori	r3,r3,128
8112f8ec:	18ffe004 	addi	r3,r3,-128
8112f8f0:	00000806 	br	8112f914 <match_file_record_to_name_ext+0x1e4>
8112f8f4:	e0fffd17 	ldw	r3,-12(fp)
8112f8f8:	e0bffc17 	ldw	r2,-16(fp)
8112f8fc:	1885883a 	add	r2,r3,r2
8112f900:	10800204 	addi	r2,r2,8
8112f904:	10800003 	ldbu	r2,0(r2)
8112f908:	10c03fcc 	andi	r3,r2,255
8112f90c:	18c0201c 	xori	r3,r3,128
8112f910:	18ffe004 	addi	r3,r3,-128
8112f914:	e0bffc17 	ldw	r2,-16(fp)
8112f918:	e13fff17 	ldw	r4,-4(fp)
8112f91c:	2085883a 	add	r2,r4,r2
8112f920:	10800003 	ldbu	r2,0(r2)
8112f924:	10803fcc 	andi	r2,r2,255
8112f928:	1080201c 	xori	r2,r2,128
8112f92c:	10bfe004 	addi	r2,r2,-128
8112f930:	10801850 	cmplti	r2,r2,97
8112f934:	1000121e 	bne	r2,zero,8112f980 <match_file_record_to_name_ext+0x250>
8112f938:	e0bffc17 	ldw	r2,-16(fp)
8112f93c:	e13fff17 	ldw	r4,-4(fp)
8112f940:	2085883a 	add	r2,r4,r2
8112f944:	10800003 	ldbu	r2,0(r2)
8112f948:	10803fcc 	andi	r2,r2,255
8112f94c:	1080201c 	xori	r2,r2,128
8112f950:	10bfe004 	addi	r2,r2,-128
8112f954:	10801ec8 	cmpgei	r2,r2,123
8112f958:	1000091e 	bne	r2,zero,8112f980 <match_file_record_to_name_ext+0x250>
8112f95c:	e0bffc17 	ldw	r2,-16(fp)
8112f960:	e13fff17 	ldw	r4,-4(fp)
8112f964:	2085883a 	add	r2,r4,r2
8112f968:	10800003 	ldbu	r2,0(r2)
8112f96c:	10bff804 	addi	r2,r2,-32
8112f970:	10803fcc 	andi	r2,r2,255
8112f974:	1080201c 	xori	r2,r2,128
8112f978:	10bfe004 	addi	r2,r2,-128
8112f97c:	00000706 	br	8112f99c <match_file_record_to_name_ext+0x26c>
8112f980:	e0bffc17 	ldw	r2,-16(fp)
8112f984:	e13fff17 	ldw	r4,-4(fp)
8112f988:	2085883a 	add	r2,r4,r2
8112f98c:	10800003 	ldbu	r2,0(r2)
8112f990:	10803fcc 	andi	r2,r2,255
8112f994:	1080201c 	xori	r2,r2,128
8112f998:	10bfe004 	addi	r2,r2,-128
8112f99c:	18800226 	beq	r3,r2,8112f9a8 <match_file_record_to_name_ext+0x278>
        {
            match = false;
8112f9a0:	e03ffb15 	stw	zero,-20(fp)
			break;
8112f9a4:	00000606 	br	8112f9c0 <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
8112f9a8:	e0bffc17 	ldw	r2,-16(fp)
8112f9ac:	10800044 	addi	r2,r2,1
8112f9b0:	e0bffc15 	stw	r2,-16(fp)
8112f9b4:	e0bffc17 	ldw	r2,-16(fp)
8112f9b8:	108000d0 	cmplti	r2,r2,3
8112f9bc:	103fb31e 	bne	r2,zero,8112f88c <__reset+0xfb10f88c>
        {
            match = false;
			break;
        }
    }
	return match;
8112f9c0:	e0bffb17 	ldw	r2,-20(fp)
}
8112f9c4:	e037883a 	mov	sp,fp
8112f9c8:	df000017 	ldw	fp,0(sp)
8112f9cc:	dec00104 	addi	sp,sp,4
8112f9d0:	f800283a 	ret

8112f9d4 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
8112f9d4:	deffe704 	addi	sp,sp,-100
8112f9d8:	de00012e 	bgeu	sp,et,8112f9e0 <get_home_directory_cluster_for_file+0xc>
8112f9dc:	003b68fa 	trap	3
8112f9e0:	dfc01815 	stw	ra,96(sp)
8112f9e4:	df001715 	stw	fp,92(sp)
8112f9e8:	df001704 	addi	fp,sp,92
8112f9ec:	e13ffd15 	stw	r4,-12(fp)
8112f9f0:	e17ffe15 	stw	r5,-8(fp)
8112f9f4:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
8112f9f8:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
8112f9fc:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
8112fa00:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
8112fa04:	e13ffd17 	ldw	r4,-12(fp)
8112fa08:	112f6700 	call	8112f670 <get_dir_divider_location>
8112fa0c:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
8112fa10:	00012f06 	br	8112fed0 <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
8112fa14:	00800804 	movi	r2,32
8112fa18:	e0bff905 	stb	r2,-28(fp)
8112fa1c:	00800804 	movi	r2,32
8112fa20:	e0bff945 	stb	r2,-27(fp)
8112fa24:	00800804 	movi	r2,32
8112fa28:	e0bff985 	stb	r2,-26(fp)
8112fa2c:	00800804 	movi	r2,32
8112fa30:	e0bff9c5 	stb	r2,-25(fp)
8112fa34:	00800804 	movi	r2,32
8112fa38:	e0bffa05 	stb	r2,-24(fp)
8112fa3c:	00800804 	movi	r2,32
8112fa40:	e0bffa45 	stb	r2,-23(fp)
8112fa44:	00800804 	movi	r2,32
8112fa48:	e0bffa85 	stb	r2,-22(fp)
8112fa4c:	00800804 	movi	r2,32
8112fa50:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
8112fa54:	00800804 	movi	r2,32
8112fa58:	e0bffb05 	stb	r2,-20(fp)
8112fa5c:	00800804 	movi	r2,32
8112fa60:	e0bffb45 	stb	r2,-19(fp)
8112fa64:	00800804 	movi	r2,32
8112fa68:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
8112fa6c:	00bfffc4 	movi	r2,-1
8112fa70:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
8112fa74:	e0bfea17 	ldw	r2,-88(fp)
8112fa78:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
8112fa7c:	e03fec15 	stw	zero,-80(fp)
8112fa80:	00002d06 	br	8112fb38 <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
8112fa84:	e0ffec17 	ldw	r3,-80(fp)
8112fa88:	e0bfed17 	ldw	r2,-76(fp)
8112fa8c:	1885883a 	add	r2,r3,r2
8112fa90:	1007883a 	mov	r3,r2
8112fa94:	e0bffd17 	ldw	r2,-12(fp)
8112fa98:	10c5883a 	add	r2,r2,r3
8112fa9c:	10800003 	ldbu	r2,0(r2)
8112faa0:	10803fcc 	andi	r2,r2,255
8112faa4:	1080201c 	xori	r2,r2,128
8112faa8:	10bfe004 	addi	r2,r2,-128
8112faac:	10800b98 	cmpnei	r2,r2,46
8112fab0:	1000031e 	bne	r2,zero,8112fac0 <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
8112fab4:	e0bfec17 	ldw	r2,-80(fp)
8112fab8:	e0bfee15 	stw	r2,-72(fp)
8112fabc:	00001b06 	br	8112fb2c <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
8112fac0:	e0bfee17 	ldw	r2,-72(fp)
8112fac4:	10000c0e 	bge	r2,zero,8112faf8 <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
8112fac8:	e0ffec17 	ldw	r3,-80(fp)
8112facc:	e0bfed17 	ldw	r2,-76(fp)
8112fad0:	1885883a 	add	r2,r3,r2
8112fad4:	1007883a 	mov	r3,r2
8112fad8:	e0bffd17 	ldw	r2,-12(fp)
8112fadc:	10c5883a 	add	r2,r2,r3
8112fae0:	10c00003 	ldbu	r3,0(r2)
8112fae4:	e13ff904 	addi	r4,fp,-28
8112fae8:	e0bfec17 	ldw	r2,-80(fp)
8112faec:	2085883a 	add	r2,r4,r2
8112faf0:	10c00005 	stb	r3,0(r2)
8112faf4:	00000d06 	br	8112fb2c <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
8112faf8:	e0ffec17 	ldw	r3,-80(fp)
8112fafc:	e0bfee17 	ldw	r2,-72(fp)
8112fb00:	1885c83a 	sub	r2,r3,r2
8112fb04:	e13fec17 	ldw	r4,-80(fp)
8112fb08:	e0ffed17 	ldw	r3,-76(fp)
8112fb0c:	20c7883a 	add	r3,r4,r3
8112fb10:	1809883a 	mov	r4,r3
8112fb14:	e0fffd17 	ldw	r3,-12(fp)
8112fb18:	1907883a 	add	r3,r3,r4
8112fb1c:	18c00003 	ldbu	r3,0(r3)
8112fb20:	e13ffb04 	addi	r4,fp,-20
8112fb24:	2085883a 	add	r2,r4,r2
8112fb28:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
8112fb2c:	e0bfec17 	ldw	r2,-80(fp)
8112fb30:	10800044 	addi	r2,r2,1
8112fb34:	e0bfec15 	stw	r2,-80(fp)
8112fb38:	e0ffec17 	ldw	r3,-80(fp)
8112fb3c:	e0bfeb17 	ldw	r2,-84(fp)
8112fb40:	18bfd016 	blt	r3,r2,8112fa84 <__reset+0xfb10fa84>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
8112fb44:	e0bfea17 	ldw	r2,-88(fp)
8112fb48:	10005c1e 	bne	r2,zero,8112fcbc <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8112fb4c:	00a045b4 	movhi	r2,33046
8112fb50:	10907c04 	addi	r2,r2,16880
8112fb54:	1080050b 	ldhu	r2,20(r2)
8112fb58:	10bfffcc 	andi	r2,r2,65535
8112fb5c:	1006917a 	slli	r3,r2,5
8112fb60:	00a045b4 	movhi	r2,33046
8112fb64:	10907c04 	addi	r2,r2,16880
8112fb68:	1080030b 	ldhu	r2,12(r2)
8112fb6c:	10bfffcc 	andi	r2,r2,65535
8112fb70:	1885283a 	div	r2,r3,r2
8112fb74:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112fb78:	e03ff015 	stw	zero,-64(fp)
8112fb7c:	00003b06 	br	8112fc6c <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
8112fb80:	00a045b4 	movhi	r2,33046
8112fb84:	10907c04 	addi	r2,r2,16880
8112fb88:	10c01317 	ldw	r3,76(r2)
8112fb8c:	e0bff017 	ldw	r2,-64(fp)
8112fb90:	1885883a 	add	r2,r3,r2
8112fb94:	1007883a 	mov	r3,r2
8112fb98:	d0a09f17 	ldw	r2,-32132(gp)
8112fb9c:	100b883a 	mov	r5,r2
8112fba0:	1809883a 	mov	r4,r3
8112fba4:	112e26c0 	call	8112e26c <Read_Sector_Data>
8112fba8:	10003426 	beq	r2,zero,8112fc7c <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112fbac:	e03ff115 	stw	zero,-60(fp)
8112fbb0:	00002506 	br	8112fc48 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
8112fbb4:	e0bff117 	ldw	r2,-60(fp)
8112fbb8:	1004917a 	slli	r2,r2,5
8112fbbc:	e0fff017 	ldw	r3,-64(fp)
8112fbc0:	180f883a 	mov	r7,r3
8112fbc4:	000d883a 	mov	r6,zero
8112fbc8:	e17fff17 	ldw	r5,-4(fp)
8112fbcc:	1009883a 	mov	r4,r2
8112fbd0:	112e69c0 	call	8112e69c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112fbd4:	e0bfff17 	ldw	r2,-4(fp)
8112fbd8:	10800003 	ldbu	r2,0(r2)
8112fbdc:	10803fcc 	andi	r2,r2,255
8112fbe0:	10803960 	cmpeqi	r2,r2,229
8112fbe4:	1000151e 	bne	r2,zero,8112fc3c <get_home_directory_cluster_for_file+0x268>
8112fbe8:	e0bfff17 	ldw	r2,-4(fp)
8112fbec:	10800003 	ldbu	r2,0(r2)
8112fbf0:	10803fcc 	andi	r2,r2,255
8112fbf4:	10001126 	beq	r2,zero,8112fc3c <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
8112fbf8:	e0fffb04 	addi	r3,fp,-20
8112fbfc:	e0bff904 	addi	r2,fp,-28
8112fc00:	180d883a 	mov	r6,r3
8112fc04:	100b883a 	mov	r5,r2
8112fc08:	e13fff17 	ldw	r4,-4(fp)
8112fc0c:	112f7300 	call	8112f730 <match_file_record_to_name_ext>
8112fc10:	e0bff815 	stw	r2,-32(fp)
                            if (match)
8112fc14:	e0bff817 	ldw	r2,-32(fp)
8112fc18:	10000826 	beq	r2,zero,8112fc3c <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
8112fc1c:	e0bfff17 	ldw	r2,-4(fp)
8112fc20:	1080058b 	ldhu	r2,22(r2)
8112fc24:	10bfffcc 	andi	r2,r2,65535
8112fc28:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
8112fc2c:	e0bfff17 	ldw	r2,-4(fp)
8112fc30:	00c00044 	movi	r3,1
8112fc34:	10c00a15 	stw	r3,40(r2)
                                break;
8112fc38:	00000606 	br	8112fc54 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112fc3c:	e0bff117 	ldw	r2,-60(fp)
8112fc40:	10800044 	addi	r2,r2,1
8112fc44:	e0bff115 	stw	r2,-60(fp)
8112fc48:	e0bff117 	ldw	r2,-60(fp)
8112fc4c:	10800410 	cmplti	r2,r2,16
8112fc50:	103fd81e 	bne	r2,zero,8112fbb4 <__reset+0xfb10fbb4>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
8112fc54:	e0ffef17 	ldw	r3,-68(fp)
8112fc58:	e0bfea17 	ldw	r2,-88(fp)
8112fc5c:	1880091e 	bne	r3,r2,8112fc84 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112fc60:	e0bff017 	ldw	r2,-64(fp)
8112fc64:	10800044 	addi	r2,r2,1
8112fc68:	e0bff015 	stw	r2,-64(fp)
8112fc6c:	e0fff017 	ldw	r3,-64(fp)
8112fc70:	e0bff717 	ldw	r2,-36(fp)
8112fc74:	18bfc216 	blt	r3,r2,8112fb80 <__reset+0xfb10fb80>
8112fc78:	00000306 	br	8112fc88 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
8112fc7c:	0001883a 	nop
8112fc80:	00000106 	br	8112fc88 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
8112fc84:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
8112fc88:	e0ffef17 	ldw	r3,-68(fp)
8112fc8c:	e0bfea17 	ldw	r2,-88(fp)
8112fc90:	18800826 	beq	r3,r2,8112fcb4 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
8112fc94:	e0bfef17 	ldw	r2,-68(fp)
8112fc98:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
8112fc9c:	e0ffed17 	ldw	r3,-76(fp)
8112fca0:	e0bfeb17 	ldw	r2,-84(fp)
8112fca4:	1885883a 	add	r2,r3,r2
8112fca8:	10800044 	addi	r2,r2,1
8112fcac:	e0bfed15 	stw	r2,-76(fp)
8112fcb0:	00007d06 	br	8112fea8 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
8112fcb4:	0005883a 	mov	r2,zero
8112fcb8:	00009106 	br	8112ff00 <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
8112fcbc:	e0bfea17 	ldw	r2,-88(fp)
8112fcc0:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112fcc4:	e0bff417 	ldw	r2,-48(fp)
8112fcc8:	10ffff84 	addi	r3,r2,-2
8112fccc:	00a045b4 	movhi	r2,33046
8112fcd0:	10907c04 	addi	r2,r2,16880
8112fcd4:	10800383 	ldbu	r2,14(r2)
8112fcd8:	10803fcc 	andi	r2,r2,255
8112fcdc:	1885383a 	mul	r2,r3,r2
8112fce0:	1007883a 	mov	r3,r2
8112fce4:	00a045b4 	movhi	r2,33046
8112fce8:	10907c04 	addi	r2,r2,16880
8112fcec:	10801417 	ldw	r2,80(r2)
8112fcf0:	1885883a 	add	r2,r3,r2
8112fcf4:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112fcf8:	e03ff215 	stw	zero,-56(fp)
8112fcfc:	00003606 	br	8112fdd8 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112fd00:	e0fff217 	ldw	r3,-56(fp)
8112fd04:	e0bff517 	ldw	r2,-44(fp)
8112fd08:	1885883a 	add	r2,r3,r2
8112fd0c:	d0e09f17 	ldw	r3,-32132(gp)
8112fd10:	180b883a 	mov	r5,r3
8112fd14:	1009883a 	mov	r4,r2
8112fd18:	112e26c0 	call	8112e26c <Read_Sector_Data>
8112fd1c:	10003526 	beq	r2,zero,8112fdf4 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
8112fd20:	e03ff315 	stw	zero,-52(fp)
8112fd24:	00002306 	br	8112fdb4 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
8112fd28:	e0bff317 	ldw	r2,-52(fp)
8112fd2c:	1004917a 	slli	r2,r2,5
8112fd30:	e0fff417 	ldw	r3,-48(fp)
8112fd34:	e13ff217 	ldw	r4,-56(fp)
8112fd38:	200f883a 	mov	r7,r4
8112fd3c:	180d883a 	mov	r6,r3
8112fd40:	e17fff17 	ldw	r5,-4(fp)
8112fd44:	1009883a 	mov	r4,r2
8112fd48:	112e69c0 	call	8112e69c <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112fd4c:	e0bfff17 	ldw	r2,-4(fp)
8112fd50:	10800003 	ldbu	r2,0(r2)
8112fd54:	10803fcc 	andi	r2,r2,255
8112fd58:	10803960 	cmpeqi	r2,r2,229
8112fd5c:	1000121e 	bne	r2,zero,8112fda8 <get_home_directory_cluster_for_file+0x3d4>
8112fd60:	e0bfff17 	ldw	r2,-4(fp)
8112fd64:	10800003 	ldbu	r2,0(r2)
8112fd68:	10803fcc 	andi	r2,r2,255
8112fd6c:	10000e26 	beq	r2,zero,8112fda8 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
8112fd70:	e0fffb04 	addi	r3,fp,-20
8112fd74:	e0bff904 	addi	r2,fp,-28
8112fd78:	180d883a 	mov	r6,r3
8112fd7c:	100b883a 	mov	r5,r2
8112fd80:	e13fff17 	ldw	r4,-4(fp)
8112fd84:	112f7300 	call	8112f730 <match_file_record_to_name_ext>
8112fd88:	e0bff615 	stw	r2,-40(fp)
                                if (match)
8112fd8c:	e0bff617 	ldw	r2,-40(fp)
8112fd90:	10000526 	beq	r2,zero,8112fda8 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
8112fd94:	e0bfff17 	ldw	r2,-4(fp)
8112fd98:	1080058b 	ldhu	r2,22(r2)
8112fd9c:	10bfffcc 	andi	r2,r2,65535
8112fda0:	e0bfef15 	stw	r2,-68(fp)
                                    break;
8112fda4:	00000606 	br	8112fdc0 <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
8112fda8:	e0bff317 	ldw	r2,-52(fp)
8112fdac:	10800044 	addi	r2,r2,1
8112fdb0:	e0bff315 	stw	r2,-52(fp)
8112fdb4:	e0bff317 	ldw	r2,-52(fp)
8112fdb8:	10800410 	cmplti	r2,r2,16
8112fdbc:	103fda1e 	bne	r2,zero,8112fd28 <__reset+0xfb10fd28>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
8112fdc0:	e0ffef17 	ldw	r3,-68(fp)
8112fdc4:	e0bfea17 	ldw	r2,-88(fp)
8112fdc8:	18800c1e 	bne	r3,r2,8112fdfc <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112fdcc:	e0bff217 	ldw	r2,-56(fp)
8112fdd0:	10800044 	addi	r2,r2,1
8112fdd4:	e0bff215 	stw	r2,-56(fp)
8112fdd8:	00a045b4 	movhi	r2,33046
8112fddc:	10907c04 	addi	r2,r2,16880
8112fde0:	10800383 	ldbu	r2,14(r2)
8112fde4:	10803fcc 	andi	r2,r2,255
8112fde8:	e0fff217 	ldw	r3,-56(fp)
8112fdec:	18bfc416 	blt	r3,r2,8112fd00 <__reset+0xfb10fd00>
8112fdf0:	00000306 	br	8112fe00 <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
8112fdf4:	0001883a 	nop
8112fdf8:	00000106 	br	8112fe00 <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
8112fdfc:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
8112fe00:	e0ffef17 	ldw	r3,-68(fp)
8112fe04:	e0bfea17 	ldw	r2,-88(fp)
8112fe08:	1880141e 	bne	r3,r2,8112fe5c <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
8112fe0c:	e0bfef17 	ldw	r2,-68(fp)
8112fe10:	e0fffc04 	addi	r3,fp,-16
8112fe14:	180b883a 	mov	r5,r3
8112fe18:	1009883a 	mov	r4,r2
8112fe1c:	112e34c0 	call	8112e34c <get_cluster_flag>
8112fe20:	10000c26 	beq	r2,zero,8112fe54 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
8112fe24:	e0bffc0b 	ldhu	r2,-16(fp)
8112fe28:	10bfffcc 	andi	r2,r2,65535
8112fe2c:	10fffe0c 	andi	r3,r2,65528
8112fe30:	00bffe14 	movui	r2,65528
8112fe34:	1880021e 	bne	r3,r2,8112fe40 <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
8112fe38:	0005883a 	mov	r2,zero
8112fe3c:	00003006 	br	8112ff00 <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
8112fe40:	e0bffc0b 	ldhu	r2,-16(fp)
8112fe44:	10bfffcc 	andi	r2,r2,65535
8112fe48:	10bffe0c 	andi	r2,r2,65528
8112fe4c:	e0bfef15 	stw	r2,-68(fp)
8112fe50:	00000206 	br	8112fe5c <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
8112fe54:	0005883a 	mov	r2,zero
8112fe58:	00002906 	br	8112ff00 <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
8112fe5c:	e0bff417 	ldw	r2,-48(fp)
8112fe60:	00fffdd4 	movui	r3,65527
8112fe64:	18800316 	blt	r3,r2,8112fe74 <get_home_directory_cluster_for_file+0x4a0>
8112fe68:	e0ffef17 	ldw	r3,-68(fp)
8112fe6c:	e0bfea17 	ldw	r2,-88(fp)
8112fe70:	18bf9426 	beq	r3,r2,8112fcc4 <__reset+0xfb10fcc4>
            if (new_cluster != home_dir_cluster)
8112fe74:	e0ffef17 	ldw	r3,-68(fp)
8112fe78:	e0bfea17 	ldw	r2,-88(fp)
8112fe7c:	18800826 	beq	r3,r2,8112fea0 <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
8112fe80:	e0bfef17 	ldw	r2,-68(fp)
8112fe84:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
8112fe88:	e0ffed17 	ldw	r3,-76(fp)
8112fe8c:	e0bfeb17 	ldw	r2,-84(fp)
8112fe90:	1885883a 	add	r2,r3,r2
8112fe94:	10800044 	addi	r2,r2,1
8112fe98:	e0bfed15 	stw	r2,-76(fp)
8112fe9c:	00000206 	br	8112fea8 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
8112fea0:	0005883a 	mov	r2,zero
8112fea4:	00001606 	br	8112ff00 <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
8112fea8:	e0bfed17 	ldw	r2,-76(fp)
8112feac:	e0fffd17 	ldw	r3,-12(fp)
8112feb0:	1885883a 	add	r2,r3,r2
8112feb4:	1009883a 	mov	r4,r2
8112feb8:	112f6700 	call	8112f670 <get_dir_divider_location>
8112febc:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
8112fec0:	e0bfeb17 	ldw	r2,-84(fp)
8112fec4:	1000020e 	bge	r2,zero,8112fed0 <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
8112fec8:	00800044 	movi	r2,1
8112fecc:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
8112fed0:	e0bfeb17 	ldw	r2,-84(fp)
8112fed4:	00becf16 	blt	zero,r2,8112fa14 <__reset+0xfb10fa14>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
8112fed8:	e0bffe17 	ldw	r2,-8(fp)
8112fedc:	e0ffea17 	ldw	r3,-88(fp)
8112fee0:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
8112fee4:	e0bfea17 	ldw	r2,-88(fp)
8112fee8:	1000041e 	bne	r2,zero,8112fefc <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
8112feec:	e0bfff17 	ldw	r2,-4(fp)
8112fef0:	10000a15 	stw	zero,40(r2)
		result = true;
8112fef4:	00800044 	movi	r2,1
8112fef8:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
8112fefc:	e0bfe917 	ldw	r2,-92(fp)
}
8112ff00:	e037883a 	mov	sp,fp
8112ff04:	dfc00117 	ldw	ra,4(sp)
8112ff08:	df000017 	ldw	fp,0(sp)
8112ff0c:	dec00204 	addi	sp,sp,8
8112ff10:	f800283a 	ret

8112ff14 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
8112ff14:	deffe804 	addi	sp,sp,-96
8112ff18:	de00012e 	bgeu	sp,et,8112ff20 <find_file_in_directory+0xc>
8112ff1c:	003b68fa 	trap	3
8112ff20:	dfc01715 	stw	ra,92(sp)
8112ff24:	df001615 	stw	fp,88(sp)
8112ff28:	df001604 	addi	fp,sp,88
8112ff2c:	e13ffd15 	stw	r4,-12(fp)
8112ff30:	e17ffe15 	stw	r5,-8(fp)
8112ff34:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
8112ff38:	e13ffe17 	ldw	r4,-8(fp)
8112ff3c:	112f6700 	call	8112f670 <get_dir_divider_location>
8112ff40:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
8112ff44:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
8112ff48:	00800804 	movi	r2,32
8112ff4c:	e0bff905 	stb	r2,-28(fp)
8112ff50:	00800804 	movi	r2,32
8112ff54:	e0bff945 	stb	r2,-27(fp)
8112ff58:	00800804 	movi	r2,32
8112ff5c:	e0bff985 	stb	r2,-26(fp)
8112ff60:	00800804 	movi	r2,32
8112ff64:	e0bff9c5 	stb	r2,-25(fp)
8112ff68:	00800804 	movi	r2,32
8112ff6c:	e0bffa05 	stb	r2,-24(fp)
8112ff70:	00800804 	movi	r2,32
8112ff74:	e0bffa45 	stb	r2,-23(fp)
8112ff78:	00800804 	movi	r2,32
8112ff7c:	e0bffa85 	stb	r2,-22(fp)
8112ff80:	00800804 	movi	r2,32
8112ff84:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
8112ff88:	00800804 	movi	r2,32
8112ff8c:	e0bffb05 	stb	r2,-20(fp)
8112ff90:	00800804 	movi	r2,32
8112ff94:	e0bffb45 	stb	r2,-19(fp)
8112ff98:	00800804 	movi	r2,32
8112ff9c:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
8112ffa0:	00bfffc4 	movi	r2,-1
8112ffa4:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
8112ffa8:	e0bffd17 	ldw	r2,-12(fp)
8112ffac:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
8112ffb0:	e13ffe17 	ldw	r4,-8(fp)
8112ffb4:	110f27c0 	call	8110f27c <strlen>
8112ffb8:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
8112ffbc:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
8112ffc0:	00000b06 	br	8112fff0 <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
8112ffc4:	e0ffeb17 	ldw	r3,-84(fp)
8112ffc8:	e0bfea17 	ldw	r2,-88(fp)
8112ffcc:	1885883a 	add	r2,r3,r2
8112ffd0:	10800044 	addi	r2,r2,1
8112ffd4:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
8112ffd8:	e0bfeb17 	ldw	r2,-84(fp)
8112ffdc:	e0fffe17 	ldw	r3,-8(fp)
8112ffe0:	1885883a 	add	r2,r3,r2
8112ffe4:	1009883a 	mov	r4,r2
8112ffe8:	112f6700 	call	8112f670 <get_dir_divider_location>
8112ffec:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
8112fff0:	e0bfea17 	ldw	r2,-88(fp)
8112fff4:	00bff316 	blt	zero,r2,8112ffc4 <__reset+0xfb10ffc4>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
8112fff8:	e0bfeb17 	ldw	r2,-84(fp)
8112fffc:	e0bfee15 	stw	r2,-72(fp)
81130000:	00002706 	br	811300a0 <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
81130004:	e0bfee17 	ldw	r2,-72(fp)
81130008:	e0fffe17 	ldw	r3,-8(fp)
8113000c:	1885883a 	add	r2,r3,r2
81130010:	10800003 	ldbu	r2,0(r2)
81130014:	10803fcc 	andi	r2,r2,255
81130018:	1080201c 	xori	r2,r2,128
8113001c:	10bfe004 	addi	r2,r2,-128
81130020:	10800b98 	cmpnei	r2,r2,46
81130024:	1000031e 	bne	r2,zero,81130034 <find_file_in_directory+0x120>
        {
            ext_index = index;
81130028:	e0bfee17 	ldw	r2,-72(fp)
8113002c:	e0bfec15 	stw	r2,-80(fp)
81130030:	00001806 	br	81130094 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
81130034:	e0bfec17 	ldw	r2,-80(fp)
81130038:	10000b0e 	bge	r2,zero,81130068 <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
8113003c:	e0ffee17 	ldw	r3,-72(fp)
81130040:	e0bfeb17 	ldw	r2,-84(fp)
81130044:	1885c83a 	sub	r2,r3,r2
81130048:	e0ffee17 	ldw	r3,-72(fp)
8113004c:	e13ffe17 	ldw	r4,-8(fp)
81130050:	20c7883a 	add	r3,r4,r3
81130054:	18c00003 	ldbu	r3,0(r3)
81130058:	e13ff904 	addi	r4,fp,-28
8113005c:	2085883a 	add	r2,r4,r2
81130060:	10c00005 	stb	r3,0(r2)
81130064:	00000b06 	br	81130094 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
81130068:	e0ffee17 	ldw	r3,-72(fp)
8113006c:	e0bfec17 	ldw	r2,-80(fp)
81130070:	1885c83a 	sub	r2,r3,r2
81130074:	10bfffc4 	addi	r2,r2,-1
81130078:	e0ffee17 	ldw	r3,-72(fp)
8113007c:	e13ffe17 	ldw	r4,-8(fp)
81130080:	20c7883a 	add	r3,r4,r3
81130084:	18c00003 	ldbu	r3,0(r3)
81130088:	e13ffb04 	addi	r4,fp,-20
8113008c:	2085883a 	add	r2,r4,r2
81130090:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81130094:	e0bfee17 	ldw	r2,-72(fp)
81130098:	10800044 	addi	r2,r2,1
8113009c:	e0bfee15 	stw	r2,-72(fp)
811300a0:	e0ffee17 	ldw	r3,-72(fp)
811300a4:	e0bff417 	ldw	r2,-48(fp)
811300a8:	18bfd616 	blt	r3,r2,81130004 <__reset+0xfb110004>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
811300ac:	e0bffd17 	ldw	r2,-12(fp)
811300b0:	1000461e 	bne	r2,zero,811301cc <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
811300b4:	00a045b4 	movhi	r2,33046
811300b8:	10907c04 	addi	r2,r2,16880
811300bc:	1080050b 	ldhu	r2,20(r2)
811300c0:	10bfffcc 	andi	r2,r2,65535
811300c4:	1006917a 	slli	r3,r2,5
811300c8:	00a045b4 	movhi	r2,33046
811300cc:	10907c04 	addi	r2,r2,16880
811300d0:	1080030b 	ldhu	r2,12(r2)
811300d4:	10bfffcc 	andi	r2,r2,65535
811300d8:	1885283a 	div	r2,r3,r2
811300dc:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811300e0:	e03ff015 	stw	zero,-64(fp)
811300e4:	00003506 	br	811301bc <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811300e8:	00a045b4 	movhi	r2,33046
811300ec:	10907c04 	addi	r2,r2,16880
811300f0:	10c01317 	ldw	r3,76(r2)
811300f4:	e0bff017 	ldw	r2,-64(fp)
811300f8:	1885883a 	add	r2,r3,r2
811300fc:	1007883a 	mov	r3,r2
81130100:	d0a09f17 	ldw	r2,-32132(gp)
81130104:	100b883a 	mov	r5,r2
81130108:	1809883a 	mov	r4,r3
8113010c:	112e26c0 	call	8112e26c <Read_Sector_Data>
81130110:	10009626 	beq	r2,zero,8113036c <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81130114:	e03ff115 	stw	zero,-60(fp)
81130118:	00002006 	br	8113019c <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
8113011c:	e0bff117 	ldw	r2,-60(fp)
81130120:	1004917a 	slli	r2,r2,5
81130124:	e0fff017 	ldw	r3,-64(fp)
81130128:	180f883a 	mov	r7,r3
8113012c:	000d883a 	mov	r6,zero
81130130:	e17fff17 	ldw	r5,-4(fp)
81130134:	1009883a 	mov	r4,r2
81130138:	112e69c0 	call	8112e69c <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8113013c:	e0bfff17 	ldw	r2,-4(fp)
81130140:	10800003 	ldbu	r2,0(r2)
81130144:	10803fcc 	andi	r2,r2,255
81130148:	10803960 	cmpeqi	r2,r2,229
8113014c:	1000101e 	bne	r2,zero,81130190 <find_file_in_directory+0x27c>
81130150:	e0bfff17 	ldw	r2,-4(fp)
81130154:	10800003 	ldbu	r2,0(r2)
81130158:	10803fcc 	andi	r2,r2,255
8113015c:	10000c26 	beq	r2,zero,81130190 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
81130160:	e0fffb04 	addi	r3,fp,-20
81130164:	e0bff904 	addi	r2,fp,-28
81130168:	180d883a 	mov	r6,r3
8113016c:	100b883a 	mov	r5,r2
81130170:	e13fff17 	ldw	r4,-4(fp)
81130174:	112f7300 	call	8112f730 <match_file_record_to_name_ext>
81130178:	e0bff815 	stw	r2,-32(fp)

                        if (match)
8113017c:	e0bff817 	ldw	r2,-32(fp)
81130180:	10000326 	beq	r2,zero,81130190 <find_file_in_directory+0x27c>
                        {
                            result = true;
81130184:	00800044 	movi	r2,1
81130188:	e0bfef15 	stw	r2,-68(fp)
                            break;
8113018c:	00000606 	br	811301a8 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81130190:	e0bff117 	ldw	r2,-60(fp)
81130194:	10800044 	addi	r2,r2,1
81130198:	e0bff115 	stw	r2,-60(fp)
8113019c:	e0bff117 	ldw	r2,-60(fp)
811301a0:	10800410 	cmplti	r2,r2,16
811301a4:	103fdd1e 	bne	r2,zero,8113011c <__reset+0xfb11011c>
            }
            else
            {
                break;
            }
            if (result)
811301a8:	e0bfef17 	ldw	r2,-68(fp)
811301ac:	1000711e 	bne	r2,zero,81130374 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811301b0:	e0bff017 	ldw	r2,-64(fp)
811301b4:	10800044 	addi	r2,r2,1
811301b8:	e0bff015 	stw	r2,-64(fp)
811301bc:	e0fff017 	ldw	r3,-64(fp)
811301c0:	e0bff717 	ldw	r2,-36(fp)
811301c4:	18bfc816 	blt	r3,r2,811300e8 <__reset+0xfb1100e8>
811301c8:	00006b06 	br	81130378 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811301cc:	e0bfed17 	ldw	r2,-76(fp)
811301d0:	10ffff84 	addi	r3,r2,-2
811301d4:	00a045b4 	movhi	r2,33046
811301d8:	10907c04 	addi	r2,r2,16880
811301dc:	10800383 	ldbu	r2,14(r2)
811301e0:	10803fcc 	andi	r2,r2,255
811301e4:	1885383a 	mul	r2,r3,r2
811301e8:	1007883a 	mov	r3,r2
811301ec:	00a045b4 	movhi	r2,33046
811301f0:	10907c04 	addi	r2,r2,16880
811301f4:	10801417 	ldw	r2,80(r2)
811301f8:	1885883a 	add	r2,r3,r2
811301fc:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81130200:	e03ff215 	stw	zero,-56(fp)
81130204:	00003306 	br	811302d4 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81130208:	e0fff217 	ldw	r3,-56(fp)
8113020c:	e0bff517 	ldw	r2,-44(fp)
81130210:	1885883a 	add	r2,r3,r2
81130214:	d0e09f17 	ldw	r3,-32132(gp)
81130218:	180b883a 	mov	r5,r3
8113021c:	1009883a 	mov	r4,r2
81130220:	112e26c0 	call	8112e26c <Read_Sector_Data>
81130224:	10003226 	beq	r2,zero,811302f0 <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81130228:	e03ff315 	stw	zero,-52(fp)
8113022c:	00002106 	br	811302b4 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
81130230:	e0bff317 	ldw	r2,-52(fp)
81130234:	1004917a 	slli	r2,r2,5
81130238:	e0ffed17 	ldw	r3,-76(fp)
8113023c:	e13ff217 	ldw	r4,-56(fp)
81130240:	200f883a 	mov	r7,r4
81130244:	180d883a 	mov	r6,r3
81130248:	e17fff17 	ldw	r5,-4(fp)
8113024c:	1009883a 	mov	r4,r2
81130250:	112e69c0 	call	8112e69c <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81130254:	e0bfff17 	ldw	r2,-4(fp)
81130258:	10800003 	ldbu	r2,0(r2)
8113025c:	10803fcc 	andi	r2,r2,255
81130260:	10803960 	cmpeqi	r2,r2,229
81130264:	1000101e 	bne	r2,zero,811302a8 <find_file_in_directory+0x394>
81130268:	e0bfff17 	ldw	r2,-4(fp)
8113026c:	10800003 	ldbu	r2,0(r2)
81130270:	10803fcc 	andi	r2,r2,255
81130274:	10000c26 	beq	r2,zero,811302a8 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81130278:	e0fffb04 	addi	r3,fp,-20
8113027c:	e0bff904 	addi	r2,fp,-28
81130280:	180d883a 	mov	r6,r3
81130284:	100b883a 	mov	r5,r2
81130288:	e13fff17 	ldw	r4,-4(fp)
8113028c:	112f7300 	call	8112f730 <match_file_record_to_name_ext>
81130290:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81130294:	e0bff617 	ldw	r2,-40(fp)
81130298:	10000326 	beq	r2,zero,811302a8 <find_file_in_directory+0x394>
                            {                               
                                result = true;
8113029c:	00800044 	movi	r2,1
811302a0:	e0bfef15 	stw	r2,-68(fp)
                                break;
811302a4:	00000606 	br	811302c0 <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811302a8:	e0bff317 	ldw	r2,-52(fp)
811302ac:	10800044 	addi	r2,r2,1
811302b0:	e0bff315 	stw	r2,-52(fp)
811302b4:	e0bff317 	ldw	r2,-52(fp)
811302b8:	10800410 	cmplti	r2,r2,16
811302bc:	103fdc1e 	bne	r2,zero,81130230 <__reset+0xfb110230>
                }
                else
                {
                    break;
                }
                if (result)
811302c0:	e0bfef17 	ldw	r2,-68(fp)
811302c4:	10000c1e 	bne	r2,zero,811302f8 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811302c8:	e0bff217 	ldw	r2,-56(fp)
811302cc:	10800044 	addi	r2,r2,1
811302d0:	e0bff215 	stw	r2,-56(fp)
811302d4:	00a045b4 	movhi	r2,33046
811302d8:	10907c04 	addi	r2,r2,16880
811302dc:	10800383 	ldbu	r2,14(r2)
811302e0:	10803fcc 	andi	r2,r2,255
811302e4:	e0fff217 	ldw	r3,-56(fp)
811302e8:	18bfc716 	blt	r3,r2,81130208 <__reset+0xfb110208>
811302ec:	00000306 	br	811302fc <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
811302f0:	0001883a 	nop
811302f4:	00000106 	br	811302fc <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
811302f8:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
811302fc:	e0bfef17 	ldw	r2,-68(fp)
81130300:	1000141e 	bne	r2,zero,81130354 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
81130304:	e0bfed17 	ldw	r2,-76(fp)
81130308:	e0fffc04 	addi	r3,fp,-16
8113030c:	180b883a 	mov	r5,r3
81130310:	1009883a 	mov	r4,r2
81130314:	112e34c0 	call	8112e34c <get_cluster_flag>
81130318:	10000c26 	beq	r2,zero,8113034c <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8113031c:	e0bffc0b 	ldhu	r2,-16(fp)
81130320:	10bfffcc 	andi	r2,r2,65535
81130324:	10fffe0c 	andi	r3,r2,65528
81130328:	00bffe14 	movui	r2,65528
8113032c:	1880021e 	bne	r3,r2,81130338 <find_file_in_directory+0x424>
					{
						return false;
81130330:	0005883a 	mov	r2,zero
81130334:	00001106 	br	8113037c <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
81130338:	e0bffc0b 	ldhu	r2,-16(fp)
8113033c:	10bfffcc 	andi	r2,r2,65535
81130340:	10bffe0c 	andi	r2,r2,65528
81130344:	e0bfed15 	stw	r2,-76(fp)
81130348:	00000206 	br	81130354 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
8113034c:	0005883a 	mov	r2,zero
81130350:	00000a06 	br	8113037c <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
81130354:	e0bfed17 	ldw	r2,-76(fp)
81130358:	00fffdd4 	movui	r3,65527
8113035c:	18800616 	blt	r3,r2,81130378 <find_file_in_directory+0x464>
81130360:	e0bfef17 	ldw	r2,-68(fp)
81130364:	103f9926 	beq	r2,zero,811301cc <__reset+0xfb1101cc>
81130368:	00000306 	br	81130378 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
8113036c:	0001883a 	nop
81130370:	00000106 	br	81130378 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
81130374:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
81130378:	e0bfef17 	ldw	r2,-68(fp)
}
8113037c:	e037883a 	mov	sp,fp
81130380:	dfc00117 	ldw	ra,4(sp)
81130384:	df000017 	ldw	fp,0(sp)
81130388:	dec00204 	addi	sp,sp,8
8113038c:	f800283a 	ret

81130390 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
81130390:	defff504 	addi	sp,sp,-44
81130394:	de00012e 	bgeu	sp,et,8113039c <find_first_empty_cluster+0xc>
81130398:	003b68fa 	trap	3
8113039c:	dfc00a15 	stw	ra,40(sp)
811303a0:	df000915 	stw	fp,36(sp)
811303a4:	df000904 	addi	fp,sp,36
811303a8:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
811303ac:	00a045b4 	movhi	r2,33046
811303b0:	10907c04 	addi	r2,r2,16880
811303b4:	10801117 	ldw	r2,68(r2)
811303b8:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
811303bc:	00800084 	movi	r2,2
811303c0:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
811303c4:	00bfffc4 	movi	r2,-1
811303c8:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
811303cc:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
811303d0:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
811303d4:	00a045b4 	movhi	r2,33046
811303d8:	10907c04 	addi	r2,r2,16880
811303dc:	10801417 	ldw	r2,80(r2)
811303e0:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
811303e4:	00a045b4 	movhi	r2,33046
811303e8:	10907c04 	addi	r2,r2,16880
811303ec:	1080058b 	ldhu	r2,22(r2)
811303f0:	10bfffcc 	andi	r2,r2,65535
811303f4:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
811303f8:	00a045b4 	movhi	r2,33046
811303fc:	10907c04 	addi	r2,r2,16880
81130400:	10800917 	ldw	r2,36(r2)
81130404:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
81130408:	e0bffd17 	ldw	r2,-12(fp)
8113040c:	e0fffe17 	ldw	r3,-8(fp)
81130410:	18800b2e 	bgeu	r3,r2,81130440 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81130414:	e0fffd17 	ldw	r3,-12(fp)
81130418:	e0bffc17 	ldw	r2,-16(fp)
8113041c:	1887c83a 	sub	r3,r3,r2
81130420:	00a045b4 	movhi	r2,33046
81130424:	10907c04 	addi	r2,r2,16880
81130428:	10800383 	ldbu	r2,14(r2)
8113042c:	10803fcc 	andi	r2,r2,255
81130430:	1885203a 	divu	r2,r3,r2
81130434:	10800044 	addi	r2,r2,1
81130438:	e0bffb15 	stw	r2,-20(fp)
8113043c:	00002a06 	br	811304e8 <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81130440:	e0fffe17 	ldw	r3,-8(fp)
81130444:	e0bffc17 	ldw	r2,-16(fp)
81130448:	1887c83a 	sub	r3,r3,r2
8113044c:	00a045b4 	movhi	r2,33046
81130450:	10907c04 	addi	r2,r2,16880
81130454:	10800383 	ldbu	r2,14(r2)
81130458:	10803fcc 	andi	r2,r2,255
8113045c:	1885203a 	divu	r2,r3,r2
81130460:	10800044 	addi	r2,r2,1
81130464:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81130468:	00001f06 	br	811304e8 <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
8113046c:	e0bff717 	ldw	r2,-36(fp)
81130470:	d0e09f17 	ldw	r3,-32132(gp)
81130474:	180b883a 	mov	r5,r3
81130478:	1009883a 	mov	r4,r2
8113047c:	112e26c0 	call	8112e26c <Read_Sector_Data>
81130480:	10001426 	beq	r2,zero,811304d4 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
81130484:	e0bff817 	ldw	r2,-32(fp)
81130488:	10803fcc 	andi	r2,r2,255
8113048c:	1085883a 	add	r2,r2,r2
81130490:	1007883a 	mov	r3,r2
81130494:	d0a0a117 	ldw	r2,-32124(gp)
81130498:	10800a17 	ldw	r2,40(r2)
8113049c:	1885883a 	add	r2,r3,r2
811304a0:	1080002b 	ldhuio	r2,0(r2)
811304a4:	10bfffcc 	andi	r2,r2,65535
811304a8:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
811304ac:	e0bff90f 	ldh	r2,-28(fp)
811304b0:	10000726 	beq	r2,zero,811304d0 <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
811304b4:	e0bff817 	ldw	r2,-32(fp)
811304b8:	10800044 	addi	r2,r2,1
811304bc:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
811304c0:	e0bff817 	ldw	r2,-32(fp)
811304c4:	10803fcc 	andi	r2,r2,255
811304c8:	103fee1e 	bne	r2,zero,81130484 <__reset+0xfb110484>
811304cc:	00000106 	br	811304d4 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
811304d0:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
811304d4:	e0bff90f 	ldh	r2,-28(fp)
811304d8:	10000926 	beq	r2,zero,81130500 <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
811304dc:	e0bff717 	ldw	r2,-36(fp)
811304e0:	10800044 	addi	r2,r2,1
811304e4:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
811304e8:	00a045b4 	movhi	r2,33046
811304ec:	10907c04 	addi	r2,r2,16880
811304f0:	10c01217 	ldw	r3,72(r2)
811304f4:	e0bff717 	ldw	r2,-36(fp)
811304f8:	18bfdc1e 	bne	r3,r2,8113046c <__reset+0xfb11046c>
811304fc:	00000106 	br	81130504 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
81130500:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81130504:	e0bff90f 	ldh	r2,-28(fp)
81130508:	1000081e 	bne	r2,zero,8113052c <find_first_empty_cluster+0x19c>
8113050c:	e0bff90f 	ldh	r2,-28(fp)
81130510:	e0fffb17 	ldw	r3,-20(fp)
81130514:	18800536 	bltu	r3,r2,8113052c <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
81130518:	e0bfff17 	ldw	r2,-4(fp)
8113051c:	e0fff817 	ldw	r3,-32(fp)
81130520:	10c00015 	stw	r3,0(r2)
		result = true;
81130524:	00800044 	movi	r2,1
81130528:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
8113052c:	e0bffa17 	ldw	r2,-24(fp)
}
81130530:	e037883a 	mov	sp,fp
81130534:	dfc00117 	ldw	ra,4(sp)
81130538:	df000017 	ldw	fp,0(sp)
8113053c:	dec00204 	addi	sp,sp,8
81130540:	f800283a 	ret

81130544 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
81130544:	defff604 	addi	sp,sp,-40
81130548:	de00012e 	bgeu	sp,et,81130550 <find_first_empty_record_in_a_subdirectory+0xc>
8113054c:	003b68fa 	trap	3
81130550:	dfc00915 	stw	ra,36(sp)
81130554:	df000815 	stw	fp,32(sp)
81130558:	df000804 	addi	fp,sp,32
8113055c:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
81130560:	00bfffc4 	movi	r2,-1
81130564:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
81130568:	e0bfff17 	ldw	r2,-4(fp)
8113056c:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81130570:	e0bff917 	ldw	r2,-28(fp)
81130574:	10ffff84 	addi	r3,r2,-2
81130578:	00a045b4 	movhi	r2,33046
8113057c:	10907c04 	addi	r2,r2,16880
81130580:	10800383 	ldbu	r2,14(r2)
81130584:	10803fcc 	andi	r2,r2,255
81130588:	1885383a 	mul	r2,r3,r2
8113058c:	1007883a 	mov	r3,r2
81130590:	00a045b4 	movhi	r2,33046
81130594:	10907c04 	addi	r2,r2,16880
81130598:	10801417 	ldw	r2,80(r2)
8113059c:	1885883a 	add	r2,r3,r2
811305a0:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
811305a4:	e03ffa15 	stw	zero,-24(fp)
811305a8:	00002c06 	br	8113065c <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
811305ac:	e0fffa17 	ldw	r3,-24(fp)
811305b0:	e0bffc17 	ldw	r2,-16(fp)
811305b4:	1885883a 	add	r2,r3,r2
811305b8:	d0e09f17 	ldw	r3,-32132(gp)
811305bc:	180b883a 	mov	r5,r3
811305c0:	1009883a 	mov	r4,r2
811305c4:	112e26c0 	call	8112e26c <Read_Sector_Data>
811305c8:	10002b26 	beq	r2,zero,81130678 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811305cc:	e03ffb15 	stw	zero,-20(fp)
811305d0:	00001c06 	br	81130644 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
811305d4:	e0bffb17 	ldw	r2,-20(fp)
811305d8:	1004917a 	slli	r2,r2,5
811305dc:	1007883a 	mov	r3,r2
811305e0:	d0a0a117 	ldw	r2,-32124(gp)
811305e4:	10800a17 	ldw	r2,40(r2)
811305e8:	1885883a 	add	r2,r3,r2
811305ec:	10800023 	ldbuio	r2,0(r2)
811305f0:	10803fcc 	andi	r2,r2,255
811305f4:	10803fcc 	andi	r2,r2,255
811305f8:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
811305fc:	e0bffd0b 	ldhu	r2,-12(fp)
81130600:	10803960 	cmpeqi	r2,r2,229
81130604:	1000021e 	bne	r2,zero,81130610 <find_first_empty_record_in_a_subdirectory+0xcc>
81130608:	e0bffd0b 	ldhu	r2,-12(fp)
8113060c:	10000a1e 	bne	r2,zero,81130638 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
81130610:	e0bffa17 	ldw	r2,-24(fp)
81130614:	1006913a 	slli	r3,r2,4
81130618:	e0bffb17 	ldw	r2,-20(fp)
8113061c:	1885883a 	add	r2,r3,r2
81130620:	1006943a 	slli	r3,r2,16
81130624:	e0bff917 	ldw	r2,-28(fp)
81130628:	1884b03a 	or	r2,r3,r2
8113062c:	e0bff815 	stw	r2,-32(fp)
                        return result;
81130630:	e0bff817 	ldw	r2,-32(fp)
81130634:	00005306 	br	81130784 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81130638:	e0bffb17 	ldw	r2,-20(fp)
8113063c:	10800044 	addi	r2,r2,1
81130640:	e0bffb15 	stw	r2,-20(fp)
81130644:	e0bffb17 	ldw	r2,-20(fp)
81130648:	10800410 	cmplti	r2,r2,16
8113064c:	103fe11e 	bne	r2,zero,811305d4 <__reset+0xfb1105d4>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81130650:	e0bffa17 	ldw	r2,-24(fp)
81130654:	10800044 	addi	r2,r2,1
81130658:	e0bffa15 	stw	r2,-24(fp)
8113065c:	00a045b4 	movhi	r2,33046
81130660:	10907c04 	addi	r2,r2,16880
81130664:	10800383 	ldbu	r2,14(r2)
81130668:	10803fcc 	andi	r2,r2,255
8113066c:	e0fffa17 	ldw	r3,-24(fp)
81130670:	18bfce16 	blt	r3,r2,811305ac <__reset+0xfb1105ac>
81130674:	00000106 	br	8113067c <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
81130678:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
8113067c:	e0bff817 	ldw	r2,-32(fp)
81130680:	1000390e 	bge	r2,zero,81130768 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
81130684:	e0bff917 	ldw	r2,-28(fp)
81130688:	e0fffd84 	addi	r3,fp,-10
8113068c:	180b883a 	mov	r5,r3
81130690:	1009883a 	mov	r4,r2
81130694:	112e34c0 	call	8112e34c <get_cluster_flag>
81130698:	10003126 	beq	r2,zero,81130760 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8113069c:	e0bffd8b 	ldhu	r2,-10(fp)
811306a0:	10bfffcc 	andi	r2,r2,65535
811306a4:	10fffe0c 	andi	r3,r2,65528
811306a8:	00bffe14 	movui	r2,65528
811306ac:	18802e1e 	bne	r3,r2,81130768 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
811306b0:	e0bffe04 	addi	r2,fp,-8
811306b4:	1009883a 	mov	r4,r2
811306b8:	11303900 	call	81130390 <find_first_empty_cluster>
811306bc:	10002326 	beq	r2,zero,8113074c <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
811306c0:	e0bff917 	ldw	r2,-28(fp)
811306c4:	e0fffe17 	ldw	r3,-8(fp)
811306c8:	18ffffcc 	andi	r3,r3,65535
811306cc:	18e0001c 	xori	r3,r3,32768
811306d0:	18e00004 	addi	r3,r3,-32768
811306d4:	01800044 	movi	r6,1
811306d8:	180b883a 	mov	r5,r3
811306dc:	1009883a 	mov	r4,r2
811306e0:	112e4080 	call	8112e408 <mark_cluster>
811306e4:	10001926 	beq	r2,zero,8113074c <find_first_empty_record_in_a_subdirectory+0x208>
811306e8:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
811306ec:	01800044 	movi	r6,1
811306f0:	017fffc4 	movi	r5,-1
811306f4:	1009883a 	mov	r4,r2
811306f8:	112e4080 	call	8112e408 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
811306fc:	10001326 	beq	r2,zero,8113074c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81130700:	e0bff917 	ldw	r2,-28(fp)
81130704:	e0fffe17 	ldw	r3,-8(fp)
81130708:	18ffffcc 	andi	r3,r3,65535
8113070c:	18e0001c 	xori	r3,r3,32768
81130710:	18e00004 	addi	r3,r3,-32768
81130714:	000d883a 	mov	r6,zero
81130718:	180b883a 	mov	r5,r3
8113071c:	1009883a 	mov	r4,r2
81130720:	112e4080 	call	8112e408 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81130724:	10000926 	beq	r2,zero,8113074c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81130728:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
8113072c:	000d883a 	mov	r6,zero
81130730:	017fffc4 	movi	r5,-1
81130734:	1009883a 	mov	r4,r2
81130738:	112e4080 	call	8112e408 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8113073c:	10000326 	beq	r2,zero,8113074c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
81130740:	112e2180 	call	8112e218 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81130744:	e0bffe17 	ldw	r2,-8(fp)
81130748:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
8113074c:	e0bffd8b 	ldhu	r2,-10(fp)
81130750:	10bfffcc 	andi	r2,r2,65535
81130754:	10bffe0c 	andi	r2,r2,65528
81130758:	e0bff915 	stw	r2,-28(fp)
8113075c:	00000206 	br	81130768 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
81130760:	00bfffc4 	movi	r2,-1
81130764:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
81130768:	e0bff917 	ldw	r2,-28(fp)
8113076c:	00fffdd4 	movui	r3,65527
81130770:	18800316 	blt	r3,r2,81130780 <find_first_empty_record_in_a_subdirectory+0x23c>
81130774:	e0bff817 	ldw	r2,-32(fp)
81130778:	10bfffe0 	cmpeqi	r2,r2,-1
8113077c:	103f7c1e 	bne	r2,zero,81130570 <__reset+0xfb110570>
    return result; 
81130780:	e0bff817 	ldw	r2,-32(fp)
}
81130784:	e037883a 	mov	sp,fp
81130788:	dfc00117 	ldw	ra,4(sp)
8113078c:	df000017 	ldw	fp,0(sp)
81130790:	dec00204 	addi	sp,sp,8
81130794:	f800283a 	ret

81130798 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
81130798:	defff904 	addi	sp,sp,-28
8113079c:	de00012e 	bgeu	sp,et,811307a4 <find_first_empty_record_in_root_directory+0xc>
811307a0:	003b68fa 	trap	3
811307a4:	dfc00615 	stw	ra,24(sp)
811307a8:	df000515 	stw	fp,20(sp)
811307ac:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
811307b0:	00a045b4 	movhi	r2,33046
811307b4:	10907c04 	addi	r2,r2,16880
811307b8:	1080050b 	ldhu	r2,20(r2)
811307bc:	10bfffcc 	andi	r2,r2,65535
811307c0:	1006917a 	slli	r3,r2,5
811307c4:	00a045b4 	movhi	r2,33046
811307c8:	10907c04 	addi	r2,r2,16880
811307cc:	1080030b 	ldhu	r2,12(r2)
811307d0:	10bfffcc 	andi	r2,r2,65535
811307d4:	1885283a 	div	r2,r3,r2
811307d8:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
811307dc:	00bfffc4 	movi	r2,-1
811307e0:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811307e4:	e03ffb15 	stw	zero,-20(fp)
811307e8:	00002d06 	br	811308a0 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811307ec:	00a045b4 	movhi	r2,33046
811307f0:	10907c04 	addi	r2,r2,16880
811307f4:	10c01317 	ldw	r3,76(r2)
811307f8:	e0bffb17 	ldw	r2,-20(fp)
811307fc:	1885883a 	add	r2,r3,r2
81130800:	1007883a 	mov	r3,r2
81130804:	d0a09f17 	ldw	r2,-32132(gp)
81130808:	100b883a 	mov	r5,r2
8113080c:	1809883a 	mov	r4,r3
81130810:	112e26c0 	call	8112e26c <Read_Sector_Data>
81130814:	10002626 	beq	r2,zero,811308b0 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81130818:	e03ffc15 	stw	zero,-16(fp)
8113081c:	00001a06 	br	81130888 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81130820:	e0bffc17 	ldw	r2,-16(fp)
81130824:	1004917a 	slli	r2,r2,5
81130828:	1007883a 	mov	r3,r2
8113082c:	d0a0a117 	ldw	r2,-32124(gp)
81130830:	10800a17 	ldw	r2,40(r2)
81130834:	1885883a 	add	r2,r3,r2
81130838:	10800023 	ldbuio	r2,0(r2)
8113083c:	10803fcc 	andi	r2,r2,255
81130840:	10803fcc 	andi	r2,r2,255
81130844:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
81130848:	e0bfff0b 	ldhu	r2,-4(fp)
8113084c:	10803960 	cmpeqi	r2,r2,229
81130850:	1000021e 	bne	r2,zero,8113085c <find_first_empty_record_in_root_directory+0xc4>
81130854:	e0bfff0b 	ldhu	r2,-4(fp)
81130858:	1000081e 	bne	r2,zero,8113087c <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
8113085c:	e0bffb17 	ldw	r2,-20(fp)
81130860:	1006913a 	slli	r3,r2,4
81130864:	e0bffc17 	ldw	r2,-16(fp)
81130868:	1885883a 	add	r2,r3,r2
8113086c:	1004943a 	slli	r2,r2,16
81130870:	e0bffe15 	stw	r2,-8(fp)
                    return result;
81130874:	e0bffe17 	ldw	r2,-8(fp)
81130878:	00000f06 	br	811308b8 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
8113087c:	e0bffc17 	ldw	r2,-16(fp)
81130880:	10800044 	addi	r2,r2,1
81130884:	e0bffc15 	stw	r2,-16(fp)
81130888:	e0bffc17 	ldw	r2,-16(fp)
8113088c:	10800410 	cmplti	r2,r2,16
81130890:	103fe31e 	bne	r2,zero,81130820 <__reset+0xfb110820>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81130894:	e0bffb17 	ldw	r2,-20(fp)
81130898:	10800044 	addi	r2,r2,1
8113089c:	e0bffb15 	stw	r2,-20(fp)
811308a0:	e0fffb17 	ldw	r3,-20(fp)
811308a4:	e0bffd17 	ldw	r2,-12(fp)
811308a8:	18bfd016 	blt	r3,r2,811307ec <__reset+0xfb1107ec>
811308ac:	00000106 	br	811308b4 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
811308b0:	0001883a 	nop
        }
    }
    return result;
811308b4:	e0bffe17 	ldw	r2,-8(fp)
}
811308b8:	e037883a 	mov	sp,fp
811308bc:	dfc00117 	ldw	ra,4(sp)
811308c0:	df000017 	ldw	fp,0(sp)
811308c4:	dec00204 	addi	sp,sp,8
811308c8:	f800283a 	ret

811308cc <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
811308cc:	defffa04 	addi	sp,sp,-24
811308d0:	de00012e 	bgeu	sp,et,811308d8 <convert_filename_to_name_extension+0xc>
811308d4:	003b68fa 	trap	3
811308d8:	df000515 	stw	fp,20(sp)
811308dc:	df000504 	addi	fp,sp,20
811308e0:	e13ffd15 	stw	r4,-12(fp)
811308e4:	e17ffe15 	stw	r5,-8(fp)
811308e8:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
811308ec:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
811308f0:	e03ffb15 	stw	zero,-20(fp)
811308f4:	00002506 	br	8113098c <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
811308f8:	e0bffc17 	ldw	r2,-16(fp)
811308fc:	e0fffd17 	ldw	r3,-12(fp)
81130900:	1885883a 	add	r2,r3,r2
81130904:	10800003 	ldbu	r2,0(r2)
81130908:	10803fcc 	andi	r2,r2,255
8113090c:	1080201c 	xori	r2,r2,128
81130910:	10bfe004 	addi	r2,r2,-128
81130914:	10800ba0 	cmpeqi	r2,r2,46
81130918:	1000141e 	bne	r2,zero,8113096c <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
8113091c:	e0bffb17 	ldw	r2,-20(fp)
81130920:	e0fffe17 	ldw	r3,-8(fp)
81130924:	1885883a 	add	r2,r3,r2
81130928:	e0fffc17 	ldw	r3,-16(fp)
8113092c:	e13ffd17 	ldw	r4,-12(fp)
81130930:	20c7883a 	add	r3,r4,r3
81130934:	18c00003 	ldbu	r3,0(r3)
81130938:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
8113093c:	e0bffc17 	ldw	r2,-16(fp)
81130940:	e0fffd17 	ldw	r3,-12(fp)
81130944:	1885883a 	add	r2,r3,r2
81130948:	10800003 	ldbu	r2,0(r2)
8113094c:	10803fcc 	andi	r2,r2,255
81130950:	1080201c 	xori	r2,r2,128
81130954:	10bfe004 	addi	r2,r2,-128
81130958:	10000926 	beq	r2,zero,81130980 <convert_filename_to_name_extension+0xb4>
8113095c:	e0bffc17 	ldw	r2,-16(fp)
81130960:	10800044 	addi	r2,r2,1
81130964:	e0bffc15 	stw	r2,-16(fp)
81130968:	00000506 	br	81130980 <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
8113096c:	e0bffb17 	ldw	r2,-20(fp)
81130970:	e0fffe17 	ldw	r3,-8(fp)
81130974:	1885883a 	add	r2,r3,r2
81130978:	00c00804 	movi	r3,32
8113097c:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
81130980:	e0bffb17 	ldw	r2,-20(fp)
81130984:	10800044 	addi	r2,r2,1
81130988:	e0bffb15 	stw	r2,-20(fp)
8113098c:	e0bffb17 	ldw	r2,-20(fp)
81130990:	10800210 	cmplti	r2,r2,8
81130994:	103fd81e 	bne	r2,zero,811308f8 <__reset+0xfb1108f8>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
81130998:	e0bffc17 	ldw	r2,-16(fp)
8113099c:	e0fffd17 	ldw	r3,-12(fp)
811309a0:	1885883a 	add	r2,r3,r2
811309a4:	10800003 	ldbu	r2,0(r2)
811309a8:	10803fcc 	andi	r2,r2,255
811309ac:	1080201c 	xori	r2,r2,128
811309b0:	10bfe004 	addi	r2,r2,-128
811309b4:	10800b98 	cmpnei	r2,r2,46
811309b8:	1000031e 	bne	r2,zero,811309c8 <convert_filename_to_name_extension+0xfc>
811309bc:	e0bffc17 	ldw	r2,-16(fp)
811309c0:	10800044 	addi	r2,r2,1
811309c4:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
811309c8:	e03ffb15 	stw	zero,-20(fp)
811309cc:	00001c06 	br	81130a40 <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
811309d0:	e0bffc17 	ldw	r2,-16(fp)
811309d4:	e0fffd17 	ldw	r3,-12(fp)
811309d8:	1885883a 	add	r2,r3,r2
811309dc:	10800003 	ldbu	r2,0(r2)
811309e0:	10803fcc 	andi	r2,r2,255
811309e4:	1080201c 	xori	r2,r2,128
811309e8:	10bfe004 	addi	r2,r2,-128
811309ec:	10000c26 	beq	r2,zero,81130a20 <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
811309f0:	e0bffb17 	ldw	r2,-20(fp)
811309f4:	e0ffff17 	ldw	r3,-4(fp)
811309f8:	1885883a 	add	r2,r3,r2
811309fc:	e0fffc17 	ldw	r3,-16(fp)
81130a00:	e13ffd17 	ldw	r4,-12(fp)
81130a04:	20c7883a 	add	r3,r4,r3
81130a08:	18c00003 	ldbu	r3,0(r3)
81130a0c:	10c00005 	stb	r3,0(r2)
            local++;
81130a10:	e0bffc17 	ldw	r2,-16(fp)
81130a14:	10800044 	addi	r2,r2,1
81130a18:	e0bffc15 	stw	r2,-16(fp)
81130a1c:	00000506 	br	81130a34 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
81130a20:	e0bffb17 	ldw	r2,-20(fp)
81130a24:	e0ffff17 	ldw	r3,-4(fp)
81130a28:	1885883a 	add	r2,r3,r2
81130a2c:	00c00804 	movi	r3,32
81130a30:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
81130a34:	e0bffb17 	ldw	r2,-20(fp)
81130a38:	10800044 	addi	r2,r2,1
81130a3c:	e0bffb15 	stw	r2,-20(fp)
81130a40:	e0bffb17 	ldw	r2,-20(fp)
81130a44:	108000d0 	cmplti	r2,r2,3
81130a48:	103fe11e 	bne	r2,zero,811309d0 <__reset+0xfb1109d0>
        {
            extension[counter] = ' ';
        }
    }

}
81130a4c:	0001883a 	nop
81130a50:	e037883a 	mov	sp,fp
81130a54:	df000017 	ldw	fp,0(sp)
81130a58:	dec00104 	addi	sp,sp,4
81130a5c:	f800283a 	ret

81130a60 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
81130a60:	defff504 	addi	sp,sp,-44
81130a64:	de00012e 	bgeu	sp,et,81130a6c <create_file+0xc>
81130a68:	003b68fa 	trap	3
81130a6c:	dfc00a15 	stw	ra,40(sp)
81130a70:	df000915 	stw	fp,36(sp)
81130a74:	df000904 	addi	fp,sp,36
81130a78:	e13ffd15 	stw	r4,-12(fp)
81130a7c:	e17ffe15 	stw	r5,-8(fp)
81130a80:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81130a84:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
81130a88:	e0bffc04 	addi	r2,fp,-16
81130a8c:	1009883a 	mov	r4,r2
81130a90:	11303900 	call	81130390 <find_first_empty_cluster>
81130a94:	1000a026 	beq	r2,zero,81130d18 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
81130a98:	e0bfff17 	ldw	r2,-4(fp)
81130a9c:	10800a17 	ldw	r2,40(r2)
81130aa0:	1000031e 	bne	r2,zero,81130ab0 <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
81130aa4:	11307980 	call	81130798 <find_first_empty_record_in_root_directory>
81130aa8:	e0bff815 	stw	r2,-32(fp)
81130aac:	00000606 	br	81130ac8 <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
81130ab0:	e0bfff17 	ldw	r2,-4(fp)
81130ab4:	1080058b 	ldhu	r2,22(r2)
81130ab8:	10bfffcc 	andi	r2,r2,65535
81130abc:	1009883a 	mov	r4,r2
81130ac0:	11305440 	call	81130544 <find_first_empty_record_in_a_subdirectory>
81130ac4:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81130ac8:	e0bff817 	ldw	r2,-32(fp)
81130acc:	10009216 	blt	r2,zero,81130d18 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
81130ad0:	e13ffd17 	ldw	r4,-12(fp)
81130ad4:	112f6700 	call	8112f670 <get_dir_divider_location>
81130ad8:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
81130adc:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
81130ae0:	00000b06 	br	81130b10 <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81130ae4:	e0fffa17 	ldw	r3,-24(fp)
81130ae8:	e0bff917 	ldw	r2,-28(fp)
81130aec:	1885883a 	add	r2,r3,r2
81130af0:	10800044 	addi	r2,r2,1
81130af4:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81130af8:	e0bffa17 	ldw	r2,-24(fp)
81130afc:	e0fffd17 	ldw	r3,-12(fp)
81130b00:	1885883a 	add	r2,r3,r2
81130b04:	1009883a 	mov	r4,r2
81130b08:	112f6700 	call	8112f670 <get_dir_divider_location>
81130b0c:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
81130b10:	e0bff917 	ldw	r2,-28(fp)
81130b14:	00bff316 	blt	zero,r2,81130ae4 <__reset+0xfb110ae4>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
81130b18:	e0bffa17 	ldw	r2,-24(fp)
81130b1c:	e0fffd17 	ldw	r3,-12(fp)
81130b20:	1887883a 	add	r3,r3,r2
81130b24:	e13ffe17 	ldw	r4,-8(fp)
81130b28:	e0bffe17 	ldw	r2,-8(fp)
81130b2c:	10800204 	addi	r2,r2,8
81130b30:	100d883a 	mov	r6,r2
81130b34:	200b883a 	mov	r5,r4
81130b38:	1809883a 	mov	r4,r3
81130b3c:	11308cc0 	call	811308cc <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
81130b40:	e0bffe17 	ldw	r2,-8(fp)
81130b44:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
81130b48:	e0bffe17 	ldw	r2,-8(fp)
81130b4c:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
81130b50:	e0bffe17 	ldw	r2,-8(fp)
81130b54:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
81130b58:	e0bffe17 	ldw	r2,-8(fp)
81130b5c:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
81130b60:	e0bffe17 	ldw	r2,-8(fp)
81130b64:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
81130b68:	e0bffe17 	ldw	r2,-8(fp)
81130b6c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
81130b70:	e0bffc17 	ldw	r2,-16(fp)
81130b74:	1007883a 	mov	r3,r2
81130b78:	e0bffe17 	ldw	r2,-8(fp)
81130b7c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
81130b80:	e0bffe17 	ldw	r2,-8(fp)
81130b84:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
81130b88:	e0fffc17 	ldw	r3,-16(fp)
81130b8c:	e0bffe17 	ldw	r2,-8(fp)
81130b90:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81130b94:	e0bffe17 	ldw	r2,-8(fp)
81130b98:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
81130b9c:	e0bffe17 	ldw	r2,-8(fp)
81130ba0:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
81130ba4:	e0bff817 	ldw	r2,-32(fp)
81130ba8:	10ffffcc 	andi	r3,r2,65535
81130bac:	e0bffe17 	ldw	r2,-8(fp)
81130bb0:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
81130bb4:	e0bff817 	ldw	r2,-32(fp)
81130bb8:	1004d43a 	srli	r2,r2,16
81130bbc:	1000010e 	bge	r2,zero,81130bc4 <create_file+0x164>
81130bc0:	108003c4 	addi	r2,r2,15
81130bc4:	1005d13a 	srai	r2,r2,4
81130bc8:	1007883a 	mov	r3,r2
81130bcc:	e0bffe17 	ldw	r2,-8(fp)
81130bd0:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81130bd4:	e0bff817 	ldw	r2,-32(fp)
81130bd8:	1004d43a 	srli	r2,r2,16
81130bdc:	1007883a 	mov	r3,r2
81130be0:	00a00034 	movhi	r2,32768
81130be4:	108003c4 	addi	r2,r2,15
81130be8:	1884703a 	and	r2,r3,r2
81130bec:	1000040e 	bge	r2,zero,81130c00 <create_file+0x1a0>
81130bf0:	10bfffc4 	addi	r2,r2,-1
81130bf4:	00fffc04 	movi	r3,-16
81130bf8:	10c4b03a 	or	r2,r2,r3
81130bfc:	10800044 	addi	r2,r2,1
81130c00:	1004917a 	slli	r2,r2,5
81130c04:	1007883a 	mov	r3,r2
81130c08:	e0bffe17 	ldw	r2,-8(fp)
81130c0c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
81130c10:	e0bfff17 	ldw	r2,-4(fp)
81130c14:	1080058b 	ldhu	r2,22(r2)
81130c18:	10ffffcc 	andi	r3,r2,65535
81130c1c:	e0bffe17 	ldw	r2,-8(fp)
81130c20:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
81130c24:	e0bffe17 	ldw	r2,-8(fp)
81130c28:	00c00044 	movi	r3,1
81130c2c:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
81130c30:	e0bffe17 	ldw	r2,-8(fp)
81130c34:	00c00044 	movi	r3,1
81130c38:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81130c3c:	e0bffe17 	ldw	r2,-8(fp)
81130c40:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81130c44:	1000071e 	bne	r2,zero,81130c64 <create_file+0x204>
81130c48:	00a045b4 	movhi	r2,33046
81130c4c:	10907c04 	addi	r2,r2,16880
81130c50:	10c01317 	ldw	r3,76(r2)
81130c54:	e0bffe17 	ldw	r2,-8(fp)
81130c58:	10800b17 	ldw	r2,44(r2)
81130c5c:	1885883a 	add	r2,r3,r2
81130c60:	00000f06 	br	81130ca0 <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
81130c64:	00a045b4 	movhi	r2,33046
81130c68:	10907c04 	addi	r2,r2,16880
81130c6c:	10c01417 	ldw	r3,80(r2)
81130c70:	e0bffe17 	ldw	r2,-8(fp)
81130c74:	10800a17 	ldw	r2,40(r2)
81130c78:	113fff84 	addi	r4,r2,-2
81130c7c:	00a045b4 	movhi	r2,33046
81130c80:	10907c04 	addi	r2,r2,16880
81130c84:	10800383 	ldbu	r2,14(r2)
81130c88:	10803fcc 	andi	r2,r2,255
81130c8c:	2085383a 	mul	r2,r4,r2
81130c90:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81130c94:	e0bffe17 	ldw	r2,-8(fp)
81130c98:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81130c9c:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
81130ca0:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
81130ca4:	e0bffb17 	ldw	r2,-20(fp)
81130ca8:	d0e09f17 	ldw	r3,-32132(gp)
81130cac:	180b883a 	mov	r5,r3
81130cb0:	1009883a 	mov	r4,r2
81130cb4:	112e26c0 	call	8112e26c <Read_Sector_Data>
81130cb8:	10001726 	beq	r2,zero,81130d18 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
81130cbc:	e0bffe17 	ldw	r2,-8(fp)
81130cc0:	10800c0b 	ldhu	r2,48(r2)
81130cc4:	10bfffcc 	andi	r2,r2,65535
81130cc8:	10a0001c 	xori	r2,r2,32768
81130ccc:	10a00004 	addi	r2,r2,-32768
81130cd0:	e17ffe17 	ldw	r5,-8(fp)
81130cd4:	1009883a 	mov	r4,r2
81130cd8:	112e9200 	call	8112e920 <Write_File_Record_At_Offset>
81130cdc:	10000e26 	beq	r2,zero,81130d18 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
81130ce0:	112e2180 	call	8112e218 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81130ce4:	e0bffc17 	ldw	r2,-16(fp)
81130ce8:	01800044 	movi	r6,1
81130cec:	017fffc4 	movi	r5,-1
81130cf0:	1009883a 	mov	r4,r2
81130cf4:	112e4080 	call	8112e408 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
81130cf8:	e0bffc17 	ldw	r2,-16(fp)
81130cfc:	000d883a 	mov	r6,zero
81130d00:	017fffc4 	movi	r5,-1
81130d04:	1009883a 	mov	r4,r2
81130d08:	112e4080 	call	8112e408 <mark_cluster>
81130d0c:	10000226 	beq	r2,zero,81130d18 <create_file+0x2b8>
                    {
                        result = true;
81130d10:	00800044 	movi	r2,1
81130d14:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
81130d18:	e0bff717 	ldw	r2,-36(fp)
}
81130d1c:	e037883a 	mov	sp,fp
81130d20:	dfc00117 	ldw	ra,4(sp)
81130d24:	df000017 	ldw	fp,0(sp)
81130d28:	dec00204 	addi	sp,sp,8
81130d2c:	f800283a 	ret

81130d30 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
81130d30:	defffb04 	addi	sp,sp,-20
81130d34:	de00012e 	bgeu	sp,et,81130d3c <copy_file_record_name_to_string+0xc>
81130d38:	003b68fa 	trap	3
81130d3c:	df000415 	stw	fp,16(sp)
81130d40:	df000404 	addi	fp,sp,16
81130d44:	e13ffe15 	stw	r4,-8(fp)
81130d48:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
81130d4c:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81130d50:	e03ffc15 	stw	zero,-16(fp)
81130d54:	00001506 	br	81130dac <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
81130d58:	e0fffe17 	ldw	r3,-8(fp)
81130d5c:	e0bffc17 	ldw	r2,-16(fp)
81130d60:	1885883a 	add	r2,r3,r2
81130d64:	10800003 	ldbu	r2,0(r2)
81130d68:	10803fcc 	andi	r2,r2,255
81130d6c:	10800820 	cmpeqi	r2,r2,32
81130d70:	10000b1e 	bne	r2,zero,81130da0 <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
81130d74:	e0bffd17 	ldw	r2,-12(fp)
81130d78:	e0ffff17 	ldw	r3,-4(fp)
81130d7c:	1885883a 	add	r2,r3,r2
81130d80:	e13ffe17 	ldw	r4,-8(fp)
81130d84:	e0fffc17 	ldw	r3,-16(fp)
81130d88:	20c7883a 	add	r3,r4,r3
81130d8c:	18c00003 	ldbu	r3,0(r3)
81130d90:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81130d94:	e0bffd17 	ldw	r2,-12(fp)
81130d98:	10800044 	addi	r2,r2,1
81130d9c:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
81130da0:	e0bffc17 	ldw	r2,-16(fp)
81130da4:	10800044 	addi	r2,r2,1
81130da8:	e0bffc15 	stw	r2,-16(fp)
81130dac:	e0bffc17 	ldw	r2,-16(fp)
81130db0:	10800210 	cmplti	r2,r2,8
81130db4:	103fe81e 	bne	r2,zero,81130d58 <__reset+0xfb110d58>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
81130db8:	e0bffe17 	ldw	r2,-8(fp)
81130dbc:	10800203 	ldbu	r2,8(r2)
81130dc0:	10803fcc 	andi	r2,r2,255
81130dc4:	10800820 	cmpeqi	r2,r2,32
81130dc8:	1000241e 	bne	r2,zero,81130e5c <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
81130dcc:	e0bffd17 	ldw	r2,-12(fp)
81130dd0:	e0ffff17 	ldw	r3,-4(fp)
81130dd4:	1885883a 	add	r2,r3,r2
81130dd8:	00c00b84 	movi	r3,46
81130ddc:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
81130de0:	e0bffd17 	ldw	r2,-12(fp)
81130de4:	10800044 	addi	r2,r2,1
81130de8:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
81130dec:	e03ffc15 	stw	zero,-16(fp)
81130df0:	00001706 	br	81130e50 <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81130df4:	e0fffe17 	ldw	r3,-8(fp)
81130df8:	e0bffc17 	ldw	r2,-16(fp)
81130dfc:	1885883a 	add	r2,r3,r2
81130e00:	10800204 	addi	r2,r2,8
81130e04:	10800003 	ldbu	r2,0(r2)
81130e08:	10803fcc 	andi	r2,r2,255
81130e0c:	10800820 	cmpeqi	r2,r2,32
81130e10:	10000c1e 	bne	r2,zero,81130e44 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
81130e14:	e0bffd17 	ldw	r2,-12(fp)
81130e18:	e0ffff17 	ldw	r3,-4(fp)
81130e1c:	1885883a 	add	r2,r3,r2
81130e20:	e13ffe17 	ldw	r4,-8(fp)
81130e24:	e0fffc17 	ldw	r3,-16(fp)
81130e28:	20c7883a 	add	r3,r4,r3
81130e2c:	18c00204 	addi	r3,r3,8
81130e30:	18c00003 	ldbu	r3,0(r3)
81130e34:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
81130e38:	e0bffd17 	ldw	r2,-12(fp)
81130e3c:	10800044 	addi	r2,r2,1
81130e40:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
81130e44:	e0bffc17 	ldw	r2,-16(fp)
81130e48:	10800044 	addi	r2,r2,1
81130e4c:	e0bffc15 	stw	r2,-16(fp)
81130e50:	e0bffc17 	ldw	r2,-16(fp)
81130e54:	108000d0 	cmplti	r2,r2,3
81130e58:	103fe61e 	bne	r2,zero,81130df4 <__reset+0xfb110df4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
81130e5c:	e0bffd17 	ldw	r2,-12(fp)
81130e60:	e0ffff17 	ldw	r3,-4(fp)
81130e64:	1885883a 	add	r2,r3,r2
81130e68:	10000005 	stb	zero,0(r2)
}
81130e6c:	0001883a 	nop
81130e70:	e037883a 	mov	sp,fp
81130e74:	df000017 	ldw	fp,0(sp)
81130e78:	dec00104 	addi	sp,sp,4
81130e7c:	f800283a 	ret

81130e80 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
81130e80:	defffc04 	addi	sp,sp,-16
81130e84:	de00012e 	bgeu	sp,et,81130e8c <alt_up_sd_card_open_dev+0xc>
81130e88:	003b68fa 	trap	3
81130e8c:	dfc00315 	stw	ra,12(sp)
81130e90:	df000215 	stw	fp,8(sp)
81130e94:	df000204 	addi	fp,sp,8
81130e98:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
81130e9c:	d1601304 	addi	r5,gp,-32692
81130ea0:	e13fff17 	ldw	r4,-4(fp)
81130ea4:	113730c0 	call	8113730c <alt_find_dev>
81130ea8:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
81130eac:	e0bffe17 	ldw	r2,-8(fp)
81130eb0:	10001e26 	beq	r2,zero,81130f2c <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81130eb4:	e0bffe17 	ldw	r2,-8(fp)
81130eb8:	10800a17 	ldw	r2,40(r2)
81130ebc:	10808d04 	addi	r2,r2,564
81130ec0:	d0a09915 	stw	r2,-32156(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81130ec4:	e0bffe17 	ldw	r2,-8(fp)
81130ec8:	10800a17 	ldw	r2,40(r2)
81130ecc:	10808904 	addi	r2,r2,548
81130ed0:	d0a09a15 	stw	r2,-32152(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81130ed4:	e0bffe17 	ldw	r2,-8(fp)
81130ed8:	10800a17 	ldw	r2,40(r2)
81130edc:	10808404 	addi	r2,r2,528
81130ee0:	d0a09b15 	stw	r2,-32148(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81130ee4:	e0bffe17 	ldw	r2,-8(fp)
81130ee8:	10800a17 	ldw	r2,40(r2)
81130eec:	10808c04 	addi	r2,r2,560
81130ef0:	d0a09c15 	stw	r2,-32144(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81130ef4:	e0bffe17 	ldw	r2,-8(fp)
81130ef8:	10800a17 	ldw	r2,40(r2)
81130efc:	10808b04 	addi	r2,r2,556
81130f00:	d0a09d15 	stw	r2,-32140(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
81130f04:	e0bffe17 	ldw	r2,-8(fp)
81130f08:	10800a17 	ldw	r2,40(r2)
81130f0c:	d0a09e15 	stw	r2,-32136(gp)
		device_pointer = dev;
81130f10:	e0bffe17 	ldw	r2,-8(fp)
81130f14:	d0a0a115 	stw	r2,-32124(gp)
		initialized = false;
81130f18:	d0209715 	stw	zero,-32164(gp)
		is_sd_card_formated_as_FAT16 = false;
81130f1c:	d0209815 	stw	zero,-32160(gp)
		search_data.valid = false;
81130f20:	00a045b4 	movhi	r2,33046
81130f24:	10907704 	addi	r2,r2,16860
81130f28:	10000415 	stw	zero,16(r2)
	}
	return dev;
81130f2c:	e0bffe17 	ldw	r2,-8(fp)
}
81130f30:	e037883a 	mov	sp,fp
81130f34:	dfc00117 	ldw	ra,4(sp)
81130f38:	df000017 	ldw	fp,0(sp)
81130f3c:	dec00204 	addi	sp,sp,8
81130f40:	f800283a 	ret

81130f44 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
81130f44:	defffd04 	addi	sp,sp,-12
81130f48:	de00012e 	bgeu	sp,et,81130f50 <alt_up_sd_card_is_Present+0xc>
81130f4c:	003b68fa 	trap	3
81130f50:	df000215 	stw	fp,8(sp)
81130f54:	df000204 	addi	fp,sp,8
    bool result = false;
81130f58:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
81130f5c:	d0a0a117 	ldw	r2,-32124(gp)
81130f60:	10000826 	beq	r2,zero,81130f84 <alt_up_sd_card_is_Present+0x40>
81130f64:	d0a09917 	ldw	r2,-32156(gp)
81130f68:	1080002b 	ldhuio	r2,0(r2)
81130f6c:	10bfffcc 	andi	r2,r2,65535
81130f70:	1080008c 	andi	r2,r2,2
81130f74:	10000326 	beq	r2,zero,81130f84 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
81130f78:	00800044 	movi	r2,1
81130f7c:	e0bffe15 	stw	r2,-8(fp)
81130f80:	00001e06 	br	81130ffc <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
81130f84:	d0a09717 	ldw	r2,-32164(gp)
81130f88:	10800058 	cmpnei	r2,r2,1
81130f8c:	10001b1e 	bne	r2,zero,81130ffc <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
81130f90:	d0209715 	stw	zero,-32164(gp)
		search_data.valid = false;
81130f94:	00a045b4 	movhi	r2,33046
81130f98:	10907704 	addi	r2,r2,16860
81130f9c:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
81130fa0:	d0209815 	stw	zero,-32160(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81130fa4:	e03fff15 	stw	zero,-4(fp)
81130fa8:	00001106 	br	81130ff0 <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
81130fac:	00a045b4 	movhi	r2,33046
81130fb0:	10909104 	addi	r2,r2,16964
81130fb4:	e0ffff17 	ldw	r3,-4(fp)
81130fb8:	180691ba 	slli	r3,r3,6
81130fbc:	10c5883a 	add	r2,r2,r3
81130fc0:	10800f04 	addi	r2,r2,60
81130fc4:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81130fc8:	00a045b4 	movhi	r2,33046
81130fcc:	10909104 	addi	r2,r2,16964
81130fd0:	e0ffff17 	ldw	r3,-4(fp)
81130fd4:	180691ba 	slli	r3,r3,6
81130fd8:	10c5883a 	add	r2,r2,r3
81130fdc:	10800e04 	addi	r2,r2,56
81130fe0:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81130fe4:	e0bfff17 	ldw	r2,-4(fp)
81130fe8:	10800044 	addi	r2,r2,1
81130fec:	e0bfff15 	stw	r2,-4(fp)
81130ff0:	e0bfff17 	ldw	r2,-4(fp)
81130ff4:	10800510 	cmplti	r2,r2,20
81130ff8:	103fec1e 	bne	r2,zero,81130fac <__reset+0xfb110fac>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
81130ffc:	e0bffe17 	ldw	r2,-8(fp)
}
81131000:	e037883a 	mov	sp,fp
81131004:	df000017 	ldw	fp,0(sp)
81131008:	dec00104 	addi	sp,sp,4
8113100c:	f800283a 	ret

81131010 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
81131010:	defffd04 	addi	sp,sp,-12
81131014:	de00012e 	bgeu	sp,et,8113101c <alt_up_sd_card_is_FAT16+0xc>
81131018:	003b68fa 	trap	3
8113101c:	dfc00215 	stw	ra,8(sp)
81131020:	df000115 	stw	fp,4(sp)
81131024:	df000104 	addi	fp,sp,4
	bool result = false;
81131028:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
8113102c:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
81131030:	10000c26 	beq	r2,zero,81131064 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
81131034:	d0a09717 	ldw	r2,-32164(gp)
81131038:	1000071e 	bne	r2,zero,81131058 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
8113103c:	112f23c0 	call	8112f23c <Look_for_FAT16>
81131040:	d0a09815 	stw	r2,-32160(gp)
			initialized = is_sd_card_formated_as_FAT16;
81131044:	d0a09817 	ldw	r2,-32160(gp)
81131048:	d0a09715 	stw	r2,-32164(gp)
			search_data.valid = false;
8113104c:	00a045b4 	movhi	r2,33046
81131050:	10907704 	addi	r2,r2,16860
81131054:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
81131058:	d0a09817 	ldw	r2,-32160(gp)
8113105c:	e0bfff15 	stw	r2,-4(fp)
81131060:	00000206 	br	8113106c <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
81131064:	d0209715 	stw	zero,-32164(gp)
		is_sd_card_formated_as_FAT16 = false;
81131068:	d0209815 	stw	zero,-32160(gp)
	}

	return result;
8113106c:	e0bfff17 	ldw	r2,-4(fp)
}
81131070:	e037883a 	mov	sp,fp
81131074:	dfc00117 	ldw	ra,4(sp)
81131078:	df000017 	ldw	fp,0(sp)
8113107c:	dec00204 	addi	sp,sp,8
81131080:	f800283a 	ret

81131084 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
81131084:	deffea04 	addi	sp,sp,-88
81131088:	de00012e 	bgeu	sp,et,81131090 <alt_up_sd_card_find_first+0xc>
8113108c:	003b68fa 	trap	3
81131090:	dfc01515 	stw	ra,84(sp)
81131094:	df001415 	stw	fp,80(sp)
81131098:	df001404 	addi	fp,sp,80
8113109c:	e13ffe15 	stw	r4,-8(fp)
811310a0:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
811310a4:	00800084 	movi	r2,2
811310a8:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
811310ac:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
811310b0:	10002426 	beq	r2,zero,81131144 <alt_up_sd_card_find_first+0xc0>
811310b4:	d0a09817 	ldw	r2,-32160(gp)
811310b8:	10002226 	beq	r2,zero,81131144 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
811310bc:	e0ffee04 	addi	r3,fp,-72
811310c0:	e0bfed04 	addi	r2,fp,-76
811310c4:	180d883a 	mov	r6,r3
811310c8:	100b883a 	mov	r5,r2
811310cc:	e13ffe17 	ldw	r4,-8(fp)
811310d0:	112f9d40 	call	8112f9d4 <get_home_directory_cluster_for_file>
811310d4:	10001926 	beq	r2,zero,8113113c <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
811310d8:	e0bfed17 	ldw	r2,-76(fp)
811310dc:	1007883a 	mov	r3,r2
811310e0:	00a045b4 	movhi	r2,33046
811310e4:	10907704 	addi	r2,r2,16860
811310e8:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
811310ec:	e0bfed17 	ldw	r2,-76(fp)
811310f0:	1007883a 	mov	r3,r2
811310f4:	00a045b4 	movhi	r2,33046
811310f8:	10907704 	addi	r2,r2,16860
811310fc:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
81131100:	00a045b4 	movhi	r2,33046
81131104:	10907704 	addi	r2,r2,16860
81131108:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
8113110c:	00a045b4 	movhi	r2,33046
81131110:	10907704 	addi	r2,r2,16860
81131114:	00ffffc4 	movi	r3,-1
81131118:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
8113111c:	00a045b4 	movhi	r2,33046
81131120:	10907704 	addi	r2,r2,16860
81131124:	00c00044 	movi	r3,1
81131128:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
8113112c:	e13fff17 	ldw	r4,-4(fp)
81131130:	113115c0 	call	8113115c <alt_up_sd_card_find_next>
81131134:	e0bfec0d 	sth	r2,-80(fp)
81131138:	00000206 	br	81131144 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
8113113c:	00800044 	movi	r2,1
81131140:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
81131144:	e0bfec0b 	ldhu	r2,-80(fp)
}
81131148:	e037883a 	mov	sp,fp
8113114c:	dfc00117 	ldw	ra,4(sp)
81131150:	df000017 	ldw	fp,0(sp)
81131154:	dec00204 	addi	sp,sp,8
81131158:	f800283a 	ret

8113115c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
8113115c:	deffe404 	addi	sp,sp,-112
81131160:	de00012e 	bgeu	sp,et,81131168 <alt_up_sd_card_find_next+0xc>
81131164:	003b68fa 	trap	3
81131168:	dfc01b15 	stw	ra,108(sp)
8113116c:	df001a15 	stw	fp,104(sp)
81131170:	df001a04 	addi	fp,sp,104
81131174:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
81131178:	00800084 	movi	r2,2
8113117c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81131180:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
81131184:	1000df26 	beq	r2,zero,81131504 <alt_up_sd_card_find_next+0x3a8>
81131188:	d0a09817 	ldw	r2,-32160(gp)
8113118c:	1000dd26 	beq	r2,zero,81131504 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
81131190:	00a045b4 	movhi	r2,33046
81131194:	10907704 	addi	r2,r2,16860
81131198:	10800417 	ldw	r2,16(r2)
8113119c:	1000d726 	beq	r2,zero,811314fc <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
811311a0:	00a045b4 	movhi	r2,33046
811311a4:	10907704 	addi	r2,r2,16860
811311a8:	10800117 	ldw	r2,4(r2)
811311ac:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
811311b0:	e0bfe717 	ldw	r2,-100(fp)
811311b4:	1000561e 	bne	r2,zero,81131310 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
811311b8:	00a045b4 	movhi	r2,33046
811311bc:	10907c04 	addi	r2,r2,16880
811311c0:	1080050b 	ldhu	r2,20(r2)
811311c4:	10bfffcc 	andi	r2,r2,65535
811311c8:	1006917a 	slli	r3,r2,5
811311cc:	00a045b4 	movhi	r2,33046
811311d0:	10907c04 	addi	r2,r2,16880
811311d4:	1080030b 	ldhu	r2,12(r2)
811311d8:	10bfffcc 	andi	r2,r2,65535
811311dc:	1885283a 	div	r2,r3,r2
811311e0:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
811311e4:	00a045b4 	movhi	r2,33046
811311e8:	10907704 	addi	r2,r2,16860
811311ec:	10800217 	ldw	r2,8(r2)
811311f0:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
811311f4:	00a045b4 	movhi	r2,33046
811311f8:	10907704 	addi	r2,r2,16860
811311fc:	1080030b 	ldhu	r2,12(r2)
81131200:	10bfffcc 	andi	r2,r2,65535
81131204:	10a0001c 	xori	r2,r2,32768
81131208:	10a00004 	addi	r2,r2,-32768
8113120c:	10800044 	addi	r2,r2,1
81131210:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81131214:	00003606 	br	811312f0 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81131218:	00a045b4 	movhi	r2,33046
8113121c:	10907c04 	addi	r2,r2,16880
81131220:	10c01317 	ldw	r3,76(r2)
81131224:	e0bfe817 	ldw	r2,-96(fp)
81131228:	1885883a 	add	r2,r3,r2
8113122c:	1007883a 	mov	r3,r2
81131230:	d0a09f17 	ldw	r2,-32132(gp)
81131234:	100b883a 	mov	r5,r2
81131238:	1809883a 	mov	r4,r3
8113123c:	112e26c0 	call	8112e26c <Read_Sector_Data>
81131240:	10002f26 	beq	r2,zero,81131300 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81131244:	00002306 	br	811312d4 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
81131248:	e0bfe917 	ldw	r2,-92(fp)
8113124c:	1004917a 	slli	r2,r2,5
81131250:	e13fe817 	ldw	r4,-96(fp)
81131254:	e0ffef04 	addi	r3,fp,-68
81131258:	200f883a 	mov	r7,r4
8113125c:	000d883a 	mov	r6,zero
81131260:	180b883a 	mov	r5,r3
81131264:	1009883a 	mov	r4,r2
81131268:	112e69c0 	call	8112e69c <Read_File_Record_At_Offset>
8113126c:	10001626 	beq	r2,zero,811312c8 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81131270:	e0bfef03 	ldbu	r2,-68(fp)
81131274:	10803fcc 	andi	r2,r2,255
81131278:	10001326 	beq	r2,zero,811312c8 <alt_up_sd_card_find_next+0x16c>
8113127c:	e0bfef03 	ldbu	r2,-68(fp)
81131280:	10803fcc 	andi	r2,r2,255
81131284:	10803960 	cmpeqi	r2,r2,229
81131288:	10000f1e 	bne	r2,zero,811312c8 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
8113128c:	e0bfe917 	ldw	r2,-92(fp)
81131290:	1007883a 	mov	r3,r2
81131294:	00a045b4 	movhi	r2,33046
81131298:	10907704 	addi	r2,r2,16860
8113129c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
811312a0:	e0ffe817 	ldw	r3,-96(fp)
811312a4:	00a045b4 	movhi	r2,33046
811312a8:	10907704 	addi	r2,r2,16860
811312ac:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
811312b0:	e0bfef04 	addi	r2,fp,-68
811312b4:	e17fff17 	ldw	r5,-4(fp)
811312b8:	1009883a 	mov	r4,r2
811312bc:	1130d300 	call	81130d30 <copy_file_record_name_to_string>
									return 0;
811312c0:	0005883a 	mov	r2,zero
811312c4:	00009006 	br	81131508 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
811312c8:	e0bfe917 	ldw	r2,-92(fp)
811312cc:	10800044 	addi	r2,r2,1
811312d0:	e0bfe915 	stw	r2,-92(fp)
811312d4:	e0bfe917 	ldw	r2,-92(fp)
811312d8:	10800410 	cmplti	r2,r2,16
811312dc:	103fda1e 	bne	r2,zero,81131248 <__reset+0xfb111248>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
811312e0:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
811312e4:	e0bfe817 	ldw	r2,-96(fp)
811312e8:	10800044 	addi	r2,r2,1
811312ec:	e0bfe815 	stw	r2,-96(fp)
811312f0:	e0ffe817 	ldw	r3,-96(fp)
811312f4:	e0bfec17 	ldw	r2,-80(fp)
811312f8:	18bfc716 	blt	r3,r2,81131218 <__reset+0xfb111218>
811312fc:	00000106 	br	81131304 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
81131300:	0001883a 	nop
					}
				}
				result = -1;
81131304:	00bfffc4 	movi	r2,-1
81131308:	e0bfe60d 	sth	r2,-104(fp)
8113130c:	00007d06 	br	81131504 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
81131310:	00a045b4 	movhi	r2,33046
81131314:	10907704 	addi	r2,r2,16860
81131318:	1080030b 	ldhu	r2,12(r2)
8113131c:	10bfffcc 	andi	r2,r2,65535
81131320:	10a0001c 	xori	r2,r2,32768
81131324:	10a00004 	addi	r2,r2,-32768
81131328:	10800044 	addi	r2,r2,1
8113132c:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81131330:	e0bfe717 	ldw	r2,-100(fp)
81131334:	10ffff84 	addi	r3,r2,-2
81131338:	00a045b4 	movhi	r2,33046
8113133c:	10907c04 	addi	r2,r2,16880
81131340:	10800383 	ldbu	r2,14(r2)
81131344:	10803fcc 	andi	r2,r2,255
81131348:	1885383a 	mul	r2,r3,r2
8113134c:	1007883a 	mov	r3,r2
81131350:	00a045b4 	movhi	r2,33046
81131354:	10907c04 	addi	r2,r2,16880
81131358:	10801417 	ldw	r2,80(r2)
8113135c:	1885883a 	add	r2,r3,r2
81131360:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
81131364:	00a045b4 	movhi	r2,33046
81131368:	10907704 	addi	r2,r2,16860
8113136c:	10800217 	ldw	r2,8(r2)
81131370:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81131374:	00003806 	br	81131458 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81131378:	e0ffeb17 	ldw	r3,-84(fp)
8113137c:	e0bfed17 	ldw	r2,-76(fp)
81131380:	1885883a 	add	r2,r3,r2
81131384:	d0e09f17 	ldw	r3,-32132(gp)
81131388:	180b883a 	mov	r5,r3
8113138c:	1009883a 	mov	r4,r2
81131390:	112e26c0 	call	8112e26c <Read_Sector_Data>
81131394:	10003726 	beq	r2,zero,81131474 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
81131398:	00002806 	br	8113143c <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
8113139c:	e0bfea17 	ldw	r2,-88(fp)
811313a0:	1004917a 	slli	r2,r2,5
811313a4:	e13fe717 	ldw	r4,-100(fp)
811313a8:	e17feb17 	ldw	r5,-84(fp)
811313ac:	e0ffef04 	addi	r3,fp,-68
811313b0:	280f883a 	mov	r7,r5
811313b4:	200d883a 	mov	r6,r4
811313b8:	180b883a 	mov	r5,r3
811313bc:	1009883a 	mov	r4,r2
811313c0:	112e69c0 	call	8112e69c <Read_File_Record_At_Offset>
811313c4:	10001a26 	beq	r2,zero,81131430 <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
811313c8:	e0bfef03 	ldbu	r2,-68(fp)
811313cc:	10803fcc 	andi	r2,r2,255
811313d0:	10001726 	beq	r2,zero,81131430 <alt_up_sd_card_find_next+0x2d4>
811313d4:	e0bfef03 	ldbu	r2,-68(fp)
811313d8:	10803fcc 	andi	r2,r2,255
811313dc:	10803960 	cmpeqi	r2,r2,229
811313e0:	1000131e 	bne	r2,zero,81131430 <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
811313e4:	e0ffe717 	ldw	r3,-100(fp)
811313e8:	00a045b4 	movhi	r2,33046
811313ec:	10907704 	addi	r2,r2,16860
811313f0:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
811313f4:	e0bfea17 	ldw	r2,-88(fp)
811313f8:	1007883a 	mov	r3,r2
811313fc:	00a045b4 	movhi	r2,33046
81131400:	10907704 	addi	r2,r2,16860
81131404:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
81131408:	e0ffeb17 	ldw	r3,-84(fp)
8113140c:	00a045b4 	movhi	r2,33046
81131410:	10907704 	addi	r2,r2,16860
81131414:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
81131418:	e0bfef04 	addi	r2,fp,-68
8113141c:	e17fff17 	ldw	r5,-4(fp)
81131420:	1009883a 	mov	r4,r2
81131424:	1130d300 	call	81130d30 <copy_file_record_name_to_string>
										return 0;
81131428:	0005883a 	mov	r2,zero
8113142c:	00003606 	br	81131508 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
81131430:	e0bfea17 	ldw	r2,-88(fp)
81131434:	10800044 	addi	r2,r2,1
81131438:	e0bfea15 	stw	r2,-88(fp)
8113143c:	e0bfea17 	ldw	r2,-88(fp)
81131440:	10800410 	cmplti	r2,r2,16
81131444:	103fd51e 	bne	r2,zero,8113139c <__reset+0xfb11139c>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
81131448:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113144c:	e0bfeb17 	ldw	r2,-84(fp)
81131450:	10800044 	addi	r2,r2,1
81131454:	e0bfeb15 	stw	r2,-84(fp)
81131458:	00a045b4 	movhi	r2,33046
8113145c:	10907c04 	addi	r2,r2,16880
81131460:	10800383 	ldbu	r2,14(r2)
81131464:	10803fcc 	andi	r2,r2,255
81131468:	e0ffeb17 	ldw	r3,-84(fp)
8113146c:	18bfc216 	blt	r3,r2,81131378 <__reset+0xfb111378>
81131470:	00000106 	br	81131478 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
81131474:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
81131478:	00a045b4 	movhi	r2,33046
8113147c:	10907c04 	addi	r2,r2,16880
81131480:	10800383 	ldbu	r2,14(r2)
81131484:	10803fcc 	andi	r2,r2,255
81131488:	e0ffeb17 	ldw	r3,-84(fp)
8113148c:	18801716 	blt	r3,r2,811314ec <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
81131490:	e0bfe717 	ldw	r2,-100(fp)
81131494:	e0ffee04 	addi	r3,fp,-72
81131498:	180b883a 	mov	r5,r3
8113149c:	1009883a 	mov	r4,r2
811314a0:	112e34c0 	call	8112e34c <get_cluster_flag>
811314a4:	10000f26 	beq	r2,zero,811314e4 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811314a8:	e0bfee0b 	ldhu	r2,-72(fp)
811314ac:	10bfffcc 	andi	r2,r2,65535
811314b0:	10fffe0c 	andi	r3,r2,65528
811314b4:	00bffe14 	movui	r2,65528
811314b8:	1880051e 	bne	r3,r2,811314d0 <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
811314bc:	00bfffc4 	movi	r2,-1
811314c0:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
811314c4:	00a045b4 	movhi	r2,33046
811314c8:	10907704 	addi	r2,r2,16860
811314cc:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
811314d0:	e0bfee0b 	ldhu	r2,-72(fp)
811314d4:	10bfffcc 	andi	r2,r2,65535
811314d8:	10bffe0c 	andi	r2,r2,65528
811314dc:	e0bfe715 	stw	r2,-100(fp)
811314e0:	00000206 	br	811314ec <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
811314e4:	00bfffc4 	movi	r2,-1
811314e8:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
811314ec:	e0bfe717 	ldw	r2,-100(fp)
811314f0:	00fffdd4 	movui	r3,65527
811314f4:	18bf8e0e 	bge	r3,r2,81131330 <__reset+0xfb111330>
811314f8:	00000206 	br	81131504 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
811314fc:	008000c4 	movi	r2,3
81131500:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81131504:	e0bfe60b 	ldhu	r2,-104(fp)
}
81131508:	e037883a 	mov	sp,fp
8113150c:	dfc00117 	ldw	ra,4(sp)
81131510:	df000017 	ldw	fp,0(sp)
81131514:	dec00204 	addi	sp,sp,8
81131518:	f800283a 	ret

8113151c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
8113151c:	deffe904 	addi	sp,sp,-92
81131520:	de00012e 	bgeu	sp,et,81131528 <alt_up_sd_card_fopen+0xc>
81131524:	003b68fa 	trap	3
81131528:	dfc01615 	stw	ra,88(sp)
8113152c:	df001515 	stw	fp,84(sp)
81131530:	df001504 	addi	fp,sp,84
81131534:	e13ffe15 	stw	r4,-8(fp)
81131538:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
8113153c:	00bfffc4 	movi	r2,-1
81131540:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81131544:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
81131548:	1000cf26 	beq	r2,zero,81131888 <alt_up_sd_card_fopen+0x36c>
8113154c:	d0a09817 	ldw	r2,-32160(gp)
81131550:	1000cd26 	beq	r2,zero,81131888 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
81131554:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
81131558:	e13ffe17 	ldw	r4,-8(fp)
8113155c:	112f3300 	call	8112f330 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
81131560:	e13ffe17 	ldw	r4,-8(fp)
81131564:	112f3fc0 	call	8112f3fc <check_file_name_for_FAT16_compliance>
81131568:	1000c726 	beq	r2,zero,81131888 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
8113156c:	e0ffee04 	addi	r3,fp,-72
81131570:	e0bfed04 	addi	r2,fp,-76
81131574:	180d883a 	mov	r6,r3
81131578:	100b883a 	mov	r5,r2
8113157c:	e13ffe17 	ldw	r4,-8(fp)
81131580:	112f9d40 	call	8112f9d4 <get_home_directory_cluster_for_file>
81131584:	1000021e 	bne	r2,zero,81131590 <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
81131588:	e0bfeb0b 	ldhu	r2,-84(fp)
8113158c:	0000bf06 	br	8113188c <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81131590:	e03fec15 	stw	zero,-80(fp)
81131594:	00000e06 	br	811315d0 <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
81131598:	00a045b4 	movhi	r2,33046
8113159c:	10909104 	addi	r2,r2,16964
811315a0:	e0ffec17 	ldw	r3,-80(fp)
811315a4:	180691ba 	slli	r3,r3,6
811315a8:	10c5883a 	add	r2,r2,r3
811315ac:	10800f04 	addi	r2,r2,60
811315b0:	10800017 	ldw	r2,0(r2)
811315b4:	1000031e 	bne	r2,zero,811315c4 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
811315b8:	e0bfec17 	ldw	r2,-80(fp)
811315bc:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
811315c0:	00000606 	br	811315dc <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
811315c4:	e0bfec17 	ldw	r2,-80(fp)
811315c8:	10800044 	addi	r2,r2,1
811315cc:	e0bfec15 	stw	r2,-80(fp)
811315d0:	e0bfec17 	ldw	r2,-80(fp)
811315d4:	10800510 	cmplti	r2,r2,20
811315d8:	103fef1e 	bne	r2,zero,81131598 <__reset+0xfb111598>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
811315dc:	e0bfeb0f 	ldh	r2,-84(fp)
811315e0:	1000a916 	blt	r2,zero,81131888 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
811315e4:	e0bfed17 	ldw	r2,-76(fp)
811315e8:	1009883a 	mov	r4,r2
811315ec:	e0bfeb0f 	ldh	r2,-84(fp)
811315f0:	100691ba 	slli	r3,r2,6
811315f4:	00a045b4 	movhi	r2,33046
811315f8:	10909104 	addi	r2,r2,16964
811315fc:	1885883a 	add	r2,r3,r2
81131600:	100d883a 	mov	r6,r2
81131604:	e17ffe17 	ldw	r5,-8(fp)
81131608:	112ff140 	call	8112ff14 <find_file_in_directory>
8113160c:	10007b26 	beq	r2,zero,811317fc <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
81131610:	e0bfff17 	ldw	r2,-4(fp)
81131614:	10000226 	beq	r2,zero,81131620 <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
81131618:	00bfffc4 	movi	r2,-1
8113161c:	00009b06 	br	8113188c <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
81131620:	e13feb0f 	ldh	r4,-84(fp)
81131624:	e0ffeb0f 	ldh	r3,-84(fp)
81131628:	00a045b4 	movhi	r2,33046
8113162c:	10909104 	addi	r2,r2,16964
81131630:	180691ba 	slli	r3,r3,6
81131634:	10c5883a 	add	r2,r2,r3
81131638:	10800584 	addi	r2,r2,22
8113163c:	1080000b 	ldhu	r2,0(r2)
81131640:	10ffffcc 	andi	r3,r2,65535
81131644:	00a045b4 	movhi	r2,33046
81131648:	10909104 	addi	r2,r2,16964
8113164c:	200891ba 	slli	r4,r4,6
81131650:	1105883a 	add	r2,r2,r4
81131654:	10800704 	addi	r2,r2,28
81131658:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
8113165c:	e0ffeb0f 	ldh	r3,-84(fp)
81131660:	00a045b4 	movhi	r2,33046
81131664:	10909104 	addi	r2,r2,16964
81131668:	180691ba 	slli	r3,r3,6
8113166c:	10c5883a 	add	r2,r2,r3
81131670:	10800804 	addi	r2,r2,32
81131674:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
81131678:	e0ffeb0f 	ldh	r3,-84(fp)
8113167c:	00a045b4 	movhi	r2,33046
81131680:	10909104 	addi	r2,r2,16964
81131684:	180691ba 	slli	r3,r3,6
81131688:	10c5883a 	add	r2,r2,r3
8113168c:	10800904 	addi	r2,r2,36
81131690:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81131694:	e0ffeb0f 	ldh	r3,-84(fp)
81131698:	00a045b4 	movhi	r2,33046
8113169c:	10909104 	addi	r2,r2,16964
811316a0:	180691ba 	slli	r3,r3,6
811316a4:	10c5883a 	add	r2,r2,r3
811316a8:	10800f04 	addi	r2,r2,60
811316ac:	00c00044 	movi	r3,1
811316b0:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
811316b4:	e0ffeb0f 	ldh	r3,-84(fp)
811316b8:	00a045b4 	movhi	r2,33046
811316bc:	10909104 	addi	r2,r2,16964
811316c0:	180691ba 	slli	r3,r3,6
811316c4:	10c5883a 	add	r2,r2,r3
811316c8:	10800e04 	addi	r2,r2,56
811316cc:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
811316d0:	e03fec15 	stw	zero,-80(fp)
811316d4:	00004506 	br	811317ec <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
811316d8:	e0ffeb0f 	ldh	r3,-84(fp)
811316dc:	e0bfec17 	ldw	r2,-80(fp)
811316e0:	18803f26 	beq	r3,r2,811317e0 <alt_up_sd_card_fopen+0x2c4>
811316e4:	00a045b4 	movhi	r2,33046
811316e8:	10909104 	addi	r2,r2,16964
811316ec:	e0ffec17 	ldw	r3,-80(fp)
811316f0:	180691ba 	slli	r3,r3,6
811316f4:	10c5883a 	add	r2,r2,r3
811316f8:	10800f04 	addi	r2,r2,60
811316fc:	10800017 	ldw	r2,0(r2)
81131700:	10800058 	cmpnei	r2,r2,1
81131704:	1000361e 	bne	r2,zero,811317e0 <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81131708:	e0ffeb0f 	ldh	r3,-84(fp)
8113170c:	00a045b4 	movhi	r2,33046
81131710:	10909104 	addi	r2,r2,16964
81131714:	180691ba 	slli	r3,r3,6
81131718:	10c5883a 	add	r2,r2,r3
8113171c:	10800a04 	addi	r2,r2,40
81131720:	10c00017 	ldw	r3,0(r2)
81131724:	00a045b4 	movhi	r2,33046
81131728:	10909104 	addi	r2,r2,16964
8113172c:	e13fec17 	ldw	r4,-80(fp)
81131730:	200891ba 	slli	r4,r4,6
81131734:	1105883a 	add	r2,r2,r4
81131738:	10800a04 	addi	r2,r2,40
8113173c:	10800017 	ldw	r2,0(r2)
81131740:	1880271e 	bne	r3,r2,811317e0 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81131744:	e0ffeb0f 	ldh	r3,-84(fp)
81131748:	00a045b4 	movhi	r2,33046
8113174c:	10909104 	addi	r2,r2,16964
81131750:	180691ba 	slli	r3,r3,6
81131754:	10c5883a 	add	r2,r2,r3
81131758:	10800b04 	addi	r2,r2,44
8113175c:	10c00017 	ldw	r3,0(r2)
81131760:	00a045b4 	movhi	r2,33046
81131764:	10909104 	addi	r2,r2,16964
81131768:	e13fec17 	ldw	r4,-80(fp)
8113176c:	200891ba 	slli	r4,r4,6
81131770:	1105883a 	add	r2,r2,r4
81131774:	10800b04 	addi	r2,r2,44
81131778:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
8113177c:	1880181e 	bne	r3,r2,811317e0 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
81131780:	e0ffeb0f 	ldh	r3,-84(fp)
81131784:	00a045b4 	movhi	r2,33046
81131788:	10909104 	addi	r2,r2,16964
8113178c:	180691ba 	slli	r3,r3,6
81131790:	10c5883a 	add	r2,r2,r3
81131794:	10800c04 	addi	r2,r2,48
81131798:	1100000b 	ldhu	r4,0(r2)
8113179c:	00a045b4 	movhi	r2,33046
811317a0:	10909104 	addi	r2,r2,16964
811317a4:	e0ffec17 	ldw	r3,-80(fp)
811317a8:	180691ba 	slli	r3,r3,6
811317ac:	10c5883a 	add	r2,r2,r3
811317b0:	10800c04 	addi	r2,r2,48
811317b4:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
811317b8:	20ffffcc 	andi	r3,r4,65535
811317bc:	18e0001c 	xori	r3,r3,32768
811317c0:	18e00004 	addi	r3,r3,-32768
811317c4:	10bfffcc 	andi	r2,r2,65535
811317c8:	10a0001c 	xori	r2,r2,32768
811317cc:	10a00004 	addi	r2,r2,-32768
811317d0:	1880031e 	bne	r3,r2,811317e0 <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
811317d4:	00bfff84 	movi	r2,-2
811317d8:	e0bfeb0d 	sth	r2,-84(fp)
								break;
811317dc:	00002a06 	br	81131888 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
811317e0:	e0bfec17 	ldw	r2,-80(fp)
811317e4:	10800044 	addi	r2,r2,1
811317e8:	e0bfec15 	stw	r2,-80(fp)
811317ec:	e0bfec17 	ldw	r2,-80(fp)
811317f0:	10800510 	cmplti	r2,r2,20
811317f4:	103fb81e 	bne	r2,zero,811316d8 <__reset+0xfb1116d8>
811317f8:	00002306 	br	81131888 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
811317fc:	e0bfff17 	ldw	r2,-4(fp)
81131800:	10001f26 	beq	r2,zero,81131880 <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81131804:	e0bfeb0f 	ldh	r2,-84(fp)
81131808:	100691ba 	slli	r3,r2,6
8113180c:	00a045b4 	movhi	r2,33046
81131810:	10909104 	addi	r2,r2,16964
81131814:	1885883a 	add	r2,r3,r2
81131818:	e0ffee04 	addi	r3,fp,-72
8113181c:	180d883a 	mov	r6,r3
81131820:	100b883a 	mov	r5,r2
81131824:	e13ffe17 	ldw	r4,-8(fp)
81131828:	1130a600 	call	81130a60 <create_file>
8113182c:	10001126 	beq	r2,zero,81131874 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
81131830:	e0ffeb0f 	ldh	r3,-84(fp)
81131834:	00a045b4 	movhi	r2,33046
81131838:	10909104 	addi	r2,r2,16964
8113183c:	180691ba 	slli	r3,r3,6
81131840:	10c5883a 	add	r2,r2,r3
81131844:	10800f04 	addi	r2,r2,60
81131848:	00c00044 	movi	r3,1
8113184c:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
81131850:	e0ffeb0f 	ldh	r3,-84(fp)
81131854:	00a045b4 	movhi	r2,33046
81131858:	10909104 	addi	r2,r2,16964
8113185c:	180691ba 	slli	r3,r3,6
81131860:	10c5883a 	add	r2,r2,r3
81131864:	10800e04 	addi	r2,r2,56
81131868:	00c00044 	movi	r3,1
8113186c:	10c00015 	stw	r3,0(r2)
81131870:	00000506 	br	81131888 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
81131874:	00bfffc4 	movi	r2,-1
81131878:	e0bfeb0d 	sth	r2,-84(fp)
8113187c:	00000206 	br	81131888 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
81131880:	00bfffc4 	movi	r2,-1
81131884:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
81131888:	e0bfeb0b 	ldhu	r2,-84(fp)
}
8113188c:	e037883a 	mov	sp,fp
81131890:	dfc00117 	ldw	ra,4(sp)
81131894:	df000017 	ldw	fp,0(sp)
81131898:	dec00204 	addi	sp,sp,8
8113189c:	f800283a 	ret

811318a0 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
811318a0:	defffd04 	addi	sp,sp,-12
811318a4:	de00012e 	bgeu	sp,et,811318ac <alt_up_sd_card_set_attributes+0xc>
811318a8:	003b68fa 	trap	3
811318ac:	df000215 	stw	fp,8(sp)
811318b0:	df000204 	addi	fp,sp,8
811318b4:	2007883a 	mov	r3,r4
811318b8:	2805883a 	mov	r2,r5
811318bc:	e0fffe0d 	sth	r3,-8(fp)
811318c0:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811318c4:	e0bffe0f 	ldh	r2,-8(fp)
811318c8:	10001416 	blt	r2,zero,8113191c <alt_up_sd_card_set_attributes+0x7c>
811318cc:	e0bffe0f 	ldh	r2,-8(fp)
811318d0:	10800508 	cmpgei	r2,r2,20
811318d4:	1000111e 	bne	r2,zero,8113191c <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
811318d8:	e0fffe0f 	ldh	r3,-8(fp)
811318dc:	00a045b4 	movhi	r2,33046
811318e0:	10909104 	addi	r2,r2,16964
811318e4:	180691ba 	slli	r3,r3,6
811318e8:	10c5883a 	add	r2,r2,r3
811318ec:	10800f04 	addi	r2,r2,60
811318f0:	10800017 	ldw	r2,0(r2)
811318f4:	10000926 	beq	r2,zero,8113191c <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
811318f8:	e0fffe0f 	ldh	r3,-8(fp)
811318fc:	e0bfff0b 	ldhu	r2,-4(fp)
81131900:	1009883a 	mov	r4,r2
81131904:	00a045b4 	movhi	r2,33046
81131908:	10909104 	addi	r2,r2,16964
8113190c:	180691ba 	slli	r3,r3,6
81131910:	10c5883a 	add	r2,r2,r3
81131914:	108002c4 	addi	r2,r2,11
81131918:	11000005 	stb	r4,0(r2)
        }
    }
}
8113191c:	0001883a 	nop
81131920:	e037883a 	mov	sp,fp
81131924:	df000017 	ldw	fp,0(sp)
81131928:	dec00104 	addi	sp,sp,4
8113192c:	f800283a 	ret

81131930 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81131930:	defffd04 	addi	sp,sp,-12
81131934:	de00012e 	bgeu	sp,et,8113193c <alt_up_sd_card_get_attributes+0xc>
81131938:	003b68fa 	trap	3
8113193c:	df000215 	stw	fp,8(sp)
81131940:	df000204 	addi	fp,sp,8
81131944:	2005883a 	mov	r2,r4
81131948:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
8113194c:	00bfffc4 	movi	r2,-1
81131950:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81131954:	e0bfff0f 	ldh	r2,-4(fp)
81131958:	10001416 	blt	r2,zero,811319ac <alt_up_sd_card_get_attributes+0x7c>
8113195c:	e0bfff0f 	ldh	r2,-4(fp)
81131960:	10800508 	cmpgei	r2,r2,20
81131964:	1000111e 	bne	r2,zero,811319ac <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81131968:	e0ffff0f 	ldh	r3,-4(fp)
8113196c:	00a045b4 	movhi	r2,33046
81131970:	10909104 	addi	r2,r2,16964
81131974:	180691ba 	slli	r3,r3,6
81131978:	10c5883a 	add	r2,r2,r3
8113197c:	10800f04 	addi	r2,r2,60
81131980:	10800017 	ldw	r2,0(r2)
81131984:	10000926 	beq	r2,zero,811319ac <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
81131988:	e0ffff0f 	ldh	r3,-4(fp)
8113198c:	00a045b4 	movhi	r2,33046
81131990:	10909104 	addi	r2,r2,16964
81131994:	180691ba 	slli	r3,r3,6
81131998:	10c5883a 	add	r2,r2,r3
8113199c:	108002c4 	addi	r2,r2,11
811319a0:	10800003 	ldbu	r2,0(r2)
811319a4:	10803fcc 	andi	r2,r2,255
811319a8:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
811319ac:	e0bffe0b 	ldhu	r2,-8(fp)
}
811319b0:	e037883a 	mov	sp,fp
811319b4:	df000017 	ldw	fp,0(sp)
811319b8:	dec00104 	addi	sp,sp,4
811319bc:	f800283a 	ret

811319c0 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
811319c0:	defffa04 	addi	sp,sp,-24
811319c4:	de00012e 	bgeu	sp,et,811319cc <alt_up_sd_card_read+0xc>
811319c8:	003b68fa 	trap	3
811319cc:	dfc00515 	stw	ra,20(sp)
811319d0:	df000415 	stw	fp,16(sp)
811319d4:	df000404 	addi	fp,sp,16
811319d8:	2005883a 	mov	r2,r4
811319dc:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
811319e0:	00bfffc4 	movi	r2,-1
811319e4:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811319e8:	e0bfff0f 	ldh	r2,-4(fp)
811319ec:	1000ce16 	blt	r2,zero,81131d28 <alt_up_sd_card_read+0x368>
811319f0:	e0bfff0f 	ldh	r2,-4(fp)
811319f4:	10800508 	cmpgei	r2,r2,20
811319f8:	1000cb1e 	bne	r2,zero,81131d28 <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
811319fc:	e0ffff0f 	ldh	r3,-4(fp)
81131a00:	00a045b4 	movhi	r2,33046
81131a04:	10909104 	addi	r2,r2,16964
81131a08:	180691ba 	slli	r3,r3,6
81131a0c:	10c5883a 	add	r2,r2,r3
81131a10:	10800f04 	addi	r2,r2,60
81131a14:	10800017 	ldw	r2,0(r2)
81131a18:	1000c326 	beq	r2,zero,81131d28 <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81131a1c:	e0ffff0f 	ldh	r3,-4(fp)
81131a20:	00a045b4 	movhi	r2,33046
81131a24:	10909104 	addi	r2,r2,16964
81131a28:	180691ba 	slli	r3,r3,6
81131a2c:	10c5883a 	add	r2,r2,r3
81131a30:	10800904 	addi	r2,r2,36
81131a34:	10c00017 	ldw	r3,0(r2)
81131a38:	e13fff0f 	ldh	r4,-4(fp)
81131a3c:	00a045b4 	movhi	r2,33046
81131a40:	10909104 	addi	r2,r2,16964
81131a44:	200891ba 	slli	r4,r4,6
81131a48:	1105883a 	add	r2,r2,r4
81131a4c:	10800604 	addi	r2,r2,24
81131a50:	10800017 	ldw	r2,0(r2)
81131a54:	1880b42e 	bgeu	r3,r2,81131d28 <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131a58:	00a045b4 	movhi	r2,33046
81131a5c:	10907c04 	addi	r2,r2,16880
81131a60:	10c01417 	ldw	r3,80(r2)
81131a64:	e13fff0f 	ldh	r4,-4(fp)
81131a68:	00a045b4 	movhi	r2,33046
81131a6c:	10909104 	addi	r2,r2,16964
81131a70:	200891ba 	slli	r4,r4,6
81131a74:	1105883a 	add	r2,r2,r4
81131a78:	10800704 	addi	r2,r2,28
81131a7c:	10800017 	ldw	r2,0(r2)
81131a80:	113fff84 	addi	r4,r2,-2
81131a84:	00a045b4 	movhi	r2,33046
81131a88:	10907c04 	addi	r2,r2,16880
81131a8c:	10800383 	ldbu	r2,14(r2)
81131a90:	10803fcc 	andi	r2,r2,255
81131a94:	2085383a 	mul	r2,r4,r2
81131a98:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
81131a9c:	e13fff0f 	ldh	r4,-4(fp)
81131aa0:	00a045b4 	movhi	r2,33046
81131aa4:	10909104 	addi	r2,r2,16964
81131aa8:	200891ba 	slli	r4,r4,6
81131aac:	1105883a 	add	r2,r2,r4
81131ab0:	10800804 	addi	r2,r2,32
81131ab4:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131ab8:	1885883a 	add	r2,r3,r2
81131abc:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
81131ac0:	e0ffff0f 	ldh	r3,-4(fp)
81131ac4:	00a045b4 	movhi	r2,33046
81131ac8:	10909104 	addi	r2,r2,16964
81131acc:	180691ba 	slli	r3,r3,6
81131ad0:	10c5883a 	add	r2,r2,r3
81131ad4:	10800904 	addi	r2,r2,36
81131ad8:	10800017 	ldw	r2,0(r2)
81131adc:	10006826 	beq	r2,zero,81131c80 <alt_up_sd_card_read+0x2c0>
81131ae0:	e0ffff0f 	ldh	r3,-4(fp)
81131ae4:	00a045b4 	movhi	r2,33046
81131ae8:	10909104 	addi	r2,r2,16964
81131aec:	180691ba 	slli	r3,r3,6
81131af0:	10c5883a 	add	r2,r2,r3
81131af4:	10800904 	addi	r2,r2,36
81131af8:	10800017 	ldw	r2,0(r2)
81131afc:	10807fcc 	andi	r2,r2,511
81131b00:	10005f1e 	bne	r2,zero,81131c80 <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81131b04:	e0ffff0f 	ldh	r3,-4(fp)
81131b08:	00a045b4 	movhi	r2,33046
81131b0c:	10909104 	addi	r2,r2,16964
81131b10:	180691ba 	slli	r3,r3,6
81131b14:	10c5883a 	add	r2,r2,r3
81131b18:	10800804 	addi	r2,r2,32
81131b1c:	10c00017 	ldw	r3,0(r2)
81131b20:	00a045b4 	movhi	r2,33046
81131b24:	10907c04 	addi	r2,r2,16880
81131b28:	10800383 	ldbu	r2,14(r2)
81131b2c:	10803fcc 	andi	r2,r2,255
81131b30:	10bfffc4 	addi	r2,r2,-1
81131b34:	1880401e 	bne	r3,r2,81131c38 <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81131b38:	e0ffff0f 	ldh	r3,-4(fp)
81131b3c:	00a045b4 	movhi	r2,33046
81131b40:	10909104 	addi	r2,r2,16964
81131b44:	180691ba 	slli	r3,r3,6
81131b48:	10c5883a 	add	r2,r2,r3
81131b4c:	10800704 	addi	r2,r2,28
81131b50:	10800017 	ldw	r2,0(r2)
81131b54:	e0fffe04 	addi	r3,fp,-8
81131b58:	180b883a 	mov	r5,r3
81131b5c:	1009883a 	mov	r4,r2
81131b60:	112e34c0 	call	8112e34c <get_cluster_flag>
81131b64:	10003226 	beq	r2,zero,81131c30 <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
81131b68:	e0bffe0b 	ldhu	r2,-8(fp)
81131b6c:	10bfffcc 	andi	r2,r2,65535
81131b70:	10fffe0c 	andi	r3,r2,65528
81131b74:	00bffe14 	movui	r2,65528
81131b78:	1880021e 	bne	r3,r2,81131b84 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
81131b7c:	00bfffc4 	movi	r2,-1
81131b80:	00006a06 	br	81131d2c <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81131b84:	e13fff0f 	ldh	r4,-4(fp)
81131b88:	e0bffe0b 	ldhu	r2,-8(fp)
81131b8c:	10ffffcc 	andi	r3,r2,65535
81131b90:	00a045b4 	movhi	r2,33046
81131b94:	10909104 	addi	r2,r2,16964
81131b98:	200891ba 	slli	r4,r4,6
81131b9c:	1105883a 	add	r2,r2,r4
81131ba0:	10800704 	addi	r2,r2,28
81131ba4:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81131ba8:	e0ffff0f 	ldh	r3,-4(fp)
81131bac:	00a045b4 	movhi	r2,33046
81131bb0:	10909104 	addi	r2,r2,16964
81131bb4:	180691ba 	slli	r3,r3,6
81131bb8:	10c5883a 	add	r2,r2,r3
81131bbc:	10800804 	addi	r2,r2,32
81131bc0:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131bc4:	00a045b4 	movhi	r2,33046
81131bc8:	10907c04 	addi	r2,r2,16880
81131bcc:	10c01417 	ldw	r3,80(r2)
81131bd0:	e13fff0f 	ldh	r4,-4(fp)
81131bd4:	00a045b4 	movhi	r2,33046
81131bd8:	10909104 	addi	r2,r2,16964
81131bdc:	200891ba 	slli	r4,r4,6
81131be0:	1105883a 	add	r2,r2,r4
81131be4:	10800704 	addi	r2,r2,28
81131be8:	10800017 	ldw	r2,0(r2)
81131bec:	113fff84 	addi	r4,r2,-2
81131bf0:	00a045b4 	movhi	r2,33046
81131bf4:	10907c04 	addi	r2,r2,16880
81131bf8:	10800383 	ldbu	r2,14(r2)
81131bfc:	10803fcc 	andi	r2,r2,255
81131c00:	2085383a 	mul	r2,r4,r2
81131c04:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81131c08:	e13fff0f 	ldh	r4,-4(fp)
81131c0c:	00a045b4 	movhi	r2,33046
81131c10:	10909104 	addi	r2,r2,16964
81131c14:	200891ba 	slli	r4,r4,6
81131c18:	1105883a 	add	r2,r2,r4
81131c1c:	10800804 	addi	r2,r2,32
81131c20:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131c24:	1885883a 	add	r2,r3,r2
81131c28:	e0bffd15 	stw	r2,-12(fp)
81131c2c:	00001406 	br	81131c80 <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
81131c30:	00bfff84 	movi	r2,-2
81131c34:	00003d06 	br	81131d2c <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81131c38:	e13fff0f 	ldh	r4,-4(fp)
81131c3c:	e0ffff0f 	ldh	r3,-4(fp)
81131c40:	00a045b4 	movhi	r2,33046
81131c44:	10909104 	addi	r2,r2,16964
81131c48:	180691ba 	slli	r3,r3,6
81131c4c:	10c5883a 	add	r2,r2,r3
81131c50:	10800804 	addi	r2,r2,32
81131c54:	10800017 	ldw	r2,0(r2)
81131c58:	10c00044 	addi	r3,r2,1
81131c5c:	00a045b4 	movhi	r2,33046
81131c60:	10909104 	addi	r2,r2,16964
81131c64:	200891ba 	slli	r4,r4,6
81131c68:	1105883a 	add	r2,r2,r4
81131c6c:	10800804 	addi	r2,r2,32
81131c70:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81131c74:	e0bffd17 	ldw	r2,-12(fp)
81131c78:	10800044 	addi	r2,r2,1
81131c7c:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
81131c80:	d0e09f17 	ldw	r3,-32132(gp)
81131c84:	e0bffd17 	ldw	r2,-12(fp)
81131c88:	1885883a 	add	r2,r3,r2
81131c8c:	1007883a 	mov	r3,r2
81131c90:	d0a0a317 	ldw	r2,-32116(gp)
81131c94:	18800726 	beq	r3,r2,81131cb4 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81131c98:	d0a09f17 	ldw	r2,-32132(gp)
81131c9c:	100b883a 	mov	r5,r2
81131ca0:	e13ffd17 	ldw	r4,-12(fp)
81131ca4:	112e26c0 	call	8112e26c <Read_Sector_Data>
81131ca8:	1000021e 	bne	r2,zero,81131cb4 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
81131cac:	00bfff84 	movi	r2,-2
81131cb0:	00001e06 	br	81131d2c <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
81131cb4:	d0e09e17 	ldw	r3,-32136(gp)
81131cb8:	e13fff0f 	ldh	r4,-4(fp)
81131cbc:	00a045b4 	movhi	r2,33046
81131cc0:	10909104 	addi	r2,r2,16964
81131cc4:	200891ba 	slli	r4,r4,6
81131cc8:	1105883a 	add	r2,r2,r4
81131ccc:	10800904 	addi	r2,r2,36
81131cd0:	10800017 	ldw	r2,0(r2)
81131cd4:	10807fcc 	andi	r2,r2,511
81131cd8:	1885883a 	add	r2,r3,r2
81131cdc:	10800023 	ldbuio	r2,0(r2)
81131ce0:	10803fcc 	andi	r2,r2,255
81131ce4:	10803fcc 	andi	r2,r2,255
81131ce8:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81131cec:	e13fff0f 	ldh	r4,-4(fp)
81131cf0:	e0ffff0f 	ldh	r3,-4(fp)
81131cf4:	00a045b4 	movhi	r2,33046
81131cf8:	10909104 	addi	r2,r2,16964
81131cfc:	180691ba 	slli	r3,r3,6
81131d00:	10c5883a 	add	r2,r2,r3
81131d04:	10800904 	addi	r2,r2,36
81131d08:	10800017 	ldw	r2,0(r2)
81131d0c:	10c00044 	addi	r3,r2,1
81131d10:	00a045b4 	movhi	r2,33046
81131d14:	10909104 	addi	r2,r2,16964
81131d18:	200891ba 	slli	r4,r4,6
81131d1c:	1105883a 	add	r2,r2,r4
81131d20:	10800904 	addi	r2,r2,36
81131d24:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
81131d28:	e0bffc0b 	ldhu	r2,-16(fp)
}
81131d2c:	e037883a 	mov	sp,fp
81131d30:	dfc00117 	ldw	ra,4(sp)
81131d34:	df000017 	ldw	fp,0(sp)
81131d38:	dec00204 	addi	sp,sp,8
81131d3c:	f800283a 	ret

81131d40 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
81131d40:	defff804 	addi	sp,sp,-32
81131d44:	de00012e 	bgeu	sp,et,81131d4c <alt_up_sd_card_write+0xc>
81131d48:	003b68fa 	trap	3
81131d4c:	dfc00715 	stw	ra,28(sp)
81131d50:	df000615 	stw	fp,24(sp)
81131d54:	df000604 	addi	fp,sp,24
81131d58:	2007883a 	mov	r3,r4
81131d5c:	2805883a 	mov	r2,r5
81131d60:	e0fffe0d 	sth	r3,-8(fp)
81131d64:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
81131d68:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81131d6c:	e0bffe0f 	ldh	r2,-8(fp)
81131d70:	10017716 	blt	r2,zero,81132350 <alt_up_sd_card_write+0x610>
81131d74:	e0bffe0f 	ldh	r2,-8(fp)
81131d78:	10800508 	cmpgei	r2,r2,20
81131d7c:	1001741e 	bne	r2,zero,81132350 <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
81131d80:	e0fffe0f 	ldh	r3,-8(fp)
81131d84:	00a045b4 	movhi	r2,33046
81131d88:	10909104 	addi	r2,r2,16964
81131d8c:	180691ba 	slli	r3,r3,6
81131d90:	10c5883a 	add	r2,r2,r3
81131d94:	10800f04 	addi	r2,r2,60
81131d98:	10800017 	ldw	r2,0(r2)
81131d9c:	10016c26 	beq	r2,zero,81132350 <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131da0:	00a045b4 	movhi	r2,33046
81131da4:	10907c04 	addi	r2,r2,16880
81131da8:	10c01417 	ldw	r3,80(r2)
81131dac:	e13ffe0f 	ldh	r4,-8(fp)
81131db0:	00a045b4 	movhi	r2,33046
81131db4:	10909104 	addi	r2,r2,16964
81131db8:	200891ba 	slli	r4,r4,6
81131dbc:	1105883a 	add	r2,r2,r4
81131dc0:	10800704 	addi	r2,r2,28
81131dc4:	10800017 	ldw	r2,0(r2)
81131dc8:	113fff84 	addi	r4,r2,-2
81131dcc:	00a045b4 	movhi	r2,33046
81131dd0:	10907c04 	addi	r2,r2,16880
81131dd4:	10800383 	ldbu	r2,14(r2)
81131dd8:	10803fcc 	andi	r2,r2,255
81131ddc:	2085383a 	mul	r2,r4,r2
81131de0:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81131de4:	e13ffe0f 	ldh	r4,-8(fp)
81131de8:	00a045b4 	movhi	r2,33046
81131dec:	10909104 	addi	r2,r2,16964
81131df0:	200891ba 	slli	r4,r4,6
81131df4:	1105883a 	add	r2,r2,r4
81131df8:	10800804 	addi	r2,r2,32
81131dfc:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131e00:	1885883a 	add	r2,r3,r2
81131e04:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
81131e08:	e0fffe0f 	ldh	r3,-8(fp)
81131e0c:	00a045b4 	movhi	r2,33046
81131e10:	10909104 	addi	r2,r2,16964
81131e14:	180691ba 	slli	r3,r3,6
81131e18:	10c5883a 	add	r2,r2,r3
81131e1c:	10800904 	addi	r2,r2,36
81131e20:	10c00017 	ldw	r3,0(r2)
81131e24:	00a045b4 	movhi	r2,33046
81131e28:	10907c04 	addi	r2,r2,16880
81131e2c:	1080030b 	ldhu	r2,12(r2)
81131e30:	10bfffcc 	andi	r2,r2,65535
81131e34:	1889203a 	divu	r4,r3,r2
81131e38:	2085383a 	mul	r2,r4,r2
81131e3c:	1885c83a 	sub	r2,r3,r2
81131e40:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
81131e44:	e0fffe0f 	ldh	r3,-8(fp)
81131e48:	00a045b4 	movhi	r2,33046
81131e4c:	10909104 	addi	r2,r2,16964
81131e50:	180691ba 	slli	r3,r3,6
81131e54:	10c5883a 	add	r2,r2,r3
81131e58:	10800904 	addi	r2,r2,36
81131e5c:	10c00017 	ldw	r3,0(r2)
81131e60:	e13ffe0f 	ldh	r4,-8(fp)
81131e64:	00a045b4 	movhi	r2,33046
81131e68:	10909104 	addi	r2,r2,16964
81131e6c:	200891ba 	slli	r4,r4,6
81131e70:	1105883a 	add	r2,r2,r4
81131e74:	10800604 	addi	r2,r2,24
81131e78:	10800017 	ldw	r2,0(r2)
81131e7c:	1880672e 	bgeu	r3,r2,8113201c <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
81131e80:	e0fffe0f 	ldh	r3,-8(fp)
81131e84:	00a045b4 	movhi	r2,33046
81131e88:	10909104 	addi	r2,r2,16964
81131e8c:	180691ba 	slli	r3,r3,6
81131e90:	10c5883a 	add	r2,r2,r3
81131e94:	10800904 	addi	r2,r2,36
81131e98:	10800017 	ldw	r2,0(r2)
81131e9c:	1000e126 	beq	r2,zero,81132224 <alt_up_sd_card_write+0x4e4>
81131ea0:	e0bffc0f 	ldh	r2,-16(fp)
81131ea4:	1000df1e 	bne	r2,zero,81132224 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81131ea8:	e0fffe0f 	ldh	r3,-8(fp)
81131eac:	00a045b4 	movhi	r2,33046
81131eb0:	10909104 	addi	r2,r2,16964
81131eb4:	180691ba 	slli	r3,r3,6
81131eb8:	10c5883a 	add	r2,r2,r3
81131ebc:	10800804 	addi	r2,r2,32
81131ec0:	10c00017 	ldw	r3,0(r2)
81131ec4:	00a045b4 	movhi	r2,33046
81131ec8:	10907c04 	addi	r2,r2,16880
81131ecc:	10800383 	ldbu	r2,14(r2)
81131ed0:	10803fcc 	andi	r2,r2,255
81131ed4:	10bfffc4 	addi	r2,r2,-1
81131ed8:	18803d1e 	bne	r3,r2,81131fd0 <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81131edc:	e0fffe0f 	ldh	r3,-8(fp)
81131ee0:	00a045b4 	movhi	r2,33046
81131ee4:	10909104 	addi	r2,r2,16964
81131ee8:	180691ba 	slli	r3,r3,6
81131eec:	10c5883a 	add	r2,r2,r3
81131ef0:	10800704 	addi	r2,r2,28
81131ef4:	10800017 	ldw	r2,0(r2)
81131ef8:	e0fffc84 	addi	r3,fp,-14
81131efc:	180b883a 	mov	r5,r3
81131f00:	1009883a 	mov	r4,r2
81131f04:	112e34c0 	call	8112e34c <get_cluster_flag>
81131f08:	10002f26 	beq	r2,zero,81131fc8 <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
81131f0c:	e0bffc8b 	ldhu	r2,-14(fp)
81131f10:	10bfffcc 	andi	r2,r2,65535
81131f14:	10bffe28 	cmpgeui	r2,r2,65528
81131f18:	1000c21e 	bne	r2,zero,81132224 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81131f1c:	e13ffe0f 	ldh	r4,-8(fp)
81131f20:	e0bffc8b 	ldhu	r2,-14(fp)
81131f24:	10ffffcc 	andi	r3,r2,65535
81131f28:	00a045b4 	movhi	r2,33046
81131f2c:	10909104 	addi	r2,r2,16964
81131f30:	200891ba 	slli	r4,r4,6
81131f34:	1105883a 	add	r2,r2,r4
81131f38:	10800704 	addi	r2,r2,28
81131f3c:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81131f40:	e0fffe0f 	ldh	r3,-8(fp)
81131f44:	00a045b4 	movhi	r2,33046
81131f48:	10909104 	addi	r2,r2,16964
81131f4c:	180691ba 	slli	r3,r3,6
81131f50:	10c5883a 	add	r2,r2,r3
81131f54:	10800804 	addi	r2,r2,32
81131f58:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131f5c:	00a045b4 	movhi	r2,33046
81131f60:	10907c04 	addi	r2,r2,16880
81131f64:	10c01417 	ldw	r3,80(r2)
81131f68:	e13ffe0f 	ldh	r4,-8(fp)
81131f6c:	00a045b4 	movhi	r2,33046
81131f70:	10909104 	addi	r2,r2,16964
81131f74:	200891ba 	slli	r4,r4,6
81131f78:	1105883a 	add	r2,r2,r4
81131f7c:	10800704 	addi	r2,r2,28
81131f80:	10800017 	ldw	r2,0(r2)
81131f84:	113fff84 	addi	r4,r2,-2
81131f88:	00a045b4 	movhi	r2,33046
81131f8c:	10907c04 	addi	r2,r2,16880
81131f90:	10800383 	ldbu	r2,14(r2)
81131f94:	10803fcc 	andi	r2,r2,255
81131f98:	2085383a 	mul	r2,r4,r2
81131f9c:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81131fa0:	e13ffe0f 	ldh	r4,-8(fp)
81131fa4:	00a045b4 	movhi	r2,33046
81131fa8:	10909104 	addi	r2,r2,16964
81131fac:	200891ba 	slli	r4,r4,6
81131fb0:	1105883a 	add	r2,r2,r4
81131fb4:	10800804 	addi	r2,r2,32
81131fb8:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81131fbc:	1885883a 	add	r2,r3,r2
81131fc0:	e0bffb15 	stw	r2,-20(fp)
81131fc4:	00009706 	br	81132224 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81131fc8:	0005883a 	mov	r2,zero
81131fcc:	0000e106 	br	81132354 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
81131fd0:	e13ffe0f 	ldh	r4,-8(fp)
81131fd4:	e0fffe0f 	ldh	r3,-8(fp)
81131fd8:	00a045b4 	movhi	r2,33046
81131fdc:	10909104 	addi	r2,r2,16964
81131fe0:	180691ba 	slli	r3,r3,6
81131fe4:	10c5883a 	add	r2,r2,r3
81131fe8:	10800804 	addi	r2,r2,32
81131fec:	10800017 	ldw	r2,0(r2)
81131ff0:	10c00044 	addi	r3,r2,1
81131ff4:	00a045b4 	movhi	r2,33046
81131ff8:	10909104 	addi	r2,r2,16964
81131ffc:	200891ba 	slli	r4,r4,6
81132000:	1105883a 	add	r2,r2,r4
81132004:	10800804 	addi	r2,r2,32
81132008:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
8113200c:	e0bffb17 	ldw	r2,-20(fp)
81132010:	10800044 	addi	r2,r2,1
81132014:	e0bffb15 	stw	r2,-20(fp)
81132018:	00008206 	br	81132224 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8113201c:	e0fffe0f 	ldh	r3,-8(fp)
81132020:	00a045b4 	movhi	r2,33046
81132024:	10909104 	addi	r2,r2,16964
81132028:	180691ba 	slli	r3,r3,6
8113202c:	10c5883a 	add	r2,r2,r3
81132030:	10800904 	addi	r2,r2,36
81132034:	10800017 	ldw	r2,0(r2)
81132038:	10007a26 	beq	r2,zero,81132224 <alt_up_sd_card_write+0x4e4>
8113203c:	e0bffc0f 	ldh	r2,-16(fp)
81132040:	1000781e 	bne	r2,zero,81132224 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81132044:	e0fffe0f 	ldh	r3,-8(fp)
81132048:	00a045b4 	movhi	r2,33046
8113204c:	10909104 	addi	r2,r2,16964
81132050:	180691ba 	slli	r3,r3,6
81132054:	10c5883a 	add	r2,r2,r3
81132058:	10800804 	addi	r2,r2,32
8113205c:	10c00017 	ldw	r3,0(r2)
81132060:	00a045b4 	movhi	r2,33046
81132064:	10907c04 	addi	r2,r2,16880
81132068:	10800383 	ldbu	r2,14(r2)
8113206c:	10803fcc 	andi	r2,r2,255
81132070:	10bfffc4 	addi	r2,r2,-1
81132074:	18803e1e 	bne	r3,r2,81132170 <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
81132078:	e0bffd04 	addi	r2,fp,-12
8113207c:	1009883a 	mov	r4,r2
81132080:	11303900 	call	81130390 <find_first_empty_cluster>
81132084:	10003826 	beq	r2,zero,81132168 <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
81132088:	e0fffe0f 	ldh	r3,-8(fp)
8113208c:	00a045b4 	movhi	r2,33046
81132090:	10909104 	addi	r2,r2,16964
81132094:	180691ba 	slli	r3,r3,6
81132098:	10c5883a 	add	r2,r2,r3
8113209c:	10800704 	addi	r2,r2,28
811320a0:	10800017 	ldw	r2,0(r2)
811320a4:	e0fffd17 	ldw	r3,-12(fp)
811320a8:	18ffffcc 	andi	r3,r3,65535
811320ac:	18e0001c 	xori	r3,r3,32768
811320b0:	18e00004 	addi	r3,r3,-32768
811320b4:	01800044 	movi	r6,1
811320b8:	180b883a 	mov	r5,r3
811320bc:	1009883a 	mov	r4,r2
811320c0:	112e4080 	call	8112e408 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
811320c4:	e0bffd17 	ldw	r2,-12(fp)
811320c8:	01800044 	movi	r6,1
811320cc:	017fffc4 	movi	r5,-1
811320d0:	1009883a 	mov	r4,r2
811320d4:	112e4080 	call	8112e408 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
811320d8:	e0fffe0f 	ldh	r3,-8(fp)
811320dc:	00a045b4 	movhi	r2,33046
811320e0:	10909104 	addi	r2,r2,16964
811320e4:	180691ba 	slli	r3,r3,6
811320e8:	10c5883a 	add	r2,r2,r3
811320ec:	10800704 	addi	r2,r2,28
811320f0:	10800017 	ldw	r2,0(r2)
811320f4:	e0fffd17 	ldw	r3,-12(fp)
811320f8:	18ffffcc 	andi	r3,r3,65535
811320fc:	18e0001c 	xori	r3,r3,32768
81132100:	18e00004 	addi	r3,r3,-32768
81132104:	000d883a 	mov	r6,zero
81132108:	180b883a 	mov	r5,r3
8113210c:	1009883a 	mov	r4,r2
81132110:	112e4080 	call	8112e408 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
81132114:	e0bffd17 	ldw	r2,-12(fp)
81132118:	000d883a 	mov	r6,zero
8113211c:	017fffc4 	movi	r5,-1
81132120:	1009883a 	mov	r4,r2
81132124:	112e4080 	call	8112e408 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
81132128:	e13ffe0f 	ldh	r4,-8(fp)
8113212c:	e0fffd17 	ldw	r3,-12(fp)
81132130:	00a045b4 	movhi	r2,33046
81132134:	10909104 	addi	r2,r2,16964
81132138:	200891ba 	slli	r4,r4,6
8113213c:	1105883a 	add	r2,r2,r4
81132140:	10800704 	addi	r2,r2,28
81132144:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
81132148:	e0fffe0f 	ldh	r3,-8(fp)
8113214c:	00a045b4 	movhi	r2,33046
81132150:	10909104 	addi	r2,r2,16964
81132154:	180691ba 	slli	r3,r3,6
81132158:	10c5883a 	add	r2,r2,r3
8113215c:	10800804 	addi	r2,r2,32
81132160:	10000015 	stw	zero,0(r2)
81132164:	00001506 	br	811321bc <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
81132168:	0005883a 	mov	r2,zero
8113216c:	00007906 	br	81132354 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
81132170:	e13ffe0f 	ldh	r4,-8(fp)
81132174:	e0fffe0f 	ldh	r3,-8(fp)
81132178:	00a045b4 	movhi	r2,33046
8113217c:	10909104 	addi	r2,r2,16964
81132180:	180691ba 	slli	r3,r3,6
81132184:	10c5883a 	add	r2,r2,r3
81132188:	10800904 	addi	r2,r2,36
8113218c:	10c00017 	ldw	r3,0(r2)
81132190:	00a045b4 	movhi	r2,33046
81132194:	10907c04 	addi	r2,r2,16880
81132198:	1080030b 	ldhu	r2,12(r2)
8113219c:	10bfffcc 	andi	r2,r2,65535
811321a0:	1887203a 	divu	r3,r3,r2
811321a4:	00a045b4 	movhi	r2,33046
811321a8:	10909104 	addi	r2,r2,16964
811321ac:	200891ba 	slli	r4,r4,6
811321b0:	1105883a 	add	r2,r2,r4
811321b4:	10800804 	addi	r2,r2,32
811321b8:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811321bc:	00a045b4 	movhi	r2,33046
811321c0:	10907c04 	addi	r2,r2,16880
811321c4:	10c01417 	ldw	r3,80(r2)
811321c8:	e13ffe0f 	ldh	r4,-8(fp)
811321cc:	00a045b4 	movhi	r2,33046
811321d0:	10909104 	addi	r2,r2,16964
811321d4:	200891ba 	slli	r4,r4,6
811321d8:	1105883a 	add	r2,r2,r4
811321dc:	10800704 	addi	r2,r2,28
811321e0:	10800017 	ldw	r2,0(r2)
811321e4:	113fff84 	addi	r4,r2,-2
811321e8:	00a045b4 	movhi	r2,33046
811321ec:	10907c04 	addi	r2,r2,16880
811321f0:	10800383 	ldbu	r2,14(r2)
811321f4:	10803fcc 	andi	r2,r2,255
811321f8:	2085383a 	mul	r2,r4,r2
811321fc:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
81132200:	e13ffe0f 	ldh	r4,-8(fp)
81132204:	00a045b4 	movhi	r2,33046
81132208:	10909104 	addi	r2,r2,16964
8113220c:	200891ba 	slli	r4,r4,6
81132210:	1105883a 	add	r2,r2,r4
81132214:	10800804 	addi	r2,r2,32
81132218:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113221c:	1885883a 	add	r2,r3,r2
81132220:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
81132224:	d0e09f17 	ldw	r3,-32132(gp)
81132228:	e0bffb17 	ldw	r2,-20(fp)
8113222c:	1885883a 	add	r2,r3,r2
81132230:	1007883a 	mov	r3,r2
81132234:	d0a0a317 	ldw	r2,-32116(gp)
81132238:	18800726 	beq	r3,r2,81132258 <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
8113223c:	d0a09f17 	ldw	r2,-32132(gp)
81132240:	100b883a 	mov	r5,r2
81132244:	e13ffb17 	ldw	r4,-20(fp)
81132248:	112e26c0 	call	8112e26c <Read_Sector_Data>
8113224c:	1000021e 	bne	r2,zero,81132258 <alt_up_sd_card_write+0x518>
                {
					return false;
81132250:	0005883a 	mov	r2,zero
81132254:	00003f06 	br	81132354 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
81132258:	d0e09e17 	ldw	r3,-32136(gp)
8113225c:	e0bffc0f 	ldh	r2,-16(fp)
81132260:	1885883a 	add	r2,r3,r2
81132264:	e0ffff07 	ldb	r3,-4(fp)
81132268:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8113226c:	e13ffe0f 	ldh	r4,-8(fp)
81132270:	e0fffe0f 	ldh	r3,-8(fp)
81132274:	00a045b4 	movhi	r2,33046
81132278:	10909104 	addi	r2,r2,16964
8113227c:	180691ba 	slli	r3,r3,6
81132280:	10c5883a 	add	r2,r2,r3
81132284:	10800904 	addi	r2,r2,36
81132288:	10800017 	ldw	r2,0(r2)
8113228c:	10c00044 	addi	r3,r2,1
81132290:	00a045b4 	movhi	r2,33046
81132294:	10909104 	addi	r2,r2,16964
81132298:	200891ba 	slli	r4,r4,6
8113229c:	1105883a 	add	r2,r2,r4
811322a0:	10800904 	addi	r2,r2,36
811322a4:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
811322a8:	e0fffe0f 	ldh	r3,-8(fp)
811322ac:	00a045b4 	movhi	r2,33046
811322b0:	10909104 	addi	r2,r2,16964
811322b4:	180691ba 	slli	r3,r3,6
811322b8:	10c5883a 	add	r2,r2,r3
811322bc:	10800904 	addi	r2,r2,36
811322c0:	10c00017 	ldw	r3,0(r2)
811322c4:	e13ffe0f 	ldh	r4,-8(fp)
811322c8:	00a045b4 	movhi	r2,33046
811322cc:	10909104 	addi	r2,r2,16964
811322d0:	200891ba 	slli	r4,r4,6
811322d4:	1105883a 	add	r2,r2,r4
811322d8:	10800604 	addi	r2,r2,24
811322dc:	10800017 	ldw	r2,0(r2)
811322e0:	18801736 	bltu	r3,r2,81132340 <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
811322e4:	e13ffe0f 	ldh	r4,-8(fp)
811322e8:	e0fffe0f 	ldh	r3,-8(fp)
811322ec:	00a045b4 	movhi	r2,33046
811322f0:	10909104 	addi	r2,r2,16964
811322f4:	180691ba 	slli	r3,r3,6
811322f8:	10c5883a 	add	r2,r2,r3
811322fc:	10800604 	addi	r2,r2,24
81132300:	10800017 	ldw	r2,0(r2)
81132304:	10c00044 	addi	r3,r2,1
81132308:	00a045b4 	movhi	r2,33046
8113230c:	10909104 	addi	r2,r2,16964
81132310:	200891ba 	slli	r4,r4,6
81132314:	1105883a 	add	r2,r2,r4
81132318:	10800604 	addi	r2,r2,24
8113231c:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
81132320:	e0fffe0f 	ldh	r3,-8(fp)
81132324:	00a045b4 	movhi	r2,33046
81132328:	10909104 	addi	r2,r2,16964
8113232c:	180691ba 	slli	r3,r3,6
81132330:	10c5883a 	add	r2,r2,r3
81132334:	10800e04 	addi	r2,r2,56
81132338:	00c00044 	movi	r3,1
8113233c:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
81132340:	00800044 	movi	r2,1
81132344:	d0a0a215 	stw	r2,-32120(gp)
			result = true;
81132348:	00800044 	movi	r2,1
8113234c:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
81132350:	e0bffa17 	ldw	r2,-24(fp)
}
81132354:	e037883a 	mov	sp,fp
81132358:	dfc00117 	ldw	ra,4(sp)
8113235c:	df000017 	ldw	fp,0(sp)
81132360:	dec00204 	addi	sp,sp,8
81132364:	f800283a 	ret

81132368 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
81132368:	defffb04 	addi	sp,sp,-20
8113236c:	de00012e 	bgeu	sp,et,81132374 <alt_up_sd_card_fclose+0xc>
81132370:	003b68fa 	trap	3
81132374:	dfc00415 	stw	ra,16(sp)
81132378:	df000315 	stw	fp,12(sp)
8113237c:	df000304 	addi	fp,sp,12
81132380:	2005883a 	mov	r2,r4
81132384:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
81132388:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8113238c:	1130f440 	call	81130f44 <alt_up_sd_card_is_Present>
81132390:	10006026 	beq	r2,zero,81132514 <alt_up_sd_card_fclose+0x1ac>
81132394:	d0a09817 	ldw	r2,-32160(gp)
81132398:	10005e26 	beq	r2,zero,81132514 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
8113239c:	e0ffff0f 	ldh	r3,-4(fp)
811323a0:	00a045b4 	movhi	r2,33046
811323a4:	10909104 	addi	r2,r2,16964
811323a8:	180691ba 	slli	r3,r3,6
811323ac:	10c5883a 	add	r2,r2,r3
811323b0:	10800f04 	addi	r2,r2,60
811323b4:	10800017 	ldw	r2,0(r2)
811323b8:	10005626 	beq	r2,zero,81132514 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
811323bc:	e0ffff0f 	ldh	r3,-4(fp)
811323c0:	00a045b4 	movhi	r2,33046
811323c4:	10909104 	addi	r2,r2,16964
811323c8:	180691ba 	slli	r3,r3,6
811323cc:	10c5883a 	add	r2,r2,r3
811323d0:	10800e04 	addi	r2,r2,56
811323d4:	10800017 	ldw	r2,0(r2)
811323d8:	10004526 	beq	r2,zero,811324f0 <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
811323dc:	e0ffff0f 	ldh	r3,-4(fp)
811323e0:	00a045b4 	movhi	r2,33046
811323e4:	10909104 	addi	r2,r2,16964
811323e8:	180691ba 	slli	r3,r3,6
811323ec:	10c5883a 	add	r2,r2,r3
811323f0:	10800b04 	addi	r2,r2,44
811323f4:	10800017 	ldw	r2,0(r2)
811323f8:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
811323fc:	e0ffff0f 	ldh	r3,-4(fp)
81132400:	00a045b4 	movhi	r2,33046
81132404:	10909104 	addi	r2,r2,16964
81132408:	180691ba 	slli	r3,r3,6
8113240c:	10c5883a 	add	r2,r2,r3
81132410:	10800a04 	addi	r2,r2,40
81132414:	10800017 	ldw	r2,0(r2)
81132418:	1000071e 	bne	r2,zero,81132438 <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
8113241c:	00a045b4 	movhi	r2,33046
81132420:	10907c04 	addi	r2,r2,16880
81132424:	10801317 	ldw	r2,76(r2)
81132428:	e0fffe17 	ldw	r3,-8(fp)
8113242c:	1885883a 	add	r2,r3,r2
81132430:	e0bffe15 	stw	r2,-8(fp)
81132434:	00001406 	br	81132488 <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81132438:	00a045b4 	movhi	r2,33046
8113243c:	10907c04 	addi	r2,r2,16880
81132440:	10c01417 	ldw	r3,80(r2)
81132444:	e0bffe17 	ldw	r2,-8(fp)
81132448:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
8113244c:	e13fff0f 	ldh	r4,-4(fp)
81132450:	00a045b4 	movhi	r2,33046
81132454:	10909104 	addi	r2,r2,16964
81132458:	200891ba 	slli	r4,r4,6
8113245c:	1105883a 	add	r2,r2,r4
81132460:	10800a04 	addi	r2,r2,40
81132464:	10800017 	ldw	r2,0(r2)
81132468:	113fff84 	addi	r4,r2,-2
8113246c:	00a045b4 	movhi	r2,33046
81132470:	10907c04 	addi	r2,r2,16880
81132474:	10800383 	ldbu	r2,14(r2)
81132478:	10803fcc 	andi	r2,r2,255
8113247c:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81132480:	1885883a 	add	r2,r3,r2
81132484:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
81132488:	e0bffe17 	ldw	r2,-8(fp)
8113248c:	d0e09f17 	ldw	r3,-32132(gp)
81132490:	180b883a 	mov	r5,r3
81132494:	1009883a 	mov	r4,r2
81132498:	112e26c0 	call	8112e26c <Read_Sector_Data>
8113249c:	10001426 	beq	r2,zero,811324f0 <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
811324a0:	e0ffff0f 	ldh	r3,-4(fp)
811324a4:	00a045b4 	movhi	r2,33046
811324a8:	10909104 	addi	r2,r2,16964
811324ac:	180691ba 	slli	r3,r3,6
811324b0:	10c5883a 	add	r2,r2,r3
811324b4:	10800c04 	addi	r2,r2,48
811324b8:	1080000b 	ldhu	r2,0(r2)
811324bc:	113fffcc 	andi	r4,r2,65535
811324c0:	2120001c 	xori	r4,r4,32768
811324c4:	21200004 	addi	r4,r4,-32768
811324c8:	e0bfff0f 	ldh	r2,-4(fp)
811324cc:	100691ba 	slli	r3,r2,6
811324d0:	00a045b4 	movhi	r2,33046
811324d4:	10909104 	addi	r2,r2,16964
811324d8:	1885883a 	add	r2,r3,r2
811324dc:	100b883a 	mov	r5,r2
811324e0:	112e9200 	call	8112e920 <Write_File_Record_At_Offset>
811324e4:	10000226 	beq	r2,zero,811324f0 <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
811324e8:	112e2180 	call	8112e218 <Save_Modified_Sector>
811324ec:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
811324f0:	e0ffff0f 	ldh	r3,-4(fp)
811324f4:	00a045b4 	movhi	r2,33046
811324f8:	10909104 	addi	r2,r2,16964
811324fc:	180691ba 	slli	r3,r3,6
81132500:	10c5883a 	add	r2,r2,r3
81132504:	10800f04 	addi	r2,r2,60
81132508:	10000015 	stw	zero,0(r2)
			result = true;
8113250c:	00800044 	movi	r2,1
81132510:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81132514:	e0bffd17 	ldw	r2,-12(fp)
}
81132518:	e037883a 	mov	sp,fp
8113251c:	dfc00117 	ldw	ra,4(sp)
81132520:	df000017 	ldw	fp,0(sp)
81132524:	dec00204 	addi	sp,sp,8
81132528:	f800283a 	ret

8113252c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8113252c:	defffa04 	addi	sp,sp,-24
81132530:	de00012e 	bgeu	sp,et,81132538 <altera_avalon_jtag_uart_read_fd+0xc>
81132534:	003b68fa 	trap	3
81132538:	dfc00515 	stw	ra,20(sp)
8113253c:	df000415 	stw	fp,16(sp)
81132540:	df000404 	addi	fp,sp,16
81132544:	e13ffd15 	stw	r4,-12(fp)
81132548:	e17ffe15 	stw	r5,-8(fp)
8113254c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81132550:	e0bffd17 	ldw	r2,-12(fp)
81132554:	10800017 	ldw	r2,0(r2)
81132558:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8113255c:	e0bffc17 	ldw	r2,-16(fp)
81132560:	10c00a04 	addi	r3,r2,40
81132564:	e0bffd17 	ldw	r2,-12(fp)
81132568:	10800217 	ldw	r2,8(r2)
8113256c:	100f883a 	mov	r7,r2
81132570:	e1bfff17 	ldw	r6,-4(fp)
81132574:	e17ffe17 	ldw	r5,-8(fp)
81132578:	1809883a 	mov	r4,r3
8113257c:	1132d200 	call	81132d20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
81132580:	e037883a 	mov	sp,fp
81132584:	dfc00117 	ldw	ra,4(sp)
81132588:	df000017 	ldw	fp,0(sp)
8113258c:	dec00204 	addi	sp,sp,8
81132590:	f800283a 	ret

81132594 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81132594:	defffa04 	addi	sp,sp,-24
81132598:	de00012e 	bgeu	sp,et,811325a0 <altera_avalon_jtag_uart_write_fd+0xc>
8113259c:	003b68fa 	trap	3
811325a0:	dfc00515 	stw	ra,20(sp)
811325a4:	df000415 	stw	fp,16(sp)
811325a8:	df000404 	addi	fp,sp,16
811325ac:	e13ffd15 	stw	r4,-12(fp)
811325b0:	e17ffe15 	stw	r5,-8(fp)
811325b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
811325b8:	e0bffd17 	ldw	r2,-12(fp)
811325bc:	10800017 	ldw	r2,0(r2)
811325c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
811325c4:	e0bffc17 	ldw	r2,-16(fp)
811325c8:	10c00a04 	addi	r3,r2,40
811325cc:	e0bffd17 	ldw	r2,-12(fp)
811325d0:	10800217 	ldw	r2,8(r2)
811325d4:	100f883a 	mov	r7,r2
811325d8:	e1bfff17 	ldw	r6,-4(fp)
811325dc:	e17ffe17 	ldw	r5,-8(fp)
811325e0:	1809883a 	mov	r4,r3
811325e4:	1132fe40 	call	81132fe4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
811325e8:	e037883a 	mov	sp,fp
811325ec:	dfc00117 	ldw	ra,4(sp)
811325f0:	df000017 	ldw	fp,0(sp)
811325f4:	dec00204 	addi	sp,sp,8
811325f8:	f800283a 	ret

811325fc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
811325fc:	defffc04 	addi	sp,sp,-16
81132600:	de00012e 	bgeu	sp,et,81132608 <altera_avalon_jtag_uart_close_fd+0xc>
81132604:	003b68fa 	trap	3
81132608:	dfc00315 	stw	ra,12(sp)
8113260c:	df000215 	stw	fp,8(sp)
81132610:	df000204 	addi	fp,sp,8
81132614:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81132618:	e0bfff17 	ldw	r2,-4(fp)
8113261c:	10800017 	ldw	r2,0(r2)
81132620:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81132624:	e0bffe17 	ldw	r2,-8(fp)
81132628:	10c00a04 	addi	r3,r2,40
8113262c:	e0bfff17 	ldw	r2,-4(fp)
81132630:	10800217 	ldw	r2,8(r2)
81132634:	100b883a 	mov	r5,r2
81132638:	1809883a 	mov	r4,r3
8113263c:	1132bb80 	call	81132bb8 <altera_avalon_jtag_uart_close>
}
81132640:	e037883a 	mov	sp,fp
81132644:	dfc00117 	ldw	ra,4(sp)
81132648:	df000017 	ldw	fp,0(sp)
8113264c:	dec00204 	addi	sp,sp,8
81132650:	f800283a 	ret

81132654 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81132654:	defffa04 	addi	sp,sp,-24
81132658:	de00012e 	bgeu	sp,et,81132660 <altera_avalon_jtag_uart_ioctl_fd+0xc>
8113265c:	003b68fa 	trap	3
81132660:	dfc00515 	stw	ra,20(sp)
81132664:	df000415 	stw	fp,16(sp)
81132668:	df000404 	addi	fp,sp,16
8113266c:	e13ffd15 	stw	r4,-12(fp)
81132670:	e17ffe15 	stw	r5,-8(fp)
81132674:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
81132678:	e0bffd17 	ldw	r2,-12(fp)
8113267c:	10800017 	ldw	r2,0(r2)
81132680:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81132684:	e0bffc17 	ldw	r2,-16(fp)
81132688:	10800a04 	addi	r2,r2,40
8113268c:	e1bfff17 	ldw	r6,-4(fp)
81132690:	e17ffe17 	ldw	r5,-8(fp)
81132694:	1009883a 	mov	r4,r2
81132698:	1132c280 	call	81132c28 <altera_avalon_jtag_uart_ioctl>
}
8113269c:	e037883a 	mov	sp,fp
811326a0:	dfc00117 	ldw	ra,4(sp)
811326a4:	df000017 	ldw	fp,0(sp)
811326a8:	dec00204 	addi	sp,sp,8
811326ac:	f800283a 	ret

811326b0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
811326b0:	defff104 	addi	sp,sp,-60
811326b4:	de00012e 	bgeu	sp,et,811326bc <altera_avalon_jtag_uart_init+0xc>
811326b8:	003b68fa 	trap	3
811326bc:	dfc00e15 	stw	ra,56(sp)
811326c0:	df000d15 	stw	fp,52(sp)
811326c4:	df000d04 	addi	fp,sp,52
811326c8:	e13ff915 	stw	r4,-28(fp)
811326cc:	e17ffa15 	stw	r5,-24(fp)
811326d0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
811326d4:	e0bff917 	ldw	r2,-28(fp)
811326d8:	10800c04 	addi	r2,r2,48
811326dc:	e0bff415 	stw	r2,-48(fp)
811326e0:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
811326e4:	e0bff80b 	ldhu	r2,-32(fp)
811326e8:	e0fff884 	addi	r3,fp,-30
811326ec:	180b883a 	mov	r5,r3
811326f0:	1009883a 	mov	r4,r2
811326f4:	11268800 	call	81126880 <OSFlagCreate>
811326f8:	1007883a 	mov	r3,r2
811326fc:	e0bff417 	ldw	r2,-48(fp)
81132700:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81132704:	e0bff917 	ldw	r2,-28(fp)
81132708:	10800a04 	addi	r2,r2,40
8113270c:	e0bff515 	stw	r2,-44(fp)
81132710:	00800044 	movi	r2,1
81132714:	e0bff78d 	sth	r2,-34(fp)
81132718:	e0bff78b 	ldhu	r2,-34(fp)
8113271c:	1009883a 	mov	r4,r2
81132720:	112a7dc0 	call	8112a7dc <OSSemCreate>
81132724:	1007883a 	mov	r3,r2
81132728:	e0bff517 	ldw	r2,-44(fp)
8113272c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
81132730:	e0bff917 	ldw	r2,-28(fp)
81132734:	10800b04 	addi	r2,r2,44
81132738:	e0bff615 	stw	r2,-40(fp)
8113273c:	00800044 	movi	r2,1
81132740:	e0bff70d 	sth	r2,-36(fp)
81132744:	e0bff70b 	ldhu	r2,-36(fp)
81132748:	1009883a 	mov	r4,r2
8113274c:	112a7dc0 	call	8112a7dc <OSSemCreate>
81132750:	1007883a 	mov	r3,r2
81132754:	e0bff617 	ldw	r2,-40(fp)
81132758:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8113275c:	e0bff917 	ldw	r2,-28(fp)
81132760:	00c00044 	movi	r3,1
81132764:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81132768:	e0bff917 	ldw	r2,-28(fp)
8113276c:	10800017 	ldw	r2,0(r2)
81132770:	10800104 	addi	r2,r2,4
81132774:	1007883a 	mov	r3,r2
81132778:	e0bff917 	ldw	r2,-28(fp)
8113277c:	10800817 	ldw	r2,32(r2)
81132780:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81132784:	e0bffa17 	ldw	r2,-24(fp)
81132788:	e0fffb17 	ldw	r3,-20(fp)
8113278c:	d8000015 	stw	zero,0(sp)
81132790:	e1fff917 	ldw	r7,-28(fp)
81132794:	01a044f4 	movhi	r6,33043
81132798:	318a0004 	addi	r6,r6,10240
8113279c:	180b883a 	mov	r5,r3
811327a0:	1009883a 	mov	r4,r2
811327a4:	11375980 	call	81137598 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
811327a8:	e0bff917 	ldw	r2,-28(fp)
811327ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
811327b0:	e0bff917 	ldw	r2,-28(fp)
811327b4:	10800204 	addi	r2,r2,8
811327b8:	d0e07617 	ldw	r3,-32296(gp)
811327bc:	e1fff917 	ldw	r7,-28(fp)
811327c0:	01a044f4 	movhi	r6,33043
811327c4:	318aab04 	addi	r6,r6,10924
811327c8:	180b883a 	mov	r5,r3
811327cc:	1009883a 	mov	r4,r2
811327d0:	1136eb80 	call	81136eb8 <alt_alarm_start>
811327d4:	1000040e 	bge	r2,zero,811327e8 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
811327d8:	e0fff917 	ldw	r3,-28(fp)
811327dc:	00a00034 	movhi	r2,32768
811327e0:	10bfffc4 	addi	r2,r2,-1
811327e4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
811327e8:	0001883a 	nop
811327ec:	e037883a 	mov	sp,fp
811327f0:	dfc00117 	ldw	ra,4(sp)
811327f4:	df000017 	ldw	fp,0(sp)
811327f8:	dec00204 	addi	sp,sp,8
811327fc:	f800283a 	ret

81132800 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81132800:	defff204 	addi	sp,sp,-56
81132804:	de00012e 	bgeu	sp,et,8113280c <altera_avalon_jtag_uart_irq+0xc>
81132808:	003b68fa 	trap	3
8113280c:	dfc00d15 	stw	ra,52(sp)
81132810:	df000c15 	stw	fp,48(sp)
81132814:	df000c04 	addi	fp,sp,48
81132818:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8113281c:	e0bfff17 	ldw	r2,-4(fp)
81132820:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
81132824:	e0bff617 	ldw	r2,-40(fp)
81132828:	10800017 	ldw	r2,0(r2)
8113282c:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81132830:	e0bff717 	ldw	r2,-36(fp)
81132834:	10800104 	addi	r2,r2,4
81132838:	10800037 	ldwio	r2,0(r2)
8113283c:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81132840:	e0bff817 	ldw	r2,-32(fp)
81132844:	1080c00c 	andi	r2,r2,768
81132848:	10009126 	beq	r2,zero,81132a90 <altera_avalon_jtag_uart_irq+0x290>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8113284c:	e0bff817 	ldw	r2,-32(fp)
81132850:	1080400c 	andi	r2,r2,256
81132854:	10004726 	beq	r2,zero,81132974 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81132858:	00800074 	movhi	r2,1
8113285c:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81132860:	e0bff617 	ldw	r2,-40(fp)
81132864:	10800d17 	ldw	r2,52(r2)
81132868:	10800044 	addi	r2,r2,1
8113286c:	1081ffcc 	andi	r2,r2,2047
81132870:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81132874:	e0bff617 	ldw	r2,-40(fp)
81132878:	10c00e17 	ldw	r3,56(r2)
8113287c:	e0bff917 	ldw	r2,-28(fp)
81132880:	18802726 	beq	r3,r2,81132920 <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81132884:	e0bff717 	ldw	r2,-36(fp)
81132888:	10800037 	ldwio	r2,0(r2)
8113288c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81132890:	e0bff417 	ldw	r2,-48(fp)
81132894:	10a0000c 	andi	r2,r2,32768
81132898:	10002326 	beq	r2,zero,81132928 <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8113289c:	e0bff617 	ldw	r2,-40(fp)
811328a0:	10800d17 	ldw	r2,52(r2)
811328a4:	e0fff417 	ldw	r3,-48(fp)
811328a8:	1809883a 	mov	r4,r3
811328ac:	e0fff617 	ldw	r3,-40(fp)
811328b0:	1885883a 	add	r2,r3,r2
811328b4:	10801104 	addi	r2,r2,68
811328b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811328bc:	e0bff617 	ldw	r2,-40(fp)
811328c0:	10800d17 	ldw	r2,52(r2)
811328c4:	10800044 	addi	r2,r2,1
811328c8:	10c1ffcc 	andi	r3,r2,2047
811328cc:	e0bff617 	ldw	r2,-40(fp)
811328d0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
811328d4:	e0bff617 	ldw	r2,-40(fp)
811328d8:	10800c17 	ldw	r2,48(r2)
811328dc:	e0bffb15 	stw	r2,-20(fp)
811328e0:	00800044 	movi	r2,1
811328e4:	e0bffc0d 	sth	r2,-16(fp)
811328e8:	00800044 	movi	r2,1
811328ec:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811328f0:	d0a07f03 	ldbu	r2,-32260(gp)
811328f4:	10803fcc 	andi	r2,r2,255
811328f8:	103fd926 	beq	r2,zero,81132860 <__reset+0xfb112860>
  {
    OSFlagPost (group, flags, opt, &err);
811328fc:	e0bffc0b 	ldhu	r2,-16(fp)
81132900:	e0fffc83 	ldbu	r3,-14(fp)
81132904:	e13ffdc4 	addi	r4,fp,-9
81132908:	200f883a 	mov	r7,r4
8113290c:	180d883a 	mov	r6,r3
81132910:	100b883a 	mov	r5,r2
81132914:	e13ffb17 	ldw	r4,-20(fp)
81132918:	112748c0 	call	8112748c <OSFlagPost>
      }
8113291c:	003fd006 	br	81132860 <__reset+0xfb112860>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81132920:	0001883a 	nop
81132924:	00000106 	br	8113292c <altera_avalon_jtag_uart_irq+0x12c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81132928:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8113292c:	e0bff417 	ldw	r2,-48(fp)
81132930:	10bfffec 	andhi	r2,r2,65535
81132934:	10000f26 	beq	r2,zero,81132974 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81132938:	e0bff617 	ldw	r2,-40(fp)
8113293c:	10c00817 	ldw	r3,32(r2)
81132940:	00bfff84 	movi	r2,-2
81132944:	1886703a 	and	r3,r3,r2
81132948:	e0bff617 	ldw	r2,-40(fp)
8113294c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81132950:	e0bff717 	ldw	r2,-36(fp)
81132954:	10800104 	addi	r2,r2,4
81132958:	1007883a 	mov	r3,r2
8113295c:	e0bff617 	ldw	r2,-40(fp)
81132960:	10800817 	ldw	r2,32(r2)
81132964:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81132968:	e0bff717 	ldw	r2,-36(fp)
8113296c:	10800104 	addi	r2,r2,4
81132970:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81132974:	e0bff817 	ldw	r2,-32(fp)
81132978:	1080800c 	andi	r2,r2,512
8113297c:	103fac26 	beq	r2,zero,81132830 <__reset+0xfb112830>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
81132980:	e0bff817 	ldw	r2,-32(fp)
81132984:	1004d43a 	srli	r2,r2,16
81132988:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8113298c:	00002606 	br	81132a28 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
81132990:	e0bff717 	ldw	r2,-36(fp)
81132994:	e0fff617 	ldw	r3,-40(fp)
81132998:	18c01017 	ldw	r3,64(r3)
8113299c:	e13ff617 	ldw	r4,-40(fp)
811329a0:	20c7883a 	add	r3,r4,r3
811329a4:	18c21104 	addi	r3,r3,2116
811329a8:	18c00003 	ldbu	r3,0(r3)
811329ac:	18c03fcc 	andi	r3,r3,255
811329b0:	18c0201c 	xori	r3,r3,128
811329b4:	18ffe004 	addi	r3,r3,-128
811329b8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811329bc:	e0bff617 	ldw	r2,-40(fp)
811329c0:	10801017 	ldw	r2,64(r2)
811329c4:	10800044 	addi	r2,r2,1
811329c8:	10c1ffcc 	andi	r3,r2,2047
811329cc:	e0bff617 	ldw	r2,-40(fp)
811329d0:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
811329d4:	e0bff617 	ldw	r2,-40(fp)
811329d8:	10800c17 	ldw	r2,48(r2)
811329dc:	e0bffa15 	stw	r2,-24(fp)
811329e0:	00800084 	movi	r2,2
811329e4:	e0bffd0d 	sth	r2,-12(fp)
811329e8:	00800044 	movi	r2,1
811329ec:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811329f0:	d0a07f03 	ldbu	r2,-32260(gp)
811329f4:	10803fcc 	andi	r2,r2,255
811329f8:	10000826 	beq	r2,zero,81132a1c <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
811329fc:	e0bffd0b 	ldhu	r2,-12(fp)
81132a00:	e0fffd83 	ldbu	r3,-10(fp)
81132a04:	e13ffe04 	addi	r4,fp,-8
81132a08:	200f883a 	mov	r7,r4
81132a0c:	180d883a 	mov	r6,r3
81132a10:	100b883a 	mov	r5,r2
81132a14:	e13ffa17 	ldw	r4,-24(fp)
81132a18:	112748c0 	call	8112748c <OSFlagPost>

        space--;
81132a1c:	e0bff517 	ldw	r2,-44(fp)
81132a20:	10bfffc4 	addi	r2,r2,-1
81132a24:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
81132a28:	e0bff517 	ldw	r2,-44(fp)
81132a2c:	10000526 	beq	r2,zero,81132a44 <altera_avalon_jtag_uart_irq+0x244>
81132a30:	e0bff617 	ldw	r2,-40(fp)
81132a34:	10c01017 	ldw	r3,64(r2)
81132a38:	e0bff617 	ldw	r2,-40(fp)
81132a3c:	10800f17 	ldw	r2,60(r2)
81132a40:	18bfd31e 	bne	r3,r2,81132990 <__reset+0xfb112990>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
81132a44:	e0bff517 	ldw	r2,-44(fp)
81132a48:	103f7926 	beq	r2,zero,81132830 <__reset+0xfb112830>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81132a4c:	e0bff617 	ldw	r2,-40(fp)
81132a50:	10c00817 	ldw	r3,32(r2)
81132a54:	00bfff44 	movi	r2,-3
81132a58:	1886703a 	and	r3,r3,r2
81132a5c:	e0bff617 	ldw	r2,-40(fp)
81132a60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81132a64:	e0bff617 	ldw	r2,-40(fp)
81132a68:	10800017 	ldw	r2,0(r2)
81132a6c:	10800104 	addi	r2,r2,4
81132a70:	1007883a 	mov	r3,r2
81132a74:	e0bff617 	ldw	r2,-40(fp)
81132a78:	10800817 	ldw	r2,32(r2)
81132a7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81132a80:	e0bff717 	ldw	r2,-36(fp)
81132a84:	10800104 	addi	r2,r2,4
81132a88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81132a8c:	003f6806 	br	81132830 <__reset+0xfb112830>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
81132a90:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81132a94:	0001883a 	nop
81132a98:	e037883a 	mov	sp,fp
81132a9c:	dfc00117 	ldw	ra,4(sp)
81132aa0:	df000017 	ldw	fp,0(sp)
81132aa4:	dec00204 	addi	sp,sp,8
81132aa8:	f800283a 	ret

81132aac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81132aac:	defff904 	addi	sp,sp,-28
81132ab0:	de00012e 	bgeu	sp,et,81132ab8 <altera_avalon_jtag_uart_timeout+0xc>
81132ab4:	003b68fa 	trap	3
81132ab8:	dfc00615 	stw	ra,24(sp)
81132abc:	df000515 	stw	fp,20(sp)
81132ac0:	df000504 	addi	fp,sp,20
81132ac4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81132ac8:	e0bfff17 	ldw	r2,-4(fp)
81132acc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
81132ad0:	e0bffb17 	ldw	r2,-20(fp)
81132ad4:	10800017 	ldw	r2,0(r2)
81132ad8:	10800104 	addi	r2,r2,4
81132adc:	10800037 	ldwio	r2,0(r2)
81132ae0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81132ae4:	e0bffc17 	ldw	r2,-16(fp)
81132ae8:	1081000c 	andi	r2,r2,1024
81132aec:	10000b26 	beq	r2,zero,81132b1c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
81132af0:	e0bffb17 	ldw	r2,-20(fp)
81132af4:	10800017 	ldw	r2,0(r2)
81132af8:	10800104 	addi	r2,r2,4
81132afc:	1007883a 	mov	r3,r2
81132b00:	e0bffb17 	ldw	r2,-20(fp)
81132b04:	10800817 	ldw	r2,32(r2)
81132b08:	10810014 	ori	r2,r2,1024
81132b0c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
81132b10:	e0bffb17 	ldw	r2,-20(fp)
81132b14:	10000915 	stw	zero,36(r2)
81132b18:	00002106 	br	81132ba0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
81132b1c:	e0bffb17 	ldw	r2,-20(fp)
81132b20:	10c00917 	ldw	r3,36(r2)
81132b24:	00a00034 	movhi	r2,32768
81132b28:	10bfff04 	addi	r2,r2,-4
81132b2c:	10c01c36 	bltu	r2,r3,81132ba0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
81132b30:	e0bffb17 	ldw	r2,-20(fp)
81132b34:	10800917 	ldw	r2,36(r2)
81132b38:	10c00044 	addi	r3,r2,1
81132b3c:	e0bffb17 	ldw	r2,-20(fp)
81132b40:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
81132b44:	e0bffb17 	ldw	r2,-20(fp)
81132b48:	10c00917 	ldw	r3,36(r2)
81132b4c:	e0bffb17 	ldw	r2,-20(fp)
81132b50:	10800117 	ldw	r2,4(r2)
81132b54:	18801236 	bltu	r3,r2,81132ba0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
81132b58:	e0bffb17 	ldw	r2,-20(fp)
81132b5c:	10800c17 	ldw	r2,48(r2)
81132b60:	e0bffd15 	stw	r2,-12(fp)
81132b64:	00800104 	movi	r2,4
81132b68:	e0bffe0d 	sth	r2,-8(fp)
81132b6c:	00800044 	movi	r2,1
81132b70:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81132b74:	d0a07f03 	ldbu	r2,-32260(gp)
81132b78:	10803fcc 	andi	r2,r2,255
81132b7c:	10000826 	beq	r2,zero,81132ba0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
81132b80:	e0bffe0b 	ldhu	r2,-8(fp)
81132b84:	e0fffe83 	ldbu	r3,-6(fp)
81132b88:	e13ffec4 	addi	r4,fp,-5
81132b8c:	200f883a 	mov	r7,r4
81132b90:	180d883a 	mov	r6,r3
81132b94:	100b883a 	mov	r5,r2
81132b98:	e13ffd17 	ldw	r4,-12(fp)
81132b9c:	112748c0 	call	8112748c <OSFlagPost>
81132ba0:	d0a07617 	ldw	r2,-32296(gp)
    }
  }

  return alt_ticks_per_second();
}
81132ba4:	e037883a 	mov	sp,fp
81132ba8:	dfc00117 	ldw	ra,4(sp)
81132bac:	df000017 	ldw	fp,0(sp)
81132bb0:	dec00204 	addi	sp,sp,8
81132bb4:	f800283a 	ret

81132bb8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81132bb8:	defffd04 	addi	sp,sp,-12
81132bbc:	de00012e 	bgeu	sp,et,81132bc4 <altera_avalon_jtag_uart_close+0xc>
81132bc0:	003b68fa 	trap	3
81132bc4:	df000215 	stw	fp,8(sp)
81132bc8:	df000204 	addi	fp,sp,8
81132bcc:	e13ffe15 	stw	r4,-8(fp)
81132bd0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81132bd4:	00000506 	br	81132bec <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81132bd8:	e0bfff17 	ldw	r2,-4(fp)
81132bdc:	1090000c 	andi	r2,r2,16384
81132be0:	10000226 	beq	r2,zero,81132bec <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81132be4:	00bffd44 	movi	r2,-11
81132be8:	00000b06 	br	81132c18 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81132bec:	e0bffe17 	ldw	r2,-8(fp)
81132bf0:	10c01017 	ldw	r3,64(r2)
81132bf4:	e0bffe17 	ldw	r2,-8(fp)
81132bf8:	10800f17 	ldw	r2,60(r2)
81132bfc:	18800526 	beq	r3,r2,81132c14 <altera_avalon_jtag_uart_close+0x5c>
81132c00:	e0bffe17 	ldw	r2,-8(fp)
81132c04:	10c00917 	ldw	r3,36(r2)
81132c08:	e0bffe17 	ldw	r2,-8(fp)
81132c0c:	10800117 	ldw	r2,4(r2)
81132c10:	18bff136 	bltu	r3,r2,81132bd8 <__reset+0xfb112bd8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81132c14:	0005883a 	mov	r2,zero
}
81132c18:	e037883a 	mov	sp,fp
81132c1c:	df000017 	ldw	fp,0(sp)
81132c20:	dec00104 	addi	sp,sp,4
81132c24:	f800283a 	ret

81132c28 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
81132c28:	defffa04 	addi	sp,sp,-24
81132c2c:	de00012e 	bgeu	sp,et,81132c34 <altera_avalon_jtag_uart_ioctl+0xc>
81132c30:	003b68fa 	trap	3
81132c34:	df000515 	stw	fp,20(sp)
81132c38:	df000504 	addi	fp,sp,20
81132c3c:	e13ffd15 	stw	r4,-12(fp)
81132c40:	e17ffe15 	stw	r5,-8(fp)
81132c44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
81132c48:	00bff9c4 	movi	r2,-25
81132c4c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
81132c50:	e0bffe17 	ldw	r2,-8(fp)
81132c54:	10da8060 	cmpeqi	r3,r2,27137
81132c58:	1800031e 	bne	r3,zero,81132c68 <altera_avalon_jtag_uart_ioctl+0x40>
81132c5c:	109a80a0 	cmpeqi	r2,r2,27138
81132c60:	1000181e 	bne	r2,zero,81132cc4 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
81132c64:	00002906 	br	81132d0c <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
81132c68:	e0bffd17 	ldw	r2,-12(fp)
81132c6c:	10c00117 	ldw	r3,4(r2)
81132c70:	00a00034 	movhi	r2,32768
81132c74:	10bfffc4 	addi	r2,r2,-1
81132c78:	18802126 	beq	r3,r2,81132d00 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
81132c7c:	e0bfff17 	ldw	r2,-4(fp)
81132c80:	10800017 	ldw	r2,0(r2)
81132c84:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81132c88:	e0bffc17 	ldw	r2,-16(fp)
81132c8c:	10800090 	cmplti	r2,r2,2
81132c90:	1000061e 	bne	r2,zero,81132cac <altera_avalon_jtag_uart_ioctl+0x84>
81132c94:	e0fffc17 	ldw	r3,-16(fp)
81132c98:	00a00034 	movhi	r2,32768
81132c9c:	10bfffc4 	addi	r2,r2,-1
81132ca0:	18800226 	beq	r3,r2,81132cac <altera_avalon_jtag_uart_ioctl+0x84>
81132ca4:	e0bffc17 	ldw	r2,-16(fp)
81132ca8:	00000206 	br	81132cb4 <altera_avalon_jtag_uart_ioctl+0x8c>
81132cac:	00a00034 	movhi	r2,32768
81132cb0:	10bfff84 	addi	r2,r2,-2
81132cb4:	e0fffd17 	ldw	r3,-12(fp)
81132cb8:	18800115 	stw	r2,4(r3)
      rc = 0;
81132cbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81132cc0:	00000f06 	br	81132d00 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81132cc4:	e0bffd17 	ldw	r2,-12(fp)
81132cc8:	10c00117 	ldw	r3,4(r2)
81132ccc:	00a00034 	movhi	r2,32768
81132cd0:	10bfffc4 	addi	r2,r2,-1
81132cd4:	18800c26 	beq	r3,r2,81132d08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81132cd8:	e0bffd17 	ldw	r2,-12(fp)
81132cdc:	10c00917 	ldw	r3,36(r2)
81132ce0:	e0bffd17 	ldw	r2,-12(fp)
81132ce4:	10800117 	ldw	r2,4(r2)
81132ce8:	1885803a 	cmpltu	r2,r3,r2
81132cec:	10c03fcc 	andi	r3,r2,255
81132cf0:	e0bfff17 	ldw	r2,-4(fp)
81132cf4:	10c00015 	stw	r3,0(r2)
      rc = 0;
81132cf8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81132cfc:	00000206 	br	81132d08 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
81132d00:	0001883a 	nop
81132d04:	00000106 	br	81132d0c <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81132d08:	0001883a 	nop

  default:
    break;
  }

  return rc;
81132d0c:	e0bffb17 	ldw	r2,-20(fp)
}
81132d10:	e037883a 	mov	sp,fp
81132d14:	df000017 	ldw	fp,0(sp)
81132d18:	dec00104 	addi	sp,sp,4
81132d1c:	f800283a 	ret

81132d20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
81132d20:	deffed04 	addi	sp,sp,-76
81132d24:	de00012e 	bgeu	sp,et,81132d2c <altera_avalon_jtag_uart_read+0xc>
81132d28:	003b68fa 	trap	3
81132d2c:	dfc01215 	stw	ra,72(sp)
81132d30:	df001115 	stw	fp,68(sp)
81132d34:	df001104 	addi	fp,sp,68
81132d38:	e13ffc15 	stw	r4,-16(fp)
81132d3c:	e17ffd15 	stw	r5,-12(fp)
81132d40:	e1bffe15 	stw	r6,-8(fp)
81132d44:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
81132d48:	e0bffd17 	ldw	r2,-12(fp)
81132d4c:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
81132d50:	e0bffc17 	ldw	r2,-16(fp)
81132d54:	10800a17 	ldw	r2,40(r2)
81132d58:	e0bff815 	stw	r2,-32(fp)
81132d5c:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81132d60:	e0bff90b 	ldhu	r2,-28(fp)
81132d64:	e0fffb04 	addi	r3,fp,-20
81132d68:	180d883a 	mov	r6,r3
81132d6c:	100b883a 	mov	r5,r2
81132d70:	e13ff817 	ldw	r4,-32(fp)
81132d74:	112ab040 	call	8112ab04 <OSSemPend>

  while (space > 0)
81132d78:	00006106 	br	81132f00 <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81132d7c:	e0bffc17 	ldw	r2,-16(fp)
81132d80:	10800d17 	ldw	r2,52(r2)
81132d84:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
81132d88:	e0bffc17 	ldw	r2,-16(fp)
81132d8c:	10800e17 	ldw	r2,56(r2)
81132d90:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81132d94:	e0fff317 	ldw	r3,-52(fp)
81132d98:	e0bff417 	ldw	r2,-48(fp)
81132d9c:	18800536 	bltu	r3,r2,81132db4 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
81132da0:	e0fff317 	ldw	r3,-52(fp)
81132da4:	e0bff417 	ldw	r2,-48(fp)
81132da8:	1885c83a 	sub	r2,r3,r2
81132dac:	e0bff115 	stw	r2,-60(fp)
81132db0:	00000406 	br	81132dc4 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81132db4:	00c20004 	movi	r3,2048
81132db8:	e0bff417 	ldw	r2,-48(fp)
81132dbc:	1885c83a 	sub	r2,r3,r2
81132dc0:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81132dc4:	e0bff117 	ldw	r2,-60(fp)
81132dc8:	10001e26 	beq	r2,zero,81132e44 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
81132dcc:	e0fffe17 	ldw	r3,-8(fp)
81132dd0:	e0bff117 	ldw	r2,-60(fp)
81132dd4:	1880022e 	bgeu	r3,r2,81132de0 <altera_avalon_jtag_uart_read+0xc0>
        n = space;
81132dd8:	e0bffe17 	ldw	r2,-8(fp)
81132ddc:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
81132de0:	e0bffc17 	ldw	r2,-16(fp)
81132de4:	10c01104 	addi	r3,r2,68
81132de8:	e0bff417 	ldw	r2,-48(fp)
81132dec:	1885883a 	add	r2,r3,r2
81132df0:	e1bff117 	ldw	r6,-60(fp)
81132df4:	100b883a 	mov	r5,r2
81132df8:	e13ff017 	ldw	r4,-64(fp)
81132dfc:	110e8e00 	call	8110e8e0 <memcpy>
      ptr   += n;
81132e00:	e0fff017 	ldw	r3,-64(fp)
81132e04:	e0bff117 	ldw	r2,-60(fp)
81132e08:	1885883a 	add	r2,r3,r2
81132e0c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
81132e10:	e0fffe17 	ldw	r3,-8(fp)
81132e14:	e0bff117 	ldw	r2,-60(fp)
81132e18:	1885c83a 	sub	r2,r3,r2
81132e1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81132e20:	e0fff417 	ldw	r3,-48(fp)
81132e24:	e0bff117 	ldw	r2,-60(fp)
81132e28:	1885883a 	add	r2,r3,r2
81132e2c:	10c1ffcc 	andi	r3,r2,2047
81132e30:	e0bffc17 	ldw	r2,-16(fp)
81132e34:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
81132e38:	e0bffe17 	ldw	r2,-8(fp)
81132e3c:	00bfcf16 	blt	zero,r2,81132d7c <__reset+0xfb112d7c>
81132e40:	00000106 	br	81132e48 <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
81132e44:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
81132e48:	e0fff017 	ldw	r3,-64(fp)
81132e4c:	e0bffd17 	ldw	r2,-12(fp)
81132e50:	18802e1e 	bne	r3,r2,81132f0c <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
81132e54:	e0bfff17 	ldw	r2,-4(fp)
81132e58:	1090000c 	andi	r2,r2,16384
81132e5c:	10002d1e 	bne	r2,zero,81132f14 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
81132e60:	d0a07f03 	ldbu	r2,-32260(gp)
81132e64:	10803fcc 	andi	r2,r2,255
81132e68:	10800058 	cmpnei	r2,r2,1
81132e6c:	1000161e 	bne	r2,zero,81132ec8 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
81132e70:	e0bffc17 	ldw	r2,-16(fp)
81132e74:	10800c17 	ldw	r2,48(r2)
81132e78:	e0bff215 	stw	r2,-56(fp)
81132e7c:	00800144 	movi	r2,5
81132e80:	e0bff98d 	sth	r2,-26(fp)
81132e84:	00bfe0c4 	movi	r2,-125
81132e88:	e0bffa05 	stb	r2,-24(fp)
81132e8c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81132e90:	d0a07f03 	ldbu	r2,-32260(gp)
81132e94:	10803fcc 	andi	r2,r2,255
81132e98:	10001526 	beq	r2,zero,81132ef0 <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81132e9c:	e0fff98b 	ldhu	r3,-26(fp)
81132ea0:	e13ffa03 	ldbu	r4,-24(fp)
81132ea4:	e17ffa8b 	ldhu	r5,-22(fp)
81132ea8:	e0bffb44 	addi	r2,fp,-19
81132eac:	d8800015 	stw	r2,0(sp)
81132eb0:	280f883a 	mov	r7,r5
81132eb4:	200d883a 	mov	r6,r4
81132eb8:	180b883a 	mov	r5,r3
81132ebc:	e13ff217 	ldw	r4,-56(fp)
81132ec0:	1126e640 	call	81126e64 <OSFlagPend>
81132ec4:	00000a06 	br	81132ef0 <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81132ec8:	0001883a 	nop
81132ecc:	e0bffc17 	ldw	r2,-16(fp)
81132ed0:	10c00d17 	ldw	r3,52(r2)
81132ed4:	e0bff317 	ldw	r2,-52(fp)
81132ed8:	1880051e 	bne	r3,r2,81132ef0 <altera_avalon_jtag_uart_read+0x1d0>
81132edc:	e0bffc17 	ldw	r2,-16(fp)
81132ee0:	10c00917 	ldw	r3,36(r2)
81132ee4:	e0bffc17 	ldw	r2,-16(fp)
81132ee8:	10800117 	ldw	r2,4(r2)
81132eec:	18bff736 	bltu	r3,r2,81132ecc <__reset+0xfb112ecc>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81132ef0:	e0bffc17 	ldw	r2,-16(fp)
81132ef4:	10c00d17 	ldw	r3,52(r2)
81132ef8:	e0bff317 	ldw	r2,-52(fp)
81132efc:	18800726 	beq	r3,r2,81132f1c <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81132f00:	e0bffe17 	ldw	r2,-8(fp)
81132f04:	00bf9d16 	blt	zero,r2,81132d7c <__reset+0xfb112d7c>
81132f08:	00000506 	br	81132f20 <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81132f0c:	0001883a 	nop
81132f10:	00000306 	br	81132f20 <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81132f14:	0001883a 	nop
81132f18:	00000106 	br	81132f20 <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
81132f1c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81132f20:	e0bffc17 	ldw	r2,-16(fp)
81132f24:	10800a17 	ldw	r2,40(r2)
81132f28:	1009883a 	mov	r4,r2
81132f2c:	112ae8c0 	call	8112ae8c <OSSemPost>

  if (ptr != buffer)
81132f30:	e0fff017 	ldw	r3,-64(fp)
81132f34:	e0bffd17 	ldw	r2,-12(fp)
81132f38:	18801826 	beq	r3,r2,81132f9c <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132f3c:	0005303a 	rdctl	r2,status
81132f40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132f44:	e0fff717 	ldw	r3,-36(fp)
81132f48:	00bfff84 	movi	r2,-2
81132f4c:	1884703a 	and	r2,r3,r2
81132f50:	1001703a 	wrctl	status,r2
  
  return context;
81132f54:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
81132f58:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81132f5c:	e0bffc17 	ldw	r2,-16(fp)
81132f60:	10800817 	ldw	r2,32(r2)
81132f64:	10c00054 	ori	r3,r2,1
81132f68:	e0bffc17 	ldw	r2,-16(fp)
81132f6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81132f70:	e0bffc17 	ldw	r2,-16(fp)
81132f74:	10800017 	ldw	r2,0(r2)
81132f78:	10800104 	addi	r2,r2,4
81132f7c:	1007883a 	mov	r3,r2
81132f80:	e0bffc17 	ldw	r2,-16(fp)
81132f84:	10800817 	ldw	r2,32(r2)
81132f88:	18800035 	stwio	r2,0(r3)
81132f8c:	e0bff617 	ldw	r2,-40(fp)
81132f90:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132f94:	e0bff517 	ldw	r2,-44(fp)
81132f98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81132f9c:	e0fff017 	ldw	r3,-64(fp)
81132fa0:	e0bffd17 	ldw	r2,-12(fp)
81132fa4:	18800426 	beq	r3,r2,81132fb8 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
81132fa8:	e0fff017 	ldw	r3,-64(fp)
81132fac:	e0bffd17 	ldw	r2,-12(fp)
81132fb0:	1885c83a 	sub	r2,r3,r2
81132fb4:	00000606 	br	81132fd0 <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
81132fb8:	e0bfff17 	ldw	r2,-4(fp)
81132fbc:	1090000c 	andi	r2,r2,16384
81132fc0:	10000226 	beq	r2,zero,81132fcc <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
81132fc4:	00bffd44 	movi	r2,-11
81132fc8:	00000106 	br	81132fd0 <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
81132fcc:	00bffec4 	movi	r2,-5
}
81132fd0:	e037883a 	mov	sp,fp
81132fd4:	dfc00117 	ldw	ra,4(sp)
81132fd8:	df000017 	ldw	fp,0(sp)
81132fdc:	dec00204 	addi	sp,sp,8
81132fe0:	f800283a 	ret

81132fe4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81132fe4:	deffed04 	addi	sp,sp,-76
81132fe8:	de00012e 	bgeu	sp,et,81132ff0 <altera_avalon_jtag_uart_write+0xc>
81132fec:	003b68fa 	trap	3
81132ff0:	dfc01215 	stw	ra,72(sp)
81132ff4:	df001115 	stw	fp,68(sp)
81132ff8:	df001104 	addi	fp,sp,68
81132ffc:	e13ffc15 	stw	r4,-16(fp)
81133000:	e17ffd15 	stw	r5,-12(fp)
81133004:	e1bffe15 	stw	r6,-8(fp)
81133008:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
8113300c:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81133010:	e0bffd17 	ldw	r2,-12(fp)
81133014:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
81133018:	e0bffc17 	ldw	r2,-16(fp)
8113301c:	10800b17 	ldw	r2,44(r2)
81133020:	e0bff815 	stw	r2,-32(fp)
81133024:	e03ff90d 	sth	zero,-28(fp)
81133028:	e0bff90b 	ldhu	r2,-28(fp)
8113302c:	e0fffb44 	addi	r3,fp,-19
81133030:	180d883a 	mov	r6,r3
81133034:	100b883a 	mov	r5,r2
81133038:	e13ff817 	ldw	r4,-32(fp)
8113303c:	112ab040 	call	8112ab04 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81133040:	00003706 	br	81133120 <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
81133044:	e0bffc17 	ldw	r2,-16(fp)
81133048:	10800f17 	ldw	r2,60(r2)
8113304c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
81133050:	e0bffc17 	ldw	r2,-16(fp)
81133054:	10801017 	ldw	r2,64(r2)
81133058:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
8113305c:	e0fff417 	ldw	r3,-48(fp)
81133060:	e0bff017 	ldw	r2,-64(fp)
81133064:	1880062e 	bgeu	r3,r2,81133080 <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
81133068:	e0fff017 	ldw	r3,-64(fp)
8113306c:	e0bff417 	ldw	r2,-48(fp)
81133070:	1885c83a 	sub	r2,r3,r2
81133074:	10bfffc4 	addi	r2,r2,-1
81133078:	e0bff115 	stw	r2,-60(fp)
8113307c:	00000b06 	br	811330ac <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
81133080:	e0bff017 	ldw	r2,-64(fp)
81133084:	10000526 	beq	r2,zero,8113309c <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81133088:	00c20004 	movi	r3,2048
8113308c:	e0bff417 	ldw	r2,-48(fp)
81133090:	1885c83a 	sub	r2,r3,r2
81133094:	e0bff115 	stw	r2,-60(fp)
81133098:	00000406 	br	811330ac <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
8113309c:	00c1ffc4 	movi	r3,2047
811330a0:	e0bff417 	ldw	r2,-48(fp)
811330a4:	1885c83a 	sub	r2,r3,r2
811330a8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
811330ac:	e0bff117 	ldw	r2,-60(fp)
811330b0:	10001e26 	beq	r2,zero,8113312c <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
811330b4:	e0fffe17 	ldw	r3,-8(fp)
811330b8:	e0bff117 	ldw	r2,-60(fp)
811330bc:	1880022e 	bgeu	r3,r2,811330c8 <altera_avalon_jtag_uart_write+0xe4>
        n = count;
811330c0:	e0bffe17 	ldw	r2,-8(fp)
811330c4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
811330c8:	e0bffc17 	ldw	r2,-16(fp)
811330cc:	10c21104 	addi	r3,r2,2116
811330d0:	e0bff417 	ldw	r2,-48(fp)
811330d4:	1885883a 	add	r2,r3,r2
811330d8:	e1bff117 	ldw	r6,-60(fp)
811330dc:	e17ffd17 	ldw	r5,-12(fp)
811330e0:	1009883a 	mov	r4,r2
811330e4:	110e8e00 	call	8110e8e0 <memcpy>
      ptr   += n;
811330e8:	e0fffd17 	ldw	r3,-12(fp)
811330ec:	e0bff117 	ldw	r2,-60(fp)
811330f0:	1885883a 	add	r2,r3,r2
811330f4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
811330f8:	e0fffe17 	ldw	r3,-8(fp)
811330fc:	e0bff117 	ldw	r2,-60(fp)
81133100:	1885c83a 	sub	r2,r3,r2
81133104:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81133108:	e0fff417 	ldw	r3,-48(fp)
8113310c:	e0bff117 	ldw	r2,-60(fp)
81133110:	1885883a 	add	r2,r3,r2
81133114:	10c1ffcc 	andi	r3,r2,2047
81133118:	e0bffc17 	ldw	r2,-16(fp)
8113311c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81133120:	e0bffe17 	ldw	r2,-8(fp)
81133124:	00bfc716 	blt	zero,r2,81133044 <__reset+0xfb113044>
81133128:	00000106 	br	81133130 <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
8113312c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133130:	0005303a 	rdctl	r2,status
81133134:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133138:	e0fff717 	ldw	r3,-36(fp)
8113313c:	00bfff84 	movi	r2,-2
81133140:	1884703a 	and	r2,r3,r2
81133144:	1001703a 	wrctl	status,r2
  
  return context;
81133148:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
8113314c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
81133150:	e0bffc17 	ldw	r2,-16(fp)
81133154:	10800817 	ldw	r2,32(r2)
81133158:	10c00094 	ori	r3,r2,2
8113315c:	e0bffc17 	ldw	r2,-16(fp)
81133160:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
81133164:	e0bffc17 	ldw	r2,-16(fp)
81133168:	10800017 	ldw	r2,0(r2)
8113316c:	10800104 	addi	r2,r2,4
81133170:	1007883a 	mov	r3,r2
81133174:	e0bffc17 	ldw	r2,-16(fp)
81133178:	10800817 	ldw	r2,32(r2)
8113317c:	18800035 	stwio	r2,0(r3)
81133180:	e0bff617 	ldw	r2,-40(fp)
81133184:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133188:	e0bff317 	ldw	r2,-52(fp)
8113318c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
81133190:	e0bffe17 	ldw	r2,-8(fp)
81133194:	00802a0e 	bge	zero,r2,81133240 <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
81133198:	e0bfff17 	ldw	r2,-4(fp)
8113319c:	1090000c 	andi	r2,r2,16384
811331a0:	10002a1e 	bne	r2,zero,8113324c <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
811331a4:	d0a07f03 	ldbu	r2,-32260(gp)
811331a8:	10803fcc 	andi	r2,r2,255
811331ac:	10800058 	cmpnei	r2,r2,1
811331b0:	1000161e 	bne	r2,zero,8113320c <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
811331b4:	e0bffc17 	ldw	r2,-16(fp)
811331b8:	10800c17 	ldw	r2,48(r2)
811331bc:	e0bff515 	stw	r2,-44(fp)
811331c0:	00800184 	movi	r2,6
811331c4:	e0bff98d 	sth	r2,-26(fp)
811331c8:	00bfe0c4 	movi	r2,-125
811331cc:	e0bffa05 	stb	r2,-24(fp)
811331d0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
811331d4:	d0a07f03 	ldbu	r2,-32260(gp)
811331d8:	10803fcc 	andi	r2,r2,255
811331dc:	10001526 	beq	r2,zero,81133234 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
811331e0:	e0fff98b 	ldhu	r3,-26(fp)
811331e4:	e13ffa03 	ldbu	r4,-24(fp)
811331e8:	e17ffa8b 	ldhu	r5,-22(fp)
811331ec:	e0bffb04 	addi	r2,fp,-20
811331f0:	d8800015 	stw	r2,0(sp)
811331f4:	280f883a 	mov	r7,r5
811331f8:	200d883a 	mov	r6,r4
811331fc:	180b883a 	mov	r5,r3
81133200:	e13ff517 	ldw	r4,-44(fp)
81133204:	1126e640 	call	81126e64 <OSFlagPend>
81133208:	00000a06 	br	81133234 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
8113320c:	0001883a 	nop
81133210:	e0bffc17 	ldw	r2,-16(fp)
81133214:	10c01017 	ldw	r3,64(r2)
81133218:	e0bff017 	ldw	r2,-64(fp)
8113321c:	1880051e 	bne	r3,r2,81133234 <altera_avalon_jtag_uart_write+0x250>
81133220:	e0bffc17 	ldw	r2,-16(fp)
81133224:	10c00917 	ldw	r3,36(r2)
81133228:	e0bffc17 	ldw	r2,-16(fp)
8113322c:	10800117 	ldw	r2,4(r2)
81133230:	18bff736 	bltu	r3,r2,81133210 <__reset+0xfb113210>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
81133234:	e0bffc17 	ldw	r2,-16(fp)
81133238:	10800917 	ldw	r2,36(r2)
8113323c:	1000051e 	bne	r2,zero,81133254 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
81133240:	e0bffe17 	ldw	r2,-8(fp)
81133244:	00bfb616 	blt	zero,r2,81133120 <__reset+0xfb113120>
81133248:	00000306 	br	81133258 <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
8113324c:	0001883a 	nop
81133250:	00000106 	br	81133258 <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
81133254:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
81133258:	e0bffc17 	ldw	r2,-16(fp)
8113325c:	10800b17 	ldw	r2,44(r2)
81133260:	1009883a 	mov	r4,r2
81133264:	112ae8c0 	call	8112ae8c <OSSemPost>

  if (ptr != start)
81133268:	e0fffd17 	ldw	r3,-12(fp)
8113326c:	e0bff217 	ldw	r2,-56(fp)
81133270:	18800426 	beq	r3,r2,81133284 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
81133274:	e0fffd17 	ldw	r3,-12(fp)
81133278:	e0bff217 	ldw	r2,-56(fp)
8113327c:	1885c83a 	sub	r2,r3,r2
81133280:	00000606 	br	8113329c <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
81133284:	e0bfff17 	ldw	r2,-4(fp)
81133288:	1090000c 	andi	r2,r2,16384
8113328c:	10000226 	beq	r2,zero,81133298 <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
81133290:	00bffd44 	movi	r2,-11
81133294:	00000106 	br	8113329c <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81133298:	00bffec4 	movi	r2,-5
}
8113329c:	e037883a 	mov	sp,fp
811332a0:	dfc00117 	ldw	ra,4(sp)
811332a4:	df000017 	ldw	fp,0(sp)
811332a8:	dec00204 	addi	sp,sp,8
811332ac:	f800283a 	ret

811332b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811332b0:	defffe04 	addi	sp,sp,-8
811332b4:	de00012e 	bgeu	sp,et,811332bc <alt_get_errno+0xc>
811332b8:	003b68fa 	trap	3
811332bc:	dfc00115 	stw	ra,4(sp)
811332c0:	df000015 	stw	fp,0(sp)
811332c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811332c8:	d0a01617 	ldw	r2,-32680(gp)
811332cc:	10000326 	beq	r2,zero,811332dc <alt_get_errno+0x2c>
811332d0:	d0a01617 	ldw	r2,-32680(gp)
811332d4:	103ee83a 	callr	r2
811332d8:	00000106 	br	811332e0 <alt_get_errno+0x30>
811332dc:	d0a06b04 	addi	r2,gp,-32340
}
811332e0:	e037883a 	mov	sp,fp
811332e4:	dfc00117 	ldw	ra,4(sp)
811332e8:	df000017 	ldw	fp,0(sp)
811332ec:	dec00204 	addi	sp,sp,8
811332f0:	f800283a 	ret

811332f4 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
811332f4:	defffc04 	addi	sp,sp,-16
811332f8:	de00012e 	bgeu	sp,et,81133300 <alt_avalon_sgdma_do_async_transfer+0xc>
811332fc:	003b68fa 	trap	3
81133300:	df000315 	stw	fp,12(sp)
81133304:	df000304 	addi	fp,sp,12
81133308:	e13ffe15 	stw	r4,-8(fp)
8113330c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81133310:	e0bffe17 	ldw	r2,-8(fp)
81133314:	10800317 	ldw	r2,12(r2)
81133318:	10800037 	ldwio	r2,0(r2)
8113331c:	1080040c 	andi	r2,r2,16
81133320:	10000226 	beq	r2,zero,8113332c <alt_avalon_sgdma_do_async_transfer+0x38>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
81133324:	00bffc04 	movi	r2,-16
81133328:	00003906 	br	81133410 <alt_avalon_sgdma_do_async_transfer+0x11c>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8113332c:	e0bffe17 	ldw	r2,-8(fp)
81133330:	10800317 	ldw	r2,12(r2)
81133334:	10800404 	addi	r2,r2,16
81133338:	e0fffe17 	ldw	r3,-8(fp)
8113333c:	18c00317 	ldw	r3,12(r3)
81133340:	18c00404 	addi	r3,r3,16
81133344:	19000037 	ldwio	r4,0(r3)
81133348:	00fff7c4 	movi	r3,-33
8113334c:	20c6703a 	and	r3,r4,r3
81133350:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81133354:	e0bffe17 	ldw	r2,-8(fp)
81133358:	10800317 	ldw	r2,12(r2)
8113335c:	00c03fc4 	movi	r3,255
81133360:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
81133364:	e0bffe17 	ldw	r2,-8(fp)
81133368:	10800317 	ldw	r2,12(r2)
8113336c:	10800804 	addi	r2,r2,32
81133370:	e0ffff17 	ldw	r3,-4(fp)
81133374:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
81133378:	e0bffe17 	ldw	r2,-8(fp)
8113337c:	10800917 	ldw	r2,36(r2)
81133380:	10001126 	beq	r2,zero,811333c8 <alt_avalon_sgdma_do_async_transfer+0xd4>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81133384:	e0bffe17 	ldw	r2,-8(fp)
81133388:	10800317 	ldw	r2,12(r2)
8113338c:	10800404 	addi	r2,r2,16
81133390:	10800037 	ldwio	r2,0(r2)
81133394:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
81133398:	e0bffe17 	ldw	r2,-8(fp)
8113339c:	10c00b17 	ldw	r3,44(r2)
811333a0:	e0bffd17 	ldw	r2,-12(fp)
811333a4:	1884b03a 	or	r2,r3,r2
811333a8:	10801814 	ori	r2,r2,96
811333ac:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811333b0:	e0bffe17 	ldw	r2,-8(fp)
811333b4:	10800317 	ldw	r2,12(r2)
811333b8:	10800404 	addi	r2,r2,16
811333bc:	e0fffd17 	ldw	r3,-12(fp)
811333c0:	10c00035 	stwio	r3,0(r2)
811333c4:	00001106 	br	8113340c <alt_avalon_sgdma_do_async_transfer+0x118>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811333c8:	e0bffe17 	ldw	r2,-8(fp)
811333cc:	10800317 	ldw	r2,12(r2)
811333d0:	10800404 	addi	r2,r2,16
811333d4:	10800037 	ldwio	r2,0(r2)
811333d8:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
811333dc:	e0bffd17 	ldw	r2,-12(fp)
811333e0:	10801814 	ori	r2,r2,96
811333e4:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
811333e8:	e0fffd17 	ldw	r3,-12(fp)
811333ec:	00bffbc4 	movi	r2,-17
811333f0:	1884703a 	and	r2,r3,r2
811333f4:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811333f8:	e0bffe17 	ldw	r2,-8(fp)
811333fc:	10800317 	ldw	r2,12(r2)
81133400:	10800404 	addi	r2,r2,16
81133404:	e0fffd17 	ldw	r3,-12(fp)
81133408:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
8113340c:	0005883a 	mov	r2,zero
}
81133410:	e037883a 	mov	sp,fp
81133414:	df000017 	ldw	fp,0(sp)
81133418:	dec00104 	addi	sp,sp,4
8113341c:	f800283a 	ret

81133420 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
81133420:	defffc04 	addi	sp,sp,-16
81133424:	de00012e 	bgeu	sp,et,8113342c <alt_avalon_sgdma_do_sync_transfer+0xc>
81133428:	003b68fa 	trap	3
8113342c:	df000315 	stw	fp,12(sp)
81133430:	df000304 	addi	fp,sp,12
81133434:	e13ffe15 	stw	r4,-8(fp)
81133438:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8113343c:	0001883a 	nop
81133440:	e0bffe17 	ldw	r2,-8(fp)
81133444:	10800317 	ldw	r2,12(r2)
81133448:	10800037 	ldwio	r2,0(r2)
8113344c:	1080040c 	andi	r2,r2,16
81133450:	103ffb1e 	bne	r2,zero,81133440 <__reset+0xfb113440>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81133454:	e0bffe17 	ldw	r2,-8(fp)
81133458:	10800317 	ldw	r2,12(r2)
8113345c:	10800404 	addi	r2,r2,16
81133460:	e0fffe17 	ldw	r3,-8(fp)
81133464:	18c00317 	ldw	r3,12(r3)
81133468:	18c00404 	addi	r3,r3,16
8113346c:	19000037 	ldwio	r4,0(r3)
81133470:	00fff7c4 	movi	r3,-33
81133474:	20c6703a 	and	r3,r4,r3
81133478:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8113347c:	e0bffe17 	ldw	r2,-8(fp)
81133480:	10800317 	ldw	r2,12(r2)
81133484:	00c03fc4 	movi	r3,255
81133488:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
8113348c:	e0bffe17 	ldw	r2,-8(fp)
81133490:	10800317 	ldw	r2,12(r2)
81133494:	10800804 	addi	r2,r2,32
81133498:	e0ffff17 	ldw	r3,-4(fp)
8113349c:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
811334a0:	e0bffe17 	ldw	r2,-8(fp)
811334a4:	10800317 	ldw	r2,12(r2)
811334a8:	10800404 	addi	r2,r2,16
811334ac:	e0fffe17 	ldw	r3,-8(fp)
811334b0:	18c00317 	ldw	r3,12(r3)
811334b4:	18c00404 	addi	r3,r3,16
811334b8:	18c00037 	ldwio	r3,0(r3)
811334bc:	18c01814 	ori	r3,r3,96
811334c0:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
811334c4:	0001883a 	nop
811334c8:	e0bffe17 	ldw	r2,-8(fp)
811334cc:	10800317 	ldw	r2,12(r2)
811334d0:	10800037 	ldwio	r2,0(r2)
811334d4:	1080040c 	andi	r2,r2,16
811334d8:	103ffb1e 	bne	r2,zero,811334c8 <__reset+0xfb1134c8>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
811334dc:	e0bffe17 	ldw	r2,-8(fp)
811334e0:	10800317 	ldw	r2,12(r2)
811334e4:	10800404 	addi	r2,r2,16
811334e8:	e0fffe17 	ldw	r3,-8(fp)
811334ec:	18c00317 	ldw	r3,12(r3)
811334f0:	18c00404 	addi	r3,r3,16
811334f4:	19000037 	ldwio	r4,0(r3)
811334f8:	00fff7c4 	movi	r3,-33
811334fc:	20c6703a 	and	r3,r4,r3
81133500:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
81133504:	e0bffe17 	ldw	r2,-8(fp)
81133508:	10800317 	ldw	r2,12(r2)
8113350c:	10800037 	ldwio	r2,0(r2)
81133510:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81133514:	e0bffe17 	ldw	r2,-8(fp)
81133518:	10800317 	ldw	r2,12(r2)
8113351c:	00c03fc4 	movi	r3,255
81133520:	10c00035 	stwio	r3,0(r2)

  return status;
81133524:	e0bffd03 	ldbu	r2,-12(fp)
}
81133528:	e037883a 	mov	sp,fp
8113352c:	df000017 	ldw	fp,0(sp)
81133530:	dec00104 	addi	sp,sp,4
81133534:	f800283a 	ret

81133538 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
81133538:	defff404 	addi	sp,sp,-48
8113353c:	de00012e 	bgeu	sp,et,81133544 <alt_avalon_sgdma_construct_mem_to_mem_desc+0xc>
81133540:	003b68fa 	trap	3
81133544:	dfc00b15 	stw	ra,44(sp)
81133548:	df000a15 	stw	fp,40(sp)
8113354c:	df000a04 	addi	fp,sp,40
81133550:	e13ffb15 	stw	r4,-20(fp)
81133554:	e17ffc15 	stw	r5,-16(fp)
81133558:	e1bffd15 	stw	r6,-12(fp)
8113355c:	e1fffe15 	stw	r7,-8(fp)
81133560:	e0800217 	ldw	r2,8(fp)
81133564:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
81133568:	e0bfff0b 	ldhu	r2,-4(fp)
8113356c:	d8000415 	stw	zero,16(sp)
81133570:	d8000315 	stw	zero,12(sp)
81133574:	e0c00417 	ldw	r3,16(fp)
81133578:	d8c00215 	stw	r3,8(sp)
8113357c:	e0c00317 	ldw	r3,12(fp)
81133580:	d8c00115 	stw	r3,4(sp)
81133584:	d8800015 	stw	r2,0(sp)
81133588:	e1fffe17 	ldw	r7,-8(fp)
8113358c:	e1bffd17 	ldw	r6,-12(fp)
81133590:	e17ffc17 	ldw	r5,-16(fp)
81133594:	e13ffb17 	ldw	r4,-20(fp)
81133598:	11335b40 	call	811335b4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
8113359c:	0001883a 	nop
811335a0:	e037883a 	mov	sp,fp
811335a4:	dfc00117 	ldw	ra,4(sp)
811335a8:	df000017 	ldw	fp,0(sp)
811335ac:	dec00204 	addi	sp,sp,8
811335b0:	f800283a 	ret

811335b4 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
811335b4:	defff204 	addi	sp,sp,-56
811335b8:	de00012e 	bgeu	sp,et,811335c0 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst+0xc>
811335bc:	003b68fa 	trap	3
811335c0:	dfc00d15 	stw	ra,52(sp)
811335c4:	df000c15 	stw	fp,48(sp)
811335c8:	df000c04 	addi	fp,sp,48
811335cc:	e13ffb15 	stw	r4,-20(fp)
811335d0:	e17ffc15 	stw	r5,-16(fp)
811335d4:	e1bffd15 	stw	r6,-12(fp)
811335d8:	e1fffe15 	stw	r7,-8(fp)
811335dc:	e0800217 	ldw	r2,8(fp)
811335e0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
811335e4:	e0bfff0b 	ldhu	r2,-4(fp)
811335e8:	d8000615 	stw	zero,24(sp)
811335ec:	e0c00617 	ldw	r3,24(fp)
811335f0:	d8c00515 	stw	r3,20(sp)
811335f4:	e0c00517 	ldw	r3,20(fp)
811335f8:	d8c00415 	stw	r3,16(sp)
811335fc:	e0c00417 	ldw	r3,16(fp)
81133600:	d8c00315 	stw	r3,12(sp)
81133604:	e0c00317 	ldw	r3,12(fp)
81133608:	d8c00215 	stw	r3,8(sp)
8113360c:	d8000115 	stw	zero,4(sp)
81133610:	d8800015 	stw	r2,0(sp)
81133614:	e1fffe17 	ldw	r7,-8(fp)
81133618:	e1bffd17 	ldw	r6,-12(fp)
8113361c:	e17ffc17 	ldw	r5,-16(fp)
81133620:	e13ffb17 	ldw	r4,-20(fp)
81133624:	1133bb00 	call	81133bb0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
81133628:	0001883a 	nop
8113362c:	e037883a 	mov	sp,fp
81133630:	dfc00117 	ldw	ra,4(sp)
81133634:	df000017 	ldw	fp,0(sp)
81133638:	dec00204 	addi	sp,sp,8
8113363c:	f800283a 	ret

81133640 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
81133640:	defff804 	addi	sp,sp,-32
81133644:	de00012e 	bgeu	sp,et,8113364c <alt_avalon_sgdma_construct_stream_to_mem_desc+0xc>
81133648:	003b68fa 	trap	3
8113364c:	dfc00715 	stw	ra,28(sp)
81133650:	df000615 	stw	fp,24(sp)
81133654:	df000604 	addi	fp,sp,24
81133658:	e13ffc15 	stw	r4,-16(fp)
8113365c:	e17ffd15 	stw	r5,-12(fp)
81133660:	e1bffe15 	stw	r6,-8(fp)
81133664:	3805883a 	mov	r2,r7
81133668:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
8113366c:	e0ffff0b 	ldhu	r3,-4(fp)
81133670:	d8000115 	stw	zero,4(sp)
81133674:	e0800217 	ldw	r2,8(fp)
81133678:	d8800015 	stw	r2,0(sp)
8113367c:	180f883a 	mov	r7,r3
81133680:	e1bffe17 	ldw	r6,-8(fp)
81133684:	e17ffd17 	ldw	r5,-12(fp)
81133688:	e13ffc17 	ldw	r4,-16(fp)
8113368c:	11336a80 	call	811336a8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
81133690:	0001883a 	nop
81133694:	e037883a 	mov	sp,fp
81133698:	dfc00117 	ldw	ra,4(sp)
8113369c:	df000017 	ldw	fp,0(sp)
811336a0:	dec00204 	addi	sp,sp,8
811336a4:	f800283a 	ret

811336a8 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
811336a8:	defff304 	addi	sp,sp,-52
811336ac:	de00012e 	bgeu	sp,et,811336b4 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst+0xc>
811336b0:	003b68fa 	trap	3
811336b4:	dfc00c15 	stw	ra,48(sp)
811336b8:	df000b15 	stw	fp,44(sp)
811336bc:	df000b04 	addi	fp,sp,44
811336c0:	e13ffc15 	stw	r4,-16(fp)
811336c4:	e17ffd15 	stw	r5,-12(fp)
811336c8:	e1bffe15 	stw	r6,-8(fp)
811336cc:	3805883a 	mov	r2,r7
811336d0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
811336d4:	e0bfff0b 	ldhu	r2,-4(fp)
811336d8:	d8000615 	stw	zero,24(sp)
811336dc:	e0c00317 	ldw	r3,12(fp)
811336e0:	d8c00515 	stw	r3,20(sp)
811336e4:	d8000415 	stw	zero,16(sp)
811336e8:	e0c00217 	ldw	r3,8(fp)
811336ec:	d8c00315 	stw	r3,12(sp)
811336f0:	d8000215 	stw	zero,8(sp)
811336f4:	d8000115 	stw	zero,4(sp)
811336f8:	d8800015 	stw	r2,0(sp)
811336fc:	e1fffe17 	ldw	r7,-8(fp)
81133700:	000d883a 	mov	r6,zero
81133704:	e17ffd17 	ldw	r5,-12(fp)
81133708:	e13ffc17 	ldw	r4,-16(fp)
8113370c:	1133bb00 	call	81133bb0 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
81133710:	0001883a 	nop
81133714:	e037883a 	mov	sp,fp
81133718:	dfc00117 	ldw	ra,4(sp)
8113371c:	df000017 	ldw	fp,0(sp)
81133720:	dec00204 	addi	sp,sp,8
81133724:	f800283a 	ret

81133728 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
81133728:	defff404 	addi	sp,sp,-48
8113372c:	de00012e 	bgeu	sp,et,81133734 <alt_avalon_sgdma_construct_mem_to_stream_desc+0xc>
81133730:	003b68fa 	trap	3
81133734:	dfc00b15 	stw	ra,44(sp)
81133738:	df000a15 	stw	fp,40(sp)
8113373c:	df000a04 	addi	fp,sp,40
81133740:	e13ffb15 	stw	r4,-20(fp)
81133744:	e17ffc15 	stw	r5,-16(fp)
81133748:	e1bffd15 	stw	r6,-12(fp)
8113374c:	3807883a 	mov	r3,r7
81133750:	e0800517 	ldw	r2,20(fp)
81133754:	e0fffe0d 	sth	r3,-8(fp)
81133758:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
8113375c:	e0fffe0b 	ldhu	r3,-8(fp)
81133760:	e0bfff03 	ldbu	r2,-4(fp)
81133764:	d8800415 	stw	r2,16(sp)
81133768:	d8000315 	stw	zero,12(sp)
8113376c:	e0800417 	ldw	r2,16(fp)
81133770:	d8800215 	stw	r2,8(sp)
81133774:	e0800317 	ldw	r2,12(fp)
81133778:	d8800115 	stw	r2,4(sp)
8113377c:	e0800217 	ldw	r2,8(fp)
81133780:	d8800015 	stw	r2,0(sp)
81133784:	180f883a 	mov	r7,r3
81133788:	e1bffd17 	ldw	r6,-12(fp)
8113378c:	e17ffc17 	ldw	r5,-16(fp)
81133790:	e13ffb17 	ldw	r4,-20(fp)
81133794:	11337b00 	call	811337b0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
81133798:	0001883a 	nop
8113379c:	e037883a 	mov	sp,fp
811337a0:	dfc00117 	ldw	ra,4(sp)
811337a4:	df000017 	ldw	fp,0(sp)
811337a8:	dec00204 	addi	sp,sp,8
811337ac:	f800283a 	ret

811337b0 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
811337b0:	defff204 	addi	sp,sp,-56
811337b4:	de00012e 	bgeu	sp,et,811337bc <alt_avalon_sgdma_construct_mem_to_stream_desc_burst+0xc>
811337b8:	003b68fa 	trap	3
811337bc:	dfc00d15 	stw	ra,52(sp)
811337c0:	df000c15 	stw	fp,48(sp)
811337c4:	df000c04 	addi	fp,sp,48
811337c8:	e13ffb15 	stw	r4,-20(fp)
811337cc:	e17ffc15 	stw	r5,-16(fp)
811337d0:	e1bffd15 	stw	r6,-12(fp)
811337d4:	3807883a 	mov	r3,r7
811337d8:	e0800617 	ldw	r2,24(fp)
811337dc:	e0fffe0d 	sth	r3,-8(fp)
811337e0:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
811337e4:	e0bffe0b 	ldhu	r2,-8(fp)
811337e8:	e0ffff03 	ldbu	r3,-4(fp)
811337ec:	d8c00615 	stw	r3,24(sp)
811337f0:	d8000515 	stw	zero,20(sp)
811337f4:	e0c00517 	ldw	r3,20(fp)
811337f8:	d8c00415 	stw	r3,16(sp)
811337fc:	e0c00317 	ldw	r3,12(fp)
81133800:	d8c00315 	stw	r3,12(sp)
81133804:	e0c00217 	ldw	r3,8(fp)
81133808:	d8c00215 	stw	r3,8(sp)
8113380c:	e0c00417 	ldw	r3,16(fp)
81133810:	d8c00115 	stw	r3,4(sp)
81133814:	d8800015 	stw	r2,0(sp)
81133818:	000f883a 	mov	r7,zero
8113381c:	e1bffd17 	ldw	r6,-12(fp)
81133820:	e17ffc17 	ldw	r5,-16(fp)
81133824:	e13ffb17 	ldw	r4,-20(fp)
81133828:	1133bb00 	call	81133bb0 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
8113382c:	0001883a 	nop
81133830:	e037883a 	mov	sp,fp
81133834:	dfc00117 	ldw	ra,4(sp)
81133838:	df000017 	ldw	fp,0(sp)
8113383c:	dec00204 	addi	sp,sp,8
81133840:	f800283a 	ret

81133844 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
81133844:	defffb04 	addi	sp,sp,-20
81133848:	de00012e 	bgeu	sp,et,81133850 <alt_avalon_sgdma_register_callback+0xc>
8113384c:	003b68fa 	trap	3
81133850:	df000415 	stw	fp,16(sp)
81133854:	df000404 	addi	fp,sp,16
81133858:	e13ffc15 	stw	r4,-16(fp)
8113385c:	e17ffd15 	stw	r5,-12(fp)
81133860:	e1bffe15 	stw	r6,-8(fp)
81133864:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
81133868:	e0bffc17 	ldw	r2,-16(fp)
8113386c:	e0fffd17 	ldw	r3,-12(fp)
81133870:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
81133874:	e0bffc17 	ldw	r2,-16(fp)
81133878:	e0ffff17 	ldw	r3,-4(fp)
8113387c:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
81133880:	e0bffc17 	ldw	r2,-16(fp)
81133884:	e0fffe17 	ldw	r3,-8(fp)
81133888:	10c00b15 	stw	r3,44(r2)
}
8113388c:	0001883a 	nop
81133890:	e037883a 	mov	sp,fp
81133894:	df000017 	ldw	fp,0(sp)
81133898:	dec00104 	addi	sp,sp,4
8113389c:	f800283a 	ret

811338a0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
811338a0:	defffd04 	addi	sp,sp,-12
811338a4:	de00012e 	bgeu	sp,et,811338ac <alt_avalon_sgdma_start+0xc>
811338a8:	003b68fa 	trap	3
811338ac:	df000215 	stw	fp,8(sp)
811338b0:	df000204 	addi	fp,sp,8
811338b4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811338b8:	e0bfff17 	ldw	r2,-4(fp)
811338bc:	10800317 	ldw	r2,12(r2)
811338c0:	10800404 	addi	r2,r2,16
811338c4:	10800037 	ldwio	r2,0(r2)
811338c8:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
811338cc:	e0bffe17 	ldw	r2,-8(fp)
811338d0:	10800814 	ori	r2,r2,32
811338d4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811338d8:	e0bfff17 	ldw	r2,-4(fp)
811338dc:	10800317 	ldw	r2,12(r2)
811338e0:	10800404 	addi	r2,r2,16
811338e4:	e0fffe17 	ldw	r3,-8(fp)
811338e8:	10c00035 	stwio	r3,0(r2)
}
811338ec:	0001883a 	nop
811338f0:	e037883a 	mov	sp,fp
811338f4:	df000017 	ldw	fp,0(sp)
811338f8:	dec00104 	addi	sp,sp,4
811338fc:	f800283a 	ret

81133900 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
81133900:	defffd04 	addi	sp,sp,-12
81133904:	de00012e 	bgeu	sp,et,8113390c <alt_avalon_sgdma_stop+0xc>
81133908:	003b68fa 	trap	3
8113390c:	df000215 	stw	fp,8(sp)
81133910:	df000204 	addi	fp,sp,8
81133914:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81133918:	e0bfff17 	ldw	r2,-4(fp)
8113391c:	10800317 	ldw	r2,12(r2)
81133920:	10800404 	addi	r2,r2,16
81133924:	10800037 	ldwio	r2,0(r2)
81133928:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
8113392c:	e0fffe17 	ldw	r3,-8(fp)
81133930:	00bff7c4 	movi	r2,-33
81133934:	1884703a 	and	r2,r3,r2
81133938:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
8113393c:	e0bfff17 	ldw	r2,-4(fp)
81133940:	10800317 	ldw	r2,12(r2)
81133944:	10800404 	addi	r2,r2,16
81133948:	e0fffe17 	ldw	r3,-8(fp)
8113394c:	10c00035 	stwio	r3,0(r2)
}
81133950:	0001883a 	nop
81133954:	e037883a 	mov	sp,fp
81133958:	df000017 	ldw	fp,0(sp)
8113395c:	dec00104 	addi	sp,sp,4
81133960:	f800283a 	ret

81133964 <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
81133964:	defffe04 	addi	sp,sp,-8
81133968:	de00012e 	bgeu	sp,et,81133970 <alt_avalon_sgdma_check_descriptor_status+0xc>
8113396c:	003b68fa 	trap	3
81133970:	df000115 	stw	fp,4(sp)
81133974:	df000104 	addi	fp,sp,4
81133978:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
8113397c:	e0bfff17 	ldw	r2,-4(fp)
81133980:	10800784 	addi	r2,r2,30
81133984:	10800023 	ldbuio	r2,0(r2)
81133988:	10803fcc 	andi	r2,r2,255
8113398c:	10801fcc 	andi	r2,r2,127
81133990:	10000226 	beq	r2,zero,8113399c <alt_avalon_sgdma_check_descriptor_status+0x38>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
81133994:	00bffec4 	movi	r2,-5
81133998:	00000906 	br	811339c0 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
8113399c:	e0bfff17 	ldw	r2,-4(fp)
811339a0:	108007c4 	addi	r2,r2,31
811339a4:	10800023 	ldbuio	r2,0(r2)
811339a8:	10803fcc 	andi	r2,r2,255
811339ac:	1080200c 	andi	r2,r2,128
811339b0:	10000226 	beq	r2,zero,811339bc <alt_avalon_sgdma_check_descriptor_status+0x58>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
811339b4:	00bfe244 	movi	r2,-119
811339b8:	00000106 	br	811339c0 <alt_avalon_sgdma_check_descriptor_status+0x5c>
  }

    return 0;
811339bc:	0005883a 	mov	r2,zero
}
811339c0:	e037883a 	mov	sp,fp
811339c4:	df000017 	ldw	fp,0(sp)
811339c8:	dec00104 	addi	sp,sp,4
811339cc:	f800283a 	ret

811339d0 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
811339d0:	defffc04 	addi	sp,sp,-16
811339d4:	de00012e 	bgeu	sp,et,811339dc <alt_avalon_sgdma_open+0xc>
811339d8:	003b68fa 	trap	3
811339dc:	dfc00315 	stw	ra,12(sp)
811339e0:	df000215 	stw	fp,8(sp)
811339e4:	df000204 	addi	fp,sp,8
811339e8:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
811339ec:	d1603904 	addi	r5,gp,-32540
811339f0:	e13fff17 	ldw	r4,-4(fp)
811339f4:	113730c0 	call	8113730c <alt_find_dev>
811339f8:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
811339fc:	e0bffe17 	ldw	r2,-8(fp)
81133a00:	1000041e 	bne	r2,zero,81133a14 <alt_avalon_sgdma_open+0x44>
    ALT_ERRNO = ENODEV;
81133a04:	11332b00 	call	811332b0 <alt_get_errno>
81133a08:	1007883a 	mov	r3,r2
81133a0c:	008004c4 	movi	r2,19
81133a10:	18800015 	stw	r2,0(r3)
  }

  return dev;
81133a14:	e0bffe17 	ldw	r2,-8(fp)
}
81133a18:	e037883a 	mov	sp,fp
81133a1c:	dfc00117 	ldw	ra,4(sp)
81133a20:	df000017 	ldw	fp,0(sp)
81133a24:	dec00204 	addi	sp,sp,8
81133a28:	f800283a 	ret

81133a2c <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
81133a2c:	defff104 	addi	sp,sp,-60
81133a30:	de00012e 	bgeu	sp,et,81133a38 <alt_avalon_sgdma_construct_descriptor+0xc>
81133a34:	003b68fa 	trap	3
81133a38:	dfc00e15 	stw	ra,56(sp)
81133a3c:	df000d15 	stw	fp,52(sp)
81133a40:	df000d04 	addi	fp,sp,52
81133a44:	e13ffa15 	stw	r4,-24(fp)
81133a48:	e17ffb15 	stw	r5,-20(fp)
81133a4c:	e1bffc15 	stw	r6,-16(fp)
81133a50:	e1fffd15 	stw	r7,-12(fp)
81133a54:	e0c00217 	ldw	r3,8(fp)
81133a58:	e0800617 	ldw	r2,24(fp)
81133a5c:	e0fffe0d 	sth	r3,-8(fp)
81133a60:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
81133a64:	e0bffe0b 	ldhu	r2,-8(fp)
81133a68:	e0ffff03 	ldbu	r3,-4(fp)
81133a6c:	d8c00615 	stw	r3,24(sp)
81133a70:	d8000515 	stw	zero,20(sp)
81133a74:	d8000415 	stw	zero,16(sp)
81133a78:	e0c00517 	ldw	r3,20(fp)
81133a7c:	d8c00315 	stw	r3,12(sp)
81133a80:	e0c00417 	ldw	r3,16(fp)
81133a84:	d8c00215 	stw	r3,8(sp)
81133a88:	e0c00317 	ldw	r3,12(fp)
81133a8c:	d8c00115 	stw	r3,4(sp)
81133a90:	d8800015 	stw	r2,0(sp)
81133a94:	e1fffd17 	ldw	r7,-12(fp)
81133a98:	e1bffc17 	ldw	r6,-16(fp)
81133a9c:	e17ffb17 	ldw	r5,-20(fp)
81133aa0:	e13ffa17 	ldw	r4,-24(fp)
81133aa4:	1133bb00 	call	81133bb0 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
81133aa8:	0001883a 	nop
81133aac:	e037883a 	mov	sp,fp
81133ab0:	dfc00117 	ldw	ra,4(sp)
81133ab4:	df000017 	ldw	fp,0(sp)
81133ab8:	dec00204 	addi	sp,sp,8
81133abc:	f800283a 	ret

81133ac0 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
81133ac0:	defffc04 	addi	sp,sp,-16
81133ac4:	de00012e 	bgeu	sp,et,81133acc <alt_avalon_sgdma_enable_desc_poll+0xc>
81133ac8:	003b68fa 	trap	3
81133acc:	df000315 	stw	fp,12(sp)
81133ad0:	df000304 	addi	fp,sp,12
81133ad4:	e13ffe15 	stw	r4,-8(fp)
81133ad8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81133adc:	e0bffe17 	ldw	r2,-8(fp)
81133ae0:	10800317 	ldw	r2,12(r2)
81133ae4:	10800404 	addi	r2,r2,16
81133ae8:	10800037 	ldwio	r2,0(r2)
81133aec:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
81133af0:	e0fffd17 	ldw	r3,-12(fp)
81133af4:	00a00434 	movhi	r2,32784
81133af8:	10bfffc4 	addi	r2,r2,-1
81133afc:	1884703a 	and	r2,r3,r2
81133b00:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
81133b04:	e0bfff17 	ldw	r2,-4(fp)
81133b08:	1004953a 	slli	r2,r2,20
81133b0c:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
81133b10:	e0bffd17 	ldw	r2,-12(fp)
81133b14:	1884b03a 	or	r2,r3,r2
81133b18:	10800134 	orhi	r2,r2,4
81133b1c:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81133b20:	e0bffe17 	ldw	r2,-8(fp)
81133b24:	10800317 	ldw	r2,12(r2)
81133b28:	10800404 	addi	r2,r2,16
81133b2c:	e0fffd17 	ldw	r3,-12(fp)
81133b30:	10c00035 	stwio	r3,0(r2)
  
  return;
81133b34:	0001883a 	nop
}
81133b38:	e037883a 	mov	sp,fp
81133b3c:	df000017 	ldw	fp,0(sp)
81133b40:	dec00104 	addi	sp,sp,4
81133b44:	f800283a 	ret

81133b48 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
81133b48:	defffd04 	addi	sp,sp,-12
81133b4c:	de00012e 	bgeu	sp,et,81133b54 <alt_avalon_sgdma_disable_desc_poll+0xc>
81133b50:	003b68fa 	trap	3
81133b54:	df000215 	stw	fp,8(sp)
81133b58:	df000204 	addi	fp,sp,8
81133b5c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81133b60:	e0bfff17 	ldw	r2,-4(fp)
81133b64:	10800317 	ldw	r2,12(r2)
81133b68:	10800404 	addi	r2,r2,16
81133b6c:	10800037 	ldwio	r2,0(r2)
81133b70:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
81133b74:	e0fffe17 	ldw	r3,-8(fp)
81133b78:	00bfff34 	movhi	r2,65532
81133b7c:	10bfffc4 	addi	r2,r2,-1
81133b80:	1884703a 	and	r2,r3,r2
81133b84:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81133b88:	e0bfff17 	ldw	r2,-4(fp)
81133b8c:	10800317 	ldw	r2,12(r2)
81133b90:	10800404 	addi	r2,r2,16
81133b94:	e0fffe17 	ldw	r3,-8(fp)
81133b98:	10c00035 	stwio	r3,0(r2)
  
  return;
81133b9c:	0001883a 	nop
}
81133ba0:	e037883a 	mov	sp,fp
81133ba4:	df000017 	ldw	fp,0(sp)
81133ba8:	dec00104 	addi	sp,sp,4
81133bac:	f800283a 	ret

81133bb0 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
81133bb0:	defff804 	addi	sp,sp,-32
81133bb4:	de00012e 	bgeu	sp,et,81133bbc <alt_avalon_sgdma_construct_descriptor_burst+0xc>
81133bb8:	003b68fa 	trap	3
81133bbc:	dfc00715 	stw	ra,28(sp)
81133bc0:	df000615 	stw	fp,24(sp)
81133bc4:	df000604 	addi	fp,sp,24
81133bc8:	e13ffa15 	stw	r4,-24(fp)
81133bcc:	e17ffb15 	stw	r5,-20(fp)
81133bd0:	e1bffc15 	stw	r6,-16(fp)
81133bd4:	e1fffd15 	stw	r7,-12(fp)
81133bd8:	e0c00217 	ldw	r3,8(fp)
81133bdc:	e0800817 	ldw	r2,32(fp)
81133be0:	e0fffe0d 	sth	r3,-8(fp)
81133be4:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
81133be8:	e0bffb17 	ldw	r2,-20(fp)
81133bec:	108007c4 	addi	r2,r2,31
81133bf0:	e0fffb17 	ldw	r3,-20(fp)
81133bf4:	18c007c3 	ldbu	r3,31(r3)
81133bf8:	19003fcc 	andi	r4,r3,255
81133bfc:	00ffdfc4 	movi	r3,-129
81133c00:	20c6703a 	and	r3,r4,r3
81133c04:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
81133c08:	e0bffa17 	ldw	r2,-24(fp)
81133c0c:	e0fffc17 	ldw	r3,-16(fp)
81133c10:	19403fcc 	andi	r5,r3,255
81133c14:	10c00003 	ldbu	r3,0(r2)
81133c18:	1806703a 	and	r3,r3,zero
81133c1c:	1809883a 	mov	r4,r3
81133c20:	2807883a 	mov	r3,r5
81133c24:	20c6b03a 	or	r3,r4,r3
81133c28:	10c00005 	stb	r3,0(r2)
81133c2c:	e0fffc17 	ldw	r3,-16(fp)
81133c30:	1806d23a 	srli	r3,r3,8
81133c34:	19403fcc 	andi	r5,r3,255
81133c38:	10c00043 	ldbu	r3,1(r2)
81133c3c:	1806703a 	and	r3,r3,zero
81133c40:	1809883a 	mov	r4,r3
81133c44:	2807883a 	mov	r3,r5
81133c48:	20c6b03a 	or	r3,r4,r3
81133c4c:	10c00045 	stb	r3,1(r2)
81133c50:	e0fffc17 	ldw	r3,-16(fp)
81133c54:	1806d43a 	srli	r3,r3,16
81133c58:	19403fcc 	andi	r5,r3,255
81133c5c:	10c00083 	ldbu	r3,2(r2)
81133c60:	1806703a 	and	r3,r3,zero
81133c64:	1809883a 	mov	r4,r3
81133c68:	2807883a 	mov	r3,r5
81133c6c:	20c6b03a 	or	r3,r4,r3
81133c70:	10c00085 	stb	r3,2(r2)
81133c74:	e0fffc17 	ldw	r3,-16(fp)
81133c78:	180ad63a 	srli	r5,r3,24
81133c7c:	10c000c3 	ldbu	r3,3(r2)
81133c80:	1806703a 	and	r3,r3,zero
81133c84:	1809883a 	mov	r4,r3
81133c88:	2807883a 	mov	r3,r5
81133c8c:	20c6b03a 	or	r3,r4,r3
81133c90:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
81133c94:	e0bffa17 	ldw	r2,-24(fp)
81133c98:	e0fffd17 	ldw	r3,-12(fp)
81133c9c:	19403fcc 	andi	r5,r3,255
81133ca0:	10c00203 	ldbu	r3,8(r2)
81133ca4:	1806703a 	and	r3,r3,zero
81133ca8:	1809883a 	mov	r4,r3
81133cac:	2807883a 	mov	r3,r5
81133cb0:	20c6b03a 	or	r3,r4,r3
81133cb4:	10c00205 	stb	r3,8(r2)
81133cb8:	e0fffd17 	ldw	r3,-12(fp)
81133cbc:	1806d23a 	srli	r3,r3,8
81133cc0:	19403fcc 	andi	r5,r3,255
81133cc4:	10c00243 	ldbu	r3,9(r2)
81133cc8:	1806703a 	and	r3,r3,zero
81133ccc:	1809883a 	mov	r4,r3
81133cd0:	2807883a 	mov	r3,r5
81133cd4:	20c6b03a 	or	r3,r4,r3
81133cd8:	10c00245 	stb	r3,9(r2)
81133cdc:	e0fffd17 	ldw	r3,-12(fp)
81133ce0:	1806d43a 	srli	r3,r3,16
81133ce4:	19403fcc 	andi	r5,r3,255
81133ce8:	10c00283 	ldbu	r3,10(r2)
81133cec:	1806703a 	and	r3,r3,zero
81133cf0:	1809883a 	mov	r4,r3
81133cf4:	2807883a 	mov	r3,r5
81133cf8:	20c6b03a 	or	r3,r4,r3
81133cfc:	10c00285 	stb	r3,10(r2)
81133d00:	e0fffd17 	ldw	r3,-12(fp)
81133d04:	180ad63a 	srli	r5,r3,24
81133d08:	10c002c3 	ldbu	r3,11(r2)
81133d0c:	1806703a 	and	r3,r3,zero
81133d10:	1809883a 	mov	r4,r3
81133d14:	2807883a 	mov	r3,r5
81133d18:	20c6b03a 	or	r3,r4,r3
81133d1c:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
81133d20:	e0bffa17 	ldw	r2,-24(fp)
81133d24:	e0fffb17 	ldw	r3,-20(fp)
81133d28:	19403fcc 	andi	r5,r3,255
81133d2c:	10c00403 	ldbu	r3,16(r2)
81133d30:	1806703a 	and	r3,r3,zero
81133d34:	1809883a 	mov	r4,r3
81133d38:	2807883a 	mov	r3,r5
81133d3c:	20c6b03a 	or	r3,r4,r3
81133d40:	10c00405 	stb	r3,16(r2)
81133d44:	e0fffb17 	ldw	r3,-20(fp)
81133d48:	1806d23a 	srli	r3,r3,8
81133d4c:	19403fcc 	andi	r5,r3,255
81133d50:	10c00443 	ldbu	r3,17(r2)
81133d54:	1806703a 	and	r3,r3,zero
81133d58:	1809883a 	mov	r4,r3
81133d5c:	2807883a 	mov	r3,r5
81133d60:	20c6b03a 	or	r3,r4,r3
81133d64:	10c00445 	stb	r3,17(r2)
81133d68:	e0fffb17 	ldw	r3,-20(fp)
81133d6c:	1806d43a 	srli	r3,r3,16
81133d70:	19403fcc 	andi	r5,r3,255
81133d74:	10c00483 	ldbu	r3,18(r2)
81133d78:	1806703a 	and	r3,r3,zero
81133d7c:	1809883a 	mov	r4,r3
81133d80:	2807883a 	mov	r3,r5
81133d84:	20c6b03a 	or	r3,r4,r3
81133d88:	10c00485 	stb	r3,18(r2)
81133d8c:	e0fffb17 	ldw	r3,-20(fp)
81133d90:	180ad63a 	srli	r5,r3,24
81133d94:	10c004c3 	ldbu	r3,19(r2)
81133d98:	1806703a 	and	r3,r3,zero
81133d9c:	1809883a 	mov	r4,r3
81133da0:	2807883a 	mov	r3,r5
81133da4:	20c6b03a 	or	r3,r4,r3
81133da8:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
81133dac:	e0bffa17 	ldw	r2,-24(fp)
81133db0:	10c00103 	ldbu	r3,4(r2)
81133db4:	1806703a 	and	r3,r3,zero
81133db8:	10c00105 	stb	r3,4(r2)
81133dbc:	10c00143 	ldbu	r3,5(r2)
81133dc0:	1806703a 	and	r3,r3,zero
81133dc4:	10c00145 	stb	r3,5(r2)
81133dc8:	10c00183 	ldbu	r3,6(r2)
81133dcc:	1806703a 	and	r3,r3,zero
81133dd0:	10c00185 	stb	r3,6(r2)
81133dd4:	10c001c3 	ldbu	r3,7(r2)
81133dd8:	1806703a 	and	r3,r3,zero
81133ddc:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
81133de0:	e0bffa17 	ldw	r2,-24(fp)
81133de4:	10c00303 	ldbu	r3,12(r2)
81133de8:	1806703a 	and	r3,r3,zero
81133dec:	10c00305 	stb	r3,12(r2)
81133df0:	10c00343 	ldbu	r3,13(r2)
81133df4:	1806703a 	and	r3,r3,zero
81133df8:	10c00345 	stb	r3,13(r2)
81133dfc:	10c00383 	ldbu	r3,14(r2)
81133e00:	1806703a 	and	r3,r3,zero
81133e04:	10c00385 	stb	r3,14(r2)
81133e08:	10c003c3 	ldbu	r3,15(r2)
81133e0c:	1806703a 	and	r3,r3,zero
81133e10:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
81133e14:	e0bffa17 	ldw	r2,-24(fp)
81133e18:	10c00503 	ldbu	r3,20(r2)
81133e1c:	1806703a 	and	r3,r3,zero
81133e20:	10c00505 	stb	r3,20(r2)
81133e24:	10c00543 	ldbu	r3,21(r2)
81133e28:	1806703a 	and	r3,r3,zero
81133e2c:	10c00545 	stb	r3,21(r2)
81133e30:	10c00583 	ldbu	r3,22(r2)
81133e34:	1806703a 	and	r3,r3,zero
81133e38:	10c00585 	stb	r3,22(r2)
81133e3c:	10c005c3 	ldbu	r3,23(r2)
81133e40:	1806703a 	and	r3,r3,zero
81133e44:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
81133e48:	e0bffa17 	ldw	r2,-24(fp)
81133e4c:	e0fffe17 	ldw	r3,-8(fp)
81133e50:	19403fcc 	andi	r5,r3,255
81133e54:	10c00603 	ldbu	r3,24(r2)
81133e58:	1806703a 	and	r3,r3,zero
81133e5c:	1809883a 	mov	r4,r3
81133e60:	2807883a 	mov	r3,r5
81133e64:	20c6b03a 	or	r3,r4,r3
81133e68:	10c00605 	stb	r3,24(r2)
81133e6c:	e0fffe17 	ldw	r3,-8(fp)
81133e70:	1806d23a 	srli	r3,r3,8
81133e74:	19403fcc 	andi	r5,r3,255
81133e78:	10c00643 	ldbu	r3,25(r2)
81133e7c:	1806703a 	and	r3,r3,zero
81133e80:	1809883a 	mov	r4,r3
81133e84:	2807883a 	mov	r3,r5
81133e88:	20c6b03a 	or	r3,r4,r3
81133e8c:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
81133e90:	e0bffa17 	ldw	r2,-24(fp)
81133e94:	10c00703 	ldbu	r3,28(r2)
81133e98:	1806703a 	and	r3,r3,zero
81133e9c:	10c00705 	stb	r3,28(r2)
81133ea0:	10c00743 	ldbu	r3,29(r2)
81133ea4:	1806703a 	and	r3,r3,zero
81133ea8:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
81133eac:	e0bffa17 	ldw	r2,-24(fp)
81133eb0:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
81133eb4:	e0800617 	ldw	r2,24(fp)
81133eb8:	1007883a 	mov	r3,r2
81133ebc:	e0bffa17 	ldw	r2,-24(fp)
81133ec0:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
81133ec4:	e0800717 	ldw	r2,28(fp)
81133ec8:	1007883a 	mov	r3,r2
81133ecc:	e0bffa17 	ldw	r2,-24(fp)
81133ed0:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81133ed4:	e0800317 	ldw	r2,12(fp)
81133ed8:	10000226 	beq	r2,zero,81133ee4 <alt_avalon_sgdma_construct_descriptor_burst+0x334>
81133edc:	00bfe044 	movi	r2,-127
81133ee0:	00000106 	br	81133ee8 <alt_avalon_sgdma_construct_descriptor_burst+0x338>
81133ee4:	00bfe004 	movi	r2,-128
81133ee8:	e0c00417 	ldw	r3,16(fp)
81133eec:	18000226 	beq	r3,zero,81133ef8 <alt_avalon_sgdma_construct_descriptor_burst+0x348>
81133ef0:	00c00084 	movi	r3,2
81133ef4:	00000106 	br	81133efc <alt_avalon_sgdma_construct_descriptor_burst+0x34c>
81133ef8:	0007883a 	mov	r3,zero
81133efc:	10c4b03a 	or	r2,r2,r3
81133f00:	1007883a 	mov	r3,r2
81133f04:	e0800517 	ldw	r2,20(fp)
81133f08:	10000226 	beq	r2,zero,81133f14 <alt_avalon_sgdma_construct_descriptor_burst+0x364>
81133f0c:	00800104 	movi	r2,4
81133f10:	00000106 	br	81133f18 <alt_avalon_sgdma_construct_descriptor_burst+0x368>
81133f14:	0005883a 	mov	r2,zero
81133f18:	1884b03a 	or	r2,r3,r2
81133f1c:	1007883a 	mov	r3,r2
81133f20:	e0bfff03 	ldbu	r2,-4(fp)
81133f24:	10000426 	beq	r2,zero,81133f38 <alt_avalon_sgdma_construct_descriptor_burst+0x388>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
81133f28:	e0bfff03 	ldbu	r2,-4(fp)
81133f2c:	108003cc 	andi	r2,r2,15
81133f30:	100490fa 	slli	r2,r2,3
81133f34:	00000106 	br	81133f3c <alt_avalon_sgdma_construct_descriptor_burst+0x38c>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81133f38:	0005883a 	mov	r2,zero
81133f3c:	1884b03a 	or	r2,r3,r2
81133f40:	1007883a 	mov	r3,r2
81133f44:	e0bffa17 	ldw	r2,-24(fp)
81133f48:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
81133f4c:	01400804 	movi	r5,32
81133f50:	e13ffa17 	ldw	r4,-24(fp)
81133f54:	113711c0 	call	8113711c <alt_dcache_flush>
}
81133f58:	0001883a 	nop
81133f5c:	e037883a 	mov	sp,fp
81133f60:	dfc00117 	ldw	ra,4(sp)
81133f64:	df000017 	ldw	fp,0(sp)
81133f68:	dec00204 	addi	sp,sp,8
81133f6c:	f800283a 	ret

81133f70 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
81133f70:	defff904 	addi	sp,sp,-28
81133f74:	de00012e 	bgeu	sp,et,81133f7c <alt_avalon_sgdma_irq+0xc>
81133f78:	003b68fa 	trap	3
81133f7c:	dfc00615 	stw	ra,24(sp)
81133f80:	df000515 	stw	fp,20(sp)
81133f84:	df000504 	addi	fp,sp,20
81133f88:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
81133f8c:	e0bfff17 	ldw	r2,-4(fp)
81133f90:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81133f94:	e0bffb17 	ldw	r2,-20(fp)
81133f98:	10800317 	ldw	r2,12(r2)
81133f9c:	10800404 	addi	r2,r2,16
81133fa0:	e0fffb17 	ldw	r3,-20(fp)
81133fa4:	18c00317 	ldw	r3,12(r3)
81133fa8:	18c00404 	addi	r3,r3,16
81133fac:	18c00037 	ldwio	r3,0(r3)
81133fb0:	18e00034 	orhi	r3,r3,32768
81133fb4:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81133fb8:	e0bffb17 	ldw	r2,-20(fp)
81133fbc:	10800317 	ldw	r2,12(r2)
81133fc0:	10800404 	addi	r2,r2,16
81133fc4:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
81133fc8:	e0bffb17 	ldw	r2,-20(fp)
81133fcc:	10800917 	ldw	r2,36(r2)
81133fd0:	10001226 	beq	r2,zero,8113401c <alt_avalon_sgdma_irq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133fd4:	0005303a 	rdctl	r2,status
81133fd8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133fdc:	e0fffd17 	ldw	r3,-12(fp)
81133fe0:	00bfff84 	movi	r2,-2
81133fe4:	1884703a 	and	r2,r3,r2
81133fe8:	1001703a 	wrctl	status,r2
  
  return context;
81133fec:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
81133ff0:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
81133ff4:	e0bffb17 	ldw	r2,-20(fp)
81133ff8:	10800917 	ldw	r2,36(r2)
81133ffc:	e0fffb17 	ldw	r3,-20(fp)
81134000:	18c00a17 	ldw	r3,40(r3)
81134004:	1809883a 	mov	r4,r3
81134008:	103ee83a 	callr	r2
8113400c:	e0bffc17 	ldw	r2,-16(fp)
81134010:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134014:	e0bffe17 	ldw	r2,-8(fp)
81134018:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
8113401c:	0001883a 	nop
81134020:	e037883a 	mov	sp,fp
81134024:	dfc00117 	ldw	ra,4(sp)
81134028:	df000017 	ldw	fp,0(sp)
8113402c:	dec00204 	addi	sp,sp,8
81134030:	f800283a 	ret

81134034 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81134034:	defffa04 	addi	sp,sp,-24
81134038:	de00012e 	bgeu	sp,et,81134040 <alt_avalon_sgdma_init+0xc>
8113403c:	003b68fa 	trap	3
81134040:	dfc00515 	stw	ra,20(sp)
81134044:	df000415 	stw	fp,16(sp)
81134048:	df000404 	addi	fp,sp,16
8113404c:	e13ffd15 	stw	r4,-12(fp)
81134050:	e17ffe15 	stw	r5,-8(fp)
81134054:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81134058:	e0bffd17 	ldw	r2,-12(fp)
8113405c:	10800317 	ldw	r2,12(r2)
81134060:	10800404 	addi	r2,r2,16
81134064:	00c00074 	movhi	r3,1
81134068:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
8113406c:	e0bffd17 	ldw	r2,-12(fp)
81134070:	10800317 	ldw	r2,12(r2)
81134074:	10800404 	addi	r2,r2,16
81134078:	00c00074 	movhi	r3,1
8113407c:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
81134080:	e0bffd17 	ldw	r2,-12(fp)
81134084:	10800317 	ldw	r2,12(r2)
81134088:	10800404 	addi	r2,r2,16
8113408c:	0007883a 	mov	r3,zero
81134090:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81134094:	e0bffd17 	ldw	r2,-12(fp)
81134098:	10800317 	ldw	r2,12(r2)
8113409c:	00c03fc4 	movi	r3,255
811340a0:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
811340a4:	d1603904 	addi	r5,gp,-32540
811340a8:	e13ffd17 	ldw	r4,-12(fp)
811340ac:	11371900 	call	81137190 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
811340b0:	d8000015 	stw	zero,0(sp)
811340b4:	e1fffd17 	ldw	r7,-12(fp)
811340b8:	01a044f4 	movhi	r6,33043
811340bc:	318fdc04 	addi	r6,r6,16240
811340c0:	e17fff17 	ldw	r5,-4(fp)
811340c4:	e13ffe17 	ldw	r4,-8(fp)
811340c8:	11375980 	call	81137598 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
811340cc:	0001883a 	nop
811340d0:	e037883a 	mov	sp,fp
811340d4:	dfc00117 	ldw	ra,4(sp)
811340d8:	df000017 	ldw	fp,0(sp)
811340dc:	dec00204 	addi	sp,sp,8
811340e0:	f800283a 	ret

811340e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
811340e4:	defffa04 	addi	sp,sp,-24
811340e8:	de00012e 	bgeu	sp,et,811340f0 <alt_avalon_timer_sc_irq+0xc>
811340ec:	003b68fa 	trap	3
811340f0:	dfc00515 	stw	ra,20(sp)
811340f4:	df000415 	stw	fp,16(sp)
811340f8:	df000404 	addi	fp,sp,16
811340fc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81134100:	0007883a 	mov	r3,zero
81134104:	e0bfff17 	ldw	r2,-4(fp)
81134108:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
8113410c:	e0bfff17 	ldw	r2,-4(fp)
81134110:	10800104 	addi	r2,r2,4
81134114:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81134118:	0005303a 	rdctl	r2,status
8113411c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81134120:	e0fffd17 	ldw	r3,-12(fp)
81134124:	00bfff84 	movi	r2,-2
81134128:	1884703a 	and	r2,r3,r2
8113412c:	1001703a 	wrctl	status,r2
  
  return context;
81134130:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
81134134:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81134138:	1123b780 	call	81123b78 <alt_tick>
8113413c:	e0bffc17 	ldw	r2,-16(fp)
81134140:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134144:	e0bffe17 	ldw	r2,-8(fp)
81134148:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8113414c:	0001883a 	nop
81134150:	e037883a 	mov	sp,fp
81134154:	dfc00117 	ldw	ra,4(sp)
81134158:	df000017 	ldw	fp,0(sp)
8113415c:	dec00204 	addi	sp,sp,8
81134160:	f800283a 	ret

81134164 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81134164:	defff804 	addi	sp,sp,-32
81134168:	de00012e 	bgeu	sp,et,81134170 <alt_avalon_timer_sc_init+0xc>
8113416c:	003b68fa 	trap	3
81134170:	dfc00715 	stw	ra,28(sp)
81134174:	df000615 	stw	fp,24(sp)
81134178:	df000604 	addi	fp,sp,24
8113417c:	e13ffc15 	stw	r4,-16(fp)
81134180:	e17ffd15 	stw	r5,-12(fp)
81134184:	e1bffe15 	stw	r6,-8(fp)
81134188:	e1ffff15 	stw	r7,-4(fp)
8113418c:	e0bfff17 	ldw	r2,-4(fp)
81134190:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
81134194:	d0a07617 	ldw	r2,-32296(gp)
81134198:	1000021e 	bne	r2,zero,811341a4 <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
8113419c:	e0bffb17 	ldw	r2,-20(fp)
811341a0:	d0a07615 	stw	r2,-32296(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
811341a4:	e0bffc17 	ldw	r2,-16(fp)
811341a8:	10800104 	addi	r2,r2,4
811341ac:	00c001c4 	movi	r3,7
811341b0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
811341b4:	d8000015 	stw	zero,0(sp)
811341b8:	e1fffc17 	ldw	r7,-16(fp)
811341bc:	01a044f4 	movhi	r6,33043
811341c0:	31903904 	addi	r6,r6,16612
811341c4:	e17ffe17 	ldw	r5,-8(fp)
811341c8:	e13ffd17 	ldw	r4,-12(fp)
811341cc:	11375980 	call	81137598 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
811341d0:	0001883a 	nop
811341d4:	e037883a 	mov	sp,fp
811341d8:	dfc00117 	ldw	ra,4(sp)
811341dc:	df000017 	ldw	fp,0(sp)
811341e0:	dec00204 	addi	sp,sp,8
811341e4:	f800283a 	ret

811341e8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
811341e8:	defffa04 	addi	sp,sp,-24
811341ec:	de00012e 	bgeu	sp,et,811341f4 <altera_avalon_uart_read_fd+0xc>
811341f0:	003b68fa 	trap	3
811341f4:	dfc00515 	stw	ra,20(sp)
811341f8:	df000415 	stw	fp,16(sp)
811341fc:	df000404 	addi	fp,sp,16
81134200:	e13ffd15 	stw	r4,-12(fp)
81134204:	e17ffe15 	stw	r5,-8(fp)
81134208:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113420c:	e0bffd17 	ldw	r2,-12(fp)
81134210:	10800017 	ldw	r2,0(r2)
81134214:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81134218:	e0bffc17 	ldw	r2,-16(fp)
8113421c:	10c00a04 	addi	r3,r2,40
81134220:	e0bffd17 	ldw	r2,-12(fp)
81134224:	10800217 	ldw	r2,8(r2)
81134228:	100f883a 	mov	r7,r2
8113422c:	e1bfff17 	ldw	r6,-4(fp)
81134230:	e17ffe17 	ldw	r5,-8(fp)
81134234:	1809883a 	mov	r4,r3
81134238:	11348a80 	call	811348a8 <altera_avalon_uart_read>
      fd->fd_flags);
}
8113423c:	e037883a 	mov	sp,fp
81134240:	dfc00117 	ldw	ra,4(sp)
81134244:	df000017 	ldw	fp,0(sp)
81134248:	dec00204 	addi	sp,sp,8
8113424c:	f800283a 	ret

81134250 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81134250:	defffa04 	addi	sp,sp,-24
81134254:	de00012e 	bgeu	sp,et,8113425c <altera_avalon_uart_write_fd+0xc>
81134258:	003b68fa 	trap	3
8113425c:	dfc00515 	stw	ra,20(sp)
81134260:	df000415 	stw	fp,16(sp)
81134264:	df000404 	addi	fp,sp,16
81134268:	e13ffd15 	stw	r4,-12(fp)
8113426c:	e17ffe15 	stw	r5,-8(fp)
81134270:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81134274:	e0bffd17 	ldw	r2,-12(fp)
81134278:	10800017 	ldw	r2,0(r2)
8113427c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81134280:	e0bffc17 	ldw	r2,-16(fp)
81134284:	10c00a04 	addi	r3,r2,40
81134288:	e0bffd17 	ldw	r2,-12(fp)
8113428c:	10800217 	ldw	r2,8(r2)
81134290:	100f883a 	mov	r7,r2
81134294:	e1bfff17 	ldw	r6,-4(fp)
81134298:	e17ffe17 	ldw	r5,-8(fp)
8113429c:	1809883a 	mov	r4,r3
811342a0:	1134b5c0 	call	81134b5c <altera_avalon_uart_write>
      fd->fd_flags);
}
811342a4:	e037883a 	mov	sp,fp
811342a8:	dfc00117 	ldw	ra,4(sp)
811342ac:	df000017 	ldw	fp,0(sp)
811342b0:	dec00204 	addi	sp,sp,8
811342b4:	f800283a 	ret

811342b8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
811342b8:	defffc04 	addi	sp,sp,-16
811342bc:	de00012e 	bgeu	sp,et,811342c4 <altera_avalon_uart_close_fd+0xc>
811342c0:	003b68fa 	trap	3
811342c4:	dfc00315 	stw	ra,12(sp)
811342c8:	df000215 	stw	fp,8(sp)
811342cc:	df000204 	addi	fp,sp,8
811342d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
811342d4:	e0bfff17 	ldw	r2,-4(fp)
811342d8:	10800017 	ldw	r2,0(r2)
811342dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
811342e0:	e0bffe17 	ldw	r2,-8(fp)
811342e4:	10c00a04 	addi	r3,r2,40
811342e8:	e0bfff17 	ldw	r2,-4(fp)
811342ec:	10800217 	ldw	r2,8(r2)
811342f0:	100b883a 	mov	r5,r2
811342f4:	1809883a 	mov	r4,r3
811342f8:	11348080 	call	81134808 <altera_avalon_uart_close>
}
811342fc:	e037883a 	mov	sp,fp
81134300:	dfc00117 	ldw	ra,4(sp)
81134304:	df000017 	ldw	fp,0(sp)
81134308:	dec00204 	addi	sp,sp,8
8113430c:	f800283a 	ret

81134310 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81134310:	defff304 	addi	sp,sp,-52
81134314:	de00012e 	bgeu	sp,et,8113431c <altera_avalon_uart_init+0xc>
81134318:	003b68fa 	trap	3
8113431c:	dfc00c15 	stw	ra,48(sp)
81134320:	df000b15 	stw	fp,44(sp)
81134324:	df000b04 	addi	fp,sp,44
81134328:	e13ffd15 	stw	r4,-12(fp)
8113432c:	e17ffe15 	stw	r5,-8(fp)
81134330:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81134334:	e0bffd17 	ldw	r2,-12(fp)
81134338:	10800017 	ldw	r2,0(r2)
8113433c:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81134340:	e0bffd17 	ldw	r2,-12(fp)
81134344:	10800704 	addi	r2,r2,28
81134348:	e0bffa15 	stw	r2,-24(fp)
8113434c:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81134350:	e0bffb0b 	ldhu	r2,-20(fp)
81134354:	e0fffc84 	addi	r3,fp,-14
81134358:	180b883a 	mov	r5,r3
8113435c:	1009883a 	mov	r4,r2
81134360:	11268800 	call	81126880 <OSFlagCreate>
81134364:	1007883a 	mov	r3,r2
81134368:	e0bffa17 	ldw	r2,-24(fp)
8113436c:	10c00015 	stw	r3,0(r2)
  return err;
81134370:	e0bffc83 	ldbu	r2,-14(fp)
81134374:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81134378:	1000241e 	bne	r2,zero,8113440c <altera_avalon_uart_init+0xfc>
8113437c:	e0bffd17 	ldw	r2,-12(fp)
81134380:	10800804 	addi	r2,r2,32
81134384:	e0bff715 	stw	r2,-36(fp)
81134388:	00800044 	movi	r2,1
8113438c:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81134390:	e0bffb8b 	ldhu	r2,-18(fp)
81134394:	1009883a 	mov	r4,r2
81134398:	112a7dc0 	call	8112a7dc <OSSemCreate>
8113439c:	1007883a 	mov	r3,r2
811343a0:	e0bff717 	ldw	r2,-36(fp)
811343a4:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
811343a8:	e0bff717 	ldw	r2,-36(fp)
811343ac:	10800017 	ldw	r2,0(r2)
811343b0:	10000226 	beq	r2,zero,811343bc <altera_avalon_uart_init+0xac>
811343b4:	0005883a 	mov	r2,zero
811343b8:	00000106 	br	811343c0 <altera_avalon_uart_init+0xb0>
811343bc:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811343c0:	1000121e 	bne	r2,zero,8113440c <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
811343c4:	e0bffd17 	ldw	r2,-12(fp)
811343c8:	10800904 	addi	r2,r2,36
811343cc:	e0bff815 	stw	r2,-32(fp)
811343d0:	00800044 	movi	r2,1
811343d4:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
811343d8:	e0bffc0b 	ldhu	r2,-16(fp)
811343dc:	1009883a 	mov	r4,r2
811343e0:	112a7dc0 	call	8112a7dc <OSSemCreate>
811343e4:	1007883a 	mov	r3,r2
811343e8:	e0bff817 	ldw	r2,-32(fp)
811343ec:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
811343f0:	e0bff817 	ldw	r2,-32(fp)
811343f4:	10800017 	ldw	r2,0(r2)
811343f8:	10000226 	beq	r2,zero,81134404 <altera_avalon_uart_init+0xf4>
811343fc:	0005883a 	mov	r2,zero
81134400:	00000106 	br	81134408 <altera_avalon_uart_init+0xf8>
81134404:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81134408:	10000226 	beq	r2,zero,81134414 <altera_avalon_uart_init+0x104>
8113440c:	00800044 	movi	r2,1
81134410:	00000106 	br	81134418 <altera_avalon_uart_init+0x108>
81134414:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81134418:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
8113441c:	e0bff917 	ldw	r2,-28(fp)
81134420:	10000f1e 	bne	r2,zero,81134460 <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81134424:	e0bffd17 	ldw	r2,-12(fp)
81134428:	00c32004 	movi	r3,3200
8113442c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
81134430:	e0bff617 	ldw	r2,-40(fp)
81134434:	10800304 	addi	r2,r2,12
81134438:	e0fffd17 	ldw	r3,-12(fp)
8113443c:	18c00117 	ldw	r3,4(r3)
81134440:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81134444:	d8000015 	stw	zero,0(sp)
81134448:	e1fffd17 	ldw	r7,-12(fp)
8113444c:	01a044f4 	movhi	r6,33043
81134450:	31911e04 	addi	r6,r6,17528
81134454:	e17fff17 	ldw	r5,-4(fp)
81134458:	e13ffe17 	ldw	r4,-8(fp)
8113445c:	11375980 	call	81137598 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
81134460:	0001883a 	nop
81134464:	e037883a 	mov	sp,fp
81134468:	dfc00117 	ldw	ra,4(sp)
8113446c:	df000017 	ldw	fp,0(sp)
81134470:	dec00204 	addi	sp,sp,8
81134474:	f800283a 	ret

81134478 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81134478:	defffa04 	addi	sp,sp,-24
8113447c:	de00012e 	bgeu	sp,et,81134484 <altera_avalon_uart_irq+0xc>
81134480:	003b68fa 	trap	3
81134484:	dfc00515 	stw	ra,20(sp)
81134488:	df000415 	stw	fp,16(sp)
8113448c:	df000404 	addi	fp,sp,16
81134490:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81134494:	e0bfff17 	ldw	r2,-4(fp)
81134498:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8113449c:	e0bffc17 	ldw	r2,-16(fp)
811344a0:	10800017 	ldw	r2,0(r2)
811344a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
811344a8:	e0bffd17 	ldw	r2,-12(fp)
811344ac:	10800204 	addi	r2,r2,8
811344b0:	10800037 	ldwio	r2,0(r2)
811344b4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
811344b8:	e0bffd17 	ldw	r2,-12(fp)
811344bc:	10800204 	addi	r2,r2,8
811344c0:	0007883a 	mov	r3,zero
811344c4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
811344c8:	e0bffd17 	ldw	r2,-12(fp)
811344cc:	10800204 	addi	r2,r2,8
811344d0:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
811344d4:	e0bffe17 	ldw	r2,-8(fp)
811344d8:	1080200c 	andi	r2,r2,128
811344dc:	10000326 	beq	r2,zero,811344ec <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
811344e0:	e17ffe17 	ldw	r5,-8(fp)
811344e4:	e13ffc17 	ldw	r4,-16(fp)
811344e8:	113451c0 	call	8113451c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
811344ec:	e0bffe17 	ldw	r2,-8(fp)
811344f0:	1081100c 	andi	r2,r2,1088
811344f4:	10000326 	beq	r2,zero,81134504 <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
811344f8:	e17ffe17 	ldw	r5,-8(fp)
811344fc:	e13ffc17 	ldw	r4,-16(fp)
81134500:	113465c0 	call	8113465c <altera_avalon_uart_txirq>
  }
  

}
81134504:	0001883a 	nop
81134508:	e037883a 	mov	sp,fp
8113450c:	dfc00117 	ldw	ra,4(sp)
81134510:	df000017 	ldw	fp,0(sp)
81134514:	dec00204 	addi	sp,sp,8
81134518:	f800283a 	ret

8113451c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8113451c:	defff904 	addi	sp,sp,-28
81134520:	de00012e 	bgeu	sp,et,81134528 <altera_avalon_uart_rxirq+0xc>
81134524:	003b68fa 	trap	3
81134528:	dfc00615 	stw	ra,24(sp)
8113452c:	df000515 	stw	fp,20(sp)
81134530:	df000504 	addi	fp,sp,20
81134534:	e13ffe15 	stw	r4,-8(fp)
81134538:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
8113453c:	e0bfff17 	ldw	r2,-4(fp)
81134540:	108000cc 	andi	r2,r2,3
81134544:	10003f1e 	bne	r2,zero,81134644 <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81134548:	e0bffe17 	ldw	r2,-8(fp)
8113454c:	10c00317 	ldw	r3,12(r2)
81134550:	e0bffe17 	ldw	r2,-8(fp)
81134554:	10800217 	ldw	r2,8(r2)
81134558:	1880121e 	bne	r3,r2,811345a4 <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
8113455c:	e0bffe17 	ldw	r2,-8(fp)
81134560:	10800717 	ldw	r2,28(r2)
81134564:	e0bffc15 	stw	r2,-16(fp)
81134568:	00800044 	movi	r2,1
8113456c:	e0bffd0d 	sth	r2,-12(fp)
81134570:	00800044 	movi	r2,1
81134574:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81134578:	d0a07f03 	ldbu	r2,-32260(gp)
8113457c:	10803fcc 	andi	r2,r2,255
81134580:	10000826 	beq	r2,zero,811345a4 <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
81134584:	e0bffd0b 	ldhu	r2,-12(fp)
81134588:	e0fffd83 	ldbu	r3,-10(fp)
8113458c:	e13ffdc4 	addi	r4,fp,-9
81134590:	200f883a 	mov	r7,r4
81134594:	180d883a 	mov	r6,r3
81134598:	100b883a 	mov	r5,r2
8113459c:	e13ffc17 	ldw	r4,-16(fp)
811345a0:	112748c0 	call	8112748c <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
811345a4:	e0bffe17 	ldw	r2,-8(fp)
811345a8:	10800317 	ldw	r2,12(r2)
811345ac:	10800044 	addi	r2,r2,1
811345b0:	10800fcc 	andi	r2,r2,63
811345b4:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
811345b8:	e0bffe17 	ldw	r2,-8(fp)
811345bc:	10800317 	ldw	r2,12(r2)
811345c0:	e0fffe17 	ldw	r3,-8(fp)
811345c4:	18c00017 	ldw	r3,0(r3)
811345c8:	18c00037 	ldwio	r3,0(r3)
811345cc:	1809883a 	mov	r4,r3
811345d0:	e0fffe17 	ldw	r3,-8(fp)
811345d4:	1885883a 	add	r2,r3,r2
811345d8:	10800a04 	addi	r2,r2,40
811345dc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
811345e0:	e0bffe17 	ldw	r2,-8(fp)
811345e4:	e0fffb17 	ldw	r3,-20(fp)
811345e8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
811345ec:	e0bffe17 	ldw	r2,-8(fp)
811345f0:	10800317 	ldw	r2,12(r2)
811345f4:	10800044 	addi	r2,r2,1
811345f8:	10800fcc 	andi	r2,r2,63
811345fc:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81134600:	e0bffe17 	ldw	r2,-8(fp)
81134604:	10c00217 	ldw	r3,8(r2)
81134608:	e0bffb17 	ldw	r2,-20(fp)
8113460c:	18800e1e 	bne	r3,r2,81134648 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81134610:	e0bffe17 	ldw	r2,-8(fp)
81134614:	10c00117 	ldw	r3,4(r2)
81134618:	00bfdfc4 	movi	r2,-129
8113461c:	1886703a 	and	r3,r3,r2
81134620:	e0bffe17 	ldw	r2,-8(fp)
81134624:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81134628:	e0bffe17 	ldw	r2,-8(fp)
8113462c:	10800017 	ldw	r2,0(r2)
81134630:	10800304 	addi	r2,r2,12
81134634:	e0fffe17 	ldw	r3,-8(fp)
81134638:	18c00117 	ldw	r3,4(r3)
8113463c:	10c00035 	stwio	r3,0(r2)
81134640:	00000106 	br	81134648 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
81134644:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
81134648:	e037883a 	mov	sp,fp
8113464c:	dfc00117 	ldw	ra,4(sp)
81134650:	df000017 	ldw	fp,0(sp)
81134654:	dec00204 	addi	sp,sp,8
81134658:	f800283a 	ret

8113465c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
8113465c:	defffa04 	addi	sp,sp,-24
81134660:	de00012e 	bgeu	sp,et,81134668 <altera_avalon_uart_txirq+0xc>
81134664:	003b68fa 	trap	3
81134668:	dfc00515 	stw	ra,20(sp)
8113466c:	df000415 	stw	fp,16(sp)
81134670:	df000404 	addi	fp,sp,16
81134674:	e13ffe15 	stw	r4,-8(fp)
81134678:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
8113467c:	e0bffe17 	ldw	r2,-8(fp)
81134680:	10c00417 	ldw	r3,16(r2)
81134684:	e0bffe17 	ldw	r2,-8(fp)
81134688:	10800517 	ldw	r2,20(r2)
8113468c:	18804726 	beq	r3,r2,811347ac <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81134690:	e0bffe17 	ldw	r2,-8(fp)
81134694:	10800617 	ldw	r2,24(r2)
81134698:	1080008c 	andi	r2,r2,2
8113469c:	10000326 	beq	r2,zero,811346ac <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
811346a0:	e0bfff17 	ldw	r2,-4(fp)
811346a4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
811346a8:	10003226 	beq	r2,zero,81134774 <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
811346ac:	e0bffe17 	ldw	r2,-8(fp)
811346b0:	10c00417 	ldw	r3,16(r2)
811346b4:	e0bffe17 	ldw	r2,-8(fp)
811346b8:	10800517 	ldw	r2,20(r2)
811346bc:	10800044 	addi	r2,r2,1
811346c0:	10800fcc 	andi	r2,r2,63
811346c4:	1880121e 	bne	r3,r2,81134710 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
811346c8:	e0bffe17 	ldw	r2,-8(fp)
811346cc:	10800717 	ldw	r2,28(r2)
811346d0:	e0bffc15 	stw	r2,-16(fp)
811346d4:	00800084 	movi	r2,2
811346d8:	e0bffd0d 	sth	r2,-12(fp)
811346dc:	00800044 	movi	r2,1
811346e0:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
811346e4:	d0a07f03 	ldbu	r2,-32260(gp)
811346e8:	10803fcc 	andi	r2,r2,255
811346ec:	10000826 	beq	r2,zero,81134710 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
811346f0:	e0bffd0b 	ldhu	r2,-12(fp)
811346f4:	e0fffd83 	ldbu	r3,-10(fp)
811346f8:	e13ffdc4 	addi	r4,fp,-9
811346fc:	200f883a 	mov	r7,r4
81134700:	180d883a 	mov	r6,r3
81134704:	100b883a 	mov	r5,r2
81134708:	e13ffc17 	ldw	r4,-16(fp)
8113470c:	112748c0 	call	8112748c <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81134710:	e0bffe17 	ldw	r2,-8(fp)
81134714:	10800017 	ldw	r2,0(r2)
81134718:	10800104 	addi	r2,r2,4
8113471c:	e0fffe17 	ldw	r3,-8(fp)
81134720:	18c00417 	ldw	r3,16(r3)
81134724:	e13ffe17 	ldw	r4,-8(fp)
81134728:	20c7883a 	add	r3,r4,r3
8113472c:	18c01a04 	addi	r3,r3,104
81134730:	18c00003 	ldbu	r3,0(r3)
81134734:	18c03fcc 	andi	r3,r3,255
81134738:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
8113473c:	e0bffe17 	ldw	r2,-8(fp)
81134740:	10800417 	ldw	r2,16(r2)
81134744:	10800044 	addi	r2,r2,1
81134748:	e0fffe17 	ldw	r3,-8(fp)
8113474c:	18800415 	stw	r2,16(r3)
81134750:	10c00fcc 	andi	r3,r2,63
81134754:	e0bffe17 	ldw	r2,-8(fp)
81134758:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
8113475c:	e0bffe17 	ldw	r2,-8(fp)
81134760:	10800117 	ldw	r2,4(r2)
81134764:	10c01014 	ori	r3,r2,64
81134768:	e0bffe17 	ldw	r2,-8(fp)
8113476c:	10c00115 	stw	r3,4(r2)
81134770:	00000e06 	br	811347ac <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81134774:	e0bffe17 	ldw	r2,-8(fp)
81134778:	10800017 	ldw	r2,0(r2)
8113477c:	10800204 	addi	r2,r2,8
81134780:	10800037 	ldwio	r2,0(r2)
81134784:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81134788:	e0bfff17 	ldw	r2,-4(fp)
8113478c:	1082000c 	andi	r2,r2,2048
81134790:	1000061e 	bne	r2,zero,811347ac <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81134794:	e0bffe17 	ldw	r2,-8(fp)
81134798:	10c00117 	ldw	r3,4(r2)
8113479c:	00bfefc4 	movi	r2,-65
811347a0:	1886703a 	and	r3,r3,r2
811347a4:	e0bffe17 	ldw	r2,-8(fp)
811347a8:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
811347ac:	e0bffe17 	ldw	r2,-8(fp)
811347b0:	10c00417 	ldw	r3,16(r2)
811347b4:	e0bffe17 	ldw	r2,-8(fp)
811347b8:	10800517 	ldw	r2,20(r2)
811347bc:	1880061e 	bne	r3,r2,811347d8 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
811347c0:	e0bffe17 	ldw	r2,-8(fp)
811347c4:	10c00117 	ldw	r3,4(r2)
811347c8:	00beefc4 	movi	r2,-1089
811347cc:	1886703a 	and	r3,r3,r2
811347d0:	e0bffe17 	ldw	r2,-8(fp)
811347d4:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811347d8:	e0bffe17 	ldw	r2,-8(fp)
811347dc:	10800017 	ldw	r2,0(r2)
811347e0:	10800304 	addi	r2,r2,12
811347e4:	e0fffe17 	ldw	r3,-8(fp)
811347e8:	18c00117 	ldw	r3,4(r3)
811347ec:	10c00035 	stwio	r3,0(r2)
}
811347f0:	0001883a 	nop
811347f4:	e037883a 	mov	sp,fp
811347f8:	dfc00117 	ldw	ra,4(sp)
811347fc:	df000017 	ldw	fp,0(sp)
81134800:	dec00204 	addi	sp,sp,8
81134804:	f800283a 	ret

81134808 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81134808:	defffd04 	addi	sp,sp,-12
8113480c:	de00012e 	bgeu	sp,et,81134814 <altera_avalon_uart_close+0xc>
81134810:	003b68fa 	trap	3
81134814:	df000215 	stw	fp,8(sp)
81134818:	df000204 	addi	fp,sp,8
8113481c:	e13ffe15 	stw	r4,-8(fp)
81134820:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81134824:	00000506 	br	8113483c <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81134828:	e0bfff17 	ldw	r2,-4(fp)
8113482c:	1090000c 	andi	r2,r2,16384
81134830:	10000226 	beq	r2,zero,8113483c <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
81134834:	00bffd44 	movi	r2,-11
81134838:	00000606 	br	81134854 <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113483c:	e0bffe17 	ldw	r2,-8(fp)
81134840:	10c00417 	ldw	r3,16(r2)
81134844:	e0bffe17 	ldw	r2,-8(fp)
81134848:	10800517 	ldw	r2,20(r2)
8113484c:	18bff61e 	bne	r3,r2,81134828 <__reset+0xfb114828>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
81134850:	0005883a 	mov	r2,zero
}
81134854:	e037883a 	mov	sp,fp
81134858:	df000017 	ldw	fp,0(sp)
8113485c:	dec00104 	addi	sp,sp,4
81134860:	f800283a 	ret

81134864 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81134864:	defffe04 	addi	sp,sp,-8
81134868:	de00012e 	bgeu	sp,et,81134870 <alt_get_errno+0xc>
8113486c:	003b68fa 	trap	3
81134870:	dfc00115 	stw	ra,4(sp)
81134874:	df000015 	stw	fp,0(sp)
81134878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113487c:	d0a01617 	ldw	r2,-32680(gp)
81134880:	10000326 	beq	r2,zero,81134890 <alt_get_errno+0x2c>
81134884:	d0a01617 	ldw	r2,-32680(gp)
81134888:	103ee83a 	callr	r2
8113488c:	00000106 	br	81134894 <alt_get_errno+0x30>
81134890:	d0a06b04 	addi	r2,gp,-32340
}
81134894:	e037883a 	mov	sp,fp
81134898:	dfc00117 	ldw	ra,4(sp)
8113489c:	df000017 	ldw	fp,0(sp)
811348a0:	dec00204 	addi	sp,sp,8
811348a4:	f800283a 	ret

811348a8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
811348a8:	deffec04 	addi	sp,sp,-80
811348ac:	de00012e 	bgeu	sp,et,811348b4 <altera_avalon_uart_read+0xc>
811348b0:	003b68fa 	trap	3
811348b4:	dfc01315 	stw	ra,76(sp)
811348b8:	df001215 	stw	fp,72(sp)
811348bc:	df001204 	addi	fp,sp,72
811348c0:	e13ffc15 	stw	r4,-16(fp)
811348c4:	e17ffd15 	stw	r5,-12(fp)
811348c8:	e1bffe15 	stw	r6,-8(fp)
811348cc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
811348d0:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
811348d4:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
811348d8:	e0bfff17 	ldw	r2,-4(fp)
811348dc:	1090000c 	andi	r2,r2,16384
811348e0:	1005003a 	cmpeq	r2,r2,zero
811348e4:	10803fcc 	andi	r2,r2,255
811348e8:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
811348ec:	e0bffc17 	ldw	r2,-16(fp)
811348f0:	10800817 	ldw	r2,32(r2)
811348f4:	e0bff815 	stw	r2,-32(fp)
811348f8:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811348fc:	e0bff90b 	ldhu	r2,-28(fp)
81134900:	e0fffb44 	addi	r3,fp,-19
81134904:	180d883a 	mov	r6,r3
81134908:	100b883a 	mov	r5,r2
8113490c:	e13ff817 	ldw	r4,-32(fp)
81134910:	112ab040 	call	8112ab04 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81134914:	00001306 	br	81134964 <altera_avalon_uart_read+0xbc>
    {
      count++;
81134918:	e0bff017 	ldw	r2,-64(fp)
8113491c:	10800044 	addi	r2,r2,1
81134920:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
81134924:	e0bffd17 	ldw	r2,-12(fp)
81134928:	10c00044 	addi	r3,r2,1
8113492c:	e0fffd15 	stw	r3,-12(fp)
81134930:	e0fffc17 	ldw	r3,-16(fp)
81134934:	18c00217 	ldw	r3,8(r3)
81134938:	e13ffc17 	ldw	r4,-16(fp)
8113493c:	20c7883a 	add	r3,r4,r3
81134940:	18c00a04 	addi	r3,r3,40
81134944:	18c00003 	ldbu	r3,0(r3)
81134948:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
8113494c:	e0bffc17 	ldw	r2,-16(fp)
81134950:	10800217 	ldw	r2,8(r2)
81134954:	10800044 	addi	r2,r2,1
81134958:	10c00fcc 	andi	r3,r2,63
8113495c:	e0bffc17 	ldw	r2,-16(fp)
81134960:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
81134964:	e0fff017 	ldw	r3,-64(fp)
81134968:	e0bffe17 	ldw	r2,-8(fp)
8113496c:	1880050e 	bge	r3,r2,81134984 <altera_avalon_uart_read+0xdc>
81134970:	e0bffc17 	ldw	r2,-16(fp)
81134974:	10c00217 	ldw	r3,8(r2)
81134978:	e0bffc17 	ldw	r2,-16(fp)
8113497c:	10800317 	ldw	r2,12(r2)
81134980:	18bfe51e 	bne	r3,r2,81134918 <__reset+0xfb114918>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
81134984:	e0bff017 	ldw	r2,-64(fp)
81134988:	10003a1e 	bne	r2,zero,81134a74 <altera_avalon_uart_read+0x1cc>
8113498c:	e0bffc17 	ldw	r2,-16(fp)
81134990:	10c00217 	ldw	r3,8(r2)
81134994:	e0bffc17 	ldw	r2,-16(fp)
81134998:	10800317 	ldw	r2,12(r2)
8113499c:	1880351e 	bne	r3,r2,81134a74 <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
811349a0:	e0bff117 	ldw	r2,-60(fp)
811349a4:	1000071e 	bne	r2,zero,811349c4 <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
811349a8:	11348640 	call	81134864 <alt_get_errno>
811349ac:	1007883a 	mov	r3,r2
811349b0:	008002c4 	movi	r2,11
811349b4:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
811349b8:	00800044 	movi	r2,1
811349bc:	e0bfef05 	stb	r2,-68(fp)
        break;
811349c0:	00003006 	br	81134a84 <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811349c4:	0005303a 	rdctl	r2,status
811349c8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811349cc:	e0fff517 	ldw	r3,-44(fp)
811349d0:	00bfff84 	movi	r2,-2
811349d4:	1884703a 	and	r2,r3,r2
811349d8:	1001703a 	wrctl	status,r2
  
  return context;
811349dc:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
811349e0:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
811349e4:	e0bffc17 	ldw	r2,-16(fp)
811349e8:	10800117 	ldw	r2,4(r2)
811349ec:	10c02014 	ori	r3,r2,128
811349f0:	e0bffc17 	ldw	r2,-16(fp)
811349f4:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811349f8:	e0bffc17 	ldw	r2,-16(fp)
811349fc:	10800017 	ldw	r2,0(r2)
81134a00:	10800304 	addi	r2,r2,12
81134a04:	e0fffc17 	ldw	r3,-16(fp)
81134a08:	18c00117 	ldw	r3,4(r3)
81134a0c:	10c00035 	stwio	r3,0(r2)
81134a10:	e0bff417 	ldw	r2,-48(fp)
81134a14:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134a18:	e0bff617 	ldw	r2,-40(fp)
81134a1c:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
81134a20:	e0bffc17 	ldw	r2,-16(fp)
81134a24:	10800717 	ldw	r2,28(r2)
81134a28:	e0bff215 	stw	r2,-56(fp)
81134a2c:	00800044 	movi	r2,1
81134a30:	e0bff98d 	sth	r2,-26(fp)
81134a34:	00bfe0c4 	movi	r2,-125
81134a38:	e0bffa05 	stb	r2,-24(fp)
81134a3c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81134a40:	d0a07f03 	ldbu	r2,-32260(gp)
81134a44:	10803fcc 	andi	r2,r2,255
81134a48:	10000a26 	beq	r2,zero,81134a74 <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81134a4c:	e0fff98b 	ldhu	r3,-26(fp)
81134a50:	e13ffa03 	ldbu	r4,-24(fp)
81134a54:	e17ffa8b 	ldhu	r5,-22(fp)
81134a58:	e0bffb04 	addi	r2,fp,-20
81134a5c:	d8800015 	stw	r2,0(sp)
81134a60:	280f883a 	mov	r7,r5
81134a64:	200d883a 	mov	r6,r4
81134a68:	180b883a 	mov	r5,r3
81134a6c:	e13ff217 	ldw	r4,-56(fp)
81134a70:	1126e640 	call	81126e64 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81134a74:	e0bff017 	ldw	r2,-64(fp)
81134a78:	1000021e 	bne	r2,zero,81134a84 <altera_avalon_uart_read+0x1dc>
81134a7c:	e0bffe17 	ldw	r2,-8(fp)
81134a80:	103fb81e 	bne	r2,zero,81134964 <__reset+0xfb114964>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81134a84:	e0bffc17 	ldw	r2,-16(fp)
81134a88:	10800817 	ldw	r2,32(r2)
81134a8c:	1009883a 	mov	r4,r2
81134a90:	112ae8c0 	call	8112ae8c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81134a94:	0005303a 	rdctl	r2,status
81134a98:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81134a9c:	e0fff717 	ldw	r3,-36(fp)
81134aa0:	00bfff84 	movi	r2,-2
81134aa4:	1884703a 	and	r2,r3,r2
81134aa8:	1001703a 	wrctl	status,r2
  
  return context;
81134aac:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81134ab0:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81134ab4:	e0bffc17 	ldw	r2,-16(fp)
81134ab8:	10800117 	ldw	r2,4(r2)
81134abc:	10c02014 	ori	r3,r2,128
81134ac0:	e0bffc17 	ldw	r2,-16(fp)
81134ac4:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81134ac8:	e0bffc17 	ldw	r2,-16(fp)
81134acc:	10800017 	ldw	r2,0(r2)
81134ad0:	10800304 	addi	r2,r2,12
81134ad4:	e0fffc17 	ldw	r3,-16(fp)
81134ad8:	18c00117 	ldw	r3,4(r3)
81134adc:	10c00035 	stwio	r3,0(r2)
81134ae0:	e0bff417 	ldw	r2,-48(fp)
81134ae4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134ae8:	e0bff317 	ldw	r2,-52(fp)
81134aec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
81134af0:	e0bfef03 	ldbu	r2,-68(fp)
81134af4:	10000226 	beq	r2,zero,81134b00 <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
81134af8:	00bffd44 	movi	r2,-11
81134afc:	00000106 	br	81134b04 <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
81134b00:	e0bff017 	ldw	r2,-64(fp)
  }
}
81134b04:	e037883a 	mov	sp,fp
81134b08:	dfc00117 	ldw	ra,4(sp)
81134b0c:	df000017 	ldw	fp,0(sp)
81134b10:	dec00204 	addi	sp,sp,8
81134b14:	f800283a 	ret

81134b18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81134b18:	defffe04 	addi	sp,sp,-8
81134b1c:	de00012e 	bgeu	sp,et,81134b24 <alt_get_errno+0xc>
81134b20:	003b68fa 	trap	3
81134b24:	dfc00115 	stw	ra,4(sp)
81134b28:	df000015 	stw	fp,0(sp)
81134b2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81134b30:	d0a01617 	ldw	r2,-32680(gp)
81134b34:	10000326 	beq	r2,zero,81134b44 <alt_get_errno+0x2c>
81134b38:	d0a01617 	ldw	r2,-32680(gp)
81134b3c:	103ee83a 	callr	r2
81134b40:	00000106 	br	81134b48 <alt_get_errno+0x30>
81134b44:	d0a06b04 	addi	r2,gp,-32340
}
81134b48:	e037883a 	mov	sp,fp
81134b4c:	dfc00117 	ldw	ra,4(sp)
81134b50:	df000017 	ldw	fp,0(sp)
81134b54:	dec00204 	addi	sp,sp,8
81134b58:	f800283a 	ret

81134b5c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
81134b5c:	deffec04 	addi	sp,sp,-80
81134b60:	de00012e 	bgeu	sp,et,81134b68 <altera_avalon_uart_write+0xc>
81134b64:	003b68fa 	trap	3
81134b68:	dfc01315 	stw	ra,76(sp)
81134b6c:	df001215 	stw	fp,72(sp)
81134b70:	df001204 	addi	fp,sp,72
81134b74:	e13ffc15 	stw	r4,-16(fp)
81134b78:	e17ffd15 	stw	r5,-12(fp)
81134b7c:	e1bffe15 	stw	r6,-8(fp)
81134b80:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
81134b84:	e0bffe17 	ldw	r2,-8(fp)
81134b88:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
81134b8c:	e0bfff17 	ldw	r2,-4(fp)
81134b90:	1090000c 	andi	r2,r2,16384
81134b94:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
81134b98:	e0bffc17 	ldw	r2,-16(fp)
81134b9c:	10800917 	ldw	r2,36(r2)
81134ba0:	e0bff815 	stw	r2,-32(fp)
81134ba4:	e03ff90d 	sth	zero,-28(fp)
81134ba8:	e0bff90b 	ldhu	r2,-28(fp)
81134bac:	e0fffb44 	addi	r3,fp,-19
81134bb0:	180d883a 	mov	r6,r3
81134bb4:	100b883a 	mov	r5,r2
81134bb8:	e13ff817 	ldw	r4,-32(fp)
81134bbc:	112ab040 	call	8112ab04 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81134bc0:	00005106 	br	81134d08 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81134bc4:	e0bffc17 	ldw	r2,-16(fp)
81134bc8:	10800517 	ldw	r2,20(r2)
81134bcc:	10800044 	addi	r2,r2,1
81134bd0:	10800fcc 	andi	r2,r2,63
81134bd4:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81134bd8:	e0bffc17 	ldw	r2,-16(fp)
81134bdc:	10c00417 	ldw	r3,16(r2)
81134be0:	e0bff217 	ldw	r2,-56(fp)
81134be4:	1880371e 	bne	r3,r2,81134cc4 <altera_avalon_uart_write+0x168>
    {
      if (no_block)
81134be8:	e0bff017 	ldw	r2,-64(fp)
81134bec:	10000526 	beq	r2,zero,81134c04 <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
81134bf0:	1134b180 	call	81134b18 <alt_get_errno>
81134bf4:	1007883a 	mov	r3,r2
81134bf8:	008002c4 	movi	r2,11
81134bfc:	18800015 	stw	r2,0(r3)
        break;
81134c00:	00004306 	br	81134d10 <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81134c04:	0005303a 	rdctl	r2,status
81134c08:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81134c0c:	e0fff517 	ldw	r3,-44(fp)
81134c10:	00bfff84 	movi	r2,-2
81134c14:	1884703a 	and	r2,r3,r2
81134c18:	1001703a 	wrctl	status,r2
  
  return context;
81134c1c:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81134c20:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81134c24:	e0bffc17 	ldw	r2,-16(fp)
81134c28:	10800117 	ldw	r2,4(r2)
81134c2c:	10c11014 	ori	r3,r2,1088
81134c30:	e0bffc17 	ldw	r2,-16(fp)
81134c34:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81134c38:	e0bffc17 	ldw	r2,-16(fp)
81134c3c:	10800017 	ldw	r2,0(r2)
81134c40:	10800304 	addi	r2,r2,12
81134c44:	e0fffc17 	ldw	r3,-16(fp)
81134c48:	18c00117 	ldw	r3,4(r3)
81134c4c:	10c00035 	stwio	r3,0(r2)
81134c50:	e0bff417 	ldw	r2,-48(fp)
81134c54:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134c58:	e0bff117 	ldw	r2,-60(fp)
81134c5c:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
81134c60:	e0bffc17 	ldw	r2,-16(fp)
81134c64:	10800717 	ldw	r2,28(r2)
81134c68:	e0bff315 	stw	r2,-52(fp)
81134c6c:	00800084 	movi	r2,2
81134c70:	e0bff98d 	sth	r2,-26(fp)
81134c74:	00bfe0c4 	movi	r2,-125
81134c78:	e0bffa05 	stb	r2,-24(fp)
81134c7c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81134c80:	d0a07f03 	ldbu	r2,-32260(gp)
81134c84:	10803fcc 	andi	r2,r2,255
81134c88:	10000a26 	beq	r2,zero,81134cb4 <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81134c8c:	e0fff98b 	ldhu	r3,-26(fp)
81134c90:	e13ffa03 	ldbu	r4,-24(fp)
81134c94:	e17ffa8b 	ldhu	r5,-22(fp)
81134c98:	e0bffb04 	addi	r2,fp,-20
81134c9c:	d8800015 	stw	r2,0(sp)
81134ca0:	280f883a 	mov	r7,r5
81134ca4:	200d883a 	mov	r6,r4
81134ca8:	180b883a 	mov	r5,r3
81134cac:	e13ff317 	ldw	r4,-52(fp)
81134cb0:	1126e640 	call	81126e64 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
81134cb4:	e0bffc17 	ldw	r2,-16(fp)
81134cb8:	10c00417 	ldw	r3,16(r2)
81134cbc:	e0bff217 	ldw	r2,-56(fp)
81134cc0:	18bfe726 	beq	r3,r2,81134c60 <__reset+0xfb114c60>
      }
    }

    count--;
81134cc4:	e0bfef17 	ldw	r2,-68(fp)
81134cc8:	10bfffc4 	addi	r2,r2,-1
81134ccc:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81134cd0:	e0bffc17 	ldw	r2,-16(fp)
81134cd4:	10c00517 	ldw	r3,20(r2)
81134cd8:	e0bffd17 	ldw	r2,-12(fp)
81134cdc:	11000044 	addi	r4,r2,1
81134ce0:	e13ffd15 	stw	r4,-12(fp)
81134ce4:	10800003 	ldbu	r2,0(r2)
81134ce8:	1009883a 	mov	r4,r2
81134cec:	e0bffc17 	ldw	r2,-16(fp)
81134cf0:	10c5883a 	add	r2,r2,r3
81134cf4:	10801a04 	addi	r2,r2,104
81134cf8:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
81134cfc:	e0bffc17 	ldw	r2,-16(fp)
81134d00:	e0fff217 	ldw	r3,-56(fp)
81134d04:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81134d08:	e0bfef17 	ldw	r2,-68(fp)
81134d0c:	103fad1e 	bne	r2,zero,81134bc4 <__reset+0xfb114bc4>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81134d10:	e0bffc17 	ldw	r2,-16(fp)
81134d14:	10800917 	ldw	r2,36(r2)
81134d18:	1009883a 	mov	r4,r2
81134d1c:	112ae8c0 	call	8112ae8c <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81134d20:	0005303a 	rdctl	r2,status
81134d24:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81134d28:	e0fff717 	ldw	r3,-36(fp)
81134d2c:	00bfff84 	movi	r2,-2
81134d30:	1884703a 	and	r2,r3,r2
81134d34:	1001703a 	wrctl	status,r2
  
  return context;
81134d38:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
81134d3c:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81134d40:	e0bffc17 	ldw	r2,-16(fp)
81134d44:	10800117 	ldw	r2,4(r2)
81134d48:	10c11014 	ori	r3,r2,1088
81134d4c:	e0bffc17 	ldw	r2,-16(fp)
81134d50:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81134d54:	e0bffc17 	ldw	r2,-16(fp)
81134d58:	10800017 	ldw	r2,0(r2)
81134d5c:	10800304 	addi	r2,r2,12
81134d60:	e0fffc17 	ldw	r3,-16(fp)
81134d64:	18c00117 	ldw	r3,4(r3)
81134d68:	10c00035 	stwio	r3,0(r2)
81134d6c:	e0bff417 	ldw	r2,-48(fp)
81134d70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134d74:	e0bff617 	ldw	r2,-40(fp)
81134d78:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
81134d7c:	e0fffe17 	ldw	r3,-8(fp)
81134d80:	e0bfef17 	ldw	r2,-68(fp)
81134d84:	1885c83a 	sub	r2,r3,r2
}
81134d88:	e037883a 	mov	sp,fp
81134d8c:	dfc00117 	ldw	ra,4(sp)
81134d90:	df000017 	ldw	fp,0(sp)
81134d94:	dec00204 	addi	sp,sp,8
81134d98:	f800283a 	ret

81134d9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81134d9c:	defffe04 	addi	sp,sp,-8
81134da0:	de00012e 	bgeu	sp,et,81134da8 <alt_get_errno+0xc>
81134da4:	003b68fa 	trap	3
81134da8:	dfc00115 	stw	ra,4(sp)
81134dac:	df000015 	stw	fp,0(sp)
81134db0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81134db4:	d0a01617 	ldw	r2,-32680(gp)
81134db8:	10000326 	beq	r2,zero,81134dc8 <alt_get_errno+0x2c>
81134dbc:	d0a01617 	ldw	r2,-32680(gp)
81134dc0:	103ee83a 	callr	r2
81134dc4:	00000106 	br	81134dcc <alt_get_errno+0x30>
81134dc8:	d0a06b04 	addi	r2,gp,-32340
}
81134dcc:	e037883a 	mov	sp,fp
81134dd0:	dfc00117 	ldw	ra,4(sp)
81134dd4:	df000017 	ldw	fp,0(sp)
81134dd8:	dec00204 	addi	sp,sp,8
81134ddc:	f800283a 	ret

81134de0 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81134de0:	defffc04 	addi	sp,sp,-16
81134de4:	de00012e 	bgeu	sp,et,81134dec <alt_msgdma_write_standard_descriptor+0xc>
81134de8:	003b68fa 	trap	3
81134dec:	df000315 	stw	fp,12(sp)
81134df0:	df000304 	addi	fp,sp,12
81134df4:	e13ffd15 	stw	r4,-12(fp)
81134df8:	e17ffe15 	stw	r5,-8(fp)
81134dfc:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81134e00:	e0bffd17 	ldw	r2,-12(fp)
81134e04:	10800037 	ldwio	r2,0(r2)
81134e08:	1080010c 	andi	r2,r2,4
81134e0c:	10000226 	beq	r2,zero,81134e18 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81134e10:	00bff904 	movi	r2,-28
81134e14:	00001506 	br	81134e6c <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81134e18:	e0bfff17 	ldw	r2,-4(fp)
81134e1c:	10800017 	ldw	r2,0(r2)
81134e20:	1007883a 	mov	r3,r2
81134e24:	e0bffe17 	ldw	r2,-8(fp)
81134e28:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81134e2c:	e0bffe17 	ldw	r2,-8(fp)
81134e30:	10800104 	addi	r2,r2,4
81134e34:	e0ffff17 	ldw	r3,-4(fp)
81134e38:	18c00117 	ldw	r3,4(r3)
81134e3c:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81134e40:	e0bffe17 	ldw	r2,-8(fp)
81134e44:	10800204 	addi	r2,r2,8
81134e48:	e0ffff17 	ldw	r3,-4(fp)
81134e4c:	18c00217 	ldw	r3,8(r3)
81134e50:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81134e54:	e0bffe17 	ldw	r2,-8(fp)
81134e58:	10800304 	addi	r2,r2,12
81134e5c:	e0ffff17 	ldw	r3,-4(fp)
81134e60:	18c00317 	ldw	r3,12(r3)
81134e64:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81134e68:	0005883a 	mov	r2,zero
}
81134e6c:	e037883a 	mov	sp,fp
81134e70:	df000017 	ldw	fp,0(sp)
81134e74:	dec00104 	addi	sp,sp,4
81134e78:	f800283a 	ret

81134e7c <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81134e7c:	defffc04 	addi	sp,sp,-16
81134e80:	de00012e 	bgeu	sp,et,81134e88 <alt_msgdma_write_extended_descriptor+0xc>
81134e84:	003b68fa 	trap	3
81134e88:	df000315 	stw	fp,12(sp)
81134e8c:	df000304 	addi	fp,sp,12
81134e90:	e13ffd15 	stw	r4,-12(fp)
81134e94:	e17ffe15 	stw	r5,-8(fp)
81134e98:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81134e9c:	e0bffd17 	ldw	r2,-12(fp)
81134ea0:	10800037 	ldwio	r2,0(r2)
81134ea4:	1080010c 	andi	r2,r2,4
81134ea8:	10000226 	beq	r2,zero,81134eb4 <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81134eac:	00bff904 	movi	r2,-28
81134eb0:	00003b06 	br	81134fa0 <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81134eb4:	e0bfff17 	ldw	r2,-4(fp)
81134eb8:	10800017 	ldw	r2,0(r2)
81134ebc:	1007883a 	mov	r3,r2
81134ec0:	e0bffe17 	ldw	r2,-8(fp)
81134ec4:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81134ec8:	e0bffe17 	ldw	r2,-8(fp)
81134ecc:	10800104 	addi	r2,r2,4
81134ed0:	e0ffff17 	ldw	r3,-4(fp)
81134ed4:	18c00117 	ldw	r3,4(r3)
81134ed8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81134edc:	e0bffe17 	ldw	r2,-8(fp)
81134ee0:	10800204 	addi	r2,r2,8
81134ee4:	e0ffff17 	ldw	r3,-4(fp)
81134ee8:	18c00217 	ldw	r3,8(r3)
81134eec:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81134ef0:	e0bffe17 	ldw	r2,-8(fp)
81134ef4:	10800304 	addi	r2,r2,12
81134ef8:	e0ffff17 	ldw	r3,-4(fp)
81134efc:	18c0030b 	ldhu	r3,12(r3)
81134f00:	18ffffcc 	andi	r3,r3,65535
81134f04:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81134f08:	e0bffe17 	ldw	r2,-8(fp)
81134f0c:	10800384 	addi	r2,r2,14
81134f10:	e0ffff17 	ldw	r3,-4(fp)
81134f14:	18c00383 	ldbu	r3,14(r3)
81134f18:	18c03fcc 	andi	r3,r3,255
81134f1c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81134f20:	e0bffe17 	ldw	r2,-8(fp)
81134f24:	108003c4 	addi	r2,r2,15
81134f28:	e0ffff17 	ldw	r3,-4(fp)
81134f2c:	18c003c3 	ldbu	r3,15(r3)
81134f30:	18c03fcc 	andi	r3,r3,255
81134f34:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81134f38:	e0bffe17 	ldw	r2,-8(fp)
81134f3c:	10800404 	addi	r2,r2,16
81134f40:	e0ffff17 	ldw	r3,-4(fp)
81134f44:	18c0040b 	ldhu	r3,16(r3)
81134f48:	18ffffcc 	andi	r3,r3,65535
81134f4c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81134f50:	e0bffe17 	ldw	r2,-8(fp)
81134f54:	10800484 	addi	r2,r2,18
81134f58:	e0ffff17 	ldw	r3,-4(fp)
81134f5c:	18c0048b 	ldhu	r3,18(r3)
81134f60:	18ffffcc 	andi	r3,r3,65535
81134f64:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81134f68:	e0bffe17 	ldw	r2,-8(fp)
81134f6c:	10800504 	addi	r2,r2,20
81134f70:	0007883a 	mov	r3,zero
81134f74:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81134f78:	e0bffe17 	ldw	r2,-8(fp)
81134f7c:	10800604 	addi	r2,r2,24
81134f80:	0007883a 	mov	r3,zero
81134f84:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81134f88:	e0bffe17 	ldw	r2,-8(fp)
81134f8c:	10800704 	addi	r2,r2,28
81134f90:	e0ffff17 	ldw	r3,-4(fp)
81134f94:	18c00717 	ldw	r3,28(r3)
81134f98:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
81134f9c:	0005883a 	mov	r2,zero
}
81134fa0:	e037883a 	mov	sp,fp
81134fa4:	df000017 	ldw	fp,0(sp)
81134fa8:	dec00104 	addi	sp,sp,4
81134fac:	f800283a 	ret

81134fb0 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81134fb0:	defff804 	addi	sp,sp,-32
81134fb4:	de00012e 	bgeu	sp,et,81134fbc <alt_msgdma_irq+0xc>
81134fb8:	003b68fa 	trap	3
81134fbc:	dfc00715 	stw	ra,28(sp)
81134fc0:	df000615 	stw	fp,24(sp)
81134fc4:	df000604 	addi	fp,sp,24
81134fc8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81134fcc:	e0bfff17 	ldw	r2,-4(fp)
81134fd0:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
81134fd4:	e0bffa17 	ldw	r2,-24(fp)
81134fd8:	10801783 	ldbu	r2,94(r2)
81134fdc:	10803fcc 	andi	r2,r2,255
81134fe0:	10001126 	beq	r2,zero,81135028 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81134fe4:	e0bffa17 	ldw	r2,-24(fp)
81134fe8:	10800617 	ldw	r2,24(r2)
81134fec:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81134ff0:	1007883a 	mov	r3,r2
81134ff4:	00bffdc4 	movi	r2,-9
81134ff8:	1884703a 	and	r2,r3,r2
81134ffc:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81135000:	e0bffa17 	ldw	r2,-24(fp)
81135004:	10800617 	ldw	r2,24(r2)
81135008:	e0fffb17 	ldw	r3,-20(fp)
8113500c:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81135010:	e0bffa17 	ldw	r2,-24(fp)
81135014:	10800617 	ldw	r2,24(r2)
81135018:	10800404 	addi	r2,r2,16
8113501c:	00c00044 	movi	r3,1
81135020:	10c00035 	stwio	r3,0(r2)
81135024:	00001106 	br	8113506c <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81135028:	e0bffa17 	ldw	r2,-24(fp)
8113502c:	10800317 	ldw	r2,12(r2)
81135030:	10800104 	addi	r2,r2,4
81135034:	10800037 	ldwio	r2,0(r2)
81135038:	1007883a 	mov	r3,r2
8113503c:	00bffbc4 	movi	r2,-17
81135040:	1884703a 	and	r2,r3,r2
81135044:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81135048:	e0bffa17 	ldw	r2,-24(fp)
8113504c:	10800317 	ldw	r2,12(r2)
81135050:	10800104 	addi	r2,r2,4
81135054:	e0fffb17 	ldw	r3,-20(fp)
81135058:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
8113505c:	e0bffa17 	ldw	r2,-24(fp)
81135060:	10800317 	ldw	r2,12(r2)
81135064:	00c08004 	movi	r3,512
81135068:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
8113506c:	e0bffa17 	ldw	r2,-24(fp)
81135070:	10800b17 	ldw	r2,44(r2)
81135074:	10001226 	beq	r2,zero,811350c0 <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135078:	0005303a 	rdctl	r2,status
8113507c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135080:	e0fffd17 	ldw	r3,-12(fp)
81135084:	00bfff84 	movi	r2,-2
81135088:	1884703a 	and	r2,r3,r2
8113508c:	1001703a 	wrctl	status,r2
  
  return context;
81135090:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
81135094:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
81135098:	e0bffa17 	ldw	r2,-24(fp)
8113509c:	10800b17 	ldw	r2,44(r2)
811350a0:	e0fffa17 	ldw	r3,-24(fp)
811350a4:	18c00c17 	ldw	r3,48(r3)
811350a8:	1809883a 	mov	r4,r3
811350ac:	103ee83a 	callr	r2
811350b0:	e0bffc17 	ldw	r2,-16(fp)
811350b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811350b8:	e0bffe17 	ldw	r2,-8(fp)
811350bc:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
811350c0:	e0bffa17 	ldw	r2,-24(fp)
811350c4:	10801783 	ldbu	r2,94(r2)
811350c8:	10803fcc 	andi	r2,r2,255
811350cc:	10000a26 	beq	r2,zero,811350f8 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
811350d0:	e0bffa17 	ldw	r2,-24(fp)
811350d4:	10800617 	ldw	r2,24(r2)
811350d8:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
811350dc:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
811350e0:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
811350e4:	e0bffa17 	ldw	r2,-24(fp)
811350e8:	10800617 	ldw	r2,24(r2)
811350ec:	e0fffb17 	ldw	r3,-20(fp)
811350f0:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
811350f4:	00000c06 	br	81135128 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
811350f8:	e0bffa17 	ldw	r2,-24(fp)
811350fc:	10800317 	ldw	r2,12(r2)
81135100:	10800104 	addi	r2,r2,4
81135104:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81135108:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
8113510c:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81135110:	e0bffa17 	ldw	r2,-24(fp)
81135114:	10800317 	ldw	r2,12(r2)
81135118:	10800104 	addi	r2,r2,4
8113511c:	e0fffb17 	ldw	r3,-20(fp)
81135120:	10c00035 	stwio	r3,0(r2)
    }

    return;
81135124:	0001883a 	nop
}
81135128:	e037883a 	mov	sp,fp
8113512c:	dfc00117 	ldw	ra,4(sp)
81135130:	df000017 	ldw	fp,0(sp)
81135134:	dec00204 	addi	sp,sp,8
81135138:	f800283a 	ret

8113513c <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113513c:	defffb04 	addi	sp,sp,-20
81135140:	de00012e 	bgeu	sp,et,81135148 <alt_msgdma_construct_standard_descriptor+0xc>
81135144:	003b68fa 	trap	3
81135148:	df000415 	stw	fp,16(sp)
8113514c:	df000404 	addi	fp,sp,16
81135150:	e13ffc15 	stw	r4,-16(fp)
81135154:	e17ffd15 	stw	r5,-12(fp)
81135158:	e1bffe15 	stw	r6,-8(fp)
8113515c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81135160:	e0bffc17 	ldw	r2,-16(fp)
81135164:	10c01217 	ldw	r3,72(r2)
81135168:	e0800117 	ldw	r2,4(fp)
8113516c:	18800436 	bltu	r3,r2,81135180 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
81135170:	e0bffc17 	ldw	r2,-16(fp)
81135174:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81135178:	10803fcc 	andi	r2,r2,255
8113517c:	10000226 	beq	r2,zero,81135188 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81135180:	00bffa84 	movi	r2,-22
81135184:	00000e06 	br	811351c0 <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
81135188:	e0bffd17 	ldw	r2,-12(fp)
8113518c:	e0fffe17 	ldw	r3,-8(fp)
81135190:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81135194:	e0bffd17 	ldw	r2,-12(fp)
81135198:	e0ffff17 	ldw	r3,-4(fp)
8113519c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811351a0:	e0bffd17 	ldw	r2,-12(fp)
811351a4:	e0c00117 	ldw	r3,4(fp)
811351a8:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811351ac:	e0800217 	ldw	r2,8(fp)
811351b0:	10e00034 	orhi	r3,r2,32768
811351b4:	e0bffd17 	ldw	r2,-12(fp)
811351b8:	10c00315 	stw	r3,12(r2)
    
    return 0;
811351bc:	0005883a 	mov	r2,zero
}
811351c0:	e037883a 	mov	sp,fp
811351c4:	df000017 	ldw	fp,0(sp)
811351c8:	dec00104 	addi	sp,sp,4
811351cc:	f800283a 	ret

811351d0 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811351d0:	defff604 	addi	sp,sp,-40
811351d4:	de00012e 	bgeu	sp,et,811351dc <alt_msgdma_construct_extended_descriptor+0xc>
811351d8:	003b68fa 	trap	3
811351dc:	df000915 	stw	fp,36(sp)
811351e0:	df000904 	addi	fp,sp,36
811351e4:	e13ff715 	stw	r4,-36(fp)
811351e8:	e17ff815 	stw	r5,-32(fp)
811351ec:	e1bff915 	stw	r6,-28(fp)
811351f0:	e1fffa15 	stw	r7,-24(fp)
811351f4:	e1800317 	ldw	r6,12(fp)
811351f8:	e1400417 	ldw	r5,16(fp)
811351fc:	e1000517 	ldw	r4,20(fp)
81135200:	e0c00617 	ldw	r3,24(fp)
81135204:	e0800717 	ldw	r2,28(fp)
81135208:	e1bffb0d 	sth	r6,-20(fp)
8113520c:	e17ffc05 	stb	r5,-16(fp)
81135210:	e13ffd05 	stb	r4,-12(fp)
81135214:	e0fffe0d 	sth	r3,-8(fp)
81135218:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
8113521c:	e0bff717 	ldw	r2,-36(fp)
81135220:	10c01217 	ldw	r3,72(r2)
81135224:	e0800117 	ldw	r2,4(fp)
81135228:	18801936 	bltu	r3,r2,81135290 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
8113522c:	e13ff717 	ldw	r4,-36(fp)
81135230:	20801317 	ldw	r2,76(r4)
81135234:	20c01417 	ldw	r3,80(r4)
81135238:	e13ffe0b 	ldhu	r4,-8(fp)
8113523c:	213fffcc 	andi	r4,r4,65535
81135240:	2015883a 	mov	r10,r4
81135244:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81135248:	1ac01136 	bltu	r3,r11,81135290 <alt_msgdma_construct_extended_descriptor+0xc0>
8113524c:	58c0011e 	bne	r11,r3,81135254 <alt_msgdma_construct_extended_descriptor+0x84>
81135250:	12800f36 	bltu	r2,r10,81135290 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81135254:	e13ff717 	ldw	r4,-36(fp)
81135258:	20801317 	ldw	r2,76(r4)
8113525c:	20c01417 	ldw	r3,80(r4)
81135260:	e13fff0b 	ldhu	r4,-4(fp)
81135264:	213fffcc 	andi	r4,r4,65535
81135268:	2011883a 	mov	r8,r4
8113526c:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81135270:	1a400736 	bltu	r3,r9,81135290 <alt_msgdma_construct_extended_descriptor+0xc0>
81135274:	48c0011e 	bne	r9,r3,8113527c <alt_msgdma_construct_extended_descriptor+0xac>
81135278:	12000536 	bltu	r2,r8,81135290 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
8113527c:	e0bff717 	ldw	r2,-36(fp)
81135280:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81135284:	10803fcc 	andi	r2,r2,255
81135288:	10800060 	cmpeqi	r2,r2,1
8113528c:	1000021e 	bne	r2,zero,81135298 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81135290:	00bffa84 	movi	r2,-22
81135294:	00002106 	br	8113531c <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
81135298:	e0bff817 	ldw	r2,-32(fp)
8113529c:	e0fff917 	ldw	r3,-28(fp)
811352a0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
811352a4:	e0bff817 	ldw	r2,-32(fp)
811352a8:	e0fffa17 	ldw	r3,-24(fp)
811352ac:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811352b0:	e0bff817 	ldw	r2,-32(fp)
811352b4:	e0c00117 	ldw	r3,4(fp)
811352b8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811352bc:	e0bff817 	ldw	r2,-32(fp)
811352c0:	e0fffb0b 	ldhu	r3,-20(fp)
811352c4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
811352c8:	e0bff817 	ldw	r2,-32(fp)
811352cc:	e0fffc03 	ldbu	r3,-16(fp)
811352d0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
811352d4:	e0bff817 	ldw	r2,-32(fp)
811352d8:	e0fffd03 	ldbu	r3,-12(fp)
811352dc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
811352e0:	e0bff817 	ldw	r2,-32(fp)
811352e4:	e0fffe0b 	ldhu	r3,-8(fp)
811352e8:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
811352ec:	e0bff817 	ldw	r2,-32(fp)
811352f0:	e0ffff0b 	ldhu	r3,-4(fp)
811352f4:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
811352f8:	e0bff817 	ldw	r2,-32(fp)
811352fc:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81135300:	e0bff817 	ldw	r2,-32(fp)
81135304:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81135308:	e0800217 	ldw	r2,8(fp)
8113530c:	10e00034 	orhi	r3,r2,32768
81135310:	e0bff817 	ldw	r2,-32(fp)
81135314:	10c00715 	stw	r3,28(r2)

  return 0 ;
81135318:	0005883a 	mov	r2,zero

}
8113531c:	e037883a 	mov	sp,fp
81135320:	df000017 	ldw	fp,0(sp)
81135324:	dec00104 	addi	sp,sp,4
81135328:	f800283a 	ret

8113532c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113532c:	deffee04 	addi	sp,sp,-72
81135330:	de00012e 	bgeu	sp,et,81135338 <alt_msgdma_descriptor_async_transfer+0xc>
81135334:	003b68fa 	trap	3
81135338:	dfc01115 	stw	ra,68(sp)
8113533c:	df001015 	stw	fp,64(sp)
81135340:	df001004 	addi	fp,sp,64
81135344:	e13ffd15 	stw	r4,-12(fp)
81135348:	e17ffe15 	stw	r5,-8(fp)
8113534c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81135350:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81135354:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81135358:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113535c:	e0bffd17 	ldw	r2,-12(fp)
81135360:	10800317 	ldw	r2,12(r2)
81135364:	10800204 	addi	r2,r2,8
81135368:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8113536c:	10bfffcc 	andi	r2,r2,65535
81135370:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81135374:	e0bffd17 	ldw	r2,-12(fp)
81135378:	10800317 	ldw	r2,12(r2)
8113537c:	10800204 	addi	r2,r2,8
81135380:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81135384:	1004d43a 	srli	r2,r2,16
81135388:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
8113538c:	e0bffd17 	ldw	r2,-12(fp)
81135390:	10800917 	ldw	r2,36(r2)
81135394:	e0fff417 	ldw	r3,-48(fp)
81135398:	1880042e 	bgeu	r3,r2,811353ac <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
8113539c:	e0bffd17 	ldw	r2,-12(fp)
811353a0:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811353a4:	e0fff317 	ldw	r3,-52(fp)
811353a8:	18800236 	bltu	r3,r2,811353b4 <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811353ac:	00bff904 	movi	r2,-28
811353b0:	0000a906 	br	81135658 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
811353b4:	e0bffd17 	ldw	r2,-12(fp)
811353b8:	10801817 	ldw	r2,96(r2)
811353bc:	e0bff615 	stw	r2,-40(fp)
811353c0:	e03ffc0d 	sth	zero,-16(fp)
811353c4:	e0bffc0b 	ldhu	r2,-16(fp)
811353c8:	e0fffc84 	addi	r3,fp,-14
811353cc:	180d883a 	mov	r6,r3
811353d0:	100b883a 	mov	r5,r2
811353d4:	e13ff617 	ldw	r4,-40(fp)
811353d8:	112ab040 	call	8112ab04 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811353dc:	00800804 	movi	r2,32
811353e0:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811353e4:	0005303a 	rdctl	r2,status
811353e8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811353ec:	e0fff717 	ldw	r3,-36(fp)
811353f0:	00bfff84 	movi	r2,-2
811353f4:	1884703a 	and	r2,r3,r2
811353f8:	1001703a 	wrctl	status,r2
  
  return context;
811353fc:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81135400:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81135404:	e0bffd17 	ldw	r2,-12(fp)
81135408:	10800317 	ldw	r2,12(r2)
8113540c:	10800104 	addi	r2,r2,4
81135410:	e0fff117 	ldw	r3,-60(fp)
81135414:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81135418:	e0bffd17 	ldw	r2,-12(fp)
8113541c:	10800317 	ldw	r2,12(r2)
81135420:	e0fffd17 	ldw	r3,-12(fp)
81135424:	18c00317 	ldw	r3,12(r3)
81135428:	18c00037 	ldwio	r3,0(r3)
8113542c:	10c00035 	stwio	r3,0(r2)
81135430:	e0bff217 	ldw	r2,-56(fp)
81135434:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135438:	e0bffb17 	ldw	r2,-20(fp)
8113543c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81135440:	e0bffe17 	ldw	r2,-8(fp)
81135444:	10001e26 	beq	r2,zero,811354c0 <alt_msgdma_descriptor_async_transfer+0x194>
81135448:	e0bfff17 	ldw	r2,-4(fp)
8113544c:	10001c1e 	bne	r2,zero,811354c0 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81135450:	00001106 	br	81135498 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81135454:	01000044 	movi	r4,1
81135458:	1136fec0 	call	81136fec <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113545c:	e0bff00b 	ldhu	r2,-64(fp)
81135460:	1084e230 	cmpltui	r2,r2,5000
81135464:	1000091e 	bne	r2,zero,8113548c <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
81135468:	01204534 	movhi	r4,33044
8113546c:	212c3e04 	addi	r4,r4,-20232
81135470:	11379b00 	call	811379b0 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81135474:	e0bffd17 	ldw	r2,-12(fp)
81135478:	10801817 	ldw	r2,96(r2)
8113547c:	1009883a 	mov	r4,r2
81135480:	112ae8c0 	call	8112ae8c <OSSemPost>
				
                return -ETIME;
81135484:	00bff084 	movi	r2,-62
81135488:	00007306 	br	81135658 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
8113548c:	e0bff00b 	ldhu	r2,-64(fp)
81135490:	10800044 	addi	r2,r2,1
81135494:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81135498:	e0bffd17 	ldw	r2,-12(fp)
8113549c:	10c00317 	ldw	r3,12(r2)
811354a0:	e0bffd17 	ldw	r2,-12(fp)
811354a4:	10800417 	ldw	r2,16(r2)
811354a8:	e1bffe17 	ldw	r6,-8(fp)
811354ac:	100b883a 	mov	r5,r2
811354b0:	1809883a 	mov	r4,r3
811354b4:	1134de00 	call	81134de0 <alt_msgdma_write_standard_descriptor>
811354b8:	103fe61e 	bne	r2,zero,81135454 <__reset+0xfb115454>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811354bc:	00002706 	br	8113555c <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811354c0:	e0bffe17 	ldw	r2,-8(fp)
811354c4:	10001f1e 	bne	r2,zero,81135544 <alt_msgdma_descriptor_async_transfer+0x218>
811354c8:	e0bfff17 	ldw	r2,-4(fp)
811354cc:	10001d26 	beq	r2,zero,81135544 <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
811354d0:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811354d4:	00001106 	br	8113551c <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811354d8:	01000044 	movi	r4,1
811354dc:	1136fec0 	call	81136fec <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811354e0:	e0bff00b 	ldhu	r2,-64(fp)
811354e4:	1084e230 	cmpltui	r2,r2,5000
811354e8:	1000091e 	bne	r2,zero,81135510 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
811354ec:	01204534 	movhi	r4,33044
811354f0:	212c5404 	addi	r4,r4,-20144
811354f4:	11379b00 	call	811379b0 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
811354f8:	e0bffd17 	ldw	r2,-12(fp)
811354fc:	10801817 	ldw	r2,96(r2)
81135500:	1009883a 	mov	r4,r2
81135504:	112ae8c0 	call	8112ae8c <OSSemPost>
				
                return -ETIME;
81135508:	00bff084 	movi	r2,-62
8113550c:	00005206 	br	81135658 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81135510:	e0bff00b 	ldhu	r2,-64(fp)
81135514:	10800044 	addi	r2,r2,1
81135518:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113551c:	e0bffd17 	ldw	r2,-12(fp)
81135520:	10c00317 	ldw	r3,12(r2)
81135524:	e0bffd17 	ldw	r2,-12(fp)
81135528:	10800417 	ldw	r2,16(r2)
8113552c:	e1bfff17 	ldw	r6,-4(fp)
81135530:	100b883a 	mov	r5,r2
81135534:	1809883a 	mov	r4,r3
81135538:	1134e7c0 	call	81134e7c <alt_msgdma_write_extended_descriptor>
8113553c:	103fe61e 	bne	r2,zero,811354d8 <__reset+0xfb1154d8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81135540:	00000606 	br	8113555c <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81135544:	e0bffd17 	ldw	r2,-12(fp)
81135548:	10801817 	ldw	r2,96(r2)
8113554c:	1009883a 	mov	r4,r2
81135550:	112ae8c0 	call	8112ae8c <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81135554:	00bfffc4 	movi	r2,-1
81135558:	00003f06 	br	81135658 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8113555c:	e0bffd17 	ldw	r2,-12(fp)
81135560:	10800b17 	ldw	r2,44(r2)
81135564:	10001c26 	beq	r2,zero,811355d8 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
81135568:	e0bffd17 	ldw	r2,-12(fp)
8113556c:	10c00d17 	ldw	r3,52(r2)
81135570:	e0bff117 	ldw	r2,-60(fp)
81135574:	1884b03a 	or	r2,r3,r2
81135578:	10800514 	ori	r2,r2,20
8113557c:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81135580:	e0fff117 	ldw	r3,-60(fp)
81135584:	00bff7c4 	movi	r2,-33
81135588:	1884703a 	and	r2,r3,r2
8113558c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135590:	0005303a 	rdctl	r2,status
81135594:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135598:	e0fff917 	ldw	r3,-28(fp)
8113559c:	00bfff84 	movi	r2,-2
811355a0:	1884703a 	and	r2,r3,r2
811355a4:	1001703a 	wrctl	status,r2
  
  return context;
811355a8:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
811355ac:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811355b0:	e0bffd17 	ldw	r2,-12(fp)
811355b4:	10800317 	ldw	r2,12(r2)
811355b8:	10800104 	addi	r2,r2,4
811355bc:	e0fff117 	ldw	r3,-60(fp)
811355c0:	10c00035 	stwio	r3,0(r2)
811355c4:	e0bff217 	ldw	r2,-56(fp)
811355c8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811355cc:	e0bff517 	ldw	r2,-44(fp)
811355d0:	1001703a 	wrctl	status,r2
811355d4:	00001b06 	br	81135644 <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
811355d8:	e0bffd17 	ldw	r2,-12(fp)
811355dc:	10c00d17 	ldw	r3,52(r2)
811355e0:	e0bff117 	ldw	r2,-60(fp)
811355e4:	1884b03a 	or	r2,r3,r2
811355e8:	10800114 	ori	r2,r2,4
811355ec:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
811355f0:	e0fff117 	ldw	r3,-60(fp)
811355f4:	00bff3c4 	movi	r2,-49
811355f8:	1884703a 	and	r2,r3,r2
811355fc:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135600:	0005303a 	rdctl	r2,status
81135604:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135608:	e0fffa17 	ldw	r3,-24(fp)
8113560c:	00bfff84 	movi	r2,-2
81135610:	1884703a 	and	r2,r3,r2
81135614:	1001703a 	wrctl	status,r2
  
  return context;
81135618:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8113561c:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81135620:	e0bffd17 	ldw	r2,-12(fp)
81135624:	10800317 	ldw	r2,12(r2)
81135628:	10800104 	addi	r2,r2,4
8113562c:	e0fff117 	ldw	r3,-60(fp)
81135630:	10c00035 	stwio	r3,0(r2)
81135634:	e0bff217 	ldw	r2,-56(fp)
81135638:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113563c:	e0bff817 	ldw	r2,-32(fp)
81135640:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81135644:	e0bffd17 	ldw	r2,-12(fp)
81135648:	10801817 	ldw	r2,96(r2)
8113564c:	1009883a 	mov	r4,r2
81135650:	112ae8c0 	call	8112ae8c <OSSemPost>
    
    return 0;
81135654:	0005883a 	mov	r2,zero
}
81135658:	e037883a 	mov	sp,fp
8113565c:	dfc00117 	ldw	ra,4(sp)
81135660:	df000017 	ldw	fp,0(sp)
81135664:	dec00204 	addi	sp,sp,8
81135668:	f800283a 	ret

8113566c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113566c:	deffee04 	addi	sp,sp,-72
81135670:	de00012e 	bgeu	sp,et,81135678 <alt_msgdma_descriptor_sync_transfer+0xc>
81135674:	003b68fa 	trap	3
81135678:	dfc01115 	stw	ra,68(sp)
8113567c:	df001015 	stw	fp,64(sp)
81135680:	df001004 	addi	fp,sp,64
81135684:	e13ffd15 	stw	r4,-12(fp)
81135688:	e17ffe15 	stw	r5,-8(fp)
8113568c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81135690:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
81135694:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
81135698:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
8113569c:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811356a0:	e0bffd17 	ldw	r2,-12(fp)
811356a4:	10800317 	ldw	r2,12(r2)
811356a8:	10800204 	addi	r2,r2,8
811356ac:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811356b0:	10bfffcc 	andi	r2,r2,65535
811356b4:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811356b8:	e0bffd17 	ldw	r2,-12(fp)
811356bc:	10800317 	ldw	r2,12(r2)
811356c0:	10800204 	addi	r2,r2,8
811356c4:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811356c8:	1004d43a 	srli	r2,r2,16
811356cc:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
811356d0:	00807804 	movi	r2,480
811356d4:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811356d8:	00001906 	br	81135740 <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
811356dc:	01000044 	movi	r4,1
811356e0:	1136fec0 	call	81136fec <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811356e4:	e0bff10b 	ldhu	r2,-60(fp)
811356e8:	1084e230 	cmpltui	r2,r2,5000
811356ec:	1000051e 	bne	r2,zero,81135704 <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
811356f0:	01204534 	movhi	r4,33044
811356f4:	212c6a04 	addi	r4,r4,-20056
811356f8:	11379b00 	call	811379b0 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
811356fc:	00bff084 	movi	r2,-62
81135700:	0000d706 	br	81135a60 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
81135704:	e0bff10b 	ldhu	r2,-60(fp)
81135708:	10800044 	addi	r2,r2,1
8113570c:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81135710:	e0bffd17 	ldw	r2,-12(fp)
81135714:	10800317 	ldw	r2,12(r2)
81135718:	10800204 	addi	r2,r2,8
8113571c:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81135720:	10bfffcc 	andi	r2,r2,65535
81135724:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81135728:	e0bffd17 	ldw	r2,-12(fp)
8113572c:	10800317 	ldw	r2,12(r2)
81135730:	10800204 	addi	r2,r2,8
81135734:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81135738:	1004d43a 	srli	r2,r2,16
8113573c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81135740:	e0bffd17 	ldw	r2,-12(fp)
81135744:	10800917 	ldw	r2,36(r2)
81135748:	e0fff317 	ldw	r3,-52(fp)
8113574c:	18bfe32e 	bgeu	r3,r2,811356dc <__reset+0xfb1156dc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81135750:	e0bffd17 	ldw	r2,-12(fp)
81135754:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81135758:	e0fff217 	ldw	r3,-56(fp)
8113575c:	18bfdf2e 	bgeu	r3,r2,811356dc <__reset+0xfb1156dc>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
81135760:	e0bffd17 	ldw	r2,-12(fp)
81135764:	10801817 	ldw	r2,96(r2)
81135768:	e0bff815 	stw	r2,-32(fp)
8113576c:	e03ffc0d 	sth	zero,-16(fp)
81135770:	e0bffc0b 	ldhu	r2,-16(fp)
81135774:	e0fffc84 	addi	r3,fp,-14
81135778:	180d883a 	mov	r6,r3
8113577c:	100b883a 	mov	r5,r2
81135780:	e13ff817 	ldw	r4,-32(fp)
81135784:	112ab040 	call	8112ab04 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135788:	0005303a 	rdctl	r2,status
8113578c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135790:	e0fffb17 	ldw	r3,-20(fp)
81135794:	00bfff84 	movi	r2,-2
81135798:	1884703a 	and	r2,r3,r2
8113579c:	1001703a 	wrctl	status,r2
  
  return context;
811357a0:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
811357a4:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811357a8:	e0bffd17 	ldw	r2,-12(fp)
811357ac:	10800317 	ldw	r2,12(r2)
811357b0:	10800104 	addi	r2,r2,4
811357b4:	00c00804 	movi	r3,32
811357b8:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
811357bc:	e0bffd17 	ldw	r2,-12(fp)
811357c0:	10800317 	ldw	r2,12(r2)
811357c4:	e0fffd17 	ldw	r3,-12(fp)
811357c8:	18c00317 	ldw	r3,12(r3)
811357cc:	18c00037 	ldwio	r3,0(r3)
811357d0:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
811357d4:	e0bffe17 	ldw	r2,-8(fp)
811357d8:	10001f26 	beq	r2,zero,81135858 <alt_msgdma_descriptor_sync_transfer+0x1ec>
811357dc:	e0bfff17 	ldw	r2,-4(fp)
811357e0:	10001d1e 	bne	r2,zero,81135858 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
811357e4:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811357e8:	00001106 	br	81135830 <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
811357ec:	01000044 	movi	r4,1
811357f0:	1136fec0 	call	81136fec <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811357f4:	e0bff10b 	ldhu	r2,-60(fp)
811357f8:	1084e230 	cmpltui	r2,r2,5000
811357fc:	1000091e 	bne	r2,zero,81135824 <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
81135800:	01204534 	movhi	r4,33044
81135804:	212c7e04 	addi	r4,r4,-19976
81135808:	11379b00 	call	811379b0 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
8113580c:	e0bffd17 	ldw	r2,-12(fp)
81135810:	10801817 	ldw	r2,96(r2)
81135814:	1009883a 	mov	r4,r2
81135818:	112ae8c0 	call	8112ae8c <OSSemPost>
				
                return -ETIME;
8113581c:	00bff084 	movi	r2,-62
81135820:	00008f06 	br	81135a60 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
81135824:	e0bff10b 	ldhu	r2,-60(fp)
81135828:	10800044 	addi	r2,r2,1
8113582c:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81135830:	e0bffd17 	ldw	r2,-12(fp)
81135834:	10c00317 	ldw	r3,12(r2)
81135838:	e0bffd17 	ldw	r2,-12(fp)
8113583c:	10800417 	ldw	r2,16(r2)
81135840:	e1bffe17 	ldw	r6,-8(fp)
81135844:	100b883a 	mov	r5,r2
81135848:	1809883a 	mov	r4,r3
8113584c:	1134de00 	call	81134de0 <alt_msgdma_write_standard_descriptor>
81135850:	103fe61e 	bne	r2,zero,811357ec <__reset+0xfb1157ec>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
81135854:	00002706 	br	811358f4 <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81135858:	e0bffe17 	ldw	r2,-8(fp)
8113585c:	10001f1e 	bne	r2,zero,811358dc <alt_msgdma_descriptor_sync_transfer+0x270>
81135860:	e0bfff17 	ldw	r2,-4(fp)
81135864:	10001d26 	beq	r2,zero,811358dc <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
81135868:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113586c:	00001106 	br	811358b4 <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81135870:	01000044 	movi	r4,1
81135874:	1136fec0 	call	81136fec <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81135878:	e0bff10b 	ldhu	r2,-60(fp)
8113587c:	1084e230 	cmpltui	r2,r2,5000
81135880:	1000091e 	bne	r2,zero,811358a8 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
81135884:	01204534 	movhi	r4,33044
81135888:	212c8f04 	addi	r4,r4,-19908
8113588c:	11379b00 	call	811379b0 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81135890:	e0bffd17 	ldw	r2,-12(fp)
81135894:	10801817 	ldw	r2,96(r2)
81135898:	1009883a 	mov	r4,r2
8113589c:	112ae8c0 	call	8112ae8c <OSSemPost>
				
                return -ETIME;
811358a0:	00bff084 	movi	r2,-62
811358a4:	00006e06 	br	81135a60 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
811358a8:	e0bff10b 	ldhu	r2,-60(fp)
811358ac:	10800044 	addi	r2,r2,1
811358b0:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811358b4:	e0bffd17 	ldw	r2,-12(fp)
811358b8:	10c00317 	ldw	r3,12(r2)
811358bc:	e0bffd17 	ldw	r2,-12(fp)
811358c0:	10800417 	ldw	r2,16(r2)
811358c4:	e1bfff17 	ldw	r6,-4(fp)
811358c8:	100b883a 	mov	r5,r2
811358cc:	1809883a 	mov	r4,r3
811358d0:	1134e7c0 	call	81134e7c <alt_msgdma_write_extended_descriptor>
811358d4:	103fe61e 	bne	r2,zero,81135870 <__reset+0xfb115870>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811358d8:	00000606 	br	811358f4 <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
811358dc:	e0bffd17 	ldw	r2,-12(fp)
811358e0:	10801817 	ldw	r2,96(r2)
811358e4:	1009883a 	mov	r4,r2
811358e8:	112ae8c0 	call	8112ae8c <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
811358ec:	00bfffc4 	movi	r2,-1
811358f0:	00005b06 	br	81135a60 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811358f4:	e0bffd17 	ldw	r2,-12(fp)
811358f8:	10800317 	ldw	r2,12(r2)
811358fc:	10800104 	addi	r2,r2,4
81135900:	e0fffd17 	ldw	r3,-12(fp)
81135904:	19000d17 	ldw	r4,52(r3)
81135908:	00fff2c4 	movi	r3,-53
8113590c:	20c6703a 	and	r3,r4,r3
81135910:	18c00114 	ori	r3,r3,4
81135914:	10c00035 	stwio	r3,0(r2)
81135918:	e0bff517 	ldw	r2,-44(fp)
8113591c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135920:	e0bff717 	ldw	r2,-36(fp)
81135924:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81135928:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113592c:	e0bffd17 	ldw	r2,-12(fp)
81135930:	10800317 	ldw	r2,12(r2)
81135934:	10800037 	ldwio	r2,0(r2)
81135938:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
8113593c:	00001506 	br	81135994 <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
81135940:	01000044 	movi	r4,1
81135944:	1136fec0 	call	81136fec <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81135948:	e0bff10b 	ldhu	r2,-60(fp)
8113594c:	1084e230 	cmpltui	r2,r2,5000
81135950:	1000091e 	bne	r2,zero,81135978 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
81135954:	01204534 	movhi	r4,33044
81135958:	212ca004 	addi	r4,r4,-19840
8113595c:	11379b00 	call	811379b0 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
81135960:	e0bffd17 	ldw	r2,-12(fp)
81135964:	10801817 	ldw	r2,96(r2)
81135968:	1009883a 	mov	r4,r2
8113596c:	112ae8c0 	call	8112ae8c <OSSemPost>
			
            return -ETIME;
81135970:	00bff084 	movi	r2,-62
81135974:	00003a06 	br	81135a60 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
81135978:	e0bff10b 	ldhu	r2,-60(fp)
8113597c:	10800044 	addi	r2,r2,1
81135980:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81135984:	e0bffd17 	ldw	r2,-12(fp)
81135988:	10800317 	ldw	r2,12(r2)
8113598c:	10800037 	ldwio	r2,0(r2)
81135990:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81135994:	e0fff017 	ldw	r3,-64(fp)
81135998:	e0bff617 	ldw	r2,-40(fp)
8113599c:	1884703a 	and	r2,r3,r2
811359a0:	1000031e 	bne	r2,zero,811359b0 <alt_msgdma_descriptor_sync_transfer+0x344>
811359a4:	e0bff017 	ldw	r2,-64(fp)
811359a8:	1080004c 	andi	r2,r2,1
811359ac:	103fe41e 	bne	r2,zero,81135940 <__reset+0xfb115940>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
811359b0:	e0fff017 	ldw	r3,-64(fp)
811359b4:	e0bff617 	ldw	r2,-40(fp)
811359b8:	1884703a 	and	r2,r3,r2
811359bc:	10000626 	beq	r2,zero,811359d8 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
811359c0:	e0bffd17 	ldw	r2,-12(fp)
811359c4:	10801817 	ldw	r2,96(r2)
811359c8:	1009883a 	mov	r4,r2
811359cc:	112ae8c0 	call	8112ae8c <OSSemPost>
		
        return error;
811359d0:	e0bff617 	ldw	r2,-40(fp)
811359d4:	00002206 	br	81135a60 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
811359d8:	e0bffd17 	ldw	r2,-12(fp)
811359dc:	10800317 	ldw	r2,12(r2)
811359e0:	10800104 	addi	r2,r2,4
811359e4:	10800037 	ldwio	r2,0(r2)
811359e8:	10800814 	ori	r2,r2,32
811359ec:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811359f0:	0005303a 	rdctl	r2,status
811359f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811359f8:	e0fffa17 	ldw	r3,-24(fp)
811359fc:	00bfff84 	movi	r2,-2
81135a00:	1884703a 	and	r2,r3,r2
81135a04:	1001703a 	wrctl	status,r2
  
  return context;
81135a08:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81135a0c:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81135a10:	e0bffd17 	ldw	r2,-12(fp)
81135a14:	10800317 	ldw	r2,12(r2)
81135a18:	10800104 	addi	r2,r2,4
81135a1c:	e0fff417 	ldw	r3,-48(fp)
81135a20:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81135a24:	e0bffd17 	ldw	r2,-12(fp)
81135a28:	10800317 	ldw	r2,12(r2)
81135a2c:	e0fffd17 	ldw	r3,-12(fp)
81135a30:	18c00317 	ldw	r3,12(r3)
81135a34:	18c00037 	ldwio	r3,0(r3)
81135a38:	10c00035 	stwio	r3,0(r2)
81135a3c:	e0bff517 	ldw	r2,-44(fp)
81135a40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135a44:	e0bff917 	ldw	r2,-28(fp)
81135a48:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
81135a4c:	e0bffd17 	ldw	r2,-12(fp)
81135a50:	10801817 	ldw	r2,96(r2)
81135a54:	1009883a 	mov	r4,r2
81135a58:	112ae8c0 	call	8112ae8c <OSSemPost>
    
    return 0;
81135a5c:	0005883a 	mov	r2,zero

}
81135a60:	e037883a 	mov	sp,fp
81135a64:	dfc00117 	ldw	ra,4(sp)
81135a68:	df000017 	ldw	fp,0(sp)
81135a6c:	dec00204 	addi	sp,sp,8
81135a70:	f800283a 	ret

81135a74 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
81135a74:	defff804 	addi	sp,sp,-32
81135a78:	de00012e 	bgeu	sp,et,81135a80 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
81135a7c:	003b68fa 	trap	3
81135a80:	dfc00715 	stw	ra,28(sp)
81135a84:	df000615 	stw	fp,24(sp)
81135a88:	df000604 	addi	fp,sp,24
81135a8c:	e13ffc15 	stw	r4,-16(fp)
81135a90:	e17ffd15 	stw	r5,-12(fp)
81135a94:	e1bffe15 	stw	r6,-8(fp)
81135a98:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
81135a9c:	e0800217 	ldw	r2,8(fp)
81135aa0:	d8800115 	stw	r2,4(sp)
81135aa4:	e0bfff17 	ldw	r2,-4(fp)
81135aa8:	d8800015 	stw	r2,0(sp)
81135aac:	e1fffe17 	ldw	r7,-8(fp)
81135ab0:	000d883a 	mov	r6,zero
81135ab4:	e17ffd17 	ldw	r5,-12(fp)
81135ab8:	e13ffc17 	ldw	r4,-16(fp)
81135abc:	113513c0 	call	8113513c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81135ac0:	e037883a 	mov	sp,fp
81135ac4:	dfc00117 	ldw	ra,4(sp)
81135ac8:	df000017 	ldw	fp,0(sp)
81135acc:	dec00204 	addi	sp,sp,8
81135ad0:	f800283a 	ret

81135ad4 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81135ad4:	defff804 	addi	sp,sp,-32
81135ad8:	de00012e 	bgeu	sp,et,81135ae0 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
81135adc:	003b68fa 	trap	3
81135ae0:	dfc00715 	stw	ra,28(sp)
81135ae4:	df000615 	stw	fp,24(sp)
81135ae8:	df000604 	addi	fp,sp,24
81135aec:	e13ffc15 	stw	r4,-16(fp)
81135af0:	e17ffd15 	stw	r5,-12(fp)
81135af4:	e1bffe15 	stw	r6,-8(fp)
81135af8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81135afc:	e0800217 	ldw	r2,8(fp)
81135b00:	d8800115 	stw	r2,4(sp)
81135b04:	e0bfff17 	ldw	r2,-4(fp)
81135b08:	d8800015 	stw	r2,0(sp)
81135b0c:	000f883a 	mov	r7,zero
81135b10:	e1bffe17 	ldw	r6,-8(fp)
81135b14:	e17ffd17 	ldw	r5,-12(fp)
81135b18:	e13ffc17 	ldw	r4,-16(fp)
81135b1c:	113513c0 	call	8113513c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81135b20:	e037883a 	mov	sp,fp
81135b24:	dfc00117 	ldw	ra,4(sp)
81135b28:	df000017 	ldw	fp,0(sp)
81135b2c:	dec00204 	addi	sp,sp,8
81135b30:	f800283a 	ret

81135b34 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81135b34:	defff804 	addi	sp,sp,-32
81135b38:	de00012e 	bgeu	sp,et,81135b40 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
81135b3c:	003b68fa 	trap	3
81135b40:	dfc00715 	stw	ra,28(sp)
81135b44:	df000615 	stw	fp,24(sp)
81135b48:	df000604 	addi	fp,sp,24
81135b4c:	e13ffc15 	stw	r4,-16(fp)
81135b50:	e17ffd15 	stw	r5,-12(fp)
81135b54:	e1bffe15 	stw	r6,-8(fp)
81135b58:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81135b5c:	e0800317 	ldw	r2,12(fp)
81135b60:	d8800115 	stw	r2,4(sp)
81135b64:	e0800217 	ldw	r2,8(fp)
81135b68:	d8800015 	stw	r2,0(sp)
81135b6c:	e1ffff17 	ldw	r7,-4(fp)
81135b70:	e1bffe17 	ldw	r6,-8(fp)
81135b74:	e17ffd17 	ldw	r5,-12(fp)
81135b78:	e13ffc17 	ldw	r4,-16(fp)
81135b7c:	113513c0 	call	8113513c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81135b80:	e037883a 	mov	sp,fp
81135b84:	dfc00117 	ldw	ra,4(sp)
81135b88:	df000017 	ldw	fp,0(sp)
81135b8c:	dec00204 	addi	sp,sp,8
81135b90:	f800283a 	ret

81135b94 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
81135b94:	defff004 	addi	sp,sp,-64
81135b98:	de00012e 	bgeu	sp,et,81135ba0 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
81135b9c:	003b68fa 	trap	3
81135ba0:	dfc00f15 	stw	ra,60(sp)
81135ba4:	df000e15 	stw	fp,56(sp)
81135ba8:	df000e04 	addi	fp,sp,56
81135bac:	e13ff915 	stw	r4,-28(fp)
81135bb0:	e17ffa15 	stw	r5,-24(fp)
81135bb4:	e1bffb15 	stw	r6,-20(fp)
81135bb8:	e1fffc15 	stw	r7,-16(fp)
81135bbc:	e1000317 	ldw	r4,12(fp)
81135bc0:	e0c00417 	ldw	r3,16(fp)
81135bc4:	e0800517 	ldw	r2,20(fp)
81135bc8:	e13ffd0d 	sth	r4,-12(fp)
81135bcc:	e0fffe05 	stb	r3,-8(fp)
81135bd0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81135bd4:	e0bffd0b 	ldhu	r2,-12(fp)
81135bd8:	e0fffe03 	ldbu	r3,-8(fp)
81135bdc:	e13fff0b 	ldhu	r4,-4(fp)
81135be0:	d9000615 	stw	r4,24(sp)
81135be4:	d8000515 	stw	zero,20(sp)
81135be8:	d8c00415 	stw	r3,16(sp)
81135bec:	d8000315 	stw	zero,12(sp)
81135bf0:	d8800215 	stw	r2,8(sp)
81135bf4:	e0800217 	ldw	r2,8(fp)
81135bf8:	d8800115 	stw	r2,4(sp)
81135bfc:	e0bffc17 	ldw	r2,-16(fp)
81135c00:	d8800015 	stw	r2,0(sp)
81135c04:	e1fffb17 	ldw	r7,-20(fp)
81135c08:	000d883a 	mov	r6,zero
81135c0c:	e17ffa17 	ldw	r5,-24(fp)
81135c10:	e13ff917 	ldw	r4,-28(fp)
81135c14:	11351d00 	call	811351d0 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81135c18:	e037883a 	mov	sp,fp
81135c1c:	dfc00117 	ldw	ra,4(sp)
81135c20:	df000017 	ldw	fp,0(sp)
81135c24:	dec00204 	addi	sp,sp,8
81135c28:	f800283a 	ret

81135c2c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81135c2c:	defff004 	addi	sp,sp,-64
81135c30:	de00012e 	bgeu	sp,et,81135c38 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
81135c34:	003b68fa 	trap	3
81135c38:	dfc00f15 	stw	ra,60(sp)
81135c3c:	df000e15 	stw	fp,56(sp)
81135c40:	df000e04 	addi	fp,sp,56
81135c44:	e13ff915 	stw	r4,-28(fp)
81135c48:	e17ffa15 	stw	r5,-24(fp)
81135c4c:	e1bffb15 	stw	r6,-20(fp)
81135c50:	e1fffc15 	stw	r7,-16(fp)
81135c54:	e1000317 	ldw	r4,12(fp)
81135c58:	e0c00417 	ldw	r3,16(fp)
81135c5c:	e0800517 	ldw	r2,20(fp)
81135c60:	e13ffd0d 	sth	r4,-12(fp)
81135c64:	e0fffe05 	stb	r3,-8(fp)
81135c68:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
81135c6c:	e0bffd0b 	ldhu	r2,-12(fp)
81135c70:	e0fffe03 	ldbu	r3,-8(fp)
81135c74:	e13fff0b 	ldhu	r4,-4(fp)
81135c78:	d8000615 	stw	zero,24(sp)
81135c7c:	d9000515 	stw	r4,20(sp)
81135c80:	d8000415 	stw	zero,16(sp)
81135c84:	d8c00315 	stw	r3,12(sp)
81135c88:	d8800215 	stw	r2,8(sp)
81135c8c:	e0800217 	ldw	r2,8(fp)
81135c90:	d8800115 	stw	r2,4(sp)
81135c94:	e0bffc17 	ldw	r2,-16(fp)
81135c98:	d8800015 	stw	r2,0(sp)
81135c9c:	000f883a 	mov	r7,zero
81135ca0:	e1bffb17 	ldw	r6,-20(fp)
81135ca4:	e17ffa17 	ldw	r5,-24(fp)
81135ca8:	e13ff917 	ldw	r4,-28(fp)
81135cac:	11351d00 	call	811351d0 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81135cb0:	e037883a 	mov	sp,fp
81135cb4:	dfc00117 	ldw	ra,4(sp)
81135cb8:	df000017 	ldw	fp,0(sp)
81135cbc:	dec00204 	addi	sp,sp,8
81135cc0:	f800283a 	ret

81135cc4 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
81135cc4:	deffee04 	addi	sp,sp,-72
81135cc8:	de00012e 	bgeu	sp,et,81135cd0 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
81135ccc:	003b68fa 	trap	3
81135cd0:	dfc01115 	stw	ra,68(sp)
81135cd4:	df001015 	stw	fp,64(sp)
81135cd8:	df001004 	addi	fp,sp,64
81135cdc:	e13ff715 	stw	r4,-36(fp)
81135ce0:	e17ff815 	stw	r5,-32(fp)
81135ce4:	e1bff915 	stw	r6,-28(fp)
81135ce8:	e1fffa15 	stw	r7,-24(fp)
81135cec:	e1800417 	ldw	r6,16(fp)
81135cf0:	e1400517 	ldw	r5,20(fp)
81135cf4:	e1000617 	ldw	r4,24(fp)
81135cf8:	e0c00717 	ldw	r3,28(fp)
81135cfc:	e0800817 	ldw	r2,32(fp)
81135d00:	e1bffb0d 	sth	r6,-20(fp)
81135d04:	e17ffc05 	stb	r5,-16(fp)
81135d08:	e13ffd05 	stb	r4,-12(fp)
81135d0c:	e0fffe0d 	sth	r3,-8(fp)
81135d10:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81135d14:	e0bffb0b 	ldhu	r2,-20(fp)
81135d18:	e0fffc03 	ldbu	r3,-16(fp)
81135d1c:	e13ffd03 	ldbu	r4,-12(fp)
81135d20:	e17ffe0b 	ldhu	r5,-8(fp)
81135d24:	e1bfff0b 	ldhu	r6,-4(fp)
81135d28:	d9800615 	stw	r6,24(sp)
81135d2c:	d9400515 	stw	r5,20(sp)
81135d30:	d9000415 	stw	r4,16(sp)
81135d34:	d8c00315 	stw	r3,12(sp)
81135d38:	d8800215 	stw	r2,8(sp)
81135d3c:	e0800317 	ldw	r2,12(fp)
81135d40:	d8800115 	stw	r2,4(sp)
81135d44:	e0800217 	ldw	r2,8(fp)
81135d48:	d8800015 	stw	r2,0(sp)
81135d4c:	e1fffa17 	ldw	r7,-24(fp)
81135d50:	e1bff917 	ldw	r6,-28(fp)
81135d54:	e17ff817 	ldw	r5,-32(fp)
81135d58:	e13ff717 	ldw	r4,-36(fp)
81135d5c:	11351d00 	call	811351d0 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
81135d60:	e037883a 	mov	sp,fp
81135d64:	dfc00117 	ldw	ra,4(sp)
81135d68:	df000017 	ldw	fp,0(sp)
81135d6c:	dec00204 	addi	sp,sp,8
81135d70:	f800283a 	ret

81135d74 <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81135d74:	defffb04 	addi	sp,sp,-20
81135d78:	de00012e 	bgeu	sp,et,81135d80 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
81135d7c:	003b68fa 	trap	3
81135d80:	df000415 	stw	fp,16(sp)
81135d84:	df000404 	addi	fp,sp,16
81135d88:	e13ffc15 	stw	r4,-16(fp)
81135d8c:	e17ffd15 	stw	r5,-12(fp)
81135d90:	e1bffe15 	stw	r6,-8(fp)
81135d94:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81135d98:	e0bffc17 	ldw	r2,-16(fp)
81135d9c:	10c01217 	ldw	r3,72(r2)
81135da0:	e0800117 	ldw	r2,4(fp)
81135da4:	18800436 	bltu	r3,r2,81135db8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
81135da8:	e0bffc17 	ldw	r2,-16(fp)
81135dac:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81135db0:	10803fcc 	andi	r2,r2,255
81135db4:	10000226 	beq	r2,zero,81135dc0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81135db8:	00bffa84 	movi	r2,-22
81135dbc:	00001406 	br	81135e10 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
81135dc0:	e0bffd17 	ldw	r2,-12(fp)
81135dc4:	e0fffe17 	ldw	r3,-8(fp)
81135dc8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81135dcc:	e0bffd17 	ldw	r2,-12(fp)
81135dd0:	e0ffff17 	ldw	r3,-4(fp)
81135dd4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81135dd8:	e0bffd17 	ldw	r2,-12(fp)
81135ddc:	e0c00117 	ldw	r3,4(fp)
81135de0:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81135de4:	e0fffd17 	ldw	r3,-12(fp)
81135de8:	e0bffd17 	ldw	r2,-12(fp)
81135dec:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81135df0:	e0c00217 	ldw	r3,8(fp)
81135df4:	00900034 	movhi	r2,16384
81135df8:	10bfffc4 	addi	r2,r2,-1
81135dfc:	1884703a 	and	r2,r3,r2
81135e00:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81135e04:	e0bffd17 	ldw	r2,-12(fp)
81135e08:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81135e0c:	0005883a 	mov	r2,zero
}
81135e10:	e037883a 	mov	sp,fp
81135e14:	df000017 	ldw	fp,0(sp)
81135e18:	dec00104 	addi	sp,sp,4
81135e1c:	f800283a 	ret

81135e20 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81135e20:	defff404 	addi	sp,sp,-48
81135e24:	de00012e 	bgeu	sp,et,81135e2c <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
81135e28:	003b68fa 	trap	3
81135e2c:	df000b15 	stw	fp,44(sp)
81135e30:	df000b04 	addi	fp,sp,44
81135e34:	e13ff715 	stw	r4,-36(fp)
81135e38:	e17ff815 	stw	r5,-32(fp)
81135e3c:	e1bff915 	stw	r6,-28(fp)
81135e40:	e1fffa15 	stw	r7,-24(fp)
81135e44:	e1800517 	ldw	r6,20(fp)
81135e48:	e1400617 	ldw	r5,24(fp)
81135e4c:	e1000717 	ldw	r4,28(fp)
81135e50:	e0c00817 	ldw	r3,32(fp)
81135e54:	e0800917 	ldw	r2,36(fp)
81135e58:	e1bffb0d 	sth	r6,-20(fp)
81135e5c:	e17ffc05 	stb	r5,-16(fp)
81135e60:	e13ffd05 	stb	r4,-12(fp)
81135e64:	e0fffe0d 	sth	r3,-8(fp)
81135e68:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81135e6c:	e0bff717 	ldw	r2,-36(fp)
81135e70:	10c01217 	ldw	r3,72(r2)
81135e74:	e0800317 	ldw	r2,12(fp)
81135e78:	18801936 	bltu	r3,r2,81135ee0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
81135e7c:	e13ff717 	ldw	r4,-36(fp)
81135e80:	20801317 	ldw	r2,76(r4)
81135e84:	20c01417 	ldw	r3,80(r4)
81135e88:	e13ffe0b 	ldhu	r4,-8(fp)
81135e8c:	213fffcc 	andi	r4,r4,65535
81135e90:	2015883a 	mov	r10,r4
81135e94:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81135e98:	1ac01136 	bltu	r3,r11,81135ee0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81135e9c:	58c0011e 	bne	r11,r3,81135ea4 <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
81135ea0:	12800f36 	bltu	r2,r10,81135ee0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81135ea4:	e13ff717 	ldw	r4,-36(fp)
81135ea8:	20801317 	ldw	r2,76(r4)
81135eac:	20c01417 	ldw	r3,80(r4)
81135eb0:	e13fff0b 	ldhu	r4,-4(fp)
81135eb4:	213fffcc 	andi	r4,r4,65535
81135eb8:	2011883a 	mov	r8,r4
81135ebc:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81135ec0:	1a400736 	bltu	r3,r9,81135ee0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
81135ec4:	48c0011e 	bne	r9,r3,81135ecc <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
81135ec8:	12000536 	bltu	r2,r8,81135ee0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81135ecc:	e0bff717 	ldw	r2,-36(fp)
81135ed0:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81135ed4:	10803fcc 	andi	r2,r2,255
81135ed8:	10800060 	cmpeqi	r2,r2,1
81135edc:	1000021e 	bne	r2,zero,81135ee8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81135ee0:	00bffa84 	movi	r2,-22
81135ee4:	00003106 	br	81135fac <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
81135ee8:	e0bff817 	ldw	r2,-32(fp)
81135eec:	e0fff917 	ldw	r3,-28(fp)
81135ef0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81135ef4:	e0bff817 	ldw	r2,-32(fp)
81135ef8:	e0fffa17 	ldw	r3,-24(fp)
81135efc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81135f00:	e0bff817 	ldw	r2,-32(fp)
81135f04:	e0c00117 	ldw	r3,4(fp)
81135f08:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81135f0c:	e0bff817 	ldw	r2,-32(fp)
81135f10:	e0c00217 	ldw	r3,8(fp)
81135f14:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81135f18:	e0bff817 	ldw	r2,-32(fp)
81135f1c:	e0c00317 	ldw	r3,12(fp)
81135f20:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81135f24:	e0bff817 	ldw	r2,-32(fp)
81135f28:	e0fffb0b 	ldhu	r3,-20(fp)
81135f2c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81135f30:	e0bff817 	ldw	r2,-32(fp)
81135f34:	e0fffc03 	ldbu	r3,-16(fp)
81135f38:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81135f3c:	e0bff817 	ldw	r2,-32(fp)
81135f40:	e0fffd03 	ldbu	r3,-12(fp)
81135f44:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81135f48:	e0bff817 	ldw	r2,-32(fp)
81135f4c:	e0fffe0b 	ldhu	r3,-8(fp)
81135f50:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81135f54:	e0bff817 	ldw	r2,-32(fp)
81135f58:	e0ffff0b 	ldhu	r3,-4(fp)
81135f5c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
81135f60:	e0bff817 	ldw	r2,-32(fp)
81135f64:	1019883a 	mov	r12,r2
81135f68:	001b883a 	mov	r13,zero
81135f6c:	e33ff515 	stw	r12,-44(fp)
81135f70:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
81135f74:	e0fff517 	ldw	r3,-44(fp)
81135f78:	e0bff817 	ldw	r2,-32(fp)
81135f7c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
81135f80:	e0fff617 	ldw	r3,-40(fp)
81135f84:	e0bff817 	ldw	r2,-32(fp)
81135f88:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81135f8c:	e0c00417 	ldw	r3,16(fp)
81135f90:	00900034 	movhi	r2,16384
81135f94:	10bfffc4 	addi	r2,r2,-1
81135f98:	1884703a 	and	r2,r3,r2
81135f9c:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
81135fa0:	e0bff817 	ldw	r2,-32(fp)
81135fa4:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81135fa8:	0005883a 	mov	r2,zero
}
81135fac:	e037883a 	mov	sp,fp
81135fb0:	df000017 	ldw	fp,0(sp)
81135fb4:	dec00104 	addi	sp,sp,4
81135fb8:	f800283a 	ret

81135fbc <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81135fbc:	defff804 	addi	sp,sp,-32
81135fc0:	de00012e 	bgeu	sp,et,81135fc8 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
81135fc4:	003b68fa 	trap	3
81135fc8:	dfc00715 	stw	ra,28(sp)
81135fcc:	df000615 	stw	fp,24(sp)
81135fd0:	df000604 	addi	fp,sp,24
81135fd4:	e13ffc15 	stw	r4,-16(fp)
81135fd8:	e17ffd15 	stw	r5,-12(fp)
81135fdc:	e1bffe15 	stw	r6,-8(fp)
81135fe0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81135fe4:	e0800317 	ldw	r2,12(fp)
81135fe8:	d8800115 	stw	r2,4(sp)
81135fec:	e0800217 	ldw	r2,8(fp)
81135ff0:	d8800015 	stw	r2,0(sp)
81135ff4:	e1ffff17 	ldw	r7,-4(fp)
81135ff8:	e1bffe17 	ldw	r6,-8(fp)
81135ffc:	e17ffd17 	ldw	r5,-12(fp)
81136000:	e13ffc17 	ldw	r4,-16(fp)
81136004:	1135d740 	call	81135d74 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81136008:	e037883a 	mov	sp,fp
8113600c:	dfc00117 	ldw	ra,4(sp)
81136010:	df000017 	ldw	fp,0(sp)
81136014:	dec00204 	addi	sp,sp,8
81136018:	f800283a 	ret

8113601c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113601c:	defff804 	addi	sp,sp,-32
81136020:	de00012e 	bgeu	sp,et,81136028 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
81136024:	003b68fa 	trap	3
81136028:	dfc00715 	stw	ra,28(sp)
8113602c:	df000615 	stw	fp,24(sp)
81136030:	df000604 	addi	fp,sp,24
81136034:	e13ffc15 	stw	r4,-16(fp)
81136038:	e17ffd15 	stw	r5,-12(fp)
8113603c:	e1bffe15 	stw	r6,-8(fp)
81136040:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81136044:	e0800217 	ldw	r2,8(fp)
81136048:	d8800115 	stw	r2,4(sp)
8113604c:	e0bfff17 	ldw	r2,-4(fp)
81136050:	d8800015 	stw	r2,0(sp)
81136054:	e1fffe17 	ldw	r7,-8(fp)
81136058:	000d883a 	mov	r6,zero
8113605c:	e17ffd17 	ldw	r5,-12(fp)
81136060:	e13ffc17 	ldw	r4,-16(fp)
81136064:	1135d740 	call	81135d74 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81136068:	e037883a 	mov	sp,fp
8113606c:	dfc00117 	ldw	ra,4(sp)
81136070:	df000017 	ldw	fp,0(sp)
81136074:	dec00204 	addi	sp,sp,8
81136078:	f800283a 	ret

8113607c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113607c:	defff804 	addi	sp,sp,-32
81136080:	de00012e 	bgeu	sp,et,81136088 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
81136084:	003b68fa 	trap	3
81136088:	dfc00715 	stw	ra,28(sp)
8113608c:	df000615 	stw	fp,24(sp)
81136090:	df000604 	addi	fp,sp,24
81136094:	e13ffc15 	stw	r4,-16(fp)
81136098:	e17ffd15 	stw	r5,-12(fp)
8113609c:	e1bffe15 	stw	r6,-8(fp)
811360a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811360a4:	e0800217 	ldw	r2,8(fp)
811360a8:	d8800115 	stw	r2,4(sp)
811360ac:	e0bfff17 	ldw	r2,-4(fp)
811360b0:	d8800015 	stw	r2,0(sp)
811360b4:	000f883a 	mov	r7,zero
811360b8:	e1bffe17 	ldw	r6,-8(fp)
811360bc:	e17ffd17 	ldw	r5,-12(fp)
811360c0:	e13ffc17 	ldw	r4,-16(fp)
811360c4:	1135d740 	call	81135d74 <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
811360c8:	e037883a 	mov	sp,fp
811360cc:	dfc00117 	ldw	ra,4(sp)
811360d0:	df000017 	ldw	fp,0(sp)
811360d4:	dec00204 	addi	sp,sp,8
811360d8:	f800283a 	ret

811360dc <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
811360dc:	deffee04 	addi	sp,sp,-72
811360e0:	de00012e 	bgeu	sp,et,811360e8 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
811360e4:	003b68fa 	trap	3
811360e8:	dfc01115 	stw	ra,68(sp)
811360ec:	df001015 	stw	fp,64(sp)
811360f0:	df001004 	addi	fp,sp,64
811360f4:	e13ff915 	stw	r4,-28(fp)
811360f8:	e17ffa15 	stw	r5,-24(fp)
811360fc:	e1bffb15 	stw	r6,-20(fp)
81136100:	e1fffc15 	stw	r7,-16(fp)
81136104:	e1000417 	ldw	r4,16(fp)
81136108:	e0c00517 	ldw	r3,20(fp)
8113610c:	e0800617 	ldw	r2,24(fp)
81136110:	e13ffd0d 	sth	r4,-12(fp)
81136114:	e0fffe05 	stb	r3,-8(fp)
81136118:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
8113611c:	e0bffd0b 	ldhu	r2,-12(fp)
81136120:	e0fffe03 	ldbu	r3,-8(fp)
81136124:	e13fff0b 	ldhu	r4,-4(fp)
81136128:	d9000815 	stw	r4,32(sp)
8113612c:	d8000715 	stw	zero,28(sp)
81136130:	d8c00615 	stw	r3,24(sp)
81136134:	d8000515 	stw	zero,20(sp)
81136138:	d8800415 	stw	r2,16(sp)
8113613c:	e0800317 	ldw	r2,12(fp)
81136140:	d8800315 	stw	r2,12(sp)
81136144:	e0800217 	ldw	r2,8(fp)
81136148:	d8800215 	stw	r2,8(sp)
8113614c:	e0bffc17 	ldw	r2,-16(fp)
81136150:	d8800115 	stw	r2,4(sp)
81136154:	e0bffb17 	ldw	r2,-20(fp)
81136158:	d8800015 	stw	r2,0(sp)
8113615c:	000f883a 	mov	r7,zero
81136160:	000d883a 	mov	r6,zero
81136164:	e17ffa17 	ldw	r5,-24(fp)
81136168:	e13ff917 	ldw	r4,-28(fp)
8113616c:	1135e200 	call	81135e20 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
81136170:	e037883a 	mov	sp,fp
81136174:	dfc00117 	ldw	ra,4(sp)
81136178:	df000017 	ldw	fp,0(sp)
8113617c:	dec00204 	addi	sp,sp,8
81136180:	f800283a 	ret

81136184 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81136184:	deffee04 	addi	sp,sp,-72
81136188:	de00012e 	bgeu	sp,et,81136190 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
8113618c:	003b68fa 	trap	3
81136190:	dfc01115 	stw	ra,68(sp)
81136194:	df001015 	stw	fp,64(sp)
81136198:	df001004 	addi	fp,sp,64
8113619c:	e13ff915 	stw	r4,-28(fp)
811361a0:	e17ffa15 	stw	r5,-24(fp)
811361a4:	e1bffb15 	stw	r6,-20(fp)
811361a8:	e1fffc15 	stw	r7,-16(fp)
811361ac:	e1000417 	ldw	r4,16(fp)
811361b0:	e0c00517 	ldw	r3,20(fp)
811361b4:	e0800617 	ldw	r2,24(fp)
811361b8:	e13ffd0d 	sth	r4,-12(fp)
811361bc:	e0fffe05 	stb	r3,-8(fp)
811361c0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
811361c4:	e0bffd0b 	ldhu	r2,-12(fp)
811361c8:	e0fffe03 	ldbu	r3,-8(fp)
811361cc:	e13fff0b 	ldhu	r4,-4(fp)
811361d0:	d8000815 	stw	zero,32(sp)
811361d4:	d9000715 	stw	r4,28(sp)
811361d8:	d8000615 	stw	zero,24(sp)
811361dc:	d8c00515 	stw	r3,20(sp)
811361e0:	d8800415 	stw	r2,16(sp)
811361e4:	e0800317 	ldw	r2,12(fp)
811361e8:	d8800315 	stw	r2,12(sp)
811361ec:	e0800217 	ldw	r2,8(fp)
811361f0:	d8800215 	stw	r2,8(sp)
811361f4:	d8000115 	stw	zero,4(sp)
811361f8:	d8000015 	stw	zero,0(sp)
811361fc:	e1fffc17 	ldw	r7,-16(fp)
81136200:	e1bffb17 	ldw	r6,-20(fp)
81136204:	e17ffa17 	ldw	r5,-24(fp)
81136208:	e13ff917 	ldw	r4,-28(fp)
8113620c:	1135e200 	call	81135e20 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81136210:	e037883a 	mov	sp,fp
81136214:	dfc00117 	ldw	ra,4(sp)
81136218:	df000017 	ldw	fp,0(sp)
8113621c:	dec00204 	addi	sp,sp,8
81136220:	f800283a 	ret

81136224 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81136224:	deffec04 	addi	sp,sp,-80
81136228:	de00012e 	bgeu	sp,et,81136230 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
8113622c:	003b68fa 	trap	3
81136230:	dfc01315 	stw	ra,76(sp)
81136234:	df001215 	stw	fp,72(sp)
81136238:	df001204 	addi	fp,sp,72
8113623c:	e13ff715 	stw	r4,-36(fp)
81136240:	e17ff815 	stw	r5,-32(fp)
81136244:	e1bff915 	stw	r6,-28(fp)
81136248:	e1fffa15 	stw	r7,-24(fp)
8113624c:	e1800617 	ldw	r6,24(fp)
81136250:	e1400717 	ldw	r5,28(fp)
81136254:	e1000817 	ldw	r4,32(fp)
81136258:	e0c00917 	ldw	r3,36(fp)
8113625c:	e0800a17 	ldw	r2,40(fp)
81136260:	e1bffb0d 	sth	r6,-20(fp)
81136264:	e17ffc05 	stb	r5,-16(fp)
81136268:	e13ffd05 	stb	r4,-12(fp)
8113626c:	e0fffe0d 	sth	r3,-8(fp)
81136270:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81136274:	e0bffb0b 	ldhu	r2,-20(fp)
81136278:	e0fffc03 	ldbu	r3,-16(fp)
8113627c:	e13ffd03 	ldbu	r4,-12(fp)
81136280:	e17ffe0b 	ldhu	r5,-8(fp)
81136284:	e1bfff0b 	ldhu	r6,-4(fp)
81136288:	d9800815 	stw	r6,32(sp)
8113628c:	d9400715 	stw	r5,28(sp)
81136290:	d9000615 	stw	r4,24(sp)
81136294:	d8c00515 	stw	r3,20(sp)
81136298:	d8800415 	stw	r2,16(sp)
8113629c:	e0800517 	ldw	r2,20(fp)
811362a0:	d8800315 	stw	r2,12(sp)
811362a4:	e0800417 	ldw	r2,16(fp)
811362a8:	d8800215 	stw	r2,8(sp)
811362ac:	e0800317 	ldw	r2,12(fp)
811362b0:	d8800115 	stw	r2,4(sp)
811362b4:	e0800217 	ldw	r2,8(fp)
811362b8:	d8800015 	stw	r2,0(sp)
811362bc:	e1fffa17 	ldw	r7,-24(fp)
811362c0:	e1bff917 	ldw	r6,-28(fp)
811362c4:	e17ff817 	ldw	r5,-32(fp)
811362c8:	e13ff717 	ldw	r4,-36(fp)
811362cc:	1135e200 	call	81135e20 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
811362d0:	e037883a 	mov	sp,fp
811362d4:	dfc00117 	ldw	ra,4(sp)
811362d8:	df000017 	ldw	fp,0(sp)
811362dc:	dec00204 	addi	sp,sp,8
811362e0:	f800283a 	ret

811362e4 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
811362e4:	defffc04 	addi	sp,sp,-16
811362e8:	de00012e 	bgeu	sp,et,811362f0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
811362ec:	003b68fa 	trap	3
811362f0:	df000315 	stw	fp,12(sp)
811362f4:	df000304 	addi	fp,sp,12
811362f8:	e13ffe15 	stw	r4,-8(fp)
811362fc:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81136300:	e0bfff17 	ldw	r2,-4(fp)
81136304:	1000021e 	bne	r2,zero,81136310 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81136308:	00bffa84 	movi	r2,-22
8113630c:	00002f06 	br	811363cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
81136310:	e0bfff17 	ldw	r2,-4(fp)
81136314:	10c00317 	ldw	r3,12(r2)
81136318:	e0bfff17 	ldw	r2,-4(fp)
8113631c:	18800226 	beq	r3,r2,81136328 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81136320:	00bffa84 	movi	r2,-22
81136324:	00002906 	br	811363cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
81136328:	e0bffe17 	ldw	r2,-8(fp)
8113632c:	10800017 	ldw	r2,0(r2)
81136330:	1000051e 	bne	r2,zero,81136348 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
81136334:	e0bffe17 	ldw	r2,-8(fp)
81136338:	e0ffff17 	ldw	r3,-4(fp)
8113633c:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
81136340:	0005883a 	mov	r2,zero
81136344:	00002106 	br	811363cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
81136348:	e0bffe17 	ldw	r2,-8(fp)
8113634c:	10c00017 	ldw	r3,0(r2)
81136350:	e0bfff17 	ldw	r2,-4(fp)
81136354:	1880021e 	bne	r3,r2,81136360 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81136358:	00bffa84 	movi	r2,-22
8113635c:	00001b06 	br	811363cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81136360:	e0bffe17 	ldw	r2,-8(fp)
81136364:	10800017 	ldw	r2,0(r2)
81136368:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113636c:	00000906 	br	81136394 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81136370:	e0bffd17 	ldw	r2,-12(fp)
81136374:	10c00317 	ldw	r3,12(r2)
81136378:	e0bfff17 	ldw	r2,-4(fp)
8113637c:	1880021e 	bne	r3,r2,81136388 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81136380:	00bffa84 	movi	r2,-22
81136384:	00001106 	br	811363cc <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81136388:	e0bffd17 	ldw	r2,-12(fp)
8113638c:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81136390:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81136394:	e0bffd17 	ldw	r2,-12(fp)
81136398:	10800317 	ldw	r2,12(r2)
8113639c:	e0fffe17 	ldw	r3,-8(fp)
811363a0:	18c00017 	ldw	r3,0(r3)
811363a4:	10fff21e 	bne	r2,r3,81136370 <__reset+0xfb116370>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
811363a8:	e0ffff17 	ldw	r3,-4(fp)
811363ac:	e0bffd17 	ldw	r2,-12(fp)
811363b0:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
811363b4:	e0bffe17 	ldw	r2,-8(fp)
811363b8:	10800017 	ldw	r2,0(r2)
811363bc:	1007883a 	mov	r3,r2
811363c0:	e0bfff17 	ldw	r2,-4(fp)
811363c4:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
811363c8:	0005883a 	mov	r2,zero
}
811363cc:	e037883a 	mov	sp,fp
811363d0:	df000017 	ldw	fp,0(sp)
811363d4:	dec00104 	addi	sp,sp,4
811363d8:	f800283a 	ret

811363dc <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
811363dc:	defff804 	addi	sp,sp,-32
811363e0:	de00012e 	bgeu	sp,et,811363e8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
811363e4:	003b68fa 	trap	3
811363e8:	df000715 	stw	fp,28(sp)
811363ec:	df000704 	addi	fp,sp,28
811363f0:	e13ffe15 	stw	r4,-8(fp)
811363f4:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
811363f8:	e13fff17 	ldw	r4,-4(fp)
811363fc:	2000021e 	bne	r4,zero,81136408 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81136400:	00bffa84 	movi	r2,-22
81136404:	00005906 	br	8113656c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81136408:	e13fff17 	ldw	r4,-4(fp)
8113640c:	2015883a 	mov	r10,r4
81136410:	0017883a 	mov	r11,zero
81136414:	e2bffc15 	stw	r10,-16(fp)
81136418:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
8113641c:	e13fff17 	ldw	r4,-4(fp)
81136420:	21400317 	ldw	r5,12(r4)
81136424:	e13ffc17 	ldw	r4,-16(fp)
81136428:	29000626 	beq	r5,r4,81136444 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
8113642c:	e13fff17 	ldw	r4,-4(fp)
81136430:	21400b17 	ldw	r5,44(r4)
81136434:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81136438:	29000226 	beq	r5,r4,81136444 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
8113643c:	00bffa84 	movi	r2,-22
81136440:	00004a06 	br	8113656c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
81136444:	e13ffe17 	ldw	r4,-8(fp)
81136448:	21000017 	ldw	r4,0(r4)
8113644c:	2000051e 	bne	r4,zero,81136464 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
81136450:	e0bffe17 	ldw	r2,-8(fp)
81136454:	e0ffff17 	ldw	r3,-4(fp)
81136458:	10c00015 	stw	r3,0(r2)
		return 0;
8113645c:	0005883a 	mov	r2,zero
81136460:	00004206 	br	8113656c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
81136464:	e13ffe17 	ldw	r4,-8(fp)
81136468:	21400017 	ldw	r5,0(r4)
8113646c:	e13fff17 	ldw	r4,-4(fp)
81136470:	2900021e 	bne	r5,r4,8113647c <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81136474:	00bffa84 	movi	r2,-22
81136478:	00003c06 	br	8113656c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
8113647c:	e13ffe17 	ldw	r4,-8(fp)
81136480:	21000017 	ldw	r4,0(r4)
81136484:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81136488:	e13ffe17 	ldw	r4,-8(fp)
8113648c:	21000017 	ldw	r4,0(r4)
81136490:	2011883a 	mov	r8,r4
81136494:	0013883a 	mov	r9,zero
81136498:	e23ffa15 	stw	r8,-24(fp)
8113649c:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811364a0:	00001806 	br	81136504 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
811364a4:	e13fff17 	ldw	r4,-4(fp)
811364a8:	200d883a 	mov	r6,r4
811364ac:	000f883a 	mov	r7,zero
811364b0:	e1bffc15 	stw	r6,-16(fp)
811364b4:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
811364b8:	e13ff917 	ldw	r4,-28(fp)
811364bc:	21400317 	ldw	r5,12(r4)
811364c0:	e13ffc17 	ldw	r4,-16(fp)
811364c4:	2900061e 	bne	r5,r4,811364e0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
811364c8:	e13ff917 	ldw	r4,-28(fp)
811364cc:	21400b17 	ldw	r5,44(r4)
811364d0:	e13ffd17 	ldw	r4,-12(fp)
811364d4:	2900021e 	bne	r5,r4,811364e0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
811364d8:	00bffa84 	movi	r2,-22
811364dc:	00002306 	br	8113656c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
811364e0:	e13ff917 	ldw	r4,-28(fp)
811364e4:	21000317 	ldw	r4,12(r4)
811364e8:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
811364ec:	e13ff917 	ldw	r4,-28(fp)
811364f0:	21000b17 	ldw	r4,44(r4)
811364f4:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
811364f8:	e13ffc17 	ldw	r4,-16(fp)
811364fc:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81136500:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81136504:	e13ff917 	ldw	r4,-28(fp)
81136508:	21400317 	ldw	r5,12(r4)
8113650c:	e13ffa17 	ldw	r4,-24(fp)
81136510:	29000426 	beq	r5,r4,81136524 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81136514:	e13ff917 	ldw	r4,-28(fp)
81136518:	21400b17 	ldw	r5,44(r4)
8113651c:	e13ffb17 	ldw	r4,-20(fp)
81136520:	293fe01e 	bne	r5,r4,811364a4 <__reset+0xfb1164a4>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
81136524:	e13fff17 	ldw	r4,-4(fp)
81136528:	2005883a 	mov	r2,r4
8113652c:	0007883a 	mov	r3,zero
81136530:	e0bffc15 	stw	r2,-16(fp)
81136534:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
81136538:	e0fffc17 	ldw	r3,-16(fp)
8113653c:	e0bff917 	ldw	r2,-28(fp)
81136540:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
81136544:	e0fffd17 	ldw	r3,-12(fp)
81136548:	e0bff917 	ldw	r2,-28(fp)
8113654c:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
81136550:	e0fffa17 	ldw	r3,-24(fp)
81136554:	e0bfff17 	ldw	r2,-4(fp)
81136558:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
8113655c:	e0fffb17 	ldw	r3,-20(fp)
81136560:	e0bfff17 	ldw	r2,-4(fp)
81136564:	10c00b15 	stw	r3,44(r2)
	return 0;
81136568:	0005883a 	mov	r2,zero
}
8113656c:	e037883a 	mov	sp,fp
81136570:	df000017 	ldw	fp,0(sp)
81136574:	dec00104 	addi	sp,sp,4
81136578:	f800283a 	ret

8113657c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
8113657c:	defffc04 	addi	sp,sp,-16
81136580:	de00012e 	bgeu	sp,et,81136588 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
81136584:	003b68fa 	trap	3
81136588:	df000315 	stw	fp,12(sp)
8113658c:	df000304 	addi	fp,sp,12
81136590:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81136594:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81136598:	e0bfff17 	ldw	r2,-4(fp)
8113659c:	1000021e 	bne	r2,zero,811365a8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
811365a0:	00bffa84 	movi	r2,-22
811365a4:	00001906 	br	8113660c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811365a8:	e0bfff17 	ldw	r2,-4(fp)
811365ac:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
811365b0:	00000a06 	br	811365dc <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
811365b4:	e0bffd17 	ldw	r2,-12(fp)
811365b8:	10800717 	ldw	r2,28(r2)
811365bc:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811365c0:	e0bffe17 	ldw	r2,-8(fp)
811365c4:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
811365c8:	e0bffd17 	ldw	r2,-12(fp)
811365cc:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
811365d0:	e0bffd17 	ldw	r2,-12(fp)
811365d4:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
811365d8:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
811365dc:	e0bffd17 	ldw	r2,-12(fp)
811365e0:	10c00317 	ldw	r3,12(r2)
811365e4:	e0bfff17 	ldw	r2,-4(fp)
811365e8:	18bff21e 	bne	r3,r2,811365b4 <__reset+0xfb1165b4>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
811365ec:	e0bffd17 	ldw	r2,-12(fp)
811365f0:	10800717 	ldw	r2,28(r2)
811365f4:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811365f8:	e0bffe17 	ldw	r2,-8(fp)
811365fc:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81136600:	e0bffd17 	ldw	r2,-12(fp)
81136604:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81136608:	0005883a 	mov	r2,zero
}
8113660c:	e037883a 	mov	sp,fp
81136610:	df000017 	ldw	fp,0(sp)
81136614:	dec00104 	addi	sp,sp,4
81136618:	f800283a 	ret

8113661c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
8113661c:	defff804 	addi	sp,sp,-32
81136620:	de00012e 	bgeu	sp,et,81136628 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
81136624:	003b68fa 	trap	3
81136628:	df000715 	stw	fp,28(sp)
8113662c:	df000704 	addi	fp,sp,28
81136630:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81136634:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
81136638:	e13fff17 	ldw	r4,-4(fp)
8113663c:	2000021e 	bne	r4,zero,81136648 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
81136640:	00bffa84 	movi	r2,-22
81136644:	00002806 	br	811366e8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81136648:	e13fff17 	ldw	r4,-4(fp)
8113664c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
81136650:	e13fff17 	ldw	r4,-4(fp)
81136654:	2005883a 	mov	r2,r4
81136658:	0007883a 	mov	r3,zero
8113665c:	e0bffb15 	stw	r2,-20(fp)
81136660:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81136664:	00001006 	br	811366a8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
81136668:	e0bff917 	ldw	r2,-28(fp)
8113666c:	10800f17 	ldw	r2,60(r2)
81136670:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81136674:	e0bffa17 	ldw	r2,-24(fp)
81136678:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
8113667c:	e0bff917 	ldw	r2,-28(fp)
81136680:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81136684:	e0bff917 	ldw	r2,-28(fp)
81136688:	10800317 	ldw	r2,12(r2)
8113668c:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81136690:	e0bff917 	ldw	r2,-28(fp)
81136694:	10800b17 	ldw	r2,44(r2)
81136698:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
8113669c:	e0bffd17 	ldw	r2,-12(fp)
811366a0:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
811366a4:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811366a8:	e0bff917 	ldw	r2,-28(fp)
811366ac:	10c00317 	ldw	r3,12(r2)
811366b0:	e0bffb17 	ldw	r2,-20(fp)
811366b4:	18800426 	beq	r3,r2,811366c8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
811366b8:	e0bff917 	ldw	r2,-28(fp)
811366bc:	10c00b17 	ldw	r3,44(r2)
811366c0:	e0bffc17 	ldw	r2,-16(fp)
811366c4:	18bfe81e 	bne	r3,r2,81136668 <__reset+0xfb116668>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
811366c8:	e0bff917 	ldw	r2,-28(fp)
811366cc:	10800f17 	ldw	r2,60(r2)
811366d0:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811366d4:	e0bffa17 	ldw	r2,-24(fp)
811366d8:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
811366dc:	e0bff917 	ldw	r2,-28(fp)
811366e0:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
811366e4:	0005883a 	mov	r2,zero
}
811366e8:	e037883a 	mov	sp,fp
811366ec:	df000017 	ldw	fp,0(sp)
811366f0:	dec00104 	addi	sp,sp,4
811366f4:	f800283a 	ret

811366f8 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
811366f8:	deffeb04 	addi	sp,sp,-84
811366fc:	de00012e 	bgeu	sp,et,81136704 <alt_msgdma_start_prefetcher_with_list_addr+0xc>
81136700:	003b68fa 	trap	3
81136704:	dfc01415 	stw	ra,80(sp)
81136708:	df001315 	stw	fp,76(sp)
8113670c:	df001304 	addi	fp,sp,76
81136710:	e13ffb15 	stw	r4,-20(fp)
81136714:	e17ffc15 	stw	r5,-16(fp)
81136718:	e1bffd15 	stw	r6,-12(fp)
8113671c:	3807883a 	mov	r3,r7
81136720:	e0800217 	ldw	r2,8(fp)
81136724:	e0fffe05 	stb	r3,-8(fp)
81136728:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
8113672c:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
81136730:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
81136734:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
81136738:	e0bffc17 	ldw	r2,-16(fp)
8113673c:	e0bff815 	stw	r2,-32(fp)
81136740:	e0bffd17 	ldw	r2,-12(fp)
81136744:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
81136748:	e0bffb17 	ldw	r2,-20(fp)
8113674c:	10801817 	ldw	r2,96(r2)
81136750:	e0bff615 	stw	r2,-40(fp)
81136754:	e03ff70d 	sth	zero,-36(fp)
81136758:	e0bff70b 	ldhu	r2,-36(fp)
8113675c:	e0fffa04 	addi	r3,fp,-24
81136760:	180d883a 	mov	r6,r3
81136764:	100b883a 	mov	r5,r2
81136768:	e13ff617 	ldw	r4,-40(fp)
8113676c:	112ab040 	call	8112ab04 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
81136770:	e0bffb17 	ldw	r2,-20(fp)
81136774:	10800617 	ldw	r2,24(r2)
81136778:	10800037 	ldwio	r2,0(r2)
8113677c:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
81136780:	e0bfed17 	ldw	r2,-76(fp)
81136784:	1080004c 	andi	r2,r2,1
81136788:	10000626 	beq	r2,zero,811367a4 <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
8113678c:	e0bffb17 	ldw	r2,-20(fp)
81136790:	10801817 	ldw	r2,96(r2)
81136794:	1009883a 	mov	r4,r2
81136798:	112ae8c0 	call	8112ae8c <OSSemPost>
		return -EBUSY;
8113679c:	00bffc04 	movi	r2,-16
811367a0:	00009606 	br	811369fc <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811367a4:	00800804 	movi	r2,32
811367a8:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811367ac:	0005303a 	rdctl	r2,status
811367b0:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811367b4:	e0fff217 	ldw	r3,-56(fp)
811367b8:	00bfff84 	movi	r2,-2
811367bc:	1884703a 	and	r2,r3,r2
811367c0:	1001703a 	wrctl	status,r2
  
  return context;
811367c4:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811367c8:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811367cc:	e0bffb17 	ldw	r2,-20(fp)
811367d0:	10800317 	ldw	r2,12(r2)
811367d4:	10800104 	addi	r2,r2,4
811367d8:	e0ffee17 	ldw	r3,-72(fp)
811367dc:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
811367e0:	e0bffb17 	ldw	r2,-20(fp)
811367e4:	10800317 	ldw	r2,12(r2)
811367e8:	e0fffb17 	ldw	r3,-20(fp)
811367ec:	18c00317 	ldw	r3,12(r3)
811367f0:	18c00037 	ldwio	r3,0(r3)
811367f4:	10c00035 	stwio	r3,0(r2)
811367f8:	e0bfef17 	ldw	r2,-68(fp)
811367fc:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136800:	e0bff017 	ldw	r2,-64(fp)
81136804:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81136808:	e0bffb17 	ldw	r2,-20(fp)
8113680c:	10800b17 	ldw	r2,44(r2)
81136810:	10002326 	beq	r2,zero,811368a0 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81136814:	e0bffb17 	ldw	r2,-20(fp)
81136818:	10c00d17 	ldw	r3,52(r2)
8113681c:	e0bfee17 	ldw	r2,-72(fp)
81136820:	1884b03a 	or	r2,r3,r2
81136824:	10800514 	ori	r2,r2,20
81136828:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
8113682c:	e0ffee17 	ldw	r3,-72(fp)
81136830:	00bff7c4 	movi	r2,-33
81136834:	1884703a 	and	r2,r3,r2
81136838:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
8113683c:	e0bfed17 	ldw	r2,-76(fp)
81136840:	10800214 	ori	r2,r2,8
81136844:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136848:	0005303a 	rdctl	r2,status
8113684c:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136850:	e0fff417 	ldw	r3,-48(fp)
81136854:	00bfff84 	movi	r2,-2
81136858:	1884703a 	and	r2,r3,r2
8113685c:	1001703a 	wrctl	status,r2
  
  return context;
81136860:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
81136864:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81136868:	e0bffb17 	ldw	r2,-20(fp)
8113686c:	10800317 	ldw	r2,12(r2)
81136870:	10800104 	addi	r2,r2,4
81136874:	e0ffee17 	ldw	r3,-72(fp)
81136878:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113687c:	e0bffb17 	ldw	r2,-20(fp)
81136880:	10800617 	ldw	r2,24(r2)
81136884:	e0ffed17 	ldw	r3,-76(fp)
81136888:	10c00035 	stwio	r3,0(r2)
8113688c:	e0bfef17 	ldw	r2,-68(fp)
81136890:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136894:	e0bff117 	ldw	r2,-60(fp)
81136898:	1001703a 	wrctl	status,r2
8113689c:	00002306 	br	8113692c <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
811368a0:	e0bffb17 	ldw	r2,-20(fp)
811368a4:	10c00d17 	ldw	r3,52(r2)
811368a8:	e0bfee17 	ldw	r2,-72(fp)
811368ac:	1884b03a 	or	r2,r3,r2
811368b0:	10800114 	ori	r2,r2,4
811368b4:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
811368b8:	e0ffee17 	ldw	r3,-72(fp)
811368bc:	00bff3c4 	movi	r2,-49
811368c0:	1884703a 	and	r2,r3,r2
811368c4:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
811368c8:	e0ffed17 	ldw	r3,-76(fp)
811368cc:	00bffdc4 	movi	r2,-9
811368d0:	1884703a 	and	r2,r3,r2
811368d4:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811368d8:	0005303a 	rdctl	r2,status
811368dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811368e0:	e0fff517 	ldw	r3,-44(fp)
811368e4:	00bfff84 	movi	r2,-2
811368e8:	1884703a 	and	r2,r3,r2
811368ec:	1001703a 	wrctl	status,r2
  
  return context;
811368f0:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
811368f4:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811368f8:	e0bffb17 	ldw	r2,-20(fp)
811368fc:	10800317 	ldw	r2,12(r2)
81136900:	10800104 	addi	r2,r2,4
81136904:	e0ffee17 	ldw	r3,-72(fp)
81136908:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113690c:	e0bffb17 	ldw	r2,-20(fp)
81136910:	10800617 	ldw	r2,24(r2)
81136914:	e0ffed17 	ldw	r3,-76(fp)
81136918:	10c00035 	stwio	r3,0(r2)
8113691c:	e0bfef17 	ldw	r2,-68(fp)
81136920:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136924:	e0bff317 	ldw	r2,-52(fp)
81136928:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
8113692c:	e0bffb17 	ldw	r2,-20(fp)
81136930:	10800617 	ldw	r2,24(r2)
81136934:	10800104 	addi	r2,r2,4
81136938:	e0fff817 	ldw	r3,-32(fp)
8113693c:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
81136940:	e0bffb17 	ldw	r2,-20(fp)
81136944:	10800617 	ldw	r2,24(r2)
81136948:	10800204 	addi	r2,r2,8
8113694c:	e0fff917 	ldw	r3,-28(fp)
81136950:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
81136954:	e0bffe03 	ldbu	r2,-8(fp)
81136958:	10000426 	beq	r2,zero,8113696c <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
8113695c:	e0bfed17 	ldw	r2,-76(fp)
81136960:	10800414 	ori	r2,r2,16
81136964:	e0bfed15 	stw	r2,-76(fp)
81136968:	00000406 	br	8113697c <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
8113696c:	e0ffed17 	ldw	r3,-76(fp)
81136970:	00bffbc4 	movi	r2,-17
81136974:	1884703a 	and	r2,r3,r2
81136978:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
8113697c:	e0bfff03 	ldbu	r2,-4(fp)
81136980:	10000e26 	beq	r2,zero,811369bc <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
81136984:	e0bfed17 	ldw	r2,-76(fp)
81136988:	10800094 	ori	r2,r2,2
8113698c:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81136990:	e0bffb17 	ldw	r2,-20(fp)
81136994:	10800617 	ldw	r2,24(r2)
81136998:	10800304 	addi	r2,r2,12
8113699c:	10800037 	ldwio	r2,0(r2)
811369a0:	10000a1e 	bne	r2,zero,811369cc <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811369a4:	e0bffb17 	ldw	r2,-20(fp)
811369a8:	10800617 	ldw	r2,24(r2)
811369ac:	10800304 	addi	r2,r2,12
811369b0:	00c03fc4 	movi	r3,255
811369b4:	10c00035 	stwio	r3,0(r2)
811369b8:	00000406 	br	811369cc <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
811369bc:	e0ffed17 	ldw	r3,-76(fp)
811369c0:	00bfff44 	movi	r2,-3
811369c4:	1884703a 	and	r2,r3,r2
811369c8:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
811369cc:	e0bfed17 	ldw	r2,-76(fp)
811369d0:	10800054 	ori	r2,r2,1
811369d4:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811369d8:	e0bffb17 	ldw	r2,-20(fp)
811369dc:	10800617 	ldw	r2,24(r2)
811369e0:	e0ffed17 	ldw	r3,-76(fp)
811369e4:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
811369e8:	e0bffb17 	ldw	r2,-20(fp)
811369ec:	10801817 	ldw	r2,96(r2)
811369f0:	1009883a 	mov	r4,r2
811369f4:	112ae8c0 	call	8112ae8c <OSSemPost>
	 
	 return 0;
811369f8:	0005883a 	mov	r2,zero
}
811369fc:	e037883a 	mov	sp,fp
81136a00:	dfc00117 	ldw	ra,4(sp)
81136a04:	df000017 	ldw	fp,0(sp)
81136a08:	dec00204 	addi	sp,sp,8
81136a0c:	f800283a 	ret

81136a10 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81136a10:	defff704 	addi	sp,sp,-36
81136a14:	de00012e 	bgeu	sp,et,81136a1c <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
81136a18:	003b68fa 	trap	3
81136a1c:	dfc00815 	stw	ra,32(sp)
81136a20:	df000715 	stw	fp,28(sp)
81136a24:	dc400615 	stw	r17,24(sp)
81136a28:	dc000515 	stw	r16,20(sp)
81136a2c:	df000704 	addi	fp,sp,28
81136a30:	e13ffa15 	stw	r4,-24(fp)
81136a34:	e17ffb15 	stw	r5,-20(fp)
81136a38:	3007883a 	mov	r3,r6
81136a3c:	3805883a 	mov	r2,r7
81136a40:	e0fffc05 	stb	r3,-16(fp)
81136a44:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
81136a48:	e13ffb17 	ldw	r4,-20(fp)
81136a4c:	113657c0 	call	8113657c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
81136a50:	10000226 	beq	r2,zero,81136a5c <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
81136a54:	00bffa84 	movi	r2,-22
81136a58:	00000b06 	br	81136a88 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
81136a5c:	e0bffb17 	ldw	r2,-20(fp)
81136a60:	1021883a 	mov	r16,r2
81136a64:	0023883a 	mov	r17,zero
81136a68:	e0fffc03 	ldbu	r3,-16(fp)
81136a6c:	e0bffd03 	ldbu	r2,-12(fp)
81136a70:	d8800015 	stw	r2,0(sp)
81136a74:	180f883a 	mov	r7,r3
81136a78:	800b883a 	mov	r5,r16
81136a7c:	880d883a 	mov	r6,r17
81136a80:	e13ffa17 	ldw	r4,-24(fp)
81136a84:	11366f80 	call	811366f8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81136a88:	e6fffe04 	addi	sp,fp,-8
81136a8c:	dfc00317 	ldw	ra,12(sp)
81136a90:	df000217 	ldw	fp,8(sp)
81136a94:	dc400117 	ldw	r17,4(sp)
81136a98:	dc000017 	ldw	r16,0(sp)
81136a9c:	dec00404 	addi	sp,sp,16
81136aa0:	f800283a 	ret

81136aa4 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81136aa4:	defff704 	addi	sp,sp,-36
81136aa8:	de00012e 	bgeu	sp,et,81136ab0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
81136aac:	003b68fa 	trap	3
81136ab0:	dfc00815 	stw	ra,32(sp)
81136ab4:	df000715 	stw	fp,28(sp)
81136ab8:	dc400615 	stw	r17,24(sp)
81136abc:	dc000515 	stw	r16,20(sp)
81136ac0:	df000704 	addi	fp,sp,28
81136ac4:	e13ffa15 	stw	r4,-24(fp)
81136ac8:	e17ffb15 	stw	r5,-20(fp)
81136acc:	3007883a 	mov	r3,r6
81136ad0:	3805883a 	mov	r2,r7
81136ad4:	e0fffc05 	stb	r3,-16(fp)
81136ad8:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81136adc:	e13ffb17 	ldw	r4,-20(fp)
81136ae0:	113661c0 	call	8113661c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81136ae4:	10000226 	beq	r2,zero,81136af0 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
81136ae8:	00bffa84 	movi	r2,-22
81136aec:	00000b06 	br	81136b1c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81136af0:	e0bffb17 	ldw	r2,-20(fp)
81136af4:	1021883a 	mov	r16,r2
81136af8:	0023883a 	mov	r17,zero
81136afc:	e0fffc03 	ldbu	r3,-16(fp)
81136b00:	e0bffd03 	ldbu	r2,-12(fp)
81136b04:	d8800015 	stw	r2,0(sp)
81136b08:	180f883a 	mov	r7,r3
81136b0c:	800b883a 	mov	r5,r16
81136b10:	880d883a 	mov	r6,r17
81136b14:	e13ffa17 	ldw	r4,-24(fp)
81136b18:	11366f80 	call	811366f8 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81136b1c:	e6fffe04 	addi	sp,fp,-8
81136b20:	dfc00317 	ldw	ra,12(sp)
81136b24:	df000217 	ldw	fp,8(sp)
81136b28:	dc400117 	ldw	r17,4(sp)
81136b2c:	dc000017 	ldw	r16,0(sp)
81136b30:	dec00404 	addi	sp,sp,16
81136b34:	f800283a 	ret

81136b38 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81136b38:	defffc04 	addi	sp,sp,-16
81136b3c:	de00012e 	bgeu	sp,et,81136b44 <alt_msgdma_open+0xc>
81136b40:	003b68fa 	trap	3
81136b44:	dfc00315 	stw	ra,12(sp)
81136b48:	df000215 	stw	fp,8(sp)
81136b4c:	df000204 	addi	fp,sp,8
81136b50:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81136b54:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81136b58:	d1603b04 	addi	r5,gp,-32532
81136b5c:	e13fff17 	ldw	r4,-4(fp)
81136b60:	113730c0 	call	8113730c <alt_find_dev>
81136b64:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
81136b68:	e0bffe17 	ldw	r2,-8(fp)
81136b6c:	1000041e 	bne	r2,zero,81136b80 <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
81136b70:	1134d9c0 	call	81134d9c <alt_get_errno>
81136b74:	1007883a 	mov	r3,r2
81136b78:	008004c4 	movi	r2,19
81136b7c:	18800015 	stw	r2,0(r3)
    }

    return dev;
81136b80:	e0bffe17 	ldw	r2,-8(fp)
}
81136b84:	e037883a 	mov	sp,fp
81136b88:	dfc00117 	ldw	ra,4(sp)
81136b8c:	df000017 	ldw	fp,0(sp)
81136b90:	dec00204 	addi	sp,sp,8
81136b94:	f800283a 	ret

81136b98 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81136b98:	defff604 	addi	sp,sp,-40
81136b9c:	de00012e 	bgeu	sp,et,81136ba4 <alt_msgdma_init+0xc>
81136ba0:	003b68fa 	trap	3
81136ba4:	dfc00915 	stw	ra,36(sp)
81136ba8:	df000815 	stw	fp,32(sp)
81136bac:	df000804 	addi	fp,sp,32
81136bb0:	e13ffd15 	stw	r4,-12(fp)
81136bb4:	e17ffe15 	stw	r5,-8(fp)
81136bb8:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
81136bbc:	e0bffd17 	ldw	r2,-12(fp)
81136bc0:	10801783 	ldbu	r2,94(r2)
81136bc4:	10803fcc 	andi	r2,r2,255
81136bc8:	10000b26 	beq	r2,zero,81136bf8 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81136bcc:	e0bffd17 	ldw	r2,-12(fp)
81136bd0:	10800617 	ldw	r2,24(r2)
81136bd4:	00c00104 	movi	r3,4
81136bd8:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81136bdc:	0001883a 	nop
81136be0:	e0bffd17 	ldw	r2,-12(fp)
81136be4:	10800617 	ldw	r2,24(r2)
81136be8:	10800037 	ldwio	r2,0(r2)
81136bec:	1080010c 	andi	r2,r2,4
81136bf0:	1005d0ba 	srai	r2,r2,2
81136bf4:	103ffa1e 	bne	r2,zero,81136be0 <__reset+0xfb116be0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81136bf8:	e0bffd17 	ldw	r2,-12(fp)
81136bfc:	10800317 	ldw	r2,12(r2)
81136c00:	10800104 	addi	r2,r2,4
81136c04:	00c00084 	movi	r3,2
81136c08:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81136c0c:	0001883a 	nop
81136c10:	e0bffd17 	ldw	r2,-12(fp)
81136c14:	10800317 	ldw	r2,12(r2)
81136c18:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81136c1c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81136c20:	103ffb1e 	bne	r2,zero,81136c10 <__reset+0xfb116c10>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81136c24:	e0bffd17 	ldw	r2,-12(fp)
81136c28:	10800317 	ldw	r2,12(r2)
81136c2c:	10800104 	addi	r2,r2,4
81136c30:	10800037 	ldwio	r2,0(r2)
81136c34:	1007883a 	mov	r3,r2
81136c38:	00bffbc4 	movi	r2,-17
81136c3c:	1884703a 	and	r2,r3,r2
81136c40:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81136c44:	e0bff917 	ldw	r2,-28(fp)
81136c48:	10800814 	ori	r2,r2,32
81136c4c:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81136c50:	e0bffd17 	ldw	r2,-12(fp)
81136c54:	10800317 	ldw	r2,12(r2)
81136c58:	10800104 	addi	r2,r2,4
81136c5c:	e0fff917 	ldw	r3,-28(fp)
81136c60:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81136c64:	e0bffd17 	ldw	r2,-12(fp)
81136c68:	10800317 	ldw	r2,12(r2)
81136c6c:	e0fffd17 	ldw	r3,-12(fp)
81136c70:	18c00317 	ldw	r3,12(r3)
81136c74:	18c00037 	ldwio	r3,0(r3)
81136c78:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
81136c7c:	e0bffd17 	ldw	r2,-12(fp)
81136c80:	10801783 	ldbu	r2,94(r2)
81136c84:	10803fcc 	andi	r2,r2,255
81136c88:	10000826 	beq	r2,zero,81136cac <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
81136c8c:	e0bffd17 	ldw	r2,-12(fp)
81136c90:	10800617 	ldw	r2,24(r2)
81136c94:	10800404 	addi	r2,r2,16
81136c98:	e0fffd17 	ldw	r3,-12(fp)
81136c9c:	18c00617 	ldw	r3,24(r3)
81136ca0:	18c00404 	addi	r3,r3,16
81136ca4:	18c00037 	ldwio	r3,0(r3)
81136ca8:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
81136cac:	d1603b04 	addi	r5,gp,-32532
81136cb0:	e13ffd17 	ldw	r4,-12(fp)
81136cb4:	11371900 	call	81137190 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
81136cb8:	e0bffd17 	ldw	r2,-12(fp)
81136cbc:	10801804 	addi	r2,r2,96
81136cc0:	e0bffb15 	stw	r2,-20(fp)
81136cc4:	00800044 	movi	r2,1
81136cc8:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81136ccc:	e0bffc0b 	ldhu	r2,-16(fp)
81136cd0:	1009883a 	mov	r4,r2
81136cd4:	112a7dc0 	call	8112a7dc <OSSemCreate>
81136cd8:	1007883a 	mov	r3,r2
81136cdc:	e0bffb17 	ldw	r2,-20(fp)
81136ce0:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81136ce4:	e0bffb17 	ldw	r2,-20(fp)
81136ce8:	10800017 	ldw	r2,0(r2)
81136cec:	10000226 	beq	r2,zero,81136cf8 <alt_msgdma_init+0x160>
81136cf0:	0005883a 	mov	r2,zero
81136cf4:	00000106 	br	81136cfc <alt_msgdma_init+0x164>
81136cf8:	00bfffc4 	movi	r2,-1
81136cfc:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
81136d00:	e0bffa17 	ldw	r2,-24(fp)
81136d04:	1000081e 	bne	r2,zero,81136d28 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81136d08:	d8000015 	stw	zero,0(sp)
81136d0c:	e1fffd17 	ldw	r7,-12(fp)
81136d10:	01a044f4 	movhi	r6,33043
81136d14:	3193ec04 	addi	r6,r6,20400
81136d18:	e17fff17 	ldw	r5,-4(fp)
81136d1c:	e13ffe17 	ldw	r4,-8(fp)
81136d20:	11375980 	call	81137598 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81136d24:	00000406 	br	81136d38 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81136d28:	01204534 	movhi	r4,33044
81136d2c:	212cb204 	addi	r4,r4,-19768
81136d30:	11379b00 	call	811379b0 <alt_printf>
    }
    
    return;
81136d34:	0001883a 	nop

}
81136d38:	e037883a 	mov	sp,fp
81136d3c:	dfc00117 	ldw	ra,4(sp)
81136d40:	df000017 	ldw	fp,0(sp)
81136d44:	dec00204 	addi	sp,sp,8
81136d48:	f800283a 	ret

81136d4c <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81136d4c:	defffb04 	addi	sp,sp,-20
81136d50:	de00012e 	bgeu	sp,et,81136d58 <alt_msgdma_register_callback+0xc>
81136d54:	003b68fa 	trap	3
81136d58:	df000415 	stw	fp,16(sp)
81136d5c:	df000404 	addi	fp,sp,16
81136d60:	e13ffc15 	stw	r4,-16(fp)
81136d64:	e17ffd15 	stw	r5,-12(fp)
81136d68:	e1bffe15 	stw	r6,-8(fp)
81136d6c:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
81136d70:	e0bffc17 	ldw	r2,-16(fp)
81136d74:	e0fffd17 	ldw	r3,-12(fp)
81136d78:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
81136d7c:	e0bffc17 	ldw	r2,-16(fp)
81136d80:	e0ffff17 	ldw	r3,-4(fp)
81136d84:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
81136d88:	e0bffc17 	ldw	r2,-16(fp)
81136d8c:	e0fffe17 	ldw	r3,-8(fp)
81136d90:	10c00d15 	stw	r3,52(r2)

    return ;
81136d94:	0001883a 	nop
}
81136d98:	e037883a 	mov	sp,fp
81136d9c:	df000017 	ldw	fp,0(sp)
81136da0:	dec00104 	addi	sp,sp,4
81136da4:	f800283a 	ret

81136da8 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81136da8:	defffc04 	addi	sp,sp,-16
81136dac:	de00012e 	bgeu	sp,et,81136db4 <alt_msgdma_standard_descriptor_async_transfer+0xc>
81136db0:	003b68fa 	trap	3
81136db4:	dfc00315 	stw	ra,12(sp)
81136db8:	df000215 	stw	fp,8(sp)
81136dbc:	df000204 	addi	fp,sp,8
81136dc0:	e13ffe15 	stw	r4,-8(fp)
81136dc4:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
81136dc8:	000d883a 	mov	r6,zero
81136dcc:	e17fff17 	ldw	r5,-4(fp)
81136dd0:	e13ffe17 	ldw	r4,-8(fp)
81136dd4:	113532c0 	call	8113532c <alt_msgdma_descriptor_async_transfer>

}
81136dd8:	e037883a 	mov	sp,fp
81136ddc:	dfc00117 	ldw	ra,4(sp)
81136de0:	df000017 	ldw	fp,0(sp)
81136de4:	dec00204 	addi	sp,sp,8
81136de8:	f800283a 	ret

81136dec <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81136dec:	defffc04 	addi	sp,sp,-16
81136df0:	de00012e 	bgeu	sp,et,81136df8 <alt_msgdma_extended_descriptor_async_transfer+0xc>
81136df4:	003b68fa 	trap	3
81136df8:	dfc00315 	stw	ra,12(sp)
81136dfc:	df000215 	stw	fp,8(sp)
81136e00:	df000204 	addi	fp,sp,8
81136e04:	e13ffe15 	stw	r4,-8(fp)
81136e08:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81136e0c:	e1bfff17 	ldw	r6,-4(fp)
81136e10:	000b883a 	mov	r5,zero
81136e14:	e13ffe17 	ldw	r4,-8(fp)
81136e18:	113532c0 	call	8113532c <alt_msgdma_descriptor_async_transfer>
}
81136e1c:	e037883a 	mov	sp,fp
81136e20:	dfc00117 	ldw	ra,4(sp)
81136e24:	df000017 	ldw	fp,0(sp)
81136e28:	dec00204 	addi	sp,sp,8
81136e2c:	f800283a 	ret

81136e30 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81136e30:	defffc04 	addi	sp,sp,-16
81136e34:	de00012e 	bgeu	sp,et,81136e3c <alt_msgdma_standard_descriptor_sync_transfer+0xc>
81136e38:	003b68fa 	trap	3
81136e3c:	dfc00315 	stw	ra,12(sp)
81136e40:	df000215 	stw	fp,8(sp)
81136e44:	df000204 	addi	fp,sp,8
81136e48:	e13ffe15 	stw	r4,-8(fp)
81136e4c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81136e50:	000d883a 	mov	r6,zero
81136e54:	e17fff17 	ldw	r5,-4(fp)
81136e58:	e13ffe17 	ldw	r4,-8(fp)
81136e5c:	113566c0 	call	8113566c <alt_msgdma_descriptor_sync_transfer>
}
81136e60:	e037883a 	mov	sp,fp
81136e64:	dfc00117 	ldw	ra,4(sp)
81136e68:	df000017 	ldw	fp,0(sp)
81136e6c:	dec00204 	addi	sp,sp,8
81136e70:	f800283a 	ret

81136e74 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81136e74:	defffc04 	addi	sp,sp,-16
81136e78:	de00012e 	bgeu	sp,et,81136e80 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
81136e7c:	003b68fa 	trap	3
81136e80:	dfc00315 	stw	ra,12(sp)
81136e84:	df000215 	stw	fp,8(sp)
81136e88:	df000204 	addi	fp,sp,8
81136e8c:	e13ffe15 	stw	r4,-8(fp)
81136e90:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81136e94:	e1bfff17 	ldw	r6,-4(fp)
81136e98:	000b883a 	mov	r5,zero
81136e9c:	e13ffe17 	ldw	r4,-8(fp)
81136ea0:	113566c0 	call	8113566c <alt_msgdma_descriptor_sync_transfer>
}
81136ea4:	e037883a 	mov	sp,fp
81136ea8:	dfc00117 	ldw	ra,4(sp)
81136eac:	df000017 	ldw	fp,0(sp)
81136eb0:	dec00204 	addi	sp,sp,8
81136eb4:	f800283a 	ret

81136eb8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81136eb8:	defff504 	addi	sp,sp,-44
81136ebc:	de00012e 	bgeu	sp,et,81136ec4 <alt_alarm_start+0xc>
81136ec0:	003b68fa 	trap	3
81136ec4:	df000a15 	stw	fp,40(sp)
81136ec8:	df000a04 	addi	fp,sp,40
81136ecc:	e13ffc15 	stw	r4,-16(fp)
81136ed0:	e17ffd15 	stw	r5,-12(fp)
81136ed4:	e1bffe15 	stw	r6,-8(fp)
81136ed8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81136edc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81136ee0:	d0a07617 	ldw	r2,-32296(gp)
  
  if (alt_ticks_per_second ())
81136ee4:	10003c26 	beq	r2,zero,81136fd8 <alt_alarm_start+0x120>
  {
    if (alarm)
81136ee8:	e0bffc17 	ldw	r2,-16(fp)
81136eec:	10003826 	beq	r2,zero,81136fd0 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
81136ef0:	e0bffc17 	ldw	r2,-16(fp)
81136ef4:	e0fffe17 	ldw	r3,-8(fp)
81136ef8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81136efc:	e0bffc17 	ldw	r2,-16(fp)
81136f00:	e0ffff17 	ldw	r3,-4(fp)
81136f04:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136f08:	0005303a 	rdctl	r2,status
81136f0c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136f10:	e0fff917 	ldw	r3,-28(fp)
81136f14:	00bfff84 	movi	r2,-2
81136f18:	1884703a 	and	r2,r3,r2
81136f1c:	1001703a 	wrctl	status,r2
  
  return context;
81136f20:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81136f24:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81136f28:	d0a07717 	ldw	r2,-32292(gp)
      
      current_nticks = alt_nticks();
81136f2c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81136f30:	e0fffd17 	ldw	r3,-12(fp)
81136f34:	e0bff617 	ldw	r2,-40(fp)
81136f38:	1885883a 	add	r2,r3,r2
81136f3c:	10c00044 	addi	r3,r2,1
81136f40:	e0bffc17 	ldw	r2,-16(fp)
81136f44:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81136f48:	e0bffc17 	ldw	r2,-16(fp)
81136f4c:	10c00217 	ldw	r3,8(r2)
81136f50:	e0bff617 	ldw	r2,-40(fp)
81136f54:	1880042e 	bgeu	r3,r2,81136f68 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
81136f58:	e0bffc17 	ldw	r2,-16(fp)
81136f5c:	00c00044 	movi	r3,1
81136f60:	10c00405 	stb	r3,16(r2)
81136f64:	00000206 	br	81136f70 <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
81136f68:	e0bffc17 	ldw	r2,-16(fp)
81136f6c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81136f70:	e0bffc17 	ldw	r2,-16(fp)
81136f74:	d0e01804 	addi	r3,gp,-32672
81136f78:	e0fffa15 	stw	r3,-24(fp)
81136f7c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81136f80:	e0bffb17 	ldw	r2,-20(fp)
81136f84:	e0fffa17 	ldw	r3,-24(fp)
81136f88:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81136f8c:	e0bffa17 	ldw	r2,-24(fp)
81136f90:	10c00017 	ldw	r3,0(r2)
81136f94:	e0bffb17 	ldw	r2,-20(fp)
81136f98:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81136f9c:	e0bffa17 	ldw	r2,-24(fp)
81136fa0:	10800017 	ldw	r2,0(r2)
81136fa4:	e0fffb17 	ldw	r3,-20(fp)
81136fa8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81136fac:	e0bffa17 	ldw	r2,-24(fp)
81136fb0:	e0fffb17 	ldw	r3,-20(fp)
81136fb4:	10c00015 	stw	r3,0(r2)
81136fb8:	e0bff817 	ldw	r2,-32(fp)
81136fbc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136fc0:	e0bff717 	ldw	r2,-36(fp)
81136fc4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81136fc8:	0005883a 	mov	r2,zero
81136fcc:	00000306 	br	81136fdc <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
81136fd0:	00bffa84 	movi	r2,-22
81136fd4:	00000106 	br	81136fdc <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
81136fd8:	00bfde84 	movi	r2,-134
  }
}
81136fdc:	e037883a 	mov	sp,fp
81136fe0:	df000017 	ldw	fp,0(sp)
81136fe4:	dec00104 	addi	sp,sp,4
81136fe8:	f800283a 	ret

81136fec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81136fec:	defffb04 	addi	sp,sp,-20
81136ff0:	de00012e 	bgeu	sp,et,81136ff8 <alt_busy_sleep+0xc>
81136ff4:	003b68fa 	trap	3
81136ff8:	df000415 	stw	fp,16(sp)
81136ffc:	df000404 	addi	fp,sp,16
81137000:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81137004:	008000c4 	movi	r2,3
81137008:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
8113700c:	e0fffd17 	ldw	r3,-12(fp)
81137010:	008003f4 	movhi	r2,15
81137014:	10909004 	addi	r2,r2,16960
81137018:	1887383a 	mul	r3,r3,r2
8113701c:	00817db4 	movhi	r2,1526
81137020:	10b84004 	addi	r2,r2,-7936
81137024:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81137028:	00a00034 	movhi	r2,32768
8113702c:	10bfffc4 	addi	r2,r2,-1
81137030:	10c5203a 	divu	r2,r2,r3
81137034:	e0ffff17 	ldw	r3,-4(fp)
81137038:	1885203a 	divu	r2,r3,r2
8113703c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81137040:	e0bffe17 	ldw	r2,-8(fp)
81137044:	10002526 	beq	r2,zero,811370dc <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
81137048:	e03ffc15 	stw	zero,-16(fp)
8113704c:	00001406 	br	811370a0 <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81137050:	00a00034 	movhi	r2,32768
81137054:	10bfffc4 	addi	r2,r2,-1
81137058:	10bfffc4 	addi	r2,r2,-1
8113705c:	103ffe1e 	bne	r2,zero,81137058 <__reset+0xfb117058>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81137060:	e0fffd17 	ldw	r3,-12(fp)
81137064:	008003f4 	movhi	r2,15
81137068:	10909004 	addi	r2,r2,16960
8113706c:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81137070:	00817db4 	movhi	r2,1526
81137074:	10b84004 	addi	r2,r2,-7936
81137078:	10c7203a 	divu	r3,r2,r3
8113707c:	00a00034 	movhi	r2,32768
81137080:	10bfffc4 	addi	r2,r2,-1
81137084:	10c5203a 	divu	r2,r2,r3
81137088:	e0ffff17 	ldw	r3,-4(fp)
8113708c:	1885c83a 	sub	r2,r3,r2
81137090:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81137094:	e0bffc17 	ldw	r2,-16(fp)
81137098:	10800044 	addi	r2,r2,1
8113709c:	e0bffc15 	stw	r2,-16(fp)
811370a0:	e0fffc17 	ldw	r3,-16(fp)
811370a4:	e0bffe17 	ldw	r2,-8(fp)
811370a8:	18bfe916 	blt	r3,r2,81137050 <__reset+0xfb117050>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811370ac:	e0fffd17 	ldw	r3,-12(fp)
811370b0:	008003f4 	movhi	r2,15
811370b4:	10909004 	addi	r2,r2,16960
811370b8:	1887383a 	mul	r3,r3,r2
811370bc:	00817db4 	movhi	r2,1526
811370c0:	10b84004 	addi	r2,r2,-7936
811370c4:	10c7203a 	divu	r3,r2,r3
811370c8:	e0bfff17 	ldw	r2,-4(fp)
811370cc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
811370d0:	10bfffc4 	addi	r2,r2,-1
811370d4:	103ffe1e 	bne	r2,zero,811370d0 <__reset+0xfb1170d0>
811370d8:	00000b06 	br	81137108 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
811370dc:	e0fffd17 	ldw	r3,-12(fp)
811370e0:	008003f4 	movhi	r2,15
811370e4:	10909004 	addi	r2,r2,16960
811370e8:	1887383a 	mul	r3,r3,r2
811370ec:	00817db4 	movhi	r2,1526
811370f0:	10b84004 	addi	r2,r2,-7936
811370f4:	10c7203a 	divu	r3,r2,r3
811370f8:	e0bfff17 	ldw	r2,-4(fp)
811370fc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81137100:	10bfffc4 	addi	r2,r2,-1
81137104:	00bffe16 	blt	zero,r2,81137100 <__reset+0xfb117100>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81137108:	0005883a 	mov	r2,zero
}
8113710c:	e037883a 	mov	sp,fp
81137110:	df000017 	ldw	fp,0(sp)
81137114:	dec00104 	addi	sp,sp,4
81137118:	f800283a 	ret

8113711c <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
8113711c:	defffd04 	addi	sp,sp,-12
81137120:	de00012e 	bgeu	sp,et,81137128 <alt_dcache_flush+0xc>
81137124:	003b68fa 	trap	3
81137128:	df000215 	stw	fp,8(sp)
8113712c:	df000204 	addi	fp,sp,8
81137130:	e13ffe15 	stw	r4,-8(fp)
81137134:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81137138:	0001883a 	nop
8113713c:	e037883a 	mov	sp,fp
81137140:	df000017 	ldw	fp,0(sp)
81137144:	dec00104 	addi	sp,sp,4
81137148:	f800283a 	ret

8113714c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113714c:	defffe04 	addi	sp,sp,-8
81137150:	de00012e 	bgeu	sp,et,81137158 <alt_get_errno+0xc>
81137154:	003b68fa 	trap	3
81137158:	dfc00115 	stw	ra,4(sp)
8113715c:	df000015 	stw	fp,0(sp)
81137160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81137164:	d0a01617 	ldw	r2,-32680(gp)
81137168:	10000326 	beq	r2,zero,81137178 <alt_get_errno+0x2c>
8113716c:	d0a01617 	ldw	r2,-32680(gp)
81137170:	103ee83a 	callr	r2
81137174:	00000106 	br	8113717c <alt_get_errno+0x30>
81137178:	d0a06b04 	addi	r2,gp,-32340
}
8113717c:	e037883a 	mov	sp,fp
81137180:	dfc00117 	ldw	ra,4(sp)
81137184:	df000017 	ldw	fp,0(sp)
81137188:	dec00204 	addi	sp,sp,8
8113718c:	f800283a 	ret

81137190 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81137190:	defffa04 	addi	sp,sp,-24
81137194:	de00012e 	bgeu	sp,et,8113719c <alt_dev_llist_insert+0xc>
81137198:	003b68fa 	trap	3
8113719c:	dfc00515 	stw	ra,20(sp)
811371a0:	df000415 	stw	fp,16(sp)
811371a4:	df000404 	addi	fp,sp,16
811371a8:	e13ffe15 	stw	r4,-8(fp)
811371ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
811371b0:	e0bffe17 	ldw	r2,-8(fp)
811371b4:	10000326 	beq	r2,zero,811371c4 <alt_dev_llist_insert+0x34>
811371b8:	e0bffe17 	ldw	r2,-8(fp)
811371bc:	10800217 	ldw	r2,8(r2)
811371c0:	1000061e 	bne	r2,zero,811371dc <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
811371c4:	113714c0 	call	8113714c <alt_get_errno>
811371c8:	1007883a 	mov	r3,r2
811371cc:	00800584 	movi	r2,22
811371d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
811371d4:	00bffa84 	movi	r2,-22
811371d8:	00001306 	br	81137228 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
811371dc:	e0bffe17 	ldw	r2,-8(fp)
811371e0:	e0ffff17 	ldw	r3,-4(fp)
811371e4:	e0fffc15 	stw	r3,-16(fp)
811371e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811371ec:	e0bffd17 	ldw	r2,-12(fp)
811371f0:	e0fffc17 	ldw	r3,-16(fp)
811371f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
811371f8:	e0bffc17 	ldw	r2,-16(fp)
811371fc:	10c00017 	ldw	r3,0(r2)
81137200:	e0bffd17 	ldw	r2,-12(fp)
81137204:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81137208:	e0bffc17 	ldw	r2,-16(fp)
8113720c:	10800017 	ldw	r2,0(r2)
81137210:	e0fffd17 	ldw	r3,-12(fp)
81137214:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81137218:	e0bffc17 	ldw	r2,-16(fp)
8113721c:	e0fffd17 	ldw	r3,-12(fp)
81137220:	10c00015 	stw	r3,0(r2)

  return 0;  
81137224:	0005883a 	mov	r2,zero
}
81137228:	e037883a 	mov	sp,fp
8113722c:	dfc00117 	ldw	ra,4(sp)
81137230:	df000017 	ldw	fp,0(sp)
81137234:	dec00204 	addi	sp,sp,8
81137238:	f800283a 	ret

8113723c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113723c:	defffd04 	addi	sp,sp,-12
81137240:	de00012e 	bgeu	sp,et,81137248 <_do_ctors+0xc>
81137244:	003b68fa 	trap	3
81137248:	dfc00215 	stw	ra,8(sp)
8113724c:	df000115 	stw	fp,4(sp)
81137250:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81137254:	00a04534 	movhi	r2,33044
81137258:	10a12404 	addi	r2,r2,-31600
8113725c:	e0bfff15 	stw	r2,-4(fp)
81137260:	00000606 	br	8113727c <_do_ctors+0x40>
        (*ctor) (); 
81137264:	e0bfff17 	ldw	r2,-4(fp)
81137268:	10800017 	ldw	r2,0(r2)
8113726c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81137270:	e0bfff17 	ldw	r2,-4(fp)
81137274:	10bfff04 	addi	r2,r2,-4
81137278:	e0bfff15 	stw	r2,-4(fp)
8113727c:	e0ffff17 	ldw	r3,-4(fp)
81137280:	00a04534 	movhi	r2,33044
81137284:	10a12504 	addi	r2,r2,-31596
81137288:	18bff62e 	bgeu	r3,r2,81137264 <__reset+0xfb117264>
        (*ctor) (); 
}
8113728c:	0001883a 	nop
81137290:	e037883a 	mov	sp,fp
81137294:	dfc00117 	ldw	ra,4(sp)
81137298:	df000017 	ldw	fp,0(sp)
8113729c:	dec00204 	addi	sp,sp,8
811372a0:	f800283a 	ret

811372a4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
811372a4:	defffd04 	addi	sp,sp,-12
811372a8:	de00012e 	bgeu	sp,et,811372b0 <_do_dtors+0xc>
811372ac:	003b68fa 	trap	3
811372b0:	dfc00215 	stw	ra,8(sp)
811372b4:	df000115 	stw	fp,4(sp)
811372b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811372bc:	00a04534 	movhi	r2,33044
811372c0:	10a12404 	addi	r2,r2,-31600
811372c4:	e0bfff15 	stw	r2,-4(fp)
811372c8:	00000606 	br	811372e4 <_do_dtors+0x40>
        (*dtor) (); 
811372cc:	e0bfff17 	ldw	r2,-4(fp)
811372d0:	10800017 	ldw	r2,0(r2)
811372d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811372d8:	e0bfff17 	ldw	r2,-4(fp)
811372dc:	10bfff04 	addi	r2,r2,-4
811372e0:	e0bfff15 	stw	r2,-4(fp)
811372e4:	e0ffff17 	ldw	r3,-4(fp)
811372e8:	00a04534 	movhi	r2,33044
811372ec:	10a12504 	addi	r2,r2,-31596
811372f0:	18bff62e 	bgeu	r3,r2,811372cc <__reset+0xfb1172cc>
        (*dtor) (); 
}
811372f4:	0001883a 	nop
811372f8:	e037883a 	mov	sp,fp
811372fc:	dfc00117 	ldw	ra,4(sp)
81137300:	df000017 	ldw	fp,0(sp)
81137304:	dec00204 	addi	sp,sp,8
81137308:	f800283a 	ret

8113730c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113730c:	defffa04 	addi	sp,sp,-24
81137310:	de00012e 	bgeu	sp,et,81137318 <alt_find_dev+0xc>
81137314:	003b68fa 	trap	3
81137318:	dfc00515 	stw	ra,20(sp)
8113731c:	df000415 	stw	fp,16(sp)
81137320:	df000404 	addi	fp,sp,16
81137324:	e13ffe15 	stw	r4,-8(fp)
81137328:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
8113732c:	e0bfff17 	ldw	r2,-4(fp)
81137330:	10800017 	ldw	r2,0(r2)
81137334:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81137338:	e13ffe17 	ldw	r4,-8(fp)
8113733c:	110f27c0 	call	8110f27c <strlen>
81137340:	10800044 	addi	r2,r2,1
81137344:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81137348:	00000d06 	br	81137380 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
8113734c:	e0bffc17 	ldw	r2,-16(fp)
81137350:	10800217 	ldw	r2,8(r2)
81137354:	e0fffd17 	ldw	r3,-12(fp)
81137358:	180d883a 	mov	r6,r3
8113735c:	e17ffe17 	ldw	r5,-8(fp)
81137360:	1009883a 	mov	r4,r2
81137364:	11381340 	call	81138134 <memcmp>
81137368:	1000021e 	bne	r2,zero,81137374 <alt_find_dev+0x68>
    {
      /* match found */

      return next;
8113736c:	e0bffc17 	ldw	r2,-16(fp)
81137370:	00000706 	br	81137390 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
81137374:	e0bffc17 	ldw	r2,-16(fp)
81137378:	10800017 	ldw	r2,0(r2)
8113737c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81137380:	e0fffc17 	ldw	r3,-16(fp)
81137384:	e0bfff17 	ldw	r2,-4(fp)
81137388:	18bff01e 	bne	r3,r2,8113734c <__reset+0xfb11734c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
8113738c:	0005883a 	mov	r2,zero
}
81137390:	e037883a 	mov	sp,fp
81137394:	dfc00117 	ldw	ra,4(sp)
81137398:	df000017 	ldw	fp,0(sp)
8113739c:	dec00204 	addi	sp,sp,8
811373a0:	f800283a 	ret

811373a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
811373a4:	defffb04 	addi	sp,sp,-20
811373a8:	de00012e 	bgeu	sp,et,811373b0 <alt_find_file+0xc>
811373ac:	003b68fa 	trap	3
811373b0:	dfc00415 	stw	ra,16(sp)
811373b4:	df000315 	stw	fp,12(sp)
811373b8:	df000304 	addi	fp,sp,12
811373bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
811373c0:	d0a01117 	ldw	r2,-32700(gp)
811373c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
811373c8:	00003106 	br	81137490 <alt_find_file+0xec>
  {
    len = strlen(next->name);
811373cc:	e0bffd17 	ldw	r2,-12(fp)
811373d0:	10800217 	ldw	r2,8(r2)
811373d4:	1009883a 	mov	r4,r2
811373d8:	110f27c0 	call	8110f27c <strlen>
811373dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
811373e0:	e0bffd17 	ldw	r2,-12(fp)
811373e4:	10c00217 	ldw	r3,8(r2)
811373e8:	e0bffe17 	ldw	r2,-8(fp)
811373ec:	10bfffc4 	addi	r2,r2,-1
811373f0:	1885883a 	add	r2,r3,r2
811373f4:	10800003 	ldbu	r2,0(r2)
811373f8:	10803fcc 	andi	r2,r2,255
811373fc:	1080201c 	xori	r2,r2,128
81137400:	10bfe004 	addi	r2,r2,-128
81137404:	10800bd8 	cmpnei	r2,r2,47
81137408:	1000031e 	bne	r2,zero,81137418 <alt_find_file+0x74>
    {
      len -= 1;
8113740c:	e0bffe17 	ldw	r2,-8(fp)
81137410:	10bfffc4 	addi	r2,r2,-1
81137414:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81137418:	e0bffe17 	ldw	r2,-8(fp)
8113741c:	e0ffff17 	ldw	r3,-4(fp)
81137420:	1885883a 	add	r2,r3,r2
81137424:	10800003 	ldbu	r2,0(r2)
81137428:	10803fcc 	andi	r2,r2,255
8113742c:	1080201c 	xori	r2,r2,128
81137430:	10bfe004 	addi	r2,r2,-128
81137434:	10800be0 	cmpeqi	r2,r2,47
81137438:	1000081e 	bne	r2,zero,8113745c <alt_find_file+0xb8>
8113743c:	e0bffe17 	ldw	r2,-8(fp)
81137440:	e0ffff17 	ldw	r3,-4(fp)
81137444:	1885883a 	add	r2,r3,r2
81137448:	10800003 	ldbu	r2,0(r2)
8113744c:	10803fcc 	andi	r2,r2,255
81137450:	1080201c 	xori	r2,r2,128
81137454:	10bfe004 	addi	r2,r2,-128
81137458:	10000a1e 	bne	r2,zero,81137484 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
8113745c:	e0bffd17 	ldw	r2,-12(fp)
81137460:	10800217 	ldw	r2,8(r2)
81137464:	e0fffe17 	ldw	r3,-8(fp)
81137468:	180d883a 	mov	r6,r3
8113746c:	e17fff17 	ldw	r5,-4(fp)
81137470:	1009883a 	mov	r4,r2
81137474:	11381340 	call	81138134 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81137478:	1000021e 	bne	r2,zero,81137484 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113747c:	e0bffd17 	ldw	r2,-12(fp)
81137480:	00000706 	br	811374a0 <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
81137484:	e0bffd17 	ldw	r2,-12(fp)
81137488:	10800017 	ldw	r2,0(r2)
8113748c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81137490:	e0fffd17 	ldw	r3,-12(fp)
81137494:	d0a01104 	addi	r2,gp,-32700
81137498:	18bfcc1e 	bne	r3,r2,811373cc <__reset+0xfb1173cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113749c:	0005883a 	mov	r2,zero
}
811374a0:	e037883a 	mov	sp,fp
811374a4:	dfc00117 	ldw	ra,4(sp)
811374a8:	df000017 	ldw	fp,0(sp)
811374ac:	dec00204 	addi	sp,sp,8
811374b0:	f800283a 	ret

811374b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
811374b4:	defff904 	addi	sp,sp,-28
811374b8:	de00012e 	bgeu	sp,et,811374c0 <alt_get_fd+0xc>
811374bc:	003b68fa 	trap	3
811374c0:	dfc00615 	stw	ra,24(sp)
811374c4:	df000515 	stw	fp,20(sp)
811374c8:	df000504 	addi	fp,sp,20
811374cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
811374d0:	00bffa04 	movi	r2,-24
811374d4:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
811374d8:	d0a07217 	ldw	r2,-32312(gp)
811374dc:	e0bffd15 	stw	r2,-12(fp)
811374e0:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811374e4:	e0bffe0b 	ldhu	r2,-8(fp)
811374e8:	e0fffe84 	addi	r3,fp,-6
811374ec:	180d883a 	mov	r6,r3
811374f0:	100b883a 	mov	r5,r2
811374f4:	e13ffd17 	ldw	r4,-12(fp)
811374f8:	112ab040 	call	8112ab04 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
811374fc:	e03ffb15 	stw	zero,-20(fp)
81137500:	00001906 	br	81137568 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
81137504:	00a04534 	movhi	r2,33044
81137508:	10aeee04 	addi	r2,r2,-17480
8113750c:	e0fffb17 	ldw	r3,-20(fp)
81137510:	18c00324 	muli	r3,r3,12
81137514:	10c5883a 	add	r2,r2,r3
81137518:	10800017 	ldw	r2,0(r2)
8113751c:	10000f1e 	bne	r2,zero,8113755c <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
81137520:	00a04534 	movhi	r2,33044
81137524:	10aeee04 	addi	r2,r2,-17480
81137528:	e0fffb17 	ldw	r3,-20(fp)
8113752c:	18c00324 	muli	r3,r3,12
81137530:	10c5883a 	add	r2,r2,r3
81137534:	e0ffff17 	ldw	r3,-4(fp)
81137538:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
8113753c:	d0e01517 	ldw	r3,-32684(gp)
81137540:	e0bffb17 	ldw	r2,-20(fp)
81137544:	1880020e 	bge	r3,r2,81137550 <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
81137548:	e0bffb17 	ldw	r2,-20(fp)
8113754c:	d0a01515 	stw	r2,-32684(gp)
      }
      rc = i;
81137550:	e0bffb17 	ldw	r2,-20(fp)
81137554:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
81137558:	00000606 	br	81137574 <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
8113755c:	e0bffb17 	ldw	r2,-20(fp)
81137560:	10800044 	addi	r2,r2,1
81137564:	e0bffb15 	stw	r2,-20(fp)
81137568:	e0bffb17 	ldw	r2,-20(fp)
8113756c:	10800810 	cmplti	r2,r2,32
81137570:	103fe41e 	bne	r2,zero,81137504 <__reset+0xfb117504>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
81137574:	d0a07217 	ldw	r2,-32312(gp)
81137578:	1009883a 	mov	r4,r2
8113757c:	112ae8c0 	call	8112ae8c <OSSemPost>

  return rc;
81137580:	e0bffc17 	ldw	r2,-16(fp)
}
81137584:	e037883a 	mov	sp,fp
81137588:	dfc00117 	ldw	ra,4(sp)
8113758c:	df000017 	ldw	fp,0(sp)
81137590:	dec00204 	addi	sp,sp,8
81137594:	f800283a 	ret

81137598 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81137598:	defff904 	addi	sp,sp,-28
8113759c:	de00012e 	bgeu	sp,et,811375a4 <alt_ic_isr_register+0xc>
811375a0:	003b68fa 	trap	3
811375a4:	dfc00615 	stw	ra,24(sp)
811375a8:	df000515 	stw	fp,20(sp)
811375ac:	df000504 	addi	fp,sp,20
811375b0:	e13ffc15 	stw	r4,-16(fp)
811375b4:	e17ffd15 	stw	r5,-12(fp)
811375b8:	e1bffe15 	stw	r6,-8(fp)
811375bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
811375c0:	e0800217 	ldw	r2,8(fp)
811375c4:	d8800015 	stw	r2,0(sp)
811375c8:	e1ffff17 	ldw	r7,-4(fp)
811375cc:	e1bffe17 	ldw	r6,-8(fp)
811375d0:	e17ffd17 	ldw	r5,-12(fp)
811375d4:	e13ffc17 	ldw	r4,-16(fp)
811375d8:	11377680 	call	81137768 <alt_iic_isr_register>
}  
811375dc:	e037883a 	mov	sp,fp
811375e0:	dfc00117 	ldw	ra,4(sp)
811375e4:	df000017 	ldw	fp,0(sp)
811375e8:	dec00204 	addi	sp,sp,8
811375ec:	f800283a 	ret

811375f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
811375f0:	defff904 	addi	sp,sp,-28
811375f4:	de00012e 	bgeu	sp,et,811375fc <alt_ic_irq_enable+0xc>
811375f8:	003b68fa 	trap	3
811375fc:	df000615 	stw	fp,24(sp)
81137600:	df000604 	addi	fp,sp,24
81137604:	e13ffe15 	stw	r4,-8(fp)
81137608:	e17fff15 	stw	r5,-4(fp)
8113760c:	e0bfff17 	ldw	r2,-4(fp)
81137610:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137614:	0005303a 	rdctl	r2,status
81137618:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113761c:	e0fffb17 	ldw	r3,-20(fp)
81137620:	00bfff84 	movi	r2,-2
81137624:	1884703a 	and	r2,r3,r2
81137628:	1001703a 	wrctl	status,r2
  
  return context;
8113762c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81137630:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81137634:	00c00044 	movi	r3,1
81137638:	e0bffa17 	ldw	r2,-24(fp)
8113763c:	1884983a 	sll	r2,r3,r2
81137640:	1007883a 	mov	r3,r2
81137644:	d0a0a417 	ldw	r2,-32112(gp)
81137648:	1884b03a 	or	r2,r3,r2
8113764c:	d0a0a415 	stw	r2,-32112(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81137650:	d0a0a417 	ldw	r2,-32112(gp)
81137654:	100170fa 	wrctl	ienable,r2
81137658:	e0bffc17 	ldw	r2,-16(fp)
8113765c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137660:	e0bffd17 	ldw	r2,-12(fp)
81137664:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81137668:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
8113766c:	0001883a 	nop
}
81137670:	e037883a 	mov	sp,fp
81137674:	df000017 	ldw	fp,0(sp)
81137678:	dec00104 	addi	sp,sp,4
8113767c:	f800283a 	ret

81137680 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
81137680:	defff904 	addi	sp,sp,-28
81137684:	de00012e 	bgeu	sp,et,8113768c <alt_ic_irq_disable+0xc>
81137688:	003b68fa 	trap	3
8113768c:	df000615 	stw	fp,24(sp)
81137690:	df000604 	addi	fp,sp,24
81137694:	e13ffe15 	stw	r4,-8(fp)
81137698:	e17fff15 	stw	r5,-4(fp)
8113769c:	e0bfff17 	ldw	r2,-4(fp)
811376a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811376a4:	0005303a 	rdctl	r2,status
811376a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811376ac:	e0fffb17 	ldw	r3,-20(fp)
811376b0:	00bfff84 	movi	r2,-2
811376b4:	1884703a 	and	r2,r3,r2
811376b8:	1001703a 	wrctl	status,r2
  
  return context;
811376bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811376c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
811376c4:	00c00044 	movi	r3,1
811376c8:	e0bffa17 	ldw	r2,-24(fp)
811376cc:	1884983a 	sll	r2,r3,r2
811376d0:	0084303a 	nor	r2,zero,r2
811376d4:	1007883a 	mov	r3,r2
811376d8:	d0a0a417 	ldw	r2,-32112(gp)
811376dc:	1884703a 	and	r2,r3,r2
811376e0:	d0a0a415 	stw	r2,-32112(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811376e4:	d0a0a417 	ldw	r2,-32112(gp)
811376e8:	100170fa 	wrctl	ienable,r2
811376ec:	e0bffc17 	ldw	r2,-16(fp)
811376f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811376f4:	e0bffd17 	ldw	r2,-12(fp)
811376f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811376fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
81137700:	0001883a 	nop
}
81137704:	e037883a 	mov	sp,fp
81137708:	df000017 	ldw	fp,0(sp)
8113770c:	dec00104 	addi	sp,sp,4
81137710:	f800283a 	ret

81137714 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
81137714:	defffc04 	addi	sp,sp,-16
81137718:	de00012e 	bgeu	sp,et,81137720 <alt_ic_irq_enabled+0xc>
8113771c:	003b68fa 	trap	3
81137720:	df000315 	stw	fp,12(sp)
81137724:	df000304 	addi	fp,sp,12
81137728:	e13ffe15 	stw	r4,-8(fp)
8113772c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
81137730:	000530fa 	rdctl	r2,ienable
81137734:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81137738:	00c00044 	movi	r3,1
8113773c:	e0bfff17 	ldw	r2,-4(fp)
81137740:	1884983a 	sll	r2,r3,r2
81137744:	1007883a 	mov	r3,r2
81137748:	e0bffd17 	ldw	r2,-12(fp)
8113774c:	1884703a 	and	r2,r3,r2
81137750:	1004c03a 	cmpne	r2,r2,zero
81137754:	10803fcc 	andi	r2,r2,255
}
81137758:	e037883a 	mov	sp,fp
8113775c:	df000017 	ldw	fp,0(sp)
81137760:	dec00104 	addi	sp,sp,4
81137764:	f800283a 	ret

81137768 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81137768:	defff504 	addi	sp,sp,-44
8113776c:	de00012e 	bgeu	sp,et,81137774 <alt_iic_isr_register+0xc>
81137770:	003b68fa 	trap	3
81137774:	dfc00a15 	stw	ra,40(sp)
81137778:	df000915 	stw	fp,36(sp)
8113777c:	df000904 	addi	fp,sp,36
81137780:	e13ffc15 	stw	r4,-16(fp)
81137784:	e17ffd15 	stw	r5,-12(fp)
81137788:	e1bffe15 	stw	r6,-8(fp)
8113778c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81137790:	00bffa84 	movi	r2,-22
81137794:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
81137798:	e0bffd17 	ldw	r2,-12(fp)
8113779c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
811377a0:	e0bff817 	ldw	r2,-32(fp)
811377a4:	10800808 	cmpgei	r2,r2,32
811377a8:	1000271e 	bne	r2,zero,81137848 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811377ac:	0005303a 	rdctl	r2,status
811377b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811377b4:	e0fffb17 	ldw	r3,-20(fp)
811377b8:	00bfff84 	movi	r2,-2
811377bc:	1884703a 	and	r2,r3,r2
811377c0:	1001703a 	wrctl	status,r2
  
  return context;
811377c4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
811377c8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
811377cc:	00a045b4 	movhi	r2,33046
811377d0:	1091d104 	addi	r2,r2,18244
811377d4:	e0fff817 	ldw	r3,-32(fp)
811377d8:	180690fa 	slli	r3,r3,3
811377dc:	10c5883a 	add	r2,r2,r3
811377e0:	e0fffe17 	ldw	r3,-8(fp)
811377e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
811377e8:	00a045b4 	movhi	r2,33046
811377ec:	1091d104 	addi	r2,r2,18244
811377f0:	e0fff817 	ldw	r3,-32(fp)
811377f4:	180690fa 	slli	r3,r3,3
811377f8:	10c5883a 	add	r2,r2,r3
811377fc:	10800104 	addi	r2,r2,4
81137800:	e0ffff17 	ldw	r3,-4(fp)
81137804:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
81137808:	e0bffe17 	ldw	r2,-8(fp)
8113780c:	10000526 	beq	r2,zero,81137824 <alt_iic_isr_register+0xbc>
81137810:	e0bff817 	ldw	r2,-32(fp)
81137814:	100b883a 	mov	r5,r2
81137818:	e13ffc17 	ldw	r4,-16(fp)
8113781c:	11375f00 	call	811375f0 <alt_ic_irq_enable>
81137820:	00000406 	br	81137834 <alt_iic_isr_register+0xcc>
81137824:	e0bff817 	ldw	r2,-32(fp)
81137828:	100b883a 	mov	r5,r2
8113782c:	e13ffc17 	ldw	r4,-16(fp)
81137830:	11376800 	call	81137680 <alt_ic_irq_disable>
81137834:	e0bff715 	stw	r2,-36(fp)
81137838:	e0bffa17 	ldw	r2,-24(fp)
8113783c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137840:	e0bff917 	ldw	r2,-28(fp)
81137844:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
81137848:	e0bff717 	ldw	r2,-36(fp)
}
8113784c:	e037883a 	mov	sp,fp
81137850:	dfc00117 	ldw	ra,4(sp)
81137854:	df000017 	ldw	fp,0(sp)
81137858:	dec00204 	addi	sp,sp,8
8113785c:	f800283a 	ret

81137860 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
81137860:	defff904 	addi	sp,sp,-28
81137864:	de00012e 	bgeu	sp,et,8113786c <alt_open_fd+0xc>
81137868:	003b68fa 	trap	3
8113786c:	dfc00615 	stw	ra,24(sp)
81137870:	df000515 	stw	fp,20(sp)
81137874:	df000504 	addi	fp,sp,20
81137878:	e13ffc15 	stw	r4,-16(fp)
8113787c:	e17ffd15 	stw	r5,-12(fp)
81137880:	e1bffe15 	stw	r6,-8(fp)
81137884:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81137888:	e1bfff17 	ldw	r6,-4(fp)
8113788c:	e17ffe17 	ldw	r5,-8(fp)
81137890:	e13ffd17 	ldw	r4,-12(fp)
81137894:	11236c80 	call	811236c8 <open>
81137898:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
8113789c:	e0bffb17 	ldw	r2,-20(fp)
811378a0:	10001c16 	blt	r2,zero,81137914 <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
811378a4:	00a04534 	movhi	r2,33044
811378a8:	10aeee04 	addi	r2,r2,-17480
811378ac:	e0fffb17 	ldw	r3,-20(fp)
811378b0:	18c00324 	muli	r3,r3,12
811378b4:	10c5883a 	add	r2,r2,r3
811378b8:	10c00017 	ldw	r3,0(r2)
811378bc:	e0bffc17 	ldw	r2,-16(fp)
811378c0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
811378c4:	00a04534 	movhi	r2,33044
811378c8:	10aeee04 	addi	r2,r2,-17480
811378cc:	e0fffb17 	ldw	r3,-20(fp)
811378d0:	18c00324 	muli	r3,r3,12
811378d4:	10c5883a 	add	r2,r2,r3
811378d8:	10800104 	addi	r2,r2,4
811378dc:	10c00017 	ldw	r3,0(r2)
811378e0:	e0bffc17 	ldw	r2,-16(fp)
811378e4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
811378e8:	00a04534 	movhi	r2,33044
811378ec:	10aeee04 	addi	r2,r2,-17480
811378f0:	e0fffb17 	ldw	r3,-20(fp)
811378f4:	18c00324 	muli	r3,r3,12
811378f8:	10c5883a 	add	r2,r2,r3
811378fc:	10800204 	addi	r2,r2,8
81137900:	10c00017 	ldw	r3,0(r2)
81137904:	e0bffc17 	ldw	r2,-16(fp)
81137908:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
8113790c:	e13ffb17 	ldw	r4,-20(fp)
81137910:	112396c0 	call	8112396c <alt_release_fd>
  }
} 
81137914:	0001883a 	nop
81137918:	e037883a 	mov	sp,fp
8113791c:	dfc00117 	ldw	ra,4(sp)
81137920:	df000017 	ldw	fp,0(sp)
81137924:	dec00204 	addi	sp,sp,8
81137928:	f800283a 	ret

8113792c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
8113792c:	defffb04 	addi	sp,sp,-20
81137930:	de00012e 	bgeu	sp,et,81137938 <alt_io_redirect+0xc>
81137934:	003b68fa 	trap	3
81137938:	dfc00415 	stw	ra,16(sp)
8113793c:	df000315 	stw	fp,12(sp)
81137940:	df000304 	addi	fp,sp,12
81137944:	e13ffd15 	stw	r4,-12(fp)
81137948:	e17ffe15 	stw	r5,-8(fp)
8113794c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
81137950:	01c07fc4 	movi	r7,511
81137954:	01800044 	movi	r6,1
81137958:	e17ffd17 	ldw	r5,-12(fp)
8113795c:	01204534 	movhi	r4,33044
81137960:	212ef104 	addi	r4,r4,-17468
81137964:	11378600 	call	81137860 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
81137968:	01c07fc4 	movi	r7,511
8113796c:	000d883a 	mov	r6,zero
81137970:	e17ffe17 	ldw	r5,-8(fp)
81137974:	01204534 	movhi	r4,33044
81137978:	212eee04 	addi	r4,r4,-17480
8113797c:	11378600 	call	81137860 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81137980:	01c07fc4 	movi	r7,511
81137984:	01800044 	movi	r6,1
81137988:	e17fff17 	ldw	r5,-4(fp)
8113798c:	01204534 	movhi	r4,33044
81137990:	212ef404 	addi	r4,r4,-17456
81137994:	11378600 	call	81137860 <alt_open_fd>
}  
81137998:	0001883a 	nop
8113799c:	e037883a 	mov	sp,fp
811379a0:	dfc00117 	ldw	ra,4(sp)
811379a4:	df000017 	ldw	fp,0(sp)
811379a8:	dec00204 	addi	sp,sp,8
811379ac:	f800283a 	ret

811379b0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
811379b0:	defff204 	addi	sp,sp,-56
811379b4:	de00012e 	bgeu	sp,et,811379bc <alt_printf+0xc>
811379b8:	003b68fa 	trap	3
811379bc:	dfc00a15 	stw	ra,40(sp)
811379c0:	df000915 	stw	fp,36(sp)
811379c4:	df000904 	addi	fp,sp,36
811379c8:	e13fff15 	stw	r4,-4(fp)
811379cc:	e1400215 	stw	r5,8(fp)
811379d0:	e1800315 	stw	r6,12(fp)
811379d4:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
811379d8:	e0800204 	addi	r2,fp,8
811379dc:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
811379e0:	e0bfff17 	ldw	r2,-4(fp)
811379e4:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
811379e8:	00006f06 	br	81137ba8 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
811379ec:	e0bff807 	ldb	r2,-32(fp)
811379f0:	10800960 	cmpeqi	r2,r2,37
811379f4:	1000041e 	bne	r2,zero,81137a08 <alt_printf+0x58>
        {
            alt_putchar(c);
811379f8:	e0bff807 	ldb	r2,-32(fp)
811379fc:	1009883a 	mov	r4,r2
81137a00:	1137be40 	call	81137be4 <alt_putchar>
81137a04:	00006806 	br	81137ba8 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81137a08:	e0bff717 	ldw	r2,-36(fp)
81137a0c:	10c00044 	addi	r3,r2,1
81137a10:	e0fff715 	stw	r3,-36(fp)
81137a14:	10800003 	ldbu	r2,0(r2)
81137a18:	e0bff805 	stb	r2,-32(fp)
81137a1c:	e0bff807 	ldb	r2,-32(fp)
81137a20:	10006926 	beq	r2,zero,81137bc8 <alt_printf+0x218>
            {
                if (c == '%')
81137a24:	e0bff807 	ldb	r2,-32(fp)
81137a28:	10800958 	cmpnei	r2,r2,37
81137a2c:	1000041e 	bne	r2,zero,81137a40 <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
81137a30:	e0bff807 	ldb	r2,-32(fp)
81137a34:	1009883a 	mov	r4,r2
81137a38:	1137be40 	call	81137be4 <alt_putchar>
81137a3c:	00005a06 	br	81137ba8 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
81137a40:	e0bff807 	ldb	r2,-32(fp)
81137a44:	108018d8 	cmpnei	r2,r2,99
81137a48:	1000081e 	bne	r2,zero,81137a6c <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
81137a4c:	e0bffe17 	ldw	r2,-8(fp)
81137a50:	10c00104 	addi	r3,r2,4
81137a54:	e0fffe15 	stw	r3,-8(fp)
81137a58:	10800017 	ldw	r2,0(r2)
81137a5c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81137a60:	e13ffd17 	ldw	r4,-12(fp)
81137a64:	1137be40 	call	81137be4 <alt_putchar>
81137a68:	00004f06 	br	81137ba8 <alt_printf+0x1f8>
                }
                else if (c == 'x')
81137a6c:	e0bff807 	ldb	r2,-32(fp)
81137a70:	10801e18 	cmpnei	r2,r2,120
81137a74:	1000341e 	bne	r2,zero,81137b48 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81137a78:	e0bffe17 	ldw	r2,-8(fp)
81137a7c:	10c00104 	addi	r3,r2,4
81137a80:	e0fffe15 	stw	r3,-8(fp)
81137a84:	10800017 	ldw	r2,0(r2)
81137a88:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81137a8c:	e0bffb17 	ldw	r2,-20(fp)
81137a90:	1000031e 	bne	r2,zero,81137aa0 <alt_printf+0xf0>
                    {
                        alt_putchar('0');
81137a94:	01000c04 	movi	r4,48
81137a98:	1137be40 	call	81137be4 <alt_putchar>
                        continue;
81137a9c:	00004206 	br	81137ba8 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81137aa0:	00800704 	movi	r2,28
81137aa4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81137aa8:	00000306 	br	81137ab8 <alt_printf+0x108>
                        digit_shift -= 4;
81137aac:	e0bff917 	ldw	r2,-28(fp)
81137ab0:	10bfff04 	addi	r2,r2,-4
81137ab4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81137ab8:	00c003c4 	movi	r3,15
81137abc:	e0bff917 	ldw	r2,-28(fp)
81137ac0:	1884983a 	sll	r2,r3,r2
81137ac4:	1007883a 	mov	r3,r2
81137ac8:	e0bffb17 	ldw	r2,-20(fp)
81137acc:	1884703a 	and	r2,r3,r2
81137ad0:	103ff626 	beq	r2,zero,81137aac <__reset+0xfb117aac>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81137ad4:	00001906 	br	81137b3c <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81137ad8:	00c003c4 	movi	r3,15
81137adc:	e0bff917 	ldw	r2,-28(fp)
81137ae0:	1884983a 	sll	r2,r3,r2
81137ae4:	1007883a 	mov	r3,r2
81137ae8:	e0bffb17 	ldw	r2,-20(fp)
81137aec:	1886703a 	and	r3,r3,r2
81137af0:	e0bff917 	ldw	r2,-28(fp)
81137af4:	1884d83a 	srl	r2,r3,r2
81137af8:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
81137afc:	e0bffc17 	ldw	r2,-16(fp)
81137b00:	108002a8 	cmpgeui	r2,r2,10
81137b04:	1000041e 	bne	r2,zero,81137b18 <alt_printf+0x168>
                            c = '0' + digit;
81137b08:	e0bffc17 	ldw	r2,-16(fp)
81137b0c:	10800c04 	addi	r2,r2,48
81137b10:	e0bff805 	stb	r2,-32(fp)
81137b14:	00000306 	br	81137b24 <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
81137b18:	e0bffc17 	ldw	r2,-16(fp)
81137b1c:	108015c4 	addi	r2,r2,87
81137b20:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
81137b24:	e0bff807 	ldb	r2,-32(fp)
81137b28:	1009883a 	mov	r4,r2
81137b2c:	1137be40 	call	81137be4 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81137b30:	e0bff917 	ldw	r2,-28(fp)
81137b34:	10bfff04 	addi	r2,r2,-4
81137b38:	e0bff915 	stw	r2,-28(fp)
81137b3c:	e0bff917 	ldw	r2,-28(fp)
81137b40:	103fe50e 	bge	r2,zero,81137ad8 <__reset+0xfb117ad8>
81137b44:	00001806 	br	81137ba8 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81137b48:	e0bff807 	ldb	r2,-32(fp)
81137b4c:	10801cd8 	cmpnei	r2,r2,115
81137b50:	1000151e 	bne	r2,zero,81137ba8 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
81137b54:	e0bffe17 	ldw	r2,-8(fp)
81137b58:	10c00104 	addi	r3,r2,4
81137b5c:	e0fffe15 	stw	r3,-8(fp)
81137b60:	10800017 	ldw	r2,0(r2)
81137b64:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81137b68:	00000906 	br	81137b90 <alt_printf+0x1e0>
                      alt_putchar(*s++);
81137b6c:	e0bffa17 	ldw	r2,-24(fp)
81137b70:	10c00044 	addi	r3,r2,1
81137b74:	e0fffa15 	stw	r3,-24(fp)
81137b78:	10800003 	ldbu	r2,0(r2)
81137b7c:	10803fcc 	andi	r2,r2,255
81137b80:	1080201c 	xori	r2,r2,128
81137b84:	10bfe004 	addi	r2,r2,-128
81137b88:	1009883a 	mov	r4,r2
81137b8c:	1137be40 	call	81137be4 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81137b90:	e0bffa17 	ldw	r2,-24(fp)
81137b94:	10800003 	ldbu	r2,0(r2)
81137b98:	10803fcc 	andi	r2,r2,255
81137b9c:	1080201c 	xori	r2,r2,128
81137ba0:	10bfe004 	addi	r2,r2,-128
81137ba4:	103ff11e 	bne	r2,zero,81137b6c <__reset+0xfb117b6c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81137ba8:	e0bff717 	ldw	r2,-36(fp)
81137bac:	10c00044 	addi	r3,r2,1
81137bb0:	e0fff715 	stw	r3,-36(fp)
81137bb4:	10800003 	ldbu	r2,0(r2)
81137bb8:	e0bff805 	stb	r2,-32(fp)
81137bbc:	e0bff807 	ldb	r2,-32(fp)
81137bc0:	103f8a1e 	bne	r2,zero,811379ec <__reset+0xfb1179ec>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81137bc4:	00000106 	br	81137bcc <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81137bc8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81137bcc:	0001883a 	nop
81137bd0:	e037883a 	mov	sp,fp
81137bd4:	dfc00117 	ldw	ra,4(sp)
81137bd8:	df000017 	ldw	fp,0(sp)
81137bdc:	dec00504 	addi	sp,sp,20
81137be0:	f800283a 	ret

81137be4 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81137be4:	defffd04 	addi	sp,sp,-12
81137be8:	de00012e 	bgeu	sp,et,81137bf0 <alt_putchar+0xc>
81137bec:	003b68fa 	trap	3
81137bf0:	dfc00215 	stw	ra,8(sp)
81137bf4:	df000115 	stw	fp,4(sp)
81137bf8:	df000104 	addi	fp,sp,4
81137bfc:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81137c00:	d0a00b17 	ldw	r2,-32724(gp)
81137c04:	10800217 	ldw	r2,8(r2)
81137c08:	100b883a 	mov	r5,r2
81137c0c:	e13fff17 	ldw	r4,-4(fp)
81137c10:	11199180 	call	81119918 <putc>
#endif
#endif
}
81137c14:	e037883a 	mov	sp,fp
81137c18:	dfc00117 	ldw	ra,4(sp)
81137c1c:	df000017 	ldw	fp,0(sp)
81137c20:	dec00204 	addi	sp,sp,8
81137c24:	f800283a 	ret

81137c28 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81137c28:	deffff04 	addi	sp,sp,-4
81137c2c:	de00012e 	bgeu	sp,et,81137c34 <altera_nios2_gen2_irq_init+0xc>
81137c30:	003b68fa 	trap	3
81137c34:	df000015 	stw	fp,0(sp)
81137c38:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
81137c3c:	000170fa 	wrctl	ienable,zero
}
81137c40:	0001883a 	nop
81137c44:	e037883a 	mov	sp,fp
81137c48:	df000017 	ldw	fp,0(sp)
81137c4c:	dec00104 	addi	sp,sp,4
81137c50:	f800283a 	ret

81137c54 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
81137c54:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
81137c58:	de002436 	bltu	sp,et,81137cec <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
81137c5c:	d0e00b17 	ldw	r3,-32724(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
81137c60:	d1209017 	ldw	r4,-32192(gp)

      stw ra,  0(sp)
81137c64:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
81137c68:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
81137c6c:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
81137c70:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
81137c74:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
81137c78:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
81137c7c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
81137c80:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
81137c84:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
81137c88:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
81137c8c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
81137c90:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
81137c94:	1137ef00 	call	81137ef0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
81137c98:	d1208a17 	ldw	r4,-32216(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
81137c9c:	d1608187 	ldb	r5,-32250(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
81137ca0:	d1209015 	stw	r4,-32192(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
81137ca4:	d16081c5 	stb	r5,-32249(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
81137ca8:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
81137cac:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
81137cb0:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
81137cb4:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
81137cb8:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
81137cbc:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
81137cc0:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
81137cc4:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
81137cc8:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
81137ccc:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
81137cd0:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
81137cd4:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
81137cd8:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
81137cdc:	d0e00b15 	stw	r3,-32724(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
81137ce0:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
81137ce4:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
81137ce8:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
81137cec:	003da0fa 	break	3

81137cf0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
81137cf0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
81137cf4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
81137cf8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
81137cfc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
81137d00:	1137ef00 	call	81137ef0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
81137d04:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
81137d08:	d4a07f05 	stb	r18,-32260(gp)

      /*
       * start execution of the new task.
       */

      br 9b
81137d0c:	003fe206 	br	81137c98 <__reset+0xfb117c98>

81137d10 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
81137d10:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
81137d14:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
81137d18:	10800054 	ori	r2,r2,1
      wrctl status, r2
81137d1c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
81137d20:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
81137d24:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
81137d28:	dec00204 	addi	sp,sp,8

      callr r2
81137d2c:	103ee83a 	callr	r2

      nop
81137d30:	0001883a 	nop

81137d34 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
81137d34:	defff704 	addi	sp,sp,-36
81137d38:	de00012e 	bgeu	sp,et,81137d40 <OSTaskStkInit+0xc>
81137d3c:	003b68fa 	trap	3
81137d40:	dfc00815 	stw	ra,32(sp)
81137d44:	df000715 	stw	fp,28(sp)
81137d48:	df000704 	addi	fp,sp,28
81137d4c:	e13ffc15 	stw	r4,-16(fp)
81137d50:	e17ffd15 	stw	r5,-12(fp)
81137d54:	e1bffe15 	stw	r6,-8(fp)
81137d58:	3805883a 	mov	r2,r7
81137d5c:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
81137d60:	e0fffe17 	ldw	r3,-8(fp)
81137d64:	00bfff04 	movi	r2,-4
81137d68:	1884703a 	and	r2,r3,r2
81137d6c:	10bef704 	addi	r2,r2,-1060
81137d70:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
81137d74:	01810904 	movi	r6,1060
81137d78:	000b883a 	mov	r5,zero
81137d7c:	e13ff917 	ldw	r4,-28(fp)
81137d80:	110ea300 	call	8110ea30 <memset>
81137d84:	e0bff917 	ldw	r2,-28(fp)
81137d88:	10c0bb04 	addi	r3,r2,748
81137d8c:	e0bff917 	ldw	r2,-28(fp)
81137d90:	10c00115 	stw	r3,4(r2)
81137d94:	e0bff917 	ldw	r2,-28(fp)
81137d98:	10c0d504 	addi	r3,r2,852
81137d9c:	e0bff917 	ldw	r2,-28(fp)
81137da0:	10c00215 	stw	r3,8(r2)
81137da4:	e0bff917 	ldw	r2,-28(fp)
81137da8:	10c0ef04 	addi	r3,r2,956
81137dac:	e0bff917 	ldw	r2,-28(fp)
81137db0:	10c00315 	stw	r3,12(r2)
81137db4:	e0fff917 	ldw	r3,-28(fp)
81137db8:	00a04534 	movhi	r2,33044
81137dbc:	10acba04 	addi	r2,r2,-19736
81137dc0:	18800d15 	stw	r2,52(r3)
81137dc4:	e0bff917 	ldw	r2,-28(fp)
81137dc8:	00c00044 	movi	r3,1
81137dcc:	10c02915 	stw	r3,164(r2)
81137dd0:	10002a15 	stw	zero,168(r2)
81137dd4:	e0bff917 	ldw	r2,-28(fp)
81137dd8:	00ccc384 	movi	r3,13070
81137ddc:	10c02b0d 	sth	r3,172(r2)
81137de0:	e0bff917 	ldw	r2,-28(fp)
81137de4:	00eaf344 	movi	r3,-21555
81137de8:	10c02b8d 	sth	r3,174(r2)
81137dec:	e0bff917 	ldw	r2,-28(fp)
81137df0:	00c48d04 	movi	r3,4660
81137df4:	10c02c0d 	sth	r3,176(r2)
81137df8:	e0bff917 	ldw	r2,-28(fp)
81137dfc:	00f99b44 	movi	r3,-6547
81137e00:	10c02c8d 	sth	r3,178(r2)
81137e04:	e0bff917 	ldw	r2,-28(fp)
81137e08:	00f7bb04 	movi	r3,-8468
81137e0c:	10c02d0d 	sth	r3,180(r2)
81137e10:	e0bff917 	ldw	r2,-28(fp)
81137e14:	00c00144 	movi	r3,5
81137e18:	10c02d8d 	sth	r3,182(r2)
81137e1c:	e0bff917 	ldw	r2,-28(fp)
81137e20:	00c002c4 	movi	r3,11
81137e24:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
81137e28:	e0bff917 	ldw	r2,-28(fp)
81137e2c:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
81137e30:	e0bffa17 	ldw	r2,-24(fp)
81137e34:	10bff304 	addi	r2,r2,-52
81137e38:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
81137e3c:	e0bffb17 	ldw	r2,-20(fp)
81137e40:	10800c04 	addi	r2,r2,48
81137e44:	e0fffc17 	ldw	r3,-16(fp)
81137e48:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
81137e4c:	e0bffb17 	ldw	r2,-20(fp)
81137e50:	10800b04 	addi	r2,r2,44
81137e54:	e0fffd17 	ldw	r3,-12(fp)
81137e58:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
81137e5c:	e0bffb17 	ldw	r2,-20(fp)
81137e60:	10800a04 	addi	r2,r2,40
81137e64:	e0fff917 	ldw	r3,-28(fp)
81137e68:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
81137e6c:	00a044f4 	movhi	r2,33043
81137e70:	109f4404 	addi	r2,r2,32016
81137e74:	10c00104 	addi	r3,r2,4
81137e78:	e0bffb17 	ldw	r2,-20(fp)
81137e7c:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
81137e80:	e0bffb17 	ldw	r2,-20(fp)
}
81137e84:	e037883a 	mov	sp,fp
81137e88:	dfc00117 	ldw	ra,4(sp)
81137e8c:	df000017 	ldw	fp,0(sp)
81137e90:	dec00204 	addi	sp,sp,8
81137e94:	f800283a 	ret

81137e98 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
81137e98:	defffe04 	addi	sp,sp,-8
81137e9c:	de00012e 	bgeu	sp,et,81137ea4 <OSTaskCreateHook+0xc>
81137ea0:	003b68fa 	trap	3
81137ea4:	df000115 	stw	fp,4(sp)
81137ea8:	df000104 	addi	fp,sp,4
81137eac:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
81137eb0:	0001883a 	nop
81137eb4:	e037883a 	mov	sp,fp
81137eb8:	df000017 	ldw	fp,0(sp)
81137ebc:	dec00104 	addi	sp,sp,4
81137ec0:	f800283a 	ret

81137ec4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
81137ec4:	defffe04 	addi	sp,sp,-8
81137ec8:	de00012e 	bgeu	sp,et,81137ed0 <OSTaskDelHook+0xc>
81137ecc:	003b68fa 	trap	3
81137ed0:	df000115 	stw	fp,4(sp)
81137ed4:	df000104 	addi	fp,sp,4
81137ed8:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
81137edc:	0001883a 	nop
81137ee0:	e037883a 	mov	sp,fp
81137ee4:	df000017 	ldw	fp,0(sp)
81137ee8:	dec00104 	addi	sp,sp,4
81137eec:	f800283a 	ret

81137ef0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
81137ef0:	deffff04 	addi	sp,sp,-4
81137ef4:	de00012e 	bgeu	sp,et,81137efc <OSTaskSwHook+0xc>
81137ef8:	003b68fa 	trap	3
81137efc:	df000015 	stw	fp,0(sp)
81137f00:	d839883a 	mov	fp,sp
}
81137f04:	0001883a 	nop
81137f08:	e037883a 	mov	sp,fp
81137f0c:	df000017 	ldw	fp,0(sp)
81137f10:	dec00104 	addi	sp,sp,4
81137f14:	f800283a 	ret

81137f18 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
81137f18:	deffff04 	addi	sp,sp,-4
81137f1c:	de00012e 	bgeu	sp,et,81137f24 <OSTaskStatHook+0xc>
81137f20:	003b68fa 	trap	3
81137f24:	df000015 	stw	fp,0(sp)
81137f28:	d839883a 	mov	fp,sp
}
81137f2c:	0001883a 	nop
81137f30:	e037883a 	mov	sp,fp
81137f34:	df000017 	ldw	fp,0(sp)
81137f38:	dec00104 	addi	sp,sp,4
81137f3c:	f800283a 	ret

81137f40 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
81137f40:	defffe04 	addi	sp,sp,-8
81137f44:	de00012e 	bgeu	sp,et,81137f4c <OSTimeTickHook+0xc>
81137f48:	003b68fa 	trap	3
81137f4c:	dfc00115 	stw	ra,4(sp)
81137f50:	df000015 	stw	fp,0(sp)
81137f54:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
81137f58:	d0a0a50b 	ldhu	r2,-32108(gp)
81137f5c:	10800044 	addi	r2,r2,1
81137f60:	d0a0a50d 	sth	r2,-32108(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
81137f64:	d0a0a50b 	ldhu	r2,-32108(gp)
81137f68:	10bfffcc 	andi	r2,r2,65535
81137f6c:	10803230 	cmpltui	r2,r2,200
81137f70:	1000021e 	bne	r2,zero,81137f7c <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
81137f74:	d020a50d 	sth	zero,-32108(gp)
        OSTmrSignal();
81137f78:	112d8c00 	call	8112d8c0 <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
81137f7c:	0001883a 	nop
81137f80:	e037883a 	mov	sp,fp
81137f84:	dfc00117 	ldw	ra,4(sp)
81137f88:	df000017 	ldw	fp,0(sp)
81137f8c:	dec00204 	addi	sp,sp,8
81137f90:	f800283a 	ret

81137f94 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
81137f94:	deffff04 	addi	sp,sp,-4
81137f98:	de00012e 	bgeu	sp,et,81137fa0 <OSInitHookBegin+0xc>
81137f9c:	003b68fa 	trap	3
81137fa0:	df000015 	stw	fp,0(sp)
81137fa4:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
81137fa8:	d020a50d 	sth	zero,-32108(gp)
#endif
}
81137fac:	0001883a 	nop
81137fb0:	e037883a 	mov	sp,fp
81137fb4:	df000017 	ldw	fp,0(sp)
81137fb8:	dec00104 	addi	sp,sp,4
81137fbc:	f800283a 	ret

81137fc0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
81137fc0:	deffff04 	addi	sp,sp,-4
81137fc4:	de00012e 	bgeu	sp,et,81137fcc <OSInitHookEnd+0xc>
81137fc8:	003b68fa 	trap	3
81137fcc:	df000015 	stw	fp,0(sp)
81137fd0:	d839883a 	mov	fp,sp
}
81137fd4:	0001883a 	nop
81137fd8:	e037883a 	mov	sp,fp
81137fdc:	df000017 	ldw	fp,0(sp)
81137fe0:	dec00104 	addi	sp,sp,4
81137fe4:	f800283a 	ret

81137fe8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
81137fe8:	deffff04 	addi	sp,sp,-4
81137fec:	de00012e 	bgeu	sp,et,81137ff4 <OSTaskIdleHook+0xc>
81137ff0:	003b68fa 	trap	3
81137ff4:	df000015 	stw	fp,0(sp)
81137ff8:	d839883a 	mov	fp,sp
}
81137ffc:	0001883a 	nop
81138000:	e037883a 	mov	sp,fp
81138004:	df000017 	ldw	fp,0(sp)
81138008:	dec00104 	addi	sp,sp,4
8113800c:	f800283a 	ret

81138010 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
81138010:	defffe04 	addi	sp,sp,-8
81138014:	de00012e 	bgeu	sp,et,8113801c <OSTCBInitHook+0xc>
81138018:	003b68fa 	trap	3
8113801c:	df000115 	stw	fp,4(sp)
81138020:	df000104 	addi	fp,sp,4
81138024:	e13fff15 	stw	r4,-4(fp)
}
81138028:	0001883a 	nop
8113802c:	e037883a 	mov	sp,fp
81138030:	df000017 	ldw	fp,0(sp)
81138034:	dec00104 	addi	sp,sp,4
81138038:	f800283a 	ret

8113803c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
8113803c:	defffe04 	addi	sp,sp,-8
81138040:	de00012e 	bgeu	sp,et,81138048 <alt_exception_cause_generated_bad_addr+0xc>
81138044:	003b68fa 	trap	3
81138048:	df000115 	stw	fp,4(sp)
8113804c:	df000104 	addi	fp,sp,4
81138050:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81138054:	e0bfff17 	ldw	r2,-4(fp)
81138058:	10bffe84 	addi	r2,r2,-6
8113805c:	10c00428 	cmpgeui	r3,r2,16
81138060:	18001a1e 	bne	r3,zero,811380cc <alt_exception_cause_generated_bad_addr+0x90>
81138064:	100690ba 	slli	r3,r2,2
81138068:	00a04534 	movhi	r2,33044
8113806c:	10a01f04 	addi	r2,r2,-32644
81138070:	1885883a 	add	r2,r3,r2
81138074:	10800017 	ldw	r2,0(r2)
81138078:	1000683a 	jmp	r2
8113807c:	811380bc 	xorhi	r4,r16,19970
81138080:	811380bc 	xorhi	r4,r16,19970
81138084:	811380cc 	andi	r4,r16,19971
81138088:	811380cc 	andi	r4,r16,19971
8113808c:	811380cc 	andi	r4,r16,19971
81138090:	811380bc 	xorhi	r4,r16,19970
81138094:	811380c4 	addi	r4,r16,19971
81138098:	811380cc 	andi	r4,r16,19971
8113809c:	811380bc 	xorhi	r4,r16,19970
811380a0:	811380bc 	xorhi	r4,r16,19970
811380a4:	811380cc 	andi	r4,r16,19971
811380a8:	811380bc 	xorhi	r4,r16,19970
811380ac:	811380c4 	addi	r4,r16,19971
811380b0:	811380cc 	andi	r4,r16,19971
811380b4:	811380cc 	andi	r4,r16,19971
811380b8:	811380bc 	xorhi	r4,r16,19970
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
811380bc:	00800044 	movi	r2,1
811380c0:	00000306 	br	811380d0 <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
811380c4:	0005883a 	mov	r2,zero
811380c8:	00000106 	br	811380d0 <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
811380cc:	0005883a 	mov	r2,zero
  }
}
811380d0:	e037883a 	mov	sp,fp
811380d4:	df000017 	ldw	fp,0(sp)
811380d8:	dec00104 	addi	sp,sp,4
811380dc:	f800283a 	ret

811380e0 <atexit>:
811380e0:	200b883a 	mov	r5,r4
811380e4:	000f883a 	mov	r7,zero
811380e8:	000d883a 	mov	r6,zero
811380ec:	0009883a 	mov	r4,zero
811380f0:	11381b01 	jmpi	811381b0 <__register_exitproc>

811380f4 <exit>:
811380f4:	defffe04 	addi	sp,sp,-8
811380f8:	000b883a 	mov	r5,zero
811380fc:	de00012e 	bgeu	sp,et,81138104 <exit+0x10>
81138100:	003b68fa 	trap	3
81138104:	dc000015 	stw	r16,0(sp)
81138108:	dfc00115 	stw	ra,4(sp)
8113810c:	2021883a 	mov	r16,r4
81138110:	11382d00 	call	811382d0 <__call_exitprocs>
81138114:	00a04534 	movhi	r2,33044
81138118:	10b3e304 	addi	r2,r2,-12404
8113811c:	11000017 	ldw	r4,0(r2)
81138120:	20800f17 	ldw	r2,60(r4)
81138124:	10000126 	beq	r2,zero,8113812c <exit+0x38>
81138128:	103ee83a 	callr	r2
8113812c:	8009883a 	mov	r4,r16
81138130:	11384580 	call	81138458 <_exit>

81138134 <memcmp>:
81138134:	01c000c4 	movi	r7,3
81138138:	3980192e 	bgeu	r7,r6,811381a0 <memcmp+0x6c>
8113813c:	2144b03a 	or	r2,r4,r5
81138140:	11c4703a 	and	r2,r2,r7
81138144:	10000f26 	beq	r2,zero,81138184 <memcmp+0x50>
81138148:	20800003 	ldbu	r2,0(r4)
8113814c:	28c00003 	ldbu	r3,0(r5)
81138150:	10c0151e 	bne	r2,r3,811381a8 <memcmp+0x74>
81138154:	31bfff84 	addi	r6,r6,-2
81138158:	01ffffc4 	movi	r7,-1
8113815c:	00000406 	br	81138170 <memcmp+0x3c>
81138160:	20800003 	ldbu	r2,0(r4)
81138164:	28c00003 	ldbu	r3,0(r5)
81138168:	31bfffc4 	addi	r6,r6,-1
8113816c:	10c00e1e 	bne	r2,r3,811381a8 <memcmp+0x74>
81138170:	21000044 	addi	r4,r4,1
81138174:	29400044 	addi	r5,r5,1
81138178:	31fff91e 	bne	r6,r7,81138160 <__reset+0xfb118160>
8113817c:	0005883a 	mov	r2,zero
81138180:	f800283a 	ret
81138184:	20c00017 	ldw	r3,0(r4)
81138188:	28800017 	ldw	r2,0(r5)
8113818c:	18bfee1e 	bne	r3,r2,81138148 <__reset+0xfb118148>
81138190:	31bfff04 	addi	r6,r6,-4
81138194:	21000104 	addi	r4,r4,4
81138198:	29400104 	addi	r5,r5,4
8113819c:	39bff936 	bltu	r7,r6,81138184 <__reset+0xfb118184>
811381a0:	303fe91e 	bne	r6,zero,81138148 <__reset+0xfb118148>
811381a4:	003ff506 	br	8113817c <__reset+0xfb11817c>
811381a8:	10c5c83a 	sub	r2,r2,r3
811381ac:	f800283a 	ret

811381b0 <__register_exitproc>:
811381b0:	defffa04 	addi	sp,sp,-24
811381b4:	de00012e 	bgeu	sp,et,811381bc <__register_exitproc+0xc>
811381b8:	003b68fa 	trap	3
811381bc:	dc000315 	stw	r16,12(sp)
811381c0:	04204534 	movhi	r16,33044
811381c4:	8433e304 	addi	r16,r16,-12404
811381c8:	80c00017 	ldw	r3,0(r16)
811381cc:	dc400415 	stw	r17,16(sp)
811381d0:	dfc00515 	stw	ra,20(sp)
811381d4:	18805217 	ldw	r2,328(r3)
811381d8:	2023883a 	mov	r17,r4
811381dc:	10003726 	beq	r2,zero,811382bc <__register_exitproc+0x10c>
811381e0:	10c00117 	ldw	r3,4(r2)
811381e4:	010007c4 	movi	r4,31
811381e8:	20c00e16 	blt	r4,r3,81138224 <__register_exitproc+0x74>
811381ec:	1a000044 	addi	r8,r3,1
811381f0:	8800221e 	bne	r17,zero,8113827c <__register_exitproc+0xcc>
811381f4:	18c00084 	addi	r3,r3,2
811381f8:	18c7883a 	add	r3,r3,r3
811381fc:	18c7883a 	add	r3,r3,r3
81138200:	12000115 	stw	r8,4(r2)
81138204:	10c7883a 	add	r3,r2,r3
81138208:	19400015 	stw	r5,0(r3)
8113820c:	0005883a 	mov	r2,zero
81138210:	dfc00517 	ldw	ra,20(sp)
81138214:	dc400417 	ldw	r17,16(sp)
81138218:	dc000317 	ldw	r16,12(sp)
8113821c:	dec00604 	addi	sp,sp,24
81138220:	f800283a 	ret
81138224:	00800034 	movhi	r2,0
81138228:	10800004 	addi	r2,r2,0
8113822c:	10002626 	beq	r2,zero,811382c8 <__register_exitproc+0x118>
81138230:	01006404 	movi	r4,400
81138234:	d9400015 	stw	r5,0(sp)
81138238:	d9800115 	stw	r6,4(sp)
8113823c:	d9c00215 	stw	r7,8(sp)
81138240:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
81138244:	d9400017 	ldw	r5,0(sp)
81138248:	d9800117 	ldw	r6,4(sp)
8113824c:	d9c00217 	ldw	r7,8(sp)
81138250:	10001d26 	beq	r2,zero,811382c8 <__register_exitproc+0x118>
81138254:	81000017 	ldw	r4,0(r16)
81138258:	10000115 	stw	zero,4(r2)
8113825c:	02000044 	movi	r8,1
81138260:	22405217 	ldw	r9,328(r4)
81138264:	0007883a 	mov	r3,zero
81138268:	12400015 	stw	r9,0(r2)
8113826c:	20805215 	stw	r2,328(r4)
81138270:	10006215 	stw	zero,392(r2)
81138274:	10006315 	stw	zero,396(r2)
81138278:	883fde26 	beq	r17,zero,811381f4 <__reset+0xfb1181f4>
8113827c:	18c9883a 	add	r4,r3,r3
81138280:	2109883a 	add	r4,r4,r4
81138284:	1109883a 	add	r4,r2,r4
81138288:	21802215 	stw	r6,136(r4)
8113828c:	01800044 	movi	r6,1
81138290:	12406217 	ldw	r9,392(r2)
81138294:	30cc983a 	sll	r6,r6,r3
81138298:	4992b03a 	or	r9,r9,r6
8113829c:	12406215 	stw	r9,392(r2)
811382a0:	21c04215 	stw	r7,264(r4)
811382a4:	01000084 	movi	r4,2
811382a8:	893fd21e 	bne	r17,r4,811381f4 <__reset+0xfb1181f4>
811382ac:	11006317 	ldw	r4,396(r2)
811382b0:	218cb03a 	or	r6,r4,r6
811382b4:	11806315 	stw	r6,396(r2)
811382b8:	003fce06 	br	811381f4 <__reset+0xfb1181f4>
811382bc:	18805304 	addi	r2,r3,332
811382c0:	18805215 	stw	r2,328(r3)
811382c4:	003fc606 	br	811381e0 <__reset+0xfb1181e0>
811382c8:	00bfffc4 	movi	r2,-1
811382cc:	003fd006 	br	81138210 <__reset+0xfb118210>

811382d0 <__call_exitprocs>:
811382d0:	defff504 	addi	sp,sp,-44
811382d4:	de00012e 	bgeu	sp,et,811382dc <__call_exitprocs+0xc>
811382d8:	003b68fa 	trap	3
811382dc:	df000915 	stw	fp,36(sp)
811382e0:	dd400615 	stw	r21,24(sp)
811382e4:	dc800315 	stw	r18,12(sp)
811382e8:	dfc00a15 	stw	ra,40(sp)
811382ec:	ddc00815 	stw	r23,32(sp)
811382f0:	dd800715 	stw	r22,28(sp)
811382f4:	dd000515 	stw	r20,20(sp)
811382f8:	dcc00415 	stw	r19,16(sp)
811382fc:	dc400215 	stw	r17,8(sp)
81138300:	dc000115 	stw	r16,4(sp)
81138304:	d9000015 	stw	r4,0(sp)
81138308:	2839883a 	mov	fp,r5
8113830c:	04800044 	movi	r18,1
81138310:	057fffc4 	movi	r21,-1
81138314:	00a04534 	movhi	r2,33044
81138318:	10b3e304 	addi	r2,r2,-12404
8113831c:	12000017 	ldw	r8,0(r2)
81138320:	45005217 	ldw	r20,328(r8)
81138324:	44c05204 	addi	r19,r8,328
81138328:	a0001c26 	beq	r20,zero,8113839c <__call_exitprocs+0xcc>
8113832c:	a0800117 	ldw	r2,4(r20)
81138330:	15ffffc4 	addi	r23,r2,-1
81138334:	b8000d16 	blt	r23,zero,8113836c <__call_exitprocs+0x9c>
81138338:	14000044 	addi	r16,r2,1
8113833c:	8421883a 	add	r16,r16,r16
81138340:	8421883a 	add	r16,r16,r16
81138344:	84402004 	addi	r17,r16,128
81138348:	a463883a 	add	r17,r20,r17
8113834c:	a421883a 	add	r16,r20,r16
81138350:	e0001e26 	beq	fp,zero,811383cc <__call_exitprocs+0xfc>
81138354:	80804017 	ldw	r2,256(r16)
81138358:	e0801c26 	beq	fp,r2,811383cc <__call_exitprocs+0xfc>
8113835c:	bdffffc4 	addi	r23,r23,-1
81138360:	843fff04 	addi	r16,r16,-4
81138364:	8c7fff04 	addi	r17,r17,-4
81138368:	bd7ff91e 	bne	r23,r21,81138350 <__reset+0xfb118350>
8113836c:	00800034 	movhi	r2,0
81138370:	10800004 	addi	r2,r2,0
81138374:	10000926 	beq	r2,zero,8113839c <__call_exitprocs+0xcc>
81138378:	a0800117 	ldw	r2,4(r20)
8113837c:	1000301e 	bne	r2,zero,81138440 <__call_exitprocs+0x170>
81138380:	a0800017 	ldw	r2,0(r20)
81138384:	10003226 	beq	r2,zero,81138450 <__call_exitprocs+0x180>
81138388:	a009883a 	mov	r4,r20
8113838c:	98800015 	stw	r2,0(r19)
81138390:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
81138394:	9d000017 	ldw	r20,0(r19)
81138398:	a03fe41e 	bne	r20,zero,8113832c <__reset+0xfb11832c>
8113839c:	dfc00a17 	ldw	ra,40(sp)
811383a0:	df000917 	ldw	fp,36(sp)
811383a4:	ddc00817 	ldw	r23,32(sp)
811383a8:	dd800717 	ldw	r22,28(sp)
811383ac:	dd400617 	ldw	r21,24(sp)
811383b0:	dd000517 	ldw	r20,20(sp)
811383b4:	dcc00417 	ldw	r19,16(sp)
811383b8:	dc800317 	ldw	r18,12(sp)
811383bc:	dc400217 	ldw	r17,8(sp)
811383c0:	dc000117 	ldw	r16,4(sp)
811383c4:	dec00b04 	addi	sp,sp,44
811383c8:	f800283a 	ret
811383cc:	a0800117 	ldw	r2,4(r20)
811383d0:	80c00017 	ldw	r3,0(r16)
811383d4:	10bfffc4 	addi	r2,r2,-1
811383d8:	15c01426 	beq	r2,r23,8113842c <__call_exitprocs+0x15c>
811383dc:	80000015 	stw	zero,0(r16)
811383e0:	183fde26 	beq	r3,zero,8113835c <__reset+0xfb11835c>
811383e4:	95c8983a 	sll	r4,r18,r23
811383e8:	a0806217 	ldw	r2,392(r20)
811383ec:	a5800117 	ldw	r22,4(r20)
811383f0:	2084703a 	and	r2,r4,r2
811383f4:	10000b26 	beq	r2,zero,81138424 <__call_exitprocs+0x154>
811383f8:	a0806317 	ldw	r2,396(r20)
811383fc:	2088703a 	and	r4,r4,r2
81138400:	20000c1e 	bne	r4,zero,81138434 <__call_exitprocs+0x164>
81138404:	89400017 	ldw	r5,0(r17)
81138408:	d9000017 	ldw	r4,0(sp)
8113840c:	183ee83a 	callr	r3
81138410:	a0800117 	ldw	r2,4(r20)
81138414:	15bfbf1e 	bne	r2,r22,81138314 <__reset+0xfb118314>
81138418:	98800017 	ldw	r2,0(r19)
8113841c:	153fcf26 	beq	r2,r20,8113835c <__reset+0xfb11835c>
81138420:	003fbc06 	br	81138314 <__reset+0xfb118314>
81138424:	183ee83a 	callr	r3
81138428:	003ff906 	br	81138410 <__reset+0xfb118410>
8113842c:	a5c00115 	stw	r23,4(r20)
81138430:	003feb06 	br	811383e0 <__reset+0xfb1183e0>
81138434:	89000017 	ldw	r4,0(r17)
81138438:	183ee83a 	callr	r3
8113843c:	003ff406 	br	81138410 <__reset+0xfb118410>
81138440:	a0800017 	ldw	r2,0(r20)
81138444:	a027883a 	mov	r19,r20
81138448:	1029883a 	mov	r20,r2
8113844c:	003fb606 	br	81138328 <__reset+0xfb118328>
81138450:	0005883a 	mov	r2,zero
81138454:	003ffb06 	br	81138444 <__reset+0xfb118444>

81138458 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81138458:	defffd04 	addi	sp,sp,-12
8113845c:	de00012e 	bgeu	sp,et,81138464 <_exit+0xc>
81138460:	003b68fa 	trap	3
81138464:	df000215 	stw	fp,8(sp)
81138468:	df000204 	addi	fp,sp,8
8113846c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81138470:	d0207f05 	stb	zero,-32260(gp)
81138474:	e0bfff17 	ldw	r2,-4(fp)
81138478:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113847c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81138480:	10000226 	beq	r2,zero,8113848c <_exit+0x34>
    ALT_SIM_FAIL();
81138484:	002af070 	cmpltui	zero,zero,43969
81138488:	00000106 	br	81138490 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
8113848c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81138490:	003fff06 	br	81138490 <__reset+0xfb118490>
