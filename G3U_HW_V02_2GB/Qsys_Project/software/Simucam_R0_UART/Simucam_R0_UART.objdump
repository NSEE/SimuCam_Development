
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81100244

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x00039a18 memsz 0x0005e420 flags rwx
    LOAD off    0x0003b000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  0003b000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00035030  81100244  81100244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002a58  81135274  81135274  00036274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d6c  81137ccc  81137ccc  00038ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00024a08  81139a38  81139a38  0003aa38  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8115e440  8115e440  0003b000  2**0
                  CONTENTS
  7 .descriptor_memory 00000000  81200800  81200800  0003b000  2**0
                  CONTENTS
  8 .ext_flash    00000000  86020020  86020020  0003b000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  0003b000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001af8  00000000  00000000  0003b028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00054004  00000000  00000000  0003cb20  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00013697  00000000  00000000  00090b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b51a  00000000  00000000  000a41bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00006b80  00000000  00000000  000bf6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00009ed6  00000000  00000000  000c6258  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00026d73  00000000  00000000  000d012e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000040  00000000  00000000  000f6ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00002390  00000000  00000000  000f6ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000006  00000000  00000000  00102b7d  2**0
                  CONTENTS, READONLY
 20 .cpu          0000000c  00000000  00000000  00102b83  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  00102b8f  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  00102b90  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  00102b91  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  00102b95  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  00102b99  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000b  00000000  00000000  00102b9d  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000a  00000000  00000000  00102ba8  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000a  00000000  00000000  00102bb2  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000011  00000000  00000000  00102bbc  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003f  00000000  00000000  00102bcd  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00277c09  00000000  00000000  00102c0c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
81100244 l    d  .text	00000000 .text
81135274 l    d  .rodata	00000000 .rodata
81137ccc l    d  .rwdata	00000000 .rwdata
81139a38 l    d  .bss	00000000 .bss
8115e440 l    d  .onchip_memory	00000000 .onchip_memory
81200800 l    d  .descriptor_memory	00000000 .descriptor_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100278 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 spwc.c
00000000 l    df *ABS*	00000000 tran.c
00000000 l    df *ABS*	00000000 eth.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 pgen.c
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
81139a8a l     O .bss	00000004 xRAckLocal.4375
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
81139a8e l     O .bss	00000004 xSAckLocal.4371
00000000 l    df *ABS*	00000000 parser_comm_task.c
81139bb8 l     O .bss	0000004c PreParsedLocal.4426
00000000 l    df *ABS*	00000000 receiver_uart_task.c
81139c04 l     O .bss	0000004c xPreParsedReader.4427
00000000 l    df *ABS*	00000000 rtos_tasks.c
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113670f l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
811373d9 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
81137ccc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
8110d8b0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
811375a6 l     O .rodata	00000010 zeroes.4389
811375b6 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
811375c6 l     O .rodata	00000010 zeroes.4404
81112484 l     F .text	000000bc __sbprintf
811375d6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
811375ee l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81113fd4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81115b04 l     F .text	00000008 __fp_unlock
81115b18 l     F .text	0000019c __sinit.part.1
81115cb4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
81138518 l     O .rwdata	00000020 lc_ctype_charset
811384f8 l     O .rwdata	00000020 lc_message_charset
81138538 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113762c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
81118b9c l     F .text	00000064 sulp
81137774 l     O .rodata	00000014 fpi.2737
81137788 l     O .rodata	00000028 tinytens
81137760 l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
811377c0 l     O .rodata	00000010 blanks.4332
811377b0 l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111c1bc l     F .text	000000fc __sprint_r.part.0
811377e0 l     O .rodata	00000010 blanks.4348
811377d0 l     O .rodata	00000010 zeroes.4349
8111d748 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
8111dd2c l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
81121930 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
81121a5c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
81121a88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
81121b74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81121c54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
81121e20 l     F .text	0000003c alt_get_errno
81121e5c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81122074 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8113999c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81122598 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
811399a8 l     O .rwdata	00000004 lockid
81139b18 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
811399ac l     O .rwdata	00000004 lockid
81139b20 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
81123fc8 l     F .text	00000048 OS_InitMisc
81124010 l     F .text	0000006c OS_InitRdyList
8112417c l     F .text	000000e4 OS_InitTCBList
81123ee8 l     F .text	000000e0 OS_InitEventList
8112407c l     F .text	00000080 OS_InitTaskIdle
811240fc l     F .text	00000080 OS_InitTaskStat
811243ec l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112610c l     F .text	000000f4 OS_FlagTaskRdy
81125ecc l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
81127980 l     F .text	00000190 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
8112b2d0 l     F .text	00000034 alt_dev_reg
81138718 l     O .rwdata	0000106c jtag_uart_0
81139784 l     O .rwdata	00000030 sgdma_rx
811397b4 l     O .rwdata	00000030 sgdma_tx
811397e4 l     O .rwdata	000000d0 rs232_uart
811398b4 l     O .rwdata	00000064 dma_DDR_M
81139918 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
8112f998 l     F .text	000002a4 altera_avalon_jtag_uart_irq
8112fc3c l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
81130418 l     F .text	0000003c alt_get_errno
81131048 l     F .text	000000bc alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
811311ac l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81131510 l     F .text	0000009c altera_avalon_uart_irq
811315ac l     F .text	00000138 altera_avalon_uart_rxirq
811316e4 l     F .text	000001a4 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
811318dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81131b80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
81131df4 l     F .text	0000003c alt_get_errno
81131e30 l     F .text	00000094 alt_msgdma_write_standard_descriptor
81131ec4 l     F .text	0000012c alt_msgdma_write_extended_descriptor
81131ff0 l     F .text	00000184 alt_msgdma_irq
81132174 l     F .text	0000008c alt_msgdma_construct_standard_descriptor
81132200 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
81132354 l     F .text	00000338 alt_msgdma_descriptor_async_transfer
8113268c l     F .text	00000400 alt_msgdma_descriptor_sync_transfer
81132d5c l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
81132e00 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
8113406c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81134720 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
81139bb4 g     O .bss	00000004 alt_instruction_exception_handler
8110a380 g     F .text	00000044 vFailDeleteInitialization
81139b84 g     O .bss	00000004 aux_status_register
8114e078 g     O .bss	00002000 vInAckHandlerTask_stk
81133d00 g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
8110d7c4 g     F .text	00000018 putchar
81102880 g     F .text	00000128 SPWC_WRITE_REG32
811180d0 g     F .text	00000074 _mprec_log10
81103f0c g     F .text	00000128 TRAN_READ_REG32
81105128 g     F .text	00000100 I2C_Read
811399fa g     O .rwdata	00000002 OSTaskNameSize
81150078 g     O .bss	00000118 xBuffer64
811181bc g     F .text	0000008c __any_on
81116c28 g     F .text	00000054 _isatty_r
81137638 g     O .rodata	00000028 __mprec_tinytens
81121d64 g     F .text	000000bc alt_main
81139a98 g     O .bss	00000004 DMADev
8110d7dc g     F .text	000000c0 _puts_r
8113994c g     O .rwdata	00000004 ul_spwc_c_spacewire_link_control_status_register_value
8115e340 g     O .bss	00000100 alt_irq
81139a6c g     O .bss	00000004 ul_tran_d_interface_control_status_register_value
81116d88 g     F .text	00000060 _lseek_r
8112692c g     F .text	000000cc OS_MemInit
81109080 g     F .text	00000984 vLoadDefaultETHConf
8112b270 g     F .text	00000060 OSTimeSet
81139958 g     O .rwdata	00000004 ul_spwc_f_spacewire_link_control_status_register_value
81115ea4 g     F .text	000000ac __sflags
81120bd8 g     F .text	00000088 .hidden __eqdf2
811019a0 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_FULL
81100efc g     F .text	00000398 DDR2_MEMORY_READ_TEST
8112b790 g     F .text	000001a4 Check_for_Master_Boot_Record
81132b3c g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
81139a40 g     O .bss	00000004 ul_spwc_a_interface_control_status_register_value
81122c3c g     F .text	00000610 OSEventPendMulti
8115e440 g       *ABS*	00000000 __alt_heap_start
81134d18 g     F .text	00000024 OSTaskCreateHook
8112f530 g     F .text	000001bc alt_up_sd_card_fclose
81139a9c g     O .bss	00000004 xSemCountBuffer64
81139a88 g     O .bss	00000001 SspdConfigControl
8110d780 g     F .text	0000003c printf
811399d2 g     O .rwdata	00000002 OSMboxEn
811089dc g     F .text	0000038c bSendUART128
81130578 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
8110add4 g     F .text	0000009c aatoh
811232a4 g     F .text	0000004c OSIntEnter
8111e988 g     F .text	0000009c _wcrtomb_r
8110a2f8 g     F .text	00000044 vFailReceiverCreate
8110dcfc g     F .text	0000005c __sseek
81115e54 g     F .text	00000010 __sinit
8111d804 g     F .text	00000140 __swbuf_r
81108608 g     F .text	00000260 bResourcesInitRTOS
811399e2 g     O .rwdata	00000002 OSQEn
81116cac g     F .text	0000007c _setlocale_r
81139a84 g     O .bss	00000004 LedsPainelControl
81115cbc g     F .text	00000068 __sfmoreglue
8111c1a4 g     F .text	00000018 ungetc
81122910 g     F .text	000000cc __malloc_unlock
81101c68 g     F .text	00000208 DMA_MULTIPLE_TRANSFER
81134d80 g     F .text	00000020 OSTaskStatHook
81139b28 g     O .bss	00000001 OSLockNesting
81139aa0 g     O .bss	00000004 xSemCommInit
81118c00 g     F .text	000015f8 _strtod_r
81139aa4 g     O .bss	00000004 xSemCountSenderACK
8110aee8 g     F .text	00000440 .hidden __divsf3
81104100 g     F .text	000001f4 v_Transparent_Interface_Enable_Control
81139ba8 g     O .bss	00000004 current_sector_modified
81139a20 g     O .rwdata	00000002 OSDataSize
81139b29 g     O .bss	00000001 OSRunning
81104cbc g     F .text	000002a8 ui_Transparent_Interface_Get_SpaceWire_Data
81139a68 g     O .bss	00000004 ul_tran_c_interface_control_status_register_value
81150190 g     O .bss	00002000 senderTask_stk
81130c90 g     F .text	000003b8 alt_avalon_sgdma_construct_descriptor_burst
811033ac g     F .text	00000058 ul_SpaceWire_Interface_Interrupts_Flags_Read
81139aa8 g     O .bss	00000004 fp
8113a078 g     O .bss	00002000 SPWHTaskStk
811170f0 g     F .text	0000015c memmove
81134dc0 g     F .text	00000020 OSInitHookBegin
81103de4 g     F .text	00000128 TRAN_WRITE_REG32
81139a18 g     O .rwdata	00000002 OSTmrSize
81115e3c g     F .text	00000018 _cleanup
8110ab34 g     F .text	00000038 siCloseFile
8111724c g     F .text	000000a8 _Balloc
8112e154 g     F .text	000000c4 alt_up_sd_card_is_Present
81132a8c g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
8110833c g     F .text	00000198 Set_SpW_Led
8113c078 g     O .bss	00002000 SPWFTaskStk
81101a28 g     F .text	0000009c DMA_DISPATCHER_STOP
8112b4d8 g     F .text	0000004c Save_Modified_Sector
81139b2c g     O .bss	00000004 OSIdleCtr
81120c60 g     F .text	000000dc .hidden __gtdf2
81134ac8 g     F .text	00000024 altera_nios2_gen2_irq_init
81134b98 g       .text	00000000 OSStartTsk
8112472c g     F .text	000002d4 OS_TCBInit
8110a910 g     F .text	00000064 vInitSimucamBasicHW
81105484 g     F .text	00000130 i2c_write
86020000 g     F .entry	00000000 __reset
81139ba0 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
81139aac g     O .bss	00000004 xSemCountBuffer128
811020ac g     F .text	000000f0 TEMP_Read
81139a1e g     O .rwdata	00000002 OSTmrWheelTblSize
811307e0 g     F .text	00000078 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
811399be g     O .rwdata	00000002 OSEventSize
81139b30 g     O .bss	00000001 OSPrioHighRdy
8110c95c g     F .text	0000005c _fstat_r
81134d3c g     F .text	00000024 OSTaskDelHook
81139ae4 g     O .bss	00000004 errno
81113d64 g     F .text	0000001c __svfscanf
8110dc78 g     F .text	00000008 __seofread
81134b78 g       .text	00000000 OSStartHighRdy
81129d10 g     F .text	000001e4 OSTaskCreateExt
8110a544 g     F .text	00000060 vFailGetCountSemaphorePreParsedBuffer
8111ad00 g     F .text	0000123c ___svfiprintf_internal_r
81125a14 g     F .text	00000060 OSFlagPendGetFlagsRdy
811399fe g     O .rwdata	00000002 OSTaskStatStkSize
811038cc g     F .text	00000070 uc_SpaceWire_Interface_Get_TimeCode
81124b90 g     F .text	00000308 OSFlagAccept
8112807c g     F .text	000000b8 OSQFlush
81127b10 g     F .text	00000140 OSQAccept
81139b08 g     O .bss	00000004 alt_argv
81141944 g       *ABS*	00000000 _gp
8110a008 g     F .text	00000044 vFailSendPreAckReceiverSemaphore
81122464 g     F .text	00000134 usleep
8112e70c g     F .text	0000037c alt_up_sd_card_fopen
8110a9c0 g     F .text	00000028 bSDcardIsPresent
81108274 g     F .text	000000c8 Configure_SpW_Autostart
811084d4 g     F .text	00000134 vSenderComTask
8112e284 g     F .text	000000d0 alt_up_sd_card_find_first
8110381c g     F .text	0000005c v_SpaceWire_Interface_Send_TimeCode
81129b64 g     F .text	000001ac OSTaskCreate
8110a6c4 g     F .text	00000060 vFailSendNack
81139b94 g     O .bss	00000004 command_argument_register
81129674 g     F .text	000004f0 OSTaskChangePrio
81139b24 g     O .bss	00000004 alt_heapsem
8110376c g     F .text	00000058 ul_SpaceWire_Interface_Link_Error_Read
8110570c g     F .text	00000078 bSetBoardLeds
81124a00 g     F .text	00000190 OSDebugInit
81129ef4 g     F .text	00000344 OSTaskDel
81107dd0 g     F .text	0000004c SPWDTask
811269f8 g     F .text	000001a4 OSMutexAccept
811335ac g     F .text	000000d4 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
81139ab0 g     O .bss	00000004 xSemCountPreParsed
81138598 g     O .rwdata	00000180 alt_fd_list
8115a538 g     O .bss	00000370 OSFlagTbl
8110a150 g     F .text	00000060 vFailGetCountSemaphoreReceiverTask
8110d7bc g     F .text	00000008 _putchar_r
81123cc8 g     F .text	000000b8 OS_EventTaskRemove
8112d9d0 g     F .text	0000012c find_first_empty_record_in_root_directory
8113420c g     F .text	00000090 alt_find_dev
8110d480 g     F .text	00000148 memcpy
8111e65c g     F .text	0000025c __hexnan
811037c4 g     F .text	00000058 ul_SpaceWire_Interface_Link_Status_Read
81152190 g     O .bss	00000130 xBuffer32
811399e8 g     O .rwdata	00000002 OSRdyTblSize
81115b0c g     F .text	0000000c _cleanup_r
811217ac g     F .text	000000dc .hidden __floatsidf
81139a78 g     O .bss	00000004 ul_tran_g_interface_control_status_register_value
81106dd0 g     F .text	000002b8 vParserCommTask
811347e4 g     F .text	0000007c alt_io_redirect
81120d3c g     F .text	000000f4 .hidden __ltdf2
81139ab4 g     O .bss	00000004 xMutexReceivedACK
81135274 g       *ABS*	00000000 __DTOR_END__
81133a1c g     F .text	0000008c alt_msgdma_start_prefetcher_with_extd_desc_list
81133d3c g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
81133cac g     F .text	00000054 alt_msgdma_register_callback
81109a04 g     F .text	00000328 vShowEthConfig
81139a5c g     O .bss	00000004 ul_spwc_h_interface_control_status_register_value
8110a974 g     F .text	00000028 bLogWriteSDCard
8110a424 g     F .text	00000060 vFailSetCountSemaphorexBuffer64
81107198 g     F .text	00000098 bTrySendSemaphoreCommInit
8110d89c g     F .text	00000014 puts
81134e44 g     F .text	0000009c alt_exception_cause_generated_bad_addr
811229dc g     F .text	00000120 OSEventNameGet
811399cc g     O .rwdata	00000002 OSFlagMax
81116e94 g     F .text	000000d8 mbrtowc
8112d5d8 g     F .text	000001ac find_first_empty_cluster
81118974 g     F .text	00000074 __fpclassifyd
81113d80 g     F .text	0000004c _vfscanf_r
81127060 g     F .text	0000059c OSMutexPend
81139960 g     O .rwdata	00000004 ul_spwc_h_spacewire_link_control_status_register_value
8111802c g     F .text	000000a4 __ratio
8112e098 g     F .text	000000bc alt_up_sd_card_open_dev
81103404 g     F .text	00000174 v_SpaceWire_Interface_Interrupts_Flags_Clear
811232f0 g     F .text	000000f8 OSIntExit
8111d72c g     F .text	0000001c __vfiprintf_internal
81139a06 g     O .rwdata	00000002 OSTCBSize
811308d8 g     F .text	0000008c alt_avalon_sgdma_construct_mem_to_stream_desc_burst
81139b31 g     O .bss	00000001 OSPrioCur
8112fe98 g     F .text	000002bc altera_avalon_jtag_uart_read
8110a99c g     F .text	00000024 bLogWriteETH
8113328c g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
8110d750 g     F .text	00000030 _printf_r
8111f78c g     F .text	00000064 .hidden __udivsi3
81121bb0 g     F .text	000000a4 isatty
81139a80 g     O .bss	00000001 LedsBoardControl
81139ab8 g     O .bss	00000004 xSemCountReceivedACK
811399ec g     O .rwdata	00000002 OSStkWidth
81116c7c g     F .text	00000030 iswspace
811048e4 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Full
81137688 g     O .rodata	000000c8 __mprec_tens
811399e0 g     O .rwdata	00000002 OSPtrSize
81139a58 g     O .bss	00000004 ul_spwc_g_interface_control_status_register_value
81139a50 g     O .bss	00000004 ul_spwc_e_interface_control_status_register_value
81116d28 g     F .text	0000000c __locale_charset
8111f97c g     F .text	000000c8 .hidden __lesf2
811399c0 g     O .rwdata	00000002 OSEventTblSize
81105950 g     F .text	00000034 v_Pattern_Generator_Start
8111eb70 g     F .text	00000074 .hidden __fixunsdfsi
81134aec g       .text	00000000 OSCtxSw
81105228 g     F .text	00000158 I2C_MultipleRead
81139af0 g     O .bss	00000004 __malloc_top_pad
81139b34 g     O .bss	00000004 OSTCBList
81139b00 g     O .bss	00000004 alt_fd_list_lock
8111a83c g     F .text	0000001c strtoul
81139978 g     O .rwdata	00000004 __mb_cur_max
81116d58 g     F .text	0000000c _localeconv_r
8111a858 g     F .text	000002d8 _strtoull_r
81103578 g     F .text	000001f4 v_SpaceWire_Interface_Link_Control
81117658 g     F .text	0000003c __i2b
811165e4 g     F .text	000004bc __sfvwrite_r
81130a10 g     F .text	0000005c alt_avalon_sgdma_stop
8112c8d8 g     F .text	000000b8 get_dir_divider_location
8115a8a8 g     O .bss	00000c30 OSMemTbl
81139b38 g     O .bss	00000001 OSTickStepState
811522c0 g     O .bss	00002000 vReceiverUartTask_stk
8110daa0 g     F .text	00000054 _sbrk_r
8112c5a8 g     F .text	000000c4 filename_to_upper_case
811399e4 g     O .rwdata	00000002 OSQMax
8112ea88 g     F .text	00000088 alt_up_sd_card_set_attributes
81126d64 g     F .text	000002fc OSMutexDel
8115b4d8 g     O .bss	00000800 OSTaskStatStk
8110a9e8 g     F .text	00000028 bSDcardFAT16Check
81126568 g     F .text	000000f0 OSMemNameGet
81109e84 g     F .text	00000058 vFailCreateMutexSResources
8112b934 g     F .text	0000027c Read_File_Record_At_Offset
81107cb0 g     F .text	0000003c MemDMATask
811399c4 g     O .rwdata	00000002 OSFlagEn
811183b0 g     F .text	00000060 _read_r
81139a0a g     O .rwdata	00000002 OSTimeTickHookEn
81134044 g     F .text	00000028 alt_dcache_flush
8112852c g     F .text	00000168 OSQPost
81126200 g     F .text	000000a4 OS_FlagUnlink
81139994 g     O .rwdata	00000004 alt_max_fd
811242b4 g     F .text	00000068 OS_MemCopy
8112431c g     F .text	000000d0 OS_Sched
8112d164 g     F .text	00000474 find_file_in_directory
8111da20 g     F .text	000000f0 _fclose_r
81126478 g     F .text	000000f0 OSMemGet
8112a520 g     F .text	000001b4 OSTaskNameSet
81115ad4 g     F .text	00000030 fflush
81139aec g     O .bss	00000004 __malloc_max_sbrked_mem
81139b3c g     O .bss	00000004 OSCtxSwCtr
81134da0 g     F .text	00000020 OSTimeTickHook
811542c0 g     O .bss	00002000 vOutAckHandlerTask_stk
811399ce g     O .rwdata	00000002 OSFlagNameSize
81107eb4 g     F .text	0000004c SPWGTask
8110c050 g     F .text	00000110 .hidden __extendsfdf2
81123d80 g     F .text	00000100 OS_EventTaskRemoveMulti
8112e218 g     F .text	0000006c alt_up_sd_card_is_FAT16
81104fd0 g     F .text	00000080 I2C_TestAdress
8111fa44 g     F .text	000008ac .hidden __adddf3
8111f848 g     F .text	00000078 .hidden __nesf2
81123b78 g     F .text	00000150 OS_EventTaskWaitMulti
81117dd4 g     F .text	0000010c __b2d
81132fec g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
811399e6 g     O .rwdata	00000002 OSQSize
8111f15c g     F .text	00000538 .hidden __umoddi3
81121c90 g     F .text	000000d4 lseek
81128fdc g     F .text	0000020c OSSemPend
81139968 g     O .rwdata	00000004 _global_impure_ptr
811063d8 g     F .text	00000044 bSSDisplayUpdate
8112cc2c g     F .text	00000538 get_home_directory_cluster_for_file
81104938 g     F .text	00000054 b_Transparent_Interface_TX_FIFO_Status_Empty
81118410 g     F .text	00000564 _realloc_r
811399d0 g     O .rwdata	00000002 OSLowestPrio
8115e440 g       *ABS*	00000000 __bss_end
81134630 g     F .text	000000f0 alt_iic_isr_register
81130454 g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
81134e20 g     F .text	00000024 OSTCBInitHook
81139a16 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
811030b8 g     F .text	00000100 v_SpaceWire_Interface_Force_Reset
8112235c g     F .text	00000108 alt_tick
8110a0f0 g     F .text	00000060 vFailGetMutexSenderTask
811377f0 g     O .rodata	00000100 __hexdig
81133b00 g     F .text	000001ac alt_msgdma_init
8111ebe4 g     F .text	00000578 .hidden __udivdi3
81107978 g     F .text	0000019c setPreAckSenderFreePos
8111dc88 g     F .text	00000024 _fputwc_r
811399b8 g     O .rwdata	00000002 OSEventEn
81137660 g     O .rodata	00000028 __mprec_bigtens
8111743c g     F .text	00000104 __s2b
81139a12 g     O .rwdata	00000002 OSTmrCfgNameSize
81121888 g     F .text	000000a8 .hidden __floatunsidf
8110a4e4 g     F .text	00000060 vFailFoundBufferRetransmission
81117b14 g     F .text	00000060 __mcmp
81139bac g     O .bss	00000004 current_sector_index
811313b0 g     F .text	00000160 altera_avalon_uart_init
81133db4 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
81115e74 g     F .text	00000018 __fp_lock_all
811345e4 g     F .text	0000004c alt_ic_irq_enabled
81105050 g     F .text	000000d8 I2C_Write
8110399c g     F .text	000001b0 b_SpaceWire_Interface_Set_TX_Div
81105900 g     F .text	00000050 ul_Pattern_Generator_Read_Register
8112602c g     F .text	000000e0 OS_FlagInit
811222c0 g     F .text	0000009c alt_alarm_stop
8110e07c g     F .text	0000001c strtol
8112b6b0 g     F .text	000000e0 mark_cluster
81200800 g       *ABS*	00000000 __alt_mem_descriptor_memory
811399f4 g     O .rwdata	00000002 OSTaskIdleStkSize
81139bb0 g     O .bss	00000004 alt_irq_active
81128c14 g     F .text	000000b0 OSSemAccept
8110c4fc g     F .text	00000444 _fseeko_r
811049dc g     F .text	00000198 b_Transparent_Interface_Switch_Channel
8112676c g     F .text	000000d8 OSMemPut
811262a4 g     F .text	000001d4 OSMemCreate
81139b40 g     O .bss	00000004 OSIdleCtrMax
811000fc g     F .exceptions	000000d4 alt_irq_handler
81138570 g     O .rwdata	00000028 alt_dev_null
81132c24 g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
81139a08 g     O .rwdata	00000002 OSTicksPerSec
8112dafc g     F .text	0000018c convert_filename_to_name_extension
81139a95 g     O .bss	00000001 tempFPGA
81130a6c g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
81103c90 g     F .text	000000ac b_SpaceWire_Interface_Read_RX_Data
81105380 g     F .text	0000008c i2c_start
81134aec g       .text	00000000 OSIntCtxSw
811047a4 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Full
81133990 g     F .text	0000008c alt_msgdma_start_prefetcher_with_std_desc_list
81103d3c g     F .text	000000a8 ui_SpaceWire_Interface_Get_SpaceWire_Data
81121a3c g     F .text	00000020 alt_dcache_flush_all
81117540 g     F .text	00000068 __hi0bits
81139b80 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8112172c g     F .text	00000080 .hidden __fixdfsi
811562c0 g     O .bss	00002000 vInitialTask_stk
81139abc g     O .bss	00000002 usiIdCMD
8112d784 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
81107418 g     F .text	00000408 bPreParser
8111a1f8 g     F .text	00000018 strtod
81139b44 g     O .bss	00000004 OSTCBFreeList
811291e8 g     F .text	0000016c OSSemPendAbort
8110a270 g     F .text	00000044 vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8113998c g     O .rwdata	00000008 alt_dev_list
811225d4 g     F .text	000000f8 write
81130bb0 g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
81118248 g     F .text	000000a0 _putc_r
81139ba4 g     O .bss	00000004 device_pointer
81139a0c g     O .rwdata	00000002 OSVersionNbr
8111f8c0 g     F .text	000000bc .hidden __gtsf2
81107088 g     F .text	00000110 getPreParsedPacket
81121ac4 g     F .text	000000b0 fstat
8110c4b8 g     F .text	00000024 fprintf
81101b60 g     F .text	00000108 DMA_SINGLE_TRANSFER
8110abc4 g     F .text	00000050 _reg_write
81120d3c g     F .text	000000f4 .hidden __ledf2
811040a0 g     F .text	00000060 ul_Transparent_Interface_Read_Register
811399b4 g     O .rwdata	00000004 OSEndiannessTest
81105fa0 g     F .text	00000050 v_spi_start
8111788c g     F .text	00000140 __pow5mult
8111c2d0 g     F .text	0000145c ___vfiprintf_internal_r
81139afc g     O .bss	00000004 __nlocale_changed
8111f7f0 g     F .text	00000058 .hidden __umodsi3
8110aa10 g     F .text	000000f0 bInitializeSDCard
81100ad8 g     F .text	00000424 DDR2_MEMORY_WRITE_TEST
8110a844 g     F .text	00000044 vFailParserCommTaskCreate
8110db30 g     F .text	00000030 _scanf_r
8110a8cc g     F .text	00000044 vFailOutAckHandlerTaskCreate
81130858 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_stream_desc
811399c6 g     O .rwdata	00000002 OSFlagGrpSize
81133044 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
81130964 g     F .text	00000054 alt_avalon_sgdma_register_callback
8115e440 g       *ABS*	00000000 end
8110a604 g     F .text	00000060 vNoContentInPreParsedBuffer
8110c940 g     F .text	0000001c fseeko
81104f64 g     F .text	00000034 vEthHoldReset
8110c378 g     F .text	0000000c _atoi_r
81131bbc g     F .text	00000238 altera_avalon_uart_write
811031b8 g     F .text	000001f4 v_SpaceWire_Interface_Interrupts_Enable_Control
8110c4e0 g     F .text	0000001c fseek
8112f850 g     F .text	00000148 altera_avalon_jtag_uart_init
81124584 g     F .text	000000dc OS_TaskStat
81139a64 g     O .bss	00000004 ul_tran_b_interface_control_status_register_value
811001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
81109f20 g     F .text	00000044 vFailTestCriticasParts
81135274 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81130c30 g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
81104848 g     F .text	00000044 v_Transparent_Interface_TX_FIFO_Reset
81131224 g     F .text	0000007c alt_avalon_timer_sc_init
81131300 g     F .text	00000060 altera_avalon_uart_write_fd
8110c308 g     F .text	00000064 .hidden __clzsi2
81105984 g     F .text	00000034 v_Pattern_Generator_Stop
81139a48 g     O .bss	00000004 ul_spwc_c_interface_control_status_register_value
81131360 g     F .text	00000050 altera_avalon_uart_close_fd
81130154 g     F .text	000002c4 altera_avalon_jtag_uart_write
81130688 g     F .text	00000074 alt_avalon_sgdma_construct_mem_to_mem_desc
811582c0 g     O .bss	0000010c xBuffer128
811044e8 g     F .text	00000058 ul_Transparent_Interface_Interrupts_Flags_Read
81115e64 g     F .text	00000004 __sfp_lock_acquire
8110219c g     F .text	00000040 sense_log_temp
8111700c g     F .text	000000e4 memchr
81124260 g     F .text	00000054 OS_MemClr
81110270 g     F .text	000021f8 ___vfprintf_internal_r
81134bbc g     F .text	0000015c OSTaskStkInit
8110db60 g     F .text	00000058 _sprintf_r
8110488c g     F .text	00000058 ul_Transparent_Interface_TX_FIFO_Status_Read
81130780 g     F .text	00000060 alt_avalon_sgdma_construct_stream_to_mem_desc
811162d4 g     F .text	00000310 _free_r
81134860 g     F .text	0000022c alt_printf
8110ac64 g     F .text	00000104 _print_codec_status
81139944 g     O .rwdata	00000004 ul_spwc_a_spacewire_link_control_status_register_value
81116d34 g     F .text	00000010 __locale_mb_cur_max
811238d0 g     F .text	00000198 OS_EventTaskRdy
81101ac4 g     F .text	0000009c DMA_DISPATCHER_RESET
811350c0 g     F .text	00000180 __call_exitprocs
81139b48 g     O .bss	00000001 OSCPUUsage
8110027c g     F .text	000002a4 DDR2_EEPROM_TEST
81100a50 g     F .text	00000088 DDR2_SWITCH_MEMORY
81139af8 g     O .bss	00000004 __mlocale_changed
81139970 g     O .rwdata	00000004 __malloc_sbrk_base
81100244 g     F .text	00000038 _start
81139b10 g     O .bss	00000004 _alt_tick_rate
81128134 g     F .text	0000028c OSQPend
8111a310 g     F .text	000002e0 _strtoll_r
81130ad0 g     F .text	00000054 alt_avalon_sgdma_open
8112ade0 g     F .text	00000104 OSTimeDly
811179cc g     F .text	00000148 __lshift
81106b50 g     F .text	00000280 vOutAckHandlerTask
81139a96 g     O .bss	00000001 tempBoard
81132ae4 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
81139b14 g     O .bss	00000004 _alt_nticks
811220b0 g     F .text	000000fc read
8112b33c g     F .text	000000e8 alt_sys_init
811059ec g     F .text	00000048 Pattern_Generator_Status
8110b724 g     F .text	00000124 .hidden __floatsisf
8111ab30 g     F .text	000001d0 __ssprint_r
8110d6f0 g     F .text	00000060 _open_r
8110aba4 g     F .text	00000020 bTestSimucamCriticalHW
81109d2c g     F .text	0000009c ucCrc8
81102b3c g     F .text	00000060 ul_SpaceWire_Interface_Read_Register
81134fa8 g     F .text	00000118 __register_exitproc
81139b49 g     O .bss	00000001 OSTaskCtr
81107f00 g     F .text	0000004c SPWHTask
8113e078 g     O .bss	00002000 SPWETaskStk
81109038 g     F .text	00000048 siPosStr
8111e8b8 g     F .text	000000d0 strncmp
811058a4 g     F .text	0000005c b_Pattern_Generator_Write_Register
8112aee4 g     F .text	0000015c OSTimeDlyHMSM
81117694 g     F .text	000001f8 __multiply
8112fd40 g     F .text	00000068 altera_avalon_jtag_uart_close
81106158 g     F .text	00000050 v_spi_end
8110ab6c g     F .text	00000038 cGetNextChar
81107d38 g     F .text	0000004c SPWBTask
81139c50 g     O .bss	00000028 __malloc_current_mallinfo
811399ba g     O .rwdata	00000002 OSEventMax
81104f98 g     F .text	00000038 vEthReleaseReset
8111f848 g     F .text	00000078 .hidden __eqsf2
81117ee0 g     F .text	0000014c __d2b
81129354 g     F .text	00000110 OSSemPost
81139b7c g     O .bss	00000004 initialized
81123474 g     F .text	000000dc OSSchedUnlock
811061a8 g     F .text	00000168 RTCC_SPI_R_MAC
8112f6ec g     F .text	00000060 altera_avalon_jtag_uart_read_fd
8111a5f0 g     F .text	0000024c _strtoul_r
811343a4 g     F .text	000000dc alt_get_fd
81139b4c g     O .bss	00000004 OSMemFreeList
811235c0 g     F .text	000000b0 OSStatInit
811018bc g     F .text	0000005c DMA_OPEN_DEVICE
8115ddd8 g     O .bss	00000014 search_data
81133f1c g     F .text	00000128 alt_busy_sleep
81125e08 g     F .text	000000c4 OSFlagQuery
81139a4c g     O .bss	00000004 ul_spwc_d_interface_control_status_register_value
811399f0 g     O .rwdata	00000002 OSTaskCreateExtEn
8110ad68 g     F .text	0000006c _split_codec_status
81113f80 g     F .text	00000054 _close_r
8110a664 g     F .text	00000060 vCouldNotSendEthConfUART
81101294 g     F .text	000002e0 DDR2_MEMORY_RANDOM_WRITE_TEST
81139a44 g     O .bss	00000004 ul_spwc_b_interface_control_status_register_value
81106908 g     F .text	00000248 vInitialTask
81132f94 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
81134f2c g     F .text	0000007c memcmp
811238b0 g     F .text	00000020 OS_Dummy
8112f7ac g     F .text	00000050 altera_avalon_jtag_uart_close_fd
8115e440 g       *ABS*	00000000 __alt_stack_base
8112f7fc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
8110c9b8 g     F .text	000000cc _fwrite_r
8113309c g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
81113e2c g     F .text	00000154 __swsetup_r
8115bcd8 g     O .bss	000001e0 OSQTbl
8115a51c g     O .bss	0000001c xConfEth
811202f0 g     F .text	000008e8 .hidden __divdf3
81139a74 g     O .bss	00000004 ul_tran_f_interface_control_status_register_value
81115d24 g     F .text	00000118 __sfp
8115ddec g     O .bss	00000054 boot_sector_data
811019e4 g     F .text	00000044 DMA_DESCRIPTOR_BUFFER_EMPTY
81118144 g     F .text	00000078 __copybits
811380f0 g     O .rwdata	00000408 __malloc_av_
81115e70 g     F .text	00000004 __sinit_lock_release
8110540c g     F .text	00000078 i2c_stop
8110ae70 g     F .text	0000004c Verif_Error
8110aebc g     F .text	0000002c toInt
8110a04c g     F .text	00000044 vFailSendPreAckSenderSemaphore
81139b50 g     O .bss	00000004 OSTCBHighRdy
8110b938 g     F .text	00000718 .hidden __muldf3
8110dc24 g     F .text	00000054 __sread
8111617c g     F .text	00000034 fread
81139b54 g     O .bss	00000004 OSQFreeList
8113429c g     F .text	00000108 alt_find_file
811340a8 g     F .text	000000a4 alt_dev_llist_insert
811227f0 g     F .text	00000120 __malloc_lock
8110c490 g     F .text	00000028 _fprintf_r
81122210 g     F .text	000000b0 sbrk
8110e098 g     F .text	000021d8 ___svfprintf_internal_r
811309b8 g     F .text	00000058 alt_avalon_sgdma_start
81122afc g     F .text	00000140 OSEventNameSet
81115a78 g     F .text	0000005c _fflush_r
8111d95c g     F .text	000000c4 _calloc_r
81107fa4 g     F .text	000002d0 Init_Simucam_Tasks
81139b58 g     O .bss	00000001 OSRdyGrp
8110c478 g     F .text	00000018 fopen
81101918 g     F .text	00000044 DMA_CONFIG
81139a38 g       *ABS*	00000000 __bss_start
8110584c g     F .text	00000058 PGEN_READ_REG32
8110d5c8 g     F .text	00000128 memset
811046f8 g     F .text	00000058 ul_Transparent_Interface_RX_FIFO_Status_Read
81140078 g     O .bss	00002000 SPWDTaskStk
81107820 g     F .text	00000158 setPreParsedFreePos
81133aa8 g     F .text	00000058 alt_msgdma_open
8110641c g     F .text	000004ec vInAckHandlerTask
81100520 g     F .text	00000530 DDR2_EEPROM_DUMP
8110888c g     F .text	00000150 main
8110a1b0 g     F .text	00000060 vFailGetMutexReceiverTask
81139b0c g     O .bss	00000004 alt_envp
81142078 g     O .bss	00002000 SPWATaskStk
81139ae8 g     O .bss	00000004 __malloc_max_total_mem
8113337c g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
811059b8 g     F .text	00000034 v_Pattern_Generator_Reset
81109dc8 g     F .text	00000054 ucCrc8wInit
8112f74c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
81101e70 g     F .text	0000023c POWER_Read
811055b4 g     F .text	00000158 i2c_read
8111d944 g     F .text	00000018 __swbuf
81137920 g     O .rodata	00000100 OSUnMapTbl
8111f97c g     F .text	000000c8 .hidden __ltsf2
8112eb10 g     F .text	00000088 alt_up_sd_card_get_attributes
81115f50 g     F .text	0000022c _fread_r
8110a090 g     F .text	00000060 vFailGetCountSemaphoreSenderTask
81139a24 g     O .rwdata	00000008 alt_sgdma_list
811399ea g     O .rwdata	00000002 OSSemEn
8112b424 g     F .text	000000b4 Write_Sector_Data
8112ef10 g     F .text	00000620 alt_up_sd_card_write
81125a74 g     F .text	00000394 OSFlagPost
8110dd58 g     F .text	00000008 __sclose
811fa000 g       *ABS*	00000000 __alt_heap_limit
8111db10 g     F .text	00000014 fclose
81123a68 g     F .text	00000110 OS_EventTaskWait
8110de44 g     F .text	00000238 _strtol_r
8110c160 g     F .text	000001a8 .hidden __truncdfsf2
81139950 g     O .rwdata	00000004 ul_spwc_d_spacewire_link_control_status_register_value
81124660 g     F .text	000000cc OS_TaskStatStkChk
8112a238 g     F .text	00000150 OSTaskDelReq
811141d4 g     F .text	00001688 _dtoa_r
81133680 g     F .text	00000310 alt_msgdma_start_prefetcher_with_list_addr
8110cc74 g     F .text	0000080c _malloc_r
8111eae4 g     F .text	00000030 __ascii_wctomb
81126b9c g     F .text	000001c8 OSMutexCreate
81139998 g     O .rwdata	00000004 alt_errno
811331d4 g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
81123550 g     F .text	00000070 OSStart
81144078 g     O .bss	00002000 LogTaskStk
81105ac0 g     F .text	000004e0 POWER_SPI_RW
8111bf3c g     F .text	000000d4 __submore
81122790 g     F .text	00000060 __env_unlock
81116aa0 g     F .text	000000c4 _fwalk
81139a38 g     O .bss	00000004 InitialState
8112a6d4 g     F .text	000001d4 OSTaskResume
81126844 g     F .text	000000e8 OSMemQuery
811029a8 g     F .text	00000128 SPWC_READ_REG32
811399fc g     O .rwdata	00000002 OSTaskStatEn
81116fb0 g     F .text	0000005c _mbtowc_r
811399d6 g     O .rwdata	00000002 OSMemMax
81128694 g     F .text	00000170 OSQPostFront
811182e8 g     F .text	000000c8 putc
8111f694 g     F .text	00000084 .hidden __divsi3
81139b59 g     O .bss	00000004 OSRdyTbl
811399b0 g     O .rwdata	00000002 OSDebugEn
811161b0 g     F .text	00000124 _malloc_trim_r
81135274 g       *ABS*	00000000 __CTOR_END__
81139adc g     O .bss	00000008 xSdHandle
8110b328 g     F .text	000003fc .hidden __mulsf3
811399c8 g     O .rwdata	00000002 OSFlagNodeSize
81139a3c g     O .bss	00000004 pnt_memory
81139b88 g     O .bss	00000004 status_register
81139a10 g     O .rwdata	00000002 OSTmrCfgMax
8110a724 g     F .text	00000060 vFailSetPreAckSenderBuffer
81118ac0 g     F .text	000000dc strcmp
81139b90 g     O .bss	00000004 command_register
81127c50 g     F .text	000001ac OSQCreate
8112a388 g     F .text	00000198 OSTaskNameGet
811583cc g     O .bss	00000010 xReceivedACK
81128804 g     F .text	0000020c OSQPostOpt
81123670 g     F .text	00000220 OSTimeTick
811399f8 g     O .rwdata	00000002 OSTaskMax
81135274 g       *ABS*	00000000 __DTOR_LIST__
81128cc4 g     F .text	000000d8 OSSemCreate
81139a1c g     O .rwdata	00000002 OSTmrWheelSize
8110ac14 g     F .text	00000050 _reg_read
81127814 g     F .text	0000016c OSMutexQuery
81120bd8 g     F .text	00000088 .hidden __nedf2
811399f2 g     O .rwdata	00000002 OSTaskDelEn
81129464 g     F .text	00000110 OSSemQuery
81127dfc g     F .text	00000280 OSQDel
811283c0 g     F .text	0000016c OSQPendAbort
81139ac0 g     O .bss	00000004 xMutexPreParsed
8112b304 g     F .text	00000038 alt_irq_init
811221ac g     F .text	00000064 alt_release_fd
8112b5fc g     F .text	000000b4 get_cluster_flag
81133d78 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
8110dbb8 g     F .text	0000006c sprintf
811371d8 g     O .rodata	00000100 .hidden __clz_tab
81107d84 g     F .text	0000004c SPWCTask
8112bbb0 g     F .text	0000028c Write_File_Record_At_Offset
8110a210 g     F .text	00000060 vFailGetMutexTxUARTSenderTask
81139af4 g     O .bss	00000004 _PathLocale
81108ff0 g     F .text	00000048 usiGetIdCMD
8111a210 g     F .text	00000100 strtof
81134ee0 g     F .text	00000014 atexit
8111f8c0 g     F .text	000000bc .hidden __gesf2
8110dd60 g     F .text	0000004c strcspn
81113dcc g     F .text	00000060 _write_r
8110a888 g     F .text	00000044 vFailInAckHandlerTaskCreate
811233e8 g     F .text	0000008c OSSchedLock
81116d64 g     F .text	00000018 setlocale
8113313c g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8110daf4 g     F .text	0000003c scanf
81124e98 g     F .text	00000108 OSFlagCreate
8112be3c g     F .text	00000680 Check_for_DOS_FAT
8112dc88 g     F .text	000002c8 create_file
81118ab8 g     F .text	00000008 nanf
8113996c g     O .rwdata	00000004 _impure_ptr
81139b8c g     O .bss	00000004 CSD_register_w0
81139954 g     O .rwdata	00000004 ul_spwc_e_spacewire_link_control_status_register_value
81139b04 g     O .bss	00000004 alt_argc
81107e1c g     F .text	0000004c SPWETask
81146078 g     O .bss	00002000 SPWBTaskStk
8111585c g     F .text	0000021c __sflush_r
81116de8 g     F .text	000000ac _mbrtowc_r
81139c78 g     O .bss	00000400 szData
811341ac g     F .text	00000060 _do_dtors
81116d50 g     F .text	00000008 __locale_cjk_lang
811021dc g     F .text	000006a4 sense_log
811399c2 g     O .rwdata	00000002 OSEventMultiEn
8110c4dc g     F .text	00000004 _fseek_r
811583dc g     O .bss	00002000 vParserCommTask_stk
81109e1c g     F .text	00000068 printErrorTask
81148078 g     O .bss	00002000 SPWGTaskStk
8110d8cc g     F .text	000001d4 __srefill_r
81139ac4 g     O .bss	00000004 xMutexBuffer32
81124fa0 g     F .text	00000248 OSFlagDel
81139b60 g     O .bss	00000004 OSEventFreeList
81100020 g       .exceptions	00000000 alt_irq_entry
81116f6c g     F .text	00000044 __ascii_mbtowc
81117d70 g     F .text	00000064 __ulp
8112545c g     F .text	000005b8 OSFlagPend
81139a0e g     O .rwdata	00000002 OSTmrEn
81115e8c g     F .text	00000018 __fp_unlock_all
81107b14 g     F .text	0000019c setPreAckReceiverFreePos
81139984 g     O .rwdata	00000008 alt_fs_list
81139a7c g     O .bss	00000004 ul_tran_h_interface_control_status_register_value
8112c66c g     F .text	0000026c check_file_name_for_FAT16_compliance
81124460 g     F .text	00000074 OS_StrCopy
81139b98 g     O .bss	00000004 buffer_memory
81139a60 g     O .bss	00000004 ul_tran_a_interface_control_status_register_value
8110a5a4 g     F .text	00000060 vFailGetxMutexPreParsedParserRxTask
81102d90 g     F .text	00000328 b_SpaceWire_Interface_Mode_Control
81104750 g     F .text	00000054 b_Transparent_Interface_RX_FIFO_Status_Empty
811399d8 g     O .rwdata	00000002 OSMemNameSize
811046b4 g     F .text	00000044 v_Transparent_Interface_RX_FIFO_Reset
81134de0 g     F .text	00000020 OSInitHookEnd
8110a7e4 g     F .text	00000060 vFailSetPreAckReceiverBuffer
81139a04 g     O .rwdata	00000002 OSTCBPrioTblMax
81116d7c g     F .text	0000000c localeconv
81107230 g     F .text	000001e8 vReceiverUartTask
81139a00 g     O .rwdata	00000002 OSTaskStatStkChkEn
81139ac8 g     O .bss	00000004 xMutexBuffer128
8114a078 g     O .bss	00002000 MemDMATaskStk
81134480 g     F .text	00000050 alt_ic_isr_register
811399d4 g     O .rwdata	00000002 OSMemEn
81139a70 g     O .bss	00000004 ul_tran_e_interface_control_status_register_value
8110ca84 g     F .text	00000034 fwrite
81139b9c g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
811399de g     O .rwdata	00000002 OSMutexEn
81139948 g     O .rwdata	00000004 ul_spwc_b_spacewire_link_control_status_register_value
81107cec g     F .text	0000004c SPWATask
81139a38 g       *ABS*	00000000 _edata
81101574 g     F .text	000002d0 DDR2_MEMORY_RANDOM_READ_TEST
811312a0 g     F .text	00000060 altera_avalon_uart_read_fd
8115e440 g       *ABS*	00000000 _end
8115de40 g     O .bss	00000500 active_files
81139b64 g     O .bss	00000001 OSIntNesting
8110a2b4 g     F .text	00000044 vFailInitialization
8110498c g     F .text	00000050 uc_Transparent_Interface_TX_FIFO_Status_Used
81139acc g     O .bss	00000004 xSemCountBuffer32
8111db24 g     F .text	00000164 __fputwc
81113cfc g     F .text	00000068 vfscanf
8112df50 g     F .text	00000148 copy_file_record_name_to_string
8112fda8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
81102b9c g     F .text	000001f4 b_SpaceWire_Interface_Enable_Control
8112b040 g     F .text	000001d4 OSTimeDlyResume
8112c4bc g     F .text	000000ec Look_for_FAT16
81125310 g     F .text	0000014c OSFlagNameSet
81139ad0 g     O .bss	00000004 xMutexBuffer64
81105a34 g     F .text	0000008c Pattern_Generator_Configure_Initial_State
8112a8a8 g     F .text	000001c0 OSTaskStkChk
81134558 g     F .text	0000008c alt_ic_irq_disable
811399da g     O .rwdata	00000002 OSMemSize
8110a3c4 g     F .text	00000060 vFailSetCountSemaphorexBuffer32
81130b24 g     F .text	0000008c alt_avalon_sgdma_construct_descriptor
8110dc80 g     F .text	0000007c __swrite
81139974 g     O .rwdata	00000004 __malloc_trim_threshold
81116d44 g     F .text	0000000c __locale_msgcharset
81139b68 g     O .bss	00000004 OSTCBCur
81134ef4 g     F .text	00000038 exit
811275fc g     F .text	00000218 OSMutexPost
8112e354 g     F .text	000003b8 alt_up_sd_card_find_next
811399dc g     O .rwdata	00000002 OSMemTblSize
81116b64 g     F .text	000000c4 _fwalk_reent
81133514 g     F .text	00000098 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110b848 g     F .text	000000f0 .hidden __floatunsisf
81117b74 g     F .text	000001fc __mdiff
8110a33c g     F .text	00000044 vFailSenderCreate
8111f718 g     F .text	00000074 .hidden __modsi3
81139ad4 g     O .bss	00000004 xMutexSenderACK
81139964 g     O .rwdata	00000004 __ctype_ptr__
8110a784 g     F .text	00000060 vFailSetPreParsedBuffer
8112b524 g     F .text	000000d8 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
81115e68 g     F .text	00000004 __sfp_lock_release
8112324c g     F .text	00000058 OSInit
81105784 g     F .text	00000070 bSetPainelLeds
81132cb4 g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
81107f4c g     F .text	00000058 LogTask
81103878 g     F .text	00000054 b_SpaceWire_Interface_TimeCode_Arrived
8112ac4c g     F .text	00000124 OSTaskQuery
81128b6c g     F .text	000000a8 OS_QInit
811189e8 g     F .text	000000d0 __sccl
8110c36c g     F .text	0000000c atoi
811244d4 g     F .text	00000054 OS_StrLen
81126658 g     F .text	00000114 OSMemNameSet
811372d8 g     O .rodata	00000101 _ctype_
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110a484 g     F .text	00000060 vFailSetCountSemaphorexBuffer128
81103bd4 g     F .text	000000bc b_SpaceWire_Interface_Send_SpaceWire_Data
811399f6 g     O .rwdata	00000002 OSTaskProfileEn
81132b94 g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
81139ad8 g     O .bss	00000004 xTxUARTMutex
81139b6c g     O .bss	00000004 OSTime
8113997c g     O .rwdata	00000004 __mbtowc
81131888 g     F .text	00000054 altera_avalon_uart_close
8115beb8 g     O .bss	00000800 OSTaskIdleStk
8110c384 g     F .text	000000f4 _fopen_r
81104034 g     F .text	0000006c b_Transparent_Interface_Write_Register
81135240 g     F .text	00000034 _exit
81133df0 g     F .text	0000012c alt_alarm_start
811251e8 g     F .text	00000128 OSFlagNameGet
8112b214 g     F .text	0000005c OSTimeGet
81139a94 g     O .bss	00000001 error_code
8112eb98 g     F .text	00000378 alt_up_sd_card_read
8110cab8 g     F .text	000001bc __smakebuf_r
81104b74 g     F .text	00000148 b_Transparent_Interface_Send_SpaceWire_Data
81139a2c g     O .rwdata	00000008 alt_msgdma_list
8110ddac g     F .text	00000098 strlen
811060ac g     F .text	000000ac uc_spi_get_byte
811047f8 g     F .text	00000050 uc_Transparent_Interface_RX_FIFO_Status_Used
81134d60 g     F .text	00000020 OSTaskSwHook
81121f20 g     F .text	00000154 open
8115c6b8 g     O .bss	00000b40 OSEventTbl
81120c60 g     F .text	000000dc .hidden __gedf2
81139a54 g     O .bss	00000004 ul_spwc_f_interface_control_status_register_value
8115a3dc g     O .bss	00000010 xSenderACK
81134a8c g     F .text	0000003c alt_putchar
8115d1f8 g     O .bss	00000b64 OSTCBTbl
8111de2c g     F .text	00000830 __gethex
81129574 g     F .text	00000100 OSSemSet
81139980 g     O .rwdata	00000004 __wctomb
81108868 g     F .text	00000024 vVariablesInitialization
8111c2b8 g     F .text	00000018 __sprint_r
8110393c g     F .text	00000060 uc_SpaceWire_Interface_Get_TX_Div
8113995c g     O .rwdata	00000004 ul_spwc_g_spacewire_link_control_status_register_value
81109edc g     F .text	00000044 vFailCreateSemaphoreResources
81102ad0 g     F .text	0000006c b_SpaceWire_Interface_Write_Register
81139a34 g     O .rwdata	00000004 alt_priority_mask
81128d9c g     F .text	00000240 OSSemDel
81139b70 g     O .bss	00000004 OSFlagFreeList
81105ff0 g     F .text	000000bc v_spi_send_byte
81106310 g     F .text	000000c8 bSSDisplayConfig
811344d0 g     F .text	00000088 alt_ic_irq_enable
811399bc g     O .rwdata	00000002 OSEventNameSize
81112468 g     F .text	0000001c __vfprintf_internal
811057f4 g     F .text	00000058 PGEN_WRITE_REG32
81139b74 g     O .bss	00000001 OSStatRdy
8115dd5c g     O .bss	0000007c OSTCBPrioTbl
81131918 g     F .text	00000268 altera_avalon_uart_read
8111eb14 g     F .text	0000005c _wctomb_r
811226cc g     F .text	000000c4 __env_lock
81139a02 g     O .rwdata	00000002 OSTaskSwHookEn
811306fc g     F .text	00000084 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
81104540 g     F .text	00000174 v_Transparent_Interface_Interrupts_Flags_Clear
8114c078 g     O .bss	00002000 SPWCTaskStk
81120e30 g     F .text	000008fc .hidden __subdf3
8115a3ec g     O .bss	00000130 xPreParsed
81108d68 g     F .text	00000288 vSendEthConf
811175a8 g     F .text	000000b0 __lo0bits
81112540 g     F .text	000017bc __svfscanf_r
811399a0 g     O .rwdata	00000008 alt_alarm_list
8111c010 g     F .text	00000194 _ungetc_r
811399ca g     O .rwdata	00000002 OSFlagWidth
8113414c g     F .text	00000060 _do_ctors
8110195c g     F .text	00000044 DMA_BUSY
8111ea24 g     F .text	000000c0 wcrtomb
8112196c g     F .text	000000d0 close
811042f4 g     F .text	000001f4 v_Transparent_Interface_Interrupts_Enable_Control
81139b1c g     O .bss	00000004 alt_envsem
81103b4c g     F .text	00000088 b_SpaceWire_Interface_Write_TX_Data
81139b78 g     O .bss	00000004 OSIdleCtrRun
81107e68 g     F .text	0000004c SPWFTask
81123890 g     F .text	00000020 OSVersion
81139a14 g     O .rwdata	00000002 OSTmrCfgWheelSize
81101844 g     F .text	00000078 xorshift32
8112ad70 g     F .text	00000070 OS_TaskStkClr
8110ab00 g     F .text	00000034 siOpenFile
811399ee g     O .rwdata	00000002 OSTaskCreateEn
81109fc4 g     F .text	00000044 vFailSendPreParsedSemaphore
8112c990 g     F .text	0000029c match_file_record_to_name_ext
81123e80 g     F .text	00000068 OS_EventWaitListInit
81131104 g     F .text	000000a8 alt_avalon_sgdma_init
8111dcac g     F .text	00000080 fputwc
81109f64 g     F .text	00000060 vFailSendxSemCommInit
81134e00 g     F .text	00000020 OSTaskIdleHook
81115e6c g     F .text	00000004 __sinit_lock_acquire
8111731c g     F .text	00000120 __multadd
8112aa68 g     F .text	000001e4 OSTaskSuspend
811172f4 g     F .text	00000028 _Bfree
81124528 g     F .text	0000005c OS_TaskIdle
81139a1a g     O .rwdata	00000002 OSTmrTblSize
81128a10 g     F .text	0000015c OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
81100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
8110002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
81100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
8110003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
81100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
8110004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
81100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
8110005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
81100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
8110006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
81100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
8110007c:	10000326 	beq	r2,zero,8110008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
81100080:	20000226 	beq	r4,zero,8110008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100084:	11000fc0 	call	811000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
81100088:	00000706 	br	811000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
8110008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
81100098:	11001d00 	call	811001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
8110009c:	1000021e 	bne	r2,zero,811000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000f8:	ef80083a 	eret

811000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
811000fc:	defff904 	addi	sp,sp,-28
81100100:	dfc00615 	stw	ra,24(sp)
81100104:	df000515 	stw	fp,20(sp)
81100108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110010c:	11232a40 	call	811232a4 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100110:	0005313a 	rdctl	r2,ipending
81100114:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100124:	00800044 	movi	r2,1
81100128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110012c:	e0fffb17 	ldw	r3,-20(fp)
81100130:	e0bffc17 	ldw	r2,-16(fp)
81100134:	1884703a 	and	r2,r3,r2
81100138:	10001426 	beq	r2,zero,8110018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110013c:	00a045b4 	movhi	r2,33046
81100140:	10b8d004 	addi	r2,r2,-7360
81100144:	e0fffd17 	ldw	r3,-12(fp)
81100148:	180690fa 	slli	r3,r3,3
8110014c:	10c5883a 	add	r2,r2,r3
81100150:	10c00017 	ldw	r3,0(r2)
81100154:	00a045b4 	movhi	r2,33046
81100158:	10b8d004 	addi	r2,r2,-7360
8110015c:	e13ffd17 	ldw	r4,-12(fp)
81100160:	200890fa 	slli	r4,r4,3
81100164:	1105883a 	add	r2,r2,r4
81100168:	10800104 	addi	r2,r2,4
8110016c:	10800017 	ldw	r2,0(r2)
81100170:	1009883a 	mov	r4,r2
81100174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110017c:	0005313a 	rdctl	r2,ipending
81100180:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100184:	e0bfff17 	ldw	r2,-4(fp)
81100188:	00000706 	br	811001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
8110018c:	e0bffc17 	ldw	r2,-16(fp)
81100190:	1085883a 	add	r2,r2,r2
81100194:	e0bffc15 	stw	r2,-16(fp)
      i++;
81100198:	e0bffd17 	ldw	r2,-12(fp)
8110019c:	10800044 	addi	r2,r2,1
811001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001a4:	003fe106 	br	8110012c <__reset+0xfb0e012c>

    active = alt_irq_pending ();
811001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001ac:	e0bffb17 	ldw	r2,-20(fp)
811001b0:	103fdb1e 	bne	r2,zero,81100120 <__reset+0xfb0e0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001b4:	11232f00 	call	811232f0 <OSIntExit>
}
811001b8:	0001883a 	nop
811001bc:	e037883a 	mov	sp,fp
811001c0:	dfc00117 	ldw	ra,4(sp)
811001c4:	df000017 	ldw	fp,0(sp)
811001c8:	dec00204 	addi	sp,sp,8
811001cc:	f800283a 	ret

811001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001d0:	defffb04 	addi	sp,sp,-20
811001d4:	dfc00415 	stw	ra,16(sp)
811001d8:	df000315 	stw	fp,12(sp)
811001dc:	df000304 	addi	fp,sp,12
811001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001e4:	000531fa 	rdctl	r2,exception
811001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
811001ec:	e0bffd17 	ldw	r2,-12(fp)
811001f0:	10801f0c 	andi	r2,r2,124
811001f4:	1004d0ba 	srli	r2,r2,2
811001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
811001fc:	0005333a 	rdctl	r2,badaddr
81100200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
81100204:	d0a09c17 	ldw	r2,-32144(gp)
81100208:	10000726 	beq	r2,zero,81100228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
8110020c:	d0a09c17 	ldw	r2,-32144(gp)
81100210:	e0fffd17 	ldw	r3,-12(fp)
81100214:	e1bffe17 	ldw	r6,-8(fp)
81100218:	e17fff17 	ldw	r5,-4(fp)
8110021c:	1809883a 	mov	r4,r3
81100220:	103ee83a 	callr	r2
81100224:	00000206 	br	81100230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
8110022c:	0005883a 	mov	r2,zero
}
81100230:	e037883a 	mov	sp,fp
81100234:	dfc00117 	ldw	ra,4(sp)
81100238:	df000017 	ldw	fp,0(sp)
8110023c:	dec00204 	addi	sp,sp,8
81100240:	f800283a 	ret

Disassembly of section .text:

81100244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
81100244:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100248:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
8110024c:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
81100250:	d6865114 	ori	gp,gp,6468
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
81100254:	00a044f4 	movhi	r2,33043
    ori r2, r2, %lo(__bss_start)
81100258:	10a68e14 	ori	r2,r2,39480

    movhi r3, %hi(__bss_end)
8110025c:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
81100260:	18f91014 	ori	r3,r3,58432

    beq r2, r3, 1f
81100264:	10c00326 	beq	r2,r3,81100274 <_start+0x30>

0:
    stw zero, (r2)
81100268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
8110026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100270:	10fffd36 	bltu	r2,r3,81100268 <__reset+0xfb0e0268>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100274:	1121d640 	call	81121d64 <alt_main>

81100278 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100278:	003fff06 	br	81100278 <__reset+0xfb0e0278>

8110027c <DDR2_EEPROM_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_TEST(alt_u8 MemoryId){
8110027c:	defff604 	addi	sp,sp,-40
81100280:	dfc00915 	stw	ra,36(sp)
81100284:	df000815 	stw	fp,32(sp)
81100288:	df000804 	addi	fp,sp,32
8110028c:	2005883a 	mov	r2,r4
81100290:	e0bfff05 	stb	r2,-4(fp)

  printf("===== DE4 DDR2 EEPROM Test =====\n");
81100294:	012044f4 	movhi	r4,33043
81100298:	21149d04 	addi	r4,r4,21108
8110029c:	110d89c0 	call	8110d89c <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002a0:	00bfe804 	movi	r2,-96
811002a4:	e0bffd05 	stb	r2,-12(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
811002a8:	00800044 	movi	r2,1
811002ac:	e0bff915 	stw	r2,-28(fp)
  switch (MemoryId) {
811002b0:	e0bfff03 	ldbu	r2,-4(fp)
811002b4:	10c00060 	cmpeqi	r3,r2,1
811002b8:	1800031e 	bne	r3,zero,811002c8 <DDR2_EEPROM_TEST+0x4c>
811002bc:	108000a0 	cmpeqi	r2,r2,2
811002c0:	1000081e 	bne	r2,zero,811002e4 <DDR2_EEPROM_TEST+0x68>
811002c4:	00000e06 	br	81100300 <DDR2_EEPROM_TEST+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
811002c8:	00a00034 	movhi	r2,32768
811002cc:	10817404 	addi	r2,r2,1488
811002d0:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
811002d4:	00a00034 	movhi	r2,32768
811002d8:	10817804 	addi	r2,r2,1504
811002dc:	e0bffb15 	stw	r2,-20(fp)
    break;
811002e0:	00000d06 	br	81100318 <DDR2_EEPROM_TEST+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
811002e4:	00a00034 	movhi	r2,32768
811002e8:	10815004 	addi	r2,r2,1344
811002ec:	e0bffa15 	stw	r2,-24(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
811002f0:	00a00034 	movhi	r2,32768
811002f4:	10815404 	addi	r2,r2,1360
811002f8:	e0bffb15 	stw	r2,-20(fp)
    break;
811002fc:	00000606 	br	81100318 <DDR2_EEPROM_TEST+0x9c>
    default:
      bSuccess = FALSE;
81100300:	e03ff915 	stw	zero,-28(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100304:	012044f4 	movhi	r4,33043
81100308:	2114a604 	addi	r4,r4,21144
8110030c:	110d89c0 	call	8110d89c <puts>
      return bSuccess;
81100310:	e0bff917 	ldw	r2,-28(fp)
81100314:	00007d06 	br	8110050c <DDR2_EEPROM_TEST+0x290>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
81100318:	012044f4 	movhi	r4,33043
8110031c:	2114b204 	addi	r4,r4,21192
81100320:	110d89c0 	call	8110d89c <puts>
  usleep(20*1000);
81100324:	01138804 	movi	r4,20000
81100328:	11224640 	call	81122464 <usleep>
  for(i = 0; i < 256 && bSuccess; i++){
8110032c:	e03ffc15 	stw	zero,-16(fp)
81100330:	00002006 	br	811003b4 <DDR2_EEPROM_TEST+0x138>
    ControlAddr = i;
81100334:	e0bffc17 	ldw	r2,-16(fp)
81100338:	e0bffd45 	stb	r2,-11(fp)
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, ControlAddr, &Value);
8110033c:	e0bffd03 	ldbu	r2,-12(fp)
81100340:	10c03fcc 	andi	r3,r2,255
81100344:	18c0201c 	xori	r3,r3,128
81100348:	18ffe004 	addi	r3,r3,-128
8110034c:	e13ffd43 	ldbu	r4,-11(fp)
81100350:	e0bffe04 	addi	r2,fp,-8
81100354:	d8800015 	stw	r2,0(sp)
81100358:	200f883a 	mov	r7,r4
8110035c:	180d883a 	mov	r6,r3
81100360:	e17ffb17 	ldw	r5,-20(fp)
81100364:	e13ffa17 	ldw	r4,-24(fp)
81100368:	11051280 	call	81105128 <I2C_Read>
8110036c:	e0bff915 	stw	r2,-28(fp)
    if (bSuccess){
81100370:	e0bff917 	ldw	r2,-28(fp)
81100374:	10000926 	beq	r2,zero,8110039c <DDR2_EEPROM_TEST+0x120>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
81100378:	e0bffd43 	ldbu	r2,-11(fp)
8110037c:	e0fffe03 	ldbu	r3,-8(fp)
81100380:	18c03fcc 	andi	r3,r3,255
81100384:	180d883a 	mov	r6,r3
81100388:	100b883a 	mov	r5,r2
8110038c:	012044f4 	movhi	r4,33043
81100390:	2114b804 	addi	r4,r4,21216
81100394:	110d7800 	call	8110d780 <printf>
81100398:	00000306 	br	811003a8 <DDR2_EEPROM_TEST+0x12c>
    }else{
      printf("Failed to read EEPROM\n");
8110039c:	012044f4 	movhi	r4,33043
811003a0:	2114bd04 	addi	r4,r4,21236
811003a4:	110d89c0 	call	8110d89c <puts>
  }
  
  alt_u8 ControlAddr, Value;
  printf("DDR2 EEPROM Read Test\n");
  usleep(20*1000);
  for(i = 0; i < 256 && bSuccess; i++){
811003a8:	e0bffc17 	ldw	r2,-16(fp)
811003ac:	10800044 	addi	r2,r2,1
811003b0:	e0bffc15 	stw	r2,-16(fp)
811003b4:	e0bffc17 	ldw	r2,-16(fp)
811003b8:	10804008 	cmpgei	r2,r2,256
811003bc:	1000021e 	bne	r2,zero,811003c8 <DDR2_EEPROM_TEST+0x14c>
811003c0:	e0bff917 	ldw	r2,-28(fp)
811003c4:	103fdb1e 	bne	r2,zero,81100334 <__reset+0xfb0e0334>
      printf("EEPROM[%03d]=%02Xh\n", ControlAddr, Value);
    }else{
      printf("Failed to read EEPROM\n");
    }
  }
  if (bSuccess){
811003c8:	e0bff917 	ldw	r2,-28(fp)
811003cc:	10000426 	beq	r2,zero,811003e0 <DDR2_EEPROM_TEST+0x164>
    printf("DDR2 EEPROM Read Test Completed\n\n");
811003d0:	012044f4 	movhi	r4,33043
811003d4:	2114c304 	addi	r4,r4,21260
811003d8:	110d89c0 	call	8110d89c <puts>
811003dc:	00000306 	br	811003ec <DDR2_EEPROM_TEST+0x170>
  } else {
    printf("DDR2 EEPROM Read Test Failed\n\n");
811003e0:	012044f4 	movhi	r4,33043
811003e4:	2114cc04 	addi	r4,r4,21296
811003e8:	110d89c0 	call	8110d89c <puts>
  }
  
  printf("DDR2 EEPROM Write Test\n");
811003ec:	012044f4 	movhi	r4,33043
811003f0:	2114d404 	addi	r4,r4,21328
811003f4:	110d89c0 	call	8110d89c <puts>
  alt_u8 WriteData = 0x12, TestAddr = 128;
811003f8:	00800484 	movi	r2,18
811003fc:	e0bffd85 	stb	r2,-10(fp)
81100400:	00bfe004 	movi	r2,-128
81100404:	e0bffdc5 	stb	r2,-9(fp)
  alt_u8 ReadData;
  usleep(20*1000);
81100408:	01138804 	movi	r4,20000
8110040c:	11224640 	call	81122464 <usleep>
  bSuccess = I2C_Write(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, WriteData);
81100410:	e0bffd03 	ldbu	r2,-12(fp)
81100414:	10c03fcc 	andi	r3,r2,255
81100418:	18c0201c 	xori	r3,r3,128
8110041c:	18ffe004 	addi	r3,r3,-128
81100420:	e13ffdc3 	ldbu	r4,-9(fp)
81100424:	e0bffd83 	ldbu	r2,-10(fp)
81100428:	d8800015 	stw	r2,0(sp)
8110042c:	200f883a 	mov	r7,r4
81100430:	180d883a 	mov	r6,r3
81100434:	e17ffb17 	ldw	r5,-20(fp)
81100438:	e13ffa17 	ldw	r4,-24(fp)
8110043c:	11050500 	call	81105050 <I2C_Write>
81100440:	e0bff915 	stw	r2,-28(fp)
  if (!bSuccess){
81100444:	e0bff917 	ldw	r2,-28(fp)
81100448:	1000041e 	bne	r2,zero,8110045c <DDR2_EEPROM_TEST+0x1e0>
    printf("Failed to write EEPROM\n");            
8110044c:	012044f4 	movhi	r4,33043
81100450:	2114da04 	addi	r4,r4,21352
81100454:	110d89c0 	call	8110d89c <puts>
81100458:	00002006 	br	811004dc <DDR2_EEPROM_TEST+0x260>
  } else {
    bSuccess = I2C_Read(I2cSclBase, I2cSdaBase, DeviceAddr, TestAddr, &ReadData);
8110045c:	e0bffd03 	ldbu	r2,-12(fp)
81100460:	10c03fcc 	andi	r3,r2,255
81100464:	18c0201c 	xori	r3,r3,128
81100468:	18ffe004 	addi	r3,r3,-128
8110046c:	e13ffdc3 	ldbu	r4,-9(fp)
81100470:	e0bffe44 	addi	r2,fp,-7
81100474:	d8800015 	stw	r2,0(sp)
81100478:	200f883a 	mov	r7,r4
8110047c:	180d883a 	mov	r6,r3
81100480:	e17ffb17 	ldw	r5,-20(fp)
81100484:	e13ffa17 	ldw	r4,-24(fp)
81100488:	11051280 	call	81105128 <I2C_Read>
8110048c:	e0bff915 	stw	r2,-28(fp)
    if (!bSuccess){
81100490:	e0bff917 	ldw	r2,-28(fp)
81100494:	1000041e 	bne	r2,zero,811004a8 <DDR2_EEPROM_TEST+0x22c>
      printf("Failed to read EEPROM for verify\n");            
81100498:	012044f4 	movhi	r4,33043
8110049c:	2114e004 	addi	r4,r4,21376
811004a0:	110d89c0 	call	8110d89c <puts>
811004a4:	00000d06 	br	811004dc <DDR2_EEPROM_TEST+0x260>
    } else {
      if (ReadData != WriteData){
811004a8:	e0bffe43 	ldbu	r2,-7(fp)
811004ac:	10c03fcc 	andi	r3,r2,255
811004b0:	e0bffd83 	ldbu	r2,-10(fp)
811004b4:	18800926 	beq	r3,r2,811004dc <DDR2_EEPROM_TEST+0x260>
        bSuccess = FALSE;
811004b8:	e03ff915 	stw	zero,-28(fp)
        printf("Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n", ReadData, WriteData);
811004bc:	e0bffe43 	ldbu	r2,-7(fp)
811004c0:	10803fcc 	andi	r2,r2,255
811004c4:	e0fffd83 	ldbu	r3,-10(fp)
811004c8:	180d883a 	mov	r6,r3
811004cc:	100b883a 	mov	r5,r2
811004d0:	012044f4 	movhi	r4,33043
811004d4:	2114e904 	addi	r4,r4,21412
811004d8:	110d7800 	call	8110d780 <printf>
      }
    }
  }
  if (bSuccess){
811004dc:	e0bff917 	ldw	r2,-28(fp)
811004e0:	10000426 	beq	r2,zero,811004f4 <DDR2_EEPROM_TEST+0x278>
    printf("DDR2 EEPROM Write Test Completed\n\n");
811004e4:	012044f4 	movhi	r4,33043
811004e8:	2114f804 	addi	r4,r4,21472
811004ec:	110d89c0 	call	8110d89c <puts>
811004f0:	00000306 	br	81100500 <DDR2_EEPROM_TEST+0x284>
  } else {
    printf("DDR2 EEPROM Write Test Failed\n\n");
811004f4:	012044f4 	movhi	r4,33043
811004f8:	21150104 	addi	r4,r4,21508
811004fc:	110d89c0 	call	8110d89c <puts>
  }
  printf("\n");
81100500:	01000284 	movi	r4,10
81100504:	110d7c40 	call	8110d7c4 <putchar>

  return bSuccess;
81100508:	e0bff917 	ldw	r2,-28(fp)
}
8110050c:	e037883a 	mov	sp,fp
81100510:	dfc00117 	ldw	ra,4(sp)
81100514:	df000017 	ldw	fp,0(sp)
81100518:	dec00204 	addi	sp,sp,8
8110051c:	f800283a 	ret

81100520 <DDR2_EEPROM_DUMP>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_EEPROM_DUMP(alt_u8 MemoryId){
81100520:	deffb704 	addi	sp,sp,-292
81100524:	dfc04815 	stw	ra,288(sp)
81100528:	df004715 	stw	fp,284(sp)
8110052c:	df004704 	addi	fp,sp,284
81100530:	2005883a 	mov	r2,r4
81100534:	e0bfff05 	stb	r2,-4(fp)
 
  printf("===== DE4 DDR2 EEPROM Dump =====\n");
81100538:	012044f4 	movhi	r4,33043
8110053c:	21150904 	addi	r4,r4,21540
81100540:	110d89c0 	call	8110d89c <puts>
  const alt_u8 DeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100544:	00bfe804 	movi	r2,-96
81100548:	e0bfbd05 	stb	r2,-268(fp)
  bool bSuccess;
  alt_u32 I2cSclBase;
  alt_u32 I2cSdaBase;
  int i;
  
  bSuccess = TRUE;
8110054c:	00800044 	movi	r2,1
81100550:	e0bfbe15 	stw	r2,-264(fp)
  switch (MemoryId) {
81100554:	e0bfff03 	ldbu	r2,-4(fp)
81100558:	10c00060 	cmpeqi	r3,r2,1
8110055c:	1800031e 	bne	r3,zero,8110056c <DDR2_EEPROM_DUMP+0x4c>
81100560:	108000a0 	cmpeqi	r2,r2,2
81100564:	1000081e 	bne	r2,zero,81100588 <DDR2_EEPROM_DUMP+0x68>
81100568:	00000e06 	br	811005a4 <DDR2_EEPROM_DUMP+0x84>
    case DDR2_M1_ID:
      I2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110056c:	00a00034 	movhi	r2,32768
81100570:	10817404 	addi	r2,r2,1488
81100574:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100578:	00a00034 	movhi	r2,32768
8110057c:	10817804 	addi	r2,r2,1504
81100580:	e0bfbb15 	stw	r2,-276(fp)
    break;
81100584:	00000d06 	br	811005bc <DDR2_EEPROM_DUMP+0x9c>
    case DDR2_M2_ID:
      I2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100588:	00a00034 	movhi	r2,32768
8110058c:	10815004 	addi	r2,r2,1344
81100590:	e0bfba15 	stw	r2,-280(fp)
      I2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;      
81100594:	00a00034 	movhi	r2,32768
81100598:	10815404 	addi	r2,r2,1360
8110059c:	e0bfbb15 	stw	r2,-276(fp)
    break;
811005a0:	00000606 	br	811005bc <DDR2_EEPROM_DUMP+0x9c>
    default:
      bSuccess = FALSE;
811005a4:	e03fbe15 	stw	zero,-264(fp)
	  printf("DR2 Memory ID not identified!! Aborting Dump \n");
811005a8:	012044f4 	movhi	r4,33043
811005ac:	21151204 	addi	r4,r4,21576
811005b0:	110d89c0 	call	8110d89c <puts>
      return bSuccess;
811005b4:	e0bfbe17 	ldw	r2,-264(fp)
811005b8:	00012006 	br	81100a3c <DDR2_EEPROM_DUMP+0x51c>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
811005bc:	e0bfbd03 	ldbu	r2,-268(fp)
811005c0:	10c03fcc 	andi	r3,r2,255
811005c4:	18c0201c 	xori	r3,r3,128
811005c8:	18ffe004 	addi	r3,r3,-128
811005cc:	e13fbf04 	addi	r4,fp,-260
811005d0:	00804004 	movi	r2,256
811005d4:	d8800015 	stw	r2,0(sp)
811005d8:	200f883a 	mov	r7,r4
811005dc:	180d883a 	mov	r6,r3
811005e0:	e17fbb17 	ldw	r5,-276(fp)
811005e4:	e13fba17 	ldw	r4,-280(fp)
811005e8:	11052280 	call	81105228 <I2C_MultipleRead>
811005ec:	e0bfbe15 	stw	r2,-264(fp)
  if (bSuccess){
811005f0:	e0bfbe17 	ldw	r2,-264(fp)
811005f4:	10010b26 	beq	r2,zero,81100a24 <DDR2_EEPROM_DUMP+0x504>
    for(i = 0; i < 256 && bSuccess; i++){
811005f8:	e03fbc15 	stw	zero,-272(fp)
811005fc:	00010306 	br	81100a0c <DDR2_EEPROM_DUMP+0x4ec>
      printf("EEPROM[%03d]=%02Xh ", i, szData[i]);
81100600:	e0ffbf04 	addi	r3,fp,-260
81100604:	e0bfbc17 	ldw	r2,-272(fp)
81100608:	1885883a 	add	r2,r3,r2
8110060c:	10800003 	ldbu	r2,0(r2)
81100610:	10803fcc 	andi	r2,r2,255
81100614:	100d883a 	mov	r6,r2
81100618:	e17fbc17 	ldw	r5,-272(fp)
8110061c:	012044f4 	movhi	r4,33043
81100620:	21151e04 	addi	r4,r4,21624
81100624:	110d7800 	call	8110d780 <printf>
      if (i == 0)
81100628:	e0bfbc17 	ldw	r2,-272(fp)
8110062c:	1000041e 	bne	r2,zero,81100640 <DDR2_EEPROM_DUMP+0x120>
        printf("(Number of SPD Bytes Used)\n");
81100630:	012044f4 	movhi	r4,33043
81100634:	21152304 	addi	r4,r4,21644
81100638:	110d89c0 	call	8110d89c <puts>
8110063c:	0000f006 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 1)
81100640:	e0bfbc17 	ldw	r2,-272(fp)
81100644:	10800058 	cmpnei	r2,r2,1
81100648:	1000041e 	bne	r2,zero,8110065c <DDR2_EEPROM_DUMP+0x13c>
        printf("(Total Number of Bytes in SPD Device, Log2(N))\n");
8110064c:	012044f4 	movhi	r4,33043
81100650:	21152a04 	addi	r4,r4,21672
81100654:	110d89c0 	call	8110d89c <puts>
81100658:	0000e906 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 2)
8110065c:	e0bfbc17 	ldw	r2,-272(fp)
81100660:	10800098 	cmpnei	r2,r2,2
81100664:	1000041e 	bne	r2,zero,81100678 <DDR2_EEPROM_DUMP+0x158>
        printf("(Basic Memory Type[08h:DDR2])\n");
81100668:	012044f4 	movhi	r4,33043
8110066c:	21153604 	addi	r4,r4,21720
81100670:	110d89c0 	call	8110d89c <puts>
81100674:	0000e206 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 3)
81100678:	e0bfbc17 	ldw	r2,-272(fp)
8110067c:	108000d8 	cmpnei	r2,r2,3
81100680:	1000041e 	bne	r2,zero,81100694 <DDR2_EEPROM_DUMP+0x174>
        printf("(Number of Row Addresses on Assembly)\n");
81100684:	012044f4 	movhi	r4,33043
81100688:	21153e04 	addi	r4,r4,21752
8110068c:	110d89c0 	call	8110d89c <puts>
81100690:	0000db06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 4)
81100694:	e0bfbc17 	ldw	r2,-272(fp)
81100698:	10800118 	cmpnei	r2,r2,4
8110069c:	1000041e 	bne	r2,zero,811006b0 <DDR2_EEPROM_DUMP+0x190>
        printf("(Number of Column Addresses on Assembly)\n");
811006a0:	012044f4 	movhi	r4,33043
811006a4:	21154804 	addi	r4,r4,21792
811006a8:	110d89c0 	call	8110d89c <puts>
811006ac:	0000d406 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 5)
811006b0:	e0bfbc17 	ldw	r2,-272(fp)
811006b4:	10800158 	cmpnei	r2,r2,5
811006b8:	1000041e 	bne	r2,zero,811006cc <DDR2_EEPROM_DUMP+0x1ac>
        printf("(DIMM Height and Module Rank Number[b2b1b0+1])\n");
811006bc:	012044f4 	movhi	r4,33043
811006c0:	21155304 	addi	r4,r4,21836
811006c4:	110d89c0 	call	8110d89c <puts>
811006c8:	0000cd06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 6)
811006cc:	e0bfbc17 	ldw	r2,-272(fp)
811006d0:	10800198 	cmpnei	r2,r2,6
811006d4:	1000041e 	bne	r2,zero,811006e8 <DDR2_EEPROM_DUMP+0x1c8>
        printf("(Module Data Width)\n");
811006d8:	012044f4 	movhi	r4,33043
811006dc:	21155f04 	addi	r4,r4,21884
811006e0:	110d89c0 	call	8110d89c <puts>
811006e4:	0000c606 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 7)
811006e8:	e0bfbc17 	ldw	r2,-272(fp)
811006ec:	108001d8 	cmpnei	r2,r2,7
811006f0:	1000041e 	bne	r2,zero,81100704 <DDR2_EEPROM_DUMP+0x1e4>
        printf("(Module Data Width, Continued)\n");
811006f4:	012044f4 	movhi	r4,33043
811006f8:	21156404 	addi	r4,r4,21904
811006fc:	110d89c0 	call	8110d89c <puts>
81100700:	0000bf06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 16)
81100704:	e0bfbc17 	ldw	r2,-272(fp)
81100708:	10800418 	cmpnei	r2,r2,16
8110070c:	1000041e 	bne	r2,zero,81100720 <DDR2_EEPROM_DUMP+0x200>
        printf("(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
81100710:	012044f4 	movhi	r4,33043
81100714:	21156c04 	addi	r4,r4,21936
81100718:	110d89c0 	call	8110d89c <puts>
8110071c:	0000b806 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 13)
81100720:	e0bfbc17 	ldw	r2,-272(fp)
81100724:	10800358 	cmpnei	r2,r2,13
81100728:	1000041e 	bne	r2,zero,8110073c <DDR2_EEPROM_DUMP+0x21c>
        printf("(Primary SDRAM width)\n");
8110072c:	012044f4 	movhi	r4,33043
81100730:	21157904 	addi	r4,r4,21988
81100734:	110d89c0 	call	8110d89c <puts>
81100738:	0000b106 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 14)
8110073c:	e0bfbc17 	ldw	r2,-272(fp)
81100740:	10800398 	cmpnei	r2,r2,14
81100744:	1000041e 	bne	r2,zero,81100758 <DDR2_EEPROM_DUMP+0x238>
        printf("(ECC SDRAM width)\n");
81100748:	012044f4 	movhi	r4,33043
8110074c:	21157f04 	addi	r4,r4,22012
81100750:	110d89c0 	call	8110d89c <puts>
81100754:	0000aa06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 17)
81100758:	e0bfbc17 	ldw	r2,-272(fp)
8110075c:	10800458 	cmpnei	r2,r2,17
81100760:	1000041e 	bne	r2,zero,81100774 <DDR2_EEPROM_DUMP+0x254>
        printf("(Banks per SDRAM device)\n");
81100764:	012044f4 	movhi	r4,33043
81100768:	21158404 	addi	r4,r4,22032
8110076c:	110d89c0 	call	8110d89c <puts>
81100770:	0000a306 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 18)
81100774:	e0bfbc17 	ldw	r2,-272(fp)
81100778:	10800498 	cmpnei	r2,r2,18
8110077c:	1000041e 	bne	r2,zero,81100790 <DDR2_EEPROM_DUMP+0x270>
        printf("(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
81100780:	012044f4 	movhi	r4,33043
81100784:	21158b04 	addi	r4,r4,22060
81100788:	110d89c0 	call	8110d89c <puts>
8110078c:	00009c06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 20)
81100790:	e0bfbc17 	ldw	r2,-272(fp)
81100794:	10800518 	cmpnei	r2,r2,20
81100798:	1000041e 	bne	r2,zero,811007ac <DDR2_EEPROM_DUMP+0x28c>
        printf("(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
8110079c:	012044f4 	movhi	r4,33043
811007a0:	21159804 	addi	r4,r4,22112
811007a4:	110d89c0 	call	8110d89c <puts>
811007a8:	00009506 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 22)
811007ac:	e0bfbc17 	ldw	r2,-272(fp)
811007b0:	10800598 	cmpnei	r2,r2,22
811007b4:	1000041e 	bne	r2,zero,811007c8 <DDR2_EEPROM_DUMP+0x2a8>
        printf("(Memory Chip feature bitmap)\n");
811007b8:	012044f4 	movhi	r4,33043
811007bc:	2115aa04 	addi	r4,r4,22184
811007c0:	110d89c0 	call	8110d89c <puts>
811007c4:	00008e06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 27)
811007c8:	e0bfbc17 	ldw	r2,-272(fp)
811007cc:	108006d8 	cmpnei	r2,r2,27
811007d0:	1000041e 	bne	r2,zero,811007e4 <DDR2_EEPROM_DUMP+0x2c4>
        printf("(Minimun row precharge time[tRP;nsx4])\n");
811007d4:	012044f4 	movhi	r4,33043
811007d8:	2115b204 	addi	r4,r4,22216
811007dc:	110d89c0 	call	8110d89c <puts>
811007e0:	00008706 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 28)
811007e4:	e0bfbc17 	ldw	r2,-272(fp)
811007e8:	10800718 	cmpnei	r2,r2,28
811007ec:	1000041e 	bne	r2,zero,81100800 <DDR2_EEPROM_DUMP+0x2e0>
        printf("(Minimun row active-row activce delay[tRRD;nsx4])\n");
811007f0:	012044f4 	movhi	r4,33043
811007f4:	2115bc04 	addi	r4,r4,22256
811007f8:	110d89c0 	call	8110d89c <puts>
811007fc:	00008006 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 29)
81100800:	e0bfbc17 	ldw	r2,-272(fp)
81100804:	10800758 	cmpnei	r2,r2,29
81100808:	1000041e 	bne	r2,zero,8110081c <DDR2_EEPROM_DUMP+0x2fc>
        printf("(Minimun RAS to CAS delay[tRCD;nsx4])\n");
8110080c:	012044f4 	movhi	r4,33043
81100810:	2115c904 	addi	r4,r4,22308
81100814:	110d89c0 	call	8110d89c <puts>
81100818:	00007906 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 30)
8110081c:	e0bfbc17 	ldw	r2,-272(fp)
81100820:	10800798 	cmpnei	r2,r2,30
81100824:	1000041e 	bne	r2,zero,81100838 <DDR2_EEPROM_DUMP+0x318>
        printf("(Minimun acive to precharge time[tRAS;ns])\n");
81100828:	012044f4 	movhi	r4,33043
8110082c:	2115d304 	addi	r4,r4,22348
81100830:	110d89c0 	call	8110d89c <puts>
81100834:	00007206 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 31)
81100838:	e0bfbc17 	ldw	r2,-272(fp)
8110083c:	108007d8 	cmpnei	r2,r2,31
81100840:	1000041e 	bne	r2,zero,81100854 <DDR2_EEPROM_DUMP+0x334>
        printf("(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
81100844:	012044f4 	movhi	r4,33043
81100848:	2115de04 	addi	r4,r4,22392
8110084c:	110d89c0 	call	8110d89c <puts>
81100850:	00006b06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 36)
81100854:	e0bfbc17 	ldw	r2,-272(fp)
81100858:	10800918 	cmpnei	r2,r2,36
8110085c:	1000041e 	bne	r2,zero,81100870 <DDR2_EEPROM_DUMP+0x350>
        printf("(Minimun write receovery time[tWR;nsx4])\n");
81100860:	012044f4 	movhi	r4,33043
81100864:	2115ef04 	addi	r4,r4,22460
81100868:	110d89c0 	call	8110d89c <puts>
8110086c:	00006406 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 37)
81100870:	e0bfbc17 	ldw	r2,-272(fp)
81100874:	10800958 	cmpnei	r2,r2,37
81100878:	1000041e 	bne	r2,zero,8110088c <DDR2_EEPROM_DUMP+0x36c>
        printf("(Internal write to read command delay[tWTR;nsx4])\n");
8110087c:	012044f4 	movhi	r4,33043
81100880:	2115fa04 	addi	r4,r4,22504
81100884:	110d89c0 	call	8110d89c <puts>
81100888:	00005d06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 38)
8110088c:	e0bfbc17 	ldw	r2,-272(fp)
81100890:	10800998 	cmpnei	r2,r2,38
81100894:	1000041e 	bne	r2,zero,811008a8 <DDR2_EEPROM_DUMP+0x388>
        printf("(Internal read to precharge command delay[tRTP;nsx4])\n");
81100898:	012044f4 	movhi	r4,33043
8110089c:	21160704 	addi	r4,r4,22556
811008a0:	110d89c0 	call	8110d89c <puts>
811008a4:	00005606 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 41)
811008a8:	e0bfbc17 	ldw	r2,-272(fp)
811008ac:	10800a58 	cmpnei	r2,r2,41
811008b0:	1000041e 	bne	r2,zero,811008c4 <DDR2_EEPROM_DUMP+0x3a4>
        printf("(Minimun activce to active/refresh time[tRC;ns])\n");
811008b4:	012044f4 	movhi	r4,33043
811008b8:	21161504 	addi	r4,r4,22612
811008bc:	110d89c0 	call	8110d89c <puts>
811008c0:	00004f06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 42)
811008c4:	e0bfbc17 	ldw	r2,-272(fp)
811008c8:	10800a98 	cmpnei	r2,r2,42
811008cc:	1000041e 	bne	r2,zero,811008e0 <DDR2_EEPROM_DUMP+0x3c0>
        printf("(Minimun refresh to active/refresh time[tRFC;ns])\n");
811008d0:	012044f4 	movhi	r4,33043
811008d4:	21162204 	addi	r4,r4,22664
811008d8:	110d89c0 	call	8110d89c <puts>
811008dc:	00004806 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 62)
811008e0:	e0bfbc17 	ldw	r2,-272(fp)
811008e4:	10800f98 	cmpnei	r2,r2,62
811008e8:	1000041e 	bne	r2,zero,811008fc <DDR2_EEPROM_DUMP+0x3dc>
        printf("(SPD Revision)\n");
811008ec:	012044f4 	movhi	r4,33043
811008f0:	21162f04 	addi	r4,r4,22716
811008f4:	110d89c0 	call	8110d89c <puts>
811008f8:	00004106 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 63)
811008fc:	e0bfbc17 	ldw	r2,-272(fp)
81100900:	10800fd8 	cmpnei	r2,r2,63
81100904:	1000041e 	bne	r2,zero,81100918 <DDR2_EEPROM_DUMP+0x3f8>
        printf("(Checksum)\n");
81100908:	012044f4 	movhi	r4,33043
8110090c:	21163304 	addi	r4,r4,22732
81100910:	110d89c0 	call	8110d89c <puts>
81100914:	00003a06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 64)
81100918:	e0bfbc17 	ldw	r2,-272(fp)
8110091c:	10801018 	cmpnei	r2,r2,64
81100920:	1000041e 	bne	r2,zero,81100934 <DDR2_EEPROM_DUMP+0x414>
        printf("(64~71: Manufacturer JEDEC ID)\n");
81100924:	012044f4 	movhi	r4,33043
81100928:	21163604 	addi	r4,r4,22744
8110092c:	110d89c0 	call	8110d89c <puts>
81100930:	00003306 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 72)
81100934:	e0bfbc17 	ldw	r2,-272(fp)
81100938:	10801218 	cmpnei	r2,r2,72
8110093c:	1000041e 	bne	r2,zero,81100950 <DDR2_EEPROM_DUMP+0x430>
        printf("(Module manufacturing location[Vendor-specific code])\n");
81100940:	012044f4 	movhi	r4,33043
81100944:	21163e04 	addi	r4,r4,22776
81100948:	110d89c0 	call	8110d89c <puts>
8110094c:	00002c06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 73)
81100950:	e0bfbc17 	ldw	r2,-272(fp)
81100954:	10801258 	cmpnei	r2,r2,73
81100958:	1000041e 	bne	r2,zero,8110096c <DDR2_EEPROM_DUMP+0x44c>
        printf("(73~90: Moduloe part number)\n");
8110095c:	012044f4 	movhi	r4,33043
81100960:	21164c04 	addi	r4,r4,22832
81100964:	110d89c0 	call	8110d89c <puts>
81100968:	00002506 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 91)
8110096c:	e0bfbc17 	ldw	r2,-272(fp)
81100970:	108016d8 	cmpnei	r2,r2,91
81100974:	1000041e 	bne	r2,zero,81100988 <DDR2_EEPROM_DUMP+0x468>
        printf("(91~92: Moduloe revision code)\n");
81100978:	012044f4 	movhi	r4,33043
8110097c:	21165404 	addi	r4,r4,22864
81100980:	110d89c0 	call	8110d89c <puts>
81100984:	00001e06 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 93)
81100988:	e0bfbc17 	ldw	r2,-272(fp)
8110098c:	10801758 	cmpnei	r2,r2,93
81100990:	1000041e 	bne	r2,zero,811009a4 <DDR2_EEPROM_DUMP+0x484>
        printf("(Manufacture Years since 2000[0-255])\n");
81100994:	012044f4 	movhi	r4,33043
81100998:	21165c04 	addi	r4,r4,22896
8110099c:	110d89c0 	call	8110d89c <puts>
811009a0:	00001706 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 94)
811009a4:	e0bfbc17 	ldw	r2,-272(fp)
811009a8:	10801798 	cmpnei	r2,r2,94
811009ac:	1000041e 	bne	r2,zero,811009c0 <DDR2_EEPROM_DUMP+0x4a0>
        printf("(Manufacture Weeks[1-52])\n");
811009b0:	012044f4 	movhi	r4,33043
811009b4:	21166604 	addi	r4,r4,22936
811009b8:	110d89c0 	call	8110d89c <puts>
811009bc:	00001006 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 95)
811009c0:	e0bfbc17 	ldw	r2,-272(fp)
811009c4:	108017d8 	cmpnei	r2,r2,95
811009c8:	1000041e 	bne	r2,zero,811009dc <DDR2_EEPROM_DUMP+0x4bc>
        printf("(95~98[4-bytes]: Module serial number)\n");
811009cc:	012044f4 	movhi	r4,33043
811009d0:	21166d04 	addi	r4,r4,22964
811009d4:	110d89c0 	call	8110d89c <puts>
811009d8:	00000906 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else if (i == 99)
811009dc:	e0bfbc17 	ldw	r2,-272(fp)
811009e0:	108018d8 	cmpnei	r2,r2,99
811009e4:	1000041e 	bne	r2,zero,811009f8 <DDR2_EEPROM_DUMP+0x4d8>
        printf("(99~128: Manufacturer-specific data)\n");
811009e8:	012044f4 	movhi	r4,33043
811009ec:	21167704 	addi	r4,r4,23004
811009f0:	110d89c0 	call	8110d89c <puts>
811009f4:	00000206 	br	81100a00 <DDR2_EEPROM_DUMP+0x4e0>
      else
        printf("\n");
811009f8:	01000284 	movi	r4,10
811009fc:	110d7c40 	call	8110d7c4 <putchar>
  }

  alt_u8 szData[256];
  bSuccess = I2C_MultipleRead(I2cSclBase, I2cSdaBase, DeviceAddr, szData, sizeof(szData));
  if (bSuccess){
    for(i = 0; i < 256 && bSuccess; i++){
81100a00:	e0bfbc17 	ldw	r2,-272(fp)
81100a04:	10800044 	addi	r2,r2,1
81100a08:	e0bfbc15 	stw	r2,-272(fp)
81100a0c:	e0bfbc17 	ldw	r2,-272(fp)
81100a10:	10804008 	cmpgei	r2,r2,256
81100a14:	1000061e 	bne	r2,zero,81100a30 <DDR2_EEPROM_DUMP+0x510>
81100a18:	e0bfbe17 	ldw	r2,-264(fp)
81100a1c:	103ef81e 	bne	r2,zero,81100600 <__reset+0xfb0e0600>
81100a20:	00000306 	br	81100a30 <DDR2_EEPROM_DUMP+0x510>
        printf("(99~128: Manufacturer-specific data)\n");
      else
        printf("\n");
    }
  } else {
    printf("Failed to dump EEPROM\n"); 
81100a24:	012044f4 	movhi	r4,33043
81100a28:	21168104 	addi	r4,r4,23044
81100a2c:	110d89c0 	call	8110d89c <puts>
  }
  printf("\n");
81100a30:	01000284 	movi	r4,10
81100a34:	110d7c40 	call	8110d7c4 <putchar>

  return bSuccess;  
81100a38:	e0bfbe17 	ldw	r2,-264(fp)
}
81100a3c:	e037883a 	mov	sp,fp
81100a40:	dfc00117 	ldw	ra,4(sp)
81100a44:	df000017 	ldw	fp,0(sp)
81100a48:	dec00204 	addi	sp,sp,8
81100a4c:	f800283a 	ret

81100a50 <DDR2_SWITCH_MEMORY>:

bool DDR2_SWITCH_MEMORY(alt_u8 MemoryId){
81100a50:	defffb04 	addi	sp,sp,-20
81100a54:	dfc00415 	stw	ra,16(sp)
81100a58:	df000315 	stw	fp,12(sp)
81100a5c:	df000304 	addi	fp,sp,12
81100a60:	2005883a 	mov	r2,r4
81100a64:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *pDdr2MemAddr = DDR2_EXTENDED_ADDRESS_CONTROL_BASE;
81100a68:	00a04834 	movhi	r2,33056
81100a6c:	10903204 	addi	r2,r2,16584
81100a70:	e0bffe15 	stw	r2,-8(fp)

	  bSuccess = TRUE;
81100a74:	00800044 	movi	r2,1
81100a78:	e0bffd15 	stw	r2,-12(fp)
	  switch (MemoryId) {
81100a7c:	e0bfff03 	ldbu	r2,-4(fp)
81100a80:	10c00060 	cmpeqi	r3,r2,1
81100a84:	1800031e 	bne	r3,zero,81100a94 <DDR2_SWITCH_MEMORY+0x44>
81100a88:	108000a0 	cmpeqi	r2,r2,2
81100a8c:	1000041e 	bne	r2,zero,81100aa0 <DDR2_SWITCH_MEMORY+0x50>
81100a90:	00000706 	br	81100ab0 <DDR2_SWITCH_MEMORY+0x60>
	    case DDR2_M1_ID:
	  	  *(pDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
81100a94:	e0bffe17 	ldw	r2,-8(fp)
81100a98:	10000015 	stw	zero,0(r2)
	    break;
81100a9c:	00000806 	br	81100ac0 <DDR2_SWITCH_MEMORY+0x70>
	    case DDR2_M2_ID:
		  *(pDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
81100aa0:	e0bffe17 	ldw	r2,-8(fp)
81100aa4:	00e00034 	movhi	r3,32768
81100aa8:	10c00015 	stw	r3,0(r2)
	    break;
81100aac:	00000406 	br	81100ac0 <DDR2_SWITCH_MEMORY+0x70>
	    default:
	      bSuccess = FALSE;
81100ab0:	e03ffd15 	stw	zero,-12(fp)
		  printf("DR2 Memory ID not identified!! Error switching memories!! \n");
81100ab4:	012044f4 	movhi	r4,33043
81100ab8:	21168704 	addi	r4,r4,23068
81100abc:	110d89c0 	call	8110d89c <puts>
	  }

	  return bSuccess;
81100ac0:	e0bffd17 	ldw	r2,-12(fp)
}
81100ac4:	e037883a 	mov	sp,fp
81100ac8:	dfc00117 	ldw	ra,4(sp)
81100acc:	df000017 	ldw	fp,0(sp)
81100ad0:	dec00204 	addi	sp,sp,8
81100ad4:	f800283a 	ret

81100ad8 <DDR2_MEMORY_WRITE_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_WRITE_TEST(alt_u8 MemoryId){
81100ad8:	deffe304 	addi	sp,sp,-116
81100adc:	dfc01c15 	stw	ra,112(sp)
81100ae0:	df001b15 	stw	fp,108(sp)
81100ae4:	dc401a15 	stw	r17,104(sp)
81100ae8:	dc001915 	stw	r16,100(sp)
81100aec:	df001b04 	addi	fp,sp,108
81100af0:	2005883a 	mov	r2,r4
81100af4:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Write Test =====\n");
81100af8:	012044f4 	movhi	r4,33043
81100afc:	21169604 	addi	r4,r4,23128
81100b00:	110d89c0 	call	8110d89c <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100b04:	00800044 	movi	r2,1
81100b08:	e0bfed15 	stw	r2,-76(fp)
  switch (MemoryId) {
81100b0c:	e0bffd03 	ldbu	r2,-12(fp)
81100b10:	10c00060 	cmpeqi	r3,r2,1
81100b14:	1800031e 	bne	r3,zero,81100b24 <DDR2_MEMORY_WRITE_TEST+0x4c>
81100b18:	108000a0 	cmpeqi	r2,r2,2
81100b1c:	1000081e 	bne	r2,zero,81100b40 <DDR2_MEMORY_WRITE_TEST+0x68>
81100b20:	00000e06 	br	81100b5c <DDR2_MEMORY_WRITE_TEST+0x84>
    case DDR2_M1_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b24:	e0bffd03 	ldbu	r2,-12(fp)
81100b28:	1009883a 	mov	r4,r2
81100b2c:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b30:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M1_MEMORY_SIZE;
81100b34:	00a00034 	movhi	r2,32768
81100b38:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b3c:	00000d06 	br	81100b74 <DDR2_MEMORY_WRITE_TEST+0x9c>
    case DDR2_M2_ID:
      DDR2_SWITCH_MEMORY(MemoryId);
81100b40:	e0bffd03 	ldbu	r2,-12(fp)
81100b44:	1009883a 	mov	r4,r2
81100b48:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
      Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100b4c:	e03fe515 	stw	zero,-108(fp)
      ByteLen = DDR2_M2_MEMORY_SIZE;
81100b50:	00a00034 	movhi	r2,32768
81100b54:	e0bfe615 	stw	r2,-104(fp)
    break;
81100b58:	00000606 	br	81100b74 <DDR2_MEMORY_WRITE_TEST+0x9c>
    default:
      bSuccess = FALSE;
81100b5c:	e03fed15 	stw	zero,-76(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100b60:	012044f4 	movhi	r4,33043
81100b64:	2114a604 	addi	r4,r4,21144
81100b68:	110d89c0 	call	8110d89c <puts>
      return bSuccess;
81100b6c:	e0bfed17 	ldw	r2,-76(fp)
81100b70:	0000db06 	br	81100ee0 <DDR2_MEMORY_WRITE_TEST+0x408>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100b74:	e0bfe617 	ldw	r2,-104(fp)
81100b78:	1004d53a 	srli	r2,r2,20
81100b7c:	100b883a 	mov	r5,r2
81100b80:	012044f4 	movhi	r4,33043
81100b84:	2116a004 	addi	r4,r4,23168
81100b88:	110d7800 	call	8110d780 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes;
  
  int nItemNum, nPos;
  const int my_data_size = sizeof(my_data);
81100b8c:	00800104 	movi	r2,4
81100b90:	e0bfee15 	stw	r2,-72(fp)
  int nProgressIndex = 0;
81100b94:	e03fec15 	stw	zero,-80(fp)
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81100b98:	e03fef15 	stw	zero,-68(fp)
  
  for(i = 0; i < 10; i++){
81100b9c:	e03fe715 	stw	zero,-100(fp)
81100ba0:	00001506 	br	81100bf8 <DDR2_MEMORY_WRITE_TEST+0x120>
    szProgress[i] = ByteLen/10*(i+1);
81100ba4:	e0ffe617 	ldw	r3,-104(fp)
81100ba8:	00b33374 	movhi	r2,52429
81100bac:	10b33344 	addi	r2,r2,-13107
81100bb0:	1888383a 	mulxuu	r4,r3,r2
81100bb4:	1885383a 	mul	r2,r3,r2
81100bb8:	1021883a 	mov	r16,r2
81100bbc:	2023883a 	mov	r17,r4
81100bc0:	8804d0fa 	srli	r2,r17,3
81100bc4:	e0ffe717 	ldw	r3,-100(fp)
81100bc8:	18c00044 	addi	r3,r3,1
81100bcc:	10c7383a 	mul	r3,r2,r3
81100bd0:	e0bfe717 	ldw	r2,-100(fp)
81100bd4:	1085883a 	add	r2,r2,r2
81100bd8:	1085883a 	add	r2,r2,r2
81100bdc:	e13fe504 	addi	r4,fp,-108
81100be0:	2085883a 	add	r2,r4,r2
81100be4:	10800e04 	addi	r2,r2,56
81100be8:	10c00015 	stw	r3,0(r2)
  int nProgressIndex = 0;
  alt_u32 InitValue;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
  
  for(i = 0; i < 10; i++){
81100bec:	e0bfe717 	ldw	r2,-100(fp)
81100bf0:	10800044 	addi	r2,r2,1
81100bf4:	e0bfe715 	stw	r2,-100(fp)
81100bf8:	e0bfe717 	ldw	r2,-100(fp)
81100bfc:	10800290 	cmplti	r2,r2,10
81100c00:	103fe81e 	bne	r2,zero,81100ba4 <__reset+0xfb0e0ba4>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81100c04:	d0a07417 	ldw	r2,-32304(gp)
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
81100c08:	e0bff015 	stw	r2,-64(fp)
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100c0c:	00804004 	movi	r2,256
81100c10:	e0bfea15 	stw	r2,-88(fp)
  for(i = 0; i < nItemNum; i++){
81100c14:	e03fe715 	stw	zero,-100(fp)
81100c18:	00001e06 	br	81100c94 <DDR2_MEMORY_WRITE_TEST+0x1bc>
    if (i == 0) {
81100c1c:	e0bfe717 	ldw	r2,-100(fp)
81100c20:	1000091e 	bne	r2,zero,81100c48 <DDR2_MEMORY_WRITE_TEST+0x170>
      szData[i] = InitValue;
81100c24:	00a04534 	movhi	r2,33044
81100c28:	10a71e04 	addi	r2,r2,-25480
81100c2c:	e0ffe717 	ldw	r3,-100(fp)
81100c30:	18c7883a 	add	r3,r3,r3
81100c34:	18c7883a 	add	r3,r3,r3
81100c38:	10c5883a 	add	r2,r2,r3
81100c3c:	e0fff017 	ldw	r3,-64(fp)
81100c40:	10c00015 	stw	r3,0(r2)
81100c44:	00001006 	br	81100c88 <DDR2_MEMORY_WRITE_TEST+0x1b0>
    } else {
      szData[i] = szData[i-1] * 13;
81100c48:	e0bfe717 	ldw	r2,-100(fp)
81100c4c:	10ffffc4 	addi	r3,r2,-1
81100c50:	00a04534 	movhi	r2,33044
81100c54:	10a71e04 	addi	r2,r2,-25480
81100c58:	18c7883a 	add	r3,r3,r3
81100c5c:	18c7883a 	add	r3,r3,r3
81100c60:	10c5883a 	add	r2,r2,r3
81100c64:	10800017 	ldw	r2,0(r2)
81100c68:	11000364 	muli	r4,r2,13
81100c6c:	00a04534 	movhi	r2,33044
81100c70:	10a71e04 	addi	r2,r2,-25480
81100c74:	e0ffe717 	ldw	r3,-100(fp)
81100c78:	18c7883a 	add	r3,r3,r3
81100c7c:	18c7883a 	add	r3,r3,r3
81100c80:	10c5883a 	add	r2,r2,r3
81100c84:	11000015 	stw	r4,0(r2)
  for(i = 0; i < 10; i++){
    szProgress[i] = ByteLen/10*(i+1);
  }
  InitValue = alt_nticks();
  nItemNum = sizeof(szData)/sizeof(szData[0]);
  for(i = 0; i < nItemNum; i++){
81100c88:	e0bfe717 	ldw	r2,-100(fp)
81100c8c:	10800044 	addi	r2,r2,1
81100c90:	e0bfe715 	stw	r2,-100(fp)
81100c94:	e0ffe717 	ldw	r3,-100(fp)
81100c98:	e0bfea17 	ldw	r2,-88(fp)
81100c9c:	18bfdf16 	blt	r3,r2,81100c1c <__reset+0xfb0e0c1c>
      szData[i] = InitValue;
    } else {
      szData[i] = szData[i-1] * 13;
    }
  }
  szData[nItemNum-1] = 0xAAAAAAAA;
81100ca0:	e0bfea17 	ldw	r2,-88(fp)
81100ca4:	10ffffc4 	addi	r3,r2,-1
81100ca8:	00a04534 	movhi	r2,33044
81100cac:	10a71e04 	addi	r2,r2,-25480
81100cb0:	18c7883a 	add	r3,r3,r3
81100cb4:	18c7883a 	add	r3,r3,r3
81100cb8:	10c7883a 	add	r3,r2,r3
81100cbc:	00aaaaf4 	movhi	r2,43691
81100cc0:	10aaaa84 	addi	r2,r2,-21846
81100cc4:	18800015 	stw	r2,0(r3)
  szData[nItemNum-2] = 0x55555555;
81100cc8:	e0bfea17 	ldw	r2,-88(fp)
81100ccc:	10ffff84 	addi	r3,r2,-2
81100cd0:	00a04534 	movhi	r2,33044
81100cd4:	10a71e04 	addi	r2,r2,-25480
81100cd8:	18c7883a 	add	r3,r3,r3
81100cdc:	18c7883a 	add	r3,r3,r3
81100ce0:	10c7883a 	add	r3,r2,r3
81100ce4:	00955574 	movhi	r2,21845
81100ce8:	10955544 	addi	r2,r2,21845
81100cec:	18800015 	stw	r2,0(r3)
  szData[nItemNum-3] = 0x00000000;
81100cf0:	e0bfea17 	ldw	r2,-88(fp)
81100cf4:	10ffff44 	addi	r3,r2,-3
81100cf8:	00a04534 	movhi	r2,33044
81100cfc:	10a71e04 	addi	r2,r2,-25480
81100d00:	18c7883a 	add	r3,r3,r3
81100d04:	18c7883a 	add	r3,r3,r3
81100d08:	10c5883a 	add	r2,r2,r3
81100d0c:	10000015 	stw	zero,0(r2)
  szData[nItemNum-4] = 0xFFFFFFFF;
81100d10:	e0bfea17 	ldw	r2,-88(fp)
81100d14:	10ffff04 	addi	r3,r2,-4
81100d18:	00a04534 	movhi	r2,33044
81100d1c:	10a71e04 	addi	r2,r2,-25480
81100d20:	18c7883a 	add	r3,r3,r3
81100d24:	18c7883a 	add	r3,r3,r3
81100d28:	10c5883a 	add	r2,r2,r3
81100d2c:	00ffffc4 	movi	r3,-1
81100d30:	10c00015 	stw	r3,0(r2)

  printf("Writing data...\n");
81100d34:	012044f4 	movhi	r4,33043
81100d38:	2116a604 	addi	r4,r4,23192
81100d3c:	110d89c0 	call	8110d89c <puts>
81100d40:	d0a07417 	ldw	r2,-32304(gp)
  TimeStart = alt_nticks();
81100d44:	e0bff115 	stw	r2,-60(fp)
  pDes = (my_data *)Ddr2Base;
81100d48:	e0bfe517 	ldw	r2,-108(fp)
81100d4c:	e0bfe915 	stw	r2,-92(fp)
  nAccessLen = sizeof(szData);
81100d50:	00810004 	movi	r2,1024
81100d54:	e0bfe815 	stw	r2,-96(fp)
  nItemNum = nAccessLen / my_data_size;
81100d58:	e0ffe817 	ldw	r3,-96(fp)
81100d5c:	e0bfee17 	ldw	r2,-72(fp)
81100d60:	1885283a 	div	r2,r3,r2
81100d64:	e0bfea15 	stw	r2,-88(fp)
  nPos = 0;
81100d68:	e03feb15 	stw	zero,-84(fp)
  while(nPos < ByteLen){
81100d6c:	00003306 	br	81100e3c <DDR2_MEMORY_WRITE_TEST+0x364>
    nRemainedLen = ByteLen - nPos;
81100d70:	e0bfeb17 	ldw	r2,-84(fp)
81100d74:	e0ffe617 	ldw	r3,-104(fp)
81100d78:	1885c83a 	sub	r2,r3,r2
81100d7c:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81100d80:	e0bfe817 	ldw	r2,-96(fp)
81100d84:	e0fff217 	ldw	r3,-56(fp)
81100d88:	1880060e 	bge	r3,r2,81100da4 <DDR2_MEMORY_WRITE_TEST+0x2cc>
      nAccessLen = nRemainedLen;
81100d8c:	e0bff217 	ldw	r2,-56(fp)
81100d90:	e0bfe815 	stw	r2,-96(fp)
      nItemNum = nAccessLen / my_data_size;
81100d94:	e0ffe817 	ldw	r3,-96(fp)
81100d98:	e0bfee17 	ldw	r2,-72(fp)
81100d9c:	1885283a 	div	r2,r3,r2
81100da0:	e0bfea15 	stw	r2,-88(fp)
    }
    memcpy(pDes, szData, nAccessLen);
81100da4:	e0bfe817 	ldw	r2,-96(fp)
81100da8:	100d883a 	mov	r6,r2
81100dac:	01604534 	movhi	r5,33044
81100db0:	29671e04 	addi	r5,r5,-25480
81100db4:	e13fe917 	ldw	r4,-92(fp)
81100db8:	110d4800 	call	8110d480 <memcpy>
    pDes += nItemNum;
81100dbc:	e0bfea17 	ldw	r2,-88(fp)
81100dc0:	1085883a 	add	r2,r2,r2
81100dc4:	1085883a 	add	r2,r2,r2
81100dc8:	1007883a 	mov	r3,r2
81100dcc:	e0bfe917 	ldw	r2,-92(fp)
81100dd0:	10c5883a 	add	r2,r2,r3
81100dd4:	e0bfe915 	stw	r2,-92(fp)
    nPos += nAccessLen;
81100dd8:	e0ffeb17 	ldw	r3,-84(fp)
81100ddc:	e0bfe817 	ldw	r2,-96(fp)
81100de0:	1885883a 	add	r2,r3,r2
81100de4:	e0bfeb15 	stw	r2,-84(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
81100de8:	e0bfec17 	ldw	r2,-80(fp)
81100dec:	10800288 	cmpgei	r2,r2,10
81100df0:	1000121e 	bne	r2,zero,81100e3c <DDR2_MEMORY_WRITE_TEST+0x364>
81100df4:	e0bfec17 	ldw	r2,-80(fp)
81100df8:	1085883a 	add	r2,r2,r2
81100dfc:	1085883a 	add	r2,r2,r2
81100e00:	e0ffe504 	addi	r3,fp,-108
81100e04:	1885883a 	add	r2,r3,r2
81100e08:	10800e04 	addi	r2,r2,56
81100e0c:	10800017 	ldw	r2,0(r2)
81100e10:	e0ffeb17 	ldw	r3,-84(fp)
81100e14:	18800936 	bltu	r3,r2,81100e3c <DDR2_MEMORY_WRITE_TEST+0x364>
      nProgressIndex++;
81100e18:	e0bfec17 	ldw	r2,-80(fp)
81100e1c:	10800044 	addi	r2,r2,1
81100e20:	e0bfec15 	stw	r2,-80(fp)
      printf("%02d%% ", nProgressIndex*10);
81100e24:	e0bfec17 	ldw	r2,-80(fp)
81100e28:	108002a4 	muli	r2,r2,10
81100e2c:	100b883a 	mov	r5,r2
81100e30:	012044f4 	movhi	r4,33043
81100e34:	2116aa04 	addi	r4,r4,23208
81100e38:	110d7800 	call	8110d780 <printf>
  TimeStart = alt_nticks();
  pDes = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(nPos < ByteLen){
81100e3c:	e0ffeb17 	ldw	r3,-84(fp)
81100e40:	e0bfe617 	ldw	r2,-104(fp)
81100e44:	18bfca36 	bltu	r3,r2,81100d70 <__reset+0xfb0e0d70>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  alt_dcache_flush_all();
81100e48:	1121a3c0 	call	81121a3c <alt_dcache_flush_all>
  printf("\n");
81100e4c:	01000284 	movi	r4,10
81100e50:	110d7c40 	call	8110d7c4 <putchar>
81100e54:	d0e07417 	ldw	r3,-32304(gp)

  TimeElapsed = alt_nticks() - TimeStart;
81100e58:	e0bff117 	ldw	r2,-60(fp)
81100e5c:	1885c83a 	sub	r2,r3,r2
81100e60:	e0bfef15 	stw	r2,-68(fp)
  if (bSuccess){
81100e64:	e0bfed17 	ldw	r2,-76(fp)
81100e68:	10001726 	beq	r2,zero,81100ec8 <DDR2_MEMORY_WRITE_TEST+0x3f0>
    printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81100e6c:	e13fef17 	ldw	r4,-68(fp)
81100e70:	110b7240 	call	8110b724 <__floatsisf>
81100e74:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81100e78:	d0a07317 	ldw	r2,-32308(gp)
81100e7c:	1009883a 	mov	r4,r2
81100e80:	110b8480 	call	8110b848 <__floatunsisf>
81100e84:	1007883a 	mov	r3,r2
81100e88:	180b883a 	mov	r5,r3
81100e8c:	8009883a 	mov	r4,r16
81100e90:	110aee80 	call	8110aee8 <__divsf3>
81100e94:	1007883a 	mov	r3,r2
81100e98:	1805883a 	mov	r2,r3
81100e9c:	1009883a 	mov	r4,r2
81100ea0:	110c0500 	call	8110c050 <__extendsfdf2>
81100ea4:	1009883a 	mov	r4,r2
81100ea8:	180b883a 	mov	r5,r3
81100eac:	200d883a 	mov	r6,r4
81100eb0:	280f883a 	mov	r7,r5
81100eb4:	e17fe617 	ldw	r5,-104(fp)
81100eb8:	012044f4 	movhi	r4,33043
81100ebc:	2116ac04 	addi	r4,r4,23216
81100ec0:	110d7800 	call	8110d780 <printf>
81100ec4:	00000306 	br	81100ed4 <DDR2_MEMORY_WRITE_TEST+0x3fc>
  } else {
    printf("DDR2 write test fail\n");
81100ec8:	012044f4 	movhi	r4,33043
81100ecc:	2116b804 	addi	r4,r4,23264
81100ed0:	110d89c0 	call	8110d89c <puts>
  }
  printf("\n");
81100ed4:	01000284 	movi	r4,10
81100ed8:	110d7c40 	call	8110d7c4 <putchar>

  return bSuccess;
81100edc:	e0bfed17 	ldw	r2,-76(fp)
}
81100ee0:	e6fffe04 	addi	sp,fp,-8
81100ee4:	dfc00317 	ldw	ra,12(sp)
81100ee8:	df000217 	ldw	fp,8(sp)
81100eec:	dc400117 	ldw	r17,4(sp)
81100ef0:	dc000017 	ldw	r16,0(sp)
81100ef4:	dec00404 	addi	sp,sp,16
81100ef8:	f800283a 	ret

81100efc <DDR2_MEMORY_READ_TEST>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_READ_TEST(alt_u8 MemoryId){
81100efc:	deffe304 	addi	sp,sp,-116
81100f00:	dfc01c15 	stw	ra,112(sp)
81100f04:	df001b15 	stw	fp,108(sp)
81100f08:	dc401a15 	stw	r17,104(sp)
81100f0c:	dc001915 	stw	r16,100(sp)
81100f10:	df001b04 	addi	fp,sp,108
81100f14:	2005883a 	mov	r2,r4
81100f18:	e0bffd05 	stb	r2,-12(fp)

  printf("===== DE4 DDR2 Memory Read Test =====\n");
81100f1c:	012044f4 	movhi	r4,33043
81100f20:	2116be04 	addi	r4,r4,23288
81100f24:	110d89c0 	call	8110d89c <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
81100f28:	00800044 	movi	r2,1
81100f2c:	e0bfe515 	stw	r2,-108(fp)
  switch (MemoryId) {
81100f30:	e0bffd03 	ldbu	r2,-12(fp)
81100f34:	10c00060 	cmpeqi	r3,r2,1
81100f38:	1800031e 	bne	r3,zero,81100f48 <DDR2_MEMORY_READ_TEST+0x4c>
81100f3c:	108000a0 	cmpeqi	r2,r2,2
81100f40:	1000081e 	bne	r2,zero,81100f64 <DDR2_MEMORY_READ_TEST+0x68>
81100f44:	00000e06 	br	81100f80 <DDR2_MEMORY_READ_TEST+0x84>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100f48:	e0bffd03 	ldbu	r2,-12(fp)
81100f4c:	1009883a 	mov	r4,r2
81100f50:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100f54:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81100f58:	00a00034 	movhi	r2,32768
81100f5c:	e0bfe715 	stw	r2,-100(fp)
    break;
81100f60:	00000d06 	br	81100f98 <DDR2_MEMORY_READ_TEST+0x9c>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
81100f64:	e0bffd03 	ldbu	r2,-12(fp)
81100f68:	1009883a 	mov	r4,r2
81100f6c:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81100f70:	e03fe615 	stw	zero,-104(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
81100f74:	00a00034 	movhi	r2,32768
81100f78:	e0bfe715 	stw	r2,-100(fp)
    break;
81100f7c:	00000606 	br	81100f98 <DDR2_MEMORY_READ_TEST+0x9c>
    default:
      bSuccess = FALSE;
81100f80:	e03fe515 	stw	zero,-108(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
81100f84:	012044f4 	movhi	r4,33043
81100f88:	2114a604 	addi	r4,r4,21144
81100f8c:	110d89c0 	call	8110d89c <puts>
      return bSuccess;
81100f90:	e0bfe517 	ldw	r2,-108(fp)
81100f94:	0000b806 	br	81101278 <DDR2_MEMORY_READ_TEST+0x37c>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81100f98:	e0bfe717 	ldw	r2,-100(fp)
81100f9c:	1004d53a 	srli	r2,r2,20
81100fa0:	100b883a 	mov	r5,r2
81100fa4:	012044f4 	movhi	r4,33043
81100fa8:	2116a004 	addi	r4,r4,23168
81100fac:	110d7800 	call	8110d780 <printf>

  int i, nRemainedLen, nAccessLen;
  my_data *pDes, *pSrc;
  int nItemNum, nPos;
  nItemNum = sizeof(szData)/sizeof(szData[0]);
81100fb0:	00804004 	movi	r2,256
81100fb4:	e0bfec15 	stw	r2,-80(fp)
  const int my_data_size = sizeof(my_data);
81100fb8:	00800104 	movi	r2,4
81100fbc:	e0bfef15 	stw	r2,-68(fp)
  nAccessLen = nItemNum * my_data_size;
81100fc0:	e0ffec17 	ldw	r3,-80(fp)
81100fc4:	e0bfef17 	ldw	r2,-68(fp)
81100fc8:	1885383a 	mul	r2,r3,r2
81100fcc:	e0bfe915 	stw	r2,-92(fp)
  int nProgressIndex = 0;
81100fd0:	e03fee15 	stw	zero,-72(fp)
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;
81100fd4:	e03ff015 	stw	zero,-64(fp)

  for(i=0;i<10;i++){
81100fd8:	e03fe815 	stw	zero,-96(fp)
81100fdc:	00001506 	br	81101034 <DDR2_MEMORY_READ_TEST+0x138>
    szProgress[i] = ByteLen/10*(i+1);
81100fe0:	e0ffe717 	ldw	r3,-100(fp)
81100fe4:	00b33374 	movhi	r2,52429
81100fe8:	10b33344 	addi	r2,r2,-13107
81100fec:	1888383a 	mulxuu	r4,r3,r2
81100ff0:	1885383a 	mul	r2,r3,r2
81100ff4:	1021883a 	mov	r16,r2
81100ff8:	2023883a 	mov	r17,r4
81100ffc:	8804d0fa 	srli	r2,r17,3
81101000:	e0ffe817 	ldw	r3,-96(fp)
81101004:	18c00044 	addi	r3,r3,1
81101008:	10c7383a 	mul	r3,r2,r3
8110100c:	e0bfe817 	ldw	r2,-96(fp)
81101010:	1085883a 	add	r2,r2,r2
81101014:	1085883a 	add	r2,r2,r2
81101018:	e13fe504 	addi	r4,fp,-108
8110101c:	2085883a 	add	r2,r4,r2
81101020:	10800e04 	addi	r2,r2,56
81101024:	10c00015 	stw	r3,0(r2)
  nAccessLen = nItemNum * my_data_size;
  int nProgressIndex = 0;
  alt_u32 szProgress[10];
  int TimeStart, TimeElapsed = 0;

  for(i=0;i<10;i++){
81101028:	e0bfe817 	ldw	r2,-96(fp)
8110102c:	10800044 	addi	r2,r2,1
81101030:	e0bfe815 	stw	r2,-96(fp)
81101034:	e0bfe817 	ldw	r2,-96(fp)
81101038:	10800290 	cmplti	r2,r2,10
8110103c:	103fe81e 	bne	r2,zero,81100fe0 <__reset+0xfb0e0fe0>
    szProgress[i] = ByteLen/10*(i+1);
  }

  nProgressIndex = 0;
81101040:	e03fee15 	stw	zero,-72(fp)
  printf("Reading/Verifying Data...\n");
81101044:	012044f4 	movhi	r4,33043
81101048:	2116c804 	addi	r4,r4,23328
8110104c:	110d89c0 	call	8110d89c <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101050:	d0a07417 	ldw	r2,-32304(gp)
  TimeStart = alt_nticks();
81101054:	e0bff115 	stw	r2,-60(fp)

  pSrc = (my_data *)Ddr2Base;
81101058:	e0bfe617 	ldw	r2,-104(fp)
8110105c:	e0bfeb15 	stw	r2,-84(fp)
  nAccessLen = sizeof(szData);
81101060:	00810004 	movi	r2,1024
81101064:	e0bfe915 	stw	r2,-92(fp)
  nItemNum = nAccessLen / my_data_size;
81101068:	e0ffe917 	ldw	r3,-92(fp)
8110106c:	e0bfef17 	ldw	r2,-68(fp)
81101070:	1885283a 	div	r2,r3,r2
81101074:	e0bfec15 	stw	r2,-80(fp)
  nPos = 0;
81101078:	e03fed15 	stw	zero,-76(fp)
  while(bSuccess && nPos < ByteLen){
8110107c:	00005406 	br	811011d0 <DDR2_MEMORY_READ_TEST+0x2d4>
    nRemainedLen = ByteLen - nPos;
81101080:	e0bfed17 	ldw	r2,-76(fp)
81101084:	e0ffe717 	ldw	r3,-100(fp)
81101088:	1885c83a 	sub	r2,r3,r2
8110108c:	e0bff215 	stw	r2,-56(fp)
    if (nAccessLen > nRemainedLen){
81101090:	e0bfe917 	ldw	r2,-92(fp)
81101094:	e0fff217 	ldw	r3,-56(fp)
81101098:	1880060e 	bge	r3,r2,811010b4 <DDR2_MEMORY_READ_TEST+0x1b8>
      nAccessLen = nRemainedLen;
8110109c:	e0bff217 	ldw	r2,-56(fp)
811010a0:	e0bfe915 	stw	r2,-92(fp)
      nItemNum = nAccessLen / my_data_size;
811010a4:	e0ffe917 	ldw	r3,-92(fp)
811010a8:	e0bfef17 	ldw	r2,-68(fp)
811010ac:	1885283a 	div	r2,r3,r2
811010b0:	e0bfec15 	stw	r2,-80(fp)
    }
    pDes = szData;
811010b4:	00a04534 	movhi	r2,33044
811010b8:	10a71e04 	addi	r2,r2,-25480
811010bc:	e0bfea15 	stw	r2,-88(fp)
    for(i=0 ; i < nItemNum && bSuccess; i++){
811010c0:	e03fe815 	stw	zero,-96(fp)
811010c4:	00002406 	br	81101158 <DDR2_MEMORY_READ_TEST+0x25c>
      if (*pSrc++ != *pDes++){
811010c8:	e0bfeb17 	ldw	r2,-84(fp)
811010cc:	10c00104 	addi	r3,r2,4
811010d0:	e0ffeb15 	stw	r3,-84(fp)
811010d4:	10c00017 	ldw	r3,0(r2)
811010d8:	e0bfea17 	ldw	r2,-88(fp)
811010dc:	11000104 	addi	r4,r2,4
811010e0:	e13fea15 	stw	r4,-88(fp)
811010e4:	10800017 	ldw	r2,0(r2)
811010e8:	18801826 	beq	r3,r2,8110114c <DDR2_MEMORY_READ_TEST+0x250>
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
811010ec:	e0bfeb17 	ldw	r2,-84(fp)
811010f0:	10bfff04 	addi	r2,r2,-4
811010f4:	10800017 	ldw	r2,0(r2)
811010f8:	1009883a 	mov	r4,r2
811010fc:	00a04534 	movhi	r2,33044
81101100:	10a71e04 	addi	r2,r2,-25480
81101104:	e0ffe817 	ldw	r3,-96(fp)
81101108:	18c7883a 	add	r3,r3,r3
8110110c:	18c7883a 	add	r3,r3,r3
81101110:	10c5883a 	add	r2,r2,r3
81101114:	10800017 	ldw	r2,0(r2)
81101118:	100b883a 	mov	r5,r2
8110111c:	e0ffed17 	ldw	r3,-76(fp)
81101120:	e0bfef17 	ldw	r2,-68(fp)
81101124:	1887283a 	div	r3,r3,r2
81101128:	e0bfe817 	ldw	r2,-96(fp)
8110112c:	1885883a 	add	r2,r3,r2
81101130:	100f883a 	mov	r7,r2
81101134:	280d883a 	mov	r6,r5
81101138:	200b883a 	mov	r5,r4
8110113c:	012044f4 	movhi	r4,33043
81101140:	2116cf04 	addi	r4,r4,23356
81101144:	110d7800 	call	8110d780 <printf>
        bSuccess = FALSE;
81101148:	e03fe515 	stw	zero,-108(fp)
    if (nAccessLen > nRemainedLen){
      nAccessLen = nRemainedLen;
      nItemNum = nAccessLen / my_data_size;
    }
    pDes = szData;
    for(i=0 ; i < nItemNum && bSuccess; i++){
8110114c:	e0bfe817 	ldw	r2,-96(fp)
81101150:	10800044 	addi	r2,r2,1
81101154:	e0bfe815 	stw	r2,-96(fp)
81101158:	e0ffe817 	ldw	r3,-96(fp)
8110115c:	e0bfec17 	ldw	r2,-80(fp)
81101160:	1880020e 	bge	r3,r2,8110116c <DDR2_MEMORY_READ_TEST+0x270>
81101164:	e0bfe517 	ldw	r2,-108(fp)
81101168:	103fd71e 	bne	r2,zero,811010c8 <__reset+0xfb0e10c8>
      if (*pSrc++ != *pDes++){
        printf("verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n", (int)*(pSrc-1), (int)szData[i], (nPos/my_data_size)+i);
        bSuccess = FALSE;
      }
    }
    nPos += nAccessLen;
8110116c:	e0ffed17 	ldw	r3,-76(fp)
81101170:	e0bfe917 	ldw	r2,-92(fp)
81101174:	1885883a 	add	r2,r3,r2
81101178:	e0bfed15 	stw	r2,-76(fp)
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
8110117c:	e0bfee17 	ldw	r2,-72(fp)
81101180:	10800288 	cmpgei	r2,r2,10
81101184:	1000121e 	bne	r2,zero,811011d0 <DDR2_MEMORY_READ_TEST+0x2d4>
81101188:	e0bfee17 	ldw	r2,-72(fp)
8110118c:	1085883a 	add	r2,r2,r2
81101190:	1085883a 	add	r2,r2,r2
81101194:	e0ffe504 	addi	r3,fp,-108
81101198:	1885883a 	add	r2,r3,r2
8110119c:	10800e04 	addi	r2,r2,56
811011a0:	10800017 	ldw	r2,0(r2)
811011a4:	e0ffed17 	ldw	r3,-76(fp)
811011a8:	18800936 	bltu	r3,r2,811011d0 <DDR2_MEMORY_READ_TEST+0x2d4>
      nProgressIndex++;
811011ac:	e0bfee17 	ldw	r2,-72(fp)
811011b0:	10800044 	addi	r2,r2,1
811011b4:	e0bfee15 	stw	r2,-72(fp)
      printf("%02d%% ", nProgressIndex*10);
811011b8:	e0bfee17 	ldw	r2,-72(fp)
811011bc:	108002a4 	muli	r2,r2,10
811011c0:	100b883a 	mov	r5,r2
811011c4:	012044f4 	movhi	r4,33043
811011c8:	2116aa04 	addi	r4,r4,23208
811011cc:	110d7800 	call	8110d780 <printf>

  pSrc = (my_data *)Ddr2Base;
  nAccessLen = sizeof(szData);
  nItemNum = nAccessLen / my_data_size;
  nPos = 0;
  while(bSuccess && nPos < ByteLen){
811011d0:	e0bfe517 	ldw	r2,-108(fp)
811011d4:	10000326 	beq	r2,zero,811011e4 <DDR2_MEMORY_READ_TEST+0x2e8>
811011d8:	e0ffed17 	ldw	r3,-76(fp)
811011dc:	e0bfe717 	ldw	r2,-100(fp)
811011e0:	18bfa736 	bltu	r3,r2,81101080 <__reset+0xfb0e1080>
    if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
      nProgressIndex++;
      printf("%02d%% ", nProgressIndex*10);
    }
  }
  printf("\n");
811011e4:	01000284 	movi	r4,10
811011e8:	110d7c40 	call	8110d7c4 <putchar>
811011ec:	d0e07417 	ldw	r3,-32304(gp)

  TimeElapsed = alt_nticks() - TimeStart;
811011f0:	e0bff117 	ldw	r2,-60(fp)
811011f4:	1885c83a 	sub	r2,r3,r2
811011f8:	e0bff015 	stw	r2,-64(fp)
  if (bSuccess){
811011fc:	e0bfe517 	ldw	r2,-108(fp)
81101200:	10001726 	beq	r2,zero,81101260 <DDR2_MEMORY_READ_TEST+0x364>
    printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101204:	e13ff017 	ldw	r4,-64(fp)
81101208:	110b7240 	call	8110b724 <__floatsisf>
8110120c:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101210:	d0a07317 	ldw	r2,-32308(gp)
81101214:	1009883a 	mov	r4,r2
81101218:	110b8480 	call	8110b848 <__floatunsisf>
8110121c:	1007883a 	mov	r3,r2
81101220:	180b883a 	mov	r5,r3
81101224:	8009883a 	mov	r4,r16
81101228:	110aee80 	call	8110aee8 <__divsf3>
8110122c:	1007883a 	mov	r3,r2
81101230:	1805883a 	mov	r2,r3
81101234:	1009883a 	mov	r4,r2
81101238:	110c0500 	call	8110c050 <__extendsfdf2>
8110123c:	1009883a 	mov	r4,r2
81101240:	180b883a 	mov	r5,r3
81101244:	200d883a 	mov	r6,r4
81101248:	280f883a 	mov	r7,r5
8110124c:	e17fe717 	ldw	r5,-100(fp)
81101250:	012044f4 	movhi	r4,33043
81101254:	2116dd04 	addi	r4,r4,23412
81101258:	110d7800 	call	8110d780 <printf>
8110125c:	00000306 	br	8110126c <DDR2_MEMORY_READ_TEST+0x370>
  } else {
    printf("DDR2 read test fail\n");
81101260:	012044f4 	movhi	r4,33043
81101264:	2116e904 	addi	r4,r4,23460
81101268:	110d89c0 	call	8110d89c <puts>
  }
  printf("\n");
8110126c:	01000284 	movi	r4,10
81101270:	110d7c40 	call	8110d7c4 <putchar>

  return bSuccess;
81101274:	e0bfe517 	ldw	r2,-108(fp)
}
81101278:	e6fffe04 	addi	sp,fp,-8
8110127c:	dfc00317 	ldw	ra,12(sp)
81101280:	df000217 	ldw	fp,8(sp)
81101284:	dc400117 	ldw	r17,4(sp)
81101288:	dc000017 	ldw	r16,0(sp)
8110128c:	dec00404 	addi	sp,sp,16
81101290:	f800283a 	ret

81101294 <DDR2_MEMORY_RANDOM_WRITE_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_WRITE_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81101294:	deffed04 	addi	sp,sp,-76
81101298:	dfc01215 	stw	ra,72(sp)
8110129c:	df001115 	stw	fp,68(sp)
811012a0:	dcc01015 	stw	r19,64(sp)
811012a4:	dc800f15 	stw	r18,60(sp)
811012a8:	dc400e15 	stw	r17,56(sp)
811012ac:	dc000d15 	stw	r16,52(sp)
811012b0:	df001104 	addi	fp,sp,68
811012b4:	2005883a 	mov	r2,r4
811012b8:	e17ffa15 	stw	r5,-24(fp)
811012bc:	e1bffb15 	stw	r6,-20(fp)
811012c0:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Write Test =====\n");
811012c4:	012044f4 	movhi	r4,33043
811012c8:	2116ee04 	addi	r4,r4,23480
811012cc:	110d89c0 	call	8110d89c <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
811012d0:	00800044 	movi	r2,1
811012d4:	e0bff415 	stw	r2,-48(fp)
  switch (MemoryId) {
811012d8:	e0bff903 	ldbu	r2,-28(fp)
811012dc:	10c00060 	cmpeqi	r3,r2,1
811012e0:	1800031e 	bne	r3,zero,811012f0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x5c>
811012e4:	108000a0 	cmpeqi	r2,r2,2
811012e8:	1000081e 	bne	r2,zero,8110130c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x78>
811012ec:	00000e06 	br	81101328 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811012f0:	e0bff903 	ldbu	r2,-28(fp)
811012f4:	1009883a 	mov	r4,r2
811012f8:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811012fc:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
81101300:	00a00034 	movhi	r2,32768
81101304:	e0bff015 	stw	r2,-64(fp)
    break;
81101308:	00000d06 	br	81101340 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
8110130c:	e0bff903 	ldbu	r2,-28(fp)
81101310:	1009883a 	mov	r4,r2
81101314:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
81101318:	e03fef15 	stw	zero,-68(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
8110131c:	00a00034 	movhi	r2,32768
81101320:	e0bff015 	stw	r2,-64(fp)
    break;
81101324:	00000606 	br	81101340 <DDR2_MEMORY_RANDOM_WRITE_TEST+0xac>
    default:
      bSuccess = FALSE;
81101328:	e03ff415 	stw	zero,-48(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
8110132c:	012044f4 	movhi	r4,33043
81101330:	2114a604 	addi	r4,r4,21144
81101334:	110d89c0 	call	8110d89c <puts>
      return bSuccess;
81101338:	e0bff417 	ldw	r2,-48(fp)
8110133c:	00008406 	br	81101550 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2bc>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81101340:	e0bff017 	ldw	r2,-64(fp)
81101344:	1004d53a 	srli	r2,r2,20
81101348:	100b883a 	mov	r5,r2
8110134c:	012044f4 	movhi	r4,33043
81101350:	2116a004 	addi	r4,r4,23168
81101354:	110d7800 	call	8110d780 <printf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101358:	d0a07417 	ldw	r2,-32304(gp)
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  InitialState = alt_nticks();
8110135c:	d0a03d15 	stw	r2,-32524(gp)
  CurrentState = InitialState;
81101360:	d0a03d17 	ldw	r2,-32524(gp)
81101364:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81101368:	e0ffef17 	ldw	r3,-68(fp)
8110136c:	e0bff017 	ldw	r2,-64(fp)
81101370:	1885883a 	add	r2,r3,r2
81101374:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
81101378:	e0fff017 	ldw	r3,-64(fp)
8110137c:	00b33374 	movhi	r2,52429
81101380:	10b33344 	addi	r2,r2,-13107
81101384:	1888383a 	mulxuu	r4,r3,r2
81101388:	1885383a 	mul	r2,r3,r2
8110138c:	1025883a 	mov	r18,r2
81101390:	2027883a 	mov	r19,r4
81101394:	9806d13a 	srli	r3,r19,4
81101398:	e0bfef17 	ldw	r2,-68(fp)
8110139c:	1885883a 	add	r2,r3,r2
811013a0:	e0bff215 	stw	r2,-56(fp)
  Percentage = 5;
811013a4:	00800144 	movi	r2,5
811013a8:	e0bff305 	stb	r2,-52(fp)
  printf("Writing to memory...\n");
811013ac:	012044f4 	movhi	r4,33043
811013b0:	2116fa04 	addi	r4,r4,23528
811013b4:	110d89c0 	call	8110d89c <puts>
  if (bVerbose == DDR2_VERBOSE) {
811013b8:	e0bffa17 	ldw	r2,-24(fp)
811013bc:	10800058 	cmpnei	r2,r2,1
811013c0:	1000031e 	bne	r2,zero,811013d0 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x13c>
    printf("00%%..");
811013c4:	012044f4 	movhi	r4,33043
811013c8:	21170004 	addi	r4,r4,23552
811013cc:	110d7800 	call	8110d780 <printf>
  }
  int TimeStart, TimeElapsed = 0;
811013d0:	e03ff615 	stw	zero,-40(fp)
811013d4:	d0a07417 	ldw	r2,-32304(gp)

  TimeStart = alt_nticks();
811013d8:	e0bff715 	stw	r2,-36(fp)
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
811013dc:	e0bfef17 	ldw	r2,-68(fp)
811013e0:	e0bff115 	stw	r2,-60(fp)
811013e4:	00002506 	br	8110147c <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1e8>
    *pDestination = xorshift32(&CurrentState);
811013e8:	e0bff804 	addi	r2,fp,-32
811013ec:	1009883a 	mov	r4,r2
811013f0:	11018440 	call	81101844 <xorshift32>
811013f4:	1007883a 	mov	r3,r2
811013f8:	e0bff117 	ldw	r2,-60(fp)
811013fc:	10c00015 	stw	r3,0(r2)
    if ((bVerbose == DDR2_VERBOSE) & ((alt_u32)pDestination > NextMilestone)){
81101400:	e0bffa17 	ldw	r2,-24(fp)
81101404:	10800060 	cmpeqi	r2,r2,1
81101408:	1009883a 	mov	r4,r2
8110140c:	e0bff117 	ldw	r2,-60(fp)
81101410:	e0fff217 	ldw	r3,-56(fp)
81101414:	1885803a 	cmpltu	r2,r3,r2
81101418:	2084703a 	and	r2,r4,r2
8110141c:	10803fcc 	andi	r2,r2,255
81101420:	10001326 	beq	r2,zero,81101470 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x1dc>
      printf("..%02d%%..",Percentage);
81101424:	e0bff303 	ldbu	r2,-52(fp)
81101428:	100b883a 	mov	r5,r2
8110142c:	012044f4 	movhi	r4,33043
81101430:	21170204 	addi	r4,r4,23560
81101434:	110d7800 	call	8110d780 <printf>
	  NextMilestone += ByteLen/20;
81101438:	e0fff017 	ldw	r3,-64(fp)
8110143c:	00b33374 	movhi	r2,52429
81101440:	10b33344 	addi	r2,r2,-13107
81101444:	1888383a 	mulxuu	r4,r3,r2
81101448:	1885383a 	mul	r2,r3,r2
8110144c:	1021883a 	mov	r16,r2
81101450:	2023883a 	mov	r17,r4
81101454:	8804d13a 	srli	r2,r17,4
81101458:	e0fff217 	ldw	r3,-56(fp)
8110145c:	1885883a 	add	r2,r3,r2
81101460:	e0bff215 	stw	r2,-56(fp)
	  Percentage += 5;
81101464:	e0bff303 	ldbu	r2,-52(fp)
81101468:	10800144 	addi	r2,r2,5
8110146c:	e0bff305 	stb	r2,-52(fp)
    printf("00%%..");
  }
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pDestination = (alt_u32*)Ddr2Base; (alt_u32)pDestination < MemoryEndAddress; pDestination++){
81101470:	e0bff117 	ldw	r2,-60(fp)
81101474:	10800104 	addi	r2,r2,4
81101478:	e0bff115 	stw	r2,-60(fp)
8110147c:	e0fff117 	ldw	r3,-60(fp)
81101480:	e0bff517 	ldw	r2,-44(fp)
81101484:	18bfd836 	bltu	r3,r2,811013e8 <__reset+0xfb0e13e8>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  alt_dcache_flush_all();
81101488:	1121a3c0 	call	81121a3c <alt_dcache_flush_all>
  if (bVerbose == DDR2_VERBOSE) {
8110148c:	e0bffa17 	ldw	r2,-24(fp)
81101490:	10800058 	cmpnei	r2,r2,1
81101494:	1000031e 	bne	r2,zero,811014a4 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x210>
    printf("..100%%\n");
81101498:	012044f4 	movhi	r4,33043
8110149c:	21170504 	addi	r4,r4,23572
811014a0:	110d7800 	call	8110d780 <printf>
  }

  if (bSuccess){
811014a4:	e0bff417 	ldw	r2,-48(fp)
811014a8:	10002326 	beq	r2,zero,81101538 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2a4>
    if (bTime == TRUE){
811014ac:	e0bffb17 	ldw	r2,-20(fp)
811014b0:	10800058 	cmpnei	r2,r2,1
811014b4:	10001b1e 	bne	r2,zero,81101524 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x290>
811014b8:	d0e07417 	ldw	r3,-32304(gp)
      TimeElapsed = alt_nticks() - TimeStart;
811014bc:	e0bff717 	ldw	r2,-36(fp)
811014c0:	1885c83a 	sub	r2,r3,r2
811014c4:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 write test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
811014c8:	e13ff617 	ldw	r4,-40(fp)
811014cc:	110b7240 	call	8110b724 <__floatsisf>
811014d0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811014d4:	d0a07317 	ldw	r2,-32308(gp)
811014d8:	1009883a 	mov	r4,r2
811014dc:	110b8480 	call	8110b848 <__floatunsisf>
811014e0:	1007883a 	mov	r3,r2
811014e4:	180b883a 	mov	r5,r3
811014e8:	8009883a 	mov	r4,r16
811014ec:	110aee80 	call	8110aee8 <__divsf3>
811014f0:	1007883a 	mov	r3,r2
811014f4:	1805883a 	mov	r2,r3
811014f8:	1009883a 	mov	r4,r2
811014fc:	110c0500 	call	8110c050 <__extendsfdf2>
81101500:	1009883a 	mov	r4,r2
81101504:	180b883a 	mov	r5,r3
81101508:	200d883a 	mov	r6,r4
8110150c:	280f883a 	mov	r7,r5
81101510:	e17ff017 	ldw	r5,-64(fp)
81101514:	012044f4 	movhi	r4,33043
81101518:	2116ac04 	addi	r4,r4,23216
8110151c:	110d7800 	call	8110d780 <printf>
81101520:	00000806 	br	81101544 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    } else {
      printf("DDR2 write test pass, size=%d bytes\n", ByteLen);
81101524:	e17ff017 	ldw	r5,-64(fp)
81101528:	012044f4 	movhi	r4,33043
8110152c:	21170804 	addi	r4,r4,23584
81101530:	110d7800 	call	8110d780 <printf>
81101534:	00000306 	br	81101544 <DDR2_MEMORY_RANDOM_WRITE_TEST+0x2b0>
    }
  } else {
    printf("DDR2 write test fail\n");
81101538:	012044f4 	movhi	r4,33043
8110153c:	2116b804 	addi	r4,r4,23264
81101540:	110d89c0 	call	8110d89c <puts>
  }
  printf("\n");
81101544:	01000284 	movi	r4,10
81101548:	110d7c40 	call	8110d7c4 <putchar>

  return bSuccess;
8110154c:	e0bff417 	ldw	r2,-48(fp)
}
81101550:	e6fffc04 	addi	sp,fp,-16
81101554:	dfc00517 	ldw	ra,20(sp)
81101558:	df000417 	ldw	fp,16(sp)
8110155c:	dcc00317 	ldw	r19,12(sp)
81101560:	dc800217 	ldw	r18,8(sp)
81101564:	dc400117 	ldw	r17,4(sp)
81101568:	dc000017 	ldw	r16,0(sp)
8110156c:	dec00604 	addi	sp,sp,24
81101570:	f800283a 	ret

81101574 <DDR2_MEMORY_RANDOM_READ_TEST>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DDR2_MEMORY_RANDOM_READ_TEST(alt_u8 MemoryId, bool bVerbose, bool bTime){
81101574:	deffed04 	addi	sp,sp,-76
81101578:	dfc01215 	stw	ra,72(sp)
8110157c:	df001115 	stw	fp,68(sp)
81101580:	dcc01015 	stw	r19,64(sp)
81101584:	dc800f15 	stw	r18,60(sp)
81101588:	dc400e15 	stw	r17,56(sp)
8110158c:	dc000d15 	stw	r16,52(sp)
81101590:	df001104 	addi	fp,sp,68
81101594:	2005883a 	mov	r2,r4
81101598:	e17ffa15 	stw	r5,-24(fp)
8110159c:	e1bffb15 	stw	r6,-20(fp)
811015a0:	e0bff905 	stb	r2,-28(fp)

  printf("===== DE4 DDR2 Memory Random Read Test =====\n");
811015a4:	012044f4 	movhi	r4,33043
811015a8:	21171204 	addi	r4,r4,23624
811015ac:	110d89c0 	call	8110d89c <puts>
  bool bSuccess;
  alt_u32 Ddr2Base;
  alt_u32 ByteLen;
  
  bSuccess = TRUE;
811015b0:	00800044 	movi	r2,1
811015b4:	e0bfef15 	stw	r2,-68(fp)
  switch (MemoryId) {
811015b8:	e0bff903 	ldbu	r2,-28(fp)
811015bc:	10c00060 	cmpeqi	r3,r2,1
811015c0:	1800031e 	bne	r3,zero,811015d0 <DDR2_MEMORY_RANDOM_READ_TEST+0x5c>
811015c4:	108000a0 	cmpeqi	r2,r2,2
811015c8:	1000081e 	bne	r2,zero,811015ec <DDR2_MEMORY_RANDOM_READ_TEST+0x78>
811015cc:	00000e06 	br	81101608 <DDR2_MEMORY_RANDOM_READ_TEST+0x94>
    case DDR2_M1_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811015d0:	e0bff903 	ldbu	r2,-28(fp)
811015d4:	1009883a 	mov	r4,r2
811015d8:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811015dc:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M1_MEMORY_SIZE;
811015e0:	00a00034 	movhi	r2,32768
811015e4:	e0bff115 	stw	r2,-60(fp)
    break;
811015e8:	00000d06 	br	81101620 <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    case DDR2_M2_ID:
        DDR2_SWITCH_MEMORY(MemoryId);
811015ec:	e0bff903 	ldbu	r2,-28(fp)
811015f0:	1009883a 	mov	r4,r2
811015f4:	1100a500 	call	81100a50 <DDR2_SWITCH_MEMORY>
        Ddr2Base = DDR2_EXTENDED_ADDRESS_WINDOWED_BASE;
811015f8:	e03ff015 	stw	zero,-64(fp)
        ByteLen = DDR2_M2_MEMORY_SIZE;
811015fc:	00a00034 	movhi	r2,32768
81101600:	e0bff115 	stw	r2,-60(fp)
    break;
81101604:	00000606 	br	81101620 <DDR2_MEMORY_RANDOM_READ_TEST+0xac>
    default:
      bSuccess = FALSE;
81101608:	e03fef15 	stw	zero,-68(fp)
	  printf("DR2 Memory ID not identified!! Aborting Test \n");
8110160c:	012044f4 	movhi	r4,33043
81101610:	2114a604 	addi	r4,r4,21144
81101614:	110d89c0 	call	8110d89c <puts>
      return bSuccess;
81101618:	e0bfef17 	ldw	r2,-68(fp)
8110161c:	00008006 	br	81101820 <DDR2_MEMORY_RANDOM_READ_TEST+0x2ac>
  }
  
  printf("DDR2 Size: %d MBytes\n", ByteLen/1024/1024);
81101620:	e0bff117 	ldw	r2,-60(fp)
81101624:	1004d53a 	srli	r2,r2,20
81101628:	100b883a 	mov	r5,r2
8110162c:	012044f4 	movhi	r4,33043
81101630:	2116a004 	addi	r4,r4,23168
81101634:	110d7800 	call	8110d780 <printf>
  alt_u32 CurrentState;
  alt_u32 MemoryEndAddress;
  alt_u32 NextMilestone;
  alt_u8 Percentage;
  
  CurrentState = InitialState;
81101638:	d0a03d17 	ldw	r2,-32524(gp)
8110163c:	e0bff815 	stw	r2,-32(fp)
  MemoryEndAddress = Ddr2Base + ByteLen;
81101640:	e0fff017 	ldw	r3,-64(fp)
81101644:	e0bff117 	ldw	r2,-60(fp)
81101648:	1885883a 	add	r2,r3,r2
8110164c:	e0bff515 	stw	r2,-44(fp)
  NextMilestone = Ddr2Base + ByteLen/20;
81101650:	e0fff117 	ldw	r3,-60(fp)
81101654:	00b33374 	movhi	r2,52429
81101658:	10b33344 	addi	r2,r2,-13107
8110165c:	1888383a 	mulxuu	r4,r3,r2
81101660:	1885383a 	mul	r2,r3,r2
81101664:	1025883a 	mov	r18,r2
81101668:	2027883a 	mov	r19,r4
8110166c:	9806d13a 	srli	r3,r19,4
81101670:	e0bff017 	ldw	r2,-64(fp)
81101674:	1885883a 	add	r2,r3,r2
81101678:	e0bff315 	stw	r2,-52(fp)
  Percentage = 5;
8110167c:	00800144 	movi	r2,5
81101680:	e0bff405 	stb	r2,-48(fp)
  printf("Reading from memory...\n");
81101684:	012044f4 	movhi	r4,33043
81101688:	21171e04 	addi	r4,r4,23672
8110168c:	110d89c0 	call	8110d89c <puts>
  if (bVerbose == DDR2_VERBOSE) {
81101690:	e0bffa17 	ldw	r2,-24(fp)
81101694:	10800058 	cmpnei	r2,r2,1
81101698:	1000031e 	bne	r2,zero,811016a8 <DDR2_MEMORY_RANDOM_READ_TEST+0x134>
    printf("00%%..");
8110169c:	012044f4 	movhi	r4,33043
811016a0:	21170004 	addi	r4,r4,23552
811016a4:	110d7800 	call	8110d780 <printf>
  }
  
  int TimeStart, TimeElapsed = 0;
811016a8:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811016ac:	d0a07417 	ldw	r2,-32304(gp)

  TimeStart = alt_nticks();
811016b0:	e0bff715 	stw	r2,-36(fp)
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
811016b4:	e0bff017 	ldw	r2,-64(fp)
811016b8:	e0bff215 	stw	r2,-56(fp)
811016bc:	00002406 	br	81101750 <DDR2_MEMORY_RANDOM_READ_TEST+0x1dc>
    if (xorshift32(&CurrentState) != *pSource){
811016c0:	e0bff804 	addi	r2,fp,-32
811016c4:	1009883a 	mov	r4,r2
811016c8:	11018440 	call	81101844 <xorshift32>
811016cc:	1007883a 	mov	r3,r2
811016d0:	e0bff217 	ldw	r2,-56(fp)
811016d4:	10800017 	ldw	r2,0(r2)
811016d8:	18800126 	beq	r3,r2,811016e0 <DDR2_MEMORY_RANDOM_READ_TEST+0x16c>
      bSuccess = FALSE;
811016dc:	e03fef15 	stw	zero,-68(fp)
	  if (bVerbose == DDR2_VERBOSE) {
        //printf("Failed to read adress 0x%08X\n", pSource);
      }
    }
    if ((bVerbose == DDR2_VERBOSE) && ((alt_u32)pSource > NextMilestone)){
811016e0:	e0bffa17 	ldw	r2,-24(fp)
811016e4:	10800058 	cmpnei	r2,r2,1
811016e8:	1000161e 	bne	r2,zero,81101744 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
811016ec:	e0bff217 	ldw	r2,-56(fp)
811016f0:	e0fff317 	ldw	r3,-52(fp)
811016f4:	1880132e 	bgeu	r3,r2,81101744 <DDR2_MEMORY_RANDOM_READ_TEST+0x1d0>
      printf("..%02d%%..",Percentage);
811016f8:	e0bff403 	ldbu	r2,-48(fp)
811016fc:	100b883a 	mov	r5,r2
81101700:	012044f4 	movhi	r4,33043
81101704:	21170204 	addi	r4,r4,23560
81101708:	110d7800 	call	8110d780 <printf>
	  NextMilestone += ByteLen/20;
8110170c:	e0fff117 	ldw	r3,-60(fp)
81101710:	00b33374 	movhi	r2,52429
81101714:	10b33344 	addi	r2,r2,-13107
81101718:	1888383a 	mulxuu	r4,r3,r2
8110171c:	1885383a 	mul	r2,r3,r2
81101720:	1021883a 	mov	r16,r2
81101724:	2023883a 	mov	r17,r4
81101728:	8804d13a 	srli	r2,r17,4
8110172c:	e0fff317 	ldw	r3,-52(fp)
81101730:	1885883a 	add	r2,r3,r2
81101734:	e0bff315 	stw	r2,-52(fp)
	  Percentage += 5;
81101738:	e0bff403 	ldbu	r2,-48(fp)
8110173c:	10800144 	addi	r2,r2,5
81101740:	e0bff405 	stb	r2,-48(fp)
  }
  
  int TimeStart, TimeElapsed = 0;

  TimeStart = alt_nticks();
  for (pSource = (alt_u32*)Ddr2Base; (alt_u32)pSource < MemoryEndAddress; pSource++){
81101744:	e0bff217 	ldw	r2,-56(fp)
81101748:	10800104 	addi	r2,r2,4
8110174c:	e0bff215 	stw	r2,-56(fp)
81101750:	e0fff217 	ldw	r3,-56(fp)
81101754:	e0bff517 	ldw	r2,-44(fp)
81101758:	18bfd936 	bltu	r3,r2,811016c0 <__reset+0xfb0e16c0>
      printf("..%02d%%..",Percentage);
	  NextMilestone += ByteLen/20;
	  Percentage += 5;
	}
  }
  if (bVerbose == DDR2_VERBOSE) {
8110175c:	e0bffa17 	ldw	r2,-24(fp)
81101760:	10800058 	cmpnei	r2,r2,1
81101764:	1000031e 	bne	r2,zero,81101774 <DDR2_MEMORY_RANDOM_READ_TEST+0x200>
    printf("..100%%\n");
81101768:	012044f4 	movhi	r4,33043
8110176c:	21170504 	addi	r4,r4,23572
81101770:	110d7800 	call	8110d780 <printf>
  }

  if (bSuccess){
81101774:	e0bfef17 	ldw	r2,-68(fp)
81101778:	10002326 	beq	r2,zero,81101808 <DDR2_MEMORY_RANDOM_READ_TEST+0x294>
    if (bTime == TRUE){
8110177c:	e0bffb17 	ldw	r2,-20(fp)
81101780:	10800058 	cmpnei	r2,r2,1
81101784:	10001b1e 	bne	r2,zero,811017f4 <DDR2_MEMORY_RANDOM_READ_TEST+0x280>
81101788:	d0e07417 	ldw	r3,-32304(gp)
      TimeElapsed = alt_nticks() - TimeStart;
8110178c:	e0bff717 	ldw	r2,-36(fp)
81101790:	1885c83a 	sub	r2,r3,r2
81101794:	e0bff615 	stw	r2,-40(fp)
      printf("DDR2 read test pass, size=%d bytes, %.3f sec\n", ByteLen, (float)TimeElapsed/(float)alt_ticks_per_second());
81101798:	e13ff617 	ldw	r4,-40(fp)
8110179c:	110b7240 	call	8110b724 <__floatsisf>
811017a0:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811017a4:	d0a07317 	ldw	r2,-32308(gp)
811017a8:	1009883a 	mov	r4,r2
811017ac:	110b8480 	call	8110b848 <__floatunsisf>
811017b0:	1007883a 	mov	r3,r2
811017b4:	180b883a 	mov	r5,r3
811017b8:	8009883a 	mov	r4,r16
811017bc:	110aee80 	call	8110aee8 <__divsf3>
811017c0:	1007883a 	mov	r3,r2
811017c4:	1805883a 	mov	r2,r3
811017c8:	1009883a 	mov	r4,r2
811017cc:	110c0500 	call	8110c050 <__extendsfdf2>
811017d0:	1009883a 	mov	r4,r2
811017d4:	180b883a 	mov	r5,r3
811017d8:	200d883a 	mov	r6,r4
811017dc:	280f883a 	mov	r7,r5
811017e0:	e17ff117 	ldw	r5,-60(fp)
811017e4:	012044f4 	movhi	r4,33043
811017e8:	2116dd04 	addi	r4,r4,23412
811017ec:	110d7800 	call	8110d780 <printf>
811017f0:	00000806 	br	81101814 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    } else {
      printf("DDR2 read test pass, size=%d bytes\n", ByteLen);
811017f4:	e17ff117 	ldw	r5,-60(fp)
811017f8:	012044f4 	movhi	r4,33043
811017fc:	21172404 	addi	r4,r4,23696
81101800:	110d7800 	call	8110d780 <printf>
81101804:	00000306 	br	81101814 <DDR2_MEMORY_RANDOM_READ_TEST+0x2a0>
    }
  } else {
    printf("DDR2 read test fail\n");
81101808:	012044f4 	movhi	r4,33043
8110180c:	2116e904 	addi	r4,r4,23460
81101810:	110d89c0 	call	8110d89c <puts>
  }
  printf("\n");
81101814:	01000284 	movi	r4,10
81101818:	110d7c40 	call	8110d7c4 <putchar>

  return bSuccess;
8110181c:	e0bfef17 	ldw	r2,-68(fp)
}
81101820:	e6fffc04 	addi	sp,fp,-16
81101824:	dfc00517 	ldw	ra,20(sp)
81101828:	df000417 	ldw	fp,16(sp)
8110182c:	dcc00317 	ldw	r19,12(sp)
81101830:	dc800217 	ldw	r18,8(sp)
81101834:	dc400117 	ldw	r17,4(sp)
81101838:	dc000017 	ldw	r16,0(sp)
8110183c:	dec00604 	addi	sp,sp,24
81101840:	f800283a 	ret

81101844 <xorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
  *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 xorshift32(alt_u32 *State){
81101844:	defffd04 	addi	sp,sp,-12
81101848:	df000215 	stw	fp,8(sp)
8110184c:	df000204 	addi	fp,sp,8
81101850:	e13fff15 	stw	r4,-4(fp)

  alt_u32 x = *State;
81101854:	e0bfff17 	ldw	r2,-4(fp)
81101858:	10800017 	ldw	r2,0(r2)
8110185c:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 13;
81101860:	e0bffe17 	ldw	r2,-8(fp)
81101864:	1004937a 	slli	r2,r2,13
81101868:	e0fffe17 	ldw	r3,-8(fp)
8110186c:	1884f03a 	xor	r2,r3,r2
81101870:	e0bffe15 	stw	r2,-8(fp)
  x ^= x >> 17;
81101874:	e0bffe17 	ldw	r2,-8(fp)
81101878:	1004d47a 	srli	r2,r2,17
8110187c:	e0fffe17 	ldw	r3,-8(fp)
81101880:	1884f03a 	xor	r2,r3,r2
81101884:	e0bffe15 	stw	r2,-8(fp)
  x ^= x << 5;
81101888:	e0bffe17 	ldw	r2,-8(fp)
8110188c:	1004917a 	slli	r2,r2,5
81101890:	e0fffe17 	ldw	r3,-8(fp)
81101894:	1884f03a 	xor	r2,r3,r2
81101898:	e0bffe15 	stw	r2,-8(fp)
  *State = x;
8110189c:	e0bfff17 	ldw	r2,-4(fp)
811018a0:	e0fffe17 	ldw	r3,-8(fp)
811018a4:	10c00015 	stw	r3,0(r2)

  return x;
811018a8:	e0bffe17 	ldw	r2,-8(fp)
}
811018ac:	e037883a 	mov	sp,fp
811018b0:	df000017 	ldw	fp,0(sp)
811018b4:	dec00104 	addi	sp,sp,4
811018b8:	f800283a 	ret

811018bc <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
811018bc:	defffb04 	addi	sp,sp,-20
811018c0:	dfc00415 	stw	ra,16(sp)
811018c4:	df000315 	stw	fp,12(sp)
811018c8:	df000304 	addi	fp,sp,12
811018cc:	e13ffe15 	stw	r4,-8(fp)
811018d0:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811018d4:	00800044 	movi	r2,1
811018d8:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
811018dc:	e13fff17 	ldw	r4,-4(fp)
811018e0:	1133aa80 	call	81133aa8 <alt_msgdma_open>
811018e4:	1007883a 	mov	r3,r2
811018e8:	e0bffe17 	ldw	r2,-8(fp)
811018ec:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
811018f0:	e0bffe17 	ldw	r2,-8(fp)
811018f4:	10800017 	ldw	r2,0(r2)
811018f8:	1000011e 	bne	r2,zero,81101900 <DMA_OPEN_DEVICE+0x44>
    bSuccess = FALSE;
811018fc:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81101900:	e0bffd17 	ldw	r2,-12(fp)
}
81101904:	e037883a 	mov	sp,fp
81101908:	dfc00117 	ldw	ra,4(sp)
8110190c:	df000017 	ldw	fp,0(sp)
81101910:	dec00204 	addi	sp,sp,8
81101914:	f800283a 	ret

81101918 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
81101918:	defffc04 	addi	sp,sp,-16
8110191c:	df000315 	stw	fp,12(sp)
81101920:	df000304 	addi	fp,sp,12
81101924:	e13ffe15 	stw	r4,-8(fp)
81101928:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
8110192c:	00800044 	movi	r2,1
81101930:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
81101934:	e0bffe17 	ldw	r2,-8(fp)
81101938:	10800317 	ldw	r2,12(r2)
8110193c:	10800104 	addi	r2,r2,4
81101940:	e0ffff17 	ldw	r3,-4(fp)
81101944:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
81101948:	e0bffd17 	ldw	r2,-12(fp)
}
8110194c:	e037883a 	mov	sp,fp
81101950:	df000017 	ldw	fp,0(sp)
81101954:	dec00104 	addi	sp,sp,4
81101958:	f800283a 	ret

8110195c <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
8110195c:	defffd04 	addi	sp,sp,-12
81101960:	df000215 	stw	fp,8(sp)
81101964:	df000204 	addi	fp,sp,8
81101968:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
8110196c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81101970:	e0bfff17 	ldw	r2,-4(fp)
81101974:	10800317 	ldw	r2,12(r2)
81101978:	10800037 	ldwio	r2,0(r2)
8110197c:	1080004c 	andi	r2,r2,1
81101980:	10000226 	beq	r2,zero,8110198c <DMA_BUSY+0x30>
    bBusy = TRUE;
81101984:	00800044 	movi	r2,1
81101988:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
8110198c:	e0bffe17 	ldw	r2,-8(fp)
}
81101990:	e037883a 	mov	sp,fp
81101994:	df000017 	ldw	fp,0(sp)
81101998:	dec00104 	addi	sp,sp,4
8110199c:	f800283a 	ret

811019a0 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
811019a0:	defffd04 	addi	sp,sp,-12
811019a4:	df000215 	stw	fp,8(sp)
811019a8:	df000204 	addi	fp,sp,8
811019ac:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
811019b0:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
811019b4:	e0bfff17 	ldw	r2,-4(fp)
811019b8:	10800317 	ldw	r2,12(r2)
811019bc:	10800037 	ldwio	r2,0(r2)
811019c0:	1080010c 	andi	r2,r2,4
811019c4:	10000226 	beq	r2,zero,811019d0 <DMA_DESCRIPTOR_BUFFER_FULL+0x30>
    bFull = TRUE;
811019c8:	00800044 	movi	r2,1
811019cc:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
811019d0:	e0bffe17 	ldw	r2,-8(fp)
}
811019d4:	e037883a 	mov	sp,fp
811019d8:	df000017 	ldw	fp,0(sp)
811019dc:	dec00104 	addi	sp,sp,4
811019e0:	f800283a 	ret

811019e4 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
811019e4:	defffd04 	addi	sp,sp,-12
811019e8:	df000215 	stw	fp,8(sp)
811019ec:	df000204 	addi	fp,sp,8
811019f0:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
811019f4:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
811019f8:	e0bfff17 	ldw	r2,-4(fp)
811019fc:	10800317 	ldw	r2,12(r2)
81101a00:	10800037 	ldwio	r2,0(r2)
81101a04:	1080008c 	andi	r2,r2,2
81101a08:	10000226 	beq	r2,zero,81101a14 <DMA_DESCRIPTOR_BUFFER_EMPTY+0x30>
    bEmpty = TRUE;
81101a0c:	00800044 	movi	r2,1
81101a10:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81101a14:	e0bffe17 	ldw	r2,-8(fp)
}
81101a18:	e037883a 	mov	sp,fp
81101a1c:	df000017 	ldw	fp,0(sp)
81101a20:	dec00104 	addi	sp,sp,4
81101a24:	f800283a 	ret

81101a28 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101a28:	defffa04 	addi	sp,sp,-24
81101a2c:	dfc00515 	stw	ra,20(sp)
81101a30:	df000415 	stw	fp,16(sp)
81101a34:	df000404 	addi	fp,sp,16
81101a38:	e13ffd15 	stw	r4,-12(fp)
81101a3c:	e17ffe15 	stw	r5,-8(fp)
81101a40:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101a44:	00800044 	movi	r2,1
81101a48:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81101a4c:	e0bffd17 	ldw	r2,-12(fp)
81101a50:	10800317 	ldw	r2,12(r2)
81101a54:	10800104 	addi	r2,r2,4
81101a58:	00c00044 	movi	r3,1
81101a5c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101a60:	e0bffe17 	ldw	r2,-8(fp)
81101a64:	10800058 	cmpnei	r2,r2,1
81101a68:	10000e1e 	bne	r2,zero,81101aa4 <DMA_DISPATCHER_STOP+0x7c>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101a6c:	00000706 	br	81101a8c <DMA_DISPATCHER_STOP+0x64>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101a70:	e0bfff17 	ldw	r2,-4(fp)
81101a74:	1000031e 	bne	r2,zero,81101a84 <DMA_DISPATCHER_STOP+0x5c>
        usleep(1);
81101a78:	01000044 	movi	r4,1
81101a7c:	11224640 	call	81122464 <usleep>
81101a80:	00000206 	br	81101a8c <DMA_DISPATCHER_STOP+0x64>
      } else {
        usleep(WaitPeriodUs);
81101a84:	e13fff17 	ldw	r4,-4(fp)
81101a88:	11224640 	call	81122464 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81101a8c:	e0bffd17 	ldw	r2,-12(fp)
81101a90:	10800317 	ldw	r2,12(r2)
81101a94:	10800037 	ldwio	r2,0(r2)
81101a98:	1080080c 	andi	r2,r2,32
81101a9c:	103ff41e 	bne	r2,zero,81101a70 <__reset+0xfb0e1a70>
81101aa0:	00000206 	br	81101aac <DMA_DISPATCHER_STOP+0x84>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101aa4:	e0bffc17 	ldw	r2,-16(fp)
81101aa8:	00000106 	br	81101ab0 <DMA_DISPATCHER_STOP+0x88>
  }
  
  return bSuccess;
81101aac:	e0bffc17 	ldw	r2,-16(fp)
}
81101ab0:	e037883a 	mov	sp,fp
81101ab4:	dfc00117 	ldw	ra,4(sp)
81101ab8:	df000017 	ldw	fp,0(sp)
81101abc:	dec00204 	addi	sp,sp,8
81101ac0:	f800283a 	ret

81101ac4 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81101ac4:	defffa04 	addi	sp,sp,-24
81101ac8:	dfc00515 	stw	ra,20(sp)
81101acc:	df000415 	stw	fp,16(sp)
81101ad0:	df000404 	addi	fp,sp,16
81101ad4:	e13ffd15 	stw	r4,-12(fp)
81101ad8:	e17ffe15 	stw	r5,-8(fp)
81101adc:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81101ae0:	00800044 	movi	r2,1
81101ae4:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81101ae8:	e0bffd17 	ldw	r2,-12(fp)
81101aec:	10800317 	ldw	r2,12(r2)
81101af0:	10800104 	addi	r2,r2,4
81101af4:	00c00084 	movi	r3,2
81101af8:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81101afc:	e0bffe17 	ldw	r2,-8(fp)
81101b00:	10800058 	cmpnei	r2,r2,1
81101b04:	10000e1e 	bne	r2,zero,81101b40 <DMA_DISPATCHER_RESET+0x7c>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101b08:	00000706 	br	81101b28 <DMA_DISPATCHER_RESET+0x64>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101b0c:	e0bfff17 	ldw	r2,-4(fp)
81101b10:	1000031e 	bne	r2,zero,81101b20 <DMA_DISPATCHER_RESET+0x5c>
        usleep(1);
81101b14:	01000044 	movi	r4,1
81101b18:	11224640 	call	81122464 <usleep>
81101b1c:	00000206 	br	81101b28 <DMA_DISPATCHER_RESET+0x64>
      } else {
        usleep(WaitPeriodUs);
81101b20:	e13fff17 	ldw	r4,-4(fp)
81101b24:	11224640 	call	81122464 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81101b28:	e0bffd17 	ldw	r2,-12(fp)
81101b2c:	10800317 	ldw	r2,12(r2)
81101b30:	10800037 	ldwio	r2,0(r2)
81101b34:	1080100c 	andi	r2,r2,64
81101b38:	103ff41e 	bne	r2,zero,81101b0c <__reset+0xfb0e1b0c>
81101b3c:	00000206 	br	81101b48 <DMA_DISPATCHER_RESET+0x84>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81101b40:	e0bffc17 	ldw	r2,-16(fp)
81101b44:	00000106 	br	81101b4c <DMA_DISPATCHER_RESET+0x88>
  }
  
  return bSuccess;
81101b48:	e0bffc17 	ldw	r2,-16(fp)
}
81101b4c:	e037883a 	mov	sp,fp
81101b50:	dfc00117 	ldw	ra,4(sp)
81101b54:	df000017 	ldw	fp,0(sp)
81101b58:	dec00204 	addi	sp,sp,8
81101b5c:	f800283a 	ret

81101b60 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101b60:	defff604 	addi	sp,sp,-40
81101b64:	dfc00915 	stw	ra,36(sp)
81101b68:	df000815 	stw	fp,32(sp)
81101b6c:	dc000715 	stw	r16,28(sp)
81101b70:	df000804 	addi	fp,sp,32
81101b74:	e13ffb15 	stw	r4,-20(fp)
81101b78:	e17ffc15 	stw	r5,-16(fp)
81101b7c:	e1bffd15 	stw	r6,-12(fp)
81101b80:	e1fffe15 	stw	r7,-8(fp)
81101b84:	defff804 	addi	sp,sp,-32
81101b88:	d8800204 	addi	r2,sp,8
81101b8c:	108003c4 	addi	r2,r2,15
81101b90:	1004d13a 	srli	r2,r2,4
81101b94:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101b98:	00800044 	movi	r2,1
81101b9c:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81101ba0:	e0fffc17 	ldw	r3,-16(fp)
81101ba4:	e13ffd17 	ldw	r4,-12(fp)
81101ba8:	e0800217 	ldw	r2,8(fp)
81101bac:	d8800115 	stw	r2,4(sp)
81101bb0:	e0bffe17 	ldw	r2,-8(fp)
81101bb4:	d8800015 	stw	r2,0(sp)
81101bb8:	200f883a 	mov	r7,r4
81101bbc:	180d883a 	mov	r6,r3
81101bc0:	800b883a 	mov	r5,r16
81101bc4:	e13ffb17 	ldw	r4,-20(fp)
81101bc8:	1132b3c0 	call	81132b3c <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101bcc:	10000326 	beq	r2,zero,81101bdc <DMA_SINGLE_TRANSFER+0x7c>
    bSuccess = FALSE;
81101bd0:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81101bd4:	e0bffa17 	ldw	r2,-24(fp)
81101bd8:	00001d06 	br	81101c50 <DMA_SINGLE_TRANSFER+0xf0>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101bdc:	800b883a 	mov	r5,r16
81101be0:	e13ffb17 	ldw	r4,-20(fp)
81101be4:	1133d000 	call	81133d00 <alt_msgdma_standard_descriptor_async_transfer>
81101be8:	10000326 	beq	r2,zero,81101bf8 <DMA_SINGLE_TRANSFER+0x98>
      bSuccess = FALSE;
81101bec:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81101bf0:	e0bffa17 	ldw	r2,-24(fp)
81101bf4:	00001606 	br	81101c50 <DMA_SINGLE_TRANSFER+0xf0>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101bf8:	e0bffa17 	ldw	r2,-24(fp)
81101bfc:	10800060 	cmpeqi	r2,r2,1
81101c00:	1007883a 	mov	r3,r2
81101c04:	e0800317 	ldw	r2,12(fp)
81101c08:	10800060 	cmpeqi	r2,r2,1
81101c0c:	1884703a 	and	r2,r3,r2
81101c10:	10803fcc 	andi	r2,r2,255
81101c14:	10000d26 	beq	r2,zero,81101c4c <DMA_SINGLE_TRANSFER+0xec>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101c18:	00000706 	br	81101c38 <DMA_SINGLE_TRANSFER+0xd8>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101c1c:	e0800417 	ldw	r2,16(fp)
81101c20:	1000031e 	bne	r2,zero,81101c30 <DMA_SINGLE_TRANSFER+0xd0>
        usleep(1000);
81101c24:	0100fa04 	movi	r4,1000
81101c28:	11224640 	call	81122464 <usleep>
81101c2c:	00000206 	br	81101c38 <DMA_SINGLE_TRANSFER+0xd8>
      } else {
        usleep(WaitPeriodUs);
81101c30:	e1000417 	ldw	r4,16(fp)
81101c34:	11224640 	call	81122464 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101c38:	e0bffb17 	ldw	r2,-20(fp)
81101c3c:	10800317 	ldw	r2,12(r2)
81101c40:	10800037 	ldwio	r2,0(r2)
81101c44:	1080004c 	andi	r2,r2,1
81101c48:	103ff41e 	bne	r2,zero,81101c1c <__reset+0xfb0e1c1c>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101c4c:	e0bffa17 	ldw	r2,-24(fp)
}
81101c50:	e6ffff04 	addi	sp,fp,-4
81101c54:	dfc00217 	ldw	ra,8(sp)
81101c58:	df000117 	ldw	fp,4(sp)
81101c5c:	dc000017 	ldw	r16,0(sp)
81101c60:	dec00304 	addi	sp,sp,12
81101c64:	f800283a 	ret

81101c68 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81101c68:	defff504 	addi	sp,sp,-44
81101c6c:	dfc00a15 	stw	ra,40(sp)
81101c70:	df000915 	stw	fp,36(sp)
81101c74:	dc000815 	stw	r16,32(sp)
81101c78:	df000904 	addi	fp,sp,36
81101c7c:	e13ffb15 	stw	r4,-20(fp)
81101c80:	e17ffc15 	stw	r5,-16(fp)
81101c84:	e1bffd15 	stw	r6,-12(fp)
81101c88:	3805883a 	mov	r2,r7
81101c8c:	e0bffe05 	stb	r2,-8(fp)
81101c90:	defff804 	addi	sp,sp,-32
81101c94:	d8800204 	addi	r2,sp,8
81101c98:	108003c4 	addi	r2,r2,15
81101c9c:	1004d13a 	srli	r2,r2,4
81101ca0:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81101ca4:	00800044 	movi	r2,1
81101ca8:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81101cac:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101cb0:	00002506 	br	81101d48 <DMA_MULTIPLE_TRANSFER+0xe0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81101cb4:	e0bffa03 	ldbu	r2,-24(fp)
81101cb8:	1085883a 	add	r2,r2,r2
81101cbc:	1085883a 	add	r2,r2,r2
81101cc0:	1007883a 	mov	r3,r2
81101cc4:	e0bffc17 	ldw	r2,-16(fp)
81101cc8:	10c5883a 	add	r2,r2,r3
81101ccc:	10800017 	ldw	r2,0(r2)
81101cd0:	1009883a 	mov	r4,r2
81101cd4:	e0bffa03 	ldbu	r2,-24(fp)
81101cd8:	1085883a 	add	r2,r2,r2
81101cdc:	1085883a 	add	r2,r2,r2
81101ce0:	1007883a 	mov	r3,r2
81101ce4:	e0bffd17 	ldw	r2,-12(fp)
81101ce8:	10c5883a 	add	r2,r2,r3
81101cec:	10800017 	ldw	r2,0(r2)
81101cf0:	1007883a 	mov	r3,r2
81101cf4:	e0800317 	ldw	r2,12(fp)
81101cf8:	10804034 	orhi	r2,r2,256
81101cfc:	d8800115 	stw	r2,4(sp)
81101d00:	e0800217 	ldw	r2,8(fp)
81101d04:	d8800015 	stw	r2,0(sp)
81101d08:	180f883a 	mov	r7,r3
81101d0c:	200d883a 	mov	r6,r4
81101d10:	800b883a 	mov	r5,r16
81101d14:	e13ffb17 	ldw	r4,-20(fp)
81101d18:	1132b3c0 	call	81132b3c <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101d1c:	10000226 	beq	r2,zero,81101d28 <DMA_MULTIPLE_TRANSFER+0xc0>
      bSuccess = FALSE;
81101d20:	e03ff915 	stw	zero,-28(fp)
81101d24:	00000506 	br	81101d3c <DMA_MULTIPLE_TRANSFER+0xd4>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101d28:	800b883a 	mov	r5,r16
81101d2c:	e13ffb17 	ldw	r4,-20(fp)
81101d30:	1133d000 	call	81133d00 <alt_msgdma_standard_descriptor_async_transfer>
81101d34:	10000126 	beq	r2,zero,81101d3c <DMA_MULTIPLE_TRANSFER+0xd4>
        bSuccess = FALSE;
81101d38:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81101d3c:	e0bffa03 	ldbu	r2,-24(fp)
81101d40:	10800044 	addi	r2,r2,1
81101d44:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81101d48:	e0bff917 	ldw	r2,-28(fp)
81101d4c:	10800060 	cmpeqi	r2,r2,1
81101d50:	1009883a 	mov	r4,r2
81101d54:	e0fffa03 	ldbu	r3,-24(fp)
81101d58:	e0bffe03 	ldbu	r2,-8(fp)
81101d5c:	10bfffc4 	addi	r2,r2,-1
81101d60:	1884803a 	cmplt	r2,r3,r2
81101d64:	2084703a 	and	r2,r4,r2
81101d68:	10803fcc 	andi	r2,r2,255
81101d6c:	103fd11e 	bne	r2,zero,81101cb4 <__reset+0xfb0e1cb4>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81101d70:	e0bff917 	ldw	r2,-28(fp)
81101d74:	10800058 	cmpnei	r2,r2,1
81101d78:	1000211e 	bne	r2,zero,81101e00 <DMA_MULTIPLE_TRANSFER+0x198>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81101d7c:	e0bffa03 	ldbu	r2,-24(fp)
81101d80:	1085883a 	add	r2,r2,r2
81101d84:	1085883a 	add	r2,r2,r2
81101d88:	1007883a 	mov	r3,r2
81101d8c:	e0bffc17 	ldw	r2,-16(fp)
81101d90:	10c5883a 	add	r2,r2,r3
81101d94:	10800017 	ldw	r2,0(r2)
81101d98:	1009883a 	mov	r4,r2
81101d9c:	e0bffa03 	ldbu	r2,-24(fp)
81101da0:	1085883a 	add	r2,r2,r2
81101da4:	1085883a 	add	r2,r2,r2
81101da8:	1007883a 	mov	r3,r2
81101dac:	e0bffd17 	ldw	r2,-12(fp)
81101db0:	10c5883a 	add	r2,r2,r3
81101db4:	10800017 	ldw	r2,0(r2)
81101db8:	1007883a 	mov	r3,r2
81101dbc:	e0800317 	ldw	r2,12(fp)
81101dc0:	d8800115 	stw	r2,4(sp)
81101dc4:	e0800217 	ldw	r2,8(fp)
81101dc8:	d8800015 	stw	r2,0(sp)
81101dcc:	180f883a 	mov	r7,r3
81101dd0:	200d883a 	mov	r6,r4
81101dd4:	800b883a 	mov	r5,r16
81101dd8:	e13ffb17 	ldw	r4,-20(fp)
81101ddc:	1132b3c0 	call	81132b3c <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81101de0:	10000226 	beq	r2,zero,81101dec <DMA_MULTIPLE_TRANSFER+0x184>
      bSuccess = FALSE;
81101de4:	e03ff915 	stw	zero,-28(fp)
81101de8:	00000506 	br	81101e00 <DMA_MULTIPLE_TRANSFER+0x198>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81101dec:	800b883a 	mov	r5,r16
81101df0:	e13ffb17 	ldw	r4,-20(fp)
81101df4:	1133d000 	call	81133d00 <alt_msgdma_standard_descriptor_async_transfer>
81101df8:	10000126 	beq	r2,zero,81101e00 <DMA_MULTIPLE_TRANSFER+0x198>
        bSuccess = FALSE;
81101dfc:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81101e00:	e0bff917 	ldw	r2,-28(fp)
81101e04:	10800060 	cmpeqi	r2,r2,1
81101e08:	1007883a 	mov	r3,r2
81101e0c:	e0800417 	ldw	r2,16(fp)
81101e10:	10800060 	cmpeqi	r2,r2,1
81101e14:	1884703a 	and	r2,r3,r2
81101e18:	10803fcc 	andi	r2,r2,255
81101e1c:	10000d26 	beq	r2,zero,81101e54 <DMA_MULTIPLE_TRANSFER+0x1ec>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101e20:	00000706 	br	81101e40 <DMA_MULTIPLE_TRANSFER+0x1d8>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81101e24:	e0800517 	ldw	r2,20(fp)
81101e28:	1000031e 	bne	r2,zero,81101e38 <DMA_MULTIPLE_TRANSFER+0x1d0>
    	usleep(1000);
81101e2c:	0100fa04 	movi	r4,1000
81101e30:	11224640 	call	81122464 <usleep>
81101e34:	00000206 	br	81101e40 <DMA_MULTIPLE_TRANSFER+0x1d8>
      } else {
    	usleep(WaitPeriodUs);
81101e38:	e1000517 	ldw	r4,20(fp)
81101e3c:	11224640 	call	81122464 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81101e40:	e0bffb17 	ldw	r2,-20(fp)
81101e44:	10800317 	ldw	r2,12(r2)
81101e48:	10800037 	ldwio	r2,0(r2)
81101e4c:	1080004c 	andi	r2,r2,1
81101e50:	103ff41e 	bne	r2,zero,81101e24 <__reset+0xfb0e1e24>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81101e54:	e0bff917 	ldw	r2,-28(fp)
}
81101e58:	e6ffff04 	addi	sp,fp,-4
81101e5c:	dfc00217 	ldw	ra,8(sp)
81101e60:	df000117 	ldw	fp,4(sp)
81101e64:	dc000017 	ldw	r16,0(sp)
81101e68:	dec00304 	addi	sp,sp,12
81101e6c:	f800283a 	ret

81101e70 <POWER_Read>:
#include "sense.h"

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]){
81101e70:	deffef04 	addi	sp,sp,-68
81101e74:	dfc01015 	stw	ra,64(sp)
81101e78:	df000f15 	stw	fp,60(sp)
81101e7c:	df000f04 	addi	fp,sp,60
81101e80:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = TRUE;
81101e84:	00800044 	movi	r2,1
81101e88:	e0bff315 	stw	r2,-52(fp)
    int i,c, nPortIndex=0;
81101e8c:	e03ff615 	stw	zero,-40(fp)
    int szPortNum[] = {POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM};
81101e90:	00800204 	movi	r2,8
81101e94:	e0bffc15 	stw	r2,-16(fp)
81101e98:	00800104 	movi	r2,4
81101e9c:	e0bffd15 	stw	r2,-12(fp)
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
81101ea0:	00800044 	movi	r2,1
81101ea4:	e0bff715 	stw	r2,-36(fp)
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
81101ea8:	00800044 	movi	r2,1
81101eac:	e0bff815 	stw	r2,-32(fp)
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
81101eb0:	e03ff915 	stw	zero,-28(fp)
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81101eb4:	e03ff515 	stw	zero,-44(fp)
81101eb8:	00007106 	br	81102080 <POWER_Read+0x210>
        NextChannel = 0;
81101ebc:	e03ffa05 	stb	zero,-24(fp)
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81101ec0:	e0bff517 	ldw	r2,-44(fp)
81101ec4:	10c03fcc 	andi	r3,r2,255
81101ec8:	e13ffa03 	ldbu	r4,-24(fp)
81101ecc:	e0bfff17 	ldw	r2,-4(fp)
81101ed0:	d8800115 	stw	r2,4(sp)
81101ed4:	e0bff917 	ldw	r2,-28(fp)
81101ed8:	d8800015 	stw	r2,0(sp)
81101edc:	e1fff817 	ldw	r7,-32(fp)
81101ee0:	e1bff717 	ldw	r6,-36(fp)
81101ee4:	200b883a 	mov	r5,r4
81101ee8:	1809883a 	mov	r4,r3
81101eec:	1105ac00 	call	81105ac0 <POWER_SPI_RW>
81101ef0:	e0bff315 	stw	r2,-52(fp)
        for(i=0;i<szPortNum[c] && bSuccess;i++){
81101ef4:	e03ff415 	stw	zero,-48(fp)
81101ef8:	00005306 	br	81102048 <POWER_Read+0x1d8>
            NextChannel = i + 1;
81101efc:	e0bff417 	ldw	r2,-48(fp)
81101f00:	10800044 	addi	r2,r2,1
81101f04:	e0bffa05 	stb	r2,-24(fp)
            bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81101f08:	e0bff517 	ldw	r2,-44(fp)
81101f0c:	10c03fcc 	andi	r3,r2,255
81101f10:	e13ffa03 	ldbu	r4,-24(fp)
81101f14:	e0bffe04 	addi	r2,fp,-8
81101f18:	d8800115 	stw	r2,4(sp)
81101f1c:	e0bff917 	ldw	r2,-28(fp)
81101f20:	d8800015 	stw	r2,0(sp)
81101f24:	e1fff817 	ldw	r7,-32(fp)
81101f28:	e1bff717 	ldw	r6,-36(fp)
81101f2c:	200b883a 	mov	r5,r4
81101f30:	1809883a 	mov	r4,r3
81101f34:	1105ac00 	call	81105ac0 <POWER_SPI_RW>
81101f38:	e0bff315 	stw	r2,-52(fp)
            if (bSuccess){
81101f3c:	e0bff317 	ldw	r2,-52(fp)
81101f40:	10003b26 	beq	r2,zero,81102030 <POWER_Read+0x1c0>
                HEAD = (Value32 >> 30) & 0x03;
81101f44:	e0bffe17 	ldw	r2,-8(fp)
81101f48:	1004d7ba 	srli	r2,r2,30
81101f4c:	e0bffa45 	stb	r2,-23(fp)
                Channel = (Value32 >> 1) & 0x07;
81101f50:	e0bffe17 	ldw	r2,-8(fp)
81101f54:	1004d07a 	srli	r2,r2,1
81101f58:	108001cc 	andi	r2,r2,7
81101f5c:	e0bffa85 	stb	r2,-22(fp)
                SIGN = (Value32 >> 4 ) & 0x01;
81101f60:	e0bffe17 	ldw	r2,-8(fp)
81101f64:	1004d13a 	srli	r2,r2,4
81101f68:	1080004c 	andi	r2,r2,1
81101f6c:	e0bffac5 	stb	r2,-21(fp)
                SGL = (Value32 >> 5 ) & 0x01;
81101f70:	e0bffe17 	ldw	r2,-8(fp)
81101f74:	1004d17a 	srli	r2,r2,5
81101f78:	1080004c 	andi	r2,r2,1
81101f7c:	e0bffb05 	stb	r2,-20(fp)
                PARITY = Value32 & 0x01;
81101f80:	e0bffe17 	ldw	r2,-8(fp)
81101f84:	1080004c 	andi	r2,r2,1
81101f88:	e0bffb45 	stb	r2,-19(fp)
                if (HEAD != 0){
81101f8c:	e0bffa43 	ldbu	r2,-23(fp)
81101f90:	10000626 	beq	r2,zero,81101fac <POWER_Read+0x13c>
                    printf("[%d]Unexpected HEAD\r\n",i);
81101f94:	e17ff417 	ldw	r5,-48(fp)
81101f98:	012044f4 	movhi	r4,33043
81101f9c:	21172d04 	addi	r4,r4,23732
81101fa0:	110d7800 	call	8110d780 <printf>
                    bSuccess = FALSE;
81101fa4:	e03ff315 	stw	zero,-52(fp)
81101fa8:	00001406 	br	81101ffc <POWER_Read+0x18c>
                }else if (Channel != i){
81101fac:	e0fffa83 	ldbu	r3,-22(fp)
81101fb0:	e0bff417 	ldw	r2,-48(fp)
81101fb4:	18800926 	beq	r3,r2,81101fdc <POWER_Read+0x16c>
                    printf("[%d]Unexpected Channel. Expected:%d, Read:%d\r\n", i, i, Channel);
81101fb8:	e0bffa83 	ldbu	r2,-22(fp)
81101fbc:	100f883a 	mov	r7,r2
81101fc0:	e1bff417 	ldw	r6,-48(fp)
81101fc4:	e17ff417 	ldw	r5,-48(fp)
81101fc8:	012044f4 	movhi	r4,33043
81101fcc:	21173304 	addi	r4,r4,23756
81101fd0:	110d7800 	call	8110d780 <printf>
                    bSuccess = FALSE;
81101fd4:	e03ff315 	stw	zero,-52(fp)
81101fd8:	00000806 	br	81101ffc <POWER_Read+0x18c>
                }else if (SIGN ^ bSIGN){
81101fdc:	e0fffac3 	ldbu	r3,-21(fp)
81101fe0:	e0bff817 	ldw	r2,-32(fp)
81101fe4:	18800526 	beq	r3,r2,81101ffc <POWER_Read+0x18c>
                    printf("[%d]Unexpected SIGN\r\n",i);
81101fe8:	e17ff417 	ldw	r5,-48(fp)
81101fec:	012044f4 	movhi	r4,33043
81101ff0:	21173f04 	addi	r4,r4,23804
81101ff4:	110d7800 	call	8110d780 <printf>
                    bSuccess = FALSE;
81101ff8:	e03ff315 	stw	zero,-52(fp)
                }else if (SGL ^ SGL){
                    printf("[%d]Unexpected SGL\r\n",i);
                    bSuccess = FALSE;
                }
                if (bSuccess)
81101ffc:	e0bff317 	ldw	r2,-52(fp)
81102000:	10000e26 	beq	r2,zero,8110203c <POWER_Read+0x1cc>
                    szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81102004:	e0bff617 	ldw	r2,-40(fp)
81102008:	10c00044 	addi	r3,r2,1
8110200c:	e0fff615 	stw	r3,-40(fp)
81102010:	1085883a 	add	r2,r2,r2
81102014:	1085883a 	add	r2,r2,r2
81102018:	1007883a 	mov	r3,r2
8110201c:	e0bfff17 	ldw	r2,-4(fp)
81102020:	10c5883a 	add	r2,r2,r3
81102024:	e0fffe17 	ldw	r3,-8(fp)
81102028:	10c00015 	stw	r3,0(r2)
8110202c:	00000306 	br	8110203c <POWER_Read+0x1cc>
            }else{
                printf("SPI Read Error\r\n");
81102030:	012044f4 	movhi	r4,33043
81102034:	21174504 	addi	r4,r4,23828
81102038:	110d89c0 	call	8110d89c <puts>
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
        NextChannel = 0;
        bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
        for(i=0;i<szPortNum[c] && bSuccess;i++){
8110203c:	e0bff417 	ldw	r2,-48(fp)
81102040:	10800044 	addi	r2,r2,1
81102044:	e0bff415 	stw	r2,-48(fp)
81102048:	e0bff517 	ldw	r2,-44(fp)
8110204c:	1085883a 	add	r2,r2,r2
81102050:	1085883a 	add	r2,r2,r2
81102054:	e0fff304 	addi	r3,fp,-52
81102058:	1885883a 	add	r2,r3,r2
8110205c:	10800904 	addi	r2,r2,36
81102060:	10800017 	ldw	r2,0(r2)
81102064:	e0fff417 	ldw	r3,-48(fp)
81102068:	1880020e 	bge	r3,r2,81102074 <POWER_Read+0x204>
8110206c:	e0bff317 	ldw	r2,-52(fp)
81102070:	103fa21e 	bne	r2,zero,81101efc <__reset+0xfb0e1efc>
    alt_u32 Value32;
    alt_u8 NextChannel,Channel, HEAD, SIGN, SGL, PARITY;
    const bool bEN=TRUE; // alwasy update next conversion channel
    const bool bSIGN=TRUE; // VolDrop = CH1-CH0
    const bool bSGL=FALSE; // GSGL=FALSE: Diff
    for(c=0;c<POWER_DEVICE_NUM && bSuccess;c++){
81102074:	e0bff517 	ldw	r2,-44(fp)
81102078:	10800044 	addi	r2,r2,1
8110207c:	e0bff515 	stw	r2,-44(fp)
81102080:	e0bff517 	ldw	r2,-44(fp)
81102084:	10800088 	cmpgei	r2,r2,2
81102088:	1000021e 	bne	r2,zero,81102094 <POWER_Read+0x224>
8110208c:	e0bff317 	ldw	r2,-52(fp)
81102090:	103f8a1e 	bne	r2,zero,81101ebc <__reset+0xfb0e1ebc>
            }else{
                printf("SPI Read Error\r\n");
            }
        } // for i
    } // for c
    return bSuccess;
81102094:	e0bff317 	ldw	r2,-52(fp)
 }
81102098:	e037883a 	mov	sp,fp
8110209c:	dfc00117 	ldw	ra,4(sp)
811020a0:	df000017 	ldw	fp,0(sp)
811020a4:	dec00204 	addi	sp,sp,8
811020a8:	f800283a 	ret

811020ac <TEMP_Read>:

 bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp){
811020ac:	defff904 	addi	sp,sp,-28
811020b0:	dfc00615 	stw	ra,24(sp)
811020b4:	df000515 	stw	fp,20(sp)
811020b8:	df000504 	addi	fp,sp,20
811020bc:	e13ffe15 	stw	r4,-8(fp)
811020c0:	e17fff15 	stw	r5,-4(fp)
        bool bSuccess;
        const alt_u8 DeviceAddr = 0x30;
811020c4:	00800c04 	movi	r2,48
811020c8:	e0bffd85 	stb	r2,-10(fp)
        alt_8 FpgaTemp, BoardTemp;
        char Data;

        // read local temp
        bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00, &Data);
811020cc:	e0bffd83 	ldbu	r2,-10(fp)
811020d0:	10c03fcc 	andi	r3,r2,255
811020d4:	18c0201c 	xori	r3,r3,128
811020d8:	18ffe004 	addi	r3,r3,-128
811020dc:	e0bffdc4 	addi	r2,fp,-9
811020e0:	d8800015 	stw	r2,0(sp)
811020e4:	000f883a 	mov	r7,zero
811020e8:	180d883a 	mov	r6,r3
811020ec:	01600034 	movhi	r5,32768
811020f0:	29415804 	addi	r5,r5,1376
811020f4:	01200034 	movhi	r4,32768
811020f8:	21015c04 	addi	r4,r4,1392
811020fc:	11051280 	call	81105128 <I2C_Read>
81102100:	e0bffc15 	stw	r2,-16(fp)
        if (bSuccess)
81102104:	e0bffc17 	ldw	r2,-16(fp)
81102108:	10000226 	beq	r2,zero,81102114 <TEMP_Read+0x68>
            BoardTemp = Data;
8110210c:	e0bffdc3 	ldbu	r2,-9(fp)
81102110:	e0bffd45 	stb	r2,-11(fp)

        // read remote temp
        if (bSuccess){
81102114:	e0bffc17 	ldw	r2,-16(fp)
81102118:	10001226 	beq	r2,zero,81102164 <TEMP_Read+0xb8>
            bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01, &Data);
8110211c:	e0bffd83 	ldbu	r2,-10(fp)
81102120:	10c03fcc 	andi	r3,r2,255
81102124:	18c0201c 	xori	r3,r3,128
81102128:	18ffe004 	addi	r3,r3,-128
8110212c:	e0bffdc4 	addi	r2,fp,-9
81102130:	d8800015 	stw	r2,0(sp)
81102134:	01c00044 	movi	r7,1
81102138:	180d883a 	mov	r6,r3
8110213c:	01600034 	movhi	r5,32768
81102140:	29415804 	addi	r5,r5,1376
81102144:	01200034 	movhi	r4,32768
81102148:	21015c04 	addi	r4,r4,1392
8110214c:	11051280 	call	81105128 <I2C_Read>
81102150:	e0bffc15 	stw	r2,-16(fp)
            if (bSuccess)
81102154:	e0bffc17 	ldw	r2,-16(fp)
81102158:	10000226 	beq	r2,zero,81102164 <TEMP_Read+0xb8>
                FpgaTemp = Data;
8110215c:	e0bffdc3 	ldbu	r2,-9(fp)
81102160:	e0bffd05 	stb	r2,-12(fp)
        }
        //
        if (bSuccess){
81102164:	e0bffc17 	ldw	r2,-16(fp)
81102168:	10000626 	beq	r2,zero,81102184 <TEMP_Read+0xd8>
           *pFpgaTemp = FpgaTemp;
8110216c:	e0bffe17 	ldw	r2,-8(fp)
81102170:	e0fffd03 	ldbu	r3,-12(fp)
81102174:	10c00005 	stb	r3,0(r2)
           *pBoardTemp = BoardTemp;
81102178:	e0bfff17 	ldw	r2,-4(fp)
8110217c:	e0fffd43 	ldbu	r3,-11(fp)
81102180:	10c00005 	stb	r3,0(r2)
        }

        return bSuccess;
81102184:	e0bffc17 	ldw	r2,-16(fp)
 }
81102188:	e037883a 	mov	sp,fp
8110218c:	dfc00117 	ldw	ra,4(sp)
81102190:	df000017 	ldw	fp,0(sp)
81102194:	dec00204 	addi	sp,sp,8
81102198:	f800283a 	ret

8110219c <sense_log_temp>:


 bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp){
8110219c:	defffb04 	addi	sp,sp,-20
811021a0:	dfc00415 	stw	ra,16(sp)
811021a4:	df000315 	stw	fp,12(sp)
811021a8:	df000304 	addi	fp,sp,12
811021ac:	e13ffe15 	stw	r4,-8(fp)
811021b0:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	 // show temp
	 bSuccess = TEMP_Read(FpgaTemp, BoardTemp);
811021b4:	e17fff17 	ldw	r5,-4(fp)
811021b8:	e13ffe17 	ldw	r4,-8(fp)
811021bc:	11020ac0 	call	811020ac <TEMP_Read>
811021c0:	e0bffd15 	stw	r2,-12(fp)

	 return(bSuccess);
811021c4:	e0bffd17 	ldw	r2,-12(fp)
 }
811021c8:	e037883a 	mov	sp,fp
811021cc:	dfc00117 	ldw	ra,4(sp)
811021d0:	df000017 	ldw	fp,0(sp)
811021d4:	dec00204 	addi	sp,sp,8
811021d8:	f800283a 	ret

811021dc <sense_log>:


 void sense_log(void){
811021dc:	deff0504 	addi	sp,sp,-1004
811021e0:	dfc0fa15 	stw	ra,1000(sp)
811021e4:	df00f915 	stw	fp,996(sp)
811021e8:	dd40f815 	stw	r21,992(sp)
811021ec:	dd00f715 	stw	r20,988(sp)
811021f0:	dcc0f615 	stw	r19,984(sp)
811021f4:	dc80f515 	stw	r18,980(sp)
811021f8:	dc40f415 	stw	r17,976(sp)
811021fc:	dc00f315 	stw	r16,972(sp)
81102200:	df00f904 	addi	fp,sp,996
 	  bool bSuccess;
 	    int i;
 	    const float fRef = 5.0; // 5.0V
81102204:	00902834 	movhi	r2,16544
81102208:	e0bf0e15 	stw	r2,-968(fp)
 	    float fVolDrop, fCurrent, fPower, fVol;
 	    alt_u32 szVol[POWER_PORT_NUM];
 	    alt_u32 SIG, MSB, RESULT;
 	    float szRes[] = {0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003};
8110220c:	008ed174 	movhi	r2,15173
81102210:	10a6e984 	addi	r2,r2,-25690
81102214:	e0bf2215 	stw	r2,-888(fp)
81102218:	008ea0f4 	movhi	r2,14979
8110221c:	10849bc4 	addi	r2,r2,4719
81102220:	e0bf2315 	stw	r2,-884(fp)
81102224:	008ed174 	movhi	r2,15173
81102228:	10a6e984 	addi	r2,r2,-25690
8110222c:	e0bf2415 	stw	r2,-880(fp)
81102230:	008ed174 	movhi	r2,15173
81102234:	10a6e984 	addi	r2,r2,-25690
81102238:	e0bf2515 	stw	r2,-876(fp)
8110223c:	008ed174 	movhi	r2,15173
81102240:	10a6e984 	addi	r2,r2,-25690
81102244:	e0bf2615 	stw	r2,-872(fp)
81102248:	008ed174 	movhi	r2,15173
8110224c:	10a6e984 	addi	r2,r2,-25690
81102250:	e0bf2715 	stw	r2,-868(fp)
81102254:	008ed174 	movhi	r2,15173
81102258:	10a6e984 	addi	r2,r2,-25690
8110225c:	e0bf2815 	stw	r2,-864(fp)
81102260:	008ed174 	movhi	r2,15173
81102264:	10a6e984 	addi	r2,r2,-25690
81102268:	e0bf2915 	stw	r2,-860(fp)
8110226c:	008ed174 	movhi	r2,15173
81102270:	10a6e984 	addi	r2,r2,-25690
81102274:	e0bf2a15 	stw	r2,-856(fp)
81102278:	008ed174 	movhi	r2,15173
8110227c:	10a6e984 	addi	r2,r2,-25690
81102280:	e0bf2b15 	stw	r2,-852(fp)
81102284:	008ed174 	movhi	r2,15173
81102288:	10a6e984 	addi	r2,r2,-25690
8110228c:	e0bf2c15 	stw	r2,-848(fp)
81102290:	008ed174 	movhi	r2,15173
81102294:	10a6e984 	addi	r2,r2,-25690
81102298:	e0bf2d15 	stw	r2,-844(fp)
 	    float szRefVol[] = {0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3, 2.5};
8110229c:	008fd9b4 	movhi	r2,16230
811022a0:	10999984 	addi	r2,r2,26214
811022a4:	e0bf2e15 	stw	r2,-840(fp)
811022a8:	008fd9b4 	movhi	r2,16230
811022ac:	10999984 	addi	r2,r2,26214
811022b0:	e0bf2f15 	stw	r2,-836(fp)
811022b4:	00901034 	movhi	r2,16448
811022b8:	e0bf3015 	stw	r2,-832(fp)
811022bc:	008fd9b4 	movhi	r2,16230
811022c0:	10999984 	addi	r2,r2,26214
811022c4:	e0bf3115 	stw	r2,-828(fp)
811022c8:	008ff9b4 	movhi	r2,16358
811022cc:	10999984 	addi	r2,r2,26214
811022d0:	e0bf3215 	stw	r2,-824(fp)
811022d4:	00900834 	movhi	r2,16416
811022d8:	e0bf3315 	stw	r2,-820(fp)
811022dc:	008ff9b4 	movhi	r2,16358
811022e0:	10999984 	addi	r2,r2,26214
811022e4:	e0bf3415 	stw	r2,-816(fp)
811022e8:	00900834 	movhi	r2,16416
811022ec:	e0bf3515 	stw	r2,-812(fp)
811022f0:	008fe374 	movhi	r2,16269
811022f4:	10b33344 	addi	r2,r2,-13107
811022f8:	e0bf3615 	stw	r2,-808(fp)
811022fc:	008fecf4 	movhi	r2,16307
81102300:	108cccc4 	addi	r2,r2,13107
81102304:	e0bf3715 	stw	r2,-804(fp)
81102308:	009014f4 	movhi	r2,16467
8110230c:	108cccc4 	addi	r2,r2,13107
81102310:	e0bf3815 	stw	r2,-800(fp)
81102314:	00900834 	movhi	r2,16416
81102318:	e0bf3915 	stw	r2,-796(fp)
 	    char szName[][64] = {
8110231c:	00a044f4 	movhi	r2,33043
81102320:	10977dc4 	addi	r2,r2,24055
81102324:	e0ff3a04 	addi	r3,fp,-792
81102328:	1009883a 	mov	r4,r2
8110232c:	0080c004 	movi	r2,768
81102330:	100d883a 	mov	r6,r2
81102334:	200b883a 	mov	r5,r4
81102338:	1809883a 	mov	r4,r3
8110233c:	110d4800 	call	8110d480 <memcpy>
 	        "VCC3P3_HSMC",
 	        "HSMB_VCCIO",
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
81102340:	e0bf1604 	addi	r2,fp,-936
81102344:	1009883a 	mov	r4,r2
81102348:	1101e700 	call	81101e70 <POWER_Read>
8110234c:	e0bf0f15 	stw	r2,-964(fp)
 	        if (bSuccess){
81102350:	e0bf0f17 	ldw	r2,-964(fp)
81102354:	10013b26 	beq	r2,zero,81102844 <sense_log+0x668>
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
81102358:	e03f0c15 	stw	zero,-976(fp)
8110235c:	00013006 	br	81102820 <sense_log+0x644>
 	                SIG = (szVol[i] >> 29) & 0x01;
81102360:	e0bf0c17 	ldw	r2,-976(fp)
81102364:	1085883a 	add	r2,r2,r2
81102368:	1085883a 	add	r2,r2,r2
8110236c:	e0ff0c04 	addi	r3,fp,-976
81102370:	1885883a 	add	r2,r3,r2
81102374:	10800a04 	addi	r2,r2,40
81102378:	10800017 	ldw	r2,0(r2)
8110237c:	1004d77a 	srli	r2,r2,29
81102380:	1080004c 	andi	r2,r2,1
81102384:	e0bf1015 	stw	r2,-960(fp)
 	                MSB = (szVol[i] >> 28) & 0x01;
81102388:	e0bf0c17 	ldw	r2,-976(fp)
8110238c:	1085883a 	add	r2,r2,r2
81102390:	1085883a 	add	r2,r2,r2
81102394:	e0ff0c04 	addi	r3,fp,-976
81102398:	1885883a 	add	r2,r3,r2
8110239c:	10800a04 	addi	r2,r2,40
811023a0:	10800017 	ldw	r2,0(r2)
811023a4:	1004d73a 	srli	r2,r2,28
811023a8:	1080004c 	andi	r2,r2,1
811023ac:	e0bf1115 	stw	r2,-956(fp)
 	                RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
811023b0:	e0bf0c17 	ldw	r2,-976(fp)
811023b4:	1085883a 	add	r2,r2,r2
811023b8:	1085883a 	add	r2,r2,r2
811023bc:	e0ff0c04 	addi	r3,fp,-976
811023c0:	1885883a 	add	r2,r3,r2
811023c4:	10800a04 	addi	r2,r2,40
811023c8:	10800017 	ldw	r2,0(r2)
811023cc:	1006d1ba 	srli	r3,r2,6
811023d0:	00801034 	movhi	r2,64
811023d4:	10bfffc4 	addi	r2,r2,-1
811023d8:	1884703a 	and	r2,r3,r2
811023dc:	e0bf1215 	stw	r2,-952(fp)
 	                if (MSB == 0)
811023e0:	e0bf1117 	ldw	r2,-956(fp)
811023e4:	1000091e 	bne	r2,zero,8110240c <sense_log+0x230>
 	                    fVolDrop = (float)(RESULT)/(float)0x400000;
811023e8:	e13f1217 	ldw	r4,-952(fp)
811023ec:	110b8480 	call	8110b848 <__floatunsisf>
811023f0:	1007883a 	mov	r3,r2
811023f4:	0152a034 	movhi	r5,19072
811023f8:	1809883a 	mov	r4,r3
811023fc:	110aee80 	call	8110aee8 <__divsf3>
81102400:	1007883a 	mov	r3,r2
81102404:	e0ff0d15 	stw	r3,-972(fp)
81102408:	00000106 	br	81102410 <sense_log+0x234>
 	                else
 	                    fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
8110240c:	e03f0d15 	stw	zero,-972(fp)
 	                if (SIG && MSB){
81102410:	e0bf1017 	ldw	r2,-960(fp)
81102414:	10001f26 	beq	r2,zero,81102494 <sense_log+0x2b8>
81102418:	e0bf1117 	ldw	r2,-956(fp)
8110241c:	10001d26 	beq	r2,zero,81102494 <sense_log+0x2b8>
 	                    fVol = fRef*0.5;
81102420:	014fc034 	movhi	r5,16128
81102424:	e13f0e17 	ldw	r4,-968(fp)
81102428:	110b3280 	call	8110b328 <__mulsf3>
8110242c:	1007883a 	mov	r3,r2
81102430:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
81102434:	e0ff3a04 	addi	r3,fp,-792
81102438:	e0bf0c17 	ldw	r2,-976(fp)
8110243c:	100491ba 	slli	r2,r2,6
81102440:	18a1883a 	add	r16,r3,r2
81102444:	e0bf0c17 	ldw	r2,-976(fp)
81102448:	1085883a 	add	r2,r2,r2
8110244c:	1085883a 	add	r2,r2,r2
81102450:	e0ff0c04 	addi	r3,fp,-976
81102454:	1885883a 	add	r2,r3,r2
81102458:	10800a04 	addi	r2,r2,40
8110245c:	10800017 	ldw	r2,0(r2)
81102460:	1023883a 	mov	r17,r2
81102464:	e13f1317 	ldw	r4,-948(fp)
81102468:	110c0500 	call	8110c050 <__extendsfdf2>
8110246c:	1009883a 	mov	r4,r2
81102470:	180b883a 	mov	r5,r3
81102474:	d9400015 	stw	r5,0(sp)
81102478:	200f883a 	mov	r7,r4
8110247c:	880d883a 	mov	r6,r17
81102480:	800b883a 	mov	r5,r16
81102484:	012044f4 	movhi	r4,33043
81102488:	21174904 	addi	r4,r4,23844
8110248c:	110d7800 	call	8110d780 <printf>
81102490:	0000e006 	br	81102814 <sense_log+0x638>
 	                }else if (SIG && !MSB){
81102494:	e0bf1017 	ldw	r2,-960(fp)
81102498:	10005d26 	beq	r2,zero,81102610 <sense_log+0x434>
8110249c:	e0bf1117 	ldw	r2,-956(fp)
811024a0:	10005b1e 	bne	r2,zero,81102610 <sense_log+0x434>
 	                    fVol = fRef*0.5*fVolDrop;
811024a4:	e13f0e17 	ldw	r4,-968(fp)
811024a8:	110c0500 	call	8110c050 <__extendsfdf2>
811024ac:	1011883a 	mov	r8,r2
811024b0:	1813883a 	mov	r9,r3
811024b4:	000d883a 	mov	r6,zero
811024b8:	01cff834 	movhi	r7,16352
811024bc:	4009883a 	mov	r4,r8
811024c0:	480b883a 	mov	r5,r9
811024c4:	110b9380 	call	8110b938 <__muldf3>
811024c8:	1009883a 	mov	r4,r2
811024cc:	180b883a 	mov	r5,r3
811024d0:	2021883a 	mov	r16,r4
811024d4:	2823883a 	mov	r17,r5
811024d8:	e13f0d17 	ldw	r4,-972(fp)
811024dc:	110c0500 	call	8110c050 <__extendsfdf2>
811024e0:	1009883a 	mov	r4,r2
811024e4:	180b883a 	mov	r5,r3
811024e8:	200d883a 	mov	r6,r4
811024ec:	280f883a 	mov	r7,r5
811024f0:	8009883a 	mov	r4,r16
811024f4:	880b883a 	mov	r5,r17
811024f8:	110b9380 	call	8110b938 <__muldf3>
811024fc:	1009883a 	mov	r4,r2
81102500:	180b883a 	mov	r5,r3
81102504:	2005883a 	mov	r2,r4
81102508:	2807883a 	mov	r3,r5
8110250c:	1009883a 	mov	r4,r2
81102510:	180b883a 	mov	r5,r3
81102514:	110c1600 	call	8110c160 <__truncdfsf2>
81102518:	1007883a 	mov	r3,r2
8110251c:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
81102520:	e0bf0c17 	ldw	r2,-976(fp)
81102524:	1085883a 	add	r2,r2,r2
81102528:	1085883a 	add	r2,r2,r2
8110252c:	e0ff0c04 	addi	r3,fp,-976
81102530:	1885883a 	add	r2,r3,r2
81102534:	10801604 	addi	r2,r2,88
81102538:	10c00017 	ldw	r3,0(r2)
8110253c:	180b883a 	mov	r5,r3
81102540:	e13f0d17 	ldw	r4,-972(fp)
81102544:	110aee80 	call	8110aee8 <__divsf3>
81102548:	1007883a 	mov	r3,r2
8110254c:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
81102550:	e0bf0c17 	ldw	r2,-976(fp)
81102554:	1085883a 	add	r2,r2,r2
81102558:	1085883a 	add	r2,r2,r2
8110255c:	e0ff0c04 	addi	r3,fp,-976
81102560:	1885883a 	add	r2,r3,r2
81102564:	10802204 	addi	r2,r2,136
81102568:	10c00017 	ldw	r3,0(r2)
8110256c:	e17f1417 	ldw	r5,-944(fp)
81102570:	1809883a 	mov	r4,r3
81102574:	110b3280 	call	8110b328 <__mulsf3>
81102578:	1007883a 	mov	r3,r2
8110257c:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
81102580:	e0ff3a04 	addi	r3,fp,-792
81102584:	e0bf0c17 	ldw	r2,-976(fp)
81102588:	100491ba 	slli	r2,r2,6
8110258c:	18a9883a 	add	r20,r3,r2
81102590:	e0bf0c17 	ldw	r2,-976(fp)
81102594:	1085883a 	add	r2,r2,r2
81102598:	1085883a 	add	r2,r2,r2
8110259c:	e0ff0c04 	addi	r3,fp,-976
811025a0:	1885883a 	add	r2,r3,r2
811025a4:	10800a04 	addi	r2,r2,40
811025a8:	10800017 	ldw	r2,0(r2)
811025ac:	102b883a 	mov	r21,r2
811025b0:	e13f0d17 	ldw	r4,-972(fp)
811025b4:	110c0500 	call	8110c050 <__extendsfdf2>
811025b8:	1025883a 	mov	r18,r2
811025bc:	1827883a 	mov	r19,r3
811025c0:	e13f1417 	ldw	r4,-944(fp)
811025c4:	110c0500 	call	8110c050 <__extendsfdf2>
811025c8:	1021883a 	mov	r16,r2
811025cc:	1823883a 	mov	r17,r3
811025d0:	e13f1517 	ldw	r4,-940(fp)
811025d4:	110c0500 	call	8110c050 <__extendsfdf2>
811025d8:	1009883a 	mov	r4,r2
811025dc:	180b883a 	mov	r5,r3
811025e0:	d9000315 	stw	r4,12(sp)
811025e4:	d9400415 	stw	r5,16(sp)
811025e8:	dc000115 	stw	r16,4(sp)
811025ec:	dc400215 	stw	r17,8(sp)
811025f0:	dcc00015 	stw	r19,0(sp)
811025f4:	900f883a 	mov	r7,r18
811025f8:	a80d883a 	mov	r6,r21
811025fc:	a00b883a 	mov	r5,r20
81102600:	012044f4 	movhi	r4,33043
81102604:	21175204 	addi	r4,r4,23880
81102608:	110d7800 	call	8110d780 <printf>
8110260c:	00008106 	br	81102814 <sense_log+0x638>
 	                }else if (!SIG && MSB){
81102610:	e0bf1017 	ldw	r2,-960(fp)
81102614:	10005d1e 	bne	r2,zero,8110278c <sense_log+0x5b0>
81102618:	e0bf1117 	ldw	r2,-956(fp)
8110261c:	10005b26 	beq	r2,zero,8110278c <sense_log+0x5b0>
 	                    fVol = fRef*0.5*fVolDrop;
81102620:	e13f0e17 	ldw	r4,-968(fp)
81102624:	110c0500 	call	8110c050 <__extendsfdf2>
81102628:	1011883a 	mov	r8,r2
8110262c:	1813883a 	mov	r9,r3
81102630:	000d883a 	mov	r6,zero
81102634:	01cff834 	movhi	r7,16352
81102638:	4009883a 	mov	r4,r8
8110263c:	480b883a 	mov	r5,r9
81102640:	110b9380 	call	8110b938 <__muldf3>
81102644:	1009883a 	mov	r4,r2
81102648:	180b883a 	mov	r5,r3
8110264c:	2021883a 	mov	r16,r4
81102650:	2823883a 	mov	r17,r5
81102654:	e13f0d17 	ldw	r4,-972(fp)
81102658:	110c0500 	call	8110c050 <__extendsfdf2>
8110265c:	1009883a 	mov	r4,r2
81102660:	180b883a 	mov	r5,r3
81102664:	200d883a 	mov	r6,r4
81102668:	280f883a 	mov	r7,r5
8110266c:	8009883a 	mov	r4,r16
81102670:	880b883a 	mov	r5,r17
81102674:	110b9380 	call	8110b938 <__muldf3>
81102678:	1009883a 	mov	r4,r2
8110267c:	180b883a 	mov	r5,r3
81102680:	2005883a 	mov	r2,r4
81102684:	2807883a 	mov	r3,r5
81102688:	1009883a 	mov	r4,r2
8110268c:	180b883a 	mov	r5,r3
81102690:	110c1600 	call	8110c160 <__truncdfsf2>
81102694:	1007883a 	mov	r3,r2
81102698:	e0ff1315 	stw	r3,-948(fp)
 	                    fCurrent = fVolDrop / szRes[i];
8110269c:	e0bf0c17 	ldw	r2,-976(fp)
811026a0:	1085883a 	add	r2,r2,r2
811026a4:	1085883a 	add	r2,r2,r2
811026a8:	e0ff0c04 	addi	r3,fp,-976
811026ac:	1885883a 	add	r2,r3,r2
811026b0:	10801604 	addi	r2,r2,88
811026b4:	10c00017 	ldw	r3,0(r2)
811026b8:	180b883a 	mov	r5,r3
811026bc:	e13f0d17 	ldw	r4,-972(fp)
811026c0:	110aee80 	call	8110aee8 <__divsf3>
811026c4:	1007883a 	mov	r3,r2
811026c8:	e0ff1415 	stw	r3,-944(fp)
 	                    fPower = szRefVol[i] * fCurrent;
811026cc:	e0bf0c17 	ldw	r2,-976(fp)
811026d0:	1085883a 	add	r2,r2,r2
811026d4:	1085883a 	add	r2,r2,r2
811026d8:	e0ff0c04 	addi	r3,fp,-976
811026dc:	1885883a 	add	r2,r3,r2
811026e0:	10802204 	addi	r2,r2,136
811026e4:	10c00017 	ldw	r3,0(r2)
811026e8:	e17f1417 	ldw	r5,-944(fp)
811026ec:	1809883a 	mov	r4,r3
811026f0:	110b3280 	call	8110b328 <__mulsf3>
811026f4:	1007883a 	mov	r3,r2
811026f8:	e0ff1515 	stw	r3,-940(fp)
 	                    printf("[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n", szName[i], (int)szVol[i], fVolDrop, fCurrent, fPower);
811026fc:	e0ff3a04 	addi	r3,fp,-792
81102700:	e0bf0c17 	ldw	r2,-976(fp)
81102704:	100491ba 	slli	r2,r2,6
81102708:	18a9883a 	add	r20,r3,r2
8110270c:	e0bf0c17 	ldw	r2,-976(fp)
81102710:	1085883a 	add	r2,r2,r2
81102714:	1085883a 	add	r2,r2,r2
81102718:	e0ff0c04 	addi	r3,fp,-976
8110271c:	1885883a 	add	r2,r3,r2
81102720:	10800a04 	addi	r2,r2,40
81102724:	10800017 	ldw	r2,0(r2)
81102728:	102b883a 	mov	r21,r2
8110272c:	e13f0d17 	ldw	r4,-972(fp)
81102730:	110c0500 	call	8110c050 <__extendsfdf2>
81102734:	1025883a 	mov	r18,r2
81102738:	1827883a 	mov	r19,r3
8110273c:	e13f1417 	ldw	r4,-944(fp)
81102740:	110c0500 	call	8110c050 <__extendsfdf2>
81102744:	1021883a 	mov	r16,r2
81102748:	1823883a 	mov	r17,r3
8110274c:	e13f1517 	ldw	r4,-940(fp)
81102750:	110c0500 	call	8110c050 <__extendsfdf2>
81102754:	1009883a 	mov	r4,r2
81102758:	180b883a 	mov	r5,r3
8110275c:	d9000315 	stw	r4,12(sp)
81102760:	d9400415 	stw	r5,16(sp)
81102764:	dc000115 	stw	r16,4(sp)
81102768:	dc400215 	stw	r17,8(sp)
8110276c:	dcc00015 	stw	r19,0(sp)
81102770:	900f883a 	mov	r7,r18
81102774:	a80d883a 	mov	r6,r21
81102778:	a00b883a 	mov	r5,r20
8110277c:	012044f4 	movhi	r4,33043
81102780:	21176204 	addi	r4,r4,23944
81102784:	110d7800 	call	8110d780 <printf>
81102788:	00002206 	br	81102814 <sense_log+0x638>
 	                }else if (!SIG && !MSB){
8110278c:	e0bf1017 	ldw	r2,-960(fp)
81102790:	1000201e 	bne	r2,zero,81102814 <sense_log+0x638>
81102794:	e0bf1117 	ldw	r2,-956(fp)
81102798:	10001e1e 	bne	r2,zero,81102814 <sense_log+0x638>
 	                    fVol = -fRef*0.5;
8110279c:	e0bf0e17 	ldw	r2,-968(fp)
811027a0:	10a0003c 	xorhi	r2,r2,32768
811027a4:	014fc034 	movhi	r5,16128
811027a8:	1009883a 	mov	r4,r2
811027ac:	110b3280 	call	8110b328 <__mulsf3>
811027b0:	1007883a 	mov	r3,r2
811027b4:	e0ff1315 	stw	r3,-948(fp)
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
811027b8:	e0ff3a04 	addi	r3,fp,-792
811027bc:	e0bf0c17 	ldw	r2,-976(fp)
811027c0:	100491ba 	slli	r2,r2,6
811027c4:	18a1883a 	add	r16,r3,r2
811027c8:	e0bf0c17 	ldw	r2,-976(fp)
811027cc:	1085883a 	add	r2,r2,r2
811027d0:	1085883a 	add	r2,r2,r2
811027d4:	e0ff0c04 	addi	r3,fp,-976
811027d8:	1885883a 	add	r2,r3,r2
811027dc:	10800a04 	addi	r2,r2,40
811027e0:	10800017 	ldw	r2,0(r2)
811027e4:	1023883a 	mov	r17,r2
811027e8:	e13f1317 	ldw	r4,-948(fp)
811027ec:	110c0500 	call	8110c050 <__extendsfdf2>
811027f0:	1009883a 	mov	r4,r2
811027f4:	180b883a 	mov	r5,r3
811027f8:	d9400015 	stw	r5,0(sp)
811027fc:	200f883a 	mov	r7,r4
81102800:	880d883a 	mov	r6,r17
81102804:	800b883a 	mov	r5,r16
81102808:	012044f4 	movhi	r4,33043
8110280c:	21177204 	addi	r4,r4,24008
81102810:	110d7800 	call	8110d780 <printf>
 	    };

 	        // show power
 	        bSuccess = POWER_Read(szVol);
 	        if (bSuccess){
 	            for(i=0;i<POWER_PORT_NUM && bSuccess;i++){
81102814:	e0bf0c17 	ldw	r2,-976(fp)
81102818:	10800044 	addi	r2,r2,1
8110281c:	e0bf0c15 	stw	r2,-976(fp)
81102820:	e0bf0c17 	ldw	r2,-976(fp)
81102824:	10800308 	cmpgei	r2,r2,12
81102828:	1000021e 	bne	r2,zero,81102834 <sense_log+0x658>
8110282c:	e0bf0f17 	ldw	r2,-964(fp)
81102830:	103ecb1e 	bne	r2,zero,81102360 <__reset+0xfb0e2360>
 	                }else if (!SIG && !MSB){
 	                    fVol = -fRef*0.5;
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
81102834:	012044f4 	movhi	r4,33043
81102838:	21177b04 	addi	r4,r4,24044
8110283c:	110d89c0 	call	8110d89c <puts>
 	        }else{
 	            printf("Error\r\n");
 	        }
 }
81102840:	00000306 	br	81102850 <sense_log+0x674>
 	                    printf("[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n", szName[i], (int)szVol[i], fVol);
 	                }
 	            }
 	            printf("\r\n");
 	        }else{
 	            printf("Error\r\n");
81102844:	012044f4 	movhi	r4,33043
81102848:	21177c04 	addi	r4,r4,24048
8110284c:	110d89c0 	call	8110d89c <puts>
 	        }
 }
81102850:	0001883a 	nop
81102854:	e6fffa04 	addi	sp,fp,-24
81102858:	dfc00717 	ldw	ra,28(sp)
8110285c:	df000617 	ldw	fp,24(sp)
81102860:	dd400517 	ldw	r21,20(sp)
81102864:	dd000417 	ldw	r20,16(sp)
81102868:	dcc00317 	ldw	r19,12(sp)
8110286c:	dc800217 	ldw	r18,8(sp)
81102870:	dc400117 	ldw	r17,4(sp)
81102874:	dc000017 	ldw	r16,0(sp)
81102878:	dec00804 	addi	sp,sp,32
8110287c:	f800283a 	ret

81102880 <SPWC_WRITE_REG32>:
	alt_u32 ul_spwc_g_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_g_spacewire_link_control_status_register_value = 0x00000400;
	alt_u32 ul_spwc_h_interface_control_status_register_value      = 0x00000000;
	alt_u32 ul_spwc_h_spacewire_link_control_status_register_value = 0x00000400;

	void SPWC_WRITE_REG32(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102880:	defffb04 	addi	sp,sp,-20
81102884:	df000415 	stw	fp,16(sp)
81102888:	df000404 	addi	fp,sp,16
8110288c:	2007883a 	mov	r3,r4
81102890:	2805883a 	mov	r2,r5
81102894:	e1bfff15 	stw	r6,-4(fp)
81102898:	e0fffd05 	stb	r3,-12(fp)
8110289c:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811028a0:	00a04834 	movhi	r2,33056
811028a4:	108e0004 	addi	r2,r2,14336
811028a8:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
811028ac:	e0bffd07 	ldb	r2,-12(fp)
811028b0:	10bfefc4 	addi	r2,r2,-65
811028b4:	10c00228 	cmpgeui	r3,r2,8
811028b8:	18002e1e 	bne	r3,zero,81102974 <SPWC_WRITE_REG32+0xf4>
811028bc:	100690ba 	slli	r3,r2,2
811028c0:	00a04434 	movhi	r2,33040
811028c4:	108a3504 	addi	r2,r2,10452
811028c8:	1885883a 	add	r2,r3,r2
811028cc:	10800017 	ldw	r2,0(r2)
811028d0:	1000683a 	jmp	r2
811028d4:	811028f4 	orhi	r4,r16,16547
811028d8:	81102904 	addi	r4,r16,16548
811028dc:	81102914 	ori	r4,r16,16548
811028e0:	81102924 	muli	r4,r16,16548
811028e4:	81102934 	orhi	r4,r16,16548
811028e8:	81102944 	addi	r4,r16,16549
811028ec:	81102954 	ori	r4,r16,16549
811028f0:	81102964 	muli	r4,r16,16549
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811028f4:	00a04834 	movhi	r2,33056
811028f8:	108e0004 	addi	r2,r2,14336
811028fc:	e0bffc15 	stw	r2,-16(fp)
			break;
81102900:	00001c06 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81102904:	00a04834 	movhi	r2,33056
81102908:	108d0004 	addi	r2,r2,13312
8110290c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102910:	00001806 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81102914:	00a04834 	movhi	r2,33056
81102918:	108c0004 	addi	r2,r2,12288
8110291c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102920:	00001406 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81102924:	00a04834 	movhi	r2,33056
81102928:	108b0004 	addi	r2,r2,11264
8110292c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102930:	00001006 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102934:	00a04834 	movhi	r2,33056
81102938:	108a0004 	addi	r2,r2,10240
8110293c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102940:	00000c06 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102944:	00a04834 	movhi	r2,33056
81102948:	10890004 	addi	r2,r2,9216
8110294c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102950:	00000806 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102954:	00a04834 	movhi	r2,33056
81102958:	10880004 	addi	r2,r2,8192
8110295c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102960:	00000406 	br	81102974 <SPWC_WRITE_REG32+0xf4>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102964:	00a04834 	movhi	r2,33056
81102968:	10870004 	addi	r2,r2,7168
8110296c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102970:	0001883a 	nop
		}
		*(pSpwcAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81102974:	e0bffe03 	ldbu	r2,-8(fp)
81102978:	1085883a 	add	r2,r2,r2
8110297c:	1085883a 	add	r2,r2,r2
81102980:	1007883a 	mov	r3,r2
81102984:	e0bffc17 	ldw	r2,-16(fp)
81102988:	10c5883a 	add	r2,r2,r3
8110298c:	e0ffff17 	ldw	r3,-4(fp)
81102990:	10c00015 	stw	r3,0(r2)
	}
81102994:	0001883a 	nop
81102998:	e037883a 	mov	sp,fp
8110299c:	df000017 	ldw	fp,0(sp)
811029a0:	dec00104 	addi	sp,sp,4
811029a4:	f800283a 	ret

811029a8 <SPWC_READ_REG32>:

	alt_u32 SPWC_READ_REG32(char c_SpwID, alt_u8 uc_RegisterAddress){
811029a8:	defffb04 	addi	sp,sp,-20
811029ac:	df000415 	stw	fp,16(sp)
811029b0:	df000404 	addi	fp,sp,16
811029b4:	2007883a 	mov	r3,r4
811029b8:	2805883a 	mov	r2,r5
811029bc:	e0fffe05 	stb	r3,-8(fp)
811029c0:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
811029c4:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
811029c8:	00a04834 	movhi	r2,33056
811029cc:	108e0004 	addi	r2,r2,14336
811029d0:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
811029d4:	e0bffe07 	ldb	r2,-8(fp)
811029d8:	10bfefc4 	addi	r2,r2,-65
811029dc:	10c00228 	cmpgeui	r3,r2,8
811029e0:	18002e1e 	bne	r3,zero,81102a9c <SPWC_READ_REG32+0xf4>
811029e4:	100690ba 	slli	r3,r2,2
811029e8:	00a04434 	movhi	r2,33040
811029ec:	108a7f04 	addi	r2,r2,10748
811029f0:	1885883a 	add	r2,r3,r2
811029f4:	10800017 	ldw	r2,0(r2)
811029f8:	1000683a 	jmp	r2
811029fc:	81102a1c 	xori	r4,r16,16552
81102a00:	81102a2c 	andhi	r4,r16,16552
81102a04:	81102a3c 	xorhi	r4,r16,16552
81102a08:	81102a4c 	andi	r4,r16,16553
81102a0c:	81102a5c 	xori	r4,r16,16553
81102a10:	81102a6c 	andhi	r4,r16,16553
81102a14:	81102a7c 	xorhi	r4,r16,16553
81102a18:	81102a8c 	andi	r4,r16,16554
			case 'A':
				pSpwcAddr = (alt_u32 *)SPWC_A_BASE;
81102a1c:	00a04834 	movhi	r2,33056
81102a20:	108e0004 	addi	r2,r2,14336
81102a24:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a28:	00001c06 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'B':
				pSpwcAddr = (alt_u32 *)SPWC_B_BASE;
81102a2c:	00a04834 	movhi	r2,33056
81102a30:	108d0004 	addi	r2,r2,13312
81102a34:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a38:	00001806 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'C':
				pSpwcAddr = (alt_u32 *)SPWC_C_BASE;
81102a3c:	00a04834 	movhi	r2,33056
81102a40:	108c0004 	addi	r2,r2,12288
81102a44:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a48:	00001406 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'D':
				pSpwcAddr = (alt_u32 *)SPWC_D_BASE;
81102a4c:	00a04834 	movhi	r2,33056
81102a50:	108b0004 	addi	r2,r2,11264
81102a54:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a58:	00001006 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'E':
				pSpwcAddr = (alt_u32 *)SPWC_E_BASE;
81102a5c:	00a04834 	movhi	r2,33056
81102a60:	108a0004 	addi	r2,r2,10240
81102a64:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a68:	00000c06 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'F':
				pSpwcAddr = (alt_u32 *)SPWC_F_BASE;
81102a6c:	00a04834 	movhi	r2,33056
81102a70:	10890004 	addi	r2,r2,9216
81102a74:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a78:	00000806 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'G':
				pSpwcAddr = (alt_u32 *)SPWC_G_BASE;
81102a7c:	00a04834 	movhi	r2,33056
81102a80:	10880004 	addi	r2,r2,8192
81102a84:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a88:	00000406 	br	81102a9c <SPWC_READ_REG32+0xf4>
			case 'H':
				pSpwcAddr = (alt_u32 *)SPWC_H_BASE;
81102a8c:	00a04834 	movhi	r2,33056
81102a90:	10870004 	addi	r2,r2,7168
81102a94:	e0bffc15 	stw	r2,-16(fp)
			break;
81102a98:	0001883a 	nop
		}
		RegisterValue = *(pSpwcAddr + (alt_u32)uc_RegisterAddress);
81102a9c:	e0bfff03 	ldbu	r2,-4(fp)
81102aa0:	1085883a 	add	r2,r2,r2
81102aa4:	1085883a 	add	r2,r2,r2
81102aa8:	1007883a 	mov	r3,r2
81102aac:	e0bffc17 	ldw	r2,-16(fp)
81102ab0:	10c5883a 	add	r2,r2,r3
81102ab4:	10800017 	ldw	r2,0(r2)
81102ab8:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81102abc:	e0bffd17 	ldw	r2,-12(fp)
	}
81102ac0:	e037883a 	mov	sp,fp
81102ac4:	df000017 	ldw	fp,0(sp)
81102ac8:	dec00104 	addi	sp,sp,4
81102acc:	f800283a 	ret

81102ad0 <b_SpaceWire_Interface_Write_Register>:

	bool b_SpaceWire_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81102ad0:	defffa04 	addi	sp,sp,-24
81102ad4:	dfc00515 	stw	ra,20(sp)
81102ad8:	df000415 	stw	fp,16(sp)
81102adc:	df000404 	addi	fp,sp,16
81102ae0:	2007883a 	mov	r3,r4
81102ae4:	2805883a 	mov	r2,r5
81102ae8:	e1bfff15 	stw	r6,-4(fp)
81102aec:	e0fffd05 	stb	r3,-12(fp)
81102af0:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102af4:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
81102af8:	e0bffe03 	ldbu	r2,-8(fp)
81102afc:	108000e8 	cmpgeui	r2,r2,3
81102b00:	1000081e 	bne	r2,zero,81102b24 <b_SpaceWire_Interface_Write_Register+0x54>
			SPWC_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81102b04:	e0bffd07 	ldb	r2,-12(fp)
81102b08:	e0fffe03 	ldbu	r3,-8(fp)
81102b0c:	e1bfff17 	ldw	r6,-4(fp)
81102b10:	180b883a 	mov	r5,r3
81102b14:	1009883a 	mov	r4,r2
81102b18:	11028800 	call	81102880 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81102b1c:	00800044 	movi	r2,1
81102b20:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81102b24:	e0bffc17 	ldw	r2,-16(fp)
	}
81102b28:	e037883a 	mov	sp,fp
81102b2c:	dfc00117 	ldw	ra,4(sp)
81102b30:	df000017 	ldw	fp,0(sp)
81102b34:	dec00204 	addi	sp,sp,8
81102b38:	f800283a 	ret

81102b3c <ul_SpaceWire_Interface_Read_Register>:

	alt_u32 ul_SpaceWire_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
81102b3c:	defffb04 	addi	sp,sp,-20
81102b40:	dfc00415 	stw	ra,16(sp)
81102b44:	df000315 	stw	fp,12(sp)
81102b48:	df000304 	addi	fp,sp,12
81102b4c:	2007883a 	mov	r3,r4
81102b50:	2805883a 	mov	r2,r5
81102b54:	e0fffe05 	stb	r3,-8(fp)
81102b58:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81102b5c:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
81102b60:	e0bfff03 	ldbu	r2,-4(fp)
81102b64:	108000e8 	cmpgeui	r2,r2,3
81102b68:	1000061e 	bne	r2,zero,81102b84 <ul_SpaceWire_Interface_Read_Register+0x48>
			ul_RegisterValue = SPWC_READ_REG32(c_SpwID, uc_RegisterAddress);
81102b6c:	e0bffe07 	ldb	r2,-8(fp)
81102b70:	e0ffff03 	ldbu	r3,-4(fp)
81102b74:	180b883a 	mov	r5,r3
81102b78:	1009883a 	mov	r4,r2
81102b7c:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81102b80:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
81102b84:	e0bffd17 	ldw	r2,-12(fp)
	}
81102b88:	e037883a 	mov	sp,fp
81102b8c:	dfc00117 	ldw	ra,4(sp)
81102b90:	df000017 	ldw	fp,0(sp)
81102b94:	dec00204 	addi	sp,sp,8
81102b98:	f800283a 	ret

81102b9c <b_SpaceWire_Interface_Enable_Control>:

	bool b_SpaceWire_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81102b9c:	defff804 	addi	sp,sp,-32
81102ba0:	dfc00715 	stw	ra,28(sp)
81102ba4:	df000615 	stw	fp,24(sp)
81102ba8:	df000604 	addi	fp,sp,24
81102bac:	2007883a 	mov	r3,r4
81102bb0:	2805883a 	mov	r2,r5
81102bb4:	e1bfff15 	stw	r6,-4(fp)
81102bb8:	e0fffd05 	stb	r3,-12(fp)
81102bbc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81102bc0:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK;
81102bc4:	0081c004 	movi	r2,1792
81102bc8:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102bcc:	d0a03f04 	addi	r2,gp,-32516
81102bd0:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81102bd4:	e0bffd07 	ldb	r2,-12(fp)
81102bd8:	10bfefc4 	addi	r2,r2,-65
81102bdc:	10c00228 	cmpgeui	r3,r2,8
81102be0:	1800361e 	bne	r3,zero,81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
81102be4:	100690ba 	slli	r3,r2,2
81102be8:	00a04434 	movhi	r2,33040
81102bec:	108aff04 	addi	r2,r2,11260
81102bf0:	1885883a 	add	r2,r3,r2
81102bf4:	10800017 	ldw	r2,0(r2)
81102bf8:	1000683a 	jmp	r2
81102bfc:	81102c1c 	xori	r4,r16,16560
81102c00:	81102c30 	cmpltui	r4,r16,16560
81102c04:	81102c44 	addi	r4,r16,16561
81102c08:	81102c58 	cmpnei	r4,r16,16561
81102c0c:	81102c6c 	andhi	r4,r16,16561
81102c10:	81102c80 	call	881102c8 <__reset+0x20f02c8>
81102c14:	81102c94 	ori	r4,r16,16562
81102c18:	81102ca8 	cmpgeui	r4,r16,16562
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102c1c:	d0a03f04 	addi	r2,gp,-32516
81102c20:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c24:	00800044 	movi	r2,1
81102c28:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c2c:	00002306 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102c30:	d0a04004 	addi	r2,gp,-32512
81102c34:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c38:	00800044 	movi	r2,1
81102c3c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c40:	00001e06 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102c44:	d0a04104 	addi	r2,gp,-32508
81102c48:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c4c:	00800044 	movi	r2,1
81102c50:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c54:	00001906 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102c58:	d0a04204 	addi	r2,gp,-32504
81102c5c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c60:	00800044 	movi	r2,1
81102c64:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c68:	00001406 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102c6c:	d0a04304 	addi	r2,gp,-32500
81102c70:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c74:	00800044 	movi	r2,1
81102c78:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c7c:	00000f06 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102c80:	d0a04404 	addi	r2,gp,-32496
81102c84:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c88:	00800044 	movi	r2,1
81102c8c:	e0bffa15 	stw	r2,-24(fp)
			break;
81102c90:	00000a06 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102c94:	d0a04504 	addi	r2,gp,-32492
81102c98:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102c9c:	00800044 	movi	r2,1
81102ca0:	e0bffa15 	stw	r2,-24(fp)
			break;
81102ca4:	00000506 	br	81102cbc <b_SpaceWire_Interface_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102ca8:	d0a04604 	addi	r2,gp,-32488
81102cac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81102cb0:	00800044 	movi	r2,1
81102cb4:	e0bffa15 	stw	r2,-24(fp)
			break;
81102cb8:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
81102cbc:	e0bffa17 	ldw	r2,-24(fp)
81102cc0:	10800058 	cmpnei	r2,r2,1
81102cc4:	10002b1e 	bne	r2,zero,81102d74 <b_SpaceWire_Interface_Enable_Control+0x1d8>
81102cc8:	e0ffff17 	ldw	r3,-4(fp)
81102ccc:	e0bffc17 	ldw	r2,-16(fp)
81102cd0:	1884703a 	and	r2,r3,r2
81102cd4:	10002726 	beq	r2,zero,81102d74 <b_SpaceWire_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81102cd8:	e0bffe03 	ldbu	r2,-8(fp)
81102cdc:	10000326 	beq	r2,zero,81102cec <b_SpaceWire_Interface_Enable_Control+0x150>
81102ce0:	10800060 	cmpeqi	r2,r2,1
81102ce4:	1000121e 	bne	r2,zero,81102d30 <b_SpaceWire_Interface_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81102ce8:	00002306 	br	81102d78 <b_SpaceWire_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_EnableMask;
81102cec:	e0bffb17 	ldw	r2,-20(fp)
81102cf0:	10c00017 	ldw	r3,0(r2)
81102cf4:	e0bfff17 	ldw	r2,-4(fp)
81102cf8:	0084303a 	nor	r2,zero,r2
81102cfc:	1886703a 	and	r3,r3,r2
81102d00:	e0bffb17 	ldw	r2,-20(fp)
81102d04:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102d08:	e0fffd07 	ldb	r3,-12(fp)
81102d0c:	e0bffb17 	ldw	r2,-20(fp)
81102d10:	10800017 	ldw	r2,0(r2)
81102d14:	100d883a 	mov	r6,r2
81102d18:	000b883a 	mov	r5,zero
81102d1c:	1809883a 	mov	r4,r3
81102d20:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102d24:	00800044 	movi	r2,1
81102d28:	e0bffa15 	stw	r2,-24(fp)
				break;
81102d2c:	00001006 	br	81102d70 <b_SpaceWire_Interface_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_EnableMask;
81102d30:	e0bffb17 	ldw	r2,-20(fp)
81102d34:	10c00017 	ldw	r3,0(r2)
81102d38:	e0bfff17 	ldw	r2,-4(fp)
81102d3c:	1886b03a 	or	r3,r3,r2
81102d40:	e0bffb17 	ldw	r2,-20(fp)
81102d44:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102d48:	e0fffd07 	ldb	r3,-12(fp)
81102d4c:	e0bffb17 	ldw	r2,-20(fp)
81102d50:	10800017 	ldw	r2,0(r2)
81102d54:	100d883a 	mov	r6,r2
81102d58:	000b883a 	mov	r5,zero
81102d5c:	1809883a 	mov	r4,r3
81102d60:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102d64:	00800044 	movi	r2,1
81102d68:	e0bffa15 	stw	r2,-24(fp)
				break;
81102d6c:	0001883a 	nop

			}
		} else {
81102d70:	00000106 	br	81102d78 <b_SpaceWire_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
81102d74:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81102d78:	e0bffa17 	ldw	r2,-24(fp)
	}
81102d7c:	e037883a 	mov	sp,fp
81102d80:	dfc00117 	ldw	ra,4(sp)
81102d84:	df000017 	ldw	fp,0(sp)
81102d88:	dec00204 	addi	sp,sp,8
81102d8c:	f800283a 	ret

81102d90 <b_SpaceWire_Interface_Mode_Control>:

	bool b_SpaceWire_Interface_Mode_Control(char c_SpwID, alt_u8 uc_InterfaceMode){
81102d90:	defffa04 	addi	sp,sp,-24
81102d94:	dfc00515 	stw	ra,20(sp)
81102d98:	df000415 	stw	fp,16(sp)
81102d9c:	df000404 	addi	fp,sp,16
81102da0:	2007883a 	mov	r3,r4
81102da4:	2805883a 	mov	r2,r5
81102da8:	e0fffe05 	stb	r3,-8(fp)
81102dac:	e0bfff05 	stb	r2,-4(fp)
		bool bSuccess = FALSE;
81102db0:	e03ffc15 	stw	zero,-16(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102db4:	d0a03f04 	addi	r2,gp,-32516
81102db8:	e0bffd15 	stw	r2,-12(fp)
		switch (c_SpwID) {
81102dbc:	e0bffe07 	ldb	r2,-8(fp)
81102dc0:	10bfefc4 	addi	r2,r2,-65
81102dc4:	10c00228 	cmpgeui	r3,r2,8
81102dc8:	1800361e 	bne	r3,zero,81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
81102dcc:	100690ba 	slli	r3,r2,2
81102dd0:	00a04434 	movhi	r2,33040
81102dd4:	108b7904 	addi	r2,r2,11748
81102dd8:	1885883a 	add	r2,r3,r2
81102ddc:	10800017 	ldw	r2,0(r2)
81102de0:	1000683a 	jmp	r2
81102de4:	81102e04 	addi	r4,r16,16568
81102de8:	81102e18 	cmpnei	r4,r16,16568
81102dec:	81102e2c 	andhi	r4,r16,16568
81102df0:	81102e40 	call	881102e4 <__reset+0x20f02e4>
81102df4:	81102e54 	ori	r4,r16,16569
81102df8:	81102e68 	cmpgeui	r4,r16,16569
81102dfc:	81102e7c 	xorhi	r4,r16,16569
81102e00:	81102e90 	cmplti	r4,r16,16570
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81102e04:	d0a03f04 	addi	r2,gp,-32516
81102e08:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e0c:	00800044 	movi	r2,1
81102e10:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e14:	00002306 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81102e18:	d0a04004 	addi	r2,gp,-32512
81102e1c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e20:	00800044 	movi	r2,1
81102e24:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e28:	00001e06 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81102e2c:	d0a04104 	addi	r2,gp,-32508
81102e30:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e34:	00800044 	movi	r2,1
81102e38:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e3c:	00001906 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81102e40:	d0a04204 	addi	r2,gp,-32504
81102e44:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e48:	00800044 	movi	r2,1
81102e4c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e50:	00001406 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81102e54:	d0a04304 	addi	r2,gp,-32500
81102e58:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e5c:	00800044 	movi	r2,1
81102e60:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e64:	00000f06 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
81102e68:	d0a04404 	addi	r2,gp,-32496
81102e6c:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e70:	00800044 	movi	r2,1
81102e74:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e78:	00000a06 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81102e7c:	d0a04504 	addi	r2,gp,-32492
81102e80:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e84:	00800044 	movi	r2,1
81102e88:	e0bffc15 	stw	r2,-16(fp)
			break;
81102e8c:	00000506 	br	81102ea4 <b_SpaceWire_Interface_Mode_Control+0x114>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81102e90:	d0a04604 	addi	r2,gp,-32488
81102e94:	e0bffd15 	stw	r2,-12(fp)
				bSuccess = TRUE;
81102e98:	00800044 	movi	r2,1
81102e9c:	e0bffc15 	stw	r2,-16(fp)
			break;
81102ea0:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81102ea4:	e0bffc17 	ldw	r2,-16(fp)
81102ea8:	10800058 	cmpnei	r2,r2,1
81102eac:	10007b1e 	bne	r2,zero,8110309c <b_SpaceWire_Interface_Mode_Control+0x30c>
			switch (uc_InterfaceMode){
81102eb0:	e0bfff03 	ldbu	r2,-4(fp)
81102eb4:	10c00060 	cmpeqi	r3,r2,1
81102eb8:	1800241e 	bne	r3,zero,81102f4c <b_SpaceWire_Interface_Mode_Control+0x1bc>
81102ebc:	10c00088 	cmpgei	r3,r2,2
81102ec0:	1800021e 	bne	r3,zero,81102ecc <b_SpaceWire_Interface_Mode_Control+0x13c>
81102ec4:	10000626 	beq	r2,zero,81102ee0 <b_SpaceWire_Interface_Mode_Control+0x150>
81102ec8:	00007206 	br	81103094 <b_SpaceWire_Interface_Mode_Control+0x304>
81102ecc:	10c000a0 	cmpeqi	r3,r2,2
81102ed0:	1800391e 	bne	r3,zero,81102fb8 <b_SpaceWire_Interface_Mode_Control+0x228>
81102ed4:	108000e0 	cmpeqi	r2,r2,3
81102ed8:	1000521e 	bne	r2,zero,81103024 <b_SpaceWire_Interface_Mode_Control+0x294>
81102edc:	00006d06 	br	81103094 <b_SpaceWire_Interface_Mode_Control+0x304>

				case SPWC_INTERFACE_BACKDOOR_MODE:
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK;
81102ee0:	e0bffd17 	ldw	r2,-12(fp)
81102ee4:	10800017 	ldw	r2,0(r2)
81102ee8:	10c40014 	ori	r3,r2,4096
81102eec:	e0bffd17 	ldw	r2,-12(fp)
81102ef0:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102ef4:	e0bffd17 	ldw	r2,-12(fp)
81102ef8:	10c00017 	ldw	r3,0(r2)
81102efc:	00bdffc4 	movi	r2,-2049
81102f00:	1886703a 	and	r3,r3,r2
81102f04:	e0bffd17 	ldw	r2,-12(fp)
81102f08:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102f0c:	e0bffd17 	ldw	r2,-12(fp)
81102f10:	10c00017 	ldw	r3,0(r2)
81102f14:	00bfdfc4 	movi	r2,-129
81102f18:	1886703a 	and	r3,r3,r2
81102f1c:	e0bffd17 	ldw	r2,-12(fp)
81102f20:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102f24:	e0fffe07 	ldb	r3,-8(fp)
81102f28:	e0bffd17 	ldw	r2,-12(fp)
81102f2c:	10800017 	ldw	r2,0(r2)
81102f30:	100d883a 	mov	r6,r2
81102f34:	000b883a 	mov	r5,zero
81102f38:	1809883a 	mov	r4,r3
81102f3c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102f40:	00800044 	movi	r2,1
81102f44:	e0bffc15 	stw	r2,-16(fp)
				break;
81102f48:	00005506 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_EXTERNAL_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81102f4c:	e0bffd17 	ldw	r2,-12(fp)
81102f50:	10c00017 	ldw	r3,0(r2)
81102f54:	00bbffc4 	movi	r2,-4097
81102f58:	1886703a 	and	r3,r3,r2
81102f5c:	e0bffd17 	ldw	r2,-12(fp)
81102f60:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK;
81102f64:	e0bffd17 	ldw	r2,-12(fp)
81102f68:	10800017 	ldw	r2,0(r2)
81102f6c:	10c20014 	ori	r3,r2,2048
81102f70:	e0bffd17 	ldw	r2,-12(fp)
81102f74:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102f78:	e0bffd17 	ldw	r2,-12(fp)
81102f7c:	10c00017 	ldw	r3,0(r2)
81102f80:	00bfdfc4 	movi	r2,-129
81102f84:	1886703a 	and	r3,r3,r2
81102f88:	e0bffd17 	ldw	r2,-12(fp)
81102f8c:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102f90:	e0fffe07 	ldb	r3,-8(fp)
81102f94:	e0bffd17 	ldw	r2,-12(fp)
81102f98:	10800017 	ldw	r2,0(r2)
81102f9c:	100d883a 	mov	r6,r2
81102fa0:	000b883a 	mov	r5,zero
81102fa4:	1809883a 	mov	r4,r3
81102fa8:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81102fac:	00800044 	movi	r2,1
81102fb0:	e0bffc15 	stw	r2,-16(fp)
				break;
81102fb4:	00003a06 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_LOOPBACK_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81102fb8:	e0bffd17 	ldw	r2,-12(fp)
81102fbc:	10c00017 	ldw	r3,0(r2)
81102fc0:	00bbffc4 	movi	r2,-4097
81102fc4:	1886703a 	and	r3,r3,r2
81102fc8:	e0bffd17 	ldw	r2,-12(fp)
81102fcc:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
81102fd0:	e0bffd17 	ldw	r2,-12(fp)
81102fd4:	10c00017 	ldw	r3,0(r2)
81102fd8:	00bdffc4 	movi	r2,-2049
81102fdc:	1886703a 	and	r3,r3,r2
81102fe0:	e0bffd17 	ldw	r2,-12(fp)
81102fe4:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value |= (alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK;
81102fe8:	e0bffd17 	ldw	r2,-12(fp)
81102fec:	10800017 	ldw	r2,0(r2)
81102ff0:	10c02014 	ori	r3,r2,128
81102ff4:	e0bffd17 	ldw	r2,-12(fp)
81102ff8:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81102ffc:	e0fffe07 	ldb	r3,-8(fp)
81103000:	e0bffd17 	ldw	r2,-12(fp)
81103004:	10800017 	ldw	r2,0(r2)
81103008:	100d883a 	mov	r6,r2
8110300c:	000b883a 	mov	r5,zero
81103010:	1809883a 	mov	r4,r3
81103014:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103018:	00800044 	movi	r2,1
8110301c:	e0bffc15 	stw	r2,-16(fp)
				break;
81103020:	00001f06 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>

				case SPWC_INTERFACE_NORMAL_MODE:
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_BACKDOOR_MODE_CONTROL_BIT_MASK);
81103024:	e0bffd17 	ldw	r2,-12(fp)
81103028:	10c00017 	ldw	r3,0(r2)
8110302c:	00bbffc4 	movi	r2,-4097
81103030:	1886703a 	and	r3,r3,r2
81103034:	e0bffd17 	ldw	r2,-12(fp)
81103038:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_EXTERNAL_LOOPBACK_MODE_CONTROL_BIT_MASK);
8110303c:	e0bffd17 	ldw	r2,-12(fp)
81103040:	10c00017 	ldw	r3,0(r2)
81103044:	00bdffc4 	movi	r2,-2049
81103048:	1886703a 	and	r3,r3,r2
8110304c:	e0bffd17 	ldw	r2,-12(fp)
81103050:	10c00015 	stw	r3,0(r2)
					*ul_spwc_interface_control_status_register_value &= ~((alt_u32)SPWC_LOOPBACK_MODE_CONTROL_BIT_MASK);
81103054:	e0bffd17 	ldw	r2,-12(fp)
81103058:	10c00017 	ldw	r3,0(r2)
8110305c:	00bfdfc4 	movi	r2,-129
81103060:	1886703a 	and	r3,r3,r2
81103064:	e0bffd17 	ldw	r2,-12(fp)
81103068:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
8110306c:	e0fffe07 	ldb	r3,-8(fp)
81103070:	e0bffd17 	ldw	r2,-12(fp)
81103074:	10800017 	ldw	r2,0(r2)
81103078:	100d883a 	mov	r6,r2
8110307c:	000b883a 	mov	r5,zero
81103080:	1809883a 	mov	r4,r3
81103084:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103088:	00800044 	movi	r2,1
8110308c:	e0bffc15 	stw	r2,-16(fp)
				break;
81103090:	00000306 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>
				
				default:
					bSuccess = FALSE;
81103094:	e03ffc15 	stw	zero,-16(fp)
81103098:	00000106 	br	811030a0 <b_SpaceWire_Interface_Mode_Control+0x310>
	
			}
		} else {
			bSuccess = FALSE;
8110309c:	e03ffc15 	stw	zero,-16(fp)
		}

		return bSuccess;
811030a0:	e0bffc17 	ldw	r2,-16(fp)
	}
811030a4:	e037883a 	mov	sp,fp
811030a8:	dfc00117 	ldw	ra,4(sp)
811030ac:	df000017 	ldw	fp,0(sp)
811030b0:	dec00204 	addi	sp,sp,8
811030b4:	f800283a 	ret

811030b8 <v_SpaceWire_Interface_Force_Reset>:

	void v_SpaceWire_Interface_Force_Reset(char c_SpwID){
811030b8:	defffc04 	addi	sp,sp,-16
811030bc:	dfc00315 	stw	ra,12(sp)
811030c0:	df000215 	stw	fp,8(sp)
811030c4:	df000204 	addi	fp,sp,8
811030c8:	2005883a 	mov	r2,r4
811030cc:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811030d0:	d0a03f04 	addi	r2,gp,-32516
811030d4:	e0bffe15 	stw	r2,-8(fp)
		switch (c_SpwID) {
811030d8:	e0bfff07 	ldb	r2,-4(fp)
811030dc:	10bfefc4 	addi	r2,r2,-65
811030e0:	10c00228 	cmpgeui	r3,r2,8
811030e4:	1800261e 	bne	r3,zero,81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
811030e8:	100690ba 	slli	r3,r2,2
811030ec:	00a04434 	movhi	r2,33040
811030f0:	108c4004 	addi	r2,r2,12544
811030f4:	1885883a 	add	r2,r3,r2
811030f8:	10800017 	ldw	r2,0(r2)
811030fc:	1000683a 	jmp	r2
81103100:	81103120 	cmpeqi	r4,r16,16580
81103104:	8110312c 	andhi	r4,r16,16580
81103108:	81103138 	rdprs	r4,r16,16580
8110310c:	81103144 	addi	r4,r16,16581
81103110:	81103150 	cmplti	r4,r16,16581
81103114:	8110315c 	xori	r4,r16,16581
81103118:	81103168 	cmpgeui	r4,r16,16581
8110311c:	81103174 	orhi	r4,r16,16581
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103120:	d0a03f04 	addi	r2,gp,-32516
81103124:	e0bffe15 	stw	r2,-8(fp)
			break;
81103128:	00001506 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
8110312c:	d0a04004 	addi	r2,gp,-32512
81103130:	e0bffe15 	stw	r2,-8(fp)
			break;
81103134:	00001206 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103138:	d0a04104 	addi	r2,gp,-32508
8110313c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103140:	00000f06 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103144:	d0a04204 	addi	r2,gp,-32504
81103148:	e0bffe15 	stw	r2,-8(fp)
			break;
8110314c:	00000c06 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81103150:	d0a04304 	addi	r2,gp,-32500
81103154:	e0bffe15 	stw	r2,-8(fp)
			break;
81103158:	00000906 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
8110315c:	d0a04404 	addi	r2,gp,-32496
81103160:	e0bffe15 	stw	r2,-8(fp)
			break;
81103164:	00000606 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
81103168:	d0a04504 	addi	r2,gp,-32492
8110316c:	e0bffe15 	stw	r2,-8(fp)
			break;
81103170:	00000306 	br	81103180 <v_SpaceWire_Interface_Force_Reset+0xc8>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103174:	d0a04604 	addi	r2,gp,-32488
81103178:	e0bffe15 	stw	r2,-8(fp)
			break;
8110317c:	0001883a 	nop
		}
		SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value | SPWC_CODEC_FORCE_RESET_CONTROL_BIT_MASK);
81103180:	e0ffff07 	ldb	r3,-4(fp)
81103184:	e0bffe17 	ldw	r2,-8(fp)
81103188:	10800017 	ldw	r2,0(r2)
8110318c:	10801014 	ori	r2,r2,64
81103190:	100d883a 	mov	r6,r2
81103194:	000b883a 	mov	r5,zero
81103198:	1809883a 	mov	r4,r3
8110319c:	11028800 	call	81102880 <SPWC_WRITE_REG32>

	}
811031a0:	0001883a 	nop
811031a4:	e037883a 	mov	sp,fp
811031a8:	dfc00117 	ldw	ra,4(sp)
811031ac:	df000017 	ldw	fp,0(sp)
811031b0:	dec00204 	addi	sp,sp,8
811031b4:	f800283a 	ret

811031b8 <v_SpaceWire_Interface_Interrupts_Enable_Control>:

	bool v_SpaceWire_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
811031b8:	defff804 	addi	sp,sp,-32
811031bc:	dfc00715 	stw	ra,28(sp)
811031c0:	df000615 	stw	fp,24(sp)
811031c4:	df000604 	addi	fp,sp,24
811031c8:	2007883a 	mov	r3,r4
811031cc:	2805883a 	mov	r2,r5
811031d0:	e1bfff15 	stw	r6,-4(fp)
811031d4:	e0fffd05 	stb	r3,-12(fp)
811031d8:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811031dc:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_ENABLE_BIT_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | SPWC_LINK_RUNNING_INTERRUPT_ENABLE_BIT_MASK;
811031e0:	00800e04 	movi	r2,56
811031e4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
811031e8:	d0a03f04 	addi	r2,gp,-32516
811031ec:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811031f0:	e0bffd07 	ldb	r2,-12(fp)
811031f4:	10bfefc4 	addi	r2,r2,-65
811031f8:	10c00228 	cmpgeui	r3,r2,8
811031fc:	1800361e 	bne	r3,zero,811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
81103200:	100690ba 	slli	r3,r2,2
81103204:	00a04434 	movhi	r2,33040
81103208:	108c8604 	addi	r2,r2,12824
8110320c:	1885883a 	add	r2,r3,r2
81103210:	10800017 	ldw	r2,0(r2)
81103214:	1000683a 	jmp	r2
81103218:	81103238 	rdprs	r4,r16,16584
8110321c:	8110324c 	andi	r4,r16,16585
81103220:	81103260 	cmpeqi	r4,r16,16585
81103224:	81103274 	orhi	r4,r16,16585
81103228:	81103288 	cmpgei	r4,r16,16586
8110322c:	8110329c 	xori	r4,r16,16586
81103230:	811032b0 	cmpltui	r4,r16,16586
81103234:	811032c4 	addi	r4,r16,16587
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
81103238:	d0a03f04 	addi	r2,gp,-32516
8110323c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103240:	00800044 	movi	r2,1
81103244:	e0bffa15 	stw	r2,-24(fp)
			break;
81103248:	00002306 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
8110324c:	d0a04004 	addi	r2,gp,-32512
81103250:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103254:	00800044 	movi	r2,1
81103258:	e0bffa15 	stw	r2,-24(fp)
			break;
8110325c:	00001e06 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
81103260:	d0a04104 	addi	r2,gp,-32508
81103264:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103268:	00800044 	movi	r2,1
8110326c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103270:	00001906 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
81103274:	d0a04204 	addi	r2,gp,-32504
81103278:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110327c:	00800044 	movi	r2,1
81103280:	e0bffa15 	stw	r2,-24(fp)
			break;
81103284:	00001406 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
81103288:	d0a04304 	addi	r2,gp,-32500
8110328c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103290:	00800044 	movi	r2,1
81103294:	e0bffa15 	stw	r2,-24(fp)
			break;
81103298:	00000f06 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
8110329c:	d0a04404 	addi	r2,gp,-32496
811032a0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811032a4:	00800044 	movi	r2,1
811032a8:	e0bffa15 	stw	r2,-24(fp)
			break;
811032ac:	00000a06 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811032b0:	d0a04504 	addi	r2,gp,-32492
811032b4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811032b8:	00800044 	movi	r2,1
811032bc:	e0bffa15 	stw	r2,-24(fp)
			break;
811032c0:	00000506 	br	811032d8 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
811032c4:	d0a04604 	addi	r2,gp,-32488
811032c8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811032cc:	00800044 	movi	r2,1
811032d0:	e0bffa15 	stw	r2,-24(fp)
			break;
811032d4:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
811032d8:	e0bffa17 	ldw	r2,-24(fp)
811032dc:	10800058 	cmpnei	r2,r2,1
811032e0:	10002b1e 	bne	r2,zero,81103390 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
811032e4:	e0ffff17 	ldw	r3,-4(fp)
811032e8:	e0bffc17 	ldw	r2,-16(fp)
811032ec:	1884703a 	and	r2,r3,r2
811032f0:	10002726 	beq	r2,zero,81103390 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
811032f4:	e0bffe03 	ldbu	r2,-8(fp)
811032f8:	10000326 	beq	r2,zero,81103308 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x150>
811032fc:	10800060 	cmpeqi	r2,r2,1
81103300:	1000121e 	bne	r2,zero,8110334c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81103304:	00002306 	br	81103394 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_interface_control_status_register_value &= ~ul_InterruptMask;
81103308:	e0bffb17 	ldw	r2,-20(fp)
8110330c:	10c00017 	ldw	r3,0(r2)
81103310:	e0bfff17 	ldw	r2,-4(fp)
81103314:	0084303a 	nor	r2,zero,r2
81103318:	1886703a 	and	r3,r3,r2
8110331c:	e0bffb17 	ldw	r2,-20(fp)
81103320:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103324:	e0fffd07 	ldb	r3,-12(fp)
81103328:	e0bffb17 	ldw	r2,-20(fp)
8110332c:	10800017 	ldw	r2,0(r2)
81103330:	100d883a 	mov	r6,r2
81103334:	000b883a 	mov	r5,zero
81103338:	1809883a 	mov	r4,r3
8110333c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103340:	00800044 	movi	r2,1
81103344:	e0bffa15 	stw	r2,-24(fp)
				break;
81103348:	00001006 	br	8110338c <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_interface_control_status_register_value |= ul_InterruptMask;
8110334c:	e0bffb17 	ldw	r2,-20(fp)
81103350:	10c00017 	ldw	r3,0(r2)
81103354:	e0bfff17 	ldw	r2,-4(fp)
81103358:	1886b03a 	or	r3,r3,r2
8110335c:	e0bffb17 	ldw	r2,-20(fp)
81103360:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_interface_control_status_register_value);
81103364:	e0fffd07 	ldb	r3,-12(fp)
81103368:	e0bffb17 	ldw	r2,-20(fp)
8110336c:	10800017 	ldw	r2,0(r2)
81103370:	100d883a 	mov	r6,r2
81103374:	000b883a 	mov	r5,zero
81103378:	1809883a 	mov	r4,r3
8110337c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103380:	00800044 	movi	r2,1
81103384:	e0bffa15 	stw	r2,-24(fp)
				break;
81103388:	0001883a 	nop

			}
		} else {
8110338c:	00000106 	br	81103394 <v_SpaceWire_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
81103390:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103394:	e0bffa17 	ldw	r2,-24(fp)
	}
81103398:	e037883a 	mov	sp,fp
8110339c:	dfc00117 	ldw	ra,4(sp)
811033a0:	df000017 	ldw	fp,0(sp)
811033a4:	dec00204 	addi	sp,sp,8
811033a8:	f800283a 	ret

811033ac <ul_SpaceWire_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_SpaceWire_Interface_Interrupts_Flags_Read(char c_SpwID){
811033ac:	defffb04 	addi	sp,sp,-20
811033b0:	dfc00415 	stw	ra,16(sp)
811033b4:	df000315 	stw	fp,12(sp)
811033b8:	df000304 	addi	fp,sp,12
811033bc:	2005883a 	mov	r2,r4
811033c0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
811033c4:	008001c4 	movi	r2,7
811033c8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_interrupts_flags_value = SPWC_READ_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811033cc:	e0bfff07 	ldb	r2,-4(fp)
811033d0:	000b883a 	mov	r5,zero
811033d4:	1009883a 	mov	r4,r2
811033d8:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811033dc:	1007883a 	mov	r3,r2
811033e0:	e0bffd17 	ldw	r2,-12(fp)
811033e4:	1884703a 	and	r2,r3,r2
811033e8:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_interrupts_flags_value;
811033ec:	e0bffe17 	ldw	r2,-8(fp)
	}
811033f0:	e037883a 	mov	sp,fp
811033f4:	dfc00117 	ldw	ra,4(sp)
811033f8:	df000017 	ldw	fp,0(sp)
811033fc:	dec00204 	addi	sp,sp,8
81103400:	f800283a 	ret

81103404 <v_SpaceWire_Interface_Interrupts_Flags_Clear>:

	void v_SpaceWire_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81103404:	defff904 	addi	sp,sp,-28
81103408:	dfc00615 	stw	ra,24(sp)
8110340c:	df000515 	stw	fp,20(sp)
81103410:	df000504 	addi	fp,sp,20
81103414:	2005883a 	mov	r2,r4
81103418:	e17fff15 	stw	r5,-4(fp)
8110341c:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
81103420:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_ERROR_INTERRUPT_FLAG_MASK | SPWC_TIMECODE_RECEIVED_INTERRUPT_FLAG_MASK | SPWC_LINK_RUNNING_INTERRUPT_FLAG_MASK;
81103424:	008001c4 	movi	r2,7
81103428:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110342c:	d0a03f04 	addi	r2,gp,-32516
81103430:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103434:	e0bffe07 	ldb	r2,-8(fp)
81103438:	10bfefc4 	addi	r2,r2,-65
8110343c:	10c00228 	cmpgeui	r3,r2,8
81103440:	1800361e 	bne	r3,zero,8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
81103444:	100690ba 	slli	r3,r2,2
81103448:	00a04434 	movhi	r2,33040
8110344c:	108d1704 	addi	r2,r2,13404
81103450:	1885883a 	add	r2,r3,r2
81103454:	10800017 	ldw	r2,0(r2)
81103458:	1000683a 	jmp	r2
8110345c:	8110347c 	xorhi	r4,r16,16593
81103460:	81103490 	cmplti	r4,r16,16594
81103464:	811034a4 	muli	r4,r16,16594
81103468:	811034b8 	rdprs	r4,r16,16594
8110346c:	811034cc 	andi	r4,r16,16595
81103470:	811034e0 	cmpeqi	r4,r16,16595
81103474:	811034f4 	orhi	r4,r16,16595
81103478:	81103508 	cmpgei	r4,r16,16596
			case 'A':
				ul_spwc_interface_control_status_register_value = &ul_spwc_a_interface_control_status_register_value;
8110347c:	d0a03f04 	addi	r2,gp,-32516
81103480:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103484:	00800044 	movi	r2,1
81103488:	e0bffb15 	stw	r2,-20(fp)
			break;
8110348c:	00002306 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_spwc_interface_control_status_register_value = &ul_spwc_b_interface_control_status_register_value;
81103490:	d0a04004 	addi	r2,gp,-32512
81103494:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103498:	00800044 	movi	r2,1
8110349c:	e0bffb15 	stw	r2,-20(fp)
			break;
811034a0:	00001e06 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_spwc_interface_control_status_register_value = &ul_spwc_c_interface_control_status_register_value;
811034a4:	d0a04104 	addi	r2,gp,-32508
811034a8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034ac:	00800044 	movi	r2,1
811034b0:	e0bffb15 	stw	r2,-20(fp)
			break;
811034b4:	00001906 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_spwc_interface_control_status_register_value = &ul_spwc_d_interface_control_status_register_value;
811034b8:	d0a04204 	addi	r2,gp,-32504
811034bc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034c0:	00800044 	movi	r2,1
811034c4:	e0bffb15 	stw	r2,-20(fp)
			break;
811034c8:	00001406 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_spwc_interface_control_status_register_value = &ul_spwc_e_interface_control_status_register_value;
811034cc:	d0a04304 	addi	r2,gp,-32500
811034d0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034d4:	00800044 	movi	r2,1
811034d8:	e0bffb15 	stw	r2,-20(fp)
			break;
811034dc:	00000f06 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_spwc_interface_control_status_register_value = &ul_spwc_f_interface_control_status_register_value;
811034e0:	d0a04404 	addi	r2,gp,-32496
811034e4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034e8:	00800044 	movi	r2,1
811034ec:	e0bffb15 	stw	r2,-20(fp)
			break;
811034f0:	00000a06 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_spwc_interface_control_status_register_value = &ul_spwc_g_interface_control_status_register_value;
811034f4:	d0a04504 	addi	r2,gp,-32492
811034f8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811034fc:	00800044 	movi	r2,1
81103500:	e0bffb15 	stw	r2,-20(fp)
			break;
81103504:	00000506 	br	8110351c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_spwc_interface_control_status_register_value = &ul_spwc_h_interface_control_status_register_value;
81103508:	d0a04604 	addi	r2,gp,-32488
8110350c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81103510:	00800044 	movi	r2,1
81103514:	e0bffb15 	stw	r2,-20(fp)
			break;
81103518:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_spwc_mask) != 0)){
8110351c:	e0bffb17 	ldw	r2,-20(fp)
81103520:	10800058 	cmpnei	r2,r2,1
81103524:	10000d1e 	bne	r2,zero,8110355c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
81103528:	e0ffff17 	ldw	r3,-4(fp)
8110352c:	e0bffd17 	ldw	r2,-12(fp)
81103530:	1884703a 	and	r2,r3,r2
81103534:	10000926 	beq	r2,zero,8110355c <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x158>
			SPWC_WRITE_REG32(c_SpwID, SPWC_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_spwc_interface_control_status_register_value | ul_spwc_mask));
81103538:	e13ffe07 	ldb	r4,-8(fp)
8110353c:	e0bffc17 	ldw	r2,-16(fp)
81103540:	10c00017 	ldw	r3,0(r2)
81103544:	e0bffd17 	ldw	r2,-12(fp)
81103548:	1884b03a 	or	r2,r3,r2
8110354c:	100d883a 	mov	r6,r2
81103550:	000b883a 	mov	r5,zero
81103554:	11028800 	call	81102880 <SPWC_WRITE_REG32>
81103558:	00000106 	br	81103560 <v_SpaceWire_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
8110355c:	e03ffb15 	stw	zero,-20(fp)
		}
	}
81103560:	0001883a 	nop
81103564:	e037883a 	mov	sp,fp
81103568:	dfc00117 	ldw	ra,4(sp)
8110356c:	df000017 	ldw	fp,0(sp)
81103570:	dec00204 	addi	sp,sp,8
81103574:	f800283a 	ret

81103578 <v_SpaceWire_Interface_Link_Control>:

	bool v_SpaceWire_Interface_Link_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_ControlMask){
81103578:	defff804 	addi	sp,sp,-32
8110357c:	dfc00715 	stw	ra,28(sp)
81103580:	df000615 	stw	fp,24(sp)
81103584:	df000604 	addi	fp,sp,24
81103588:	2007883a 	mov	r3,r4
8110358c:	2805883a 	mov	r2,r5
81103590:	e1bfff15 	stw	r6,-4(fp)
81103594:	e0fffd05 	stb	r3,-12(fp)
81103598:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
8110359c:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_AUTOSTART_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK | SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK;
811035a0:	0080e004 	movi	r2,896
811035a4:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811035a8:	d0a00004 	addi	r2,gp,-32768
811035ac:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811035b0:	e0bffd07 	ldb	r2,-12(fp)
811035b4:	10bfefc4 	addi	r2,r2,-65
811035b8:	10c00228 	cmpgeui	r3,r2,8
811035bc:	1800361e 	bne	r3,zero,81103698 <v_SpaceWire_Interface_Link_Control+0x120>
811035c0:	100690ba 	slli	r3,r2,2
811035c4:	00a04434 	movhi	r2,33040
811035c8:	108d7604 	addi	r2,r2,13784
811035cc:	1885883a 	add	r2,r3,r2
811035d0:	10800017 	ldw	r2,0(r2)
811035d4:	1000683a 	jmp	r2
811035d8:	811035f8 	rdprs	r4,r16,16599
811035dc:	8110360c 	andi	r4,r16,16600
811035e0:	81103620 	cmpeqi	r4,r16,16600
811035e4:	81103634 	orhi	r4,r16,16600
811035e8:	81103648 	cmpgei	r4,r16,16601
811035ec:	8110365c 	xori	r4,r16,16601
811035f0:	81103670 	cmpltui	r4,r16,16601
811035f4:	81103684 	addi	r4,r16,16602
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811035f8:	d0a00004 	addi	r2,gp,-32768
811035fc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103600:	00800044 	movi	r2,1
81103604:	e0bffa15 	stw	r2,-24(fp)
			break;
81103608:	00002306 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
8110360c:	d0a00104 	addi	r2,gp,-32764
81103610:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103614:	00800044 	movi	r2,1
81103618:	e0bffa15 	stw	r2,-24(fp)
			break;
8110361c:	00001e06 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81103620:	d0a00204 	addi	r2,gp,-32760
81103624:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103628:	00800044 	movi	r2,1
8110362c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103630:	00001906 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103634:	d0a00304 	addi	r2,gp,-32756
81103638:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110363c:	00800044 	movi	r2,1
81103640:	e0bffa15 	stw	r2,-24(fp)
			break;
81103644:	00001406 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103648:	d0a00404 	addi	r2,gp,-32752
8110364c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103650:	00800044 	movi	r2,1
81103654:	e0bffa15 	stw	r2,-24(fp)
			break;
81103658:	00000f06 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
8110365c:	d0a00504 	addi	r2,gp,-32748
81103660:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103664:	00800044 	movi	r2,1
81103668:	e0bffa15 	stw	r2,-24(fp)
			break;
8110366c:	00000a06 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81103670:	d0a00604 	addi	r2,gp,-32744
81103674:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103678:	00800044 	movi	r2,1
8110367c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103680:	00000506 	br	81103698 <v_SpaceWire_Interface_Link_Control+0x120>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81103684:	d0a00704 	addi	r2,gp,-32740
81103688:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110368c:	00800044 	movi	r2,1
81103690:	e0bffa15 	stw	r2,-24(fp)
			break;
81103694:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
81103698:	e0bffa17 	ldw	r2,-24(fp)
8110369c:	10800058 	cmpnei	r2,r2,1
811036a0:	10002b1e 	bne	r2,zero,81103750 <v_SpaceWire_Interface_Link_Control+0x1d8>
811036a4:	e0ffff17 	ldw	r3,-4(fp)
811036a8:	e0bffc17 	ldw	r2,-16(fp)
811036ac:	1884703a 	and	r2,r3,r2
811036b0:	10002726 	beq	r2,zero,81103750 <v_SpaceWire_Interface_Link_Control+0x1d8>
			switch (uc_RegisterOperation){
811036b4:	e0bffe03 	ldbu	r2,-8(fp)
811036b8:	10000326 	beq	r2,zero,811036c8 <v_SpaceWire_Interface_Link_Control+0x150>
811036bc:	10800060 	cmpeqi	r2,r2,1
811036c0:	1000121e 	bne	r2,zero,8110370c <v_SpaceWire_Interface_Link_Control+0x194>
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
811036c4:	00002306 	br	81103754 <v_SpaceWire_Interface_Link_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_ControlMask & ul_spwc_mask) != 0)){
			switch (uc_RegisterOperation){

				case SPWC_REG_CLEAR:
					*ul_spwc_spacewire_link_control_status_register_value &= ~ul_ControlMask;
811036c8:	e0bffb17 	ldw	r2,-20(fp)
811036cc:	10c00017 	ldw	r3,0(r2)
811036d0:	e0bfff17 	ldw	r2,-4(fp)
811036d4:	0084303a 	nor	r2,zero,r2
811036d8:	1886703a 	and	r3,r3,r2
811036dc:	e0bffb17 	ldw	r2,-20(fp)
811036e0:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
811036e4:	e0fffd07 	ldb	r3,-12(fp)
811036e8:	e0bffb17 	ldw	r2,-20(fp)
811036ec:	10800017 	ldw	r2,0(r2)
811036f0:	100d883a 	mov	r6,r2
811036f4:	01400044 	movi	r5,1
811036f8:	1809883a 	mov	r4,r3
811036fc:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103700:	00800044 	movi	r2,1
81103704:	e0bffa15 	stw	r2,-24(fp)
				break;
81103708:	00001006 	br	8110374c <v_SpaceWire_Interface_Link_Control+0x1d4>

				case SPWC_REG_SET:
					*ul_spwc_spacewire_link_control_status_register_value |= ul_ControlMask;
8110370c:	e0bffb17 	ldw	r2,-20(fp)
81103710:	10c00017 	ldw	r3,0(r2)
81103714:	e0bfff17 	ldw	r2,-4(fp)
81103718:	1886b03a 	or	r3,r3,r2
8110371c:	e0bffb17 	ldw	r2,-20(fp)
81103720:	10c00015 	stw	r3,0(r2)
					SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103724:	e0fffd07 	ldb	r3,-12(fp)
81103728:	e0bffb17 	ldw	r2,-20(fp)
8110372c:	10800017 	ldw	r2,0(r2)
81103730:	100d883a 	mov	r6,r2
81103734:	01400044 	movi	r5,1
81103738:	1809883a 	mov	r4,r3
8110373c:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					bSuccess = TRUE;
81103740:	00800044 	movi	r2,1
81103744:	e0bffa15 	stw	r2,-24(fp)
				break;
81103748:	0001883a 	nop

			}
		} else {
8110374c:	00000106 	br	81103754 <v_SpaceWire_Interface_Link_Control+0x1dc>
			bSuccess = FALSE;
81103750:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103754:	e0bffa17 	ldw	r2,-24(fp)
	}
81103758:	e037883a 	mov	sp,fp
8110375c:	dfc00117 	ldw	ra,4(sp)
81103760:	df000017 	ldw	fp,0(sp)
81103764:	dec00204 	addi	sp,sp,8
81103768:	f800283a 	ret

8110376c <ul_SpaceWire_Interface_Link_Error_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Error_Read(char c_SpwID){
8110376c:	defffb04 	addi	sp,sp,-20
81103770:	dfc00415 	stw	ra,16(sp)
81103774:	df000315 	stw	fp,12(sp)
81103778:	df000304 	addi	fp,sp,12
8110377c:	2005883a 	mov	r2,r4
81103780:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_DISCONNECT_ERROR_BIT_MASK | SPWC_LINK_PARITY_ERROR_BIT_MASK | SPWC_LINK_ESCAPE_ERROR_BIT_MASK | SPWC_LINK_CREDIT_ERROR_BIT_MASK;
81103784:	00801e04 	movi	r2,120
81103788:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_error_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
8110378c:	e0bfff07 	ldb	r2,-4(fp)
81103790:	01400044 	movi	r5,1
81103794:	1009883a 	mov	r4,r2
81103798:	11029a80 	call	811029a8 <SPWC_READ_REG32>
8110379c:	1007883a 	mov	r3,r2
811037a0:	e0bffd17 	ldw	r2,-12(fp)
811037a4:	1884703a 	and	r2,r3,r2
811037a8:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_error_value;
811037ac:	e0bffe17 	ldw	r2,-8(fp)
	}
811037b0:	e037883a 	mov	sp,fp
811037b4:	dfc00117 	ldw	ra,4(sp)
811037b8:	df000017 	ldw	fp,0(sp)
811037bc:	dec00204 	addi	sp,sp,8
811037c0:	f800283a 	ret

811037c4 <ul_SpaceWire_Interface_Link_Status_Read>:

	alt_u32 ul_SpaceWire_Interface_Link_Status_Read(char c_SpwID){
811037c4:	defffb04 	addi	sp,sp,-20
811037c8:	dfc00415 	stw	ra,16(sp)
811037cc:	df000315 	stw	fp,12(sp)
811037d0:	df000304 	addi	fp,sp,12
811037d4:	2005883a 	mov	r2,r4
811037d8:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_LINK_STARTED_STATUS_BIT_MASK | SPWC_LINK_CONNECTING_STATUS_BIT_MASK | SPWC_LINK_RUNNING_STATUS_BIT_MASK;
811037dc:	008001c4 	movi	r2,7
811037e0:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_spwc_link_status_value = SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask;
811037e4:	e0bfff07 	ldb	r2,-4(fp)
811037e8:	01400044 	movi	r5,1
811037ec:	1009883a 	mov	r4,r2
811037f0:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811037f4:	1007883a 	mov	r3,r2
811037f8:	e0bffd17 	ldw	r2,-12(fp)
811037fc:	1884703a 	and	r2,r3,r2
81103800:	e0bffe15 	stw	r2,-8(fp)

		return ul_spwc_link_status_value;
81103804:	e0bffe17 	ldw	r2,-8(fp)
	}
81103808:	e037883a 	mov	sp,fp
8110380c:	dfc00117 	ldw	ra,4(sp)
81103810:	df000017 	ldw	fp,0(sp)
81103814:	dec00204 	addi	sp,sp,8
81103818:	f800283a 	ret

8110381c <v_SpaceWire_Interface_Send_TimeCode>:

	void v_SpaceWire_Interface_Send_TimeCode(char c_SpwID, alt_u8 TimeCode){
8110381c:	defffb04 	addi	sp,sp,-20
81103820:	dfc00415 	stw	ra,16(sp)
81103824:	df000315 	stw	fp,12(sp)
81103828:	df000304 	addi	fp,sp,12
8110382c:	2007883a 	mov	r3,r4
81103830:	2805883a 	mov	r2,r5
81103834:	e0fffe05 	stb	r3,-8(fp)
81103838:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = (((alt_u32)TimeCode) << 1) | SPWC_TX_TIMECODE_CONTROL_BIT_MASK;
8110383c:	e0bfff03 	ldbu	r2,-4(fp)
81103840:	1085883a 	add	r2,r2,r2
81103844:	10800054 	ori	r2,r2,1
81103848:	e0bffd15 	stw	r2,-12(fp)
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, ul_spwc_mask);
8110384c:	e0bffe07 	ldb	r2,-8(fp)
81103850:	e1bffd17 	ldw	r6,-12(fp)
81103854:	01400084 	movi	r5,2
81103858:	1009883a 	mov	r4,r2
8110385c:	11028800 	call	81102880 <SPWC_WRITE_REG32>

	}
81103860:	0001883a 	nop
81103864:	e037883a 	mov	sp,fp
81103868:	dfc00117 	ldw	ra,4(sp)
8110386c:	df000017 	ldw	fp,0(sp)
81103870:	dec00204 	addi	sp,sp,8
81103874:	f800283a 	ret

81103878 <b_SpaceWire_Interface_TimeCode_Arrived>:

	bool b_SpaceWire_Interface_TimeCode_Arrived(char c_SpwID){
81103878:	defffc04 	addi	sp,sp,-16
8110387c:	dfc00315 	stw	ra,12(sp)
81103880:	df000215 	stw	fp,8(sp)
81103884:	df000204 	addi	fp,sp,8
81103888:	2005883a 	mov	r2,r4
8110388c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_timecode_arrived = FALSE;
81103890:	e03ffe15 	stw	zero,-8(fp)
		
		if (SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS) & SPWC_RX_TIMECODE_STATUS_BIT_MASK) {
81103894:	e0bfff07 	ldb	r2,-4(fp)
81103898:	01400084 	movi	r5,2
8110389c:	1009883a 	mov	r4,r2
811038a0:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811038a4:	1080006c 	andhi	r2,r2,1
811038a8:	10000226 	beq	r2,zero,811038b4 <b_SpaceWire_Interface_TimeCode_Arrived+0x3c>
			b_timecode_arrived = TRUE;
811038ac:	00800044 	movi	r2,1
811038b0:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_timecode_arrived;
811038b4:	e0bffe17 	ldw	r2,-8(fp)
	}
811038b8:	e037883a 	mov	sp,fp
811038bc:	dfc00117 	ldw	ra,4(sp)
811038c0:	df000017 	ldw	fp,0(sp)
811038c4:	dec00204 	addi	sp,sp,8
811038c8:	f800283a 	ret

811038cc <uc_SpaceWire_Interface_Get_TimeCode>:
	
	alt_u8 uc_SpaceWire_Interface_Get_TimeCode(char c_SpwID){
811038cc:	defffb04 	addi	sp,sp,-20
811038d0:	dfc00415 	stw	ra,16(sp)
811038d4:	df000315 	stw	fp,12(sp)
811038d8:	df000304 	addi	fp,sp,12
811038dc:	2005883a 	mov	r2,r4
811038e0:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_timecode_register = SPWC_READ_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS);
811038e4:	e0bfff07 	ldb	r2,-4(fp)
811038e8:	01400084 	movi	r5,2
811038ec:	1009883a 	mov	r4,r2
811038f0:	11029a80 	call	811029a8 <SPWC_READ_REG32>
811038f4:	e0bffd15 	stw	r2,-12(fp)
		
		alt_u8 uc_timecode_value = (alt_u8)((ul_timecode_register & (SPWC_RX_TIMECODE_CONTROL_BITS_MASK | SPWC_RX_TIMECODE_COUNTER_VALUE_MASK)) >> 17);
811038f8:	e0bffd17 	ldw	r2,-12(fp)
811038fc:	10807fac 	andhi	r2,r2,510
81103900:	1004d47a 	srli	r2,r2,17
81103904:	e0bffe05 	stb	r2,-8(fp)
	
		SPWC_WRITE_REG32(c_SpwID, SPWC_TIMECODE_CONTROL_REGISTER_ADDRESS, (ul_timecode_register | SPWC_RX_TIMECODE_STATUS_BIT_MASK));
81103908:	e0ffff07 	ldb	r3,-4(fp)
8110390c:	e0bffd17 	ldw	r2,-12(fp)
81103910:	10800074 	orhi	r2,r2,1
81103914:	100d883a 	mov	r6,r2
81103918:	01400084 	movi	r5,2
8110391c:	1809883a 	mov	r4,r3
81103920:	11028800 	call	81102880 <SPWC_WRITE_REG32>

		return uc_timecode_value;
81103924:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103928:	e037883a 	mov	sp,fp
8110392c:	dfc00117 	ldw	ra,4(sp)
81103930:	df000017 	ldw	fp,0(sp)
81103934:	dec00204 	addi	sp,sp,8
81103938:	f800283a 	ret

8110393c <uc_SpaceWire_Interface_Get_TX_Div>:

	alt_u8 uc_SpaceWire_Interface_Get_TX_Div(char c_SpwID){
8110393c:	defffb04 	addi	sp,sp,-20
81103940:	dfc00415 	stw	ra,16(sp)
81103944:	df000315 	stw	fp,12(sp)
81103948:	df000304 	addi	fp,sp,12
8110394c:	2005883a 	mov	r2,r4
81103950:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
81103954:	00800134 	movhi	r2,4
81103958:	10bf0004 	addi	r2,r2,-1024
8110395c:	e0bffd15 	stw	r2,-12(fp)
		alt_u8 uc_txdiv_value = (alt_u8)((SPWC_READ_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS) & ul_spwc_mask) >> 10);
81103960:	e0bfff07 	ldb	r2,-4(fp)
81103964:	01400044 	movi	r5,1
81103968:	1009883a 	mov	r4,r2
8110396c:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81103970:	1007883a 	mov	r3,r2
81103974:	e0bffd17 	ldw	r2,-12(fp)
81103978:	1884703a 	and	r2,r3,r2
8110397c:	1004d2ba 	srli	r2,r2,10
81103980:	e0bffe05 	stb	r2,-8(fp)

		return uc_txdiv_value;
81103984:	e0bffe03 	ldbu	r2,-8(fp)
	}
81103988:	e037883a 	mov	sp,fp
8110398c:	dfc00117 	ldw	ra,4(sp)
81103990:	df000017 	ldw	fp,0(sp)
81103994:	dec00204 	addi	sp,sp,8
81103998:	f800283a 	ret

8110399c <b_SpaceWire_Interface_Set_TX_Div>:

	bool b_SpaceWire_Interface_Set_TX_Div(char c_SpwID, alt_u8 uc_TxDiv){
8110399c:	defff804 	addi	sp,sp,-32
811039a0:	dfc00715 	stw	ra,28(sp)
811039a4:	df000615 	stw	fp,24(sp)
811039a8:	df000604 	addi	fp,sp,24
811039ac:	2007883a 	mov	r3,r4
811039b0:	2805883a 	mov	r2,r5
811039b4:	e0fffe05 	stb	r3,-8(fp)
811039b8:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
811039bc:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_spwc_mask = SPWC_TX_CLOCK_DIVISOR_VALUE_MASK;
811039c0:	00800134 	movhi	r2,4
811039c4:	10bf0004 	addi	r2,r2,-1024
811039c8:	e0bffc15 	stw	r2,-16(fp)
		const alt_u32 ul_txdiv_mask = (alt_u32)(uc_TxDiv << 10);
811039cc:	e0bfff03 	ldbu	r2,-4(fp)
811039d0:	100492ba 	slli	r2,r2,10
811039d4:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
811039d8:	d0a00004 	addi	r2,gp,-32768
811039dc:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
811039e0:	e0bffe07 	ldb	r2,-8(fp)
811039e4:	10bfefc4 	addi	r2,r2,-65
811039e8:	10c00228 	cmpgeui	r3,r2,8
811039ec:	1800361e 	bne	r3,zero,81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
811039f0:	100690ba 	slli	r3,r2,2
811039f4:	00a04434 	movhi	r2,33040
811039f8:	108e8204 	addi	r2,r2,14856
811039fc:	1885883a 	add	r2,r3,r2
81103a00:	10800017 	ldw	r2,0(r2)
81103a04:	1000683a 	jmp	r2
81103a08:	81103a28 	cmpgeui	r4,r16,16616
81103a0c:	81103a3c 	xorhi	r4,r16,16616
81103a10:	81103a50 	cmplti	r4,r16,16617
81103a14:	81103a64 	muli	r4,r16,16617
81103a18:	81103a78 	rdprs	r4,r16,16617
81103a1c:	81103a8c 	andi	r4,r16,16618
81103a20:	81103aa0 	cmpeqi	r4,r16,16618
81103a24:	81103ab4 	orhi	r4,r16,16618
			case 'A':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_a_spacewire_link_control_status_register_value;
81103a28:	d0a00004 	addi	r2,gp,-32768
81103a2c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a30:	00800044 	movi	r2,1
81103a34:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a38:	00002306 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'B':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_b_spacewire_link_control_status_register_value;
81103a3c:	d0a00104 	addi	r2,gp,-32764
81103a40:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a44:	00800044 	movi	r2,1
81103a48:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a4c:	00001e06 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'C':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_c_spacewire_link_control_status_register_value;
81103a50:	d0a00204 	addi	r2,gp,-32760
81103a54:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a58:	00800044 	movi	r2,1
81103a5c:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a60:	00001906 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'D':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_d_spacewire_link_control_status_register_value;
81103a64:	d0a00304 	addi	r2,gp,-32756
81103a68:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a6c:	00800044 	movi	r2,1
81103a70:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a74:	00001406 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'E':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_e_spacewire_link_control_status_register_value;
81103a78:	d0a00404 	addi	r2,gp,-32752
81103a7c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a80:	00800044 	movi	r2,1
81103a84:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a88:	00000f06 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'F':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_f_spacewire_link_control_status_register_value;
81103a8c:	d0a00504 	addi	r2,gp,-32748
81103a90:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103a94:	00800044 	movi	r2,1
81103a98:	e0bffa15 	stw	r2,-24(fp)
			break;
81103a9c:	00000a06 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'G':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_g_spacewire_link_control_status_register_value;
81103aa0:	d0a00604 	addi	r2,gp,-32744
81103aa4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103aa8:	00800044 	movi	r2,1
81103aac:	e0bffa15 	stw	r2,-24(fp)
			break;
81103ab0:	00000506 	br	81103ac8 <b_SpaceWire_Interface_Set_TX_Div+0x12c>
			case 'H':
				ul_spwc_spacewire_link_control_status_register_value = &ul_spwc_h_spacewire_link_control_status_register_value;
81103ab4:	d0a00704 	addi	r2,gp,-32740
81103ab8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81103abc:	00800044 	movi	r2,1
81103ac0:	e0bffa15 	stw	r2,-24(fp)
			break;
81103ac4:	0001883a 	nop
		}
		if (bSuccess == TRUE){
81103ac8:	e0bffa17 	ldw	r2,-24(fp)
81103acc:	10800058 	cmpnei	r2,r2,1
81103ad0:	1000171e 	bne	r2,zero,81103b30 <b_SpaceWire_Interface_Set_TX_Div+0x194>
			*ul_spwc_spacewire_link_control_status_register_value &= ~(ul_spwc_mask);
81103ad4:	e0bffb17 	ldw	r2,-20(fp)
81103ad8:	10c00017 	ldw	r3,0(r2)
81103adc:	e0bffc17 	ldw	r2,-16(fp)
81103ae0:	0084303a 	nor	r2,zero,r2
81103ae4:	1886703a 	and	r3,r3,r2
81103ae8:	e0bffb17 	ldw	r2,-20(fp)
81103aec:	10c00015 	stw	r3,0(r2)
			*ul_spwc_spacewire_link_control_status_register_value |= ul_txdiv_mask;
81103af0:	e0bffb17 	ldw	r2,-20(fp)
81103af4:	10c00017 	ldw	r3,0(r2)
81103af8:	e0bffd17 	ldw	r2,-12(fp)
81103afc:	1886b03a 	or	r3,r3,r2
81103b00:	e0bffb17 	ldw	r2,-20(fp)
81103b04:	10c00015 	stw	r3,0(r2)
			SPWC_WRITE_REG32(c_SpwID, SPWC_SPACEWIRE_LINK_CONTROL_STATUS_REGISTER_ADDRESS, *ul_spwc_spacewire_link_control_status_register_value);
81103b08:	e0fffe07 	ldb	r3,-8(fp)
81103b0c:	e0bffb17 	ldw	r2,-20(fp)
81103b10:	10800017 	ldw	r2,0(r2)
81103b14:	100d883a 	mov	r6,r2
81103b18:	01400044 	movi	r5,1
81103b1c:	1809883a 	mov	r4,r3
81103b20:	11028800 	call	81102880 <SPWC_WRITE_REG32>
			bSuccess = TRUE;
81103b24:	00800044 	movi	r2,1
81103b28:	e0bffa15 	stw	r2,-24(fp)
81103b2c:	00000106 	br	81103b34 <b_SpaceWire_Interface_Set_TX_Div+0x198>
		} else {
			bSuccess = FALSE;
81103b30:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
81103b34:	e0bffa17 	ldw	r2,-24(fp)
	}
81103b38:	e037883a 	mov	sp,fp
81103b3c:	dfc00117 	ldw	ra,4(sp)
81103b40:	df000017 	ldw	fp,0(sp)
81103b44:	dec00204 	addi	sp,sp,8
81103b48:	f800283a 	ret

81103b4c <b_SpaceWire_Interface_Write_TX_Data>:

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){
81103b4c:	defffa04 	addi	sp,sp,-24
81103b50:	dfc00515 	stw	ra,20(sp)
81103b54:	df000415 	stw	fp,16(sp)
81103b58:	df000404 	addi	fp,sp,16
81103b5c:	2807883a 	mov	r3,r5
81103b60:	3005883a 	mov	r2,r6
81103b64:	e13ffd05 	stb	r4,-12(fp)
81103b68:	e0fffe05 	stb	r3,-8(fp)
81103b6c:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81103b70:	e03ffc15 	stw	zero,-16(fp)
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
81103b74:	e0bffd07 	ldb	r2,-12(fp)
81103b78:	014000c4 	movi	r5,3
81103b7c:	1009883a 	mov	r4,r2
81103b80:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81103b84:	1081000c 	andi	r2,r2,1024
81103b88:	10000c26 	beq	r2,zero,81103bbc <b_SpaceWire_Interface_Write_TX_Data+0x70>
			SPWC_WRITE_REG32(c_SpwID,
81103b8c:	e13ffd07 	ldb	r4,-12(fp)
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
81103b90:	e0bffe03 	ldbu	r2,-8(fp)
81103b94:	1080004c 	andi	r2,r2,1
81103b98:	1004923a 	slli	r2,r2,8
81103b9c:	10c08014 	ori	r3,r2,512
81103ba0:	e0bfff03 	ldbu	r2,-4(fp)
81103ba4:	1884b03a 	or	r2,r3,r2

	bool b_SpaceWire_Interface_Write_TX_Data(char c_SpwID, alt_u8 uc_TxFlag, alt_u8 uc_TxData){

		bool bSuccess = FALSE;
		if (SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS) & SPWC_TX_CODEC_TX_READY_STATUS_BIT_MASK) {
			SPWC_WRITE_REG32(c_SpwID,
81103ba8:	100d883a 	mov	r6,r2
81103bac:	014000c4 	movi	r5,3
81103bb0:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_TX_CODEC_TX_WRITE_CONTROL_BIT_MASK | ((uc_TxFlag & 0x01) << 8) | uc_TxData));
			bSuccess = TRUE;
81103bb4:	00800044 	movi	r2,1
81103bb8:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81103bbc:	e0bffc17 	ldw	r2,-16(fp)
	}
81103bc0:	e037883a 	mov	sp,fp
81103bc4:	dfc00117 	ldw	ra,4(sp)
81103bc8:	df000017 	ldw	fp,0(sp)
81103bcc:	dec00204 	addi	sp,sp,8
81103bd0:	f800283a 	ret

81103bd4 <b_SpaceWire_Interface_Send_SpaceWire_Data>:

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81103bd4:	defff904 	addi	sp,sp,-28
81103bd8:	dfc00615 	stw	ra,24(sp)
81103bdc:	df000515 	stw	fp,20(sp)
81103be0:	df000504 	addi	fp,sp,20
81103be4:	2007883a 	mov	r3,r4
81103be8:	e17ffe15 	stw	r5,-8(fp)
81103bec:	3005883a 	mov	r2,r6
81103bf0:	e0fffd05 	stb	r3,-12(fp)
81103bf4:	e0bfff0d 	sth	r2,-4(fp)
		bool bSuccess = FALSE;
81103bf8:	e03ffb15 	stw	zero,-20(fp)

		alt_u16 cnt = 0;
81103bfc:	e03ffc0d 	sth	zero,-16(fp)
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103c00:	00000306 	br	81103c10 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x3c>
			cnt++;
81103c04:	e0bffc0b 	ldhu	r2,-16(fp)
81103c08:	10800044 	addi	r2,r2,1
81103c0c:	e0bffc0d 	sth	r2,-16(fp)

	bool b_SpaceWire_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
		bool bSuccess = FALSE;

		alt_u16 cnt = 0;
		while ((b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 0, data_buffer[cnt])) && (cnt < (data_size - 1))) {
81103c10:	e13ffd07 	ldb	r4,-12(fp)
81103c14:	e0bffc0b 	ldhu	r2,-16(fp)
81103c18:	e0fffe17 	ldw	r3,-8(fp)
81103c1c:	1885883a 	add	r2,r3,r2
81103c20:	10800003 	ldbu	r2,0(r2)
81103c24:	10803fcc 	andi	r2,r2,255
81103c28:	100d883a 	mov	r6,r2
81103c2c:	000b883a 	mov	r5,zero
81103c30:	1103b4c0 	call	81103b4c <b_SpaceWire_Interface_Write_TX_Data>
81103c34:	10000426 	beq	r2,zero,81103c48 <b_SpaceWire_Interface_Send_SpaceWire_Data+0x74>
81103c38:	e0fffc0b 	ldhu	r3,-16(fp)
81103c3c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c40:	10bfffc4 	addi	r2,r2,-1
81103c44:	18bfef16 	blt	r3,r2,81103c04 <__reset+0xfb0e3c04>
			cnt++;
		}
		if (cnt == (data_size - 1)) {
81103c48:	e0fffc0b 	ldhu	r3,-16(fp)
81103c4c:	e0bfff0b 	ldhu	r2,-4(fp)
81103c50:	10bfffc4 	addi	r2,r2,-1
81103c54:	1880081e 	bne	r3,r2,81103c78 <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
			if (b_SpaceWire_Interface_Write_TX_Data(c_SpwID, 1, 0)){
81103c58:	e0bffd07 	ldb	r2,-12(fp)
81103c5c:	000d883a 	mov	r6,zero
81103c60:	01400044 	movi	r5,1
81103c64:	1009883a 	mov	r4,r2
81103c68:	1103b4c0 	call	81103b4c <b_SpaceWire_Interface_Write_TX_Data>
81103c6c:	10000226 	beq	r2,zero,81103c78 <b_SpaceWire_Interface_Send_SpaceWire_Data+0xa4>
				bSuccess = TRUE;
81103c70:	00800044 	movi	r2,1
81103c74:	e0bffb15 	stw	r2,-20(fp)
			}
		}

		return bSuccess;
81103c78:	e0bffb17 	ldw	r2,-20(fp)
	}
81103c7c:	e037883a 	mov	sp,fp
81103c80:	dfc00117 	ldw	ra,4(sp)
81103c84:	df000017 	ldw	fp,0(sp)
81103c88:	dec00204 	addi	sp,sp,8
81103c8c:	f800283a 	ret

81103c90 <b_SpaceWire_Interface_Read_RX_Data>:

	bool b_SpaceWire_Interface_Read_RX_Data(char c_SpwID, alt_u8 *uc_RxFlag, alt_u8 *uc_RxData){
81103c90:	defff904 	addi	sp,sp,-28
81103c94:	dfc00615 	stw	ra,24(sp)
81103c98:	df000515 	stw	fp,20(sp)
81103c9c:	df000504 	addi	fp,sp,20
81103ca0:	2005883a 	mov	r2,r4
81103ca4:	e17ffe15 	stw	r5,-8(fp)
81103ca8:	e1bfff15 	stw	r6,-4(fp)
81103cac:	e0bffd05 	stb	r2,-12(fp)

		bool bSuccess = FALSE;
81103cb0:	e03ffb15 	stw	zero,-20(fp)
		alt_u32 backdoor_register = 0;
81103cb4:	e03ffc15 	stw	zero,-16(fp)

		backdoor_register = SPWC_READ_REG32(c_SpwID, SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS);
81103cb8:	e0bffd07 	ldb	r2,-12(fp)
81103cbc:	014000c4 	movi	r5,3
81103cc0:	1009883a 	mov	r4,r2
81103cc4:	11029a80 	call	811029a8 <SPWC_READ_REG32>
81103cc8:	e0bffc15 	stw	r2,-16(fp)
		if (backdoor_register & SPWC_RX_CODEC_RX_DATAVALID_STATUS_BIT_MASK) {
81103ccc:	e0bffc17 	ldw	r2,-16(fp)
81103cd0:	1081002c 	andhi	r2,r2,1024
81103cd4:	10001326 	beq	r2,zero,81103d24 <b_SpaceWire_Interface_Read_RX_Data+0x94>

			*uc_RxFlag = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_FLAG_VALUE_MASK) >> 24);
81103cd8:	e0bffc17 	ldw	r2,-16(fp)
81103cdc:	1080402c 	andhi	r2,r2,256
81103ce0:	1004d63a 	srli	r2,r2,24
81103ce4:	1007883a 	mov	r3,r2
81103ce8:	e0bffe17 	ldw	r2,-8(fp)
81103cec:	10c00005 	stb	r3,0(r2)
			*uc_RxData = (alt_u8)((backdoor_register & SPWC_RX_CODEC_SPACEWIRE_DATA_VALUE_MASK) >> 16);
81103cf0:	e0bffc17 	ldw	r2,-16(fp)
81103cf4:	10803fec 	andhi	r2,r2,255
81103cf8:	1004d43a 	srli	r2,r2,16
81103cfc:	1007883a 	mov	r3,r2
81103d00:	e0bfff17 	ldw	r2,-4(fp)
81103d04:	10c00005 	stb	r3,0(r2)

			SPWC_WRITE_REG32(c_SpwID,
81103d08:	e0bffd07 	ldb	r2,-12(fp)
81103d0c:	01808034 	movhi	r6,512
81103d10:	014000c4 	movi	r5,3
81103d14:	1009883a 	mov	r4,r2
81103d18:	11028800 	call	81102880 <SPWC_WRITE_REG32>
					         SPWC_BACKDOOR_CONTROL_REGISTER_ADDRESS,
					         (alt_u32)(SPWC_RX_CODEC_RX_READ_CONTROL_BIT_MASK));
			bSuccess = TRUE;
81103d1c:	00800044 	movi	r2,1
81103d20:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81103d24:	e0bffb17 	ldw	r2,-20(fp)
	}
81103d28:	e037883a 	mov	sp,fp
81103d2c:	dfc00117 	ldw	ra,4(sp)
81103d30:	df000017 	ldw	fp,0(sp)
81103d34:	dec00204 	addi	sp,sp,8
81103d38:	f800283a 	ret

81103d3c <ui_SpaceWire_Interface_Get_SpaceWire_Data>:

	alt_u16 ui_SpaceWire_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 buffer_size){
81103d3c:	defffa04 	addi	sp,sp,-24
81103d40:	dfc00515 	stw	ra,20(sp)
81103d44:	df000415 	stw	fp,16(sp)
81103d48:	df000404 	addi	fp,sp,16
81103d4c:	2007883a 	mov	r3,r4
81103d50:	e17ffe15 	stw	r5,-8(fp)
81103d54:	3005883a 	mov	r2,r6
81103d58:	e0fffd05 	stb	r3,-12(fp)
81103d5c:	e0bfff0d 	sth	r2,-4(fp)

		alt_u16 ui_rx_data_size = 0;
81103d60:	e03ffc0d 	sth	zero,-16(fp)

		alt_u8 spw_flag = 0;
81103d64:	e03ffc85 	stb	zero,-14(fp)
		alt_u8 spw_data = 0;
81103d68:	e03ffcc5 	stb	zero,-13(fp)

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103d6c:	00000b06 	br	81103d9c <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
			if (spw_flag == 0) {
81103d70:	e0bffc83 	ldbu	r2,-14(fp)
81103d74:	10803fcc 	andi	r2,r2,255
81103d78:	1000081e 	bne	r2,zero,81103d9c <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x60>
				data_buffer[ui_rx_data_size] = spw_data;
81103d7c:	e0bffc0b 	ldhu	r2,-16(fp)
81103d80:	e0fffe17 	ldw	r3,-8(fp)
81103d84:	1885883a 	add	r2,r3,r2
81103d88:	e0fffcc3 	ldbu	r3,-13(fp)
81103d8c:	10c00005 	stb	r3,0(r2)
				ui_rx_data_size++;
81103d90:	e0bffc0b 	ldhu	r2,-16(fp)
81103d94:	10800044 	addi	r2,r2,1
81103d98:	e0bffc0d 	sth	r2,-16(fp)
		alt_u16 ui_rx_data_size = 0;

		alt_u8 spw_flag = 0;
		alt_u8 spw_data = 0;

		while ((b_SpaceWire_Interface_Read_RX_Data(c_SpwID, &spw_flag, &spw_data)) && (ui_rx_data_size < (buffer_size - 1))) {
81103d9c:	e0bffd07 	ldb	r2,-12(fp)
81103da0:	e13ffcc4 	addi	r4,fp,-13
81103da4:	e0fffc84 	addi	r3,fp,-14
81103da8:	200d883a 	mov	r6,r4
81103dac:	180b883a 	mov	r5,r3
81103db0:	1009883a 	mov	r4,r2
81103db4:	1103c900 	call	81103c90 <b_SpaceWire_Interface_Read_RX_Data>
81103db8:	10000426 	beq	r2,zero,81103dcc <ui_SpaceWire_Interface_Get_SpaceWire_Data+0x90>
81103dbc:	e0fffc0b 	ldhu	r3,-16(fp)
81103dc0:	e0bfff0b 	ldhu	r2,-4(fp)
81103dc4:	10bfffc4 	addi	r2,r2,-1
81103dc8:	18bfe916 	blt	r3,r2,81103d70 <__reset+0xfb0e3d70>
				data_buffer[ui_rx_data_size] = spw_data;
				ui_rx_data_size++;
			}
		}

		return ui_rx_data_size;
81103dcc:	e0bffc0b 	ldhu	r2,-16(fp)
	}
81103dd0:	e037883a 	mov	sp,fp
81103dd4:	dfc00117 	ldw	ra,4(sp)
81103dd8:	df000017 	ldw	fp,0(sp)
81103ddc:	dec00204 	addi	sp,sp,8
81103de0:	f800283a 	ret

81103de4 <TRAN_WRITE_REG32>:
	alt_u32 ul_tran_e_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_f_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_g_interface_control_status_register_value = 0x00000000;
	alt_u32 ul_tran_h_interface_control_status_register_value = 0x00000000;

	void TRAN_WRITE_REG32(char c_SpwID, alt_u8 RegisterOffset, alt_u32 RegisterValue){
81103de4:	defffb04 	addi	sp,sp,-20
81103de8:	df000415 	stw	fp,16(sp)
81103dec:	df000404 	addi	fp,sp,16
81103df0:	2007883a 	mov	r3,r4
81103df4:	2805883a 	mov	r2,r5
81103df8:	e1bfff15 	stw	r6,-4(fp)
81103dfc:	e0fffd05 	stb	r3,-12(fp)
81103e00:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103e04:	00a04834 	movhi	r2,33056
81103e08:	108e0004 	addi	r2,r2,14336
81103e0c:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103e10:	e0bffd07 	ldb	r2,-12(fp)
81103e14:	10bfefc4 	addi	r2,r2,-65
81103e18:	10c00228 	cmpgeui	r3,r2,8
81103e1c:	18002e1e 	bne	r3,zero,81103ed8 <TRAN_WRITE_REG32+0xf4>
81103e20:	100690ba 	slli	r3,r2,2
81103e24:	00a04434 	movhi	r2,33040
81103e28:	108f8e04 	addi	r2,r2,15928
81103e2c:	1885883a 	add	r2,r3,r2
81103e30:	10800017 	ldw	r2,0(r2)
81103e34:	1000683a 	jmp	r2
81103e38:	81103e58 	cmpnei	r4,r16,16633
81103e3c:	81103e68 	cmpgeui	r4,r16,16633
81103e40:	81103e78 	rdprs	r4,r16,16633
81103e44:	81103e88 	cmpgei	r4,r16,16634
81103e48:	81103e98 	cmpnei	r4,r16,16634
81103e4c:	81103ea8 	cmpgeui	r4,r16,16634
81103e50:	81103eb8 	rdprs	r4,r16,16634
81103e54:	81103ec8 	cmpgei	r4,r16,16635
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103e58:	00a04834 	movhi	r2,33056
81103e5c:	108e0004 	addi	r2,r2,14336
81103e60:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e64:	00001c06 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81103e68:	00a04834 	movhi	r2,33056
81103e6c:	108d0004 	addi	r2,r2,13312
81103e70:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e74:	00001806 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81103e78:	00a04834 	movhi	r2,33056
81103e7c:	108c0004 	addi	r2,r2,12288
81103e80:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e84:	00001406 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81103e88:	00a04834 	movhi	r2,33056
81103e8c:	108b0004 	addi	r2,r2,11264
81103e90:	e0bffc15 	stw	r2,-16(fp)
			break;
81103e94:	00001006 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81103e98:	00a04834 	movhi	r2,33056
81103e9c:	108a0004 	addi	r2,r2,10240
81103ea0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ea4:	00000c06 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81103ea8:	00a04834 	movhi	r2,33056
81103eac:	10890004 	addi	r2,r2,9216
81103eb0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103eb4:	00000806 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81103eb8:	00a04834 	movhi	r2,33056
81103ebc:	10880004 	addi	r2,r2,8192
81103ec0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ec4:	00000406 	br	81103ed8 <TRAN_WRITE_REG32+0xf4>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81103ec8:	00a04834 	movhi	r2,33056
81103ecc:	10870004 	addi	r2,r2,7168
81103ed0:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ed4:	0001883a 	nop
		}
		*(pTranAddr + (alt_u32)RegisterOffset) = (alt_u32) RegisterValue;
81103ed8:	e0bffe03 	ldbu	r2,-8(fp)
81103edc:	1085883a 	add	r2,r2,r2
81103ee0:	1085883a 	add	r2,r2,r2
81103ee4:	1007883a 	mov	r3,r2
81103ee8:	e0bffc17 	ldw	r2,-16(fp)
81103eec:	10c5883a 	add	r2,r2,r3
81103ef0:	e0ffff17 	ldw	r3,-4(fp)
81103ef4:	10c00015 	stw	r3,0(r2)
	}
81103ef8:	0001883a 	nop
81103efc:	e037883a 	mov	sp,fp
81103f00:	df000017 	ldw	fp,0(sp)
81103f04:	dec00104 	addi	sp,sp,4
81103f08:	f800283a 	ret

81103f0c <TRAN_READ_REG32>:

	alt_u32 TRAN_READ_REG32(char c_SpwID, alt_u8 RegisterOffset){
81103f0c:	defffb04 	addi	sp,sp,-20
81103f10:	df000415 	stw	fp,16(sp)
81103f14:	df000404 	addi	fp,sp,16
81103f18:	2007883a 	mov	r3,r4
81103f1c:	2805883a 	mov	r2,r5
81103f20:	e0fffe05 	stb	r3,-8(fp)
81103f24:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81103f28:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103f2c:	00a04834 	movhi	r2,33056
81103f30:	108e0004 	addi	r2,r2,14336
81103f34:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81103f38:	e0bffe07 	ldb	r2,-8(fp)
81103f3c:	10bfefc4 	addi	r2,r2,-65
81103f40:	10c00228 	cmpgeui	r3,r2,8
81103f44:	18002e1e 	bne	r3,zero,81104000 <TRAN_READ_REG32+0xf4>
81103f48:	100690ba 	slli	r3,r2,2
81103f4c:	00a04434 	movhi	r2,33040
81103f50:	108fd804 	addi	r2,r2,16224
81103f54:	1885883a 	add	r2,r3,r2
81103f58:	10800017 	ldw	r2,0(r2)
81103f5c:	1000683a 	jmp	r2
81103f60:	81103f80 	call	881103f8 <__reset+0x20f03f8>
81103f64:	81103f90 	cmplti	r4,r16,16638
81103f68:	81103fa0 	cmpeqi	r4,r16,16638
81103f6c:	81103fb0 	cmpltui	r4,r16,16638
81103f70:	81103fc0 	call	881103fc <__reset+0x20f03fc>
81103f74:	81103fd0 	cmplti	r4,r16,16639
81103f78:	81103fe0 	cmpeqi	r4,r16,16639
81103f7c:	81103ff0 	cmpltui	r4,r16,16639
			case 'A':
				pTranAddr = (alt_u32 *)TRAN_A_BASE;
81103f80:	00a04834 	movhi	r2,33056
81103f84:	108e0004 	addi	r2,r2,14336
81103f88:	e0bffc15 	stw	r2,-16(fp)
			break;
81103f8c:	00001c06 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'B':
				pTranAddr = (alt_u32 *)TRAN_B_BASE;
81103f90:	00a04834 	movhi	r2,33056
81103f94:	108d0004 	addi	r2,r2,13312
81103f98:	e0bffc15 	stw	r2,-16(fp)
			break;
81103f9c:	00001806 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'C':
				pTranAddr = (alt_u32 *)TRAN_C_BASE;
81103fa0:	00a04834 	movhi	r2,33056
81103fa4:	108c0004 	addi	r2,r2,12288
81103fa8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fac:	00001406 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'D':
				pTranAddr = (alt_u32 *)TRAN_D_BASE;
81103fb0:	00a04834 	movhi	r2,33056
81103fb4:	108b0004 	addi	r2,r2,11264
81103fb8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fbc:	00001006 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'E':
				pTranAddr = (alt_u32 *)TRAN_E_BASE;
81103fc0:	00a04834 	movhi	r2,33056
81103fc4:	108a0004 	addi	r2,r2,10240
81103fc8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fcc:	00000c06 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'F':
				pTranAddr = (alt_u32 *)TRAN_F_BASE;
81103fd0:	00a04834 	movhi	r2,33056
81103fd4:	10890004 	addi	r2,r2,9216
81103fd8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fdc:	00000806 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'G':
				pTranAddr = (alt_u32 *)TRAN_G_BASE;
81103fe0:	00a04834 	movhi	r2,33056
81103fe4:	10880004 	addi	r2,r2,8192
81103fe8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103fec:	00000406 	br	81104000 <TRAN_READ_REG32+0xf4>
			case 'H':
				pTranAddr = (alt_u32 *)TRAN_H_BASE;
81103ff0:	00a04834 	movhi	r2,33056
81103ff4:	10870004 	addi	r2,r2,7168
81103ff8:	e0bffc15 	stw	r2,-16(fp)
			break;
81103ffc:	0001883a 	nop
		}
		RegisterValue = *(pTranAddr + (alt_u32)RegisterOffset);
81104000:	e0bfff03 	ldbu	r2,-4(fp)
81104004:	1085883a 	add	r2,r2,r2
81104008:	1085883a 	add	r2,r2,r2
8110400c:	1007883a 	mov	r3,r2
81104010:	e0bffc17 	ldw	r2,-16(fp)
81104014:	10c5883a 	add	r2,r2,r3
81104018:	10800017 	ldw	r2,0(r2)
8110401c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81104020:	e0bffd17 	ldw	r2,-12(fp)
	}
81104024:	e037883a 	mov	sp,fp
81104028:	df000017 	ldw	fp,0(sp)
8110402c:	dec00104 	addi	sp,sp,4
81104030:	f800283a 	ret

81104034 <b_Transparent_Interface_Write_Register>:

	bool b_Transparent_Interface_Write_Register(char c_SpwID, alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
81104034:	defffa04 	addi	sp,sp,-24
81104038:	dfc00515 	stw	ra,20(sp)
8110403c:	df000415 	stw	fp,16(sp)
81104040:	df000404 	addi	fp,sp,16
81104044:	2007883a 	mov	r3,r4
81104048:	2805883a 	mov	r2,r5
8110404c:	e1bfff15 	stw	r6,-4(fp)
81104050:	e0fffd05 	stb	r3,-12(fp)
81104054:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104058:	e03ffc15 	stw	zero,-16(fp)

		if (uc_RegisterAddress <= 0x02) {
8110405c:	e0bffe03 	ldbu	r2,-8(fp)
81104060:	108000e8 	cmpgeui	r2,r2,3
81104064:	1000081e 	bne	r2,zero,81104088 <b_Transparent_Interface_Write_Register+0x54>
			TRAN_WRITE_REG32(c_SpwID, uc_RegisterAddress, ul_RegisterValue);
81104068:	e0bffd07 	ldb	r2,-12(fp)
8110406c:	e0fffe03 	ldbu	r3,-8(fp)
81104070:	e1bfff17 	ldw	r6,-4(fp)
81104074:	180b883a 	mov	r5,r3
81104078:	1009883a 	mov	r4,r2
8110407c:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
			bSuccess = TRUE;
81104080:	00800044 	movi	r2,1
81104084:	e0bffc15 	stw	r2,-16(fp)
		}

		return bSuccess;
81104088:	e0bffc17 	ldw	r2,-16(fp)
	}
8110408c:	e037883a 	mov	sp,fp
81104090:	dfc00117 	ldw	ra,4(sp)
81104094:	df000017 	ldw	fp,0(sp)
81104098:	dec00204 	addi	sp,sp,8
8110409c:	f800283a 	ret

811040a0 <ul_Transparent_Interface_Read_Register>:

	alt_u32 ul_Transparent_Interface_Read_Register(char c_SpwID, alt_u8 uc_RegisterAddress){
811040a0:	defffb04 	addi	sp,sp,-20
811040a4:	dfc00415 	stw	ra,16(sp)
811040a8:	df000315 	stw	fp,12(sp)
811040ac:	df000304 	addi	fp,sp,12
811040b0:	2007883a 	mov	r3,r4
811040b4:	2805883a 	mov	r2,r5
811040b8:	e0fffe05 	stb	r3,-8(fp)
811040bc:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
811040c0:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x02) {
811040c4:	e0bfff03 	ldbu	r2,-4(fp)
811040c8:	108000e8 	cmpgeui	r2,r2,3
811040cc:	1000061e 	bne	r2,zero,811040e8 <ul_Transparent_Interface_Read_Register+0x48>
			ul_RegisterValue = TRAN_READ_REG32(c_SpwID, uc_RegisterAddress);
811040d0:	e0bffe07 	ldb	r2,-8(fp)
811040d4:	e0ffff03 	ldbu	r3,-4(fp)
811040d8:	180b883a 	mov	r5,r3
811040dc:	1009883a 	mov	r4,r2
811040e0:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811040e4:	e0bffd15 	stw	r2,-12(fp)
		}

		return ul_RegisterValue;
811040e8:	e0bffd17 	ldw	r2,-12(fp)
	}
811040ec:	e037883a 	mov	sp,fp
811040f0:	dfc00117 	ldw	ra,4(sp)
811040f4:	df000017 	ldw	fp,0(sp)
811040f8:	dec00204 	addi	sp,sp,8
811040fc:	f800283a 	ret

81104100 <v_Transparent_Interface_Enable_Control>:

	bool v_Transparent_Interface_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_EnableMask){
81104100:	defff804 	addi	sp,sp,-32
81104104:	dfc00715 	stw	ra,28(sp)
81104108:	df000615 	stw	fp,24(sp)
8110410c:	df000604 	addi	fp,sp,24
81104110:	2007883a 	mov	r3,r4
81104114:	2805883a 	mov	r2,r5
81104118:	e1bfff15 	stw	r6,-4(fp)
8110411c:	e0fffd05 	stb	r3,-12(fp)
81104120:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104124:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK;
81104128:	0081c004 	movi	r2,1792
8110412c:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104130:	d0a04704 	addi	r2,gp,-32484
81104134:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
81104138:	e0bffd07 	ldb	r2,-12(fp)
8110413c:	10bfefc4 	addi	r2,r2,-65
81104140:	10c00228 	cmpgeui	r3,r2,8
81104144:	1800361e 	bne	r3,zero,81104220 <v_Transparent_Interface_Enable_Control+0x120>
81104148:	100690ba 	slli	r3,r2,2
8110414c:	00a04434 	movhi	r2,33040
81104150:	10905804 	addi	r2,r2,16736
81104154:	1885883a 	add	r2,r3,r2
81104158:	10800017 	ldw	r2,0(r2)
8110415c:	1000683a 	jmp	r2
81104160:	81104180 	call	88110418 <__reset+0x20f0418>
81104164:	81104194 	ori	r4,r16,16646
81104168:	811041a8 	cmpgeui	r4,r16,16646
8110416c:	811041bc 	xorhi	r4,r16,16646
81104170:	811041d0 	cmplti	r4,r16,16647
81104174:	811041e4 	muli	r4,r16,16647
81104178:	811041f8 	rdprs	r4,r16,16647
8110417c:	8110420c 	andi	r4,r16,16648
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104180:	d0a04704 	addi	r2,gp,-32484
81104184:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104188:	00800044 	movi	r2,1
8110418c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104190:	00002306 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104194:	d0a04804 	addi	r2,gp,-32480
81104198:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110419c:	00800044 	movi	r2,1
811041a0:	e0bffa15 	stw	r2,-24(fp)
			break;
811041a4:	00001e06 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
811041a8:	d0a04904 	addi	r2,gp,-32476
811041ac:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041b0:	00800044 	movi	r2,1
811041b4:	e0bffa15 	stw	r2,-24(fp)
			break;
811041b8:	00001906 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811041bc:	d0a04a04 	addi	r2,gp,-32472
811041c0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041c4:	00800044 	movi	r2,1
811041c8:	e0bffa15 	stw	r2,-24(fp)
			break;
811041cc:	00001406 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
811041d0:	d0a04b04 	addi	r2,gp,-32468
811041d4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041d8:	00800044 	movi	r2,1
811041dc:	e0bffa15 	stw	r2,-24(fp)
			break;
811041e0:	00000f06 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
811041e4:	d0a04c04 	addi	r2,gp,-32464
811041e8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811041ec:	00800044 	movi	r2,1
811041f0:	e0bffa15 	stw	r2,-24(fp)
			break;
811041f4:	00000a06 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811041f8:	d0a04d04 	addi	r2,gp,-32460
811041fc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104200:	00800044 	movi	r2,1
81104204:	e0bffa15 	stw	r2,-24(fp)
			break;
81104208:	00000506 	br	81104220 <v_Transparent_Interface_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
8110420c:	d0a04e04 	addi	r2,gp,-32456
81104210:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104214:	00800044 	movi	r2,1
81104218:	e0bffa15 	stw	r2,-24(fp)
			break;
8110421c:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
81104220:	e0bffa17 	ldw	r2,-24(fp)
81104224:	10800058 	cmpnei	r2,r2,1
81104228:	10002b1e 	bne	r2,zero,811042d8 <v_Transparent_Interface_Enable_Control+0x1d8>
8110422c:	e0ffff17 	ldw	r3,-4(fp)
81104230:	e0bffc17 	ldw	r2,-16(fp)
81104234:	1884703a 	and	r2,r3,r2
81104238:	10002726 	beq	r2,zero,811042d8 <v_Transparent_Interface_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
8110423c:	e0bffe03 	ldbu	r2,-8(fp)
81104240:	10000326 	beq	r2,zero,81104250 <v_Transparent_Interface_Enable_Control+0x150>
81104244:	10800060 	cmpeqi	r2,r2,1
81104248:	1000121e 	bne	r2,zero,81104294 <v_Transparent_Interface_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
8110424c:	00002306 	br	811042dc <v_Transparent_Interface_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_EnableMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){
			
				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_EnableMask;
81104250:	e0bffb17 	ldw	r2,-20(fp)
81104254:	10c00017 	ldw	r3,0(r2)
81104258:	e0bfff17 	ldw	r2,-4(fp)
8110425c:	0084303a 	nor	r2,zero,r2
81104260:	1886703a 	and	r3,r3,r2
81104264:	e0bffb17 	ldw	r2,-20(fp)
81104268:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
8110426c:	e0fffd07 	ldb	r3,-12(fp)
81104270:	e0bffb17 	ldw	r2,-20(fp)
81104274:	10800017 	ldw	r2,0(r2)
81104278:	100d883a 	mov	r6,r2
8110427c:	01400804 	movi	r5,32
81104280:	1809883a 	mov	r4,r3
81104284:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
81104288:	00800044 	movi	r2,1
8110428c:	e0bffa15 	stw	r2,-24(fp)
				break;
81104290:	00001006 	br	811042d4 <v_Transparent_Interface_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_EnableMask;
81104294:	e0bffb17 	ldw	r2,-20(fp)
81104298:	10c00017 	ldw	r3,0(r2)
8110429c:	e0bfff17 	ldw	r2,-4(fp)
811042a0:	1886b03a 	or	r3,r3,r2
811042a4:	e0bffb17 	ldw	r2,-20(fp)
811042a8:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
811042ac:	e0fffd07 	ldb	r3,-12(fp)
811042b0:	e0bffb17 	ldw	r2,-20(fp)
811042b4:	10800017 	ldw	r2,0(r2)
811042b8:	100d883a 	mov	r6,r2
811042bc:	01400804 	movi	r5,32
811042c0:	1809883a 	mov	r4,r3
811042c4:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
811042c8:	00800044 	movi	r2,1
811042cc:	e0bffa15 	stw	r2,-24(fp)
				break;
811042d0:	0001883a 	nop

			}
		} else {
811042d4:	00000106 	br	811042dc <v_Transparent_Interface_Enable_Control+0x1dc>
			bSuccess = FALSE;
811042d8:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
811042dc:	e0bffa17 	ldw	r2,-24(fp)
	}
811042e0:	e037883a 	mov	sp,fp
811042e4:	dfc00117 	ldw	ra,4(sp)
811042e8:	df000017 	ldw	fp,0(sp)
811042ec:	dec00204 	addi	sp,sp,8
811042f0:	f800283a 	ret

811042f4 <v_Transparent_Interface_Interrupts_Enable_Control>:

	bool v_Transparent_Interface_Interrupts_Enable_Control(char c_SpwID, alt_u8 uc_RegisterOperation, alt_u32 ul_InterruptMask){
811042f4:	defff804 	addi	sp,sp,-32
811042f8:	dfc00715 	stw	ra,28(sp)
811042fc:	df000615 	stw	fp,24(sp)
81104300:	df000604 	addi	fp,sp,24
81104304:	2007883a 	mov	r3,r4
81104308:	2805883a 	mov	r2,r5
8110430c:	e1bfff15 	stw	r6,-4(fp)
81104310:	e0fffd05 	stb	r3,-12(fp)
81104314:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
81104318:	e03ffa15 	stw	zero,-24(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_ENABLE_BIT_MASK | TRAN_DATA_RECEIVED_INTERRUPT_ENABLE_BIT_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_ENABLE_BIT_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_ENABLE_BIT_MASK;
8110431c:	00803c04 	movi	r2,240
81104320:	e0bffc15 	stw	r2,-16(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104324:	d0a04704 	addi	r2,gp,-32484
81104328:	e0bffb15 	stw	r2,-20(fp)
		switch (c_SpwID) {
8110432c:	e0bffd07 	ldb	r2,-12(fp)
81104330:	10bfefc4 	addi	r2,r2,-65
81104334:	10c00228 	cmpgeui	r3,r2,8
81104338:	1800361e 	bne	r3,zero,81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
8110433c:	100690ba 	slli	r3,r2,2
81104340:	00a04434 	movhi	r2,33040
81104344:	1090d504 	addi	r2,r2,17236
81104348:	1885883a 	add	r2,r3,r2
8110434c:	10800017 	ldw	r2,0(r2)
81104350:	1000683a 	jmp	r2
81104354:	81104374 	orhi	r4,r16,16653
81104358:	81104388 	cmpgei	r4,r16,16654
8110435c:	8110439c 	xori	r4,r16,16654
81104360:	811043b0 	cmpltui	r4,r16,16654
81104364:	811043c4 	addi	r4,r16,16655
81104368:	811043d8 	cmpnei	r4,r16,16655
8110436c:	811043ec 	andhi	r4,r16,16655
81104370:	81104400 	call	88110440 <__reset+0x20f0440>
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104374:	d0a04704 	addi	r2,gp,-32484
81104378:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
8110437c:	00800044 	movi	r2,1
81104380:	e0bffa15 	stw	r2,-24(fp)
			break;
81104384:	00002306 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
81104388:	d0a04804 	addi	r2,gp,-32480
8110438c:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104390:	00800044 	movi	r2,1
81104394:	e0bffa15 	stw	r2,-24(fp)
			break;
81104398:	00001e06 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
8110439c:	d0a04904 	addi	r2,gp,-32476
811043a0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043a4:	00800044 	movi	r2,1
811043a8:	e0bffa15 	stw	r2,-24(fp)
			break;
811043ac:	00001906 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811043b0:	d0a04a04 	addi	r2,gp,-32472
811043b4:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043b8:	00800044 	movi	r2,1
811043bc:	e0bffa15 	stw	r2,-24(fp)
			break;
811043c0:	00001406 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
811043c4:	d0a04b04 	addi	r2,gp,-32468
811043c8:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043cc:	00800044 	movi	r2,1
811043d0:	e0bffa15 	stw	r2,-24(fp)
			break;
811043d4:	00000f06 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
811043d8:	d0a04c04 	addi	r2,gp,-32464
811043dc:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043e0:	00800044 	movi	r2,1
811043e4:	e0bffa15 	stw	r2,-24(fp)
			break;
811043e8:	00000a06 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
811043ec:	d0a04d04 	addi	r2,gp,-32460
811043f0:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
811043f4:	00800044 	movi	r2,1
811043f8:	e0bffa15 	stw	r2,-24(fp)
			break;
811043fc:	00000506 	br	81104414 <v_Transparent_Interface_Interrupts_Enable_Control+0x120>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81104400:	d0a04e04 	addi	r2,gp,-32456
81104404:	e0bffb15 	stw	r2,-20(fp)
				bSuccess = TRUE;
81104408:	00800044 	movi	r2,1
8110440c:	e0bffa15 	stw	r2,-24(fp)
			break;
81104410:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
81104414:	e0bffa17 	ldw	r2,-24(fp)
81104418:	10800058 	cmpnei	r2,r2,1
8110441c:	10002b1e 	bne	r2,zero,811044cc <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
81104420:	e0ffff17 	ldw	r3,-4(fp)
81104424:	e0bffc17 	ldw	r2,-16(fp)
81104428:	1884703a 	and	r2,r3,r2
8110442c:	10002726 	beq	r2,zero,811044cc <v_Transparent_Interface_Interrupts_Enable_Control+0x1d8>
			switch (uc_RegisterOperation){
81104430:	e0bffe03 	ldbu	r2,-8(fp)
81104434:	10000326 	beq	r2,zero,81104444 <v_Transparent_Interface_Interrupts_Enable_Control+0x150>
81104438:	10800060 	cmpeqi	r2,r2,1
8110443c:	1000121e 	bne	r2,zero,81104488 <v_Transparent_Interface_Interrupts_Enable_Control+0x194>
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
					bSuccess = TRUE;
				break;

			}
		} else {
81104440:	00002306 	br	811044d0 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
			switch (uc_RegisterOperation){

				case TRAN_REG_CLEAR:
					*ul_tran_interface_control_status_register_value &= ~ul_InterruptMask;
81104444:	e0bffb17 	ldw	r2,-20(fp)
81104448:	10c00017 	ldw	r3,0(r2)
8110444c:	e0bfff17 	ldw	r2,-4(fp)
81104450:	0084303a 	nor	r2,zero,r2
81104454:	1886703a 	and	r3,r3,r2
81104458:	e0bffb17 	ldw	r2,-20(fp)
8110445c:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
81104460:	e0fffd07 	ldb	r3,-12(fp)
81104464:	e0bffb17 	ldw	r2,-20(fp)
81104468:	10800017 	ldw	r2,0(r2)
8110446c:	100d883a 	mov	r6,r2
81104470:	01400804 	movi	r5,32
81104474:	1809883a 	mov	r4,r3
81104478:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
8110447c:	00800044 	movi	r2,1
81104480:	e0bffa15 	stw	r2,-24(fp)
				break;
81104484:	00001006 	br	811044c8 <v_Transparent_Interface_Interrupts_Enable_Control+0x1d4>

				case TRAN_REG_SET:
					*ul_tran_interface_control_status_register_value |= ul_InterruptMask;
81104488:	e0bffb17 	ldw	r2,-20(fp)
8110448c:	10c00017 	ldw	r3,0(r2)
81104490:	e0bfff17 	ldw	r2,-4(fp)
81104494:	1886b03a 	or	r3,r3,r2
81104498:	e0bffb17 	ldw	r2,-20(fp)
8110449c:	10c00015 	stw	r3,0(r2)
					TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, *ul_tran_interface_control_status_register_value);
811044a0:	e0fffd07 	ldb	r3,-12(fp)
811044a4:	e0bffb17 	ldw	r2,-20(fp)
811044a8:	10800017 	ldw	r2,0(r2)
811044ac:	100d883a 	mov	r6,r2
811044b0:	01400804 	movi	r5,32
811044b4:	1809883a 	mov	r4,r3
811044b8:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
					bSuccess = TRUE;
811044bc:	00800044 	movi	r2,1
811044c0:	e0bffa15 	stw	r2,-24(fp)
				break;
811044c4:	0001883a 	nop

			}
		} else {
811044c8:	00000106 	br	811044d0 <v_Transparent_Interface_Interrupts_Enable_Control+0x1dc>
			bSuccess = FALSE;
811044cc:	e03ffa15 	stw	zero,-24(fp)
		}

		return bSuccess;
811044d0:	e0bffa17 	ldw	r2,-24(fp)
	}
811044d4:	e037883a 	mov	sp,fp
811044d8:	dfc00117 	ldw	ra,4(sp)
811044dc:	df000017 	ldw	fp,0(sp)
811044e0:	dec00204 	addi	sp,sp,8
811044e4:	f800283a 	ret

811044e8 <ul_Transparent_Interface_Interrupts_Flags_Read>:

	alt_u32 ul_Transparent_Interface_Interrupts_Flags_Read(char c_SpwID){
811044e8:	defffb04 	addi	sp,sp,-20
811044ec:	dfc00415 	stw	ra,16(sp)
811044f0:	df000315 	stw	fp,12(sp)
811044f4:	df000304 	addi	fp,sp,12
811044f8:	2005883a 	mov	r2,r4
811044fc:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81104500:	008003c4 	movi	r2,15
81104504:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_interrupts_flags_value = TRAN_READ_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS) & ul_tran_mask;
81104508:	e0bfff07 	ldb	r2,-4(fp)
8110450c:	01400804 	movi	r5,32
81104510:	1009883a 	mov	r4,r2
81104514:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104518:	1007883a 	mov	r3,r2
8110451c:	e0bffd17 	ldw	r2,-12(fp)
81104520:	1884703a 	and	r2,r3,r2
81104524:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_interrupts_flags_value;
81104528:	e0bffe17 	ldw	r2,-8(fp)
	}
8110452c:	e037883a 	mov	sp,fp
81104530:	dfc00117 	ldw	ra,4(sp)
81104534:	df000017 	ldw	fp,0(sp)
81104538:	dec00204 	addi	sp,sp,8
8110453c:	f800283a 	ret

81104540 <v_Transparent_Interface_Interrupts_Flags_Clear>:

	void v_Transparent_Interface_Interrupts_Flags_Clear(char c_SpwID, alt_u32 ul_InterruptMask){
81104540:	defff904 	addi	sp,sp,-28
81104544:	dfc00615 	stw	ra,24(sp)
81104548:	df000515 	stw	fp,20(sp)
8110454c:	df000504 	addi	fp,sp,20
81104550:	2005883a 	mov	r2,r4
81104554:	e17fff15 	stw	r5,-4(fp)
81104558:	e0bffe05 	stb	r2,-8(fp)
		bool bSuccess = FALSE;
8110455c:	e03ffb15 	stw	zero,-20(fp)

		const alt_u32 ul_tran_mask = TRAN_INTERFACE_ERROR_INTERRUPT_FLAG_MASK | TRAN_DATA_RECEIVED_INTERRUPT_FLAG_MASK | TRAN_RX_FIFO_FULL_INTERRUPT_FLAG_MASK | TRAN_TX_FIFO_EMPTY_INTERRUPT_FLAG_MASK;
81104560:	008003c4 	movi	r2,15
81104564:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 *ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
81104568:	d0a04704 	addi	r2,gp,-32484
8110456c:	e0bffc15 	stw	r2,-16(fp)
		switch (c_SpwID) {
81104570:	e0bffe07 	ldb	r2,-8(fp)
81104574:	10bfefc4 	addi	r2,r2,-65
81104578:	10c00228 	cmpgeui	r3,r2,8
8110457c:	1800361e 	bne	r3,zero,81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
81104580:	100690ba 	slli	r3,r2,2
81104584:	00a04434 	movhi	r2,33040
81104588:	10916604 	addi	r2,r2,17816
8110458c:	1885883a 	add	r2,r3,r2
81104590:	10800017 	ldw	r2,0(r2)
81104594:	1000683a 	jmp	r2
81104598:	811045b8 	rdprs	r4,r16,16662
8110459c:	811045cc 	andi	r4,r16,16663
811045a0:	811045e0 	cmpeqi	r4,r16,16663
811045a4:	811045f4 	orhi	r4,r16,16663
811045a8:	81104608 	cmpgei	r4,r16,16664
811045ac:	8110461c 	xori	r4,r16,16664
811045b0:	81104630 	cmpltui	r4,r16,16664
811045b4:	81104644 	addi	r4,r16,16665
			case 'A':
				ul_tran_interface_control_status_register_value = &ul_tran_a_interface_control_status_register_value;
811045b8:	d0a04704 	addi	r2,gp,-32484
811045bc:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045c0:	00800044 	movi	r2,1
811045c4:	e0bffb15 	stw	r2,-20(fp)
			break;
811045c8:	00002306 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'B':
				ul_tran_interface_control_status_register_value = &ul_tran_b_interface_control_status_register_value;
811045cc:	d0a04804 	addi	r2,gp,-32480
811045d0:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045d4:	00800044 	movi	r2,1
811045d8:	e0bffb15 	stw	r2,-20(fp)
			break;
811045dc:	00001e06 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'C':
				ul_tran_interface_control_status_register_value = &ul_tran_c_interface_control_status_register_value;
811045e0:	d0a04904 	addi	r2,gp,-32476
811045e4:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045e8:	00800044 	movi	r2,1
811045ec:	e0bffb15 	stw	r2,-20(fp)
			break;
811045f0:	00001906 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'D':
				ul_tran_interface_control_status_register_value = &ul_tran_d_interface_control_status_register_value;
811045f4:	d0a04a04 	addi	r2,gp,-32472
811045f8:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
811045fc:	00800044 	movi	r2,1
81104600:	e0bffb15 	stw	r2,-20(fp)
			break;
81104604:	00001406 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'E':
				ul_tran_interface_control_status_register_value = &ul_tran_e_interface_control_status_register_value;
81104608:	d0a04b04 	addi	r2,gp,-32468
8110460c:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104610:	00800044 	movi	r2,1
81104614:	e0bffb15 	stw	r2,-20(fp)
			break;
81104618:	00000f06 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'F':
				ul_tran_interface_control_status_register_value = &ul_tran_f_interface_control_status_register_value;
8110461c:	d0a04c04 	addi	r2,gp,-32464
81104620:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104624:	00800044 	movi	r2,1
81104628:	e0bffb15 	stw	r2,-20(fp)
			break;
8110462c:	00000a06 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'G':
				ul_tran_interface_control_status_register_value = &ul_tran_g_interface_control_status_register_value;
81104630:	d0a04d04 	addi	r2,gp,-32460
81104634:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
81104638:	00800044 	movi	r2,1
8110463c:	e0bffb15 	stw	r2,-20(fp)
			break;
81104640:	00000506 	br	81104658 <v_Transparent_Interface_Interrupts_Flags_Clear+0x118>
			case 'H':
				ul_tran_interface_control_status_register_value = &ul_tran_h_interface_control_status_register_value;
81104644:	d0a04e04 	addi	r2,gp,-32456
81104648:	e0bffc15 	stw	r2,-16(fp)
				bSuccess = TRUE;
8110464c:	00800044 	movi	r2,1
81104650:	e0bffb15 	stw	r2,-20(fp)
			break;
81104654:	0001883a 	nop
		}
		if ((bSuccess == TRUE) && ((ul_InterruptMask & ul_tran_mask) != 0)){
81104658:	e0bffb17 	ldw	r2,-20(fp)
8110465c:	10800058 	cmpnei	r2,r2,1
81104660:	10000d1e 	bne	r2,zero,81104698 <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
81104664:	e0ffff17 	ldw	r3,-4(fp)
81104668:	e0bffd17 	ldw	r2,-12(fp)
8110466c:	1884703a 	and	r2,r3,r2
81104670:	10000926 	beq	r2,zero,81104698 <v_Transparent_Interface_Interrupts_Flags_Clear+0x158>
			TRAN_WRITE_REG32(c_SpwID, TRAN_INTERFACE_CONTROL_STATUS_REGISTER_ADDRESS, (*ul_tran_interface_control_status_register_value | ul_InterruptMask));
81104674:	e13ffe07 	ldb	r4,-8(fp)
81104678:	e0bffc17 	ldw	r2,-16(fp)
8110467c:	10c00017 	ldw	r3,0(r2)
81104680:	e0bfff17 	ldw	r2,-4(fp)
81104684:	1884b03a 	or	r2,r3,r2
81104688:	100d883a 	mov	r6,r2
8110468c:	01400804 	movi	r5,32
81104690:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>
81104694:	00000106 	br	8110469c <v_Transparent_Interface_Interrupts_Flags_Clear+0x15c>
		} else {
			bSuccess = FALSE;
81104698:	e03ffb15 	stw	zero,-20(fp)
		}
	}
8110469c:	0001883a 	nop
811046a0:	e037883a 	mov	sp,fp
811046a4:	dfc00117 	ldw	ra,4(sp)
811046a8:	df000017 	ldw	fp,0(sp)
811046ac:	dec00204 	addi	sp,sp,8
811046b0:	f800283a 	ret

811046b4 <v_Transparent_Interface_RX_FIFO_Reset>:

	void v_Transparent_Interface_RX_FIFO_Reset(char c_SpwID){
811046b4:	defffd04 	addi	sp,sp,-12
811046b8:	dfc00215 	stw	ra,8(sp)
811046bc:	df000115 	stw	fp,4(sp)
811046c0:	df000104 	addi	fp,sp,4
811046c4:	2005883a 	mov	r2,r4
811046c8:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_RX_FIFO_RESET_CONTROL_BIT_MASK);
811046cc:	e0bfff07 	ldb	r2,-4(fp)
811046d0:	01800104 	movi	r6,4
811046d4:	01400844 	movi	r5,33
811046d8:	1009883a 	mov	r4,r2
811046dc:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>

	}
811046e0:	0001883a 	nop
811046e4:	e037883a 	mov	sp,fp
811046e8:	dfc00117 	ldw	ra,4(sp)
811046ec:	df000017 	ldw	fp,0(sp)
811046f0:	dec00204 	addi	sp,sp,8
811046f4:	f800283a 	ret

811046f8 <ul_Transparent_Interface_RX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_RX_FIFO_Status_Read(char c_SpwID){
811046f8:	defffb04 	addi	sp,sp,-20
811046fc:	dfc00415 	stw	ra,16(sp)
81104700:	df000315 	stw	fp,12(sp)
81104704:	df000304 	addi	fp,sp,12
81104708:	2005883a 	mov	r2,r4
8110470c:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_RX_FIFO_USED_SPACE_VALUE_MASK | TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_RX_FIFO_FULL_STATUS_BIT_MASK;
81104710:	0081fec4 	movi	r2,2043
81104714:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_rx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
81104718:	e0bfff07 	ldb	r2,-4(fp)
8110471c:	01400844 	movi	r5,33
81104720:	1009883a 	mov	r4,r2
81104724:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104728:	1007883a 	mov	r3,r2
8110472c:	e0bffd17 	ldw	r2,-12(fp)
81104730:	1884703a 	and	r2,r3,r2
81104734:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_rx_fifo_status_value;
81104738:	e0bffe17 	ldw	r2,-8(fp)
	}
8110473c:	e037883a 	mov	sp,fp
81104740:	dfc00117 	ldw	ra,4(sp)
81104744:	df000017 	ldw	fp,0(sp)
81104748:	dec00204 	addi	sp,sp,8
8110474c:	f800283a 	ret

81104750 <b_Transparent_Interface_RX_FIFO_Status_Empty>:

	bool b_Transparent_Interface_RX_FIFO_Status_Empty(char c_SpwID){
81104750:	defffc04 	addi	sp,sp,-16
81104754:	dfc00315 	stw	ra,12(sp)
81104758:	df000215 	stw	fp,8(sp)
8110475c:	df000204 	addi	fp,sp,8
81104760:	2005883a 	mov	r2,r4
81104764:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_empty = FALSE;
81104768:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_EMPTY_STATUS_BIT_MASK) {
8110476c:	e0bfff07 	ldb	r2,-4(fp)
81104770:	01400844 	movi	r5,33
81104774:	1009883a 	mov	r4,r2
81104778:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
8110477c:	1080008c 	andi	r2,r2,2
81104780:	10000226 	beq	r2,zero,8110478c <b_Transparent_Interface_RX_FIFO_Status_Empty+0x3c>
			b_rx_fifo_empty = TRUE;
81104784:	00800044 	movi	r2,1
81104788:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_empty;		
8110478c:	e0bffe17 	ldw	r2,-8(fp)
	}
81104790:	e037883a 	mov	sp,fp
81104794:	dfc00117 	ldw	ra,4(sp)
81104798:	df000017 	ldw	fp,0(sp)
8110479c:	dec00204 	addi	sp,sp,8
811047a0:	f800283a 	ret

811047a4 <b_Transparent_Interface_RX_FIFO_Status_Full>:
	
	bool b_Transparent_Interface_RX_FIFO_Status_Full(char c_SpwID){
811047a4:	defffc04 	addi	sp,sp,-16
811047a8:	dfc00315 	stw	ra,12(sp)
811047ac:	df000215 	stw	fp,8(sp)
811047b0:	df000204 	addi	fp,sp,8
811047b4:	2005883a 	mov	r2,r4
811047b8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_rx_fifo_full = FALSE;
811047bc:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_FULL_STATUS_BIT_MASK) {
811047c0:	e0bfff07 	ldb	r2,-4(fp)
811047c4:	01400844 	movi	r5,33
811047c8:	1009883a 	mov	r4,r2
811047cc:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811047d0:	1080004c 	andi	r2,r2,1
811047d4:	10000226 	beq	r2,zero,811047e0 <b_Transparent_Interface_RX_FIFO_Status_Full+0x3c>
			b_rx_fifo_full = TRUE;
811047d8:	00800044 	movi	r2,1
811047dc:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_rx_fifo_full;
811047e0:	e0bffe17 	ldw	r2,-8(fp)
	}
811047e4:	e037883a 	mov	sp,fp
811047e8:	dfc00117 	ldw	ra,4(sp)
811047ec:	df000017 	ldw	fp,0(sp)
811047f0:	dec00204 	addi	sp,sp,8
811047f4:	f800283a 	ret

811047f8 <uc_Transparent_Interface_RX_FIFO_Status_Used>:

	alt_u8 uc_Transparent_Interface_RX_FIFO_Status_Used(char c_SpwID){
811047f8:	defffc04 	addi	sp,sp,-16
811047fc:	dfc00315 	stw	ra,12(sp)
81104800:	df000215 	stw	fp,8(sp)
81104804:	df000204 	addi	fp,sp,8
81104808:	2005883a 	mov	r2,r4
8110480c:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_rx_fifo_used = 0;
81104810:	e03ffe05 	stb	zero,-8(fp)
		
		uc_rx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_RX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_RX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
81104814:	e0bfff07 	ldb	r2,-4(fp)
81104818:	01400844 	movi	r5,33
8110481c:	1009883a 	mov	r4,r2
81104820:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104824:	1081fe0c 	andi	r2,r2,2040
81104828:	1004d0fa 	srli	r2,r2,3
8110482c:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_rx_fifo_used;
81104830:	e0bffe03 	ldbu	r2,-8(fp)
	}
81104834:	e037883a 	mov	sp,fp
81104838:	dfc00117 	ldw	ra,4(sp)
8110483c:	df000017 	ldw	fp,0(sp)
81104840:	dec00204 	addi	sp,sp,8
81104844:	f800283a 	ret

81104848 <v_Transparent_Interface_TX_FIFO_Reset>:
	
	
	void v_Transparent_Interface_TX_FIFO_Reset(char c_SpwID){
81104848:	defffd04 	addi	sp,sp,-12
8110484c:	dfc00215 	stw	ra,8(sp)
81104850:	df000115 	stw	fp,4(sp)
81104854:	df000104 	addi	fp,sp,4
81104858:	2005883a 	mov	r2,r4
8110485c:	e0bfff05 	stb	r2,-4(fp)

		TRAN_WRITE_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS, (alt_u32)TRAN_TX_FIFO_RESET_CONTROL_BIT_MASK);
81104860:	e0bfff07 	ldb	r2,-4(fp)
81104864:	01800104 	movi	r6,4
81104868:	01400884 	movi	r5,34
8110486c:	1009883a 	mov	r4,r2
81104870:	1103de40 	call	81103de4 <TRAN_WRITE_REG32>

	}
81104874:	0001883a 	nop
81104878:	e037883a 	mov	sp,fp
8110487c:	dfc00117 	ldw	ra,4(sp)
81104880:	df000017 	ldw	fp,0(sp)
81104884:	dec00204 	addi	sp,sp,8
81104888:	f800283a 	ret

8110488c <ul_Transparent_Interface_TX_FIFO_Status_Read>:

	alt_u32 ul_Transparent_Interface_TX_FIFO_Status_Read(char c_SpwID){
8110488c:	defffb04 	addi	sp,sp,-20
81104890:	dfc00415 	stw	ra,16(sp)
81104894:	df000315 	stw	fp,12(sp)
81104898:	df000304 	addi	fp,sp,12
8110489c:	2005883a 	mov	r2,r4
811048a0:	e0bfff05 	stb	r2,-4(fp)

		const alt_u32 ul_tran_mask = TRAN_TX_FIFO_USED_SPACE_VALUE_MASK | TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK | TRAN_TX_FIFO_FULL_STATUS_BIT_MASK;
811048a4:	0081fec4 	movi	r2,2043
811048a8:	e0bffd15 	stw	r2,-12(fp)
		alt_u32 ul_tran_tx_fifo_status_value = TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & ul_tran_mask;
811048ac:	e0bfff07 	ldb	r2,-4(fp)
811048b0:	01400884 	movi	r5,34
811048b4:	1009883a 	mov	r4,r2
811048b8:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811048bc:	1007883a 	mov	r3,r2
811048c0:	e0bffd17 	ldw	r2,-12(fp)
811048c4:	1884703a 	and	r2,r3,r2
811048c8:	e0bffe15 	stw	r2,-8(fp)

		return ul_tran_tx_fifo_status_value;
811048cc:	e0bffe17 	ldw	r2,-8(fp)
	}
811048d0:	e037883a 	mov	sp,fp
811048d4:	dfc00117 	ldw	ra,4(sp)
811048d8:	df000017 	ldw	fp,0(sp)
811048dc:	dec00204 	addi	sp,sp,8
811048e0:	f800283a 	ret

811048e4 <b_Transparent_Interface_TX_FIFO_Status_Full>:

	bool b_Transparent_Interface_TX_FIFO_Status_Full(char c_SpwID){
811048e4:	defffc04 	addi	sp,sp,-16
811048e8:	dfc00315 	stw	ra,12(sp)
811048ec:	df000215 	stw	fp,8(sp)
811048f0:	df000204 	addi	fp,sp,8
811048f4:	2005883a 	mov	r2,r4
811048f8:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_empty = FALSE;
811048fc:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_EMPTY_STATUS_BIT_MASK) {
81104900:	e0bfff07 	ldb	r2,-4(fp)
81104904:	01400884 	movi	r5,34
81104908:	1009883a 	mov	r4,r2
8110490c:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104910:	1080008c 	andi	r2,r2,2
81104914:	10000226 	beq	r2,zero,81104920 <b_Transparent_Interface_TX_FIFO_Status_Full+0x3c>
			b_tx_fifo_empty = TRUE;
81104918:	00800044 	movi	r2,1
8110491c:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_empty;		
81104920:	e0bffe17 	ldw	r2,-8(fp)
	}
81104924:	e037883a 	mov	sp,fp
81104928:	dfc00117 	ldw	ra,4(sp)
8110492c:	df000017 	ldw	fp,0(sp)
81104930:	dec00204 	addi	sp,sp,8
81104934:	f800283a 	ret

81104938 <b_Transparent_Interface_TX_FIFO_Status_Empty>:
	
	bool b_Transparent_Interface_TX_FIFO_Status_Empty(char c_SpwID){
81104938:	defffc04 	addi	sp,sp,-16
8110493c:	dfc00315 	stw	ra,12(sp)
81104940:	df000215 	stw	fp,8(sp)
81104944:	df000204 	addi	fp,sp,8
81104948:	2005883a 	mov	r2,r4
8110494c:	e0bfff05 	stb	r2,-4(fp)
		
		bool b_tx_fifo_full = FALSE;
81104950:	e03ffe15 	stw	zero,-8(fp)
		
		if (TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_FULL_STATUS_BIT_MASK) {
81104954:	e0bfff07 	ldb	r2,-4(fp)
81104958:	01400884 	movi	r5,34
8110495c:	1009883a 	mov	r4,r2
81104960:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
81104964:	1080004c 	andi	r2,r2,1
81104968:	10000226 	beq	r2,zero,81104974 <b_Transparent_Interface_TX_FIFO_Status_Empty+0x3c>
			b_tx_fifo_full = TRUE;
8110496c:	00800044 	movi	r2,1
81104970:	e0bffe15 	stw	r2,-8(fp)
		}
		
		return b_tx_fifo_full;
81104974:	e0bffe17 	ldw	r2,-8(fp)
	}
81104978:	e037883a 	mov	sp,fp
8110497c:	dfc00117 	ldw	ra,4(sp)
81104980:	df000017 	ldw	fp,0(sp)
81104984:	dec00204 	addi	sp,sp,8
81104988:	f800283a 	ret

8110498c <uc_Transparent_Interface_TX_FIFO_Status_Used>:
	
	alt_u8 uc_Transparent_Interface_TX_FIFO_Status_Used(char c_SpwID){
8110498c:	defffc04 	addi	sp,sp,-16
81104990:	dfc00315 	stw	ra,12(sp)
81104994:	df000215 	stw	fp,8(sp)
81104998:	df000204 	addi	fp,sp,8
8110499c:	2005883a 	mov	r2,r4
811049a0:	e0bfff05 	stb	r2,-4(fp)
		
		alt_u8 uc_tx_fifo_used = 0;
811049a4:	e03ffe05 	stb	zero,-8(fp)
		
		uc_tx_fifo_used = (alt_u8)((TRAN_READ_REG32(c_SpwID, TRAN_TX_MODE_CONTROL_REGISTER_ADDRESS) & TRAN_TX_FIFO_USED_SPACE_VALUE_MASK) >> 3);
811049a8:	e0bfff07 	ldb	r2,-4(fp)
811049ac:	01400884 	movi	r5,34
811049b0:	1009883a 	mov	r4,r2
811049b4:	1103f0c0 	call	81103f0c <TRAN_READ_REG32>
811049b8:	1081fe0c 	andi	r2,r2,2040
811049bc:	1004d0fa 	srli	r2,r2,3
811049c0:	e0bffe05 	stb	r2,-8(fp)
		
		return uc_tx_fifo_used;
811049c4:	e0bffe03 	ldbu	r2,-8(fp)
	}
811049c8:	e037883a 	mov	sp,fp
811049cc:	dfc00117 	ldw	ra,4(sp)
811049d0:	df000017 	ldw	fp,0(sp)
811049d4:	dec00204 	addi	sp,sp,8
811049d8:	f800283a 	ret

811049dc <b_Transparent_Interface_Switch_Channel>:
	
	bool b_Transparent_Interface_Switch_Channel(char c_SpwID){
811049dc:	defffb04 	addi	sp,sp,-20
811049e0:	dfc00415 	stw	ra,16(sp)
811049e4:	df000315 	stw	fp,12(sp)
811049e8:	df000304 	addi	fp,sp,12
811049ec:	2005883a 	mov	r2,r4
811049f0:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess;
		alt_u32 *pTranAddr = DDR2_ADDRESS_SPAN_EXTENDER_CNTL_BASE;
811049f4:	00a04834 	movhi	r2,33056
811049f8:	10903204 	addi	r2,r2,16584
811049fc:	e0bffe15 	stw	r2,-8(fp)

		  bSuccess = TRUE;
81104a00:	00800044 	movi	r2,1
81104a04:	e0bffd15 	stw	r2,-12(fp)
		  switch (c_SpwID) {
81104a08:	e0bfff07 	ldb	r2,-4(fp)
81104a0c:	10bfefc4 	addi	r2,r2,-65
81104a10:	10c00228 	cmpgeui	r3,r2,8
81104a14:	18004d1e 	bne	r3,zero,81104b4c <b_Transparent_Interface_Switch_Channel+0x170>
81104a18:	100690ba 	slli	r3,r2,2
81104a1c:	00a04434 	movhi	r2,33040
81104a20:	10928c04 	addi	r2,r2,18992
81104a24:	1885883a 	add	r2,r3,r2
81104a28:	10800017 	ldw	r2,0(r2)
81104a2c:	1000683a 	jmp	r2
81104a30:	81104a50 	cmplti	r4,r16,16681
81104a34:	81104a70 	cmpltui	r4,r16,16681
81104a38:	81104a90 	cmplti	r4,r16,16682
81104a3c:	81104ab0 	cmpltui	r4,r16,16682
81104a40:	81104ad0 	cmplti	r4,r16,16683
81104a44:	81104af0 	cmpltui	r4,r16,16683
81104a48:	81104b10 	cmplti	r4,r16,16684
81104a4c:	81104b30 	cmpltui	r4,r16,16684
			  case 'A':
				*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_A_CHANNEL_WINDOWED_OFFSET);
81104a50:	e0bffe17 	ldw	r2,-8(fp)
81104a54:	00f80034 	movhi	r3,57344
81104a58:	10c00015 	stw	r3,0(r2)
				*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_A_CHANNEL_WINDOWED_OFFSET) >> 32);
81104a5c:	e0bffe17 	ldw	r2,-8(fp)
81104a60:	10800104 	addi	r2,r2,4
81104a64:	00c00044 	movi	r3,1
81104a68:	10c00015 	stw	r3,0(r2)
			  break;
81104a6c:	00003b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'B':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_B_CHANNEL_WINDOWED_OFFSET);
81104a70:	e0bffe17 	ldw	r2,-8(fp)
81104a74:	00f00034 	movhi	r3,49152
81104a78:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_B_CHANNEL_WINDOWED_OFFSET) >> 32);
81104a7c:	e0bffe17 	ldw	r2,-8(fp)
81104a80:	10800104 	addi	r2,r2,4
81104a84:	00c00044 	movi	r3,1
81104a88:	10c00015 	stw	r3,0(r2)
				  break;
81104a8c:	00003306 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'C':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_C_CHANNEL_WINDOWED_OFFSET);
81104a90:	e0bffe17 	ldw	r2,-8(fp)
81104a94:	00e80034 	movhi	r3,40960
81104a98:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_C_CHANNEL_WINDOWED_OFFSET) >> 32);
81104a9c:	e0bffe17 	ldw	r2,-8(fp)
81104aa0:	10800104 	addi	r2,r2,4
81104aa4:	00c00044 	movi	r3,1
81104aa8:	10c00015 	stw	r3,0(r2)
				  break;
81104aac:	00002b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'D':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_E_CHANNEL_WINDOWED_OFFSET);
81104ab0:	e0bffe17 	ldw	r2,-8(fp)
81104ab4:	00d80034 	movhi	r3,24576
81104ab8:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_E_CHANNEL_WINDOWED_OFFSET) >> 32);
81104abc:	e0bffe17 	ldw	r2,-8(fp)
81104ac0:	10800104 	addi	r2,r2,4
81104ac4:	00c00044 	movi	r3,1
81104ac8:	10c00015 	stw	r3,0(r2)
				  break;
81104acc:	00002306 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'E':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_D_CHANNEL_WINDOWED_OFFSET);
81104ad0:	e0bffe17 	ldw	r2,-8(fp)
81104ad4:	00e00034 	movhi	r3,32768
81104ad8:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_D_CHANNEL_WINDOWED_OFFSET) >> 32);
81104adc:	e0bffe17 	ldw	r2,-8(fp)
81104ae0:	10800104 	addi	r2,r2,4
81104ae4:	00c00044 	movi	r3,1
81104ae8:	10c00015 	stw	r3,0(r2)
				  break;
81104aec:	00001b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'F':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_F_CHANNEL_WINDOWED_OFFSET);
81104af0:	e0bffe17 	ldw	r2,-8(fp)
81104af4:	00d00034 	movhi	r3,16384
81104af8:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_F_CHANNEL_WINDOWED_OFFSET) >> 32);
81104afc:	e0bffe17 	ldw	r2,-8(fp)
81104b00:	10800104 	addi	r2,r2,4
81104b04:	00c00044 	movi	r3,1
81104b08:	10c00015 	stw	r3,0(r2)
				  break;
81104b0c:	00001306 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'G':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_G_CHANNEL_WINDOWED_OFFSET);
81104b10:	e0bffe17 	ldw	r2,-8(fp)
81104b14:	00c80034 	movhi	r3,8192
81104b18:	10c00015 	stw	r3,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_G_CHANNEL_WINDOWED_OFFSET) >> 32);
81104b1c:	e0bffe17 	ldw	r2,-8(fp)
81104b20:	10800104 	addi	r2,r2,4
81104b24:	00c00044 	movi	r3,1
81104b28:	10c00015 	stw	r3,0(r2)
				  break;
81104b2c:	00000b06 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  case 'H':
					*(pTranAddr)     = (alt_u32)( 0x00000000FFFFFFFF & TRAN_H_CHANNEL_WINDOWED_OFFSET);
81104b30:	e0bffe17 	ldw	r2,-8(fp)
81104b34:	10000015 	stw	zero,0(r2)
					*(pTranAddr + 1) = (alt_u32)((0xFFFFFFFF00000000 & TRAN_H_CHANNEL_WINDOWED_OFFSET) >> 32);
81104b38:	e0bffe17 	ldw	r2,-8(fp)
81104b3c:	10800104 	addi	r2,r2,4
81104b40:	00c00044 	movi	r3,1
81104b44:	10c00015 	stw	r3,0(r2)
				  break;
81104b48:	00000406 	br	81104b5c <b_Transparent_Interface_Switch_Channel+0x180>
			  default:
				  bSuccess = FALSE;
81104b4c:	e03ffd15 	stw	zero,-12(fp)
				  printf("SpW Channel not identified!! Error switching channels!! \n");
81104b50:	012044f4 	movhi	r4,33043
81104b54:	21183e04 	addi	r4,r4,24824
81104b58:	110d89c0 	call	8110d89c <puts>
		  }

		  return bSuccess;
81104b5c:	e0bffd17 	ldw	r2,-12(fp)
	}
81104b60:	e037883a 	mov	sp,fp
81104b64:	dfc00117 	ldw	ra,4(sp)
81104b68:	df000017 	ldw	fp,0(sp)
81104b6c:	dec00204 	addi	sp,sp,8
81104b70:	f800283a 	ret

81104b74 <b_Transparent_Interface_Send_SpaceWire_Data>:


	bool b_Transparent_Interface_Send_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer, alt_u16 data_size){
81104b74:	defff704 	addi	sp,sp,-36
81104b78:	dfc00815 	stw	ra,32(sp)
81104b7c:	df000715 	stw	fp,28(sp)
81104b80:	df000704 	addi	fp,sp,28
81104b84:	2007883a 	mov	r3,r4
81104b88:	e17ffe15 	stw	r5,-8(fp)
81104b8c:	3005883a 	mov	r2,r6
81104b90:	e0fffd05 	stb	r3,-12(fp)
81104b94:	e0bfff0d 	sth	r2,-4(fp)
		
		bool bSuccess = FALSE;
81104b98:	e03ff915 	stw	zero,-28(fp)
		
		alt_u32 *memory_location = DDR2_ADDRESS_SPAN_EXTENDER_WINDOWED_SLAVE_BASE;
81104b9c:	e03ffb15 	stw	zero,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104ba0:	e17ffb17 	ldw	r5,-20(fp)
81104ba4:	012044f4 	movhi	r4,33043
81104ba8:	21184d04 	addi	r4,r4,24884
81104bac:	110d7800 	call	8110d780 <printf>
		memory_location += (TRAN_BURST_REGISTERS_OFFSET + TRAN_TX_REGISTER_OFFSET)*2;
81104bb0:	e0bffb17 	ldw	r2,-20(fp)
81104bb4:	10804204 	addi	r2,r2,264
81104bb8:	e0bffb15 	stw	r2,-20(fp)
		printf("memory_location = %u \n", memory_location);
81104bbc:	e17ffb17 	ldw	r5,-20(fp)
81104bc0:	012044f4 	movhi	r4,33043
81104bc4:	21184d04 	addi	r4,r4,24884
81104bc8:	110d7800 	call	8110d780 <printf>

		alt_u16 cnt = 0;
81104bcc:	e03ffa0d 	sth	zero,-24(fp)
		alt_u8 resto = 0;
81104bd0:	e03ffc05 	stb	zero,-16(fp)
		
		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104bd4:	e0bffd07 	ldb	r2,-12(fp)
81104bd8:	10801050 	cmplti	r2,r2,65
81104bdc:	1000081e 	bne	r2,zero,81104c00 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
81104be0:	e0bffd07 	ldb	r2,-12(fp)
81104be4:	10801248 	cmpgei	r2,r2,73
81104be8:	1000051e 	bne	r2,zero,81104c00 <b_Transparent_Interface_Send_SpaceWire_Data+0x8c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104bec:	e0bffd07 	ldb	r2,-12(fp)
81104bf0:	1009883a 	mov	r4,r2
81104bf4:	11049dc0 	call	811049dc <b_Transparent_Interface_Switch_Channel>
			bSuccess          = TRUE;
81104bf8:	00800044 	movi	r2,1
81104bfc:	e0bff915 	stw	r2,-28(fp)
		}

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
81104c00:	e0bff917 	ldw	r2,-28(fp)
81104c04:	10002626 	beq	r2,zero,81104ca0 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
81104c08:	e0bffd07 	ldb	r2,-12(fp)
81104c0c:	1009883a 	mov	r4,r2
81104c10:	110498c0 	call	8110498c <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104c14:	10803fcc 	andi	r2,r2,255
81104c18:	00c04004 	movi	r3,256
81104c1c:	1887c83a 	sub	r3,r3,r2
81104c20:	e0bfff0b 	ldhu	r2,-4(fp)
81104c24:	1004d0ba 	srli	r2,r2,2
81104c28:	10bfffcc 	andi	r2,r2,65535
81104c2c:	10800044 	addi	r2,r2,1
81104c30:	18801b16 	blt	r3,r2,81104ca0 <b_Transparent_Interface_Send_SpaceWire_Data+0x12c>
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104c34:	e03ffa0d 	sth	zero,-24(fp)
81104c38:	00000b06 	br	81104c68 <b_Transparent_Interface_Send_SpaceWire_Data+0xf4>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
81104c3c:	e0bffa0b 	ldhu	r2,-24(fp)
81104c40:	e0fffe17 	ldw	r3,-8(fp)
81104c44:	1885883a 	add	r2,r3,r2
81104c48:	10800003 	ldbu	r2,0(r2)
81104c4c:	10803fcc 	andi	r2,r2,255
81104c50:	10fffff4 	orhi	r3,r2,65535
81104c54:	e0bffb17 	ldw	r2,-20(fp)
81104c58:	10c00015 	stw	r3,0(r2)

		/* Check if the TX Buffer has enough space for the data */
		/* Each word in TX buffer can hold 4 bytes of data, but a space for the EOP must be left*/
		if ((bSuccess) && (256 - (uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID)) >= ((data_size >> 2) + 1))) {
			/* Write the data_buffer data in the correct format to be send by the Transparent Interface in the Channel Memory Location */
			for (cnt = 0; cnt < data_size; cnt++){
81104c5c:	e0bffa0b 	ldhu	r2,-24(fp)
81104c60:	10800044 	addi	r2,r2,1
81104c64:	e0bffa0d 	sth	r2,-24(fp)
81104c68:	e0fffa0b 	ldhu	r3,-24(fp)
81104c6c:	e0bfff0b 	ldhu	r2,-4(fp)
81104c70:	18bff236 	bltu	r3,r2,81104c3c <__reset+0xfb0e4c3c>
				*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | data_buffer[cnt]);
			}
			/* Append an EOP to the end of the data in the Channel Memory Location */
			*memory_location = (alt_u64)(0xFFFFFFFFFFFF0000 | 0x0100 | (alt_u16)data_buffer[data_size]);
81104c74:	e0bfff0b 	ldhu	r2,-4(fp)
81104c78:	e0fffe17 	ldw	r3,-8(fp)
81104c7c:	1885883a 	add	r2,r3,r2
81104c80:	10800003 	ldbu	r2,0(r2)
81104c84:	10c03fcc 	andi	r3,r2,255
81104c88:	00bffff4 	movhi	r2,65535
81104c8c:	10804004 	addi	r2,r2,256
81104c90:	1886b03a 	or	r3,r3,r2
81104c94:	e0bffb17 	ldw	r2,-20(fp)
81104c98:	10c00015 	stw	r3,0(r2)
81104c9c:	00000106 	br	81104ca4 <b_Transparent_Interface_Send_SpaceWire_Data+0x130>
			
		} else {
			bSuccess = FALSE;
81104ca0:	e03ff915 	stw	zero,-28(fp)
		}
		
		return bSuccess;
81104ca4:	e0bff917 	ldw	r2,-28(fp)
	}
81104ca8:	e037883a 	mov	sp,fp
81104cac:	dfc00117 	ldw	ra,4(sp)
81104cb0:	df000017 	ldw	fp,0(sp)
81104cb4:	dec00204 	addi	sp,sp,8
81104cb8:	f800283a 	ret

81104cbc <ui_Transparent_Interface_Get_SpaceWire_Data>:
	
	alt_u16 ui_Transparent_Interface_Get_SpaceWire_Data(char c_SpwID, alt_u8 *data_buffer){
81104cbc:	deffeb04 	addi	sp,sp,-84
81104cc0:	dfc01415 	stw	ra,80(sp)
81104cc4:	df001315 	stw	fp,76(sp)
81104cc8:	ddc01215 	stw	r23,72(sp)
81104ccc:	dd801115 	stw	r22,68(sp)
81104cd0:	dd401015 	stw	r21,64(sp)
81104cd4:	dd000f15 	stw	r20,60(sp)
81104cd8:	dcc00e15 	stw	r19,56(sp)
81104cdc:	dc800d15 	stw	r18,52(sp)
81104ce0:	dc400c15 	stw	r17,48(sp)
81104ce4:	dc000b15 	stw	r16,44(sp)
81104ce8:	df001304 	addi	fp,sp,76
81104cec:	2005883a 	mov	r2,r4
81104cf0:	e17ff515 	stw	r5,-44(fp)
81104cf4:	e0bff405 	stb	r2,-48(fp)
		
		alt_u16 ui_rx_data_size = 0;
81104cf8:	e03fed0d 	sth	zero,-76(fp)
		
		alt_u64 *memory_location = 0;
81104cfc:	e03fef15 	stw	zero,-68(fp)
		memory_location += TRAN_BURST_REGISTERS_OFFSET + TRAN_RX_REGISTER_OFFSET;
81104d00:	e0bfef17 	ldw	r2,-68(fp)
81104d04:	10804004 	addi	r2,r2,256
81104d08:	e0bfef15 	stw	r2,-68(fp)

		alt_u16 cnt = 0;
81104d0c:	e03fed8d 	sth	zero,-74(fp)
		alt_u16 rx_buffer_data_size = 0;
81104d10:	e03fee0d 	sth	zero,-72(fp)
		alt_u64 rx_data = 0;
81104d14:	e03ff015 	stw	zero,-64(fp)
81104d18:	e03ff115 	stw	zero,-60(fp)
		alt_u16 rx_data_buffer[4] = {0,0,0,0};
81104d1c:	e03ff20d 	sth	zero,-56(fp)
81104d20:	e03ff28d 	sth	zero,-54(fp)
81104d24:	e03ff30d 	sth	zero,-52(fp)
81104d28:	e03ff38d 	sth	zero,-50(fp)

		/* Initiate the Channel Memory Location for the Transparent Interface */
		if ((c_SpwID >= 'A') && (c_SpwID <= 'H')) {
81104d2c:	e0bff407 	ldb	r2,-48(fp)
81104d30:	10801050 	cmplti	r2,r2,65
81104d34:	1000081e 	bne	r2,zero,81104d58 <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
81104d38:	e0bff407 	ldb	r2,-48(fp)
81104d3c:	10801248 	cmpgei	r2,r2,73
81104d40:	1000051e 	bne	r2,zero,81104d58 <ui_Transparent_Interface_Get_SpaceWire_Data+0x9c>
			b_Transparent_Interface_Switch_Channel(c_SpwID);
81104d44:	e0bff407 	ldb	r2,-48(fp)
81104d48:	1009883a 	mov	r4,r2
81104d4c:	11049dc0 	call	811049dc <b_Transparent_Interface_Switch_Channel>
			rx_buffer_data_size = 0xFFFF;
81104d50:	00bfffc4 	movi	r2,-1
81104d54:	e0bfee0d 	sth	r2,-72(fp)
		}
		
		if (0xFFFF == rx_buffer_data_size) {
81104d58:	e0ffee0b 	ldhu	r3,-72(fp)
81104d5c:	00bfffd4 	movui	r2,65535
81104d60:	1880711e 	bne	r3,r2,81104f28 <ui_Transparent_Interface_Get_SpaceWire_Data+0x26c>
			/* Check the amount of data in the RX Buffer*/
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
81104d64:	e0bff407 	ldb	r2,-48(fp)
81104d68:	1009883a 	mov	r4,r2
81104d6c:	110498c0 	call	8110498c <uc_Transparent_Interface_TX_FIFO_Status_Used>
81104d70:	10803fcc 	andi	r2,r2,255
81104d74:	e0bfee0d 	sth	r2,-72(fp)
			if (rx_buffer_data_size > 0) {
81104d78:	e0bfee0b 	ldhu	r2,-72(fp)
81104d7c:	10006826 	beq	r2,zero,81104f20 <ui_Transparent_Interface_Get_SpaceWire_Data+0x264>
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81104d80:	e03fed8d 	sth	zero,-74(fp)
81104d84:	00006206 	br	81104f10 <ui_Transparent_Interface_Get_SpaceWire_Data+0x254>

					rx_data = *memory_location;
81104d88:	e0bfef17 	ldw	r2,-68(fp)
81104d8c:	10c00017 	ldw	r3,0(r2)
81104d90:	e0fff015 	stw	r3,-64(fp)
81104d94:	10800117 	ldw	r2,4(r2)
81104d98:	e0bff115 	stw	r2,-60(fp)

					rx_data_buffer[0] = (alt_u16)(0x000000000000FFFF & rx_data);
81104d9c:	e0bff017 	ldw	r2,-64(fp)
81104da0:	e0bff20d 	sth	r2,-56(fp)
					rx_data_buffer[1] = (alt_u16)((0x00000000FFFF0000 & rx_data) >> 16);
81104da4:	e0bff017 	ldw	r2,-64(fp)
81104da8:	143fffec 	andhi	r16,r2,65535
81104dac:	e0bff117 	ldw	r2,-60(fp)
81104db0:	1022703a 	and	r17,r2,zero
81104db4:	8804943a 	slli	r2,r17,16
81104db8:	8024d43a 	srli	r18,r16,16
81104dbc:	14a4b03a 	or	r18,r2,r18
81104dc0:	8826d43a 	srli	r19,r17,16
81104dc4:	9005883a 	mov	r2,r18
81104dc8:	e0bff28d 	sth	r2,-54(fp)
					rx_data_buffer[2] = (alt_u16)((0x0000FFFF00000000 & rx_data) >> 32);
81104dcc:	e0bff017 	ldw	r2,-64(fp)
81104dd0:	1028703a 	and	r20,r2,zero
81104dd4:	e0bff117 	ldw	r2,-60(fp)
81104dd8:	157fffcc 	andi	r21,r2,65535
81104ddc:	a82cd83a 	srl	r22,r21,zero
81104de0:	002f883a 	mov	r23,zero
81104de4:	b005883a 	mov	r2,r22
81104de8:	e0bff30d 	sth	r2,-52(fp)
					rx_data_buffer[3] = (alt_u16)((0xFFFF000000000000 & rx_data) >> 48);
81104dec:	e0bff117 	ldw	r2,-60(fp)
81104df0:	1004d43a 	srli	r2,r2,16
81104df4:	e0bff615 	stw	r2,-40(fp)
81104df8:	e03ff715 	stw	zero,-36(fp)
81104dfc:	e0bff60b 	ldhu	r2,-40(fp)
81104e00:	e0bff38d 	sth	r2,-50(fp)

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[0] & 0x0100) || (rx_data_buffer[0] == 0xFFFF))) {
81104e04:	e0bff20b 	ldhu	r2,-56(fp)
81104e08:	10bfffcc 	andi	r2,r2,65535
81104e0c:	1080400c 	andi	r2,r2,256
81104e10:	10000c1e 	bne	r2,zero,81104e44 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
81104e14:	e0bff20b 	ldhu	r2,-56(fp)
81104e18:	10ffffcc 	andi	r3,r2,65535
81104e1c:	00bfffd4 	movui	r2,65535
81104e20:	18800826 	beq	r3,r2,81104e44 <ui_Transparent_Interface_Get_SpaceWire_Data+0x188>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[0]);
81104e24:	e0bfed0b 	ldhu	r2,-76(fp)
81104e28:	e0fff517 	ldw	r3,-44(fp)
81104e2c:	1885883a 	add	r2,r3,r2
81104e30:	e0fff20b 	ldhu	r3,-56(fp)
81104e34:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104e38:	e0bfed0b 	ldhu	r2,-76(fp)
81104e3c:	10800044 	addi	r2,r2,1
81104e40:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[1] & 0x0100) || (rx_data_buffer[1] == 0xFFFF))) {
81104e44:	e0bff28b 	ldhu	r2,-54(fp)
81104e48:	10bfffcc 	andi	r2,r2,65535
81104e4c:	1080400c 	andi	r2,r2,256
81104e50:	10000c1e 	bne	r2,zero,81104e84 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
81104e54:	e0bff28b 	ldhu	r2,-54(fp)
81104e58:	10ffffcc 	andi	r3,r2,65535
81104e5c:	00bfffd4 	movui	r2,65535
81104e60:	18800826 	beq	r3,r2,81104e84 <ui_Transparent_Interface_Get_SpaceWire_Data+0x1c8>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[1]);
81104e64:	e0bfed0b 	ldhu	r2,-76(fp)
81104e68:	e0fff517 	ldw	r3,-44(fp)
81104e6c:	1885883a 	add	r2,r3,r2
81104e70:	e0fff28b 	ldhu	r3,-54(fp)
81104e74:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104e78:	e0bfed0b 	ldhu	r2,-76(fp)
81104e7c:	10800044 	addi	r2,r2,1
81104e80:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[2] & 0x0100) || (rx_data_buffer[2] == 0xFFFF))) {
81104e84:	e0bff30b 	ldhu	r2,-52(fp)
81104e88:	10bfffcc 	andi	r2,r2,65535
81104e8c:	1080400c 	andi	r2,r2,256
81104e90:	10000c1e 	bne	r2,zero,81104ec4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
81104e94:	e0bff30b 	ldhu	r2,-52(fp)
81104e98:	10ffffcc 	andi	r3,r2,65535
81104e9c:	00bfffd4 	movui	r2,65535
81104ea0:	18800826 	beq	r3,r2,81104ec4 <ui_Transparent_Interface_Get_SpaceWire_Data+0x208>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[2]);
81104ea4:	e0bfed0b 	ldhu	r2,-76(fp)
81104ea8:	e0fff517 	ldw	r3,-44(fp)
81104eac:	1885883a 	add	r2,r3,r2
81104eb0:	e0fff30b 	ldhu	r3,-52(fp)
81104eb4:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104eb8:	e0bfed0b 	ldhu	r2,-76(fp)
81104ebc:	10800044 	addi	r2,r2,1
81104ec0:	e0bfed0d 	sth	r2,-76(fp)
					}

					/* check if the data is not an eop or invalid */
					if (!((rx_data_buffer[3] & 0x0100) || (rx_data_buffer[3] == 0xFFFF))) {
81104ec4:	e0bff38b 	ldhu	r2,-50(fp)
81104ec8:	10bfffcc 	andi	r2,r2,65535
81104ecc:	1080400c 	andi	r2,r2,256
81104ed0:	10000c1e 	bne	r2,zero,81104f04 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
81104ed4:	e0bff38b 	ldhu	r2,-50(fp)
81104ed8:	10ffffcc 	andi	r3,r2,65535
81104edc:	00bfffd4 	movui	r2,65535
81104ee0:	18800826 	beq	r3,r2,81104f04 <ui_Transparent_Interface_Get_SpaceWire_Data+0x248>
						data_buffer[ui_rx_data_size] = (alt_u8)(0x00FF & rx_data_buffer[3]);
81104ee4:	e0bfed0b 	ldhu	r2,-76(fp)
81104ee8:	e0fff517 	ldw	r3,-44(fp)
81104eec:	1885883a 	add	r2,r3,r2
81104ef0:	e0fff38b 	ldhu	r3,-50(fp)
81104ef4:	10c00005 	stb	r3,0(r2)
						ui_rx_data_size++;
81104ef8:	e0bfed0b 	ldhu	r2,-76(fp)
81104efc:	10800044 	addi	r2,r2,1
81104f00:	e0bfed0d 	sth	r2,-76(fp)
			rx_buffer_data_size = (alt_u16)(uc_Transparent_Interface_TX_FIFO_Status_Used(c_SpwID));
			if (rx_buffer_data_size > 0) {
				/* Transfer the available data to the Channel Memory Location */
				
				/* Convert all the available data in the Channel Memory Location to the data_buffer */
				for (cnt = 0; cnt < rx_buffer_data_size; cnt++) {
81104f04:	e0bfed8b 	ldhu	r2,-74(fp)
81104f08:	10800044 	addi	r2,r2,1
81104f0c:	e0bfed8d 	sth	r2,-74(fp)
81104f10:	e0ffed8b 	ldhu	r3,-74(fp)
81104f14:	e0bfee0b 	ldhu	r2,-72(fp)
81104f18:	18bf9b36 	bltu	r3,r2,81104d88 <__reset+0xfb0e4d88>
81104f1c:	00000306 	br	81104f2c <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
						ui_rx_data_size++;
					}

				}
			} else {
				ui_rx_data_size = 0;
81104f20:	e03fed0d 	sth	zero,-76(fp)
81104f24:	00000106 	br	81104f2c <ui_Transparent_Interface_Get_SpaceWire_Data+0x270>
			}
		} else {
			ui_rx_data_size = 0;
81104f28:	e03fed0d 	sth	zero,-76(fp)
		}
	
		return ui_rx_data_size;
81104f2c:	e0bfed0b 	ldhu	r2,-76(fp)
	}
81104f30:	e6fff804 	addi	sp,fp,-32
81104f34:	dfc00917 	ldw	ra,36(sp)
81104f38:	df000817 	ldw	fp,32(sp)
81104f3c:	ddc00717 	ldw	r23,28(sp)
81104f40:	dd800617 	ldw	r22,24(sp)
81104f44:	dd400517 	ldw	r21,20(sp)
81104f48:	dd000417 	ldw	r20,16(sp)
81104f4c:	dcc00317 	ldw	r19,12(sp)
81104f50:	dc800217 	ldw	r18,8(sp)
81104f54:	dc400117 	ldw	r17,4(sp)
81104f58:	dc000017 	ldw	r16,0(sp)
81104f5c:	dec00a04 	addi	sp,sp,40
81104f60:	f800283a 	ret

81104f64 <vEthHoldReset>:
 */

#include "eth.h"

void vEthHoldReset(void)
{
81104f64:	defffe04 	addi	sp,sp,-8
81104f68:	df000115 	stw	fp,4(sp)
81104f6c:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
81104f70:	00a00034 	movhi	r2,32768
81104f74:	10813404 	addi	r2,r2,1232
81104f78:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000000;
81104f7c:	e0bfff17 	ldw	r2,-4(fp)
81104f80:	10000015 	stw	zero,0(r2)
}
81104f84:	0001883a 	nop
81104f88:	e037883a 	mov	sp,fp
81104f8c:	df000017 	ldw	fp,0(sp)
81104f90:	dec00104 	addi	sp,sp,4
81104f94:	f800283a 	ret

81104f98 <vEthReleaseReset>:

void vEthReleaseReset(void)
{
81104f98:	defffe04 	addi	sp,sp,-8
81104f9c:	df000115 	stw	fp,4(sp)
81104fa0:	df000104 	addi	fp,sp,4
	alt_u32 *pEthAddr = (alt_u32 *)ETH_RST_BASE;
81104fa4:	00a00034 	movhi	r2,32768
81104fa8:	10813404 	addi	r2,r2,1232
81104fac:	e0bfff15 	stw	r2,-4(fp)
	*pEthAddr = (alt_u32) 0x00000001;
81104fb0:	e0bfff17 	ldw	r2,-4(fp)
81104fb4:	00c00044 	movi	r3,1
81104fb8:	10c00015 	stw	r3,0(r2)
}
81104fbc:	0001883a 	nop
81104fc0:	e037883a 	mov	sp,fp
81104fc4:	df000017 	ldw	fp,0(sp)
81104fc8:	dec00104 	addi	sp,sp,4
81104fcc:	f800283a 	ret

81104fd0 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81104fd0:	defffa04 	addi	sp,sp,-24
81104fd4:	dfc00515 	stw	ra,20(sp)
81104fd8:	df000415 	stw	fp,16(sp)
81104fdc:	df000404 	addi	fp,sp,16
81104fe0:	e13ffd15 	stw	r4,-12(fp)
81104fe4:	e17ffe15 	stw	r5,-8(fp)
81104fe8:	3005883a 	mov	r2,r6
81104fec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81104ff0:	00800044 	movi	r2,1
81104ff4:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81104ff8:	e17ffe17 	ldw	r5,-8(fp)
81104ffc:	e13ffd17 	ldw	r4,-12(fp)
81105000:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105004:	e0bfff03 	ldbu	r2,-4(fp)
81105008:	10803fcc 	andi	r2,r2,255
8110500c:	100d883a 	mov	r6,r2
81105010:	e17ffe17 	ldw	r5,-8(fp)
81105014:	e13ffd17 	ldw	r4,-12(fp)
81105018:	11054840 	call	81105484 <i2c_write>
8110501c:	1000011e 	bne	r2,zero,81105024 <I2C_TestAdress+0x54>
        bSuccess = FALSE;
81105020:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105024:	e17ffe17 	ldw	r5,-8(fp)
81105028:	e13ffd17 	ldw	r4,-12(fp)
8110502c:	110540c0 	call	8110540c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105030:	0106d604 	movi	r4,7000
81105034:	11224640 	call	81122464 <usleep>
    
    return bSuccess;
81105038:	e0bffc17 	ldw	r2,-16(fp)

}
8110503c:	e037883a 	mov	sp,fp
81105040:	dfc00117 	ldw	ra,4(sp)
81105044:	df000017 	ldw	fp,0(sp)
81105048:	dec00204 	addi	sp,sp,8
8110504c:	f800283a 	ret

81105050 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
81105050:	defff804 	addi	sp,sp,-32
81105054:	dfc00715 	stw	ra,28(sp)
81105058:	df000615 	stw	fp,24(sp)
8110505c:	df000604 	addi	fp,sp,24
81105060:	e13ffb15 	stw	r4,-20(fp)
81105064:	e17ffc15 	stw	r5,-16(fp)
81105068:	3009883a 	mov	r4,r6
8110506c:	3807883a 	mov	r3,r7
81105070:	e0800217 	ldw	r2,8(fp)
81105074:	e13ffd05 	stb	r4,-12(fp)
81105078:	e0fffe05 	stb	r3,-8(fp)
8110507c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105080:	00800044 	movi	r2,1
81105084:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105088:	e17ffc17 	ldw	r5,-16(fp)
8110508c:	e13ffb17 	ldw	r4,-20(fp)
81105090:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105094:	e0bffd03 	ldbu	r2,-12(fp)
81105098:	10803fcc 	andi	r2,r2,255
8110509c:	100d883a 	mov	r6,r2
811050a0:	e17ffc17 	ldw	r5,-16(fp)
811050a4:	e13ffb17 	ldw	r4,-20(fp)
811050a8:	11054840 	call	81105484 <i2c_write>
811050ac:	1000011e 	bne	r2,zero,811050b4 <I2C_Write+0x64>
        bSuccess = FALSE;
811050b0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
811050b4:	e0bffa17 	ldw	r2,-24(fp)
811050b8:	10000726 	beq	r2,zero,811050d8 <I2C_Write+0x88>
811050bc:	e0bffe03 	ldbu	r2,-8(fp)
811050c0:	100d883a 	mov	r6,r2
811050c4:	e17ffc17 	ldw	r5,-16(fp)
811050c8:	e13ffb17 	ldw	r4,-20(fp)
811050cc:	11054840 	call	81105484 <i2c_write>
811050d0:	1000011e 	bne	r2,zero,811050d8 <I2C_Write+0x88>
        bSuccess = FALSE;
811050d4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
811050d8:	e0bffa17 	ldw	r2,-24(fp)
811050dc:	10000726 	beq	r2,zero,811050fc <I2C_Write+0xac>
811050e0:	e0bfff03 	ldbu	r2,-4(fp)
811050e4:	100d883a 	mov	r6,r2
811050e8:	e17ffc17 	ldw	r5,-16(fp)
811050ec:	e13ffb17 	ldw	r4,-20(fp)
811050f0:	11054840 	call	81105484 <i2c_write>
811050f4:	1000011e 	bne	r2,zero,811050fc <I2C_Write+0xac>
        bSuccess = FALSE;
811050f8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811050fc:	e17ffc17 	ldw	r5,-16(fp)
81105100:	e13ffb17 	ldw	r4,-20(fp)
81105104:	110540c0 	call	8110540c <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105108:	0106d604 	movi	r4,7000
8110510c:	11224640 	call	81122464 <usleep>
    
    return bSuccess;
81105110:	e0bffa17 	ldw	r2,-24(fp)

}
81105114:	e037883a 	mov	sp,fp
81105118:	dfc00117 	ldw	ra,4(sp)
8110511c:	df000017 	ldw	fp,0(sp)
81105120:	dec00204 	addi	sp,sp,8
81105124:	f800283a 	ret

81105128 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105128:	defff904 	addi	sp,sp,-28
8110512c:	dfc00615 	stw	ra,24(sp)
81105130:	df000515 	stw	fp,20(sp)
81105134:	df000504 	addi	fp,sp,20
81105138:	e13ffc15 	stw	r4,-16(fp)
8110513c:	e17ffd15 	stw	r5,-12(fp)
81105140:	3007883a 	mov	r3,r6
81105144:	3805883a 	mov	r2,r7
81105148:	e0fffe05 	stb	r3,-8(fp)
8110514c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105150:	00800044 	movi	r2,1
81105154:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105158:	e17ffd17 	ldw	r5,-12(fp)
8110515c:	e13ffc17 	ldw	r4,-16(fp)
81105160:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105164:	e0bffe03 	ldbu	r2,-8(fp)
81105168:	10803fcc 	andi	r2,r2,255
8110516c:	100d883a 	mov	r6,r2
81105170:	e17ffd17 	ldw	r5,-12(fp)
81105174:	e13ffc17 	ldw	r4,-16(fp)
81105178:	11054840 	call	81105484 <i2c_write>
8110517c:	1000011e 	bne	r2,zero,81105184 <I2C_Read+0x5c>
        bSuccess = FALSE;
81105180:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105184:	e0bffb17 	ldw	r2,-20(fp)
81105188:	10000726 	beq	r2,zero,811051a8 <I2C_Read+0x80>
8110518c:	e0bfff03 	ldbu	r2,-4(fp)
81105190:	100d883a 	mov	r6,r2
81105194:	e17ffd17 	ldw	r5,-12(fp)
81105198:	e13ffc17 	ldw	r4,-16(fp)
8110519c:	11054840 	call	81105484 <i2c_write>
811051a0:	1000011e 	bne	r2,zero,811051a8 <I2C_Read+0x80>
        bSuccess = FALSE;
811051a4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
811051a8:	e17ffd17 	ldw	r5,-12(fp)
811051ac:	e13ffc17 	ldw	r4,-16(fp)
811051b0:	11053800 	call	81105380 <i2c_start>
    DeviceAddr |= 1; // Read
811051b4:	e0bffe03 	ldbu	r2,-8(fp)
811051b8:	10800054 	ori	r2,r2,1
811051bc:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
811051c0:	e0bffb17 	ldw	r2,-20(fp)
811051c4:	10000826 	beq	r2,zero,811051e8 <I2C_Read+0xc0>
811051c8:	e0bffe03 	ldbu	r2,-8(fp)
811051cc:	10803fcc 	andi	r2,r2,255
811051d0:	100d883a 	mov	r6,r2
811051d4:	e17ffd17 	ldw	r5,-12(fp)
811051d8:	e13ffc17 	ldw	r4,-16(fp)
811051dc:	11054840 	call	81105484 <i2c_write>
811051e0:	1000011e 	bne	r2,zero,811051e8 <I2C_Read+0xc0>
        bSuccess = FALSE;
811051e4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
811051e8:	e0bffb17 	ldw	r2,-20(fp)
811051ec:	10000526 	beq	r2,zero,81105204 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
811051f0:	000f883a 	mov	r7,zero
811051f4:	e1800217 	ldw	r6,8(fp)
811051f8:	e17ffd17 	ldw	r5,-12(fp)
811051fc:	e13ffc17 	ldw	r4,-16(fp)
81105200:	11055b40 	call	811055b4 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105204:	e17ffd17 	ldw	r5,-12(fp)
81105208:	e13ffc17 	ldw	r4,-16(fp)
8110520c:	110540c0 	call	8110540c <i2c_stop>
    
    return bSuccess;
81105210:	e0bffb17 	ldw	r2,-20(fp)
}
81105214:	e037883a 	mov	sp,fp
81105218:	dfc00117 	ldw	ra,4(sp)
8110521c:	df000017 	ldw	fp,0(sp)
81105220:	dec00204 	addi	sp,sp,8
81105224:	f800283a 	ret

81105228 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105228:	defff604 	addi	sp,sp,-40
8110522c:	dfc00915 	stw	ra,36(sp)
81105230:	df000815 	stw	fp,32(sp)
81105234:	df000804 	addi	fp,sp,32
81105238:	e13ffb15 	stw	r4,-20(fp)
8110523c:	e17ffc15 	stw	r5,-16(fp)
81105240:	3007883a 	mov	r3,r6
81105244:	e1fffe15 	stw	r7,-8(fp)
81105248:	e0800217 	ldw	r2,8(fp)
8110524c:	e0fffd05 	stb	r3,-12(fp)
81105250:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105254:	00800044 	movi	r2,1
81105258:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
8110525c:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105260:	e17ffc17 	ldw	r5,-16(fp)
81105264:	e13ffb17 	ldw	r4,-20(fp)
81105268:	11053800 	call	81105380 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
8110526c:	e0bffd03 	ldbu	r2,-12(fp)
81105270:	10803fcc 	andi	r2,r2,255
81105274:	100d883a 	mov	r6,r2
81105278:	e17ffc17 	ldw	r5,-16(fp)
8110527c:	e13ffb17 	ldw	r4,-20(fp)
81105280:	11054840 	call	81105484 <i2c_write>
81105284:	1000011e 	bne	r2,zero,8110528c <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
81105288:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
8110528c:	e0bff917 	ldw	r2,-28(fp)
81105290:	10000726 	beq	r2,zero,811052b0 <I2C_MultipleRead+0x88>
81105294:	e0bffa03 	ldbu	r2,-24(fp)
81105298:	100d883a 	mov	r6,r2
8110529c:	e17ffc17 	ldw	r5,-16(fp)
811052a0:	e13ffb17 	ldw	r4,-20(fp)
811052a4:	11054840 	call	81105484 <i2c_write>
811052a8:	1000011e 	bne	r2,zero,811052b0 <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
811052ac:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
811052b0:	e0bff917 	ldw	r2,-28(fp)
811052b4:	10000326 	beq	r2,zero,811052c4 <I2C_MultipleRead+0x9c>
        i2c_start(clk_base, data_base);  // restart
811052b8:	e17ffc17 	ldw	r5,-16(fp)
811052bc:	e13ffb17 	ldw	r4,-20(fp)
811052c0:	11053800 	call	81105380 <i2c_start>
    DeviceAddr |= 1; // Read
811052c4:	e0bffd03 	ldbu	r2,-12(fp)
811052c8:	10800054 	ori	r2,r2,1
811052cc:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
811052d0:	e0bff917 	ldw	r2,-28(fp)
811052d4:	10000826 	beq	r2,zero,811052f8 <I2C_MultipleRead+0xd0>
811052d8:	e0bffd03 	ldbu	r2,-12(fp)
811052dc:	10803fcc 	andi	r2,r2,255
811052e0:	100d883a 	mov	r6,r2
811052e4:	e17ffc17 	ldw	r5,-16(fp)
811052e8:	e13ffb17 	ldw	r4,-20(fp)
811052ec:	11054840 	call	81105484 <i2c_write>
811052f0:	1000011e 	bne	r2,zero,811052f8 <I2C_MultipleRead+0xd0>
        bSuccess = FALSE;
811052f4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
811052f8:	e0bff917 	ldw	r2,-28(fp)
811052fc:	10001726 	beq	r2,zero,8110535c <I2C_MultipleRead+0x134>
        for(i=0;i<len && bSuccess;i++){
81105300:	e03ff815 	stw	zero,-32(fp)
81105304:	00001006 	br	81105348 <I2C_MultipleRead+0x120>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105308:	e0bff817 	ldw	r2,-32(fp)
8110530c:	e0fffe17 	ldw	r3,-8(fp)
81105310:	1889883a 	add	r4,r3,r2
81105314:	e0bfff0b 	ldhu	r2,-4(fp)
81105318:	10ffffc4 	addi	r3,r2,-1
8110531c:	e0bff817 	ldw	r2,-32(fp)
81105320:	1884c03a 	cmpne	r2,r3,r2
81105324:	10803fcc 	andi	r2,r2,255
81105328:	100f883a 	mov	r7,r2
8110532c:	200d883a 	mov	r6,r4
81105330:	e17ffc17 	ldw	r5,-16(fp)
81105334:	e13ffb17 	ldw	r4,-20(fp)
81105338:	11055b40 	call	811055b4 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
8110533c:	e0bff817 	ldw	r2,-32(fp)
81105340:	10800044 	addi	r2,r2,1
81105344:	e0bff815 	stw	r2,-32(fp)
81105348:	e0bfff0b 	ldhu	r2,-4(fp)
8110534c:	e0fff817 	ldw	r3,-32(fp)
81105350:	1880020e 	bge	r3,r2,8110535c <I2C_MultipleRead+0x134>
81105354:	e0bff917 	ldw	r2,-28(fp)
81105358:	103feb1e 	bne	r2,zero,81105308 <__reset+0xfb0e5308>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
8110535c:	e17ffc17 	ldw	r5,-16(fp)
81105360:	e13ffb17 	ldw	r4,-20(fp)
81105364:	110540c0 	call	8110540c <i2c_stop>
    
    return bSuccess;    
81105368:	e0bff917 	ldw	r2,-28(fp)
    
}
8110536c:	e037883a 	mov	sp,fp
81105370:	dfc00117 	ldw	ra,4(sp)
81105374:	df000017 	ldw	fp,0(sp)
81105378:	dec00204 	addi	sp,sp,8
8110537c:	f800283a 	ret

81105380 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105380:	defffc04 	addi	sp,sp,-16
81105384:	dfc00315 	stw	ra,12(sp)
81105388:	df000215 	stw	fp,8(sp)
8110538c:	df000204 	addi	fp,sp,8
81105390:	e13ffe15 	stw	r4,-8(fp)
81105394:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105398:	e0bfff17 	ldw	r2,-4(fp)
8110539c:	10800104 	addi	r2,r2,4
811053a0:	1007883a 	mov	r3,r2
811053a4:	00800044 	movi	r2,1
811053a8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
811053ac:	e0bfff17 	ldw	r2,-4(fp)
811053b0:	00c00044 	movi	r3,1
811053b4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
811053b8:	e0bffe17 	ldw	r2,-8(fp)
811053bc:	00c00044 	movi	r3,1
811053c0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
811053c4:	01000044 	movi	r4,1
811053c8:	11224640 	call	81122464 <usleep>
     
    SDA_LOW(data_base); // data low
811053cc:	e0bfff17 	ldw	r2,-4(fp)
811053d0:	0007883a 	mov	r3,zero
811053d4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
811053d8:	01000044 	movi	r4,1
811053dc:	11224640 	call	81122464 <usleep>
    SCL_LOW(clk_base); // clock low
811053e0:	e0bffe17 	ldw	r2,-8(fp)
811053e4:	0007883a 	mov	r3,zero
811053e8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
811053ec:	01000044 	movi	r4,1
811053f0:	11224640 	call	81122464 <usleep>
}
811053f4:	0001883a 	nop
811053f8:	e037883a 	mov	sp,fp
811053fc:	dfc00117 	ldw	ra,4(sp)
81105400:	df000017 	ldw	fp,0(sp)
81105404:	dec00204 	addi	sp,sp,8
81105408:	f800283a 	ret

8110540c <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
8110540c:	defffc04 	addi	sp,sp,-16
81105410:	dfc00315 	stw	ra,12(sp)
81105414:	df000215 	stw	fp,8(sp)
81105418:	df000204 	addi	fp,sp,8
8110541c:	e13ffe15 	stw	r4,-8(fp)
81105420:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105424:	e0bfff17 	ldw	r2,-4(fp)
81105428:	10800104 	addi	r2,r2,4
8110542c:	1007883a 	mov	r3,r2
81105430:	00800044 	movi	r2,1
81105434:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105438:	e0bfff17 	ldw	r2,-4(fp)
8110543c:	0007883a 	mov	r3,zero
81105440:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105444:	e0bffe17 	ldw	r2,-8(fp)
81105448:	00c00044 	movi	r3,1
8110544c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105450:	01000044 	movi	r4,1
81105454:	11224640 	call	81122464 <usleep>
    SDA_HIGH(data_base); // data high
81105458:	e0bfff17 	ldw	r2,-4(fp)
8110545c:	00c00044 	movi	r3,1
81105460:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105464:	01000044 	movi	r4,1
81105468:	11224640 	call	81122464 <usleep>
    

    
}
8110546c:	0001883a 	nop
81105470:	e037883a 	mov	sp,fp
81105474:	dfc00117 	ldw	ra,4(sp)
81105478:	df000017 	ldw	fp,0(sp)
8110547c:	dec00204 	addi	sp,sp,8
81105480:	f800283a 	ret

81105484 <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105484:	defff804 	addi	sp,sp,-32
81105488:	dfc00715 	stw	ra,28(sp)
8110548c:	df000615 	stw	fp,24(sp)
81105490:	df000604 	addi	fp,sp,24
81105494:	e13ffd15 	stw	r4,-12(fp)
81105498:	e17ffe15 	stw	r5,-8(fp)
8110549c:	3005883a 	mov	r2,r6
811054a0:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
811054a4:	00bfe004 	movi	r2,-128
811054a8:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
811054ac:	e0bffe17 	ldw	r2,-8(fp)
811054b0:	10800104 	addi	r2,r2,4
811054b4:	1007883a 	mov	r3,r2
811054b8:	00800044 	movi	r2,1
811054bc:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
811054c0:	e03ffb15 	stw	zero,-20(fp)
811054c4:	00001f06 	br	81105544 <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
811054c8:	e0bffd17 	ldw	r2,-12(fp)
811054cc:	0007883a 	mov	r3,zero
811054d0:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
811054d4:	e0ffff03 	ldbu	r3,-4(fp)
811054d8:	e0bffa03 	ldbu	r2,-24(fp)
811054dc:	1884703a 	and	r2,r3,r2
811054e0:	10803fcc 	andi	r2,r2,255
811054e4:	10000426 	beq	r2,zero,811054f8 <i2c_write+0x74>
            SDA_HIGH(data_base);
811054e8:	e0bffe17 	ldw	r2,-8(fp)
811054ec:	00c00044 	movi	r3,1
811054f0:	10c00035 	stwio	r3,0(r2)
811054f4:	00000306 	br	81105504 <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
811054f8:	e0bffe17 	ldw	r2,-8(fp)
811054fc:	0007883a 	mov	r3,zero
81105500:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105504:	e0bffa03 	ldbu	r2,-24(fp)
81105508:	1004d07a 	srli	r2,r2,1
8110550c:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105510:	e0bffd17 	ldw	r2,-12(fp)
81105514:	00c00044 	movi	r3,1
81105518:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110551c:	01000044 	movi	r4,1
81105520:	11224640 	call	81122464 <usleep>
        SCL_LOW(clk_base);
81105524:	e0bffd17 	ldw	r2,-12(fp)
81105528:	0007883a 	mov	r3,zero
8110552c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105530:	01000044 	movi	r4,1
81105534:	11224640 	call	81122464 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105538:	e0bffb17 	ldw	r2,-20(fp)
8110553c:	10800044 	addi	r2,r2,1
81105540:	e0bffb15 	stw	r2,-20(fp)
81105544:	e0bffb17 	ldw	r2,-20(fp)
81105548:	10800210 	cmplti	r2,r2,8
8110554c:	103fde1e 	bne	r2,zero,811054c8 <__reset+0xfb0e54c8>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105550:	e0bffe17 	ldw	r2,-8(fp)
81105554:	10800104 	addi	r2,r2,4
81105558:	0007883a 	mov	r3,zero
8110555c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105560:	e0bffd17 	ldw	r2,-12(fp)
81105564:	00c00044 	movi	r3,1
81105568:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
8110556c:	01000044 	movi	r4,1
81105570:	11224640 	call	81122464 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105574:	e0bffe17 	ldw	r2,-8(fp)
81105578:	10800037 	ldwio	r2,0(r2)
8110557c:	1005003a 	cmpeq	r2,r2,zero
81105580:	10803fcc 	andi	r2,r2,255
81105584:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105588:	e0bffd17 	ldw	r2,-12(fp)
8110558c:	0007883a 	mov	r3,zero
81105590:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105594:	01000044 	movi	r4,1
81105598:	11224640 	call	81122464 <usleep>
    return bAck;
8110559c:	e0bffc17 	ldw	r2,-16(fp)
}    
811055a0:	e037883a 	mov	sp,fp
811055a4:	dfc00117 	ldw	ra,4(sp)
811055a8:	df000017 	ldw	fp,0(sp)
811055ac:	dec00204 	addi	sp,sp,8
811055b0:	f800283a 	ret

811055b4 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
811055b4:	defff804 	addi	sp,sp,-32
811055b8:	dfc00715 	stw	ra,28(sp)
811055bc:	df000615 	stw	fp,24(sp)
811055c0:	df000604 	addi	fp,sp,24
811055c4:	e13ffc15 	stw	r4,-16(fp)
811055c8:	e17ffd15 	stw	r5,-12(fp)
811055cc:	e1bffe15 	stw	r6,-8(fp)
811055d0:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
811055d4:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
811055d8:	e0bffd17 	ldw	r2,-12(fp)
811055dc:	10800104 	addi	r2,r2,4
811055e0:	0007883a 	mov	r3,zero
811055e4:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
811055e8:	e0bffc17 	ldw	r2,-16(fp)
811055ec:	0007883a 	mov	r3,zero
811055f0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811055f4:	01000044 	movi	r4,1
811055f8:	11224640 	call	81122464 <usleep>

    for(i=0;i<8;i++){
811055fc:	e03ffb15 	stw	zero,-20(fp)
81105600:	00001606 	br	8110565c <i2c_read+0xa8>
        Data <<= 1;
81105604:	e0bffa03 	ldbu	r2,-24(fp)
81105608:	1085883a 	add	r2,r2,r2
8110560c:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105610:	e0bffc17 	ldw	r2,-16(fp)
81105614:	00c00044 	movi	r3,1
81105618:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
8110561c:	01000044 	movi	r4,1
81105620:	11224640 	call	81122464 <usleep>
        if (SDA_READ(data_base))  // read data   
81105624:	e0bffd17 	ldw	r2,-12(fp)
81105628:	10800037 	ldwio	r2,0(r2)
8110562c:	10000326 	beq	r2,zero,8110563c <i2c_read+0x88>
            Data |= 0x01;
81105630:	e0bffa03 	ldbu	r2,-24(fp)
81105634:	10800054 	ori	r2,r2,1
81105638:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
8110563c:	e0bffc17 	ldw	r2,-16(fp)
81105640:	0007883a 	mov	r3,zero
81105644:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105648:	01000044 	movi	r4,1
8110564c:	11224640 	call	81122464 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81105650:	e0bffb17 	ldw	r2,-20(fp)
81105654:	10800044 	addi	r2,r2,1
81105658:	e0bffb15 	stw	r2,-20(fp)
8110565c:	e0bffb17 	ldw	r2,-20(fp)
81105660:	10800210 	cmplti	r2,r2,8
81105664:	103fe71e 	bne	r2,zero,81105604 <__reset+0xfb0e5604>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81105668:	e0bffc17 	ldw	r2,-16(fp)
8110566c:	0007883a 	mov	r3,zero
81105670:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
81105674:	e0bffd17 	ldw	r2,-12(fp)
81105678:	10800104 	addi	r2,r2,4
8110567c:	1007883a 	mov	r3,r2
81105680:	00800044 	movi	r2,1
81105684:	18800035 	stwio	r2,0(r3)
    if (bAck)
81105688:	e0bfff17 	ldw	r2,-4(fp)
8110568c:	10000426 	beq	r2,zero,811056a0 <i2c_read+0xec>
        SDA_LOW(data_base);
81105690:	e0bffd17 	ldw	r2,-12(fp)
81105694:	0007883a 	mov	r3,zero
81105698:	10c00035 	stwio	r3,0(r2)
8110569c:	00000306 	br	811056ac <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
811056a0:	e0bffd17 	ldw	r2,-12(fp)
811056a4:	00c00044 	movi	r3,1
811056a8:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
811056ac:	e0bffc17 	ldw	r2,-16(fp)
811056b0:	00c00044 	movi	r3,1
811056b4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
811056b8:	01000044 	movi	r4,1
811056bc:	11224640 	call	81122464 <usleep>
    SCL_LOW(clk_base); // clock low
811056c0:	e0bffc17 	ldw	r2,-16(fp)
811056c4:	0007883a 	mov	r3,zero
811056c8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
811056cc:	01000044 	movi	r4,1
811056d0:	11224640 	call	81122464 <usleep>
    SDA_LOW(data_base);  // data low
811056d4:	e0bffd17 	ldw	r2,-12(fp)
811056d8:	0007883a 	mov	r3,zero
811056dc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811056e0:	01000044 	movi	r4,1
811056e4:	11224640 	call	81122464 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811056e8:	e0bffe17 	ldw	r2,-8(fp)
811056ec:	e0fffa03 	ldbu	r3,-24(fp)
811056f0:	10c00005 	stb	r3,0(r2)
}
811056f4:	0001883a 	nop
811056f8:	e037883a 	mov	sp,fp
811056fc:	dfc00117 	ldw	ra,4(sp)
81105700:	df000017 	ldw	fp,0(sp)
81105704:	dec00204 	addi	sp,sp,8
81105708:	f800283a 	ret

8110570c <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
8110570c:	defffd04 	addi	sp,sp,-12
81105710:	df000215 	stw	fp,8(sp)
81105714:	df000204 	addi	fp,sp,8
81105718:	e13ffe15 	stw	r4,-8(fp)
8110571c:	2805883a 	mov	r2,r5
81105720:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
81105724:	e0bffe17 	ldw	r2,-8(fp)
81105728:	10800058 	cmpnei	r2,r2,1
8110572c:	1000071e 	bne	r2,zero,8110574c <bSetBoardLeds+0x40>
	  LedsBoardControl &= (~LedsMask);
81105730:	e0bfff03 	ldbu	r2,-4(fp)
81105734:	0084303a 	nor	r2,zero,r2
81105738:	1007883a 	mov	r3,r2
8110573c:	d0a04f03 	ldbu	r2,-32452(gp)
81105740:	1884703a 	and	r2,r3,r2
81105744:	d0a04f05 	stb	r2,-32452(gp)
81105748:	00000406 	br	8110575c <bSetBoardLeds+0x50>
  } else {
	  LedsBoardControl |= LedsMask;
8110574c:	d0e04f03 	ldbu	r3,-32452(gp)
81105750:	e0bfff03 	ldbu	r2,-4(fp)
81105754:	1884b03a 	or	r2,r3,r2
81105758:	d0a04f05 	stb	r2,-32452(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110575c:	d0a04f03 	ldbu	r2,-32452(gp)
81105760:	10c03fcc 	andi	r3,r2,255
81105764:	00a00034 	movhi	r2,32768
81105768:	10816c04 	addi	r2,r2,1456
8110576c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81105770:	00800044 	movi	r2,1
}
81105774:	e037883a 	mov	sp,fp
81105778:	df000017 	ldw	fp,0(sp)
8110577c:	dec00104 	addi	sp,sp,4
81105780:	f800283a 	ret

81105784 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81105784:	defffd04 	addi	sp,sp,-12
81105788:	df000215 	stw	fp,8(sp)
8110578c:	df000204 	addi	fp,sp,8
81105790:	e13ffe15 	stw	r4,-8(fp)
81105794:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81105798:	e0bffe17 	ldw	r2,-8(fp)
8110579c:	10800058 	cmpnei	r2,r2,1
811057a0:	1000051e 	bne	r2,zero,811057b8 <bSetPainelLeds+0x34>
	  LedsPainelControl |= LedsMask;
811057a4:	d0e05017 	ldw	r3,-32448(gp)
811057a8:	e0bfff17 	ldw	r2,-4(fp)
811057ac:	1884b03a 	or	r2,r3,r2
811057b0:	d0a05015 	stw	r2,-32448(gp)
811057b4:	00000506 	br	811057cc <bSetPainelLeds+0x48>
  } else {
	  LedsPainelControl &= (~LedsMask);
811057b8:	e0bfff17 	ldw	r2,-4(fp)
811057bc:	0086303a 	nor	r3,zero,r2
811057c0:	d0a05017 	ldw	r2,-32448(gp)
811057c4:	1884703a 	and	r2,r3,r2
811057c8:	d0a05015 	stw	r2,-32448(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811057cc:	d0a05017 	ldw	r2,-32448(gp)
811057d0:	1007883a 	mov	r3,r2
811057d4:	00a00034 	movhi	r2,32768
811057d8:	10813804 	addi	r2,r2,1248
811057dc:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811057e0:	00800044 	movi	r2,1
}
811057e4:	e037883a 	mov	sp,fp
811057e8:	df000017 	ldw	fp,0(sp)
811057ec:	dec00104 	addi	sp,sp,4
811057f0:	f800283a 	ret

811057f4 <PGEN_WRITE_REG32>:
 */

	#include "pgen.h"


	void PGEN_WRITE_REG32(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811057f4:	defffc04 	addi	sp,sp,-16
811057f8:	df000315 	stw	fp,12(sp)
811057fc:	df000304 	addi	fp,sp,12
81105800:	2005883a 	mov	r2,r4
81105804:	e17fff15 	stw	r5,-4(fp)
81105808:	e0bffe05 	stb	r2,-8(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
8110580c:	00a04834 	movhi	r2,33056
81105810:	108f0004 	addi	r2,r2,15360
81105814:	e0bffd15 	stw	r2,-12(fp)
		*(pPgenAddr + (alt_u32)uc_RegisterAddress) = (alt_u32) ul_RegisterValue;
81105818:	e0bffe03 	ldbu	r2,-8(fp)
8110581c:	1085883a 	add	r2,r2,r2
81105820:	1085883a 	add	r2,r2,r2
81105824:	1007883a 	mov	r3,r2
81105828:	e0bffd17 	ldw	r2,-12(fp)
8110582c:	10c5883a 	add	r2,r2,r3
81105830:	e0ffff17 	ldw	r3,-4(fp)
81105834:	10c00015 	stw	r3,0(r2)
	}
81105838:	0001883a 	nop
8110583c:	e037883a 	mov	sp,fp
81105840:	df000017 	ldw	fp,0(sp)
81105844:	dec00104 	addi	sp,sp,4
81105848:	f800283a 	ret

8110584c <PGEN_READ_REG32>:

	alt_u32 PGEN_READ_REG32(alt_u8 uc_RegisterAddress){
8110584c:	defffc04 	addi	sp,sp,-16
81105850:	df000315 	stw	fp,12(sp)
81105854:	df000304 	addi	fp,sp,12
81105858:	2005883a 	mov	r2,r4
8110585c:	e0bfff05 	stb	r2,-4(fp)
		alt_u32 RegisterValue = 0;
81105860:	e03ffd15 	stw	zero,-12(fp)
		alt_u32 *pPgenAddr = PGEN_BASE;
81105864:	00a04834 	movhi	r2,33056
81105868:	108f0004 	addi	r2,r2,15360
8110586c:	e0bffe15 	stw	r2,-8(fp)
		RegisterValue = *(pPgenAddr + (alt_u32)uc_RegisterAddress);
81105870:	e0bfff03 	ldbu	r2,-4(fp)
81105874:	1085883a 	add	r2,r2,r2
81105878:	1085883a 	add	r2,r2,r2
8110587c:	1007883a 	mov	r3,r2
81105880:	e0bffe17 	ldw	r2,-8(fp)
81105884:	10c5883a 	add	r2,r2,r3
81105888:	10800017 	ldw	r2,0(r2)
8110588c:	e0bffd15 	stw	r2,-12(fp)
		return RegisterValue;
81105890:	e0bffd17 	ldw	r2,-12(fp)
	}
81105894:	e037883a 	mov	sp,fp
81105898:	df000017 	ldw	fp,0(sp)
8110589c:	dec00104 	addi	sp,sp,4
811058a0:	f800283a 	ret

811058a4 <b_Pattern_Generator_Write_Register>:

	bool b_Pattern_Generator_Write_Register(alt_u8 uc_RegisterAddress, alt_u32 ul_RegisterValue){
811058a4:	defffb04 	addi	sp,sp,-20
811058a8:	dfc00415 	stw	ra,16(sp)
811058ac:	df000315 	stw	fp,12(sp)
811058b0:	df000304 	addi	fp,sp,12
811058b4:	2005883a 	mov	r2,r4
811058b8:	e17fff15 	stw	r5,-4(fp)
811058bc:	e0bffe05 	stb	r2,-8(fp)

		bool bSuccess = FALSE;
811058c0:	e03ffd15 	stw	zero,-12(fp)

		if (uc_RegisterAddress <= 0x01) {
811058c4:	e0bffe03 	ldbu	r2,-8(fp)
811058c8:	108000a8 	cmpgeui	r2,r2,2
811058cc:	1000061e 	bne	r2,zero,811058e8 <b_Pattern_Generator_Write_Register+0x44>
			PGEN_WRITE_REG32(uc_RegisterAddress, ul_RegisterValue);
811058d0:	e0bffe03 	ldbu	r2,-8(fp)
811058d4:	e17fff17 	ldw	r5,-4(fp)
811058d8:	1009883a 	mov	r4,r2
811058dc:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
811058e0:	00800044 	movi	r2,1
811058e4:	e0bffd15 	stw	r2,-12(fp)
		}

		return bSuccess;
811058e8:	e0bffd17 	ldw	r2,-12(fp)
	}
811058ec:	e037883a 	mov	sp,fp
811058f0:	dfc00117 	ldw	ra,4(sp)
811058f4:	df000017 	ldw	fp,0(sp)
811058f8:	dec00204 	addi	sp,sp,8
811058fc:	f800283a 	ret

81105900 <ul_Pattern_Generator_Read_Register>:

	alt_u32 ul_Pattern_Generator_Read_Register(alt_u8 uc_RegisterAddress){
81105900:	defffc04 	addi	sp,sp,-16
81105904:	dfc00315 	stw	ra,12(sp)
81105908:	df000215 	stw	fp,8(sp)
8110590c:	df000204 	addi	fp,sp,8
81105910:	2005883a 	mov	r2,r4
81105914:	e0bfff05 	stb	r2,-4(fp)

		alt_u32 ul_RegisterValue = 0;
81105918:	e03ffe15 	stw	zero,-8(fp)

		if (uc_RegisterAddress <= 0x01) {
8110591c:	e0bfff03 	ldbu	r2,-4(fp)
81105920:	108000a8 	cmpgeui	r2,r2,2
81105924:	1000041e 	bne	r2,zero,81105938 <ul_Pattern_Generator_Read_Register+0x38>
			ul_RegisterValue = PGEN_READ_REG32(uc_RegisterAddress);
81105928:	e0bfff03 	ldbu	r2,-4(fp)
8110592c:	1009883a 	mov	r4,r2
81105930:	110584c0 	call	8110584c <PGEN_READ_REG32>
81105934:	e0bffe15 	stw	r2,-8(fp)
		}

		return ul_RegisterValue;
81105938:	e0bffe17 	ldw	r2,-8(fp)
	}
8110593c:	e037883a 	mov	sp,fp
81105940:	dfc00117 	ldw	ra,4(sp)
81105944:	df000017 	ldw	fp,0(sp)
81105948:	dec00204 	addi	sp,sp,8
8110594c:	f800283a 	ret

81105950 <v_Pattern_Generator_Start>:

	void v_Pattern_Generator_Start(void){
81105950:	defffe04 	addi	sp,sp,-8
81105954:	dfc00115 	stw	ra,4(sp)
81105958:	df000015 	stw	fp,0(sp)
8110595c:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_START_CONTROL_BIT_MASK);
81105960:	01400404 	movi	r5,16
81105964:	0009883a 	mov	r4,zero
81105968:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>

	}
8110596c:	0001883a 	nop
81105970:	e037883a 	mov	sp,fp
81105974:	dfc00117 	ldw	ra,4(sp)
81105978:	df000017 	ldw	fp,0(sp)
8110597c:	dec00204 	addi	sp,sp,8
81105980:	f800283a 	ret

81105984 <v_Pattern_Generator_Stop>:

	void v_Pattern_Generator_Stop(void){
81105984:	defffe04 	addi	sp,sp,-8
81105988:	dfc00115 	stw	ra,4(sp)
8110598c:	df000015 	stw	fp,0(sp)
81105990:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_STOP_CONTROL_BIT_MASK);
81105994:	01400204 	movi	r5,8
81105998:	0009883a 	mov	r4,zero
8110599c:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>

	}
811059a0:	0001883a 	nop
811059a4:	e037883a 	mov	sp,fp
811059a8:	dfc00117 	ldw	ra,4(sp)
811059ac:	df000017 	ldw	fp,0(sp)
811059b0:	dec00204 	addi	sp,sp,8
811059b4:	f800283a 	ret

811059b8 <v_Pattern_Generator_Reset>:

	void v_Pattern_Generator_Reset(void){
811059b8:	defffe04 	addi	sp,sp,-8
811059bc:	dfc00115 	stw	ra,4(sp)
811059c0:	df000015 	stw	fp,0(sp)
811059c4:	d839883a 	mov	fp,sp

		PGEN_WRITE_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS, (alt_u32)PGEN_RESET_CONTROL_BIT_MASK);
811059c8:	01400104 	movi	r5,4
811059cc:	0009883a 	mov	r4,zero
811059d0:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>

	}
811059d4:	0001883a 	nop
811059d8:	e037883a 	mov	sp,fp
811059dc:	dfc00117 	ldw	ra,4(sp)
811059e0:	df000017 	ldw	fp,0(sp)
811059e4:	dec00204 	addi	sp,sp,8
811059e8:	f800283a 	ret

811059ec <Pattern_Generator_Status>:

	alt_u32 Pattern_Generator_Status(void){
811059ec:	defffc04 	addi	sp,sp,-16
811059f0:	dfc00315 	stw	ra,12(sp)
811059f4:	df000215 	stw	fp,8(sp)
811059f8:	df000204 	addi	fp,sp,8

		const alt_u32 ul_pgen_mask = PGEN_RESETED_STATUS_BIT_MASK | PGEN_STOPPED_STATUS_BIT_MASK;
811059fc:	008000c4 	movi	r2,3
81105a00:	e0bffe15 	stw	r2,-8(fp)
		alt_u32 ul_pgen_status_value = PGEN_READ_REG32(PGEN_GENERATOR_CONTROL_STATUS_REGISTER_ADDRESS) & ul_pgen_mask;
81105a04:	0009883a 	mov	r4,zero
81105a08:	110584c0 	call	8110584c <PGEN_READ_REG32>
81105a0c:	1007883a 	mov	r3,r2
81105a10:	e0bffe17 	ldw	r2,-8(fp)
81105a14:	1884703a 	and	r2,r3,r2
81105a18:	e0bfff15 	stw	r2,-4(fp)

		return ul_pgen_status_value;
81105a1c:	e0bfff17 	ldw	r2,-4(fp)
	}
81105a20:	e037883a 	mov	sp,fp
81105a24:	dfc00117 	ldw	ra,4(sp)
81105a28:	df000017 	ldw	fp,0(sp)
81105a2c:	dec00204 	addi	sp,sp,8
81105a30:	f800283a 	ret

81105a34 <Pattern_Generator_Configure_Initial_State>:

	bool Pattern_Generator_Configure_Initial_State(alt_u8 uc_Initial_CCD_ID, alt_u8 uc_Initial_CCD_SIDE, alt_u8 uc_Initial_TimeCode){
81105a34:	defff904 	addi	sp,sp,-28
81105a38:	dfc00615 	stw	ra,24(sp)
81105a3c:	df000515 	stw	fp,20(sp)
81105a40:	df000504 	addi	fp,sp,20
81105a44:	2807883a 	mov	r3,r5
81105a48:	3005883a 	mov	r2,r6
81105a4c:	e13ffd05 	stb	r4,-12(fp)
81105a50:	e0fffe05 	stb	r3,-8(fp)
81105a54:	e0bfff05 	stb	r2,-4(fp)

		bool bSuccess = FALSE;
81105a58:	e03ffb15 	stw	zero,-20(fp)

		alt_u32 initial_state_config_value;
		if ((uc_Initial_CCD_ID < 4) && (uc_Initial_CCD_SIDE < 2)) {
81105a5c:	e0bffd03 	ldbu	r2,-12(fp)
81105a60:	10800128 	cmpgeui	r2,r2,4
81105a64:	1000101e 	bne	r2,zero,81105aa8 <Pattern_Generator_Configure_Initial_State+0x74>
81105a68:	e0bffe03 	ldbu	r2,-8(fp)
81105a6c:	108000a8 	cmpgeui	r2,r2,2
81105a70:	10000d1e 	bne	r2,zero,81105aa8 <Pattern_Generator_Configure_Initial_State+0x74>
			initial_state_config_value = (((alt_u32)uc_Initial_CCD_ID) << 9) | (((alt_u32)uc_Initial_CCD_SIDE) << 8) | ((alt_u32)uc_Initial_TimeCode);
81105a74:	e0bffd03 	ldbu	r2,-12(fp)
81105a78:	1006927a 	slli	r3,r2,9
81105a7c:	e0bffe03 	ldbu	r2,-8(fp)
81105a80:	1004923a 	slli	r2,r2,8
81105a84:	1886b03a 	or	r3,r3,r2
81105a88:	e0bfff03 	ldbu	r2,-4(fp)
81105a8c:	1884b03a 	or	r2,r3,r2
81105a90:	e0bffc15 	stw	r2,-16(fp)
			PGEN_WRITE_REG32(PGEN_INITIAL_TRANSMISSION_STATE_REGISTER_ADDRESS, initial_state_config_value);
81105a94:	e17ffc17 	ldw	r5,-16(fp)
81105a98:	01000044 	movi	r4,1
81105a9c:	11057f40 	call	811057f4 <PGEN_WRITE_REG32>
			bSuccess = TRUE;
81105aa0:	00800044 	movi	r2,1
81105aa4:	e0bffb15 	stw	r2,-20(fp)
		}

		return bSuccess;
81105aa8:	e0bffb17 	ldw	r2,-20(fp)
	}
81105aac:	e037883a 	mov	sp,fp
81105ab0:	dfc00117 	ldw	ra,4(sp)
81105ab4:	df000017 	ldw	fp,0(sp)
81105ab8:	dec00204 	addi	sp,sp,8
81105abc:	f800283a 	ret

81105ac0 <POWER_SPI_RW>:
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock


// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN, bool bSGL, alt_u32 *pValue)
{
81105ac0:	defff204 	addi	sp,sp,-56
81105ac4:	dfc00d15 	stw	ra,52(sp)
81105ac8:	df000c15 	stw	fp,48(sp)
81105acc:	df000c04 	addi	fp,sp,48
81105ad0:	2007883a 	mov	r3,r4
81105ad4:	2805883a 	mov	r2,r5
81105ad8:	e1bffe15 	stw	r6,-8(fp)
81105adc:	e1ffff15 	stw	r7,-4(fp)
81105ae0:	e0fffc05 	stb	r3,-16(fp)
81105ae4:	e0bffd05 	stb	r2,-12(fp)
    bool bSuccess;
    alt_u8 Config8;
    alt_u32 Value32=0, Mask32;
81105ae8:	e03ff515 	stw	zero,-44(fp)
    int i, nWait = 0, nZeroCnt;
81105aec:	e03ff815 	stw	zero,-32(fp)
    const int nMaxWait = 1000000;
81105af0:	008003f4 	movhi	r2,15
81105af4:	10909004 	addi	r2,r2,16960
81105af8:	e0bffa15 	stw	r2,-24(fp)
    
    //
    Config8 = 0x80; 
81105afc:	00bfe004 	movi	r2,-128
81105b00:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bEN)?0x20:0x00;
81105b04:	e0bffe17 	ldw	r2,-8(fp)
81105b08:	10000226 	beq	r2,zero,81105b14 <POWER_SPI_RW+0x54>
81105b0c:	00800804 	movi	r2,32
81105b10:	00000106 	br	81105b18 <POWER_SPI_RW+0x58>
81105b14:	0005883a 	mov	r2,zero
81105b18:	e0fff403 	ldbu	r3,-48(fp)
81105b1c:	10c4b03a 	or	r2,r2,r3
81105b20:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSGL)?0x10:0x00;
81105b24:	e0800217 	ldw	r2,8(fp)
81105b28:	10000226 	beq	r2,zero,81105b34 <POWER_SPI_RW+0x74>
81105b2c:	00800404 	movi	r2,16
81105b30:	00000106 	br	81105b38 <POWER_SPI_RW+0x78>
81105b34:	0005883a 	mov	r2,zero
81105b38:	e0fff403 	ldbu	r3,-48(fp)
81105b3c:	10c4b03a 	or	r2,r2,r3
81105b40:	e0bff405 	stb	r2,-48(fp)
    Config8 |= (bSIGN)?0x08:0x00;
81105b44:	e0bfff17 	ldw	r2,-4(fp)
81105b48:	10000226 	beq	r2,zero,81105b54 <POWER_SPI_RW+0x94>
81105b4c:	00800204 	movi	r2,8
81105b50:	00000106 	br	81105b58 <POWER_SPI_RW+0x98>
81105b54:	0005883a 	mov	r2,zero
81105b58:	e0fff403 	ldbu	r3,-48(fp)
81105b5c:	10c4b03a 	or	r2,r2,r3
81105b60:	e0bff405 	stb	r2,-48(fp)
    Config8 |= NextChannel & 0x07; // channel
81105b64:	e0bffd03 	ldbu	r2,-12(fp)
81105b68:	108001cc 	andi	r2,r2,7
81105b6c:	1007883a 	mov	r3,r2
81105b70:	e0bff403 	ldbu	r2,-48(fp)
81105b74:	1884b03a 	or	r2,r3,r2
81105b78:	e0bff405 	stb	r2,-48(fp)
    
    SPI_FO(0); // use internal conversion clock
81105b7c:	0007883a 	mov	r3,zero
81105b80:	00a00034 	movhi	r2,32768
81105b84:	10813c04 	addi	r2,r2,1264
81105b88:	10c00035 	stwio	r3,0(r2)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
81105b8c:	0007883a 	mov	r3,zero
81105b90:	00a00034 	movhi	r2,32768
81105b94:	10814404 	addi	r2,r2,1296
81105b98:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(IcIndex, 0);  // chip select: active
81105b9c:	e0bffc03 	ldbu	r2,-16(fp)
81105ba0:	1000021e 	bne	r2,zero,81105bac <POWER_SPI_RW+0xec>
81105ba4:	00c00084 	movi	r3,2
81105ba8:	00000106 	br	81105bb0 <POWER_SPI_RW+0xf0>
81105bac:	00c00044 	movi	r3,1
81105bb0:	00a00034 	movhi	r2,32768
81105bb4:	10814004 	addi	r2,r2,1280
81105bb8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105bbc:	010003c4 	movi	r4,15
81105bc0:	11224640 	call	81122464 <usleep>
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105bc4:	00000306 	br	81105bd4 <POWER_SPI_RW+0x114>
        nWait++;
81105bc8:	e0bff817 	ldw	r2,-32(fp)
81105bcc:	10800044 	addi	r2,r2,1
81105bd0:	e0bff815 	stw	r2,-32(fp)
    SPI_SCK(0);  // set low to active extenal serial clock mode.
    SPI_CS_N(IcIndex, 0);  // chip select: active
    SPI_DELAY;
    
    // wait for converion end (when conversion done, SPI_SDO is low)
    while(SPI_SDO && nWait < nMaxWait){
81105bd4:	00a00034 	movhi	r2,32768
81105bd8:	10814c04 	addi	r2,r2,1328
81105bdc:	10800037 	ldwio	r2,0(r2)
81105be0:	1080004c 	andi	r2,r2,1
81105be4:	10000326 	beq	r2,zero,81105bf4 <POWER_SPI_RW+0x134>
81105be8:	e0fff817 	ldw	r3,-32(fp)
81105bec:	e0bffa17 	ldw	r2,-24(fp)
81105bf0:	18bff516 	blt	r3,r2,81105bc8 <__reset+0xfb0e5bc8>
        nWait++;
    }
    
    if (SPI_SDO){
81105bf4:	00a00034 	movhi	r2,32768
81105bf8:	10814c04 	addi	r2,r2,1328
81105bfc:	10800037 	ldwio	r2,0(r2)
81105c00:	1080004c 	andi	r2,r2,1
81105c04:	10000626 	beq	r2,zero,81105c20 <POWER_SPI_RW+0x160>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
81105c08:	00c000c4 	movi	r3,3
81105c0c:	00a00034 	movhi	r2,32768
81105c10:	10814004 	addi	r2,r2,1280
81105c14:	10c00035 	stwio	r3,0(r2)
//        printf("Timeout \r\n");
        return FALSE;
81105c18:	0005883a 	mov	r2,zero
81105c1c:	0000db06 	br	81105f8c <POWER_SPI_RW+0x4cc>
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105c20:	e03ff715 	stw	zero,-36(fp)
81105c24:	00002406 	br	81105cb8 <POWER_SPI_RW+0x1f8>
    // ignore EOC/ and DMY bits
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105c28:	e0bff403 	ldbu	r2,-48(fp)
81105c2c:	10803fcc 	andi	r2,r2,255
81105c30:	1004d1fa 	srli	r2,r2,7
81105c34:	10c03fcc 	andi	r3,r2,255
81105c38:	00a00034 	movhi	r2,32768
81105c3c:	10814804 	addi	r2,r2,1312
81105c40:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105c44:	e0bff403 	ldbu	r2,-48(fp)
81105c48:	1085883a 	add	r2,r2,r2
81105c4c:	e0bff405 	stb	r2,-48(fp)
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81105c50:	e0bff517 	ldw	r2,-44(fp)
81105c54:	1085883a 	add	r2,r2,r2
81105c58:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81105c5c:	00a00034 	movhi	r2,32768
81105c60:	10814c04 	addi	r2,r2,1328
81105c64:	10800037 	ldwio	r2,0(r2)
81105c68:	1080004c 	andi	r2,r2,1
81105c6c:	1007883a 	mov	r3,r2
81105c70:	e0bff517 	ldw	r2,-44(fp)
81105c74:	10c4b03a 	or	r2,r2,r3
81105c78:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105c7c:	00c00044 	movi	r3,1
81105c80:	00a00034 	movhi	r2,32768
81105c84:	10814404 	addi	r2,r2,1296
81105c88:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105c8c:	010003c4 	movi	r4,15
81105c90:	11224640 	call	81122464 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105c94:	0007883a 	mov	r3,zero
81105c98:	00a00034 	movhi	r2,32768
81105c9c:	10814404 	addi	r2,r2,1296
81105ca0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ca4:	010003c4 	movi	r4,15
81105ca8:	11224640 	call	81122464 <usleep>
        SPI_CS_N(IcIndex, 1);  // chip select: inactive
//        printf("Timeout \r\n");
        return FALSE;
    }
    
    for(i=0;i<2;i++) // send config bits 7:6,
81105cac:	e0bff717 	ldw	r2,-36(fp)
81105cb0:	10800044 	addi	r2,r2,1
81105cb4:	e0bff715 	stw	r2,-36(fp)
81105cb8:	e0bff717 	ldw	r2,-36(fp)
81105cbc:	10800090 	cmplti	r2,r2,2
81105cc0:	103fd91e 	bne	r2,zero,81105c28 <__reset+0xfb0e5c28>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81105cc4:	e03ff715 	stw	zero,-36(fp)
81105cc8:	00002406 	br	81105d5c <POWER_SPI_RW+0x29c>
    {
        SPI_SDI((Config8 & 0x80)?1:0);//sdi=nextch.7; // put data on pin
81105ccc:	e0bff403 	ldbu	r2,-48(fp)
81105cd0:	10803fcc 	andi	r2,r2,255
81105cd4:	1004d1fa 	srli	r2,r2,7
81105cd8:	10c03fcc 	andi	r3,r2,255
81105cdc:	00a00034 	movhi	r2,32768
81105ce0:	10814804 	addi	r2,r2,1312
81105ce4:	10c00035 	stwio	r3,0(r2)
        Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81105ce8:	e0bff403 	ldbu	r2,-48(fp)
81105cec:	1085883a 	add	r2,r2,r2
81105cf0:	e0bff405 	stb	r2,-48(fp)
        
        Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81105cf4:	e0bff517 	ldw	r2,-44(fp)
81105cf8:	1085883a 	add	r2,r2,r2
81105cfc:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81105d00:	00a00034 	movhi	r2,32768
81105d04:	10814c04 	addi	r2,r2,1328
81105d08:	10800037 	ldwio	r2,0(r2)
81105d0c:	1080004c 	andi	r2,r2,1
81105d10:	1007883a 	mov	r3,r2
81105d14:	e0bff517 	ldw	r2,-44(fp)
81105d18:	10c4b03a 	or	r2,r2,r3
81105d1c:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105d20:	00c00044 	movi	r3,1
81105d24:	00a00034 	movhi	r2,32768
81105d28:	10814404 	addi	r2,r2,1296
81105d2c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105d30:	010003c4 	movi	r4,15
81105d34:	11224640 	call	81122464 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105d38:	0007883a 	mov	r3,zero
81105d3c:	00a00034 	movhi	r2,32768
81105d40:	10814404 	addi	r2,r2,1296
81105d44:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105d48:	010003c4 	movi	r4,15
81105d4c:	11224640 	call	81122464 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // send config, read byte 3
81105d50:	e0bff717 	ldw	r2,-36(fp)
81105d54:	10800044 	addi	r2,r2,1
81105d58:	e0bff715 	stw	r2,-36(fp)
81105d5c:	e0bff717 	ldw	r2,-36(fp)
81105d60:	10800210 	cmplti	r2,r2,8
81105d64:	103fd91e 	bne	r2,zero,81105ccc <__reset+0xfb0e5ccc>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81105d68:	e03ff715 	stw	zero,-36(fp)
81105d6c:	00001a06 	br	81105dd8 <POWER_SPI_RW+0x318>
    {
        Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81105d70:	e0bff517 	ldw	r2,-44(fp)
81105d74:	1085883a 	add	r2,r2,r2
81105d78:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81105d7c:	00a00034 	movhi	r2,32768
81105d80:	10814c04 	addi	r2,r2,1328
81105d84:	10800037 	ldwio	r2,0(r2)
81105d88:	1080004c 	andi	r2,r2,1
81105d8c:	1007883a 	mov	r3,r2
81105d90:	e0bff517 	ldw	r2,-44(fp)
81105d94:	10c4b03a 	or	r2,r2,r3
81105d98:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105d9c:	00c00044 	movi	r3,1
81105da0:	00a00034 	movhi	r2,32768
81105da4:	10814404 	addi	r2,r2,1296
81105da8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105dac:	010003c4 	movi	r4,15
81105db0:	11224640 	call	81122464 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105db4:	0007883a 	mov	r3,zero
81105db8:	00a00034 	movhi	r2,32768
81105dbc:	10814404 	addi	r2,r2,1296
81105dc0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105dc4:	010003c4 	movi	r4,15
81105dc8:	11224640 	call	81122464 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 2
81105dcc:	e0bff717 	ldw	r2,-36(fp)
81105dd0:	10800044 	addi	r2,r2,1
81105dd4:	e0bff715 	stw	r2,-36(fp)
81105dd8:	e0bff717 	ldw	r2,-36(fp)
81105ddc:	10800210 	cmplti	r2,r2,8
81105de0:	103fe31e 	bne	r2,zero,81105d70 <__reset+0xfb0e5d70>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81105de4:	e03ff715 	stw	zero,-36(fp)
81105de8:	00001a06 	br	81105e54 <POWER_SPI_RW+0x394>
    {
        Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81105dec:	e0bff517 	ldw	r2,-44(fp)
81105df0:	1085883a 	add	r2,r2,r2
81105df4:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_1.0 = sdo; // load lsb
81105df8:	00a00034 	movhi	r2,32768
81105dfc:	10814c04 	addi	r2,r2,1328
81105e00:	10800037 	ldwio	r2,0(r2)
81105e04:	1080004c 	andi	r2,r2,1
81105e08:	1007883a 	mov	r3,r2
81105e0c:	e0bff517 	ldw	r2,-44(fp)
81105e10:	10c4b03a 	or	r2,r2,r3
81105e14:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105e18:	00c00044 	movi	r3,1
81105e1c:	00a00034 	movhi	r2,32768
81105e20:	10814404 	addi	r2,r2,1296
81105e24:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105e28:	010003c4 	movi	r4,15
81105e2c:	11224640 	call	81122464 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105e30:	0007883a 	mov	r3,zero
81105e34:	00a00034 	movhi	r2,32768
81105e38:	10814404 	addi	r2,r2,1296
81105e3c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105e40:	010003c4 	movi	r4,15
81105e44:	11224640 	call	81122464 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<8;i++) // read byte 1
81105e48:	e0bff717 	ldw	r2,-36(fp)
81105e4c:	10800044 	addi	r2,r2,1
81105e50:	e0bff715 	stw	r2,-36(fp)
81105e54:	e0bff717 	ldw	r2,-36(fp)
81105e58:	10800210 	cmplti	r2,r2,8
81105e5c:	103fe31e 	bne	r2,zero,81105dec <__reset+0xfb0e5dec>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81105e60:	e03ff715 	stw	zero,-36(fp)
81105e64:	00001a06 	br	81105ed0 <POWER_SPI_RW+0x410>
    {
        Value32 <<= 1;//result_0 = rl(result_0);// get ready to load lsb
81105e68:	e0bff517 	ldw	r2,-44(fp)
81105e6c:	1085883a 	add	r2,r2,r2
81105e70:	e0bff515 	stw	r2,-44(fp)
        Value32 |= SPI_SDO;//result_0.0 = sdo; // load lsb
81105e74:	00a00034 	movhi	r2,32768
81105e78:	10814c04 	addi	r2,r2,1328
81105e7c:	10800037 	ldwio	r2,0(r2)
81105e80:	1080004c 	andi	r2,r2,1
81105e84:	1007883a 	mov	r3,r2
81105e88:	e0bff517 	ldw	r2,-44(fp)
81105e8c:	10c4b03a 	or	r2,r2,r3
81105e90:	e0bff515 	stw	r2,-44(fp)
        
        SPI_SCK(1);//sck=1; // clock high
81105e94:	00c00044 	movi	r3,1
81105e98:	00a00034 	movhi	r2,32768
81105e9c:	10814404 	addi	r2,r2,1296
81105ea0:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ea4:	010003c4 	movi	r4,15
81105ea8:	11224640 	call	81122464 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81105eac:	0007883a 	mov	r3,zero
81105eb0:	00a00034 	movhi	r2,32768
81105eb4:	10814404 	addi	r2,r2,1296
81105eb8:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81105ebc:	010003c4 	movi	r4,15
81105ec0:	11224640 	call	81122464 <usleep>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    
    for(i=0;i<6;i++) // read byte 0
81105ec4:	e0bff717 	ldw	r2,-36(fp)
81105ec8:	10800044 	addi	r2,r2,1
81105ecc:	e0bff715 	stw	r2,-36(fp)
81105ed0:	e0bff717 	ldw	r2,-36(fp)
81105ed4:	10800190 	cmplti	r2,r2,6
81105ed8:	103fe31e 	bne	r2,zero,81105e68 <__reset+0xfb0e5e68>
        SPI_SCK(1);//sck=1; // clock high
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }
    SPI_SCK(1);
81105edc:	00c00044 	movi	r3,1
81105ee0:	00a00034 	movhi	r2,32768
81105ee4:	10814404 	addi	r2,r2,1296
81105ee8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105eec:	010003c4 	movi	r4,15
81105ef0:	11224640 	call	81122464 <usleep>
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
81105ef4:	00c000c4 	movi	r3,3
81105ef8:	00a00034 	movhi	r2,32768
81105efc:	10814004 	addi	r2,r2,1280
81105f00:	10c00035 	stwio	r3,0(r2)
    
    // check parity
    nZeroCnt = 0;
81105f04:	e03ff915 	stw	zero,-28(fp)
    Mask32 = 0x01;
81105f08:	00800044 	movi	r2,1
81105f0c:	e0bff615 	stw	r2,-40(fp)
    for(i=0;i<32;i++){
81105f10:	e03ff715 	stw	zero,-36(fp)
81105f14:	00000d06 	br	81105f4c <POWER_SPI_RW+0x48c>
        if ((Value32 & Mask32) == 0x00){
81105f18:	e0fff517 	ldw	r3,-44(fp)
81105f1c:	e0bff617 	ldw	r2,-40(fp)
81105f20:	1884703a 	and	r2,r3,r2
81105f24:	1000031e 	bne	r2,zero,81105f34 <POWER_SPI_RW+0x474>
            nZeroCnt++;
81105f28:	e0bff917 	ldw	r2,-28(fp)
81105f2c:	10800044 	addi	r2,r2,1
81105f30:	e0bff915 	stw	r2,-28(fp)
        }
        Mask32 <<= 1;
81105f34:	e0bff617 	ldw	r2,-40(fp)
81105f38:	1085883a 	add	r2,r2,r2
81105f3c:	e0bff615 	stw	r2,-40(fp)
    SPI_CS_N(IcIndex, 1);  // chip select: inactive
    
    // check parity
    nZeroCnt = 0;
    Mask32 = 0x01;
    for(i=0;i<32;i++){
81105f40:	e0bff717 	ldw	r2,-36(fp)
81105f44:	10800044 	addi	r2,r2,1
81105f48:	e0bff715 	stw	r2,-36(fp)
81105f4c:	e0bff717 	ldw	r2,-36(fp)
81105f50:	10800810 	cmplti	r2,r2,32
81105f54:	103ff01e 	bne	r2,zero,81105f18 <__reset+0xfb0e5f18>
        if ((Value32 & Mask32) == 0x00){
            nZeroCnt++;
        }
        Mask32 <<= 1;
    }
    bSuccess = (nZeroCnt&0x01)?FALSE:TRUE;
81105f58:	e0bff917 	ldw	r2,-28(fp)
81105f5c:	1080004c 	andi	r2,r2,1
81105f60:	1005003a 	cmpeq	r2,r2,zero
81105f64:	10803fcc 	andi	r2,r2,255
81105f68:	e0bffb15 	stw	r2,-20(fp)
    if (!bSuccess){
81105f6c:	e0bffb17 	ldw	r2,-20(fp)
81105f70:	1000021e 	bne	r2,zero,81105f7c <POWER_SPI_RW+0x4bc>
//        printf("Parity Check Error \r\n");
        return FALSE;
81105f74:	0005883a 	mov	r2,zero
81105f78:	00000406 	br	81105f8c <POWER_SPI_RW+0x4cc>
    }        
    
    
    *pValue = Value32;
81105f7c:	e0800317 	ldw	r2,12(fp)
81105f80:	e0fff517 	ldw	r3,-44(fp)
81105f84:	10c00015 	stw	r3,0(r2)
    
    return bSuccess;
81105f88:	e0bffb17 	ldw	r2,-20(fp)
}
81105f8c:	e037883a 	mov	sp,fp
81105f90:	dfc00117 	ldw	ra,4(sp)
81105f94:	df000017 	ldw	fp,0(sp)
81105f98:	dec00204 	addi	sp,sp,8
81105f9c:	f800283a 	ret

81105fa0 <v_spi_start>:
#define SPI_CS_N(x) IOWR_ALTERA_AVALON_PIO_DATA(RTCC_CS_N_BASE,x)
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(RTCC_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(RTCC_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(150)  // based on 50MHZ of CPU clock

void v_spi_start(void){
81105fa0:	defffe04 	addi	sp,sp,-8
81105fa4:	dfc00115 	stw	ra,4(sp)
81105fa8:	df000015 	stw	fp,0(sp)
81105fac:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
81105fb0:	0007883a 	mov	r3,zero
81105fb4:	00a00034 	movhi	r2,32768
81105fb8:	10812404 	addi	r2,r2,1168
81105fbc:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
81105fc0:	0007883a 	mov	r3,zero
81105fc4:	00a00034 	movhi	r2,32768
81105fc8:	10812004 	addi	r2,r2,1152
81105fcc:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81105fd0:	01002584 	movi	r4,150
81105fd4:	11224640 	call	81122464 <usleep>
}
81105fd8:	0001883a 	nop
81105fdc:	e037883a 	mov	sp,fp
81105fe0:	dfc00117 	ldw	ra,4(sp)
81105fe4:	df000017 	ldw	fp,0(sp)
81105fe8:	dec00204 	addi	sp,sp,8
81105fec:	f800283a 	ret

81105ff0 <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
81105ff0:	defffc04 	addi	sp,sp,-16
81105ff4:	dfc00315 	stw	ra,12(sp)
81105ff8:	df000215 	stw	fp,8(sp)
81105ffc:	df000204 	addi	fp,sp,8
81106000:	2005883a 	mov	r2,r4
81106004:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
81106008:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
8110600c:	00bfe004 	movi	r2,-128
81106010:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81106014:	e03ffe05 	stb	zero,-8(fp)
81106018:	00001b06 	br	81106088 <v_spi_send_byte+0x98>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
8110601c:	e0ffff03 	ldbu	r3,-4(fp)
81106020:	e0bffe43 	ldbu	r2,-7(fp)
81106024:	1884703a 	and	r2,r3,r2
81106028:	10803fcc 	andi	r2,r2,255
8110602c:	1004c03a 	cmpne	r2,r2,zero
81106030:	10c03fcc 	andi	r3,r2,255
81106034:	00a00034 	movhi	r2,32768
81106038:	10812804 	addi	r2,r2,1184
8110603c:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81106040:	e0bffe43 	ldbu	r2,-7(fp)
81106044:	1004d07a 	srli	r2,r2,1
81106048:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
8110604c:	00c00044 	movi	r3,1
81106050:	00a00034 	movhi	r2,32768
81106054:	10812404 	addi	r2,r2,1168
81106058:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110605c:	01002584 	movi	r4,150
81106060:	11224640 	call	81122464 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106064:	0007883a 	mov	r3,zero
81106068:	00a00034 	movhi	r2,32768
8110606c:	10812404 	addi	r2,r2,1168
81106070:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106074:	01002584 	movi	r4,150
81106078:	11224640 	call	81122464 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
8110607c:	e0bffe03 	ldbu	r2,-8(fp)
81106080:	10800044 	addi	r2,r2,1
81106084:	e0bffe05 	stb	r2,-8(fp)
81106088:	e0bffe03 	ldbu	r2,-8(fp)
8110608c:	10800230 	cmpltui	r2,r2,8
81106090:	103fe21e 	bne	r2,zero,8110601c <__reset+0xfb0e601c>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
81106094:	0001883a 	nop
81106098:	e037883a 	mov	sp,fp
8110609c:	dfc00117 	ldw	ra,4(sp)
811060a0:	df000017 	ldw	fp,0(sp)
811060a4:	dec00204 	addi	sp,sp,8
811060a8:	f800283a 	ret

811060ac <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
811060ac:	defffd04 	addi	sp,sp,-12
811060b0:	dfc00215 	stw	ra,8(sp)
811060b4:	df000115 	stw	fp,4(sp)
811060b8:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811060bc:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811060c0:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811060c4:	e03fff05 	stb	zero,-4(fp)
811060c8:	00001a06 	br	81106134 <uc_spi_get_byte+0x88>
    {
        uc_data <<= 1;
811060cc:	e0bfff43 	ldbu	r2,-3(fp)
811060d0:	1085883a 	add	r2,r2,r2
811060d4:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811060d8:	00a00034 	movhi	r2,32768
811060dc:	10812c04 	addi	r2,r2,1200
811060e0:	10800037 	ldwio	r2,0(r2)
811060e4:	1080004c 	andi	r2,r2,1
811060e8:	1007883a 	mov	r3,r2
811060ec:	e0bfff43 	ldbu	r2,-3(fp)
811060f0:	1884b03a 	or	r2,r3,r2
811060f4:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
811060f8:	00c00044 	movi	r3,1
811060fc:	00a00034 	movhi	r2,32768
81106100:	10812404 	addi	r2,r2,1168
81106104:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106108:	01002584 	movi	r4,150
8110610c:	11224640 	call	81122464 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81106110:	0007883a 	mov	r3,zero
81106114:	00a00034 	movhi	r2,32768
81106118:	10812404 	addi	r2,r2,1168
8110611c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81106120:	01002584 	movi	r4,150
81106124:	11224640 	call	81122464 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81106128:	e0bfff03 	ldbu	r2,-4(fp)
8110612c:	10800044 	addi	r2,r2,1
81106130:	e0bfff05 	stb	r2,-4(fp)
81106134:	e0bfff03 	ldbu	r2,-4(fp)
81106138:	10800230 	cmpltui	r2,r2,8
8110613c:	103fe31e 	bne	r2,zero,811060cc <__reset+0xfb0e60cc>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
81106140:	e0bfff43 	ldbu	r2,-3(fp)
}
81106144:	e037883a 	mov	sp,fp
81106148:	dfc00117 	ldw	ra,4(sp)
8110614c:	df000017 	ldw	fp,0(sp)
81106150:	dec00204 	addi	sp,sp,8
81106154:	f800283a 	ret

81106158 <v_spi_end>:

void v_spi_end(void){
81106158:	defffe04 	addi	sp,sp,-8
8110615c:	dfc00115 	stw	ra,4(sp)
81106160:	df000015 	stw	fp,0(sp)
81106164:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
81106168:	0007883a 	mov	r3,zero
8110616c:	00a00034 	movhi	r2,32768
81106170:	10812404 	addi	r2,r2,1168
81106174:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
81106178:	01002584 	movi	r4,150
8110617c:	11224640 	call	81122464 <usleep>
    SPI_CS_N(1);
81106180:	00c00044 	movi	r3,1
81106184:	00a00034 	movhi	r2,32768
81106188:	10812004 	addi	r2,r2,1152
8110618c:	10c00035 	stwio	r3,0(r2)
}
81106190:	0001883a 	nop
81106194:	e037883a 	mov	sp,fp
81106198:	dfc00117 	ldw	ra,4(sp)
8110619c:	df000017 	ldw	fp,0(sp)
811061a0:	dec00204 	addi	sp,sp,8
811061a4:	f800283a 	ret

811061a8 <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
811061a8:	defff404 	addi	sp,sp,-48
811061ac:	dfc00b15 	stw	ra,44(sp)
811061b0:	df000a15 	stw	fp,40(sp)
811061b4:	df000a04 	addi	fp,sp,40
811061b8:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811061bc:	e03ff915 	stw	zero,-28(fp)

    alt_u8 uc_EUI48_B0 = 0;
811061c0:	e03ffa05 	stb	zero,-24(fp)
    alt_u8 uc_EUI48_B1 = 0;
811061c4:	e03ffa45 	stb	zero,-23(fp)
    alt_u8 uc_EUI48_B2 = 0;
811061c8:	e03ffa85 	stb	zero,-22(fp)
    alt_u8 uc_EUI48_B3 = 0;
811061cc:	e03ffac5 	stb	zero,-21(fp)
    alt_u8 uc_EUI48_B4 = 0;
811061d0:	e03ffb05 	stb	zero,-20(fp)
    alt_u8 uc_EUI48_B5 = 0;
811061d4:	e03ffb45 	stb	zero,-19(fp)

    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
811061d8:	00800084 	movi	r2,2
811061dc:	e0bffb85 	stb	r2,-18(fp)
    const alt_u8 uc_EUI48_B1_addr = 0x03;
811061e0:	008000c4 	movi	r2,3
811061e4:	e0bffbc5 	stb	r2,-17(fp)
    const alt_u8 uc_EUI48_B2_addr = 0x04;
811061e8:	00800104 	movi	r2,4
811061ec:	e0bffc05 	stb	r2,-16(fp)
    const alt_u8 uc_EUI48_B3_addr = 0x05;
811061f0:	00800144 	movi	r2,5
811061f4:	e0bffc45 	stb	r2,-15(fp)
    const alt_u8 uc_EUI48_B4_addr = 0x06;
811061f8:	00800184 	movi	r2,6
811061fc:	e0bffc85 	stb	r2,-14(fp)
    const alt_u8 uc_EUI48_B5_addr = 0x07;
81106200:	008001c4 	movi	r2,7
81106204:	e0bffcc5 	stb	r2,-13(fp)

    const alt_u8 uc_IDREAD_cmd = 0x33;
81106208:	00800cc4 	movi	r2,51
8110620c:	e0bffd05 	stb	r2,-12(fp)

    int i = 0;
81106210:	e03ffe15 	stw	zero,-8(fp)
    
    // Start Communication
    v_spi_start();
81106214:	1105fa00 	call	81105fa0 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81106218:	e0bffd03 	ldbu	r2,-12(fp)
8110621c:	1009883a 	mov	r4,r2
81106220:	1105ff00 	call	81105ff0 <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81106224:	e0bffb83 	ldbu	r2,-18(fp)
81106228:	1009883a 	mov	r4,r2
8110622c:	1105ff00 	call	81105ff0 <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81106230:	11060ac0 	call	811060ac <uc_spi_get_byte>
81106234:	e0bffa05 	stb	r2,-24(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81106238:	11060ac0 	call	811060ac <uc_spi_get_byte>
8110623c:	e0bffa45 	stb	r2,-23(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81106240:	11060ac0 	call	811060ac <uc_spi_get_byte>
81106244:	e0bffa85 	stb	r2,-22(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81106248:	11060ac0 	call	811060ac <uc_spi_get_byte>
8110624c:	e0bffac5 	stb	r2,-21(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81106250:	11060ac0 	call	811060ac <uc_spi_get_byte>
81106254:	e0bffb05 	stb	r2,-20(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81106258:	11060ac0 	call	811060ac <uc_spi_get_byte>
8110625c:	e0bffb45 	stb	r2,-19(fp)

    // End communication
    v_spi_end();
81106260:	11061580 	call	81106158 <v_spi_end>

    bSuccess = TRUE;
81106264:	00800044 	movi	r2,1
81106268:	e0bff915 	stw	r2,-28(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110626c:	e0bfff17 	ldw	r2,-4(fp)
81106270:	e0fffa03 	ldbu	r3,-24(fp)
81106274:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81106278:	e0bfff17 	ldw	r2,-4(fp)
8110627c:	10800044 	addi	r2,r2,1
81106280:	e0fffa43 	ldbu	r3,-23(fp)
81106284:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81106288:	e0bfff17 	ldw	r2,-4(fp)
8110628c:	10800084 	addi	r2,r2,2
81106290:	e0fffa83 	ldbu	r3,-22(fp)
81106294:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81106298:	e0bfff17 	ldw	r2,-4(fp)
8110629c:	108000c4 	addi	r2,r2,3
811062a0:	e0fffac3 	ldbu	r3,-21(fp)
811062a4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
811062a8:	e0bfff17 	ldw	r2,-4(fp)
811062ac:	10800104 	addi	r2,r2,4
811062b0:	e0fffb03 	ldbu	r3,-20(fp)
811062b4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811062b8:	e0bfff17 	ldw	r2,-4(fp)
811062bc:	10800144 	addi	r2,r2,5
811062c0:	e0fffb43 	ldbu	r3,-19(fp)
811062c4:	10c00005 	stb	r3,0(r2)

    printf("RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811062c8:	e17ffa03 	ldbu	r5,-24(fp)
811062cc:	e1bffa43 	ldbu	r6,-23(fp)
811062d0:	e1fffa83 	ldbu	r7,-22(fp)
811062d4:	e0bffac3 	ldbu	r2,-21(fp)
811062d8:	e0fffb03 	ldbu	r3,-20(fp)
811062dc:	e13ffb43 	ldbu	r4,-19(fp)
811062e0:	d9000215 	stw	r4,8(sp)
811062e4:	d8c00115 	stw	r3,4(sp)
811062e8:	d8800015 	stw	r2,0(sp)
811062ec:	012044f4 	movhi	r4,33043
811062f0:	21185304 	addi	r4,r4,24908
811062f4:	110d7800 	call	8110d780 <printf>

    return bSuccess;
811062f8:	e0bff917 	ldw	r2,-28(fp)
}
811062fc:	e037883a 	mov	sp,fp
81106300:	dfc00117 	ldw	ra,4(sp)
81106304:	df000017 	ldw	fp,0(sp)
81106308:	dec00204 	addi	sp,sp,8
8110630c:	f800283a 	ret

81106310 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81106310:	defffd04 	addi	sp,sp,-12
81106314:	df000215 	stw	fp,8(sp)
81106318:	df000204 	addi	fp,sp,8
8110631c:	2005883a 	mov	r2,r4
81106320:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
81106324:	e0bfff03 	ldbu	r2,-4(fp)
81106328:	10c00168 	cmpgeui	r3,r2,5
8110632c:	18001c1e 	bne	r3,zero,811063a0 <bSSDisplayConfig+0x90>
81106330:	100690ba 	slli	r3,r2,2
81106334:	00a04434 	movhi	r2,33040
81106338:	1098d204 	addi	r2,r2,25416
8110633c:	1885883a 	add	r2,r3,r2
81106340:	10800017 	ldw	r2,0(r2)
81106344:	1000683a 	jmp	r2
81106348:	8110635c 	xori	r4,r16,16781
8110634c:	81106368 	cmpgeui	r4,r16,16781
81106350:	81106374 	orhi	r4,r16,16781
81106354:	81106388 	cmpgei	r4,r16,16782
81106358:	81106398 	cmpnei	r4,r16,16782
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
8110635c:	00800cc4 	movi	r2,51
81106360:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106364:	00001006 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81106368:	00801544 	movi	r2,85
8110636c:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106370:	00000d06 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
81106374:	d0e05103 	ldbu	r3,-32444(gp)
81106378:	00bff744 	movi	r2,-35
8110637c:	1884703a 	and	r2,r3,r2
81106380:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106384:	00000806 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
81106388:	d0a05103 	ldbu	r2,-32444(gp)
8110638c:	10800894 	ori	r2,r2,34
81106390:	d0a05105 	stb	r2,-32444(gp)
	    break;
81106394:	00000406 	br	811063a8 <bSSDisplayConfig+0x98>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
81106398:	d0205105 	stb	zero,-32444(gp)
	    break;
8110639c:	00000206 	br	811063a8 <bSSDisplayConfig+0x98>
		
		default:
		    return FALSE;
811063a0:	0005883a 	mov	r2,zero
811063a4:	00000806 	br	811063c8 <bSSDisplayConfig+0xb8>
	}

	alt_u32 *pSsdpAddr = SSDP_BASE;
811063a8:	00a00034 	movhi	r2,32768
811063ac:	10817c04 	addi	r2,r2,1520
811063b0:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811063b4:	d0a05103 	ldbu	r2,-32444(gp)
811063b8:	10c03fcc 	andi	r3,r2,255
811063bc:	e0bffe17 	ldw	r2,-8(fp)
811063c0:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811063c4:	00800044 	movi	r2,1
}
811063c8:	e037883a 	mov	sp,fp
811063cc:	df000017 	ldw	fp,0(sp)
811063d0:	dec00104 	addi	sp,sp,4
811063d4:	f800283a 	ret

811063d8 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
811063d8:	defffd04 	addi	sp,sp,-12
811063dc:	df000215 	stw	fp,8(sp)
811063e0:	df000204 	addi	fp,sp,8
811063e4:	2005883a 	mov	r2,r4
811063e8:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = SSDP_BASE;
811063ec:	00a00034 	movhi	r2,32768
811063f0:	10817c04 	addi	r2,r2,1520
811063f4:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
811063f8:	e0bffe17 	ldw	r2,-8(fp)
811063fc:	10800104 	addi	r2,r2,4
81106400:	e0ffff03 	ldbu	r3,-4(fp)
81106404:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81106408:	00800044 	movi	r2,1
}
8110640c:	e037883a 	mov	sp,fp
81106410:	df000017 	ldw	fp,0(sp)
81106414:	dec00104 	addi	sp,sp,4
81106418:	f800283a 	ret

8110641c <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
8110641c:	defff704 	addi	sp,sp,-36
81106420:	dfc00815 	stw	ra,32(sp)
81106424:	df000715 	stw	fp,28(sp)
81106428:	df000704 	addi	fp,sp,28
8110642c:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
81106430:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81106434:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81106438:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
8110643c:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
81106440:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81106444:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81106448:	d0a05917 	ldw	r2,-32412(gp)
8110644c:	100f883a 	mov	r7,r2
81106450:	01800784 	movi	r6,30
81106454:	01400044 	movi	r5,1
81106458:	012044f4 	movhi	r4,33043
8110645c:	21186204 	addi	r4,r4,24968
81106460:	110ca840 	call	8110ca84 <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
81106464:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
81106468:	e0bffd17 	ldw	r2,-12(fp)
8110646c:	10c00060 	cmpeqi	r3,r2,1
81106470:	1800071e 	bne	r3,zero,81106490 <vInAckHandlerTask+0x74>
81106474:	0080032e 	bgeu	zero,r2,81106484 <vInAckHandlerTask+0x68>
81106478:	108000a0 	cmpeqi	r2,r2,2
8110647c:	1000451e 	bne	r2,zero,81106594 <vInAckHandlerTask+0x178>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
81106480:	00012006 	br	81106904 <vInAckHandlerTask+0x4e8>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81106484:	00800044 	movi	r2,1
81106488:	e0bffd15 	stw	r2,-12(fp)
				break;
8110648c:	00011d06 	br	81106904 <vInAckHandlerTask+0x4e8>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
81106490:	d0a05d17 	ldw	r2,-32396(gp)
81106494:	e0fffec4 	addi	r3,fp,-5
81106498:	180d883a 	mov	r6,r3
8110649c:	000b883a 	mov	r5,zero
811064a0:	1009883a 	mov	r4,r2
811064a4:	1128fdc0 	call	81128fdc <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811064a8:	e0bffec3 	ldbu	r2,-5(fp)
811064ac:	10803fcc 	andi	r2,r2,255
811064b0:	1000361e 	bne	r2,zero,8110658c <vInAckHandlerTask+0x170>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811064b4:	d0a05c17 	ldw	r2,-32400(gp)
811064b8:	e0fffec4 	addi	r3,fp,-5
811064bc:	180d883a 	mov	r6,r3
811064c0:	000b883a 	mov	r5,zero
811064c4:	1009883a 	mov	r4,r2
811064c8:	11270600 	call	81127060 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811064cc:	e0bffec3 	ldbu	r2,-5(fp)
811064d0:	10803fcc 	andi	r2,r2,255
811064d4:	10002b1e 	bne	r2,zero,81106584 <vInAckHandlerTask+0x168>
                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811064d8:	e03ffe45 	stb	zero,-7(fp)
811064dc:	00002206 	br	81106568 <vInAckHandlerTask+0x14c>
                        {
                            if ( xReceivedACK[i].cType != 0 ) {
811064e0:	e0fffe43 	ldbu	r3,-7(fp)
811064e4:	00a045b4 	movhi	r2,33046
811064e8:	10a0f304 	addi	r2,r2,-31796
811064ec:	18c7883a 	add	r3,r3,r3
811064f0:	18c7883a 	add	r3,r3,r3
811064f4:	10c5883a 	add	r2,r2,r3
811064f8:	10800003 	ldbu	r2,0(r2)
811064fc:	10803fcc 	andi	r2,r2,255
81106500:	1080201c 	xori	r2,r2,128
81106504:	10bfe004 	addi	r2,r2,-128
81106508:	10001426 	beq	r2,zero,8110655c <vInAckHandlerTask+0x140>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xRAckLocal = xReceivedACK[i];
8110650c:	e0fffe43 	ldbu	r3,-7(fp)
81106510:	00a045b4 	movhi	r2,33046
81106514:	10a0f304 	addi	r2,r2,-31796
81106518:	18c7883a 	add	r3,r3,r3
8110651c:	18c7883a 	add	r3,r3,r3
81106520:	10c5883a 	add	r2,r2,r3
81106524:	10c0000b 	ldhu	r3,0(r2)
81106528:	d0e0518d 	sth	r3,-32442(gp)
8110652c:	1080008b 	ldhu	r2,2(r2)
81106530:	d0a0520d 	sth	r2,-32440(gp)
                                eReceiverAckState = sRACleanningBuffer;
81106534:	00800084 	movi	r2,2
81106538:	e0bffd15 	stw	r2,-12(fp)
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
8110653c:	e0fffe43 	ldbu	r3,-7(fp)
81106540:	00a045b4 	movhi	r2,33046
81106544:	10a0f304 	addi	r2,r2,-31796
81106548:	18c7883a 	add	r3,r3,r3
8110654c:	18c7883a 	add	r3,r3,r3
81106550:	10c5883a 	add	r2,r2,r3
81106554:	10000005 	stb	zero,0(r2)
                                break;
81106558:	00000606 	br	81106574 <vInAckHandlerTask+0x158>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
8110655c:	e0bffe43 	ldbu	r2,-7(fp)
81106560:	10800044 	addi	r2,r2,1
81106564:	e0bffe45 	stb	r2,-7(fp)
81106568:	e0bffe43 	ldbu	r2,-7(fp)
8110656c:	10800130 	cmpltui	r2,r2,4
81106570:	103fdb1e 	bne	r2,zero,811064e0 <__reset+0xfb0e64e0>
                                eReceiverAckState = sRACleanningBuffer;
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexReceivedACK);
81106574:	d0a05c17 	ldw	r2,-32400(gp)
81106578:	1009883a 	mov	r4,r2
8110657c:	11275fc0 	call	811275fc <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
81106580:	0000e006 	br	81106904 <vInAckHandlerTask+0x4e8>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
81106584:	110a1b00 	call	8110a1b0 <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
81106588:	0000de06 	br	81106904 <vInAckHandlerTask+0x4e8>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
8110658c:	110a1500 	call	8110a150 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
81106590:	0000dc06 	br	81106904 <vInAckHandlerTask+0x4e8>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
81106594:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
81106598:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
8110659c:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
811065a0:	e03ffc15 	stw	zero,-16(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
811065a4:	0000c606 	br	811068c0 <vInAckHandlerTask+0x4a4>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
811065a8:	e0bff917 	ldw	r2,-28(fp)
811065ac:	10003f1e 	bne	r2,zero,811066ac <vInAckHandlerTask+0x290>
811065b0:	e0bffa17 	ldw	r2,-24(fp)
811065b4:	10003d1e 	bne	r2,zero,811066ac <vInAckHandlerTask+0x290>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
811065b8:	d0a06017 	ldw	r2,-32384(gp)
811065bc:	e0fffec4 	addi	r3,fp,-5
811065c0:	180b883a 	mov	r5,r3
811065c4:	1009883a 	mov	r4,r2
811065c8:	11269f80 	call	811269f8 <OSMutexAccept>
811065cc:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
811065d0:	e0bffe83 	ldbu	r2,-6(fp)
811065d4:	10003526 	beq	r2,zero,811066ac <vInAckHandlerTask+0x290>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811065d8:	e03ffe45 	stb	zero,-7(fp)
811065dc:	00002c06 	br	81106690 <vInAckHandlerTask+0x274>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
811065e0:	e0fffe43 	ldbu	r3,-7(fp)
811065e4:	00a04574 	movhi	r2,33045
811065e8:	10886404 	addi	r2,r2,8592
811065ec:	18c009a4 	muli	r3,r3,38
811065f0:	10c5883a 	add	r2,r2,r3
811065f4:	10800804 	addi	r2,r2,32
811065f8:	10c0000b 	ldhu	r3,0(r2)
811065fc:	d0a0520b 	ldhu	r2,-32440(gp)
81106600:	18ffffcc 	andi	r3,r3,65535
81106604:	10bfffcc 	andi	r2,r2,65535
81106608:	18801e1e 	bne	r3,r2,81106684 <vInAckHandlerTask+0x268>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
8110660c:	e0fffe43 	ldbu	r3,-7(fp)
81106610:	00a04574 	movhi	r2,33045
81106614:	10886404 	addi	r2,r2,8592
81106618:	18c009a4 	muli	r3,r3,38
8110661c:	10c5883a 	add	r2,r2,r3
81106620:	10800804 	addi	r2,r2,32
81106624:	1000000d 	sth	zero,0(r2)
                                    memset(xBuffer32[i].buffer, 0, 32);
81106628:	e0bffe43 	ldbu	r2,-7(fp)
8110662c:	10c009a4 	muli	r3,r2,38
81106630:	00a04574 	movhi	r2,33045
81106634:	10886404 	addi	r2,r2,8592
81106638:	1885883a 	add	r2,r3,r2
8110663c:	01800804 	movi	r6,32
81106640:	000b883a 	mov	r5,zero
81106644:	1009883a 	mov	r4,r2
81106648:	110d5c80 	call	8110d5c8 <memset>
                                    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110664c:	d0a06017 	ldw	r2,-32384(gp)
81106650:	1009883a 	mov	r4,r2
81106654:	11275fc0 	call	811275fc <OSMutexPost>

                                    bFound = TRUE;
81106658:	00800044 	movi	r2,1
8110665c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
81106660:	d0a06217 	ldw	r2,-32376(gp)
81106664:	1009883a 	mov	r4,r2
81106668:	11293540 	call	81129354 <OSSemPost>
8110666c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81106670:	e0bffec3 	ldbu	r2,-5(fp)
81106674:	10803fcc 	andi	r2,r2,255
81106678:	10000926 	beq	r2,zero,811066a0 <vInAckHandlerTask+0x284>
                                        vFailSetCountSemaphorexBuffer32();
8110667c:	110a3c40 	call	8110a3c4 <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
81106680:	00000706 	br	811066a0 <vInAckHandlerTask+0x284>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
81106684:	e0bffe43 	ldbu	r2,-7(fp)
81106688:	10800044 	addi	r2,r2,1
8110668c:	e0bffe45 	stb	r2,-7(fp)
81106690:	e0bffe43 	ldbu	r2,-7(fp)
81106694:	10800230 	cmpltui	r2,r2,8
81106698:	103fd11e 	bne	r2,zero,811065e0 <__reset+0xfb0e65e0>
8110669c:	00000106 	br	811066a4 <vInAckHandlerTask+0x288>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
811066a0:	0001883a 	nop
                                }
                            }
                            bFinished32 = TRUE;
811066a4:	00800044 	movi	r2,1
811066a8:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
811066ac:	e0bff917 	ldw	r2,-28(fp)
811066b0:	10003f1e 	bne	r2,zero,811067b0 <vInAckHandlerTask+0x394>
811066b4:	e0bffb17 	ldw	r2,-20(fp)
811066b8:	10003d1e 	bne	r2,zero,811067b0 <vInAckHandlerTask+0x394>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
811066bc:	d0a06317 	ldw	r2,-32372(gp)
811066c0:	e0fffec4 	addi	r3,fp,-5
811066c4:	180b883a 	mov	r5,r3
811066c8:	1009883a 	mov	r4,r2
811066cc:	11269f80 	call	811269f8 <OSMutexAccept>
811066d0:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
811066d4:	e0bffe83 	ldbu	r2,-6(fp)
811066d8:	10003526 	beq	r2,zero,811067b0 <vInAckHandlerTask+0x394>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
811066dc:	e03ffe45 	stb	zero,-7(fp)
811066e0:	00002c06 	br	81106794 <vInAckHandlerTask+0x378>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
811066e4:	e0fffe43 	ldbu	r3,-7(fp)
811066e8:	00a04574 	movhi	r2,33045
811066ec:	10801e04 	addi	r2,r2,120
811066f0:	18c011a4 	muli	r3,r3,70
811066f4:	10c5883a 	add	r2,r2,r3
811066f8:	10801004 	addi	r2,r2,64
811066fc:	10c0000b 	ldhu	r3,0(r2)
81106700:	d0a0520b 	ldhu	r2,-32440(gp)
81106704:	18ffffcc 	andi	r3,r3,65535
81106708:	10bfffcc 	andi	r2,r2,65535
8110670c:	18801e1e 	bne	r3,r2,81106788 <vInAckHandlerTask+0x36c>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81106710:	e0fffe43 	ldbu	r3,-7(fp)
81106714:	00a04574 	movhi	r2,33045
81106718:	10801e04 	addi	r2,r2,120
8110671c:	18c011a4 	muli	r3,r3,70
81106720:	10c5883a 	add	r2,r2,r3
81106724:	10801004 	addi	r2,r2,64
81106728:	1000000d 	sth	zero,0(r2)
                                    memset(xBuffer64[i].buffer, 0, 64);
8110672c:	e0bffe43 	ldbu	r2,-7(fp)
81106730:	10c011a4 	muli	r3,r2,70
81106734:	00a04574 	movhi	r2,33045
81106738:	10801e04 	addi	r2,r2,120
8110673c:	1885883a 	add	r2,r3,r2
81106740:	01801004 	movi	r6,64
81106744:	000b883a 	mov	r5,zero
81106748:	1009883a 	mov	r4,r2
8110674c:	110d5c80 	call	8110d5c8 <memset>
                                    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81106750:	d0a06317 	ldw	r2,-32372(gp)
81106754:	1009883a 	mov	r4,r2
81106758:	11275fc0 	call	811275fc <OSMutexPost>

                                    bFound = TRUE;
8110675c:	00800044 	movi	r2,1
81106760:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81106764:	d0a05617 	ldw	r2,-32424(gp)
81106768:	1009883a 	mov	r4,r2
8110676c:	11293540 	call	81129354 <OSSemPost>
81106770:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81106774:	e0bffec3 	ldbu	r2,-5(fp)
81106778:	10803fcc 	andi	r2,r2,255
8110677c:	10000926 	beq	r2,zero,811067a4 <vInAckHandlerTask+0x388>
                                        vFailSetCountSemaphorexBuffer64();
81106780:	110a4240 	call	8110a424 <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81106784:	00000706 	br	811067a4 <vInAckHandlerTask+0x388>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81106788:	e0bffe43 	ldbu	r2,-7(fp)
8110678c:	10800044 	addi	r2,r2,1
81106790:	e0bffe45 	stb	r2,-7(fp)
81106794:	e0bffe43 	ldbu	r2,-7(fp)
81106798:	10800130 	cmpltui	r2,r2,4
8110679c:	103fd11e 	bne	r2,zero,811066e4 <__reset+0xfb0e66e4>
811067a0:	00000106 	br	811067a8 <vInAckHandlerTask+0x38c>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
811067a4:	0001883a 	nop
                                }
                            }
                            bFinished64 = TRUE;
811067a8:	00800044 	movi	r2,1
811067ac:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
811067b0:	e0bff917 	ldw	r2,-28(fp)
811067b4:	10003f1e 	bne	r2,zero,811068b4 <vInAckHandlerTask+0x498>
811067b8:	e0bffc17 	ldw	r2,-16(fp)
811067bc:	10003d1e 	bne	r2,zero,811068b4 <vInAckHandlerTask+0x498>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
811067c0:	d0a06117 	ldw	r2,-32380(gp)
811067c4:	e0fffec4 	addi	r3,fp,-5
811067c8:	180b883a 	mov	r5,r3
811067cc:	1009883a 	mov	r4,r2
811067d0:	11269f80 	call	811269f8 <OSMutexAccept>
811067d4:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
811067d8:	e0bffe83 	ldbu	r2,-6(fp)
811067dc:	10003526 	beq	r2,zero,811068b4 <vInAckHandlerTask+0x498>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
811067e0:	e03ffe45 	stb	zero,-7(fp)
811067e4:	00002c06 	br	81106898 <vInAckHandlerTask+0x47c>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
811067e8:	e0fffe43 	ldbu	r3,-7(fp)
811067ec:	00a045b4 	movhi	r2,33046
811067f0:	10a0b004 	addi	r2,r2,-32064
811067f4:	18c021a4 	muli	r3,r3,134
811067f8:	10c5883a 	add	r2,r2,r3
811067fc:	10802004 	addi	r2,r2,128
81106800:	10c0000b 	ldhu	r3,0(r2)
81106804:	d0a0520b 	ldhu	r2,-32440(gp)
81106808:	18ffffcc 	andi	r3,r3,65535
8110680c:	10bfffcc 	andi	r2,r2,65535
81106810:	18801e1e 	bne	r3,r2,8110688c <vInAckHandlerTask+0x470>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81106814:	e0fffe43 	ldbu	r3,-7(fp)
81106818:	00a045b4 	movhi	r2,33046
8110681c:	10a0b004 	addi	r2,r2,-32064
81106820:	18c021a4 	muli	r3,r3,134
81106824:	10c5883a 	add	r2,r2,r3
81106828:	10802004 	addi	r2,r2,128
8110682c:	1000000d 	sth	zero,0(r2)
                                    memset(xBuffer128[i].buffer, 0, 128);
81106830:	e0bffe43 	ldbu	r2,-7(fp)
81106834:	10c021a4 	muli	r3,r2,134
81106838:	00a045b4 	movhi	r2,33046
8110683c:	10a0b004 	addi	r2,r2,-32064
81106840:	1885883a 	add	r2,r3,r2
81106844:	01802004 	movi	r6,128
81106848:	000b883a 	mov	r5,zero
8110684c:	1009883a 	mov	r4,r2
81106850:	110d5c80 	call	8110d5c8 <memset>
                                    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81106854:	d0a06117 	ldw	r2,-32380(gp)
81106858:	1009883a 	mov	r4,r2
8110685c:	11275fc0 	call	811275fc <OSMutexPost>

                                    bFound = TRUE;
81106860:	00800044 	movi	r2,1
81106864:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81106868:	d0a05a17 	ldw	r2,-32408(gp)
8110686c:	1009883a 	mov	r4,r2
81106870:	11293540 	call	81129354 <OSSemPost>
81106874:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81106878:	e0bffec3 	ldbu	r2,-5(fp)
8110687c:	10803fcc 	andi	r2,r2,255
81106880:	10000926 	beq	r2,zero,811068a8 <vInAckHandlerTask+0x48c>
                                        vFailSetCountSemaphorexBuffer128();
81106884:	110a4840 	call	8110a484 <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81106888:	00000706 	br	811068a8 <vInAckHandlerTask+0x48c>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
8110688c:	e0bffe43 	ldbu	r2,-7(fp)
81106890:	10800044 	addi	r2,r2,1
81106894:	e0bffe45 	stb	r2,-7(fp)
81106898:	e0bffe43 	ldbu	r2,-7(fp)
8110689c:	108000b0 	cmpltui	r2,r2,2
811068a0:	103fd11e 	bne	r2,zero,811067e8 <__reset+0xfb0e67e8>
811068a4:	00000106 	br	811068ac <vInAckHandlerTask+0x490>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
811068a8:	0001883a 	nop
                                }
                            }
                            bFinished128 = TRUE;
811068ac:	00800044 	movi	r2,1
811068b0:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    ucCountRetries++;
811068b4:	e0bffe03 	ldbu	r2,-8(fp)
811068b8:	10800044 	addi	r2,r2,1
811068bc:	e0bffe05 	stb	r2,-8(fp)
                bFound = FALSE;
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
811068c0:	e0bff917 	ldw	r2,-28(fp)
811068c4:	1000091e 	bne	r2,zero,811068ec <vInAckHandlerTask+0x4d0>
811068c8:	e0bffe03 	ldbu	r2,-8(fp)
811068cc:	108001a8 	cmpgeui	r2,r2,6
811068d0:	1000061e 	bne	r2,zero,811068ec <vInAckHandlerTask+0x4d0>
811068d4:	e0bffa17 	ldw	r2,-24(fp)
811068d8:	103f3326 	beq	r2,zero,811065a8 <__reset+0xfb0e65a8>
811068dc:	e0bffb17 	ldw	r2,-20(fp)
811068e0:	103f3126 	beq	r2,zero,811065a8 <__reset+0xfb0e65a8>
811068e4:	e0bffc17 	ldw	r2,-16(fp)
811068e8:	103f2f26 	beq	r2,zero,811065a8 <__reset+0xfb0e65a8>
                        }
                    }
                    ucCountRetries++;
                }

                if (bFound == FALSE) {
811068ec:	e0bff917 	ldw	r2,-28(fp)
811068f0:	1000011e 	bne	r2,zero,811068f8 <vInAckHandlerTask+0x4dc>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
811068f4:	110a4e40 	call	8110a4e4 <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
811068f8:	00800044 	movi	r2,1
811068fc:	e0bffd15 	stw	r2,-12(fp)
				break;
81106900:	0001883a 	nop
			default:
				break;
		}
	}
81106904:	003ed806 	br	81106468 <__reset+0xfb0e6468>

81106908 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81106908:	defff704 	addi	sp,sp,-36
8110690c:	dfc00815 	stw	ra,32(sp)
81106910:	df000715 	stw	fp,28(sp)
81106914:	df000704 	addi	fp,sp,28
81106918:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
8110691c:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverUartTask,
81106920:	00800104 	movi	r2,4
81106924:	d8800415 	stw	r2,16(sp)
81106928:	d8000315 	stw	zero,12(sp)
8110692c:	00820004 	movi	r2,2048
81106930:	d8800215 	stw	r2,8(sp)
81106934:	00a04574 	movhi	r2,33045
81106938:	1088b004 	addi	r2,r2,8896
8110693c:	d8800115 	stw	r2,4(sp)
81106940:	00800484 	movi	r2,18
81106944:	d8800015 	stw	r2,0(sp)
81106948:	01c00484 	movi	r7,18
8110694c:	01a04574 	movhi	r6,33045
81106950:	3190af04 	addi	r6,r6,17084
81106954:	000b883a 	mov	r5,zero
81106958:	01204434 	movhi	r4,33040
8110695c:	211c8c04 	addi	r4,r4,29232
81106960:	1129d100 	call	81129d10 <OSTaskCreateExt>
81106964:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106968:	e0bffe03 	ldbu	r2,-8(fp)
8110696c:	10000426 	beq	r2,zero,81106980 <vInitialTask+0x78>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106970:	e0bffe03 	ldbu	r2,-8(fp)
81106974:	1009883a 	mov	r4,r2
81106978:	1109e1c0 	call	81109e1c <printErrorTask>
		#endif
		vFailReceiverCreate();
8110697c:	110a2f80 	call	8110a2f8 <vFailReceiverCreate>
	}


	/* Create the task that is responsible to parse all received messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vParserCommTask,
81106980:	00800104 	movi	r2,4
81106984:	d8800415 	stw	r2,16(sp)
81106988:	d8000315 	stw	zero,12(sp)
8110698c:	00820004 	movi	r2,2048
81106990:	d8800215 	stw	r2,8(sp)
81106994:	00a045b4 	movhi	r2,33046
81106998:	10a0f704 	addi	r2,r2,-31780
8110699c:	d8800115 	stw	r2,4(sp)
811069a0:	00800444 	movi	r2,17
811069a4:	d8800015 	stw	r2,0(sp)
811069a8:	01c00444 	movi	r7,17
811069ac:	01a045b4 	movhi	r6,33046
811069b0:	31a8f604 	addi	r6,r6,-23592
811069b4:	000b883a 	mov	r5,zero
811069b8:	01204434 	movhi	r4,33040
811069bc:	211b7404 	addi	r4,r4,28112
811069c0:	1129d100 	call	81129d10 <OSTaskCreateExt>
811069c4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
811069c8:	e0bffe03 	ldbu	r2,-8(fp)
811069cc:	10000426 	beq	r2,zero,811069e0 <vInitialTask+0xd8>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
811069d0:	e0bffe03 	ldbu	r2,-8(fp)
811069d4:	1009883a 	mov	r4,r2
811069d8:	1109e1c0 	call	81109e1c <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
811069dc:	110a8440 	call	8110a844 <vFailParserCommTaskCreate>
	}


	/* Create the task that is responsible to handle incomming ack packet */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInAckHandlerTask,
811069e0:	00800104 	movi	r2,4
811069e4:	d8800415 	stw	r2,16(sp)
811069e8:	d8000315 	stw	zero,12(sp)
811069ec:	00820004 	movi	r2,2048
811069f0:	d8800215 	stw	r2,8(sp)
811069f4:	00a04574 	movhi	r2,33045
811069f8:	10b81e04 	addi	r2,r2,-8072
811069fc:	d8800115 	stw	r2,4(sp)
81106a00:	00800384 	movi	r2,14
81106a04:	d8800015 	stw	r2,0(sp)
81106a08:	01c00384 	movi	r7,14
81106a0c:	01a04574 	movhi	r6,33045
81106a10:	31801d04 	addi	r6,r6,116
81106a14:	000b883a 	mov	r5,zero
81106a18:	01204434 	movhi	r4,33040
81106a1c:	21190704 	addi	r4,r4,25628
81106a20:	1129d100 	call	81129d10 <OSTaskCreateExt>
81106a24:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106a28:	e0bffe03 	ldbu	r2,-8(fp)
81106a2c:	10000426 	beq	r2,zero,81106a40 <vInitialTask+0x138>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106a30:	e0bffe03 	ldbu	r2,-8(fp)
81106a34:	1009883a 	mov	r4,r2
81106a38:	1109e1c0 	call	81109e1c <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81106a3c:	110a8880 	call	8110a888 <vFailInAckHandlerTaskCreate>



	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81106a40:	00800104 	movi	r2,4
81106a44:	d8800415 	stw	r2,16(sp)
81106a48:	d8000315 	stw	zero,12(sp)
81106a4c:	00820004 	movi	r2,2048
81106a50:	d8800215 	stw	r2,8(sp)
81106a54:	00a04574 	movhi	r2,33045
81106a58:	1090b004 	addi	r2,r2,17088
81106a5c:	d8800115 	stw	r2,4(sp)
81106a60:	00800404 	movi	r2,16
81106a64:	d8800015 	stw	r2,0(sp)
81106a68:	01c00404 	movi	r7,16
81106a6c:	01a04574 	movhi	r6,33045
81106a70:	3198af04 	addi	r6,r6,25276
81106a74:	000b883a 	mov	r5,zero
81106a78:	01204434 	movhi	r4,33040
81106a7c:	211ad404 	addi	r4,r4,27472
81106a80:	1129d100 	call	81129d10 <OSTaskCreateExt>
81106a84:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106a88:	e0bffe03 	ldbu	r2,-8(fp)
81106a8c:	10000426 	beq	r2,zero,81106aa0 <vInitialTask+0x198>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81106a90:	e0bffe03 	ldbu	r2,-8(fp)
81106a94:	1009883a 	mov	r4,r2
81106a98:	1109e1c0 	call	81109e1c <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81106a9c:	110a8cc0 	call	8110a8cc <vFailOutAckHandlerTaskCreate>



	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81106aa0:	00800104 	movi	r2,4
81106aa4:	d8800415 	stw	r2,16(sp)
81106aa8:	d8000315 	stw	zero,12(sp)
81106aac:	00820004 	movi	r2,2048
81106ab0:	d8800215 	stw	r2,8(sp)
81106ab4:	00a04574 	movhi	r2,33045
81106ab8:	10806404 	addi	r2,r2,400
81106abc:	d8800115 	stw	r2,4(sp)
81106ac0:	008003c4 	movi	r2,15
81106ac4:	d8800015 	stw	r2,0(sp)
81106ac8:	01c003c4 	movi	r7,15
81106acc:	01a04574 	movhi	r6,33045
81106ad0:	31886304 	addi	r6,r6,8588
81106ad4:	000b883a 	mov	r5,zero
81106ad8:	01204474 	movhi	r4,33041
81106adc:	21213504 	addi	r4,r4,-31532
81106ae0:	1129d100 	call	81129d10 <OSTaskCreateExt>
81106ae4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81106ae8:	e0bffe03 	ldbu	r2,-8(fp)
81106aec:	10000426 	beq	r2,zero,81106b00 <vInitialTask+0x1f8>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106af0:	e0bffe03 	ldbu	r2,-8(fp)
81106af4:	1009883a 	mov	r4,r2
81106af8:	1109e1c0 	call	81109e1c <printErrorTask>
		#endif
		vFailSenderCreate();
81106afc:	110a33c0 	call	8110a33c <vFailSenderCreate>
	}


	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81106b00:	01003fc4 	movi	r4,255
81106b04:	1129ef40 	call	81129ef4 <OSTaskDel>
81106b08:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81106b0c:	e0bffe03 	ldbu	r2,-8(fp)
81106b10:	10000726 	beq	r2,zero,81106b30 <vInitialTask+0x228>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81106b14:	e0bffe03 	ldbu	r2,-8(fp)
81106b18:	1009883a 	mov	r4,r2
81106b1c:	1109e1c0 	call	81109e1c <printErrorTask>
		#endif
		vFailDeleteInitialization();
81106b20:	110a3800 	call	8110a380 <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81106b24:	01400504 	movi	r5,20
81106b28:	01000044 	movi	r4,1
81106b2c:	11296740 	call	81129674 <OSTaskChangePrio>
	}

	for(;;) { /* Correct Program Flow should never get here */
		OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81106b30:	01003fc4 	movi	r4,255
81106b34:	1129ef40 	call	81129ef4 <OSTaskDel>
		OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81106b38:	000f883a 	mov	r7,zero
81106b3c:	01800284 	movi	r6,10
81106b40:	000b883a 	mov	r5,zero
81106b44:	0009883a 	mov	r4,zero
81106b48:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81106b4c:	003ff806 	br	81106b30 <__reset+0xfb0e6b30>

81106b50 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81106b50:	defff604 	addi	sp,sp,-40
81106b54:	dfc00915 	stw	ra,36(sp)
81106b58:	df000815 	stw	fp,32(sp)
81106b5c:	df000804 	addi	fp,sp,32
81106b60:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81106b64:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81106b68:	e03ffb15 	stw	zero,-20(fp)
81106b6c:	e03ffc15 	stw	zero,-16(fp)
81106b70:	e03ffd15 	stw	zero,-12(fp)
81106b74:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81106b78:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81106b7c:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81106b80:	d0a05917 	ldw	r2,-32412(gp)
81106b84:	100f883a 	mov	r7,r2
81106b88:	01800704 	movi	r6,28
81106b8c:	01400044 	movi	r5,1
81106b90:	012044f4 	movhi	r4,33043
81106b94:	21186a04 	addi	r4,r4,25000
81106b98:	110ca840 	call	8110ca84 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81106b9c:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81106ba0:	e0bff917 	ldw	r2,-28(fp)
81106ba4:	10c00060 	cmpeqi	r3,r2,1
81106ba8:	1800071e 	bne	r3,zero,81106bc8 <vOutAckHandlerTask+0x78>
81106bac:	0080032e 	bgeu	zero,r2,81106bbc <vOutAckHandlerTask+0x6c>
81106bb0:	108000a0 	cmpeqi	r2,r2,2
81106bb4:	1000451e 	bne	r2,zero,81106ccc <vOutAckHandlerTask+0x17c>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81106bb8:	00008406 	br	81106dcc <vOutAckHandlerTask+0x27c>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81106bbc:	00800044 	movi	r2,1
81106bc0:	e0bff915 	stw	r2,-28(fp)
				break;
81106bc4:	00008106 	br	81106dcc <vOutAckHandlerTask+0x27c>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
81106bc8:	d0a05817 	ldw	r2,-32416(gp)
81106bcc:	e0fffac4 	addi	r3,fp,-21
81106bd0:	180d883a 	mov	r6,r3
81106bd4:	000b883a 	mov	r5,zero
81106bd8:	1009883a 	mov	r4,r2
81106bdc:	1128fdc0 	call	81128fdc <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81106be0:	e0bffac3 	ldbu	r2,-21(fp)
81106be4:	10803fcc 	andi	r2,r2,255
81106be8:	1000361e 	bne	r2,zero,81106cc4 <vOutAckHandlerTask+0x174>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81106bec:	d0a06417 	ldw	r2,-32368(gp)
81106bf0:	e0fffac4 	addi	r3,fp,-21
81106bf4:	180d883a 	mov	r6,r3
81106bf8:	000b883a 	mov	r5,zero
81106bfc:	1009883a 	mov	r4,r2
81106c00:	11270600 	call	81127060 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81106c04:	e0bffac3 	ldbu	r2,-21(fp)
81106c08:	10803fcc 	andi	r2,r2,255
81106c0c:	10002b1e 	bne	r2,zero,81106cbc <vOutAckHandlerTask+0x16c>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81106c10:	e03ffa45 	stb	zero,-23(fp)
81106c14:	00002206 	br	81106ca0 <vOutAckHandlerTask+0x150>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81106c18:	e0fffa43 	ldbu	r3,-23(fp)
81106c1c:	00a045b4 	movhi	r2,33046
81106c20:	10a8f704 	addi	r2,r2,-23588
81106c24:	18c7883a 	add	r3,r3,r3
81106c28:	18c7883a 	add	r3,r3,r3
81106c2c:	10c5883a 	add	r2,r2,r3
81106c30:	10800003 	ldbu	r2,0(r2)
81106c34:	10803fcc 	andi	r2,r2,255
81106c38:	1080201c 	xori	r2,r2,128
81106c3c:	10bfe004 	addi	r2,r2,-128
81106c40:	10001426 	beq	r2,zero,81106c94 <vOutAckHandlerTask+0x144>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81106c44:	e0fffa43 	ldbu	r3,-23(fp)
81106c48:	00a045b4 	movhi	r2,33046
81106c4c:	10a8f704 	addi	r2,r2,-23588
81106c50:	18c7883a 	add	r3,r3,r3
81106c54:	18c7883a 	add	r3,r3,r3
81106c58:	10c5883a 	add	r2,r2,r3
81106c5c:	10c0000b 	ldhu	r3,0(r2)
81106c60:	d0e0528d 	sth	r3,-32438(gp)
81106c64:	1080008b 	ldhu	r2,2(r2)
81106c68:	d0a0530d 	sth	r2,-32436(gp)
                                eSenderAckState = sSASending;
81106c6c:	00800084 	movi	r2,2
81106c70:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81106c74:	e0fffa43 	ldbu	r3,-23(fp)
81106c78:	00a045b4 	movhi	r2,33046
81106c7c:	10a8f704 	addi	r2,r2,-23588
81106c80:	18c7883a 	add	r3,r3,r3
81106c84:	18c7883a 	add	r3,r3,r3
81106c88:	10c5883a 	add	r2,r2,r3
81106c8c:	10000005 	stb	zero,0(r2)
                                break;
81106c90:	00000606 	br	81106cac <vOutAckHandlerTask+0x15c>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81106c94:	e0bffa43 	ldbu	r2,-23(fp)
81106c98:	10800044 	addi	r2,r2,1
81106c9c:	e0bffa45 	stb	r2,-23(fp)
81106ca0:	e0bffa43 	ldbu	r2,-23(fp)
81106ca4:	10800130 	cmpltui	r2,r2,4
81106ca8:	103fdb1e 	bne	r2,zero,81106c18 <__reset+0xfb0e6c18>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
81106cac:	d0a06417 	ldw	r2,-32368(gp)
81106cb0:	1009883a 	mov	r4,r2
81106cb4:	11275fc0 	call	811275fc <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
81106cb8:	00004406 	br	81106dcc <vOutAckHandlerTask+0x27c>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
81106cbc:	110a0f00 	call	8110a0f0 <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
81106cc0:	00004206 	br	81106dcc <vOutAckHandlerTask+0x27c>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
81106cc4:	110a0900 	call	8110a090 <vFailGetCountSemaphoreSenderTask>
                }
                break;
81106cc8:	00004006 	br	81106dcc <vOutAckHandlerTask+0x27c>
			case sSASending:
                /* In this state has a parsed ack packet in the variable xSAckLocal
                   we just need to calc the crc8 and create the uart packet to send. */
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
81106ccc:	d0a052c3 	ldbu	r2,-32437(gp)
81106cd0:	10c03fcc 	andi	r3,r2,255
81106cd4:	18c0201c 	xori	r3,r3,128
81106cd8:	18ffe004 	addi	r3,r3,-128
81106cdc:	d0a0530b 	ldhu	r2,-32436(gp)
81106ce0:	113fffcc 	andi	r4,r2,65535
81106ce4:	e0bffb04 	addi	r2,fp,-20
81106ce8:	200f883a 	mov	r7,r4
81106cec:	180d883a 	mov	r6,r3
81106cf0:	016044f4 	movhi	r5,33043
81106cf4:	29587204 	addi	r5,r5,25032
81106cf8:	1009883a 	mov	r4,r2
81106cfc:	110dbb80 	call	8110dbb8 <sprintf>
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
81106d00:	e0bffb04 	addi	r2,fp,-20
81106d04:	1009883a 	mov	r4,r2
81106d08:	110ddac0 	call	8110ddac <strlen>
81106d0c:	1007883a 	mov	r3,r2
81106d10:	e0bffb04 	addi	r2,fp,-20
81106d14:	180b883a 	mov	r5,r3
81106d18:	1009883a 	mov	r4,r2
81106d1c:	1109dc80 	call	81109dc8 <ucCrc8wInit>
81106d20:	e0bffa85 	stb	r2,-22(fp)
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81106d24:	e13ffa83 	ldbu	r4,-22(fp)
81106d28:	e0fffb04 	addi	r3,fp,-20
81106d2c:	e0bffb04 	addi	r2,fp,-20
81106d30:	200f883a 	mov	r7,r4
81106d34:	180d883a 	mov	r6,r3
81106d38:	016044f4 	movhi	r5,33043
81106d3c:	29587404 	addi	r5,r5,25040
81106d40:	1009883a 	mov	r4,r2
81106d44:	110dbb80 	call	8110dbb8 <sprintf>

                bSuccess = FALSE;
81106d48:	e03ff815 	stw	zero,-32(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
81106d4c:	00001406 	br	81106da0 <vOutAckHandlerTask+0x250>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
81106d50:	d0a06517 	ldw	r2,-32364(gp)
81106d54:	e0fffac4 	addi	r3,fp,-21
81106d58:	180d883a 	mov	r6,r3
81106d5c:	01400144 	movi	r5,5
81106d60:	1009883a 	mov	r4,r2
81106d64:	11270600 	call	81127060 <OSMutexPend>

                    if ( error_code == OS_NO_ERR ) {
81106d68:	e0bffac3 	ldbu	r2,-21(fp)
81106d6c:	10803fcc 	andi	r2,r2,255
81106d70:	1000081e 	bne	r2,zero,81106d94 <vOutAckHandlerTask+0x244>
                        puts(cBufferAck);
81106d74:	e0bffb04 	addi	r2,fp,-20
81106d78:	1009883a 	mov	r4,r2
81106d7c:	110d89c0 	call	8110d89c <puts>
                        OSMutexPost(xTxUARTMutex);
81106d80:	d0a06517 	ldw	r2,-32364(gp)
81106d84:	1009883a 	mov	r4,r2
81106d88:	11275fc0 	call	811275fc <OSMutexPost>
                        bSuccess = TRUE;
81106d8c:	00800044 	movi	r2,1
81106d90:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
81106d94:	e0bffa03 	ldbu	r2,-24(fp)
81106d98:	10800044 	addi	r2,r2,1
81106d9c:	e0bffa05 	stb	r2,-24(fp)
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);

                bSuccess = FALSE;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
81106da0:	e0bff817 	ldw	r2,-32(fp)
81106da4:	1000031e 	bne	r2,zero,81106db4 <vOutAckHandlerTask+0x264>
81106da8:	e0bffa03 	ldbu	r2,-24(fp)
81106dac:	108001b0 	cmpltui	r2,r2,6
81106db0:	103fe71e 	bne	r2,zero,81106d50 <__reset+0xfb0e6d50>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
81106db4:	e0bff817 	ldw	r2,-32(fp)
81106db8:	1000011e 	bne	r2,zero,81106dc0 <vOutAckHandlerTask+0x270>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
81106dbc:	110a2100 	call	8110a210 <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
81106dc0:	00800044 	movi	r2,1
81106dc4:	e0bff915 	stw	r2,-28(fp)
				break;
81106dc8:	0001883a 	nop
			default:
				break;
		}
	}
81106dcc:	003f7406 	br	81106ba0 <__reset+0xfb0e6ba0>

81106dd0 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
81106dd0:	defffa04 	addi	sp,sp,-24
81106dd4:	dfc00515 	stw	ra,20(sp)
81106dd8:	df000415 	stw	fp,16(sp)
81106ddc:	df000404 	addi	fp,sp,16
81106de0:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81106de4:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tParserStates eParserMode;
	static tPreParsed PreParsedLocal;

	#ifdef DEBUG_ON
		debug(fp,"vParserRXTask, enter task.\n");
81106de8:	d0a05917 	ldw	r2,-32412(gp)
81106dec:	100f883a 	mov	r7,r2
81106df0:	018006c4 	movi	r6,27
81106df4:	01400044 	movi	r5,1
81106df8:	012044f4 	movhi	r4,33043
81106dfc:	21187704 	addi	r4,r4,25052
81106e00:	110ca840 	call	8110ca84 <fwrite>
	#endif

	eParserMode = sConfiguring;
81106e04:	e03ffc15 	stw	zero,-16(fp)

	for(;;){

		switch (eParserMode) {
81106e08:	e0bffc17 	ldw	r2,-16(fp)
81106e0c:	10800168 	cmpgeui	r2,r2,5
81106e10:	1000981e 	bne	r2,zero,81107074 <vParserCommTask+0x2a4>
81106e14:	e0bffc17 	ldw	r2,-16(fp)
81106e18:	100690ba 	slli	r3,r2,2
81106e1c:	00a04434 	movhi	r2,33040
81106e20:	109b8c04 	addi	r2,r2,28208
81106e24:	1885883a 	add	r2,r3,r2
81106e28:	10800017 	ldw	r2,0(r2)
81106e2c:	1000683a 	jmp	r2
81106e30:	81106e44 	addi	r4,r16,16825
81106e34:	81106e50 	cmplti	r4,r16,16825
81106e38:	81106f1c 	xori	r4,r16,16828
81106e3c:	81106fb0 	cmpltui	r4,r16,16830
81106e40:	81106ff0 	cmpltui	r4,r16,16831
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
81106e44:	00800044 	movi	r2,1
81106e48:	e0bffc15 	stw	r2,-16(fp)
				break;
81106e4c:	00008d06 	br	81107084 <vParserCommTask+0x2b4>
			case sWaitingConn:

				bSuccess = FALSE;
81106e50:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingConn;
81106e54:	00800044 	movi	r2,1
81106e58:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81106e5c:	d0a05b17 	ldw	r2,-32404(gp)
81106e60:	e0fffe04 	addi	r3,fp,-8
81106e64:	180d883a 	mov	r6,r3
81106e68:	000b883a 	mov	r5,zero
81106e6c:	1009883a 	mov	r4,r2
81106e70:	1128fdc0 	call	81128fdc <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81106e74:	e0bffe03 	ldbu	r2,-8(fp)
81106e78:	10803fcc 	andi	r2,r2,255
81106e7c:	1000251e 	bne	r2,zero,81106f14 <vParserCommTask+0x144>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
81106e80:	d0a05717 	ldw	r2,-32420(gp)
81106e84:	1009883a 	mov	r4,r2
81106e88:	11293540 	call	81129354 <OSSemPost>
81106e8c:	e0bffe05 	stb	r2,-8(fp)
                    if ( error_code == OS_ERR_NONE ) {
81106e90:	e0bffe03 	ldbu	r2,-8(fp)
81106e94:	10803fcc 	andi	r2,r2,255
81106e98:	1000171e 	bne	r2,zero,81106ef8 <vParserCommTask+0x128>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81106e9c:	01204534 	movhi	r4,33044
81106ea0:	2126ee04 	addi	r4,r4,-25672
81106ea4:	11070880 	call	81107088 <getPreParsedPacket>
81106ea8:	e0bffd15 	stw	r2,-12(fp)
                    	if (bSuccess == TRUE) {
81106eac:	e0bffd17 	ldw	r2,-12(fp)
81106eb0:	10800058 	cmpnei	r2,r2,1
81106eb4:	10000e1e 	bne	r2,zero,81106ef0 <vParserCommTask+0x120>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
81106eb8:	00a04534 	movhi	r2,33044
81106ebc:	10a6ee04 	addi	r2,r2,-25672
81106ec0:	10800103 	ldbu	r2,4(r2)
81106ec4:	10803fcc 	andi	r2,r2,255
81106ec8:	1080201c 	xori	r2,r2,128
81106ecc:	10bfe004 	addi	r2,r2,-128
81106ed0:	10800858 	cmpnei	r2,r2,33
81106ed4:	1000031e 	bne	r2,zero,81106ee4 <vParserCommTask+0x114>
                            	eParserMode = sReplyParsing;
81106ed8:	00800104 	movi	r2,4
81106edc:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81106ee0:	00006706 	br	81107080 <vParserCommTask+0x2b0>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
81106ee4:	008000c4 	movi	r2,3
81106ee8:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81106eec:	00006406 	br	81107080 <vParserCommTask+0x2b0>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
81106ef0:	110a6040 	call	8110a604 <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81106ef4:	00006206 	br	81107080 <vParserCommTask+0x2b0>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
81106ef8:	11071980 	call	81107198 <bTrySendSemaphoreCommInit>
81106efc:	e0bffd15 	stw	r2,-12(fp)
						if (bSuccess == TRUE) {
81106f00:	e0bffd17 	ldw	r2,-12(fp)
81106f04:	10800058 	cmpnei	r2,r2,1
81106f08:	10005d1e 	bne	r2,zero,81107080 <vParserCommTask+0x2b0>
							vFailSendxSemCommInit();
81106f0c:	1109f640 	call	81109f64 <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81106f10:	00005b06 	br	81107080 <vParserCommTask+0x2b0>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81106f14:	110a5440 	call	8110a544 <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
81106f18:	00005906 	br	81107080 <vParserCommTask+0x2b0>
			case sWaitingMessage:

				bSuccess = FALSE;
81106f1c:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingMessage;
81106f20:	00800084 	movi	r2,2
81106f24:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81106f28:	d0a05b17 	ldw	r2,-32404(gp)
81106f2c:	e0fffe04 	addi	r3,fp,-8
81106f30:	180d883a 	mov	r6,r3
81106f34:	000b883a 	mov	r5,zero
81106f38:	1009883a 	mov	r4,r2
81106f3c:	1128fdc0 	call	81128fdc <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81106f40:	e0bffe03 	ldbu	r2,-8(fp)
81106f44:	10803fcc 	andi	r2,r2,255
81106f48:	1000171e 	bne	r2,zero,81106fa8 <vParserCommTask+0x1d8>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81106f4c:	01204534 	movhi	r4,33044
81106f50:	2126ee04 	addi	r4,r4,-25672
81106f54:	11070880 	call	81107088 <getPreParsedPacket>
81106f58:	e0bffd15 	stw	r2,-12(fp)
					if (bSuccess == TRUE) {
81106f5c:	e0bffd17 	ldw	r2,-12(fp)
81106f60:	10800058 	cmpnei	r2,r2,1
81106f64:	10000e1e 	bne	r2,zero,81106fa0 <vParserCommTask+0x1d0>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
81106f68:	00a04534 	movhi	r2,33044
81106f6c:	10a6ee04 	addi	r2,r2,-25672
81106f70:	10800103 	ldbu	r2,4(r2)
81106f74:	10803fcc 	andi	r2,r2,255
81106f78:	1080201c 	xori	r2,r2,128
81106f7c:	10bfe004 	addi	r2,r2,-128
81106f80:	10800858 	cmpnei	r2,r2,33
81106f84:	1000031e 	bne	r2,zero,81106f94 <vParserCommTask+0x1c4>
							eParserMode = sReplyParsing;
81106f88:	00800104 	movi	r2,4
81106f8c:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81106f90:	00003c06 	br	81107084 <vParserCommTask+0x2b4>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
81106f94:	008000c4 	movi	r2,3
81106f98:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81106f9c:	00003906 	br	81107084 <vParserCommTask+0x2b4>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
81106fa0:	110a6040 	call	8110a604 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81106fa4:	00003706 	br	81107084 <vParserCommTask+0x2b4>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
81106fa8:	110a5440 	call	8110a544 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
81106fac:	00003506 	br	81107084 <vParserCommTask+0x2b4>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cType)
81106fb0:	00a04534 	movhi	r2,33044
81106fb4:	10a6ee04 	addi	r2,r2,-25672
81106fb8:	10800103 	ldbu	r2,4(r2)
81106fbc:	10803fcc 	andi	r2,r2,255
81106fc0:	1080201c 	xori	r2,r2,128
81106fc4:	10bfe004 	addi	r2,r2,-128
81106fc8:	108010e0 	cmpeqi	r2,r2,67
81106fcc:	10000426 	beq	r2,zero,81106fe0 <vParserCommTask+0x210>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
							vSendEthConf();
81106fd0:	1108d680 	call	81108d68 <vSendEthConf>
							eParserMode = sWaitingMessage;
81106fd4:	00800084 	movi	r2,2
81106fd8:	e0bffc15 	stw	r2,-16(fp)
						break;
81106fdc:	00000306 	br	81106fec <vParserCommTask+0x21c>
					default:
						eParserMode = sWaitingMessage;
81106fe0:	00800084 	movi	r2,2
81106fe4:	e0bffc15 	stw	r2,-16(fp)
						break;
81106fe8:	0001883a 	nop
				}
				break;
81106fec:	00002506 	br	81107084 <vParserCommTask+0x2b4>
			case sReplyParsing:
                switch (PreParsedLocal.cType)
81106ff0:	00a04534 	movhi	r2,33044
81106ff4:	10a6ee04 	addi	r2,r2,-25672
81106ff8:	10800103 	ldbu	r2,4(r2)
81106ffc:	10803fcc 	andi	r2,r2,255
81107000:	1080201c 	xori	r2,r2,128
81107004:	10bfe004 	addi	r2,r2,-128
81107008:	10c01220 	cmpeqi	r3,r2,72
8110700c:	1800121e 	bne	r3,zero,81107058 <vParserCommTask+0x288>
81107010:	10c01248 	cmpgei	r3,r2,73
81107014:	1800031e 	bne	r3,zero,81107024 <vParserCommTask+0x254>
81107018:	10801120 	cmpeqi	r2,r2,68
8110701c:	1000081e 	bne	r2,zero,81107040 <vParserCommTask+0x270>
81107020:	00001006 	br	81107064 <vParserCommTask+0x294>
81107024:	10c01420 	cmpeqi	r3,r2,80
81107028:	1800081e 	bne	r3,zero,8110704c <vParserCommTask+0x27c>
8110702c:	108014e0 	cmpeqi	r2,r2,83
81107030:	10000c26 	beq	r2,zero,81107064 <vParserCommTask+0x294>
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						eParserMode = sWaitingMessage;
81107034:	00800084 	movi	r2,2
81107038:	e0bffc15 	stw	r2,-16(fp)
                        break;
8110703c:	00000c06 	br	81107070 <vParserCommTask+0x2a0>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/

						eParserMode = sWaitingMessage;
81107040:	00800084 	movi	r2,2
81107044:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107048:	00000906 	br	81107070 <vParserCommTask+0x2a0>
                    case PUS_CMD: /*PUS command to MEB*/

						eParserMode = sWaitingMessage;
8110704c:	00800084 	movi	r2,2
81107050:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107054:	00000606 	br	81107070 <vParserCommTask+0x2a0>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						eParserMode = sWaitingMessage;
81107058:	00800084 	movi	r2,2
8110705c:	e0bffc15 	stw	r2,-16(fp)
                        break;
81107060:	00000306 	br	81107070 <vParserCommTask+0x2a0>
                    default:
						eParserMode = sWaitingMessage;
81107064:	00800084 	movi	r2,2
81107068:	e0bffc15 	stw	r2,-16(fp)
                        break;
8110706c:	0001883a 	nop
                }
				break;
81107070:	00000406 	br	81107084 <vParserCommTask+0x2b4>
			default:
				eParserMode = sWaitingMessage;
81107074:	00800084 	movi	r2,2
81107078:	e0bffc15 	stw	r2,-16(fp)
				break;
8110707c:	00000106 	br	81107084 <vParserCommTask+0x2b4>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81107080:	0001883a 	nop
				break;
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
81107084:	003f6006 	br	81106e08 <__reset+0xfb0e6e08>

81107088 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81107088:	defffb04 	addi	sp,sp,-20
8110708c:	dfc00415 	stw	ra,16(sp)
81107090:	df000315 	stw	fp,12(sp)
81107094:	df000304 	addi	fp,sp,12
81107098:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110709c:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
811070a0:	d0a05f17 	ldw	r2,-32388(gp)
811070a4:	e0fffe44 	addi	r3,fp,-7
811070a8:	180d883a 	mov	r6,r3
811070ac:	000b883a 	mov	r5,zero
811070b0:	1009883a 	mov	r4,r2
811070b4:	11270600 	call	81127060 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
811070b8:	e0bffe43 	ldbu	r2,-7(fp)
811070bc:	10803fcc 	andi	r2,r2,255
811070c0:	10002e1e 	bne	r2,zero,8110717c <getPreParsedPacket+0xf4>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
811070c4:	e03ffe05 	stb	zero,-8(fp)
811070c8:	00002506 	br	81107160 <getPreParsedPacket+0xd8>
		{
            if ( xPreParsed[i].cType != 0 ) {
811070cc:	e0fffe03 	ldbu	r3,-8(fp)
811070d0:	00a045b4 	movhi	r2,33046
811070d4:	10a8fb04 	addi	r2,r2,-23572
811070d8:	18c01324 	muli	r3,r3,76
811070dc:	10c5883a 	add	r2,r2,r3
811070e0:	10800104 	addi	r2,r2,4
811070e4:	10800003 	ldbu	r2,0(r2)
811070e8:	10803fcc 	andi	r2,r2,255
811070ec:	1080201c 	xori	r2,r2,128
811070f0:	10bfe004 	addi	r2,r2,-128
811070f4:	10001726 	beq	r2,zero,81107154 <getPreParsedPacket+0xcc>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
811070f8:	e0fffe03 	ldbu	r3,-8(fp)
811070fc:	e13fff17 	ldw	r4,-4(fp)
81107100:	00a045b4 	movhi	r2,33046
81107104:	10a8fb04 	addi	r2,r2,-23572
81107108:	18c01324 	muli	r3,r3,76
8110710c:	10c5883a 	add	r2,r2,r3
81107110:	2007883a 	mov	r3,r4
81107114:	1009883a 	mov	r4,r2
81107118:	00801304 	movi	r2,76
8110711c:	100d883a 	mov	r6,r2
81107120:	200b883a 	mov	r5,r4
81107124:	1809883a 	mov	r4,r3
81107128:	110d4800 	call	8110d480 <memcpy>
                bSuccess = TRUE;
8110712c:	00800044 	movi	r2,1
81107130:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81107134:	e0fffe03 	ldbu	r3,-8(fp)
81107138:	00a045b4 	movhi	r2,33046
8110713c:	10a8fb04 	addi	r2,r2,-23572
81107140:	18c01324 	muli	r3,r3,76
81107144:	10c5883a 	add	r2,r2,r3
81107148:	10800104 	addi	r2,r2,4
8110714c:	10000005 	stb	zero,0(r2)
                break;
81107150:	00000606 	br	8110716c <getPreParsedPacket+0xe4>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107154:	e0bffe03 	ldbu	r2,-8(fp)
81107158:	10800044 	addi	r2,r2,1
8110715c:	e0bffe05 	stb	r2,-8(fp)
81107160:	e0bffe03 	ldbu	r2,-8(fp)
81107164:	10800130 	cmpltui	r2,r2,4
81107168:	103fd81e 	bne	r2,zero,811070cc <__reset+0xfb0e70cc>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
8110716c:	d0a05f17 	ldw	r2,-32388(gp)
81107170:	1009883a 	mov	r4,r2
81107174:	11275fc0 	call	811275fc <OSMutexPost>
81107178:	00000106 	br	81107180 <getPreParsedPacket+0xf8>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
8110717c:	110a5a40 	call	8110a5a4 <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
81107180:	e0bffd17 	ldw	r2,-12(fp)
}
81107184:	e037883a 	mov	sp,fp
81107188:	dfc00117 	ldw	ra,4(sp)
8110718c:	df000017 	ldw	fp,0(sp)
81107190:	dec00204 	addi	sp,sp,8
81107194:	f800283a 	ret

81107198 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
81107198:	defffc04 	addi	sp,sp,-16
8110719c:	dfc00315 	stw	ra,12(sp)
811071a0:	df000215 	stw	fp,8(sp)
811071a4:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
811071a8:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
811071ac:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
811071b0:	d0a05917 	ldw	r2,-32412(gp)
811071b4:	100f883a 	mov	r7,r2
811071b8:	01800e84 	movi	r6,58
811071bc:	01400044 	movi	r5,1
811071c0:	012044f4 	movhi	r4,33043
811071c4:	21187e04 	addi	r4,r4,25080
811071c8:	110ca840 	call	8110ca84 <fwrite>
	#endif

	ucCountRetries = 0;
811071cc:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
811071d0:	e0bfff03 	ldbu	r2,-4(fp)
811071d4:	10800044 	addi	r2,r2,1
811071d8:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
811071dc:	01000c84 	movi	r4,50
811071e0:	112ade00 	call	8112ade0 <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
811071e4:	d0a05717 	ldw	r2,-32420(gp)
811071e8:	1009883a 	mov	r4,r2
811071ec:	11293540 	call	81129354 <OSSemPost>
811071f0:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
811071f4:	e0bfff43 	ldbu	r2,-3(fp)
811071f8:	10000326 	beq	r2,zero,81107208 <bTrySendSemaphoreCommInit+0x70>
811071fc:	e0bfff03 	ldbu	r2,-4(fp)
81107200:	108002f0 	cmpltui	r2,r2,11
81107204:	103ff21e 	bne	r2,zero,811071d0 <__reset+0xfb0e71d0>

	if ( error_code == OS_ERR_NONE ) {
81107208:	e0bfff43 	ldbu	r2,-3(fp)
8110720c:	1000021e 	bne	r2,zero,81107218 <bTrySendSemaphoreCommInit+0x80>
		bSuccess = TRUE;
81107210:	00800044 	movi	r2,1
81107214:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81107218:	e0bffe17 	ldw	r2,-8(fp)
}
8110721c:	e037883a 	mov	sp,fp
81107220:	dfc00117 	ldw	ra,4(sp)
81107224:	df000017 	ldw	fp,0(sp)
81107228:	dec00204 	addi	sp,sp,8
8110722c:	f800283a 	ret

81107230 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81107230:	deffeb04 	addi	sp,sp,-84
81107234:	dfc01415 	stw	ra,80(sp)
81107238:	df001315 	stw	fp,76(sp)
8110723c:	df001304 	addi	fp,sp,76
81107240:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107244:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81107248:	d0a05917 	ldw	r2,-32412(gp)
8110724c:	100f883a 	mov	r7,r2
81107250:	018006c4 	movi	r6,27
81107254:	01400044 	movi	r5,1
81107258:	012044f4 	movhi	r4,33043
8110725c:	21188d04 	addi	r4,r4,25140
81107260:	110ca840 	call	8110ca84 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
81107264:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
81107268:	e0bfed17 	ldw	r2,-76(fp)
8110726c:	10c00060 	cmpeqi	r3,r2,1
81107270:	1800091e 	bne	r3,zero,81107298 <vReceiverUartTask+0x68>
81107274:	0080052e 	bgeu	zero,r2,8110728c <vReceiverUartTask+0x5c>
81107278:	10c000a0 	cmpeqi	r3,r2,2
8110727c:	1800451e 	bne	r3,zero,81107394 <vReceiverUartTask+0x164>
81107280:	108000e0 	cmpeqi	r2,r2,3
81107284:	1000561e 	bne	r2,zero,811073e0 <vReceiverUartTask+0x1b0>
81107288:	00005f06 	br	81107408 <vReceiverUartTask+0x1d8>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
8110728c:	00800044 	movi	r2,1
81107290:	e0bfed15 	stw	r2,-76(fp)
                break;
81107294:	00005f06 	br	81107414 <vReceiverUartTask+0x1e4>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
81107298:	e0bfef04 	addi	r2,fp,-68
8110729c:	01801004 	movi	r6,64
811072a0:	000b883a 	mov	r5,zero
811072a4:	1009883a 	mov	r4,r2
811072a8:	110d5c80 	call	8110d5c8 <memset>
                scanf("%s", cReceiveBuffer);
811072ac:	e0bfef04 	addi	r2,fp,-68
811072b0:	100b883a 	mov	r5,r2
811072b4:	012044f4 	movhi	r4,33043
811072b8:	21189404 	addi	r4,r4,25168
811072bc:	110daf40 	call	8110daf4 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
811072c0:	e0bfef04 	addi	r2,fp,-68
811072c4:	01604534 	movhi	r5,33044
811072c8:	29670104 	addi	r5,r5,-25596
811072cc:	1009883a 	mov	r4,r2
811072d0:	11074180 	call	81107418 <bPreParser>
811072d4:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
811072d8:	e0bfee17 	ldw	r2,-72(fp)
811072dc:	10800058 	cmpnei	r2,r2,1
811072e0:	1000161e 	bne	r2,zero,8110733c <vReceiverUartTask+0x10c>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
811072e4:	00a04534 	movhi	r2,33044
811072e8:	10a70104 	addi	r2,r2,-25596
811072ec:	10800103 	ldbu	r2,4(r2)
811072f0:	10803fcc 	andi	r2,r2,255
811072f4:	1080201c 	xori	r2,r2,128
811072f8:	10bfe004 	addi	r2,r2,-128
811072fc:	10800fe0 	cmpeqi	r2,r2,63
81107300:	1000081e 	bne	r2,zero,81107324 <vReceiverUartTask+0xf4>
81107304:	00a04534 	movhi	r2,33044
81107308:	10a70104 	addi	r2,r2,-25596
8110730c:	10800103 	ldbu	r2,4(r2)
81107310:	10803fcc 	andi	r2,r2,255
81107314:	1080201c 	xori	r2,r2,128
81107318:	10bfe004 	addi	r2,r2,-128
8110731c:	10800858 	cmpnei	r2,r2,33
81107320:	1000031e 	bne	r2,zero,81107330 <vReceiverUartTask+0x100>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
81107324:	00800084 	movi	r2,2
81107328:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110732c:	00003906 	br	81107414 <vReceiverUartTask+0x1e4>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81107330:	008000c4 	movi	r2,3
81107334:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81107338:	00003606 	br	81107414 <vReceiverUartTask+0x1e4>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110733c:	00a04534 	movhi	r2,33044
81107340:	10a70104 	addi	r2,r2,-25596
81107344:	00c008c4 	movi	r3,35
81107348:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
8110734c:	00a04534 	movhi	r2,33044
81107350:	10a70104 	addi	r2,r2,-25596
81107354:	00c00a44 	movi	r3,41
81107358:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
8110735c:	00a04534 	movhi	r2,33044
81107360:	10a70104 	addi	r2,r2,-25596
81107364:	00c00044 	movi	r3,1
81107368:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110736c:	01204534 	movhi	r4,33044
81107370:	21270104 	addi	r4,r4,-25596
81107374:	11079780 	call	81107978 <setPreAckSenderFreePos>
81107378:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
8110737c:	e0bfee17 	ldw	r2,-72(fp)
81107380:	1000011e 	bne	r2,zero,81107388 <vReceiverUartTask+0x158>
                        vFailSendNack();
81107384:	110a6c40 	call	8110a6c4 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
81107388:	00800044 	movi	r2,1
8110738c:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
81107390:	00002006 	br	81107414 <vReceiverUartTask+0x1e4>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
81107394:	01204534 	movhi	r4,33044
81107398:	21270104 	addi	r4,r4,-25596
8110739c:	11079780 	call	81107978 <setPreAckSenderFreePos>
811073a0:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
811073a4:	e0bfee17 	ldw	r2,-72(fp)
811073a8:	10800058 	cmpnei	r2,r2,1
811073ac:	1000081e 	bne	r2,zero,811073d0 <vReceiverUartTask+0x1a0>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
811073b0:	01204534 	movhi	r4,33044
811073b4:	21270104 	addi	r4,r4,-25596
811073b8:	11078200 	call	81107820 <setPreParsedFreePos>
811073bc:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
811073c0:	e0bfee17 	ldw	r2,-72(fp)
811073c4:	1000031e 	bne	r2,zero,811073d4 <vReceiverUartTask+0x1a4>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
811073c8:	110a7840 	call	8110a784 <vFailSetPreParsedBuffer>
811073cc:	00000106 	br	811073d4 <vReceiverUartTask+0x1a4>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
811073d0:	110a7240 	call	8110a724 <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
811073d4:	00800044 	movi	r2,1
811073d8:	e0bfed15 	stw	r2,-76(fp)
                break;
811073dc:	00000d06 	br	81107414 <vReceiverUartTask+0x1e4>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
811073e0:	01204534 	movhi	r4,33044
811073e4:	21270104 	addi	r4,r4,-25596
811073e8:	1107b140 	call	81107b14 <setPreAckReceiverFreePos>
811073ec:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
811073f0:	e0bfee17 	ldw	r2,-72(fp)
811073f4:	1000011e 	bne	r2,zero,811073fc <vReceiverUartTask+0x1cc>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
811073f8:	110a7e40 	call	8110a7e4 <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
811073fc:	00800044 	movi	r2,1
81107400:	e0bfed15 	stw	r2,-76(fp)
                break;
81107404:	00000306 	br	81107414 <vReceiverUartTask+0x1e4>
            default:
                eReaderRXMode = sGetRxUart;
81107408:	00800044 	movi	r2,1
8110740c:	e0bfed15 	stw	r2,-76(fp)
                break;
81107410:	0001883a 	nop
        }

    }
81107414:	003f9406 	br	81107268 <__reset+0xfb0e7268>

81107418 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
81107418:	defff204 	addi	sp,sp,-56
8110741c:	dfc00d15 	stw	ra,52(sp)
81107420:	df000c15 	stw	fp,48(sp)
81107424:	dc000b15 	stw	r16,44(sp)
81107428:	df000c04 	addi	fp,sp,48
8110742c:	e13ffd15 	stw	r4,-12(fp)
81107430:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
81107434:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
81107438:	e13ffd17 	ldw	r4,-12(fp)
8110743c:	110ddac0 	call	8110ddac <strlen>
81107440:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
81107444:	01400ec4 	movi	r5,59
81107448:	e13ffd17 	ldw	r4,-12(fp)
8110744c:	11090380 	call	81109038 <siPosStr>
81107450:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
81107454:	01401004 	movi	r5,64
81107458:	e13ffd17 	ldw	r4,-12(fp)
8110745c:	11090380 	call	81109038 <siPosStr>
81107460:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
81107464:	014008c4 	movi	r5,35
81107468:	e13ffd17 	ldw	r4,-12(fp)
8110746c:	11090380 	call	81109038 <siPosStr>
81107470:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
81107474:	e17ff80b 	ldhu	r5,-32(fp)
81107478:	e0bff88b 	ldhu	r2,-30(fp)
8110747c:	10ffffcc 	andi	r3,r2,65535
81107480:	18e0001c 	xori	r3,r3,32768
81107484:	18e00004 	addi	r3,r3,-32768
81107488:	293fffcc 	andi	r4,r5,65535
8110748c:	2120001c 	xori	r4,r4,32768
81107490:	21200004 	addi	r4,r4,-32768
81107494:	20c0010e 	bge	r4,r3,8110749c <bPreParser+0x84>
81107498:	2805883a 	mov	r2,r5
8110749c:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
811074a0:	01400fc4 	movi	r5,63
811074a4:	e13ffd17 	ldw	r4,-12(fp)
811074a8:	11090380 	call	81109038 <siPosStr>
811074ac:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
811074b0:	01400844 	movi	r5,33
811074b4:	e13ffd17 	ldw	r4,-12(fp)
811074b8:	11090380 	call	81109038 <siPosStr>
811074bc:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
811074c0:	e17ff90b 	ldhu	r5,-28(fp)
811074c4:	e0bff98b 	ldhu	r2,-26(fp)
811074c8:	10ffffcc 	andi	r3,r2,65535
811074cc:	18e0001c 	xori	r3,r3,32768
811074d0:	18e00004 	addi	r3,r3,-32768
811074d4:	293fffcc 	andi	r4,r5,65535
811074d8:	2120001c 	xori	r4,r4,32768
811074dc:	21200004 	addi	r4,r4,-32768
811074e0:	20c0010e 	bge	r4,r3,811074e8 <bPreParser+0xd0>
811074e4:	2805883a 	mov	r2,r5
811074e8:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
811074ec:	e17ff90b 	ldhu	r5,-28(fp)
811074f0:	e0bff80b 	ldhu	r2,-32(fp)
811074f4:	10ffffcc 	andi	r3,r2,65535
811074f8:	18e0001c 	xori	r3,r3,32768
811074fc:	18e00004 	addi	r3,r3,-32768
81107500:	293fffcc 	andi	r4,r5,65535
81107504:	2120001c 	xori	r4,r4,32768
81107508:	21200004 	addi	r4,r4,-32768
8110750c:	20c0010e 	bge	r4,r3,81107514 <bPreParser+0xfc>
81107510:	2805883a 	mov	r2,r5
81107514:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
81107518:	01401f04 	movi	r5,124
8110751c:	e13ffd17 	ldw	r4,-12(fp)
81107520:	11090380 	call	81109038 <siPosStr>
81107524:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
81107528:	e0fff78f 	ldh	r3,-34(fp)
8110752c:	e0bff70f 	ldh	r2,-36(fp)
81107530:	10bfffc4 	addi	r2,r2,-1
81107534:	1880ac1e 	bne	r3,r2,811077e8 <bPreParser+0x3d0>
81107538:	e0fffa0f 	ldh	r3,-24(fp)
8110753c:	e0bff78f 	ldh	r2,-34(fp)
81107540:	1880a90e 	bge	r3,r2,811077e8 <bPreParser+0x3d0>
81107544:	e0fff90f 	ldh	r3,-28(fp)
81107548:	e0bffa0f 	ldh	r2,-24(fp)
8110754c:	1880a60e 	bge	r3,r2,811077e8 <bPreParser+0x3d0>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
81107550:	e0bff90f 	ldh	r2,-28(fp)
81107554:	e0fffd17 	ldw	r3,-12(fp)
81107558:	1889883a 	add	r4,r3,r2
8110755c:	e0fffa0f 	ldh	r3,-24(fp)
81107560:	e0bff90f 	ldh	r2,-28(fp)
81107564:	1885c83a 	sub	r2,r3,r2
81107568:	100b883a 	mov	r5,r2
8110756c:	1109dc80 	call	81109dc8 <ucCrc8wInit>
81107570:	1007883a 	mov	r3,r2
81107574:	e0bffe17 	ldw	r2,-8(fp)
81107578:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
8110757c:	e0bff90f 	ldh	r2,-28(fp)
81107580:	e0fffd17 	ldw	r3,-12(fp)
81107584:	1885883a 	add	r2,r3,r2
81107588:	10c00003 	ldbu	r3,0(r2)
8110758c:	e0bffe17 	ldw	r2,-8(fp)
81107590:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81107594:	e0bffe17 	ldw	r2,-8(fp)
81107598:	10800103 	ldbu	r2,4(r2)
8110759c:	10803fcc 	andi	r2,r2,255
811075a0:	1080201c 	xori	r2,r2,128
811075a4:	10bfe004 	addi	r2,r2,-128
811075a8:	108008d8 	cmpnei	r2,r2,35
811075ac:	1000091e 	bne	r2,zero,811075d4 <bPreParser+0x1bc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
811075b0:	e0bffe17 	ldw	r2,-8(fp)
811075b4:	00c00d84 	movi	r3,54
811075b8:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
811075bc:	e0bffe17 	ldw	r2,-8(fp)
811075c0:	00c00d84 	movi	r3,54
811075c4:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
811075c8:	00800044 	movi	r2,1
811075cc:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811075d0:	00008606 	br	811077ec <bPreParser+0x3d4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
811075d4:	e0bff90f 	ldh	r2,-28(fp)
811075d8:	10800044 	addi	r2,r2,1
811075dc:	e0fffd17 	ldw	r3,-12(fp)
811075e0:	1885883a 	add	r2,r3,r2
811075e4:	10c00003 	ldbu	r3,0(r2)
811075e8:	e0bffe17 	ldw	r2,-8(fp)
811075ec:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
811075f0:	e0bffe17 	ldw	r2,-8(fp)
811075f4:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
811075f8:	e0bffe17 	ldw	r2,-8(fp)
811075fc:	10800204 	addi	r2,r2,8
81107600:	01800804 	movi	r6,32
81107604:	000b883a 	mov	r5,zero
81107608:	1009883a 	mov	r4,r2
8110760c:	110d5c80 	call	8110d5c8 <memset>

            i = siIniReq + 3; /* "?C:i..." */
81107610:	e0bff90b 	ldhu	r2,-28(fp)
81107614:	108000c4 	addi	r2,r2,3
81107618:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
8110761c:	e0bffac4 	addi	r2,fp,-21
81107620:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
81107624:	e0bffac4 	addi	r2,fp,-21
81107628:	01800184 	movi	r6,6
8110762c:	000b883a 	mov	r5,zero
81107630:	1009883a 	mov	r4,r2
81107634:	110d5c80 	call	8110d5c8 <memset>
                do {
                    c = buffer[i];
81107638:	e0bff503 	ldbu	r2,-44(fp)
8110763c:	e0fffd17 	ldw	r3,-12(fp)
81107640:	1885883a 	add	r2,r3,r2
81107644:	10800003 	ldbu	r2,0(r2)
81107648:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
8110764c:	d0e00817 	ldw	r3,-32736(gp)
81107650:	e0bffa87 	ldb	r2,-22(fp)
81107654:	10800044 	addi	r2,r2,1
81107658:	1885883a 	add	r2,r3,r2
8110765c:	10800003 	ldbu	r2,0(r2)
81107660:	10803fcc 	andi	r2,r2,255
81107664:	1080010c 	andi	r2,r2,4
81107668:	10000626 	beq	r2,zero,81107684 <bPreParser+0x26c>
                        (*p_inteiro) = c;
8110766c:	e0bff617 	ldw	r2,-40(fp)
81107670:	e0fffa83 	ldbu	r3,-22(fp)
81107674:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
81107678:	e0bff617 	ldw	r2,-40(fp)
8110767c:	10800044 	addi	r2,r2,1
81107680:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
81107684:	e0bff503 	ldbu	r2,-44(fp)
81107688:	10800044 	addi	r2,r2,1
8110768c:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
81107690:	e0bff70f 	ldh	r2,-36(fp)
81107694:	e0fff503 	ldbu	r3,-44(fp)
81107698:	1880090e 	bge	r3,r2,811076c0 <bPreParser+0x2a8>
8110769c:	e0bffa87 	ldb	r2,-22(fp)
811076a0:	10800ea0 	cmpeqi	r2,r2,58
811076a4:	1000061e 	bne	r2,zero,811076c0 <bPreParser+0x2a8>
811076a8:	e0bffa87 	ldb	r2,-22(fp)
811076ac:	10800ee0 	cmpeqi	r2,r2,59
811076b0:	1000031e 	bne	r2,zero,811076c0 <bPreParser+0x2a8>
811076b4:	e0bffa87 	ldb	r2,-22(fp)
811076b8:	10801f18 	cmpnei	r2,r2,124
811076bc:	103fde1e 	bne	r2,zero,81107638 <__reset+0xfb0e7638>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
811076c0:	e0bff617 	ldw	r2,-40(fp)
811076c4:	00c00284 	movi	r3,10
811076c8:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
811076cc:	e0bffa87 	ldb	r2,-22(fp)
811076d0:	10800ea0 	cmpeqi	r2,r2,58
811076d4:	1000031e 	bne	r2,zero,811076e4 <bPreParser+0x2cc>
811076d8:	e0bffa87 	ldb	r2,-22(fp)
811076dc:	10801f18 	cmpnei	r2,r2,124
811076e0:	10001a1e 	bne	r2,zero,8110774c <bPreParser+0x334>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
811076e4:	e0bffe17 	ldw	r2,-8(fp)
811076e8:	10800183 	ldbu	r2,6(r2)
811076ec:	10803fcc 	andi	r2,r2,255
811076f0:	10800828 	cmpgeui	r2,r2,32
811076f4:	1000041e 	bne	r2,zero,81107708 <bPreParser+0x2f0>
811076f8:	e0bffe17 	ldw	r2,-8(fp)
811076fc:	10800183 	ldbu	r2,6(r2)
81107700:	14003fcc 	andi	r16,r2,255
81107704:	00000106 	br	8110770c <bPreParser+0x2f4>
81107708:	04000804 	movi	r16,32
8110770c:	e0bffac4 	addi	r2,fp,-21
81107710:	1009883a 	mov	r4,r2
81107714:	110c36c0 	call	8110c36c <atoi>
81107718:	1009883a 	mov	r4,r2
8110771c:	e0fffe17 	ldw	r3,-8(fp)
81107720:	80800104 	addi	r2,r16,4
81107724:	1085883a 	add	r2,r2,r2
81107728:	1885883a 	add	r2,r3,r2
8110772c:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
81107730:	e0bffe17 	ldw	r2,-8(fp)
81107734:	10800183 	ldbu	r2,6(r2)
81107738:	10800044 	addi	r2,r2,1
8110773c:	1007883a 	mov	r3,r2
81107740:	e0bffe17 	ldw	r2,-8(fp)
81107744:	10c00185 	stb	r3,6(r2)
81107748:	00000906 	br	81107770 <bPreParser+0x358>
                }
                else if ( c == FINAL_CHAR )
8110774c:	e0bffa87 	ldb	r2,-22(fp)
81107750:	10800ed8 	cmpnei	r2,r2,59
81107754:	1000061e 	bne	r2,zero,81107770 <bPreParser+0x358>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
81107758:	e0bffac4 	addi	r2,fp,-21
8110775c:	1009883a 	mov	r4,r2
81107760:	110c36c0 	call	8110c36c <atoi>
81107764:	1007883a 	mov	r3,r2
81107768:	e0bffe17 	ldw	r2,-8(fp)
8110776c:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
81107770:	e0bffa87 	ldb	r2,-22(fp)
81107774:	10800ee0 	cmpeqi	r2,r2,59
81107778:	1000031e 	bne	r2,zero,81107788 <bPreParser+0x370>
8110777c:	e0bff70f 	ldh	r2,-36(fp)
81107780:	e0fff503 	ldbu	r3,-44(fp)
81107784:	18bfa516 	blt	r3,r2,8110761c <__reset+0xfb0e761c>

            if ( c == FINAL_CHAR )
81107788:	e0bffa87 	ldb	r2,-22(fp)
8110778c:	10800ed8 	cmpnei	r2,r2,59
81107790:	1000131e 	bne	r2,zero,811077e0 <bPreParser+0x3c8>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
81107794:	e0bffe17 	ldw	r2,-8(fp)
81107798:	10c01243 	ldbu	r3,73(r2)
8110779c:	e0bffe17 	ldw	r2,-8(fp)
811077a0:	10801203 	ldbu	r2,72(r2)
811077a4:	18c03fcc 	andi	r3,r3,255
811077a8:	10803fcc 	andi	r2,r2,255
811077ac:	1880031e 	bne	r3,r2,811077bc <bPreParser+0x3a4>
                    bSuccess = TRUE;
811077b0:	00800044 	movi	r2,1
811077b4:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811077b8:	00000c06 	br	811077ec <bPreParser+0x3d4>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
811077bc:	d0a05917 	ldw	r2,-32412(gp)
811077c0:	100f883a 	mov	r7,r2
811077c4:	018005c4 	movi	r6,23
811077c8:	01400044 	movi	r5,1
811077cc:	012044f4 	movhi	r4,33043
811077d0:	21189504 	addi	r4,r4,25172
811077d4:	110ca840 	call	8110ca84 <fwrite>
                    #endif
                    bSuccess = FALSE;
811077d8:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811077dc:	00000306 	br	811077ec <bPreParser+0x3d4>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
811077e0:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811077e4:	00000106 	br	811077ec <bPreParser+0x3d4>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
811077e8:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
811077ec:	e13ffd17 	ldw	r4,-12(fp)
811077f0:	110ddac0 	call	8110ddac <strlen>
811077f4:	100d883a 	mov	r6,r2
811077f8:	000b883a 	mov	r5,zero
811077fc:	e13ffd17 	ldw	r4,-12(fp)
81107800:	110d5c80 	call	8110d5c8 <memset>

    return bSuccess;
81107804:	e0bff417 	ldw	r2,-48(fp)
}
81107808:	e6ffff04 	addi	sp,fp,-4
8110780c:	dfc00217 	ldw	ra,8(sp)
81107810:	df000117 	ldw	fp,4(sp)
81107814:	dc000017 	ldw	r16,0(sp)
81107818:	dec00304 	addi	sp,sp,12
8110781c:	f800283a 	ret

81107820 <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
81107820:	defffb04 	addi	sp,sp,-20
81107824:	dfc00415 	stw	ra,16(sp)
81107828:	df000315 	stw	fp,12(sp)
8110782c:	df000304 	addi	fp,sp,12
81107830:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107834:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107838:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110783c:	00004306 	br	8110794c <setPreParsedFreePos+0x12c>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81107840:	d0a05f17 	ldw	r2,-32388(gp)
81107844:	e0fffe84 	addi	r3,fp,-6
81107848:	180d883a 	mov	r6,r3
8110784c:	01400084 	movi	r5,2
81107850:	1009883a 	mov	r4,r2
81107854:	11270600 	call	81127060 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107858:	e0bffe83 	ldbu	r2,-6(fp)
8110785c:	10803fcc 	andi	r2,r2,255
81107860:	1000371e 	bne	r2,zero,81107940 <setPreParsedFreePos+0x120>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107864:	e03ffe45 	stb	zero,-7(fp)
81107868:	00002e06 	br	81107924 <setPreParsedFreePos+0x104>
            {
                if ( xPreParsed[i].cType == 0 ) {
8110786c:	e0fffe43 	ldbu	r3,-7(fp)
81107870:	00a045b4 	movhi	r2,33046
81107874:	10a8fb04 	addi	r2,r2,-23572
81107878:	18c01324 	muli	r3,r3,76
8110787c:	10c5883a 	add	r2,r2,r3
81107880:	10800104 	addi	r2,r2,4
81107884:	10800003 	ldbu	r2,0(r2)
81107888:	10803fcc 	andi	r2,r2,255
8110788c:	1080201c 	xori	r2,r2,128
81107890:	10bfe004 	addi	r2,r2,-128
81107894:	1000201e 	bne	r2,zero,81107918 <setPreParsedFreePos+0xf8>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
81107898:	e0fffe43 	ldbu	r3,-7(fp)
8110789c:	00a045b4 	movhi	r2,33046
811078a0:	10a8fb04 	addi	r2,r2,-23572
811078a4:	18c01324 	muli	r3,r3,76
811078a8:	10c7883a 	add	r3,r2,r3
811078ac:	e0bfff17 	ldw	r2,-4(fp)
811078b0:	1009883a 	mov	r4,r2
811078b4:	00801304 	movi	r2,76
811078b8:	100d883a 	mov	r6,r2
811078bc:	200b883a 	mov	r5,r4
811078c0:	1809883a 	mov	r4,r3
811078c4:	110d4800 	call	8110d480 <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
811078c8:	d0a05b17 	ldw	r2,-32404(gp)
811078cc:	1009883a 	mov	r4,r2
811078d0:	11293540 	call	81129354 <OSSemPost>
811078d4:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
811078d8:	e0bffe83 	ldbu	r2,-6(fp)
811078dc:	10803fcc 	andi	r2,r2,255
811078e0:	1000031e 	bne	r2,zero,811078f0 <setPreParsedFreePos+0xd0>
                        bSuccess = TRUE;
811078e4:	00800044 	movi	r2,1
811078e8:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
811078ec:	00001006 	br	81107930 <setPreParsedFreePos+0x110>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
811078f0:	1109fc40 	call	81109fc4 <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
811078f4:	e0fffe43 	ldbu	r3,-7(fp)
811078f8:	00a045b4 	movhi	r2,33046
811078fc:	10a8fb04 	addi	r2,r2,-23572
81107900:	18c01324 	muli	r3,r3,76
81107904:	10c5883a 	add	r2,r2,r3
81107908:	10800104 	addi	r2,r2,4
8110790c:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81107910:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81107914:	00000606 	br	81107930 <setPreParsedFreePos+0x110>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81107918:	e0bffe43 	ldbu	r2,-7(fp)
8110791c:	10800044 	addi	r2,r2,1
81107920:	e0bffe45 	stb	r2,-7(fp)
81107924:	e0bffe43 	ldbu	r2,-7(fp)
81107928:	10800130 	cmpltui	r2,r2,4
8110792c:	103fcf1e 	bne	r2,zero,8110786c <__reset+0xfb0e786c>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
81107930:	d0a05f17 	ldw	r2,-32388(gp)
81107934:	1009883a 	mov	r4,r2
81107938:	11275fc0 	call	811275fc <OSMutexPost>
8110793c:	00000306 	br	8110794c <setPreParsedFreePos+0x12c>
        } else {
            ucCountRetries++;
81107940:	e0bffe03 	ldbu	r2,-8(fp)
81107944:	10800044 	addi	r2,r2,1
81107948:	e0bffe05 	stb	r2,-8(fp)
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110794c:	e0bffd17 	ldw	r2,-12(fp)
81107950:	1000031e 	bne	r2,zero,81107960 <setPreParsedFreePos+0x140>
81107954:	e0bffe03 	ldbu	r2,-8(fp)
81107958:	108000b0 	cmpltui	r2,r2,2
8110795c:	103fb81e 	bne	r2,zero,81107840 <__reset+0xfb0e7840>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81107960:	e0bffd17 	ldw	r2,-12(fp)
}
81107964:	e037883a 	mov	sp,fp
81107968:	dfc00117 	ldw	ra,4(sp)
8110796c:	df000017 	ldw	fp,0(sp)
81107970:	dec00204 	addi	sp,sp,8
81107974:	f800283a 	ret

81107978 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
81107978:	defffb04 	addi	sp,sp,-20
8110797c:	dfc00415 	stw	ra,16(sp)
81107980:	df000315 	stw	fp,12(sp)
81107984:	df000304 	addi	fp,sp,12
81107988:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110798c:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107990:	e03ffe05 	stb	zero,-8(fp)

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107994:	00005406 	br	81107ae8 <setPreAckSenderFreePos+0x170>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
81107998:	d0a06417 	ldw	r2,-32368(gp)
8110799c:	e0fffe84 	addi	r3,fp,-6
811079a0:	180d883a 	mov	r6,r3
811079a4:	01400104 	movi	r5,4
811079a8:	1009883a 	mov	r4,r2
811079ac:	11270600 	call	81127060 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
811079b0:	e0bffe83 	ldbu	r2,-6(fp)
811079b4:	10803fcc 	andi	r2,r2,255
811079b8:	1000481e 	bne	r2,zero,81107adc <setPreAckSenderFreePos+0x164>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
811079bc:	e03ffe45 	stb	zero,-7(fp)
811079c0:	00003f06 	br	81107ac0 <setPreAckSenderFreePos+0x148>
            {
                if ( xSenderACK[i].cType == 0 ) {
811079c4:	e0fffe43 	ldbu	r3,-7(fp)
811079c8:	00a045b4 	movhi	r2,33046
811079cc:	10a8f704 	addi	r2,r2,-23588
811079d0:	18c7883a 	add	r3,r3,r3
811079d4:	18c7883a 	add	r3,r3,r3
811079d8:	10c5883a 	add	r2,r2,r3
811079dc:	10800003 	ldbu	r2,0(r2)
811079e0:	10803fcc 	andi	r2,r2,255
811079e4:	1080201c 	xori	r2,r2,128
811079e8:	10bfe004 	addi	r2,r2,-128
811079ec:	1000311e 	bne	r2,zero,81107ab4 <setPreAckSenderFreePos+0x13c>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
811079f0:	e0fffe43 	ldbu	r3,-7(fp)
811079f4:	e0bfff17 	ldw	r2,-4(fp)
811079f8:	11000103 	ldbu	r4,4(r2)
811079fc:	00a045b4 	movhi	r2,33046
81107a00:	10a8f704 	addi	r2,r2,-23588
81107a04:	18c7883a 	add	r3,r3,r3
81107a08:	18c7883a 	add	r3,r3,r3
81107a0c:	10c5883a 	add	r2,r2,r3
81107a10:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
81107a14:	e0fffe43 	ldbu	r3,-7(fp)
81107a18:	e0bfff17 	ldw	r2,-4(fp)
81107a1c:	11000143 	ldbu	r4,5(r2)
81107a20:	00a045b4 	movhi	r2,33046
81107a24:	10a8f704 	addi	r2,r2,-23588
81107a28:	18c7883a 	add	r3,r3,r3
81107a2c:	18c7883a 	add	r3,r3,r3
81107a30:	10c5883a 	add	r2,r2,r3
81107a34:	10800044 	addi	r2,r2,1
81107a38:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
81107a3c:	e0fffe43 	ldbu	r3,-7(fp)
81107a40:	e0bfff17 	ldw	r2,-4(fp)
81107a44:	1100020b 	ldhu	r4,8(r2)
81107a48:	00a045b4 	movhi	r2,33046
81107a4c:	10a8f704 	addi	r2,r2,-23588
81107a50:	18c7883a 	add	r3,r3,r3
81107a54:	18c7883a 	add	r3,r3,r3
81107a58:	10c5883a 	add	r2,r2,r3
81107a5c:	10800084 	addi	r2,r2,2
81107a60:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
81107a64:	d0a05817 	ldw	r2,-32416(gp)
81107a68:	1009883a 	mov	r4,r2
81107a6c:	11293540 	call	81129354 <OSSemPost>
81107a70:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81107a74:	e0bffe83 	ldbu	r2,-6(fp)
81107a78:	10803fcc 	andi	r2,r2,255
81107a7c:	1000031e 	bne	r2,zero,81107a8c <setPreAckSenderFreePos+0x114>
                        bSuccess = TRUE;
81107a80:	00800044 	movi	r2,1
81107a84:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81107a88:	00001006 	br	81107acc <setPreAckSenderFreePos+0x154>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
81107a8c:	110a04c0 	call	8110a04c <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
81107a90:	e0fffe43 	ldbu	r3,-7(fp)
81107a94:	00a045b4 	movhi	r2,33046
81107a98:	10a8f704 	addi	r2,r2,-23588
81107a9c:	18c7883a 	add	r3,r3,r3
81107aa0:	18c7883a 	add	r3,r3,r3
81107aa4:	10c5883a 	add	r2,r2,r3
81107aa8:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81107aac:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81107ab0:	00000606 	br	81107acc <setPreAckSenderFreePos+0x154>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81107ab4:	e0bffe43 	ldbu	r2,-7(fp)
81107ab8:	10800044 	addi	r2,r2,1
81107abc:	e0bffe45 	stb	r2,-7(fp)
81107ac0:	e0bffe43 	ldbu	r2,-7(fp)
81107ac4:	10800130 	cmpltui	r2,r2,4
81107ac8:	103fbe1e 	bne	r2,zero,811079c4 <__reset+0xfb0e79c4>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
81107acc:	d0a06417 	ldw	r2,-32368(gp)
81107ad0:	1009883a 	mov	r4,r2
81107ad4:	11275fc0 	call	811275fc <OSMutexPost>
81107ad8:	00000306 	br	81107ae8 <setPreAckSenderFreePos+0x170>
        } else {
            ucCountRetries++;
81107adc:	e0bffe03 	ldbu	r2,-8(fp)
81107ae0:	10800044 	addi	r2,r2,1
81107ae4:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107ae8:	e0bffd17 	ldw	r2,-12(fp)
81107aec:	1000031e 	bne	r2,zero,81107afc <setPreAckSenderFreePos+0x184>
81107af0:	e0bffe03 	ldbu	r2,-8(fp)
81107af4:	108000b0 	cmpltui	r2,r2,2
81107af8:	103fa71e 	bne	r2,zero,81107998 <__reset+0xfb0e7998>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81107afc:	e0bffd17 	ldw	r2,-12(fp)
}
81107b00:	e037883a 	mov	sp,fp
81107b04:	dfc00117 	ldw	ra,4(sp)
81107b08:	df000017 	ldw	fp,0(sp)
81107b0c:	dec00204 	addi	sp,sp,8
81107b10:	f800283a 	ret

81107b14 <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
81107b14:	defffb04 	addi	sp,sp,-20
81107b18:	dfc00415 	stw	ra,16(sp)
81107b1c:	df000315 	stw	fp,12(sp)
81107b20:	df000304 	addi	fp,sp,12
81107b24:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81107b28:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81107b2c:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107b30:	00005406 	br	81107c84 <setPreAckReceiverFreePos+0x170>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81107b34:	d0a05c17 	ldw	r2,-32400(gp)
81107b38:	e0fffe84 	addi	r3,fp,-6
81107b3c:	180d883a 	mov	r6,r3
81107b40:	01400084 	movi	r5,2
81107b44:	1009883a 	mov	r4,r2
81107b48:	11270600 	call	81127060 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81107b4c:	e0bffe83 	ldbu	r2,-6(fp)
81107b50:	10803fcc 	andi	r2,r2,255
81107b54:	1000481e 	bne	r2,zero,81107c78 <setPreAckReceiverFreePos+0x164>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
81107b58:	e03ffe45 	stb	zero,-7(fp)
81107b5c:	00003f06 	br	81107c5c <setPreAckReceiverFreePos+0x148>
            {
                if ( xReceivedACK[i].cType == 0 ) {
81107b60:	e0fffe43 	ldbu	r3,-7(fp)
81107b64:	00a045b4 	movhi	r2,33046
81107b68:	10a0f304 	addi	r2,r2,-31796
81107b6c:	18c7883a 	add	r3,r3,r3
81107b70:	18c7883a 	add	r3,r3,r3
81107b74:	10c5883a 	add	r2,r2,r3
81107b78:	10800003 	ldbu	r2,0(r2)
81107b7c:	10803fcc 	andi	r2,r2,255
81107b80:	1080201c 	xori	r2,r2,128
81107b84:	10bfe004 	addi	r2,r2,-128
81107b88:	1000311e 	bne	r2,zero,81107c50 <setPreAckReceiverFreePos+0x13c>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
81107b8c:	e0fffe43 	ldbu	r3,-7(fp)
81107b90:	e0bfff17 	ldw	r2,-4(fp)
81107b94:	11000103 	ldbu	r4,4(r2)
81107b98:	00a045b4 	movhi	r2,33046
81107b9c:	10a0f304 	addi	r2,r2,-31796
81107ba0:	18c7883a 	add	r3,r3,r3
81107ba4:	18c7883a 	add	r3,r3,r3
81107ba8:	10c5883a 	add	r2,r2,r3
81107bac:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
81107bb0:	e0fffe43 	ldbu	r3,-7(fp)
81107bb4:	e0bfff17 	ldw	r2,-4(fp)
81107bb8:	11000143 	ldbu	r4,5(r2)
81107bbc:	00a045b4 	movhi	r2,33046
81107bc0:	10a0f304 	addi	r2,r2,-31796
81107bc4:	18c7883a 	add	r3,r3,r3
81107bc8:	18c7883a 	add	r3,r3,r3
81107bcc:	10c5883a 	add	r2,r2,r3
81107bd0:	10800044 	addi	r2,r2,1
81107bd4:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
81107bd8:	e0fffe43 	ldbu	r3,-7(fp)
81107bdc:	e0bfff17 	ldw	r2,-4(fp)
81107be0:	1100020b 	ldhu	r4,8(r2)
81107be4:	00a045b4 	movhi	r2,33046
81107be8:	10a0f304 	addi	r2,r2,-31796
81107bec:	18c7883a 	add	r3,r3,r3
81107bf0:	18c7883a 	add	r3,r3,r3
81107bf4:	10c5883a 	add	r2,r2,r3
81107bf8:	10800084 	addi	r2,r2,2
81107bfc:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
81107c00:	d0a05d17 	ldw	r2,-32396(gp)
81107c04:	1009883a 	mov	r4,r2
81107c08:	11293540 	call	81129354 <OSSemPost>
81107c0c:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81107c10:	e0bffe83 	ldbu	r2,-6(fp)
81107c14:	10803fcc 	andi	r2,r2,255
81107c18:	1000031e 	bne	r2,zero,81107c28 <setPreAckReceiverFreePos+0x114>
                        bSuccess = TRUE;
81107c1c:	00800044 	movi	r2,1
81107c20:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81107c24:	00001006 	br	81107c68 <setPreAckReceiverFreePos+0x154>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
81107c28:	110a0080 	call	8110a008 <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
81107c2c:	e0fffe43 	ldbu	r3,-7(fp)
81107c30:	00a045b4 	movhi	r2,33046
81107c34:	10a0f304 	addi	r2,r2,-31796
81107c38:	18c7883a 	add	r3,r3,r3
81107c3c:	18c7883a 	add	r3,r3,r3
81107c40:	10c5883a 	add	r2,r2,r3
81107c44:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81107c48:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81107c4c:	00000606 	br	81107c68 <setPreAckReceiverFreePos+0x154>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
81107c50:	e0bffe43 	ldbu	r2,-7(fp)
81107c54:	10800044 	addi	r2,r2,1
81107c58:	e0bffe45 	stb	r2,-7(fp)
81107c5c:	e0bffe43 	ldbu	r2,-7(fp)
81107c60:	10800130 	cmpltui	r2,r2,4
81107c64:	103fbe1e 	bne	r2,zero,81107b60 <__reset+0xfb0e7b60>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
81107c68:	d0a05c17 	ldw	r2,-32400(gp)
81107c6c:	1009883a 	mov	r4,r2
81107c70:	11275fc0 	call	811275fc <OSMutexPost>
81107c74:	00000306 	br	81107c84 <setPreAckReceiverFreePos+0x170>
        } else {
            ucCountRetries++;
81107c78:	e0bffe03 	ldbu	r2,-8(fp)
81107c7c:	10800044 	addi	r2,r2,1
81107c80:	e0bffe05 	stb	r2,-8(fp)
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81107c84:	e0bffd17 	ldw	r2,-12(fp)
81107c88:	1000031e 	bne	r2,zero,81107c98 <setPreAckReceiverFreePos+0x184>
81107c8c:	e0bffe03 	ldbu	r2,-8(fp)
81107c90:	108000b0 	cmpltui	r2,r2,2
81107c94:	103fa71e 	bne	r2,zero,81107b34 <__reset+0xfb0e7b34>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81107c98:	e0bffd17 	ldw	r2,-12(fp)
}
81107c9c:	e037883a 	mov	sp,fp
81107ca0:	dfc00117 	ldw	ra,4(sp)
81107ca4:	df000017 	ldw	fp,0(sp)
81107ca8:	dec00204 	addi	sp,sp,8
81107cac:	f800283a 	ret

81107cb0 <MemDMATask>:
void Set_SpW_Led(char c_SpwID);

/* OS Tasks */

/* Mem DMA Task, configure and manages the Memories DMA for use of the SpW Transparent Interface*/
void MemDMATask(void *task_data) {
81107cb0:	defffd04 	addi	sp,sp,-12
81107cb4:	dfc00215 	stw	ra,8(sp)
81107cb8:	df000115 	stw	fp,4(sp)
81107cbc:	df000104 	addi	fp,sp,4
81107cc0:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"mem dma\" Task (Prio:%d) \n", MEM_DMA_TASK_PRIORITY);
81107cc4:	014003c4 	movi	r5,15
81107cc8:	012044f4 	movhi	r4,33043
81107ccc:	21189b04 	addi	r4,r4,25196
81107cd0:	110d7800 	call	8110d780 <printf>
	/* read address - source address (data buffer) */
	/* write address - destination address (transparent interface) */
	/* transfer size bytes - number of bytes to be transfered */

	while (1) {
		OSTimeDlyHMSM(0, 1, 0, 0);
81107cd4:	000f883a 	mov	r7,zero
81107cd8:	000d883a 	mov	r6,zero
81107cdc:	01400044 	movi	r5,1
81107ce0:	0009883a 	mov	r4,zero
81107ce4:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107ce8:	003ffa06 	br	81107cd4 <__reset+0xfb0e7cd4>

81107cec <SPWATask>:
}

/* SPW A Task, configure and monitor the SpW A channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWATask(void *task_data) {
81107cec:	defffd04 	addi	sp,sp,-12
81107cf0:	dfc00215 	stw	ra,8(sp)
81107cf4:	df000115 	stw	fp,4(sp)
81107cf8:	df000104 	addi	fp,sp,4
81107cfc:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw a\" Task (Prio:%d) \n", SPW_A_TASK_PRIORITY);
81107d00:	01400504 	movi	r5,20
81107d04:	012044f4 	movhi	r4,33043
81107d08:	2118a404 	addi	r4,r4,25232
81107d0c:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('A');
81107d10:	01001044 	movi	r4,65
81107d14:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('A');
81107d18:	01001044 	movi	r4,65
81107d1c:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107d20:	01c00284 	movi	r7,10
81107d24:	000d883a 	mov	r6,zero
81107d28:	000b883a 	mov	r5,zero
81107d2c:	0009883a 	mov	r4,zero
81107d30:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107d34:	003ff806 	br	81107d18 <__reset+0xfb0e7d18>

81107d38 <SPWBTask>:
}

/* SPW B Task, configure and monitor the SpW B channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWBTask(void *task_data) {
81107d38:	defffd04 	addi	sp,sp,-12
81107d3c:	dfc00215 	stw	ra,8(sp)
81107d40:	df000115 	stw	fp,4(sp)
81107d44:	df000104 	addi	fp,sp,4
81107d48:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw b\" Task (Prio:%d) \n", SPW_B_TASK_PRIORITY);
81107d4c:	01400544 	movi	r5,21
81107d50:	012044f4 	movhi	r4,33043
81107d54:	2118ad04 	addi	r4,r4,25268
81107d58:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('B');
81107d5c:	01001084 	movi	r4,66
81107d60:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('B');
81107d64:	01001084 	movi	r4,66
81107d68:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107d6c:	01c00284 	movi	r7,10
81107d70:	000d883a 	mov	r6,zero
81107d74:	000b883a 	mov	r5,zero
81107d78:	0009883a 	mov	r4,zero
81107d7c:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107d80:	003ff806 	br	81107d64 <__reset+0xfb0e7d64>

81107d84 <SPWCTask>:
}

/* SPW C Task, configure and monitor the SpW C channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWCTask(void *task_data) {
81107d84:	defffd04 	addi	sp,sp,-12
81107d88:	dfc00215 	stw	ra,8(sp)
81107d8c:	df000115 	stw	fp,4(sp)
81107d90:	df000104 	addi	fp,sp,4
81107d94:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw c\" Task (Prio:%d) \n", SPW_C_TASK_PRIORITY);
81107d98:	01400584 	movi	r5,22
81107d9c:	012044f4 	movhi	r4,33043
81107da0:	2118b604 	addi	r4,r4,25304
81107da4:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('C');
81107da8:	010010c4 	movi	r4,67
81107dac:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('C');
81107db0:	010010c4 	movi	r4,67
81107db4:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107db8:	01c00284 	movi	r7,10
81107dbc:	000d883a 	mov	r6,zero
81107dc0:	000b883a 	mov	r5,zero
81107dc4:	0009883a 	mov	r4,zero
81107dc8:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107dcc:	003ff806 	br	81107db0 <__reset+0xfb0e7db0>

81107dd0 <SPWDTask>:
}

/* SPW D Task, configure and monitor the SpW D channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWDTask(void *task_data) {
81107dd0:	defffd04 	addi	sp,sp,-12
81107dd4:	dfc00215 	stw	ra,8(sp)
81107dd8:	df000115 	stw	fp,4(sp)
81107ddc:	df000104 	addi	fp,sp,4
81107de0:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw d\" Task (Prio:%d) \n", SPW_D_TASK_PRIORITY);
81107de4:	014005c4 	movi	r5,23
81107de8:	012044f4 	movhi	r4,33043
81107dec:	2118bf04 	addi	r4,r4,25340
81107df0:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('D');
81107df4:	01001104 	movi	r4,68
81107df8:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('D');
81107dfc:	01001104 	movi	r4,68
81107e00:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107e04:	01c00284 	movi	r7,10
81107e08:	000d883a 	mov	r6,zero
81107e0c:	000b883a 	mov	r5,zero
81107e10:	0009883a 	mov	r4,zero
81107e14:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107e18:	003ff806 	br	81107dfc <__reset+0xfb0e7dfc>

81107e1c <SPWETask>:
}

/* SPW E Task, configure and monitor the SpW E channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWETask(void *task_data) {
81107e1c:	defffd04 	addi	sp,sp,-12
81107e20:	dfc00215 	stw	ra,8(sp)
81107e24:	df000115 	stw	fp,4(sp)
81107e28:	df000104 	addi	fp,sp,4
81107e2c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw e\" Task (Prio:%d) \n", SPW_E_TASK_PRIORITY);
81107e30:	01400604 	movi	r5,24
81107e34:	012044f4 	movhi	r4,33043
81107e38:	2118c804 	addi	r4,r4,25376
81107e3c:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('E');
81107e40:	01001144 	movi	r4,69
81107e44:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('E');
81107e48:	01001144 	movi	r4,69
81107e4c:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107e50:	01c00284 	movi	r7,10
81107e54:	000d883a 	mov	r6,zero
81107e58:	000b883a 	mov	r5,zero
81107e5c:	0009883a 	mov	r4,zero
81107e60:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107e64:	003ff806 	br	81107e48 <__reset+0xfb0e7e48>

81107e68 <SPWFTask>:
}

/* SPW F Task, configure and monitor the SpW F channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWFTask(void *task_data) {
81107e68:	defffd04 	addi	sp,sp,-12
81107e6c:	dfc00215 	stw	ra,8(sp)
81107e70:	df000115 	stw	fp,4(sp)
81107e74:	df000104 	addi	fp,sp,4
81107e78:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw f\" Task (Prio:%d) \n", SPW_F_TASK_PRIORITY);
81107e7c:	01400644 	movi	r5,25
81107e80:	012044f4 	movhi	r4,33043
81107e84:	2118d104 	addi	r4,r4,25412
81107e88:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('F');
81107e8c:	01001184 	movi	r4,70
81107e90:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('F');
81107e94:	01001184 	movi	r4,70
81107e98:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107e9c:	01c00284 	movi	r7,10
81107ea0:	000d883a 	mov	r6,zero
81107ea4:	000b883a 	mov	r5,zero
81107ea8:	0009883a 	mov	r4,zero
81107eac:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107eb0:	003ff806 	br	81107e94 <__reset+0xfb0e7e94>

81107eb4 <SPWGTask>:
}

/* SPW G Task, configure and monitor the SpW G channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWGTask(void *task_data) {
81107eb4:	defffd04 	addi	sp,sp,-12
81107eb8:	dfc00215 	stw	ra,8(sp)
81107ebc:	df000115 	stw	fp,4(sp)
81107ec0:	df000104 	addi	fp,sp,4
81107ec4:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw g\" Task (Prio:%d) \n", SPW_G_TASK_PRIORITY);
81107ec8:	01400684 	movi	r5,26
81107ecc:	012044f4 	movhi	r4,33043
81107ed0:	2118da04 	addi	r4,r4,25448
81107ed4:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('G');
81107ed8:	010011c4 	movi	r4,71
81107edc:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('G');
81107ee0:	010011c4 	movi	r4,71
81107ee4:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107ee8:	01c00284 	movi	r7,10
81107eec:	000d883a 	mov	r6,zero
81107ef0:	000b883a 	mov	r5,zero
81107ef4:	0009883a 	mov	r4,zero
81107ef8:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107efc:	003ff806 	br	81107ee0 <__reset+0xfb0e7ee0>

81107f00 <SPWHTask>:
}

/* SPW H Task, configure and monitor the SpW H channel for incoming connections to set the status leds, update rate of 10 ms */
void SPWHTask(void *task_data) {
81107f00:	defffd04 	addi	sp,sp,-12
81107f04:	dfc00215 	stw	ra,8(sp)
81107f08:	df000115 	stw	fp,4(sp)
81107f0c:	df000104 	addi	fp,sp,4
81107f10:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"spw h\" Task (Prio:%d) \n", SPW_H_TASK_PRIORITY);
81107f14:	014006c4 	movi	r5,27
81107f18:	012044f4 	movhi	r4,33043
81107f1c:	2118e304 	addi	r4,r4,25484
81107f20:	110d7800 	call	8110d780 <printf>

	Configure_SpW_Autostart('H');
81107f24:	01001204 	movi	r4,72
81107f28:	11082740 	call	81108274 <Configure_SpW_Autostart>
	while (1) {
		Set_SpW_Led('H');
81107f2c:	01001204 	movi	r4,72
81107f30:	110833c0 	call	8110833c <Set_SpW_Led>
		OSTimeDlyHMSM(0, 0, 0, 10);
81107f34:	01c00284 	movi	r7,10
81107f38:	000d883a 	mov	r6,zero
81107f3c:	000b883a 	mov	r5,zero
81107f40:	0009883a 	mov	r4,zero
81107f44:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107f48:	003ff806 	br	81107f2c <__reset+0xfb0e7f2c>

81107f4c <LogTask>:
}

/* Log Task, show the FPGA core temperature in the seven segments display, update rate of 1 s */
void LogTask(void *task_data) {
81107f4c:	defffd04 	addi	sp,sp,-12
81107f50:	dfc00215 	stw	ra,8(sp)
81107f54:	df000115 	stw	fp,4(sp)
81107f58:	df000104 	addi	fp,sp,4
81107f5c:	e13fff15 	stw	r4,-4(fp)
	printf("Created \"log\" Task (Prio:%d) \n", LOG_TASK_PRIORITY);
81107f60:	01400704 	movi	r5,28
81107f64:	012044f4 	movhi	r4,33043
81107f68:	2118ec04 	addi	r4,r4,25520
81107f6c:	110d7800 	call	8110d780 <printf>
	while (1) {
		TEMP_Read(&tempFPGA, &tempBoard);
81107f70:	d1605484 	addi	r5,gp,-32430
81107f74:	d1205444 	addi	r4,gp,-32431
81107f78:	11020ac0 	call	811020ac <TEMP_Read>
		bSSDisplayUpdate(tempFPGA);
81107f7c:	d0a05443 	ldbu	r2,-32431(gp)
81107f80:	10803fcc 	andi	r2,r2,255
81107f84:	1009883a 	mov	r4,r2
81107f88:	11063d80 	call	811063d8 <bSSDisplayUpdate>
		OSTimeDlyHMSM(0, 0, 1, 0);
81107f8c:	000f883a 	mov	r7,zero
81107f90:	01800044 	movi	r6,1
81107f94:	000b883a 	mov	r5,zero
81107f98:	0009883a 	mov	r4,zero
81107f9c:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
	}
81107fa0:	003ff306 	br	81107f70 <__reset+0xfb0e7f70>

81107fa4 <Init_Simucam_Tasks>:
}

/* Initialize the SimuCam Tasks */
void Init_Simucam_Tasks(void) {
81107fa4:	defff904 	addi	sp,sp,-28
81107fa8:	dfc00615 	stw	ra,24(sp)
81107fac:	df000515 	stw	fp,20(sp)
81107fb0:	df000504 	addi	fp,sp,20

	error_code = OSTaskCreateExt(MemDMATask,
81107fb4:	d8000415 	stw	zero,16(sp)
81107fb8:	d8000315 	stw	zero,12(sp)
81107fbc:	00820004 	movi	r2,2048
81107fc0:	d8800215 	stw	r2,8(sp)
81107fc4:	00a04574 	movhi	r2,33045
81107fc8:	10a81e04 	addi	r2,r2,-24456
81107fcc:	d8800115 	stw	r2,4(sp)
81107fd0:	008003c4 	movi	r2,15
81107fd4:	d8800015 	stw	r2,0(sp)
81107fd8:	01c003c4 	movi	r7,15
81107fdc:	01a04574 	movhi	r6,33045
81107fe0:	31b01e04 	addi	r6,r6,-16264
81107fe4:	000b883a 	mov	r5,zero
81107fe8:	01204434 	movhi	r4,33040
81107fec:	211f2c04 	addi	r4,r4,31920
81107ff0:	1129d100 	call	81129d10 <OSTaskCreateExt>
81107ff4:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWATask,
81107ff8:	d8000415 	stw	zero,16(sp)
81107ffc:	d8000315 	stw	zero,12(sp)
81108000:	00820004 	movi	r2,2048
81108004:	d8800215 	stw	r2,8(sp)
81108008:	00a04534 	movhi	r2,33044
8110800c:	10881e04 	addi	r2,r2,8312
81108010:	d8800115 	stw	r2,4(sp)
81108014:	00800504 	movi	r2,20
81108018:	d8800015 	stw	r2,0(sp)
8110801c:	01c00504 	movi	r7,20
81108020:	01a04534 	movhi	r6,33044
81108024:	31901e04 	addi	r6,r6,16504
81108028:	000b883a 	mov	r5,zero
8110802c:	01204434 	movhi	r4,33040
81108030:	211f3b04 	addi	r4,r4,31980
81108034:	1129d100 	call	81129d10 <OSTaskCreateExt>
81108038:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWBTask,
8110803c:	d8000415 	stw	zero,16(sp)
81108040:	d8000315 	stw	zero,12(sp)
81108044:	00820004 	movi	r2,2048
81108048:	d8800215 	stw	r2,8(sp)
8110804c:	00a04534 	movhi	r2,33044
81108050:	10981e04 	addi	r2,r2,24696
81108054:	d8800115 	stw	r2,4(sp)
81108058:	00800544 	movi	r2,21
8110805c:	d8800015 	stw	r2,0(sp)
81108060:	01c00544 	movi	r7,21
81108064:	01a04574 	movhi	r6,33045
81108068:	31a01e04 	addi	r6,r6,-32648
8110806c:	000b883a 	mov	r5,zero
81108070:	01204434 	movhi	r4,33040
81108074:	211f4e04 	addi	r4,r4,32056
81108078:	1129d100 	call	81129d10 <OSTaskCreateExt>
8110807c:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWCTask,
81108080:	d8000415 	stw	zero,16(sp)
81108084:	d8000315 	stw	zero,12(sp)
81108088:	00820004 	movi	r2,2048
8110808c:	d8800215 	stw	r2,8(sp)
81108090:	00a04574 	movhi	r2,33045
81108094:	10b01e04 	addi	r2,r2,-16264
81108098:	d8800115 	stw	r2,4(sp)
8110809c:	00800584 	movi	r2,22
811080a0:	d8800015 	stw	r2,0(sp)
811080a4:	01c00584 	movi	r7,22
811080a8:	01a04574 	movhi	r6,33045
811080ac:	31b81e04 	addi	r6,r6,-8072
811080b0:	000b883a 	mov	r5,zero
811080b4:	01204434 	movhi	r4,33040
811080b8:	211f6104 	addi	r4,r4,32132
811080bc:	1129d100 	call	81129d10 <OSTaskCreateExt>
811080c0:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWDTask,
811080c4:	d8000415 	stw	zero,16(sp)
811080c8:	d8000315 	stw	zero,12(sp)
811080cc:	00820004 	movi	r2,2048
811080d0:	d8800215 	stw	r2,8(sp)
811080d4:	00a04534 	movhi	r2,33044
811080d8:	10801e04 	addi	r2,r2,120
811080dc:	d8800115 	stw	r2,4(sp)
811080e0:	008005c4 	movi	r2,23
811080e4:	d8800015 	stw	r2,0(sp)
811080e8:	01c005c4 	movi	r7,23
811080ec:	01a04534 	movhi	r6,33044
811080f0:	31881e04 	addi	r6,r6,8312
811080f4:	000b883a 	mov	r5,zero
811080f8:	01204434 	movhi	r4,33040
811080fc:	211f7404 	addi	r4,r4,32208
81108100:	1129d100 	call	81129d10 <OSTaskCreateExt>
81108104:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWETask,
81108108:	d8000415 	stw	zero,16(sp)
8110810c:	d8000315 	stw	zero,12(sp)
81108110:	00820004 	movi	r2,2048
81108114:	d8800215 	stw	r2,8(sp)
81108118:	00a04534 	movhi	r2,33044
8110811c:	10b81e04 	addi	r2,r2,-8072
81108120:	d8800115 	stw	r2,4(sp)
81108124:	00800604 	movi	r2,24
81108128:	d8800015 	stw	r2,0(sp)
8110812c:	01c00604 	movi	r7,24
81108130:	01a04534 	movhi	r6,33044
81108134:	31801e04 	addi	r6,r6,120
81108138:	000b883a 	mov	r5,zero
8110813c:	01204434 	movhi	r4,33040
81108140:	211f8704 	addi	r4,r4,32284
81108144:	1129d100 	call	81129d10 <OSTaskCreateExt>
81108148:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWFTask,
8110814c:	d8000415 	stw	zero,16(sp)
81108150:	d8000315 	stw	zero,12(sp)
81108154:	00820004 	movi	r2,2048
81108158:	d8800215 	stw	r2,8(sp)
8110815c:	00a04534 	movhi	r2,33044
81108160:	10b01e04 	addi	r2,r2,-16264
81108164:	d8800115 	stw	r2,4(sp)
81108168:	00800644 	movi	r2,25
8110816c:	d8800015 	stw	r2,0(sp)
81108170:	01c00644 	movi	r7,25
81108174:	01a04534 	movhi	r6,33044
81108178:	31b81e04 	addi	r6,r6,-8072
8110817c:	000b883a 	mov	r5,zero
81108180:	01204434 	movhi	r4,33040
81108184:	211f9a04 	addi	r4,r4,32360
81108188:	1129d100 	call	81129d10 <OSTaskCreateExt>
8110818c:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWGTask,
81108190:	d8000415 	stw	zero,16(sp)
81108194:	d8000315 	stw	zero,12(sp)
81108198:	00820004 	movi	r2,2048
8110819c:	d8800215 	stw	r2,8(sp)
811081a0:	00a04574 	movhi	r2,33045
811081a4:	10a01e04 	addi	r2,r2,-32648
811081a8:	d8800115 	stw	r2,4(sp)
811081ac:	00800684 	movi	r2,26
811081b0:	d8800015 	stw	r2,0(sp)
811081b4:	01c00684 	movi	r7,26
811081b8:	01a04574 	movhi	r6,33045
811081bc:	31a81e04 	addi	r6,r6,-24456
811081c0:	000b883a 	mov	r5,zero
811081c4:	01204434 	movhi	r4,33040
811081c8:	211fad04 	addi	r4,r4,32436
811081cc:	1129d100 	call	81129d10 <OSTaskCreateExt>
811081d0:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


	error_code = OSTaskCreateExt(SPWHTask,
811081d4:	d8000415 	stw	zero,16(sp)
811081d8:	d8000315 	stw	zero,12(sp)
811081dc:	00820004 	movi	r2,2048
811081e0:	d8800215 	stw	r2,8(sp)
811081e4:	00a04534 	movhi	r2,33044
811081e8:	10a81e04 	addi	r2,r2,-24456
811081ec:	d8800115 	stw	r2,4(sp)
811081f0:	008006c4 	movi	r2,27
811081f4:	d8800015 	stw	r2,0(sp)
811081f8:	01c006c4 	movi	r7,27
811081fc:	01a04534 	movhi	r6,33044
81108200:	31b01e04 	addi	r6,r6,-16264
81108204:	000b883a 	mov	r5,zero
81108208:	01204434 	movhi	r4,33040
8110820c:	211fc004 	addi	r4,r4,32512
81108210:	1129d100 	call	81129d10 <OSTaskCreateExt>
81108214:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);
	

	error_code = OSTaskCreateExt(LogTask,
81108218:	d8000415 	stw	zero,16(sp)
8110821c:	d8000315 	stw	zero,12(sp)
81108220:	00820004 	movi	r2,2048
81108224:	d8800215 	stw	r2,8(sp)
81108228:	00a04534 	movhi	r2,33044
8110822c:	10901e04 	addi	r2,r2,16504
81108230:	d8800115 	stw	r2,4(sp)
81108234:	00800704 	movi	r2,28
81108238:	d8800015 	stw	r2,0(sp)
8110823c:	01c00704 	movi	r7,28
81108240:	01a04534 	movhi	r6,33044
81108244:	31981e04 	addi	r6,r6,24696
81108248:	000b883a 	mov	r5,zero
8110824c:	01204434 	movhi	r4,33040
81108250:	211fd304 	addi	r4,r4,32588
81108254:	1129d100 	call	81129d10 <OSTaskCreateExt>
81108258:	d0a05405 	stb	r2,-32432(gp)
	                             SIMUCAM_TASK_STACKSIZE,
	                             NULL,
	                             0);


}
8110825c:	0001883a 	nop
81108260:	e037883a 	mov	sp,fp
81108264:	dfc00117 	ldw	ra,4(sp)
81108268:	df000017 	ldw	fp,0(sp)
8110826c:	dec00204 	addi	sp,sp,8
81108270:	f800283a 	ret

81108274 <Configure_SpW_Autostart>:

void Configure_SpW_Autostart(char c_SpwID) {
81108274:	defffd04 	addi	sp,sp,-12
81108278:	dfc00215 	stw	ra,8(sp)
8110827c:	df000115 	stw	fp,4(sp)
81108280:	df000104 	addi	fp,sp,4
81108284:	2005883a 	mov	r2,r4
81108288:	e0bfff05 	stb	r2,-4(fp)
	// Configura COMM
	// Reseta TX e RX Fifo
	v_Transparent_Interface_RX_FIFO_Reset(c_SpwID);
8110828c:	e0bfff07 	ldb	r2,-4(fp)
81108290:	1009883a 	mov	r4,r2
81108294:	11046b40 	call	811046b4 <v_Transparent_Interface_RX_FIFO_Reset>
	v_Transparent_Interface_TX_FIFO_Reset(c_SpwID);
81108298:	e0bfff07 	ldb	r2,-4(fp)
8110829c:	1009883a 	mov	r4,r2
811082a0:	11048480 	call	81104848 <v_Transparent_Interface_TX_FIFO_Reset>
	// Habilita a Interface Transparente
	v_Transparent_Interface_Enable_Control(c_SpwID, TRAN_REG_SET,
811082a4:	e0bfff07 	ldb	r2,-4(fp)
811082a8:	0181c004 	movi	r6,1792
811082ac:	01400044 	movi	r5,1
811082b0:	1009883a 	mov	r4,r2
811082b4:	11041000 	call	81104100 <v_Transparent_Interface_Enable_Control>
			TRAN_INTERFACE_ENABLE_CONTROL_BIT_MASK
					| TRAN_INTERFACE_TX_ENABLE_CONTROL_BIT_MASK | TRAN_INTERFACE_RX_ENABLE_CONTROL_BIT_MASK);
	// Reseta Codec
	v_SpaceWire_Interface_Force_Reset(c_SpwID);
811082b8:	e0bfff07 	ldb	r2,-4(fp)
811082bc:	1009883a 	mov	r4,r2
811082c0:	11030b80 	call	811030b8 <v_SpaceWire_Interface_Force_Reset>
	// Habilita a Interface SpaceWire
	b_SpaceWire_Interface_Enable_Control(c_SpwID, SPWC_REG_SET,
811082c4:	e0bfff07 	ldb	r2,-4(fp)
811082c8:	0181c004 	movi	r6,1792
811082cc:	01400044 	movi	r5,1
811082d0:	1009883a 	mov	r4,r2
811082d4:	1102b9c0 	call	81102b9c <b_SpaceWire_Interface_Enable_Control>
	SPWC_CODEC_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_TX_ENABLE_CONTROL_BIT_MASK | SPWC_CODEC_RX_ENABLE_CONTROL_BIT_MASK);
	// Coloca Codec no modo Normal
//	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_NORMAL_MODE);
	b_SpaceWire_Interface_Mode_Control(c_SpwID, SPWC_INTERFACE_BACKDOOR_MODE);
811082d8:	e0bfff07 	ldb	r2,-4(fp)
811082dc:	000b883a 	mov	r5,zero
811082e0:	1009883a 	mov	r4,r2
811082e4:	1102d900 	call	81102d90 <b_SpaceWire_Interface_Mode_Control>
	// Coloca Codec no link Autostart
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_CLEAR,
811082e8:	e0bfff07 	ldb	r2,-4(fp)
811082ec:	01806004 	movi	r6,384
811082f0:	000b883a 	mov	r5,zero
811082f4:	1009883a 	mov	r4,r2
811082f8:	11035780 	call	81103578 <v_SpaceWire_Interface_Link_Control>
	SPWC_LINK_DISCONNECT_CONTROL_BIT_MASK | SPWC_LINK_START_CONTROL_BIT_MASK);
	v_SpaceWire_Interface_Link_Control(c_SpwID, SPWC_REG_SET,
811082fc:	e0bfff07 	ldb	r2,-4(fp)
81108300:	01808004 	movi	r6,512
81108304:	01400044 	movi	r5,1
81108308:	1009883a 	mov	r4,r2
8110830c:	11035780 	call	81103578 <v_SpaceWire_Interface_Link_Control>
	SPWC_AUTOSTART_CONTROL_BIT_MASK);
	printf("SpaceWire %c configurado\n", c_SpwID);
81108310:	e0bfff07 	ldb	r2,-4(fp)
81108314:	100b883a 	mov	r5,r2
81108318:	012044f4 	movhi	r4,33043
8110831c:	2118f404 	addi	r4,r4,25552
81108320:	110d7800 	call	8110d780 <printf>
}
81108324:	0001883a 	nop
81108328:	e037883a 	mov	sp,fp
8110832c:	dfc00117 	ldw	ra,4(sp)
81108330:	df000017 	ldw	fp,0(sp)
81108334:	dec00204 	addi	sp,sp,8
81108338:	f800283a 	ret

8110833c <Set_SpW_Led>:

void Set_SpW_Led(char c_SpwID) {
8110833c:	defffa04 	addi	sp,sp,-24
81108340:	dfc00515 	stw	ra,20(sp)
81108344:	df000415 	stw	fp,16(sp)
81108348:	df000404 	addi	fp,sp,16
8110834c:	2005883a 	mov	r2,r4
81108350:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 ui_leds_mask_r = 0;
81108354:	e03ffc15 	stw	zero,-16(fp)
	alt_u32 ui_leds_mask_g = 0;
81108358:	e03ffd15 	stw	zero,-12(fp)
	switch (c_SpwID) {
8110835c:	e0bfff07 	ldb	r2,-4(fp)
81108360:	10bfefc4 	addi	r2,r2,-65
81108364:	10c00228 	cmpgeui	r3,r2,8
81108368:	1800361e 	bne	r3,zero,81108444 <Set_SpW_Led+0x108>
8110836c:	100690ba 	slli	r3,r2,2
81108370:	00a04474 	movhi	r2,33041
81108374:	10a0e104 	addi	r2,r2,-31868
81108378:	1885883a 	add	r2,r3,r2
8110837c:	10800017 	ldw	r2,0(r2)
81108380:	1000683a 	jmp	r2
81108384:	811083a4 	muli	r4,r16,16910
81108388:	811083b8 	rdprs	r4,r16,16910
8110838c:	811083cc 	andi	r4,r16,16911
81108390:	811083e0 	cmpeqi	r4,r16,16911
81108394:	811083f4 	orhi	r4,r16,16911
81108398:	81108408 	cmpgei	r4,r16,16912
8110839c:	8110841c 	xori	r4,r16,16912
811083a0:	81108430 	cmpltui	r4,r16,16912
	case 'A':
		ui_leds_mask_r = LEDS_1R_MASK;
811083a4:	00800084 	movi	r2,2
811083a8:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_1G_MASK;
811083ac:	00800044 	movi	r2,1
811083b0:	e0bffd15 	stw	r2,-12(fp)
		break;
811083b4:	00002306 	br	81108444 <Set_SpW_Led+0x108>
	case 'B':
		ui_leds_mask_r = LEDS_2R_MASK;
811083b8:	00800204 	movi	r2,8
811083bc:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_2G_MASK;
811083c0:	00800104 	movi	r2,4
811083c4:	e0bffd15 	stw	r2,-12(fp)
		break;
811083c8:	00001e06 	br	81108444 <Set_SpW_Led+0x108>
	case 'C':
		ui_leds_mask_r = LEDS_3R_MASK;
811083cc:	00800804 	movi	r2,32
811083d0:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_3G_MASK;
811083d4:	00800404 	movi	r2,16
811083d8:	e0bffd15 	stw	r2,-12(fp)
		break;
811083dc:	00001906 	br	81108444 <Set_SpW_Led+0x108>
	case 'D':
		ui_leds_mask_r = LEDS_4R_MASK;
811083e0:	00802004 	movi	r2,128
811083e4:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_4G_MASK;
811083e8:	00801004 	movi	r2,64
811083ec:	e0bffd15 	stw	r2,-12(fp)
		break;
811083f0:	00001406 	br	81108444 <Set_SpW_Led+0x108>
	case 'E':
		ui_leds_mask_r = LEDS_5R_MASK;
811083f4:	00808004 	movi	r2,512
811083f8:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_5G_MASK;
811083fc:	00804004 	movi	r2,256
81108400:	e0bffd15 	stw	r2,-12(fp)
		break;
81108404:	00000f06 	br	81108444 <Set_SpW_Led+0x108>
	case 'F':
		ui_leds_mask_r = LEDS_6R_MASK;
81108408:	00820004 	movi	r2,2048
8110840c:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_6G_MASK;
81108410:	00810004 	movi	r2,1024
81108414:	e0bffd15 	stw	r2,-12(fp)
		break;
81108418:	00000a06 	br	81108444 <Set_SpW_Led+0x108>
	case 'G':
		ui_leds_mask_r = LEDS_7R_MASK;
8110841c:	00880004 	movi	r2,8192
81108420:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_7G_MASK;
81108424:	00840004 	movi	r2,4096
81108428:	e0bffd15 	stw	r2,-12(fp)
		break;
8110842c:	00000506 	br	81108444 <Set_SpW_Led+0x108>
	case 'H':
		ui_leds_mask_r = LEDS_8R_MASK;
81108430:	00a00014 	movui	r2,32768
81108434:	e0bffc15 	stw	r2,-16(fp)
		ui_leds_mask_g = LEDS_8G_MASK;
81108438:	00900004 	movi	r2,16384
8110843c:	e0bffd15 	stw	r2,-12(fp)
		break;
81108440:	0001883a 	nop
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
81108444:	e0bfff07 	ldb	r2,-4(fp)
81108448:	1009883a 	mov	r4,r2
8110844c:	11037c40 	call	811037c4 <ul_SpaceWire_Interface_Link_Status_Read>
81108450:	e0bffe15 	stw	r2,-8(fp)
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
81108454:	e0bffe17 	ldw	r2,-8(fp)
81108458:	1080004c 	andi	r2,r2,1
8110845c:	10000726 	beq	r2,zero,8110847c <Set_SpW_Led+0x140>
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
81108460:	e17ffc17 	ldw	r5,-16(fp)
81108464:	0009883a 	mov	r4,zero
81108468:	11057840 	call	81105784 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
8110846c:	e17ffd17 	ldw	r5,-12(fp)
81108470:	01000044 	movi	r4,1
81108474:	11057840 	call	81105784 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
81108478:	00001006 	br	811084bc <Set_SpW_Led+0x180>
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
8110847c:	e0bffe17 	ldw	r2,-8(fp)
81108480:	10801e0c 	andi	r2,r2,120
	}
	alt_u32 SpW_Link_Status = ul_SpaceWire_Interface_Link_Status_Read(c_SpwID);
	if (SpW_Link_Status & SPWC_LINK_RUNNING_STATUS_BIT_MASK) {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_r);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g);
	} else if (SpW_Link_Status
81108484:	10000726 	beq	r2,zero,811084a4 <Set_SpW_Led+0x168>
			& (SPWC_LINK_DISCONNECT_ERROR_BIT_MASK
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
81108488:	e0fffd17 	ldw	r3,-12(fp)
8110848c:	e0bffc17 	ldw	r2,-16(fp)
81108490:	1884b03a 	or	r2,r3,r2
81108494:	100b883a 	mov	r5,r2
81108498:	01000044 	movi	r4,1
8110849c:	11057840 	call	81105784 <bSetPainelLeds>
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
	}
}
811084a0:	00000606 	br	811084bc <Set_SpW_Led+0x180>
					| SPWC_LINK_PARITY_ERROR_BIT_MASK
					| SPWC_LINK_ESCAPE_ERROR_BIT_MASK
					| SPWC_LINK_CREDIT_ERROR_BIT_MASK)) {
		bSetPainelLeds(LEDS_ON, ui_leds_mask_g | ui_leds_mask_r);
	} else {
		bSetPainelLeds(LEDS_OFF, ui_leds_mask_g);
811084a4:	e17ffd17 	ldw	r5,-12(fp)
811084a8:	0009883a 	mov	r4,zero
811084ac:	11057840 	call	81105784 <bSetPainelLeds>
		bSetPainelLeds(LEDS_ON, ui_leds_mask_r);
811084b0:	e17ffc17 	ldw	r5,-16(fp)
811084b4:	01000044 	movi	r4,1
811084b8:	11057840 	call	81105784 <bSetPainelLeds>
	}
}
811084bc:	0001883a 	nop
811084c0:	e037883a 	mov	sp,fp
811084c4:	dfc00117 	ldw	ra,4(sp)
811084c8:	df000017 	ldw	fp,0(sp)
811084cc:	dec00204 	addi	sp,sp,8
811084d0:	f800283a 	ret

811084d4 <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
811084d4:	defffb04 	addi	sp,sp,-20
811084d8:	dfc00415 	stw	ra,16(sp)
811084dc:	df000315 	stw	fp,12(sp)
811084e0:	df000304 	addi	fp,sp,12
811084e4:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    int desligarEm = 0;
811084e8:	e03ffe15 	stw	zero,-8(fp)

    eSenderMode = sConfiguringSender;
811084ec:	e03ffd15 	stw	zero,-12(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
811084f0:	d0a05917 	ldw	r2,-32412(gp)
811084f4:	100f883a 	mov	r7,r2
811084f8:	01800704 	movi	r6,28
811084fc:	01400044 	movi	r5,1
81108500:	012044f4 	movhi	r4,33043
81108504:	2118fb04 	addi	r4,r4,25580
81108508:	110ca840 	call	8110ca84 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110850c:	e0bffd17 	ldw	r2,-12(fp)
81108510:	10c00060 	cmpeqi	r3,r2,1
81108514:	1800091e 	bne	r3,zero,8110853c <vSenderComTask+0x68>
81108518:	0080052e 	bgeu	zero,r2,81108530 <vSenderComTask+0x5c>
8110851c:	10c000a0 	cmpeqi	r3,r2,2
81108520:	1800371e 	bne	r3,zero,81108600 <vSenderComTask+0x12c>
81108524:	10800160 	cmpeqi	r2,r2,5
81108528:	1000151e 	bne	r2,zero,81108580 <vSenderComTask+0xac>
8110852c:	00002c06 	br	811085e0 <vSenderComTask+0x10c>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
81108530:	00800044 	movi	r2,1
81108534:	e0bffd15 	stw	r2,-12(fp)
                break;
81108538:	00003206 	br	81108604 <vSenderComTask+0x130>
            case sStartingConnSender:

                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
8110853c:	d0a05717 	ldw	r2,-32420(gp)
81108540:	1009883a 	mov	r4,r2
81108544:	1128c140 	call	81128c14 <OSSemAccept>
81108548:	10bfffcc 	andi	r2,r2,65535
8110854c:	10000326 	beq	r2,zero,8110855c <vSenderComTask+0x88>
                    eSenderMode = sDummySender;
81108550:	00800144 	movi	r2,5
81108554:	e0bffd15 	stw	r2,-12(fp)
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }

                break;
81108558:	00002a06 	br	81108604 <vSenderComTask+0x130>
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
                    eSenderMode = sDummySender;
                } else {
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
8110855c:	012044f4 	movhi	r4,33043
81108560:	21190304 	addi	r4,r4,25612
81108564:	110d89c0 	call	8110d89c <puts>
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
81108568:	000f883a 	mov	r7,zero
8110856c:	01800144 	movi	r6,5
81108570:	000b883a 	mov	r5,zero
81108574:	0009883a 	mov	r4,zero
81108578:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
                }

                break;
8110857c:	00002106 	br	81108604 <vSenderComTask+0x130>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
81108580:	00800144 	movi	r2,5
81108584:	e0bffd15 	stw	r2,-12(fp)

                if (desligarEm <= 3) {
81108588:	e0bffe17 	ldw	r2,-8(fp)
8110858c:	10800108 	cmpgei	r2,r2,4
81108590:	1000031e 	bne	r2,zero,811085a0 <vSenderComTask+0xcc>
                    puts(TURNOFF_SEQUENCE);
81108594:	012044f4 	movhi	r4,33043
81108598:	21190504 	addi	r4,r4,25620
8110859c:	110d89c0 	call	8110d89c <puts>
                }
                desligarEm++;
811085a0:	e0bffe17 	ldw	r2,-8(fp)
811085a4:	10800044 	addi	r2,r2,1
811085a8:	e0bffe15 	stw	r2,-8(fp)
#ifdef DEBUG_ON
	debug(fp,"sDummySender\n");
811085ac:	d0a05917 	ldw	r2,-32412(gp)
811085b0:	100f883a 	mov	r7,r2
811085b4:	01800344 	movi	r6,13
811085b8:	01400044 	movi	r5,1
811085bc:	012044f4 	movhi	r4,33043
811085c0:	21190704 	addi	r4,r4,25628
811085c4:	110ca840 	call	8110ca84 <fwrite>
#endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
811085c8:	000f883a 	mov	r7,zero
811085cc:	01800284 	movi	r6,10
811085d0:	000b883a 	mov	r5,zero
811085d4:	0009883a 	mov	r4,zero
811085d8:	112aee40 	call	8112aee4 <OSTimeDlyHMSM>
                break;
811085dc:	00000906 	br	81108604 <vSenderComTask+0x130>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
811085e0:	d0a05917 	ldw	r2,-32412(gp)
811085e4:	100f883a 	mov	r7,r2
811085e8:	018003c4 	movi	r6,15
811085ec:	01400044 	movi	r5,1
811085f0:	012044f4 	movhi	r4,33043
811085f4:	21190b04 	addi	r4,r4,25644
811085f8:	110ca840 	call	8110ca84 <fwrite>
#endif
                break;
811085fc:	00000106 	br	81108604 <vSenderComTask+0x130>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
81108600:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
81108604:	003fc106 	br	8110850c <__reset+0xfb0e850c>

81108608 <bResourcesInitRTOS>:



/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
81108608:	defffc04 	addi	sp,sp,-16
8110860c:	dfc00315 	stw	ra,12(sp)
81108610:	df000215 	stw	fp,8(sp)
81108614:	df000204 	addi	fp,sp,8
	bool bSuccess = TRUE;
81108618:	00800044 	movi	r2,1
8110861c:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
81108620:	0009883a 	mov	r4,zero
81108624:	1128cc40 	call	81128cc4 <OSSemCreate>
81108628:	d0a05715 	stw	r2,-32420(gp)
	if (!xSemCommInit) {
8110862c:	d0a05717 	ldw	r2,-32420(gp)
81108630:	1000021e 	bne	r2,zero,8110863c <bResourcesInitRTOS+0x34>
		vFailCreateSemaphoreResources();
81108634:	1109edc0 	call	81109edc <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81108638:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110863c:	e0bfff04 	addi	r2,fp,-4
81108640:	100b883a 	mov	r5,r2
81108644:	010000c4 	movi	r4,3
81108648:	1126b9c0 	call	81126b9c <OSMutexCreate>
8110864c:	d0a06515 	stw	r2,-32364(gp)
	if ( err != OS_ERR_NONE ) {
81108650:	e0bfff03 	ldbu	r2,-4(fp)
81108654:	10803fcc 	andi	r2,r2,255
81108658:	10000526 	beq	r2,zero,81108670 <bResourcesInitRTOS+0x68>
		vFailCreateMutexSResources(err);
8110865c:	e0bfff03 	ldbu	r2,-4(fp)
81108660:	10803fcc 	andi	r2,r2,255
81108664:	1009883a 	mov	r4,r2
81108668:	1109e840 	call	81109e84 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110866c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
81108670:	e0bfff04 	addi	r2,fp,-4
81108674:	100b883a 	mov	r5,r2
81108678:	01000184 	movi	r4,6
8110867c:	1126b9c0 	call	81126b9c <OSMutexCreate>
81108680:	d0a06115 	stw	r2,-32380(gp)
	if ( err != OS_ERR_NONE ) {
81108684:	e0bfff03 	ldbu	r2,-4(fp)
81108688:	10803fcc 	andi	r2,r2,255
8110868c:	10000526 	beq	r2,zero,811086a4 <bResourcesInitRTOS+0x9c>
		vFailCreateMutexSResources(err);
81108690:	e0bfff03 	ldbu	r2,-4(fp)
81108694:	10803fcc 	andi	r2,r2,255
81108698:	1009883a 	mov	r4,r2
8110869c:	1109e840 	call	81109e84 <vFailCreateMutexSResources>
		bSuccess = FALSE;
811086a0:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
811086a4:	e0bfff04 	addi	r2,fp,-4
811086a8:	100b883a 	mov	r5,r2
811086ac:	010001c4 	movi	r4,7
811086b0:	1126b9c0 	call	81126b9c <OSMutexCreate>
811086b4:	d0a06315 	stw	r2,-32372(gp)
	if ( err != OS_ERR_NONE ) {
811086b8:	e0bfff03 	ldbu	r2,-4(fp)
811086bc:	10803fcc 	andi	r2,r2,255
811086c0:	10000526 	beq	r2,zero,811086d8 <bResourcesInitRTOS+0xd0>
		vFailCreateMutexSResources(err);
811086c4:	e0bfff03 	ldbu	r2,-4(fp)
811086c8:	10803fcc 	andi	r2,r2,255
811086cc:	1009883a 	mov	r4,r2
811086d0:	1109e840 	call	81109e84 <vFailCreateMutexSResources>
		bSuccess = FALSE;
811086d4:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
811086d8:	e0bfff04 	addi	r2,fp,-4
811086dc:	100b883a 	mov	r5,r2
811086e0:	01000204 	movi	r4,8
811086e4:	1126b9c0 	call	81126b9c <OSMutexCreate>
811086e8:	d0a06015 	stw	r2,-32384(gp)
	if ( err != OS_ERR_NONE ) {
811086ec:	e0bfff03 	ldbu	r2,-4(fp)
811086f0:	10803fcc 	andi	r2,r2,255
811086f4:	10000526 	beq	r2,zero,8110870c <bResourcesInitRTOS+0x104>
		vFailCreateMutexSResources(err);
811086f8:	e0bfff03 	ldbu	r2,-4(fp)
811086fc:	10803fcc 	andi	r2,r2,255
81108700:	1009883a 	mov	r4,r2
81108704:	1109e840 	call	81109e84 <vFailCreateMutexSResources>
		bSuccess = FALSE;
81108708:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
8110870c:	01000084 	movi	r4,2
81108710:	1128cc40 	call	81128cc4 <OSSemCreate>
81108714:	d0a05a15 	stw	r2,-32408(gp)
	if (!xSemCountBuffer128) {
81108718:	d0a05a17 	ldw	r2,-32408(gp)
8110871c:	1000021e 	bne	r2,zero,81108728 <bResourcesInitRTOS+0x120>
		vFailCreateSemaphoreResources();
81108720:	1109edc0 	call	81109edc <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81108724:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
81108728:	01000104 	movi	r4,4
8110872c:	1128cc40 	call	81128cc4 <OSSemCreate>
81108730:	d0a05615 	stw	r2,-32424(gp)
	if (!xSemCountBuffer64) {
81108734:	d0a05617 	ldw	r2,-32424(gp)
81108738:	1000021e 	bne	r2,zero,81108744 <bResourcesInitRTOS+0x13c>
		vFailCreateSemaphoreResources();
8110873c:	1109edc0 	call	81109edc <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81108740:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
81108744:	01000204 	movi	r4,8
81108748:	1128cc40 	call	81128cc4 <OSSemCreate>
8110874c:	d0a06215 	stw	r2,-32376(gp)
	if (!xSemCountBuffer32) {
81108750:	d0a06217 	ldw	r2,-32376(gp)
81108754:	1000021e 	bne	r2,zero,81108760 <bResourcesInitRTOS+0x158>
		vFailCreateSemaphoreResources();
81108758:	1109edc0 	call	81109edc <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110875c:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
81108760:	e0bfff04 	addi	r2,fp,-4
81108764:	100b883a 	mov	r5,r2
81108768:	01000144 	movi	r4,5
8110876c:	1126b9c0 	call	81126b9c <OSMutexCreate>
81108770:	d0a05c15 	stw	r2,-32400(gp)
	if ( err != OS_ERR_NONE ) {
81108774:	e0bfff03 	ldbu	r2,-4(fp)
81108778:	10803fcc 	andi	r2,r2,255
8110877c:	10000526 	beq	r2,zero,81108794 <bResourcesInitRTOS+0x18c>
		vFailCreateMutexSResources(err);
81108780:	e0bfff03 	ldbu	r2,-4(fp)
81108784:	10803fcc 	andi	r2,r2,255
81108788:	1009883a 	mov	r4,r2
8110878c:	1109e840 	call	81109e84 <vFailCreateMutexSResources>
		bSuccess = FALSE;
81108790:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
81108794:	e0bfff04 	addi	r2,fp,-4
81108798:	100b883a 	mov	r5,r2
8110879c:	01000244 	movi	r4,9
811087a0:	1126b9c0 	call	81126b9c <OSMutexCreate>
811087a4:	d0a05f15 	stw	r2,-32388(gp)
	if ( err != OS_ERR_NONE ) {
811087a8:	e0bfff03 	ldbu	r2,-4(fp)
811087ac:	10803fcc 	andi	r2,r2,255
811087b0:	10000526 	beq	r2,zero,811087c8 <bResourcesInitRTOS+0x1c0>
		vFailCreateMutexSResources(err);
811087b4:	e0bfff03 	ldbu	r2,-4(fp)
811087b8:	10803fcc 	andi	r2,r2,255
811087bc:	1009883a 	mov	r4,r2
811087c0:	1109e840 	call	81109e84 <vFailCreateMutexSResources>
		bSuccess = FALSE;
811087c4:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
811087c8:	0009883a 	mov	r4,zero
811087cc:	1128cc40 	call	81128cc4 <OSSemCreate>
811087d0:	d0a05d15 	stw	r2,-32396(gp)
	if (!xSemCountReceivedACK) {
811087d4:	d0a05d17 	ldw	r2,-32396(gp)
811087d8:	1000021e 	bne	r2,zero,811087e4 <bResourcesInitRTOS+0x1dc>
		vFailCreateSemaphoreResources();
811087dc:	1109edc0 	call	81109edc <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811087e0:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
811087e4:	0009883a 	mov	r4,zero
811087e8:	1128cc40 	call	81128cc4 <OSSemCreate>
811087ec:	d0a05b15 	stw	r2,-32404(gp)
	if (!xSemCountPreParsed) {
811087f0:	d0a05b17 	ldw	r2,-32404(gp)
811087f4:	1000021e 	bne	r2,zero,81108800 <bResourcesInitRTOS+0x1f8>
		vFailCreateSemaphoreResources();
811087f8:	1109edc0 	call	81109edc <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
811087fc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/

	xSemCountSenderACK = OSSemCreate(0);
81108800:	0009883a 	mov	r4,zero
81108804:	1128cc40 	call	81128cc4 <OSSemCreate>
81108808:	d0a05815 	stw	r2,-32416(gp)
	if (!xSemCountSenderACK) {
8110880c:	d0a05817 	ldw	r2,-32416(gp)
81108810:	1000021e 	bne	r2,zero,8110881c <bResourcesInitRTOS+0x214>
		vFailCreateSemaphoreResources();
81108814:	1109edc0 	call	81109edc <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
81108818:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110881c:	e0bfff04 	addi	r2,fp,-4
81108820:	100b883a 	mov	r5,r2
81108824:	01000104 	movi	r4,4
81108828:	1126b9c0 	call	81126b9c <OSMutexCreate>
8110882c:	d0a06415 	stw	r2,-32368(gp)
	if ( err != OS_ERR_NONE ) {
81108830:	e0bfff03 	ldbu	r2,-4(fp)
81108834:	10803fcc 	andi	r2,r2,255
81108838:	10000526 	beq	r2,zero,81108850 <bResourcesInitRTOS+0x248>
		vFailCreateMutexSResources(err);
8110883c:	e0bfff03 	ldbu	r2,-4(fp)
81108840:	10803fcc 	andi	r2,r2,255
81108844:	1009883a 	mov	r4,r2
81108848:	1109e840 	call	81109e84 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110884c:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
81108850:	e0bffe17 	ldw	r2,-8(fp)
}
81108854:	e037883a 	mov	sp,fp
81108858:	dfc00117 	ldw	ra,4(sp)
8110885c:	df000017 	ldw	fp,0(sp)
81108860:	dec00204 	addi	sp,sp,8
81108864:	f800283a 	ret

81108868 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
81108868:	deffff04 	addi	sp,sp,-4
8110886c:	df000015 	stw	fp,0(sp)
81108870:	d839883a 	mov	fp,sp
	usiIdCMD = 0;
81108874:	d0205e0d 	sth	zero,-32392(gp)
}
81108878:	0001883a 	nop
8110887c:	e037883a 	mov	sp,fp
81108880:	df000017 	ldw	fp,0(sp)
81108884:	dec00104 	addi	sp,sp,4
81108888:	f800283a 	ret

8110888c <main>:



/* Entry point */
int main(void)
{
8110888c:	defff704 	addi	sp,sp,-36
81108890:	dfc00815 	stw	ra,32(sp)
81108894:	df000715 	stw	fp,28(sp)
81108898:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110889c:	e03ffe15 	stw	zero,-8(fp)
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
811088a0:	0009883a 	mov	r4,zero
811088a4:	112b2700 	call	8112b270 <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
811088a8:	016044f4 	movhi	r5,33043
811088ac:	29590f04 	addi	r5,r5,25660
811088b0:	012044f4 	movhi	r4,33043
811088b4:	21191004 	addi	r4,r4,25664
811088b8:	110c4780 	call	8110c478 <fopen>
811088bc:	d0a05915 	stw	r2,-32412(gp)
	#endif	


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
811088c0:	110a9100 	call	8110a910 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
811088c4:	110aba40 	call	8110aba4 <bTestSimucamCriticalHW>
811088c8:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
811088cc:	e0bffe17 	ldw	r2,-8(fp)
811088d0:	1000031e 	bne	r2,zero,811088e0 <main+0x54>
		vFailTestCriticasParts();
811088d4:	1109f200 	call	81109f20 <vFailTestCriticasParts>
		return -1;
811088d8:	00bfffc4 	movi	r2,-1
811088dc:	00003a06 	br	811089c8 <main+0x13c>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
811088e0:	110aa100 	call	8110aa10 <bInitializeSDCard>
811088e4:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
811088e8:	e0bffe17 	ldw	r2,-8(fp)
811088ec:	1000031e 	bne	r2,zero,811088fc <main+0x70>
		vFailTestCriticasParts();
811088f0:	1109f200 	call	81109f20 <vFailTestCriticasParts>
		return -1;
811088f4:	00bfffc4 	movi	r2,-1
811088f8:	00003306 	br	811089c8 <main+0x13c>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
811088fc:	11090800 	call	81109080 <vLoadDefaultETHConf>
81108900:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
81108904:	e0bffe17 	ldw	r2,-8(fp)
81108908:	1000091e 	bne	r2,zero,81108930 <main+0xa4>
		/* Default configuration for eth connection loaded */
		debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110890c:	d0a05917 	ldw	r2,-32412(gp)
81108910:	100f883a 	mov	r7,r2
81108914:	01801644 	movi	r6,89
81108918:	01400044 	movi	r5,1
8110891c:	012044f4 	movhi	r4,33043
81108920:	21191504 	addi	r4,r4,25684
81108924:	110ca840 	call	8110ca84 <fwrite>
		return -1;
81108928:	00bfffc4 	movi	r2,-1
8110892c:	00002606 	br	811089c8 <main+0x13c>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
81108930:	1109a040 	call	81109a04 <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
81108934:	11086080 	call	81108608 <bResourcesInitRTOS>
81108938:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110893c:	e0bffe17 	ldw	r2,-8(fp)
81108940:	1000091e 	bne	r2,zero,81108968 <main+0xdc>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't alocate resources for RTOS. (exit) \n");
81108944:	d0a05917 	ldw	r2,-32412(gp)
81108948:	100f883a 	mov	r7,r2
8110894c:	01800a84 	movi	r6,42
81108950:	01400044 	movi	r5,1
81108954:	012044f4 	movhi	r4,33043
81108958:	21192c04 	addi	r4,r4,25776
8110895c:	110ca840 	call	8110ca84 <fwrite>
		return -1;
81108960:	00bfffc4 	movi	r2,-1
81108964:	00001806 	br	811089c8 <main+0x13c>
	}

	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
81108968:	00800104 	movi	r2,4
8110896c:	d8800415 	stw	r2,16(sp)
81108970:	d8000315 	stw	zero,12(sp)
81108974:	00820004 	movi	r2,2048
81108978:	d8800215 	stw	r2,8(sp)
8110897c:	00a04574 	movhi	r2,33045
81108980:	1098b004 	addi	r2,r2,25280
81108984:	d8800115 	stw	r2,4(sp)
81108988:	00800044 	movi	r2,1
8110898c:	d8800015 	stw	r2,0(sp)
81108990:	01c00044 	movi	r7,1
81108994:	01a045b4 	movhi	r6,33046
81108998:	31a0af04 	addi	r6,r6,-32068
8110899c:	000b883a 	mov	r5,zero
811089a0:	01204434 	movhi	r4,33040
811089a4:	211a4204 	addi	r4,r4,26888
811089a8:	1129d100 	call	81129d10 <OSTaskCreateExt>
811089ac:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
811089b0:	e0bfff03 	ldbu	r2,-4(fp)
811089b4:	1000021e 	bne	r2,zero,811089c0 <main+0x134>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
811089b8:	11235500 	call	81123550 <OSStart>
811089bc:	00000106 	br	811089c4 <main+0x138>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
811089c0:	110a2b40 	call	8110a2b4 <vFailInitialization>
	}
  
	return 0;
811089c4:	0005883a 	mov	r2,zero
}
811089c8:	e037883a 	mov	sp,fp
811089cc:	dfc00117 	ldw	ra,4(sp)
811089d0:	df000017 	ldw	fp,0(sp)
811089d4:	dec00204 	addi	sp,sp,8
811089d8:	f800283a 	ret

811089dc <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
811089dc:	deffd804 	addi	sp,sp,-160
811089e0:	dfc02715 	stw	ra,156(sp)
811089e4:	df002615 	stw	fp,152(sp)
811089e8:	df002604 	addi	fp,sp,152
811089ec:	e13ffe15 	stw	r4,-8(fp)
811089f0:	2805883a 	mov	r2,r5
811089f4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
811089f8:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
811089fc:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
81108a00:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
81108a04:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
81108a08:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, 128);
81108a0c:	e0fffe17 	ldw	r3,-8(fp)
81108a10:	e0bfdd44 	addi	r2,fp,-139
81108a14:	1809883a 	mov	r4,r3
81108a18:	00c02004 	movi	r3,128
81108a1c:	180d883a 	mov	r6,r3
81108a20:	200b883a 	mov	r5,r4
81108a24:	1009883a 	mov	r4,r2
81108a28:	110d4800 	call	8110d480 <memcpy>
	bSuccess = FALSE;
81108a2c:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
81108a30:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
81108a34:	e0bfda03 	ldbu	r2,-152(fp)
81108a38:	10800044 	addi	r2,r2,1
81108a3c:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
81108a40:	d0a05a17 	ldw	r2,-32408(gp)
81108a44:	e0ffdc84 	addi	r3,fp,-142
81108a48:	180d883a 	mov	r6,r3
81108a4c:	01401904 	movi	r5,100
81108a50:	1009883a 	mov	r4,r2
81108a54:	1128fdc0 	call	81128fdc <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
81108a58:	e0bfdc83 	ldbu	r2,-142(fp)
81108a5c:	10803fcc 	andi	r2,r2,255
81108a60:	1000b51e 	bne	r2,zero,81108d38 <bSendUART128+0x35c>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
81108a64:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
81108a68:	e0bfda83 	ldbu	r2,-150(fp)
81108a6c:	10800044 	addi	r2,r2,1
81108a70:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
81108a74:	d0a06517 	ldw	r2,-32364(gp)
81108a78:	e0ffdd04 	addi	r3,fp,-140
81108a7c:	180d883a 	mov	r6,r3
81108a80:	01400144 	movi	r5,5
81108a84:	1009883a 	mov	r4,r2
81108a88:	11270600 	call	81127060 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
81108a8c:	e0bfdd03 	ldbu	r2,-140(fp)
81108a90:	10803fcc 	andi	r2,r2,255
81108a94:	1000981e 	bne	r2,zero,81108cf8 <bSendUART128+0x31c>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
81108a98:	e0bfdd44 	addi	r2,fp,-139
81108a9c:	1009883a 	mov	r4,r2
81108aa0:	110d89c0 	call	8110d89c <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
81108aa4:	d0a06117 	ldw	r2,-32380(gp)
81108aa8:	e0ffdcc4 	addi	r3,fp,-141
81108aac:	180b883a 	mov	r5,r3
81108ab0:	1009883a 	mov	r4,r2
81108ab4:	11269f80 	call	811269f8 <OSMutexAccept>
81108ab8:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
81108abc:	e0bfdc03 	ldbu	r2,-144(fp)
81108ac0:	10003a26 	beq	r2,zero,81108bac <bSendUART128+0x1d0>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
81108ac4:	e03fdac5 	stb	zero,-149(fp)
81108ac8:	00003206 	br	81108b94 <bSendUART128+0x1b8>
						{
							if ( xBuffer128[i].usiId == 0 ) {
81108acc:	e0ffdac3 	ldbu	r3,-149(fp)
81108ad0:	00a045b4 	movhi	r2,33046
81108ad4:	10a0b004 	addi	r2,r2,-32064
81108ad8:	18c021a4 	muli	r3,r3,134
81108adc:	10c5883a 	add	r2,r2,r3
81108ae0:	10802004 	addi	r2,r2,128
81108ae4:	1080000b 	ldhu	r2,0(r2)
81108ae8:	10bfffcc 	andi	r2,r2,65535
81108aec:	1000261e 	bne	r2,zero,81108b88 <bSendUART128+0x1ac>
								/* Found a free place */
								bSuccess = TRUE;
81108af0:	00800044 	movi	r2,1
81108af4:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
81108af8:	e0bfdac3 	ldbu	r2,-149(fp)
81108afc:	10c021a4 	muli	r3,r2,134
81108b00:	00a045b4 	movhi	r2,33046
81108b04:	10a0b004 	addi	r2,r2,-32064
81108b08:	1885883a 	add	r2,r3,r2
81108b0c:	1009883a 	mov	r4,r2
81108b10:	e0bfdd44 	addi	r2,fp,-139
81108b14:	00c02004 	movi	r3,128
81108b18:	180d883a 	mov	r6,r3
81108b1c:	100b883a 	mov	r5,r2
81108b20:	110d4800 	call	8110d480 <memcpy>
								xBuffer128[i].usiId = siIdMessage;
81108b24:	e13fdac3 	ldbu	r4,-149(fp)
81108b28:	e0ffff0b 	ldhu	r3,-4(fp)
81108b2c:	00a045b4 	movhi	r2,33046
81108b30:	10a0b004 	addi	r2,r2,-32064
81108b34:	210021a4 	muli	r4,r4,134
81108b38:	1105883a 	add	r2,r2,r4
81108b3c:	10802004 	addi	r2,r2,128
81108b40:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
81108b44:	e0ffdac3 	ldbu	r3,-149(fp)
81108b48:	00a045b4 	movhi	r2,33046
81108b4c:	10a0b004 	addi	r2,r2,-32064
81108b50:	18c021a4 	muli	r3,r3,134
81108b54:	10c5883a 	add	r2,r2,r3
81108b58:	10802104 	addi	r2,r2,132
81108b5c:	00c000c4 	movi	r3,3
81108b60:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81108b64:	e0ffdac3 	ldbu	r3,-149(fp)
81108b68:	00a045b4 	movhi	r2,33046
81108b6c:	10a0b004 	addi	r2,r2,-32064
81108b70:	18c021a4 	muli	r3,r3,134
81108b74:	10c5883a 	add	r2,r2,r3
81108b78:	10802084 	addi	r2,r2,130
81108b7c:	00c000c4 	movi	r3,3
81108b80:	10c0000d 	sth	r3,0(r2)
								break;
81108b84:	00000606 	br	81108ba0 <bSendUART128+0x1c4>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
81108b88:	e0bfdac3 	ldbu	r2,-149(fp)
81108b8c:	10800044 	addi	r2,r2,1
81108b90:	e0bfdac5 	stb	r2,-149(fp)
81108b94:	e0bfdac3 	ldbu	r2,-149(fp)
81108b98:	108000b0 	cmpltui	r2,r2,2
81108b9c:	103fcb1e 	bne	r2,zero,81108acc <__reset+0xfb0e8acc>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108ba0:	d0a06117 	ldw	r2,-32380(gp)
81108ba4:	1009883a 	mov	r4,r2
81108ba8:	11275fc0 	call	811275fc <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
81108bac:	d0a06517 	ldw	r2,-32364(gp)
81108bb0:	1009883a 	mov	r4,r2
81108bb4:	11275fc0 	call	811275fc <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
81108bb8:	e0bfdb17 	ldw	r2,-148(fp)
81108bbc:	10800060 	cmpeqi	r2,r2,1
81108bc0:	10004d1e 	bne	r2,zero,81108cf8 <bSendUART128+0x31c>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
81108bc4:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
81108bc8:	e0bfda43 	ldbu	r2,-151(fp)
81108bcc:	10800044 	addi	r2,r2,1
81108bd0:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
81108bd4:	d0a06117 	ldw	r2,-32380(gp)
81108bd8:	e0ffdcc4 	addi	r3,fp,-141
81108bdc:	180d883a 	mov	r6,r3
81108be0:	01400144 	movi	r5,5
81108be4:	1009883a 	mov	r4,r2
81108be8:	11270600 	call	81127060 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
81108bec:	e0bfdcc3 	ldbu	r2,-141(fp)
81108bf0:	10803fcc 	andi	r2,r2,255
81108bf4:	10003a1e 	bne	r2,zero,81108ce0 <bSendUART128+0x304>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
81108bf8:	e03fdac5 	stb	zero,-149(fp)
81108bfc:	00003206 	br	81108cc8 <bSendUART128+0x2ec>
								{
									if ( xBuffer128[i].usiId == 0 ) {
81108c00:	e0ffdac3 	ldbu	r3,-149(fp)
81108c04:	00a045b4 	movhi	r2,33046
81108c08:	10a0b004 	addi	r2,r2,-32064
81108c0c:	18c021a4 	muli	r3,r3,134
81108c10:	10c5883a 	add	r2,r2,r3
81108c14:	10802004 	addi	r2,r2,128
81108c18:	1080000b 	ldhu	r2,0(r2)
81108c1c:	10bfffcc 	andi	r2,r2,65535
81108c20:	1000261e 	bne	r2,zero,81108cbc <bSendUART128+0x2e0>
										/* Found a free place */
										bSuccess = TRUE;
81108c24:	00800044 	movi	r2,1
81108c28:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
81108c2c:	e0bfdac3 	ldbu	r2,-149(fp)
81108c30:	10c021a4 	muli	r3,r2,134
81108c34:	00a045b4 	movhi	r2,33046
81108c38:	10a0b004 	addi	r2,r2,-32064
81108c3c:	1885883a 	add	r2,r3,r2
81108c40:	1009883a 	mov	r4,r2
81108c44:	e0bfdd44 	addi	r2,fp,-139
81108c48:	00c02004 	movi	r3,128
81108c4c:	180d883a 	mov	r6,r3
81108c50:	100b883a 	mov	r5,r2
81108c54:	110d4800 	call	8110d480 <memcpy>
										xBuffer128[i].usiId = siIdMessage;
81108c58:	e13fdac3 	ldbu	r4,-149(fp)
81108c5c:	e0ffff0b 	ldhu	r3,-4(fp)
81108c60:	00a045b4 	movhi	r2,33046
81108c64:	10a0b004 	addi	r2,r2,-32064
81108c68:	210021a4 	muli	r4,r4,134
81108c6c:	1105883a 	add	r2,r2,r4
81108c70:	10802004 	addi	r2,r2,128
81108c74:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
81108c78:	e0ffdac3 	ldbu	r3,-149(fp)
81108c7c:	00a045b4 	movhi	r2,33046
81108c80:	10a0b004 	addi	r2,r2,-32064
81108c84:	18c021a4 	muli	r3,r3,134
81108c88:	10c5883a 	add	r2,r2,r3
81108c8c:	10802104 	addi	r2,r2,132
81108c90:	00c000c4 	movi	r3,3
81108c94:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
81108c98:	e0ffdac3 	ldbu	r3,-149(fp)
81108c9c:	00a045b4 	movhi	r2,33046
81108ca0:	10a0b004 	addi	r2,r2,-32064
81108ca4:	18c021a4 	muli	r3,r3,134
81108ca8:	10c5883a 	add	r2,r2,r3
81108cac:	10802084 	addi	r2,r2,130
81108cb0:	00c000c4 	movi	r3,3
81108cb4:	10c0000d 	sth	r3,0(r2)
										break;
81108cb8:	00000606 	br	81108cd4 <bSendUART128+0x2f8>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
81108cbc:	e0bfdac3 	ldbu	r2,-149(fp)
81108cc0:	10800044 	addi	r2,r2,1
81108cc4:	e0bfdac5 	stb	r2,-149(fp)
81108cc8:	e0bfdac3 	ldbu	r2,-149(fp)
81108ccc:	108000b0 	cmpltui	r2,r2,2
81108cd0:	103fcb1e 	bne	r2,zero,81108c00 <__reset+0xfb0e8c00>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108cd4:	d0a06117 	ldw	r2,-32380(gp)
81108cd8:	1009883a 	mov	r4,r2
81108cdc:	11275fc0 	call	811275fc <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) || ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
81108ce0:	e0bfdcc3 	ldbu	r2,-141(fp)
81108ce4:	10803fcc 	andi	r2,r2,255
81108ce8:	103fb71e 	bne	r2,zero,81108bc8 <__reset+0xfb0e8bc8>
81108cec:	e0bfda43 	ldbu	r2,-151(fp)
81108cf0:	10800130 	cmpltui	r2,r2,4
81108cf4:	103fb41e 	bne	r2,zero,81108bc8 <__reset+0xfb0e8bc8>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) || ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
81108cf8:	e0bfdd03 	ldbu	r2,-140(fp)
81108cfc:	10803fcc 	andi	r2,r2,255
81108d00:	103f591e 	bne	r2,zero,81108a68 <__reset+0xfb0e8a68>
81108d04:	e0bfda83 	ldbu	r2,-150(fp)
81108d08:	10800130 	cmpltui	r2,r2,4
81108d0c:	103f561e 	bne	r2,zero,81108a68 <__reset+0xfb0e8a68>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
81108d10:	e0bfdb17 	ldw	r2,-148(fp)
81108d14:	10800060 	cmpeqi	r2,r2,1
81108d18:	1000071e 	bne	r2,zero,81108d38 <bSendUART128+0x35c>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
81108d1c:	d0a05a17 	ldw	r2,-32408(gp)
81108d20:	1009883a 	mov	r4,r2
81108d24:	11293540 	call	81129354 <OSSemPost>
81108d28:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
81108d2c:	e0bfdc43 	ldbu	r2,-143(fp)
81108d30:	10000126 	beq	r2,zero,81108d38 <bSendUART128+0x35c>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
81108d34:	110a4840 	call	8110a484 <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) || ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
81108d38:	e0bfdc83 	ldbu	r2,-142(fp)
81108d3c:	10803fcc 	andi	r2,r2,255
81108d40:	103f3c1e 	bne	r2,zero,81108a34 <__reset+0xfb0e8a34>
81108d44:	e0bfda03 	ldbu	r2,-152(fp)
81108d48:	108001b0 	cmpltui	r2,r2,6
81108d4c:	103f391e 	bne	r2,zero,81108a34 <__reset+0xfb0e8a34>

	return bSuccess;
81108d50:	e0bfdb17 	ldw	r2,-148(fp)
}
81108d54:	e037883a 	mov	sp,fp
81108d58:	dfc00117 	ldw	ra,4(sp)
81108d5c:	df000017 	ldw	fp,0(sp)
81108d60:	dec00204 	addi	sp,sp,8
81108d64:	f800283a 	ret

81108d68 <vSendEthConf>:



void vSendEthConf ( void ) {
81108d68:	deffc304 	addi	sp,sp,-244
81108d6c:	dfc03c15 	stw	ra,240(sp)
81108d70:	df003b15 	stw	fp,236(sp)
81108d74:	dd403a15 	stw	r21,232(sp)
81108d78:	dd003915 	stw	r20,228(sp)
81108d7c:	dcc03815 	stw	r19,224(sp)
81108d80:	dc803715 	stw	r18,220(sp)
81108d84:	dc403615 	stw	r17,216(sp)
81108d88:	dc003515 	stw	r16,212(sp)
81108d8c:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
81108d90:	e03fd98d 	sth	zero,-154(fp)
81108d94:	e03fda0d 	sth	zero,-152(fp)
81108d98:	e0bfda84 	addi	r2,fp,-150
81108d9c:	00c01f04 	movi	r3,124
81108da0:	180d883a 	mov	r6,r3
81108da4:	000b883a 	mov	r5,zero
81108da8:	1009883a 	mov	r4,r2
81108dac:	110d5c80 	call	8110d5c8 <memset>
    unsigned char crc = 0;
81108db0:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
81108db4:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
81108db8:	1108ff00 	call	81108ff0 <usiGetIdCMD>
81108dbc:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108dc0:	e57fd90b 	ldhu	r21,-156(fp)
81108dc4:	00a045b4 	movhi	r2,33046
81108dc8:	10a94704 	addi	r2,r2,-23268
81108dcc:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81108dd0:	00a045b4 	movhi	r2,33046
81108dd4:	10a94704 	addi	r2,r2,-23268
81108dd8:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108ddc:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81108de0:	00a045b4 	movhi	r2,33046
81108de4:	10a94704 	addi	r2,r2,-23268
81108de8:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108dec:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81108df0:	00a045b4 	movhi	r2,33046
81108df4:	10a94704 	addi	r2,r2,-23268
81108df8:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108dfc:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
81108e00:	00a045b4 	movhi	r2,33046
81108e04:	10a94704 	addi	r2,r2,-23268
81108e08:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e0c:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81108e10:	00a045b4 	movhi	r2,33046
81108e14:	10a94704 	addi	r2,r2,-23268
81108e18:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e1c:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81108e20:	00a045b4 	movhi	r2,33046
81108e24:	10a94704 	addi	r2,r2,-23268
81108e28:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e2c:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81108e30:	00a045b4 	movhi	r2,33046
81108e34:	10a94704 	addi	r2,r2,-23268
81108e38:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e3c:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
81108e40:	00a045b4 	movhi	r2,33046
81108e44:	10a94704 	addi	r2,r2,-23268
81108e48:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e4c:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81108e50:	00a045b4 	movhi	r2,33046
81108e54:	10a94704 	addi	r2,r2,-23268
81108e58:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e5c:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81108e60:	00a045b4 	movhi	r2,33046
81108e64:	10a94704 	addi	r2,r2,-23268
81108e68:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e6c:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81108e70:	00a045b4 	movhi	r2,33046
81108e74:	10a94704 	addi	r2,r2,-23268
81108e78:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e7c:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
81108e80:	00a045b4 	movhi	r2,33046
81108e84:	10a94704 	addi	r2,r2,-23268
81108e88:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e8c:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81108e90:	00a045b4 	movhi	r2,33046
81108e94:	10a94704 	addi	r2,r2,-23268
81108e98:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108e9c:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81108ea0:	00a045b4 	movhi	r2,33046
81108ea4:	10a94704 	addi	r2,r2,-23268
81108ea8:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108eac:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81108eb0:	00a045b4 	movhi	r2,33046
81108eb4:	10a94704 	addi	r2,r2,-23268
81108eb8:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108ebc:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
81108ec0:	00a045b4 	movhi	r2,33046
81108ec4:	10a94704 	addi	r2,r2,-23268
81108ec8:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108ecc:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
81108ed0:	00a045b4 	movhi	r2,33046
81108ed4:	10a94704 	addi	r2,r2,-23268
81108ed8:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
81108edc:	10bfffcc 	andi	r2,r2,65535
81108ee0:	e53fd984 	addi	r20,fp,-154
81108ee4:	d8801115 	stw	r2,68(sp)
81108ee8:	dcc01015 	stw	r19,64(sp)
81108eec:	dc800f15 	stw	r18,60(sp)
81108ef0:	dc400e15 	stw	r17,56(sp)
81108ef4:	dc000d15 	stw	r16,52(sp)
81108ef8:	dbc00c15 	stw	r15,48(sp)
81108efc:	db800b15 	stw	r14,44(sp)
81108f00:	db400a15 	stw	r13,40(sp)
81108f04:	db000915 	stw	r12,36(sp)
81108f08:	dac00815 	stw	r11,32(sp)
81108f0c:	da800715 	stw	r10,28(sp)
81108f10:	da400615 	stw	r9,24(sp)
81108f14:	da000515 	stw	r8,20(sp)
81108f18:	d9c00415 	stw	r7,16(sp)
81108f1c:	d9800315 	stw	r6,12(sp)
81108f20:	d9400215 	stw	r5,8(sp)
81108f24:	d9000115 	stw	r4,4(sp)
81108f28:	d8c00015 	stw	r3,0(sp)
81108f2c:	a80f883a 	mov	r7,r21
81108f30:	018010c4 	movi	r6,67
81108f34:	016044f4 	movhi	r5,33043
81108f38:	29593704 	addi	r5,r5,25820
81108f3c:	a009883a 	mov	r4,r20
81108f40:	110dbb80 	call	8110dbb8 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
81108f44:	e0bfd984 	addi	r2,fp,-154
81108f48:	1009883a 	mov	r4,r2
81108f4c:	110ddac0 	call	8110ddac <strlen>
81108f50:	1007883a 	mov	r3,r2
81108f54:	e0bfd984 	addi	r2,fp,-154
81108f58:	180b883a 	mov	r5,r3
81108f5c:	1009883a 	mov	r4,r2
81108f60:	1109dc80 	call	81109dc8 <ucCrc8wInit>
81108f64:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
81108f68:	e13fd703 	ldbu	r4,-164(fp)
81108f6c:	e0ffd984 	addi	r3,fp,-154
81108f70:	e0bfd984 	addi	r2,fp,-154
81108f74:	200f883a 	mov	r7,r4
81108f78:	180d883a 	mov	r6,r3
81108f7c:	016044f4 	movhi	r5,33043
81108f80:	29594f04 	addi	r5,r5,25916
81108f84:	1009883a 	mov	r4,r2
81108f88:	110dbb80 	call	8110dbb8 <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
81108f8c:	e0bfd90b 	ldhu	r2,-156(fp)
81108f90:	10ffffcc 	andi	r3,r2,65535
81108f94:	18e0001c 	xori	r3,r3,32768
81108f98:	18e00004 	addi	r3,r3,-32768
81108f9c:	e0bfd984 	addi	r2,fp,-154
81108fa0:	180b883a 	mov	r5,r3
81108fa4:	1009883a 	mov	r4,r2
81108fa8:	11089dc0 	call	811089dc <bSendUART128>
81108fac:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
81108fb0:	e0bfd817 	ldw	r2,-160(fp)
81108fb4:	10800060 	cmpeqi	r2,r2,1
81108fb8:	1000011e 	bne	r2,zero,81108fc0 <vSendEthConf+0x258>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
81108fbc:	110a6640 	call	8110a664 <vCouldNotSendEthConfUART>
	}
}
81108fc0:	0001883a 	nop
81108fc4:	e6fffa04 	addi	sp,fp,-24
81108fc8:	dfc00717 	ldw	ra,28(sp)
81108fcc:	df000617 	ldw	fp,24(sp)
81108fd0:	dd400517 	ldw	r21,20(sp)
81108fd4:	dd000417 	ldw	r20,16(sp)
81108fd8:	dcc00317 	ldw	r19,12(sp)
81108fdc:	dc800217 	ldw	r18,8(sp)
81108fe0:	dc400117 	ldw	r17,4(sp)
81108fe4:	dc000017 	ldw	r16,0(sp)
81108fe8:	dec00804 	addi	sp,sp,32
81108fec:	f800283a 	ret

81108ff0 <usiGetIdCMD>:


unsigned short int usiGetIdCMD ( void ) {
81108ff0:	deffff04 	addi	sp,sp,-4
81108ff4:	df000015 	stw	fp,0(sp)
81108ff8:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
81108ffc:	d0a05e0b 	ldhu	r2,-32392(gp)
81109000:	10ffffcc 	andi	r3,r2,65535
81109004:	00bfffd4 	movui	r2,65535
81109008:	1880031e 	bne	r3,r2,81109018 <usiGetIdCMD+0x28>
        usiIdCMD = 1;
8110900c:	00800044 	movi	r2,1
81109010:	d0a05e0d 	sth	r2,-32392(gp)
81109014:	00000306 	br	81109024 <usiGetIdCMD+0x34>
    else
        usiIdCMD++;
81109018:	d0a05e0b 	ldhu	r2,-32392(gp)
8110901c:	10800044 	addi	r2,r2,1
81109020:	d0a05e0d 	sth	r2,-32392(gp)
    return usiIdCMD;
81109024:	d0a05e0b 	ldhu	r2,-32392(gp)
}
81109028:	e037883a 	mov	sp,fp
8110902c:	df000017 	ldw	fp,0(sp)
81109030:	dec00104 	addi	sp,sp,4
81109034:	f800283a 	ret

81109038 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
81109038:	defffb04 	addi	sp,sp,-20
8110903c:	dfc00415 	stw	ra,16(sp)
81109040:	df000315 	stw	fp,12(sp)
81109044:	df000304 	addi	fp,sp,12
81109048:	e13ffe15 	stw	r4,-8(fp)
8110904c:	2805883a 	mov	r2,r5
81109050:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
81109054:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
81109058:	e0bfff03 	ldbu	r2,-4(fp)
8110905c:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
81109060:	e17ffd04 	addi	r5,fp,-12
81109064:	e13ffe17 	ldw	r4,-8(fp)
81109068:	110dd600 	call	8110dd60 <strcspn>
}
8110906c:	e037883a 	mov	sp,fp
81109070:	dfc00117 	ldw	ra,4(sp)
81109074:	df000017 	ldw	fp,0(sp)
81109078:	dec00204 	addi	sp,sp,8
8110907c:	f800283a 	ret

81109080 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
81109080:	defff504 	addi	sp,sp,-44
81109084:	dfc00a15 	stw	ra,40(sp)
81109088:	df000915 	stw	fp,36(sp)
8110908c:	dc000815 	stw	r16,32(sp)
81109090:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
81109094:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
81109098:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110909c:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
811090a0:	d0a06617 	ldw	r2,-32360(gp)
811090a4:	10800058 	cmpnei	r2,r2,1
811090a8:	1001f61e 	bne	r2,zero,81109884 <vLoadDefaultETHConf+0x804>
811090ac:	110a9c00 	call	8110a9c0 <bSDcardIsPresent>
811090b0:	1001f426 	beq	r2,zero,81109884 <vLoadDefaultETHConf+0x804>
811090b4:	110a9e80 	call	8110a9e8 <bSDcardFAT16Check>
811090b8:	1001f226 	beq	r2,zero,81109884 <vLoadDefaultETHConf+0x804>

		siFile = siOpenFile( ETH_FILE_NAME );
811090bc:	012044f4 	movhi	r4,33043
811090c0:	21195204 	addi	r4,r4,25928
811090c4:	110ab000 	call	8110ab00 <siOpenFile>
811090c8:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
811090cc:	e0bffc0f 	ldh	r2,-16(fp)
811090d0:	1001e816 	blt	r2,zero,81109874 <vLoadDefaultETHConf+0x7f4>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
811090d4:	e0bffd04 	addi	r2,fp,-12
811090d8:	01800204 	movi	r6,8
811090dc:	01400284 	movi	r5,10
811090e0:	1009883a 	mov	r4,r2
811090e4:	110d5c80 	call	8110d5c8 <memset>
			p_inteiro = inteiro;
811090e8:	e0bffd04 	addi	r2,fp,-12
811090ec:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
811090f0:	e0bffc0f 	ldh	r2,-16(fp)
811090f4:	1009883a 	mov	r4,r2
811090f8:	110ab6c0 	call	8110ab6c <cGetNextChar>
811090fc:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
81109100:	e0bff947 	ldb	r2,-27(fp)
81109104:	10800084 	addi	r2,r2,2
81109108:	10c015a8 	cmpgeui	r3,r2,86
8110910c:	1801cf1e 	bne	r3,zero,8110984c <vLoadDefaultETHConf+0x7cc>
81109110:	100690ba 	slli	r3,r2,2
81109114:	00a04474 	movhi	r2,33041
81109118:	10a44a04 	addi	r2,r2,-28376
8110911c:	1885883a 	add	r2,r3,r2
81109120:	10800017 	ldw	r2,0(r2)
81109124:	1000683a 	jmp	r2
81109128:	811092c0 	call	8811092c <__reset+0x20f092c>
8110912c:	811092b4 	orhi	r4,r16,16970
81109130:	8110984c 	andi	r4,r16,16993
81109134:	8110984c 	andi	r4,r16,16993
81109138:	8110984c 	andi	r4,r16,16993
8110913c:	8110984c 	andi	r4,r16,16993
81109140:	8110984c 	andi	r4,r16,16993
81109144:	8110984c 	andi	r4,r16,16993
81109148:	8110984c 	andi	r4,r16,16993
8110914c:	8110984c 	andi	r4,r16,16993
81109150:	8110984c 	andi	r4,r16,16993
81109154:	8110984c 	andi	r4,r16,16993
81109158:	81109864 	muli	r4,r16,16993
8110915c:	8110984c 	andi	r4,r16,16993
81109160:	8110984c 	andi	r4,r16,16993
81109164:	81109864 	muli	r4,r16,16993
81109168:	8110984c 	andi	r4,r16,16993
8110916c:	8110984c 	andi	r4,r16,16993
81109170:	8110984c 	andi	r4,r16,16993
81109174:	8110984c 	andi	r4,r16,16993
81109178:	8110984c 	andi	r4,r16,16993
8110917c:	8110984c 	andi	r4,r16,16993
81109180:	8110984c 	andi	r4,r16,16993
81109184:	8110984c 	andi	r4,r16,16993
81109188:	8110984c 	andi	r4,r16,16993
8110918c:	8110984c 	andi	r4,r16,16993
81109190:	8110984c 	andi	r4,r16,16993
81109194:	8110984c 	andi	r4,r16,16993
81109198:	8110984c 	andi	r4,r16,16993
8110919c:	8110984c 	andi	r4,r16,16993
811091a0:	8110984c 	andi	r4,r16,16993
811091a4:	8110984c 	andi	r4,r16,16993
811091a8:	8110984c 	andi	r4,r16,16993
811091ac:	8110984c 	andi	r4,r16,16993
811091b0:	81109864 	muli	r4,r16,16993
811091b4:	8110984c 	andi	r4,r16,16993
811091b8:	8110984c 	andi	r4,r16,16993
811091bc:	8110984c 	andi	r4,r16,16993
811091c0:	8110984c 	andi	r4,r16,16993
811091c4:	8110984c 	andi	r4,r16,16993
811091c8:	8110984c 	andi	r4,r16,16993
811091cc:	81109280 	call	88110928 <__reset+0x20f0928>
811091d0:	8110984c 	andi	r4,r16,16993
811091d4:	8110984c 	andi	r4,r16,16993
811091d8:	8110984c 	andi	r4,r16,16993
811091dc:	8110984c 	andi	r4,r16,16993
811091e0:	8110984c 	andi	r4,r16,16993
811091e4:	8110984c 	andi	r4,r16,16993
811091e8:	8110984c 	andi	r4,r16,16993
811091ec:	8110984c 	andi	r4,r16,16993
811091f0:	8110984c 	andi	r4,r16,16993
811091f4:	8110984c 	andi	r4,r16,16993
811091f8:	8110984c 	andi	r4,r16,16993
811091fc:	8110984c 	andi	r4,r16,16993
81109200:	8110984c 	andi	r4,r16,16993
81109204:	8110984c 	andi	r4,r16,16993
81109208:	8110984c 	andi	r4,r16,16993
8110920c:	8110984c 	andi	r4,r16,16993
81109210:	8110984c 	andi	r4,r16,16993
81109214:	8110984c 	andi	r4,r16,16993
81109218:	8110984c 	andi	r4,r16,16993
8110921c:	8110984c 	andi	r4,r16,16993
81109220:	81109814 	ori	r4,r16,16992
81109224:	8110984c 	andi	r4,r16,16993
81109228:	8110984c 	andi	r4,r16,16993
8110922c:	8110984c 	andi	r4,r16,16993
81109230:	8110984c 	andi	r4,r16,16993
81109234:	8110984c 	andi	r4,r16,16993
81109238:	8110984c 	andi	r4,r16,16993
8110923c:	8110984c 	andi	r4,r16,16993
81109240:	81109614 	ori	r4,r16,16984
81109244:	8110984c 	andi	r4,r16,16993
81109248:	8110984c 	andi	r4,r16,16993
8110924c:	81109474 	orhi	r4,r16,16977
81109250:	8110976c 	andhi	r4,r16,16989
81109254:	811093a8 	cmpgeui	r4,r16,16974
81109258:	8110984c 	andi	r4,r16,16993
8110925c:	8110984c 	andi	r4,r16,16993
81109260:	8110984c 	andi	r4,r16,16993
81109264:	811092d8 	cmpnei	r4,r16,16971
81109268:	8110984c 	andi	r4,r16,16993
8110926c:	8110984c 	andi	r4,r16,16993
81109270:	811096e4 	muli	r4,r16,16987
81109274:	8110984c 	andi	r4,r16,16993
81109278:	8110984c 	andi	r4,r16,16993
8110927c:	81109544 	addi	r4,r16,16981
					case 39:// single quote '
						c = cGetNextChar(siFile);
81109280:	e0bffc0f 	ldh	r2,-16(fp)
81109284:	1009883a 	mov	r4,r2
81109288:	110ab6c0 	call	8110ab6c <cGetNextChar>
8110928c:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
81109290:	00000406 	br	811092a4 <vLoadDefaultETHConf+0x224>
							c = cGetNextChar(siFile);
81109294:	e0bffc0f 	ldh	r2,-16(fp)
81109298:	1009883a 	mov	r4,r2
8110929c:	110ab6c0 	call	8110ab6c <cGetNextChar>
811092a0:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
811092a4:	e0bff947 	ldb	r2,-27(fp)
811092a8:	108009d8 	cmpnei	r2,r2,39
811092ac:	103ff91e 	bne	r2,zero,81109294 <__reset+0xfb0e9294>
							c = cGetNextChar(siFile);
						}
						break;
811092b0:	00016d06 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case -1: 	//EOF
						bEOF = TRUE;
811092b4:	00800044 	movi	r2,1
811092b8:	e0bff815 	stw	r2,-32(fp)
						break;
811092bc:	00016a06 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case -2: 	//EOF
						printf("Problem with SDCard");
811092c0:	012044f4 	movhi	r4,33043
811092c4:	21195404 	addi	r4,r4,25936
811092c8:	110d7800 	call	8110d780 <printf>
						bEOF = TRUE;
811092cc:	00800044 	movi	r2,1
811092d0:	e0bff815 	stw	r2,-32(fp)
						break;
811092d4:	00016406 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
811092d8:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
811092dc:	e0bffc0f 	ldh	r2,-16(fp)
811092e0:	1009883a 	mov	r4,r2
811092e4:	110ab6c0 	call	8110ab6c <cGetNextChar>
811092e8:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
811092ec:	d0e00817 	ldw	r3,-32736(gp)
811092f0:	e0bff947 	ldb	r2,-27(fp)
811092f4:	10800044 	addi	r2,r2,1
811092f8:	1885883a 	add	r2,r3,r2
811092fc:	10800003 	ldbu	r2,0(r2)
81109300:	10803fcc 	andi	r2,r2,255
81109304:	1080010c 	andi	r2,r2,4
81109308:	10000626 	beq	r2,zero,81109324 <vLoadDefaultETHConf+0x2a4>
									(*p_inteiro) = c;
8110930c:	e0bffa17 	ldw	r2,-24(fp)
81109310:	e0fff943 	ldbu	r3,-27(fp)
81109314:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81109318:	e0bffa17 	ldw	r2,-24(fp)
8110931c:	10800044 	addi	r2,r2,1
81109320:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
81109324:	e0bff947 	ldb	r2,-27(fp)
81109328:	10800ea0 	cmpeqi	r2,r2,58
8110932c:	1000031e 	bne	r2,zero,8110933c <vLoadDefaultETHConf+0x2bc>
81109330:	e0bff947 	ldb	r2,-27(fp)
81109334:	10800ed8 	cmpnei	r2,r2,59
81109338:	103fe81e 	bne	r2,zero,811092dc <__reset+0xfb0e92dc>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110933c:	e0bffa17 	ldw	r2,-24(fp)
81109340:	00c00284 	movi	r3,10
81109344:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
81109348:	e0bff903 	ldbu	r2,-28(fp)
8110934c:	10800168 	cmpgeui	r2,r2,5
81109350:	1000021e 	bne	r2,zero,8110935c <vLoadDefaultETHConf+0x2dc>
81109354:	e43ff903 	ldbu	r16,-28(fp)
81109358:	00000106 	br	81109360 <vLoadDefaultETHConf+0x2e0>
8110935c:	04000144 	movi	r16,5
81109360:	e0bffd04 	addi	r2,fp,-12
81109364:	1009883a 	mov	r4,r2
81109368:	110c36c0 	call	8110c36c <atoi>
8110936c:	1007883a 	mov	r3,r2
81109370:	00a045b4 	movhi	r2,33046
81109374:	10a94704 	addi	r2,r2,-23268
81109378:	1405883a 	add	r2,r2,r16
8110937c:	10800404 	addi	r2,r2,16
81109380:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81109384:	e0bffd04 	addi	r2,fp,-12
81109388:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110938c:	e0bff903 	ldbu	r2,-28(fp)
81109390:	10800044 	addi	r2,r2,1
81109394:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81109398:	e0bff947 	ldb	r2,-27(fp)
8110939c:	10800ed8 	cmpnei	r2,r2,59
811093a0:	103fce1e 	bne	r2,zero,811092dc <__reset+0xfb0e92dc>

						break;
811093a4:	00013006 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 'I':

						ucParser = 0;
811093a8:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
811093ac:	e0bffc0f 	ldh	r2,-16(fp)
811093b0:	1009883a 	mov	r4,r2
811093b4:	110ab6c0 	call	8110ab6c <cGetNextChar>
811093b8:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
811093bc:	d0e00817 	ldw	r3,-32736(gp)
811093c0:	e0bff947 	ldb	r2,-27(fp)
811093c4:	10800044 	addi	r2,r2,1
811093c8:	1885883a 	add	r2,r3,r2
811093cc:	10800003 	ldbu	r2,0(r2)
811093d0:	10803fcc 	andi	r2,r2,255
811093d4:	1080010c 	andi	r2,r2,4
811093d8:	10000626 	beq	r2,zero,811093f4 <vLoadDefaultETHConf+0x374>
									(*p_inteiro) = c;
811093dc:	e0bffa17 	ldw	r2,-24(fp)
811093e0:	e0fff943 	ldbu	r3,-27(fp)
811093e4:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
811093e8:	e0bffa17 	ldw	r2,-24(fp)
811093ec:	10800044 	addi	r2,r2,1
811093f0:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
811093f4:	e0bff947 	ldb	r2,-27(fp)
811093f8:	10800ba0 	cmpeqi	r2,r2,46
811093fc:	1000031e 	bne	r2,zero,8110940c <vLoadDefaultETHConf+0x38c>
81109400:	e0bff947 	ldb	r2,-27(fp)
81109404:	10800ed8 	cmpnei	r2,r2,59
81109408:	103fe81e 	bne	r2,zero,811093ac <__reset+0xfb0e93ac>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110940c:	e0bffa17 	ldw	r2,-24(fp)
81109410:	00c00284 	movi	r3,10
81109414:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
81109418:	e0bff903 	ldbu	r2,-28(fp)
8110941c:	108000e8 	cmpgeui	r2,r2,3
81109420:	1000021e 	bne	r2,zero,8110942c <vLoadDefaultETHConf+0x3ac>
81109424:	e43ff903 	ldbu	r16,-28(fp)
81109428:	00000106 	br	81109430 <vLoadDefaultETHConf+0x3b0>
8110942c:	040000c4 	movi	r16,3
81109430:	e0bffd04 	addi	r2,fp,-12
81109434:	1009883a 	mov	r4,r2
81109438:	110c36c0 	call	8110c36c <atoi>
8110943c:	1007883a 	mov	r3,r2
81109440:	00a045b4 	movhi	r2,33046
81109444:	10a94704 	addi	r2,r2,-23268
81109448:	1405883a 	add	r2,r2,r16
8110944c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81109450:	e0bffd04 	addi	r2,fp,-12
81109454:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
81109458:	e0bff903 	ldbu	r2,-28(fp)
8110945c:	10800044 	addi	r2,r2,1
81109460:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81109464:	e0bff947 	ldb	r2,-27(fp)
81109468:	10800ed8 	cmpnei	r2,r2,59
8110946c:	103fcf1e 	bne	r2,zero,811093ac <__reset+0xfb0e93ac>

						break;
81109470:	0000fd06 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 'G':

						ucParser = 0;
81109474:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81109478:	e0bffc0f 	ldh	r2,-16(fp)
8110947c:	1009883a 	mov	r4,r2
81109480:	110ab6c0 	call	8110ab6c <cGetNextChar>
81109484:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81109488:	d0e00817 	ldw	r3,-32736(gp)
8110948c:	e0bff947 	ldb	r2,-27(fp)
81109490:	10800044 	addi	r2,r2,1
81109494:	1885883a 	add	r2,r3,r2
81109498:	10800003 	ldbu	r2,0(r2)
8110949c:	10803fcc 	andi	r2,r2,255
811094a0:	1080010c 	andi	r2,r2,4
811094a4:	10000626 	beq	r2,zero,811094c0 <vLoadDefaultETHConf+0x440>
									(*p_inteiro) = c;
811094a8:	e0bffa17 	ldw	r2,-24(fp)
811094ac:	e0fff943 	ldbu	r3,-27(fp)
811094b0:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
811094b4:	e0bffa17 	ldw	r2,-24(fp)
811094b8:	10800044 	addi	r2,r2,1
811094bc:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
811094c0:	e0bff947 	ldb	r2,-27(fp)
811094c4:	10800ba0 	cmpeqi	r2,r2,46
811094c8:	1000031e 	bne	r2,zero,811094d8 <vLoadDefaultETHConf+0x458>
811094cc:	e0bff947 	ldb	r2,-27(fp)
811094d0:	10800ed8 	cmpnei	r2,r2,59
811094d4:	103fe81e 	bne	r2,zero,81109478 <__reset+0xfb0e9478>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
811094d8:	e0bffa17 	ldw	r2,-24(fp)
811094dc:	00c00284 	movi	r3,10
811094e0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
811094e4:	e0bff903 	ldbu	r2,-28(fp)
811094e8:	108000e8 	cmpgeui	r2,r2,3
811094ec:	1000021e 	bne	r2,zero,811094f8 <vLoadDefaultETHConf+0x478>
811094f0:	e43ff903 	ldbu	r16,-28(fp)
811094f4:	00000106 	br	811094fc <vLoadDefaultETHConf+0x47c>
811094f8:	040000c4 	movi	r16,3
811094fc:	e0bffd04 	addi	r2,fp,-12
81109500:	1009883a 	mov	r4,r2
81109504:	110c36c0 	call	8110c36c <atoi>
81109508:	1007883a 	mov	r3,r2
8110950c:	00a045b4 	movhi	r2,33046
81109510:	10a94704 	addi	r2,r2,-23268
81109514:	1405883a 	add	r2,r2,r16
81109518:	10800104 	addi	r2,r2,4
8110951c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
81109520:	e0bffd04 	addi	r2,fp,-12
81109524:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
81109528:	e0bff903 	ldbu	r2,-28(fp)
8110952c:	10800044 	addi	r2,r2,1
81109530:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81109534:	e0bff947 	ldb	r2,-27(fp)
81109538:	10800ed8 	cmpnei	r2,r2,59
8110953c:	103fce1e 	bne	r2,zero,81109478 <__reset+0xfb0e9478>

						break;
81109540:	0000c906 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 'S':

						ucParser = 0;
81109544:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81109548:	e0bffc0f 	ldh	r2,-16(fp)
8110954c:	1009883a 	mov	r4,r2
81109550:	110ab6c0 	call	8110ab6c <cGetNextChar>
81109554:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81109558:	d0e00817 	ldw	r3,-32736(gp)
8110955c:	e0bff947 	ldb	r2,-27(fp)
81109560:	10800044 	addi	r2,r2,1
81109564:	1885883a 	add	r2,r3,r2
81109568:	10800003 	ldbu	r2,0(r2)
8110956c:	10803fcc 	andi	r2,r2,255
81109570:	1080010c 	andi	r2,r2,4
81109574:	10000626 	beq	r2,zero,81109590 <vLoadDefaultETHConf+0x510>
									(*p_inteiro) = c;
81109578:	e0bffa17 	ldw	r2,-24(fp)
8110957c:	e0fff943 	ldbu	r3,-27(fp)
81109580:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81109584:	e0bffa17 	ldw	r2,-24(fp)
81109588:	10800044 	addi	r2,r2,1
8110958c:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
81109590:	e0bff947 	ldb	r2,-27(fp)
81109594:	10800ba0 	cmpeqi	r2,r2,46
81109598:	1000031e 	bne	r2,zero,811095a8 <vLoadDefaultETHConf+0x528>
8110959c:	e0bff947 	ldb	r2,-27(fp)
811095a0:	10800ed8 	cmpnei	r2,r2,59
811095a4:	103fe81e 	bne	r2,zero,81109548 <__reset+0xfb0e9548>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
811095a8:	e0bffa17 	ldw	r2,-24(fp)
811095ac:	00c00284 	movi	r3,10
811095b0:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
811095b4:	e0bff903 	ldbu	r2,-28(fp)
811095b8:	108000e8 	cmpgeui	r2,r2,3
811095bc:	1000021e 	bne	r2,zero,811095c8 <vLoadDefaultETHConf+0x548>
811095c0:	e43ff903 	ldbu	r16,-28(fp)
811095c4:	00000106 	br	811095cc <vLoadDefaultETHConf+0x54c>
811095c8:	040000c4 	movi	r16,3
811095cc:	e0bffd04 	addi	r2,fp,-12
811095d0:	1009883a 	mov	r4,r2
811095d4:	110c36c0 	call	8110c36c <atoi>
811095d8:	1007883a 	mov	r3,r2
811095dc:	00a045b4 	movhi	r2,33046
811095e0:	10a94704 	addi	r2,r2,-23268
811095e4:	1405883a 	add	r2,r2,r16
811095e8:	10800204 	addi	r2,r2,8
811095ec:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
811095f0:	e0bffd04 	addi	r2,fp,-12
811095f4:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
811095f8:	e0bff903 	ldbu	r2,-28(fp)
811095fc:	10800044 	addi	r2,r2,1
81109600:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
81109604:	e0bff947 	ldb	r2,-27(fp)
81109608:	10800ed8 	cmpnei	r2,r2,59
8110960c:	103fce1e 	bne	r2,zero,81109548 <__reset+0xfb0e9548>

						break;
81109610:	00009506 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 'D':

						ucParser = 0;
81109614:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
81109618:	e0bffc0f 	ldh	r2,-16(fp)
8110961c:	1009883a 	mov	r4,r2
81109620:	110ab6c0 	call	8110ab6c <cGetNextChar>
81109624:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
81109628:	d0e00817 	ldw	r3,-32736(gp)
8110962c:	e0bff947 	ldb	r2,-27(fp)
81109630:	10800044 	addi	r2,r2,1
81109634:	1885883a 	add	r2,r3,r2
81109638:	10800003 	ldbu	r2,0(r2)
8110963c:	10803fcc 	andi	r2,r2,255
81109640:	1080010c 	andi	r2,r2,4
81109644:	10000626 	beq	r2,zero,81109660 <vLoadDefaultETHConf+0x5e0>
									(*p_inteiro) = c;
81109648:	e0bffa17 	ldw	r2,-24(fp)
8110964c:	e0fff943 	ldbu	r3,-27(fp)
81109650:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
81109654:	e0bffa17 	ldw	r2,-24(fp)
81109658:	10800044 	addi	r2,r2,1
8110965c:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
81109660:	e0bff947 	ldb	r2,-27(fp)
81109664:	10800ba0 	cmpeqi	r2,r2,46
81109668:	1000031e 	bne	r2,zero,81109678 <vLoadDefaultETHConf+0x5f8>
8110966c:	e0bff947 	ldb	r2,-27(fp)
81109670:	10800ed8 	cmpnei	r2,r2,59
81109674:	103fe81e 	bne	r2,zero,81109618 <__reset+0xfb0e9618>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81109678:	e0bffa17 	ldw	r2,-24(fp)
8110967c:	00c00284 	movi	r3,10
81109680:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
81109684:	e0bff903 	ldbu	r2,-28(fp)
81109688:	108000e8 	cmpgeui	r2,r2,3
8110968c:	1000021e 	bne	r2,zero,81109698 <vLoadDefaultETHConf+0x618>
81109690:	e43ff903 	ldbu	r16,-28(fp)
81109694:	00000106 	br	8110969c <vLoadDefaultETHConf+0x61c>
81109698:	040000c4 	movi	r16,3
8110969c:	e0bffd04 	addi	r2,fp,-12
811096a0:	1009883a 	mov	r4,r2
811096a4:	110c36c0 	call	8110c36c <atoi>
811096a8:	1007883a 	mov	r3,r2
811096ac:	00a045b4 	movhi	r2,33046
811096b0:	10a94704 	addi	r2,r2,-23268
811096b4:	1405883a 	add	r2,r2,r16
811096b8:	10800304 	addi	r2,r2,12
811096bc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
811096c0:	e0bffd04 	addi	r2,fp,-12
811096c4:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
811096c8:	e0bff903 	ldbu	r2,-28(fp)
811096cc:	10800044 	addi	r2,r2,1
811096d0:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
811096d4:	e0bff947 	ldb	r2,-27(fp)
811096d8:	10800ed8 	cmpnei	r2,r2,59
811096dc:	103fce1e 	bne	r2,zero,81109618 <__reset+0xfb0e9618>

						break;						
811096e0:	00006106 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 'P':

						do {
							c = cGetNextChar(siFile);
811096e4:	e0bffc0f 	ldh	r2,-16(fp)
811096e8:	1009883a 	mov	r4,r2
811096ec:	110ab6c0 	call	8110ab6c <cGetNextChar>
811096f0:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
811096f4:	d0e00817 	ldw	r3,-32736(gp)
811096f8:	e0bff947 	ldb	r2,-27(fp)
811096fc:	10800044 	addi	r2,r2,1
81109700:	1885883a 	add	r2,r3,r2
81109704:	10800003 	ldbu	r2,0(r2)
81109708:	10803fcc 	andi	r2,r2,255
8110970c:	1080010c 	andi	r2,r2,4
81109710:	10000626 	beq	r2,zero,8110972c <vLoadDefaultETHConf+0x6ac>
								(*p_inteiro) = c;
81109714:	e0bffa17 	ldw	r2,-24(fp)
81109718:	e0fff943 	ldbu	r3,-27(fp)
8110971c:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
81109720:	e0bffa17 	ldw	r2,-24(fp)
81109724:	10800044 	addi	r2,r2,1
81109728:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110972c:	e0bff947 	ldb	r2,-27(fp)
81109730:	10800ed8 	cmpnei	r2,r2,59
81109734:	103feb1e 	bne	r2,zero,811096e4 <__reset+0xfb0e96e4>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81109738:	e0bffa17 	ldw	r2,-24(fp)
8110973c:	00c00284 	movi	r3,10
81109740:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
81109744:	e0bffd04 	addi	r2,fp,-12
81109748:	1009883a 	mov	r4,r2
8110974c:	110c36c0 	call	8110c36c <atoi>
81109750:	1007883a 	mov	r3,r2
81109754:	00a045b4 	movhi	r2,33046
81109758:	10a94704 	addi	r2,r2,-23268
8110975c:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
81109760:	e0bffd04 	addi	r2,fp,-12
81109764:	e0bffa15 	stw	r2,-24(fp)

						break;
81109768:	00003f06 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110976c:	e0bffc0f 	ldh	r2,-16(fp)
81109770:	1009883a 	mov	r4,r2
81109774:	110ab6c0 	call	8110ab6c <cGetNextChar>
81109778:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110977c:	d0e00817 	ldw	r3,-32736(gp)
81109780:	e0bff947 	ldb	r2,-27(fp)
81109784:	10800044 	addi	r2,r2,1
81109788:	1885883a 	add	r2,r3,r2
8110978c:	10800003 	ldbu	r2,0(r2)
81109790:	10803fcc 	andi	r2,r2,255
81109794:	1080010c 	andi	r2,r2,4
81109798:	10000626 	beq	r2,zero,811097b4 <vLoadDefaultETHConf+0x734>
								(*p_inteiro) = c;
8110979c:	e0bffa17 	ldw	r2,-24(fp)
811097a0:	e0fff943 	ldbu	r3,-27(fp)
811097a4:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
811097a8:	e0bffa17 	ldw	r2,-24(fp)
811097ac:	10800044 	addi	r2,r2,1
811097b0:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
811097b4:	e0bff947 	ldb	r2,-27(fp)
811097b8:	10800ed8 	cmpnei	r2,r2,59
811097bc:	103feb1e 	bne	r2,zero,8110976c <__reset+0xfb0e976c>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
811097c0:	e0bffa17 	ldw	r2,-24(fp)
811097c4:	00c00284 	movi	r3,10
811097c8:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
811097cc:	e0bffd04 	addi	r2,fp,-12
811097d0:	1009883a 	mov	r4,r2
811097d4:	110c36c0 	call	8110c36c <atoi>
811097d8:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
811097dc:	e0bffc8f 	ldh	r2,-14(fp)
811097e0:	10800058 	cmpnei	r2,r2,1
811097e4:	1000051e 	bne	r2,zero,811097fc <vLoadDefaultETHConf+0x77c>
							xConfEth.bDHCP = TRUE;
811097e8:	00a045b4 	movhi	r2,33046
811097ec:	10a94704 	addi	r2,r2,-23268
811097f0:	00c00044 	movi	r3,1
811097f4:	10c00615 	stw	r3,24(r2)
811097f8:	00000306 	br	81109808 <vLoadDefaultETHConf+0x788>
						else
							xConfEth.bDHCP = FALSE;
811097fc:	00a045b4 	movhi	r2,33046
81109800:	10a94704 	addi	r2,r2,-23268
81109804:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
81109808:	e0bffd04 	addi	r2,fp,-12
8110980c:	e0bffa15 	stw	r2,-24(fp)

						break;
81109810:	00001506 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
81109814:	e0bffc0f 	ldh	r2,-16(fp)
81109818:	1009883a 	mov	r4,r2
8110981c:	110ab340 	call	8110ab34 <siCloseFile>
81109820:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
81109824:	e0bffb17 	ldw	r2,-20(fp)
81109828:	1000031e 	bne	r2,zero,81109838 <vLoadDefaultETHConf+0x7b8>
							printf("Problema em fechar o arquivo\n");
8110982c:	012044f4 	movhi	r4,33043
81109830:	21195904 	addi	r4,r4,25956
81109834:	110d89c0 	call	8110d89c <puts>

						/* End of Parser File */
						bEOF = TRUE;
81109838:	00800044 	movi	r2,1
8110983c:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
81109840:	00800044 	movi	r2,1
81109844:	e0bff715 	stw	r2,-36(fp)
						break;
81109848:	00000706 	br	81109868 <vLoadDefaultETHConf+0x7e8>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110984c:	e0bff947 	ldb	r2,-27(fp)
81109850:	100b883a 	mov	r5,r2
81109854:	012044f4 	movhi	r4,33043
81109858:	21196104 	addi	r4,r4,25988
8110985c:	110d7800 	call	8110d780 <printf>
						break;
81109860:	00000106 	br	81109868 <vLoadDefaultETHConf+0x7e8>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
81109864:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
81109868:	e0bff817 	ldw	r2,-32(fp)
8110986c:	103e2026 	beq	r2,zero,811090f0 <__reset+0xfb0e90f0>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
81109870:	00000706 	br	81109890 <vLoadDefaultETHConf+0x810>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
81109874:	012044f4 	movhi	r4,33043
81109878:	21196e04 	addi	r4,r4,26040
8110987c:	110d89c0 	call	8110d89c <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
81109880:	00000306 	br	81109890 <vLoadDefaultETHConf+0x810>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
81109884:	012044f4 	movhi	r4,33043
81109888:	21197704 	addi	r4,r4,26076
8110988c:	110d89c0 	call	8110d89c <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
81109890:	e0bff717 	ldw	r2,-36(fp)
81109894:	1000541e 	bne	r2,zero,811099e8 <vLoadDefaultETHConf+0x968>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
81109898:	012044f4 	movhi	r4,33043
8110989c:	21197a04 	addi	r4,r4,26088
811098a0:	110d89c0 	call	8110d89c <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
811098a4:	016044f4 	movhi	r5,33043
811098a8:	29595204 	addi	r5,r5,25928
811098ac:	012044f4 	movhi	r4,33043
811098b0:	21198e04 	addi	r4,r4,26168
811098b4:	110d7800 	call	8110d780 <printf>


		xConfEth.siPortPUS = 17000;
811098b8:	00a045b4 	movhi	r2,33046
811098bc:	10a94704 	addi	r2,r2,-23268
811098c0:	00d09a04 	movi	r3,17000
811098c4:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
811098c8:	00a045b4 	movhi	r2,33046
811098cc:	10a94704 	addi	r2,r2,-23268
811098d0:	00fff004 	movi	r3,-64
811098d4:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
811098d8:	00a045b4 	movhi	r2,33046
811098dc:	10a94704 	addi	r2,r2,-23268
811098e0:	00ffea04 	movi	r3,-88
811098e4:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
811098e8:	00a045b4 	movhi	r2,33046
811098ec:	10a94704 	addi	r2,r2,-23268
811098f0:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
811098f4:	00a045b4 	movhi	r2,33046
811098f8:	10a94704 	addi	r2,r2,-23268
811098fc:	00c00144 	movi	r3,5
81109900:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
81109904:	00a045b4 	movhi	r2,33046
81109908:	10a94704 	addi	r2,r2,-23268
8110990c:	00fff004 	movi	r3,-64
81109910:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
81109914:	00a045b4 	movhi	r2,33046
81109918:	10a94704 	addi	r2,r2,-23268
8110991c:	00ffea04 	movi	r3,-88
81109920:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
81109924:	00a045b4 	movhi	r2,33046
81109928:	10a94704 	addi	r2,r2,-23268
8110992c:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
81109930:	00a045b4 	movhi	r2,33046
81109934:	10a94704 	addi	r2,r2,-23268
81109938:	00c00044 	movi	r3,1
8110993c:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
81109940:	00a045b4 	movhi	r2,33046
81109944:	10a94704 	addi	r2,r2,-23268
81109948:	00ffffc4 	movi	r3,-1
8110994c:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
81109950:	00a045b4 	movhi	r2,33046
81109954:	10a94704 	addi	r2,r2,-23268
81109958:	00ffffc4 	movi	r3,-1
8110995c:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
81109960:	00a045b4 	movhi	r2,33046
81109964:	10a94704 	addi	r2,r2,-23268
81109968:	00ffffc4 	movi	r3,-1
8110996c:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
81109970:	00a045b4 	movhi	r2,33046
81109974:	10a94704 	addi	r2,r2,-23268
81109978:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110997c:	00a045b4 	movhi	r2,33046
81109980:	10a94704 	addi	r2,r2,-23268
81109984:	00ffff04 	movi	r3,-4
81109988:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110998c:	00a045b4 	movhi	r2,33046
81109990:	10a94704 	addi	r2,r2,-23268
81109994:	00fffdc4 	movi	r3,-9
81109998:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110999c:	00a045b4 	movhi	r2,33046
811099a0:	10a94704 	addi	r2,r2,-23268
811099a4:	00c018c4 	movi	r3,99
811099a8:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
811099ac:	00a045b4 	movhi	r2,33046
811099b0:	10a94704 	addi	r2,r2,-23268
811099b4:	00c01344 	movi	r3,77
811099b8:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
811099bc:	00a045b4 	movhi	r2,33046
811099c0:	10a94704 	addi	r2,r2,-23268
811099c4:	00c007c4 	movi	r3,31
811099c8:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
811099cc:	00a045b4 	movhi	r2,33046
811099d0:	10a94704 	addi	r2,r2,-23268
811099d4:	00c01084 	movi	r3,66
811099d8:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
811099dc:	00a045b4 	movhi	r2,33046
811099e0:	10a94704 	addi	r2,r2,-23268
811099e4:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
811099e8:	e0bff717 	ldw	r2,-36(fp)
}
811099ec:	e6ffff04 	addi	sp,fp,-4
811099f0:	dfc00217 	ldw	ra,8(sp)
811099f4:	df000117 	ldw	fp,4(sp)
811099f8:	dc000017 	ldw	r16,0(sp)
811099fc:	dec00304 	addi	sp,sp,12
81109a00:	f800283a 	ret

81109a04 <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
81109a04:	defff004 	addi	sp,sp,-64
81109a08:	dfc00f15 	stw	ra,60(sp)
81109a0c:	df000e15 	stw	fp,56(sp)
81109a10:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
81109a14:	d0a05917 	ldw	r2,-32412(gp)
81109a18:	100f883a 	mov	r7,r2
81109a1c:	018007c4 	movi	r6,31
81109a20:	01400044 	movi	r5,1
81109a24:	012044f4 	movhi	r4,33043
81109a28:	21199404 	addi	r4,r4,26192
81109a2c:	110ca840 	call	8110ca84 <fwrite>

		memset(buffer,0,40);
81109a30:	01800a04 	movi	r6,40
81109a34:	000b883a 	mov	r5,zero
81109a38:	e13ff604 	addi	r4,fp,-40
81109a3c:	110d5c80 	call	8110d5c8 <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
81109a40:	00a045b4 	movhi	r2,33046
81109a44:	10a94704 	addi	r2,r2,-23268
81109a48:	10800403 	ldbu	r2,16(r2)
81109a4c:	11803fcc 	andi	r6,r2,255
81109a50:	00a045b4 	movhi	r2,33046
81109a54:	10a94704 	addi	r2,r2,-23268
81109a58:	10800443 	ldbu	r2,17(r2)
81109a5c:	11c03fcc 	andi	r7,r2,255
81109a60:	00a045b4 	movhi	r2,33046
81109a64:	10a94704 	addi	r2,r2,-23268
81109a68:	10800483 	ldbu	r2,18(r2)
81109a6c:	10c03fcc 	andi	r3,r2,255
81109a70:	00a045b4 	movhi	r2,33046
81109a74:	10a94704 	addi	r2,r2,-23268
81109a78:	108004c3 	ldbu	r2,19(r2)
81109a7c:	11003fcc 	andi	r4,r2,255
81109a80:	00a045b4 	movhi	r2,33046
81109a84:	10a94704 	addi	r2,r2,-23268
81109a88:	10800503 	ldbu	r2,20(r2)
81109a8c:	11403fcc 	andi	r5,r2,255
81109a90:	00a045b4 	movhi	r2,33046
81109a94:	10a94704 	addi	r2,r2,-23268
81109a98:	10800543 	ldbu	r2,21(r2)
81109a9c:	10803fcc 	andi	r2,r2,255
81109aa0:	d8800315 	stw	r2,12(sp)
81109aa4:	d9400215 	stw	r5,8(sp)
81109aa8:	d9000115 	stw	r4,4(sp)
81109aac:	d8c00015 	stw	r3,0(sp)
81109ab0:	016044f4 	movhi	r5,33043
81109ab4:	29599c04 	addi	r5,r5,26224
81109ab8:	e13ff604 	addi	r4,fp,-40
81109abc:	110dbb80 	call	8110dbb8 <sprintf>
		debug(fp, buffer );
81109ac0:	d0a05917 	ldw	r2,-32412(gp)
81109ac4:	e17ff604 	addi	r5,fp,-40
81109ac8:	1009883a 	mov	r4,r2
81109acc:	110c4b80 	call	8110c4b8 <fprintf>

		memset(buffer,0,40);
81109ad0:	01800a04 	movi	r6,40
81109ad4:	000b883a 	mov	r5,zero
81109ad8:	e13ff604 	addi	r4,fp,-40
81109adc:	110d5c80 	call	8110d5c8 <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
81109ae0:	00a045b4 	movhi	r2,33046
81109ae4:	10a94704 	addi	r2,r2,-23268
81109ae8:	10800003 	ldbu	r2,0(r2)
81109aec:	11003fcc 	andi	r4,r2,255
81109af0:	00a045b4 	movhi	r2,33046
81109af4:	10a94704 	addi	r2,r2,-23268
81109af8:	10800043 	ldbu	r2,1(r2)
81109afc:	11403fcc 	andi	r5,r2,255
81109b00:	00a045b4 	movhi	r2,33046
81109b04:	10a94704 	addi	r2,r2,-23268
81109b08:	10800083 	ldbu	r2,2(r2)
81109b0c:	10c03fcc 	andi	r3,r2,255
81109b10:	00a045b4 	movhi	r2,33046
81109b14:	10a94704 	addi	r2,r2,-23268
81109b18:	108000c3 	ldbu	r2,3(r2)
81109b1c:	10803fcc 	andi	r2,r2,255
81109b20:	d8800115 	stw	r2,4(sp)
81109b24:	d8c00015 	stw	r3,0(sp)
81109b28:	280f883a 	mov	r7,r5
81109b2c:	200d883a 	mov	r6,r4
81109b30:	016044f4 	movhi	r5,33043
81109b34:	2959a504 	addi	r5,r5,26260
81109b38:	e13ff604 	addi	r4,fp,-40
81109b3c:	110dbb80 	call	8110dbb8 <sprintf>
		debug(fp, buffer );
81109b40:	d0a05917 	ldw	r2,-32412(gp)
81109b44:	e17ff604 	addi	r5,fp,-40
81109b48:	1009883a 	mov	r4,r2
81109b4c:	110c4b80 	call	8110c4b8 <fprintf>

		memset(buffer,0,40);
81109b50:	01800a04 	movi	r6,40
81109b54:	000b883a 	mov	r5,zero
81109b58:	e13ff604 	addi	r4,fp,-40
81109b5c:	110d5c80 	call	8110d5c8 <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
81109b60:	00a045b4 	movhi	r2,33046
81109b64:	10a94704 	addi	r2,r2,-23268
81109b68:	10800103 	ldbu	r2,4(r2)
81109b6c:	11003fcc 	andi	r4,r2,255
81109b70:	00a045b4 	movhi	r2,33046
81109b74:	10a94704 	addi	r2,r2,-23268
81109b78:	10800143 	ldbu	r2,5(r2)
81109b7c:	11403fcc 	andi	r5,r2,255
81109b80:	00a045b4 	movhi	r2,33046
81109b84:	10a94704 	addi	r2,r2,-23268
81109b88:	10800183 	ldbu	r2,6(r2)
81109b8c:	10c03fcc 	andi	r3,r2,255
81109b90:	00a045b4 	movhi	r2,33046
81109b94:	10a94704 	addi	r2,r2,-23268
81109b98:	108001c3 	ldbu	r2,7(r2)
81109b9c:	10803fcc 	andi	r2,r2,255
81109ba0:	d8800115 	stw	r2,4(sp)
81109ba4:	d8c00015 	stw	r3,0(sp)
81109ba8:	280f883a 	mov	r7,r5
81109bac:	200d883a 	mov	r6,r4
81109bb0:	016044f4 	movhi	r5,33043
81109bb4:	2959ab04 	addi	r5,r5,26284
81109bb8:	e13ff604 	addi	r4,fp,-40
81109bbc:	110dbb80 	call	8110dbb8 <sprintf>
		debug(fp, buffer );
81109bc0:	d0a05917 	ldw	r2,-32412(gp)
81109bc4:	e17ff604 	addi	r5,fp,-40
81109bc8:	1009883a 	mov	r4,r2
81109bcc:	110c4b80 	call	8110c4b8 <fprintf>

		memset(buffer,0,40);
81109bd0:	01800a04 	movi	r6,40
81109bd4:	000b883a 	mov	r5,zero
81109bd8:	e13ff604 	addi	r4,fp,-40
81109bdc:	110d5c80 	call	8110d5c8 <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
81109be0:	00a045b4 	movhi	r2,33046
81109be4:	10a94704 	addi	r2,r2,-23268
81109be8:	10800203 	ldbu	r2,8(r2)
81109bec:	11003fcc 	andi	r4,r2,255
81109bf0:	00a045b4 	movhi	r2,33046
81109bf4:	10a94704 	addi	r2,r2,-23268
81109bf8:	10800243 	ldbu	r2,9(r2)
81109bfc:	11403fcc 	andi	r5,r2,255
81109c00:	00a045b4 	movhi	r2,33046
81109c04:	10a94704 	addi	r2,r2,-23268
81109c08:	10800283 	ldbu	r2,10(r2)
81109c0c:	10c03fcc 	andi	r3,r2,255
81109c10:	00a045b4 	movhi	r2,33046
81109c14:	10a94704 	addi	r2,r2,-23268
81109c18:	108002c3 	ldbu	r2,11(r2)
81109c1c:	10803fcc 	andi	r2,r2,255
81109c20:	d8800115 	stw	r2,4(sp)
81109c24:	d8c00015 	stw	r3,0(sp)
81109c28:	280f883a 	mov	r7,r5
81109c2c:	200d883a 	mov	r6,r4
81109c30:	016044f4 	movhi	r5,33043
81109c34:	2959b204 	addi	r5,r5,26312
81109c38:	e13ff604 	addi	r4,fp,-40
81109c3c:	110dbb80 	call	8110dbb8 <sprintf>
		debug(fp, buffer );
81109c40:	d0a05917 	ldw	r2,-32412(gp)
81109c44:	e17ff604 	addi	r5,fp,-40
81109c48:	1009883a 	mov	r4,r2
81109c4c:	110c4b80 	call	8110c4b8 <fprintf>

		memset(buffer,0,40);
81109c50:	01800a04 	movi	r6,40
81109c54:	000b883a 	mov	r5,zero
81109c58:	e13ff604 	addi	r4,fp,-40
81109c5c:	110d5c80 	call	8110d5c8 <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
81109c60:	00a045b4 	movhi	r2,33046
81109c64:	10a94704 	addi	r2,r2,-23268
81109c68:	10800303 	ldbu	r2,12(r2)
81109c6c:	11003fcc 	andi	r4,r2,255
81109c70:	00a045b4 	movhi	r2,33046
81109c74:	10a94704 	addi	r2,r2,-23268
81109c78:	10800343 	ldbu	r2,13(r2)
81109c7c:	11403fcc 	andi	r5,r2,255
81109c80:	00a045b4 	movhi	r2,33046
81109c84:	10a94704 	addi	r2,r2,-23268
81109c88:	10800383 	ldbu	r2,14(r2)
81109c8c:	10c03fcc 	andi	r3,r2,255
81109c90:	00a045b4 	movhi	r2,33046
81109c94:	10a94704 	addi	r2,r2,-23268
81109c98:	108003c3 	ldbu	r2,15(r2)
81109c9c:	10803fcc 	andi	r2,r2,255
81109ca0:	d8800115 	stw	r2,4(sp)
81109ca4:	d8c00015 	stw	r3,0(sp)
81109ca8:	280f883a 	mov	r7,r5
81109cac:	200d883a 	mov	r6,r4
81109cb0:	016044f4 	movhi	r5,33043
81109cb4:	2959b904 	addi	r5,r5,26340
81109cb8:	e13ff604 	addi	r4,fp,-40
81109cbc:	110dbb80 	call	8110dbb8 <sprintf>
		debug(fp, buffer );
81109cc0:	d0a05917 	ldw	r2,-32412(gp)
81109cc4:	e17ff604 	addi	r5,fp,-40
81109cc8:	1009883a 	mov	r4,r2
81109ccc:	110c4b80 	call	8110c4b8 <fprintf>

		memset(buffer,0,40);
81109cd0:	01800a04 	movi	r6,40
81109cd4:	000b883a 	mov	r5,zero
81109cd8:	e13ff604 	addi	r4,fp,-40
81109cdc:	110d5c80 	call	8110d5c8 <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
81109ce0:	00a045b4 	movhi	r2,33046
81109ce4:	10a94704 	addi	r2,r2,-23268
81109ce8:	1080058b 	ldhu	r2,22(r2)
81109cec:	10bfffcc 	andi	r2,r2,65535
81109cf0:	100d883a 	mov	r6,r2
81109cf4:	016044f4 	movhi	r5,33043
81109cf8:	2959c004 	addi	r5,r5,26368
81109cfc:	e13ff604 	addi	r4,fp,-40
81109d00:	110dbb80 	call	8110dbb8 <sprintf>
		debug(fp, buffer );
81109d04:	d0a05917 	ldw	r2,-32412(gp)
81109d08:	e17ff604 	addi	r5,fp,-40
81109d0c:	1009883a 	mov	r4,r2
81109d10:	110c4b80 	call	8110c4b8 <fprintf>

	}
81109d14:	0001883a 	nop
81109d18:	e037883a 	mov	sp,fp
81109d1c:	dfc00117 	ldw	ra,4(sp)
81109d20:	df000017 	ldw	fp,0(sp)
81109d24:	dec00204 	addi	sp,sp,8
81109d28:	f800283a 	ret

81109d2c <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
81109d2c:	defffb04 	addi	sp,sp,-20
81109d30:	df000415 	stw	fp,16(sp)
81109d34:	df000404 	addi	fp,sp,16
81109d38:	e13ffd15 	stw	r4,-12(fp)
81109d3c:	e17ffe15 	stw	r5,-8(fp)
81109d40:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
81109d44:	e0bffe17 	ldw	r2,-8(fp)
81109d48:	1000021e 	bne	r2,zero,81109d54 <ucCrc8+0x28>
        return 0;
81109d4c:	0005883a 	mov	r2,zero
81109d50:	00001906 	br	81109db8 <ucCrc8+0x8c>
    crc &= 0xff;
81109d54:	e0bffd17 	ldw	r2,-12(fp)
81109d58:	10803fcc 	andi	r2,r2,255
81109d5c:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
81109d60:	e0fffe17 	ldw	r3,-8(fp)
81109d64:	e0bfff17 	ldw	r2,-4(fp)
81109d68:	1885883a 	add	r2,r3,r2
81109d6c:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
81109d70:	00000d06 	br	81109da8 <ucCrc8+0x7c>
        crc = crc8_table[crc ^ *data++];
81109d74:	e0bffe17 	ldw	r2,-8(fp)
81109d78:	10c00044 	addi	r3,r2,1
81109d7c:	e0fffe15 	stw	r3,-8(fp)
81109d80:	10800003 	ldbu	r2,0(r2)
81109d84:	10c03fcc 	andi	r3,r2,255
81109d88:	e0bffd17 	ldw	r2,-12(fp)
81109d8c:	1886f03a 	xor	r3,r3,r2
81109d90:	00a044f4 	movhi	r2,33043
81109d94:	1099c3c4 	addi	r2,r2,26383
81109d98:	10c5883a 	add	r2,r2,r3
81109d9c:	10800003 	ldbu	r2,0(r2)
81109da0:	10803fcc 	andi	r2,r2,255
81109da4:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
81109da8:	e0fffe17 	ldw	r3,-8(fp)
81109dac:	e0bffc17 	ldw	r2,-16(fp)
81109db0:	18bff036 	bltu	r3,r2,81109d74 <__reset+0xfb0e9d74>
        crc = crc8_table[crc ^ *data++];
    return crc;
81109db4:	e0bffd17 	ldw	r2,-12(fp)
}
81109db8:	e037883a 	mov	sp,fp
81109dbc:	df000017 	ldw	fp,0(sp)
81109dc0:	dec00104 	addi	sp,sp,4
81109dc4:	f800283a 	ret

81109dc8 <ucCrc8wInit>:

unsigned char ucCrc8wInit(unsigned char const *data, size_t len)
{
81109dc8:	defffb04 	addi	sp,sp,-20
81109dcc:	dfc00415 	stw	ra,16(sp)
81109dd0:	df000315 	stw	fp,12(sp)
81109dd4:	df000304 	addi	fp,sp,12
81109dd8:	e13ffe15 	stw	r4,-8(fp)
81109ddc:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
81109de0:	000d883a 	mov	r6,zero
81109de4:	000b883a 	mov	r5,zero
81109de8:	0009883a 	mov	r4,zero
81109dec:	1109d2c0 	call	81109d2c <ucCrc8>
81109df0:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, data, len);
81109df4:	e0bffd03 	ldbu	r2,-12(fp)
81109df8:	e1bfff17 	ldw	r6,-4(fp)
81109dfc:	e17ffe17 	ldw	r5,-8(fp)
81109e00:	1009883a 	mov	r4,r2
81109e04:	1109d2c0 	call	81109d2c <ucCrc8>
}
81109e08:	e037883a 	mov	sp,fp
81109e0c:	dfc00117 	ldw	ra,4(sp)
81109e10:	df000017 	ldw	fp,0(sp)
81109e14:	dec00204 	addi	sp,sp,8
81109e18:	f800283a 	ret

81109e1c <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
81109e1c:	defff904 	addi	sp,sp,-28
81109e20:	dfc00615 	stw	ra,24(sp)
81109e24:	df000515 	stw	fp,20(sp)
81109e28:	df000504 	addi	fp,sp,20
81109e2c:	2005883a 	mov	r2,r4
81109e30:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
81109e34:	e03ffb15 	stw	zero,-20(fp)
81109e38:	e03ffc15 	stw	zero,-16(fp)
81109e3c:	e03ffd15 	stw	zero,-12(fp)
81109e40:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
81109e44:	e0bfff03 	ldbu	r2,-4(fp)
81109e48:	100d883a 	mov	r6,r2
81109e4c:	016044f4 	movhi	r5,33043
81109e50:	295a0404 	addi	r5,r5,26640
81109e54:	e13ffb04 	addi	r4,fp,-20
81109e58:	110dbb80 	call	8110dbb8 <sprintf>
		debug(fp, buffer);
81109e5c:	d0a05917 	ldw	r2,-32412(gp)
81109e60:	e17ffb04 	addi	r5,fp,-20
81109e64:	1009883a 	mov	r4,r2
81109e68:	110c4b80 	call	8110c4b8 <fprintf>
	}
81109e6c:	0001883a 	nop
81109e70:	e037883a 	mov	sp,fp
81109e74:	dfc00117 	ldw	ra,4(sp)
81109e78:	df000017 	ldw	fp,0(sp)
81109e7c:	dec00204 	addi	sp,sp,8
81109e80:	f800283a 	ret

81109e84 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
81109e84:	defffd04 	addi	sp,sp,-12
81109e88:	dfc00215 	stw	ra,8(sp)
81109e8c:	df000115 	stw	fp,4(sp)
81109e90:	df000104 	addi	fp,sp,4
81109e94:	2005883a 	mov	r2,r4
81109e98:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)");
81109e9c:	d0a05917 	ldw	r2,-32412(gp)
81109ea0:	100f883a 	mov	r7,r2
81109ea4:	01800884 	movi	r6,34
81109ea8:	01400044 	movi	r5,1
81109eac:	012044f4 	movhi	r4,33043
81109eb0:	211a0704 	addi	r4,r4,26652
81109eb4:	110ca840 	call	8110ca84 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
81109eb8:	e0bfff03 	ldbu	r2,-4(fp)
81109ebc:	1009883a 	mov	r4,r2
81109ec0:	1109e1c0 	call	81109e1c <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81109ec4:	0001883a 	nop
81109ec8:	e037883a 	mov	sp,fp
81109ecc:	dfc00117 	ldw	ra,4(sp)
81109ed0:	df000017 	ldw	fp,0(sp)
81109ed4:	dec00204 	addi	sp,sp,8
81109ed8:	f800283a 	ret

81109edc <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
81109edc:	defffe04 	addi	sp,sp,-8
81109ee0:	dfc00115 	stw	ra,4(sp)
81109ee4:	df000015 	stw	fp,0(sp)
81109ee8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)");
81109eec:	d0a05917 	ldw	r2,-32412(gp)
81109ef0:	100f883a 	mov	r7,r2
81109ef4:	01800944 	movi	r6,37
81109ef8:	01400044 	movi	r5,1
81109efc:	012044f4 	movhi	r4,33043
81109f00:	211a1004 	addi	r4,r4,26688
81109f04:	110ca840 	call	8110ca84 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81109f08:	0001883a 	nop
81109f0c:	e037883a 	mov	sp,fp
81109f10:	dfc00117 	ldw	ra,4(sp)
81109f14:	df000017 	ldw	fp,0(sp)
81109f18:	dec00204 	addi	sp,sp,8
81109f1c:	f800283a 	ret

81109f20 <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
81109f20:	defffe04 	addi	sp,sp,-8
81109f24:	dfc00115 	stw	ra,4(sp)
81109f28:	df000015 	stw	fp,0(sp)
81109f2c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)");
81109f30:	d0a05917 	ldw	r2,-32412(gp)
81109f34:	100f883a 	mov	r7,r2
81109f38:	01800784 	movi	r6,30
81109f3c:	01400044 	movi	r5,1
81109f40:	012044f4 	movhi	r4,33043
81109f44:	211a1a04 	addi	r4,r4,26728
81109f48:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81109f4c:	0001883a 	nop
81109f50:	e037883a 	mov	sp,fp
81109f54:	dfc00117 	ldw	ra,4(sp)
81109f58:	df000017 	ldw	fp,0(sp)
81109f5c:	dec00204 	addi	sp,sp,8
81109f60:	f800283a 	ret

81109f64 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
81109f64:	defffe04 	addi	sp,sp,-8
81109f68:	dfc00115 	stw	ra,4(sp)
81109f6c:	df000015 	stw	fp,0(sp)
81109f70:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
81109f74:	d0a05917 	ldw	r2,-32412(gp)
81109f78:	100f883a 	mov	r7,r2
81109f7c:	01800744 	movi	r6,29
81109f80:	01400044 	movi	r5,1
81109f84:	012044f4 	movhi	r4,33043
81109f88:	211a2204 	addi	r4,r4,26760
81109f8c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)");
81109f90:	d0a05917 	ldw	r2,-32412(gp)
81109f94:	100f883a 	mov	r7,r2
81109f98:	01800a04 	movi	r6,40
81109f9c:	01400044 	movi	r5,1
81109fa0:	012044f4 	movhi	r4,33043
81109fa4:	211a2a04 	addi	r4,r4,26792
81109fa8:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81109fac:	0001883a 	nop
81109fb0:	e037883a 	mov	sp,fp
81109fb4:	dfc00117 	ldw	ra,4(sp)
81109fb8:	df000017 	ldw	fp,0(sp)
81109fbc:	dec00204 	addi	sp,sp,8
81109fc0:	f800283a 	ret

81109fc4 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
81109fc4:	defffe04 	addi	sp,sp,-8
81109fc8:	dfc00115 	stw	ra,4(sp)
81109fcc:	df000015 	stw	fp,0(sp)
81109fd0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)");
81109fd4:	d0a05917 	ldw	r2,-32412(gp)
81109fd8:	100f883a 	mov	r7,r2
81109fdc:	018008c4 	movi	r6,35
81109fe0:	01400044 	movi	r5,1
81109fe4:	012044f4 	movhi	r4,33043
81109fe8:	211a3504 	addi	r4,r4,26836
81109fec:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
81109ff0:	0001883a 	nop
81109ff4:	e037883a 	mov	sp,fp
81109ff8:	dfc00117 	ldw	ra,4(sp)
81109ffc:	df000017 	ldw	fp,0(sp)
8110a000:	dec00204 	addi	sp,sp,8
8110a004:	f800283a 	ret

8110a008 <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110a008:	defffe04 	addi	sp,sp,-8
8110a00c:	dfc00115 	stw	ra,4(sp)
8110a010:	df000015 	stw	fp,0(sp)
8110a014:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)");
8110a018:	d0a05917 	ldw	r2,-32412(gp)
8110a01c:	100f883a 	mov	r7,r2
8110a020:	01800a04 	movi	r6,40
8110a024:	01400044 	movi	r5,1
8110a028:	012044f4 	movhi	r4,33043
8110a02c:	211a3e04 	addi	r4,r4,26872
8110a030:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a034:	0001883a 	nop
8110a038:	e037883a 	mov	sp,fp
8110a03c:	dfc00117 	ldw	ra,4(sp)
8110a040:	df000017 	ldw	fp,0(sp)
8110a044:	dec00204 	addi	sp,sp,8
8110a048:	f800283a 	ret

8110a04c <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110a04c:	defffe04 	addi	sp,sp,-8
8110a050:	dfc00115 	stw	ra,4(sp)
8110a054:	df000015 	stw	fp,0(sp)
8110a058:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)");
8110a05c:	d0a05917 	ldw	r2,-32412(gp)
8110a060:	100f883a 	mov	r7,r2
8110a064:	01800984 	movi	r6,38
8110a068:	01400044 	movi	r5,1
8110a06c:	012044f4 	movhi	r4,33043
8110a070:	211a4904 	addi	r4,r4,26916
8110a074:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a078:	0001883a 	nop
8110a07c:	e037883a 	mov	sp,fp
8110a080:	dfc00117 	ldw	ra,4(sp)
8110a084:	df000017 	ldw	fp,0(sp)
8110a088:	dec00204 	addi	sp,sp,8
8110a08c:	f800283a 	ret

8110a090 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110a090:	defffe04 	addi	sp,sp,-8
8110a094:	dfc00115 	stw	ra,4(sp)
8110a098:	df000015 	stw	fp,0(sp)
8110a09c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)");
8110a0a0:	d0a05917 	ldw	r2,-32412(gp)
8110a0a4:	100f883a 	mov	r7,r2
8110a0a8:	01800a04 	movi	r6,40
8110a0ac:	01400044 	movi	r5,1
8110a0b0:	012044f4 	movhi	r4,33043
8110a0b4:	211a5304 	addi	r4,r4,26956
8110a0b8:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110a0bc:	d0a05917 	ldw	r2,-32412(gp)
8110a0c0:	100f883a 	mov	r7,r2
8110a0c4:	01801104 	movi	r6,68
8110a0c8:	01400044 	movi	r5,1
8110a0cc:	012044f4 	movhi	r4,33043
8110a0d0:	211a5e04 	addi	r4,r4,27000
8110a0d4:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a0d8:	0001883a 	nop
8110a0dc:	e037883a 	mov	sp,fp
8110a0e0:	dfc00117 	ldw	ra,4(sp)
8110a0e4:	df000017 	ldw	fp,0(sp)
8110a0e8:	dec00204 	addi	sp,sp,8
8110a0ec:	f800283a 	ret

8110a0f0 <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110a0f0:	defffe04 	addi	sp,sp,-8
8110a0f4:	dfc00115 	stw	ra,4(sp)
8110a0f8:	df000015 	stw	fp,0(sp)
8110a0fc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)");
8110a100:	d0a05917 	ldw	r2,-32412(gp)
8110a104:	100f883a 	mov	r7,r2
8110a108:	018007c4 	movi	r6,31
8110a10c:	01400044 	movi	r5,1
8110a110:	012044f4 	movhi	r4,33043
8110a114:	211a7004 	addi	r4,r4,27072
8110a118:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110a11c:	d0a05917 	ldw	r2,-32412(gp)
8110a120:	100f883a 	mov	r7,r2
8110a124:	01801084 	movi	r6,66
8110a128:	01400044 	movi	r5,1
8110a12c:	012044f4 	movhi	r4,33043
8110a130:	211a7804 	addi	r4,r4,27104
8110a134:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a138:	0001883a 	nop
8110a13c:	e037883a 	mov	sp,fp
8110a140:	dfc00117 	ldw	ra,4(sp)
8110a144:	df000017 	ldw	fp,0(sp)
8110a148:	dec00204 	addi	sp,sp,8
8110a14c:	f800283a 	ret

8110a150 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110a150:	defffe04 	addi	sp,sp,-8
8110a154:	dfc00115 	stw	ra,4(sp)
8110a158:	df000015 	stw	fp,0(sp)
8110a15c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)");
8110a160:	d0a05917 	ldw	r2,-32412(gp)
8110a164:	100f883a 	mov	r7,r2
8110a168:	01800a84 	movi	r6,42
8110a16c:	01400044 	movi	r5,1
8110a170:	012044f4 	movhi	r4,33043
8110a174:	211a8904 	addi	r4,r4,27172
8110a178:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110a17c:	d0a05917 	ldw	r2,-32412(gp)
8110a180:	100f883a 	mov	r7,r2
8110a184:	01801184 	movi	r6,70
8110a188:	01400044 	movi	r5,1
8110a18c:	012044f4 	movhi	r4,33043
8110a190:	211a9404 	addi	r4,r4,27216
8110a194:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a198:	0001883a 	nop
8110a19c:	e037883a 	mov	sp,fp
8110a1a0:	dfc00117 	ldw	ra,4(sp)
8110a1a4:	df000017 	ldw	fp,0(sp)
8110a1a8:	dec00204 	addi	sp,sp,8
8110a1ac:	f800283a 	ret

8110a1b0 <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110a1b0:	defffe04 	addi	sp,sp,-8
8110a1b4:	dfc00115 	stw	ra,4(sp)
8110a1b8:	df000015 	stw	fp,0(sp)
8110a1bc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)");
8110a1c0:	d0a05917 	ldw	r2,-32412(gp)
8110a1c4:	100f883a 	mov	r7,r2
8110a1c8:	01800844 	movi	r6,33
8110a1cc:	01400044 	movi	r5,1
8110a1d0:	012044f4 	movhi	r4,33043
8110a1d4:	211aa604 	addi	r4,r4,27288
8110a1d8:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110a1dc:	d0a05917 	ldw	r2,-32412(gp)
8110a1e0:	100f883a 	mov	r7,r2
8110a1e4:	01801104 	movi	r6,68
8110a1e8:	01400044 	movi	r5,1
8110a1ec:	012044f4 	movhi	r4,33043
8110a1f0:	211aaf04 	addi	r4,r4,27324
8110a1f4:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a1f8:	0001883a 	nop
8110a1fc:	e037883a 	mov	sp,fp
8110a200:	dfc00117 	ldw	ra,4(sp)
8110a204:	df000017 	ldw	fp,0(sp)
8110a208:	dec00204 	addi	sp,sp,8
8110a20c:	f800283a 	ret

8110a210 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110a210:	defffe04 	addi	sp,sp,-8
8110a214:	dfc00115 	stw	ra,4(sp)
8110a218:	df000015 	stw	fp,0(sp)
8110a21c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)");
8110a220:	d0a05917 	ldw	r2,-32412(gp)
8110a224:	100f883a 	mov	r7,r2
8110a228:	01800944 	movi	r6,37
8110a22c:	01400044 	movi	r5,1
8110a230:	012044f4 	movhi	r4,33043
8110a234:	211ac104 	addi	r4,r4,27396
8110a238:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110a23c:	d0a05917 	ldw	r2,-32412(gp)
8110a240:	100f883a 	mov	r7,r2
8110a244:	01801044 	movi	r6,65
8110a248:	01400044 	movi	r5,1
8110a24c:	012044f4 	movhi	r4,33043
8110a250:	211acb04 	addi	r4,r4,27436
8110a254:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a258:	0001883a 	nop
8110a25c:	e037883a 	mov	sp,fp
8110a260:	dfc00117 	ldw	ra,4(sp)
8110a264:	df000017 	ldw	fp,0(sp)
8110a268:	dec00204 	addi	sp,sp,8
8110a26c:	f800283a 	ret

8110a270 <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110a270:	defffe04 	addi	sp,sp,-8
8110a274:	dfc00115 	stw	ra,4(sp)
8110a278:	df000015 	stw	fp,0(sp)
8110a27c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC");
8110a280:	d0a05917 	ldw	r2,-32412(gp)
8110a284:	100f883a 	mov	r7,r2
8110a288:	01800384 	movi	r6,14
8110a28c:	01400044 	movi	r5,1
8110a290:	012044f4 	movhi	r4,33043
8110a294:	211adc04 	addi	r4,r4,27504
8110a298:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a29c:	0001883a 	nop
8110a2a0:	e037883a 	mov	sp,fp
8110a2a4:	dfc00117 	ldw	ra,4(sp)
8110a2a8:	df000017 	ldw	fp,0(sp)
8110a2ac:	dec00204 	addi	sp,sp,8
8110a2b0:	f800283a 	ret

8110a2b4 <vFailInitialization>:


void vFailInitialization( void )
{
8110a2b4:	defffe04 	addi	sp,sp,-8
8110a2b8:	dfc00115 	stw	ra,4(sp)
8110a2bc:	df000015 	stw	fp,0(sp)
8110a2c0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization");
8110a2c4:	d0a05917 	ldw	r2,-32412(gp)
8110a2c8:	100f883a 	mov	r7,r2
8110a2cc:	018004c4 	movi	r6,19
8110a2d0:	01400044 	movi	r5,1
8110a2d4:	012044f4 	movhi	r4,33043
8110a2d8:	211ae004 	addi	r4,r4,27520
8110a2dc:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a2e0:	0001883a 	nop
8110a2e4:	e037883a 	mov	sp,fp
8110a2e8:	dfc00117 	ldw	ra,4(sp)
8110a2ec:	df000017 	ldw	fp,0(sp)
8110a2f0:	dec00204 	addi	sp,sp,8
8110a2f4:	f800283a 	ret

8110a2f8 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110a2f8:	defffe04 	addi	sp,sp,-8
8110a2fc:	dfc00115 	stw	ra,4(sp)
8110a300:	df000015 	stw	fp,0(sp)
8110a304:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask");
8110a308:	d0a05917 	ldw	r2,-32412(gp)
8110a30c:	100f883a 	mov	r7,r2
8110a310:	01800444 	movi	r6,17
8110a314:	01400044 	movi	r5,1
8110a318:	012044f4 	movhi	r4,33043
8110a31c:	211ae504 	addi	r4,r4,27540
8110a320:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a324:	0001883a 	nop
8110a328:	e037883a 	mov	sp,fp
8110a32c:	dfc00117 	ldw	ra,4(sp)
8110a330:	df000017 	ldw	fp,0(sp)
8110a334:	dec00204 	addi	sp,sp,8
8110a338:	f800283a 	ret

8110a33c <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110a33c:	defffe04 	addi	sp,sp,-8
8110a340:	dfc00115 	stw	ra,4(sp)
8110a344:	df000015 	stw	fp,0(sp)
8110a348:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate");
8110a34c:	d0a05917 	ldw	r2,-32412(gp)
8110a350:	100f883a 	mov	r7,r2
8110a354:	01800444 	movi	r6,17
8110a358:	01400044 	movi	r5,1
8110a35c:	012044f4 	movhi	r4,33043
8110a360:	211aea04 	addi	r4,r4,27560
8110a364:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a368:	0001883a 	nop
8110a36c:	e037883a 	mov	sp,fp
8110a370:	dfc00117 	ldw	ra,4(sp)
8110a374:	df000017 	ldw	fp,0(sp)
8110a378:	dec00204 	addi	sp,sp,8
8110a37c:	f800283a 	ret

8110a380 <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110a380:	defffe04 	addi	sp,sp,-8
8110a384:	dfc00115 	stw	ra,4(sp)
8110a388:	df000015 	stw	fp,0(sp)
8110a38c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization");
8110a390:	d0a05917 	ldw	r2,-32412(gp)
8110a394:	100f883a 	mov	r7,r2
8110a398:	01800644 	movi	r6,25
8110a39c:	01400044 	movi	r5,1
8110a3a0:	012044f4 	movhi	r4,33043
8110a3a4:	211aef04 	addi	r4,r4,27580
8110a3a8:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a3ac:	0001883a 	nop
8110a3b0:	e037883a 	mov	sp,fp
8110a3b4:	dfc00117 	ldw	ra,4(sp)
8110a3b8:	df000017 	ldw	fp,0(sp)
8110a3bc:	dec00204 	addi	sp,sp,8
8110a3c0:	f800283a 	ret

8110a3c4 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110a3c4:	defffe04 	addi	sp,sp,-8
8110a3c8:	dfc00115 	stw	ra,4(sp)
8110a3cc:	df000015 	stw	fp,0(sp)
8110a3d0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)");
8110a3d4:	d0a05917 	ldw	r2,-32412(gp)
8110a3d8:	100f883a 	mov	r7,r2
8110a3dc:	018009c4 	movi	r6,39
8110a3e0:	01400044 	movi	r5,1
8110a3e4:	012044f4 	movhi	r4,33043
8110a3e8:	211af604 	addi	r4,r4,27608
8110a3ec:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110a3f0:	d0a05917 	ldw	r2,-32412(gp)
8110a3f4:	100f883a 	mov	r7,r2
8110a3f8:	018008c4 	movi	r6,35
8110a3fc:	01400044 	movi	r5,1
8110a400:	012044f4 	movhi	r4,33043
8110a404:	211b0004 	addi	r4,r4,27648
8110a408:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a40c:	0001883a 	nop
8110a410:	e037883a 	mov	sp,fp
8110a414:	dfc00117 	ldw	ra,4(sp)
8110a418:	df000017 	ldw	fp,0(sp)
8110a41c:	dec00204 	addi	sp,sp,8
8110a420:	f800283a 	ret

8110a424 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110a424:	defffe04 	addi	sp,sp,-8
8110a428:	dfc00115 	stw	ra,4(sp)
8110a42c:	df000015 	stw	fp,0(sp)
8110a430:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)");
8110a434:	d0a05917 	ldw	r2,-32412(gp)
8110a438:	100f883a 	mov	r7,r2
8110a43c:	018009c4 	movi	r6,39
8110a440:	01400044 	movi	r5,1
8110a444:	012044f4 	movhi	r4,33043
8110a448:	211b0904 	addi	r4,r4,27684
8110a44c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110a450:	d0a05917 	ldw	r2,-32412(gp)
8110a454:	100f883a 	mov	r7,r2
8110a458:	018008c4 	movi	r6,35
8110a45c:	01400044 	movi	r5,1
8110a460:	012044f4 	movhi	r4,33043
8110a464:	211b0004 	addi	r4,r4,27648
8110a468:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a46c:	0001883a 	nop
8110a470:	e037883a 	mov	sp,fp
8110a474:	dfc00117 	ldw	ra,4(sp)
8110a478:	df000017 	ldw	fp,0(sp)
8110a47c:	dec00204 	addi	sp,sp,8
8110a480:	f800283a 	ret

8110a484 <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110a484:	defffe04 	addi	sp,sp,-8
8110a488:	dfc00115 	stw	ra,4(sp)
8110a48c:	df000015 	stw	fp,0(sp)
8110a490:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)");
8110a494:	d0a05917 	ldw	r2,-32412(gp)
8110a498:	100f883a 	mov	r7,r2
8110a49c:	01800a04 	movi	r6,40
8110a4a0:	01400044 	movi	r5,1
8110a4a4:	012044f4 	movhi	r4,33043
8110a4a8:	211b1304 	addi	r4,r4,27724
8110a4ac:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110a4b0:	d0a05917 	ldw	r2,-32412(gp)
8110a4b4:	100f883a 	mov	r7,r2
8110a4b8:	018008c4 	movi	r6,35
8110a4bc:	01400044 	movi	r5,1
8110a4c0:	012044f4 	movhi	r4,33043
8110a4c4:	211b0004 	addi	r4,r4,27648
8110a4c8:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a4cc:	0001883a 	nop
8110a4d0:	e037883a 	mov	sp,fp
8110a4d4:	dfc00117 	ldw	ra,4(sp)
8110a4d8:	df000017 	ldw	fp,0(sp)
8110a4dc:	dec00204 	addi	sp,sp,8
8110a4e0:	f800283a 	ret

8110a4e4 <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110a4e4:	defffe04 	addi	sp,sp,-8
8110a4e8:	dfc00115 	stw	ra,4(sp)
8110a4ec:	df000015 	stw	fp,0(sp)
8110a4f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)");
8110a4f4:	d0a05917 	ldw	r2,-32412(gp)
8110a4f8:	100f883a 	mov	r7,r2
8110a4fc:	01800984 	movi	r6,38
8110a500:	01400044 	movi	r5,1
8110a504:	012044f4 	movhi	r4,33043
8110a508:	211b1e04 	addi	r4,r4,27768
8110a50c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110a510:	d0a05917 	ldw	r2,-32412(gp)
8110a514:	100f883a 	mov	r7,r2
8110a518:	01801284 	movi	r6,74
8110a51c:	01400044 	movi	r5,1
8110a520:	012044f4 	movhi	r4,33043
8110a524:	211b2804 	addi	r4,r4,27808
8110a528:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a52c:	0001883a 	nop
8110a530:	e037883a 	mov	sp,fp
8110a534:	dfc00117 	ldw	ra,4(sp)
8110a538:	df000017 	ldw	fp,0(sp)
8110a53c:	dec00204 	addi	sp,sp,8
8110a540:	f800283a 	ret

8110a544 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110a544:	defffe04 	addi	sp,sp,-8
8110a548:	dfc00115 	stw	ra,4(sp)
8110a54c:	df000015 	stw	fp,0(sp)
8110a550:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)");
8110a554:	d0a05917 	ldw	r2,-32412(gp)
8110a558:	100f883a 	mov	r7,r2
8110a55c:	01800b44 	movi	r6,45
8110a560:	01400044 	movi	r5,1
8110a564:	012044f4 	movhi	r4,33043
8110a568:	211b3b04 	addi	r4,r4,27884
8110a56c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110a570:	d0a05917 	ldw	r2,-32412(gp)
8110a574:	100f883a 	mov	r7,r2
8110a578:	018010c4 	movi	r6,67
8110a57c:	01400044 	movi	r5,1
8110a580:	012044f4 	movhi	r4,33043
8110a584:	211b4704 	addi	r4,r4,27932
8110a588:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a58c:	0001883a 	nop
8110a590:	e037883a 	mov	sp,fp
8110a594:	dfc00117 	ldw	ra,4(sp)
8110a598:	df000017 	ldw	fp,0(sp)
8110a59c:	dec00204 	addi	sp,sp,8
8110a5a0:	f800283a 	ret

8110a5a4 <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110a5a4:	defffe04 	addi	sp,sp,-8
8110a5a8:	dfc00115 	stw	ra,4(sp)
8110a5ac:	df000015 	stw	fp,0(sp)
8110a5b0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)");
8110a5b4:	d0a05917 	ldw	r2,-32412(gp)
8110a5b8:	100f883a 	mov	r7,r2
8110a5bc:	01800ac4 	movi	r6,43
8110a5c0:	01400044 	movi	r5,1
8110a5c4:	012044f4 	movhi	r4,33043
8110a5c8:	211b5804 	addi	r4,r4,28000
8110a5cc:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110a5d0:	d0a05917 	ldw	r2,-32412(gp)
8110a5d4:	100f883a 	mov	r7,r2
8110a5d8:	01800fc4 	movi	r6,63
8110a5dc:	01400044 	movi	r5,1
8110a5e0:	012044f4 	movhi	r4,33043
8110a5e4:	211b6304 	addi	r4,r4,28044
8110a5e8:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a5ec:	0001883a 	nop
8110a5f0:	e037883a 	mov	sp,fp
8110a5f4:	dfc00117 	ldw	ra,4(sp)
8110a5f8:	df000017 	ldw	fp,0(sp)
8110a5fc:	dec00204 	addi	sp,sp,8
8110a600:	f800283a 	ret

8110a604 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110a604:	defffe04 	addi	sp,sp,-8
8110a608:	dfc00115 	stw	ra,4(sp)
8110a60c:	df000015 	stw	fp,0(sp)
8110a610:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)");
8110a614:	d0a05917 	ldw	r2,-32412(gp)
8110a618:	100f883a 	mov	r7,r2
8110a61c:	018008c4 	movi	r6,35
8110a620:	01400044 	movi	r5,1
8110a624:	012044f4 	movhi	r4,33043
8110a628:	211b7304 	addi	r4,r4,28108
8110a62c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110a630:	d0a05917 	ldw	r2,-32412(gp)
8110a634:	100f883a 	mov	r7,r2
8110a638:	01801684 	movi	r6,90
8110a63c:	01400044 	movi	r5,1
8110a640:	012044f4 	movhi	r4,33043
8110a644:	211b7c04 	addi	r4,r4,28144
8110a648:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a64c:	0001883a 	nop
8110a650:	e037883a 	mov	sp,fp
8110a654:	dfc00117 	ldw	ra,4(sp)
8110a658:	df000017 	ldw	fp,0(sp)
8110a65c:	dec00204 	addi	sp,sp,8
8110a660:	f800283a 	ret

8110a664 <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110a664:	defffe04 	addi	sp,sp,-8
8110a668:	dfc00115 	stw	ra,4(sp)
8110a66c:	df000015 	stw	fp,0(sp)
8110a670:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)");
8110a674:	d0a05917 	ldw	r2,-32412(gp)
8110a678:	100f883a 	mov	r7,r2
8110a67c:	01800804 	movi	r6,32
8110a680:	01400044 	movi	r5,1
8110a684:	012044f4 	movhi	r4,33043
8110a688:	211b9304 	addi	r4,r4,28236
8110a68c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110a690:	d0a05917 	ldw	r2,-32412(gp)
8110a694:	100f883a 	mov	r7,r2
8110a698:	01801784 	movi	r6,94
8110a69c:	01400044 	movi	r5,1
8110a6a0:	012044f4 	movhi	r4,33043
8110a6a4:	211b9c04 	addi	r4,r4,28272
8110a6a8:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a6ac:	0001883a 	nop
8110a6b0:	e037883a 	mov	sp,fp
8110a6b4:	dfc00117 	ldw	ra,4(sp)
8110a6b8:	df000017 	ldw	fp,0(sp)
8110a6bc:	dec00204 	addi	sp,sp,8
8110a6c0:	f800283a 	ret

8110a6c4 <vFailSendNack>:

void vFailSendNack( void )
{
8110a6c4:	defffe04 	addi	sp,sp,-8
8110a6c8:	dfc00115 	stw	ra,4(sp)
8110a6cc:	df000015 	stw	fp,0(sp)
8110a6d0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)");
8110a6d4:	d0a05917 	ldw	r2,-32412(gp)
8110a6d8:	100f883a 	mov	r7,r2
8110a6dc:	01800544 	movi	r6,21
8110a6e0:	01400044 	movi	r5,1
8110a6e4:	012044f4 	movhi	r4,33043
8110a6e8:	211bb404 	addi	r4,r4,28368
8110a6ec:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110a6f0:	d0a05917 	ldw	r2,-32412(gp)
8110a6f4:	100f883a 	mov	r7,r2
8110a6f8:	01800a84 	movi	r6,42
8110a6fc:	01400044 	movi	r5,1
8110a700:	012044f4 	movhi	r4,33043
8110a704:	211bba04 	addi	r4,r4,28392
8110a708:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a70c:	0001883a 	nop
8110a710:	e037883a 	mov	sp,fp
8110a714:	dfc00117 	ldw	ra,4(sp)
8110a718:	df000017 	ldw	fp,0(sp)
8110a71c:	dec00204 	addi	sp,sp,8
8110a720:	f800283a 	ret

8110a724 <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110a724:	defffe04 	addi	sp,sp,-8
8110a728:	dfc00115 	stw	ra,4(sp)
8110a72c:	df000015 	stw	fp,0(sp)
8110a730:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)");
8110a734:	d0a05917 	ldw	r2,-32412(gp)
8110a738:	100f883a 	mov	r7,r2
8110a73c:	01800884 	movi	r6,34
8110a740:	01400044 	movi	r5,1
8110a744:	012044f4 	movhi	r4,33043
8110a748:	211bc504 	addi	r4,r4,28436
8110a74c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110a750:	d0a05917 	ldw	r2,-32412(gp)
8110a754:	100f883a 	mov	r7,r2
8110a758:	01801584 	movi	r6,86
8110a75c:	01400044 	movi	r5,1
8110a760:	012044f4 	movhi	r4,33043
8110a764:	211bce04 	addi	r4,r4,28472
8110a768:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a76c:	0001883a 	nop
8110a770:	e037883a 	mov	sp,fp
8110a774:	dfc00117 	ldw	ra,4(sp)
8110a778:	df000017 	ldw	fp,0(sp)
8110a77c:	dec00204 	addi	sp,sp,8
8110a780:	f800283a 	ret

8110a784 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110a784:	defffe04 	addi	sp,sp,-8
8110a788:	dfc00115 	stw	ra,4(sp)
8110a78c:	df000015 	stw	fp,0(sp)
8110a790:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)");
8110a794:	d0a05917 	ldw	r2,-32412(gp)
8110a798:	100f883a 	mov	r7,r2
8110a79c:	018007c4 	movi	r6,31
8110a7a0:	01400044 	movi	r5,1
8110a7a4:	012044f4 	movhi	r4,33043
8110a7a8:	211be404 	addi	r4,r4,28560
8110a7ac:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110a7b0:	d0a05917 	ldw	r2,-32412(gp)
8110a7b4:	100f883a 	mov	r7,r2
8110a7b8:	018013c4 	movi	r6,79
8110a7bc:	01400044 	movi	r5,1
8110a7c0:	012044f4 	movhi	r4,33043
8110a7c4:	211bec04 	addi	r4,r4,28592
8110a7c8:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a7cc:	0001883a 	nop
8110a7d0:	e037883a 	mov	sp,fp
8110a7d4:	dfc00117 	ldw	ra,4(sp)
8110a7d8:	df000017 	ldw	fp,0(sp)
8110a7dc:	dec00204 	addi	sp,sp,8
8110a7e0:	f800283a 	ret

8110a7e4 <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110a7e4:	defffe04 	addi	sp,sp,-8
8110a7e8:	dfc00115 	stw	ra,4(sp)
8110a7ec:	df000015 	stw	fp,0(sp)
8110a7f0:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)");
8110a7f4:	d0a05917 	ldw	r2,-32412(gp)
8110a7f8:	100f883a 	mov	r7,r2
8110a7fc:	01800904 	movi	r6,36
8110a800:	01400044 	movi	r5,1
8110a804:	012044f4 	movhi	r4,33043
8110a808:	211c0004 	addi	r4,r4,28672
8110a80c:	110ca840 	call	8110ca84 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110a810:	d0a05917 	ldw	r2,-32412(gp)
8110a814:	100f883a 	mov	r7,r2
8110a818:	018015c4 	movi	r6,87
8110a81c:	01400044 	movi	r5,1
8110a820:	012044f4 	movhi	r4,33043
8110a824:	211c0a04 	addi	r4,r4,28712
8110a828:	110ca840 	call	8110ca84 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110a82c:	0001883a 	nop
8110a830:	e037883a 	mov	sp,fp
8110a834:	dfc00117 	ldw	ra,4(sp)
8110a838:	df000017 	ldw	fp,0(sp)
8110a83c:	dec00204 	addi	sp,sp,8
8110a840:	f800283a 	ret

8110a844 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110a844:	defffe04 	addi	sp,sp,-8
8110a848:	dfc00115 	stw	ra,4(sp)
8110a84c:	df000015 	stw	fp,0(sp)
8110a850:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate");
8110a854:	d0a05917 	ldw	r2,-32412(gp)
8110a858:	100f883a 	mov	r7,r2
8110a85c:	01800644 	movi	r6,25
8110a860:	01400044 	movi	r5,1
8110a864:	012044f4 	movhi	r4,33043
8110a868:	211c2004 	addi	r4,r4,28800
8110a86c:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110a870:	0001883a 	nop
8110a874:	e037883a 	mov	sp,fp
8110a878:	dfc00117 	ldw	ra,4(sp)
8110a87c:	df000017 	ldw	fp,0(sp)
8110a880:	dec00204 	addi	sp,sp,8
8110a884:	f800283a 	ret

8110a888 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110a888:	defffe04 	addi	sp,sp,-8
8110a88c:	dfc00115 	stw	ra,4(sp)
8110a890:	df000015 	stw	fp,0(sp)
8110a894:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110a898:	d0a05917 	ldw	r2,-32412(gp)
8110a89c:	100f883a 	mov	r7,r2
8110a8a0:	018006c4 	movi	r6,27
8110a8a4:	01400044 	movi	r5,1
8110a8a8:	012044f4 	movhi	r4,33043
8110a8ac:	211c2704 	addi	r4,r4,28828
8110a8b0:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110a8b4:	0001883a 	nop
8110a8b8:	e037883a 	mov	sp,fp
8110a8bc:	dfc00117 	ldw	ra,4(sp)
8110a8c0:	df000017 	ldw	fp,0(sp)
8110a8c4:	dec00204 	addi	sp,sp,8
8110a8c8:	f800283a 	ret

8110a8cc <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110a8cc:	defffe04 	addi	sp,sp,-8
8110a8d0:	dfc00115 	stw	ra,4(sp)
8110a8d4:	df000015 	stw	fp,0(sp)
8110a8d8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110a8dc:	d0a05917 	ldw	r2,-32412(gp)
8110a8e0:	100f883a 	mov	r7,r2
8110a8e4:	018006c4 	movi	r6,27
8110a8e8:	01400044 	movi	r5,1
8110a8ec:	012044f4 	movhi	r4,33043
8110a8f0:	211c2704 	addi	r4,r4,28828
8110a8f4:	110ca840 	call	8110ca84 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110a8f8:	0001883a 	nop
8110a8fc:	e037883a 	mov	sp,fp
8110a900:	dfc00117 	ldw	ra,4(sp)
8110a904:	df000017 	ldw	fp,0(sp)
8110a908:	dec00204 	addi	sp,sp,8
8110a90c:	f800283a 	ret

8110a910 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110a910:	defffe04 	addi	sp,sp,-8
8110a914:	dfc00115 	stw	ra,4(sp)
8110a918:	df000015 	stw	fp,0(sp)
8110a91c:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110a920:	01403fc4 	movi	r5,255
8110a924:	0009883a 	mov	r4,zero
8110a928:	110570c0 	call	8110570c <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110a92c:	01400834 	movhi	r5,32
8110a930:	297fffc4 	addi	r5,r5,-1
8110a934:	0009883a 	mov	r4,zero
8110a938:	11057840 	call	81105784 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110a93c:	01400074 	movhi	r5,1
8110a940:	01000044 	movi	r4,1
8110a944:	11057840 	call	81105784 <bSetPainelLeds>

	/* Release ETH Reset */
	vEthReleaseReset();
8110a948:	1104f980 	call	81104f98 <vEthReleaseReset>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110a94c:	0009883a 	mov	r4,zero
8110a950:	11063100 	call	81106310 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110a954:	0009883a 	mov	r4,zero
8110a958:	11063d80 	call	811063d8 <bSSDisplayUpdate>

}
8110a95c:	0001883a 	nop
8110a960:	e037883a 	mov	sp,fp
8110a964:	dfc00117 	ldw	ra,4(sp)
8110a968:	df000017 	ldw	fp,0(sp)
8110a96c:	dec00204 	addi	sp,sp,8
8110a970:	f800283a 	ret

8110a974 <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110a974:	defffd04 	addi	sp,sp,-12
8110a978:	df000215 	stw	fp,8(sp)
8110a97c:	df000204 	addi	fp,sp,8
8110a980:	e13ffe15 	stw	r4,-8(fp)
8110a984:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110a988:	00800044 	movi	r2,1
}
8110a98c:	e037883a 	mov	sp,fp
8110a990:	df000017 	ldw	fp,0(sp)
8110a994:	dec00104 	addi	sp,sp,4
8110a998:	f800283a 	ret

8110a99c <bLogWriteETH>:

bool bLogWriteETH ( const char * cDataIn )
{
8110a99c:	defffe04 	addi	sp,sp,-8
8110a9a0:	df000115 	stw	fp,4(sp)
8110a9a4:	df000104 	addi	fp,sp,4
8110a9a8:	e13fff15 	stw	r4,-4(fp)

	return TRUE;
8110a9ac:	00800044 	movi	r2,1
}
8110a9b0:	e037883a 	mov	sp,fp
8110a9b4:	df000017 	ldw	fp,0(sp)
8110a9b8:	dec00104 	addi	sp,sp,4
8110a9bc:	f800283a 	ret

8110a9c0 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110a9c0:	defffe04 	addi	sp,sp,-8
8110a9c4:	dfc00115 	stw	ra,4(sp)
8110a9c8:	df000015 	stw	fp,0(sp)
8110a9cc:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110a9d0:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
}
8110a9d4:	e037883a 	mov	sp,fp
8110a9d8:	dfc00117 	ldw	ra,4(sp)
8110a9dc:	df000017 	ldw	fp,0(sp)
8110a9e0:	dec00204 	addi	sp,sp,8
8110a9e4:	f800283a 	ret

8110a9e8 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110a9e8:	defffe04 	addi	sp,sp,-8
8110a9ec:	dfc00115 	stw	ra,4(sp)
8110a9f0:	df000015 	stw	fp,0(sp)
8110a9f4:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110a9f8:	112e2180 	call	8112e218 <alt_up_sd_card_is_FAT16>
}
8110a9fc:	e037883a 	mov	sp,fp
8110aa00:	dfc00117 	ldw	ra,4(sp)
8110aa04:	df000017 	ldw	fp,0(sp)
8110aa08:	dec00204 	addi	sp,sp,8
8110aa0c:	f800283a 	ret

8110aa10 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110aa10:	defffd04 	addi	sp,sp,-12
8110aa14:	dfc00215 	stw	ra,8(sp)
8110aa18:	df000115 	stw	fp,4(sp)
8110aa1c:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110aa20:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110aa24:	d0206715 	stw	zero,-32356(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110aa28:	012044f4 	movhi	r4,33043
8110aa2c:	211c2e04 	addi	r4,r4,28856
8110aa30:	112e0980 	call	8112e098 <alt_up_sd_card_open_dev>
8110aa34:	d0a06715 	stw	r2,-32356(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110aa38:	d0a06717 	ldw	r2,-32356(gp)
8110aa3c:	10002226 	beq	r2,zero,8110aac8 <bInitializeSDCard+0xb8>

		bSucess = bSDcardIsPresent();
8110aa40:	110a9c00 	call	8110a9c0 <bSDcardIsPresent>
8110aa44:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110aa48:	e0bfff17 	ldw	r2,-4(fp)
8110aa4c:	10001626 	beq	r2,zero,8110aaa8 <bInitializeSDCard+0x98>
			bSucess = bSDcardFAT16Check();
8110aa50:	110a9e80 	call	8110a9e8 <bSDcardFAT16Check>
8110aa54:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110aa58:	e0bfff17 	ldw	r2,-4(fp)
8110aa5c:	10000a26 	beq	r2,zero,8110aa88 <bInitializeSDCard+0x78>
				xSdHandle.connected = TRUE;
8110aa60:	00800044 	movi	r2,1
8110aa64:	d0a06615 	stw	r2,-32360(gp)
				debug(fp, "SD is up.\r\n");
8110aa68:	d0a05917 	ldw	r2,-32412(gp)
8110aa6c:	100f883a 	mov	r7,r2
8110aa70:	018002c4 	movi	r6,11
8110aa74:	01400044 	movi	r5,1
8110aa78:	012044f4 	movhi	r4,33043
8110aa7c:	211c3904 	addi	r4,r4,28900
8110aa80:	110ca840 	call	8110ca84 <fwrite>
8110aa84:	00001806 	br	8110aae8 <bInitializeSDCard+0xd8>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110aa88:	d0a05917 	ldw	r2,-32412(gp)
8110aa8c:	100f883a 	mov	r7,r2
8110aa90:	01800984 	movi	r6,38
8110aa94:	01400044 	movi	r5,1
8110aa98:	012044f4 	movhi	r4,33043
8110aa9c:	211c3c04 	addi	r4,r4,28912
8110aaa0:	110ca840 	call	8110ca84 <fwrite>
8110aaa4:	00001006 	br	8110aae8 <bInitializeSDCard+0xd8>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110aaa8:	d0a05917 	ldw	r2,-32412(gp)
8110aaac:	100f883a 	mov	r7,r2
8110aab0:	01800744 	movi	r6,29
8110aab4:	01400044 	movi	r5,1
8110aab8:	012044f4 	movhi	r4,33043
8110aabc:	211c4604 	addi	r4,r4,28952
8110aac0:	110ca840 	call	8110ca84 <fwrite>
8110aac4:	00000806 	br	8110aae8 <bInitializeSDCard+0xd8>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110aac8:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110aacc:	d0a05917 	ldw	r2,-32412(gp)
8110aad0:	100f883a 	mov	r7,r2
8110aad4:	018008c4 	movi	r6,35
8110aad8:	01400044 	movi	r5,1
8110aadc:	012044f4 	movhi	r4,33043
8110aae0:	211c4e04 	addi	r4,r4,28984
8110aae4:	110ca840 	call	8110ca84 <fwrite>
	}

	return bSucess;
8110aae8:	e0bfff17 	ldw	r2,-4(fp)
}
8110aaec:	e037883a 	mov	sp,fp
8110aaf0:	dfc00117 	ldw	ra,4(sp)
8110aaf4:	df000017 	ldw	fp,0(sp)
8110aaf8:	dec00204 	addi	sp,sp,8
8110aafc:	f800283a 	ret

8110ab00 <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110ab00:	defffd04 	addi	sp,sp,-12
8110ab04:	dfc00215 	stw	ra,8(sp)
8110ab08:	df000115 	stw	fp,4(sp)
8110ab0c:	df000104 	addi	fp,sp,4
8110ab10:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
8110ab14:	000b883a 	mov	r5,zero
8110ab18:	e13fff17 	ldw	r4,-4(fp)
8110ab1c:	112e70c0 	call	8112e70c <alt_up_sd_card_fopen>
}
8110ab20:	e037883a 	mov	sp,fp
8110ab24:	dfc00117 	ldw	ra,4(sp)
8110ab28:	df000017 	ldw	fp,0(sp)
8110ab2c:	dec00204 	addi	sp,sp,8
8110ab30:	f800283a 	ret

8110ab34 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
8110ab34:	defffd04 	addi	sp,sp,-12
8110ab38:	dfc00215 	stw	ra,8(sp)
8110ab3c:	df000115 	stw	fp,4(sp)
8110ab40:	df000104 	addi	fp,sp,4
8110ab44:	2005883a 	mov	r2,r4
8110ab48:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
8110ab4c:	e0bfff0f 	ldh	r2,-4(fp)
8110ab50:	1009883a 	mov	r4,r2
8110ab54:	112f5300 	call	8112f530 <alt_up_sd_card_fclose>
}
8110ab58:	e037883a 	mov	sp,fp
8110ab5c:	dfc00117 	ldw	ra,4(sp)
8110ab60:	df000017 	ldw	fp,0(sp)
8110ab64:	dec00204 	addi	sp,sp,8
8110ab68:	f800283a 	ret

8110ab6c <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
8110ab6c:	defffd04 	addi	sp,sp,-12
8110ab70:	dfc00215 	stw	ra,8(sp)
8110ab74:	df000115 	stw	fp,4(sp)
8110ab78:	df000104 	addi	fp,sp,4
8110ab7c:	2005883a 	mov	r2,r4
8110ab80:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
8110ab84:	e0bfff0f 	ldh	r2,-4(fp)
8110ab88:	1009883a 	mov	r4,r2
8110ab8c:	112eb980 	call	8112eb98 <alt_up_sd_card_read>
}
8110ab90:	e037883a 	mov	sp,fp
8110ab94:	dfc00117 	ldw	ra,4(sp)
8110ab98:	df000017 	ldw	fp,0(sp)
8110ab9c:	dec00204 	addi	sp,sp,8
8110aba0:	f800283a 	ret

8110aba4 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
8110aba4:	deffff04 	addi	sp,sp,-4
8110aba8:	df000015 	stw	fp,0(sp)
8110abac:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110abb0:	00800044 	movi	r2,1
}
8110abb4:	e037883a 	mov	sp,fp
8110abb8:	df000017 	ldw	fp,0(sp)
8110abbc:	dec00104 	addi	sp,sp,4
8110abc0:	f800283a 	ret

8110abc4 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110abc4:	defffc04 	addi	sp,sp,-16
8110abc8:	df000315 	stw	fp,12(sp)
8110abcc:	df000304 	addi	fp,sp,12
8110abd0:	e13ffd15 	stw	r4,-12(fp)
8110abd4:	e17ffe15 	stw	r5,-8(fp)
8110abd8:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110abdc:	e0bffe17 	ldw	r2,-8(fp)
8110abe0:	1085883a 	add	r2,r2,r2
8110abe4:	1085883a 	add	r2,r2,r2
8110abe8:	1007883a 	mov	r3,r2
8110abec:	e0bffd17 	ldw	r2,-12(fp)
8110abf0:	1885883a 	add	r2,r3,r2
8110abf4:	1007883a 	mov	r3,r2
8110abf8:	e0bfff17 	ldw	r2,-4(fp)
8110abfc:	18800035 	stwio	r2,0(r3)
	return 1;
8110ac00:	00800044 	movi	r2,1

}
8110ac04:	e037883a 	mov	sp,fp
8110ac08:	df000017 	ldw	fp,0(sp)
8110ac0c:	dec00104 	addi	sp,sp,4
8110ac10:	f800283a 	ret

8110ac14 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110ac14:	defffc04 	addi	sp,sp,-16
8110ac18:	df000315 	stw	fp,12(sp)
8110ac1c:	df000304 	addi	fp,sp,12
8110ac20:	e13ffd15 	stw	r4,-12(fp)
8110ac24:	e17ffe15 	stw	r5,-8(fp)
8110ac28:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110ac2c:	e0bffe17 	ldw	r2,-8(fp)
8110ac30:	1085883a 	add	r2,r2,r2
8110ac34:	1085883a 	add	r2,r2,r2
8110ac38:	1007883a 	mov	r3,r2
8110ac3c:	e0bffd17 	ldw	r2,-12(fp)
8110ac40:	1885883a 	add	r2,r3,r2
8110ac44:	10c00037 	ldwio	r3,0(r2)
8110ac48:	e0bfff17 	ldw	r2,-4(fp)
8110ac4c:	10c00015 	stw	r3,0(r2)
	return 1;
8110ac50:	00800044 	movi	r2,1

}
8110ac54:	e037883a 	mov	sp,fp
8110ac58:	df000017 	ldw	fp,0(sp)
8110ac5c:	dec00104 	addi	sp,sp,4
8110ac60:	f800283a 	ret

8110ac64 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110ac64:	defffa04 	addi	sp,sp,-24
8110ac68:	dfc00515 	stw	ra,20(sp)
8110ac6c:	df000415 	stw	fp,16(sp)
8110ac70:	df000404 	addi	fp,sp,16
8110ac74:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110ac78:	e0bfff17 	ldw	r2,-4(fp)
8110ac7c:	1005d1ba 	srai	r2,r2,6
8110ac80:	1080004c 	andi	r2,r2,1
8110ac84:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110ac88:	e0bfff17 	ldw	r2,-4(fp)
8110ac8c:	1005d17a 	srai	r2,r2,5
8110ac90:	1080004c 	andi	r2,r2,1
8110ac94:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110ac98:	e0bfff17 	ldw	r2,-4(fp)
8110ac9c:	1005d13a 	srai	r2,r2,4
8110aca0:	1080004c 	andi	r2,r2,1
8110aca4:	e0bffe15 	stw	r2,-8(fp)

	printf("-------- link status \n");
8110aca8:	012044f4 	movhi	r4,33043
8110acac:	211c5704 	addi	r4,r4,29020
8110acb0:	110d89c0 	call	8110d89c <puts>
	printf("Link started    : %s \n", (started == 1) ? "S" : "N");
8110acb4:	e0bffc17 	ldw	r2,-16(fp)
8110acb8:	10800058 	cmpnei	r2,r2,1
8110acbc:	1000031e 	bne	r2,zero,8110accc <_print_codec_status+0x68>
8110acc0:	00a044f4 	movhi	r2,33043
8110acc4:	109c5d04 	addi	r2,r2,29044
8110acc8:	00000206 	br	8110acd4 <_print_codec_status+0x70>
8110accc:	00a044f4 	movhi	r2,33043
8110acd0:	109c5e04 	addi	r2,r2,29048
8110acd4:	100b883a 	mov	r5,r2
8110acd8:	012044f4 	movhi	r4,33043
8110acdc:	211c5f04 	addi	r4,r4,29052
8110ace0:	110d7800 	call	8110d780 <printf>
	printf("Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110ace4:	e0bffd17 	ldw	r2,-12(fp)
8110ace8:	10800058 	cmpnei	r2,r2,1
8110acec:	1000031e 	bne	r2,zero,8110acfc <_print_codec_status+0x98>
8110acf0:	00a044f4 	movhi	r2,33043
8110acf4:	109c5d04 	addi	r2,r2,29044
8110acf8:	00000206 	br	8110ad04 <_print_codec_status+0xa0>
8110acfc:	00a044f4 	movhi	r2,33043
8110ad00:	109c5e04 	addi	r2,r2,29048
8110ad04:	100b883a 	mov	r5,r2
8110ad08:	012044f4 	movhi	r4,33043
8110ad0c:	211c6504 	addi	r4,r4,29076
8110ad10:	110d7800 	call	8110d780 <printf>
	printf("Link running    : %s \n", (running == 1) ? "S" : "N");
8110ad14:	e0bffe17 	ldw	r2,-8(fp)
8110ad18:	10800058 	cmpnei	r2,r2,1
8110ad1c:	1000031e 	bne	r2,zero,8110ad2c <_print_codec_status+0xc8>
8110ad20:	00a044f4 	movhi	r2,33043
8110ad24:	109c5d04 	addi	r2,r2,29044
8110ad28:	00000206 	br	8110ad34 <_print_codec_status+0xd0>
8110ad2c:	00a044f4 	movhi	r2,33043
8110ad30:	109c5e04 	addi	r2,r2,29048
8110ad34:	100b883a 	mov	r5,r2
8110ad38:	012044f4 	movhi	r4,33043
8110ad3c:	211c6b04 	addi	r4,r4,29100
8110ad40:	110d7800 	call	8110d780 <printf>
	printf("--------  \n");
8110ad44:	012044f4 	movhi	r4,33043
8110ad48:	211c7104 	addi	r4,r4,29124
8110ad4c:	110d89c0 	call	8110d89c <puts>
}
8110ad50:	0001883a 	nop
8110ad54:	e037883a 	mov	sp,fp
8110ad58:	dfc00117 	ldw	ra,4(sp)
8110ad5c:	df000017 	ldw	fp,0(sp)
8110ad60:	dec00204 	addi	sp,sp,8
8110ad64:	f800283a 	ret

8110ad68 <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110ad68:	defffb04 	addi	sp,sp,-20
8110ad6c:	df000415 	stw	fp,16(sp)
8110ad70:	df000404 	addi	fp,sp,16
8110ad74:	e13ffc15 	stw	r4,-16(fp)
8110ad78:	e17ffd15 	stw	r5,-12(fp)
8110ad7c:	e1bffe15 	stw	r6,-8(fp)
8110ad80:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110ad84:	e0bffc17 	ldw	r2,-16(fp)
8110ad88:	1005d1ba 	srai	r2,r2,6
8110ad8c:	10c0004c 	andi	r3,r2,1
8110ad90:	e0bffd17 	ldw	r2,-12(fp)
8110ad94:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110ad98:	e0bffc17 	ldw	r2,-16(fp)
8110ad9c:	1005d17a 	srai	r2,r2,5
8110ada0:	10c0004c 	andi	r3,r2,1
8110ada4:	e0bffe17 	ldw	r2,-8(fp)
8110ada8:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110adac:	e0bffc17 	ldw	r2,-16(fp)
8110adb0:	1005d13a 	srai	r2,r2,4
8110adb4:	10c0004c 	andi	r3,r2,1
8110adb8:	e0bfff17 	ldw	r2,-4(fp)
8110adbc:	10c00015 	stw	r3,0(r2)
}
8110adc0:	0001883a 	nop
8110adc4:	e037883a 	mov	sp,fp
8110adc8:	df000017 	ldw	fp,0(sp)
8110adcc:	dec00104 	addi	sp,sp,4
8110add0:	f800283a 	ret

8110add4 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
INT8U aatoh(INT8U *buffer) {
8110add4:	defffc04 	addi	sp,sp,-16
8110add8:	df000315 	stw	fp,12(sp)
8110addc:	df000304 	addi	fp,sp,12
8110ade0:	e13fff15 	stw	r4,-4(fp)
	INT8U* a;
	INT8U v;
	a = buffer;
8110ade4:	e0bfff17 	ldw	r2,-4(fp)
8110ade8:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110adec:	e0bffd17 	ldw	r2,-12(fp)
8110adf0:	10c00003 	ldbu	r3,0(r2)
8110adf4:	e0bffd17 	ldw	r2,-12(fp)
8110adf8:	10800003 	ldbu	r2,0(r2)
8110adfc:	10803fcc 	andi	r2,r2,255
8110ae00:	10800eb0 	cmpltui	r2,r2,58
8110ae04:	1000021e 	bne	r2,zero,8110ae10 <aatoh+0x3c>
8110ae08:	00800dc4 	movi	r2,55
8110ae0c:	00000106 	br	8110ae14 <aatoh+0x40>
8110ae10:	00800c04 	movi	r2,48
8110ae14:	1885c83a 	sub	r2,r3,r2
8110ae18:	1004913a 	slli	r2,r2,4
8110ae1c:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110ae20:	e0bffd17 	ldw	r2,-12(fp)
8110ae24:	10800044 	addi	r2,r2,1
8110ae28:	10c00003 	ldbu	r3,0(r2)
8110ae2c:	e0bffd17 	ldw	r2,-12(fp)
8110ae30:	10800044 	addi	r2,r2,1
8110ae34:	10800003 	ldbu	r2,0(r2)
 */
INT8U aatoh(INT8U *buffer) {
	INT8U* a;
	INT8U v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110ae38:	10803fcc 	andi	r2,r2,255
8110ae3c:	10800eb0 	cmpltui	r2,r2,58
8110ae40:	1000021e 	bne	r2,zero,8110ae4c <aatoh+0x78>
8110ae44:	00800dc4 	movi	r2,55
8110ae48:	00000106 	br	8110ae50 <aatoh+0x7c>
8110ae4c:	00800c04 	movi	r2,48
8110ae50:	1885c83a 	sub	r2,r3,r2
8110ae54:	2085883a 	add	r2,r4,r2
8110ae58:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110ae5c:	e0bffe03 	ldbu	r2,-8(fp)
}
8110ae60:	e037883a 	mov	sp,fp
8110ae64:	df000017 	ldw	fp,0(sp)
8110ae68:	dec00104 	addi	sp,sp,4
8110ae6c:	f800283a 	ret

8110ae70 <Verif_Error>:
 * *
 * @retval int
 *
 */

INT8U Verif_Error(INT8U error_code) {
8110ae70:	defffd04 	addi	sp,sp,-12
8110ae74:	dfc00215 	stw	ra,8(sp)
8110ae78:	df000115 	stw	fp,4(sp)
8110ae7c:	df000104 	addi	fp,sp,4
8110ae80:	2005883a 	mov	r2,r4
8110ae84:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110ae88:	e0bfff03 	ldbu	r2,-4(fp)
8110ae8c:	1000051e 	bne	r2,zero,8110aea4 <Verif_Error+0x34>
		printf("ERROR\n\r");
8110ae90:	012044f4 	movhi	r4,33043
8110ae94:	211c7404 	addi	r4,r4,29136
8110ae98:	110d7800 	call	8110d780 <printf>
		return 0;
8110ae9c:	0005883a 	mov	r2,zero
8110aea0:	00000106 	br	8110aea8 <Verif_Error+0x38>
	} else
		return 1;
8110aea4:	00800044 	movi	r2,1
}
8110aea8:	e037883a 	mov	sp,fp
8110aeac:	dfc00117 	ldw	ra,4(sp)
8110aeb0:	df000017 	ldw	fp,0(sp)
8110aeb4:	dec00204 	addi	sp,sp,8
8110aeb8:	f800283a 	ret

8110aebc <toInt>:
 * *
 * @retval int
 *
 */

INT8U toInt(INT8U ascii) {
8110aebc:	defffe04 	addi	sp,sp,-8
8110aec0:	df000115 	stw	fp,4(sp)
8110aec4:	df000104 	addi	fp,sp,4
8110aec8:	2005883a 	mov	r2,r4
8110aecc:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110aed0:	e0bfff03 	ldbu	r2,-4(fp)
8110aed4:	10bff404 	addi	r2,r2,-48
8110aed8:	e037883a 	mov	sp,fp
8110aedc:	df000017 	ldw	fp,0(sp)
8110aee0:	dec00104 	addi	sp,sp,4
8110aee4:	f800283a 	ret

8110aee8 <__divsf3>:
8110aee8:	defff504 	addi	sp,sp,-44
8110aeec:	200cd5fa 	srli	r6,r4,23
8110aef0:	dcc00415 	stw	r19,16(sp)
8110aef4:	2026d7fa 	srli	r19,r4,31
8110aef8:	00c02034 	movhi	r3,128
8110aefc:	dd800715 	stw	r22,28(sp)
8110af00:	dd000515 	stw	r20,20(sp)
8110af04:	dc800315 	stw	r18,12(sp)
8110af08:	18ffffc4 	addi	r3,r3,-1
8110af0c:	dfc00a15 	stw	ra,40(sp)
8110af10:	df000915 	stw	fp,36(sp)
8110af14:	ddc00815 	stw	r23,32(sp)
8110af18:	dd400615 	stw	r21,24(sp)
8110af1c:	dc400215 	stw	r17,8(sp)
8110af20:	dc000115 	stw	r16,4(sp)
8110af24:	35003fcc 	andi	r20,r6,255
8110af28:	1924703a 	and	r18,r3,r4
8110af2c:	9d803fcc 	andi	r22,r19,255
8110af30:	a0005226 	beq	r20,zero,8110b07c <__divsf3+0x194>
8110af34:	00803fc4 	movi	r2,255
8110af38:	a0802e26 	beq	r20,r2,8110aff4 <__divsf3+0x10c>
8110af3c:	91002034 	orhi	r4,r18,128
8110af40:	202490fa 	slli	r18,r4,3
8110af44:	a53fe044 	addi	r20,r20,-127
8110af48:	0021883a 	mov	r16,zero
8110af4c:	002f883a 	mov	r23,zero
8110af50:	280cd5fa 	srli	r6,r5,23
8110af54:	282ad7fa 	srli	r21,r5,31
8110af58:	00c02034 	movhi	r3,128
8110af5c:	18ffffc4 	addi	r3,r3,-1
8110af60:	31803fcc 	andi	r6,r6,255
8110af64:	1962703a 	and	r17,r3,r5
8110af68:	af003fcc 	andi	fp,r21,255
8110af6c:	30004a26 	beq	r6,zero,8110b098 <__divsf3+0x1b0>
8110af70:	00803fc4 	movi	r2,255
8110af74:	30804526 	beq	r6,r2,8110b08c <__divsf3+0x1a4>
8110af78:	89402034 	orhi	r5,r17,128
8110af7c:	282290fa 	slli	r17,r5,3
8110af80:	31bfe044 	addi	r6,r6,-127
8110af84:	000b883a 	mov	r5,zero
8110af88:	2c20b03a 	or	r16,r5,r16
8110af8c:	802090ba 	slli	r16,r16,2
8110af90:	00a04474 	movhi	r2,33041
8110af94:	10abed04 	addi	r2,r2,-20556
8110af98:	80a1883a 	add	r16,r16,r2
8110af9c:	81000017 	ldw	r4,0(r16)
8110afa0:	9d46f03a 	xor	r3,r19,r21
8110afa4:	180f883a 	mov	r7,r3
8110afa8:	18803fcc 	andi	r2,r3,255
8110afac:	a18dc83a 	sub	r6,r20,r6
8110afb0:	2000683a 	jmp	r4
8110afb4:	8110b198 	cmpnei	r4,r16,17094
8110afb8:	8110b01c 	xori	r4,r16,17088
8110afbc:	8110b18c 	andi	r4,r16,17094
8110afc0:	8110b008 	cmpgei	r4,r16,17088
8110afc4:	8110b18c 	andi	r4,r16,17094
8110afc8:	8110b164 	muli	r4,r16,17093
8110afcc:	8110b18c 	andi	r4,r16,17094
8110afd0:	8110b008 	cmpgei	r4,r16,17088
8110afd4:	8110b01c 	xori	r4,r16,17088
8110afd8:	8110b01c 	xori	r4,r16,17088
8110afdc:	8110b164 	muli	r4,r16,17093
8110afe0:	8110b008 	cmpgei	r4,r16,17088
8110afe4:	8110b278 	rdprs	r4,r16,17097
8110afe8:	8110b278 	rdprs	r4,r16,17097
8110afec:	8110b278 	rdprs	r4,r16,17097
8110aff0:	8110b22c 	andhi	r4,r16,17096
8110aff4:	9000581e 	bne	r18,zero,8110b158 <__divsf3+0x270>
8110aff8:	04000204 	movi	r16,8
8110affc:	05c00084 	movi	r23,2
8110b000:	003fd306 	br	8110af50 <__reset+0xfb0eaf50>
8110b004:	0023883a 	mov	r17,zero
8110b008:	e02d883a 	mov	r22,fp
8110b00c:	282f883a 	mov	r23,r5
8110b010:	00800084 	movi	r2,2
8110b014:	b8808f1e 	bne	r23,r2,8110b254 <__divsf3+0x36c>
8110b018:	b005883a 	mov	r2,r22
8110b01c:	11c0004c 	andi	r7,r2,1
8110b020:	013fffc4 	movi	r4,-1
8110b024:	000d883a 	mov	r6,zero
8110b028:	21003fcc 	andi	r4,r4,255
8110b02c:	200895fa 	slli	r4,r4,23
8110b030:	38803fcc 	andi	r2,r7,255
8110b034:	00c02034 	movhi	r3,128
8110b038:	100497fa 	slli	r2,r2,31
8110b03c:	18ffffc4 	addi	r3,r3,-1
8110b040:	30c6703a 	and	r3,r6,r3
8110b044:	1906b03a 	or	r3,r3,r4
8110b048:	1884b03a 	or	r2,r3,r2
8110b04c:	dfc00a17 	ldw	ra,40(sp)
8110b050:	df000917 	ldw	fp,36(sp)
8110b054:	ddc00817 	ldw	r23,32(sp)
8110b058:	dd800717 	ldw	r22,28(sp)
8110b05c:	dd400617 	ldw	r21,24(sp)
8110b060:	dd000517 	ldw	r20,20(sp)
8110b064:	dcc00417 	ldw	r19,16(sp)
8110b068:	dc800317 	ldw	r18,12(sp)
8110b06c:	dc400217 	ldw	r17,8(sp)
8110b070:	dc000117 	ldw	r16,4(sp)
8110b074:	dec00b04 	addi	sp,sp,44
8110b078:	f800283a 	ret
8110b07c:	90002b1e 	bne	r18,zero,8110b12c <__divsf3+0x244>
8110b080:	04000104 	movi	r16,4
8110b084:	05c00044 	movi	r23,1
8110b088:	003fb106 	br	8110af50 <__reset+0xfb0eaf50>
8110b08c:	8800251e 	bne	r17,zero,8110b124 <__divsf3+0x23c>
8110b090:	01400084 	movi	r5,2
8110b094:	00000206 	br	8110b0a0 <__divsf3+0x1b8>
8110b098:	88001a1e 	bne	r17,zero,8110b104 <__divsf3+0x21c>
8110b09c:	01400044 	movi	r5,1
8110b0a0:	8160b03a 	or	r16,r16,r5
8110b0a4:	802090ba 	slli	r16,r16,2
8110b0a8:	00e04474 	movhi	r3,33041
8110b0ac:	18ec3104 	addi	r3,r3,-20284
8110b0b0:	80e1883a 	add	r16,r16,r3
8110b0b4:	80c00017 	ldw	r3,0(r16)
8110b0b8:	9d44f03a 	xor	r2,r19,r21
8110b0bc:	a18dc83a 	sub	r6,r20,r6
8110b0c0:	1800683a 	jmp	r3
8110b0c4:	8110b01c 	xori	r4,r16,17088
8110b0c8:	8110b01c 	xori	r4,r16,17088
8110b0cc:	8110b268 	cmpgeui	r4,r16,17097
8110b0d0:	8110b004 	addi	r4,r16,17088
8110b0d4:	8110b268 	cmpgeui	r4,r16,17097
8110b0d8:	8110b164 	muli	r4,r16,17093
8110b0dc:	8110b268 	cmpgeui	r4,r16,17097
8110b0e0:	8110b004 	addi	r4,r16,17088
8110b0e4:	8110b01c 	xori	r4,r16,17088
8110b0e8:	8110b01c 	xori	r4,r16,17088
8110b0ec:	8110b164 	muli	r4,r16,17093
8110b0f0:	8110b004 	addi	r4,r16,17088
8110b0f4:	8110b278 	rdprs	r4,r16,17097
8110b0f8:	8110b278 	rdprs	r4,r16,17097
8110b0fc:	8110b278 	rdprs	r4,r16,17097
8110b100:	8110b290 	cmplti	r4,r16,17098
8110b104:	8809883a 	mov	r4,r17
8110b108:	110c3080 	call	8110c308 <__clzsi2>
8110b10c:	10fffec4 	addi	r3,r2,-5
8110b110:	10801d84 	addi	r2,r2,118
8110b114:	88e2983a 	sll	r17,r17,r3
8110b118:	008dc83a 	sub	r6,zero,r2
8110b11c:	000b883a 	mov	r5,zero
8110b120:	003f9906 	br	8110af88 <__reset+0xfb0eaf88>
8110b124:	014000c4 	movi	r5,3
8110b128:	003f9706 	br	8110af88 <__reset+0xfb0eaf88>
8110b12c:	9009883a 	mov	r4,r18
8110b130:	d9400015 	stw	r5,0(sp)
8110b134:	110c3080 	call	8110c308 <__clzsi2>
8110b138:	10fffec4 	addi	r3,r2,-5
8110b13c:	11801d84 	addi	r6,r2,118
8110b140:	90e4983a 	sll	r18,r18,r3
8110b144:	01a9c83a 	sub	r20,zero,r6
8110b148:	0021883a 	mov	r16,zero
8110b14c:	002f883a 	mov	r23,zero
8110b150:	d9400017 	ldw	r5,0(sp)
8110b154:	003f7e06 	br	8110af50 <__reset+0xfb0eaf50>
8110b158:	04000304 	movi	r16,12
8110b15c:	05c000c4 	movi	r23,3
8110b160:	003f7b06 	br	8110af50 <__reset+0xfb0eaf50>
8110b164:	01802034 	movhi	r6,128
8110b168:	000f883a 	mov	r7,zero
8110b16c:	31bfffc4 	addi	r6,r6,-1
8110b170:	013fffc4 	movi	r4,-1
8110b174:	003fac06 	br	8110b028 <__reset+0xfb0eb028>
8110b178:	01400044 	movi	r5,1
8110b17c:	2909c83a 	sub	r4,r5,r4
8110b180:	00c006c4 	movi	r3,27
8110b184:	19004b0e 	bge	r3,r4,8110b2b4 <__divsf3+0x3cc>
8110b188:	114e703a 	and	r7,r2,r5
8110b18c:	0009883a 	mov	r4,zero
8110b190:	000d883a 	mov	r6,zero
8110b194:	003fa406 	br	8110b028 <__reset+0xfb0eb028>
8110b198:	9006917a 	slli	r3,r18,5
8110b19c:	8822917a 	slli	r17,r17,5
8110b1a0:	1c40372e 	bgeu	r3,r17,8110b280 <__divsf3+0x398>
8110b1a4:	31bfffc4 	addi	r6,r6,-1
8110b1a8:	010006c4 	movi	r4,27
8110b1ac:	000b883a 	mov	r5,zero
8110b1b0:	180f883a 	mov	r7,r3
8110b1b4:	294b883a 	add	r5,r5,r5
8110b1b8:	18c7883a 	add	r3,r3,r3
8110b1bc:	38000116 	blt	r7,zero,8110b1c4 <__divsf3+0x2dc>
8110b1c0:	1c400236 	bltu	r3,r17,8110b1cc <__divsf3+0x2e4>
8110b1c4:	1c47c83a 	sub	r3,r3,r17
8110b1c8:	29400054 	ori	r5,r5,1
8110b1cc:	213fffc4 	addi	r4,r4,-1
8110b1d0:	203ff71e 	bne	r4,zero,8110b1b0 <__reset+0xfb0eb1b0>
8110b1d4:	1806c03a 	cmpne	r3,r3,zero
8110b1d8:	1962b03a 	or	r17,r3,r5
8110b1dc:	31001fc4 	addi	r4,r6,127
8110b1e0:	013fe50e 	bge	zero,r4,8110b178 <__reset+0xfb0eb178>
8110b1e4:	88c001cc 	andi	r3,r17,7
8110b1e8:	18000426 	beq	r3,zero,8110b1fc <__divsf3+0x314>
8110b1ec:	88c003cc 	andi	r3,r17,15
8110b1f0:	01400104 	movi	r5,4
8110b1f4:	19400126 	beq	r3,r5,8110b1fc <__divsf3+0x314>
8110b1f8:	8963883a 	add	r17,r17,r5
8110b1fc:	88c2002c 	andhi	r3,r17,2048
8110b200:	18000426 	beq	r3,zero,8110b214 <__divsf3+0x32c>
8110b204:	00fe0034 	movhi	r3,63488
8110b208:	18ffffc4 	addi	r3,r3,-1
8110b20c:	31002004 	addi	r4,r6,128
8110b210:	88e2703a 	and	r17,r17,r3
8110b214:	00c03f84 	movi	r3,254
8110b218:	193f8016 	blt	r3,r4,8110b01c <__reset+0xfb0eb01c>
8110b21c:	880c91ba 	slli	r6,r17,6
8110b220:	11c0004c 	andi	r7,r2,1
8110b224:	300cd27a 	srli	r6,r6,9
8110b228:	003f7f06 	br	8110b028 <__reset+0xfb0eb028>
8110b22c:	9080102c 	andhi	r2,r18,64
8110b230:	10000226 	beq	r2,zero,8110b23c <__divsf3+0x354>
8110b234:	8880102c 	andhi	r2,r17,64
8110b238:	10001826 	beq	r2,zero,8110b29c <__divsf3+0x3b4>
8110b23c:	00802034 	movhi	r2,128
8110b240:	91801034 	orhi	r6,r18,64
8110b244:	10bfffc4 	addi	r2,r2,-1
8110b248:	980f883a 	mov	r7,r19
8110b24c:	308c703a 	and	r6,r6,r2
8110b250:	003fc706 	br	8110b170 <__reset+0xfb0eb170>
8110b254:	008000c4 	movi	r2,3
8110b258:	b8802d26 	beq	r23,r2,8110b310 <__divsf3+0x428>
8110b25c:	00c00044 	movi	r3,1
8110b260:	b005883a 	mov	r2,r22
8110b264:	b8ffdd1e 	bne	r23,r3,8110b1dc <__reset+0xfb0eb1dc>
8110b268:	11c0004c 	andi	r7,r2,1
8110b26c:	0009883a 	mov	r4,zero
8110b270:	000d883a 	mov	r6,zero
8110b274:	003f6c06 	br	8110b028 <__reset+0xfb0eb028>
8110b278:	9023883a 	mov	r17,r18
8110b27c:	003f6406 	br	8110b010 <__reset+0xfb0eb010>
8110b280:	1c47c83a 	sub	r3,r3,r17
8110b284:	01000684 	movi	r4,26
8110b288:	01400044 	movi	r5,1
8110b28c:	003fc806 	br	8110b1b0 <__reset+0xfb0eb1b0>
8110b290:	9080102c 	andhi	r2,r18,64
8110b294:	103fe926 	beq	r2,zero,8110b23c <__reset+0xfb0eb23c>
8110b298:	0023883a 	mov	r17,zero
8110b29c:	00802034 	movhi	r2,128
8110b2a0:	89801034 	orhi	r6,r17,64
8110b2a4:	10bfffc4 	addi	r2,r2,-1
8110b2a8:	a80f883a 	mov	r7,r21
8110b2ac:	308c703a 	and	r6,r6,r2
8110b2b0:	003faf06 	br	8110b170 <__reset+0xfb0eb170>
8110b2b4:	01c00804 	movi	r7,32
8110b2b8:	390fc83a 	sub	r7,r7,r4
8110b2bc:	89ce983a 	sll	r7,r17,r7
8110b2c0:	890ad83a 	srl	r5,r17,r4
8110b2c4:	380ec03a 	cmpne	r7,r7,zero
8110b2c8:	29cab03a 	or	r5,r5,r7
8110b2cc:	28c001cc 	andi	r3,r5,7
8110b2d0:	18000426 	beq	r3,zero,8110b2e4 <__divsf3+0x3fc>
8110b2d4:	28c003cc 	andi	r3,r5,15
8110b2d8:	01000104 	movi	r4,4
8110b2dc:	19000126 	beq	r3,r4,8110b2e4 <__divsf3+0x3fc>
8110b2e0:	290b883a 	add	r5,r5,r4
8110b2e4:	28c1002c 	andhi	r3,r5,1024
8110b2e8:	18000426 	beq	r3,zero,8110b2fc <__divsf3+0x414>
8110b2ec:	11c0004c 	andi	r7,r2,1
8110b2f0:	01000044 	movi	r4,1
8110b2f4:	000d883a 	mov	r6,zero
8110b2f8:	003f4b06 	br	8110b028 <__reset+0xfb0eb028>
8110b2fc:	280a91ba 	slli	r5,r5,6
8110b300:	11c0004c 	andi	r7,r2,1
8110b304:	0009883a 	mov	r4,zero
8110b308:	280cd27a 	srli	r6,r5,9
8110b30c:	003f4606 	br	8110b028 <__reset+0xfb0eb028>
8110b310:	00802034 	movhi	r2,128
8110b314:	89801034 	orhi	r6,r17,64
8110b318:	10bfffc4 	addi	r2,r2,-1
8110b31c:	b00f883a 	mov	r7,r22
8110b320:	308c703a 	and	r6,r6,r2
8110b324:	003f9206 	br	8110b170 <__reset+0xfb0eb170>

8110b328 <__mulsf3>:
8110b328:	defff504 	addi	sp,sp,-44
8110b32c:	dc000115 	stw	r16,4(sp)
8110b330:	2020d5fa 	srli	r16,r4,23
8110b334:	dd400615 	stw	r21,24(sp)
8110b338:	202ad7fa 	srli	r21,r4,31
8110b33c:	dc800315 	stw	r18,12(sp)
8110b340:	04802034 	movhi	r18,128
8110b344:	df000915 	stw	fp,36(sp)
8110b348:	dd000515 	stw	r20,20(sp)
8110b34c:	94bfffc4 	addi	r18,r18,-1
8110b350:	dfc00a15 	stw	ra,40(sp)
8110b354:	ddc00815 	stw	r23,32(sp)
8110b358:	dd800715 	stw	r22,28(sp)
8110b35c:	dcc00415 	stw	r19,16(sp)
8110b360:	dc400215 	stw	r17,8(sp)
8110b364:	84003fcc 	andi	r16,r16,255
8110b368:	9124703a 	and	r18,r18,r4
8110b36c:	a829883a 	mov	r20,r21
8110b370:	af003fcc 	andi	fp,r21,255
8110b374:	80005426 	beq	r16,zero,8110b4c8 <__mulsf3+0x1a0>
8110b378:	00803fc4 	movi	r2,255
8110b37c:	80802f26 	beq	r16,r2,8110b43c <__mulsf3+0x114>
8110b380:	91002034 	orhi	r4,r18,128
8110b384:	202490fa 	slli	r18,r4,3
8110b388:	843fe044 	addi	r16,r16,-127
8110b38c:	0023883a 	mov	r17,zero
8110b390:	002f883a 	mov	r23,zero
8110b394:	2804d5fa 	srli	r2,r5,23
8110b398:	282cd7fa 	srli	r22,r5,31
8110b39c:	01002034 	movhi	r4,128
8110b3a0:	213fffc4 	addi	r4,r4,-1
8110b3a4:	10803fcc 	andi	r2,r2,255
8110b3a8:	2166703a 	and	r19,r4,r5
8110b3ac:	b1803fcc 	andi	r6,r22,255
8110b3b0:	10004c26 	beq	r2,zero,8110b4e4 <__mulsf3+0x1bc>
8110b3b4:	00c03fc4 	movi	r3,255
8110b3b8:	10c04726 	beq	r2,r3,8110b4d8 <__mulsf3+0x1b0>
8110b3bc:	99002034 	orhi	r4,r19,128
8110b3c0:	202690fa 	slli	r19,r4,3
8110b3c4:	10bfe044 	addi	r2,r2,-127
8110b3c8:	0007883a 	mov	r3,zero
8110b3cc:	80a1883a 	add	r16,r16,r2
8110b3d0:	010003c4 	movi	r4,15
8110b3d4:	1c44b03a 	or	r2,r3,r17
8110b3d8:	b56af03a 	xor	r21,r22,r21
8110b3dc:	81c00044 	addi	r7,r16,1
8110b3e0:	20806b36 	bltu	r4,r2,8110b590 <__mulsf3+0x268>
8110b3e4:	100490ba 	slli	r2,r2,2
8110b3e8:	01204474 	movhi	r4,33041
8110b3ec:	212cff04 	addi	r4,r4,-19460
8110b3f0:	1105883a 	add	r2,r2,r4
8110b3f4:	10800017 	ldw	r2,0(r2)
8110b3f8:	1000683a 	jmp	r2
8110b3fc:	8110b590 	cmplti	r4,r16,17110
8110b400:	8110b450 	cmplti	r4,r16,17105
8110b404:	8110b450 	cmplti	r4,r16,17105
8110b408:	8110b44c 	andi	r4,r16,17105
8110b40c:	8110b574 	orhi	r4,r16,17109
8110b410:	8110b574 	orhi	r4,r16,17109
8110b414:	8110b560 	cmpeqi	r4,r16,17109
8110b418:	8110b44c 	andi	r4,r16,17105
8110b41c:	8110b574 	orhi	r4,r16,17109
8110b420:	8110b560 	cmpeqi	r4,r16,17109
8110b424:	8110b574 	orhi	r4,r16,17109
8110b428:	8110b44c 	andi	r4,r16,17105
8110b42c:	8110b580 	call	88110b58 <__reset+0x20f0b58>
8110b430:	8110b580 	call	88110b58 <__reset+0x20f0b58>
8110b434:	8110b580 	call	88110b58 <__reset+0x20f0b58>
8110b438:	8110b65c 	xori	r4,r16,17113
8110b43c:	90003b1e 	bne	r18,zero,8110b52c <__mulsf3+0x204>
8110b440:	04400204 	movi	r17,8
8110b444:	05c00084 	movi	r23,2
8110b448:	003fd206 	br	8110b394 <__reset+0xfb0eb394>
8110b44c:	302b883a 	mov	r21,r6
8110b450:	00800084 	movi	r2,2
8110b454:	18802626 	beq	r3,r2,8110b4f0 <__mulsf3+0x1c8>
8110b458:	008000c4 	movi	r2,3
8110b45c:	1880ab26 	beq	r3,r2,8110b70c <__mulsf3+0x3e4>
8110b460:	00800044 	movi	r2,1
8110b464:	1880a21e 	bne	r3,r2,8110b6f0 <__mulsf3+0x3c8>
8110b468:	a829883a 	mov	r20,r21
8110b46c:	0007883a 	mov	r3,zero
8110b470:	0009883a 	mov	r4,zero
8110b474:	18803fcc 	andi	r2,r3,255
8110b478:	100695fa 	slli	r3,r2,23
8110b47c:	a0803fcc 	andi	r2,r20,255
8110b480:	100a97fa 	slli	r5,r2,31
8110b484:	00802034 	movhi	r2,128
8110b488:	10bfffc4 	addi	r2,r2,-1
8110b48c:	2084703a 	and	r2,r4,r2
8110b490:	10c4b03a 	or	r2,r2,r3
8110b494:	1144b03a 	or	r2,r2,r5
8110b498:	dfc00a17 	ldw	ra,40(sp)
8110b49c:	df000917 	ldw	fp,36(sp)
8110b4a0:	ddc00817 	ldw	r23,32(sp)
8110b4a4:	dd800717 	ldw	r22,28(sp)
8110b4a8:	dd400617 	ldw	r21,24(sp)
8110b4ac:	dd000517 	ldw	r20,20(sp)
8110b4b0:	dcc00417 	ldw	r19,16(sp)
8110b4b4:	dc800317 	ldw	r18,12(sp)
8110b4b8:	dc400217 	ldw	r17,8(sp)
8110b4bc:	dc000117 	ldw	r16,4(sp)
8110b4c0:	dec00b04 	addi	sp,sp,44
8110b4c4:	f800283a 	ret
8110b4c8:	90000d1e 	bne	r18,zero,8110b500 <__mulsf3+0x1d8>
8110b4cc:	04400104 	movi	r17,4
8110b4d0:	05c00044 	movi	r23,1
8110b4d4:	003faf06 	br	8110b394 <__reset+0xfb0eb394>
8110b4d8:	9806c03a 	cmpne	r3,r19,zero
8110b4dc:	18c00084 	addi	r3,r3,2
8110b4e0:	003fba06 	br	8110b3cc <__reset+0xfb0eb3cc>
8110b4e4:	9800141e 	bne	r19,zero,8110b538 <__mulsf3+0x210>
8110b4e8:	00c00044 	movi	r3,1
8110b4ec:	003fb706 	br	8110b3cc <__reset+0xfb0eb3cc>
8110b4f0:	a829883a 	mov	r20,r21
8110b4f4:	00ffffc4 	movi	r3,-1
8110b4f8:	0009883a 	mov	r4,zero
8110b4fc:	003fdd06 	br	8110b474 <__reset+0xfb0eb474>
8110b500:	9009883a 	mov	r4,r18
8110b504:	d9400015 	stw	r5,0(sp)
8110b508:	110c3080 	call	8110c308 <__clzsi2>
8110b50c:	10fffec4 	addi	r3,r2,-5
8110b510:	10801d84 	addi	r2,r2,118
8110b514:	90e4983a 	sll	r18,r18,r3
8110b518:	00a1c83a 	sub	r16,zero,r2
8110b51c:	0023883a 	mov	r17,zero
8110b520:	002f883a 	mov	r23,zero
8110b524:	d9400017 	ldw	r5,0(sp)
8110b528:	003f9a06 	br	8110b394 <__reset+0xfb0eb394>
8110b52c:	04400304 	movi	r17,12
8110b530:	05c000c4 	movi	r23,3
8110b534:	003f9706 	br	8110b394 <__reset+0xfb0eb394>
8110b538:	9809883a 	mov	r4,r19
8110b53c:	d9800015 	stw	r6,0(sp)
8110b540:	110c3080 	call	8110c308 <__clzsi2>
8110b544:	10fffec4 	addi	r3,r2,-5
8110b548:	10801d84 	addi	r2,r2,118
8110b54c:	98e6983a 	sll	r19,r19,r3
8110b550:	0085c83a 	sub	r2,zero,r2
8110b554:	0007883a 	mov	r3,zero
8110b558:	d9800017 	ldw	r6,0(sp)
8110b55c:	003f9b06 	br	8110b3cc <__reset+0xfb0eb3cc>
8110b560:	01002034 	movhi	r4,128
8110b564:	0029883a 	mov	r20,zero
8110b568:	213fffc4 	addi	r4,r4,-1
8110b56c:	00ffffc4 	movi	r3,-1
8110b570:	003fc006 	br	8110b474 <__reset+0xfb0eb474>
8110b574:	9027883a 	mov	r19,r18
8110b578:	b807883a 	mov	r3,r23
8110b57c:	003fb406 	br	8110b450 <__reset+0xfb0eb450>
8110b580:	9027883a 	mov	r19,r18
8110b584:	e02b883a 	mov	r21,fp
8110b588:	b807883a 	mov	r3,r23
8110b58c:	003fb006 	br	8110b450 <__reset+0xfb0eb450>
8110b590:	9004d43a 	srli	r2,r18,16
8110b594:	9810d43a 	srli	r8,r19,16
8110b598:	94bfffcc 	andi	r18,r18,65535
8110b59c:	993fffcc 	andi	r4,r19,65535
8110b5a0:	910d383a 	mul	r6,r18,r4
8110b5a4:	20a7383a 	mul	r19,r4,r2
8110b5a8:	9225383a 	mul	r18,r18,r8
8110b5ac:	3006d43a 	srli	r3,r6,16
8110b5b0:	1211383a 	mul	r8,r2,r8
8110b5b4:	94e5883a 	add	r18,r18,r19
8110b5b8:	1c87883a 	add	r3,r3,r18
8110b5bc:	1cc0022e 	bgeu	r3,r19,8110b5c8 <__mulsf3+0x2a0>
8110b5c0:	00800074 	movhi	r2,1
8110b5c4:	4091883a 	add	r8,r8,r2
8110b5c8:	1804943a 	slli	r2,r3,16
8110b5cc:	31bfffcc 	andi	r6,r6,65535
8110b5d0:	1806d43a 	srli	r3,r3,16
8110b5d4:	1185883a 	add	r2,r2,r6
8110b5d8:	102691ba 	slli	r19,r2,6
8110b5dc:	1a07883a 	add	r3,r3,r8
8110b5e0:	1004d6ba 	srli	r2,r2,26
8110b5e4:	180891ba 	slli	r4,r3,6
8110b5e8:	9826c03a 	cmpne	r19,r19,zero
8110b5ec:	9884b03a 	or	r2,r19,r2
8110b5f0:	1126b03a 	or	r19,r2,r4
8110b5f4:	9882002c 	andhi	r2,r19,2048
8110b5f8:	10000426 	beq	r2,zero,8110b60c <__mulsf3+0x2e4>
8110b5fc:	9804d07a 	srli	r2,r19,1
8110b600:	9900004c 	andi	r4,r19,1
8110b604:	3821883a 	mov	r16,r7
8110b608:	1126b03a 	or	r19,r2,r4
8110b60c:	80c01fc4 	addi	r3,r16,127
8110b610:	00c0210e 	bge	zero,r3,8110b698 <__mulsf3+0x370>
8110b614:	988001cc 	andi	r2,r19,7
8110b618:	10000426 	beq	r2,zero,8110b62c <__mulsf3+0x304>
8110b61c:	988003cc 	andi	r2,r19,15
8110b620:	01000104 	movi	r4,4
8110b624:	11000126 	beq	r2,r4,8110b62c <__mulsf3+0x304>
8110b628:	9927883a 	add	r19,r19,r4
8110b62c:	9882002c 	andhi	r2,r19,2048
8110b630:	10000426 	beq	r2,zero,8110b644 <__mulsf3+0x31c>
8110b634:	00be0034 	movhi	r2,63488
8110b638:	10bfffc4 	addi	r2,r2,-1
8110b63c:	80c02004 	addi	r3,r16,128
8110b640:	98a6703a 	and	r19,r19,r2
8110b644:	00803f84 	movi	r2,254
8110b648:	10ffa916 	blt	r2,r3,8110b4f0 <__reset+0xfb0eb4f0>
8110b64c:	980891ba 	slli	r4,r19,6
8110b650:	a829883a 	mov	r20,r21
8110b654:	2008d27a 	srli	r4,r4,9
8110b658:	003f8606 	br	8110b474 <__reset+0xfb0eb474>
8110b65c:	9080102c 	andhi	r2,r18,64
8110b660:	10000826 	beq	r2,zero,8110b684 <__mulsf3+0x35c>
8110b664:	9880102c 	andhi	r2,r19,64
8110b668:	1000061e 	bne	r2,zero,8110b684 <__mulsf3+0x35c>
8110b66c:	00802034 	movhi	r2,128
8110b670:	99001034 	orhi	r4,r19,64
8110b674:	10bfffc4 	addi	r2,r2,-1
8110b678:	b029883a 	mov	r20,r22
8110b67c:	2088703a 	and	r4,r4,r2
8110b680:	003fba06 	br	8110b56c <__reset+0xfb0eb56c>
8110b684:	00802034 	movhi	r2,128
8110b688:	91001034 	orhi	r4,r18,64
8110b68c:	10bfffc4 	addi	r2,r2,-1
8110b690:	2088703a 	and	r4,r4,r2
8110b694:	003fb506 	br	8110b56c <__reset+0xfb0eb56c>
8110b698:	00800044 	movi	r2,1
8110b69c:	10c7c83a 	sub	r3,r2,r3
8110b6a0:	008006c4 	movi	r2,27
8110b6a4:	10ff7016 	blt	r2,r3,8110b468 <__reset+0xfb0eb468>
8110b6a8:	00800804 	movi	r2,32
8110b6ac:	10c5c83a 	sub	r2,r2,r3
8110b6b0:	9884983a 	sll	r2,r19,r2
8110b6b4:	98c6d83a 	srl	r3,r19,r3
8110b6b8:	1004c03a 	cmpne	r2,r2,zero
8110b6bc:	1884b03a 	or	r2,r3,r2
8110b6c0:	10c001cc 	andi	r3,r2,7
8110b6c4:	18000426 	beq	r3,zero,8110b6d8 <__mulsf3+0x3b0>
8110b6c8:	10c003cc 	andi	r3,r2,15
8110b6cc:	01000104 	movi	r4,4
8110b6d0:	19000126 	beq	r3,r4,8110b6d8 <__mulsf3+0x3b0>
8110b6d4:	1105883a 	add	r2,r2,r4
8110b6d8:	10c1002c 	andhi	r3,r2,1024
8110b6dc:	18000626 	beq	r3,zero,8110b6f8 <__mulsf3+0x3d0>
8110b6e0:	a829883a 	mov	r20,r21
8110b6e4:	00c00044 	movi	r3,1
8110b6e8:	0009883a 	mov	r4,zero
8110b6ec:	003f6106 	br	8110b474 <__reset+0xfb0eb474>
8110b6f0:	3821883a 	mov	r16,r7
8110b6f4:	003fc506 	br	8110b60c <__reset+0xfb0eb60c>
8110b6f8:	100491ba 	slli	r2,r2,6
8110b6fc:	a829883a 	mov	r20,r21
8110b700:	0007883a 	mov	r3,zero
8110b704:	1008d27a 	srli	r4,r2,9
8110b708:	003f5a06 	br	8110b474 <__reset+0xfb0eb474>
8110b70c:	00802034 	movhi	r2,128
8110b710:	99001034 	orhi	r4,r19,64
8110b714:	10bfffc4 	addi	r2,r2,-1
8110b718:	a829883a 	mov	r20,r21
8110b71c:	2088703a 	and	r4,r4,r2
8110b720:	003f9206 	br	8110b56c <__reset+0xfb0eb56c>

8110b724 <__floatsisf>:
8110b724:	defffd04 	addi	sp,sp,-12
8110b728:	dfc00215 	stw	ra,8(sp)
8110b72c:	dc400115 	stw	r17,4(sp)
8110b730:	dc000015 	stw	r16,0(sp)
8110b734:	20003526 	beq	r4,zero,8110b80c <__floatsisf+0xe8>
8110b738:	2021883a 	mov	r16,r4
8110b73c:	2022d7fa 	srli	r17,r4,31
8110b740:	20003616 	blt	r4,zero,8110b81c <__floatsisf+0xf8>
8110b744:	8009883a 	mov	r4,r16
8110b748:	110c3080 	call	8110c308 <__clzsi2>
8110b74c:	00c02784 	movi	r3,158
8110b750:	1887c83a 	sub	r3,r3,r2
8110b754:	01002584 	movi	r4,150
8110b758:	20c01416 	blt	r4,r3,8110b7ac <__floatsisf+0x88>
8110b75c:	20c9c83a 	sub	r4,r4,r3
8110b760:	8120983a 	sll	r16,r16,r4
8110b764:	00802034 	movhi	r2,128
8110b768:	10bfffc4 	addi	r2,r2,-1
8110b76c:	8809883a 	mov	r4,r17
8110b770:	80a0703a 	and	r16,r16,r2
8110b774:	18803fcc 	andi	r2,r3,255
8110b778:	100695fa 	slli	r3,r2,23
8110b77c:	20803fcc 	andi	r2,r4,255
8110b780:	100897fa 	slli	r4,r2,31
8110b784:	00802034 	movhi	r2,128
8110b788:	10bfffc4 	addi	r2,r2,-1
8110b78c:	8084703a 	and	r2,r16,r2
8110b790:	10c4b03a 	or	r2,r2,r3
8110b794:	1104b03a 	or	r2,r2,r4
8110b798:	dfc00217 	ldw	ra,8(sp)
8110b79c:	dc400117 	ldw	r17,4(sp)
8110b7a0:	dc000017 	ldw	r16,0(sp)
8110b7a4:	dec00304 	addi	sp,sp,12
8110b7a8:	f800283a 	ret
8110b7ac:	01002644 	movi	r4,153
8110b7b0:	20c01c16 	blt	r4,r3,8110b824 <__floatsisf+0x100>
8110b7b4:	20c9c83a 	sub	r4,r4,r3
8110b7b8:	8120983a 	sll	r16,r16,r4
8110b7bc:	013f0034 	movhi	r4,64512
8110b7c0:	213fffc4 	addi	r4,r4,-1
8110b7c4:	814001cc 	andi	r5,r16,7
8110b7c8:	8108703a 	and	r4,r16,r4
8110b7cc:	28000426 	beq	r5,zero,8110b7e0 <__floatsisf+0xbc>
8110b7d0:	840003cc 	andi	r16,r16,15
8110b7d4:	01400104 	movi	r5,4
8110b7d8:	81400126 	beq	r16,r5,8110b7e0 <__floatsisf+0xbc>
8110b7dc:	2149883a 	add	r4,r4,r5
8110b7e0:	2141002c 	andhi	r5,r4,1024
8110b7e4:	28000526 	beq	r5,zero,8110b7fc <__floatsisf+0xd8>
8110b7e8:	00c027c4 	movi	r3,159
8110b7ec:	1887c83a 	sub	r3,r3,r2
8110b7f0:	00bf0034 	movhi	r2,64512
8110b7f4:	10bfffc4 	addi	r2,r2,-1
8110b7f8:	2088703a 	and	r4,r4,r2
8110b7fc:	202091ba 	slli	r16,r4,6
8110b800:	8809883a 	mov	r4,r17
8110b804:	8020d27a 	srli	r16,r16,9
8110b808:	003fda06 	br	8110b774 <__reset+0xfb0eb774>
8110b80c:	0009883a 	mov	r4,zero
8110b810:	0007883a 	mov	r3,zero
8110b814:	0021883a 	mov	r16,zero
8110b818:	003fd606 	br	8110b774 <__reset+0xfb0eb774>
8110b81c:	0121c83a 	sub	r16,zero,r4
8110b820:	003fc806 	br	8110b744 <__reset+0xfb0eb744>
8110b824:	01002e44 	movi	r4,185
8110b828:	20c9c83a 	sub	r4,r4,r3
8110b82c:	01400144 	movi	r5,5
8110b830:	8108983a 	sll	r4,r16,r4
8110b834:	288bc83a 	sub	r5,r5,r2
8110b838:	8160d83a 	srl	r16,r16,r5
8110b83c:	2008c03a 	cmpne	r4,r4,zero
8110b840:	8120b03a 	or	r16,r16,r4
8110b844:	003fdd06 	br	8110b7bc <__reset+0xfb0eb7bc>

8110b848 <__floatunsisf>:
8110b848:	defffe04 	addi	sp,sp,-8
8110b84c:	dfc00115 	stw	ra,4(sp)
8110b850:	dc000015 	stw	r16,0(sp)
8110b854:	20002c26 	beq	r4,zero,8110b908 <__floatunsisf+0xc0>
8110b858:	2021883a 	mov	r16,r4
8110b85c:	110c3080 	call	8110c308 <__clzsi2>
8110b860:	00c02784 	movi	r3,158
8110b864:	1887c83a 	sub	r3,r3,r2
8110b868:	01002584 	movi	r4,150
8110b86c:	20c00f16 	blt	r4,r3,8110b8ac <__floatunsisf+0x64>
8110b870:	20c9c83a 	sub	r4,r4,r3
8110b874:	8108983a 	sll	r4,r16,r4
8110b878:	00802034 	movhi	r2,128
8110b87c:	10bfffc4 	addi	r2,r2,-1
8110b880:	2088703a 	and	r4,r4,r2
8110b884:	18803fcc 	andi	r2,r3,255
8110b888:	100695fa 	slli	r3,r2,23
8110b88c:	00802034 	movhi	r2,128
8110b890:	10bfffc4 	addi	r2,r2,-1
8110b894:	2084703a 	and	r2,r4,r2
8110b898:	10c4b03a 	or	r2,r2,r3
8110b89c:	dfc00117 	ldw	ra,4(sp)
8110b8a0:	dc000017 	ldw	r16,0(sp)
8110b8a4:	dec00204 	addi	sp,sp,8
8110b8a8:	f800283a 	ret
8110b8ac:	01002644 	movi	r4,153
8110b8b0:	20c01816 	blt	r4,r3,8110b914 <__floatunsisf+0xcc>
8110b8b4:	20c9c83a 	sub	r4,r4,r3
8110b8b8:	8108983a 	sll	r4,r16,r4
8110b8bc:	017f0034 	movhi	r5,64512
8110b8c0:	297fffc4 	addi	r5,r5,-1
8110b8c4:	218001cc 	andi	r6,r4,7
8110b8c8:	214a703a 	and	r5,r4,r5
8110b8cc:	30000426 	beq	r6,zero,8110b8e0 <__floatunsisf+0x98>
8110b8d0:	210003cc 	andi	r4,r4,15
8110b8d4:	01800104 	movi	r6,4
8110b8d8:	21800126 	beq	r4,r6,8110b8e0 <__floatunsisf+0x98>
8110b8dc:	298b883a 	add	r5,r5,r6
8110b8e0:	2901002c 	andhi	r4,r5,1024
8110b8e4:	20000526 	beq	r4,zero,8110b8fc <__floatunsisf+0xb4>
8110b8e8:	00c027c4 	movi	r3,159
8110b8ec:	1887c83a 	sub	r3,r3,r2
8110b8f0:	00bf0034 	movhi	r2,64512
8110b8f4:	10bfffc4 	addi	r2,r2,-1
8110b8f8:	288a703a 	and	r5,r5,r2
8110b8fc:	280891ba 	slli	r4,r5,6
8110b900:	2008d27a 	srli	r4,r4,9
8110b904:	003fdf06 	br	8110b884 <__reset+0xfb0eb884>
8110b908:	0007883a 	mov	r3,zero
8110b90c:	0009883a 	mov	r4,zero
8110b910:	003fdc06 	br	8110b884 <__reset+0xfb0eb884>
8110b914:	01402e44 	movi	r5,185
8110b918:	28cbc83a 	sub	r5,r5,r3
8110b91c:	01000144 	movi	r4,5
8110b920:	2089c83a 	sub	r4,r4,r2
8110b924:	814a983a 	sll	r5,r16,r5
8110b928:	8108d83a 	srl	r4,r16,r4
8110b92c:	2820c03a 	cmpne	r16,r5,zero
8110b930:	2408b03a 	or	r4,r4,r16
8110b934:	003fe106 	br	8110b8bc <__reset+0xfb0eb8bc>

8110b938 <__muldf3>:
8110b938:	defff304 	addi	sp,sp,-52
8110b93c:	2804d53a 	srli	r2,r5,20
8110b940:	dd800915 	stw	r22,36(sp)
8110b944:	282cd7fa 	srli	r22,r5,31
8110b948:	dc000315 	stw	r16,12(sp)
8110b94c:	04000434 	movhi	r16,16
8110b950:	dd400815 	stw	r21,32(sp)
8110b954:	dc800515 	stw	r18,20(sp)
8110b958:	843fffc4 	addi	r16,r16,-1
8110b95c:	dfc00c15 	stw	ra,48(sp)
8110b960:	df000b15 	stw	fp,44(sp)
8110b964:	ddc00a15 	stw	r23,40(sp)
8110b968:	dd000715 	stw	r20,28(sp)
8110b96c:	dcc00615 	stw	r19,24(sp)
8110b970:	dc400415 	stw	r17,16(sp)
8110b974:	1481ffcc 	andi	r18,r2,2047
8110b978:	2c20703a 	and	r16,r5,r16
8110b97c:	b02b883a 	mov	r21,r22
8110b980:	b2403fcc 	andi	r9,r22,255
8110b984:	90006026 	beq	r18,zero,8110bb08 <__muldf3+0x1d0>
8110b988:	0081ffc4 	movi	r2,2047
8110b98c:	2029883a 	mov	r20,r4
8110b990:	90803626 	beq	r18,r2,8110ba6c <__muldf3+0x134>
8110b994:	80800434 	orhi	r2,r16,16
8110b998:	100490fa 	slli	r2,r2,3
8110b99c:	2020d77a 	srli	r16,r4,29
8110b9a0:	202890fa 	slli	r20,r4,3
8110b9a4:	94bf0044 	addi	r18,r18,-1023
8110b9a8:	80a0b03a 	or	r16,r16,r2
8110b9ac:	0027883a 	mov	r19,zero
8110b9b0:	0039883a 	mov	fp,zero
8110b9b4:	3804d53a 	srli	r2,r7,20
8110b9b8:	382ed7fa 	srli	r23,r7,31
8110b9bc:	04400434 	movhi	r17,16
8110b9c0:	8c7fffc4 	addi	r17,r17,-1
8110b9c4:	1081ffcc 	andi	r2,r2,2047
8110b9c8:	3011883a 	mov	r8,r6
8110b9cc:	3c62703a 	and	r17,r7,r17
8110b9d0:	ba803fcc 	andi	r10,r23,255
8110b9d4:	10006d26 	beq	r2,zero,8110bb8c <__muldf3+0x254>
8110b9d8:	00c1ffc4 	movi	r3,2047
8110b9dc:	10c06526 	beq	r2,r3,8110bb74 <__muldf3+0x23c>
8110b9e0:	88c00434 	orhi	r3,r17,16
8110b9e4:	180690fa 	slli	r3,r3,3
8110b9e8:	3022d77a 	srli	r17,r6,29
8110b9ec:	301090fa 	slli	r8,r6,3
8110b9f0:	10bf0044 	addi	r2,r2,-1023
8110b9f4:	88e2b03a 	or	r17,r17,r3
8110b9f8:	000b883a 	mov	r5,zero
8110b9fc:	9085883a 	add	r2,r18,r2
8110ba00:	2cc8b03a 	or	r4,r5,r19
8110ba04:	00c003c4 	movi	r3,15
8110ba08:	bdacf03a 	xor	r22,r23,r22
8110ba0c:	12c00044 	addi	r11,r2,1
8110ba10:	19009936 	bltu	r3,r4,8110bc78 <__muldf3+0x340>
8110ba14:	200890ba 	slli	r4,r4,2
8110ba18:	00e04474 	movhi	r3,33041
8110ba1c:	18ee8b04 	addi	r3,r3,-17876
8110ba20:	20c9883a 	add	r4,r4,r3
8110ba24:	20c00017 	ldw	r3,0(r4)
8110ba28:	1800683a 	jmp	r3
8110ba2c:	8110bc78 	rdprs	r4,r16,17137
8110ba30:	8110ba8c 	andi	r4,r16,17130
8110ba34:	8110ba8c 	andi	r4,r16,17130
8110ba38:	8110ba88 	cmpgei	r4,r16,17130
8110ba3c:	8110bc54 	ori	r4,r16,17137
8110ba40:	8110bc54 	ori	r4,r16,17137
8110ba44:	8110bc3c 	xorhi	r4,r16,17136
8110ba48:	8110ba88 	cmpgei	r4,r16,17130
8110ba4c:	8110bc54 	ori	r4,r16,17137
8110ba50:	8110bc3c 	xorhi	r4,r16,17136
8110ba54:	8110bc54 	ori	r4,r16,17137
8110ba58:	8110ba88 	cmpgei	r4,r16,17130
8110ba5c:	8110bc64 	muli	r4,r16,17137
8110ba60:	8110bc64 	muli	r4,r16,17137
8110ba64:	8110bc64 	muli	r4,r16,17137
8110ba68:	8110be80 	call	88110be8 <__reset+0x20f0be8>
8110ba6c:	2404b03a 	or	r2,r4,r16
8110ba70:	10006f1e 	bne	r2,zero,8110bc30 <__muldf3+0x2f8>
8110ba74:	04c00204 	movi	r19,8
8110ba78:	0021883a 	mov	r16,zero
8110ba7c:	0029883a 	mov	r20,zero
8110ba80:	07000084 	movi	fp,2
8110ba84:	003fcb06 	br	8110b9b4 <__reset+0xfb0eb9b4>
8110ba88:	502d883a 	mov	r22,r10
8110ba8c:	00800084 	movi	r2,2
8110ba90:	28805726 	beq	r5,r2,8110bbf0 <__muldf3+0x2b8>
8110ba94:	008000c4 	movi	r2,3
8110ba98:	28816626 	beq	r5,r2,8110c034 <__muldf3+0x6fc>
8110ba9c:	00800044 	movi	r2,1
8110baa0:	2881411e 	bne	r5,r2,8110bfa8 <__muldf3+0x670>
8110baa4:	b02b883a 	mov	r21,r22
8110baa8:	0005883a 	mov	r2,zero
8110baac:	000b883a 	mov	r5,zero
8110bab0:	0029883a 	mov	r20,zero
8110bab4:	1004953a 	slli	r2,r2,20
8110bab8:	a8c03fcc 	andi	r3,r21,255
8110babc:	04400434 	movhi	r17,16
8110bac0:	8c7fffc4 	addi	r17,r17,-1
8110bac4:	180697fa 	slli	r3,r3,31
8110bac8:	2c4a703a 	and	r5,r5,r17
8110bacc:	288ab03a 	or	r5,r5,r2
8110bad0:	28c6b03a 	or	r3,r5,r3
8110bad4:	a005883a 	mov	r2,r20
8110bad8:	dfc00c17 	ldw	ra,48(sp)
8110badc:	df000b17 	ldw	fp,44(sp)
8110bae0:	ddc00a17 	ldw	r23,40(sp)
8110bae4:	dd800917 	ldw	r22,36(sp)
8110bae8:	dd400817 	ldw	r21,32(sp)
8110baec:	dd000717 	ldw	r20,28(sp)
8110baf0:	dcc00617 	ldw	r19,24(sp)
8110baf4:	dc800517 	ldw	r18,20(sp)
8110baf8:	dc400417 	ldw	r17,16(sp)
8110bafc:	dc000317 	ldw	r16,12(sp)
8110bb00:	dec00d04 	addi	sp,sp,52
8110bb04:	f800283a 	ret
8110bb08:	2404b03a 	or	r2,r4,r16
8110bb0c:	2027883a 	mov	r19,r4
8110bb10:	10004226 	beq	r2,zero,8110bc1c <__muldf3+0x2e4>
8110bb14:	8000fc26 	beq	r16,zero,8110bf08 <__muldf3+0x5d0>
8110bb18:	8009883a 	mov	r4,r16
8110bb1c:	d9800215 	stw	r6,8(sp)
8110bb20:	d9c00015 	stw	r7,0(sp)
8110bb24:	da400115 	stw	r9,4(sp)
8110bb28:	110c3080 	call	8110c308 <__clzsi2>
8110bb2c:	d9800217 	ldw	r6,8(sp)
8110bb30:	d9c00017 	ldw	r7,0(sp)
8110bb34:	da400117 	ldw	r9,4(sp)
8110bb38:	113ffd44 	addi	r4,r2,-11
8110bb3c:	00c00704 	movi	r3,28
8110bb40:	1900ed16 	blt	r3,r4,8110bef8 <__muldf3+0x5c0>
8110bb44:	00c00744 	movi	r3,29
8110bb48:	147ffe04 	addi	r17,r2,-8
8110bb4c:	1907c83a 	sub	r3,r3,r4
8110bb50:	8460983a 	sll	r16,r16,r17
8110bb54:	98c6d83a 	srl	r3,r19,r3
8110bb58:	9c68983a 	sll	r20,r19,r17
8110bb5c:	1c20b03a 	or	r16,r3,r16
8110bb60:	1080fcc4 	addi	r2,r2,1011
8110bb64:	00a5c83a 	sub	r18,zero,r2
8110bb68:	0027883a 	mov	r19,zero
8110bb6c:	0039883a 	mov	fp,zero
8110bb70:	003f9006 	br	8110b9b4 <__reset+0xfb0eb9b4>
8110bb74:	3446b03a 	or	r3,r6,r17
8110bb78:	1800261e 	bne	r3,zero,8110bc14 <__muldf3+0x2dc>
8110bb7c:	0023883a 	mov	r17,zero
8110bb80:	0011883a 	mov	r8,zero
8110bb84:	01400084 	movi	r5,2
8110bb88:	003f9c06 	br	8110b9fc <__reset+0xfb0eb9fc>
8110bb8c:	3446b03a 	or	r3,r6,r17
8110bb90:	18001c26 	beq	r3,zero,8110bc04 <__muldf3+0x2cc>
8110bb94:	8800ce26 	beq	r17,zero,8110bed0 <__muldf3+0x598>
8110bb98:	8809883a 	mov	r4,r17
8110bb9c:	d9800215 	stw	r6,8(sp)
8110bba0:	da400115 	stw	r9,4(sp)
8110bba4:	da800015 	stw	r10,0(sp)
8110bba8:	110c3080 	call	8110c308 <__clzsi2>
8110bbac:	d9800217 	ldw	r6,8(sp)
8110bbb0:	da400117 	ldw	r9,4(sp)
8110bbb4:	da800017 	ldw	r10,0(sp)
8110bbb8:	113ffd44 	addi	r4,r2,-11
8110bbbc:	00c00704 	movi	r3,28
8110bbc0:	1900bf16 	blt	r3,r4,8110bec0 <__muldf3+0x588>
8110bbc4:	00c00744 	movi	r3,29
8110bbc8:	123ffe04 	addi	r8,r2,-8
8110bbcc:	1907c83a 	sub	r3,r3,r4
8110bbd0:	8a22983a 	sll	r17,r17,r8
8110bbd4:	30c6d83a 	srl	r3,r6,r3
8110bbd8:	3210983a 	sll	r8,r6,r8
8110bbdc:	1c62b03a 	or	r17,r3,r17
8110bbe0:	1080fcc4 	addi	r2,r2,1011
8110bbe4:	0085c83a 	sub	r2,zero,r2
8110bbe8:	000b883a 	mov	r5,zero
8110bbec:	003f8306 	br	8110b9fc <__reset+0xfb0eb9fc>
8110bbf0:	b02b883a 	mov	r21,r22
8110bbf4:	0081ffc4 	movi	r2,2047
8110bbf8:	000b883a 	mov	r5,zero
8110bbfc:	0029883a 	mov	r20,zero
8110bc00:	003fac06 	br	8110bab4 <__reset+0xfb0ebab4>
8110bc04:	0023883a 	mov	r17,zero
8110bc08:	0011883a 	mov	r8,zero
8110bc0c:	01400044 	movi	r5,1
8110bc10:	003f7a06 	br	8110b9fc <__reset+0xfb0eb9fc>
8110bc14:	014000c4 	movi	r5,3
8110bc18:	003f7806 	br	8110b9fc <__reset+0xfb0eb9fc>
8110bc1c:	04c00104 	movi	r19,4
8110bc20:	0021883a 	mov	r16,zero
8110bc24:	0029883a 	mov	r20,zero
8110bc28:	07000044 	movi	fp,1
8110bc2c:	003f6106 	br	8110b9b4 <__reset+0xfb0eb9b4>
8110bc30:	04c00304 	movi	r19,12
8110bc34:	070000c4 	movi	fp,3
8110bc38:	003f5e06 	br	8110b9b4 <__reset+0xfb0eb9b4>
8110bc3c:	01400434 	movhi	r5,16
8110bc40:	002b883a 	mov	r21,zero
8110bc44:	297fffc4 	addi	r5,r5,-1
8110bc48:	053fffc4 	movi	r20,-1
8110bc4c:	0081ffc4 	movi	r2,2047
8110bc50:	003f9806 	br	8110bab4 <__reset+0xfb0ebab4>
8110bc54:	8023883a 	mov	r17,r16
8110bc58:	a011883a 	mov	r8,r20
8110bc5c:	e00b883a 	mov	r5,fp
8110bc60:	003f8a06 	br	8110ba8c <__reset+0xfb0eba8c>
8110bc64:	8023883a 	mov	r17,r16
8110bc68:	a011883a 	mov	r8,r20
8110bc6c:	482d883a 	mov	r22,r9
8110bc70:	e00b883a 	mov	r5,fp
8110bc74:	003f8506 	br	8110ba8c <__reset+0xfb0eba8c>
8110bc78:	a00ad43a 	srli	r5,r20,16
8110bc7c:	401ad43a 	srli	r13,r8,16
8110bc80:	a53fffcc 	andi	r20,r20,65535
8110bc84:	423fffcc 	andi	r8,r8,65535
8110bc88:	4519383a 	mul	r12,r8,r20
8110bc8c:	4147383a 	mul	r3,r8,r5
8110bc90:	6d09383a 	mul	r4,r13,r20
8110bc94:	600cd43a 	srli	r6,r12,16
8110bc98:	2b5d383a 	mul	r14,r5,r13
8110bc9c:	20c9883a 	add	r4,r4,r3
8110bca0:	310d883a 	add	r6,r6,r4
8110bca4:	30c0022e 	bgeu	r6,r3,8110bcb0 <__muldf3+0x378>
8110bca8:	00c00074 	movhi	r3,1
8110bcac:	70dd883a 	add	r14,r14,r3
8110bcb0:	8826d43a 	srli	r19,r17,16
8110bcb4:	8bffffcc 	andi	r15,r17,65535
8110bcb8:	7d23383a 	mul	r17,r15,r20
8110bcbc:	7949383a 	mul	r4,r15,r5
8110bcc0:	9d29383a 	mul	r20,r19,r20
8110bcc4:	8814d43a 	srli	r10,r17,16
8110bcc8:	3012943a 	slli	r9,r6,16
8110bccc:	a129883a 	add	r20,r20,r4
8110bcd0:	633fffcc 	andi	r12,r12,65535
8110bcd4:	5515883a 	add	r10,r10,r20
8110bcd8:	3006d43a 	srli	r3,r6,16
8110bcdc:	4b13883a 	add	r9,r9,r12
8110bce0:	2ccb383a 	mul	r5,r5,r19
8110bce4:	5100022e 	bgeu	r10,r4,8110bcf0 <__muldf3+0x3b8>
8110bce8:	01000074 	movhi	r4,1
8110bcec:	290b883a 	add	r5,r5,r4
8110bcf0:	802ad43a 	srli	r21,r16,16
8110bcf4:	843fffcc 	andi	r16,r16,65535
8110bcf8:	440d383a 	mul	r6,r8,r16
8110bcfc:	4565383a 	mul	r18,r8,r21
8110bd00:	8349383a 	mul	r4,r16,r13
8110bd04:	500e943a 	slli	r7,r10,16
8110bd08:	3010d43a 	srli	r8,r6,16
8110bd0c:	5028d43a 	srli	r20,r10,16
8110bd10:	2489883a 	add	r4,r4,r18
8110bd14:	8abfffcc 	andi	r10,r17,65535
8110bd18:	3a95883a 	add	r10,r7,r10
8110bd1c:	4119883a 	add	r12,r8,r4
8110bd20:	a169883a 	add	r20,r20,r5
8110bd24:	1a87883a 	add	r3,r3,r10
8110bd28:	6d5b383a 	mul	r13,r13,r21
8110bd2c:	6480022e 	bgeu	r12,r18,8110bd38 <__muldf3+0x400>
8110bd30:	01000074 	movhi	r4,1
8110bd34:	691b883a 	add	r13,r13,r4
8110bd38:	7c25383a 	mul	r18,r15,r16
8110bd3c:	7d4b383a 	mul	r5,r15,r21
8110bd40:	84cf383a 	mul	r7,r16,r19
8110bd44:	901ed43a 	srli	r15,r18,16
8110bd48:	6008d43a 	srli	r4,r12,16
8110bd4c:	6010943a 	slli	r8,r12,16
8110bd50:	394f883a 	add	r7,r7,r5
8110bd54:	333fffcc 	andi	r12,r6,65535
8110bd58:	79df883a 	add	r15,r15,r7
8110bd5c:	235b883a 	add	r13,r4,r13
8110bd60:	9d63383a 	mul	r17,r19,r21
8110bd64:	4309883a 	add	r4,r8,r12
8110bd68:	7940022e 	bgeu	r15,r5,8110bd74 <__muldf3+0x43c>
8110bd6c:	01400074 	movhi	r5,1
8110bd70:	8963883a 	add	r17,r17,r5
8110bd74:	780a943a 	slli	r5,r15,16
8110bd78:	91bfffcc 	andi	r6,r18,65535
8110bd7c:	70c7883a 	add	r3,r14,r3
8110bd80:	298d883a 	add	r6,r5,r6
8110bd84:	1a8f803a 	cmpltu	r7,r3,r10
8110bd88:	350b883a 	add	r5,r6,r20
8110bd8c:	20c7883a 	add	r3,r4,r3
8110bd90:	3955883a 	add	r10,r7,r5
8110bd94:	1909803a 	cmpltu	r4,r3,r4
8110bd98:	6a91883a 	add	r8,r13,r10
8110bd9c:	780cd43a 	srli	r6,r15,16
8110bda0:	2219883a 	add	r12,r4,r8
8110bda4:	2d0b803a 	cmpltu	r5,r5,r20
8110bda8:	51cf803a 	cmpltu	r7,r10,r7
8110bdac:	29ceb03a 	or	r7,r5,r7
8110bdb0:	4351803a 	cmpltu	r8,r8,r13
8110bdb4:	610b803a 	cmpltu	r5,r12,r4
8110bdb8:	4148b03a 	or	r4,r8,r5
8110bdbc:	398f883a 	add	r7,r7,r6
8110bdc0:	3909883a 	add	r4,r7,r4
8110bdc4:	1810927a 	slli	r8,r3,9
8110bdc8:	2449883a 	add	r4,r4,r17
8110bdcc:	2008927a 	slli	r4,r4,9
8110bdd0:	6022d5fa 	srli	r17,r12,23
8110bdd4:	1806d5fa 	srli	r3,r3,23
8110bdd8:	4252b03a 	or	r9,r8,r9
8110bddc:	600a927a 	slli	r5,r12,9
8110bde0:	4810c03a 	cmpne	r8,r9,zero
8110bde4:	2462b03a 	or	r17,r4,r17
8110bde8:	40c6b03a 	or	r3,r8,r3
8110bdec:	8900402c 	andhi	r4,r17,256
8110bdf0:	1950b03a 	or	r8,r3,r5
8110bdf4:	20000726 	beq	r4,zero,8110be14 <__muldf3+0x4dc>
8110bdf8:	4006d07a 	srli	r3,r8,1
8110bdfc:	880497fa 	slli	r2,r17,31
8110be00:	4200004c 	andi	r8,r8,1
8110be04:	8822d07a 	srli	r17,r17,1
8110be08:	1a10b03a 	or	r8,r3,r8
8110be0c:	1210b03a 	or	r8,r2,r8
8110be10:	5805883a 	mov	r2,r11
8110be14:	1140ffc4 	addi	r5,r2,1023
8110be18:	0140440e 	bge	zero,r5,8110bf2c <__muldf3+0x5f4>
8110be1c:	40c001cc 	andi	r3,r8,7
8110be20:	18000726 	beq	r3,zero,8110be40 <__muldf3+0x508>
8110be24:	40c003cc 	andi	r3,r8,15
8110be28:	01000104 	movi	r4,4
8110be2c:	19000426 	beq	r3,r4,8110be40 <__muldf3+0x508>
8110be30:	4107883a 	add	r3,r8,r4
8110be34:	1a11803a 	cmpltu	r8,r3,r8
8110be38:	8a23883a 	add	r17,r17,r8
8110be3c:	1811883a 	mov	r8,r3
8110be40:	88c0402c 	andhi	r3,r17,256
8110be44:	18000426 	beq	r3,zero,8110be58 <__muldf3+0x520>
8110be48:	11410004 	addi	r5,r2,1024
8110be4c:	00bfc034 	movhi	r2,65280
8110be50:	10bfffc4 	addi	r2,r2,-1
8110be54:	88a2703a 	and	r17,r17,r2
8110be58:	0081ff84 	movi	r2,2046
8110be5c:	117f6416 	blt	r2,r5,8110bbf0 <__reset+0xfb0ebbf0>
8110be60:	8828977a 	slli	r20,r17,29
8110be64:	4010d0fa 	srli	r8,r8,3
8110be68:	8822927a 	slli	r17,r17,9
8110be6c:	2881ffcc 	andi	r2,r5,2047
8110be70:	a228b03a 	or	r20,r20,r8
8110be74:	880ad33a 	srli	r5,r17,12
8110be78:	b02b883a 	mov	r21,r22
8110be7c:	003f0d06 	br	8110bab4 <__reset+0xfb0ebab4>
8110be80:	8080022c 	andhi	r2,r16,8
8110be84:	10000926 	beq	r2,zero,8110beac <__muldf3+0x574>
8110be88:	8880022c 	andhi	r2,r17,8
8110be8c:	1000071e 	bne	r2,zero,8110beac <__muldf3+0x574>
8110be90:	00800434 	movhi	r2,16
8110be94:	89400234 	orhi	r5,r17,8
8110be98:	10bfffc4 	addi	r2,r2,-1
8110be9c:	b82b883a 	mov	r21,r23
8110bea0:	288a703a 	and	r5,r5,r2
8110bea4:	4029883a 	mov	r20,r8
8110bea8:	003f6806 	br	8110bc4c <__reset+0xfb0ebc4c>
8110beac:	00800434 	movhi	r2,16
8110beb0:	81400234 	orhi	r5,r16,8
8110beb4:	10bfffc4 	addi	r2,r2,-1
8110beb8:	288a703a 	and	r5,r5,r2
8110bebc:	003f6306 	br	8110bc4c <__reset+0xfb0ebc4c>
8110bec0:	147ff604 	addi	r17,r2,-40
8110bec4:	3462983a 	sll	r17,r6,r17
8110bec8:	0011883a 	mov	r8,zero
8110becc:	003f4406 	br	8110bbe0 <__reset+0xfb0ebbe0>
8110bed0:	3009883a 	mov	r4,r6
8110bed4:	d9800215 	stw	r6,8(sp)
8110bed8:	da400115 	stw	r9,4(sp)
8110bedc:	da800015 	stw	r10,0(sp)
8110bee0:	110c3080 	call	8110c308 <__clzsi2>
8110bee4:	10800804 	addi	r2,r2,32
8110bee8:	da800017 	ldw	r10,0(sp)
8110beec:	da400117 	ldw	r9,4(sp)
8110bef0:	d9800217 	ldw	r6,8(sp)
8110bef4:	003f3006 	br	8110bbb8 <__reset+0xfb0ebbb8>
8110bef8:	143ff604 	addi	r16,r2,-40
8110befc:	9c20983a 	sll	r16,r19,r16
8110bf00:	0029883a 	mov	r20,zero
8110bf04:	003f1606 	br	8110bb60 <__reset+0xfb0ebb60>
8110bf08:	d9800215 	stw	r6,8(sp)
8110bf0c:	d9c00015 	stw	r7,0(sp)
8110bf10:	da400115 	stw	r9,4(sp)
8110bf14:	110c3080 	call	8110c308 <__clzsi2>
8110bf18:	10800804 	addi	r2,r2,32
8110bf1c:	da400117 	ldw	r9,4(sp)
8110bf20:	d9c00017 	ldw	r7,0(sp)
8110bf24:	d9800217 	ldw	r6,8(sp)
8110bf28:	003f0306 	br	8110bb38 <__reset+0xfb0ebb38>
8110bf2c:	00c00044 	movi	r3,1
8110bf30:	1947c83a 	sub	r3,r3,r5
8110bf34:	00800e04 	movi	r2,56
8110bf38:	10feda16 	blt	r2,r3,8110baa4 <__reset+0xfb0ebaa4>
8110bf3c:	008007c4 	movi	r2,31
8110bf40:	10c01b16 	blt	r2,r3,8110bfb0 <__muldf3+0x678>
8110bf44:	00800804 	movi	r2,32
8110bf48:	10c5c83a 	sub	r2,r2,r3
8110bf4c:	888a983a 	sll	r5,r17,r2
8110bf50:	40c8d83a 	srl	r4,r8,r3
8110bf54:	4084983a 	sll	r2,r8,r2
8110bf58:	88e2d83a 	srl	r17,r17,r3
8110bf5c:	2906b03a 	or	r3,r5,r4
8110bf60:	1004c03a 	cmpne	r2,r2,zero
8110bf64:	1886b03a 	or	r3,r3,r2
8110bf68:	188001cc 	andi	r2,r3,7
8110bf6c:	10000726 	beq	r2,zero,8110bf8c <__muldf3+0x654>
8110bf70:	188003cc 	andi	r2,r3,15
8110bf74:	01000104 	movi	r4,4
8110bf78:	11000426 	beq	r2,r4,8110bf8c <__muldf3+0x654>
8110bf7c:	1805883a 	mov	r2,r3
8110bf80:	10c00104 	addi	r3,r2,4
8110bf84:	1885803a 	cmpltu	r2,r3,r2
8110bf88:	88a3883a 	add	r17,r17,r2
8110bf8c:	8880202c 	andhi	r2,r17,128
8110bf90:	10001c26 	beq	r2,zero,8110c004 <__muldf3+0x6cc>
8110bf94:	b02b883a 	mov	r21,r22
8110bf98:	00800044 	movi	r2,1
8110bf9c:	000b883a 	mov	r5,zero
8110bfa0:	0029883a 	mov	r20,zero
8110bfa4:	003ec306 	br	8110bab4 <__reset+0xfb0ebab4>
8110bfa8:	5805883a 	mov	r2,r11
8110bfac:	003f9906 	br	8110be14 <__reset+0xfb0ebe14>
8110bfb0:	00bff844 	movi	r2,-31
8110bfb4:	1145c83a 	sub	r2,r2,r5
8110bfb8:	8888d83a 	srl	r4,r17,r2
8110bfbc:	00800804 	movi	r2,32
8110bfc0:	18801a26 	beq	r3,r2,8110c02c <__muldf3+0x6f4>
8110bfc4:	00801004 	movi	r2,64
8110bfc8:	10c5c83a 	sub	r2,r2,r3
8110bfcc:	8884983a 	sll	r2,r17,r2
8110bfd0:	1204b03a 	or	r2,r2,r8
8110bfd4:	1004c03a 	cmpne	r2,r2,zero
8110bfd8:	2084b03a 	or	r2,r4,r2
8110bfdc:	144001cc 	andi	r17,r2,7
8110bfe0:	88000d1e 	bne	r17,zero,8110c018 <__muldf3+0x6e0>
8110bfe4:	000b883a 	mov	r5,zero
8110bfe8:	1028d0fa 	srli	r20,r2,3
8110bfec:	b02b883a 	mov	r21,r22
8110bff0:	0005883a 	mov	r2,zero
8110bff4:	a468b03a 	or	r20,r20,r17
8110bff8:	003eae06 	br	8110bab4 <__reset+0xfb0ebab4>
8110bffc:	1007883a 	mov	r3,r2
8110c000:	0023883a 	mov	r17,zero
8110c004:	880a927a 	slli	r5,r17,9
8110c008:	1805883a 	mov	r2,r3
8110c00c:	8822977a 	slli	r17,r17,29
8110c010:	280ad33a 	srli	r5,r5,12
8110c014:	003ff406 	br	8110bfe8 <__reset+0xfb0ebfe8>
8110c018:	10c003cc 	andi	r3,r2,15
8110c01c:	01000104 	movi	r4,4
8110c020:	193ff626 	beq	r3,r4,8110bffc <__reset+0xfb0ebffc>
8110c024:	0023883a 	mov	r17,zero
8110c028:	003fd506 	br	8110bf80 <__reset+0xfb0ebf80>
8110c02c:	0005883a 	mov	r2,zero
8110c030:	003fe706 	br	8110bfd0 <__reset+0xfb0ebfd0>
8110c034:	00800434 	movhi	r2,16
8110c038:	89400234 	orhi	r5,r17,8
8110c03c:	10bfffc4 	addi	r2,r2,-1
8110c040:	b02b883a 	mov	r21,r22
8110c044:	288a703a 	and	r5,r5,r2
8110c048:	4029883a 	mov	r20,r8
8110c04c:	003eff06 	br	8110bc4c <__reset+0xfb0ebc4c>

8110c050 <__extendsfdf2>:
8110c050:	200ad5fa 	srli	r5,r4,23
8110c054:	defffd04 	addi	sp,sp,-12
8110c058:	dc400115 	stw	r17,4(sp)
8110c05c:	29403fcc 	andi	r5,r5,255
8110c060:	29800044 	addi	r6,r5,1
8110c064:	04402034 	movhi	r17,128
8110c068:	dc000015 	stw	r16,0(sp)
8110c06c:	8c7fffc4 	addi	r17,r17,-1
8110c070:	dfc00215 	stw	ra,8(sp)
8110c074:	31803fcc 	andi	r6,r6,255
8110c078:	00800044 	movi	r2,1
8110c07c:	8922703a 	and	r17,r17,r4
8110c080:	2020d7fa 	srli	r16,r4,31
8110c084:	1180110e 	bge	r2,r6,8110c0cc <__extendsfdf2+0x7c>
8110c088:	880cd0fa 	srli	r6,r17,3
8110c08c:	8822977a 	slli	r17,r17,29
8110c090:	2940e004 	addi	r5,r5,896
8110c094:	2941ffcc 	andi	r5,r5,2047
8110c098:	2804953a 	slli	r2,r5,20
8110c09c:	01400434 	movhi	r5,16
8110c0a0:	800697fa 	slli	r3,r16,31
8110c0a4:	297fffc4 	addi	r5,r5,-1
8110c0a8:	314a703a 	and	r5,r6,r5
8110c0ac:	288ab03a 	or	r5,r5,r2
8110c0b0:	28c6b03a 	or	r3,r5,r3
8110c0b4:	8805883a 	mov	r2,r17
8110c0b8:	dfc00217 	ldw	ra,8(sp)
8110c0bc:	dc400117 	ldw	r17,4(sp)
8110c0c0:	dc000017 	ldw	r16,0(sp)
8110c0c4:	dec00304 	addi	sp,sp,12
8110c0c8:	f800283a 	ret
8110c0cc:	2800111e 	bne	r5,zero,8110c114 <__extendsfdf2+0xc4>
8110c0d0:	88001c26 	beq	r17,zero,8110c144 <__extendsfdf2+0xf4>
8110c0d4:	8809883a 	mov	r4,r17
8110c0d8:	110c3080 	call	8110c308 <__clzsi2>
8110c0dc:	00c00284 	movi	r3,10
8110c0e0:	18801b16 	blt	r3,r2,8110c150 <__extendsfdf2+0x100>
8110c0e4:	018002c4 	movi	r6,11
8110c0e8:	308dc83a 	sub	r6,r6,r2
8110c0ec:	11000544 	addi	r4,r2,21
8110c0f0:	8986d83a 	srl	r3,r17,r6
8110c0f4:	8922983a 	sll	r17,r17,r4
8110c0f8:	0180e244 	movi	r6,905
8110c0fc:	01400434 	movhi	r5,16
8110c100:	3085c83a 	sub	r2,r6,r2
8110c104:	297fffc4 	addi	r5,r5,-1
8110c108:	194c703a 	and	r6,r3,r5
8110c10c:	1141ffcc 	andi	r5,r2,2047
8110c110:	003fe006 	br	8110c094 <__reset+0xfb0ec094>
8110c114:	88000826 	beq	r17,zero,8110c138 <__extendsfdf2+0xe8>
8110c118:	880cd0fa 	srli	r6,r17,3
8110c11c:	00800434 	movhi	r2,16
8110c120:	10bfffc4 	addi	r2,r2,-1
8110c124:	31800234 	orhi	r6,r6,8
8110c128:	8822977a 	slli	r17,r17,29
8110c12c:	308c703a 	and	r6,r6,r2
8110c130:	0141ffc4 	movi	r5,2047
8110c134:	003fd706 	br	8110c094 <__reset+0xfb0ec094>
8110c138:	0141ffc4 	movi	r5,2047
8110c13c:	000d883a 	mov	r6,zero
8110c140:	003fd406 	br	8110c094 <__reset+0xfb0ec094>
8110c144:	000b883a 	mov	r5,zero
8110c148:	000d883a 	mov	r6,zero
8110c14c:	003fd106 	br	8110c094 <__reset+0xfb0ec094>
8110c150:	11bffd44 	addi	r6,r2,-11
8110c154:	8986983a 	sll	r3,r17,r6
8110c158:	0023883a 	mov	r17,zero
8110c15c:	003fe606 	br	8110c0f8 <__reset+0xfb0ec0f8>

8110c160 <__truncdfsf2>:
8110c160:	2810d53a 	srli	r8,r5,20
8110c164:	01c00434 	movhi	r7,16
8110c168:	39ffffc4 	addi	r7,r7,-1
8110c16c:	29ce703a 	and	r7,r5,r7
8110c170:	4201ffcc 	andi	r8,r8,2047
8110c174:	380e90fa 	slli	r7,r7,3
8110c178:	200cd77a 	srli	r6,r4,29
8110c17c:	42400044 	addi	r9,r8,1
8110c180:	4a41ffcc 	andi	r9,r9,2047
8110c184:	00c00044 	movi	r3,1
8110c188:	280ad7fa 	srli	r5,r5,31
8110c18c:	31ceb03a 	or	r7,r6,r7
8110c190:	200490fa 	slli	r2,r4,3
8110c194:	1a40230e 	bge	r3,r9,8110c224 <__truncdfsf2+0xc4>
8110c198:	40ff2004 	addi	r3,r8,-896
8110c19c:	01803f84 	movi	r6,254
8110c1a0:	30c01516 	blt	r6,r3,8110c1f8 <__truncdfsf2+0x98>
8110c1a4:	00c0380e 	bge	zero,r3,8110c288 <__truncdfsf2+0x128>
8110c1a8:	200c91ba 	slli	r6,r4,6
8110c1ac:	380e90fa 	slli	r7,r7,3
8110c1b0:	1004d77a 	srli	r2,r2,29
8110c1b4:	300cc03a 	cmpne	r6,r6,zero
8110c1b8:	31ccb03a 	or	r6,r6,r7
8110c1bc:	308cb03a 	or	r6,r6,r2
8110c1c0:	308001cc 	andi	r2,r6,7
8110c1c4:	10000426 	beq	r2,zero,8110c1d8 <__truncdfsf2+0x78>
8110c1c8:	308003cc 	andi	r2,r6,15
8110c1cc:	01000104 	movi	r4,4
8110c1d0:	11000126 	beq	r2,r4,8110c1d8 <__truncdfsf2+0x78>
8110c1d4:	31800104 	addi	r6,r6,4
8110c1d8:	3081002c 	andhi	r2,r6,1024
8110c1dc:	10001626 	beq	r2,zero,8110c238 <__truncdfsf2+0xd8>
8110c1e0:	18c00044 	addi	r3,r3,1
8110c1e4:	00803fc4 	movi	r2,255
8110c1e8:	18800326 	beq	r3,r2,8110c1f8 <__truncdfsf2+0x98>
8110c1ec:	300c91ba 	slli	r6,r6,6
8110c1f0:	300cd27a 	srli	r6,r6,9
8110c1f4:	00000206 	br	8110c200 <__truncdfsf2+0xa0>
8110c1f8:	00ffffc4 	movi	r3,-1
8110c1fc:	000d883a 	mov	r6,zero
8110c200:	18c03fcc 	andi	r3,r3,255
8110c204:	180895fa 	slli	r4,r3,23
8110c208:	00c02034 	movhi	r3,128
8110c20c:	280a97fa 	slli	r5,r5,31
8110c210:	18ffffc4 	addi	r3,r3,-1
8110c214:	30c6703a 	and	r3,r6,r3
8110c218:	1906b03a 	or	r3,r3,r4
8110c21c:	1944b03a 	or	r2,r3,r5
8110c220:	f800283a 	ret
8110c224:	40000b1e 	bne	r8,zero,8110c254 <__truncdfsf2+0xf4>
8110c228:	388cb03a 	or	r6,r7,r2
8110c22c:	0007883a 	mov	r3,zero
8110c230:	30000426 	beq	r6,zero,8110c244 <__truncdfsf2+0xe4>
8110c234:	01800144 	movi	r6,5
8110c238:	00803fc4 	movi	r2,255
8110c23c:	300cd0fa 	srli	r6,r6,3
8110c240:	18800a26 	beq	r3,r2,8110c26c <__truncdfsf2+0x10c>
8110c244:	00802034 	movhi	r2,128
8110c248:	10bfffc4 	addi	r2,r2,-1
8110c24c:	308c703a 	and	r6,r6,r2
8110c250:	003feb06 	br	8110c200 <__reset+0xfb0ec200>
8110c254:	3888b03a 	or	r4,r7,r2
8110c258:	203fe726 	beq	r4,zero,8110c1f8 <__reset+0xfb0ec1f8>
8110c25c:	380c90fa 	slli	r6,r7,3
8110c260:	00c03fc4 	movi	r3,255
8110c264:	31808034 	orhi	r6,r6,512
8110c268:	003fd506 	br	8110c1c0 <__reset+0xfb0ec1c0>
8110c26c:	303fe226 	beq	r6,zero,8110c1f8 <__reset+0xfb0ec1f8>
8110c270:	00802034 	movhi	r2,128
8110c274:	31801034 	orhi	r6,r6,64
8110c278:	10bfffc4 	addi	r2,r2,-1
8110c27c:	00ffffc4 	movi	r3,-1
8110c280:	308c703a 	and	r6,r6,r2
8110c284:	003fde06 	br	8110c200 <__reset+0xfb0ec200>
8110c288:	013ffa44 	movi	r4,-23
8110c28c:	19000e16 	blt	r3,r4,8110c2c8 <__truncdfsf2+0x168>
8110c290:	01000784 	movi	r4,30
8110c294:	20c9c83a 	sub	r4,r4,r3
8110c298:	018007c4 	movi	r6,31
8110c29c:	39c02034 	orhi	r7,r7,128
8110c2a0:	31000b16 	blt	r6,r4,8110c2d0 <__truncdfsf2+0x170>
8110c2a4:	423f2084 	addi	r8,r8,-894
8110c2a8:	120c983a 	sll	r6,r2,r8
8110c2ac:	3a0e983a 	sll	r7,r7,r8
8110c2b0:	1104d83a 	srl	r2,r2,r4
8110c2b4:	300cc03a 	cmpne	r6,r6,zero
8110c2b8:	31ceb03a 	or	r7,r6,r7
8110c2bc:	388cb03a 	or	r6,r7,r2
8110c2c0:	0007883a 	mov	r3,zero
8110c2c4:	003fbe06 	br	8110c1c0 <__reset+0xfb0ec1c0>
8110c2c8:	0007883a 	mov	r3,zero
8110c2cc:	003fd906 	br	8110c234 <__reset+0xfb0ec234>
8110c2d0:	01bfff84 	movi	r6,-2
8110c2d4:	30cdc83a 	sub	r6,r6,r3
8110c2d8:	00c00804 	movi	r3,32
8110c2dc:	398cd83a 	srl	r6,r7,r6
8110c2e0:	20c00726 	beq	r4,r3,8110c300 <__truncdfsf2+0x1a0>
8110c2e4:	423f2884 	addi	r8,r8,-862
8110c2e8:	3a0e983a 	sll	r7,r7,r8
8110c2ec:	3884b03a 	or	r2,r7,r2
8110c2f0:	1004c03a 	cmpne	r2,r2,zero
8110c2f4:	118cb03a 	or	r6,r2,r6
8110c2f8:	0007883a 	mov	r3,zero
8110c2fc:	003fb006 	br	8110c1c0 <__reset+0xfb0ec1c0>
8110c300:	000f883a 	mov	r7,zero
8110c304:	003ff906 	br	8110c2ec <__reset+0xfb0ec2ec>

8110c308 <__clzsi2>:
8110c308:	00bfffd4 	movui	r2,65535
8110c30c:	11000536 	bltu	r2,r4,8110c324 <__clzsi2+0x1c>
8110c310:	00803fc4 	movi	r2,255
8110c314:	11000f36 	bltu	r2,r4,8110c354 <__clzsi2+0x4c>
8110c318:	00800804 	movi	r2,32
8110c31c:	0007883a 	mov	r3,zero
8110c320:	00000506 	br	8110c338 <__clzsi2+0x30>
8110c324:	00804034 	movhi	r2,256
8110c328:	10bfffc4 	addi	r2,r2,-1
8110c32c:	11000c2e 	bgeu	r2,r4,8110c360 <__clzsi2+0x58>
8110c330:	00800204 	movi	r2,8
8110c334:	00c00604 	movi	r3,24
8110c338:	20c8d83a 	srl	r4,r4,r3
8110c33c:	00e044f4 	movhi	r3,33043
8110c340:	18dc7604 	addi	r3,r3,29144
8110c344:	1909883a 	add	r4,r3,r4
8110c348:	20c00003 	ldbu	r3,0(r4)
8110c34c:	10c5c83a 	sub	r2,r2,r3
8110c350:	f800283a 	ret
8110c354:	00800604 	movi	r2,24
8110c358:	00c00204 	movi	r3,8
8110c35c:	003ff606 	br	8110c338 <__reset+0xfb0ec338>
8110c360:	00800404 	movi	r2,16
8110c364:	1007883a 	mov	r3,r2
8110c368:	003ff306 	br	8110c338 <__reset+0xfb0ec338>

8110c36c <atoi>:
8110c36c:	01800284 	movi	r6,10
8110c370:	000b883a 	mov	r5,zero
8110c374:	110e07c1 	jmpi	8110e07c <strtol>

8110c378 <_atoi_r>:
8110c378:	01c00284 	movi	r7,10
8110c37c:	000d883a 	mov	r6,zero
8110c380:	110de441 	jmpi	8110de44 <_strtol_r>

8110c384 <_fopen_r>:
8110c384:	defffa04 	addi	sp,sp,-24
8110c388:	3005883a 	mov	r2,r6
8110c38c:	dcc00415 	stw	r19,16(sp)
8110c390:	d80d883a 	mov	r6,sp
8110c394:	2827883a 	mov	r19,r5
8110c398:	100b883a 	mov	r5,r2
8110c39c:	dc800315 	stw	r18,12(sp)
8110c3a0:	dfc00515 	stw	ra,20(sp)
8110c3a4:	dc400215 	stw	r17,8(sp)
8110c3a8:	dc000115 	stw	r16,4(sp)
8110c3ac:	2025883a 	mov	r18,r4
8110c3b0:	1115ea40 	call	81115ea4 <__sflags>
8110c3b4:	10002726 	beq	r2,zero,8110c454 <_fopen_r+0xd0>
8110c3b8:	9009883a 	mov	r4,r18
8110c3bc:	1023883a 	mov	r17,r2
8110c3c0:	1115d240 	call	81115d24 <__sfp>
8110c3c4:	1021883a 	mov	r16,r2
8110c3c8:	10002226 	beq	r2,zero,8110c454 <_fopen_r+0xd0>
8110c3cc:	d9800017 	ldw	r6,0(sp)
8110c3d0:	01c06d84 	movi	r7,438
8110c3d4:	980b883a 	mov	r5,r19
8110c3d8:	9009883a 	mov	r4,r18
8110c3dc:	110d6f00 	call	8110d6f0 <_open_r>
8110c3e0:	10001916 	blt	r2,zero,8110c448 <_fopen_r+0xc4>
8110c3e4:	8080038d 	sth	r2,14(r16)
8110c3e8:	00a04474 	movhi	r2,33041
8110c3ec:	10b70904 	addi	r2,r2,-9180
8110c3f0:	80800815 	stw	r2,32(r16)
8110c3f4:	00a04474 	movhi	r2,33041
8110c3f8:	10b72004 	addi	r2,r2,-9088
8110c3fc:	80800915 	stw	r2,36(r16)
8110c400:	00a04474 	movhi	r2,33041
8110c404:	10b73f04 	addi	r2,r2,-8964
8110c408:	80800a15 	stw	r2,40(r16)
8110c40c:	00a04474 	movhi	r2,33041
8110c410:	10b75604 	addi	r2,r2,-8872
8110c414:	8440030d 	sth	r17,12(r16)
8110c418:	84000715 	stw	r16,28(r16)
8110c41c:	80800b15 	stw	r2,44(r16)
8110c420:	8c40400c 	andi	r17,r17,256
8110c424:	88000d1e 	bne	r17,zero,8110c45c <_fopen_r+0xd8>
8110c428:	8005883a 	mov	r2,r16
8110c42c:	dfc00517 	ldw	ra,20(sp)
8110c430:	dcc00417 	ldw	r19,16(sp)
8110c434:	dc800317 	ldw	r18,12(sp)
8110c438:	dc400217 	ldw	r17,8(sp)
8110c43c:	dc000117 	ldw	r16,4(sp)
8110c440:	dec00604 	addi	sp,sp,24
8110c444:	f800283a 	ret
8110c448:	1115e640 	call	81115e64 <__sfp_lock_acquire>
8110c44c:	8000030d 	sth	zero,12(r16)
8110c450:	1115e680 	call	81115e68 <__sfp_lock_release>
8110c454:	0005883a 	mov	r2,zero
8110c458:	003ff406 	br	8110c42c <__reset+0xfb0ec42c>
8110c45c:	01c00084 	movi	r7,2
8110c460:	000d883a 	mov	r6,zero
8110c464:	800b883a 	mov	r5,r16
8110c468:	9009883a 	mov	r4,r18
8110c46c:	110c4dc0 	call	8110c4dc <_fseek_r>
8110c470:	8005883a 	mov	r2,r16
8110c474:	003fed06 	br	8110c42c <__reset+0xfb0ec42c>

8110c478 <fopen>:
8110c478:	00a04534 	movhi	r2,33044
8110c47c:	10a65b04 	addi	r2,r2,-26260
8110c480:	280d883a 	mov	r6,r5
8110c484:	200b883a 	mov	r5,r4
8110c488:	11000017 	ldw	r4,0(r2)
8110c48c:	110c3841 	jmpi	8110c384 <_fopen_r>

8110c490 <_fprintf_r>:
8110c490:	defffe04 	addi	sp,sp,-8
8110c494:	2809883a 	mov	r4,r5
8110c498:	300b883a 	mov	r5,r6
8110c49c:	dfc00015 	stw	ra,0(sp)
8110c4a0:	d9c00115 	stw	r7,4(sp)
8110c4a4:	d9800104 	addi	r6,sp,4
8110c4a8:	11124680 	call	81112468 <__vfprintf_internal>
8110c4ac:	dfc00017 	ldw	ra,0(sp)
8110c4b0:	dec00204 	addi	sp,sp,8
8110c4b4:	f800283a 	ret

8110c4b8 <fprintf>:
8110c4b8:	defffd04 	addi	sp,sp,-12
8110c4bc:	dfc00015 	stw	ra,0(sp)
8110c4c0:	d9800115 	stw	r6,4(sp)
8110c4c4:	d9c00215 	stw	r7,8(sp)
8110c4c8:	d9800104 	addi	r6,sp,4
8110c4cc:	11124680 	call	81112468 <__vfprintf_internal>
8110c4d0:	dfc00017 	ldw	ra,0(sp)
8110c4d4:	dec00304 	addi	sp,sp,12
8110c4d8:	f800283a 	ret

8110c4dc <_fseek_r>:
8110c4dc:	110c4fc1 	jmpi	8110c4fc <_fseeko_r>

8110c4e0 <fseek>:
8110c4e0:	00a04534 	movhi	r2,33044
8110c4e4:	10a65b04 	addi	r2,r2,-26260
8110c4e8:	300f883a 	mov	r7,r6
8110c4ec:	280d883a 	mov	r6,r5
8110c4f0:	200b883a 	mov	r5,r4
8110c4f4:	11000017 	ldw	r4,0(r2)
8110c4f8:	110c4fc1 	jmpi	8110c4fc <_fseeko_r>

8110c4fc <_fseeko_r>:
8110c4fc:	deffe804 	addi	sp,sp,-96
8110c500:	dd401415 	stw	r21,80(sp)
8110c504:	dc801115 	stw	r18,68(sp)
8110c508:	dc401015 	stw	r17,64(sp)
8110c50c:	dc000f15 	stw	r16,60(sp)
8110c510:	dfc01715 	stw	ra,92(sp)
8110c514:	ddc01615 	stw	r23,88(sp)
8110c518:	dd801515 	stw	r22,84(sp)
8110c51c:	dd001315 	stw	r20,76(sp)
8110c520:	dcc01215 	stw	r19,72(sp)
8110c524:	2023883a 	mov	r17,r4
8110c528:	2821883a 	mov	r16,r5
8110c52c:	302b883a 	mov	r21,r6
8110c530:	3825883a 	mov	r18,r7
8110c534:	20000226 	beq	r4,zero,8110c540 <_fseeko_r+0x44>
8110c538:	20800e17 	ldw	r2,56(r4)
8110c53c:	10005a26 	beq	r2,zero,8110c6a8 <_fseeko_r+0x1ac>
8110c540:	8080030b 	ldhu	r2,12(r16)
8110c544:	00c04204 	movi	r3,264
8110c548:	1080420c 	andi	r2,r2,264
8110c54c:	10c05b26 	beq	r2,r3,8110c6bc <_fseeko_r+0x1c0>
8110c550:	85000a17 	ldw	r20,40(r16)
8110c554:	a000f626 	beq	r20,zero,8110c930 <_fseeko_r+0x434>
8110c558:	00800044 	movi	r2,1
8110c55c:	90803e26 	beq	r18,r2,8110c658 <_fseeko_r+0x15c>
8110c560:	00800084 	movi	r2,2
8110c564:	90801026 	beq	r18,r2,8110c5a8 <_fseeko_r+0xac>
8110c568:	90000f26 	beq	r18,zero,8110c5a8 <_fseeko_r+0xac>
8110c56c:	00800584 	movi	r2,22
8110c570:	88800015 	stw	r2,0(r17)
8110c574:	04ffffc4 	movi	r19,-1
8110c578:	9805883a 	mov	r2,r19
8110c57c:	dfc01717 	ldw	ra,92(sp)
8110c580:	ddc01617 	ldw	r23,88(sp)
8110c584:	dd801517 	ldw	r22,84(sp)
8110c588:	dd401417 	ldw	r21,80(sp)
8110c58c:	dd001317 	ldw	r20,76(sp)
8110c590:	dcc01217 	ldw	r19,72(sp)
8110c594:	dc801117 	ldw	r18,68(sp)
8110c598:	dc401017 	ldw	r17,64(sp)
8110c59c:	dc000f17 	ldw	r16,60(sp)
8110c5a0:	dec01804 	addi	sp,sp,96
8110c5a4:	f800283a 	ret
8110c5a8:	80800417 	ldw	r2,16(r16)
8110c5ac:	002f883a 	mov	r23,zero
8110c5b0:	0027883a 	mov	r19,zero
8110c5b4:	1000cb26 	beq	r2,zero,8110c8e4 <_fseeko_r+0x3e8>
8110c5b8:	8080030b 	ldhu	r2,12(r16)
8110c5bc:	10c2068c 	andi	r3,r2,2074
8110c5c0:	1800071e 	bne	r3,zero,8110c5e0 <_fseeko_r+0xe4>
8110c5c4:	10c1000c 	andi	r3,r2,1024
8110c5c8:	1800451e 	bne	r3,zero,8110c6e0 <_fseeko_r+0x1e4>
8110c5cc:	00e04474 	movhi	r3,33041
8110c5d0:	18f73f04 	addi	r3,r3,-8964
8110c5d4:	a0c0b726 	beq	r20,r3,8110c8b4 <_fseeko_r+0x3b8>
8110c5d8:	10820014 	ori	r2,r2,2048
8110c5dc:	8080030d 	sth	r2,12(r16)
8110c5e0:	800b883a 	mov	r5,r16
8110c5e4:	8809883a 	mov	r4,r17
8110c5e8:	1115a780 	call	81115a78 <_fflush_r>
8110c5ec:	1027883a 	mov	r19,r2
8110c5f0:	103fe01e 	bne	r2,zero,8110c574 <__reset+0xfb0ec574>
8110c5f4:	81400717 	ldw	r5,28(r16)
8110c5f8:	900f883a 	mov	r7,r18
8110c5fc:	a80d883a 	mov	r6,r21
8110c600:	8809883a 	mov	r4,r17
8110c604:	a03ee83a 	callr	r20
8110c608:	00ffffc4 	movi	r3,-1
8110c60c:	10ffd926 	beq	r2,r3,8110c574 <__reset+0xfb0ec574>
8110c610:	81400c17 	ldw	r5,48(r16)
8110c614:	28000526 	beq	r5,zero,8110c62c <_fseeko_r+0x130>
8110c618:	80801004 	addi	r2,r16,64
8110c61c:	28800226 	beq	r5,r2,8110c628 <_fseeko_r+0x12c>
8110c620:	8809883a 	mov	r4,r17
8110c624:	11162d40 	call	811162d4 <_free_r>
8110c628:	80000c15 	stw	zero,48(r16)
8110c62c:	8080030b 	ldhu	r2,12(r16)
8110c630:	80c00417 	ldw	r3,16(r16)
8110c634:	80000115 	stw	zero,4(r16)
8110c638:	10bdf7cc 	andi	r2,r2,63455
8110c63c:	80c00015 	stw	r3,0(r16)
8110c640:	8080030d 	sth	r2,12(r16)
8110c644:	01800204 	movi	r6,8
8110c648:	000b883a 	mov	r5,zero
8110c64c:	81001704 	addi	r4,r16,92
8110c650:	110d5c80 	call	8110d5c8 <memset>
8110c654:	003fc806 	br	8110c578 <__reset+0xfb0ec578>
8110c658:	800b883a 	mov	r5,r16
8110c65c:	8809883a 	mov	r4,r17
8110c660:	1115a780 	call	81115a78 <_fflush_r>
8110c664:	8080030b 	ldhu	r2,12(r16)
8110c668:	10c4000c 	andi	r3,r2,4096
8110c66c:	18008726 	beq	r3,zero,8110c88c <_fseeko_r+0x390>
8110c670:	84c01417 	ldw	r19,80(r16)
8110c674:	10c0010c 	andi	r3,r2,4
8110c678:	1800431e 	bne	r3,zero,8110c788 <_fseeko_r+0x28c>
8110c67c:	1080020c 	andi	r2,r2,8
8110c680:	10008026 	beq	r2,zero,8110c884 <_fseeko_r+0x388>
8110c684:	80c00017 	ldw	r3,0(r16)
8110c688:	80800417 	ldw	r2,16(r16)
8110c68c:	18000226 	beq	r3,zero,8110c698 <_fseeko_r+0x19c>
8110c690:	1887c83a 	sub	r3,r3,r2
8110c694:	98e7883a 	add	r19,r19,r3
8110c698:	aceb883a 	add	r21,r21,r19
8110c69c:	05c00044 	movi	r23,1
8110c6a0:	0025883a 	mov	r18,zero
8110c6a4:	003fc306 	br	8110c5b4 <__reset+0xfb0ec5b4>
8110c6a8:	1115e540 	call	81115e54 <__sinit>
8110c6ac:	8080030b 	ldhu	r2,12(r16)
8110c6b0:	00c04204 	movi	r3,264
8110c6b4:	1080420c 	andi	r2,r2,264
8110c6b8:	10ffa51e 	bne	r2,r3,8110c550 <__reset+0xfb0ec550>
8110c6bc:	800b883a 	mov	r5,r16
8110c6c0:	8809883a 	mov	r4,r17
8110c6c4:	1115a780 	call	81115a78 <_fflush_r>
8110c6c8:	003fa106 	br	8110c550 <__reset+0xfb0ec550>
8110c6cc:	8080030b 	ldhu	r2,12(r16)
8110c6d0:	00c10004 	movi	r3,1024
8110c6d4:	80c01315 	stw	r3,76(r16)
8110c6d8:	10c4b03a 	or	r2,r2,r3
8110c6dc:	8080030d 	sth	r2,12(r16)
8110c6e0:	9000311e 	bne	r18,zero,8110c7a8 <_fseeko_r+0x2ac>
8110c6e4:	a82d883a 	mov	r22,r21
8110c6e8:	b800371e 	bne	r23,zero,8110c7c8 <_fseeko_r+0x2cc>
8110c6ec:	8080030b 	ldhu	r2,12(r16)
8110c6f0:	1084000c 	andi	r2,r2,4096
8110c6f4:	10007f26 	beq	r2,zero,8110c8f4 <_fseeko_r+0x3f8>
8110c6f8:	80801417 	ldw	r2,80(r16)
8110c6fc:	81800117 	ldw	r6,4(r16)
8110c700:	81400c17 	ldw	r5,48(r16)
8110c704:	11a7c83a 	sub	r19,r2,r6
8110c708:	28008226 	beq	r5,zero,8110c914 <_fseeko_r+0x418>
8110c70c:	81c00f17 	ldw	r7,60(r16)
8110c710:	99e7c83a 	sub	r19,r19,r7
8110c714:	81000e17 	ldw	r4,56(r16)
8110c718:	80800417 	ldw	r2,16(r16)
8110c71c:	99a7883a 	add	r19,r19,r6
8110c720:	2087c83a 	sub	r3,r4,r2
8110c724:	98e7c83a 	sub	r19,r19,r3
8110c728:	38c7883a 	add	r3,r7,r3
8110c72c:	b4c02b16 	blt	r22,r19,8110c7dc <_fseeko_r+0x2e0>
8110c730:	98c9883a 	add	r4,r19,r3
8110c734:	b100292e 	bgeu	r22,r4,8110c7dc <_fseeko_r+0x2e0>
8110c738:	b4e7c83a 	sub	r19,r22,r19
8110c73c:	14c5883a 	add	r2,r2,r19
8110c740:	1ce7c83a 	sub	r19,r3,r19
8110c744:	80800015 	stw	r2,0(r16)
8110c748:	84c00115 	stw	r19,4(r16)
8110c74c:	28000526 	beq	r5,zero,8110c764 <_fseeko_r+0x268>
8110c750:	80801004 	addi	r2,r16,64
8110c754:	28800226 	beq	r5,r2,8110c760 <_fseeko_r+0x264>
8110c758:	8809883a 	mov	r4,r17
8110c75c:	11162d40 	call	811162d4 <_free_r>
8110c760:	80000c15 	stw	zero,48(r16)
8110c764:	8080030b 	ldhu	r2,12(r16)
8110c768:	01800204 	movi	r6,8
8110c76c:	000b883a 	mov	r5,zero
8110c770:	10bff7cc 	andi	r2,r2,65503
8110c774:	8080030d 	sth	r2,12(r16)
8110c778:	81001704 	addi	r4,r16,92
8110c77c:	110d5c80 	call	8110d5c8 <memset>
8110c780:	0027883a 	mov	r19,zero
8110c784:	003f7c06 	br	8110c578 <__reset+0xfb0ec578>
8110c788:	80c00117 	ldw	r3,4(r16)
8110c78c:	80800c17 	ldw	r2,48(r16)
8110c790:	98e7c83a 	sub	r19,r19,r3
8110c794:	10003b26 	beq	r2,zero,8110c884 <_fseeko_r+0x388>
8110c798:	80c00f17 	ldw	r3,60(r16)
8110c79c:	80800417 	ldw	r2,16(r16)
8110c7a0:	98e7c83a 	sub	r19,r19,r3
8110c7a4:	003fbc06 	br	8110c698 <__reset+0xfb0ec698>
8110c7a8:	8140038f 	ldh	r5,14(r16)
8110c7ac:	d80d883a 	mov	r6,sp
8110c7b0:	8809883a 	mov	r4,r17
8110c7b4:	110c95c0 	call	8110c95c <_fstat_r>
8110c7b8:	103f891e 	bne	r2,zero,8110c5e0 <__reset+0xfb0ec5e0>
8110c7bc:	dd800417 	ldw	r22,16(sp)
8110c7c0:	adad883a 	add	r22,r21,r22
8110c7c4:	b83fc926 	beq	r23,zero,8110c6ec <__reset+0xfb0ec6ec>
8110c7c8:	81400c17 	ldw	r5,48(r16)
8110c7cc:	81800117 	ldw	r6,4(r16)
8110c7d0:	28005026 	beq	r5,zero,8110c914 <_fseeko_r+0x418>
8110c7d4:	81c00f17 	ldw	r7,60(r16)
8110c7d8:	003fce06 	br	8110c714 <__reset+0xfb0ec714>
8110c7dc:	84c01317 	ldw	r19,76(r16)
8110c7e0:	81400717 	ldw	r5,28(r16)
8110c7e4:	000f883a 	mov	r7,zero
8110c7e8:	04e7c83a 	sub	r19,zero,r19
8110c7ec:	9da6703a 	and	r19,r19,r22
8110c7f0:	980d883a 	mov	r6,r19
8110c7f4:	8809883a 	mov	r4,r17
8110c7f8:	a03ee83a 	callr	r20
8110c7fc:	00ffffc4 	movi	r3,-1
8110c800:	10ff7726 	beq	r2,r3,8110c5e0 <__reset+0xfb0ec5e0>
8110c804:	80800417 	ldw	r2,16(r16)
8110c808:	81400c17 	ldw	r5,48(r16)
8110c80c:	80000115 	stw	zero,4(r16)
8110c810:	80800015 	stw	r2,0(r16)
8110c814:	28000526 	beq	r5,zero,8110c82c <_fseeko_r+0x330>
8110c818:	80801004 	addi	r2,r16,64
8110c81c:	28800226 	beq	r5,r2,8110c828 <_fseeko_r+0x32c>
8110c820:	8809883a 	mov	r4,r17
8110c824:	11162d40 	call	811162d4 <_free_r>
8110c828:	80000c15 	stw	zero,48(r16)
8110c82c:	8080030b 	ldhu	r2,12(r16)
8110c830:	b4e7c83a 	sub	r19,r22,r19
8110c834:	10bff7cc 	andi	r2,r2,65503
8110c838:	8080030d 	sth	r2,12(r16)
8110c83c:	98000b26 	beq	r19,zero,8110c86c <_fseeko_r+0x370>
8110c840:	800b883a 	mov	r5,r16
8110c844:	8809883a 	mov	r4,r17
8110c848:	110d8cc0 	call	8110d8cc <__srefill_r>
8110c84c:	103f641e 	bne	r2,zero,8110c5e0 <__reset+0xfb0ec5e0>
8110c850:	80800117 	ldw	r2,4(r16)
8110c854:	14ff6236 	bltu	r2,r19,8110c5e0 <__reset+0xfb0ec5e0>
8110c858:	80c00017 	ldw	r3,0(r16)
8110c85c:	14c5c83a 	sub	r2,r2,r19
8110c860:	80800115 	stw	r2,4(r16)
8110c864:	1ce7883a 	add	r19,r3,r19
8110c868:	84c00015 	stw	r19,0(r16)
8110c86c:	01800204 	movi	r6,8
8110c870:	000b883a 	mov	r5,zero
8110c874:	81001704 	addi	r4,r16,92
8110c878:	110d5c80 	call	8110d5c8 <memset>
8110c87c:	0027883a 	mov	r19,zero
8110c880:	003f3d06 	br	8110c578 <__reset+0xfb0ec578>
8110c884:	80800417 	ldw	r2,16(r16)
8110c888:	003f8306 	br	8110c698 <__reset+0xfb0ec698>
8110c88c:	81400717 	ldw	r5,28(r16)
8110c890:	900f883a 	mov	r7,r18
8110c894:	000d883a 	mov	r6,zero
8110c898:	8809883a 	mov	r4,r17
8110c89c:	a03ee83a 	callr	r20
8110c8a0:	1027883a 	mov	r19,r2
8110c8a4:	00bfffc4 	movi	r2,-1
8110c8a8:	98bf3226 	beq	r19,r2,8110c574 <__reset+0xfb0ec574>
8110c8ac:	8080030b 	ldhu	r2,12(r16)
8110c8b0:	003f7006 	br	8110c674 <__reset+0xfb0ec674>
8110c8b4:	8140038f 	ldh	r5,14(r16)
8110c8b8:	283f4716 	blt	r5,zero,8110c5d8 <__reset+0xfb0ec5d8>
8110c8bc:	d80d883a 	mov	r6,sp
8110c8c0:	8809883a 	mov	r4,r17
8110c8c4:	110c95c0 	call	8110c95c <_fstat_r>
8110c8c8:	1000041e 	bne	r2,zero,8110c8dc <_fseeko_r+0x3e0>
8110c8cc:	d8800117 	ldw	r2,4(sp)
8110c8d0:	00e00014 	movui	r3,32768
8110c8d4:	10bc000c 	andi	r2,r2,61440
8110c8d8:	10ff7c26 	beq	r2,r3,8110c6cc <__reset+0xfb0ec6cc>
8110c8dc:	8080030b 	ldhu	r2,12(r16)
8110c8e0:	003f3d06 	br	8110c5d8 <__reset+0xfb0ec5d8>
8110c8e4:	800b883a 	mov	r5,r16
8110c8e8:	8809883a 	mov	r4,r17
8110c8ec:	110cab80 	call	8110cab8 <__smakebuf_r>
8110c8f0:	003f3106 	br	8110c5b8 <__reset+0xfb0ec5b8>
8110c8f4:	81400717 	ldw	r5,28(r16)
8110c8f8:	01c00044 	movi	r7,1
8110c8fc:	000d883a 	mov	r6,zero
8110c900:	8809883a 	mov	r4,r17
8110c904:	a03ee83a 	callr	r20
8110c908:	00ffffc4 	movi	r3,-1
8110c90c:	10ff7b1e 	bne	r2,r3,8110c6fc <__reset+0xfb0ec6fc>
8110c910:	003f3306 	br	8110c5e0 <__reset+0xfb0ec5e0>
8110c914:	80c00017 	ldw	r3,0(r16)
8110c918:	80800417 	ldw	r2,16(r16)
8110c91c:	000b883a 	mov	r5,zero
8110c920:	1887c83a 	sub	r3,r3,r2
8110c924:	98e7c83a 	sub	r19,r19,r3
8110c928:	30c7883a 	add	r3,r6,r3
8110c92c:	003f7f06 	br	8110c72c <__reset+0xfb0ec72c>
8110c930:	00800744 	movi	r2,29
8110c934:	88800015 	stw	r2,0(r17)
8110c938:	04ffffc4 	movi	r19,-1
8110c93c:	003f0e06 	br	8110c578 <__reset+0xfb0ec578>

8110c940 <fseeko>:
8110c940:	00a04534 	movhi	r2,33044
8110c944:	10a65b04 	addi	r2,r2,-26260
8110c948:	300f883a 	mov	r7,r6
8110c94c:	280d883a 	mov	r6,r5
8110c950:	200b883a 	mov	r5,r4
8110c954:	11000017 	ldw	r4,0(r2)
8110c958:	110c4fc1 	jmpi	8110c4fc <_fseeko_r>

8110c95c <_fstat_r>:
8110c95c:	defffd04 	addi	sp,sp,-12
8110c960:	2805883a 	mov	r2,r5
8110c964:	dc000015 	stw	r16,0(sp)
8110c968:	04204534 	movhi	r16,33044
8110c96c:	dc400115 	stw	r17,4(sp)
8110c970:	8426b904 	addi	r16,r16,-25884
8110c974:	2023883a 	mov	r17,r4
8110c978:	300b883a 	mov	r5,r6
8110c97c:	1009883a 	mov	r4,r2
8110c980:	dfc00215 	stw	ra,8(sp)
8110c984:	80000015 	stw	zero,0(r16)
8110c988:	1121ac40 	call	81121ac4 <fstat>
8110c98c:	00ffffc4 	movi	r3,-1
8110c990:	10c00526 	beq	r2,r3,8110c9a8 <_fstat_r+0x4c>
8110c994:	dfc00217 	ldw	ra,8(sp)
8110c998:	dc400117 	ldw	r17,4(sp)
8110c99c:	dc000017 	ldw	r16,0(sp)
8110c9a0:	dec00304 	addi	sp,sp,12
8110c9a4:	f800283a 	ret
8110c9a8:	80c00017 	ldw	r3,0(r16)
8110c9ac:	183ff926 	beq	r3,zero,8110c994 <__reset+0xfb0ec994>
8110c9b0:	88c00015 	stw	r3,0(r17)
8110c9b4:	003ff706 	br	8110c994 <__reset+0xfb0ec994>

8110c9b8 <_fwrite_r>:
8110c9b8:	defff504 	addi	sp,sp,-44
8110c9bc:	dc800815 	stw	r18,32(sp)
8110c9c0:	39a5383a 	mul	r18,r7,r6
8110c9c4:	d8800304 	addi	r2,sp,12
8110c9c8:	d8800015 	stw	r2,0(sp)
8110c9cc:	00800044 	movi	r2,1
8110c9d0:	dcc00915 	stw	r19,36(sp)
8110c9d4:	dc400715 	stw	r17,28(sp)
8110c9d8:	dc000615 	stw	r16,24(sp)
8110c9dc:	d9400315 	stw	r5,12(sp)
8110c9e0:	dfc00a15 	stw	ra,40(sp)
8110c9e4:	dc800415 	stw	r18,16(sp)
8110c9e8:	dc800215 	stw	r18,8(sp)
8110c9ec:	d8800115 	stw	r2,4(sp)
8110c9f0:	3027883a 	mov	r19,r6
8110c9f4:	3821883a 	mov	r16,r7
8110c9f8:	2023883a 	mov	r17,r4
8110c9fc:	d9400b17 	ldw	r5,44(sp)
8110ca00:	20000226 	beq	r4,zero,8110ca0c <_fwrite_r+0x54>
8110ca04:	20800e17 	ldw	r2,56(r4)
8110ca08:	10001a26 	beq	r2,zero,8110ca74 <_fwrite_r+0xbc>
8110ca0c:	2880030b 	ldhu	r2,12(r5)
8110ca10:	10c8000c 	andi	r3,r2,8192
8110ca14:	1800061e 	bne	r3,zero,8110ca30 <_fwrite_r+0x78>
8110ca18:	29001917 	ldw	r4,100(r5)
8110ca1c:	00f7ffc4 	movi	r3,-8193
8110ca20:	10880014 	ori	r2,r2,8192
8110ca24:	20c6703a 	and	r3,r4,r3
8110ca28:	2880030d 	sth	r2,12(r5)
8110ca2c:	28c01915 	stw	r3,100(r5)
8110ca30:	d80d883a 	mov	r6,sp
8110ca34:	8809883a 	mov	r4,r17
8110ca38:	11165e40 	call	811165e4 <__sfvwrite_r>
8110ca3c:	10000b26 	beq	r2,zero,8110ca6c <_fwrite_r+0xb4>
8110ca40:	d9000217 	ldw	r4,8(sp)
8110ca44:	980b883a 	mov	r5,r19
8110ca48:	9109c83a 	sub	r4,r18,r4
8110ca4c:	111f78c0 	call	8111f78c <__udivsi3>
8110ca50:	dfc00a17 	ldw	ra,40(sp)
8110ca54:	dcc00917 	ldw	r19,36(sp)
8110ca58:	dc800817 	ldw	r18,32(sp)
8110ca5c:	dc400717 	ldw	r17,28(sp)
8110ca60:	dc000617 	ldw	r16,24(sp)
8110ca64:	dec00b04 	addi	sp,sp,44
8110ca68:	f800283a 	ret
8110ca6c:	8005883a 	mov	r2,r16
8110ca70:	003ff706 	br	8110ca50 <__reset+0xfb0eca50>
8110ca74:	d9400515 	stw	r5,20(sp)
8110ca78:	1115e540 	call	81115e54 <__sinit>
8110ca7c:	d9400517 	ldw	r5,20(sp)
8110ca80:	003fe206 	br	8110ca0c <__reset+0xfb0eca0c>

8110ca84 <fwrite>:
8110ca84:	defffe04 	addi	sp,sp,-8
8110ca88:	00a04534 	movhi	r2,33044
8110ca8c:	d9c00015 	stw	r7,0(sp)
8110ca90:	10a65b04 	addi	r2,r2,-26260
8110ca94:	300f883a 	mov	r7,r6
8110ca98:	280d883a 	mov	r6,r5
8110ca9c:	200b883a 	mov	r5,r4
8110caa0:	11000017 	ldw	r4,0(r2)
8110caa4:	dfc00115 	stw	ra,4(sp)
8110caa8:	110c9b80 	call	8110c9b8 <_fwrite_r>
8110caac:	dfc00117 	ldw	ra,4(sp)
8110cab0:	dec00204 	addi	sp,sp,8
8110cab4:	f800283a 	ret

8110cab8 <__smakebuf_r>:
8110cab8:	2880030b 	ldhu	r2,12(r5)
8110cabc:	10c0008c 	andi	r3,r2,2
8110cac0:	1800411e 	bne	r3,zero,8110cbc8 <__smakebuf_r+0x110>
8110cac4:	deffec04 	addi	sp,sp,-80
8110cac8:	dc000f15 	stw	r16,60(sp)
8110cacc:	2821883a 	mov	r16,r5
8110cad0:	2940038f 	ldh	r5,14(r5)
8110cad4:	dc401015 	stw	r17,64(sp)
8110cad8:	dfc01315 	stw	ra,76(sp)
8110cadc:	dcc01215 	stw	r19,72(sp)
8110cae0:	dc801115 	stw	r18,68(sp)
8110cae4:	2023883a 	mov	r17,r4
8110cae8:	28001c16 	blt	r5,zero,8110cb5c <__smakebuf_r+0xa4>
8110caec:	d80d883a 	mov	r6,sp
8110caf0:	110c95c0 	call	8110c95c <_fstat_r>
8110caf4:	10001816 	blt	r2,zero,8110cb58 <__smakebuf_r+0xa0>
8110caf8:	d8800117 	ldw	r2,4(sp)
8110cafc:	00e00014 	movui	r3,32768
8110cb00:	10bc000c 	andi	r2,r2,61440
8110cb04:	14c80020 	cmpeqi	r19,r2,8192
8110cb08:	10c03726 	beq	r2,r3,8110cbe8 <__smakebuf_r+0x130>
8110cb0c:	80c0030b 	ldhu	r3,12(r16)
8110cb10:	18c20014 	ori	r3,r3,2048
8110cb14:	80c0030d 	sth	r3,12(r16)
8110cb18:	00c80004 	movi	r3,8192
8110cb1c:	10c0521e 	bne	r2,r3,8110cc68 <__smakebuf_r+0x1b0>
8110cb20:	8140038f 	ldh	r5,14(r16)
8110cb24:	8809883a 	mov	r4,r17
8110cb28:	1116c280 	call	81116c28 <_isatty_r>
8110cb2c:	10004c26 	beq	r2,zero,8110cc60 <__smakebuf_r+0x1a8>
8110cb30:	8080030b 	ldhu	r2,12(r16)
8110cb34:	80c010c4 	addi	r3,r16,67
8110cb38:	80c00015 	stw	r3,0(r16)
8110cb3c:	10800054 	ori	r2,r2,1
8110cb40:	8080030d 	sth	r2,12(r16)
8110cb44:	00800044 	movi	r2,1
8110cb48:	80c00415 	stw	r3,16(r16)
8110cb4c:	80800515 	stw	r2,20(r16)
8110cb50:	04810004 	movi	r18,1024
8110cb54:	00000706 	br	8110cb74 <__smakebuf_r+0xbc>
8110cb58:	8080030b 	ldhu	r2,12(r16)
8110cb5c:	10c0200c 	andi	r3,r2,128
8110cb60:	18001f1e 	bne	r3,zero,8110cbe0 <__smakebuf_r+0x128>
8110cb64:	04810004 	movi	r18,1024
8110cb68:	10820014 	ori	r2,r2,2048
8110cb6c:	8080030d 	sth	r2,12(r16)
8110cb70:	0027883a 	mov	r19,zero
8110cb74:	900b883a 	mov	r5,r18
8110cb78:	8809883a 	mov	r4,r17
8110cb7c:	110cc740 	call	8110cc74 <_malloc_r>
8110cb80:	10002c26 	beq	r2,zero,8110cc34 <__smakebuf_r+0x17c>
8110cb84:	80c0030b 	ldhu	r3,12(r16)
8110cb88:	01204474 	movhi	r4,33041
8110cb8c:	2116c304 	addi	r4,r4,23308
8110cb90:	89000f15 	stw	r4,60(r17)
8110cb94:	18c02014 	ori	r3,r3,128
8110cb98:	80c0030d 	sth	r3,12(r16)
8110cb9c:	80800015 	stw	r2,0(r16)
8110cba0:	80800415 	stw	r2,16(r16)
8110cba4:	84800515 	stw	r18,20(r16)
8110cba8:	98001a1e 	bne	r19,zero,8110cc14 <__smakebuf_r+0x15c>
8110cbac:	dfc01317 	ldw	ra,76(sp)
8110cbb0:	dcc01217 	ldw	r19,72(sp)
8110cbb4:	dc801117 	ldw	r18,68(sp)
8110cbb8:	dc401017 	ldw	r17,64(sp)
8110cbbc:	dc000f17 	ldw	r16,60(sp)
8110cbc0:	dec01404 	addi	sp,sp,80
8110cbc4:	f800283a 	ret
8110cbc8:	288010c4 	addi	r2,r5,67
8110cbcc:	28800015 	stw	r2,0(r5)
8110cbd0:	28800415 	stw	r2,16(r5)
8110cbd4:	00800044 	movi	r2,1
8110cbd8:	28800515 	stw	r2,20(r5)
8110cbdc:	f800283a 	ret
8110cbe0:	04801004 	movi	r18,64
8110cbe4:	003fe006 	br	8110cb68 <__reset+0xfb0ecb68>
8110cbe8:	81000a17 	ldw	r4,40(r16)
8110cbec:	00e04474 	movhi	r3,33041
8110cbf0:	18f73f04 	addi	r3,r3,-8964
8110cbf4:	20ffc51e 	bne	r4,r3,8110cb0c <__reset+0xfb0ecb0c>
8110cbf8:	8080030b 	ldhu	r2,12(r16)
8110cbfc:	04810004 	movi	r18,1024
8110cc00:	84801315 	stw	r18,76(r16)
8110cc04:	1484b03a 	or	r2,r2,r18
8110cc08:	8080030d 	sth	r2,12(r16)
8110cc0c:	0027883a 	mov	r19,zero
8110cc10:	003fd806 	br	8110cb74 <__reset+0xfb0ecb74>
8110cc14:	8140038f 	ldh	r5,14(r16)
8110cc18:	8809883a 	mov	r4,r17
8110cc1c:	1116c280 	call	81116c28 <_isatty_r>
8110cc20:	103fe226 	beq	r2,zero,8110cbac <__reset+0xfb0ecbac>
8110cc24:	8080030b 	ldhu	r2,12(r16)
8110cc28:	10800054 	ori	r2,r2,1
8110cc2c:	8080030d 	sth	r2,12(r16)
8110cc30:	003fde06 	br	8110cbac <__reset+0xfb0ecbac>
8110cc34:	8080030b 	ldhu	r2,12(r16)
8110cc38:	10c0800c 	andi	r3,r2,512
8110cc3c:	183fdb1e 	bne	r3,zero,8110cbac <__reset+0xfb0ecbac>
8110cc40:	10800094 	ori	r2,r2,2
8110cc44:	80c010c4 	addi	r3,r16,67
8110cc48:	8080030d 	sth	r2,12(r16)
8110cc4c:	00800044 	movi	r2,1
8110cc50:	80c00015 	stw	r3,0(r16)
8110cc54:	80c00415 	stw	r3,16(r16)
8110cc58:	80800515 	stw	r2,20(r16)
8110cc5c:	003fd306 	br	8110cbac <__reset+0xfb0ecbac>
8110cc60:	04810004 	movi	r18,1024
8110cc64:	003fc306 	br	8110cb74 <__reset+0xfb0ecb74>
8110cc68:	0027883a 	mov	r19,zero
8110cc6c:	04810004 	movi	r18,1024
8110cc70:	003fc006 	br	8110cb74 <__reset+0xfb0ecb74>

8110cc74 <_malloc_r>:
8110cc74:	defff504 	addi	sp,sp,-44
8110cc78:	dc800315 	stw	r18,12(sp)
8110cc7c:	dfc00a15 	stw	ra,40(sp)
8110cc80:	df000915 	stw	fp,36(sp)
8110cc84:	ddc00815 	stw	r23,32(sp)
8110cc88:	dd800715 	stw	r22,28(sp)
8110cc8c:	dd400615 	stw	r21,24(sp)
8110cc90:	dd000515 	stw	r20,20(sp)
8110cc94:	dcc00415 	stw	r19,16(sp)
8110cc98:	dc400215 	stw	r17,8(sp)
8110cc9c:	dc000115 	stw	r16,4(sp)
8110cca0:	288002c4 	addi	r2,r5,11
8110cca4:	00c00584 	movi	r3,22
8110cca8:	2025883a 	mov	r18,r4
8110ccac:	18807f2e 	bgeu	r3,r2,8110ceac <_malloc_r+0x238>
8110ccb0:	047ffe04 	movi	r17,-8
8110ccb4:	1462703a 	and	r17,r2,r17
8110ccb8:	8800a316 	blt	r17,zero,8110cf48 <_malloc_r+0x2d4>
8110ccbc:	8940a236 	bltu	r17,r5,8110cf48 <_malloc_r+0x2d4>
8110ccc0:	11227f00 	call	811227f0 <__malloc_lock>
8110ccc4:	00807dc4 	movi	r2,503
8110ccc8:	1441e92e 	bgeu	r2,r17,8110d470 <_malloc_r+0x7fc>
8110cccc:	8804d27a 	srli	r2,r17,9
8110ccd0:	1000a126 	beq	r2,zero,8110cf58 <_malloc_r+0x2e4>
8110ccd4:	00c00104 	movi	r3,4
8110ccd8:	18811e36 	bltu	r3,r2,8110d154 <_malloc_r+0x4e0>
8110ccdc:	8804d1ba 	srli	r2,r17,6
8110cce0:	12000e44 	addi	r8,r2,57
8110cce4:	11c00e04 	addi	r7,r2,56
8110cce8:	4209883a 	add	r4,r8,r8
8110ccec:	04e04534 	movhi	r19,33044
8110ccf0:	2109883a 	add	r4,r4,r4
8110ccf4:	9ce03c04 	addi	r19,r19,-32528
8110ccf8:	2109883a 	add	r4,r4,r4
8110ccfc:	9909883a 	add	r4,r19,r4
8110cd00:	24000117 	ldw	r16,4(r4)
8110cd04:	213ffe04 	addi	r4,r4,-8
8110cd08:	24009726 	beq	r4,r16,8110cf68 <_malloc_r+0x2f4>
8110cd0c:	80800117 	ldw	r2,4(r16)
8110cd10:	01bfff04 	movi	r6,-4
8110cd14:	014003c4 	movi	r5,15
8110cd18:	1184703a 	and	r2,r2,r6
8110cd1c:	1447c83a 	sub	r3,r2,r17
8110cd20:	28c00716 	blt	r5,r3,8110cd40 <_malloc_r+0xcc>
8110cd24:	1800920e 	bge	r3,zero,8110cf70 <_malloc_r+0x2fc>
8110cd28:	84000317 	ldw	r16,12(r16)
8110cd2c:	24008e26 	beq	r4,r16,8110cf68 <_malloc_r+0x2f4>
8110cd30:	80800117 	ldw	r2,4(r16)
8110cd34:	1184703a 	and	r2,r2,r6
8110cd38:	1447c83a 	sub	r3,r2,r17
8110cd3c:	28fff90e 	bge	r5,r3,8110cd24 <__reset+0xfb0ecd24>
8110cd40:	3809883a 	mov	r4,r7
8110cd44:	01a04534 	movhi	r6,33044
8110cd48:	9c000417 	ldw	r16,16(r19)
8110cd4c:	31a03c04 	addi	r6,r6,-32528
8110cd50:	32000204 	addi	r8,r6,8
8110cd54:	82013426 	beq	r16,r8,8110d228 <_malloc_r+0x5b4>
8110cd58:	80c00117 	ldw	r3,4(r16)
8110cd5c:	00bfff04 	movi	r2,-4
8110cd60:	188e703a 	and	r7,r3,r2
8110cd64:	3c45c83a 	sub	r2,r7,r17
8110cd68:	00c003c4 	movi	r3,15
8110cd6c:	18811f16 	blt	r3,r2,8110d1ec <_malloc_r+0x578>
8110cd70:	32000515 	stw	r8,20(r6)
8110cd74:	32000415 	stw	r8,16(r6)
8110cd78:	10007f0e 	bge	r2,zero,8110cf78 <_malloc_r+0x304>
8110cd7c:	00807fc4 	movi	r2,511
8110cd80:	11c0fd36 	bltu	r2,r7,8110d178 <_malloc_r+0x504>
8110cd84:	3806d0fa 	srli	r3,r7,3
8110cd88:	01c00044 	movi	r7,1
8110cd8c:	30800117 	ldw	r2,4(r6)
8110cd90:	19400044 	addi	r5,r3,1
8110cd94:	294b883a 	add	r5,r5,r5
8110cd98:	1807d0ba 	srai	r3,r3,2
8110cd9c:	294b883a 	add	r5,r5,r5
8110cda0:	294b883a 	add	r5,r5,r5
8110cda4:	298b883a 	add	r5,r5,r6
8110cda8:	38c6983a 	sll	r3,r7,r3
8110cdac:	29c00017 	ldw	r7,0(r5)
8110cdb0:	2a7ffe04 	addi	r9,r5,-8
8110cdb4:	1886b03a 	or	r3,r3,r2
8110cdb8:	82400315 	stw	r9,12(r16)
8110cdbc:	81c00215 	stw	r7,8(r16)
8110cdc0:	30c00115 	stw	r3,4(r6)
8110cdc4:	2c000015 	stw	r16,0(r5)
8110cdc8:	3c000315 	stw	r16,12(r7)
8110cdcc:	2005d0ba 	srai	r2,r4,2
8110cdd0:	01400044 	movi	r5,1
8110cdd4:	288a983a 	sll	r5,r5,r2
8110cdd8:	19406f36 	bltu	r3,r5,8110cf98 <_malloc_r+0x324>
8110cddc:	28c4703a 	and	r2,r5,r3
8110cde0:	10000a1e 	bne	r2,zero,8110ce0c <_malloc_r+0x198>
8110cde4:	00bfff04 	movi	r2,-4
8110cde8:	294b883a 	add	r5,r5,r5
8110cdec:	2088703a 	and	r4,r4,r2
8110cdf0:	28c4703a 	and	r2,r5,r3
8110cdf4:	21000104 	addi	r4,r4,4
8110cdf8:	1000041e 	bne	r2,zero,8110ce0c <_malloc_r+0x198>
8110cdfc:	294b883a 	add	r5,r5,r5
8110ce00:	28c4703a 	and	r2,r5,r3
8110ce04:	21000104 	addi	r4,r4,4
8110ce08:	103ffc26 	beq	r2,zero,8110cdfc <__reset+0xfb0ecdfc>
8110ce0c:	02bfff04 	movi	r10,-4
8110ce10:	024003c4 	movi	r9,15
8110ce14:	21800044 	addi	r6,r4,1
8110ce18:	318d883a 	add	r6,r6,r6
8110ce1c:	318d883a 	add	r6,r6,r6
8110ce20:	318d883a 	add	r6,r6,r6
8110ce24:	998d883a 	add	r6,r19,r6
8110ce28:	333ffe04 	addi	r12,r6,-8
8110ce2c:	2017883a 	mov	r11,r4
8110ce30:	31800104 	addi	r6,r6,4
8110ce34:	34000017 	ldw	r16,0(r6)
8110ce38:	31fffd04 	addi	r7,r6,-12
8110ce3c:	81c0041e 	bne	r16,r7,8110ce50 <_malloc_r+0x1dc>
8110ce40:	0000fb06 	br	8110d230 <_malloc_r+0x5bc>
8110ce44:	1801030e 	bge	r3,zero,8110d254 <_malloc_r+0x5e0>
8110ce48:	84000317 	ldw	r16,12(r16)
8110ce4c:	81c0f826 	beq	r16,r7,8110d230 <_malloc_r+0x5bc>
8110ce50:	80800117 	ldw	r2,4(r16)
8110ce54:	1284703a 	and	r2,r2,r10
8110ce58:	1447c83a 	sub	r3,r2,r17
8110ce5c:	48fff90e 	bge	r9,r3,8110ce44 <__reset+0xfb0ece44>
8110ce60:	80800317 	ldw	r2,12(r16)
8110ce64:	81000217 	ldw	r4,8(r16)
8110ce68:	89400054 	ori	r5,r17,1
8110ce6c:	81400115 	stw	r5,4(r16)
8110ce70:	20800315 	stw	r2,12(r4)
8110ce74:	11000215 	stw	r4,8(r2)
8110ce78:	8463883a 	add	r17,r16,r17
8110ce7c:	9c400515 	stw	r17,20(r19)
8110ce80:	9c400415 	stw	r17,16(r19)
8110ce84:	18800054 	ori	r2,r3,1
8110ce88:	88800115 	stw	r2,4(r17)
8110ce8c:	8a000315 	stw	r8,12(r17)
8110ce90:	8a000215 	stw	r8,8(r17)
8110ce94:	88e3883a 	add	r17,r17,r3
8110ce98:	88c00015 	stw	r3,0(r17)
8110ce9c:	9009883a 	mov	r4,r18
8110cea0:	11229100 	call	81122910 <__malloc_unlock>
8110cea4:	80800204 	addi	r2,r16,8
8110cea8:	00001b06 	br	8110cf18 <_malloc_r+0x2a4>
8110ceac:	04400404 	movi	r17,16
8110ceb0:	89402536 	bltu	r17,r5,8110cf48 <_malloc_r+0x2d4>
8110ceb4:	11227f00 	call	811227f0 <__malloc_lock>
8110ceb8:	00800184 	movi	r2,6
8110cebc:	01000084 	movi	r4,2
8110cec0:	04e04534 	movhi	r19,33044
8110cec4:	1085883a 	add	r2,r2,r2
8110cec8:	9ce03c04 	addi	r19,r19,-32528
8110cecc:	1085883a 	add	r2,r2,r2
8110ced0:	9885883a 	add	r2,r19,r2
8110ced4:	14000117 	ldw	r16,4(r2)
8110ced8:	10fffe04 	addi	r3,r2,-8
8110cedc:	80c0d926 	beq	r16,r3,8110d244 <_malloc_r+0x5d0>
8110cee0:	80c00117 	ldw	r3,4(r16)
8110cee4:	81000317 	ldw	r4,12(r16)
8110cee8:	00bfff04 	movi	r2,-4
8110ceec:	1884703a 	and	r2,r3,r2
8110cef0:	81400217 	ldw	r5,8(r16)
8110cef4:	8085883a 	add	r2,r16,r2
8110cef8:	10c00117 	ldw	r3,4(r2)
8110cefc:	29000315 	stw	r4,12(r5)
8110cf00:	21400215 	stw	r5,8(r4)
8110cf04:	18c00054 	ori	r3,r3,1
8110cf08:	10c00115 	stw	r3,4(r2)
8110cf0c:	9009883a 	mov	r4,r18
8110cf10:	11229100 	call	81122910 <__malloc_unlock>
8110cf14:	80800204 	addi	r2,r16,8
8110cf18:	dfc00a17 	ldw	ra,40(sp)
8110cf1c:	df000917 	ldw	fp,36(sp)
8110cf20:	ddc00817 	ldw	r23,32(sp)
8110cf24:	dd800717 	ldw	r22,28(sp)
8110cf28:	dd400617 	ldw	r21,24(sp)
8110cf2c:	dd000517 	ldw	r20,20(sp)
8110cf30:	dcc00417 	ldw	r19,16(sp)
8110cf34:	dc800317 	ldw	r18,12(sp)
8110cf38:	dc400217 	ldw	r17,8(sp)
8110cf3c:	dc000117 	ldw	r16,4(sp)
8110cf40:	dec00b04 	addi	sp,sp,44
8110cf44:	f800283a 	ret
8110cf48:	00800304 	movi	r2,12
8110cf4c:	90800015 	stw	r2,0(r18)
8110cf50:	0005883a 	mov	r2,zero
8110cf54:	003ff006 	br	8110cf18 <__reset+0xfb0ecf18>
8110cf58:	01002004 	movi	r4,128
8110cf5c:	02001004 	movi	r8,64
8110cf60:	01c00fc4 	movi	r7,63
8110cf64:	003f6106 	br	8110ccec <__reset+0xfb0eccec>
8110cf68:	4009883a 	mov	r4,r8
8110cf6c:	003f7506 	br	8110cd44 <__reset+0xfb0ecd44>
8110cf70:	81000317 	ldw	r4,12(r16)
8110cf74:	003fde06 	br	8110cef0 <__reset+0xfb0ecef0>
8110cf78:	81c5883a 	add	r2,r16,r7
8110cf7c:	11400117 	ldw	r5,4(r2)
8110cf80:	9009883a 	mov	r4,r18
8110cf84:	29400054 	ori	r5,r5,1
8110cf88:	11400115 	stw	r5,4(r2)
8110cf8c:	11229100 	call	81122910 <__malloc_unlock>
8110cf90:	80800204 	addi	r2,r16,8
8110cf94:	003fe006 	br	8110cf18 <__reset+0xfb0ecf18>
8110cf98:	9c000217 	ldw	r16,8(r19)
8110cf9c:	00bfff04 	movi	r2,-4
8110cfa0:	85800117 	ldw	r22,4(r16)
8110cfa4:	b0ac703a 	and	r22,r22,r2
8110cfa8:	b4400336 	bltu	r22,r17,8110cfb8 <_malloc_r+0x344>
8110cfac:	b445c83a 	sub	r2,r22,r17
8110cfb0:	00c003c4 	movi	r3,15
8110cfb4:	18805d16 	blt	r3,r2,8110d12c <_malloc_r+0x4b8>
8110cfb8:	05e04534 	movhi	r23,33044
8110cfbc:	00a04534 	movhi	r2,33044
8110cfc0:	10a6bc04 	addi	r2,r2,-25872
8110cfc4:	bde65c04 	addi	r23,r23,-26256
8110cfc8:	15400017 	ldw	r21,0(r2)
8110cfcc:	b8c00017 	ldw	r3,0(r23)
8110cfd0:	00bfffc4 	movi	r2,-1
8110cfd4:	858d883a 	add	r6,r16,r22
8110cfd8:	8d6b883a 	add	r21,r17,r21
8110cfdc:	1880ea26 	beq	r3,r2,8110d388 <_malloc_r+0x714>
8110cfe0:	ad4403c4 	addi	r21,r21,4111
8110cfe4:	00bc0004 	movi	r2,-4096
8110cfe8:	a8aa703a 	and	r21,r21,r2
8110cfec:	a80b883a 	mov	r5,r21
8110cff0:	9009883a 	mov	r4,r18
8110cff4:	d9800015 	stw	r6,0(sp)
8110cff8:	110daa00 	call	8110daa0 <_sbrk_r>
8110cffc:	1029883a 	mov	r20,r2
8110d000:	00bfffc4 	movi	r2,-1
8110d004:	d9800017 	ldw	r6,0(sp)
8110d008:	a080e826 	beq	r20,r2,8110d3ac <_malloc_r+0x738>
8110d00c:	a180a636 	bltu	r20,r6,8110d2a8 <_malloc_r+0x634>
8110d010:	07204534 	movhi	fp,33044
8110d014:	e7271404 	addi	fp,fp,-25520
8110d018:	e0800017 	ldw	r2,0(fp)
8110d01c:	a887883a 	add	r3,r21,r2
8110d020:	e0c00015 	stw	r3,0(fp)
8110d024:	3500e626 	beq	r6,r20,8110d3c0 <_malloc_r+0x74c>
8110d028:	b9000017 	ldw	r4,0(r23)
8110d02c:	00bfffc4 	movi	r2,-1
8110d030:	2080ee26 	beq	r4,r2,8110d3ec <_malloc_r+0x778>
8110d034:	a185c83a 	sub	r2,r20,r6
8110d038:	10c5883a 	add	r2,r2,r3
8110d03c:	e0800015 	stw	r2,0(fp)
8110d040:	a0c001cc 	andi	r3,r20,7
8110d044:	1800bc26 	beq	r3,zero,8110d338 <_malloc_r+0x6c4>
8110d048:	a0e9c83a 	sub	r20,r20,r3
8110d04c:	00840204 	movi	r2,4104
8110d050:	a5000204 	addi	r20,r20,8
8110d054:	10c7c83a 	sub	r3,r2,r3
8110d058:	a545883a 	add	r2,r20,r21
8110d05c:	1083ffcc 	andi	r2,r2,4095
8110d060:	18abc83a 	sub	r21,r3,r2
8110d064:	a80b883a 	mov	r5,r21
8110d068:	9009883a 	mov	r4,r18
8110d06c:	110daa00 	call	8110daa0 <_sbrk_r>
8110d070:	00ffffc4 	movi	r3,-1
8110d074:	10c0e126 	beq	r2,r3,8110d3fc <_malloc_r+0x788>
8110d078:	1505c83a 	sub	r2,r2,r20
8110d07c:	1545883a 	add	r2,r2,r21
8110d080:	10800054 	ori	r2,r2,1
8110d084:	e0c00017 	ldw	r3,0(fp)
8110d088:	9d000215 	stw	r20,8(r19)
8110d08c:	a0800115 	stw	r2,4(r20)
8110d090:	a8c7883a 	add	r3,r21,r3
8110d094:	e0c00015 	stw	r3,0(fp)
8110d098:	84c00e26 	beq	r16,r19,8110d0d4 <_malloc_r+0x460>
8110d09c:	018003c4 	movi	r6,15
8110d0a0:	3580a72e 	bgeu	r6,r22,8110d340 <_malloc_r+0x6cc>
8110d0a4:	81400117 	ldw	r5,4(r16)
8110d0a8:	013ffe04 	movi	r4,-8
8110d0ac:	b0bffd04 	addi	r2,r22,-12
8110d0b0:	1104703a 	and	r2,r2,r4
8110d0b4:	2900004c 	andi	r4,r5,1
8110d0b8:	2088b03a 	or	r4,r4,r2
8110d0bc:	81000115 	stw	r4,4(r16)
8110d0c0:	01400144 	movi	r5,5
8110d0c4:	8089883a 	add	r4,r16,r2
8110d0c8:	21400115 	stw	r5,4(r4)
8110d0cc:	21400215 	stw	r5,8(r4)
8110d0d0:	3080cd36 	bltu	r6,r2,8110d408 <_malloc_r+0x794>
8110d0d4:	00a04534 	movhi	r2,33044
8110d0d8:	10a6bb04 	addi	r2,r2,-25876
8110d0dc:	11000017 	ldw	r4,0(r2)
8110d0e0:	20c0012e 	bgeu	r4,r3,8110d0e8 <_malloc_r+0x474>
8110d0e4:	10c00015 	stw	r3,0(r2)
8110d0e8:	00a04534 	movhi	r2,33044
8110d0ec:	10a6ba04 	addi	r2,r2,-25880
8110d0f0:	11000017 	ldw	r4,0(r2)
8110d0f4:	9c000217 	ldw	r16,8(r19)
8110d0f8:	20c0012e 	bgeu	r4,r3,8110d100 <_malloc_r+0x48c>
8110d0fc:	10c00015 	stw	r3,0(r2)
8110d100:	80c00117 	ldw	r3,4(r16)
8110d104:	00bfff04 	movi	r2,-4
8110d108:	1886703a 	and	r3,r3,r2
8110d10c:	1c45c83a 	sub	r2,r3,r17
8110d110:	1c400236 	bltu	r3,r17,8110d11c <_malloc_r+0x4a8>
8110d114:	00c003c4 	movi	r3,15
8110d118:	18800416 	blt	r3,r2,8110d12c <_malloc_r+0x4b8>
8110d11c:	9009883a 	mov	r4,r18
8110d120:	11229100 	call	81122910 <__malloc_unlock>
8110d124:	0005883a 	mov	r2,zero
8110d128:	003f7b06 	br	8110cf18 <__reset+0xfb0ecf18>
8110d12c:	88c00054 	ori	r3,r17,1
8110d130:	80c00115 	stw	r3,4(r16)
8110d134:	8463883a 	add	r17,r16,r17
8110d138:	10800054 	ori	r2,r2,1
8110d13c:	9c400215 	stw	r17,8(r19)
8110d140:	88800115 	stw	r2,4(r17)
8110d144:	9009883a 	mov	r4,r18
8110d148:	11229100 	call	81122910 <__malloc_unlock>
8110d14c:	80800204 	addi	r2,r16,8
8110d150:	003f7106 	br	8110cf18 <__reset+0xfb0ecf18>
8110d154:	00c00504 	movi	r3,20
8110d158:	18804a2e 	bgeu	r3,r2,8110d284 <_malloc_r+0x610>
8110d15c:	00c01504 	movi	r3,84
8110d160:	18806e36 	bltu	r3,r2,8110d31c <_malloc_r+0x6a8>
8110d164:	8804d33a 	srli	r2,r17,12
8110d168:	12001bc4 	addi	r8,r2,111
8110d16c:	11c01b84 	addi	r7,r2,110
8110d170:	4209883a 	add	r4,r8,r8
8110d174:	003edd06 	br	8110ccec <__reset+0xfb0eccec>
8110d178:	3804d27a 	srli	r2,r7,9
8110d17c:	00c00104 	movi	r3,4
8110d180:	1880442e 	bgeu	r3,r2,8110d294 <_malloc_r+0x620>
8110d184:	00c00504 	movi	r3,20
8110d188:	18808136 	bltu	r3,r2,8110d390 <_malloc_r+0x71c>
8110d18c:	11401704 	addi	r5,r2,92
8110d190:	10c016c4 	addi	r3,r2,91
8110d194:	294b883a 	add	r5,r5,r5
8110d198:	294b883a 	add	r5,r5,r5
8110d19c:	294b883a 	add	r5,r5,r5
8110d1a0:	994b883a 	add	r5,r19,r5
8110d1a4:	28800017 	ldw	r2,0(r5)
8110d1a8:	01a04534 	movhi	r6,33044
8110d1ac:	297ffe04 	addi	r5,r5,-8
8110d1b0:	31a03c04 	addi	r6,r6,-32528
8110d1b4:	28806526 	beq	r5,r2,8110d34c <_malloc_r+0x6d8>
8110d1b8:	01bfff04 	movi	r6,-4
8110d1bc:	10c00117 	ldw	r3,4(r2)
8110d1c0:	1986703a 	and	r3,r3,r6
8110d1c4:	38c0022e 	bgeu	r7,r3,8110d1d0 <_malloc_r+0x55c>
8110d1c8:	10800217 	ldw	r2,8(r2)
8110d1cc:	28bffb1e 	bne	r5,r2,8110d1bc <__reset+0xfb0ed1bc>
8110d1d0:	11400317 	ldw	r5,12(r2)
8110d1d4:	98c00117 	ldw	r3,4(r19)
8110d1d8:	81400315 	stw	r5,12(r16)
8110d1dc:	80800215 	stw	r2,8(r16)
8110d1e0:	2c000215 	stw	r16,8(r5)
8110d1e4:	14000315 	stw	r16,12(r2)
8110d1e8:	003ef806 	br	8110cdcc <__reset+0xfb0ecdcc>
8110d1ec:	88c00054 	ori	r3,r17,1
8110d1f0:	80c00115 	stw	r3,4(r16)
8110d1f4:	8463883a 	add	r17,r16,r17
8110d1f8:	34400515 	stw	r17,20(r6)
8110d1fc:	34400415 	stw	r17,16(r6)
8110d200:	10c00054 	ori	r3,r2,1
8110d204:	8a000315 	stw	r8,12(r17)
8110d208:	8a000215 	stw	r8,8(r17)
8110d20c:	88c00115 	stw	r3,4(r17)
8110d210:	88a3883a 	add	r17,r17,r2
8110d214:	88800015 	stw	r2,0(r17)
8110d218:	9009883a 	mov	r4,r18
8110d21c:	11229100 	call	81122910 <__malloc_unlock>
8110d220:	80800204 	addi	r2,r16,8
8110d224:	003f3c06 	br	8110cf18 <__reset+0xfb0ecf18>
8110d228:	30c00117 	ldw	r3,4(r6)
8110d22c:	003ee706 	br	8110cdcc <__reset+0xfb0ecdcc>
8110d230:	5ac00044 	addi	r11,r11,1
8110d234:	588000cc 	andi	r2,r11,3
8110d238:	31800204 	addi	r6,r6,8
8110d23c:	103efd1e 	bne	r2,zero,8110ce34 <__reset+0xfb0ece34>
8110d240:	00002406 	br	8110d2d4 <_malloc_r+0x660>
8110d244:	14000317 	ldw	r16,12(r2)
8110d248:	143f251e 	bne	r2,r16,8110cee0 <__reset+0xfb0ecee0>
8110d24c:	21000084 	addi	r4,r4,2
8110d250:	003ebc06 	br	8110cd44 <__reset+0xfb0ecd44>
8110d254:	8085883a 	add	r2,r16,r2
8110d258:	10c00117 	ldw	r3,4(r2)
8110d25c:	81000317 	ldw	r4,12(r16)
8110d260:	81400217 	ldw	r5,8(r16)
8110d264:	18c00054 	ori	r3,r3,1
8110d268:	10c00115 	stw	r3,4(r2)
8110d26c:	29000315 	stw	r4,12(r5)
8110d270:	21400215 	stw	r5,8(r4)
8110d274:	9009883a 	mov	r4,r18
8110d278:	11229100 	call	81122910 <__malloc_unlock>
8110d27c:	80800204 	addi	r2,r16,8
8110d280:	003f2506 	br	8110cf18 <__reset+0xfb0ecf18>
8110d284:	12001704 	addi	r8,r2,92
8110d288:	11c016c4 	addi	r7,r2,91
8110d28c:	4209883a 	add	r4,r8,r8
8110d290:	003e9606 	br	8110ccec <__reset+0xfb0eccec>
8110d294:	3804d1ba 	srli	r2,r7,6
8110d298:	11400e44 	addi	r5,r2,57
8110d29c:	10c00e04 	addi	r3,r2,56
8110d2a0:	294b883a 	add	r5,r5,r5
8110d2a4:	003fbc06 	br	8110d198 <__reset+0xfb0ed198>
8110d2a8:	84ff5926 	beq	r16,r19,8110d010 <__reset+0xfb0ed010>
8110d2ac:	00a04534 	movhi	r2,33044
8110d2b0:	10a03c04 	addi	r2,r2,-32528
8110d2b4:	14000217 	ldw	r16,8(r2)
8110d2b8:	00bfff04 	movi	r2,-4
8110d2bc:	80c00117 	ldw	r3,4(r16)
8110d2c0:	1886703a 	and	r3,r3,r2
8110d2c4:	003f9106 	br	8110d10c <__reset+0xfb0ed10c>
8110d2c8:	60800217 	ldw	r2,8(r12)
8110d2cc:	213fffc4 	addi	r4,r4,-1
8110d2d0:	1300651e 	bne	r2,r12,8110d468 <_malloc_r+0x7f4>
8110d2d4:	208000cc 	andi	r2,r4,3
8110d2d8:	633ffe04 	addi	r12,r12,-8
8110d2dc:	103ffa1e 	bne	r2,zero,8110d2c8 <__reset+0xfb0ed2c8>
8110d2e0:	98800117 	ldw	r2,4(r19)
8110d2e4:	0146303a 	nor	r3,zero,r5
8110d2e8:	1884703a 	and	r2,r3,r2
8110d2ec:	98800115 	stw	r2,4(r19)
8110d2f0:	294b883a 	add	r5,r5,r5
8110d2f4:	117f2836 	bltu	r2,r5,8110cf98 <__reset+0xfb0ecf98>
8110d2f8:	283f2726 	beq	r5,zero,8110cf98 <__reset+0xfb0ecf98>
8110d2fc:	2886703a 	and	r3,r5,r2
8110d300:	5809883a 	mov	r4,r11
8110d304:	183ec31e 	bne	r3,zero,8110ce14 <__reset+0xfb0ece14>
8110d308:	294b883a 	add	r5,r5,r5
8110d30c:	2886703a 	and	r3,r5,r2
8110d310:	21000104 	addi	r4,r4,4
8110d314:	183ffc26 	beq	r3,zero,8110d308 <__reset+0xfb0ed308>
8110d318:	003ebe06 	br	8110ce14 <__reset+0xfb0ece14>
8110d31c:	00c05504 	movi	r3,340
8110d320:	18801236 	bltu	r3,r2,8110d36c <_malloc_r+0x6f8>
8110d324:	8804d3fa 	srli	r2,r17,15
8110d328:	12001e04 	addi	r8,r2,120
8110d32c:	11c01dc4 	addi	r7,r2,119
8110d330:	4209883a 	add	r4,r8,r8
8110d334:	003e6d06 	br	8110ccec <__reset+0xfb0eccec>
8110d338:	00c40004 	movi	r3,4096
8110d33c:	003f4606 	br	8110d058 <__reset+0xfb0ed058>
8110d340:	00800044 	movi	r2,1
8110d344:	a0800115 	stw	r2,4(r20)
8110d348:	003f7406 	br	8110d11c <__reset+0xfb0ed11c>
8110d34c:	1805d0ba 	srai	r2,r3,2
8110d350:	01c00044 	movi	r7,1
8110d354:	30c00117 	ldw	r3,4(r6)
8110d358:	388e983a 	sll	r7,r7,r2
8110d35c:	2805883a 	mov	r2,r5
8110d360:	38c6b03a 	or	r3,r7,r3
8110d364:	30c00115 	stw	r3,4(r6)
8110d368:	003f9b06 	br	8110d1d8 <__reset+0xfb0ed1d8>
8110d36c:	00c15504 	movi	r3,1364
8110d370:	18801a36 	bltu	r3,r2,8110d3dc <_malloc_r+0x768>
8110d374:	8804d4ba 	srli	r2,r17,18
8110d378:	12001f44 	addi	r8,r2,125
8110d37c:	11c01f04 	addi	r7,r2,124
8110d380:	4209883a 	add	r4,r8,r8
8110d384:	003e5906 	br	8110ccec <__reset+0xfb0eccec>
8110d388:	ad400404 	addi	r21,r21,16
8110d38c:	003f1706 	br	8110cfec <__reset+0xfb0ecfec>
8110d390:	00c01504 	movi	r3,84
8110d394:	18802336 	bltu	r3,r2,8110d424 <_malloc_r+0x7b0>
8110d398:	3804d33a 	srli	r2,r7,12
8110d39c:	11401bc4 	addi	r5,r2,111
8110d3a0:	10c01b84 	addi	r3,r2,110
8110d3a4:	294b883a 	add	r5,r5,r5
8110d3a8:	003f7b06 	br	8110d198 <__reset+0xfb0ed198>
8110d3ac:	9c000217 	ldw	r16,8(r19)
8110d3b0:	00bfff04 	movi	r2,-4
8110d3b4:	80c00117 	ldw	r3,4(r16)
8110d3b8:	1886703a 	and	r3,r3,r2
8110d3bc:	003f5306 	br	8110d10c <__reset+0xfb0ed10c>
8110d3c0:	3083ffcc 	andi	r2,r6,4095
8110d3c4:	103f181e 	bne	r2,zero,8110d028 <__reset+0xfb0ed028>
8110d3c8:	99000217 	ldw	r4,8(r19)
8110d3cc:	b545883a 	add	r2,r22,r21
8110d3d0:	10800054 	ori	r2,r2,1
8110d3d4:	20800115 	stw	r2,4(r4)
8110d3d8:	003f3e06 	br	8110d0d4 <__reset+0xfb0ed0d4>
8110d3dc:	01003f84 	movi	r4,254
8110d3e0:	02001fc4 	movi	r8,127
8110d3e4:	01c01f84 	movi	r7,126
8110d3e8:	003e4006 	br	8110ccec <__reset+0xfb0eccec>
8110d3ec:	00a04534 	movhi	r2,33044
8110d3f0:	10a65c04 	addi	r2,r2,-26256
8110d3f4:	15000015 	stw	r20,0(r2)
8110d3f8:	003f1106 	br	8110d040 <__reset+0xfb0ed040>
8110d3fc:	00800044 	movi	r2,1
8110d400:	002b883a 	mov	r21,zero
8110d404:	003f1f06 	br	8110d084 <__reset+0xfb0ed084>
8110d408:	81400204 	addi	r5,r16,8
8110d40c:	9009883a 	mov	r4,r18
8110d410:	11162d40 	call	811162d4 <_free_r>
8110d414:	00a04534 	movhi	r2,33044
8110d418:	10a71404 	addi	r2,r2,-25520
8110d41c:	10c00017 	ldw	r3,0(r2)
8110d420:	003f2c06 	br	8110d0d4 <__reset+0xfb0ed0d4>
8110d424:	00c05504 	movi	r3,340
8110d428:	18800536 	bltu	r3,r2,8110d440 <_malloc_r+0x7cc>
8110d42c:	3804d3fa 	srli	r2,r7,15
8110d430:	11401e04 	addi	r5,r2,120
8110d434:	10c01dc4 	addi	r3,r2,119
8110d438:	294b883a 	add	r5,r5,r5
8110d43c:	003f5606 	br	8110d198 <__reset+0xfb0ed198>
8110d440:	00c15504 	movi	r3,1364
8110d444:	18800536 	bltu	r3,r2,8110d45c <_malloc_r+0x7e8>
8110d448:	3804d4ba 	srli	r2,r7,18
8110d44c:	11401f44 	addi	r5,r2,125
8110d450:	10c01f04 	addi	r3,r2,124
8110d454:	294b883a 	add	r5,r5,r5
8110d458:	003f4f06 	br	8110d198 <__reset+0xfb0ed198>
8110d45c:	01403f84 	movi	r5,254
8110d460:	00c01f84 	movi	r3,126
8110d464:	003f4c06 	br	8110d198 <__reset+0xfb0ed198>
8110d468:	98800117 	ldw	r2,4(r19)
8110d46c:	003fa006 	br	8110d2f0 <__reset+0xfb0ed2f0>
8110d470:	8808d0fa 	srli	r4,r17,3
8110d474:	20800044 	addi	r2,r4,1
8110d478:	1085883a 	add	r2,r2,r2
8110d47c:	003e9006 	br	8110cec0 <__reset+0xfb0ecec0>

8110d480 <memcpy>:
8110d480:	defffd04 	addi	sp,sp,-12
8110d484:	dfc00215 	stw	ra,8(sp)
8110d488:	dc400115 	stw	r17,4(sp)
8110d48c:	dc000015 	stw	r16,0(sp)
8110d490:	00c003c4 	movi	r3,15
8110d494:	2005883a 	mov	r2,r4
8110d498:	1980452e 	bgeu	r3,r6,8110d5b0 <memcpy+0x130>
8110d49c:	2906b03a 	or	r3,r5,r4
8110d4a0:	18c000cc 	andi	r3,r3,3
8110d4a4:	1800441e 	bne	r3,zero,8110d5b8 <memcpy+0x138>
8110d4a8:	347ffc04 	addi	r17,r6,-16
8110d4ac:	8822d13a 	srli	r17,r17,4
8110d4b0:	28c00104 	addi	r3,r5,4
8110d4b4:	23400104 	addi	r13,r4,4
8110d4b8:	8820913a 	slli	r16,r17,4
8110d4bc:	2b000204 	addi	r12,r5,8
8110d4c0:	22c00204 	addi	r11,r4,8
8110d4c4:	84000504 	addi	r16,r16,20
8110d4c8:	2a800304 	addi	r10,r5,12
8110d4cc:	22400304 	addi	r9,r4,12
8110d4d0:	2c21883a 	add	r16,r5,r16
8110d4d4:	2811883a 	mov	r8,r5
8110d4d8:	200f883a 	mov	r7,r4
8110d4dc:	41000017 	ldw	r4,0(r8)
8110d4e0:	1fc00017 	ldw	ra,0(r3)
8110d4e4:	63c00017 	ldw	r15,0(r12)
8110d4e8:	39000015 	stw	r4,0(r7)
8110d4ec:	53800017 	ldw	r14,0(r10)
8110d4f0:	6fc00015 	stw	ra,0(r13)
8110d4f4:	5bc00015 	stw	r15,0(r11)
8110d4f8:	4b800015 	stw	r14,0(r9)
8110d4fc:	18c00404 	addi	r3,r3,16
8110d500:	39c00404 	addi	r7,r7,16
8110d504:	42000404 	addi	r8,r8,16
8110d508:	6b400404 	addi	r13,r13,16
8110d50c:	63000404 	addi	r12,r12,16
8110d510:	5ac00404 	addi	r11,r11,16
8110d514:	52800404 	addi	r10,r10,16
8110d518:	4a400404 	addi	r9,r9,16
8110d51c:	1c3fef1e 	bne	r3,r16,8110d4dc <__reset+0xfb0ed4dc>
8110d520:	89c00044 	addi	r7,r17,1
8110d524:	380e913a 	slli	r7,r7,4
8110d528:	310003cc 	andi	r4,r6,15
8110d52c:	02c000c4 	movi	r11,3
8110d530:	11c7883a 	add	r3,r2,r7
8110d534:	29cb883a 	add	r5,r5,r7
8110d538:	5900212e 	bgeu	r11,r4,8110d5c0 <memcpy+0x140>
8110d53c:	1813883a 	mov	r9,r3
8110d540:	2811883a 	mov	r8,r5
8110d544:	200f883a 	mov	r7,r4
8110d548:	42800017 	ldw	r10,0(r8)
8110d54c:	4a400104 	addi	r9,r9,4
8110d550:	39ffff04 	addi	r7,r7,-4
8110d554:	4abfff15 	stw	r10,-4(r9)
8110d558:	42000104 	addi	r8,r8,4
8110d55c:	59fffa36 	bltu	r11,r7,8110d548 <__reset+0xfb0ed548>
8110d560:	213fff04 	addi	r4,r4,-4
8110d564:	2008d0ba 	srli	r4,r4,2
8110d568:	318000cc 	andi	r6,r6,3
8110d56c:	21000044 	addi	r4,r4,1
8110d570:	2109883a 	add	r4,r4,r4
8110d574:	2109883a 	add	r4,r4,r4
8110d578:	1907883a 	add	r3,r3,r4
8110d57c:	290b883a 	add	r5,r5,r4
8110d580:	30000626 	beq	r6,zero,8110d59c <memcpy+0x11c>
8110d584:	198d883a 	add	r6,r3,r6
8110d588:	29c00003 	ldbu	r7,0(r5)
8110d58c:	18c00044 	addi	r3,r3,1
8110d590:	29400044 	addi	r5,r5,1
8110d594:	19ffffc5 	stb	r7,-1(r3)
8110d598:	19bffb1e 	bne	r3,r6,8110d588 <__reset+0xfb0ed588>
8110d59c:	dfc00217 	ldw	ra,8(sp)
8110d5a0:	dc400117 	ldw	r17,4(sp)
8110d5a4:	dc000017 	ldw	r16,0(sp)
8110d5a8:	dec00304 	addi	sp,sp,12
8110d5ac:	f800283a 	ret
8110d5b0:	2007883a 	mov	r3,r4
8110d5b4:	003ff206 	br	8110d580 <__reset+0xfb0ed580>
8110d5b8:	2007883a 	mov	r3,r4
8110d5bc:	003ff106 	br	8110d584 <__reset+0xfb0ed584>
8110d5c0:	200d883a 	mov	r6,r4
8110d5c4:	003fee06 	br	8110d580 <__reset+0xfb0ed580>

8110d5c8 <memset>:
8110d5c8:	20c000cc 	andi	r3,r4,3
8110d5cc:	2005883a 	mov	r2,r4
8110d5d0:	18004426 	beq	r3,zero,8110d6e4 <memset+0x11c>
8110d5d4:	31ffffc4 	addi	r7,r6,-1
8110d5d8:	30004026 	beq	r6,zero,8110d6dc <memset+0x114>
8110d5dc:	2813883a 	mov	r9,r5
8110d5e0:	200d883a 	mov	r6,r4
8110d5e4:	2007883a 	mov	r3,r4
8110d5e8:	00000406 	br	8110d5fc <memset+0x34>
8110d5ec:	3a3fffc4 	addi	r8,r7,-1
8110d5f0:	31800044 	addi	r6,r6,1
8110d5f4:	38003926 	beq	r7,zero,8110d6dc <memset+0x114>
8110d5f8:	400f883a 	mov	r7,r8
8110d5fc:	18c00044 	addi	r3,r3,1
8110d600:	32400005 	stb	r9,0(r6)
8110d604:	1a0000cc 	andi	r8,r3,3
8110d608:	403ff81e 	bne	r8,zero,8110d5ec <__reset+0xfb0ed5ec>
8110d60c:	010000c4 	movi	r4,3
8110d610:	21c02d2e 	bgeu	r4,r7,8110d6c8 <memset+0x100>
8110d614:	29003fcc 	andi	r4,r5,255
8110d618:	200c923a 	slli	r6,r4,8
8110d61c:	3108b03a 	or	r4,r6,r4
8110d620:	200c943a 	slli	r6,r4,16
8110d624:	218cb03a 	or	r6,r4,r6
8110d628:	010003c4 	movi	r4,15
8110d62c:	21c0182e 	bgeu	r4,r7,8110d690 <memset+0xc8>
8110d630:	3b3ffc04 	addi	r12,r7,-16
8110d634:	6018d13a 	srli	r12,r12,4
8110d638:	1a000104 	addi	r8,r3,4
8110d63c:	1ac00204 	addi	r11,r3,8
8110d640:	6008913a 	slli	r4,r12,4
8110d644:	1a800304 	addi	r10,r3,12
8110d648:	1813883a 	mov	r9,r3
8110d64c:	21000504 	addi	r4,r4,20
8110d650:	1909883a 	add	r4,r3,r4
8110d654:	49800015 	stw	r6,0(r9)
8110d658:	41800015 	stw	r6,0(r8)
8110d65c:	59800015 	stw	r6,0(r11)
8110d660:	51800015 	stw	r6,0(r10)
8110d664:	42000404 	addi	r8,r8,16
8110d668:	4a400404 	addi	r9,r9,16
8110d66c:	5ac00404 	addi	r11,r11,16
8110d670:	52800404 	addi	r10,r10,16
8110d674:	413ff71e 	bne	r8,r4,8110d654 <__reset+0xfb0ed654>
8110d678:	63000044 	addi	r12,r12,1
8110d67c:	6018913a 	slli	r12,r12,4
8110d680:	39c003cc 	andi	r7,r7,15
8110d684:	010000c4 	movi	r4,3
8110d688:	1b07883a 	add	r3,r3,r12
8110d68c:	21c00e2e 	bgeu	r4,r7,8110d6c8 <memset+0x100>
8110d690:	1813883a 	mov	r9,r3
8110d694:	3811883a 	mov	r8,r7
8110d698:	010000c4 	movi	r4,3
8110d69c:	49800015 	stw	r6,0(r9)
8110d6a0:	423fff04 	addi	r8,r8,-4
8110d6a4:	4a400104 	addi	r9,r9,4
8110d6a8:	223ffc36 	bltu	r4,r8,8110d69c <__reset+0xfb0ed69c>
8110d6ac:	393fff04 	addi	r4,r7,-4
8110d6b0:	2008d0ba 	srli	r4,r4,2
8110d6b4:	39c000cc 	andi	r7,r7,3
8110d6b8:	21000044 	addi	r4,r4,1
8110d6bc:	2109883a 	add	r4,r4,r4
8110d6c0:	2109883a 	add	r4,r4,r4
8110d6c4:	1907883a 	add	r3,r3,r4
8110d6c8:	38000526 	beq	r7,zero,8110d6e0 <memset+0x118>
8110d6cc:	19cf883a 	add	r7,r3,r7
8110d6d0:	19400005 	stb	r5,0(r3)
8110d6d4:	18c00044 	addi	r3,r3,1
8110d6d8:	38fffd1e 	bne	r7,r3,8110d6d0 <__reset+0xfb0ed6d0>
8110d6dc:	f800283a 	ret
8110d6e0:	f800283a 	ret
8110d6e4:	2007883a 	mov	r3,r4
8110d6e8:	300f883a 	mov	r7,r6
8110d6ec:	003fc706 	br	8110d60c <__reset+0xfb0ed60c>

8110d6f0 <_open_r>:
8110d6f0:	defffd04 	addi	sp,sp,-12
8110d6f4:	2805883a 	mov	r2,r5
8110d6f8:	dc000015 	stw	r16,0(sp)
8110d6fc:	04204534 	movhi	r16,33044
8110d700:	dc400115 	stw	r17,4(sp)
8110d704:	300b883a 	mov	r5,r6
8110d708:	8426b904 	addi	r16,r16,-25884
8110d70c:	2023883a 	mov	r17,r4
8110d710:	380d883a 	mov	r6,r7
8110d714:	1009883a 	mov	r4,r2
8110d718:	dfc00215 	stw	ra,8(sp)
8110d71c:	80000015 	stw	zero,0(r16)
8110d720:	1121f200 	call	81121f20 <open>
8110d724:	00ffffc4 	movi	r3,-1
8110d728:	10c00526 	beq	r2,r3,8110d740 <_open_r+0x50>
8110d72c:	dfc00217 	ldw	ra,8(sp)
8110d730:	dc400117 	ldw	r17,4(sp)
8110d734:	dc000017 	ldw	r16,0(sp)
8110d738:	dec00304 	addi	sp,sp,12
8110d73c:	f800283a 	ret
8110d740:	80c00017 	ldw	r3,0(r16)
8110d744:	183ff926 	beq	r3,zero,8110d72c <__reset+0xfb0ed72c>
8110d748:	88c00015 	stw	r3,0(r17)
8110d74c:	003ff706 	br	8110d72c <__reset+0xfb0ed72c>

8110d750 <_printf_r>:
8110d750:	defffd04 	addi	sp,sp,-12
8110d754:	2805883a 	mov	r2,r5
8110d758:	dfc00015 	stw	ra,0(sp)
8110d75c:	d9800115 	stw	r6,4(sp)
8110d760:	d9c00215 	stw	r7,8(sp)
8110d764:	21400217 	ldw	r5,8(r4)
8110d768:	d9c00104 	addi	r7,sp,4
8110d76c:	100d883a 	mov	r6,r2
8110d770:	11102700 	call	81110270 <___vfprintf_internal_r>
8110d774:	dfc00017 	ldw	ra,0(sp)
8110d778:	dec00304 	addi	sp,sp,12
8110d77c:	f800283a 	ret

8110d780 <printf>:
8110d780:	defffc04 	addi	sp,sp,-16
8110d784:	dfc00015 	stw	ra,0(sp)
8110d788:	d9400115 	stw	r5,4(sp)
8110d78c:	d9800215 	stw	r6,8(sp)
8110d790:	d9c00315 	stw	r7,12(sp)
8110d794:	00a04534 	movhi	r2,33044
8110d798:	10a65b04 	addi	r2,r2,-26260
8110d79c:	10800017 	ldw	r2,0(r2)
8110d7a0:	200b883a 	mov	r5,r4
8110d7a4:	d9800104 	addi	r6,sp,4
8110d7a8:	11000217 	ldw	r4,8(r2)
8110d7ac:	11124680 	call	81112468 <__vfprintf_internal>
8110d7b0:	dfc00017 	ldw	ra,0(sp)
8110d7b4:	dec00404 	addi	sp,sp,16
8110d7b8:	f800283a 	ret

8110d7bc <_putchar_r>:
8110d7bc:	21800217 	ldw	r6,8(r4)
8110d7c0:	11182481 	jmpi	81118248 <_putc_r>

8110d7c4 <putchar>:
8110d7c4:	00a04534 	movhi	r2,33044
8110d7c8:	10a65b04 	addi	r2,r2,-26260
8110d7cc:	200b883a 	mov	r5,r4
8110d7d0:	11000017 	ldw	r4,0(r2)
8110d7d4:	21800217 	ldw	r6,8(r4)
8110d7d8:	11182481 	jmpi	81118248 <_putc_r>

8110d7dc <_puts_r>:
8110d7dc:	defff604 	addi	sp,sp,-40
8110d7e0:	dc000715 	stw	r16,28(sp)
8110d7e4:	2021883a 	mov	r16,r4
8110d7e8:	2809883a 	mov	r4,r5
8110d7ec:	dc400815 	stw	r17,32(sp)
8110d7f0:	dfc00915 	stw	ra,36(sp)
8110d7f4:	2823883a 	mov	r17,r5
8110d7f8:	110ddac0 	call	8110ddac <strlen>
8110d7fc:	10c00044 	addi	r3,r2,1
8110d800:	d8800115 	stw	r2,4(sp)
8110d804:	00a044f4 	movhi	r2,33043
8110d808:	109d5804 	addi	r2,r2,30048
8110d80c:	d8800215 	stw	r2,8(sp)
8110d810:	00800044 	movi	r2,1
8110d814:	d8800315 	stw	r2,12(sp)
8110d818:	00800084 	movi	r2,2
8110d81c:	dc400015 	stw	r17,0(sp)
8110d820:	d8c00615 	stw	r3,24(sp)
8110d824:	dec00415 	stw	sp,16(sp)
8110d828:	d8800515 	stw	r2,20(sp)
8110d82c:	80000226 	beq	r16,zero,8110d838 <_puts_r+0x5c>
8110d830:	80800e17 	ldw	r2,56(r16)
8110d834:	10001426 	beq	r2,zero,8110d888 <_puts_r+0xac>
8110d838:	81400217 	ldw	r5,8(r16)
8110d83c:	2880030b 	ldhu	r2,12(r5)
8110d840:	10c8000c 	andi	r3,r2,8192
8110d844:	1800061e 	bne	r3,zero,8110d860 <_puts_r+0x84>
8110d848:	29001917 	ldw	r4,100(r5)
8110d84c:	00f7ffc4 	movi	r3,-8193
8110d850:	10880014 	ori	r2,r2,8192
8110d854:	20c6703a 	and	r3,r4,r3
8110d858:	2880030d 	sth	r2,12(r5)
8110d85c:	28c01915 	stw	r3,100(r5)
8110d860:	d9800404 	addi	r6,sp,16
8110d864:	8009883a 	mov	r4,r16
8110d868:	11165e40 	call	811165e4 <__sfvwrite_r>
8110d86c:	1000091e 	bne	r2,zero,8110d894 <_puts_r+0xb8>
8110d870:	00800284 	movi	r2,10
8110d874:	dfc00917 	ldw	ra,36(sp)
8110d878:	dc400817 	ldw	r17,32(sp)
8110d87c:	dc000717 	ldw	r16,28(sp)
8110d880:	dec00a04 	addi	sp,sp,40
8110d884:	f800283a 	ret
8110d888:	8009883a 	mov	r4,r16
8110d88c:	1115e540 	call	81115e54 <__sinit>
8110d890:	003fe906 	br	8110d838 <__reset+0xfb0ed838>
8110d894:	00bfffc4 	movi	r2,-1
8110d898:	003ff606 	br	8110d874 <__reset+0xfb0ed874>

8110d89c <puts>:
8110d89c:	00a04534 	movhi	r2,33044
8110d8a0:	10a65b04 	addi	r2,r2,-26260
8110d8a4:	200b883a 	mov	r5,r4
8110d8a8:	11000017 	ldw	r4,0(r2)
8110d8ac:	110d7dc1 	jmpi	8110d7dc <_puts_r>

8110d8b0 <lflush>:
8110d8b0:	2080030b 	ldhu	r2,12(r4)
8110d8b4:	00c00244 	movi	r3,9
8110d8b8:	1080024c 	andi	r2,r2,9
8110d8bc:	10c00226 	beq	r2,r3,8110d8c8 <lflush+0x18>
8110d8c0:	0005883a 	mov	r2,zero
8110d8c4:	f800283a 	ret
8110d8c8:	1115ad41 	jmpi	81115ad4 <fflush>

8110d8cc <__srefill_r>:
8110d8cc:	defffc04 	addi	sp,sp,-16
8110d8d0:	dc400115 	stw	r17,4(sp)
8110d8d4:	dc000015 	stw	r16,0(sp)
8110d8d8:	dfc00315 	stw	ra,12(sp)
8110d8dc:	dc800215 	stw	r18,8(sp)
8110d8e0:	2023883a 	mov	r17,r4
8110d8e4:	2821883a 	mov	r16,r5
8110d8e8:	20000226 	beq	r4,zero,8110d8f4 <__srefill_r+0x28>
8110d8ec:	20800e17 	ldw	r2,56(r4)
8110d8f0:	10003c26 	beq	r2,zero,8110d9e4 <__srefill_r+0x118>
8110d8f4:	80c0030b 	ldhu	r3,12(r16)
8110d8f8:	1908000c 	andi	r4,r3,8192
8110d8fc:	1805883a 	mov	r2,r3
8110d900:	2000071e 	bne	r4,zero,8110d920 <__srefill_r+0x54>
8110d904:	81001917 	ldw	r4,100(r16)
8110d908:	18880014 	ori	r2,r3,8192
8110d90c:	00f7ffc4 	movi	r3,-8193
8110d910:	20c8703a 	and	r4,r4,r3
8110d914:	8080030d 	sth	r2,12(r16)
8110d918:	1007883a 	mov	r3,r2
8110d91c:	81001915 	stw	r4,100(r16)
8110d920:	80000115 	stw	zero,4(r16)
8110d924:	1100080c 	andi	r4,r2,32
8110d928:	2000571e 	bne	r4,zero,8110da88 <__srefill_r+0x1bc>
8110d92c:	1100010c 	andi	r4,r2,4
8110d930:	20001f26 	beq	r4,zero,8110d9b0 <__srefill_r+0xe4>
8110d934:	81400c17 	ldw	r5,48(r16)
8110d938:	28000826 	beq	r5,zero,8110d95c <__srefill_r+0x90>
8110d93c:	80801004 	addi	r2,r16,64
8110d940:	28800226 	beq	r5,r2,8110d94c <__srefill_r+0x80>
8110d944:	8809883a 	mov	r4,r17
8110d948:	11162d40 	call	811162d4 <_free_r>
8110d94c:	80800f17 	ldw	r2,60(r16)
8110d950:	80000c15 	stw	zero,48(r16)
8110d954:	80800115 	stw	r2,4(r16)
8110d958:	1000391e 	bne	r2,zero,8110da40 <__srefill_r+0x174>
8110d95c:	80800417 	ldw	r2,16(r16)
8110d960:	10004b26 	beq	r2,zero,8110da90 <__srefill_r+0x1c4>
8110d964:	8480030b 	ldhu	r18,12(r16)
8110d968:	908000cc 	andi	r2,r18,3
8110d96c:	10001f1e 	bne	r2,zero,8110d9ec <__srefill_r+0x120>
8110d970:	81800417 	ldw	r6,16(r16)
8110d974:	80800817 	ldw	r2,32(r16)
8110d978:	81c00517 	ldw	r7,20(r16)
8110d97c:	81400717 	ldw	r5,28(r16)
8110d980:	81800015 	stw	r6,0(r16)
8110d984:	8809883a 	mov	r4,r17
8110d988:	103ee83a 	callr	r2
8110d98c:	80800115 	stw	r2,4(r16)
8110d990:	00800e0e 	bge	zero,r2,8110d9cc <__srefill_r+0x100>
8110d994:	0005883a 	mov	r2,zero
8110d998:	dfc00317 	ldw	ra,12(sp)
8110d99c:	dc800217 	ldw	r18,8(sp)
8110d9a0:	dc400117 	ldw	r17,4(sp)
8110d9a4:	dc000017 	ldw	r16,0(sp)
8110d9a8:	dec00404 	addi	sp,sp,16
8110d9ac:	f800283a 	ret
8110d9b0:	1100040c 	andi	r4,r2,16
8110d9b4:	20003026 	beq	r4,zero,8110da78 <__srefill_r+0x1ac>
8110d9b8:	1080020c 	andi	r2,r2,8
8110d9bc:	1000241e 	bne	r2,zero,8110da50 <__srefill_r+0x184>
8110d9c0:	18c00114 	ori	r3,r3,4
8110d9c4:	80c0030d 	sth	r3,12(r16)
8110d9c8:	003fe406 	br	8110d95c <__reset+0xfb0ed95c>
8110d9cc:	80c0030b 	ldhu	r3,12(r16)
8110d9d0:	1000161e 	bne	r2,zero,8110da2c <__srefill_r+0x160>
8110d9d4:	18c00814 	ori	r3,r3,32
8110d9d8:	00bfffc4 	movi	r2,-1
8110d9dc:	80c0030d 	sth	r3,12(r16)
8110d9e0:	003fed06 	br	8110d998 <__reset+0xfb0ed998>
8110d9e4:	1115e540 	call	81115e54 <__sinit>
8110d9e8:	003fc206 	br	8110d8f4 <__reset+0xfb0ed8f4>
8110d9ec:	00a04534 	movhi	r2,33044
8110d9f0:	10a65a04 	addi	r2,r2,-26264
8110d9f4:	11000017 	ldw	r4,0(r2)
8110d9f8:	01604474 	movhi	r5,33041
8110d9fc:	00800044 	movi	r2,1
8110da00:	29762c04 	addi	r5,r5,-10064
8110da04:	8080030d 	sth	r2,12(r16)
8110da08:	1116aa00 	call	81116aa0 <_fwalk>
8110da0c:	00800244 	movi	r2,9
8110da10:	8480030d 	sth	r18,12(r16)
8110da14:	9480024c 	andi	r18,r18,9
8110da18:	90bfd51e 	bne	r18,r2,8110d970 <__reset+0xfb0ed970>
8110da1c:	800b883a 	mov	r5,r16
8110da20:	8809883a 	mov	r4,r17
8110da24:	111585c0 	call	8111585c <__sflush_r>
8110da28:	003fd106 	br	8110d970 <__reset+0xfb0ed970>
8110da2c:	18c01014 	ori	r3,r3,64
8110da30:	80000115 	stw	zero,4(r16)
8110da34:	00bfffc4 	movi	r2,-1
8110da38:	80c0030d 	sth	r3,12(r16)
8110da3c:	003fd606 	br	8110d998 <__reset+0xfb0ed998>
8110da40:	80c00e17 	ldw	r3,56(r16)
8110da44:	0005883a 	mov	r2,zero
8110da48:	80c00015 	stw	r3,0(r16)
8110da4c:	003fd206 	br	8110d998 <__reset+0xfb0ed998>
8110da50:	800b883a 	mov	r5,r16
8110da54:	8809883a 	mov	r4,r17
8110da58:	1115a780 	call	81115a78 <_fflush_r>
8110da5c:	10000a1e 	bne	r2,zero,8110da88 <__srefill_r+0x1bc>
8110da60:	8080030b 	ldhu	r2,12(r16)
8110da64:	00fffdc4 	movi	r3,-9
8110da68:	80000215 	stw	zero,8(r16)
8110da6c:	1886703a 	and	r3,r3,r2
8110da70:	80000615 	stw	zero,24(r16)
8110da74:	003fd206 	br	8110d9c0 <__reset+0xfb0ed9c0>
8110da78:	00800244 	movi	r2,9
8110da7c:	88800015 	stw	r2,0(r17)
8110da80:	18c01014 	ori	r3,r3,64
8110da84:	80c0030d 	sth	r3,12(r16)
8110da88:	00bfffc4 	movi	r2,-1
8110da8c:	003fc206 	br	8110d998 <__reset+0xfb0ed998>
8110da90:	800b883a 	mov	r5,r16
8110da94:	8809883a 	mov	r4,r17
8110da98:	110cab80 	call	8110cab8 <__smakebuf_r>
8110da9c:	003fb106 	br	8110d964 <__reset+0xfb0ed964>

8110daa0 <_sbrk_r>:
8110daa0:	defffd04 	addi	sp,sp,-12
8110daa4:	dc000015 	stw	r16,0(sp)
8110daa8:	04204534 	movhi	r16,33044
8110daac:	dc400115 	stw	r17,4(sp)
8110dab0:	8426b904 	addi	r16,r16,-25884
8110dab4:	2023883a 	mov	r17,r4
8110dab8:	2809883a 	mov	r4,r5
8110dabc:	dfc00215 	stw	ra,8(sp)
8110dac0:	80000015 	stw	zero,0(r16)
8110dac4:	11222100 	call	81122210 <sbrk>
8110dac8:	00ffffc4 	movi	r3,-1
8110dacc:	10c00526 	beq	r2,r3,8110dae4 <_sbrk_r+0x44>
8110dad0:	dfc00217 	ldw	ra,8(sp)
8110dad4:	dc400117 	ldw	r17,4(sp)
8110dad8:	dc000017 	ldw	r16,0(sp)
8110dadc:	dec00304 	addi	sp,sp,12
8110dae0:	f800283a 	ret
8110dae4:	80c00017 	ldw	r3,0(r16)
8110dae8:	183ff926 	beq	r3,zero,8110dad0 <__reset+0xfb0edad0>
8110daec:	88c00015 	stw	r3,0(r17)
8110daf0:	003ff706 	br	8110dad0 <__reset+0xfb0edad0>

8110daf4 <scanf>:
8110daf4:	defffc04 	addi	sp,sp,-16
8110daf8:	dfc00015 	stw	ra,0(sp)
8110dafc:	d9400115 	stw	r5,4(sp)
8110db00:	d9800215 	stw	r6,8(sp)
8110db04:	d9c00315 	stw	r7,12(sp)
8110db08:	00a04534 	movhi	r2,33044
8110db0c:	10a65b04 	addi	r2,r2,-26260
8110db10:	200d883a 	mov	r6,r4
8110db14:	11000017 	ldw	r4,0(r2)
8110db18:	d9c00104 	addi	r7,sp,4
8110db1c:	21400117 	ldw	r5,4(r4)
8110db20:	1113d800 	call	81113d80 <_vfscanf_r>
8110db24:	dfc00017 	ldw	ra,0(sp)
8110db28:	dec00404 	addi	sp,sp,16
8110db2c:	f800283a 	ret

8110db30 <_scanf_r>:
8110db30:	defffd04 	addi	sp,sp,-12
8110db34:	2805883a 	mov	r2,r5
8110db38:	dfc00015 	stw	ra,0(sp)
8110db3c:	d9800115 	stw	r6,4(sp)
8110db40:	d9c00215 	stw	r7,8(sp)
8110db44:	21400117 	ldw	r5,4(r4)
8110db48:	d9c00104 	addi	r7,sp,4
8110db4c:	100d883a 	mov	r6,r2
8110db50:	1113d800 	call	81113d80 <_vfscanf_r>
8110db54:	dfc00017 	ldw	ra,0(sp)
8110db58:	dec00304 	addi	sp,sp,12
8110db5c:	f800283a 	ret

8110db60 <_sprintf_r>:
8110db60:	deffe404 	addi	sp,sp,-112
8110db64:	2807883a 	mov	r3,r5
8110db68:	dfc01a15 	stw	ra,104(sp)
8110db6c:	d9c01b15 	stw	r7,108(sp)
8110db70:	00a00034 	movhi	r2,32768
8110db74:	10bfffc4 	addi	r2,r2,-1
8110db78:	02008204 	movi	r8,520
8110db7c:	d8800215 	stw	r2,8(sp)
8110db80:	d8800515 	stw	r2,20(sp)
8110db84:	d9c01b04 	addi	r7,sp,108
8110db88:	d80b883a 	mov	r5,sp
8110db8c:	00bfffc4 	movi	r2,-1
8110db90:	d8c00015 	stw	r3,0(sp)
8110db94:	d8c00415 	stw	r3,16(sp)
8110db98:	da00030d 	sth	r8,12(sp)
8110db9c:	d880038d 	sth	r2,14(sp)
8110dba0:	110e0980 	call	8110e098 <___svfprintf_internal_r>
8110dba4:	d8c00017 	ldw	r3,0(sp)
8110dba8:	18000005 	stb	zero,0(r3)
8110dbac:	dfc01a17 	ldw	ra,104(sp)
8110dbb0:	dec01c04 	addi	sp,sp,112
8110dbb4:	f800283a 	ret

8110dbb8 <sprintf>:
8110dbb8:	deffe304 	addi	sp,sp,-116
8110dbbc:	2007883a 	mov	r3,r4
8110dbc0:	dfc01a15 	stw	ra,104(sp)
8110dbc4:	d9801b15 	stw	r6,108(sp)
8110dbc8:	d9c01c15 	stw	r7,112(sp)
8110dbcc:	01204534 	movhi	r4,33044
8110dbd0:	21265b04 	addi	r4,r4,-26260
8110dbd4:	21000017 	ldw	r4,0(r4)
8110dbd8:	00a00034 	movhi	r2,32768
8110dbdc:	10bfffc4 	addi	r2,r2,-1
8110dbe0:	280d883a 	mov	r6,r5
8110dbe4:	02008204 	movi	r8,520
8110dbe8:	d8800215 	stw	r2,8(sp)
8110dbec:	d8800515 	stw	r2,20(sp)
8110dbf0:	d9c01b04 	addi	r7,sp,108
8110dbf4:	d80b883a 	mov	r5,sp
8110dbf8:	00bfffc4 	movi	r2,-1
8110dbfc:	d8c00015 	stw	r3,0(sp)
8110dc00:	d8c00415 	stw	r3,16(sp)
8110dc04:	da00030d 	sth	r8,12(sp)
8110dc08:	d880038d 	sth	r2,14(sp)
8110dc0c:	110e0980 	call	8110e098 <___svfprintf_internal_r>
8110dc10:	d8c00017 	ldw	r3,0(sp)
8110dc14:	18000005 	stb	zero,0(r3)
8110dc18:	dfc01a17 	ldw	ra,104(sp)
8110dc1c:	dec01d04 	addi	sp,sp,116
8110dc20:	f800283a 	ret

8110dc24 <__sread>:
8110dc24:	defffe04 	addi	sp,sp,-8
8110dc28:	dc000015 	stw	r16,0(sp)
8110dc2c:	2821883a 	mov	r16,r5
8110dc30:	2940038f 	ldh	r5,14(r5)
8110dc34:	dfc00115 	stw	ra,4(sp)
8110dc38:	11183b00 	call	811183b0 <_read_r>
8110dc3c:	10000716 	blt	r2,zero,8110dc5c <__sread+0x38>
8110dc40:	80c01417 	ldw	r3,80(r16)
8110dc44:	1887883a 	add	r3,r3,r2
8110dc48:	80c01415 	stw	r3,80(r16)
8110dc4c:	dfc00117 	ldw	ra,4(sp)
8110dc50:	dc000017 	ldw	r16,0(sp)
8110dc54:	dec00204 	addi	sp,sp,8
8110dc58:	f800283a 	ret
8110dc5c:	80c0030b 	ldhu	r3,12(r16)
8110dc60:	18fbffcc 	andi	r3,r3,61439
8110dc64:	80c0030d 	sth	r3,12(r16)
8110dc68:	dfc00117 	ldw	ra,4(sp)
8110dc6c:	dc000017 	ldw	r16,0(sp)
8110dc70:	dec00204 	addi	sp,sp,8
8110dc74:	f800283a 	ret

8110dc78 <__seofread>:
8110dc78:	0005883a 	mov	r2,zero
8110dc7c:	f800283a 	ret

8110dc80 <__swrite>:
8110dc80:	2880030b 	ldhu	r2,12(r5)
8110dc84:	defffb04 	addi	sp,sp,-20
8110dc88:	dcc00315 	stw	r19,12(sp)
8110dc8c:	dc800215 	stw	r18,8(sp)
8110dc90:	dc400115 	stw	r17,4(sp)
8110dc94:	dc000015 	stw	r16,0(sp)
8110dc98:	dfc00415 	stw	ra,16(sp)
8110dc9c:	10c0400c 	andi	r3,r2,256
8110dca0:	2821883a 	mov	r16,r5
8110dca4:	2023883a 	mov	r17,r4
8110dca8:	3025883a 	mov	r18,r6
8110dcac:	3827883a 	mov	r19,r7
8110dcb0:	18000526 	beq	r3,zero,8110dcc8 <__swrite+0x48>
8110dcb4:	2940038f 	ldh	r5,14(r5)
8110dcb8:	01c00084 	movi	r7,2
8110dcbc:	000d883a 	mov	r6,zero
8110dcc0:	1116d880 	call	81116d88 <_lseek_r>
8110dcc4:	8080030b 	ldhu	r2,12(r16)
8110dcc8:	8140038f 	ldh	r5,14(r16)
8110dccc:	10bbffcc 	andi	r2,r2,61439
8110dcd0:	980f883a 	mov	r7,r19
8110dcd4:	900d883a 	mov	r6,r18
8110dcd8:	8809883a 	mov	r4,r17
8110dcdc:	8080030d 	sth	r2,12(r16)
8110dce0:	dfc00417 	ldw	ra,16(sp)
8110dce4:	dcc00317 	ldw	r19,12(sp)
8110dce8:	dc800217 	ldw	r18,8(sp)
8110dcec:	dc400117 	ldw	r17,4(sp)
8110dcf0:	dc000017 	ldw	r16,0(sp)
8110dcf4:	dec00504 	addi	sp,sp,20
8110dcf8:	1113dcc1 	jmpi	81113dcc <_write_r>

8110dcfc <__sseek>:
8110dcfc:	defffe04 	addi	sp,sp,-8
8110dd00:	dc000015 	stw	r16,0(sp)
8110dd04:	2821883a 	mov	r16,r5
8110dd08:	2940038f 	ldh	r5,14(r5)
8110dd0c:	dfc00115 	stw	ra,4(sp)
8110dd10:	1116d880 	call	81116d88 <_lseek_r>
8110dd14:	00ffffc4 	movi	r3,-1
8110dd18:	10c00826 	beq	r2,r3,8110dd3c <__sseek+0x40>
8110dd1c:	80c0030b 	ldhu	r3,12(r16)
8110dd20:	80801415 	stw	r2,80(r16)
8110dd24:	18c40014 	ori	r3,r3,4096
8110dd28:	80c0030d 	sth	r3,12(r16)
8110dd2c:	dfc00117 	ldw	ra,4(sp)
8110dd30:	dc000017 	ldw	r16,0(sp)
8110dd34:	dec00204 	addi	sp,sp,8
8110dd38:	f800283a 	ret
8110dd3c:	80c0030b 	ldhu	r3,12(r16)
8110dd40:	18fbffcc 	andi	r3,r3,61439
8110dd44:	80c0030d 	sth	r3,12(r16)
8110dd48:	dfc00117 	ldw	ra,4(sp)
8110dd4c:	dc000017 	ldw	r16,0(sp)
8110dd50:	dec00204 	addi	sp,sp,8
8110dd54:	f800283a 	ret

8110dd58 <__sclose>:
8110dd58:	2940038f 	ldh	r5,14(r5)
8110dd5c:	1113f801 	jmpi	81113f80 <_close_r>

8110dd60 <strcspn>:
8110dd60:	21c00007 	ldb	r7,0(r4)
8110dd64:	38000f26 	beq	r7,zero,8110dda4 <strcspn+0x44>
8110dd68:	2a000007 	ldb	r8,0(r5)
8110dd6c:	2005883a 	mov	r2,r4
8110dd70:	40000726 	beq	r8,zero,8110dd90 <strcspn+0x30>
8110dd74:	3a000926 	beq	r7,r8,8110dd9c <strcspn+0x3c>
8110dd78:	2807883a 	mov	r3,r5
8110dd7c:	00000106 	br	8110dd84 <strcspn+0x24>
8110dd80:	31c00626 	beq	r6,r7,8110dd9c <strcspn+0x3c>
8110dd84:	18c00044 	addi	r3,r3,1
8110dd88:	19800007 	ldb	r6,0(r3)
8110dd8c:	303ffc1e 	bne	r6,zero,8110dd80 <__reset+0xfb0edd80>
8110dd90:	10800044 	addi	r2,r2,1
8110dd94:	11c00007 	ldb	r7,0(r2)
8110dd98:	383ff51e 	bne	r7,zero,8110dd70 <__reset+0xfb0edd70>
8110dd9c:	1105c83a 	sub	r2,r2,r4
8110dda0:	f800283a 	ret
8110dda4:	0005883a 	mov	r2,zero
8110dda8:	f800283a 	ret

8110ddac <strlen>:
8110ddac:	208000cc 	andi	r2,r4,3
8110ddb0:	10002026 	beq	r2,zero,8110de34 <strlen+0x88>
8110ddb4:	20800007 	ldb	r2,0(r4)
8110ddb8:	10002026 	beq	r2,zero,8110de3c <strlen+0x90>
8110ddbc:	2005883a 	mov	r2,r4
8110ddc0:	00000206 	br	8110ddcc <strlen+0x20>
8110ddc4:	10c00007 	ldb	r3,0(r2)
8110ddc8:	18001826 	beq	r3,zero,8110de2c <strlen+0x80>
8110ddcc:	10800044 	addi	r2,r2,1
8110ddd0:	10c000cc 	andi	r3,r2,3
8110ddd4:	183ffb1e 	bne	r3,zero,8110ddc4 <__reset+0xfb0eddc4>
8110ddd8:	10c00017 	ldw	r3,0(r2)
8110dddc:	01ffbff4 	movhi	r7,65279
8110dde0:	39ffbfc4 	addi	r7,r7,-257
8110dde4:	00ca303a 	nor	r5,zero,r3
8110dde8:	01a02074 	movhi	r6,32897
8110ddec:	19c7883a 	add	r3,r3,r7
8110ddf0:	31a02004 	addi	r6,r6,-32640
8110ddf4:	1946703a 	and	r3,r3,r5
8110ddf8:	1986703a 	and	r3,r3,r6
8110ddfc:	1800091e 	bne	r3,zero,8110de24 <strlen+0x78>
8110de00:	10800104 	addi	r2,r2,4
8110de04:	10c00017 	ldw	r3,0(r2)
8110de08:	19cb883a 	add	r5,r3,r7
8110de0c:	00c6303a 	nor	r3,zero,r3
8110de10:	28c6703a 	and	r3,r5,r3
8110de14:	1986703a 	and	r3,r3,r6
8110de18:	183ff926 	beq	r3,zero,8110de00 <__reset+0xfb0ede00>
8110de1c:	00000106 	br	8110de24 <strlen+0x78>
8110de20:	10800044 	addi	r2,r2,1
8110de24:	10c00007 	ldb	r3,0(r2)
8110de28:	183ffd1e 	bne	r3,zero,8110de20 <__reset+0xfb0ede20>
8110de2c:	1105c83a 	sub	r2,r2,r4
8110de30:	f800283a 	ret
8110de34:	2005883a 	mov	r2,r4
8110de38:	003fe706 	br	8110ddd8 <__reset+0xfb0eddd8>
8110de3c:	0005883a 	mov	r2,zero
8110de40:	f800283a 	ret

8110de44 <_strtol_r>:
8110de44:	00a04534 	movhi	r2,33044
8110de48:	defff404 	addi	sp,sp,-48
8110de4c:	10a65904 	addi	r2,r2,-26268
8110de50:	dd400715 	stw	r21,28(sp)
8110de54:	15400017 	ldw	r21,0(r2)
8110de58:	dd800815 	stw	r22,32(sp)
8110de5c:	dd000615 	stw	r20,24(sp)
8110de60:	dcc00515 	stw	r19,20(sp)
8110de64:	d9000015 	stw	r4,0(sp)
8110de68:	dfc00b15 	stw	ra,44(sp)
8110de6c:	df000a15 	stw	fp,40(sp)
8110de70:	ddc00915 	stw	r23,36(sp)
8110de74:	dc800415 	stw	r18,16(sp)
8110de78:	dc400315 	stw	r17,12(sp)
8110de7c:	dc000215 	stw	r16,8(sp)
8110de80:	2829883a 	mov	r20,r5
8110de84:	3027883a 	mov	r19,r6
8110de88:	382d883a 	mov	r22,r7
8110de8c:	2809883a 	mov	r4,r5
8110de90:	24000003 	ldbu	r16,0(r4)
8110de94:	24400044 	addi	r17,r4,1
8110de98:	2007883a 	mov	r3,r4
8110de9c:	ac05883a 	add	r2,r21,r16
8110dea0:	10800043 	ldbu	r2,1(r2)
8110dea4:	8809883a 	mov	r4,r17
8110dea8:	1080020c 	andi	r2,r2,8
8110deac:	103ff81e 	bne	r2,zero,8110de90 <__reset+0xfb0ede90>
8110deb0:	00800b44 	movi	r2,45
8110deb4:	80805826 	beq	r16,r2,8110e018 <_strtol_r+0x1d4>
8110deb8:	00800ac4 	movi	r2,43
8110debc:	80805a26 	beq	r16,r2,8110e028 <_strtol_r+0x1e4>
8110dec0:	0039883a 	mov	fp,zero
8110dec4:	b0004426 	beq	r22,zero,8110dfd8 <_strtol_r+0x194>
8110dec8:	00800404 	movi	r2,16
8110decc:	b0806026 	beq	r22,r2,8110e050 <_strtol_r+0x20c>
8110ded0:	b02f883a 	mov	r23,r22
8110ded4:	00a00034 	movhi	r2,32768
8110ded8:	e025003a 	cmpeq	r18,fp,zero
8110dedc:	14a5c83a 	sub	r18,r2,r18
8110dee0:	b80b883a 	mov	r5,r23
8110dee4:	9009883a 	mov	r4,r18
8110dee8:	111f7f00 	call	8111f7f0 <__umodsi3>
8110deec:	b80b883a 	mov	r5,r23
8110def0:	9009883a 	mov	r4,r18
8110def4:	d8800115 	stw	r2,4(sp)
8110def8:	111f78c0 	call	8111f78c <__udivsi3>
8110defc:	ac07883a 	add	r3,r21,r16
8110df00:	18c00043 	ldbu	r3,1(r3)
8110df04:	880b883a 	mov	r5,r17
8110df08:	000d883a 	mov	r6,zero
8110df0c:	1a00010c 	andi	r8,r3,4
8110df10:	0009883a 	mov	r4,zero
8110df14:	02800044 	movi	r10,1
8110df18:	027fffc4 	movi	r9,-1
8110df1c:	d9c00117 	ldw	r7,4(sp)
8110df20:	40000e26 	beq	r8,zero,8110df5c <_strtol_r+0x118>
8110df24:	843ff404 	addi	r16,r16,-48
8110df28:	8580120e 	bge	r16,r22,8110df74 <_strtol_r+0x130>
8110df2c:	32400526 	beq	r6,r9,8110df44 <_strtol_r+0x100>
8110df30:	11002536 	bltu	r2,r4,8110dfc8 <_strtol_r+0x184>
8110df34:	20802326 	beq	r4,r2,8110dfc4 <_strtol_r+0x180>
8110df38:	25c9383a 	mul	r4,r4,r23
8110df3c:	01800044 	movi	r6,1
8110df40:	8109883a 	add	r4,r16,r4
8110df44:	2c000003 	ldbu	r16,0(r5)
8110df48:	29400044 	addi	r5,r5,1
8110df4c:	ac07883a 	add	r3,r21,r16
8110df50:	18c00043 	ldbu	r3,1(r3)
8110df54:	1a00010c 	andi	r8,r3,4
8110df58:	403ff21e 	bne	r8,zero,8110df24 <__reset+0xfb0edf24>
8110df5c:	18c000cc 	andi	r3,r3,3
8110df60:	18000426 	beq	r3,zero,8110df74 <_strtol_r+0x130>
8110df64:	1a801a26 	beq	r3,r10,8110dfd0 <_strtol_r+0x18c>
8110df68:	00c015c4 	movi	r3,87
8110df6c:	80e1c83a 	sub	r16,r16,r3
8110df70:	85bfee16 	blt	r16,r22,8110df2c <__reset+0xfb0edf2c>
8110df74:	00bfffc4 	movi	r2,-1
8110df78:	30801e26 	beq	r6,r2,8110dff4 <_strtol_r+0x1b0>
8110df7c:	e0001b1e 	bne	fp,zero,8110dfec <_strtol_r+0x1a8>
8110df80:	2005883a 	mov	r2,r4
8110df84:	98000326 	beq	r19,zero,8110df94 <_strtol_r+0x150>
8110df88:	3000211e 	bne	r6,zero,8110e010 <_strtol_r+0x1cc>
8110df8c:	a00b883a 	mov	r5,r20
8110df90:	99400015 	stw	r5,0(r19)
8110df94:	dfc00b17 	ldw	ra,44(sp)
8110df98:	df000a17 	ldw	fp,40(sp)
8110df9c:	ddc00917 	ldw	r23,36(sp)
8110dfa0:	dd800817 	ldw	r22,32(sp)
8110dfa4:	dd400717 	ldw	r21,28(sp)
8110dfa8:	dd000617 	ldw	r20,24(sp)
8110dfac:	dcc00517 	ldw	r19,20(sp)
8110dfb0:	dc800417 	ldw	r18,16(sp)
8110dfb4:	dc400317 	ldw	r17,12(sp)
8110dfb8:	dc000217 	ldw	r16,8(sp)
8110dfbc:	dec00c04 	addi	sp,sp,48
8110dfc0:	f800283a 	ret
8110dfc4:	3c3fdc0e 	bge	r7,r16,8110df38 <__reset+0xfb0edf38>
8110dfc8:	01bfffc4 	movi	r6,-1
8110dfcc:	003fdd06 	br	8110df44 <__reset+0xfb0edf44>
8110dfd0:	00c00dc4 	movi	r3,55
8110dfd4:	003fe506 	br	8110df6c <__reset+0xfb0edf6c>
8110dfd8:	00800c04 	movi	r2,48
8110dfdc:	80801626 	beq	r16,r2,8110e038 <_strtol_r+0x1f4>
8110dfe0:	05800284 	movi	r22,10
8110dfe4:	b02f883a 	mov	r23,r22
8110dfe8:	003fba06 	br	8110ded4 <__reset+0xfb0eded4>
8110dfec:	0109c83a 	sub	r4,zero,r4
8110dff0:	003fe306 	br	8110df80 <__reset+0xfb0edf80>
8110dff4:	d9000017 	ldw	r4,0(sp)
8110dff8:	00c00884 	movi	r3,34
8110dffc:	e005003a 	cmpeq	r2,fp,zero
8110e000:	20c00015 	stw	r3,0(r4)
8110e004:	00e00034 	movhi	r3,32768
8110e008:	1885c83a 	sub	r2,r3,r2
8110e00c:	983fe126 	beq	r19,zero,8110df94 <__reset+0xfb0edf94>
8110e010:	297fffc4 	addi	r5,r5,-1
8110e014:	003fde06 	br	8110df90 <__reset+0xfb0edf90>
8110e018:	1c400084 	addi	r17,r3,2
8110e01c:	1c000043 	ldbu	r16,1(r3)
8110e020:	07000044 	movi	fp,1
8110e024:	003fa706 	br	8110dec4 <__reset+0xfb0edec4>
8110e028:	1c400084 	addi	r17,r3,2
8110e02c:	1c000043 	ldbu	r16,1(r3)
8110e030:	0039883a 	mov	fp,zero
8110e034:	003fa306 	br	8110dec4 <__reset+0xfb0edec4>
8110e038:	88800003 	ldbu	r2,0(r17)
8110e03c:	00c01604 	movi	r3,88
8110e040:	108037cc 	andi	r2,r2,223
8110e044:	10c00826 	beq	r2,r3,8110e068 <_strtol_r+0x224>
8110e048:	05800204 	movi	r22,8
8110e04c:	003fa006 	br	8110ded0 <__reset+0xfb0eded0>
8110e050:	00800c04 	movi	r2,48
8110e054:	80bf9e1e 	bne	r16,r2,8110ded0 <__reset+0xfb0eded0>
8110e058:	88800003 	ldbu	r2,0(r17)
8110e05c:	00c01604 	movi	r3,88
8110e060:	108037cc 	andi	r2,r2,223
8110e064:	10ff9a1e 	bne	r2,r3,8110ded0 <__reset+0xfb0eded0>
8110e068:	05c00404 	movi	r23,16
8110e06c:	8c000043 	ldbu	r16,1(r17)
8110e070:	b82d883a 	mov	r22,r23
8110e074:	8c400084 	addi	r17,r17,2
8110e078:	003f9606 	br	8110ded4 <__reset+0xfb0eded4>

8110e07c <strtol>:
8110e07c:	00a04534 	movhi	r2,33044
8110e080:	10a65b04 	addi	r2,r2,-26260
8110e084:	300f883a 	mov	r7,r6
8110e088:	280d883a 	mov	r6,r5
8110e08c:	200b883a 	mov	r5,r4
8110e090:	11000017 	ldw	r4,0(r2)
8110e094:	110de441 	jmpi	8110de44 <_strtol_r>

8110e098 <___svfprintf_internal_r>:
8110e098:	deffb704 	addi	sp,sp,-292
8110e09c:	dfc04815 	stw	ra,288(sp)
8110e0a0:	ddc04615 	stw	r23,280(sp)
8110e0a4:	d9402c15 	stw	r5,176(sp)
8110e0a8:	d9003915 	stw	r4,228(sp)
8110e0ac:	302f883a 	mov	r23,r6
8110e0b0:	d9c02d15 	stw	r7,180(sp)
8110e0b4:	df004715 	stw	fp,284(sp)
8110e0b8:	dd804515 	stw	r22,276(sp)
8110e0bc:	dd404415 	stw	r21,272(sp)
8110e0c0:	dd004315 	stw	r20,268(sp)
8110e0c4:	dcc04215 	stw	r19,264(sp)
8110e0c8:	dc804115 	stw	r18,260(sp)
8110e0cc:	dc404015 	stw	r17,256(sp)
8110e0d0:	dc003f15 	stw	r16,252(sp)
8110e0d4:	1116d580 	call	81116d58 <_localeconv_r>
8110e0d8:	10800017 	ldw	r2,0(r2)
8110e0dc:	1009883a 	mov	r4,r2
8110e0e0:	d8803415 	stw	r2,208(sp)
8110e0e4:	110ddac0 	call	8110ddac <strlen>
8110e0e8:	d8c02c17 	ldw	r3,176(sp)
8110e0ec:	d8803815 	stw	r2,224(sp)
8110e0f0:	1880030b 	ldhu	r2,12(r3)
8110e0f4:	1080200c 	andi	r2,r2,128
8110e0f8:	10000226 	beq	r2,zero,8110e104 <___svfprintf_internal_r+0x6c>
8110e0fc:	18800417 	ldw	r2,16(r3)
8110e100:	10067f26 	beq	r2,zero,8110fb00 <___svfprintf_internal_r+0x1a68>
8110e104:	dcc03917 	ldw	r19,228(sp)
8110e108:	d8c00404 	addi	r3,sp,16
8110e10c:	056044f4 	movhi	r21,33043
8110e110:	d9001e04 	addi	r4,sp,120
8110e114:	ad5d6984 	addi	r21,r21,30118
8110e118:	d8c01e15 	stw	r3,120(sp)
8110e11c:	d8002015 	stw	zero,128(sp)
8110e120:	d8001f15 	stw	zero,124(sp)
8110e124:	d8003315 	stw	zero,204(sp)
8110e128:	d8003615 	stw	zero,216(sp)
8110e12c:	d8003715 	stw	zero,220(sp)
8110e130:	1811883a 	mov	r8,r3
8110e134:	d8003a15 	stw	zero,232(sp)
8110e138:	d8003b15 	stw	zero,236(sp)
8110e13c:	d8002f15 	stw	zero,188(sp)
8110e140:	d9002815 	stw	r4,160(sp)
8110e144:	b8800007 	ldb	r2,0(r23)
8110e148:	10026726 	beq	r2,zero,8110eae8 <___svfprintf_internal_r+0xa50>
8110e14c:	00c00944 	movi	r3,37
8110e150:	b821883a 	mov	r16,r23
8110e154:	10c0021e 	bne	r2,r3,8110e160 <___svfprintf_internal_r+0xc8>
8110e158:	00001406 	br	8110e1ac <___svfprintf_internal_r+0x114>
8110e15c:	10c00326 	beq	r2,r3,8110e16c <___svfprintf_internal_r+0xd4>
8110e160:	84000044 	addi	r16,r16,1
8110e164:	80800007 	ldb	r2,0(r16)
8110e168:	103ffc1e 	bne	r2,zero,8110e15c <__reset+0xfb0ee15c>
8110e16c:	85e3c83a 	sub	r17,r16,r23
8110e170:	88000e26 	beq	r17,zero,8110e1ac <___svfprintf_internal_r+0x114>
8110e174:	d8c02017 	ldw	r3,128(sp)
8110e178:	d8801f17 	ldw	r2,124(sp)
8110e17c:	45c00015 	stw	r23,0(r8)
8110e180:	1c47883a 	add	r3,r3,r17
8110e184:	10800044 	addi	r2,r2,1
8110e188:	d8c02015 	stw	r3,128(sp)
8110e18c:	44400115 	stw	r17,4(r8)
8110e190:	d8801f15 	stw	r2,124(sp)
8110e194:	00c001c4 	movi	r3,7
8110e198:	18809716 	blt	r3,r2,8110e3f8 <___svfprintf_internal_r+0x360>
8110e19c:	42000204 	addi	r8,r8,8
8110e1a0:	d9402f17 	ldw	r5,188(sp)
8110e1a4:	2c4b883a 	add	r5,r5,r17
8110e1a8:	d9402f15 	stw	r5,188(sp)
8110e1ac:	80800007 	ldb	r2,0(r16)
8110e1b0:	10009826 	beq	r2,zero,8110e414 <___svfprintf_internal_r+0x37c>
8110e1b4:	84400047 	ldb	r17,1(r16)
8110e1b8:	00bfffc4 	movi	r2,-1
8110e1bc:	85c00044 	addi	r23,r16,1
8110e1c0:	d8002785 	stb	zero,158(sp)
8110e1c4:	0007883a 	mov	r3,zero
8110e1c8:	000f883a 	mov	r7,zero
8110e1cc:	d8802915 	stw	r2,164(sp)
8110e1d0:	d8003115 	stw	zero,196(sp)
8110e1d4:	0025883a 	mov	r18,zero
8110e1d8:	01401604 	movi	r5,88
8110e1dc:	01800244 	movi	r6,9
8110e1e0:	02800a84 	movi	r10,42
8110e1e4:	02401b04 	movi	r9,108
8110e1e8:	bdc00044 	addi	r23,r23,1
8110e1ec:	88bff804 	addi	r2,r17,-32
8110e1f0:	2882f036 	bltu	r5,r2,8110edb4 <___svfprintf_internal_r+0xd1c>
8110e1f4:	100490ba 	slli	r2,r2,2
8110e1f8:	01204474 	movhi	r4,33041
8110e1fc:	21388304 	addi	r4,r4,-7668
8110e200:	1105883a 	add	r2,r2,r4
8110e204:	10800017 	ldw	r2,0(r2)
8110e208:	1000683a 	jmp	r2
8110e20c:	8110ed1c 	xori	r4,r16,17332
8110e210:	8110edb4 	orhi	r4,r16,17334
8110e214:	8110edb4 	orhi	r4,r16,17334
8110e218:	8110ed10 	cmplti	r4,r16,17332
8110e21c:	8110edb4 	orhi	r4,r16,17334
8110e220:	8110edb4 	orhi	r4,r16,17334
8110e224:	8110edb4 	orhi	r4,r16,17334
8110e228:	8110edb4 	orhi	r4,r16,17334
8110e22c:	8110edb4 	orhi	r4,r16,17334
8110e230:	8110edb4 	orhi	r4,r16,17334
8110e234:	8110e470 	cmpltui	r4,r16,17297
8110e238:	8110ec4c 	andi	r4,r16,17329
8110e23c:	8110edb4 	orhi	r4,r16,17334
8110e240:	8110e380 	call	88110e38 <__reset+0x20f0e38>
8110e244:	8110e498 	cmpnei	r4,r16,17298
8110e248:	8110edb4 	orhi	r4,r16,17334
8110e24c:	8110e50c 	andi	r4,r16,17300
8110e250:	8110e4d8 	cmpnei	r4,r16,17299
8110e254:	8110e4d8 	cmpnei	r4,r16,17299
8110e258:	8110e4d8 	cmpnei	r4,r16,17299
8110e25c:	8110e4d8 	cmpnei	r4,r16,17299
8110e260:	8110e4d8 	cmpnei	r4,r16,17299
8110e264:	8110e4d8 	cmpnei	r4,r16,17299
8110e268:	8110e4d8 	cmpnei	r4,r16,17299
8110e26c:	8110e4d8 	cmpnei	r4,r16,17299
8110e270:	8110e4d8 	cmpnei	r4,r16,17299
8110e274:	8110edb4 	orhi	r4,r16,17334
8110e278:	8110edb4 	orhi	r4,r16,17334
8110e27c:	8110edb4 	orhi	r4,r16,17334
8110e280:	8110edb4 	orhi	r4,r16,17334
8110e284:	8110edb4 	orhi	r4,r16,17334
8110e288:	8110edb4 	orhi	r4,r16,17334
8110e28c:	8110edb4 	orhi	r4,r16,17334
8110e290:	8110edb4 	orhi	r4,r16,17334
8110e294:	8110edb4 	orhi	r4,r16,17334
8110e298:	8110edb4 	orhi	r4,r16,17334
8110e29c:	8110e5c4 	addi	r4,r16,17303
8110e2a0:	8110e518 	cmpnei	r4,r16,17300
8110e2a4:	8110edb4 	orhi	r4,r16,17334
8110e2a8:	8110e518 	cmpnei	r4,r16,17300
8110e2ac:	8110edb4 	orhi	r4,r16,17334
8110e2b0:	8110edb4 	orhi	r4,r16,17334
8110e2b4:	8110edb4 	orhi	r4,r16,17334
8110e2b8:	8110edb4 	orhi	r4,r16,17334
8110e2bc:	8110e5b8 	rdprs	r4,r16,17302
8110e2c0:	8110edb4 	orhi	r4,r16,17334
8110e2c4:	8110edb4 	orhi	r4,r16,17334
8110e2c8:	8110e680 	call	88110e68 <__reset+0x20f0e68>
8110e2cc:	8110edb4 	orhi	r4,r16,17334
8110e2d0:	8110edb4 	orhi	r4,r16,17334
8110e2d4:	8110edb4 	orhi	r4,r16,17334
8110e2d8:	8110edb4 	orhi	r4,r16,17334
8110e2dc:	8110edb4 	orhi	r4,r16,17334
8110e2e0:	8110eaf0 	cmpltui	r4,r16,17323
8110e2e4:	8110edb4 	orhi	r4,r16,17334
8110e2e8:	8110edb4 	orhi	r4,r16,17334
8110e2ec:	8110eb50 	cmplti	r4,r16,17325
8110e2f0:	8110edb4 	orhi	r4,r16,17334
8110e2f4:	8110edb4 	orhi	r4,r16,17334
8110e2f8:	8110edb4 	orhi	r4,r16,17334
8110e2fc:	8110edb4 	orhi	r4,r16,17334
8110e300:	8110edb4 	orhi	r4,r16,17334
8110e304:	8110edb4 	orhi	r4,r16,17334
8110e308:	8110edb4 	orhi	r4,r16,17334
8110e30c:	8110edb4 	orhi	r4,r16,17334
8110e310:	8110edb4 	orhi	r4,r16,17334
8110e314:	8110edb4 	orhi	r4,r16,17334
8110e318:	8110ec00 	call	88110ec0 <__reset+0x20f0ec0>
8110e31c:	8110ed3c 	xorhi	r4,r16,17332
8110e320:	8110e518 	cmpnei	r4,r16,17300
8110e324:	8110e518 	cmpnei	r4,r16,17300
8110e328:	8110e518 	cmpnei	r4,r16,17300
8110e32c:	8110ed90 	cmplti	r4,r16,17334
8110e330:	8110ed3c 	xorhi	r4,r16,17332
8110e334:	8110edb4 	orhi	r4,r16,17334
8110e338:	8110edb4 	orhi	r4,r16,17334
8110e33c:	8110ed4c 	andi	r4,r16,17333
8110e340:	8110edb4 	orhi	r4,r16,17334
8110e344:	8110ed5c 	xori	r4,r16,17333
8110e348:	8110ec3c 	xorhi	r4,r16,17328
8110e34c:	8110e38c 	andi	r4,r16,17294
8110e350:	8110ec5c 	xori	r4,r16,17329
8110e354:	8110edb4 	orhi	r4,r16,17334
8110e358:	8110ec68 	cmpgeui	r4,r16,17329
8110e35c:	8110edb4 	orhi	r4,r16,17334
8110e360:	8110ecc4 	addi	r4,r16,17331
8110e364:	8110edb4 	orhi	r4,r16,17334
8110e368:	8110edb4 	orhi	r4,r16,17334
8110e36c:	8110ecd4 	ori	r4,r16,17331
8110e370:	d9003117 	ldw	r4,196(sp)
8110e374:	d8802d15 	stw	r2,180(sp)
8110e378:	0109c83a 	sub	r4,zero,r4
8110e37c:	d9003115 	stw	r4,196(sp)
8110e380:	94800114 	ori	r18,r18,4
8110e384:	bc400007 	ldb	r17,0(r23)
8110e388:	003f9706 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e38c:	00800c04 	movi	r2,48
8110e390:	d9002d17 	ldw	r4,180(sp)
8110e394:	d9402917 	ldw	r5,164(sp)
8110e398:	d8802705 	stb	r2,156(sp)
8110e39c:	00801e04 	movi	r2,120
8110e3a0:	d8802745 	stb	r2,157(sp)
8110e3a4:	d8002785 	stb	zero,158(sp)
8110e3a8:	20c00104 	addi	r3,r4,4
8110e3ac:	25000017 	ldw	r20,0(r4)
8110e3b0:	002d883a 	mov	r22,zero
8110e3b4:	90800094 	ori	r2,r18,2
8110e3b8:	28028616 	blt	r5,zero,8110edd4 <___svfprintf_internal_r+0xd3c>
8110e3bc:	00bfdfc4 	movi	r2,-129
8110e3c0:	90a4703a 	and	r18,r18,r2
8110e3c4:	d8c02d15 	stw	r3,180(sp)
8110e3c8:	94800094 	ori	r18,r18,2
8110e3cc:	a002731e 	bne	r20,zero,8110ed9c <___svfprintf_internal_r+0xd04>
8110e3d0:	00a044f4 	movhi	r2,33043
8110e3d4:	109d6204 	addi	r2,r2,30088
8110e3d8:	d8803a15 	stw	r2,232(sp)
8110e3dc:	04401e04 	movi	r17,120
8110e3e0:	d8c02917 	ldw	r3,164(sp)
8110e3e4:	0039883a 	mov	fp,zero
8110e3e8:	1801d526 	beq	r3,zero,8110eb40 <___svfprintf_internal_r+0xaa8>
8110e3ec:	0029883a 	mov	r20,zero
8110e3f0:	002d883a 	mov	r22,zero
8110e3f4:	0001f106 	br	8110ebbc <___svfprintf_internal_r+0xb24>
8110e3f8:	d9402c17 	ldw	r5,176(sp)
8110e3fc:	d9801e04 	addi	r6,sp,120
8110e400:	9809883a 	mov	r4,r19
8110e404:	111ab300 	call	8111ab30 <__ssprint_r>
8110e408:	1000081e 	bne	r2,zero,8110e42c <___svfprintf_internal_r+0x394>
8110e40c:	da000404 	addi	r8,sp,16
8110e410:	003f6306 	br	8110e1a0 <__reset+0xfb0ee1a0>
8110e414:	d8802017 	ldw	r2,128(sp)
8110e418:	10000426 	beq	r2,zero,8110e42c <___svfprintf_internal_r+0x394>
8110e41c:	d9402c17 	ldw	r5,176(sp)
8110e420:	d9003917 	ldw	r4,228(sp)
8110e424:	d9801e04 	addi	r6,sp,120
8110e428:	111ab300 	call	8111ab30 <__ssprint_r>
8110e42c:	d8802c17 	ldw	r2,176(sp)
8110e430:	10c0030b 	ldhu	r3,12(r2)
8110e434:	d8802f17 	ldw	r2,188(sp)
8110e438:	18c0100c 	andi	r3,r3,64
8110e43c:	1805f51e 	bne	r3,zero,8110fc14 <___svfprintf_internal_r+0x1b7c>
8110e440:	dfc04817 	ldw	ra,288(sp)
8110e444:	df004717 	ldw	fp,284(sp)
8110e448:	ddc04617 	ldw	r23,280(sp)
8110e44c:	dd804517 	ldw	r22,276(sp)
8110e450:	dd404417 	ldw	r21,272(sp)
8110e454:	dd004317 	ldw	r20,268(sp)
8110e458:	dcc04217 	ldw	r19,264(sp)
8110e45c:	dc804117 	ldw	r18,260(sp)
8110e460:	dc404017 	ldw	r17,256(sp)
8110e464:	dc003f17 	ldw	r16,252(sp)
8110e468:	dec04904 	addi	sp,sp,292
8110e46c:	f800283a 	ret
8110e470:	d8802d17 	ldw	r2,180(sp)
8110e474:	d9002d17 	ldw	r4,180(sp)
8110e478:	10800017 	ldw	r2,0(r2)
8110e47c:	d8803115 	stw	r2,196(sp)
8110e480:	20800104 	addi	r2,r4,4
8110e484:	d9003117 	ldw	r4,196(sp)
8110e488:	203fb916 	blt	r4,zero,8110e370 <__reset+0xfb0ee370>
8110e48c:	d8802d15 	stw	r2,180(sp)
8110e490:	bc400007 	ldb	r17,0(r23)
8110e494:	003f5406 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e498:	bc400007 	ldb	r17,0(r23)
8110e49c:	bac00044 	addi	r11,r23,1
8110e4a0:	8a873926 	beq	r17,r10,81110188 <___svfprintf_internal_r+0x20f0>
8110e4a4:	88bff404 	addi	r2,r17,-48
8110e4a8:	0009883a 	mov	r4,zero
8110e4ac:	30868836 	bltu	r6,r2,8110fed0 <___svfprintf_internal_r+0x1e38>
8110e4b0:	5c400007 	ldb	r17,0(r11)
8110e4b4:	210002a4 	muli	r4,r4,10
8110e4b8:	5dc00044 	addi	r23,r11,1
8110e4bc:	b817883a 	mov	r11,r23
8110e4c0:	2089883a 	add	r4,r4,r2
8110e4c4:	88bff404 	addi	r2,r17,-48
8110e4c8:	30bff92e 	bgeu	r6,r2,8110e4b0 <__reset+0xfb0ee4b0>
8110e4cc:	2005d716 	blt	r4,zero,8110fc2c <___svfprintf_internal_r+0x1b94>
8110e4d0:	d9002915 	stw	r4,164(sp)
8110e4d4:	003f4506 	br	8110e1ec <__reset+0xfb0ee1ec>
8110e4d8:	b809883a 	mov	r4,r23
8110e4dc:	d8003115 	stw	zero,196(sp)
8110e4e0:	88bff404 	addi	r2,r17,-48
8110e4e4:	0017883a 	mov	r11,zero
8110e4e8:	24400007 	ldb	r17,0(r4)
8110e4ec:	5ac002a4 	muli	r11,r11,10
8110e4f0:	bdc00044 	addi	r23,r23,1
8110e4f4:	b809883a 	mov	r4,r23
8110e4f8:	12d7883a 	add	r11,r2,r11
8110e4fc:	88bff404 	addi	r2,r17,-48
8110e500:	30bff92e 	bgeu	r6,r2,8110e4e8 <__reset+0xfb0ee4e8>
8110e504:	dac03115 	stw	r11,196(sp)
8110e508:	003f3806 	br	8110e1ec <__reset+0xfb0ee1ec>
8110e50c:	94802014 	ori	r18,r18,128
8110e510:	bc400007 	ldb	r17,0(r23)
8110e514:	003f3406 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e518:	18c03fcc 	andi	r3,r3,255
8110e51c:	1807471e 	bne	r3,zero,8111023c <___svfprintf_internal_r+0x21a4>
8110e520:	9080020c 	andi	r2,r18,8
8110e524:	10047d26 	beq	r2,zero,8110f71c <___svfprintf_internal_r+0x1684>
8110e528:	d8c02d17 	ldw	r3,180(sp)
8110e52c:	d9002d17 	ldw	r4,180(sp)
8110e530:	d9402d17 	ldw	r5,180(sp)
8110e534:	18c00017 	ldw	r3,0(r3)
8110e538:	21000117 	ldw	r4,4(r4)
8110e53c:	29400204 	addi	r5,r5,8
8110e540:	d8c03615 	stw	r3,216(sp)
8110e544:	d9003715 	stw	r4,220(sp)
8110e548:	d9402d15 	stw	r5,180(sp)
8110e54c:	d9003617 	ldw	r4,216(sp)
8110e550:	d9403717 	ldw	r5,220(sp)
8110e554:	da003e15 	stw	r8,248(sp)
8110e558:	04000044 	movi	r16,1
8110e55c:	11189740 	call	81118974 <__fpclassifyd>
8110e560:	da003e17 	ldw	r8,248(sp)
8110e564:	14044b1e 	bne	r2,r16,8110f694 <___svfprintf_internal_r+0x15fc>
8110e568:	d9003617 	ldw	r4,216(sp)
8110e56c:	d9403717 	ldw	r5,220(sp)
8110e570:	000d883a 	mov	r6,zero
8110e574:	000f883a 	mov	r7,zero
8110e578:	1120d3c0 	call	81120d3c <__ledf2>
8110e57c:	da003e17 	ldw	r8,248(sp)
8110e580:	1005f316 	blt	r2,zero,8110fd50 <___svfprintf_internal_r+0x1cb8>
8110e584:	df002783 	ldbu	fp,158(sp)
8110e588:	008011c4 	movi	r2,71
8110e58c:	1445590e 	bge	r2,r17,8110faf4 <___svfprintf_internal_r+0x1a5c>
8110e590:	042044f4 	movhi	r16,33043
8110e594:	841d5a04 	addi	r16,r16,30056
8110e598:	00c000c4 	movi	r3,3
8110e59c:	00bfdfc4 	movi	r2,-129
8110e5a0:	d8c02a15 	stw	r3,168(sp)
8110e5a4:	90a4703a 	and	r18,r18,r2
8110e5a8:	d8c02e15 	stw	r3,184(sp)
8110e5ac:	d8002915 	stw	zero,164(sp)
8110e5b0:	d8003215 	stw	zero,200(sp)
8110e5b4:	00006606 	br	8110e750 <___svfprintf_internal_r+0x6b8>
8110e5b8:	94800214 	ori	r18,r18,8
8110e5bc:	bc400007 	ldb	r17,0(r23)
8110e5c0:	003f0906 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110e5c4:	18c03fcc 	andi	r3,r3,255
8110e5c8:	1807181e 	bne	r3,zero,8111022c <___svfprintf_internal_r+0x2194>
8110e5cc:	94800414 	ori	r18,r18,16
8110e5d0:	9080080c 	andi	r2,r18,32
8110e5d4:	10039626 	beq	r2,zero,8110f430 <___svfprintf_internal_r+0x1398>
8110e5d8:	d9402d17 	ldw	r5,180(sp)
8110e5dc:	28800117 	ldw	r2,4(r5)
8110e5e0:	2d000017 	ldw	r20,0(r5)
8110e5e4:	29400204 	addi	r5,r5,8
8110e5e8:	d9402d15 	stw	r5,180(sp)
8110e5ec:	102d883a 	mov	r22,r2
8110e5f0:	10039816 	blt	r2,zero,8110f454 <___svfprintf_internal_r+0x13bc>
8110e5f4:	d9402917 	ldw	r5,164(sp)
8110e5f8:	df002783 	ldbu	fp,158(sp)
8110e5fc:	2803ab16 	blt	r5,zero,8110f4ac <___svfprintf_internal_r+0x1414>
8110e600:	00ffdfc4 	movi	r3,-129
8110e604:	a584b03a 	or	r2,r20,r22
8110e608:	90e4703a 	and	r18,r18,r3
8110e60c:	10014a26 	beq	r2,zero,8110eb38 <___svfprintf_internal_r+0xaa0>
8110e610:	b0034b26 	beq	r22,zero,8110f340 <___svfprintf_internal_r+0x12a8>
8110e614:	dc402a15 	stw	r17,168(sp)
8110e618:	dc001e04 	addi	r16,sp,120
8110e61c:	b023883a 	mov	r17,r22
8110e620:	402d883a 	mov	r22,r8
8110e624:	a009883a 	mov	r4,r20
8110e628:	880b883a 	mov	r5,r17
8110e62c:	01800284 	movi	r6,10
8110e630:	000f883a 	mov	r7,zero
8110e634:	111f15c0 	call	8111f15c <__umoddi3>
8110e638:	10800c04 	addi	r2,r2,48
8110e63c:	843fffc4 	addi	r16,r16,-1
8110e640:	a009883a 	mov	r4,r20
8110e644:	880b883a 	mov	r5,r17
8110e648:	80800005 	stb	r2,0(r16)
8110e64c:	01800284 	movi	r6,10
8110e650:	000f883a 	mov	r7,zero
8110e654:	111ebe40 	call	8111ebe4 <__udivdi3>
8110e658:	1029883a 	mov	r20,r2
8110e65c:	10c4b03a 	or	r2,r2,r3
8110e660:	1823883a 	mov	r17,r3
8110e664:	103fef1e 	bne	r2,zero,8110e624 <__reset+0xfb0ee624>
8110e668:	d8c02817 	ldw	r3,160(sp)
8110e66c:	dc402a17 	ldw	r17,168(sp)
8110e670:	b011883a 	mov	r8,r22
8110e674:	1c07c83a 	sub	r3,r3,r16
8110e678:	d8c02e15 	stw	r3,184(sp)
8110e67c:	00002e06 	br	8110e738 <___svfprintf_internal_r+0x6a0>
8110e680:	18c03fcc 	andi	r3,r3,255
8110e684:	1806e71e 	bne	r3,zero,81110224 <___svfprintf_internal_r+0x218c>
8110e688:	94800414 	ori	r18,r18,16
8110e68c:	9080080c 	andi	r2,r18,32
8110e690:	1002d426 	beq	r2,zero,8110f1e4 <___svfprintf_internal_r+0x114c>
8110e694:	d9402d17 	ldw	r5,180(sp)
8110e698:	d8c02917 	ldw	r3,164(sp)
8110e69c:	d8002785 	stb	zero,158(sp)
8110e6a0:	28800204 	addi	r2,r5,8
8110e6a4:	2d000017 	ldw	r20,0(r5)
8110e6a8:	2d800117 	ldw	r22,4(r5)
8110e6ac:	18041516 	blt	r3,zero,8110f704 <___svfprintf_internal_r+0x166c>
8110e6b0:	013fdfc4 	movi	r4,-129
8110e6b4:	a586b03a 	or	r3,r20,r22
8110e6b8:	d8802d15 	stw	r2,180(sp)
8110e6bc:	9124703a 	and	r18,r18,r4
8110e6c0:	1802d51e 	bne	r3,zero,8110f218 <___svfprintf_internal_r+0x1180>
8110e6c4:	d9402917 	ldw	r5,164(sp)
8110e6c8:	0039883a 	mov	fp,zero
8110e6cc:	2806be26 	beq	r5,zero,811101c8 <___svfprintf_internal_r+0x2130>
8110e6d0:	0029883a 	mov	r20,zero
8110e6d4:	002d883a 	mov	r22,zero
8110e6d8:	dc001e04 	addi	r16,sp,120
8110e6dc:	a006d0fa 	srli	r3,r20,3
8110e6e0:	b008977a 	slli	r4,r22,29
8110e6e4:	b02cd0fa 	srli	r22,r22,3
8110e6e8:	a50001cc 	andi	r20,r20,7
8110e6ec:	a0800c04 	addi	r2,r20,48
8110e6f0:	843fffc4 	addi	r16,r16,-1
8110e6f4:	20e8b03a 	or	r20,r4,r3
8110e6f8:	80800005 	stb	r2,0(r16)
8110e6fc:	a586b03a 	or	r3,r20,r22
8110e700:	183ff61e 	bne	r3,zero,8110e6dc <__reset+0xfb0ee6dc>
8110e704:	90c0004c 	andi	r3,r18,1
8110e708:	18013926 	beq	r3,zero,8110ebf0 <___svfprintf_internal_r+0xb58>
8110e70c:	10803fcc 	andi	r2,r2,255
8110e710:	1080201c 	xori	r2,r2,128
8110e714:	10bfe004 	addi	r2,r2,-128
8110e718:	00c00c04 	movi	r3,48
8110e71c:	10c13426 	beq	r2,r3,8110ebf0 <___svfprintf_internal_r+0xb58>
8110e720:	80ffffc5 	stb	r3,-1(r16)
8110e724:	d8c02817 	ldw	r3,160(sp)
8110e728:	80bfffc4 	addi	r2,r16,-1
8110e72c:	1021883a 	mov	r16,r2
8110e730:	1887c83a 	sub	r3,r3,r2
8110e734:	d8c02e15 	stw	r3,184(sp)
8110e738:	d8802e17 	ldw	r2,184(sp)
8110e73c:	d9002917 	ldw	r4,164(sp)
8110e740:	1100010e 	bge	r2,r4,8110e748 <___svfprintf_internal_r+0x6b0>
8110e744:	2005883a 	mov	r2,r4
8110e748:	d8802a15 	stw	r2,168(sp)
8110e74c:	d8003215 	stw	zero,200(sp)
8110e750:	e7003fcc 	andi	fp,fp,255
8110e754:	e700201c 	xori	fp,fp,128
8110e758:	e73fe004 	addi	fp,fp,-128
8110e75c:	e0000326 	beq	fp,zero,8110e76c <___svfprintf_internal_r+0x6d4>
8110e760:	d8c02a17 	ldw	r3,168(sp)
8110e764:	18c00044 	addi	r3,r3,1
8110e768:	d8c02a15 	stw	r3,168(sp)
8110e76c:	90c0008c 	andi	r3,r18,2
8110e770:	d8c02b15 	stw	r3,172(sp)
8110e774:	18000326 	beq	r3,zero,8110e784 <___svfprintf_internal_r+0x6ec>
8110e778:	d8c02a17 	ldw	r3,168(sp)
8110e77c:	18c00084 	addi	r3,r3,2
8110e780:	d8c02a15 	stw	r3,168(sp)
8110e784:	90c0210c 	andi	r3,r18,132
8110e788:	d8c03015 	stw	r3,192(sp)
8110e78c:	1801a11e 	bne	r3,zero,8110ee14 <___svfprintf_internal_r+0xd7c>
8110e790:	d9003117 	ldw	r4,196(sp)
8110e794:	d8c02a17 	ldw	r3,168(sp)
8110e798:	20e9c83a 	sub	r20,r4,r3
8110e79c:	05019d0e 	bge	zero,r20,8110ee14 <___svfprintf_internal_r+0xd7c>
8110e7a0:	02400404 	movi	r9,16
8110e7a4:	d8c02017 	ldw	r3,128(sp)
8110e7a8:	d8801f17 	ldw	r2,124(sp)
8110e7ac:	4d051b0e 	bge	r9,r20,8110fc1c <___svfprintf_internal_r+0x1b84>
8110e7b0:	016044f4 	movhi	r5,33043
8110e7b4:	295d6d84 	addi	r5,r5,30134
8110e7b8:	dc403c15 	stw	r17,240(sp)
8110e7bc:	d9403515 	stw	r5,212(sp)
8110e7c0:	a023883a 	mov	r17,r20
8110e7c4:	482d883a 	mov	r22,r9
8110e7c8:	9029883a 	mov	r20,r18
8110e7cc:	070001c4 	movi	fp,7
8110e7d0:	8025883a 	mov	r18,r16
8110e7d4:	dc002c17 	ldw	r16,176(sp)
8110e7d8:	00000306 	br	8110e7e8 <___svfprintf_internal_r+0x750>
8110e7dc:	8c7ffc04 	addi	r17,r17,-16
8110e7e0:	42000204 	addi	r8,r8,8
8110e7e4:	b440130e 	bge	r22,r17,8110e834 <___svfprintf_internal_r+0x79c>
8110e7e8:	012044f4 	movhi	r4,33043
8110e7ec:	18c00404 	addi	r3,r3,16
8110e7f0:	10800044 	addi	r2,r2,1
8110e7f4:	211d6d84 	addi	r4,r4,30134
8110e7f8:	41000015 	stw	r4,0(r8)
8110e7fc:	45800115 	stw	r22,4(r8)
8110e800:	d8c02015 	stw	r3,128(sp)
8110e804:	d8801f15 	stw	r2,124(sp)
8110e808:	e0bff40e 	bge	fp,r2,8110e7dc <__reset+0xfb0ee7dc>
8110e80c:	d9801e04 	addi	r6,sp,120
8110e810:	800b883a 	mov	r5,r16
8110e814:	9809883a 	mov	r4,r19
8110e818:	111ab300 	call	8111ab30 <__ssprint_r>
8110e81c:	103f031e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110e820:	8c7ffc04 	addi	r17,r17,-16
8110e824:	d8c02017 	ldw	r3,128(sp)
8110e828:	d8801f17 	ldw	r2,124(sp)
8110e82c:	da000404 	addi	r8,sp,16
8110e830:	b47fed16 	blt	r22,r17,8110e7e8 <__reset+0xfb0ee7e8>
8110e834:	9021883a 	mov	r16,r18
8110e838:	a025883a 	mov	r18,r20
8110e83c:	8829883a 	mov	r20,r17
8110e840:	dc403c17 	ldw	r17,240(sp)
8110e844:	d9403517 	ldw	r5,212(sp)
8110e848:	a0c7883a 	add	r3,r20,r3
8110e84c:	10800044 	addi	r2,r2,1
8110e850:	41400015 	stw	r5,0(r8)
8110e854:	45000115 	stw	r20,4(r8)
8110e858:	d8c02015 	stw	r3,128(sp)
8110e85c:	d8801f15 	stw	r2,124(sp)
8110e860:	010001c4 	movi	r4,7
8110e864:	20829f16 	blt	r4,r2,8110f2e4 <___svfprintf_internal_r+0x124c>
8110e868:	df002787 	ldb	fp,158(sp)
8110e86c:	42000204 	addi	r8,r8,8
8110e870:	e0000c26 	beq	fp,zero,8110e8a4 <___svfprintf_internal_r+0x80c>
8110e874:	d8801f17 	ldw	r2,124(sp)
8110e878:	d9002784 	addi	r4,sp,158
8110e87c:	18c00044 	addi	r3,r3,1
8110e880:	10800044 	addi	r2,r2,1
8110e884:	41000015 	stw	r4,0(r8)
8110e888:	01000044 	movi	r4,1
8110e88c:	41000115 	stw	r4,4(r8)
8110e890:	d8c02015 	stw	r3,128(sp)
8110e894:	d8801f15 	stw	r2,124(sp)
8110e898:	010001c4 	movi	r4,7
8110e89c:	20823816 	blt	r4,r2,8110f180 <___svfprintf_internal_r+0x10e8>
8110e8a0:	42000204 	addi	r8,r8,8
8110e8a4:	d8802b17 	ldw	r2,172(sp)
8110e8a8:	10000c26 	beq	r2,zero,8110e8dc <___svfprintf_internal_r+0x844>
8110e8ac:	d8801f17 	ldw	r2,124(sp)
8110e8b0:	d9002704 	addi	r4,sp,156
8110e8b4:	18c00084 	addi	r3,r3,2
8110e8b8:	10800044 	addi	r2,r2,1
8110e8bc:	41000015 	stw	r4,0(r8)
8110e8c0:	01000084 	movi	r4,2
8110e8c4:	41000115 	stw	r4,4(r8)
8110e8c8:	d8c02015 	stw	r3,128(sp)
8110e8cc:	d8801f15 	stw	r2,124(sp)
8110e8d0:	010001c4 	movi	r4,7
8110e8d4:	20823216 	blt	r4,r2,8110f1a0 <___svfprintf_internal_r+0x1108>
8110e8d8:	42000204 	addi	r8,r8,8
8110e8dc:	d9003017 	ldw	r4,192(sp)
8110e8e0:	00802004 	movi	r2,128
8110e8e4:	20819726 	beq	r4,r2,8110ef44 <___svfprintf_internal_r+0xeac>
8110e8e8:	d9402917 	ldw	r5,164(sp)
8110e8ec:	d8802e17 	ldw	r2,184(sp)
8110e8f0:	28adc83a 	sub	r22,r5,r2
8110e8f4:	05802f0e 	bge	zero,r22,8110e9b4 <___svfprintf_internal_r+0x91c>
8110e8f8:	07000404 	movi	fp,16
8110e8fc:	d8801f17 	ldw	r2,124(sp)
8110e900:	e583c00e 	bge	fp,r22,8110f804 <___svfprintf_internal_r+0x176c>
8110e904:	016044f4 	movhi	r5,33043
8110e908:	295d6984 	addi	r5,r5,30118
8110e90c:	dc402915 	stw	r17,164(sp)
8110e910:	d9402b15 	stw	r5,172(sp)
8110e914:	b023883a 	mov	r17,r22
8110e918:	050001c4 	movi	r20,7
8110e91c:	902d883a 	mov	r22,r18
8110e920:	8025883a 	mov	r18,r16
8110e924:	dc002c17 	ldw	r16,176(sp)
8110e928:	00000306 	br	8110e938 <___svfprintf_internal_r+0x8a0>
8110e92c:	8c7ffc04 	addi	r17,r17,-16
8110e930:	42000204 	addi	r8,r8,8
8110e934:	e440110e 	bge	fp,r17,8110e97c <___svfprintf_internal_r+0x8e4>
8110e938:	18c00404 	addi	r3,r3,16
8110e93c:	10800044 	addi	r2,r2,1
8110e940:	45400015 	stw	r21,0(r8)
8110e944:	47000115 	stw	fp,4(r8)
8110e948:	d8c02015 	stw	r3,128(sp)
8110e94c:	d8801f15 	stw	r2,124(sp)
8110e950:	a0bff60e 	bge	r20,r2,8110e92c <__reset+0xfb0ee92c>
8110e954:	d9801e04 	addi	r6,sp,120
8110e958:	800b883a 	mov	r5,r16
8110e95c:	9809883a 	mov	r4,r19
8110e960:	111ab300 	call	8111ab30 <__ssprint_r>
8110e964:	103eb11e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110e968:	8c7ffc04 	addi	r17,r17,-16
8110e96c:	d8c02017 	ldw	r3,128(sp)
8110e970:	d8801f17 	ldw	r2,124(sp)
8110e974:	da000404 	addi	r8,sp,16
8110e978:	e47fef16 	blt	fp,r17,8110e938 <__reset+0xfb0ee938>
8110e97c:	9021883a 	mov	r16,r18
8110e980:	b025883a 	mov	r18,r22
8110e984:	882d883a 	mov	r22,r17
8110e988:	dc402917 	ldw	r17,164(sp)
8110e98c:	d9002b17 	ldw	r4,172(sp)
8110e990:	1d87883a 	add	r3,r3,r22
8110e994:	10800044 	addi	r2,r2,1
8110e998:	41000015 	stw	r4,0(r8)
8110e99c:	45800115 	stw	r22,4(r8)
8110e9a0:	d8c02015 	stw	r3,128(sp)
8110e9a4:	d8801f15 	stw	r2,124(sp)
8110e9a8:	010001c4 	movi	r4,7
8110e9ac:	2081ec16 	blt	r4,r2,8110f160 <___svfprintf_internal_r+0x10c8>
8110e9b0:	42000204 	addi	r8,r8,8
8110e9b4:	9080400c 	andi	r2,r18,256
8110e9b8:	1001181e 	bne	r2,zero,8110ee1c <___svfprintf_internal_r+0xd84>
8110e9bc:	d9402e17 	ldw	r5,184(sp)
8110e9c0:	d8801f17 	ldw	r2,124(sp)
8110e9c4:	44000015 	stw	r16,0(r8)
8110e9c8:	1947883a 	add	r3,r3,r5
8110e9cc:	10800044 	addi	r2,r2,1
8110e9d0:	41400115 	stw	r5,4(r8)
8110e9d4:	d8c02015 	stw	r3,128(sp)
8110e9d8:	d8801f15 	stw	r2,124(sp)
8110e9dc:	010001c4 	movi	r4,7
8110e9e0:	2081d116 	blt	r4,r2,8110f128 <___svfprintf_internal_r+0x1090>
8110e9e4:	42000204 	addi	r8,r8,8
8110e9e8:	9480010c 	andi	r18,r18,4
8110e9ec:	90003226 	beq	r18,zero,8110eab8 <___svfprintf_internal_r+0xa20>
8110e9f0:	d9403117 	ldw	r5,196(sp)
8110e9f4:	d8802a17 	ldw	r2,168(sp)
8110e9f8:	28a1c83a 	sub	r16,r5,r2
8110e9fc:	04002e0e 	bge	zero,r16,8110eab8 <___svfprintf_internal_r+0xa20>
8110ea00:	04400404 	movi	r17,16
8110ea04:	d8801f17 	ldw	r2,124(sp)
8110ea08:	8c04b90e 	bge	r17,r16,8110fcf0 <___svfprintf_internal_r+0x1c58>
8110ea0c:	016044f4 	movhi	r5,33043
8110ea10:	295d6d84 	addi	r5,r5,30134
8110ea14:	d9403515 	stw	r5,212(sp)
8110ea18:	048001c4 	movi	r18,7
8110ea1c:	dd002c17 	ldw	r20,176(sp)
8110ea20:	00000306 	br	8110ea30 <___svfprintf_internal_r+0x998>
8110ea24:	843ffc04 	addi	r16,r16,-16
8110ea28:	42000204 	addi	r8,r8,8
8110ea2c:	8c00130e 	bge	r17,r16,8110ea7c <___svfprintf_internal_r+0x9e4>
8110ea30:	012044f4 	movhi	r4,33043
8110ea34:	18c00404 	addi	r3,r3,16
8110ea38:	10800044 	addi	r2,r2,1
8110ea3c:	211d6d84 	addi	r4,r4,30134
8110ea40:	41000015 	stw	r4,0(r8)
8110ea44:	44400115 	stw	r17,4(r8)
8110ea48:	d8c02015 	stw	r3,128(sp)
8110ea4c:	d8801f15 	stw	r2,124(sp)
8110ea50:	90bff40e 	bge	r18,r2,8110ea24 <__reset+0xfb0eea24>
8110ea54:	d9801e04 	addi	r6,sp,120
8110ea58:	a00b883a 	mov	r5,r20
8110ea5c:	9809883a 	mov	r4,r19
8110ea60:	111ab300 	call	8111ab30 <__ssprint_r>
8110ea64:	103e711e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110ea68:	843ffc04 	addi	r16,r16,-16
8110ea6c:	d8c02017 	ldw	r3,128(sp)
8110ea70:	d8801f17 	ldw	r2,124(sp)
8110ea74:	da000404 	addi	r8,sp,16
8110ea78:	8c3fed16 	blt	r17,r16,8110ea30 <__reset+0xfb0eea30>
8110ea7c:	d9403517 	ldw	r5,212(sp)
8110ea80:	1c07883a 	add	r3,r3,r16
8110ea84:	10800044 	addi	r2,r2,1
8110ea88:	41400015 	stw	r5,0(r8)
8110ea8c:	44000115 	stw	r16,4(r8)
8110ea90:	d8c02015 	stw	r3,128(sp)
8110ea94:	d8801f15 	stw	r2,124(sp)
8110ea98:	010001c4 	movi	r4,7
8110ea9c:	2080060e 	bge	r4,r2,8110eab8 <___svfprintf_internal_r+0xa20>
8110eaa0:	d9402c17 	ldw	r5,176(sp)
8110eaa4:	d9801e04 	addi	r6,sp,120
8110eaa8:	9809883a 	mov	r4,r19
8110eaac:	111ab300 	call	8111ab30 <__ssprint_r>
8110eab0:	103e5e1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110eab4:	d8c02017 	ldw	r3,128(sp)
8110eab8:	d8803117 	ldw	r2,196(sp)
8110eabc:	d9002a17 	ldw	r4,168(sp)
8110eac0:	1100010e 	bge	r2,r4,8110eac8 <___svfprintf_internal_r+0xa30>
8110eac4:	2005883a 	mov	r2,r4
8110eac8:	d9402f17 	ldw	r5,188(sp)
8110eacc:	288b883a 	add	r5,r5,r2
8110ead0:	d9402f15 	stw	r5,188(sp)
8110ead4:	18019c1e 	bne	r3,zero,8110f148 <___svfprintf_internal_r+0x10b0>
8110ead8:	b8800007 	ldb	r2,0(r23)
8110eadc:	d8001f15 	stw	zero,124(sp)
8110eae0:	da000404 	addi	r8,sp,16
8110eae4:	103d991e 	bne	r2,zero,8110e14c <__reset+0xfb0ee14c>
8110eae8:	b821883a 	mov	r16,r23
8110eaec:	003daf06 	br	8110e1ac <__reset+0xfb0ee1ac>
8110eaf0:	18c03fcc 	andi	r3,r3,255
8110eaf4:	1805c71e 	bne	r3,zero,81110214 <___svfprintf_internal_r+0x217c>
8110eaf8:	94800414 	ori	r18,r18,16
8110eafc:	9080080c 	andi	r2,r18,32
8110eb00:	10020126 	beq	r2,zero,8110f308 <___svfprintf_internal_r+0x1270>
8110eb04:	d8802d17 	ldw	r2,180(sp)
8110eb08:	d9002917 	ldw	r4,164(sp)
8110eb0c:	d8002785 	stb	zero,158(sp)
8110eb10:	10c00204 	addi	r3,r2,8
8110eb14:	15000017 	ldw	r20,0(r2)
8110eb18:	15800117 	ldw	r22,4(r2)
8110eb1c:	20038e16 	blt	r4,zero,8110f958 <___svfprintf_internal_r+0x18c0>
8110eb20:	013fdfc4 	movi	r4,-129
8110eb24:	a584b03a 	or	r2,r20,r22
8110eb28:	d8c02d15 	stw	r3,180(sp)
8110eb2c:	9124703a 	and	r18,r18,r4
8110eb30:	0039883a 	mov	fp,zero
8110eb34:	103eb61e 	bne	r2,zero,8110e610 <__reset+0xfb0ee610>
8110eb38:	d8802917 	ldw	r2,164(sp)
8110eb3c:	1002c81e 	bne	r2,zero,8110f660 <___svfprintf_internal_r+0x15c8>
8110eb40:	d8002915 	stw	zero,164(sp)
8110eb44:	d8002e15 	stw	zero,184(sp)
8110eb48:	dc001e04 	addi	r16,sp,120
8110eb4c:	003efa06 	br	8110e738 <__reset+0xfb0ee738>
8110eb50:	18c03fcc 	andi	r3,r3,255
8110eb54:	1805ad1e 	bne	r3,zero,8111020c <___svfprintf_internal_r+0x2174>
8110eb58:	016044f4 	movhi	r5,33043
8110eb5c:	295d5d04 	addi	r5,r5,30068
8110eb60:	d9403a15 	stw	r5,232(sp)
8110eb64:	9080080c 	andi	r2,r18,32
8110eb68:	10006126 	beq	r2,zero,8110ecf0 <___svfprintf_internal_r+0xc58>
8110eb6c:	d8802d17 	ldw	r2,180(sp)
8110eb70:	15000017 	ldw	r20,0(r2)
8110eb74:	15800117 	ldw	r22,4(r2)
8110eb78:	10800204 	addi	r2,r2,8
8110eb7c:	d8802d15 	stw	r2,180(sp)
8110eb80:	9080004c 	andi	r2,r18,1
8110eb84:	10018e26 	beq	r2,zero,8110f1c0 <___svfprintf_internal_r+0x1128>
8110eb88:	a584b03a 	or	r2,r20,r22
8110eb8c:	10030926 	beq	r2,zero,8110f7b4 <___svfprintf_internal_r+0x171c>
8110eb90:	d8c02917 	ldw	r3,164(sp)
8110eb94:	00800c04 	movi	r2,48
8110eb98:	d8802705 	stb	r2,156(sp)
8110eb9c:	dc402745 	stb	r17,157(sp)
8110eba0:	d8002785 	stb	zero,158(sp)
8110eba4:	90800094 	ori	r2,r18,2
8110eba8:	18048716 	blt	r3,zero,8110fdc8 <___svfprintf_internal_r+0x1d30>
8110ebac:	00bfdfc4 	movi	r2,-129
8110ebb0:	90a4703a 	and	r18,r18,r2
8110ebb4:	94800094 	ori	r18,r18,2
8110ebb8:	0039883a 	mov	fp,zero
8110ebbc:	d9003a17 	ldw	r4,232(sp)
8110ebc0:	dc001e04 	addi	r16,sp,120
8110ebc4:	a08003cc 	andi	r2,r20,15
8110ebc8:	b006973a 	slli	r3,r22,28
8110ebcc:	2085883a 	add	r2,r4,r2
8110ebd0:	a028d13a 	srli	r20,r20,4
8110ebd4:	10800003 	ldbu	r2,0(r2)
8110ebd8:	b02cd13a 	srli	r22,r22,4
8110ebdc:	843fffc4 	addi	r16,r16,-1
8110ebe0:	1d28b03a 	or	r20,r3,r20
8110ebe4:	80800005 	stb	r2,0(r16)
8110ebe8:	a584b03a 	or	r2,r20,r22
8110ebec:	103ff51e 	bne	r2,zero,8110ebc4 <__reset+0xfb0eebc4>
8110ebf0:	d8c02817 	ldw	r3,160(sp)
8110ebf4:	1c07c83a 	sub	r3,r3,r16
8110ebf8:	d8c02e15 	stw	r3,184(sp)
8110ebfc:	003ece06 	br	8110e738 <__reset+0xfb0ee738>
8110ec00:	d8c02d17 	ldw	r3,180(sp)
8110ec04:	d9002d17 	ldw	r4,180(sp)
8110ec08:	d8002785 	stb	zero,158(sp)
8110ec0c:	18800017 	ldw	r2,0(r3)
8110ec10:	21000104 	addi	r4,r4,4
8110ec14:	00c00044 	movi	r3,1
8110ec18:	d8c02a15 	stw	r3,168(sp)
8110ec1c:	d8801405 	stb	r2,80(sp)
8110ec20:	d9002d15 	stw	r4,180(sp)
8110ec24:	d8c02e15 	stw	r3,184(sp)
8110ec28:	d8002915 	stw	zero,164(sp)
8110ec2c:	d8003215 	stw	zero,200(sp)
8110ec30:	dc001404 	addi	r16,sp,80
8110ec34:	0039883a 	mov	fp,zero
8110ec38:	003ecc06 	br	8110e76c <__reset+0xfb0ee76c>
8110ec3c:	18c03fcc 	andi	r3,r3,255
8110ec40:	183e9226 	beq	r3,zero,8110e68c <__reset+0xfb0ee68c>
8110ec44:	d9c02785 	stb	r7,158(sp)
8110ec48:	003e9006 	br	8110e68c <__reset+0xfb0ee68c>
8110ec4c:	00c00044 	movi	r3,1
8110ec50:	01c00ac4 	movi	r7,43
8110ec54:	bc400007 	ldb	r17,0(r23)
8110ec58:	003d6306 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110ec5c:	94800814 	ori	r18,r18,32
8110ec60:	bc400007 	ldb	r17,0(r23)
8110ec64:	003d6006 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110ec68:	d8c02d17 	ldw	r3,180(sp)
8110ec6c:	d8002785 	stb	zero,158(sp)
8110ec70:	1c000017 	ldw	r16,0(r3)
8110ec74:	1d000104 	addi	r20,r3,4
8110ec78:	80040f26 	beq	r16,zero,8110fcb8 <___svfprintf_internal_r+0x1c20>
8110ec7c:	d9002917 	ldw	r4,164(sp)
8110ec80:	2003dc16 	blt	r4,zero,8110fbf4 <___svfprintf_internal_r+0x1b5c>
8110ec84:	200d883a 	mov	r6,r4
8110ec88:	000b883a 	mov	r5,zero
8110ec8c:	8009883a 	mov	r4,r16
8110ec90:	da003e15 	stw	r8,248(sp)
8110ec94:	111700c0 	call	8111700c <memchr>
8110ec98:	da003e17 	ldw	r8,248(sp)
8110ec9c:	10045826 	beq	r2,zero,8110fe00 <___svfprintf_internal_r+0x1d68>
8110eca0:	1405c83a 	sub	r2,r2,r16
8110eca4:	d8802e15 	stw	r2,184(sp)
8110eca8:	1003d816 	blt	r2,zero,8110fc0c <___svfprintf_internal_r+0x1b74>
8110ecac:	df002783 	ldbu	fp,158(sp)
8110ecb0:	d8802a15 	stw	r2,168(sp)
8110ecb4:	dd002d15 	stw	r20,180(sp)
8110ecb8:	d8002915 	stw	zero,164(sp)
8110ecbc:	d8003215 	stw	zero,200(sp)
8110ecc0:	003ea306 	br	8110e750 <__reset+0xfb0ee750>
8110ecc4:	18c03fcc 	andi	r3,r3,255
8110ecc8:	183f8c26 	beq	r3,zero,8110eafc <__reset+0xfb0eeafc>
8110eccc:	d9c02785 	stb	r7,158(sp)
8110ecd0:	003f8a06 	br	8110eafc <__reset+0xfb0eeafc>
8110ecd4:	18c03fcc 	andi	r3,r3,255
8110ecd8:	1805631e 	bne	r3,zero,81110268 <___svfprintf_internal_r+0x21d0>
8110ecdc:	016044f4 	movhi	r5,33043
8110ece0:	295d6204 	addi	r5,r5,30088
8110ece4:	d9403a15 	stw	r5,232(sp)
8110ece8:	9080080c 	andi	r2,r18,32
8110ecec:	103f9f1e 	bne	r2,zero,8110eb6c <__reset+0xfb0eeb6c>
8110ecf0:	9080040c 	andi	r2,r18,16
8110ecf4:	10029c26 	beq	r2,zero,8110f768 <___svfprintf_internal_r+0x16d0>
8110ecf8:	d8c02d17 	ldw	r3,180(sp)
8110ecfc:	002d883a 	mov	r22,zero
8110ed00:	1d000017 	ldw	r20,0(r3)
8110ed04:	18c00104 	addi	r3,r3,4
8110ed08:	d8c02d15 	stw	r3,180(sp)
8110ed0c:	003f9c06 	br	8110eb80 <__reset+0xfb0eeb80>
8110ed10:	94800054 	ori	r18,r18,1
8110ed14:	bc400007 	ldb	r17,0(r23)
8110ed18:	003d3306 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110ed1c:	38803fcc 	andi	r2,r7,255
8110ed20:	1080201c 	xori	r2,r2,128
8110ed24:	10bfe004 	addi	r2,r2,-128
8110ed28:	1002971e 	bne	r2,zero,8110f788 <___svfprintf_internal_r+0x16f0>
8110ed2c:	00c00044 	movi	r3,1
8110ed30:	01c00804 	movi	r7,32
8110ed34:	bc400007 	ldb	r17,0(r23)
8110ed38:	003d2b06 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110ed3c:	18c03fcc 	andi	r3,r3,255
8110ed40:	183e2326 	beq	r3,zero,8110e5d0 <__reset+0xfb0ee5d0>
8110ed44:	d9c02785 	stb	r7,158(sp)
8110ed48:	003e2106 	br	8110e5d0 <__reset+0xfb0ee5d0>
8110ed4c:	bc400007 	ldb	r17,0(r23)
8110ed50:	8a430426 	beq	r17,r9,8110f964 <___svfprintf_internal_r+0x18cc>
8110ed54:	94800414 	ori	r18,r18,16
8110ed58:	003d2306 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110ed5c:	18c03fcc 	andi	r3,r3,255
8110ed60:	18053f1e 	bne	r3,zero,81110260 <___svfprintf_internal_r+0x21c8>
8110ed64:	9080080c 	andi	r2,r18,32
8110ed68:	10028926 	beq	r2,zero,8110f790 <___svfprintf_internal_r+0x16f8>
8110ed6c:	d9402d17 	ldw	r5,180(sp)
8110ed70:	d9002f17 	ldw	r4,188(sp)
8110ed74:	28800017 	ldw	r2,0(r5)
8110ed78:	2007d7fa 	srai	r3,r4,31
8110ed7c:	29400104 	addi	r5,r5,4
8110ed80:	d9402d15 	stw	r5,180(sp)
8110ed84:	11000015 	stw	r4,0(r2)
8110ed88:	10c00115 	stw	r3,4(r2)
8110ed8c:	003ced06 	br	8110e144 <__reset+0xfb0ee144>
8110ed90:	94801014 	ori	r18,r18,64
8110ed94:	bc400007 	ldb	r17,0(r23)
8110ed98:	003d1306 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110ed9c:	012044f4 	movhi	r4,33043
8110eda0:	211d6204 	addi	r4,r4,30088
8110eda4:	0039883a 	mov	fp,zero
8110eda8:	d9003a15 	stw	r4,232(sp)
8110edac:	04401e04 	movi	r17,120
8110edb0:	003f8206 	br	8110ebbc <__reset+0xfb0eebbc>
8110edb4:	18c03fcc 	andi	r3,r3,255
8110edb8:	1805221e 	bne	r3,zero,81110244 <___svfprintf_internal_r+0x21ac>
8110edbc:	883d9526 	beq	r17,zero,8110e414 <__reset+0xfb0ee414>
8110edc0:	00c00044 	movi	r3,1
8110edc4:	d8c02a15 	stw	r3,168(sp)
8110edc8:	dc401405 	stb	r17,80(sp)
8110edcc:	d8002785 	stb	zero,158(sp)
8110edd0:	003f9406 	br	8110ec24 <__reset+0xfb0eec24>
8110edd4:	012044f4 	movhi	r4,33043
8110edd8:	211d6204 	addi	r4,r4,30088
8110eddc:	d9003a15 	stw	r4,232(sp)
8110ede0:	d8c02d15 	stw	r3,180(sp)
8110ede4:	1025883a 	mov	r18,r2
8110ede8:	04401e04 	movi	r17,120
8110edec:	a584b03a 	or	r2,r20,r22
8110edf0:	1000fa1e 	bne	r2,zero,8110f1dc <___svfprintf_internal_r+0x1144>
8110edf4:	0039883a 	mov	fp,zero
8110edf8:	00800084 	movi	r2,2
8110edfc:	10803fcc 	andi	r2,r2,255
8110ee00:	00c00044 	movi	r3,1
8110ee04:	10c21626 	beq	r2,r3,8110f660 <___svfprintf_internal_r+0x15c8>
8110ee08:	00c00084 	movi	r3,2
8110ee0c:	10fe301e 	bne	r2,r3,8110e6d0 <__reset+0xfb0ee6d0>
8110ee10:	003d7606 	br	8110e3ec <__reset+0xfb0ee3ec>
8110ee14:	d8c02017 	ldw	r3,128(sp)
8110ee18:	003e9506 	br	8110e870 <__reset+0xfb0ee870>
8110ee1c:	00801944 	movi	r2,101
8110ee20:	14407c0e 	bge	r2,r17,8110f014 <___svfprintf_internal_r+0xf7c>
8110ee24:	d9003617 	ldw	r4,216(sp)
8110ee28:	d9403717 	ldw	r5,220(sp)
8110ee2c:	000d883a 	mov	r6,zero
8110ee30:	000f883a 	mov	r7,zero
8110ee34:	d8c03d15 	stw	r3,244(sp)
8110ee38:	da003e15 	stw	r8,248(sp)
8110ee3c:	1120bd80 	call	81120bd8 <__eqdf2>
8110ee40:	d8c03d17 	ldw	r3,244(sp)
8110ee44:	da003e17 	ldw	r8,248(sp)
8110ee48:	1000f51e 	bne	r2,zero,8110f220 <___svfprintf_internal_r+0x1188>
8110ee4c:	d8801f17 	ldw	r2,124(sp)
8110ee50:	012044f4 	movhi	r4,33043
8110ee54:	211d6904 	addi	r4,r4,30116
8110ee58:	18c00044 	addi	r3,r3,1
8110ee5c:	10800044 	addi	r2,r2,1
8110ee60:	41000015 	stw	r4,0(r8)
8110ee64:	01000044 	movi	r4,1
8110ee68:	41000115 	stw	r4,4(r8)
8110ee6c:	d8c02015 	stw	r3,128(sp)
8110ee70:	d8801f15 	stw	r2,124(sp)
8110ee74:	010001c4 	movi	r4,7
8110ee78:	20826616 	blt	r4,r2,8110f814 <___svfprintf_internal_r+0x177c>
8110ee7c:	42000204 	addi	r8,r8,8
8110ee80:	d8802617 	ldw	r2,152(sp)
8110ee84:	d9403317 	ldw	r5,204(sp)
8110ee88:	11400216 	blt	r2,r5,8110ee94 <___svfprintf_internal_r+0xdfc>
8110ee8c:	9080004c 	andi	r2,r18,1
8110ee90:	103ed526 	beq	r2,zero,8110e9e8 <__reset+0xfb0ee9e8>
8110ee94:	d8803817 	ldw	r2,224(sp)
8110ee98:	d9003417 	ldw	r4,208(sp)
8110ee9c:	d9403817 	ldw	r5,224(sp)
8110eea0:	1887883a 	add	r3,r3,r2
8110eea4:	d8801f17 	ldw	r2,124(sp)
8110eea8:	41000015 	stw	r4,0(r8)
8110eeac:	41400115 	stw	r5,4(r8)
8110eeb0:	10800044 	addi	r2,r2,1
8110eeb4:	d8c02015 	stw	r3,128(sp)
8110eeb8:	d8801f15 	stw	r2,124(sp)
8110eebc:	010001c4 	movi	r4,7
8110eec0:	2082af16 	blt	r4,r2,8110f980 <___svfprintf_internal_r+0x18e8>
8110eec4:	42000204 	addi	r8,r8,8
8110eec8:	d8803317 	ldw	r2,204(sp)
8110eecc:	143fffc4 	addi	r16,r2,-1
8110eed0:	043ec50e 	bge	zero,r16,8110e9e8 <__reset+0xfb0ee9e8>
8110eed4:	04400404 	movi	r17,16
8110eed8:	d8801f17 	ldw	r2,124(sp)
8110eedc:	8c00860e 	bge	r17,r16,8110f0f8 <___svfprintf_internal_r+0x1060>
8110eee0:	016044f4 	movhi	r5,33043
8110eee4:	295d6984 	addi	r5,r5,30118
8110eee8:	d9402b15 	stw	r5,172(sp)
8110eeec:	058001c4 	movi	r22,7
8110eef0:	dd002c17 	ldw	r20,176(sp)
8110eef4:	00000306 	br	8110ef04 <___svfprintf_internal_r+0xe6c>
8110eef8:	42000204 	addi	r8,r8,8
8110eefc:	843ffc04 	addi	r16,r16,-16
8110ef00:	8c00800e 	bge	r17,r16,8110f104 <___svfprintf_internal_r+0x106c>
8110ef04:	18c00404 	addi	r3,r3,16
8110ef08:	10800044 	addi	r2,r2,1
8110ef0c:	45400015 	stw	r21,0(r8)
8110ef10:	44400115 	stw	r17,4(r8)
8110ef14:	d8c02015 	stw	r3,128(sp)
8110ef18:	d8801f15 	stw	r2,124(sp)
8110ef1c:	b0bff60e 	bge	r22,r2,8110eef8 <__reset+0xfb0eeef8>
8110ef20:	d9801e04 	addi	r6,sp,120
8110ef24:	a00b883a 	mov	r5,r20
8110ef28:	9809883a 	mov	r4,r19
8110ef2c:	111ab300 	call	8111ab30 <__ssprint_r>
8110ef30:	103d3e1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110ef34:	d8c02017 	ldw	r3,128(sp)
8110ef38:	d8801f17 	ldw	r2,124(sp)
8110ef3c:	da000404 	addi	r8,sp,16
8110ef40:	003fee06 	br	8110eefc <__reset+0xfb0eeefc>
8110ef44:	d9403117 	ldw	r5,196(sp)
8110ef48:	d8802a17 	ldw	r2,168(sp)
8110ef4c:	28adc83a 	sub	r22,r5,r2
8110ef50:	05be650e 	bge	zero,r22,8110e8e8 <__reset+0xfb0ee8e8>
8110ef54:	07000404 	movi	fp,16
8110ef58:	d8801f17 	ldw	r2,124(sp)
8110ef5c:	e583a20e 	bge	fp,r22,8110fde8 <___svfprintf_internal_r+0x1d50>
8110ef60:	016044f4 	movhi	r5,33043
8110ef64:	295d6984 	addi	r5,r5,30118
8110ef68:	dc403015 	stw	r17,192(sp)
8110ef6c:	d9402b15 	stw	r5,172(sp)
8110ef70:	b023883a 	mov	r17,r22
8110ef74:	050001c4 	movi	r20,7
8110ef78:	902d883a 	mov	r22,r18
8110ef7c:	8025883a 	mov	r18,r16
8110ef80:	dc002c17 	ldw	r16,176(sp)
8110ef84:	00000306 	br	8110ef94 <___svfprintf_internal_r+0xefc>
8110ef88:	8c7ffc04 	addi	r17,r17,-16
8110ef8c:	42000204 	addi	r8,r8,8
8110ef90:	e440110e 	bge	fp,r17,8110efd8 <___svfprintf_internal_r+0xf40>
8110ef94:	18c00404 	addi	r3,r3,16
8110ef98:	10800044 	addi	r2,r2,1
8110ef9c:	45400015 	stw	r21,0(r8)
8110efa0:	47000115 	stw	fp,4(r8)
8110efa4:	d8c02015 	stw	r3,128(sp)
8110efa8:	d8801f15 	stw	r2,124(sp)
8110efac:	a0bff60e 	bge	r20,r2,8110ef88 <__reset+0xfb0eef88>
8110efb0:	d9801e04 	addi	r6,sp,120
8110efb4:	800b883a 	mov	r5,r16
8110efb8:	9809883a 	mov	r4,r19
8110efbc:	111ab300 	call	8111ab30 <__ssprint_r>
8110efc0:	103d1a1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110efc4:	8c7ffc04 	addi	r17,r17,-16
8110efc8:	d8c02017 	ldw	r3,128(sp)
8110efcc:	d8801f17 	ldw	r2,124(sp)
8110efd0:	da000404 	addi	r8,sp,16
8110efd4:	e47fef16 	blt	fp,r17,8110ef94 <__reset+0xfb0eef94>
8110efd8:	9021883a 	mov	r16,r18
8110efdc:	b025883a 	mov	r18,r22
8110efe0:	882d883a 	mov	r22,r17
8110efe4:	dc403017 	ldw	r17,192(sp)
8110efe8:	d9002b17 	ldw	r4,172(sp)
8110efec:	1d87883a 	add	r3,r3,r22
8110eff0:	10800044 	addi	r2,r2,1
8110eff4:	41000015 	stw	r4,0(r8)
8110eff8:	45800115 	stw	r22,4(r8)
8110effc:	d8c02015 	stw	r3,128(sp)
8110f000:	d8801f15 	stw	r2,124(sp)
8110f004:	010001c4 	movi	r4,7
8110f008:	20819a16 	blt	r4,r2,8110f674 <___svfprintf_internal_r+0x15dc>
8110f00c:	42000204 	addi	r8,r8,8
8110f010:	003e3506 	br	8110e8e8 <__reset+0xfb0ee8e8>
8110f014:	d9403317 	ldw	r5,204(sp)
8110f018:	00800044 	movi	r2,1
8110f01c:	18c00044 	addi	r3,r3,1
8110f020:	1141710e 	bge	r2,r5,8110f5e8 <___svfprintf_internal_r+0x1550>
8110f024:	dc401f17 	ldw	r17,124(sp)
8110f028:	00800044 	movi	r2,1
8110f02c:	40800115 	stw	r2,4(r8)
8110f030:	8c400044 	addi	r17,r17,1
8110f034:	44000015 	stw	r16,0(r8)
8110f038:	d8c02015 	stw	r3,128(sp)
8110f03c:	dc401f15 	stw	r17,124(sp)
8110f040:	008001c4 	movi	r2,7
8110f044:	14417416 	blt	r2,r17,8110f618 <___svfprintf_internal_r+0x1580>
8110f048:	42000204 	addi	r8,r8,8
8110f04c:	d8803817 	ldw	r2,224(sp)
8110f050:	d9003417 	ldw	r4,208(sp)
8110f054:	8c400044 	addi	r17,r17,1
8110f058:	10c7883a 	add	r3,r2,r3
8110f05c:	40800115 	stw	r2,4(r8)
8110f060:	41000015 	stw	r4,0(r8)
8110f064:	d8c02015 	stw	r3,128(sp)
8110f068:	dc401f15 	stw	r17,124(sp)
8110f06c:	008001c4 	movi	r2,7
8110f070:	14417216 	blt	r2,r17,8110f63c <___svfprintf_internal_r+0x15a4>
8110f074:	45800204 	addi	r22,r8,8
8110f078:	d9003617 	ldw	r4,216(sp)
8110f07c:	d9403717 	ldw	r5,220(sp)
8110f080:	000d883a 	mov	r6,zero
8110f084:	000f883a 	mov	r7,zero
8110f088:	d8c03d15 	stw	r3,244(sp)
8110f08c:	1120bd80 	call	81120bd8 <__eqdf2>
8110f090:	d8c03d17 	ldw	r3,244(sp)
8110f094:	1000b326 	beq	r2,zero,8110f364 <___svfprintf_internal_r+0x12cc>
8110f098:	d9403317 	ldw	r5,204(sp)
8110f09c:	84000044 	addi	r16,r16,1
8110f0a0:	8c400044 	addi	r17,r17,1
8110f0a4:	28bfffc4 	addi	r2,r5,-1
8110f0a8:	1887883a 	add	r3,r3,r2
8110f0ac:	b0800115 	stw	r2,4(r22)
8110f0b0:	b4000015 	stw	r16,0(r22)
8110f0b4:	d8c02015 	stw	r3,128(sp)
8110f0b8:	dc401f15 	stw	r17,124(sp)
8110f0bc:	008001c4 	movi	r2,7
8110f0c0:	1440d216 	blt	r2,r17,8110f40c <___svfprintf_internal_r+0x1374>
8110f0c4:	b5800204 	addi	r22,r22,8
8110f0c8:	d9003b17 	ldw	r4,236(sp)
8110f0cc:	df0022c4 	addi	fp,sp,139
8110f0d0:	8c400044 	addi	r17,r17,1
8110f0d4:	20c7883a 	add	r3,r4,r3
8110f0d8:	b7000015 	stw	fp,0(r22)
8110f0dc:	b1000115 	stw	r4,4(r22)
8110f0e0:	d8c02015 	stw	r3,128(sp)
8110f0e4:	dc401f15 	stw	r17,124(sp)
8110f0e8:	008001c4 	movi	r2,7
8110f0ec:	14400e16 	blt	r2,r17,8110f128 <___svfprintf_internal_r+0x1090>
8110f0f0:	b2000204 	addi	r8,r22,8
8110f0f4:	003e3c06 	br	8110e9e8 <__reset+0xfb0ee9e8>
8110f0f8:	012044f4 	movhi	r4,33043
8110f0fc:	211d6984 	addi	r4,r4,30118
8110f100:	d9002b15 	stw	r4,172(sp)
8110f104:	d9002b17 	ldw	r4,172(sp)
8110f108:	1c07883a 	add	r3,r3,r16
8110f10c:	44000115 	stw	r16,4(r8)
8110f110:	41000015 	stw	r4,0(r8)
8110f114:	10800044 	addi	r2,r2,1
8110f118:	d8c02015 	stw	r3,128(sp)
8110f11c:	d8801f15 	stw	r2,124(sp)
8110f120:	010001c4 	movi	r4,7
8110f124:	20be2f0e 	bge	r4,r2,8110e9e4 <__reset+0xfb0ee9e4>
8110f128:	d9402c17 	ldw	r5,176(sp)
8110f12c:	d9801e04 	addi	r6,sp,120
8110f130:	9809883a 	mov	r4,r19
8110f134:	111ab300 	call	8111ab30 <__ssprint_r>
8110f138:	103cbc1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f13c:	d8c02017 	ldw	r3,128(sp)
8110f140:	da000404 	addi	r8,sp,16
8110f144:	003e2806 	br	8110e9e8 <__reset+0xfb0ee9e8>
8110f148:	d9402c17 	ldw	r5,176(sp)
8110f14c:	d9801e04 	addi	r6,sp,120
8110f150:	9809883a 	mov	r4,r19
8110f154:	111ab300 	call	8111ab30 <__ssprint_r>
8110f158:	103e5f26 	beq	r2,zero,8110ead8 <__reset+0xfb0eead8>
8110f15c:	003cb306 	br	8110e42c <__reset+0xfb0ee42c>
8110f160:	d9402c17 	ldw	r5,176(sp)
8110f164:	d9801e04 	addi	r6,sp,120
8110f168:	9809883a 	mov	r4,r19
8110f16c:	111ab300 	call	8111ab30 <__ssprint_r>
8110f170:	103cae1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f174:	d8c02017 	ldw	r3,128(sp)
8110f178:	da000404 	addi	r8,sp,16
8110f17c:	003e0d06 	br	8110e9b4 <__reset+0xfb0ee9b4>
8110f180:	d9402c17 	ldw	r5,176(sp)
8110f184:	d9801e04 	addi	r6,sp,120
8110f188:	9809883a 	mov	r4,r19
8110f18c:	111ab300 	call	8111ab30 <__ssprint_r>
8110f190:	103ca61e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f194:	d8c02017 	ldw	r3,128(sp)
8110f198:	da000404 	addi	r8,sp,16
8110f19c:	003dc106 	br	8110e8a4 <__reset+0xfb0ee8a4>
8110f1a0:	d9402c17 	ldw	r5,176(sp)
8110f1a4:	d9801e04 	addi	r6,sp,120
8110f1a8:	9809883a 	mov	r4,r19
8110f1ac:	111ab300 	call	8111ab30 <__ssprint_r>
8110f1b0:	103c9e1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f1b4:	d8c02017 	ldw	r3,128(sp)
8110f1b8:	da000404 	addi	r8,sp,16
8110f1bc:	003dc706 	br	8110e8dc <__reset+0xfb0ee8dc>
8110f1c0:	d8802917 	ldw	r2,164(sp)
8110f1c4:	d8002785 	stb	zero,158(sp)
8110f1c8:	103f0816 	blt	r2,zero,8110edec <__reset+0xfb0eedec>
8110f1cc:	00ffdfc4 	movi	r3,-129
8110f1d0:	a584b03a 	or	r2,r20,r22
8110f1d4:	90e4703a 	and	r18,r18,r3
8110f1d8:	103c8126 	beq	r2,zero,8110e3e0 <__reset+0xfb0ee3e0>
8110f1dc:	0039883a 	mov	fp,zero
8110f1e0:	003e7606 	br	8110ebbc <__reset+0xfb0eebbc>
8110f1e4:	9080040c 	andi	r2,r18,16
8110f1e8:	10013d26 	beq	r2,zero,8110f6e0 <___svfprintf_internal_r+0x1648>
8110f1ec:	d9002d17 	ldw	r4,180(sp)
8110f1f0:	d9402917 	ldw	r5,164(sp)
8110f1f4:	d8002785 	stb	zero,158(sp)
8110f1f8:	20800104 	addi	r2,r4,4
8110f1fc:	25000017 	ldw	r20,0(r4)
8110f200:	002d883a 	mov	r22,zero
8110f204:	28013f16 	blt	r5,zero,8110f704 <___svfprintf_internal_r+0x166c>
8110f208:	00ffdfc4 	movi	r3,-129
8110f20c:	d8802d15 	stw	r2,180(sp)
8110f210:	90e4703a 	and	r18,r18,r3
8110f214:	a03d2b26 	beq	r20,zero,8110e6c4 <__reset+0xfb0ee6c4>
8110f218:	0039883a 	mov	fp,zero
8110f21c:	003d2e06 	br	8110e6d8 <__reset+0xfb0ee6d8>
8110f220:	dc402617 	ldw	r17,152(sp)
8110f224:	0441830e 	bge	zero,r17,8110f834 <___svfprintf_internal_r+0x179c>
8110f228:	dc403217 	ldw	r17,200(sp)
8110f22c:	d8803317 	ldw	r2,204(sp)
8110f230:	1440010e 	bge	r2,r17,8110f238 <___svfprintf_internal_r+0x11a0>
8110f234:	1023883a 	mov	r17,r2
8110f238:	04400a0e 	bge	zero,r17,8110f264 <___svfprintf_internal_r+0x11cc>
8110f23c:	d8801f17 	ldw	r2,124(sp)
8110f240:	1c47883a 	add	r3,r3,r17
8110f244:	44000015 	stw	r16,0(r8)
8110f248:	10800044 	addi	r2,r2,1
8110f24c:	44400115 	stw	r17,4(r8)
8110f250:	d8c02015 	stw	r3,128(sp)
8110f254:	d8801f15 	stw	r2,124(sp)
8110f258:	010001c4 	movi	r4,7
8110f25c:	20827516 	blt	r4,r2,8110fc34 <___svfprintf_internal_r+0x1b9c>
8110f260:	42000204 	addi	r8,r8,8
8110f264:	88027b16 	blt	r17,zero,8110fc54 <___svfprintf_internal_r+0x1bbc>
8110f268:	d9003217 	ldw	r4,200(sp)
8110f26c:	2463c83a 	sub	r17,r4,r17
8110f270:	0440990e 	bge	zero,r17,8110f4d8 <___svfprintf_internal_r+0x1440>
8110f274:	05800404 	movi	r22,16
8110f278:	d8801f17 	ldw	r2,124(sp)
8110f27c:	b441530e 	bge	r22,r17,8110f7cc <___svfprintf_internal_r+0x1734>
8110f280:	012044f4 	movhi	r4,33043
8110f284:	211d6984 	addi	r4,r4,30118
8110f288:	d9002b15 	stw	r4,172(sp)
8110f28c:	070001c4 	movi	fp,7
8110f290:	dd002c17 	ldw	r20,176(sp)
8110f294:	00000306 	br	8110f2a4 <___svfprintf_internal_r+0x120c>
8110f298:	42000204 	addi	r8,r8,8
8110f29c:	8c7ffc04 	addi	r17,r17,-16
8110f2a0:	b4414d0e 	bge	r22,r17,8110f7d8 <___svfprintf_internal_r+0x1740>
8110f2a4:	18c00404 	addi	r3,r3,16
8110f2a8:	10800044 	addi	r2,r2,1
8110f2ac:	45400015 	stw	r21,0(r8)
8110f2b0:	45800115 	stw	r22,4(r8)
8110f2b4:	d8c02015 	stw	r3,128(sp)
8110f2b8:	d8801f15 	stw	r2,124(sp)
8110f2bc:	e0bff60e 	bge	fp,r2,8110f298 <__reset+0xfb0ef298>
8110f2c0:	d9801e04 	addi	r6,sp,120
8110f2c4:	a00b883a 	mov	r5,r20
8110f2c8:	9809883a 	mov	r4,r19
8110f2cc:	111ab300 	call	8111ab30 <__ssprint_r>
8110f2d0:	103c561e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f2d4:	d8c02017 	ldw	r3,128(sp)
8110f2d8:	d8801f17 	ldw	r2,124(sp)
8110f2dc:	da000404 	addi	r8,sp,16
8110f2e0:	003fee06 	br	8110f29c <__reset+0xfb0ef29c>
8110f2e4:	d9402c17 	ldw	r5,176(sp)
8110f2e8:	d9801e04 	addi	r6,sp,120
8110f2ec:	9809883a 	mov	r4,r19
8110f2f0:	111ab300 	call	8111ab30 <__ssprint_r>
8110f2f4:	103c4d1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f2f8:	d8c02017 	ldw	r3,128(sp)
8110f2fc:	df002787 	ldb	fp,158(sp)
8110f300:	da000404 	addi	r8,sp,16
8110f304:	003d5a06 	br	8110e870 <__reset+0xfb0ee870>
8110f308:	9080040c 	andi	r2,r18,16
8110f30c:	10005c26 	beq	r2,zero,8110f480 <___svfprintf_internal_r+0x13e8>
8110f310:	d9402d17 	ldw	r5,180(sp)
8110f314:	d8c02917 	ldw	r3,164(sp)
8110f318:	d8002785 	stb	zero,158(sp)
8110f31c:	28800104 	addi	r2,r5,4
8110f320:	2d000017 	ldw	r20,0(r5)
8110f324:	002d883a 	mov	r22,zero
8110f328:	18005e16 	blt	r3,zero,8110f4a4 <___svfprintf_internal_r+0x140c>
8110f32c:	00ffdfc4 	movi	r3,-129
8110f330:	d8802d15 	stw	r2,180(sp)
8110f334:	90e4703a 	and	r18,r18,r3
8110f338:	0039883a 	mov	fp,zero
8110f33c:	a03dfe26 	beq	r20,zero,8110eb38 <__reset+0xfb0eeb38>
8110f340:	00800244 	movi	r2,9
8110f344:	153cb336 	bltu	r2,r20,8110e614 <__reset+0xfb0ee614>
8110f348:	a5000c04 	addi	r20,r20,48
8110f34c:	dc001dc4 	addi	r16,sp,119
8110f350:	dd001dc5 	stb	r20,119(sp)
8110f354:	d8c02817 	ldw	r3,160(sp)
8110f358:	1c07c83a 	sub	r3,r3,r16
8110f35c:	d8c02e15 	stw	r3,184(sp)
8110f360:	003cf506 	br	8110e738 <__reset+0xfb0ee738>
8110f364:	d8803317 	ldw	r2,204(sp)
8110f368:	143fffc4 	addi	r16,r2,-1
8110f36c:	043f560e 	bge	zero,r16,8110f0c8 <__reset+0xfb0ef0c8>
8110f370:	07000404 	movi	fp,16
8110f374:	e403530e 	bge	fp,r16,811100c4 <___svfprintf_internal_r+0x202c>
8110f378:	016044f4 	movhi	r5,33043
8110f37c:	295d6984 	addi	r5,r5,30118
8110f380:	d9402b15 	stw	r5,172(sp)
8110f384:	01c001c4 	movi	r7,7
8110f388:	dd002c17 	ldw	r20,176(sp)
8110f38c:	00000306 	br	8110f39c <___svfprintf_internal_r+0x1304>
8110f390:	843ffc04 	addi	r16,r16,-16
8110f394:	b5800204 	addi	r22,r22,8
8110f398:	e400130e 	bge	fp,r16,8110f3e8 <___svfprintf_internal_r+0x1350>
8110f39c:	18c00404 	addi	r3,r3,16
8110f3a0:	8c400044 	addi	r17,r17,1
8110f3a4:	b5400015 	stw	r21,0(r22)
8110f3a8:	b7000115 	stw	fp,4(r22)
8110f3ac:	d8c02015 	stw	r3,128(sp)
8110f3b0:	dc401f15 	stw	r17,124(sp)
8110f3b4:	3c7ff60e 	bge	r7,r17,8110f390 <__reset+0xfb0ef390>
8110f3b8:	d9801e04 	addi	r6,sp,120
8110f3bc:	a00b883a 	mov	r5,r20
8110f3c0:	9809883a 	mov	r4,r19
8110f3c4:	d9c03d15 	stw	r7,244(sp)
8110f3c8:	111ab300 	call	8111ab30 <__ssprint_r>
8110f3cc:	d9c03d17 	ldw	r7,244(sp)
8110f3d0:	103c161e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f3d4:	843ffc04 	addi	r16,r16,-16
8110f3d8:	d8c02017 	ldw	r3,128(sp)
8110f3dc:	dc401f17 	ldw	r17,124(sp)
8110f3e0:	dd800404 	addi	r22,sp,16
8110f3e4:	e43fed16 	blt	fp,r16,8110f39c <__reset+0xfb0ef39c>
8110f3e8:	d8802b17 	ldw	r2,172(sp)
8110f3ec:	1c07883a 	add	r3,r3,r16
8110f3f0:	8c400044 	addi	r17,r17,1
8110f3f4:	b0800015 	stw	r2,0(r22)
8110f3f8:	b4000115 	stw	r16,4(r22)
8110f3fc:	d8c02015 	stw	r3,128(sp)
8110f400:	dc401f15 	stw	r17,124(sp)
8110f404:	008001c4 	movi	r2,7
8110f408:	147f2e0e 	bge	r2,r17,8110f0c4 <__reset+0xfb0ef0c4>
8110f40c:	d9402c17 	ldw	r5,176(sp)
8110f410:	d9801e04 	addi	r6,sp,120
8110f414:	9809883a 	mov	r4,r19
8110f418:	111ab300 	call	8111ab30 <__ssprint_r>
8110f41c:	103c031e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f420:	d8c02017 	ldw	r3,128(sp)
8110f424:	dc401f17 	ldw	r17,124(sp)
8110f428:	dd800404 	addi	r22,sp,16
8110f42c:	003f2606 	br	8110f0c8 <__reset+0xfb0ef0c8>
8110f430:	9080040c 	andi	r2,r18,16
8110f434:	1000c326 	beq	r2,zero,8110f744 <___svfprintf_internal_r+0x16ac>
8110f438:	d8802d17 	ldw	r2,180(sp)
8110f43c:	15000017 	ldw	r20,0(r2)
8110f440:	10800104 	addi	r2,r2,4
8110f444:	d8802d15 	stw	r2,180(sp)
8110f448:	a02dd7fa 	srai	r22,r20,31
8110f44c:	b005883a 	mov	r2,r22
8110f450:	103c680e 	bge	r2,zero,8110e5f4 <__reset+0xfb0ee5f4>
8110f454:	0529c83a 	sub	r20,zero,r20
8110f458:	a004c03a 	cmpne	r2,r20,zero
8110f45c:	05adc83a 	sub	r22,zero,r22
8110f460:	b0adc83a 	sub	r22,r22,r2
8110f464:	d8802917 	ldw	r2,164(sp)
8110f468:	07000b44 	movi	fp,45
8110f46c:	df002785 	stb	fp,158(sp)
8110f470:	10022e16 	blt	r2,zero,8110fd2c <___svfprintf_internal_r+0x1c94>
8110f474:	00bfdfc4 	movi	r2,-129
8110f478:	90a4703a 	and	r18,r18,r2
8110f47c:	003c6406 	br	8110e610 <__reset+0xfb0ee610>
8110f480:	9080100c 	andi	r2,r18,64
8110f484:	d8002785 	stb	zero,158(sp)
8110f488:	10012526 	beq	r2,zero,8110f920 <___svfprintf_internal_r+0x1888>
8110f48c:	d9002d17 	ldw	r4,180(sp)
8110f490:	d9402917 	ldw	r5,164(sp)
8110f494:	002d883a 	mov	r22,zero
8110f498:	20800104 	addi	r2,r4,4
8110f49c:	2500000b 	ldhu	r20,0(r4)
8110f4a0:	283fa20e 	bge	r5,zero,8110f32c <__reset+0xfb0ef32c>
8110f4a4:	d8802d15 	stw	r2,180(sp)
8110f4a8:	0039883a 	mov	fp,zero
8110f4ac:	a584b03a 	or	r2,r20,r22
8110f4b0:	103c571e 	bne	r2,zero,8110e610 <__reset+0xfb0ee610>
8110f4b4:	00800044 	movi	r2,1
8110f4b8:	003e5006 	br	8110edfc <__reset+0xfb0eedfc>
8110f4bc:	d9402c17 	ldw	r5,176(sp)
8110f4c0:	d9801e04 	addi	r6,sp,120
8110f4c4:	9809883a 	mov	r4,r19
8110f4c8:	111ab300 	call	8111ab30 <__ssprint_r>
8110f4cc:	103bd71e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f4d0:	d8c02017 	ldw	r3,128(sp)
8110f4d4:	da000404 	addi	r8,sp,16
8110f4d8:	d9003217 	ldw	r4,200(sp)
8110f4dc:	d8802617 	ldw	r2,152(sp)
8110f4e0:	d9403317 	ldw	r5,204(sp)
8110f4e4:	8123883a 	add	r17,r16,r4
8110f4e8:	11400216 	blt	r2,r5,8110f4f4 <___svfprintf_internal_r+0x145c>
8110f4ec:	9100004c 	andi	r4,r18,1
8110f4f0:	20000d26 	beq	r4,zero,8110f528 <___svfprintf_internal_r+0x1490>
8110f4f4:	d9003817 	ldw	r4,224(sp)
8110f4f8:	d9403417 	ldw	r5,208(sp)
8110f4fc:	1907883a 	add	r3,r3,r4
8110f500:	d9001f17 	ldw	r4,124(sp)
8110f504:	41400015 	stw	r5,0(r8)
8110f508:	d9403817 	ldw	r5,224(sp)
8110f50c:	21000044 	addi	r4,r4,1
8110f510:	d8c02015 	stw	r3,128(sp)
8110f514:	41400115 	stw	r5,4(r8)
8110f518:	d9001f15 	stw	r4,124(sp)
8110f51c:	014001c4 	movi	r5,7
8110f520:	2901dc16 	blt	r5,r4,8110fc94 <___svfprintf_internal_r+0x1bfc>
8110f524:	42000204 	addi	r8,r8,8
8110f528:	d9003317 	ldw	r4,204(sp)
8110f52c:	8121883a 	add	r16,r16,r4
8110f530:	2085c83a 	sub	r2,r4,r2
8110f534:	8461c83a 	sub	r16,r16,r17
8110f538:	1400010e 	bge	r2,r16,8110f540 <___svfprintf_internal_r+0x14a8>
8110f53c:	1021883a 	mov	r16,r2
8110f540:	04000a0e 	bge	zero,r16,8110f56c <___svfprintf_internal_r+0x14d4>
8110f544:	d9001f17 	ldw	r4,124(sp)
8110f548:	1c07883a 	add	r3,r3,r16
8110f54c:	44400015 	stw	r17,0(r8)
8110f550:	21000044 	addi	r4,r4,1
8110f554:	44000115 	stw	r16,4(r8)
8110f558:	d8c02015 	stw	r3,128(sp)
8110f55c:	d9001f15 	stw	r4,124(sp)
8110f560:	014001c4 	movi	r5,7
8110f564:	2901e616 	blt	r5,r4,8110fd00 <___svfprintf_internal_r+0x1c68>
8110f568:	42000204 	addi	r8,r8,8
8110f56c:	8001f616 	blt	r16,zero,8110fd48 <___svfprintf_internal_r+0x1cb0>
8110f570:	1421c83a 	sub	r16,r2,r16
8110f574:	043d1c0e 	bge	zero,r16,8110e9e8 <__reset+0xfb0ee9e8>
8110f578:	04400404 	movi	r17,16
8110f57c:	d8801f17 	ldw	r2,124(sp)
8110f580:	8c3edd0e 	bge	r17,r16,8110f0f8 <__reset+0xfb0ef0f8>
8110f584:	016044f4 	movhi	r5,33043
8110f588:	295d6984 	addi	r5,r5,30118
8110f58c:	d9402b15 	stw	r5,172(sp)
8110f590:	058001c4 	movi	r22,7
8110f594:	dd002c17 	ldw	r20,176(sp)
8110f598:	00000306 	br	8110f5a8 <___svfprintf_internal_r+0x1510>
8110f59c:	42000204 	addi	r8,r8,8
8110f5a0:	843ffc04 	addi	r16,r16,-16
8110f5a4:	8c3ed70e 	bge	r17,r16,8110f104 <__reset+0xfb0ef104>
8110f5a8:	18c00404 	addi	r3,r3,16
8110f5ac:	10800044 	addi	r2,r2,1
8110f5b0:	45400015 	stw	r21,0(r8)
8110f5b4:	44400115 	stw	r17,4(r8)
8110f5b8:	d8c02015 	stw	r3,128(sp)
8110f5bc:	d8801f15 	stw	r2,124(sp)
8110f5c0:	b0bff60e 	bge	r22,r2,8110f59c <__reset+0xfb0ef59c>
8110f5c4:	d9801e04 	addi	r6,sp,120
8110f5c8:	a00b883a 	mov	r5,r20
8110f5cc:	9809883a 	mov	r4,r19
8110f5d0:	111ab300 	call	8111ab30 <__ssprint_r>
8110f5d4:	103b951e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f5d8:	d8c02017 	ldw	r3,128(sp)
8110f5dc:	d8801f17 	ldw	r2,124(sp)
8110f5e0:	da000404 	addi	r8,sp,16
8110f5e4:	003fee06 	br	8110f5a0 <__reset+0xfb0ef5a0>
8110f5e8:	9088703a 	and	r4,r18,r2
8110f5ec:	203e8d1e 	bne	r4,zero,8110f024 <__reset+0xfb0ef024>
8110f5f0:	dc401f17 	ldw	r17,124(sp)
8110f5f4:	40800115 	stw	r2,4(r8)
8110f5f8:	44000015 	stw	r16,0(r8)
8110f5fc:	8c400044 	addi	r17,r17,1
8110f600:	d8c02015 	stw	r3,128(sp)
8110f604:	dc401f15 	stw	r17,124(sp)
8110f608:	008001c4 	movi	r2,7
8110f60c:	147f7f16 	blt	r2,r17,8110f40c <__reset+0xfb0ef40c>
8110f610:	45800204 	addi	r22,r8,8
8110f614:	003eac06 	br	8110f0c8 <__reset+0xfb0ef0c8>
8110f618:	d9402c17 	ldw	r5,176(sp)
8110f61c:	d9801e04 	addi	r6,sp,120
8110f620:	9809883a 	mov	r4,r19
8110f624:	111ab300 	call	8111ab30 <__ssprint_r>
8110f628:	103b801e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f62c:	d8c02017 	ldw	r3,128(sp)
8110f630:	dc401f17 	ldw	r17,124(sp)
8110f634:	da000404 	addi	r8,sp,16
8110f638:	003e8406 	br	8110f04c <__reset+0xfb0ef04c>
8110f63c:	d9402c17 	ldw	r5,176(sp)
8110f640:	d9801e04 	addi	r6,sp,120
8110f644:	9809883a 	mov	r4,r19
8110f648:	111ab300 	call	8111ab30 <__ssprint_r>
8110f64c:	103b771e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f650:	d8c02017 	ldw	r3,128(sp)
8110f654:	dc401f17 	ldw	r17,124(sp)
8110f658:	dd800404 	addi	r22,sp,16
8110f65c:	003e8606 	br	8110f078 <__reset+0xfb0ef078>
8110f660:	0029883a 	mov	r20,zero
8110f664:	a5000c04 	addi	r20,r20,48
8110f668:	dc001dc4 	addi	r16,sp,119
8110f66c:	dd001dc5 	stb	r20,119(sp)
8110f670:	003f3806 	br	8110f354 <__reset+0xfb0ef354>
8110f674:	d9402c17 	ldw	r5,176(sp)
8110f678:	d9801e04 	addi	r6,sp,120
8110f67c:	9809883a 	mov	r4,r19
8110f680:	111ab300 	call	8111ab30 <__ssprint_r>
8110f684:	103b691e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f688:	d8c02017 	ldw	r3,128(sp)
8110f68c:	da000404 	addi	r8,sp,16
8110f690:	003c9506 	br	8110e8e8 <__reset+0xfb0ee8e8>
8110f694:	d9003617 	ldw	r4,216(sp)
8110f698:	d9403717 	ldw	r5,220(sp)
8110f69c:	da003e15 	stw	r8,248(sp)
8110f6a0:	11189740 	call	81118974 <__fpclassifyd>
8110f6a4:	da003e17 	ldw	r8,248(sp)
8110f6a8:	1000bd1e 	bne	r2,zero,8110f9a0 <___svfprintf_internal_r+0x1908>
8110f6ac:	008011c4 	movi	r2,71
8110f6b0:	14411e0e 	bge	r2,r17,8110fb2c <___svfprintf_internal_r+0x1a94>
8110f6b4:	042044f4 	movhi	r16,33043
8110f6b8:	841d5c04 	addi	r16,r16,30064
8110f6bc:	00c000c4 	movi	r3,3
8110f6c0:	00bfdfc4 	movi	r2,-129
8110f6c4:	d8c02a15 	stw	r3,168(sp)
8110f6c8:	90a4703a 	and	r18,r18,r2
8110f6cc:	df002783 	ldbu	fp,158(sp)
8110f6d0:	d8c02e15 	stw	r3,184(sp)
8110f6d4:	d8002915 	stw	zero,164(sp)
8110f6d8:	d8003215 	stw	zero,200(sp)
8110f6dc:	003c1c06 	br	8110e750 <__reset+0xfb0ee750>
8110f6e0:	9080100c 	andi	r2,r18,64
8110f6e4:	d8002785 	stb	zero,158(sp)
8110f6e8:	10009426 	beq	r2,zero,8110f93c <___svfprintf_internal_r+0x18a4>
8110f6ec:	d8c02d17 	ldw	r3,180(sp)
8110f6f0:	d9002917 	ldw	r4,164(sp)
8110f6f4:	002d883a 	mov	r22,zero
8110f6f8:	18800104 	addi	r2,r3,4
8110f6fc:	1d00000b 	ldhu	r20,0(r3)
8110f700:	203ec10e 	bge	r4,zero,8110f208 <__reset+0xfb0ef208>
8110f704:	a586b03a 	or	r3,r20,r22
8110f708:	d8802d15 	stw	r2,180(sp)
8110f70c:	183ec21e 	bne	r3,zero,8110f218 <__reset+0xfb0ef218>
8110f710:	0039883a 	mov	fp,zero
8110f714:	0005883a 	mov	r2,zero
8110f718:	003db806 	br	8110edfc <__reset+0xfb0eedfc>
8110f71c:	d8802d17 	ldw	r2,180(sp)
8110f720:	d8c02d17 	ldw	r3,180(sp)
8110f724:	d9002d17 	ldw	r4,180(sp)
8110f728:	10800017 	ldw	r2,0(r2)
8110f72c:	18c00117 	ldw	r3,4(r3)
8110f730:	21000204 	addi	r4,r4,8
8110f734:	d8803615 	stw	r2,216(sp)
8110f738:	d8c03715 	stw	r3,220(sp)
8110f73c:	d9002d15 	stw	r4,180(sp)
8110f740:	003b8206 	br	8110e54c <__reset+0xfb0ee54c>
8110f744:	9080100c 	andi	r2,r18,64
8110f748:	10010726 	beq	r2,zero,8110fb68 <___svfprintf_internal_r+0x1ad0>
8110f74c:	d8c02d17 	ldw	r3,180(sp)
8110f750:	1d00000f 	ldh	r20,0(r3)
8110f754:	18c00104 	addi	r3,r3,4
8110f758:	d8c02d15 	stw	r3,180(sp)
8110f75c:	a02dd7fa 	srai	r22,r20,31
8110f760:	b005883a 	mov	r2,r22
8110f764:	003ba206 	br	8110e5f0 <__reset+0xfb0ee5f0>
8110f768:	9080100c 	andi	r2,r18,64
8110f76c:	10010526 	beq	r2,zero,8110fb84 <___svfprintf_internal_r+0x1aec>
8110f770:	d9002d17 	ldw	r4,180(sp)
8110f774:	002d883a 	mov	r22,zero
8110f778:	2500000b 	ldhu	r20,0(r4)
8110f77c:	21000104 	addi	r4,r4,4
8110f780:	d9002d15 	stw	r4,180(sp)
8110f784:	003cfe06 	br	8110eb80 <__reset+0xfb0eeb80>
8110f788:	bc400007 	ldb	r17,0(r23)
8110f78c:	003a9606 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110f790:	9080040c 	andi	r2,r18,16
8110f794:	10010126 	beq	r2,zero,8110fb9c <___svfprintf_internal_r+0x1b04>
8110f798:	d9402d17 	ldw	r5,180(sp)
8110f79c:	d8c02f17 	ldw	r3,188(sp)
8110f7a0:	28800017 	ldw	r2,0(r5)
8110f7a4:	29400104 	addi	r5,r5,4
8110f7a8:	d9402d15 	stw	r5,180(sp)
8110f7ac:	10c00015 	stw	r3,0(r2)
8110f7b0:	003a6406 	br	8110e144 <__reset+0xfb0ee144>
8110f7b4:	d9002917 	ldw	r4,164(sp)
8110f7b8:	d8002785 	stb	zero,158(sp)
8110f7bc:	203d8d16 	blt	r4,zero,8110edf4 <__reset+0xfb0eedf4>
8110f7c0:	00bfdfc4 	movi	r2,-129
8110f7c4:	90a4703a 	and	r18,r18,r2
8110f7c8:	003b0506 	br	8110e3e0 <__reset+0xfb0ee3e0>
8110f7cc:	016044f4 	movhi	r5,33043
8110f7d0:	295d6984 	addi	r5,r5,30118
8110f7d4:	d9402b15 	stw	r5,172(sp)
8110f7d8:	d9402b17 	ldw	r5,172(sp)
8110f7dc:	1c47883a 	add	r3,r3,r17
8110f7e0:	10800044 	addi	r2,r2,1
8110f7e4:	41400015 	stw	r5,0(r8)
8110f7e8:	44400115 	stw	r17,4(r8)
8110f7ec:	d8c02015 	stw	r3,128(sp)
8110f7f0:	d8801f15 	stw	r2,124(sp)
8110f7f4:	010001c4 	movi	r4,7
8110f7f8:	20bf3016 	blt	r4,r2,8110f4bc <__reset+0xfb0ef4bc>
8110f7fc:	42000204 	addi	r8,r8,8
8110f800:	003f3506 	br	8110f4d8 <__reset+0xfb0ef4d8>
8110f804:	012044f4 	movhi	r4,33043
8110f808:	211d6984 	addi	r4,r4,30118
8110f80c:	d9002b15 	stw	r4,172(sp)
8110f810:	003c5e06 	br	8110e98c <__reset+0xfb0ee98c>
8110f814:	d9402c17 	ldw	r5,176(sp)
8110f818:	d9801e04 	addi	r6,sp,120
8110f81c:	9809883a 	mov	r4,r19
8110f820:	111ab300 	call	8111ab30 <__ssprint_r>
8110f824:	103b011e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f828:	d8c02017 	ldw	r3,128(sp)
8110f82c:	da000404 	addi	r8,sp,16
8110f830:	003d9306 	br	8110ee80 <__reset+0xfb0eee80>
8110f834:	d8801f17 	ldw	r2,124(sp)
8110f838:	016044f4 	movhi	r5,33043
8110f83c:	01000044 	movi	r4,1
8110f840:	18c00044 	addi	r3,r3,1
8110f844:	10800044 	addi	r2,r2,1
8110f848:	295d6904 	addi	r5,r5,30116
8110f84c:	41000115 	stw	r4,4(r8)
8110f850:	41400015 	stw	r5,0(r8)
8110f854:	d8c02015 	stw	r3,128(sp)
8110f858:	d8801f15 	stw	r2,124(sp)
8110f85c:	010001c4 	movi	r4,7
8110f860:	2080b516 	blt	r4,r2,8110fb38 <___svfprintf_internal_r+0x1aa0>
8110f864:	42000204 	addi	r8,r8,8
8110f868:	8800041e 	bne	r17,zero,8110f87c <___svfprintf_internal_r+0x17e4>
8110f86c:	d8803317 	ldw	r2,204(sp)
8110f870:	1000021e 	bne	r2,zero,8110f87c <___svfprintf_internal_r+0x17e4>
8110f874:	9080004c 	andi	r2,r18,1
8110f878:	103c5b26 	beq	r2,zero,8110e9e8 <__reset+0xfb0ee9e8>
8110f87c:	d9003817 	ldw	r4,224(sp)
8110f880:	d8801f17 	ldw	r2,124(sp)
8110f884:	d9403417 	ldw	r5,208(sp)
8110f888:	20c7883a 	add	r3,r4,r3
8110f88c:	10800044 	addi	r2,r2,1
8110f890:	41000115 	stw	r4,4(r8)
8110f894:	41400015 	stw	r5,0(r8)
8110f898:	d8c02015 	stw	r3,128(sp)
8110f89c:	d8801f15 	stw	r2,124(sp)
8110f8a0:	010001c4 	movi	r4,7
8110f8a4:	20818016 	blt	r4,r2,8110fea8 <___svfprintf_internal_r+0x1e10>
8110f8a8:	42000204 	addi	r8,r8,8
8110f8ac:	0463c83a 	sub	r17,zero,r17
8110f8b0:	0440cb0e 	bge	zero,r17,8110fbe0 <___svfprintf_internal_r+0x1b48>
8110f8b4:	05800404 	movi	r22,16
8110f8b8:	b440e80e 	bge	r22,r17,8110fc5c <___svfprintf_internal_r+0x1bc4>
8110f8bc:	016044f4 	movhi	r5,33043
8110f8c0:	295d6984 	addi	r5,r5,30118
8110f8c4:	d9402b15 	stw	r5,172(sp)
8110f8c8:	070001c4 	movi	fp,7
8110f8cc:	dd002c17 	ldw	r20,176(sp)
8110f8d0:	00000306 	br	8110f8e0 <___svfprintf_internal_r+0x1848>
8110f8d4:	42000204 	addi	r8,r8,8
8110f8d8:	8c7ffc04 	addi	r17,r17,-16
8110f8dc:	b440e20e 	bge	r22,r17,8110fc68 <___svfprintf_internal_r+0x1bd0>
8110f8e0:	18c00404 	addi	r3,r3,16
8110f8e4:	10800044 	addi	r2,r2,1
8110f8e8:	45400015 	stw	r21,0(r8)
8110f8ec:	45800115 	stw	r22,4(r8)
8110f8f0:	d8c02015 	stw	r3,128(sp)
8110f8f4:	d8801f15 	stw	r2,124(sp)
8110f8f8:	e0bff60e 	bge	fp,r2,8110f8d4 <__reset+0xfb0ef8d4>
8110f8fc:	d9801e04 	addi	r6,sp,120
8110f900:	a00b883a 	mov	r5,r20
8110f904:	9809883a 	mov	r4,r19
8110f908:	111ab300 	call	8111ab30 <__ssprint_r>
8110f90c:	103ac71e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f910:	d8c02017 	ldw	r3,128(sp)
8110f914:	d8801f17 	ldw	r2,124(sp)
8110f918:	da000404 	addi	r8,sp,16
8110f91c:	003fee06 	br	8110f8d8 <__reset+0xfb0ef8d8>
8110f920:	d8c02d17 	ldw	r3,180(sp)
8110f924:	d9002917 	ldw	r4,164(sp)
8110f928:	002d883a 	mov	r22,zero
8110f92c:	18800104 	addi	r2,r3,4
8110f930:	1d000017 	ldw	r20,0(r3)
8110f934:	203e7d0e 	bge	r4,zero,8110f32c <__reset+0xfb0ef32c>
8110f938:	003eda06 	br	8110f4a4 <__reset+0xfb0ef4a4>
8110f93c:	d9402d17 	ldw	r5,180(sp)
8110f940:	d8c02917 	ldw	r3,164(sp)
8110f944:	002d883a 	mov	r22,zero
8110f948:	28800104 	addi	r2,r5,4
8110f94c:	2d000017 	ldw	r20,0(r5)
8110f950:	183e2d0e 	bge	r3,zero,8110f208 <__reset+0xfb0ef208>
8110f954:	003f6b06 	br	8110f704 <__reset+0xfb0ef704>
8110f958:	d8c02d15 	stw	r3,180(sp)
8110f95c:	0039883a 	mov	fp,zero
8110f960:	003ed206 	br	8110f4ac <__reset+0xfb0ef4ac>
8110f964:	bc400043 	ldbu	r17,1(r23)
8110f968:	94800814 	ori	r18,r18,32
8110f96c:	bdc00044 	addi	r23,r23,1
8110f970:	8c403fcc 	andi	r17,r17,255
8110f974:	8c40201c 	xori	r17,r17,128
8110f978:	8c7fe004 	addi	r17,r17,-128
8110f97c:	003a1a06 	br	8110e1e8 <__reset+0xfb0ee1e8>
8110f980:	d9402c17 	ldw	r5,176(sp)
8110f984:	d9801e04 	addi	r6,sp,120
8110f988:	9809883a 	mov	r4,r19
8110f98c:	111ab300 	call	8111ab30 <__ssprint_r>
8110f990:	103aa61e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110f994:	d8c02017 	ldw	r3,128(sp)
8110f998:	da000404 	addi	r8,sp,16
8110f99c:	003d4a06 	br	8110eec8 <__reset+0xfb0eeec8>
8110f9a0:	d9002917 	ldw	r4,164(sp)
8110f9a4:	05bff7c4 	movi	r22,-33
8110f9a8:	00bfffc4 	movi	r2,-1
8110f9ac:	8dac703a 	and	r22,r17,r22
8110f9b0:	20806a26 	beq	r4,r2,8110fb5c <___svfprintf_internal_r+0x1ac4>
8110f9b4:	008011c4 	movi	r2,71
8110f9b8:	b0813726 	beq	r22,r2,8110fe98 <___svfprintf_internal_r+0x1e00>
8110f9bc:	d9003717 	ldw	r4,220(sp)
8110f9c0:	90c04014 	ori	r3,r18,256
8110f9c4:	d8c02b15 	stw	r3,172(sp)
8110f9c8:	20015d16 	blt	r4,zero,8110ff40 <___svfprintf_internal_r+0x1ea8>
8110f9cc:	dd003717 	ldw	r20,220(sp)
8110f9d0:	d8002a05 	stb	zero,168(sp)
8110f9d4:	00801984 	movi	r2,102
8110f9d8:	88814026 	beq	r17,r2,8110fedc <___svfprintf_internal_r+0x1e44>
8110f9dc:	00801184 	movi	r2,70
8110f9e0:	88817126 	beq	r17,r2,8110ffa8 <___svfprintf_internal_r+0x1f10>
8110f9e4:	00801144 	movi	r2,69
8110f9e8:	b0816226 	beq	r22,r2,8110ff74 <___svfprintf_internal_r+0x1edc>
8110f9ec:	d8c02917 	ldw	r3,164(sp)
8110f9f0:	d8802104 	addi	r2,sp,132
8110f9f4:	d8800315 	stw	r2,12(sp)
8110f9f8:	d9403617 	ldw	r5,216(sp)
8110f9fc:	d8802504 	addi	r2,sp,148
8110fa00:	d8800215 	stw	r2,8(sp)
8110fa04:	d8802604 	addi	r2,sp,152
8110fa08:	d8c00015 	stw	r3,0(sp)
8110fa0c:	d8800115 	stw	r2,4(sp)
8110fa10:	01c00084 	movi	r7,2
8110fa14:	a00d883a 	mov	r6,r20
8110fa18:	9809883a 	mov	r4,r19
8110fa1c:	d8c03d15 	stw	r3,244(sp)
8110fa20:	da003e15 	stw	r8,248(sp)
8110fa24:	11141d40 	call	811141d4 <_dtoa_r>
8110fa28:	1021883a 	mov	r16,r2
8110fa2c:	008019c4 	movi	r2,103
8110fa30:	d8c03d17 	ldw	r3,244(sp)
8110fa34:	da003e17 	ldw	r8,248(sp)
8110fa38:	8880e726 	beq	r17,r2,8110fdd8 <___svfprintf_internal_r+0x1d40>
8110fa3c:	008011c4 	movi	r2,71
8110fa40:	8880d426 	beq	r17,r2,8110fd94 <___svfprintf_internal_r+0x1cfc>
8110fa44:	80f9883a 	add	fp,r16,r3
8110fa48:	d9003617 	ldw	r4,216(sp)
8110fa4c:	000d883a 	mov	r6,zero
8110fa50:	000f883a 	mov	r7,zero
8110fa54:	a00b883a 	mov	r5,r20
8110fa58:	da003e15 	stw	r8,248(sp)
8110fa5c:	1120bd80 	call	81120bd8 <__eqdf2>
8110fa60:	da003e17 	ldw	r8,248(sp)
8110fa64:	1000e426 	beq	r2,zero,8110fdf8 <___svfprintf_internal_r+0x1d60>
8110fa68:	d8802117 	ldw	r2,132(sp)
8110fa6c:	1700062e 	bgeu	r2,fp,8110fa88 <___svfprintf_internal_r+0x19f0>
8110fa70:	01000c04 	movi	r4,48
8110fa74:	10c00044 	addi	r3,r2,1
8110fa78:	d8c02115 	stw	r3,132(sp)
8110fa7c:	11000005 	stb	r4,0(r2)
8110fa80:	d8802117 	ldw	r2,132(sp)
8110fa84:	173ffb36 	bltu	r2,fp,8110fa74 <__reset+0xfb0efa74>
8110fa88:	1405c83a 	sub	r2,r2,r16
8110fa8c:	d8803315 	stw	r2,204(sp)
8110fa90:	008011c4 	movi	r2,71
8110fa94:	b080c526 	beq	r22,r2,8110fdac <___svfprintf_internal_r+0x1d14>
8110fa98:	00801944 	movi	r2,101
8110fa9c:	1441d90e 	bge	r2,r17,81110204 <___svfprintf_internal_r+0x216c>
8110faa0:	d8c02617 	ldw	r3,152(sp)
8110faa4:	00801984 	movi	r2,102
8110faa8:	d8c03215 	stw	r3,200(sp)
8110faac:	88813426 	beq	r17,r2,8110ff80 <___svfprintf_internal_r+0x1ee8>
8110fab0:	d8c03217 	ldw	r3,200(sp)
8110fab4:	d9003317 	ldw	r4,204(sp)
8110fab8:	19012516 	blt	r3,r4,8110ff50 <___svfprintf_internal_r+0x1eb8>
8110fabc:	9480004c 	andi	r18,r18,1
8110fac0:	9001841e 	bne	r18,zero,811100d4 <___svfprintf_internal_r+0x203c>
8110fac4:	1805883a 	mov	r2,r3
8110fac8:	1801cc16 	blt	r3,zero,811101fc <___svfprintf_internal_r+0x2164>
8110facc:	d8c03217 	ldw	r3,200(sp)
8110fad0:	044019c4 	movi	r17,103
8110fad4:	d8c02e15 	stw	r3,184(sp)
8110fad8:	df002a07 	ldb	fp,168(sp)
8110fadc:	e000a61e 	bne	fp,zero,8110fd78 <___svfprintf_internal_r+0x1ce0>
8110fae0:	df002783 	ldbu	fp,158(sp)
8110fae4:	d8802a15 	stw	r2,168(sp)
8110fae8:	dc802b17 	ldw	r18,172(sp)
8110faec:	d8002915 	stw	zero,164(sp)
8110faf0:	003b1706 	br	8110e750 <__reset+0xfb0ee750>
8110faf4:	042044f4 	movhi	r16,33043
8110faf8:	841d5904 	addi	r16,r16,30052
8110fafc:	003aa606 	br	8110e598 <__reset+0xfb0ee598>
8110fb00:	d9003917 	ldw	r4,228(sp)
8110fb04:	04001004 	movi	r16,64
8110fb08:	800b883a 	mov	r5,r16
8110fb0c:	110cc740 	call	8110cc74 <_malloc_r>
8110fb10:	d9002c17 	ldw	r4,176(sp)
8110fb14:	20800015 	stw	r2,0(r4)
8110fb18:	20800415 	stw	r2,16(r4)
8110fb1c:	1001cb26 	beq	r2,zero,8111024c <___svfprintf_internal_r+0x21b4>
8110fb20:	d8802c17 	ldw	r2,176(sp)
8110fb24:	14000515 	stw	r16,20(r2)
8110fb28:	00397606 	br	8110e104 <__reset+0xfb0ee104>
8110fb2c:	042044f4 	movhi	r16,33043
8110fb30:	841d5b04 	addi	r16,r16,30060
8110fb34:	003ee106 	br	8110f6bc <__reset+0xfb0ef6bc>
8110fb38:	d9402c17 	ldw	r5,176(sp)
8110fb3c:	d9801e04 	addi	r6,sp,120
8110fb40:	9809883a 	mov	r4,r19
8110fb44:	111ab300 	call	8111ab30 <__ssprint_r>
8110fb48:	103a381e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110fb4c:	dc402617 	ldw	r17,152(sp)
8110fb50:	d8c02017 	ldw	r3,128(sp)
8110fb54:	da000404 	addi	r8,sp,16
8110fb58:	003f4306 	br	8110f868 <__reset+0xfb0ef868>
8110fb5c:	01400184 	movi	r5,6
8110fb60:	d9402915 	stw	r5,164(sp)
8110fb64:	003f9506 	br	8110f9bc <__reset+0xfb0ef9bc>
8110fb68:	d9002d17 	ldw	r4,180(sp)
8110fb6c:	25000017 	ldw	r20,0(r4)
8110fb70:	21000104 	addi	r4,r4,4
8110fb74:	d9002d15 	stw	r4,180(sp)
8110fb78:	a02dd7fa 	srai	r22,r20,31
8110fb7c:	b005883a 	mov	r2,r22
8110fb80:	003a9b06 	br	8110e5f0 <__reset+0xfb0ee5f0>
8110fb84:	d9402d17 	ldw	r5,180(sp)
8110fb88:	002d883a 	mov	r22,zero
8110fb8c:	2d000017 	ldw	r20,0(r5)
8110fb90:	29400104 	addi	r5,r5,4
8110fb94:	d9402d15 	stw	r5,180(sp)
8110fb98:	003bf906 	br	8110eb80 <__reset+0xfb0eeb80>
8110fb9c:	9480100c 	andi	r18,r18,64
8110fba0:	90006e26 	beq	r18,zero,8110fd5c <___svfprintf_internal_r+0x1cc4>
8110fba4:	d9002d17 	ldw	r4,180(sp)
8110fba8:	d9402f17 	ldw	r5,188(sp)
8110fbac:	20800017 	ldw	r2,0(r4)
8110fbb0:	21000104 	addi	r4,r4,4
8110fbb4:	d9002d15 	stw	r4,180(sp)
8110fbb8:	1140000d 	sth	r5,0(r2)
8110fbbc:	00396106 	br	8110e144 <__reset+0xfb0ee144>
8110fbc0:	d9402c17 	ldw	r5,176(sp)
8110fbc4:	d9801e04 	addi	r6,sp,120
8110fbc8:	9809883a 	mov	r4,r19
8110fbcc:	111ab300 	call	8111ab30 <__ssprint_r>
8110fbd0:	103a161e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110fbd4:	d8c02017 	ldw	r3,128(sp)
8110fbd8:	d8801f17 	ldw	r2,124(sp)
8110fbdc:	da000404 	addi	r8,sp,16
8110fbe0:	d9403317 	ldw	r5,204(sp)
8110fbe4:	10800044 	addi	r2,r2,1
8110fbe8:	44000015 	stw	r16,0(r8)
8110fbec:	28c7883a 	add	r3,r5,r3
8110fbf0:	003b7706 	br	8110e9d0 <__reset+0xfb0ee9d0>
8110fbf4:	8009883a 	mov	r4,r16
8110fbf8:	da003e15 	stw	r8,248(sp)
8110fbfc:	110ddac0 	call	8110ddac <strlen>
8110fc00:	d8802e15 	stw	r2,184(sp)
8110fc04:	da003e17 	ldw	r8,248(sp)
8110fc08:	103c280e 	bge	r2,zero,8110ecac <__reset+0xfb0eecac>
8110fc0c:	0005883a 	mov	r2,zero
8110fc10:	003c2606 	br	8110ecac <__reset+0xfb0eecac>
8110fc14:	00bfffc4 	movi	r2,-1
8110fc18:	003a0906 	br	8110e440 <__reset+0xfb0ee440>
8110fc1c:	012044f4 	movhi	r4,33043
8110fc20:	211d6d84 	addi	r4,r4,30134
8110fc24:	d9003515 	stw	r4,212(sp)
8110fc28:	003b0606 	br	8110e844 <__reset+0xfb0ee844>
8110fc2c:	013fffc4 	movi	r4,-1
8110fc30:	003a2706 	br	8110e4d0 <__reset+0xfb0ee4d0>
8110fc34:	d9402c17 	ldw	r5,176(sp)
8110fc38:	d9801e04 	addi	r6,sp,120
8110fc3c:	9809883a 	mov	r4,r19
8110fc40:	111ab300 	call	8111ab30 <__ssprint_r>
8110fc44:	1039f91e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110fc48:	d8c02017 	ldw	r3,128(sp)
8110fc4c:	da000404 	addi	r8,sp,16
8110fc50:	003d8406 	br	8110f264 <__reset+0xfb0ef264>
8110fc54:	0023883a 	mov	r17,zero
8110fc58:	003d8306 	br	8110f268 <__reset+0xfb0ef268>
8110fc5c:	012044f4 	movhi	r4,33043
8110fc60:	211d6984 	addi	r4,r4,30118
8110fc64:	d9002b15 	stw	r4,172(sp)
8110fc68:	d9002b17 	ldw	r4,172(sp)
8110fc6c:	1c47883a 	add	r3,r3,r17
8110fc70:	10800044 	addi	r2,r2,1
8110fc74:	41000015 	stw	r4,0(r8)
8110fc78:	44400115 	stw	r17,4(r8)
8110fc7c:	d8c02015 	stw	r3,128(sp)
8110fc80:	d8801f15 	stw	r2,124(sp)
8110fc84:	010001c4 	movi	r4,7
8110fc88:	20bfcd16 	blt	r4,r2,8110fbc0 <__reset+0xfb0efbc0>
8110fc8c:	42000204 	addi	r8,r8,8
8110fc90:	003fd306 	br	8110fbe0 <__reset+0xfb0efbe0>
8110fc94:	d9402c17 	ldw	r5,176(sp)
8110fc98:	d9801e04 	addi	r6,sp,120
8110fc9c:	9809883a 	mov	r4,r19
8110fca0:	111ab300 	call	8111ab30 <__ssprint_r>
8110fca4:	1039e11e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110fca8:	d8802617 	ldw	r2,152(sp)
8110fcac:	d8c02017 	ldw	r3,128(sp)
8110fcb0:	da000404 	addi	r8,sp,16
8110fcb4:	003e1c06 	br	8110f528 <__reset+0xfb0ef528>
8110fcb8:	d8802917 	ldw	r2,164(sp)
8110fcbc:	00c00184 	movi	r3,6
8110fcc0:	1880012e 	bgeu	r3,r2,8110fcc8 <___svfprintf_internal_r+0x1c30>
8110fcc4:	1805883a 	mov	r2,r3
8110fcc8:	d8802e15 	stw	r2,184(sp)
8110fccc:	1000f316 	blt	r2,zero,8111009c <___svfprintf_internal_r+0x2004>
8110fcd0:	042044f4 	movhi	r16,33043
8110fcd4:	d8802a15 	stw	r2,168(sp)
8110fcd8:	dd002d15 	stw	r20,180(sp)
8110fcdc:	d8002915 	stw	zero,164(sp)
8110fce0:	d8003215 	stw	zero,200(sp)
8110fce4:	841d6704 	addi	r16,r16,30108
8110fce8:	0039883a 	mov	fp,zero
8110fcec:	003a9f06 	br	8110e76c <__reset+0xfb0ee76c>
8110fcf0:	012044f4 	movhi	r4,33043
8110fcf4:	211d6d84 	addi	r4,r4,30134
8110fcf8:	d9003515 	stw	r4,212(sp)
8110fcfc:	003b5f06 	br	8110ea7c <__reset+0xfb0eea7c>
8110fd00:	d9402c17 	ldw	r5,176(sp)
8110fd04:	d9801e04 	addi	r6,sp,120
8110fd08:	9809883a 	mov	r4,r19
8110fd0c:	111ab300 	call	8111ab30 <__ssprint_r>
8110fd10:	1039c61e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110fd14:	d8802617 	ldw	r2,152(sp)
8110fd18:	d9403317 	ldw	r5,204(sp)
8110fd1c:	d8c02017 	ldw	r3,128(sp)
8110fd20:	da000404 	addi	r8,sp,16
8110fd24:	2885c83a 	sub	r2,r5,r2
8110fd28:	003e1006 	br	8110f56c <__reset+0xfb0ef56c>
8110fd2c:	00800044 	movi	r2,1
8110fd30:	10803fcc 	andi	r2,r2,255
8110fd34:	00c00044 	movi	r3,1
8110fd38:	10fa3526 	beq	r2,r3,8110e610 <__reset+0xfb0ee610>
8110fd3c:	00c00084 	movi	r3,2
8110fd40:	10fb9e26 	beq	r2,r3,8110ebbc <__reset+0xfb0eebbc>
8110fd44:	003a6406 	br	8110e6d8 <__reset+0xfb0ee6d8>
8110fd48:	0021883a 	mov	r16,zero
8110fd4c:	003e0806 	br	8110f570 <__reset+0xfb0ef570>
8110fd50:	07000b44 	movi	fp,45
8110fd54:	df002785 	stb	fp,158(sp)
8110fd58:	003a0b06 	br	8110e588 <__reset+0xfb0ee588>
8110fd5c:	d8c02d17 	ldw	r3,180(sp)
8110fd60:	d9002f17 	ldw	r4,188(sp)
8110fd64:	18800017 	ldw	r2,0(r3)
8110fd68:	18c00104 	addi	r3,r3,4
8110fd6c:	d8c02d15 	stw	r3,180(sp)
8110fd70:	11000015 	stw	r4,0(r2)
8110fd74:	0038f306 	br	8110e144 <__reset+0xfb0ee144>
8110fd78:	00c00b44 	movi	r3,45
8110fd7c:	d8c02785 	stb	r3,158(sp)
8110fd80:	d8802a15 	stw	r2,168(sp)
8110fd84:	dc802b17 	ldw	r18,172(sp)
8110fd88:	d8002915 	stw	zero,164(sp)
8110fd8c:	07000b44 	movi	fp,45
8110fd90:	003a7306 	br	8110e760 <__reset+0xfb0ee760>
8110fd94:	9080004c 	andi	r2,r18,1
8110fd98:	1000941e 	bne	r2,zero,8110ffec <___svfprintf_internal_r+0x1f54>
8110fd9c:	d8802117 	ldw	r2,132(sp)
8110fda0:	1405c83a 	sub	r2,r2,r16
8110fda4:	d8803315 	stw	r2,204(sp)
8110fda8:	b441161e 	bne	r22,r17,81110204 <___svfprintf_internal_r+0x216c>
8110fdac:	dd802617 	ldw	r22,152(sp)
8110fdb0:	00bfff44 	movi	r2,-3
8110fdb4:	b0801a16 	blt	r22,r2,8110fe20 <___svfprintf_internal_r+0x1d88>
8110fdb8:	d9402917 	ldw	r5,164(sp)
8110fdbc:	2d801816 	blt	r5,r22,8110fe20 <___svfprintf_internal_r+0x1d88>
8110fdc0:	dd803215 	stw	r22,200(sp)
8110fdc4:	003f3a06 	br	8110fab0 <__reset+0xfb0efab0>
8110fdc8:	1025883a 	mov	r18,r2
8110fdcc:	0039883a 	mov	fp,zero
8110fdd0:	00800084 	movi	r2,2
8110fdd4:	003fd606 	br	8110fd30 <__reset+0xfb0efd30>
8110fdd8:	9080004c 	andi	r2,r18,1
8110fddc:	103f191e 	bne	r2,zero,8110fa44 <__reset+0xfb0efa44>
8110fde0:	d8802117 	ldw	r2,132(sp)
8110fde4:	003f2806 	br	8110fa88 <__reset+0xfb0efa88>
8110fde8:	012044f4 	movhi	r4,33043
8110fdec:	211d6984 	addi	r4,r4,30118
8110fdf0:	d9002b15 	stw	r4,172(sp)
8110fdf4:	003c7c06 	br	8110efe8 <__reset+0xfb0eefe8>
8110fdf8:	e005883a 	mov	r2,fp
8110fdfc:	003f2206 	br	8110fa88 <__reset+0xfb0efa88>
8110fe00:	d9402917 	ldw	r5,164(sp)
8110fe04:	df002783 	ldbu	fp,158(sp)
8110fe08:	dd002d15 	stw	r20,180(sp)
8110fe0c:	d9402a15 	stw	r5,168(sp)
8110fe10:	d9402e15 	stw	r5,184(sp)
8110fe14:	d8002915 	stw	zero,164(sp)
8110fe18:	d8003215 	stw	zero,200(sp)
8110fe1c:	003a4c06 	br	8110e750 <__reset+0xfb0ee750>
8110fe20:	8c7fff84 	addi	r17,r17,-2
8110fe24:	b5bfffc4 	addi	r22,r22,-1
8110fe28:	dd802615 	stw	r22,152(sp)
8110fe2c:	dc4022c5 	stb	r17,139(sp)
8110fe30:	b000c316 	blt	r22,zero,81110140 <___svfprintf_internal_r+0x20a8>
8110fe34:	00800ac4 	movi	r2,43
8110fe38:	d8802305 	stb	r2,140(sp)
8110fe3c:	00800244 	movi	r2,9
8110fe40:	15806e16 	blt	r2,r22,8110fffc <___svfprintf_internal_r+0x1f64>
8110fe44:	00800c04 	movi	r2,48
8110fe48:	b5800c04 	addi	r22,r22,48
8110fe4c:	d8802345 	stb	r2,141(sp)
8110fe50:	dd802385 	stb	r22,142(sp)
8110fe54:	d88023c4 	addi	r2,sp,143
8110fe58:	df0022c4 	addi	fp,sp,139
8110fe5c:	d8c03317 	ldw	r3,204(sp)
8110fe60:	1739c83a 	sub	fp,r2,fp
8110fe64:	d9003317 	ldw	r4,204(sp)
8110fe68:	e0c7883a 	add	r3,fp,r3
8110fe6c:	df003b15 	stw	fp,236(sp)
8110fe70:	d8c02e15 	stw	r3,184(sp)
8110fe74:	00800044 	movi	r2,1
8110fe78:	1100b70e 	bge	r2,r4,81110158 <___svfprintf_internal_r+0x20c0>
8110fe7c:	d8c02e17 	ldw	r3,184(sp)
8110fe80:	18c00044 	addi	r3,r3,1
8110fe84:	d8c02e15 	stw	r3,184(sp)
8110fe88:	1805883a 	mov	r2,r3
8110fe8c:	1800b016 	blt	r3,zero,81110150 <___svfprintf_internal_r+0x20b8>
8110fe90:	d8003215 	stw	zero,200(sp)
8110fe94:	003f1006 	br	8110fad8 <__reset+0xfb0efad8>
8110fe98:	d8802917 	ldw	r2,164(sp)
8110fe9c:	103ec71e 	bne	r2,zero,8110f9bc <__reset+0xfb0ef9bc>
8110fea0:	dc002915 	stw	r16,164(sp)
8110fea4:	003ec506 	br	8110f9bc <__reset+0xfb0ef9bc>
8110fea8:	d9402c17 	ldw	r5,176(sp)
8110feac:	d9801e04 	addi	r6,sp,120
8110feb0:	9809883a 	mov	r4,r19
8110feb4:	111ab300 	call	8111ab30 <__ssprint_r>
8110feb8:	10395c1e 	bne	r2,zero,8110e42c <__reset+0xfb0ee42c>
8110febc:	dc402617 	ldw	r17,152(sp)
8110fec0:	d8c02017 	ldw	r3,128(sp)
8110fec4:	d8801f17 	ldw	r2,124(sp)
8110fec8:	da000404 	addi	r8,sp,16
8110fecc:	003e7706 	br	8110f8ac <__reset+0xfb0ef8ac>
8110fed0:	582f883a 	mov	r23,r11
8110fed4:	d8002915 	stw	zero,164(sp)
8110fed8:	0038c406 	br	8110e1ec <__reset+0xfb0ee1ec>
8110fedc:	d8c02917 	ldw	r3,164(sp)
8110fee0:	d8802104 	addi	r2,sp,132
8110fee4:	d8800315 	stw	r2,12(sp)
8110fee8:	d9403617 	ldw	r5,216(sp)
8110feec:	d8802504 	addi	r2,sp,148
8110fef0:	d8800215 	stw	r2,8(sp)
8110fef4:	d8802604 	addi	r2,sp,152
8110fef8:	d8c00015 	stw	r3,0(sp)
8110fefc:	9809883a 	mov	r4,r19
8110ff00:	d8800115 	stw	r2,4(sp)
8110ff04:	01c000c4 	movi	r7,3
8110ff08:	a00d883a 	mov	r6,r20
8110ff0c:	da003e15 	stw	r8,248(sp)
8110ff10:	11141d40 	call	811141d4 <_dtoa_r>
8110ff14:	d9002917 	ldw	r4,164(sp)
8110ff18:	da003e17 	ldw	r8,248(sp)
8110ff1c:	1021883a 	mov	r16,r2
8110ff20:	1139883a 	add	fp,r2,r4
8110ff24:	2007883a 	mov	r3,r4
8110ff28:	81000007 	ldb	r4,0(r16)
8110ff2c:	00800c04 	movi	r2,48
8110ff30:	20806f26 	beq	r4,r2,811100f0 <___svfprintf_internal_r+0x2058>
8110ff34:	d8c02617 	ldw	r3,152(sp)
8110ff38:	e0f9883a 	add	fp,fp,r3
8110ff3c:	003ec206 	br	8110fa48 <__reset+0xfb0efa48>
8110ff40:	00c00b44 	movi	r3,45
8110ff44:	2520003c 	xorhi	r20,r4,32768
8110ff48:	d8c02a05 	stb	r3,168(sp)
8110ff4c:	003ea106 	br	8110f9d4 <__reset+0xfb0ef9d4>
8110ff50:	d8c03217 	ldw	r3,200(sp)
8110ff54:	00c0890e 	bge	zero,r3,8111017c <___svfprintf_internal_r+0x20e4>
8110ff58:	00800044 	movi	r2,1
8110ff5c:	d9003317 	ldw	r4,204(sp)
8110ff60:	1105883a 	add	r2,r2,r4
8110ff64:	d8802e15 	stw	r2,184(sp)
8110ff68:	10005f16 	blt	r2,zero,811100e8 <___svfprintf_internal_r+0x2050>
8110ff6c:	044019c4 	movi	r17,103
8110ff70:	003ed906 	br	8110fad8 <__reset+0xfb0efad8>
8110ff74:	d9002917 	ldw	r4,164(sp)
8110ff78:	20c00044 	addi	r3,r4,1
8110ff7c:	003e9c06 	br	8110f9f0 <__reset+0xfb0ef9f0>
8110ff80:	d9002917 	ldw	r4,164(sp)
8110ff84:	00c0680e 	bge	zero,r3,81110128 <___svfprintf_internal_r+0x2090>
8110ff88:	2000461e 	bne	r4,zero,811100a4 <___svfprintf_internal_r+0x200c>
8110ff8c:	9480004c 	andi	r18,r18,1
8110ff90:	9000441e 	bne	r18,zero,811100a4 <___svfprintf_internal_r+0x200c>
8110ff94:	1805883a 	mov	r2,r3
8110ff98:	1800a016 	blt	r3,zero,8111021c <___svfprintf_internal_r+0x2184>
8110ff9c:	d8c03217 	ldw	r3,200(sp)
8110ffa0:	d8c02e15 	stw	r3,184(sp)
8110ffa4:	003ecc06 	br	8110fad8 <__reset+0xfb0efad8>
8110ffa8:	d9402917 	ldw	r5,164(sp)
8110ffac:	d8802104 	addi	r2,sp,132
8110ffb0:	d8800315 	stw	r2,12(sp)
8110ffb4:	d9400015 	stw	r5,0(sp)
8110ffb8:	d8802504 	addi	r2,sp,148
8110ffbc:	d9403617 	ldw	r5,216(sp)
8110ffc0:	d8800215 	stw	r2,8(sp)
8110ffc4:	d8802604 	addi	r2,sp,152
8110ffc8:	d8800115 	stw	r2,4(sp)
8110ffcc:	01c000c4 	movi	r7,3
8110ffd0:	a00d883a 	mov	r6,r20
8110ffd4:	9809883a 	mov	r4,r19
8110ffd8:	da003e15 	stw	r8,248(sp)
8110ffdc:	11141d40 	call	811141d4 <_dtoa_r>
8110ffe0:	d8c02917 	ldw	r3,164(sp)
8110ffe4:	da003e17 	ldw	r8,248(sp)
8110ffe8:	1021883a 	mov	r16,r2
8110ffec:	00801184 	movi	r2,70
8110fff0:	80f9883a 	add	fp,r16,r3
8110fff4:	88bfcc26 	beq	r17,r2,8110ff28 <__reset+0xfb0eff28>
8110fff8:	003e9306 	br	8110fa48 <__reset+0xfb0efa48>
8110fffc:	df0022c4 	addi	fp,sp,139
81110000:	dc002915 	stw	r16,164(sp)
81110004:	9829883a 	mov	r20,r19
81110008:	e021883a 	mov	r16,fp
8111000c:	4027883a 	mov	r19,r8
81110010:	b009883a 	mov	r4,r22
81110014:	01400284 	movi	r5,10
81110018:	111f7180 	call	8111f718 <__modsi3>
8111001c:	10800c04 	addi	r2,r2,48
81110020:	843fffc4 	addi	r16,r16,-1
81110024:	b009883a 	mov	r4,r22
81110028:	01400284 	movi	r5,10
8111002c:	80800005 	stb	r2,0(r16)
81110030:	111f6940 	call	8111f694 <__divsi3>
81110034:	102d883a 	mov	r22,r2
81110038:	00800244 	movi	r2,9
8111003c:	15bff416 	blt	r2,r22,81110010 <__reset+0xfb0f0010>
81110040:	9811883a 	mov	r8,r19
81110044:	b0800c04 	addi	r2,r22,48
81110048:	a027883a 	mov	r19,r20
8111004c:	8029883a 	mov	r20,r16
81110050:	a17fffc4 	addi	r5,r20,-1
81110054:	a0bfffc5 	stb	r2,-1(r20)
81110058:	dc002917 	ldw	r16,164(sp)
8111005c:	2f00752e 	bgeu	r5,fp,81110234 <___svfprintf_internal_r+0x219c>
81110060:	d9c02384 	addi	r7,sp,142
81110064:	3d0fc83a 	sub	r7,r7,r20
81110068:	d9002344 	addi	r4,sp,141
8111006c:	e1cf883a 	add	r7,fp,r7
81110070:	00000106 	br	81110078 <___svfprintf_internal_r+0x1fe0>
81110074:	28800003 	ldbu	r2,0(r5)
81110078:	20800005 	stb	r2,0(r4)
8111007c:	21000044 	addi	r4,r4,1
81110080:	29400044 	addi	r5,r5,1
81110084:	21fffb1e 	bne	r4,r7,81110074 <__reset+0xfb0f0074>
81110088:	d8802304 	addi	r2,sp,140
8111008c:	1505c83a 	sub	r2,r2,r20
81110090:	d8c02344 	addi	r3,sp,141
81110094:	1885883a 	add	r2,r3,r2
81110098:	003f7006 	br	8110fe5c <__reset+0xfb0efe5c>
8111009c:	0005883a 	mov	r2,zero
811100a0:	003f0b06 	br	8110fcd0 <__reset+0xfb0efcd0>
811100a4:	d9002917 	ldw	r4,164(sp)
811100a8:	d8c03217 	ldw	r3,200(sp)
811100ac:	20800044 	addi	r2,r4,1
811100b0:	1885883a 	add	r2,r3,r2
811100b4:	d8802e15 	stw	r2,184(sp)
811100b8:	103e870e 	bge	r2,zero,8110fad8 <__reset+0xfb0efad8>
811100bc:	0005883a 	mov	r2,zero
811100c0:	003e8506 	br	8110fad8 <__reset+0xfb0efad8>
811100c4:	012044f4 	movhi	r4,33043
811100c8:	211d6984 	addi	r4,r4,30118
811100cc:	d9002b15 	stw	r4,172(sp)
811100d0:	003cc506 	br	8110f3e8 <__reset+0xfb0ef3e8>
811100d4:	d8c03217 	ldw	r3,200(sp)
811100d8:	18c00044 	addi	r3,r3,1
811100dc:	d8c02e15 	stw	r3,184(sp)
811100e0:	1805883a 	mov	r2,r3
811100e4:	183fa10e 	bge	r3,zero,8110ff6c <__reset+0xfb0eff6c>
811100e8:	0005883a 	mov	r2,zero
811100ec:	003f9f06 	br	8110ff6c <__reset+0xfb0eff6c>
811100f0:	d9003617 	ldw	r4,216(sp)
811100f4:	000d883a 	mov	r6,zero
811100f8:	000f883a 	mov	r7,zero
811100fc:	a00b883a 	mov	r5,r20
81110100:	d8c03d15 	stw	r3,244(sp)
81110104:	da003e15 	stw	r8,248(sp)
81110108:	1120bd80 	call	81120bd8 <__eqdf2>
8111010c:	d8c03d17 	ldw	r3,244(sp)
81110110:	da003e17 	ldw	r8,248(sp)
81110114:	103f8726 	beq	r2,zero,8110ff34 <__reset+0xfb0eff34>
81110118:	00800044 	movi	r2,1
8111011c:	10c7c83a 	sub	r3,r2,r3
81110120:	d8c02615 	stw	r3,152(sp)
81110124:	003f8406 	br	8110ff38 <__reset+0xfb0eff38>
81110128:	20000e1e 	bne	r4,zero,81110164 <___svfprintf_internal_r+0x20cc>
8111012c:	9480004c 	andi	r18,r18,1
81110130:	90000c1e 	bne	r18,zero,81110164 <___svfprintf_internal_r+0x20cc>
81110134:	00800044 	movi	r2,1
81110138:	d8802e15 	stw	r2,184(sp)
8111013c:	003e6606 	br	8110fad8 <__reset+0xfb0efad8>
81110140:	00800b44 	movi	r2,45
81110144:	05adc83a 	sub	r22,zero,r22
81110148:	d8802305 	stb	r2,140(sp)
8111014c:	003f3b06 	br	8110fe3c <__reset+0xfb0efe3c>
81110150:	0005883a 	mov	r2,zero
81110154:	003f4e06 	br	8110fe90 <__reset+0xfb0efe90>
81110158:	90a4703a 	and	r18,r18,r2
8111015c:	903f4a26 	beq	r18,zero,8110fe88 <__reset+0xfb0efe88>
81110160:	003f4606 	br	8110fe7c <__reset+0xfb0efe7c>
81110164:	d8c02917 	ldw	r3,164(sp)
81110168:	18c00084 	addi	r3,r3,2
8111016c:	d8c02e15 	stw	r3,184(sp)
81110170:	1805883a 	mov	r2,r3
81110174:	183e580e 	bge	r3,zero,8110fad8 <__reset+0xfb0efad8>
81110178:	003fd006 	br	811100bc <__reset+0xfb0f00bc>
8111017c:	00800084 	movi	r2,2
81110180:	10c5c83a 	sub	r2,r2,r3
81110184:	003f7506 	br	8110ff5c <__reset+0xfb0eff5c>
81110188:	d8802d17 	ldw	r2,180(sp)
8111018c:	d9002d17 	ldw	r4,180(sp)
81110190:	bc400043 	ldbu	r17,1(r23)
81110194:	10800017 	ldw	r2,0(r2)
81110198:	582f883a 	mov	r23,r11
8111019c:	d8802915 	stw	r2,164(sp)
811101a0:	20800104 	addi	r2,r4,4
811101a4:	d9002917 	ldw	r4,164(sp)
811101a8:	d8802d15 	stw	r2,180(sp)
811101ac:	203df00e 	bge	r4,zero,8110f970 <__reset+0xfb0ef970>
811101b0:	8c403fcc 	andi	r17,r17,255
811101b4:	00bfffc4 	movi	r2,-1
811101b8:	8c40201c 	xori	r17,r17,128
811101bc:	d8802915 	stw	r2,164(sp)
811101c0:	8c7fe004 	addi	r17,r17,-128
811101c4:	00380806 	br	8110e1e8 <__reset+0xfb0ee1e8>
811101c8:	9080004c 	andi	r2,r18,1
811101cc:	0039883a 	mov	fp,zero
811101d0:	10000726 	beq	r2,zero,811101f0 <___svfprintf_internal_r+0x2158>
811101d4:	d8c02817 	ldw	r3,160(sp)
811101d8:	dc001dc4 	addi	r16,sp,119
811101dc:	00800c04 	movi	r2,48
811101e0:	1c07c83a 	sub	r3,r3,r16
811101e4:	d8801dc5 	stb	r2,119(sp)
811101e8:	d8c02e15 	stw	r3,184(sp)
811101ec:	00395206 	br	8110e738 <__reset+0xfb0ee738>
811101f0:	d8002e15 	stw	zero,184(sp)
811101f4:	dc001e04 	addi	r16,sp,120
811101f8:	00394f06 	br	8110e738 <__reset+0xfb0ee738>
811101fc:	0005883a 	mov	r2,zero
81110200:	003e3206 	br	8110facc <__reset+0xfb0efacc>
81110204:	dd802617 	ldw	r22,152(sp)
81110208:	003f0606 	br	8110fe24 <__reset+0xfb0efe24>
8111020c:	d9c02785 	stb	r7,158(sp)
81110210:	003a5106 	br	8110eb58 <__reset+0xfb0eeb58>
81110214:	d9c02785 	stb	r7,158(sp)
81110218:	003a3706 	br	8110eaf8 <__reset+0xfb0eeaf8>
8111021c:	0005883a 	mov	r2,zero
81110220:	003f5e06 	br	8110ff9c <__reset+0xfb0eff9c>
81110224:	d9c02785 	stb	r7,158(sp)
81110228:	00391706 	br	8110e688 <__reset+0xfb0ee688>
8111022c:	d9c02785 	stb	r7,158(sp)
81110230:	0038e606 	br	8110e5cc <__reset+0xfb0ee5cc>
81110234:	d8802344 	addi	r2,sp,141
81110238:	003f0806 	br	8110fe5c <__reset+0xfb0efe5c>
8111023c:	d9c02785 	stb	r7,158(sp)
81110240:	0038b706 	br	8110e520 <__reset+0xfb0ee520>
81110244:	d9c02785 	stb	r7,158(sp)
81110248:	003adc06 	br	8110edbc <__reset+0xfb0eedbc>
8111024c:	d9403917 	ldw	r5,228(sp)
81110250:	00800304 	movi	r2,12
81110254:	28800015 	stw	r2,0(r5)
81110258:	00bfffc4 	movi	r2,-1
8111025c:	00387806 	br	8110e440 <__reset+0xfb0ee440>
81110260:	d9c02785 	stb	r7,158(sp)
81110264:	003abf06 	br	8110ed64 <__reset+0xfb0eed64>
81110268:	d9c02785 	stb	r7,158(sp)
8111026c:	003a9b06 	br	8110ecdc <__reset+0xfb0eecdc>

81110270 <___vfprintf_internal_r>:
81110270:	deffb804 	addi	sp,sp,-288
81110274:	dfc04715 	stw	ra,284(sp)
81110278:	ddc04515 	stw	r23,276(sp)
8111027c:	dd404315 	stw	r21,268(sp)
81110280:	d9002c15 	stw	r4,176(sp)
81110284:	282f883a 	mov	r23,r5
81110288:	302b883a 	mov	r21,r6
8111028c:	d9c02d15 	stw	r7,180(sp)
81110290:	df004615 	stw	fp,280(sp)
81110294:	dd804415 	stw	r22,272(sp)
81110298:	dd004215 	stw	r20,264(sp)
8111029c:	dcc04115 	stw	r19,260(sp)
811102a0:	dc804015 	stw	r18,256(sp)
811102a4:	dc403f15 	stw	r17,252(sp)
811102a8:	dc003e15 	stw	r16,248(sp)
811102ac:	1116d580 	call	81116d58 <_localeconv_r>
811102b0:	10800017 	ldw	r2,0(r2)
811102b4:	1009883a 	mov	r4,r2
811102b8:	d8803415 	stw	r2,208(sp)
811102bc:	110ddac0 	call	8110ddac <strlen>
811102c0:	d8803715 	stw	r2,220(sp)
811102c4:	d8802c17 	ldw	r2,176(sp)
811102c8:	10000226 	beq	r2,zero,811102d4 <___vfprintf_internal_r+0x64>
811102cc:	10800e17 	ldw	r2,56(r2)
811102d0:	1000f926 	beq	r2,zero,811106b8 <___vfprintf_internal_r+0x448>
811102d4:	b880030b 	ldhu	r2,12(r23)
811102d8:	10c8000c 	andi	r3,r2,8192
811102dc:	1800061e 	bne	r3,zero,811102f8 <___vfprintf_internal_r+0x88>
811102e0:	b9001917 	ldw	r4,100(r23)
811102e4:	00f7ffc4 	movi	r3,-8193
811102e8:	10880014 	ori	r2,r2,8192
811102ec:	20c6703a 	and	r3,r4,r3
811102f0:	b880030d 	sth	r2,12(r23)
811102f4:	b8c01915 	stw	r3,100(r23)
811102f8:	10c0020c 	andi	r3,r2,8
811102fc:	1800c126 	beq	r3,zero,81110604 <___vfprintf_internal_r+0x394>
81110300:	b8c00417 	ldw	r3,16(r23)
81110304:	1800bf26 	beq	r3,zero,81110604 <___vfprintf_internal_r+0x394>
81110308:	1080068c 	andi	r2,r2,26
8111030c:	00c00284 	movi	r3,10
81110310:	10c0c426 	beq	r2,r3,81110624 <___vfprintf_internal_r+0x3b4>
81110314:	d8c00404 	addi	r3,sp,16
81110318:	052044f4 	movhi	r20,33043
8111031c:	d9001e04 	addi	r4,sp,120
81110320:	a51d7184 	addi	r20,r20,30150
81110324:	d8c01e15 	stw	r3,120(sp)
81110328:	d8002015 	stw	zero,128(sp)
8111032c:	d8001f15 	stw	zero,124(sp)
81110330:	d8003315 	stw	zero,204(sp)
81110334:	d8003615 	stw	zero,216(sp)
81110338:	d8003815 	stw	zero,224(sp)
8111033c:	1811883a 	mov	r8,r3
81110340:	d8003915 	stw	zero,228(sp)
81110344:	d8003a15 	stw	zero,232(sp)
81110348:	d8002f15 	stw	zero,188(sp)
8111034c:	d9002815 	stw	r4,160(sp)
81110350:	a8800007 	ldb	r2,0(r21)
81110354:	10027b26 	beq	r2,zero,81110d44 <___vfprintf_internal_r+0xad4>
81110358:	00c00944 	movi	r3,37
8111035c:	a821883a 	mov	r16,r21
81110360:	10c0021e 	bne	r2,r3,8111036c <___vfprintf_internal_r+0xfc>
81110364:	00001406 	br	811103b8 <___vfprintf_internal_r+0x148>
81110368:	10c00326 	beq	r2,r3,81110378 <___vfprintf_internal_r+0x108>
8111036c:	84000044 	addi	r16,r16,1
81110370:	80800007 	ldb	r2,0(r16)
81110374:	103ffc1e 	bne	r2,zero,81110368 <__reset+0xfb0f0368>
81110378:	8563c83a 	sub	r17,r16,r21
8111037c:	88000e26 	beq	r17,zero,811103b8 <___vfprintf_internal_r+0x148>
81110380:	d8c02017 	ldw	r3,128(sp)
81110384:	d8801f17 	ldw	r2,124(sp)
81110388:	45400015 	stw	r21,0(r8)
8111038c:	1c47883a 	add	r3,r3,r17
81110390:	10800044 	addi	r2,r2,1
81110394:	d8c02015 	stw	r3,128(sp)
81110398:	44400115 	stw	r17,4(r8)
8111039c:	d8801f15 	stw	r2,124(sp)
811103a0:	00c001c4 	movi	r3,7
811103a4:	1880a716 	blt	r3,r2,81110644 <___vfprintf_internal_r+0x3d4>
811103a8:	42000204 	addi	r8,r8,8
811103ac:	d9402f17 	ldw	r5,188(sp)
811103b0:	2c4b883a 	add	r5,r5,r17
811103b4:	d9402f15 	stw	r5,188(sp)
811103b8:	80800007 	ldb	r2,0(r16)
811103bc:	1000a826 	beq	r2,zero,81110660 <___vfprintf_internal_r+0x3f0>
811103c0:	84400047 	ldb	r17,1(r16)
811103c4:	00bfffc4 	movi	r2,-1
811103c8:	85400044 	addi	r21,r16,1
811103cc:	d8002785 	stb	zero,158(sp)
811103d0:	0007883a 	mov	r3,zero
811103d4:	000f883a 	mov	r7,zero
811103d8:	d8802915 	stw	r2,164(sp)
811103dc:	d8003115 	stw	zero,196(sp)
811103e0:	0025883a 	mov	r18,zero
811103e4:	01401604 	movi	r5,88
811103e8:	01800244 	movi	r6,9
811103ec:	02800a84 	movi	r10,42
811103f0:	02401b04 	movi	r9,108
811103f4:	ad400044 	addi	r21,r21,1
811103f8:	88bff804 	addi	r2,r17,-32
811103fc:	28830436 	bltu	r5,r2,81111010 <___vfprintf_internal_r+0xda0>
81110400:	100490ba 	slli	r2,r2,2
81110404:	01204474 	movhi	r4,33041
81110408:	21010604 	addi	r4,r4,1048
8111040c:	1105883a 	add	r2,r2,r4
81110410:	10800017 	ldw	r2,0(r2)
81110414:	1000683a 	jmp	r2
81110418:	81110f30 	cmpltui	r4,r16,17468
8111041c:	81111010 	cmplti	r4,r16,17472
81110420:	81111010 	cmplti	r4,r16,17472
81110424:	81110f50 	cmplti	r4,r16,17469
81110428:	81111010 	cmplti	r4,r16,17472
8111042c:	81111010 	cmplti	r4,r16,17472
81110430:	81111010 	cmplti	r4,r16,17472
81110434:	81111010 	cmplti	r4,r16,17472
81110438:	81111010 	cmplti	r4,r16,17472
8111043c:	81111010 	cmplti	r4,r16,17472
81110440:	811106c4 	addi	r4,r16,17435
81110444:	81110e6c 	andhi	r4,r16,17465
81110448:	81111010 	cmplti	r4,r16,17472
8111044c:	8111058c 	andi	r4,r16,17430
81110450:	811106ec 	andhi	r4,r16,17435
81110454:	81111010 	cmplti	r4,r16,17472
81110458:	8111072c 	andhi	r4,r16,17436
8111045c:	81110738 	rdprs	r4,r16,17436
81110460:	81110738 	rdprs	r4,r16,17436
81110464:	81110738 	rdprs	r4,r16,17436
81110468:	81110738 	rdprs	r4,r16,17436
8111046c:	81110738 	rdprs	r4,r16,17436
81110470:	81110738 	rdprs	r4,r16,17436
81110474:	81110738 	rdprs	r4,r16,17436
81110478:	81110738 	rdprs	r4,r16,17436
8111047c:	81110738 	rdprs	r4,r16,17436
81110480:	81111010 	cmplti	r4,r16,17472
81110484:	81111010 	cmplti	r4,r16,17472
81110488:	81111010 	cmplti	r4,r16,17472
8111048c:	81111010 	cmplti	r4,r16,17472
81110490:	81111010 	cmplti	r4,r16,17472
81110494:	81111010 	cmplti	r4,r16,17472
81110498:	81111010 	cmplti	r4,r16,17472
8111049c:	81111010 	cmplti	r4,r16,17472
811104a0:	81111010 	cmplti	r4,r16,17472
811104a4:	81111010 	cmplti	r4,r16,17472
811104a8:	8111076c 	andhi	r4,r16,17437
811104ac:	81110828 	cmpgeui	r4,r16,17440
811104b0:	81111010 	cmplti	r4,r16,17472
811104b4:	81110828 	cmpgeui	r4,r16,17440
811104b8:	81111010 	cmplti	r4,r16,17472
811104bc:	81111010 	cmplti	r4,r16,17472
811104c0:	81111010 	cmplti	r4,r16,17472
811104c4:	81111010 	cmplti	r4,r16,17472
811104c8:	811108c8 	cmpgei	r4,r16,17443
811104cc:	81111010 	cmplti	r4,r16,17472
811104d0:	81111010 	cmplti	r4,r16,17472
811104d4:	811108d4 	ori	r4,r16,17443
811104d8:	81111010 	cmplti	r4,r16,17472
811104dc:	81111010 	cmplti	r4,r16,17472
811104e0:	81111010 	cmplti	r4,r16,17472
811104e4:	81111010 	cmplti	r4,r16,17472
811104e8:	81111010 	cmplti	r4,r16,17472
811104ec:	81110d4c 	andi	r4,r16,17461
811104f0:	81111010 	cmplti	r4,r16,17472
811104f4:	81111010 	cmplti	r4,r16,17472
811104f8:	81110dac 	andhi	r4,r16,17462
811104fc:	81111010 	cmplti	r4,r16,17472
81110500:	81111010 	cmplti	r4,r16,17472
81110504:	81111010 	cmplti	r4,r16,17472
81110508:	81111010 	cmplti	r4,r16,17472
8111050c:	81111010 	cmplti	r4,r16,17472
81110510:	81111010 	cmplti	r4,r16,17472
81110514:	81111010 	cmplti	r4,r16,17472
81110518:	81111010 	cmplti	r4,r16,17472
8111051c:	81111010 	cmplti	r4,r16,17472
81110520:	81111010 	cmplti	r4,r16,17472
81110524:	81110fbc 	xorhi	r4,r16,17470
81110528:	81110f5c 	xori	r4,r16,17469
8111052c:	81110828 	cmpgeui	r4,r16,17440
81110530:	81110828 	cmpgeui	r4,r16,17440
81110534:	81110828 	cmpgeui	r4,r16,17440
81110538:	81110f6c 	andhi	r4,r16,17469
8111053c:	81110f5c 	xori	r4,r16,17469
81110540:	81111010 	cmplti	r4,r16,17472
81110544:	81111010 	cmplti	r4,r16,17472
81110548:	81110f78 	rdprs	r4,r16,17469
8111054c:	81111010 	cmplti	r4,r16,17472
81110550:	81110f88 	cmpgei	r4,r16,17470
81110554:	81110e5c 	xori	r4,r16,17465
81110558:	81110598 	cmpnei	r4,r16,17430
8111055c:	81110e7c 	xorhi	r4,r16,17465
81110560:	81111010 	cmplti	r4,r16,17472
81110564:	81110e88 	cmpgei	r4,r16,17466
81110568:	81111010 	cmplti	r4,r16,17472
8111056c:	81110ee4 	muli	r4,r16,17467
81110570:	81111010 	cmplti	r4,r16,17472
81110574:	81111010 	cmplti	r4,r16,17472
81110578:	81110ef4 	orhi	r4,r16,17467
8111057c:	d9003117 	ldw	r4,196(sp)
81110580:	d8802d15 	stw	r2,180(sp)
81110584:	0109c83a 	sub	r4,zero,r4
81110588:	d9003115 	stw	r4,196(sp)
8111058c:	94800114 	ori	r18,r18,4
81110590:	ac400007 	ldb	r17,0(r21)
81110594:	003f9706 	br	811103f4 <__reset+0xfb0f03f4>
81110598:	00800c04 	movi	r2,48
8111059c:	d9002d17 	ldw	r4,180(sp)
811105a0:	d9402917 	ldw	r5,164(sp)
811105a4:	d8802705 	stb	r2,156(sp)
811105a8:	00801e04 	movi	r2,120
811105ac:	d8802745 	stb	r2,157(sp)
811105b0:	d8002785 	stb	zero,158(sp)
811105b4:	20c00104 	addi	r3,r4,4
811105b8:	24c00017 	ldw	r19,0(r4)
811105bc:	002d883a 	mov	r22,zero
811105c0:	90800094 	ori	r2,r18,2
811105c4:	28029a16 	blt	r5,zero,81111030 <___vfprintf_internal_r+0xdc0>
811105c8:	00bfdfc4 	movi	r2,-129
811105cc:	90a4703a 	and	r18,r18,r2
811105d0:	d8c02d15 	stw	r3,180(sp)
811105d4:	94800094 	ori	r18,r18,2
811105d8:	9802871e 	bne	r19,zero,81110ff8 <___vfprintf_internal_r+0xd88>
811105dc:	00a044f4 	movhi	r2,33043
811105e0:	109d6204 	addi	r2,r2,30088
811105e4:	d8803915 	stw	r2,228(sp)
811105e8:	04401e04 	movi	r17,120
811105ec:	d8802917 	ldw	r2,164(sp)
811105f0:	0039883a 	mov	fp,zero
811105f4:	1001e926 	beq	r2,zero,81110d9c <___vfprintf_internal_r+0xb2c>
811105f8:	0027883a 	mov	r19,zero
811105fc:	002d883a 	mov	r22,zero
81110600:	00020506 	br	81110e18 <___vfprintf_internal_r+0xba8>
81110604:	d9002c17 	ldw	r4,176(sp)
81110608:	b80b883a 	mov	r5,r23
8111060c:	1113e2c0 	call	81113e2c <__swsetup_r>
81110610:	1005ac1e 	bne	r2,zero,81111cc4 <___vfprintf_internal_r+0x1a54>
81110614:	b880030b 	ldhu	r2,12(r23)
81110618:	00c00284 	movi	r3,10
8111061c:	1080068c 	andi	r2,r2,26
81110620:	10ff3c1e 	bne	r2,r3,81110314 <__reset+0xfb0f0314>
81110624:	b880038f 	ldh	r2,14(r23)
81110628:	103f3a16 	blt	r2,zero,81110314 <__reset+0xfb0f0314>
8111062c:	d9c02d17 	ldw	r7,180(sp)
81110630:	d9002c17 	ldw	r4,176(sp)
81110634:	a80d883a 	mov	r6,r21
81110638:	b80b883a 	mov	r5,r23
8111063c:	11124840 	call	81112484 <__sbprintf>
81110640:	00001106 	br	81110688 <___vfprintf_internal_r+0x418>
81110644:	d9002c17 	ldw	r4,176(sp)
81110648:	d9801e04 	addi	r6,sp,120
8111064c:	b80b883a 	mov	r5,r23
81110650:	111c2b80 	call	8111c2b8 <__sprint_r>
81110654:	1000081e 	bne	r2,zero,81110678 <___vfprintf_internal_r+0x408>
81110658:	da000404 	addi	r8,sp,16
8111065c:	003f5306 	br	811103ac <__reset+0xfb0f03ac>
81110660:	d8802017 	ldw	r2,128(sp)
81110664:	10000426 	beq	r2,zero,81110678 <___vfprintf_internal_r+0x408>
81110668:	d9002c17 	ldw	r4,176(sp)
8111066c:	d9801e04 	addi	r6,sp,120
81110670:	b80b883a 	mov	r5,r23
81110674:	111c2b80 	call	8111c2b8 <__sprint_r>
81110678:	b880030b 	ldhu	r2,12(r23)
8111067c:	1080100c 	andi	r2,r2,64
81110680:	1005901e 	bne	r2,zero,81111cc4 <___vfprintf_internal_r+0x1a54>
81110684:	d8802f17 	ldw	r2,188(sp)
81110688:	dfc04717 	ldw	ra,284(sp)
8111068c:	df004617 	ldw	fp,280(sp)
81110690:	ddc04517 	ldw	r23,276(sp)
81110694:	dd804417 	ldw	r22,272(sp)
81110698:	dd404317 	ldw	r21,268(sp)
8111069c:	dd004217 	ldw	r20,264(sp)
811106a0:	dcc04117 	ldw	r19,260(sp)
811106a4:	dc804017 	ldw	r18,256(sp)
811106a8:	dc403f17 	ldw	r17,252(sp)
811106ac:	dc003e17 	ldw	r16,248(sp)
811106b0:	dec04804 	addi	sp,sp,288
811106b4:	f800283a 	ret
811106b8:	d9002c17 	ldw	r4,176(sp)
811106bc:	1115e540 	call	81115e54 <__sinit>
811106c0:	003f0406 	br	811102d4 <__reset+0xfb0f02d4>
811106c4:	d8802d17 	ldw	r2,180(sp)
811106c8:	d9002d17 	ldw	r4,180(sp)
811106cc:	10800017 	ldw	r2,0(r2)
811106d0:	d8803115 	stw	r2,196(sp)
811106d4:	20800104 	addi	r2,r4,4
811106d8:	d9003117 	ldw	r4,196(sp)
811106dc:	203fa716 	blt	r4,zero,8111057c <__reset+0xfb0f057c>
811106e0:	d8802d15 	stw	r2,180(sp)
811106e4:	ac400007 	ldb	r17,0(r21)
811106e8:	003f4206 	br	811103f4 <__reset+0xfb0f03f4>
811106ec:	ac400007 	ldb	r17,0(r21)
811106f0:	aac00044 	addi	r11,r21,1
811106f4:	8a872826 	beq	r17,r10,81112398 <___vfprintf_internal_r+0x2128>
811106f8:	88bff404 	addi	r2,r17,-48
811106fc:	0009883a 	mov	r4,zero
81110700:	30867d36 	bltu	r6,r2,811120f8 <___vfprintf_internal_r+0x1e88>
81110704:	5c400007 	ldb	r17,0(r11)
81110708:	210002a4 	muli	r4,r4,10
8111070c:	5d400044 	addi	r21,r11,1
81110710:	a817883a 	mov	r11,r21
81110714:	2089883a 	add	r4,r4,r2
81110718:	88bff404 	addi	r2,r17,-48
8111071c:	30bff92e 	bgeu	r6,r2,81110704 <__reset+0xfb0f0704>
81110720:	2005c916 	blt	r4,zero,81111e48 <___vfprintf_internal_r+0x1bd8>
81110724:	d9002915 	stw	r4,164(sp)
81110728:	003f3306 	br	811103f8 <__reset+0xfb0f03f8>
8111072c:	94802014 	ori	r18,r18,128
81110730:	ac400007 	ldb	r17,0(r21)
81110734:	003f2f06 	br	811103f4 <__reset+0xfb0f03f4>
81110738:	a809883a 	mov	r4,r21
8111073c:	d8003115 	stw	zero,196(sp)
81110740:	88bff404 	addi	r2,r17,-48
81110744:	0017883a 	mov	r11,zero
81110748:	24400007 	ldb	r17,0(r4)
8111074c:	5ac002a4 	muli	r11,r11,10
81110750:	ad400044 	addi	r21,r21,1
81110754:	a809883a 	mov	r4,r21
81110758:	12d7883a 	add	r11,r2,r11
8111075c:	88bff404 	addi	r2,r17,-48
81110760:	30bff92e 	bgeu	r6,r2,81110748 <__reset+0xfb0f0748>
81110764:	dac03115 	stw	r11,196(sp)
81110768:	003f2306 	br	811103f8 <__reset+0xfb0f03f8>
8111076c:	18c03fcc 	andi	r3,r3,255
81110770:	18072b1e 	bne	r3,zero,81112420 <___vfprintf_internal_r+0x21b0>
81110774:	94800414 	ori	r18,r18,16
81110778:	9080080c 	andi	r2,r18,32
8111077c:	10037b26 	beq	r2,zero,8111156c <___vfprintf_internal_r+0x12fc>
81110780:	d9402d17 	ldw	r5,180(sp)
81110784:	28800117 	ldw	r2,4(r5)
81110788:	2cc00017 	ldw	r19,0(r5)
8111078c:	29400204 	addi	r5,r5,8
81110790:	d9402d15 	stw	r5,180(sp)
81110794:	102d883a 	mov	r22,r2
81110798:	10044b16 	blt	r2,zero,811118c8 <___vfprintf_internal_r+0x1658>
8111079c:	d9402917 	ldw	r5,164(sp)
811107a0:	df002783 	ldbu	fp,158(sp)
811107a4:	2803bc16 	blt	r5,zero,81111698 <___vfprintf_internal_r+0x1428>
811107a8:	00ffdfc4 	movi	r3,-129
811107ac:	9d84b03a 	or	r2,r19,r22
811107b0:	90e4703a 	and	r18,r18,r3
811107b4:	10017726 	beq	r2,zero,81110d94 <___vfprintf_internal_r+0xb24>
811107b8:	b0038326 	beq	r22,zero,811115c8 <___vfprintf_internal_r+0x1358>
811107bc:	dc402a15 	stw	r17,168(sp)
811107c0:	dc001e04 	addi	r16,sp,120
811107c4:	b023883a 	mov	r17,r22
811107c8:	402d883a 	mov	r22,r8
811107cc:	9809883a 	mov	r4,r19
811107d0:	880b883a 	mov	r5,r17
811107d4:	01800284 	movi	r6,10
811107d8:	000f883a 	mov	r7,zero
811107dc:	111f15c0 	call	8111f15c <__umoddi3>
811107e0:	10800c04 	addi	r2,r2,48
811107e4:	843fffc4 	addi	r16,r16,-1
811107e8:	9809883a 	mov	r4,r19
811107ec:	880b883a 	mov	r5,r17
811107f0:	80800005 	stb	r2,0(r16)
811107f4:	01800284 	movi	r6,10
811107f8:	000f883a 	mov	r7,zero
811107fc:	111ebe40 	call	8111ebe4 <__udivdi3>
81110800:	1027883a 	mov	r19,r2
81110804:	10c4b03a 	or	r2,r2,r3
81110808:	1823883a 	mov	r17,r3
8111080c:	103fef1e 	bne	r2,zero,811107cc <__reset+0xfb0f07cc>
81110810:	d8c02817 	ldw	r3,160(sp)
81110814:	dc402a17 	ldw	r17,168(sp)
81110818:	b011883a 	mov	r8,r22
8111081c:	1c07c83a 	sub	r3,r3,r16
81110820:	d8c02e15 	stw	r3,184(sp)
81110824:	00005906 	br	8111098c <___vfprintf_internal_r+0x71c>
81110828:	18c03fcc 	andi	r3,r3,255
8111082c:	1806fa1e 	bne	r3,zero,81112418 <___vfprintf_internal_r+0x21a8>
81110830:	9080020c 	andi	r2,r18,8
81110834:	10048a26 	beq	r2,zero,81111a60 <___vfprintf_internal_r+0x17f0>
81110838:	d8c02d17 	ldw	r3,180(sp)
8111083c:	d9002d17 	ldw	r4,180(sp)
81110840:	d9402d17 	ldw	r5,180(sp)
81110844:	18c00017 	ldw	r3,0(r3)
81110848:	21000117 	ldw	r4,4(r4)
8111084c:	29400204 	addi	r5,r5,8
81110850:	d8c03615 	stw	r3,216(sp)
81110854:	d9003815 	stw	r4,224(sp)
81110858:	d9402d15 	stw	r5,180(sp)
8111085c:	d9003617 	ldw	r4,216(sp)
81110860:	d9403817 	ldw	r5,224(sp)
81110864:	da003d15 	stw	r8,244(sp)
81110868:	04000044 	movi	r16,1
8111086c:	11189740 	call	81118974 <__fpclassifyd>
81110870:	da003d17 	ldw	r8,244(sp)
81110874:	14041f1e 	bne	r2,r16,811118f4 <___vfprintf_internal_r+0x1684>
81110878:	d9003617 	ldw	r4,216(sp)
8111087c:	d9403817 	ldw	r5,224(sp)
81110880:	000d883a 	mov	r6,zero
81110884:	000f883a 	mov	r7,zero
81110888:	1120d3c0 	call	81120d3c <__ledf2>
8111088c:	da003d17 	ldw	r8,244(sp)
81110890:	1005be16 	blt	r2,zero,81111f8c <___vfprintf_internal_r+0x1d1c>
81110894:	df002783 	ldbu	fp,158(sp)
81110898:	008011c4 	movi	r2,71
8111089c:	1445330e 	bge	r2,r17,81111d6c <___vfprintf_internal_r+0x1afc>
811108a0:	042044f4 	movhi	r16,33043
811108a4:	841d5a04 	addi	r16,r16,30056
811108a8:	00c000c4 	movi	r3,3
811108ac:	00bfdfc4 	movi	r2,-129
811108b0:	d8c02a15 	stw	r3,168(sp)
811108b4:	90a4703a 	and	r18,r18,r2
811108b8:	d8c02e15 	stw	r3,184(sp)
811108bc:	d8002915 	stw	zero,164(sp)
811108c0:	d8003215 	stw	zero,200(sp)
811108c4:	00003706 	br	811109a4 <___vfprintf_internal_r+0x734>
811108c8:	94800214 	ori	r18,r18,8
811108cc:	ac400007 	ldb	r17,0(r21)
811108d0:	003ec806 	br	811103f4 <__reset+0xfb0f03f4>
811108d4:	18c03fcc 	andi	r3,r3,255
811108d8:	1806db1e 	bne	r3,zero,81112448 <___vfprintf_internal_r+0x21d8>
811108dc:	94800414 	ori	r18,r18,16
811108e0:	9080080c 	andi	r2,r18,32
811108e4:	1002d826 	beq	r2,zero,81111448 <___vfprintf_internal_r+0x11d8>
811108e8:	d9402d17 	ldw	r5,180(sp)
811108ec:	d8c02917 	ldw	r3,164(sp)
811108f0:	d8002785 	stb	zero,158(sp)
811108f4:	28800204 	addi	r2,r5,8
811108f8:	2cc00017 	ldw	r19,0(r5)
811108fc:	2d800117 	ldw	r22,4(r5)
81110900:	18048f16 	blt	r3,zero,81111b40 <___vfprintf_internal_r+0x18d0>
81110904:	013fdfc4 	movi	r4,-129
81110908:	9d86b03a 	or	r3,r19,r22
8111090c:	d8802d15 	stw	r2,180(sp)
81110910:	9124703a 	and	r18,r18,r4
81110914:	1802d91e 	bne	r3,zero,8111147c <___vfprintf_internal_r+0x120c>
81110918:	d8c02917 	ldw	r3,164(sp)
8111091c:	0039883a 	mov	fp,zero
81110920:	1805c326 	beq	r3,zero,81112030 <___vfprintf_internal_r+0x1dc0>
81110924:	0027883a 	mov	r19,zero
81110928:	002d883a 	mov	r22,zero
8111092c:	dc001e04 	addi	r16,sp,120
81110930:	9806d0fa 	srli	r3,r19,3
81110934:	b008977a 	slli	r4,r22,29
81110938:	b02cd0fa 	srli	r22,r22,3
8111093c:	9cc001cc 	andi	r19,r19,7
81110940:	98800c04 	addi	r2,r19,48
81110944:	843fffc4 	addi	r16,r16,-1
81110948:	20e6b03a 	or	r19,r4,r3
8111094c:	80800005 	stb	r2,0(r16)
81110950:	9d86b03a 	or	r3,r19,r22
81110954:	183ff61e 	bne	r3,zero,81110930 <__reset+0xfb0f0930>
81110958:	90c0004c 	andi	r3,r18,1
8111095c:	18013b26 	beq	r3,zero,81110e4c <___vfprintf_internal_r+0xbdc>
81110960:	10803fcc 	andi	r2,r2,255
81110964:	1080201c 	xori	r2,r2,128
81110968:	10bfe004 	addi	r2,r2,-128
8111096c:	00c00c04 	movi	r3,48
81110970:	10c13626 	beq	r2,r3,81110e4c <___vfprintf_internal_r+0xbdc>
81110974:	80ffffc5 	stb	r3,-1(r16)
81110978:	d8c02817 	ldw	r3,160(sp)
8111097c:	80bfffc4 	addi	r2,r16,-1
81110980:	1021883a 	mov	r16,r2
81110984:	1887c83a 	sub	r3,r3,r2
81110988:	d8c02e15 	stw	r3,184(sp)
8111098c:	d8802e17 	ldw	r2,184(sp)
81110990:	d9002917 	ldw	r4,164(sp)
81110994:	1100010e 	bge	r2,r4,8111099c <___vfprintf_internal_r+0x72c>
81110998:	2005883a 	mov	r2,r4
8111099c:	d8802a15 	stw	r2,168(sp)
811109a0:	d8003215 	stw	zero,200(sp)
811109a4:	e7003fcc 	andi	fp,fp,255
811109a8:	e700201c 	xori	fp,fp,128
811109ac:	e73fe004 	addi	fp,fp,-128
811109b0:	e0000326 	beq	fp,zero,811109c0 <___vfprintf_internal_r+0x750>
811109b4:	d8c02a17 	ldw	r3,168(sp)
811109b8:	18c00044 	addi	r3,r3,1
811109bc:	d8c02a15 	stw	r3,168(sp)
811109c0:	90c0008c 	andi	r3,r18,2
811109c4:	d8c02b15 	stw	r3,172(sp)
811109c8:	18000326 	beq	r3,zero,811109d8 <___vfprintf_internal_r+0x768>
811109cc:	d8c02a17 	ldw	r3,168(sp)
811109d0:	18c00084 	addi	r3,r3,2
811109d4:	d8c02a15 	stw	r3,168(sp)
811109d8:	90c0210c 	andi	r3,r18,132
811109dc:	d8c03015 	stw	r3,192(sp)
811109e0:	1801a31e 	bne	r3,zero,81111070 <___vfprintf_internal_r+0xe00>
811109e4:	d9003117 	ldw	r4,196(sp)
811109e8:	d8c02a17 	ldw	r3,168(sp)
811109ec:	20e7c83a 	sub	r19,r4,r3
811109f0:	04c19f0e 	bge	zero,r19,81111070 <___vfprintf_internal_r+0xe00>
811109f4:	02400404 	movi	r9,16
811109f8:	d8c02017 	ldw	r3,128(sp)
811109fc:	d8801f17 	ldw	r2,124(sp)
81110a00:	4cc50d0e 	bge	r9,r19,81111e38 <___vfprintf_internal_r+0x1bc8>
81110a04:	016044f4 	movhi	r5,33043
81110a08:	295d7584 	addi	r5,r5,30166
81110a0c:	dc403b15 	stw	r17,236(sp)
81110a10:	d9403515 	stw	r5,212(sp)
81110a14:	9823883a 	mov	r17,r19
81110a18:	482d883a 	mov	r22,r9
81110a1c:	9027883a 	mov	r19,r18
81110a20:	070001c4 	movi	fp,7
81110a24:	8025883a 	mov	r18,r16
81110a28:	dc002c17 	ldw	r16,176(sp)
81110a2c:	00000306 	br	81110a3c <___vfprintf_internal_r+0x7cc>
81110a30:	8c7ffc04 	addi	r17,r17,-16
81110a34:	42000204 	addi	r8,r8,8
81110a38:	b440130e 	bge	r22,r17,81110a88 <___vfprintf_internal_r+0x818>
81110a3c:	012044f4 	movhi	r4,33043
81110a40:	18c00404 	addi	r3,r3,16
81110a44:	10800044 	addi	r2,r2,1
81110a48:	211d7584 	addi	r4,r4,30166
81110a4c:	41000015 	stw	r4,0(r8)
81110a50:	45800115 	stw	r22,4(r8)
81110a54:	d8c02015 	stw	r3,128(sp)
81110a58:	d8801f15 	stw	r2,124(sp)
81110a5c:	e0bff40e 	bge	fp,r2,81110a30 <__reset+0xfb0f0a30>
81110a60:	d9801e04 	addi	r6,sp,120
81110a64:	b80b883a 	mov	r5,r23
81110a68:	8009883a 	mov	r4,r16
81110a6c:	111c2b80 	call	8111c2b8 <__sprint_r>
81110a70:	103f011e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81110a74:	8c7ffc04 	addi	r17,r17,-16
81110a78:	d8c02017 	ldw	r3,128(sp)
81110a7c:	d8801f17 	ldw	r2,124(sp)
81110a80:	da000404 	addi	r8,sp,16
81110a84:	b47fed16 	blt	r22,r17,81110a3c <__reset+0xfb0f0a3c>
81110a88:	9021883a 	mov	r16,r18
81110a8c:	9825883a 	mov	r18,r19
81110a90:	8827883a 	mov	r19,r17
81110a94:	dc403b17 	ldw	r17,236(sp)
81110a98:	d9403517 	ldw	r5,212(sp)
81110a9c:	98c7883a 	add	r3,r19,r3
81110aa0:	10800044 	addi	r2,r2,1
81110aa4:	41400015 	stw	r5,0(r8)
81110aa8:	44c00115 	stw	r19,4(r8)
81110aac:	d8c02015 	stw	r3,128(sp)
81110ab0:	d8801f15 	stw	r2,124(sp)
81110ab4:	010001c4 	movi	r4,7
81110ab8:	2082a316 	blt	r4,r2,81111548 <___vfprintf_internal_r+0x12d8>
81110abc:	df002787 	ldb	fp,158(sp)
81110ac0:	42000204 	addi	r8,r8,8
81110ac4:	e0000c26 	beq	fp,zero,81110af8 <___vfprintf_internal_r+0x888>
81110ac8:	d8801f17 	ldw	r2,124(sp)
81110acc:	d9002784 	addi	r4,sp,158
81110ad0:	18c00044 	addi	r3,r3,1
81110ad4:	10800044 	addi	r2,r2,1
81110ad8:	41000015 	stw	r4,0(r8)
81110adc:	01000044 	movi	r4,1
81110ae0:	41000115 	stw	r4,4(r8)
81110ae4:	d8c02015 	stw	r3,128(sp)
81110ae8:	d8801f15 	stw	r2,124(sp)
81110aec:	010001c4 	movi	r4,7
81110af0:	20823c16 	blt	r4,r2,811113e4 <___vfprintf_internal_r+0x1174>
81110af4:	42000204 	addi	r8,r8,8
81110af8:	d8802b17 	ldw	r2,172(sp)
81110afc:	10000c26 	beq	r2,zero,81110b30 <___vfprintf_internal_r+0x8c0>
81110b00:	d8801f17 	ldw	r2,124(sp)
81110b04:	d9002704 	addi	r4,sp,156
81110b08:	18c00084 	addi	r3,r3,2
81110b0c:	10800044 	addi	r2,r2,1
81110b10:	41000015 	stw	r4,0(r8)
81110b14:	01000084 	movi	r4,2
81110b18:	41000115 	stw	r4,4(r8)
81110b1c:	d8c02015 	stw	r3,128(sp)
81110b20:	d8801f15 	stw	r2,124(sp)
81110b24:	010001c4 	movi	r4,7
81110b28:	20823616 	blt	r4,r2,81111404 <___vfprintf_internal_r+0x1194>
81110b2c:	42000204 	addi	r8,r8,8
81110b30:	d9003017 	ldw	r4,192(sp)
81110b34:	00802004 	movi	r2,128
81110b38:	20819926 	beq	r4,r2,811111a0 <___vfprintf_internal_r+0xf30>
81110b3c:	d9402917 	ldw	r5,164(sp)
81110b40:	d8802e17 	ldw	r2,184(sp)
81110b44:	28adc83a 	sub	r22,r5,r2
81110b48:	0580310e 	bge	zero,r22,81110c10 <___vfprintf_internal_r+0x9a0>
81110b4c:	07000404 	movi	fp,16
81110b50:	d8801f17 	ldw	r2,124(sp)
81110b54:	e584140e 	bge	fp,r22,81111ba8 <___vfprintf_internal_r+0x1938>
81110b58:	016044f4 	movhi	r5,33043
81110b5c:	295d7184 	addi	r5,r5,30150
81110b60:	dc402915 	stw	r17,164(sp)
81110b64:	d9402b15 	stw	r5,172(sp)
81110b68:	b023883a 	mov	r17,r22
81110b6c:	04c001c4 	movi	r19,7
81110b70:	a82d883a 	mov	r22,r21
81110b74:	902b883a 	mov	r21,r18
81110b78:	8025883a 	mov	r18,r16
81110b7c:	dc002c17 	ldw	r16,176(sp)
81110b80:	00000306 	br	81110b90 <___vfprintf_internal_r+0x920>
81110b84:	8c7ffc04 	addi	r17,r17,-16
81110b88:	42000204 	addi	r8,r8,8
81110b8c:	e440110e 	bge	fp,r17,81110bd4 <___vfprintf_internal_r+0x964>
81110b90:	18c00404 	addi	r3,r3,16
81110b94:	10800044 	addi	r2,r2,1
81110b98:	45000015 	stw	r20,0(r8)
81110b9c:	47000115 	stw	fp,4(r8)
81110ba0:	d8c02015 	stw	r3,128(sp)
81110ba4:	d8801f15 	stw	r2,124(sp)
81110ba8:	98bff60e 	bge	r19,r2,81110b84 <__reset+0xfb0f0b84>
81110bac:	d9801e04 	addi	r6,sp,120
81110bb0:	b80b883a 	mov	r5,r23
81110bb4:	8009883a 	mov	r4,r16
81110bb8:	111c2b80 	call	8111c2b8 <__sprint_r>
81110bbc:	103eae1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81110bc0:	8c7ffc04 	addi	r17,r17,-16
81110bc4:	d8c02017 	ldw	r3,128(sp)
81110bc8:	d8801f17 	ldw	r2,124(sp)
81110bcc:	da000404 	addi	r8,sp,16
81110bd0:	e47fef16 	blt	fp,r17,81110b90 <__reset+0xfb0f0b90>
81110bd4:	9021883a 	mov	r16,r18
81110bd8:	a825883a 	mov	r18,r21
81110bdc:	b02b883a 	mov	r21,r22
81110be0:	882d883a 	mov	r22,r17
81110be4:	dc402917 	ldw	r17,164(sp)
81110be8:	d9002b17 	ldw	r4,172(sp)
81110bec:	1d87883a 	add	r3,r3,r22
81110bf0:	10800044 	addi	r2,r2,1
81110bf4:	41000015 	stw	r4,0(r8)
81110bf8:	45800115 	stw	r22,4(r8)
81110bfc:	d8c02015 	stw	r3,128(sp)
81110c00:	d8801f15 	stw	r2,124(sp)
81110c04:	010001c4 	movi	r4,7
81110c08:	2081ee16 	blt	r4,r2,811113c4 <___vfprintf_internal_r+0x1154>
81110c0c:	42000204 	addi	r8,r8,8
81110c10:	9080400c 	andi	r2,r18,256
81110c14:	1001181e 	bne	r2,zero,81111078 <___vfprintf_internal_r+0xe08>
81110c18:	d9402e17 	ldw	r5,184(sp)
81110c1c:	d8801f17 	ldw	r2,124(sp)
81110c20:	44000015 	stw	r16,0(r8)
81110c24:	1947883a 	add	r3,r3,r5
81110c28:	10800044 	addi	r2,r2,1
81110c2c:	41400115 	stw	r5,4(r8)
81110c30:	d8c02015 	stw	r3,128(sp)
81110c34:	d8801f15 	stw	r2,124(sp)
81110c38:	010001c4 	movi	r4,7
81110c3c:	2081d316 	blt	r4,r2,8111138c <___vfprintf_internal_r+0x111c>
81110c40:	42000204 	addi	r8,r8,8
81110c44:	9480010c 	andi	r18,r18,4
81110c48:	90003226 	beq	r18,zero,81110d14 <___vfprintf_internal_r+0xaa4>
81110c4c:	d9403117 	ldw	r5,196(sp)
81110c50:	d8802a17 	ldw	r2,168(sp)
81110c54:	28a1c83a 	sub	r16,r5,r2
81110c58:	04002e0e 	bge	zero,r16,81110d14 <___vfprintf_internal_r+0xaa4>
81110c5c:	04400404 	movi	r17,16
81110c60:	d8801f17 	ldw	r2,124(sp)
81110c64:	8c04a20e 	bge	r17,r16,81111ef0 <___vfprintf_internal_r+0x1c80>
81110c68:	016044f4 	movhi	r5,33043
81110c6c:	295d7584 	addi	r5,r5,30166
81110c70:	d9403515 	stw	r5,212(sp)
81110c74:	048001c4 	movi	r18,7
81110c78:	dcc02c17 	ldw	r19,176(sp)
81110c7c:	00000306 	br	81110c8c <___vfprintf_internal_r+0xa1c>
81110c80:	843ffc04 	addi	r16,r16,-16
81110c84:	42000204 	addi	r8,r8,8
81110c88:	8c00130e 	bge	r17,r16,81110cd8 <___vfprintf_internal_r+0xa68>
81110c8c:	012044f4 	movhi	r4,33043
81110c90:	18c00404 	addi	r3,r3,16
81110c94:	10800044 	addi	r2,r2,1
81110c98:	211d7584 	addi	r4,r4,30166
81110c9c:	41000015 	stw	r4,0(r8)
81110ca0:	44400115 	stw	r17,4(r8)
81110ca4:	d8c02015 	stw	r3,128(sp)
81110ca8:	d8801f15 	stw	r2,124(sp)
81110cac:	90bff40e 	bge	r18,r2,81110c80 <__reset+0xfb0f0c80>
81110cb0:	d9801e04 	addi	r6,sp,120
81110cb4:	b80b883a 	mov	r5,r23
81110cb8:	9809883a 	mov	r4,r19
81110cbc:	111c2b80 	call	8111c2b8 <__sprint_r>
81110cc0:	103e6d1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81110cc4:	843ffc04 	addi	r16,r16,-16
81110cc8:	d8c02017 	ldw	r3,128(sp)
81110ccc:	d8801f17 	ldw	r2,124(sp)
81110cd0:	da000404 	addi	r8,sp,16
81110cd4:	8c3fed16 	blt	r17,r16,81110c8c <__reset+0xfb0f0c8c>
81110cd8:	d9403517 	ldw	r5,212(sp)
81110cdc:	1c07883a 	add	r3,r3,r16
81110ce0:	10800044 	addi	r2,r2,1
81110ce4:	41400015 	stw	r5,0(r8)
81110ce8:	44000115 	stw	r16,4(r8)
81110cec:	d8c02015 	stw	r3,128(sp)
81110cf0:	d8801f15 	stw	r2,124(sp)
81110cf4:	010001c4 	movi	r4,7
81110cf8:	2080060e 	bge	r4,r2,81110d14 <___vfprintf_internal_r+0xaa4>
81110cfc:	d9002c17 	ldw	r4,176(sp)
81110d00:	d9801e04 	addi	r6,sp,120
81110d04:	b80b883a 	mov	r5,r23
81110d08:	111c2b80 	call	8111c2b8 <__sprint_r>
81110d0c:	103e5a1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81110d10:	d8c02017 	ldw	r3,128(sp)
81110d14:	d8803117 	ldw	r2,196(sp)
81110d18:	d9002a17 	ldw	r4,168(sp)
81110d1c:	1100010e 	bge	r2,r4,81110d24 <___vfprintf_internal_r+0xab4>
81110d20:	2005883a 	mov	r2,r4
81110d24:	d9402f17 	ldw	r5,188(sp)
81110d28:	288b883a 	add	r5,r5,r2
81110d2c:	d9402f15 	stw	r5,188(sp)
81110d30:	18019e1e 	bne	r3,zero,811113ac <___vfprintf_internal_r+0x113c>
81110d34:	a8800007 	ldb	r2,0(r21)
81110d38:	d8001f15 	stw	zero,124(sp)
81110d3c:	da000404 	addi	r8,sp,16
81110d40:	103d851e 	bne	r2,zero,81110358 <__reset+0xfb0f0358>
81110d44:	a821883a 	mov	r16,r21
81110d48:	003d9b06 	br	811103b8 <__reset+0xfb0f03b8>
81110d4c:	18c03fcc 	andi	r3,r3,255
81110d50:	1805c11e 	bne	r3,zero,81112458 <___vfprintf_internal_r+0x21e8>
81110d54:	94800414 	ori	r18,r18,16
81110d58:	9080080c 	andi	r2,r18,32
81110d5c:	10020c26 	beq	r2,zero,81111590 <___vfprintf_internal_r+0x1320>
81110d60:	d8802d17 	ldw	r2,180(sp)
81110d64:	d9002917 	ldw	r4,164(sp)
81110d68:	d8002785 	stb	zero,158(sp)
81110d6c:	10c00204 	addi	r3,r2,8
81110d70:	14c00017 	ldw	r19,0(r2)
81110d74:	15800117 	ldw	r22,4(r2)
81110d78:	20040f16 	blt	r4,zero,81111db8 <___vfprintf_internal_r+0x1b48>
81110d7c:	013fdfc4 	movi	r4,-129
81110d80:	9d84b03a 	or	r2,r19,r22
81110d84:	d8c02d15 	stw	r3,180(sp)
81110d88:	9124703a 	and	r18,r18,r4
81110d8c:	0039883a 	mov	fp,zero
81110d90:	103e891e 	bne	r2,zero,811107b8 <__reset+0xfb0f07b8>
81110d94:	d9002917 	ldw	r4,164(sp)
81110d98:	2002c11e 	bne	r4,zero,811118a0 <___vfprintf_internal_r+0x1630>
81110d9c:	d8002915 	stw	zero,164(sp)
81110da0:	d8002e15 	stw	zero,184(sp)
81110da4:	dc001e04 	addi	r16,sp,120
81110da8:	003ef806 	br	8111098c <__reset+0xfb0f098c>
81110dac:	18c03fcc 	andi	r3,r3,255
81110db0:	18059d1e 	bne	r3,zero,81112428 <___vfprintf_internal_r+0x21b8>
81110db4:	016044f4 	movhi	r5,33043
81110db8:	295d5d04 	addi	r5,r5,30068
81110dbc:	d9403915 	stw	r5,228(sp)
81110dc0:	9080080c 	andi	r2,r18,32
81110dc4:	10005226 	beq	r2,zero,81110f10 <___vfprintf_internal_r+0xca0>
81110dc8:	d8802d17 	ldw	r2,180(sp)
81110dcc:	14c00017 	ldw	r19,0(r2)
81110dd0:	15800117 	ldw	r22,4(r2)
81110dd4:	10800204 	addi	r2,r2,8
81110dd8:	d8802d15 	stw	r2,180(sp)
81110ddc:	9080004c 	andi	r2,r18,1
81110de0:	10019026 	beq	r2,zero,81111424 <___vfprintf_internal_r+0x11b4>
81110de4:	9d84b03a 	or	r2,r19,r22
81110de8:	10036926 	beq	r2,zero,81111b90 <___vfprintf_internal_r+0x1920>
81110dec:	d8c02917 	ldw	r3,164(sp)
81110df0:	00800c04 	movi	r2,48
81110df4:	d8802705 	stb	r2,156(sp)
81110df8:	dc402745 	stb	r17,157(sp)
81110dfc:	d8002785 	stb	zero,158(sp)
81110e00:	90800094 	ori	r2,r18,2
81110e04:	18045d16 	blt	r3,zero,81111f7c <___vfprintf_internal_r+0x1d0c>
81110e08:	00bfdfc4 	movi	r2,-129
81110e0c:	90a4703a 	and	r18,r18,r2
81110e10:	94800094 	ori	r18,r18,2
81110e14:	0039883a 	mov	fp,zero
81110e18:	d9003917 	ldw	r4,228(sp)
81110e1c:	dc001e04 	addi	r16,sp,120
81110e20:	988003cc 	andi	r2,r19,15
81110e24:	b006973a 	slli	r3,r22,28
81110e28:	2085883a 	add	r2,r4,r2
81110e2c:	9826d13a 	srli	r19,r19,4
81110e30:	10800003 	ldbu	r2,0(r2)
81110e34:	b02cd13a 	srli	r22,r22,4
81110e38:	843fffc4 	addi	r16,r16,-1
81110e3c:	1ce6b03a 	or	r19,r3,r19
81110e40:	80800005 	stb	r2,0(r16)
81110e44:	9d84b03a 	or	r2,r19,r22
81110e48:	103ff51e 	bne	r2,zero,81110e20 <__reset+0xfb0f0e20>
81110e4c:	d8c02817 	ldw	r3,160(sp)
81110e50:	1c07c83a 	sub	r3,r3,r16
81110e54:	d8c02e15 	stw	r3,184(sp)
81110e58:	003ecc06 	br	8111098c <__reset+0xfb0f098c>
81110e5c:	18c03fcc 	andi	r3,r3,255
81110e60:	183e9f26 	beq	r3,zero,811108e0 <__reset+0xfb0f08e0>
81110e64:	d9c02785 	stb	r7,158(sp)
81110e68:	003e9d06 	br	811108e0 <__reset+0xfb0f08e0>
81110e6c:	00c00044 	movi	r3,1
81110e70:	01c00ac4 	movi	r7,43
81110e74:	ac400007 	ldb	r17,0(r21)
81110e78:	003d5e06 	br	811103f4 <__reset+0xfb0f03f4>
81110e7c:	94800814 	ori	r18,r18,32
81110e80:	ac400007 	ldb	r17,0(r21)
81110e84:	003d5b06 	br	811103f4 <__reset+0xfb0f03f4>
81110e88:	d8c02d17 	ldw	r3,180(sp)
81110e8c:	d8002785 	stb	zero,158(sp)
81110e90:	1c000017 	ldw	r16,0(r3)
81110e94:	1cc00104 	addi	r19,r3,4
81110e98:	80041926 	beq	r16,zero,81111f00 <___vfprintf_internal_r+0x1c90>
81110e9c:	d9002917 	ldw	r4,164(sp)
81110ea0:	2003d016 	blt	r4,zero,81111de4 <___vfprintf_internal_r+0x1b74>
81110ea4:	200d883a 	mov	r6,r4
81110ea8:	000b883a 	mov	r5,zero
81110eac:	8009883a 	mov	r4,r16
81110eb0:	da003d15 	stw	r8,244(sp)
81110eb4:	111700c0 	call	8111700c <memchr>
81110eb8:	da003d17 	ldw	r8,244(sp)
81110ebc:	10045426 	beq	r2,zero,81112010 <___vfprintf_internal_r+0x1da0>
81110ec0:	1405c83a 	sub	r2,r2,r16
81110ec4:	d8802e15 	stw	r2,184(sp)
81110ec8:	1003cc16 	blt	r2,zero,81111dfc <___vfprintf_internal_r+0x1b8c>
81110ecc:	df002783 	ldbu	fp,158(sp)
81110ed0:	d8802a15 	stw	r2,168(sp)
81110ed4:	dcc02d15 	stw	r19,180(sp)
81110ed8:	d8002915 	stw	zero,164(sp)
81110edc:	d8003215 	stw	zero,200(sp)
81110ee0:	003eb006 	br	811109a4 <__reset+0xfb0f09a4>
81110ee4:	18c03fcc 	andi	r3,r3,255
81110ee8:	183f9b26 	beq	r3,zero,81110d58 <__reset+0xfb0f0d58>
81110eec:	d9c02785 	stb	r7,158(sp)
81110ef0:	003f9906 	br	81110d58 <__reset+0xfb0f0d58>
81110ef4:	18c03fcc 	andi	r3,r3,255
81110ef8:	1805551e 	bne	r3,zero,81112450 <___vfprintf_internal_r+0x21e0>
81110efc:	016044f4 	movhi	r5,33043
81110f00:	295d6204 	addi	r5,r5,30088
81110f04:	d9403915 	stw	r5,228(sp)
81110f08:	9080080c 	andi	r2,r18,32
81110f0c:	103fae1e 	bne	r2,zero,81110dc8 <__reset+0xfb0f0dc8>
81110f10:	9080040c 	andi	r2,r18,16
81110f14:	1002de26 	beq	r2,zero,81111a90 <___vfprintf_internal_r+0x1820>
81110f18:	d8c02d17 	ldw	r3,180(sp)
81110f1c:	002d883a 	mov	r22,zero
81110f20:	1cc00017 	ldw	r19,0(r3)
81110f24:	18c00104 	addi	r3,r3,4
81110f28:	d8c02d15 	stw	r3,180(sp)
81110f2c:	003fab06 	br	81110ddc <__reset+0xfb0f0ddc>
81110f30:	38803fcc 	andi	r2,r7,255
81110f34:	1080201c 	xori	r2,r2,128
81110f38:	10bfe004 	addi	r2,r2,-128
81110f3c:	1002d21e 	bne	r2,zero,81111a88 <___vfprintf_internal_r+0x1818>
81110f40:	00c00044 	movi	r3,1
81110f44:	01c00804 	movi	r7,32
81110f48:	ac400007 	ldb	r17,0(r21)
81110f4c:	003d2906 	br	811103f4 <__reset+0xfb0f03f4>
81110f50:	94800054 	ori	r18,r18,1
81110f54:	ac400007 	ldb	r17,0(r21)
81110f58:	003d2606 	br	811103f4 <__reset+0xfb0f03f4>
81110f5c:	18c03fcc 	andi	r3,r3,255
81110f60:	183e0526 	beq	r3,zero,81110778 <__reset+0xfb0f0778>
81110f64:	d9c02785 	stb	r7,158(sp)
81110f68:	003e0306 	br	81110778 <__reset+0xfb0f0778>
81110f6c:	94801014 	ori	r18,r18,64
81110f70:	ac400007 	ldb	r17,0(r21)
81110f74:	003d1f06 	br	811103f4 <__reset+0xfb0f03f4>
81110f78:	ac400007 	ldb	r17,0(r21)
81110f7c:	8a438726 	beq	r17,r9,81111d9c <___vfprintf_internal_r+0x1b2c>
81110f80:	94800414 	ori	r18,r18,16
81110f84:	003d1b06 	br	811103f4 <__reset+0xfb0f03f4>
81110f88:	18c03fcc 	andi	r3,r3,255
81110f8c:	1805341e 	bne	r3,zero,81112460 <___vfprintf_internal_r+0x21f0>
81110f90:	9080080c 	andi	r2,r18,32
81110f94:	1002cd26 	beq	r2,zero,81111acc <___vfprintf_internal_r+0x185c>
81110f98:	d9402d17 	ldw	r5,180(sp)
81110f9c:	d9002f17 	ldw	r4,188(sp)
81110fa0:	28800017 	ldw	r2,0(r5)
81110fa4:	2007d7fa 	srai	r3,r4,31
81110fa8:	29400104 	addi	r5,r5,4
81110fac:	d9402d15 	stw	r5,180(sp)
81110fb0:	11000015 	stw	r4,0(r2)
81110fb4:	10c00115 	stw	r3,4(r2)
81110fb8:	003ce506 	br	81110350 <__reset+0xfb0f0350>
81110fbc:	d8c02d17 	ldw	r3,180(sp)
81110fc0:	d9002d17 	ldw	r4,180(sp)
81110fc4:	d8002785 	stb	zero,158(sp)
81110fc8:	18800017 	ldw	r2,0(r3)
81110fcc:	21000104 	addi	r4,r4,4
81110fd0:	00c00044 	movi	r3,1
81110fd4:	d8c02a15 	stw	r3,168(sp)
81110fd8:	d8801405 	stb	r2,80(sp)
81110fdc:	d9002d15 	stw	r4,180(sp)
81110fe0:	d8c02e15 	stw	r3,184(sp)
81110fe4:	d8002915 	stw	zero,164(sp)
81110fe8:	d8003215 	stw	zero,200(sp)
81110fec:	dc001404 	addi	r16,sp,80
81110ff0:	0039883a 	mov	fp,zero
81110ff4:	003e7206 	br	811109c0 <__reset+0xfb0f09c0>
81110ff8:	012044f4 	movhi	r4,33043
81110ffc:	211d6204 	addi	r4,r4,30088
81111000:	0039883a 	mov	fp,zero
81111004:	d9003915 	stw	r4,228(sp)
81111008:	04401e04 	movi	r17,120
8111100c:	003f8206 	br	81110e18 <__reset+0xfb0f0e18>
81111010:	18c03fcc 	andi	r3,r3,255
81111014:	1805061e 	bne	r3,zero,81112430 <___vfprintf_internal_r+0x21c0>
81111018:	883d9126 	beq	r17,zero,81110660 <__reset+0xfb0f0660>
8111101c:	00c00044 	movi	r3,1
81111020:	d8c02a15 	stw	r3,168(sp)
81111024:	dc401405 	stb	r17,80(sp)
81111028:	d8002785 	stb	zero,158(sp)
8111102c:	003fec06 	br	81110fe0 <__reset+0xfb0f0fe0>
81111030:	016044f4 	movhi	r5,33043
81111034:	295d6204 	addi	r5,r5,30088
81111038:	d9403915 	stw	r5,228(sp)
8111103c:	d8c02d15 	stw	r3,180(sp)
81111040:	1025883a 	mov	r18,r2
81111044:	04401e04 	movi	r17,120
81111048:	9d84b03a 	or	r2,r19,r22
8111104c:	1000fc1e 	bne	r2,zero,81111440 <___vfprintf_internal_r+0x11d0>
81111050:	0039883a 	mov	fp,zero
81111054:	00800084 	movi	r2,2
81111058:	10803fcc 	andi	r2,r2,255
8111105c:	00c00044 	movi	r3,1
81111060:	10c20f26 	beq	r2,r3,811118a0 <___vfprintf_internal_r+0x1630>
81111064:	00c00084 	movi	r3,2
81111068:	10fd6326 	beq	r2,r3,811105f8 <__reset+0xfb0f05f8>
8111106c:	003e2d06 	br	81110924 <__reset+0xfb0f0924>
81111070:	d8c02017 	ldw	r3,128(sp)
81111074:	003e9306 	br	81110ac4 <__reset+0xfb0f0ac4>
81111078:	00801944 	movi	r2,101
8111107c:	14407e0e 	bge	r2,r17,81111278 <___vfprintf_internal_r+0x1008>
81111080:	d9003617 	ldw	r4,216(sp)
81111084:	d9403817 	ldw	r5,224(sp)
81111088:	000d883a 	mov	r6,zero
8111108c:	000f883a 	mov	r7,zero
81111090:	d8c03c15 	stw	r3,240(sp)
81111094:	da003d15 	stw	r8,244(sp)
81111098:	1120bd80 	call	81120bd8 <__eqdf2>
8111109c:	d8c03c17 	ldw	r3,240(sp)
811110a0:	da003d17 	ldw	r8,244(sp)
811110a4:	1000f71e 	bne	r2,zero,81111484 <___vfprintf_internal_r+0x1214>
811110a8:	d8801f17 	ldw	r2,124(sp)
811110ac:	012044f4 	movhi	r4,33043
811110b0:	211d6904 	addi	r4,r4,30116
811110b4:	18c00044 	addi	r3,r3,1
811110b8:	10800044 	addi	r2,r2,1
811110bc:	41000015 	stw	r4,0(r8)
811110c0:	01000044 	movi	r4,1
811110c4:	41000115 	stw	r4,4(r8)
811110c8:	d8c02015 	stw	r3,128(sp)
811110cc:	d8801f15 	stw	r2,124(sp)
811110d0:	010001c4 	movi	r4,7
811110d4:	2082b816 	blt	r4,r2,81111bb8 <___vfprintf_internal_r+0x1948>
811110d8:	42000204 	addi	r8,r8,8
811110dc:	d8802617 	ldw	r2,152(sp)
811110e0:	d9403317 	ldw	r5,204(sp)
811110e4:	11400216 	blt	r2,r5,811110f0 <___vfprintf_internal_r+0xe80>
811110e8:	9080004c 	andi	r2,r18,1
811110ec:	103ed526 	beq	r2,zero,81110c44 <__reset+0xfb0f0c44>
811110f0:	d8803717 	ldw	r2,220(sp)
811110f4:	d9003417 	ldw	r4,208(sp)
811110f8:	d9403717 	ldw	r5,220(sp)
811110fc:	1887883a 	add	r3,r3,r2
81111100:	d8801f17 	ldw	r2,124(sp)
81111104:	41000015 	stw	r4,0(r8)
81111108:	41400115 	stw	r5,4(r8)
8111110c:	10800044 	addi	r2,r2,1
81111110:	d8c02015 	stw	r3,128(sp)
81111114:	d8801f15 	stw	r2,124(sp)
81111118:	010001c4 	movi	r4,7
8111111c:	20832916 	blt	r4,r2,81111dc4 <___vfprintf_internal_r+0x1b54>
81111120:	42000204 	addi	r8,r8,8
81111124:	d8803317 	ldw	r2,204(sp)
81111128:	143fffc4 	addi	r16,r2,-1
8111112c:	043ec50e 	bge	zero,r16,81110c44 <__reset+0xfb0f0c44>
81111130:	04400404 	movi	r17,16
81111134:	d8801f17 	ldw	r2,124(sp)
81111138:	8c00880e 	bge	r17,r16,8111135c <___vfprintf_internal_r+0x10ec>
8111113c:	016044f4 	movhi	r5,33043
81111140:	295d7184 	addi	r5,r5,30150
81111144:	d9402b15 	stw	r5,172(sp)
81111148:	058001c4 	movi	r22,7
8111114c:	dcc02c17 	ldw	r19,176(sp)
81111150:	00000306 	br	81111160 <___vfprintf_internal_r+0xef0>
81111154:	42000204 	addi	r8,r8,8
81111158:	843ffc04 	addi	r16,r16,-16
8111115c:	8c00820e 	bge	r17,r16,81111368 <___vfprintf_internal_r+0x10f8>
81111160:	18c00404 	addi	r3,r3,16
81111164:	10800044 	addi	r2,r2,1
81111168:	45000015 	stw	r20,0(r8)
8111116c:	44400115 	stw	r17,4(r8)
81111170:	d8c02015 	stw	r3,128(sp)
81111174:	d8801f15 	stw	r2,124(sp)
81111178:	b0bff60e 	bge	r22,r2,81111154 <__reset+0xfb0f1154>
8111117c:	d9801e04 	addi	r6,sp,120
81111180:	b80b883a 	mov	r5,r23
81111184:	9809883a 	mov	r4,r19
81111188:	111c2b80 	call	8111c2b8 <__sprint_r>
8111118c:	103d3a1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111190:	d8c02017 	ldw	r3,128(sp)
81111194:	d8801f17 	ldw	r2,124(sp)
81111198:	da000404 	addi	r8,sp,16
8111119c:	003fee06 	br	81111158 <__reset+0xfb0f1158>
811111a0:	d9403117 	ldw	r5,196(sp)
811111a4:	d8802a17 	ldw	r2,168(sp)
811111a8:	28adc83a 	sub	r22,r5,r2
811111ac:	05be630e 	bge	zero,r22,81110b3c <__reset+0xfb0f0b3c>
811111b0:	07000404 	movi	fp,16
811111b4:	d8801f17 	ldw	r2,124(sp)
811111b8:	e5838f0e 	bge	fp,r22,81111ff8 <___vfprintf_internal_r+0x1d88>
811111bc:	016044f4 	movhi	r5,33043
811111c0:	295d7184 	addi	r5,r5,30150
811111c4:	dc403015 	stw	r17,192(sp)
811111c8:	d9402b15 	stw	r5,172(sp)
811111cc:	b023883a 	mov	r17,r22
811111d0:	04c001c4 	movi	r19,7
811111d4:	a82d883a 	mov	r22,r21
811111d8:	902b883a 	mov	r21,r18
811111dc:	8025883a 	mov	r18,r16
811111e0:	dc002c17 	ldw	r16,176(sp)
811111e4:	00000306 	br	811111f4 <___vfprintf_internal_r+0xf84>
811111e8:	8c7ffc04 	addi	r17,r17,-16
811111ec:	42000204 	addi	r8,r8,8
811111f0:	e440110e 	bge	fp,r17,81111238 <___vfprintf_internal_r+0xfc8>
811111f4:	18c00404 	addi	r3,r3,16
811111f8:	10800044 	addi	r2,r2,1
811111fc:	45000015 	stw	r20,0(r8)
81111200:	47000115 	stw	fp,4(r8)
81111204:	d8c02015 	stw	r3,128(sp)
81111208:	d8801f15 	stw	r2,124(sp)
8111120c:	98bff60e 	bge	r19,r2,811111e8 <__reset+0xfb0f11e8>
81111210:	d9801e04 	addi	r6,sp,120
81111214:	b80b883a 	mov	r5,r23
81111218:	8009883a 	mov	r4,r16
8111121c:	111c2b80 	call	8111c2b8 <__sprint_r>
81111220:	103d151e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111224:	8c7ffc04 	addi	r17,r17,-16
81111228:	d8c02017 	ldw	r3,128(sp)
8111122c:	d8801f17 	ldw	r2,124(sp)
81111230:	da000404 	addi	r8,sp,16
81111234:	e47fef16 	blt	fp,r17,811111f4 <__reset+0xfb0f11f4>
81111238:	9021883a 	mov	r16,r18
8111123c:	a825883a 	mov	r18,r21
81111240:	b02b883a 	mov	r21,r22
81111244:	882d883a 	mov	r22,r17
81111248:	dc403017 	ldw	r17,192(sp)
8111124c:	d9002b17 	ldw	r4,172(sp)
81111250:	1d87883a 	add	r3,r3,r22
81111254:	10800044 	addi	r2,r2,1
81111258:	41000015 	stw	r4,0(r8)
8111125c:	45800115 	stw	r22,4(r8)
81111260:	d8c02015 	stw	r3,128(sp)
81111264:	d8801f15 	stw	r2,124(sp)
81111268:	010001c4 	movi	r4,7
8111126c:	20818e16 	blt	r4,r2,811118a8 <___vfprintf_internal_r+0x1638>
81111270:	42000204 	addi	r8,r8,8
81111274:	003e3106 	br	81110b3c <__reset+0xfb0f0b3c>
81111278:	d9403317 	ldw	r5,204(sp)
8111127c:	00800044 	movi	r2,1
81111280:	18c00044 	addi	r3,r3,1
81111284:	1141530e 	bge	r2,r5,811117d4 <___vfprintf_internal_r+0x1564>
81111288:	dc401f17 	ldw	r17,124(sp)
8111128c:	00800044 	movi	r2,1
81111290:	40800115 	stw	r2,4(r8)
81111294:	8c400044 	addi	r17,r17,1
81111298:	44000015 	stw	r16,0(r8)
8111129c:	d8c02015 	stw	r3,128(sp)
811112a0:	dc401f15 	stw	r17,124(sp)
811112a4:	008001c4 	movi	r2,7
811112a8:	14416b16 	blt	r2,r17,81111858 <___vfprintf_internal_r+0x15e8>
811112ac:	42000204 	addi	r8,r8,8
811112b0:	d8803717 	ldw	r2,220(sp)
811112b4:	d9003417 	ldw	r4,208(sp)
811112b8:	8c400044 	addi	r17,r17,1
811112bc:	10c7883a 	add	r3,r2,r3
811112c0:	40800115 	stw	r2,4(r8)
811112c4:	41000015 	stw	r4,0(r8)
811112c8:	d8c02015 	stw	r3,128(sp)
811112cc:	dc401f15 	stw	r17,124(sp)
811112d0:	008001c4 	movi	r2,7
811112d4:	14416916 	blt	r2,r17,8111187c <___vfprintf_internal_r+0x160c>
811112d8:	45800204 	addi	r22,r8,8
811112dc:	d9003617 	ldw	r4,216(sp)
811112e0:	d9403817 	ldw	r5,224(sp)
811112e4:	000d883a 	mov	r6,zero
811112e8:	000f883a 	mov	r7,zero
811112ec:	d8c03c15 	stw	r3,240(sp)
811112f0:	1120bd80 	call	81120bd8 <__eqdf2>
811112f4:	d8c03c17 	ldw	r3,240(sp)
811112f8:	1000bc26 	beq	r2,zero,811115ec <___vfprintf_internal_r+0x137c>
811112fc:	d9403317 	ldw	r5,204(sp)
81111300:	84000044 	addi	r16,r16,1
81111304:	8c400044 	addi	r17,r17,1
81111308:	28bfffc4 	addi	r2,r5,-1
8111130c:	1887883a 	add	r3,r3,r2
81111310:	b0800115 	stw	r2,4(r22)
81111314:	b4000015 	stw	r16,0(r22)
81111318:	d8c02015 	stw	r3,128(sp)
8111131c:	dc401f15 	stw	r17,124(sp)
81111320:	008001c4 	movi	r2,7
81111324:	14414316 	blt	r2,r17,81111834 <___vfprintf_internal_r+0x15c4>
81111328:	b5800204 	addi	r22,r22,8
8111132c:	d9003a17 	ldw	r4,232(sp)
81111330:	df0022c4 	addi	fp,sp,139
81111334:	8c400044 	addi	r17,r17,1
81111338:	20c7883a 	add	r3,r4,r3
8111133c:	b7000015 	stw	fp,0(r22)
81111340:	b1000115 	stw	r4,4(r22)
81111344:	d8c02015 	stw	r3,128(sp)
81111348:	dc401f15 	stw	r17,124(sp)
8111134c:	008001c4 	movi	r2,7
81111350:	14400e16 	blt	r2,r17,8111138c <___vfprintf_internal_r+0x111c>
81111354:	b2000204 	addi	r8,r22,8
81111358:	003e3a06 	br	81110c44 <__reset+0xfb0f0c44>
8111135c:	012044f4 	movhi	r4,33043
81111360:	211d7184 	addi	r4,r4,30150
81111364:	d9002b15 	stw	r4,172(sp)
81111368:	d9002b17 	ldw	r4,172(sp)
8111136c:	1c07883a 	add	r3,r3,r16
81111370:	44000115 	stw	r16,4(r8)
81111374:	41000015 	stw	r4,0(r8)
81111378:	10800044 	addi	r2,r2,1
8111137c:	d8c02015 	stw	r3,128(sp)
81111380:	d8801f15 	stw	r2,124(sp)
81111384:	010001c4 	movi	r4,7
81111388:	20be2d0e 	bge	r4,r2,81110c40 <__reset+0xfb0f0c40>
8111138c:	d9002c17 	ldw	r4,176(sp)
81111390:	d9801e04 	addi	r6,sp,120
81111394:	b80b883a 	mov	r5,r23
81111398:	111c2b80 	call	8111c2b8 <__sprint_r>
8111139c:	103cb61e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
811113a0:	d8c02017 	ldw	r3,128(sp)
811113a4:	da000404 	addi	r8,sp,16
811113a8:	003e2606 	br	81110c44 <__reset+0xfb0f0c44>
811113ac:	d9002c17 	ldw	r4,176(sp)
811113b0:	d9801e04 	addi	r6,sp,120
811113b4:	b80b883a 	mov	r5,r23
811113b8:	111c2b80 	call	8111c2b8 <__sprint_r>
811113bc:	103e5d26 	beq	r2,zero,81110d34 <__reset+0xfb0f0d34>
811113c0:	003cad06 	br	81110678 <__reset+0xfb0f0678>
811113c4:	d9002c17 	ldw	r4,176(sp)
811113c8:	d9801e04 	addi	r6,sp,120
811113cc:	b80b883a 	mov	r5,r23
811113d0:	111c2b80 	call	8111c2b8 <__sprint_r>
811113d4:	103ca81e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
811113d8:	d8c02017 	ldw	r3,128(sp)
811113dc:	da000404 	addi	r8,sp,16
811113e0:	003e0b06 	br	81110c10 <__reset+0xfb0f0c10>
811113e4:	d9002c17 	ldw	r4,176(sp)
811113e8:	d9801e04 	addi	r6,sp,120
811113ec:	b80b883a 	mov	r5,r23
811113f0:	111c2b80 	call	8111c2b8 <__sprint_r>
811113f4:	103ca01e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
811113f8:	d8c02017 	ldw	r3,128(sp)
811113fc:	da000404 	addi	r8,sp,16
81111400:	003dbd06 	br	81110af8 <__reset+0xfb0f0af8>
81111404:	d9002c17 	ldw	r4,176(sp)
81111408:	d9801e04 	addi	r6,sp,120
8111140c:	b80b883a 	mov	r5,r23
81111410:	111c2b80 	call	8111c2b8 <__sprint_r>
81111414:	103c981e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111418:	d8c02017 	ldw	r3,128(sp)
8111141c:	da000404 	addi	r8,sp,16
81111420:	003dc306 	br	81110b30 <__reset+0xfb0f0b30>
81111424:	d8802917 	ldw	r2,164(sp)
81111428:	d8002785 	stb	zero,158(sp)
8111142c:	103f0616 	blt	r2,zero,81111048 <__reset+0xfb0f1048>
81111430:	00ffdfc4 	movi	r3,-129
81111434:	9d84b03a 	or	r2,r19,r22
81111438:	90e4703a 	and	r18,r18,r3
8111143c:	103c6b26 	beq	r2,zero,811105ec <__reset+0xfb0f05ec>
81111440:	0039883a 	mov	fp,zero
81111444:	003e7406 	br	81110e18 <__reset+0xfb0f0e18>
81111448:	9080040c 	andi	r2,r18,16
8111144c:	1001b326 	beq	r2,zero,81111b1c <___vfprintf_internal_r+0x18ac>
81111450:	d9002d17 	ldw	r4,180(sp)
81111454:	d9402917 	ldw	r5,164(sp)
81111458:	d8002785 	stb	zero,158(sp)
8111145c:	20800104 	addi	r2,r4,4
81111460:	24c00017 	ldw	r19,0(r4)
81111464:	002d883a 	mov	r22,zero
81111468:	2801b516 	blt	r5,zero,81111b40 <___vfprintf_internal_r+0x18d0>
8111146c:	00ffdfc4 	movi	r3,-129
81111470:	d8802d15 	stw	r2,180(sp)
81111474:	90e4703a 	and	r18,r18,r3
81111478:	983d2726 	beq	r19,zero,81110918 <__reset+0xfb0f0918>
8111147c:	0039883a 	mov	fp,zero
81111480:	003d2a06 	br	8111092c <__reset+0xfb0f092c>
81111484:	dc402617 	ldw	r17,152(sp)
81111488:	0441d30e 	bge	zero,r17,81111bd8 <___vfprintf_internal_r+0x1968>
8111148c:	dc403217 	ldw	r17,200(sp)
81111490:	d8803317 	ldw	r2,204(sp)
81111494:	1440010e 	bge	r2,r17,8111149c <___vfprintf_internal_r+0x122c>
81111498:	1023883a 	mov	r17,r2
8111149c:	04400a0e 	bge	zero,r17,811114c8 <___vfprintf_internal_r+0x1258>
811114a0:	d8801f17 	ldw	r2,124(sp)
811114a4:	1c47883a 	add	r3,r3,r17
811114a8:	44000015 	stw	r16,0(r8)
811114ac:	10800044 	addi	r2,r2,1
811114b0:	44400115 	stw	r17,4(r8)
811114b4:	d8c02015 	stw	r3,128(sp)
811114b8:	d8801f15 	stw	r2,124(sp)
811114bc:	010001c4 	movi	r4,7
811114c0:	20826516 	blt	r4,r2,81111e58 <___vfprintf_internal_r+0x1be8>
811114c4:	42000204 	addi	r8,r8,8
811114c8:	88026116 	blt	r17,zero,81111e50 <___vfprintf_internal_r+0x1be0>
811114cc:	d9003217 	ldw	r4,200(sp)
811114d0:	2463c83a 	sub	r17,r4,r17
811114d4:	04407b0e 	bge	zero,r17,811116c4 <___vfprintf_internal_r+0x1454>
811114d8:	05800404 	movi	r22,16
811114dc:	d8801f17 	ldw	r2,124(sp)
811114e0:	b4419d0e 	bge	r22,r17,81111b58 <___vfprintf_internal_r+0x18e8>
811114e4:	012044f4 	movhi	r4,33043
811114e8:	211d7184 	addi	r4,r4,30150
811114ec:	d9002b15 	stw	r4,172(sp)
811114f0:	070001c4 	movi	fp,7
811114f4:	dcc02c17 	ldw	r19,176(sp)
811114f8:	00000306 	br	81111508 <___vfprintf_internal_r+0x1298>
811114fc:	42000204 	addi	r8,r8,8
81111500:	8c7ffc04 	addi	r17,r17,-16
81111504:	b441970e 	bge	r22,r17,81111b64 <___vfprintf_internal_r+0x18f4>
81111508:	18c00404 	addi	r3,r3,16
8111150c:	10800044 	addi	r2,r2,1
81111510:	45000015 	stw	r20,0(r8)
81111514:	45800115 	stw	r22,4(r8)
81111518:	d8c02015 	stw	r3,128(sp)
8111151c:	d8801f15 	stw	r2,124(sp)
81111520:	e0bff60e 	bge	fp,r2,811114fc <__reset+0xfb0f14fc>
81111524:	d9801e04 	addi	r6,sp,120
81111528:	b80b883a 	mov	r5,r23
8111152c:	9809883a 	mov	r4,r19
81111530:	111c2b80 	call	8111c2b8 <__sprint_r>
81111534:	103c501e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111538:	d8c02017 	ldw	r3,128(sp)
8111153c:	d8801f17 	ldw	r2,124(sp)
81111540:	da000404 	addi	r8,sp,16
81111544:	003fee06 	br	81111500 <__reset+0xfb0f1500>
81111548:	d9002c17 	ldw	r4,176(sp)
8111154c:	d9801e04 	addi	r6,sp,120
81111550:	b80b883a 	mov	r5,r23
81111554:	111c2b80 	call	8111c2b8 <__sprint_r>
81111558:	103c471e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
8111155c:	d8c02017 	ldw	r3,128(sp)
81111560:	df002787 	ldb	fp,158(sp)
81111564:	da000404 	addi	r8,sp,16
81111568:	003d5606 	br	81110ac4 <__reset+0xfb0f0ac4>
8111156c:	9080040c 	andi	r2,r18,16
81111570:	10016126 	beq	r2,zero,81111af8 <___vfprintf_internal_r+0x1888>
81111574:	d8802d17 	ldw	r2,180(sp)
81111578:	14c00017 	ldw	r19,0(r2)
8111157c:	10800104 	addi	r2,r2,4
81111580:	d8802d15 	stw	r2,180(sp)
81111584:	982dd7fa 	srai	r22,r19,31
81111588:	b005883a 	mov	r2,r22
8111158c:	003c8206 	br	81110798 <__reset+0xfb0f0798>
81111590:	9080040c 	andi	r2,r18,16
81111594:	10003526 	beq	r2,zero,8111166c <___vfprintf_internal_r+0x13fc>
81111598:	d9402d17 	ldw	r5,180(sp)
8111159c:	d8c02917 	ldw	r3,164(sp)
811115a0:	d8002785 	stb	zero,158(sp)
811115a4:	28800104 	addi	r2,r5,4
811115a8:	2cc00017 	ldw	r19,0(r5)
811115ac:	002d883a 	mov	r22,zero
811115b0:	18003716 	blt	r3,zero,81111690 <___vfprintf_internal_r+0x1420>
811115b4:	00ffdfc4 	movi	r3,-129
811115b8:	d8802d15 	stw	r2,180(sp)
811115bc:	90e4703a 	and	r18,r18,r3
811115c0:	0039883a 	mov	fp,zero
811115c4:	983df326 	beq	r19,zero,81110d94 <__reset+0xfb0f0d94>
811115c8:	00800244 	movi	r2,9
811115cc:	14fc7b36 	bltu	r2,r19,811107bc <__reset+0xfb0f07bc>
811115d0:	d8c02817 	ldw	r3,160(sp)
811115d4:	dc001dc4 	addi	r16,sp,119
811115d8:	9cc00c04 	addi	r19,r19,48
811115dc:	1c07c83a 	sub	r3,r3,r16
811115e0:	dcc01dc5 	stb	r19,119(sp)
811115e4:	d8c02e15 	stw	r3,184(sp)
811115e8:	003ce806 	br	8111098c <__reset+0xfb0f098c>
811115ec:	d8803317 	ldw	r2,204(sp)
811115f0:	143fffc4 	addi	r16,r2,-1
811115f4:	043f4d0e 	bge	zero,r16,8111132c <__reset+0xfb0f132c>
811115f8:	07000404 	movi	fp,16
811115fc:	e400810e 	bge	fp,r16,81111804 <___vfprintf_internal_r+0x1594>
81111600:	016044f4 	movhi	r5,33043
81111604:	295d7184 	addi	r5,r5,30150
81111608:	d9402b15 	stw	r5,172(sp)
8111160c:	01c001c4 	movi	r7,7
81111610:	dcc02c17 	ldw	r19,176(sp)
81111614:	00000306 	br	81111624 <___vfprintf_internal_r+0x13b4>
81111618:	b5800204 	addi	r22,r22,8
8111161c:	843ffc04 	addi	r16,r16,-16
81111620:	e4007b0e 	bge	fp,r16,81111810 <___vfprintf_internal_r+0x15a0>
81111624:	18c00404 	addi	r3,r3,16
81111628:	8c400044 	addi	r17,r17,1
8111162c:	b5000015 	stw	r20,0(r22)
81111630:	b7000115 	stw	fp,4(r22)
81111634:	d8c02015 	stw	r3,128(sp)
81111638:	dc401f15 	stw	r17,124(sp)
8111163c:	3c7ff60e 	bge	r7,r17,81111618 <__reset+0xfb0f1618>
81111640:	d9801e04 	addi	r6,sp,120
81111644:	b80b883a 	mov	r5,r23
81111648:	9809883a 	mov	r4,r19
8111164c:	d9c03c15 	stw	r7,240(sp)
81111650:	111c2b80 	call	8111c2b8 <__sprint_r>
81111654:	d9c03c17 	ldw	r7,240(sp)
81111658:	103c071e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
8111165c:	d8c02017 	ldw	r3,128(sp)
81111660:	dc401f17 	ldw	r17,124(sp)
81111664:	dd800404 	addi	r22,sp,16
81111668:	003fec06 	br	8111161c <__reset+0xfb0f161c>
8111166c:	9080100c 	andi	r2,r18,64
81111670:	d8002785 	stb	zero,158(sp)
81111674:	10010e26 	beq	r2,zero,81111ab0 <___vfprintf_internal_r+0x1840>
81111678:	d9002d17 	ldw	r4,180(sp)
8111167c:	d9402917 	ldw	r5,164(sp)
81111680:	002d883a 	mov	r22,zero
81111684:	20800104 	addi	r2,r4,4
81111688:	24c0000b 	ldhu	r19,0(r4)
8111168c:	283fc90e 	bge	r5,zero,811115b4 <__reset+0xfb0f15b4>
81111690:	d8802d15 	stw	r2,180(sp)
81111694:	0039883a 	mov	fp,zero
81111698:	9d84b03a 	or	r2,r19,r22
8111169c:	103c461e 	bne	r2,zero,811107b8 <__reset+0xfb0f07b8>
811116a0:	00800044 	movi	r2,1
811116a4:	003e6c06 	br	81111058 <__reset+0xfb0f1058>
811116a8:	d9002c17 	ldw	r4,176(sp)
811116ac:	d9801e04 	addi	r6,sp,120
811116b0:	b80b883a 	mov	r5,r23
811116b4:	111c2b80 	call	8111c2b8 <__sprint_r>
811116b8:	103bef1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
811116bc:	d8c02017 	ldw	r3,128(sp)
811116c0:	da000404 	addi	r8,sp,16
811116c4:	d9003217 	ldw	r4,200(sp)
811116c8:	d8802617 	ldw	r2,152(sp)
811116cc:	d9403317 	ldw	r5,204(sp)
811116d0:	8123883a 	add	r17,r16,r4
811116d4:	11400216 	blt	r2,r5,811116e0 <___vfprintf_internal_r+0x1470>
811116d8:	9100004c 	andi	r4,r18,1
811116dc:	20000d26 	beq	r4,zero,81111714 <___vfprintf_internal_r+0x14a4>
811116e0:	d9003717 	ldw	r4,220(sp)
811116e4:	d9403417 	ldw	r5,208(sp)
811116e8:	1907883a 	add	r3,r3,r4
811116ec:	d9001f17 	ldw	r4,124(sp)
811116f0:	41400015 	stw	r5,0(r8)
811116f4:	d9403717 	ldw	r5,220(sp)
811116f8:	21000044 	addi	r4,r4,1
811116fc:	d8c02015 	stw	r3,128(sp)
81111700:	41400115 	stw	r5,4(r8)
81111704:	d9001f15 	stw	r4,124(sp)
81111708:	014001c4 	movi	r5,7
8111170c:	2901e816 	blt	r5,r4,81111eb0 <___vfprintf_internal_r+0x1c40>
81111710:	42000204 	addi	r8,r8,8
81111714:	d9003317 	ldw	r4,204(sp)
81111718:	8121883a 	add	r16,r16,r4
8111171c:	2085c83a 	sub	r2,r4,r2
81111720:	8461c83a 	sub	r16,r16,r17
81111724:	1400010e 	bge	r2,r16,8111172c <___vfprintf_internal_r+0x14bc>
81111728:	1021883a 	mov	r16,r2
8111172c:	04000a0e 	bge	zero,r16,81111758 <___vfprintf_internal_r+0x14e8>
81111730:	d9001f17 	ldw	r4,124(sp)
81111734:	1c07883a 	add	r3,r3,r16
81111738:	44400015 	stw	r17,0(r8)
8111173c:	21000044 	addi	r4,r4,1
81111740:	44000115 	stw	r16,4(r8)
81111744:	d8c02015 	stw	r3,128(sp)
81111748:	d9001f15 	stw	r4,124(sp)
8111174c:	014001c4 	movi	r5,7
81111750:	2901fb16 	blt	r5,r4,81111f40 <___vfprintf_internal_r+0x1cd0>
81111754:	42000204 	addi	r8,r8,8
81111758:	8001f716 	blt	r16,zero,81111f38 <___vfprintf_internal_r+0x1cc8>
8111175c:	1421c83a 	sub	r16,r2,r16
81111760:	043d380e 	bge	zero,r16,81110c44 <__reset+0xfb0f0c44>
81111764:	04400404 	movi	r17,16
81111768:	d8801f17 	ldw	r2,124(sp)
8111176c:	8c3efb0e 	bge	r17,r16,8111135c <__reset+0xfb0f135c>
81111770:	016044f4 	movhi	r5,33043
81111774:	295d7184 	addi	r5,r5,30150
81111778:	d9402b15 	stw	r5,172(sp)
8111177c:	058001c4 	movi	r22,7
81111780:	dcc02c17 	ldw	r19,176(sp)
81111784:	00000306 	br	81111794 <___vfprintf_internal_r+0x1524>
81111788:	42000204 	addi	r8,r8,8
8111178c:	843ffc04 	addi	r16,r16,-16
81111790:	8c3ef50e 	bge	r17,r16,81111368 <__reset+0xfb0f1368>
81111794:	18c00404 	addi	r3,r3,16
81111798:	10800044 	addi	r2,r2,1
8111179c:	45000015 	stw	r20,0(r8)
811117a0:	44400115 	stw	r17,4(r8)
811117a4:	d8c02015 	stw	r3,128(sp)
811117a8:	d8801f15 	stw	r2,124(sp)
811117ac:	b0bff60e 	bge	r22,r2,81111788 <__reset+0xfb0f1788>
811117b0:	d9801e04 	addi	r6,sp,120
811117b4:	b80b883a 	mov	r5,r23
811117b8:	9809883a 	mov	r4,r19
811117bc:	111c2b80 	call	8111c2b8 <__sprint_r>
811117c0:	103bad1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
811117c4:	d8c02017 	ldw	r3,128(sp)
811117c8:	d8801f17 	ldw	r2,124(sp)
811117cc:	da000404 	addi	r8,sp,16
811117d0:	003fee06 	br	8111178c <__reset+0xfb0f178c>
811117d4:	9088703a 	and	r4,r18,r2
811117d8:	203eab1e 	bne	r4,zero,81111288 <__reset+0xfb0f1288>
811117dc:	dc401f17 	ldw	r17,124(sp)
811117e0:	40800115 	stw	r2,4(r8)
811117e4:	44000015 	stw	r16,0(r8)
811117e8:	8c400044 	addi	r17,r17,1
811117ec:	d8c02015 	stw	r3,128(sp)
811117f0:	dc401f15 	stw	r17,124(sp)
811117f4:	008001c4 	movi	r2,7
811117f8:	14400e16 	blt	r2,r17,81111834 <___vfprintf_internal_r+0x15c4>
811117fc:	45800204 	addi	r22,r8,8
81111800:	003eca06 	br	8111132c <__reset+0xfb0f132c>
81111804:	012044f4 	movhi	r4,33043
81111808:	211d7184 	addi	r4,r4,30150
8111180c:	d9002b15 	stw	r4,172(sp)
81111810:	d8802b17 	ldw	r2,172(sp)
81111814:	1c07883a 	add	r3,r3,r16
81111818:	8c400044 	addi	r17,r17,1
8111181c:	b0800015 	stw	r2,0(r22)
81111820:	b4000115 	stw	r16,4(r22)
81111824:	d8c02015 	stw	r3,128(sp)
81111828:	dc401f15 	stw	r17,124(sp)
8111182c:	008001c4 	movi	r2,7
81111830:	147ebd0e 	bge	r2,r17,81111328 <__reset+0xfb0f1328>
81111834:	d9002c17 	ldw	r4,176(sp)
81111838:	d9801e04 	addi	r6,sp,120
8111183c:	b80b883a 	mov	r5,r23
81111840:	111c2b80 	call	8111c2b8 <__sprint_r>
81111844:	103b8c1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111848:	d8c02017 	ldw	r3,128(sp)
8111184c:	dc401f17 	ldw	r17,124(sp)
81111850:	dd800404 	addi	r22,sp,16
81111854:	003eb506 	br	8111132c <__reset+0xfb0f132c>
81111858:	d9002c17 	ldw	r4,176(sp)
8111185c:	d9801e04 	addi	r6,sp,120
81111860:	b80b883a 	mov	r5,r23
81111864:	111c2b80 	call	8111c2b8 <__sprint_r>
81111868:	103b831e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
8111186c:	d8c02017 	ldw	r3,128(sp)
81111870:	dc401f17 	ldw	r17,124(sp)
81111874:	da000404 	addi	r8,sp,16
81111878:	003e8d06 	br	811112b0 <__reset+0xfb0f12b0>
8111187c:	d9002c17 	ldw	r4,176(sp)
81111880:	d9801e04 	addi	r6,sp,120
81111884:	b80b883a 	mov	r5,r23
81111888:	111c2b80 	call	8111c2b8 <__sprint_r>
8111188c:	103b7a1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111890:	d8c02017 	ldw	r3,128(sp)
81111894:	dc401f17 	ldw	r17,124(sp)
81111898:	dd800404 	addi	r22,sp,16
8111189c:	003e8f06 	br	811112dc <__reset+0xfb0f12dc>
811118a0:	0027883a 	mov	r19,zero
811118a4:	003f4a06 	br	811115d0 <__reset+0xfb0f15d0>
811118a8:	d9002c17 	ldw	r4,176(sp)
811118ac:	d9801e04 	addi	r6,sp,120
811118b0:	b80b883a 	mov	r5,r23
811118b4:	111c2b80 	call	8111c2b8 <__sprint_r>
811118b8:	103b6f1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
811118bc:	d8c02017 	ldw	r3,128(sp)
811118c0:	da000404 	addi	r8,sp,16
811118c4:	003c9d06 	br	81110b3c <__reset+0xfb0f0b3c>
811118c8:	04e7c83a 	sub	r19,zero,r19
811118cc:	9804c03a 	cmpne	r2,r19,zero
811118d0:	05adc83a 	sub	r22,zero,r22
811118d4:	b0adc83a 	sub	r22,r22,r2
811118d8:	d8802917 	ldw	r2,164(sp)
811118dc:	07000b44 	movi	fp,45
811118e0:	df002785 	stb	fp,158(sp)
811118e4:	10017b16 	blt	r2,zero,81111ed4 <___vfprintf_internal_r+0x1c64>
811118e8:	00bfdfc4 	movi	r2,-129
811118ec:	90a4703a 	and	r18,r18,r2
811118f0:	003bb106 	br	811107b8 <__reset+0xfb0f07b8>
811118f4:	d9003617 	ldw	r4,216(sp)
811118f8:	d9403817 	ldw	r5,224(sp)
811118fc:	da003d15 	stw	r8,244(sp)
81111900:	11189740 	call	81118974 <__fpclassifyd>
81111904:	da003d17 	ldw	r8,244(sp)
81111908:	1000f026 	beq	r2,zero,81111ccc <___vfprintf_internal_r+0x1a5c>
8111190c:	d9002917 	ldw	r4,164(sp)
81111910:	05bff7c4 	movi	r22,-33
81111914:	00bfffc4 	movi	r2,-1
81111918:	8dac703a 	and	r22,r17,r22
8111191c:	20820026 	beq	r4,r2,81112120 <___vfprintf_internal_r+0x1eb0>
81111920:	008011c4 	movi	r2,71
81111924:	b081f726 	beq	r22,r2,81112104 <___vfprintf_internal_r+0x1e94>
81111928:	d9003817 	ldw	r4,224(sp)
8111192c:	90c04014 	ori	r3,r18,256
81111930:	d8c02b15 	stw	r3,172(sp)
81111934:	20021516 	blt	r4,zero,8111218c <___vfprintf_internal_r+0x1f1c>
81111938:	dcc03817 	ldw	r19,224(sp)
8111193c:	d8002a05 	stb	zero,168(sp)
81111940:	00801984 	movi	r2,102
81111944:	8881f926 	beq	r17,r2,8111212c <___vfprintf_internal_r+0x1ebc>
81111948:	00801184 	movi	r2,70
8111194c:	88821c26 	beq	r17,r2,811121c0 <___vfprintf_internal_r+0x1f50>
81111950:	00801144 	movi	r2,69
81111954:	b081ef26 	beq	r22,r2,81112114 <___vfprintf_internal_r+0x1ea4>
81111958:	d8c02917 	ldw	r3,164(sp)
8111195c:	d8802104 	addi	r2,sp,132
81111960:	d8800315 	stw	r2,12(sp)
81111964:	d9403617 	ldw	r5,216(sp)
81111968:	d8802504 	addi	r2,sp,148
8111196c:	d9002c17 	ldw	r4,176(sp)
81111970:	d8800215 	stw	r2,8(sp)
81111974:	d8802604 	addi	r2,sp,152
81111978:	d8c00015 	stw	r3,0(sp)
8111197c:	d8800115 	stw	r2,4(sp)
81111980:	01c00084 	movi	r7,2
81111984:	980d883a 	mov	r6,r19
81111988:	d8c03c15 	stw	r3,240(sp)
8111198c:	da003d15 	stw	r8,244(sp)
81111990:	11141d40 	call	811141d4 <_dtoa_r>
81111994:	1021883a 	mov	r16,r2
81111998:	008019c4 	movi	r2,103
8111199c:	d8c03c17 	ldw	r3,240(sp)
811119a0:	da003d17 	ldw	r8,244(sp)
811119a4:	88817126 	beq	r17,r2,81111f6c <___vfprintf_internal_r+0x1cfc>
811119a8:	008011c4 	movi	r2,71
811119ac:	88829226 	beq	r17,r2,811123f8 <___vfprintf_internal_r+0x2188>
811119b0:	80f9883a 	add	fp,r16,r3
811119b4:	d9003617 	ldw	r4,216(sp)
811119b8:	000d883a 	mov	r6,zero
811119bc:	000f883a 	mov	r7,zero
811119c0:	980b883a 	mov	r5,r19
811119c4:	da003d15 	stw	r8,244(sp)
811119c8:	1120bd80 	call	81120bd8 <__eqdf2>
811119cc:	da003d17 	ldw	r8,244(sp)
811119d0:	10018d26 	beq	r2,zero,81112008 <___vfprintf_internal_r+0x1d98>
811119d4:	d8802117 	ldw	r2,132(sp)
811119d8:	1700062e 	bgeu	r2,fp,811119f4 <___vfprintf_internal_r+0x1784>
811119dc:	01000c04 	movi	r4,48
811119e0:	10c00044 	addi	r3,r2,1
811119e4:	d8c02115 	stw	r3,132(sp)
811119e8:	11000005 	stb	r4,0(r2)
811119ec:	d8802117 	ldw	r2,132(sp)
811119f0:	173ffb36 	bltu	r2,fp,811119e0 <__reset+0xfb0f19e0>
811119f4:	1405c83a 	sub	r2,r2,r16
811119f8:	d8803315 	stw	r2,204(sp)
811119fc:	008011c4 	movi	r2,71
81111a00:	b0817626 	beq	r22,r2,81111fdc <___vfprintf_internal_r+0x1d6c>
81111a04:	00801944 	movi	r2,101
81111a08:	1442810e 	bge	r2,r17,81112410 <___vfprintf_internal_r+0x21a0>
81111a0c:	d8c02617 	ldw	r3,152(sp)
81111a10:	00801984 	movi	r2,102
81111a14:	d8c03215 	stw	r3,200(sp)
81111a18:	8881fe26 	beq	r17,r2,81112214 <___vfprintf_internal_r+0x1fa4>
81111a1c:	d8c03217 	ldw	r3,200(sp)
81111a20:	d9003317 	ldw	r4,204(sp)
81111a24:	1901dd16 	blt	r3,r4,8111219c <___vfprintf_internal_r+0x1f2c>
81111a28:	9480004c 	andi	r18,r18,1
81111a2c:	90022b1e 	bne	r18,zero,811122dc <___vfprintf_internal_r+0x206c>
81111a30:	1805883a 	mov	r2,r3
81111a34:	18028016 	blt	r3,zero,81112438 <___vfprintf_internal_r+0x21c8>
81111a38:	d8c03217 	ldw	r3,200(sp)
81111a3c:	044019c4 	movi	r17,103
81111a40:	d8c02e15 	stw	r3,184(sp)
81111a44:	df002a07 	ldb	fp,168(sp)
81111a48:	e001531e 	bne	fp,zero,81111f98 <___vfprintf_internal_r+0x1d28>
81111a4c:	df002783 	ldbu	fp,158(sp)
81111a50:	d8802a15 	stw	r2,168(sp)
81111a54:	dc802b17 	ldw	r18,172(sp)
81111a58:	d8002915 	stw	zero,164(sp)
81111a5c:	003bd106 	br	811109a4 <__reset+0xfb0f09a4>
81111a60:	d8802d17 	ldw	r2,180(sp)
81111a64:	d8c02d17 	ldw	r3,180(sp)
81111a68:	d9002d17 	ldw	r4,180(sp)
81111a6c:	10800017 	ldw	r2,0(r2)
81111a70:	18c00117 	ldw	r3,4(r3)
81111a74:	21000204 	addi	r4,r4,8
81111a78:	d8803615 	stw	r2,216(sp)
81111a7c:	d8c03815 	stw	r3,224(sp)
81111a80:	d9002d15 	stw	r4,180(sp)
81111a84:	003b7506 	br	8111085c <__reset+0xfb0f085c>
81111a88:	ac400007 	ldb	r17,0(r21)
81111a8c:	003a5906 	br	811103f4 <__reset+0xfb0f03f4>
81111a90:	9080100c 	andi	r2,r18,64
81111a94:	1000a826 	beq	r2,zero,81111d38 <___vfprintf_internal_r+0x1ac8>
81111a98:	d9002d17 	ldw	r4,180(sp)
81111a9c:	002d883a 	mov	r22,zero
81111aa0:	24c0000b 	ldhu	r19,0(r4)
81111aa4:	21000104 	addi	r4,r4,4
81111aa8:	d9002d15 	stw	r4,180(sp)
81111aac:	003ccb06 	br	81110ddc <__reset+0xfb0f0ddc>
81111ab0:	d8c02d17 	ldw	r3,180(sp)
81111ab4:	d9002917 	ldw	r4,164(sp)
81111ab8:	002d883a 	mov	r22,zero
81111abc:	18800104 	addi	r2,r3,4
81111ac0:	1cc00017 	ldw	r19,0(r3)
81111ac4:	203ebb0e 	bge	r4,zero,811115b4 <__reset+0xfb0f15b4>
81111ac8:	003ef106 	br	81111690 <__reset+0xfb0f1690>
81111acc:	9080040c 	andi	r2,r18,16
81111ad0:	1000921e 	bne	r2,zero,81111d1c <___vfprintf_internal_r+0x1aac>
81111ad4:	9480100c 	andi	r18,r18,64
81111ad8:	90013926 	beq	r18,zero,81111fc0 <___vfprintf_internal_r+0x1d50>
81111adc:	d9002d17 	ldw	r4,180(sp)
81111ae0:	d9402f17 	ldw	r5,188(sp)
81111ae4:	20800017 	ldw	r2,0(r4)
81111ae8:	21000104 	addi	r4,r4,4
81111aec:	d9002d15 	stw	r4,180(sp)
81111af0:	1140000d 	sth	r5,0(r2)
81111af4:	003a1606 	br	81110350 <__reset+0xfb0f0350>
81111af8:	9080100c 	andi	r2,r18,64
81111afc:	10008026 	beq	r2,zero,81111d00 <___vfprintf_internal_r+0x1a90>
81111b00:	d8c02d17 	ldw	r3,180(sp)
81111b04:	1cc0000f 	ldh	r19,0(r3)
81111b08:	18c00104 	addi	r3,r3,4
81111b0c:	d8c02d15 	stw	r3,180(sp)
81111b10:	982dd7fa 	srai	r22,r19,31
81111b14:	b005883a 	mov	r2,r22
81111b18:	003b1f06 	br	81110798 <__reset+0xfb0f0798>
81111b1c:	9080100c 	andi	r2,r18,64
81111b20:	d8002785 	stb	zero,158(sp)
81111b24:	10008a1e 	bne	r2,zero,81111d50 <___vfprintf_internal_r+0x1ae0>
81111b28:	d9402d17 	ldw	r5,180(sp)
81111b2c:	d8c02917 	ldw	r3,164(sp)
81111b30:	002d883a 	mov	r22,zero
81111b34:	28800104 	addi	r2,r5,4
81111b38:	2cc00017 	ldw	r19,0(r5)
81111b3c:	183e4b0e 	bge	r3,zero,8111146c <__reset+0xfb0f146c>
81111b40:	9d86b03a 	or	r3,r19,r22
81111b44:	d8802d15 	stw	r2,180(sp)
81111b48:	183e4c1e 	bne	r3,zero,8111147c <__reset+0xfb0f147c>
81111b4c:	0039883a 	mov	fp,zero
81111b50:	0005883a 	mov	r2,zero
81111b54:	003d4006 	br	81111058 <__reset+0xfb0f1058>
81111b58:	016044f4 	movhi	r5,33043
81111b5c:	295d7184 	addi	r5,r5,30150
81111b60:	d9402b15 	stw	r5,172(sp)
81111b64:	d9402b17 	ldw	r5,172(sp)
81111b68:	1c47883a 	add	r3,r3,r17
81111b6c:	10800044 	addi	r2,r2,1
81111b70:	41400015 	stw	r5,0(r8)
81111b74:	44400115 	stw	r17,4(r8)
81111b78:	d8c02015 	stw	r3,128(sp)
81111b7c:	d8801f15 	stw	r2,124(sp)
81111b80:	010001c4 	movi	r4,7
81111b84:	20bec816 	blt	r4,r2,811116a8 <__reset+0xfb0f16a8>
81111b88:	42000204 	addi	r8,r8,8
81111b8c:	003ecd06 	br	811116c4 <__reset+0xfb0f16c4>
81111b90:	d9002917 	ldw	r4,164(sp)
81111b94:	d8002785 	stb	zero,158(sp)
81111b98:	203d2d16 	blt	r4,zero,81111050 <__reset+0xfb0f1050>
81111b9c:	00bfdfc4 	movi	r2,-129
81111ba0:	90a4703a 	and	r18,r18,r2
81111ba4:	003a9106 	br	811105ec <__reset+0xfb0f05ec>
81111ba8:	012044f4 	movhi	r4,33043
81111bac:	211d7184 	addi	r4,r4,30150
81111bb0:	d9002b15 	stw	r4,172(sp)
81111bb4:	003c0c06 	br	81110be8 <__reset+0xfb0f0be8>
81111bb8:	d9002c17 	ldw	r4,176(sp)
81111bbc:	d9801e04 	addi	r6,sp,120
81111bc0:	b80b883a 	mov	r5,r23
81111bc4:	111c2b80 	call	8111c2b8 <__sprint_r>
81111bc8:	103aab1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111bcc:	d8c02017 	ldw	r3,128(sp)
81111bd0:	da000404 	addi	r8,sp,16
81111bd4:	003d4106 	br	811110dc <__reset+0xfb0f10dc>
81111bd8:	d8801f17 	ldw	r2,124(sp)
81111bdc:	016044f4 	movhi	r5,33043
81111be0:	01000044 	movi	r4,1
81111be4:	18c00044 	addi	r3,r3,1
81111be8:	10800044 	addi	r2,r2,1
81111bec:	295d6904 	addi	r5,r5,30116
81111bf0:	41000115 	stw	r4,4(r8)
81111bf4:	41400015 	stw	r5,0(r8)
81111bf8:	d8c02015 	stw	r3,128(sp)
81111bfc:	d8801f15 	stw	r2,124(sp)
81111c00:	010001c4 	movi	r4,7
81111c04:	20805c16 	blt	r4,r2,81111d78 <___vfprintf_internal_r+0x1b08>
81111c08:	42000204 	addi	r8,r8,8
81111c0c:	8800041e 	bne	r17,zero,81111c20 <___vfprintf_internal_r+0x19b0>
81111c10:	d8803317 	ldw	r2,204(sp)
81111c14:	1000021e 	bne	r2,zero,81111c20 <___vfprintf_internal_r+0x19b0>
81111c18:	9080004c 	andi	r2,r18,1
81111c1c:	103c0926 	beq	r2,zero,81110c44 <__reset+0xfb0f0c44>
81111c20:	d9003717 	ldw	r4,220(sp)
81111c24:	d8801f17 	ldw	r2,124(sp)
81111c28:	d9403417 	ldw	r5,208(sp)
81111c2c:	20c7883a 	add	r3,r4,r3
81111c30:	10800044 	addi	r2,r2,1
81111c34:	41000115 	stw	r4,4(r8)
81111c38:	41400015 	stw	r5,0(r8)
81111c3c:	d8c02015 	stw	r3,128(sp)
81111c40:	d8801f15 	stw	r2,124(sp)
81111c44:	010001c4 	movi	r4,7
81111c48:	20812116 	blt	r4,r2,811120d0 <___vfprintf_internal_r+0x1e60>
81111c4c:	42000204 	addi	r8,r8,8
81111c50:	0463c83a 	sub	r17,zero,r17
81111c54:	0440730e 	bge	zero,r17,81111e24 <___vfprintf_internal_r+0x1bb4>
81111c58:	05800404 	movi	r22,16
81111c5c:	b440860e 	bge	r22,r17,81111e78 <___vfprintf_internal_r+0x1c08>
81111c60:	016044f4 	movhi	r5,33043
81111c64:	295d7184 	addi	r5,r5,30150
81111c68:	d9402b15 	stw	r5,172(sp)
81111c6c:	070001c4 	movi	fp,7
81111c70:	dcc02c17 	ldw	r19,176(sp)
81111c74:	00000306 	br	81111c84 <___vfprintf_internal_r+0x1a14>
81111c78:	42000204 	addi	r8,r8,8
81111c7c:	8c7ffc04 	addi	r17,r17,-16
81111c80:	b440800e 	bge	r22,r17,81111e84 <___vfprintf_internal_r+0x1c14>
81111c84:	18c00404 	addi	r3,r3,16
81111c88:	10800044 	addi	r2,r2,1
81111c8c:	45000015 	stw	r20,0(r8)
81111c90:	45800115 	stw	r22,4(r8)
81111c94:	d8c02015 	stw	r3,128(sp)
81111c98:	d8801f15 	stw	r2,124(sp)
81111c9c:	e0bff60e 	bge	fp,r2,81111c78 <__reset+0xfb0f1c78>
81111ca0:	d9801e04 	addi	r6,sp,120
81111ca4:	b80b883a 	mov	r5,r23
81111ca8:	9809883a 	mov	r4,r19
81111cac:	111c2b80 	call	8111c2b8 <__sprint_r>
81111cb0:	103a711e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111cb4:	d8c02017 	ldw	r3,128(sp)
81111cb8:	d8801f17 	ldw	r2,124(sp)
81111cbc:	da000404 	addi	r8,sp,16
81111cc0:	003fee06 	br	81111c7c <__reset+0xfb0f1c7c>
81111cc4:	00bfffc4 	movi	r2,-1
81111cc8:	003a6f06 	br	81110688 <__reset+0xfb0f0688>
81111ccc:	008011c4 	movi	r2,71
81111cd0:	1440b816 	blt	r2,r17,81111fb4 <___vfprintf_internal_r+0x1d44>
81111cd4:	042044f4 	movhi	r16,33043
81111cd8:	841d5b04 	addi	r16,r16,30060
81111cdc:	00c000c4 	movi	r3,3
81111ce0:	00bfdfc4 	movi	r2,-129
81111ce4:	d8c02a15 	stw	r3,168(sp)
81111ce8:	90a4703a 	and	r18,r18,r2
81111cec:	df002783 	ldbu	fp,158(sp)
81111cf0:	d8c02e15 	stw	r3,184(sp)
81111cf4:	d8002915 	stw	zero,164(sp)
81111cf8:	d8003215 	stw	zero,200(sp)
81111cfc:	003b2906 	br	811109a4 <__reset+0xfb0f09a4>
81111d00:	d9002d17 	ldw	r4,180(sp)
81111d04:	24c00017 	ldw	r19,0(r4)
81111d08:	21000104 	addi	r4,r4,4
81111d0c:	d9002d15 	stw	r4,180(sp)
81111d10:	982dd7fa 	srai	r22,r19,31
81111d14:	b005883a 	mov	r2,r22
81111d18:	003a9f06 	br	81110798 <__reset+0xfb0f0798>
81111d1c:	d9402d17 	ldw	r5,180(sp)
81111d20:	d8c02f17 	ldw	r3,188(sp)
81111d24:	28800017 	ldw	r2,0(r5)
81111d28:	29400104 	addi	r5,r5,4
81111d2c:	d9402d15 	stw	r5,180(sp)
81111d30:	10c00015 	stw	r3,0(r2)
81111d34:	00398606 	br	81110350 <__reset+0xfb0f0350>
81111d38:	d9402d17 	ldw	r5,180(sp)
81111d3c:	002d883a 	mov	r22,zero
81111d40:	2cc00017 	ldw	r19,0(r5)
81111d44:	29400104 	addi	r5,r5,4
81111d48:	d9402d15 	stw	r5,180(sp)
81111d4c:	003c2306 	br	81110ddc <__reset+0xfb0f0ddc>
81111d50:	d8c02d17 	ldw	r3,180(sp)
81111d54:	d9002917 	ldw	r4,164(sp)
81111d58:	002d883a 	mov	r22,zero
81111d5c:	18800104 	addi	r2,r3,4
81111d60:	1cc0000b 	ldhu	r19,0(r3)
81111d64:	203dc10e 	bge	r4,zero,8111146c <__reset+0xfb0f146c>
81111d68:	003f7506 	br	81111b40 <__reset+0xfb0f1b40>
81111d6c:	042044f4 	movhi	r16,33043
81111d70:	841d5904 	addi	r16,r16,30052
81111d74:	003acc06 	br	811108a8 <__reset+0xfb0f08a8>
81111d78:	d9002c17 	ldw	r4,176(sp)
81111d7c:	d9801e04 	addi	r6,sp,120
81111d80:	b80b883a 	mov	r5,r23
81111d84:	111c2b80 	call	8111c2b8 <__sprint_r>
81111d88:	103a3b1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111d8c:	dc402617 	ldw	r17,152(sp)
81111d90:	d8c02017 	ldw	r3,128(sp)
81111d94:	da000404 	addi	r8,sp,16
81111d98:	003f9c06 	br	81111c0c <__reset+0xfb0f1c0c>
81111d9c:	ac400043 	ldbu	r17,1(r21)
81111da0:	94800814 	ori	r18,r18,32
81111da4:	ad400044 	addi	r21,r21,1
81111da8:	8c403fcc 	andi	r17,r17,255
81111dac:	8c40201c 	xori	r17,r17,128
81111db0:	8c7fe004 	addi	r17,r17,-128
81111db4:	00398f06 	br	811103f4 <__reset+0xfb0f03f4>
81111db8:	d8c02d15 	stw	r3,180(sp)
81111dbc:	0039883a 	mov	fp,zero
81111dc0:	003e3506 	br	81111698 <__reset+0xfb0f1698>
81111dc4:	d9002c17 	ldw	r4,176(sp)
81111dc8:	d9801e04 	addi	r6,sp,120
81111dcc:	b80b883a 	mov	r5,r23
81111dd0:	111c2b80 	call	8111c2b8 <__sprint_r>
81111dd4:	103a281e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111dd8:	d8c02017 	ldw	r3,128(sp)
81111ddc:	da000404 	addi	r8,sp,16
81111de0:	003cd006 	br	81111124 <__reset+0xfb0f1124>
81111de4:	8009883a 	mov	r4,r16
81111de8:	da003d15 	stw	r8,244(sp)
81111dec:	110ddac0 	call	8110ddac <strlen>
81111df0:	d8802e15 	stw	r2,184(sp)
81111df4:	da003d17 	ldw	r8,244(sp)
81111df8:	103c340e 	bge	r2,zero,81110ecc <__reset+0xfb0f0ecc>
81111dfc:	0005883a 	mov	r2,zero
81111e00:	003c3206 	br	81110ecc <__reset+0xfb0f0ecc>
81111e04:	d9002c17 	ldw	r4,176(sp)
81111e08:	d9801e04 	addi	r6,sp,120
81111e0c:	b80b883a 	mov	r5,r23
81111e10:	111c2b80 	call	8111c2b8 <__sprint_r>
81111e14:	103a181e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111e18:	d8c02017 	ldw	r3,128(sp)
81111e1c:	d8801f17 	ldw	r2,124(sp)
81111e20:	da000404 	addi	r8,sp,16
81111e24:	d9403317 	ldw	r5,204(sp)
81111e28:	10800044 	addi	r2,r2,1
81111e2c:	44000015 	stw	r16,0(r8)
81111e30:	28c7883a 	add	r3,r5,r3
81111e34:	003b7d06 	br	81110c2c <__reset+0xfb0f0c2c>
81111e38:	012044f4 	movhi	r4,33043
81111e3c:	211d7584 	addi	r4,r4,30166
81111e40:	d9003515 	stw	r4,212(sp)
81111e44:	003b1406 	br	81110a98 <__reset+0xfb0f0a98>
81111e48:	013fffc4 	movi	r4,-1
81111e4c:	003a3506 	br	81110724 <__reset+0xfb0f0724>
81111e50:	0023883a 	mov	r17,zero
81111e54:	003d9d06 	br	811114cc <__reset+0xfb0f14cc>
81111e58:	d9002c17 	ldw	r4,176(sp)
81111e5c:	d9801e04 	addi	r6,sp,120
81111e60:	b80b883a 	mov	r5,r23
81111e64:	111c2b80 	call	8111c2b8 <__sprint_r>
81111e68:	103a031e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111e6c:	d8c02017 	ldw	r3,128(sp)
81111e70:	da000404 	addi	r8,sp,16
81111e74:	003d9406 	br	811114c8 <__reset+0xfb0f14c8>
81111e78:	012044f4 	movhi	r4,33043
81111e7c:	211d7184 	addi	r4,r4,30150
81111e80:	d9002b15 	stw	r4,172(sp)
81111e84:	d9002b17 	ldw	r4,172(sp)
81111e88:	1c47883a 	add	r3,r3,r17
81111e8c:	10800044 	addi	r2,r2,1
81111e90:	41000015 	stw	r4,0(r8)
81111e94:	44400115 	stw	r17,4(r8)
81111e98:	d8c02015 	stw	r3,128(sp)
81111e9c:	d8801f15 	stw	r2,124(sp)
81111ea0:	010001c4 	movi	r4,7
81111ea4:	20bfd716 	blt	r4,r2,81111e04 <__reset+0xfb0f1e04>
81111ea8:	42000204 	addi	r8,r8,8
81111eac:	003fdd06 	br	81111e24 <__reset+0xfb0f1e24>
81111eb0:	d9002c17 	ldw	r4,176(sp)
81111eb4:	d9801e04 	addi	r6,sp,120
81111eb8:	b80b883a 	mov	r5,r23
81111ebc:	111c2b80 	call	8111c2b8 <__sprint_r>
81111ec0:	1039ed1e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111ec4:	d8802617 	ldw	r2,152(sp)
81111ec8:	d8c02017 	ldw	r3,128(sp)
81111ecc:	da000404 	addi	r8,sp,16
81111ed0:	003e1006 	br	81111714 <__reset+0xfb0f1714>
81111ed4:	00800044 	movi	r2,1
81111ed8:	10803fcc 	andi	r2,r2,255
81111edc:	00c00044 	movi	r3,1
81111ee0:	10fa3526 	beq	r2,r3,811107b8 <__reset+0xfb0f07b8>
81111ee4:	00c00084 	movi	r3,2
81111ee8:	10fbcb26 	beq	r2,r3,81110e18 <__reset+0xfb0f0e18>
81111eec:	003a8f06 	br	8111092c <__reset+0xfb0f092c>
81111ef0:	012044f4 	movhi	r4,33043
81111ef4:	211d7584 	addi	r4,r4,30166
81111ef8:	d9003515 	stw	r4,212(sp)
81111efc:	003b7606 	br	81110cd8 <__reset+0xfb0f0cd8>
81111f00:	d8802917 	ldw	r2,164(sp)
81111f04:	00c00184 	movi	r3,6
81111f08:	1880012e 	bgeu	r3,r2,81111f10 <___vfprintf_internal_r+0x1ca0>
81111f0c:	1805883a 	mov	r2,r3
81111f10:	d8802e15 	stw	r2,184(sp)
81111f14:	1000ef16 	blt	r2,zero,811122d4 <___vfprintf_internal_r+0x2064>
81111f18:	042044f4 	movhi	r16,33043
81111f1c:	d8802a15 	stw	r2,168(sp)
81111f20:	dcc02d15 	stw	r19,180(sp)
81111f24:	d8002915 	stw	zero,164(sp)
81111f28:	d8003215 	stw	zero,200(sp)
81111f2c:	841d6704 	addi	r16,r16,30108
81111f30:	0039883a 	mov	fp,zero
81111f34:	003aa206 	br	811109c0 <__reset+0xfb0f09c0>
81111f38:	0021883a 	mov	r16,zero
81111f3c:	003e0706 	br	8111175c <__reset+0xfb0f175c>
81111f40:	d9002c17 	ldw	r4,176(sp)
81111f44:	d9801e04 	addi	r6,sp,120
81111f48:	b80b883a 	mov	r5,r23
81111f4c:	111c2b80 	call	8111c2b8 <__sprint_r>
81111f50:	1039c91e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
81111f54:	d8802617 	ldw	r2,152(sp)
81111f58:	d9403317 	ldw	r5,204(sp)
81111f5c:	d8c02017 	ldw	r3,128(sp)
81111f60:	da000404 	addi	r8,sp,16
81111f64:	2885c83a 	sub	r2,r5,r2
81111f68:	003dfb06 	br	81111758 <__reset+0xfb0f1758>
81111f6c:	9080004c 	andi	r2,r18,1
81111f70:	103e8f1e 	bne	r2,zero,811119b0 <__reset+0xfb0f19b0>
81111f74:	d8802117 	ldw	r2,132(sp)
81111f78:	003e9e06 	br	811119f4 <__reset+0xfb0f19f4>
81111f7c:	1025883a 	mov	r18,r2
81111f80:	0039883a 	mov	fp,zero
81111f84:	00800084 	movi	r2,2
81111f88:	003fd306 	br	81111ed8 <__reset+0xfb0f1ed8>
81111f8c:	07000b44 	movi	fp,45
81111f90:	df002785 	stb	fp,158(sp)
81111f94:	003a4006 	br	81110898 <__reset+0xfb0f0898>
81111f98:	00c00b44 	movi	r3,45
81111f9c:	d8c02785 	stb	r3,158(sp)
81111fa0:	d8802a15 	stw	r2,168(sp)
81111fa4:	dc802b17 	ldw	r18,172(sp)
81111fa8:	d8002915 	stw	zero,164(sp)
81111fac:	07000b44 	movi	fp,45
81111fb0:	003a8006 	br	811109b4 <__reset+0xfb0f09b4>
81111fb4:	042044f4 	movhi	r16,33043
81111fb8:	841d5c04 	addi	r16,r16,30064
81111fbc:	003f4706 	br	81111cdc <__reset+0xfb0f1cdc>
81111fc0:	d8c02d17 	ldw	r3,180(sp)
81111fc4:	d9002f17 	ldw	r4,188(sp)
81111fc8:	18800017 	ldw	r2,0(r3)
81111fcc:	18c00104 	addi	r3,r3,4
81111fd0:	d8c02d15 	stw	r3,180(sp)
81111fd4:	11000015 	stw	r4,0(r2)
81111fd8:	0038dd06 	br	81110350 <__reset+0xfb0f0350>
81111fdc:	dd802617 	ldw	r22,152(sp)
81111fe0:	00bfff44 	movi	r2,-3
81111fe4:	b0801c16 	blt	r22,r2,81112058 <___vfprintf_internal_r+0x1de8>
81111fe8:	d9402917 	ldw	r5,164(sp)
81111fec:	2d801a16 	blt	r5,r22,81112058 <___vfprintf_internal_r+0x1de8>
81111ff0:	dd803215 	stw	r22,200(sp)
81111ff4:	003e8906 	br	81111a1c <__reset+0xfb0f1a1c>
81111ff8:	012044f4 	movhi	r4,33043
81111ffc:	211d7184 	addi	r4,r4,30150
81112000:	d9002b15 	stw	r4,172(sp)
81112004:	003c9106 	br	8111124c <__reset+0xfb0f124c>
81112008:	e005883a 	mov	r2,fp
8111200c:	003e7906 	br	811119f4 <__reset+0xfb0f19f4>
81112010:	d9402917 	ldw	r5,164(sp)
81112014:	df002783 	ldbu	fp,158(sp)
81112018:	dcc02d15 	stw	r19,180(sp)
8111201c:	d9402a15 	stw	r5,168(sp)
81112020:	d9402e15 	stw	r5,184(sp)
81112024:	d8002915 	stw	zero,164(sp)
81112028:	d8003215 	stw	zero,200(sp)
8111202c:	003a5d06 	br	811109a4 <__reset+0xfb0f09a4>
81112030:	9080004c 	andi	r2,r18,1
81112034:	0039883a 	mov	fp,zero
81112038:	10000426 	beq	r2,zero,8111204c <___vfprintf_internal_r+0x1ddc>
8111203c:	00800c04 	movi	r2,48
81112040:	dc001dc4 	addi	r16,sp,119
81112044:	d8801dc5 	stb	r2,119(sp)
81112048:	003b8006 	br	81110e4c <__reset+0xfb0f0e4c>
8111204c:	d8002e15 	stw	zero,184(sp)
81112050:	dc001e04 	addi	r16,sp,120
81112054:	003a4d06 	br	8111098c <__reset+0xfb0f098c>
81112058:	8c7fff84 	addi	r17,r17,-2
8111205c:	b5bfffc4 	addi	r22,r22,-1
81112060:	dd802615 	stw	r22,152(sp)
81112064:	dc4022c5 	stb	r17,139(sp)
81112068:	b000bf16 	blt	r22,zero,81112368 <___vfprintf_internal_r+0x20f8>
8111206c:	00800ac4 	movi	r2,43
81112070:	d8802305 	stb	r2,140(sp)
81112074:	00800244 	movi	r2,9
81112078:	15807016 	blt	r2,r22,8111223c <___vfprintf_internal_r+0x1fcc>
8111207c:	00800c04 	movi	r2,48
81112080:	b5800c04 	addi	r22,r22,48
81112084:	d8802345 	stb	r2,141(sp)
81112088:	dd802385 	stb	r22,142(sp)
8111208c:	d88023c4 	addi	r2,sp,143
81112090:	df0022c4 	addi	fp,sp,139
81112094:	d8c03317 	ldw	r3,204(sp)
81112098:	1739c83a 	sub	fp,r2,fp
8111209c:	d9003317 	ldw	r4,204(sp)
811120a0:	e0c7883a 	add	r3,fp,r3
811120a4:	df003a15 	stw	fp,232(sp)
811120a8:	d8c02e15 	stw	r3,184(sp)
811120ac:	00800044 	movi	r2,1
811120b0:	1100b30e 	bge	r2,r4,81112380 <___vfprintf_internal_r+0x2110>
811120b4:	d8c02e17 	ldw	r3,184(sp)
811120b8:	18c00044 	addi	r3,r3,1
811120bc:	d8c02e15 	stw	r3,184(sp)
811120c0:	1805883a 	mov	r2,r3
811120c4:	1800ac16 	blt	r3,zero,81112378 <___vfprintf_internal_r+0x2108>
811120c8:	d8003215 	stw	zero,200(sp)
811120cc:	003e5d06 	br	81111a44 <__reset+0xfb0f1a44>
811120d0:	d9002c17 	ldw	r4,176(sp)
811120d4:	d9801e04 	addi	r6,sp,120
811120d8:	b80b883a 	mov	r5,r23
811120dc:	111c2b80 	call	8111c2b8 <__sprint_r>
811120e0:	1039651e 	bne	r2,zero,81110678 <__reset+0xfb0f0678>
811120e4:	dc402617 	ldw	r17,152(sp)
811120e8:	d8c02017 	ldw	r3,128(sp)
811120ec:	d8801f17 	ldw	r2,124(sp)
811120f0:	da000404 	addi	r8,sp,16
811120f4:	003ed606 	br	81111c50 <__reset+0xfb0f1c50>
811120f8:	582b883a 	mov	r21,r11
811120fc:	d8002915 	stw	zero,164(sp)
81112100:	0038bd06 	br	811103f8 <__reset+0xfb0f03f8>
81112104:	d8802917 	ldw	r2,164(sp)
81112108:	103e071e 	bne	r2,zero,81111928 <__reset+0xfb0f1928>
8111210c:	dc002915 	stw	r16,164(sp)
81112110:	003e0506 	br	81111928 <__reset+0xfb0f1928>
81112114:	d9002917 	ldw	r4,164(sp)
81112118:	20c00044 	addi	r3,r4,1
8111211c:	003e0f06 	br	8111195c <__reset+0xfb0f195c>
81112120:	01400184 	movi	r5,6
81112124:	d9402915 	stw	r5,164(sp)
81112128:	003dff06 	br	81111928 <__reset+0xfb0f1928>
8111212c:	d8802104 	addi	r2,sp,132
81112130:	d8800315 	stw	r2,12(sp)
81112134:	d8802504 	addi	r2,sp,148
81112138:	d8800215 	stw	r2,8(sp)
8111213c:	d8802604 	addi	r2,sp,152
81112140:	d8800115 	stw	r2,4(sp)
81112144:	d8802917 	ldw	r2,164(sp)
81112148:	d9403617 	ldw	r5,216(sp)
8111214c:	d9002c17 	ldw	r4,176(sp)
81112150:	d8800015 	stw	r2,0(sp)
81112154:	01c000c4 	movi	r7,3
81112158:	980d883a 	mov	r6,r19
8111215c:	da003d15 	stw	r8,244(sp)
81112160:	11141d40 	call	811141d4 <_dtoa_r>
81112164:	d8c02917 	ldw	r3,164(sp)
81112168:	da003d17 	ldw	r8,244(sp)
8111216c:	1021883a 	mov	r16,r2
81112170:	10f9883a 	add	fp,r2,r3
81112174:	81000007 	ldb	r4,0(r16)
81112178:	00800c04 	movi	r2,48
8111217c:	20805e26 	beq	r4,r2,811122f8 <___vfprintf_internal_r+0x2088>
81112180:	d8c02617 	ldw	r3,152(sp)
81112184:	e0f9883a 	add	fp,fp,r3
81112188:	003e0a06 	br	811119b4 <__reset+0xfb0f19b4>
8111218c:	00c00b44 	movi	r3,45
81112190:	24e0003c 	xorhi	r19,r4,32768
81112194:	d8c02a05 	stb	r3,168(sp)
81112198:	003de906 	br	81111940 <__reset+0xfb0f1940>
8111219c:	d8c03217 	ldw	r3,200(sp)
811121a0:	00c07a0e 	bge	zero,r3,8111238c <___vfprintf_internal_r+0x211c>
811121a4:	00800044 	movi	r2,1
811121a8:	d9003317 	ldw	r4,204(sp)
811121ac:	1105883a 	add	r2,r2,r4
811121b0:	d8802e15 	stw	r2,184(sp)
811121b4:	10004e16 	blt	r2,zero,811122f0 <___vfprintf_internal_r+0x2080>
811121b8:	044019c4 	movi	r17,103
811121bc:	003e2106 	br	81111a44 <__reset+0xfb0f1a44>
811121c0:	d9002917 	ldw	r4,164(sp)
811121c4:	d8802104 	addi	r2,sp,132
811121c8:	d8800315 	stw	r2,12(sp)
811121cc:	d9000015 	stw	r4,0(sp)
811121d0:	d8802504 	addi	r2,sp,148
811121d4:	d9403617 	ldw	r5,216(sp)
811121d8:	d9002c17 	ldw	r4,176(sp)
811121dc:	d8800215 	stw	r2,8(sp)
811121e0:	d8802604 	addi	r2,sp,152
811121e4:	d8800115 	stw	r2,4(sp)
811121e8:	01c000c4 	movi	r7,3
811121ec:	980d883a 	mov	r6,r19
811121f0:	da003d15 	stw	r8,244(sp)
811121f4:	11141d40 	call	811141d4 <_dtoa_r>
811121f8:	d8c02917 	ldw	r3,164(sp)
811121fc:	da003d17 	ldw	r8,244(sp)
81112200:	1021883a 	mov	r16,r2
81112204:	00801184 	movi	r2,70
81112208:	80f9883a 	add	fp,r16,r3
8111220c:	88bfd926 	beq	r17,r2,81112174 <__reset+0xfb0f2174>
81112210:	003de806 	br	811119b4 <__reset+0xfb0f19b4>
81112214:	d9002917 	ldw	r4,164(sp)
81112218:	00c04d0e 	bge	zero,r3,81112350 <___vfprintf_internal_r+0x20e0>
8111221c:	2000441e 	bne	r4,zero,81112330 <___vfprintf_internal_r+0x20c0>
81112220:	9480004c 	andi	r18,r18,1
81112224:	9000421e 	bne	r18,zero,81112330 <___vfprintf_internal_r+0x20c0>
81112228:	1805883a 	mov	r2,r3
8111222c:	18007016 	blt	r3,zero,811123f0 <___vfprintf_internal_r+0x2180>
81112230:	d8c03217 	ldw	r3,200(sp)
81112234:	d8c02e15 	stw	r3,184(sp)
81112238:	003e0206 	br	81111a44 <__reset+0xfb0f1a44>
8111223c:	df0022c4 	addi	fp,sp,139
81112240:	dc002915 	stw	r16,164(sp)
81112244:	4027883a 	mov	r19,r8
81112248:	e021883a 	mov	r16,fp
8111224c:	b009883a 	mov	r4,r22
81112250:	01400284 	movi	r5,10
81112254:	111f7180 	call	8111f718 <__modsi3>
81112258:	10800c04 	addi	r2,r2,48
8111225c:	843fffc4 	addi	r16,r16,-1
81112260:	b009883a 	mov	r4,r22
81112264:	01400284 	movi	r5,10
81112268:	80800005 	stb	r2,0(r16)
8111226c:	111f6940 	call	8111f694 <__divsi3>
81112270:	102d883a 	mov	r22,r2
81112274:	00800244 	movi	r2,9
81112278:	15bff416 	blt	r2,r22,8111224c <__reset+0xfb0f224c>
8111227c:	9811883a 	mov	r8,r19
81112280:	b0800c04 	addi	r2,r22,48
81112284:	8027883a 	mov	r19,r16
81112288:	997fffc4 	addi	r5,r19,-1
8111228c:	98bfffc5 	stb	r2,-1(r19)
81112290:	dc002917 	ldw	r16,164(sp)
81112294:	2f006a2e 	bgeu	r5,fp,81112440 <___vfprintf_internal_r+0x21d0>
81112298:	d9c02384 	addi	r7,sp,142
8111229c:	3ccfc83a 	sub	r7,r7,r19
811122a0:	d9002344 	addi	r4,sp,141
811122a4:	e1cf883a 	add	r7,fp,r7
811122a8:	00000106 	br	811122b0 <___vfprintf_internal_r+0x2040>
811122ac:	28800003 	ldbu	r2,0(r5)
811122b0:	20800005 	stb	r2,0(r4)
811122b4:	21000044 	addi	r4,r4,1
811122b8:	29400044 	addi	r5,r5,1
811122bc:	393ffb1e 	bne	r7,r4,811122ac <__reset+0xfb0f22ac>
811122c0:	d8802304 	addi	r2,sp,140
811122c4:	14c5c83a 	sub	r2,r2,r19
811122c8:	d8c02344 	addi	r3,sp,141
811122cc:	1885883a 	add	r2,r3,r2
811122d0:	003f7006 	br	81112094 <__reset+0xfb0f2094>
811122d4:	0005883a 	mov	r2,zero
811122d8:	003f0f06 	br	81111f18 <__reset+0xfb0f1f18>
811122dc:	d8c03217 	ldw	r3,200(sp)
811122e0:	18c00044 	addi	r3,r3,1
811122e4:	d8c02e15 	stw	r3,184(sp)
811122e8:	1805883a 	mov	r2,r3
811122ec:	183fb20e 	bge	r3,zero,811121b8 <__reset+0xfb0f21b8>
811122f0:	0005883a 	mov	r2,zero
811122f4:	003fb006 	br	811121b8 <__reset+0xfb0f21b8>
811122f8:	d9003617 	ldw	r4,216(sp)
811122fc:	000d883a 	mov	r6,zero
81112300:	000f883a 	mov	r7,zero
81112304:	980b883a 	mov	r5,r19
81112308:	d8c03c15 	stw	r3,240(sp)
8111230c:	da003d15 	stw	r8,244(sp)
81112310:	1120bd80 	call	81120bd8 <__eqdf2>
81112314:	d8c03c17 	ldw	r3,240(sp)
81112318:	da003d17 	ldw	r8,244(sp)
8111231c:	103f9826 	beq	r2,zero,81112180 <__reset+0xfb0f2180>
81112320:	00800044 	movi	r2,1
81112324:	10c7c83a 	sub	r3,r2,r3
81112328:	d8c02615 	stw	r3,152(sp)
8111232c:	003f9506 	br	81112184 <__reset+0xfb0f2184>
81112330:	d9002917 	ldw	r4,164(sp)
81112334:	d8c03217 	ldw	r3,200(sp)
81112338:	20800044 	addi	r2,r4,1
8111233c:	1885883a 	add	r2,r3,r2
81112340:	d8802e15 	stw	r2,184(sp)
81112344:	103dbf0e 	bge	r2,zero,81111a44 <__reset+0xfb0f1a44>
81112348:	0005883a 	mov	r2,zero
8111234c:	003dbd06 	br	81111a44 <__reset+0xfb0f1a44>
81112350:	2000211e 	bne	r4,zero,811123d8 <___vfprintf_internal_r+0x2168>
81112354:	9480004c 	andi	r18,r18,1
81112358:	90001f1e 	bne	r18,zero,811123d8 <___vfprintf_internal_r+0x2168>
8111235c:	00800044 	movi	r2,1
81112360:	d8802e15 	stw	r2,184(sp)
81112364:	003db706 	br	81111a44 <__reset+0xfb0f1a44>
81112368:	00800b44 	movi	r2,45
8111236c:	05adc83a 	sub	r22,zero,r22
81112370:	d8802305 	stb	r2,140(sp)
81112374:	003f3f06 	br	81112074 <__reset+0xfb0f2074>
81112378:	0005883a 	mov	r2,zero
8111237c:	003f5206 	br	811120c8 <__reset+0xfb0f20c8>
81112380:	90a4703a 	and	r18,r18,r2
81112384:	903f4e26 	beq	r18,zero,811120c0 <__reset+0xfb0f20c0>
81112388:	003f4a06 	br	811120b4 <__reset+0xfb0f20b4>
8111238c:	00800084 	movi	r2,2
81112390:	10c5c83a 	sub	r2,r2,r3
81112394:	003f8406 	br	811121a8 <__reset+0xfb0f21a8>
81112398:	d8802d17 	ldw	r2,180(sp)
8111239c:	d9002d17 	ldw	r4,180(sp)
811123a0:	ac400043 	ldbu	r17,1(r21)
811123a4:	10800017 	ldw	r2,0(r2)
811123a8:	582b883a 	mov	r21,r11
811123ac:	d8802915 	stw	r2,164(sp)
811123b0:	20800104 	addi	r2,r4,4
811123b4:	d9002917 	ldw	r4,164(sp)
811123b8:	d8802d15 	stw	r2,180(sp)
811123bc:	203e7a0e 	bge	r4,zero,81111da8 <__reset+0xfb0f1da8>
811123c0:	8c403fcc 	andi	r17,r17,255
811123c4:	00bfffc4 	movi	r2,-1
811123c8:	8c40201c 	xori	r17,r17,128
811123cc:	d8802915 	stw	r2,164(sp)
811123d0:	8c7fe004 	addi	r17,r17,-128
811123d4:	00380706 	br	811103f4 <__reset+0xfb0f03f4>
811123d8:	d8c02917 	ldw	r3,164(sp)
811123dc:	18c00084 	addi	r3,r3,2
811123e0:	d8c02e15 	stw	r3,184(sp)
811123e4:	1805883a 	mov	r2,r3
811123e8:	183d960e 	bge	r3,zero,81111a44 <__reset+0xfb0f1a44>
811123ec:	003fd606 	br	81112348 <__reset+0xfb0f2348>
811123f0:	0005883a 	mov	r2,zero
811123f4:	003f8e06 	br	81112230 <__reset+0xfb0f2230>
811123f8:	9080004c 	andi	r2,r18,1
811123fc:	103f811e 	bne	r2,zero,81112204 <__reset+0xfb0f2204>
81112400:	d8802117 	ldw	r2,132(sp)
81112404:	1405c83a 	sub	r2,r2,r16
81112408:	d8803315 	stw	r2,204(sp)
8111240c:	b47ef326 	beq	r22,r17,81111fdc <__reset+0xfb0f1fdc>
81112410:	dd802617 	ldw	r22,152(sp)
81112414:	003f1106 	br	8111205c <__reset+0xfb0f205c>
81112418:	d9c02785 	stb	r7,158(sp)
8111241c:	00390406 	br	81110830 <__reset+0xfb0f0830>
81112420:	d9c02785 	stb	r7,158(sp)
81112424:	0038d306 	br	81110774 <__reset+0xfb0f0774>
81112428:	d9c02785 	stb	r7,158(sp)
8111242c:	003a6106 	br	81110db4 <__reset+0xfb0f0db4>
81112430:	d9c02785 	stb	r7,158(sp)
81112434:	003af806 	br	81111018 <__reset+0xfb0f1018>
81112438:	0005883a 	mov	r2,zero
8111243c:	003d7e06 	br	81111a38 <__reset+0xfb0f1a38>
81112440:	d8802344 	addi	r2,sp,141
81112444:	003f1306 	br	81112094 <__reset+0xfb0f2094>
81112448:	d9c02785 	stb	r7,158(sp)
8111244c:	00392306 	br	811108dc <__reset+0xfb0f08dc>
81112450:	d9c02785 	stb	r7,158(sp)
81112454:	003aa906 	br	81110efc <__reset+0xfb0f0efc>
81112458:	d9c02785 	stb	r7,158(sp)
8111245c:	003a3d06 	br	81110d54 <__reset+0xfb0f0d54>
81112460:	d9c02785 	stb	r7,158(sp)
81112464:	003aca06 	br	81110f90 <__reset+0xfb0f0f90>

81112468 <__vfprintf_internal>:
81112468:	00a04534 	movhi	r2,33044
8111246c:	10a65b04 	addi	r2,r2,-26260
81112470:	300f883a 	mov	r7,r6
81112474:	280d883a 	mov	r6,r5
81112478:	200b883a 	mov	r5,r4
8111247c:	11000017 	ldw	r4,0(r2)
81112480:	11102701 	jmpi	81110270 <___vfprintf_internal_r>

81112484 <__sbprintf>:
81112484:	2880030b 	ldhu	r2,12(r5)
81112488:	2ac01917 	ldw	r11,100(r5)
8111248c:	2a80038b 	ldhu	r10,14(r5)
81112490:	2a400717 	ldw	r9,28(r5)
81112494:	2a000917 	ldw	r8,36(r5)
81112498:	defee204 	addi	sp,sp,-1144
8111249c:	00c10004 	movi	r3,1024
811124a0:	dc011a15 	stw	r16,1128(sp)
811124a4:	10bfff4c 	andi	r2,r2,65533
811124a8:	2821883a 	mov	r16,r5
811124ac:	d8cb883a 	add	r5,sp,r3
811124b0:	dc811c15 	stw	r18,1136(sp)
811124b4:	dc411b15 	stw	r17,1132(sp)
811124b8:	dfc11d15 	stw	ra,1140(sp)
811124bc:	2025883a 	mov	r18,r4
811124c0:	d881030d 	sth	r2,1036(sp)
811124c4:	dac11915 	stw	r11,1124(sp)
811124c8:	da81038d 	sth	r10,1038(sp)
811124cc:	da410715 	stw	r9,1052(sp)
811124d0:	da010915 	stw	r8,1060(sp)
811124d4:	dec10015 	stw	sp,1024(sp)
811124d8:	dec10415 	stw	sp,1040(sp)
811124dc:	d8c10215 	stw	r3,1032(sp)
811124e0:	d8c10515 	stw	r3,1044(sp)
811124e4:	d8010615 	stw	zero,1048(sp)
811124e8:	11102700 	call	81110270 <___vfprintf_internal_r>
811124ec:	1023883a 	mov	r17,r2
811124f0:	10000416 	blt	r2,zero,81112504 <__sbprintf+0x80>
811124f4:	d9410004 	addi	r5,sp,1024
811124f8:	9009883a 	mov	r4,r18
811124fc:	1115a780 	call	81115a78 <_fflush_r>
81112500:	10000d1e 	bne	r2,zero,81112538 <__sbprintf+0xb4>
81112504:	d881030b 	ldhu	r2,1036(sp)
81112508:	1080100c 	andi	r2,r2,64
8111250c:	10000326 	beq	r2,zero,8111251c <__sbprintf+0x98>
81112510:	8080030b 	ldhu	r2,12(r16)
81112514:	10801014 	ori	r2,r2,64
81112518:	8080030d 	sth	r2,12(r16)
8111251c:	8805883a 	mov	r2,r17
81112520:	dfc11d17 	ldw	ra,1140(sp)
81112524:	dc811c17 	ldw	r18,1136(sp)
81112528:	dc411b17 	ldw	r17,1132(sp)
8111252c:	dc011a17 	ldw	r16,1128(sp)
81112530:	dec11e04 	addi	sp,sp,1144
81112534:	f800283a 	ret
81112538:	047fffc4 	movi	r17,-1
8111253c:	003ff106 	br	81112504 <__reset+0xfb0f2504>

81112540 <__svfscanf_r>:
81112540:	2880030b 	ldhu	r2,12(r5)
81112544:	deff4b04 	addi	sp,sp,-724
81112548:	df00b315 	stw	fp,716(sp)
8111254c:	dd80b115 	stw	r22,708(sp)
81112550:	dfc0b415 	stw	ra,720(sp)
81112554:	ddc0b215 	stw	r23,712(sp)
81112558:	dd40b015 	stw	r21,704(sp)
8111255c:	dd00af15 	stw	r20,700(sp)
81112560:	dcc0ae15 	stw	r19,696(sp)
81112564:	dc80ad15 	stw	r18,692(sp)
81112568:	dc40ac15 	stw	r17,688(sp)
8111256c:	dc00ab15 	stw	r16,684(sp)
81112570:	10c8000c 	andi	r3,r2,8192
81112574:	d9c09c15 	stw	r7,624(sp)
81112578:	2839883a 	mov	fp,r5
8111257c:	202d883a 	mov	r22,r4
81112580:	1800061e 	bne	r3,zero,8111259c <__svfscanf_r+0x5c>
81112584:	29001917 	ldw	r4,100(r5)
81112588:	00f7ffc4 	movi	r3,-8193
8111258c:	10880014 	ori	r2,r2,8192
81112590:	20c6703a 	and	r3,r4,r3
81112594:	2880030d 	sth	r2,12(r5)
81112598:	28c01915 	stw	r3,100(r5)
8111259c:	30800003 	ldbu	r2,0(r6)
811125a0:	0021883a 	mov	r16,zero
811125a4:	05e04534 	movhi	r23,33044
811125a8:	d800a115 	stw	zero,644(sp)
811125ac:	d8009e15 	stw	zero,632(sp)
811125b0:	d800a015 	stw	zero,640(sp)
811125b4:	d8809b15 	stw	r2,620(sp)
811125b8:	bde65904 	addi	r23,r23,-26268
811125bc:	8025883a 	mov	r18,r16
811125c0:	35000044 	addi	r20,r6,1
811125c4:	10001e26 	beq	r2,zero,81112640 <__svfscanf_r+0x100>
811125c8:	b9c00017 	ldw	r7,0(r23)
811125cc:	3887883a 	add	r3,r7,r2
811125d0:	18c00043 	ldbu	r3,1(r3)
811125d4:	18c0020c 	andi	r3,r3,8
811125d8:	18001b26 	beq	r3,zero,81112648 <__svfscanf_r+0x108>
811125dc:	e0800117 	ldw	r2,4(fp)
811125e0:	00800e0e 	bge	zero,r2,8111261c <__svfscanf_r+0xdc>
811125e4:	e0c00017 	ldw	r3,0(fp)
811125e8:	b9000017 	ldw	r4,0(r23)
811125ec:	18800003 	ldbu	r2,0(r3)
811125f0:	2085883a 	add	r2,r4,r2
811125f4:	10800043 	ldbu	r2,1(r2)
811125f8:	1080020c 	andi	r2,r2,8
811125fc:	10000b26 	beq	r2,zero,8111262c <__svfscanf_r+0xec>
81112600:	e0800117 	ldw	r2,4(fp)
81112604:	18c00044 	addi	r3,r3,1
81112608:	e0c00015 	stw	r3,0(fp)
8111260c:	10bfffc4 	addi	r2,r2,-1
81112610:	e0800115 	stw	r2,4(fp)
81112614:	94800044 	addi	r18,r18,1
81112618:	00bff216 	blt	zero,r2,811125e4 <__reset+0xfb0f25e4>
8111261c:	e00b883a 	mov	r5,fp
81112620:	b009883a 	mov	r4,r22
81112624:	110d8cc0 	call	8110d8cc <__srefill_r>
81112628:	103fee26 	beq	r2,zero,811125e4 <__reset+0xfb0f25e4>
8111262c:	a00d883a 	mov	r6,r20
81112630:	30800003 	ldbu	r2,0(r6)
81112634:	35000044 	addi	r20,r6,1
81112638:	d8809b15 	stw	r2,620(sp)
8111263c:	103fe21e 	bne	r2,zero,811125c8 <__reset+0xfb0f25c8>
81112640:	d880a017 	ldw	r2,640(sp)
81112644:	00009906 	br	811128ac <__svfscanf_r+0x36c>
81112648:	00c00944 	movi	r3,37
8111264c:	10c0881e 	bne	r2,r3,81112870 <__svfscanf_r+0x330>
81112650:	30c00043 	ldbu	r3,1(r6)
81112654:	0023883a 	mov	r17,zero
81112658:	0027883a 	mov	r19,zero
8111265c:	01001e04 	movi	r4,120
81112660:	01401b04 	movi	r5,108
81112664:	a1800044 	addi	r6,r20,1
81112668:	20c0a236 	bltu	r4,r3,811128f4 <__svfscanf_r+0x3b4>
8111266c:	180490ba 	slli	r2,r3,2
81112670:	02204474 	movhi	r8,33041
81112674:	4209a104 	addi	r8,r8,9860
81112678:	1205883a 	add	r2,r2,r8
8111267c:	10800017 	ldw	r2,0(r2)
81112680:	1000683a 	jmp	r2
81112684:	811128a8 	cmpgeui	r4,r16,17570
81112688:	811128f4 	orhi	r4,r16,17571
8111268c:	811128f4 	orhi	r4,r16,17571
81112690:	811128f4 	orhi	r4,r16,17571
81112694:	811128f4 	orhi	r4,r16,17571
81112698:	811128f4 	orhi	r4,r16,17571
8111269c:	811128f4 	orhi	r4,r16,17571
811126a0:	811128f4 	orhi	r4,r16,17571
811126a4:	811128f4 	orhi	r4,r16,17571
811126a8:	811128f4 	orhi	r4,r16,17571
811126ac:	811128f4 	orhi	r4,r16,17571
811126b0:	811128f4 	orhi	r4,r16,17571
811126b4:	811128f4 	orhi	r4,r16,17571
811126b8:	811128f4 	orhi	r4,r16,17571
811126bc:	811128f4 	orhi	r4,r16,17571
811126c0:	811128f4 	orhi	r4,r16,17571
811126c4:	811128f4 	orhi	r4,r16,17571
811126c8:	811128f4 	orhi	r4,r16,17571
811126cc:	811128f4 	orhi	r4,r16,17571
811126d0:	811128f4 	orhi	r4,r16,17571
811126d4:	811128f4 	orhi	r4,r16,17571
811126d8:	811128f4 	orhi	r4,r16,17571
811126dc:	811128f4 	orhi	r4,r16,17571
811126e0:	811128f4 	orhi	r4,r16,17571
811126e4:	811128f4 	orhi	r4,r16,17571
811126e8:	811128f4 	orhi	r4,r16,17571
811126ec:	811128f4 	orhi	r4,r16,17571
811126f0:	811128f4 	orhi	r4,r16,17571
811126f4:	811128f4 	orhi	r4,r16,17571
811126f8:	811128f4 	orhi	r4,r16,17571
811126fc:	811128f4 	orhi	r4,r16,17571
81112700:	811128f4 	orhi	r4,r16,17571
81112704:	811128f4 	orhi	r4,r16,17571
81112708:	811128f4 	orhi	r4,r16,17571
8111270c:	811128f4 	orhi	r4,r16,17571
81112710:	811128f4 	orhi	r4,r16,17571
81112714:	811128f4 	orhi	r4,r16,17571
81112718:	81112868 	cmpgeui	r4,r16,17569
8111271c:	811128f4 	orhi	r4,r16,17571
81112720:	811128f4 	orhi	r4,r16,17571
81112724:	811128f4 	orhi	r4,r16,17571
81112728:	811128f4 	orhi	r4,r16,17571
8111272c:	811128dc 	xori	r4,r16,17571
81112730:	811128f4 	orhi	r4,r16,17571
81112734:	811128f4 	orhi	r4,r16,17571
81112738:	811128f4 	orhi	r4,r16,17571
8111273c:	811128f4 	orhi	r4,r16,17571
81112740:	811128f4 	orhi	r4,r16,17571
81112744:	81112a10 	cmplti	r4,r16,17576
81112748:	81112a10 	cmplti	r4,r16,17576
8111274c:	81112a10 	cmplti	r4,r16,17576
81112750:	81112a10 	cmplti	r4,r16,17576
81112754:	81112a10 	cmplti	r4,r16,17576
81112758:	81112a10 	cmplti	r4,r16,17576
8111275c:	81112a10 	cmplti	r4,r16,17576
81112760:	81112a10 	cmplti	r4,r16,17576
81112764:	81112a10 	cmplti	r4,r16,17576
81112768:	81112a10 	cmplti	r4,r16,17576
8111276c:	811128f4 	orhi	r4,r16,17571
81112770:	811128f4 	orhi	r4,r16,17571
81112774:	811128f4 	orhi	r4,r16,17571
81112778:	811128f4 	orhi	r4,r16,17571
8111277c:	811128f4 	orhi	r4,r16,17571
81112780:	811128f4 	orhi	r4,r16,17571
81112784:	811128f4 	orhi	r4,r16,17571
81112788:	811128f4 	orhi	r4,r16,17571
8111278c:	811128f4 	orhi	r4,r16,17571
81112790:	811128f4 	orhi	r4,r16,17571
81112794:	811129e4 	muli	r4,r16,17575
81112798:	81112a94 	ori	r4,r16,17578
8111279c:	811128f4 	orhi	r4,r16,17571
811127a0:	81112a94 	ori	r4,r16,17578
811127a4:	811128f4 	orhi	r4,r16,17571
811127a8:	811128f4 	orhi	r4,r16,17571
811127ac:	811128f4 	orhi	r4,r16,17571
811127b0:	811128f4 	orhi	r4,r16,17571
811127b4:	81112a80 	call	881112a8 <__reset+0x20f12a8>
811127b8:	811128f4 	orhi	r4,r16,17571
811127bc:	811128f4 	orhi	r4,r16,17571
811127c0:	81112a54 	ori	r4,r16,17577
811127c4:	811128f4 	orhi	r4,r16,17571
811127c8:	811128f4 	orhi	r4,r16,17571
811127cc:	811128f4 	orhi	r4,r16,17571
811127d0:	811128f4 	orhi	r4,r16,17571
811127d4:	811128f4 	orhi	r4,r16,17571
811127d8:	811128f4 	orhi	r4,r16,17571
811127dc:	811128f4 	orhi	r4,r16,17571
811127e0:	811128f4 	orhi	r4,r16,17571
811127e4:	81112a2c 	andhi	r4,r16,17576
811127e8:	811128f4 	orhi	r4,r16,17571
811127ec:	811128f4 	orhi	r4,r16,17571
811127f0:	81112bc8 	cmpgei	r4,r16,17583
811127f4:	811128f4 	orhi	r4,r16,17571
811127f8:	811128f4 	orhi	r4,r16,17571
811127fc:	811128f4 	orhi	r4,r16,17571
81112800:	811128f4 	orhi	r4,r16,17571
81112804:	811128f4 	orhi	r4,r16,17571
81112808:	811128f4 	orhi	r4,r16,17571
8111280c:	811128f4 	orhi	r4,r16,17571
81112810:	81112b4c 	andi	r4,r16,17581
81112814:	81112b24 	muli	r4,r16,17580
81112818:	81112a94 	ori	r4,r16,17578
8111281c:	81112a94 	ori	r4,r16,17578
81112820:	81112a94 	ori	r4,r16,17578
81112824:	81112b10 	cmplti	r4,r16,17580
81112828:	81112c54 	ori	r4,r16,17585
8111282c:	811128f4 	orhi	r4,r16,17571
81112830:	811128f4 	orhi	r4,r16,17571
81112834:	81112afc 	xorhi	r4,r16,17579
81112838:	811128f4 	orhi	r4,r16,17571
8111283c:	81112acc 	andi	r4,r16,17579
81112840:	81112aa8 	cmpgeui	r4,r16,17578
81112844:	811129b8 	rdprs	r4,r16,17574
81112848:	811128f4 	orhi	r4,r16,17571
8111284c:	811128f4 	orhi	r4,r16,17571
81112850:	811129a4 	muli	r4,r16,17574
81112854:	811128f4 	orhi	r4,r16,17571
81112858:	8111292c 	andhi	r4,r16,17572
8111285c:	811128f4 	orhi	r4,r16,17571
81112860:	811128f4 	orhi	r4,r16,17571
81112864:	81112a2c 	andhi	r4,r16,17576
81112868:	d9809d15 	stw	r6,628(sp)
8111286c:	3029883a 	mov	r20,r6
81112870:	e0800117 	ldw	r2,4(fp)
81112874:	0081aa0e 	bge	zero,r2,81112f20 <__svfscanf_r+0x9e0>
81112878:	e0800017 	ldw	r2,0(fp)
8111287c:	a0ffffc3 	ldbu	r3,-1(r20)
81112880:	11000003 	ldbu	r4,0(r2)
81112884:	20ff6e1e 	bne	r4,r3,81112640 <__reset+0xfb0f2640>
81112888:	e0c00117 	ldw	r3,4(fp)
8111288c:	10800044 	addi	r2,r2,1
81112890:	e0800015 	stw	r2,0(fp)
81112894:	18bfffc4 	addi	r2,r3,-1
81112898:	e0800115 	stw	r2,4(fp)
8111289c:	94800044 	addi	r18,r18,1
811128a0:	a00d883a 	mov	r6,r20
811128a4:	003f6206 	br	81112630 <__reset+0xfb0f2630>
811128a8:	00bfffc4 	movi	r2,-1
811128ac:	dfc0b417 	ldw	ra,720(sp)
811128b0:	df00b317 	ldw	fp,716(sp)
811128b4:	ddc0b217 	ldw	r23,712(sp)
811128b8:	dd80b117 	ldw	r22,708(sp)
811128bc:	dd40b017 	ldw	r21,704(sp)
811128c0:	dd00af17 	ldw	r20,700(sp)
811128c4:	dcc0ae17 	ldw	r19,696(sp)
811128c8:	dc80ad17 	ldw	r18,692(sp)
811128cc:	dc40ac17 	ldw	r17,688(sp)
811128d0:	dc00ab17 	ldw	r16,684(sp)
811128d4:	dec0b504 	addi	sp,sp,724
811128d8:	f800283a 	ret
811128dc:	a0800043 	ldbu	r2,1(r20)
811128e0:	3029883a 	mov	r20,r6
811128e4:	8c400414 	ori	r17,r17,16
811128e8:	10c03fcc 	andi	r3,r2,255
811128ec:	a1800044 	addi	r6,r20,1
811128f0:	20ff5e2e 	bgeu	r4,r3,8111266c <__reset+0xfb0f266c>
811128f4:	38c7883a 	add	r3,r7,r3
811128f8:	18800043 	ldbu	r2,1(r3)
811128fc:	d9809d15 	stw	r6,628(sp)
81112900:	00c00044 	movi	r3,1
81112904:	108000cc 	andi	r2,r2,3
81112908:	10c18f26 	beq	r2,r3,81112f48 <__svfscanf_r+0xa08>
8111290c:	e0800117 	ldw	r2,4(fp)
81112910:	00808716 	blt	zero,r2,81112b30 <__svfscanf_r+0x5f0>
81112914:	e00b883a 	mov	r5,fp
81112918:	b009883a 	mov	r4,r22
8111291c:	110d8cc0 	call	8110d8cc <__srefill_r>
81112920:	1001431e 	bne	r2,zero,81112e30 <__svfscanf_r+0x8f0>
81112924:	b9c00017 	ldw	r7,0(r23)
81112928:	00008106 	br	81112b30 <__svfscanf_r+0x5f0>
8111292c:	e0800117 	ldw	r2,4(fp)
81112930:	d9809d15 	stw	r6,628(sp)
81112934:	0081a30e 	bge	zero,r2,81112fc4 <__svfscanf_r+0xa84>
81112938:	00a044b4 	movhi	r2,33042
8111293c:	10a97c04 	addi	r2,r2,-23056
81112940:	02000284 	movi	r8,10
81112944:	d880a115 	stw	r2,644(sp)
81112948:	da009e15 	stw	r8,632(sp)
8111294c:	050000c4 	movi	r20,3
81112950:	e0c00017 	ldw	r3,0(fp)
81112954:	00000206 	br	81112960 <__svfscanf_r+0x420>
81112958:	18c00044 	addi	r3,r3,1
8111295c:	e0c00015 	stw	r3,0(fp)
81112960:	19000003 	ldbu	r4,0(r3)
81112964:	20803fcc 	andi	r2,r4,255
81112968:	3885883a 	add	r2,r7,r2
8111296c:	10800043 	ldbu	r2,1(r2)
81112970:	1140020c 	andi	r5,r2,8
81112974:	2801ab26 	beq	r5,zero,81113024 <__svfscanf_r+0xae4>
81112978:	e0800117 	ldw	r2,4(fp)
8111297c:	94800044 	addi	r18,r18,1
81112980:	10bfffc4 	addi	r2,r2,-1
81112984:	e0800115 	stw	r2,4(fp)
81112988:	00bff316 	blt	zero,r2,81112958 <__reset+0xfb0f2958>
8111298c:	e00b883a 	mov	r5,fp
81112990:	b009883a 	mov	r4,r22
81112994:	110d8cc0 	call	8110d8cc <__srefill_r>
81112998:	1001251e 	bne	r2,zero,81112e30 <__svfscanf_r+0x8f0>
8111299c:	b9c00017 	ldw	r7,0(r23)
811129a0:	003feb06 	br	81112950 <__reset+0xfb0f2950>
811129a4:	e0800117 	ldw	r2,4(fp)
811129a8:	d9809d15 	stw	r6,628(sp)
811129ac:	00818b0e 	bge	zero,r2,81112fdc <__svfscanf_r+0xa9c>
811129b0:	05000084 	movi	r20,2
811129b4:	003fe606 	br	81112950 <__reset+0xfb0f2950>
811129b8:	e0800117 	ldw	r2,4(fp)
811129bc:	d9809d15 	stw	r6,628(sp)
811129c0:	8c408814 	ori	r17,r17,544
811129c4:	00801d0e 	bge	zero,r2,81112a3c <__svfscanf_r+0x4fc>
811129c8:	00a044b4 	movhi	r2,33042
811129cc:	10a97c04 	addi	r2,r2,-23056
811129d0:	02000404 	movi	r8,16
811129d4:	d880a115 	stw	r2,644(sp)
811129d8:	da009e15 	stw	r8,632(sp)
811129dc:	050000c4 	movi	r20,3
811129e0:	003fdb06 	br	81112950 <__reset+0xfb0f2950>
811129e4:	e0800117 	ldw	r2,4(fp)
811129e8:	d9809d15 	stw	r6,628(sp)
811129ec:	8c400054 	ori	r17,r17,1
811129f0:	00bfc80e 	bge	zero,r2,81112914 <__reset+0xfb0f2914>
811129f4:	00e04474 	movhi	r3,33041
811129f8:	18f79104 	addi	r3,r3,-8636
811129fc:	02000284 	movi	r8,10
81112a00:	d8c0a115 	stw	r3,644(sp)
81112a04:	da009e15 	stw	r8,632(sp)
81112a08:	050000c4 	movi	r20,3
81112a0c:	003fd006 	br	81112950 <__reset+0xfb0f2950>
81112a10:	9cc002a4 	muli	r19,r19,10
81112a14:	a0800043 	ldbu	r2,1(r20)
81112a18:	3029883a 	mov	r20,r6
81112a1c:	98e7883a 	add	r19,r19,r3
81112a20:	9cfff404 	addi	r19,r19,-48
81112a24:	10c03fcc 	andi	r3,r2,255
81112a28:	003f0e06 	br	81112664 <__reset+0xfb0f2664>
81112a2c:	e0800117 	ldw	r2,4(fp)
81112a30:	d9809d15 	stw	r6,628(sp)
81112a34:	8c408014 	ori	r17,r17,512
81112a38:	00bfe316 	blt	zero,r2,811129c8 <__reset+0xfb0f29c8>
81112a3c:	e00b883a 	mov	r5,fp
81112a40:	b009883a 	mov	r4,r22
81112a44:	110d8cc0 	call	8110d8cc <__srefill_r>
81112a48:	1000f91e 	bne	r2,zero,81112e30 <__svfscanf_r+0x8f0>
81112a4c:	b9c00017 	ldw	r7,0(r23)
81112a50:	003fdd06 	br	811129c8 <__reset+0xfb0f29c8>
81112a54:	e0800117 	ldw	r2,4(fp)
81112a58:	d9809d15 	stw	r6,628(sp)
81112a5c:	8c400054 	ori	r17,r17,1
81112a60:	0080140e 	bge	zero,r2,81112ab4 <__svfscanf_r+0x574>
81112a64:	00a044b4 	movhi	r2,33042
81112a68:	10a97c04 	addi	r2,r2,-23056
81112a6c:	02000204 	movi	r8,8
81112a70:	d880a115 	stw	r2,644(sp)
81112a74:	da009e15 	stw	r8,632(sp)
81112a78:	050000c4 	movi	r20,3
81112a7c:	003fb406 	br	81112950 <__reset+0xfb0f2950>
81112a80:	a0800043 	ldbu	r2,1(r20)
81112a84:	8c400094 	ori	r17,r17,2
81112a88:	3029883a 	mov	r20,r6
81112a8c:	10c03fcc 	andi	r3,r2,255
81112a90:	003ef406 	br	81112664 <__reset+0xfb0f2664>
81112a94:	e0800117 	ldw	r2,4(fp)
81112a98:	d9809d15 	stw	r6,628(sp)
81112a9c:	0081420e 	bge	zero,r2,81112fa8 <__svfscanf_r+0xa68>
81112aa0:	05000104 	movi	r20,4
81112aa4:	003faa06 	br	81112950 <__reset+0xfb0f2950>
81112aa8:	e0800117 	ldw	r2,4(fp)
81112aac:	d9809d15 	stw	r6,628(sp)
81112ab0:	00bfec16 	blt	zero,r2,81112a64 <__reset+0xfb0f2a64>
81112ab4:	e00b883a 	mov	r5,fp
81112ab8:	b009883a 	mov	r4,r22
81112abc:	110d8cc0 	call	8110d8cc <__srefill_r>
81112ac0:	1000db1e 	bne	r2,zero,81112e30 <__svfscanf_r+0x8f0>
81112ac4:	b9c00017 	ldw	r7,0(r23)
81112ac8:	003fe606 	br	81112a64 <__reset+0xfb0f2a64>
81112acc:	d9809d15 	stw	r6,628(sp)
81112ad0:	8880040c 	andi	r2,r17,16
81112ad4:	10009c1e 	bne	r2,zero,81112d48 <__svfscanf_r+0x808>
81112ad8:	8880010c 	andi	r2,r17,4
81112adc:	10011e26 	beq	r2,zero,81112f58 <__svfscanf_r+0xa18>
81112ae0:	da009c17 	ldw	r8,624(sp)
81112ae4:	3029883a 	mov	r20,r6
81112ae8:	40800017 	ldw	r2,0(r8)
81112aec:	42000104 	addi	r8,r8,4
81112af0:	da009c15 	stw	r8,624(sp)
81112af4:	1480000d 	sth	r18,0(r2)
81112af8:	003ecc06 	br	8111262c <__reset+0xfb0f262c>
81112afc:	a0c00043 	ldbu	r3,1(r20)
81112b00:	19410c26 	beq	r3,r5,81112f34 <__svfscanf_r+0x9f4>
81112b04:	8c400054 	ori	r17,r17,1
81112b08:	3029883a 	mov	r20,r6
81112b0c:	003ed506 	br	81112664 <__reset+0xfb0f2664>
81112b10:	a0800043 	ldbu	r2,1(r20)
81112b14:	8c400114 	ori	r17,r17,4
81112b18:	3029883a 	mov	r20,r6
81112b1c:	10c03fcc 	andi	r3,r2,255
81112b20:	003ed006 	br	81112664 <__reset+0xfb0f2664>
81112b24:	e0800117 	ldw	r2,4(fp)
81112b28:	d9809d15 	stw	r6,628(sp)
81112b2c:	00bf790e 	bge	zero,r2,81112914 <__reset+0xfb0f2914>
81112b30:	00a04474 	movhi	r2,33041
81112b34:	10b79104 	addi	r2,r2,-8636
81112b38:	02000284 	movi	r8,10
81112b3c:	d880a115 	stw	r2,644(sp)
81112b40:	da009e15 	stw	r8,632(sp)
81112b44:	050000c4 	movi	r20,3
81112b48:	003f8106 	br	81112950 <__reset+0xfb0f2950>
81112b4c:	e0800117 	ldw	r2,4(fp)
81112b50:	d9809d15 	stw	r6,628(sp)
81112b54:	0080c40e 	bge	zero,r2,81112e68 <__svfscanf_r+0x928>
81112b58:	9800011e 	bne	r19,zero,81112b60 <__svfscanf_r+0x620>
81112b5c:	04c00044 	movi	r19,1
81112b60:	8880004c 	andi	r2,r17,1
81112b64:	1000441e 	bne	r2,zero,81112c78 <__svfscanf_r+0x738>
81112b68:	8c40040c 	andi	r17,r17,16
81112b6c:	8800da26 	beq	r17,zero,81112ed8 <__svfscanf_r+0x998>
81112b70:	0021883a 	mov	r16,zero
81112b74:	00000806 	br	81112b98 <__svfscanf_r+0x658>
81112b78:	1887883a 	add	r3,r3,r2
81112b7c:	e00b883a 	mov	r5,fp
81112b80:	b009883a 	mov	r4,r22
81112b84:	e0c00015 	stw	r3,0(fp)
81112b88:	80a1883a 	add	r16,r16,r2
81112b8c:	98a7c83a 	sub	r19,r19,r2
81112b90:	110d8cc0 	call	8110d8cc <__srefill_r>
81112b94:	1000ca1e 	bne	r2,zero,81112ec0 <__svfscanf_r+0x980>
81112b98:	e0800117 	ldw	r2,4(fp)
81112b9c:	e0c00017 	ldw	r3,0(fp)
81112ba0:	14fff516 	blt	r2,r19,81112b78 <__reset+0xfb0f2b78>
81112ba4:	14c5c83a 	sub	r2,r2,r19
81112ba8:	1cd5883a 	add	r10,r3,r19
81112bac:	84e1883a 	add	r16,r16,r19
81112bb0:	e0800115 	stw	r2,4(fp)
81112bb4:	e2800015 	stw	r10,0(fp)
81112bb8:	dd009d17 	ldw	r20,628(sp)
81112bbc:	9425883a 	add	r18,r18,r16
81112bc0:	a00d883a 	mov	r6,r20
81112bc4:	003e9a06 	br	81112630 <__reset+0xfb0f2630>
81112bc8:	300b883a 	mov	r5,r6
81112bcc:	d9005884 	addi	r4,sp,354
81112bd0:	d9809d15 	stw	r6,628(sp)
81112bd4:	11189e80 	call	811189e8 <__sccl>
81112bd8:	1029883a 	mov	r20,r2
81112bdc:	e0800117 	ldw	r2,4(fp)
81112be0:	0081050e 	bge	zero,r2,81112ff8 <__svfscanf_r+0xab8>
81112be4:	e1000017 	ldw	r4,0(fp)
81112be8:	20800003 	ldbu	r2,0(r4)
81112bec:	98005926 	beq	r19,zero,81112d54 <__svfscanf_r+0x814>
81112bf0:	8c40040c 	andi	r17,r17,16
81112bf4:	88005a26 	beq	r17,zero,81112d60 <__svfscanf_r+0x820>
81112bf8:	9823883a 	mov	r17,r19
81112bfc:	0021883a 	mov	r16,zero
81112c00:	00000106 	br	81112c08 <__svfscanf_r+0x6c8>
81112c04:	20800003 	ldbu	r2,0(r4)
81112c08:	10803fcc 	andi	r2,r2,255
81112c0c:	d8c05884 	addi	r3,sp,354
81112c10:	1885883a 	add	r2,r3,r2
81112c14:	10800007 	ldb	r2,0(r2)
81112c18:	1000ad26 	beq	r2,zero,81112ed0 <__svfscanf_r+0x990>
81112c1c:	e0800117 	ldw	r2,4(fp)
81112c20:	21000044 	addi	r4,r4,1
81112c24:	84000044 	addi	r16,r16,1
81112c28:	10bfffc4 	addi	r2,r2,-1
81112c2c:	e0800115 	stw	r2,4(fp)
81112c30:	e1000015 	stw	r4,0(fp)
81112c34:	84c0a026 	beq	r16,r19,81112eb8 <__svfscanf_r+0x978>
81112c38:	00bff216 	blt	zero,r2,81112c04 <__reset+0xfb0f2c04>
81112c3c:	e00b883a 	mov	r5,fp
81112c40:	b009883a 	mov	r4,r22
81112c44:	110d8cc0 	call	8110d8cc <__srefill_r>
81112c48:	10009a1e 	bne	r2,zero,81112eb4 <__svfscanf_r+0x974>
81112c4c:	e1000017 	ldw	r4,0(fp)
81112c50:	003fec06 	br	81112c04 <__reset+0xfb0f2c04>
81112c54:	e0800117 	ldw	r2,4(fp)
81112c58:	d9809d15 	stw	r6,628(sp)
81112c5c:	0080eb0e 	bge	zero,r2,8111300c <__svfscanf_r+0xacc>
81112c60:	00a04474 	movhi	r2,33041
81112c64:	10b79104 	addi	r2,r2,-8636
81112c68:	d880a115 	stw	r2,644(sp)
81112c6c:	d8009e15 	stw	zero,632(sp)
81112c70:	050000c4 	movi	r20,3
81112c74:	003f3606 	br	81112950 <__reset+0xfb0f2950>
81112c78:	dd409904 	addi	r21,sp,612
81112c7c:	8c40040c 	andi	r17,r17,16
81112c80:	01800204 	movi	r6,8
81112c84:	000b883a 	mov	r5,zero
81112c88:	a809883a 	mov	r4,r21
81112c8c:	dc409f15 	stw	r17,636(sp)
81112c90:	110d5c80 	call	8110d5c8 <memset>
81112c94:	dc409f17 	ldw	r17,636(sp)
81112c98:	88006e26 	beq	r17,zero,81112e54 <__svfscanf_r+0x914>
81112c9c:	0029883a 	mov	r20,zero
81112ca0:	0023883a 	mov	r17,zero
81112ca4:	1116d340 	call	81116d34 <__locale_mb_cur_max>
81112ca8:	14406126 	beq	r2,r17,81112e30 <__svfscanf_r+0x8f0>
81112cac:	e0800017 	ldw	r2,0(fp)
81112cb0:	e0c00117 	ldw	r3,4(fp)
81112cb4:	d9000104 	addi	r4,sp,4
81112cb8:	12000003 	ldbu	r8,0(r2)
81112cbc:	18ffffc4 	addi	r3,r3,-1
81112cc0:	10800044 	addi	r2,r2,1
81112cc4:	e0c00115 	stw	r3,4(fp)
81112cc8:	e0800015 	stw	r2,0(fp)
81112ccc:	8c000044 	addi	r16,r17,1
81112cd0:	dd400015 	stw	r21,0(sp)
81112cd4:	2463883a 	add	r17,r4,r17
81112cd8:	200d883a 	mov	r6,r4
81112cdc:	a00b883a 	mov	r5,r20
81112ce0:	800f883a 	mov	r7,r16
81112ce4:	b009883a 	mov	r4,r22
81112ce8:	8a000005 	stb	r8,0(r17)
81112cec:	1116de80 	call	81116de8 <_mbrtowc_r>
81112cf0:	017fffc4 	movi	r5,-1
81112cf4:	11404e26 	beq	r2,r5,81112e30 <__svfscanf_r+0x8f0>
81112cf8:	1000601e 	bne	r2,zero,81112e7c <__svfscanf_r+0x93c>
81112cfc:	da009f17 	ldw	r8,636(sp)
81112d00:	4000641e 	bne	r8,zero,81112e94 <__svfscanf_r+0x954>
81112d04:	a0000015 	stw	zero,0(r20)
81112d08:	9425883a 	add	r18,r18,r16
81112d0c:	9967883a 	add	r19,r19,r5
81112d10:	a5000104 	addi	r20,r20,4
81112d14:	e0800117 	ldw	r2,4(fp)
81112d18:	0023883a 	mov	r17,zero
81112d1c:	00804b16 	blt	zero,r2,81112e4c <__svfscanf_r+0x90c>
81112d20:	e00b883a 	mov	r5,fp
81112d24:	b009883a 	mov	r4,r22
81112d28:	110d8cc0 	call	8110d8cc <__srefill_r>
81112d2c:	10004726 	beq	r2,zero,81112e4c <__svfscanf_r+0x90c>
81112d30:	88003f1e 	bne	r17,zero,81112e30 <__svfscanf_r+0x8f0>
81112d34:	d8c09f17 	ldw	r3,636(sp)
81112d38:	1800031e 	bne	r3,zero,81112d48 <__svfscanf_r+0x808>
81112d3c:	da00a017 	ldw	r8,640(sp)
81112d40:	42000044 	addi	r8,r8,1
81112d44:	da00a015 	stw	r8,640(sp)
81112d48:	dd009d17 	ldw	r20,628(sp)
81112d4c:	a00d883a 	mov	r6,r20
81112d50:	003e3706 	br	81112630 <__reset+0xfb0f2630>
81112d54:	8c40040c 	andi	r17,r17,16
81112d58:	04ffffc4 	movi	r19,-1
81112d5c:	883fa61e 	bne	r17,zero,81112bf8 <__reset+0xfb0f2bf8>
81112d60:	da009c17 	ldw	r8,624(sp)
81112d64:	9abfffc4 	addi	r10,r19,-1
81112d68:	44000017 	ldw	r16,0(r8)
81112d6c:	44400104 	addi	r17,r8,4
81112d70:	8007883a 	mov	r3,r16
81112d74:	82ab883a 	add	r21,r16,r10
81112d78:	00000306 	br	81112d88 <__svfscanf_r+0x848>
81112d7c:	e1000017 	ldw	r4,0(fp)
81112d80:	9807883a 	mov	r3,r19
81112d84:	20800003 	ldbu	r2,0(r4)
81112d88:	10803fcc 	andi	r2,r2,255
81112d8c:	d9405884 	addi	r5,sp,354
81112d90:	2885883a 	add	r2,r5,r2
81112d94:	10800007 	ldb	r2,0(r2)
81112d98:	10004b26 	beq	r2,zero,81112ec8 <__svfscanf_r+0x988>
81112d9c:	e0800117 	ldw	r2,4(fp)
81112da0:	21400044 	addi	r5,r4,1
81112da4:	e1400015 	stw	r5,0(fp)
81112da8:	10bfffc4 	addi	r2,r2,-1
81112dac:	e0800115 	stw	r2,4(fp)
81112db0:	20800003 	ldbu	r2,0(r4)
81112db4:	1cc00044 	addi	r19,r3,1
81112db8:	18800005 	stb	r2,0(r3)
81112dbc:	1d400726 	beq	r3,r21,81112ddc <__svfscanf_r+0x89c>
81112dc0:	e0800117 	ldw	r2,4(fp)
81112dc4:	00bfed16 	blt	zero,r2,81112d7c <__reset+0xfb0f2d7c>
81112dc8:	e00b883a 	mov	r5,fp
81112dcc:	b009883a 	mov	r4,r22
81112dd0:	110d8cc0 	call	8110d8cc <__srefill_r>
81112dd4:	103fe926 	beq	r2,zero,81112d7c <__reset+0xfb0f2d7c>
81112dd8:	84c01526 	beq	r16,r19,81112e30 <__svfscanf_r+0x8f0>
81112ddc:	9c21c83a 	sub	r16,r19,r16
81112de0:	803e1726 	beq	r16,zero,81112640 <__reset+0xfb0f2640>
81112de4:	da00a017 	ldw	r8,640(sp)
81112de8:	98000005 	stb	zero,0(r19)
81112dec:	dc409c15 	stw	r17,624(sp)
81112df0:	42000044 	addi	r8,r8,1
81112df4:	da00a015 	stw	r8,640(sp)
81112df8:	9425883a 	add	r18,r18,r16
81112dfc:	a00d883a 	mov	r6,r20
81112e00:	003e0b06 	br	81112630 <__reset+0xfb0f2630>
81112e04:	017fff84 	movi	r5,-2
81112e08:	11439b1e 	bne	r2,r5,81113c78 <__svfscanf_r+0x1738>
81112e0c:	8821883a 	mov	r16,r17
81112e10:	e0800117 	ldw	r2,4(fp)
81112e14:	0082e516 	blt	zero,r2,811139ac <__svfscanf_r+0x146c>
81112e18:	e00b883a 	mov	r5,fp
81112e1c:	b009883a 	mov	r4,r22
81112e20:	110d8cc0 	call	8110d8cc <__srefill_r>
81112e24:	1002e126 	beq	r2,zero,811139ac <__svfscanf_r+0x146c>
81112e28:	dc409f17 	ldw	r17,636(sp)
81112e2c:	8002e826 	beq	r16,zero,811139d0 <__svfscanf_r+0x1490>
81112e30:	da00a017 	ldw	r8,640(sp)
81112e34:	403e9c26 	beq	r8,zero,811128a8 <__reset+0xfb0f28a8>
81112e38:	e080030b 	ldhu	r2,12(fp)
81112e3c:	1080100c 	andi	r2,r2,64
81112e40:	103e991e 	bne	r2,zero,811128a8 <__reset+0xfb0f28a8>
81112e44:	4005883a 	mov	r2,r8
81112e48:	003e9806 	br	811128ac <__reset+0xfb0f28ac>
81112e4c:	983f951e 	bne	r19,zero,81112ca4 <__reset+0xfb0f2ca4>
81112e50:	003fb806 	br	81112d34 <__reset+0xfb0f2d34>
81112e54:	da009c17 	ldw	r8,624(sp)
81112e58:	45000017 	ldw	r20,0(r8)
81112e5c:	42000104 	addi	r8,r8,4
81112e60:	da009c15 	stw	r8,624(sp)
81112e64:	003f8e06 	br	81112ca0 <__reset+0xfb0f2ca0>
81112e68:	e00b883a 	mov	r5,fp
81112e6c:	b009883a 	mov	r4,r22
81112e70:	110d8cc0 	call	8110d8cc <__srefill_r>
81112e74:	103f3826 	beq	r2,zero,81112b58 <__reset+0xfb0f2b58>
81112e78:	003fed06 	br	81112e30 <__reset+0xfb0f2e30>
81112e7c:	00ffff84 	movi	r3,-2
81112e80:	10c0071e 	bne	r2,r3,81112ea0 <__svfscanf_r+0x960>
81112e84:	e0800117 	ldw	r2,4(fp)
81112e88:	8023883a 	mov	r17,r16
81112e8c:	00bf8516 	blt	zero,r2,81112ca4 <__reset+0xfb0f2ca4>
81112e90:	003fa306 	br	81112d20 <__reset+0xfb0f2d20>
81112e94:	9425883a 	add	r18,r18,r16
81112e98:	9cffffc4 	addi	r19,r19,-1
81112e9c:	003f9d06 	br	81112d14 <__reset+0xfb0f2d14>
81112ea0:	da009f17 	ldw	r8,636(sp)
81112ea4:	9425883a 	add	r18,r18,r16
81112ea8:	9cffffc4 	addi	r19,r19,-1
81112eac:	403f9826 	beq	r8,zero,81112d10 <__reset+0xfb0f2d10>
81112eb0:	003f9806 	br	81112d14 <__reset+0xfb0f2d14>
81112eb4:	8023883a 	mov	r17,r16
81112eb8:	8821883a 	mov	r16,r17
81112ebc:	003fce06 	br	81112df8 <__reset+0xfb0f2df8>
81112ec0:	803f3d1e 	bne	r16,zero,81112bb8 <__reset+0xfb0f2bb8>
81112ec4:	003fda06 	br	81112e30 <__reset+0xfb0f2e30>
81112ec8:	1827883a 	mov	r19,r3
81112ecc:	003fc306 	br	81112ddc <__reset+0xfb0f2ddc>
81112ed0:	803fc91e 	bne	r16,zero,81112df8 <__reset+0xfb0f2df8>
81112ed4:	003dda06 	br	81112640 <__reset+0xfb0f2640>
81112ed8:	da009c17 	ldw	r8,624(sp)
81112edc:	df000015 	stw	fp,0(sp)
81112ee0:	980f883a 	mov	r7,r19
81112ee4:	41400017 	ldw	r5,0(r8)
81112ee8:	01800044 	movi	r6,1
81112eec:	b009883a 	mov	r4,r22
81112ef0:	1115f500 	call	81115f50 <_fread_r>
81112ef4:	da009c17 	ldw	r8,624(sp)
81112ef8:	40c00104 	addi	r3,r8,4
81112efc:	103fcc26 	beq	r2,zero,81112e30 <__reset+0xfb0f2e30>
81112f00:	da00a017 	ldw	r8,640(sp)
81112f04:	dd009d17 	ldw	r20,628(sp)
81112f08:	90a5883a 	add	r18,r18,r2
81112f0c:	42000044 	addi	r8,r8,1
81112f10:	da00a015 	stw	r8,640(sp)
81112f14:	d8c09c15 	stw	r3,624(sp)
81112f18:	a00d883a 	mov	r6,r20
81112f1c:	003dc406 	br	81112630 <__reset+0xfb0f2630>
81112f20:	e00b883a 	mov	r5,fp
81112f24:	b009883a 	mov	r4,r22
81112f28:	110d8cc0 	call	8110d8cc <__srefill_r>
81112f2c:	103e5226 	beq	r2,zero,81112878 <__reset+0xfb0f2878>
81112f30:	003fbf06 	br	81112e30 <__reset+0xfb0f2e30>
81112f34:	a0800083 	ldbu	r2,2(r20)
81112f38:	8c400094 	ori	r17,r17,2
81112f3c:	a5000084 	addi	r20,r20,2
81112f40:	10c03fcc 	andi	r3,r2,255
81112f44:	003dc706 	br	81112664 <__reset+0xfb0f2664>
81112f48:	e0800117 	ldw	r2,4(fp)
81112f4c:	88e2b03a 	or	r17,r17,r3
81112f50:	00bef716 	blt	zero,r2,81112b30 <__reset+0xfb0f2b30>
81112f54:	003e6f06 	br	81112914 <__reset+0xfb0f2914>
81112f58:	8880004c 	andi	r2,r17,1
81112f5c:	10000b1e 	bne	r2,zero,81112f8c <__svfscanf_r+0xa4c>
81112f60:	8c40008c 	andi	r17,r17,2
81112f64:	88000926 	beq	r17,zero,81112f8c <__svfscanf_r+0xa4c>
81112f68:	da009c17 	ldw	r8,624(sp)
81112f6c:	9007d7fa 	srai	r3,r18,31
81112f70:	dd009d17 	ldw	r20,628(sp)
81112f74:	40800017 	ldw	r2,0(r8)
81112f78:	42000104 	addi	r8,r8,4
81112f7c:	da009c15 	stw	r8,624(sp)
81112f80:	14800015 	stw	r18,0(r2)
81112f84:	10c00115 	stw	r3,4(r2)
81112f88:	003da806 	br	8111262c <__reset+0xfb0f262c>
81112f8c:	da009c17 	ldw	r8,624(sp)
81112f90:	dd009d17 	ldw	r20,628(sp)
81112f94:	40800017 	ldw	r2,0(r8)
81112f98:	42000104 	addi	r8,r8,4
81112f9c:	da009c15 	stw	r8,624(sp)
81112fa0:	14800015 	stw	r18,0(r2)
81112fa4:	003da106 	br	8111262c <__reset+0xfb0f262c>
81112fa8:	e00b883a 	mov	r5,fp
81112fac:	b009883a 	mov	r4,r22
81112fb0:	110d8cc0 	call	8110d8cc <__srefill_r>
81112fb4:	103f9e1e 	bne	r2,zero,81112e30 <__reset+0xfb0f2e30>
81112fb8:	b9c00017 	ldw	r7,0(r23)
81112fbc:	05000104 	movi	r20,4
81112fc0:	003e6306 	br	81112950 <__reset+0xfb0f2950>
81112fc4:	e00b883a 	mov	r5,fp
81112fc8:	b009883a 	mov	r4,r22
81112fcc:	110d8cc0 	call	8110d8cc <__srefill_r>
81112fd0:	103f971e 	bne	r2,zero,81112e30 <__reset+0xfb0f2e30>
81112fd4:	b9c00017 	ldw	r7,0(r23)
81112fd8:	003e5706 	br	81112938 <__reset+0xfb0f2938>
81112fdc:	e00b883a 	mov	r5,fp
81112fe0:	b009883a 	mov	r4,r22
81112fe4:	110d8cc0 	call	8110d8cc <__srefill_r>
81112fe8:	103f911e 	bne	r2,zero,81112e30 <__reset+0xfb0f2e30>
81112fec:	b9c00017 	ldw	r7,0(r23)
81112ff0:	05000084 	movi	r20,2
81112ff4:	003e5606 	br	81112950 <__reset+0xfb0f2950>
81112ff8:	e00b883a 	mov	r5,fp
81112ffc:	b009883a 	mov	r4,r22
81113000:	110d8cc0 	call	8110d8cc <__srefill_r>
81113004:	103ef726 	beq	r2,zero,81112be4 <__reset+0xfb0f2be4>
81113008:	003f8906 	br	81112e30 <__reset+0xfb0f2e30>
8111300c:	e00b883a 	mov	r5,fp
81113010:	b009883a 	mov	r4,r22
81113014:	110d8cc0 	call	8110d8cc <__srefill_r>
81113018:	103f851e 	bne	r2,zero,81112e30 <__reset+0xfb0f2e30>
8111301c:	b9c00017 	ldw	r7,0(r23)
81113020:	003f0f06 	br	81112c60 <__reset+0xfb0f2c60>
81113024:	014000c4 	movi	r5,3
81113028:	a1414a26 	beq	r20,r5,81113554 <__svfscanf_r+0x1014>
8111302c:	01000104 	movi	r4,4
81113030:	a101f11e 	bne	r20,r4,811137f8 <__svfscanf_r+0x12b8>
81113034:	b009883a 	mov	r4,r22
81113038:	1116d580 	call	81116d58 <_localeconv_r>
8111303c:	10800017 	ldw	r2,0(r2)
81113040:	98ffffc4 	addi	r3,r19,-1
81113044:	d880a315 	stw	r2,652(sp)
81113048:	00805704 	movi	r2,348
8111304c:	10c21e2e 	bgeu	r2,r3,811138c8 <__svfscanf_r+0x1388>
81113050:	9cffa8c4 	addi	r19,r19,-349
81113054:	dcc0a215 	stw	r19,648(sp)
81113058:	04c05744 	movi	r19,349
8111305c:	8d01e014 	ori	r20,r17,1920
81113060:	0023883a 	mov	r17,zero
81113064:	dc000104 	addi	r16,sp,4
81113068:	8805883a 	mov	r2,r17
8111306c:	0019883a 	mov	r12,zero
81113070:	8023883a 	mov	r17,r16
81113074:	b007883a 	mov	r3,r22
81113078:	9821883a 	mov	r16,r19
8111307c:	002b883a 	mov	r21,zero
81113080:	d800a515 	stw	zero,660(sp)
81113084:	d800a415 	stw	zero,656(sp)
81113088:	d8009f15 	stw	zero,636(sp)
8111308c:	01c01384 	movi	r7,78
81113090:	602d883a 	mov	r22,r12
81113094:	1027883a 	mov	r19,r2
81113098:	e1000017 	ldw	r4,0(fp)
8111309c:	21400003 	ldbu	r5,0(r4)
811130a0:	28bff544 	addi	r2,r5,-43
811130a4:	10803fcc 	andi	r2,r2,255
811130a8:	38810e36 	bltu	r7,r2,811134e4 <__svfscanf_r+0xfa4>
811130ac:	100490ba 	slli	r2,r2,2
811130b0:	01a04474 	movhi	r6,33041
811130b4:	318c3104 	addi	r6,r6,12484
811130b8:	1185883a 	add	r2,r2,r6
811130bc:	10800017 	ldw	r2,0(r2)
811130c0:	1000683a 	jmp	r2
811130c4:	811133bc 	xorhi	r4,r16,17614
811130c8:	811134e4 	muli	r4,r16,17619
811130cc:	811133bc 	xorhi	r4,r16,17614
811130d0:	811134e4 	muli	r4,r16,17619
811130d4:	811134e4 	muli	r4,r16,17619
811130d8:	81113390 	cmplti	r4,r16,17614
811130dc:	81113200 	call	88111320 <__reset+0x20f1320>
811130e0:	81113200 	call	88111320 <__reset+0x20f1320>
811130e4:	81113200 	call	88111320 <__reset+0x20f1320>
811130e8:	81113200 	call	88111320 <__reset+0x20f1320>
811130ec:	81113200 	call	88111320 <__reset+0x20f1320>
811130f0:	81113200 	call	88111320 <__reset+0x20f1320>
811130f4:	81113200 	call	88111320 <__reset+0x20f1320>
811130f8:	81113200 	call	88111320 <__reset+0x20f1320>
811130fc:	81113200 	call	88111320 <__reset+0x20f1320>
81113100:	811134e4 	muli	r4,r16,17619
81113104:	811134e4 	muli	r4,r16,17619
81113108:	811134e4 	muli	r4,r16,17619
8111310c:	811134e4 	muli	r4,r16,17619
81113110:	811134e4 	muli	r4,r16,17619
81113114:	811134e4 	muli	r4,r16,17619
81113118:	811134e4 	muli	r4,r16,17619
8111311c:	811134d4 	ori	r4,r16,17619
81113120:	811134e4 	muli	r4,r16,17619
81113124:	811134e4 	muli	r4,r16,17619
81113128:	811134e4 	muli	r4,r16,17619
8111312c:	81113490 	cmplti	r4,r16,17618
81113130:	81113474 	orhi	r4,r16,17617
81113134:	811134e4 	muli	r4,r16,17619
81113138:	811134e4 	muli	r4,r16,17619
8111313c:	81113440 	call	88111344 <__reset+0x20f1344>
81113140:	811134e4 	muli	r4,r16,17619
81113144:	811134e4 	muli	r4,r16,17619
81113148:	811134e4 	muli	r4,r16,17619
8111314c:	811134e4 	muli	r4,r16,17619
81113150:	81113408 	cmpgei	r4,r16,17616
81113154:	811134e4 	muli	r4,r16,17619
81113158:	811134e4 	muli	r4,r16,17619
8111315c:	811134e4 	muli	r4,r16,17619
81113160:	811134e4 	muli	r4,r16,17619
81113164:	811134e4 	muli	r4,r16,17619
81113168:	811133ec 	andhi	r4,r16,17615
8111316c:	811134e4 	muli	r4,r16,17619
81113170:	811134e4 	muli	r4,r16,17619
81113174:	811134e4 	muli	r4,r16,17619
81113178:	811134e4 	muli	r4,r16,17619
8111317c:	811133d0 	cmplti	r4,r16,17615
81113180:	811134e4 	muli	r4,r16,17619
81113184:	811134e4 	muli	r4,r16,17619
81113188:	811134e4 	muli	r4,r16,17619
8111318c:	811134e4 	muli	r4,r16,17619
81113190:	811134e4 	muli	r4,r16,17619
81113194:	811134e4 	muli	r4,r16,17619
81113198:	811134e4 	muli	r4,r16,17619
8111319c:	811134d4 	ori	r4,r16,17619
811131a0:	811134e4 	muli	r4,r16,17619
811131a4:	811134e4 	muli	r4,r16,17619
811131a8:	811134e4 	muli	r4,r16,17619
811131ac:	81113490 	cmplti	r4,r16,17618
811131b0:	81113474 	orhi	r4,r16,17617
811131b4:	811134e4 	muli	r4,r16,17619
811131b8:	811134e4 	muli	r4,r16,17619
811131bc:	81113440 	call	88111344 <__reset+0x20f1344>
811131c0:	811134e4 	muli	r4,r16,17619
811131c4:	811134e4 	muli	r4,r16,17619
811131c8:	811134e4 	muli	r4,r16,17619
811131cc:	811134e4 	muli	r4,r16,17619
811131d0:	81113408 	cmpgei	r4,r16,17616
811131d4:	811134e4 	muli	r4,r16,17619
811131d8:	811134e4 	muli	r4,r16,17619
811131dc:	811134e4 	muli	r4,r16,17619
811131e0:	811134e4 	muli	r4,r16,17619
811131e4:	811134e4 	muli	r4,r16,17619
811131e8:	811133ec 	andhi	r4,r16,17615
811131ec:	811134e4 	muli	r4,r16,17619
811131f0:	811134e4 	muli	r4,r16,17619
811131f4:	811134e4 	muli	r4,r16,17619
811131f8:	811134e4 	muli	r4,r16,17619
811131fc:	811133d0 	cmplti	r4,r16,17615
81113200:	a8803fcc 	andi	r2,r21,255
81113204:	1080201c 	xori	r2,r2,128
81113208:	10bfe004 	addi	r2,r2,-128
8111320c:	b085883a 	add	r2,r22,r2
81113210:	10000d1e 	bne	r2,zero,81113248 <__svfscanf_r+0xd08>
81113214:	00bf9fc4 	movi	r2,-385
81113218:	a0a8703a 	and	r20,r20,r2
8111321c:	89400005 	stb	r5,0(r17)
81113220:	8c400044 	addi	r17,r17,1
81113224:	e0800117 	ldw	r2,4(fp)
81113228:	843fffc4 	addi	r16,r16,-1
8111322c:	94800044 	addi	r18,r18,1
81113230:	10bfffc4 	addi	r2,r2,-1
81113234:	e0800115 	stw	r2,4(fp)
81113238:	0080b40e 	bge	zero,r2,8111350c <__svfscanf_r+0xfcc>
8111323c:	21000044 	addi	r4,r4,1
81113240:	e1000015 	stw	r4,0(fp)
81113244:	803f941e 	bne	r16,zero,81113098 <__reset+0xfb0f3098>
81113248:	8821883a 	mov	r16,r17
8111324c:	b019883a 	mov	r12,r22
81113250:	9823883a 	mov	r17,r19
81113254:	182d883a 	mov	r22,r3
81113258:	9801961e 	bne	r19,zero,811138b4 <__svfscanf_r+0x1374>
8111325c:	633fffc4 	addi	r12,r12,-1
81113260:	00800044 	movi	r2,1
81113264:	1302882e 	bgeu	r2,r12,81113c88 <__svfscanf_r+0x1748>
81113268:	a8803fcc 	andi	r2,r21,255
8111326c:	1080201c 	xori	r2,r2,128
81113270:	10bfe004 	addi	r2,r2,-128
81113274:	113fffc4 	addi	r4,r2,-1
81113278:	01400184 	movi	r5,6
8111327c:	29001136 	bltu	r5,r4,811132c4 <__svfscanf_r+0xd84>
81113280:	01000084 	movi	r4,2
81113284:	2082900e 	bge	r4,r2,81113cc8 <__svfscanf_r+0x1788>
81113288:	00c000c4 	movi	r3,3
8111328c:	10c00d26 	beq	r2,r3,811132c4 <__svfscanf_r+0xd84>
81113290:	9425c83a 	sub	r18,r18,r16
81113294:	1827883a 	mov	r19,r3
81113298:	843fffc4 	addi	r16,r16,-1
8111329c:	81400007 	ldb	r5,0(r16)
811132a0:	e00d883a 	mov	r6,fp
811132a4:	b009883a 	mov	r4,r22
811132a8:	111c0100 	call	8111c010 <_ungetc_r>
811132ac:	a8bfffc4 	addi	r2,r21,-1
811132b0:	10c03fcc 	andi	r3,r2,255
811132b4:	8493883a 	add	r9,r16,r18
811132b8:	102b883a 	mov	r21,r2
811132bc:	98fff636 	bltu	r19,r3,81113298 <__reset+0xfb0f3298>
811132c0:	4825883a 	mov	r18,r9
811132c4:	a080400c 	andi	r2,r20,256
811132c8:	10001426 	beq	r2,zero,8111331c <__svfscanf_r+0xddc>
811132cc:	a081000c 	andi	r2,r20,1024
811132d0:	1002571e 	bne	r2,zero,81113c30 <__svfscanf_r+0x16f0>
811132d4:	817fffc7 	ldb	r5,-1(r16)
811132d8:	00801944 	movi	r2,101
811132dc:	84ffffc4 	addi	r19,r16,-1
811132e0:	957fffc4 	addi	r21,r18,-1
811132e4:	28800826 	beq	r5,r2,81113308 <__svfscanf_r+0xdc8>
811132e8:	00801144 	movi	r2,69
811132ec:	28800626 	beq	r5,r2,81113308 <__svfscanf_r+0xdc8>
811132f0:	e00d883a 	mov	r6,fp
811132f4:	b009883a 	mov	r4,r22
811132f8:	111c0100 	call	8111c010 <_ungetc_r>
811132fc:	817fff87 	ldb	r5,-2(r16)
81113300:	84ffff84 	addi	r19,r16,-2
81113304:	957fff84 	addi	r21,r18,-2
81113308:	e00d883a 	mov	r6,fp
8111330c:	b009883a 	mov	r4,r22
81113310:	111c0100 	call	8111c010 <_ungetc_r>
81113314:	a825883a 	mov	r18,r21
81113318:	9821883a 	mov	r16,r19
8111331c:	a080040c 	andi	r2,r20,16
81113320:	103e891e 	bne	r2,zero,81112d48 <__reset+0xfb0f2d48>
81113324:	80000005 	stb	zero,0(r16)
81113328:	a081800c 	andi	r2,r20,1536
8111332c:	01010004 	movi	r4,1024
81113330:	1101dd26 	beq	r2,r4,81113aa8 <__svfscanf_r+0x1568>
81113334:	da00a417 	ldw	r8,656(sp)
81113338:	4001e71e 	bne	r8,zero,81113ad8 <__svfscanf_r+0x1598>
8111333c:	000d883a 	mov	r6,zero
81113340:	d9400104 	addi	r5,sp,4
81113344:	b009883a 	mov	r4,r22
81113348:	1118c000 	call	81118c00 <_strtod_r>
8111334c:	1021883a 	mov	r16,r2
81113350:	a080004c 	andi	r2,r20,1
81113354:	1000021e 	bne	r2,zero,81113360 <__svfscanf_r+0xe20>
81113358:	a2c0008c 	andi	r11,r20,2
8111335c:	5801e826 	beq	r11,zero,81113b00 <__svfscanf_r+0x15c0>
81113360:	da009c17 	ldw	r8,624(sp)
81113364:	40800017 	ldw	r2,0(r8)
81113368:	42000104 	addi	r8,r8,4
8111336c:	da009c15 	stw	r8,624(sp)
81113370:	14000015 	stw	r16,0(r2)
81113374:	10c00115 	stw	r3,4(r2)
81113378:	da00a017 	ldw	r8,640(sp)
8111337c:	dd009d17 	ldw	r20,628(sp)
81113380:	42000044 	addi	r8,r8,1
81113384:	da00a015 	stw	r8,640(sp)
81113388:	a00d883a 	mov	r6,r20
8111338c:	003ca806 	br	81112630 <__reset+0xfb0f2630>
81113390:	a080400c 	andi	r2,r20,256
81113394:	103f9a26 	beq	r2,zero,81113200 <__reset+0xfb0f3200>
81113398:	da00a217 	ldw	r8,648(sp)
8111339c:	00bfdfc4 	movi	r2,-129
811133a0:	a0a8703a 	and	r20,r20,r2
811133a4:	9cc00044 	addi	r19,r19,1
811133a8:	403f9e26 	beq	r8,zero,81113224 <__reset+0xfb0f3224>
811133ac:	423fffc4 	addi	r8,r8,-1
811133b0:	da00a215 	stw	r8,648(sp)
811133b4:	84000044 	addi	r16,r16,1
811133b8:	003f9a06 	br	81113224 <__reset+0xfb0f3224>
811133bc:	a080200c 	andi	r2,r20,128
811133c0:	103fa126 	beq	r2,zero,81113248 <__reset+0xfb0f3248>
811133c4:	00bfdfc4 	movi	r2,-129
811133c8:	a0a8703a 	and	r20,r20,r2
811133cc:	003f9306 	br	8111321c <__reset+0xfb0f321c>
811133d0:	a8803fcc 	andi	r2,r21,255
811133d4:	1080201c 	xori	r2,r2,128
811133d8:	10bfe004 	addi	r2,r2,-128
811133dc:	020001c4 	movi	r8,7
811133e0:	123f991e 	bne	r2,r8,81113248 <__reset+0xfb0f3248>
811133e4:	05400204 	movi	r21,8
811133e8:	003f8c06 	br	8111321c <__reset+0xfb0f321c>
811133ec:	a8803fcc 	andi	r2,r21,255
811133f0:	1080201c 	xori	r2,r2,128
811133f4:	10bfe004 	addi	r2,r2,-128
811133f8:	01800184 	movi	r6,6
811133fc:	11bf921e 	bne	r2,r6,81113248 <__reset+0xfb0f3248>
81113400:	054001c4 	movi	r21,7
81113404:	003f8506 	br	8111321c <__reset+0xfb0f321c>
81113408:	b000491e 	bne	r22,zero,81113530 <__svfscanf_r+0xff0>
8111340c:	9800031e 	bne	r19,zero,8111341c <__svfscanf_r+0xedc>
81113410:	a081c00c 	andi	r2,r20,1792
81113414:	0181c004 	movi	r6,1792
81113418:	11819f26 	beq	r2,r6,81113a98 <__svfscanf_r+0x1558>
8111341c:	a8803fcc 	andi	r2,r21,255
81113420:	1080201c 	xori	r2,r2,128
81113424:	10bfe004 	addi	r2,r2,-128
81113428:	01800044 	movi	r6,1
8111342c:	11800226 	beq	r2,r6,81113438 <__svfscanf_r+0xef8>
81113430:	01800104 	movi	r6,4
81113434:	11bf841e 	bne	r2,r6,81113248 <__reset+0xfb0f3248>
81113438:	ad400044 	addi	r21,r21,1
8111343c:	003f7706 	br	8111321c <__reset+0xfb0f321c>
81113440:	a8803fcc 	andi	r2,r21,255
81113444:	1080201c 	xori	r2,r2,128
81113448:	10bfe004 	addi	r2,r2,-128
8111344c:	10003c1e 	bne	r2,zero,81113540 <__svfscanf_r+0x1000>
81113450:	9801141e 	bne	r19,zero,811138a4 <__svfscanf_r+0x1364>
81113454:	a081c00c 	andi	r2,r20,1792
81113458:	0181c004 	movi	r6,1792
8111345c:	11818226 	beq	r2,r6,81113a68 <__svfscanf_r+0x1528>
81113460:	8821883a 	mov	r16,r17
81113464:	b019883a 	mov	r12,r22
81113468:	9823883a 	mov	r17,r19
8111346c:	182d883a 	mov	r22,r3
81113470:	003f7a06 	br	8111325c <__reset+0xfb0f325c>
81113474:	a8803fcc 	andi	r2,r21,255
81113478:	1080201c 	xori	r2,r2,128
8111347c:	10bfe004 	addi	r2,r2,-128
81113480:	01800084 	movi	r6,2
81113484:	11bf701e 	bne	r2,r6,81113248 <__reset+0xfb0f3248>
81113488:	054000c4 	movi	r21,3
8111348c:	003f6306 	br	8111321c <__reset+0xfb0f321c>
81113490:	a081400c 	andi	r2,r20,1280
81113494:	01810004 	movi	r6,1024
81113498:	11800326 	beq	r2,r6,811134a8 <__svfscanf_r+0xf68>
8111349c:	a184703a 	and	r2,r20,r6
811134a0:	103f6926 	beq	r2,zero,81113248 <__reset+0xfb0f3248>
811134a4:	983fee26 	beq	r19,zero,81113460 <__reset+0xfb0f3460>
811134a8:	a080800c 	andi	r2,r20,512
811134ac:	1000041e 	bne	r2,zero,811134c0 <__svfscanf_r+0xf80>
811134b0:	da009f17 	ldw	r8,636(sp)
811134b4:	dc40a515 	stw	r17,660(sp)
811134b8:	9a27c83a 	sub	r19,r19,r8
811134bc:	dcc0a415 	stw	r19,656(sp)
811134c0:	00be1fc4 	movi	r2,-1921
811134c4:	a0a8703a 	and	r20,r20,r2
811134c8:	a5006014 	ori	r20,r20,384
811134cc:	0027883a 	mov	r19,zero
811134d0:	003f5206 	br	8111321c <__reset+0xfb0f321c>
811134d4:	00800044 	movi	r2,1
811134d8:	b0bf5b1e 	bne	r22,r2,81113248 <__reset+0xfb0f3248>
811134dc:	05800084 	movi	r22,2
811134e0:	003f4e06 	br	8111321c <__reset+0xfb0f321c>
811134e4:	d980a317 	ldw	r6,652(sp)
811134e8:	30800003 	ldbu	r2,0(r6)
811134ec:	29803fcc 	andi	r6,r5,255
811134f0:	30bf551e 	bne	r6,r2,81113248 <__reset+0xfb0f3248>
811134f4:	a080800c 	andi	r2,r20,512
811134f8:	103f5326 	beq	r2,zero,81113248 <__reset+0xfb0f3248>
811134fc:	023f5fc4 	movi	r8,-641
81113500:	a228703a 	and	r20,r20,r8
81113504:	dcc09f15 	stw	r19,636(sp)
81113508:	003f4406 	br	8111321c <__reset+0xfb0f321c>
8111350c:	1809883a 	mov	r4,r3
81113510:	e00b883a 	mov	r5,fp
81113514:	d8c0a615 	stw	r3,664(sp)
81113518:	d9c0aa15 	stw	r7,680(sp)
8111351c:	110d8cc0 	call	8110d8cc <__srefill_r>
81113520:	d8c0a617 	ldw	r3,664(sp)
81113524:	d9c0aa17 	ldw	r7,680(sp)
81113528:	103f4626 	beq	r2,zero,81113244 <__reset+0xfb0f3244>
8111352c:	003f4606 	br	81113248 <__reset+0xfb0f3248>
81113530:	00800084 	movi	r2,2
81113534:	b0bfb91e 	bne	r22,r2,8111341c <__reset+0xfb0f341c>
81113538:	058000c4 	movi	r22,3
8111353c:	003f3706 	br	8111321c <__reset+0xfb0f321c>
81113540:	018000c4 	movi	r6,3
81113544:	11bfbc26 	beq	r2,r6,81113438 <__reset+0xfb0f3438>
81113548:	01800144 	movi	r6,5
8111354c:	11bfba26 	beq	r2,r6,81113438 <__reset+0xfb0f3438>
81113550:	003f3d06 	br	81113248 <__reset+0xfb0f3248>
81113554:	98bfffc4 	addi	r2,r19,-1
81113558:	01405704 	movi	r5,348
8111355c:	2880d82e 	bgeu	r5,r2,811138c0 <__svfscanf_r+0x1380>
81113560:	99ffa8c4 	addi	r7,r19,-349
81113564:	04c05744 	movi	r19,349
81113568:	8c436014 	ori	r17,r17,3456
8111356c:	9013883a 	mov	r9,r18
81113570:	8825883a 	mov	r18,r17
81113574:	dc409e17 	ldw	r17,632(sp)
81113578:	0029883a 	mov	r20,zero
8111357c:	dc000104 	addi	r16,sp,4
81113580:	05401344 	movi	r21,77
81113584:	02c08004 	movi	r11,512
81113588:	01bf7fc4 	movi	r6,-513
8111358c:	023fdfc4 	movi	r8,-129
81113590:	20bff544 	addi	r2,r4,-43
81113594:	10803fcc 	andi	r2,r2,255
81113598:	a8807236 	bltu	r21,r2,81113764 <__svfscanf_r+0x1224>
8111359c:	100490ba 	slli	r2,r2,2
811135a0:	01604474 	movhi	r5,33041
811135a4:	294d6d04 	addi	r5,r5,13748
811135a8:	1145883a 	add	r2,r2,r5
811135ac:	10800017 	ldw	r2,0(r2)
811135b0:	1000683a 	jmp	r2
811135b4:	811137e8 	cmpgeui	r4,r16,17631
811135b8:	81113764 	muli	r4,r16,17629
811135bc:	811137e8 	cmpgeui	r4,r16,17631
811135c0:	81113764 	muli	r4,r16,17629
811135c4:	81113764 	muli	r4,r16,17629
811135c8:	811137c0 	call	8811137c <__reset+0x20f137c>
811135cc:	811137a0 	cmpeqi	r4,r16,17630
811135d0:	811137a0 	cmpeqi	r4,r16,17630
811135d4:	811137a0 	cmpeqi	r4,r16,17630
811135d8:	811137a0 	cmpeqi	r4,r16,17630
811135dc:	811137a0 	cmpeqi	r4,r16,17630
811135e0:	811137a0 	cmpeqi	r4,r16,17630
811135e4:	811137a0 	cmpeqi	r4,r16,17630
811135e8:	81113748 	cmpgei	r4,r16,17629
811135ec:	81113748 	cmpgei	r4,r16,17629
811135f0:	81113764 	muli	r4,r16,17629
811135f4:	81113764 	muli	r4,r16,17629
811135f8:	81113764 	muli	r4,r16,17629
811135fc:	81113764 	muli	r4,r16,17629
81113600:	81113764 	muli	r4,r16,17629
81113604:	81113764 	muli	r4,r16,17629
81113608:	81113764 	muli	r4,r16,17629
8111360c:	81113734 	orhi	r4,r16,17628
81113610:	81113734 	orhi	r4,r16,17628
81113614:	81113734 	orhi	r4,r16,17628
81113618:	81113734 	orhi	r4,r16,17628
8111361c:	81113734 	orhi	r4,r16,17628
81113620:	81113734 	orhi	r4,r16,17628
81113624:	81113764 	muli	r4,r16,17629
81113628:	81113764 	muli	r4,r16,17629
8111362c:	81113764 	muli	r4,r16,17629
81113630:	81113764 	muli	r4,r16,17629
81113634:	81113764 	muli	r4,r16,17629
81113638:	81113764 	muli	r4,r16,17629
8111363c:	81113764 	muli	r4,r16,17629
81113640:	81113764 	muli	r4,r16,17629
81113644:	81113764 	muli	r4,r16,17629
81113648:	81113764 	muli	r4,r16,17629
8111364c:	81113764 	muli	r4,r16,17629
81113650:	81113764 	muli	r4,r16,17629
81113654:	81113764 	muli	r4,r16,17629
81113658:	81113764 	muli	r4,r16,17629
8111365c:	81113764 	muli	r4,r16,17629
81113660:	81113764 	muli	r4,r16,17629
81113664:	81113764 	muli	r4,r16,17629
81113668:	811136ec 	andhi	r4,r16,17627
8111366c:	81113764 	muli	r4,r16,17629
81113670:	81113764 	muli	r4,r16,17629
81113674:	81113764 	muli	r4,r16,17629
81113678:	81113764 	muli	r4,r16,17629
8111367c:	81113764 	muli	r4,r16,17629
81113680:	81113764 	muli	r4,r16,17629
81113684:	81113764 	muli	r4,r16,17629
81113688:	81113764 	muli	r4,r16,17629
8111368c:	81113734 	orhi	r4,r16,17628
81113690:	81113734 	orhi	r4,r16,17628
81113694:	81113734 	orhi	r4,r16,17628
81113698:	81113734 	orhi	r4,r16,17628
8111369c:	81113734 	orhi	r4,r16,17628
811136a0:	81113734 	orhi	r4,r16,17628
811136a4:	81113764 	muli	r4,r16,17629
811136a8:	81113764 	muli	r4,r16,17629
811136ac:	81113764 	muli	r4,r16,17629
811136b0:	81113764 	muli	r4,r16,17629
811136b4:	81113764 	muli	r4,r16,17629
811136b8:	81113764 	muli	r4,r16,17629
811136bc:	81113764 	muli	r4,r16,17629
811136c0:	81113764 	muli	r4,r16,17629
811136c4:	81113764 	muli	r4,r16,17629
811136c8:	81113764 	muli	r4,r16,17629
811136cc:	81113764 	muli	r4,r16,17629
811136d0:	81113764 	muli	r4,r16,17629
811136d4:	81113764 	muli	r4,r16,17629
811136d8:	81113764 	muli	r4,r16,17629
811136dc:	81113764 	muli	r4,r16,17629
811136e0:	81113764 	muli	r4,r16,17629
811136e4:	81113764 	muli	r4,r16,17629
811136e8:	811136ec 	andhi	r4,r16,17627
811136ec:	9081800c 	andi	r2,r18,1536
811136f0:	12c01c1e 	bne	r2,r11,81113764 <__svfscanf_r+0x1224>
811136f4:	91a4703a 	and	r18,r18,r6
811136f8:	94814014 	ori	r18,r18,1280
811136fc:	04400404 	movi	r17,16
81113700:	81000005 	stb	r4,0(r16)
81113704:	84000044 	addi	r16,r16,1
81113708:	e0800117 	ldw	r2,4(fp)
8111370c:	10bfffc4 	addi	r2,r2,-1
81113710:	e0800115 	stw	r2,4(fp)
81113714:	0080540e 	bge	zero,r2,81113868 <__svfscanf_r+0x1328>
81113718:	18c00044 	addi	r3,r3,1
8111371c:	e0c00015 	stw	r3,0(fp)
81113720:	9cffffc4 	addi	r19,r19,-1
81113724:	98000f26 	beq	r19,zero,81113764 <__svfscanf_r+0x1224>
81113728:	e0c00017 	ldw	r3,0(fp)
8111372c:	19000003 	ldbu	r4,0(r3)
81113730:	003f9706 	br	81113590 <__reset+0xfb0f3590>
81113734:	00800284 	movi	r2,10
81113738:	14400a0e 	bge	r2,r17,81113764 <__svfscanf_r+0x1224>
8111373c:	00bd1fc4 	movi	r2,-2945
81113740:	90a4703a 	and	r18,r18,r2
81113744:	003fee06 	br	81113700 <__reset+0xfb0f3700>
81113748:	016044f4 	movhi	r5,33043
8111374c:	8c63883a 	add	r17,r17,r17
81113750:	295d7b84 	addi	r5,r5,30190
81113754:	2c45883a 	add	r2,r5,r17
81113758:	1440000f 	ldh	r17,0(r2)
8111375c:	00800204 	movi	r2,8
81113760:	147ff616 	blt	r2,r17,8111373c <__reset+0xfb0f373c>
81113764:	dc409e15 	stw	r17,632(sp)
81113768:	9023883a 	mov	r17,r18
8111376c:	8880400c 	andi	r2,r17,256
81113770:	4825883a 	mov	r18,r9
81113774:	10000426 	beq	r2,zero,81113788 <__svfscanf_r+0x1248>
81113778:	d9800104 	addi	r6,sp,4
8111377c:	3400be36 	bltu	r6,r16,81113a78 <__svfscanf_r+0x1538>
81113780:	da000104 	addi	r8,sp,4
81113784:	443bae26 	beq	r8,r16,81112640 <__reset+0xfb0f2640>
81113788:	8880040c 	andi	r2,r17,16
8111378c:	10009326 	beq	r2,zero,811139dc <__svfscanf_r+0x149c>
81113790:	d8800104 	addi	r2,sp,4
81113794:	80a1c83a 	sub	r16,r16,r2
81113798:	8521883a 	add	r16,r16,r20
8111379c:	003d0606 	br	81112bb8 <__reset+0xfb0f2bb8>
811137a0:	016044f4 	movhi	r5,33043
811137a4:	8c63883a 	add	r17,r17,r17
811137a8:	295d7b84 	addi	r5,r5,30190
811137ac:	2c45883a 	add	r2,r5,r17
811137b0:	1440000f 	ldh	r17,0(r2)
811137b4:	00bd1fc4 	movi	r2,-2945
811137b8:	90a4703a 	and	r18,r18,r2
811137bc:	003fd006 	br	81113700 <__reset+0xfb0f3700>
811137c0:	9082000c 	andi	r2,r18,2048
811137c4:	103fce26 	beq	r2,zero,81113700 <__reset+0xfb0f3700>
811137c8:	8800021e 	bne	r17,zero,811137d4 <__svfscanf_r+0x1294>
811137cc:	94808014 	ori	r18,r18,512
811137d0:	04400204 	movi	r17,8
811137d4:	9081000c 	andi	r2,r18,1024
811137d8:	10009426 	beq	r2,zero,81113a2c <__svfscanf_r+0x14ec>
811137dc:	00be9fc4 	movi	r2,-1409
811137e0:	90a4703a 	and	r18,r18,r2
811137e4:	003fc606 	br	81113700 <__reset+0xfb0f3700>
811137e8:	9080200c 	andi	r2,r18,128
811137ec:	103fdd26 	beq	r2,zero,81113764 <__reset+0xfb0f3764>
811137f0:	9224703a 	and	r18,r18,r8
811137f4:	003fc206 	br	81113700 <__reset+0xfb0f3700>
811137f8:	9800011e 	bne	r19,zero,81113800 <__svfscanf_r+0x12c0>
811137fc:	04ffffc4 	movi	r19,-1
81113800:	8900004c 	andi	r4,r17,1
81113804:	20005b1e 	bne	r4,zero,81113974 <__svfscanf_r+0x1434>
81113808:	8c40040c 	andi	r17,r17,16
8111380c:	88003026 	beq	r17,zero,811138d0 <__svfscanf_r+0x1390>
81113810:	0021883a 	mov	r16,zero
81113814:	00000306 	br	81113824 <__svfscanf_r+0x12e4>
81113818:	18800003 	ldbu	r2,0(r3)
8111381c:	3885883a 	add	r2,r7,r2
81113820:	10800043 	ldbu	r2,1(r2)
81113824:	1080020c 	andi	r2,r2,8
81113828:	103ce31e 	bne	r2,zero,81112bb8 <__reset+0xfb0f2bb8>
8111382c:	e0800117 	ldw	r2,4(fp)
81113830:	18c00044 	addi	r3,r3,1
81113834:	84000044 	addi	r16,r16,1
81113838:	10bfffc4 	addi	r2,r2,-1
8111383c:	e0800115 	stw	r2,4(fp)
81113840:	e0c00015 	stw	r3,0(fp)
81113844:	84fcdc26 	beq	r16,r19,81112bb8 <__reset+0xfb0f2bb8>
81113848:	00bff316 	blt	zero,r2,81113818 <__reset+0xfb0f3818>
8111384c:	e00b883a 	mov	r5,fp
81113850:	b009883a 	mov	r4,r22
81113854:	110d8cc0 	call	8110d8cc <__srefill_r>
81113858:	103cd71e 	bne	r2,zero,81112bb8 <__reset+0xfb0f2bb8>
8111385c:	b9c00017 	ldw	r7,0(r23)
81113860:	e0c00017 	ldw	r3,0(fp)
81113864:	003fec06 	br	81113818 <__reset+0xfb0f3818>
81113868:	e00b883a 	mov	r5,fp
8111386c:	b009883a 	mov	r4,r22
81113870:	d980a715 	stw	r6,668(sp)
81113874:	d9c0aa15 	stw	r7,680(sp)
81113878:	da00a815 	stw	r8,672(sp)
8111387c:	da40a915 	stw	r9,676(sp)
81113880:	dac0a615 	stw	r11,664(sp)
81113884:	110d8cc0 	call	8110d8cc <__srefill_r>
81113888:	d980a717 	ldw	r6,668(sp)
8111388c:	d9c0aa17 	ldw	r7,680(sp)
81113890:	da00a817 	ldw	r8,672(sp)
81113894:	da40a917 	ldw	r9,676(sp)
81113898:	dac0a617 	ldw	r11,664(sp)
8111389c:	103fa026 	beq	r2,zero,81113720 <__reset+0xfb0f3720>
811138a0:	003fb006 	br	81113764 <__reset+0xfb0f3764>
811138a4:	8821883a 	mov	r16,r17
811138a8:	b019883a 	mov	r12,r22
811138ac:	9823883a 	mov	r17,r19
811138b0:	182d883a 	mov	r22,r3
811138b4:	00bfbfc4 	movi	r2,-257
811138b8:	a0a8703a 	and	r20,r20,r2
811138bc:	003e6706 	br	8111325c <__reset+0xfb0f325c>
811138c0:	000f883a 	mov	r7,zero
811138c4:	003f2806 	br	81113568 <__reset+0xfb0f3568>
811138c8:	d800a215 	stw	zero,648(sp)
811138cc:	003de306 	br	8111305c <__reset+0xfb0f305c>
811138d0:	da009c17 	ldw	r8,624(sp)
811138d4:	9abfffc4 	addi	r10,r19,-1
811138d8:	44400017 	ldw	r17,0(r8)
811138dc:	44000104 	addi	r16,r8,4
811138e0:	880b883a 	mov	r5,r17
811138e4:	8aa9883a 	add	r20,r17,r10
811138e8:	00000606 	br	81113904 <__svfscanf_r+0x13c4>
811138ec:	e0c00017 	ldw	r3,0(fp)
811138f0:	b9000017 	ldw	r4,0(r23)
811138f4:	a80b883a 	mov	r5,r21
811138f8:	18800003 	ldbu	r2,0(r3)
811138fc:	2085883a 	add	r2,r4,r2
81113900:	10800043 	ldbu	r2,1(r2)
81113904:	1080020c 	andi	r2,r2,8
81113908:	1000551e 	bne	r2,zero,81113a60 <__svfscanf_r+0x1520>
8111390c:	e0800117 	ldw	r2,4(fp)
81113910:	19000044 	addi	r4,r3,1
81113914:	e1000015 	stw	r4,0(fp)
81113918:	10bfffc4 	addi	r2,r2,-1
8111391c:	e0800115 	stw	r2,4(fp)
81113920:	18800003 	ldbu	r2,0(r3)
81113924:	2d400044 	addi	r21,r5,1
81113928:	a827883a 	mov	r19,r21
8111392c:	28800005 	stb	r2,0(r5)
81113930:	2d000626 	beq	r5,r20,8111394c <__svfscanf_r+0x140c>
81113934:	e0800117 	ldw	r2,4(fp)
81113938:	00bfec16 	blt	zero,r2,811138ec <__reset+0xfb0f38ec>
8111393c:	e00b883a 	mov	r5,fp
81113940:	b009883a 	mov	r4,r22
81113944:	110d8cc0 	call	8110d8cc <__srefill_r>
81113948:	103fe826 	beq	r2,zero,811138ec <__reset+0xfb0f38ec>
8111394c:	da00a017 	ldw	r8,640(sp)
81113950:	dd009d17 	ldw	r20,628(sp)
81113954:	9c63c83a 	sub	r17,r19,r17
81113958:	42000044 	addi	r8,r8,1
8111395c:	98000005 	stb	zero,0(r19)
81113960:	9465883a 	add	r18,r18,r17
81113964:	da00a015 	stw	r8,640(sp)
81113968:	dc009c15 	stw	r16,624(sp)
8111396c:	a00d883a 	mov	r6,r20
81113970:	003b2f06 	br	81112630 <__reset+0xfb0f2630>
81113974:	dd409904 	addi	r21,sp,612
81113978:	8c40040c 	andi	r17,r17,16
8111397c:	01800204 	movi	r6,8
81113980:	000b883a 	mov	r5,zero
81113984:	a809883a 	mov	r4,r21
81113988:	110d5c80 	call	8110d5c8 <memset>
8111398c:	8800401e 	bne	r17,zero,81113a90 <__svfscanf_r+0x1550>
81113990:	da009c17 	ldw	r8,624(sp)
81113994:	45000017 	ldw	r20,0(r8)
81113998:	42000104 	addi	r8,r8,4
8111399c:	da009c15 	stw	r8,624(sp)
811139a0:	000d883a 	mov	r6,zero
811139a4:	3021883a 	mov	r16,r6
811139a8:	dc409f15 	stw	r17,636(sp)
811139ac:	e0800017 	ldw	r2,0(fp)
811139b0:	b8c00017 	ldw	r3,0(r23)
811139b4:	10800003 	ldbu	r2,0(r2)
811139b8:	1885883a 	add	r2,r3,r2
811139bc:	10800043 	ldbu	r2,1(r2)
811139c0:	1080020c 	andi	r2,r2,8
811139c4:	1000011e 	bne	r2,zero,811139cc <__svfscanf_r+0x148c>
811139c8:	9800701e 	bne	r19,zero,81113b8c <__svfscanf_r+0x164c>
811139cc:	dc409f17 	ldw	r17,636(sp)
811139d0:	883cdd1e 	bne	r17,zero,81112d48 <__reset+0xfb0f2d48>
811139d4:	a0000015 	stw	zero,0(r20)
811139d8:	003cd806 	br	81112d3c <__reset+0xfb0f2d3c>
811139dc:	d9c09e17 	ldw	r7,632(sp)
811139e0:	da00a117 	ldw	r8,644(sp)
811139e4:	000d883a 	mov	r6,zero
811139e8:	d9400104 	addi	r5,sp,4
811139ec:	b009883a 	mov	r4,r22
811139f0:	80000005 	stb	zero,0(r16)
811139f4:	403ee83a 	callr	r8
811139f8:	88c0080c 	andi	r3,r17,32
811139fc:	1800121e 	bne	r3,zero,81113a48 <__svfscanf_r+0x1508>
81113a00:	88c0010c 	andi	r3,r17,4
81113a04:	18004d26 	beq	r3,zero,81113b3c <__svfscanf_r+0x15fc>
81113a08:	da009c17 	ldw	r8,624(sp)
81113a0c:	40c00017 	ldw	r3,0(r8)
81113a10:	42000104 	addi	r8,r8,4
81113a14:	da009c15 	stw	r8,624(sp)
81113a18:	1880000d 	sth	r2,0(r3)
81113a1c:	da00a017 	ldw	r8,640(sp)
81113a20:	42000044 	addi	r8,r8,1
81113a24:	da00a015 	stw	r8,640(sp)
81113a28:	003f5906 	br	81113790 <__reset+0xfb0f3790>
81113a2c:	00bf1fc4 	movi	r2,-897
81113a30:	90a4703a 	and	r18,r18,r2
81113a34:	38000226 	beq	r7,zero,81113a40 <__svfscanf_r+0x1500>
81113a38:	39ffffc4 	addi	r7,r7,-1
81113a3c:	9cc00044 	addi	r19,r19,1
81113a40:	a5000044 	addi	r20,r20,1
81113a44:	003f3006 	br	81113708 <__reset+0xfb0f3708>
81113a48:	da009c17 	ldw	r8,624(sp)
81113a4c:	40c00017 	ldw	r3,0(r8)
81113a50:	42000104 	addi	r8,r8,4
81113a54:	da009c15 	stw	r8,624(sp)
81113a58:	18800015 	stw	r2,0(r3)
81113a5c:	003fef06 	br	81113a1c <__reset+0xfb0f3a1c>
81113a60:	2827883a 	mov	r19,r5
81113a64:	003fb906 	br	8111394c <__reset+0xfb0f394c>
81113a68:	01be1fc4 	movi	r6,-1921
81113a6c:	a1a8703a 	and	r20,r20,r6
81113a70:	05400044 	movi	r21,1
81113a74:	003de906 	br	8111321c <__reset+0xfb0f321c>
81113a78:	817fffc7 	ldb	r5,-1(r16)
81113a7c:	e00d883a 	mov	r6,fp
81113a80:	b009883a 	mov	r4,r22
81113a84:	843fffc4 	addi	r16,r16,-1
81113a88:	111c0100 	call	8111c010 <_ungetc_r>
81113a8c:	003f3c06 	br	81113780 <__reset+0xfb0f3780>
81113a90:	dd009b04 	addi	r20,sp,620
81113a94:	003fc206 	br	811139a0 <__reset+0xfb0f39a0>
81113a98:	00be1fc4 	movi	r2,-1921
81113a9c:	a0a8703a 	and	r20,r20,r2
81113aa0:	05800044 	movi	r22,1
81113aa4:	003ddd06 	br	8111321c <__reset+0xfb0f321c>
81113aa8:	d8c09f17 	ldw	r3,636(sp)
81113aac:	88e3c83a 	sub	r17,r17,r3
81113ab0:	044dc83a 	sub	r6,zero,r17
81113ab4:	883e2126 	beq	r17,zero,8111333c <__reset+0xfb0f333c>
81113ab8:	d88055c4 	addi	r2,sp,343
81113abc:	80800136 	bltu	r16,r2,81113ac4 <__svfscanf_r+0x1584>
81113ac0:	dc005584 	addi	r16,sp,342
81113ac4:	016044f4 	movhi	r5,33043
81113ac8:	295d7a04 	addi	r5,r5,30184
81113acc:	8009883a 	mov	r4,r16
81113ad0:	110dbb80 	call	8110dbb8 <sprintf>
81113ad4:	003e1906 	br	8111333c <__reset+0xfb0f333c>
81113ad8:	d8c0a517 	ldw	r3,660(sp)
81113adc:	000d883a 	mov	r6,zero
81113ae0:	01c00284 	movi	r7,10
81113ae4:	19400044 	addi	r5,r3,1
81113ae8:	b009883a 	mov	r4,r22
81113aec:	110de440 	call	8110de44 <_strtol_r>
81113af0:	da00a417 	ldw	r8,656(sp)
81113af4:	dc00a517 	ldw	r16,660(sp)
81113af8:	120dc83a 	sub	r6,r2,r8
81113afc:	003fee06 	br	81113ab8 <__reset+0xfb0f3ab8>
81113b00:	da009c17 	ldw	r8,624(sp)
81113b04:	180b883a 	mov	r5,r3
81113b08:	8009883a 	mov	r4,r16
81113b0c:	45000017 	ldw	r20,0(r8)
81113b10:	44400104 	addi	r17,r8,4
81113b14:	d8c0a615 	stw	r3,664(sp)
81113b18:	11189740 	call	81118974 <__fpclassifyd>
81113b1c:	d8c0a617 	ldw	r3,664(sp)
81113b20:	10006426 	beq	r2,zero,81113cb4 <__svfscanf_r+0x1774>
81113b24:	8009883a 	mov	r4,r16
81113b28:	180b883a 	mov	r5,r3
81113b2c:	110c1600 	call	8110c160 <__truncdfsf2>
81113b30:	a0800015 	stw	r2,0(r20)
81113b34:	dc409c15 	stw	r17,624(sp)
81113b38:	003e0f06 	br	81113378 <__reset+0xfb0f3378>
81113b3c:	88c0004c 	andi	r3,r17,1
81113b40:	183fc11e 	bne	r3,zero,81113a48 <__reset+0xfb0f3a48>
81113b44:	8c40008c 	andi	r17,r17,2
81113b48:	883fbf26 	beq	r17,zero,81113a48 <__reset+0xfb0f3a48>
81113b4c:	da00a117 	ldw	r8,644(sp)
81113b50:	00a044b4 	movhi	r2,33042
81113b54:	10a97c04 	addi	r2,r2,-23056
81113b58:	d9c09e17 	ldw	r7,632(sp)
81113b5c:	000d883a 	mov	r6,zero
81113b60:	d9400104 	addi	r5,sp,4
81113b64:	b009883a 	mov	r4,r22
81113b68:	40806226 	beq	r8,r2,81113cf4 <__svfscanf_r+0x17b4>
81113b6c:	111a3100 	call	8111a310 <_strtoll_r>
81113b70:	da009c17 	ldw	r8,624(sp)
81113b74:	41000017 	ldw	r4,0(r8)
81113b78:	42000104 	addi	r8,r8,4
81113b7c:	da009c15 	stw	r8,624(sp)
81113b80:	20800015 	stw	r2,0(r4)
81113b84:	20c00115 	stw	r3,4(r4)
81113b88:	003fa406 	br	81113a1c <__reset+0xfb0f3a1c>
81113b8c:	1116d340 	call	81116d34 <__locale_mb_cur_max>
81113b90:	80bca726 	beq	r16,r2,81112e30 <__reset+0xfb0f2e30>
81113b94:	e0800017 	ldw	r2,0(fp)
81113b98:	e1000117 	ldw	r4,4(fp)
81113b9c:	d8c00104 	addi	r3,sp,4
81113ba0:	12000003 	ldbu	r8,0(r2)
81113ba4:	213fffc4 	addi	r4,r4,-1
81113ba8:	10800044 	addi	r2,r2,1
81113bac:	e1000115 	stw	r4,4(fp)
81113bb0:	e0800015 	stw	r2,0(fp)
81113bb4:	84400044 	addi	r17,r16,1
81113bb8:	dd400015 	stw	r21,0(sp)
81113bbc:	1c21883a 	add	r16,r3,r16
81113bc0:	b009883a 	mov	r4,r22
81113bc4:	880f883a 	mov	r7,r17
81113bc8:	180d883a 	mov	r6,r3
81113bcc:	a00b883a 	mov	r5,r20
81113bd0:	82000005 	stb	r8,0(r16)
81113bd4:	1116de80 	call	81116de8 <_mbrtowc_r>
81113bd8:	013fffc4 	movi	r4,-1
81113bdc:	113c9426 	beq	r2,r4,81112e30 <__reset+0xfb0f2e30>
81113be0:	103c881e 	bne	r2,zero,81112e04 <__reset+0xfb0f2e04>
81113be4:	a0000015 	stw	zero,0(r20)
81113be8:	0009883a 	mov	r4,zero
81113bec:	1116c7c0 	call	81116c7c <iswspace>
81113bf0:	10001a26 	beq	r2,zero,81113c5c <__svfscanf_r+0x171c>
81113bf4:	8821883a 	mov	r16,r17
81113bf8:	dc409f17 	ldw	r17,636(sp)
81113bfc:	803f7426 	beq	r16,zero,811139d0 <__reset+0xfb0f39d0>
81113c00:	843fffc4 	addi	r16,r16,-1
81113c04:	d9800104 	addi	r6,sp,4
81113c08:	342b883a 	add	r21,r6,r16
81113c0c:	00000106 	br	81113c14 <__svfscanf_r+0x16d4>
81113c10:	843fffc4 	addi	r16,r16,-1
81113c14:	a9400003 	ldbu	r5,0(r21)
81113c18:	e00d883a 	mov	r6,fp
81113c1c:	b009883a 	mov	r4,r22
81113c20:	111c0100 	call	8111c010 <_ungetc_r>
81113c24:	ad7fffc4 	addi	r21,r21,-1
81113c28:	803ff91e 	bne	r16,zero,81113c10 <__reset+0xfb0f3c10>
81113c2c:	003f6806 	br	811139d0 <__reset+0xfb0f39d0>
81113c30:	d9800104 	addi	r6,sp,4
81113c34:	802b883a 	mov	r21,r16
81113c38:	343a812e 	bgeu	r6,r16,81112640 <__reset+0xfb0f2640>
81113c3c:	ad7fffc4 	addi	r21,r21,-1
81113c40:	a9400007 	ldb	r5,0(r21)
81113c44:	e00d883a 	mov	r6,fp
81113c48:	b009883a 	mov	r4,r22
81113c4c:	111c0100 	call	8111c010 <_ungetc_r>
81113c50:	da000104 	addi	r8,sp,4
81113c54:	457ff91e 	bne	r8,r21,81113c3c <__reset+0xfb0f3c3c>
81113c58:	003a7906 	br	81112640 <__reset+0xfb0f2640>
81113c5c:	da009f17 	ldw	r8,636(sp)
81113c60:	9465883a 	add	r18,r18,r17
81113c64:	9cffffc4 	addi	r19,r19,-1
81113c68:	4000051e 	bne	r8,zero,81113c80 <__svfscanf_r+0x1740>
81113c6c:	a5000104 	addi	r20,r20,4
81113c70:	0021883a 	mov	r16,zero
81113c74:	003c6606 	br	81112e10 <__reset+0xfb0f2e10>
81113c78:	a1000017 	ldw	r4,0(r20)
81113c7c:	003fdb06 	br	81113bec <__reset+0xfb0f3bec>
81113c80:	0021883a 	mov	r16,zero
81113c84:	003c6206 	br	81112e10 <__reset+0xfb0f2e10>
81113c88:	d8800104 	addi	r2,sp,4
81113c8c:	802b883a 	mov	r21,r16
81113c90:	143a6b2e 	bgeu	r2,r16,81112640 <__reset+0xfb0f2640>
81113c94:	ad7fffc4 	addi	r21,r21,-1
81113c98:	a9400007 	ldb	r5,0(r21)
81113c9c:	e00d883a 	mov	r6,fp
81113ca0:	b009883a 	mov	r4,r22
81113ca4:	111c0100 	call	8111c010 <_ungetc_r>
81113ca8:	d8c00104 	addi	r3,sp,4
81113cac:	1d7ff91e 	bne	r3,r21,81113c94 <__reset+0xfb0f3c94>
81113cb0:	003a6306 	br	81112640 <__reset+0xfb0f2640>
81113cb4:	0009883a 	mov	r4,zero
81113cb8:	1118ab80 	call	81118ab8 <nanf>
81113cbc:	a0800015 	stw	r2,0(r20)
81113cc0:	dc409c15 	stw	r17,624(sp)
81113cc4:	003dac06 	br	81113378 <__reset+0xfb0f3378>
81113cc8:	d9000104 	addi	r4,sp,4
81113ccc:	802b883a 	mov	r21,r16
81113cd0:	243a5b2e 	bgeu	r4,r16,81112640 <__reset+0xfb0f2640>
81113cd4:	ad7fffc4 	addi	r21,r21,-1
81113cd8:	a9400007 	ldb	r5,0(r21)
81113cdc:	e00d883a 	mov	r6,fp
81113ce0:	b009883a 	mov	r4,r22
81113ce4:	111c0100 	call	8111c010 <_ungetc_r>
81113ce8:	d9400104 	addi	r5,sp,4
81113cec:	2d7ff91e 	bne	r5,r21,81113cd4 <__reset+0xfb0f3cd4>
81113cf0:	003a5306 	br	81112640 <__reset+0xfb0f2640>
81113cf4:	111a8580 	call	8111a858 <_strtoull_r>
81113cf8:	003f9d06 	br	81113b70 <__reset+0xfb0f3b70>

81113cfc <vfscanf>:
81113cfc:	00a04534 	movhi	r2,33044
81113d00:	defffb04 	addi	sp,sp,-20
81113d04:	10a65b04 	addi	r2,r2,-26260
81113d08:	dc000215 	stw	r16,8(sp)
81113d0c:	14000017 	ldw	r16,0(r2)
81113d10:	dc400315 	stw	r17,12(sp)
81113d14:	dfc00415 	stw	ra,16(sp)
81113d18:	2023883a 	mov	r17,r4
81113d1c:	80000826 	beq	r16,zero,81113d40 <vfscanf+0x44>
81113d20:	80800e17 	ldw	r2,56(r16)
81113d24:	1000061e 	bne	r2,zero,81113d40 <vfscanf+0x44>
81113d28:	8009883a 	mov	r4,r16
81113d2c:	d9400015 	stw	r5,0(sp)
81113d30:	d9800115 	stw	r6,4(sp)
81113d34:	1115e540 	call	81115e54 <__sinit>
81113d38:	d9800117 	ldw	r6,4(sp)
81113d3c:	d9400017 	ldw	r5,0(sp)
81113d40:	300f883a 	mov	r7,r6
81113d44:	8009883a 	mov	r4,r16
81113d48:	280d883a 	mov	r6,r5
81113d4c:	880b883a 	mov	r5,r17
81113d50:	dfc00417 	ldw	ra,16(sp)
81113d54:	dc400317 	ldw	r17,12(sp)
81113d58:	dc000217 	ldw	r16,8(sp)
81113d5c:	dec00504 	addi	sp,sp,20
81113d60:	11125401 	jmpi	81112540 <__svfscanf_r>

81113d64 <__svfscanf>:
81113d64:	00a04534 	movhi	r2,33044
81113d68:	10a65b04 	addi	r2,r2,-26260
81113d6c:	300f883a 	mov	r7,r6
81113d70:	280d883a 	mov	r6,r5
81113d74:	200b883a 	mov	r5,r4
81113d78:	11000017 	ldw	r4,0(r2)
81113d7c:	11125401 	jmpi	81112540 <__svfscanf_r>

81113d80 <_vfscanf_r>:
81113d80:	defffb04 	addi	sp,sp,-20
81113d84:	dc000315 	stw	r16,12(sp)
81113d88:	dfc00415 	stw	ra,16(sp)
81113d8c:	2021883a 	mov	r16,r4
81113d90:	20000926 	beq	r4,zero,81113db8 <_vfscanf_r+0x38>
81113d94:	20800e17 	ldw	r2,56(r4)
81113d98:	1000071e 	bne	r2,zero,81113db8 <_vfscanf_r+0x38>
81113d9c:	d9400015 	stw	r5,0(sp)
81113da0:	d9800115 	stw	r6,4(sp)
81113da4:	d9c00215 	stw	r7,8(sp)
81113da8:	1115e540 	call	81115e54 <__sinit>
81113dac:	d9c00217 	ldw	r7,8(sp)
81113db0:	d9800117 	ldw	r6,4(sp)
81113db4:	d9400017 	ldw	r5,0(sp)
81113db8:	8009883a 	mov	r4,r16
81113dbc:	dfc00417 	ldw	ra,16(sp)
81113dc0:	dc000317 	ldw	r16,12(sp)
81113dc4:	dec00504 	addi	sp,sp,20
81113dc8:	11125401 	jmpi	81112540 <__svfscanf_r>

81113dcc <_write_r>:
81113dcc:	defffd04 	addi	sp,sp,-12
81113dd0:	2805883a 	mov	r2,r5
81113dd4:	dc000015 	stw	r16,0(sp)
81113dd8:	04204534 	movhi	r16,33044
81113ddc:	dc400115 	stw	r17,4(sp)
81113de0:	300b883a 	mov	r5,r6
81113de4:	8426b904 	addi	r16,r16,-25884
81113de8:	2023883a 	mov	r17,r4
81113dec:	380d883a 	mov	r6,r7
81113df0:	1009883a 	mov	r4,r2
81113df4:	dfc00215 	stw	ra,8(sp)
81113df8:	80000015 	stw	zero,0(r16)
81113dfc:	11225d40 	call	811225d4 <write>
81113e00:	00ffffc4 	movi	r3,-1
81113e04:	10c00526 	beq	r2,r3,81113e1c <_write_r+0x50>
81113e08:	dfc00217 	ldw	ra,8(sp)
81113e0c:	dc400117 	ldw	r17,4(sp)
81113e10:	dc000017 	ldw	r16,0(sp)
81113e14:	dec00304 	addi	sp,sp,12
81113e18:	f800283a 	ret
81113e1c:	80c00017 	ldw	r3,0(r16)
81113e20:	183ff926 	beq	r3,zero,81113e08 <__reset+0xfb0f3e08>
81113e24:	88c00015 	stw	r3,0(r17)
81113e28:	003ff706 	br	81113e08 <__reset+0xfb0f3e08>

81113e2c <__swsetup_r>:
81113e2c:	00a04534 	movhi	r2,33044
81113e30:	defffd04 	addi	sp,sp,-12
81113e34:	10a65b04 	addi	r2,r2,-26260
81113e38:	dc400115 	stw	r17,4(sp)
81113e3c:	2023883a 	mov	r17,r4
81113e40:	11000017 	ldw	r4,0(r2)
81113e44:	dc000015 	stw	r16,0(sp)
81113e48:	dfc00215 	stw	ra,8(sp)
81113e4c:	2821883a 	mov	r16,r5
81113e50:	20000226 	beq	r4,zero,81113e5c <__swsetup_r+0x30>
81113e54:	20800e17 	ldw	r2,56(r4)
81113e58:	10003126 	beq	r2,zero,81113f20 <__swsetup_r+0xf4>
81113e5c:	8080030b 	ldhu	r2,12(r16)
81113e60:	10c0020c 	andi	r3,r2,8
81113e64:	1009883a 	mov	r4,r2
81113e68:	18000f26 	beq	r3,zero,81113ea8 <__swsetup_r+0x7c>
81113e6c:	80c00417 	ldw	r3,16(r16)
81113e70:	18001526 	beq	r3,zero,81113ec8 <__swsetup_r+0x9c>
81113e74:	1100004c 	andi	r4,r2,1
81113e78:	20001c1e 	bne	r4,zero,81113eec <__swsetup_r+0xc0>
81113e7c:	1080008c 	andi	r2,r2,2
81113e80:	1000291e 	bne	r2,zero,81113f28 <__swsetup_r+0xfc>
81113e84:	80800517 	ldw	r2,20(r16)
81113e88:	80800215 	stw	r2,8(r16)
81113e8c:	18001c26 	beq	r3,zero,81113f00 <__swsetup_r+0xd4>
81113e90:	0005883a 	mov	r2,zero
81113e94:	dfc00217 	ldw	ra,8(sp)
81113e98:	dc400117 	ldw	r17,4(sp)
81113e9c:	dc000017 	ldw	r16,0(sp)
81113ea0:	dec00304 	addi	sp,sp,12
81113ea4:	f800283a 	ret
81113ea8:	2080040c 	andi	r2,r4,16
81113eac:	10002e26 	beq	r2,zero,81113f68 <__swsetup_r+0x13c>
81113eb0:	2080010c 	andi	r2,r4,4
81113eb4:	10001e1e 	bne	r2,zero,81113f30 <__swsetup_r+0x104>
81113eb8:	80c00417 	ldw	r3,16(r16)
81113ebc:	20800214 	ori	r2,r4,8
81113ec0:	8080030d 	sth	r2,12(r16)
81113ec4:	183feb1e 	bne	r3,zero,81113e74 <__reset+0xfb0f3e74>
81113ec8:	1100a00c 	andi	r4,r2,640
81113ecc:	01408004 	movi	r5,512
81113ed0:	217fe826 	beq	r4,r5,81113e74 <__reset+0xfb0f3e74>
81113ed4:	800b883a 	mov	r5,r16
81113ed8:	8809883a 	mov	r4,r17
81113edc:	110cab80 	call	8110cab8 <__smakebuf_r>
81113ee0:	8080030b 	ldhu	r2,12(r16)
81113ee4:	80c00417 	ldw	r3,16(r16)
81113ee8:	003fe206 	br	81113e74 <__reset+0xfb0f3e74>
81113eec:	80800517 	ldw	r2,20(r16)
81113ef0:	80000215 	stw	zero,8(r16)
81113ef4:	0085c83a 	sub	r2,zero,r2
81113ef8:	80800615 	stw	r2,24(r16)
81113efc:	183fe41e 	bne	r3,zero,81113e90 <__reset+0xfb0f3e90>
81113f00:	80c0030b 	ldhu	r3,12(r16)
81113f04:	0005883a 	mov	r2,zero
81113f08:	1900200c 	andi	r4,r3,128
81113f0c:	203fe126 	beq	r4,zero,81113e94 <__reset+0xfb0f3e94>
81113f10:	18c01014 	ori	r3,r3,64
81113f14:	80c0030d 	sth	r3,12(r16)
81113f18:	00bfffc4 	movi	r2,-1
81113f1c:	003fdd06 	br	81113e94 <__reset+0xfb0f3e94>
81113f20:	1115e540 	call	81115e54 <__sinit>
81113f24:	003fcd06 	br	81113e5c <__reset+0xfb0f3e5c>
81113f28:	0005883a 	mov	r2,zero
81113f2c:	003fd606 	br	81113e88 <__reset+0xfb0f3e88>
81113f30:	81400c17 	ldw	r5,48(r16)
81113f34:	28000626 	beq	r5,zero,81113f50 <__swsetup_r+0x124>
81113f38:	80801004 	addi	r2,r16,64
81113f3c:	28800326 	beq	r5,r2,81113f4c <__swsetup_r+0x120>
81113f40:	8809883a 	mov	r4,r17
81113f44:	11162d40 	call	811162d4 <_free_r>
81113f48:	8100030b 	ldhu	r4,12(r16)
81113f4c:	80000c15 	stw	zero,48(r16)
81113f50:	80c00417 	ldw	r3,16(r16)
81113f54:	00bff6c4 	movi	r2,-37
81113f58:	1108703a 	and	r4,r2,r4
81113f5c:	80000115 	stw	zero,4(r16)
81113f60:	80c00015 	stw	r3,0(r16)
81113f64:	003fd506 	br	81113ebc <__reset+0xfb0f3ebc>
81113f68:	00800244 	movi	r2,9
81113f6c:	88800015 	stw	r2,0(r17)
81113f70:	20801014 	ori	r2,r4,64
81113f74:	8080030d 	sth	r2,12(r16)
81113f78:	00bfffc4 	movi	r2,-1
81113f7c:	003fc506 	br	81113e94 <__reset+0xfb0f3e94>

81113f80 <_close_r>:
81113f80:	defffd04 	addi	sp,sp,-12
81113f84:	dc000015 	stw	r16,0(sp)
81113f88:	04204534 	movhi	r16,33044
81113f8c:	dc400115 	stw	r17,4(sp)
81113f90:	8426b904 	addi	r16,r16,-25884
81113f94:	2023883a 	mov	r17,r4
81113f98:	2809883a 	mov	r4,r5
81113f9c:	dfc00215 	stw	ra,8(sp)
81113fa0:	80000015 	stw	zero,0(r16)
81113fa4:	112196c0 	call	8112196c <close>
81113fa8:	00ffffc4 	movi	r3,-1
81113fac:	10c00526 	beq	r2,r3,81113fc4 <_close_r+0x44>
81113fb0:	dfc00217 	ldw	ra,8(sp)
81113fb4:	dc400117 	ldw	r17,4(sp)
81113fb8:	dc000017 	ldw	r16,0(sp)
81113fbc:	dec00304 	addi	sp,sp,12
81113fc0:	f800283a 	ret
81113fc4:	80c00017 	ldw	r3,0(r16)
81113fc8:	183ff926 	beq	r3,zero,81113fb0 <__reset+0xfb0f3fb0>
81113fcc:	88c00015 	stw	r3,0(r17)
81113fd0:	003ff706 	br	81113fb0 <__reset+0xfb0f3fb0>

81113fd4 <quorem>:
81113fd4:	defff704 	addi	sp,sp,-36
81113fd8:	dc800215 	stw	r18,8(sp)
81113fdc:	20800417 	ldw	r2,16(r4)
81113fe0:	2c800417 	ldw	r18,16(r5)
81113fe4:	dfc00815 	stw	ra,32(sp)
81113fe8:	ddc00715 	stw	r23,28(sp)
81113fec:	dd800615 	stw	r22,24(sp)
81113ff0:	dd400515 	stw	r21,20(sp)
81113ff4:	dd000415 	stw	r20,16(sp)
81113ff8:	dcc00315 	stw	r19,12(sp)
81113ffc:	dc400115 	stw	r17,4(sp)
81114000:	dc000015 	stw	r16,0(sp)
81114004:	14807116 	blt	r2,r18,811141cc <quorem+0x1f8>
81114008:	94bfffc4 	addi	r18,r18,-1
8111400c:	94ad883a 	add	r22,r18,r18
81114010:	b5ad883a 	add	r22,r22,r22
81114014:	2c400504 	addi	r17,r5,20
81114018:	8da9883a 	add	r20,r17,r22
8111401c:	25400504 	addi	r21,r4,20
81114020:	282f883a 	mov	r23,r5
81114024:	adad883a 	add	r22,r21,r22
81114028:	a1400017 	ldw	r5,0(r20)
8111402c:	2021883a 	mov	r16,r4
81114030:	b1000017 	ldw	r4,0(r22)
81114034:	29400044 	addi	r5,r5,1
81114038:	111f78c0 	call	8111f78c <__udivsi3>
8111403c:	1027883a 	mov	r19,r2
81114040:	10002c26 	beq	r2,zero,811140f4 <quorem+0x120>
81114044:	a813883a 	mov	r9,r21
81114048:	880b883a 	mov	r5,r17
8111404c:	0009883a 	mov	r4,zero
81114050:	000d883a 	mov	r6,zero
81114054:	2a000017 	ldw	r8,0(r5)
81114058:	49c00017 	ldw	r7,0(r9)
8111405c:	29400104 	addi	r5,r5,4
81114060:	40bfffcc 	andi	r2,r8,65535
81114064:	14c5383a 	mul	r2,r2,r19
81114068:	4010d43a 	srli	r8,r8,16
8111406c:	38ffffcc 	andi	r3,r7,65535
81114070:	1105883a 	add	r2,r2,r4
81114074:	1008d43a 	srli	r4,r2,16
81114078:	44d1383a 	mul	r8,r8,r19
8111407c:	198d883a 	add	r6,r3,r6
81114080:	10ffffcc 	andi	r3,r2,65535
81114084:	30c7c83a 	sub	r3,r6,r3
81114088:	380ed43a 	srli	r7,r7,16
8111408c:	4105883a 	add	r2,r8,r4
81114090:	180dd43a 	srai	r6,r3,16
81114094:	113fffcc 	andi	r4,r2,65535
81114098:	390fc83a 	sub	r7,r7,r4
8111409c:	398d883a 	add	r6,r7,r6
811140a0:	300e943a 	slli	r7,r6,16
811140a4:	18ffffcc 	andi	r3,r3,65535
811140a8:	1008d43a 	srli	r4,r2,16
811140ac:	38ceb03a 	or	r7,r7,r3
811140b0:	49c00015 	stw	r7,0(r9)
811140b4:	300dd43a 	srai	r6,r6,16
811140b8:	4a400104 	addi	r9,r9,4
811140bc:	a17fe52e 	bgeu	r20,r5,81114054 <__reset+0xfb0f4054>
811140c0:	b0800017 	ldw	r2,0(r22)
811140c4:	10000b1e 	bne	r2,zero,811140f4 <quorem+0x120>
811140c8:	b0bfff04 	addi	r2,r22,-4
811140cc:	a880082e 	bgeu	r21,r2,811140f0 <quorem+0x11c>
811140d0:	b0ffff17 	ldw	r3,-4(r22)
811140d4:	18000326 	beq	r3,zero,811140e4 <quorem+0x110>
811140d8:	00000506 	br	811140f0 <quorem+0x11c>
811140dc:	10c00017 	ldw	r3,0(r2)
811140e0:	1800031e 	bne	r3,zero,811140f0 <quorem+0x11c>
811140e4:	10bfff04 	addi	r2,r2,-4
811140e8:	94bfffc4 	addi	r18,r18,-1
811140ec:	a8bffb36 	bltu	r21,r2,811140dc <__reset+0xfb0f40dc>
811140f0:	84800415 	stw	r18,16(r16)
811140f4:	b80b883a 	mov	r5,r23
811140f8:	8009883a 	mov	r4,r16
811140fc:	1117b140 	call	81117b14 <__mcmp>
81114100:	10002616 	blt	r2,zero,8111419c <quorem+0x1c8>
81114104:	9cc00044 	addi	r19,r19,1
81114108:	a805883a 	mov	r2,r21
8111410c:	000b883a 	mov	r5,zero
81114110:	11000017 	ldw	r4,0(r2)
81114114:	89800017 	ldw	r6,0(r17)
81114118:	10800104 	addi	r2,r2,4
8111411c:	20ffffcc 	andi	r3,r4,65535
81114120:	194b883a 	add	r5,r3,r5
81114124:	30ffffcc 	andi	r3,r6,65535
81114128:	28c7c83a 	sub	r3,r5,r3
8111412c:	300cd43a 	srli	r6,r6,16
81114130:	2008d43a 	srli	r4,r4,16
81114134:	180bd43a 	srai	r5,r3,16
81114138:	18ffffcc 	andi	r3,r3,65535
8111413c:	2189c83a 	sub	r4,r4,r6
81114140:	2149883a 	add	r4,r4,r5
81114144:	200c943a 	slli	r6,r4,16
81114148:	8c400104 	addi	r17,r17,4
8111414c:	200bd43a 	srai	r5,r4,16
81114150:	30c6b03a 	or	r3,r6,r3
81114154:	10ffff15 	stw	r3,-4(r2)
81114158:	a47fed2e 	bgeu	r20,r17,81114110 <__reset+0xfb0f4110>
8111415c:	9485883a 	add	r2,r18,r18
81114160:	1085883a 	add	r2,r2,r2
81114164:	a887883a 	add	r3,r21,r2
81114168:	18800017 	ldw	r2,0(r3)
8111416c:	10000b1e 	bne	r2,zero,8111419c <quorem+0x1c8>
81114170:	18bfff04 	addi	r2,r3,-4
81114174:	a880082e 	bgeu	r21,r2,81114198 <quorem+0x1c4>
81114178:	18ffff17 	ldw	r3,-4(r3)
8111417c:	18000326 	beq	r3,zero,8111418c <quorem+0x1b8>
81114180:	00000506 	br	81114198 <quorem+0x1c4>
81114184:	10c00017 	ldw	r3,0(r2)
81114188:	1800031e 	bne	r3,zero,81114198 <quorem+0x1c4>
8111418c:	10bfff04 	addi	r2,r2,-4
81114190:	94bfffc4 	addi	r18,r18,-1
81114194:	a8bffb36 	bltu	r21,r2,81114184 <__reset+0xfb0f4184>
81114198:	84800415 	stw	r18,16(r16)
8111419c:	9805883a 	mov	r2,r19
811141a0:	dfc00817 	ldw	ra,32(sp)
811141a4:	ddc00717 	ldw	r23,28(sp)
811141a8:	dd800617 	ldw	r22,24(sp)
811141ac:	dd400517 	ldw	r21,20(sp)
811141b0:	dd000417 	ldw	r20,16(sp)
811141b4:	dcc00317 	ldw	r19,12(sp)
811141b8:	dc800217 	ldw	r18,8(sp)
811141bc:	dc400117 	ldw	r17,4(sp)
811141c0:	dc000017 	ldw	r16,0(sp)
811141c4:	dec00904 	addi	sp,sp,36
811141c8:	f800283a 	ret
811141cc:	0005883a 	mov	r2,zero
811141d0:	003ff306 	br	811141a0 <__reset+0xfb0f41a0>

811141d4 <_dtoa_r>:
811141d4:	20801017 	ldw	r2,64(r4)
811141d8:	deffde04 	addi	sp,sp,-136
811141dc:	df002015 	stw	fp,128(sp)
811141e0:	dcc01b15 	stw	r19,108(sp)
811141e4:	dc801a15 	stw	r18,104(sp)
811141e8:	dc401915 	stw	r17,100(sp)
811141ec:	dc001815 	stw	r16,96(sp)
811141f0:	dfc02115 	stw	ra,132(sp)
811141f4:	ddc01f15 	stw	r23,124(sp)
811141f8:	dd801e15 	stw	r22,120(sp)
811141fc:	dd401d15 	stw	r21,116(sp)
81114200:	dd001c15 	stw	r20,112(sp)
81114204:	d9c00315 	stw	r7,12(sp)
81114208:	2039883a 	mov	fp,r4
8111420c:	3023883a 	mov	r17,r6
81114210:	2825883a 	mov	r18,r5
81114214:	dc002417 	ldw	r16,144(sp)
81114218:	3027883a 	mov	r19,r6
8111421c:	10000826 	beq	r2,zero,81114240 <_dtoa_r+0x6c>
81114220:	21801117 	ldw	r6,68(r4)
81114224:	00c00044 	movi	r3,1
81114228:	100b883a 	mov	r5,r2
8111422c:	1986983a 	sll	r3,r3,r6
81114230:	11800115 	stw	r6,4(r2)
81114234:	10c00215 	stw	r3,8(r2)
81114238:	11172f40 	call	811172f4 <_Bfree>
8111423c:	e0001015 	stw	zero,64(fp)
81114240:	88002e16 	blt	r17,zero,811142fc <_dtoa_r+0x128>
81114244:	80000015 	stw	zero,0(r16)
81114248:	889ffc2c 	andhi	r2,r17,32752
8111424c:	00dffc34 	movhi	r3,32752
81114250:	10c01c26 	beq	r2,r3,811142c4 <_dtoa_r+0xf0>
81114254:	000d883a 	mov	r6,zero
81114258:	000f883a 	mov	r7,zero
8111425c:	9009883a 	mov	r4,r18
81114260:	980b883a 	mov	r5,r19
81114264:	1120bd80 	call	81120bd8 <__eqdf2>
81114268:	10002b1e 	bne	r2,zero,81114318 <_dtoa_r+0x144>
8111426c:	d9c02317 	ldw	r7,140(sp)
81114270:	00800044 	movi	r2,1
81114274:	38800015 	stw	r2,0(r7)
81114278:	d8802517 	ldw	r2,148(sp)
8111427c:	10019e26 	beq	r2,zero,811148f8 <_dtoa_r+0x724>
81114280:	d8c02517 	ldw	r3,148(sp)
81114284:	00a044f4 	movhi	r2,33043
81114288:	109d6944 	addi	r2,r2,30117
8111428c:	18800015 	stw	r2,0(r3)
81114290:	10bfffc4 	addi	r2,r2,-1
81114294:	dfc02117 	ldw	ra,132(sp)
81114298:	df002017 	ldw	fp,128(sp)
8111429c:	ddc01f17 	ldw	r23,124(sp)
811142a0:	dd801e17 	ldw	r22,120(sp)
811142a4:	dd401d17 	ldw	r21,116(sp)
811142a8:	dd001c17 	ldw	r20,112(sp)
811142ac:	dcc01b17 	ldw	r19,108(sp)
811142b0:	dc801a17 	ldw	r18,104(sp)
811142b4:	dc401917 	ldw	r17,100(sp)
811142b8:	dc001817 	ldw	r16,96(sp)
811142bc:	dec02204 	addi	sp,sp,136
811142c0:	f800283a 	ret
811142c4:	d8c02317 	ldw	r3,140(sp)
811142c8:	0089c3c4 	movi	r2,9999
811142cc:	18800015 	stw	r2,0(r3)
811142d0:	90017726 	beq	r18,zero,811148b0 <_dtoa_r+0x6dc>
811142d4:	00a044f4 	movhi	r2,33043
811142d8:	109d8704 	addi	r2,r2,30236
811142dc:	d9002517 	ldw	r4,148(sp)
811142e0:	203fec26 	beq	r4,zero,81114294 <__reset+0xfb0f4294>
811142e4:	10c000c7 	ldb	r3,3(r2)
811142e8:	1801781e 	bne	r3,zero,811148cc <_dtoa_r+0x6f8>
811142ec:	10c000c4 	addi	r3,r2,3
811142f0:	d9802517 	ldw	r6,148(sp)
811142f4:	30c00015 	stw	r3,0(r6)
811142f8:	003fe606 	br	81114294 <__reset+0xfb0f4294>
811142fc:	04e00034 	movhi	r19,32768
81114300:	9cffffc4 	addi	r19,r19,-1
81114304:	00800044 	movi	r2,1
81114308:	8ce6703a 	and	r19,r17,r19
8111430c:	80800015 	stw	r2,0(r16)
81114310:	9823883a 	mov	r17,r19
81114314:	003fcc06 	br	81114248 <__reset+0xfb0f4248>
81114318:	d8800204 	addi	r2,sp,8
8111431c:	d8800015 	stw	r2,0(sp)
81114320:	d9c00104 	addi	r7,sp,4
81114324:	900b883a 	mov	r5,r18
81114328:	980d883a 	mov	r6,r19
8111432c:	e009883a 	mov	r4,fp
81114330:	8820d53a 	srli	r16,r17,20
81114334:	1117ee00 	call	81117ee0 <__d2b>
81114338:	d8800915 	stw	r2,36(sp)
8111433c:	8001651e 	bne	r16,zero,811148d4 <_dtoa_r+0x700>
81114340:	dd800217 	ldw	r22,8(sp)
81114344:	dc000117 	ldw	r16,4(sp)
81114348:	00800804 	movi	r2,32
8111434c:	b421883a 	add	r16,r22,r16
81114350:	80c10c84 	addi	r3,r16,1074
81114354:	10c2d10e 	bge	r2,r3,81114e9c <_dtoa_r+0xcc8>
81114358:	00801004 	movi	r2,64
8111435c:	81010484 	addi	r4,r16,1042
81114360:	10c7c83a 	sub	r3,r2,r3
81114364:	9108d83a 	srl	r4,r18,r4
81114368:	88e2983a 	sll	r17,r17,r3
8111436c:	2448b03a 	or	r4,r4,r17
81114370:	11218880 	call	81121888 <__floatunsidf>
81114374:	017f8434 	movhi	r5,65040
81114378:	01800044 	movi	r6,1
8111437c:	1009883a 	mov	r4,r2
81114380:	194b883a 	add	r5,r3,r5
81114384:	843fffc4 	addi	r16,r16,-1
81114388:	d9801115 	stw	r6,68(sp)
8111438c:	000d883a 	mov	r6,zero
81114390:	01cffe34 	movhi	r7,16376
81114394:	1120e300 	call	81120e30 <__subdf3>
81114398:	0198dbf4 	movhi	r6,25455
8111439c:	01cff4f4 	movhi	r7,16339
811143a0:	3190d844 	addi	r6,r6,17249
811143a4:	39e1e9c4 	addi	r7,r7,-30809
811143a8:	1009883a 	mov	r4,r2
811143ac:	180b883a 	mov	r5,r3
811143b0:	110b9380 	call	8110b938 <__muldf3>
811143b4:	01a2d874 	movhi	r6,35681
811143b8:	01cff1f4 	movhi	r7,16327
811143bc:	31b22cc4 	addi	r6,r6,-14157
811143c0:	39e28a04 	addi	r7,r7,-30168
811143c4:	180b883a 	mov	r5,r3
811143c8:	1009883a 	mov	r4,r2
811143cc:	111fa440 	call	8111fa44 <__adddf3>
811143d0:	8009883a 	mov	r4,r16
811143d4:	1029883a 	mov	r20,r2
811143d8:	1823883a 	mov	r17,r3
811143dc:	11217ac0 	call	811217ac <__floatsidf>
811143e0:	019427f4 	movhi	r6,20639
811143e4:	01cff4f4 	movhi	r7,16339
811143e8:	319e7ec4 	addi	r6,r6,31227
811143ec:	39d104c4 	addi	r7,r7,17427
811143f0:	1009883a 	mov	r4,r2
811143f4:	180b883a 	mov	r5,r3
811143f8:	110b9380 	call	8110b938 <__muldf3>
811143fc:	100d883a 	mov	r6,r2
81114400:	180f883a 	mov	r7,r3
81114404:	a009883a 	mov	r4,r20
81114408:	880b883a 	mov	r5,r17
8111440c:	111fa440 	call	8111fa44 <__adddf3>
81114410:	1009883a 	mov	r4,r2
81114414:	180b883a 	mov	r5,r3
81114418:	1029883a 	mov	r20,r2
8111441c:	1823883a 	mov	r17,r3
81114420:	112172c0 	call	8112172c <__fixdfsi>
81114424:	000d883a 	mov	r6,zero
81114428:	000f883a 	mov	r7,zero
8111442c:	a009883a 	mov	r4,r20
81114430:	880b883a 	mov	r5,r17
81114434:	d8800515 	stw	r2,20(sp)
81114438:	1120d3c0 	call	81120d3c <__ledf2>
8111443c:	10028716 	blt	r2,zero,81114e5c <_dtoa_r+0xc88>
81114440:	d8c00517 	ldw	r3,20(sp)
81114444:	00800584 	movi	r2,22
81114448:	10c27536 	bltu	r2,r3,81114e20 <_dtoa_r+0xc4c>
8111444c:	180490fa 	slli	r2,r3,3
81114450:	00e044f4 	movhi	r3,33043
81114454:	18dda204 	addi	r3,r3,30344
81114458:	1885883a 	add	r2,r3,r2
8111445c:	11000017 	ldw	r4,0(r2)
81114460:	11400117 	ldw	r5,4(r2)
81114464:	900d883a 	mov	r6,r18
81114468:	980f883a 	mov	r7,r19
8111446c:	1120c600 	call	81120c60 <__gedf2>
81114470:	00828d0e 	bge	zero,r2,81114ea8 <_dtoa_r+0xcd4>
81114474:	d9000517 	ldw	r4,20(sp)
81114478:	d8000e15 	stw	zero,56(sp)
8111447c:	213fffc4 	addi	r4,r4,-1
81114480:	d9000515 	stw	r4,20(sp)
81114484:	b42dc83a 	sub	r22,r22,r16
81114488:	b5bfffc4 	addi	r22,r22,-1
8111448c:	b0026f16 	blt	r22,zero,81114e4c <_dtoa_r+0xc78>
81114490:	d8000815 	stw	zero,32(sp)
81114494:	d9c00517 	ldw	r7,20(sp)
81114498:	38026416 	blt	r7,zero,81114e2c <_dtoa_r+0xc58>
8111449c:	b1ed883a 	add	r22,r22,r7
811144a0:	d9c00d15 	stw	r7,52(sp)
811144a4:	d8000a15 	stw	zero,40(sp)
811144a8:	d9800317 	ldw	r6,12(sp)
811144ac:	00800244 	movi	r2,9
811144b0:	11811436 	bltu	r2,r6,81114904 <_dtoa_r+0x730>
811144b4:	00800144 	movi	r2,5
811144b8:	1184e10e 	bge	r2,r6,81115840 <_dtoa_r+0x166c>
811144bc:	31bfff04 	addi	r6,r6,-4
811144c0:	d9800315 	stw	r6,12(sp)
811144c4:	0023883a 	mov	r17,zero
811144c8:	d9800317 	ldw	r6,12(sp)
811144cc:	008000c4 	movi	r2,3
811144d0:	30836726 	beq	r6,r2,81115270 <_dtoa_r+0x109c>
811144d4:	1183410e 	bge	r2,r6,811151dc <_dtoa_r+0x1008>
811144d8:	d9c00317 	ldw	r7,12(sp)
811144dc:	00800104 	movi	r2,4
811144e0:	38827c26 	beq	r7,r2,81114ed4 <_dtoa_r+0xd00>
811144e4:	00800144 	movi	r2,5
811144e8:	3884c41e 	bne	r7,r2,811157fc <_dtoa_r+0x1628>
811144ec:	00800044 	movi	r2,1
811144f0:	d8800b15 	stw	r2,44(sp)
811144f4:	d8c00517 	ldw	r3,20(sp)
811144f8:	d9002217 	ldw	r4,136(sp)
811144fc:	1907883a 	add	r3,r3,r4
81114500:	19800044 	addi	r6,r3,1
81114504:	d8c00c15 	stw	r3,48(sp)
81114508:	d9800615 	stw	r6,24(sp)
8111450c:	0183a40e 	bge	zero,r6,811153a0 <_dtoa_r+0x11cc>
81114510:	d9800617 	ldw	r6,24(sp)
81114514:	3021883a 	mov	r16,r6
81114518:	e0001115 	stw	zero,68(fp)
8111451c:	008005c4 	movi	r2,23
81114520:	1184c92e 	bgeu	r2,r6,81115848 <_dtoa_r+0x1674>
81114524:	00c00044 	movi	r3,1
81114528:	00800104 	movi	r2,4
8111452c:	1085883a 	add	r2,r2,r2
81114530:	11000504 	addi	r4,r2,20
81114534:	180b883a 	mov	r5,r3
81114538:	18c00044 	addi	r3,r3,1
8111453c:	313ffb2e 	bgeu	r6,r4,8111452c <__reset+0xfb0f452c>
81114540:	e1401115 	stw	r5,68(fp)
81114544:	e009883a 	mov	r4,fp
81114548:	111724c0 	call	8111724c <_Balloc>
8111454c:	d8800715 	stw	r2,28(sp)
81114550:	e0801015 	stw	r2,64(fp)
81114554:	00800384 	movi	r2,14
81114558:	1400f736 	bltu	r2,r16,81114938 <_dtoa_r+0x764>
8111455c:	8800f626 	beq	r17,zero,81114938 <_dtoa_r+0x764>
81114560:	d9c00517 	ldw	r7,20(sp)
81114564:	01c39a0e 	bge	zero,r7,811153d0 <_dtoa_r+0x11fc>
81114568:	388003cc 	andi	r2,r7,15
8111456c:	100490fa 	slli	r2,r2,3
81114570:	382bd13a 	srai	r21,r7,4
81114574:	00e044f4 	movhi	r3,33043
81114578:	18dda204 	addi	r3,r3,30344
8111457c:	1885883a 	add	r2,r3,r2
81114580:	a8c0040c 	andi	r3,r21,16
81114584:	12400017 	ldw	r9,0(r2)
81114588:	12000117 	ldw	r8,4(r2)
8111458c:	18037926 	beq	r3,zero,81115374 <_dtoa_r+0x11a0>
81114590:	00a044f4 	movhi	r2,33043
81114594:	109d9804 	addi	r2,r2,30304
81114598:	11800817 	ldw	r6,32(r2)
8111459c:	11c00917 	ldw	r7,36(r2)
811145a0:	9009883a 	mov	r4,r18
811145a4:	980b883a 	mov	r5,r19
811145a8:	da001715 	stw	r8,92(sp)
811145ac:	da401615 	stw	r9,88(sp)
811145b0:	11202f00 	call	811202f0 <__divdf3>
811145b4:	da001717 	ldw	r8,92(sp)
811145b8:	da401617 	ldw	r9,88(sp)
811145bc:	ad4003cc 	andi	r21,r21,15
811145c0:	040000c4 	movi	r16,3
811145c4:	1023883a 	mov	r17,r2
811145c8:	1829883a 	mov	r20,r3
811145cc:	a8001126 	beq	r21,zero,81114614 <_dtoa_r+0x440>
811145d0:	05e044f4 	movhi	r23,33043
811145d4:	bddd9804 	addi	r23,r23,30304
811145d8:	4805883a 	mov	r2,r9
811145dc:	4007883a 	mov	r3,r8
811145e0:	a980004c 	andi	r6,r21,1
811145e4:	1009883a 	mov	r4,r2
811145e8:	a82bd07a 	srai	r21,r21,1
811145ec:	180b883a 	mov	r5,r3
811145f0:	30000426 	beq	r6,zero,81114604 <_dtoa_r+0x430>
811145f4:	b9800017 	ldw	r6,0(r23)
811145f8:	b9c00117 	ldw	r7,4(r23)
811145fc:	84000044 	addi	r16,r16,1
81114600:	110b9380 	call	8110b938 <__muldf3>
81114604:	bdc00204 	addi	r23,r23,8
81114608:	a83ff51e 	bne	r21,zero,811145e0 <__reset+0xfb0f45e0>
8111460c:	1013883a 	mov	r9,r2
81114610:	1811883a 	mov	r8,r3
81114614:	480d883a 	mov	r6,r9
81114618:	400f883a 	mov	r7,r8
8111461c:	8809883a 	mov	r4,r17
81114620:	a00b883a 	mov	r5,r20
81114624:	11202f00 	call	811202f0 <__divdf3>
81114628:	d8800f15 	stw	r2,60(sp)
8111462c:	d8c01015 	stw	r3,64(sp)
81114630:	d8c00e17 	ldw	r3,56(sp)
81114634:	18000626 	beq	r3,zero,81114650 <_dtoa_r+0x47c>
81114638:	d9000f17 	ldw	r4,60(sp)
8111463c:	d9401017 	ldw	r5,64(sp)
81114640:	000d883a 	mov	r6,zero
81114644:	01cffc34 	movhi	r7,16368
81114648:	1120d3c0 	call	81120d3c <__ledf2>
8111464c:	10040b16 	blt	r2,zero,8111567c <_dtoa_r+0x14a8>
81114650:	8009883a 	mov	r4,r16
81114654:	11217ac0 	call	811217ac <__floatsidf>
81114658:	d9800f17 	ldw	r6,60(sp)
8111465c:	d9c01017 	ldw	r7,64(sp)
81114660:	1009883a 	mov	r4,r2
81114664:	180b883a 	mov	r5,r3
81114668:	110b9380 	call	8110b938 <__muldf3>
8111466c:	000d883a 	mov	r6,zero
81114670:	01d00734 	movhi	r7,16412
81114674:	1009883a 	mov	r4,r2
81114678:	180b883a 	mov	r5,r3
8111467c:	111fa440 	call	8111fa44 <__adddf3>
81114680:	1021883a 	mov	r16,r2
81114684:	d8800617 	ldw	r2,24(sp)
81114688:	047f3034 	movhi	r17,64704
8111468c:	1c63883a 	add	r17,r3,r17
81114690:	10031826 	beq	r2,zero,811152f4 <_dtoa_r+0x1120>
81114694:	d8c00517 	ldw	r3,20(sp)
81114698:	db000617 	ldw	r12,24(sp)
8111469c:	d8c01315 	stw	r3,76(sp)
811146a0:	d9000b17 	ldw	r4,44(sp)
811146a4:	20038f26 	beq	r4,zero,811154e4 <_dtoa_r+0x1310>
811146a8:	60bfffc4 	addi	r2,r12,-1
811146ac:	100490fa 	slli	r2,r2,3
811146b0:	00e044f4 	movhi	r3,33043
811146b4:	18dda204 	addi	r3,r3,30344
811146b8:	1885883a 	add	r2,r3,r2
811146bc:	11800017 	ldw	r6,0(r2)
811146c0:	11c00117 	ldw	r7,4(r2)
811146c4:	d8800717 	ldw	r2,28(sp)
811146c8:	0009883a 	mov	r4,zero
811146cc:	014ff834 	movhi	r5,16352
811146d0:	db001615 	stw	r12,88(sp)
811146d4:	15c00044 	addi	r23,r2,1
811146d8:	11202f00 	call	811202f0 <__divdf3>
811146dc:	800d883a 	mov	r6,r16
811146e0:	880f883a 	mov	r7,r17
811146e4:	1009883a 	mov	r4,r2
811146e8:	180b883a 	mov	r5,r3
811146ec:	1120e300 	call	81120e30 <__subdf3>
811146f0:	d9401017 	ldw	r5,64(sp)
811146f4:	d9000f17 	ldw	r4,60(sp)
811146f8:	102b883a 	mov	r21,r2
811146fc:	d8c01215 	stw	r3,72(sp)
81114700:	112172c0 	call	8112172c <__fixdfsi>
81114704:	1009883a 	mov	r4,r2
81114708:	1029883a 	mov	r20,r2
8111470c:	11217ac0 	call	811217ac <__floatsidf>
81114710:	d9000f17 	ldw	r4,60(sp)
81114714:	d9401017 	ldw	r5,64(sp)
81114718:	100d883a 	mov	r6,r2
8111471c:	180f883a 	mov	r7,r3
81114720:	1120e300 	call	81120e30 <__subdf3>
81114724:	1823883a 	mov	r17,r3
81114728:	d8c00717 	ldw	r3,28(sp)
8111472c:	d9401217 	ldw	r5,72(sp)
81114730:	a2000c04 	addi	r8,r20,48
81114734:	1021883a 	mov	r16,r2
81114738:	1a000005 	stb	r8,0(r3)
8111473c:	800d883a 	mov	r6,r16
81114740:	880f883a 	mov	r7,r17
81114744:	a809883a 	mov	r4,r21
81114748:	4029883a 	mov	r20,r8
8111474c:	1120c600 	call	81120c60 <__gedf2>
81114750:	00841d16 	blt	zero,r2,811157c8 <_dtoa_r+0x15f4>
81114754:	800d883a 	mov	r6,r16
81114758:	880f883a 	mov	r7,r17
8111475c:	0009883a 	mov	r4,zero
81114760:	014ffc34 	movhi	r5,16368
81114764:	1120e300 	call	81120e30 <__subdf3>
81114768:	d9401217 	ldw	r5,72(sp)
8111476c:	100d883a 	mov	r6,r2
81114770:	180f883a 	mov	r7,r3
81114774:	a809883a 	mov	r4,r21
81114778:	1120c600 	call	81120c60 <__gedf2>
8111477c:	db001617 	ldw	r12,88(sp)
81114780:	00840e16 	blt	zero,r2,811157bc <_dtoa_r+0x15e8>
81114784:	00800044 	movi	r2,1
81114788:	13006b0e 	bge	r2,r12,81114938 <_dtoa_r+0x764>
8111478c:	d9000717 	ldw	r4,28(sp)
81114790:	dd800f15 	stw	r22,60(sp)
81114794:	dcc01015 	stw	r19,64(sp)
81114798:	2319883a 	add	r12,r4,r12
8111479c:	dcc01217 	ldw	r19,72(sp)
811147a0:	602d883a 	mov	r22,r12
811147a4:	dc801215 	stw	r18,72(sp)
811147a8:	b825883a 	mov	r18,r23
811147ac:	00000906 	br	811147d4 <_dtoa_r+0x600>
811147b0:	1120e300 	call	81120e30 <__subdf3>
811147b4:	a80d883a 	mov	r6,r21
811147b8:	980f883a 	mov	r7,r19
811147bc:	1009883a 	mov	r4,r2
811147c0:	180b883a 	mov	r5,r3
811147c4:	1120d3c0 	call	81120d3c <__ledf2>
811147c8:	1003e816 	blt	r2,zero,8111576c <_dtoa_r+0x1598>
811147cc:	b825883a 	mov	r18,r23
811147d0:	bd83e926 	beq	r23,r22,81115778 <_dtoa_r+0x15a4>
811147d4:	a809883a 	mov	r4,r21
811147d8:	980b883a 	mov	r5,r19
811147dc:	000d883a 	mov	r6,zero
811147e0:	01d00934 	movhi	r7,16420
811147e4:	110b9380 	call	8110b938 <__muldf3>
811147e8:	000d883a 	mov	r6,zero
811147ec:	01d00934 	movhi	r7,16420
811147f0:	8009883a 	mov	r4,r16
811147f4:	880b883a 	mov	r5,r17
811147f8:	102b883a 	mov	r21,r2
811147fc:	1827883a 	mov	r19,r3
81114800:	110b9380 	call	8110b938 <__muldf3>
81114804:	180b883a 	mov	r5,r3
81114808:	1009883a 	mov	r4,r2
8111480c:	1821883a 	mov	r16,r3
81114810:	1023883a 	mov	r17,r2
81114814:	112172c0 	call	8112172c <__fixdfsi>
81114818:	1009883a 	mov	r4,r2
8111481c:	1029883a 	mov	r20,r2
81114820:	11217ac0 	call	811217ac <__floatsidf>
81114824:	8809883a 	mov	r4,r17
81114828:	800b883a 	mov	r5,r16
8111482c:	100d883a 	mov	r6,r2
81114830:	180f883a 	mov	r7,r3
81114834:	1120e300 	call	81120e30 <__subdf3>
81114838:	a5000c04 	addi	r20,r20,48
8111483c:	a80d883a 	mov	r6,r21
81114840:	980f883a 	mov	r7,r19
81114844:	1009883a 	mov	r4,r2
81114848:	180b883a 	mov	r5,r3
8111484c:	95000005 	stb	r20,0(r18)
81114850:	1021883a 	mov	r16,r2
81114854:	1823883a 	mov	r17,r3
81114858:	1120d3c0 	call	81120d3c <__ledf2>
8111485c:	bdc00044 	addi	r23,r23,1
81114860:	800d883a 	mov	r6,r16
81114864:	880f883a 	mov	r7,r17
81114868:	0009883a 	mov	r4,zero
8111486c:	014ffc34 	movhi	r5,16368
81114870:	103fcf0e 	bge	r2,zero,811147b0 <__reset+0xfb0f47b0>
81114874:	d8c01317 	ldw	r3,76(sp)
81114878:	d8c00515 	stw	r3,20(sp)
8111487c:	d9400917 	ldw	r5,36(sp)
81114880:	e009883a 	mov	r4,fp
81114884:	11172f40 	call	811172f4 <_Bfree>
81114888:	d9000517 	ldw	r4,20(sp)
8111488c:	d9802317 	ldw	r6,140(sp)
81114890:	d9c02517 	ldw	r7,148(sp)
81114894:	b8000005 	stb	zero,0(r23)
81114898:	20800044 	addi	r2,r4,1
8111489c:	30800015 	stw	r2,0(r6)
811148a0:	3802aa26 	beq	r7,zero,8111534c <_dtoa_r+0x1178>
811148a4:	3dc00015 	stw	r23,0(r7)
811148a8:	d8800717 	ldw	r2,28(sp)
811148ac:	003e7906 	br	81114294 <__reset+0xfb0f4294>
811148b0:	00800434 	movhi	r2,16
811148b4:	10bfffc4 	addi	r2,r2,-1
811148b8:	88a2703a 	and	r17,r17,r2
811148bc:	883e851e 	bne	r17,zero,811142d4 <__reset+0xfb0f42d4>
811148c0:	00a044f4 	movhi	r2,33043
811148c4:	109d8404 	addi	r2,r2,30224
811148c8:	003e8406 	br	811142dc <__reset+0xfb0f42dc>
811148cc:	10c00204 	addi	r3,r2,8
811148d0:	003e8706 	br	811142f0 <__reset+0xfb0f42f0>
811148d4:	01400434 	movhi	r5,16
811148d8:	297fffc4 	addi	r5,r5,-1
811148dc:	994a703a 	and	r5,r19,r5
811148e0:	9009883a 	mov	r4,r18
811148e4:	843f0044 	addi	r16,r16,-1023
811148e8:	294ffc34 	orhi	r5,r5,16368
811148ec:	dd800217 	ldw	r22,8(sp)
811148f0:	d8001115 	stw	zero,68(sp)
811148f4:	003ea506 	br	8111438c <__reset+0xfb0f438c>
811148f8:	00a044f4 	movhi	r2,33043
811148fc:	109d6904 	addi	r2,r2,30116
81114900:	003e6406 	br	81114294 <__reset+0xfb0f4294>
81114904:	e0001115 	stw	zero,68(fp)
81114908:	000b883a 	mov	r5,zero
8111490c:	e009883a 	mov	r4,fp
81114910:	111724c0 	call	8111724c <_Balloc>
81114914:	01bfffc4 	movi	r6,-1
81114918:	01c00044 	movi	r7,1
8111491c:	d8800715 	stw	r2,28(sp)
81114920:	d9800c15 	stw	r6,48(sp)
81114924:	e0801015 	stw	r2,64(fp)
81114928:	d8000315 	stw	zero,12(sp)
8111492c:	d9c00b15 	stw	r7,44(sp)
81114930:	d9800615 	stw	r6,24(sp)
81114934:	d8002215 	stw	zero,136(sp)
81114938:	d8800117 	ldw	r2,4(sp)
8111493c:	10008916 	blt	r2,zero,81114b64 <_dtoa_r+0x990>
81114940:	d9000517 	ldw	r4,20(sp)
81114944:	00c00384 	movi	r3,14
81114948:	19008616 	blt	r3,r4,81114b64 <_dtoa_r+0x990>
8111494c:	200490fa 	slli	r2,r4,3
81114950:	00e044f4 	movhi	r3,33043
81114954:	d9802217 	ldw	r6,136(sp)
81114958:	18dda204 	addi	r3,r3,30344
8111495c:	1885883a 	add	r2,r3,r2
81114960:	14000017 	ldw	r16,0(r2)
81114964:	14400117 	ldw	r17,4(r2)
81114968:	30016316 	blt	r6,zero,81114ef8 <_dtoa_r+0xd24>
8111496c:	800d883a 	mov	r6,r16
81114970:	880f883a 	mov	r7,r17
81114974:	9009883a 	mov	r4,r18
81114978:	980b883a 	mov	r5,r19
8111497c:	11202f00 	call	811202f0 <__divdf3>
81114980:	180b883a 	mov	r5,r3
81114984:	1009883a 	mov	r4,r2
81114988:	112172c0 	call	8112172c <__fixdfsi>
8111498c:	1009883a 	mov	r4,r2
81114990:	102b883a 	mov	r21,r2
81114994:	11217ac0 	call	811217ac <__floatsidf>
81114998:	800d883a 	mov	r6,r16
8111499c:	880f883a 	mov	r7,r17
811149a0:	1009883a 	mov	r4,r2
811149a4:	180b883a 	mov	r5,r3
811149a8:	110b9380 	call	8110b938 <__muldf3>
811149ac:	100d883a 	mov	r6,r2
811149b0:	180f883a 	mov	r7,r3
811149b4:	9009883a 	mov	r4,r18
811149b8:	980b883a 	mov	r5,r19
811149bc:	1120e300 	call	81120e30 <__subdf3>
811149c0:	d9c00717 	ldw	r7,28(sp)
811149c4:	1009883a 	mov	r4,r2
811149c8:	a8800c04 	addi	r2,r21,48
811149cc:	38800005 	stb	r2,0(r7)
811149d0:	3dc00044 	addi	r23,r7,1
811149d4:	d9c00617 	ldw	r7,24(sp)
811149d8:	01800044 	movi	r6,1
811149dc:	180b883a 	mov	r5,r3
811149e0:	2005883a 	mov	r2,r4
811149e4:	39803826 	beq	r7,r6,81114ac8 <_dtoa_r+0x8f4>
811149e8:	000d883a 	mov	r6,zero
811149ec:	01d00934 	movhi	r7,16420
811149f0:	110b9380 	call	8110b938 <__muldf3>
811149f4:	000d883a 	mov	r6,zero
811149f8:	000f883a 	mov	r7,zero
811149fc:	1009883a 	mov	r4,r2
81114a00:	180b883a 	mov	r5,r3
81114a04:	1025883a 	mov	r18,r2
81114a08:	1827883a 	mov	r19,r3
81114a0c:	1120bd80 	call	81120bd8 <__eqdf2>
81114a10:	103f9a26 	beq	r2,zero,8111487c <__reset+0xfb0f487c>
81114a14:	d9c00617 	ldw	r7,24(sp)
81114a18:	d8c00717 	ldw	r3,28(sp)
81114a1c:	b829883a 	mov	r20,r23
81114a20:	38bfffc4 	addi	r2,r7,-1
81114a24:	18ad883a 	add	r22,r3,r2
81114a28:	00000a06 	br	81114a54 <_dtoa_r+0x880>
81114a2c:	110b9380 	call	8110b938 <__muldf3>
81114a30:	000d883a 	mov	r6,zero
81114a34:	000f883a 	mov	r7,zero
81114a38:	1009883a 	mov	r4,r2
81114a3c:	180b883a 	mov	r5,r3
81114a40:	1025883a 	mov	r18,r2
81114a44:	1827883a 	mov	r19,r3
81114a48:	b829883a 	mov	r20,r23
81114a4c:	1120bd80 	call	81120bd8 <__eqdf2>
81114a50:	103f8a26 	beq	r2,zero,8111487c <__reset+0xfb0f487c>
81114a54:	800d883a 	mov	r6,r16
81114a58:	880f883a 	mov	r7,r17
81114a5c:	9009883a 	mov	r4,r18
81114a60:	980b883a 	mov	r5,r19
81114a64:	11202f00 	call	811202f0 <__divdf3>
81114a68:	180b883a 	mov	r5,r3
81114a6c:	1009883a 	mov	r4,r2
81114a70:	112172c0 	call	8112172c <__fixdfsi>
81114a74:	1009883a 	mov	r4,r2
81114a78:	102b883a 	mov	r21,r2
81114a7c:	11217ac0 	call	811217ac <__floatsidf>
81114a80:	800d883a 	mov	r6,r16
81114a84:	880f883a 	mov	r7,r17
81114a88:	1009883a 	mov	r4,r2
81114a8c:	180b883a 	mov	r5,r3
81114a90:	110b9380 	call	8110b938 <__muldf3>
81114a94:	100d883a 	mov	r6,r2
81114a98:	180f883a 	mov	r7,r3
81114a9c:	9009883a 	mov	r4,r18
81114aa0:	980b883a 	mov	r5,r19
81114aa4:	1120e300 	call	81120e30 <__subdf3>
81114aa8:	aa000c04 	addi	r8,r21,48
81114aac:	a2000005 	stb	r8,0(r20)
81114ab0:	000d883a 	mov	r6,zero
81114ab4:	01d00934 	movhi	r7,16420
81114ab8:	1009883a 	mov	r4,r2
81114abc:	180b883a 	mov	r5,r3
81114ac0:	a5c00044 	addi	r23,r20,1
81114ac4:	b53fd91e 	bne	r22,r20,81114a2c <__reset+0xfb0f4a2c>
81114ac8:	100d883a 	mov	r6,r2
81114acc:	180f883a 	mov	r7,r3
81114ad0:	1009883a 	mov	r4,r2
81114ad4:	180b883a 	mov	r5,r3
81114ad8:	111fa440 	call	8111fa44 <__adddf3>
81114adc:	100d883a 	mov	r6,r2
81114ae0:	180f883a 	mov	r7,r3
81114ae4:	8009883a 	mov	r4,r16
81114ae8:	880b883a 	mov	r5,r17
81114aec:	1027883a 	mov	r19,r2
81114af0:	1825883a 	mov	r18,r3
81114af4:	1120d3c0 	call	81120d3c <__ledf2>
81114af8:	10000816 	blt	r2,zero,81114b1c <_dtoa_r+0x948>
81114afc:	980d883a 	mov	r6,r19
81114b00:	900f883a 	mov	r7,r18
81114b04:	8009883a 	mov	r4,r16
81114b08:	880b883a 	mov	r5,r17
81114b0c:	1120bd80 	call	81120bd8 <__eqdf2>
81114b10:	103f5a1e 	bne	r2,zero,8111487c <__reset+0xfb0f487c>
81114b14:	ad40004c 	andi	r21,r21,1
81114b18:	a83f5826 	beq	r21,zero,8111487c <__reset+0xfb0f487c>
81114b1c:	bd3fffc3 	ldbu	r20,-1(r23)
81114b20:	b8bfffc4 	addi	r2,r23,-1
81114b24:	1007883a 	mov	r3,r2
81114b28:	01400e44 	movi	r5,57
81114b2c:	d9800717 	ldw	r6,28(sp)
81114b30:	00000506 	br	81114b48 <_dtoa_r+0x974>
81114b34:	18ffffc4 	addi	r3,r3,-1
81114b38:	11824726 	beq	r2,r6,81115458 <_dtoa_r+0x1284>
81114b3c:	1d000003 	ldbu	r20,0(r3)
81114b40:	102f883a 	mov	r23,r2
81114b44:	10bfffc4 	addi	r2,r2,-1
81114b48:	a1003fcc 	andi	r4,r20,255
81114b4c:	2100201c 	xori	r4,r4,128
81114b50:	213fe004 	addi	r4,r4,-128
81114b54:	217ff726 	beq	r4,r5,81114b34 <__reset+0xfb0f4b34>
81114b58:	a2000044 	addi	r8,r20,1
81114b5c:	12000005 	stb	r8,0(r2)
81114b60:	003f4606 	br	8111487c <__reset+0xfb0f487c>
81114b64:	d9000b17 	ldw	r4,44(sp)
81114b68:	2000c826 	beq	r4,zero,81114e8c <_dtoa_r+0xcb8>
81114b6c:	d9800317 	ldw	r6,12(sp)
81114b70:	00c00044 	movi	r3,1
81114b74:	1980f90e 	bge	r3,r6,81114f5c <_dtoa_r+0xd88>
81114b78:	d8800617 	ldw	r2,24(sp)
81114b7c:	d8c00a17 	ldw	r3,40(sp)
81114b80:	157fffc4 	addi	r21,r2,-1
81114b84:	1d41f316 	blt	r3,r21,81115354 <_dtoa_r+0x1180>
81114b88:	1d6bc83a 	sub	r21,r3,r21
81114b8c:	d9c00617 	ldw	r7,24(sp)
81114b90:	3802aa16 	blt	r7,zero,8111563c <_dtoa_r+0x1468>
81114b94:	dd000817 	ldw	r20,32(sp)
81114b98:	d8800617 	ldw	r2,24(sp)
81114b9c:	d8c00817 	ldw	r3,32(sp)
81114ba0:	01400044 	movi	r5,1
81114ba4:	e009883a 	mov	r4,fp
81114ba8:	1887883a 	add	r3,r3,r2
81114bac:	d8c00815 	stw	r3,32(sp)
81114bb0:	b0ad883a 	add	r22,r22,r2
81114bb4:	11176580 	call	81117658 <__i2b>
81114bb8:	1023883a 	mov	r17,r2
81114bbc:	a0000826 	beq	r20,zero,81114be0 <_dtoa_r+0xa0c>
81114bc0:	0580070e 	bge	zero,r22,81114be0 <_dtoa_r+0xa0c>
81114bc4:	a005883a 	mov	r2,r20
81114bc8:	b500b916 	blt	r22,r20,81114eb0 <_dtoa_r+0xcdc>
81114bcc:	d9000817 	ldw	r4,32(sp)
81114bd0:	a0a9c83a 	sub	r20,r20,r2
81114bd4:	b0adc83a 	sub	r22,r22,r2
81114bd8:	2089c83a 	sub	r4,r4,r2
81114bdc:	d9000815 	stw	r4,32(sp)
81114be0:	d9800a17 	ldw	r6,40(sp)
81114be4:	0181810e 	bge	zero,r6,811151ec <_dtoa_r+0x1018>
81114be8:	d9c00b17 	ldw	r7,44(sp)
81114bec:	3800b326 	beq	r7,zero,81114ebc <_dtoa_r+0xce8>
81114bf0:	a800b226 	beq	r21,zero,81114ebc <_dtoa_r+0xce8>
81114bf4:	880b883a 	mov	r5,r17
81114bf8:	a80d883a 	mov	r6,r21
81114bfc:	e009883a 	mov	r4,fp
81114c00:	111788c0 	call	8111788c <__pow5mult>
81114c04:	d9800917 	ldw	r6,36(sp)
81114c08:	100b883a 	mov	r5,r2
81114c0c:	e009883a 	mov	r4,fp
81114c10:	1023883a 	mov	r17,r2
81114c14:	11176940 	call	81117694 <__multiply>
81114c18:	1021883a 	mov	r16,r2
81114c1c:	d8800a17 	ldw	r2,40(sp)
81114c20:	d9400917 	ldw	r5,36(sp)
81114c24:	e009883a 	mov	r4,fp
81114c28:	1545c83a 	sub	r2,r2,r21
81114c2c:	d8800a15 	stw	r2,40(sp)
81114c30:	11172f40 	call	811172f4 <_Bfree>
81114c34:	d8c00a17 	ldw	r3,40(sp)
81114c38:	18009f1e 	bne	r3,zero,81114eb8 <_dtoa_r+0xce4>
81114c3c:	05c00044 	movi	r23,1
81114c40:	e009883a 	mov	r4,fp
81114c44:	b80b883a 	mov	r5,r23
81114c48:	11176580 	call	81117658 <__i2b>
81114c4c:	d9000d17 	ldw	r4,52(sp)
81114c50:	102b883a 	mov	r21,r2
81114c54:	2000ce26 	beq	r4,zero,81114f90 <_dtoa_r+0xdbc>
81114c58:	200d883a 	mov	r6,r4
81114c5c:	100b883a 	mov	r5,r2
81114c60:	e009883a 	mov	r4,fp
81114c64:	111788c0 	call	8111788c <__pow5mult>
81114c68:	d9800317 	ldw	r6,12(sp)
81114c6c:	102b883a 	mov	r21,r2
81114c70:	b981810e 	bge	r23,r6,81115278 <_dtoa_r+0x10a4>
81114c74:	0027883a 	mov	r19,zero
81114c78:	a8800417 	ldw	r2,16(r21)
81114c7c:	05c00804 	movi	r23,32
81114c80:	10800104 	addi	r2,r2,4
81114c84:	1085883a 	add	r2,r2,r2
81114c88:	1085883a 	add	r2,r2,r2
81114c8c:	a885883a 	add	r2,r21,r2
81114c90:	11000017 	ldw	r4,0(r2)
81114c94:	11175400 	call	81117540 <__hi0bits>
81114c98:	b885c83a 	sub	r2,r23,r2
81114c9c:	1585883a 	add	r2,r2,r22
81114ca0:	108007cc 	andi	r2,r2,31
81114ca4:	1000b326 	beq	r2,zero,81114f74 <_dtoa_r+0xda0>
81114ca8:	00c00804 	movi	r3,32
81114cac:	1887c83a 	sub	r3,r3,r2
81114cb0:	01000104 	movi	r4,4
81114cb4:	20c2cd0e 	bge	r4,r3,811157ec <_dtoa_r+0x1618>
81114cb8:	00c00704 	movi	r3,28
81114cbc:	1885c83a 	sub	r2,r3,r2
81114cc0:	d8c00817 	ldw	r3,32(sp)
81114cc4:	a0a9883a 	add	r20,r20,r2
81114cc8:	b0ad883a 	add	r22,r22,r2
81114ccc:	1887883a 	add	r3,r3,r2
81114cd0:	d8c00815 	stw	r3,32(sp)
81114cd4:	d9800817 	ldw	r6,32(sp)
81114cd8:	0180040e 	bge	zero,r6,81114cec <_dtoa_r+0xb18>
81114cdc:	800b883a 	mov	r5,r16
81114ce0:	e009883a 	mov	r4,fp
81114ce4:	11179cc0 	call	811179cc <__lshift>
81114ce8:	1021883a 	mov	r16,r2
81114cec:	0580050e 	bge	zero,r22,81114d04 <_dtoa_r+0xb30>
81114cf0:	a80b883a 	mov	r5,r21
81114cf4:	b00d883a 	mov	r6,r22
81114cf8:	e009883a 	mov	r4,fp
81114cfc:	11179cc0 	call	811179cc <__lshift>
81114d00:	102b883a 	mov	r21,r2
81114d04:	d9c00e17 	ldw	r7,56(sp)
81114d08:	3801211e 	bne	r7,zero,81115190 <_dtoa_r+0xfbc>
81114d0c:	d9800617 	ldw	r6,24(sp)
81114d10:	0181380e 	bge	zero,r6,811151f4 <_dtoa_r+0x1020>
81114d14:	d8c00b17 	ldw	r3,44(sp)
81114d18:	1800ab1e 	bne	r3,zero,81114fc8 <_dtoa_r+0xdf4>
81114d1c:	dc800717 	ldw	r18,28(sp)
81114d20:	dcc00617 	ldw	r19,24(sp)
81114d24:	9029883a 	mov	r20,r18
81114d28:	00000206 	br	81114d34 <_dtoa_r+0xb60>
81114d2c:	111731c0 	call	8111731c <__multadd>
81114d30:	1021883a 	mov	r16,r2
81114d34:	a80b883a 	mov	r5,r21
81114d38:	8009883a 	mov	r4,r16
81114d3c:	1113fd40 	call	81113fd4 <quorem>
81114d40:	10800c04 	addi	r2,r2,48
81114d44:	90800005 	stb	r2,0(r18)
81114d48:	94800044 	addi	r18,r18,1
81114d4c:	9507c83a 	sub	r3,r18,r20
81114d50:	000f883a 	mov	r7,zero
81114d54:	01800284 	movi	r6,10
81114d58:	800b883a 	mov	r5,r16
81114d5c:	e009883a 	mov	r4,fp
81114d60:	1cfff216 	blt	r3,r19,81114d2c <__reset+0xfb0f4d2c>
81114d64:	1011883a 	mov	r8,r2
81114d68:	d8800617 	ldw	r2,24(sp)
81114d6c:	0082370e 	bge	zero,r2,8111564c <_dtoa_r+0x1478>
81114d70:	d9000717 	ldw	r4,28(sp)
81114d74:	0025883a 	mov	r18,zero
81114d78:	20af883a 	add	r23,r4,r2
81114d7c:	01800044 	movi	r6,1
81114d80:	800b883a 	mov	r5,r16
81114d84:	e009883a 	mov	r4,fp
81114d88:	da001715 	stw	r8,92(sp)
81114d8c:	11179cc0 	call	811179cc <__lshift>
81114d90:	a80b883a 	mov	r5,r21
81114d94:	1009883a 	mov	r4,r2
81114d98:	d8800915 	stw	r2,36(sp)
81114d9c:	1117b140 	call	81117b14 <__mcmp>
81114da0:	da001717 	ldw	r8,92(sp)
81114da4:	0081800e 	bge	zero,r2,811153a8 <_dtoa_r+0x11d4>
81114da8:	b93fffc3 	ldbu	r4,-1(r23)
81114dac:	b8bfffc4 	addi	r2,r23,-1
81114db0:	1007883a 	mov	r3,r2
81114db4:	01800e44 	movi	r6,57
81114db8:	d9c00717 	ldw	r7,28(sp)
81114dbc:	00000506 	br	81114dd4 <_dtoa_r+0xc00>
81114dc0:	18ffffc4 	addi	r3,r3,-1
81114dc4:	11c12326 	beq	r2,r7,81115254 <_dtoa_r+0x1080>
81114dc8:	19000003 	ldbu	r4,0(r3)
81114dcc:	102f883a 	mov	r23,r2
81114dd0:	10bfffc4 	addi	r2,r2,-1
81114dd4:	21403fcc 	andi	r5,r4,255
81114dd8:	2940201c 	xori	r5,r5,128
81114ddc:	297fe004 	addi	r5,r5,-128
81114de0:	29bff726 	beq	r5,r6,81114dc0 <__reset+0xfb0f4dc0>
81114de4:	21000044 	addi	r4,r4,1
81114de8:	11000005 	stb	r4,0(r2)
81114dec:	a80b883a 	mov	r5,r21
81114df0:	e009883a 	mov	r4,fp
81114df4:	11172f40 	call	811172f4 <_Bfree>
81114df8:	883ea026 	beq	r17,zero,8111487c <__reset+0xfb0f487c>
81114dfc:	90000426 	beq	r18,zero,81114e10 <_dtoa_r+0xc3c>
81114e00:	94400326 	beq	r18,r17,81114e10 <_dtoa_r+0xc3c>
81114e04:	900b883a 	mov	r5,r18
81114e08:	e009883a 	mov	r4,fp
81114e0c:	11172f40 	call	811172f4 <_Bfree>
81114e10:	880b883a 	mov	r5,r17
81114e14:	e009883a 	mov	r4,fp
81114e18:	11172f40 	call	811172f4 <_Bfree>
81114e1c:	003e9706 	br	8111487c <__reset+0xfb0f487c>
81114e20:	01800044 	movi	r6,1
81114e24:	d9800e15 	stw	r6,56(sp)
81114e28:	003d9606 	br	81114484 <__reset+0xfb0f4484>
81114e2c:	d8800817 	ldw	r2,32(sp)
81114e30:	d8c00517 	ldw	r3,20(sp)
81114e34:	d8000d15 	stw	zero,52(sp)
81114e38:	10c5c83a 	sub	r2,r2,r3
81114e3c:	00c9c83a 	sub	r4,zero,r3
81114e40:	d8800815 	stw	r2,32(sp)
81114e44:	d9000a15 	stw	r4,40(sp)
81114e48:	003d9706 	br	811144a8 <__reset+0xfb0f44a8>
81114e4c:	05adc83a 	sub	r22,zero,r22
81114e50:	dd800815 	stw	r22,32(sp)
81114e54:	002d883a 	mov	r22,zero
81114e58:	003d8e06 	br	81114494 <__reset+0xfb0f4494>
81114e5c:	d9000517 	ldw	r4,20(sp)
81114e60:	11217ac0 	call	811217ac <__floatsidf>
81114e64:	100d883a 	mov	r6,r2
81114e68:	180f883a 	mov	r7,r3
81114e6c:	a009883a 	mov	r4,r20
81114e70:	880b883a 	mov	r5,r17
81114e74:	1120bd80 	call	81120bd8 <__eqdf2>
81114e78:	103d7126 	beq	r2,zero,81114440 <__reset+0xfb0f4440>
81114e7c:	d9c00517 	ldw	r7,20(sp)
81114e80:	39ffffc4 	addi	r7,r7,-1
81114e84:	d9c00515 	stw	r7,20(sp)
81114e88:	003d6d06 	br	81114440 <__reset+0xfb0f4440>
81114e8c:	dd400a17 	ldw	r21,40(sp)
81114e90:	dd000817 	ldw	r20,32(sp)
81114e94:	0023883a 	mov	r17,zero
81114e98:	003f4806 	br	81114bbc <__reset+0xfb0f4bbc>
81114e9c:	10e3c83a 	sub	r17,r2,r3
81114ea0:	9448983a 	sll	r4,r18,r17
81114ea4:	003d3206 	br	81114370 <__reset+0xfb0f4370>
81114ea8:	d8000e15 	stw	zero,56(sp)
81114eac:	003d7506 	br	81114484 <__reset+0xfb0f4484>
81114eb0:	b005883a 	mov	r2,r22
81114eb4:	003f4506 	br	81114bcc <__reset+0xfb0f4bcc>
81114eb8:	dc000915 	stw	r16,36(sp)
81114ebc:	d9800a17 	ldw	r6,40(sp)
81114ec0:	d9400917 	ldw	r5,36(sp)
81114ec4:	e009883a 	mov	r4,fp
81114ec8:	111788c0 	call	8111788c <__pow5mult>
81114ecc:	1021883a 	mov	r16,r2
81114ed0:	003f5a06 	br	81114c3c <__reset+0xfb0f4c3c>
81114ed4:	01c00044 	movi	r7,1
81114ed8:	d9c00b15 	stw	r7,44(sp)
81114edc:	d8802217 	ldw	r2,136(sp)
81114ee0:	0081280e 	bge	zero,r2,81115384 <_dtoa_r+0x11b0>
81114ee4:	100d883a 	mov	r6,r2
81114ee8:	1021883a 	mov	r16,r2
81114eec:	d8800c15 	stw	r2,48(sp)
81114ef0:	d8800615 	stw	r2,24(sp)
81114ef4:	003d8806 	br	81114518 <__reset+0xfb0f4518>
81114ef8:	d8800617 	ldw	r2,24(sp)
81114efc:	00be9b16 	blt	zero,r2,8111496c <__reset+0xfb0f496c>
81114f00:	10010f1e 	bne	r2,zero,81115340 <_dtoa_r+0x116c>
81114f04:	880b883a 	mov	r5,r17
81114f08:	000d883a 	mov	r6,zero
81114f0c:	01d00534 	movhi	r7,16404
81114f10:	8009883a 	mov	r4,r16
81114f14:	110b9380 	call	8110b938 <__muldf3>
81114f18:	900d883a 	mov	r6,r18
81114f1c:	980f883a 	mov	r7,r19
81114f20:	1009883a 	mov	r4,r2
81114f24:	180b883a 	mov	r5,r3
81114f28:	1120c600 	call	81120c60 <__gedf2>
81114f2c:	002b883a 	mov	r21,zero
81114f30:	0023883a 	mov	r17,zero
81114f34:	1000bf16 	blt	r2,zero,81115234 <_dtoa_r+0x1060>
81114f38:	d9802217 	ldw	r6,136(sp)
81114f3c:	ddc00717 	ldw	r23,28(sp)
81114f40:	018c303a 	nor	r6,zero,r6
81114f44:	d9800515 	stw	r6,20(sp)
81114f48:	a80b883a 	mov	r5,r21
81114f4c:	e009883a 	mov	r4,fp
81114f50:	11172f40 	call	811172f4 <_Bfree>
81114f54:	883e4926 	beq	r17,zero,8111487c <__reset+0xfb0f487c>
81114f58:	003fad06 	br	81114e10 <__reset+0xfb0f4e10>
81114f5c:	d9c01117 	ldw	r7,68(sp)
81114f60:	3801bc26 	beq	r7,zero,81115654 <_dtoa_r+0x1480>
81114f64:	10810cc4 	addi	r2,r2,1075
81114f68:	dd400a17 	ldw	r21,40(sp)
81114f6c:	dd000817 	ldw	r20,32(sp)
81114f70:	003f0a06 	br	81114b9c <__reset+0xfb0f4b9c>
81114f74:	00800704 	movi	r2,28
81114f78:	d9000817 	ldw	r4,32(sp)
81114f7c:	a0a9883a 	add	r20,r20,r2
81114f80:	b0ad883a 	add	r22,r22,r2
81114f84:	2089883a 	add	r4,r4,r2
81114f88:	d9000815 	stw	r4,32(sp)
81114f8c:	003f5106 	br	81114cd4 <__reset+0xfb0f4cd4>
81114f90:	d8c00317 	ldw	r3,12(sp)
81114f94:	b8c1fc0e 	bge	r23,r3,81115788 <_dtoa_r+0x15b4>
81114f98:	0027883a 	mov	r19,zero
81114f9c:	b805883a 	mov	r2,r23
81114fa0:	003f3e06 	br	81114c9c <__reset+0xfb0f4c9c>
81114fa4:	880b883a 	mov	r5,r17
81114fa8:	e009883a 	mov	r4,fp
81114fac:	000f883a 	mov	r7,zero
81114fb0:	01800284 	movi	r6,10
81114fb4:	111731c0 	call	8111731c <__multadd>
81114fb8:	d9000c17 	ldw	r4,48(sp)
81114fbc:	1023883a 	mov	r17,r2
81114fc0:	0102040e 	bge	zero,r4,811157d4 <_dtoa_r+0x1600>
81114fc4:	d9000615 	stw	r4,24(sp)
81114fc8:	0500050e 	bge	zero,r20,81114fe0 <_dtoa_r+0xe0c>
81114fcc:	880b883a 	mov	r5,r17
81114fd0:	a00d883a 	mov	r6,r20
81114fd4:	e009883a 	mov	r4,fp
81114fd8:	11179cc0 	call	811179cc <__lshift>
81114fdc:	1023883a 	mov	r17,r2
81114fe0:	9801241e 	bne	r19,zero,81115474 <_dtoa_r+0x12a0>
81114fe4:	8829883a 	mov	r20,r17
81114fe8:	d9000617 	ldw	r4,24(sp)
81114fec:	dcc00717 	ldw	r19,28(sp)
81114ff0:	9480004c 	andi	r18,r18,1
81114ff4:	20bfffc4 	addi	r2,r4,-1
81114ff8:	9885883a 	add	r2,r19,r2
81114ffc:	d8800415 	stw	r2,16(sp)
81115000:	dc800615 	stw	r18,24(sp)
81115004:	a80b883a 	mov	r5,r21
81115008:	8009883a 	mov	r4,r16
8111500c:	1113fd40 	call	81113fd4 <quorem>
81115010:	880b883a 	mov	r5,r17
81115014:	8009883a 	mov	r4,r16
81115018:	102f883a 	mov	r23,r2
8111501c:	1117b140 	call	81117b14 <__mcmp>
81115020:	a80b883a 	mov	r5,r21
81115024:	a00d883a 	mov	r6,r20
81115028:	e009883a 	mov	r4,fp
8111502c:	102d883a 	mov	r22,r2
81115030:	1117b740 	call	81117b74 <__mdiff>
81115034:	1007883a 	mov	r3,r2
81115038:	10800317 	ldw	r2,12(r2)
8111503c:	bc800c04 	addi	r18,r23,48
81115040:	180b883a 	mov	r5,r3
81115044:	10004e1e 	bne	r2,zero,81115180 <_dtoa_r+0xfac>
81115048:	8009883a 	mov	r4,r16
8111504c:	d8c01615 	stw	r3,88(sp)
81115050:	1117b140 	call	81117b14 <__mcmp>
81115054:	d8c01617 	ldw	r3,88(sp)
81115058:	e009883a 	mov	r4,fp
8111505c:	d8801615 	stw	r2,88(sp)
81115060:	180b883a 	mov	r5,r3
81115064:	11172f40 	call	811172f4 <_Bfree>
81115068:	d8801617 	ldw	r2,88(sp)
8111506c:	1000041e 	bne	r2,zero,81115080 <_dtoa_r+0xeac>
81115070:	d9800317 	ldw	r6,12(sp)
81115074:	3000021e 	bne	r6,zero,81115080 <_dtoa_r+0xeac>
81115078:	d8c00617 	ldw	r3,24(sp)
8111507c:	18003726 	beq	r3,zero,8111515c <_dtoa_r+0xf88>
81115080:	b0002016 	blt	r22,zero,81115104 <_dtoa_r+0xf30>
81115084:	b000041e 	bne	r22,zero,81115098 <_dtoa_r+0xec4>
81115088:	d9000317 	ldw	r4,12(sp)
8111508c:	2000021e 	bne	r4,zero,81115098 <_dtoa_r+0xec4>
81115090:	d8c00617 	ldw	r3,24(sp)
81115094:	18001b26 	beq	r3,zero,81115104 <_dtoa_r+0xf30>
81115098:	00810716 	blt	zero,r2,811154b8 <_dtoa_r+0x12e4>
8111509c:	d8c00417 	ldw	r3,16(sp)
811150a0:	9d800044 	addi	r22,r19,1
811150a4:	9c800005 	stb	r18,0(r19)
811150a8:	b02f883a 	mov	r23,r22
811150ac:	98c10626 	beq	r19,r3,811154c8 <_dtoa_r+0x12f4>
811150b0:	800b883a 	mov	r5,r16
811150b4:	000f883a 	mov	r7,zero
811150b8:	01800284 	movi	r6,10
811150bc:	e009883a 	mov	r4,fp
811150c0:	111731c0 	call	8111731c <__multadd>
811150c4:	1021883a 	mov	r16,r2
811150c8:	000f883a 	mov	r7,zero
811150cc:	01800284 	movi	r6,10
811150d0:	880b883a 	mov	r5,r17
811150d4:	e009883a 	mov	r4,fp
811150d8:	8d002526 	beq	r17,r20,81115170 <_dtoa_r+0xf9c>
811150dc:	111731c0 	call	8111731c <__multadd>
811150e0:	a00b883a 	mov	r5,r20
811150e4:	000f883a 	mov	r7,zero
811150e8:	01800284 	movi	r6,10
811150ec:	e009883a 	mov	r4,fp
811150f0:	1023883a 	mov	r17,r2
811150f4:	111731c0 	call	8111731c <__multadd>
811150f8:	1029883a 	mov	r20,r2
811150fc:	b027883a 	mov	r19,r22
81115100:	003fc006 	br	81115004 <__reset+0xfb0f5004>
81115104:	9011883a 	mov	r8,r18
81115108:	00800e0e 	bge	zero,r2,81115144 <_dtoa_r+0xf70>
8111510c:	800b883a 	mov	r5,r16
81115110:	01800044 	movi	r6,1
81115114:	e009883a 	mov	r4,fp
81115118:	da001715 	stw	r8,92(sp)
8111511c:	11179cc0 	call	811179cc <__lshift>
81115120:	a80b883a 	mov	r5,r21
81115124:	1009883a 	mov	r4,r2
81115128:	1021883a 	mov	r16,r2
8111512c:	1117b140 	call	81117b14 <__mcmp>
81115130:	da001717 	ldw	r8,92(sp)
81115134:	0081960e 	bge	zero,r2,81115790 <_dtoa_r+0x15bc>
81115138:	00800e44 	movi	r2,57
8111513c:	40817026 	beq	r8,r2,81115700 <_dtoa_r+0x152c>
81115140:	ba000c44 	addi	r8,r23,49
81115144:	8825883a 	mov	r18,r17
81115148:	9dc00044 	addi	r23,r19,1
8111514c:	9a000005 	stb	r8,0(r19)
81115150:	a023883a 	mov	r17,r20
81115154:	dc000915 	stw	r16,36(sp)
81115158:	003f2406 	br	81114dec <__reset+0xfb0f4dec>
8111515c:	00800e44 	movi	r2,57
81115160:	9011883a 	mov	r8,r18
81115164:	90816626 	beq	r18,r2,81115700 <_dtoa_r+0x152c>
81115168:	05bff516 	blt	zero,r22,81115140 <__reset+0xfb0f5140>
8111516c:	003ff506 	br	81115144 <__reset+0xfb0f5144>
81115170:	111731c0 	call	8111731c <__multadd>
81115174:	1023883a 	mov	r17,r2
81115178:	1029883a 	mov	r20,r2
8111517c:	003fdf06 	br	811150fc <__reset+0xfb0f50fc>
81115180:	e009883a 	mov	r4,fp
81115184:	11172f40 	call	811172f4 <_Bfree>
81115188:	00800044 	movi	r2,1
8111518c:	003fbc06 	br	81115080 <__reset+0xfb0f5080>
81115190:	a80b883a 	mov	r5,r21
81115194:	8009883a 	mov	r4,r16
81115198:	1117b140 	call	81117b14 <__mcmp>
8111519c:	103edb0e 	bge	r2,zero,81114d0c <__reset+0xfb0f4d0c>
811151a0:	800b883a 	mov	r5,r16
811151a4:	000f883a 	mov	r7,zero
811151a8:	01800284 	movi	r6,10
811151ac:	e009883a 	mov	r4,fp
811151b0:	111731c0 	call	8111731c <__multadd>
811151b4:	1021883a 	mov	r16,r2
811151b8:	d8800517 	ldw	r2,20(sp)
811151bc:	d8c00b17 	ldw	r3,44(sp)
811151c0:	10bfffc4 	addi	r2,r2,-1
811151c4:	d8800515 	stw	r2,20(sp)
811151c8:	183f761e 	bne	r3,zero,81114fa4 <__reset+0xfb0f4fa4>
811151cc:	d9000c17 	ldw	r4,48(sp)
811151d0:	0101730e 	bge	zero,r4,811157a0 <_dtoa_r+0x15cc>
811151d4:	d9000615 	stw	r4,24(sp)
811151d8:	003ed006 	br	81114d1c <__reset+0xfb0f4d1c>
811151dc:	00800084 	movi	r2,2
811151e0:	3081861e 	bne	r6,r2,811157fc <_dtoa_r+0x1628>
811151e4:	d8000b15 	stw	zero,44(sp)
811151e8:	003f3c06 	br	81114edc <__reset+0xfb0f4edc>
811151ec:	dc000917 	ldw	r16,36(sp)
811151f0:	003e9206 	br	81114c3c <__reset+0xfb0f4c3c>
811151f4:	d9c00317 	ldw	r7,12(sp)
811151f8:	00800084 	movi	r2,2
811151fc:	11fec50e 	bge	r2,r7,81114d14 <__reset+0xfb0f4d14>
81115200:	d9000617 	ldw	r4,24(sp)
81115204:	20013c1e 	bne	r4,zero,811156f8 <_dtoa_r+0x1524>
81115208:	a80b883a 	mov	r5,r21
8111520c:	000f883a 	mov	r7,zero
81115210:	01800144 	movi	r6,5
81115214:	e009883a 	mov	r4,fp
81115218:	111731c0 	call	8111731c <__multadd>
8111521c:	100b883a 	mov	r5,r2
81115220:	8009883a 	mov	r4,r16
81115224:	102b883a 	mov	r21,r2
81115228:	1117b140 	call	81117b14 <__mcmp>
8111522c:	dc000915 	stw	r16,36(sp)
81115230:	00bf410e 	bge	zero,r2,81114f38 <__reset+0xfb0f4f38>
81115234:	d9c00717 	ldw	r7,28(sp)
81115238:	00800c44 	movi	r2,49
8111523c:	38800005 	stb	r2,0(r7)
81115240:	d8800517 	ldw	r2,20(sp)
81115244:	3dc00044 	addi	r23,r7,1
81115248:	10800044 	addi	r2,r2,1
8111524c:	d8800515 	stw	r2,20(sp)
81115250:	003f3d06 	br	81114f48 <__reset+0xfb0f4f48>
81115254:	d9800517 	ldw	r6,20(sp)
81115258:	d9c00717 	ldw	r7,28(sp)
8111525c:	00800c44 	movi	r2,49
81115260:	31800044 	addi	r6,r6,1
81115264:	d9800515 	stw	r6,20(sp)
81115268:	38800005 	stb	r2,0(r7)
8111526c:	003edf06 	br	81114dec <__reset+0xfb0f4dec>
81115270:	d8000b15 	stw	zero,44(sp)
81115274:	003c9f06 	br	811144f4 <__reset+0xfb0f44f4>
81115278:	903e7e1e 	bne	r18,zero,81114c74 <__reset+0xfb0f4c74>
8111527c:	00800434 	movhi	r2,16
81115280:	10bfffc4 	addi	r2,r2,-1
81115284:	9884703a 	and	r2,r19,r2
81115288:	1000ea1e 	bne	r2,zero,81115634 <_dtoa_r+0x1460>
8111528c:	9cdffc2c 	andhi	r19,r19,32752
81115290:	9800e826 	beq	r19,zero,81115634 <_dtoa_r+0x1460>
81115294:	d9c00817 	ldw	r7,32(sp)
81115298:	b5800044 	addi	r22,r22,1
8111529c:	04c00044 	movi	r19,1
811152a0:	39c00044 	addi	r7,r7,1
811152a4:	d9c00815 	stw	r7,32(sp)
811152a8:	d8800d17 	ldw	r2,52(sp)
811152ac:	103e721e 	bne	r2,zero,81114c78 <__reset+0xfb0f4c78>
811152b0:	00800044 	movi	r2,1
811152b4:	003e7906 	br	81114c9c <__reset+0xfb0f4c9c>
811152b8:	8009883a 	mov	r4,r16
811152bc:	11217ac0 	call	811217ac <__floatsidf>
811152c0:	d9800f17 	ldw	r6,60(sp)
811152c4:	d9c01017 	ldw	r7,64(sp)
811152c8:	1009883a 	mov	r4,r2
811152cc:	180b883a 	mov	r5,r3
811152d0:	110b9380 	call	8110b938 <__muldf3>
811152d4:	000d883a 	mov	r6,zero
811152d8:	01d00734 	movhi	r7,16412
811152dc:	1009883a 	mov	r4,r2
811152e0:	180b883a 	mov	r5,r3
811152e4:	111fa440 	call	8111fa44 <__adddf3>
811152e8:	047f3034 	movhi	r17,64704
811152ec:	1021883a 	mov	r16,r2
811152f0:	1c63883a 	add	r17,r3,r17
811152f4:	d9000f17 	ldw	r4,60(sp)
811152f8:	d9401017 	ldw	r5,64(sp)
811152fc:	000d883a 	mov	r6,zero
81115300:	01d00534 	movhi	r7,16404
81115304:	1120e300 	call	81120e30 <__subdf3>
81115308:	800d883a 	mov	r6,r16
8111530c:	880f883a 	mov	r7,r17
81115310:	1009883a 	mov	r4,r2
81115314:	180b883a 	mov	r5,r3
81115318:	102b883a 	mov	r21,r2
8111531c:	1829883a 	mov	r20,r3
81115320:	1120c600 	call	81120c60 <__gedf2>
81115324:	00806c16 	blt	zero,r2,811154d8 <_dtoa_r+0x1304>
81115328:	89e0003c 	xorhi	r7,r17,32768
8111532c:	800d883a 	mov	r6,r16
81115330:	a809883a 	mov	r4,r21
81115334:	a00b883a 	mov	r5,r20
81115338:	1120d3c0 	call	81120d3c <__ledf2>
8111533c:	103d7e0e 	bge	r2,zero,81114938 <__reset+0xfb0f4938>
81115340:	002b883a 	mov	r21,zero
81115344:	0023883a 	mov	r17,zero
81115348:	003efb06 	br	81114f38 <__reset+0xfb0f4f38>
8111534c:	d8800717 	ldw	r2,28(sp)
81115350:	003bd006 	br	81114294 <__reset+0xfb0f4294>
81115354:	d9000a17 	ldw	r4,40(sp)
81115358:	d9800d17 	ldw	r6,52(sp)
8111535c:	dd400a15 	stw	r21,40(sp)
81115360:	a905c83a 	sub	r2,r21,r4
81115364:	308d883a 	add	r6,r6,r2
81115368:	d9800d15 	stw	r6,52(sp)
8111536c:	002b883a 	mov	r21,zero
81115370:	003e0606 	br	81114b8c <__reset+0xfb0f4b8c>
81115374:	9023883a 	mov	r17,r18
81115378:	9829883a 	mov	r20,r19
8111537c:	04000084 	movi	r16,2
81115380:	003c9206 	br	811145cc <__reset+0xfb0f45cc>
81115384:	04000044 	movi	r16,1
81115388:	dc000c15 	stw	r16,48(sp)
8111538c:	dc000615 	stw	r16,24(sp)
81115390:	dc002215 	stw	r16,136(sp)
81115394:	e0001115 	stw	zero,68(fp)
81115398:	000b883a 	mov	r5,zero
8111539c:	003c6906 	br	81114544 <__reset+0xfb0f4544>
811153a0:	3021883a 	mov	r16,r6
811153a4:	003ffb06 	br	81115394 <__reset+0xfb0f5394>
811153a8:	1000021e 	bne	r2,zero,811153b4 <_dtoa_r+0x11e0>
811153ac:	4200004c 	andi	r8,r8,1
811153b0:	403e7d1e 	bne	r8,zero,81114da8 <__reset+0xfb0f4da8>
811153b4:	01000c04 	movi	r4,48
811153b8:	00000106 	br	811153c0 <_dtoa_r+0x11ec>
811153bc:	102f883a 	mov	r23,r2
811153c0:	b8bfffc4 	addi	r2,r23,-1
811153c4:	10c00007 	ldb	r3,0(r2)
811153c8:	193ffc26 	beq	r3,r4,811153bc <__reset+0xfb0f53bc>
811153cc:	003e8706 	br	81114dec <__reset+0xfb0f4dec>
811153d0:	d8800517 	ldw	r2,20(sp)
811153d4:	00a3c83a 	sub	r17,zero,r2
811153d8:	8800a426 	beq	r17,zero,8111566c <_dtoa_r+0x1498>
811153dc:	888003cc 	andi	r2,r17,15
811153e0:	100490fa 	slli	r2,r2,3
811153e4:	00e044f4 	movhi	r3,33043
811153e8:	18dda204 	addi	r3,r3,30344
811153ec:	1885883a 	add	r2,r3,r2
811153f0:	11800017 	ldw	r6,0(r2)
811153f4:	11c00117 	ldw	r7,4(r2)
811153f8:	9009883a 	mov	r4,r18
811153fc:	980b883a 	mov	r5,r19
81115400:	8823d13a 	srai	r17,r17,4
81115404:	110b9380 	call	8110b938 <__muldf3>
81115408:	d8800f15 	stw	r2,60(sp)
8111540c:	d8c01015 	stw	r3,64(sp)
81115410:	8800e826 	beq	r17,zero,811157b4 <_dtoa_r+0x15e0>
81115414:	052044f4 	movhi	r20,33043
81115418:	a51d9804 	addi	r20,r20,30304
8111541c:	04000084 	movi	r16,2
81115420:	8980004c 	andi	r6,r17,1
81115424:	1009883a 	mov	r4,r2
81115428:	8823d07a 	srai	r17,r17,1
8111542c:	180b883a 	mov	r5,r3
81115430:	30000426 	beq	r6,zero,81115444 <_dtoa_r+0x1270>
81115434:	a1800017 	ldw	r6,0(r20)
81115438:	a1c00117 	ldw	r7,4(r20)
8111543c:	84000044 	addi	r16,r16,1
81115440:	110b9380 	call	8110b938 <__muldf3>
81115444:	a5000204 	addi	r20,r20,8
81115448:	883ff51e 	bne	r17,zero,81115420 <__reset+0xfb0f5420>
8111544c:	d8800f15 	stw	r2,60(sp)
81115450:	d8c01015 	stw	r3,64(sp)
81115454:	003c7606 	br	81114630 <__reset+0xfb0f4630>
81115458:	00c00c04 	movi	r3,48
8111545c:	10c00005 	stb	r3,0(r2)
81115460:	d8c00517 	ldw	r3,20(sp)
81115464:	bd3fffc3 	ldbu	r20,-1(r23)
81115468:	18c00044 	addi	r3,r3,1
8111546c:	d8c00515 	stw	r3,20(sp)
81115470:	003db906 	br	81114b58 <__reset+0xfb0f4b58>
81115474:	89400117 	ldw	r5,4(r17)
81115478:	e009883a 	mov	r4,fp
8111547c:	111724c0 	call	8111724c <_Balloc>
81115480:	89800417 	ldw	r6,16(r17)
81115484:	89400304 	addi	r5,r17,12
81115488:	11000304 	addi	r4,r2,12
8111548c:	31800084 	addi	r6,r6,2
81115490:	318d883a 	add	r6,r6,r6
81115494:	318d883a 	add	r6,r6,r6
81115498:	1027883a 	mov	r19,r2
8111549c:	110d4800 	call	8110d480 <memcpy>
811154a0:	01800044 	movi	r6,1
811154a4:	980b883a 	mov	r5,r19
811154a8:	e009883a 	mov	r4,fp
811154ac:	11179cc0 	call	811179cc <__lshift>
811154b0:	1029883a 	mov	r20,r2
811154b4:	003ecc06 	br	81114fe8 <__reset+0xfb0f4fe8>
811154b8:	00800e44 	movi	r2,57
811154bc:	90809026 	beq	r18,r2,81115700 <_dtoa_r+0x152c>
811154c0:	92000044 	addi	r8,r18,1
811154c4:	003f1f06 	br	81115144 <__reset+0xfb0f5144>
811154c8:	9011883a 	mov	r8,r18
811154cc:	8825883a 	mov	r18,r17
811154d0:	a023883a 	mov	r17,r20
811154d4:	003e2906 	br	81114d7c <__reset+0xfb0f4d7c>
811154d8:	002b883a 	mov	r21,zero
811154dc:	0023883a 	mov	r17,zero
811154e0:	003f5406 	br	81115234 <__reset+0xfb0f5234>
811154e4:	61bfffc4 	addi	r6,r12,-1
811154e8:	300490fa 	slli	r2,r6,3
811154ec:	00e044f4 	movhi	r3,33043
811154f0:	18dda204 	addi	r3,r3,30344
811154f4:	1885883a 	add	r2,r3,r2
811154f8:	11000017 	ldw	r4,0(r2)
811154fc:	11400117 	ldw	r5,4(r2)
81115500:	d8800717 	ldw	r2,28(sp)
81115504:	880f883a 	mov	r7,r17
81115508:	d9801215 	stw	r6,72(sp)
8111550c:	800d883a 	mov	r6,r16
81115510:	db001615 	stw	r12,88(sp)
81115514:	15c00044 	addi	r23,r2,1
81115518:	110b9380 	call	8110b938 <__muldf3>
8111551c:	d9401017 	ldw	r5,64(sp)
81115520:	d9000f17 	ldw	r4,60(sp)
81115524:	d8c01515 	stw	r3,84(sp)
81115528:	d8801415 	stw	r2,80(sp)
8111552c:	112172c0 	call	8112172c <__fixdfsi>
81115530:	1009883a 	mov	r4,r2
81115534:	1021883a 	mov	r16,r2
81115538:	11217ac0 	call	811217ac <__floatsidf>
8111553c:	d9000f17 	ldw	r4,60(sp)
81115540:	d9401017 	ldw	r5,64(sp)
81115544:	100d883a 	mov	r6,r2
81115548:	180f883a 	mov	r7,r3
8111554c:	1120e300 	call	81120e30 <__subdf3>
81115550:	1829883a 	mov	r20,r3
81115554:	d8c00717 	ldw	r3,28(sp)
81115558:	84000c04 	addi	r16,r16,48
8111555c:	1023883a 	mov	r17,r2
81115560:	1c000005 	stb	r16,0(r3)
81115564:	db001617 	ldw	r12,88(sp)
81115568:	00800044 	movi	r2,1
8111556c:	60802226 	beq	r12,r2,811155f8 <_dtoa_r+0x1424>
81115570:	d9c00717 	ldw	r7,28(sp)
81115574:	8805883a 	mov	r2,r17
81115578:	b82b883a 	mov	r21,r23
8111557c:	3b19883a 	add	r12,r7,r12
81115580:	6023883a 	mov	r17,r12
81115584:	a007883a 	mov	r3,r20
81115588:	dc800f15 	stw	r18,60(sp)
8111558c:	000d883a 	mov	r6,zero
81115590:	01d00934 	movhi	r7,16420
81115594:	1009883a 	mov	r4,r2
81115598:	180b883a 	mov	r5,r3
8111559c:	110b9380 	call	8110b938 <__muldf3>
811155a0:	180b883a 	mov	r5,r3
811155a4:	1009883a 	mov	r4,r2
811155a8:	1829883a 	mov	r20,r3
811155ac:	1025883a 	mov	r18,r2
811155b0:	112172c0 	call	8112172c <__fixdfsi>
811155b4:	1009883a 	mov	r4,r2
811155b8:	1021883a 	mov	r16,r2
811155bc:	11217ac0 	call	811217ac <__floatsidf>
811155c0:	100d883a 	mov	r6,r2
811155c4:	180f883a 	mov	r7,r3
811155c8:	9009883a 	mov	r4,r18
811155cc:	a00b883a 	mov	r5,r20
811155d0:	84000c04 	addi	r16,r16,48
811155d4:	1120e300 	call	81120e30 <__subdf3>
811155d8:	ad400044 	addi	r21,r21,1
811155dc:	ac3fffc5 	stb	r16,-1(r21)
811155e0:	ac7fea1e 	bne	r21,r17,8111558c <__reset+0xfb0f558c>
811155e4:	1023883a 	mov	r17,r2
811155e8:	d8801217 	ldw	r2,72(sp)
811155ec:	dc800f17 	ldw	r18,60(sp)
811155f0:	1829883a 	mov	r20,r3
811155f4:	b8af883a 	add	r23,r23,r2
811155f8:	d9001417 	ldw	r4,80(sp)
811155fc:	d9401517 	ldw	r5,84(sp)
81115600:	000d883a 	mov	r6,zero
81115604:	01cff834 	movhi	r7,16352
81115608:	111fa440 	call	8111fa44 <__adddf3>
8111560c:	880d883a 	mov	r6,r17
81115610:	a00f883a 	mov	r7,r20
81115614:	1009883a 	mov	r4,r2
81115618:	180b883a 	mov	r5,r3
8111561c:	1120d3c0 	call	81120d3c <__ledf2>
81115620:	10003e0e 	bge	r2,zero,8111571c <_dtoa_r+0x1548>
81115624:	d9001317 	ldw	r4,76(sp)
81115628:	bd3fffc3 	ldbu	r20,-1(r23)
8111562c:	d9000515 	stw	r4,20(sp)
81115630:	003d3b06 	br	81114b20 <__reset+0xfb0f4b20>
81115634:	0027883a 	mov	r19,zero
81115638:	003f1b06 	br	811152a8 <__reset+0xfb0f52a8>
8111563c:	d8800817 	ldw	r2,32(sp)
81115640:	11e9c83a 	sub	r20,r2,r7
81115644:	0005883a 	mov	r2,zero
81115648:	003d5406 	br	81114b9c <__reset+0xfb0f4b9c>
8111564c:	00800044 	movi	r2,1
81115650:	003dc706 	br	81114d70 <__reset+0xfb0f4d70>
81115654:	d8c00217 	ldw	r3,8(sp)
81115658:	00800d84 	movi	r2,54
8111565c:	dd400a17 	ldw	r21,40(sp)
81115660:	10c5c83a 	sub	r2,r2,r3
81115664:	dd000817 	ldw	r20,32(sp)
81115668:	003d4c06 	br	81114b9c <__reset+0xfb0f4b9c>
8111566c:	dc800f15 	stw	r18,60(sp)
81115670:	dcc01015 	stw	r19,64(sp)
81115674:	04000084 	movi	r16,2
81115678:	003bed06 	br	81114630 <__reset+0xfb0f4630>
8111567c:	d9000617 	ldw	r4,24(sp)
81115680:	203f0d26 	beq	r4,zero,811152b8 <__reset+0xfb0f52b8>
81115684:	d9800c17 	ldw	r6,48(sp)
81115688:	01bcab0e 	bge	zero,r6,81114938 <__reset+0xfb0f4938>
8111568c:	d9401017 	ldw	r5,64(sp)
81115690:	d9000f17 	ldw	r4,60(sp)
81115694:	000d883a 	mov	r6,zero
81115698:	01d00934 	movhi	r7,16420
8111569c:	110b9380 	call	8110b938 <__muldf3>
811156a0:	81000044 	addi	r4,r16,1
811156a4:	d8800f15 	stw	r2,60(sp)
811156a8:	d8c01015 	stw	r3,64(sp)
811156ac:	11217ac0 	call	811217ac <__floatsidf>
811156b0:	d9800f17 	ldw	r6,60(sp)
811156b4:	d9c01017 	ldw	r7,64(sp)
811156b8:	1009883a 	mov	r4,r2
811156bc:	180b883a 	mov	r5,r3
811156c0:	110b9380 	call	8110b938 <__muldf3>
811156c4:	01d00734 	movhi	r7,16412
811156c8:	000d883a 	mov	r6,zero
811156cc:	1009883a 	mov	r4,r2
811156d0:	180b883a 	mov	r5,r3
811156d4:	111fa440 	call	8111fa44 <__adddf3>
811156d8:	d9c00517 	ldw	r7,20(sp)
811156dc:	047f3034 	movhi	r17,64704
811156e0:	1021883a 	mov	r16,r2
811156e4:	39ffffc4 	addi	r7,r7,-1
811156e8:	d9c01315 	stw	r7,76(sp)
811156ec:	1c63883a 	add	r17,r3,r17
811156f0:	db000c17 	ldw	r12,48(sp)
811156f4:	003bea06 	br	811146a0 <__reset+0xfb0f46a0>
811156f8:	dc000915 	stw	r16,36(sp)
811156fc:	003e0e06 	br	81114f38 <__reset+0xfb0f4f38>
81115700:	01000e44 	movi	r4,57
81115704:	8825883a 	mov	r18,r17
81115708:	9dc00044 	addi	r23,r19,1
8111570c:	99000005 	stb	r4,0(r19)
81115710:	a023883a 	mov	r17,r20
81115714:	dc000915 	stw	r16,36(sp)
81115718:	003da406 	br	81114dac <__reset+0xfb0f4dac>
8111571c:	d9801417 	ldw	r6,80(sp)
81115720:	d9c01517 	ldw	r7,84(sp)
81115724:	0009883a 	mov	r4,zero
81115728:	014ff834 	movhi	r5,16352
8111572c:	1120e300 	call	81120e30 <__subdf3>
81115730:	880d883a 	mov	r6,r17
81115734:	a00f883a 	mov	r7,r20
81115738:	1009883a 	mov	r4,r2
8111573c:	180b883a 	mov	r5,r3
81115740:	1120c600 	call	81120c60 <__gedf2>
81115744:	00bc7c0e 	bge	zero,r2,81114938 <__reset+0xfb0f4938>
81115748:	01000c04 	movi	r4,48
8111574c:	00000106 	br	81115754 <_dtoa_r+0x1580>
81115750:	102f883a 	mov	r23,r2
81115754:	b8bfffc4 	addi	r2,r23,-1
81115758:	10c00007 	ldb	r3,0(r2)
8111575c:	193ffc26 	beq	r3,r4,81115750 <__reset+0xfb0f5750>
81115760:	d9801317 	ldw	r6,76(sp)
81115764:	d9800515 	stw	r6,20(sp)
81115768:	003c4406 	br	8111487c <__reset+0xfb0f487c>
8111576c:	d9801317 	ldw	r6,76(sp)
81115770:	d9800515 	stw	r6,20(sp)
81115774:	003cea06 	br	81114b20 <__reset+0xfb0f4b20>
81115778:	dd800f17 	ldw	r22,60(sp)
8111577c:	dcc01017 	ldw	r19,64(sp)
81115780:	dc801217 	ldw	r18,72(sp)
81115784:	003c6c06 	br	81114938 <__reset+0xfb0f4938>
81115788:	903e031e 	bne	r18,zero,81114f98 <__reset+0xfb0f4f98>
8111578c:	003ebb06 	br	8111527c <__reset+0xfb0f527c>
81115790:	103e6c1e 	bne	r2,zero,81115144 <__reset+0xfb0f5144>
81115794:	4080004c 	andi	r2,r8,1
81115798:	103e6a26 	beq	r2,zero,81115144 <__reset+0xfb0f5144>
8111579c:	003e6606 	br	81115138 <__reset+0xfb0f5138>
811157a0:	d8c00317 	ldw	r3,12(sp)
811157a4:	00800084 	movi	r2,2
811157a8:	10c02916 	blt	r2,r3,81115850 <_dtoa_r+0x167c>
811157ac:	d9000c17 	ldw	r4,48(sp)
811157b0:	003e8806 	br	811151d4 <__reset+0xfb0f51d4>
811157b4:	04000084 	movi	r16,2
811157b8:	003b9d06 	br	81114630 <__reset+0xfb0f4630>
811157bc:	d9001317 	ldw	r4,76(sp)
811157c0:	d9000515 	stw	r4,20(sp)
811157c4:	003cd606 	br	81114b20 <__reset+0xfb0f4b20>
811157c8:	d8801317 	ldw	r2,76(sp)
811157cc:	d8800515 	stw	r2,20(sp)
811157d0:	003c2a06 	br	8111487c <__reset+0xfb0f487c>
811157d4:	d9800317 	ldw	r6,12(sp)
811157d8:	00800084 	movi	r2,2
811157dc:	11801516 	blt	r2,r6,81115834 <_dtoa_r+0x1660>
811157e0:	d9c00c17 	ldw	r7,48(sp)
811157e4:	d9c00615 	stw	r7,24(sp)
811157e8:	003df706 	br	81114fc8 <__reset+0xfb0f4fc8>
811157ec:	193d3926 	beq	r3,r4,81114cd4 <__reset+0xfb0f4cd4>
811157f0:	00c00f04 	movi	r3,60
811157f4:	1885c83a 	sub	r2,r3,r2
811157f8:	003ddf06 	br	81114f78 <__reset+0xfb0f4f78>
811157fc:	e009883a 	mov	r4,fp
81115800:	e0001115 	stw	zero,68(fp)
81115804:	000b883a 	mov	r5,zero
81115808:	111724c0 	call	8111724c <_Balloc>
8111580c:	d8800715 	stw	r2,28(sp)
81115810:	d8c00717 	ldw	r3,28(sp)
81115814:	00bfffc4 	movi	r2,-1
81115818:	01000044 	movi	r4,1
8111581c:	d8800c15 	stw	r2,48(sp)
81115820:	e0c01015 	stw	r3,64(fp)
81115824:	d9000b15 	stw	r4,44(sp)
81115828:	d8800615 	stw	r2,24(sp)
8111582c:	d8002215 	stw	zero,136(sp)
81115830:	003c4106 	br	81114938 <__reset+0xfb0f4938>
81115834:	d8c00c17 	ldw	r3,48(sp)
81115838:	d8c00615 	stw	r3,24(sp)
8111583c:	003e7006 	br	81115200 <__reset+0xfb0f5200>
81115840:	04400044 	movi	r17,1
81115844:	003b2006 	br	811144c8 <__reset+0xfb0f44c8>
81115848:	000b883a 	mov	r5,zero
8111584c:	003b3d06 	br	81114544 <__reset+0xfb0f4544>
81115850:	d8800c17 	ldw	r2,48(sp)
81115854:	d8800615 	stw	r2,24(sp)
81115858:	003e6906 	br	81115200 <__reset+0xfb0f5200>

8111585c <__sflush_r>:
8111585c:	2880030b 	ldhu	r2,12(r5)
81115860:	defffb04 	addi	sp,sp,-20
81115864:	dcc00315 	stw	r19,12(sp)
81115868:	dc400115 	stw	r17,4(sp)
8111586c:	dfc00415 	stw	ra,16(sp)
81115870:	dc800215 	stw	r18,8(sp)
81115874:	dc000015 	stw	r16,0(sp)
81115878:	10c0020c 	andi	r3,r2,8
8111587c:	2823883a 	mov	r17,r5
81115880:	2027883a 	mov	r19,r4
81115884:	1800311e 	bne	r3,zero,8111594c <__sflush_r+0xf0>
81115888:	28c00117 	ldw	r3,4(r5)
8111588c:	10820014 	ori	r2,r2,2048
81115890:	2880030d 	sth	r2,12(r5)
81115894:	00c04b0e 	bge	zero,r3,811159c4 <__sflush_r+0x168>
81115898:	8a000a17 	ldw	r8,40(r17)
8111589c:	40002326 	beq	r8,zero,8111592c <__sflush_r+0xd0>
811158a0:	9c000017 	ldw	r16,0(r19)
811158a4:	10c4000c 	andi	r3,r2,4096
811158a8:	98000015 	stw	zero,0(r19)
811158ac:	18004826 	beq	r3,zero,811159d0 <__sflush_r+0x174>
811158b0:	89801417 	ldw	r6,80(r17)
811158b4:	10c0010c 	andi	r3,r2,4
811158b8:	18000626 	beq	r3,zero,811158d4 <__sflush_r+0x78>
811158bc:	88c00117 	ldw	r3,4(r17)
811158c0:	88800c17 	ldw	r2,48(r17)
811158c4:	30cdc83a 	sub	r6,r6,r3
811158c8:	10000226 	beq	r2,zero,811158d4 <__sflush_r+0x78>
811158cc:	88800f17 	ldw	r2,60(r17)
811158d0:	308dc83a 	sub	r6,r6,r2
811158d4:	89400717 	ldw	r5,28(r17)
811158d8:	000f883a 	mov	r7,zero
811158dc:	9809883a 	mov	r4,r19
811158e0:	403ee83a 	callr	r8
811158e4:	00ffffc4 	movi	r3,-1
811158e8:	10c04426 	beq	r2,r3,811159fc <__sflush_r+0x1a0>
811158ec:	88c0030b 	ldhu	r3,12(r17)
811158f0:	89000417 	ldw	r4,16(r17)
811158f4:	88000115 	stw	zero,4(r17)
811158f8:	197dffcc 	andi	r5,r3,63487
811158fc:	8940030d 	sth	r5,12(r17)
81115900:	89000015 	stw	r4,0(r17)
81115904:	18c4000c 	andi	r3,r3,4096
81115908:	18002c1e 	bne	r3,zero,811159bc <__sflush_r+0x160>
8111590c:	89400c17 	ldw	r5,48(r17)
81115910:	9c000015 	stw	r16,0(r19)
81115914:	28000526 	beq	r5,zero,8111592c <__sflush_r+0xd0>
81115918:	88801004 	addi	r2,r17,64
8111591c:	28800226 	beq	r5,r2,81115928 <__sflush_r+0xcc>
81115920:	9809883a 	mov	r4,r19
81115924:	11162d40 	call	811162d4 <_free_r>
81115928:	88000c15 	stw	zero,48(r17)
8111592c:	0005883a 	mov	r2,zero
81115930:	dfc00417 	ldw	ra,16(sp)
81115934:	dcc00317 	ldw	r19,12(sp)
81115938:	dc800217 	ldw	r18,8(sp)
8111593c:	dc400117 	ldw	r17,4(sp)
81115940:	dc000017 	ldw	r16,0(sp)
81115944:	dec00504 	addi	sp,sp,20
81115948:	f800283a 	ret
8111594c:	2c800417 	ldw	r18,16(r5)
81115950:	903ff626 	beq	r18,zero,8111592c <__reset+0xfb0f592c>
81115954:	2c000017 	ldw	r16,0(r5)
81115958:	108000cc 	andi	r2,r2,3
8111595c:	2c800015 	stw	r18,0(r5)
81115960:	84a1c83a 	sub	r16,r16,r18
81115964:	1000131e 	bne	r2,zero,811159b4 <__sflush_r+0x158>
81115968:	28800517 	ldw	r2,20(r5)
8111596c:	88800215 	stw	r2,8(r17)
81115970:	04000316 	blt	zero,r16,81115980 <__sflush_r+0x124>
81115974:	003fed06 	br	8111592c <__reset+0xfb0f592c>
81115978:	90a5883a 	add	r18,r18,r2
8111597c:	043feb0e 	bge	zero,r16,8111592c <__reset+0xfb0f592c>
81115980:	88800917 	ldw	r2,36(r17)
81115984:	89400717 	ldw	r5,28(r17)
81115988:	800f883a 	mov	r7,r16
8111598c:	900d883a 	mov	r6,r18
81115990:	9809883a 	mov	r4,r19
81115994:	103ee83a 	callr	r2
81115998:	80a1c83a 	sub	r16,r16,r2
8111599c:	00bff616 	blt	zero,r2,81115978 <__reset+0xfb0f5978>
811159a0:	88c0030b 	ldhu	r3,12(r17)
811159a4:	00bfffc4 	movi	r2,-1
811159a8:	18c01014 	ori	r3,r3,64
811159ac:	88c0030d 	sth	r3,12(r17)
811159b0:	003fdf06 	br	81115930 <__reset+0xfb0f5930>
811159b4:	0005883a 	mov	r2,zero
811159b8:	003fec06 	br	8111596c <__reset+0xfb0f596c>
811159bc:	88801415 	stw	r2,80(r17)
811159c0:	003fd206 	br	8111590c <__reset+0xfb0f590c>
811159c4:	28c00f17 	ldw	r3,60(r5)
811159c8:	00ffb316 	blt	zero,r3,81115898 <__reset+0xfb0f5898>
811159cc:	003fd706 	br	8111592c <__reset+0xfb0f592c>
811159d0:	89400717 	ldw	r5,28(r17)
811159d4:	000d883a 	mov	r6,zero
811159d8:	01c00044 	movi	r7,1
811159dc:	9809883a 	mov	r4,r19
811159e0:	403ee83a 	callr	r8
811159e4:	100d883a 	mov	r6,r2
811159e8:	00bfffc4 	movi	r2,-1
811159ec:	30801426 	beq	r6,r2,81115a40 <__sflush_r+0x1e4>
811159f0:	8880030b 	ldhu	r2,12(r17)
811159f4:	8a000a17 	ldw	r8,40(r17)
811159f8:	003fae06 	br	811158b4 <__reset+0xfb0f58b4>
811159fc:	98c00017 	ldw	r3,0(r19)
81115a00:	183fba26 	beq	r3,zero,811158ec <__reset+0xfb0f58ec>
81115a04:	01000744 	movi	r4,29
81115a08:	19000626 	beq	r3,r4,81115a24 <__sflush_r+0x1c8>
81115a0c:	01000584 	movi	r4,22
81115a10:	19000426 	beq	r3,r4,81115a24 <__sflush_r+0x1c8>
81115a14:	88c0030b 	ldhu	r3,12(r17)
81115a18:	18c01014 	ori	r3,r3,64
81115a1c:	88c0030d 	sth	r3,12(r17)
81115a20:	003fc306 	br	81115930 <__reset+0xfb0f5930>
81115a24:	8880030b 	ldhu	r2,12(r17)
81115a28:	88c00417 	ldw	r3,16(r17)
81115a2c:	88000115 	stw	zero,4(r17)
81115a30:	10bdffcc 	andi	r2,r2,63487
81115a34:	8880030d 	sth	r2,12(r17)
81115a38:	88c00015 	stw	r3,0(r17)
81115a3c:	003fb306 	br	8111590c <__reset+0xfb0f590c>
81115a40:	98800017 	ldw	r2,0(r19)
81115a44:	103fea26 	beq	r2,zero,811159f0 <__reset+0xfb0f59f0>
81115a48:	00c00744 	movi	r3,29
81115a4c:	10c00226 	beq	r2,r3,81115a58 <__sflush_r+0x1fc>
81115a50:	00c00584 	movi	r3,22
81115a54:	10c0031e 	bne	r2,r3,81115a64 <__sflush_r+0x208>
81115a58:	9c000015 	stw	r16,0(r19)
81115a5c:	0005883a 	mov	r2,zero
81115a60:	003fb306 	br	81115930 <__reset+0xfb0f5930>
81115a64:	88c0030b 	ldhu	r3,12(r17)
81115a68:	3005883a 	mov	r2,r6
81115a6c:	18c01014 	ori	r3,r3,64
81115a70:	88c0030d 	sth	r3,12(r17)
81115a74:	003fae06 	br	81115930 <__reset+0xfb0f5930>

81115a78 <_fflush_r>:
81115a78:	defffd04 	addi	sp,sp,-12
81115a7c:	dc000115 	stw	r16,4(sp)
81115a80:	dfc00215 	stw	ra,8(sp)
81115a84:	2021883a 	mov	r16,r4
81115a88:	20000226 	beq	r4,zero,81115a94 <_fflush_r+0x1c>
81115a8c:	20800e17 	ldw	r2,56(r4)
81115a90:	10000c26 	beq	r2,zero,81115ac4 <_fflush_r+0x4c>
81115a94:	2880030f 	ldh	r2,12(r5)
81115a98:	1000051e 	bne	r2,zero,81115ab0 <_fflush_r+0x38>
81115a9c:	0005883a 	mov	r2,zero
81115aa0:	dfc00217 	ldw	ra,8(sp)
81115aa4:	dc000117 	ldw	r16,4(sp)
81115aa8:	dec00304 	addi	sp,sp,12
81115aac:	f800283a 	ret
81115ab0:	8009883a 	mov	r4,r16
81115ab4:	dfc00217 	ldw	ra,8(sp)
81115ab8:	dc000117 	ldw	r16,4(sp)
81115abc:	dec00304 	addi	sp,sp,12
81115ac0:	111585c1 	jmpi	8111585c <__sflush_r>
81115ac4:	d9400015 	stw	r5,0(sp)
81115ac8:	1115e540 	call	81115e54 <__sinit>
81115acc:	d9400017 	ldw	r5,0(sp)
81115ad0:	003ff006 	br	81115a94 <__reset+0xfb0f5a94>

81115ad4 <fflush>:
81115ad4:	20000526 	beq	r4,zero,81115aec <fflush+0x18>
81115ad8:	00a04534 	movhi	r2,33044
81115adc:	10a65b04 	addi	r2,r2,-26260
81115ae0:	200b883a 	mov	r5,r4
81115ae4:	11000017 	ldw	r4,0(r2)
81115ae8:	1115a781 	jmpi	81115a78 <_fflush_r>
81115aec:	00a04534 	movhi	r2,33044
81115af0:	10a65a04 	addi	r2,r2,-26264
81115af4:	11000017 	ldw	r4,0(r2)
81115af8:	01604474 	movhi	r5,33041
81115afc:	29569e04 	addi	r5,r5,23160
81115b00:	1116b641 	jmpi	81116b64 <_fwalk_reent>

81115b04 <__fp_unlock>:
81115b04:	0005883a 	mov	r2,zero
81115b08:	f800283a 	ret

81115b0c <_cleanup_r>:
81115b0c:	016044b4 	movhi	r5,33042
81115b10:	29768804 	addi	r5,r5,-9696
81115b14:	1116b641 	jmpi	81116b64 <_fwalk_reent>

81115b18 <__sinit.part.1>:
81115b18:	defff704 	addi	sp,sp,-36
81115b1c:	00e04474 	movhi	r3,33041
81115b20:	dfc00815 	stw	ra,32(sp)
81115b24:	ddc00715 	stw	r23,28(sp)
81115b28:	dd800615 	stw	r22,24(sp)
81115b2c:	dd400515 	stw	r21,20(sp)
81115b30:	dd000415 	stw	r20,16(sp)
81115b34:	dcc00315 	stw	r19,12(sp)
81115b38:	dc800215 	stw	r18,8(sp)
81115b3c:	dc400115 	stw	r17,4(sp)
81115b40:	dc000015 	stw	r16,0(sp)
81115b44:	18d6c304 	addi	r3,r3,23308
81115b48:	24000117 	ldw	r16,4(r4)
81115b4c:	20c00f15 	stw	r3,60(r4)
81115b50:	2080bb04 	addi	r2,r4,748
81115b54:	00c000c4 	movi	r3,3
81115b58:	20c0b915 	stw	r3,740(r4)
81115b5c:	2080ba15 	stw	r2,744(r4)
81115b60:	2000b815 	stw	zero,736(r4)
81115b64:	05c00204 	movi	r23,8
81115b68:	00800104 	movi	r2,4
81115b6c:	2025883a 	mov	r18,r4
81115b70:	b80d883a 	mov	r6,r23
81115b74:	81001704 	addi	r4,r16,92
81115b78:	000b883a 	mov	r5,zero
81115b7c:	80000015 	stw	zero,0(r16)
81115b80:	80000115 	stw	zero,4(r16)
81115b84:	80000215 	stw	zero,8(r16)
81115b88:	8080030d 	sth	r2,12(r16)
81115b8c:	80001915 	stw	zero,100(r16)
81115b90:	8000038d 	sth	zero,14(r16)
81115b94:	80000415 	stw	zero,16(r16)
81115b98:	80000515 	stw	zero,20(r16)
81115b9c:	80000615 	stw	zero,24(r16)
81115ba0:	110d5c80 	call	8110d5c8 <memset>
81115ba4:	05a04474 	movhi	r22,33041
81115ba8:	94400217 	ldw	r17,8(r18)
81115bac:	05604474 	movhi	r21,33041
81115bb0:	05204474 	movhi	r20,33041
81115bb4:	04e04474 	movhi	r19,33041
81115bb8:	b5b70904 	addi	r22,r22,-9180
81115bbc:	ad772004 	addi	r21,r21,-9088
81115bc0:	a5373f04 	addi	r20,r20,-8964
81115bc4:	9cf75604 	addi	r19,r19,-8872
81115bc8:	85800815 	stw	r22,32(r16)
81115bcc:	85400915 	stw	r21,36(r16)
81115bd0:	85000a15 	stw	r20,40(r16)
81115bd4:	84c00b15 	stw	r19,44(r16)
81115bd8:	84000715 	stw	r16,28(r16)
81115bdc:	00800284 	movi	r2,10
81115be0:	8880030d 	sth	r2,12(r17)
81115be4:	00800044 	movi	r2,1
81115be8:	b80d883a 	mov	r6,r23
81115bec:	89001704 	addi	r4,r17,92
81115bf0:	000b883a 	mov	r5,zero
81115bf4:	88000015 	stw	zero,0(r17)
81115bf8:	88000115 	stw	zero,4(r17)
81115bfc:	88000215 	stw	zero,8(r17)
81115c00:	88001915 	stw	zero,100(r17)
81115c04:	8880038d 	sth	r2,14(r17)
81115c08:	88000415 	stw	zero,16(r17)
81115c0c:	88000515 	stw	zero,20(r17)
81115c10:	88000615 	stw	zero,24(r17)
81115c14:	110d5c80 	call	8110d5c8 <memset>
81115c18:	94000317 	ldw	r16,12(r18)
81115c1c:	00800484 	movi	r2,18
81115c20:	8c400715 	stw	r17,28(r17)
81115c24:	8d800815 	stw	r22,32(r17)
81115c28:	8d400915 	stw	r21,36(r17)
81115c2c:	8d000a15 	stw	r20,40(r17)
81115c30:	8cc00b15 	stw	r19,44(r17)
81115c34:	8080030d 	sth	r2,12(r16)
81115c38:	00800084 	movi	r2,2
81115c3c:	80000015 	stw	zero,0(r16)
81115c40:	80000115 	stw	zero,4(r16)
81115c44:	80000215 	stw	zero,8(r16)
81115c48:	80001915 	stw	zero,100(r16)
81115c4c:	8080038d 	sth	r2,14(r16)
81115c50:	80000415 	stw	zero,16(r16)
81115c54:	80000515 	stw	zero,20(r16)
81115c58:	80000615 	stw	zero,24(r16)
81115c5c:	b80d883a 	mov	r6,r23
81115c60:	000b883a 	mov	r5,zero
81115c64:	81001704 	addi	r4,r16,92
81115c68:	110d5c80 	call	8110d5c8 <memset>
81115c6c:	00800044 	movi	r2,1
81115c70:	84000715 	stw	r16,28(r16)
81115c74:	85800815 	stw	r22,32(r16)
81115c78:	85400915 	stw	r21,36(r16)
81115c7c:	85000a15 	stw	r20,40(r16)
81115c80:	84c00b15 	stw	r19,44(r16)
81115c84:	90800e15 	stw	r2,56(r18)
81115c88:	dfc00817 	ldw	ra,32(sp)
81115c8c:	ddc00717 	ldw	r23,28(sp)
81115c90:	dd800617 	ldw	r22,24(sp)
81115c94:	dd400517 	ldw	r21,20(sp)
81115c98:	dd000417 	ldw	r20,16(sp)
81115c9c:	dcc00317 	ldw	r19,12(sp)
81115ca0:	dc800217 	ldw	r18,8(sp)
81115ca4:	dc400117 	ldw	r17,4(sp)
81115ca8:	dc000017 	ldw	r16,0(sp)
81115cac:	dec00904 	addi	sp,sp,36
81115cb0:	f800283a 	ret

81115cb4 <__fp_lock>:
81115cb4:	0005883a 	mov	r2,zero
81115cb8:	f800283a 	ret

81115cbc <__sfmoreglue>:
81115cbc:	defffc04 	addi	sp,sp,-16
81115cc0:	dc400115 	stw	r17,4(sp)
81115cc4:	2c7fffc4 	addi	r17,r5,-1
81115cc8:	8c401a24 	muli	r17,r17,104
81115ccc:	dc800215 	stw	r18,8(sp)
81115cd0:	2825883a 	mov	r18,r5
81115cd4:	89401d04 	addi	r5,r17,116
81115cd8:	dc000015 	stw	r16,0(sp)
81115cdc:	dfc00315 	stw	ra,12(sp)
81115ce0:	110cc740 	call	8110cc74 <_malloc_r>
81115ce4:	1021883a 	mov	r16,r2
81115ce8:	10000726 	beq	r2,zero,81115d08 <__sfmoreglue+0x4c>
81115cec:	11000304 	addi	r4,r2,12
81115cf0:	10000015 	stw	zero,0(r2)
81115cf4:	14800115 	stw	r18,4(r2)
81115cf8:	11000215 	stw	r4,8(r2)
81115cfc:	89801a04 	addi	r6,r17,104
81115d00:	000b883a 	mov	r5,zero
81115d04:	110d5c80 	call	8110d5c8 <memset>
81115d08:	8005883a 	mov	r2,r16
81115d0c:	dfc00317 	ldw	ra,12(sp)
81115d10:	dc800217 	ldw	r18,8(sp)
81115d14:	dc400117 	ldw	r17,4(sp)
81115d18:	dc000017 	ldw	r16,0(sp)
81115d1c:	dec00404 	addi	sp,sp,16
81115d20:	f800283a 	ret

81115d24 <__sfp>:
81115d24:	defffb04 	addi	sp,sp,-20
81115d28:	dc000015 	stw	r16,0(sp)
81115d2c:	04204534 	movhi	r16,33044
81115d30:	84265a04 	addi	r16,r16,-26264
81115d34:	dcc00315 	stw	r19,12(sp)
81115d38:	2027883a 	mov	r19,r4
81115d3c:	81000017 	ldw	r4,0(r16)
81115d40:	dfc00415 	stw	ra,16(sp)
81115d44:	dc800215 	stw	r18,8(sp)
81115d48:	20800e17 	ldw	r2,56(r4)
81115d4c:	dc400115 	stw	r17,4(sp)
81115d50:	1000021e 	bne	r2,zero,81115d5c <__sfp+0x38>
81115d54:	1115b180 	call	81115b18 <__sinit.part.1>
81115d58:	81000017 	ldw	r4,0(r16)
81115d5c:	2480b804 	addi	r18,r4,736
81115d60:	047fffc4 	movi	r17,-1
81115d64:	91000117 	ldw	r4,4(r18)
81115d68:	94000217 	ldw	r16,8(r18)
81115d6c:	213fffc4 	addi	r4,r4,-1
81115d70:	20000a16 	blt	r4,zero,81115d9c <__sfp+0x78>
81115d74:	8080030f 	ldh	r2,12(r16)
81115d78:	10000c26 	beq	r2,zero,81115dac <__sfp+0x88>
81115d7c:	80c01d04 	addi	r3,r16,116
81115d80:	00000206 	br	81115d8c <__sfp+0x68>
81115d84:	18bfe60f 	ldh	r2,-104(r3)
81115d88:	10000826 	beq	r2,zero,81115dac <__sfp+0x88>
81115d8c:	213fffc4 	addi	r4,r4,-1
81115d90:	1c3ffd04 	addi	r16,r3,-12
81115d94:	18c01a04 	addi	r3,r3,104
81115d98:	247ffa1e 	bne	r4,r17,81115d84 <__reset+0xfb0f5d84>
81115d9c:	90800017 	ldw	r2,0(r18)
81115da0:	10001d26 	beq	r2,zero,81115e18 <__sfp+0xf4>
81115da4:	1025883a 	mov	r18,r2
81115da8:	003fee06 	br	81115d64 <__reset+0xfb0f5d64>
81115dac:	00bfffc4 	movi	r2,-1
81115db0:	8080038d 	sth	r2,14(r16)
81115db4:	00800044 	movi	r2,1
81115db8:	8080030d 	sth	r2,12(r16)
81115dbc:	80001915 	stw	zero,100(r16)
81115dc0:	80000015 	stw	zero,0(r16)
81115dc4:	80000215 	stw	zero,8(r16)
81115dc8:	80000115 	stw	zero,4(r16)
81115dcc:	80000415 	stw	zero,16(r16)
81115dd0:	80000515 	stw	zero,20(r16)
81115dd4:	80000615 	stw	zero,24(r16)
81115dd8:	01800204 	movi	r6,8
81115ddc:	000b883a 	mov	r5,zero
81115de0:	81001704 	addi	r4,r16,92
81115de4:	110d5c80 	call	8110d5c8 <memset>
81115de8:	8005883a 	mov	r2,r16
81115dec:	80000c15 	stw	zero,48(r16)
81115df0:	80000d15 	stw	zero,52(r16)
81115df4:	80001115 	stw	zero,68(r16)
81115df8:	80001215 	stw	zero,72(r16)
81115dfc:	dfc00417 	ldw	ra,16(sp)
81115e00:	dcc00317 	ldw	r19,12(sp)
81115e04:	dc800217 	ldw	r18,8(sp)
81115e08:	dc400117 	ldw	r17,4(sp)
81115e0c:	dc000017 	ldw	r16,0(sp)
81115e10:	dec00504 	addi	sp,sp,20
81115e14:	f800283a 	ret
81115e18:	01400104 	movi	r5,4
81115e1c:	9809883a 	mov	r4,r19
81115e20:	1115cbc0 	call	81115cbc <__sfmoreglue>
81115e24:	90800015 	stw	r2,0(r18)
81115e28:	103fde1e 	bne	r2,zero,81115da4 <__reset+0xfb0f5da4>
81115e2c:	00800304 	movi	r2,12
81115e30:	98800015 	stw	r2,0(r19)
81115e34:	0005883a 	mov	r2,zero
81115e38:	003ff006 	br	81115dfc <__reset+0xfb0f5dfc>

81115e3c <_cleanup>:
81115e3c:	00a04534 	movhi	r2,33044
81115e40:	10a65a04 	addi	r2,r2,-26264
81115e44:	11000017 	ldw	r4,0(r2)
81115e48:	016044b4 	movhi	r5,33042
81115e4c:	29768804 	addi	r5,r5,-9696
81115e50:	1116b641 	jmpi	81116b64 <_fwalk_reent>

81115e54 <__sinit>:
81115e54:	20800e17 	ldw	r2,56(r4)
81115e58:	10000126 	beq	r2,zero,81115e60 <__sinit+0xc>
81115e5c:	f800283a 	ret
81115e60:	1115b181 	jmpi	81115b18 <__sinit.part.1>

81115e64 <__sfp_lock_acquire>:
81115e64:	f800283a 	ret

81115e68 <__sfp_lock_release>:
81115e68:	f800283a 	ret

81115e6c <__sinit_lock_acquire>:
81115e6c:	f800283a 	ret

81115e70 <__sinit_lock_release>:
81115e70:	f800283a 	ret

81115e74 <__fp_lock_all>:
81115e74:	00a04534 	movhi	r2,33044
81115e78:	10a65b04 	addi	r2,r2,-26260
81115e7c:	11000017 	ldw	r4,0(r2)
81115e80:	01604474 	movhi	r5,33041
81115e84:	29572d04 	addi	r5,r5,23732
81115e88:	1116aa01 	jmpi	81116aa0 <_fwalk>

81115e8c <__fp_unlock_all>:
81115e8c:	00a04534 	movhi	r2,33044
81115e90:	10a65b04 	addi	r2,r2,-26260
81115e94:	11000017 	ldw	r4,0(r2)
81115e98:	01604474 	movhi	r5,33041
81115e9c:	2956c104 	addi	r5,r5,23300
81115ea0:	1116aa01 	jmpi	81116aa0 <_fwalk>

81115ea4 <__sflags>:
81115ea4:	28800007 	ldb	r2,0(r5)
81115ea8:	00c01c84 	movi	r3,114
81115eac:	10c02426 	beq	r2,r3,81115f40 <__sflags+0x9c>
81115eb0:	00c01dc4 	movi	r3,119
81115eb4:	10c01e26 	beq	r2,r3,81115f30 <__sflags+0x8c>
81115eb8:	00c01844 	movi	r3,97
81115ebc:	10c00426 	beq	r2,r3,81115ed0 <__sflags+0x2c>
81115ec0:	00800584 	movi	r2,22
81115ec4:	20800015 	stw	r2,0(r4)
81115ec8:	0005883a 	mov	r2,zero
81115ecc:	f800283a 	ret
81115ed0:	02c08204 	movi	r11,520
81115ed4:	01000044 	movi	r4,1
81115ed8:	00804204 	movi	r2,264
81115edc:	01c00ac4 	movi	r7,43
81115ee0:	02bff8c4 	movi	r10,-29
81115ee4:	027fff04 	movi	r9,-4
81115ee8:	02001e04 	movi	r8,120
81115eec:	29400044 	addi	r5,r5,1
81115ef0:	28c00007 	ldb	r3,0(r5)
81115ef4:	18000626 	beq	r3,zero,81115f10 <__sflags+0x6c>
81115ef8:	19c00826 	beq	r3,r7,81115f1c <__sflags+0x78>
81115efc:	1a3ffb1e 	bne	r3,r8,81115eec <__reset+0xfb0f5eec>
81115f00:	29400044 	addi	r5,r5,1
81115f04:	28c00007 	ldb	r3,0(r5)
81115f08:	21020014 	ori	r4,r4,2048
81115f0c:	183ffa1e 	bne	r3,zero,81115ef8 <__reset+0xfb0f5ef8>
81115f10:	22c8b03a 	or	r4,r4,r11
81115f14:	31000015 	stw	r4,0(r6)
81115f18:	f800283a 	ret
81115f1c:	1284703a 	and	r2,r2,r10
81115f20:	2248703a 	and	r4,r4,r9
81115f24:	10800414 	ori	r2,r2,16
81115f28:	21000094 	ori	r4,r4,2
81115f2c:	003fef06 	br	81115eec <__reset+0xfb0f5eec>
81115f30:	02c18004 	movi	r11,1536
81115f34:	01000044 	movi	r4,1
81115f38:	00800204 	movi	r2,8
81115f3c:	003fe706 	br	81115edc <__reset+0xfb0f5edc>
81115f40:	0017883a 	mov	r11,zero
81115f44:	0009883a 	mov	r4,zero
81115f48:	00800104 	movi	r2,4
81115f4c:	003fe306 	br	81115edc <__reset+0xfb0f5edc>

81115f50 <_fread_r>:
81115f50:	defff404 	addi	sp,sp,-48
81115f54:	dd800815 	stw	r22,32(sp)
81115f58:	39ad383a 	mul	r22,r7,r6
81115f5c:	dc000215 	stw	r16,8(sp)
81115f60:	dfc00b15 	stw	ra,44(sp)
81115f64:	df000a15 	stw	fp,40(sp)
81115f68:	ddc00915 	stw	r23,36(sp)
81115f6c:	dd400715 	stw	r21,28(sp)
81115f70:	dd000615 	stw	r20,24(sp)
81115f74:	dcc00515 	stw	r19,20(sp)
81115f78:	dc800415 	stw	r18,16(sp)
81115f7c:	dc400315 	stw	r17,12(sp)
81115f80:	dc000c17 	ldw	r16,48(sp)
81115f84:	b0003b26 	beq	r22,zero,81116074 <_fread_r+0x124>
81115f88:	302f883a 	mov	r23,r6
81115f8c:	382b883a 	mov	r21,r7
81115f90:	2029883a 	mov	r20,r4
81115f94:	2827883a 	mov	r19,r5
81115f98:	20000226 	beq	r4,zero,81115fa4 <_fread_r+0x54>
81115f9c:	20800e17 	ldw	r2,56(r4)
81115fa0:	10006e26 	beq	r2,zero,8111615c <_fread_r+0x20c>
81115fa4:	8080030b 	ldhu	r2,12(r16)
81115fa8:	10c8000c 	andi	r3,r2,8192
81115fac:	1800061e 	bne	r3,zero,81115fc8 <_fread_r+0x78>
81115fb0:	81001917 	ldw	r4,100(r16)
81115fb4:	00f7ffc4 	movi	r3,-8193
81115fb8:	10880014 	ori	r2,r2,8192
81115fbc:	20c6703a 	and	r3,r4,r3
81115fc0:	8080030d 	sth	r2,12(r16)
81115fc4:	80c01915 	stw	r3,100(r16)
81115fc8:	84400117 	ldw	r17,4(r16)
81115fcc:	88005f16 	blt	r17,zero,8111614c <_fread_r+0x1fc>
81115fd0:	8809883a 	mov	r4,r17
81115fd4:	1080008c 	andi	r2,r2,2
81115fd8:	1000281e 	bne	r2,zero,8111607c <_fread_r+0x12c>
81115fdc:	b025883a 	mov	r18,r22
81115fe0:	00000b06 	br	81116010 <_fread_r+0xc0>
81115fe4:	110d4800 	call	8110d480 <memcpy>
81115fe8:	80800017 	ldw	r2,0(r16)
81115fec:	9c67883a 	add	r19,r19,r17
81115ff0:	9465c83a 	sub	r18,r18,r17
81115ff4:	1463883a 	add	r17,r2,r17
81115ff8:	800b883a 	mov	r5,r16
81115ffc:	a009883a 	mov	r4,r20
81116000:	84400015 	stw	r17,0(r16)
81116004:	110d8cc0 	call	8110d8cc <__srefill_r>
81116008:	10004c1e 	bne	r2,zero,8111613c <_fread_r+0x1ec>
8111600c:	84400117 	ldw	r17,4(r16)
81116010:	880d883a 	mov	r6,r17
81116014:	9809883a 	mov	r4,r19
81116018:	81400017 	ldw	r5,0(r16)
8111601c:	8cbff136 	bltu	r17,r18,81115fe4 <__reset+0xfb0f5fe4>
81116020:	900d883a 	mov	r6,r18
81116024:	110d4800 	call	8110d480 <memcpy>
81116028:	80c00117 	ldw	r3,4(r16)
8111602c:	81000017 	ldw	r4,0(r16)
81116030:	a805883a 	mov	r2,r21
81116034:	1c87c83a 	sub	r3,r3,r18
81116038:	24a5883a 	add	r18,r4,r18
8111603c:	80c00115 	stw	r3,4(r16)
81116040:	84800015 	stw	r18,0(r16)
81116044:	dfc00b17 	ldw	ra,44(sp)
81116048:	df000a17 	ldw	fp,40(sp)
8111604c:	ddc00917 	ldw	r23,36(sp)
81116050:	dd800817 	ldw	r22,32(sp)
81116054:	dd400717 	ldw	r21,28(sp)
81116058:	dd000617 	ldw	r20,24(sp)
8111605c:	dcc00517 	ldw	r19,20(sp)
81116060:	dc800417 	ldw	r18,16(sp)
81116064:	dc400317 	ldw	r17,12(sp)
81116068:	dc000217 	ldw	r16,8(sp)
8111606c:	dec00c04 	addi	sp,sp,48
81116070:	f800283a 	ret
81116074:	0005883a 	mov	r2,zero
81116078:	003ff206 	br	81116044 <__reset+0xfb0f6044>
8111607c:	b007883a 	mov	r3,r22
81116080:	2580012e 	bgeu	r4,r22,81116088 <_fread_r+0x138>
81116084:	2007883a 	mov	r3,r4
81116088:	81400017 	ldw	r5,0(r16)
8111608c:	180d883a 	mov	r6,r3
81116090:	9809883a 	mov	r4,r19
81116094:	d8c00115 	stw	r3,4(sp)
81116098:	110d4800 	call	8110d480 <memcpy>
8111609c:	d8c00117 	ldw	r3,4(sp)
811160a0:	84400017 	ldw	r17,0(r16)
811160a4:	80800117 	ldw	r2,4(r16)
811160a8:	81400c17 	ldw	r5,48(r16)
811160ac:	88e3883a 	add	r17,r17,r3
811160b0:	10c5c83a 	sub	r2,r2,r3
811160b4:	84400015 	stw	r17,0(r16)
811160b8:	80800115 	stw	r2,4(r16)
811160bc:	b0e5c83a 	sub	r18,r22,r3
811160c0:	28002b26 	beq	r5,zero,81116170 <_fread_r+0x220>
811160c4:	90002b26 	beq	r18,zero,81116174 <_fread_r+0x224>
811160c8:	80801004 	addi	r2,r16,64
811160cc:	28800526 	beq	r5,r2,811160e4 <_fread_r+0x194>
811160d0:	a009883a 	mov	r4,r20
811160d4:	d8c00115 	stw	r3,4(sp)
811160d8:	11162d40 	call	811162d4 <_free_r>
811160dc:	d8c00117 	ldw	r3,4(sp)
811160e0:	84400017 	ldw	r17,0(r16)
811160e4:	80000c15 	stw	zero,48(r16)
811160e8:	80800517 	ldw	r2,20(r16)
811160ec:	87000417 	ldw	fp,16(r16)
811160f0:	98e7883a 	add	r19,r19,r3
811160f4:	d8800015 	stw	r2,0(sp)
811160f8:	00000106 	br	81116100 <_fread_r+0x1b0>
811160fc:	90001d26 	beq	r18,zero,81116174 <_fread_r+0x224>
81116100:	84c00415 	stw	r19,16(r16)
81116104:	84800515 	stw	r18,20(r16)
81116108:	84c00015 	stw	r19,0(r16)
8111610c:	a009883a 	mov	r4,r20
81116110:	800b883a 	mov	r5,r16
81116114:	110d8cc0 	call	8110d8cc <__srefill_r>
81116118:	d9000017 	ldw	r4,0(sp)
8111611c:	80c00117 	ldw	r3,4(r16)
81116120:	87000415 	stw	fp,16(r16)
81116124:	81000515 	stw	r4,20(r16)
81116128:	84400015 	stw	r17,0(r16)
8111612c:	80000115 	stw	zero,4(r16)
81116130:	90e5c83a 	sub	r18,r18,r3
81116134:	98e7883a 	add	r19,r19,r3
81116138:	103ff026 	beq	r2,zero,811160fc <__reset+0xfb0f60fc>
8111613c:	b80b883a 	mov	r5,r23
81116140:	b489c83a 	sub	r4,r22,r18
81116144:	111f78c0 	call	8111f78c <__udivsi3>
81116148:	003fbe06 	br	81116044 <__reset+0xfb0f6044>
8111614c:	80000115 	stw	zero,4(r16)
81116150:	0009883a 	mov	r4,zero
81116154:	0023883a 	mov	r17,zero
81116158:	003f9e06 	br	81115fd4 <__reset+0xfb0f5fd4>
8111615c:	1115e540 	call	81115e54 <__sinit>
81116160:	8080030b 	ldhu	r2,12(r16)
81116164:	10c8000c 	andi	r3,r2,8192
81116168:	183f971e 	bne	r3,zero,81115fc8 <__reset+0xfb0f5fc8>
8111616c:	003f9006 	br	81115fb0 <__reset+0xfb0f5fb0>
81116170:	903fdd1e 	bne	r18,zero,811160e8 <__reset+0xfb0f60e8>
81116174:	a805883a 	mov	r2,r21
81116178:	003fb206 	br	81116044 <__reset+0xfb0f6044>

8111617c <fread>:
8111617c:	defffe04 	addi	sp,sp,-8
81116180:	00a04534 	movhi	r2,33044
81116184:	d9c00015 	stw	r7,0(sp)
81116188:	10a65b04 	addi	r2,r2,-26260
8111618c:	300f883a 	mov	r7,r6
81116190:	280d883a 	mov	r6,r5
81116194:	200b883a 	mov	r5,r4
81116198:	11000017 	ldw	r4,0(r2)
8111619c:	dfc00115 	stw	ra,4(sp)
811161a0:	1115f500 	call	81115f50 <_fread_r>
811161a4:	dfc00117 	ldw	ra,4(sp)
811161a8:	dec00204 	addi	sp,sp,8
811161ac:	f800283a 	ret

811161b0 <_malloc_trim_r>:
811161b0:	defffb04 	addi	sp,sp,-20
811161b4:	dcc00315 	stw	r19,12(sp)
811161b8:	04e04534 	movhi	r19,33044
811161bc:	dc800215 	stw	r18,8(sp)
811161c0:	dc400115 	stw	r17,4(sp)
811161c4:	dc000015 	stw	r16,0(sp)
811161c8:	dfc00415 	stw	ra,16(sp)
811161cc:	2821883a 	mov	r16,r5
811161d0:	9ce03c04 	addi	r19,r19,-32528
811161d4:	2025883a 	mov	r18,r4
811161d8:	11227f00 	call	811227f0 <__malloc_lock>
811161dc:	98800217 	ldw	r2,8(r19)
811161e0:	14400117 	ldw	r17,4(r2)
811161e4:	00bfff04 	movi	r2,-4
811161e8:	88a2703a 	and	r17,r17,r2
811161ec:	8c21c83a 	sub	r16,r17,r16
811161f0:	8403fbc4 	addi	r16,r16,4079
811161f4:	8020d33a 	srli	r16,r16,12
811161f8:	0083ffc4 	movi	r2,4095
811161fc:	843fffc4 	addi	r16,r16,-1
81116200:	8020933a 	slli	r16,r16,12
81116204:	1400060e 	bge	r2,r16,81116220 <_malloc_trim_r+0x70>
81116208:	000b883a 	mov	r5,zero
8111620c:	9009883a 	mov	r4,r18
81116210:	110daa00 	call	8110daa0 <_sbrk_r>
81116214:	98c00217 	ldw	r3,8(r19)
81116218:	1c47883a 	add	r3,r3,r17
8111621c:	10c00a26 	beq	r2,r3,81116248 <_malloc_trim_r+0x98>
81116220:	9009883a 	mov	r4,r18
81116224:	11229100 	call	81122910 <__malloc_unlock>
81116228:	0005883a 	mov	r2,zero
8111622c:	dfc00417 	ldw	ra,16(sp)
81116230:	dcc00317 	ldw	r19,12(sp)
81116234:	dc800217 	ldw	r18,8(sp)
81116238:	dc400117 	ldw	r17,4(sp)
8111623c:	dc000017 	ldw	r16,0(sp)
81116240:	dec00504 	addi	sp,sp,20
81116244:	f800283a 	ret
81116248:	040bc83a 	sub	r5,zero,r16
8111624c:	9009883a 	mov	r4,r18
81116250:	110daa00 	call	8110daa0 <_sbrk_r>
81116254:	00ffffc4 	movi	r3,-1
81116258:	10c00d26 	beq	r2,r3,81116290 <_malloc_trim_r+0xe0>
8111625c:	00e04534 	movhi	r3,33044
81116260:	18e71404 	addi	r3,r3,-25520
81116264:	18800017 	ldw	r2,0(r3)
81116268:	99000217 	ldw	r4,8(r19)
8111626c:	8c23c83a 	sub	r17,r17,r16
81116270:	8c400054 	ori	r17,r17,1
81116274:	1421c83a 	sub	r16,r2,r16
81116278:	24400115 	stw	r17,4(r4)
8111627c:	9009883a 	mov	r4,r18
81116280:	1c000015 	stw	r16,0(r3)
81116284:	11229100 	call	81122910 <__malloc_unlock>
81116288:	00800044 	movi	r2,1
8111628c:	003fe706 	br	8111622c <__reset+0xfb0f622c>
81116290:	000b883a 	mov	r5,zero
81116294:	9009883a 	mov	r4,r18
81116298:	110daa00 	call	8110daa0 <_sbrk_r>
8111629c:	99000217 	ldw	r4,8(r19)
811162a0:	014003c4 	movi	r5,15
811162a4:	1107c83a 	sub	r3,r2,r4
811162a8:	28ffdd0e 	bge	r5,r3,81116220 <__reset+0xfb0f6220>
811162ac:	01604534 	movhi	r5,33044
811162b0:	29665c04 	addi	r5,r5,-26256
811162b4:	29400017 	ldw	r5,0(r5)
811162b8:	18c00054 	ori	r3,r3,1
811162bc:	20c00115 	stw	r3,4(r4)
811162c0:	00e04534 	movhi	r3,33044
811162c4:	1145c83a 	sub	r2,r2,r5
811162c8:	18e71404 	addi	r3,r3,-25520
811162cc:	18800015 	stw	r2,0(r3)
811162d0:	003fd306 	br	81116220 <__reset+0xfb0f6220>

811162d4 <_free_r>:
811162d4:	28004126 	beq	r5,zero,811163dc <_free_r+0x108>
811162d8:	defffd04 	addi	sp,sp,-12
811162dc:	dc400115 	stw	r17,4(sp)
811162e0:	dc000015 	stw	r16,0(sp)
811162e4:	2023883a 	mov	r17,r4
811162e8:	2821883a 	mov	r16,r5
811162ec:	dfc00215 	stw	ra,8(sp)
811162f0:	11227f00 	call	811227f0 <__malloc_lock>
811162f4:	81ffff17 	ldw	r7,-4(r16)
811162f8:	00bfff84 	movi	r2,-2
811162fc:	01204534 	movhi	r4,33044
81116300:	81bffe04 	addi	r6,r16,-8
81116304:	3884703a 	and	r2,r7,r2
81116308:	21203c04 	addi	r4,r4,-32528
8111630c:	308b883a 	add	r5,r6,r2
81116310:	2a400117 	ldw	r9,4(r5)
81116314:	22000217 	ldw	r8,8(r4)
81116318:	00ffff04 	movi	r3,-4
8111631c:	48c6703a 	and	r3,r9,r3
81116320:	2a005726 	beq	r5,r8,81116480 <_free_r+0x1ac>
81116324:	28c00115 	stw	r3,4(r5)
81116328:	39c0004c 	andi	r7,r7,1
8111632c:	3800091e 	bne	r7,zero,81116354 <_free_r+0x80>
81116330:	823ffe17 	ldw	r8,-8(r16)
81116334:	22400204 	addi	r9,r4,8
81116338:	320dc83a 	sub	r6,r6,r8
8111633c:	31c00217 	ldw	r7,8(r6)
81116340:	1205883a 	add	r2,r2,r8
81116344:	3a406526 	beq	r7,r9,811164dc <_free_r+0x208>
81116348:	32000317 	ldw	r8,12(r6)
8111634c:	3a000315 	stw	r8,12(r7)
81116350:	41c00215 	stw	r7,8(r8)
81116354:	28cf883a 	add	r7,r5,r3
81116358:	39c00117 	ldw	r7,4(r7)
8111635c:	39c0004c 	andi	r7,r7,1
81116360:	38003a26 	beq	r7,zero,8111644c <_free_r+0x178>
81116364:	10c00054 	ori	r3,r2,1
81116368:	30c00115 	stw	r3,4(r6)
8111636c:	3087883a 	add	r3,r6,r2
81116370:	18800015 	stw	r2,0(r3)
81116374:	00c07fc4 	movi	r3,511
81116378:	18801936 	bltu	r3,r2,811163e0 <_free_r+0x10c>
8111637c:	1004d0fa 	srli	r2,r2,3
81116380:	01c00044 	movi	r7,1
81116384:	21400117 	ldw	r5,4(r4)
81116388:	10c00044 	addi	r3,r2,1
8111638c:	18c7883a 	add	r3,r3,r3
81116390:	1005d0ba 	srai	r2,r2,2
81116394:	18c7883a 	add	r3,r3,r3
81116398:	18c7883a 	add	r3,r3,r3
8111639c:	1907883a 	add	r3,r3,r4
811163a0:	3884983a 	sll	r2,r7,r2
811163a4:	19c00017 	ldw	r7,0(r3)
811163a8:	1a3ffe04 	addi	r8,r3,-8
811163ac:	1144b03a 	or	r2,r2,r5
811163b0:	32000315 	stw	r8,12(r6)
811163b4:	31c00215 	stw	r7,8(r6)
811163b8:	20800115 	stw	r2,4(r4)
811163bc:	19800015 	stw	r6,0(r3)
811163c0:	39800315 	stw	r6,12(r7)
811163c4:	8809883a 	mov	r4,r17
811163c8:	dfc00217 	ldw	ra,8(sp)
811163cc:	dc400117 	ldw	r17,4(sp)
811163d0:	dc000017 	ldw	r16,0(sp)
811163d4:	dec00304 	addi	sp,sp,12
811163d8:	11229101 	jmpi	81122910 <__malloc_unlock>
811163dc:	f800283a 	ret
811163e0:	100ad27a 	srli	r5,r2,9
811163e4:	00c00104 	movi	r3,4
811163e8:	19404a36 	bltu	r3,r5,81116514 <_free_r+0x240>
811163ec:	100ad1ba 	srli	r5,r2,6
811163f0:	28c00e44 	addi	r3,r5,57
811163f4:	18c7883a 	add	r3,r3,r3
811163f8:	29400e04 	addi	r5,r5,56
811163fc:	18c7883a 	add	r3,r3,r3
81116400:	18c7883a 	add	r3,r3,r3
81116404:	1909883a 	add	r4,r3,r4
81116408:	20c00017 	ldw	r3,0(r4)
8111640c:	01e04534 	movhi	r7,33044
81116410:	213ffe04 	addi	r4,r4,-8
81116414:	39e03c04 	addi	r7,r7,-32528
81116418:	20c04426 	beq	r4,r3,8111652c <_free_r+0x258>
8111641c:	01ffff04 	movi	r7,-4
81116420:	19400117 	ldw	r5,4(r3)
81116424:	29ca703a 	and	r5,r5,r7
81116428:	1140022e 	bgeu	r2,r5,81116434 <_free_r+0x160>
8111642c:	18c00217 	ldw	r3,8(r3)
81116430:	20fffb1e 	bne	r4,r3,81116420 <__reset+0xfb0f6420>
81116434:	19000317 	ldw	r4,12(r3)
81116438:	31000315 	stw	r4,12(r6)
8111643c:	30c00215 	stw	r3,8(r6)
81116440:	21800215 	stw	r6,8(r4)
81116444:	19800315 	stw	r6,12(r3)
81116448:	003fde06 	br	811163c4 <__reset+0xfb0f63c4>
8111644c:	29c00217 	ldw	r7,8(r5)
81116450:	10c5883a 	add	r2,r2,r3
81116454:	00e04534 	movhi	r3,33044
81116458:	18e03e04 	addi	r3,r3,-32520
8111645c:	38c03b26 	beq	r7,r3,8111654c <_free_r+0x278>
81116460:	2a000317 	ldw	r8,12(r5)
81116464:	11400054 	ori	r5,r2,1
81116468:	3087883a 	add	r3,r6,r2
8111646c:	3a000315 	stw	r8,12(r7)
81116470:	41c00215 	stw	r7,8(r8)
81116474:	31400115 	stw	r5,4(r6)
81116478:	18800015 	stw	r2,0(r3)
8111647c:	003fbd06 	br	81116374 <__reset+0xfb0f6374>
81116480:	39c0004c 	andi	r7,r7,1
81116484:	10c5883a 	add	r2,r2,r3
81116488:	3800071e 	bne	r7,zero,811164a8 <_free_r+0x1d4>
8111648c:	81fffe17 	ldw	r7,-8(r16)
81116490:	31cdc83a 	sub	r6,r6,r7
81116494:	30c00317 	ldw	r3,12(r6)
81116498:	31400217 	ldw	r5,8(r6)
8111649c:	11c5883a 	add	r2,r2,r7
811164a0:	28c00315 	stw	r3,12(r5)
811164a4:	19400215 	stw	r5,8(r3)
811164a8:	10c00054 	ori	r3,r2,1
811164ac:	30c00115 	stw	r3,4(r6)
811164b0:	00e04534 	movhi	r3,33044
811164b4:	18e65d04 	addi	r3,r3,-26252
811164b8:	18c00017 	ldw	r3,0(r3)
811164bc:	21800215 	stw	r6,8(r4)
811164c0:	10ffc036 	bltu	r2,r3,811163c4 <__reset+0xfb0f63c4>
811164c4:	00a04534 	movhi	r2,33044
811164c8:	10a6bc04 	addi	r2,r2,-25872
811164cc:	11400017 	ldw	r5,0(r2)
811164d0:	8809883a 	mov	r4,r17
811164d4:	11161b00 	call	811161b0 <_malloc_trim_r>
811164d8:	003fba06 	br	811163c4 <__reset+0xfb0f63c4>
811164dc:	28c9883a 	add	r4,r5,r3
811164e0:	21000117 	ldw	r4,4(r4)
811164e4:	2100004c 	andi	r4,r4,1
811164e8:	2000391e 	bne	r4,zero,811165d0 <_free_r+0x2fc>
811164ec:	29c00217 	ldw	r7,8(r5)
811164f0:	29000317 	ldw	r4,12(r5)
811164f4:	1885883a 	add	r2,r3,r2
811164f8:	10c00054 	ori	r3,r2,1
811164fc:	39000315 	stw	r4,12(r7)
81116500:	21c00215 	stw	r7,8(r4)
81116504:	30c00115 	stw	r3,4(r6)
81116508:	308d883a 	add	r6,r6,r2
8111650c:	30800015 	stw	r2,0(r6)
81116510:	003fac06 	br	811163c4 <__reset+0xfb0f63c4>
81116514:	00c00504 	movi	r3,20
81116518:	19401536 	bltu	r3,r5,81116570 <_free_r+0x29c>
8111651c:	28c01704 	addi	r3,r5,92
81116520:	18c7883a 	add	r3,r3,r3
81116524:	294016c4 	addi	r5,r5,91
81116528:	003fb406 	br	811163fc <__reset+0xfb0f63fc>
8111652c:	280bd0ba 	srai	r5,r5,2
81116530:	00c00044 	movi	r3,1
81116534:	38800117 	ldw	r2,4(r7)
81116538:	194a983a 	sll	r5,r3,r5
8111653c:	2007883a 	mov	r3,r4
81116540:	2884b03a 	or	r2,r5,r2
81116544:	38800115 	stw	r2,4(r7)
81116548:	003fbb06 	br	81116438 <__reset+0xfb0f6438>
8111654c:	21800515 	stw	r6,20(r4)
81116550:	21800415 	stw	r6,16(r4)
81116554:	10c00054 	ori	r3,r2,1
81116558:	31c00315 	stw	r7,12(r6)
8111655c:	31c00215 	stw	r7,8(r6)
81116560:	30c00115 	stw	r3,4(r6)
81116564:	308d883a 	add	r6,r6,r2
81116568:	30800015 	stw	r2,0(r6)
8111656c:	003f9506 	br	811163c4 <__reset+0xfb0f63c4>
81116570:	00c01504 	movi	r3,84
81116574:	19400536 	bltu	r3,r5,8111658c <_free_r+0x2b8>
81116578:	100ad33a 	srli	r5,r2,12
8111657c:	28c01bc4 	addi	r3,r5,111
81116580:	18c7883a 	add	r3,r3,r3
81116584:	29401b84 	addi	r5,r5,110
81116588:	003f9c06 	br	811163fc <__reset+0xfb0f63fc>
8111658c:	00c05504 	movi	r3,340
81116590:	19400536 	bltu	r3,r5,811165a8 <_free_r+0x2d4>
81116594:	100ad3fa 	srli	r5,r2,15
81116598:	28c01e04 	addi	r3,r5,120
8111659c:	18c7883a 	add	r3,r3,r3
811165a0:	29401dc4 	addi	r5,r5,119
811165a4:	003f9506 	br	811163fc <__reset+0xfb0f63fc>
811165a8:	00c15504 	movi	r3,1364
811165ac:	19400536 	bltu	r3,r5,811165c4 <_free_r+0x2f0>
811165b0:	100ad4ba 	srli	r5,r2,18
811165b4:	28c01f44 	addi	r3,r5,125
811165b8:	18c7883a 	add	r3,r3,r3
811165bc:	29401f04 	addi	r5,r5,124
811165c0:	003f8e06 	br	811163fc <__reset+0xfb0f63fc>
811165c4:	00c03f84 	movi	r3,254
811165c8:	01401f84 	movi	r5,126
811165cc:	003f8b06 	br	811163fc <__reset+0xfb0f63fc>
811165d0:	10c00054 	ori	r3,r2,1
811165d4:	30c00115 	stw	r3,4(r6)
811165d8:	308d883a 	add	r6,r6,r2
811165dc:	30800015 	stw	r2,0(r6)
811165e0:	003f7806 	br	811163c4 <__reset+0xfb0f63c4>

811165e4 <__sfvwrite_r>:
811165e4:	30800217 	ldw	r2,8(r6)
811165e8:	10006726 	beq	r2,zero,81116788 <__sfvwrite_r+0x1a4>
811165ec:	28c0030b 	ldhu	r3,12(r5)
811165f0:	defff404 	addi	sp,sp,-48
811165f4:	dd400715 	stw	r21,28(sp)
811165f8:	dd000615 	stw	r20,24(sp)
811165fc:	dc000215 	stw	r16,8(sp)
81116600:	dfc00b15 	stw	ra,44(sp)
81116604:	df000a15 	stw	fp,40(sp)
81116608:	ddc00915 	stw	r23,36(sp)
8111660c:	dd800815 	stw	r22,32(sp)
81116610:	dcc00515 	stw	r19,20(sp)
81116614:	dc800415 	stw	r18,16(sp)
81116618:	dc400315 	stw	r17,12(sp)
8111661c:	1880020c 	andi	r2,r3,8
81116620:	2821883a 	mov	r16,r5
81116624:	202b883a 	mov	r21,r4
81116628:	3029883a 	mov	r20,r6
8111662c:	10002726 	beq	r2,zero,811166cc <__sfvwrite_r+0xe8>
81116630:	28800417 	ldw	r2,16(r5)
81116634:	10002526 	beq	r2,zero,811166cc <__sfvwrite_r+0xe8>
81116638:	1880008c 	andi	r2,r3,2
8111663c:	a4400017 	ldw	r17,0(r20)
81116640:	10002a26 	beq	r2,zero,811166ec <__sfvwrite_r+0x108>
81116644:	05a00034 	movhi	r22,32768
81116648:	0027883a 	mov	r19,zero
8111664c:	0025883a 	mov	r18,zero
81116650:	b5bf0004 	addi	r22,r22,-1024
81116654:	980d883a 	mov	r6,r19
81116658:	a809883a 	mov	r4,r21
8111665c:	90004626 	beq	r18,zero,81116778 <__sfvwrite_r+0x194>
81116660:	900f883a 	mov	r7,r18
81116664:	b480022e 	bgeu	r22,r18,81116670 <__sfvwrite_r+0x8c>
81116668:	01e00034 	movhi	r7,32768
8111666c:	39ff0004 	addi	r7,r7,-1024
81116670:	80800917 	ldw	r2,36(r16)
81116674:	81400717 	ldw	r5,28(r16)
81116678:	103ee83a 	callr	r2
8111667c:	0080570e 	bge	zero,r2,811167dc <__sfvwrite_r+0x1f8>
81116680:	a0c00217 	ldw	r3,8(r20)
81116684:	98a7883a 	add	r19,r19,r2
81116688:	90a5c83a 	sub	r18,r18,r2
8111668c:	1885c83a 	sub	r2,r3,r2
81116690:	a0800215 	stw	r2,8(r20)
81116694:	103fef1e 	bne	r2,zero,81116654 <__reset+0xfb0f6654>
81116698:	0005883a 	mov	r2,zero
8111669c:	dfc00b17 	ldw	ra,44(sp)
811166a0:	df000a17 	ldw	fp,40(sp)
811166a4:	ddc00917 	ldw	r23,36(sp)
811166a8:	dd800817 	ldw	r22,32(sp)
811166ac:	dd400717 	ldw	r21,28(sp)
811166b0:	dd000617 	ldw	r20,24(sp)
811166b4:	dcc00517 	ldw	r19,20(sp)
811166b8:	dc800417 	ldw	r18,16(sp)
811166bc:	dc400317 	ldw	r17,12(sp)
811166c0:	dc000217 	ldw	r16,8(sp)
811166c4:	dec00c04 	addi	sp,sp,48
811166c8:	f800283a 	ret
811166cc:	800b883a 	mov	r5,r16
811166d0:	a809883a 	mov	r4,r21
811166d4:	1113e2c0 	call	81113e2c <__swsetup_r>
811166d8:	1000eb1e 	bne	r2,zero,81116a88 <__sfvwrite_r+0x4a4>
811166dc:	80c0030b 	ldhu	r3,12(r16)
811166e0:	a4400017 	ldw	r17,0(r20)
811166e4:	1880008c 	andi	r2,r3,2
811166e8:	103fd61e 	bne	r2,zero,81116644 <__reset+0xfb0f6644>
811166ec:	1880004c 	andi	r2,r3,1
811166f0:	10003f1e 	bne	r2,zero,811167f0 <__sfvwrite_r+0x20c>
811166f4:	0039883a 	mov	fp,zero
811166f8:	0025883a 	mov	r18,zero
811166fc:	90001a26 	beq	r18,zero,81116768 <__sfvwrite_r+0x184>
81116700:	1880800c 	andi	r2,r3,512
81116704:	84c00217 	ldw	r19,8(r16)
81116708:	10002126 	beq	r2,zero,81116790 <__sfvwrite_r+0x1ac>
8111670c:	982f883a 	mov	r23,r19
81116710:	94c09336 	bltu	r18,r19,81116960 <__sfvwrite_r+0x37c>
81116714:	1881200c 	andi	r2,r3,1152
81116718:	10009e1e 	bne	r2,zero,81116994 <__sfvwrite_r+0x3b0>
8111671c:	81000017 	ldw	r4,0(r16)
81116720:	b80d883a 	mov	r6,r23
81116724:	e00b883a 	mov	r5,fp
81116728:	11170f00 	call	811170f0 <memmove>
8111672c:	80c00217 	ldw	r3,8(r16)
81116730:	81000017 	ldw	r4,0(r16)
81116734:	9005883a 	mov	r2,r18
81116738:	1ce7c83a 	sub	r19,r3,r19
8111673c:	25cf883a 	add	r7,r4,r23
81116740:	84c00215 	stw	r19,8(r16)
81116744:	81c00015 	stw	r7,0(r16)
81116748:	a0c00217 	ldw	r3,8(r20)
8111674c:	e0b9883a 	add	fp,fp,r2
81116750:	90a5c83a 	sub	r18,r18,r2
81116754:	18a7c83a 	sub	r19,r3,r2
81116758:	a4c00215 	stw	r19,8(r20)
8111675c:	983fce26 	beq	r19,zero,81116698 <__reset+0xfb0f6698>
81116760:	80c0030b 	ldhu	r3,12(r16)
81116764:	903fe61e 	bne	r18,zero,81116700 <__reset+0xfb0f6700>
81116768:	8f000017 	ldw	fp,0(r17)
8111676c:	8c800117 	ldw	r18,4(r17)
81116770:	8c400204 	addi	r17,r17,8
81116774:	003fe106 	br	811166fc <__reset+0xfb0f66fc>
81116778:	8cc00017 	ldw	r19,0(r17)
8111677c:	8c800117 	ldw	r18,4(r17)
81116780:	8c400204 	addi	r17,r17,8
81116784:	003fb306 	br	81116654 <__reset+0xfb0f6654>
81116788:	0005883a 	mov	r2,zero
8111678c:	f800283a 	ret
81116790:	81000017 	ldw	r4,0(r16)
81116794:	80800417 	ldw	r2,16(r16)
81116798:	11005736 	bltu	r2,r4,811168f8 <__sfvwrite_r+0x314>
8111679c:	85c00517 	ldw	r23,20(r16)
811167a0:	95c05536 	bltu	r18,r23,811168f8 <__sfvwrite_r+0x314>
811167a4:	00a00034 	movhi	r2,32768
811167a8:	10bfffc4 	addi	r2,r2,-1
811167ac:	9009883a 	mov	r4,r18
811167b0:	1480012e 	bgeu	r2,r18,811167b8 <__sfvwrite_r+0x1d4>
811167b4:	1009883a 	mov	r4,r2
811167b8:	b80b883a 	mov	r5,r23
811167bc:	111f6940 	call	8111f694 <__divsi3>
811167c0:	15cf383a 	mul	r7,r2,r23
811167c4:	81400717 	ldw	r5,28(r16)
811167c8:	80800917 	ldw	r2,36(r16)
811167cc:	e00d883a 	mov	r6,fp
811167d0:	a809883a 	mov	r4,r21
811167d4:	103ee83a 	callr	r2
811167d8:	00bfdb16 	blt	zero,r2,81116748 <__reset+0xfb0f6748>
811167dc:	8080030b 	ldhu	r2,12(r16)
811167e0:	10801014 	ori	r2,r2,64
811167e4:	8080030d 	sth	r2,12(r16)
811167e8:	00bfffc4 	movi	r2,-1
811167ec:	003fab06 	br	8111669c <__reset+0xfb0f669c>
811167f0:	0027883a 	mov	r19,zero
811167f4:	0011883a 	mov	r8,zero
811167f8:	0039883a 	mov	fp,zero
811167fc:	0025883a 	mov	r18,zero
81116800:	90001f26 	beq	r18,zero,81116880 <__sfvwrite_r+0x29c>
81116804:	40005a26 	beq	r8,zero,81116970 <__sfvwrite_r+0x38c>
81116808:	982d883a 	mov	r22,r19
8111680c:	94c0012e 	bgeu	r18,r19,81116814 <__sfvwrite_r+0x230>
81116810:	902d883a 	mov	r22,r18
81116814:	81000017 	ldw	r4,0(r16)
81116818:	80800417 	ldw	r2,16(r16)
8111681c:	b02f883a 	mov	r23,r22
81116820:	81c00517 	ldw	r7,20(r16)
81116824:	1100032e 	bgeu	r2,r4,81116834 <__sfvwrite_r+0x250>
81116828:	80c00217 	ldw	r3,8(r16)
8111682c:	38c7883a 	add	r3,r7,r3
81116830:	1d801816 	blt	r3,r22,81116894 <__sfvwrite_r+0x2b0>
81116834:	b1c03e16 	blt	r22,r7,81116930 <__sfvwrite_r+0x34c>
81116838:	80800917 	ldw	r2,36(r16)
8111683c:	81400717 	ldw	r5,28(r16)
81116840:	e00d883a 	mov	r6,fp
81116844:	da000115 	stw	r8,4(sp)
81116848:	a809883a 	mov	r4,r21
8111684c:	103ee83a 	callr	r2
81116850:	102f883a 	mov	r23,r2
81116854:	da000117 	ldw	r8,4(sp)
81116858:	00bfe00e 	bge	zero,r2,811167dc <__reset+0xfb0f67dc>
8111685c:	9de7c83a 	sub	r19,r19,r23
81116860:	98001f26 	beq	r19,zero,811168e0 <__sfvwrite_r+0x2fc>
81116864:	a0800217 	ldw	r2,8(r20)
81116868:	e5f9883a 	add	fp,fp,r23
8111686c:	95e5c83a 	sub	r18,r18,r23
81116870:	15efc83a 	sub	r23,r2,r23
81116874:	a5c00215 	stw	r23,8(r20)
81116878:	b83f8726 	beq	r23,zero,81116698 <__reset+0xfb0f6698>
8111687c:	903fe11e 	bne	r18,zero,81116804 <__reset+0xfb0f6804>
81116880:	8f000017 	ldw	fp,0(r17)
81116884:	8c800117 	ldw	r18,4(r17)
81116888:	0011883a 	mov	r8,zero
8111688c:	8c400204 	addi	r17,r17,8
81116890:	003fdb06 	br	81116800 <__reset+0xfb0f6800>
81116894:	180d883a 	mov	r6,r3
81116898:	e00b883a 	mov	r5,fp
8111689c:	da000115 	stw	r8,4(sp)
811168a0:	d8c00015 	stw	r3,0(sp)
811168a4:	11170f00 	call	811170f0 <memmove>
811168a8:	d8c00017 	ldw	r3,0(sp)
811168ac:	80800017 	ldw	r2,0(r16)
811168b0:	800b883a 	mov	r5,r16
811168b4:	a809883a 	mov	r4,r21
811168b8:	10c5883a 	add	r2,r2,r3
811168bc:	80800015 	stw	r2,0(r16)
811168c0:	d8c00015 	stw	r3,0(sp)
811168c4:	1115a780 	call	81115a78 <_fflush_r>
811168c8:	d8c00017 	ldw	r3,0(sp)
811168cc:	da000117 	ldw	r8,4(sp)
811168d0:	103fc21e 	bne	r2,zero,811167dc <__reset+0xfb0f67dc>
811168d4:	182f883a 	mov	r23,r3
811168d8:	9de7c83a 	sub	r19,r19,r23
811168dc:	983fe11e 	bne	r19,zero,81116864 <__reset+0xfb0f6864>
811168e0:	800b883a 	mov	r5,r16
811168e4:	a809883a 	mov	r4,r21
811168e8:	1115a780 	call	81115a78 <_fflush_r>
811168ec:	103fbb1e 	bne	r2,zero,811167dc <__reset+0xfb0f67dc>
811168f0:	0011883a 	mov	r8,zero
811168f4:	003fdb06 	br	81116864 <__reset+0xfb0f6864>
811168f8:	94c0012e 	bgeu	r18,r19,81116900 <__sfvwrite_r+0x31c>
811168fc:	9027883a 	mov	r19,r18
81116900:	980d883a 	mov	r6,r19
81116904:	e00b883a 	mov	r5,fp
81116908:	11170f00 	call	811170f0 <memmove>
8111690c:	80800217 	ldw	r2,8(r16)
81116910:	80c00017 	ldw	r3,0(r16)
81116914:	14c5c83a 	sub	r2,r2,r19
81116918:	1cc7883a 	add	r3,r3,r19
8111691c:	80800215 	stw	r2,8(r16)
81116920:	80c00015 	stw	r3,0(r16)
81116924:	10004326 	beq	r2,zero,81116a34 <__sfvwrite_r+0x450>
81116928:	9805883a 	mov	r2,r19
8111692c:	003f8606 	br	81116748 <__reset+0xfb0f6748>
81116930:	b00d883a 	mov	r6,r22
81116934:	e00b883a 	mov	r5,fp
81116938:	da000115 	stw	r8,4(sp)
8111693c:	11170f00 	call	811170f0 <memmove>
81116940:	80800217 	ldw	r2,8(r16)
81116944:	80c00017 	ldw	r3,0(r16)
81116948:	da000117 	ldw	r8,4(sp)
8111694c:	1585c83a 	sub	r2,r2,r22
81116950:	1dad883a 	add	r22,r3,r22
81116954:	80800215 	stw	r2,8(r16)
81116958:	85800015 	stw	r22,0(r16)
8111695c:	003fbf06 	br	8111685c <__reset+0xfb0f685c>
81116960:	81000017 	ldw	r4,0(r16)
81116964:	9027883a 	mov	r19,r18
81116968:	902f883a 	mov	r23,r18
8111696c:	003f6c06 	br	81116720 <__reset+0xfb0f6720>
81116970:	900d883a 	mov	r6,r18
81116974:	01400284 	movi	r5,10
81116978:	e009883a 	mov	r4,fp
8111697c:	111700c0 	call	8111700c <memchr>
81116980:	10003e26 	beq	r2,zero,81116a7c <__sfvwrite_r+0x498>
81116984:	10800044 	addi	r2,r2,1
81116988:	1727c83a 	sub	r19,r2,fp
8111698c:	02000044 	movi	r8,1
81116990:	003f9d06 	br	81116808 <__reset+0xfb0f6808>
81116994:	80800517 	ldw	r2,20(r16)
81116998:	81400417 	ldw	r5,16(r16)
8111699c:	81c00017 	ldw	r7,0(r16)
811169a0:	10a7883a 	add	r19,r2,r2
811169a4:	9885883a 	add	r2,r19,r2
811169a8:	1026d7fa 	srli	r19,r2,31
811169ac:	396dc83a 	sub	r22,r7,r5
811169b0:	b1000044 	addi	r4,r22,1
811169b4:	9885883a 	add	r2,r19,r2
811169b8:	1027d07a 	srai	r19,r2,1
811169bc:	2485883a 	add	r2,r4,r18
811169c0:	980d883a 	mov	r6,r19
811169c4:	9880022e 	bgeu	r19,r2,811169d0 <__sfvwrite_r+0x3ec>
811169c8:	1027883a 	mov	r19,r2
811169cc:	100d883a 	mov	r6,r2
811169d0:	18c1000c 	andi	r3,r3,1024
811169d4:	18001c26 	beq	r3,zero,81116a48 <__sfvwrite_r+0x464>
811169d8:	300b883a 	mov	r5,r6
811169dc:	a809883a 	mov	r4,r21
811169e0:	110cc740 	call	8110cc74 <_malloc_r>
811169e4:	102f883a 	mov	r23,r2
811169e8:	10002926 	beq	r2,zero,81116a90 <__sfvwrite_r+0x4ac>
811169ec:	81400417 	ldw	r5,16(r16)
811169f0:	b00d883a 	mov	r6,r22
811169f4:	1009883a 	mov	r4,r2
811169f8:	110d4800 	call	8110d480 <memcpy>
811169fc:	8080030b 	ldhu	r2,12(r16)
81116a00:	00fedfc4 	movi	r3,-1153
81116a04:	10c4703a 	and	r2,r2,r3
81116a08:	10802014 	ori	r2,r2,128
81116a0c:	8080030d 	sth	r2,12(r16)
81116a10:	bd89883a 	add	r4,r23,r22
81116a14:	9d8fc83a 	sub	r7,r19,r22
81116a18:	85c00415 	stw	r23,16(r16)
81116a1c:	84c00515 	stw	r19,20(r16)
81116a20:	81000015 	stw	r4,0(r16)
81116a24:	9027883a 	mov	r19,r18
81116a28:	81c00215 	stw	r7,8(r16)
81116a2c:	902f883a 	mov	r23,r18
81116a30:	003f3b06 	br	81116720 <__reset+0xfb0f6720>
81116a34:	800b883a 	mov	r5,r16
81116a38:	a809883a 	mov	r4,r21
81116a3c:	1115a780 	call	81115a78 <_fflush_r>
81116a40:	103fb926 	beq	r2,zero,81116928 <__reset+0xfb0f6928>
81116a44:	003f6506 	br	811167dc <__reset+0xfb0f67dc>
81116a48:	a809883a 	mov	r4,r21
81116a4c:	11184100 	call	81118410 <_realloc_r>
81116a50:	102f883a 	mov	r23,r2
81116a54:	103fee1e 	bne	r2,zero,81116a10 <__reset+0xfb0f6a10>
81116a58:	81400417 	ldw	r5,16(r16)
81116a5c:	a809883a 	mov	r4,r21
81116a60:	11162d40 	call	811162d4 <_free_r>
81116a64:	8080030b 	ldhu	r2,12(r16)
81116a68:	00ffdfc4 	movi	r3,-129
81116a6c:	1884703a 	and	r2,r3,r2
81116a70:	00c00304 	movi	r3,12
81116a74:	a8c00015 	stw	r3,0(r21)
81116a78:	003f5906 	br	811167e0 <__reset+0xfb0f67e0>
81116a7c:	94c00044 	addi	r19,r18,1
81116a80:	02000044 	movi	r8,1
81116a84:	003f6006 	br	81116808 <__reset+0xfb0f6808>
81116a88:	00bfffc4 	movi	r2,-1
81116a8c:	003f0306 	br	8111669c <__reset+0xfb0f669c>
81116a90:	00800304 	movi	r2,12
81116a94:	a8800015 	stw	r2,0(r21)
81116a98:	8080030b 	ldhu	r2,12(r16)
81116a9c:	003f5006 	br	811167e0 <__reset+0xfb0f67e0>

81116aa0 <_fwalk>:
81116aa0:	defff704 	addi	sp,sp,-36
81116aa4:	dd000415 	stw	r20,16(sp)
81116aa8:	dfc00815 	stw	ra,32(sp)
81116aac:	ddc00715 	stw	r23,28(sp)
81116ab0:	dd800615 	stw	r22,24(sp)
81116ab4:	dd400515 	stw	r21,20(sp)
81116ab8:	dcc00315 	stw	r19,12(sp)
81116abc:	dc800215 	stw	r18,8(sp)
81116ac0:	dc400115 	stw	r17,4(sp)
81116ac4:	dc000015 	stw	r16,0(sp)
81116ac8:	2500b804 	addi	r20,r4,736
81116acc:	a0002326 	beq	r20,zero,81116b5c <_fwalk+0xbc>
81116ad0:	282b883a 	mov	r21,r5
81116ad4:	002f883a 	mov	r23,zero
81116ad8:	05800044 	movi	r22,1
81116adc:	04ffffc4 	movi	r19,-1
81116ae0:	a4400117 	ldw	r17,4(r20)
81116ae4:	a4800217 	ldw	r18,8(r20)
81116ae8:	8c7fffc4 	addi	r17,r17,-1
81116aec:	88000d16 	blt	r17,zero,81116b24 <_fwalk+0x84>
81116af0:	94000304 	addi	r16,r18,12
81116af4:	94800384 	addi	r18,r18,14
81116af8:	8080000b 	ldhu	r2,0(r16)
81116afc:	8c7fffc4 	addi	r17,r17,-1
81116b00:	813ffd04 	addi	r4,r16,-12
81116b04:	b080042e 	bgeu	r22,r2,81116b18 <_fwalk+0x78>
81116b08:	9080000f 	ldh	r2,0(r18)
81116b0c:	14c00226 	beq	r2,r19,81116b18 <_fwalk+0x78>
81116b10:	a83ee83a 	callr	r21
81116b14:	b8aeb03a 	or	r23,r23,r2
81116b18:	84001a04 	addi	r16,r16,104
81116b1c:	94801a04 	addi	r18,r18,104
81116b20:	8cfff51e 	bne	r17,r19,81116af8 <__reset+0xfb0f6af8>
81116b24:	a5000017 	ldw	r20,0(r20)
81116b28:	a03fed1e 	bne	r20,zero,81116ae0 <__reset+0xfb0f6ae0>
81116b2c:	b805883a 	mov	r2,r23
81116b30:	dfc00817 	ldw	ra,32(sp)
81116b34:	ddc00717 	ldw	r23,28(sp)
81116b38:	dd800617 	ldw	r22,24(sp)
81116b3c:	dd400517 	ldw	r21,20(sp)
81116b40:	dd000417 	ldw	r20,16(sp)
81116b44:	dcc00317 	ldw	r19,12(sp)
81116b48:	dc800217 	ldw	r18,8(sp)
81116b4c:	dc400117 	ldw	r17,4(sp)
81116b50:	dc000017 	ldw	r16,0(sp)
81116b54:	dec00904 	addi	sp,sp,36
81116b58:	f800283a 	ret
81116b5c:	002f883a 	mov	r23,zero
81116b60:	003ff206 	br	81116b2c <__reset+0xfb0f6b2c>

81116b64 <_fwalk_reent>:
81116b64:	defff704 	addi	sp,sp,-36
81116b68:	dd000415 	stw	r20,16(sp)
81116b6c:	dfc00815 	stw	ra,32(sp)
81116b70:	ddc00715 	stw	r23,28(sp)
81116b74:	dd800615 	stw	r22,24(sp)
81116b78:	dd400515 	stw	r21,20(sp)
81116b7c:	dcc00315 	stw	r19,12(sp)
81116b80:	dc800215 	stw	r18,8(sp)
81116b84:	dc400115 	stw	r17,4(sp)
81116b88:	dc000015 	stw	r16,0(sp)
81116b8c:	2500b804 	addi	r20,r4,736
81116b90:	a0002326 	beq	r20,zero,81116c20 <_fwalk_reent+0xbc>
81116b94:	282b883a 	mov	r21,r5
81116b98:	2027883a 	mov	r19,r4
81116b9c:	002f883a 	mov	r23,zero
81116ba0:	05800044 	movi	r22,1
81116ba4:	04bfffc4 	movi	r18,-1
81116ba8:	a4400117 	ldw	r17,4(r20)
81116bac:	a4000217 	ldw	r16,8(r20)
81116bb0:	8c7fffc4 	addi	r17,r17,-1
81116bb4:	88000c16 	blt	r17,zero,81116be8 <_fwalk_reent+0x84>
81116bb8:	84000304 	addi	r16,r16,12
81116bbc:	8080000b 	ldhu	r2,0(r16)
81116bc0:	8c7fffc4 	addi	r17,r17,-1
81116bc4:	817ffd04 	addi	r5,r16,-12
81116bc8:	b080052e 	bgeu	r22,r2,81116be0 <_fwalk_reent+0x7c>
81116bcc:	8080008f 	ldh	r2,2(r16)
81116bd0:	9809883a 	mov	r4,r19
81116bd4:	14800226 	beq	r2,r18,81116be0 <_fwalk_reent+0x7c>
81116bd8:	a83ee83a 	callr	r21
81116bdc:	b8aeb03a 	or	r23,r23,r2
81116be0:	84001a04 	addi	r16,r16,104
81116be4:	8cbff51e 	bne	r17,r18,81116bbc <__reset+0xfb0f6bbc>
81116be8:	a5000017 	ldw	r20,0(r20)
81116bec:	a03fee1e 	bne	r20,zero,81116ba8 <__reset+0xfb0f6ba8>
81116bf0:	b805883a 	mov	r2,r23
81116bf4:	dfc00817 	ldw	ra,32(sp)
81116bf8:	ddc00717 	ldw	r23,28(sp)
81116bfc:	dd800617 	ldw	r22,24(sp)
81116c00:	dd400517 	ldw	r21,20(sp)
81116c04:	dd000417 	ldw	r20,16(sp)
81116c08:	dcc00317 	ldw	r19,12(sp)
81116c0c:	dc800217 	ldw	r18,8(sp)
81116c10:	dc400117 	ldw	r17,4(sp)
81116c14:	dc000017 	ldw	r16,0(sp)
81116c18:	dec00904 	addi	sp,sp,36
81116c1c:	f800283a 	ret
81116c20:	002f883a 	mov	r23,zero
81116c24:	003ff206 	br	81116bf0 <__reset+0xfb0f6bf0>

81116c28 <_isatty_r>:
81116c28:	defffd04 	addi	sp,sp,-12
81116c2c:	dc000015 	stw	r16,0(sp)
81116c30:	04204534 	movhi	r16,33044
81116c34:	dc400115 	stw	r17,4(sp)
81116c38:	8426b904 	addi	r16,r16,-25884
81116c3c:	2023883a 	mov	r17,r4
81116c40:	2809883a 	mov	r4,r5
81116c44:	dfc00215 	stw	ra,8(sp)
81116c48:	80000015 	stw	zero,0(r16)
81116c4c:	1121bb00 	call	81121bb0 <isatty>
81116c50:	00ffffc4 	movi	r3,-1
81116c54:	10c00526 	beq	r2,r3,81116c6c <_isatty_r+0x44>
81116c58:	dfc00217 	ldw	ra,8(sp)
81116c5c:	dc400117 	ldw	r17,4(sp)
81116c60:	dc000017 	ldw	r16,0(sp)
81116c64:	dec00304 	addi	sp,sp,12
81116c68:	f800283a 	ret
81116c6c:	80c00017 	ldw	r3,0(r16)
81116c70:	183ff926 	beq	r3,zero,81116c58 <__reset+0xfb0f6c58>
81116c74:	88c00015 	stw	r3,0(r17)
81116c78:	003ff706 	br	81116c58 <__reset+0xfb0f6c58>

81116c7c <iswspace>:
81116c7c:	00803fc4 	movi	r2,255
81116c80:	11000836 	bltu	r2,r4,81116ca4 <iswspace+0x28>
81116c84:	00a04534 	movhi	r2,33044
81116c88:	10a65904 	addi	r2,r2,-26268
81116c8c:	10800017 	ldw	r2,0(r2)
81116c90:	1109883a 	add	r4,r2,r4
81116c94:	20800043 	ldbu	r2,1(r4)
81116c98:	1080020c 	andi	r2,r2,8
81116c9c:	10803fcc 	andi	r2,r2,255
81116ca0:	f800283a 	ret
81116ca4:	0005883a 	mov	r2,zero
81116ca8:	f800283a 	ret

81116cac <_setlocale_r>:
81116cac:	30001b26 	beq	r6,zero,81116d1c <_setlocale_r+0x70>
81116cb0:	016044f4 	movhi	r5,33043
81116cb4:	defffe04 	addi	sp,sp,-8
81116cb8:	295d8804 	addi	r5,r5,30240
81116cbc:	3009883a 	mov	r4,r6
81116cc0:	dc000015 	stw	r16,0(sp)
81116cc4:	dfc00115 	stw	ra,4(sp)
81116cc8:	3021883a 	mov	r16,r6
81116ccc:	1118ac00 	call	81118ac0 <strcmp>
81116cd0:	1000061e 	bne	r2,zero,81116cec <_setlocale_r+0x40>
81116cd4:	00a044f4 	movhi	r2,33043
81116cd8:	109d5704 	addi	r2,r2,30044
81116cdc:	dfc00117 	ldw	ra,4(sp)
81116ce0:	dc000017 	ldw	r16,0(sp)
81116ce4:	dec00204 	addi	sp,sp,8
81116ce8:	f800283a 	ret
81116cec:	016044f4 	movhi	r5,33043
81116cf0:	295d5704 	addi	r5,r5,30044
81116cf4:	8009883a 	mov	r4,r16
81116cf8:	1118ac00 	call	81118ac0 <strcmp>
81116cfc:	103ff526 	beq	r2,zero,81116cd4 <__reset+0xfb0f6cd4>
81116d00:	016044f4 	movhi	r5,33043
81116d04:	295d6104 	addi	r5,r5,30084
81116d08:	8009883a 	mov	r4,r16
81116d0c:	1118ac00 	call	81118ac0 <strcmp>
81116d10:	103ff026 	beq	r2,zero,81116cd4 <__reset+0xfb0f6cd4>
81116d14:	0005883a 	mov	r2,zero
81116d18:	003ff006 	br	81116cdc <__reset+0xfb0f6cdc>
81116d1c:	00a044f4 	movhi	r2,33043
81116d20:	109d5704 	addi	r2,r2,30044
81116d24:	f800283a 	ret

81116d28 <__locale_charset>:
81116d28:	00a04534 	movhi	r2,33044
81116d2c:	10a14604 	addi	r2,r2,-31464
81116d30:	f800283a 	ret

81116d34 <__locale_mb_cur_max>:
81116d34:	00a04534 	movhi	r2,33044
81116d38:	10a65e04 	addi	r2,r2,-26248
81116d3c:	10800017 	ldw	r2,0(r2)
81116d40:	f800283a 	ret

81116d44 <__locale_msgcharset>:
81116d44:	00a04534 	movhi	r2,33044
81116d48:	10a13e04 	addi	r2,r2,-31496
81116d4c:	f800283a 	ret

81116d50 <__locale_cjk_lang>:
81116d50:	0005883a 	mov	r2,zero
81116d54:	f800283a 	ret

81116d58 <_localeconv_r>:
81116d58:	00a04534 	movhi	r2,33044
81116d5c:	10a14e04 	addi	r2,r2,-31432
81116d60:	f800283a 	ret

81116d64 <setlocale>:
81116d64:	00a04534 	movhi	r2,33044
81116d68:	10a65b04 	addi	r2,r2,-26260
81116d6c:	280d883a 	mov	r6,r5
81116d70:	200b883a 	mov	r5,r4
81116d74:	11000017 	ldw	r4,0(r2)
81116d78:	1116cac1 	jmpi	81116cac <_setlocale_r>

81116d7c <localeconv>:
81116d7c:	00a04534 	movhi	r2,33044
81116d80:	10a14e04 	addi	r2,r2,-31432
81116d84:	f800283a 	ret

81116d88 <_lseek_r>:
81116d88:	defffd04 	addi	sp,sp,-12
81116d8c:	2805883a 	mov	r2,r5
81116d90:	dc000015 	stw	r16,0(sp)
81116d94:	04204534 	movhi	r16,33044
81116d98:	dc400115 	stw	r17,4(sp)
81116d9c:	300b883a 	mov	r5,r6
81116da0:	8426b904 	addi	r16,r16,-25884
81116da4:	2023883a 	mov	r17,r4
81116da8:	380d883a 	mov	r6,r7
81116dac:	1009883a 	mov	r4,r2
81116db0:	dfc00215 	stw	ra,8(sp)
81116db4:	80000015 	stw	zero,0(r16)
81116db8:	1121c900 	call	81121c90 <lseek>
81116dbc:	00ffffc4 	movi	r3,-1
81116dc0:	10c00526 	beq	r2,r3,81116dd8 <_lseek_r+0x50>
81116dc4:	dfc00217 	ldw	ra,8(sp)
81116dc8:	dc400117 	ldw	r17,4(sp)
81116dcc:	dc000017 	ldw	r16,0(sp)
81116dd0:	dec00304 	addi	sp,sp,12
81116dd4:	f800283a 	ret
81116dd8:	80c00017 	ldw	r3,0(r16)
81116ddc:	183ff926 	beq	r3,zero,81116dc4 <__reset+0xfb0f6dc4>
81116de0:	88c00015 	stw	r3,0(r17)
81116de4:	003ff706 	br	81116dc4 <__reset+0xfb0f6dc4>

81116de8 <_mbrtowc_r>:
81116de8:	defff704 	addi	sp,sp,-36
81116dec:	00a04534 	movhi	r2,33044
81116df0:	dc800715 	stw	r18,28(sp)
81116df4:	dc400615 	stw	r17,24(sp)
81116df8:	dc000515 	stw	r16,20(sp)
81116dfc:	10a65f04 	addi	r2,r2,-26244
81116e00:	dfc00815 	stw	ra,32(sp)
81116e04:	2021883a 	mov	r16,r4
81116e08:	dc400917 	ldw	r17,36(sp)
81116e0c:	14800017 	ldw	r18,0(r2)
81116e10:	30001626 	beq	r6,zero,81116e6c <_mbrtowc_r+0x84>
81116e14:	d9400215 	stw	r5,8(sp)
81116e18:	d9800315 	stw	r6,12(sp)
81116e1c:	d9c00415 	stw	r7,16(sp)
81116e20:	1116d280 	call	81116d28 <__locale_charset>
81116e24:	d9c00417 	ldw	r7,16(sp)
81116e28:	d9800317 	ldw	r6,12(sp)
81116e2c:	d9400217 	ldw	r5,8(sp)
81116e30:	d8800015 	stw	r2,0(sp)
81116e34:	dc400115 	stw	r17,4(sp)
81116e38:	8009883a 	mov	r4,r16
81116e3c:	903ee83a 	callr	r18
81116e40:	00ffffc4 	movi	r3,-1
81116e44:	10c0031e 	bne	r2,r3,81116e54 <_mbrtowc_r+0x6c>
81116e48:	88000015 	stw	zero,0(r17)
81116e4c:	00c02284 	movi	r3,138
81116e50:	80c00015 	stw	r3,0(r16)
81116e54:	dfc00817 	ldw	ra,32(sp)
81116e58:	dc800717 	ldw	r18,28(sp)
81116e5c:	dc400617 	ldw	r17,24(sp)
81116e60:	dc000517 	ldw	r16,20(sp)
81116e64:	dec00904 	addi	sp,sp,36
81116e68:	f800283a 	ret
81116e6c:	1116d280 	call	81116d28 <__locale_charset>
81116e70:	01a044f4 	movhi	r6,33043
81116e74:	319d6104 	addi	r6,r6,30084
81116e78:	dc400115 	stw	r17,4(sp)
81116e7c:	d8800015 	stw	r2,0(sp)
81116e80:	01c00044 	movi	r7,1
81116e84:	000b883a 	mov	r5,zero
81116e88:	8009883a 	mov	r4,r16
81116e8c:	903ee83a 	callr	r18
81116e90:	003feb06 	br	81116e40 <__reset+0xfb0f6e40>

81116e94 <mbrtowc>:
81116e94:	defff704 	addi	sp,sp,-36
81116e98:	00a04534 	movhi	r2,33044
81116e9c:	dc800415 	stw	r18,16(sp)
81116ea0:	dc400315 	stw	r17,12(sp)
81116ea4:	10a65b04 	addi	r2,r2,-26260
81116ea8:	dfc00815 	stw	ra,32(sp)
81116eac:	dd400715 	stw	r21,28(sp)
81116eb0:	dd000615 	stw	r20,24(sp)
81116eb4:	dcc00515 	stw	r19,20(sp)
81116eb8:	dc000215 	stw	r16,8(sp)
81116ebc:	3825883a 	mov	r18,r7
81116ec0:	14400017 	ldw	r17,0(r2)
81116ec4:	28001c26 	beq	r5,zero,81116f38 <mbrtowc+0xa4>
81116ec8:	00a04534 	movhi	r2,33044
81116ecc:	10a65f04 	addi	r2,r2,-26244
81116ed0:	15400017 	ldw	r21,0(r2)
81116ed4:	2821883a 	mov	r16,r5
81116ed8:	2027883a 	mov	r19,r4
81116edc:	3029883a 	mov	r20,r6
81116ee0:	1116d280 	call	81116d28 <__locale_charset>
81116ee4:	d8800015 	stw	r2,0(sp)
81116ee8:	dc800115 	stw	r18,4(sp)
81116eec:	a00f883a 	mov	r7,r20
81116ef0:	800d883a 	mov	r6,r16
81116ef4:	980b883a 	mov	r5,r19
81116ef8:	8809883a 	mov	r4,r17
81116efc:	a83ee83a 	callr	r21
81116f00:	00ffffc4 	movi	r3,-1
81116f04:	10c0031e 	bne	r2,r3,81116f14 <mbrtowc+0x80>
81116f08:	90000015 	stw	zero,0(r18)
81116f0c:	00c02284 	movi	r3,138
81116f10:	88c00015 	stw	r3,0(r17)
81116f14:	dfc00817 	ldw	ra,32(sp)
81116f18:	dd400717 	ldw	r21,28(sp)
81116f1c:	dd000617 	ldw	r20,24(sp)
81116f20:	dcc00517 	ldw	r19,20(sp)
81116f24:	dc800417 	ldw	r18,16(sp)
81116f28:	dc400317 	ldw	r17,12(sp)
81116f2c:	dc000217 	ldw	r16,8(sp)
81116f30:	dec00904 	addi	sp,sp,36
81116f34:	f800283a 	ret
81116f38:	00a04534 	movhi	r2,33044
81116f3c:	10a65f04 	addi	r2,r2,-26244
81116f40:	14000017 	ldw	r16,0(r2)
81116f44:	1116d280 	call	81116d28 <__locale_charset>
81116f48:	01a044f4 	movhi	r6,33043
81116f4c:	319d6104 	addi	r6,r6,30084
81116f50:	dc800115 	stw	r18,4(sp)
81116f54:	d8800015 	stw	r2,0(sp)
81116f58:	01c00044 	movi	r7,1
81116f5c:	000b883a 	mov	r5,zero
81116f60:	8809883a 	mov	r4,r17
81116f64:	803ee83a 	callr	r16
81116f68:	003fe506 	br	81116f00 <__reset+0xfb0f6f00>

81116f6c <__ascii_mbtowc>:
81116f6c:	deffff04 	addi	sp,sp,-4
81116f70:	28000826 	beq	r5,zero,81116f94 <__ascii_mbtowc+0x28>
81116f74:	30000926 	beq	r6,zero,81116f9c <__ascii_mbtowc+0x30>
81116f78:	38000b26 	beq	r7,zero,81116fa8 <__ascii_mbtowc+0x3c>
81116f7c:	30800003 	ldbu	r2,0(r6)
81116f80:	28800015 	stw	r2,0(r5)
81116f84:	30800003 	ldbu	r2,0(r6)
81116f88:	1004c03a 	cmpne	r2,r2,zero
81116f8c:	dec00104 	addi	sp,sp,4
81116f90:	f800283a 	ret
81116f94:	d80b883a 	mov	r5,sp
81116f98:	303ff71e 	bne	r6,zero,81116f78 <__reset+0xfb0f6f78>
81116f9c:	0005883a 	mov	r2,zero
81116fa0:	dec00104 	addi	sp,sp,4
81116fa4:	f800283a 	ret
81116fa8:	00bfff84 	movi	r2,-2
81116fac:	003ff706 	br	81116f8c <__reset+0xfb0f6f8c>

81116fb0 <_mbtowc_r>:
81116fb0:	00a04534 	movhi	r2,33044
81116fb4:	defff804 	addi	sp,sp,-32
81116fb8:	10a65f04 	addi	r2,r2,-26244
81116fbc:	dfc00715 	stw	ra,28(sp)
81116fc0:	dc000615 	stw	r16,24(sp)
81116fc4:	14000017 	ldw	r16,0(r2)
81116fc8:	d9000215 	stw	r4,8(sp)
81116fcc:	d9400315 	stw	r5,12(sp)
81116fd0:	d9800415 	stw	r6,16(sp)
81116fd4:	d9c00515 	stw	r7,20(sp)
81116fd8:	1116d280 	call	81116d28 <__locale_charset>
81116fdc:	d8800015 	stw	r2,0(sp)
81116fe0:	d8800817 	ldw	r2,32(sp)
81116fe4:	d9c00517 	ldw	r7,20(sp)
81116fe8:	d9800417 	ldw	r6,16(sp)
81116fec:	d9400317 	ldw	r5,12(sp)
81116ff0:	d9000217 	ldw	r4,8(sp)
81116ff4:	d8800115 	stw	r2,4(sp)
81116ff8:	803ee83a 	callr	r16
81116ffc:	dfc00717 	ldw	ra,28(sp)
81117000:	dc000617 	ldw	r16,24(sp)
81117004:	dec00804 	addi	sp,sp,32
81117008:	f800283a 	ret

8111700c <memchr>:
8111700c:	208000cc 	andi	r2,r4,3
81117010:	280f883a 	mov	r7,r5
81117014:	10003426 	beq	r2,zero,811170e8 <memchr+0xdc>
81117018:	30bfffc4 	addi	r2,r6,-1
8111701c:	30001a26 	beq	r6,zero,81117088 <memchr+0x7c>
81117020:	20c00003 	ldbu	r3,0(r4)
81117024:	29803fcc 	andi	r6,r5,255
81117028:	30c0051e 	bne	r6,r3,81117040 <memchr+0x34>
8111702c:	00001806 	br	81117090 <memchr+0x84>
81117030:	10001526 	beq	r2,zero,81117088 <memchr+0x7c>
81117034:	20c00003 	ldbu	r3,0(r4)
81117038:	10bfffc4 	addi	r2,r2,-1
8111703c:	30c01426 	beq	r6,r3,81117090 <memchr+0x84>
81117040:	21000044 	addi	r4,r4,1
81117044:	20c000cc 	andi	r3,r4,3
81117048:	183ff91e 	bne	r3,zero,81117030 <__reset+0xfb0f7030>
8111704c:	020000c4 	movi	r8,3
81117050:	40801136 	bltu	r8,r2,81117098 <memchr+0x8c>
81117054:	10000c26 	beq	r2,zero,81117088 <memchr+0x7c>
81117058:	20c00003 	ldbu	r3,0(r4)
8111705c:	29403fcc 	andi	r5,r5,255
81117060:	28c00b26 	beq	r5,r3,81117090 <memchr+0x84>
81117064:	20c00044 	addi	r3,r4,1
81117068:	39803fcc 	andi	r6,r7,255
8111706c:	2089883a 	add	r4,r4,r2
81117070:	00000306 	br	81117080 <memchr+0x74>
81117074:	18c00044 	addi	r3,r3,1
81117078:	197fffc3 	ldbu	r5,-1(r3)
8111707c:	31400526 	beq	r6,r5,81117094 <memchr+0x88>
81117080:	1805883a 	mov	r2,r3
81117084:	20fffb1e 	bne	r4,r3,81117074 <__reset+0xfb0f7074>
81117088:	0005883a 	mov	r2,zero
8111708c:	f800283a 	ret
81117090:	2005883a 	mov	r2,r4
81117094:	f800283a 	ret
81117098:	28c03fcc 	andi	r3,r5,255
8111709c:	1812923a 	slli	r9,r3,8
811170a0:	02ffbff4 	movhi	r11,65279
811170a4:	02a02074 	movhi	r10,32897
811170a8:	48d2b03a 	or	r9,r9,r3
811170ac:	4806943a 	slli	r3,r9,16
811170b0:	5affbfc4 	addi	r11,r11,-257
811170b4:	52a02004 	addi	r10,r10,-32640
811170b8:	48d2b03a 	or	r9,r9,r3
811170bc:	20c00017 	ldw	r3,0(r4)
811170c0:	48c6f03a 	xor	r3,r9,r3
811170c4:	1acd883a 	add	r6,r3,r11
811170c8:	00c6303a 	nor	r3,zero,r3
811170cc:	30c6703a 	and	r3,r6,r3
811170d0:	1a86703a 	and	r3,r3,r10
811170d4:	183fe01e 	bne	r3,zero,81117058 <__reset+0xfb0f7058>
811170d8:	10bfff04 	addi	r2,r2,-4
811170dc:	21000104 	addi	r4,r4,4
811170e0:	40bff636 	bltu	r8,r2,811170bc <__reset+0xfb0f70bc>
811170e4:	003fdb06 	br	81117054 <__reset+0xfb0f7054>
811170e8:	3005883a 	mov	r2,r6
811170ec:	003fd706 	br	8111704c <__reset+0xfb0f704c>

811170f0 <memmove>:
811170f0:	2005883a 	mov	r2,r4
811170f4:	29000b2e 	bgeu	r5,r4,81117124 <memmove+0x34>
811170f8:	298f883a 	add	r7,r5,r6
811170fc:	21c0092e 	bgeu	r4,r7,81117124 <memmove+0x34>
81117100:	2187883a 	add	r3,r4,r6
81117104:	198bc83a 	sub	r5,r3,r6
81117108:	30004826 	beq	r6,zero,8111722c <memmove+0x13c>
8111710c:	39ffffc4 	addi	r7,r7,-1
81117110:	39000003 	ldbu	r4,0(r7)
81117114:	18ffffc4 	addi	r3,r3,-1
81117118:	19000005 	stb	r4,0(r3)
8111711c:	28fffb1e 	bne	r5,r3,8111710c <__reset+0xfb0f710c>
81117120:	f800283a 	ret
81117124:	00c003c4 	movi	r3,15
81117128:	1980412e 	bgeu	r3,r6,81117230 <memmove+0x140>
8111712c:	2886b03a 	or	r3,r5,r2
81117130:	18c000cc 	andi	r3,r3,3
81117134:	1800401e 	bne	r3,zero,81117238 <memmove+0x148>
81117138:	33fffc04 	addi	r15,r6,-16
8111713c:	781ed13a 	srli	r15,r15,4
81117140:	28c00104 	addi	r3,r5,4
81117144:	13400104 	addi	r13,r2,4
81117148:	781c913a 	slli	r14,r15,4
8111714c:	2b000204 	addi	r12,r5,8
81117150:	12c00204 	addi	r11,r2,8
81117154:	73800504 	addi	r14,r14,20
81117158:	2a800304 	addi	r10,r5,12
8111715c:	12400304 	addi	r9,r2,12
81117160:	2b9d883a 	add	r14,r5,r14
81117164:	2811883a 	mov	r8,r5
81117168:	100f883a 	mov	r7,r2
8111716c:	41000017 	ldw	r4,0(r8)
81117170:	39c00404 	addi	r7,r7,16
81117174:	18c00404 	addi	r3,r3,16
81117178:	393ffc15 	stw	r4,-16(r7)
8111717c:	193ffc17 	ldw	r4,-16(r3)
81117180:	6b400404 	addi	r13,r13,16
81117184:	5ac00404 	addi	r11,r11,16
81117188:	693ffc15 	stw	r4,-16(r13)
8111718c:	61000017 	ldw	r4,0(r12)
81117190:	4a400404 	addi	r9,r9,16
81117194:	42000404 	addi	r8,r8,16
81117198:	593ffc15 	stw	r4,-16(r11)
8111719c:	51000017 	ldw	r4,0(r10)
811171a0:	63000404 	addi	r12,r12,16
811171a4:	52800404 	addi	r10,r10,16
811171a8:	493ffc15 	stw	r4,-16(r9)
811171ac:	1bbfef1e 	bne	r3,r14,8111716c <__reset+0xfb0f716c>
811171b0:	79000044 	addi	r4,r15,1
811171b4:	2008913a 	slli	r4,r4,4
811171b8:	328003cc 	andi	r10,r6,15
811171bc:	02c000c4 	movi	r11,3
811171c0:	1107883a 	add	r3,r2,r4
811171c4:	290b883a 	add	r5,r5,r4
811171c8:	5a801e2e 	bgeu	r11,r10,81117244 <memmove+0x154>
811171cc:	1813883a 	mov	r9,r3
811171d0:	2811883a 	mov	r8,r5
811171d4:	500f883a 	mov	r7,r10
811171d8:	41000017 	ldw	r4,0(r8)
811171dc:	4a400104 	addi	r9,r9,4
811171e0:	39ffff04 	addi	r7,r7,-4
811171e4:	493fff15 	stw	r4,-4(r9)
811171e8:	42000104 	addi	r8,r8,4
811171ec:	59fffa36 	bltu	r11,r7,811171d8 <__reset+0xfb0f71d8>
811171f0:	513fff04 	addi	r4,r10,-4
811171f4:	2008d0ba 	srli	r4,r4,2
811171f8:	318000cc 	andi	r6,r6,3
811171fc:	21000044 	addi	r4,r4,1
81117200:	2109883a 	add	r4,r4,r4
81117204:	2109883a 	add	r4,r4,r4
81117208:	1907883a 	add	r3,r3,r4
8111720c:	290b883a 	add	r5,r5,r4
81117210:	30000b26 	beq	r6,zero,81117240 <memmove+0x150>
81117214:	198d883a 	add	r6,r3,r6
81117218:	29c00003 	ldbu	r7,0(r5)
8111721c:	18c00044 	addi	r3,r3,1
81117220:	29400044 	addi	r5,r5,1
81117224:	19ffffc5 	stb	r7,-1(r3)
81117228:	19bffb1e 	bne	r3,r6,81117218 <__reset+0xfb0f7218>
8111722c:	f800283a 	ret
81117230:	1007883a 	mov	r3,r2
81117234:	003ff606 	br	81117210 <__reset+0xfb0f7210>
81117238:	1007883a 	mov	r3,r2
8111723c:	003ff506 	br	81117214 <__reset+0xfb0f7214>
81117240:	f800283a 	ret
81117244:	500d883a 	mov	r6,r10
81117248:	003ff106 	br	81117210 <__reset+0xfb0f7210>

8111724c <_Balloc>:
8111724c:	20801317 	ldw	r2,76(r4)
81117250:	defffc04 	addi	sp,sp,-16
81117254:	dc400115 	stw	r17,4(sp)
81117258:	dc000015 	stw	r16,0(sp)
8111725c:	dfc00315 	stw	ra,12(sp)
81117260:	dc800215 	stw	r18,8(sp)
81117264:	2023883a 	mov	r17,r4
81117268:	2821883a 	mov	r16,r5
8111726c:	10000f26 	beq	r2,zero,811172ac <_Balloc+0x60>
81117270:	8407883a 	add	r3,r16,r16
81117274:	18c7883a 	add	r3,r3,r3
81117278:	10c7883a 	add	r3,r2,r3
8111727c:	18800017 	ldw	r2,0(r3)
81117280:	10001126 	beq	r2,zero,811172c8 <_Balloc+0x7c>
81117284:	11000017 	ldw	r4,0(r2)
81117288:	19000015 	stw	r4,0(r3)
8111728c:	10000415 	stw	zero,16(r2)
81117290:	10000315 	stw	zero,12(r2)
81117294:	dfc00317 	ldw	ra,12(sp)
81117298:	dc800217 	ldw	r18,8(sp)
8111729c:	dc400117 	ldw	r17,4(sp)
811172a0:	dc000017 	ldw	r16,0(sp)
811172a4:	dec00404 	addi	sp,sp,16
811172a8:	f800283a 	ret
811172ac:	01800844 	movi	r6,33
811172b0:	01400104 	movi	r5,4
811172b4:	111d95c0 	call	8111d95c <_calloc_r>
811172b8:	88801315 	stw	r2,76(r17)
811172bc:	103fec1e 	bne	r2,zero,81117270 <__reset+0xfb0f7270>
811172c0:	0005883a 	mov	r2,zero
811172c4:	003ff306 	br	81117294 <__reset+0xfb0f7294>
811172c8:	01400044 	movi	r5,1
811172cc:	2c24983a 	sll	r18,r5,r16
811172d0:	8809883a 	mov	r4,r17
811172d4:	91800144 	addi	r6,r18,5
811172d8:	318d883a 	add	r6,r6,r6
811172dc:	318d883a 	add	r6,r6,r6
811172e0:	111d95c0 	call	8111d95c <_calloc_r>
811172e4:	103ff626 	beq	r2,zero,811172c0 <__reset+0xfb0f72c0>
811172e8:	14000115 	stw	r16,4(r2)
811172ec:	14800215 	stw	r18,8(r2)
811172f0:	003fe606 	br	8111728c <__reset+0xfb0f728c>

811172f4 <_Bfree>:
811172f4:	28000826 	beq	r5,zero,81117318 <_Bfree+0x24>
811172f8:	28c00117 	ldw	r3,4(r5)
811172fc:	20801317 	ldw	r2,76(r4)
81117300:	18c7883a 	add	r3,r3,r3
81117304:	18c7883a 	add	r3,r3,r3
81117308:	10c5883a 	add	r2,r2,r3
8111730c:	10c00017 	ldw	r3,0(r2)
81117310:	28c00015 	stw	r3,0(r5)
81117314:	11400015 	stw	r5,0(r2)
81117318:	f800283a 	ret

8111731c <__multadd>:
8111731c:	defffa04 	addi	sp,sp,-24
81117320:	dc800315 	stw	r18,12(sp)
81117324:	dc400215 	stw	r17,8(sp)
81117328:	dc000115 	stw	r16,4(sp)
8111732c:	2823883a 	mov	r17,r5
81117330:	2c000417 	ldw	r16,16(r5)
81117334:	dfc00515 	stw	ra,20(sp)
81117338:	dcc00415 	stw	r19,16(sp)
8111733c:	2025883a 	mov	r18,r4
81117340:	29400504 	addi	r5,r5,20
81117344:	0011883a 	mov	r8,zero
81117348:	28c00017 	ldw	r3,0(r5)
8111734c:	29400104 	addi	r5,r5,4
81117350:	42000044 	addi	r8,r8,1
81117354:	18bfffcc 	andi	r2,r3,65535
81117358:	1185383a 	mul	r2,r2,r6
8111735c:	1806d43a 	srli	r3,r3,16
81117360:	11cf883a 	add	r7,r2,r7
81117364:	3808d43a 	srli	r4,r7,16
81117368:	1987383a 	mul	r3,r3,r6
8111736c:	38bfffcc 	andi	r2,r7,65535
81117370:	1907883a 	add	r3,r3,r4
81117374:	1808943a 	slli	r4,r3,16
81117378:	180ed43a 	srli	r7,r3,16
8111737c:	2085883a 	add	r2,r4,r2
81117380:	28bfff15 	stw	r2,-4(r5)
81117384:	443ff016 	blt	r8,r16,81117348 <__reset+0xfb0f7348>
81117388:	38000926 	beq	r7,zero,811173b0 <__multadd+0x94>
8111738c:	88800217 	ldw	r2,8(r17)
81117390:	80800f0e 	bge	r16,r2,811173d0 <__multadd+0xb4>
81117394:	80800144 	addi	r2,r16,5
81117398:	1085883a 	add	r2,r2,r2
8111739c:	1085883a 	add	r2,r2,r2
811173a0:	8885883a 	add	r2,r17,r2
811173a4:	11c00015 	stw	r7,0(r2)
811173a8:	84000044 	addi	r16,r16,1
811173ac:	8c000415 	stw	r16,16(r17)
811173b0:	8805883a 	mov	r2,r17
811173b4:	dfc00517 	ldw	ra,20(sp)
811173b8:	dcc00417 	ldw	r19,16(sp)
811173bc:	dc800317 	ldw	r18,12(sp)
811173c0:	dc400217 	ldw	r17,8(sp)
811173c4:	dc000117 	ldw	r16,4(sp)
811173c8:	dec00604 	addi	sp,sp,24
811173cc:	f800283a 	ret
811173d0:	89400117 	ldw	r5,4(r17)
811173d4:	9009883a 	mov	r4,r18
811173d8:	d9c00015 	stw	r7,0(sp)
811173dc:	29400044 	addi	r5,r5,1
811173e0:	111724c0 	call	8111724c <_Balloc>
811173e4:	89800417 	ldw	r6,16(r17)
811173e8:	89400304 	addi	r5,r17,12
811173ec:	11000304 	addi	r4,r2,12
811173f0:	31800084 	addi	r6,r6,2
811173f4:	318d883a 	add	r6,r6,r6
811173f8:	318d883a 	add	r6,r6,r6
811173fc:	1027883a 	mov	r19,r2
81117400:	110d4800 	call	8110d480 <memcpy>
81117404:	d9c00017 	ldw	r7,0(sp)
81117408:	88000a26 	beq	r17,zero,81117434 <__multadd+0x118>
8111740c:	88c00117 	ldw	r3,4(r17)
81117410:	90801317 	ldw	r2,76(r18)
81117414:	18c7883a 	add	r3,r3,r3
81117418:	18c7883a 	add	r3,r3,r3
8111741c:	10c5883a 	add	r2,r2,r3
81117420:	10c00017 	ldw	r3,0(r2)
81117424:	88c00015 	stw	r3,0(r17)
81117428:	14400015 	stw	r17,0(r2)
8111742c:	9823883a 	mov	r17,r19
81117430:	003fd806 	br	81117394 <__reset+0xfb0f7394>
81117434:	9823883a 	mov	r17,r19
81117438:	003fd606 	br	81117394 <__reset+0xfb0f7394>

8111743c <__s2b>:
8111743c:	defff904 	addi	sp,sp,-28
81117440:	dc400115 	stw	r17,4(sp)
81117444:	dc000015 	stw	r16,0(sp)
81117448:	2023883a 	mov	r17,r4
8111744c:	2821883a 	mov	r16,r5
81117450:	39000204 	addi	r4,r7,8
81117454:	01400244 	movi	r5,9
81117458:	dcc00315 	stw	r19,12(sp)
8111745c:	dc800215 	stw	r18,8(sp)
81117460:	dfc00615 	stw	ra,24(sp)
81117464:	dd400515 	stw	r21,20(sp)
81117468:	dd000415 	stw	r20,16(sp)
8111746c:	3825883a 	mov	r18,r7
81117470:	3027883a 	mov	r19,r6
81117474:	111f6940 	call	8111f694 <__divsi3>
81117478:	00c00044 	movi	r3,1
8111747c:	000b883a 	mov	r5,zero
81117480:	1880030e 	bge	r3,r2,81117490 <__s2b+0x54>
81117484:	18c7883a 	add	r3,r3,r3
81117488:	29400044 	addi	r5,r5,1
8111748c:	18bffd16 	blt	r3,r2,81117484 <__reset+0xfb0f7484>
81117490:	8809883a 	mov	r4,r17
81117494:	111724c0 	call	8111724c <_Balloc>
81117498:	d8c00717 	ldw	r3,28(sp)
8111749c:	10c00515 	stw	r3,20(r2)
811174a0:	00c00044 	movi	r3,1
811174a4:	10c00415 	stw	r3,16(r2)
811174a8:	00c00244 	movi	r3,9
811174ac:	1cc0210e 	bge	r3,r19,81117534 <__s2b+0xf8>
811174b0:	80eb883a 	add	r21,r16,r3
811174b4:	a829883a 	mov	r20,r21
811174b8:	84e1883a 	add	r16,r16,r19
811174bc:	a1c00007 	ldb	r7,0(r20)
811174c0:	01800284 	movi	r6,10
811174c4:	a5000044 	addi	r20,r20,1
811174c8:	100b883a 	mov	r5,r2
811174cc:	39fff404 	addi	r7,r7,-48
811174d0:	8809883a 	mov	r4,r17
811174d4:	111731c0 	call	8111731c <__multadd>
811174d8:	a43ff81e 	bne	r20,r16,811174bc <__reset+0xfb0f74bc>
811174dc:	ace1883a 	add	r16,r21,r19
811174e0:	843ffe04 	addi	r16,r16,-8
811174e4:	9c800a0e 	bge	r19,r18,81117510 <__s2b+0xd4>
811174e8:	94e5c83a 	sub	r18,r18,r19
811174ec:	84a5883a 	add	r18,r16,r18
811174f0:	81c00007 	ldb	r7,0(r16)
811174f4:	01800284 	movi	r6,10
811174f8:	84000044 	addi	r16,r16,1
811174fc:	100b883a 	mov	r5,r2
81117500:	39fff404 	addi	r7,r7,-48
81117504:	8809883a 	mov	r4,r17
81117508:	111731c0 	call	8111731c <__multadd>
8111750c:	84bff81e 	bne	r16,r18,811174f0 <__reset+0xfb0f74f0>
81117510:	dfc00617 	ldw	ra,24(sp)
81117514:	dd400517 	ldw	r21,20(sp)
81117518:	dd000417 	ldw	r20,16(sp)
8111751c:	dcc00317 	ldw	r19,12(sp)
81117520:	dc800217 	ldw	r18,8(sp)
81117524:	dc400117 	ldw	r17,4(sp)
81117528:	dc000017 	ldw	r16,0(sp)
8111752c:	dec00704 	addi	sp,sp,28
81117530:	f800283a 	ret
81117534:	84000284 	addi	r16,r16,10
81117538:	1827883a 	mov	r19,r3
8111753c:	003fe906 	br	811174e4 <__reset+0xfb0f74e4>

81117540 <__hi0bits>:
81117540:	20bfffec 	andhi	r2,r4,65535
81117544:	1000141e 	bne	r2,zero,81117598 <__hi0bits+0x58>
81117548:	2008943a 	slli	r4,r4,16
8111754c:	00800404 	movi	r2,16
81117550:	20ffc02c 	andhi	r3,r4,65280
81117554:	1800021e 	bne	r3,zero,81117560 <__hi0bits+0x20>
81117558:	2008923a 	slli	r4,r4,8
8111755c:	10800204 	addi	r2,r2,8
81117560:	20fc002c 	andhi	r3,r4,61440
81117564:	1800021e 	bne	r3,zero,81117570 <__hi0bits+0x30>
81117568:	2008913a 	slli	r4,r4,4
8111756c:	10800104 	addi	r2,r2,4
81117570:	20f0002c 	andhi	r3,r4,49152
81117574:	1800031e 	bne	r3,zero,81117584 <__hi0bits+0x44>
81117578:	2109883a 	add	r4,r4,r4
8111757c:	10800084 	addi	r2,r2,2
81117580:	2109883a 	add	r4,r4,r4
81117584:	20000316 	blt	r4,zero,81117594 <__hi0bits+0x54>
81117588:	2110002c 	andhi	r4,r4,16384
8111758c:	2000041e 	bne	r4,zero,811175a0 <__hi0bits+0x60>
81117590:	00800804 	movi	r2,32
81117594:	f800283a 	ret
81117598:	0005883a 	mov	r2,zero
8111759c:	003fec06 	br	81117550 <__reset+0xfb0f7550>
811175a0:	10800044 	addi	r2,r2,1
811175a4:	f800283a 	ret

811175a8 <__lo0bits>:
811175a8:	20c00017 	ldw	r3,0(r4)
811175ac:	188001cc 	andi	r2,r3,7
811175b0:	10000826 	beq	r2,zero,811175d4 <__lo0bits+0x2c>
811175b4:	1880004c 	andi	r2,r3,1
811175b8:	1000211e 	bne	r2,zero,81117640 <__lo0bits+0x98>
811175bc:	1880008c 	andi	r2,r3,2
811175c0:	1000211e 	bne	r2,zero,81117648 <__lo0bits+0xa0>
811175c4:	1806d0ba 	srli	r3,r3,2
811175c8:	00800084 	movi	r2,2
811175cc:	20c00015 	stw	r3,0(r4)
811175d0:	f800283a 	ret
811175d4:	18bfffcc 	andi	r2,r3,65535
811175d8:	10001326 	beq	r2,zero,81117628 <__lo0bits+0x80>
811175dc:	0005883a 	mov	r2,zero
811175e0:	19403fcc 	andi	r5,r3,255
811175e4:	2800021e 	bne	r5,zero,811175f0 <__lo0bits+0x48>
811175e8:	1806d23a 	srli	r3,r3,8
811175ec:	10800204 	addi	r2,r2,8
811175f0:	194003cc 	andi	r5,r3,15
811175f4:	2800021e 	bne	r5,zero,81117600 <__lo0bits+0x58>
811175f8:	1806d13a 	srli	r3,r3,4
811175fc:	10800104 	addi	r2,r2,4
81117600:	194000cc 	andi	r5,r3,3
81117604:	2800021e 	bne	r5,zero,81117610 <__lo0bits+0x68>
81117608:	1806d0ba 	srli	r3,r3,2
8111760c:	10800084 	addi	r2,r2,2
81117610:	1940004c 	andi	r5,r3,1
81117614:	2800081e 	bne	r5,zero,81117638 <__lo0bits+0x90>
81117618:	1806d07a 	srli	r3,r3,1
8111761c:	1800051e 	bne	r3,zero,81117634 <__lo0bits+0x8c>
81117620:	00800804 	movi	r2,32
81117624:	f800283a 	ret
81117628:	1806d43a 	srli	r3,r3,16
8111762c:	00800404 	movi	r2,16
81117630:	003feb06 	br	811175e0 <__reset+0xfb0f75e0>
81117634:	10800044 	addi	r2,r2,1
81117638:	20c00015 	stw	r3,0(r4)
8111763c:	f800283a 	ret
81117640:	0005883a 	mov	r2,zero
81117644:	f800283a 	ret
81117648:	1806d07a 	srli	r3,r3,1
8111764c:	00800044 	movi	r2,1
81117650:	20c00015 	stw	r3,0(r4)
81117654:	f800283a 	ret

81117658 <__i2b>:
81117658:	defffd04 	addi	sp,sp,-12
8111765c:	dc000015 	stw	r16,0(sp)
81117660:	04000044 	movi	r16,1
81117664:	dc400115 	stw	r17,4(sp)
81117668:	2823883a 	mov	r17,r5
8111766c:	800b883a 	mov	r5,r16
81117670:	dfc00215 	stw	ra,8(sp)
81117674:	111724c0 	call	8111724c <_Balloc>
81117678:	14400515 	stw	r17,20(r2)
8111767c:	14000415 	stw	r16,16(r2)
81117680:	dfc00217 	ldw	ra,8(sp)
81117684:	dc400117 	ldw	r17,4(sp)
81117688:	dc000017 	ldw	r16,0(sp)
8111768c:	dec00304 	addi	sp,sp,12
81117690:	f800283a 	ret

81117694 <__multiply>:
81117694:	defffa04 	addi	sp,sp,-24
81117698:	dcc00315 	stw	r19,12(sp)
8111769c:	dc800215 	stw	r18,8(sp)
811176a0:	34c00417 	ldw	r19,16(r6)
811176a4:	2c800417 	ldw	r18,16(r5)
811176a8:	dd000415 	stw	r20,16(sp)
811176ac:	dc400115 	stw	r17,4(sp)
811176b0:	dfc00515 	stw	ra,20(sp)
811176b4:	dc000015 	stw	r16,0(sp)
811176b8:	2829883a 	mov	r20,r5
811176bc:	3023883a 	mov	r17,r6
811176c0:	94c0050e 	bge	r18,r19,811176d8 <__multiply+0x44>
811176c4:	9007883a 	mov	r3,r18
811176c8:	3029883a 	mov	r20,r6
811176cc:	9825883a 	mov	r18,r19
811176d0:	2823883a 	mov	r17,r5
811176d4:	1827883a 	mov	r19,r3
811176d8:	a0800217 	ldw	r2,8(r20)
811176dc:	94e1883a 	add	r16,r18,r19
811176e0:	a1400117 	ldw	r5,4(r20)
811176e4:	1400010e 	bge	r2,r16,811176ec <__multiply+0x58>
811176e8:	29400044 	addi	r5,r5,1
811176ec:	111724c0 	call	8111724c <_Balloc>
811176f0:	8415883a 	add	r10,r16,r16
811176f4:	12c00504 	addi	r11,r2,20
811176f8:	5295883a 	add	r10,r10,r10
811176fc:	5a95883a 	add	r10,r11,r10
81117700:	5807883a 	mov	r3,r11
81117704:	5a80032e 	bgeu	r11,r10,81117714 <__multiply+0x80>
81117708:	18000015 	stw	zero,0(r3)
8111770c:	18c00104 	addi	r3,r3,4
81117710:	1abffd36 	bltu	r3,r10,81117708 <__reset+0xfb0f7708>
81117714:	9ce7883a 	add	r19,r19,r19
81117718:	94a5883a 	add	r18,r18,r18
8111771c:	89800504 	addi	r6,r17,20
81117720:	9ce7883a 	add	r19,r19,r19
81117724:	a3400504 	addi	r13,r20,20
81117728:	94a5883a 	add	r18,r18,r18
8111772c:	34d9883a 	add	r12,r6,r19
81117730:	6c93883a 	add	r9,r13,r18
81117734:	3300422e 	bgeu	r6,r12,81117840 <__multiply+0x1ac>
81117738:	37c00017 	ldw	ra,0(r6)
8111773c:	fbffffcc 	andi	r15,ra,65535
81117740:	78001b26 	beq	r15,zero,811177b0 <__multiply+0x11c>
81117744:	5811883a 	mov	r8,r11
81117748:	681d883a 	mov	r14,r13
8111774c:	000f883a 	mov	r7,zero
81117750:	71000017 	ldw	r4,0(r14)
81117754:	40c00017 	ldw	r3,0(r8)
81117758:	73800104 	addi	r14,r14,4
8111775c:	217fffcc 	andi	r5,r4,65535
81117760:	2bcb383a 	mul	r5,r5,r15
81117764:	2008d43a 	srli	r4,r4,16
81117768:	1c7fffcc 	andi	r17,r3,65535
8111776c:	2c4b883a 	add	r5,r5,r17
81117770:	29cb883a 	add	r5,r5,r7
81117774:	23c9383a 	mul	r4,r4,r15
81117778:	1806d43a 	srli	r3,r3,16
8111777c:	280ed43a 	srli	r7,r5,16
81117780:	297fffcc 	andi	r5,r5,65535
81117784:	20c7883a 	add	r3,r4,r3
81117788:	19c7883a 	add	r3,r3,r7
8111778c:	1808943a 	slli	r4,r3,16
81117790:	4023883a 	mov	r17,r8
81117794:	180ed43a 	srli	r7,r3,16
81117798:	214ab03a 	or	r5,r4,r5
8111779c:	41400015 	stw	r5,0(r8)
811177a0:	42000104 	addi	r8,r8,4
811177a4:	727fea36 	bltu	r14,r9,81117750 <__reset+0xfb0f7750>
811177a8:	89c00115 	stw	r7,4(r17)
811177ac:	37c00017 	ldw	ra,0(r6)
811177b0:	f83ed43a 	srli	ra,ra,16
811177b4:	f8001f26 	beq	ra,zero,81117834 <__multiply+0x1a0>
811177b8:	58c00017 	ldw	r3,0(r11)
811177bc:	681d883a 	mov	r14,r13
811177c0:	581f883a 	mov	r15,r11
811177c4:	1811883a 	mov	r8,r3
811177c8:	5825883a 	mov	r18,r11
811177cc:	000f883a 	mov	r7,zero
811177d0:	00000106 	br	811177d8 <__multiply+0x144>
811177d4:	8825883a 	mov	r18,r17
811177d8:	7140000b 	ldhu	r5,0(r14)
811177dc:	4010d43a 	srli	r8,r8,16
811177e0:	193fffcc 	andi	r4,r3,65535
811177e4:	2fcb383a 	mul	r5,r5,ra
811177e8:	7bc00104 	addi	r15,r15,4
811177ec:	73800104 	addi	r14,r14,4
811177f0:	2a0b883a 	add	r5,r5,r8
811177f4:	29cb883a 	add	r5,r5,r7
811177f8:	2806943a 	slli	r3,r5,16
811177fc:	94400104 	addi	r17,r18,4
81117800:	280ad43a 	srli	r5,r5,16
81117804:	1908b03a 	or	r4,r3,r4
81117808:	793fff15 	stw	r4,-4(r15)
8111780c:	70ffff17 	ldw	r3,-4(r14)
81117810:	8a000017 	ldw	r8,0(r17)
81117814:	1806d43a 	srli	r3,r3,16
81117818:	413fffcc 	andi	r4,r8,65535
8111781c:	1fc7383a 	mul	r3,r3,ra
81117820:	1907883a 	add	r3,r3,r4
81117824:	1947883a 	add	r3,r3,r5
81117828:	180ed43a 	srli	r7,r3,16
8111782c:	727fe936 	bltu	r14,r9,811177d4 <__reset+0xfb0f77d4>
81117830:	90c00115 	stw	r3,4(r18)
81117834:	31800104 	addi	r6,r6,4
81117838:	5ac00104 	addi	r11,r11,4
8111783c:	333fbe36 	bltu	r6,r12,81117738 <__reset+0xfb0f7738>
81117840:	0400090e 	bge	zero,r16,81117868 <__multiply+0x1d4>
81117844:	50ffff17 	ldw	r3,-4(r10)
81117848:	52bfff04 	addi	r10,r10,-4
8111784c:	18000326 	beq	r3,zero,8111785c <__multiply+0x1c8>
81117850:	00000506 	br	81117868 <__multiply+0x1d4>
81117854:	50c00017 	ldw	r3,0(r10)
81117858:	1800031e 	bne	r3,zero,81117868 <__multiply+0x1d4>
8111785c:	843fffc4 	addi	r16,r16,-1
81117860:	52bfff04 	addi	r10,r10,-4
81117864:	803ffb1e 	bne	r16,zero,81117854 <__reset+0xfb0f7854>
81117868:	14000415 	stw	r16,16(r2)
8111786c:	dfc00517 	ldw	ra,20(sp)
81117870:	dd000417 	ldw	r20,16(sp)
81117874:	dcc00317 	ldw	r19,12(sp)
81117878:	dc800217 	ldw	r18,8(sp)
8111787c:	dc400117 	ldw	r17,4(sp)
81117880:	dc000017 	ldw	r16,0(sp)
81117884:	dec00604 	addi	sp,sp,24
81117888:	f800283a 	ret

8111788c <__pow5mult>:
8111788c:	defffa04 	addi	sp,sp,-24
81117890:	dcc00315 	stw	r19,12(sp)
81117894:	dc000015 	stw	r16,0(sp)
81117898:	dfc00515 	stw	ra,20(sp)
8111789c:	dd000415 	stw	r20,16(sp)
811178a0:	dc800215 	stw	r18,8(sp)
811178a4:	dc400115 	stw	r17,4(sp)
811178a8:	308000cc 	andi	r2,r6,3
811178ac:	3021883a 	mov	r16,r6
811178b0:	2027883a 	mov	r19,r4
811178b4:	10002f1e 	bne	r2,zero,81117974 <__pow5mult+0xe8>
811178b8:	2825883a 	mov	r18,r5
811178bc:	8021d0ba 	srai	r16,r16,2
811178c0:	80001a26 	beq	r16,zero,8111792c <__pow5mult+0xa0>
811178c4:	9c401217 	ldw	r17,72(r19)
811178c8:	8800061e 	bne	r17,zero,811178e4 <__pow5mult+0x58>
811178cc:	00003406 	br	811179a0 <__pow5mult+0x114>
811178d0:	8021d07a 	srai	r16,r16,1
811178d4:	80001526 	beq	r16,zero,8111792c <__pow5mult+0xa0>
811178d8:	88800017 	ldw	r2,0(r17)
811178dc:	10001c26 	beq	r2,zero,81117950 <__pow5mult+0xc4>
811178e0:	1023883a 	mov	r17,r2
811178e4:	8080004c 	andi	r2,r16,1
811178e8:	103ff926 	beq	r2,zero,811178d0 <__reset+0xfb0f78d0>
811178ec:	880d883a 	mov	r6,r17
811178f0:	900b883a 	mov	r5,r18
811178f4:	9809883a 	mov	r4,r19
811178f8:	11176940 	call	81117694 <__multiply>
811178fc:	90001b26 	beq	r18,zero,8111796c <__pow5mult+0xe0>
81117900:	91000117 	ldw	r4,4(r18)
81117904:	98c01317 	ldw	r3,76(r19)
81117908:	8021d07a 	srai	r16,r16,1
8111790c:	2109883a 	add	r4,r4,r4
81117910:	2109883a 	add	r4,r4,r4
81117914:	1907883a 	add	r3,r3,r4
81117918:	19000017 	ldw	r4,0(r3)
8111791c:	91000015 	stw	r4,0(r18)
81117920:	1c800015 	stw	r18,0(r3)
81117924:	1025883a 	mov	r18,r2
81117928:	803feb1e 	bne	r16,zero,811178d8 <__reset+0xfb0f78d8>
8111792c:	9005883a 	mov	r2,r18
81117930:	dfc00517 	ldw	ra,20(sp)
81117934:	dd000417 	ldw	r20,16(sp)
81117938:	dcc00317 	ldw	r19,12(sp)
8111793c:	dc800217 	ldw	r18,8(sp)
81117940:	dc400117 	ldw	r17,4(sp)
81117944:	dc000017 	ldw	r16,0(sp)
81117948:	dec00604 	addi	sp,sp,24
8111794c:	f800283a 	ret
81117950:	880d883a 	mov	r6,r17
81117954:	880b883a 	mov	r5,r17
81117958:	9809883a 	mov	r4,r19
8111795c:	11176940 	call	81117694 <__multiply>
81117960:	88800015 	stw	r2,0(r17)
81117964:	10000015 	stw	zero,0(r2)
81117968:	003fdd06 	br	811178e0 <__reset+0xfb0f78e0>
8111796c:	1025883a 	mov	r18,r2
81117970:	003fd706 	br	811178d0 <__reset+0xfb0f78d0>
81117974:	10bfffc4 	addi	r2,r2,-1
81117978:	1085883a 	add	r2,r2,r2
8111797c:	00e044f4 	movhi	r3,33043
81117980:	18dd8b04 	addi	r3,r3,30252
81117984:	1085883a 	add	r2,r2,r2
81117988:	1885883a 	add	r2,r3,r2
8111798c:	11800017 	ldw	r6,0(r2)
81117990:	000f883a 	mov	r7,zero
81117994:	111731c0 	call	8111731c <__multadd>
81117998:	1025883a 	mov	r18,r2
8111799c:	003fc706 	br	811178bc <__reset+0xfb0f78bc>
811179a0:	05000044 	movi	r20,1
811179a4:	a00b883a 	mov	r5,r20
811179a8:	9809883a 	mov	r4,r19
811179ac:	111724c0 	call	8111724c <_Balloc>
811179b0:	1023883a 	mov	r17,r2
811179b4:	00809c44 	movi	r2,625
811179b8:	88800515 	stw	r2,20(r17)
811179bc:	8d000415 	stw	r20,16(r17)
811179c0:	9c401215 	stw	r17,72(r19)
811179c4:	88000015 	stw	zero,0(r17)
811179c8:	003fc606 	br	811178e4 <__reset+0xfb0f78e4>

811179cc <__lshift>:
811179cc:	defff904 	addi	sp,sp,-28
811179d0:	dd400515 	stw	r21,20(sp)
811179d4:	dcc00315 	stw	r19,12(sp)
811179d8:	302bd17a 	srai	r21,r6,5
811179dc:	2cc00417 	ldw	r19,16(r5)
811179e0:	28800217 	ldw	r2,8(r5)
811179e4:	dd000415 	stw	r20,16(sp)
811179e8:	ace7883a 	add	r19,r21,r19
811179ec:	dc800215 	stw	r18,8(sp)
811179f0:	dc400115 	stw	r17,4(sp)
811179f4:	dc000015 	stw	r16,0(sp)
811179f8:	dfc00615 	stw	ra,24(sp)
811179fc:	9c000044 	addi	r16,r19,1
81117a00:	2823883a 	mov	r17,r5
81117a04:	3029883a 	mov	r20,r6
81117a08:	2025883a 	mov	r18,r4
81117a0c:	29400117 	ldw	r5,4(r5)
81117a10:	1400030e 	bge	r2,r16,81117a20 <__lshift+0x54>
81117a14:	1085883a 	add	r2,r2,r2
81117a18:	29400044 	addi	r5,r5,1
81117a1c:	143ffd16 	blt	r2,r16,81117a14 <__reset+0xfb0f7a14>
81117a20:	9009883a 	mov	r4,r18
81117a24:	111724c0 	call	8111724c <_Balloc>
81117a28:	10c00504 	addi	r3,r2,20
81117a2c:	0540070e 	bge	zero,r21,81117a4c <__lshift+0x80>
81117a30:	ad6b883a 	add	r21,r21,r21
81117a34:	ad6b883a 	add	r21,r21,r21
81117a38:	1809883a 	mov	r4,r3
81117a3c:	1d47883a 	add	r3,r3,r21
81117a40:	20000015 	stw	zero,0(r4)
81117a44:	21000104 	addi	r4,r4,4
81117a48:	193ffd1e 	bne	r3,r4,81117a40 <__reset+0xfb0f7a40>
81117a4c:	8a000417 	ldw	r8,16(r17)
81117a50:	89000504 	addi	r4,r17,20
81117a54:	a18007cc 	andi	r6,r20,31
81117a58:	4211883a 	add	r8,r8,r8
81117a5c:	4211883a 	add	r8,r8,r8
81117a60:	2211883a 	add	r8,r4,r8
81117a64:	30002326 	beq	r6,zero,81117af4 <__lshift+0x128>
81117a68:	02400804 	movi	r9,32
81117a6c:	4993c83a 	sub	r9,r9,r6
81117a70:	000b883a 	mov	r5,zero
81117a74:	21c00017 	ldw	r7,0(r4)
81117a78:	1815883a 	mov	r10,r3
81117a7c:	18c00104 	addi	r3,r3,4
81117a80:	398e983a 	sll	r7,r7,r6
81117a84:	21000104 	addi	r4,r4,4
81117a88:	394ab03a 	or	r5,r7,r5
81117a8c:	197fff15 	stw	r5,-4(r3)
81117a90:	217fff17 	ldw	r5,-4(r4)
81117a94:	2a4ad83a 	srl	r5,r5,r9
81117a98:	223ff636 	bltu	r4,r8,81117a74 <__reset+0xfb0f7a74>
81117a9c:	51400115 	stw	r5,4(r10)
81117aa0:	28001a1e 	bne	r5,zero,81117b0c <__lshift+0x140>
81117aa4:	843fffc4 	addi	r16,r16,-1
81117aa8:	14000415 	stw	r16,16(r2)
81117aac:	88000826 	beq	r17,zero,81117ad0 <__lshift+0x104>
81117ab0:	89000117 	ldw	r4,4(r17)
81117ab4:	90c01317 	ldw	r3,76(r18)
81117ab8:	2109883a 	add	r4,r4,r4
81117abc:	2109883a 	add	r4,r4,r4
81117ac0:	1907883a 	add	r3,r3,r4
81117ac4:	19000017 	ldw	r4,0(r3)
81117ac8:	89000015 	stw	r4,0(r17)
81117acc:	1c400015 	stw	r17,0(r3)
81117ad0:	dfc00617 	ldw	ra,24(sp)
81117ad4:	dd400517 	ldw	r21,20(sp)
81117ad8:	dd000417 	ldw	r20,16(sp)
81117adc:	dcc00317 	ldw	r19,12(sp)
81117ae0:	dc800217 	ldw	r18,8(sp)
81117ae4:	dc400117 	ldw	r17,4(sp)
81117ae8:	dc000017 	ldw	r16,0(sp)
81117aec:	dec00704 	addi	sp,sp,28
81117af0:	f800283a 	ret
81117af4:	21400017 	ldw	r5,0(r4)
81117af8:	18c00104 	addi	r3,r3,4
81117afc:	21000104 	addi	r4,r4,4
81117b00:	197fff15 	stw	r5,-4(r3)
81117b04:	223ffb36 	bltu	r4,r8,81117af4 <__reset+0xfb0f7af4>
81117b08:	003fe606 	br	81117aa4 <__reset+0xfb0f7aa4>
81117b0c:	9c000084 	addi	r16,r19,2
81117b10:	003fe406 	br	81117aa4 <__reset+0xfb0f7aa4>

81117b14 <__mcmp>:
81117b14:	20800417 	ldw	r2,16(r4)
81117b18:	28c00417 	ldw	r3,16(r5)
81117b1c:	10c5c83a 	sub	r2,r2,r3
81117b20:	1000111e 	bne	r2,zero,81117b68 <__mcmp+0x54>
81117b24:	18c7883a 	add	r3,r3,r3
81117b28:	18c7883a 	add	r3,r3,r3
81117b2c:	21000504 	addi	r4,r4,20
81117b30:	29400504 	addi	r5,r5,20
81117b34:	20c5883a 	add	r2,r4,r3
81117b38:	28cb883a 	add	r5,r5,r3
81117b3c:	00000106 	br	81117b44 <__mcmp+0x30>
81117b40:	20800a2e 	bgeu	r4,r2,81117b6c <__mcmp+0x58>
81117b44:	10bfff04 	addi	r2,r2,-4
81117b48:	297fff04 	addi	r5,r5,-4
81117b4c:	11800017 	ldw	r6,0(r2)
81117b50:	28c00017 	ldw	r3,0(r5)
81117b54:	30fffa26 	beq	r6,r3,81117b40 <__reset+0xfb0f7b40>
81117b58:	30c00236 	bltu	r6,r3,81117b64 <__mcmp+0x50>
81117b5c:	00800044 	movi	r2,1
81117b60:	f800283a 	ret
81117b64:	00bfffc4 	movi	r2,-1
81117b68:	f800283a 	ret
81117b6c:	0005883a 	mov	r2,zero
81117b70:	f800283a 	ret

81117b74 <__mdiff>:
81117b74:	28c00417 	ldw	r3,16(r5)
81117b78:	30800417 	ldw	r2,16(r6)
81117b7c:	defffa04 	addi	sp,sp,-24
81117b80:	dcc00315 	stw	r19,12(sp)
81117b84:	dc800215 	stw	r18,8(sp)
81117b88:	dfc00515 	stw	ra,20(sp)
81117b8c:	dd000415 	stw	r20,16(sp)
81117b90:	dc400115 	stw	r17,4(sp)
81117b94:	dc000015 	stw	r16,0(sp)
81117b98:	1887c83a 	sub	r3,r3,r2
81117b9c:	2825883a 	mov	r18,r5
81117ba0:	3027883a 	mov	r19,r6
81117ba4:	1800141e 	bne	r3,zero,81117bf8 <__mdiff+0x84>
81117ba8:	1085883a 	add	r2,r2,r2
81117bac:	1085883a 	add	r2,r2,r2
81117bb0:	2a000504 	addi	r8,r5,20
81117bb4:	34000504 	addi	r16,r6,20
81117bb8:	4087883a 	add	r3,r8,r2
81117bbc:	8085883a 	add	r2,r16,r2
81117bc0:	00000106 	br	81117bc8 <__mdiff+0x54>
81117bc4:	40c0592e 	bgeu	r8,r3,81117d2c <__mdiff+0x1b8>
81117bc8:	18ffff04 	addi	r3,r3,-4
81117bcc:	10bfff04 	addi	r2,r2,-4
81117bd0:	19c00017 	ldw	r7,0(r3)
81117bd4:	11400017 	ldw	r5,0(r2)
81117bd8:	397ffa26 	beq	r7,r5,81117bc4 <__reset+0xfb0f7bc4>
81117bdc:	3940592e 	bgeu	r7,r5,81117d44 <__mdiff+0x1d0>
81117be0:	9005883a 	mov	r2,r18
81117be4:	4023883a 	mov	r17,r8
81117be8:	9825883a 	mov	r18,r19
81117bec:	05000044 	movi	r20,1
81117bf0:	1027883a 	mov	r19,r2
81117bf4:	00000406 	br	81117c08 <__mdiff+0x94>
81117bf8:	18005616 	blt	r3,zero,81117d54 <__mdiff+0x1e0>
81117bfc:	34400504 	addi	r17,r6,20
81117c00:	2c000504 	addi	r16,r5,20
81117c04:	0029883a 	mov	r20,zero
81117c08:	91400117 	ldw	r5,4(r18)
81117c0c:	111724c0 	call	8111724c <_Balloc>
81117c10:	92400417 	ldw	r9,16(r18)
81117c14:	9b000417 	ldw	r12,16(r19)
81117c18:	12c00504 	addi	r11,r2,20
81117c1c:	4a51883a 	add	r8,r9,r9
81117c20:	6319883a 	add	r12,r12,r12
81117c24:	4211883a 	add	r8,r8,r8
81117c28:	6319883a 	add	r12,r12,r12
81117c2c:	15000315 	stw	r20,12(r2)
81117c30:	8211883a 	add	r8,r16,r8
81117c34:	8b19883a 	add	r12,r17,r12
81117c38:	0007883a 	mov	r3,zero
81117c3c:	81400017 	ldw	r5,0(r16)
81117c40:	89c00017 	ldw	r7,0(r17)
81117c44:	59800104 	addi	r6,r11,4
81117c48:	293fffcc 	andi	r4,r5,65535
81117c4c:	20c7883a 	add	r3,r4,r3
81117c50:	393fffcc 	andi	r4,r7,65535
81117c54:	1909c83a 	sub	r4,r3,r4
81117c58:	280ad43a 	srli	r5,r5,16
81117c5c:	380ed43a 	srli	r7,r7,16
81117c60:	2007d43a 	srai	r3,r4,16
81117c64:	213fffcc 	andi	r4,r4,65535
81117c68:	29cbc83a 	sub	r5,r5,r7
81117c6c:	28c7883a 	add	r3,r5,r3
81117c70:	180a943a 	slli	r5,r3,16
81117c74:	8c400104 	addi	r17,r17,4
81117c78:	84000104 	addi	r16,r16,4
81117c7c:	2908b03a 	or	r4,r5,r4
81117c80:	59000015 	stw	r4,0(r11)
81117c84:	1807d43a 	srai	r3,r3,16
81117c88:	3015883a 	mov	r10,r6
81117c8c:	3017883a 	mov	r11,r6
81117c90:	8b3fea36 	bltu	r17,r12,81117c3c <__reset+0xfb0f7c3c>
81117c94:	8200162e 	bgeu	r16,r8,81117cf0 <__mdiff+0x17c>
81117c98:	8017883a 	mov	r11,r16
81117c9c:	59400017 	ldw	r5,0(r11)
81117ca0:	31800104 	addi	r6,r6,4
81117ca4:	5ac00104 	addi	r11,r11,4
81117ca8:	293fffcc 	andi	r4,r5,65535
81117cac:	20c7883a 	add	r3,r4,r3
81117cb0:	280ed43a 	srli	r7,r5,16
81117cb4:	180bd43a 	srai	r5,r3,16
81117cb8:	193fffcc 	andi	r4,r3,65535
81117cbc:	3947883a 	add	r3,r7,r5
81117cc0:	180a943a 	slli	r5,r3,16
81117cc4:	1807d43a 	srai	r3,r3,16
81117cc8:	2908b03a 	or	r4,r5,r4
81117ccc:	313fff15 	stw	r4,-4(r6)
81117cd0:	5a3ff236 	bltu	r11,r8,81117c9c <__reset+0xfb0f7c9c>
81117cd4:	0406303a 	nor	r3,zero,r16
81117cd8:	1a07883a 	add	r3,r3,r8
81117cdc:	1806d0ba 	srli	r3,r3,2
81117ce0:	18c00044 	addi	r3,r3,1
81117ce4:	18c7883a 	add	r3,r3,r3
81117ce8:	18c7883a 	add	r3,r3,r3
81117cec:	50d5883a 	add	r10,r10,r3
81117cf0:	50ffff04 	addi	r3,r10,-4
81117cf4:	2000041e 	bne	r4,zero,81117d08 <__mdiff+0x194>
81117cf8:	18ffff04 	addi	r3,r3,-4
81117cfc:	19000017 	ldw	r4,0(r3)
81117d00:	4a7fffc4 	addi	r9,r9,-1
81117d04:	203ffc26 	beq	r4,zero,81117cf8 <__reset+0xfb0f7cf8>
81117d08:	12400415 	stw	r9,16(r2)
81117d0c:	dfc00517 	ldw	ra,20(sp)
81117d10:	dd000417 	ldw	r20,16(sp)
81117d14:	dcc00317 	ldw	r19,12(sp)
81117d18:	dc800217 	ldw	r18,8(sp)
81117d1c:	dc400117 	ldw	r17,4(sp)
81117d20:	dc000017 	ldw	r16,0(sp)
81117d24:	dec00604 	addi	sp,sp,24
81117d28:	f800283a 	ret
81117d2c:	000b883a 	mov	r5,zero
81117d30:	111724c0 	call	8111724c <_Balloc>
81117d34:	00c00044 	movi	r3,1
81117d38:	10c00415 	stw	r3,16(r2)
81117d3c:	10000515 	stw	zero,20(r2)
81117d40:	003ff206 	br	81117d0c <__reset+0xfb0f7d0c>
81117d44:	8023883a 	mov	r17,r16
81117d48:	0029883a 	mov	r20,zero
81117d4c:	4021883a 	mov	r16,r8
81117d50:	003fad06 	br	81117c08 <__reset+0xfb0f7c08>
81117d54:	9005883a 	mov	r2,r18
81117d58:	94400504 	addi	r17,r18,20
81117d5c:	9c000504 	addi	r16,r19,20
81117d60:	9825883a 	mov	r18,r19
81117d64:	05000044 	movi	r20,1
81117d68:	1027883a 	mov	r19,r2
81117d6c:	003fa606 	br	81117c08 <__reset+0xfb0f7c08>

81117d70 <__ulp>:
81117d70:	295ffc2c 	andhi	r5,r5,32752
81117d74:	00bf3034 	movhi	r2,64704
81117d78:	2887883a 	add	r3,r5,r2
81117d7c:	00c0020e 	bge	zero,r3,81117d88 <__ulp+0x18>
81117d80:	0005883a 	mov	r2,zero
81117d84:	f800283a 	ret
81117d88:	00c7c83a 	sub	r3,zero,r3
81117d8c:	1807d53a 	srai	r3,r3,20
81117d90:	008004c4 	movi	r2,19
81117d94:	10c00b0e 	bge	r2,r3,81117dc4 <__ulp+0x54>
81117d98:	18bffb04 	addi	r2,r3,-20
81117d9c:	01000784 	movi	r4,30
81117da0:	0007883a 	mov	r3,zero
81117da4:	20800516 	blt	r4,r2,81117dbc <__ulp+0x4c>
81117da8:	010007c4 	movi	r4,31
81117dac:	2089c83a 	sub	r4,r4,r2
81117db0:	00800044 	movi	r2,1
81117db4:	1104983a 	sll	r2,r2,r4
81117db8:	f800283a 	ret
81117dbc:	00800044 	movi	r2,1
81117dc0:	f800283a 	ret
81117dc4:	01400234 	movhi	r5,8
81117dc8:	28c7d83a 	sra	r3,r5,r3
81117dcc:	0005883a 	mov	r2,zero
81117dd0:	f800283a 	ret

81117dd4 <__b2d>:
81117dd4:	defffa04 	addi	sp,sp,-24
81117dd8:	dc000015 	stw	r16,0(sp)
81117ddc:	24000417 	ldw	r16,16(r4)
81117de0:	dc400115 	stw	r17,4(sp)
81117de4:	24400504 	addi	r17,r4,20
81117de8:	8421883a 	add	r16,r16,r16
81117dec:	8421883a 	add	r16,r16,r16
81117df0:	8c21883a 	add	r16,r17,r16
81117df4:	dc800215 	stw	r18,8(sp)
81117df8:	84bfff17 	ldw	r18,-4(r16)
81117dfc:	dd000415 	stw	r20,16(sp)
81117e00:	dcc00315 	stw	r19,12(sp)
81117e04:	9009883a 	mov	r4,r18
81117e08:	2829883a 	mov	r20,r5
81117e0c:	dfc00515 	stw	ra,20(sp)
81117e10:	11175400 	call	81117540 <__hi0bits>
81117e14:	00c00804 	movi	r3,32
81117e18:	1889c83a 	sub	r4,r3,r2
81117e1c:	a1000015 	stw	r4,0(r20)
81117e20:	01000284 	movi	r4,10
81117e24:	84ffff04 	addi	r19,r16,-4
81117e28:	20801216 	blt	r4,r2,81117e74 <__b2d+0xa0>
81117e2c:	018002c4 	movi	r6,11
81117e30:	308dc83a 	sub	r6,r6,r2
81117e34:	9186d83a 	srl	r3,r18,r6
81117e38:	18cffc34 	orhi	r3,r3,16368
81117e3c:	8cc0212e 	bgeu	r17,r19,81117ec4 <__b2d+0xf0>
81117e40:	813ffe17 	ldw	r4,-8(r16)
81117e44:	218cd83a 	srl	r6,r4,r6
81117e48:	10800544 	addi	r2,r2,21
81117e4c:	9084983a 	sll	r2,r18,r2
81117e50:	1184b03a 	or	r2,r2,r6
81117e54:	dfc00517 	ldw	ra,20(sp)
81117e58:	dd000417 	ldw	r20,16(sp)
81117e5c:	dcc00317 	ldw	r19,12(sp)
81117e60:	dc800217 	ldw	r18,8(sp)
81117e64:	dc400117 	ldw	r17,4(sp)
81117e68:	dc000017 	ldw	r16,0(sp)
81117e6c:	dec00604 	addi	sp,sp,24
81117e70:	f800283a 	ret
81117e74:	8cc00f2e 	bgeu	r17,r19,81117eb4 <__b2d+0xe0>
81117e78:	117ffd44 	addi	r5,r2,-11
81117e7c:	80bffe17 	ldw	r2,-8(r16)
81117e80:	28000e26 	beq	r5,zero,81117ebc <__b2d+0xe8>
81117e84:	1949c83a 	sub	r4,r3,r5
81117e88:	9164983a 	sll	r18,r18,r5
81117e8c:	1106d83a 	srl	r3,r2,r4
81117e90:	81bffe04 	addi	r6,r16,-8
81117e94:	948ffc34 	orhi	r18,r18,16368
81117e98:	90c6b03a 	or	r3,r18,r3
81117e9c:	89800e2e 	bgeu	r17,r6,81117ed8 <__b2d+0x104>
81117ea0:	81bffd17 	ldw	r6,-12(r16)
81117ea4:	1144983a 	sll	r2,r2,r5
81117ea8:	310ad83a 	srl	r5,r6,r4
81117eac:	2884b03a 	or	r2,r5,r2
81117eb0:	003fe806 	br	81117e54 <__reset+0xfb0f7e54>
81117eb4:	10bffd44 	addi	r2,r2,-11
81117eb8:	1000041e 	bne	r2,zero,81117ecc <__b2d+0xf8>
81117ebc:	90cffc34 	orhi	r3,r18,16368
81117ec0:	003fe406 	br	81117e54 <__reset+0xfb0f7e54>
81117ec4:	000d883a 	mov	r6,zero
81117ec8:	003fdf06 	br	81117e48 <__reset+0xfb0f7e48>
81117ecc:	90a4983a 	sll	r18,r18,r2
81117ed0:	0005883a 	mov	r2,zero
81117ed4:	003ff906 	br	81117ebc <__reset+0xfb0f7ebc>
81117ed8:	1144983a 	sll	r2,r2,r5
81117edc:	003fdd06 	br	81117e54 <__reset+0xfb0f7e54>

81117ee0 <__d2b>:
81117ee0:	defff804 	addi	sp,sp,-32
81117ee4:	dc000215 	stw	r16,8(sp)
81117ee8:	3021883a 	mov	r16,r6
81117eec:	dc400315 	stw	r17,12(sp)
81117ef0:	8022907a 	slli	r17,r16,1
81117ef4:	dd000615 	stw	r20,24(sp)
81117ef8:	2829883a 	mov	r20,r5
81117efc:	01400044 	movi	r5,1
81117f00:	dcc00515 	stw	r19,20(sp)
81117f04:	dc800415 	stw	r18,16(sp)
81117f08:	dfc00715 	stw	ra,28(sp)
81117f0c:	3825883a 	mov	r18,r7
81117f10:	8822d57a 	srli	r17,r17,21
81117f14:	111724c0 	call	8111724c <_Balloc>
81117f18:	1027883a 	mov	r19,r2
81117f1c:	00800434 	movhi	r2,16
81117f20:	10bfffc4 	addi	r2,r2,-1
81117f24:	808c703a 	and	r6,r16,r2
81117f28:	88000126 	beq	r17,zero,81117f30 <__d2b+0x50>
81117f2c:	31800434 	orhi	r6,r6,16
81117f30:	d9800015 	stw	r6,0(sp)
81117f34:	a0002426 	beq	r20,zero,81117fc8 <__d2b+0xe8>
81117f38:	d9000104 	addi	r4,sp,4
81117f3c:	dd000115 	stw	r20,4(sp)
81117f40:	11175a80 	call	811175a8 <__lo0bits>
81117f44:	d8c00017 	ldw	r3,0(sp)
81117f48:	10002f1e 	bne	r2,zero,81118008 <__d2b+0x128>
81117f4c:	d9000117 	ldw	r4,4(sp)
81117f50:	99000515 	stw	r4,20(r19)
81117f54:	1821003a 	cmpeq	r16,r3,zero
81117f58:	01000084 	movi	r4,2
81117f5c:	2421c83a 	sub	r16,r4,r16
81117f60:	98c00615 	stw	r3,24(r19)
81117f64:	9c000415 	stw	r16,16(r19)
81117f68:	88001f1e 	bne	r17,zero,81117fe8 <__d2b+0x108>
81117f6c:	10bef384 	addi	r2,r2,-1074
81117f70:	90800015 	stw	r2,0(r18)
81117f74:	00900034 	movhi	r2,16384
81117f78:	10bfffc4 	addi	r2,r2,-1
81117f7c:	8085883a 	add	r2,r16,r2
81117f80:	1085883a 	add	r2,r2,r2
81117f84:	1085883a 	add	r2,r2,r2
81117f88:	9885883a 	add	r2,r19,r2
81117f8c:	11000517 	ldw	r4,20(r2)
81117f90:	8020917a 	slli	r16,r16,5
81117f94:	11175400 	call	81117540 <__hi0bits>
81117f98:	d8c00817 	ldw	r3,32(sp)
81117f9c:	8085c83a 	sub	r2,r16,r2
81117fa0:	18800015 	stw	r2,0(r3)
81117fa4:	9805883a 	mov	r2,r19
81117fa8:	dfc00717 	ldw	ra,28(sp)
81117fac:	dd000617 	ldw	r20,24(sp)
81117fb0:	dcc00517 	ldw	r19,20(sp)
81117fb4:	dc800417 	ldw	r18,16(sp)
81117fb8:	dc400317 	ldw	r17,12(sp)
81117fbc:	dc000217 	ldw	r16,8(sp)
81117fc0:	dec00804 	addi	sp,sp,32
81117fc4:	f800283a 	ret
81117fc8:	d809883a 	mov	r4,sp
81117fcc:	11175a80 	call	811175a8 <__lo0bits>
81117fd0:	d8c00017 	ldw	r3,0(sp)
81117fd4:	04000044 	movi	r16,1
81117fd8:	9c000415 	stw	r16,16(r19)
81117fdc:	98c00515 	stw	r3,20(r19)
81117fe0:	10800804 	addi	r2,r2,32
81117fe4:	883fe126 	beq	r17,zero,81117f6c <__reset+0xfb0f7f6c>
81117fe8:	00c00d44 	movi	r3,53
81117fec:	8c7ef344 	addi	r17,r17,-1075
81117ff0:	88a3883a 	add	r17,r17,r2
81117ff4:	1885c83a 	sub	r2,r3,r2
81117ff8:	d8c00817 	ldw	r3,32(sp)
81117ffc:	94400015 	stw	r17,0(r18)
81118000:	18800015 	stw	r2,0(r3)
81118004:	003fe706 	br	81117fa4 <__reset+0xfb0f7fa4>
81118008:	01000804 	movi	r4,32
8111800c:	2089c83a 	sub	r4,r4,r2
81118010:	1908983a 	sll	r4,r3,r4
81118014:	d9400117 	ldw	r5,4(sp)
81118018:	1886d83a 	srl	r3,r3,r2
8111801c:	2148b03a 	or	r4,r4,r5
81118020:	99000515 	stw	r4,20(r19)
81118024:	d8c00015 	stw	r3,0(sp)
81118028:	003fca06 	br	81117f54 <__reset+0xfb0f7f54>

8111802c <__ratio>:
8111802c:	defff904 	addi	sp,sp,-28
81118030:	dc400315 	stw	r17,12(sp)
81118034:	2823883a 	mov	r17,r5
81118038:	d9400104 	addi	r5,sp,4
8111803c:	dfc00615 	stw	ra,24(sp)
81118040:	dcc00515 	stw	r19,20(sp)
81118044:	dc800415 	stw	r18,16(sp)
81118048:	2027883a 	mov	r19,r4
8111804c:	dc000215 	stw	r16,8(sp)
81118050:	1117dd40 	call	81117dd4 <__b2d>
81118054:	d80b883a 	mov	r5,sp
81118058:	8809883a 	mov	r4,r17
8111805c:	1025883a 	mov	r18,r2
81118060:	1821883a 	mov	r16,r3
81118064:	1117dd40 	call	81117dd4 <__b2d>
81118068:	8a000417 	ldw	r8,16(r17)
8111806c:	99000417 	ldw	r4,16(r19)
81118070:	d9400117 	ldw	r5,4(sp)
81118074:	2209c83a 	sub	r4,r4,r8
81118078:	2010917a 	slli	r8,r4,5
8111807c:	d9000017 	ldw	r4,0(sp)
81118080:	2909c83a 	sub	r4,r5,r4
81118084:	4109883a 	add	r4,r8,r4
81118088:	01000e0e 	bge	zero,r4,811180c4 <__ratio+0x98>
8111808c:	2008953a 	slli	r4,r4,20
81118090:	2421883a 	add	r16,r4,r16
81118094:	100d883a 	mov	r6,r2
81118098:	180f883a 	mov	r7,r3
8111809c:	9009883a 	mov	r4,r18
811180a0:	800b883a 	mov	r5,r16
811180a4:	11202f00 	call	811202f0 <__divdf3>
811180a8:	dfc00617 	ldw	ra,24(sp)
811180ac:	dcc00517 	ldw	r19,20(sp)
811180b0:	dc800417 	ldw	r18,16(sp)
811180b4:	dc400317 	ldw	r17,12(sp)
811180b8:	dc000217 	ldw	r16,8(sp)
811180bc:	dec00704 	addi	sp,sp,28
811180c0:	f800283a 	ret
811180c4:	2008953a 	slli	r4,r4,20
811180c8:	1907c83a 	sub	r3,r3,r4
811180cc:	003ff106 	br	81118094 <__reset+0xfb0f8094>

811180d0 <_mprec_log10>:
811180d0:	defffe04 	addi	sp,sp,-8
811180d4:	dc000015 	stw	r16,0(sp)
811180d8:	dfc00115 	stw	ra,4(sp)
811180dc:	008005c4 	movi	r2,23
811180e0:	2021883a 	mov	r16,r4
811180e4:	11000d0e 	bge	r2,r4,8111811c <_mprec_log10+0x4c>
811180e8:	0005883a 	mov	r2,zero
811180ec:	00cffc34 	movhi	r3,16368
811180f0:	843fffc4 	addi	r16,r16,-1
811180f4:	000d883a 	mov	r6,zero
811180f8:	01d00934 	movhi	r7,16420
811180fc:	1009883a 	mov	r4,r2
81118100:	180b883a 	mov	r5,r3
81118104:	110b9380 	call	8110b938 <__muldf3>
81118108:	803ff91e 	bne	r16,zero,811180f0 <__reset+0xfb0f80f0>
8111810c:	dfc00117 	ldw	ra,4(sp)
81118110:	dc000017 	ldw	r16,0(sp)
81118114:	dec00204 	addi	sp,sp,8
81118118:	f800283a 	ret
8111811c:	202090fa 	slli	r16,r4,3
81118120:	00a044f4 	movhi	r2,33043
81118124:	109da204 	addi	r2,r2,30344
81118128:	1421883a 	add	r16,r2,r16
8111812c:	80800017 	ldw	r2,0(r16)
81118130:	80c00117 	ldw	r3,4(r16)
81118134:	dfc00117 	ldw	ra,4(sp)
81118138:	dc000017 	ldw	r16,0(sp)
8111813c:	dec00204 	addi	sp,sp,8
81118140:	f800283a 	ret

81118144 <__copybits>:
81118144:	297fffc4 	addi	r5,r5,-1
81118148:	280fd17a 	srai	r7,r5,5
8111814c:	30c00417 	ldw	r3,16(r6)
81118150:	30800504 	addi	r2,r6,20
81118154:	39c00044 	addi	r7,r7,1
81118158:	18c7883a 	add	r3,r3,r3
8111815c:	39cf883a 	add	r7,r7,r7
81118160:	18c7883a 	add	r3,r3,r3
81118164:	39cf883a 	add	r7,r7,r7
81118168:	10c7883a 	add	r3,r2,r3
8111816c:	21cf883a 	add	r7,r4,r7
81118170:	10c00d2e 	bgeu	r2,r3,811181a8 <__copybits+0x64>
81118174:	200b883a 	mov	r5,r4
81118178:	12000017 	ldw	r8,0(r2)
8111817c:	29400104 	addi	r5,r5,4
81118180:	10800104 	addi	r2,r2,4
81118184:	2a3fff15 	stw	r8,-4(r5)
81118188:	10fffb36 	bltu	r2,r3,81118178 <__reset+0xfb0f8178>
8111818c:	1985c83a 	sub	r2,r3,r6
81118190:	10bffac4 	addi	r2,r2,-21
81118194:	1004d0ba 	srli	r2,r2,2
81118198:	10800044 	addi	r2,r2,1
8111819c:	1085883a 	add	r2,r2,r2
811181a0:	1085883a 	add	r2,r2,r2
811181a4:	2089883a 	add	r4,r4,r2
811181a8:	21c0032e 	bgeu	r4,r7,811181b8 <__copybits+0x74>
811181ac:	20000015 	stw	zero,0(r4)
811181b0:	21000104 	addi	r4,r4,4
811181b4:	21fffd36 	bltu	r4,r7,811181ac <__reset+0xfb0f81ac>
811181b8:	f800283a 	ret

811181bc <__any_on>:
811181bc:	20c00417 	ldw	r3,16(r4)
811181c0:	2805d17a 	srai	r2,r5,5
811181c4:	21000504 	addi	r4,r4,20
811181c8:	18800d0e 	bge	r3,r2,81118200 <__any_on+0x44>
811181cc:	18c7883a 	add	r3,r3,r3
811181d0:	18c7883a 	add	r3,r3,r3
811181d4:	20c7883a 	add	r3,r4,r3
811181d8:	20c0192e 	bgeu	r4,r3,81118240 <__any_on+0x84>
811181dc:	18bfff17 	ldw	r2,-4(r3)
811181e0:	18ffff04 	addi	r3,r3,-4
811181e4:	1000041e 	bne	r2,zero,811181f8 <__any_on+0x3c>
811181e8:	20c0142e 	bgeu	r4,r3,8111823c <__any_on+0x80>
811181ec:	18ffff04 	addi	r3,r3,-4
811181f0:	19400017 	ldw	r5,0(r3)
811181f4:	283ffc26 	beq	r5,zero,811181e8 <__reset+0xfb0f81e8>
811181f8:	00800044 	movi	r2,1
811181fc:	f800283a 	ret
81118200:	10c00a0e 	bge	r2,r3,8111822c <__any_on+0x70>
81118204:	1085883a 	add	r2,r2,r2
81118208:	1085883a 	add	r2,r2,r2
8111820c:	294007cc 	andi	r5,r5,31
81118210:	2087883a 	add	r3,r4,r2
81118214:	283ff026 	beq	r5,zero,811181d8 <__reset+0xfb0f81d8>
81118218:	19800017 	ldw	r6,0(r3)
8111821c:	3144d83a 	srl	r2,r6,r5
81118220:	114a983a 	sll	r5,r2,r5
81118224:	317ff41e 	bne	r6,r5,811181f8 <__reset+0xfb0f81f8>
81118228:	003feb06 	br	811181d8 <__reset+0xfb0f81d8>
8111822c:	1085883a 	add	r2,r2,r2
81118230:	1085883a 	add	r2,r2,r2
81118234:	2087883a 	add	r3,r4,r2
81118238:	003fe706 	br	811181d8 <__reset+0xfb0f81d8>
8111823c:	f800283a 	ret
81118240:	0005883a 	mov	r2,zero
81118244:	f800283a 	ret

81118248 <_putc_r>:
81118248:	defffc04 	addi	sp,sp,-16
8111824c:	dc000215 	stw	r16,8(sp)
81118250:	dfc00315 	stw	ra,12(sp)
81118254:	2021883a 	mov	r16,r4
81118258:	20000226 	beq	r4,zero,81118264 <_putc_r+0x1c>
8111825c:	20800e17 	ldw	r2,56(r4)
81118260:	10001b26 	beq	r2,zero,811182d0 <_putc_r+0x88>
81118264:	30800217 	ldw	r2,8(r6)
81118268:	10bfffc4 	addi	r2,r2,-1
8111826c:	30800215 	stw	r2,8(r6)
81118270:	10000a16 	blt	r2,zero,8111829c <_putc_r+0x54>
81118274:	30800017 	ldw	r2,0(r6)
81118278:	11400005 	stb	r5,0(r2)
8111827c:	30800017 	ldw	r2,0(r6)
81118280:	10c00044 	addi	r3,r2,1
81118284:	30c00015 	stw	r3,0(r6)
81118288:	10800003 	ldbu	r2,0(r2)
8111828c:	dfc00317 	ldw	ra,12(sp)
81118290:	dc000217 	ldw	r16,8(sp)
81118294:	dec00404 	addi	sp,sp,16
81118298:	f800283a 	ret
8111829c:	30c00617 	ldw	r3,24(r6)
811182a0:	10c00616 	blt	r2,r3,811182bc <_putc_r+0x74>
811182a4:	30800017 	ldw	r2,0(r6)
811182a8:	00c00284 	movi	r3,10
811182ac:	11400005 	stb	r5,0(r2)
811182b0:	30800017 	ldw	r2,0(r6)
811182b4:	11400003 	ldbu	r5,0(r2)
811182b8:	28fff11e 	bne	r5,r3,81118280 <__reset+0xfb0f8280>
811182bc:	8009883a 	mov	r4,r16
811182c0:	dfc00317 	ldw	ra,12(sp)
811182c4:	dc000217 	ldw	r16,8(sp)
811182c8:	dec00404 	addi	sp,sp,16
811182cc:	111d8041 	jmpi	8111d804 <__swbuf_r>
811182d0:	d9400015 	stw	r5,0(sp)
811182d4:	d9800115 	stw	r6,4(sp)
811182d8:	1115e540 	call	81115e54 <__sinit>
811182dc:	d9800117 	ldw	r6,4(sp)
811182e0:	d9400017 	ldw	r5,0(sp)
811182e4:	003fdf06 	br	81118264 <__reset+0xfb0f8264>

811182e8 <putc>:
811182e8:	00a04534 	movhi	r2,33044
811182ec:	defffc04 	addi	sp,sp,-16
811182f0:	10a65b04 	addi	r2,r2,-26260
811182f4:	dc000115 	stw	r16,4(sp)
811182f8:	14000017 	ldw	r16,0(r2)
811182fc:	dc400215 	stw	r17,8(sp)
81118300:	dfc00315 	stw	ra,12(sp)
81118304:	2023883a 	mov	r17,r4
81118308:	80000226 	beq	r16,zero,81118314 <putc+0x2c>
8111830c:	80800e17 	ldw	r2,56(r16)
81118310:	10001a26 	beq	r2,zero,8111837c <putc+0x94>
81118314:	28800217 	ldw	r2,8(r5)
81118318:	10bfffc4 	addi	r2,r2,-1
8111831c:	28800215 	stw	r2,8(r5)
81118320:	10000b16 	blt	r2,zero,81118350 <putc+0x68>
81118324:	28800017 	ldw	r2,0(r5)
81118328:	14400005 	stb	r17,0(r2)
8111832c:	28800017 	ldw	r2,0(r5)
81118330:	10c00044 	addi	r3,r2,1
81118334:	28c00015 	stw	r3,0(r5)
81118338:	10800003 	ldbu	r2,0(r2)
8111833c:	dfc00317 	ldw	ra,12(sp)
81118340:	dc400217 	ldw	r17,8(sp)
81118344:	dc000117 	ldw	r16,4(sp)
81118348:	dec00404 	addi	sp,sp,16
8111834c:	f800283a 	ret
81118350:	28c00617 	ldw	r3,24(r5)
81118354:	10c00e16 	blt	r2,r3,81118390 <putc+0xa8>
81118358:	28800017 	ldw	r2,0(r5)
8111835c:	01000284 	movi	r4,10
81118360:	14400005 	stb	r17,0(r2)
81118364:	28800017 	ldw	r2,0(r5)
81118368:	10c00003 	ldbu	r3,0(r2)
8111836c:	193ff01e 	bne	r3,r4,81118330 <__reset+0xfb0f8330>
81118370:	280d883a 	mov	r6,r5
81118374:	180b883a 	mov	r5,r3
81118378:	00000706 	br	81118398 <putc+0xb0>
8111837c:	8009883a 	mov	r4,r16
81118380:	d9400015 	stw	r5,0(sp)
81118384:	1115e540 	call	81115e54 <__sinit>
81118388:	d9400017 	ldw	r5,0(sp)
8111838c:	003fe106 	br	81118314 <__reset+0xfb0f8314>
81118390:	280d883a 	mov	r6,r5
81118394:	880b883a 	mov	r5,r17
81118398:	8009883a 	mov	r4,r16
8111839c:	dfc00317 	ldw	ra,12(sp)
811183a0:	dc400217 	ldw	r17,8(sp)
811183a4:	dc000117 	ldw	r16,4(sp)
811183a8:	dec00404 	addi	sp,sp,16
811183ac:	111d8041 	jmpi	8111d804 <__swbuf_r>

811183b0 <_read_r>:
811183b0:	defffd04 	addi	sp,sp,-12
811183b4:	2805883a 	mov	r2,r5
811183b8:	dc000015 	stw	r16,0(sp)
811183bc:	04204534 	movhi	r16,33044
811183c0:	dc400115 	stw	r17,4(sp)
811183c4:	300b883a 	mov	r5,r6
811183c8:	8426b904 	addi	r16,r16,-25884
811183cc:	2023883a 	mov	r17,r4
811183d0:	380d883a 	mov	r6,r7
811183d4:	1009883a 	mov	r4,r2
811183d8:	dfc00215 	stw	ra,8(sp)
811183dc:	80000015 	stw	zero,0(r16)
811183e0:	11220b00 	call	811220b0 <read>
811183e4:	00ffffc4 	movi	r3,-1
811183e8:	10c00526 	beq	r2,r3,81118400 <_read_r+0x50>
811183ec:	dfc00217 	ldw	ra,8(sp)
811183f0:	dc400117 	ldw	r17,4(sp)
811183f4:	dc000017 	ldw	r16,0(sp)
811183f8:	dec00304 	addi	sp,sp,12
811183fc:	f800283a 	ret
81118400:	80c00017 	ldw	r3,0(r16)
81118404:	183ff926 	beq	r3,zero,811183ec <__reset+0xfb0f83ec>
81118408:	88c00015 	stw	r3,0(r17)
8111840c:	003ff706 	br	811183ec <__reset+0xfb0f83ec>

81118410 <_realloc_r>:
81118410:	defff604 	addi	sp,sp,-40
81118414:	dc800215 	stw	r18,8(sp)
81118418:	dfc00915 	stw	ra,36(sp)
8111841c:	df000815 	stw	fp,32(sp)
81118420:	ddc00715 	stw	r23,28(sp)
81118424:	dd800615 	stw	r22,24(sp)
81118428:	dd400515 	stw	r21,20(sp)
8111842c:	dd000415 	stw	r20,16(sp)
81118430:	dcc00315 	stw	r19,12(sp)
81118434:	dc400115 	stw	r17,4(sp)
81118438:	dc000015 	stw	r16,0(sp)
8111843c:	3025883a 	mov	r18,r6
81118440:	2800b726 	beq	r5,zero,81118720 <_realloc_r+0x310>
81118444:	282b883a 	mov	r21,r5
81118448:	2029883a 	mov	r20,r4
8111844c:	11227f00 	call	811227f0 <__malloc_lock>
81118450:	a8bfff17 	ldw	r2,-4(r21)
81118454:	043fff04 	movi	r16,-4
81118458:	90c002c4 	addi	r3,r18,11
8111845c:	01000584 	movi	r4,22
81118460:	acfffe04 	addi	r19,r21,-8
81118464:	1420703a 	and	r16,r2,r16
81118468:	20c0332e 	bgeu	r4,r3,81118538 <_realloc_r+0x128>
8111846c:	047ffe04 	movi	r17,-8
81118470:	1c62703a 	and	r17,r3,r17
81118474:	8807883a 	mov	r3,r17
81118478:	88005816 	blt	r17,zero,811185dc <_realloc_r+0x1cc>
8111847c:	8c805736 	bltu	r17,r18,811185dc <_realloc_r+0x1cc>
81118480:	80c0300e 	bge	r16,r3,81118544 <_realloc_r+0x134>
81118484:	07204534 	movhi	fp,33044
81118488:	e7203c04 	addi	fp,fp,-32528
8111848c:	e1c00217 	ldw	r7,8(fp)
81118490:	9c09883a 	add	r4,r19,r16
81118494:	22000117 	ldw	r8,4(r4)
81118498:	21c06326 	beq	r4,r7,81118628 <_realloc_r+0x218>
8111849c:	017fff84 	movi	r5,-2
811184a0:	414a703a 	and	r5,r8,r5
811184a4:	214b883a 	add	r5,r4,r5
811184a8:	29800117 	ldw	r6,4(r5)
811184ac:	3180004c 	andi	r6,r6,1
811184b0:	30003f26 	beq	r6,zero,811185b0 <_realloc_r+0x1a0>
811184b4:	1080004c 	andi	r2,r2,1
811184b8:	10008326 	beq	r2,zero,811186c8 <_realloc_r+0x2b8>
811184bc:	900b883a 	mov	r5,r18
811184c0:	a009883a 	mov	r4,r20
811184c4:	110cc740 	call	8110cc74 <_malloc_r>
811184c8:	1025883a 	mov	r18,r2
811184cc:	10011e26 	beq	r2,zero,81118948 <_realloc_r+0x538>
811184d0:	a93fff17 	ldw	r4,-4(r21)
811184d4:	10fffe04 	addi	r3,r2,-8
811184d8:	00bfff84 	movi	r2,-2
811184dc:	2084703a 	and	r2,r4,r2
811184e0:	9885883a 	add	r2,r19,r2
811184e4:	1880ee26 	beq	r3,r2,811188a0 <_realloc_r+0x490>
811184e8:	81bfff04 	addi	r6,r16,-4
811184ec:	00800904 	movi	r2,36
811184f0:	1180b836 	bltu	r2,r6,811187d4 <_realloc_r+0x3c4>
811184f4:	00c004c4 	movi	r3,19
811184f8:	19809636 	bltu	r3,r6,81118754 <_realloc_r+0x344>
811184fc:	9005883a 	mov	r2,r18
81118500:	a807883a 	mov	r3,r21
81118504:	19000017 	ldw	r4,0(r3)
81118508:	11000015 	stw	r4,0(r2)
8111850c:	19000117 	ldw	r4,4(r3)
81118510:	11000115 	stw	r4,4(r2)
81118514:	18c00217 	ldw	r3,8(r3)
81118518:	10c00215 	stw	r3,8(r2)
8111851c:	a80b883a 	mov	r5,r21
81118520:	a009883a 	mov	r4,r20
81118524:	11162d40 	call	811162d4 <_free_r>
81118528:	a009883a 	mov	r4,r20
8111852c:	11229100 	call	81122910 <__malloc_unlock>
81118530:	9005883a 	mov	r2,r18
81118534:	00001206 	br	81118580 <_realloc_r+0x170>
81118538:	00c00404 	movi	r3,16
8111853c:	1823883a 	mov	r17,r3
81118540:	003fce06 	br	8111847c <__reset+0xfb0f847c>
81118544:	a825883a 	mov	r18,r21
81118548:	8445c83a 	sub	r2,r16,r17
8111854c:	00c003c4 	movi	r3,15
81118550:	18802636 	bltu	r3,r2,811185ec <_realloc_r+0x1dc>
81118554:	99800117 	ldw	r6,4(r19)
81118558:	9c07883a 	add	r3,r19,r16
8111855c:	3180004c 	andi	r6,r6,1
81118560:	3420b03a 	or	r16,r6,r16
81118564:	9c000115 	stw	r16,4(r19)
81118568:	18800117 	ldw	r2,4(r3)
8111856c:	10800054 	ori	r2,r2,1
81118570:	18800115 	stw	r2,4(r3)
81118574:	a009883a 	mov	r4,r20
81118578:	11229100 	call	81122910 <__malloc_unlock>
8111857c:	9005883a 	mov	r2,r18
81118580:	dfc00917 	ldw	ra,36(sp)
81118584:	df000817 	ldw	fp,32(sp)
81118588:	ddc00717 	ldw	r23,28(sp)
8111858c:	dd800617 	ldw	r22,24(sp)
81118590:	dd400517 	ldw	r21,20(sp)
81118594:	dd000417 	ldw	r20,16(sp)
81118598:	dcc00317 	ldw	r19,12(sp)
8111859c:	dc800217 	ldw	r18,8(sp)
811185a0:	dc400117 	ldw	r17,4(sp)
811185a4:	dc000017 	ldw	r16,0(sp)
811185a8:	dec00a04 	addi	sp,sp,40
811185ac:	f800283a 	ret
811185b0:	017fff04 	movi	r5,-4
811185b4:	414a703a 	and	r5,r8,r5
811185b8:	814d883a 	add	r6,r16,r5
811185bc:	30c01f16 	blt	r6,r3,8111863c <_realloc_r+0x22c>
811185c0:	20800317 	ldw	r2,12(r4)
811185c4:	20c00217 	ldw	r3,8(r4)
811185c8:	a825883a 	mov	r18,r21
811185cc:	3021883a 	mov	r16,r6
811185d0:	18800315 	stw	r2,12(r3)
811185d4:	10c00215 	stw	r3,8(r2)
811185d8:	003fdb06 	br	81118548 <__reset+0xfb0f8548>
811185dc:	00800304 	movi	r2,12
811185e0:	a0800015 	stw	r2,0(r20)
811185e4:	0005883a 	mov	r2,zero
811185e8:	003fe506 	br	81118580 <__reset+0xfb0f8580>
811185ec:	98c00117 	ldw	r3,4(r19)
811185f0:	9c4b883a 	add	r5,r19,r17
811185f4:	11000054 	ori	r4,r2,1
811185f8:	18c0004c 	andi	r3,r3,1
811185fc:	1c62b03a 	or	r17,r3,r17
81118600:	9c400115 	stw	r17,4(r19)
81118604:	29000115 	stw	r4,4(r5)
81118608:	2885883a 	add	r2,r5,r2
8111860c:	10c00117 	ldw	r3,4(r2)
81118610:	29400204 	addi	r5,r5,8
81118614:	a009883a 	mov	r4,r20
81118618:	18c00054 	ori	r3,r3,1
8111861c:	10c00115 	stw	r3,4(r2)
81118620:	11162d40 	call	811162d4 <_free_r>
81118624:	003fd306 	br	81118574 <__reset+0xfb0f8574>
81118628:	017fff04 	movi	r5,-4
8111862c:	414a703a 	and	r5,r8,r5
81118630:	89800404 	addi	r6,r17,16
81118634:	8151883a 	add	r8,r16,r5
81118638:	4180590e 	bge	r8,r6,811187a0 <_realloc_r+0x390>
8111863c:	1080004c 	andi	r2,r2,1
81118640:	103f9e1e 	bne	r2,zero,811184bc <__reset+0xfb0f84bc>
81118644:	adbffe17 	ldw	r22,-8(r21)
81118648:	00bfff04 	movi	r2,-4
8111864c:	9dadc83a 	sub	r22,r19,r22
81118650:	b1800117 	ldw	r6,4(r22)
81118654:	3084703a 	and	r2,r6,r2
81118658:	20002026 	beq	r4,zero,811186dc <_realloc_r+0x2cc>
8111865c:	80af883a 	add	r23,r16,r2
81118660:	b96f883a 	add	r23,r23,r5
81118664:	21c05f26 	beq	r4,r7,811187e4 <_realloc_r+0x3d4>
81118668:	b8c01c16 	blt	r23,r3,811186dc <_realloc_r+0x2cc>
8111866c:	20800317 	ldw	r2,12(r4)
81118670:	20c00217 	ldw	r3,8(r4)
81118674:	81bfff04 	addi	r6,r16,-4
81118678:	01000904 	movi	r4,36
8111867c:	18800315 	stw	r2,12(r3)
81118680:	10c00215 	stw	r3,8(r2)
81118684:	b0c00217 	ldw	r3,8(r22)
81118688:	b0800317 	ldw	r2,12(r22)
8111868c:	b4800204 	addi	r18,r22,8
81118690:	18800315 	stw	r2,12(r3)
81118694:	10c00215 	stw	r3,8(r2)
81118698:	21801b36 	bltu	r4,r6,81118708 <_realloc_r+0x2f8>
8111869c:	008004c4 	movi	r2,19
811186a0:	1180352e 	bgeu	r2,r6,81118778 <_realloc_r+0x368>
811186a4:	a8800017 	ldw	r2,0(r21)
811186a8:	b0800215 	stw	r2,8(r22)
811186ac:	a8800117 	ldw	r2,4(r21)
811186b0:	b0800315 	stw	r2,12(r22)
811186b4:	008006c4 	movi	r2,27
811186b8:	11807f36 	bltu	r2,r6,811188b8 <_realloc_r+0x4a8>
811186bc:	b0800404 	addi	r2,r22,16
811186c0:	ad400204 	addi	r21,r21,8
811186c4:	00002d06 	br	8111877c <_realloc_r+0x36c>
811186c8:	adbffe17 	ldw	r22,-8(r21)
811186cc:	00bfff04 	movi	r2,-4
811186d0:	9dadc83a 	sub	r22,r19,r22
811186d4:	b1000117 	ldw	r4,4(r22)
811186d8:	2084703a 	and	r2,r4,r2
811186dc:	b03f7726 	beq	r22,zero,811184bc <__reset+0xfb0f84bc>
811186e0:	80af883a 	add	r23,r16,r2
811186e4:	b8ff7516 	blt	r23,r3,811184bc <__reset+0xfb0f84bc>
811186e8:	b0800317 	ldw	r2,12(r22)
811186ec:	b0c00217 	ldw	r3,8(r22)
811186f0:	81bfff04 	addi	r6,r16,-4
811186f4:	01000904 	movi	r4,36
811186f8:	18800315 	stw	r2,12(r3)
811186fc:	10c00215 	stw	r3,8(r2)
81118700:	b4800204 	addi	r18,r22,8
81118704:	21bfe52e 	bgeu	r4,r6,8111869c <__reset+0xfb0f869c>
81118708:	a80b883a 	mov	r5,r21
8111870c:	9009883a 	mov	r4,r18
81118710:	11170f00 	call	811170f0 <memmove>
81118714:	b821883a 	mov	r16,r23
81118718:	b027883a 	mov	r19,r22
8111871c:	003f8a06 	br	81118548 <__reset+0xfb0f8548>
81118720:	300b883a 	mov	r5,r6
81118724:	dfc00917 	ldw	ra,36(sp)
81118728:	df000817 	ldw	fp,32(sp)
8111872c:	ddc00717 	ldw	r23,28(sp)
81118730:	dd800617 	ldw	r22,24(sp)
81118734:	dd400517 	ldw	r21,20(sp)
81118738:	dd000417 	ldw	r20,16(sp)
8111873c:	dcc00317 	ldw	r19,12(sp)
81118740:	dc800217 	ldw	r18,8(sp)
81118744:	dc400117 	ldw	r17,4(sp)
81118748:	dc000017 	ldw	r16,0(sp)
8111874c:	dec00a04 	addi	sp,sp,40
81118750:	110cc741 	jmpi	8110cc74 <_malloc_r>
81118754:	a8c00017 	ldw	r3,0(r21)
81118758:	90c00015 	stw	r3,0(r18)
8111875c:	a8c00117 	ldw	r3,4(r21)
81118760:	90c00115 	stw	r3,4(r18)
81118764:	00c006c4 	movi	r3,27
81118768:	19804536 	bltu	r3,r6,81118880 <_realloc_r+0x470>
8111876c:	90800204 	addi	r2,r18,8
81118770:	a8c00204 	addi	r3,r21,8
81118774:	003f6306 	br	81118504 <__reset+0xfb0f8504>
81118778:	9005883a 	mov	r2,r18
8111877c:	a8c00017 	ldw	r3,0(r21)
81118780:	b821883a 	mov	r16,r23
81118784:	b027883a 	mov	r19,r22
81118788:	10c00015 	stw	r3,0(r2)
8111878c:	a8c00117 	ldw	r3,4(r21)
81118790:	10c00115 	stw	r3,4(r2)
81118794:	a8c00217 	ldw	r3,8(r21)
81118798:	10c00215 	stw	r3,8(r2)
8111879c:	003f6a06 	br	81118548 <__reset+0xfb0f8548>
811187a0:	9c67883a 	add	r19,r19,r17
811187a4:	4445c83a 	sub	r2,r8,r17
811187a8:	e4c00215 	stw	r19,8(fp)
811187ac:	10800054 	ori	r2,r2,1
811187b0:	98800115 	stw	r2,4(r19)
811187b4:	a8bfff17 	ldw	r2,-4(r21)
811187b8:	a009883a 	mov	r4,r20
811187bc:	1080004c 	andi	r2,r2,1
811187c0:	1462b03a 	or	r17,r2,r17
811187c4:	ac7fff15 	stw	r17,-4(r21)
811187c8:	11229100 	call	81122910 <__malloc_unlock>
811187cc:	a805883a 	mov	r2,r21
811187d0:	003f6b06 	br	81118580 <__reset+0xfb0f8580>
811187d4:	a80b883a 	mov	r5,r21
811187d8:	9009883a 	mov	r4,r18
811187dc:	11170f00 	call	811170f0 <memmove>
811187e0:	003f4e06 	br	8111851c <__reset+0xfb0f851c>
811187e4:	89000404 	addi	r4,r17,16
811187e8:	b93fbc16 	blt	r23,r4,811186dc <__reset+0xfb0f86dc>
811187ec:	b0800317 	ldw	r2,12(r22)
811187f0:	b0c00217 	ldw	r3,8(r22)
811187f4:	81bfff04 	addi	r6,r16,-4
811187f8:	01000904 	movi	r4,36
811187fc:	18800315 	stw	r2,12(r3)
81118800:	10c00215 	stw	r3,8(r2)
81118804:	b4800204 	addi	r18,r22,8
81118808:	21804336 	bltu	r4,r6,81118918 <_realloc_r+0x508>
8111880c:	008004c4 	movi	r2,19
81118810:	11803f2e 	bgeu	r2,r6,81118910 <_realloc_r+0x500>
81118814:	a8800017 	ldw	r2,0(r21)
81118818:	b0800215 	stw	r2,8(r22)
8111881c:	a8800117 	ldw	r2,4(r21)
81118820:	b0800315 	stw	r2,12(r22)
81118824:	008006c4 	movi	r2,27
81118828:	11803f36 	bltu	r2,r6,81118928 <_realloc_r+0x518>
8111882c:	b0800404 	addi	r2,r22,16
81118830:	ad400204 	addi	r21,r21,8
81118834:	a8c00017 	ldw	r3,0(r21)
81118838:	10c00015 	stw	r3,0(r2)
8111883c:	a8c00117 	ldw	r3,4(r21)
81118840:	10c00115 	stw	r3,4(r2)
81118844:	a8c00217 	ldw	r3,8(r21)
81118848:	10c00215 	stw	r3,8(r2)
8111884c:	b447883a 	add	r3,r22,r17
81118850:	bc45c83a 	sub	r2,r23,r17
81118854:	e0c00215 	stw	r3,8(fp)
81118858:	10800054 	ori	r2,r2,1
8111885c:	18800115 	stw	r2,4(r3)
81118860:	b0800117 	ldw	r2,4(r22)
81118864:	a009883a 	mov	r4,r20
81118868:	1080004c 	andi	r2,r2,1
8111886c:	1462b03a 	or	r17,r2,r17
81118870:	b4400115 	stw	r17,4(r22)
81118874:	11229100 	call	81122910 <__malloc_unlock>
81118878:	9005883a 	mov	r2,r18
8111887c:	003f4006 	br	81118580 <__reset+0xfb0f8580>
81118880:	a8c00217 	ldw	r3,8(r21)
81118884:	90c00215 	stw	r3,8(r18)
81118888:	a8c00317 	ldw	r3,12(r21)
8111888c:	90c00315 	stw	r3,12(r18)
81118890:	30801126 	beq	r6,r2,811188d8 <_realloc_r+0x4c8>
81118894:	90800404 	addi	r2,r18,16
81118898:	a8c00404 	addi	r3,r21,16
8111889c:	003f1906 	br	81118504 <__reset+0xfb0f8504>
811188a0:	90ffff17 	ldw	r3,-4(r18)
811188a4:	00bfff04 	movi	r2,-4
811188a8:	a825883a 	mov	r18,r21
811188ac:	1884703a 	and	r2,r3,r2
811188b0:	80a1883a 	add	r16,r16,r2
811188b4:	003f2406 	br	81118548 <__reset+0xfb0f8548>
811188b8:	a8800217 	ldw	r2,8(r21)
811188bc:	b0800415 	stw	r2,16(r22)
811188c0:	a8800317 	ldw	r2,12(r21)
811188c4:	b0800515 	stw	r2,20(r22)
811188c8:	31000a26 	beq	r6,r4,811188f4 <_realloc_r+0x4e4>
811188cc:	b0800604 	addi	r2,r22,24
811188d0:	ad400404 	addi	r21,r21,16
811188d4:	003fa906 	br	8111877c <__reset+0xfb0f877c>
811188d8:	a9000417 	ldw	r4,16(r21)
811188dc:	90800604 	addi	r2,r18,24
811188e0:	a8c00604 	addi	r3,r21,24
811188e4:	91000415 	stw	r4,16(r18)
811188e8:	a9000517 	ldw	r4,20(r21)
811188ec:	91000515 	stw	r4,20(r18)
811188f0:	003f0406 	br	81118504 <__reset+0xfb0f8504>
811188f4:	a8c00417 	ldw	r3,16(r21)
811188f8:	ad400604 	addi	r21,r21,24
811188fc:	b0800804 	addi	r2,r22,32
81118900:	b0c00615 	stw	r3,24(r22)
81118904:	a8ffff17 	ldw	r3,-4(r21)
81118908:	b0c00715 	stw	r3,28(r22)
8111890c:	003f9b06 	br	8111877c <__reset+0xfb0f877c>
81118910:	9005883a 	mov	r2,r18
81118914:	003fc706 	br	81118834 <__reset+0xfb0f8834>
81118918:	a80b883a 	mov	r5,r21
8111891c:	9009883a 	mov	r4,r18
81118920:	11170f00 	call	811170f0 <memmove>
81118924:	003fc906 	br	8111884c <__reset+0xfb0f884c>
81118928:	a8800217 	ldw	r2,8(r21)
8111892c:	b0800415 	stw	r2,16(r22)
81118930:	a8800317 	ldw	r2,12(r21)
81118934:	b0800515 	stw	r2,20(r22)
81118938:	31000726 	beq	r6,r4,81118958 <_realloc_r+0x548>
8111893c:	b0800604 	addi	r2,r22,24
81118940:	ad400404 	addi	r21,r21,16
81118944:	003fbb06 	br	81118834 <__reset+0xfb0f8834>
81118948:	a009883a 	mov	r4,r20
8111894c:	11229100 	call	81122910 <__malloc_unlock>
81118950:	0005883a 	mov	r2,zero
81118954:	003f0a06 	br	81118580 <__reset+0xfb0f8580>
81118958:	a8c00417 	ldw	r3,16(r21)
8111895c:	ad400604 	addi	r21,r21,24
81118960:	b0800804 	addi	r2,r22,32
81118964:	b0c00615 	stw	r3,24(r22)
81118968:	a8ffff17 	ldw	r3,-4(r21)
8111896c:	b0c00715 	stw	r3,28(r22)
81118970:	003fb006 	br	81118834 <__reset+0xfb0f8834>

81118974 <__fpclassifyd>:
81118974:	00a00034 	movhi	r2,32768
81118978:	10bfffc4 	addi	r2,r2,-1
8111897c:	2884703a 	and	r2,r5,r2
81118980:	10000726 	beq	r2,zero,811189a0 <__fpclassifyd+0x2c>
81118984:	00fffc34 	movhi	r3,65520
81118988:	019ff834 	movhi	r6,32736
8111898c:	28c7883a 	add	r3,r5,r3
81118990:	31bfffc4 	addi	r6,r6,-1
81118994:	30c00536 	bltu	r6,r3,811189ac <__fpclassifyd+0x38>
81118998:	00800104 	movi	r2,4
8111899c:	f800283a 	ret
811189a0:	2000021e 	bne	r4,zero,811189ac <__fpclassifyd+0x38>
811189a4:	00800084 	movi	r2,2
811189a8:	f800283a 	ret
811189ac:	00dffc34 	movhi	r3,32752
811189b0:	019ff834 	movhi	r6,32736
811189b4:	28cb883a 	add	r5,r5,r3
811189b8:	31bfffc4 	addi	r6,r6,-1
811189bc:	317ff62e 	bgeu	r6,r5,81118998 <__reset+0xfb0f8998>
811189c0:	01400434 	movhi	r5,16
811189c4:	297fffc4 	addi	r5,r5,-1
811189c8:	28800236 	bltu	r5,r2,811189d4 <__fpclassifyd+0x60>
811189cc:	008000c4 	movi	r2,3
811189d0:	f800283a 	ret
811189d4:	10c00226 	beq	r2,r3,811189e0 <__fpclassifyd+0x6c>
811189d8:	0005883a 	mov	r2,zero
811189dc:	f800283a 	ret
811189e0:	2005003a 	cmpeq	r2,r4,zero
811189e4:	f800283a 	ret

811189e8 <__sccl>:
811189e8:	2a000003 	ldbu	r8,0(r5)
811189ec:	00801784 	movi	r2,94
811189f0:	40802a26 	beq	r8,r2,81118a9c <__sccl+0xb4>
811189f4:	29400044 	addi	r5,r5,1
811189f8:	000f883a 	mov	r7,zero
811189fc:	0013883a 	mov	r9,zero
81118a00:	2007883a 	mov	r3,r4
81118a04:	21804004 	addi	r6,r4,256
81118a08:	19c00005 	stb	r7,0(r3)
81118a0c:	18c00044 	addi	r3,r3,1
81118a10:	19bffd1e 	bne	r3,r6,81118a08 <__reset+0xfb0f8a08>
81118a14:	40001126 	beq	r8,zero,81118a5c <__sccl+0x74>
81118a18:	00800044 	movi	r2,1
81118a1c:	124fc83a 	sub	r7,r2,r9
81118a20:	02800b44 	movi	r10,45
81118a24:	02c01744 	movi	r11,93
81118a28:	2205883a 	add	r2,r4,r8
81118a2c:	11c00005 	stb	r7,0(r2)
81118a30:	28800044 	addi	r2,r5,1
81118a34:	28c00003 	ldbu	r3,0(r5)
81118a38:	1a800a26 	beq	r3,r10,81118a64 <__sccl+0x7c>
81118a3c:	1ac00426 	beq	r3,r11,81118a50 <__sccl+0x68>
81118a40:	18000426 	beq	r3,zero,81118a54 <__sccl+0x6c>
81118a44:	1811883a 	mov	r8,r3
81118a48:	100b883a 	mov	r5,r2
81118a4c:	003ff606 	br	81118a28 <__reset+0xfb0f8a28>
81118a50:	f800283a 	ret
81118a54:	2805883a 	mov	r2,r5
81118a58:	f800283a 	ret
81118a5c:	28bfffc4 	addi	r2,r5,-1
81118a60:	f800283a 	ret
81118a64:	12400003 	ldbu	r9,0(r2)
81118a68:	4ac01126 	beq	r9,r11,81118ab0 <__sccl+0xc8>
81118a6c:	4a001016 	blt	r9,r8,81118ab0 <__sccl+0xc8>
81118a70:	41800044 	addi	r6,r8,1
81118a74:	29400084 	addi	r5,r5,2
81118a78:	2187883a 	add	r3,r4,r6
81118a7c:	00000106 	br	81118a84 <__sccl+0x9c>
81118a80:	31800044 	addi	r6,r6,1
81118a84:	19c00005 	stb	r7,0(r3)
81118a88:	3011883a 	mov	r8,r6
81118a8c:	18c00044 	addi	r3,r3,1
81118a90:	327ffb16 	blt	r6,r9,81118a80 <__reset+0xfb0f8a80>
81118a94:	10800084 	addi	r2,r2,2
81118a98:	003fe606 	br	81118a34 <__reset+0xfb0f8a34>
81118a9c:	2a000043 	ldbu	r8,1(r5)
81118aa0:	01c00044 	movi	r7,1
81118aa4:	29400084 	addi	r5,r5,2
81118aa8:	02400044 	movi	r9,1
81118aac:	003fd406 	br	81118a00 <__reset+0xfb0f8a00>
81118ab0:	5011883a 	mov	r8,r10
81118ab4:	003fe406 	br	81118a48 <__reset+0xfb0f8a48>

81118ab8 <nanf>:
81118ab8:	009ff034 	movhi	r2,32704
81118abc:	f800283a 	ret

81118ac0 <strcmp>:
81118ac0:	2144b03a 	or	r2,r4,r5
81118ac4:	108000cc 	andi	r2,r2,3
81118ac8:	1000171e 	bne	r2,zero,81118b28 <strcmp+0x68>
81118acc:	20800017 	ldw	r2,0(r4)
81118ad0:	28c00017 	ldw	r3,0(r5)
81118ad4:	10c0141e 	bne	r2,r3,81118b28 <strcmp+0x68>
81118ad8:	027fbff4 	movhi	r9,65279
81118adc:	4a7fbfc4 	addi	r9,r9,-257
81118ae0:	0086303a 	nor	r3,zero,r2
81118ae4:	02202074 	movhi	r8,32897
81118ae8:	1245883a 	add	r2,r2,r9
81118aec:	42202004 	addi	r8,r8,-32640
81118af0:	10c4703a 	and	r2,r2,r3
81118af4:	1204703a 	and	r2,r2,r8
81118af8:	10000226 	beq	r2,zero,81118b04 <strcmp+0x44>
81118afc:	00002306 	br	81118b8c <strcmp+0xcc>
81118b00:	1000221e 	bne	r2,zero,81118b8c <strcmp+0xcc>
81118b04:	21000104 	addi	r4,r4,4
81118b08:	20c00017 	ldw	r3,0(r4)
81118b0c:	29400104 	addi	r5,r5,4
81118b10:	29800017 	ldw	r6,0(r5)
81118b14:	1a4f883a 	add	r7,r3,r9
81118b18:	00c4303a 	nor	r2,zero,r3
81118b1c:	3884703a 	and	r2,r7,r2
81118b20:	1204703a 	and	r2,r2,r8
81118b24:	19bff626 	beq	r3,r6,81118b00 <__reset+0xfb0f8b00>
81118b28:	20800003 	ldbu	r2,0(r4)
81118b2c:	10c03fcc 	andi	r3,r2,255
81118b30:	18c0201c 	xori	r3,r3,128
81118b34:	18ffe004 	addi	r3,r3,-128
81118b38:	18000c26 	beq	r3,zero,81118b6c <strcmp+0xac>
81118b3c:	29800007 	ldb	r6,0(r5)
81118b40:	19800326 	beq	r3,r6,81118b50 <strcmp+0x90>
81118b44:	00001306 	br	81118b94 <strcmp+0xd4>
81118b48:	29800007 	ldb	r6,0(r5)
81118b4c:	11800b1e 	bne	r2,r6,81118b7c <strcmp+0xbc>
81118b50:	21000044 	addi	r4,r4,1
81118b54:	20c00003 	ldbu	r3,0(r4)
81118b58:	29400044 	addi	r5,r5,1
81118b5c:	18803fcc 	andi	r2,r3,255
81118b60:	1080201c 	xori	r2,r2,128
81118b64:	10bfe004 	addi	r2,r2,-128
81118b68:	103ff71e 	bne	r2,zero,81118b48 <__reset+0xfb0f8b48>
81118b6c:	0007883a 	mov	r3,zero
81118b70:	28800003 	ldbu	r2,0(r5)
81118b74:	1885c83a 	sub	r2,r3,r2
81118b78:	f800283a 	ret
81118b7c:	28800003 	ldbu	r2,0(r5)
81118b80:	18c03fcc 	andi	r3,r3,255
81118b84:	1885c83a 	sub	r2,r3,r2
81118b88:	f800283a 	ret
81118b8c:	0005883a 	mov	r2,zero
81118b90:	f800283a 	ret
81118b94:	10c03fcc 	andi	r3,r2,255
81118b98:	003ff506 	br	81118b70 <__reset+0xfb0f8b70>

81118b9c <sulp>:
81118b9c:	defffd04 	addi	sp,sp,-12
81118ba0:	dc400115 	stw	r17,4(sp)
81118ba4:	3023883a 	mov	r17,r6
81118ba8:	dc000015 	stw	r16,0(sp)
81118bac:	dfc00215 	stw	ra,8(sp)
81118bb0:	2821883a 	mov	r16,r5
81118bb4:	1117d700 	call	81117d70 <__ulp>
81118bb8:	88000c26 	beq	r17,zero,81118bec <sulp+0x50>
81118bbc:	841ffc2c 	andhi	r16,r16,32752
81118bc0:	8020d53a 	srli	r16,r16,20
81118bc4:	01c01ac4 	movi	r7,107
81118bc8:	3c21c83a 	sub	r16,r7,r16
81118bcc:	0400070e 	bge	zero,r16,81118bec <sulp+0x50>
81118bd0:	8020953a 	slli	r16,r16,20
81118bd4:	01cffc34 	movhi	r7,16368
81118bd8:	000d883a 	mov	r6,zero
81118bdc:	81cf883a 	add	r7,r16,r7
81118be0:	1009883a 	mov	r4,r2
81118be4:	180b883a 	mov	r5,r3
81118be8:	110b9380 	call	8110b938 <__muldf3>
81118bec:	dfc00217 	ldw	ra,8(sp)
81118bf0:	dc400117 	ldw	r17,4(sp)
81118bf4:	dc000017 	ldw	r16,0(sp)
81118bf8:	dec00304 	addi	sp,sp,12
81118bfc:	f800283a 	ret

81118c00 <_strtod_r>:
81118c00:	deffe204 	addi	sp,sp,-120
81118c04:	ddc01b15 	stw	r23,108(sp)
81118c08:	dd001815 	stw	r20,96(sp)
81118c0c:	dc801615 	stw	r18,88(sp)
81118c10:	dc401515 	stw	r17,84(sp)
81118c14:	dc001415 	stw	r16,80(sp)
81118c18:	d9400615 	stw	r5,24(sp)
81118c1c:	dfc01d15 	stw	ra,116(sp)
81118c20:	df001c15 	stw	fp,112(sp)
81118c24:	dd801a15 	stw	r22,104(sp)
81118c28:	dd401915 	stw	r21,100(sp)
81118c2c:	dcc01715 	stw	r19,92(sp)
81118c30:	2021883a 	mov	r16,r4
81118c34:	d8000515 	stw	zero,20(sp)
81118c38:	2809883a 	mov	r4,r5
81118c3c:	20800003 	ldbu	r2,0(r4)
81118c40:	01e044b4 	movhi	r7,33042
81118c44:	282f883a 	mov	r23,r5
81118c48:	10c03fcc 	andi	r3,r2,255
81118c4c:	01400b44 	movi	r5,45
81118c50:	39e31d04 	addi	r7,r7,-29580
81118c54:	3029883a 	mov	r20,r6
81118c58:	0025883a 	mov	r18,zero
81118c5c:	0023883a 	mov	r17,zero
81118c60:	28c0ba36 	bltu	r5,r3,81118f4c <_strtod_r+0x34c>
81118c64:	180690ba 	slli	r3,r3,2
81118c68:	19c7883a 	add	r3,r3,r7
81118c6c:	18c00017 	ldw	r3,0(r3)
81118c70:	1800683a 	jmp	r3
81118c74:	81118d34 	orhi	r4,r16,17972
81118c78:	81118f4c 	andi	r4,r16,17981
81118c7c:	81118f4c 	andi	r4,r16,17981
81118c80:	81118f4c 	andi	r4,r16,17981
81118c84:	81118f4c 	andi	r4,r16,17981
81118c88:	81118f4c 	andi	r4,r16,17981
81118c8c:	81118f4c 	andi	r4,r16,17981
81118c90:	81118f4c 	andi	r4,r16,17981
81118c94:	81118f4c 	andi	r4,r16,17981
81118c98:	81118f38 	rdprs	r4,r16,17980
81118c9c:	81118f38 	rdprs	r4,r16,17980
81118ca0:	81118f38 	rdprs	r4,r16,17980
81118ca4:	81118f38 	rdprs	r4,r16,17980
81118ca8:	81118f38 	rdprs	r4,r16,17980
81118cac:	81118f4c 	andi	r4,r16,17981
81118cb0:	81118f4c 	andi	r4,r16,17981
81118cb4:	81118f4c 	andi	r4,r16,17981
81118cb8:	81118f4c 	andi	r4,r16,17981
81118cbc:	81118f4c 	andi	r4,r16,17981
81118cc0:	81118f4c 	andi	r4,r16,17981
81118cc4:	81118f4c 	andi	r4,r16,17981
81118cc8:	81118f4c 	andi	r4,r16,17981
81118ccc:	81118f4c 	andi	r4,r16,17981
81118cd0:	81118f4c 	andi	r4,r16,17981
81118cd4:	81118f4c 	andi	r4,r16,17981
81118cd8:	81118f4c 	andi	r4,r16,17981
81118cdc:	81118f4c 	andi	r4,r16,17981
81118ce0:	81118f4c 	andi	r4,r16,17981
81118ce4:	81118f4c 	andi	r4,r16,17981
81118ce8:	81118f4c 	andi	r4,r16,17981
81118cec:	81118f4c 	andi	r4,r16,17981
81118cf0:	81118f4c 	andi	r4,r16,17981
81118cf4:	81118f38 	rdprs	r4,r16,17980
81118cf8:	81118f4c 	andi	r4,r16,17981
81118cfc:	81118f4c 	andi	r4,r16,17981
81118d00:	81118f4c 	andi	r4,r16,17981
81118d04:	81118f4c 	andi	r4,r16,17981
81118d08:	81118f4c 	andi	r4,r16,17981
81118d0c:	81118f4c 	andi	r4,r16,17981
81118d10:	81118f4c 	andi	r4,r16,17981
81118d14:	81118f4c 	andi	r4,r16,17981
81118d18:	81118f4c 	andi	r4,r16,17981
81118d1c:	81118f4c 	andi	r4,r16,17981
81118d20:	81118d8c 	andi	r4,r16,17974
81118d24:	81118f4c 	andi	r4,r16,17981
81118d28:	81118f2c 	andhi	r4,r16,17980
81118d2c:	00801244 	movi	r2,73
81118d30:	88843526 	beq	r17,r2,81119e08 <_strtod_r+0x1208>
81118d34:	002b883a 	mov	r21,zero
81118d38:	002d883a 	mov	r22,zero
81118d3c:	a0000526 	beq	r20,zero,81118d54 <_strtod_r+0x154>
81118d40:	d8000715 	stw	zero,28(sp)
81118d44:	a5c00015 	stw	r23,0(r20)
81118d48:	d9000717 	ldw	r4,28(sp)
81118d4c:	20000126 	beq	r4,zero,81118d54 <_strtod_r+0x154>
81118d50:	b5a0003c 	xorhi	r22,r22,32768
81118d54:	a805883a 	mov	r2,r21
81118d58:	b007883a 	mov	r3,r22
81118d5c:	dfc01d17 	ldw	ra,116(sp)
81118d60:	df001c17 	ldw	fp,112(sp)
81118d64:	ddc01b17 	ldw	r23,108(sp)
81118d68:	dd801a17 	ldw	r22,104(sp)
81118d6c:	dd401917 	ldw	r21,100(sp)
81118d70:	dd001817 	ldw	r20,96(sp)
81118d74:	dcc01717 	ldw	r19,92(sp)
81118d78:	dc801617 	ldw	r18,88(sp)
81118d7c:	dc401517 	ldw	r17,84(sp)
81118d80:	dc001417 	ldw	r16,80(sp)
81118d84:	dec01e04 	addi	sp,sp,120
81118d88:	f800283a 	ret
81118d8c:	d8000715 	stw	zero,28(sp)
81118d90:	24c00044 	addi	r19,r4,1
81118d94:	dcc00615 	stw	r19,24(sp)
81118d98:	20800043 	ldbu	r2,1(r4)
81118d9c:	10c03fcc 	andi	r3,r2,255
81118da0:	18c0201c 	xori	r3,r3,128
81118da4:	18ffe004 	addi	r3,r3,-128
81118da8:	183fe226 	beq	r3,zero,81118d34 <__reset+0xfb0f8d34>
81118dac:	11403fcc 	andi	r5,r2,255
81118db0:	2940201c 	xori	r5,r5,128
81118db4:	297fe004 	addi	r5,r5,-128
81118db8:	00c00c04 	movi	r3,48
81118dbc:	28c0e526 	beq	r5,r3,81119154 <_strtod_r+0x554>
81118dc0:	dcc00815 	stw	r19,32(sp)
81118dc4:	0025883a 	mov	r18,zero
81118dc8:	10fff404 	addi	r3,r2,-48
81118dcc:	18c03fcc 	andi	r3,r3,255
81118dd0:	01000244 	movi	r4,9
81118dd4:	20c37536 	bltu	r4,r3,81119bac <_strtod_r+0xfac>
81118dd8:	dd400817 	ldw	r21,32(sp)
81118ddc:	0027883a 	mov	r19,zero
81118de0:	0039883a 	mov	fp,zero
81118de4:	002d883a 	mov	r22,zero
81118de8:	01400204 	movi	r5,8
81118dec:	2d805a16 	blt	r5,r22,81118f58 <_strtod_r+0x358>
81118df0:	e70002a4 	muli	fp,fp,10
81118df4:	10c03fcc 	andi	r3,r2,255
81118df8:	18c0201c 	xori	r3,r3,128
81118dfc:	18ffe004 	addi	r3,r3,-128
81118e00:	e0f9883a 	add	fp,fp,r3
81118e04:	e73ff404 	addi	fp,fp,-48
81118e08:	ad400044 	addi	r21,r21,1
81118e0c:	dd400615 	stw	r21,24(sp)
81118e10:	a8800003 	ldbu	r2,0(r21)
81118e14:	b5800044 	addi	r22,r22,1
81118e18:	10fff404 	addi	r3,r2,-48
81118e1c:	18c03fcc 	andi	r3,r3,255
81118e20:	20fff22e 	bgeu	r4,r3,81118dec <__reset+0xfb0f8dec>
81118e24:	14403fcc 	andi	r17,r2,255
81118e28:	8c40201c 	xori	r17,r17,128
81118e2c:	8c7fe004 	addi	r17,r17,-128
81118e30:	8009883a 	mov	r4,r16
81118e34:	1116d580 	call	81116d58 <_localeconv_r>
81118e38:	11400017 	ldw	r5,0(r2)
81118e3c:	8009883a 	mov	r4,r16
81118e40:	d9401315 	stw	r5,76(sp)
81118e44:	1116d580 	call	81116d58 <_localeconv_r>
81118e48:	11000017 	ldw	r4,0(r2)
81118e4c:	110ddac0 	call	8110ddac <strlen>
81118e50:	d9401317 	ldw	r5,76(sp)
81118e54:	100d883a 	mov	r6,r2
81118e58:	a809883a 	mov	r4,r21
81118e5c:	111e8b80 	call	8111e8b8 <strncmp>
81118e60:	1000ce26 	beq	r2,zero,8111919c <_strtod_r+0x59c>
81118e64:	b013883a 	mov	r9,r22
81118e68:	000b883a 	mov	r5,zero
81118e6c:	0015883a 	mov	r10,zero
81118e70:	0017883a 	mov	r11,zero
81118e74:	00801944 	movi	r2,101
81118e78:	88807826 	beq	r17,r2,8111905c <_strtod_r+0x45c>
81118e7c:	00801144 	movi	r2,69
81118e80:	88807626 	beq	r17,r2,8111905c <_strtod_r+0x45c>
81118e84:	002b883a 	mov	r21,zero
81118e88:	48003d1e 	bne	r9,zero,81118f80 <_strtod_r+0x380>
81118e8c:	2800391e 	bne	r5,zero,81118f74 <_strtod_r+0x374>
81118e90:	9000381e 	bne	r18,zero,81118f74 <_strtod_r+0x374>
81118e94:	583fa71e 	bne	r11,zero,81118d34 <__reset+0xfb0f8d34>
81118e98:	00801384 	movi	r2,78
81118e9c:	88800526 	beq	r17,r2,81118eb4 <_strtod_r+0x2b4>
81118ea0:	147fa20e 	bge	r2,r17,81118d2c <__reset+0xfb0f8d2c>
81118ea4:	00801a44 	movi	r2,105
81118ea8:	8883d726 	beq	r17,r2,81119e08 <_strtod_r+0x1208>
81118eac:	00801b84 	movi	r2,110
81118eb0:	88bfa01e 	bne	r17,r2,81118d34 <__reset+0xfb0f8d34>
81118eb4:	016044f4 	movhi	r5,33043
81118eb8:	d9000617 	ldw	r4,24(sp)
81118ebc:	295dd704 	addi	r5,r5,30556
81118ec0:	01c00644 	movi	r7,25
81118ec4:	00000b06 	br	81118ef4 <_strtod_r+0x2f4>
81118ec8:	21000044 	addi	r4,r4,1
81118ecc:	20800003 	ldbu	r2,0(r4)
81118ed0:	10ffefc4 	addi	r3,r2,-65
81118ed4:	10803fcc 	andi	r2,r2,255
81118ed8:	1080201c 	xori	r2,r2,128
81118edc:	18c03fcc 	andi	r3,r3,255
81118ee0:	10bfe004 	addi	r2,r2,-128
81118ee4:	38c00136 	bltu	r7,r3,81118eec <_strtod_r+0x2ec>
81118ee8:	10800804 	addi	r2,r2,32
81118eec:	29400044 	addi	r5,r5,1
81118ef0:	11bf901e 	bne	r2,r6,81118d34 <__reset+0xfb0f8d34>
81118ef4:	29800007 	ldb	r6,0(r5)
81118ef8:	303ff31e 	bne	r6,zero,81118ec8 <__reset+0xfb0f8ec8>
81118efc:	20800044 	addi	r2,r4,1
81118f00:	d8800615 	stw	r2,24(sp)
81118f04:	20c00047 	ldb	r3,1(r4)
81118f08:	00800a04 	movi	r2,40
81118f0c:	18849d26 	beq	r3,r2,8111a184 <_strtod_r+0x1584>
81118f10:	047ffe34 	movhi	r17,65528
81118f14:	0025883a 	mov	r18,zero
81118f18:	902b883a 	mov	r21,r18
81118f1c:	882d883a 	mov	r22,r17
81118f20:	a03f8926 	beq	r20,zero,81118d48 <__reset+0xfb0f8d48>
81118f24:	ddc00617 	ldw	r23,24(sp)
81118f28:	003f8606 	br	81118d44 <__reset+0xfb0f8d44>
81118f2c:	00800044 	movi	r2,1
81118f30:	d8800715 	stw	r2,28(sp)
81118f34:	003f9606 	br	81118d90 <__reset+0xfb0f8d90>
81118f38:	21000044 	addi	r4,r4,1
81118f3c:	d9000615 	stw	r4,24(sp)
81118f40:	20800003 	ldbu	r2,0(r4)
81118f44:	10c03fcc 	andi	r3,r2,255
81118f48:	28ff462e 	bgeu	r5,r3,81118c64 <__reset+0xfb0f8c64>
81118f4c:	2027883a 	mov	r19,r4
81118f50:	d8000715 	stw	zero,28(sp)
81118f54:	003f9506 	br	81118dac <__reset+0xfb0f8dac>
81118f58:	9cc002a4 	muli	r19,r19,10
81118f5c:	10803fcc 	andi	r2,r2,255
81118f60:	1080201c 	xori	r2,r2,128
81118f64:	10bfe004 	addi	r2,r2,-128
81118f68:	9885883a 	add	r2,r19,r2
81118f6c:	14fff404 	addi	r19,r2,-48
81118f70:	003fa506 	br	81118e08 <__reset+0xfb0f8e08>
81118f74:	002b883a 	mov	r21,zero
81118f78:	002d883a 	mov	r22,zero
81118f7c:	003fe806 	br	81118f20 <__reset+0xfb0f8f20>
81118f80:	aaabc83a 	sub	r21,r21,r10
81118f84:	b000011e 	bne	r22,zero,81118f8c <_strtod_r+0x38c>
81118f88:	482d883a 	mov	r22,r9
81118f8c:	00800404 	movi	r2,16
81118f90:	482f883a 	mov	r23,r9
81118f94:	1240010e 	bge	r2,r9,81118f9c <_strtod_r+0x39c>
81118f98:	102f883a 	mov	r23,r2
81118f9c:	e009883a 	mov	r4,fp
81118fa0:	da401315 	stw	r9,76(sp)
81118fa4:	11218880 	call	81121888 <__floatunsidf>
81118fa8:	1025883a 	mov	r18,r2
81118fac:	00800244 	movi	r2,9
81118fb0:	1823883a 	mov	r17,r3
81118fb4:	da401317 	ldw	r9,76(sp)
81118fb8:	15c0160e 	bge	r2,r23,81119014 <_strtod_r+0x414>
81118fbc:	b8bffdc4 	addi	r2,r23,-9
81118fc0:	100490fa 	slli	r2,r2,3
81118fc4:	180b883a 	mov	r5,r3
81118fc8:	00e044f4 	movhi	r3,33043
81118fcc:	18dda204 	addi	r3,r3,30344
81118fd0:	1885883a 	add	r2,r3,r2
81118fd4:	11800017 	ldw	r6,0(r2)
81118fd8:	11c00117 	ldw	r7,4(r2)
81118fdc:	9009883a 	mov	r4,r18
81118fe0:	110b9380 	call	8110b938 <__muldf3>
81118fe4:	9809883a 	mov	r4,r19
81118fe8:	1025883a 	mov	r18,r2
81118fec:	1823883a 	mov	r17,r3
81118ff0:	11218880 	call	81121888 <__floatunsidf>
81118ff4:	9009883a 	mov	r4,r18
81118ff8:	880b883a 	mov	r5,r17
81118ffc:	100d883a 	mov	r6,r2
81119000:	180f883a 	mov	r7,r3
81119004:	111fa440 	call	8111fa44 <__adddf3>
81119008:	da401317 	ldw	r9,76(sp)
8111900c:	1025883a 	mov	r18,r2
81119010:	1823883a 	mov	r17,r3
81119014:	008003c4 	movi	r2,15
81119018:	12407b16 	blt	r2,r9,81119208 <_strtod_r+0x608>
8111901c:	a83fbe26 	beq	r21,zero,81118f18 <__reset+0xfb0f8f18>
81119020:	0543670e 	bge	zero,r21,81119dc0 <_strtod_r+0x11c0>
81119024:	00c00584 	movi	r3,22
81119028:	1d42e816 	blt	r3,r21,81119bcc <_strtod_r+0xfcc>
8111902c:	a82a90fa 	slli	r21,r21,3
81119030:	00a044f4 	movhi	r2,33043
81119034:	109da204 	addi	r2,r2,30344
81119038:	1545883a 	add	r2,r2,r21
8111903c:	11000017 	ldw	r4,0(r2)
81119040:	11400117 	ldw	r5,4(r2)
81119044:	900d883a 	mov	r6,r18
81119048:	880f883a 	mov	r7,r17
8111904c:	110b9380 	call	8110b938 <__muldf3>
81119050:	102b883a 	mov	r21,r2
81119054:	182d883a 	mov	r22,r3
81119058:	003fb106 	br	81118f20 <__reset+0xfb0f8f20>
8111905c:	4801b526 	beq	r9,zero,81119734 <_strtod_r+0xb34>
81119060:	ddc00617 	ldw	r23,24(sp)
81119064:	00c00ac4 	movi	r3,43
81119068:	b8800044 	addi	r2,r23,1
8111906c:	d8800615 	stw	r2,24(sp)
81119070:	b8800047 	ldb	r2,1(r23)
81119074:	10c1e926 	beq	r2,r3,8111981c <_strtod_r+0xc1c>
81119078:	00c00b44 	movi	r3,45
8111907c:	10c1ec26 	beq	r2,r3,81119830 <_strtod_r+0xc30>
81119080:	1023883a 	mov	r17,r2
81119084:	0019883a 	mov	r12,zero
81119088:	88bff404 	addi	r2,r17,-48
8111908c:	00c00244 	movi	r3,9
81119090:	1881b736 	bltu	r3,r2,81119770 <_strtod_r+0xb70>
81119094:	00800c04 	movi	r2,48
81119098:	8880071e 	bne	r17,r2,811190b8 <_strtod_r+0x4b8>
8111909c:	d8800617 	ldw	r2,24(sp)
811190a0:	8807883a 	mov	r3,r17
811190a4:	10800044 	addi	r2,r2,1
811190a8:	d8800615 	stw	r2,24(sp)
811190ac:	14400007 	ldb	r17,0(r2)
811190b0:	10800044 	addi	r2,r2,1
811190b4:	88fffc26 	beq	r17,r3,811190a8 <__reset+0xfb0f90a8>
811190b8:	88bff3c4 	addi	r2,r17,-49
811190bc:	00c00204 	movi	r3,8
811190c0:	18bf7036 	bltu	r3,r2,81118e84 <__reset+0xfb0f8e84>
811190c4:	db800617 	ldw	r14,24(sp)
811190c8:	88bff404 	addi	r2,r17,-48
811190cc:	03400244 	movi	r13,9
811190d0:	71c00044 	addi	r7,r14,1
811190d4:	d9c00615 	stw	r7,24(sp)
811190d8:	74400043 	ldbu	r17,1(r14)
811190dc:	88fff404 	addi	r3,r17,-48
811190e0:	8c403fcc 	andi	r17,r17,255
811190e4:	8c40201c 	xori	r17,r17,128
811190e8:	18c03fcc 	andi	r3,r3,255
811190ec:	8c7fe004 	addi	r17,r17,-128
811190f0:	68c00e36 	bltu	r13,r3,8111912c <_strtod_r+0x52c>
811190f4:	71000084 	addi	r4,r14,2
811190f8:	d9000615 	stw	r4,24(sp)
811190fc:	108002a4 	muli	r2,r2,10
81119100:	21800003 	ldbu	r6,0(r4)
81119104:	200f883a 	mov	r7,r4
81119108:	1463883a 	add	r17,r2,r17
8111910c:	30fff404 	addi	r3,r6,-48
81119110:	88bff404 	addi	r2,r17,-48
81119114:	34403fcc 	andi	r17,r6,255
81119118:	8c40201c 	xori	r17,r17,128
8111911c:	18c03fcc 	andi	r3,r3,255
81119120:	8c7fe004 	addi	r17,r17,-128
81119124:	21000044 	addi	r4,r4,1
81119128:	68fff32e 	bgeu	r13,r3,811190f8 <__reset+0xfb0f90f8>
8111912c:	3b8fc83a 	sub	r7,r7,r14
81119130:	00c00204 	movi	r3,8
81119134:	19c29716 	blt	r3,r7,81119b94 <_strtod_r+0xf94>
81119138:	102b883a 	mov	r21,r2
8111913c:	009387c4 	movi	r2,19999
81119140:	1540010e 	bge	r2,r21,81119148 <_strtod_r+0x548>
81119144:	102b883a 	mov	r21,r2
81119148:	603f4f26 	beq	r12,zero,81118e88 <__reset+0xfb0f8e88>
8111914c:	056bc83a 	sub	r21,zero,r21
81119150:	003f4d06 	br	81118e88 <__reset+0xfb0f8e88>
81119154:	98800047 	ldb	r2,1(r19)
81119158:	00c01604 	movi	r3,88
8111915c:	10c1de26 	beq	r2,r3,811198d8 <_strtod_r+0xcd8>
81119160:	00c01e04 	movi	r3,120
81119164:	10c1dc26 	beq	r2,r3,811198d8 <_strtod_r+0xcd8>
81119168:	98c00044 	addi	r3,r19,1
8111916c:	1827883a 	mov	r19,r3
81119170:	d8c00615 	stw	r3,24(sp)
81119174:	18c00044 	addi	r3,r3,1
81119178:	18bfffc3 	ldbu	r2,-1(r3)
8111917c:	11003fcc 	andi	r4,r2,255
81119180:	2100201c 	xori	r4,r4,128
81119184:	213fe004 	addi	r4,r4,-128
81119188:	217ff826 	beq	r4,r5,8111916c <__reset+0xfb0f916c>
8111918c:	203f7926 	beq	r4,zero,81118f74 <__reset+0xfb0f8f74>
81119190:	dcc00815 	stw	r19,32(sp)
81119194:	04800044 	movi	r18,1
81119198:	003f0b06 	br	81118dc8 <__reset+0xfb0f8dc8>
8111919c:	8009883a 	mov	r4,r16
811191a0:	1116d580 	call	81116d58 <_localeconv_r>
811191a4:	11000017 	ldw	r4,0(r2)
811191a8:	110ddac0 	call	8110ddac <strlen>
811191ac:	d8c00617 	ldw	r3,24(sp)
811191b0:	1885883a 	add	r2,r3,r2
811191b4:	d8800615 	stw	r2,24(sp)
811191b8:	14400007 	ldb	r17,0(r2)
811191bc:	b001881e 	bne	r22,zero,811197e0 <_strtod_r+0xbe0>
811191c0:	00c00c04 	movi	r3,48
811191c4:	88c3391e 	bne	r17,r3,81119eac <_strtod_r+0x12ac>
811191c8:	10c00044 	addi	r3,r2,1
811191cc:	8809883a 	mov	r4,r17
811191d0:	d8c00615 	stw	r3,24(sp)
811191d4:	1c400007 	ldb	r17,0(r3)
811191d8:	188bc83a 	sub	r5,r3,r2
811191dc:	18c00044 	addi	r3,r3,1
811191e0:	893ffb26 	beq	r17,r4,811191d0 <__reset+0xfb0f91d0>
811191e4:	88bff3c4 	addi	r2,r17,-49
811191e8:	00c00204 	movi	r3,8
811191ec:	1882e72e 	bgeu	r3,r2,81119d8c <_strtod_r+0x118c>
811191f0:	00801944 	movi	r2,101
811191f4:	88814d26 	beq	r17,r2,8111972c <_strtod_r+0xb2c>
811191f8:	0013883a 	mov	r9,zero
811191fc:	0015883a 	mov	r10,zero
81119200:	02c00044 	movi	r11,1
81119204:	003f1d06 	br	81118e7c <__reset+0xfb0f8e7c>
81119208:	4defc83a 	sub	r23,r9,r23
8111920c:	bd6f883a 	add	r23,r23,r21
81119210:	05c21e0e 	bge	zero,r23,81119a8c <_strtod_r+0xe8c>
81119214:	b88003cc 	andi	r2,r23,15
81119218:	10000d26 	beq	r2,zero,81119250 <_strtod_r+0x650>
8111921c:	100490fa 	slli	r2,r2,3
81119220:	00e044f4 	movhi	r3,33043
81119224:	18dda204 	addi	r3,r3,30344
81119228:	1885883a 	add	r2,r3,r2
8111922c:	11000017 	ldw	r4,0(r2)
81119230:	11400117 	ldw	r5,4(r2)
81119234:	900d883a 	mov	r6,r18
81119238:	880f883a 	mov	r7,r17
8111923c:	da401315 	stw	r9,76(sp)
81119240:	110b9380 	call	8110b938 <__muldf3>
81119244:	da401317 	ldw	r9,76(sp)
81119248:	1025883a 	mov	r18,r2
8111924c:	1823883a 	mov	r17,r3
81119250:	023ffc04 	movi	r8,-16
81119254:	ba10703a 	and	r8,r23,r8
81119258:	40003c26 	beq	r8,zero,8111934c <_strtod_r+0x74c>
8111925c:	00804d04 	movi	r2,308
81119260:	1201cd16 	blt	r2,r8,81119998 <_strtod_r+0xd98>
81119264:	4011d13a 	srai	r8,r8,4
81119268:	03000044 	movi	r12,1
8111926c:	62037c0e 	bge	r12,r8,8111a060 <_strtod_r+0x1460>
81119270:	012044f4 	movhi	r4,33043
81119274:	211d9804 	addi	r4,r4,30304
81119278:	2015883a 	mov	r10,r4
8111927c:	0027883a 	mov	r19,zero
81119280:	d9000915 	stw	r4,36(sp)
81119284:	9005883a 	mov	r2,r18
81119288:	8807883a 	mov	r3,r17
8111928c:	dc000c15 	stw	r16,48(sp)
81119290:	dc800e15 	stw	r18,56(sp)
81119294:	9821883a 	mov	r16,r19
81119298:	0009883a 	mov	r4,zero
8111929c:	8827883a 	mov	r19,r17
811192a0:	602f883a 	mov	r23,r12
811192a4:	da400a15 	stw	r9,40(sp)
811192a8:	5025883a 	mov	r18,r10
811192ac:	4023883a 	mov	r17,r8
811192b0:	8980004c 	andi	r6,r17,1
811192b4:	30000626 	beq	r6,zero,811192d0 <_strtod_r+0x6d0>
811192b8:	91800017 	ldw	r6,0(r18)
811192bc:	91c00117 	ldw	r7,4(r18)
811192c0:	1009883a 	mov	r4,r2
811192c4:	180b883a 	mov	r5,r3
811192c8:	110b9380 	call	8110b938 <__muldf3>
811192cc:	01000044 	movi	r4,1
811192d0:	8823d07a 	srai	r17,r17,1
811192d4:	84000044 	addi	r16,r16,1
811192d8:	94800204 	addi	r18,r18,8
811192dc:	8dfff41e 	bne	r17,r23,811192b0 <__reset+0xfb0f92b0>
811192e0:	21003fcc 	andi	r4,r4,255
811192e4:	9823883a 	mov	r17,r19
811192e8:	da400a17 	ldw	r9,40(sp)
811192ec:	8027883a 	mov	r19,r16
811192f0:	dc800e17 	ldw	r18,56(sp)
811192f4:	dc000c17 	ldw	r16,48(sp)
811192f8:	2003b11e 	bne	r4,zero,8111a1c0 <_strtod_r+0x15c0>
811192fc:	981690fa 	slli	r11,r19,3
81119300:	d8800917 	ldw	r2,36(sp)
81119304:	01ff2c34 	movhi	r7,64688
81119308:	900d883a 	mov	r6,r18
8111930c:	12ef883a 	add	r23,r2,r11
81119310:	b9000017 	ldw	r4,0(r23)
81119314:	b9400117 	ldw	r5,4(r23)
81119318:	89cf883a 	add	r7,r17,r7
8111931c:	da401315 	stw	r9,76(sp)
81119320:	110b9380 	call	8110b938 <__muldf3>
81119324:	1025883a 	mov	r18,r2
81119328:	011f2834 	movhi	r4,31904
8111932c:	189ffc2c 	andhi	r2,r3,32752
81119330:	da401317 	ldw	r9,76(sp)
81119334:	20819836 	bltu	r4,r2,81119998 <_strtod_r+0xd98>
81119338:	011f2434 	movhi	r4,31888
8111933c:	2083382e 	bgeu	r4,r2,8111a020 <_strtod_r+0x1420>
81119340:	045ffc34 	movhi	r17,32752
81119344:	8c7fffc4 	addi	r17,r17,-1
81119348:	04bfffc4 	movi	r18,-1
8111934c:	d8000915 	stw	zero,36(sp)
81119350:	d9400817 	ldw	r5,32(sp)
81119354:	df000015 	stw	fp,0(sp)
81119358:	480f883a 	mov	r7,r9
8111935c:	b00d883a 	mov	r6,r22
81119360:	8009883a 	mov	r4,r16
81119364:	111743c0 	call	8111743c <__s2b>
81119368:	d8800815 	stw	r2,32(sp)
8111936c:	10018a26 	beq	r2,zero,81119998 <_strtod_r+0xd98>
81119370:	a807d7fa 	srai	r3,r21,31
81119374:	0545c83a 	sub	r2,zero,r21
81119378:	dd400a15 	stw	r21,40(sp)
8111937c:	1886703a 	and	r3,r3,r2
81119380:	d8c00c15 	stw	r3,48(sp)
81119384:	a8013516 	blt	r21,zero,8111985c <_strtod_r+0xc5c>
81119388:	d9400817 	ldw	r5,32(sp)
8111938c:	0011883a 	mov	r8,zero
81119390:	0027883a 	mov	r19,zero
81119394:	29400304 	addi	r5,r5,12
81119398:	d9400f15 	stw	r5,60(sp)
8111939c:	402b883a 	mov	r21,r8
811193a0:	dd001215 	stw	r20,72(sp)
811193a4:	d8800817 	ldw	r2,32(sp)
811193a8:	8009883a 	mov	r4,r16
811193ac:	11400117 	ldw	r5,4(r2)
811193b0:	111724c0 	call	8111724c <_Balloc>
811193b4:	1029883a 	mov	r20,r2
811193b8:	10012d26 	beq	r2,zero,81119870 <_strtod_r+0xc70>
811193bc:	d8c00817 	ldw	r3,32(sp)
811193c0:	d9400f17 	ldw	r5,60(sp)
811193c4:	11000304 	addi	r4,r2,12
811193c8:	19800417 	ldw	r6,16(r3)
811193cc:	31800084 	addi	r6,r6,2
811193d0:	318d883a 	add	r6,r6,r6
811193d4:	318d883a 	add	r6,r6,r6
811193d8:	110d4800 	call	8110d480 <memcpy>
811193dc:	d9000204 	addi	r4,sp,8
811193e0:	d9000015 	stw	r4,0(sp)
811193e4:	d9c00404 	addi	r7,sp,16
811193e8:	900b883a 	mov	r5,r18
811193ec:	880d883a 	mov	r6,r17
811193f0:	8009883a 	mov	r4,r16
811193f4:	1117ee00 	call	81117ee0 <__d2b>
811193f8:	d8800515 	stw	r2,20(sp)
811193fc:	dc801115 	stw	r18,68(sp)
81119400:	dc401015 	stw	r17,64(sp)
81119404:	10027c26 	beq	r2,zero,81119df8 <_strtod_r+0x11f8>
81119408:	01400044 	movi	r5,1
8111940c:	8009883a 	mov	r4,r16
81119410:	11176580 	call	81117658 <__i2b>
81119414:	1027883a 	mov	r19,r2
81119418:	10011526 	beq	r2,zero,81119870 <_strtod_r+0xc70>
8111941c:	d8800417 	ldw	r2,16(sp)
81119420:	1000c816 	blt	r2,zero,81119744 <_strtod_r+0xb44>
81119424:	d9400c17 	ldw	r5,48(sp)
81119428:	d9000a17 	ldw	r4,40(sp)
8111942c:	28ad883a 	add	r22,r5,r2
81119430:	d9400917 	ldw	r5,36(sp)
81119434:	df000217 	ldw	fp,8(sp)
81119438:	05ff0084 	movi	r23,-1022
8111943c:	1147c83a 	sub	r3,r2,r5
81119440:	1f07883a 	add	r3,r3,fp
81119444:	00800d84 	movi	r2,54
81119448:	18ffffc4 	addi	r3,r3,-1
8111944c:	1739c83a 	sub	fp,r2,fp
81119450:	1dc0a50e 	bge	r3,r23,811196e8 <_strtod_r+0xae8>
81119454:	b8efc83a 	sub	r23,r23,r3
81119458:	008007c4 	movi	r2,31
8111945c:	e5f9c83a 	sub	fp,fp,r23
81119460:	15c0bc16 	blt	r2,r23,81119754 <_strtod_r+0xb54>
81119464:	00800044 	movi	r2,1
81119468:	15c4983a 	sll	r2,r2,r23
8111946c:	d8000b15 	stw	zero,44(sp)
81119470:	d8800d15 	stw	r2,52(sp)
81119474:	2707883a 	add	r3,r4,fp
81119478:	d9000917 	ldw	r4,36(sp)
8111947c:	b739883a 	add	fp,r22,fp
81119480:	20ef883a 	add	r23,r4,r3
81119484:	b009883a 	mov	r4,r22
81119488:	e580010e 	bge	fp,r22,81119490 <_strtod_r+0x890>
8111948c:	e009883a 	mov	r4,fp
81119490:	b805883a 	mov	r2,r23
81119494:	25c0010e 	bge	r4,r23,8111949c <_strtod_r+0x89c>
81119498:	2005883a 	mov	r2,r4
8111949c:	0080030e 	bge	zero,r2,811194ac <_strtod_r+0x8ac>
811194a0:	e0b9c83a 	sub	fp,fp,r2
811194a4:	b8afc83a 	sub	r23,r23,r2
811194a8:	b0adc83a 	sub	r22,r22,r2
811194ac:	d9400c17 	ldw	r5,48(sp)
811194b0:	28001126 	beq	r5,zero,811194f8 <_strtod_r+0x8f8>
811194b4:	280d883a 	mov	r6,r5
811194b8:	8009883a 	mov	r4,r16
811194bc:	980b883a 	mov	r5,r19
811194c0:	111788c0 	call	8111788c <__pow5mult>
811194c4:	1027883a 	mov	r19,r2
811194c8:	1000e926 	beq	r2,zero,81119870 <_strtod_r+0xc70>
811194cc:	d9800517 	ldw	r6,20(sp)
811194d0:	100b883a 	mov	r5,r2
811194d4:	8009883a 	mov	r4,r16
811194d8:	11176940 	call	81117694 <__multiply>
811194dc:	1000e426 	beq	r2,zero,81119870 <_strtod_r+0xc70>
811194e0:	d9400517 	ldw	r5,20(sp)
811194e4:	8009883a 	mov	r4,r16
811194e8:	d8801315 	stw	r2,76(sp)
811194ec:	11172f40 	call	811172f4 <_Bfree>
811194f0:	d8801317 	ldw	r2,76(sp)
811194f4:	d8800515 	stw	r2,20(sp)
811194f8:	0700060e 	bge	zero,fp,81119514 <_strtod_r+0x914>
811194fc:	d9400517 	ldw	r5,20(sp)
81119500:	e00d883a 	mov	r6,fp
81119504:	8009883a 	mov	r4,r16
81119508:	11179cc0 	call	811179cc <__lshift>
8111950c:	d8800515 	stw	r2,20(sp)
81119510:	10023926 	beq	r2,zero,81119df8 <_strtod_r+0x11f8>
81119514:	d8800a17 	ldw	r2,40(sp)
81119518:	10000626 	beq	r2,zero,81119534 <_strtod_r+0x934>
8111951c:	d9800a17 	ldw	r6,40(sp)
81119520:	a00b883a 	mov	r5,r20
81119524:	8009883a 	mov	r4,r16
81119528:	111788c0 	call	8111788c <__pow5mult>
8111952c:	1029883a 	mov	r20,r2
81119530:	1000cf26 	beq	r2,zero,81119870 <_strtod_r+0xc70>
81119534:	05c0060e 	bge	zero,r23,81119550 <_strtod_r+0x950>
81119538:	a00b883a 	mov	r5,r20
8111953c:	b80d883a 	mov	r6,r23
81119540:	8009883a 	mov	r4,r16
81119544:	11179cc0 	call	811179cc <__lshift>
81119548:	1029883a 	mov	r20,r2
8111954c:	1000c826 	beq	r2,zero,81119870 <_strtod_r+0xc70>
81119550:	0580060e 	bge	zero,r22,8111956c <_strtod_r+0x96c>
81119554:	980b883a 	mov	r5,r19
81119558:	b00d883a 	mov	r6,r22
8111955c:	8009883a 	mov	r4,r16
81119560:	11179cc0 	call	811179cc <__lshift>
81119564:	1027883a 	mov	r19,r2
81119568:	1000c126 	beq	r2,zero,81119870 <_strtod_r+0xc70>
8111956c:	d9400517 	ldw	r5,20(sp)
81119570:	a00d883a 	mov	r6,r20
81119574:	8009883a 	mov	r4,r16
81119578:	1117b740 	call	81117b74 <__mdiff>
8111957c:	102b883a 	mov	r21,r2
81119580:	1000bb26 	beq	r2,zero,81119870 <_strtod_r+0xc70>
81119584:	10c00317 	ldw	r3,12(r2)
81119588:	980b883a 	mov	r5,r19
8111958c:	10000315 	stw	zero,12(r2)
81119590:	1009883a 	mov	r4,r2
81119594:	d8c00e15 	stw	r3,56(sp)
81119598:	1117b140 	call	81117b14 <__mcmp>
8111959c:	10027616 	blt	r2,zero,81119f78 <_strtod_r+0x1378>
811195a0:	10024426 	beq	r2,zero,81119eb4 <_strtod_r+0x12b4>
811195a4:	980b883a 	mov	r5,r19
811195a8:	a809883a 	mov	r4,r21
811195ac:	111802c0 	call	8111802c <__ratio>
811195b0:	000d883a 	mov	r6,zero
811195b4:	01d00034 	movhi	r7,16384
811195b8:	1009883a 	mov	r4,r2
811195bc:	180b883a 	mov	r5,r3
811195c0:	102f883a 	mov	r23,r2
811195c4:	182d883a 	mov	r22,r3
811195c8:	1120d3c0 	call	81120d3c <__ledf2>
811195cc:	00804a16 	blt	zero,r2,811196f8 <_strtod_r+0xaf8>
811195d0:	d9400e17 	ldw	r5,56(sp)
811195d4:	28006b26 	beq	r5,zero,81119784 <_strtod_r+0xb84>
811195d8:	058ffc34 	movhi	r22,16368
811195dc:	d8000b15 	stw	zero,44(sp)
811195e0:	d8000d15 	stw	zero,52(sp)
811195e4:	b02f883a 	mov	r23,r22
811195e8:	8f1ffc2c 	andhi	fp,r17,32752
811195ec:	009ff834 	movhi	r2,32736
811195f0:	e080cd26 	beq	fp,r2,81119928 <_strtod_r+0xd28>
811195f4:	d9400917 	ldw	r5,36(sp)
811195f8:	28001a26 	beq	r5,zero,81119664 <_strtod_r+0xa64>
811195fc:	0081a834 	movhi	r2,1696
81119600:	17001836 	bltu	r2,fp,81119664 <_strtod_r+0xa64>
81119604:	d9000d17 	ldw	r4,52(sp)
81119608:	01d07834 	movhi	r7,16864
8111960c:	39ffffc4 	addi	r7,r7,-1
81119610:	01bff034 	movhi	r6,65472
81119614:	b80b883a 	mov	r5,r23
81119618:	1120d3c0 	call	81120d3c <__ledf2>
8111961c:	00800e16 	blt	zero,r2,81119658 <_strtod_r+0xa58>
81119620:	d9000d17 	ldw	r4,52(sp)
81119624:	b80b883a 	mov	r5,r23
81119628:	111eb700 	call	8111eb70 <__fixunsdfsi>
8111962c:	10018126 	beq	r2,zero,81119c34 <_strtod_r+0x1034>
81119630:	1009883a 	mov	r4,r2
81119634:	11218880 	call	81121888 <__floatunsidf>
81119638:	d8800d15 	stw	r2,52(sp)
8111963c:	182f883a 	mov	r23,r3
81119640:	d8800e17 	ldw	r2,56(sp)
81119644:	1001791e 	bne	r2,zero,81119c2c <_strtod_r+0x102c>
81119648:	ba20003c 	xorhi	r8,r23,32768
8111964c:	d8c00d17 	ldw	r3,52(sp)
81119650:	402d883a 	mov	r22,r8
81119654:	d8c00b15 	stw	r3,44(sp)
81119658:	0081ac34 	movhi	r2,1712
8111965c:	b091883a 	add	r8,r22,r2
81119660:	472dc83a 	sub	r22,r8,fp
81119664:	9009883a 	mov	r4,r18
81119668:	880b883a 	mov	r5,r17
8111966c:	1117d700 	call	81117d70 <__ulp>
81119670:	d9000b17 	ldw	r4,44(sp)
81119674:	b00b883a 	mov	r5,r22
81119678:	100d883a 	mov	r6,r2
8111967c:	180f883a 	mov	r7,r3
81119680:	110b9380 	call	8110b938 <__muldf3>
81119684:	900d883a 	mov	r6,r18
81119688:	880f883a 	mov	r7,r17
8111968c:	1009883a 	mov	r4,r2
81119690:	180b883a 	mov	r5,r3
81119694:	111fa440 	call	8111fa44 <__adddf3>
81119698:	1025883a 	mov	r18,r2
8111969c:	1823883a 	mov	r17,r3
811196a0:	182d883a 	mov	r22,r3
811196a4:	d9000917 	ldw	r4,36(sp)
811196a8:	2000021e 	bne	r4,zero,811196b4 <_strtod_r+0xab4>
811196ac:	b09ffc2c 	andhi	r2,r22,32752
811196b0:	e080be26 	beq	fp,r2,811199ac <_strtod_r+0xdac>
811196b4:	d9400517 	ldw	r5,20(sp)
811196b8:	8009883a 	mov	r4,r16
811196bc:	11172f40 	call	811172f4 <_Bfree>
811196c0:	a00b883a 	mov	r5,r20
811196c4:	8009883a 	mov	r4,r16
811196c8:	11172f40 	call	811172f4 <_Bfree>
811196cc:	980b883a 	mov	r5,r19
811196d0:	8009883a 	mov	r4,r16
811196d4:	11172f40 	call	811172f4 <_Bfree>
811196d8:	a80b883a 	mov	r5,r21
811196dc:	8009883a 	mov	r4,r16
811196e0:	11172f40 	call	811172f4 <_Bfree>
811196e4:	003f2f06 	br	811193a4 <__reset+0xfb0f93a4>
811196e8:	00c00044 	movi	r3,1
811196ec:	d8000b15 	stw	zero,44(sp)
811196f0:	d8c00d15 	stw	r3,52(sp)
811196f4:	003f5f06 	br	81119474 <__reset+0xfb0f9474>
811196f8:	b809883a 	mov	r4,r23
811196fc:	000d883a 	mov	r6,zero
81119700:	01cff834 	movhi	r7,16352
81119704:	b00b883a 	mov	r5,r22
81119708:	110b9380 	call	8110b938 <__muldf3>
8111970c:	d9000e17 	ldw	r4,56(sp)
81119710:	d8800d15 	stw	r2,52(sp)
81119714:	182f883a 	mov	r23,r3
81119718:	2000181e 	bne	r4,zero,8111977c <_strtod_r+0xb7c>
8111971c:	1a20003c 	xorhi	r8,r3,32768
81119720:	d8800b15 	stw	r2,44(sp)
81119724:	402d883a 	mov	r22,r8
81119728:	003faf06 	br	811195e8 <__reset+0xfb0f95e8>
8111972c:	0015883a 	mov	r10,zero
81119730:	02c00044 	movi	r11,1
81119734:	2800011e 	bne	r5,zero,8111973c <_strtod_r+0xb3c>
81119738:	903d7e26 	beq	r18,zero,81118d34 <__reset+0xfb0f8d34>
8111973c:	0013883a 	mov	r9,zero
81119740:	003e4706 	br	81119060 <__reset+0xfb0f9060>
81119744:	d8c00a17 	ldw	r3,40(sp)
81119748:	dd800c17 	ldw	r22,48(sp)
8111974c:	1889c83a 	sub	r4,r3,r2
81119750:	003f3706 	br	81119430 <__reset+0xfb0f9430>
81119754:	00bef884 	movi	r2,-1054
81119758:	05c00044 	movi	r23,1
8111975c:	10c5c83a 	sub	r2,r2,r3
81119760:	b884983a 	sll	r2,r23,r2
81119764:	ddc00d15 	stw	r23,52(sp)
81119768:	d8800b15 	stw	r2,44(sp)
8111976c:	003f4106 	br	81119474 <__reset+0xfb0f9474>
81119770:	ddc00615 	stw	r23,24(sp)
81119774:	002b883a 	mov	r21,zero
81119778:	003dc306 	br	81118e88 <__reset+0xfb0f8e88>
8111977c:	1811883a 	mov	r8,r3
81119780:	003fe706 	br	81119720 <__reset+0xfb0f9720>
81119784:	90002e1e 	bne	r18,zero,81119840 <_strtod_r+0xc40>
81119788:	00c00434 	movhi	r3,16
8111978c:	18ffffc4 	addi	r3,r3,-1
81119790:	88c4703a 	and	r2,r17,r3
81119794:	10002c1e 	bne	r2,zero,81119848 <_strtod_r+0xc48>
81119798:	000d883a 	mov	r6,zero
8111979c:	01cffc34 	movhi	r7,16368
811197a0:	b809883a 	mov	r4,r23
811197a4:	b00b883a 	mov	r5,r22
811197a8:	1120d3c0 	call	81120d3c <__ledf2>
811197ac:	10021716 	blt	r2,zero,8111a00c <_strtod_r+0x140c>
811197b0:	b809883a 	mov	r4,r23
811197b4:	b00b883a 	mov	r5,r22
811197b8:	000d883a 	mov	r6,zero
811197bc:	01cff834 	movhi	r7,16352
811197c0:	110b9380 	call	8110b938 <__muldf3>
811197c4:	d8800d15 	stw	r2,52(sp)
811197c8:	182f883a 	mov	r23,r3
811197cc:	102d883a 	mov	r22,r2
811197d0:	1a20003c 	xorhi	r8,r3,32768
811197d4:	dd800b15 	stw	r22,44(sp)
811197d8:	402d883a 	mov	r22,r8
811197dc:	003f8206 	br	811195e8 <__reset+0xfb0f95e8>
811197e0:	b013883a 	mov	r9,r22
811197e4:	000b883a 	mov	r5,zero
811197e8:	0015883a 	mov	r10,zero
811197ec:	893ff404 	addi	r4,r17,-48
811197f0:	00800244 	movi	r2,9
811197f4:	11001036 	bltu	r2,r4,81119838 <_strtod_r+0xc38>
811197f8:	28c00044 	addi	r3,r5,1
811197fc:	2023883a 	mov	r17,r4
81119800:	20014d1e 	bne	r4,zero,81119d38 <_strtod_r+0x1138>
81119804:	d9800617 	ldw	r6,24(sp)
81119808:	180b883a 	mov	r5,r3
8111980c:	30800044 	addi	r2,r6,1
81119810:	d8800615 	stw	r2,24(sp)
81119814:	34400047 	ldb	r17,1(r6)
81119818:	003ff406 	br	811197ec <__reset+0xfb0f97ec>
8111981c:	0019883a 	mov	r12,zero
81119820:	b8800084 	addi	r2,r23,2
81119824:	d8800615 	stw	r2,24(sp)
81119828:	bc400087 	ldb	r17,2(r23)
8111982c:	003e1606 	br	81119088 <__reset+0xfb0f9088>
81119830:	03000044 	movi	r12,1
81119834:	003ffa06 	br	81119820 <__reset+0xfb0f9820>
81119838:	02c00044 	movi	r11,1
8111983c:	003d8d06 	br	81118e74 <__reset+0xfb0f8e74>
81119840:	00800044 	movi	r2,1
81119844:	9080fe26 	beq	r18,r2,81119c40 <_strtod_r+0x1040>
81119848:	d8000b15 	stw	zero,44(sp)
8111984c:	05affc34 	movhi	r22,49136
81119850:	d8000d15 	stw	zero,52(sp)
81119854:	05cffc34 	movhi	r23,16368
81119858:	003f6306 	br	811195e8 <__reset+0xfb0f95e8>
8111985c:	d8000a15 	stw	zero,40(sp)
81119860:	003ec906 	br	81119388 <__reset+0xfb0f9388>
81119864:	d9001117 	ldw	r4,68(sp)
81119868:	00bfffc4 	movi	r2,-1
8111986c:	2080461e 	bne	r4,r2,81119988 <_strtod_r+0xd88>
81119870:	dd000a15 	stw	r20,40(sp)
81119874:	dd001217 	ldw	r20,72(sp)
81119878:	a811883a 	mov	r8,r21
8111987c:	d8800517 	ldw	r2,20(sp)
81119880:	00c00884 	movi	r3,34
81119884:	80c00015 	stw	r3,0(r16)
81119888:	002b883a 	mov	r21,zero
8111988c:	059ffc34 	movhi	r22,32752
81119890:	100b883a 	mov	r5,r2
81119894:	8009883a 	mov	r4,r16
81119898:	da001315 	stw	r8,76(sp)
8111989c:	11172f40 	call	811172f4 <_Bfree>
811198a0:	d9400a17 	ldw	r5,40(sp)
811198a4:	8009883a 	mov	r4,r16
811198a8:	11172f40 	call	811172f4 <_Bfree>
811198ac:	980b883a 	mov	r5,r19
811198b0:	8009883a 	mov	r4,r16
811198b4:	11172f40 	call	811172f4 <_Bfree>
811198b8:	d9400817 	ldw	r5,32(sp)
811198bc:	8009883a 	mov	r4,r16
811198c0:	11172f40 	call	811172f4 <_Bfree>
811198c4:	da001317 	ldw	r8,76(sp)
811198c8:	8009883a 	mov	r4,r16
811198cc:	400b883a 	mov	r5,r8
811198d0:	11172f40 	call	811172f4 <_Bfree>
811198d4:	003d9206 	br	81118f20 <__reset+0xfb0f8f20>
811198d8:	d8c00717 	ldw	r3,28(sp)
811198dc:	d8800504 	addi	r2,sp,20
811198e0:	01a044f4 	movhi	r6,33043
811198e4:	319ddd04 	addi	r6,r6,30580
811198e8:	d8c00115 	stw	r3,4(sp)
811198ec:	d8800015 	stw	r2,0(sp)
811198f0:	d9c00404 	addi	r7,sp,16
811198f4:	d9400604 	addi	r5,sp,24
811198f8:	8009883a 	mov	r4,r16
811198fc:	111de2c0 	call	8111de2c <__gethex>
81119900:	154001cc 	andi	r21,r2,7
81119904:	a83d9b26 	beq	r21,zero,81118f74 <__reset+0xfb0f8f74>
81119908:	00c00184 	movi	r3,6
8111990c:	a8c0d61e 	bne	r21,r3,81119c68 <_strtod_r+0x1068>
81119910:	9cc00044 	addi	r19,r19,1
81119914:	dcc00615 	stw	r19,24(sp)
81119918:	002b883a 	mov	r21,zero
8111991c:	002d883a 	mov	r22,zero
81119920:	d8000715 	stw	zero,28(sp)
81119924:	003d7e06 	br	81118f20 <__reset+0xfb0f8f20>
81119928:	00bf2c34 	movhi	r2,64688
8111992c:	88a3883a 	add	r17,r17,r2
81119930:	9009883a 	mov	r4,r18
81119934:	880b883a 	mov	r5,r17
81119938:	1117d700 	call	81117d70 <__ulp>
8111993c:	d9000b17 	ldw	r4,44(sp)
81119940:	100d883a 	mov	r6,r2
81119944:	180f883a 	mov	r7,r3
81119948:	b00b883a 	mov	r5,r22
8111994c:	110b9380 	call	8110b938 <__muldf3>
81119950:	900d883a 	mov	r6,r18
81119954:	180b883a 	mov	r5,r3
81119958:	880f883a 	mov	r7,r17
8111995c:	1009883a 	mov	r4,r2
81119960:	111fa440 	call	8111fa44 <__adddf3>
81119964:	015f2834 	movhi	r5,31904
81119968:	1025883a 	mov	r18,r2
8111996c:	297fffc4 	addi	r5,r5,-1
81119970:	189ffc2c 	andhi	r2,r3,32752
81119974:	2880892e 	bgeu	r5,r2,81119b9c <_strtod_r+0xf9c>
81119978:	d8801017 	ldw	r2,64(sp)
8111997c:	00dffc34 	movhi	r3,32752
81119980:	18ffffc4 	addi	r3,r3,-1
81119984:	10ffb726 	beq	r2,r3,81119864 <__reset+0xfb0f9864>
81119988:	045ffc34 	movhi	r17,32752
8111998c:	8c7fffc4 	addi	r17,r17,-1
81119990:	04bfffc4 	movi	r18,-1
81119994:	003f4706 	br	811196b4 <__reset+0xfb0f96b4>
81119998:	00800884 	movi	r2,34
8111999c:	80800015 	stw	r2,0(r16)
811199a0:	002b883a 	mov	r21,zero
811199a4:	059ffc34 	movhi	r22,32752
811199a8:	003d5d06 	br	81118f20 <__reset+0xfb0f8f20>
811199ac:	d9000d17 	ldw	r4,52(sp)
811199b0:	b80b883a 	mov	r5,r23
811199b4:	112172c0 	call	8112172c <__fixdfsi>
811199b8:	1009883a 	mov	r4,r2
811199bc:	11217ac0 	call	811217ac <__floatsidf>
811199c0:	d9000d17 	ldw	r4,52(sp)
811199c4:	b80b883a 	mov	r5,r23
811199c8:	100d883a 	mov	r6,r2
811199cc:	180f883a 	mov	r7,r3
811199d0:	1120e300 	call	81120e30 <__subdf3>
811199d4:	d9400e17 	ldw	r5,56(sp)
811199d8:	1039883a 	mov	fp,r2
811199dc:	182f883a 	mov	r23,r3
811199e0:	2800141e 	bne	r5,zero,81119a34 <_strtod_r+0xe34>
811199e4:	9000131e 	bne	r18,zero,81119a34 <_strtod_r+0xe34>
811199e8:	00800434 	movhi	r2,16
811199ec:	10bfffc4 	addi	r2,r2,-1
811199f0:	b0ac703a 	and	r22,r22,r2
811199f4:	b0000f1e 	bne	r22,zero,81119a34 <_strtod_r+0xe34>
811199f8:	01a52834 	movhi	r6,38048
811199fc:	01cff434 	movhi	r7,16336
81119a00:	318d6544 	addi	r6,r6,13717
81119a04:	39ffffc4 	addi	r7,r7,-1
81119a08:	e009883a 	mov	r4,fp
81119a0c:	180b883a 	mov	r5,r3
81119a10:	1120d3c0 	call	81120d3c <__ledf2>
81119a14:	103f270e 	bge	r2,zero,811196b4 <__reset+0xfb0f96b4>
81119a18:	dd000a15 	stw	r20,40(sp)
81119a1c:	a811883a 	mov	r8,r21
81119a20:	dd001217 	ldw	r20,72(sp)
81119a24:	d8800517 	ldw	r2,20(sp)
81119a28:	002b883a 	mov	r21,zero
81119a2c:	882d883a 	mov	r22,r17
81119a30:	003f9706 	br	81119890 <__reset+0xfb0f9890>
81119a34:	01a52834 	movhi	r6,38048
81119a38:	01cff834 	movhi	r7,16352
81119a3c:	318d6544 	addi	r6,r6,13717
81119a40:	39ffffc4 	addi	r7,r7,-1
81119a44:	e009883a 	mov	r4,fp
81119a48:	b80b883a 	mov	r5,r23
81119a4c:	1120d3c0 	call	81120d3c <__ledf2>
81119a50:	10000716 	blt	r2,zero,81119a70 <_strtod_r+0xe70>
81119a54:	018d6c34 	movhi	r6,13744
81119a58:	31b94d44 	addi	r6,r6,-6859
81119a5c:	01cff834 	movhi	r7,16352
81119a60:	e009883a 	mov	r4,fp
81119a64:	b80b883a 	mov	r5,r23
81119a68:	1120c600 	call	81120c60 <__gedf2>
81119a6c:	00bf110e 	bge	zero,r2,811196b4 <__reset+0xfb0f96b4>
81119a70:	dd000a15 	stw	r20,40(sp)
81119a74:	a811883a 	mov	r8,r21
81119a78:	dd001217 	ldw	r20,72(sp)
81119a7c:	d8800517 	ldw	r2,20(sp)
81119a80:	902b883a 	mov	r21,r18
81119a84:	882d883a 	mov	r22,r17
81119a88:	003f8106 	br	81119890 <__reset+0xfb0f9890>
81119a8c:	b83e2f26 	beq	r23,zero,8111934c <__reset+0xfb0f934c>
81119a90:	05efc83a 	sub	r23,zero,r23
81119a94:	b88003cc 	andi	r2,r23,15
81119a98:	10000d26 	beq	r2,zero,81119ad0 <_strtod_r+0xed0>
81119a9c:	100490fa 	slli	r2,r2,3
81119aa0:	00e044f4 	movhi	r3,33043
81119aa4:	18dda204 	addi	r3,r3,30344
81119aa8:	1885883a 	add	r2,r3,r2
81119aac:	11800017 	ldw	r6,0(r2)
81119ab0:	11c00117 	ldw	r7,4(r2)
81119ab4:	9009883a 	mov	r4,r18
81119ab8:	880b883a 	mov	r5,r17
81119abc:	da401315 	stw	r9,76(sp)
81119ac0:	11202f00 	call	811202f0 <__divdf3>
81119ac4:	da401317 	ldw	r9,76(sp)
81119ac8:	1025883a 	mov	r18,r2
81119acc:	1823883a 	mov	r17,r3
81119ad0:	b82fd13a 	srai	r23,r23,4
81119ad4:	b83e1d26 	beq	r23,zero,8111934c <__reset+0xfb0f934c>
81119ad8:	008007c4 	movi	r2,31
81119adc:	15c02816 	blt	r2,r23,81119b80 <_strtod_r+0xf80>
81119ae0:	b880040c 	andi	r2,r23,16
81119ae4:	10019726 	beq	r2,zero,8111a144 <_strtod_r+0x1544>
81119ae8:	05c1880e 	bge	zero,r23,8111a10c <_strtod_r+0x150c>
81119aec:	00c01a84 	movi	r3,106
81119af0:	d8c00915 	stw	r3,36(sp)
81119af4:	04e044f4 	movhi	r19,33043
81119af8:	9cdde204 	addi	r19,r19,30600
81119afc:	8807883a 	mov	r3,r17
81119b00:	9005883a 	mov	r2,r18
81119b04:	8023883a 	mov	r17,r16
81119b08:	0009883a 	mov	r4,zero
81119b0c:	9821883a 	mov	r16,r19
81119b10:	da400a15 	stw	r9,40(sp)
81119b14:	1827883a 	mov	r19,r3
81119b18:	b980004c 	andi	r6,r23,1
81119b1c:	30000626 	beq	r6,zero,81119b38 <_strtod_r+0xf38>
81119b20:	81800017 	ldw	r6,0(r16)
81119b24:	81c00117 	ldw	r7,4(r16)
81119b28:	1009883a 	mov	r4,r2
81119b2c:	180b883a 	mov	r5,r3
81119b30:	110b9380 	call	8110b938 <__muldf3>
81119b34:	01000044 	movi	r4,1
81119b38:	b82fd07a 	srai	r23,r23,1
81119b3c:	84000204 	addi	r16,r16,8
81119b40:	b83ff51e 	bne	r23,zero,81119b18 <__reset+0xfb0f9b18>
81119b44:	21003fcc 	andi	r4,r4,255
81119b48:	8821883a 	mov	r16,r17
81119b4c:	da400a17 	ldw	r9,40(sp)
81119b50:	9823883a 	mov	r17,r19
81119b54:	2001a51e 	bne	r4,zero,8111a1ec <_strtod_r+0x15ec>
81119b58:	d9000917 	ldw	r4,36(sp)
81119b5c:	20016d1e 	bne	r4,zero,8111a114 <_strtod_r+0x1514>
81119b60:	000d883a 	mov	r6,zero
81119b64:	000f883a 	mov	r7,zero
81119b68:	9009883a 	mov	r4,r18
81119b6c:	880b883a 	mov	r5,r17
81119b70:	da401315 	stw	r9,76(sp)
81119b74:	1120bd80 	call	81120bd8 <__eqdf2>
81119b78:	da401317 	ldw	r9,76(sp)
81119b7c:	103df41e 	bne	r2,zero,81119350 <__reset+0xfb0f9350>
81119b80:	00800884 	movi	r2,34
81119b84:	80800015 	stw	r2,0(r16)
81119b88:	002b883a 	mov	r21,zero
81119b8c:	002d883a 	mov	r22,zero
81119b90:	003ce306 	br	81118f20 <__reset+0xfb0f8f20>
81119b94:	055387c4 	movi	r21,19999
81119b98:	003d6b06 	br	81119148 <__reset+0xfb0f9148>
81119b9c:	0440d434 	movhi	r17,848
81119ba0:	1c63883a 	add	r17,r3,r17
81119ba4:	882d883a 	mov	r22,r17
81119ba8:	003ebe06 	br	811196a4 <__reset+0xfb0f96a4>
81119bac:	14403fcc 	andi	r17,r2,255
81119bb0:	8c40201c 	xori	r17,r17,128
81119bb4:	8c7fe004 	addi	r17,r17,-128
81119bb8:	dd400817 	ldw	r21,32(sp)
81119bbc:	0027883a 	mov	r19,zero
81119bc0:	0039883a 	mov	fp,zero
81119bc4:	002d883a 	mov	r22,zero
81119bc8:	003c9906 	br	81118e30 <__reset+0xfb0f8e30>
81119bcc:	00c00944 	movi	r3,37
81119bd0:	1a47c83a 	sub	r3,r3,r9
81119bd4:	1d7d8c16 	blt	r3,r21,81119208 <__reset+0xfb0f9208>
81119bd8:	1261c83a 	sub	r16,r2,r9
81119bdc:	800490fa 	slli	r2,r16,3
81119be0:	04e044f4 	movhi	r19,33043
81119be4:	9cdda204 	addi	r19,r19,30344
81119be8:	9885883a 	add	r2,r19,r2
81119bec:	11000017 	ldw	r4,0(r2)
81119bf0:	11400117 	ldw	r5,4(r2)
81119bf4:	900d883a 	mov	r6,r18
81119bf8:	880f883a 	mov	r7,r17
81119bfc:	110b9380 	call	8110b938 <__muldf3>
81119c00:	ac0dc83a 	sub	r6,r21,r16
81119c04:	300c90fa 	slli	r6,r6,3
81119c08:	1009883a 	mov	r4,r2
81119c0c:	180b883a 	mov	r5,r3
81119c10:	9985883a 	add	r2,r19,r6
81119c14:	11800017 	ldw	r6,0(r2)
81119c18:	11c00117 	ldw	r7,4(r2)
81119c1c:	110b9380 	call	8110b938 <__muldf3>
81119c20:	102b883a 	mov	r21,r2
81119c24:	182d883a 	mov	r22,r3
81119c28:	003cbd06 	br	81118f20 <__reset+0xfb0f8f20>
81119c2c:	b811883a 	mov	r8,r23
81119c30:	003e8606 	br	8111964c <__reset+0xfb0f964c>
81119c34:	d8000d15 	stw	zero,52(sp)
81119c38:	05cffc34 	movhi	r23,16368
81119c3c:	003e8006 	br	81119640 <__reset+0xfb0f9640>
81119c40:	883f011e 	bne	r17,zero,81119848 <__reset+0xfb0f9848>
81119c44:	dd000a15 	stw	r20,40(sp)
81119c48:	dd001217 	ldw	r20,72(sp)
81119c4c:	a811883a 	mov	r8,r21
81119c50:	00800884 	movi	r2,34
81119c54:	80800015 	stw	r2,0(r16)
81119c58:	002b883a 	mov	r21,zero
81119c5c:	d8800517 	ldw	r2,20(sp)
81119c60:	002d883a 	mov	r22,zero
81119c64:	003f0a06 	br	81119890 <__reset+0xfb0f9890>
81119c68:	d9800517 	ldw	r6,20(sp)
81119c6c:	30000826 	beq	r6,zero,81119c90 <_strtod_r+0x1090>
81119c70:	01400d44 	movi	r5,53
81119c74:	d9000204 	addi	r4,sp,8
81119c78:	d8801315 	stw	r2,76(sp)
81119c7c:	11181440 	call	81118144 <__copybits>
81119c80:	d9400517 	ldw	r5,20(sp)
81119c84:	8009883a 	mov	r4,r16
81119c88:	11172f40 	call	811172f4 <_Bfree>
81119c8c:	d8801317 	ldw	r2,76(sp)
81119c90:	00c00184 	movi	r3,6
81119c94:	1d400f36 	bltu	r3,r21,81119cd4 <_strtod_r+0x10d4>
81119c98:	a82a90ba 	slli	r21,r21,2
81119c9c:	00e044b4 	movhi	r3,33042
81119ca0:	18e72c04 	addi	r3,r3,-25424
81119ca4:	a8eb883a 	add	r21,r21,r3
81119ca8:	a8c00017 	ldw	r3,0(r21)
81119cac:	1800683a 	jmp	r3
81119cb0:	81119d2c 	andhi	r4,r16,18036
81119cb4:	81119d04 	addi	r4,r16,18036
81119cb8:	81119ce8 	cmpgeui	r4,r16,18035
81119cbc:	81119ccc 	andi	r4,r16,18035
81119cc0:	81119cf4 	orhi	r4,r16,18035
81119cc4:	81119d04 	addi	r4,r16,18036
81119cc8:	81119d2c 	andhi	r4,r16,18036
81119ccc:	045ffc34 	movhi	r17,32752
81119cd0:	0025883a 	mov	r18,zero
81119cd4:	1080020c 	andi	r2,r2,8
81119cd8:	902b883a 	mov	r21,r18
81119cdc:	103c8f26 	beq	r2,zero,81118f1c <__reset+0xfb0f8f1c>
81119ce0:	8da00034 	orhi	r22,r17,32768
81119ce4:	003c8e06 	br	81118f20 <__reset+0xfb0f8f20>
81119ce8:	dc800217 	ldw	r18,8(sp)
81119cec:	dc400317 	ldw	r17,12(sp)
81119cf0:	003ff806 	br	81119cd4 <__reset+0xfb0f9cd4>
81119cf4:	04600034 	movhi	r17,32768
81119cf8:	8c7fffc4 	addi	r17,r17,-1
81119cfc:	04bfffc4 	movi	r18,-1
81119d00:	003ff406 	br	81119cd4 <__reset+0xfb0f9cd4>
81119d04:	d8c00417 	ldw	r3,16(sp)
81119d08:	dc400317 	ldw	r17,12(sp)
81119d0c:	013ffc34 	movhi	r4,65520
81119d10:	18c10cc4 	addi	r3,r3,1075
81119d14:	1806953a 	slli	r3,r3,20
81119d18:	213fffc4 	addi	r4,r4,-1
81119d1c:	8922703a 	and	r17,r17,r4
81119d20:	dc800217 	ldw	r18,8(sp)
81119d24:	88e2b03a 	or	r17,r17,r3
81119d28:	003fea06 	br	81119cd4 <__reset+0xfb0f9cd4>
81119d2c:	0023883a 	mov	r17,zero
81119d30:	0025883a 	mov	r18,zero
81119d34:	003fe706 	br	81119cd4 <__reset+0xfb0f9cd4>
81119d38:	01800044 	movi	r6,1
81119d3c:	50d5883a 	add	r10,r10,r3
81119d40:	2a4b883a 	add	r5,r5,r9
81119d44:	19811a26 	beq	r3,r6,8111a1b0 <_strtod_r+0x15b0>
81119d48:	01800204 	movi	r6,8
81119d4c:	01c00404 	movi	r7,16
81119d50:	4a400044 	addi	r9,r9,1
81119d54:	48bfffc4 	addi	r2,r9,-1
81119d58:	30801616 	blt	r6,r2,81119db4 <_strtod_r+0x11b4>
81119d5c:	e70002a4 	muli	fp,fp,10
81119d60:	497ffb1e 	bne	r9,r5,81119d50 <__reset+0xfb0f9d50>
81119d64:	d9800617 	ldw	r6,24(sp)
81119d68:	4a400044 	addi	r9,r9,1
81119d6c:	00c00204 	movi	r3,8
81119d70:	19400c0e 	bge	r3,r5,81119da4 <_strtod_r+0x11a4>
81119d74:	00800404 	movi	r2,16
81119d78:	000b883a 	mov	r5,zero
81119d7c:	127ea316 	blt	r2,r9,8111980c <__reset+0xfb0f980c>
81119d80:	988002a4 	muli	r2,r19,10
81119d84:	20a7883a 	add	r19,r4,r2
81119d88:	003ea006 	br	8111980c <__reset+0xfb0f980c>
81119d8c:	d8800617 	ldw	r2,24(sp)
81119d90:	8c7ff404 	addi	r17,r17,-48
81119d94:	2a800044 	addi	r10,r5,1
81119d98:	d8800815 	stw	r2,32(sp)
81119d9c:	100d883a 	mov	r6,r2
81119da0:	02400044 	movi	r9,1
81119da4:	e08002a4 	muli	r2,fp,10
81119da8:	000b883a 	mov	r5,zero
81119dac:	88b9883a 	add	fp,r17,r2
81119db0:	003e9606 	br	8111980c <__reset+0xfb0f980c>
81119db4:	3a7fea16 	blt	r7,r9,81119d60 <__reset+0xfb0f9d60>
81119db8:	9cc002a4 	muli	r19,r19,10
81119dbc:	003fe806 	br	81119d60 <__reset+0xfb0f9d60>
81119dc0:	00bffa84 	movi	r2,-22
81119dc4:	a8bd1016 	blt	r21,r2,81119208 <__reset+0xfb0f9208>
81119dc8:	a82a90fa 	slli	r21,r21,3
81119dcc:	00a044f4 	movhi	r2,33043
81119dd0:	109da204 	addi	r2,r2,30344
81119dd4:	1545c83a 	sub	r2,r2,r21
81119dd8:	11800017 	ldw	r6,0(r2)
81119ddc:	11c00117 	ldw	r7,4(r2)
81119de0:	9009883a 	mov	r4,r18
81119de4:	880b883a 	mov	r5,r17
81119de8:	11202f00 	call	811202f0 <__divdf3>
81119dec:	102b883a 	mov	r21,r2
81119df0:	182d883a 	mov	r22,r3
81119df4:	003c4a06 	br	81118f20 <__reset+0xfb0f8f20>
81119df8:	dd000a15 	stw	r20,40(sp)
81119dfc:	a811883a 	mov	r8,r21
81119e00:	dd001217 	ldw	r20,72(sp)
81119e04:	003e9e06 	br	81119880 <__reset+0xfb0f9880>
81119e08:	016044f4 	movhi	r5,33043
81119e0c:	d9000617 	ldw	r4,24(sp)
81119e10:	295dd404 	addi	r5,r5,30544
81119e14:	01c00644 	movi	r7,25
81119e18:	00000b06 	br	81119e48 <_strtod_r+0x1248>
81119e1c:	21000044 	addi	r4,r4,1
81119e20:	20800003 	ldbu	r2,0(r4)
81119e24:	10ffefc4 	addi	r3,r2,-65
81119e28:	10803fcc 	andi	r2,r2,255
81119e2c:	1080201c 	xori	r2,r2,128
81119e30:	18c03fcc 	andi	r3,r3,255
81119e34:	10bfe004 	addi	r2,r2,-128
81119e38:	38c00136 	bltu	r7,r3,81119e40 <_strtod_r+0x1240>
81119e3c:	10800804 	addi	r2,r2,32
81119e40:	29400044 	addi	r5,r5,1
81119e44:	11bbbb1e 	bne	r2,r6,81118d34 <__reset+0xfb0f8d34>
81119e48:	29800007 	ldb	r6,0(r5)
81119e4c:	303ff31e 	bne	r6,zero,81119e1c <__reset+0xfb0f9e1c>
81119e50:	01a044f4 	movhi	r6,33043
81119e54:	d9000615 	stw	r4,24(sp)
81119e58:	319dd504 	addi	r6,r6,30548
81119e5c:	200b883a 	mov	r5,r4
81119e60:	02000644 	movi	r8,25
81119e64:	00000a06 	br	81119e90 <_strtod_r+0x1290>
81119e68:	28800003 	ldbu	r2,0(r5)
81119e6c:	10ffefc4 	addi	r3,r2,-65
81119e70:	10803fcc 	andi	r2,r2,255
81119e74:	1080201c 	xori	r2,r2,128
81119e78:	18c03fcc 	andi	r3,r3,255
81119e7c:	10bfe004 	addi	r2,r2,-128
81119e80:	40c00136 	bltu	r8,r3,81119e88 <_strtod_r+0x1288>
81119e84:	10800804 	addi	r2,r2,32
81119e88:	31800044 	addi	r6,r6,1
81119e8c:	11c0711e 	bne	r2,r7,8111a054 <_strtod_r+0x1454>
81119e90:	31c00007 	ldb	r7,0(r6)
81119e94:	29400044 	addi	r5,r5,1
81119e98:	383ff31e 	bne	r7,zero,81119e68 <__reset+0xfb0f9e68>
81119e9c:	d9400615 	stw	r5,24(sp)
81119ea0:	045ffc34 	movhi	r17,32752
81119ea4:	0025883a 	mov	r18,zero
81119ea8:	003c1b06 	br	81118f18 <__reset+0xfb0f8f18>
81119eac:	000b883a 	mov	r5,zero
81119eb0:	003ccc06 	br	811191e4 <__reset+0xfb0f91e4>
81119eb4:	d9400e17 	ldw	r5,56(sp)
81119eb8:	dd000a15 	stw	r20,40(sp)
81119ebc:	00800434 	movhi	r2,16
81119ec0:	a811883a 	mov	r8,r21
81119ec4:	dd001217 	ldw	r20,72(sp)
81119ec8:	dd401117 	ldw	r21,68(sp)
81119ecc:	dd801017 	ldw	r22,64(sp)
81119ed0:	10bfffc4 	addi	r2,r2,-1
81119ed4:	28005626 	beq	r5,zero,8111a030 <_strtod_r+0x1430>
81119ed8:	8886703a 	and	r3,r17,r2
81119edc:	18807826 	beq	r3,r2,8111a0c0 <_strtod_r+0x14c0>
81119ee0:	d8c00b17 	ldw	r3,44(sp)
81119ee4:	18005726 	beq	r3,zero,8111a044 <_strtod_r+0x1444>
81119ee8:	1c44703a 	and	r2,r3,r17
81119eec:	10000f26 	beq	r2,zero,81119f2c <_strtod_r+0x132c>
81119ef0:	d9000e17 	ldw	r4,56(sp)
81119ef4:	d9800917 	ldw	r6,36(sp)
81119ef8:	20005e26 	beq	r4,zero,8111a074 <_strtod_r+0x1474>
81119efc:	9009883a 	mov	r4,r18
81119f00:	880b883a 	mov	r5,r17
81119f04:	da001315 	stw	r8,76(sp)
81119f08:	1118b9c0 	call	81118b9c <sulp>
81119f0c:	100d883a 	mov	r6,r2
81119f10:	180f883a 	mov	r7,r3
81119f14:	9009883a 	mov	r4,r18
81119f18:	880b883a 	mov	r5,r17
81119f1c:	111fa440 	call	8111fa44 <__adddf3>
81119f20:	da001317 	ldw	r8,76(sp)
81119f24:	102b883a 	mov	r21,r2
81119f28:	182d883a 	mov	r22,r3
81119f2c:	d8c00917 	ldw	r3,36(sp)
81119f30:	18000f26 	beq	r3,zero,81119f70 <_strtod_r+0x1370>
81119f34:	a809883a 	mov	r4,r21
81119f38:	b00b883a 	mov	r5,r22
81119f3c:	000d883a 	mov	r6,zero
81119f40:	01ce5434 	movhi	r7,14672
81119f44:	da001315 	stw	r8,76(sp)
81119f48:	110b9380 	call	8110b938 <__muldf3>
81119f4c:	102b883a 	mov	r21,r2
81119f50:	182d883a 	mov	r22,r3
81119f54:	da001317 	ldw	r8,76(sp)
81119f58:	1800051e 	bne	r3,zero,81119f70 <_strtod_r+0x1370>
81119f5c:	d8800517 	ldw	r2,20(sp)
81119f60:	a83e4b1e 	bne	r21,zero,81119890 <__reset+0xfb0f9890>
81119f64:	00c00884 	movi	r3,34
81119f68:	80c00015 	stw	r3,0(r16)
81119f6c:	003e4806 	br	81119890 <__reset+0xfb0f9890>
81119f70:	d8800517 	ldw	r2,20(sp)
81119f74:	003e4606 	br	81119890 <__reset+0xfb0f9890>
81119f78:	d9000e17 	ldw	r4,56(sp)
81119f7c:	dd000a15 	stw	r20,40(sp)
81119f80:	a811883a 	mov	r8,r21
81119f84:	dd001217 	ldw	r20,72(sp)
81119f88:	dd401117 	ldw	r21,68(sp)
81119f8c:	dd801017 	ldw	r22,64(sp)
81119f90:	203fe61e 	bne	r4,zero,81119f2c <__reset+0xfb0f9f2c>
81119f94:	903fe51e 	bne	r18,zero,81119f2c <__reset+0xfb0f9f2c>
81119f98:	00800434 	movhi	r2,16
81119f9c:	10bfffc4 	addi	r2,r2,-1
81119fa0:	8884703a 	and	r2,r17,r2
81119fa4:	103fe11e 	bne	r2,zero,81119f2c <__reset+0xfb0f9f2c>
81119fa8:	8ddffc2c 	andhi	r23,r17,32752
81119fac:	0081ac34 	movhi	r2,1712
81119fb0:	15ffde2e 	bgeu	r2,r23,81119f2c <__reset+0xfb0f9f2c>
81119fb4:	40800517 	ldw	r2,20(r8)
81119fb8:	1000031e 	bne	r2,zero,81119fc8 <_strtod_r+0x13c8>
81119fbc:	40800417 	ldw	r2,16(r8)
81119fc0:	00c00044 	movi	r3,1
81119fc4:	18bfd90e 	bge	r3,r2,81119f2c <__reset+0xfb0f9f2c>
81119fc8:	400b883a 	mov	r5,r8
81119fcc:	01800044 	movi	r6,1
81119fd0:	8009883a 	mov	r4,r16
81119fd4:	11179cc0 	call	811179cc <__lshift>
81119fd8:	980b883a 	mov	r5,r19
81119fdc:	1009883a 	mov	r4,r2
81119fe0:	d8801315 	stw	r2,76(sp)
81119fe4:	1117b140 	call	81117b14 <__mcmp>
81119fe8:	da001317 	ldw	r8,76(sp)
81119fec:	00bfcf0e 	bge	zero,r2,81119f2c <__reset+0xfb0f9f2c>
81119ff0:	d8c00917 	ldw	r3,36(sp)
81119ff4:	18005c26 	beq	r3,zero,8111a168 <_strtod_r+0x1568>
81119ff8:	0081ac34 	movhi	r2,1712
81119ffc:	15c05a16 	blt	r2,r23,8111a168 <_strtod_r+0x1568>
8111a000:	0080dc34 	movhi	r2,880
8111a004:	15ffcb16 	blt	r2,r23,81119f34 <__reset+0xfb0f9f34>
8111a008:	003f1106 	br	81119c50 <__reset+0xfb0f9c50>
8111a00c:	002d883a 	mov	r22,zero
8111a010:	022ff834 	movhi	r8,49120
8111a014:	d8000d15 	stw	zero,52(sp)
8111a018:	05cff834 	movhi	r23,16352
8111a01c:	003ded06 	br	811197d4 <__reset+0xfb0f97d4>
8111a020:	0440d434 	movhi	r17,848
8111a024:	1c63883a 	add	r17,r3,r17
8111a028:	d8000915 	stw	zero,36(sp)
8111a02c:	003cc806 	br	81119350 <__reset+0xfb0f9350>
8111a030:	8884703a 	and	r2,r17,r2
8111a034:	103faa1e 	bne	r2,zero,81119ee0 <__reset+0xfb0f9ee0>
8111a038:	903fa91e 	bne	r18,zero,81119ee0 <__reset+0xfb0f9ee0>
8111a03c:	8ddffc2c 	andhi	r23,r17,32752
8111a040:	003feb06 	br	81119ff0 <__reset+0xfb0f9ff0>
8111a044:	d8c00d17 	ldw	r3,52(sp)
8111a048:	1cae703a 	and	r23,r3,r18
8111a04c:	b83fb726 	beq	r23,zero,81119f2c <__reset+0xfb0f9f2c>
8111a050:	003fa706 	br	81119ef0 <__reset+0xfb0f9ef0>
8111a054:	21000044 	addi	r4,r4,1
8111a058:	d9000615 	stw	r4,24(sp)
8111a05c:	003f9006 	br	81119ea0 <__reset+0xfb0f9ea0>
8111a060:	016044f4 	movhi	r5,33043
8111a064:	295d9804 	addi	r5,r5,30304
8111a068:	d9400915 	stw	r5,36(sp)
8111a06c:	0027883a 	mov	r19,zero
8111a070:	003ca206 	br	811192fc <__reset+0xfb0f92fc>
8111a074:	9009883a 	mov	r4,r18
8111a078:	880b883a 	mov	r5,r17
8111a07c:	da001315 	stw	r8,76(sp)
8111a080:	1118b9c0 	call	81118b9c <sulp>
8111a084:	100d883a 	mov	r6,r2
8111a088:	180f883a 	mov	r7,r3
8111a08c:	9009883a 	mov	r4,r18
8111a090:	880b883a 	mov	r5,r17
8111a094:	1120e300 	call	81120e30 <__subdf3>
8111a098:	000d883a 	mov	r6,zero
8111a09c:	000f883a 	mov	r7,zero
8111a0a0:	1009883a 	mov	r4,r2
8111a0a4:	180b883a 	mov	r5,r3
8111a0a8:	102b883a 	mov	r21,r2
8111a0ac:	182d883a 	mov	r22,r3
8111a0b0:	1120bd80 	call	81120bd8 <__eqdf2>
8111a0b4:	da001317 	ldw	r8,76(sp)
8111a0b8:	103ee526 	beq	r2,zero,81119c50 <__reset+0xfb0f9c50>
8111a0bc:	003f9b06 	br	81119f2c <__reset+0xfb0f9f2c>
8111a0c0:	d8800917 	ldw	r2,36(sp)
8111a0c4:	10002226 	beq	r2,zero,8111a150 <_strtod_r+0x1550>
8111a0c8:	889ffc2c 	andhi	r2,r17,32752
8111a0cc:	00c1a834 	movhi	r3,1696
8111a0d0:	18801f36 	bltu	r3,r2,8111a150 <_strtod_r+0x1550>
8111a0d4:	1004d53a 	srli	r2,r2,20
8111a0d8:	00c01ac4 	movi	r3,107
8111a0dc:	1887c83a 	sub	r3,r3,r2
8111a0e0:	00bfffc4 	movi	r2,-1
8111a0e4:	10c4983a 	sll	r2,r2,r3
8111a0e8:	14bf7d1e 	bne	r2,r18,81119ee0 <__reset+0xfb0f9ee0>
8111a0ec:	00dffc34 	movhi	r3,32752
8111a0f0:	18ffffc4 	addi	r3,r3,-1
8111a0f4:	88c03526 	beq	r17,r3,8111a1cc <_strtod_r+0x15cc>
8111a0f8:	8c5ffc2c 	andhi	r17,r17,32752
8111a0fc:	00800434 	movhi	r2,16
8111a100:	002b883a 	mov	r21,zero
8111a104:	88ad883a 	add	r22,r17,r2
8111a108:	003f8806 	br	81119f2c <__reset+0xfb0f9f2c>
8111a10c:	01401a84 	movi	r5,106
8111a110:	d9400915 	stw	r5,36(sp)
8111a114:	8ddffc2c 	andhi	r23,r17,32752
8111a118:	b82ed53a 	srli	r23,r23,20
8111a11c:	00801ac4 	movi	r2,107
8111a120:	15c5c83a 	sub	r2,r2,r23
8111a124:	00be8e0e 	bge	zero,r2,81119b60 <__reset+0xfb0f9b60>
8111a128:	00c007c4 	movi	r3,31
8111a12c:	18800a0e 	bge	r3,r2,8111a158 <_strtod_r+0x1558>
8111a130:	00c00d04 	movi	r3,52
8111a134:	0025883a 	mov	r18,zero
8111a138:	1880270e 	bge	r3,r2,8111a1d8 <_strtod_r+0x15d8>
8111a13c:	0440dc34 	movhi	r17,880
8111a140:	003e8706 	br	81119b60 <__reset+0xfb0f9b60>
8111a144:	d8000915 	stw	zero,36(sp)
8111a148:	05fe6a16 	blt	zero,r23,81119af4 <__reset+0xfb0f9af4>
8111a14c:	003e8406 	br	81119b60 <__reset+0xfb0f9b60>
8111a150:	00bfffc4 	movi	r2,-1
8111a154:	003fe406 	br	8111a0e8 <__reset+0xfb0fa0e8>
8111a158:	00ffffc4 	movi	r3,-1
8111a15c:	1884983a 	sll	r2,r3,r2
8111a160:	14a4703a 	and	r18,r2,r18
8111a164:	003e7e06 	br	81119b60 <__reset+0xfb0f9b60>
8111a168:	00bffc34 	movhi	r2,65520
8111a16c:	b8af883a 	add	r23,r23,r2
8111a170:	057fffc4 	movi	r21,-1
8111a174:	00800434 	movhi	r2,16
8111a178:	1545883a 	add	r2,r2,r21
8111a17c:	b8acb03a 	or	r22,r23,r2
8111a180:	003f6a06 	br	81119f2c <__reset+0xfb0f9f2c>
8111a184:	016044f4 	movhi	r5,33043
8111a188:	295dd804 	addi	r5,r5,30560
8111a18c:	d9800204 	addi	r6,sp,8
8111a190:	d9000604 	addi	r4,sp,24
8111a194:	111e65c0 	call	8111e65c <__hexnan>
8111a198:	00c00144 	movi	r3,5
8111a19c:	10fb5c1e 	bne	r2,r3,81118f10 <__reset+0xfb0f8f10>
8111a1a0:	dc400317 	ldw	r17,12(sp)
8111a1a4:	dc800217 	ldw	r18,8(sp)
8111a1a8:	8c5ffc34 	orhi	r17,r17,32752
8111a1ac:	003b5a06 	br	81118f18 <__reset+0xfb0f8f18>
8111a1b0:	480b883a 	mov	r5,r9
8111a1b4:	d9800617 	ldw	r6,24(sp)
8111a1b8:	4a400044 	addi	r9,r9,1
8111a1bc:	003eeb06 	br	81119d6c <__reset+0xfb0f9d6c>
8111a1c0:	1025883a 	mov	r18,r2
8111a1c4:	1823883a 	mov	r17,r3
8111a1c8:	003c4c06 	br	811192fc <__reset+0xfb0f92fc>
8111a1cc:	00ffffc4 	movi	r3,-1
8111a1d0:	10ffc91e 	bne	r2,r3,8111a0f8 <__reset+0xfb0fa0f8>
8111a1d4:	003da906 	br	8111987c <__reset+0xfb0f987c>
8111a1d8:	10bff804 	addi	r2,r2,-32
8111a1dc:	00ffffc4 	movi	r3,-1
8111a1e0:	1884983a 	sll	r2,r3,r2
8111a1e4:	1462703a 	and	r17,r2,r17
8111a1e8:	003e5d06 	br	81119b60 <__reset+0xfb0f9b60>
8111a1ec:	1025883a 	mov	r18,r2
8111a1f0:	1823883a 	mov	r17,r3
8111a1f4:	003e5806 	br	81119b58 <__reset+0xfb0f9b58>

8111a1f8 <strtod>:
8111a1f8:	00a04534 	movhi	r2,33044
8111a1fc:	10a65b04 	addi	r2,r2,-26260
8111a200:	280d883a 	mov	r6,r5
8111a204:	200b883a 	mov	r5,r4
8111a208:	11000017 	ldw	r4,0(r2)
8111a20c:	1118c001 	jmpi	81118c00 <_strtod_r>

8111a210 <strtof>:
8111a210:	defffb04 	addi	sp,sp,-20
8111a214:	dcc00315 	stw	r19,12(sp)
8111a218:	04e04534 	movhi	r19,33044
8111a21c:	9ce65b04 	addi	r19,r19,-26260
8111a220:	280d883a 	mov	r6,r5
8111a224:	200b883a 	mov	r5,r4
8111a228:	99000017 	ldw	r4,0(r19)
8111a22c:	dfc00415 	stw	ra,16(sp)
8111a230:	dc800215 	stw	r18,8(sp)
8111a234:	dc400115 	stw	r17,4(sp)
8111a238:	dc000015 	stw	r16,0(sp)
8111a23c:	1118c000 	call	81118c00 <_strtod_r>
8111a240:	1009883a 	mov	r4,r2
8111a244:	180b883a 	mov	r5,r3
8111a248:	1025883a 	mov	r18,r2
8111a24c:	1823883a 	mov	r17,r3
8111a250:	110c1600 	call	8110c160 <__truncdfsf2>
8111a254:	000b883a 	mov	r5,zero
8111a258:	1009883a 	mov	r4,r2
8111a25c:	1021883a 	mov	r16,r2
8111a260:	111f8480 	call	8111f848 <__eqsf2>
8111a264:	1000111e 	bne	r2,zero,8111a2ac <strtof+0x9c>
8111a268:	000d883a 	mov	r6,zero
8111a26c:	000f883a 	mov	r7,zero
8111a270:	9009883a 	mov	r4,r18
8111a274:	880b883a 	mov	r5,r17
8111a278:	1120bd80 	call	81120bd8 <__eqdf2>
8111a27c:	10000b26 	beq	r2,zero,8111a2ac <strtof+0x9c>
8111a280:	98800017 	ldw	r2,0(r19)
8111a284:	00c00884 	movi	r3,34
8111a288:	10c00015 	stw	r3,0(r2)
8111a28c:	8005883a 	mov	r2,r16
8111a290:	dfc00417 	ldw	ra,16(sp)
8111a294:	dcc00317 	ldw	r19,12(sp)
8111a298:	dc800217 	ldw	r18,8(sp)
8111a29c:	dc400117 	ldw	r17,4(sp)
8111a2a0:	dc000017 	ldw	r16,0(sp)
8111a2a4:	dec00504 	addi	sp,sp,20
8111a2a8:	f800283a 	ret
8111a2ac:	015fe034 	movhi	r5,32640
8111a2b0:	297fffc4 	addi	r5,r5,-1
8111a2b4:	8009883a 	mov	r4,r16
8111a2b8:	111f8c00 	call	8111f8c0 <__gesf2>
8111a2bc:	0080070e 	bge	zero,r2,8111a2dc <strtof+0xcc>
8111a2c0:	01dffc34 	movhi	r7,32752
8111a2c4:	39ffffc4 	addi	r7,r7,-1
8111a2c8:	01bfffc4 	movi	r6,-1
8111a2cc:	9009883a 	mov	r4,r18
8111a2d0:	880b883a 	mov	r5,r17
8111a2d4:	1120c600 	call	81120c60 <__gedf2>
8111a2d8:	00bfe90e 	bge	zero,r2,8111a280 <__reset+0xfb0fa280>
8111a2dc:	017fe034 	movhi	r5,65408
8111a2e0:	297fffc4 	addi	r5,r5,-1
8111a2e4:	8009883a 	mov	r4,r16
8111a2e8:	111f97c0 	call	8111f97c <__lesf2>
8111a2ec:	103fe70e 	bge	r2,zero,8111a28c <__reset+0xfb0fa28c>
8111a2f0:	01fffc34 	movhi	r7,65520
8111a2f4:	39ffffc4 	addi	r7,r7,-1
8111a2f8:	01bfffc4 	movi	r6,-1
8111a2fc:	9009883a 	mov	r4,r18
8111a300:	880b883a 	mov	r5,r17
8111a304:	1120d3c0 	call	81120d3c <__ledf2>
8111a308:	103fdd0e 	bge	r2,zero,8111a280 <__reset+0xfb0fa280>
8111a30c:	003fdf06 	br	8111a28c <__reset+0xfb0fa28c>

8111a310 <_strtoll_r>:
8111a310:	00a04534 	movhi	r2,33044
8111a314:	defff304 	addi	sp,sp,-52
8111a318:	10a65904 	addi	r2,r2,-26268
8111a31c:	dc800515 	stw	r18,20(sp)
8111a320:	14800017 	ldw	r18,0(r2)
8111a324:	dd800915 	stw	r22,36(sp)
8111a328:	dd400815 	stw	r21,32(sp)
8111a32c:	dcc00615 	stw	r19,24(sp)
8111a330:	d9000015 	stw	r4,0(sp)
8111a334:	dfc00c15 	stw	ra,48(sp)
8111a338:	df000b15 	stw	fp,44(sp)
8111a33c:	ddc00a15 	stw	r23,40(sp)
8111a340:	dd000715 	stw	r20,28(sp)
8111a344:	dc400415 	stw	r17,16(sp)
8111a348:	dc000315 	stw	r16,12(sp)
8111a34c:	282d883a 	mov	r22,r5
8111a350:	302b883a 	mov	r21,r6
8111a354:	3827883a 	mov	r19,r7
8111a358:	2809883a 	mov	r4,r5
8111a35c:	24000003 	ldbu	r16,0(r4)
8111a360:	24400044 	addi	r17,r4,1
8111a364:	2007883a 	mov	r3,r4
8111a368:	9405883a 	add	r2,r18,r16
8111a36c:	10800043 	ldbu	r2,1(r2)
8111a370:	8809883a 	mov	r4,r17
8111a374:	1080020c 	andi	r2,r2,8
8111a378:	103ff81e 	bne	r2,zero,8111a35c <__reset+0xfb0fa35c>
8111a37c:	00800b44 	movi	r2,45
8111a380:	80807826 	beq	r16,r2,8111a564 <_strtoll_r+0x254>
8111a384:	00800ac4 	movi	r2,43
8111a388:	80807a26 	beq	r16,r2,8111a574 <_strtoll_r+0x264>
8111a38c:	0039883a 	mov	fp,zero
8111a390:	98004e26 	beq	r19,zero,8111a4cc <_strtoll_r+0x1bc>
8111a394:	00800404 	movi	r2,16
8111a398:	98808226 	beq	r19,r2,8111a5a4 <_strtoll_r+0x294>
8111a39c:	982fd7fa 	srai	r23,r19,31
8111a3a0:	9829883a 	mov	r20,r19
8111a3a4:	e0004f26 	beq	fp,zero,8111a4e4 <_strtoll_r+0x1d4>
8111a3a8:	0017883a 	mov	r11,zero
8111a3ac:	02a00034 	movhi	r10,32768
8111a3b0:	5809883a 	mov	r4,r11
8111a3b4:	500b883a 	mov	r5,r10
8111a3b8:	a00d883a 	mov	r6,r20
8111a3bc:	b80f883a 	mov	r7,r23
8111a3c0:	da800215 	stw	r10,8(sp)
8111a3c4:	dac00115 	stw	r11,4(sp)
8111a3c8:	111f15c0 	call	8111f15c <__umoddi3>
8111a3cc:	dac00117 	ldw	r11,4(sp)
8111a3d0:	da800217 	ldw	r10,8(sp)
8111a3d4:	a00d883a 	mov	r6,r20
8111a3d8:	5809883a 	mov	r4,r11
8111a3dc:	500b883a 	mov	r5,r10
8111a3e0:	b80f883a 	mov	r7,r23
8111a3e4:	d8800115 	stw	r2,4(sp)
8111a3e8:	111ebe40 	call	8111ebe4 <__udivdi3>
8111a3ec:	9409883a 	add	r4,r18,r16
8111a3f0:	21000043 	ldbu	r4,1(r4)
8111a3f4:	1019883a 	mov	r12,r2
8111a3f8:	880b883a 	mov	r5,r17
8111a3fc:	2240010c 	andi	r9,r4,4
8111a400:	0015883a 	mov	r10,zero
8111a404:	000d883a 	mov	r6,zero
8111a408:	000f883a 	mov	r7,zero
8111a40c:	03400044 	movi	r13,1
8111a410:	02ffffc4 	movi	r11,-1
8111a414:	da000117 	ldw	r8,4(sp)
8111a418:	48000d26 	beq	r9,zero,8111a450 <_strtoll_r+0x140>
8111a41c:	843ff404 	addi	r16,r16,-48
8111a420:	84c0110e 	bge	r16,r19,8111a468 <_strtoll_r+0x158>
8111a424:	52c00426 	beq	r10,r11,8111a438 <_strtoll_r+0x128>
8111a428:	19c00236 	bltu	r3,r7,8111a434 <_strtoll_r+0x124>
8111a42c:	38c0311e 	bne	r7,r3,8111a4f4 <_strtoll_r+0x1e4>
8111a430:	6180302e 	bgeu	r12,r6,8111a4f4 <_strtoll_r+0x1e4>
8111a434:	02bfffc4 	movi	r10,-1
8111a438:	2c000003 	ldbu	r16,0(r5)
8111a43c:	29400044 	addi	r5,r5,1
8111a440:	9409883a 	add	r4,r18,r16
8111a444:	21000043 	ldbu	r4,1(r4)
8111a448:	2240010c 	andi	r9,r4,4
8111a44c:	483ff31e 	bne	r9,zero,8111a41c <__reset+0xfb0fa41c>
8111a450:	210000cc 	andi	r4,r4,3
8111a454:	20000426 	beq	r4,zero,8111a468 <_strtoll_r+0x158>
8111a458:	23403426 	beq	r4,r13,8111a52c <_strtoll_r+0x21c>
8111a45c:	008015c4 	movi	r2,87
8111a460:	80a1c83a 	sub	r16,r16,r2
8111a464:	84ffef16 	blt	r16,r19,8111a424 <__reset+0xfb0fa424>
8111a468:	00bfffc4 	movi	r2,-1
8111a46c:	50803426 	beq	r10,r2,8111a540 <_strtoll_r+0x230>
8111a470:	e0000426 	beq	fp,zero,8111a484 <_strtoll_r+0x174>
8111a474:	018dc83a 	sub	r6,zero,r6
8111a478:	3004c03a 	cmpne	r2,r6,zero
8111a47c:	01e1c83a 	sub	r16,zero,r7
8111a480:	808fc83a 	sub	r7,r16,r2
8111a484:	3005883a 	mov	r2,r6
8111a488:	3807883a 	mov	r3,r7
8111a48c:	a8000326 	beq	r21,zero,8111a49c <_strtoll_r+0x18c>
8111a490:	5000321e 	bne	r10,zero,8111a55c <_strtoll_r+0x24c>
8111a494:	b00b883a 	mov	r5,r22
8111a498:	a9400015 	stw	r5,0(r21)
8111a49c:	dfc00c17 	ldw	ra,48(sp)
8111a4a0:	df000b17 	ldw	fp,44(sp)
8111a4a4:	ddc00a17 	ldw	r23,40(sp)
8111a4a8:	dd800917 	ldw	r22,36(sp)
8111a4ac:	dd400817 	ldw	r21,32(sp)
8111a4b0:	dd000717 	ldw	r20,28(sp)
8111a4b4:	dcc00617 	ldw	r19,24(sp)
8111a4b8:	dc800517 	ldw	r18,20(sp)
8111a4bc:	dc400417 	ldw	r17,16(sp)
8111a4c0:	dc000317 	ldw	r16,12(sp)
8111a4c4:	dec00d04 	addi	sp,sp,52
8111a4c8:	f800283a 	ret
8111a4cc:	00800c04 	movi	r2,48
8111a4d0:	80802c26 	beq	r16,r2,8111a584 <_strtoll_r+0x274>
8111a4d4:	05000284 	movi	r20,10
8111a4d8:	002f883a 	mov	r23,zero
8111a4dc:	a027883a 	mov	r19,r20
8111a4e0:	e03fb11e 	bne	fp,zero,8111a3a8 <__reset+0xfb0fa3a8>
8111a4e4:	02a00034 	movhi	r10,32768
8111a4e8:	52bfffc4 	addi	r10,r10,-1
8111a4ec:	02ffffc4 	movi	r11,-1
8111a4f0:	003faf06 	br	8111a3b0 <__reset+0xfb0fa3b0>
8111a4f4:	33000f26 	beq	r6,r12,8111a534 <_strtoll_r+0x224>
8111a4f8:	b985383a 	mul	r2,r23,r6
8111a4fc:	3d0f383a 	mul	r7,r7,r20
8111a500:	3508383a 	mulxuu	r4,r6,r20
8111a504:	350d383a 	mul	r6,r6,r20
8111a508:	8013d7fa 	srai	r9,r16,31
8111a50c:	388f883a 	add	r7,r7,r2
8111a510:	818d883a 	add	r6,r16,r6
8111a514:	390f883a 	add	r7,r7,r4
8111a518:	3421803a 	cmpltu	r16,r6,r16
8111a51c:	49cf883a 	add	r7,r9,r7
8111a520:	81cf883a 	add	r7,r16,r7
8111a524:	02800044 	movi	r10,1
8111a528:	003fc306 	br	8111a438 <__reset+0xfb0fa438>
8111a52c:	00800dc4 	movi	r2,55
8111a530:	003fcb06 	br	8111a460 <__reset+0xfb0fa460>
8111a534:	38fff01e 	bne	r7,r3,8111a4f8 <__reset+0xfb0fa4f8>
8111a538:	443fbe16 	blt	r8,r16,8111a434 <__reset+0xfb0fa434>
8111a53c:	003fee06 	br	8111a4f8 <__reset+0xfb0fa4f8>
8111a540:	e0002426 	beq	fp,zero,8111a5d4 <_strtoll_r+0x2c4>
8111a544:	0005883a 	mov	r2,zero
8111a548:	00e00034 	movhi	r3,32768
8111a54c:	d9800017 	ldw	r6,0(sp)
8111a550:	01000884 	movi	r4,34
8111a554:	31000015 	stw	r4,0(r6)
8111a558:	a83fd026 	beq	r21,zero,8111a49c <__reset+0xfb0fa49c>
8111a55c:	297fffc4 	addi	r5,r5,-1
8111a560:	003fcd06 	br	8111a498 <__reset+0xfb0fa498>
8111a564:	1c400084 	addi	r17,r3,2
8111a568:	1c000043 	ldbu	r16,1(r3)
8111a56c:	07000044 	movi	fp,1
8111a570:	003f8706 	br	8111a390 <__reset+0xfb0fa390>
8111a574:	1c400084 	addi	r17,r3,2
8111a578:	1c000043 	ldbu	r16,1(r3)
8111a57c:	0039883a 	mov	fp,zero
8111a580:	003f8306 	br	8111a390 <__reset+0xfb0fa390>
8111a584:	88800003 	ldbu	r2,0(r17)
8111a588:	00c01604 	movi	r3,88
8111a58c:	108037cc 	andi	r2,r2,223
8111a590:	10c00a26 	beq	r2,r3,8111a5bc <_strtoll_r+0x2ac>
8111a594:	05000204 	movi	r20,8
8111a598:	002f883a 	mov	r23,zero
8111a59c:	a027883a 	mov	r19,r20
8111a5a0:	003f8006 	br	8111a3a4 <__reset+0xfb0fa3a4>
8111a5a4:	00800c04 	movi	r2,48
8111a5a8:	80800e1e 	bne	r16,r2,8111a5e4 <_strtoll_r+0x2d4>
8111a5ac:	88800003 	ldbu	r2,0(r17)
8111a5b0:	00c01604 	movi	r3,88
8111a5b4:	108037cc 	andi	r2,r2,223
8111a5b8:	10c00a1e 	bne	r2,r3,8111a5e4 <_strtoll_r+0x2d4>
8111a5bc:	05000404 	movi	r20,16
8111a5c0:	8c000043 	ldbu	r16,1(r17)
8111a5c4:	002f883a 	mov	r23,zero
8111a5c8:	8c400084 	addi	r17,r17,2
8111a5cc:	a027883a 	mov	r19,r20
8111a5d0:	003f7406 	br	8111a3a4 <__reset+0xfb0fa3a4>
8111a5d4:	00e00034 	movhi	r3,32768
8111a5d8:	18ffffc4 	addi	r3,r3,-1
8111a5dc:	5005883a 	mov	r2,r10
8111a5e0:	003fda06 	br	8111a54c <__reset+0xfb0fa54c>
8111a5e4:	9829883a 	mov	r20,r19
8111a5e8:	002f883a 	mov	r23,zero
8111a5ec:	003f6d06 	br	8111a3a4 <__reset+0xfb0fa3a4>

8111a5f0 <_strtoul_r>:
8111a5f0:	00a04534 	movhi	r2,33044
8111a5f4:	defff604 	addi	sp,sp,-40
8111a5f8:	10a65904 	addi	r2,r2,-26268
8111a5fc:	dc800315 	stw	r18,12(sp)
8111a600:	14800017 	ldw	r18,0(r2)
8111a604:	dd400615 	stw	r21,24(sp)
8111a608:	dd000515 	stw	r20,20(sp)
8111a60c:	dcc00415 	stw	r19,16(sp)
8111a610:	2029883a 	mov	r20,r4
8111a614:	dfc00915 	stw	ra,36(sp)
8111a618:	ddc00815 	stw	r23,32(sp)
8111a61c:	dd800715 	stw	r22,28(sp)
8111a620:	dc400215 	stw	r17,8(sp)
8111a624:	dc000115 	stw	r16,4(sp)
8111a628:	2827883a 	mov	r19,r5
8111a62c:	382b883a 	mov	r21,r7
8111a630:	2809883a 	mov	r4,r5
8111a634:	24000003 	ldbu	r16,0(r4)
8111a638:	24400044 	addi	r17,r4,1
8111a63c:	2007883a 	mov	r3,r4
8111a640:	9405883a 	add	r2,r18,r16
8111a644:	10800043 	ldbu	r2,1(r2)
8111a648:	8809883a 	mov	r4,r17
8111a64c:	1080020c 	andi	r2,r2,8
8111a650:	103ff81e 	bne	r2,zero,8111a634 <__reset+0xfb0fa634>
8111a654:	00800b44 	movi	r2,45
8111a658:	80805326 	beq	r16,r2,8111a7a8 <_strtoul_r+0x1b8>
8111a65c:	00800ac4 	movi	r2,43
8111a660:	80805526 	beq	r16,r2,8111a7b8 <_strtoul_r+0x1c8>
8111a664:	002f883a 	mov	r23,zero
8111a668:	a8000f26 	beq	r21,zero,8111a6a8 <_strtoul_r+0xb8>
8111a66c:	00800404 	movi	r2,16
8111a670:	a8805f26 	beq	r21,r2,8111a7f0 <_strtoul_r+0x200>
8111a674:	013fffc4 	movi	r4,-1
8111a678:	a80b883a 	mov	r5,r21
8111a67c:	d9800015 	stw	r6,0(sp)
8111a680:	111f78c0 	call	8111f78c <__udivsi3>
8111a684:	a80b883a 	mov	r5,r21
8111a688:	013fffc4 	movi	r4,-1
8111a68c:	102d883a 	mov	r22,r2
8111a690:	111f7f00 	call	8111f7f0 <__umodsi3>
8111a694:	d9800017 	ldw	r6,0(sp)
8111a698:	1019883a 	mov	r12,r2
8111a69c:	a817883a 	mov	r11,r21
8111a6a0:	b00f883a 	mov	r7,r22
8111a6a4:	00000706 	br	8111a6c4 <_strtoul_r+0xd4>
8111a6a8:	00800c04 	movi	r2,48
8111a6ac:	80804626 	beq	r16,r2,8111a7c8 <_strtoul_r+0x1d8>
8111a6b0:	05400284 	movi	r21,10
8111a6b4:	01c666b4 	movhi	r7,6554
8111a6b8:	03000144 	movi	r12,5
8111a6bc:	39e66644 	addi	r7,r7,-26215
8111a6c0:	a817883a 	mov	r11,r21
8111a6c4:	9407883a 	add	r3,r18,r16
8111a6c8:	18c00043 	ldbu	r3,1(r3)
8111a6cc:	8809883a 	mov	r4,r17
8111a6d0:	0011883a 	mov	r8,zero
8111a6d4:	1940010c 	andi	r5,r3,4
8111a6d8:	0005883a 	mov	r2,zero
8111a6dc:	02800044 	movi	r10,1
8111a6e0:	027fffc4 	movi	r9,-1
8111a6e4:	28000e26 	beq	r5,zero,8111a720 <_strtoul_r+0x130>
8111a6e8:	843ff404 	addi	r16,r16,-48
8111a6ec:	8540120e 	bge	r16,r21,8111a738 <_strtoul_r+0x148>
8111a6f0:	42400526 	beq	r8,r9,8111a708 <_strtoul_r+0x118>
8111a6f4:	38802236 	bltu	r7,r2,8111a780 <_strtoul_r+0x190>
8111a6f8:	11c02026 	beq	r2,r7,8111a77c <_strtoul_r+0x18c>
8111a6fc:	12c5383a 	mul	r2,r2,r11
8111a700:	02000044 	movi	r8,1
8111a704:	8085883a 	add	r2,r16,r2
8111a708:	24000003 	ldbu	r16,0(r4)
8111a70c:	21000044 	addi	r4,r4,1
8111a710:	9407883a 	add	r3,r18,r16
8111a714:	18c00043 	ldbu	r3,1(r3)
8111a718:	1940010c 	andi	r5,r3,4
8111a71c:	283ff21e 	bne	r5,zero,8111a6e8 <__reset+0xfb0fa6e8>
8111a720:	18c000cc 	andi	r3,r3,3
8111a724:	18000426 	beq	r3,zero,8111a738 <_strtoul_r+0x148>
8111a728:	1a801726 	beq	r3,r10,8111a788 <_strtoul_r+0x198>
8111a72c:	00c015c4 	movi	r3,87
8111a730:	80e1c83a 	sub	r16,r16,r3
8111a734:	857fee16 	blt	r16,r21,8111a6f0 <__reset+0xfb0fa6f0>
8111a738:	40001516 	blt	r8,zero,8111a790 <_strtoul_r+0x1a0>
8111a73c:	b8000126 	beq	r23,zero,8111a744 <_strtoul_r+0x154>
8111a740:	0085c83a 	sub	r2,zero,r2
8111a744:	30000226 	beq	r6,zero,8111a750 <_strtoul_r+0x160>
8111a748:	4000151e 	bne	r8,zero,8111a7a0 <_strtoul_r+0x1b0>
8111a74c:	34c00015 	stw	r19,0(r6)
8111a750:	dfc00917 	ldw	ra,36(sp)
8111a754:	ddc00817 	ldw	r23,32(sp)
8111a758:	dd800717 	ldw	r22,28(sp)
8111a75c:	dd400617 	ldw	r21,24(sp)
8111a760:	dd000517 	ldw	r20,20(sp)
8111a764:	dcc00417 	ldw	r19,16(sp)
8111a768:	dc800317 	ldw	r18,12(sp)
8111a76c:	dc400217 	ldw	r17,8(sp)
8111a770:	dc000117 	ldw	r16,4(sp)
8111a774:	dec00a04 	addi	sp,sp,40
8111a778:	f800283a 	ret
8111a77c:	643fdf0e 	bge	r12,r16,8111a6fc <__reset+0xfb0fa6fc>
8111a780:	023fffc4 	movi	r8,-1
8111a784:	003fe006 	br	8111a708 <__reset+0xfb0fa708>
8111a788:	00c00dc4 	movi	r3,55
8111a78c:	003fe806 	br	8111a730 <__reset+0xfb0fa730>
8111a790:	00800884 	movi	r2,34
8111a794:	a0800015 	stw	r2,0(r20)
8111a798:	00bfffc4 	movi	r2,-1
8111a79c:	303fec26 	beq	r6,zero,8111a750 <__reset+0xfb0fa750>
8111a7a0:	24ffffc4 	addi	r19,r4,-1
8111a7a4:	003fe906 	br	8111a74c <__reset+0xfb0fa74c>
8111a7a8:	1c400084 	addi	r17,r3,2
8111a7ac:	1c000043 	ldbu	r16,1(r3)
8111a7b0:	05c00044 	movi	r23,1
8111a7b4:	003fac06 	br	8111a668 <__reset+0xfb0fa668>
8111a7b8:	1c400084 	addi	r17,r3,2
8111a7bc:	1c000043 	ldbu	r16,1(r3)
8111a7c0:	002f883a 	mov	r23,zero
8111a7c4:	003fa806 	br	8111a668 <__reset+0xfb0fa668>
8111a7c8:	88800003 	ldbu	r2,0(r17)
8111a7cc:	00c01604 	movi	r3,88
8111a7d0:	108037cc 	andi	r2,r2,223
8111a7d4:	10c00c26 	beq	r2,r3,8111a808 <_strtoul_r+0x218>
8111a7d8:	05400204 	movi	r21,8
8111a7dc:	01c80034 	movhi	r7,8192
8111a7e0:	030001c4 	movi	r12,7
8111a7e4:	39ffffc4 	addi	r7,r7,-1
8111a7e8:	a817883a 	mov	r11,r21
8111a7ec:	003fb506 	br	8111a6c4 <__reset+0xfb0fa6c4>
8111a7f0:	00800c04 	movi	r2,48
8111a7f4:	80800c1e 	bne	r16,r2,8111a828 <_strtoul_r+0x238>
8111a7f8:	88800003 	ldbu	r2,0(r17)
8111a7fc:	00c01604 	movi	r3,88
8111a800:	108037cc 	andi	r2,r2,223
8111a804:	10c0081e 	bne	r2,r3,8111a828 <_strtoul_r+0x238>
8111a808:	02c00404 	movi	r11,16
8111a80c:	05840034 	movhi	r22,4096
8111a810:	8c000043 	ldbu	r16,1(r17)
8111a814:	030003c4 	movi	r12,15
8111a818:	8c400084 	addi	r17,r17,2
8111a81c:	b5bfffc4 	addi	r22,r22,-1
8111a820:	582b883a 	mov	r21,r11
8111a824:	003f9e06 	br	8111a6a0 <__reset+0xfb0fa6a0>
8111a828:	01c40034 	movhi	r7,4096
8111a82c:	030003c4 	movi	r12,15
8111a830:	39ffffc4 	addi	r7,r7,-1
8111a834:	a817883a 	mov	r11,r21
8111a838:	003fa206 	br	8111a6c4 <__reset+0xfb0fa6c4>

8111a83c <strtoul>:
8111a83c:	00a04534 	movhi	r2,33044
8111a840:	10a65b04 	addi	r2,r2,-26260
8111a844:	300f883a 	mov	r7,r6
8111a848:	280d883a 	mov	r6,r5
8111a84c:	200b883a 	mov	r5,r4
8111a850:	11000017 	ldw	r4,0(r2)
8111a854:	111a5f01 	jmpi	8111a5f0 <_strtoul_r>

8111a858 <_strtoull_r>:
8111a858:	00a04534 	movhi	r2,33044
8111a85c:	defff404 	addi	sp,sp,-48
8111a860:	10a65904 	addi	r2,r2,-26268
8111a864:	dc400315 	stw	r17,12(sp)
8111a868:	14400017 	ldw	r17,0(r2)
8111a86c:	dd400715 	stw	r21,28(sp)
8111a870:	dd000615 	stw	r20,24(sp)
8111a874:	dcc00515 	stw	r19,20(sp)
8111a878:	dc800415 	stw	r18,16(sp)
8111a87c:	dfc00b15 	stw	ra,44(sp)
8111a880:	df000a15 	stw	fp,40(sp)
8111a884:	ddc00915 	stw	r23,36(sp)
8111a888:	dd800815 	stw	r22,32(sp)
8111a88c:	dc000215 	stw	r16,8(sp)
8111a890:	2827883a 	mov	r19,r5
8111a894:	202b883a 	mov	r21,r4
8111a898:	3029883a 	mov	r20,r6
8111a89c:	3825883a 	mov	r18,r7
8111a8a0:	2807883a 	mov	r3,r5
8111a8a4:	1c000003 	ldbu	r16,0(r3)
8111a8a8:	1f000044 	addi	fp,r3,1
8111a8ac:	1809883a 	mov	r4,r3
8111a8b0:	8c05883a 	add	r2,r17,r16
8111a8b4:	10800043 	ldbu	r2,1(r2)
8111a8b8:	e007883a 	mov	r3,fp
8111a8bc:	1080020c 	andi	r2,r2,8
8111a8c0:	103ff81e 	bne	r2,zero,8111a8a4 <__reset+0xfb0fa8a4>
8111a8c4:	00800b44 	movi	r2,45
8111a8c8:	80806e26 	beq	r16,r2,8111aa84 <_strtoull_r+0x22c>
8111a8cc:	00800ac4 	movi	r2,43
8111a8d0:	80807026 	beq	r16,r2,8111aa94 <_strtoull_r+0x23c>
8111a8d4:	002f883a 	mov	r23,zero
8111a8d8:	90001426 	beq	r18,zero,8111a92c <_strtoull_r+0xd4>
8111a8dc:	00800404 	movi	r2,16
8111a8e0:	90807c26 	beq	r18,r2,8111aad4 <_strtoull_r+0x27c>
8111a8e4:	902dd7fa 	srai	r22,r18,31
8111a8e8:	013fffc4 	movi	r4,-1
8111a8ec:	200b883a 	mov	r5,r4
8111a8f0:	900d883a 	mov	r6,r18
8111a8f4:	b00f883a 	mov	r7,r22
8111a8f8:	111ebe40 	call	8111ebe4 <__udivdi3>
8111a8fc:	013fffc4 	movi	r4,-1
8111a900:	900d883a 	mov	r6,r18
8111a904:	b00f883a 	mov	r7,r22
8111a908:	200b883a 	mov	r5,r4
8111a90c:	d8c00115 	stw	r3,4(sp)
8111a910:	d8800015 	stw	r2,0(sp)
8111a914:	111f15c0 	call	8111f15c <__umoddi3>
8111a918:	101b883a 	mov	r13,r2
8111a91c:	9015883a 	mov	r10,r18
8111a920:	dac00017 	ldw	r11,0(sp)
8111a924:	da000117 	ldw	r8,4(sp)
8111a928:	00000a06 	br	8111a954 <_strtoull_r+0xfc>
8111a92c:	00800c04 	movi	r2,48
8111a930:	80805c26 	beq	r16,r2,8111aaa4 <_strtoull_r+0x24c>
8111a934:	02800284 	movi	r10,10
8111a938:	02e666b4 	movhi	r11,39322
8111a93c:	020666b4 	movhi	r8,6554
8111a940:	03400144 	movi	r13,5
8111a944:	5ae66644 	addi	r11,r11,-26215
8111a948:	42266644 	addi	r8,r8,-26215
8111a94c:	002d883a 	mov	r22,zero
8111a950:	5025883a 	mov	r18,r10
8111a954:	8c0b883a 	add	r5,r17,r16
8111a958:	29400043 	ldbu	r5,1(r5)
8111a95c:	e009883a 	mov	r4,fp
8111a960:	000f883a 	mov	r7,zero
8111a964:	2980010c 	andi	r6,r5,4
8111a968:	0005883a 	mov	r2,zero
8111a96c:	0007883a 	mov	r3,zero
8111a970:	03000044 	movi	r12,1
8111a974:	027fffc4 	movi	r9,-1
8111a978:	30000d26 	beq	r6,zero,8111a9b0 <_strtoull_r+0x158>
8111a97c:	843ff404 	addi	r16,r16,-48
8111a980:	8480110e 	bge	r16,r18,8111a9c8 <_strtoull_r+0x170>
8111a984:	3a400426 	beq	r7,r9,8111a998 <_strtoull_r+0x140>
8111a988:	40c00236 	bltu	r8,r3,8111a994 <_strtoull_r+0x13c>
8111a98c:	1a00231e 	bne	r3,r8,8111aa1c <_strtoull_r+0x1c4>
8111a990:	5880222e 	bgeu	r11,r2,8111aa1c <_strtoull_r+0x1c4>
8111a994:	01ffffc4 	movi	r7,-1
8111a998:	24000003 	ldbu	r16,0(r4)
8111a99c:	21000044 	addi	r4,r4,1
8111a9a0:	8c0b883a 	add	r5,r17,r16
8111a9a4:	29400043 	ldbu	r5,1(r5)
8111a9a8:	2980010c 	andi	r6,r5,4
8111a9ac:	303ff31e 	bne	r6,zero,8111a97c <__reset+0xfb0fa97c>
8111a9b0:	294000cc 	andi	r5,r5,3
8111a9b4:	28000426 	beq	r5,zero,8111a9c8 <_strtoull_r+0x170>
8111a9b8:	2b002626 	beq	r5,r12,8111aa54 <_strtoull_r+0x1fc>
8111a9bc:	014015c4 	movi	r5,87
8111a9c0:	8161c83a 	sub	r16,r16,r5
8111a9c4:	84bfef16 	blt	r16,r18,8111a984 <__reset+0xfb0fa984>
8111a9c8:	38002716 	blt	r7,zero,8111aa68 <_strtoull_r+0x210>
8111a9cc:	b8000426 	beq	r23,zero,8111a9e0 <_strtoull_r+0x188>
8111a9d0:	0085c83a 	sub	r2,zero,r2
8111a9d4:	100ac03a 	cmpne	r5,r2,zero
8111a9d8:	00e1c83a 	sub	r16,zero,r3
8111a9dc:	8147c83a 	sub	r3,r16,r5
8111a9e0:	a0000226 	beq	r20,zero,8111a9ec <_strtoull_r+0x194>
8111a9e4:	3800251e 	bne	r7,zero,8111aa7c <_strtoull_r+0x224>
8111a9e8:	a4c00015 	stw	r19,0(r20)
8111a9ec:	dfc00b17 	ldw	ra,44(sp)
8111a9f0:	df000a17 	ldw	fp,40(sp)
8111a9f4:	ddc00917 	ldw	r23,36(sp)
8111a9f8:	dd800817 	ldw	r22,32(sp)
8111a9fc:	dd400717 	ldw	r21,28(sp)
8111aa00:	dd000617 	ldw	r20,24(sp)
8111aa04:	dcc00517 	ldw	r19,20(sp)
8111aa08:	dc800417 	ldw	r18,16(sp)
8111aa0c:	dc400317 	ldw	r17,12(sp)
8111aa10:	dc000217 	ldw	r16,8(sp)
8111aa14:	dec00c04 	addi	sp,sp,48
8111aa18:	f800283a 	ret
8111aa1c:	12c00f26 	beq	r2,r11,8111aa5c <_strtoull_r+0x204>
8111aa20:	b08d383a 	mul	r6,r22,r2
8111aa24:	1a87383a 	mul	r3,r3,r10
8111aa28:	128a383a 	mulxuu	r5,r2,r10
8111aa2c:	1285383a 	mul	r2,r2,r10
8111aa30:	800fd7fa 	srai	r7,r16,31
8111aa34:	1987883a 	add	r3,r3,r6
8111aa38:	8085883a 	add	r2,r16,r2
8111aa3c:	1947883a 	add	r3,r3,r5
8111aa40:	38c7883a 	add	r3,r7,r3
8111aa44:	1421803a 	cmpltu	r16,r2,r16
8111aa48:	80c7883a 	add	r3,r16,r3
8111aa4c:	01c00044 	movi	r7,1
8111aa50:	003fd106 	br	8111a998 <__reset+0xfb0fa998>
8111aa54:	01400dc4 	movi	r5,55
8111aa58:	003fd906 	br	8111a9c0 <__reset+0xfb0fa9c0>
8111aa5c:	1a3ff01e 	bne	r3,r8,8111aa20 <__reset+0xfb0faa20>
8111aa60:	6c3fcc16 	blt	r13,r16,8111a994 <__reset+0xfb0fa994>
8111aa64:	003fee06 	br	8111aa20 <__reset+0xfb0faa20>
8111aa68:	00800884 	movi	r2,34
8111aa6c:	a8800015 	stw	r2,0(r21)
8111aa70:	00bfffc4 	movi	r2,-1
8111aa74:	1007883a 	mov	r3,r2
8111aa78:	a03fdc26 	beq	r20,zero,8111a9ec <__reset+0xfb0fa9ec>
8111aa7c:	24ffffc4 	addi	r19,r4,-1
8111aa80:	003fd906 	br	8111a9e8 <__reset+0xfb0fa9e8>
8111aa84:	27000084 	addi	fp,r4,2
8111aa88:	24000043 	ldbu	r16,1(r4)
8111aa8c:	05c00044 	movi	r23,1
8111aa90:	003f9106 	br	8111a8d8 <__reset+0xfb0fa8d8>
8111aa94:	27000084 	addi	fp,r4,2
8111aa98:	24000043 	ldbu	r16,1(r4)
8111aa9c:	002f883a 	mov	r23,zero
8111aaa0:	003f8d06 	br	8111a8d8 <__reset+0xfb0fa8d8>
8111aaa4:	e0800003 	ldbu	r2,0(fp)
8111aaa8:	00c01604 	movi	r3,88
8111aaac:	108037cc 	andi	r2,r2,223
8111aab0:	10c00e26 	beq	r2,r3,8111aaec <_strtoull_r+0x294>
8111aab4:	02800204 	movi	r10,8
8111aab8:	02ffffc4 	movi	r11,-1
8111aabc:	02080034 	movhi	r8,8192
8111aac0:	034001c4 	movi	r13,7
8111aac4:	42d1883a 	add	r8,r8,r11
8111aac8:	002d883a 	mov	r22,zero
8111aacc:	5025883a 	mov	r18,r10
8111aad0:	003fa006 	br	8111a954 <__reset+0xfb0fa954>
8111aad4:	00800c04 	movi	r2,48
8111aad8:	80800e1e 	bne	r16,r2,8111ab14 <_strtoull_r+0x2bc>
8111aadc:	e0800003 	ldbu	r2,0(fp)
8111aae0:	00c01604 	movi	r3,88
8111aae4:	108037cc 	andi	r2,r2,223
8111aae8:	10c00a1e 	bne	r2,r3,8111ab14 <_strtoull_r+0x2bc>
8111aaec:	02800404 	movi	r10,16
8111aaf0:	02ffffc4 	movi	r11,-1
8111aaf4:	02040034 	movhi	r8,4096
8111aaf8:	e4000043 	ldbu	r16,1(fp)
8111aafc:	034003c4 	movi	r13,15
8111ab00:	e7000084 	addi	fp,fp,2
8111ab04:	42d1883a 	add	r8,r8,r11
8111ab08:	002d883a 	mov	r22,zero
8111ab0c:	5025883a 	mov	r18,r10
8111ab10:	003f9006 	br	8111a954 <__reset+0xfb0fa954>
8111ab14:	02ffffc4 	movi	r11,-1
8111ab18:	02040034 	movhi	r8,4096
8111ab1c:	034003c4 	movi	r13,15
8111ab20:	42d1883a 	add	r8,r8,r11
8111ab24:	9015883a 	mov	r10,r18
8111ab28:	002d883a 	mov	r22,zero
8111ab2c:	003f8906 	br	8111a954 <__reset+0xfb0fa954>

8111ab30 <__ssprint_r>:
8111ab30:	30800217 	ldw	r2,8(r6)
8111ab34:	defff604 	addi	sp,sp,-40
8111ab38:	dc800215 	stw	r18,8(sp)
8111ab3c:	dfc00915 	stw	ra,36(sp)
8111ab40:	df000815 	stw	fp,32(sp)
8111ab44:	ddc00715 	stw	r23,28(sp)
8111ab48:	dd800615 	stw	r22,24(sp)
8111ab4c:	dd400515 	stw	r21,20(sp)
8111ab50:	dd000415 	stw	r20,16(sp)
8111ab54:	dcc00315 	stw	r19,12(sp)
8111ab58:	dc400115 	stw	r17,4(sp)
8111ab5c:	dc000015 	stw	r16,0(sp)
8111ab60:	3025883a 	mov	r18,r6
8111ab64:	10005826 	beq	r2,zero,8111acc8 <__ssprint_r+0x198>
8111ab68:	2027883a 	mov	r19,r4
8111ab6c:	35c00017 	ldw	r23,0(r6)
8111ab70:	29000017 	ldw	r4,0(r5)
8111ab74:	28800217 	ldw	r2,8(r5)
8111ab78:	2823883a 	mov	r17,r5
8111ab7c:	0039883a 	mov	fp,zero
8111ab80:	0021883a 	mov	r16,zero
8111ab84:	80003926 	beq	r16,zero,8111ac6c <__ssprint_r+0x13c>
8111ab88:	102b883a 	mov	r21,r2
8111ab8c:	102d883a 	mov	r22,r2
8111ab90:	80803a36 	bltu	r16,r2,8111ac7c <__ssprint_r+0x14c>
8111ab94:	88c0030b 	ldhu	r3,12(r17)
8111ab98:	1881200c 	andi	r2,r3,1152
8111ab9c:	10002626 	beq	r2,zero,8111ac38 <__ssprint_r+0x108>
8111aba0:	88800517 	ldw	r2,20(r17)
8111aba4:	89400417 	ldw	r5,16(r17)
8111aba8:	81800044 	addi	r6,r16,1
8111abac:	108f883a 	add	r7,r2,r2
8111abb0:	3885883a 	add	r2,r7,r2
8111abb4:	100ed7fa 	srli	r7,r2,31
8111abb8:	216dc83a 	sub	r22,r4,r5
8111abbc:	3589883a 	add	r4,r6,r22
8111abc0:	3885883a 	add	r2,r7,r2
8111abc4:	102bd07a 	srai	r21,r2,1
8111abc8:	a80d883a 	mov	r6,r21
8111abcc:	a900022e 	bgeu	r21,r4,8111abd8 <__ssprint_r+0xa8>
8111abd0:	202b883a 	mov	r21,r4
8111abd4:	200d883a 	mov	r6,r4
8111abd8:	18c1000c 	andi	r3,r3,1024
8111abdc:	18002a26 	beq	r3,zero,8111ac88 <__ssprint_r+0x158>
8111abe0:	300b883a 	mov	r5,r6
8111abe4:	9809883a 	mov	r4,r19
8111abe8:	110cc740 	call	8110cc74 <_malloc_r>
8111abec:	1029883a 	mov	r20,r2
8111abf0:	10002c26 	beq	r2,zero,8111aca4 <__ssprint_r+0x174>
8111abf4:	89400417 	ldw	r5,16(r17)
8111abf8:	b00d883a 	mov	r6,r22
8111abfc:	1009883a 	mov	r4,r2
8111ac00:	110d4800 	call	8110d480 <memcpy>
8111ac04:	8880030b 	ldhu	r2,12(r17)
8111ac08:	00fedfc4 	movi	r3,-1153
8111ac0c:	10c4703a 	and	r2,r2,r3
8111ac10:	10802014 	ori	r2,r2,128
8111ac14:	8880030d 	sth	r2,12(r17)
8111ac18:	a589883a 	add	r4,r20,r22
8111ac1c:	adadc83a 	sub	r22,r21,r22
8111ac20:	8d400515 	stw	r21,20(r17)
8111ac24:	8d800215 	stw	r22,8(r17)
8111ac28:	8d000415 	stw	r20,16(r17)
8111ac2c:	89000015 	stw	r4,0(r17)
8111ac30:	802b883a 	mov	r21,r16
8111ac34:	802d883a 	mov	r22,r16
8111ac38:	b00d883a 	mov	r6,r22
8111ac3c:	e00b883a 	mov	r5,fp
8111ac40:	11170f00 	call	811170f0 <memmove>
8111ac44:	88800217 	ldw	r2,8(r17)
8111ac48:	89000017 	ldw	r4,0(r17)
8111ac4c:	90c00217 	ldw	r3,8(r18)
8111ac50:	1545c83a 	sub	r2,r2,r21
8111ac54:	2589883a 	add	r4,r4,r22
8111ac58:	88800215 	stw	r2,8(r17)
8111ac5c:	89000015 	stw	r4,0(r17)
8111ac60:	1c21c83a 	sub	r16,r3,r16
8111ac64:	94000215 	stw	r16,8(r18)
8111ac68:	80001726 	beq	r16,zero,8111acc8 <__ssprint_r+0x198>
8111ac6c:	bf000017 	ldw	fp,0(r23)
8111ac70:	bc000117 	ldw	r16,4(r23)
8111ac74:	bdc00204 	addi	r23,r23,8
8111ac78:	003fc206 	br	8111ab84 <__reset+0xfb0fab84>
8111ac7c:	802b883a 	mov	r21,r16
8111ac80:	802d883a 	mov	r22,r16
8111ac84:	003fec06 	br	8111ac38 <__reset+0xfb0fac38>
8111ac88:	9809883a 	mov	r4,r19
8111ac8c:	11184100 	call	81118410 <_realloc_r>
8111ac90:	1029883a 	mov	r20,r2
8111ac94:	103fe01e 	bne	r2,zero,8111ac18 <__reset+0xfb0fac18>
8111ac98:	89400417 	ldw	r5,16(r17)
8111ac9c:	9809883a 	mov	r4,r19
8111aca0:	11162d40 	call	811162d4 <_free_r>
8111aca4:	88c0030b 	ldhu	r3,12(r17)
8111aca8:	00800304 	movi	r2,12
8111acac:	98800015 	stw	r2,0(r19)
8111acb0:	18c01014 	ori	r3,r3,64
8111acb4:	88c0030d 	sth	r3,12(r17)
8111acb8:	00bfffc4 	movi	r2,-1
8111acbc:	90000215 	stw	zero,8(r18)
8111acc0:	90000115 	stw	zero,4(r18)
8111acc4:	00000206 	br	8111acd0 <__ssprint_r+0x1a0>
8111acc8:	90000115 	stw	zero,4(r18)
8111accc:	0005883a 	mov	r2,zero
8111acd0:	dfc00917 	ldw	ra,36(sp)
8111acd4:	df000817 	ldw	fp,32(sp)
8111acd8:	ddc00717 	ldw	r23,28(sp)
8111acdc:	dd800617 	ldw	r22,24(sp)
8111ace0:	dd400517 	ldw	r21,20(sp)
8111ace4:	dd000417 	ldw	r20,16(sp)
8111ace8:	dcc00317 	ldw	r19,12(sp)
8111acec:	dc800217 	ldw	r18,8(sp)
8111acf0:	dc400117 	ldw	r17,4(sp)
8111acf4:	dc000017 	ldw	r16,0(sp)
8111acf8:	dec00a04 	addi	sp,sp,40
8111acfc:	f800283a 	ret

8111ad00 <___svfiprintf_internal_r>:
8111ad00:	2880030b 	ldhu	r2,12(r5)
8111ad04:	deffc804 	addi	sp,sp,-224
8111ad08:	dcc03115 	stw	r19,196(sp)
8111ad0c:	dfc03715 	stw	ra,220(sp)
8111ad10:	df003615 	stw	fp,216(sp)
8111ad14:	ddc03515 	stw	r23,212(sp)
8111ad18:	dd803415 	stw	r22,208(sp)
8111ad1c:	dd403315 	stw	r21,204(sp)
8111ad20:	dd003215 	stw	r20,200(sp)
8111ad24:	dc803015 	stw	r18,192(sp)
8111ad28:	dc402f15 	stw	r17,188(sp)
8111ad2c:	dc002e15 	stw	r16,184(sp)
8111ad30:	d9402715 	stw	r5,156(sp)
8111ad34:	d9002a15 	stw	r4,168(sp)
8111ad38:	1080200c 	andi	r2,r2,128
8111ad3c:	d9c02315 	stw	r7,140(sp)
8111ad40:	3027883a 	mov	r19,r6
8111ad44:	10000226 	beq	r2,zero,8111ad50 <___svfiprintf_internal_r+0x50>
8111ad48:	28800417 	ldw	r2,16(r5)
8111ad4c:	10041d26 	beq	r2,zero,8111bdc4 <___svfiprintf_internal_r+0x10c4>
8111ad50:	dac01a04 	addi	r11,sp,104
8111ad54:	dac01e15 	stw	r11,120(sp)
8111ad58:	d8801e17 	ldw	r2,120(sp)
8111ad5c:	dac019c4 	addi	r11,sp,103
8111ad60:	dd402a17 	ldw	r21,168(sp)
8111ad64:	ddc02717 	ldw	r23,156(sp)
8111ad68:	05a044f4 	movhi	r22,33043
8111ad6c:	052044f4 	movhi	r20,33043
8111ad70:	dac01f15 	stw	r11,124(sp)
8111ad74:	12d7c83a 	sub	r11,r2,r11
8111ad78:	b59df004 	addi	r22,r22,30656
8111ad7c:	a51dec04 	addi	r20,r20,30640
8111ad80:	dec01a15 	stw	sp,104(sp)
8111ad84:	d8001c15 	stw	zero,112(sp)
8111ad88:	d8001b15 	stw	zero,108(sp)
8111ad8c:	d811883a 	mov	r8,sp
8111ad90:	d8002915 	stw	zero,164(sp)
8111ad94:	d8002515 	stw	zero,148(sp)
8111ad98:	dac02b15 	stw	r11,172(sp)
8111ad9c:	98800007 	ldb	r2,0(r19)
8111ada0:	1002dd26 	beq	r2,zero,8111b918 <___svfiprintf_internal_r+0xc18>
8111ada4:	00c00944 	movi	r3,37
8111ada8:	9823883a 	mov	r17,r19
8111adac:	10c0021e 	bne	r2,r3,8111adb8 <___svfiprintf_internal_r+0xb8>
8111adb0:	00001406 	br	8111ae04 <___svfiprintf_internal_r+0x104>
8111adb4:	10c00326 	beq	r2,r3,8111adc4 <___svfiprintf_internal_r+0xc4>
8111adb8:	8c400044 	addi	r17,r17,1
8111adbc:	88800007 	ldb	r2,0(r17)
8111adc0:	103ffc1e 	bne	r2,zero,8111adb4 <__reset+0xfb0fadb4>
8111adc4:	8ce1c83a 	sub	r16,r17,r19
8111adc8:	80000e26 	beq	r16,zero,8111ae04 <___svfiprintf_internal_r+0x104>
8111adcc:	d8c01c17 	ldw	r3,112(sp)
8111add0:	d8801b17 	ldw	r2,108(sp)
8111add4:	44c00015 	stw	r19,0(r8)
8111add8:	1c07883a 	add	r3,r3,r16
8111addc:	10800044 	addi	r2,r2,1
8111ade0:	d8c01c15 	stw	r3,112(sp)
8111ade4:	44000115 	stw	r16,4(r8)
8111ade8:	d8801b15 	stw	r2,108(sp)
8111adec:	00c001c4 	movi	r3,7
8111adf0:	18831e16 	blt	r3,r2,8111ba6c <___svfiprintf_internal_r+0xd6c>
8111adf4:	42000204 	addi	r8,r8,8
8111adf8:	dac02517 	ldw	r11,148(sp)
8111adfc:	5c17883a 	add	r11,r11,r16
8111ae00:	dac02515 	stw	r11,148(sp)
8111ae04:	88800007 	ldb	r2,0(r17)
8111ae08:	1002c526 	beq	r2,zero,8111b920 <___svfiprintf_internal_r+0xc20>
8111ae0c:	88c00047 	ldb	r3,1(r17)
8111ae10:	8cc00044 	addi	r19,r17,1
8111ae14:	d8001d85 	stb	zero,118(sp)
8111ae18:	0009883a 	mov	r4,zero
8111ae1c:	000f883a 	mov	r7,zero
8111ae20:	043fffc4 	movi	r16,-1
8111ae24:	d8002415 	stw	zero,144(sp)
8111ae28:	0025883a 	mov	r18,zero
8111ae2c:	01401604 	movi	r5,88
8111ae30:	01800244 	movi	r6,9
8111ae34:	02800a84 	movi	r10,42
8111ae38:	02401b04 	movi	r9,108
8111ae3c:	9cc00044 	addi	r19,r19,1
8111ae40:	18bff804 	addi	r2,r3,-32
8111ae44:	2881dd36 	bltu	r5,r2,8111b5bc <___svfiprintf_internal_r+0x8bc>
8111ae48:	100490ba 	slli	r2,r2,2
8111ae4c:	02e044b4 	movhi	r11,33042
8111ae50:	5aeb9804 	addi	r11,r11,-20896
8111ae54:	12c5883a 	add	r2,r2,r11
8111ae58:	10800017 	ldw	r2,0(r2)
8111ae5c:	1000683a 	jmp	r2
8111ae60:	8111b05c 	xori	r4,r16,18113
8111ae64:	8111b5bc 	xorhi	r4,r16,18134
8111ae68:	8111b5bc 	xorhi	r4,r16,18134
8111ae6c:	8111b050 	cmplti	r4,r16,18113
8111ae70:	8111b5bc 	xorhi	r4,r16,18134
8111ae74:	8111b5bc 	xorhi	r4,r16,18134
8111ae78:	8111b5bc 	xorhi	r4,r16,18134
8111ae7c:	8111b5bc 	xorhi	r4,r16,18134
8111ae80:	8111b5bc 	xorhi	r4,r16,18134
8111ae84:	8111b5bc 	xorhi	r4,r16,18134
8111ae88:	8111afc4 	addi	r4,r16,18111
8111ae8c:	8111b1a0 	cmpeqi	r4,r16,18118
8111ae90:	8111b5bc 	xorhi	r4,r16,18134
8111ae94:	8111aff0 	cmpltui	r4,r16,18111
8111ae98:	8111b5f0 	cmpltui	r4,r16,18135
8111ae9c:	8111b5bc 	xorhi	r4,r16,18134
8111aea0:	8111b5e4 	muli	r4,r16,18135
8111aea4:	8111b584 	addi	r4,r16,18134
8111aea8:	8111b584 	addi	r4,r16,18134
8111aeac:	8111b584 	addi	r4,r16,18134
8111aeb0:	8111b584 	addi	r4,r16,18134
8111aeb4:	8111b584 	addi	r4,r16,18134
8111aeb8:	8111b584 	addi	r4,r16,18134
8111aebc:	8111b584 	addi	r4,r16,18134
8111aec0:	8111b584 	addi	r4,r16,18134
8111aec4:	8111b584 	addi	r4,r16,18134
8111aec8:	8111b5bc 	xorhi	r4,r16,18134
8111aecc:	8111b5bc 	xorhi	r4,r16,18134
8111aed0:	8111b5bc 	xorhi	r4,r16,18134
8111aed4:	8111b5bc 	xorhi	r4,r16,18134
8111aed8:	8111b5bc 	xorhi	r4,r16,18134
8111aedc:	8111b5bc 	xorhi	r4,r16,18134
8111aee0:	8111b5bc 	xorhi	r4,r16,18134
8111aee4:	8111b5bc 	xorhi	r4,r16,18134
8111aee8:	8111b5bc 	xorhi	r4,r16,18134
8111aeec:	8111b5bc 	xorhi	r4,r16,18134
8111aef0:	8111b520 	cmpeqi	r4,r16,18132
8111aef4:	8111b5bc 	xorhi	r4,r16,18134
8111aef8:	8111b5bc 	xorhi	r4,r16,18134
8111aefc:	8111b5bc 	xorhi	r4,r16,18134
8111af00:	8111b5bc 	xorhi	r4,r16,18134
8111af04:	8111b5bc 	xorhi	r4,r16,18134
8111af08:	8111b5bc 	xorhi	r4,r16,18134
8111af0c:	8111b5bc 	xorhi	r4,r16,18134
8111af10:	8111b5bc 	xorhi	r4,r16,18134
8111af14:	8111b5bc 	xorhi	r4,r16,18134
8111af18:	8111b5bc 	xorhi	r4,r16,18134
8111af1c:	8111b698 	cmpnei	r4,r16,18138
8111af20:	8111b5bc 	xorhi	r4,r16,18134
8111af24:	8111b5bc 	xorhi	r4,r16,18134
8111af28:	8111b5bc 	xorhi	r4,r16,18134
8111af2c:	8111b5bc 	xorhi	r4,r16,18134
8111af30:	8111b5bc 	xorhi	r4,r16,18134
8111af34:	8111b630 	cmpltui	r4,r16,18136
8111af38:	8111b5bc 	xorhi	r4,r16,18134
8111af3c:	8111b5bc 	xorhi	r4,r16,18134
8111af40:	8111b364 	muli	r4,r16,18125
8111af44:	8111b5bc 	xorhi	r4,r16,18134
8111af48:	8111b5bc 	xorhi	r4,r16,18134
8111af4c:	8111b5bc 	xorhi	r4,r16,18134
8111af50:	8111b5bc 	xorhi	r4,r16,18134
8111af54:	8111b5bc 	xorhi	r4,r16,18134
8111af58:	8111b5bc 	xorhi	r4,r16,18134
8111af5c:	8111b5bc 	xorhi	r4,r16,18134
8111af60:	8111b5bc 	xorhi	r4,r16,18134
8111af64:	8111b5bc 	xorhi	r4,r16,18134
8111af68:	8111b5bc 	xorhi	r4,r16,18134
8111af6c:	8111b254 	ori	r4,r16,18121
8111af70:	8111b400 	call	88111b40 <__reset+0x20f1b40>
8111af74:	8111b5bc 	xorhi	r4,r16,18134
8111af78:	8111b5bc 	xorhi	r4,r16,18134
8111af7c:	8111b5bc 	xorhi	r4,r16,18134
8111af80:	8111b3f4 	orhi	r4,r16,18127
8111af84:	8111b400 	call	88111b40 <__reset+0x20f1b40>
8111af88:	8111b5bc 	xorhi	r4,r16,18134
8111af8c:	8111b5bc 	xorhi	r4,r16,18134
8111af90:	8111b3e4 	muli	r4,r16,18127
8111af94:	8111b5bc 	xorhi	r4,r16,18134
8111af98:	8111b3a8 	cmpgeui	r4,r16,18126
8111af9c:	8111b1b0 	cmpltui	r4,r16,18118
8111afa0:	8111affc 	xorhi	r4,r16,18111
8111afa4:	8111b514 	ori	r4,r16,18132
8111afa8:	8111b5bc 	xorhi	r4,r16,18134
8111afac:	8111b4c8 	cmpgei	r4,r16,18131
8111afb0:	8111b5bc 	xorhi	r4,r16,18134
8111afb4:	8111b120 	cmpeqi	r4,r16,18116
8111afb8:	8111b5bc 	xorhi	r4,r16,18134
8111afbc:	8111b5bc 	xorhi	r4,r16,18134
8111afc0:	8111b07c 	xorhi	r4,r16,18113
8111afc4:	dac02317 	ldw	r11,140(sp)
8111afc8:	5ac00017 	ldw	r11,0(r11)
8111afcc:	dac02415 	stw	r11,144(sp)
8111afd0:	dac02317 	ldw	r11,140(sp)
8111afd4:	58800104 	addi	r2,r11,4
8111afd8:	dac02417 	ldw	r11,144(sp)
8111afdc:	5802e90e 	bge	r11,zero,8111bb84 <___svfiprintf_internal_r+0xe84>
8111afe0:	dac02417 	ldw	r11,144(sp)
8111afe4:	d8802315 	stw	r2,140(sp)
8111afe8:	02d7c83a 	sub	r11,zero,r11
8111afec:	dac02415 	stw	r11,144(sp)
8111aff0:	94800114 	ori	r18,r18,4
8111aff4:	98c00007 	ldb	r3,0(r19)
8111aff8:	003f9006 	br	8111ae3c <__reset+0xfb0fae3c>
8111affc:	00800c04 	movi	r2,48
8111b000:	dac02317 	ldw	r11,140(sp)
8111b004:	d8801d05 	stb	r2,116(sp)
8111b008:	00801e04 	movi	r2,120
8111b00c:	d8801d45 	stb	r2,117(sp)
8111b010:	d8001d85 	stb	zero,118(sp)
8111b014:	58c00104 	addi	r3,r11,4
8111b018:	5f000017 	ldw	fp,0(r11)
8111b01c:	0013883a 	mov	r9,zero
8111b020:	90800094 	ori	r2,r18,2
8111b024:	80032b16 	blt	r16,zero,8111bcd4 <___svfiprintf_internal_r+0xfd4>
8111b028:	00bfdfc4 	movi	r2,-129
8111b02c:	90a4703a 	and	r18,r18,r2
8111b030:	d8c02315 	stw	r3,140(sp)
8111b034:	94800094 	ori	r18,r18,2
8111b038:	e002dc26 	beq	fp,zero,8111bbac <___svfiprintf_internal_r+0xeac>
8111b03c:	012044f4 	movhi	r4,33043
8111b040:	211d6204 	addi	r4,r4,30088
8111b044:	0015883a 	mov	r10,zero
8111b048:	d9002915 	stw	r4,164(sp)
8111b04c:	00002306 	br	8111b0dc <___svfiprintf_internal_r+0x3dc>
8111b050:	94800054 	ori	r18,r18,1
8111b054:	98c00007 	ldb	r3,0(r19)
8111b058:	003f7806 	br	8111ae3c <__reset+0xfb0fae3c>
8111b05c:	38803fcc 	andi	r2,r7,255
8111b060:	1080201c 	xori	r2,r2,128
8111b064:	10bfe004 	addi	r2,r2,-128
8111b068:	1002f31e 	bne	r2,zero,8111bc38 <___svfiprintf_internal_r+0xf38>
8111b06c:	01000044 	movi	r4,1
8111b070:	01c00804 	movi	r7,32
8111b074:	98c00007 	ldb	r3,0(r19)
8111b078:	003f7006 	br	8111ae3c <__reset+0xfb0fae3c>
8111b07c:	21003fcc 	andi	r4,r4,255
8111b080:	2003aa1e 	bne	r4,zero,8111bf2c <___svfiprintf_internal_r+0x122c>
8111b084:	00a044f4 	movhi	r2,33043
8111b088:	109d6204 	addi	r2,r2,30088
8111b08c:	d8802915 	stw	r2,164(sp)
8111b090:	9080080c 	andi	r2,r18,32
8111b094:	1000ba26 	beq	r2,zero,8111b380 <___svfiprintf_internal_r+0x680>
8111b098:	dac02317 	ldw	r11,140(sp)
8111b09c:	5f000017 	ldw	fp,0(r11)
8111b0a0:	5a400117 	ldw	r9,4(r11)
8111b0a4:	5ac00204 	addi	r11,r11,8
8111b0a8:	dac02315 	stw	r11,140(sp)
8111b0ac:	9080004c 	andi	r2,r18,1
8111b0b0:	10029026 	beq	r2,zero,8111baf4 <___svfiprintf_internal_r+0xdf4>
8111b0b4:	e244b03a 	or	r2,fp,r9
8111b0b8:	1002d41e 	bne	r2,zero,8111bc0c <___svfiprintf_internal_r+0xf0c>
8111b0bc:	d8001d85 	stb	zero,118(sp)
8111b0c0:	80030b16 	blt	r16,zero,8111bcf0 <___svfiprintf_internal_r+0xff0>
8111b0c4:	00bfdfc4 	movi	r2,-129
8111b0c8:	90a4703a 	and	r18,r18,r2
8111b0cc:	0015883a 	mov	r10,zero
8111b0d0:	80002426 	beq	r16,zero,8111b164 <___svfiprintf_internal_r+0x464>
8111b0d4:	0039883a 	mov	fp,zero
8111b0d8:	0013883a 	mov	r9,zero
8111b0dc:	d9002917 	ldw	r4,164(sp)
8111b0e0:	dc401a04 	addi	r17,sp,104
8111b0e4:	e08003cc 	andi	r2,fp,15
8111b0e8:	4806973a 	slli	r3,r9,28
8111b0ec:	2085883a 	add	r2,r4,r2
8111b0f0:	e038d13a 	srli	fp,fp,4
8111b0f4:	10800003 	ldbu	r2,0(r2)
8111b0f8:	4812d13a 	srli	r9,r9,4
8111b0fc:	8c7fffc4 	addi	r17,r17,-1
8111b100:	1f38b03a 	or	fp,r3,fp
8111b104:	88800005 	stb	r2,0(r17)
8111b108:	e244b03a 	or	r2,fp,r9
8111b10c:	103ff51e 	bne	r2,zero,8111b0e4 <__reset+0xfb0fb0e4>
8111b110:	dac01e17 	ldw	r11,120(sp)
8111b114:	5c57c83a 	sub	r11,r11,r17
8111b118:	dac02115 	stw	r11,132(sp)
8111b11c:	00001406 	br	8111b170 <___svfiprintf_internal_r+0x470>
8111b120:	21003fcc 	andi	r4,r4,255
8111b124:	2003741e 	bne	r4,zero,8111bef8 <___svfiprintf_internal_r+0x11f8>
8111b128:	9080080c 	andi	r2,r18,32
8111b12c:	10014526 	beq	r2,zero,8111b644 <___svfiprintf_internal_r+0x944>
8111b130:	dac02317 	ldw	r11,140(sp)
8111b134:	d8001d85 	stb	zero,118(sp)
8111b138:	58c00204 	addi	r3,r11,8
8111b13c:	5f000017 	ldw	fp,0(r11)
8111b140:	5a400117 	ldw	r9,4(r11)
8111b144:	8002d916 	blt	r16,zero,8111bcac <___svfiprintf_internal_r+0xfac>
8111b148:	013fdfc4 	movi	r4,-129
8111b14c:	e244b03a 	or	r2,fp,r9
8111b150:	d8c02315 	stw	r3,140(sp)
8111b154:	9124703a 	and	r18,r18,r4
8111b158:	0015883a 	mov	r10,zero
8111b15c:	1000b91e 	bne	r2,zero,8111b444 <___svfiprintf_internal_r+0x744>
8111b160:	8002e61e 	bne	r16,zero,8111bcfc <___svfiprintf_internal_r+0xffc>
8111b164:	0021883a 	mov	r16,zero
8111b168:	d8002115 	stw	zero,132(sp)
8111b16c:	dc401a04 	addi	r17,sp,104
8111b170:	d8c02117 	ldw	r3,132(sp)
8111b174:	dc002015 	stw	r16,128(sp)
8111b178:	80c0010e 	bge	r16,r3,8111b180 <___svfiprintf_internal_r+0x480>
8111b17c:	d8c02015 	stw	r3,128(sp)
8111b180:	52803fcc 	andi	r10,r10,255
8111b184:	5280201c 	xori	r10,r10,128
8111b188:	52bfe004 	addi	r10,r10,-128
8111b18c:	50003c26 	beq	r10,zero,8111b280 <___svfiprintf_internal_r+0x580>
8111b190:	dac02017 	ldw	r11,128(sp)
8111b194:	5ac00044 	addi	r11,r11,1
8111b198:	dac02015 	stw	r11,128(sp)
8111b19c:	00003806 	br	8111b280 <___svfiprintf_internal_r+0x580>
8111b1a0:	01000044 	movi	r4,1
8111b1a4:	01c00ac4 	movi	r7,43
8111b1a8:	98c00007 	ldb	r3,0(r19)
8111b1ac:	003f2306 	br	8111ae3c <__reset+0xfb0fae3c>
8111b1b0:	21003fcc 	andi	r4,r4,255
8111b1b4:	2003481e 	bne	r4,zero,8111bed8 <___svfiprintf_internal_r+0x11d8>
8111b1b8:	9080080c 	andi	r2,r18,32
8111b1bc:	10013b26 	beq	r2,zero,8111b6ac <___svfiprintf_internal_r+0x9ac>
8111b1c0:	dac02317 	ldw	r11,140(sp)
8111b1c4:	d8001d85 	stb	zero,118(sp)
8111b1c8:	58800204 	addi	r2,r11,8
8111b1cc:	5f000017 	ldw	fp,0(r11)
8111b1d0:	5a400117 	ldw	r9,4(r11)
8111b1d4:	8002a816 	blt	r16,zero,8111bc78 <___svfiprintf_internal_r+0xf78>
8111b1d8:	013fdfc4 	movi	r4,-129
8111b1dc:	e246b03a 	or	r3,fp,r9
8111b1e0:	d8802315 	stw	r2,140(sp)
8111b1e4:	9124703a 	and	r18,r18,r4
8111b1e8:	18013c26 	beq	r3,zero,8111b6dc <___svfiprintf_internal_r+0x9dc>
8111b1ec:	0015883a 	mov	r10,zero
8111b1f0:	dc401a04 	addi	r17,sp,104
8111b1f4:	e006d0fa 	srli	r3,fp,3
8111b1f8:	4808977a 	slli	r4,r9,29
8111b1fc:	4812d0fa 	srli	r9,r9,3
8111b200:	e70001cc 	andi	fp,fp,7
8111b204:	e0800c04 	addi	r2,fp,48
8111b208:	8c7fffc4 	addi	r17,r17,-1
8111b20c:	20f8b03a 	or	fp,r4,r3
8111b210:	88800005 	stb	r2,0(r17)
8111b214:	e246b03a 	or	r3,fp,r9
8111b218:	183ff61e 	bne	r3,zero,8111b1f4 <__reset+0xfb0fb1f4>
8111b21c:	90c0004c 	andi	r3,r18,1
8111b220:	1800a526 	beq	r3,zero,8111b4b8 <___svfiprintf_internal_r+0x7b8>
8111b224:	10803fcc 	andi	r2,r2,255
8111b228:	1080201c 	xori	r2,r2,128
8111b22c:	10bfe004 	addi	r2,r2,-128
8111b230:	00c00c04 	movi	r3,48
8111b234:	10ffb626 	beq	r2,r3,8111b110 <__reset+0xfb0fb110>
8111b238:	88ffffc5 	stb	r3,-1(r17)
8111b23c:	d8c01e17 	ldw	r3,120(sp)
8111b240:	88bfffc4 	addi	r2,r17,-1
8111b244:	1023883a 	mov	r17,r2
8111b248:	1887c83a 	sub	r3,r3,r2
8111b24c:	d8c02115 	stw	r3,132(sp)
8111b250:	003fc706 	br	8111b170 <__reset+0xfb0fb170>
8111b254:	dac02317 	ldw	r11,140(sp)
8111b258:	00c00044 	movi	r3,1
8111b25c:	d8c02015 	stw	r3,128(sp)
8111b260:	58800017 	ldw	r2,0(r11)
8111b264:	5ac00104 	addi	r11,r11,4
8111b268:	d8001d85 	stb	zero,118(sp)
8111b26c:	d8801005 	stb	r2,64(sp)
8111b270:	dac02315 	stw	r11,140(sp)
8111b274:	d8c02115 	stw	r3,132(sp)
8111b278:	dc401004 	addi	r17,sp,64
8111b27c:	0021883a 	mov	r16,zero
8111b280:	90c0008c 	andi	r3,r18,2
8111b284:	d8c02215 	stw	r3,136(sp)
8111b288:	18000326 	beq	r3,zero,8111b298 <___svfiprintf_internal_r+0x598>
8111b28c:	dac02017 	ldw	r11,128(sp)
8111b290:	5ac00084 	addi	r11,r11,2
8111b294:	dac02015 	stw	r11,128(sp)
8111b298:	90c0210c 	andi	r3,r18,132
8111b29c:	d8c02615 	stw	r3,152(sp)
8111b2a0:	1801131e 	bne	r3,zero,8111b6f0 <___svfiprintf_internal_r+0x9f0>
8111b2a4:	dac02417 	ldw	r11,144(sp)
8111b2a8:	d8c02017 	ldw	r3,128(sp)
8111b2ac:	58f9c83a 	sub	fp,r11,r3
8111b2b0:	07010f0e 	bge	zero,fp,8111b6f0 <___svfiprintf_internal_r+0x9f0>
8111b2b4:	02400404 	movi	r9,16
8111b2b8:	d8c01c17 	ldw	r3,112(sp)
8111b2bc:	d8801b17 	ldw	r2,108(sp)
8111b2c0:	4f02d60e 	bge	r9,fp,8111be1c <___svfiprintf_internal_r+0x111c>
8111b2c4:	016044f4 	movhi	r5,33043
8111b2c8:	295df004 	addi	r5,r5,30656
8111b2cc:	d9402815 	stw	r5,160(sp)
8111b2d0:	028001c4 	movi	r10,7
8111b2d4:	00000306 	br	8111b2e4 <___svfiprintf_internal_r+0x5e4>
8111b2d8:	e73ffc04 	addi	fp,fp,-16
8111b2dc:	42000204 	addi	r8,r8,8
8111b2e0:	4f00150e 	bge	r9,fp,8111b338 <___svfiprintf_internal_r+0x638>
8111b2e4:	18c00404 	addi	r3,r3,16
8111b2e8:	10800044 	addi	r2,r2,1
8111b2ec:	45800015 	stw	r22,0(r8)
8111b2f0:	42400115 	stw	r9,4(r8)
8111b2f4:	d8c01c15 	stw	r3,112(sp)
8111b2f8:	d8801b15 	stw	r2,108(sp)
8111b2fc:	50bff60e 	bge	r10,r2,8111b2d8 <__reset+0xfb0fb2d8>
8111b300:	d9801a04 	addi	r6,sp,104
8111b304:	b80b883a 	mov	r5,r23
8111b308:	a809883a 	mov	r4,r21
8111b30c:	da402c15 	stw	r9,176(sp)
8111b310:	da802d15 	stw	r10,180(sp)
8111b314:	111ab300 	call	8111ab30 <__ssprint_r>
8111b318:	da402c17 	ldw	r9,176(sp)
8111b31c:	da802d17 	ldw	r10,180(sp)
8111b320:	1001851e 	bne	r2,zero,8111b938 <___svfiprintf_internal_r+0xc38>
8111b324:	e73ffc04 	addi	fp,fp,-16
8111b328:	d8c01c17 	ldw	r3,112(sp)
8111b32c:	d8801b17 	ldw	r2,108(sp)
8111b330:	d811883a 	mov	r8,sp
8111b334:	4f3feb16 	blt	r9,fp,8111b2e4 <__reset+0xfb0fb2e4>
8111b338:	dac02817 	ldw	r11,160(sp)
8111b33c:	e0c7883a 	add	r3,fp,r3
8111b340:	10800044 	addi	r2,r2,1
8111b344:	42c00015 	stw	r11,0(r8)
8111b348:	47000115 	stw	fp,4(r8)
8111b34c:	d8c01c15 	stw	r3,112(sp)
8111b350:	d8801b15 	stw	r2,108(sp)
8111b354:	010001c4 	movi	r4,7
8111b358:	2081ee16 	blt	r4,r2,8111bb14 <___svfiprintf_internal_r+0xe14>
8111b35c:	42000204 	addi	r8,r8,8
8111b360:	0000e506 	br	8111b6f8 <___svfiprintf_internal_r+0x9f8>
8111b364:	21003fcc 	andi	r4,r4,255
8111b368:	2002dd1e 	bne	r4,zero,8111bee0 <___svfiprintf_internal_r+0x11e0>
8111b36c:	00a044f4 	movhi	r2,33043
8111b370:	109d5d04 	addi	r2,r2,30068
8111b374:	d8802915 	stw	r2,164(sp)
8111b378:	9080080c 	andi	r2,r18,32
8111b37c:	103f461e 	bne	r2,zero,8111b098 <__reset+0xfb0fb098>
8111b380:	9080040c 	andi	r2,r18,16
8111b384:	10022e1e 	bne	r2,zero,8111bc40 <___svfiprintf_internal_r+0xf40>
8111b388:	9080100c 	andi	r2,r18,64
8111b38c:	dac02317 	ldw	r11,140(sp)
8111b390:	10027326 	beq	r2,zero,8111bd60 <___svfiprintf_internal_r+0x1060>
8111b394:	5f00000b 	ldhu	fp,0(r11)
8111b398:	5ac00104 	addi	r11,r11,4
8111b39c:	0013883a 	mov	r9,zero
8111b3a0:	dac02315 	stw	r11,140(sp)
8111b3a4:	003f4106 	br	8111b0ac <__reset+0xfb0fb0ac>
8111b3a8:	21003fcc 	andi	r4,r4,255
8111b3ac:	2002e11e 	bne	r4,zero,8111bf34 <___svfiprintf_internal_r+0x1234>
8111b3b0:	9080080c 	andi	r2,r18,32
8111b3b4:	1002011e 	bne	r2,zero,8111bbbc <___svfiprintf_internal_r+0xebc>
8111b3b8:	9080040c 	andi	r2,r18,16
8111b3bc:	10023e1e 	bne	r2,zero,8111bcb8 <___svfiprintf_internal_r+0xfb8>
8111b3c0:	9480100c 	andi	r18,r18,64
8111b3c4:	90023c26 	beq	r18,zero,8111bcb8 <___svfiprintf_internal_r+0xfb8>
8111b3c8:	dac02317 	ldw	r11,140(sp)
8111b3cc:	58800017 	ldw	r2,0(r11)
8111b3d0:	5ac00104 	addi	r11,r11,4
8111b3d4:	dac02315 	stw	r11,140(sp)
8111b3d8:	dac02517 	ldw	r11,148(sp)
8111b3dc:	12c0000d 	sth	r11,0(r2)
8111b3e0:	003e6e06 	br	8111ad9c <__reset+0xfb0fad9c>
8111b3e4:	98c00007 	ldb	r3,0(r19)
8111b3e8:	1a422926 	beq	r3,r9,8111bc90 <___svfiprintf_internal_r+0xf90>
8111b3ec:	94800414 	ori	r18,r18,16
8111b3f0:	003e9206 	br	8111ae3c <__reset+0xfb0fae3c>
8111b3f4:	94801014 	ori	r18,r18,64
8111b3f8:	98c00007 	ldb	r3,0(r19)
8111b3fc:	003e8f06 	br	8111ae3c <__reset+0xfb0fae3c>
8111b400:	21003fcc 	andi	r4,r4,255
8111b404:	2002c71e 	bne	r4,zero,8111bf24 <___svfiprintf_internal_r+0x1224>
8111b408:	9080080c 	andi	r2,r18,32
8111b40c:	10004926 	beq	r2,zero,8111b534 <___svfiprintf_internal_r+0x834>
8111b410:	dac02317 	ldw	r11,140(sp)
8111b414:	58800117 	ldw	r2,4(r11)
8111b418:	5f000017 	ldw	fp,0(r11)
8111b41c:	5ac00204 	addi	r11,r11,8
8111b420:	dac02315 	stw	r11,140(sp)
8111b424:	1013883a 	mov	r9,r2
8111b428:	10004b16 	blt	r2,zero,8111b558 <___svfiprintf_internal_r+0x858>
8111b42c:	da801d83 	ldbu	r10,118(sp)
8111b430:	8001cb16 	blt	r16,zero,8111bb60 <___svfiprintf_internal_r+0xe60>
8111b434:	00ffdfc4 	movi	r3,-129
8111b438:	e244b03a 	or	r2,fp,r9
8111b43c:	90e4703a 	and	r18,r18,r3
8111b440:	103f4726 	beq	r2,zero,8111b160 <__reset+0xfb0fb160>
8111b444:	48008c26 	beq	r9,zero,8111b678 <___svfiprintf_internal_r+0x978>
8111b448:	dc802015 	stw	r18,128(sp)
8111b44c:	dc002115 	stw	r16,132(sp)
8111b450:	dc401a04 	addi	r17,sp,104
8111b454:	e021883a 	mov	r16,fp
8111b458:	da002215 	stw	r8,136(sp)
8111b45c:	5039883a 	mov	fp,r10
8111b460:	4825883a 	mov	r18,r9
8111b464:	8009883a 	mov	r4,r16
8111b468:	900b883a 	mov	r5,r18
8111b46c:	01800284 	movi	r6,10
8111b470:	000f883a 	mov	r7,zero
8111b474:	111f15c0 	call	8111f15c <__umoddi3>
8111b478:	10800c04 	addi	r2,r2,48
8111b47c:	8c7fffc4 	addi	r17,r17,-1
8111b480:	8009883a 	mov	r4,r16
8111b484:	900b883a 	mov	r5,r18
8111b488:	88800005 	stb	r2,0(r17)
8111b48c:	01800284 	movi	r6,10
8111b490:	000f883a 	mov	r7,zero
8111b494:	111ebe40 	call	8111ebe4 <__udivdi3>
8111b498:	1021883a 	mov	r16,r2
8111b49c:	10c4b03a 	or	r2,r2,r3
8111b4a0:	1825883a 	mov	r18,r3
8111b4a4:	103fef1e 	bne	r2,zero,8111b464 <__reset+0xfb0fb464>
8111b4a8:	dc802017 	ldw	r18,128(sp)
8111b4ac:	dc002117 	ldw	r16,132(sp)
8111b4b0:	da002217 	ldw	r8,136(sp)
8111b4b4:	e015883a 	mov	r10,fp
8111b4b8:	d8c01e17 	ldw	r3,120(sp)
8111b4bc:	1c47c83a 	sub	r3,r3,r17
8111b4c0:	d8c02115 	stw	r3,132(sp)
8111b4c4:	003f2a06 	br	8111b170 <__reset+0xfb0fb170>
8111b4c8:	dac02317 	ldw	r11,140(sp)
8111b4cc:	d8001d85 	stb	zero,118(sp)
8111b4d0:	5c400017 	ldw	r17,0(r11)
8111b4d4:	5f000104 	addi	fp,r11,4
8111b4d8:	88022f26 	beq	r17,zero,8111bd98 <___svfiprintf_internal_r+0x1098>
8111b4dc:	80022516 	blt	r16,zero,8111bd74 <___svfiprintf_internal_r+0x1074>
8111b4e0:	800d883a 	mov	r6,r16
8111b4e4:	000b883a 	mov	r5,zero
8111b4e8:	8809883a 	mov	r4,r17
8111b4ec:	da002c15 	stw	r8,176(sp)
8111b4f0:	111700c0 	call	8111700c <memchr>
8111b4f4:	da002c17 	ldw	r8,176(sp)
8111b4f8:	10026426 	beq	r2,zero,8111be8c <___svfiprintf_internal_r+0x118c>
8111b4fc:	1445c83a 	sub	r2,r2,r17
8111b500:	d8802115 	stw	r2,132(sp)
8111b504:	da801d83 	ldbu	r10,118(sp)
8111b508:	df002315 	stw	fp,140(sp)
8111b50c:	0021883a 	mov	r16,zero
8111b510:	003f1706 	br	8111b170 <__reset+0xfb0fb170>
8111b514:	94800814 	ori	r18,r18,32
8111b518:	98c00007 	ldb	r3,0(r19)
8111b51c:	003e4706 	br	8111ae3c <__reset+0xfb0fae3c>
8111b520:	21003fcc 	andi	r4,r4,255
8111b524:	2002701e 	bne	r4,zero,8111bee8 <___svfiprintf_internal_r+0x11e8>
8111b528:	94800414 	ori	r18,r18,16
8111b52c:	9080080c 	andi	r2,r18,32
8111b530:	103fb71e 	bne	r2,zero,8111b410 <__reset+0xfb0fb410>
8111b534:	9080040c 	andi	r2,r18,16
8111b538:	1001ab26 	beq	r2,zero,8111bbe8 <___svfiprintf_internal_r+0xee8>
8111b53c:	dac02317 	ldw	r11,140(sp)
8111b540:	5f000017 	ldw	fp,0(r11)
8111b544:	5ac00104 	addi	r11,r11,4
8111b548:	dac02315 	stw	r11,140(sp)
8111b54c:	e013d7fa 	srai	r9,fp,31
8111b550:	4805883a 	mov	r2,r9
8111b554:	103fb50e 	bge	r2,zero,8111b42c <__reset+0xfb0fb42c>
8111b558:	0739c83a 	sub	fp,zero,fp
8111b55c:	02800b44 	movi	r10,45
8111b560:	e004c03a 	cmpne	r2,fp,zero
8111b564:	0253c83a 	sub	r9,zero,r9
8111b568:	da801d85 	stb	r10,118(sp)
8111b56c:	4893c83a 	sub	r9,r9,r2
8111b570:	80023016 	blt	r16,zero,8111be34 <___svfiprintf_internal_r+0x1134>
8111b574:	00bfdfc4 	movi	r2,-129
8111b578:	90a4703a 	and	r18,r18,r2
8111b57c:	483fb21e 	bne	r9,zero,8111b448 <__reset+0xfb0fb448>
8111b580:	00003d06 	br	8111b678 <___svfiprintf_internal_r+0x978>
8111b584:	9817883a 	mov	r11,r19
8111b588:	d8002415 	stw	zero,144(sp)
8111b58c:	18bff404 	addi	r2,r3,-48
8111b590:	0019883a 	mov	r12,zero
8111b594:	58c00007 	ldb	r3,0(r11)
8111b598:	630002a4 	muli	r12,r12,10
8111b59c:	9cc00044 	addi	r19,r19,1
8111b5a0:	9817883a 	mov	r11,r19
8111b5a4:	1319883a 	add	r12,r2,r12
8111b5a8:	18bff404 	addi	r2,r3,-48
8111b5ac:	30bff92e 	bgeu	r6,r2,8111b594 <__reset+0xfb0fb594>
8111b5b0:	db002415 	stw	r12,144(sp)
8111b5b4:	18bff804 	addi	r2,r3,-32
8111b5b8:	28be232e 	bgeu	r5,r2,8111ae48 <__reset+0xfb0fae48>
8111b5bc:	21003fcc 	andi	r4,r4,255
8111b5c0:	20024b1e 	bne	r4,zero,8111bef0 <___svfiprintf_internal_r+0x11f0>
8111b5c4:	1800d626 	beq	r3,zero,8111b920 <___svfiprintf_internal_r+0xc20>
8111b5c8:	02c00044 	movi	r11,1
8111b5cc:	dac02015 	stw	r11,128(sp)
8111b5d0:	d8c01005 	stb	r3,64(sp)
8111b5d4:	d8001d85 	stb	zero,118(sp)
8111b5d8:	dac02115 	stw	r11,132(sp)
8111b5dc:	dc401004 	addi	r17,sp,64
8111b5e0:	003f2606 	br	8111b27c <__reset+0xfb0fb27c>
8111b5e4:	94802014 	ori	r18,r18,128
8111b5e8:	98c00007 	ldb	r3,0(r19)
8111b5ec:	003e1306 	br	8111ae3c <__reset+0xfb0fae3c>
8111b5f0:	98c00007 	ldb	r3,0(r19)
8111b5f4:	9ac00044 	addi	r11,r19,1
8111b5f8:	1a822b26 	beq	r3,r10,8111bea8 <___svfiprintf_internal_r+0x11a8>
8111b5fc:	18bff404 	addi	r2,r3,-48
8111b600:	0021883a 	mov	r16,zero
8111b604:	30821e36 	bltu	r6,r2,8111be80 <___svfiprintf_internal_r+0x1180>
8111b608:	58c00007 	ldb	r3,0(r11)
8111b60c:	840002a4 	muli	r16,r16,10
8111b610:	5cc00044 	addi	r19,r11,1
8111b614:	9817883a 	mov	r11,r19
8111b618:	80a1883a 	add	r16,r16,r2
8111b61c:	18bff404 	addi	r2,r3,-48
8111b620:	30bff92e 	bgeu	r6,r2,8111b608 <__reset+0xfb0fb608>
8111b624:	803e060e 	bge	r16,zero,8111ae40 <__reset+0xfb0fae40>
8111b628:	043fffc4 	movi	r16,-1
8111b62c:	003e0406 	br	8111ae40 <__reset+0xfb0fae40>
8111b630:	21003fcc 	andi	r4,r4,255
8111b634:	2002371e 	bne	r4,zero,8111bf14 <___svfiprintf_internal_r+0x1214>
8111b638:	94800414 	ori	r18,r18,16
8111b63c:	9080080c 	andi	r2,r18,32
8111b640:	103ebb1e 	bne	r2,zero,8111b130 <__reset+0xfb0fb130>
8111b644:	9080040c 	andi	r2,r18,16
8111b648:	10013b26 	beq	r2,zero,8111bb38 <___svfiprintf_internal_r+0xe38>
8111b64c:	dac02317 	ldw	r11,140(sp)
8111b650:	d8001d85 	stb	zero,118(sp)
8111b654:	0013883a 	mov	r9,zero
8111b658:	58800104 	addi	r2,r11,4
8111b65c:	5f000017 	ldw	fp,0(r11)
8111b660:	80013d16 	blt	r16,zero,8111bb58 <___svfiprintf_internal_r+0xe58>
8111b664:	00ffdfc4 	movi	r3,-129
8111b668:	d8802315 	stw	r2,140(sp)
8111b66c:	90e4703a 	and	r18,r18,r3
8111b670:	0015883a 	mov	r10,zero
8111b674:	e03eba26 	beq	fp,zero,8111b160 <__reset+0xfb0fb160>
8111b678:	00800244 	movi	r2,9
8111b67c:	173f7236 	bltu	r2,fp,8111b448 <__reset+0xfb0fb448>
8111b680:	dac02b17 	ldw	r11,172(sp)
8111b684:	e7000c04 	addi	fp,fp,48
8111b688:	df0019c5 	stb	fp,103(sp)
8111b68c:	dac02115 	stw	r11,132(sp)
8111b690:	dc4019c4 	addi	r17,sp,103
8111b694:	003eb606 	br	8111b170 <__reset+0xfb0fb170>
8111b698:	21003fcc 	andi	r4,r4,255
8111b69c:	20021f1e 	bne	r4,zero,8111bf1c <___svfiprintf_internal_r+0x121c>
8111b6a0:	94800414 	ori	r18,r18,16
8111b6a4:	9080080c 	andi	r2,r18,32
8111b6a8:	103ec51e 	bne	r2,zero,8111b1c0 <__reset+0xfb0fb1c0>
8111b6ac:	9080040c 	andi	r2,r18,16
8111b6b0:	10016926 	beq	r2,zero,8111bc58 <___svfiprintf_internal_r+0xf58>
8111b6b4:	dac02317 	ldw	r11,140(sp)
8111b6b8:	d8001d85 	stb	zero,118(sp)
8111b6bc:	0013883a 	mov	r9,zero
8111b6c0:	58800104 	addi	r2,r11,4
8111b6c4:	5f000017 	ldw	fp,0(r11)
8111b6c8:	80016b16 	blt	r16,zero,8111bc78 <___svfiprintf_internal_r+0xf78>
8111b6cc:	00ffdfc4 	movi	r3,-129
8111b6d0:	d8802315 	stw	r2,140(sp)
8111b6d4:	90e4703a 	and	r18,r18,r3
8111b6d8:	e03ec41e 	bne	fp,zero,8111b1ec <__reset+0xfb0fb1ec>
8111b6dc:	0015883a 	mov	r10,zero
8111b6e0:	8001c226 	beq	r16,zero,8111bdec <___svfiprintf_internal_r+0x10ec>
8111b6e4:	0039883a 	mov	fp,zero
8111b6e8:	0013883a 	mov	r9,zero
8111b6ec:	003ec006 	br	8111b1f0 <__reset+0xfb0fb1f0>
8111b6f0:	d8c01c17 	ldw	r3,112(sp)
8111b6f4:	d8801b17 	ldw	r2,108(sp)
8111b6f8:	d9001d87 	ldb	r4,118(sp)
8111b6fc:	20000b26 	beq	r4,zero,8111b72c <___svfiprintf_internal_r+0xa2c>
8111b700:	d9001d84 	addi	r4,sp,118
8111b704:	18c00044 	addi	r3,r3,1
8111b708:	10800044 	addi	r2,r2,1
8111b70c:	41000015 	stw	r4,0(r8)
8111b710:	01000044 	movi	r4,1
8111b714:	41000115 	stw	r4,4(r8)
8111b718:	d8c01c15 	stw	r3,112(sp)
8111b71c:	d8801b15 	stw	r2,108(sp)
8111b720:	010001c4 	movi	r4,7
8111b724:	2080e116 	blt	r4,r2,8111baac <___svfiprintf_internal_r+0xdac>
8111b728:	42000204 	addi	r8,r8,8
8111b72c:	dac02217 	ldw	r11,136(sp)
8111b730:	58000b26 	beq	r11,zero,8111b760 <___svfiprintf_internal_r+0xa60>
8111b734:	d9001d04 	addi	r4,sp,116
8111b738:	18c00084 	addi	r3,r3,2
8111b73c:	10800044 	addi	r2,r2,1
8111b740:	41000015 	stw	r4,0(r8)
8111b744:	01000084 	movi	r4,2
8111b748:	41000115 	stw	r4,4(r8)
8111b74c:	d8c01c15 	stw	r3,112(sp)
8111b750:	d8801b15 	stw	r2,108(sp)
8111b754:	010001c4 	movi	r4,7
8111b758:	2080dd16 	blt	r4,r2,8111bad0 <___svfiprintf_internal_r+0xdd0>
8111b75c:	42000204 	addi	r8,r8,8
8111b760:	dac02617 	ldw	r11,152(sp)
8111b764:	01002004 	movi	r4,128
8111b768:	59008426 	beq	r11,r4,8111b97c <___svfiprintf_internal_r+0xc7c>
8111b76c:	dac02117 	ldw	r11,132(sp)
8111b770:	82e1c83a 	sub	r16,r16,r11
8111b774:	0400270e 	bge	zero,r16,8111b814 <___svfiprintf_internal_r+0xb14>
8111b778:	01c00404 	movi	r7,16
8111b77c:	3c016a0e 	bge	r7,r16,8111bd28 <___svfiprintf_internal_r+0x1028>
8111b780:	016044f4 	movhi	r5,33043
8111b784:	295dec04 	addi	r5,r5,30640
8111b788:	d9402215 	stw	r5,136(sp)
8111b78c:	070001c4 	movi	fp,7
8111b790:	00000306 	br	8111b7a0 <___svfiprintf_internal_r+0xaa0>
8111b794:	843ffc04 	addi	r16,r16,-16
8111b798:	42000204 	addi	r8,r8,8
8111b79c:	3c00130e 	bge	r7,r16,8111b7ec <___svfiprintf_internal_r+0xaec>
8111b7a0:	18c00404 	addi	r3,r3,16
8111b7a4:	10800044 	addi	r2,r2,1
8111b7a8:	45000015 	stw	r20,0(r8)
8111b7ac:	41c00115 	stw	r7,4(r8)
8111b7b0:	d8c01c15 	stw	r3,112(sp)
8111b7b4:	d8801b15 	stw	r2,108(sp)
8111b7b8:	e0bff60e 	bge	fp,r2,8111b794 <__reset+0xfb0fb794>
8111b7bc:	d9801a04 	addi	r6,sp,104
8111b7c0:	b80b883a 	mov	r5,r23
8111b7c4:	a809883a 	mov	r4,r21
8111b7c8:	d9c02c15 	stw	r7,176(sp)
8111b7cc:	111ab300 	call	8111ab30 <__ssprint_r>
8111b7d0:	d9c02c17 	ldw	r7,176(sp)
8111b7d4:	1000581e 	bne	r2,zero,8111b938 <___svfiprintf_internal_r+0xc38>
8111b7d8:	843ffc04 	addi	r16,r16,-16
8111b7dc:	d8c01c17 	ldw	r3,112(sp)
8111b7e0:	d8801b17 	ldw	r2,108(sp)
8111b7e4:	d811883a 	mov	r8,sp
8111b7e8:	3c3fed16 	blt	r7,r16,8111b7a0 <__reset+0xfb0fb7a0>
8111b7ec:	dac02217 	ldw	r11,136(sp)
8111b7f0:	1c07883a 	add	r3,r3,r16
8111b7f4:	10800044 	addi	r2,r2,1
8111b7f8:	42c00015 	stw	r11,0(r8)
8111b7fc:	44000115 	stw	r16,4(r8)
8111b800:	d8c01c15 	stw	r3,112(sp)
8111b804:	d8801b15 	stw	r2,108(sp)
8111b808:	010001c4 	movi	r4,7
8111b80c:	20809e16 	blt	r4,r2,8111ba88 <___svfiprintf_internal_r+0xd88>
8111b810:	42000204 	addi	r8,r8,8
8111b814:	dac02117 	ldw	r11,132(sp)
8111b818:	10800044 	addi	r2,r2,1
8111b81c:	44400015 	stw	r17,0(r8)
8111b820:	58c7883a 	add	r3,r11,r3
8111b824:	42c00115 	stw	r11,4(r8)
8111b828:	d8c01c15 	stw	r3,112(sp)
8111b82c:	d8801b15 	stw	r2,108(sp)
8111b830:	010001c4 	movi	r4,7
8111b834:	20807f16 	blt	r4,r2,8111ba34 <___svfiprintf_internal_r+0xd34>
8111b838:	42000204 	addi	r8,r8,8
8111b83c:	9480010c 	andi	r18,r18,4
8111b840:	90002926 	beq	r18,zero,8111b8e8 <___svfiprintf_internal_r+0xbe8>
8111b844:	dac02417 	ldw	r11,144(sp)
8111b848:	d8802017 	ldw	r2,128(sp)
8111b84c:	58a1c83a 	sub	r16,r11,r2
8111b850:	0400250e 	bge	zero,r16,8111b8e8 <___svfiprintf_internal_r+0xbe8>
8111b854:	04400404 	movi	r17,16
8111b858:	d8801b17 	ldw	r2,108(sp)
8111b85c:	8c017c0e 	bge	r17,r16,8111be50 <___svfiprintf_internal_r+0x1150>
8111b860:	016044f4 	movhi	r5,33043
8111b864:	295df004 	addi	r5,r5,30656
8111b868:	d9402815 	stw	r5,160(sp)
8111b86c:	048001c4 	movi	r18,7
8111b870:	00000306 	br	8111b880 <___svfiprintf_internal_r+0xb80>
8111b874:	843ffc04 	addi	r16,r16,-16
8111b878:	42000204 	addi	r8,r8,8
8111b87c:	8c00110e 	bge	r17,r16,8111b8c4 <___svfiprintf_internal_r+0xbc4>
8111b880:	18c00404 	addi	r3,r3,16
8111b884:	10800044 	addi	r2,r2,1
8111b888:	45800015 	stw	r22,0(r8)
8111b88c:	44400115 	stw	r17,4(r8)
8111b890:	d8c01c15 	stw	r3,112(sp)
8111b894:	d8801b15 	stw	r2,108(sp)
8111b898:	90bff60e 	bge	r18,r2,8111b874 <__reset+0xfb0fb874>
8111b89c:	d9801a04 	addi	r6,sp,104
8111b8a0:	b80b883a 	mov	r5,r23
8111b8a4:	a809883a 	mov	r4,r21
8111b8a8:	111ab300 	call	8111ab30 <__ssprint_r>
8111b8ac:	1000221e 	bne	r2,zero,8111b938 <___svfiprintf_internal_r+0xc38>
8111b8b0:	843ffc04 	addi	r16,r16,-16
8111b8b4:	d8c01c17 	ldw	r3,112(sp)
8111b8b8:	d8801b17 	ldw	r2,108(sp)
8111b8bc:	d811883a 	mov	r8,sp
8111b8c0:	8c3fef16 	blt	r17,r16,8111b880 <__reset+0xfb0fb880>
8111b8c4:	dac02817 	ldw	r11,160(sp)
8111b8c8:	1c07883a 	add	r3,r3,r16
8111b8cc:	10800044 	addi	r2,r2,1
8111b8d0:	42c00015 	stw	r11,0(r8)
8111b8d4:	44000115 	stw	r16,4(r8)
8111b8d8:	d8c01c15 	stw	r3,112(sp)
8111b8dc:	d8801b15 	stw	r2,108(sp)
8111b8e0:	010001c4 	movi	r4,7
8111b8e4:	2080aa16 	blt	r4,r2,8111bb90 <___svfiprintf_internal_r+0xe90>
8111b8e8:	d8802417 	ldw	r2,144(sp)
8111b8ec:	dac02017 	ldw	r11,128(sp)
8111b8f0:	12c0010e 	bge	r2,r11,8111b8f8 <___svfiprintf_internal_r+0xbf8>
8111b8f4:	5805883a 	mov	r2,r11
8111b8f8:	dac02517 	ldw	r11,148(sp)
8111b8fc:	5897883a 	add	r11,r11,r2
8111b900:	dac02515 	stw	r11,148(sp)
8111b904:	1800531e 	bne	r3,zero,8111ba54 <___svfiprintf_internal_r+0xd54>
8111b908:	98800007 	ldb	r2,0(r19)
8111b90c:	d8001b15 	stw	zero,108(sp)
8111b910:	d811883a 	mov	r8,sp
8111b914:	103d231e 	bne	r2,zero,8111ada4 <__reset+0xfb0fada4>
8111b918:	9823883a 	mov	r17,r19
8111b91c:	003d3906 	br	8111ae04 <__reset+0xfb0fae04>
8111b920:	d8801c17 	ldw	r2,112(sp)
8111b924:	10000426 	beq	r2,zero,8111b938 <___svfiprintf_internal_r+0xc38>
8111b928:	d9402717 	ldw	r5,156(sp)
8111b92c:	d9002a17 	ldw	r4,168(sp)
8111b930:	d9801a04 	addi	r6,sp,104
8111b934:	111ab300 	call	8111ab30 <__ssprint_r>
8111b938:	dac02717 	ldw	r11,156(sp)
8111b93c:	d8802517 	ldw	r2,148(sp)
8111b940:	58c0030b 	ldhu	r3,12(r11)
8111b944:	18c0100c 	andi	r3,r3,64
8111b948:	1801381e 	bne	r3,zero,8111be2c <___svfiprintf_internal_r+0x112c>
8111b94c:	dfc03717 	ldw	ra,220(sp)
8111b950:	df003617 	ldw	fp,216(sp)
8111b954:	ddc03517 	ldw	r23,212(sp)
8111b958:	dd803417 	ldw	r22,208(sp)
8111b95c:	dd403317 	ldw	r21,204(sp)
8111b960:	dd003217 	ldw	r20,200(sp)
8111b964:	dcc03117 	ldw	r19,196(sp)
8111b968:	dc803017 	ldw	r18,192(sp)
8111b96c:	dc402f17 	ldw	r17,188(sp)
8111b970:	dc002e17 	ldw	r16,184(sp)
8111b974:	dec03804 	addi	sp,sp,224
8111b978:	f800283a 	ret
8111b97c:	dac02417 	ldw	r11,144(sp)
8111b980:	d9002017 	ldw	r4,128(sp)
8111b984:	5939c83a 	sub	fp,r11,r4
8111b988:	073f780e 	bge	zero,fp,8111b76c <__reset+0xfb0fb76c>
8111b98c:	02400404 	movi	r9,16
8111b990:	4f01370e 	bge	r9,fp,8111be70 <___svfiprintf_internal_r+0x1170>
8111b994:	02e044f4 	movhi	r11,33043
8111b998:	5addec04 	addi	r11,r11,30640
8111b99c:	dac02215 	stw	r11,136(sp)
8111b9a0:	028001c4 	movi	r10,7
8111b9a4:	00000306 	br	8111b9b4 <___svfiprintf_internal_r+0xcb4>
8111b9a8:	e73ffc04 	addi	fp,fp,-16
8111b9ac:	42000204 	addi	r8,r8,8
8111b9b0:	4f00150e 	bge	r9,fp,8111ba08 <___svfiprintf_internal_r+0xd08>
8111b9b4:	18c00404 	addi	r3,r3,16
8111b9b8:	10800044 	addi	r2,r2,1
8111b9bc:	45000015 	stw	r20,0(r8)
8111b9c0:	42400115 	stw	r9,4(r8)
8111b9c4:	d8c01c15 	stw	r3,112(sp)
8111b9c8:	d8801b15 	stw	r2,108(sp)
8111b9cc:	50bff60e 	bge	r10,r2,8111b9a8 <__reset+0xfb0fb9a8>
8111b9d0:	d9801a04 	addi	r6,sp,104
8111b9d4:	b80b883a 	mov	r5,r23
8111b9d8:	a809883a 	mov	r4,r21
8111b9dc:	da402c15 	stw	r9,176(sp)
8111b9e0:	da802d15 	stw	r10,180(sp)
8111b9e4:	111ab300 	call	8111ab30 <__ssprint_r>
8111b9e8:	da402c17 	ldw	r9,176(sp)
8111b9ec:	da802d17 	ldw	r10,180(sp)
8111b9f0:	103fd11e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111b9f4:	e73ffc04 	addi	fp,fp,-16
8111b9f8:	d8c01c17 	ldw	r3,112(sp)
8111b9fc:	d8801b17 	ldw	r2,108(sp)
8111ba00:	d811883a 	mov	r8,sp
8111ba04:	4f3feb16 	blt	r9,fp,8111b9b4 <__reset+0xfb0fb9b4>
8111ba08:	dac02217 	ldw	r11,136(sp)
8111ba0c:	1f07883a 	add	r3,r3,fp
8111ba10:	10800044 	addi	r2,r2,1
8111ba14:	42c00015 	stw	r11,0(r8)
8111ba18:	47000115 	stw	fp,4(r8)
8111ba1c:	d8c01c15 	stw	r3,112(sp)
8111ba20:	d8801b15 	stw	r2,108(sp)
8111ba24:	010001c4 	movi	r4,7
8111ba28:	2080b616 	blt	r4,r2,8111bd04 <___svfiprintf_internal_r+0x1004>
8111ba2c:	42000204 	addi	r8,r8,8
8111ba30:	003f4e06 	br	8111b76c <__reset+0xfb0fb76c>
8111ba34:	d9801a04 	addi	r6,sp,104
8111ba38:	b80b883a 	mov	r5,r23
8111ba3c:	a809883a 	mov	r4,r21
8111ba40:	111ab300 	call	8111ab30 <__ssprint_r>
8111ba44:	103fbc1e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111ba48:	d8c01c17 	ldw	r3,112(sp)
8111ba4c:	d811883a 	mov	r8,sp
8111ba50:	003f7a06 	br	8111b83c <__reset+0xfb0fb83c>
8111ba54:	d9801a04 	addi	r6,sp,104
8111ba58:	b80b883a 	mov	r5,r23
8111ba5c:	a809883a 	mov	r4,r21
8111ba60:	111ab300 	call	8111ab30 <__ssprint_r>
8111ba64:	103fa826 	beq	r2,zero,8111b908 <__reset+0xfb0fb908>
8111ba68:	003fb306 	br	8111b938 <__reset+0xfb0fb938>
8111ba6c:	d9801a04 	addi	r6,sp,104
8111ba70:	b80b883a 	mov	r5,r23
8111ba74:	a809883a 	mov	r4,r21
8111ba78:	111ab300 	call	8111ab30 <__ssprint_r>
8111ba7c:	103fae1e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111ba80:	d811883a 	mov	r8,sp
8111ba84:	003cdc06 	br	8111adf8 <__reset+0xfb0fadf8>
8111ba88:	d9801a04 	addi	r6,sp,104
8111ba8c:	b80b883a 	mov	r5,r23
8111ba90:	a809883a 	mov	r4,r21
8111ba94:	111ab300 	call	8111ab30 <__ssprint_r>
8111ba98:	103fa71e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111ba9c:	d8c01c17 	ldw	r3,112(sp)
8111baa0:	d8801b17 	ldw	r2,108(sp)
8111baa4:	d811883a 	mov	r8,sp
8111baa8:	003f5a06 	br	8111b814 <__reset+0xfb0fb814>
8111baac:	d9801a04 	addi	r6,sp,104
8111bab0:	b80b883a 	mov	r5,r23
8111bab4:	a809883a 	mov	r4,r21
8111bab8:	111ab300 	call	8111ab30 <__ssprint_r>
8111babc:	103f9e1e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111bac0:	d8c01c17 	ldw	r3,112(sp)
8111bac4:	d8801b17 	ldw	r2,108(sp)
8111bac8:	d811883a 	mov	r8,sp
8111bacc:	003f1706 	br	8111b72c <__reset+0xfb0fb72c>
8111bad0:	d9801a04 	addi	r6,sp,104
8111bad4:	b80b883a 	mov	r5,r23
8111bad8:	a809883a 	mov	r4,r21
8111badc:	111ab300 	call	8111ab30 <__ssprint_r>
8111bae0:	103f951e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111bae4:	d8c01c17 	ldw	r3,112(sp)
8111bae8:	d8801b17 	ldw	r2,108(sp)
8111baec:	d811883a 	mov	r8,sp
8111baf0:	003f1b06 	br	8111b760 <__reset+0xfb0fb760>
8111baf4:	d8001d85 	stb	zero,118(sp)
8111baf8:	80007b16 	blt	r16,zero,8111bce8 <___svfiprintf_internal_r+0xfe8>
8111bafc:	00ffdfc4 	movi	r3,-129
8111bb00:	e244b03a 	or	r2,fp,r9
8111bb04:	90e4703a 	and	r18,r18,r3
8111bb08:	103d7026 	beq	r2,zero,8111b0cc <__reset+0xfb0fb0cc>
8111bb0c:	0015883a 	mov	r10,zero
8111bb10:	003d7206 	br	8111b0dc <__reset+0xfb0fb0dc>
8111bb14:	d9801a04 	addi	r6,sp,104
8111bb18:	b80b883a 	mov	r5,r23
8111bb1c:	a809883a 	mov	r4,r21
8111bb20:	111ab300 	call	8111ab30 <__ssprint_r>
8111bb24:	103f841e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111bb28:	d8c01c17 	ldw	r3,112(sp)
8111bb2c:	d8801b17 	ldw	r2,108(sp)
8111bb30:	d811883a 	mov	r8,sp
8111bb34:	003ef006 	br	8111b6f8 <__reset+0xfb0fb6f8>
8111bb38:	9080100c 	andi	r2,r18,64
8111bb3c:	d8001d85 	stb	zero,118(sp)
8111bb40:	dac02317 	ldw	r11,140(sp)
8111bb44:	10008126 	beq	r2,zero,8111bd4c <___svfiprintf_internal_r+0x104c>
8111bb48:	58800104 	addi	r2,r11,4
8111bb4c:	5f00000b 	ldhu	fp,0(r11)
8111bb50:	0013883a 	mov	r9,zero
8111bb54:	803ec30e 	bge	r16,zero,8111b664 <__reset+0xfb0fb664>
8111bb58:	d8802315 	stw	r2,140(sp)
8111bb5c:	0015883a 	mov	r10,zero
8111bb60:	e244b03a 	or	r2,fp,r9
8111bb64:	103e371e 	bne	r2,zero,8111b444 <__reset+0xfb0fb444>
8111bb68:	00800044 	movi	r2,1
8111bb6c:	10803fcc 	andi	r2,r2,255
8111bb70:	00c00044 	movi	r3,1
8111bb74:	10c06126 	beq	r2,r3,8111bcfc <___svfiprintf_internal_r+0xffc>
8111bb78:	00c00084 	movi	r3,2
8111bb7c:	10fd5526 	beq	r2,r3,8111b0d4 <__reset+0xfb0fb0d4>
8111bb80:	003ed806 	br	8111b6e4 <__reset+0xfb0fb6e4>
8111bb84:	d8802315 	stw	r2,140(sp)
8111bb88:	98c00007 	ldb	r3,0(r19)
8111bb8c:	003cab06 	br	8111ae3c <__reset+0xfb0fae3c>
8111bb90:	d9801a04 	addi	r6,sp,104
8111bb94:	b80b883a 	mov	r5,r23
8111bb98:	a809883a 	mov	r4,r21
8111bb9c:	111ab300 	call	8111ab30 <__ssprint_r>
8111bba0:	103f651e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111bba4:	d8c01c17 	ldw	r3,112(sp)
8111bba8:	003f4f06 	br	8111b8e8 <__reset+0xfb0fb8e8>
8111bbac:	00a044f4 	movhi	r2,33043
8111bbb0:	109d6204 	addi	r2,r2,30088
8111bbb4:	d8802915 	stw	r2,164(sp)
8111bbb8:	003d4406 	br	8111b0cc <__reset+0xfb0fb0cc>
8111bbbc:	dac02317 	ldw	r11,140(sp)
8111bbc0:	58800017 	ldw	r2,0(r11)
8111bbc4:	dac02517 	ldw	r11,148(sp)
8111bbc8:	5807d7fa 	srai	r3,r11,31
8111bbcc:	dac02317 	ldw	r11,140(sp)
8111bbd0:	10c00115 	stw	r3,4(r2)
8111bbd4:	5ac00104 	addi	r11,r11,4
8111bbd8:	dac02315 	stw	r11,140(sp)
8111bbdc:	dac02517 	ldw	r11,148(sp)
8111bbe0:	12c00015 	stw	r11,0(r2)
8111bbe4:	003c6d06 	br	8111ad9c <__reset+0xfb0fad9c>
8111bbe8:	9080100c 	andi	r2,r18,64
8111bbec:	dac02317 	ldw	r11,140(sp)
8111bbf0:	103e5326 	beq	r2,zero,8111b540 <__reset+0xfb0fb540>
8111bbf4:	5f00000f 	ldh	fp,0(r11)
8111bbf8:	5ac00104 	addi	r11,r11,4
8111bbfc:	dac02315 	stw	r11,140(sp)
8111bc00:	e013d7fa 	srai	r9,fp,31
8111bc04:	4805883a 	mov	r2,r9
8111bc08:	003e0706 	br	8111b428 <__reset+0xfb0fb428>
8111bc0c:	00800c04 	movi	r2,48
8111bc10:	d8801d05 	stb	r2,116(sp)
8111bc14:	d8c01d45 	stb	r3,117(sp)
8111bc18:	d8001d85 	stb	zero,118(sp)
8111bc1c:	90800094 	ori	r2,r18,2
8111bc20:	80008f16 	blt	r16,zero,8111be60 <___svfiprintf_internal_r+0x1160>
8111bc24:	00bfdfc4 	movi	r2,-129
8111bc28:	90a4703a 	and	r18,r18,r2
8111bc2c:	94800094 	ori	r18,r18,2
8111bc30:	0015883a 	mov	r10,zero
8111bc34:	003d2906 	br	8111b0dc <__reset+0xfb0fb0dc>
8111bc38:	98c00007 	ldb	r3,0(r19)
8111bc3c:	003c7f06 	br	8111ae3c <__reset+0xfb0fae3c>
8111bc40:	dac02317 	ldw	r11,140(sp)
8111bc44:	0013883a 	mov	r9,zero
8111bc48:	5f000017 	ldw	fp,0(r11)
8111bc4c:	5ac00104 	addi	r11,r11,4
8111bc50:	dac02315 	stw	r11,140(sp)
8111bc54:	003d1506 	br	8111b0ac <__reset+0xfb0fb0ac>
8111bc58:	9080100c 	andi	r2,r18,64
8111bc5c:	d8001d85 	stb	zero,118(sp)
8111bc60:	dac02317 	ldw	r11,140(sp)
8111bc64:	10003426 	beq	r2,zero,8111bd38 <___svfiprintf_internal_r+0x1038>
8111bc68:	58800104 	addi	r2,r11,4
8111bc6c:	5f00000b 	ldhu	fp,0(r11)
8111bc70:	0013883a 	mov	r9,zero
8111bc74:	803e950e 	bge	r16,zero,8111b6cc <__reset+0xfb0fb6cc>
8111bc78:	e246b03a 	or	r3,fp,r9
8111bc7c:	d8802315 	stw	r2,140(sp)
8111bc80:	183d5a1e 	bne	r3,zero,8111b1ec <__reset+0xfb0fb1ec>
8111bc84:	0015883a 	mov	r10,zero
8111bc88:	0005883a 	mov	r2,zero
8111bc8c:	003fb706 	br	8111bb6c <__reset+0xfb0fbb6c>
8111bc90:	98c00043 	ldbu	r3,1(r19)
8111bc94:	94800814 	ori	r18,r18,32
8111bc98:	9cc00044 	addi	r19,r19,1
8111bc9c:	18c03fcc 	andi	r3,r3,255
8111bca0:	18c0201c 	xori	r3,r3,128
8111bca4:	18ffe004 	addi	r3,r3,-128
8111bca8:	003c6406 	br	8111ae3c <__reset+0xfb0fae3c>
8111bcac:	d8c02315 	stw	r3,140(sp)
8111bcb0:	0015883a 	mov	r10,zero
8111bcb4:	003faa06 	br	8111bb60 <__reset+0xfb0fbb60>
8111bcb8:	dac02317 	ldw	r11,140(sp)
8111bcbc:	58800017 	ldw	r2,0(r11)
8111bcc0:	5ac00104 	addi	r11,r11,4
8111bcc4:	dac02315 	stw	r11,140(sp)
8111bcc8:	dac02517 	ldw	r11,148(sp)
8111bccc:	12c00015 	stw	r11,0(r2)
8111bcd0:	003c3206 	br	8111ad9c <__reset+0xfb0fad9c>
8111bcd4:	012044f4 	movhi	r4,33043
8111bcd8:	211d6204 	addi	r4,r4,30088
8111bcdc:	d9002915 	stw	r4,164(sp)
8111bce0:	d8c02315 	stw	r3,140(sp)
8111bce4:	1025883a 	mov	r18,r2
8111bce8:	e244b03a 	or	r2,fp,r9
8111bcec:	103f871e 	bne	r2,zero,8111bb0c <__reset+0xfb0fbb0c>
8111bcf0:	0015883a 	mov	r10,zero
8111bcf4:	00800084 	movi	r2,2
8111bcf8:	003f9c06 	br	8111bb6c <__reset+0xfb0fbb6c>
8111bcfc:	0039883a 	mov	fp,zero
8111bd00:	003e5f06 	br	8111b680 <__reset+0xfb0fb680>
8111bd04:	d9801a04 	addi	r6,sp,104
8111bd08:	b80b883a 	mov	r5,r23
8111bd0c:	a809883a 	mov	r4,r21
8111bd10:	111ab300 	call	8111ab30 <__ssprint_r>
8111bd14:	103f081e 	bne	r2,zero,8111b938 <__reset+0xfb0fb938>
8111bd18:	d8c01c17 	ldw	r3,112(sp)
8111bd1c:	d8801b17 	ldw	r2,108(sp)
8111bd20:	d811883a 	mov	r8,sp
8111bd24:	003e9106 	br	8111b76c <__reset+0xfb0fb76c>
8111bd28:	012044f4 	movhi	r4,33043
8111bd2c:	211dec04 	addi	r4,r4,30640
8111bd30:	d9002215 	stw	r4,136(sp)
8111bd34:	003ead06 	br	8111b7ec <__reset+0xfb0fb7ec>
8111bd38:	58800104 	addi	r2,r11,4
8111bd3c:	5f000017 	ldw	fp,0(r11)
8111bd40:	0013883a 	mov	r9,zero
8111bd44:	803e610e 	bge	r16,zero,8111b6cc <__reset+0xfb0fb6cc>
8111bd48:	003fcb06 	br	8111bc78 <__reset+0xfb0fbc78>
8111bd4c:	58800104 	addi	r2,r11,4
8111bd50:	5f000017 	ldw	fp,0(r11)
8111bd54:	0013883a 	mov	r9,zero
8111bd58:	803e420e 	bge	r16,zero,8111b664 <__reset+0xfb0fb664>
8111bd5c:	003f7e06 	br	8111bb58 <__reset+0xfb0fbb58>
8111bd60:	5f000017 	ldw	fp,0(r11)
8111bd64:	5ac00104 	addi	r11,r11,4
8111bd68:	0013883a 	mov	r9,zero
8111bd6c:	dac02315 	stw	r11,140(sp)
8111bd70:	003cce06 	br	8111b0ac <__reset+0xfb0fb0ac>
8111bd74:	8809883a 	mov	r4,r17
8111bd78:	da002c15 	stw	r8,176(sp)
8111bd7c:	110ddac0 	call	8110ddac <strlen>
8111bd80:	d8802115 	stw	r2,132(sp)
8111bd84:	da801d83 	ldbu	r10,118(sp)
8111bd88:	df002315 	stw	fp,140(sp)
8111bd8c:	0021883a 	mov	r16,zero
8111bd90:	da002c17 	ldw	r8,176(sp)
8111bd94:	003cf606 	br	8111b170 <__reset+0xfb0fb170>
8111bd98:	00800184 	movi	r2,6
8111bd9c:	1400012e 	bgeu	r2,r16,8111bda4 <___svfiprintf_internal_r+0x10a4>
8111bda0:	1021883a 	mov	r16,r2
8111bda4:	dc002115 	stw	r16,132(sp)
8111bda8:	8005883a 	mov	r2,r16
8111bdac:	80003c16 	blt	r16,zero,8111bea0 <___svfiprintf_internal_r+0x11a0>
8111bdb0:	046044f4 	movhi	r17,33043
8111bdb4:	d8802015 	stw	r2,128(sp)
8111bdb8:	df002315 	stw	fp,140(sp)
8111bdbc:	8c5d6704 	addi	r17,r17,30108
8111bdc0:	003d2e06 	br	8111b27c <__reset+0xfb0fb27c>
8111bdc4:	04001004 	movi	r16,64
8111bdc8:	800b883a 	mov	r5,r16
8111bdcc:	110cc740 	call	8110cc74 <_malloc_r>
8111bdd0:	dac02717 	ldw	r11,156(sp)
8111bdd4:	58800015 	stw	r2,0(r11)
8111bdd8:	58800415 	stw	r2,16(r11)
8111bddc:	10004826 	beq	r2,zero,8111bf00 <___svfiprintf_internal_r+0x1200>
8111bde0:	dac02717 	ldw	r11,156(sp)
8111bde4:	5c000515 	stw	r16,20(r11)
8111bde8:	003bd906 	br	8111ad50 <__reset+0xfb0fad50>
8111bdec:	9080004c 	andi	r2,r18,1
8111bdf0:	0015883a 	mov	r10,zero
8111bdf4:	10000626 	beq	r2,zero,8111be10 <___svfiprintf_internal_r+0x1110>
8111bdf8:	dac02b17 	ldw	r11,172(sp)
8111bdfc:	00800c04 	movi	r2,48
8111be00:	d88019c5 	stb	r2,103(sp)
8111be04:	dac02115 	stw	r11,132(sp)
8111be08:	dc4019c4 	addi	r17,sp,103
8111be0c:	003cd806 	br	8111b170 <__reset+0xfb0fb170>
8111be10:	d8002115 	stw	zero,132(sp)
8111be14:	dc401a04 	addi	r17,sp,104
8111be18:	003cd506 	br	8111b170 <__reset+0xfb0fb170>
8111be1c:	012044f4 	movhi	r4,33043
8111be20:	211df004 	addi	r4,r4,30656
8111be24:	d9002815 	stw	r4,160(sp)
8111be28:	003d4306 	br	8111b338 <__reset+0xfb0fb338>
8111be2c:	00bfffc4 	movi	r2,-1
8111be30:	003ec606 	br	8111b94c <__reset+0xfb0fb94c>
8111be34:	00800044 	movi	r2,1
8111be38:	10803fcc 	andi	r2,r2,255
8111be3c:	00c00044 	movi	r3,1
8111be40:	10fd8026 	beq	r2,r3,8111b444 <__reset+0xfb0fb444>
8111be44:	00c00084 	movi	r3,2
8111be48:	10fca426 	beq	r2,r3,8111b0dc <__reset+0xfb0fb0dc>
8111be4c:	003ce806 	br	8111b1f0 <__reset+0xfb0fb1f0>
8111be50:	012044f4 	movhi	r4,33043
8111be54:	211df004 	addi	r4,r4,30656
8111be58:	d9002815 	stw	r4,160(sp)
8111be5c:	003e9906 	br	8111b8c4 <__reset+0xfb0fb8c4>
8111be60:	1025883a 	mov	r18,r2
8111be64:	0015883a 	mov	r10,zero
8111be68:	00800084 	movi	r2,2
8111be6c:	003ff206 	br	8111be38 <__reset+0xfb0fbe38>
8111be70:	016044f4 	movhi	r5,33043
8111be74:	295dec04 	addi	r5,r5,30640
8111be78:	d9402215 	stw	r5,136(sp)
8111be7c:	003ee206 	br	8111ba08 <__reset+0xfb0fba08>
8111be80:	5827883a 	mov	r19,r11
8111be84:	0021883a 	mov	r16,zero
8111be88:	003bed06 	br	8111ae40 <__reset+0xfb0fae40>
8111be8c:	dc002115 	stw	r16,132(sp)
8111be90:	da801d83 	ldbu	r10,118(sp)
8111be94:	df002315 	stw	fp,140(sp)
8111be98:	0021883a 	mov	r16,zero
8111be9c:	003cb406 	br	8111b170 <__reset+0xfb0fb170>
8111bea0:	0005883a 	mov	r2,zero
8111bea4:	003fc206 	br	8111bdb0 <__reset+0xfb0fbdb0>
8111bea8:	d8802317 	ldw	r2,140(sp)
8111beac:	98c00043 	ldbu	r3,1(r19)
8111beb0:	5827883a 	mov	r19,r11
8111beb4:	14000017 	ldw	r16,0(r2)
8111beb8:	10800104 	addi	r2,r2,4
8111bebc:	d8802315 	stw	r2,140(sp)
8111bec0:	803f760e 	bge	r16,zero,8111bc9c <__reset+0xfb0fbc9c>
8111bec4:	18c03fcc 	andi	r3,r3,255
8111bec8:	18c0201c 	xori	r3,r3,128
8111becc:	043fffc4 	movi	r16,-1
8111bed0:	18ffe004 	addi	r3,r3,-128
8111bed4:	003bd906 	br	8111ae3c <__reset+0xfb0fae3c>
8111bed8:	d9c01d85 	stb	r7,118(sp)
8111bedc:	003cb606 	br	8111b1b8 <__reset+0xfb0fb1b8>
8111bee0:	d9c01d85 	stb	r7,118(sp)
8111bee4:	003d2106 	br	8111b36c <__reset+0xfb0fb36c>
8111bee8:	d9c01d85 	stb	r7,118(sp)
8111beec:	003d8e06 	br	8111b528 <__reset+0xfb0fb528>
8111bef0:	d9c01d85 	stb	r7,118(sp)
8111bef4:	003db306 	br	8111b5c4 <__reset+0xfb0fb5c4>
8111bef8:	d9c01d85 	stb	r7,118(sp)
8111befc:	003c8a06 	br	8111b128 <__reset+0xfb0fb128>
8111bf00:	dac02a17 	ldw	r11,168(sp)
8111bf04:	00800304 	movi	r2,12
8111bf08:	58800015 	stw	r2,0(r11)
8111bf0c:	00bfffc4 	movi	r2,-1
8111bf10:	003e8e06 	br	8111b94c <__reset+0xfb0fb94c>
8111bf14:	d9c01d85 	stb	r7,118(sp)
8111bf18:	003dc706 	br	8111b638 <__reset+0xfb0fb638>
8111bf1c:	d9c01d85 	stb	r7,118(sp)
8111bf20:	003ddf06 	br	8111b6a0 <__reset+0xfb0fb6a0>
8111bf24:	d9c01d85 	stb	r7,118(sp)
8111bf28:	003d3706 	br	8111b408 <__reset+0xfb0fb408>
8111bf2c:	d9c01d85 	stb	r7,118(sp)
8111bf30:	003c5406 	br	8111b084 <__reset+0xfb0fb084>
8111bf34:	d9c01d85 	stb	r7,118(sp)
8111bf38:	003d1d06 	br	8111b3b0 <__reset+0xfb0fb3b0>

8111bf3c <__submore>:
8111bf3c:	defffa04 	addi	sp,sp,-24
8111bf40:	dc000015 	stw	r16,0(sp)
8111bf44:	2821883a 	mov	r16,r5
8111bf48:	29400c17 	ldw	r5,48(r5)
8111bf4c:	dfc00515 	stw	ra,20(sp)
8111bf50:	dd000415 	stw	r20,16(sp)
8111bf54:	dcc00315 	stw	r19,12(sp)
8111bf58:	dc800215 	stw	r18,8(sp)
8111bf5c:	dc400115 	stw	r17,4(sp)
8111bf60:	80801004 	addi	r2,r16,64
8111bf64:	28801726 	beq	r5,r2,8111bfc4 <__submore+0x88>
8111bf68:	84400d17 	ldw	r17,52(r16)
8111bf6c:	8c67883a 	add	r19,r17,r17
8111bf70:	980d883a 	mov	r6,r19
8111bf74:	11184100 	call	81118410 <_realloc_r>
8111bf78:	1025883a 	mov	r18,r2
8111bf7c:	10002226 	beq	r2,zero,8111c008 <__submore+0xcc>
8111bf80:	1469883a 	add	r20,r2,r17
8111bf84:	880d883a 	mov	r6,r17
8111bf88:	100b883a 	mov	r5,r2
8111bf8c:	a009883a 	mov	r4,r20
8111bf90:	110d4800 	call	8110d480 <memcpy>
8111bf94:	0005883a 	mov	r2,zero
8111bf98:	85000015 	stw	r20,0(r16)
8111bf9c:	84800c15 	stw	r18,48(r16)
8111bfa0:	84c00d15 	stw	r19,52(r16)
8111bfa4:	dfc00517 	ldw	ra,20(sp)
8111bfa8:	dd000417 	ldw	r20,16(sp)
8111bfac:	dcc00317 	ldw	r19,12(sp)
8111bfb0:	dc800217 	ldw	r18,8(sp)
8111bfb4:	dc400117 	ldw	r17,4(sp)
8111bfb8:	dc000017 	ldw	r16,0(sp)
8111bfbc:	dec00604 	addi	sp,sp,24
8111bfc0:	f800283a 	ret
8111bfc4:	04410004 	movi	r17,1024
8111bfc8:	880b883a 	mov	r5,r17
8111bfcc:	110cc740 	call	8110cc74 <_malloc_r>
8111bfd0:	1007883a 	mov	r3,r2
8111bfd4:	10000c26 	beq	r2,zero,8111c008 <__submore+0xcc>
8111bfd8:	80801083 	ldbu	r2,66(r16)
8111bfdc:	80c00c15 	stw	r3,48(r16)
8111bfe0:	84400d15 	stw	r17,52(r16)
8111bfe4:	1880ffc5 	stb	r2,1023(r3)
8111bfe8:	81401043 	ldbu	r5,65(r16)
8111bfec:	1900ff44 	addi	r4,r3,1021
8111bff0:	0005883a 	mov	r2,zero
8111bff4:	1940ff85 	stb	r5,1022(r3)
8111bff8:	81401003 	ldbu	r5,64(r16)
8111bffc:	1940ff45 	stb	r5,1021(r3)
8111c000:	81000015 	stw	r4,0(r16)
8111c004:	003fe706 	br	8111bfa4 <__reset+0xfb0fbfa4>
8111c008:	00bfffc4 	movi	r2,-1
8111c00c:	003fe506 	br	8111bfa4 <__reset+0xfb0fbfa4>

8111c010 <_ungetc_r>:
8111c010:	00bfffc4 	movi	r2,-1
8111c014:	28806126 	beq	r5,r2,8111c19c <_ungetc_r+0x18c>
8111c018:	defffb04 	addi	sp,sp,-20
8111c01c:	dcc00315 	stw	r19,12(sp)
8111c020:	dc400115 	stw	r17,4(sp)
8111c024:	dc000015 	stw	r16,0(sp)
8111c028:	dfc00415 	stw	ra,16(sp)
8111c02c:	dc800215 	stw	r18,8(sp)
8111c030:	2023883a 	mov	r17,r4
8111c034:	3021883a 	mov	r16,r6
8111c038:	2827883a 	mov	r19,r5
8111c03c:	20000226 	beq	r4,zero,8111c048 <_ungetc_r+0x38>
8111c040:	20800e17 	ldw	r2,56(r4)
8111c044:	10002e26 	beq	r2,zero,8111c100 <_ungetc_r+0xf0>
8111c048:	80c0030b 	ldhu	r3,12(r16)
8111c04c:	1888000c 	andi	r2,r3,8192
8111c050:	1000051e 	bne	r2,zero,8111c068 <_ungetc_r+0x58>
8111c054:	81001917 	ldw	r4,100(r16)
8111c058:	00b7ffc4 	movi	r2,-8193
8111c05c:	18c80014 	ori	r3,r3,8192
8111c060:	2084703a 	and	r2,r4,r2
8111c064:	80801915 	stw	r2,100(r16)
8111c068:	00bff7c4 	movi	r2,-33
8111c06c:	1884703a 	and	r2,r3,r2
8111c070:	8080030d 	sth	r2,12(r16)
8111c074:	1900010c 	andi	r4,r3,4
8111c078:	2000061e 	bne	r4,zero,8111c094 <_ungetc_r+0x84>
8111c07c:	1900040c 	andi	r4,r3,16
8111c080:	20001d26 	beq	r4,zero,8111c0f8 <_ungetc_r+0xe8>
8111c084:	18c0020c 	andi	r3,r3,8
8111c088:	1800331e 	bne	r3,zero,8111c158 <_ungetc_r+0x148>
8111c08c:	10800114 	ori	r2,r2,4
8111c090:	8080030d 	sth	r2,12(r16)
8111c094:	80800c17 	ldw	r2,48(r16)
8111c098:	9c803fcc 	andi	r18,r19,255
8111c09c:	10001a26 	beq	r2,zero,8111c108 <_ungetc_r+0xf8>
8111c0a0:	80c00117 	ldw	r3,4(r16)
8111c0a4:	80800d17 	ldw	r2,52(r16)
8111c0a8:	18800f0e 	bge	r3,r2,8111c0e8 <_ungetc_r+0xd8>
8111c0ac:	80c00017 	ldw	r3,0(r16)
8111c0b0:	9005883a 	mov	r2,r18
8111c0b4:	193fffc4 	addi	r4,r3,-1
8111c0b8:	81000015 	stw	r4,0(r16)
8111c0bc:	1cffffc5 	stb	r19,-1(r3)
8111c0c0:	80c00117 	ldw	r3,4(r16)
8111c0c4:	18c00044 	addi	r3,r3,1
8111c0c8:	80c00115 	stw	r3,4(r16)
8111c0cc:	dfc00417 	ldw	ra,16(sp)
8111c0d0:	dcc00317 	ldw	r19,12(sp)
8111c0d4:	dc800217 	ldw	r18,8(sp)
8111c0d8:	dc400117 	ldw	r17,4(sp)
8111c0dc:	dc000017 	ldw	r16,0(sp)
8111c0e0:	dec00504 	addi	sp,sp,20
8111c0e4:	f800283a 	ret
8111c0e8:	800b883a 	mov	r5,r16
8111c0ec:	8809883a 	mov	r4,r17
8111c0f0:	111bf3c0 	call	8111bf3c <__submore>
8111c0f4:	103fed26 	beq	r2,zero,8111c0ac <__reset+0xfb0fc0ac>
8111c0f8:	00bfffc4 	movi	r2,-1
8111c0fc:	003ff306 	br	8111c0cc <__reset+0xfb0fc0cc>
8111c100:	1115e540 	call	81115e54 <__sinit>
8111c104:	003fd006 	br	8111c048 <__reset+0xfb0fc048>
8111c108:	80c00417 	ldw	r3,16(r16)
8111c10c:	80800017 	ldw	r2,0(r16)
8111c110:	18000326 	beq	r3,zero,8111c120 <_ungetc_r+0x110>
8111c114:	1880022e 	bgeu	r3,r2,8111c120 <_ungetc_r+0x110>
8111c118:	10ffffc3 	ldbu	r3,-1(r2)
8111c11c:	90c01826 	beq	r18,r3,8111c180 <_ungetc_r+0x170>
8111c120:	81400117 	ldw	r5,4(r16)
8111c124:	80800e15 	stw	r2,56(r16)
8111c128:	008000c4 	movi	r2,3
8111c12c:	81001004 	addi	r4,r16,64
8111c130:	80c01084 	addi	r3,r16,66
8111c134:	80800d15 	stw	r2,52(r16)
8111c138:	00800044 	movi	r2,1
8111c13c:	80800115 	stw	r2,4(r16)
8111c140:	81400f15 	stw	r5,60(r16)
8111c144:	81000c15 	stw	r4,48(r16)
8111c148:	84c01085 	stb	r19,66(r16)
8111c14c:	80c00015 	stw	r3,0(r16)
8111c150:	9005883a 	mov	r2,r18
8111c154:	003fdd06 	br	8111c0cc <__reset+0xfb0fc0cc>
8111c158:	800b883a 	mov	r5,r16
8111c15c:	8809883a 	mov	r4,r17
8111c160:	1115a780 	call	81115a78 <_fflush_r>
8111c164:	103fe41e 	bne	r2,zero,8111c0f8 <__reset+0xfb0fc0f8>
8111c168:	8080030b 	ldhu	r2,12(r16)
8111c16c:	00fffdc4 	movi	r3,-9
8111c170:	80000215 	stw	zero,8(r16)
8111c174:	1884703a 	and	r2,r3,r2
8111c178:	80000615 	stw	zero,24(r16)
8111c17c:	003fc306 	br	8111c08c <__reset+0xfb0fc08c>
8111c180:	80c00117 	ldw	r3,4(r16)
8111c184:	10bfffc4 	addi	r2,r2,-1
8111c188:	80800015 	stw	r2,0(r16)
8111c18c:	18800044 	addi	r2,r3,1
8111c190:	80800115 	stw	r2,4(r16)
8111c194:	9005883a 	mov	r2,r18
8111c198:	003fcc06 	br	8111c0cc <__reset+0xfb0fc0cc>
8111c19c:	00bfffc4 	movi	r2,-1
8111c1a0:	f800283a 	ret

8111c1a4 <ungetc>:
8111c1a4:	00a04534 	movhi	r2,33044
8111c1a8:	10a65b04 	addi	r2,r2,-26260
8111c1ac:	280d883a 	mov	r6,r5
8111c1b0:	200b883a 	mov	r5,r4
8111c1b4:	11000017 	ldw	r4,0(r2)
8111c1b8:	111c0101 	jmpi	8111c010 <_ungetc_r>

8111c1bc <__sprint_r.part.0>:
8111c1bc:	28801917 	ldw	r2,100(r5)
8111c1c0:	defff604 	addi	sp,sp,-40
8111c1c4:	dd400515 	stw	r21,20(sp)
8111c1c8:	dfc00915 	stw	ra,36(sp)
8111c1cc:	df000815 	stw	fp,32(sp)
8111c1d0:	ddc00715 	stw	r23,28(sp)
8111c1d4:	dd800615 	stw	r22,24(sp)
8111c1d8:	dd000415 	stw	r20,16(sp)
8111c1dc:	dcc00315 	stw	r19,12(sp)
8111c1e0:	dc800215 	stw	r18,8(sp)
8111c1e4:	dc400115 	stw	r17,4(sp)
8111c1e8:	dc000015 	stw	r16,0(sp)
8111c1ec:	1088000c 	andi	r2,r2,8192
8111c1f0:	302b883a 	mov	r21,r6
8111c1f4:	10002e26 	beq	r2,zero,8111c2b0 <__sprint_r.part.0+0xf4>
8111c1f8:	30800217 	ldw	r2,8(r6)
8111c1fc:	35800017 	ldw	r22,0(r6)
8111c200:	10002926 	beq	r2,zero,8111c2a8 <__sprint_r.part.0+0xec>
8111c204:	2827883a 	mov	r19,r5
8111c208:	2029883a 	mov	r20,r4
8111c20c:	b5c00104 	addi	r23,r22,4
8111c210:	04bfffc4 	movi	r18,-1
8111c214:	bc400017 	ldw	r17,0(r23)
8111c218:	b4000017 	ldw	r16,0(r22)
8111c21c:	0039883a 	mov	fp,zero
8111c220:	8822d0ba 	srli	r17,r17,2
8111c224:	8800031e 	bne	r17,zero,8111c234 <__sprint_r.part.0+0x78>
8111c228:	00001806 	br	8111c28c <__sprint_r.part.0+0xd0>
8111c22c:	84000104 	addi	r16,r16,4
8111c230:	8f001526 	beq	r17,fp,8111c288 <__sprint_r.part.0+0xcc>
8111c234:	81400017 	ldw	r5,0(r16)
8111c238:	980d883a 	mov	r6,r19
8111c23c:	a009883a 	mov	r4,r20
8111c240:	111dc880 	call	8111dc88 <_fputwc_r>
8111c244:	e7000044 	addi	fp,fp,1
8111c248:	14bff81e 	bne	r2,r18,8111c22c <__reset+0xfb0fc22c>
8111c24c:	9005883a 	mov	r2,r18
8111c250:	a8000215 	stw	zero,8(r21)
8111c254:	a8000115 	stw	zero,4(r21)
8111c258:	dfc00917 	ldw	ra,36(sp)
8111c25c:	df000817 	ldw	fp,32(sp)
8111c260:	ddc00717 	ldw	r23,28(sp)
8111c264:	dd800617 	ldw	r22,24(sp)
8111c268:	dd400517 	ldw	r21,20(sp)
8111c26c:	dd000417 	ldw	r20,16(sp)
8111c270:	dcc00317 	ldw	r19,12(sp)
8111c274:	dc800217 	ldw	r18,8(sp)
8111c278:	dc400117 	ldw	r17,4(sp)
8111c27c:	dc000017 	ldw	r16,0(sp)
8111c280:	dec00a04 	addi	sp,sp,40
8111c284:	f800283a 	ret
8111c288:	a8800217 	ldw	r2,8(r21)
8111c28c:	8c63883a 	add	r17,r17,r17
8111c290:	8c63883a 	add	r17,r17,r17
8111c294:	1445c83a 	sub	r2,r2,r17
8111c298:	a8800215 	stw	r2,8(r21)
8111c29c:	b5800204 	addi	r22,r22,8
8111c2a0:	bdc00204 	addi	r23,r23,8
8111c2a4:	103fdb1e 	bne	r2,zero,8111c214 <__reset+0xfb0fc214>
8111c2a8:	0005883a 	mov	r2,zero
8111c2ac:	003fe806 	br	8111c250 <__reset+0xfb0fc250>
8111c2b0:	11165e40 	call	811165e4 <__sfvwrite_r>
8111c2b4:	003fe606 	br	8111c250 <__reset+0xfb0fc250>

8111c2b8 <__sprint_r>:
8111c2b8:	30c00217 	ldw	r3,8(r6)
8111c2bc:	18000126 	beq	r3,zero,8111c2c4 <__sprint_r+0xc>
8111c2c0:	111c1bc1 	jmpi	8111c1bc <__sprint_r.part.0>
8111c2c4:	30000115 	stw	zero,4(r6)
8111c2c8:	0005883a 	mov	r2,zero
8111c2cc:	f800283a 	ret

8111c2d0 <___vfiprintf_internal_r>:
8111c2d0:	deffc904 	addi	sp,sp,-220
8111c2d4:	df003515 	stw	fp,212(sp)
8111c2d8:	dd003115 	stw	r20,196(sp)
8111c2dc:	dfc03615 	stw	ra,216(sp)
8111c2e0:	ddc03415 	stw	r23,208(sp)
8111c2e4:	dd803315 	stw	r22,204(sp)
8111c2e8:	dd403215 	stw	r21,200(sp)
8111c2ec:	dcc03015 	stw	r19,192(sp)
8111c2f0:	dc802f15 	stw	r18,188(sp)
8111c2f4:	dc402e15 	stw	r17,184(sp)
8111c2f8:	dc002d15 	stw	r16,180(sp)
8111c2fc:	d9002015 	stw	r4,128(sp)
8111c300:	d9c02215 	stw	r7,136(sp)
8111c304:	2829883a 	mov	r20,r5
8111c308:	3039883a 	mov	fp,r6
8111c30c:	20000226 	beq	r4,zero,8111c318 <___vfiprintf_internal_r+0x48>
8111c310:	20800e17 	ldw	r2,56(r4)
8111c314:	1000cf26 	beq	r2,zero,8111c654 <___vfiprintf_internal_r+0x384>
8111c318:	a080030b 	ldhu	r2,12(r20)
8111c31c:	10c8000c 	andi	r3,r2,8192
8111c320:	1800061e 	bne	r3,zero,8111c33c <___vfiprintf_internal_r+0x6c>
8111c324:	a1001917 	ldw	r4,100(r20)
8111c328:	00f7ffc4 	movi	r3,-8193
8111c32c:	10880014 	ori	r2,r2,8192
8111c330:	20c6703a 	and	r3,r4,r3
8111c334:	a080030d 	sth	r2,12(r20)
8111c338:	a0c01915 	stw	r3,100(r20)
8111c33c:	10c0020c 	andi	r3,r2,8
8111c340:	1800a926 	beq	r3,zero,8111c5e8 <___vfiprintf_internal_r+0x318>
8111c344:	a0c00417 	ldw	r3,16(r20)
8111c348:	1800a726 	beq	r3,zero,8111c5e8 <___vfiprintf_internal_r+0x318>
8111c34c:	1080068c 	andi	r2,r2,26
8111c350:	00c00284 	movi	r3,10
8111c354:	10c0ac26 	beq	r2,r3,8111c608 <___vfiprintf_internal_r+0x338>
8111c358:	da801a04 	addi	r10,sp,104
8111c35c:	da801e15 	stw	r10,120(sp)
8111c360:	d8801e17 	ldw	r2,120(sp)
8111c364:	da8019c4 	addi	r10,sp,103
8111c368:	05a044f4 	movhi	r22,33043
8111c36c:	05e044f4 	movhi	r23,33043
8111c370:	da801f15 	stw	r10,124(sp)
8111c374:	1295c83a 	sub	r10,r2,r10
8111c378:	b59df804 	addi	r22,r22,30688
8111c37c:	bdddf404 	addi	r23,r23,30672
8111c380:	dec01a15 	stw	sp,104(sp)
8111c384:	d8001c15 	stw	zero,112(sp)
8111c388:	d8001b15 	stw	zero,108(sp)
8111c38c:	d8002615 	stw	zero,152(sp)
8111c390:	d8002315 	stw	zero,140(sp)
8111c394:	da802715 	stw	r10,156(sp)
8111c398:	d811883a 	mov	r8,sp
8111c39c:	dd002115 	stw	r20,132(sp)
8111c3a0:	e021883a 	mov	r16,fp
8111c3a4:	80800007 	ldb	r2,0(r16)
8111c3a8:	1003ea26 	beq	r2,zero,8111d354 <___vfiprintf_internal_r+0x1084>
8111c3ac:	00c00944 	movi	r3,37
8111c3b0:	8025883a 	mov	r18,r16
8111c3b4:	10c0021e 	bne	r2,r3,8111c3c0 <___vfiprintf_internal_r+0xf0>
8111c3b8:	00001606 	br	8111c414 <___vfiprintf_internal_r+0x144>
8111c3bc:	10c00326 	beq	r2,r3,8111c3cc <___vfiprintf_internal_r+0xfc>
8111c3c0:	94800044 	addi	r18,r18,1
8111c3c4:	90800007 	ldb	r2,0(r18)
8111c3c8:	103ffc1e 	bne	r2,zero,8111c3bc <__reset+0xfb0fc3bc>
8111c3cc:	9423c83a 	sub	r17,r18,r16
8111c3d0:	88001026 	beq	r17,zero,8111c414 <___vfiprintf_internal_r+0x144>
8111c3d4:	d8c01c17 	ldw	r3,112(sp)
8111c3d8:	d8801b17 	ldw	r2,108(sp)
8111c3dc:	44000015 	stw	r16,0(r8)
8111c3e0:	88c7883a 	add	r3,r17,r3
8111c3e4:	10800044 	addi	r2,r2,1
8111c3e8:	44400115 	stw	r17,4(r8)
8111c3ec:	d8c01c15 	stw	r3,112(sp)
8111c3f0:	d8801b15 	stw	r2,108(sp)
8111c3f4:	010001c4 	movi	r4,7
8111c3f8:	2080760e 	bge	r4,r2,8111c5d4 <___vfiprintf_internal_r+0x304>
8111c3fc:	1803821e 	bne	r3,zero,8111d208 <___vfiprintf_internal_r+0xf38>
8111c400:	da802317 	ldw	r10,140(sp)
8111c404:	d8001b15 	stw	zero,108(sp)
8111c408:	d811883a 	mov	r8,sp
8111c40c:	5455883a 	add	r10,r10,r17
8111c410:	da802315 	stw	r10,140(sp)
8111c414:	90800007 	ldb	r2,0(r18)
8111c418:	10044626 	beq	r2,zero,8111d534 <___vfiprintf_internal_r+0x1264>
8111c41c:	90c00047 	ldb	r3,1(r18)
8111c420:	94000044 	addi	r16,r18,1
8111c424:	d8001d85 	stb	zero,118(sp)
8111c428:	0009883a 	mov	r4,zero
8111c42c:	000f883a 	mov	r7,zero
8111c430:	027fffc4 	movi	r9,-1
8111c434:	0023883a 	mov	r17,zero
8111c438:	0029883a 	mov	r20,zero
8111c43c:	01401604 	movi	r5,88
8111c440:	01800244 	movi	r6,9
8111c444:	03400a84 	movi	r13,42
8111c448:	03001b04 	movi	r12,108
8111c44c:	84000044 	addi	r16,r16,1
8111c450:	18bff804 	addi	r2,r3,-32
8111c454:	28827336 	bltu	r5,r2,8111ce24 <___vfiprintf_internal_r+0xb54>
8111c458:	100490ba 	slli	r2,r2,2
8111c45c:	02a044b4 	movhi	r10,33042
8111c460:	52b11c04 	addi	r10,r10,-15248
8111c464:	1285883a 	add	r2,r2,r10
8111c468:	10800017 	ldw	r2,0(r2)
8111c46c:	1000683a 	jmp	r2
8111c470:	8111cb58 	cmpnei	r4,r16,18221
8111c474:	8111ce24 	muli	r4,r16,18232
8111c478:	8111ce24 	muli	r4,r16,18232
8111c47c:	8111cb78 	rdprs	r4,r16,18221
8111c480:	8111ce24 	muli	r4,r16,18232
8111c484:	8111ce24 	muli	r4,r16,18232
8111c488:	8111ce24 	muli	r4,r16,18232
8111c48c:	8111ce24 	muli	r4,r16,18232
8111c490:	8111ce24 	muli	r4,r16,18232
8111c494:	8111ce24 	muli	r4,r16,18232
8111c498:	8111cd60 	cmpeqi	r4,r16,18229
8111c49c:	8111cd7c 	xorhi	r4,r16,18229
8111c4a0:	8111ce24 	muli	r4,r16,18232
8111c4a4:	8111c664 	muli	r4,r16,18201
8111c4a8:	8111cd8c 	andi	r4,r16,18230
8111c4ac:	8111ce24 	muli	r4,r16,18232
8111c4b0:	8111cb84 	addi	r4,r16,18222
8111c4b4:	8111cb90 	cmplti	r4,r16,18222
8111c4b8:	8111cb90 	cmplti	r4,r16,18222
8111c4bc:	8111cb90 	cmplti	r4,r16,18222
8111c4c0:	8111cb90 	cmplti	r4,r16,18222
8111c4c4:	8111cb90 	cmplti	r4,r16,18222
8111c4c8:	8111cb90 	cmplti	r4,r16,18222
8111c4cc:	8111cb90 	cmplti	r4,r16,18222
8111c4d0:	8111cb90 	cmplti	r4,r16,18222
8111c4d4:	8111cb90 	cmplti	r4,r16,18222
8111c4d8:	8111ce24 	muli	r4,r16,18232
8111c4dc:	8111ce24 	muli	r4,r16,18232
8111c4e0:	8111ce24 	muli	r4,r16,18232
8111c4e4:	8111ce24 	muli	r4,r16,18232
8111c4e8:	8111ce24 	muli	r4,r16,18232
8111c4ec:	8111ce24 	muli	r4,r16,18232
8111c4f0:	8111ce24 	muli	r4,r16,18232
8111c4f4:	8111ce24 	muli	r4,r16,18232
8111c4f8:	8111ce24 	muli	r4,r16,18232
8111c4fc:	8111ce24 	muli	r4,r16,18232
8111c500:	8111cbbc 	xorhi	r4,r16,18222
8111c504:	8111ce24 	muli	r4,r16,18232
8111c508:	8111ce24 	muli	r4,r16,18232
8111c50c:	8111ce24 	muli	r4,r16,18232
8111c510:	8111ce24 	muli	r4,r16,18232
8111c514:	8111ce24 	muli	r4,r16,18232
8111c518:	8111ce24 	muli	r4,r16,18232
8111c51c:	8111ce24 	muli	r4,r16,18232
8111c520:	8111ce24 	muli	r4,r16,18232
8111c524:	8111ce24 	muli	r4,r16,18232
8111c528:	8111ce24 	muli	r4,r16,18232
8111c52c:	8111cbf4 	orhi	r4,r16,18223
8111c530:	8111ce24 	muli	r4,r16,18232
8111c534:	8111ce24 	muli	r4,r16,18232
8111c538:	8111ce24 	muli	r4,r16,18232
8111c53c:	8111ce24 	muli	r4,r16,18232
8111c540:	8111ce24 	muli	r4,r16,18232
8111c544:	8111cc4c 	andi	r4,r16,18225
8111c548:	8111ce24 	muli	r4,r16,18232
8111c54c:	8111ce24 	muli	r4,r16,18232
8111c550:	8111ccbc 	xorhi	r4,r16,18226
8111c554:	8111ce24 	muli	r4,r16,18232
8111c558:	8111ce24 	muli	r4,r16,18232
8111c55c:	8111ce24 	muli	r4,r16,18232
8111c560:	8111ce24 	muli	r4,r16,18232
8111c564:	8111ce24 	muli	r4,r16,18232
8111c568:	8111ce24 	muli	r4,r16,18232
8111c56c:	8111ce24 	muli	r4,r16,18232
8111c570:	8111ce24 	muli	r4,r16,18232
8111c574:	8111ce24 	muli	r4,r16,18232
8111c578:	8111ce24 	muli	r4,r16,18232
8111c57c:	8111ca68 	cmpgeui	r4,r16,18217
8111c580:	8111ca94 	ori	r4,r16,18218
8111c584:	8111ce24 	muli	r4,r16,18232
8111c588:	8111ce24 	muli	r4,r16,18232
8111c58c:	8111ce24 	muli	r4,r16,18232
8111c590:	8111cdcc 	andi	r4,r16,18231
8111c594:	8111ca94 	ori	r4,r16,18218
8111c598:	8111ce24 	muli	r4,r16,18232
8111c59c:	8111ce24 	muli	r4,r16,18232
8111c5a0:	8111c928 	cmpgeui	r4,r16,18212
8111c5a4:	8111ce24 	muli	r4,r16,18232
8111c5a8:	8111c938 	rdprs	r4,r16,18212
8111c5ac:	8111c974 	orhi	r4,r16,18213
8111c5b0:	8111c670 	cmpltui	r4,r16,18201
8111c5b4:	8111c91c 	xori	r4,r16,18212
8111c5b8:	8111ce24 	muli	r4,r16,18232
8111c5bc:	8111ccf8 	rdprs	r4,r16,18227
8111c5c0:	8111ce24 	muli	r4,r16,18232
8111c5c4:	8111cd50 	cmplti	r4,r16,18229
8111c5c8:	8111ce24 	muli	r4,r16,18232
8111c5cc:	8111ce24 	muli	r4,r16,18232
8111c5d0:	8111ca14 	ori	r4,r16,18216
8111c5d4:	42000204 	addi	r8,r8,8
8111c5d8:	da802317 	ldw	r10,140(sp)
8111c5dc:	5455883a 	add	r10,r10,r17
8111c5e0:	da802315 	stw	r10,140(sp)
8111c5e4:	003f8b06 	br	8111c414 <__reset+0xfb0fc414>
8111c5e8:	d9002017 	ldw	r4,128(sp)
8111c5ec:	a00b883a 	mov	r5,r20
8111c5f0:	1113e2c0 	call	81113e2c <__swsetup_r>
8111c5f4:	1003b11e 	bne	r2,zero,8111d4bc <___vfiprintf_internal_r+0x11ec>
8111c5f8:	a080030b 	ldhu	r2,12(r20)
8111c5fc:	00c00284 	movi	r3,10
8111c600:	1080068c 	andi	r2,r2,26
8111c604:	10ff541e 	bne	r2,r3,8111c358 <__reset+0xfb0fc358>
8111c608:	a080038f 	ldh	r2,14(r20)
8111c60c:	103f5216 	blt	r2,zero,8111c358 <__reset+0xfb0fc358>
8111c610:	d9c02217 	ldw	r7,136(sp)
8111c614:	d9002017 	ldw	r4,128(sp)
8111c618:	e00d883a 	mov	r6,fp
8111c61c:	a00b883a 	mov	r5,r20
8111c620:	111d7480 	call	8111d748 <__sbprintf>
8111c624:	dfc03617 	ldw	ra,216(sp)
8111c628:	df003517 	ldw	fp,212(sp)
8111c62c:	ddc03417 	ldw	r23,208(sp)
8111c630:	dd803317 	ldw	r22,204(sp)
8111c634:	dd403217 	ldw	r21,200(sp)
8111c638:	dd003117 	ldw	r20,196(sp)
8111c63c:	dcc03017 	ldw	r19,192(sp)
8111c640:	dc802f17 	ldw	r18,188(sp)
8111c644:	dc402e17 	ldw	r17,184(sp)
8111c648:	dc002d17 	ldw	r16,180(sp)
8111c64c:	dec03704 	addi	sp,sp,220
8111c650:	f800283a 	ret
8111c654:	1115e540 	call	81115e54 <__sinit>
8111c658:	003f2f06 	br	8111c318 <__reset+0xfb0fc318>
8111c65c:	0463c83a 	sub	r17,zero,r17
8111c660:	d8802215 	stw	r2,136(sp)
8111c664:	a5000114 	ori	r20,r20,4
8111c668:	80c00007 	ldb	r3,0(r16)
8111c66c:	003f7706 	br	8111c44c <__reset+0xfb0fc44c>
8111c670:	00800c04 	movi	r2,48
8111c674:	da802217 	ldw	r10,136(sp)
8111c678:	d8801d05 	stb	r2,116(sp)
8111c67c:	00801e04 	movi	r2,120
8111c680:	d8801d45 	stb	r2,117(sp)
8111c684:	d8001d85 	stb	zero,118(sp)
8111c688:	50c00104 	addi	r3,r10,4
8111c68c:	54800017 	ldw	r18,0(r10)
8111c690:	0027883a 	mov	r19,zero
8111c694:	a0800094 	ori	r2,r20,2
8111c698:	48030b16 	blt	r9,zero,8111d2c8 <___vfiprintf_internal_r+0xff8>
8111c69c:	00bfdfc4 	movi	r2,-129
8111c6a0:	a096703a 	and	r11,r20,r2
8111c6a4:	d8c02215 	stw	r3,136(sp)
8111c6a8:	5d000094 	ori	r20,r11,2
8111c6ac:	90032b1e 	bne	r18,zero,8111d35c <___vfiprintf_internal_r+0x108c>
8111c6b0:	00a044f4 	movhi	r2,33043
8111c6b4:	109d6204 	addi	r2,r2,30088
8111c6b8:	d8802615 	stw	r2,152(sp)
8111c6bc:	0039883a 	mov	fp,zero
8111c6c0:	48017b1e 	bne	r9,zero,8111ccb0 <___vfiprintf_internal_r+0x9e0>
8111c6c4:	0013883a 	mov	r9,zero
8111c6c8:	0027883a 	mov	r19,zero
8111c6cc:	dd401a04 	addi	r21,sp,104
8111c6d0:	4825883a 	mov	r18,r9
8111c6d4:	4cc0010e 	bge	r9,r19,8111c6dc <___vfiprintf_internal_r+0x40c>
8111c6d8:	9825883a 	mov	r18,r19
8111c6dc:	e7003fcc 	andi	fp,fp,255
8111c6e0:	e700201c 	xori	fp,fp,128
8111c6e4:	e73fe004 	addi	fp,fp,-128
8111c6e8:	e0000126 	beq	fp,zero,8111c6f0 <___vfiprintf_internal_r+0x420>
8111c6ec:	94800044 	addi	r18,r18,1
8111c6f0:	a380008c 	andi	r14,r20,2
8111c6f4:	70000126 	beq	r14,zero,8111c6fc <___vfiprintf_internal_r+0x42c>
8111c6f8:	94800084 	addi	r18,r18,2
8111c6fc:	a700210c 	andi	fp,r20,132
8111c700:	e001df1e 	bne	fp,zero,8111ce80 <___vfiprintf_internal_r+0xbb0>
8111c704:	8c87c83a 	sub	r3,r17,r18
8111c708:	00c1dd0e 	bge	zero,r3,8111ce80 <___vfiprintf_internal_r+0xbb0>
8111c70c:	01c00404 	movi	r7,16
8111c710:	d8801c17 	ldw	r2,112(sp)
8111c714:	38c3ad0e 	bge	r7,r3,8111d5cc <___vfiprintf_internal_r+0x12fc>
8111c718:	02a044f4 	movhi	r10,33043
8111c71c:	529df804 	addi	r10,r10,30688
8111c720:	dc002915 	stw	r16,164(sp)
8111c724:	d9801b17 	ldw	r6,108(sp)
8111c728:	da802415 	stw	r10,144(sp)
8111c72c:	03c001c4 	movi	r15,7
8111c730:	da402515 	stw	r9,148(sp)
8111c734:	db802815 	stw	r14,160(sp)
8111c738:	1821883a 	mov	r16,r3
8111c73c:	00000506 	br	8111c754 <___vfiprintf_internal_r+0x484>
8111c740:	31400084 	addi	r5,r6,2
8111c744:	42000204 	addi	r8,r8,8
8111c748:	200d883a 	mov	r6,r4
8111c74c:	843ffc04 	addi	r16,r16,-16
8111c750:	3c000d0e 	bge	r7,r16,8111c788 <___vfiprintf_internal_r+0x4b8>
8111c754:	10800404 	addi	r2,r2,16
8111c758:	31000044 	addi	r4,r6,1
8111c75c:	45800015 	stw	r22,0(r8)
8111c760:	41c00115 	stw	r7,4(r8)
8111c764:	d8801c15 	stw	r2,112(sp)
8111c768:	d9001b15 	stw	r4,108(sp)
8111c76c:	793ff40e 	bge	r15,r4,8111c740 <__reset+0xfb0fc740>
8111c770:	1001b51e 	bne	r2,zero,8111ce48 <___vfiprintf_internal_r+0xb78>
8111c774:	843ffc04 	addi	r16,r16,-16
8111c778:	000d883a 	mov	r6,zero
8111c77c:	01400044 	movi	r5,1
8111c780:	d811883a 	mov	r8,sp
8111c784:	3c3ff316 	blt	r7,r16,8111c754 <__reset+0xfb0fc754>
8111c788:	8007883a 	mov	r3,r16
8111c78c:	da402517 	ldw	r9,148(sp)
8111c790:	db802817 	ldw	r14,160(sp)
8111c794:	dc002917 	ldw	r16,164(sp)
8111c798:	da802417 	ldw	r10,144(sp)
8111c79c:	1885883a 	add	r2,r3,r2
8111c7a0:	40c00115 	stw	r3,4(r8)
8111c7a4:	42800015 	stw	r10,0(r8)
8111c7a8:	d8801c15 	stw	r2,112(sp)
8111c7ac:	d9401b15 	stw	r5,108(sp)
8111c7b0:	00c001c4 	movi	r3,7
8111c7b4:	19426016 	blt	r3,r5,8111d138 <___vfiprintf_internal_r+0xe68>
8111c7b8:	d8c01d87 	ldb	r3,118(sp)
8111c7bc:	42000204 	addi	r8,r8,8
8111c7c0:	29000044 	addi	r4,r5,1
8111c7c4:	1801b31e 	bne	r3,zero,8111ce94 <___vfiprintf_internal_r+0xbc4>
8111c7c8:	7001c026 	beq	r14,zero,8111cecc <___vfiprintf_internal_r+0xbfc>
8111c7cc:	d8c01d04 	addi	r3,sp,116
8111c7d0:	10800084 	addi	r2,r2,2
8111c7d4:	40c00015 	stw	r3,0(r8)
8111c7d8:	00c00084 	movi	r3,2
8111c7dc:	40c00115 	stw	r3,4(r8)
8111c7e0:	d8801c15 	stw	r2,112(sp)
8111c7e4:	d9001b15 	stw	r4,108(sp)
8111c7e8:	00c001c4 	movi	r3,7
8111c7ec:	1902650e 	bge	r3,r4,8111d184 <___vfiprintf_internal_r+0xeb4>
8111c7f0:	10029a1e 	bne	r2,zero,8111d25c <___vfiprintf_internal_r+0xf8c>
8111c7f4:	00c02004 	movi	r3,128
8111c7f8:	01000044 	movi	r4,1
8111c7fc:	000b883a 	mov	r5,zero
8111c800:	d811883a 	mov	r8,sp
8111c804:	e0c1b31e 	bne	fp,r3,8111ced4 <___vfiprintf_internal_r+0xc04>
8111c808:	8cb9c83a 	sub	fp,r17,r18
8111c80c:	0701b10e 	bge	zero,fp,8111ced4 <___vfiprintf_internal_r+0xc04>
8111c810:	01c00404 	movi	r7,16
8111c814:	3f03890e 	bge	r7,fp,8111d63c <___vfiprintf_internal_r+0x136c>
8111c818:	00e044f4 	movhi	r3,33043
8111c81c:	18ddf404 	addi	r3,r3,30672
8111c820:	d8c02415 	stw	r3,144(sp)
8111c824:	8007883a 	mov	r3,r16
8111c828:	034001c4 	movi	r13,7
8111c82c:	e021883a 	mov	r16,fp
8111c830:	da402515 	stw	r9,148(sp)
8111c834:	1839883a 	mov	fp,r3
8111c838:	00000506 	br	8111c850 <___vfiprintf_internal_r+0x580>
8111c83c:	29800084 	addi	r6,r5,2
8111c840:	42000204 	addi	r8,r8,8
8111c844:	180b883a 	mov	r5,r3
8111c848:	843ffc04 	addi	r16,r16,-16
8111c84c:	3c000d0e 	bge	r7,r16,8111c884 <___vfiprintf_internal_r+0x5b4>
8111c850:	10800404 	addi	r2,r2,16
8111c854:	28c00044 	addi	r3,r5,1
8111c858:	45c00015 	stw	r23,0(r8)
8111c85c:	41c00115 	stw	r7,4(r8)
8111c860:	d8801c15 	stw	r2,112(sp)
8111c864:	d8c01b15 	stw	r3,108(sp)
8111c868:	68fff40e 	bge	r13,r3,8111c83c <__reset+0xfb0fc83c>
8111c86c:	1002241e 	bne	r2,zero,8111d100 <___vfiprintf_internal_r+0xe30>
8111c870:	843ffc04 	addi	r16,r16,-16
8111c874:	01800044 	movi	r6,1
8111c878:	000b883a 	mov	r5,zero
8111c87c:	d811883a 	mov	r8,sp
8111c880:	3c3ff316 	blt	r7,r16,8111c850 <__reset+0xfb0fc850>
8111c884:	da402517 	ldw	r9,148(sp)
8111c888:	e007883a 	mov	r3,fp
8111c88c:	8039883a 	mov	fp,r16
8111c890:	1821883a 	mov	r16,r3
8111c894:	d8c02417 	ldw	r3,144(sp)
8111c898:	1705883a 	add	r2,r2,fp
8111c89c:	47000115 	stw	fp,4(r8)
8111c8a0:	40c00015 	stw	r3,0(r8)
8111c8a4:	d8801c15 	stw	r2,112(sp)
8111c8a8:	d9801b15 	stw	r6,108(sp)
8111c8ac:	00c001c4 	movi	r3,7
8111c8b0:	19827616 	blt	r3,r6,8111d28c <___vfiprintf_internal_r+0xfbc>
8111c8b4:	4cf9c83a 	sub	fp,r9,r19
8111c8b8:	42000204 	addi	r8,r8,8
8111c8bc:	31000044 	addi	r4,r6,1
8111c8c0:	300b883a 	mov	r5,r6
8111c8c4:	07018516 	blt	zero,fp,8111cedc <___vfiprintf_internal_r+0xc0c>
8111c8c8:	9885883a 	add	r2,r19,r2
8111c8cc:	45400015 	stw	r21,0(r8)
8111c8d0:	44c00115 	stw	r19,4(r8)
8111c8d4:	d8801c15 	stw	r2,112(sp)
8111c8d8:	d9001b15 	stw	r4,108(sp)
8111c8dc:	00c001c4 	movi	r3,7
8111c8e0:	1901dd0e 	bge	r3,r4,8111d058 <___vfiprintf_internal_r+0xd88>
8111c8e4:	1002401e 	bne	r2,zero,8111d1e8 <___vfiprintf_internal_r+0xf18>
8111c8e8:	d8001b15 	stw	zero,108(sp)
8111c8ec:	a2c0010c 	andi	r11,r20,4
8111c8f0:	58000226 	beq	r11,zero,8111c8fc <___vfiprintf_internal_r+0x62c>
8111c8f4:	8ca7c83a 	sub	r19,r17,r18
8111c8f8:	04c2f216 	blt	zero,r19,8111d4c4 <___vfiprintf_internal_r+0x11f4>
8111c8fc:	8c80010e 	bge	r17,r18,8111c904 <___vfiprintf_internal_r+0x634>
8111c900:	9023883a 	mov	r17,r18
8111c904:	da802317 	ldw	r10,140(sp)
8111c908:	5455883a 	add	r10,r10,r17
8111c90c:	da802315 	stw	r10,140(sp)
8111c910:	d8001b15 	stw	zero,108(sp)
8111c914:	d811883a 	mov	r8,sp
8111c918:	003ea206 	br	8111c3a4 <__reset+0xfb0fc3a4>
8111c91c:	a5000814 	ori	r20,r20,32
8111c920:	80c00007 	ldb	r3,0(r16)
8111c924:	003ec906 	br	8111c44c <__reset+0xfb0fc44c>
8111c928:	80c00007 	ldb	r3,0(r16)
8111c92c:	1b030926 	beq	r3,r12,8111d554 <___vfiprintf_internal_r+0x1284>
8111c930:	a5000414 	ori	r20,r20,16
8111c934:	003ec506 	br	8111c44c <__reset+0xfb0fc44c>
8111c938:	21003fcc 	andi	r4,r4,255
8111c93c:	20035e1e 	bne	r4,zero,8111d6b8 <___vfiprintf_internal_r+0x13e8>
8111c940:	a080080c 	andi	r2,r20,32
8111c944:	1002a526 	beq	r2,zero,8111d3dc <___vfiprintf_internal_r+0x110c>
8111c948:	da802217 	ldw	r10,136(sp)
8111c94c:	50800017 	ldw	r2,0(r10)
8111c950:	da802317 	ldw	r10,140(sp)
8111c954:	5007d7fa 	srai	r3,r10,31
8111c958:	da802217 	ldw	r10,136(sp)
8111c95c:	10c00115 	stw	r3,4(r2)
8111c960:	52800104 	addi	r10,r10,4
8111c964:	da802215 	stw	r10,136(sp)
8111c968:	da802317 	ldw	r10,140(sp)
8111c96c:	12800015 	stw	r10,0(r2)
8111c970:	003e8c06 	br	8111c3a4 <__reset+0xfb0fc3a4>
8111c974:	21003fcc 	andi	r4,r4,255
8111c978:	2003511e 	bne	r4,zero,8111d6c0 <___vfiprintf_internal_r+0x13f0>
8111c97c:	a080080c 	andi	r2,r20,32
8111c980:	1000a126 	beq	r2,zero,8111cc08 <___vfiprintf_internal_r+0x938>
8111c984:	da802217 	ldw	r10,136(sp)
8111c988:	d8001d85 	stb	zero,118(sp)
8111c98c:	50800204 	addi	r2,r10,8
8111c990:	54800017 	ldw	r18,0(r10)
8111c994:	54c00117 	ldw	r19,4(r10)
8111c998:	4802b416 	blt	r9,zero,8111d46c <___vfiprintf_internal_r+0x119c>
8111c99c:	013fdfc4 	movi	r4,-129
8111c9a0:	94c6b03a 	or	r3,r18,r19
8111c9a4:	d8802215 	stw	r2,136(sp)
8111c9a8:	a128703a 	and	r20,r20,r4
8111c9ac:	1800a226 	beq	r3,zero,8111cc38 <___vfiprintf_internal_r+0x968>
8111c9b0:	0039883a 	mov	fp,zero
8111c9b4:	dd401a04 	addi	r21,sp,104
8111c9b8:	9006d0fa 	srli	r3,r18,3
8111c9bc:	9808977a 	slli	r4,r19,29
8111c9c0:	9826d0fa 	srli	r19,r19,3
8111c9c4:	948001cc 	andi	r18,r18,7
8111c9c8:	90800c04 	addi	r2,r18,48
8111c9cc:	ad7fffc4 	addi	r21,r21,-1
8111c9d0:	20e4b03a 	or	r18,r4,r3
8111c9d4:	a8800005 	stb	r2,0(r21)
8111c9d8:	94c6b03a 	or	r3,r18,r19
8111c9dc:	183ff61e 	bne	r3,zero,8111c9b8 <__reset+0xfb0fc9b8>
8111c9e0:	a0c0004c 	andi	r3,r20,1
8111c9e4:	18005926 	beq	r3,zero,8111cb4c <___vfiprintf_internal_r+0x87c>
8111c9e8:	10803fcc 	andi	r2,r2,255
8111c9ec:	1080201c 	xori	r2,r2,128
8111c9f0:	10bfe004 	addi	r2,r2,-128
8111c9f4:	00c00c04 	movi	r3,48
8111c9f8:	10c05426 	beq	r2,r3,8111cb4c <___vfiprintf_internal_r+0x87c>
8111c9fc:	da801e17 	ldw	r10,120(sp)
8111ca00:	a8bfffc4 	addi	r2,r21,-1
8111ca04:	a8ffffc5 	stb	r3,-1(r21)
8111ca08:	50a7c83a 	sub	r19,r10,r2
8111ca0c:	102b883a 	mov	r21,r2
8111ca10:	003f2f06 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111ca14:	21003fcc 	andi	r4,r4,255
8111ca18:	2003421e 	bne	r4,zero,8111d724 <___vfiprintf_internal_r+0x1454>
8111ca1c:	00a044f4 	movhi	r2,33043
8111ca20:	109d6204 	addi	r2,r2,30088
8111ca24:	d8802615 	stw	r2,152(sp)
8111ca28:	a080080c 	andi	r2,r20,32
8111ca2c:	1000aa26 	beq	r2,zero,8111ccd8 <___vfiprintf_internal_r+0xa08>
8111ca30:	da802217 	ldw	r10,136(sp)
8111ca34:	54800017 	ldw	r18,0(r10)
8111ca38:	54c00117 	ldw	r19,4(r10)
8111ca3c:	52800204 	addi	r10,r10,8
8111ca40:	da802215 	stw	r10,136(sp)
8111ca44:	a080004c 	andi	r2,r20,1
8111ca48:	1001d226 	beq	r2,zero,8111d194 <___vfiprintf_internal_r+0xec4>
8111ca4c:	94c4b03a 	or	r2,r18,r19
8111ca50:	1002351e 	bne	r2,zero,8111d328 <___vfiprintf_internal_r+0x1058>
8111ca54:	d8001d85 	stb	zero,118(sp)
8111ca58:	48022216 	blt	r9,zero,8111d2e4 <___vfiprintf_internal_r+0x1014>
8111ca5c:	00bfdfc4 	movi	r2,-129
8111ca60:	a0a8703a 	and	r20,r20,r2
8111ca64:	003f1506 	br	8111c6bc <__reset+0xfb0fc6bc>
8111ca68:	da802217 	ldw	r10,136(sp)
8111ca6c:	04800044 	movi	r18,1
8111ca70:	d8001d85 	stb	zero,118(sp)
8111ca74:	50800017 	ldw	r2,0(r10)
8111ca78:	52800104 	addi	r10,r10,4
8111ca7c:	da802215 	stw	r10,136(sp)
8111ca80:	d8801005 	stb	r2,64(sp)
8111ca84:	9027883a 	mov	r19,r18
8111ca88:	dd401004 	addi	r21,sp,64
8111ca8c:	0013883a 	mov	r9,zero
8111ca90:	003f1706 	br	8111c6f0 <__reset+0xfb0fc6f0>
8111ca94:	21003fcc 	andi	r4,r4,255
8111ca98:	2003201e 	bne	r4,zero,8111d71c <___vfiprintf_internal_r+0x144c>
8111ca9c:	a080080c 	andi	r2,r20,32
8111caa0:	10004b26 	beq	r2,zero,8111cbd0 <___vfiprintf_internal_r+0x900>
8111caa4:	da802217 	ldw	r10,136(sp)
8111caa8:	50800117 	ldw	r2,4(r10)
8111caac:	54800017 	ldw	r18,0(r10)
8111cab0:	52800204 	addi	r10,r10,8
8111cab4:	da802215 	stw	r10,136(sp)
8111cab8:	1027883a 	mov	r19,r2
8111cabc:	10022c16 	blt	r2,zero,8111d370 <___vfiprintf_internal_r+0x10a0>
8111cac0:	df001d83 	ldbu	fp,118(sp)
8111cac4:	48007216 	blt	r9,zero,8111cc90 <___vfiprintf_internal_r+0x9c0>
8111cac8:	00ffdfc4 	movi	r3,-129
8111cacc:	94c4b03a 	or	r2,r18,r19
8111cad0:	a0e8703a 	and	r20,r20,r3
8111cad4:	1000cc26 	beq	r2,zero,8111ce08 <___vfiprintf_internal_r+0xb38>
8111cad8:	98021026 	beq	r19,zero,8111d31c <___vfiprintf_internal_r+0x104c>
8111cadc:	dc402415 	stw	r17,144(sp)
8111cae0:	dc002515 	stw	r16,148(sp)
8111cae4:	9823883a 	mov	r17,r19
8111cae8:	9021883a 	mov	r16,r18
8111caec:	dd401a04 	addi	r21,sp,104
8111caf0:	4825883a 	mov	r18,r9
8111caf4:	4027883a 	mov	r19,r8
8111caf8:	8009883a 	mov	r4,r16
8111cafc:	880b883a 	mov	r5,r17
8111cb00:	01800284 	movi	r6,10
8111cb04:	000f883a 	mov	r7,zero
8111cb08:	111f15c0 	call	8111f15c <__umoddi3>
8111cb0c:	10800c04 	addi	r2,r2,48
8111cb10:	ad7fffc4 	addi	r21,r21,-1
8111cb14:	8009883a 	mov	r4,r16
8111cb18:	880b883a 	mov	r5,r17
8111cb1c:	a8800005 	stb	r2,0(r21)
8111cb20:	01800284 	movi	r6,10
8111cb24:	000f883a 	mov	r7,zero
8111cb28:	111ebe40 	call	8111ebe4 <__udivdi3>
8111cb2c:	1021883a 	mov	r16,r2
8111cb30:	10c4b03a 	or	r2,r2,r3
8111cb34:	1823883a 	mov	r17,r3
8111cb38:	103fef1e 	bne	r2,zero,8111caf8 <__reset+0xfb0fcaf8>
8111cb3c:	dc402417 	ldw	r17,144(sp)
8111cb40:	dc002517 	ldw	r16,148(sp)
8111cb44:	9013883a 	mov	r9,r18
8111cb48:	9811883a 	mov	r8,r19
8111cb4c:	da801e17 	ldw	r10,120(sp)
8111cb50:	5567c83a 	sub	r19,r10,r21
8111cb54:	003ede06 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111cb58:	38803fcc 	andi	r2,r7,255
8111cb5c:	1080201c 	xori	r2,r2,128
8111cb60:	10bfe004 	addi	r2,r2,-128
8111cb64:	1002371e 	bne	r2,zero,8111d444 <___vfiprintf_internal_r+0x1174>
8111cb68:	01000044 	movi	r4,1
8111cb6c:	01c00804 	movi	r7,32
8111cb70:	80c00007 	ldb	r3,0(r16)
8111cb74:	003e3506 	br	8111c44c <__reset+0xfb0fc44c>
8111cb78:	a5000054 	ori	r20,r20,1
8111cb7c:	80c00007 	ldb	r3,0(r16)
8111cb80:	003e3206 	br	8111c44c <__reset+0xfb0fc44c>
8111cb84:	a5002014 	ori	r20,r20,128
8111cb88:	80c00007 	ldb	r3,0(r16)
8111cb8c:	003e2f06 	br	8111c44c <__reset+0xfb0fc44c>
8111cb90:	8015883a 	mov	r10,r16
8111cb94:	0023883a 	mov	r17,zero
8111cb98:	18bff404 	addi	r2,r3,-48
8111cb9c:	50c00007 	ldb	r3,0(r10)
8111cba0:	8c4002a4 	muli	r17,r17,10
8111cba4:	84000044 	addi	r16,r16,1
8111cba8:	8015883a 	mov	r10,r16
8111cbac:	1463883a 	add	r17,r2,r17
8111cbb0:	18bff404 	addi	r2,r3,-48
8111cbb4:	30bff92e 	bgeu	r6,r2,8111cb9c <__reset+0xfb0fcb9c>
8111cbb8:	003e2506 	br	8111c450 <__reset+0xfb0fc450>
8111cbbc:	21003fcc 	andi	r4,r4,255
8111cbc0:	2002d41e 	bne	r4,zero,8111d714 <___vfiprintf_internal_r+0x1444>
8111cbc4:	a5000414 	ori	r20,r20,16
8111cbc8:	a080080c 	andi	r2,r20,32
8111cbcc:	103fb51e 	bne	r2,zero,8111caa4 <__reset+0xfb0fcaa4>
8111cbd0:	a080040c 	andi	r2,r20,16
8111cbd4:	1001f826 	beq	r2,zero,8111d3b8 <___vfiprintf_internal_r+0x10e8>
8111cbd8:	da802217 	ldw	r10,136(sp)
8111cbdc:	54800017 	ldw	r18,0(r10)
8111cbe0:	52800104 	addi	r10,r10,4
8111cbe4:	da802215 	stw	r10,136(sp)
8111cbe8:	9027d7fa 	srai	r19,r18,31
8111cbec:	9805883a 	mov	r2,r19
8111cbf0:	003fb206 	br	8111cabc <__reset+0xfb0fcabc>
8111cbf4:	21003fcc 	andi	r4,r4,255
8111cbf8:	2002c41e 	bne	r4,zero,8111d70c <___vfiprintf_internal_r+0x143c>
8111cbfc:	a5000414 	ori	r20,r20,16
8111cc00:	a080080c 	andi	r2,r20,32
8111cc04:	103f5f1e 	bne	r2,zero,8111c984 <__reset+0xfb0fc984>
8111cc08:	a080040c 	andi	r2,r20,16
8111cc0c:	10020f26 	beq	r2,zero,8111d44c <___vfiprintf_internal_r+0x117c>
8111cc10:	da802217 	ldw	r10,136(sp)
8111cc14:	d8001d85 	stb	zero,118(sp)
8111cc18:	0027883a 	mov	r19,zero
8111cc1c:	50800104 	addi	r2,r10,4
8111cc20:	54800017 	ldw	r18,0(r10)
8111cc24:	48021116 	blt	r9,zero,8111d46c <___vfiprintf_internal_r+0x119c>
8111cc28:	00ffdfc4 	movi	r3,-129
8111cc2c:	d8802215 	stw	r2,136(sp)
8111cc30:	a0e8703a 	and	r20,r20,r3
8111cc34:	903f5e1e 	bne	r18,zero,8111c9b0 <__reset+0xfb0fc9b0>
8111cc38:	0039883a 	mov	fp,zero
8111cc3c:	4802a626 	beq	r9,zero,8111d6d8 <___vfiprintf_internal_r+0x1408>
8111cc40:	0025883a 	mov	r18,zero
8111cc44:	0027883a 	mov	r19,zero
8111cc48:	003f5a06 	br	8111c9b4 <__reset+0xfb0fc9b4>
8111cc4c:	21003fcc 	andi	r4,r4,255
8111cc50:	20029f1e 	bne	r4,zero,8111d6d0 <___vfiprintf_internal_r+0x1400>
8111cc54:	a5000414 	ori	r20,r20,16
8111cc58:	a080080c 	andi	r2,r20,32
8111cc5c:	10005e1e 	bne	r2,zero,8111cdd8 <___vfiprintf_internal_r+0xb08>
8111cc60:	a080040c 	andi	r2,r20,16
8111cc64:	1001a21e 	bne	r2,zero,8111d2f0 <___vfiprintf_internal_r+0x1020>
8111cc68:	a080100c 	andi	r2,r20,64
8111cc6c:	d8001d85 	stb	zero,118(sp)
8111cc70:	da802217 	ldw	r10,136(sp)
8111cc74:	1002231e 	bne	r2,zero,8111d504 <___vfiprintf_internal_r+0x1234>
8111cc78:	50800104 	addi	r2,r10,4
8111cc7c:	54800017 	ldw	r18,0(r10)
8111cc80:	0027883a 	mov	r19,zero
8111cc84:	4801a00e 	bge	r9,zero,8111d308 <___vfiprintf_internal_r+0x1038>
8111cc88:	d8802215 	stw	r2,136(sp)
8111cc8c:	0039883a 	mov	fp,zero
8111cc90:	94c4b03a 	or	r2,r18,r19
8111cc94:	103f901e 	bne	r2,zero,8111cad8 <__reset+0xfb0fcad8>
8111cc98:	00800044 	movi	r2,1
8111cc9c:	10803fcc 	andi	r2,r2,255
8111cca0:	00c00044 	movi	r3,1
8111cca4:	10c05926 	beq	r2,r3,8111ce0c <___vfiprintf_internal_r+0xb3c>
8111cca8:	00c00084 	movi	r3,2
8111ccac:	10ffe41e 	bne	r2,r3,8111cc40 <__reset+0xfb0fcc40>
8111ccb0:	0025883a 	mov	r18,zero
8111ccb4:	0027883a 	mov	r19,zero
8111ccb8:	00013d06 	br	8111d1b0 <___vfiprintf_internal_r+0xee0>
8111ccbc:	21003fcc 	andi	r4,r4,255
8111ccc0:	2002811e 	bne	r4,zero,8111d6c8 <___vfiprintf_internal_r+0x13f8>
8111ccc4:	00a044f4 	movhi	r2,33043
8111ccc8:	109d5d04 	addi	r2,r2,30068
8111cccc:	d8802615 	stw	r2,152(sp)
8111ccd0:	a080080c 	andi	r2,r20,32
8111ccd4:	103f561e 	bne	r2,zero,8111ca30 <__reset+0xfb0fca30>
8111ccd8:	a080040c 	andi	r2,r20,16
8111ccdc:	1001d126 	beq	r2,zero,8111d424 <___vfiprintf_internal_r+0x1154>
8111cce0:	da802217 	ldw	r10,136(sp)
8111cce4:	0027883a 	mov	r19,zero
8111cce8:	54800017 	ldw	r18,0(r10)
8111ccec:	52800104 	addi	r10,r10,4
8111ccf0:	da802215 	stw	r10,136(sp)
8111ccf4:	003f5306 	br	8111ca44 <__reset+0xfb0fca44>
8111ccf8:	da802217 	ldw	r10,136(sp)
8111ccfc:	d8001d85 	stb	zero,118(sp)
8111cd00:	55400017 	ldw	r21,0(r10)
8111cd04:	50c00104 	addi	r3,r10,4
8111cd08:	a8024226 	beq	r21,zero,8111d614 <___vfiprintf_internal_r+0x1344>
8111cd0c:	48021816 	blt	r9,zero,8111d570 <___vfiprintf_internal_r+0x12a0>
8111cd10:	480d883a 	mov	r6,r9
8111cd14:	000b883a 	mov	r5,zero
8111cd18:	a809883a 	mov	r4,r21
8111cd1c:	d8c02a15 	stw	r3,168(sp)
8111cd20:	da002b15 	stw	r8,172(sp)
8111cd24:	da402c15 	stw	r9,176(sp)
8111cd28:	111700c0 	call	8111700c <memchr>
8111cd2c:	d8c02a17 	ldw	r3,168(sp)
8111cd30:	da002b17 	ldw	r8,172(sp)
8111cd34:	da402c17 	ldw	r9,176(sp)
8111cd38:	10024826 	beq	r2,zero,8111d65c <___vfiprintf_internal_r+0x138c>
8111cd3c:	1567c83a 	sub	r19,r2,r21
8111cd40:	df001d83 	ldbu	fp,118(sp)
8111cd44:	d8c02215 	stw	r3,136(sp)
8111cd48:	0013883a 	mov	r9,zero
8111cd4c:	003e6006 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111cd50:	21003fcc 	andi	r4,r4,255
8111cd54:	203fc026 	beq	r4,zero,8111cc58 <__reset+0xfb0fcc58>
8111cd58:	d9c01d85 	stb	r7,118(sp)
8111cd5c:	003fbe06 	br	8111cc58 <__reset+0xfb0fcc58>
8111cd60:	da802217 	ldw	r10,136(sp)
8111cd64:	54400017 	ldw	r17,0(r10)
8111cd68:	50800104 	addi	r2,r10,4
8111cd6c:	883e3b16 	blt	r17,zero,8111c65c <__reset+0xfb0fc65c>
8111cd70:	d8802215 	stw	r2,136(sp)
8111cd74:	80c00007 	ldb	r3,0(r16)
8111cd78:	003db406 	br	8111c44c <__reset+0xfb0fc44c>
8111cd7c:	01000044 	movi	r4,1
8111cd80:	01c00ac4 	movi	r7,43
8111cd84:	80c00007 	ldb	r3,0(r16)
8111cd88:	003db006 	br	8111c44c <__reset+0xfb0fc44c>
8111cd8c:	80c00007 	ldb	r3,0(r16)
8111cd90:	82800044 	addi	r10,r16,1
8111cd94:	1b423c26 	beq	r3,r13,8111d688 <___vfiprintf_internal_r+0x13b8>
8111cd98:	18bff404 	addi	r2,r3,-48
8111cd9c:	0013883a 	mov	r9,zero
8111cda0:	30822b36 	bltu	r6,r2,8111d650 <___vfiprintf_internal_r+0x1380>
8111cda4:	50c00007 	ldb	r3,0(r10)
8111cda8:	4a4002a4 	muli	r9,r9,10
8111cdac:	54000044 	addi	r16,r10,1
8111cdb0:	8015883a 	mov	r10,r16
8111cdb4:	4893883a 	add	r9,r9,r2
8111cdb8:	18bff404 	addi	r2,r3,-48
8111cdbc:	30bff92e 	bgeu	r6,r2,8111cda4 <__reset+0xfb0fcda4>
8111cdc0:	483da30e 	bge	r9,zero,8111c450 <__reset+0xfb0fc450>
8111cdc4:	027fffc4 	movi	r9,-1
8111cdc8:	003da106 	br	8111c450 <__reset+0xfb0fc450>
8111cdcc:	a5001014 	ori	r20,r20,64
8111cdd0:	80c00007 	ldb	r3,0(r16)
8111cdd4:	003d9d06 	br	8111c44c <__reset+0xfb0fc44c>
8111cdd8:	da802217 	ldw	r10,136(sp)
8111cddc:	d8001d85 	stb	zero,118(sp)
8111cde0:	50c00204 	addi	r3,r10,8
8111cde4:	54800017 	ldw	r18,0(r10)
8111cde8:	54c00117 	ldw	r19,4(r10)
8111cdec:	4801ca16 	blt	r9,zero,8111d518 <___vfiprintf_internal_r+0x1248>
8111cdf0:	013fdfc4 	movi	r4,-129
8111cdf4:	94c4b03a 	or	r2,r18,r19
8111cdf8:	d8c02215 	stw	r3,136(sp)
8111cdfc:	a128703a 	and	r20,r20,r4
8111ce00:	0039883a 	mov	fp,zero
8111ce04:	103f341e 	bne	r2,zero,8111cad8 <__reset+0xfb0fcad8>
8111ce08:	483e2e26 	beq	r9,zero,8111c6c4 <__reset+0xfb0fc6c4>
8111ce0c:	0025883a 	mov	r18,zero
8111ce10:	94800c04 	addi	r18,r18,48
8111ce14:	dc8019c5 	stb	r18,103(sp)
8111ce18:	dcc02717 	ldw	r19,156(sp)
8111ce1c:	dd4019c4 	addi	r21,sp,103
8111ce20:	003e2b06 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111ce24:	21003fcc 	andi	r4,r4,255
8111ce28:	2002361e 	bne	r4,zero,8111d704 <___vfiprintf_internal_r+0x1434>
8111ce2c:	1801c126 	beq	r3,zero,8111d534 <___vfiprintf_internal_r+0x1264>
8111ce30:	04800044 	movi	r18,1
8111ce34:	d8c01005 	stb	r3,64(sp)
8111ce38:	d8001d85 	stb	zero,118(sp)
8111ce3c:	9027883a 	mov	r19,r18
8111ce40:	dd401004 	addi	r21,sp,64
8111ce44:	003f1106 	br	8111ca8c <__reset+0xfb0fca8c>
8111ce48:	d9402117 	ldw	r5,132(sp)
8111ce4c:	d9002017 	ldw	r4,128(sp)
8111ce50:	d9801a04 	addi	r6,sp,104
8111ce54:	d9c02b15 	stw	r7,172(sp)
8111ce58:	dbc02a15 	stw	r15,168(sp)
8111ce5c:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111ce60:	d9c02b17 	ldw	r7,172(sp)
8111ce64:	dbc02a17 	ldw	r15,168(sp)
8111ce68:	10006d1e 	bne	r2,zero,8111d020 <___vfiprintf_internal_r+0xd50>
8111ce6c:	d9801b17 	ldw	r6,108(sp)
8111ce70:	d8801c17 	ldw	r2,112(sp)
8111ce74:	d811883a 	mov	r8,sp
8111ce78:	31400044 	addi	r5,r6,1
8111ce7c:	003e3306 	br	8111c74c <__reset+0xfb0fc74c>
8111ce80:	d9401b17 	ldw	r5,108(sp)
8111ce84:	d8801c17 	ldw	r2,112(sp)
8111ce88:	29000044 	addi	r4,r5,1
8111ce8c:	d8c01d87 	ldb	r3,118(sp)
8111ce90:	183e4d26 	beq	r3,zero,8111c7c8 <__reset+0xfb0fc7c8>
8111ce94:	00c00044 	movi	r3,1
8111ce98:	d9401d84 	addi	r5,sp,118
8111ce9c:	10c5883a 	add	r2,r2,r3
8111cea0:	41400015 	stw	r5,0(r8)
8111cea4:	40c00115 	stw	r3,4(r8)
8111cea8:	d8801c15 	stw	r2,112(sp)
8111ceac:	d9001b15 	stw	r4,108(sp)
8111ceb0:	014001c4 	movi	r5,7
8111ceb4:	2900a90e 	bge	r5,r4,8111d15c <___vfiprintf_internal_r+0xe8c>
8111ceb8:	1000da1e 	bne	r2,zero,8111d224 <___vfiprintf_internal_r+0xf54>
8111cebc:	7000ab1e 	bne	r14,zero,8111d16c <___vfiprintf_internal_r+0xe9c>
8111cec0:	000b883a 	mov	r5,zero
8111cec4:	1809883a 	mov	r4,r3
8111cec8:	d811883a 	mov	r8,sp
8111cecc:	00c02004 	movi	r3,128
8111ced0:	e0fe4d26 	beq	fp,r3,8111c808 <__reset+0xfb0fc808>
8111ced4:	4cf9c83a 	sub	fp,r9,r19
8111ced8:	073e7b0e 	bge	zero,fp,8111c8c8 <__reset+0xfb0fc8c8>
8111cedc:	01c00404 	movi	r7,16
8111cee0:	3f01900e 	bge	r7,fp,8111d524 <___vfiprintf_internal_r+0x1254>
8111cee4:	00e044f4 	movhi	r3,33043
8111cee8:	18ddf404 	addi	r3,r3,30672
8111ceec:	d8c02415 	stw	r3,144(sp)
8111cef0:	034001c4 	movi	r13,7
8111cef4:	00000506 	br	8111cf0c <___vfiprintf_internal_r+0xc3c>
8111cef8:	29000084 	addi	r4,r5,2
8111cefc:	42000204 	addi	r8,r8,8
8111cf00:	180b883a 	mov	r5,r3
8111cf04:	e73ffc04 	addi	fp,fp,-16
8111cf08:	3f000d0e 	bge	r7,fp,8111cf40 <___vfiprintf_internal_r+0xc70>
8111cf0c:	10800404 	addi	r2,r2,16
8111cf10:	28c00044 	addi	r3,r5,1
8111cf14:	45c00015 	stw	r23,0(r8)
8111cf18:	41c00115 	stw	r7,4(r8)
8111cf1c:	d8801c15 	stw	r2,112(sp)
8111cf20:	d8c01b15 	stw	r3,108(sp)
8111cf24:	68fff40e 	bge	r13,r3,8111cef8 <__reset+0xfb0fcef8>
8111cf28:	1000101e 	bne	r2,zero,8111cf6c <___vfiprintf_internal_r+0xc9c>
8111cf2c:	e73ffc04 	addi	fp,fp,-16
8111cf30:	01000044 	movi	r4,1
8111cf34:	000b883a 	mov	r5,zero
8111cf38:	d811883a 	mov	r8,sp
8111cf3c:	3f3ff316 	blt	r7,fp,8111cf0c <__reset+0xfb0fcf0c>
8111cf40:	da802417 	ldw	r10,144(sp)
8111cf44:	1705883a 	add	r2,r2,fp
8111cf48:	47000115 	stw	fp,4(r8)
8111cf4c:	42800015 	stw	r10,0(r8)
8111cf50:	d8801c15 	stw	r2,112(sp)
8111cf54:	d9001b15 	stw	r4,108(sp)
8111cf58:	00c001c4 	movi	r3,7
8111cf5c:	19003616 	blt	r3,r4,8111d038 <___vfiprintf_internal_r+0xd68>
8111cf60:	42000204 	addi	r8,r8,8
8111cf64:	21000044 	addi	r4,r4,1
8111cf68:	003e5706 	br	8111c8c8 <__reset+0xfb0fc8c8>
8111cf6c:	d9402117 	ldw	r5,132(sp)
8111cf70:	d9002017 	ldw	r4,128(sp)
8111cf74:	d9801a04 	addi	r6,sp,104
8111cf78:	d9c02b15 	stw	r7,172(sp)
8111cf7c:	db402a15 	stw	r13,168(sp)
8111cf80:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111cf84:	d9c02b17 	ldw	r7,172(sp)
8111cf88:	db402a17 	ldw	r13,168(sp)
8111cf8c:	1000241e 	bne	r2,zero,8111d020 <___vfiprintf_internal_r+0xd50>
8111cf90:	d9401b17 	ldw	r5,108(sp)
8111cf94:	d8801c17 	ldw	r2,112(sp)
8111cf98:	d811883a 	mov	r8,sp
8111cf9c:	29000044 	addi	r4,r5,1
8111cfa0:	003fd806 	br	8111cf04 <__reset+0xfb0fcf04>
8111cfa4:	d9401b17 	ldw	r5,108(sp)
8111cfa8:	00e044f4 	movhi	r3,33043
8111cfac:	18ddf804 	addi	r3,r3,30688
8111cfb0:	d8c02415 	stw	r3,144(sp)
8111cfb4:	29400044 	addi	r5,r5,1
8111cfb8:	d8c02417 	ldw	r3,144(sp)
8111cfbc:	14c5883a 	add	r2,r2,r19
8111cfc0:	44c00115 	stw	r19,4(r8)
8111cfc4:	40c00015 	stw	r3,0(r8)
8111cfc8:	d8801c15 	stw	r2,112(sp)
8111cfcc:	d9401b15 	stw	r5,108(sp)
8111cfd0:	00c001c4 	movi	r3,7
8111cfd4:	1940070e 	bge	r3,r5,8111cff4 <___vfiprintf_internal_r+0xd24>
8111cfd8:	103e4826 	beq	r2,zero,8111c8fc <__reset+0xfb0fc8fc>
8111cfdc:	d9402117 	ldw	r5,132(sp)
8111cfe0:	d9002017 	ldw	r4,128(sp)
8111cfe4:	d9801a04 	addi	r6,sp,104
8111cfe8:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111cfec:	10000c1e 	bne	r2,zero,8111d020 <___vfiprintf_internal_r+0xd50>
8111cff0:	d8801c17 	ldw	r2,112(sp)
8111cff4:	8c80010e 	bge	r17,r18,8111cffc <___vfiprintf_internal_r+0xd2c>
8111cff8:	9023883a 	mov	r17,r18
8111cffc:	da802317 	ldw	r10,140(sp)
8111d000:	5455883a 	add	r10,r10,r17
8111d004:	da802315 	stw	r10,140(sp)
8111d008:	103e4126 	beq	r2,zero,8111c910 <__reset+0xfb0fc910>
8111d00c:	d9402117 	ldw	r5,132(sp)
8111d010:	d9002017 	ldw	r4,128(sp)
8111d014:	d9801a04 	addi	r6,sp,104
8111d018:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d01c:	103e3c26 	beq	r2,zero,8111c910 <__reset+0xfb0fc910>
8111d020:	dd002117 	ldw	r20,132(sp)
8111d024:	a080030b 	ldhu	r2,12(r20)
8111d028:	1080100c 	andi	r2,r2,64
8111d02c:	1001231e 	bne	r2,zero,8111d4bc <___vfiprintf_internal_r+0x11ec>
8111d030:	d8802317 	ldw	r2,140(sp)
8111d034:	003d7b06 	br	8111c624 <__reset+0xfb0fc624>
8111d038:	1000991e 	bne	r2,zero,8111d2a0 <___vfiprintf_internal_r+0xfd0>
8111d03c:	00c00044 	movi	r3,1
8111d040:	9805883a 	mov	r2,r19
8111d044:	dd400015 	stw	r21,0(sp)
8111d048:	dcc00115 	stw	r19,4(sp)
8111d04c:	dcc01c15 	stw	r19,112(sp)
8111d050:	d8c01b15 	stw	r3,108(sp)
8111d054:	d811883a 	mov	r8,sp
8111d058:	42000204 	addi	r8,r8,8
8111d05c:	a2c0010c 	andi	r11,r20,4
8111d060:	583fe426 	beq	r11,zero,8111cff4 <__reset+0xfb0fcff4>
8111d064:	8ca7c83a 	sub	r19,r17,r18
8111d068:	04ffe20e 	bge	zero,r19,8111cff4 <__reset+0xfb0fcff4>
8111d06c:	01c00404 	movi	r7,16
8111d070:	3cffcc0e 	bge	r7,r19,8111cfa4 <__reset+0xfb0fcfa4>
8111d074:	02a044f4 	movhi	r10,33043
8111d078:	529df804 	addi	r10,r10,30688
8111d07c:	d9001b17 	ldw	r4,108(sp)
8111d080:	da802415 	stw	r10,144(sp)
8111d084:	382b883a 	mov	r21,r7
8111d088:	050001c4 	movi	r20,7
8111d08c:	df002017 	ldw	fp,128(sp)
8111d090:	00000506 	br	8111d0a8 <___vfiprintf_internal_r+0xdd8>
8111d094:	21400084 	addi	r5,r4,2
8111d098:	42000204 	addi	r8,r8,8
8111d09c:	1809883a 	mov	r4,r3
8111d0a0:	9cfffc04 	addi	r19,r19,-16
8111d0a4:	acffc40e 	bge	r21,r19,8111cfb8 <__reset+0xfb0fcfb8>
8111d0a8:	10800404 	addi	r2,r2,16
8111d0ac:	20c00044 	addi	r3,r4,1
8111d0b0:	45800015 	stw	r22,0(r8)
8111d0b4:	45400115 	stw	r21,4(r8)
8111d0b8:	d8801c15 	stw	r2,112(sp)
8111d0bc:	d8c01b15 	stw	r3,108(sp)
8111d0c0:	a0fff40e 	bge	r20,r3,8111d094 <__reset+0xfb0fd094>
8111d0c4:	1000041e 	bne	r2,zero,8111d0d8 <___vfiprintf_internal_r+0xe08>
8111d0c8:	01400044 	movi	r5,1
8111d0cc:	0009883a 	mov	r4,zero
8111d0d0:	d811883a 	mov	r8,sp
8111d0d4:	003ff206 	br	8111d0a0 <__reset+0xfb0fd0a0>
8111d0d8:	d9402117 	ldw	r5,132(sp)
8111d0dc:	d9801a04 	addi	r6,sp,104
8111d0e0:	e009883a 	mov	r4,fp
8111d0e4:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d0e8:	103fcd1e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d0ec:	d9001b17 	ldw	r4,108(sp)
8111d0f0:	d8801c17 	ldw	r2,112(sp)
8111d0f4:	d811883a 	mov	r8,sp
8111d0f8:	21400044 	addi	r5,r4,1
8111d0fc:	003fe806 	br	8111d0a0 <__reset+0xfb0fd0a0>
8111d100:	d9402117 	ldw	r5,132(sp)
8111d104:	d9002017 	ldw	r4,128(sp)
8111d108:	d9801a04 	addi	r6,sp,104
8111d10c:	d9c02b15 	stw	r7,172(sp)
8111d110:	db402a15 	stw	r13,168(sp)
8111d114:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d118:	d9c02b17 	ldw	r7,172(sp)
8111d11c:	db402a17 	ldw	r13,168(sp)
8111d120:	103fbf1e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d124:	d9401b17 	ldw	r5,108(sp)
8111d128:	d8801c17 	ldw	r2,112(sp)
8111d12c:	d811883a 	mov	r8,sp
8111d130:	29800044 	addi	r6,r5,1
8111d134:	003dc406 	br	8111c848 <__reset+0xfb0fc848>
8111d138:	1000d21e 	bne	r2,zero,8111d484 <___vfiprintf_internal_r+0x11b4>
8111d13c:	d8c01d87 	ldb	r3,118(sp)
8111d140:	18009526 	beq	r3,zero,8111d398 <___vfiprintf_internal_r+0x10c8>
8111d144:	00800044 	movi	r2,1
8111d148:	d8c01d84 	addi	r3,sp,118
8111d14c:	1009883a 	mov	r4,r2
8111d150:	d8c00015 	stw	r3,0(sp)
8111d154:	d8800115 	stw	r2,4(sp)
8111d158:	d811883a 	mov	r8,sp
8111d15c:	200b883a 	mov	r5,r4
8111d160:	42000204 	addi	r8,r8,8
8111d164:	21000044 	addi	r4,r4,1
8111d168:	003d9706 	br	8111c7c8 <__reset+0xfb0fc7c8>
8111d16c:	d9001d04 	addi	r4,sp,116
8111d170:	00800084 	movi	r2,2
8111d174:	d9000015 	stw	r4,0(sp)
8111d178:	d8800115 	stw	r2,4(sp)
8111d17c:	1809883a 	mov	r4,r3
8111d180:	d811883a 	mov	r8,sp
8111d184:	200b883a 	mov	r5,r4
8111d188:	42000204 	addi	r8,r8,8
8111d18c:	21000044 	addi	r4,r4,1
8111d190:	003f4e06 	br	8111cecc <__reset+0xfb0fcecc>
8111d194:	d8001d85 	stb	zero,118(sp)
8111d198:	48005016 	blt	r9,zero,8111d2dc <___vfiprintf_internal_r+0x100c>
8111d19c:	00ffdfc4 	movi	r3,-129
8111d1a0:	94c4b03a 	or	r2,r18,r19
8111d1a4:	a0e8703a 	and	r20,r20,r3
8111d1a8:	103d4426 	beq	r2,zero,8111c6bc <__reset+0xfb0fc6bc>
8111d1ac:	0039883a 	mov	fp,zero
8111d1b0:	d9002617 	ldw	r4,152(sp)
8111d1b4:	dd401a04 	addi	r21,sp,104
8111d1b8:	908003cc 	andi	r2,r18,15
8111d1bc:	9806973a 	slli	r3,r19,28
8111d1c0:	2085883a 	add	r2,r4,r2
8111d1c4:	9024d13a 	srli	r18,r18,4
8111d1c8:	10800003 	ldbu	r2,0(r2)
8111d1cc:	9826d13a 	srli	r19,r19,4
8111d1d0:	ad7fffc4 	addi	r21,r21,-1
8111d1d4:	1ca4b03a 	or	r18,r3,r18
8111d1d8:	a8800005 	stb	r2,0(r21)
8111d1dc:	94c4b03a 	or	r2,r18,r19
8111d1e0:	103ff51e 	bne	r2,zero,8111d1b8 <__reset+0xfb0fd1b8>
8111d1e4:	003e5906 	br	8111cb4c <__reset+0xfb0fcb4c>
8111d1e8:	d9402117 	ldw	r5,132(sp)
8111d1ec:	d9002017 	ldw	r4,128(sp)
8111d1f0:	d9801a04 	addi	r6,sp,104
8111d1f4:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d1f8:	103f891e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d1fc:	d8801c17 	ldw	r2,112(sp)
8111d200:	d811883a 	mov	r8,sp
8111d204:	003f9506 	br	8111d05c <__reset+0xfb0fd05c>
8111d208:	d9402117 	ldw	r5,132(sp)
8111d20c:	d9002017 	ldw	r4,128(sp)
8111d210:	d9801a04 	addi	r6,sp,104
8111d214:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d218:	103f811e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d21c:	d811883a 	mov	r8,sp
8111d220:	003ced06 	br	8111c5d8 <__reset+0xfb0fc5d8>
8111d224:	d9402117 	ldw	r5,132(sp)
8111d228:	d9002017 	ldw	r4,128(sp)
8111d22c:	d9801a04 	addi	r6,sp,104
8111d230:	da402c15 	stw	r9,176(sp)
8111d234:	db802a15 	stw	r14,168(sp)
8111d238:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d23c:	da402c17 	ldw	r9,176(sp)
8111d240:	db802a17 	ldw	r14,168(sp)
8111d244:	103f761e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d248:	d9401b17 	ldw	r5,108(sp)
8111d24c:	d8801c17 	ldw	r2,112(sp)
8111d250:	d811883a 	mov	r8,sp
8111d254:	29000044 	addi	r4,r5,1
8111d258:	003d5b06 	br	8111c7c8 <__reset+0xfb0fc7c8>
8111d25c:	d9402117 	ldw	r5,132(sp)
8111d260:	d9002017 	ldw	r4,128(sp)
8111d264:	d9801a04 	addi	r6,sp,104
8111d268:	da402c15 	stw	r9,176(sp)
8111d26c:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d270:	da402c17 	ldw	r9,176(sp)
8111d274:	103f6a1e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d278:	d9401b17 	ldw	r5,108(sp)
8111d27c:	d8801c17 	ldw	r2,112(sp)
8111d280:	d811883a 	mov	r8,sp
8111d284:	29000044 	addi	r4,r5,1
8111d288:	003f1006 	br	8111cecc <__reset+0xfb0fcecc>
8111d28c:	1000c31e 	bne	r2,zero,8111d59c <___vfiprintf_internal_r+0x12cc>
8111d290:	01000044 	movi	r4,1
8111d294:	000b883a 	mov	r5,zero
8111d298:	d811883a 	mov	r8,sp
8111d29c:	003f0d06 	br	8111ced4 <__reset+0xfb0fced4>
8111d2a0:	d9402117 	ldw	r5,132(sp)
8111d2a4:	d9002017 	ldw	r4,128(sp)
8111d2a8:	d9801a04 	addi	r6,sp,104
8111d2ac:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d2b0:	103f5b1e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d2b4:	d9001b17 	ldw	r4,108(sp)
8111d2b8:	d8801c17 	ldw	r2,112(sp)
8111d2bc:	d811883a 	mov	r8,sp
8111d2c0:	21000044 	addi	r4,r4,1
8111d2c4:	003d8006 	br	8111c8c8 <__reset+0xfb0fc8c8>
8111d2c8:	012044f4 	movhi	r4,33043
8111d2cc:	211d6204 	addi	r4,r4,30088
8111d2d0:	d9002615 	stw	r4,152(sp)
8111d2d4:	d8c02215 	stw	r3,136(sp)
8111d2d8:	1029883a 	mov	r20,r2
8111d2dc:	94c4b03a 	or	r2,r18,r19
8111d2e0:	103fb21e 	bne	r2,zero,8111d1ac <__reset+0xfb0fd1ac>
8111d2e4:	0039883a 	mov	fp,zero
8111d2e8:	00800084 	movi	r2,2
8111d2ec:	003e6b06 	br	8111cc9c <__reset+0xfb0fcc9c>
8111d2f0:	da802217 	ldw	r10,136(sp)
8111d2f4:	d8001d85 	stb	zero,118(sp)
8111d2f8:	0027883a 	mov	r19,zero
8111d2fc:	50800104 	addi	r2,r10,4
8111d300:	54800017 	ldw	r18,0(r10)
8111d304:	483e6016 	blt	r9,zero,8111cc88 <__reset+0xfb0fcc88>
8111d308:	00ffdfc4 	movi	r3,-129
8111d30c:	d8802215 	stw	r2,136(sp)
8111d310:	a0e8703a 	and	r20,r20,r3
8111d314:	0039883a 	mov	fp,zero
8111d318:	903ebb26 	beq	r18,zero,8111ce08 <__reset+0xfb0fce08>
8111d31c:	00800244 	movi	r2,9
8111d320:	14bdee36 	bltu	r2,r18,8111cadc <__reset+0xfb0fcadc>
8111d324:	003eba06 	br	8111ce10 <__reset+0xfb0fce10>
8111d328:	00800c04 	movi	r2,48
8111d32c:	d8c01d45 	stb	r3,117(sp)
8111d330:	d8801d05 	stb	r2,116(sp)
8111d334:	d8001d85 	stb	zero,118(sp)
8111d338:	a0c00094 	ori	r3,r20,2
8111d33c:	4800a916 	blt	r9,zero,8111d5e4 <___vfiprintf_internal_r+0x1314>
8111d340:	00bfdfc4 	movi	r2,-129
8111d344:	a096703a 	and	r11,r20,r2
8111d348:	5d000094 	ori	r20,r11,2
8111d34c:	0039883a 	mov	fp,zero
8111d350:	003f9706 	br	8111d1b0 <__reset+0xfb0fd1b0>
8111d354:	8025883a 	mov	r18,r16
8111d358:	003c2e06 	br	8111c414 <__reset+0xfb0fc414>
8111d35c:	00a044f4 	movhi	r2,33043
8111d360:	109d6204 	addi	r2,r2,30088
8111d364:	0039883a 	mov	fp,zero
8111d368:	d8802615 	stw	r2,152(sp)
8111d36c:	003f9006 	br	8111d1b0 <__reset+0xfb0fd1b0>
8111d370:	04a5c83a 	sub	r18,zero,r18
8111d374:	07000b44 	movi	fp,45
8111d378:	9004c03a 	cmpne	r2,r18,zero
8111d37c:	04e7c83a 	sub	r19,zero,r19
8111d380:	df001d85 	stb	fp,118(sp)
8111d384:	98a7c83a 	sub	r19,r19,r2
8111d388:	48009f16 	blt	r9,zero,8111d608 <___vfiprintf_internal_r+0x1338>
8111d38c:	00bfdfc4 	movi	r2,-129
8111d390:	a0a8703a 	and	r20,r20,r2
8111d394:	003dd006 	br	8111cad8 <__reset+0xfb0fcad8>
8111d398:	70004c26 	beq	r14,zero,8111d4cc <___vfiprintf_internal_r+0x11fc>
8111d39c:	00800084 	movi	r2,2
8111d3a0:	d8c01d04 	addi	r3,sp,116
8111d3a4:	d8c00015 	stw	r3,0(sp)
8111d3a8:	d8800115 	stw	r2,4(sp)
8111d3ac:	01000044 	movi	r4,1
8111d3b0:	d811883a 	mov	r8,sp
8111d3b4:	003f7306 	br	8111d184 <__reset+0xfb0fd184>
8111d3b8:	a080100c 	andi	r2,r20,64
8111d3bc:	da802217 	ldw	r10,136(sp)
8111d3c0:	103e0626 	beq	r2,zero,8111cbdc <__reset+0xfb0fcbdc>
8111d3c4:	5480000f 	ldh	r18,0(r10)
8111d3c8:	52800104 	addi	r10,r10,4
8111d3cc:	da802215 	stw	r10,136(sp)
8111d3d0:	9027d7fa 	srai	r19,r18,31
8111d3d4:	9805883a 	mov	r2,r19
8111d3d8:	003db806 	br	8111cabc <__reset+0xfb0fcabc>
8111d3dc:	a080040c 	andi	r2,r20,16
8111d3e0:	1000091e 	bne	r2,zero,8111d408 <___vfiprintf_internal_r+0x1138>
8111d3e4:	a2c0100c 	andi	r11,r20,64
8111d3e8:	58000726 	beq	r11,zero,8111d408 <___vfiprintf_internal_r+0x1138>
8111d3ec:	da802217 	ldw	r10,136(sp)
8111d3f0:	50800017 	ldw	r2,0(r10)
8111d3f4:	52800104 	addi	r10,r10,4
8111d3f8:	da802215 	stw	r10,136(sp)
8111d3fc:	da802317 	ldw	r10,140(sp)
8111d400:	1280000d 	sth	r10,0(r2)
8111d404:	003be706 	br	8111c3a4 <__reset+0xfb0fc3a4>
8111d408:	da802217 	ldw	r10,136(sp)
8111d40c:	50800017 	ldw	r2,0(r10)
8111d410:	52800104 	addi	r10,r10,4
8111d414:	da802215 	stw	r10,136(sp)
8111d418:	da802317 	ldw	r10,140(sp)
8111d41c:	12800015 	stw	r10,0(r2)
8111d420:	003be006 	br	8111c3a4 <__reset+0xfb0fc3a4>
8111d424:	a080100c 	andi	r2,r20,64
8111d428:	da802217 	ldw	r10,136(sp)
8111d42c:	10003026 	beq	r2,zero,8111d4f0 <___vfiprintf_internal_r+0x1220>
8111d430:	5480000b 	ldhu	r18,0(r10)
8111d434:	52800104 	addi	r10,r10,4
8111d438:	0027883a 	mov	r19,zero
8111d43c:	da802215 	stw	r10,136(sp)
8111d440:	003d8006 	br	8111ca44 <__reset+0xfb0fca44>
8111d444:	80c00007 	ldb	r3,0(r16)
8111d448:	003c0006 	br	8111c44c <__reset+0xfb0fc44c>
8111d44c:	a080100c 	andi	r2,r20,64
8111d450:	d8001d85 	stb	zero,118(sp)
8111d454:	da802217 	ldw	r10,136(sp)
8111d458:	1000201e 	bne	r2,zero,8111d4dc <___vfiprintf_internal_r+0x120c>
8111d45c:	50800104 	addi	r2,r10,4
8111d460:	54800017 	ldw	r18,0(r10)
8111d464:	0027883a 	mov	r19,zero
8111d468:	483def0e 	bge	r9,zero,8111cc28 <__reset+0xfb0fcc28>
8111d46c:	94c6b03a 	or	r3,r18,r19
8111d470:	d8802215 	stw	r2,136(sp)
8111d474:	183d4e1e 	bne	r3,zero,8111c9b0 <__reset+0xfb0fc9b0>
8111d478:	0039883a 	mov	fp,zero
8111d47c:	0005883a 	mov	r2,zero
8111d480:	003e0606 	br	8111cc9c <__reset+0xfb0fcc9c>
8111d484:	d9402117 	ldw	r5,132(sp)
8111d488:	d9002017 	ldw	r4,128(sp)
8111d48c:	d9801a04 	addi	r6,sp,104
8111d490:	da402c15 	stw	r9,176(sp)
8111d494:	db802a15 	stw	r14,168(sp)
8111d498:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d49c:	da402c17 	ldw	r9,176(sp)
8111d4a0:	db802a17 	ldw	r14,168(sp)
8111d4a4:	103ede1e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d4a8:	d9401b17 	ldw	r5,108(sp)
8111d4ac:	d8801c17 	ldw	r2,112(sp)
8111d4b0:	d811883a 	mov	r8,sp
8111d4b4:	29000044 	addi	r4,r5,1
8111d4b8:	003e7406 	br	8111ce8c <__reset+0xfb0fce8c>
8111d4bc:	00bfffc4 	movi	r2,-1
8111d4c0:	003c5806 	br	8111c624 <__reset+0xfb0fc624>
8111d4c4:	d811883a 	mov	r8,sp
8111d4c8:	003ee806 	br	8111d06c <__reset+0xfb0fd06c>
8111d4cc:	000b883a 	mov	r5,zero
8111d4d0:	01000044 	movi	r4,1
8111d4d4:	d811883a 	mov	r8,sp
8111d4d8:	003e7c06 	br	8111cecc <__reset+0xfb0fcecc>
8111d4dc:	50800104 	addi	r2,r10,4
8111d4e0:	5480000b 	ldhu	r18,0(r10)
8111d4e4:	0027883a 	mov	r19,zero
8111d4e8:	483dcf0e 	bge	r9,zero,8111cc28 <__reset+0xfb0fcc28>
8111d4ec:	003fdf06 	br	8111d46c <__reset+0xfb0fd46c>
8111d4f0:	54800017 	ldw	r18,0(r10)
8111d4f4:	52800104 	addi	r10,r10,4
8111d4f8:	0027883a 	mov	r19,zero
8111d4fc:	da802215 	stw	r10,136(sp)
8111d500:	003d5006 	br	8111ca44 <__reset+0xfb0fca44>
8111d504:	50800104 	addi	r2,r10,4
8111d508:	5480000b 	ldhu	r18,0(r10)
8111d50c:	0027883a 	mov	r19,zero
8111d510:	483f7d0e 	bge	r9,zero,8111d308 <__reset+0xfb0fd308>
8111d514:	003ddc06 	br	8111cc88 <__reset+0xfb0fcc88>
8111d518:	d8c02215 	stw	r3,136(sp)
8111d51c:	0039883a 	mov	fp,zero
8111d520:	003ddb06 	br	8111cc90 <__reset+0xfb0fcc90>
8111d524:	02a044f4 	movhi	r10,33043
8111d528:	529df404 	addi	r10,r10,30672
8111d52c:	da802415 	stw	r10,144(sp)
8111d530:	003e8306 	br	8111cf40 <__reset+0xfb0fcf40>
8111d534:	d8801c17 	ldw	r2,112(sp)
8111d538:	dd002117 	ldw	r20,132(sp)
8111d53c:	103eb926 	beq	r2,zero,8111d024 <__reset+0xfb0fd024>
8111d540:	d9002017 	ldw	r4,128(sp)
8111d544:	d9801a04 	addi	r6,sp,104
8111d548:	a00b883a 	mov	r5,r20
8111d54c:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d550:	003eb406 	br	8111d024 <__reset+0xfb0fd024>
8111d554:	80c00043 	ldbu	r3,1(r16)
8111d558:	a5000814 	ori	r20,r20,32
8111d55c:	84000044 	addi	r16,r16,1
8111d560:	18c03fcc 	andi	r3,r3,255
8111d564:	18c0201c 	xori	r3,r3,128
8111d568:	18ffe004 	addi	r3,r3,-128
8111d56c:	003bb706 	br	8111c44c <__reset+0xfb0fc44c>
8111d570:	a809883a 	mov	r4,r21
8111d574:	d8c02a15 	stw	r3,168(sp)
8111d578:	da002b15 	stw	r8,172(sp)
8111d57c:	110ddac0 	call	8110ddac <strlen>
8111d580:	d8c02a17 	ldw	r3,168(sp)
8111d584:	1027883a 	mov	r19,r2
8111d588:	df001d83 	ldbu	fp,118(sp)
8111d58c:	d8c02215 	stw	r3,136(sp)
8111d590:	0013883a 	mov	r9,zero
8111d594:	da002b17 	ldw	r8,172(sp)
8111d598:	003c4d06 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111d59c:	d9402117 	ldw	r5,132(sp)
8111d5a0:	d9002017 	ldw	r4,128(sp)
8111d5a4:	d9801a04 	addi	r6,sp,104
8111d5a8:	da402c15 	stw	r9,176(sp)
8111d5ac:	111c1bc0 	call	8111c1bc <__sprint_r.part.0>
8111d5b0:	da402c17 	ldw	r9,176(sp)
8111d5b4:	103e9a1e 	bne	r2,zero,8111d020 <__reset+0xfb0fd020>
8111d5b8:	d9401b17 	ldw	r5,108(sp)
8111d5bc:	d8801c17 	ldw	r2,112(sp)
8111d5c0:	d811883a 	mov	r8,sp
8111d5c4:	29000044 	addi	r4,r5,1
8111d5c8:	003e4206 	br	8111ced4 <__reset+0xfb0fced4>
8111d5cc:	d9401b17 	ldw	r5,108(sp)
8111d5d0:	012044f4 	movhi	r4,33043
8111d5d4:	211df804 	addi	r4,r4,30688
8111d5d8:	d9002415 	stw	r4,144(sp)
8111d5dc:	29400044 	addi	r5,r5,1
8111d5e0:	003c6d06 	br	8111c798 <__reset+0xfb0fc798>
8111d5e4:	0039883a 	mov	fp,zero
8111d5e8:	00800084 	movi	r2,2
8111d5ec:	10803fcc 	andi	r2,r2,255
8111d5f0:	01000044 	movi	r4,1
8111d5f4:	11001e26 	beq	r2,r4,8111d670 <___vfiprintf_internal_r+0x13a0>
8111d5f8:	01000084 	movi	r4,2
8111d5fc:	11001e1e 	bne	r2,r4,8111d678 <___vfiprintf_internal_r+0x13a8>
8111d600:	1829883a 	mov	r20,r3
8111d604:	003eea06 	br	8111d1b0 <__reset+0xfb0fd1b0>
8111d608:	a007883a 	mov	r3,r20
8111d60c:	00800044 	movi	r2,1
8111d610:	003ff606 	br	8111d5ec <__reset+0xfb0fd5ec>
8111d614:	00800184 	movi	r2,6
8111d618:	1240012e 	bgeu	r2,r9,8111d620 <___vfiprintf_internal_r+0x1350>
8111d61c:	1013883a 	mov	r9,r2
8111d620:	4827883a 	mov	r19,r9
8111d624:	4825883a 	mov	r18,r9
8111d628:	48001516 	blt	r9,zero,8111d680 <___vfiprintf_internal_r+0x13b0>
8111d62c:	056044f4 	movhi	r21,33043
8111d630:	d8c02215 	stw	r3,136(sp)
8111d634:	ad5d6704 	addi	r21,r21,30108
8111d638:	003d1406 	br	8111ca8c <__reset+0xfb0fca8c>
8111d63c:	02a044f4 	movhi	r10,33043
8111d640:	529df404 	addi	r10,r10,30672
8111d644:	da802415 	stw	r10,144(sp)
8111d648:	200d883a 	mov	r6,r4
8111d64c:	003c9106 	br	8111c894 <__reset+0xfb0fc894>
8111d650:	5021883a 	mov	r16,r10
8111d654:	0013883a 	mov	r9,zero
8111d658:	003b7d06 	br	8111c450 <__reset+0xfb0fc450>
8111d65c:	4827883a 	mov	r19,r9
8111d660:	df001d83 	ldbu	fp,118(sp)
8111d664:	d8c02215 	stw	r3,136(sp)
8111d668:	0013883a 	mov	r9,zero
8111d66c:	003c1806 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111d670:	1829883a 	mov	r20,r3
8111d674:	003d1806 	br	8111cad8 <__reset+0xfb0fcad8>
8111d678:	1829883a 	mov	r20,r3
8111d67c:	003ccd06 	br	8111c9b4 <__reset+0xfb0fc9b4>
8111d680:	0025883a 	mov	r18,zero
8111d684:	003fe906 	br	8111d62c <__reset+0xfb0fd62c>
8111d688:	d8802217 	ldw	r2,136(sp)
8111d68c:	80c00043 	ldbu	r3,1(r16)
8111d690:	5021883a 	mov	r16,r10
8111d694:	12400017 	ldw	r9,0(r2)
8111d698:	10800104 	addi	r2,r2,4
8111d69c:	d8802215 	stw	r2,136(sp)
8111d6a0:	483faf0e 	bge	r9,zero,8111d560 <__reset+0xfb0fd560>
8111d6a4:	18c03fcc 	andi	r3,r3,255
8111d6a8:	18c0201c 	xori	r3,r3,128
8111d6ac:	027fffc4 	movi	r9,-1
8111d6b0:	18ffe004 	addi	r3,r3,-128
8111d6b4:	003b6506 	br	8111c44c <__reset+0xfb0fc44c>
8111d6b8:	d9c01d85 	stb	r7,118(sp)
8111d6bc:	003ca006 	br	8111c940 <__reset+0xfb0fc940>
8111d6c0:	d9c01d85 	stb	r7,118(sp)
8111d6c4:	003cad06 	br	8111c97c <__reset+0xfb0fc97c>
8111d6c8:	d9c01d85 	stb	r7,118(sp)
8111d6cc:	003d7d06 	br	8111ccc4 <__reset+0xfb0fccc4>
8111d6d0:	d9c01d85 	stb	r7,118(sp)
8111d6d4:	003d5f06 	br	8111cc54 <__reset+0xfb0fcc54>
8111d6d8:	a080004c 	andi	r2,r20,1
8111d6dc:	0039883a 	mov	fp,zero
8111d6e0:	10000526 	beq	r2,zero,8111d6f8 <___vfiprintf_internal_r+0x1428>
8111d6e4:	00800c04 	movi	r2,48
8111d6e8:	d88019c5 	stb	r2,103(sp)
8111d6ec:	dcc02717 	ldw	r19,156(sp)
8111d6f0:	dd4019c4 	addi	r21,sp,103
8111d6f4:	003bf606 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111d6f8:	0027883a 	mov	r19,zero
8111d6fc:	dd401a04 	addi	r21,sp,104
8111d700:	003bf306 	br	8111c6d0 <__reset+0xfb0fc6d0>
8111d704:	d9c01d85 	stb	r7,118(sp)
8111d708:	003dc806 	br	8111ce2c <__reset+0xfb0fce2c>
8111d70c:	d9c01d85 	stb	r7,118(sp)
8111d710:	003d3a06 	br	8111cbfc <__reset+0xfb0fcbfc>
8111d714:	d9c01d85 	stb	r7,118(sp)
8111d718:	003d2a06 	br	8111cbc4 <__reset+0xfb0fcbc4>
8111d71c:	d9c01d85 	stb	r7,118(sp)
8111d720:	003cde06 	br	8111ca9c <__reset+0xfb0fca9c>
8111d724:	d9c01d85 	stb	r7,118(sp)
8111d728:	003cbc06 	br	8111ca1c <__reset+0xfb0fca1c>

8111d72c <__vfiprintf_internal>:
8111d72c:	00a04534 	movhi	r2,33044
8111d730:	10a65b04 	addi	r2,r2,-26260
8111d734:	300f883a 	mov	r7,r6
8111d738:	280d883a 	mov	r6,r5
8111d73c:	200b883a 	mov	r5,r4
8111d740:	11000017 	ldw	r4,0(r2)
8111d744:	111c2d01 	jmpi	8111c2d0 <___vfiprintf_internal_r>

8111d748 <__sbprintf>:
8111d748:	2880030b 	ldhu	r2,12(r5)
8111d74c:	2ac01917 	ldw	r11,100(r5)
8111d750:	2a80038b 	ldhu	r10,14(r5)
8111d754:	2a400717 	ldw	r9,28(r5)
8111d758:	2a000917 	ldw	r8,36(r5)
8111d75c:	defee204 	addi	sp,sp,-1144
8111d760:	00c10004 	movi	r3,1024
8111d764:	dc011a15 	stw	r16,1128(sp)
8111d768:	10bfff4c 	andi	r2,r2,65533
8111d76c:	2821883a 	mov	r16,r5
8111d770:	d8cb883a 	add	r5,sp,r3
8111d774:	dc811c15 	stw	r18,1136(sp)
8111d778:	dc411b15 	stw	r17,1132(sp)
8111d77c:	dfc11d15 	stw	ra,1140(sp)
8111d780:	2025883a 	mov	r18,r4
8111d784:	d881030d 	sth	r2,1036(sp)
8111d788:	dac11915 	stw	r11,1124(sp)
8111d78c:	da81038d 	sth	r10,1038(sp)
8111d790:	da410715 	stw	r9,1052(sp)
8111d794:	da010915 	stw	r8,1060(sp)
8111d798:	dec10015 	stw	sp,1024(sp)
8111d79c:	dec10415 	stw	sp,1040(sp)
8111d7a0:	d8c10215 	stw	r3,1032(sp)
8111d7a4:	d8c10515 	stw	r3,1044(sp)
8111d7a8:	d8010615 	stw	zero,1048(sp)
8111d7ac:	111c2d00 	call	8111c2d0 <___vfiprintf_internal_r>
8111d7b0:	1023883a 	mov	r17,r2
8111d7b4:	10000416 	blt	r2,zero,8111d7c8 <__sbprintf+0x80>
8111d7b8:	d9410004 	addi	r5,sp,1024
8111d7bc:	9009883a 	mov	r4,r18
8111d7c0:	1115a780 	call	81115a78 <_fflush_r>
8111d7c4:	10000d1e 	bne	r2,zero,8111d7fc <__sbprintf+0xb4>
8111d7c8:	d881030b 	ldhu	r2,1036(sp)
8111d7cc:	1080100c 	andi	r2,r2,64
8111d7d0:	10000326 	beq	r2,zero,8111d7e0 <__sbprintf+0x98>
8111d7d4:	8080030b 	ldhu	r2,12(r16)
8111d7d8:	10801014 	ori	r2,r2,64
8111d7dc:	8080030d 	sth	r2,12(r16)
8111d7e0:	8805883a 	mov	r2,r17
8111d7e4:	dfc11d17 	ldw	ra,1140(sp)
8111d7e8:	dc811c17 	ldw	r18,1136(sp)
8111d7ec:	dc411b17 	ldw	r17,1132(sp)
8111d7f0:	dc011a17 	ldw	r16,1128(sp)
8111d7f4:	dec11e04 	addi	sp,sp,1144
8111d7f8:	f800283a 	ret
8111d7fc:	047fffc4 	movi	r17,-1
8111d800:	003ff106 	br	8111d7c8 <__reset+0xfb0fd7c8>

8111d804 <__swbuf_r>:
8111d804:	defffb04 	addi	sp,sp,-20
8111d808:	dcc00315 	stw	r19,12(sp)
8111d80c:	dc800215 	stw	r18,8(sp)
8111d810:	dc000015 	stw	r16,0(sp)
8111d814:	dfc00415 	stw	ra,16(sp)
8111d818:	dc400115 	stw	r17,4(sp)
8111d81c:	2025883a 	mov	r18,r4
8111d820:	2827883a 	mov	r19,r5
8111d824:	3021883a 	mov	r16,r6
8111d828:	20000226 	beq	r4,zero,8111d834 <__swbuf_r+0x30>
8111d82c:	20800e17 	ldw	r2,56(r4)
8111d830:	10004226 	beq	r2,zero,8111d93c <__swbuf_r+0x138>
8111d834:	80800617 	ldw	r2,24(r16)
8111d838:	8100030b 	ldhu	r4,12(r16)
8111d83c:	80800215 	stw	r2,8(r16)
8111d840:	2080020c 	andi	r2,r4,8
8111d844:	10003626 	beq	r2,zero,8111d920 <__swbuf_r+0x11c>
8111d848:	80c00417 	ldw	r3,16(r16)
8111d84c:	18003426 	beq	r3,zero,8111d920 <__swbuf_r+0x11c>
8111d850:	2088000c 	andi	r2,r4,8192
8111d854:	9c403fcc 	andi	r17,r19,255
8111d858:	10001a26 	beq	r2,zero,8111d8c4 <__swbuf_r+0xc0>
8111d85c:	80800017 	ldw	r2,0(r16)
8111d860:	81000517 	ldw	r4,20(r16)
8111d864:	10c7c83a 	sub	r3,r2,r3
8111d868:	1900200e 	bge	r3,r4,8111d8ec <__swbuf_r+0xe8>
8111d86c:	18c00044 	addi	r3,r3,1
8111d870:	81000217 	ldw	r4,8(r16)
8111d874:	11400044 	addi	r5,r2,1
8111d878:	81400015 	stw	r5,0(r16)
8111d87c:	213fffc4 	addi	r4,r4,-1
8111d880:	81000215 	stw	r4,8(r16)
8111d884:	14c00005 	stb	r19,0(r2)
8111d888:	80800517 	ldw	r2,20(r16)
8111d88c:	10c01e26 	beq	r2,r3,8111d908 <__swbuf_r+0x104>
8111d890:	8080030b 	ldhu	r2,12(r16)
8111d894:	1080004c 	andi	r2,r2,1
8111d898:	10000226 	beq	r2,zero,8111d8a4 <__swbuf_r+0xa0>
8111d89c:	00800284 	movi	r2,10
8111d8a0:	88801926 	beq	r17,r2,8111d908 <__swbuf_r+0x104>
8111d8a4:	8805883a 	mov	r2,r17
8111d8a8:	dfc00417 	ldw	ra,16(sp)
8111d8ac:	dcc00317 	ldw	r19,12(sp)
8111d8b0:	dc800217 	ldw	r18,8(sp)
8111d8b4:	dc400117 	ldw	r17,4(sp)
8111d8b8:	dc000017 	ldw	r16,0(sp)
8111d8bc:	dec00504 	addi	sp,sp,20
8111d8c0:	f800283a 	ret
8111d8c4:	81401917 	ldw	r5,100(r16)
8111d8c8:	00b7ffc4 	movi	r2,-8193
8111d8cc:	21080014 	ori	r4,r4,8192
8111d8d0:	2884703a 	and	r2,r5,r2
8111d8d4:	80801915 	stw	r2,100(r16)
8111d8d8:	80800017 	ldw	r2,0(r16)
8111d8dc:	8100030d 	sth	r4,12(r16)
8111d8e0:	81000517 	ldw	r4,20(r16)
8111d8e4:	10c7c83a 	sub	r3,r2,r3
8111d8e8:	193fe016 	blt	r3,r4,8111d86c <__reset+0xfb0fd86c>
8111d8ec:	800b883a 	mov	r5,r16
8111d8f0:	9009883a 	mov	r4,r18
8111d8f4:	1115a780 	call	81115a78 <_fflush_r>
8111d8f8:	1000071e 	bne	r2,zero,8111d918 <__swbuf_r+0x114>
8111d8fc:	80800017 	ldw	r2,0(r16)
8111d900:	00c00044 	movi	r3,1
8111d904:	003fda06 	br	8111d870 <__reset+0xfb0fd870>
8111d908:	800b883a 	mov	r5,r16
8111d90c:	9009883a 	mov	r4,r18
8111d910:	1115a780 	call	81115a78 <_fflush_r>
8111d914:	103fe326 	beq	r2,zero,8111d8a4 <__reset+0xfb0fd8a4>
8111d918:	00bfffc4 	movi	r2,-1
8111d91c:	003fe206 	br	8111d8a8 <__reset+0xfb0fd8a8>
8111d920:	800b883a 	mov	r5,r16
8111d924:	9009883a 	mov	r4,r18
8111d928:	1113e2c0 	call	81113e2c <__swsetup_r>
8111d92c:	103ffa1e 	bne	r2,zero,8111d918 <__reset+0xfb0fd918>
8111d930:	8100030b 	ldhu	r4,12(r16)
8111d934:	80c00417 	ldw	r3,16(r16)
8111d938:	003fc506 	br	8111d850 <__reset+0xfb0fd850>
8111d93c:	1115e540 	call	81115e54 <__sinit>
8111d940:	003fbc06 	br	8111d834 <__reset+0xfb0fd834>

8111d944 <__swbuf>:
8111d944:	00a04534 	movhi	r2,33044
8111d948:	10a65b04 	addi	r2,r2,-26260
8111d94c:	280d883a 	mov	r6,r5
8111d950:	200b883a 	mov	r5,r4
8111d954:	11000017 	ldw	r4,0(r2)
8111d958:	111d8041 	jmpi	8111d804 <__swbuf_r>

8111d95c <_calloc_r>:
8111d95c:	298b383a 	mul	r5,r5,r6
8111d960:	defffe04 	addi	sp,sp,-8
8111d964:	dfc00115 	stw	ra,4(sp)
8111d968:	dc000015 	stw	r16,0(sp)
8111d96c:	110cc740 	call	8110cc74 <_malloc_r>
8111d970:	10002926 	beq	r2,zero,8111da18 <_calloc_r+0xbc>
8111d974:	11bfff17 	ldw	r6,-4(r2)
8111d978:	1021883a 	mov	r16,r2
8111d97c:	00bfff04 	movi	r2,-4
8111d980:	308c703a 	and	r6,r6,r2
8111d984:	00c00904 	movi	r3,36
8111d988:	308d883a 	add	r6,r6,r2
8111d98c:	19801636 	bltu	r3,r6,8111d9e8 <_calloc_r+0x8c>
8111d990:	008004c4 	movi	r2,19
8111d994:	11800b2e 	bgeu	r2,r6,8111d9c4 <_calloc_r+0x68>
8111d998:	80000015 	stw	zero,0(r16)
8111d99c:	80000115 	stw	zero,4(r16)
8111d9a0:	008006c4 	movi	r2,27
8111d9a4:	11801a2e 	bgeu	r2,r6,8111da10 <_calloc_r+0xb4>
8111d9a8:	80000215 	stw	zero,8(r16)
8111d9ac:	80000315 	stw	zero,12(r16)
8111d9b0:	30c0151e 	bne	r6,r3,8111da08 <_calloc_r+0xac>
8111d9b4:	80000415 	stw	zero,16(r16)
8111d9b8:	80800604 	addi	r2,r16,24
8111d9bc:	80000515 	stw	zero,20(r16)
8111d9c0:	00000106 	br	8111d9c8 <_calloc_r+0x6c>
8111d9c4:	8005883a 	mov	r2,r16
8111d9c8:	10000015 	stw	zero,0(r2)
8111d9cc:	10000115 	stw	zero,4(r2)
8111d9d0:	10000215 	stw	zero,8(r2)
8111d9d4:	8005883a 	mov	r2,r16
8111d9d8:	dfc00117 	ldw	ra,4(sp)
8111d9dc:	dc000017 	ldw	r16,0(sp)
8111d9e0:	dec00204 	addi	sp,sp,8
8111d9e4:	f800283a 	ret
8111d9e8:	000b883a 	mov	r5,zero
8111d9ec:	8009883a 	mov	r4,r16
8111d9f0:	110d5c80 	call	8110d5c8 <memset>
8111d9f4:	8005883a 	mov	r2,r16
8111d9f8:	dfc00117 	ldw	ra,4(sp)
8111d9fc:	dc000017 	ldw	r16,0(sp)
8111da00:	dec00204 	addi	sp,sp,8
8111da04:	f800283a 	ret
8111da08:	80800404 	addi	r2,r16,16
8111da0c:	003fee06 	br	8111d9c8 <__reset+0xfb0fd9c8>
8111da10:	80800204 	addi	r2,r16,8
8111da14:	003fec06 	br	8111d9c8 <__reset+0xfb0fd9c8>
8111da18:	0005883a 	mov	r2,zero
8111da1c:	003fee06 	br	8111d9d8 <__reset+0xfb0fd9d8>

8111da20 <_fclose_r>:
8111da20:	28003926 	beq	r5,zero,8111db08 <_fclose_r+0xe8>
8111da24:	defffc04 	addi	sp,sp,-16
8111da28:	dc400115 	stw	r17,4(sp)
8111da2c:	dc000015 	stw	r16,0(sp)
8111da30:	dfc00315 	stw	ra,12(sp)
8111da34:	dc800215 	stw	r18,8(sp)
8111da38:	2023883a 	mov	r17,r4
8111da3c:	2821883a 	mov	r16,r5
8111da40:	20000226 	beq	r4,zero,8111da4c <_fclose_r+0x2c>
8111da44:	20800e17 	ldw	r2,56(r4)
8111da48:	10002726 	beq	r2,zero,8111dae8 <_fclose_r+0xc8>
8111da4c:	8080030f 	ldh	r2,12(r16)
8111da50:	1000071e 	bne	r2,zero,8111da70 <_fclose_r+0x50>
8111da54:	0005883a 	mov	r2,zero
8111da58:	dfc00317 	ldw	ra,12(sp)
8111da5c:	dc800217 	ldw	r18,8(sp)
8111da60:	dc400117 	ldw	r17,4(sp)
8111da64:	dc000017 	ldw	r16,0(sp)
8111da68:	dec00404 	addi	sp,sp,16
8111da6c:	f800283a 	ret
8111da70:	800b883a 	mov	r5,r16
8111da74:	8809883a 	mov	r4,r17
8111da78:	111585c0 	call	8111585c <__sflush_r>
8111da7c:	1025883a 	mov	r18,r2
8111da80:	80800b17 	ldw	r2,44(r16)
8111da84:	10000426 	beq	r2,zero,8111da98 <_fclose_r+0x78>
8111da88:	81400717 	ldw	r5,28(r16)
8111da8c:	8809883a 	mov	r4,r17
8111da90:	103ee83a 	callr	r2
8111da94:	10001616 	blt	r2,zero,8111daf0 <_fclose_r+0xd0>
8111da98:	8080030b 	ldhu	r2,12(r16)
8111da9c:	1080200c 	andi	r2,r2,128
8111daa0:	1000151e 	bne	r2,zero,8111daf8 <_fclose_r+0xd8>
8111daa4:	81400c17 	ldw	r5,48(r16)
8111daa8:	28000526 	beq	r5,zero,8111dac0 <_fclose_r+0xa0>
8111daac:	80801004 	addi	r2,r16,64
8111dab0:	28800226 	beq	r5,r2,8111dabc <_fclose_r+0x9c>
8111dab4:	8809883a 	mov	r4,r17
8111dab8:	11162d40 	call	811162d4 <_free_r>
8111dabc:	80000c15 	stw	zero,48(r16)
8111dac0:	81401117 	ldw	r5,68(r16)
8111dac4:	28000326 	beq	r5,zero,8111dad4 <_fclose_r+0xb4>
8111dac8:	8809883a 	mov	r4,r17
8111dacc:	11162d40 	call	811162d4 <_free_r>
8111dad0:	80001115 	stw	zero,68(r16)
8111dad4:	1115e640 	call	81115e64 <__sfp_lock_acquire>
8111dad8:	8000030d 	sth	zero,12(r16)
8111dadc:	1115e680 	call	81115e68 <__sfp_lock_release>
8111dae0:	9005883a 	mov	r2,r18
8111dae4:	003fdc06 	br	8111da58 <__reset+0xfb0fda58>
8111dae8:	1115e540 	call	81115e54 <__sinit>
8111daec:	003fd706 	br	8111da4c <__reset+0xfb0fda4c>
8111daf0:	04bfffc4 	movi	r18,-1
8111daf4:	003fe806 	br	8111da98 <__reset+0xfb0fda98>
8111daf8:	81400417 	ldw	r5,16(r16)
8111dafc:	8809883a 	mov	r4,r17
8111db00:	11162d40 	call	811162d4 <_free_r>
8111db04:	003fe706 	br	8111daa4 <__reset+0xfb0fdaa4>
8111db08:	0005883a 	mov	r2,zero
8111db0c:	f800283a 	ret

8111db10 <fclose>:
8111db10:	00a04534 	movhi	r2,33044
8111db14:	10a65b04 	addi	r2,r2,-26260
8111db18:	200b883a 	mov	r5,r4
8111db1c:	11000017 	ldw	r4,0(r2)
8111db20:	111da201 	jmpi	8111da20 <_fclose_r>

8111db24 <__fputwc>:
8111db24:	defff804 	addi	sp,sp,-32
8111db28:	dcc00415 	stw	r19,16(sp)
8111db2c:	dc800315 	stw	r18,12(sp)
8111db30:	dc000115 	stw	r16,4(sp)
8111db34:	dfc00715 	stw	ra,28(sp)
8111db38:	dd400615 	stw	r21,24(sp)
8111db3c:	dd000515 	stw	r20,20(sp)
8111db40:	dc400215 	stw	r17,8(sp)
8111db44:	2027883a 	mov	r19,r4
8111db48:	2825883a 	mov	r18,r5
8111db4c:	3021883a 	mov	r16,r6
8111db50:	1116d340 	call	81116d34 <__locale_mb_cur_max>
8111db54:	00c00044 	movi	r3,1
8111db58:	10c03e26 	beq	r2,r3,8111dc54 <__fputwc+0x130>
8111db5c:	81c01704 	addi	r7,r16,92
8111db60:	900d883a 	mov	r6,r18
8111db64:	d80b883a 	mov	r5,sp
8111db68:	9809883a 	mov	r4,r19
8111db6c:	111e9880 	call	8111e988 <_wcrtomb_r>
8111db70:	1029883a 	mov	r20,r2
8111db74:	00bfffc4 	movi	r2,-1
8111db78:	a0802026 	beq	r20,r2,8111dbfc <__fputwc+0xd8>
8111db7c:	d9400003 	ldbu	r5,0(sp)
8111db80:	a0001c26 	beq	r20,zero,8111dbf4 <__fputwc+0xd0>
8111db84:	0023883a 	mov	r17,zero
8111db88:	05400284 	movi	r21,10
8111db8c:	00000906 	br	8111dbb4 <__fputwc+0x90>
8111db90:	80800017 	ldw	r2,0(r16)
8111db94:	11400005 	stb	r5,0(r2)
8111db98:	80c00017 	ldw	r3,0(r16)
8111db9c:	18c00044 	addi	r3,r3,1
8111dba0:	80c00015 	stw	r3,0(r16)
8111dba4:	8c400044 	addi	r17,r17,1
8111dba8:	dc45883a 	add	r2,sp,r17
8111dbac:	8d00112e 	bgeu	r17,r20,8111dbf4 <__fputwc+0xd0>
8111dbb0:	11400003 	ldbu	r5,0(r2)
8111dbb4:	80c00217 	ldw	r3,8(r16)
8111dbb8:	18ffffc4 	addi	r3,r3,-1
8111dbbc:	80c00215 	stw	r3,8(r16)
8111dbc0:	183ff30e 	bge	r3,zero,8111db90 <__reset+0xfb0fdb90>
8111dbc4:	80800617 	ldw	r2,24(r16)
8111dbc8:	18801916 	blt	r3,r2,8111dc30 <__fputwc+0x10c>
8111dbcc:	80800017 	ldw	r2,0(r16)
8111dbd0:	11400005 	stb	r5,0(r2)
8111dbd4:	80800017 	ldw	r2,0(r16)
8111dbd8:	10c00003 	ldbu	r3,0(r2)
8111dbdc:	10800044 	addi	r2,r2,1
8111dbe0:	1d402326 	beq	r3,r21,8111dc70 <__fputwc+0x14c>
8111dbe4:	80800015 	stw	r2,0(r16)
8111dbe8:	8c400044 	addi	r17,r17,1
8111dbec:	dc45883a 	add	r2,sp,r17
8111dbf0:	8d3fef36 	bltu	r17,r20,8111dbb0 <__reset+0xfb0fdbb0>
8111dbf4:	9005883a 	mov	r2,r18
8111dbf8:	00000406 	br	8111dc0c <__fputwc+0xe8>
8111dbfc:	80c0030b 	ldhu	r3,12(r16)
8111dc00:	a005883a 	mov	r2,r20
8111dc04:	18c01014 	ori	r3,r3,64
8111dc08:	80c0030d 	sth	r3,12(r16)
8111dc0c:	dfc00717 	ldw	ra,28(sp)
8111dc10:	dd400617 	ldw	r21,24(sp)
8111dc14:	dd000517 	ldw	r20,20(sp)
8111dc18:	dcc00417 	ldw	r19,16(sp)
8111dc1c:	dc800317 	ldw	r18,12(sp)
8111dc20:	dc400217 	ldw	r17,8(sp)
8111dc24:	dc000117 	ldw	r16,4(sp)
8111dc28:	dec00804 	addi	sp,sp,32
8111dc2c:	f800283a 	ret
8111dc30:	800d883a 	mov	r6,r16
8111dc34:	29403fcc 	andi	r5,r5,255
8111dc38:	9809883a 	mov	r4,r19
8111dc3c:	111d8040 	call	8111d804 <__swbuf_r>
8111dc40:	10bfffe0 	cmpeqi	r2,r2,-1
8111dc44:	10803fcc 	andi	r2,r2,255
8111dc48:	103fd626 	beq	r2,zero,8111dba4 <__reset+0xfb0fdba4>
8111dc4c:	00bfffc4 	movi	r2,-1
8111dc50:	003fee06 	br	8111dc0c <__reset+0xfb0fdc0c>
8111dc54:	90ffffc4 	addi	r3,r18,-1
8111dc58:	01003f84 	movi	r4,254
8111dc5c:	20ffbf36 	bltu	r4,r3,8111db5c <__reset+0xfb0fdb5c>
8111dc60:	900b883a 	mov	r5,r18
8111dc64:	dc800005 	stb	r18,0(sp)
8111dc68:	1029883a 	mov	r20,r2
8111dc6c:	003fc506 	br	8111db84 <__reset+0xfb0fdb84>
8111dc70:	800d883a 	mov	r6,r16
8111dc74:	a80b883a 	mov	r5,r21
8111dc78:	9809883a 	mov	r4,r19
8111dc7c:	111d8040 	call	8111d804 <__swbuf_r>
8111dc80:	10bfffe0 	cmpeqi	r2,r2,-1
8111dc84:	003fef06 	br	8111dc44 <__reset+0xfb0fdc44>

8111dc88 <_fputwc_r>:
8111dc88:	3080030b 	ldhu	r2,12(r6)
8111dc8c:	10c8000c 	andi	r3,r2,8192
8111dc90:	1800051e 	bne	r3,zero,8111dca8 <_fputwc_r+0x20>
8111dc94:	30c01917 	ldw	r3,100(r6)
8111dc98:	10880014 	ori	r2,r2,8192
8111dc9c:	3080030d 	sth	r2,12(r6)
8111dca0:	18880014 	ori	r2,r3,8192
8111dca4:	30801915 	stw	r2,100(r6)
8111dca8:	111db241 	jmpi	8111db24 <__fputwc>

8111dcac <fputwc>:
8111dcac:	00a04534 	movhi	r2,33044
8111dcb0:	defffc04 	addi	sp,sp,-16
8111dcb4:	10a65b04 	addi	r2,r2,-26260
8111dcb8:	dc000115 	stw	r16,4(sp)
8111dcbc:	14000017 	ldw	r16,0(r2)
8111dcc0:	dc400215 	stw	r17,8(sp)
8111dcc4:	dfc00315 	stw	ra,12(sp)
8111dcc8:	2023883a 	mov	r17,r4
8111dccc:	80000226 	beq	r16,zero,8111dcd8 <fputwc+0x2c>
8111dcd0:	80800e17 	ldw	r2,56(r16)
8111dcd4:	10001026 	beq	r2,zero,8111dd18 <fputwc+0x6c>
8111dcd8:	2880030b 	ldhu	r2,12(r5)
8111dcdc:	10c8000c 	andi	r3,r2,8192
8111dce0:	1800051e 	bne	r3,zero,8111dcf8 <fputwc+0x4c>
8111dce4:	28c01917 	ldw	r3,100(r5)
8111dce8:	10880014 	ori	r2,r2,8192
8111dcec:	2880030d 	sth	r2,12(r5)
8111dcf0:	18880014 	ori	r2,r3,8192
8111dcf4:	28801915 	stw	r2,100(r5)
8111dcf8:	280d883a 	mov	r6,r5
8111dcfc:	8009883a 	mov	r4,r16
8111dd00:	880b883a 	mov	r5,r17
8111dd04:	dfc00317 	ldw	ra,12(sp)
8111dd08:	dc400217 	ldw	r17,8(sp)
8111dd0c:	dc000117 	ldw	r16,4(sp)
8111dd10:	dec00404 	addi	sp,sp,16
8111dd14:	111db241 	jmpi	8111db24 <__fputwc>
8111dd18:	8009883a 	mov	r4,r16
8111dd1c:	d9400015 	stw	r5,0(sp)
8111dd20:	1115e540 	call	81115e54 <__sinit>
8111dd24:	d9400017 	ldw	r5,0(sp)
8111dd28:	003feb06 	br	8111dcd8 <__reset+0xfb0fdcd8>

8111dd2c <rshift>:
8111dd2c:	2807d17a 	srai	r3,r5,5
8111dd30:	20800417 	ldw	r2,16(r4)
8111dd34:	22000504 	addi	r8,r4,20
8111dd38:	1880250e 	bge	r3,r2,8111ddd0 <rshift+0xa4>
8111dd3c:	1085883a 	add	r2,r2,r2
8111dd40:	18c7883a 	add	r3,r3,r3
8111dd44:	1085883a 	add	r2,r2,r2
8111dd48:	18c7883a 	add	r3,r3,r3
8111dd4c:	294007cc 	andi	r5,r5,31
8111dd50:	4085883a 	add	r2,r8,r2
8111dd54:	40c7883a 	add	r3,r8,r3
8111dd58:	28002026 	beq	r5,zero,8111dddc <rshift+0xb0>
8111dd5c:	19800017 	ldw	r6,0(r3)
8111dd60:	02c00804 	movi	r11,32
8111dd64:	19c00104 	addi	r7,r3,4
8111dd68:	5957c83a 	sub	r11,r11,r5
8111dd6c:	314cd83a 	srl	r6,r6,r5
8111dd70:	38802c2e 	bgeu	r7,r2,8111de24 <rshift+0xf8>
8111dd74:	4015883a 	mov	r10,r8
8111dd78:	3a400017 	ldw	r9,0(r7)
8111dd7c:	52800104 	addi	r10,r10,4
8111dd80:	39c00104 	addi	r7,r7,4
8111dd84:	4ad2983a 	sll	r9,r9,r11
8111dd88:	498cb03a 	or	r6,r9,r6
8111dd8c:	51bfff15 	stw	r6,-4(r10)
8111dd90:	39bfff17 	ldw	r6,-4(r7)
8111dd94:	314cd83a 	srl	r6,r6,r5
8111dd98:	38bff736 	bltu	r7,r2,8111dd78 <__reset+0xfb0fdd78>
8111dd9c:	10c7c83a 	sub	r3,r2,r3
8111dda0:	18fffec4 	addi	r3,r3,-5
8111dda4:	1806d0ba 	srli	r3,r3,2
8111dda8:	18c00044 	addi	r3,r3,1
8111ddac:	18c7883a 	add	r3,r3,r3
8111ddb0:	18c7883a 	add	r3,r3,r3
8111ddb4:	40c7883a 	add	r3,r8,r3
8111ddb8:	19800015 	stw	r6,0(r3)
8111ddbc:	30000126 	beq	r6,zero,8111ddc4 <rshift+0x98>
8111ddc0:	18c00104 	addi	r3,r3,4
8111ddc4:	1a05c83a 	sub	r2,r3,r8
8111ddc8:	1005d0ba 	srai	r2,r2,2
8111ddcc:	00001206 	br	8111de18 <rshift+0xec>
8111ddd0:	20000415 	stw	zero,16(r4)
8111ddd4:	20000515 	stw	zero,20(r4)
8111ddd8:	f800283a 	ret
8111dddc:	18bffc2e 	bgeu	r3,r2,8111ddd0 <__reset+0xfb0fddd0>
8111dde0:	180d883a 	mov	r6,r3
8111dde4:	400b883a 	mov	r5,r8
8111dde8:	31c00017 	ldw	r7,0(r6)
8111ddec:	29400104 	addi	r5,r5,4
8111ddf0:	31800104 	addi	r6,r6,4
8111ddf4:	29ffff15 	stw	r7,-4(r5)
8111ddf8:	30bffb36 	bltu	r6,r2,8111dde8 <__reset+0xfb0fdde8>
8111ddfc:	00c6303a 	nor	r3,zero,r3
8111de00:	1885883a 	add	r2,r3,r2
8111de04:	1004d0ba 	srli	r2,r2,2
8111de08:	10800044 	addi	r2,r2,1
8111de0c:	1085883a 	add	r2,r2,r2
8111de10:	1085883a 	add	r2,r2,r2
8111de14:	1005d0ba 	srai	r2,r2,2
8111de18:	20800415 	stw	r2,16(r4)
8111de1c:	103fed26 	beq	r2,zero,8111ddd4 <__reset+0xfb0fddd4>
8111de20:	f800283a 	ret
8111de24:	4007883a 	mov	r3,r8
8111de28:	003fe306 	br	8111ddb8 <__reset+0xfb0fddb8>

8111de2c <__gethex>:
8111de2c:	deffeb04 	addi	sp,sp,-84
8111de30:	dfc01415 	stw	ra,80(sp)
8111de34:	dd801115 	stw	r22,68(sp)
8111de38:	dcc00e15 	stw	r19,56(sp)
8111de3c:	dc800d15 	stw	r18,52(sp)
8111de40:	2827883a 	mov	r19,r5
8111de44:	d9000115 	stw	r4,4(sp)
8111de48:	d9800015 	stw	r6,0(sp)
8111de4c:	d9c00415 	stw	r7,16(sp)
8111de50:	df001315 	stw	fp,76(sp)
8111de54:	ddc01215 	stw	r23,72(sp)
8111de58:	dd401015 	stw	r21,64(sp)
8111de5c:	dd000f15 	stw	r20,60(sp)
8111de60:	dc400c15 	stw	r17,48(sp)
8111de64:	dc000b15 	stw	r16,44(sp)
8111de68:	1116d580 	call	81116d58 <_localeconv_r>
8111de6c:	14800017 	ldw	r18,0(r2)
8111de70:	9009883a 	mov	r4,r18
8111de74:	110ddac0 	call	8110ddac <strlen>
8111de78:	98c00017 	ldw	r3,0(r19)
8111de7c:	102d883a 	mov	r22,r2
8111de80:	9085883a 	add	r2,r18,r2
8111de84:	10bfffc3 	ldbu	r2,-1(r2)
8111de88:	19000083 	ldbu	r4,2(r3)
8111de8c:	d8800305 	stb	r2,12(sp)
8111de90:	00800c04 	movi	r2,48
8111de94:	2081521e 	bne	r4,r2,8111e3e0 <__gethex+0x5b4>
8111de98:	017fff84 	movi	r5,-2
8111de9c:	188000c4 	addi	r2,r3,3
8111dea0:	28cbc83a 	sub	r5,r5,r3
8111dea4:	200d883a 	mov	r6,r4
8111dea8:	28a3883a 	add	r17,r5,r2
8111deac:	102b883a 	mov	r21,r2
8111deb0:	10800044 	addi	r2,r2,1
8111deb4:	113fffc3 	ldbu	r4,-1(r2)
8111deb8:	21bffb26 	beq	r4,r6,8111dea8 <__reset+0xfb0fdea8>
8111debc:	052044f4 	movhi	r20,33043
8111dec0:	a51dfc04 	addi	r20,r20,30704
8111dec4:	a109883a 	add	r4,r20,r4
8111dec8:	20800003 	ldbu	r2,0(r4)
8111decc:	10008826 	beq	r2,zero,8111e0f0 <__gethex+0x2c4>
8111ded0:	a8800003 	ldbu	r2,0(r21)
8111ded4:	0015883a 	mov	r10,zero
8111ded8:	002f883a 	mov	r23,zero
8111dedc:	a085883a 	add	r2,r20,r2
8111dee0:	10800003 	ldbu	r2,0(r2)
8111dee4:	a821883a 	mov	r16,r21
8111dee8:	10000526 	beq	r2,zero,8111df00 <__gethex+0xd4>
8111deec:	84000044 	addi	r16,r16,1
8111def0:	80800003 	ldbu	r2,0(r16)
8111def4:	a085883a 	add	r2,r20,r2
8111def8:	10800003 	ldbu	r2,0(r2)
8111defc:	103ffb1e 	bne	r2,zero,8111deec <__reset+0xfb0fdeec>
8111df00:	b00d883a 	mov	r6,r22
8111df04:	900b883a 	mov	r5,r18
8111df08:	8009883a 	mov	r4,r16
8111df0c:	da800a15 	stw	r10,40(sp)
8111df10:	111e8b80 	call	8111e8b8 <strncmp>
8111df14:	da800a17 	ldw	r10,40(sp)
8111df18:	1000031e 	bne	r2,zero,8111df28 <__gethex+0xfc>
8111df1c:	b8015226 	beq	r23,zero,8111e468 <__gethex+0x63c>
8111df20:	80800003 	ldbu	r2,0(r16)
8111df24:	00000206 	br	8111df30 <__gethex+0x104>
8111df28:	80800003 	ldbu	r2,0(r16)
8111df2c:	b8011f26 	beq	r23,zero,8111e3ac <__gethex+0x580>
8111df30:	85efc83a 	sub	r23,r16,r23
8111df34:	bdef883a 	add	r23,r23,r23
8111df38:	bdef883a 	add	r23,r23,r23
8111df3c:	05efc83a 	sub	r23,zero,r23
8111df40:	10803fcc 	andi	r2,r2,255
8111df44:	01001404 	movi	r4,80
8111df48:	11008626 	beq	r2,r4,8111e164 <__gethex+0x338>
8111df4c:	01001c04 	movi	r4,112
8111df50:	11008426 	beq	r2,r4,8111e164 <__gethex+0x338>
8111df54:	8039883a 	mov	fp,r16
8111df58:	9c000015 	stw	r16,0(r19)
8111df5c:	5000711e 	bne	r10,zero,8111e124 <__gethex+0x2f8>
8111df60:	e545c83a 	sub	r2,fp,r21
8111df64:	10bfffc4 	addi	r2,r2,-1
8111df68:	010001c4 	movi	r4,7
8111df6c:	000b883a 	mov	r5,zero
8111df70:	2080030e 	bge	r4,r2,8111df80 <__gethex+0x154>
8111df74:	1005d07a 	srai	r2,r2,1
8111df78:	29400044 	addi	r5,r5,1
8111df7c:	20bffd16 	blt	r4,r2,8111df74 <__reset+0xfb0fdf74>
8111df80:	d9000117 	ldw	r4,4(sp)
8111df84:	111724c0 	call	8111724c <_Balloc>
8111df88:	10c00504 	addi	r3,r2,20
8111df8c:	d8c00215 	stw	r3,8(sp)
8111df90:	1021883a 	mov	r16,r2
8111df94:	af01732e 	bgeu	r21,fp,8111e564 <__gethex+0x738>
8111df98:	dc400303 	ldbu	r17,12(sp)
8111df9c:	03400044 	movi	r13,1
8111dfa0:	1815883a 	mov	r10,r3
8111dfa4:	0013883a 	mov	r9,zero
8111dfa8:	0027883a 	mov	r19,zero
8111dfac:	6d9bc83a 	sub	r13,r13,r22
8111dfb0:	02c00804 	movi	r11,32
8111dfb4:	e0bfffc3 	ldbu	r2,-1(fp)
8111dfb8:	e3bfffc4 	addi	r14,fp,-1
8111dfbc:	88803026 	beq	r17,r2,8111e080 <__gethex+0x254>
8111dfc0:	9ac04526 	beq	r19,r11,8111e0d8 <__gethex+0x2ac>
8111dfc4:	980b883a 	mov	r5,r19
8111dfc8:	9cc00104 	addi	r19,r19,4
8111dfcc:	e13fffc3 	ldbu	r4,-1(fp)
8111dfd0:	7039883a 	mov	fp,r14
8111dfd4:	a109883a 	add	r4,r20,r4
8111dfd8:	20800003 	ldbu	r2,0(r4)
8111dfdc:	108003cc 	andi	r2,r2,15
8111dfe0:	1144983a 	sll	r2,r2,r5
8111dfe4:	4892b03a 	or	r9,r9,r2
8111dfe8:	af3ff236 	bltu	r21,fp,8111dfb4 <__reset+0xfb0fdfb4>
8111dfec:	d8c00217 	ldw	r3,8(sp)
8111dff0:	50800104 	addi	r2,r10,4
8111dff4:	52400015 	stw	r9,0(r10)
8111dff8:	10c5c83a 	sub	r2,r2,r3
8111dffc:	1005d0ba 	srai	r2,r2,2
8111e000:	4809883a 	mov	r4,r9
8111e004:	80800415 	stw	r2,16(r16)
8111e008:	1022917a 	slli	r17,r2,5
8111e00c:	11175400 	call	81117540 <__hi0bits>
8111e010:	d8c00017 	ldw	r3,0(sp)
8111e014:	8885c83a 	sub	r2,r17,r2
8111e018:	1c800017 	ldw	r18,0(r3)
8111e01c:	9080c716 	blt	r18,r2,8111e33c <__gethex+0x510>
8111e020:	1480e416 	blt	r2,r18,8111e3b4 <__gethex+0x588>
8111e024:	0027883a 	mov	r19,zero
8111e028:	d8c00017 	ldw	r3,0(sp)
8111e02c:	18800217 	ldw	r2,8(r3)
8111e030:	15c08d16 	blt	r2,r23,8111e268 <__gethex+0x43c>
8111e034:	d8c00017 	ldw	r3,0(sp)
8111e038:	18800117 	ldw	r2,4(r3)
8111e03c:	b880aa0e 	bge	r23,r2,8111e2e8 <__gethex+0x4bc>
8111e040:	15efc83a 	sub	r23,r2,r23
8111e044:	bc80ed16 	blt	r23,r18,8111e3fc <__gethex+0x5d0>
8111e048:	18c00317 	ldw	r3,12(r3)
8111e04c:	01000084 	movi	r4,2
8111e050:	19014926 	beq	r3,r4,8111e578 <__gethex+0x74c>
8111e054:	010000c4 	movi	r4,3
8111e058:	19012e26 	beq	r3,r4,8111e514 <__gethex+0x6e8>
8111e05c:	01000044 	movi	r4,1
8111e060:	19014826 	beq	r3,r4,8111e584 <__gethex+0x758>
8111e064:	d9000117 	ldw	r4,4(sp)
8111e068:	800b883a 	mov	r5,r16
8111e06c:	11172f40 	call	811172f4 <_Bfree>
8111e070:	d8801517 	ldw	r2,84(sp)
8111e074:	10000015 	stw	zero,0(r2)
8111e078:	00801404 	movi	r2,80
8111e07c:	00002b06 	br	8111e12c <__gethex+0x300>
8111e080:	735f883a 	add	r15,r14,r13
8111e084:	7d7fce36 	bltu	r15,r21,8111dfc0 <__reset+0xfb0fdfc0>
8111e088:	7809883a 	mov	r4,r15
8111e08c:	b00d883a 	mov	r6,r22
8111e090:	900b883a 	mov	r5,r18
8111e094:	da400515 	stw	r9,20(sp)
8111e098:	da800a15 	stw	r10,40(sp)
8111e09c:	dac00915 	stw	r11,36(sp)
8111e0a0:	db400815 	stw	r13,32(sp)
8111e0a4:	db800615 	stw	r14,24(sp)
8111e0a8:	dbc00715 	stw	r15,28(sp)
8111e0ac:	111e8b80 	call	8111e8b8 <strncmp>
8111e0b0:	da400517 	ldw	r9,20(sp)
8111e0b4:	da800a17 	ldw	r10,40(sp)
8111e0b8:	dac00917 	ldw	r11,36(sp)
8111e0bc:	db400817 	ldw	r13,32(sp)
8111e0c0:	db800617 	ldw	r14,24(sp)
8111e0c4:	dbc00717 	ldw	r15,28(sp)
8111e0c8:	103fbd1e 	bne	r2,zero,8111dfc0 <__reset+0xfb0fdfc0>
8111e0cc:	7839883a 	mov	fp,r15
8111e0d0:	af3fb836 	bltu	r21,fp,8111dfb4 <__reset+0xfb0fdfb4>
8111e0d4:	003fc506 	br	8111dfec <__reset+0xfb0fdfec>
8111e0d8:	04c00104 	movi	r19,4
8111e0dc:	52400015 	stw	r9,0(r10)
8111e0e0:	000b883a 	mov	r5,zero
8111e0e4:	54d5883a 	add	r10,r10,r19
8111e0e8:	0013883a 	mov	r9,zero
8111e0ec:	003fb706 	br	8111dfcc <__reset+0xfb0fdfcc>
8111e0f0:	b00d883a 	mov	r6,r22
8111e0f4:	900b883a 	mov	r5,r18
8111e0f8:	a809883a 	mov	r4,r21
8111e0fc:	111e8b80 	call	8111e8b8 <strncmp>
8111e100:	10006426 	beq	r2,zero,8111e294 <__gethex+0x468>
8111e104:	a8800003 	ldbu	r2,0(r21)
8111e108:	a821883a 	mov	r16,r21
8111e10c:	10803fcc 	andi	r2,r2,255
8111e110:	01001404 	movi	r4,80
8111e114:	11001126 	beq	r2,r4,8111e15c <__gethex+0x330>
8111e118:	01001c04 	movi	r4,112
8111e11c:	11000f26 	beq	r2,r4,8111e15c <__gethex+0x330>
8111e120:	9c000015 	stw	r16,0(r19)
8111e124:	8800831e 	bne	r17,zero,8111e334 <__gethex+0x508>
8111e128:	00800184 	movi	r2,6
8111e12c:	dfc01417 	ldw	ra,80(sp)
8111e130:	df001317 	ldw	fp,76(sp)
8111e134:	ddc01217 	ldw	r23,72(sp)
8111e138:	dd801117 	ldw	r22,68(sp)
8111e13c:	dd401017 	ldw	r21,64(sp)
8111e140:	dd000f17 	ldw	r20,60(sp)
8111e144:	dcc00e17 	ldw	r19,56(sp)
8111e148:	dc800d17 	ldw	r18,52(sp)
8111e14c:	dc400c17 	ldw	r17,48(sp)
8111e150:	dc000b17 	ldw	r16,44(sp)
8111e154:	dec01504 	addi	sp,sp,84
8111e158:	f800283a 	ret
8111e15c:	002f883a 	mov	r23,zero
8111e160:	02800044 	movi	r10,1
8111e164:	80800043 	ldbu	r2,1(r16)
8111e168:	01400ac4 	movi	r5,43
8111e16c:	11003fcc 	andi	r4,r2,255
8111e170:	21406e26 	beq	r4,r5,8111e32c <__gethex+0x500>
8111e174:	01400b44 	movi	r5,45
8111e178:	21404226 	beq	r4,r5,8111e284 <__gethex+0x458>
8111e17c:	81400044 	addi	r5,r16,1
8111e180:	000d883a 	mov	r6,zero
8111e184:	10803fcc 	andi	r2,r2,255
8111e188:	a085883a 	add	r2,r20,r2
8111e18c:	11000003 	ldbu	r4,0(r2)
8111e190:	03000604 	movi	r12,24
8111e194:	20bfffc4 	addi	r2,r4,-1
8111e198:	10803fcc 	andi	r2,r2,255
8111e19c:	60bf6d36 	bltu	r12,r2,8111df54 <__reset+0xfb0fdf54>
8111e1a0:	2ac00043 	ldbu	r11,1(r5)
8111e1a4:	20803fcc 	andi	r2,r4,255
8111e1a8:	012044f4 	movhi	r4,33043
8111e1ac:	211dfc04 	addi	r4,r4,30704
8111e1b0:	22c9883a 	add	r4,r4,r11
8111e1b4:	23400003 	ldbu	r13,0(r4)
8111e1b8:	10bffc04 	addi	r2,r2,-16
8111e1bc:	29400044 	addi	r5,r5,1
8111e1c0:	693fffc4 	addi	r4,r13,-1
8111e1c4:	21003fcc 	andi	r4,r4,255
8111e1c8:	6b403fcc 	andi	r13,r13,255
8111e1cc:	61000b36 	bltu	r12,r4,8111e1fc <__gethex+0x3d0>
8111e1d0:	29400044 	addi	r5,r5,1
8111e1d4:	29000003 	ldbu	r4,0(r5)
8111e1d8:	108002a4 	muli	r2,r2,10
8111e1dc:	a109883a 	add	r4,r20,r4
8111e1e0:	22c00003 	ldbu	r11,0(r4)
8111e1e4:	1345883a 	add	r2,r2,r13
8111e1e8:	10bffc04 	addi	r2,r2,-16
8111e1ec:	593fffc4 	addi	r4,r11,-1
8111e1f0:	21003fcc 	andi	r4,r4,255
8111e1f4:	5b403fcc 	andi	r13,r11,255
8111e1f8:	613ff52e 	bgeu	r12,r4,8111e1d0 <__reset+0xfb0fe1d0>
8111e1fc:	30000126 	beq	r6,zero,8111e204 <__gethex+0x3d8>
8111e200:	0085c83a 	sub	r2,zero,r2
8111e204:	8039883a 	mov	fp,r16
8111e208:	b8af883a 	add	r23,r23,r2
8111e20c:	2821883a 	mov	r16,r5
8111e210:	003f5106 	br	8111df58 <__reset+0xfb0fdf58>
8111e214:	80800217 	ldw	r2,8(r16)
8111e218:	e080f00e 	bge	fp,r2,8111e5dc <__gethex+0x7b0>
8111e21c:	e007883a 	mov	r3,fp
8111e220:	18800144 	addi	r2,r3,5
8111e224:	1085883a 	add	r2,r2,r2
8111e228:	18c00044 	addi	r3,r3,1
8111e22c:	1085883a 	add	r2,r2,r2
8111e230:	8085883a 	add	r2,r16,r2
8111e234:	80c00415 	stw	r3,16(r16)
8111e238:	01000044 	movi	r4,1
8111e23c:	11000015 	stw	r4,0(r2)
8111e240:	00800084 	movi	r2,2
8111e244:	8880d826 	beq	r17,r2,8111e5a8 <__gethex+0x77c>
8111e248:	e0c0ac0e 	bge	fp,r3,8111e4fc <__gethex+0x6d0>
8111e24c:	01400044 	movi	r5,1
8111e250:	8009883a 	mov	r4,r16
8111e254:	111dd2c0 	call	8111dd2c <rshift>
8111e258:	d8c00017 	ldw	r3,0(sp)
8111e25c:	bdc00044 	addi	r23,r23,1
8111e260:	18800217 	ldw	r2,8(r3)
8111e264:	15c0a70e 	bge	r2,r23,8111e504 <__gethex+0x6d8>
8111e268:	d9000117 	ldw	r4,4(sp)
8111e26c:	800b883a 	mov	r5,r16
8111e270:	11172f40 	call	811172f4 <_Bfree>
8111e274:	d9001517 	ldw	r4,84(sp)
8111e278:	008028c4 	movi	r2,163
8111e27c:	20000015 	stw	zero,0(r4)
8111e280:	003faa06 	br	8111e12c <__reset+0xfb0fe12c>
8111e284:	01800044 	movi	r6,1
8111e288:	80800083 	ldbu	r2,2(r16)
8111e28c:	81400084 	addi	r5,r16,2
8111e290:	003fbc06 	br	8111e184 <__reset+0xfb0fe184>
8111e294:	ada1883a 	add	r16,r21,r22
8111e298:	81000003 	ldbu	r4,0(r16)
8111e29c:	21403fcc 	andi	r5,r4,255
8111e2a0:	a145883a 	add	r2,r20,r5
8111e2a4:	10800003 	ldbu	r2,0(r2)
8111e2a8:	11803fcc 	andi	r6,r2,255
8111e2ac:	30004f26 	beq	r6,zero,8111e3ec <__gethex+0x5c0>
8111e2b0:	00c00c04 	movi	r3,48
8111e2b4:	802b883a 	mov	r21,r16
8111e2b8:	28c0061e 	bne	r5,r3,8111e2d4 <__gethex+0x4a8>
8111e2bc:	2809883a 	mov	r4,r5
8111e2c0:	ad400044 	addi	r21,r21,1
8111e2c4:	a8800003 	ldbu	r2,0(r21)
8111e2c8:	113ffd26 	beq	r2,r4,8111e2c0 <__reset+0xfb0fe2c0>
8111e2cc:	a085883a 	add	r2,r20,r2
8111e2d0:	10800003 	ldbu	r2,0(r2)
8111e2d4:	10803fcc 	andi	r2,r2,255
8111e2d8:	1015003a 	cmpeq	r10,r2,zero
8111e2dc:	802f883a 	mov	r23,r16
8111e2e0:	04400044 	movi	r17,1
8111e2e4:	003eff06 	br	8111dee4 <__reset+0xfb0fdee4>
8111e2e8:	04400044 	movi	r17,1
8111e2ec:	98000926 	beq	r19,zero,8111e314 <__gethex+0x4e8>
8111e2f0:	d8c00017 	ldw	r3,0(sp)
8111e2f4:	18800317 	ldw	r2,12(r3)
8111e2f8:	00c00084 	movi	r3,2
8111e2fc:	10c06826 	beq	r2,r3,8111e4a0 <__gethex+0x674>
8111e300:	00c000c4 	movi	r3,3
8111e304:	10c06a26 	beq	r2,r3,8111e4b0 <__gethex+0x684>
8111e308:	00c00044 	movi	r3,1
8111e30c:	10c08d26 	beq	r2,r3,8111e544 <__gethex+0x718>
8111e310:	8c400414 	ori	r17,r17,16
8111e314:	d9001517 	ldw	r4,84(sp)
8111e318:	d8c00417 	ldw	r3,16(sp)
8111e31c:	8805883a 	mov	r2,r17
8111e320:	24000015 	stw	r16,0(r4)
8111e324:	1dc00015 	stw	r23,0(r3)
8111e328:	003f8006 	br	8111e12c <__reset+0xfb0fe12c>
8111e32c:	000d883a 	mov	r6,zero
8111e330:	003fd506 	br	8111e288 <__reset+0xfb0fe288>
8111e334:	0005883a 	mov	r2,zero
8111e338:	003f7c06 	br	8111e12c <__reset+0xfb0fe12c>
8111e33c:	14a3c83a 	sub	r17,r2,r18
8111e340:	880b883a 	mov	r5,r17
8111e344:	8009883a 	mov	r4,r16
8111e348:	11181bc0 	call	811181bc <__any_on>
8111e34c:	10002926 	beq	r2,zero,8111e3f4 <__gethex+0x5c8>
8111e350:	897fffc4 	addi	r5,r17,-1
8111e354:	2807d17a 	srai	r3,r5,5
8111e358:	d8800217 	ldw	r2,8(sp)
8111e35c:	290007cc 	andi	r4,r5,31
8111e360:	18c7883a 	add	r3,r3,r3
8111e364:	18c7883a 	add	r3,r3,r3
8111e368:	04c00044 	movi	r19,1
8111e36c:	10c7883a 	add	r3,r2,r3
8111e370:	9908983a 	sll	r4,r19,r4
8111e374:	18c00017 	ldw	r3,0(r3)
8111e378:	20c6703a 	and	r3,r4,r3
8111e37c:	18000626 	beq	r3,zero,8111e398 <__gethex+0x56c>
8111e380:	99407b0e 	bge	r19,r5,8111e570 <__gethex+0x744>
8111e384:	897fff84 	addi	r5,r17,-2
8111e388:	8009883a 	mov	r4,r16
8111e38c:	11181bc0 	call	811181bc <__any_on>
8111e390:	10007726 	beq	r2,zero,8111e570 <__gethex+0x744>
8111e394:	04c000c4 	movi	r19,3
8111e398:	880b883a 	mov	r5,r17
8111e39c:	8009883a 	mov	r4,r16
8111e3a0:	111dd2c0 	call	8111dd2c <rshift>
8111e3a4:	bc6f883a 	add	r23,r23,r17
8111e3a8:	003f1f06 	br	8111e028 <__reset+0xfb0fe028>
8111e3ac:	002f883a 	mov	r23,zero
8111e3b0:	003ee306 	br	8111df40 <__reset+0xfb0fdf40>
8111e3b4:	d9000117 	ldw	r4,4(sp)
8111e3b8:	90a3c83a 	sub	r17,r18,r2
8111e3bc:	800b883a 	mov	r5,r16
8111e3c0:	880d883a 	mov	r6,r17
8111e3c4:	11179cc0 	call	811179cc <__lshift>
8111e3c8:	10c00504 	addi	r3,r2,20
8111e3cc:	1021883a 	mov	r16,r2
8111e3d0:	bc6fc83a 	sub	r23,r23,r17
8111e3d4:	d8c00215 	stw	r3,8(sp)
8111e3d8:	0027883a 	mov	r19,zero
8111e3dc:	003f1206 	br	8111e028 <__reset+0xfb0fe028>
8111e3e0:	1d400084 	addi	r21,r3,2
8111e3e4:	0023883a 	mov	r17,zero
8111e3e8:	003eb406 	br	8111debc <__reset+0xfb0fdebc>
8111e3ec:	2005883a 	mov	r2,r4
8111e3f0:	003f4606 	br	8111e10c <__reset+0xfb0fe10c>
8111e3f4:	0027883a 	mov	r19,zero
8111e3f8:	003fe706 	br	8111e398 <__reset+0xfb0fe398>
8111e3fc:	bc7fffc4 	addi	r17,r23,-1
8111e400:	9800421e 	bne	r19,zero,8111e50c <__gethex+0x6e0>
8111e404:	88000426 	beq	r17,zero,8111e418 <__gethex+0x5ec>
8111e408:	880b883a 	mov	r5,r17
8111e40c:	8009883a 	mov	r4,r16
8111e410:	11181bc0 	call	811181bc <__any_on>
8111e414:	1027883a 	mov	r19,r2
8111e418:	8805d17a 	srai	r2,r17,5
8111e41c:	d8c00217 	ldw	r3,8(sp)
8111e420:	8c4007cc 	andi	r17,r17,31
8111e424:	1085883a 	add	r2,r2,r2
8111e428:	1085883a 	add	r2,r2,r2
8111e42c:	1885883a 	add	r2,r3,r2
8111e430:	00c00044 	movi	r3,1
8111e434:	1c62983a 	sll	r17,r3,r17
8111e438:	10800017 	ldw	r2,0(r2)
8111e43c:	8884703a 	and	r2,r17,r2
8111e440:	10000126 	beq	r2,zero,8111e448 <__gethex+0x61c>
8111e444:	9cc00094 	ori	r19,r19,2
8111e448:	b80b883a 	mov	r5,r23
8111e44c:	8009883a 	mov	r4,r16
8111e450:	111dd2c0 	call	8111dd2c <rshift>
8111e454:	d8c00017 	ldw	r3,0(sp)
8111e458:	95e5c83a 	sub	r18,r18,r23
8111e45c:	04400084 	movi	r17,2
8111e460:	1dc00117 	ldw	r23,4(r3)
8111e464:	003fa106 	br	8111e2ec <__reset+0xfb0fe2ec>
8111e468:	85af883a 	add	r23,r16,r22
8111e46c:	b8800003 	ldbu	r2,0(r23)
8111e470:	b821883a 	mov	r16,r23
8111e474:	11003fcc 	andi	r4,r2,255
8111e478:	a109883a 	add	r4,r20,r4
8111e47c:	21000003 	ldbu	r4,0(r4)
8111e480:	203eaa26 	beq	r4,zero,8111df2c <__reset+0xfb0fdf2c>
8111e484:	84000044 	addi	r16,r16,1
8111e488:	80800003 	ldbu	r2,0(r16)
8111e48c:	11003fcc 	andi	r4,r2,255
8111e490:	a109883a 	add	r4,r20,r4
8111e494:	21000003 	ldbu	r4,0(r4)
8111e498:	203ffa1e 	bne	r4,zero,8111e484 <__reset+0xfb0fe484>
8111e49c:	003ea306 	br	8111df2c <__reset+0xfb0fdf2c>
8111e4a0:	d9001617 	ldw	r4,88(sp)
8111e4a4:	00800044 	movi	r2,1
8111e4a8:	1109c83a 	sub	r4,r2,r4
8111e4ac:	d9001615 	stw	r4,88(sp)
8111e4b0:	d8801617 	ldw	r2,88(sp)
8111e4b4:	103f9626 	beq	r2,zero,8111e310 <__reset+0xfb0fe310>
8111e4b8:	87000417 	ldw	fp,16(r16)
8111e4bc:	d9800217 	ldw	r6,8(sp)
8111e4c0:	013fffc4 	movi	r4,-1
8111e4c4:	e727883a 	add	r19,fp,fp
8111e4c8:	9ce7883a 	add	r19,r19,r19
8111e4cc:	3005883a 	mov	r2,r6
8111e4d0:	34cb883a 	add	r5,r6,r19
8111e4d4:	00000306 	br	8111e4e4 <__gethex+0x6b8>
8111e4d8:	10000015 	stw	zero,0(r2)
8111e4dc:	10800104 	addi	r2,r2,4
8111e4e0:	117f4c2e 	bgeu	r2,r5,8111e214 <__reset+0xfb0fe214>
8111e4e4:	10c00017 	ldw	r3,0(r2)
8111e4e8:	193ffb26 	beq	r3,r4,8111e4d8 <__reset+0xfb0fe4d8>
8111e4ec:	18c00044 	addi	r3,r3,1
8111e4f0:	10c00015 	stw	r3,0(r2)
8111e4f4:	00800084 	movi	r2,2
8111e4f8:	88802b26 	beq	r17,r2,8111e5a8 <__gethex+0x77c>
8111e4fc:	948007cc 	andi	r18,r18,31
8111e500:	90002f1e 	bne	r18,zero,8111e5c0 <__gethex+0x794>
8111e504:	04400844 	movi	r17,33
8111e508:	003f8206 	br	8111e314 <__reset+0xfb0fe314>
8111e50c:	04c00044 	movi	r19,1
8111e510:	003fc106 	br	8111e418 <__reset+0xfb0fe418>
8111e514:	d8c01617 	ldw	r3,88(sp)
8111e518:	183ed226 	beq	r3,zero,8111e064 <__reset+0xfb0fe064>
8111e51c:	d8c00417 	ldw	r3,16(sp)
8111e520:	d9001517 	ldw	r4,84(sp)
8111e524:	18800015 	stw	r2,0(r3)
8111e528:	d8c00217 	ldw	r3,8(sp)
8111e52c:	00800044 	movi	r2,1
8111e530:	80800415 	stw	r2,16(r16)
8111e534:	18800015 	stw	r2,0(r3)
8111e538:	24000015 	stw	r16,0(r4)
8111e53c:	00801884 	movi	r2,98
8111e540:	003efa06 	br	8111e12c <__reset+0xfb0fe12c>
8111e544:	9880008c 	andi	r2,r19,2
8111e548:	103f7126 	beq	r2,zero,8111e310 <__reset+0xfb0fe310>
8111e54c:	d8c00217 	ldw	r3,8(sp)
8111e550:	18800017 	ldw	r2,0(r3)
8111e554:	9884b03a 	or	r2,r19,r2
8111e558:	1080004c 	andi	r2,r2,1
8111e55c:	103fd61e 	bne	r2,zero,8111e4b8 <__reset+0xfb0fe4b8>
8111e560:	003f6b06 	br	8111e310 <__reset+0xfb0fe310>
8111e564:	da800217 	ldw	r10,8(sp)
8111e568:	0013883a 	mov	r9,zero
8111e56c:	003e9f06 	br	8111dfec <__reset+0xfb0fdfec>
8111e570:	04c00084 	movi	r19,2
8111e574:	003f8806 	br	8111e398 <__reset+0xfb0fe398>
8111e578:	d9001617 	ldw	r4,88(sp)
8111e57c:	203fe726 	beq	r4,zero,8111e51c <__reset+0xfb0fe51c>
8111e580:	003eb806 	br	8111e064 <__reset+0xfb0fe064>
8111e584:	95feb71e 	bne	r18,r23,8111e064 <__reset+0xfb0fe064>
8111e588:	1cbfe40e 	bge	r3,r18,8111e51c <__reset+0xfb0fe51c>
8111e58c:	917fffc4 	addi	r5,r18,-1
8111e590:	8009883a 	mov	r4,r16
8111e594:	11181bc0 	call	811181bc <__any_on>
8111e598:	103eb226 	beq	r2,zero,8111e064 <__reset+0xfb0fe064>
8111e59c:	d8c00017 	ldw	r3,0(sp)
8111e5a0:	18800117 	ldw	r2,4(r3)
8111e5a4:	003fdd06 	br	8111e51c <__reset+0xfb0fe51c>
8111e5a8:	d8c00017 	ldw	r3,0(sp)
8111e5ac:	18800017 	ldw	r2,0(r3)
8111e5b0:	10bfffc4 	addi	r2,r2,-1
8111e5b4:	90801c26 	beq	r18,r2,8111e628 <__gethex+0x7fc>
8111e5b8:	04400884 	movi	r17,34
8111e5bc:	003f5506 	br	8111e314 <__reset+0xfb0fe314>
8111e5c0:	34c5883a 	add	r2,r6,r19
8111e5c4:	113fff17 	ldw	r4,-4(r2)
8111e5c8:	11175400 	call	81117540 <__hi0bits>
8111e5cc:	00c00804 	movi	r3,32
8111e5d0:	1ca5c83a 	sub	r18,r3,r18
8111e5d4:	14bfcb0e 	bge	r2,r18,8111e504 <__reset+0xfb0fe504>
8111e5d8:	003f1c06 	br	8111e24c <__reset+0xfb0fe24c>
8111e5dc:	81400117 	ldw	r5,4(r16)
8111e5e0:	d9000117 	ldw	r4,4(sp)
8111e5e4:	29400044 	addi	r5,r5,1
8111e5e8:	111724c0 	call	8111724c <_Balloc>
8111e5ec:	81800417 	ldw	r6,16(r16)
8111e5f0:	81400304 	addi	r5,r16,12
8111e5f4:	11000304 	addi	r4,r2,12
8111e5f8:	31800084 	addi	r6,r6,2
8111e5fc:	318d883a 	add	r6,r6,r6
8111e600:	318d883a 	add	r6,r6,r6
8111e604:	1029883a 	mov	r20,r2
8111e608:	110d4800 	call	8110d480 <memcpy>
8111e60c:	d9000117 	ldw	r4,4(sp)
8111e610:	800b883a 	mov	r5,r16
8111e614:	a021883a 	mov	r16,r20
8111e618:	11172f40 	call	811172f4 <_Bfree>
8111e61c:	a0c00417 	ldw	r3,16(r20)
8111e620:	a1800504 	addi	r6,r20,20
8111e624:	003efe06 	br	8111e220 <__reset+0xfb0fe220>
8111e628:	9005d17a 	srai	r2,r18,5
8111e62c:	944007cc 	andi	r17,r18,31
8111e630:	1085883a 	add	r2,r2,r2
8111e634:	1085883a 	add	r2,r2,r2
8111e638:	3087883a 	add	r3,r6,r2
8111e63c:	00800044 	movi	r2,1
8111e640:	1462983a 	sll	r17,r2,r17
8111e644:	18800017 	ldw	r2,0(r3)
8111e648:	8884703a 	and	r2,r17,r2
8111e64c:	1022c03a 	cmpne	r17,r2,zero
8111e650:	00800884 	movi	r2,34
8111e654:	1463c83a 	sub	r17,r2,r17
8111e658:	003f2e06 	br	8111e314 <__reset+0xfb0fe314>

8111e65c <__hexnan>:
8111e65c:	defff904 	addi	sp,sp,-28
8111e660:	dc800215 	stw	r18,8(sp)
8111e664:	2c800017 	ldw	r18,0(r5)
8111e668:	dfc00615 	stw	ra,24(sp)
8111e66c:	dd400515 	stw	r21,20(sp)
8111e670:	901fd17a 	srai	r15,r18,5
8111e674:	dd000415 	stw	r20,16(sp)
8111e678:	dcc00315 	stw	r19,12(sp)
8111e67c:	7bdf883a 	add	r15,r15,r15
8111e680:	7bdf883a 	add	r15,r15,r15
8111e684:	dc400115 	stw	r17,4(sp)
8111e688:	dc000015 	stw	r16,0(sp)
8111e68c:	948007cc 	andi	r18,r18,31
8111e690:	33df883a 	add	r15,r6,r15
8111e694:	90000126 	beq	r18,zero,8111e69c <__hexnan+0x40>
8111e698:	7bc00104 	addi	r15,r15,4
8111e69c:	22000017 	ldw	r8,0(r4)
8111e6a0:	7affff04 	addi	r11,r15,-4
8111e6a4:	03a044f4 	movhi	r14,33043
8111e6a8:	783fff15 	stw	zero,-4(r15)
8111e6ac:	581b883a 	mov	r13,r11
8111e6b0:	580b883a 	mov	r5,r11
8111e6b4:	000f883a 	mov	r7,zero
8111e6b8:	003f883a 	mov	ra,zero
8111e6bc:	0019883a 	mov	r12,zero
8111e6c0:	739dfc04 	addi	r14,r14,30704
8111e6c4:	04400204 	movi	r17,8
8111e6c8:	04000804 	movi	r16,32
8111e6cc:	04c001c4 	movi	r19,7
8111e6d0:	42000044 	addi	r8,r8,1
8111e6d4:	40c00003 	ldbu	r3,0(r8)
8111e6d8:	18001d26 	beq	r3,zero,8111e750 <__hexnan+0xf4>
8111e6dc:	70c5883a 	add	r2,r14,r3
8111e6e0:	10800003 	ldbu	r2,0(r2)
8111e6e4:	12403fcc 	andi	r9,r2,255
8111e6e8:	4800301e 	bne	r9,zero,8111e7ac <__hexnan+0x150>
8111e6ec:	80c04236 	bltu	r16,r3,8111e7f8 <__hexnan+0x19c>
8111e6f0:	fb3ff70e 	bge	ra,r12,8111e6d0 <__reset+0xfb0fe6d0>
8111e6f4:	2b40112e 	bgeu	r5,r13,8111e73c <__hexnan+0xe0>
8111e6f8:	99c01016 	blt	r19,r7,8111e73c <__hexnan+0xe0>
8111e6fc:	89e9c83a 	sub	r20,r17,r7
8111e700:	a529883a 	add	r20,r20,r20
8111e704:	2a800017 	ldw	r10,0(r5)
8111e708:	a529883a 	add	r20,r20,r20
8111e70c:	852bc83a 	sub	r21,r16,r20
8111e710:	28c00104 	addi	r3,r5,4
8111e714:	2805883a 	mov	r2,r5
8111e718:	19c00017 	ldw	r7,0(r3)
8111e71c:	10800104 	addi	r2,r2,4
8111e720:	18c00104 	addi	r3,r3,4
8111e724:	3d52983a 	sll	r9,r7,r21
8111e728:	4a92b03a 	or	r9,r9,r10
8111e72c:	3d14d83a 	srl	r10,r7,r20
8111e730:	127fff15 	stw	r9,-4(r2)
8111e734:	1abfff15 	stw	r10,-4(r3)
8111e738:	137ff736 	bltu	r2,r13,8111e718 <__reset+0xfb0fe718>
8111e73c:	31402836 	bltu	r6,r5,8111e7e0 <__hexnan+0x184>
8111e740:	42000044 	addi	r8,r8,1
8111e744:	40c00003 	ldbu	r3,0(r8)
8111e748:	01c00204 	movi	r7,8
8111e74c:	183fe31e 	bne	r3,zero,8111e6dc <__reset+0xfb0fe6dc>
8111e750:	60002b26 	beq	r12,zero,8111e800 <__hexnan+0x1a4>
8111e754:	2b40022e 	bgeu	r5,r13,8111e760 <__hexnan+0x104>
8111e758:	008001c4 	movi	r2,7
8111e75c:	11c0430e 	bge	r2,r7,8111e86c <__hexnan+0x210>
8111e760:	3140312e 	bgeu	r6,r5,8111e828 <__hexnan+0x1cc>
8111e764:	3007883a 	mov	r3,r6
8111e768:	29000017 	ldw	r4,0(r5)
8111e76c:	18800104 	addi	r2,r3,4
8111e770:	29400104 	addi	r5,r5,4
8111e774:	19000015 	stw	r4,0(r3)
8111e778:	1007883a 	mov	r3,r2
8111e77c:	597ffa2e 	bgeu	r11,r5,8111e768 <__reset+0xfb0fe768>
8111e780:	10000015 	stw	zero,0(r2)
8111e784:	10800104 	addi	r2,r2,4
8111e788:	58bffd2e 	bgeu	r11,r2,8111e780 <__reset+0xfb0fe780>
8111e78c:	78bfff17 	ldw	r2,-4(r15)
8111e790:	1000041e 	bne	r2,zero,8111e7a4 <__hexnan+0x148>
8111e794:	32c02d26 	beq	r6,r11,8111e84c <__hexnan+0x1f0>
8111e798:	5affff04 	addi	r11,r11,-4
8111e79c:	58800017 	ldw	r2,0(r11)
8111e7a0:	103ffc26 	beq	r2,zero,8111e794 <__reset+0xfb0fe794>
8111e7a4:	00800144 	movi	r2,5
8111e7a8:	00001606 	br	8111e804 <__hexnan+0x1a8>
8111e7ac:	39c00044 	addi	r7,r7,1
8111e7b0:	63000044 	addi	r12,r12,1
8111e7b4:	89c0040e 	bge	r17,r7,8111e7c8 <__hexnan+0x16c>
8111e7b8:	317fc52e 	bgeu	r6,r5,8111e6d0 <__reset+0xfb0fe6d0>
8111e7bc:	283fff15 	stw	zero,-4(r5)
8111e7c0:	01c00044 	movi	r7,1
8111e7c4:	297fff04 	addi	r5,r5,-4
8111e7c8:	28c00017 	ldw	r3,0(r5)
8111e7cc:	108003cc 	andi	r2,r2,15
8111e7d0:	1806913a 	slli	r3,r3,4
8111e7d4:	1884b03a 	or	r2,r3,r2
8111e7d8:	28800015 	stw	r2,0(r5)
8111e7dc:	003fbc06 	br	8111e6d0 <__reset+0xfb0fe6d0>
8111e7e0:	2b7fff04 	addi	r13,r5,-4
8111e7e4:	283fff15 	stw	zero,-4(r5)
8111e7e8:	603f883a 	mov	ra,r12
8111e7ec:	680b883a 	mov	r5,r13
8111e7f0:	000f883a 	mov	r7,zero
8111e7f4:	003fb606 	br	8111e6d0 <__reset+0xfb0fe6d0>
8111e7f8:	00800a44 	movi	r2,41
8111e7fc:	18801726 	beq	r3,r2,8111e85c <__hexnan+0x200>
8111e800:	00800104 	movi	r2,4
8111e804:	dfc00617 	ldw	ra,24(sp)
8111e808:	dd400517 	ldw	r21,20(sp)
8111e80c:	dd000417 	ldw	r20,16(sp)
8111e810:	dcc00317 	ldw	r19,12(sp)
8111e814:	dc800217 	ldw	r18,8(sp)
8111e818:	dc400117 	ldw	r17,4(sp)
8111e81c:	dc000017 	ldw	r16,0(sp)
8111e820:	dec00704 	addi	sp,sp,28
8111e824:	f800283a 	ret
8111e828:	903fd826 	beq	r18,zero,8111e78c <__reset+0xfb0fe78c>
8111e82c:	00c00804 	movi	r3,32
8111e830:	1ca5c83a 	sub	r18,r3,r18
8111e834:	00ffffc4 	movi	r3,-1
8111e838:	78bfff17 	ldw	r2,-4(r15)
8111e83c:	1c86d83a 	srl	r3,r3,r18
8111e840:	1884703a 	and	r2,r3,r2
8111e844:	78bfff15 	stw	r2,-4(r15)
8111e848:	003fd106 	br	8111e790 <__reset+0xfb0fe790>
8111e84c:	00800044 	movi	r2,1
8111e850:	58800015 	stw	r2,0(r11)
8111e854:	00800144 	movi	r2,5
8111e858:	003fea06 	br	8111e804 <__reset+0xfb0fe804>
8111e85c:	42000044 	addi	r8,r8,1
8111e860:	22000015 	stw	r8,0(r4)
8111e864:	603fbb1e 	bne	r12,zero,8111e754 <__reset+0xfb0fe754>
8111e868:	003fe506 	br	8111e800 <__reset+0xfb0fe800>
8111e86c:	02400204 	movi	r9,8
8111e870:	49d3c83a 	sub	r9,r9,r7
8111e874:	4a53883a 	add	r9,r9,r9
8111e878:	2a000017 	ldw	r8,0(r5)
8111e87c:	4a53883a 	add	r9,r9,r9
8111e880:	02800804 	movi	r10,32
8111e884:	5255c83a 	sub	r10,r10,r9
8111e888:	28c00104 	addi	r3,r5,4
8111e88c:	2805883a 	mov	r2,r5
8111e890:	19c00017 	ldw	r7,0(r3)
8111e894:	10800104 	addi	r2,r2,4
8111e898:	18c00104 	addi	r3,r3,4
8111e89c:	3a88983a 	sll	r4,r7,r10
8111e8a0:	2208b03a 	or	r4,r4,r8
8111e8a4:	3a50d83a 	srl	r8,r7,r9
8111e8a8:	113fff15 	stw	r4,-4(r2)
8111e8ac:	1a3fff15 	stw	r8,-4(r3)
8111e8b0:	137ff736 	bltu	r2,r13,8111e890 <__reset+0xfb0fe890>
8111e8b4:	003faa06 	br	8111e760 <__reset+0xfb0fe760>

8111e8b8 <strncmp>:
8111e8b8:	30003126 	beq	r6,zero,8111e980 <strncmp+0xc8>
8111e8bc:	2144b03a 	or	r2,r4,r5
8111e8c0:	108000cc 	andi	r2,r2,3
8111e8c4:	10001e1e 	bne	r2,zero,8111e940 <strncmp+0x88>
8111e8c8:	024000c4 	movi	r9,3
8111e8cc:	49801c2e 	bgeu	r9,r6,8111e940 <strncmp+0x88>
8111e8d0:	20800017 	ldw	r2,0(r4)
8111e8d4:	28c00017 	ldw	r3,0(r5)
8111e8d8:	10c0191e 	bne	r2,r3,8111e940 <strncmp+0x88>
8111e8dc:	31bfff04 	addi	r6,r6,-4
8111e8e0:	30002726 	beq	r6,zero,8111e980 <strncmp+0xc8>
8111e8e4:	02ffbff4 	movhi	r11,65279
8111e8e8:	5affbfc4 	addi	r11,r11,-257
8111e8ec:	0086303a 	nor	r3,zero,r2
8111e8f0:	02a02074 	movhi	r10,32897
8111e8f4:	12c5883a 	add	r2,r2,r11
8111e8f8:	52a02004 	addi	r10,r10,-32640
8111e8fc:	10c4703a 	and	r2,r2,r3
8111e900:	1284703a 	and	r2,r2,r10
8111e904:	10000b26 	beq	r2,zero,8111e934 <strncmp+0x7c>
8111e908:	00001d06 	br	8111e980 <strncmp+0xc8>
8111e90c:	20c00017 	ldw	r3,0(r4)
8111e910:	29c00017 	ldw	r7,0(r5)
8111e914:	1ad1883a 	add	r8,r3,r11
8111e918:	00c4303a 	nor	r2,zero,r3
8111e91c:	4084703a 	and	r2,r8,r2
8111e920:	1284703a 	and	r2,r2,r10
8111e924:	19c0061e 	bne	r3,r7,8111e940 <strncmp+0x88>
8111e928:	31bfff04 	addi	r6,r6,-4
8111e92c:	30001426 	beq	r6,zero,8111e980 <strncmp+0xc8>
8111e930:	1000131e 	bne	r2,zero,8111e980 <strncmp+0xc8>
8111e934:	21000104 	addi	r4,r4,4
8111e938:	29400104 	addi	r5,r5,4
8111e93c:	49bff336 	bltu	r9,r6,8111e90c <__reset+0xfb0fe90c>
8111e940:	28800007 	ldb	r2,0(r5)
8111e944:	20c00007 	ldb	r3,0(r4)
8111e948:	31bfffc4 	addi	r6,r6,-1
8111e94c:	10c0081e 	bne	r2,r3,8111e970 <strncmp+0xb8>
8111e950:	30000b26 	beq	r6,zero,8111e980 <strncmp+0xc8>
8111e954:	10000a26 	beq	r2,zero,8111e980 <strncmp+0xc8>
8111e958:	21000044 	addi	r4,r4,1
8111e95c:	29400044 	addi	r5,r5,1
8111e960:	20800007 	ldb	r2,0(r4)
8111e964:	28c00007 	ldb	r3,0(r5)
8111e968:	31bfffc4 	addi	r6,r6,-1
8111e96c:	10fff826 	beq	r2,r3,8111e950 <__reset+0xfb0fe950>
8111e970:	20800003 	ldbu	r2,0(r4)
8111e974:	28c00003 	ldbu	r3,0(r5)
8111e978:	10c5c83a 	sub	r2,r2,r3
8111e97c:	f800283a 	ret
8111e980:	0005883a 	mov	r2,zero
8111e984:	f800283a 	ret

8111e988 <_wcrtomb_r>:
8111e988:	defff604 	addi	sp,sp,-40
8111e98c:	00a04534 	movhi	r2,33044
8111e990:	dc800815 	stw	r18,32(sp)
8111e994:	dc400715 	stw	r17,28(sp)
8111e998:	dc000615 	stw	r16,24(sp)
8111e99c:	10a66004 	addi	r2,r2,-26240
8111e9a0:	dfc00915 	stw	ra,36(sp)
8111e9a4:	2021883a 	mov	r16,r4
8111e9a8:	3823883a 	mov	r17,r7
8111e9ac:	14800017 	ldw	r18,0(r2)
8111e9b0:	28001426 	beq	r5,zero,8111ea04 <_wcrtomb_r+0x7c>
8111e9b4:	d9400415 	stw	r5,16(sp)
8111e9b8:	d9800515 	stw	r6,20(sp)
8111e9bc:	1116d280 	call	81116d28 <__locale_charset>
8111e9c0:	d9800517 	ldw	r6,20(sp)
8111e9c4:	d9400417 	ldw	r5,16(sp)
8111e9c8:	100f883a 	mov	r7,r2
8111e9cc:	dc400015 	stw	r17,0(sp)
8111e9d0:	8009883a 	mov	r4,r16
8111e9d4:	903ee83a 	callr	r18
8111e9d8:	00ffffc4 	movi	r3,-1
8111e9dc:	10c0031e 	bne	r2,r3,8111e9ec <_wcrtomb_r+0x64>
8111e9e0:	88000015 	stw	zero,0(r17)
8111e9e4:	00c02284 	movi	r3,138
8111e9e8:	80c00015 	stw	r3,0(r16)
8111e9ec:	dfc00917 	ldw	ra,36(sp)
8111e9f0:	dc800817 	ldw	r18,32(sp)
8111e9f4:	dc400717 	ldw	r17,28(sp)
8111e9f8:	dc000617 	ldw	r16,24(sp)
8111e9fc:	dec00a04 	addi	sp,sp,40
8111ea00:	f800283a 	ret
8111ea04:	1116d280 	call	81116d28 <__locale_charset>
8111ea08:	100f883a 	mov	r7,r2
8111ea0c:	dc400015 	stw	r17,0(sp)
8111ea10:	000d883a 	mov	r6,zero
8111ea14:	d9400104 	addi	r5,sp,4
8111ea18:	8009883a 	mov	r4,r16
8111ea1c:	903ee83a 	callr	r18
8111ea20:	003fed06 	br	8111e9d8 <__reset+0xfb0fe9d8>

8111ea24 <wcrtomb>:
8111ea24:	defff604 	addi	sp,sp,-40
8111ea28:	00a04534 	movhi	r2,33044
8111ea2c:	dc800615 	stw	r18,24(sp)
8111ea30:	dc400515 	stw	r17,20(sp)
8111ea34:	10a65b04 	addi	r2,r2,-26260
8111ea38:	dfc00915 	stw	ra,36(sp)
8111ea3c:	dd000815 	stw	r20,32(sp)
8111ea40:	dcc00715 	stw	r19,28(sp)
8111ea44:	dc000415 	stw	r16,16(sp)
8111ea48:	3025883a 	mov	r18,r6
8111ea4c:	14400017 	ldw	r17,0(r2)
8111ea50:	20001926 	beq	r4,zero,8111eab8 <wcrtomb+0x94>
8111ea54:	00a04534 	movhi	r2,33044
8111ea58:	10a66004 	addi	r2,r2,-26240
8111ea5c:	15000017 	ldw	r20,0(r2)
8111ea60:	2021883a 	mov	r16,r4
8111ea64:	2827883a 	mov	r19,r5
8111ea68:	1116d280 	call	81116d28 <__locale_charset>
8111ea6c:	100f883a 	mov	r7,r2
8111ea70:	dc800015 	stw	r18,0(sp)
8111ea74:	980d883a 	mov	r6,r19
8111ea78:	800b883a 	mov	r5,r16
8111ea7c:	8809883a 	mov	r4,r17
8111ea80:	a03ee83a 	callr	r20
8111ea84:	00ffffc4 	movi	r3,-1
8111ea88:	10c0031e 	bne	r2,r3,8111ea98 <wcrtomb+0x74>
8111ea8c:	90000015 	stw	zero,0(r18)
8111ea90:	00c02284 	movi	r3,138
8111ea94:	88c00015 	stw	r3,0(r17)
8111ea98:	dfc00917 	ldw	ra,36(sp)
8111ea9c:	dd000817 	ldw	r20,32(sp)
8111eaa0:	dcc00717 	ldw	r19,28(sp)
8111eaa4:	dc800617 	ldw	r18,24(sp)
8111eaa8:	dc400517 	ldw	r17,20(sp)
8111eaac:	dc000417 	ldw	r16,16(sp)
8111eab0:	dec00a04 	addi	sp,sp,40
8111eab4:	f800283a 	ret
8111eab8:	00a04534 	movhi	r2,33044
8111eabc:	10a66004 	addi	r2,r2,-26240
8111eac0:	14000017 	ldw	r16,0(r2)
8111eac4:	1116d280 	call	81116d28 <__locale_charset>
8111eac8:	100f883a 	mov	r7,r2
8111eacc:	dc800015 	stw	r18,0(sp)
8111ead0:	000d883a 	mov	r6,zero
8111ead4:	d9400104 	addi	r5,sp,4
8111ead8:	8809883a 	mov	r4,r17
8111eadc:	803ee83a 	callr	r16
8111eae0:	003fe806 	br	8111ea84 <__reset+0xfb0fea84>

8111eae4 <__ascii_wctomb>:
8111eae4:	28000526 	beq	r5,zero,8111eafc <__ascii_wctomb+0x18>
8111eae8:	00803fc4 	movi	r2,255
8111eaec:	11800536 	bltu	r2,r6,8111eb04 <__ascii_wctomb+0x20>
8111eaf0:	29800005 	stb	r6,0(r5)
8111eaf4:	00800044 	movi	r2,1
8111eaf8:	f800283a 	ret
8111eafc:	0005883a 	mov	r2,zero
8111eb00:	f800283a 	ret
8111eb04:	00802284 	movi	r2,138
8111eb08:	20800015 	stw	r2,0(r4)
8111eb0c:	00bfffc4 	movi	r2,-1
8111eb10:	f800283a 	ret

8111eb14 <_wctomb_r>:
8111eb14:	00a04534 	movhi	r2,33044
8111eb18:	defff904 	addi	sp,sp,-28
8111eb1c:	10a66004 	addi	r2,r2,-26240
8111eb20:	dfc00615 	stw	ra,24(sp)
8111eb24:	dc400515 	stw	r17,20(sp)
8111eb28:	dc000415 	stw	r16,16(sp)
8111eb2c:	3823883a 	mov	r17,r7
8111eb30:	14000017 	ldw	r16,0(r2)
8111eb34:	d9000115 	stw	r4,4(sp)
8111eb38:	d9400215 	stw	r5,8(sp)
8111eb3c:	d9800315 	stw	r6,12(sp)
8111eb40:	1116d280 	call	81116d28 <__locale_charset>
8111eb44:	d9800317 	ldw	r6,12(sp)
8111eb48:	d9400217 	ldw	r5,8(sp)
8111eb4c:	d9000117 	ldw	r4,4(sp)
8111eb50:	100f883a 	mov	r7,r2
8111eb54:	dc400015 	stw	r17,0(sp)
8111eb58:	803ee83a 	callr	r16
8111eb5c:	dfc00617 	ldw	ra,24(sp)
8111eb60:	dc400517 	ldw	r17,20(sp)
8111eb64:	dc000417 	ldw	r16,16(sp)
8111eb68:	dec00704 	addi	sp,sp,28
8111eb6c:	f800283a 	ret

8111eb70 <__fixunsdfsi>:
8111eb70:	defffd04 	addi	sp,sp,-12
8111eb74:	000d883a 	mov	r6,zero
8111eb78:	01d07834 	movhi	r7,16864
8111eb7c:	dc400115 	stw	r17,4(sp)
8111eb80:	dc000015 	stw	r16,0(sp)
8111eb84:	dfc00215 	stw	ra,8(sp)
8111eb88:	2023883a 	mov	r17,r4
8111eb8c:	2821883a 	mov	r16,r5
8111eb90:	1120c600 	call	81120c60 <__gedf2>
8111eb94:	1000080e 	bge	r2,zero,8111ebb8 <__fixunsdfsi+0x48>
8111eb98:	8809883a 	mov	r4,r17
8111eb9c:	800b883a 	mov	r5,r16
8111eba0:	112172c0 	call	8112172c <__fixdfsi>
8111eba4:	dfc00217 	ldw	ra,8(sp)
8111eba8:	dc400117 	ldw	r17,4(sp)
8111ebac:	dc000017 	ldw	r16,0(sp)
8111ebb0:	dec00304 	addi	sp,sp,12
8111ebb4:	f800283a 	ret
8111ebb8:	000d883a 	mov	r6,zero
8111ebbc:	01d07834 	movhi	r7,16864
8111ebc0:	8809883a 	mov	r4,r17
8111ebc4:	800b883a 	mov	r5,r16
8111ebc8:	1120e300 	call	81120e30 <__subdf3>
8111ebcc:	180b883a 	mov	r5,r3
8111ebd0:	1009883a 	mov	r4,r2
8111ebd4:	112172c0 	call	8112172c <__fixdfsi>
8111ebd8:	00e00034 	movhi	r3,32768
8111ebdc:	10c5883a 	add	r2,r2,r3
8111ebe0:	003ff006 	br	8111eba4 <__reset+0xfb0feba4>

8111ebe4 <__udivdi3>:
8111ebe4:	defff504 	addi	sp,sp,-44
8111ebe8:	dcc00415 	stw	r19,16(sp)
8111ebec:	dc000115 	stw	r16,4(sp)
8111ebf0:	dfc00a15 	stw	ra,40(sp)
8111ebf4:	df000915 	stw	fp,36(sp)
8111ebf8:	ddc00815 	stw	r23,32(sp)
8111ebfc:	dd800715 	stw	r22,28(sp)
8111ec00:	dd400615 	stw	r21,24(sp)
8111ec04:	dd000515 	stw	r20,20(sp)
8111ec08:	dc800315 	stw	r18,12(sp)
8111ec0c:	dc400215 	stw	r17,8(sp)
8111ec10:	2027883a 	mov	r19,r4
8111ec14:	2821883a 	mov	r16,r5
8111ec18:	3800411e 	bne	r7,zero,8111ed20 <__udivdi3+0x13c>
8111ec1c:	3023883a 	mov	r17,r6
8111ec20:	2025883a 	mov	r18,r4
8111ec24:	2980522e 	bgeu	r5,r6,8111ed70 <__udivdi3+0x18c>
8111ec28:	00bfffd4 	movui	r2,65535
8111ec2c:	282d883a 	mov	r22,r5
8111ec30:	1180a836 	bltu	r2,r6,8111eed4 <__udivdi3+0x2f0>
8111ec34:	00803fc4 	movi	r2,255
8111ec38:	1185803a 	cmpltu	r2,r2,r6
8111ec3c:	100490fa 	slli	r2,r2,3
8111ec40:	3086d83a 	srl	r3,r6,r2
8111ec44:	012044f4 	movhi	r4,33043
8111ec48:	211c7604 	addi	r4,r4,29144
8111ec4c:	20c7883a 	add	r3,r4,r3
8111ec50:	18c00003 	ldbu	r3,0(r3)
8111ec54:	1885883a 	add	r2,r3,r2
8111ec58:	00c00804 	movi	r3,32
8111ec5c:	1887c83a 	sub	r3,r3,r2
8111ec60:	18000526 	beq	r3,zero,8111ec78 <__udivdi3+0x94>
8111ec64:	80e0983a 	sll	r16,r16,r3
8111ec68:	9884d83a 	srl	r2,r19,r2
8111ec6c:	30e2983a 	sll	r17,r6,r3
8111ec70:	98e4983a 	sll	r18,r19,r3
8111ec74:	142cb03a 	or	r22,r2,r16
8111ec78:	882ad43a 	srli	r21,r17,16
8111ec7c:	b009883a 	mov	r4,r22
8111ec80:	8d3fffcc 	andi	r20,r17,65535
8111ec84:	a80b883a 	mov	r5,r21
8111ec88:	111f7f00 	call	8111f7f0 <__umodsi3>
8111ec8c:	b009883a 	mov	r4,r22
8111ec90:	a80b883a 	mov	r5,r21
8111ec94:	1027883a 	mov	r19,r2
8111ec98:	111f78c0 	call	8111f78c <__udivsi3>
8111ec9c:	102d883a 	mov	r22,r2
8111eca0:	9826943a 	slli	r19,r19,16
8111eca4:	9004d43a 	srli	r2,r18,16
8111eca8:	a5a1383a 	mul	r16,r20,r22
8111ecac:	14c4b03a 	or	r2,r2,r19
8111ecb0:	1400052e 	bgeu	r2,r16,8111ecc8 <__udivdi3+0xe4>
8111ecb4:	1445883a 	add	r2,r2,r17
8111ecb8:	b0ffffc4 	addi	r3,r22,-1
8111ecbc:	14400136 	bltu	r2,r17,8111ecc4 <__udivdi3+0xe0>
8111ecc0:	14012336 	bltu	r2,r16,8111f150 <__udivdi3+0x56c>
8111ecc4:	182d883a 	mov	r22,r3
8111ecc8:	1421c83a 	sub	r16,r2,r16
8111eccc:	a80b883a 	mov	r5,r21
8111ecd0:	8009883a 	mov	r4,r16
8111ecd4:	111f7f00 	call	8111f7f0 <__umodsi3>
8111ecd8:	1027883a 	mov	r19,r2
8111ecdc:	a80b883a 	mov	r5,r21
8111ece0:	8009883a 	mov	r4,r16
8111ece4:	111f78c0 	call	8111f78c <__udivsi3>
8111ece8:	9826943a 	slli	r19,r19,16
8111ecec:	a0a9383a 	mul	r20,r20,r2
8111ecf0:	94bfffcc 	andi	r18,r18,65535
8111ecf4:	94e4b03a 	or	r18,r18,r19
8111ecf8:	9500052e 	bgeu	r18,r20,8111ed10 <__udivdi3+0x12c>
8111ecfc:	8ca5883a 	add	r18,r17,r18
8111ed00:	10ffffc4 	addi	r3,r2,-1
8111ed04:	9440f136 	bltu	r18,r17,8111f0cc <__udivdi3+0x4e8>
8111ed08:	9500f02e 	bgeu	r18,r20,8111f0cc <__udivdi3+0x4e8>
8111ed0c:	10bfff84 	addi	r2,r2,-2
8111ed10:	b00c943a 	slli	r6,r22,16
8111ed14:	0007883a 	mov	r3,zero
8111ed18:	3084b03a 	or	r2,r6,r2
8111ed1c:	00005906 	br	8111ee84 <__udivdi3+0x2a0>
8111ed20:	29c05636 	bltu	r5,r7,8111ee7c <__udivdi3+0x298>
8111ed24:	00bfffd4 	movui	r2,65535
8111ed28:	11c0622e 	bgeu	r2,r7,8111eeb4 <__udivdi3+0x2d0>
8111ed2c:	00804034 	movhi	r2,256
8111ed30:	10bfffc4 	addi	r2,r2,-1
8111ed34:	11c0ee36 	bltu	r2,r7,8111f0f0 <__udivdi3+0x50c>
8111ed38:	00800404 	movi	r2,16
8111ed3c:	3886d83a 	srl	r3,r7,r2
8111ed40:	012044f4 	movhi	r4,33043
8111ed44:	211c7604 	addi	r4,r4,29144
8111ed48:	20c7883a 	add	r3,r4,r3
8111ed4c:	18c00003 	ldbu	r3,0(r3)
8111ed50:	05400804 	movi	r21,32
8111ed54:	1885883a 	add	r2,r3,r2
8111ed58:	a8abc83a 	sub	r21,r21,r2
8111ed5c:	a800621e 	bne	r21,zero,8111eee8 <__udivdi3+0x304>
8111ed60:	3c00e936 	bltu	r7,r16,8111f108 <__udivdi3+0x524>
8111ed64:	9985403a 	cmpgeu	r2,r19,r6
8111ed68:	0007883a 	mov	r3,zero
8111ed6c:	00004506 	br	8111ee84 <__udivdi3+0x2a0>
8111ed70:	3000041e 	bne	r6,zero,8111ed84 <__udivdi3+0x1a0>
8111ed74:	000b883a 	mov	r5,zero
8111ed78:	01000044 	movi	r4,1
8111ed7c:	111f78c0 	call	8111f78c <__udivsi3>
8111ed80:	1023883a 	mov	r17,r2
8111ed84:	00bfffd4 	movui	r2,65535
8111ed88:	14404e2e 	bgeu	r2,r17,8111eec4 <__udivdi3+0x2e0>
8111ed8c:	00804034 	movhi	r2,256
8111ed90:	10bfffc4 	addi	r2,r2,-1
8111ed94:	1440d836 	bltu	r2,r17,8111f0f8 <__udivdi3+0x514>
8111ed98:	00800404 	movi	r2,16
8111ed9c:	8886d83a 	srl	r3,r17,r2
8111eda0:	012044f4 	movhi	r4,33043
8111eda4:	211c7604 	addi	r4,r4,29144
8111eda8:	20c7883a 	add	r3,r4,r3
8111edac:	18c00003 	ldbu	r3,0(r3)
8111edb0:	1885883a 	add	r2,r3,r2
8111edb4:	00c00804 	movi	r3,32
8111edb8:	1887c83a 	sub	r3,r3,r2
8111edbc:	18008f1e 	bne	r3,zero,8111effc <__udivdi3+0x418>
8111edc0:	882ad43a 	srli	r21,r17,16
8111edc4:	8461c83a 	sub	r16,r16,r17
8111edc8:	8d3fffcc 	andi	r20,r17,65535
8111edcc:	00c00044 	movi	r3,1
8111edd0:	8009883a 	mov	r4,r16
8111edd4:	a80b883a 	mov	r5,r21
8111edd8:	d8c00015 	stw	r3,0(sp)
8111eddc:	111f7f00 	call	8111f7f0 <__umodsi3>
8111ede0:	8009883a 	mov	r4,r16
8111ede4:	a80b883a 	mov	r5,r21
8111ede8:	1027883a 	mov	r19,r2
8111edec:	111f78c0 	call	8111f78c <__udivsi3>
8111edf0:	9826943a 	slli	r19,r19,16
8111edf4:	9008d43a 	srli	r4,r18,16
8111edf8:	1521383a 	mul	r16,r2,r20
8111edfc:	102d883a 	mov	r22,r2
8111ee00:	24c8b03a 	or	r4,r4,r19
8111ee04:	d8c00017 	ldw	r3,0(sp)
8111ee08:	2400052e 	bgeu	r4,r16,8111ee20 <__udivdi3+0x23c>
8111ee0c:	2449883a 	add	r4,r4,r17
8111ee10:	b0bfffc4 	addi	r2,r22,-1
8111ee14:	24400136 	bltu	r4,r17,8111ee1c <__udivdi3+0x238>
8111ee18:	2400ca36 	bltu	r4,r16,8111f144 <__udivdi3+0x560>
8111ee1c:	102d883a 	mov	r22,r2
8111ee20:	2421c83a 	sub	r16,r4,r16
8111ee24:	a80b883a 	mov	r5,r21
8111ee28:	8009883a 	mov	r4,r16
8111ee2c:	d8c00015 	stw	r3,0(sp)
8111ee30:	111f7f00 	call	8111f7f0 <__umodsi3>
8111ee34:	1027883a 	mov	r19,r2
8111ee38:	a80b883a 	mov	r5,r21
8111ee3c:	8009883a 	mov	r4,r16
8111ee40:	111f78c0 	call	8111f78c <__udivsi3>
8111ee44:	9826943a 	slli	r19,r19,16
8111ee48:	1529383a 	mul	r20,r2,r20
8111ee4c:	94bfffcc 	andi	r18,r18,65535
8111ee50:	94e4b03a 	or	r18,r18,r19
8111ee54:	d8c00017 	ldw	r3,0(sp)
8111ee58:	9500052e 	bgeu	r18,r20,8111ee70 <__udivdi3+0x28c>
8111ee5c:	8ca5883a 	add	r18,r17,r18
8111ee60:	113fffc4 	addi	r4,r2,-1
8111ee64:	94409736 	bltu	r18,r17,8111f0c4 <__udivdi3+0x4e0>
8111ee68:	9500962e 	bgeu	r18,r20,8111f0c4 <__udivdi3+0x4e0>
8111ee6c:	10bfff84 	addi	r2,r2,-2
8111ee70:	b00c943a 	slli	r6,r22,16
8111ee74:	3084b03a 	or	r2,r6,r2
8111ee78:	00000206 	br	8111ee84 <__udivdi3+0x2a0>
8111ee7c:	0007883a 	mov	r3,zero
8111ee80:	0005883a 	mov	r2,zero
8111ee84:	dfc00a17 	ldw	ra,40(sp)
8111ee88:	df000917 	ldw	fp,36(sp)
8111ee8c:	ddc00817 	ldw	r23,32(sp)
8111ee90:	dd800717 	ldw	r22,28(sp)
8111ee94:	dd400617 	ldw	r21,24(sp)
8111ee98:	dd000517 	ldw	r20,20(sp)
8111ee9c:	dcc00417 	ldw	r19,16(sp)
8111eea0:	dc800317 	ldw	r18,12(sp)
8111eea4:	dc400217 	ldw	r17,8(sp)
8111eea8:	dc000117 	ldw	r16,4(sp)
8111eeac:	dec00b04 	addi	sp,sp,44
8111eeb0:	f800283a 	ret
8111eeb4:	00803fc4 	movi	r2,255
8111eeb8:	11c5803a 	cmpltu	r2,r2,r7
8111eebc:	100490fa 	slli	r2,r2,3
8111eec0:	003f9e06 	br	8111ed3c <__reset+0xfb0fed3c>
8111eec4:	00803fc4 	movi	r2,255
8111eec8:	1445803a 	cmpltu	r2,r2,r17
8111eecc:	100490fa 	slli	r2,r2,3
8111eed0:	003fb206 	br	8111ed9c <__reset+0xfb0fed9c>
8111eed4:	00804034 	movhi	r2,256
8111eed8:	10bfffc4 	addi	r2,r2,-1
8111eedc:	11808836 	bltu	r2,r6,8111f100 <__udivdi3+0x51c>
8111eee0:	00800404 	movi	r2,16
8111eee4:	003f5606 	br	8111ec40 <__reset+0xfb0fec40>
8111eee8:	30aed83a 	srl	r23,r6,r2
8111eeec:	3d4e983a 	sll	r7,r7,r21
8111eef0:	80acd83a 	srl	r22,r16,r2
8111eef4:	9884d83a 	srl	r2,r19,r2
8111eef8:	3deeb03a 	or	r23,r7,r23
8111eefc:	b824d43a 	srli	r18,r23,16
8111ef00:	8560983a 	sll	r16,r16,r21
8111ef04:	b009883a 	mov	r4,r22
8111ef08:	900b883a 	mov	r5,r18
8111ef0c:	3568983a 	sll	r20,r6,r21
8111ef10:	1420b03a 	or	r16,r2,r16
8111ef14:	111f7f00 	call	8111f7f0 <__umodsi3>
8111ef18:	b009883a 	mov	r4,r22
8111ef1c:	900b883a 	mov	r5,r18
8111ef20:	1023883a 	mov	r17,r2
8111ef24:	111f78c0 	call	8111f78c <__udivsi3>
8111ef28:	8808943a 	slli	r4,r17,16
8111ef2c:	bf3fffcc 	andi	fp,r23,65535
8111ef30:	8006d43a 	srli	r3,r16,16
8111ef34:	e0a3383a 	mul	r17,fp,r2
8111ef38:	100d883a 	mov	r6,r2
8111ef3c:	1906b03a 	or	r3,r3,r4
8111ef40:	1c40042e 	bgeu	r3,r17,8111ef54 <__udivdi3+0x370>
8111ef44:	1dc7883a 	add	r3,r3,r23
8111ef48:	10bfffc4 	addi	r2,r2,-1
8111ef4c:	1dc0752e 	bgeu	r3,r23,8111f124 <__udivdi3+0x540>
8111ef50:	100d883a 	mov	r6,r2
8111ef54:	1c63c83a 	sub	r17,r3,r17
8111ef58:	900b883a 	mov	r5,r18
8111ef5c:	8809883a 	mov	r4,r17
8111ef60:	d9800015 	stw	r6,0(sp)
8111ef64:	111f7f00 	call	8111f7f0 <__umodsi3>
8111ef68:	102d883a 	mov	r22,r2
8111ef6c:	8809883a 	mov	r4,r17
8111ef70:	900b883a 	mov	r5,r18
8111ef74:	111f78c0 	call	8111f78c <__udivsi3>
8111ef78:	b02c943a 	slli	r22,r22,16
8111ef7c:	e089383a 	mul	r4,fp,r2
8111ef80:	843fffcc 	andi	r16,r16,65535
8111ef84:	85a0b03a 	or	r16,r16,r22
8111ef88:	d9800017 	ldw	r6,0(sp)
8111ef8c:	8100042e 	bgeu	r16,r4,8111efa0 <__udivdi3+0x3bc>
8111ef90:	85e1883a 	add	r16,r16,r23
8111ef94:	10ffffc4 	addi	r3,r2,-1
8111ef98:	85c05e2e 	bgeu	r16,r23,8111f114 <__udivdi3+0x530>
8111ef9c:	1805883a 	mov	r2,r3
8111efa0:	300c943a 	slli	r6,r6,16
8111efa4:	a17fffcc 	andi	r5,r20,65535
8111efa8:	a028d43a 	srli	r20,r20,16
8111efac:	3084b03a 	or	r2,r6,r2
8111efb0:	10ffffcc 	andi	r3,r2,65535
8111efb4:	100cd43a 	srli	r6,r2,16
8111efb8:	194f383a 	mul	r7,r3,r5
8111efbc:	1d07383a 	mul	r3,r3,r20
8111efc0:	314b383a 	mul	r5,r6,r5
8111efc4:	3810d43a 	srli	r8,r7,16
8111efc8:	8121c83a 	sub	r16,r16,r4
8111efcc:	1947883a 	add	r3,r3,r5
8111efd0:	40c7883a 	add	r3,r8,r3
8111efd4:	350d383a 	mul	r6,r6,r20
8111efd8:	1940022e 	bgeu	r3,r5,8111efe4 <__udivdi3+0x400>
8111efdc:	01000074 	movhi	r4,1
8111efe0:	310d883a 	add	r6,r6,r4
8111efe4:	1828d43a 	srli	r20,r3,16
8111efe8:	a18d883a 	add	r6,r20,r6
8111efec:	81803e36 	bltu	r16,r6,8111f0e8 <__udivdi3+0x504>
8111eff0:	81803826 	beq	r16,r6,8111f0d4 <__udivdi3+0x4f0>
8111eff4:	0007883a 	mov	r3,zero
8111eff8:	003fa206 	br	8111ee84 <__reset+0xfb0fee84>
8111effc:	88e2983a 	sll	r17,r17,r3
8111f000:	80a8d83a 	srl	r20,r16,r2
8111f004:	80e0983a 	sll	r16,r16,r3
8111f008:	882ad43a 	srli	r21,r17,16
8111f00c:	9884d83a 	srl	r2,r19,r2
8111f010:	a009883a 	mov	r4,r20
8111f014:	a80b883a 	mov	r5,r21
8111f018:	142eb03a 	or	r23,r2,r16
8111f01c:	98e4983a 	sll	r18,r19,r3
8111f020:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f024:	a009883a 	mov	r4,r20
8111f028:	a80b883a 	mov	r5,r21
8111f02c:	1021883a 	mov	r16,r2
8111f030:	111f78c0 	call	8111f78c <__udivsi3>
8111f034:	1039883a 	mov	fp,r2
8111f038:	8d3fffcc 	andi	r20,r17,65535
8111f03c:	8020943a 	slli	r16,r16,16
8111f040:	b804d43a 	srli	r2,r23,16
8111f044:	a72d383a 	mul	r22,r20,fp
8111f048:	1404b03a 	or	r2,r2,r16
8111f04c:	1580062e 	bgeu	r2,r22,8111f068 <__udivdi3+0x484>
8111f050:	1445883a 	add	r2,r2,r17
8111f054:	e0ffffc4 	addi	r3,fp,-1
8111f058:	14403836 	bltu	r2,r17,8111f13c <__udivdi3+0x558>
8111f05c:	1580372e 	bgeu	r2,r22,8111f13c <__udivdi3+0x558>
8111f060:	e73fff84 	addi	fp,fp,-2
8111f064:	1445883a 	add	r2,r2,r17
8111f068:	15adc83a 	sub	r22,r2,r22
8111f06c:	a80b883a 	mov	r5,r21
8111f070:	b009883a 	mov	r4,r22
8111f074:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f078:	1027883a 	mov	r19,r2
8111f07c:	b009883a 	mov	r4,r22
8111f080:	a80b883a 	mov	r5,r21
8111f084:	111f78c0 	call	8111f78c <__udivsi3>
8111f088:	9826943a 	slli	r19,r19,16
8111f08c:	a0a1383a 	mul	r16,r20,r2
8111f090:	b93fffcc 	andi	r4,r23,65535
8111f094:	24c8b03a 	or	r4,r4,r19
8111f098:	2400062e 	bgeu	r4,r16,8111f0b4 <__udivdi3+0x4d0>
8111f09c:	2449883a 	add	r4,r4,r17
8111f0a0:	10ffffc4 	addi	r3,r2,-1
8111f0a4:	24402336 	bltu	r4,r17,8111f134 <__udivdi3+0x550>
8111f0a8:	2400222e 	bgeu	r4,r16,8111f134 <__udivdi3+0x550>
8111f0ac:	10bfff84 	addi	r2,r2,-2
8111f0b0:	2449883a 	add	r4,r4,r17
8111f0b4:	e038943a 	slli	fp,fp,16
8111f0b8:	2421c83a 	sub	r16,r4,r16
8111f0bc:	e086b03a 	or	r3,fp,r2
8111f0c0:	003f4306 	br	8111edd0 <__reset+0xfb0fedd0>
8111f0c4:	2005883a 	mov	r2,r4
8111f0c8:	003f6906 	br	8111ee70 <__reset+0xfb0fee70>
8111f0cc:	1805883a 	mov	r2,r3
8111f0d0:	003f0f06 	br	8111ed10 <__reset+0xfb0fed10>
8111f0d4:	1806943a 	slli	r3,r3,16
8111f0d8:	9d66983a 	sll	r19,r19,r21
8111f0dc:	39ffffcc 	andi	r7,r7,65535
8111f0e0:	19c7883a 	add	r3,r3,r7
8111f0e4:	98ffc32e 	bgeu	r19,r3,8111eff4 <__reset+0xfb0feff4>
8111f0e8:	10bfffc4 	addi	r2,r2,-1
8111f0ec:	003fc106 	br	8111eff4 <__reset+0xfb0feff4>
8111f0f0:	00800604 	movi	r2,24
8111f0f4:	003f1106 	br	8111ed3c <__reset+0xfb0fed3c>
8111f0f8:	00800604 	movi	r2,24
8111f0fc:	003f2706 	br	8111ed9c <__reset+0xfb0fed9c>
8111f100:	00800604 	movi	r2,24
8111f104:	003ece06 	br	8111ec40 <__reset+0xfb0fec40>
8111f108:	0007883a 	mov	r3,zero
8111f10c:	00800044 	movi	r2,1
8111f110:	003f5c06 	br	8111ee84 <__reset+0xfb0fee84>
8111f114:	813fa12e 	bgeu	r16,r4,8111ef9c <__reset+0xfb0fef9c>
8111f118:	10bfff84 	addi	r2,r2,-2
8111f11c:	85e1883a 	add	r16,r16,r23
8111f120:	003f9f06 	br	8111efa0 <__reset+0xfb0fefa0>
8111f124:	1c7f8a2e 	bgeu	r3,r17,8111ef50 <__reset+0xfb0fef50>
8111f128:	31bfff84 	addi	r6,r6,-2
8111f12c:	1dc7883a 	add	r3,r3,r23
8111f130:	003f8806 	br	8111ef54 <__reset+0xfb0fef54>
8111f134:	1805883a 	mov	r2,r3
8111f138:	003fde06 	br	8111f0b4 <__reset+0xfb0ff0b4>
8111f13c:	1839883a 	mov	fp,r3
8111f140:	003fc906 	br	8111f068 <__reset+0xfb0ff068>
8111f144:	b5bfff84 	addi	r22,r22,-2
8111f148:	2449883a 	add	r4,r4,r17
8111f14c:	003f3406 	br	8111ee20 <__reset+0xfb0fee20>
8111f150:	b5bfff84 	addi	r22,r22,-2
8111f154:	1445883a 	add	r2,r2,r17
8111f158:	003edb06 	br	8111ecc8 <__reset+0xfb0fecc8>

8111f15c <__umoddi3>:
8111f15c:	defff404 	addi	sp,sp,-48
8111f160:	df000a15 	stw	fp,40(sp)
8111f164:	dc400315 	stw	r17,12(sp)
8111f168:	dc000215 	stw	r16,8(sp)
8111f16c:	dfc00b15 	stw	ra,44(sp)
8111f170:	ddc00915 	stw	r23,36(sp)
8111f174:	dd800815 	stw	r22,32(sp)
8111f178:	dd400715 	stw	r21,28(sp)
8111f17c:	dd000615 	stw	r20,24(sp)
8111f180:	dcc00515 	stw	r19,20(sp)
8111f184:	dc800415 	stw	r18,16(sp)
8111f188:	2021883a 	mov	r16,r4
8111f18c:	2823883a 	mov	r17,r5
8111f190:	2839883a 	mov	fp,r5
8111f194:	38003c1e 	bne	r7,zero,8111f288 <__umoddi3+0x12c>
8111f198:	3027883a 	mov	r19,r6
8111f19c:	2029883a 	mov	r20,r4
8111f1a0:	2980512e 	bgeu	r5,r6,8111f2e8 <__umoddi3+0x18c>
8111f1a4:	00bfffd4 	movui	r2,65535
8111f1a8:	11809a36 	bltu	r2,r6,8111f414 <__umoddi3+0x2b8>
8111f1ac:	01003fc4 	movi	r4,255
8111f1b0:	2189803a 	cmpltu	r4,r4,r6
8111f1b4:	200890fa 	slli	r4,r4,3
8111f1b8:	3104d83a 	srl	r2,r6,r4
8111f1bc:	00e044f4 	movhi	r3,33043
8111f1c0:	18dc7604 	addi	r3,r3,29144
8111f1c4:	1885883a 	add	r2,r3,r2
8111f1c8:	10c00003 	ldbu	r3,0(r2)
8111f1cc:	00800804 	movi	r2,32
8111f1d0:	1909883a 	add	r4,r3,r4
8111f1d4:	1125c83a 	sub	r18,r2,r4
8111f1d8:	90000526 	beq	r18,zero,8111f1f0 <__umoddi3+0x94>
8111f1dc:	8ca2983a 	sll	r17,r17,r18
8111f1e0:	8108d83a 	srl	r4,r16,r4
8111f1e4:	34a6983a 	sll	r19,r6,r18
8111f1e8:	84a8983a 	sll	r20,r16,r18
8111f1ec:	2478b03a 	or	fp,r4,r17
8111f1f0:	982ed43a 	srli	r23,r19,16
8111f1f4:	e009883a 	mov	r4,fp
8111f1f8:	9dbfffcc 	andi	r22,r19,65535
8111f1fc:	b80b883a 	mov	r5,r23
8111f200:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f204:	e009883a 	mov	r4,fp
8111f208:	b80b883a 	mov	r5,r23
8111f20c:	102b883a 	mov	r21,r2
8111f210:	111f78c0 	call	8111f78c <__udivsi3>
8111f214:	a806943a 	slli	r3,r21,16
8111f218:	a008d43a 	srli	r4,r20,16
8111f21c:	b085383a 	mul	r2,r22,r2
8111f220:	20c8b03a 	or	r4,r4,r3
8111f224:	2080032e 	bgeu	r4,r2,8111f234 <__umoddi3+0xd8>
8111f228:	24c9883a 	add	r4,r4,r19
8111f22c:	24c00136 	bltu	r4,r19,8111f234 <__umoddi3+0xd8>
8111f230:	20811036 	bltu	r4,r2,8111f674 <__umoddi3+0x518>
8111f234:	20abc83a 	sub	r21,r4,r2
8111f238:	b80b883a 	mov	r5,r23
8111f23c:	a809883a 	mov	r4,r21
8111f240:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f244:	1023883a 	mov	r17,r2
8111f248:	b80b883a 	mov	r5,r23
8111f24c:	a809883a 	mov	r4,r21
8111f250:	111f78c0 	call	8111f78c <__udivsi3>
8111f254:	8822943a 	slli	r17,r17,16
8111f258:	b085383a 	mul	r2,r22,r2
8111f25c:	a0ffffcc 	andi	r3,r20,65535
8111f260:	1c46b03a 	or	r3,r3,r17
8111f264:	1880042e 	bgeu	r3,r2,8111f278 <__umoddi3+0x11c>
8111f268:	1cc7883a 	add	r3,r3,r19
8111f26c:	1cc00236 	bltu	r3,r19,8111f278 <__umoddi3+0x11c>
8111f270:	1880012e 	bgeu	r3,r2,8111f278 <__umoddi3+0x11c>
8111f274:	1cc7883a 	add	r3,r3,r19
8111f278:	1885c83a 	sub	r2,r3,r2
8111f27c:	1484d83a 	srl	r2,r2,r18
8111f280:	0007883a 	mov	r3,zero
8111f284:	00004f06 	br	8111f3c4 <__umoddi3+0x268>
8111f288:	29c04c36 	bltu	r5,r7,8111f3bc <__umoddi3+0x260>
8111f28c:	00bfffd4 	movui	r2,65535
8111f290:	11c0582e 	bgeu	r2,r7,8111f3f4 <__umoddi3+0x298>
8111f294:	00804034 	movhi	r2,256
8111f298:	10bfffc4 	addi	r2,r2,-1
8111f29c:	11c0e736 	bltu	r2,r7,8111f63c <__umoddi3+0x4e0>
8111f2a0:	01000404 	movi	r4,16
8111f2a4:	3904d83a 	srl	r2,r7,r4
8111f2a8:	00e044f4 	movhi	r3,33043
8111f2ac:	18dc7604 	addi	r3,r3,29144
8111f2b0:	1885883a 	add	r2,r3,r2
8111f2b4:	14c00003 	ldbu	r19,0(r2)
8111f2b8:	00c00804 	movi	r3,32
8111f2bc:	9927883a 	add	r19,r19,r4
8111f2c0:	1ce9c83a 	sub	r20,r3,r19
8111f2c4:	a000581e 	bne	r20,zero,8111f428 <__umoddi3+0x2cc>
8111f2c8:	3c400136 	bltu	r7,r17,8111f2d0 <__umoddi3+0x174>
8111f2cc:	8180eb36 	bltu	r16,r6,8111f67c <__umoddi3+0x520>
8111f2d0:	8185c83a 	sub	r2,r16,r6
8111f2d4:	89e3c83a 	sub	r17,r17,r7
8111f2d8:	8089803a 	cmpltu	r4,r16,r2
8111f2dc:	8939c83a 	sub	fp,r17,r4
8111f2e0:	e007883a 	mov	r3,fp
8111f2e4:	00003706 	br	8111f3c4 <__umoddi3+0x268>
8111f2e8:	3000041e 	bne	r6,zero,8111f2fc <__umoddi3+0x1a0>
8111f2ec:	000b883a 	mov	r5,zero
8111f2f0:	01000044 	movi	r4,1
8111f2f4:	111f78c0 	call	8111f78c <__udivsi3>
8111f2f8:	1027883a 	mov	r19,r2
8111f2fc:	00bfffd4 	movui	r2,65535
8111f300:	14c0402e 	bgeu	r2,r19,8111f404 <__umoddi3+0x2a8>
8111f304:	00804034 	movhi	r2,256
8111f308:	10bfffc4 	addi	r2,r2,-1
8111f30c:	14c0cd36 	bltu	r2,r19,8111f644 <__umoddi3+0x4e8>
8111f310:	00800404 	movi	r2,16
8111f314:	9886d83a 	srl	r3,r19,r2
8111f318:	012044f4 	movhi	r4,33043
8111f31c:	211c7604 	addi	r4,r4,29144
8111f320:	20c7883a 	add	r3,r4,r3
8111f324:	18c00003 	ldbu	r3,0(r3)
8111f328:	1887883a 	add	r3,r3,r2
8111f32c:	00800804 	movi	r2,32
8111f330:	10e5c83a 	sub	r18,r2,r3
8111f334:	9000901e 	bne	r18,zero,8111f578 <__umoddi3+0x41c>
8111f338:	982cd43a 	srli	r22,r19,16
8111f33c:	8ce3c83a 	sub	r17,r17,r19
8111f340:	9d7fffcc 	andi	r21,r19,65535
8111f344:	b00b883a 	mov	r5,r22
8111f348:	8809883a 	mov	r4,r17
8111f34c:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f350:	8809883a 	mov	r4,r17
8111f354:	b00b883a 	mov	r5,r22
8111f358:	1021883a 	mov	r16,r2
8111f35c:	111f78c0 	call	8111f78c <__udivsi3>
8111f360:	8006943a 	slli	r3,r16,16
8111f364:	a008d43a 	srli	r4,r20,16
8111f368:	1545383a 	mul	r2,r2,r21
8111f36c:	20c8b03a 	or	r4,r4,r3
8111f370:	2080042e 	bgeu	r4,r2,8111f384 <__umoddi3+0x228>
8111f374:	24c9883a 	add	r4,r4,r19
8111f378:	24c00236 	bltu	r4,r19,8111f384 <__umoddi3+0x228>
8111f37c:	2080012e 	bgeu	r4,r2,8111f384 <__umoddi3+0x228>
8111f380:	24c9883a 	add	r4,r4,r19
8111f384:	20a1c83a 	sub	r16,r4,r2
8111f388:	b00b883a 	mov	r5,r22
8111f38c:	8009883a 	mov	r4,r16
8111f390:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f394:	1023883a 	mov	r17,r2
8111f398:	b00b883a 	mov	r5,r22
8111f39c:	8009883a 	mov	r4,r16
8111f3a0:	111f78c0 	call	8111f78c <__udivsi3>
8111f3a4:	8822943a 	slli	r17,r17,16
8111f3a8:	1545383a 	mul	r2,r2,r21
8111f3ac:	a53fffcc 	andi	r20,r20,65535
8111f3b0:	a446b03a 	or	r3,r20,r17
8111f3b4:	18bfb02e 	bgeu	r3,r2,8111f278 <__reset+0xfb0ff278>
8111f3b8:	003fab06 	br	8111f268 <__reset+0xfb0ff268>
8111f3bc:	2005883a 	mov	r2,r4
8111f3c0:	2807883a 	mov	r3,r5
8111f3c4:	dfc00b17 	ldw	ra,44(sp)
8111f3c8:	df000a17 	ldw	fp,40(sp)
8111f3cc:	ddc00917 	ldw	r23,36(sp)
8111f3d0:	dd800817 	ldw	r22,32(sp)
8111f3d4:	dd400717 	ldw	r21,28(sp)
8111f3d8:	dd000617 	ldw	r20,24(sp)
8111f3dc:	dcc00517 	ldw	r19,20(sp)
8111f3e0:	dc800417 	ldw	r18,16(sp)
8111f3e4:	dc400317 	ldw	r17,12(sp)
8111f3e8:	dc000217 	ldw	r16,8(sp)
8111f3ec:	dec00c04 	addi	sp,sp,48
8111f3f0:	f800283a 	ret
8111f3f4:	04c03fc4 	movi	r19,255
8111f3f8:	99c9803a 	cmpltu	r4,r19,r7
8111f3fc:	200890fa 	slli	r4,r4,3
8111f400:	003fa806 	br	8111f2a4 <__reset+0xfb0ff2a4>
8111f404:	00803fc4 	movi	r2,255
8111f408:	14c5803a 	cmpltu	r2,r2,r19
8111f40c:	100490fa 	slli	r2,r2,3
8111f410:	003fc006 	br	8111f314 <__reset+0xfb0ff314>
8111f414:	00804034 	movhi	r2,256
8111f418:	10bfffc4 	addi	r2,r2,-1
8111f41c:	11808b36 	bltu	r2,r6,8111f64c <__umoddi3+0x4f0>
8111f420:	01000404 	movi	r4,16
8111f424:	003f6406 	br	8111f1b8 <__reset+0xfb0ff1b8>
8111f428:	34c4d83a 	srl	r2,r6,r19
8111f42c:	3d0e983a 	sll	r7,r7,r20
8111f430:	8cf8d83a 	srl	fp,r17,r19
8111f434:	8d10983a 	sll	r8,r17,r20
8111f438:	38aab03a 	or	r21,r7,r2
8111f43c:	a82cd43a 	srli	r22,r21,16
8111f440:	84e2d83a 	srl	r17,r16,r19
8111f444:	e009883a 	mov	r4,fp
8111f448:	b00b883a 	mov	r5,r22
8111f44c:	8a22b03a 	or	r17,r17,r8
8111f450:	3524983a 	sll	r18,r6,r20
8111f454:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f458:	e009883a 	mov	r4,fp
8111f45c:	b00b883a 	mov	r5,r22
8111f460:	102f883a 	mov	r23,r2
8111f464:	111f78c0 	call	8111f78c <__udivsi3>
8111f468:	100d883a 	mov	r6,r2
8111f46c:	b808943a 	slli	r4,r23,16
8111f470:	aa3fffcc 	andi	r8,r21,65535
8111f474:	8804d43a 	srli	r2,r17,16
8111f478:	41af383a 	mul	r23,r8,r6
8111f47c:	8520983a 	sll	r16,r16,r20
8111f480:	1104b03a 	or	r2,r2,r4
8111f484:	15c0042e 	bgeu	r2,r23,8111f498 <__umoddi3+0x33c>
8111f488:	1545883a 	add	r2,r2,r21
8111f48c:	30ffffc4 	addi	r3,r6,-1
8111f490:	1540742e 	bgeu	r2,r21,8111f664 <__umoddi3+0x508>
8111f494:	180d883a 	mov	r6,r3
8111f498:	15efc83a 	sub	r23,r2,r23
8111f49c:	b00b883a 	mov	r5,r22
8111f4a0:	b809883a 	mov	r4,r23
8111f4a4:	d9800115 	stw	r6,4(sp)
8111f4a8:	da000015 	stw	r8,0(sp)
8111f4ac:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f4b0:	b00b883a 	mov	r5,r22
8111f4b4:	b809883a 	mov	r4,r23
8111f4b8:	1039883a 	mov	fp,r2
8111f4bc:	111f78c0 	call	8111f78c <__udivsi3>
8111f4c0:	da000017 	ldw	r8,0(sp)
8111f4c4:	e038943a 	slli	fp,fp,16
8111f4c8:	100b883a 	mov	r5,r2
8111f4cc:	4089383a 	mul	r4,r8,r2
8111f4d0:	8a3fffcc 	andi	r8,r17,65535
8111f4d4:	4710b03a 	or	r8,r8,fp
8111f4d8:	d9800117 	ldw	r6,4(sp)
8111f4dc:	4100042e 	bgeu	r8,r4,8111f4f0 <__umoddi3+0x394>
8111f4e0:	4551883a 	add	r8,r8,r21
8111f4e4:	10bfffc4 	addi	r2,r2,-1
8111f4e8:	45405a2e 	bgeu	r8,r21,8111f654 <__umoddi3+0x4f8>
8111f4ec:	100b883a 	mov	r5,r2
8111f4f0:	300c943a 	slli	r6,r6,16
8111f4f4:	91ffffcc 	andi	r7,r18,65535
8111f4f8:	9004d43a 	srli	r2,r18,16
8111f4fc:	314cb03a 	or	r6,r6,r5
8111f500:	317fffcc 	andi	r5,r6,65535
8111f504:	300cd43a 	srli	r6,r6,16
8111f508:	29d3383a 	mul	r9,r5,r7
8111f50c:	288b383a 	mul	r5,r5,r2
8111f510:	31cf383a 	mul	r7,r6,r7
8111f514:	4806d43a 	srli	r3,r9,16
8111f518:	4111c83a 	sub	r8,r8,r4
8111f51c:	29cb883a 	add	r5,r5,r7
8111f520:	194b883a 	add	r5,r3,r5
8111f524:	3085383a 	mul	r2,r6,r2
8111f528:	29c0022e 	bgeu	r5,r7,8111f534 <__umoddi3+0x3d8>
8111f52c:	00c00074 	movhi	r3,1
8111f530:	10c5883a 	add	r2,r2,r3
8111f534:	2808d43a 	srli	r4,r5,16
8111f538:	280a943a 	slli	r5,r5,16
8111f53c:	4a7fffcc 	andi	r9,r9,65535
8111f540:	2085883a 	add	r2,r4,r2
8111f544:	2a4b883a 	add	r5,r5,r9
8111f548:	40803636 	bltu	r8,r2,8111f624 <__umoddi3+0x4c8>
8111f54c:	40804d26 	beq	r8,r2,8111f684 <__umoddi3+0x528>
8111f550:	4089c83a 	sub	r4,r8,r2
8111f554:	280f883a 	mov	r7,r5
8111f558:	81cfc83a 	sub	r7,r16,r7
8111f55c:	81c7803a 	cmpltu	r3,r16,r7
8111f560:	20c7c83a 	sub	r3,r4,r3
8111f564:	1cc4983a 	sll	r2,r3,r19
8111f568:	3d0ed83a 	srl	r7,r7,r20
8111f56c:	1d06d83a 	srl	r3,r3,r20
8111f570:	11c4b03a 	or	r2,r2,r7
8111f574:	003f9306 	br	8111f3c4 <__reset+0xfb0ff3c4>
8111f578:	9ca6983a 	sll	r19,r19,r18
8111f57c:	88e8d83a 	srl	r20,r17,r3
8111f580:	80c4d83a 	srl	r2,r16,r3
8111f584:	982cd43a 	srli	r22,r19,16
8111f588:	8ca2983a 	sll	r17,r17,r18
8111f58c:	a009883a 	mov	r4,r20
8111f590:	b00b883a 	mov	r5,r22
8111f594:	1478b03a 	or	fp,r2,r17
8111f598:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f59c:	a009883a 	mov	r4,r20
8111f5a0:	b00b883a 	mov	r5,r22
8111f5a4:	1023883a 	mov	r17,r2
8111f5a8:	111f78c0 	call	8111f78c <__udivsi3>
8111f5ac:	9d7fffcc 	andi	r21,r19,65535
8111f5b0:	880a943a 	slli	r5,r17,16
8111f5b4:	e008d43a 	srli	r4,fp,16
8111f5b8:	a885383a 	mul	r2,r21,r2
8111f5bc:	84a8983a 	sll	r20,r16,r18
8111f5c0:	2148b03a 	or	r4,r4,r5
8111f5c4:	2080042e 	bgeu	r4,r2,8111f5d8 <__umoddi3+0x47c>
8111f5c8:	24c9883a 	add	r4,r4,r19
8111f5cc:	24c00236 	bltu	r4,r19,8111f5d8 <__umoddi3+0x47c>
8111f5d0:	2080012e 	bgeu	r4,r2,8111f5d8 <__umoddi3+0x47c>
8111f5d4:	24c9883a 	add	r4,r4,r19
8111f5d8:	20a3c83a 	sub	r17,r4,r2
8111f5dc:	b00b883a 	mov	r5,r22
8111f5e0:	8809883a 	mov	r4,r17
8111f5e4:	111f7f00 	call	8111f7f0 <__umodsi3>
8111f5e8:	102f883a 	mov	r23,r2
8111f5ec:	8809883a 	mov	r4,r17
8111f5f0:	b00b883a 	mov	r5,r22
8111f5f4:	111f78c0 	call	8111f78c <__udivsi3>
8111f5f8:	b82e943a 	slli	r23,r23,16
8111f5fc:	a885383a 	mul	r2,r21,r2
8111f600:	e13fffcc 	andi	r4,fp,65535
8111f604:	25c8b03a 	or	r4,r4,r23
8111f608:	2080042e 	bgeu	r4,r2,8111f61c <__umoddi3+0x4c0>
8111f60c:	24c9883a 	add	r4,r4,r19
8111f610:	24c00236 	bltu	r4,r19,8111f61c <__umoddi3+0x4c0>
8111f614:	2080012e 	bgeu	r4,r2,8111f61c <__umoddi3+0x4c0>
8111f618:	24c9883a 	add	r4,r4,r19
8111f61c:	20a3c83a 	sub	r17,r4,r2
8111f620:	003f4806 	br	8111f344 <__reset+0xfb0ff344>
8111f624:	2c8fc83a 	sub	r7,r5,r18
8111f628:	1545c83a 	sub	r2,r2,r21
8111f62c:	29cb803a 	cmpltu	r5,r5,r7
8111f630:	1145c83a 	sub	r2,r2,r5
8111f634:	4089c83a 	sub	r4,r8,r2
8111f638:	003fc706 	br	8111f558 <__reset+0xfb0ff558>
8111f63c:	01000604 	movi	r4,24
8111f640:	003f1806 	br	8111f2a4 <__reset+0xfb0ff2a4>
8111f644:	00800604 	movi	r2,24
8111f648:	003f3206 	br	8111f314 <__reset+0xfb0ff314>
8111f64c:	01000604 	movi	r4,24
8111f650:	003ed906 	br	8111f1b8 <__reset+0xfb0ff1b8>
8111f654:	413fa52e 	bgeu	r8,r4,8111f4ec <__reset+0xfb0ff4ec>
8111f658:	297fff84 	addi	r5,r5,-2
8111f65c:	4551883a 	add	r8,r8,r21
8111f660:	003fa306 	br	8111f4f0 <__reset+0xfb0ff4f0>
8111f664:	15ff8b2e 	bgeu	r2,r23,8111f494 <__reset+0xfb0ff494>
8111f668:	31bfff84 	addi	r6,r6,-2
8111f66c:	1545883a 	add	r2,r2,r21
8111f670:	003f8906 	br	8111f498 <__reset+0xfb0ff498>
8111f674:	24c9883a 	add	r4,r4,r19
8111f678:	003eee06 	br	8111f234 <__reset+0xfb0ff234>
8111f67c:	8005883a 	mov	r2,r16
8111f680:	003f1706 	br	8111f2e0 <__reset+0xfb0ff2e0>
8111f684:	817fe736 	bltu	r16,r5,8111f624 <__reset+0xfb0ff624>
8111f688:	280f883a 	mov	r7,r5
8111f68c:	0009883a 	mov	r4,zero
8111f690:	003fb106 	br	8111f558 <__reset+0xfb0ff558>

8111f694 <__divsi3>:
8111f694:	20001b16 	blt	r4,zero,8111f704 <__divsi3+0x70>
8111f698:	000f883a 	mov	r7,zero
8111f69c:	28001616 	blt	r5,zero,8111f6f8 <__divsi3+0x64>
8111f6a0:	200d883a 	mov	r6,r4
8111f6a4:	29001a2e 	bgeu	r5,r4,8111f710 <__divsi3+0x7c>
8111f6a8:	00800804 	movi	r2,32
8111f6ac:	00c00044 	movi	r3,1
8111f6b0:	00000106 	br	8111f6b8 <__divsi3+0x24>
8111f6b4:	10000d26 	beq	r2,zero,8111f6ec <__divsi3+0x58>
8111f6b8:	294b883a 	add	r5,r5,r5
8111f6bc:	10bfffc4 	addi	r2,r2,-1
8111f6c0:	18c7883a 	add	r3,r3,r3
8111f6c4:	293ffb36 	bltu	r5,r4,8111f6b4 <__reset+0xfb0ff6b4>
8111f6c8:	0005883a 	mov	r2,zero
8111f6cc:	18000726 	beq	r3,zero,8111f6ec <__divsi3+0x58>
8111f6d0:	0005883a 	mov	r2,zero
8111f6d4:	31400236 	bltu	r6,r5,8111f6e0 <__divsi3+0x4c>
8111f6d8:	314dc83a 	sub	r6,r6,r5
8111f6dc:	10c4b03a 	or	r2,r2,r3
8111f6e0:	1806d07a 	srli	r3,r3,1
8111f6e4:	280ad07a 	srli	r5,r5,1
8111f6e8:	183ffa1e 	bne	r3,zero,8111f6d4 <__reset+0xfb0ff6d4>
8111f6ec:	38000126 	beq	r7,zero,8111f6f4 <__divsi3+0x60>
8111f6f0:	0085c83a 	sub	r2,zero,r2
8111f6f4:	f800283a 	ret
8111f6f8:	014bc83a 	sub	r5,zero,r5
8111f6fc:	39c0005c 	xori	r7,r7,1
8111f700:	003fe706 	br	8111f6a0 <__reset+0xfb0ff6a0>
8111f704:	0109c83a 	sub	r4,zero,r4
8111f708:	01c00044 	movi	r7,1
8111f70c:	003fe306 	br	8111f69c <__reset+0xfb0ff69c>
8111f710:	00c00044 	movi	r3,1
8111f714:	003fee06 	br	8111f6d0 <__reset+0xfb0ff6d0>

8111f718 <__modsi3>:
8111f718:	20001716 	blt	r4,zero,8111f778 <__modsi3+0x60>
8111f71c:	000f883a 	mov	r7,zero
8111f720:	2005883a 	mov	r2,r4
8111f724:	28001216 	blt	r5,zero,8111f770 <__modsi3+0x58>
8111f728:	2900162e 	bgeu	r5,r4,8111f784 <__modsi3+0x6c>
8111f72c:	01800804 	movi	r6,32
8111f730:	00c00044 	movi	r3,1
8111f734:	00000106 	br	8111f73c <__modsi3+0x24>
8111f738:	30000a26 	beq	r6,zero,8111f764 <__modsi3+0x4c>
8111f73c:	294b883a 	add	r5,r5,r5
8111f740:	31bfffc4 	addi	r6,r6,-1
8111f744:	18c7883a 	add	r3,r3,r3
8111f748:	293ffb36 	bltu	r5,r4,8111f738 <__reset+0xfb0ff738>
8111f74c:	18000526 	beq	r3,zero,8111f764 <__modsi3+0x4c>
8111f750:	1806d07a 	srli	r3,r3,1
8111f754:	11400136 	bltu	r2,r5,8111f75c <__modsi3+0x44>
8111f758:	1145c83a 	sub	r2,r2,r5
8111f75c:	280ad07a 	srli	r5,r5,1
8111f760:	183ffb1e 	bne	r3,zero,8111f750 <__reset+0xfb0ff750>
8111f764:	38000126 	beq	r7,zero,8111f76c <__modsi3+0x54>
8111f768:	0085c83a 	sub	r2,zero,r2
8111f76c:	f800283a 	ret
8111f770:	014bc83a 	sub	r5,zero,r5
8111f774:	003fec06 	br	8111f728 <__reset+0xfb0ff728>
8111f778:	0109c83a 	sub	r4,zero,r4
8111f77c:	01c00044 	movi	r7,1
8111f780:	003fe706 	br	8111f720 <__reset+0xfb0ff720>
8111f784:	00c00044 	movi	r3,1
8111f788:	003ff106 	br	8111f750 <__reset+0xfb0ff750>

8111f78c <__udivsi3>:
8111f78c:	200d883a 	mov	r6,r4
8111f790:	2900152e 	bgeu	r5,r4,8111f7e8 <__udivsi3+0x5c>
8111f794:	28001416 	blt	r5,zero,8111f7e8 <__udivsi3+0x5c>
8111f798:	00800804 	movi	r2,32
8111f79c:	00c00044 	movi	r3,1
8111f7a0:	00000206 	br	8111f7ac <__udivsi3+0x20>
8111f7a4:	10000e26 	beq	r2,zero,8111f7e0 <__udivsi3+0x54>
8111f7a8:	28000516 	blt	r5,zero,8111f7c0 <__udivsi3+0x34>
8111f7ac:	294b883a 	add	r5,r5,r5
8111f7b0:	10bfffc4 	addi	r2,r2,-1
8111f7b4:	18c7883a 	add	r3,r3,r3
8111f7b8:	293ffa36 	bltu	r5,r4,8111f7a4 <__reset+0xfb0ff7a4>
8111f7bc:	18000826 	beq	r3,zero,8111f7e0 <__udivsi3+0x54>
8111f7c0:	0005883a 	mov	r2,zero
8111f7c4:	31400236 	bltu	r6,r5,8111f7d0 <__udivsi3+0x44>
8111f7c8:	314dc83a 	sub	r6,r6,r5
8111f7cc:	10c4b03a 	or	r2,r2,r3
8111f7d0:	1806d07a 	srli	r3,r3,1
8111f7d4:	280ad07a 	srli	r5,r5,1
8111f7d8:	183ffa1e 	bne	r3,zero,8111f7c4 <__reset+0xfb0ff7c4>
8111f7dc:	f800283a 	ret
8111f7e0:	0005883a 	mov	r2,zero
8111f7e4:	f800283a 	ret
8111f7e8:	00c00044 	movi	r3,1
8111f7ec:	003ff406 	br	8111f7c0 <__reset+0xfb0ff7c0>

8111f7f0 <__umodsi3>:
8111f7f0:	2005883a 	mov	r2,r4
8111f7f4:	2900122e 	bgeu	r5,r4,8111f840 <__umodsi3+0x50>
8111f7f8:	28001116 	blt	r5,zero,8111f840 <__umodsi3+0x50>
8111f7fc:	01800804 	movi	r6,32
8111f800:	00c00044 	movi	r3,1
8111f804:	00000206 	br	8111f810 <__umodsi3+0x20>
8111f808:	30000c26 	beq	r6,zero,8111f83c <__umodsi3+0x4c>
8111f80c:	28000516 	blt	r5,zero,8111f824 <__umodsi3+0x34>
8111f810:	294b883a 	add	r5,r5,r5
8111f814:	31bfffc4 	addi	r6,r6,-1
8111f818:	18c7883a 	add	r3,r3,r3
8111f81c:	293ffa36 	bltu	r5,r4,8111f808 <__reset+0xfb0ff808>
8111f820:	18000626 	beq	r3,zero,8111f83c <__umodsi3+0x4c>
8111f824:	1806d07a 	srli	r3,r3,1
8111f828:	11400136 	bltu	r2,r5,8111f830 <__umodsi3+0x40>
8111f82c:	1145c83a 	sub	r2,r2,r5
8111f830:	280ad07a 	srli	r5,r5,1
8111f834:	183ffb1e 	bne	r3,zero,8111f824 <__reset+0xfb0ff824>
8111f838:	f800283a 	ret
8111f83c:	f800283a 	ret
8111f840:	00c00044 	movi	r3,1
8111f844:	003ff706 	br	8111f824 <__reset+0xfb0ff824>

8111f848 <__eqsf2>:
8111f848:	2006d5fa 	srli	r3,r4,23
8111f84c:	280cd5fa 	srli	r6,r5,23
8111f850:	01c02034 	movhi	r7,128
8111f854:	39ffffc4 	addi	r7,r7,-1
8111f858:	18c03fcc 	andi	r3,r3,255
8111f85c:	02003fc4 	movi	r8,255
8111f860:	3904703a 	and	r2,r7,r4
8111f864:	31803fcc 	andi	r6,r6,255
8111f868:	394e703a 	and	r7,r7,r5
8111f86c:	2008d7fa 	srli	r4,r4,31
8111f870:	280ad7fa 	srli	r5,r5,31
8111f874:	1a000d26 	beq	r3,r8,8111f8ac <__eqsf2+0x64>
8111f878:	02003fc4 	movi	r8,255
8111f87c:	32000826 	beq	r6,r8,8111f8a0 <__eqsf2+0x58>
8111f880:	19800226 	beq	r3,r6,8111f88c <__eqsf2+0x44>
8111f884:	00800044 	movi	r2,1
8111f888:	f800283a 	ret
8111f88c:	11fffd1e 	bne	r2,r7,8111f884 <__reset+0xfb0ff884>
8111f890:	21400926 	beq	r4,r5,8111f8b8 <__eqsf2+0x70>
8111f894:	183ffb1e 	bne	r3,zero,8111f884 <__reset+0xfb0ff884>
8111f898:	1004c03a 	cmpne	r2,r2,zero
8111f89c:	f800283a 	ret
8111f8a0:	383ff726 	beq	r7,zero,8111f880 <__reset+0xfb0ff880>
8111f8a4:	00800044 	movi	r2,1
8111f8a8:	f800283a 	ret
8111f8ac:	103ff226 	beq	r2,zero,8111f878 <__reset+0xfb0ff878>
8111f8b0:	00800044 	movi	r2,1
8111f8b4:	f800283a 	ret
8111f8b8:	0005883a 	mov	r2,zero
8111f8bc:	f800283a 	ret

8111f8c0 <__gesf2>:
8111f8c0:	2004d5fa 	srli	r2,r4,23
8111f8c4:	2806d5fa 	srli	r3,r5,23
8111f8c8:	01802034 	movhi	r6,128
8111f8cc:	31bfffc4 	addi	r6,r6,-1
8111f8d0:	10803fcc 	andi	r2,r2,255
8111f8d4:	01c03fc4 	movi	r7,255
8111f8d8:	3110703a 	and	r8,r6,r4
8111f8dc:	18c03fcc 	andi	r3,r3,255
8111f8e0:	314c703a 	and	r6,r6,r5
8111f8e4:	2008d7fa 	srli	r4,r4,31
8111f8e8:	280ad7fa 	srli	r5,r5,31
8111f8ec:	11c01926 	beq	r2,r7,8111f954 <__gesf2+0x94>
8111f8f0:	01c03fc4 	movi	r7,255
8111f8f4:	19c00f26 	beq	r3,r7,8111f934 <__gesf2+0x74>
8111f8f8:	1000061e 	bne	r2,zero,8111f914 <__gesf2+0x54>
8111f8fc:	400f003a 	cmpeq	r7,r8,zero
8111f900:	1800071e 	bne	r3,zero,8111f920 <__gesf2+0x60>
8111f904:	3000061e 	bne	r6,zero,8111f920 <__gesf2+0x60>
8111f908:	0005883a 	mov	r2,zero
8111f90c:	40000e1e 	bne	r8,zero,8111f948 <__gesf2+0x88>
8111f910:	f800283a 	ret
8111f914:	18000a1e 	bne	r3,zero,8111f940 <__gesf2+0x80>
8111f918:	30000b26 	beq	r6,zero,8111f948 <__gesf2+0x88>
8111f91c:	000f883a 	mov	r7,zero
8111f920:	29403fcc 	andi	r5,r5,255
8111f924:	38000726 	beq	r7,zero,8111f944 <__gesf2+0x84>
8111f928:	28000826 	beq	r5,zero,8111f94c <__gesf2+0x8c>
8111f92c:	00800044 	movi	r2,1
8111f930:	f800283a 	ret
8111f934:	303ff026 	beq	r6,zero,8111f8f8 <__reset+0xfb0ff8f8>
8111f938:	00bfff84 	movi	r2,-2
8111f93c:	f800283a 	ret
8111f940:	29403fcc 	andi	r5,r5,255
8111f944:	21400526 	beq	r4,r5,8111f95c <__gesf2+0x9c>
8111f948:	203ff826 	beq	r4,zero,8111f92c <__reset+0xfb0ff92c>
8111f94c:	00bfffc4 	movi	r2,-1
8111f950:	f800283a 	ret
8111f954:	403fe626 	beq	r8,zero,8111f8f0 <__reset+0xfb0ff8f0>
8111f958:	003ff706 	br	8111f938 <__reset+0xfb0ff938>
8111f95c:	18bffa16 	blt	r3,r2,8111f948 <__reset+0xfb0ff948>
8111f960:	10c00216 	blt	r2,r3,8111f96c <__gesf2+0xac>
8111f964:	323ff836 	bltu	r6,r8,8111f948 <__reset+0xfb0ff948>
8111f968:	4180022e 	bgeu	r8,r6,8111f974 <__gesf2+0xb4>
8111f96c:	203fef1e 	bne	r4,zero,8111f92c <__reset+0xfb0ff92c>
8111f970:	003ff606 	br	8111f94c <__reset+0xfb0ff94c>
8111f974:	0005883a 	mov	r2,zero
8111f978:	f800283a 	ret

8111f97c <__lesf2>:
8111f97c:	2004d5fa 	srli	r2,r4,23
8111f980:	280cd5fa 	srli	r6,r5,23
8111f984:	00c02034 	movhi	r3,128
8111f988:	18ffffc4 	addi	r3,r3,-1
8111f98c:	10803fcc 	andi	r2,r2,255
8111f990:	01c03fc4 	movi	r7,255
8111f994:	1910703a 	and	r8,r3,r4
8111f998:	31803fcc 	andi	r6,r6,255
8111f99c:	1946703a 	and	r3,r3,r5
8111f9a0:	2008d7fa 	srli	r4,r4,31
8111f9a4:	280ad7fa 	srli	r5,r5,31
8111f9a8:	11c01b26 	beq	r2,r7,8111fa18 <__lesf2+0x9c>
8111f9ac:	01c03fc4 	movi	r7,255
8111f9b0:	31c01126 	beq	r6,r7,8111f9f8 <__lesf2+0x7c>
8111f9b4:	1000071e 	bne	r2,zero,8111f9d4 <__lesf2+0x58>
8111f9b8:	400f003a 	cmpeq	r7,r8,zero
8111f9bc:	21003fcc 	andi	r4,r4,255
8111f9c0:	3000081e 	bne	r6,zero,8111f9e4 <__lesf2+0x68>
8111f9c4:	1800071e 	bne	r3,zero,8111f9e4 <__lesf2+0x68>
8111f9c8:	0005883a 	mov	r2,zero
8111f9cc:	40000f1e 	bne	r8,zero,8111fa0c <__lesf2+0x90>
8111f9d0:	f800283a 	ret
8111f9d4:	21003fcc 	andi	r4,r4,255
8111f9d8:	30000a1e 	bne	r6,zero,8111fa04 <__lesf2+0x88>
8111f9dc:	18000b26 	beq	r3,zero,8111fa0c <__lesf2+0x90>
8111f9e0:	000f883a 	mov	r7,zero
8111f9e4:	29403fcc 	andi	r5,r5,255
8111f9e8:	38000726 	beq	r7,zero,8111fa08 <__lesf2+0x8c>
8111f9ec:	28000826 	beq	r5,zero,8111fa10 <__lesf2+0x94>
8111f9f0:	00800044 	movi	r2,1
8111f9f4:	f800283a 	ret
8111f9f8:	183fee26 	beq	r3,zero,8111f9b4 <__reset+0xfb0ff9b4>
8111f9fc:	00800084 	movi	r2,2
8111fa00:	f800283a 	ret
8111fa04:	29403fcc 	andi	r5,r5,255
8111fa08:	21400626 	beq	r4,r5,8111fa24 <__lesf2+0xa8>
8111fa0c:	203ff826 	beq	r4,zero,8111f9f0 <__reset+0xfb0ff9f0>
8111fa10:	00bfffc4 	movi	r2,-1
8111fa14:	f800283a 	ret
8111fa18:	403fe426 	beq	r8,zero,8111f9ac <__reset+0xfb0ff9ac>
8111fa1c:	00800084 	movi	r2,2
8111fa20:	f800283a 	ret
8111fa24:	30bff916 	blt	r6,r2,8111fa0c <__reset+0xfb0ffa0c>
8111fa28:	11800216 	blt	r2,r6,8111fa34 <__lesf2+0xb8>
8111fa2c:	1a3ff736 	bltu	r3,r8,8111fa0c <__reset+0xfb0ffa0c>
8111fa30:	40c0022e 	bgeu	r8,r3,8111fa3c <__lesf2+0xc0>
8111fa34:	203fee1e 	bne	r4,zero,8111f9f0 <__reset+0xfb0ff9f0>
8111fa38:	003ff506 	br	8111fa10 <__reset+0xfb0ffa10>
8111fa3c:	0005883a 	mov	r2,zero
8111fa40:	f800283a 	ret

8111fa44 <__adddf3>:
8111fa44:	02c00434 	movhi	r11,16
8111fa48:	5affffc4 	addi	r11,r11,-1
8111fa4c:	2806d7fa 	srli	r3,r5,31
8111fa50:	2ad4703a 	and	r10,r5,r11
8111fa54:	3ad2703a 	and	r9,r7,r11
8111fa58:	3804d53a 	srli	r2,r7,20
8111fa5c:	3018d77a 	srli	r12,r6,29
8111fa60:	280ad53a 	srli	r5,r5,20
8111fa64:	501490fa 	slli	r10,r10,3
8111fa68:	2010d77a 	srli	r8,r4,29
8111fa6c:	481290fa 	slli	r9,r9,3
8111fa70:	380ed7fa 	srli	r7,r7,31
8111fa74:	defffb04 	addi	sp,sp,-20
8111fa78:	dc800215 	stw	r18,8(sp)
8111fa7c:	dc400115 	stw	r17,4(sp)
8111fa80:	dc000015 	stw	r16,0(sp)
8111fa84:	dfc00415 	stw	ra,16(sp)
8111fa88:	dcc00315 	stw	r19,12(sp)
8111fa8c:	1c803fcc 	andi	r18,r3,255
8111fa90:	2c01ffcc 	andi	r16,r5,2047
8111fa94:	5210b03a 	or	r8,r10,r8
8111fa98:	202290fa 	slli	r17,r4,3
8111fa9c:	1081ffcc 	andi	r2,r2,2047
8111faa0:	4b12b03a 	or	r9,r9,r12
8111faa4:	300c90fa 	slli	r6,r6,3
8111faa8:	91c07526 	beq	r18,r7,8111fc80 <__adddf3+0x23c>
8111faac:	8087c83a 	sub	r3,r16,r2
8111fab0:	00c0ab0e 	bge	zero,r3,8111fd60 <__adddf3+0x31c>
8111fab4:	10002a1e 	bne	r2,zero,8111fb60 <__adddf3+0x11c>
8111fab8:	4984b03a 	or	r2,r9,r6
8111fabc:	1000961e 	bne	r2,zero,8111fd18 <__adddf3+0x2d4>
8111fac0:	888001cc 	andi	r2,r17,7
8111fac4:	10000726 	beq	r2,zero,8111fae4 <__adddf3+0xa0>
8111fac8:	888003cc 	andi	r2,r17,15
8111facc:	00c00104 	movi	r3,4
8111fad0:	10c00426 	beq	r2,r3,8111fae4 <__adddf3+0xa0>
8111fad4:	88c7883a 	add	r3,r17,r3
8111fad8:	1c63803a 	cmpltu	r17,r3,r17
8111fadc:	4451883a 	add	r8,r8,r17
8111fae0:	1823883a 	mov	r17,r3
8111fae4:	4080202c 	andhi	r2,r8,128
8111fae8:	10005926 	beq	r2,zero,8111fc50 <__adddf3+0x20c>
8111faec:	84000044 	addi	r16,r16,1
8111faf0:	0081ffc4 	movi	r2,2047
8111faf4:	8080ba26 	beq	r16,r2,8111fde0 <__adddf3+0x39c>
8111faf8:	00bfe034 	movhi	r2,65408
8111fafc:	10bfffc4 	addi	r2,r2,-1
8111fb00:	4090703a 	and	r8,r8,r2
8111fb04:	4004977a 	slli	r2,r8,29
8111fb08:	4010927a 	slli	r8,r8,9
8111fb0c:	8822d0fa 	srli	r17,r17,3
8111fb10:	8401ffcc 	andi	r16,r16,2047
8111fb14:	4010d33a 	srli	r8,r8,12
8111fb18:	9007883a 	mov	r3,r18
8111fb1c:	1444b03a 	or	r2,r2,r17
8111fb20:	8401ffcc 	andi	r16,r16,2047
8111fb24:	8020953a 	slli	r16,r16,20
8111fb28:	18c03fcc 	andi	r3,r3,255
8111fb2c:	01000434 	movhi	r4,16
8111fb30:	213fffc4 	addi	r4,r4,-1
8111fb34:	180697fa 	slli	r3,r3,31
8111fb38:	4110703a 	and	r8,r8,r4
8111fb3c:	4410b03a 	or	r8,r8,r16
8111fb40:	40c6b03a 	or	r3,r8,r3
8111fb44:	dfc00417 	ldw	ra,16(sp)
8111fb48:	dcc00317 	ldw	r19,12(sp)
8111fb4c:	dc800217 	ldw	r18,8(sp)
8111fb50:	dc400117 	ldw	r17,4(sp)
8111fb54:	dc000017 	ldw	r16,0(sp)
8111fb58:	dec00504 	addi	sp,sp,20
8111fb5c:	f800283a 	ret
8111fb60:	0081ffc4 	movi	r2,2047
8111fb64:	80bfd626 	beq	r16,r2,8111fac0 <__reset+0xfb0ffac0>
8111fb68:	4a402034 	orhi	r9,r9,128
8111fb6c:	00800e04 	movi	r2,56
8111fb70:	10c09f16 	blt	r2,r3,8111fdf0 <__adddf3+0x3ac>
8111fb74:	008007c4 	movi	r2,31
8111fb78:	10c0c216 	blt	r2,r3,8111fe84 <__adddf3+0x440>
8111fb7c:	00800804 	movi	r2,32
8111fb80:	10c5c83a 	sub	r2,r2,r3
8111fb84:	488a983a 	sll	r5,r9,r2
8111fb88:	30c8d83a 	srl	r4,r6,r3
8111fb8c:	3084983a 	sll	r2,r6,r2
8111fb90:	48c6d83a 	srl	r3,r9,r3
8111fb94:	290cb03a 	or	r6,r5,r4
8111fb98:	1004c03a 	cmpne	r2,r2,zero
8111fb9c:	308cb03a 	or	r6,r6,r2
8111fba0:	898dc83a 	sub	r6,r17,r6
8111fba4:	89a3803a 	cmpltu	r17,r17,r6
8111fba8:	40d1c83a 	sub	r8,r8,r3
8111fbac:	4451c83a 	sub	r8,r8,r17
8111fbb0:	3023883a 	mov	r17,r6
8111fbb4:	4080202c 	andhi	r2,r8,128
8111fbb8:	10002326 	beq	r2,zero,8111fc48 <__adddf3+0x204>
8111fbbc:	04c02034 	movhi	r19,128
8111fbc0:	9cffffc4 	addi	r19,r19,-1
8111fbc4:	44e6703a 	and	r19,r8,r19
8111fbc8:	98007626 	beq	r19,zero,8111fda4 <__adddf3+0x360>
8111fbcc:	9809883a 	mov	r4,r19
8111fbd0:	110c3080 	call	8110c308 <__clzsi2>
8111fbd4:	10fffe04 	addi	r3,r2,-8
8111fbd8:	010007c4 	movi	r4,31
8111fbdc:	20c07716 	blt	r4,r3,8111fdbc <__adddf3+0x378>
8111fbe0:	00800804 	movi	r2,32
8111fbe4:	10c5c83a 	sub	r2,r2,r3
8111fbe8:	8884d83a 	srl	r2,r17,r2
8111fbec:	98d0983a 	sll	r8,r19,r3
8111fbf0:	88e2983a 	sll	r17,r17,r3
8111fbf4:	1204b03a 	or	r2,r2,r8
8111fbf8:	1c007416 	blt	r3,r16,8111fdcc <__adddf3+0x388>
8111fbfc:	1c21c83a 	sub	r16,r3,r16
8111fc00:	82000044 	addi	r8,r16,1
8111fc04:	00c007c4 	movi	r3,31
8111fc08:	1a009116 	blt	r3,r8,8111fe50 <__adddf3+0x40c>
8111fc0c:	00c00804 	movi	r3,32
8111fc10:	1a07c83a 	sub	r3,r3,r8
8111fc14:	8a08d83a 	srl	r4,r17,r8
8111fc18:	88e2983a 	sll	r17,r17,r3
8111fc1c:	10c6983a 	sll	r3,r2,r3
8111fc20:	1210d83a 	srl	r8,r2,r8
8111fc24:	8804c03a 	cmpne	r2,r17,zero
8111fc28:	1906b03a 	or	r3,r3,r4
8111fc2c:	18a2b03a 	or	r17,r3,r2
8111fc30:	0021883a 	mov	r16,zero
8111fc34:	003fa206 	br	8111fac0 <__reset+0xfb0ffac0>
8111fc38:	1890b03a 	or	r8,r3,r2
8111fc3c:	40017d26 	beq	r8,zero,81120234 <__adddf3+0x7f0>
8111fc40:	1011883a 	mov	r8,r2
8111fc44:	1823883a 	mov	r17,r3
8111fc48:	888001cc 	andi	r2,r17,7
8111fc4c:	103f9e1e 	bne	r2,zero,8111fac8 <__reset+0xfb0ffac8>
8111fc50:	4004977a 	slli	r2,r8,29
8111fc54:	8822d0fa 	srli	r17,r17,3
8111fc58:	4010d0fa 	srli	r8,r8,3
8111fc5c:	9007883a 	mov	r3,r18
8111fc60:	1444b03a 	or	r2,r2,r17
8111fc64:	0101ffc4 	movi	r4,2047
8111fc68:	81002426 	beq	r16,r4,8111fcfc <__adddf3+0x2b8>
8111fc6c:	8120703a 	and	r16,r16,r4
8111fc70:	01000434 	movhi	r4,16
8111fc74:	213fffc4 	addi	r4,r4,-1
8111fc78:	4110703a 	and	r8,r8,r4
8111fc7c:	003fa806 	br	8111fb20 <__reset+0xfb0ffb20>
8111fc80:	8089c83a 	sub	r4,r16,r2
8111fc84:	01005e0e 	bge	zero,r4,8111fe00 <__adddf3+0x3bc>
8111fc88:	10002b26 	beq	r2,zero,8111fd38 <__adddf3+0x2f4>
8111fc8c:	0081ffc4 	movi	r2,2047
8111fc90:	80bf8b26 	beq	r16,r2,8111fac0 <__reset+0xfb0ffac0>
8111fc94:	4a402034 	orhi	r9,r9,128
8111fc98:	00800e04 	movi	r2,56
8111fc9c:	1100a40e 	bge	r2,r4,8111ff30 <__adddf3+0x4ec>
8111fca0:	498cb03a 	or	r6,r9,r6
8111fca4:	300ac03a 	cmpne	r5,r6,zero
8111fca8:	0013883a 	mov	r9,zero
8111fcac:	2c4b883a 	add	r5,r5,r17
8111fcb0:	2c63803a 	cmpltu	r17,r5,r17
8111fcb4:	4a11883a 	add	r8,r9,r8
8111fcb8:	8a11883a 	add	r8,r17,r8
8111fcbc:	2823883a 	mov	r17,r5
8111fcc0:	4080202c 	andhi	r2,r8,128
8111fcc4:	103fe026 	beq	r2,zero,8111fc48 <__reset+0xfb0ffc48>
8111fcc8:	84000044 	addi	r16,r16,1
8111fccc:	0081ffc4 	movi	r2,2047
8111fcd0:	8080d226 	beq	r16,r2,8112001c <__adddf3+0x5d8>
8111fcd4:	00bfe034 	movhi	r2,65408
8111fcd8:	10bfffc4 	addi	r2,r2,-1
8111fcdc:	4090703a 	and	r8,r8,r2
8111fce0:	880ad07a 	srli	r5,r17,1
8111fce4:	400897fa 	slli	r4,r8,31
8111fce8:	88c0004c 	andi	r3,r17,1
8111fcec:	28e2b03a 	or	r17,r5,r3
8111fcf0:	4010d07a 	srli	r8,r8,1
8111fcf4:	2462b03a 	or	r17,r4,r17
8111fcf8:	003f7106 	br	8111fac0 <__reset+0xfb0ffac0>
8111fcfc:	4088b03a 	or	r4,r8,r2
8111fd00:	20014526 	beq	r4,zero,81120218 <__adddf3+0x7d4>
8111fd04:	01000434 	movhi	r4,16
8111fd08:	42000234 	orhi	r8,r8,8
8111fd0c:	213fffc4 	addi	r4,r4,-1
8111fd10:	4110703a 	and	r8,r8,r4
8111fd14:	003f8206 	br	8111fb20 <__reset+0xfb0ffb20>
8111fd18:	18ffffc4 	addi	r3,r3,-1
8111fd1c:	1800491e 	bne	r3,zero,8111fe44 <__adddf3+0x400>
8111fd20:	898bc83a 	sub	r5,r17,r6
8111fd24:	8963803a 	cmpltu	r17,r17,r5
8111fd28:	4251c83a 	sub	r8,r8,r9
8111fd2c:	4451c83a 	sub	r8,r8,r17
8111fd30:	2823883a 	mov	r17,r5
8111fd34:	003f9f06 	br	8111fbb4 <__reset+0xfb0ffbb4>
8111fd38:	4984b03a 	or	r2,r9,r6
8111fd3c:	103f6026 	beq	r2,zero,8111fac0 <__reset+0xfb0ffac0>
8111fd40:	213fffc4 	addi	r4,r4,-1
8111fd44:	2000931e 	bne	r4,zero,8111ff94 <__adddf3+0x550>
8111fd48:	898d883a 	add	r6,r17,r6
8111fd4c:	3463803a 	cmpltu	r17,r6,r17
8111fd50:	4251883a 	add	r8,r8,r9
8111fd54:	8a11883a 	add	r8,r17,r8
8111fd58:	3023883a 	mov	r17,r6
8111fd5c:	003fd806 	br	8111fcc0 <__reset+0xfb0ffcc0>
8111fd60:	1800541e 	bne	r3,zero,8111feb4 <__adddf3+0x470>
8111fd64:	80800044 	addi	r2,r16,1
8111fd68:	1081ffcc 	andi	r2,r2,2047
8111fd6c:	00c00044 	movi	r3,1
8111fd70:	1880a00e 	bge	r3,r2,8111fff4 <__adddf3+0x5b0>
8111fd74:	8989c83a 	sub	r4,r17,r6
8111fd78:	8905803a 	cmpltu	r2,r17,r4
8111fd7c:	4267c83a 	sub	r19,r8,r9
8111fd80:	98a7c83a 	sub	r19,r19,r2
8111fd84:	9880202c 	andhi	r2,r19,128
8111fd88:	10006326 	beq	r2,zero,8111ff18 <__adddf3+0x4d4>
8111fd8c:	3463c83a 	sub	r17,r6,r17
8111fd90:	4a07c83a 	sub	r3,r9,r8
8111fd94:	344d803a 	cmpltu	r6,r6,r17
8111fd98:	19a7c83a 	sub	r19,r3,r6
8111fd9c:	3825883a 	mov	r18,r7
8111fda0:	983f8a1e 	bne	r19,zero,8111fbcc <__reset+0xfb0ffbcc>
8111fda4:	8809883a 	mov	r4,r17
8111fda8:	110c3080 	call	8110c308 <__clzsi2>
8111fdac:	10800804 	addi	r2,r2,32
8111fdb0:	10fffe04 	addi	r3,r2,-8
8111fdb4:	010007c4 	movi	r4,31
8111fdb8:	20ff890e 	bge	r4,r3,8111fbe0 <__reset+0xfb0ffbe0>
8111fdbc:	10bff604 	addi	r2,r2,-40
8111fdc0:	8884983a 	sll	r2,r17,r2
8111fdc4:	0023883a 	mov	r17,zero
8111fdc8:	1c3f8c0e 	bge	r3,r16,8111fbfc <__reset+0xfb0ffbfc>
8111fdcc:	023fe034 	movhi	r8,65408
8111fdd0:	423fffc4 	addi	r8,r8,-1
8111fdd4:	80e1c83a 	sub	r16,r16,r3
8111fdd8:	1210703a 	and	r8,r2,r8
8111fddc:	003f3806 	br	8111fac0 <__reset+0xfb0ffac0>
8111fde0:	9007883a 	mov	r3,r18
8111fde4:	0011883a 	mov	r8,zero
8111fde8:	0005883a 	mov	r2,zero
8111fdec:	003f4c06 	br	8111fb20 <__reset+0xfb0ffb20>
8111fdf0:	498cb03a 	or	r6,r9,r6
8111fdf4:	300cc03a 	cmpne	r6,r6,zero
8111fdf8:	0007883a 	mov	r3,zero
8111fdfc:	003f6806 	br	8111fba0 <__reset+0xfb0ffba0>
8111fe00:	20009c1e 	bne	r4,zero,81120074 <__adddf3+0x630>
8111fe04:	80800044 	addi	r2,r16,1
8111fe08:	1141ffcc 	andi	r5,r2,2047
8111fe0c:	01000044 	movi	r4,1
8111fe10:	2140670e 	bge	r4,r5,8111ffb0 <__adddf3+0x56c>
8111fe14:	0101ffc4 	movi	r4,2047
8111fe18:	11007f26 	beq	r2,r4,81120018 <__adddf3+0x5d4>
8111fe1c:	898d883a 	add	r6,r17,r6
8111fe20:	4247883a 	add	r3,r8,r9
8111fe24:	3451803a 	cmpltu	r8,r6,r17
8111fe28:	40d1883a 	add	r8,r8,r3
8111fe2c:	402297fa 	slli	r17,r8,31
8111fe30:	300cd07a 	srli	r6,r6,1
8111fe34:	4010d07a 	srli	r8,r8,1
8111fe38:	1021883a 	mov	r16,r2
8111fe3c:	89a2b03a 	or	r17,r17,r6
8111fe40:	003f1f06 	br	8111fac0 <__reset+0xfb0ffac0>
8111fe44:	0081ffc4 	movi	r2,2047
8111fe48:	80bf481e 	bne	r16,r2,8111fb6c <__reset+0xfb0ffb6c>
8111fe4c:	003f1c06 	br	8111fac0 <__reset+0xfb0ffac0>
8111fe50:	843ff844 	addi	r16,r16,-31
8111fe54:	01000804 	movi	r4,32
8111fe58:	1406d83a 	srl	r3,r2,r16
8111fe5c:	41005026 	beq	r8,r4,8111ffa0 <__adddf3+0x55c>
8111fe60:	01001004 	movi	r4,64
8111fe64:	2211c83a 	sub	r8,r4,r8
8111fe68:	1204983a 	sll	r2,r2,r8
8111fe6c:	88a2b03a 	or	r17,r17,r2
8111fe70:	8822c03a 	cmpne	r17,r17,zero
8111fe74:	1c62b03a 	or	r17,r3,r17
8111fe78:	0011883a 	mov	r8,zero
8111fe7c:	0021883a 	mov	r16,zero
8111fe80:	003f7106 	br	8111fc48 <__reset+0xfb0ffc48>
8111fe84:	193ff804 	addi	r4,r3,-32
8111fe88:	00800804 	movi	r2,32
8111fe8c:	4908d83a 	srl	r4,r9,r4
8111fe90:	18804526 	beq	r3,r2,8111ffa8 <__adddf3+0x564>
8111fe94:	00801004 	movi	r2,64
8111fe98:	10c5c83a 	sub	r2,r2,r3
8111fe9c:	4886983a 	sll	r3,r9,r2
8111fea0:	198cb03a 	or	r6,r3,r6
8111fea4:	300cc03a 	cmpne	r6,r6,zero
8111fea8:	218cb03a 	or	r6,r4,r6
8111feac:	0007883a 	mov	r3,zero
8111feb0:	003f3b06 	br	8111fba0 <__reset+0xfb0ffba0>
8111feb4:	80002a26 	beq	r16,zero,8111ff60 <__adddf3+0x51c>
8111feb8:	0101ffc4 	movi	r4,2047
8111febc:	11006826 	beq	r2,r4,81120060 <__adddf3+0x61c>
8111fec0:	00c7c83a 	sub	r3,zero,r3
8111fec4:	42002034 	orhi	r8,r8,128
8111fec8:	01000e04 	movi	r4,56
8111fecc:	20c07c16 	blt	r4,r3,811200c0 <__adddf3+0x67c>
8111fed0:	010007c4 	movi	r4,31
8111fed4:	20c0da16 	blt	r4,r3,81120240 <__adddf3+0x7fc>
8111fed8:	01000804 	movi	r4,32
8111fedc:	20c9c83a 	sub	r4,r4,r3
8111fee0:	4114983a 	sll	r10,r8,r4
8111fee4:	88cad83a 	srl	r5,r17,r3
8111fee8:	8908983a 	sll	r4,r17,r4
8111feec:	40c6d83a 	srl	r3,r8,r3
8111fef0:	5162b03a 	or	r17,r10,r5
8111fef4:	2008c03a 	cmpne	r4,r4,zero
8111fef8:	8922b03a 	or	r17,r17,r4
8111fefc:	3463c83a 	sub	r17,r6,r17
8111ff00:	48c7c83a 	sub	r3,r9,r3
8111ff04:	344d803a 	cmpltu	r6,r6,r17
8111ff08:	1991c83a 	sub	r8,r3,r6
8111ff0c:	1021883a 	mov	r16,r2
8111ff10:	3825883a 	mov	r18,r7
8111ff14:	003f2706 	br	8111fbb4 <__reset+0xfb0ffbb4>
8111ff18:	24d0b03a 	or	r8,r4,r19
8111ff1c:	40001b1e 	bne	r8,zero,8111ff8c <__adddf3+0x548>
8111ff20:	0005883a 	mov	r2,zero
8111ff24:	0007883a 	mov	r3,zero
8111ff28:	0021883a 	mov	r16,zero
8111ff2c:	003f4d06 	br	8111fc64 <__reset+0xfb0ffc64>
8111ff30:	008007c4 	movi	r2,31
8111ff34:	11003c16 	blt	r2,r4,81120028 <__adddf3+0x5e4>
8111ff38:	00800804 	movi	r2,32
8111ff3c:	1105c83a 	sub	r2,r2,r4
8111ff40:	488e983a 	sll	r7,r9,r2
8111ff44:	310ad83a 	srl	r5,r6,r4
8111ff48:	3084983a 	sll	r2,r6,r2
8111ff4c:	4912d83a 	srl	r9,r9,r4
8111ff50:	394ab03a 	or	r5,r7,r5
8111ff54:	1004c03a 	cmpne	r2,r2,zero
8111ff58:	288ab03a 	or	r5,r5,r2
8111ff5c:	003f5306 	br	8111fcac <__reset+0xfb0ffcac>
8111ff60:	4448b03a 	or	r4,r8,r17
8111ff64:	20003e26 	beq	r4,zero,81120060 <__adddf3+0x61c>
8111ff68:	00c6303a 	nor	r3,zero,r3
8111ff6c:	18003a1e 	bne	r3,zero,81120058 <__adddf3+0x614>
8111ff70:	3463c83a 	sub	r17,r6,r17
8111ff74:	4a07c83a 	sub	r3,r9,r8
8111ff78:	344d803a 	cmpltu	r6,r6,r17
8111ff7c:	1991c83a 	sub	r8,r3,r6
8111ff80:	1021883a 	mov	r16,r2
8111ff84:	3825883a 	mov	r18,r7
8111ff88:	003f0a06 	br	8111fbb4 <__reset+0xfb0ffbb4>
8111ff8c:	2023883a 	mov	r17,r4
8111ff90:	003f0d06 	br	8111fbc8 <__reset+0xfb0ffbc8>
8111ff94:	0081ffc4 	movi	r2,2047
8111ff98:	80bf3f1e 	bne	r16,r2,8111fc98 <__reset+0xfb0ffc98>
8111ff9c:	003ec806 	br	8111fac0 <__reset+0xfb0ffac0>
8111ffa0:	0005883a 	mov	r2,zero
8111ffa4:	003fb106 	br	8111fe6c <__reset+0xfb0ffe6c>
8111ffa8:	0007883a 	mov	r3,zero
8111ffac:	003fbc06 	br	8111fea0 <__reset+0xfb0ffea0>
8111ffb0:	4444b03a 	or	r2,r8,r17
8111ffb4:	8000871e 	bne	r16,zero,811201d4 <__adddf3+0x790>
8111ffb8:	1000ba26 	beq	r2,zero,811202a4 <__adddf3+0x860>
8111ffbc:	4984b03a 	or	r2,r9,r6
8111ffc0:	103ebf26 	beq	r2,zero,8111fac0 <__reset+0xfb0ffac0>
8111ffc4:	8985883a 	add	r2,r17,r6
8111ffc8:	4247883a 	add	r3,r8,r9
8111ffcc:	1451803a 	cmpltu	r8,r2,r17
8111ffd0:	40d1883a 	add	r8,r8,r3
8111ffd4:	40c0202c 	andhi	r3,r8,128
8111ffd8:	1023883a 	mov	r17,r2
8111ffdc:	183f1a26 	beq	r3,zero,8111fc48 <__reset+0xfb0ffc48>
8111ffe0:	00bfe034 	movhi	r2,65408
8111ffe4:	10bfffc4 	addi	r2,r2,-1
8111ffe8:	2021883a 	mov	r16,r4
8111ffec:	4090703a 	and	r8,r8,r2
8111fff0:	003eb306 	br	8111fac0 <__reset+0xfb0ffac0>
8111fff4:	4444b03a 	or	r2,r8,r17
8111fff8:	8000291e 	bne	r16,zero,811200a0 <__adddf3+0x65c>
8111fffc:	10004b1e 	bne	r2,zero,8112012c <__adddf3+0x6e8>
81120000:	4990b03a 	or	r8,r9,r6
81120004:	40008b26 	beq	r8,zero,81120234 <__adddf3+0x7f0>
81120008:	4811883a 	mov	r8,r9
8112000c:	3023883a 	mov	r17,r6
81120010:	3825883a 	mov	r18,r7
81120014:	003eaa06 	br	8111fac0 <__reset+0xfb0ffac0>
81120018:	1021883a 	mov	r16,r2
8112001c:	0011883a 	mov	r8,zero
81120020:	0005883a 	mov	r2,zero
81120024:	003f0f06 	br	8111fc64 <__reset+0xfb0ffc64>
81120028:	217ff804 	addi	r5,r4,-32
8112002c:	00800804 	movi	r2,32
81120030:	494ad83a 	srl	r5,r9,r5
81120034:	20807d26 	beq	r4,r2,8112022c <__adddf3+0x7e8>
81120038:	00801004 	movi	r2,64
8112003c:	1109c83a 	sub	r4,r2,r4
81120040:	4912983a 	sll	r9,r9,r4
81120044:	498cb03a 	or	r6,r9,r6
81120048:	300cc03a 	cmpne	r6,r6,zero
8112004c:	298ab03a 	or	r5,r5,r6
81120050:	0013883a 	mov	r9,zero
81120054:	003f1506 	br	8111fcac <__reset+0xfb0ffcac>
81120058:	0101ffc4 	movi	r4,2047
8112005c:	113f9a1e 	bne	r2,r4,8111fec8 <__reset+0xfb0ffec8>
81120060:	4811883a 	mov	r8,r9
81120064:	3023883a 	mov	r17,r6
81120068:	1021883a 	mov	r16,r2
8112006c:	3825883a 	mov	r18,r7
81120070:	003e9306 	br	8111fac0 <__reset+0xfb0ffac0>
81120074:	8000161e 	bne	r16,zero,811200d0 <__adddf3+0x68c>
81120078:	444ab03a 	or	r5,r8,r17
8112007c:	28005126 	beq	r5,zero,811201c4 <__adddf3+0x780>
81120080:	0108303a 	nor	r4,zero,r4
81120084:	20004d1e 	bne	r4,zero,811201bc <__adddf3+0x778>
81120088:	89a3883a 	add	r17,r17,r6
8112008c:	4253883a 	add	r9,r8,r9
81120090:	898d803a 	cmpltu	r6,r17,r6
81120094:	3251883a 	add	r8,r6,r9
81120098:	1021883a 	mov	r16,r2
8112009c:	003f0806 	br	8111fcc0 <__reset+0xfb0ffcc0>
811200a0:	1000301e 	bne	r2,zero,81120164 <__adddf3+0x720>
811200a4:	4984b03a 	or	r2,r9,r6
811200a8:	10007126 	beq	r2,zero,81120270 <__adddf3+0x82c>
811200ac:	4811883a 	mov	r8,r9
811200b0:	3023883a 	mov	r17,r6
811200b4:	3825883a 	mov	r18,r7
811200b8:	0401ffc4 	movi	r16,2047
811200bc:	003e8006 	br	8111fac0 <__reset+0xfb0ffac0>
811200c0:	4462b03a 	or	r17,r8,r17
811200c4:	8822c03a 	cmpne	r17,r17,zero
811200c8:	0007883a 	mov	r3,zero
811200cc:	003f8b06 	br	8111fefc <__reset+0xfb0ffefc>
811200d0:	0141ffc4 	movi	r5,2047
811200d4:	11403b26 	beq	r2,r5,811201c4 <__adddf3+0x780>
811200d8:	0109c83a 	sub	r4,zero,r4
811200dc:	42002034 	orhi	r8,r8,128
811200e0:	01400e04 	movi	r5,56
811200e4:	29006716 	blt	r5,r4,81120284 <__adddf3+0x840>
811200e8:	014007c4 	movi	r5,31
811200ec:	29007016 	blt	r5,r4,811202b0 <__adddf3+0x86c>
811200f0:	01400804 	movi	r5,32
811200f4:	290bc83a 	sub	r5,r5,r4
811200f8:	4154983a 	sll	r10,r8,r5
811200fc:	890ed83a 	srl	r7,r17,r4
81120100:	894a983a 	sll	r5,r17,r5
81120104:	4108d83a 	srl	r4,r8,r4
81120108:	51e2b03a 	or	r17,r10,r7
8112010c:	280ac03a 	cmpne	r5,r5,zero
81120110:	8962b03a 	or	r17,r17,r5
81120114:	89a3883a 	add	r17,r17,r6
81120118:	2253883a 	add	r9,r4,r9
8112011c:	898d803a 	cmpltu	r6,r17,r6
81120120:	3251883a 	add	r8,r6,r9
81120124:	1021883a 	mov	r16,r2
81120128:	003ee506 	br	8111fcc0 <__reset+0xfb0ffcc0>
8112012c:	4984b03a 	or	r2,r9,r6
81120130:	103e6326 	beq	r2,zero,8111fac0 <__reset+0xfb0ffac0>
81120134:	8987c83a 	sub	r3,r17,r6
81120138:	88c9803a 	cmpltu	r4,r17,r3
8112013c:	4245c83a 	sub	r2,r8,r9
81120140:	1105c83a 	sub	r2,r2,r4
81120144:	1100202c 	andhi	r4,r2,128
81120148:	203ebb26 	beq	r4,zero,8111fc38 <__reset+0xfb0ffc38>
8112014c:	3463c83a 	sub	r17,r6,r17
81120150:	4a07c83a 	sub	r3,r9,r8
81120154:	344d803a 	cmpltu	r6,r6,r17
81120158:	1991c83a 	sub	r8,r3,r6
8112015c:	3825883a 	mov	r18,r7
81120160:	003e5706 	br	8111fac0 <__reset+0xfb0ffac0>
81120164:	4984b03a 	or	r2,r9,r6
81120168:	10002e26 	beq	r2,zero,81120224 <__adddf3+0x7e0>
8112016c:	4004d0fa 	srli	r2,r8,3
81120170:	8822d0fa 	srli	r17,r17,3
81120174:	4010977a 	slli	r8,r8,29
81120178:	10c0022c 	andhi	r3,r2,8
8112017c:	4462b03a 	or	r17,r8,r17
81120180:	18000826 	beq	r3,zero,811201a4 <__adddf3+0x760>
81120184:	4808d0fa 	srli	r4,r9,3
81120188:	20c0022c 	andhi	r3,r4,8
8112018c:	1800051e 	bne	r3,zero,811201a4 <__adddf3+0x760>
81120190:	300cd0fa 	srli	r6,r6,3
81120194:	4806977a 	slli	r3,r9,29
81120198:	2005883a 	mov	r2,r4
8112019c:	3825883a 	mov	r18,r7
811201a0:	19a2b03a 	or	r17,r3,r6
811201a4:	8810d77a 	srli	r8,r17,29
811201a8:	100490fa 	slli	r2,r2,3
811201ac:	882290fa 	slli	r17,r17,3
811201b0:	0401ffc4 	movi	r16,2047
811201b4:	4090b03a 	or	r8,r8,r2
811201b8:	003e4106 	br	8111fac0 <__reset+0xfb0ffac0>
811201bc:	0141ffc4 	movi	r5,2047
811201c0:	117fc71e 	bne	r2,r5,811200e0 <__reset+0xfb1000e0>
811201c4:	4811883a 	mov	r8,r9
811201c8:	3023883a 	mov	r17,r6
811201cc:	1021883a 	mov	r16,r2
811201d0:	003e3b06 	br	8111fac0 <__reset+0xfb0ffac0>
811201d4:	10002f26 	beq	r2,zero,81120294 <__adddf3+0x850>
811201d8:	4984b03a 	or	r2,r9,r6
811201dc:	10001126 	beq	r2,zero,81120224 <__adddf3+0x7e0>
811201e0:	4004d0fa 	srli	r2,r8,3
811201e4:	8822d0fa 	srli	r17,r17,3
811201e8:	4010977a 	slli	r8,r8,29
811201ec:	10c0022c 	andhi	r3,r2,8
811201f0:	4462b03a 	or	r17,r8,r17
811201f4:	183feb26 	beq	r3,zero,811201a4 <__reset+0xfb1001a4>
811201f8:	4808d0fa 	srli	r4,r9,3
811201fc:	20c0022c 	andhi	r3,r4,8
81120200:	183fe81e 	bne	r3,zero,811201a4 <__reset+0xfb1001a4>
81120204:	300cd0fa 	srli	r6,r6,3
81120208:	4806977a 	slli	r3,r9,29
8112020c:	2005883a 	mov	r2,r4
81120210:	19a2b03a 	or	r17,r3,r6
81120214:	003fe306 	br	811201a4 <__reset+0xfb1001a4>
81120218:	0011883a 	mov	r8,zero
8112021c:	0005883a 	mov	r2,zero
81120220:	003e3f06 	br	8111fb20 <__reset+0xfb0ffb20>
81120224:	0401ffc4 	movi	r16,2047
81120228:	003e2506 	br	8111fac0 <__reset+0xfb0ffac0>
8112022c:	0013883a 	mov	r9,zero
81120230:	003f8406 	br	81120044 <__reset+0xfb100044>
81120234:	0005883a 	mov	r2,zero
81120238:	0007883a 	mov	r3,zero
8112023c:	003e8906 	br	8111fc64 <__reset+0xfb0ffc64>
81120240:	197ff804 	addi	r5,r3,-32
81120244:	01000804 	movi	r4,32
81120248:	414ad83a 	srl	r5,r8,r5
8112024c:	19002426 	beq	r3,r4,811202e0 <__adddf3+0x89c>
81120250:	01001004 	movi	r4,64
81120254:	20c7c83a 	sub	r3,r4,r3
81120258:	40c6983a 	sll	r3,r8,r3
8112025c:	1c46b03a 	or	r3,r3,r17
81120260:	1806c03a 	cmpne	r3,r3,zero
81120264:	28e2b03a 	or	r17,r5,r3
81120268:	0007883a 	mov	r3,zero
8112026c:	003f2306 	br	8111fefc <__reset+0xfb0ffefc>
81120270:	0007883a 	mov	r3,zero
81120274:	5811883a 	mov	r8,r11
81120278:	00bfffc4 	movi	r2,-1
8112027c:	0401ffc4 	movi	r16,2047
81120280:	003e7806 	br	8111fc64 <__reset+0xfb0ffc64>
81120284:	4462b03a 	or	r17,r8,r17
81120288:	8822c03a 	cmpne	r17,r17,zero
8112028c:	0009883a 	mov	r4,zero
81120290:	003fa006 	br	81120114 <__reset+0xfb100114>
81120294:	4811883a 	mov	r8,r9
81120298:	3023883a 	mov	r17,r6
8112029c:	0401ffc4 	movi	r16,2047
811202a0:	003e0706 	br	8111fac0 <__reset+0xfb0ffac0>
811202a4:	4811883a 	mov	r8,r9
811202a8:	3023883a 	mov	r17,r6
811202ac:	003e0406 	br	8111fac0 <__reset+0xfb0ffac0>
811202b0:	21fff804 	addi	r7,r4,-32
811202b4:	01400804 	movi	r5,32
811202b8:	41ced83a 	srl	r7,r8,r7
811202bc:	21400a26 	beq	r4,r5,811202e8 <__adddf3+0x8a4>
811202c0:	01401004 	movi	r5,64
811202c4:	2909c83a 	sub	r4,r5,r4
811202c8:	4108983a 	sll	r4,r8,r4
811202cc:	2448b03a 	or	r4,r4,r17
811202d0:	2008c03a 	cmpne	r4,r4,zero
811202d4:	3922b03a 	or	r17,r7,r4
811202d8:	0009883a 	mov	r4,zero
811202dc:	003f8d06 	br	81120114 <__reset+0xfb100114>
811202e0:	0007883a 	mov	r3,zero
811202e4:	003fdd06 	br	8112025c <__reset+0xfb10025c>
811202e8:	0009883a 	mov	r4,zero
811202ec:	003ff706 	br	811202cc <__reset+0xfb1002cc>

811202f0 <__divdf3>:
811202f0:	defff204 	addi	sp,sp,-56
811202f4:	dd400915 	stw	r21,36(sp)
811202f8:	282ad53a 	srli	r21,r5,20
811202fc:	dd000815 	stw	r20,32(sp)
81120300:	2828d7fa 	srli	r20,r5,31
81120304:	dc000415 	stw	r16,16(sp)
81120308:	04000434 	movhi	r16,16
8112030c:	df000c15 	stw	fp,48(sp)
81120310:	843fffc4 	addi	r16,r16,-1
81120314:	dfc00d15 	stw	ra,52(sp)
81120318:	ddc00b15 	stw	r23,44(sp)
8112031c:	dd800a15 	stw	r22,40(sp)
81120320:	dcc00715 	stw	r19,28(sp)
81120324:	dc800615 	stw	r18,24(sp)
81120328:	dc400515 	stw	r17,20(sp)
8112032c:	ad41ffcc 	andi	r21,r21,2047
81120330:	2c20703a 	and	r16,r5,r16
81120334:	a7003fcc 	andi	fp,r20,255
81120338:	a8006126 	beq	r21,zero,811204c0 <__divdf3+0x1d0>
8112033c:	0081ffc4 	movi	r2,2047
81120340:	2025883a 	mov	r18,r4
81120344:	a8803726 	beq	r21,r2,81120424 <__divdf3+0x134>
81120348:	80800434 	orhi	r2,r16,16
8112034c:	100490fa 	slli	r2,r2,3
81120350:	2020d77a 	srli	r16,r4,29
81120354:	202490fa 	slli	r18,r4,3
81120358:	ad7f0044 	addi	r21,r21,-1023
8112035c:	80a0b03a 	or	r16,r16,r2
81120360:	0027883a 	mov	r19,zero
81120364:	0013883a 	mov	r9,zero
81120368:	3804d53a 	srli	r2,r7,20
8112036c:	382cd7fa 	srli	r22,r7,31
81120370:	04400434 	movhi	r17,16
81120374:	8c7fffc4 	addi	r17,r17,-1
81120378:	1081ffcc 	andi	r2,r2,2047
8112037c:	3011883a 	mov	r8,r6
81120380:	3c62703a 	and	r17,r7,r17
81120384:	b5c03fcc 	andi	r23,r22,255
81120388:	10006c26 	beq	r2,zero,8112053c <__divdf3+0x24c>
8112038c:	00c1ffc4 	movi	r3,2047
81120390:	10c06426 	beq	r2,r3,81120524 <__divdf3+0x234>
81120394:	88c00434 	orhi	r3,r17,16
81120398:	180690fa 	slli	r3,r3,3
8112039c:	3022d77a 	srli	r17,r6,29
811203a0:	301090fa 	slli	r8,r6,3
811203a4:	10bf0044 	addi	r2,r2,-1023
811203a8:	88e2b03a 	or	r17,r17,r3
811203ac:	000f883a 	mov	r7,zero
811203b0:	a58cf03a 	xor	r6,r20,r22
811203b4:	3cc8b03a 	or	r4,r7,r19
811203b8:	a8abc83a 	sub	r21,r21,r2
811203bc:	008003c4 	movi	r2,15
811203c0:	3007883a 	mov	r3,r6
811203c4:	34c03fcc 	andi	r19,r6,255
811203c8:	11009036 	bltu	r2,r4,8112060c <__divdf3+0x31c>
811203cc:	200890ba 	slli	r4,r4,2
811203d0:	00a044b4 	movhi	r2,33042
811203d4:	1080f904 	addi	r2,r2,996
811203d8:	2089883a 	add	r4,r4,r2
811203dc:	20800017 	ldw	r2,0(r4)
811203e0:	1000683a 	jmp	r2
811203e4:	8112060c 	andi	r4,r16,18456
811203e8:	8112045c 	xori	r4,r16,18449
811203ec:	811205fc 	xorhi	r4,r16,18455
811203f0:	81120450 	cmplti	r4,r16,18449
811203f4:	811205fc 	xorhi	r4,r16,18455
811203f8:	811205d0 	cmplti	r4,r16,18455
811203fc:	811205fc 	xorhi	r4,r16,18455
81120400:	81120450 	cmplti	r4,r16,18449
81120404:	8112045c 	xori	r4,r16,18449
81120408:	8112045c 	xori	r4,r16,18449
8112040c:	811205d0 	cmplti	r4,r16,18455
81120410:	81120450 	cmplti	r4,r16,18449
81120414:	81120440 	call	88112044 <__reset+0x20f2044>
81120418:	81120440 	call	88112044 <__reset+0x20f2044>
8112041c:	81120440 	call	88112044 <__reset+0x20f2044>
81120420:	811208f0 	cmpltui	r4,r16,18467
81120424:	2404b03a 	or	r2,r4,r16
81120428:	1000661e 	bne	r2,zero,811205c4 <__divdf3+0x2d4>
8112042c:	04c00204 	movi	r19,8
81120430:	0021883a 	mov	r16,zero
81120434:	0025883a 	mov	r18,zero
81120438:	02400084 	movi	r9,2
8112043c:	003fca06 	br	81120368 <__reset+0xfb100368>
81120440:	8023883a 	mov	r17,r16
81120444:	9011883a 	mov	r8,r18
81120448:	e02f883a 	mov	r23,fp
8112044c:	480f883a 	mov	r7,r9
81120450:	00800084 	movi	r2,2
81120454:	3881311e 	bne	r7,r2,8112091c <__divdf3+0x62c>
81120458:	b827883a 	mov	r19,r23
8112045c:	98c0004c 	andi	r3,r19,1
81120460:	0081ffc4 	movi	r2,2047
81120464:	000b883a 	mov	r5,zero
81120468:	0025883a 	mov	r18,zero
8112046c:	1004953a 	slli	r2,r2,20
81120470:	18c03fcc 	andi	r3,r3,255
81120474:	04400434 	movhi	r17,16
81120478:	8c7fffc4 	addi	r17,r17,-1
8112047c:	180697fa 	slli	r3,r3,31
81120480:	2c4a703a 	and	r5,r5,r17
81120484:	288ab03a 	or	r5,r5,r2
81120488:	28c6b03a 	or	r3,r5,r3
8112048c:	9005883a 	mov	r2,r18
81120490:	dfc00d17 	ldw	ra,52(sp)
81120494:	df000c17 	ldw	fp,48(sp)
81120498:	ddc00b17 	ldw	r23,44(sp)
8112049c:	dd800a17 	ldw	r22,40(sp)
811204a0:	dd400917 	ldw	r21,36(sp)
811204a4:	dd000817 	ldw	r20,32(sp)
811204a8:	dcc00717 	ldw	r19,28(sp)
811204ac:	dc800617 	ldw	r18,24(sp)
811204b0:	dc400517 	ldw	r17,20(sp)
811204b4:	dc000417 	ldw	r16,16(sp)
811204b8:	dec00e04 	addi	sp,sp,56
811204bc:	f800283a 	ret
811204c0:	2404b03a 	or	r2,r4,r16
811204c4:	2027883a 	mov	r19,r4
811204c8:	10003926 	beq	r2,zero,811205b0 <__divdf3+0x2c0>
811204cc:	80012e26 	beq	r16,zero,81120988 <__divdf3+0x698>
811204d0:	8009883a 	mov	r4,r16
811204d4:	d9800315 	stw	r6,12(sp)
811204d8:	d9c00215 	stw	r7,8(sp)
811204dc:	110c3080 	call	8110c308 <__clzsi2>
811204e0:	d9800317 	ldw	r6,12(sp)
811204e4:	d9c00217 	ldw	r7,8(sp)
811204e8:	113ffd44 	addi	r4,r2,-11
811204ec:	00c00704 	movi	r3,28
811204f0:	19012116 	blt	r3,r4,81120978 <__divdf3+0x688>
811204f4:	00c00744 	movi	r3,29
811204f8:	147ffe04 	addi	r17,r2,-8
811204fc:	1907c83a 	sub	r3,r3,r4
81120500:	8460983a 	sll	r16,r16,r17
81120504:	98c6d83a 	srl	r3,r19,r3
81120508:	9c64983a 	sll	r18,r19,r17
8112050c:	1c20b03a 	or	r16,r3,r16
81120510:	1080fcc4 	addi	r2,r2,1011
81120514:	00abc83a 	sub	r21,zero,r2
81120518:	0027883a 	mov	r19,zero
8112051c:	0013883a 	mov	r9,zero
81120520:	003f9106 	br	81120368 <__reset+0xfb100368>
81120524:	3446b03a 	or	r3,r6,r17
81120528:	18001f1e 	bne	r3,zero,811205a8 <__divdf3+0x2b8>
8112052c:	0023883a 	mov	r17,zero
81120530:	0011883a 	mov	r8,zero
81120534:	01c00084 	movi	r7,2
81120538:	003f9d06 	br	811203b0 <__reset+0xfb1003b0>
8112053c:	3446b03a 	or	r3,r6,r17
81120540:	18001526 	beq	r3,zero,81120598 <__divdf3+0x2a8>
81120544:	88011b26 	beq	r17,zero,811209b4 <__divdf3+0x6c4>
81120548:	8809883a 	mov	r4,r17
8112054c:	d9800315 	stw	r6,12(sp)
81120550:	da400115 	stw	r9,4(sp)
81120554:	110c3080 	call	8110c308 <__clzsi2>
81120558:	d9800317 	ldw	r6,12(sp)
8112055c:	da400117 	ldw	r9,4(sp)
81120560:	113ffd44 	addi	r4,r2,-11
81120564:	00c00704 	movi	r3,28
81120568:	19010e16 	blt	r3,r4,811209a4 <__divdf3+0x6b4>
8112056c:	00c00744 	movi	r3,29
81120570:	123ffe04 	addi	r8,r2,-8
81120574:	1907c83a 	sub	r3,r3,r4
81120578:	8a22983a 	sll	r17,r17,r8
8112057c:	30c6d83a 	srl	r3,r6,r3
81120580:	3210983a 	sll	r8,r6,r8
81120584:	1c62b03a 	or	r17,r3,r17
81120588:	1080fcc4 	addi	r2,r2,1011
8112058c:	0085c83a 	sub	r2,zero,r2
81120590:	000f883a 	mov	r7,zero
81120594:	003f8606 	br	811203b0 <__reset+0xfb1003b0>
81120598:	0023883a 	mov	r17,zero
8112059c:	0011883a 	mov	r8,zero
811205a0:	01c00044 	movi	r7,1
811205a4:	003f8206 	br	811203b0 <__reset+0xfb1003b0>
811205a8:	01c000c4 	movi	r7,3
811205ac:	003f8006 	br	811203b0 <__reset+0xfb1003b0>
811205b0:	04c00104 	movi	r19,4
811205b4:	0021883a 	mov	r16,zero
811205b8:	0025883a 	mov	r18,zero
811205bc:	02400044 	movi	r9,1
811205c0:	003f6906 	br	81120368 <__reset+0xfb100368>
811205c4:	04c00304 	movi	r19,12
811205c8:	024000c4 	movi	r9,3
811205cc:	003f6606 	br	81120368 <__reset+0xfb100368>
811205d0:	01400434 	movhi	r5,16
811205d4:	0007883a 	mov	r3,zero
811205d8:	297fffc4 	addi	r5,r5,-1
811205dc:	04bfffc4 	movi	r18,-1
811205e0:	0081ffc4 	movi	r2,2047
811205e4:	003fa106 	br	8112046c <__reset+0xfb10046c>
811205e8:	00c00044 	movi	r3,1
811205ec:	1887c83a 	sub	r3,r3,r2
811205f0:	01000e04 	movi	r4,56
811205f4:	20c1210e 	bge	r4,r3,81120a7c <__divdf3+0x78c>
811205f8:	98c0004c 	andi	r3,r19,1
811205fc:	0005883a 	mov	r2,zero
81120600:	000b883a 	mov	r5,zero
81120604:	0025883a 	mov	r18,zero
81120608:	003f9806 	br	8112046c <__reset+0xfb10046c>
8112060c:	8c00fd36 	bltu	r17,r16,81120a04 <__divdf3+0x714>
81120610:	8440fb26 	beq	r16,r17,81120a00 <__divdf3+0x710>
81120614:	8007883a 	mov	r3,r16
81120618:	ad7fffc4 	addi	r21,r21,-1
8112061c:	0021883a 	mov	r16,zero
81120620:	4004d63a 	srli	r2,r8,24
81120624:	8822923a 	slli	r17,r17,8
81120628:	1809883a 	mov	r4,r3
8112062c:	402c923a 	slli	r22,r8,8
81120630:	88b8b03a 	or	fp,r17,r2
81120634:	e028d43a 	srli	r20,fp,16
81120638:	d8c00015 	stw	r3,0(sp)
8112063c:	e5ffffcc 	andi	r23,fp,65535
81120640:	a00b883a 	mov	r5,r20
81120644:	111f78c0 	call	8111f78c <__udivsi3>
81120648:	d8c00017 	ldw	r3,0(sp)
8112064c:	a00b883a 	mov	r5,r20
81120650:	d8800315 	stw	r2,12(sp)
81120654:	1809883a 	mov	r4,r3
81120658:	111f7f00 	call	8111f7f0 <__umodsi3>
8112065c:	d9800317 	ldw	r6,12(sp)
81120660:	1006943a 	slli	r3,r2,16
81120664:	9004d43a 	srli	r2,r18,16
81120668:	b9a3383a 	mul	r17,r23,r6
8112066c:	10c4b03a 	or	r2,r2,r3
81120670:	1440062e 	bgeu	r2,r17,8112068c <__divdf3+0x39c>
81120674:	1705883a 	add	r2,r2,fp
81120678:	30ffffc4 	addi	r3,r6,-1
8112067c:	1700ee36 	bltu	r2,fp,81120a38 <__divdf3+0x748>
81120680:	1440ed2e 	bgeu	r2,r17,81120a38 <__divdf3+0x748>
81120684:	31bfff84 	addi	r6,r6,-2
81120688:	1705883a 	add	r2,r2,fp
8112068c:	1463c83a 	sub	r17,r2,r17
81120690:	a00b883a 	mov	r5,r20
81120694:	8809883a 	mov	r4,r17
81120698:	d9800315 	stw	r6,12(sp)
8112069c:	111f78c0 	call	8111f78c <__udivsi3>
811206a0:	a00b883a 	mov	r5,r20
811206a4:	8809883a 	mov	r4,r17
811206a8:	d8800215 	stw	r2,8(sp)
811206ac:	111f7f00 	call	8111f7f0 <__umodsi3>
811206b0:	d9c00217 	ldw	r7,8(sp)
811206b4:	1004943a 	slli	r2,r2,16
811206b8:	94bfffcc 	andi	r18,r18,65535
811206bc:	b9d1383a 	mul	r8,r23,r7
811206c0:	90a4b03a 	or	r18,r18,r2
811206c4:	d9800317 	ldw	r6,12(sp)
811206c8:	9200062e 	bgeu	r18,r8,811206e4 <__divdf3+0x3f4>
811206cc:	9725883a 	add	r18,r18,fp
811206d0:	38bfffc4 	addi	r2,r7,-1
811206d4:	9700d636 	bltu	r18,fp,81120a30 <__divdf3+0x740>
811206d8:	9200d52e 	bgeu	r18,r8,81120a30 <__divdf3+0x740>
811206dc:	39ffff84 	addi	r7,r7,-2
811206e0:	9725883a 	add	r18,r18,fp
811206e4:	3004943a 	slli	r2,r6,16
811206e8:	b012d43a 	srli	r9,r22,16
811206ec:	b1bfffcc 	andi	r6,r22,65535
811206f0:	11e2b03a 	or	r17,r2,r7
811206f4:	8806d43a 	srli	r3,r17,16
811206f8:	893fffcc 	andi	r4,r17,65535
811206fc:	218b383a 	mul	r5,r4,r6
81120700:	30c5383a 	mul	r2,r6,r3
81120704:	2249383a 	mul	r4,r4,r9
81120708:	280ed43a 	srli	r7,r5,16
8112070c:	9225c83a 	sub	r18,r18,r8
81120710:	2089883a 	add	r4,r4,r2
81120714:	3909883a 	add	r4,r7,r4
81120718:	1a47383a 	mul	r3,r3,r9
8112071c:	2080022e 	bgeu	r4,r2,81120728 <__divdf3+0x438>
81120720:	00800074 	movhi	r2,1
81120724:	1887883a 	add	r3,r3,r2
81120728:	2004d43a 	srli	r2,r4,16
8112072c:	2008943a 	slli	r4,r4,16
81120730:	297fffcc 	andi	r5,r5,65535
81120734:	10c7883a 	add	r3,r2,r3
81120738:	2149883a 	add	r4,r4,r5
8112073c:	90c0a536 	bltu	r18,r3,811209d4 <__divdf3+0x6e4>
81120740:	90c0bf26 	beq	r18,r3,81120a40 <__divdf3+0x750>
81120744:	90c7c83a 	sub	r3,r18,r3
81120748:	810fc83a 	sub	r7,r16,r4
8112074c:	81e5803a 	cmpltu	r18,r16,r7
81120750:	1ca5c83a 	sub	r18,r3,r18
81120754:	e480c126 	beq	fp,r18,81120a5c <__divdf3+0x76c>
81120758:	a00b883a 	mov	r5,r20
8112075c:	9009883a 	mov	r4,r18
81120760:	d9800315 	stw	r6,12(sp)
81120764:	d9c00215 	stw	r7,8(sp)
81120768:	da400115 	stw	r9,4(sp)
8112076c:	111f78c0 	call	8111f78c <__udivsi3>
81120770:	a00b883a 	mov	r5,r20
81120774:	9009883a 	mov	r4,r18
81120778:	d8800015 	stw	r2,0(sp)
8112077c:	111f7f00 	call	8111f7f0 <__umodsi3>
81120780:	d9c00217 	ldw	r7,8(sp)
81120784:	da000017 	ldw	r8,0(sp)
81120788:	1006943a 	slli	r3,r2,16
8112078c:	3804d43a 	srli	r2,r7,16
81120790:	ba21383a 	mul	r16,r23,r8
81120794:	d9800317 	ldw	r6,12(sp)
81120798:	10c4b03a 	or	r2,r2,r3
8112079c:	da400117 	ldw	r9,4(sp)
811207a0:	1400062e 	bgeu	r2,r16,811207bc <__divdf3+0x4cc>
811207a4:	1705883a 	add	r2,r2,fp
811207a8:	40ffffc4 	addi	r3,r8,-1
811207ac:	1700ad36 	bltu	r2,fp,81120a64 <__divdf3+0x774>
811207b0:	1400ac2e 	bgeu	r2,r16,81120a64 <__divdf3+0x774>
811207b4:	423fff84 	addi	r8,r8,-2
811207b8:	1705883a 	add	r2,r2,fp
811207bc:	1421c83a 	sub	r16,r2,r16
811207c0:	a00b883a 	mov	r5,r20
811207c4:	8009883a 	mov	r4,r16
811207c8:	d9800315 	stw	r6,12(sp)
811207cc:	d9c00215 	stw	r7,8(sp)
811207d0:	da000015 	stw	r8,0(sp)
811207d4:	da400115 	stw	r9,4(sp)
811207d8:	111f78c0 	call	8111f78c <__udivsi3>
811207dc:	8009883a 	mov	r4,r16
811207e0:	a00b883a 	mov	r5,r20
811207e4:	1025883a 	mov	r18,r2
811207e8:	111f7f00 	call	8111f7f0 <__umodsi3>
811207ec:	d9c00217 	ldw	r7,8(sp)
811207f0:	1004943a 	slli	r2,r2,16
811207f4:	bcaf383a 	mul	r23,r23,r18
811207f8:	393fffcc 	andi	r4,r7,65535
811207fc:	2088b03a 	or	r4,r4,r2
81120800:	d9800317 	ldw	r6,12(sp)
81120804:	da000017 	ldw	r8,0(sp)
81120808:	da400117 	ldw	r9,4(sp)
8112080c:	25c0062e 	bgeu	r4,r23,81120828 <__divdf3+0x538>
81120810:	2709883a 	add	r4,r4,fp
81120814:	90bfffc4 	addi	r2,r18,-1
81120818:	27009436 	bltu	r4,fp,81120a6c <__divdf3+0x77c>
8112081c:	25c0932e 	bgeu	r4,r23,81120a6c <__divdf3+0x77c>
81120820:	94bfff84 	addi	r18,r18,-2
81120824:	2709883a 	add	r4,r4,fp
81120828:	4004943a 	slli	r2,r8,16
8112082c:	25efc83a 	sub	r23,r4,r23
81120830:	1490b03a 	or	r8,r2,r18
81120834:	4008d43a 	srli	r4,r8,16
81120838:	40ffffcc 	andi	r3,r8,65535
8112083c:	30c5383a 	mul	r2,r6,r3
81120840:	1a47383a 	mul	r3,r3,r9
81120844:	310d383a 	mul	r6,r6,r4
81120848:	100ad43a 	srli	r5,r2,16
8112084c:	4913383a 	mul	r9,r9,r4
81120850:	1987883a 	add	r3,r3,r6
81120854:	28c7883a 	add	r3,r5,r3
81120858:	1980022e 	bgeu	r3,r6,81120864 <__divdf3+0x574>
8112085c:	01000074 	movhi	r4,1
81120860:	4913883a 	add	r9,r9,r4
81120864:	1808d43a 	srli	r4,r3,16
81120868:	1806943a 	slli	r3,r3,16
8112086c:	10bfffcc 	andi	r2,r2,65535
81120870:	2253883a 	add	r9,r4,r9
81120874:	1887883a 	add	r3,r3,r2
81120878:	ba403836 	bltu	r23,r9,8112095c <__divdf3+0x66c>
8112087c:	ba403626 	beq	r23,r9,81120958 <__divdf3+0x668>
81120880:	42000054 	ori	r8,r8,1
81120884:	a880ffc4 	addi	r2,r21,1023
81120888:	00bf570e 	bge	zero,r2,811205e8 <__reset+0xfb1005e8>
8112088c:	40c001cc 	andi	r3,r8,7
81120890:	18000726 	beq	r3,zero,811208b0 <__divdf3+0x5c0>
81120894:	40c003cc 	andi	r3,r8,15
81120898:	01000104 	movi	r4,4
8112089c:	19000426 	beq	r3,r4,811208b0 <__divdf3+0x5c0>
811208a0:	4107883a 	add	r3,r8,r4
811208a4:	1a11803a 	cmpltu	r8,r3,r8
811208a8:	8a23883a 	add	r17,r17,r8
811208ac:	1811883a 	mov	r8,r3
811208b0:	88c0402c 	andhi	r3,r17,256
811208b4:	18000426 	beq	r3,zero,811208c8 <__divdf3+0x5d8>
811208b8:	00ffc034 	movhi	r3,65280
811208bc:	18ffffc4 	addi	r3,r3,-1
811208c0:	a8810004 	addi	r2,r21,1024
811208c4:	88e2703a 	and	r17,r17,r3
811208c8:	00c1ff84 	movi	r3,2046
811208cc:	18bee316 	blt	r3,r2,8112045c <__reset+0xfb10045c>
811208d0:	8824977a 	slli	r18,r17,29
811208d4:	4010d0fa 	srli	r8,r8,3
811208d8:	8822927a 	slli	r17,r17,9
811208dc:	1081ffcc 	andi	r2,r2,2047
811208e0:	9224b03a 	or	r18,r18,r8
811208e4:	880ad33a 	srli	r5,r17,12
811208e8:	98c0004c 	andi	r3,r19,1
811208ec:	003edf06 	br	8112046c <__reset+0xfb10046c>
811208f0:	8080022c 	andhi	r2,r16,8
811208f4:	10001226 	beq	r2,zero,81120940 <__divdf3+0x650>
811208f8:	8880022c 	andhi	r2,r17,8
811208fc:	1000101e 	bne	r2,zero,81120940 <__divdf3+0x650>
81120900:	00800434 	movhi	r2,16
81120904:	89400234 	orhi	r5,r17,8
81120908:	10bfffc4 	addi	r2,r2,-1
8112090c:	b007883a 	mov	r3,r22
81120910:	288a703a 	and	r5,r5,r2
81120914:	4025883a 	mov	r18,r8
81120918:	003f3106 	br	811205e0 <__reset+0xfb1005e0>
8112091c:	008000c4 	movi	r2,3
81120920:	3880a626 	beq	r7,r2,81120bbc <__divdf3+0x8cc>
81120924:	00800044 	movi	r2,1
81120928:	3880521e 	bne	r7,r2,81120a74 <__divdf3+0x784>
8112092c:	b807883a 	mov	r3,r23
81120930:	0005883a 	mov	r2,zero
81120934:	000b883a 	mov	r5,zero
81120938:	0025883a 	mov	r18,zero
8112093c:	003ecb06 	br	8112046c <__reset+0xfb10046c>
81120940:	00800434 	movhi	r2,16
81120944:	81400234 	orhi	r5,r16,8
81120948:	10bfffc4 	addi	r2,r2,-1
8112094c:	a007883a 	mov	r3,r20
81120950:	288a703a 	and	r5,r5,r2
81120954:	003f2206 	br	811205e0 <__reset+0xfb1005e0>
81120958:	183fca26 	beq	r3,zero,81120884 <__reset+0xfb100884>
8112095c:	e5ef883a 	add	r23,fp,r23
81120960:	40bfffc4 	addi	r2,r8,-1
81120964:	bf00392e 	bgeu	r23,fp,81120a4c <__divdf3+0x75c>
81120968:	1011883a 	mov	r8,r2
8112096c:	ba7fc41e 	bne	r23,r9,81120880 <__reset+0xfb100880>
81120970:	b0ffc31e 	bne	r22,r3,81120880 <__reset+0xfb100880>
81120974:	003fc306 	br	81120884 <__reset+0xfb100884>
81120978:	143ff604 	addi	r16,r2,-40
8112097c:	9c20983a 	sll	r16,r19,r16
81120980:	0025883a 	mov	r18,zero
81120984:	003ee206 	br	81120510 <__reset+0xfb100510>
81120988:	d9800315 	stw	r6,12(sp)
8112098c:	d9c00215 	stw	r7,8(sp)
81120990:	110c3080 	call	8110c308 <__clzsi2>
81120994:	10800804 	addi	r2,r2,32
81120998:	d9c00217 	ldw	r7,8(sp)
8112099c:	d9800317 	ldw	r6,12(sp)
811209a0:	003ed106 	br	811204e8 <__reset+0xfb1004e8>
811209a4:	147ff604 	addi	r17,r2,-40
811209a8:	3462983a 	sll	r17,r6,r17
811209ac:	0011883a 	mov	r8,zero
811209b0:	003ef506 	br	81120588 <__reset+0xfb100588>
811209b4:	3009883a 	mov	r4,r6
811209b8:	d9800315 	stw	r6,12(sp)
811209bc:	da400115 	stw	r9,4(sp)
811209c0:	110c3080 	call	8110c308 <__clzsi2>
811209c4:	10800804 	addi	r2,r2,32
811209c8:	da400117 	ldw	r9,4(sp)
811209cc:	d9800317 	ldw	r6,12(sp)
811209d0:	003ee306 	br	81120560 <__reset+0xfb100560>
811209d4:	85a1883a 	add	r16,r16,r22
811209d8:	8585803a 	cmpltu	r2,r16,r22
811209dc:	1705883a 	add	r2,r2,fp
811209e0:	14a5883a 	add	r18,r2,r18
811209e4:	88bfffc4 	addi	r2,r17,-1
811209e8:	e4800c2e 	bgeu	fp,r18,81120a1c <__divdf3+0x72c>
811209ec:	90c03e36 	bltu	r18,r3,81120ae8 <__divdf3+0x7f8>
811209f0:	1c806926 	beq	r3,r18,81120b98 <__divdf3+0x8a8>
811209f4:	90c7c83a 	sub	r3,r18,r3
811209f8:	1023883a 	mov	r17,r2
811209fc:	003f5206 	br	81120748 <__reset+0xfb100748>
81120a00:	923f0436 	bltu	r18,r8,81120614 <__reset+0xfb100614>
81120a04:	800897fa 	slli	r4,r16,31
81120a08:	9004d07a 	srli	r2,r18,1
81120a0c:	8006d07a 	srli	r3,r16,1
81120a10:	902097fa 	slli	r16,r18,31
81120a14:	20a4b03a 	or	r18,r4,r2
81120a18:	003f0106 	br	81120620 <__reset+0xfb100620>
81120a1c:	e4bff51e 	bne	fp,r18,811209f4 <__reset+0xfb1009f4>
81120a20:	85bff22e 	bgeu	r16,r22,811209ec <__reset+0xfb1009ec>
81120a24:	e0c7c83a 	sub	r3,fp,r3
81120a28:	1023883a 	mov	r17,r2
81120a2c:	003f4606 	br	81120748 <__reset+0xfb100748>
81120a30:	100f883a 	mov	r7,r2
81120a34:	003f2b06 	br	811206e4 <__reset+0xfb1006e4>
81120a38:	180d883a 	mov	r6,r3
81120a3c:	003f1306 	br	8112068c <__reset+0xfb10068c>
81120a40:	813fe436 	bltu	r16,r4,811209d4 <__reset+0xfb1009d4>
81120a44:	0007883a 	mov	r3,zero
81120a48:	003f3f06 	br	81120748 <__reset+0xfb100748>
81120a4c:	ba402c36 	bltu	r23,r9,81120b00 <__divdf3+0x810>
81120a50:	4dc05426 	beq	r9,r23,81120ba4 <__divdf3+0x8b4>
81120a54:	1011883a 	mov	r8,r2
81120a58:	003f8906 	br	81120880 <__reset+0xfb100880>
81120a5c:	023fffc4 	movi	r8,-1
81120a60:	003f8806 	br	81120884 <__reset+0xfb100884>
81120a64:	1811883a 	mov	r8,r3
81120a68:	003f5406 	br	811207bc <__reset+0xfb1007bc>
81120a6c:	1025883a 	mov	r18,r2
81120a70:	003f6d06 	br	81120828 <__reset+0xfb100828>
81120a74:	b827883a 	mov	r19,r23
81120a78:	003f8206 	br	81120884 <__reset+0xfb100884>
81120a7c:	010007c4 	movi	r4,31
81120a80:	20c02616 	blt	r4,r3,81120b1c <__divdf3+0x82c>
81120a84:	00800804 	movi	r2,32
81120a88:	10c5c83a 	sub	r2,r2,r3
81120a8c:	888a983a 	sll	r5,r17,r2
81120a90:	40c8d83a 	srl	r4,r8,r3
81120a94:	4084983a 	sll	r2,r8,r2
81120a98:	88e2d83a 	srl	r17,r17,r3
81120a9c:	2906b03a 	or	r3,r5,r4
81120aa0:	1004c03a 	cmpne	r2,r2,zero
81120aa4:	1886b03a 	or	r3,r3,r2
81120aa8:	188001cc 	andi	r2,r3,7
81120aac:	10000726 	beq	r2,zero,81120acc <__divdf3+0x7dc>
81120ab0:	188003cc 	andi	r2,r3,15
81120ab4:	01000104 	movi	r4,4
81120ab8:	11000426 	beq	r2,r4,81120acc <__divdf3+0x7dc>
81120abc:	1805883a 	mov	r2,r3
81120ac0:	10c00104 	addi	r3,r2,4
81120ac4:	1885803a 	cmpltu	r2,r3,r2
81120ac8:	88a3883a 	add	r17,r17,r2
81120acc:	8880202c 	andhi	r2,r17,128
81120ad0:	10002726 	beq	r2,zero,81120b70 <__divdf3+0x880>
81120ad4:	98c0004c 	andi	r3,r19,1
81120ad8:	00800044 	movi	r2,1
81120adc:	000b883a 	mov	r5,zero
81120ae0:	0025883a 	mov	r18,zero
81120ae4:	003e6106 	br	8112046c <__reset+0xfb10046c>
81120ae8:	85a1883a 	add	r16,r16,r22
81120aec:	8585803a 	cmpltu	r2,r16,r22
81120af0:	1705883a 	add	r2,r2,fp
81120af4:	14a5883a 	add	r18,r2,r18
81120af8:	8c7fff84 	addi	r17,r17,-2
81120afc:	003f1106 	br	81120744 <__reset+0xfb100744>
81120b00:	b589883a 	add	r4,r22,r22
81120b04:	25ad803a 	cmpltu	r22,r4,r22
81120b08:	b739883a 	add	fp,r22,fp
81120b0c:	40bfff84 	addi	r2,r8,-2
81120b10:	bf2f883a 	add	r23,r23,fp
81120b14:	202d883a 	mov	r22,r4
81120b18:	003f9306 	br	81120968 <__reset+0xfb100968>
81120b1c:	013ff844 	movi	r4,-31
81120b20:	2085c83a 	sub	r2,r4,r2
81120b24:	8888d83a 	srl	r4,r17,r2
81120b28:	00800804 	movi	r2,32
81120b2c:	18802126 	beq	r3,r2,81120bb4 <__divdf3+0x8c4>
81120b30:	00801004 	movi	r2,64
81120b34:	10c5c83a 	sub	r2,r2,r3
81120b38:	8884983a 	sll	r2,r17,r2
81120b3c:	1204b03a 	or	r2,r2,r8
81120b40:	1004c03a 	cmpne	r2,r2,zero
81120b44:	2084b03a 	or	r2,r4,r2
81120b48:	144001cc 	andi	r17,r2,7
81120b4c:	88000d1e 	bne	r17,zero,81120b84 <__divdf3+0x894>
81120b50:	000b883a 	mov	r5,zero
81120b54:	1024d0fa 	srli	r18,r2,3
81120b58:	98c0004c 	andi	r3,r19,1
81120b5c:	0005883a 	mov	r2,zero
81120b60:	9464b03a 	or	r18,r18,r17
81120b64:	003e4106 	br	8112046c <__reset+0xfb10046c>
81120b68:	1007883a 	mov	r3,r2
81120b6c:	0023883a 	mov	r17,zero
81120b70:	880a927a 	slli	r5,r17,9
81120b74:	1805883a 	mov	r2,r3
81120b78:	8822977a 	slli	r17,r17,29
81120b7c:	280ad33a 	srli	r5,r5,12
81120b80:	003ff406 	br	81120b54 <__reset+0xfb100b54>
81120b84:	10c003cc 	andi	r3,r2,15
81120b88:	01000104 	movi	r4,4
81120b8c:	193ff626 	beq	r3,r4,81120b68 <__reset+0xfb100b68>
81120b90:	0023883a 	mov	r17,zero
81120b94:	003fca06 	br	81120ac0 <__reset+0xfb100ac0>
81120b98:	813fd336 	bltu	r16,r4,81120ae8 <__reset+0xfb100ae8>
81120b9c:	1023883a 	mov	r17,r2
81120ba0:	003fa806 	br	81120a44 <__reset+0xfb100a44>
81120ba4:	b0ffd636 	bltu	r22,r3,81120b00 <__reset+0xfb100b00>
81120ba8:	1011883a 	mov	r8,r2
81120bac:	b0ff341e 	bne	r22,r3,81120880 <__reset+0xfb100880>
81120bb0:	003f3406 	br	81120884 <__reset+0xfb100884>
81120bb4:	0005883a 	mov	r2,zero
81120bb8:	003fe006 	br	81120b3c <__reset+0xfb100b3c>
81120bbc:	00800434 	movhi	r2,16
81120bc0:	89400234 	orhi	r5,r17,8
81120bc4:	10bfffc4 	addi	r2,r2,-1
81120bc8:	b807883a 	mov	r3,r23
81120bcc:	288a703a 	and	r5,r5,r2
81120bd0:	4025883a 	mov	r18,r8
81120bd4:	003e8206 	br	811205e0 <__reset+0xfb1005e0>

81120bd8 <__eqdf2>:
81120bd8:	2804d53a 	srli	r2,r5,20
81120bdc:	3806d53a 	srli	r3,r7,20
81120be0:	02000434 	movhi	r8,16
81120be4:	423fffc4 	addi	r8,r8,-1
81120be8:	1081ffcc 	andi	r2,r2,2047
81120bec:	0281ffc4 	movi	r10,2047
81120bf0:	2a12703a 	and	r9,r5,r8
81120bf4:	18c1ffcc 	andi	r3,r3,2047
81120bf8:	3a10703a 	and	r8,r7,r8
81120bfc:	280ad7fa 	srli	r5,r5,31
81120c00:	380ed7fa 	srli	r7,r7,31
81120c04:	12801026 	beq	r2,r10,81120c48 <__eqdf2+0x70>
81120c08:	0281ffc4 	movi	r10,2047
81120c0c:	1a800a26 	beq	r3,r10,81120c38 <__eqdf2+0x60>
81120c10:	10c00226 	beq	r2,r3,81120c1c <__eqdf2+0x44>
81120c14:	00800044 	movi	r2,1
81120c18:	f800283a 	ret
81120c1c:	4a3ffd1e 	bne	r9,r8,81120c14 <__reset+0xfb100c14>
81120c20:	21bffc1e 	bne	r4,r6,81120c14 <__reset+0xfb100c14>
81120c24:	29c00c26 	beq	r5,r7,81120c58 <__eqdf2+0x80>
81120c28:	103ffa1e 	bne	r2,zero,81120c14 <__reset+0xfb100c14>
81120c2c:	2244b03a 	or	r2,r4,r9
81120c30:	1004c03a 	cmpne	r2,r2,zero
81120c34:	f800283a 	ret
81120c38:	3214b03a 	or	r10,r6,r8
81120c3c:	503ff426 	beq	r10,zero,81120c10 <__reset+0xfb100c10>
81120c40:	00800044 	movi	r2,1
81120c44:	f800283a 	ret
81120c48:	2254b03a 	or	r10,r4,r9
81120c4c:	503fee26 	beq	r10,zero,81120c08 <__reset+0xfb100c08>
81120c50:	00800044 	movi	r2,1
81120c54:	f800283a 	ret
81120c58:	0005883a 	mov	r2,zero
81120c5c:	f800283a 	ret

81120c60 <__gedf2>:
81120c60:	2804d53a 	srli	r2,r5,20
81120c64:	3806d53a 	srli	r3,r7,20
81120c68:	02000434 	movhi	r8,16
81120c6c:	423fffc4 	addi	r8,r8,-1
81120c70:	1081ffcc 	andi	r2,r2,2047
81120c74:	0241ffc4 	movi	r9,2047
81120c78:	2a14703a 	and	r10,r5,r8
81120c7c:	18c1ffcc 	andi	r3,r3,2047
81120c80:	3a10703a 	and	r8,r7,r8
81120c84:	280ad7fa 	srli	r5,r5,31
81120c88:	380ed7fa 	srli	r7,r7,31
81120c8c:	12401d26 	beq	r2,r9,81120d04 <__gedf2+0xa4>
81120c90:	0241ffc4 	movi	r9,2047
81120c94:	1a401226 	beq	r3,r9,81120ce0 <__gedf2+0x80>
81120c98:	1000081e 	bne	r2,zero,81120cbc <__gedf2+0x5c>
81120c9c:	2296b03a 	or	r11,r4,r10
81120ca0:	5813003a 	cmpeq	r9,r11,zero
81120ca4:	1800091e 	bne	r3,zero,81120ccc <__gedf2+0x6c>
81120ca8:	3218b03a 	or	r12,r6,r8
81120cac:	6000071e 	bne	r12,zero,81120ccc <__gedf2+0x6c>
81120cb0:	0005883a 	mov	r2,zero
81120cb4:	5800101e 	bne	r11,zero,81120cf8 <__gedf2+0x98>
81120cb8:	f800283a 	ret
81120cbc:	18000c1e 	bne	r3,zero,81120cf0 <__gedf2+0x90>
81120cc0:	3212b03a 	or	r9,r6,r8
81120cc4:	48000c26 	beq	r9,zero,81120cf8 <__gedf2+0x98>
81120cc8:	0013883a 	mov	r9,zero
81120ccc:	39c03fcc 	andi	r7,r7,255
81120cd0:	48000826 	beq	r9,zero,81120cf4 <__gedf2+0x94>
81120cd4:	38000926 	beq	r7,zero,81120cfc <__gedf2+0x9c>
81120cd8:	00800044 	movi	r2,1
81120cdc:	f800283a 	ret
81120ce0:	3212b03a 	or	r9,r6,r8
81120ce4:	483fec26 	beq	r9,zero,81120c98 <__reset+0xfb100c98>
81120ce8:	00bfff84 	movi	r2,-2
81120cec:	f800283a 	ret
81120cf0:	39c03fcc 	andi	r7,r7,255
81120cf4:	29c00626 	beq	r5,r7,81120d10 <__gedf2+0xb0>
81120cf8:	283ff726 	beq	r5,zero,81120cd8 <__reset+0xfb100cd8>
81120cfc:	00bfffc4 	movi	r2,-1
81120d00:	f800283a 	ret
81120d04:	2292b03a 	or	r9,r4,r10
81120d08:	483fe126 	beq	r9,zero,81120c90 <__reset+0xfb100c90>
81120d0c:	003ff606 	br	81120ce8 <__reset+0xfb100ce8>
81120d10:	18bff916 	blt	r3,r2,81120cf8 <__reset+0xfb100cf8>
81120d14:	10c00316 	blt	r2,r3,81120d24 <__gedf2+0xc4>
81120d18:	42bff736 	bltu	r8,r10,81120cf8 <__reset+0xfb100cf8>
81120d1c:	52000326 	beq	r10,r8,81120d2c <__gedf2+0xcc>
81120d20:	5200042e 	bgeu	r10,r8,81120d34 <__gedf2+0xd4>
81120d24:	283fec1e 	bne	r5,zero,81120cd8 <__reset+0xfb100cd8>
81120d28:	003ff406 	br	81120cfc <__reset+0xfb100cfc>
81120d2c:	313ff236 	bltu	r6,r4,81120cf8 <__reset+0xfb100cf8>
81120d30:	21bffc36 	bltu	r4,r6,81120d24 <__reset+0xfb100d24>
81120d34:	0005883a 	mov	r2,zero
81120d38:	f800283a 	ret

81120d3c <__ledf2>:
81120d3c:	2804d53a 	srli	r2,r5,20
81120d40:	3810d53a 	srli	r8,r7,20
81120d44:	00c00434 	movhi	r3,16
81120d48:	18ffffc4 	addi	r3,r3,-1
81120d4c:	1081ffcc 	andi	r2,r2,2047
81120d50:	0241ffc4 	movi	r9,2047
81120d54:	28d4703a 	and	r10,r5,r3
81120d58:	4201ffcc 	andi	r8,r8,2047
81120d5c:	38c6703a 	and	r3,r7,r3
81120d60:	280ad7fa 	srli	r5,r5,31
81120d64:	380ed7fa 	srli	r7,r7,31
81120d68:	12401f26 	beq	r2,r9,81120de8 <__ledf2+0xac>
81120d6c:	0241ffc4 	movi	r9,2047
81120d70:	42401426 	beq	r8,r9,81120dc4 <__ledf2+0x88>
81120d74:	1000091e 	bne	r2,zero,81120d9c <__ledf2+0x60>
81120d78:	2296b03a 	or	r11,r4,r10
81120d7c:	5813003a 	cmpeq	r9,r11,zero
81120d80:	29403fcc 	andi	r5,r5,255
81120d84:	40000a1e 	bne	r8,zero,81120db0 <__ledf2+0x74>
81120d88:	30d8b03a 	or	r12,r6,r3
81120d8c:	6000081e 	bne	r12,zero,81120db0 <__ledf2+0x74>
81120d90:	0005883a 	mov	r2,zero
81120d94:	5800111e 	bne	r11,zero,81120ddc <__ledf2+0xa0>
81120d98:	f800283a 	ret
81120d9c:	29403fcc 	andi	r5,r5,255
81120da0:	40000c1e 	bne	r8,zero,81120dd4 <__ledf2+0x98>
81120da4:	30d2b03a 	or	r9,r6,r3
81120da8:	48000c26 	beq	r9,zero,81120ddc <__ledf2+0xa0>
81120dac:	0013883a 	mov	r9,zero
81120db0:	39c03fcc 	andi	r7,r7,255
81120db4:	48000826 	beq	r9,zero,81120dd8 <__ledf2+0x9c>
81120db8:	38001126 	beq	r7,zero,81120e00 <__ledf2+0xc4>
81120dbc:	00800044 	movi	r2,1
81120dc0:	f800283a 	ret
81120dc4:	30d2b03a 	or	r9,r6,r3
81120dc8:	483fea26 	beq	r9,zero,81120d74 <__reset+0xfb100d74>
81120dcc:	00800084 	movi	r2,2
81120dd0:	f800283a 	ret
81120dd4:	39c03fcc 	andi	r7,r7,255
81120dd8:	39400726 	beq	r7,r5,81120df8 <__ledf2+0xbc>
81120ddc:	2800081e 	bne	r5,zero,81120e00 <__ledf2+0xc4>
81120de0:	00800044 	movi	r2,1
81120de4:	f800283a 	ret
81120de8:	2292b03a 	or	r9,r4,r10
81120dec:	483fdf26 	beq	r9,zero,81120d6c <__reset+0xfb100d6c>
81120df0:	00800084 	movi	r2,2
81120df4:	f800283a 	ret
81120df8:	4080030e 	bge	r8,r2,81120e08 <__ledf2+0xcc>
81120dfc:	383fef26 	beq	r7,zero,81120dbc <__reset+0xfb100dbc>
81120e00:	00bfffc4 	movi	r2,-1
81120e04:	f800283a 	ret
81120e08:	123feb16 	blt	r2,r8,81120db8 <__reset+0xfb100db8>
81120e0c:	1abff336 	bltu	r3,r10,81120ddc <__reset+0xfb100ddc>
81120e10:	50c00326 	beq	r10,r3,81120e20 <__ledf2+0xe4>
81120e14:	50c0042e 	bgeu	r10,r3,81120e28 <__ledf2+0xec>
81120e18:	283fe81e 	bne	r5,zero,81120dbc <__reset+0xfb100dbc>
81120e1c:	003ff806 	br	81120e00 <__reset+0xfb100e00>
81120e20:	313fee36 	bltu	r6,r4,81120ddc <__reset+0xfb100ddc>
81120e24:	21bffc36 	bltu	r4,r6,81120e18 <__reset+0xfb100e18>
81120e28:	0005883a 	mov	r2,zero
81120e2c:	f800283a 	ret

81120e30 <__subdf3>:
81120e30:	02000434 	movhi	r8,16
81120e34:	423fffc4 	addi	r8,r8,-1
81120e38:	defffb04 	addi	sp,sp,-20
81120e3c:	2a14703a 	and	r10,r5,r8
81120e40:	3812d53a 	srli	r9,r7,20
81120e44:	3a10703a 	and	r8,r7,r8
81120e48:	2006d77a 	srli	r3,r4,29
81120e4c:	3004d77a 	srli	r2,r6,29
81120e50:	dc000015 	stw	r16,0(sp)
81120e54:	501490fa 	slli	r10,r10,3
81120e58:	2820d53a 	srli	r16,r5,20
81120e5c:	401090fa 	slli	r8,r8,3
81120e60:	dc800215 	stw	r18,8(sp)
81120e64:	dc400115 	stw	r17,4(sp)
81120e68:	dfc00415 	stw	ra,16(sp)
81120e6c:	202290fa 	slli	r17,r4,3
81120e70:	dcc00315 	stw	r19,12(sp)
81120e74:	4a41ffcc 	andi	r9,r9,2047
81120e78:	0101ffc4 	movi	r4,2047
81120e7c:	2824d7fa 	srli	r18,r5,31
81120e80:	8401ffcc 	andi	r16,r16,2047
81120e84:	50c6b03a 	or	r3,r10,r3
81120e88:	380ed7fa 	srli	r7,r7,31
81120e8c:	408ab03a 	or	r5,r8,r2
81120e90:	300c90fa 	slli	r6,r6,3
81120e94:	49009626 	beq	r9,r4,811210f0 <__subdf3+0x2c0>
81120e98:	39c0005c 	xori	r7,r7,1
81120e9c:	8245c83a 	sub	r2,r16,r9
81120ea0:	3c807426 	beq	r7,r18,81121074 <__subdf3+0x244>
81120ea4:	0080af0e 	bge	zero,r2,81121164 <__subdf3+0x334>
81120ea8:	48002a1e 	bne	r9,zero,81120f54 <__subdf3+0x124>
81120eac:	2988b03a 	or	r4,r5,r6
81120eb0:	20009a1e 	bne	r4,zero,8112111c <__subdf3+0x2ec>
81120eb4:	888001cc 	andi	r2,r17,7
81120eb8:	10000726 	beq	r2,zero,81120ed8 <__subdf3+0xa8>
81120ebc:	888003cc 	andi	r2,r17,15
81120ec0:	01000104 	movi	r4,4
81120ec4:	11000426 	beq	r2,r4,81120ed8 <__subdf3+0xa8>
81120ec8:	890b883a 	add	r5,r17,r4
81120ecc:	2c63803a 	cmpltu	r17,r5,r17
81120ed0:	1c47883a 	add	r3,r3,r17
81120ed4:	2823883a 	mov	r17,r5
81120ed8:	1880202c 	andhi	r2,r3,128
81120edc:	10005926 	beq	r2,zero,81121044 <__subdf3+0x214>
81120ee0:	84000044 	addi	r16,r16,1
81120ee4:	0081ffc4 	movi	r2,2047
81120ee8:	8080be26 	beq	r16,r2,811211e4 <__subdf3+0x3b4>
81120eec:	017fe034 	movhi	r5,65408
81120ef0:	297fffc4 	addi	r5,r5,-1
81120ef4:	1946703a 	and	r3,r3,r5
81120ef8:	1804977a 	slli	r2,r3,29
81120efc:	1806927a 	slli	r3,r3,9
81120f00:	8822d0fa 	srli	r17,r17,3
81120f04:	8401ffcc 	andi	r16,r16,2047
81120f08:	180ad33a 	srli	r5,r3,12
81120f0c:	9100004c 	andi	r4,r18,1
81120f10:	1444b03a 	or	r2,r2,r17
81120f14:	80c1ffcc 	andi	r3,r16,2047
81120f18:	1820953a 	slli	r16,r3,20
81120f1c:	20c03fcc 	andi	r3,r4,255
81120f20:	180897fa 	slli	r4,r3,31
81120f24:	00c00434 	movhi	r3,16
81120f28:	18ffffc4 	addi	r3,r3,-1
81120f2c:	28c6703a 	and	r3,r5,r3
81120f30:	1c06b03a 	or	r3,r3,r16
81120f34:	1906b03a 	or	r3,r3,r4
81120f38:	dfc00417 	ldw	ra,16(sp)
81120f3c:	dcc00317 	ldw	r19,12(sp)
81120f40:	dc800217 	ldw	r18,8(sp)
81120f44:	dc400117 	ldw	r17,4(sp)
81120f48:	dc000017 	ldw	r16,0(sp)
81120f4c:	dec00504 	addi	sp,sp,20
81120f50:	f800283a 	ret
81120f54:	0101ffc4 	movi	r4,2047
81120f58:	813fd626 	beq	r16,r4,81120eb4 <__reset+0xfb100eb4>
81120f5c:	29402034 	orhi	r5,r5,128
81120f60:	01000e04 	movi	r4,56
81120f64:	2080a316 	blt	r4,r2,811211f4 <__subdf3+0x3c4>
81120f68:	010007c4 	movi	r4,31
81120f6c:	2080c616 	blt	r4,r2,81121288 <__subdf3+0x458>
81120f70:	01000804 	movi	r4,32
81120f74:	2089c83a 	sub	r4,r4,r2
81120f78:	2910983a 	sll	r8,r5,r4
81120f7c:	308ed83a 	srl	r7,r6,r2
81120f80:	3108983a 	sll	r4,r6,r4
81120f84:	2884d83a 	srl	r2,r5,r2
81120f88:	41ccb03a 	or	r6,r8,r7
81120f8c:	2008c03a 	cmpne	r4,r4,zero
81120f90:	310cb03a 	or	r6,r6,r4
81120f94:	898dc83a 	sub	r6,r17,r6
81120f98:	89a3803a 	cmpltu	r17,r17,r6
81120f9c:	1887c83a 	sub	r3,r3,r2
81120fa0:	1c47c83a 	sub	r3,r3,r17
81120fa4:	3023883a 	mov	r17,r6
81120fa8:	1880202c 	andhi	r2,r3,128
81120fac:	10002326 	beq	r2,zero,8112103c <__subdf3+0x20c>
81120fb0:	04c02034 	movhi	r19,128
81120fb4:	9cffffc4 	addi	r19,r19,-1
81120fb8:	1ce6703a 	and	r19,r3,r19
81120fbc:	98007a26 	beq	r19,zero,811211a8 <__subdf3+0x378>
81120fc0:	9809883a 	mov	r4,r19
81120fc4:	110c3080 	call	8110c308 <__clzsi2>
81120fc8:	113ffe04 	addi	r4,r2,-8
81120fcc:	00c007c4 	movi	r3,31
81120fd0:	19007b16 	blt	r3,r4,811211c0 <__subdf3+0x390>
81120fd4:	00800804 	movi	r2,32
81120fd8:	1105c83a 	sub	r2,r2,r4
81120fdc:	8884d83a 	srl	r2,r17,r2
81120fe0:	9906983a 	sll	r3,r19,r4
81120fe4:	8922983a 	sll	r17,r17,r4
81120fe8:	10c4b03a 	or	r2,r2,r3
81120fec:	24007816 	blt	r4,r16,811211d0 <__subdf3+0x3a0>
81120ff0:	2421c83a 	sub	r16,r4,r16
81120ff4:	80c00044 	addi	r3,r16,1
81120ff8:	010007c4 	movi	r4,31
81120ffc:	20c09516 	blt	r4,r3,81121254 <__subdf3+0x424>
81121000:	01400804 	movi	r5,32
81121004:	28cbc83a 	sub	r5,r5,r3
81121008:	88c8d83a 	srl	r4,r17,r3
8112100c:	8962983a 	sll	r17,r17,r5
81121010:	114a983a 	sll	r5,r2,r5
81121014:	10c6d83a 	srl	r3,r2,r3
81121018:	8804c03a 	cmpne	r2,r17,zero
8112101c:	290ab03a 	or	r5,r5,r4
81121020:	28a2b03a 	or	r17,r5,r2
81121024:	0021883a 	mov	r16,zero
81121028:	003fa206 	br	81120eb4 <__reset+0xfb100eb4>
8112102c:	2090b03a 	or	r8,r4,r2
81121030:	40018e26 	beq	r8,zero,8112166c <__subdf3+0x83c>
81121034:	1007883a 	mov	r3,r2
81121038:	2023883a 	mov	r17,r4
8112103c:	888001cc 	andi	r2,r17,7
81121040:	103f9e1e 	bne	r2,zero,81120ebc <__reset+0xfb100ebc>
81121044:	1804977a 	slli	r2,r3,29
81121048:	8822d0fa 	srli	r17,r17,3
8112104c:	1810d0fa 	srli	r8,r3,3
81121050:	9100004c 	andi	r4,r18,1
81121054:	1444b03a 	or	r2,r2,r17
81121058:	00c1ffc4 	movi	r3,2047
8112105c:	80c02826 	beq	r16,r3,81121100 <__subdf3+0x2d0>
81121060:	01400434 	movhi	r5,16
81121064:	297fffc4 	addi	r5,r5,-1
81121068:	80e0703a 	and	r16,r16,r3
8112106c:	414a703a 	and	r5,r8,r5
81121070:	003fa806 	br	81120f14 <__reset+0xfb100f14>
81121074:	0080630e 	bge	zero,r2,81121204 <__subdf3+0x3d4>
81121078:	48003026 	beq	r9,zero,8112113c <__subdf3+0x30c>
8112107c:	0101ffc4 	movi	r4,2047
81121080:	813f8c26 	beq	r16,r4,81120eb4 <__reset+0xfb100eb4>
81121084:	29402034 	orhi	r5,r5,128
81121088:	01000e04 	movi	r4,56
8112108c:	2080a90e 	bge	r4,r2,81121334 <__subdf3+0x504>
81121090:	298cb03a 	or	r6,r5,r6
81121094:	3012c03a 	cmpne	r9,r6,zero
81121098:	0005883a 	mov	r2,zero
8112109c:	4c53883a 	add	r9,r9,r17
811210a0:	4c63803a 	cmpltu	r17,r9,r17
811210a4:	10c7883a 	add	r3,r2,r3
811210a8:	88c7883a 	add	r3,r17,r3
811210ac:	4823883a 	mov	r17,r9
811210b0:	1880202c 	andhi	r2,r3,128
811210b4:	1000d026 	beq	r2,zero,811213f8 <__subdf3+0x5c8>
811210b8:	84000044 	addi	r16,r16,1
811210bc:	0081ffc4 	movi	r2,2047
811210c0:	8080fe26 	beq	r16,r2,811214bc <__subdf3+0x68c>
811210c4:	00bfe034 	movhi	r2,65408
811210c8:	10bfffc4 	addi	r2,r2,-1
811210cc:	1886703a 	and	r3,r3,r2
811210d0:	880ad07a 	srli	r5,r17,1
811210d4:	180497fa 	slli	r2,r3,31
811210d8:	8900004c 	andi	r4,r17,1
811210dc:	2922b03a 	or	r17,r5,r4
811210e0:	1806d07a 	srli	r3,r3,1
811210e4:	1462b03a 	or	r17,r2,r17
811210e8:	3825883a 	mov	r18,r7
811210ec:	003f7106 	br	81120eb4 <__reset+0xfb100eb4>
811210f0:	2984b03a 	or	r2,r5,r6
811210f4:	103f6826 	beq	r2,zero,81120e98 <__reset+0xfb100e98>
811210f8:	39c03fcc 	andi	r7,r7,255
811210fc:	003f6706 	br	81120e9c <__reset+0xfb100e9c>
81121100:	4086b03a 	or	r3,r8,r2
81121104:	18015226 	beq	r3,zero,81121650 <__subdf3+0x820>
81121108:	00c00434 	movhi	r3,16
8112110c:	41400234 	orhi	r5,r8,8
81121110:	18ffffc4 	addi	r3,r3,-1
81121114:	28ca703a 	and	r5,r5,r3
81121118:	003f7e06 	br	81120f14 <__reset+0xfb100f14>
8112111c:	10bfffc4 	addi	r2,r2,-1
81121120:	1000491e 	bne	r2,zero,81121248 <__subdf3+0x418>
81121124:	898fc83a 	sub	r7,r17,r6
81121128:	89e3803a 	cmpltu	r17,r17,r7
8112112c:	1947c83a 	sub	r3,r3,r5
81121130:	1c47c83a 	sub	r3,r3,r17
81121134:	3823883a 	mov	r17,r7
81121138:	003f9b06 	br	81120fa8 <__reset+0xfb100fa8>
8112113c:	2988b03a 	or	r4,r5,r6
81121140:	203f5c26 	beq	r4,zero,81120eb4 <__reset+0xfb100eb4>
81121144:	10bfffc4 	addi	r2,r2,-1
81121148:	1000931e 	bne	r2,zero,81121398 <__subdf3+0x568>
8112114c:	898d883a 	add	r6,r17,r6
81121150:	3463803a 	cmpltu	r17,r6,r17
81121154:	1947883a 	add	r3,r3,r5
81121158:	88c7883a 	add	r3,r17,r3
8112115c:	3023883a 	mov	r17,r6
81121160:	003fd306 	br	811210b0 <__reset+0xfb1010b0>
81121164:	1000541e 	bne	r2,zero,811212b8 <__subdf3+0x488>
81121168:	80800044 	addi	r2,r16,1
8112116c:	1081ffcc 	andi	r2,r2,2047
81121170:	01000044 	movi	r4,1
81121174:	2080a20e 	bge	r4,r2,81121400 <__subdf3+0x5d0>
81121178:	8989c83a 	sub	r4,r17,r6
8112117c:	8905803a 	cmpltu	r2,r17,r4
81121180:	1967c83a 	sub	r19,r3,r5
81121184:	98a7c83a 	sub	r19,r19,r2
81121188:	9880202c 	andhi	r2,r19,128
8112118c:	10006326 	beq	r2,zero,8112131c <__subdf3+0x4ec>
81121190:	3463c83a 	sub	r17,r6,r17
81121194:	28c7c83a 	sub	r3,r5,r3
81121198:	344d803a 	cmpltu	r6,r6,r17
8112119c:	19a7c83a 	sub	r19,r3,r6
811211a0:	3825883a 	mov	r18,r7
811211a4:	983f861e 	bne	r19,zero,81120fc0 <__reset+0xfb100fc0>
811211a8:	8809883a 	mov	r4,r17
811211ac:	110c3080 	call	8110c308 <__clzsi2>
811211b0:	10800804 	addi	r2,r2,32
811211b4:	113ffe04 	addi	r4,r2,-8
811211b8:	00c007c4 	movi	r3,31
811211bc:	193f850e 	bge	r3,r4,81120fd4 <__reset+0xfb100fd4>
811211c0:	10bff604 	addi	r2,r2,-40
811211c4:	8884983a 	sll	r2,r17,r2
811211c8:	0023883a 	mov	r17,zero
811211cc:	243f880e 	bge	r4,r16,81120ff0 <__reset+0xfb100ff0>
811211d0:	00ffe034 	movhi	r3,65408
811211d4:	18ffffc4 	addi	r3,r3,-1
811211d8:	8121c83a 	sub	r16,r16,r4
811211dc:	10c6703a 	and	r3,r2,r3
811211e0:	003f3406 	br	81120eb4 <__reset+0xfb100eb4>
811211e4:	9100004c 	andi	r4,r18,1
811211e8:	000b883a 	mov	r5,zero
811211ec:	0005883a 	mov	r2,zero
811211f0:	003f4806 	br	81120f14 <__reset+0xfb100f14>
811211f4:	298cb03a 	or	r6,r5,r6
811211f8:	300cc03a 	cmpne	r6,r6,zero
811211fc:	0005883a 	mov	r2,zero
81121200:	003f6406 	br	81120f94 <__reset+0xfb100f94>
81121204:	10009a1e 	bne	r2,zero,81121470 <__subdf3+0x640>
81121208:	82400044 	addi	r9,r16,1
8112120c:	4881ffcc 	andi	r2,r9,2047
81121210:	02800044 	movi	r10,1
81121214:	5080670e 	bge	r10,r2,811213b4 <__subdf3+0x584>
81121218:	0081ffc4 	movi	r2,2047
8112121c:	4880af26 	beq	r9,r2,811214dc <__subdf3+0x6ac>
81121220:	898d883a 	add	r6,r17,r6
81121224:	1945883a 	add	r2,r3,r5
81121228:	3447803a 	cmpltu	r3,r6,r17
8112122c:	1887883a 	add	r3,r3,r2
81121230:	182297fa 	slli	r17,r3,31
81121234:	300cd07a 	srli	r6,r6,1
81121238:	1806d07a 	srli	r3,r3,1
8112123c:	4821883a 	mov	r16,r9
81121240:	89a2b03a 	or	r17,r17,r6
81121244:	003f1b06 	br	81120eb4 <__reset+0xfb100eb4>
81121248:	0101ffc4 	movi	r4,2047
8112124c:	813f441e 	bne	r16,r4,81120f60 <__reset+0xfb100f60>
81121250:	003f1806 	br	81120eb4 <__reset+0xfb100eb4>
81121254:	843ff844 	addi	r16,r16,-31
81121258:	01400804 	movi	r5,32
8112125c:	1408d83a 	srl	r4,r2,r16
81121260:	19405026 	beq	r3,r5,811213a4 <__subdf3+0x574>
81121264:	01401004 	movi	r5,64
81121268:	28c7c83a 	sub	r3,r5,r3
8112126c:	10c4983a 	sll	r2,r2,r3
81121270:	88a2b03a 	or	r17,r17,r2
81121274:	8822c03a 	cmpne	r17,r17,zero
81121278:	2462b03a 	or	r17,r4,r17
8112127c:	0007883a 	mov	r3,zero
81121280:	0021883a 	mov	r16,zero
81121284:	003f6d06 	br	8112103c <__reset+0xfb10103c>
81121288:	11fff804 	addi	r7,r2,-32
8112128c:	01000804 	movi	r4,32
81121290:	29ced83a 	srl	r7,r5,r7
81121294:	11004526 	beq	r2,r4,811213ac <__subdf3+0x57c>
81121298:	01001004 	movi	r4,64
8112129c:	2089c83a 	sub	r4,r4,r2
811212a0:	2904983a 	sll	r2,r5,r4
811212a4:	118cb03a 	or	r6,r2,r6
811212a8:	300cc03a 	cmpne	r6,r6,zero
811212ac:	398cb03a 	or	r6,r7,r6
811212b0:	0005883a 	mov	r2,zero
811212b4:	003f3706 	br	81120f94 <__reset+0xfb100f94>
811212b8:	80002a26 	beq	r16,zero,81121364 <__subdf3+0x534>
811212bc:	0101ffc4 	movi	r4,2047
811212c0:	49006626 	beq	r9,r4,8112145c <__subdf3+0x62c>
811212c4:	0085c83a 	sub	r2,zero,r2
811212c8:	18c02034 	orhi	r3,r3,128
811212cc:	01000e04 	movi	r4,56
811212d0:	20807e16 	blt	r4,r2,811214cc <__subdf3+0x69c>
811212d4:	010007c4 	movi	r4,31
811212d8:	2080e716 	blt	r4,r2,81121678 <__subdf3+0x848>
811212dc:	01000804 	movi	r4,32
811212e0:	2089c83a 	sub	r4,r4,r2
811212e4:	1914983a 	sll	r10,r3,r4
811212e8:	8890d83a 	srl	r8,r17,r2
811212ec:	8908983a 	sll	r4,r17,r4
811212f0:	1884d83a 	srl	r2,r3,r2
811212f4:	5222b03a 	or	r17,r10,r8
811212f8:	2006c03a 	cmpne	r3,r4,zero
811212fc:	88e2b03a 	or	r17,r17,r3
81121300:	3463c83a 	sub	r17,r6,r17
81121304:	2885c83a 	sub	r2,r5,r2
81121308:	344d803a 	cmpltu	r6,r6,r17
8112130c:	1187c83a 	sub	r3,r2,r6
81121310:	4821883a 	mov	r16,r9
81121314:	3825883a 	mov	r18,r7
81121318:	003f2306 	br	81120fa8 <__reset+0xfb100fa8>
8112131c:	24d0b03a 	or	r8,r4,r19
81121320:	40001b1e 	bne	r8,zero,81121390 <__subdf3+0x560>
81121324:	0005883a 	mov	r2,zero
81121328:	0009883a 	mov	r4,zero
8112132c:	0021883a 	mov	r16,zero
81121330:	003f4906 	br	81121058 <__reset+0xfb101058>
81121334:	010007c4 	movi	r4,31
81121338:	20803a16 	blt	r4,r2,81121424 <__subdf3+0x5f4>
8112133c:	01000804 	movi	r4,32
81121340:	2089c83a 	sub	r4,r4,r2
81121344:	2912983a 	sll	r9,r5,r4
81121348:	3090d83a 	srl	r8,r6,r2
8112134c:	3108983a 	sll	r4,r6,r4
81121350:	2884d83a 	srl	r2,r5,r2
81121354:	4a12b03a 	or	r9,r9,r8
81121358:	2008c03a 	cmpne	r4,r4,zero
8112135c:	4912b03a 	or	r9,r9,r4
81121360:	003f4e06 	br	8112109c <__reset+0xfb10109c>
81121364:	1c48b03a 	or	r4,r3,r17
81121368:	20003c26 	beq	r4,zero,8112145c <__subdf3+0x62c>
8112136c:	0084303a 	nor	r2,zero,r2
81121370:	1000381e 	bne	r2,zero,81121454 <__subdf3+0x624>
81121374:	3463c83a 	sub	r17,r6,r17
81121378:	28c5c83a 	sub	r2,r5,r3
8112137c:	344d803a 	cmpltu	r6,r6,r17
81121380:	1187c83a 	sub	r3,r2,r6
81121384:	4821883a 	mov	r16,r9
81121388:	3825883a 	mov	r18,r7
8112138c:	003f0606 	br	81120fa8 <__reset+0xfb100fa8>
81121390:	2023883a 	mov	r17,r4
81121394:	003f0906 	br	81120fbc <__reset+0xfb100fbc>
81121398:	0101ffc4 	movi	r4,2047
8112139c:	813f3a1e 	bne	r16,r4,81121088 <__reset+0xfb101088>
811213a0:	003ec406 	br	81120eb4 <__reset+0xfb100eb4>
811213a4:	0005883a 	mov	r2,zero
811213a8:	003fb106 	br	81121270 <__reset+0xfb101270>
811213ac:	0005883a 	mov	r2,zero
811213b0:	003fbc06 	br	811212a4 <__reset+0xfb1012a4>
811213b4:	1c44b03a 	or	r2,r3,r17
811213b8:	80008e1e 	bne	r16,zero,811215f4 <__subdf3+0x7c4>
811213bc:	1000c826 	beq	r2,zero,811216e0 <__subdf3+0x8b0>
811213c0:	2984b03a 	or	r2,r5,r6
811213c4:	103ebb26 	beq	r2,zero,81120eb4 <__reset+0xfb100eb4>
811213c8:	8989883a 	add	r4,r17,r6
811213cc:	1945883a 	add	r2,r3,r5
811213d0:	2447803a 	cmpltu	r3,r4,r17
811213d4:	1887883a 	add	r3,r3,r2
811213d8:	1880202c 	andhi	r2,r3,128
811213dc:	2023883a 	mov	r17,r4
811213e0:	103f1626 	beq	r2,zero,8112103c <__reset+0xfb10103c>
811213e4:	00bfe034 	movhi	r2,65408
811213e8:	10bfffc4 	addi	r2,r2,-1
811213ec:	5021883a 	mov	r16,r10
811213f0:	1886703a 	and	r3,r3,r2
811213f4:	003eaf06 	br	81120eb4 <__reset+0xfb100eb4>
811213f8:	3825883a 	mov	r18,r7
811213fc:	003f0f06 	br	8112103c <__reset+0xfb10103c>
81121400:	1c44b03a 	or	r2,r3,r17
81121404:	8000251e 	bne	r16,zero,8112149c <__subdf3+0x66c>
81121408:	1000661e 	bne	r2,zero,811215a4 <__subdf3+0x774>
8112140c:	2990b03a 	or	r8,r5,r6
81121410:	40009626 	beq	r8,zero,8112166c <__subdf3+0x83c>
81121414:	2807883a 	mov	r3,r5
81121418:	3023883a 	mov	r17,r6
8112141c:	3825883a 	mov	r18,r7
81121420:	003ea406 	br	81120eb4 <__reset+0xfb100eb4>
81121424:	127ff804 	addi	r9,r2,-32
81121428:	01000804 	movi	r4,32
8112142c:	2a52d83a 	srl	r9,r5,r9
81121430:	11008c26 	beq	r2,r4,81121664 <__subdf3+0x834>
81121434:	01001004 	movi	r4,64
81121438:	2085c83a 	sub	r2,r4,r2
8112143c:	2884983a 	sll	r2,r5,r2
81121440:	118cb03a 	or	r6,r2,r6
81121444:	300cc03a 	cmpne	r6,r6,zero
81121448:	4992b03a 	or	r9,r9,r6
8112144c:	0005883a 	mov	r2,zero
81121450:	003f1206 	br	8112109c <__reset+0xfb10109c>
81121454:	0101ffc4 	movi	r4,2047
81121458:	493f9c1e 	bne	r9,r4,811212cc <__reset+0xfb1012cc>
8112145c:	2807883a 	mov	r3,r5
81121460:	3023883a 	mov	r17,r6
81121464:	4821883a 	mov	r16,r9
81121468:	3825883a 	mov	r18,r7
8112146c:	003e9106 	br	81120eb4 <__reset+0xfb100eb4>
81121470:	80001f1e 	bne	r16,zero,811214f0 <__subdf3+0x6c0>
81121474:	1c48b03a 	or	r4,r3,r17
81121478:	20005a26 	beq	r4,zero,811215e4 <__subdf3+0x7b4>
8112147c:	0084303a 	nor	r2,zero,r2
81121480:	1000561e 	bne	r2,zero,811215dc <__subdf3+0x7ac>
81121484:	89a3883a 	add	r17,r17,r6
81121488:	1945883a 	add	r2,r3,r5
8112148c:	898d803a 	cmpltu	r6,r17,r6
81121490:	3087883a 	add	r3,r6,r2
81121494:	4821883a 	mov	r16,r9
81121498:	003f0506 	br	811210b0 <__reset+0xfb1010b0>
8112149c:	10002b1e 	bne	r2,zero,8112154c <__subdf3+0x71c>
811214a0:	2984b03a 	or	r2,r5,r6
811214a4:	10008026 	beq	r2,zero,811216a8 <__subdf3+0x878>
811214a8:	2807883a 	mov	r3,r5
811214ac:	3023883a 	mov	r17,r6
811214b0:	3825883a 	mov	r18,r7
811214b4:	0401ffc4 	movi	r16,2047
811214b8:	003e7e06 	br	81120eb4 <__reset+0xfb100eb4>
811214bc:	3809883a 	mov	r4,r7
811214c0:	0011883a 	mov	r8,zero
811214c4:	0005883a 	mov	r2,zero
811214c8:	003ee306 	br	81121058 <__reset+0xfb101058>
811214cc:	1c62b03a 	or	r17,r3,r17
811214d0:	8822c03a 	cmpne	r17,r17,zero
811214d4:	0005883a 	mov	r2,zero
811214d8:	003f8906 	br	81121300 <__reset+0xfb101300>
811214dc:	3809883a 	mov	r4,r7
811214e0:	4821883a 	mov	r16,r9
811214e4:	0011883a 	mov	r8,zero
811214e8:	0005883a 	mov	r2,zero
811214ec:	003eda06 	br	81121058 <__reset+0xfb101058>
811214f0:	0101ffc4 	movi	r4,2047
811214f4:	49003b26 	beq	r9,r4,811215e4 <__subdf3+0x7b4>
811214f8:	0085c83a 	sub	r2,zero,r2
811214fc:	18c02034 	orhi	r3,r3,128
81121500:	01000e04 	movi	r4,56
81121504:	20806e16 	blt	r4,r2,811216c0 <__subdf3+0x890>
81121508:	010007c4 	movi	r4,31
8112150c:	20807716 	blt	r4,r2,811216ec <__subdf3+0x8bc>
81121510:	01000804 	movi	r4,32
81121514:	2089c83a 	sub	r4,r4,r2
81121518:	1914983a 	sll	r10,r3,r4
8112151c:	8890d83a 	srl	r8,r17,r2
81121520:	8908983a 	sll	r4,r17,r4
81121524:	1884d83a 	srl	r2,r3,r2
81121528:	5222b03a 	or	r17,r10,r8
8112152c:	2006c03a 	cmpne	r3,r4,zero
81121530:	88e2b03a 	or	r17,r17,r3
81121534:	89a3883a 	add	r17,r17,r6
81121538:	1145883a 	add	r2,r2,r5
8112153c:	898d803a 	cmpltu	r6,r17,r6
81121540:	3087883a 	add	r3,r6,r2
81121544:	4821883a 	mov	r16,r9
81121548:	003ed906 	br	811210b0 <__reset+0xfb1010b0>
8112154c:	2984b03a 	or	r2,r5,r6
81121550:	10004226 	beq	r2,zero,8112165c <__subdf3+0x82c>
81121554:	1808d0fa 	srli	r4,r3,3
81121558:	8822d0fa 	srli	r17,r17,3
8112155c:	1806977a 	slli	r3,r3,29
81121560:	2080022c 	andhi	r2,r4,8
81121564:	1c62b03a 	or	r17,r3,r17
81121568:	10000826 	beq	r2,zero,8112158c <__subdf3+0x75c>
8112156c:	2812d0fa 	srli	r9,r5,3
81121570:	4880022c 	andhi	r2,r9,8
81121574:	1000051e 	bne	r2,zero,8112158c <__subdf3+0x75c>
81121578:	300cd0fa 	srli	r6,r6,3
8112157c:	2804977a 	slli	r2,r5,29
81121580:	4809883a 	mov	r4,r9
81121584:	3825883a 	mov	r18,r7
81121588:	11a2b03a 	or	r17,r2,r6
8112158c:	8806d77a 	srli	r3,r17,29
81121590:	200890fa 	slli	r4,r4,3
81121594:	882290fa 	slli	r17,r17,3
81121598:	0401ffc4 	movi	r16,2047
8112159c:	1906b03a 	or	r3,r3,r4
811215a0:	003e4406 	br	81120eb4 <__reset+0xfb100eb4>
811215a4:	2984b03a 	or	r2,r5,r6
811215a8:	103e4226 	beq	r2,zero,81120eb4 <__reset+0xfb100eb4>
811215ac:	8989c83a 	sub	r4,r17,r6
811215b0:	8911803a 	cmpltu	r8,r17,r4
811215b4:	1945c83a 	sub	r2,r3,r5
811215b8:	1205c83a 	sub	r2,r2,r8
811215bc:	1200202c 	andhi	r8,r2,128
811215c0:	403e9a26 	beq	r8,zero,8112102c <__reset+0xfb10102c>
811215c4:	3463c83a 	sub	r17,r6,r17
811215c8:	28c5c83a 	sub	r2,r5,r3
811215cc:	344d803a 	cmpltu	r6,r6,r17
811215d0:	1187c83a 	sub	r3,r2,r6
811215d4:	3825883a 	mov	r18,r7
811215d8:	003e3606 	br	81120eb4 <__reset+0xfb100eb4>
811215dc:	0101ffc4 	movi	r4,2047
811215e0:	493fc71e 	bne	r9,r4,81121500 <__reset+0xfb101500>
811215e4:	2807883a 	mov	r3,r5
811215e8:	3023883a 	mov	r17,r6
811215ec:	4821883a 	mov	r16,r9
811215f0:	003e3006 	br	81120eb4 <__reset+0xfb100eb4>
811215f4:	10003626 	beq	r2,zero,811216d0 <__subdf3+0x8a0>
811215f8:	2984b03a 	or	r2,r5,r6
811215fc:	10001726 	beq	r2,zero,8112165c <__subdf3+0x82c>
81121600:	1808d0fa 	srli	r4,r3,3
81121604:	8822d0fa 	srli	r17,r17,3
81121608:	1806977a 	slli	r3,r3,29
8112160c:	2080022c 	andhi	r2,r4,8
81121610:	1c62b03a 	or	r17,r3,r17
81121614:	10000726 	beq	r2,zero,81121634 <__subdf3+0x804>
81121618:	2812d0fa 	srli	r9,r5,3
8112161c:	4880022c 	andhi	r2,r9,8
81121620:	1000041e 	bne	r2,zero,81121634 <__subdf3+0x804>
81121624:	300cd0fa 	srli	r6,r6,3
81121628:	2804977a 	slli	r2,r5,29
8112162c:	4809883a 	mov	r4,r9
81121630:	11a2b03a 	or	r17,r2,r6
81121634:	8806d77a 	srli	r3,r17,29
81121638:	200890fa 	slli	r4,r4,3
8112163c:	882290fa 	slli	r17,r17,3
81121640:	3825883a 	mov	r18,r7
81121644:	1906b03a 	or	r3,r3,r4
81121648:	0401ffc4 	movi	r16,2047
8112164c:	003e1906 	br	81120eb4 <__reset+0xfb100eb4>
81121650:	000b883a 	mov	r5,zero
81121654:	0005883a 	mov	r2,zero
81121658:	003e2e06 	br	81120f14 <__reset+0xfb100f14>
8112165c:	0401ffc4 	movi	r16,2047
81121660:	003e1406 	br	81120eb4 <__reset+0xfb100eb4>
81121664:	0005883a 	mov	r2,zero
81121668:	003f7506 	br	81121440 <__reset+0xfb101440>
8112166c:	0005883a 	mov	r2,zero
81121670:	0009883a 	mov	r4,zero
81121674:	003e7806 	br	81121058 <__reset+0xfb101058>
81121678:	123ff804 	addi	r8,r2,-32
8112167c:	01000804 	movi	r4,32
81121680:	1a10d83a 	srl	r8,r3,r8
81121684:	11002526 	beq	r2,r4,8112171c <__subdf3+0x8ec>
81121688:	01001004 	movi	r4,64
8112168c:	2085c83a 	sub	r2,r4,r2
81121690:	1884983a 	sll	r2,r3,r2
81121694:	1444b03a 	or	r2,r2,r17
81121698:	1004c03a 	cmpne	r2,r2,zero
8112169c:	40a2b03a 	or	r17,r8,r2
811216a0:	0005883a 	mov	r2,zero
811216a4:	003f1606 	br	81121300 <__reset+0xfb101300>
811216a8:	02000434 	movhi	r8,16
811216ac:	0009883a 	mov	r4,zero
811216b0:	423fffc4 	addi	r8,r8,-1
811216b4:	00bfffc4 	movi	r2,-1
811216b8:	0401ffc4 	movi	r16,2047
811216bc:	003e6606 	br	81121058 <__reset+0xfb101058>
811216c0:	1c62b03a 	or	r17,r3,r17
811216c4:	8822c03a 	cmpne	r17,r17,zero
811216c8:	0005883a 	mov	r2,zero
811216cc:	003f9906 	br	81121534 <__reset+0xfb101534>
811216d0:	2807883a 	mov	r3,r5
811216d4:	3023883a 	mov	r17,r6
811216d8:	0401ffc4 	movi	r16,2047
811216dc:	003df506 	br	81120eb4 <__reset+0xfb100eb4>
811216e0:	2807883a 	mov	r3,r5
811216e4:	3023883a 	mov	r17,r6
811216e8:	003df206 	br	81120eb4 <__reset+0xfb100eb4>
811216ec:	123ff804 	addi	r8,r2,-32
811216f0:	01000804 	movi	r4,32
811216f4:	1a10d83a 	srl	r8,r3,r8
811216f8:	11000a26 	beq	r2,r4,81121724 <__subdf3+0x8f4>
811216fc:	01001004 	movi	r4,64
81121700:	2085c83a 	sub	r2,r4,r2
81121704:	1884983a 	sll	r2,r3,r2
81121708:	1444b03a 	or	r2,r2,r17
8112170c:	1004c03a 	cmpne	r2,r2,zero
81121710:	40a2b03a 	or	r17,r8,r2
81121714:	0005883a 	mov	r2,zero
81121718:	003f8606 	br	81121534 <__reset+0xfb101534>
8112171c:	0005883a 	mov	r2,zero
81121720:	003fdc06 	br	81121694 <__reset+0xfb101694>
81121724:	0005883a 	mov	r2,zero
81121728:	003ff706 	br	81121708 <__reset+0xfb101708>

8112172c <__fixdfsi>:
8112172c:	280cd53a 	srli	r6,r5,20
81121730:	00c00434 	movhi	r3,16
81121734:	18ffffc4 	addi	r3,r3,-1
81121738:	3181ffcc 	andi	r6,r6,2047
8112173c:	01c0ff84 	movi	r7,1022
81121740:	28c6703a 	and	r3,r5,r3
81121744:	280ad7fa 	srli	r5,r5,31
81121748:	3980120e 	bge	r7,r6,81121794 <__fixdfsi+0x68>
8112174c:	00810744 	movi	r2,1053
81121750:	11800c16 	blt	r2,r6,81121784 <__fixdfsi+0x58>
81121754:	00810cc4 	movi	r2,1075
81121758:	1185c83a 	sub	r2,r2,r6
8112175c:	01c007c4 	movi	r7,31
81121760:	18c00434 	orhi	r3,r3,16
81121764:	38800d16 	blt	r7,r2,8112179c <__fixdfsi+0x70>
81121768:	31befb44 	addi	r6,r6,-1043
8112176c:	2084d83a 	srl	r2,r4,r2
81121770:	1986983a 	sll	r3,r3,r6
81121774:	1884b03a 	or	r2,r3,r2
81121778:	28000726 	beq	r5,zero,81121798 <__fixdfsi+0x6c>
8112177c:	0085c83a 	sub	r2,zero,r2
81121780:	f800283a 	ret
81121784:	00a00034 	movhi	r2,32768
81121788:	10bfffc4 	addi	r2,r2,-1
8112178c:	2885883a 	add	r2,r5,r2
81121790:	f800283a 	ret
81121794:	0005883a 	mov	r2,zero
81121798:	f800283a 	ret
8112179c:	008104c4 	movi	r2,1043
811217a0:	1185c83a 	sub	r2,r2,r6
811217a4:	1884d83a 	srl	r2,r3,r2
811217a8:	003ff306 	br	81121778 <__reset+0xfb101778>

811217ac <__floatsidf>:
811217ac:	defffd04 	addi	sp,sp,-12
811217b0:	dfc00215 	stw	ra,8(sp)
811217b4:	dc400115 	stw	r17,4(sp)
811217b8:	dc000015 	stw	r16,0(sp)
811217bc:	20002b26 	beq	r4,zero,8112186c <__floatsidf+0xc0>
811217c0:	2023883a 	mov	r17,r4
811217c4:	2020d7fa 	srli	r16,r4,31
811217c8:	20002d16 	blt	r4,zero,81121880 <__floatsidf+0xd4>
811217cc:	8809883a 	mov	r4,r17
811217d0:	110c3080 	call	8110c308 <__clzsi2>
811217d4:	01410784 	movi	r5,1054
811217d8:	288bc83a 	sub	r5,r5,r2
811217dc:	01010cc4 	movi	r4,1075
811217e0:	2149c83a 	sub	r4,r4,r5
811217e4:	00c007c4 	movi	r3,31
811217e8:	1900160e 	bge	r3,r4,81121844 <__floatsidf+0x98>
811217ec:	00c104c4 	movi	r3,1043
811217f0:	1947c83a 	sub	r3,r3,r5
811217f4:	88c6983a 	sll	r3,r17,r3
811217f8:	00800434 	movhi	r2,16
811217fc:	10bfffc4 	addi	r2,r2,-1
81121800:	1886703a 	and	r3,r3,r2
81121804:	2941ffcc 	andi	r5,r5,2047
81121808:	800d883a 	mov	r6,r16
8112180c:	0005883a 	mov	r2,zero
81121810:	280a953a 	slli	r5,r5,20
81121814:	31803fcc 	andi	r6,r6,255
81121818:	01000434 	movhi	r4,16
8112181c:	300c97fa 	slli	r6,r6,31
81121820:	213fffc4 	addi	r4,r4,-1
81121824:	1906703a 	and	r3,r3,r4
81121828:	1946b03a 	or	r3,r3,r5
8112182c:	1986b03a 	or	r3,r3,r6
81121830:	dfc00217 	ldw	ra,8(sp)
81121834:	dc400117 	ldw	r17,4(sp)
81121838:	dc000017 	ldw	r16,0(sp)
8112183c:	dec00304 	addi	sp,sp,12
81121840:	f800283a 	ret
81121844:	00c002c4 	movi	r3,11
81121848:	1887c83a 	sub	r3,r3,r2
8112184c:	88c6d83a 	srl	r3,r17,r3
81121850:	8904983a 	sll	r2,r17,r4
81121854:	01000434 	movhi	r4,16
81121858:	213fffc4 	addi	r4,r4,-1
8112185c:	2941ffcc 	andi	r5,r5,2047
81121860:	1906703a 	and	r3,r3,r4
81121864:	800d883a 	mov	r6,r16
81121868:	003fe906 	br	81121810 <__reset+0xfb101810>
8112186c:	000d883a 	mov	r6,zero
81121870:	000b883a 	mov	r5,zero
81121874:	0007883a 	mov	r3,zero
81121878:	0005883a 	mov	r2,zero
8112187c:	003fe406 	br	81121810 <__reset+0xfb101810>
81121880:	0123c83a 	sub	r17,zero,r4
81121884:	003fd106 	br	811217cc <__reset+0xfb1017cc>

81121888 <__floatunsidf>:
81121888:	defffe04 	addi	sp,sp,-8
8112188c:	dc000015 	stw	r16,0(sp)
81121890:	dfc00115 	stw	ra,4(sp)
81121894:	2021883a 	mov	r16,r4
81121898:	20002226 	beq	r4,zero,81121924 <__floatunsidf+0x9c>
8112189c:	110c3080 	call	8110c308 <__clzsi2>
811218a0:	01010784 	movi	r4,1054
811218a4:	2089c83a 	sub	r4,r4,r2
811218a8:	01810cc4 	movi	r6,1075
811218ac:	310dc83a 	sub	r6,r6,r4
811218b0:	00c007c4 	movi	r3,31
811218b4:	1980120e 	bge	r3,r6,81121900 <__floatunsidf+0x78>
811218b8:	00c104c4 	movi	r3,1043
811218bc:	1907c83a 	sub	r3,r3,r4
811218c0:	80ca983a 	sll	r5,r16,r3
811218c4:	00800434 	movhi	r2,16
811218c8:	10bfffc4 	addi	r2,r2,-1
811218cc:	2101ffcc 	andi	r4,r4,2047
811218d0:	0021883a 	mov	r16,zero
811218d4:	288a703a 	and	r5,r5,r2
811218d8:	2008953a 	slli	r4,r4,20
811218dc:	00c00434 	movhi	r3,16
811218e0:	18ffffc4 	addi	r3,r3,-1
811218e4:	28c6703a 	and	r3,r5,r3
811218e8:	8005883a 	mov	r2,r16
811218ec:	1906b03a 	or	r3,r3,r4
811218f0:	dfc00117 	ldw	ra,4(sp)
811218f4:	dc000017 	ldw	r16,0(sp)
811218f8:	dec00204 	addi	sp,sp,8
811218fc:	f800283a 	ret
81121900:	00c002c4 	movi	r3,11
81121904:	188bc83a 	sub	r5,r3,r2
81121908:	814ad83a 	srl	r5,r16,r5
8112190c:	00c00434 	movhi	r3,16
81121910:	18ffffc4 	addi	r3,r3,-1
81121914:	81a0983a 	sll	r16,r16,r6
81121918:	2101ffcc 	andi	r4,r4,2047
8112191c:	28ca703a 	and	r5,r5,r3
81121920:	003fed06 	br	811218d8 <__reset+0xfb1018d8>
81121924:	0009883a 	mov	r4,zero
81121928:	000b883a 	mov	r5,zero
8112192c:	003fea06 	br	811218d8 <__reset+0xfb1018d8>

81121930 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81121930:	defffe04 	addi	sp,sp,-8
81121934:	dfc00115 	stw	ra,4(sp)
81121938:	df000015 	stw	fp,0(sp)
8112193c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81121940:	d0a01517 	ldw	r2,-32684(gp)
81121944:	10000326 	beq	r2,zero,81121954 <alt_get_errno+0x24>
81121948:	d0a01517 	ldw	r2,-32684(gp)
8112194c:	103ee83a 	callr	r2
81121950:	00000106 	br	81121958 <alt_get_errno+0x28>
81121954:	d0a06804 	addi	r2,gp,-32352
}
81121958:	e037883a 	mov	sp,fp
8112195c:	dfc00117 	ldw	ra,4(sp)
81121960:	df000017 	ldw	fp,0(sp)
81121964:	dec00204 	addi	sp,sp,8
81121968:	f800283a 	ret

8112196c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
8112196c:	defffb04 	addi	sp,sp,-20
81121970:	dfc00415 	stw	ra,16(sp)
81121974:	df000315 	stw	fp,12(sp)
81121978:	df000304 	addi	fp,sp,12
8112197c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
81121980:	e0bfff17 	ldw	r2,-4(fp)
81121984:	10000616 	blt	r2,zero,811219a0 <close+0x34>
81121988:	e0bfff17 	ldw	r2,-4(fp)
8112198c:	10c00324 	muli	r3,r2,12
81121990:	00a04534 	movhi	r2,33044
81121994:	10a16604 	addi	r2,r2,-31336
81121998:	1885883a 	add	r2,r3,r2
8112199c:	00000106 	br	811219a4 <close+0x38>
811219a0:	0005883a 	mov	r2,zero
811219a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811219a8:	e0bffd17 	ldw	r2,-12(fp)
811219ac:	10001926 	beq	r2,zero,81121a14 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
811219b0:	e0bffd17 	ldw	r2,-12(fp)
811219b4:	10800017 	ldw	r2,0(r2)
811219b8:	10800417 	ldw	r2,16(r2)
811219bc:	10000626 	beq	r2,zero,811219d8 <close+0x6c>
811219c0:	e0bffd17 	ldw	r2,-12(fp)
811219c4:	10800017 	ldw	r2,0(r2)
811219c8:	10800417 	ldw	r2,16(r2)
811219cc:	e13ffd17 	ldw	r4,-12(fp)
811219d0:	103ee83a 	callr	r2
811219d4:	00000106 	br	811219dc <close+0x70>
811219d8:	0005883a 	mov	r2,zero
811219dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
811219e0:	e13fff17 	ldw	r4,-4(fp)
811219e4:	11221ac0 	call	811221ac <alt_release_fd>
    if (rval < 0)
811219e8:	e0bffe17 	ldw	r2,-8(fp)
811219ec:	1000070e 	bge	r2,zero,81121a0c <close+0xa0>
    {
      ALT_ERRNO = -rval;
811219f0:	11219300 	call	81121930 <alt_get_errno>
811219f4:	1007883a 	mov	r3,r2
811219f8:	e0bffe17 	ldw	r2,-8(fp)
811219fc:	0085c83a 	sub	r2,zero,r2
81121a00:	18800015 	stw	r2,0(r3)
      return -1;
81121a04:	00bfffc4 	movi	r2,-1
81121a08:	00000706 	br	81121a28 <close+0xbc>
    }
    return 0;
81121a0c:	0005883a 	mov	r2,zero
81121a10:	00000506 	br	81121a28 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81121a14:	11219300 	call	81121930 <alt_get_errno>
81121a18:	1007883a 	mov	r3,r2
81121a1c:	00801444 	movi	r2,81
81121a20:	18800015 	stw	r2,0(r3)
    return -1;
81121a24:	00bfffc4 	movi	r2,-1
  }
}
81121a28:	e037883a 	mov	sp,fp
81121a2c:	dfc00117 	ldw	ra,4(sp)
81121a30:	df000017 	ldw	fp,0(sp)
81121a34:	dec00204 	addi	sp,sp,8
81121a38:	f800283a 	ret

81121a3c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81121a3c:	deffff04 	addi	sp,sp,-4
81121a40:	df000015 	stw	fp,0(sp)
81121a44:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81121a48:	0001883a 	nop
81121a4c:	e037883a 	mov	sp,fp
81121a50:	df000017 	ldw	fp,0(sp)
81121a54:	dec00104 	addi	sp,sp,4
81121a58:	f800283a 	ret

81121a5c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
81121a5c:	defffc04 	addi	sp,sp,-16
81121a60:	df000315 	stw	fp,12(sp)
81121a64:	df000304 	addi	fp,sp,12
81121a68:	e13ffd15 	stw	r4,-12(fp)
81121a6c:	e17ffe15 	stw	r5,-8(fp)
81121a70:	e1bfff15 	stw	r6,-4(fp)
  return len;
81121a74:	e0bfff17 	ldw	r2,-4(fp)
}
81121a78:	e037883a 	mov	sp,fp
81121a7c:	df000017 	ldw	fp,0(sp)
81121a80:	dec00104 	addi	sp,sp,4
81121a84:	f800283a 	ret

81121a88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81121a88:	defffe04 	addi	sp,sp,-8
81121a8c:	dfc00115 	stw	ra,4(sp)
81121a90:	df000015 	stw	fp,0(sp)
81121a94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81121a98:	d0a01517 	ldw	r2,-32684(gp)
81121a9c:	10000326 	beq	r2,zero,81121aac <alt_get_errno+0x24>
81121aa0:	d0a01517 	ldw	r2,-32684(gp)
81121aa4:	103ee83a 	callr	r2
81121aa8:	00000106 	br	81121ab0 <alt_get_errno+0x28>
81121aac:	d0a06804 	addi	r2,gp,-32352
}
81121ab0:	e037883a 	mov	sp,fp
81121ab4:	dfc00117 	ldw	ra,4(sp)
81121ab8:	df000017 	ldw	fp,0(sp)
81121abc:	dec00204 	addi	sp,sp,8
81121ac0:	f800283a 	ret

81121ac4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81121ac4:	defffb04 	addi	sp,sp,-20
81121ac8:	dfc00415 	stw	ra,16(sp)
81121acc:	df000315 	stw	fp,12(sp)
81121ad0:	df000304 	addi	fp,sp,12
81121ad4:	e13ffe15 	stw	r4,-8(fp)
81121ad8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81121adc:	e0bffe17 	ldw	r2,-8(fp)
81121ae0:	10000616 	blt	r2,zero,81121afc <fstat+0x38>
81121ae4:	e0bffe17 	ldw	r2,-8(fp)
81121ae8:	10c00324 	muli	r3,r2,12
81121aec:	00a04534 	movhi	r2,33044
81121af0:	10a16604 	addi	r2,r2,-31336
81121af4:	1885883a 	add	r2,r3,r2
81121af8:	00000106 	br	81121b00 <fstat+0x3c>
81121afc:	0005883a 	mov	r2,zero
81121b00:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81121b04:	e0bffd17 	ldw	r2,-12(fp)
81121b08:	10001026 	beq	r2,zero,81121b4c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81121b0c:	e0bffd17 	ldw	r2,-12(fp)
81121b10:	10800017 	ldw	r2,0(r2)
81121b14:	10800817 	ldw	r2,32(r2)
81121b18:	10000726 	beq	r2,zero,81121b38 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
81121b1c:	e0bffd17 	ldw	r2,-12(fp)
81121b20:	10800017 	ldw	r2,0(r2)
81121b24:	10800817 	ldw	r2,32(r2)
81121b28:	e17fff17 	ldw	r5,-4(fp)
81121b2c:	e13ffd17 	ldw	r4,-12(fp)
81121b30:	103ee83a 	callr	r2
81121b34:	00000a06 	br	81121b60 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
81121b38:	e0bfff17 	ldw	r2,-4(fp)
81121b3c:	00c80004 	movi	r3,8192
81121b40:	10c00115 	stw	r3,4(r2)
      return 0;
81121b44:	0005883a 	mov	r2,zero
81121b48:	00000506 	br	81121b60 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81121b4c:	1121a880 	call	81121a88 <alt_get_errno>
81121b50:	1007883a 	mov	r3,r2
81121b54:	00801444 	movi	r2,81
81121b58:	18800015 	stw	r2,0(r3)
    return -1;
81121b5c:	00bfffc4 	movi	r2,-1
  }
}
81121b60:	e037883a 	mov	sp,fp
81121b64:	dfc00117 	ldw	ra,4(sp)
81121b68:	df000017 	ldw	fp,0(sp)
81121b6c:	dec00204 	addi	sp,sp,8
81121b70:	f800283a 	ret

81121b74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81121b74:	defffe04 	addi	sp,sp,-8
81121b78:	dfc00115 	stw	ra,4(sp)
81121b7c:	df000015 	stw	fp,0(sp)
81121b80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81121b84:	d0a01517 	ldw	r2,-32684(gp)
81121b88:	10000326 	beq	r2,zero,81121b98 <alt_get_errno+0x24>
81121b8c:	d0a01517 	ldw	r2,-32684(gp)
81121b90:	103ee83a 	callr	r2
81121b94:	00000106 	br	81121b9c <alt_get_errno+0x28>
81121b98:	d0a06804 	addi	r2,gp,-32352
}
81121b9c:	e037883a 	mov	sp,fp
81121ba0:	dfc00117 	ldw	ra,4(sp)
81121ba4:	df000017 	ldw	fp,0(sp)
81121ba8:	dec00204 	addi	sp,sp,8
81121bac:	f800283a 	ret

81121bb0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
81121bb0:	deffed04 	addi	sp,sp,-76
81121bb4:	dfc01215 	stw	ra,72(sp)
81121bb8:	df001115 	stw	fp,68(sp)
81121bbc:	df001104 	addi	fp,sp,68
81121bc0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81121bc4:	e0bfff17 	ldw	r2,-4(fp)
81121bc8:	10000616 	blt	r2,zero,81121be4 <isatty+0x34>
81121bcc:	e0bfff17 	ldw	r2,-4(fp)
81121bd0:	10c00324 	muli	r3,r2,12
81121bd4:	00a04534 	movhi	r2,33044
81121bd8:	10a16604 	addi	r2,r2,-31336
81121bdc:	1885883a 	add	r2,r3,r2
81121be0:	00000106 	br	81121be8 <isatty+0x38>
81121be4:	0005883a 	mov	r2,zero
81121be8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
81121bec:	e0bfef17 	ldw	r2,-68(fp)
81121bf0:	10000e26 	beq	r2,zero,81121c2c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81121bf4:	e0bfef17 	ldw	r2,-68(fp)
81121bf8:	10800017 	ldw	r2,0(r2)
81121bfc:	10800817 	ldw	r2,32(r2)
81121c00:	1000021e 	bne	r2,zero,81121c0c <isatty+0x5c>
    {
      return 1;
81121c04:	00800044 	movi	r2,1
81121c08:	00000d06 	br	81121c40 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81121c0c:	e0bff004 	addi	r2,fp,-64
81121c10:	100b883a 	mov	r5,r2
81121c14:	e13fff17 	ldw	r4,-4(fp)
81121c18:	1121ac40 	call	81121ac4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81121c1c:	e0bff117 	ldw	r2,-60(fp)
81121c20:	10880020 	cmpeqi	r2,r2,8192
81121c24:	10803fcc 	andi	r2,r2,255
81121c28:	00000506 	br	81121c40 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81121c2c:	1121b740 	call	81121b74 <alt_get_errno>
81121c30:	1007883a 	mov	r3,r2
81121c34:	00801444 	movi	r2,81
81121c38:	18800015 	stw	r2,0(r3)
    return 0;
81121c3c:	0005883a 	mov	r2,zero
  }
}
81121c40:	e037883a 	mov	sp,fp
81121c44:	dfc00117 	ldw	ra,4(sp)
81121c48:	df000017 	ldw	fp,0(sp)
81121c4c:	dec00204 	addi	sp,sp,8
81121c50:	f800283a 	ret

81121c54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81121c54:	defffe04 	addi	sp,sp,-8
81121c58:	dfc00115 	stw	ra,4(sp)
81121c5c:	df000015 	stw	fp,0(sp)
81121c60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81121c64:	d0a01517 	ldw	r2,-32684(gp)
81121c68:	10000326 	beq	r2,zero,81121c78 <alt_get_errno+0x24>
81121c6c:	d0a01517 	ldw	r2,-32684(gp)
81121c70:	103ee83a 	callr	r2
81121c74:	00000106 	br	81121c7c <alt_get_errno+0x28>
81121c78:	d0a06804 	addi	r2,gp,-32352
}
81121c7c:	e037883a 	mov	sp,fp
81121c80:	dfc00117 	ldw	ra,4(sp)
81121c84:	df000017 	ldw	fp,0(sp)
81121c88:	dec00204 	addi	sp,sp,8
81121c8c:	f800283a 	ret

81121c90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81121c90:	defff904 	addi	sp,sp,-28
81121c94:	dfc00615 	stw	ra,24(sp)
81121c98:	df000515 	stw	fp,20(sp)
81121c9c:	df000504 	addi	fp,sp,20
81121ca0:	e13ffd15 	stw	r4,-12(fp)
81121ca4:	e17ffe15 	stw	r5,-8(fp)
81121ca8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81121cac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81121cb0:	e0bffd17 	ldw	r2,-12(fp)
81121cb4:	10000616 	blt	r2,zero,81121cd0 <lseek+0x40>
81121cb8:	e0bffd17 	ldw	r2,-12(fp)
81121cbc:	10c00324 	muli	r3,r2,12
81121cc0:	00a04534 	movhi	r2,33044
81121cc4:	10a16604 	addi	r2,r2,-31336
81121cc8:	1885883a 	add	r2,r3,r2
81121ccc:	00000106 	br	81121cd4 <lseek+0x44>
81121cd0:	0005883a 	mov	r2,zero
81121cd4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81121cd8:	e0bffc17 	ldw	r2,-16(fp)
81121cdc:	10001026 	beq	r2,zero,81121d20 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81121ce0:	e0bffc17 	ldw	r2,-16(fp)
81121ce4:	10800017 	ldw	r2,0(r2)
81121ce8:	10800717 	ldw	r2,28(r2)
81121cec:	10000926 	beq	r2,zero,81121d14 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81121cf0:	e0bffc17 	ldw	r2,-16(fp)
81121cf4:	10800017 	ldw	r2,0(r2)
81121cf8:	10800717 	ldw	r2,28(r2)
81121cfc:	e1bfff17 	ldw	r6,-4(fp)
81121d00:	e17ffe17 	ldw	r5,-8(fp)
81121d04:	e13ffc17 	ldw	r4,-16(fp)
81121d08:	103ee83a 	callr	r2
81121d0c:	e0bffb15 	stw	r2,-20(fp)
81121d10:	00000506 	br	81121d28 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81121d14:	00bfde84 	movi	r2,-134
81121d18:	e0bffb15 	stw	r2,-20(fp)
81121d1c:	00000206 	br	81121d28 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
81121d20:	00bfebc4 	movi	r2,-81
81121d24:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81121d28:	e0bffb17 	ldw	r2,-20(fp)
81121d2c:	1000070e 	bge	r2,zero,81121d4c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
81121d30:	1121c540 	call	81121c54 <alt_get_errno>
81121d34:	1007883a 	mov	r3,r2
81121d38:	e0bffb17 	ldw	r2,-20(fp)
81121d3c:	0085c83a 	sub	r2,zero,r2
81121d40:	18800015 	stw	r2,0(r3)
    rc = -1;
81121d44:	00bfffc4 	movi	r2,-1
81121d48:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81121d4c:	e0bffb17 	ldw	r2,-20(fp)
}
81121d50:	e037883a 	mov	sp,fp
81121d54:	dfc00117 	ldw	ra,4(sp)
81121d58:	df000017 	ldw	fp,0(sp)
81121d5c:	dec00204 	addi	sp,sp,8
81121d60:	f800283a 	ret

81121d64 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81121d64:	defff904 	addi	sp,sp,-28
81121d68:	dfc00615 	stw	ra,24(sp)
81121d6c:	df000515 	stw	fp,20(sp)
81121d70:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81121d74:	0009883a 	mov	r4,zero
81121d78:	112b3040 	call	8112b304 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81121d7c:	112324c0 	call	8112324c <OSInit>
81121d80:	01000044 	movi	r4,1
81121d84:	1128cc40 	call	81128cc4 <OSSemCreate>
81121d88:	d0a07615 	stw	r2,-32296(gp)
81121d8c:	01000044 	movi	r4,1
81121d90:	1128cc40 	call	81128cc4 <OSSemCreate>
81121d94:	d0a07815 	stw	r2,-32288(gp)
81121d98:	d0a06f04 	addi	r2,gp,-32324
81121d9c:	e0bffc15 	stw	r2,-16(fp)
81121da0:	00800044 	movi	r2,1
81121da4:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81121da8:	e0bffd0b 	ldhu	r2,-12(fp)
81121dac:	1009883a 	mov	r4,r2
81121db0:	1128cc40 	call	81128cc4 <OSSemCreate>
81121db4:	1007883a 	mov	r3,r2
81121db8:	e0bffc17 	ldw	r2,-16(fp)
81121dbc:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81121dc0:	112b33c0 	call	8112b33c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81121dc4:	01a044f4 	movhi	r6,33043
81121dc8:	319e3f04 	addi	r6,r6,30972
81121dcc:	016044f4 	movhi	r5,33043
81121dd0:	295e4404 	addi	r5,r5,30992
81121dd4:	012044f4 	movhi	r4,33043
81121dd8:	211e4404 	addi	r4,r4,30992
81121ddc:	11347e40 	call	811347e4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
81121de0:	113414c0 	call	8113414c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
81121de4:	012044f4 	movhi	r4,33043
81121de8:	21106b04 	addi	r4,r4,16812
81121dec:	1134ee00 	call	81134ee0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81121df0:	d0a07017 	ldw	r2,-32320(gp)
81121df4:	d0e07117 	ldw	r3,-32316(gp)
81121df8:	d1207217 	ldw	r4,-32312(gp)
81121dfc:	200d883a 	mov	r6,r4
81121e00:	180b883a 	mov	r5,r3
81121e04:	1009883a 	mov	r4,r2
81121e08:	110888c0 	call	8110888c <main>
81121e0c:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
81121e10:	01000044 	movi	r4,1
81121e14:	112196c0 	call	8112196c <close>
  exit (result);
81121e18:	e13ffb17 	ldw	r4,-20(fp)
81121e1c:	1134ef40 	call	81134ef4 <exit>

81121e20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81121e20:	defffe04 	addi	sp,sp,-8
81121e24:	dfc00115 	stw	ra,4(sp)
81121e28:	df000015 	stw	fp,0(sp)
81121e2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81121e30:	d0a01517 	ldw	r2,-32684(gp)
81121e34:	10000326 	beq	r2,zero,81121e44 <alt_get_errno+0x24>
81121e38:	d0a01517 	ldw	r2,-32684(gp)
81121e3c:	103ee83a 	callr	r2
81121e40:	00000106 	br	81121e48 <alt_get_errno+0x28>
81121e44:	d0a06804 	addi	r2,gp,-32352
}
81121e48:	e037883a 	mov	sp,fp
81121e4c:	dfc00117 	ldw	ra,4(sp)
81121e50:	df000017 	ldw	fp,0(sp)
81121e54:	dec00204 	addi	sp,sp,8
81121e58:	f800283a 	ret

81121e5c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81121e5c:	defffd04 	addi	sp,sp,-12
81121e60:	df000215 	stw	fp,8(sp)
81121e64:	df000204 	addi	fp,sp,8
81121e68:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81121e6c:	e0bfff17 	ldw	r2,-4(fp)
81121e70:	10800217 	ldw	r2,8(r2)
81121e74:	10d00034 	orhi	r3,r2,16384
81121e78:	e0bfff17 	ldw	r2,-4(fp)
81121e7c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81121e80:	e03ffe15 	stw	zero,-8(fp)
81121e84:	00001d06 	br	81121efc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81121e88:	00a04534 	movhi	r2,33044
81121e8c:	10a16604 	addi	r2,r2,-31336
81121e90:	e0fffe17 	ldw	r3,-8(fp)
81121e94:	18c00324 	muli	r3,r3,12
81121e98:	10c5883a 	add	r2,r2,r3
81121e9c:	10c00017 	ldw	r3,0(r2)
81121ea0:	e0bfff17 	ldw	r2,-4(fp)
81121ea4:	10800017 	ldw	r2,0(r2)
81121ea8:	1880111e 	bne	r3,r2,81121ef0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81121eac:	00a04534 	movhi	r2,33044
81121eb0:	10a16604 	addi	r2,r2,-31336
81121eb4:	e0fffe17 	ldw	r3,-8(fp)
81121eb8:	18c00324 	muli	r3,r3,12
81121ebc:	10c5883a 	add	r2,r2,r3
81121ec0:	10800204 	addi	r2,r2,8
81121ec4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81121ec8:	1000090e 	bge	r2,zero,81121ef0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81121ecc:	e0bffe17 	ldw	r2,-8(fp)
81121ed0:	10c00324 	muli	r3,r2,12
81121ed4:	00a04534 	movhi	r2,33044
81121ed8:	10a16604 	addi	r2,r2,-31336
81121edc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81121ee0:	e0bfff17 	ldw	r2,-4(fp)
81121ee4:	18800226 	beq	r3,r2,81121ef0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81121ee8:	00bffcc4 	movi	r2,-13
81121eec:	00000806 	br	81121f10 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81121ef0:	e0bffe17 	ldw	r2,-8(fp)
81121ef4:	10800044 	addi	r2,r2,1
81121ef8:	e0bffe15 	stw	r2,-8(fp)
81121efc:	d0a01417 	ldw	r2,-32688(gp)
81121f00:	1007883a 	mov	r3,r2
81121f04:	e0bffe17 	ldw	r2,-8(fp)
81121f08:	18bfdf2e 	bgeu	r3,r2,81121e88 <__reset+0xfb101e88>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81121f0c:	0005883a 	mov	r2,zero
}
81121f10:	e037883a 	mov	sp,fp
81121f14:	df000017 	ldw	fp,0(sp)
81121f18:	dec00104 	addi	sp,sp,4
81121f1c:	f800283a 	ret

81121f20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81121f20:	defff604 	addi	sp,sp,-40
81121f24:	dfc00915 	stw	ra,36(sp)
81121f28:	df000815 	stw	fp,32(sp)
81121f2c:	df000804 	addi	fp,sp,32
81121f30:	e13ffd15 	stw	r4,-12(fp)
81121f34:	e17ffe15 	stw	r5,-8(fp)
81121f38:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81121f3c:	00bfffc4 	movi	r2,-1
81121f40:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81121f44:	00bffb44 	movi	r2,-19
81121f48:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81121f4c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81121f50:	d1601204 	addi	r5,gp,-32696
81121f54:	e13ffd17 	ldw	r4,-12(fp)
81121f58:	113420c0 	call	8113420c <alt_find_dev>
81121f5c:	e0bff815 	stw	r2,-32(fp)
81121f60:	e0bff817 	ldw	r2,-32(fp)
81121f64:	1000051e 	bne	r2,zero,81121f7c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81121f68:	e13ffd17 	ldw	r4,-12(fp)
81121f6c:	113429c0 	call	8113429c <alt_find_file>
81121f70:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81121f74:	00800044 	movi	r2,1
81121f78:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81121f7c:	e0bff817 	ldw	r2,-32(fp)
81121f80:	10002926 	beq	r2,zero,81122028 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
81121f84:	e13ff817 	ldw	r4,-32(fp)
81121f88:	11343a40 	call	811343a4 <alt_get_fd>
81121f8c:	e0bff915 	stw	r2,-28(fp)
81121f90:	e0bff917 	ldw	r2,-28(fp)
81121f94:	1000030e 	bge	r2,zero,81121fa4 <open+0x84>
    {
      status = index;
81121f98:	e0bff917 	ldw	r2,-28(fp)
81121f9c:	e0bffa15 	stw	r2,-24(fp)
81121fa0:	00002306 	br	81122030 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
81121fa4:	e0bff917 	ldw	r2,-28(fp)
81121fa8:	10c00324 	muli	r3,r2,12
81121fac:	00a04534 	movhi	r2,33044
81121fb0:	10a16604 	addi	r2,r2,-31336
81121fb4:	1885883a 	add	r2,r3,r2
81121fb8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81121fbc:	e0fffe17 	ldw	r3,-8(fp)
81121fc0:	00900034 	movhi	r2,16384
81121fc4:	10bfffc4 	addi	r2,r2,-1
81121fc8:	1886703a 	and	r3,r3,r2
81121fcc:	e0bffc17 	ldw	r2,-16(fp)
81121fd0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81121fd4:	e0bffb17 	ldw	r2,-20(fp)
81121fd8:	1000051e 	bne	r2,zero,81121ff0 <open+0xd0>
81121fdc:	e13ffc17 	ldw	r4,-16(fp)
81121fe0:	1121e5c0 	call	81121e5c <alt_file_locked>
81121fe4:	e0bffa15 	stw	r2,-24(fp)
81121fe8:	e0bffa17 	ldw	r2,-24(fp)
81121fec:	10001016 	blt	r2,zero,81122030 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
81121ff0:	e0bff817 	ldw	r2,-32(fp)
81121ff4:	10800317 	ldw	r2,12(r2)
81121ff8:	10000826 	beq	r2,zero,8112201c <open+0xfc>
81121ffc:	e0bff817 	ldw	r2,-32(fp)
81122000:	10800317 	ldw	r2,12(r2)
81122004:	e1ffff17 	ldw	r7,-4(fp)
81122008:	e1bffe17 	ldw	r6,-8(fp)
8112200c:	e17ffd17 	ldw	r5,-12(fp)
81122010:	e13ffc17 	ldw	r4,-16(fp)
81122014:	103ee83a 	callr	r2
81122018:	00000106 	br	81122020 <open+0x100>
8112201c:	0005883a 	mov	r2,zero
81122020:	e0bffa15 	stw	r2,-24(fp)
81122024:	00000206 	br	81122030 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
81122028:	00bffb44 	movi	r2,-19
8112202c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81122030:	e0bffa17 	ldw	r2,-24(fp)
81122034:	1000090e 	bge	r2,zero,8112205c <open+0x13c>
  {
    alt_release_fd (index);  
81122038:	e13ff917 	ldw	r4,-28(fp)
8112203c:	11221ac0 	call	811221ac <alt_release_fd>
    ALT_ERRNO = -status;
81122040:	1121e200 	call	81121e20 <alt_get_errno>
81122044:	1007883a 	mov	r3,r2
81122048:	e0bffa17 	ldw	r2,-24(fp)
8112204c:	0085c83a 	sub	r2,zero,r2
81122050:	18800015 	stw	r2,0(r3)
    return -1;
81122054:	00bfffc4 	movi	r2,-1
81122058:	00000106 	br	81122060 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
8112205c:	e0bff917 	ldw	r2,-28(fp)
}
81122060:	e037883a 	mov	sp,fp
81122064:	dfc00117 	ldw	ra,4(sp)
81122068:	df000017 	ldw	fp,0(sp)
8112206c:	dec00204 	addi	sp,sp,8
81122070:	f800283a 	ret

81122074 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81122074:	defffe04 	addi	sp,sp,-8
81122078:	dfc00115 	stw	ra,4(sp)
8112207c:	df000015 	stw	fp,0(sp)
81122080:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81122084:	d0a01517 	ldw	r2,-32684(gp)
81122088:	10000326 	beq	r2,zero,81122098 <alt_get_errno+0x24>
8112208c:	d0a01517 	ldw	r2,-32684(gp)
81122090:	103ee83a 	callr	r2
81122094:	00000106 	br	8112209c <alt_get_errno+0x28>
81122098:	d0a06804 	addi	r2,gp,-32352
}
8112209c:	e037883a 	mov	sp,fp
811220a0:	dfc00117 	ldw	ra,4(sp)
811220a4:	df000017 	ldw	fp,0(sp)
811220a8:	dec00204 	addi	sp,sp,8
811220ac:	f800283a 	ret

811220b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
811220b0:	defff904 	addi	sp,sp,-28
811220b4:	dfc00615 	stw	ra,24(sp)
811220b8:	df000515 	stw	fp,20(sp)
811220bc:	df000504 	addi	fp,sp,20
811220c0:	e13ffd15 	stw	r4,-12(fp)
811220c4:	e17ffe15 	stw	r5,-8(fp)
811220c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811220cc:	e0bffd17 	ldw	r2,-12(fp)
811220d0:	10000616 	blt	r2,zero,811220ec <read+0x3c>
811220d4:	e0bffd17 	ldw	r2,-12(fp)
811220d8:	10c00324 	muli	r3,r2,12
811220dc:	00a04534 	movhi	r2,33044
811220e0:	10a16604 	addi	r2,r2,-31336
811220e4:	1885883a 	add	r2,r3,r2
811220e8:	00000106 	br	811220f0 <read+0x40>
811220ec:	0005883a 	mov	r2,zero
811220f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811220f4:	e0bffb17 	ldw	r2,-20(fp)
811220f8:	10002226 	beq	r2,zero,81122184 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
811220fc:	e0bffb17 	ldw	r2,-20(fp)
81122100:	10800217 	ldw	r2,8(r2)
81122104:	108000cc 	andi	r2,r2,3
81122108:	10800060 	cmpeqi	r2,r2,1
8112210c:	1000181e 	bne	r2,zero,81122170 <read+0xc0>
        (fd->dev->read))
81122110:	e0bffb17 	ldw	r2,-20(fp)
81122114:	10800017 	ldw	r2,0(r2)
81122118:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
8112211c:	10001426 	beq	r2,zero,81122170 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81122120:	e0bffb17 	ldw	r2,-20(fp)
81122124:	10800017 	ldw	r2,0(r2)
81122128:	10800517 	ldw	r2,20(r2)
8112212c:	e0ffff17 	ldw	r3,-4(fp)
81122130:	180d883a 	mov	r6,r3
81122134:	e17ffe17 	ldw	r5,-8(fp)
81122138:	e13ffb17 	ldw	r4,-20(fp)
8112213c:	103ee83a 	callr	r2
81122140:	e0bffc15 	stw	r2,-16(fp)
81122144:	e0bffc17 	ldw	r2,-16(fp)
81122148:	1000070e 	bge	r2,zero,81122168 <read+0xb8>
        {
          ALT_ERRNO = -rval;
8112214c:	11220740 	call	81122074 <alt_get_errno>
81122150:	1007883a 	mov	r3,r2
81122154:	e0bffc17 	ldw	r2,-16(fp)
81122158:	0085c83a 	sub	r2,zero,r2
8112215c:	18800015 	stw	r2,0(r3)
          return -1;
81122160:	00bfffc4 	movi	r2,-1
81122164:	00000c06 	br	81122198 <read+0xe8>
        }
        return rval;
81122168:	e0bffc17 	ldw	r2,-16(fp)
8112216c:	00000a06 	br	81122198 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
81122170:	11220740 	call	81122074 <alt_get_errno>
81122174:	1007883a 	mov	r3,r2
81122178:	00800344 	movi	r2,13
8112217c:	18800015 	stw	r2,0(r3)
81122180:	00000406 	br	81122194 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81122184:	11220740 	call	81122074 <alt_get_errno>
81122188:	1007883a 	mov	r3,r2
8112218c:	00801444 	movi	r2,81
81122190:	18800015 	stw	r2,0(r3)
  }
  return -1;
81122194:	00bfffc4 	movi	r2,-1
}
81122198:	e037883a 	mov	sp,fp
8112219c:	dfc00117 	ldw	ra,4(sp)
811221a0:	df000017 	ldw	fp,0(sp)
811221a4:	dec00204 	addi	sp,sp,8
811221a8:	f800283a 	ret

811221ac <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
811221ac:	defffe04 	addi	sp,sp,-8
811221b0:	df000115 	stw	fp,4(sp)
811221b4:	df000104 	addi	fp,sp,4
811221b8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
811221bc:	e0bfff17 	ldw	r2,-4(fp)
811221c0:	108000d0 	cmplti	r2,r2,3
811221c4:	10000d1e 	bne	r2,zero,811221fc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
811221c8:	00a04534 	movhi	r2,33044
811221cc:	10a16604 	addi	r2,r2,-31336
811221d0:	e0ffff17 	ldw	r3,-4(fp)
811221d4:	18c00324 	muli	r3,r3,12
811221d8:	10c5883a 	add	r2,r2,r3
811221dc:	10800204 	addi	r2,r2,8
811221e0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
811221e4:	00a04534 	movhi	r2,33044
811221e8:	10a16604 	addi	r2,r2,-31336
811221ec:	e0ffff17 	ldw	r3,-4(fp)
811221f0:	18c00324 	muli	r3,r3,12
811221f4:	10c5883a 	add	r2,r2,r3
811221f8:	10000015 	stw	zero,0(r2)
  }
}
811221fc:	0001883a 	nop
81122200:	e037883a 	mov	sp,fp
81122204:	df000017 	ldw	fp,0(sp)
81122208:	dec00104 	addi	sp,sp,4
8112220c:	f800283a 	ret

81122210 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81122210:	defff904 	addi	sp,sp,-28
81122214:	df000615 	stw	fp,24(sp)
81122218:	df000604 	addi	fp,sp,24
8112221c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122220:	0005303a 	rdctl	r2,status
81122224:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122228:	e0fffe17 	ldw	r3,-8(fp)
8112222c:	00bfff84 	movi	r2,-2
81122230:	1884703a 	and	r2,r3,r2
81122234:	1001703a 	wrctl	status,r2
  
  return context;
81122238:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
8112223c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
81122240:	d0a01617 	ldw	r2,-32680(gp)
81122244:	10c000c4 	addi	r3,r2,3
81122248:	00bfff04 	movi	r2,-4
8112224c:	1884703a 	and	r2,r3,r2
81122250:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
81122254:	d0e01617 	ldw	r3,-32680(gp)
81122258:	e0bfff17 	ldw	r2,-4(fp)
8112225c:	1887883a 	add	r3,r3,r2
81122260:	00a04834 	movhi	r2,33056
81122264:	10a80004 	addi	r2,r2,-24576
81122268:	10c0062e 	bgeu	r2,r3,81122284 <sbrk+0x74>
8112226c:	e0bffb17 	ldw	r2,-20(fp)
81122270:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122274:	e0bffa17 	ldw	r2,-24(fp)
81122278:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
8112227c:	00bfffc4 	movi	r2,-1
81122280:	00000b06 	br	811222b0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
81122284:	d0a01617 	ldw	r2,-32680(gp)
81122288:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
8112228c:	d0e01617 	ldw	r3,-32680(gp)
81122290:	e0bfff17 	ldw	r2,-4(fp)
81122294:	1885883a 	add	r2,r3,r2
81122298:	d0a01615 	stw	r2,-32680(gp)
8112229c:	e0bffb17 	ldw	r2,-20(fp)
811222a0:	e0bffc15 	stw	r2,-16(fp)
811222a4:	e0bffc17 	ldw	r2,-16(fp)
811222a8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
811222ac:	e0bffd17 	ldw	r2,-12(fp)
} 
811222b0:	e037883a 	mov	sp,fp
811222b4:	df000017 	ldw	fp,0(sp)
811222b8:	dec00104 	addi	sp,sp,4
811222bc:	f800283a 	ret

811222c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
811222c0:	defffa04 	addi	sp,sp,-24
811222c4:	df000515 	stw	fp,20(sp)
811222c8:	df000504 	addi	fp,sp,20
811222cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811222d0:	0005303a 	rdctl	r2,status
811222d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811222d8:	e0fffc17 	ldw	r3,-16(fp)
811222dc:	00bfff84 	movi	r2,-2
811222e0:	1884703a 	and	r2,r3,r2
811222e4:	1001703a 	wrctl	status,r2
  
  return context;
811222e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
811222ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
811222f0:	e0bfff17 	ldw	r2,-4(fp)
811222f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
811222f8:	e0bffd17 	ldw	r2,-12(fp)
811222fc:	10800017 	ldw	r2,0(r2)
81122300:	e0fffd17 	ldw	r3,-12(fp)
81122304:	18c00117 	ldw	r3,4(r3)
81122308:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
8112230c:	e0bffd17 	ldw	r2,-12(fp)
81122310:	10800117 	ldw	r2,4(r2)
81122314:	e0fffd17 	ldw	r3,-12(fp)
81122318:	18c00017 	ldw	r3,0(r3)
8112231c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
81122320:	e0bffd17 	ldw	r2,-12(fp)
81122324:	e0fffd17 	ldw	r3,-12(fp)
81122328:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
8112232c:	e0bffd17 	ldw	r2,-12(fp)
81122330:	e0fffd17 	ldw	r3,-12(fp)
81122334:	10c00015 	stw	r3,0(r2)
81122338:	e0bffb17 	ldw	r2,-20(fp)
8112233c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122340:	e0bffe17 	ldw	r2,-8(fp)
81122344:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
81122348:	0001883a 	nop
8112234c:	e037883a 	mov	sp,fp
81122350:	df000017 	ldw	fp,0(sp)
81122354:	dec00104 	addi	sp,sp,4
81122358:	f800283a 	ret

8112235c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
8112235c:	defffb04 	addi	sp,sp,-20
81122360:	dfc00415 	stw	ra,16(sp)
81122364:	df000315 	stw	fp,12(sp)
81122368:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8112236c:	d0a01717 	ldw	r2,-32676(gp)
81122370:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81122374:	d0a07417 	ldw	r2,-32304(gp)
81122378:	10800044 	addi	r2,r2,1
8112237c:	d0a07415 	stw	r2,-32304(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81122380:	00002e06 	br	8112243c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
81122384:	e0bffd17 	ldw	r2,-12(fp)
81122388:	10800017 	ldw	r2,0(r2)
8112238c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81122390:	e0bffd17 	ldw	r2,-12(fp)
81122394:	10800403 	ldbu	r2,16(r2)
81122398:	10803fcc 	andi	r2,r2,255
8112239c:	10000426 	beq	r2,zero,811223b0 <alt_tick+0x54>
811223a0:	d0a07417 	ldw	r2,-32304(gp)
811223a4:	1000021e 	bne	r2,zero,811223b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
811223a8:	e0bffd17 	ldw	r2,-12(fp)
811223ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
811223b0:	e0bffd17 	ldw	r2,-12(fp)
811223b4:	10800217 	ldw	r2,8(r2)
811223b8:	d0e07417 	ldw	r3,-32304(gp)
811223bc:	18801d36 	bltu	r3,r2,81122434 <alt_tick+0xd8>
811223c0:	e0bffd17 	ldw	r2,-12(fp)
811223c4:	10800403 	ldbu	r2,16(r2)
811223c8:	10803fcc 	andi	r2,r2,255
811223cc:	1000191e 	bne	r2,zero,81122434 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
811223d0:	e0bffd17 	ldw	r2,-12(fp)
811223d4:	10800317 	ldw	r2,12(r2)
811223d8:	e0fffd17 	ldw	r3,-12(fp)
811223dc:	18c00517 	ldw	r3,20(r3)
811223e0:	1809883a 	mov	r4,r3
811223e4:	103ee83a 	callr	r2
811223e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
811223ec:	e0bfff17 	ldw	r2,-4(fp)
811223f0:	1000031e 	bne	r2,zero,81122400 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
811223f4:	e13ffd17 	ldw	r4,-12(fp)
811223f8:	11222c00 	call	811222c0 <alt_alarm_stop>
811223fc:	00000d06 	br	81122434 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
81122400:	e0bffd17 	ldw	r2,-12(fp)
81122404:	10c00217 	ldw	r3,8(r2)
81122408:	e0bfff17 	ldw	r2,-4(fp)
8112240c:	1887883a 	add	r3,r3,r2
81122410:	e0bffd17 	ldw	r2,-12(fp)
81122414:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
81122418:	e0bffd17 	ldw	r2,-12(fp)
8112241c:	10c00217 	ldw	r3,8(r2)
81122420:	d0a07417 	ldw	r2,-32304(gp)
81122424:	1880032e 	bgeu	r3,r2,81122434 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
81122428:	e0bffd17 	ldw	r2,-12(fp)
8112242c:	00c00044 	movi	r3,1
81122430:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
81122434:	e0bffe17 	ldw	r2,-8(fp)
81122438:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
8112243c:	e0fffd17 	ldw	r3,-12(fp)
81122440:	d0a01704 	addi	r2,gp,-32676
81122444:	18bfcf1e 	bne	r3,r2,81122384 <__reset+0xfb102384>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
81122448:	11236700 	call	81123670 <OSTimeTick>
}
8112244c:	0001883a 	nop
81122450:	e037883a 	mov	sp,fp
81122454:	dfc00117 	ldw	ra,4(sp)
81122458:	df000017 	ldw	fp,0(sp)
8112245c:	dec00204 	addi	sp,sp,8
81122460:	f800283a 	ret

81122464 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81122464:	defffb04 	addi	sp,sp,-20
81122468:	dfc00415 	stw	ra,16(sp)
8112246c:	df000315 	stw	fp,12(sp)
81122470:	df000304 	addi	fp,sp,12
81122474:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81122478:	d0a07943 	ldbu	r2,-32283(gp)
8112247c:	10803fcc 	andi	r2,r2,255
81122480:	1000031e 	bne	r2,zero,81122490 <usleep+0x2c>
  {
    return alt_busy_sleep (us);
81122484:	e13fff17 	ldw	r4,-4(fp)
81122488:	1133f1c0 	call	81133f1c <alt_busy_sleep>
8112248c:	00003d06 	br	81122584 <usleep+0x120>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81122490:	d0a07317 	ldw	r2,-32308(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
81122494:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81122498:	e0ffff17 	ldw	r3,-4(fp)
8112249c:	0090c734 	movhi	r2,17180
811224a0:	10b7a0c4 	addi	r2,r2,-8573
811224a4:	1888383a 	mulxuu	r4,r3,r2
811224a8:	1885383a 	mul	r2,r3,r2
811224ac:	1013883a 	mov	r9,r2
811224b0:	2015883a 	mov	r10,r4
811224b4:	5006d4ba 	srli	r3,r10,18
811224b8:	e0bffe17 	ldw	r2,-8(fp)
811224bc:	1893383a 	mul	r9,r3,r2
811224c0:	e0ffff17 	ldw	r3,-4(fp)
811224c4:	0090c734 	movhi	r2,17180
811224c8:	10b7a0c4 	addi	r2,r2,-8573
811224cc:	1888383a 	mulxuu	r4,r3,r2
811224d0:	1885383a 	mul	r2,r3,r2
811224d4:	100f883a 	mov	r7,r2
811224d8:	2011883a 	mov	r8,r4
811224dc:	4004d4ba 	srli	r2,r8,18
811224e0:	010003f4 	movhi	r4,15
811224e4:	21109004 	addi	r4,r4,16960
811224e8:	1105383a 	mul	r2,r2,r4
811224ec:	1885c83a 	sub	r2,r3,r2
811224f0:	e0fffe17 	ldw	r3,-8(fp)
811224f4:	10c7383a 	mul	r3,r2,r3
811224f8:	0090c734 	movhi	r2,17180
811224fc:	10b7a0c4 	addi	r2,r2,-8573
81122500:	1888383a 	mulxuu	r4,r3,r2
81122504:	1885383a 	mul	r2,r3,r2
81122508:	100b883a 	mov	r5,r2
8112250c:	200d883a 	mov	r6,r4
81122510:	3004d4ba 	srli	r2,r6,18
81122514:	4885883a 	add	r2,r9,r2
81122518:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
8112251c:	00000706 	br	8112253c <usleep+0xd8>
  {
    OSTimeDly(0xffff);
81122520:	013fffd4 	movui	r4,65535
81122524:	112ade00 	call	8112ade0 <OSTimeDly>
    ticks -= 0xffff;
81122528:	e0fffd17 	ldw	r3,-12(fp)
8112252c:	00bffff4 	movhi	r2,65535
81122530:	10800044 	addi	r2,r2,1
81122534:	1885883a 	add	r2,r3,r2
81122538:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
8112253c:	e0bffd17 	ldw	r2,-12(fp)
81122540:	00ffffd4 	movui	r3,65535
81122544:	18bff636 	bltu	r3,r2,81122520 <__reset+0xfb102520>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
81122548:	e0bffd17 	ldw	r2,-12(fp)
8112254c:	10bfffcc 	andi	r2,r2,65535
81122550:	1009883a 	mov	r4,r2
81122554:	112ade00 	call	8112ade0 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
81122558:	008003f4 	movhi	r2,15
8112255c:	10909004 	addi	r2,r2,16960
81122560:	e0fffe17 	ldw	r3,-8(fp)
81122564:	10c7203a 	divu	r3,r2,r3
81122568:	e0bfff17 	ldw	r2,-4(fp)
8112256c:	10c9203a 	divu	r4,r2,r3
81122570:	20c7383a 	mul	r3,r4,r3
81122574:	10c5c83a 	sub	r2,r2,r3
81122578:	1009883a 	mov	r4,r2
8112257c:	1133f1c0 	call	81133f1c <alt_busy_sleep>

  return 0;  
81122580:	0005883a 	mov	r2,zero
}
81122584:	e037883a 	mov	sp,fp
81122588:	dfc00117 	ldw	ra,4(sp)
8112258c:	df000017 	ldw	fp,0(sp)
81122590:	dec00204 	addi	sp,sp,8
81122594:	f800283a 	ret

81122598 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81122598:	defffe04 	addi	sp,sp,-8
8112259c:	dfc00115 	stw	ra,4(sp)
811225a0:	df000015 	stw	fp,0(sp)
811225a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811225a8:	d0a01517 	ldw	r2,-32684(gp)
811225ac:	10000326 	beq	r2,zero,811225bc <alt_get_errno+0x24>
811225b0:	d0a01517 	ldw	r2,-32684(gp)
811225b4:	103ee83a 	callr	r2
811225b8:	00000106 	br	811225c0 <alt_get_errno+0x28>
811225bc:	d0a06804 	addi	r2,gp,-32352
}
811225c0:	e037883a 	mov	sp,fp
811225c4:	dfc00117 	ldw	ra,4(sp)
811225c8:	df000017 	ldw	fp,0(sp)
811225cc:	dec00204 	addi	sp,sp,8
811225d0:	f800283a 	ret

811225d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
811225d4:	defff904 	addi	sp,sp,-28
811225d8:	dfc00615 	stw	ra,24(sp)
811225dc:	df000515 	stw	fp,20(sp)
811225e0:	df000504 	addi	fp,sp,20
811225e4:	e13ffd15 	stw	r4,-12(fp)
811225e8:	e17ffe15 	stw	r5,-8(fp)
811225ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811225f0:	e0bffd17 	ldw	r2,-12(fp)
811225f4:	10000616 	blt	r2,zero,81122610 <write+0x3c>
811225f8:	e0bffd17 	ldw	r2,-12(fp)
811225fc:	10c00324 	muli	r3,r2,12
81122600:	00a04534 	movhi	r2,33044
81122604:	10a16604 	addi	r2,r2,-31336
81122608:	1885883a 	add	r2,r3,r2
8112260c:	00000106 	br	81122614 <write+0x40>
81122610:	0005883a 	mov	r2,zero
81122614:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81122618:	e0bffb17 	ldw	r2,-20(fp)
8112261c:	10002126 	beq	r2,zero,811226a4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
81122620:	e0bffb17 	ldw	r2,-20(fp)
81122624:	10800217 	ldw	r2,8(r2)
81122628:	108000cc 	andi	r2,r2,3
8112262c:	10001826 	beq	r2,zero,81122690 <write+0xbc>
81122630:	e0bffb17 	ldw	r2,-20(fp)
81122634:	10800017 	ldw	r2,0(r2)
81122638:	10800617 	ldw	r2,24(r2)
8112263c:	10001426 	beq	r2,zero,81122690 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81122640:	e0bffb17 	ldw	r2,-20(fp)
81122644:	10800017 	ldw	r2,0(r2)
81122648:	10800617 	ldw	r2,24(r2)
8112264c:	e0ffff17 	ldw	r3,-4(fp)
81122650:	180d883a 	mov	r6,r3
81122654:	e17ffe17 	ldw	r5,-8(fp)
81122658:	e13ffb17 	ldw	r4,-20(fp)
8112265c:	103ee83a 	callr	r2
81122660:	e0bffc15 	stw	r2,-16(fp)
81122664:	e0bffc17 	ldw	r2,-16(fp)
81122668:	1000070e 	bge	r2,zero,81122688 <write+0xb4>
      {
        ALT_ERRNO = -rval;
8112266c:	11225980 	call	81122598 <alt_get_errno>
81122670:	1007883a 	mov	r3,r2
81122674:	e0bffc17 	ldw	r2,-16(fp)
81122678:	0085c83a 	sub	r2,zero,r2
8112267c:	18800015 	stw	r2,0(r3)
        return -1;
81122680:	00bfffc4 	movi	r2,-1
81122684:	00000c06 	br	811226b8 <write+0xe4>
      }
      return rval;
81122688:	e0bffc17 	ldw	r2,-16(fp)
8112268c:	00000a06 	br	811226b8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
81122690:	11225980 	call	81122598 <alt_get_errno>
81122694:	1007883a 	mov	r3,r2
81122698:	00800344 	movi	r2,13
8112269c:	18800015 	stw	r2,0(r3)
811226a0:	00000406 	br	811226b4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
811226a4:	11225980 	call	81122598 <alt_get_errno>
811226a8:	1007883a 	mov	r3,r2
811226ac:	00801444 	movi	r2,81
811226b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
811226b4:	00bfffc4 	movi	r2,-1
}
811226b8:	e037883a 	mov	sp,fp
811226bc:	dfc00117 	ldw	ra,4(sp)
811226c0:	df000017 	ldw	fp,0(sp)
811226c4:	dec00204 	addi	sp,sp,8
811226c8:	f800283a 	ret

811226cc <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
811226cc:	deffde04 	addi	sp,sp,-136
811226d0:	dfc02115 	stw	ra,132(sp)
811226d4:	df002015 	stw	fp,128(sp)
811226d8:	df002004 	addi	fp,sp,128
811226dc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811226e0:	e0bfe104 	addi	r2,fp,-124
811226e4:	100b883a 	mov	r5,r2
811226e8:	01003fc4 	movi	r4,255
811226ec:	112ac4c0 	call	8112ac4c <OSTaskQuery>
811226f0:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
811226f4:	e0bffe03 	ldbu	r2,-8(fp)
811226f8:	10803fcc 	andi	r2,r2,255
811226fc:	10001e1e 	bne	r2,zero,81122778 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
81122700:	e0bfed83 	ldbu	r2,-74(fp)
81122704:	10803fcc 	andi	r2,r2,255
81122708:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
8112270c:	d0a07617 	ldw	r2,-32296(gp)
81122710:	e0fffc04 	addi	r3,fp,-16
81122714:	180b883a 	mov	r5,r3
81122718:	1009883a 	mov	r4,r2
8112271c:	11294640 	call	81129464 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
81122720:	e0bffd83 	ldbu	r2,-10(fp)
81122724:	10803fcc 	andi	r2,r2,255
81122728:	10000726 	beq	r2,zero,81122748 <__env_lock+0x7c>
8112272c:	d0a01917 	ldw	r2,-32668(gp)
81122730:	e0ffe017 	ldw	r3,-128(fp)
81122734:	1880041e 	bne	r3,r2,81122748 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
81122738:	d0a07517 	ldw	r2,-32300(gp)
8112273c:	10800044 	addi	r2,r2,1
81122740:	d0a07515 	stw	r2,-32300(gp)
81122744:	00000a06 	br	81122770 <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81122748:	d0a07617 	ldw	r2,-32296(gp)
8112274c:	e0fffe04 	addi	r3,fp,-8
81122750:	180d883a 	mov	r6,r3
81122754:	000b883a 	mov	r5,zero
81122758:	1009883a 	mov	r4,r2
8112275c:	1128fdc0 	call	81128fdc <OSSemPend>
    locks  = 1;
81122760:	00800044 	movi	r2,1
81122764:	d0a07515 	stw	r2,-32300(gp)
    lockid = id;
81122768:	e0bfe017 	ldw	r2,-128(fp)
8112276c:	d0a01915 	stw	r2,-32668(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81122770:	0001883a 	nop
81122774:	00000106 	br	8112277c <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81122778:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112277c:	e037883a 	mov	sp,fp
81122780:	dfc00117 	ldw	ra,4(sp)
81122784:	df000017 	ldw	fp,0(sp)
81122788:	dec00204 	addi	sp,sp,8
8112278c:	f800283a 	ret

81122790 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81122790:	defffd04 	addi	sp,sp,-12
81122794:	dfc00215 	stw	ra,8(sp)
81122798:	df000115 	stw	fp,4(sp)
8112279c:	df000104 	addi	fp,sp,4
811227a0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
811227a4:	d0a07517 	ldw	r2,-32300(gp)
811227a8:	10000b26 	beq	r2,zero,811227d8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
811227ac:	d0a07517 	ldw	r2,-32300(gp)
811227b0:	10bfffc4 	addi	r2,r2,-1
811227b4:	d0a07515 	stw	r2,-32300(gp)
811227b8:	d0a07517 	ldw	r2,-32300(gp)
811227bc:	1000071e 	bne	r2,zero,811227dc <__env_unlock+0x4c>
  {
    lockid = -1;
811227c0:	00bfffc4 	movi	r2,-1
811227c4:	d0a01915 	stw	r2,-32668(gp)
    OSSemPost( alt_envsem );
811227c8:	d0a07617 	ldw	r2,-32296(gp)
811227cc:	1009883a 	mov	r4,r2
811227d0:	11293540 	call	81129354 <OSSemPost>
811227d4:	00000106 	br	811227dc <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
811227d8:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811227dc:	e037883a 	mov	sp,fp
811227e0:	dfc00117 	ldw	ra,4(sp)
811227e4:	df000017 	ldw	fp,0(sp)
811227e8:	dec00204 	addi	sp,sp,8
811227ec:	f800283a 	ret

811227f0 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
811227f0:	deffda04 	addi	sp,sp,-152
811227f4:	dfc02515 	stw	ra,148(sp)
811227f8:	df002415 	stw	fp,144(sp)
811227fc:	df002404 	addi	fp,sp,144
81122800:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81122804:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
81122808:	d0a07943 	ldbu	r2,-32283(gp)
8112280c:	10803fcc 	andi	r2,r2,255
81122810:	10800060 	cmpeqi	r2,r2,1
81122814:	10003626 	beq	r2,zero,811228f0 <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
81122818:	e0bfe104 	addi	r2,fp,-124
8112281c:	100b883a 	mov	r5,r2
81122820:	01003fc4 	movi	r4,255
81122824:	112ac4c0 	call	8112ac4c <OSTaskQuery>
81122828:	e0bffe05 	stb	r2,-8(fp)
  if (err != OS_NO_ERR)
8112282c:	e0bffe03 	ldbu	r2,-8(fp)
81122830:	10803fcc 	andi	r2,r2,255
81122834:	1000301e 	bne	r2,zero,811228f8 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
81122838:	e0bfed83 	ldbu	r2,-74(fp)
8112283c:	10803fcc 	andi	r2,r2,255
81122840:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81122844:	d0a07817 	ldw	r2,-32288(gp)
81122848:	e0fffc04 	addi	r3,fp,-16
8112284c:	180b883a 	mov	r5,r3
81122850:	1009883a 	mov	r4,r2
81122854:	11294640 	call	81129464 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122858:	0005303a 	rdctl	r2,status
8112285c:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122860:	e0ffe017 	ldw	r3,-128(fp)
81122864:	00bfff84 	movi	r2,-2
81122868:	1884703a 	and	r2,r3,r2
8112286c:	1001703a 	wrctl	status,r2
  
  return context;
81122870:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81122874:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
81122878:	e0bffc0b 	ldhu	r2,-16(fp)
8112287c:	10bfffcc 	andi	r2,r2,65535
81122880:	10000b1e 	bne	r2,zero,811228b0 <__malloc_lock+0xc0>
81122884:	d0a01a17 	ldw	r2,-32664(gp)
81122888:	e0ffdd17 	ldw	r3,-140(fp)
8112288c:	1880081e 	bne	r3,r2,811228b0 <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
81122890:	d0a07717 	ldw	r2,-32292(gp)
81122894:	10800044 	addi	r2,r2,1
81122898:	d0a07715 	stw	r2,-32292(gp)
8112289c:	e0bfdc17 	ldw	r2,-144(fp)
811228a0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811228a4:	e0bfde17 	ldw	r2,-136(fp)
811228a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
811228ac:	00000e06 	br	811228e8 <__malloc_lock+0xf8>
811228b0:	e0bfdc17 	ldw	r2,-144(fp)
811228b4:	e0bfdf15 	stw	r2,-132(fp)
811228b8:	e0bfdf17 	ldw	r2,-132(fp)
811228bc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
811228c0:	d0a07817 	ldw	r2,-32288(gp)
811228c4:	e0fffe04 	addi	r3,fp,-8
811228c8:	180d883a 	mov	r6,r3
811228cc:	000b883a 	mov	r5,zero
811228d0:	1009883a 	mov	r4,r2
811228d4:	1128fdc0 	call	81128fdc <OSSemPend>
    locks  = 1;
811228d8:	00800044 	movi	r2,1
811228dc:	d0a07715 	stw	r2,-32292(gp)
    lockid = id;
811228e0:	e0bfdd17 	ldw	r2,-140(fp)
811228e4:	d0a01a15 	stw	r2,-32664(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
811228e8:	0001883a 	nop
811228ec:	00000306 	br	811228fc <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
811228f0:	0001883a 	nop
811228f4:	00000106 	br	811228fc <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
811228f8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
811228fc:	e037883a 	mov	sp,fp
81122900:	dfc00117 	ldw	ra,4(sp)
81122904:	df000017 	ldw	fp,0(sp)
81122908:	dec00204 	addi	sp,sp,8
8112290c:	f800283a 	ret

81122910 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
81122910:	defff804 	addi	sp,sp,-32
81122914:	dfc00715 	stw	ra,28(sp)
81122918:	df000615 	stw	fp,24(sp)
8112291c:	df000604 	addi	fp,sp,24
81122920:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81122924:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81122928:	d0a07943 	ldbu	r2,-32283(gp)
8112292c:	10803fcc 	andi	r2,r2,255
81122930:	10800060 	cmpeqi	r2,r2,1
81122934:	10002326 	beq	r2,zero,811229c4 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122938:	0005303a 	rdctl	r2,status
8112293c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122940:	e0fffe17 	ldw	r3,-8(fp)
81122944:	00bfff84 	movi	r2,-2
81122948:	1884703a 	and	r2,r3,r2
8112294c:	1001703a 	wrctl	status,r2
  
  return context;
81122950:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
81122954:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81122958:	d0a07717 	ldw	r2,-32292(gp)
8112295c:	1000051e 	bne	r2,zero,81122974 <__malloc_unlock+0x64>
81122960:	e0bffa17 	ldw	r2,-24(fp)
81122964:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122968:	e0bffb17 	ldw	r2,-20(fp)
8112296c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
81122970:	00001506 	br	811229c8 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
81122974:	d0a07717 	ldw	r2,-32292(gp)
81122978:	10bfffc4 	addi	r2,r2,-1
8112297c:	d0a07715 	stw	r2,-32292(gp)
81122980:	d0a07717 	ldw	r2,-32292(gp)
81122984:	10000a1e 	bne	r2,zero,811229b0 <__malloc_unlock+0xa0>
  {
    lockid = -1;
81122988:	00bfffc4 	movi	r2,-1
8112298c:	d0a01a15 	stw	r2,-32664(gp)
81122990:	e0bffa17 	ldw	r2,-24(fp)
81122994:	e0bffc15 	stw	r2,-16(fp)
81122998:	e0bffc17 	ldw	r2,-16(fp)
8112299c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
811229a0:	d0a07817 	ldw	r2,-32288(gp)
811229a4:	1009883a 	mov	r4,r2
811229a8:	11293540 	call	81129354 <OSSemPost>
811229ac:	00000606 	br	811229c8 <__malloc_unlock+0xb8>
811229b0:	e0bffa17 	ldw	r2,-24(fp)
811229b4:	e0bffd15 	stw	r2,-12(fp)
811229b8:	e0bffd17 	ldw	r2,-12(fp)
811229bc:	1001703a 	wrctl	status,r2
811229c0:	00000106 	br	811229c8 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
811229c4:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811229c8:	e037883a 	mov	sp,fp
811229cc:	dfc00117 	ldw	ra,4(sp)
811229d0:	df000017 	ldw	fp,0(sp)
811229d4:	dec00204 	addi	sp,sp,8
811229d8:	f800283a 	ret

811229dc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811229dc:	defff704 	addi	sp,sp,-36
811229e0:	dfc00815 	stw	ra,32(sp)
811229e4:	df000715 	stw	fp,28(sp)
811229e8:	df000704 	addi	fp,sp,28
811229ec:	e13ffd15 	stw	r4,-12(fp)
811229f0:	e17ffe15 	stw	r5,-8(fp)
811229f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811229f8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811229fc:	e0bfff17 	ldw	r2,-4(fp)
81122a00:	1000021e 	bne	r2,zero,81122a0c <OSEventNameGet+0x30>
        return (0);
81122a04:	0005883a 	mov	r2,zero
81122a08:	00003706 	br	81122ae8 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81122a0c:	e0bffd17 	ldw	r2,-12(fp)
81122a10:	1000051e 	bne	r2,zero,81122a28 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
81122a14:	e0bfff17 	ldw	r2,-4(fp)
81122a18:	00c00104 	movi	r3,4
81122a1c:	10c00005 	stb	r3,0(r2)
        return (0);
81122a20:	0005883a 	mov	r2,zero
81122a24:	00003006 	br	81122ae8 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81122a28:	e0bffe17 	ldw	r2,-8(fp)
81122a2c:	1000051e 	bne	r2,zero,81122a44 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
81122a30:	e0bfff17 	ldw	r2,-4(fp)
81122a34:	00c00304 	movi	r3,12
81122a38:	10c00005 	stb	r3,0(r2)
        return (0);
81122a3c:	0005883a 	mov	r2,zero
81122a40:	00002906 	br	81122ae8 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81122a44:	d0a08803 	ldbu	r2,-32224(gp)
81122a48:	10803fcc 	andi	r2,r2,255
81122a4c:	10000526 	beq	r2,zero,81122a64 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
81122a50:	e0bfff17 	ldw	r2,-4(fp)
81122a54:	00c00444 	movi	r3,17
81122a58:	10c00005 	stb	r3,0(r2)
        return (0);
81122a5c:	0005883a 	mov	r2,zero
81122a60:	00002106 	br	81122ae8 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
81122a64:	e0bffd17 	ldw	r2,-12(fp)
81122a68:	10800003 	ldbu	r2,0(r2)
81122a6c:	10803fcc 	andi	r2,r2,255
81122a70:	10bfffc4 	addi	r2,r2,-1
81122a74:	10800128 	cmpgeui	r2,r2,4
81122a78:	10000526 	beq	r2,zero,81122a90 <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81122a7c:	e0bfff17 	ldw	r2,-4(fp)
81122a80:	00c00044 	movi	r3,1
81122a84:	10c00005 	stb	r3,0(r2)
             return (0);
81122a88:	0005883a 	mov	r2,zero
81122a8c:	00001606 	br	81122ae8 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81122a90:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122a94:	0005303a 	rdctl	r2,status
81122a98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122a9c:	e0fffb17 	ldw	r3,-20(fp)
81122aa0:	00bfff84 	movi	r2,-2
81122aa4:	1884703a 	and	r2,r3,r2
81122aa8:	1001703a 	wrctl	status,r2
  
  return context;
81122aac:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
81122ab0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
81122ab4:	e0bffd17 	ldw	r2,-12(fp)
81122ab8:	108003c4 	addi	r2,r2,15
81122abc:	100b883a 	mov	r5,r2
81122ac0:	e13ffe17 	ldw	r4,-8(fp)
81122ac4:	11244600 	call	81124460 <OS_StrCopy>
81122ac8:	e0bffa05 	stb	r2,-24(fp)
81122acc:	e0bff917 	ldw	r2,-28(fp)
81122ad0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122ad4:	e0bffc17 	ldw	r2,-16(fp)
81122ad8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81122adc:	e0bfff17 	ldw	r2,-4(fp)
81122ae0:	10000005 	stb	zero,0(r2)
    return (len);
81122ae4:	e0bffa03 	ldbu	r2,-24(fp)
}
81122ae8:	e037883a 	mov	sp,fp
81122aec:	dfc00117 	ldw	ra,4(sp)
81122af0:	df000017 	ldw	fp,0(sp)
81122af4:	dec00204 	addi	sp,sp,8
81122af8:	f800283a 	ret

81122afc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
81122afc:	defff604 	addi	sp,sp,-40
81122b00:	dfc00915 	stw	ra,36(sp)
81122b04:	df000815 	stw	fp,32(sp)
81122b08:	df000804 	addi	fp,sp,32
81122b0c:	e13ffd15 	stw	r4,-12(fp)
81122b10:	e17ffe15 	stw	r5,-8(fp)
81122b14:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81122b18:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81122b1c:	e0bfff17 	ldw	r2,-4(fp)
81122b20:	10004026 	beq	r2,zero,81122c24 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81122b24:	e0bffd17 	ldw	r2,-12(fp)
81122b28:	1000041e 	bne	r2,zero,81122b3c <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
81122b2c:	e0bfff17 	ldw	r2,-4(fp)
81122b30:	00c00104 	movi	r3,4
81122b34:	10c00005 	stb	r3,0(r2)
        return;
81122b38:	00003b06 	br	81122c28 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81122b3c:	e0bffe17 	ldw	r2,-8(fp)
81122b40:	1000041e 	bne	r2,zero,81122b54 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
81122b44:	e0bfff17 	ldw	r2,-4(fp)
81122b48:	00c00304 	movi	r3,12
81122b4c:	10c00005 	stb	r3,0(r2)
        return;
81122b50:	00003506 	br	81122c28 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81122b54:	d0a08803 	ldbu	r2,-32224(gp)
81122b58:	10803fcc 	andi	r2,r2,255
81122b5c:	10000426 	beq	r2,zero,81122b70 <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
81122b60:	e0bfff17 	ldw	r2,-4(fp)
81122b64:	00c00484 	movi	r3,18
81122b68:	10c00005 	stb	r3,0(r2)
        return;
81122b6c:	00002e06 	br	81122c28 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
81122b70:	e0bffd17 	ldw	r2,-12(fp)
81122b74:	10800003 	ldbu	r2,0(r2)
81122b78:	10803fcc 	andi	r2,r2,255
81122b7c:	10bfffc4 	addi	r2,r2,-1
81122b80:	10800128 	cmpgeui	r2,r2,4
81122b84:	10000426 	beq	r2,zero,81122b98 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81122b88:	e0bfff17 	ldw	r2,-4(fp)
81122b8c:	00c00044 	movi	r3,1
81122b90:	10c00005 	stb	r3,0(r2)
             return;
81122b94:	00002406 	br	81122c28 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81122b98:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122b9c:	0005303a 	rdctl	r2,status
81122ba0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122ba4:	e0fffc17 	ldw	r3,-16(fp)
81122ba8:	00bfff84 	movi	r2,-2
81122bac:	1884703a 	and	r2,r3,r2
81122bb0:	1001703a 	wrctl	status,r2
  
  return context;
81122bb4:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
81122bb8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
81122bbc:	e13ffe17 	ldw	r4,-8(fp)
81122bc0:	11244d40 	call	811244d4 <OS_StrLen>
81122bc4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
81122bc8:	e0bffa03 	ldbu	r2,-24(fp)
81122bcc:	10800830 	cmpltui	r2,r2,32
81122bd0:	1000081e 	bne	r2,zero,81122bf4 <OSEventNameSet+0xf8>
81122bd4:	e0bff817 	ldw	r2,-32(fp)
81122bd8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122bdc:	e0bff917 	ldw	r2,-28(fp)
81122be0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
81122be4:	e0bfff17 	ldw	r2,-4(fp)
81122be8:	00c002c4 	movi	r3,11
81122bec:	10c00005 	stb	r3,0(r2)
        return;
81122bf0:	00000d06 	br	81122c28 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
81122bf4:	e0bffd17 	ldw	r2,-12(fp)
81122bf8:	108003c4 	addi	r2,r2,15
81122bfc:	e17ffe17 	ldw	r5,-8(fp)
81122c00:	1009883a 	mov	r4,r2
81122c04:	11244600 	call	81124460 <OS_StrCopy>
81122c08:	e0bff817 	ldw	r2,-32(fp)
81122c0c:	e0bffb15 	stw	r2,-20(fp)
81122c10:	e0bffb17 	ldw	r2,-20(fp)
81122c14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81122c18:	e0bfff17 	ldw	r2,-4(fp)
81122c1c:	10000005 	stb	zero,0(r2)
81122c20:	00000106 	br	81122c28 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81122c24:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81122c28:	e037883a 	mov	sp,fp
81122c2c:	dfc00117 	ldw	ra,4(sp)
81122c30:	df000017 	ldw	fp,0(sp)
81122c34:	dec00204 	addi	sp,sp,8
81122c38:	f800283a 	ret

81122c3c <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
81122c3c:	deffed04 	addi	sp,sp,-76
81122c40:	dfc01215 	stw	ra,72(sp)
81122c44:	df001115 	stw	fp,68(sp)
81122c48:	df001104 	addi	fp,sp,68
81122c4c:	e13ffc15 	stw	r4,-16(fp)
81122c50:	e17ffd15 	stw	r5,-12(fp)
81122c54:	e1bffe15 	stw	r6,-8(fp)
81122c58:	3805883a 	mov	r2,r7
81122c5c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81122c60:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81122c64:	e0800217 	ldw	r2,8(fp)
81122c68:	1000021e 	bne	r2,zero,81122c74 <OSEventPendMulti+0x38>
        return (0);
81122c6c:	0005883a 	mov	r2,zero
81122c70:	00017106 	br	81123238 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
81122c74:	e0bffc17 	ldw	r2,-16(fp)
81122c78:	1000051e 	bne	r2,zero,81122c90 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
81122c7c:	e0800217 	ldw	r2,8(fp)
81122c80:	00c00104 	movi	r3,4
81122c84:	10c00005 	stb	r3,0(r2)
        return (0);
81122c88:	0005883a 	mov	r2,zero
81122c8c:	00016a06 	br	81123238 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81122c90:	e0bffd17 	ldw	r2,-12(fp)
81122c94:	1000051e 	bne	r2,zero,81122cac <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
81122c98:	e0800217 	ldw	r2,8(fp)
81122c9c:	00c00104 	movi	r3,4
81122ca0:	10c00005 	stb	r3,0(r2)
        return (0);
81122ca4:	0005883a 	mov	r2,zero
81122ca8:	00016306 	br	81123238 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81122cac:	e0bffe17 	ldw	r2,-8(fp)
81122cb0:	1000051e 	bne	r2,zero,81122cc8 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
81122cb4:	e0800217 	ldw	r2,8(fp)
81122cb8:	00c00104 	movi	r3,4
81122cbc:	10c00005 	stb	r3,0(r2)
        return (0);
81122cc0:	0005883a 	mov	r2,zero
81122cc4:	00015c06 	br	81123238 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
81122cc8:	e0bffd17 	ldw	r2,-12(fp)
81122ccc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
81122cd0:	e0bffc17 	ldw	r2,-16(fp)
81122cd4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
81122cd8:	e0bfef17 	ldw	r2,-68(fp)
81122cdc:	10800017 	ldw	r2,0(r2)
81122ce0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
81122ce4:	00001906 	br	81122d4c <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
81122ce8:	e0bff017 	ldw	r2,-64(fp)
81122cec:	10800003 	ldbu	r2,0(r2)
81122cf0:	10803fcc 	andi	r2,r2,255
81122cf4:	10c000a0 	cmpeqi	r3,r2,2
81122cf8:	1800091e 	bne	r3,zero,81122d20 <OSEventPendMulti+0xe4>
81122cfc:	10c000e0 	cmpeqi	r3,r2,3
81122d00:	1800091e 	bne	r3,zero,81122d28 <OSEventPendMulti+0xec>
81122d04:	10800060 	cmpeqi	r2,r2,1
81122d08:	1000091e 	bne	r2,zero,81122d30 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
81122d0c:	e0800217 	ldw	r2,8(fp)
81122d10:	00c00044 	movi	r3,1
81122d14:	10c00005 	stb	r3,0(r2)
                 return (0);
81122d18:	0005883a 	mov	r2,zero
81122d1c:	00014606 	br	81123238 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81122d20:	0001883a 	nop
81122d24:	00000306 	br	81122d34 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
81122d28:	0001883a 	nop
81122d2c:	00000106 	br	81122d34 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81122d30:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
81122d34:	e0bfef17 	ldw	r2,-68(fp)
81122d38:	10800104 	addi	r2,r2,4
81122d3c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81122d40:	e0bfef17 	ldw	r2,-68(fp)
81122d44:	10800017 	ldw	r2,0(r2)
81122d48:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
81122d4c:	e0bff017 	ldw	r2,-64(fp)
81122d50:	103fe51e 	bne	r2,zero,81122ce8 <__reset+0xfb102ce8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81122d54:	d0a08803 	ldbu	r2,-32224(gp)
81122d58:	10803fcc 	andi	r2,r2,255
81122d5c:	10000526 	beq	r2,zero,81122d74 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81122d60:	e0800217 	ldw	r2,8(fp)
81122d64:	00c00084 	movi	r3,2
81122d68:	10c00005 	stb	r3,0(r2)
        return (0);
81122d6c:	0005883a 	mov	r2,zero
81122d70:	00013106 	br	81123238 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
81122d74:	d0a07903 	ldbu	r2,-32284(gp)
81122d78:	10803fcc 	andi	r2,r2,255
81122d7c:	10000526 	beq	r2,zero,81122d94 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81122d80:	e0800217 	ldw	r2,8(fp)
81122d84:	00c00344 	movi	r3,13
81122d88:	10c00005 	stb	r3,0(r2)
        return (0);
81122d8c:	0005883a 	mov	r2,zero
81122d90:	00012906 	br	81123238 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81122d94:	0005303a 	rdctl	r2,status
81122d98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81122d9c:	e0fffb17 	ldw	r3,-20(fp)
81122da0:	00bfff84 	movi	r2,-2
81122da4:	1884703a 	and	r2,r3,r2
81122da8:	1001703a 	wrctl	status,r2
  
  return context;
81122dac:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81122db0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81122db4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
81122db8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
81122dbc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81122dc0:	e0bffc17 	ldw	r2,-16(fp)
81122dc4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
81122dc8:	e0bfef17 	ldw	r2,-68(fp)
81122dcc:	10800017 	ldw	r2,0(r2)
81122dd0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81122dd4:	00008106 	br	81122fdc <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
81122dd8:	e0bff017 	ldw	r2,-64(fp)
81122ddc:	10800003 	ldbu	r2,0(r2)
81122de0:	10803fcc 	andi	r2,r2,255
81122de4:	10c000a0 	cmpeqi	r3,r2,2
81122de8:	18003c1e 	bne	r3,zero,81122edc <OSEventPendMulti+0x2a0>
81122dec:	10c000e0 	cmpeqi	r3,r2,3
81122df0:	1800031e 	bne	r3,zero,81122e00 <OSEventPendMulti+0x1c4>
81122df4:	10800060 	cmpeqi	r2,r2,1
81122df8:	10001e1e 	bne	r2,zero,81122e74 <OSEventPendMulti+0x238>
81122dfc:	00006606 	br	81122f98 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
81122e00:	e0bff017 	ldw	r2,-64(fp)
81122e04:	1080020b 	ldhu	r2,8(r2)
81122e08:	10bfffcc 	andi	r2,r2,65535
81122e0c:	10001526 	beq	r2,zero,81122e64 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
81122e10:	e0bff017 	ldw	r2,-64(fp)
81122e14:	1080020b 	ldhu	r2,8(r2)
81122e18:	10bfffc4 	addi	r2,r2,-1
81122e1c:	1007883a 	mov	r3,r2
81122e20:	e0bff017 	ldw	r2,-64(fp)
81122e24:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
81122e28:	e0bffd17 	ldw	r2,-12(fp)
81122e2c:	10c00104 	addi	r3,r2,4
81122e30:	e0fffd15 	stw	r3,-12(fp)
81122e34:	e0fff017 	ldw	r3,-64(fp)
81122e38:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
81122e3c:	00800044 	movi	r2,1
81122e40:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81122e44:	e0bffe17 	ldw	r2,-8(fp)
81122e48:	10c00104 	addi	r3,r2,4
81122e4c:	e0fffe15 	stw	r3,-8(fp)
81122e50:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81122e54:	e0bff18b 	ldhu	r2,-58(fp)
81122e58:	10800044 	addi	r2,r2,1
81122e5c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81122e60:	00005806 	br	81122fc4 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81122e64:	e0bff203 	ldbu	r2,-56(fp)
81122e68:	10800054 	ori	r2,r2,1
81122e6c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81122e70:	00005406 	br	81122fc4 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81122e74:	e0bff017 	ldw	r2,-64(fp)
81122e78:	10800117 	ldw	r2,4(r2)
81122e7c:	10001326 	beq	r2,zero,81122ecc <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81122e80:	e0bffe17 	ldw	r2,-8(fp)
81122e84:	10c00104 	addi	r3,r2,4
81122e88:	e0fffe15 	stw	r3,-8(fp)
81122e8c:	e0fff017 	ldw	r3,-64(fp)
81122e90:	18c00117 	ldw	r3,4(r3)
81122e94:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
81122e98:	e0bff017 	ldw	r2,-64(fp)
81122e9c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81122ea0:	e0bffd17 	ldw	r2,-12(fp)
81122ea4:	10c00104 	addi	r3,r2,4
81122ea8:	e0fffd15 	stw	r3,-12(fp)
81122eac:	e0fff017 	ldw	r3,-64(fp)
81122eb0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81122eb4:	00800044 	movi	r2,1
81122eb8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81122ebc:	e0bff18b 	ldhu	r2,-58(fp)
81122ec0:	10800044 	addi	r2,r2,1
81122ec4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
81122ec8:	00003e06 	br	81122fc4 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
81122ecc:	e0bff203 	ldbu	r2,-56(fp)
81122ed0:	10800094 	ori	r2,r2,2
81122ed4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81122ed8:	00003a06 	br	81122fc4 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
81122edc:	e0bff017 	ldw	r2,-64(fp)
81122ee0:	10800117 	ldw	r2,4(r2)
81122ee4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81122ee8:	e0bff517 	ldw	r2,-44(fp)
81122eec:	1080058b 	ldhu	r2,22(r2)
81122ef0:	10bfffcc 	andi	r2,r2,65535
81122ef4:	10002426 	beq	r2,zero,81122f88 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
81122ef8:	e0bffe17 	ldw	r2,-8(fp)
81122efc:	10c00104 	addi	r3,r2,4
81122f00:	e0fffe15 	stw	r3,-8(fp)
81122f04:	e0fff517 	ldw	r3,-44(fp)
81122f08:	18c00417 	ldw	r3,16(r3)
81122f0c:	19400104 	addi	r5,r3,4
81122f10:	e13ff517 	ldw	r4,-44(fp)
81122f14:	21400415 	stw	r5,16(r4)
81122f18:	18c00017 	ldw	r3,0(r3)
81122f1c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81122f20:	e0bff517 	ldw	r2,-44(fp)
81122f24:	10c00417 	ldw	r3,16(r2)
81122f28:	e0bff517 	ldw	r2,-44(fp)
81122f2c:	10800217 	ldw	r2,8(r2)
81122f30:	1880041e 	bne	r3,r2,81122f44 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81122f34:	e0bff517 	ldw	r2,-44(fp)
81122f38:	10c00117 	ldw	r3,4(r2)
81122f3c:	e0bff517 	ldw	r2,-44(fp)
81122f40:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81122f44:	e0bff517 	ldw	r2,-44(fp)
81122f48:	1080058b 	ldhu	r2,22(r2)
81122f4c:	10bfffc4 	addi	r2,r2,-1
81122f50:	1007883a 	mov	r3,r2
81122f54:	e0bff517 	ldw	r2,-44(fp)
81122f58:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
81122f5c:	e0bffd17 	ldw	r2,-12(fp)
81122f60:	10c00104 	addi	r3,r2,4
81122f64:	e0fffd15 	stw	r3,-12(fp)
81122f68:	e0fff017 	ldw	r3,-64(fp)
81122f6c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81122f70:	00800044 	movi	r2,1
81122f74:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81122f78:	e0bff18b 	ldhu	r2,-58(fp)
81122f7c:	10800044 	addi	r2,r2,1
81122f80:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81122f84:	00000f06 	br	81122fc4 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
81122f88:	e0bff203 	ldbu	r2,-56(fp)
81122f8c:	10800114 	ori	r2,r2,4
81122f90:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81122f94:	00000b06 	br	81122fc4 <OSEventPendMulti+0x388>
81122f98:	e0bff317 	ldw	r2,-52(fp)
81122f9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81122fa0:	e0bff417 	ldw	r2,-48(fp)
81122fa4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
81122fa8:	e0bffd17 	ldw	r2,-12(fp)
81122fac:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81122fb0:	e0800217 	ldw	r2,8(fp)
81122fb4:	00c00044 	movi	r3,1
81122fb8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81122fbc:	e0bff18b 	ldhu	r2,-58(fp)
81122fc0:	00009d06 	br	81123238 <OSEventPendMulti+0x5fc>
        }
        pevents++;
81122fc4:	e0bfef17 	ldw	r2,-68(fp)
81122fc8:	10800104 	addi	r2,r2,4
81122fcc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81122fd0:	e0bfef17 	ldw	r2,-68(fp)
81122fd4:	10800017 	ldw	r2,0(r2)
81122fd8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81122fdc:	e0bff017 	ldw	r2,-64(fp)
81122fe0:	103f7d1e 	bne	r2,zero,81122dd8 <__reset+0xfb102dd8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81122fe4:	e0bff103 	ldbu	r2,-60(fp)
81122fe8:	10800058 	cmpnei	r2,r2,1
81122fec:	10000a1e 	bne	r2,zero,81123018 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81122ff0:	e0bffd17 	ldw	r2,-12(fp)
81122ff4:	10000015 	stw	zero,0(r2)
81122ff8:	e0bff317 	ldw	r2,-52(fp)
81122ffc:	e0bff615 	stw	r2,-40(fp)
81123000:	e0bff617 	ldw	r2,-40(fp)
81123004:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
81123008:	e0800217 	ldw	r2,8(fp)
8112300c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81123010:	e0bff18b 	ldhu	r2,-58(fp)
81123014:	00008806 	br	81123238 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
81123018:	d0a08917 	ldw	r2,-32220(gp)
8112301c:	d0e08917 	ldw	r3,-32220(gp)
81123020:	19000c03 	ldbu	r4,48(r3)
81123024:	e0fff203 	ldbu	r3,-56(fp)
81123028:	20c6b03a 	or	r3,r4,r3
8112302c:	1809883a 	mov	r4,r3
81123030:	00ffe004 	movi	r3,-128
81123034:	20c6b03a 	or	r3,r4,r3
81123038:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112303c:	d0a08917 	ldw	r2,-32220(gp)
81123040:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81123044:	d0a08917 	ldw	r2,-32220(gp)
81123048:	e0ffff0b 	ldhu	r3,-4(fp)
8112304c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81123050:	e13ffc17 	ldw	r4,-16(fp)
81123054:	1123b780 	call	81123b78 <OS_EventTaskWaitMulti>
81123058:	e0bff317 	ldw	r2,-52(fp)
8112305c:	e0bff915 	stw	r2,-28(fp)
81123060:	e0bff917 	ldw	r2,-28(fp)
81123064:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81123068:	112431c0 	call	8112431c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112306c:	0005303a 	rdctl	r2,status
81123070:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123074:	e0fff717 	ldw	r3,-36(fp)
81123078:	00bfff84 	movi	r2,-2
8112307c:	1884703a 	and	r2,r3,r2
81123080:	1001703a 	wrctl	status,r2
  
  return context;
81123084:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81123088:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
8112308c:	d0a08917 	ldw	r2,-32220(gp)
81123090:	10800c43 	ldbu	r2,49(r2)
81123094:	10803fcc 	andi	r2,r2,255
81123098:	10000226 	beq	r2,zero,811230a4 <OSEventPendMulti+0x468>
8112309c:	108000a0 	cmpeqi	r2,r2,2
811230a0:	10001826 	beq	r2,zero,81123104 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
811230a4:	d0a08917 	ldw	r2,-32220(gp)
811230a8:	10800717 	ldw	r2,28(r2)
811230ac:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
811230b0:	e0bff017 	ldw	r2,-64(fp)
811230b4:	10000b26 	beq	r2,zero,811230e4 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
811230b8:	e0bffd17 	ldw	r2,-12(fp)
811230bc:	10c00104 	addi	r3,r2,4
811230c0:	e0fffd15 	stw	r3,-12(fp)
811230c4:	e0fff017 	ldw	r3,-64(fp)
811230c8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
811230cc:	e0bffd17 	ldw	r2,-12(fp)
811230d0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
811230d4:	e0bff18b 	ldhu	r2,-58(fp)
811230d8:	10800044 	addi	r2,r2,1
811230dc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
811230e0:	00000d06 	br	81123118 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
811230e4:	d0a08917 	ldw	r2,-32220(gp)
811230e8:	00c00044 	movi	r3,1
811230ec:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
811230f0:	d0a08917 	ldw	r2,-32220(gp)
811230f4:	e17ffc17 	ldw	r5,-16(fp)
811230f8:	1009883a 	mov	r4,r2
811230fc:	1123d800 	call	81123d80 <OS_EventTaskRemoveMulti>
             }
			 break;
81123100:	00000506 	br	81123118 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81123104:	d0a08917 	ldw	r2,-32220(gp)
81123108:	e17ffc17 	ldw	r5,-16(fp)
8112310c:	1009883a 	mov	r4,r2
81123110:	1123d800 	call	81123d80 <OS_EventTaskRemoveMulti>
             break;
81123114:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
81123118:	d0a08917 	ldw	r2,-32220(gp)
8112311c:	10800c43 	ldbu	r2,49(r2)
81123120:	10803fcc 	andi	r2,r2,255
81123124:	10000326 	beq	r2,zero,81123134 <OSEventPendMulti+0x4f8>
81123128:	108000a0 	cmpeqi	r2,r2,2
8112312c:	1000231e 	bne	r2,zero,811231bc <OSEventPendMulti+0x580>
81123130:	00002a06 	br	811231dc <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
81123134:	e0bff017 	ldw	r2,-64(fp)
81123138:	10800003 	ldbu	r2,0(r2)
8112313c:	10803fcc 	andi	r2,r2,255
81123140:	0080100e 	bge	zero,r2,81123184 <OSEventPendMulti+0x548>
81123144:	10c000d0 	cmplti	r3,r2,3
81123148:	1800071e 	bne	r3,zero,81123168 <OSEventPendMulti+0x52c>
8112314c:	108000e0 	cmpeqi	r2,r2,3
81123150:	10000c26 	beq	r2,zero,81123184 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81123154:	e0bffe17 	ldw	r2,-8(fp)
81123158:	10c00104 	addi	r3,r2,4
8112315c:	e0fffe15 	stw	r3,-8(fp)
81123160:	10000015 	stw	zero,0(r2)
                      break;
81123164:	00001206 	br	811231b0 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
81123168:	e0bffe17 	ldw	r2,-8(fp)
8112316c:	10c00104 	addi	r3,r2,4
81123170:	e0fffe15 	stw	r3,-8(fp)
81123174:	d0e08917 	ldw	r3,-32220(gp)
81123178:	18c00917 	ldw	r3,36(r3)
8112317c:	10c00015 	stw	r3,0(r2)
                      break;
81123180:	00000b06 	br	811231b0 <OSEventPendMulti+0x574>
81123184:	e0bff317 	ldw	r2,-52(fp)
81123188:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112318c:	e0bff817 	ldw	r2,-32(fp)
81123190:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81123194:	e0bffd17 	ldw	r2,-12(fp)
81123198:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
8112319c:	e0800217 	ldw	r2,8(fp)
811231a0:	00c00044 	movi	r3,1
811231a4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
811231a8:	e0bff18b 	ldhu	r2,-58(fp)
811231ac:	00002206 	br	81123238 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
811231b0:	e0800217 	ldw	r2,8(fp)
811231b4:	10000005 	stb	zero,0(r2)
             break;
811231b8:	00001006 	br	811231fc <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
811231bc:	e0bffe17 	ldw	r2,-8(fp)
811231c0:	10c00104 	addi	r3,r2,4
811231c4:	e0fffe15 	stw	r3,-8(fp)
811231c8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
811231cc:	e0800217 	ldw	r2,8(fp)
811231d0:	00c00384 	movi	r3,14
811231d4:	10c00005 	stb	r3,0(r2)
             break;
811231d8:	00000806 	br	811231fc <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
811231dc:	e0bffe17 	ldw	r2,-8(fp)
811231e0:	10c00104 	addi	r3,r2,4
811231e4:	e0fffe15 	stw	r3,-8(fp)
811231e8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
811231ec:	e0800217 	ldw	r2,8(fp)
811231f0:	00c00284 	movi	r3,10
811231f4:	10c00005 	stb	r3,0(r2)
             break;
811231f8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
811231fc:	d0a08917 	ldw	r2,-32220(gp)
81123200:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
81123204:	d0a08917 	ldw	r2,-32220(gp)
81123208:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
8112320c:	d0a08917 	ldw	r2,-32220(gp)
81123210:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81123214:	d0a08917 	ldw	r2,-32220(gp)
81123218:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
8112321c:	d0a08917 	ldw	r2,-32220(gp)
81123220:	10000915 	stw	zero,36(r2)
81123224:	e0bff317 	ldw	r2,-52(fp)
81123228:	e0bffa15 	stw	r2,-24(fp)
8112322c:	e0bffa17 	ldw	r2,-24(fp)
81123230:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81123234:	e0bff18b 	ldhu	r2,-58(fp)
}
81123238:	e037883a 	mov	sp,fp
8112323c:	dfc00117 	ldw	ra,4(sp)
81123240:	df000017 	ldw	fp,0(sp)
81123244:	dec00204 	addi	sp,sp,8
81123248:	f800283a 	ret

8112324c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
8112324c:	defffe04 	addi	sp,sp,-8
81123250:	dfc00115 	stw	ra,4(sp)
81123254:	df000015 	stw	fp,0(sp)
81123258:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
8112325c:	1134dc00 	call	81134dc0 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81123260:	1123fc80 	call	81123fc8 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
81123264:	11240100 	call	81124010 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81123268:	112417c0 	call	8112417c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
8112326c:	1123ee80 	call	81123ee8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81123270:	112602c0 	call	8112602c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
81123274:	112692c0 	call	8112692c <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81123278:	1128b6c0 	call	81128b6c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
8112327c:	112407c0 	call	8112407c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81123280:	11240fc0 	call	811240fc <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81123284:	1134de00 	call	81134de0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81123288:	1124a000 	call	81124a00 <OSDebugInit>
#endif
}
8112328c:	0001883a 	nop
81123290:	e037883a 	mov	sp,fp
81123294:	dfc00117 	ldw	ra,4(sp)
81123298:	df000017 	ldw	fp,0(sp)
8112329c:	dec00204 	addi	sp,sp,8
811232a0:	f800283a 	ret

811232a4 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
811232a4:	deffff04 	addi	sp,sp,-4
811232a8:	df000015 	stw	fp,0(sp)
811232ac:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
811232b0:	d0a07943 	ldbu	r2,-32283(gp)
811232b4:	10803fcc 	andi	r2,r2,255
811232b8:	10800058 	cmpnei	r2,r2,1
811232bc:	1000071e 	bne	r2,zero,811232dc <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
811232c0:	d0a08803 	ldbu	r2,-32224(gp)
811232c4:	10803fcc 	andi	r2,r2,255
811232c8:	10803fe0 	cmpeqi	r2,r2,255
811232cc:	1000031e 	bne	r2,zero,811232dc <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
811232d0:	d0a08803 	ldbu	r2,-32224(gp)
811232d4:	10800044 	addi	r2,r2,1
811232d8:	d0a08805 	stb	r2,-32224(gp)
        }
    }
}
811232dc:	0001883a 	nop
811232e0:	e037883a 	mov	sp,fp
811232e4:	df000017 	ldw	fp,0(sp)
811232e8:	dec00104 	addi	sp,sp,4
811232ec:	f800283a 	ret

811232f0 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
811232f0:	defffb04 	addi	sp,sp,-20
811232f4:	dfc00415 	stw	ra,16(sp)
811232f8:	df000315 	stw	fp,12(sp)
811232fc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81123300:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
81123304:	d0a07943 	ldbu	r2,-32283(gp)
81123308:	10803fcc 	andi	r2,r2,255
8112330c:	10800058 	cmpnei	r2,r2,1
81123310:	10002f1e 	bne	r2,zero,811233d0 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123314:	0005303a 	rdctl	r2,status
81123318:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112331c:	e0ffff17 	ldw	r3,-4(fp)
81123320:	00bfff84 	movi	r2,-2
81123324:	1884703a 	and	r2,r3,r2
81123328:	1001703a 	wrctl	status,r2
  
  return context;
8112332c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81123330:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81123334:	d0a08803 	ldbu	r2,-32224(gp)
81123338:	10803fcc 	andi	r2,r2,255
8112333c:	10000326 	beq	r2,zero,8112334c <OSIntExit+0x5c>
            OSIntNesting--;
81123340:	d0a08803 	ldbu	r2,-32224(gp)
81123344:	10bfffc4 	addi	r2,r2,-1
81123348:	d0a08805 	stb	r2,-32224(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
8112334c:	d0a08803 	ldbu	r2,-32224(gp)
81123350:	10803fcc 	andi	r2,r2,255
81123354:	10001a1e 	bne	r2,zero,811233c0 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
81123358:	d0a07903 	ldbu	r2,-32284(gp)
8112335c:	10803fcc 	andi	r2,r2,255
81123360:	1000171e 	bne	r2,zero,811233c0 <OSIntExit+0xd0>
                OS_SchedNew();
81123364:	11243ec0 	call	811243ec <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
81123368:	d0e07b03 	ldbu	r3,-32276(gp)
8112336c:	d0a07b43 	ldbu	r2,-32275(gp)
81123370:	18c03fcc 	andi	r3,r3,255
81123374:	10803fcc 	andi	r2,r2,255
81123378:	18801126 	beq	r3,r2,811233c0 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
8112337c:	d0a07b03 	ldbu	r2,-32276(gp)
81123380:	10c03fcc 	andi	r3,r2,255
81123384:	00a045b4 	movhi	r2,33046
81123388:	10b75704 	addi	r2,r2,-8868
8112338c:	18c7883a 	add	r3,r3,r3
81123390:	18c7883a 	add	r3,r3,r3
81123394:	10c5883a 	add	r2,r2,r3
81123398:	10800017 	ldw	r2,0(r2)
8112339c:	d0a08315 	stw	r2,-32244(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
811233a0:	d0a08317 	ldw	r2,-32244(gp)
811233a4:	10c00e17 	ldw	r3,56(r2)
811233a8:	18c00044 	addi	r3,r3,1
811233ac:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
811233b0:	d0a07e17 	ldw	r2,-32264(gp)
811233b4:	10800044 	addi	r2,r2,1
811233b8:	d0a07e15 	stw	r2,-32264(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
811233bc:	1134aec0 	call	81134aec <OSCtxSw>
811233c0:	e0bffd17 	ldw	r2,-12(fp)
811233c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811233c8:	e0bffe17 	ldw	r2,-8(fp)
811233cc:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
811233d0:	0001883a 	nop
811233d4:	e037883a 	mov	sp,fp
811233d8:	dfc00117 	ldw	ra,4(sp)
811233dc:	df000017 	ldw	fp,0(sp)
811233e0:	dec00204 	addi	sp,sp,8
811233e4:	f800283a 	ret

811233e8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
811233e8:	defffc04 	addi	sp,sp,-16
811233ec:	df000315 	stw	fp,12(sp)
811233f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811233f4:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
811233f8:	d0a07943 	ldbu	r2,-32283(gp)
811233fc:	10803fcc 	andi	r2,r2,255
81123400:	10800058 	cmpnei	r2,r2,1
81123404:	1000161e 	bne	r2,zero,81123460 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123408:	0005303a 	rdctl	r2,status
8112340c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123410:	e0ffff17 	ldw	r3,-4(fp)
81123414:	00bfff84 	movi	r2,-2
81123418:	1884703a 	and	r2,r3,r2
8112341c:	1001703a 	wrctl	status,r2
  
  return context;
81123420:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81123424:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
81123428:	d0a08803 	ldbu	r2,-32224(gp)
8112342c:	10803fcc 	andi	r2,r2,255
81123430:	1000071e 	bne	r2,zero,81123450 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81123434:	d0a07903 	ldbu	r2,-32284(gp)
81123438:	10803fcc 	andi	r2,r2,255
8112343c:	10803fe0 	cmpeqi	r2,r2,255
81123440:	1000031e 	bne	r2,zero,81123450 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81123444:	d0a07903 	ldbu	r2,-32284(gp)
81123448:	10800044 	addi	r2,r2,1
8112344c:	d0a07905 	stb	r2,-32284(gp)
81123450:	e0bffd17 	ldw	r2,-12(fp)
81123454:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123458:	e0bffe17 	ldw	r2,-8(fp)
8112345c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81123460:	0001883a 	nop
81123464:	e037883a 	mov	sp,fp
81123468:	df000017 	ldw	fp,0(sp)
8112346c:	dec00104 	addi	sp,sp,4
81123470:	f800283a 	ret

81123474 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81123474:	defff804 	addi	sp,sp,-32
81123478:	dfc00715 	stw	ra,28(sp)
8112347c:	df000615 	stw	fp,24(sp)
81123480:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81123484:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
81123488:	d0a07943 	ldbu	r2,-32283(gp)
8112348c:	10803fcc 	andi	r2,r2,255
81123490:	10800058 	cmpnei	r2,r2,1
81123494:	1000281e 	bne	r2,zero,81123538 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123498:	0005303a 	rdctl	r2,status
8112349c:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811234a0:	e0ffff17 	ldw	r3,-4(fp)
811234a4:	00bfff84 	movi	r2,-2
811234a8:	1884703a 	and	r2,r3,r2
811234ac:	1001703a 	wrctl	status,r2
  
  return context;
811234b0:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
811234b4:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
811234b8:	d0a07903 	ldbu	r2,-32284(gp)
811234bc:	10803fcc 	andi	r2,r2,255
811234c0:	10001926 	beq	r2,zero,81123528 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
811234c4:	d0a07903 	ldbu	r2,-32284(gp)
811234c8:	10bfffc4 	addi	r2,r2,-1
811234cc:	d0a07905 	stb	r2,-32284(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
811234d0:	d0a07903 	ldbu	r2,-32284(gp)
811234d4:	10803fcc 	andi	r2,r2,255
811234d8:	10000e1e 	bne	r2,zero,81123514 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
811234dc:	d0a08803 	ldbu	r2,-32224(gp)
811234e0:	10803fcc 	andi	r2,r2,255
811234e4:	1000061e 	bne	r2,zero,81123500 <OSSchedUnlock+0x8c>
811234e8:	e0bffa17 	ldw	r2,-24(fp)
811234ec:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811234f0:	e0bffb17 	ldw	r2,-20(fp)
811234f4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
811234f8:	112431c0 	call	8112431c <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
811234fc:	00000e06 	br	81123538 <OSSchedUnlock+0xc4>
81123500:	e0bffa17 	ldw	r2,-24(fp)
81123504:	e0bffc15 	stw	r2,-16(fp)
81123508:	e0bffc17 	ldw	r2,-16(fp)
8112350c:	1001703a 	wrctl	status,r2
81123510:	00000906 	br	81123538 <OSSchedUnlock+0xc4>
81123514:	e0bffa17 	ldw	r2,-24(fp)
81123518:	e0bffd15 	stw	r2,-12(fp)
8112351c:	e0bffd17 	ldw	r2,-12(fp)
81123520:	1001703a 	wrctl	status,r2
81123524:	00000406 	br	81123538 <OSSchedUnlock+0xc4>
81123528:	e0bffa17 	ldw	r2,-24(fp)
8112352c:	e0bffe15 	stw	r2,-8(fp)
81123530:	e0bffe17 	ldw	r2,-8(fp)
81123534:	1001703a 	wrctl	status,r2
81123538:	0001883a 	nop
8112353c:	e037883a 	mov	sp,fp
81123540:	dfc00117 	ldw	ra,4(sp)
81123544:	df000017 	ldw	fp,0(sp)
81123548:	dec00204 	addi	sp,sp,8
8112354c:	f800283a 	ret

81123550 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
81123550:	defffe04 	addi	sp,sp,-8
81123554:	dfc00115 	stw	ra,4(sp)
81123558:	df000015 	stw	fp,0(sp)
8112355c:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
81123560:	d0a07943 	ldbu	r2,-32283(gp)
81123564:	10803fcc 	andi	r2,r2,255
81123568:	10000f1e 	bne	r2,zero,811235a8 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
8112356c:	11243ec0 	call	811243ec <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
81123570:	d0a07b03 	ldbu	r2,-32276(gp)
81123574:	d0a07b45 	stb	r2,-32275(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
81123578:	d0a07b03 	ldbu	r2,-32276(gp)
8112357c:	10c03fcc 	andi	r3,r2,255
81123580:	00a045b4 	movhi	r2,33046
81123584:	10b75704 	addi	r2,r2,-8868
81123588:	18c7883a 	add	r3,r3,r3
8112358c:	18c7883a 	add	r3,r3,r3
81123590:	10c5883a 	add	r2,r2,r3
81123594:	10800017 	ldw	r2,0(r2)
81123598:	d0a08315 	stw	r2,-32244(gp)
        OSTCBCur      = OSTCBHighRdy;
8112359c:	d0a08317 	ldw	r2,-32244(gp)
811235a0:	d0a08915 	stw	r2,-32220(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
811235a4:	1134b780 	call	81134b78 <OSStartHighRdy>
    }
}
811235a8:	0001883a 	nop
811235ac:	e037883a 	mov	sp,fp
811235b0:	dfc00117 	ldw	ra,4(sp)
811235b4:	df000017 	ldw	fp,0(sp)
811235b8:	dec00204 	addi	sp,sp,8
811235bc:	f800283a 	ret

811235c0 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
811235c0:	defff904 	addi	sp,sp,-28
811235c4:	dfc00615 	stw	ra,24(sp)
811235c8:	df000515 	stw	fp,20(sp)
811235cc:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811235d0:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
811235d4:	01000084 	movi	r4,2
811235d8:	112ade00 	call	8112ade0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811235dc:	0005303a 	rdctl	r2,status
811235e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811235e4:	e0fffc17 	ldw	r3,-16(fp)
811235e8:	00bfff84 	movi	r2,-2
811235ec:	1884703a 	and	r2,r3,r2
811235f0:	1001703a 	wrctl	status,r2
  
  return context;
811235f4:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
811235f8:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
811235fc:	d0207a15 	stw	zero,-32280(gp)
81123600:	e0bffb17 	ldw	r2,-20(fp)
81123604:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123608:	e0bffd17 	ldw	r2,-12(fp)
8112360c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
81123610:	01001904 	movi	r4,100
81123614:	112ade00 	call	8112ade0 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123618:	0005303a 	rdctl	r2,status
8112361c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123620:	e0fffe17 	ldw	r3,-8(fp)
81123624:	00bfff84 	movi	r2,-2
81123628:	1884703a 	and	r2,r3,r2
8112362c:	1001703a 	wrctl	status,r2
  
  return context;
81123630:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
81123634:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
81123638:	d0a07a17 	ldw	r2,-32280(gp)
8112363c:	d0a07f15 	stw	r2,-32260(gp)
    OSStatRdy    = OS_TRUE;
81123640:	00800044 	movi	r2,1
81123644:	d0a08c05 	stb	r2,-32208(gp)
81123648:	e0bffb17 	ldw	r2,-20(fp)
8112364c:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123650:	e0bfff17 	ldw	r2,-4(fp)
81123654:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81123658:	0001883a 	nop
8112365c:	e037883a 	mov	sp,fp
81123660:	dfc00117 	ldw	ra,4(sp)
81123664:	df000017 	ldw	fp,0(sp)
81123668:	dec00204 	addi	sp,sp,8
8112366c:	f800283a 	ret

81123670 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
81123670:	defff704 	addi	sp,sp,-36
81123674:	dfc00815 	stw	ra,32(sp)
81123678:	df000715 	stw	fp,28(sp)
8112367c:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81123680:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
81123684:	1134da00 	call	81134da0 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81123688:	0005303a 	rdctl	r2,status
8112368c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123690:	e0fffd17 	ldw	r3,-12(fp)
81123694:	00bfff84 	movi	r2,-2
81123698:	1884703a 	and	r2,r3,r2
8112369c:	1001703a 	wrctl	status,r2
  
  return context;
811236a0:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
811236a4:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
811236a8:	d0a08a17 	ldw	r2,-32216(gp)
811236ac:	10800044 	addi	r2,r2,1
811236b0:	d0a08a15 	stw	r2,-32216(gp)
811236b4:	e0bffb17 	ldw	r2,-20(fp)
811236b8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811236bc:	e0bfff17 	ldw	r2,-4(fp)
811236c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
811236c4:	d0a07943 	ldbu	r2,-32283(gp)
811236c8:	10803fcc 	andi	r2,r2,255
811236cc:	10800058 	cmpnei	r2,r2,1
811236d0:	10006a1e 	bne	r2,zero,8112387c <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
811236d4:	d0a07d03 	ldbu	r2,-32268(gp)
811236d8:	10803fcc 	andi	r2,r2,255
811236dc:	10c00060 	cmpeqi	r3,r2,1
811236e0:	1800061e 	bne	r3,zero,811236fc <OSTimeTick+0x8c>
811236e4:	10c000a0 	cmpeqi	r3,r2,2
811236e8:	1800061e 	bne	r3,zero,81123704 <OSTimeTick+0x94>
811236ec:	10000a1e 	bne	r2,zero,81123718 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
811236f0:	00800044 	movi	r2,1
811236f4:	e0bffa05 	stb	r2,-24(fp)
                 break;
811236f8:	00000b06 	br	81123728 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
811236fc:	e03ffa05 	stb	zero,-24(fp)
                 break;
81123700:	00000906 	br	81123728 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
81123704:	00800044 	movi	r2,1
81123708:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
8112370c:	00800044 	movi	r2,1
81123710:	d0a07d05 	stb	r2,-32268(gp)
                 break;
81123714:	00000406 	br	81123728 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
81123718:	00800044 	movi	r2,1
8112371c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
81123720:	d0207d05 	stb	zero,-32268(gp)
                 break;
81123724:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
81123728:	e0bffa03 	ldbu	r2,-24(fp)
8112372c:	10005226 	beq	r2,zero,81123878 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
81123730:	d0a07c17 	ldw	r2,-32272(gp)
81123734:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81123738:	00004906 	br	81123860 <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112373c:	0005303a 	rdctl	r2,status
81123740:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81123744:	e0fffc17 	ldw	r3,-16(fp)
81123748:	00bfff84 	movi	r2,-2
8112374c:	1884703a 	and	r2,r3,r2
81123750:	1001703a 	wrctl	status,r2
  
  return context;
81123754:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
81123758:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
8112375c:	e0bff917 	ldw	r2,-28(fp)
81123760:	10800b8b 	ldhu	r2,46(r2)
81123764:	10bfffcc 	andi	r2,r2,65535
81123768:	10003626 	beq	r2,zero,81123844 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
8112376c:	e0bff917 	ldw	r2,-28(fp)
81123770:	10800b8b 	ldhu	r2,46(r2)
81123774:	10bfffc4 	addi	r2,r2,-1
81123778:	1007883a 	mov	r3,r2
8112377c:	e0bff917 	ldw	r2,-28(fp)
81123780:	10c00b8d 	sth	r3,46(r2)
81123784:	e0bff917 	ldw	r2,-28(fp)
81123788:	10800b8b 	ldhu	r2,46(r2)
8112378c:	10bfffcc 	andi	r2,r2,65535
81123790:	10002c1e 	bne	r2,zero,81123844 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
81123794:	e0bff917 	ldw	r2,-28(fp)
81123798:	10800c03 	ldbu	r2,48(r2)
8112379c:	10803fcc 	andi	r2,r2,255
811237a0:	10800dcc 	andi	r2,r2,55
811237a4:	10000b26 	beq	r2,zero,811237d4 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
811237a8:	e0bff917 	ldw	r2,-28(fp)
811237ac:	10c00c03 	ldbu	r3,48(r2)
811237b0:	00bff204 	movi	r2,-56
811237b4:	1884703a 	and	r2,r3,r2
811237b8:	1007883a 	mov	r3,r2
811237bc:	e0bff917 	ldw	r2,-28(fp)
811237c0:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
811237c4:	e0bff917 	ldw	r2,-28(fp)
811237c8:	00c00044 	movi	r3,1
811237cc:	10c00c45 	stb	r3,49(r2)
811237d0:	00000206 	br	811237dc <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
811237d4:	e0bff917 	ldw	r2,-28(fp)
811237d8:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
811237dc:	e0bff917 	ldw	r2,-28(fp)
811237e0:	10800c03 	ldbu	r2,48(r2)
811237e4:	10803fcc 	andi	r2,r2,255
811237e8:	1080020c 	andi	r2,r2,8
811237ec:	1000151e 	bne	r2,zero,81123844 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
811237f0:	e0bff917 	ldw	r2,-28(fp)
811237f4:	10c00d83 	ldbu	r3,54(r2)
811237f8:	d0a08503 	ldbu	r2,-32236(gp)
811237fc:	1884b03a 	or	r2,r3,r2
81123800:	d0a08505 	stb	r2,-32236(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81123804:	e0bff917 	ldw	r2,-28(fp)
81123808:	10800d03 	ldbu	r2,52(r2)
8112380c:	10c03fcc 	andi	r3,r2,255
81123810:	e0bff917 	ldw	r2,-28(fp)
81123814:	10800d03 	ldbu	r2,52(r2)
81123818:	11003fcc 	andi	r4,r2,255
8112381c:	d0a08544 	addi	r2,gp,-32235
81123820:	2085883a 	add	r2,r4,r2
81123824:	11000003 	ldbu	r4,0(r2)
81123828:	e0bff917 	ldw	r2,-28(fp)
8112382c:	10800d43 	ldbu	r2,53(r2)
81123830:	2084b03a 	or	r2,r4,r2
81123834:	1009883a 	mov	r4,r2
81123838:	d0a08544 	addi	r2,gp,-32235
8112383c:	1885883a 	add	r2,r3,r2
81123840:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
81123844:	e0bff917 	ldw	r2,-28(fp)
81123848:	10800517 	ldw	r2,20(r2)
8112384c:	e0bff915 	stw	r2,-28(fp)
81123850:	e0bffb17 	ldw	r2,-20(fp)
81123854:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81123858:	e0bffe17 	ldw	r2,-8(fp)
8112385c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
81123860:	e0bff917 	ldw	r2,-28(fp)
81123864:	10800c83 	ldbu	r2,50(r2)
81123868:	10803fcc 	andi	r2,r2,255
8112386c:	10800798 	cmpnei	r2,r2,30
81123870:	103fb21e 	bne	r2,zero,8112373c <__reset+0xfb10373c>
81123874:	00000106 	br	8112387c <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
81123878:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
8112387c:	e037883a 	mov	sp,fp
81123880:	dfc00117 	ldw	ra,4(sp)
81123884:	df000017 	ldw	fp,0(sp)
81123888:	dec00204 	addi	sp,sp,8
8112388c:	f800283a 	ret

81123890 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
81123890:	deffff04 	addi	sp,sp,-4
81123894:	df000015 	stw	fp,0(sp)
81123898:	d839883a 	mov	fp,sp
    return (OS_VERSION);
8112389c:	00804784 	movi	r2,286
}
811238a0:	e037883a 	mov	sp,fp
811238a4:	df000017 	ldw	fp,0(sp)
811238a8:	dec00104 	addi	sp,sp,4
811238ac:	f800283a 	ret

811238b0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
811238b0:	deffff04 	addi	sp,sp,-4
811238b4:	df000015 	stw	fp,0(sp)
811238b8:	d839883a 	mov	fp,sp
}
811238bc:	0001883a 	nop
811238c0:	e037883a 	mov	sp,fp
811238c4:	df000017 	ldw	fp,0(sp)
811238c8:	dec00104 	addi	sp,sp,4
811238cc:	f800283a 	ret

811238d0 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
811238d0:	defff804 	addi	sp,sp,-32
811238d4:	dfc00715 	stw	ra,28(sp)
811238d8:	df000615 	stw	fp,24(sp)
811238dc:	df000604 	addi	fp,sp,24
811238e0:	e13ffc15 	stw	r4,-16(fp)
811238e4:	e17ffd15 	stw	r5,-12(fp)
811238e8:	3007883a 	mov	r3,r6
811238ec:	3805883a 	mov	r2,r7
811238f0:	e0fffe05 	stb	r3,-8(fp)
811238f4:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
811238f8:	e0bffc17 	ldw	r2,-16(fp)
811238fc:	10800283 	ldbu	r2,10(r2)
81123900:	10c03fcc 	andi	r3,r2,255
81123904:	00a044f4 	movhi	r2,33043
81123908:	109e4804 	addi	r2,r2,31008
8112390c:	10c5883a 	add	r2,r2,r3
81123910:	10800003 	ldbu	r2,0(r2)
81123914:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
81123918:	e0bffa03 	ldbu	r2,-24(fp)
8112391c:	e0fffc17 	ldw	r3,-16(fp)
81123920:	1885883a 	add	r2,r3,r2
81123924:	108002c4 	addi	r2,r2,11
81123928:	10800003 	ldbu	r2,0(r2)
8112392c:	10c03fcc 	andi	r3,r2,255
81123930:	00a044f4 	movhi	r2,33043
81123934:	109e4804 	addi	r2,r2,31008
81123938:	10c5883a 	add	r2,r2,r3
8112393c:	10800003 	ldbu	r2,0(r2)
81123940:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
81123944:	e0bffa03 	ldbu	r2,-24(fp)
81123948:	100490fa 	slli	r2,r2,3
8112394c:	1007883a 	mov	r3,r2
81123950:	e0bffa43 	ldbu	r2,-23(fp)
81123954:	1885883a 	add	r2,r3,r2
81123958:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
8112395c:	e0fffa83 	ldbu	r3,-22(fp)
81123960:	00a045b4 	movhi	r2,33046
81123964:	10b75704 	addi	r2,r2,-8868
81123968:	18c7883a 	add	r3,r3,r3
8112396c:	18c7883a 	add	r3,r3,r3
81123970:	10c5883a 	add	r2,r2,r3
81123974:	10800017 	ldw	r2,0(r2)
81123978:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
8112397c:	e0bffb17 	ldw	r2,-20(fp)
81123980:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
81123984:	e0bffb17 	ldw	r2,-20(fp)
81123988:	e0fffd17 	ldw	r3,-12(fp)
8112398c:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
81123990:	e0bffb17 	ldw	r2,-20(fp)
81123994:	10800c03 	ldbu	r2,48(r2)
81123998:	1007883a 	mov	r3,r2
8112399c:	e0bffe03 	ldbu	r2,-8(fp)
811239a0:	0084303a 	nor	r2,zero,r2
811239a4:	1884703a 	and	r2,r3,r2
811239a8:	1007883a 	mov	r3,r2
811239ac:	e0bffb17 	ldw	r2,-20(fp)
811239b0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
811239b4:	e0bffb17 	ldw	r2,-20(fp)
811239b8:	e0ffff03 	ldbu	r3,-4(fp)
811239bc:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
811239c0:	e0bffb17 	ldw	r2,-20(fp)
811239c4:	10800c03 	ldbu	r2,48(r2)
811239c8:	10803fcc 	andi	r2,r2,255
811239cc:	1080020c 	andi	r2,r2,8
811239d0:	1000111e 	bne	r2,zero,81123a18 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
811239d4:	e0bffb17 	ldw	r2,-20(fp)
811239d8:	10c00d83 	ldbu	r3,54(r2)
811239dc:	d0a08503 	ldbu	r2,-32236(gp)
811239e0:	1884b03a 	or	r2,r3,r2
811239e4:	d0a08505 	stb	r2,-32236(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
811239e8:	e0fffa03 	ldbu	r3,-24(fp)
811239ec:	e13ffa03 	ldbu	r4,-24(fp)
811239f0:	d0a08544 	addi	r2,gp,-32235
811239f4:	2085883a 	add	r2,r4,r2
811239f8:	11000003 	ldbu	r4,0(r2)
811239fc:	e0bffb17 	ldw	r2,-20(fp)
81123a00:	10800d43 	ldbu	r2,53(r2)
81123a04:	2084b03a 	or	r2,r4,r2
81123a08:	1009883a 	mov	r4,r2
81123a0c:	d0a08544 	addi	r2,gp,-32235
81123a10:	1885883a 	add	r2,r3,r2
81123a14:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
81123a18:	e17ffc17 	ldw	r5,-16(fp)
81123a1c:	e13ffb17 	ldw	r4,-20(fp)
81123a20:	1123cc80 	call	81123cc8 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
81123a24:	e0bffb17 	ldw	r2,-20(fp)
81123a28:	10800817 	ldw	r2,32(r2)
81123a2c:	10000826 	beq	r2,zero,81123a50 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
81123a30:	e0bffb17 	ldw	r2,-20(fp)
81123a34:	10800817 	ldw	r2,32(r2)
81123a38:	100b883a 	mov	r5,r2
81123a3c:	e13ffb17 	ldw	r4,-20(fp)
81123a40:	1123d800 	call	81123d80 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
81123a44:	e0bffb17 	ldw	r2,-20(fp)
81123a48:	e0fffc17 	ldw	r3,-16(fp)
81123a4c:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
81123a50:	e0bffa83 	ldbu	r2,-22(fp)
}
81123a54:	e037883a 	mov	sp,fp
81123a58:	dfc00117 	ldw	ra,4(sp)
81123a5c:	df000017 	ldw	fp,0(sp)
81123a60:	dec00204 	addi	sp,sp,8
81123a64:	f800283a 	ret

81123a68 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
81123a68:	defffd04 	addi	sp,sp,-12
81123a6c:	df000215 	stw	fp,8(sp)
81123a70:	df000204 	addi	fp,sp,8
81123a74:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
81123a78:	d0a08917 	ldw	r2,-32220(gp)
81123a7c:	e0ffff17 	ldw	r3,-4(fp)
81123a80:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
81123a84:	d0a08917 	ldw	r2,-32220(gp)
81123a88:	10800d03 	ldbu	r2,52(r2)
81123a8c:	10803fcc 	andi	r2,r2,255
81123a90:	d0e08917 	ldw	r3,-32220(gp)
81123a94:	18c00d03 	ldbu	r3,52(r3)
81123a98:	18c03fcc 	andi	r3,r3,255
81123a9c:	e13fff17 	ldw	r4,-4(fp)
81123aa0:	20c7883a 	add	r3,r4,r3
81123aa4:	18c002c4 	addi	r3,r3,11
81123aa8:	19000003 	ldbu	r4,0(r3)
81123aac:	d0e08917 	ldw	r3,-32220(gp)
81123ab0:	18c00d43 	ldbu	r3,53(r3)
81123ab4:	20c6b03a 	or	r3,r4,r3
81123ab8:	1809883a 	mov	r4,r3
81123abc:	e0ffff17 	ldw	r3,-4(fp)
81123ac0:	1885883a 	add	r2,r3,r2
81123ac4:	108002c4 	addi	r2,r2,11
81123ac8:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81123acc:	e0bfff17 	ldw	r2,-4(fp)
81123ad0:	10c00283 	ldbu	r3,10(r2)
81123ad4:	d0a08917 	ldw	r2,-32220(gp)
81123ad8:	10800d83 	ldbu	r2,54(r2)
81123adc:	1884b03a 	or	r2,r3,r2
81123ae0:	1007883a 	mov	r3,r2
81123ae4:	e0bfff17 	ldw	r2,-4(fp)
81123ae8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81123aec:	d0a08917 	ldw	r2,-32220(gp)
81123af0:	10800d03 	ldbu	r2,52(r2)
81123af4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81123af8:	e0fffe03 	ldbu	r3,-8(fp)
81123afc:	e13ffe03 	ldbu	r4,-8(fp)
81123b00:	d0a08544 	addi	r2,gp,-32235
81123b04:	2085883a 	add	r2,r4,r2
81123b08:	10800003 	ldbu	r2,0(r2)
81123b0c:	1009883a 	mov	r4,r2
81123b10:	d0a08917 	ldw	r2,-32220(gp)
81123b14:	10800d43 	ldbu	r2,53(r2)
81123b18:	0084303a 	nor	r2,zero,r2
81123b1c:	2084703a 	and	r2,r4,r2
81123b20:	1009883a 	mov	r4,r2
81123b24:	d0a08544 	addi	r2,gp,-32235
81123b28:	1885883a 	add	r2,r3,r2
81123b2c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81123b30:	e0fffe03 	ldbu	r3,-8(fp)
81123b34:	d0a08544 	addi	r2,gp,-32235
81123b38:	1885883a 	add	r2,r3,r2
81123b3c:	10800003 	ldbu	r2,0(r2)
81123b40:	10803fcc 	andi	r2,r2,255
81123b44:	1000071e 	bne	r2,zero,81123b64 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81123b48:	d0a08917 	ldw	r2,-32220(gp)
81123b4c:	10800d83 	ldbu	r2,54(r2)
81123b50:	0084303a 	nor	r2,zero,r2
81123b54:	1007883a 	mov	r3,r2
81123b58:	d0a08503 	ldbu	r2,-32236(gp)
81123b5c:	1884703a 	and	r2,r3,r2
81123b60:	d0a08505 	stb	r2,-32236(gp)
    }
}
81123b64:	0001883a 	nop
81123b68:	e037883a 	mov	sp,fp
81123b6c:	df000017 	ldw	fp,0(sp)
81123b70:	dec00104 	addi	sp,sp,4
81123b74:	f800283a 	ret

81123b78 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
81123b78:	defffb04 	addi	sp,sp,-20
81123b7c:	df000415 	stw	fp,16(sp)
81123b80:	df000404 	addi	fp,sp,16
81123b84:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
81123b88:	d0a08917 	ldw	r2,-32220(gp)
81123b8c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
81123b90:	d0a08917 	ldw	r2,-32220(gp)
81123b94:	e0ffff17 	ldw	r3,-4(fp)
81123b98:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
81123b9c:	e0bfff17 	ldw	r2,-4(fp)
81123ba0:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
81123ba4:	e0bffc17 	ldw	r2,-16(fp)
81123ba8:	10800017 	ldw	r2,0(r2)
81123bac:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81123bb0:	00002006 	br	81123c34 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
81123bb4:	d0a08917 	ldw	r2,-32220(gp)
81123bb8:	10800d03 	ldbu	r2,52(r2)
81123bbc:	10803fcc 	andi	r2,r2,255
81123bc0:	d0e08917 	ldw	r3,-32220(gp)
81123bc4:	18c00d03 	ldbu	r3,52(r3)
81123bc8:	18c03fcc 	andi	r3,r3,255
81123bcc:	e13ffd17 	ldw	r4,-12(fp)
81123bd0:	20c7883a 	add	r3,r4,r3
81123bd4:	18c002c4 	addi	r3,r3,11
81123bd8:	19000003 	ldbu	r4,0(r3)
81123bdc:	d0e08917 	ldw	r3,-32220(gp)
81123be0:	18c00d43 	ldbu	r3,53(r3)
81123be4:	20c6b03a 	or	r3,r4,r3
81123be8:	1809883a 	mov	r4,r3
81123bec:	e0fffd17 	ldw	r3,-12(fp)
81123bf0:	1885883a 	add	r2,r3,r2
81123bf4:	108002c4 	addi	r2,r2,11
81123bf8:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81123bfc:	e0bffd17 	ldw	r2,-12(fp)
81123c00:	10c00283 	ldbu	r3,10(r2)
81123c04:	d0a08917 	ldw	r2,-32220(gp)
81123c08:	10800d83 	ldbu	r2,54(r2)
81123c0c:	1884b03a 	or	r2,r3,r2
81123c10:	1007883a 	mov	r3,r2
81123c14:	e0bffd17 	ldw	r2,-12(fp)
81123c18:	10c00285 	stb	r3,10(r2)
        pevents++;
81123c1c:	e0bffc17 	ldw	r2,-16(fp)
81123c20:	10800104 	addi	r2,r2,4
81123c24:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
81123c28:	e0bffc17 	ldw	r2,-16(fp)
81123c2c:	10800017 	ldw	r2,0(r2)
81123c30:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81123c34:	e0bffd17 	ldw	r2,-12(fp)
81123c38:	103fde1e 	bne	r2,zero,81123bb4 <__reset+0xfb103bb4>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81123c3c:	d0a08917 	ldw	r2,-32220(gp)
81123c40:	10800d03 	ldbu	r2,52(r2)
81123c44:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81123c48:	e0fffe03 	ldbu	r3,-8(fp)
81123c4c:	e13ffe03 	ldbu	r4,-8(fp)
81123c50:	d0a08544 	addi	r2,gp,-32235
81123c54:	2085883a 	add	r2,r4,r2
81123c58:	10800003 	ldbu	r2,0(r2)
81123c5c:	1009883a 	mov	r4,r2
81123c60:	d0a08917 	ldw	r2,-32220(gp)
81123c64:	10800d43 	ldbu	r2,53(r2)
81123c68:	0084303a 	nor	r2,zero,r2
81123c6c:	2084703a 	and	r2,r4,r2
81123c70:	1009883a 	mov	r4,r2
81123c74:	d0a08544 	addi	r2,gp,-32235
81123c78:	1885883a 	add	r2,r3,r2
81123c7c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81123c80:	e0fffe03 	ldbu	r3,-8(fp)
81123c84:	d0a08544 	addi	r2,gp,-32235
81123c88:	1885883a 	add	r2,r3,r2
81123c8c:	10800003 	ldbu	r2,0(r2)
81123c90:	10803fcc 	andi	r2,r2,255
81123c94:	1000071e 	bne	r2,zero,81123cb4 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81123c98:	d0a08917 	ldw	r2,-32220(gp)
81123c9c:	10800d83 	ldbu	r2,54(r2)
81123ca0:	0084303a 	nor	r2,zero,r2
81123ca4:	1007883a 	mov	r3,r2
81123ca8:	d0a08503 	ldbu	r2,-32236(gp)
81123cac:	1884703a 	and	r2,r3,r2
81123cb0:	d0a08505 	stb	r2,-32236(gp)
    }
}
81123cb4:	0001883a 	nop
81123cb8:	e037883a 	mov	sp,fp
81123cbc:	df000017 	ldw	fp,0(sp)
81123cc0:	dec00104 	addi	sp,sp,4
81123cc4:	f800283a 	ret

81123cc8 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
81123cc8:	defffc04 	addi	sp,sp,-16
81123ccc:	df000315 	stw	fp,12(sp)
81123cd0:	df000304 	addi	fp,sp,12
81123cd4:	e13ffe15 	stw	r4,-8(fp)
81123cd8:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
81123cdc:	e0bffe17 	ldw	r2,-8(fp)
81123ce0:	10800d03 	ldbu	r2,52(r2)
81123ce4:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
81123ce8:	e0bffd03 	ldbu	r2,-12(fp)
81123cec:	e0fffd03 	ldbu	r3,-12(fp)
81123cf0:	e13fff17 	ldw	r4,-4(fp)
81123cf4:	20c7883a 	add	r3,r4,r3
81123cf8:	18c002c4 	addi	r3,r3,11
81123cfc:	18c00003 	ldbu	r3,0(r3)
81123d00:	1809883a 	mov	r4,r3
81123d04:	e0fffe17 	ldw	r3,-8(fp)
81123d08:	18c00d43 	ldbu	r3,53(r3)
81123d0c:	00c6303a 	nor	r3,zero,r3
81123d10:	20c6703a 	and	r3,r4,r3
81123d14:	1809883a 	mov	r4,r3
81123d18:	e0ffff17 	ldw	r3,-4(fp)
81123d1c:	1885883a 	add	r2,r3,r2
81123d20:	108002c4 	addi	r2,r2,11
81123d24:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
81123d28:	e0bffd03 	ldbu	r2,-12(fp)
81123d2c:	e0ffff17 	ldw	r3,-4(fp)
81123d30:	1885883a 	add	r2,r3,r2
81123d34:	108002c4 	addi	r2,r2,11
81123d38:	10800003 	ldbu	r2,0(r2)
81123d3c:	10803fcc 	andi	r2,r2,255
81123d40:	10000a1e 	bne	r2,zero,81123d6c <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
81123d44:	e0bfff17 	ldw	r2,-4(fp)
81123d48:	10800283 	ldbu	r2,10(r2)
81123d4c:	1007883a 	mov	r3,r2
81123d50:	e0bffe17 	ldw	r2,-8(fp)
81123d54:	10800d83 	ldbu	r2,54(r2)
81123d58:	0084303a 	nor	r2,zero,r2
81123d5c:	1884703a 	and	r2,r3,r2
81123d60:	1007883a 	mov	r3,r2
81123d64:	e0bfff17 	ldw	r2,-4(fp)
81123d68:	10c00285 	stb	r3,10(r2)
    }
}
81123d6c:	0001883a 	nop
81123d70:	e037883a 	mov	sp,fp
81123d74:	df000017 	ldw	fp,0(sp)
81123d78:	dec00104 	addi	sp,sp,4
81123d7c:	f800283a 	ret

81123d80 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
81123d80:	defffa04 	addi	sp,sp,-24
81123d84:	df000515 	stw	fp,20(sp)
81123d88:	df000504 	addi	fp,sp,20
81123d8c:	e13ffe15 	stw	r4,-8(fp)
81123d90:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
81123d94:	e0bffe17 	ldw	r2,-8(fp)
81123d98:	10800d03 	ldbu	r2,52(r2)
81123d9c:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
81123da0:	e0bffe17 	ldw	r2,-8(fp)
81123da4:	10800d83 	ldbu	r2,54(r2)
81123da8:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
81123dac:	e0bffe17 	ldw	r2,-8(fp)
81123db0:	10800d43 	ldbu	r2,53(r2)
81123db4:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
81123db8:	e0bfff17 	ldw	r2,-4(fp)
81123dbc:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
81123dc0:	e0bffb17 	ldw	r2,-20(fp)
81123dc4:	10800017 	ldw	r2,0(r2)
81123dc8:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81123dcc:	00002506 	br	81123e64 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
81123dd0:	e0bffd03 	ldbu	r2,-12(fp)
81123dd4:	e0fffd03 	ldbu	r3,-12(fp)
81123dd8:	e13ffc17 	ldw	r4,-16(fp)
81123ddc:	20c7883a 	add	r3,r4,r3
81123de0:	18c002c4 	addi	r3,r3,11
81123de4:	18c00003 	ldbu	r3,0(r3)
81123de8:	1809883a 	mov	r4,r3
81123dec:	e0fffd83 	ldbu	r3,-10(fp)
81123df0:	00c6303a 	nor	r3,zero,r3
81123df4:	20c6703a 	and	r3,r4,r3
81123df8:	1809883a 	mov	r4,r3
81123dfc:	e0fffc17 	ldw	r3,-16(fp)
81123e00:	1885883a 	add	r2,r3,r2
81123e04:	108002c4 	addi	r2,r2,11
81123e08:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
81123e0c:	e0bffd03 	ldbu	r2,-12(fp)
81123e10:	e0fffc17 	ldw	r3,-16(fp)
81123e14:	1885883a 	add	r2,r3,r2
81123e18:	108002c4 	addi	r2,r2,11
81123e1c:	10800003 	ldbu	r2,0(r2)
81123e20:	10803fcc 	andi	r2,r2,255
81123e24:	1000091e 	bne	r2,zero,81123e4c <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
81123e28:	e0bffc17 	ldw	r2,-16(fp)
81123e2c:	10800283 	ldbu	r2,10(r2)
81123e30:	1007883a 	mov	r3,r2
81123e34:	e0bffd43 	ldbu	r2,-11(fp)
81123e38:	0084303a 	nor	r2,zero,r2
81123e3c:	1884703a 	and	r2,r3,r2
81123e40:	1007883a 	mov	r3,r2
81123e44:	e0bffc17 	ldw	r2,-16(fp)
81123e48:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
81123e4c:	e0bffb17 	ldw	r2,-20(fp)
81123e50:	10800104 	addi	r2,r2,4
81123e54:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
81123e58:	e0bffb17 	ldw	r2,-20(fp)
81123e5c:	10800017 	ldw	r2,0(r2)
81123e60:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81123e64:	e0bffc17 	ldw	r2,-16(fp)
81123e68:	103fd91e 	bne	r2,zero,81123dd0 <__reset+0xfb103dd0>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
81123e6c:	0001883a 	nop
81123e70:	e037883a 	mov	sp,fp
81123e74:	df000017 	ldw	fp,0(sp)
81123e78:	dec00104 	addi	sp,sp,4
81123e7c:	f800283a 	ret

81123e80 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
81123e80:	defffc04 	addi	sp,sp,-16
81123e84:	df000315 	stw	fp,12(sp)
81123e88:	df000304 	addi	fp,sp,12
81123e8c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
81123e90:	e0bfff17 	ldw	r2,-4(fp)
81123e94:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
81123e98:	e0bfff17 	ldw	r2,-4(fp)
81123e9c:	108002c4 	addi	r2,r2,11
81123ea0:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81123ea4:	e03ffe05 	stb	zero,-8(fp)
81123ea8:	00000706 	br	81123ec8 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
81123eac:	e0bffd17 	ldw	r2,-12(fp)
81123eb0:	10c00044 	addi	r3,r2,1
81123eb4:	e0fffd15 	stw	r3,-12(fp)
81123eb8:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81123ebc:	e0bffe03 	ldbu	r2,-8(fp)
81123ec0:	10800044 	addi	r2,r2,1
81123ec4:	e0bffe05 	stb	r2,-8(fp)
81123ec8:	e0bffe03 	ldbu	r2,-8(fp)
81123ecc:	10800130 	cmpltui	r2,r2,4
81123ed0:	103ff61e 	bne	r2,zero,81123eac <__reset+0xfb103eac>
        *ptbl++ = 0;
    }
}
81123ed4:	0001883a 	nop
81123ed8:	e037883a 	mov	sp,fp
81123edc:	df000017 	ldw	fp,0(sp)
81123ee0:	dec00104 	addi	sp,sp,4
81123ee4:	f800283a 	ret

81123ee8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
81123ee8:	defffb04 	addi	sp,sp,-20
81123eec:	dfc00415 	stw	ra,16(sp)
81123ef0:	df000315 	stw	fp,12(sp)
81123ef4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
81123ef8:	0142d004 	movi	r5,2880
81123efc:	012045b4 	movhi	r4,33046
81123f00:	2131ae04 	addi	r4,r4,-14664
81123f04:	11242600 	call	81124260 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
81123f08:	00a045b4 	movhi	r2,33046
81123f0c:	10b1ae04 	addi	r2,r2,-14664
81123f10:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
81123f14:	00a045b4 	movhi	r2,33046
81123f18:	10b1ba04 	addi	r2,r2,-14616
81123f1c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81123f20:	e03ffd0d 	sth	zero,-12(fp)
81123f24:	00001306 	br	81123f74 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
81123f28:	e0bffe17 	ldw	r2,-8(fp)
81123f2c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
81123f30:	e0bffe17 	ldw	r2,-8(fp)
81123f34:	e0ffff17 	ldw	r3,-4(fp)
81123f38:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
81123f3c:	e0bffe17 	ldw	r2,-8(fp)
81123f40:	00c00fc4 	movi	r3,63
81123f44:	10c003c5 	stb	r3,15(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
81123f48:	e0bffe17 	ldw	r2,-8(fp)
81123f4c:	10000405 	stb	zero,16(r2)
#endif
        pevent1++;
81123f50:	e0bffe17 	ldw	r2,-8(fp)
81123f54:	10800c04 	addi	r2,r2,48
81123f58:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
81123f5c:	e0bfff17 	ldw	r2,-4(fp)
81123f60:	10800c04 	addi	r2,r2,48
81123f64:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81123f68:	e0bffd0b 	ldhu	r2,-12(fp)
81123f6c:	10800044 	addi	r2,r2,1
81123f70:	e0bffd0d 	sth	r2,-12(fp)
81123f74:	e0bffd0b 	ldhu	r2,-12(fp)
81123f78:	10800ef0 	cmpltui	r2,r2,59
81123f7c:	103fea1e 	bne	r2,zero,81123f28 <__reset+0xfb103f28>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
81123f80:	e0bffe17 	ldw	r2,-8(fp)
81123f84:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
81123f88:	e0bffe17 	ldw	r2,-8(fp)
81123f8c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
81123f90:	e0bffe17 	ldw	r2,-8(fp)
81123f94:	00c00fc4 	movi	r3,63
81123f98:	10c003c5 	stb	r3,15(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
81123f9c:	e0bffe17 	ldw	r2,-8(fp)
81123fa0:	10000405 	stb	zero,16(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
81123fa4:	00a045b4 	movhi	r2,33046
81123fa8:	10b1ae04 	addi	r2,r2,-14664
81123fac:	d0a08715 	stw	r2,-32228(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
81123fb0:	0001883a 	nop
81123fb4:	e037883a 	mov	sp,fp
81123fb8:	dfc00117 	ldw	ra,4(sp)
81123fbc:	df000017 	ldw	fp,0(sp)
81123fc0:	dec00204 	addi	sp,sp,8
81123fc4:	f800283a 	ret

81123fc8 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
81123fc8:	deffff04 	addi	sp,sp,-4
81123fcc:	df000015 	stw	fp,0(sp)
81123fd0:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
81123fd4:	d0208a15 	stw	zero,-32216(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
81123fd8:	d0208805 	stb	zero,-32224(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
81123fdc:	d0207905 	stb	zero,-32284(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
81123fe0:	d0208145 	stb	zero,-32251(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
81123fe4:	d0207945 	stb	zero,-32283(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
81123fe8:	d0207e15 	stw	zero,-32264(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
81123fec:	d0207a15 	stw	zero,-32280(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
81123ff0:	d0208d15 	stw	zero,-32204(gp)
    OSIdleCtrMax  = 0L;
81123ff4:	d0207f15 	stw	zero,-32260(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
81123ff8:	d0208c05 	stb	zero,-32208(gp)
#endif
}
81123ffc:	0001883a 	nop
81124000:	e037883a 	mov	sp,fp
81124004:	df000017 	ldw	fp,0(sp)
81124008:	dec00104 	addi	sp,sp,4
8112400c:	f800283a 	ret

81124010 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
81124010:	defffd04 	addi	sp,sp,-12
81124014:	df000215 	stw	fp,8(sp)
81124018:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
8112401c:	d0208505 	stb	zero,-32236(gp)
    prdytbl       = &OSRdyTbl[0];
81124020:	d0a08544 	addi	r2,gp,-32235
81124024:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81124028:	e03ffe05 	stb	zero,-8(fp)
8112402c:	00000706 	br	8112404c <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
81124030:	e0bfff17 	ldw	r2,-4(fp)
81124034:	10c00044 	addi	r3,r2,1
81124038:	e0ffff15 	stw	r3,-4(fp)
8112403c:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81124040:	e0bffe03 	ldbu	r2,-8(fp)
81124044:	10800044 	addi	r2,r2,1
81124048:	e0bffe05 	stb	r2,-8(fp)
8112404c:	e0bffe03 	ldbu	r2,-8(fp)
81124050:	10800130 	cmpltui	r2,r2,4
81124054:	103ff61e 	bne	r2,zero,81124030 <__reset+0xfb104030>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
81124058:	d0207b45 	stb	zero,-32275(gp)
    OSPrioHighRdy = 0;
8112405c:	d0207b05 	stb	zero,-32276(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
81124060:	d0208315 	stw	zero,-32244(gp)
    OSTCBCur      = (OS_TCB *)0;
81124064:	d0208915 	stw	zero,-32220(gp)
}
81124068:	0001883a 	nop
8112406c:	e037883a 	mov	sp,fp
81124070:	df000017 	ldw	fp,0(sp)
81124074:	dec00104 	addi	sp,sp,4
81124078:	f800283a 	ret

8112407c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
8112407c:	defff804 	addi	sp,sp,-32
81124080:	dfc00715 	stw	ra,28(sp)
81124084:	df000615 	stw	fp,24(sp)
81124088:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
8112408c:	008000c4 	movi	r2,3
81124090:	d8800415 	stw	r2,16(sp)
81124094:	d8000315 	stw	zero,12(sp)
81124098:	00808004 	movi	r2,512
8112409c:	d8800215 	stw	r2,8(sp)
811240a0:	00a045b4 	movhi	r2,33046
811240a4:	10afae04 	addi	r2,r2,-16712
811240a8:	d8800115 	stw	r2,4(sp)
811240ac:	00bfffd4 	movui	r2,65535
811240b0:	d8800015 	stw	r2,0(sp)
811240b4:	01c00784 	movi	r7,30
811240b8:	01a045b4 	movhi	r6,33046
811240bc:	31b1ad04 	addi	r6,r6,-14668
811240c0:	000b883a 	mov	r5,zero
811240c4:	012044b4 	movhi	r4,33042
811240c8:	21114a04 	addi	r4,r4,17704
811240cc:	1129d100 	call	81129d10 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
811240d0:	e1bfff04 	addi	r6,fp,-4
811240d4:	016044f4 	movhi	r5,33043
811240d8:	295e8804 	addi	r5,r5,31264
811240dc:	01000784 	movi	r4,30
811240e0:	112a5200 	call	8112a520 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
811240e4:	0001883a 	nop
811240e8:	e037883a 	mov	sp,fp
811240ec:	dfc00117 	ldw	ra,4(sp)
811240f0:	df000017 	ldw	fp,0(sp)
811240f4:	dec00204 	addi	sp,sp,8
811240f8:	f800283a 	ret

811240fc <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
811240fc:	defff804 	addi	sp,sp,-32
81124100:	dfc00715 	stw	ra,28(sp)
81124104:	df000615 	stw	fp,24(sp)
81124108:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
8112410c:	008000c4 	movi	r2,3
81124110:	d8800415 	stw	r2,16(sp)
81124114:	d8000315 	stw	zero,12(sp)
81124118:	00808004 	movi	r2,512
8112411c:	d8800215 	stw	r2,8(sp)
81124120:	00a045b4 	movhi	r2,33046
81124124:	10ad3604 	addi	r2,r2,-19240
81124128:	d8800115 	stw	r2,4(sp)
8112412c:	00bfff94 	movui	r2,65534
81124130:	d8800015 	stw	r2,0(sp)
81124134:	01c00744 	movi	r7,29
81124138:	01a045b4 	movhi	r6,33046
8112413c:	31af3504 	addi	r6,r6,-17196
81124140:	000b883a 	mov	r5,zero
81124144:	012044b4 	movhi	r4,33042
81124148:	21116104 	addi	r4,r4,17796
8112414c:	1129d100 	call	81129d10 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
81124150:	e1bfff04 	addi	r6,fp,-4
81124154:	016044f4 	movhi	r5,33043
81124158:	295e8c04 	addi	r5,r5,31280
8112415c:	01000744 	movi	r4,29
81124160:	112a5200 	call	8112a520 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
81124164:	0001883a 	nop
81124168:	e037883a 	mov	sp,fp
8112416c:	dfc00117 	ldw	ra,4(sp)
81124170:	df000017 	ldw	fp,0(sp)
81124174:	dec00204 	addi	sp,sp,8
81124178:	f800283a 	ret

8112417c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
8112417c:	defffb04 	addi	sp,sp,-20
81124180:	dfc00415 	stw	ra,16(sp)
81124184:	df000315 	stw	fp,12(sp)
81124188:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
8112418c:	0142d904 	movi	r5,2916
81124190:	012045b4 	movhi	r4,33046
81124194:	21347e04 	addi	r4,r4,-11784
81124198:	11242600 	call	81124260 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
8112419c:	01401f04 	movi	r5,124
811241a0:	012045b4 	movhi	r4,33046
811241a4:	21375704 	addi	r4,r4,-8868
811241a8:	11242600 	call	81124260 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
811241ac:	00a045b4 	movhi	r2,33046
811241b0:	10b47e04 	addi	r2,r2,-11784
811241b4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
811241b8:	00a045b4 	movhi	r2,33046
811241bc:	10b49904 	addi	r2,r2,-11676
811241c0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
811241c4:	e03ffd05 	stb	zero,-12(fp)
811241c8:	00001106 	br	81124210 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
811241cc:	e0bffe17 	ldw	r2,-8(fp)
811241d0:	e0ffff17 	ldw	r3,-4(fp)
811241d4:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
811241d8:	e0bffe17 	ldw	r2,-8(fp)
811241dc:	00c00fc4 	movi	r3,63
811241e0:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
811241e4:	e0bffe17 	ldw	r2,-8(fp)
811241e8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
811241ec:	e0bffe17 	ldw	r2,-8(fp)
811241f0:	10801b04 	addi	r2,r2,108
811241f4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
811241f8:	e0bfff17 	ldw	r2,-4(fp)
811241fc:	10801b04 	addi	r2,r2,108
81124200:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81124204:	e0bffd03 	ldbu	r2,-12(fp)
81124208:	10800044 	addi	r2,r2,1
8112420c:	e0bffd05 	stb	r2,-12(fp)
81124210:	e0bffd03 	ldbu	r2,-12(fp)
81124214:	108006b0 	cmpltui	r2,r2,26
81124218:	103fec1e 	bne	r2,zero,811241cc <__reset+0xfb1041cc>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
8112421c:	e0bffe17 	ldw	r2,-8(fp)
81124220:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
81124224:	e0bffe17 	ldw	r2,-8(fp)
81124228:	00c00fc4 	movi	r3,63
8112422c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81124230:	e0bffe17 	ldw	r2,-8(fp)
81124234:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
81124238:	d0207c15 	stw	zero,-32272(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
8112423c:	00a045b4 	movhi	r2,33046
81124240:	10b47e04 	addi	r2,r2,-11784
81124244:	d0a08015 	stw	r2,-32256(gp)
}
81124248:	0001883a 	nop
8112424c:	e037883a 	mov	sp,fp
81124250:	dfc00117 	ldw	ra,4(sp)
81124254:	df000017 	ldw	fp,0(sp)
81124258:	dec00204 	addi	sp,sp,8
8112425c:	f800283a 	ret

81124260 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
81124260:	defffd04 	addi	sp,sp,-12
81124264:	df000215 	stw	fp,8(sp)
81124268:	df000204 	addi	fp,sp,8
8112426c:	e13ffe15 	stw	r4,-8(fp)
81124270:	2805883a 	mov	r2,r5
81124274:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81124278:	00000706 	br	81124298 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
8112427c:	e0bffe17 	ldw	r2,-8(fp)
81124280:	10c00044 	addi	r3,r2,1
81124284:	e0fffe15 	stw	r3,-8(fp)
81124288:	10000005 	stb	zero,0(r2)
        size--;
8112428c:	e0bfff0b 	ldhu	r2,-4(fp)
81124290:	10bfffc4 	addi	r2,r2,-1
81124294:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
81124298:	e0bfff0b 	ldhu	r2,-4(fp)
8112429c:	103ff71e 	bne	r2,zero,8112427c <__reset+0xfb10427c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
811242a0:	0001883a 	nop
811242a4:	e037883a 	mov	sp,fp
811242a8:	df000017 	ldw	fp,0(sp)
811242ac:	dec00104 	addi	sp,sp,4
811242b0:	f800283a 	ret

811242b4 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
811242b4:	defffc04 	addi	sp,sp,-16
811242b8:	df000315 	stw	fp,12(sp)
811242bc:	df000304 	addi	fp,sp,12
811242c0:	e13ffd15 	stw	r4,-12(fp)
811242c4:	e17ffe15 	stw	r5,-8(fp)
811242c8:	3005883a 	mov	r2,r6
811242cc:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
811242d0:	00000b06 	br	81124300 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
811242d4:	e0bffd17 	ldw	r2,-12(fp)
811242d8:	10c00044 	addi	r3,r2,1
811242dc:	e0fffd15 	stw	r3,-12(fp)
811242e0:	e0fffe17 	ldw	r3,-8(fp)
811242e4:	19000044 	addi	r4,r3,1
811242e8:	e13ffe15 	stw	r4,-8(fp)
811242ec:	18c00003 	ldbu	r3,0(r3)
811242f0:	10c00005 	stb	r3,0(r2)
        size--;
811242f4:	e0bfff0b 	ldhu	r2,-4(fp)
811242f8:	10bfffc4 	addi	r2,r2,-1
811242fc:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
81124300:	e0bfff0b 	ldhu	r2,-4(fp)
81124304:	103ff31e 	bne	r2,zero,811242d4 <__reset+0xfb1042d4>
        *pdest++ = *psrc++;
        size--;
    }
}
81124308:	0001883a 	nop
8112430c:	e037883a 	mov	sp,fp
81124310:	df000017 	ldw	fp,0(sp)
81124314:	dec00104 	addi	sp,sp,4
81124318:	f800283a 	ret

8112431c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
8112431c:	defffb04 	addi	sp,sp,-20
81124320:	dfc00415 	stw	ra,16(sp)
81124324:	df000315 	stw	fp,12(sp)
81124328:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112432c:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124330:	0005303a 	rdctl	r2,status
81124334:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124338:	e0ffff17 	ldw	r3,-4(fp)
8112433c:	00bfff84 	movi	r2,-2
81124340:	1884703a 	and	r2,r3,r2
81124344:	1001703a 	wrctl	status,r2
  
  return context;
81124348:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
8112434c:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
81124350:	d0a08803 	ldbu	r2,-32224(gp)
81124354:	10803fcc 	andi	r2,r2,255
81124358:	10001a1e 	bne	r2,zero,811243c4 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
8112435c:	d0a07903 	ldbu	r2,-32284(gp)
81124360:	10803fcc 	andi	r2,r2,255
81124364:	1000171e 	bne	r2,zero,811243c4 <OS_Sched+0xa8>
            OS_SchedNew();
81124368:	11243ec0 	call	811243ec <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
8112436c:	d0e07b03 	ldbu	r3,-32276(gp)
81124370:	d0a07b43 	ldbu	r2,-32275(gp)
81124374:	18c03fcc 	andi	r3,r3,255
81124378:	10803fcc 	andi	r2,r2,255
8112437c:	18801126 	beq	r3,r2,811243c4 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
81124380:	d0a07b03 	ldbu	r2,-32276(gp)
81124384:	10c03fcc 	andi	r3,r2,255
81124388:	00a045b4 	movhi	r2,33046
8112438c:	10b75704 	addi	r2,r2,-8868
81124390:	18c7883a 	add	r3,r3,r3
81124394:	18c7883a 	add	r3,r3,r3
81124398:	10c5883a 	add	r2,r2,r3
8112439c:	10800017 	ldw	r2,0(r2)
811243a0:	d0a08315 	stw	r2,-32244(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
811243a4:	d0a08317 	ldw	r2,-32244(gp)
811243a8:	10c00e17 	ldw	r3,56(r2)
811243ac:	18c00044 	addi	r3,r3,1
811243b0:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
811243b4:	d0a07e17 	ldw	r2,-32264(gp)
811243b8:	10800044 	addi	r2,r2,1
811243bc:	d0a07e15 	stw	r2,-32264(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
811243c0:	1134aec0 	call	81134aec <OSCtxSw>
811243c4:	e0bffd17 	ldw	r2,-12(fp)
811243c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811243cc:	e0bffe17 	ldw	r2,-8(fp)
811243d0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
811243d4:	0001883a 	nop
811243d8:	e037883a 	mov	sp,fp
811243dc:	dfc00117 	ldw	ra,4(sp)
811243e0:	df000017 	ldw	fp,0(sp)
811243e4:	dec00204 	addi	sp,sp,8
811243e8:	f800283a 	ret

811243ec <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
811243ec:	defffe04 	addi	sp,sp,-8
811243f0:	df000115 	stw	fp,4(sp)
811243f4:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
811243f8:	d0a08503 	ldbu	r2,-32236(gp)
811243fc:	10c03fcc 	andi	r3,r2,255
81124400:	00a044f4 	movhi	r2,33043
81124404:	109e4804 	addi	r2,r2,31008
81124408:	10c5883a 	add	r2,r2,r3
8112440c:	10800003 	ldbu	r2,0(r2)
81124410:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
81124414:	e0bfff03 	ldbu	r2,-4(fp)
81124418:	100490fa 	slli	r2,r2,3
8112441c:	1009883a 	mov	r4,r2
81124420:	e0ffff03 	ldbu	r3,-4(fp)
81124424:	d0a08544 	addi	r2,gp,-32235
81124428:	1885883a 	add	r2,r3,r2
8112442c:	10800003 	ldbu	r2,0(r2)
81124430:	10c03fcc 	andi	r3,r2,255
81124434:	00a044f4 	movhi	r2,33043
81124438:	109e4804 	addi	r2,r2,31008
8112443c:	10c5883a 	add	r2,r2,r3
81124440:	10800003 	ldbu	r2,0(r2)
81124444:	2085883a 	add	r2,r4,r2
81124448:	d0a07b05 	stb	r2,-32276(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
8112444c:	0001883a 	nop
81124450:	e037883a 	mov	sp,fp
81124454:	df000017 	ldw	fp,0(sp)
81124458:	dec00104 	addi	sp,sp,4
8112445c:	f800283a 	ret

81124460 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
81124460:	defffc04 	addi	sp,sp,-16
81124464:	df000315 	stw	fp,12(sp)
81124468:	df000304 	addi	fp,sp,12
8112446c:	e13ffe15 	stw	r4,-8(fp)
81124470:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
81124474:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
81124478:	00000b06 	br	811244a8 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
8112447c:	e0bffe17 	ldw	r2,-8(fp)
81124480:	10c00044 	addi	r3,r2,1
81124484:	e0fffe15 	stw	r3,-8(fp)
81124488:	e0ffff17 	ldw	r3,-4(fp)
8112448c:	19000044 	addi	r4,r3,1
81124490:	e13fff15 	stw	r4,-4(fp)
81124494:	18c00003 	ldbu	r3,0(r3)
81124498:	10c00005 	stb	r3,0(r2)
        len++;
8112449c:	e0bffd03 	ldbu	r2,-12(fp)
811244a0:	10800044 	addi	r2,r2,1
811244a4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
811244a8:	e0bfff17 	ldw	r2,-4(fp)
811244ac:	10800003 	ldbu	r2,0(r2)
811244b0:	10803fcc 	andi	r2,r2,255
811244b4:	103ff11e 	bne	r2,zero,8112447c <__reset+0xfb10447c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
811244b8:	e0bffe17 	ldw	r2,-8(fp)
811244bc:	10000005 	stb	zero,0(r2)
    return (len);
811244c0:	e0bffd03 	ldbu	r2,-12(fp)
}
811244c4:	e037883a 	mov	sp,fp
811244c8:	df000017 	ldw	fp,0(sp)
811244cc:	dec00104 	addi	sp,sp,4
811244d0:	f800283a 	ret

811244d4 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
811244d4:	defffd04 	addi	sp,sp,-12
811244d8:	df000215 	stw	fp,8(sp)
811244dc:	df000204 	addi	fp,sp,8
811244e0:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
811244e4:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
811244e8:	00000606 	br	81124504 <OS_StrLen+0x30>
        psrc++;
811244ec:	e0bfff17 	ldw	r2,-4(fp)
811244f0:	10800044 	addi	r2,r2,1
811244f4:	e0bfff15 	stw	r2,-4(fp)
        len++;
811244f8:	e0bffe03 	ldbu	r2,-8(fp)
811244fc:	10800044 	addi	r2,r2,1
81124500:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81124504:	e0bfff17 	ldw	r2,-4(fp)
81124508:	10800003 	ldbu	r2,0(r2)
8112450c:	10803fcc 	andi	r2,r2,255
81124510:	103ff61e 	bne	r2,zero,811244ec <__reset+0xfb1044ec>
        psrc++;
        len++;
    }
    return (len);
81124514:	e0bffe03 	ldbu	r2,-8(fp)
}
81124518:	e037883a 	mov	sp,fp
8112451c:	df000017 	ldw	fp,0(sp)
81124520:	dec00104 	addi	sp,sp,4
81124524:	f800283a 	ret

81124528 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
81124528:	defffa04 	addi	sp,sp,-24
8112452c:	dfc00515 	stw	ra,20(sp)
81124530:	df000415 	stw	fp,16(sp)
81124534:	df000404 	addi	fp,sp,16
81124538:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112453c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124540:	0005303a 	rdctl	r2,status
81124544:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124548:	e0fffd17 	ldw	r3,-12(fp)
8112454c:	00bfff84 	movi	r2,-2
81124550:	1884703a 	and	r2,r3,r2
81124554:	1001703a 	wrctl	status,r2
  
  return context;
81124558:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
8112455c:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
81124560:	d0a07a17 	ldw	r2,-32280(gp)
81124564:	10800044 	addi	r2,r2,1
81124568:	d0a07a15 	stw	r2,-32280(gp)
8112456c:	e0bffc17 	ldw	r2,-16(fp)
81124570:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124574:	e0bffe17 	ldw	r2,-8(fp)
81124578:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
8112457c:	1134e000 	call	81134e00 <OSTaskIdleHook>
    }
81124580:	003fef06 	br	81124540 <__reset+0xfb104540>

81124584 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
81124584:	defff804 	addi	sp,sp,-32
81124588:	dfc00715 	stw	ra,28(sp)
8112458c:	df000615 	stw	fp,24(sp)
81124590:	dc400515 	stw	r17,20(sp)
81124594:	dc000415 	stw	r16,16(sp)
81124598:	df000604 	addi	fp,sp,24
8112459c:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811245a0:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
811245a4:	00000206 	br	811245b0 <OS_TaskStat+0x2c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
811245a8:	01003204 	movi	r4,200
811245ac:	112ade00 	call	8112ade0 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
811245b0:	d0a08c03 	ldbu	r2,-32208(gp)
811245b4:	10803fcc 	andi	r2,r2,255
811245b8:	103ffb26 	beq	r2,zero,811245a8 <__reset+0xfb1045a8>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
811245bc:	d0e07f17 	ldw	r3,-32260(gp)
811245c0:	00947b34 	movhi	r2,20972
811245c4:	10a147c4 	addi	r2,r2,-31457
811245c8:	1888383a 	mulxuu	r4,r3,r2
811245cc:	1885383a 	mul	r2,r3,r2
811245d0:	1021883a 	mov	r16,r2
811245d4:	2023883a 	mov	r17,r4
811245d8:	8804d17a 	srli	r2,r17,5
811245dc:	d0a07f15 	stw	r2,-32260(gp)
    if (OSIdleCtrMax == 0L) {
811245e0:	d0a07f17 	ldw	r2,-32260(gp)
811245e4:	1000031e 	bne	r2,zero,811245f4 <OS_TaskStat+0x70>
        OSCPUUsage = 0;
811245e8:	d0208105 	stb	zero,-32252(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
811245ec:	01003fc4 	movi	r4,255
811245f0:	112aa680 	call	8112aa68 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811245f4:	0005303a 	rdctl	r2,status
811245f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811245fc:	e0fffb17 	ldw	r3,-20(fp)
81124600:	00bfff84 	movi	r2,-2
81124604:	1884703a 	and	r2,r3,r2
81124608:	1001703a 	wrctl	status,r2
  
  return context;
8112460c:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
81124610:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
81124614:	d0a07a17 	ldw	r2,-32280(gp)
81124618:	d0a08d15 	stw	r2,-32204(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
8112461c:	d0207a15 	stw	zero,-32280(gp)
81124620:	e0bffa17 	ldw	r2,-24(fp)
81124624:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124628:	e0bffc17 	ldw	r2,-16(fp)
8112462c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
81124630:	d0e08d17 	ldw	r3,-32204(gp)
81124634:	d0a07f17 	ldw	r2,-32260(gp)
81124638:	1885203a 	divu	r2,r3,r2
8112463c:	1007883a 	mov	r3,r2
81124640:	00801904 	movi	r2,100
81124644:	10c5c83a 	sub	r2,r2,r3
81124648:	d0a08105 	stb	r2,-32252(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
8112464c:	1134d800 	call	81134d80 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
81124650:	11246600 	call	81124660 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
81124654:	01001904 	movi	r4,100
81124658:	112ade00 	call	8112ade0 <OSTimeDly>
    }
8112465c:	003fe506 	br	811245f4 <__reset+0xfb1045f4>

81124660 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
81124660:	defffa04 	addi	sp,sp,-24
81124664:	dfc00515 	stw	ra,20(sp)
81124668:	df000415 	stw	fp,16(sp)
8112466c:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
81124670:	e03ffc05 	stb	zero,-16(fp)
81124674:	00002406 	br	81124708 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
81124678:	e0bffc03 	ldbu	r2,-16(fp)
8112467c:	e0fffe04 	addi	r3,fp,-8
81124680:	180b883a 	mov	r5,r3
81124684:	1009883a 	mov	r4,r2
81124688:	112a8a80 	call	8112a8a8 <OSTaskStkChk>
8112468c:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
81124690:	e0bffc43 	ldbu	r2,-15(fp)
81124694:	1000191e 	bne	r2,zero,811246fc <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
81124698:	e0fffc03 	ldbu	r3,-16(fp)
8112469c:	00a045b4 	movhi	r2,33046
811246a0:	10b75704 	addi	r2,r2,-8868
811246a4:	18c7883a 	add	r3,r3,r3
811246a8:	18c7883a 	add	r3,r3,r3
811246ac:	10c5883a 	add	r2,r2,r3
811246b0:	10800017 	ldw	r2,0(r2)
811246b4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
811246b8:	e0bffd17 	ldw	r2,-12(fp)
811246bc:	10000f26 	beq	r2,zero,811246fc <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
811246c0:	e0bffd17 	ldw	r2,-12(fp)
811246c4:	10800060 	cmpeqi	r2,r2,1
811246c8:	10000c1e 	bne	r2,zero,811246fc <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
811246cc:	e0bffd17 	ldw	r2,-12(fp)
811246d0:	10c00217 	ldw	r3,8(r2)
811246d4:	e0bffd17 	ldw	r2,-12(fp)
811246d8:	10800317 	ldw	r2,12(r2)
811246dc:	1085883a 	add	r2,r2,r2
811246e0:	1085883a 	add	r2,r2,r2
811246e4:	1887883a 	add	r3,r3,r2
811246e8:	e0bffd17 	ldw	r2,-12(fp)
811246ec:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
811246f0:	e0ffff17 	ldw	r3,-4(fp)
811246f4:	e0bffd17 	ldw	r2,-12(fp)
811246f8:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
811246fc:	e0bffc03 	ldbu	r2,-16(fp)
81124700:	10800044 	addi	r2,r2,1
81124704:	e0bffc05 	stb	r2,-16(fp)
81124708:	e0bffc03 	ldbu	r2,-16(fp)
8112470c:	108007f0 	cmpltui	r2,r2,31
81124710:	103fd91e 	bne	r2,zero,81124678 <__reset+0xfb104678>
#endif
                }
            }
        }
    }
}
81124714:	0001883a 	nop
81124718:	e037883a 	mov	sp,fp
8112471c:	dfc00117 	ldw	ra,4(sp)
81124720:	df000017 	ldw	fp,0(sp)
81124724:	dec00204 	addi	sp,sp,8
81124728:	f800283a 	ret

8112472c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
8112472c:	defff204 	addi	sp,sp,-56
81124730:	dfc00d15 	stw	ra,52(sp)
81124734:	df000c15 	stw	fp,48(sp)
81124738:	df000c04 	addi	fp,sp,48
8112473c:	e17ffc15 	stw	r5,-16(fp)
81124740:	e1bffd15 	stw	r6,-12(fp)
81124744:	3807883a 	mov	r3,r7
81124748:	e0800417 	ldw	r2,16(fp)
8112474c:	e13ffb05 	stb	r4,-20(fp)
81124750:	e0fffe0d 	sth	r3,-8(fp)
81124754:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81124758:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112475c:	0005303a 	rdctl	r2,status
81124760:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124764:	e0fffa17 	ldw	r3,-24(fp)
81124768:	00bfff84 	movi	r2,-2
8112476c:	1884703a 	and	r2,r3,r2
81124770:	1001703a 	wrctl	status,r2
  
  return context;
81124774:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
81124778:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
8112477c:	d0a08017 	ldw	r2,-32256(gp)
81124780:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
81124784:	e0bff617 	ldw	r2,-40(fp)
81124788:	10009326 	beq	r2,zero,811249d8 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
8112478c:	e0bff617 	ldw	r2,-40(fp)
81124790:	10800517 	ldw	r2,20(r2)
81124794:	d0a08015 	stw	r2,-32256(gp)
81124798:	e0bff417 	ldw	r2,-48(fp)
8112479c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811247a0:	e0bff817 	ldw	r2,-32(fp)
811247a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
811247a8:	e0bff617 	ldw	r2,-40(fp)
811247ac:	e0fffc17 	ldw	r3,-16(fp)
811247b0:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
811247b4:	e0bff617 	ldw	r2,-40(fp)
811247b8:	e0fffb03 	ldbu	r3,-20(fp)
811247bc:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
811247c0:	e0bff617 	ldw	r2,-40(fp)
811247c4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
811247c8:	e0bff617 	ldw	r2,-40(fp)
811247cc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
811247d0:	e0bff617 	ldw	r2,-40(fp)
811247d4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
811247d8:	e0bff617 	ldw	r2,-40(fp)
811247dc:	e0c00317 	ldw	r3,12(fp)
811247e0:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
811247e4:	e0bff617 	ldw	r2,-40(fp)
811247e8:	e0c00217 	ldw	r3,8(fp)
811247ec:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
811247f0:	e0bff617 	ldw	r2,-40(fp)
811247f4:	e0fffd17 	ldw	r3,-12(fp)
811247f8:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
811247fc:	e0bff617 	ldw	r2,-40(fp)
81124800:	e0ffff0b 	ldhu	r3,-4(fp)
81124804:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
81124808:	e0bff617 	ldw	r2,-40(fp)
8112480c:	e0fffe0b 	ldhu	r3,-8(fp)
81124810:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
81124814:	e0bff617 	ldw	r2,-40(fp)
81124818:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
8112481c:	e0bffb03 	ldbu	r2,-20(fp)
81124820:	1004d0fa 	srli	r2,r2,3
81124824:	1007883a 	mov	r3,r2
81124828:	e0bff617 	ldw	r2,-40(fp)
8112482c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
81124830:	e0bffb03 	ldbu	r2,-20(fp)
81124834:	108001cc 	andi	r2,r2,7
81124838:	1007883a 	mov	r3,r2
8112483c:	e0bff617 	ldw	r2,-40(fp)
81124840:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
81124844:	e0bff617 	ldw	r2,-40(fp)
81124848:	10800d03 	ldbu	r2,52(r2)
8112484c:	10803fcc 	andi	r2,r2,255
81124850:	00c00044 	movi	r3,1
81124854:	1884983a 	sll	r2,r3,r2
81124858:	1007883a 	mov	r3,r2
8112485c:	e0bff617 	ldw	r2,-40(fp)
81124860:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
81124864:	e0bff617 	ldw	r2,-40(fp)
81124868:	10800cc3 	ldbu	r2,51(r2)
8112486c:	10803fcc 	andi	r2,r2,255
81124870:	00c00044 	movi	r3,1
81124874:	1884983a 	sll	r2,r3,r2
81124878:	1007883a 	mov	r3,r2
8112487c:	e0bff617 	ldw	r2,-40(fp)
81124880:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
81124884:	e0bff617 	ldw	r2,-40(fp)
81124888:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
8112488c:	e0bff617 	ldw	r2,-40(fp)
81124890:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
81124894:	e0bff617 	ldw	r2,-40(fp)
81124898:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
8112489c:	e0bff617 	ldw	r2,-40(fp)
811248a0:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
811248a4:	e0bff617 	ldw	r2,-40(fp)
811248a8:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
811248ac:	e0bff617 	ldw	r2,-40(fp)
811248b0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
811248b4:	e0bff617 	ldw	r2,-40(fp)
811248b8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
811248bc:	e0bff617 	ldw	r2,-40(fp)
811248c0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
811248c4:	e0bff617 	ldw	r2,-40(fp)
811248c8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
811248cc:	e0bff617 	ldw	r2,-40(fp)
811248d0:	00c00fc4 	movi	r3,63
811248d4:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
811248d8:	e0bff617 	ldw	r2,-40(fp)
811248dc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
811248e0:	e13ff617 	ldw	r4,-40(fp)
811248e4:	1134e200 	call	81134e20 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
811248e8:	e13ff617 	ldw	r4,-40(fp)
811248ec:	1134d180 	call	81134d18 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811248f0:	0005303a 	rdctl	r2,status
811248f4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811248f8:	e0fff517 	ldw	r3,-44(fp)
811248fc:	00bfff84 	movi	r2,-2
81124900:	1884703a 	and	r2,r3,r2
81124904:	1001703a 	wrctl	status,r2
  
  return context;
81124908:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
8112490c:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
81124910:	e0fffb03 	ldbu	r3,-20(fp)
81124914:	00a045b4 	movhi	r2,33046
81124918:	10b75704 	addi	r2,r2,-8868
8112491c:	18c7883a 	add	r3,r3,r3
81124920:	18c7883a 	add	r3,r3,r3
81124924:	10c5883a 	add	r2,r2,r3
81124928:	e0fff617 	ldw	r3,-40(fp)
8112492c:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
81124930:	d0e07c17 	ldw	r3,-32272(gp)
81124934:	e0bff617 	ldw	r2,-40(fp)
81124938:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
8112493c:	e0bff617 	ldw	r2,-40(fp)
81124940:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
81124944:	d0a07c17 	ldw	r2,-32272(gp)
81124948:	10000326 	beq	r2,zero,81124958 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
8112494c:	d0a07c17 	ldw	r2,-32272(gp)
81124950:	e0fff617 	ldw	r3,-40(fp)
81124954:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
81124958:	e0bff617 	ldw	r2,-40(fp)
8112495c:	d0a07c15 	stw	r2,-32272(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
81124960:	e0bff617 	ldw	r2,-40(fp)
81124964:	10c00d83 	ldbu	r3,54(r2)
81124968:	d0a08503 	ldbu	r2,-32236(gp)
8112496c:	1884b03a 	or	r2,r3,r2
81124970:	d0a08505 	stb	r2,-32236(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81124974:	e0bff617 	ldw	r2,-40(fp)
81124978:	10800d03 	ldbu	r2,52(r2)
8112497c:	10c03fcc 	andi	r3,r2,255
81124980:	e0bff617 	ldw	r2,-40(fp)
81124984:	10800d03 	ldbu	r2,52(r2)
81124988:	11003fcc 	andi	r4,r2,255
8112498c:	d0a08544 	addi	r2,gp,-32235
81124990:	2085883a 	add	r2,r4,r2
81124994:	11000003 	ldbu	r4,0(r2)
81124998:	e0bff617 	ldw	r2,-40(fp)
8112499c:	10800d43 	ldbu	r2,53(r2)
811249a0:	2084b03a 	or	r2,r4,r2
811249a4:	1009883a 	mov	r4,r2
811249a8:	d0a08544 	addi	r2,gp,-32235
811249ac:	1885883a 	add	r2,r3,r2
811249b0:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
811249b4:	d0a08143 	ldbu	r2,-32251(gp)
811249b8:	10800044 	addi	r2,r2,1
811249bc:	d0a08145 	stb	r2,-32251(gp)
811249c0:	e0bff417 	ldw	r2,-48(fp)
811249c4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811249c8:	e0bff717 	ldw	r2,-36(fp)
811249cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
811249d0:	0005883a 	mov	r2,zero
811249d4:	00000506 	br	811249ec <OS_TCBInit+0x2c0>
811249d8:	e0bff417 	ldw	r2,-48(fp)
811249dc:	e0bff915 	stw	r2,-28(fp)
811249e0:	e0bff917 	ldw	r2,-28(fp)
811249e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
811249e8:	00801084 	movi	r2,66
}
811249ec:	e037883a 	mov	sp,fp
811249f0:	dfc00117 	ldw	ra,4(sp)
811249f4:	df000017 	ldw	fp,0(sp)
811249f8:	dec00204 	addi	sp,sp,8
811249fc:	f800283a 	ret

81124a00 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
81124a00:	defffe04 	addi	sp,sp,-8
81124a04:	df000115 	stw	fp,4(sp)
81124a08:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
81124a0c:	d0a01b04 	addi	r2,gp,-32660
81124a10:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
81124a14:	d0a01c04 	addi	r2,gp,-32656
81124a18:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
81124a1c:	d0a01d84 	addi	r2,gp,-32650
81124a20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
81124a24:	d0a01e04 	addi	r2,gp,-32648
81124a28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
81124a2c:	d0a01d04 	addi	r2,gp,-32652
81124a30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
81124a34:	d0a01e84 	addi	r2,gp,-32646
81124a38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
81124a3c:	d0a01f04 	addi	r2,gp,-32644
81124a40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
81124a44:	d0a01f84 	addi	r2,gp,-32642
81124a48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
81124a4c:	d0a02004 	addi	r2,gp,-32640
81124a50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
81124a54:	d0a02084 	addi	r2,gp,-32638
81124a58:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
81124a5c:	d0a02104 	addi	r2,gp,-32636
81124a60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
81124a64:	d0a02184 	addi	r2,gp,-32634
81124a68:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
81124a6c:	d0a02204 	addi	r2,gp,-32632
81124a70:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
81124a74:	d0a02284 	addi	r2,gp,-32630
81124a78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
81124a7c:	d0a02304 	addi	r2,gp,-32628
81124a80:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
81124a84:	d0a02384 	addi	r2,gp,-32626
81124a88:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
81124a8c:	d0a02404 	addi	r2,gp,-32624
81124a90:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
81124a94:	d0a02484 	addi	r2,gp,-32622
81124a98:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
81124a9c:	d0a02504 	addi	r2,gp,-32620
81124aa0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
81124aa4:	d0a02584 	addi	r2,gp,-32618
81124aa8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
81124aac:	d0a02604 	addi	r2,gp,-32616
81124ab0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
81124ab4:	d0a02684 	addi	r2,gp,-32614
81124ab8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
81124abc:	d0a02704 	addi	r2,gp,-32612
81124ac0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
81124ac4:	d0a02784 	addi	r2,gp,-32610
81124ac8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
81124acc:	d0a02804 	addi	r2,gp,-32608
81124ad0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
81124ad4:	d0a02884 	addi	r2,gp,-32606
81124ad8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
81124adc:	d0a02904 	addi	r2,gp,-32604
81124ae0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
81124ae4:	d0a02984 	addi	r2,gp,-32602
81124ae8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
81124aec:	d0a02a04 	addi	r2,gp,-32600
81124af0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
81124af4:	d0a02a84 	addi	r2,gp,-32598
81124af8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
81124afc:	d0a02b04 	addi	r2,gp,-32596
81124b00:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
81124b04:	d0a02b84 	addi	r2,gp,-32594
81124b08:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
81124b0c:	d0a02c04 	addi	r2,gp,-32592
81124b10:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
81124b14:	d0a02c84 	addi	r2,gp,-32590
81124b18:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
81124b1c:	d0a02d04 	addi	r2,gp,-32588
81124b20:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
81124b24:	d0a02d84 	addi	r2,gp,-32586
81124b28:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
81124b2c:	d0a02e04 	addi	r2,gp,-32584
81124b30:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
81124b34:	d0a02e84 	addi	r2,gp,-32582
81124b38:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
81124b3c:	d0a02f04 	addi	r2,gp,-32580
81124b40:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
81124b44:	d0a02f84 	addi	r2,gp,-32578
81124b48:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
81124b4c:	d0a03004 	addi	r2,gp,-32576
81124b50:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
81124b54:	d0a03084 	addi	r2,gp,-32574
81124b58:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
81124b5c:	d0a03104 	addi	r2,gp,-32572
81124b60:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
81124b64:	d0a03184 	addi	r2,gp,-32570
81124b68:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
81124b6c:	d0a03204 	addi	r2,gp,-32568
81124b70:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
81124b74:	d0a03704 	addi	r2,gp,-32548
81124b78:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
81124b7c:	0001883a 	nop
81124b80:	e037883a 	mov	sp,fp
81124b84:	df000017 	ldw	fp,0(sp)
81124b88:	dec00104 	addi	sp,sp,4
81124b8c:	f800283a 	ret

81124b90 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
81124b90:	defff204 	addi	sp,sp,-56
81124b94:	df000d15 	stw	fp,52(sp)
81124b98:	df000d04 	addi	fp,sp,52
81124b9c:	e13ffc15 	stw	r4,-16(fp)
81124ba0:	2807883a 	mov	r3,r5
81124ba4:	3005883a 	mov	r2,r6
81124ba8:	e1ffff15 	stw	r7,-4(fp)
81124bac:	e0fffd0d 	sth	r3,-12(fp)
81124bb0:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81124bb4:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81124bb8:	e0bfff17 	ldw	r2,-4(fp)
81124bbc:	1000021e 	bne	r2,zero,81124bc8 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
81124bc0:	0005883a 	mov	r2,zero
81124bc4:	0000b006 	br	81124e88 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81124bc8:	e0bffc17 	ldw	r2,-16(fp)
81124bcc:	1000051e 	bne	r2,zero,81124be4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81124bd0:	e0bfff17 	ldw	r2,-4(fp)
81124bd4:	00c01b84 	movi	r3,110
81124bd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81124bdc:	0005883a 	mov	r2,zero
81124be0:	0000a906 	br	81124e88 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
81124be4:	e0bffc17 	ldw	r2,-16(fp)
81124be8:	10800003 	ldbu	r2,0(r2)
81124bec:	10803fcc 	andi	r2,r2,255
81124bf0:	10800160 	cmpeqi	r2,r2,5
81124bf4:	1000051e 	bne	r2,zero,81124c0c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
81124bf8:	e0bfff17 	ldw	r2,-4(fp)
81124bfc:	00c00044 	movi	r3,1
81124c00:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81124c04:	0005883a 	mov	r2,zero
81124c08:	00009f06 	br	81124e88 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
81124c0c:	e0fffe03 	ldbu	r3,-8(fp)
81124c10:	00bfe004 	movi	r2,-128
81124c14:	1884703a 	and	r2,r3,r2
81124c18:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
81124c1c:	e0bff503 	ldbu	r2,-44(fp)
81124c20:	10000626 	beq	r2,zero,81124c3c <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
81124c24:	e0bffe03 	ldbu	r2,-8(fp)
81124c28:	10801fcc 	andi	r2,r2,127
81124c2c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81124c30:	00800044 	movi	r2,1
81124c34:	e0bff385 	stb	r2,-50(fp)
81124c38:	00000106 	br	81124c40 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
81124c3c:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
81124c40:	e0bfff17 	ldw	r2,-4(fp)
81124c44:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124c48:	0005303a 	rdctl	r2,status
81124c4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124c50:	e0fffb17 	ldw	r3,-20(fp)
81124c54:	00bfff84 	movi	r2,-2
81124c58:	1884703a 	and	r2,r3,r2
81124c5c:	1001703a 	wrctl	status,r2
  
  return context;
81124c60:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
81124c64:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
81124c68:	e0bffe03 	ldbu	r2,-8(fp)
81124c6c:	10c00060 	cmpeqi	r3,r2,1
81124c70:	18005f1e 	bne	r3,zero,81124df0 <OSFlagAccept+0x260>
81124c74:	10c00088 	cmpgei	r3,r2,2
81124c78:	1800021e 	bne	r3,zero,81124c84 <OSFlagAccept+0xf4>
81124c7c:	10003f26 	beq	r2,zero,81124d7c <OSFlagAccept+0x1ec>
81124c80:	00007706 	br	81124e60 <OSFlagAccept+0x2d0>
81124c84:	10c000a0 	cmpeqi	r3,r2,2
81124c88:	1800031e 	bne	r3,zero,81124c98 <OSFlagAccept+0x108>
81124c8c:	108000e0 	cmpeqi	r2,r2,3
81124c90:	10001e1e 	bne	r2,zero,81124d0c <OSFlagAccept+0x17c>
81124c94:	00007206 	br	81124e60 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81124c98:	e0bffc17 	ldw	r2,-16(fp)
81124c9c:	10c0020b 	ldhu	r3,8(r2)
81124ca0:	e0bffd0b 	ldhu	r2,-12(fp)
81124ca4:	1884703a 	and	r2,r3,r2
81124ca8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81124cac:	e0fff30b 	ldhu	r3,-52(fp)
81124cb0:	e0bffd0b 	ldhu	r2,-12(fp)
81124cb4:	18800d1e 	bne	r3,r2,81124cec <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81124cb8:	e0bff383 	ldbu	r2,-50(fp)
81124cbc:	10800058 	cmpnei	r2,r2,1
81124cc0:	10000d1e 	bne	r2,zero,81124cf8 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
81124cc4:	e0bffc17 	ldw	r2,-16(fp)
81124cc8:	1080020b 	ldhu	r2,8(r2)
81124ccc:	1007883a 	mov	r3,r2
81124cd0:	e0bff30b 	ldhu	r2,-52(fp)
81124cd4:	0084303a 	nor	r2,zero,r2
81124cd8:	1884703a 	and	r2,r3,r2
81124cdc:	1007883a 	mov	r3,r2
81124ce0:	e0bffc17 	ldw	r2,-16(fp)
81124ce4:	10c0020d 	sth	r3,8(r2)
81124ce8:	00000306 	br	81124cf8 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81124cec:	e0bfff17 	ldw	r2,-4(fp)
81124cf0:	00c01c04 	movi	r3,112
81124cf4:	10c00005 	stb	r3,0(r2)
81124cf8:	e0bff417 	ldw	r2,-48(fp)
81124cfc:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124d00:	e0bff617 	ldw	r2,-40(fp)
81124d04:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81124d08:	00005e06 	br	81124e84 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81124d0c:	e0bffc17 	ldw	r2,-16(fp)
81124d10:	10c0020b 	ldhu	r3,8(r2)
81124d14:	e0bffd0b 	ldhu	r2,-12(fp)
81124d18:	1884703a 	and	r2,r3,r2
81124d1c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81124d20:	e0bff30b 	ldhu	r2,-52(fp)
81124d24:	10000d26 	beq	r2,zero,81124d5c <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81124d28:	e0bff383 	ldbu	r2,-50(fp)
81124d2c:	10800058 	cmpnei	r2,r2,1
81124d30:	10000d1e 	bne	r2,zero,81124d68 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81124d34:	e0bffc17 	ldw	r2,-16(fp)
81124d38:	1080020b 	ldhu	r2,8(r2)
81124d3c:	1007883a 	mov	r3,r2
81124d40:	e0bff30b 	ldhu	r2,-52(fp)
81124d44:	0084303a 	nor	r2,zero,r2
81124d48:	1884703a 	and	r2,r3,r2
81124d4c:	1007883a 	mov	r3,r2
81124d50:	e0bffc17 	ldw	r2,-16(fp)
81124d54:	10c0020d 	sth	r3,8(r2)
81124d58:	00000306 	br	81124d68 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81124d5c:	e0bfff17 	ldw	r2,-4(fp)
81124d60:	00c01c04 	movi	r3,112
81124d64:	10c00005 	stb	r3,0(r2)
81124d68:	e0bff417 	ldw	r2,-48(fp)
81124d6c:	e0bff715 	stw	r2,-36(fp)
81124d70:	e0bff717 	ldw	r2,-36(fp)
81124d74:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81124d78:	00004206 	br	81124e84 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81124d7c:	e0bffc17 	ldw	r2,-16(fp)
81124d80:	1080020b 	ldhu	r2,8(r2)
81124d84:	0084303a 	nor	r2,zero,r2
81124d88:	1007883a 	mov	r3,r2
81124d8c:	e0bffd0b 	ldhu	r2,-12(fp)
81124d90:	1884703a 	and	r2,r3,r2
81124d94:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81124d98:	e0fff30b 	ldhu	r3,-52(fp)
81124d9c:	e0bffd0b 	ldhu	r2,-12(fp)
81124da0:	18800b1e 	bne	r3,r2,81124dd0 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81124da4:	e0bff383 	ldbu	r2,-50(fp)
81124da8:	10800058 	cmpnei	r2,r2,1
81124dac:	10000b1e 	bne	r2,zero,81124ddc <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81124db0:	e0bffc17 	ldw	r2,-16(fp)
81124db4:	10c0020b 	ldhu	r3,8(r2)
81124db8:	e0bff30b 	ldhu	r2,-52(fp)
81124dbc:	1884b03a 	or	r2,r3,r2
81124dc0:	1007883a 	mov	r3,r2
81124dc4:	e0bffc17 	ldw	r2,-16(fp)
81124dc8:	10c0020d 	sth	r3,8(r2)
81124dcc:	00000306 	br	81124ddc <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81124dd0:	e0bfff17 	ldw	r2,-4(fp)
81124dd4:	00c01c04 	movi	r3,112
81124dd8:	10c00005 	stb	r3,0(r2)
81124ddc:	e0bff417 	ldw	r2,-48(fp)
81124de0:	e0bff815 	stw	r2,-32(fp)
81124de4:	e0bff817 	ldw	r2,-32(fp)
81124de8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81124dec:	00002506 	br	81124e84 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
81124df0:	e0bffc17 	ldw	r2,-16(fp)
81124df4:	1080020b 	ldhu	r2,8(r2)
81124df8:	0084303a 	nor	r2,zero,r2
81124dfc:	1007883a 	mov	r3,r2
81124e00:	e0bffd0b 	ldhu	r2,-12(fp)
81124e04:	1884703a 	and	r2,r3,r2
81124e08:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
81124e0c:	e0bff30b 	ldhu	r2,-52(fp)
81124e10:	10000b26 	beq	r2,zero,81124e40 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81124e14:	e0bff383 	ldbu	r2,-50(fp)
81124e18:	10800058 	cmpnei	r2,r2,1
81124e1c:	10000b1e 	bne	r2,zero,81124e4c <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81124e20:	e0bffc17 	ldw	r2,-16(fp)
81124e24:	10c0020b 	ldhu	r3,8(r2)
81124e28:	e0bff30b 	ldhu	r2,-52(fp)
81124e2c:	1884b03a 	or	r2,r3,r2
81124e30:	1007883a 	mov	r3,r2
81124e34:	e0bffc17 	ldw	r2,-16(fp)
81124e38:	10c0020d 	sth	r3,8(r2)
81124e3c:	00000306 	br	81124e4c <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81124e40:	e0bfff17 	ldw	r2,-4(fp)
81124e44:	00c01c04 	movi	r3,112
81124e48:	10c00005 	stb	r3,0(r2)
81124e4c:	e0bff417 	ldw	r2,-48(fp)
81124e50:	e0bff915 	stw	r2,-28(fp)
81124e54:	e0bff917 	ldw	r2,-28(fp)
81124e58:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81124e5c:	00000906 	br	81124e84 <OSFlagAccept+0x2f4>
81124e60:	e0bff417 	ldw	r2,-48(fp)
81124e64:	e0bffa15 	stw	r2,-24(fp)
81124e68:	e0bffa17 	ldw	r2,-24(fp)
81124e6c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81124e70:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
81124e74:	e0bfff17 	ldw	r2,-4(fp)
81124e78:	00c01bc4 	movi	r3,111
81124e7c:	10c00005 	stb	r3,0(r2)
             break;
81124e80:	0001883a 	nop
    }
    return (flags_rdy);
81124e84:	e0bff30b 	ldhu	r2,-52(fp)
}
81124e88:	e037883a 	mov	sp,fp
81124e8c:	df000017 	ldw	fp,0(sp)
81124e90:	dec00104 	addi	sp,sp,4
81124e94:	f800283a 	ret

81124e98 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
81124e98:	defff804 	addi	sp,sp,-32
81124e9c:	df000715 	stw	fp,28(sp)
81124ea0:	df000704 	addi	fp,sp,28
81124ea4:	2005883a 	mov	r2,r4
81124ea8:	e17fff15 	stw	r5,-4(fp)
81124eac:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
81124eb0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
81124eb4:	e0bfff17 	ldw	r2,-4(fp)
81124eb8:	1000021e 	bne	r2,zero,81124ec4 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
81124ebc:	0005883a 	mov	r2,zero
81124ec0:	00003306 	br	81124f90 <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
81124ec4:	d0a08803 	ldbu	r2,-32224(gp)
81124ec8:	10803fcc 	andi	r2,r2,255
81124ecc:	10000526 	beq	r2,zero,81124ee4 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
81124ed0:	e0bfff17 	ldw	r2,-4(fp)
81124ed4:	00c00404 	movi	r3,16
81124ed8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
81124edc:	0005883a 	mov	r2,zero
81124ee0:	00002b06 	br	81124f90 <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81124ee4:	0005303a 	rdctl	r2,status
81124ee8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81124eec:	e0fffd17 	ldw	r3,-12(fp)
81124ef0:	00bfff84 	movi	r2,-2
81124ef4:	1884703a 	and	r2,r3,r2
81124ef8:	1001703a 	wrctl	status,r2
  
  return context;
81124efc:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81124f00:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
81124f04:	d0a08b17 	ldw	r2,-32212(gp)
81124f08:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
81124f0c:	e0bffb17 	ldw	r2,-20(fp)
81124f10:	10001726 	beq	r2,zero,81124f70 <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
81124f14:	d0a08b17 	ldw	r2,-32212(gp)
81124f18:	10800117 	ldw	r2,4(r2)
81124f1c:	d0a08b15 	stw	r2,-32212(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
81124f20:	e0bffb17 	ldw	r2,-20(fp)
81124f24:	00c00144 	movi	r3,5
81124f28:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
81124f2c:	e0bffb17 	ldw	r2,-20(fp)
81124f30:	e0fffe0b 	ldhu	r3,-8(fp)
81124f34:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
81124f38:	e0bffb17 	ldw	r2,-20(fp)
81124f3c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
81124f40:	e0bffb17 	ldw	r2,-20(fp)
81124f44:	00c00fc4 	movi	r3,63
81124f48:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81124f4c:	e0bffb17 	ldw	r2,-20(fp)
81124f50:	100002c5 	stb	zero,11(r2)
81124f54:	e0bff917 	ldw	r2,-28(fp)
81124f58:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81124f5c:	e0bffa17 	ldw	r2,-24(fp)
81124f60:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
81124f64:	e0bfff17 	ldw	r2,-4(fp)
81124f68:	10000005 	stb	zero,0(r2)
81124f6c:	00000706 	br	81124f8c <OSFlagCreate+0xf4>
81124f70:	e0bff917 	ldw	r2,-28(fp)
81124f74:	e0bffc15 	stw	r2,-16(fp)
81124f78:	e0bffc17 	ldw	r2,-16(fp)
81124f7c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
81124f80:	e0bfff17 	ldw	r2,-4(fp)
81124f84:	00c01c84 	movi	r3,114
81124f88:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
81124f8c:	e0bffb17 	ldw	r2,-20(fp)
}
81124f90:	e037883a 	mov	sp,fp
81124f94:	df000017 	ldw	fp,0(sp)
81124f98:	dec00104 	addi	sp,sp,4
81124f9c:	f800283a 	ret

81124fa0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
81124fa0:	defff204 	addi	sp,sp,-56
81124fa4:	dfc00d15 	stw	ra,52(sp)
81124fa8:	df000c15 	stw	fp,48(sp)
81124fac:	df000c04 	addi	fp,sp,48
81124fb0:	e13ffd15 	stw	r4,-12(fp)
81124fb4:	2805883a 	mov	r2,r5
81124fb8:	e1bfff15 	stw	r6,-4(fp)
81124fbc:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81124fc0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81124fc4:	e0bfff17 	ldw	r2,-4(fp)
81124fc8:	1000021e 	bne	r2,zero,81124fd4 <OSFlagDel+0x34>
        return (pgrp);
81124fcc:	e0bffd17 	ldw	r2,-12(fp)
81124fd0:	00008006 	br	811251d4 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81124fd4:	e0bffd17 	ldw	r2,-12(fp)
81124fd8:	1000051e 	bne	r2,zero,81124ff0 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81124fdc:	e0bfff17 	ldw	r2,-4(fp)
81124fe0:	00c01b84 	movi	r3,110
81124fe4:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81124fe8:	e0bffd17 	ldw	r2,-12(fp)
81124fec:	00007906 	br	811251d4 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81124ff0:	d0a08803 	ldbu	r2,-32224(gp)
81124ff4:	10803fcc 	andi	r2,r2,255
81124ff8:	10000526 	beq	r2,zero,81125010 <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81124ffc:	e0bfff17 	ldw	r2,-4(fp)
81125000:	00c003c4 	movi	r3,15
81125004:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81125008:	e0bffd17 	ldw	r2,-12(fp)
8112500c:	00007106 	br	811251d4 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
81125010:	e0bffd17 	ldw	r2,-12(fp)
81125014:	10800003 	ldbu	r2,0(r2)
81125018:	10803fcc 	andi	r2,r2,255
8112501c:	10800160 	cmpeqi	r2,r2,5
81125020:	1000051e 	bne	r2,zero,81125038 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
81125024:	e0bfff17 	ldw	r2,-4(fp)
81125028:	00c00044 	movi	r3,1
8112502c:	10c00005 	stb	r3,0(r2)
        return (pgrp);
81125030:	e0bffd17 	ldw	r2,-12(fp)
81125034:	00006706 	br	811251d4 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125038:	0005303a 	rdctl	r2,status
8112503c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125040:	e0fffc17 	ldw	r3,-16(fp)
81125044:	00bfff84 	movi	r2,-2
81125048:	1884703a 	and	r2,r3,r2
8112504c:	1001703a 	wrctl	status,r2
  
  return context;
81125050:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81125054:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
81125058:	e0bffd17 	ldw	r2,-12(fp)
8112505c:	10800117 	ldw	r2,4(r2)
81125060:	10000326 	beq	r2,zero,81125070 <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81125064:	00800044 	movi	r2,1
81125068:	e0bff405 	stb	r2,-48(fp)
8112506c:	00000106 	br	81125074 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81125070:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
81125074:	e0bffe03 	ldbu	r2,-8(fp)
81125078:	10000326 	beq	r2,zero,81125088 <OSFlagDel+0xe8>
8112507c:	10800060 	cmpeqi	r2,r2,1
81125080:	1000231e 	bne	r2,zero,81125110 <OSFlagDel+0x170>
81125084:	00004806 	br	811251a8 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
81125088:	e0bff403 	ldbu	r2,-48(fp)
8112508c:	1000161e 	bne	r2,zero,811250e8 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
81125090:	e0bffd17 	ldw	r2,-12(fp)
81125094:	00c00fc4 	movi	r3,63
81125098:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112509c:	e0bffd17 	ldw	r2,-12(fp)
811250a0:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
811250a4:	e0bffd17 	ldw	r2,-12(fp)
811250a8:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
811250ac:	d0e08b17 	ldw	r3,-32212(gp)
811250b0:	e0bffd17 	ldw	r2,-12(fp)
811250b4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
811250b8:	e0bffd17 	ldw	r2,-12(fp)
811250bc:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
811250c0:	e0bffd17 	ldw	r2,-12(fp)
811250c4:	d0a08b15 	stw	r2,-32212(gp)
811250c8:	e0bff717 	ldw	r2,-36(fp)
811250cc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811250d0:	e0bff817 	ldw	r2,-32(fp)
811250d4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
811250d8:	e0bfff17 	ldw	r2,-4(fp)
811250dc:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
811250e0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
811250e4:	00003a06 	br	811251d0 <OSFlagDel+0x230>
811250e8:	e0bff717 	ldw	r2,-36(fp)
811250ec:	e0bff915 	stw	r2,-28(fp)
811250f0:	e0bff917 	ldw	r2,-28(fp)
811250f4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
811250f8:	e0bfff17 	ldw	r2,-4(fp)
811250fc:	00c01244 	movi	r3,73
81125100:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
81125104:	e0bffd17 	ldw	r2,-12(fp)
81125108:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112510c:	00003006 	br	811251d0 <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81125110:	e0bffd17 	ldw	r2,-12(fp)
81125114:	10800117 	ldw	r2,4(r2)
81125118:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
8112511c:	00000606 	br	81125138 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
81125120:	000b883a 	mov	r5,zero
81125124:	e13ff517 	ldw	r4,-44(fp)
81125128:	112610c0 	call	8112610c <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112512c:	e0bff517 	ldw	r2,-44(fp)
81125130:	10800017 	ldw	r2,0(r2)
81125134:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
81125138:	e0bff517 	ldw	r2,-44(fp)
8112513c:	103ff81e 	bne	r2,zero,81125120 <__reset+0xfb105120>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
81125140:	e0bffd17 	ldw	r2,-12(fp)
81125144:	00c00fc4 	movi	r3,63
81125148:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
8112514c:	e0bffd17 	ldw	r2,-12(fp)
81125150:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81125154:	e0bffd17 	ldw	r2,-12(fp)
81125158:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
8112515c:	d0e08b17 	ldw	r3,-32212(gp)
81125160:	e0bffd17 	ldw	r2,-12(fp)
81125164:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
81125168:	e0bffd17 	ldw	r2,-12(fp)
8112516c:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
81125170:	e0bffd17 	ldw	r2,-12(fp)
81125174:	d0a08b15 	stw	r2,-32212(gp)
81125178:	e0bff717 	ldw	r2,-36(fp)
8112517c:	e0bffa15 	stw	r2,-24(fp)
81125180:	e0bffa17 	ldw	r2,-24(fp)
81125184:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81125188:	e0bff403 	ldbu	r2,-48(fp)
8112518c:	10800058 	cmpnei	r2,r2,1
81125190:	1000011e 	bne	r2,zero,81125198 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81125194:	112431c0 	call	8112431c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
81125198:	e0bfff17 	ldw	r2,-4(fp)
8112519c:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
811251a0:	e03ff615 	stw	zero,-40(fp)
             break;
811251a4:	00000a06 	br	811251d0 <OSFlagDel+0x230>
811251a8:	e0bff717 	ldw	r2,-36(fp)
811251ac:	e0bffb15 	stw	r2,-20(fp)
811251b0:	e0bffb17 	ldw	r2,-20(fp)
811251b4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
811251b8:	e0bfff17 	ldw	r2,-4(fp)
811251bc:	00c001c4 	movi	r3,7
811251c0:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
811251c4:	e0bffd17 	ldw	r2,-12(fp)
811251c8:	e0bff615 	stw	r2,-40(fp)
             break;
811251cc:	0001883a 	nop
    }
    return (pgrp_return);
811251d0:	e0bff617 	ldw	r2,-40(fp)
}
811251d4:	e037883a 	mov	sp,fp
811251d8:	dfc00117 	ldw	ra,4(sp)
811251dc:	df000017 	ldw	fp,0(sp)
811251e0:	dec00204 	addi	sp,sp,8
811251e4:	f800283a 	ret

811251e8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
811251e8:	defff604 	addi	sp,sp,-40
811251ec:	dfc00915 	stw	ra,36(sp)
811251f0:	df000815 	stw	fp,32(sp)
811251f4:	df000804 	addi	fp,sp,32
811251f8:	e13ffd15 	stw	r4,-12(fp)
811251fc:	e17ffe15 	stw	r5,-8(fp)
81125200:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81125204:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81125208:	e0bfff17 	ldw	r2,-4(fp)
8112520c:	1000021e 	bne	r2,zero,81125218 <OSFlagNameGet+0x30>
        return (0);
81125210:	0005883a 	mov	r2,zero
81125214:	00003906 	br	811252fc <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81125218:	e0bffd17 	ldw	r2,-12(fp)
8112521c:	1000051e 	bne	r2,zero,81125234 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81125220:	e0bfff17 	ldw	r2,-4(fp)
81125224:	00c01b84 	movi	r3,110
81125228:	10c00005 	stb	r3,0(r2)
        return (0);
8112522c:	0005883a 	mov	r2,zero
81125230:	00003206 	br	811252fc <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81125234:	e0bffe17 	ldw	r2,-8(fp)
81125238:	1000051e 	bne	r2,zero,81125250 <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
8112523c:	e0bfff17 	ldw	r2,-4(fp)
81125240:	00c00304 	movi	r3,12
81125244:	10c00005 	stb	r3,0(r2)
        return (0);
81125248:	0005883a 	mov	r2,zero
8112524c:	00002b06 	br	811252fc <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81125250:	d0a08803 	ldbu	r2,-32224(gp)
81125254:	10803fcc 	andi	r2,r2,255
81125258:	10000526 	beq	r2,zero,81125270 <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
8112525c:	e0bfff17 	ldw	r2,-4(fp)
81125260:	00c00444 	movi	r3,17
81125264:	10c00005 	stb	r3,0(r2)
        return (0);
81125268:	0005883a 	mov	r2,zero
8112526c:	00002306 	br	811252fc <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125270:	0005303a 	rdctl	r2,status
81125274:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125278:	e0fffc17 	ldw	r3,-16(fp)
8112527c:	00bfff84 	movi	r2,-2
81125280:	1884703a 	and	r2,r3,r2
81125284:	1001703a 	wrctl	status,r2
  
  return context;
81125288:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112528c:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81125290:	e0bffd17 	ldw	r2,-12(fp)
81125294:	10800003 	ldbu	r2,0(r2)
81125298:	10803fcc 	andi	r2,r2,255
8112529c:	10800160 	cmpeqi	r2,r2,5
811252a0:	1000091e 	bne	r2,zero,811252c8 <OSFlagNameGet+0xe0>
811252a4:	e0bff817 	ldw	r2,-32(fp)
811252a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811252ac:	e0bff917 	ldw	r2,-28(fp)
811252b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
811252b4:	e0bfff17 	ldw	r2,-4(fp)
811252b8:	00c00044 	movi	r3,1
811252bc:	10c00005 	stb	r3,0(r2)
        return (0);
811252c0:	0005883a 	mov	r2,zero
811252c4:	00000d06 	br	811252fc <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
811252c8:	e0bffd17 	ldw	r2,-12(fp)
811252cc:	10800284 	addi	r2,r2,10
811252d0:	100b883a 	mov	r5,r2
811252d4:	e13ffe17 	ldw	r4,-8(fp)
811252d8:	11244600 	call	81124460 <OS_StrCopy>
811252dc:	e0bffb05 	stb	r2,-20(fp)
811252e0:	e0bff817 	ldw	r2,-32(fp)
811252e4:	e0bffa15 	stw	r2,-24(fp)
811252e8:	e0bffa17 	ldw	r2,-24(fp)
811252ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811252f0:	e0bfff17 	ldw	r2,-4(fp)
811252f4:	10000005 	stb	zero,0(r2)
    return (len);
811252f8:	e0bffb03 	ldbu	r2,-20(fp)
}
811252fc:	e037883a 	mov	sp,fp
81125300:	dfc00117 	ldw	ra,4(sp)
81125304:	df000017 	ldw	fp,0(sp)
81125308:	dec00204 	addi	sp,sp,8
8112530c:	f800283a 	ret

81125310 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
81125310:	defff504 	addi	sp,sp,-44
81125314:	dfc00a15 	stw	ra,40(sp)
81125318:	df000915 	stw	fp,36(sp)
8112531c:	df000904 	addi	fp,sp,36
81125320:	e13ffd15 	stw	r4,-12(fp)
81125324:	e17ffe15 	stw	r5,-8(fp)
81125328:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112532c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81125330:	e0bfff17 	ldw	r2,-4(fp)
81125334:	10004326 	beq	r2,zero,81125444 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
81125338:	e0bffd17 	ldw	r2,-12(fp)
8112533c:	1000041e 	bne	r2,zero,81125350 <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81125340:	e0bfff17 	ldw	r2,-4(fp)
81125344:	00c01b84 	movi	r3,110
81125348:	10c00005 	stb	r3,0(r2)
        return;
8112534c:	00003e06 	br	81125448 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81125350:	e0bffe17 	ldw	r2,-8(fp)
81125354:	1000041e 	bne	r2,zero,81125368 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
81125358:	e0bfff17 	ldw	r2,-4(fp)
8112535c:	00c00304 	movi	r3,12
81125360:	10c00005 	stb	r3,0(r2)
        return;
81125364:	00003806 	br	81125448 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81125368:	d0a08803 	ldbu	r2,-32224(gp)
8112536c:	10803fcc 	andi	r2,r2,255
81125370:	10000426 	beq	r2,zero,81125384 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
81125374:	e0bfff17 	ldw	r2,-4(fp)
81125378:	00c00484 	movi	r3,18
8112537c:	10c00005 	stb	r3,0(r2)
        return;
81125380:	00003106 	br	81125448 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125384:	0005303a 	rdctl	r2,status
81125388:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112538c:	e0fffc17 	ldw	r3,-16(fp)
81125390:	00bfff84 	movi	r2,-2
81125394:	1884703a 	and	r2,r3,r2
81125398:	1001703a 	wrctl	status,r2
  
  return context;
8112539c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811253a0:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
811253a4:	e0bffd17 	ldw	r2,-12(fp)
811253a8:	10800003 	ldbu	r2,0(r2)
811253ac:	10803fcc 	andi	r2,r2,255
811253b0:	10800160 	cmpeqi	r2,r2,5
811253b4:	1000081e 	bne	r2,zero,811253d8 <OSFlagNameSet+0xc8>
811253b8:	e0bff717 	ldw	r2,-36(fp)
811253bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811253c0:	e0bff817 	ldw	r2,-32(fp)
811253c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
811253c8:	e0bfff17 	ldw	r2,-4(fp)
811253cc:	00c00044 	movi	r3,1
811253d0:	10c00005 	stb	r3,0(r2)
        return;
811253d4:	00001c06 	br	81125448 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
811253d8:	e13ffe17 	ldw	r4,-8(fp)
811253dc:	11244d40 	call	811244d4 <OS_StrLen>
811253e0:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
811253e4:	e0bffa03 	ldbu	r2,-24(fp)
811253e8:	10800830 	cmpltui	r2,r2,32
811253ec:	1000081e 	bne	r2,zero,81125410 <OSFlagNameSet+0x100>
811253f0:	e0bff717 	ldw	r2,-36(fp)
811253f4:	e0bff915 	stw	r2,-28(fp)
811253f8:	e0bff917 	ldw	r2,-28(fp)
811253fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
81125400:	e0bfff17 	ldw	r2,-4(fp)
81125404:	00c01cc4 	movi	r3,115
81125408:	10c00005 	stb	r3,0(r2)
        return;
8112540c:	00000e06 	br	81125448 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
81125410:	e0bffd17 	ldw	r2,-12(fp)
81125414:	10800284 	addi	r2,r2,10
81125418:	e17ffe17 	ldw	r5,-8(fp)
8112541c:	1009883a 	mov	r4,r2
81125420:	11244600 	call	81124460 <OS_StrCopy>
81125424:	e0bff717 	ldw	r2,-36(fp)
81125428:	e0bffb15 	stw	r2,-20(fp)
8112542c:	e0bffb17 	ldw	r2,-20(fp)
81125430:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81125434:	e0bfff17 	ldw	r2,-4(fp)
81125438:	10000005 	stb	zero,0(r2)
    return;
8112543c:	0001883a 	nop
81125440:	00000106 	br	81125448 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81125444:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
81125448:	e037883a 	mov	sp,fp
8112544c:	dfc00117 	ldw	ra,4(sp)
81125450:	df000017 	ldw	fp,0(sp)
81125454:	dec00204 	addi	sp,sp,8
81125458:	f800283a 	ret

8112545c <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
8112545c:	deffe104 	addi	sp,sp,-124
81125460:	dfc01e15 	stw	ra,120(sp)
81125464:	df001d15 	stw	fp,116(sp)
81125468:	df001d04 	addi	fp,sp,116
8112546c:	e13ffc15 	stw	r4,-16(fp)
81125470:	2809883a 	mov	r4,r5
81125474:	3007883a 	mov	r3,r6
81125478:	3805883a 	mov	r2,r7
8112547c:	e13ffd0d 	sth	r4,-12(fp)
81125480:	e0fffe05 	stb	r3,-8(fp)
81125484:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81125488:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112548c:	e0800217 	ldw	r2,8(fp)
81125490:	1000021e 	bne	r2,zero,8112549c <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
81125494:	0005883a 	mov	r2,zero
81125498:	00015906 	br	81125a00 <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
8112549c:	e0bffc17 	ldw	r2,-16(fp)
811254a0:	1000051e 	bne	r2,zero,811254b8 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811254a4:	e0800217 	ldw	r2,8(fp)
811254a8:	00c01b84 	movi	r3,110
811254ac:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811254b0:	0005883a 	mov	r2,zero
811254b4:	00015206 	br	81125a00 <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811254b8:	d0a08803 	ldbu	r2,-32224(gp)
811254bc:	10803fcc 	andi	r2,r2,255
811254c0:	10000526 	beq	r2,zero,811254d8 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
811254c4:	e0800217 	ldw	r2,8(fp)
811254c8:	00c00084 	movi	r3,2
811254cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811254d0:	0005883a 	mov	r2,zero
811254d4:	00014a06 	br	81125a00 <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
811254d8:	d0a07903 	ldbu	r2,-32284(gp)
811254dc:	10803fcc 	andi	r2,r2,255
811254e0:	10000526 	beq	r2,zero,811254f8 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
811254e4:	e0800217 	ldw	r2,8(fp)
811254e8:	00c00344 	movi	r3,13
811254ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811254f0:	0005883a 	mov	r2,zero
811254f4:	00014206 	br	81125a00 <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
811254f8:	e0bffc17 	ldw	r2,-16(fp)
811254fc:	10800003 	ldbu	r2,0(r2)
81125500:	10803fcc 	andi	r2,r2,255
81125504:	10800160 	cmpeqi	r2,r2,5
81125508:	1000051e 	bne	r2,zero,81125520 <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
8112550c:	e0800217 	ldw	r2,8(fp)
81125510:	00c00044 	movi	r3,1
81125514:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81125518:	0005883a 	mov	r2,zero
8112551c:	00013806 	br	81125a00 <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
81125520:	e0fffe03 	ldbu	r3,-8(fp)
81125524:	00bfe004 	movi	r2,-128
81125528:	1884703a 	and	r2,r3,r2
8112552c:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
81125530:	e0bfe603 	ldbu	r2,-104(fp)
81125534:	10000626 	beq	r2,zero,81125550 <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
81125538:	e0bffe03 	ldbu	r2,-8(fp)
8112553c:	10801fcc 	andi	r2,r2,127
81125540:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81125544:	00800044 	movi	r2,1
81125548:	e0bfe405 	stb	r2,-112(fp)
8112554c:	00000106 	br	81125554 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
81125550:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125554:	0005303a 	rdctl	r2,status
81125558:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112555c:	e0fff617 	ldw	r3,-40(fp)
81125560:	00bfff84 	movi	r2,-2
81125564:	1884703a 	and	r2,r3,r2
81125568:	1001703a 	wrctl	status,r2
  
  return context;
8112556c:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81125570:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
81125574:	e0bffe03 	ldbu	r2,-8(fp)
81125578:	10c00060 	cmpeqi	r3,r2,1
8112557c:	1800921e 	bne	r3,zero,811257c8 <OSFlagPend+0x36c>
81125580:	10c00088 	cmpgei	r3,r2,2
81125584:	1800021e 	bne	r3,zero,81125590 <OSFlagPend+0x134>
81125588:	10006126 	beq	r2,zero,81125710 <OSFlagPend+0x2b4>
8112558c:	0000bb06 	br	8112587c <OSFlagPend+0x420>
81125590:	10c000a0 	cmpeqi	r3,r2,2
81125594:	1800031e 	bne	r3,zero,811255a4 <OSFlagPend+0x148>
81125598:	108000e0 	cmpeqi	r2,r2,3
8112559c:	10002f1e 	bne	r2,zero,8112565c <OSFlagPend+0x200>
811255a0:	0000b606 	br	8112587c <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
811255a4:	e0bffc17 	ldw	r2,-16(fp)
811255a8:	10c0020b 	ldhu	r3,8(r2)
811255ac:	e0bffd0b 	ldhu	r2,-12(fp)
811255b0:	1884703a 	and	r2,r3,r2
811255b4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
811255b8:	e0ffe80b 	ldhu	r3,-96(fp)
811255bc:	e0bffd0b 	ldhu	r2,-12(fp)
811255c0:	1880171e 	bne	r3,r2,81125620 <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811255c4:	e0bfe403 	ldbu	r2,-112(fp)
811255c8:	10800058 	cmpnei	r2,r2,1
811255cc:	1000091e 	bne	r2,zero,811255f4 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
811255d0:	e0bffc17 	ldw	r2,-16(fp)
811255d4:	1080020b 	ldhu	r2,8(r2)
811255d8:	1007883a 	mov	r3,r2
811255dc:	e0bfe80b 	ldhu	r2,-96(fp)
811255e0:	0084303a 	nor	r2,zero,r2
811255e4:	1884703a 	and	r2,r3,r2
811255e8:	1007883a 	mov	r3,r2
811255ec:	e0bffc17 	ldw	r2,-16(fp)
811255f0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
811255f4:	d0a08917 	ldw	r2,-32220(gp)
811255f8:	e0ffe80b 	ldhu	r3,-96(fp)
811255fc:	10c00b0d 	sth	r3,44(r2)
81125600:	e0bfe517 	ldw	r2,-108(fp)
81125604:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125608:	e0bfe717 	ldw	r2,-100(fp)
8112560c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81125610:	e0800217 	ldw	r2,8(fp)
81125614:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81125618:	e0bfe80b 	ldhu	r2,-96(fp)
8112561c:	0000f806 	br	81125a00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81125620:	e13ffd0b 	ldhu	r4,-12(fp)
81125624:	e17ffe03 	ldbu	r5,-8(fp)
81125628:	e0bfff0b 	ldhu	r2,-4(fp)
8112562c:	e0fff704 	addi	r3,fp,-36
81125630:	d8800015 	stw	r2,0(sp)
81125634:	280f883a 	mov	r7,r5
81125638:	200d883a 	mov	r6,r4
8112563c:	180b883a 	mov	r5,r3
81125640:	e13ffc17 	ldw	r4,-16(fp)
81125644:	1125ecc0 	call	81125ecc <OS_FlagBlock>
81125648:	e0bfe517 	ldw	r2,-108(fp)
8112564c:	e0bfe915 	stw	r2,-92(fp)
81125650:	e0bfe917 	ldw	r2,-92(fp)
81125654:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81125658:	00009206 	br	811258a4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
8112565c:	e0bffc17 	ldw	r2,-16(fp)
81125660:	10c0020b 	ldhu	r3,8(r2)
81125664:	e0bffd0b 	ldhu	r2,-12(fp)
81125668:	1884703a 	and	r2,r3,r2
8112566c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81125670:	e0bfe80b 	ldhu	r2,-96(fp)
81125674:	10001726 	beq	r2,zero,811256d4 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81125678:	e0bfe403 	ldbu	r2,-112(fp)
8112567c:	10800058 	cmpnei	r2,r2,1
81125680:	1000091e 	bne	r2,zero,811256a8 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81125684:	e0bffc17 	ldw	r2,-16(fp)
81125688:	1080020b 	ldhu	r2,8(r2)
8112568c:	1007883a 	mov	r3,r2
81125690:	e0bfe80b 	ldhu	r2,-96(fp)
81125694:	0084303a 	nor	r2,zero,r2
81125698:	1884703a 	and	r2,r3,r2
8112569c:	1007883a 	mov	r3,r2
811256a0:	e0bffc17 	ldw	r2,-16(fp)
811256a4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
811256a8:	d0a08917 	ldw	r2,-32220(gp)
811256ac:	e0ffe80b 	ldhu	r3,-96(fp)
811256b0:	10c00b0d 	sth	r3,44(r2)
811256b4:	e0bfe517 	ldw	r2,-108(fp)
811256b8:	e0bfea15 	stw	r2,-88(fp)
811256bc:	e0bfea17 	ldw	r2,-88(fp)
811256c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
811256c4:	e0800217 	ldw	r2,8(fp)
811256c8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
811256cc:	e0bfe80b 	ldhu	r2,-96(fp)
811256d0:	0000cb06 	br	81125a00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
811256d4:	e13ffd0b 	ldhu	r4,-12(fp)
811256d8:	e17ffe03 	ldbu	r5,-8(fp)
811256dc:	e0bfff0b 	ldhu	r2,-4(fp)
811256e0:	e0fff704 	addi	r3,fp,-36
811256e4:	d8800015 	stw	r2,0(sp)
811256e8:	280f883a 	mov	r7,r5
811256ec:	200d883a 	mov	r6,r4
811256f0:	180b883a 	mov	r5,r3
811256f4:	e13ffc17 	ldw	r4,-16(fp)
811256f8:	1125ecc0 	call	81125ecc <OS_FlagBlock>
811256fc:	e0bfe517 	ldw	r2,-108(fp)
81125700:	e0bfeb15 	stw	r2,-84(fp)
81125704:	e0bfeb17 	ldw	r2,-84(fp)
81125708:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
8112570c:	00006506 	br	811258a4 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81125710:	e0bffc17 	ldw	r2,-16(fp)
81125714:	1080020b 	ldhu	r2,8(r2)
81125718:	0084303a 	nor	r2,zero,r2
8112571c:	1007883a 	mov	r3,r2
81125720:	e0bffd0b 	ldhu	r2,-12(fp)
81125724:	1884703a 	and	r2,r3,r2
81125728:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
8112572c:	e0ffe80b 	ldhu	r3,-96(fp)
81125730:	e0bffd0b 	ldhu	r2,-12(fp)
81125734:	1880151e 	bne	r3,r2,8112578c <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81125738:	e0bfe403 	ldbu	r2,-112(fp)
8112573c:	10800058 	cmpnei	r2,r2,1
81125740:	1000071e 	bne	r2,zero,81125760 <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81125744:	e0bffc17 	ldw	r2,-16(fp)
81125748:	10c0020b 	ldhu	r3,8(r2)
8112574c:	e0bfe80b 	ldhu	r2,-96(fp)
81125750:	1884b03a 	or	r2,r3,r2
81125754:	1007883a 	mov	r3,r2
81125758:	e0bffc17 	ldw	r2,-16(fp)
8112575c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81125760:	d0a08917 	ldw	r2,-32220(gp)
81125764:	e0ffe80b 	ldhu	r3,-96(fp)
81125768:	10c00b0d 	sth	r3,44(r2)
8112576c:	e0bfe517 	ldw	r2,-108(fp)
81125770:	e0bfec15 	stw	r2,-80(fp)
81125774:	e0bfec17 	ldw	r2,-80(fp)
81125778:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
8112577c:	e0800217 	ldw	r2,8(fp)
81125780:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81125784:	e0bfe80b 	ldhu	r2,-96(fp)
81125788:	00009d06 	br	81125a00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
8112578c:	e13ffd0b 	ldhu	r4,-12(fp)
81125790:	e17ffe03 	ldbu	r5,-8(fp)
81125794:	e0bfff0b 	ldhu	r2,-4(fp)
81125798:	e0fff704 	addi	r3,fp,-36
8112579c:	d8800015 	stw	r2,0(sp)
811257a0:	280f883a 	mov	r7,r5
811257a4:	200d883a 	mov	r6,r4
811257a8:	180b883a 	mov	r5,r3
811257ac:	e13ffc17 	ldw	r4,-16(fp)
811257b0:	1125ecc0 	call	81125ecc <OS_FlagBlock>
811257b4:	e0bfe517 	ldw	r2,-108(fp)
811257b8:	e0bfed15 	stw	r2,-76(fp)
811257bc:	e0bfed17 	ldw	r2,-76(fp)
811257c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
811257c4:	00003706 	br	811258a4 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
811257c8:	e0bffc17 	ldw	r2,-16(fp)
811257cc:	1080020b 	ldhu	r2,8(r2)
811257d0:	0084303a 	nor	r2,zero,r2
811257d4:	1007883a 	mov	r3,r2
811257d8:	e0bffd0b 	ldhu	r2,-12(fp)
811257dc:	1884703a 	and	r2,r3,r2
811257e0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
811257e4:	e0bfe80b 	ldhu	r2,-96(fp)
811257e8:	10001526 	beq	r2,zero,81125840 <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811257ec:	e0bfe403 	ldbu	r2,-112(fp)
811257f0:	10800058 	cmpnei	r2,r2,1
811257f4:	1000071e 	bne	r2,zero,81125814 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
811257f8:	e0bffc17 	ldw	r2,-16(fp)
811257fc:	10c0020b 	ldhu	r3,8(r2)
81125800:	e0bfe80b 	ldhu	r2,-96(fp)
81125804:	1884b03a 	or	r2,r3,r2
81125808:	1007883a 	mov	r3,r2
8112580c:	e0bffc17 	ldw	r2,-16(fp)
81125810:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81125814:	d0a08917 	ldw	r2,-32220(gp)
81125818:	e0ffe80b 	ldhu	r3,-96(fp)
8112581c:	10c00b0d 	sth	r3,44(r2)
81125820:	e0bfe517 	ldw	r2,-108(fp)
81125824:	e0bfee15 	stw	r2,-72(fp)
81125828:	e0bfee17 	ldw	r2,-72(fp)
8112582c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81125830:	e0800217 	ldw	r2,8(fp)
81125834:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81125838:	e0bfe80b 	ldhu	r2,-96(fp)
8112583c:	00007006 	br	81125a00 <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81125840:	e13ffd0b 	ldhu	r4,-12(fp)
81125844:	e17ffe03 	ldbu	r5,-8(fp)
81125848:	e0bfff0b 	ldhu	r2,-4(fp)
8112584c:	e0fff704 	addi	r3,fp,-36
81125850:	d8800015 	stw	r2,0(sp)
81125854:	280f883a 	mov	r7,r5
81125858:	200d883a 	mov	r6,r4
8112585c:	180b883a 	mov	r5,r3
81125860:	e13ffc17 	ldw	r4,-16(fp)
81125864:	1125ecc0 	call	81125ecc <OS_FlagBlock>
81125868:	e0bfe517 	ldw	r2,-108(fp)
8112586c:	e0bfef15 	stw	r2,-68(fp)
81125870:	e0bfef17 	ldw	r2,-68(fp)
81125874:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81125878:	00000a06 	br	811258a4 <OSFlagPend+0x448>
8112587c:	e0bfe517 	ldw	r2,-108(fp)
81125880:	e0bff015 	stw	r2,-64(fp)
81125884:	e0bff017 	ldw	r2,-64(fp)
81125888:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
8112588c:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
81125890:	e0800217 	ldw	r2,8(fp)
81125894:	00c01bc4 	movi	r3,111
81125898:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
8112589c:	e0bfe80b 	ldhu	r2,-96(fp)
811258a0:	00005706 	br	81125a00 <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
811258a4:	112431c0 	call	8112431c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811258a8:	0005303a 	rdctl	r2,status
811258ac:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811258b0:	e0fff117 	ldw	r3,-60(fp)
811258b4:	00bfff84 	movi	r2,-2
811258b8:	1884703a 	and	r2,r3,r2
811258bc:	1001703a 	wrctl	status,r2
  
  return context;
811258c0:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
811258c4:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
811258c8:	d0a08917 	ldw	r2,-32220(gp)
811258cc:	10800c43 	ldbu	r2,49(r2)
811258d0:	10803fcc 	andi	r2,r2,255
811258d4:	10001c26 	beq	r2,zero,81125948 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
811258d8:	d0a08917 	ldw	r2,-32220(gp)
811258dc:	10800c43 	ldbu	r2,49(r2)
811258e0:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811258e4:	d0a08917 	ldw	r2,-32220(gp)
811258e8:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
811258ec:	e0bff704 	addi	r2,fp,-36
811258f0:	1009883a 	mov	r4,r2
811258f4:	11262000 	call	81126200 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
811258f8:	d0a08917 	ldw	r2,-32220(gp)
811258fc:	10000c05 	stb	zero,48(r2)
81125900:	e0bfe517 	ldw	r2,-108(fp)
81125904:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125908:	e0bff217 	ldw	r2,-56(fp)
8112590c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
81125910:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
81125914:	e0bff303 	ldbu	r2,-52(fp)
81125918:	108000a0 	cmpeqi	r2,r2,2
8112591c:	10000426 	beq	r2,zero,81125930 <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
81125920:	e0800217 	ldw	r2,8(fp)
81125924:	00c00384 	movi	r3,14
81125928:	10c00005 	stb	r3,0(r2)
                 break;
8112592c:	00000406 	br	81125940 <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
81125930:	e0800217 	ldw	r2,8(fp)
81125934:	00c00284 	movi	r3,10
81125938:	10c00005 	stb	r3,0(r2)
                 break;
8112593c:	0001883a 	nop
        }
        return (flags_rdy);
81125940:	e0bfe80b 	ldhu	r2,-96(fp)
81125944:	00002e06 	br	81125a00 <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
81125948:	d0a08917 	ldw	r2,-32220(gp)
8112594c:	10800b0b 	ldhu	r2,44(r2)
81125950:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
81125954:	e0bfe403 	ldbu	r2,-112(fp)
81125958:	10800058 	cmpnei	r2,r2,1
8112595c:	1000211e 	bne	r2,zero,811259e4 <OSFlagPend+0x588>
        switch (wait_type) {
81125960:	e0bffe03 	ldbu	r2,-8(fp)
81125964:	10001616 	blt	r2,zero,811259c0 <OSFlagPend+0x564>
81125968:	10c00090 	cmplti	r3,r2,2
8112596c:	18000c1e 	bne	r3,zero,811259a0 <OSFlagPend+0x544>
81125970:	10800108 	cmpgei	r2,r2,4
81125974:	1000121e 	bne	r2,zero,811259c0 <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
81125978:	e0bffc17 	ldw	r2,-16(fp)
8112597c:	1080020b 	ldhu	r2,8(r2)
81125980:	1007883a 	mov	r3,r2
81125984:	e0bfe80b 	ldhu	r2,-96(fp)
81125988:	0084303a 	nor	r2,zero,r2
8112598c:	1884703a 	and	r2,r3,r2
81125990:	1007883a 	mov	r3,r2
81125994:	e0bffc17 	ldw	r2,-16(fp)
81125998:	10c0020d 	sth	r3,8(r2)
                 break;
8112599c:	00001106 	br	811259e4 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
811259a0:	e0bffc17 	ldw	r2,-16(fp)
811259a4:	10c0020b 	ldhu	r3,8(r2)
811259a8:	e0bfe80b 	ldhu	r2,-96(fp)
811259ac:	1884b03a 	or	r2,r3,r2
811259b0:	1007883a 	mov	r3,r2
811259b4:	e0bffc17 	ldw	r2,-16(fp)
811259b8:	10c0020d 	sth	r3,8(r2)
                 break;
811259bc:	00000906 	br	811259e4 <OSFlagPend+0x588>
811259c0:	e0bfe517 	ldw	r2,-108(fp)
811259c4:	e0bff415 	stw	r2,-48(fp)
811259c8:	e0bff417 	ldw	r2,-48(fp)
811259cc:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
811259d0:	e0800217 	ldw	r2,8(fp)
811259d4:	00c01bc4 	movi	r3,111
811259d8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
811259dc:	0005883a 	mov	r2,zero
811259e0:	00000706 	br	81125a00 <OSFlagPend+0x5a4>
811259e4:	e0bfe517 	ldw	r2,-108(fp)
811259e8:	e0bff515 	stw	r2,-44(fp)
811259ec:	e0bff517 	ldw	r2,-44(fp)
811259f0:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
811259f4:	e0800217 	ldw	r2,8(fp)
811259f8:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
811259fc:	e0bfe80b 	ldhu	r2,-96(fp)
}
81125a00:	e037883a 	mov	sp,fp
81125a04:	dfc00117 	ldw	ra,4(sp)
81125a08:	df000017 	ldw	fp,0(sp)
81125a0c:	dec00204 	addi	sp,sp,8
81125a10:	f800283a 	ret

81125a14 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
81125a14:	defffb04 	addi	sp,sp,-20
81125a18:	df000415 	stw	fp,16(sp)
81125a1c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81125a20:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125a24:	0005303a 	rdctl	r2,status
81125a28:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125a2c:	e0fffe17 	ldw	r3,-8(fp)
81125a30:	00bfff84 	movi	r2,-2
81125a34:	1884703a 	and	r2,r3,r2
81125a38:	1001703a 	wrctl	status,r2
  
  return context;
81125a3c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81125a40:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
81125a44:	d0a08917 	ldw	r2,-32220(gp)
81125a48:	10800b0b 	ldhu	r2,44(r2)
81125a4c:	e0bffd0d 	sth	r2,-12(fp)
81125a50:	e0bffc17 	ldw	r2,-16(fp)
81125a54:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125a58:	e0bfff17 	ldw	r2,-4(fp)
81125a5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
81125a60:	e0bffd0b 	ldhu	r2,-12(fp)
}
81125a64:	e037883a 	mov	sp,fp
81125a68:	df000017 	ldw	fp,0(sp)
81125a6c:	dec00104 	addi	sp,sp,4
81125a70:	f800283a 	ret

81125a74 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
81125a74:	deffef04 	addi	sp,sp,-68
81125a78:	dfc01015 	stw	ra,64(sp)
81125a7c:	df000f15 	stw	fp,60(sp)
81125a80:	df000f04 	addi	fp,sp,60
81125a84:	e13ffc15 	stw	r4,-16(fp)
81125a88:	2807883a 	mov	r3,r5
81125a8c:	3005883a 	mov	r2,r6
81125a90:	e1ffff15 	stw	r7,-4(fp)
81125a94:	e0fffd0d 	sth	r3,-12(fp)
81125a98:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
81125a9c:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81125aa0:	e0bfff17 	ldw	r2,-4(fp)
81125aa4:	1000021e 	bne	r2,zero,81125ab0 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
81125aa8:	0005883a 	mov	r2,zero
81125aac:	0000d106 	br	81125df4 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
81125ab0:	e0bffc17 	ldw	r2,-16(fp)
81125ab4:	1000051e 	bne	r2,zero,81125acc <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81125ab8:	e0bfff17 	ldw	r2,-4(fp)
81125abc:	00c01b84 	movi	r3,110
81125ac0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81125ac4:	0005883a 	mov	r2,zero
81125ac8:	0000ca06 	br	81125df4 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
81125acc:	e0bffc17 	ldw	r2,-16(fp)
81125ad0:	10800003 	ldbu	r2,0(r2)
81125ad4:	10803fcc 	andi	r2,r2,255
81125ad8:	10800160 	cmpeqi	r2,r2,5
81125adc:	1000051e 	bne	r2,zero,81125af4 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
81125ae0:	e0bfff17 	ldw	r2,-4(fp)
81125ae4:	00c00044 	movi	r3,1
81125ae8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81125aec:	0005883a 	mov	r2,zero
81125af0:	0000c006 	br	81125df4 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125af4:	0005303a 	rdctl	r2,status
81125af8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125afc:	e0fffb17 	ldw	r3,-20(fp)
81125b00:	00bfff84 	movi	r2,-2
81125b04:	1884703a 	and	r2,r3,r2
81125b08:	1001703a 	wrctl	status,r2
  
  return context;
81125b0c:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81125b10:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
81125b14:	e0bffe03 	ldbu	r2,-8(fp)
81125b18:	10000326 	beq	r2,zero,81125b28 <OSFlagPost+0xb4>
81125b1c:	10800060 	cmpeqi	r2,r2,1
81125b20:	10000b1e 	bne	r2,zero,81125b50 <OSFlagPost+0xdc>
81125b24:	00001206 	br	81125b70 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
81125b28:	e0bffc17 	ldw	r2,-16(fp)
81125b2c:	1080020b 	ldhu	r2,8(r2)
81125b30:	1007883a 	mov	r3,r2
81125b34:	e0bffd0b 	ldhu	r2,-12(fp)
81125b38:	0084303a 	nor	r2,zero,r2
81125b3c:	1884703a 	and	r2,r3,r2
81125b40:	1007883a 	mov	r3,r2
81125b44:	e0bffc17 	ldw	r2,-16(fp)
81125b48:	10c0020d 	sth	r3,8(r2)
             break;
81125b4c:	00001106 	br	81125b94 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
81125b50:	e0bffc17 	ldw	r2,-16(fp)
81125b54:	10c0020b 	ldhu	r3,8(r2)
81125b58:	e0bffd0b 	ldhu	r2,-12(fp)
81125b5c:	1884b03a 	or	r2,r3,r2
81125b60:	1007883a 	mov	r3,r2
81125b64:	e0bffc17 	ldw	r2,-16(fp)
81125b68:	10c0020d 	sth	r3,8(r2)
             break;
81125b6c:	00000906 	br	81125b94 <OSFlagPost+0x120>
81125b70:	e0bff317 	ldw	r2,-52(fp)
81125b74:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125b78:	e0bff417 	ldw	r2,-48(fp)
81125b7c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
81125b80:	e0bfff17 	ldw	r2,-4(fp)
81125b84:	00c01c44 	movi	r3,113
81125b88:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
81125b8c:	0005883a 	mov	r2,zero
81125b90:	00009806 	br	81125df4 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
81125b94:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81125b98:	e0bffc17 	ldw	r2,-16(fp)
81125b9c:	10800117 	ldw	r2,4(r2)
81125ba0:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
81125ba4:	00007706 	br	81125d84 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
81125ba8:	e0bff117 	ldw	r2,-60(fp)
81125bac:	10800483 	ldbu	r2,18(r2)
81125bb0:	10803fcc 	andi	r2,r2,255
81125bb4:	10c00060 	cmpeqi	r3,r2,1
81125bb8:	18004a1e 	bne	r3,zero,81125ce4 <OSFlagPost+0x270>
81125bbc:	10c00088 	cmpgei	r3,r2,2
81125bc0:	1800021e 	bne	r3,zero,81125bcc <OSFlagPost+0x158>
81125bc4:	10002f26 	beq	r2,zero,81125c84 <OSFlagPost+0x210>
81125bc8:	00005b06 	br	81125d38 <OSFlagPost+0x2c4>
81125bcc:	10c000a0 	cmpeqi	r3,r2,2
81125bd0:	1800031e 	bne	r3,zero,81125be0 <OSFlagPost+0x16c>
81125bd4:	108000e0 	cmpeqi	r2,r2,3
81125bd8:	1000171e 	bne	r2,zero,81125c38 <OSFlagPost+0x1c4>
81125bdc:	00005606 	br	81125d38 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81125be0:	e0bffc17 	ldw	r2,-16(fp)
81125be4:	10c0020b 	ldhu	r3,8(r2)
81125be8:	e0bff117 	ldw	r2,-60(fp)
81125bec:	1080040b 	ldhu	r2,16(r2)
81125bf0:	1884703a 	and	r2,r3,r2
81125bf4:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81125bf8:	e0bff117 	ldw	r2,-60(fp)
81125bfc:	1080040b 	ldhu	r2,16(r2)
81125c00:	10ffffcc 	andi	r3,r2,65535
81125c04:	e0bff60b 	ldhu	r2,-40(fp)
81125c08:	1880541e 	bne	r3,r2,81125d5c <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81125c0c:	e0bff60b 	ldhu	r2,-40(fp)
81125c10:	100b883a 	mov	r5,r2
81125c14:	e13ff117 	ldw	r4,-60(fp)
81125c18:	112610c0 	call	8112610c <OS_FlagTaskRdy>
81125c1c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81125c20:	e0bff683 	ldbu	r2,-38(fp)
81125c24:	10800058 	cmpnei	r2,r2,1
81125c28:	10004c1e 	bne	r2,zero,81125d5c <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81125c2c:	00800044 	movi	r2,1
81125c30:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81125c34:	00004906 	br	81125d5c <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81125c38:	e0bffc17 	ldw	r2,-16(fp)
81125c3c:	10c0020b 	ldhu	r3,8(r2)
81125c40:	e0bff117 	ldw	r2,-60(fp)
81125c44:	1080040b 	ldhu	r2,16(r2)
81125c48:	1884703a 	and	r2,r3,r2
81125c4c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81125c50:	e0bff60b 	ldhu	r2,-40(fp)
81125c54:	10004326 	beq	r2,zero,81125d64 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81125c58:	e0bff60b 	ldhu	r2,-40(fp)
81125c5c:	100b883a 	mov	r5,r2
81125c60:	e13ff117 	ldw	r4,-60(fp)
81125c64:	112610c0 	call	8112610c <OS_FlagTaskRdy>
81125c68:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81125c6c:	e0bff683 	ldbu	r2,-38(fp)
81125c70:	10800058 	cmpnei	r2,r2,1
81125c74:	10003b1e 	bne	r2,zero,81125d64 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81125c78:	00800044 	movi	r2,1
81125c7c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81125c80:	00003806 	br	81125d64 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81125c84:	e0bffc17 	ldw	r2,-16(fp)
81125c88:	1080020b 	ldhu	r2,8(r2)
81125c8c:	0084303a 	nor	r2,zero,r2
81125c90:	1007883a 	mov	r3,r2
81125c94:	e0bff117 	ldw	r2,-60(fp)
81125c98:	1080040b 	ldhu	r2,16(r2)
81125c9c:	1884703a 	and	r2,r3,r2
81125ca0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81125ca4:	e0bff117 	ldw	r2,-60(fp)
81125ca8:	1080040b 	ldhu	r2,16(r2)
81125cac:	10ffffcc 	andi	r3,r2,65535
81125cb0:	e0bff60b 	ldhu	r2,-40(fp)
81125cb4:	18802d1e 	bne	r3,r2,81125d6c <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81125cb8:	e0bff60b 	ldhu	r2,-40(fp)
81125cbc:	100b883a 	mov	r5,r2
81125cc0:	e13ff117 	ldw	r4,-60(fp)
81125cc4:	112610c0 	call	8112610c <OS_FlagTaskRdy>
81125cc8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81125ccc:	e0bff683 	ldbu	r2,-38(fp)
81125cd0:	10800058 	cmpnei	r2,r2,1
81125cd4:	1000251e 	bne	r2,zero,81125d6c <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81125cd8:	00800044 	movi	r2,1
81125cdc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81125ce0:	00002206 	br	81125d6c <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81125ce4:	e0bffc17 	ldw	r2,-16(fp)
81125ce8:	1080020b 	ldhu	r2,8(r2)
81125cec:	0084303a 	nor	r2,zero,r2
81125cf0:	1007883a 	mov	r3,r2
81125cf4:	e0bff117 	ldw	r2,-60(fp)
81125cf8:	1080040b 	ldhu	r2,16(r2)
81125cfc:	1884703a 	and	r2,r3,r2
81125d00:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81125d04:	e0bff60b 	ldhu	r2,-40(fp)
81125d08:	10001a26 	beq	r2,zero,81125d74 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81125d0c:	e0bff60b 	ldhu	r2,-40(fp)
81125d10:	100b883a 	mov	r5,r2
81125d14:	e13ff117 	ldw	r4,-60(fp)
81125d18:	112610c0 	call	8112610c <OS_FlagTaskRdy>
81125d1c:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81125d20:	e0bff683 	ldbu	r2,-38(fp)
81125d24:	10800058 	cmpnei	r2,r2,1
81125d28:	1000121e 	bne	r2,zero,81125d74 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81125d2c:	00800044 	movi	r2,1
81125d30:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81125d34:	00000f06 	br	81125d74 <OSFlagPost+0x300>
81125d38:	e0bff317 	ldw	r2,-52(fp)
81125d3c:	e0bff515 	stw	r2,-44(fp)
81125d40:	e0bff517 	ldw	r2,-44(fp)
81125d44:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
81125d48:	e0bfff17 	ldw	r2,-4(fp)
81125d4c:	00c01bc4 	movi	r3,111
81125d50:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
81125d54:	0005883a 	mov	r2,zero
81125d58:	00002606 	br	81125df4 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81125d5c:	0001883a 	nop
81125d60:	00000506 	br	81125d78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81125d64:	0001883a 	nop
81125d68:	00000306 	br	81125d78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81125d6c:	0001883a 	nop
81125d70:	00000106 	br	81125d78 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81125d74:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
81125d78:	e0bff117 	ldw	r2,-60(fp)
81125d7c:	10800017 	ldw	r2,0(r2)
81125d80:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
81125d84:	e0bff117 	ldw	r2,-60(fp)
81125d88:	103f871e 	bne	r2,zero,81125ba8 <__reset+0xfb105ba8>
81125d8c:	e0bff317 	ldw	r2,-52(fp)
81125d90:	e0bff715 	stw	r2,-36(fp)
81125d94:	e0bff717 	ldw	r2,-36(fp)
81125d98:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
81125d9c:	e0bff203 	ldbu	r2,-56(fp)
81125da0:	10800058 	cmpnei	r2,r2,1
81125da4:	1000011e 	bne	r2,zero,81125dac <OSFlagPost+0x338>
        OS_Sched();
81125da8:	112431c0 	call	8112431c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125dac:	0005303a 	rdctl	r2,status
81125db0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125db4:	e0fffa17 	ldw	r3,-24(fp)
81125db8:	00bfff84 	movi	r2,-2
81125dbc:	1884703a 	and	r2,r3,r2
81125dc0:	1001703a 	wrctl	status,r2
  
  return context;
81125dc4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
81125dc8:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
81125dcc:	e0bffc17 	ldw	r2,-16(fp)
81125dd0:	1080020b 	ldhu	r2,8(r2)
81125dd4:	e0bff90d 	sth	r2,-28(fp)
81125dd8:	e0bff317 	ldw	r2,-52(fp)
81125ddc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125de0:	e0bff817 	ldw	r2,-32(fp)
81125de4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
81125de8:	e0bfff17 	ldw	r2,-4(fp)
81125dec:	10000005 	stb	zero,0(r2)
    return (flags_cur);
81125df0:	e0bff90b 	ldhu	r2,-28(fp)
}
81125df4:	e037883a 	mov	sp,fp
81125df8:	dfc00117 	ldw	ra,4(sp)
81125dfc:	df000017 	ldw	fp,0(sp)
81125e00:	dec00204 	addi	sp,sp,8
81125e04:	f800283a 	ret

81125e08 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
81125e08:	defff904 	addi	sp,sp,-28
81125e0c:	df000615 	stw	fp,24(sp)
81125e10:	df000604 	addi	fp,sp,24
81125e14:	e13ffe15 	stw	r4,-8(fp)
81125e18:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
81125e1c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
81125e20:	e0bfff17 	ldw	r2,-4(fp)
81125e24:	1000021e 	bne	r2,zero,81125e30 <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
81125e28:	0005883a 	mov	r2,zero
81125e2c:	00002306 	br	81125ebc <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
81125e30:	e0bffe17 	ldw	r2,-8(fp)
81125e34:	1000051e 	bne	r2,zero,81125e4c <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81125e38:	e0bfff17 	ldw	r2,-4(fp)
81125e3c:	00c01b84 	movi	r3,110
81125e40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81125e44:	0005883a 	mov	r2,zero
81125e48:	00001c06 	br	81125ebc <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
81125e4c:	e0bffe17 	ldw	r2,-8(fp)
81125e50:	10800003 	ldbu	r2,0(r2)
81125e54:	10803fcc 	andi	r2,r2,255
81125e58:	10800160 	cmpeqi	r2,r2,5
81125e5c:	1000051e 	bne	r2,zero,81125e74 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
81125e60:	e0bfff17 	ldw	r2,-4(fp)
81125e64:	00c00044 	movi	r3,1
81125e68:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81125e6c:	0005883a 	mov	r2,zero
81125e70:	00001206 	br	81125ebc <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125e74:	0005303a 	rdctl	r2,status
81125e78:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125e7c:	e0fffc17 	ldw	r3,-16(fp)
81125e80:	00bfff84 	movi	r2,-2
81125e84:	1884703a 	and	r2,r3,r2
81125e88:	1001703a 	wrctl	status,r2
  
  return context;
81125e8c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81125e90:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
81125e94:	e0bffe17 	ldw	r2,-8(fp)
81125e98:	1080020b 	ldhu	r2,8(r2)
81125e9c:	e0bffb0d 	sth	r2,-20(fp)
81125ea0:	e0bffa17 	ldw	r2,-24(fp)
81125ea4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81125ea8:	e0bffd17 	ldw	r2,-12(fp)
81125eac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81125eb0:	e0bfff17 	ldw	r2,-4(fp)
81125eb4:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
81125eb8:	e0bffb0b 	ldhu	r2,-20(fp)
}
81125ebc:	e037883a 	mov	sp,fp
81125ec0:	df000017 	ldw	fp,0(sp)
81125ec4:	dec00104 	addi	sp,sp,4
81125ec8:	f800283a 	ret

81125ecc <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
81125ecc:	defff804 	addi	sp,sp,-32
81125ed0:	df000715 	stw	fp,28(sp)
81125ed4:	df000704 	addi	fp,sp,28
81125ed8:	e13ffb15 	stw	r4,-20(fp)
81125edc:	e17ffc15 	stw	r5,-16(fp)
81125ee0:	3009883a 	mov	r4,r6
81125ee4:	3807883a 	mov	r3,r7
81125ee8:	e0800117 	ldw	r2,4(fp)
81125eec:	e13ffd0d 	sth	r4,-12(fp)
81125ef0:	e0fffe05 	stb	r3,-8(fp)
81125ef4:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
81125ef8:	d0a08917 	ldw	r2,-32220(gp)
81125efc:	d0e08917 	ldw	r3,-32220(gp)
81125f00:	18c00c03 	ldbu	r3,48(r3)
81125f04:	18c00814 	ori	r3,r3,32
81125f08:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
81125f0c:	d0a08917 	ldw	r2,-32220(gp)
81125f10:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
81125f14:	d0a08917 	ldw	r2,-32220(gp)
81125f18:	e0ffff0b 	ldhu	r3,-4(fp)
81125f1c:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
81125f20:	d0a08917 	ldw	r2,-32220(gp)
81125f24:	e0fffc17 	ldw	r3,-16(fp)
81125f28:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
81125f2c:	e0bffc17 	ldw	r2,-16(fp)
81125f30:	e0fffd0b 	ldhu	r3,-12(fp)
81125f34:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
81125f38:	e0bffc17 	ldw	r2,-16(fp)
81125f3c:	e0fffe03 	ldbu	r3,-8(fp)
81125f40:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
81125f44:	d0e08917 	ldw	r3,-32220(gp)
81125f48:	e0bffc17 	ldw	r2,-16(fp)
81125f4c:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
81125f50:	e0bffb17 	ldw	r2,-20(fp)
81125f54:	10c00117 	ldw	r3,4(r2)
81125f58:	e0bffc17 	ldw	r2,-16(fp)
81125f5c:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
81125f60:	e0bffc17 	ldw	r2,-16(fp)
81125f64:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
81125f68:	e0bffc17 	ldw	r2,-16(fp)
81125f6c:	e0fffb17 	ldw	r3,-20(fp)
81125f70:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81125f74:	e0bffb17 	ldw	r2,-20(fp)
81125f78:	10800117 	ldw	r2,4(r2)
81125f7c:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
81125f80:	e0bff917 	ldw	r2,-28(fp)
81125f84:	10000326 	beq	r2,zero,81125f94 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
81125f88:	e0bff917 	ldw	r2,-28(fp)
81125f8c:	e0fffc17 	ldw	r3,-16(fp)
81125f90:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
81125f94:	e0bffb17 	ldw	r2,-20(fp)
81125f98:	e0fffc17 	ldw	r3,-16(fp)
81125f9c:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
81125fa0:	d0a08917 	ldw	r2,-32220(gp)
81125fa4:	10800d03 	ldbu	r2,52(r2)
81125fa8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
81125fac:	e0fffa03 	ldbu	r3,-24(fp)
81125fb0:	e13ffa03 	ldbu	r4,-24(fp)
81125fb4:	d0a08544 	addi	r2,gp,-32235
81125fb8:	2085883a 	add	r2,r4,r2
81125fbc:	10800003 	ldbu	r2,0(r2)
81125fc0:	1009883a 	mov	r4,r2
81125fc4:	d0a08917 	ldw	r2,-32220(gp)
81125fc8:	10800d43 	ldbu	r2,53(r2)
81125fcc:	0084303a 	nor	r2,zero,r2
81125fd0:	2084703a 	and	r2,r4,r2
81125fd4:	1009883a 	mov	r4,r2
81125fd8:	d0a08544 	addi	r2,gp,-32235
81125fdc:	1885883a 	add	r2,r3,r2
81125fe0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
81125fe4:	e0fffa03 	ldbu	r3,-24(fp)
81125fe8:	d0a08544 	addi	r2,gp,-32235
81125fec:	1885883a 	add	r2,r3,r2
81125ff0:	10800003 	ldbu	r2,0(r2)
81125ff4:	10803fcc 	andi	r2,r2,255
81125ff8:	1000071e 	bne	r2,zero,81126018 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
81125ffc:	d0a08917 	ldw	r2,-32220(gp)
81126000:	10800d83 	ldbu	r2,54(r2)
81126004:	0084303a 	nor	r2,zero,r2
81126008:	1007883a 	mov	r3,r2
8112600c:	d0a08503 	ldbu	r2,-32236(gp)
81126010:	1884703a 	and	r2,r3,r2
81126014:	d0a08505 	stb	r2,-32236(gp)
    }
}
81126018:	0001883a 	nop
8112601c:	e037883a 	mov	sp,fp
81126020:	df000017 	ldw	fp,0(sp)
81126024:	dec00104 	addi	sp,sp,4
81126028:	f800283a 	ret

8112602c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112602c:	defffb04 	addi	sp,sp,-20
81126030:	dfc00415 	stw	ra,16(sp)
81126034:	df000315 	stw	fp,12(sp)
81126038:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112603c:	0140dc04 	movi	r5,880
81126040:	012045b4 	movhi	r4,33046
81126044:	21294e04 	addi	r4,r4,-23240
81126048:	11242600 	call	81124260 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112604c:	00a045b4 	movhi	r2,33046
81126050:	10a94e04 	addi	r2,r2,-23240
81126054:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
81126058:	00a045b4 	movhi	r2,33046
8112605c:	10a95904 	addi	r2,r2,-23196
81126060:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
81126064:	e03ffd0d 	sth	zero,-12(fp)
81126068:	00001306 	br	811260b8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112606c:	e0bffe17 	ldw	r2,-8(fp)
81126070:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
81126074:	e0bffe17 	ldw	r2,-8(fp)
81126078:	e0ffff17 	ldw	r3,-4(fp)
8112607c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
81126080:	e0bffe17 	ldw	r2,-8(fp)
81126084:	00c00fc4 	movi	r3,63
81126088:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112608c:	e0bffe17 	ldw	r2,-8(fp)
81126090:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
81126094:	e0bffe17 	ldw	r2,-8(fp)
81126098:	10800b04 	addi	r2,r2,44
8112609c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
811260a0:	e0bfff17 	ldw	r2,-4(fp)
811260a4:	10800b04 	addi	r2,r2,44
811260a8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
811260ac:	e0bffd0b 	ldhu	r2,-12(fp)
811260b0:	10800044 	addi	r2,r2,1
811260b4:	e0bffd0d 	sth	r2,-12(fp)
811260b8:	e0bffd0b 	ldhu	r2,-12(fp)
811260bc:	108004f0 	cmpltui	r2,r2,19
811260c0:	103fea1e 	bne	r2,zero,8112606c <__reset+0xfb10606c>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
811260c4:	e0bffe17 	ldw	r2,-8(fp)
811260c8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
811260cc:	e0bffe17 	ldw	r2,-8(fp)
811260d0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
811260d4:	e0bffe17 	ldw	r2,-8(fp)
811260d8:	00c00fc4 	movi	r3,63
811260dc:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
811260e0:	e0bffe17 	ldw	r2,-8(fp)
811260e4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
811260e8:	00a045b4 	movhi	r2,33046
811260ec:	10a94e04 	addi	r2,r2,-23240
811260f0:	d0a08b15 	stw	r2,-32212(gp)
#endif
}
811260f4:	0001883a 	nop
811260f8:	e037883a 	mov	sp,fp
811260fc:	dfc00117 	ldw	ra,4(sp)
81126100:	df000017 	ldw	fp,0(sp)
81126104:	dec00204 	addi	sp,sp,8
81126108:	f800283a 	ret

8112610c <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112610c:	defffa04 	addi	sp,sp,-24
81126110:	dfc00515 	stw	ra,20(sp)
81126114:	df000415 	stw	fp,16(sp)
81126118:	df000404 	addi	fp,sp,16
8112611c:	e13ffe15 	stw	r4,-8(fp)
81126120:	2805883a 	mov	r2,r5
81126124:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
81126128:	e0bffe17 	ldw	r2,-8(fp)
8112612c:	10800217 	ldw	r2,8(r2)
81126130:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
81126134:	e0bffd17 	ldw	r2,-12(fp)
81126138:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112613c:	e0bffd17 	ldw	r2,-12(fp)
81126140:	e0ffff0b 	ldhu	r3,-4(fp)
81126144:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
81126148:	e0bffd17 	ldw	r2,-12(fp)
8112614c:	10c00c03 	ldbu	r3,48(r2)
81126150:	00bff7c4 	movi	r2,-33
81126154:	1884703a 	and	r2,r3,r2
81126158:	1007883a 	mov	r3,r2
8112615c:	e0bffd17 	ldw	r2,-12(fp)
81126160:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
81126164:	e0bffd17 	ldw	r2,-12(fp)
81126168:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112616c:	e0bffd17 	ldw	r2,-12(fp)
81126170:	10800c03 	ldbu	r2,48(r2)
81126174:	10803fcc 	andi	r2,r2,255
81126178:	1000181e 	bne	r2,zero,811261dc <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112617c:	e0bffd17 	ldw	r2,-12(fp)
81126180:	10c00d83 	ldbu	r3,54(r2)
81126184:	d0a08503 	ldbu	r2,-32236(gp)
81126188:	1884b03a 	or	r2,r3,r2
8112618c:	d0a08505 	stb	r2,-32236(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81126190:	e0bffd17 	ldw	r2,-12(fp)
81126194:	10800d03 	ldbu	r2,52(r2)
81126198:	10c03fcc 	andi	r3,r2,255
8112619c:	e0bffd17 	ldw	r2,-12(fp)
811261a0:	10800d03 	ldbu	r2,52(r2)
811261a4:	11003fcc 	andi	r4,r2,255
811261a8:	d0a08544 	addi	r2,gp,-32235
811261ac:	2085883a 	add	r2,r4,r2
811261b0:	11000003 	ldbu	r4,0(r2)
811261b4:	e0bffd17 	ldw	r2,-12(fp)
811261b8:	10800d43 	ldbu	r2,53(r2)
811261bc:	2084b03a 	or	r2,r4,r2
811261c0:	1009883a 	mov	r4,r2
811261c4:	d0a08544 	addi	r2,gp,-32235
811261c8:	1885883a 	add	r2,r3,r2
811261cc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
811261d0:	00800044 	movi	r2,1
811261d4:	e0bffc05 	stb	r2,-16(fp)
811261d8:	00000106 	br	811261e0 <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
811261dc:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
811261e0:	e13ffe17 	ldw	r4,-8(fp)
811261e4:	11262000 	call	81126200 <OS_FlagUnlink>
    return (sched);
811261e8:	e0bffc03 	ldbu	r2,-16(fp)
}
811261ec:	e037883a 	mov	sp,fp
811261f0:	dfc00117 	ldw	ra,4(sp)
811261f4:	df000017 	ldw	fp,0(sp)
811261f8:	dec00204 	addi	sp,sp,8
811261fc:	f800283a 	ret

81126200 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
81126200:	defffa04 	addi	sp,sp,-24
81126204:	df000515 	stw	fp,20(sp)
81126208:	df000504 	addi	fp,sp,20
8112620c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
81126210:	e0bfff17 	ldw	r2,-4(fp)
81126214:	10800117 	ldw	r2,4(r2)
81126218:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112621c:	e0bfff17 	ldw	r2,-4(fp)
81126220:	10800017 	ldw	r2,0(r2)
81126224:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
81126228:	e0bffb17 	ldw	r2,-20(fp)
8112622c:	10000b1e 	bne	r2,zero,8112625c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
81126230:	e0bfff17 	ldw	r2,-4(fp)
81126234:	10800317 	ldw	r2,12(r2)
81126238:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112623c:	e0bffd17 	ldw	r2,-12(fp)
81126240:	e0fffc17 	ldw	r3,-16(fp)
81126244:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
81126248:	e0bffc17 	ldw	r2,-16(fp)
8112624c:	10000b26 	beq	r2,zero,8112627c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
81126250:	e0bffc17 	ldw	r2,-16(fp)
81126254:	10000115 	stw	zero,4(r2)
81126258:	00000806 	br	8112627c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112625c:	e0bffb17 	ldw	r2,-20(fp)
81126260:	e0fffc17 	ldw	r3,-16(fp)
81126264:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
81126268:	e0bffc17 	ldw	r2,-16(fp)
8112626c:	10000326 	beq	r2,zero,8112627c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
81126270:	e0bffc17 	ldw	r2,-16(fp)
81126274:	e0fffb17 	ldw	r3,-20(fp)
81126278:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112627c:	e0bfff17 	ldw	r2,-4(fp)
81126280:	10800217 	ldw	r2,8(r2)
81126284:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
81126288:	e0bffe17 	ldw	r2,-8(fp)
8112628c:	10000a15 	stw	zero,40(r2)
#endif
}
81126290:	0001883a 	nop
81126294:	e037883a 	mov	sp,fp
81126298:	df000017 	ldw	fp,0(sp)
8112629c:	dec00104 	addi	sp,sp,4
811262a0:	f800283a 	ret

811262a4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
811262a4:	defff404 	addi	sp,sp,-48
811262a8:	df000b15 	stw	fp,44(sp)
811262ac:	df000b04 	addi	fp,sp,44
811262b0:	e13ffc15 	stw	r4,-16(fp)
811262b4:	e17ffd15 	stw	r5,-12(fp)
811262b8:	e1bffe15 	stw	r6,-8(fp)
811262bc:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811262c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
811262c4:	e0bfff17 	ldw	r2,-4(fp)
811262c8:	1000021e 	bne	r2,zero,811262d4 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
811262cc:	0005883a 	mov	r2,zero
811262d0:	00006506 	br	81126468 <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
811262d4:	e0bffc17 	ldw	r2,-16(fp)
811262d8:	1000051e 	bne	r2,zero,811262f0 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
811262dc:	e0bfff17 	ldw	r2,-4(fp)
811262e0:	00c01884 	movi	r3,98
811262e4:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
811262e8:	0005883a 	mov	r2,zero
811262ec:	00005e06 	br	81126468 <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
811262f0:	e0bffc17 	ldw	r2,-16(fp)
811262f4:	108000cc 	andi	r2,r2,3
811262f8:	10000526 	beq	r2,zero,81126310 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
811262fc:	e0bfff17 	ldw	r2,-4(fp)
81126300:	00c01884 	movi	r3,98
81126304:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81126308:	0005883a 	mov	r2,zero
8112630c:	00005606 	br	81126468 <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
81126310:	e0bffd17 	ldw	r2,-12(fp)
81126314:	108000a8 	cmpgeui	r2,r2,2
81126318:	1000051e 	bne	r2,zero,81126330 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112631c:	e0bfff17 	ldw	r2,-4(fp)
81126320:	00c016c4 	movi	r3,91
81126324:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81126328:	0005883a 	mov	r2,zero
8112632c:	00004e06 	br	81126468 <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
81126330:	e0bffe17 	ldw	r2,-8(fp)
81126334:	10800128 	cmpgeui	r2,r2,4
81126338:	1000051e 	bne	r2,zero,81126350 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112633c:	e0bfff17 	ldw	r2,-4(fp)
81126340:	00c01704 	movi	r3,92
81126344:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
81126348:	0005883a 	mov	r2,zero
8112634c:	00004606 	br	81126468 <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126350:	0005303a 	rdctl	r2,status
81126354:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126358:	e0fffb17 	ldw	r3,-20(fp)
8112635c:	00bfff84 	movi	r2,-2
81126360:	1884703a 	and	r2,r3,r2
81126364:	1001703a 	wrctl	status,r2
  
  return context;
81126368:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112636c:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
81126370:	d0a08217 	ldw	r2,-32248(gp)
81126374:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
81126378:	d0a08217 	ldw	r2,-32248(gp)
8112637c:	10000326 	beq	r2,zero,8112638c <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
81126380:	d0a08217 	ldw	r2,-32248(gp)
81126384:	10800117 	ldw	r2,4(r2)
81126388:	d0a08215 	stw	r2,-32248(gp)
8112638c:	e0bff817 	ldw	r2,-32(fp)
81126390:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126394:	e0bff917 	ldw	r2,-28(fp)
81126398:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112639c:	e0bffa17 	ldw	r2,-24(fp)
811263a0:	1000051e 	bne	r2,zero,811263b8 <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
811263a4:	e0bfff17 	ldw	r2,-4(fp)
811263a8:	00c01684 	movi	r3,90
811263ac:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
811263b0:	0005883a 	mov	r2,zero
811263b4:	00002c06 	br	81126468 <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
811263b8:	e0bffc17 	ldw	r2,-16(fp)
811263bc:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
811263c0:	e0fffc17 	ldw	r3,-16(fp)
811263c4:	e0bffe17 	ldw	r2,-8(fp)
811263c8:	1885883a 	add	r2,r3,r2
811263cc:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
811263d0:	e03ff715 	stw	zero,-36(fp)
811263d4:	00000c06 	br	81126408 <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
811263d8:	e0bff617 	ldw	r2,-40(fp)
811263dc:	e0fff517 	ldw	r3,-44(fp)
811263e0:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
811263e4:	e0bff517 	ldw	r2,-44(fp)
811263e8:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
811263ec:	e0fff517 	ldw	r3,-44(fp)
811263f0:	e0bffe17 	ldw	r2,-8(fp)
811263f4:	1885883a 	add	r2,r3,r2
811263f8:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
811263fc:	e0bff717 	ldw	r2,-36(fp)
81126400:	10800044 	addi	r2,r2,1
81126404:	e0bff715 	stw	r2,-36(fp)
81126408:	e0bffd17 	ldw	r2,-12(fp)
8112640c:	10bfffc4 	addi	r2,r2,-1
81126410:	e0fff717 	ldw	r3,-36(fp)
81126414:	18bff036 	bltu	r3,r2,811263d8 <__reset+0xfb1063d8>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
81126418:	e0bff617 	ldw	r2,-40(fp)
8112641c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
81126420:	e0bffa17 	ldw	r2,-24(fp)
81126424:	e0fffc17 	ldw	r3,-16(fp)
81126428:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112642c:	e0bffa17 	ldw	r2,-24(fp)
81126430:	e0fffc17 	ldw	r3,-16(fp)
81126434:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
81126438:	e0bffa17 	ldw	r2,-24(fp)
8112643c:	e0fffd17 	ldw	r3,-12(fp)
81126440:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
81126444:	e0bffa17 	ldw	r2,-24(fp)
81126448:	e0fffd17 	ldw	r3,-12(fp)
8112644c:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
81126450:	e0bffa17 	ldw	r2,-24(fp)
81126454:	e0fffe17 	ldw	r3,-8(fp)
81126458:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112645c:	e0bfff17 	ldw	r2,-4(fp)
81126460:	10000005 	stb	zero,0(r2)
    return (pmem);
81126464:	e0bffa17 	ldw	r2,-24(fp)
}
81126468:	e037883a 	mov	sp,fp
8112646c:	df000017 	ldw	fp,0(sp)
81126470:	dec00104 	addi	sp,sp,4
81126474:	f800283a 	ret

81126478 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
81126478:	defff804 	addi	sp,sp,-32
8112647c:	df000715 	stw	fp,28(sp)
81126480:	df000704 	addi	fp,sp,28
81126484:	e13ffe15 	stw	r4,-8(fp)
81126488:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112648c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81126490:	e0bfff17 	ldw	r2,-4(fp)
81126494:	1000021e 	bne	r2,zero,811264a0 <OSMemGet+0x28>
        return ((void *)0);
81126498:	0005883a 	mov	r2,zero
8112649c:	00002e06 	br	81126558 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
811264a0:	e0bffe17 	ldw	r2,-8(fp)
811264a4:	1000051e 	bne	r2,zero,811264bc <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
811264a8:	e0bfff17 	ldw	r2,-4(fp)
811264ac:	00c01804 	movi	r3,96
811264b0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811264b4:	0005883a 	mov	r2,zero
811264b8:	00002706 	br	81126558 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811264bc:	0005303a 	rdctl	r2,status
811264c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811264c4:	e0fffd17 	ldw	r3,-12(fp)
811264c8:	00bfff84 	movi	r2,-2
811264cc:	1884703a 	and	r2,r3,r2
811264d0:	1001703a 	wrctl	status,r2
  
  return context;
811264d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811264d8:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
811264dc:	e0bffe17 	ldw	r2,-8(fp)
811264e0:	10800417 	ldw	r2,16(r2)
811264e4:	10001426 	beq	r2,zero,81126538 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
811264e8:	e0bffe17 	ldw	r2,-8(fp)
811264ec:	10800117 	ldw	r2,4(r2)
811264f0:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
811264f4:	e0bffb17 	ldw	r2,-20(fp)
811264f8:	10c00017 	ldw	r3,0(r2)
811264fc:	e0bffe17 	ldw	r2,-8(fp)
81126500:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
81126504:	e0bffe17 	ldw	r2,-8(fp)
81126508:	10800417 	ldw	r2,16(r2)
8112650c:	10ffffc4 	addi	r3,r2,-1
81126510:	e0bffe17 	ldw	r2,-8(fp)
81126514:	10c00415 	stw	r3,16(r2)
81126518:	e0bff917 	ldw	r2,-28(fp)
8112651c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126520:	e0bffa17 	ldw	r2,-24(fp)
81126524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
81126528:	e0bfff17 	ldw	r2,-4(fp)
8112652c:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
81126530:	e0bffb17 	ldw	r2,-20(fp)
81126534:	00000806 	br	81126558 <OSMemGet+0xe0>
81126538:	e0bff917 	ldw	r2,-28(fp)
8112653c:	e0bffc15 	stw	r2,-16(fp)
81126540:	e0bffc17 	ldw	r2,-16(fp)
81126544:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
81126548:	e0bfff17 	ldw	r2,-4(fp)
8112654c:	00c01744 	movi	r3,93
81126550:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
81126554:	0005883a 	mov	r2,zero
}
81126558:	e037883a 	mov	sp,fp
8112655c:	df000017 	ldw	fp,0(sp)
81126560:	dec00104 	addi	sp,sp,4
81126564:	f800283a 	ret

81126568 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
81126568:	defff704 	addi	sp,sp,-36
8112656c:	dfc00815 	stw	ra,32(sp)
81126570:	df000715 	stw	fp,28(sp)
81126574:	df000704 	addi	fp,sp,28
81126578:	e13ffd15 	stw	r4,-12(fp)
8112657c:	e17ffe15 	stw	r5,-8(fp)
81126580:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126584:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81126588:	e0bfff17 	ldw	r2,-4(fp)
8112658c:	1000021e 	bne	r2,zero,81126598 <OSMemNameGet+0x30>
        return (0);
81126590:	0005883a 	mov	r2,zero
81126594:	00002b06 	br	81126644 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
81126598:	e0bffd17 	ldw	r2,-12(fp)
8112659c:	1000051e 	bne	r2,zero,811265b4 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
811265a0:	e0bfff17 	ldw	r2,-4(fp)
811265a4:	00c01804 	movi	r3,96
811265a8:	10c00005 	stb	r3,0(r2)
        return (0);
811265ac:	0005883a 	mov	r2,zero
811265b0:	00002406 	br	81126644 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
811265b4:	e0bffe17 	ldw	r2,-8(fp)
811265b8:	1000051e 	bne	r2,zero,811265d0 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
811265bc:	e0bfff17 	ldw	r2,-4(fp)
811265c0:	00c00304 	movi	r3,12
811265c4:	10c00005 	stb	r3,0(r2)
        return (0);
811265c8:	0005883a 	mov	r2,zero
811265cc:	00001d06 	br	81126644 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811265d0:	d0a08803 	ldbu	r2,-32224(gp)
811265d4:	10803fcc 	andi	r2,r2,255
811265d8:	10000526 	beq	r2,zero,811265f0 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
811265dc:	e0bfff17 	ldw	r2,-4(fp)
811265e0:	00c00444 	movi	r3,17
811265e4:	10c00005 	stb	r3,0(r2)
        return (0);
811265e8:	0005883a 	mov	r2,zero
811265ec:	00001506 	br	81126644 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811265f0:	0005303a 	rdctl	r2,status
811265f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811265f8:	e0fffb17 	ldw	r3,-20(fp)
811265fc:	00bfff84 	movi	r2,-2
81126600:	1884703a 	and	r2,r3,r2
81126604:	1001703a 	wrctl	status,r2
  
  return context;
81126608:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112660c:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
81126610:	e0bffd17 	ldw	r2,-12(fp)
81126614:	10800504 	addi	r2,r2,20
81126618:	100b883a 	mov	r5,r2
8112661c:	e13ffe17 	ldw	r4,-8(fp)
81126620:	11244600 	call	81124460 <OS_StrCopy>
81126624:	e0bffa05 	stb	r2,-24(fp)
81126628:	e0bff917 	ldw	r2,-28(fp)
8112662c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126630:	e0bffc17 	ldw	r2,-16(fp)
81126634:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81126638:	e0bfff17 	ldw	r2,-4(fp)
8112663c:	10000005 	stb	zero,0(r2)
    return (len);
81126640:	e0bffa03 	ldbu	r2,-24(fp)
}
81126644:	e037883a 	mov	sp,fp
81126648:	dfc00117 	ldw	ra,4(sp)
8112664c:	df000017 	ldw	fp,0(sp)
81126650:	dec00204 	addi	sp,sp,8
81126654:	f800283a 	ret

81126658 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
81126658:	defff604 	addi	sp,sp,-40
8112665c:	dfc00915 	stw	ra,36(sp)
81126660:	df000815 	stw	fp,32(sp)
81126664:	df000804 	addi	fp,sp,32
81126668:	e13ffd15 	stw	r4,-12(fp)
8112666c:	e17ffe15 	stw	r5,-8(fp)
81126670:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126674:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81126678:	e0bfff17 	ldw	r2,-4(fp)
8112667c:	10003526 	beq	r2,zero,81126754 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
81126680:	e0bffd17 	ldw	r2,-12(fp)
81126684:	1000041e 	bne	r2,zero,81126698 <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
81126688:	e0bfff17 	ldw	r2,-4(fp)
8112668c:	00c01804 	movi	r3,96
81126690:	10c00005 	stb	r3,0(r2)
        return;
81126694:	00003006 	br	81126758 <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81126698:	e0bffe17 	ldw	r2,-8(fp)
8112669c:	1000041e 	bne	r2,zero,811266b0 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
811266a0:	e0bfff17 	ldw	r2,-4(fp)
811266a4:	00c00304 	movi	r3,12
811266a8:	10c00005 	stb	r3,0(r2)
        return;
811266ac:	00002a06 	br	81126758 <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811266b0:	d0a08803 	ldbu	r2,-32224(gp)
811266b4:	10803fcc 	andi	r2,r2,255
811266b8:	10000426 	beq	r2,zero,811266cc <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
811266bc:	e0bfff17 	ldw	r2,-4(fp)
811266c0:	00c00484 	movi	r3,18
811266c4:	10c00005 	stb	r3,0(r2)
        return;
811266c8:	00002306 	br	81126758 <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811266cc:	0005303a 	rdctl	r2,status
811266d0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811266d4:	e0fffc17 	ldw	r3,-16(fp)
811266d8:	00bfff84 	movi	r2,-2
811266dc:	1884703a 	and	r2,r3,r2
811266e0:	1001703a 	wrctl	status,r2
  
  return context;
811266e4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811266e8:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
811266ec:	e13ffe17 	ldw	r4,-8(fp)
811266f0:	11244d40 	call	811244d4 <OS_StrLen>
811266f4:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
811266f8:	e0bffa03 	ldbu	r2,-24(fp)
811266fc:	10800830 	cmpltui	r2,r2,32
81126700:	1000081e 	bne	r2,zero,81126724 <OSMemNameSet+0xcc>
81126704:	e0bff817 	ldw	r2,-32(fp)
81126708:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112670c:	e0bff917 	ldw	r2,-28(fp)
81126710:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
81126714:	e0bfff17 	ldw	r2,-4(fp)
81126718:	00c018c4 	movi	r3,99
8112671c:	10c00005 	stb	r3,0(r2)
        return;
81126720:	00000d06 	br	81126758 <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
81126724:	e0bffd17 	ldw	r2,-12(fp)
81126728:	10800504 	addi	r2,r2,20
8112672c:	e17ffe17 	ldw	r5,-8(fp)
81126730:	1009883a 	mov	r4,r2
81126734:	11244600 	call	81124460 <OS_StrCopy>
81126738:	e0bff817 	ldw	r2,-32(fp)
8112673c:	e0bffb15 	stw	r2,-20(fp)
81126740:	e0bffb17 	ldw	r2,-20(fp)
81126744:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81126748:	e0bfff17 	ldw	r2,-4(fp)
8112674c:	10000005 	stb	zero,0(r2)
81126750:	00000106 	br	81126758 <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81126754:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81126758:	e037883a 	mov	sp,fp
8112675c:	dfc00117 	ldw	ra,4(sp)
81126760:	df000017 	ldw	fp,0(sp)
81126764:	dec00204 	addi	sp,sp,8
81126768:	f800283a 	ret

8112676c <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112676c:	defff904 	addi	sp,sp,-28
81126770:	df000615 	stw	fp,24(sp)
81126774:	df000604 	addi	fp,sp,24
81126778:	e13ffe15 	stw	r4,-8(fp)
8112677c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126780:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
81126784:	e0bffe17 	ldw	r2,-8(fp)
81126788:	1000021e 	bne	r2,zero,81126794 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
8112678c:	00801804 	movi	r2,96
81126790:	00002806 	br	81126834 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
81126794:	e0bfff17 	ldw	r2,-4(fp)
81126798:	1000021e 	bne	r2,zero,811267a4 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
8112679c:	008017c4 	movi	r2,95
811267a0:	00002406 	br	81126834 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811267a4:	0005303a 	rdctl	r2,status
811267a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811267ac:	e0fffd17 	ldw	r3,-12(fp)
811267b0:	00bfff84 	movi	r2,-2
811267b4:	1884703a 	and	r2,r3,r2
811267b8:	1001703a 	wrctl	status,r2
  
  return context;
811267bc:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811267c0:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
811267c4:	e0bffe17 	ldw	r2,-8(fp)
811267c8:	10c00417 	ldw	r3,16(r2)
811267cc:	e0bffe17 	ldw	r2,-8(fp)
811267d0:	10800317 	ldw	r2,12(r2)
811267d4:	18800636 	bltu	r3,r2,811267f0 <OSMemPut+0x84>
811267d8:	e0bffa17 	ldw	r2,-24(fp)
811267dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811267e0:	e0bffb17 	ldw	r2,-20(fp)
811267e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
811267e8:	00801784 	movi	r2,94
811267ec:	00001106 	br	81126834 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
811267f0:	e0bffe17 	ldw	r2,-8(fp)
811267f4:	10c00117 	ldw	r3,4(r2)
811267f8:	e0bfff17 	ldw	r2,-4(fp)
811267fc:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
81126800:	e0bffe17 	ldw	r2,-8(fp)
81126804:	e0ffff17 	ldw	r3,-4(fp)
81126808:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112680c:	e0bffe17 	ldw	r2,-8(fp)
81126810:	10800417 	ldw	r2,16(r2)
81126814:	10c00044 	addi	r3,r2,1
81126818:	e0bffe17 	ldw	r2,-8(fp)
8112681c:	10c00415 	stw	r3,16(r2)
81126820:	e0bffa17 	ldw	r2,-24(fp)
81126824:	e0bffc15 	stw	r2,-16(fp)
81126828:	e0bffc17 	ldw	r2,-16(fp)
8112682c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
81126830:	0005883a 	mov	r2,zero
}
81126834:	e037883a 	mov	sp,fp
81126838:	df000017 	ldw	fp,0(sp)
8112683c:	dec00104 	addi	sp,sp,4
81126840:	f800283a 	ret

81126844 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
81126844:	defffa04 	addi	sp,sp,-24
81126848:	df000515 	stw	fp,20(sp)
8112684c:	df000504 	addi	fp,sp,20
81126850:	e13ffe15 	stw	r4,-8(fp)
81126854:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126858:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112685c:	e0bffe17 	ldw	r2,-8(fp)
81126860:	1000021e 	bne	r2,zero,8112686c <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
81126864:	00801804 	movi	r2,96
81126868:	00002c06 	br	8112691c <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112686c:	e0bfff17 	ldw	r2,-4(fp)
81126870:	1000021e 	bne	r2,zero,8112687c <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
81126874:	00801844 	movi	r2,97
81126878:	00002806 	br	8112691c <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112687c:	0005303a 	rdctl	r2,status
81126880:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126884:	e0fffc17 	ldw	r3,-16(fp)
81126888:	00bfff84 	movi	r2,-2
8112688c:	1884703a 	and	r2,r3,r2
81126890:	1001703a 	wrctl	status,r2
  
  return context;
81126894:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81126898:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112689c:	e0bffe17 	ldw	r2,-8(fp)
811268a0:	10c00017 	ldw	r3,0(r2)
811268a4:	e0bfff17 	ldw	r2,-4(fp)
811268a8:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
811268ac:	e0bffe17 	ldw	r2,-8(fp)
811268b0:	10c00117 	ldw	r3,4(r2)
811268b4:	e0bfff17 	ldw	r2,-4(fp)
811268b8:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
811268bc:	e0bffe17 	ldw	r2,-8(fp)
811268c0:	10c00217 	ldw	r3,8(r2)
811268c4:	e0bfff17 	ldw	r2,-4(fp)
811268c8:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
811268cc:	e0bffe17 	ldw	r2,-8(fp)
811268d0:	10c00317 	ldw	r3,12(r2)
811268d4:	e0bfff17 	ldw	r2,-4(fp)
811268d8:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
811268dc:	e0bffe17 	ldw	r2,-8(fp)
811268e0:	10c00417 	ldw	r3,16(r2)
811268e4:	e0bfff17 	ldw	r2,-4(fp)
811268e8:	10c00415 	stw	r3,16(r2)
811268ec:	e0bffb17 	ldw	r2,-20(fp)
811268f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811268f4:	e0bffd17 	ldw	r2,-12(fp)
811268f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
811268fc:	e0bfff17 	ldw	r2,-4(fp)
81126900:	10c00317 	ldw	r3,12(r2)
81126904:	e0bfff17 	ldw	r2,-4(fp)
81126908:	10800417 	ldw	r2,16(r2)
8112690c:	1887c83a 	sub	r3,r3,r2
81126910:	e0bfff17 	ldw	r2,-4(fp)
81126914:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
81126918:	0005883a 	mov	r2,zero
}
8112691c:	e037883a 	mov	sp,fp
81126920:	df000017 	ldw	fp,0(sp)
81126924:	dec00104 	addi	sp,sp,4
81126928:	f800283a 	ret

8112692c <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112692c:	defffc04 	addi	sp,sp,-16
81126930:	dfc00315 	stw	ra,12(sp)
81126934:	df000215 	stw	fp,8(sp)
81126938:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112693c:	01430c04 	movi	r5,3120
81126940:	012045b4 	movhi	r4,33046
81126944:	212a2a04 	addi	r4,r4,-22360
81126948:	11242600 	call	81124260 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112694c:	00a045b4 	movhi	r2,33046
81126950:	10aa2a04 	addi	r2,r2,-22360
81126954:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
81126958:	e03fff0d 	sth	zero,-4(fp)
8112695c:	00001306 	br	811269ac <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
81126960:	e0bfff0b 	ldhu	r2,-4(fp)
81126964:	10800044 	addi	r2,r2,1
81126968:	10c00d24 	muli	r3,r2,52
8112696c:	00a045b4 	movhi	r2,33046
81126970:	10aa2a04 	addi	r2,r2,-22360
81126974:	1887883a 	add	r3,r3,r2
81126978:	e0bffe17 	ldw	r2,-8(fp)
8112697c:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
81126980:	e0bffe17 	ldw	r2,-8(fp)
81126984:	00c00fc4 	movi	r3,63
81126988:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112698c:	e0bffe17 	ldw	r2,-8(fp)
81126990:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
81126994:	e0bffe17 	ldw	r2,-8(fp)
81126998:	10800d04 	addi	r2,r2,52
8112699c:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
811269a0:	e0bfff0b 	ldhu	r2,-4(fp)
811269a4:	10800044 	addi	r2,r2,1
811269a8:	e0bfff0d 	sth	r2,-4(fp)
811269ac:	e0bfff0b 	ldhu	r2,-4(fp)
811269b0:	10800ef0 	cmpltui	r2,r2,59
811269b4:	103fea1e 	bne	r2,zero,81126960 <__reset+0xfb106960>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
811269b8:	e0bffe17 	ldw	r2,-8(fp)
811269bc:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
811269c0:	e0bffe17 	ldw	r2,-8(fp)
811269c4:	00c00fc4 	movi	r3,63
811269c8:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
811269cc:	e0bffe17 	ldw	r2,-8(fp)
811269d0:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
811269d4:	00a045b4 	movhi	r2,33046
811269d8:	10aa2a04 	addi	r2,r2,-22360
811269dc:	d0a08215 	stw	r2,-32248(gp)
#endif
}
811269e0:	0001883a 	nop
811269e4:	e037883a 	mov	sp,fp
811269e8:	dfc00117 	ldw	ra,4(sp)
811269ec:	df000017 	ldw	fp,0(sp)
811269f0:	dec00204 	addi	sp,sp,8
811269f4:	f800283a 	ret

811269f8 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
811269f8:	defff704 	addi	sp,sp,-36
811269fc:	df000815 	stw	fp,32(sp)
81126a00:	df000804 	addi	fp,sp,32
81126a04:	e13ffe15 	stw	r4,-8(fp)
81126a08:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81126a0c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
81126a10:	e0bfff17 	ldw	r2,-4(fp)
81126a14:	1000021e 	bne	r2,zero,81126a20 <OSMutexAccept+0x28>
        return (OS_FALSE);
81126a18:	0005883a 	mov	r2,zero
81126a1c:	00005b06 	br	81126b8c <OSMutexAccept+0x194>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
81126a20:	e0bffe17 	ldw	r2,-8(fp)
81126a24:	1000051e 	bne	r2,zero,81126a3c <OSMutexAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
81126a28:	e0bfff17 	ldw	r2,-4(fp)
81126a2c:	00c00104 	movi	r3,4
81126a30:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81126a34:	0005883a 	mov	r2,zero
81126a38:	00005406 	br	81126b8c <OSMutexAccept+0x194>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
81126a3c:	e0bffe17 	ldw	r2,-8(fp)
81126a40:	10800003 	ldbu	r2,0(r2)
81126a44:	10803fcc 	andi	r2,r2,255
81126a48:	10800120 	cmpeqi	r2,r2,4
81126a4c:	1000051e 	bne	r2,zero,81126a64 <OSMutexAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
81126a50:	e0bfff17 	ldw	r2,-4(fp)
81126a54:	00c00044 	movi	r3,1
81126a58:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81126a5c:	0005883a 	mov	r2,zero
81126a60:	00004a06 	br	81126b8c <OSMutexAccept+0x194>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
81126a64:	d0a08803 	ldbu	r2,-32224(gp)
81126a68:	10803fcc 	andi	r2,r2,255
81126a6c:	10000526 	beq	r2,zero,81126a84 <OSMutexAccept+0x8c>
        *perr = OS_ERR_PEND_ISR;
81126a70:	e0bfff17 	ldw	r2,-4(fp)
81126a74:	00c00084 	movi	r3,2
81126a78:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
81126a7c:	0005883a 	mov	r2,zero
81126a80:	00004206 	br	81126b8c <OSMutexAccept+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126a84:	0005303a 	rdctl	r2,status
81126a88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126a8c:	e0fffd17 	ldw	r3,-12(fp)
81126a90:	00bfff84 	movi	r2,-2
81126a94:	1884703a 	and	r2,r3,r2
81126a98:	1001703a 	wrctl	status,r2
  
  return context;
81126a9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
81126aa0:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
81126aa4:	e0bffe17 	ldw	r2,-8(fp)
81126aa8:	1080020b 	ldhu	r2,8(r2)
81126aac:	10bfffcc 	andi	r2,r2,65535
81126ab0:	1004d23a 	srli	r2,r2,8
81126ab4:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
81126ab8:	e0bffe17 	ldw	r2,-8(fp)
81126abc:	1080020b 	ldhu	r2,8(r2)
81126ac0:	10bfffcc 	andi	r2,r2,65535
81126ac4:	10803fcc 	andi	r2,r2,255
81126ac8:	10803fd8 	cmpnei	r2,r2,255
81126acc:	1000281e 	bne	r2,zero,81126b70 <OSMutexAccept+0x178>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
81126ad0:	e0bffe17 	ldw	r2,-8(fp)
81126ad4:	10c0020b 	ldhu	r3,8(r2)
81126ad8:	00bfc004 	movi	r2,-256
81126adc:	1884703a 	and	r2,r3,r2
81126ae0:	1007883a 	mov	r3,r2
81126ae4:	e0bffe17 	ldw	r2,-8(fp)
81126ae8:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
81126aec:	e0bffe17 	ldw	r2,-8(fp)
81126af0:	10c0020b 	ldhu	r3,8(r2)
81126af4:	d0a08917 	ldw	r2,-32220(gp)
81126af8:	10800c83 	ldbu	r2,50(r2)
81126afc:	10803fcc 	andi	r2,r2,255
81126b00:	1884b03a 	or	r2,r3,r2
81126b04:	1007883a 	mov	r3,r2
81126b08:	e0bffe17 	ldw	r2,-8(fp)
81126b0c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
81126b10:	d0e08917 	ldw	r3,-32220(gp)
81126b14:	e0bffe17 	ldw	r2,-8(fp)
81126b18:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
81126b1c:	d0a08917 	ldw	r2,-32220(gp)
81126b20:	10800c83 	ldbu	r2,50(r2)
81126b24:	10803fcc 	andi	r2,r2,255
81126b28:	e0fffa03 	ldbu	r3,-24(fp)
81126b2c:	18800836 	bltu	r3,r2,81126b50 <OSMutexAccept+0x158>
81126b30:	e0bff817 	ldw	r2,-32(fp)
81126b34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126b38:	e0bff917 	ldw	r2,-28(fp)
81126b3c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
81126b40:	e0bfff17 	ldw	r2,-4(fp)
81126b44:	00c01e04 	movi	r3,120
81126b48:	10c00005 	stb	r3,0(r2)
81126b4c:	00000606 	br	81126b68 <OSMutexAccept+0x170>
81126b50:	e0bff817 	ldw	r2,-32(fp)
81126b54:	e0bffb15 	stw	r2,-20(fp)
81126b58:	e0bffb17 	ldw	r2,-20(fp)
81126b5c:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
81126b60:	e0bfff17 	ldw	r2,-4(fp)
81126b64:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
81126b68:	00800044 	movi	r2,1
81126b6c:	00000706 	br	81126b8c <OSMutexAccept+0x194>
81126b70:	e0bff817 	ldw	r2,-32(fp)
81126b74:	e0bffc15 	stw	r2,-16(fp)
81126b78:	e0bffc17 	ldw	r2,-16(fp)
81126b7c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81126b80:	e0bfff17 	ldw	r2,-4(fp)
81126b84:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
81126b88:	0005883a 	mov	r2,zero
}
81126b8c:	e037883a 	mov	sp,fp
81126b90:	df000017 	ldw	fp,0(sp)
81126b94:	dec00104 	addi	sp,sp,4
81126b98:	f800283a 	ret

81126b9c <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
81126b9c:	defff604 	addi	sp,sp,-40
81126ba0:	dfc00915 	stw	ra,36(sp)
81126ba4:	df000815 	stw	fp,32(sp)
81126ba8:	df000804 	addi	fp,sp,32
81126bac:	2005883a 	mov	r2,r4
81126bb0:	e17fff15 	stw	r5,-4(fp)
81126bb4:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81126bb8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81126bbc:	e0bfff17 	ldw	r2,-4(fp)
81126bc0:	1000021e 	bne	r2,zero,81126bcc <OSMutexCreate+0x30>
        return ((OS_EVENT *)0);
81126bc4:	0005883a 	mov	r2,zero
81126bc8:	00006106 	br	81126d50 <OSMutexCreate+0x1b4>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
81126bcc:	e0bffe03 	ldbu	r2,-8(fp)
81126bd0:	108007b0 	cmpltui	r2,r2,30
81126bd4:	1000051e 	bne	r2,zero,81126bec <OSMutexCreate+0x50>
        *perr = OS_ERR_PRIO_INVALID;
81126bd8:	e0bfff17 	ldw	r2,-4(fp)
81126bdc:	00c00a84 	movi	r3,42
81126be0:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
81126be4:	0005883a 	mov	r2,zero
81126be8:	00005906 	br	81126d50 <OSMutexCreate+0x1b4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81126bec:	d0a08803 	ldbu	r2,-32224(gp)
81126bf0:	10803fcc 	andi	r2,r2,255
81126bf4:	10000526 	beq	r2,zero,81126c0c <OSMutexCreate+0x70>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
81126bf8:	e0bfff17 	ldw	r2,-4(fp)
81126bfc:	00c00404 	movi	r3,16
81126c00:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
81126c04:	0005883a 	mov	r2,zero
81126c08:	00005106 	br	81126d50 <OSMutexCreate+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126c0c:	0005303a 	rdctl	r2,status
81126c10:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126c14:	e0fffd17 	ldw	r3,-12(fp)
81126c18:	00bfff84 	movi	r2,-2
81126c1c:	1884703a 	and	r2,r3,r2
81126c20:	1001703a 	wrctl	status,r2
  
  return context;
81126c24:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81126c28:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
81126c2c:	e0fffe03 	ldbu	r3,-8(fp)
81126c30:	00a045b4 	movhi	r2,33046
81126c34:	10b75704 	addi	r2,r2,-8868
81126c38:	18c7883a 	add	r3,r3,r3
81126c3c:	18c7883a 	add	r3,r3,r3
81126c40:	10c5883a 	add	r2,r2,r3
81126c44:	10800017 	ldw	r2,0(r2)
81126c48:	10000926 	beq	r2,zero,81126c70 <OSMutexCreate+0xd4>
81126c4c:	e0bff817 	ldw	r2,-32(fp)
81126c50:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126c54:	e0bff917 	ldw	r2,-28(fp)
81126c58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
81126c5c:	e0bfff17 	ldw	r2,-4(fp)
81126c60:	00c00a04 	movi	r3,40
81126c64:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
81126c68:	0005883a 	mov	r2,zero
81126c6c:	00003806 	br	81126d50 <OSMutexCreate+0x1b4>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
81126c70:	e0fffe03 	ldbu	r3,-8(fp)
81126c74:	00a045b4 	movhi	r2,33046
81126c78:	10b75704 	addi	r2,r2,-8868
81126c7c:	18c7883a 	add	r3,r3,r3
81126c80:	18c7883a 	add	r3,r3,r3
81126c84:	10c5883a 	add	r2,r2,r3
81126c88:	00c00044 	movi	r3,1
81126c8c:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
81126c90:	d0a08717 	ldw	r2,-32228(gp)
81126c94:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
81126c98:	e0bffb17 	ldw	r2,-20(fp)
81126c9c:	1000101e 	bne	r2,zero,81126ce0 <OSMutexCreate+0x144>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
81126ca0:	e0fffe03 	ldbu	r3,-8(fp)
81126ca4:	00a045b4 	movhi	r2,33046
81126ca8:	10b75704 	addi	r2,r2,-8868
81126cac:	18c7883a 	add	r3,r3,r3
81126cb0:	18c7883a 	add	r3,r3,r3
81126cb4:	10c5883a 	add	r2,r2,r3
81126cb8:	10000015 	stw	zero,0(r2)
81126cbc:	e0bff817 	ldw	r2,-32(fp)
81126cc0:	e0bffa15 	stw	r2,-24(fp)
81126cc4:	e0bffa17 	ldw	r2,-24(fp)
81126cc8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
81126ccc:	e0bfff17 	ldw	r2,-4(fp)
81126cd0:	00c00104 	movi	r3,4
81126cd4:	10c00005 	stb	r3,0(r2)
        return (pevent);
81126cd8:	e0bffb17 	ldw	r2,-20(fp)
81126cdc:	00001c06 	br	81126d50 <OSMutexCreate+0x1b4>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
81126ce0:	d0a08717 	ldw	r2,-32228(gp)
81126ce4:	10800117 	ldw	r2,4(r2)
81126ce8:	d0a08715 	stw	r2,-32228(gp)
81126cec:	e0bff817 	ldw	r2,-32(fp)
81126cf0:	e0bffc15 	stw	r2,-16(fp)
81126cf4:	e0bffc17 	ldw	r2,-16(fp)
81126cf8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
81126cfc:	e0bffb17 	ldw	r2,-20(fp)
81126d00:	00c00104 	movi	r3,4
81126d04:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
81126d08:	e0bffe03 	ldbu	r2,-8(fp)
81126d0c:	1004923a 	slli	r2,r2,8
81126d10:	10803fd4 	ori	r2,r2,255
81126d14:	1007883a 	mov	r3,r2
81126d18:	e0bffb17 	ldw	r2,-20(fp)
81126d1c:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
81126d20:	e0bffb17 	ldw	r2,-20(fp)
81126d24:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
81126d28:	e0bffb17 	ldw	r2,-20(fp)
81126d2c:	00c00fc4 	movi	r3,63
81126d30:	10c003c5 	stb	r3,15(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
81126d34:	e0bffb17 	ldw	r2,-20(fp)
81126d38:	10000405 	stb	zero,16(r2)
#endif
    OS_EventWaitListInit(pevent);
81126d3c:	e13ffb17 	ldw	r4,-20(fp)
81126d40:	1123e800 	call	81123e80 <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
81126d44:	e0bfff17 	ldw	r2,-4(fp)
81126d48:	10000005 	stb	zero,0(r2)
    return (pevent);
81126d4c:	e0bffb17 	ldw	r2,-20(fp)
}
81126d50:	e037883a 	mov	sp,fp
81126d54:	dfc00117 	ldw	ra,4(sp)
81126d58:	df000017 	ldw	fp,0(sp)
81126d5c:	dec00204 	addi	sp,sp,8
81126d60:	f800283a 	ret

81126d64 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81126d64:	defff004 	addi	sp,sp,-64
81126d68:	dfc00f15 	stw	ra,60(sp)
81126d6c:	df000e15 	stw	fp,56(sp)
81126d70:	df000e04 	addi	fp,sp,56
81126d74:	e13ffd15 	stw	r4,-12(fp)
81126d78:	2805883a 	mov	r2,r5
81126d7c:	e1bfff15 	stw	r6,-4(fp)
81126d80:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81126d84:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81126d88:	e0bfff17 	ldw	r2,-4(fp)
81126d8c:	1000021e 	bne	r2,zero,81126d98 <OSMutexDel+0x34>
        return (pevent);
81126d90:	e0bffd17 	ldw	r2,-12(fp)
81126d94:	0000ad06 	br	8112704c <OSMutexDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81126d98:	e0bffd17 	ldw	r2,-12(fp)
81126d9c:	1000051e 	bne	r2,zero,81126db4 <OSMutexDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81126da0:	e0bfff17 	ldw	r2,-4(fp)
81126da4:	00c00104 	movi	r3,4
81126da8:	10c00005 	stb	r3,0(r2)
        return (pevent);
81126dac:	e0bffd17 	ldw	r2,-12(fp)
81126db0:	0000a606 	br	8112704c <OSMutexDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
81126db4:	e0bffd17 	ldw	r2,-12(fp)
81126db8:	10800003 	ldbu	r2,0(r2)
81126dbc:	10803fcc 	andi	r2,r2,255
81126dc0:	10800120 	cmpeqi	r2,r2,4
81126dc4:	1000051e 	bne	r2,zero,81126ddc <OSMutexDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81126dc8:	e0bfff17 	ldw	r2,-4(fp)
81126dcc:	00c00044 	movi	r3,1
81126dd0:	10c00005 	stb	r3,0(r2)
        return (pevent);
81126dd4:	e0bffd17 	ldw	r2,-12(fp)
81126dd8:	00009c06 	br	8112704c <OSMutexDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81126ddc:	d0a08803 	ldbu	r2,-32224(gp)
81126de0:	10803fcc 	andi	r2,r2,255
81126de4:	10000526 	beq	r2,zero,81126dfc <OSMutexDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
81126de8:	e0bfff17 	ldw	r2,-4(fp)
81126dec:	00c003c4 	movi	r3,15
81126df0:	10c00005 	stb	r3,0(r2)
        return (pevent);
81126df4:	e0bffd17 	ldw	r2,-12(fp)
81126df8:	00009406 	br	8112704c <OSMutexDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126dfc:	0005303a 	rdctl	r2,status
81126e00:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126e04:	e0fffc17 	ldw	r3,-16(fp)
81126e08:	00bfff84 	movi	r2,-2
81126e0c:	1884703a 	and	r2,r3,r2
81126e10:	1001703a 	wrctl	status,r2
  
  return context;
81126e14:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81126e18:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
81126e1c:	e0bffd17 	ldw	r2,-12(fp)
81126e20:	10800283 	ldbu	r2,10(r2)
81126e24:	10803fcc 	andi	r2,r2,255
81126e28:	10000326 	beq	r2,zero,81126e38 <OSMutexDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81126e2c:	00800044 	movi	r2,1
81126e30:	e0bff205 	stb	r2,-56(fp)
81126e34:	00000106 	br	81126e3c <OSMutexDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81126e38:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
81126e3c:	e0bffe03 	ldbu	r2,-8(fp)
81126e40:	10000326 	beq	r2,zero,81126e50 <OSMutexDel+0xec>
81126e44:	10800060 	cmpeqi	r2,r2,1
81126e48:	10002f1e 	bne	r2,zero,81126f08 <OSMutexDel+0x1a4>
81126e4c:	00007406 	br	81127020 <OSMutexDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
81126e50:	e0bff203 	ldbu	r2,-56(fp)
81126e54:	1000221e 	bne	r2,zero,81126ee0 <OSMutexDel+0x17c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81126e58:	e0bffd17 	ldw	r2,-12(fp)
81126e5c:	00c00fc4 	movi	r3,63
81126e60:	10c003c5 	stb	r3,15(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81126e64:	e0bffd17 	ldw	r2,-12(fp)
81126e68:	10000405 	stb	zero,16(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
81126e6c:	e0bffd17 	ldw	r2,-12(fp)
81126e70:	1080020b 	ldhu	r2,8(r2)
81126e74:	10bfffcc 	andi	r2,r2,65535
81126e78:	1004d23a 	srli	r2,r2,8
81126e7c:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
81126e80:	e0fff603 	ldbu	r3,-40(fp)
81126e84:	00a045b4 	movhi	r2,33046
81126e88:	10b75704 	addi	r2,r2,-8868
81126e8c:	18c7883a 	add	r3,r3,r3
81126e90:	18c7883a 	add	r3,r3,r3
81126e94:	10c5883a 	add	r2,r2,r3
81126e98:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
81126e9c:	e0bffd17 	ldw	r2,-12(fp)
81126ea0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
81126ea4:	d0e08717 	ldw	r3,-32228(gp)
81126ea8:	e0bffd17 	ldw	r2,-12(fp)
81126eac:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
81126eb0:	e0bffd17 	ldw	r2,-12(fp)
81126eb4:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
81126eb8:	e0bffd17 	ldw	r2,-12(fp)
81126ebc:	d0a08715 	stw	r2,-32228(gp)
81126ec0:	e0bff417 	ldw	r2,-48(fp)
81126ec4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126ec8:	e0bff517 	ldw	r2,-44(fp)
81126ecc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
81126ed0:	e0bfff17 	ldw	r2,-4(fp)
81126ed4:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
81126ed8:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
81126edc:	00005a06 	br	81127048 <OSMutexDel+0x2e4>
81126ee0:	e0bff417 	ldw	r2,-48(fp)
81126ee4:	e0bff715 	stw	r2,-36(fp)
81126ee8:	e0bff717 	ldw	r2,-36(fp)
81126eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
81126ef0:	e0bfff17 	ldw	r2,-4(fp)
81126ef4:	00c01244 	movi	r3,73
81126ef8:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
81126efc:	e0bffd17 	ldw	r2,-12(fp)
81126f00:	e0bff315 	stw	r2,-52(fp)
             }
             break;
81126f04:	00005006 	br	81127048 <OSMutexDel+0x2e4>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
81126f08:	e0bffd17 	ldw	r2,-12(fp)
81126f0c:	1080020b 	ldhu	r2,8(r2)
81126f10:	10bfffcc 	andi	r2,r2,65535
81126f14:	1004d23a 	srli	r2,r2,8
81126f18:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
81126f1c:	e0bffd17 	ldw	r2,-12(fp)
81126f20:	1080020b 	ldhu	r2,8(r2)
81126f24:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
81126f28:	e0bffd17 	ldw	r2,-12(fp)
81126f2c:	10800117 	ldw	r2,4(r2)
81126f30:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
81126f34:	e0bffa17 	ldw	r2,-24(fp)
81126f38:	10000f26 	beq	r2,zero,81126f78 <OSMutexDel+0x214>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
81126f3c:	e0bffa17 	ldw	r2,-24(fp)
81126f40:	10800c83 	ldbu	r2,50(r2)
81126f44:	10c03fcc 	andi	r3,r2,255
81126f48:	e0bff603 	ldbu	r2,-40(fp)
81126f4c:	18800a1e 	bne	r3,r2,81126f78 <OSMutexDel+0x214>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
81126f50:	e0bff903 	ldbu	r2,-28(fp)
81126f54:	100b883a 	mov	r5,r2
81126f58:	e13ffa17 	ldw	r4,-24(fp)
81126f5c:	11279800 	call	81127980 <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
81126f60:	00000506 	br	81126f78 <OSMutexDel+0x214>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
81126f64:	000f883a 	mov	r7,zero
81126f68:	01800404 	movi	r6,16
81126f6c:	000b883a 	mov	r5,zero
81126f70:	e13ffd17 	ldw	r4,-12(fp)
81126f74:	11238d00 	call	811238d0 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
81126f78:	e0bffd17 	ldw	r2,-12(fp)
81126f7c:	10800283 	ldbu	r2,10(r2)
81126f80:	10803fcc 	andi	r2,r2,255
81126f84:	103ff71e 	bne	r2,zero,81126f64 <__reset+0xfb106f64>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81126f88:	e0bffd17 	ldw	r2,-12(fp)
81126f8c:	00c00fc4 	movi	r3,63
81126f90:	10c003c5 	stb	r3,15(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81126f94:	e0bffd17 	ldw	r2,-12(fp)
81126f98:	10000405 	stb	zero,16(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
81126f9c:	e0bffd17 	ldw	r2,-12(fp)
81126fa0:	1080020b 	ldhu	r2,8(r2)
81126fa4:	10bfffcc 	andi	r2,r2,65535
81126fa8:	1004d23a 	srli	r2,r2,8
81126fac:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
81126fb0:	e0fff603 	ldbu	r3,-40(fp)
81126fb4:	00a045b4 	movhi	r2,33046
81126fb8:	10b75704 	addi	r2,r2,-8868
81126fbc:	18c7883a 	add	r3,r3,r3
81126fc0:	18c7883a 	add	r3,r3,r3
81126fc4:	10c5883a 	add	r2,r2,r3
81126fc8:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
81126fcc:	e0bffd17 	ldw	r2,-12(fp)
81126fd0:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
81126fd4:	d0e08717 	ldw	r3,-32228(gp)
81126fd8:	e0bffd17 	ldw	r2,-12(fp)
81126fdc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
81126fe0:	e0bffd17 	ldw	r2,-12(fp)
81126fe4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
81126fe8:	e0bffd17 	ldw	r2,-12(fp)
81126fec:	d0a08715 	stw	r2,-32228(gp)
81126ff0:	e0bff417 	ldw	r2,-48(fp)
81126ff4:	e0bff815 	stw	r2,-32(fp)
81126ff8:	e0bff817 	ldw	r2,-32(fp)
81126ffc:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81127000:	e0bff203 	ldbu	r2,-56(fp)
81127004:	10800058 	cmpnei	r2,r2,1
81127008:	1000011e 	bne	r2,zero,81127010 <OSMutexDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112700c:	112431c0 	call	8112431c <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
81127010:	e0bfff17 	ldw	r2,-4(fp)
81127014:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
81127018:	e03ff315 	stw	zero,-52(fp)
             break;
8112701c:	00000a06 	br	81127048 <OSMutexDel+0x2e4>
81127020:	e0bff417 	ldw	r2,-48(fp)
81127024:	e0bffb15 	stw	r2,-20(fp)
81127028:	e0bffb17 	ldw	r2,-20(fp)
8112702c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
81127030:	e0bfff17 	ldw	r2,-4(fp)
81127034:	00c001c4 	movi	r3,7
81127038:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112703c:	e0bffd17 	ldw	r2,-12(fp)
81127040:	e0bff315 	stw	r2,-52(fp)
             break;
81127044:	0001883a 	nop
    }
    return (pevent_return);
81127048:	e0bff317 	ldw	r2,-52(fp)
}
8112704c:	e037883a 	mov	sp,fp
81127050:	dfc00117 	ldw	ra,4(sp)
81127054:	df000017 	ldw	fp,0(sp)
81127058:	dec00204 	addi	sp,sp,8
8112705c:	f800283a 	ret

81127060 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81127060:	deffee04 	addi	sp,sp,-72
81127064:	dfc01115 	stw	ra,68(sp)
81127068:	df001015 	stw	fp,64(sp)
8112706c:	df001004 	addi	fp,sp,64
81127070:	e13ffd15 	stw	r4,-12(fp)
81127074:	2805883a 	mov	r2,r5
81127078:	e1bfff15 	stw	r6,-4(fp)
8112707c:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81127080:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81127084:	e0bfff17 	ldw	r2,-4(fp)
81127088:	10015626 	beq	r2,zero,811275e4 <OSMutexPend+0x584>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112708c:	e0bffd17 	ldw	r2,-12(fp)
81127090:	1000041e 	bne	r2,zero,811270a4 <OSMutexPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
81127094:	e0bfff17 	ldw	r2,-4(fp)
81127098:	00c00104 	movi	r3,4
8112709c:	10c00005 	stb	r3,0(r2)
        return;
811270a0:	00015106 	br	811275e8 <OSMutexPend+0x588>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
811270a4:	e0bffd17 	ldw	r2,-12(fp)
811270a8:	10800003 	ldbu	r2,0(r2)
811270ac:	10803fcc 	andi	r2,r2,255
811270b0:	10800120 	cmpeqi	r2,r2,4
811270b4:	1000041e 	bne	r2,zero,811270c8 <OSMutexPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
811270b8:	e0bfff17 	ldw	r2,-4(fp)
811270bc:	00c00044 	movi	r3,1
811270c0:	10c00005 	stb	r3,0(r2)
        return;
811270c4:	00014806 	br	811275e8 <OSMutexPend+0x588>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
811270c8:	d0a08803 	ldbu	r2,-32224(gp)
811270cc:	10803fcc 	andi	r2,r2,255
811270d0:	10000426 	beq	r2,zero,811270e4 <OSMutexPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
811270d4:	e0bfff17 	ldw	r2,-4(fp)
811270d8:	00c00084 	movi	r3,2
811270dc:	10c00005 	stb	r3,0(r2)
        return;
811270e0:	00014106 	br	811275e8 <OSMutexPend+0x588>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
811270e4:	d0a07903 	ldbu	r2,-32284(gp)
811270e8:	10803fcc 	andi	r2,r2,255
811270ec:	10000426 	beq	r2,zero,81127100 <OSMutexPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
811270f0:	e0bfff17 	ldw	r2,-4(fp)
811270f4:	00c00344 	movi	r3,13
811270f8:	10c00005 	stb	r3,0(r2)
        return;
811270fc:	00013a06 	br	811275e8 <OSMutexPend+0x588>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127100:	0005303a 	rdctl	r2,status
81127104:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127108:	e0fffc17 	ldw	r3,-16(fp)
8112710c:	00bfff84 	movi	r2,-2
81127110:	1884703a 	and	r2,r3,r2
81127114:	1001703a 	wrctl	status,r2
  
  return context;
81127118:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112711c:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
81127120:	e0bffd17 	ldw	r2,-12(fp)
81127124:	1080020b 	ldhu	r2,8(r2)
81127128:	10bfffcc 	andi	r2,r2,65535
8112712c:	1004d23a 	srli	r2,r2,8
81127130:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
81127134:	e0bffd17 	ldw	r2,-12(fp)
81127138:	1080020b 	ldhu	r2,8(r2)
8112713c:	10803fcc 	andi	r2,r2,255
81127140:	10803fd8 	cmpnei	r2,r2,255
81127144:	1000271e 	bne	r2,zero,811271e4 <OSMutexPend+0x184>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
81127148:	e0bffd17 	ldw	r2,-12(fp)
8112714c:	10c0020b 	ldhu	r3,8(r2)
81127150:	00bfc004 	movi	r2,-256
81127154:	1884703a 	and	r2,r3,r2
81127158:	1007883a 	mov	r3,r2
8112715c:	e0bffd17 	ldw	r2,-12(fp)
81127160:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
81127164:	e0bffd17 	ldw	r2,-12(fp)
81127168:	10c0020b 	ldhu	r3,8(r2)
8112716c:	d0a08917 	ldw	r2,-32220(gp)
81127170:	10800c83 	ldbu	r2,50(r2)
81127174:	10803fcc 	andi	r2,r2,255
81127178:	1884b03a 	or	r2,r3,r2
8112717c:	1007883a 	mov	r3,r2
81127180:	e0bffd17 	ldw	r2,-12(fp)
81127184:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
81127188:	d0e08917 	ldw	r3,-32220(gp)
8112718c:	e0bffd17 	ldw	r2,-12(fp)
81127190:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
81127194:	d0a08917 	ldw	r2,-32220(gp)
81127198:	10800c83 	ldbu	r2,50(r2)
8112719c:	10803fcc 	andi	r2,r2,255
811271a0:	e0fff303 	ldbu	r3,-52(fp)
811271a4:	18800836 	bltu	r3,r2,811271c8 <OSMutexPend+0x168>
811271a8:	e0bff117 	ldw	r2,-60(fp)
811271ac:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811271b0:	e0bff217 	ldw	r2,-56(fp)
811271b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
811271b8:	e0bfff17 	ldw	r2,-4(fp)
811271bc:	00c01e04 	movi	r3,120
811271c0:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
811271c4:	00010806 	br	811275e8 <OSMutexPend+0x588>
811271c8:	e0bff117 	ldw	r2,-60(fp)
811271cc:	e0bff415 	stw	r2,-48(fp)
811271d0:	e0bff417 	ldw	r2,-48(fp)
811271d4:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
811271d8:	e0bfff17 	ldw	r2,-4(fp)
811271dc:	10000005 	stb	zero,0(r2)
        }
        return;
811271e0:	00010106 	br	811275e8 <OSMutexPend+0x588>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
811271e4:	e0bffd17 	ldw	r2,-12(fp)
811271e8:	1080020b 	ldhu	r2,8(r2)
811271ec:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
811271f0:	e0bffd17 	ldw	r2,-12(fp)
811271f4:	10800117 	ldw	r2,4(r2)
811271f8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
811271fc:	e0bff717 	ldw	r2,-36(fp)
81127200:	10800c83 	ldbu	r2,50(r2)
81127204:	10803fcc 	andi	r2,r2,255
81127208:	e0fff303 	ldbu	r3,-52(fp)
8112720c:	1880b92e 	bgeu	r3,r2,811274f4 <OSMutexPend+0x494>
        if (mprio > OSTCBCur->OSTCBPrio) {
81127210:	d0a08917 	ldw	r2,-32220(gp)
81127214:	10800c83 	ldbu	r2,50(r2)
81127218:	10c03fcc 	andi	r3,r2,255
8112721c:	e0bff603 	ldbu	r2,-40(fp)
81127220:	1880b42e 	bgeu	r3,r2,811274f4 <OSMutexPend+0x494>
            y = ptcb->OSTCBY;
81127224:	e0bff717 	ldw	r2,-36(fp)
81127228:	10800d03 	ldbu	r2,52(r2)
8112722c:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
81127230:	e0fff803 	ldbu	r3,-32(fp)
81127234:	d0a08544 	addi	r2,gp,-32235
81127238:	1885883a 	add	r2,r3,r2
8112723c:	10c00003 	ldbu	r3,0(r2)
81127240:	e0bff717 	ldw	r2,-36(fp)
81127244:	10800d43 	ldbu	r2,53(r2)
81127248:	1884703a 	and	r2,r3,r2
8112724c:	10803fcc 	andi	r2,r2,255
81127250:	10001e26 	beq	r2,zero,811272cc <OSMutexPend+0x26c>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
81127254:	e0fff803 	ldbu	r3,-32(fp)
81127258:	e13ff803 	ldbu	r4,-32(fp)
8112725c:	d0a08544 	addi	r2,gp,-32235
81127260:	2085883a 	add	r2,r4,r2
81127264:	10800003 	ldbu	r2,0(r2)
81127268:	1009883a 	mov	r4,r2
8112726c:	e0bff717 	ldw	r2,-36(fp)
81127270:	10800d43 	ldbu	r2,53(r2)
81127274:	0084303a 	nor	r2,zero,r2
81127278:	2084703a 	and	r2,r4,r2
8112727c:	1009883a 	mov	r4,r2
81127280:	d0a08544 	addi	r2,gp,-32235
81127284:	1885883a 	add	r2,r3,r2
81127288:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112728c:	e0fff803 	ldbu	r3,-32(fp)
81127290:	d0a08544 	addi	r2,gp,-32235
81127294:	1885883a 	add	r2,r3,r2
81127298:	10800003 	ldbu	r2,0(r2)
8112729c:	10803fcc 	andi	r2,r2,255
811272a0:	1000071e 	bne	r2,zero,811272c0 <OSMutexPend+0x260>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
811272a4:	e0bff717 	ldw	r2,-36(fp)
811272a8:	10800d83 	ldbu	r2,54(r2)
811272ac:	0084303a 	nor	r2,zero,r2
811272b0:	1007883a 	mov	r3,r2
811272b4:	d0a08503 	ldbu	r2,-32236(gp)
811272b8:	1884703a 	and	r2,r3,r2
811272bc:	d0a08505 	stb	r2,-32236(gp)
                }
                rdy = OS_TRUE;
811272c0:	00800044 	movi	r2,1
811272c4:	e0bff005 	stb	r2,-64(fp)
811272c8:	00002a06 	br	81127374 <OSMutexPend+0x314>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
811272cc:	e0bff717 	ldw	r2,-36(fp)
811272d0:	10800717 	ldw	r2,28(r2)
811272d4:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
811272d8:	e0bff917 	ldw	r2,-28(fp)
811272dc:	10002426 	beq	r2,zero,81127370 <OSMutexPend+0x310>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
811272e0:	e0bff717 	ldw	r2,-36(fp)
811272e4:	10800d03 	ldbu	r2,52(r2)
811272e8:	10803fcc 	andi	r2,r2,255
811272ec:	e0fff717 	ldw	r3,-36(fp)
811272f0:	18c00d03 	ldbu	r3,52(r3)
811272f4:	18c03fcc 	andi	r3,r3,255
811272f8:	e13ff917 	ldw	r4,-28(fp)
811272fc:	20c7883a 	add	r3,r4,r3
81127300:	18c002c4 	addi	r3,r3,11
81127304:	18c00003 	ldbu	r3,0(r3)
81127308:	1809883a 	mov	r4,r3
8112730c:	e0fff717 	ldw	r3,-36(fp)
81127310:	18c00d43 	ldbu	r3,53(r3)
81127314:	00c6303a 	nor	r3,zero,r3
81127318:	20c6703a 	and	r3,r4,r3
8112731c:	1809883a 	mov	r4,r3
81127320:	e0fff917 	ldw	r3,-28(fp)
81127324:	1887883a 	add	r3,r3,r2
81127328:	18c002c4 	addi	r3,r3,11
8112732c:	19000005 	stb	r4,0(r3)
81127330:	e0fff917 	ldw	r3,-28(fp)
81127334:	1885883a 	add	r2,r3,r2
81127338:	108002c4 	addi	r2,r2,11
8112733c:	10800003 	ldbu	r2,0(r2)
81127340:	10803fcc 	andi	r2,r2,255
81127344:	10000a1e 	bne	r2,zero,81127370 <OSMutexPend+0x310>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
81127348:	e0bff917 	ldw	r2,-28(fp)
8112734c:	10800283 	ldbu	r2,10(r2)
81127350:	1007883a 	mov	r3,r2
81127354:	e0bff717 	ldw	r2,-36(fp)
81127358:	10800d83 	ldbu	r2,54(r2)
8112735c:	0084303a 	nor	r2,zero,r2
81127360:	1884703a 	and	r2,r3,r2
81127364:	1007883a 	mov	r3,r2
81127368:	e0bff917 	ldw	r2,-28(fp)
8112736c:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
81127370:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
81127374:	e0bff717 	ldw	r2,-36(fp)
81127378:	e0fff303 	ldbu	r3,-52(fp)
8112737c:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
81127380:	e0bff717 	ldw	r2,-36(fp)
81127384:	10800c83 	ldbu	r2,50(r2)
81127388:	10803fcc 	andi	r2,r2,255
8112738c:	1004d0fa 	srli	r2,r2,3
81127390:	1007883a 	mov	r3,r2
81127394:	e0bff717 	ldw	r2,-36(fp)
81127398:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112739c:	e0bff717 	ldw	r2,-36(fp)
811273a0:	10800c83 	ldbu	r2,50(r2)
811273a4:	108001cc 	andi	r2,r2,7
811273a8:	1007883a 	mov	r3,r2
811273ac:	e0bff717 	ldw	r2,-36(fp)
811273b0:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
811273b4:	e0bff717 	ldw	r2,-36(fp)
811273b8:	10800d03 	ldbu	r2,52(r2)
811273bc:	10803fcc 	andi	r2,r2,255
811273c0:	00c00044 	movi	r3,1
811273c4:	1884983a 	sll	r2,r3,r2
811273c8:	1007883a 	mov	r3,r2
811273cc:	e0bff717 	ldw	r2,-36(fp)
811273d0:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
811273d4:	e0bff717 	ldw	r2,-36(fp)
811273d8:	10800cc3 	ldbu	r2,51(r2)
811273dc:	10803fcc 	andi	r2,r2,255
811273e0:	00c00044 	movi	r3,1
811273e4:	1884983a 	sll	r2,r3,r2
811273e8:	1007883a 	mov	r3,r2
811273ec:	e0bff717 	ldw	r2,-36(fp)
811273f0:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
811273f4:	e0bff003 	ldbu	r2,-64(fp)
811273f8:	10800058 	cmpnei	r2,r2,1
811273fc:	1000161e 	bne	r2,zero,81127458 <OSMutexPend+0x3f8>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
81127400:	e0bff717 	ldw	r2,-36(fp)
81127404:	10c00d83 	ldbu	r3,54(r2)
81127408:	d0a08503 	ldbu	r2,-32236(gp)
8112740c:	1884b03a 	or	r2,r3,r2
81127410:	d0a08505 	stb	r2,-32236(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81127414:	e0bff717 	ldw	r2,-36(fp)
81127418:	10800d03 	ldbu	r2,52(r2)
8112741c:	10c03fcc 	andi	r3,r2,255
81127420:	e0bff717 	ldw	r2,-36(fp)
81127424:	10800d03 	ldbu	r2,52(r2)
81127428:	11003fcc 	andi	r4,r2,255
8112742c:	d0a08544 	addi	r2,gp,-32235
81127430:	2085883a 	add	r2,r4,r2
81127434:	11000003 	ldbu	r4,0(r2)
81127438:	e0bff717 	ldw	r2,-36(fp)
8112743c:	10800d43 	ldbu	r2,53(r2)
81127440:	2084b03a 	or	r2,r4,r2
81127444:	1009883a 	mov	r4,r2
81127448:	d0a08544 	addi	r2,gp,-32235
8112744c:	1885883a 	add	r2,r3,r2
81127450:	11000005 	stb	r4,0(r2)
81127454:	00001f06 	br	811274d4 <OSMutexPend+0x474>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
81127458:	e0bff717 	ldw	r2,-36(fp)
8112745c:	10800717 	ldw	r2,28(r2)
81127460:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
81127464:	e0bff917 	ldw	r2,-28(fp)
81127468:	10001a26 	beq	r2,zero,811274d4 <OSMutexPend+0x474>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112746c:	e0bff917 	ldw	r2,-28(fp)
81127470:	10c00283 	ldbu	r3,10(r2)
81127474:	e0bff717 	ldw	r2,-36(fp)
81127478:	10800d83 	ldbu	r2,54(r2)
8112747c:	1884b03a 	or	r2,r3,r2
81127480:	1007883a 	mov	r3,r2
81127484:	e0bff917 	ldw	r2,-28(fp)
81127488:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112748c:	e0bff717 	ldw	r2,-36(fp)
81127490:	10800d03 	ldbu	r2,52(r2)
81127494:	10803fcc 	andi	r2,r2,255
81127498:	e0fff717 	ldw	r3,-36(fp)
8112749c:	18c00d03 	ldbu	r3,52(r3)
811274a0:	18c03fcc 	andi	r3,r3,255
811274a4:	e13ff917 	ldw	r4,-28(fp)
811274a8:	20c7883a 	add	r3,r4,r3
811274ac:	18c002c4 	addi	r3,r3,11
811274b0:	19000003 	ldbu	r4,0(r3)
811274b4:	e0fff717 	ldw	r3,-36(fp)
811274b8:	18c00d43 	ldbu	r3,53(r3)
811274bc:	20c6b03a 	or	r3,r4,r3
811274c0:	1809883a 	mov	r4,r3
811274c4:	e0fff917 	ldw	r3,-28(fp)
811274c8:	1885883a 	add	r2,r3,r2
811274cc:	108002c4 	addi	r2,r2,11
811274d0:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
811274d4:	e0fff303 	ldbu	r3,-52(fp)
811274d8:	00a045b4 	movhi	r2,33046
811274dc:	10b75704 	addi	r2,r2,-8868
811274e0:	18c7883a 	add	r3,r3,r3
811274e4:	18c7883a 	add	r3,r3,r3
811274e8:	10c5883a 	add	r2,r2,r3
811274ec:	e0fff717 	ldw	r3,-36(fp)
811274f0:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
811274f4:	d0a08917 	ldw	r2,-32220(gp)
811274f8:	d0e08917 	ldw	r3,-32220(gp)
811274fc:	18c00c03 	ldbu	r3,48(r3)
81127500:	18c00414 	ori	r3,r3,16
81127504:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81127508:	d0a08917 	ldw	r2,-32220(gp)
8112750c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
81127510:	d0a08917 	ldw	r2,-32220(gp)
81127514:	e0fffe0b 	ldhu	r3,-8(fp)
81127518:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112751c:	e13ffd17 	ldw	r4,-12(fp)
81127520:	1123a680 	call	81123a68 <OS_EventTaskWait>
81127524:	e0bff117 	ldw	r2,-60(fp)
81127528:	e0bffb15 	stw	r2,-20(fp)
8112752c:	e0bffb17 	ldw	r2,-20(fp)
81127530:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81127534:	112431c0 	call	8112431c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127538:	0005303a 	rdctl	r2,status
8112753c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127540:	e0fff517 	ldw	r3,-44(fp)
81127544:	00bfff84 	movi	r2,-2
81127548:	1884703a 	and	r2,r3,r2
8112754c:	1001703a 	wrctl	status,r2
  
  return context;
81127550:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
81127554:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81127558:	d0a08917 	ldw	r2,-32220(gp)
8112755c:	10800c43 	ldbu	r2,49(r2)
81127560:	10803fcc 	andi	r2,r2,255
81127564:	10000326 	beq	r2,zero,81127574 <OSMutexPend+0x514>
81127568:	108000a0 	cmpeqi	r2,r2,2
8112756c:	1000041e 	bne	r2,zero,81127580 <OSMutexPend+0x520>
81127570:	00000706 	br	81127590 <OSMutexPend+0x530>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81127574:	e0bfff17 	ldw	r2,-4(fp)
81127578:	10000005 	stb	zero,0(r2)
             break;
8112757c:	00000c06 	br	811275b0 <OSMutexPend+0x550>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
81127580:	e0bfff17 	ldw	r2,-4(fp)
81127584:	00c00384 	movi	r3,14
81127588:	10c00005 	stb	r3,0(r2)
             break;
8112758c:	00000806 	br	811275b0 <OSMutexPend+0x550>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
81127590:	d0a08917 	ldw	r2,-32220(gp)
81127594:	e17ffd17 	ldw	r5,-12(fp)
81127598:	1009883a 	mov	r4,r2
8112759c:	1123cc80 	call	81123cc8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
811275a0:	e0bfff17 	ldw	r2,-4(fp)
811275a4:	00c00284 	movi	r3,10
811275a8:	10c00005 	stb	r3,0(r2)
             break;
811275ac:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
811275b0:	d0a08917 	ldw	r2,-32220(gp)
811275b4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
811275b8:	d0a08917 	ldw	r2,-32220(gp)
811275bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
811275c0:	d0a08917 	ldw	r2,-32220(gp)
811275c4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
811275c8:	d0a08917 	ldw	r2,-32220(gp)
811275cc:	10000815 	stw	zero,32(r2)
811275d0:	e0bff117 	ldw	r2,-60(fp)
811275d4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811275d8:	e0bffa17 	ldw	r2,-24(fp)
811275dc:	1001703a 	wrctl	status,r2
811275e0:	00000106 	br	811275e8 <OSMutexPend+0x588>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
811275e4:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
811275e8:	e037883a 	mov	sp,fp
811275ec:	dfc00117 	ldw	ra,4(sp)
811275f0:	df000017 	ldw	fp,0(sp)
811275f4:	dec00204 	addi	sp,sp,8
811275f8:	f800283a 	ret

811275fc <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
811275fc:	defff604 	addi	sp,sp,-40
81127600:	dfc00915 	stw	ra,36(sp)
81127604:	df000815 	stw	fp,32(sp)
81127608:	df000804 	addi	fp,sp,32
8112760c:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81127610:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81127614:	d0a08803 	ldbu	r2,-32224(gp)
81127618:	10803fcc 	andi	r2,r2,255
8112761c:	10000226 	beq	r2,zero,81127628 <OSMutexPost+0x2c>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
81127620:	00800144 	movi	r2,5
81127624:	00007606 	br	81127800 <OSMutexPost+0x204>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81127628:	e0bfff17 	ldw	r2,-4(fp)
8112762c:	1000021e 	bne	r2,zero,81127638 <OSMutexPost+0x3c>
        return (OS_ERR_PEVENT_NULL);
81127630:	00800104 	movi	r2,4
81127634:	00007206 	br	81127800 <OSMutexPost+0x204>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
81127638:	e0bfff17 	ldw	r2,-4(fp)
8112763c:	10800003 	ldbu	r2,0(r2)
81127640:	10803fcc 	andi	r2,r2,255
81127644:	10800120 	cmpeqi	r2,r2,4
81127648:	1000021e 	bne	r2,zero,81127654 <OSMutexPost+0x58>
        return (OS_ERR_EVENT_TYPE);
8112764c:	00800044 	movi	r2,1
81127650:	00006b06 	br	81127800 <OSMutexPost+0x204>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127654:	0005303a 	rdctl	r2,status
81127658:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112765c:	e0fffe17 	ldw	r3,-8(fp)
81127660:	00bfff84 	movi	r2,-2
81127664:	1884703a 	and	r2,r3,r2
81127668:	1001703a 	wrctl	status,r2
  
  return context;
8112766c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81127670:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
81127674:	e0bfff17 	ldw	r2,-4(fp)
81127678:	1080020b 	ldhu	r2,8(r2)
8112767c:	10bfffcc 	andi	r2,r2,65535
81127680:	1004d23a 	srli	r2,r2,8
81127684:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
81127688:	e0bfff17 	ldw	r2,-4(fp)
8112768c:	1080020b 	ldhu	r2,8(r2)
81127690:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
81127694:	e0bfff17 	ldw	r2,-4(fp)
81127698:	10c00117 	ldw	r3,4(r2)
8112769c:	d0a08917 	ldw	r2,-32220(gp)
811276a0:	18800626 	beq	r3,r2,811276bc <OSMutexPost+0xc0>
811276a4:	e0bff817 	ldw	r2,-32(fp)
811276a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811276ac:	e0bff917 	ldw	r2,-28(fp)
811276b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
811276b4:	00801904 	movi	r2,100
811276b8:	00005106 	br	81127800 <OSMutexPost+0x204>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
811276bc:	d0a08917 	ldw	r2,-32220(gp)
811276c0:	10800c83 	ldbu	r2,50(r2)
811276c4:	10c03fcc 	andi	r3,r2,255
811276c8:	e0bffa03 	ldbu	r2,-24(fp)
811276cc:	1880051e 	bne	r3,r2,811276e4 <OSMutexPost+0xe8>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
811276d0:	d0a08917 	ldw	r2,-32220(gp)
811276d4:	e0fffa43 	ldbu	r3,-23(fp)
811276d8:	180b883a 	mov	r5,r3
811276dc:	1009883a 	mov	r4,r2
811276e0:	11279800 	call	81127980 <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
811276e4:	e0fffa03 	ldbu	r3,-24(fp)
811276e8:	00a045b4 	movhi	r2,33046
811276ec:	10b75704 	addi	r2,r2,-8868
811276f0:	18c7883a 	add	r3,r3,r3
811276f4:	18c7883a 	add	r3,r3,r3
811276f8:	10c5883a 	add	r2,r2,r3
811276fc:	00c00044 	movi	r3,1
81127700:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
81127704:	e0bfff17 	ldw	r2,-4(fp)
81127708:	10800283 	ldbu	r2,10(r2)
8112770c:	10803fcc 	andi	r2,r2,255
81127710:	10002e26 	beq	r2,zero,811277cc <OSMutexPost+0x1d0>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
81127714:	000f883a 	mov	r7,zero
81127718:	01800404 	movi	r6,16
8112771c:	000b883a 	mov	r5,zero
81127720:	e13fff17 	ldw	r4,-4(fp)
81127724:	11238d00 	call	811238d0 <OS_EventTaskRdy>
81127728:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
8112772c:	e0bfff17 	ldw	r2,-4(fp)
81127730:	10c0020b 	ldhu	r3,8(r2)
81127734:	00bfc004 	movi	r2,-256
81127738:	1884703a 	and	r2,r3,r2
8112773c:	1007883a 	mov	r3,r2
81127740:	e0bfff17 	ldw	r2,-4(fp)
81127744:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
81127748:	e0bfff17 	ldw	r2,-4(fp)
8112774c:	10c0020b 	ldhu	r3,8(r2)
81127750:	e0bffa43 	ldbu	r2,-23(fp)
81127754:	1884b03a 	or	r2,r3,r2
81127758:	1007883a 	mov	r3,r2
8112775c:	e0bfff17 	ldw	r2,-4(fp)
81127760:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
81127764:	e0fffa43 	ldbu	r3,-23(fp)
81127768:	00a045b4 	movhi	r2,33046
8112776c:	10b75704 	addi	r2,r2,-8868
81127770:	18c7883a 	add	r3,r3,r3
81127774:	18c7883a 	add	r3,r3,r3
81127778:	10c5883a 	add	r2,r2,r3
8112777c:	10c00017 	ldw	r3,0(r2)
81127780:	e0bfff17 	ldw	r2,-4(fp)
81127784:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
81127788:	e0bffa43 	ldbu	r2,-23(fp)
8112778c:	e0fffa03 	ldbu	r3,-24(fp)
81127790:	18800736 	bltu	r3,r2,811277b0 <OSMutexPost+0x1b4>
81127794:	e0bff817 	ldw	r2,-32(fp)
81127798:	e0bffb15 	stw	r2,-20(fp)
8112779c:	e0bffb17 	ldw	r2,-20(fp)
811277a0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
811277a4:	112431c0 	call	8112431c <OS_Sched>
            return (OS_ERR_PIP_LOWER);
811277a8:	00801e04 	movi	r2,120
811277ac:	00001406 	br	81127800 <OSMutexPost+0x204>
811277b0:	e0bff817 	ldw	r2,-32(fp)
811277b4:	e0bffc15 	stw	r2,-16(fp)
811277b8:	e0bffc17 	ldw	r2,-16(fp)
811277bc:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
811277c0:	112431c0 	call	8112431c <OS_Sched>
            return (OS_ERR_NONE);
811277c4:	0005883a 	mov	r2,zero
811277c8:	00000d06 	br	81127800 <OSMutexPost+0x204>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
811277cc:	e0bfff17 	ldw	r2,-4(fp)
811277d0:	1080020b 	ldhu	r2,8(r2)
811277d4:	10803fd4 	ori	r2,r2,255
811277d8:	1007883a 	mov	r3,r2
811277dc:	e0bfff17 	ldw	r2,-4(fp)
811277e0:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
811277e4:	e0bfff17 	ldw	r2,-4(fp)
811277e8:	10000115 	stw	zero,4(r2)
811277ec:	e0bff817 	ldw	r2,-32(fp)
811277f0:	e0bffd15 	stw	r2,-12(fp)
811277f4:	e0bffd17 	ldw	r2,-12(fp)
811277f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811277fc:	0005883a 	mov	r2,zero
}
81127800:	e037883a 	mov	sp,fp
81127804:	dfc00117 	ldw	ra,4(sp)
81127808:	df000017 	ldw	fp,0(sp)
8112780c:	dec00204 	addi	sp,sp,8
81127810:	f800283a 	ret

81127814 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
81127814:	defff704 	addi	sp,sp,-36
81127818:	df000815 	stw	fp,32(sp)
8112781c:	df000804 	addi	fp,sp,32
81127820:	e13ffe15 	stw	r4,-8(fp)
81127824:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127828:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112782c:	d0a08803 	ldbu	r2,-32224(gp)
81127830:	10803fcc 	andi	r2,r2,255
81127834:	10000226 	beq	r2,zero,81127840 <OSMutexQuery+0x2c>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
81127838:	00800184 	movi	r2,6
8112783c:	00004c06 	br	81127970 <OSMutexQuery+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81127840:	e0bffe17 	ldw	r2,-8(fp)
81127844:	1000021e 	bne	r2,zero,81127850 <OSMutexQuery+0x3c>
        return (OS_ERR_PEVENT_NULL);
81127848:	00800104 	movi	r2,4
8112784c:	00004806 	br	81127970 <OSMutexQuery+0x15c>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
81127850:	e0bfff17 	ldw	r2,-4(fp)
81127854:	1000021e 	bne	r2,zero,81127860 <OSMutexQuery+0x4c>
        return (OS_ERR_PDATA_NULL);
81127858:	00800244 	movi	r2,9
8112785c:	00004406 	br	81127970 <OSMutexQuery+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
81127860:	e0bffe17 	ldw	r2,-8(fp)
81127864:	10800003 	ldbu	r2,0(r2)
81127868:	10803fcc 	andi	r2,r2,255
8112786c:	10800120 	cmpeqi	r2,r2,4
81127870:	1000021e 	bne	r2,zero,8112787c <OSMutexQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
81127874:	00800044 	movi	r2,1
81127878:	00003d06 	br	81127970 <OSMutexQuery+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112787c:	0005303a 	rdctl	r2,status
81127880:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127884:	e0fffd17 	ldw	r3,-12(fp)
81127888:	00bfff84 	movi	r2,-2
8112788c:	1884703a 	and	r2,r3,r2
81127890:	1001703a 	wrctl	status,r2
  
  return context;
81127894:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81127898:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112789c:	e0bffe17 	ldw	r2,-8(fp)
811278a0:	1080020b 	ldhu	r2,8(r2)
811278a4:	10bfffcc 	andi	r2,r2,65535
811278a8:	1004d23a 	srli	r2,r2,8
811278ac:	1007883a 	mov	r3,r2
811278b0:	e0bfff17 	ldw	r2,-4(fp)
811278b4:	10c001c5 	stb	r3,7(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
811278b8:	e0bffe17 	ldw	r2,-8(fp)
811278bc:	1080020b 	ldhu	r2,8(r2)
811278c0:	1007883a 	mov	r3,r2
811278c4:	e0bfff17 	ldw	r2,-4(fp)
811278c8:	10c00185 	stb	r3,6(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
811278cc:	e0bfff17 	ldw	r2,-4(fp)
811278d0:	10800183 	ldbu	r2,6(r2)
811278d4:	10803fcc 	andi	r2,r2,255
811278d8:	10803fd8 	cmpnei	r2,r2,255
811278dc:	1000041e 	bne	r2,zero,811278f0 <OSMutexQuery+0xdc>
        p_mutex_data->OSValue = OS_TRUE;
811278e0:	e0bfff17 	ldw	r2,-4(fp)
811278e4:	00c00044 	movi	r3,1
811278e8:	10c00145 	stb	r3,5(r2)
811278ec:	00000206 	br	811278f8 <OSMutexQuery+0xe4>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
811278f0:	e0bfff17 	ldw	r2,-4(fp)
811278f4:	10000145 	stb	zero,5(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
811278f8:	e0bffe17 	ldw	r2,-8(fp)
811278fc:	10c00283 	ldbu	r3,10(r2)
81127900:	e0bfff17 	ldw	r2,-4(fp)
81127904:	10c00105 	stb	r3,4(r2)
    psrc                      = &pevent->OSEventTbl[0];
81127908:	e0bffe17 	ldw	r2,-8(fp)
8112790c:	108002c4 	addi	r2,r2,11
81127910:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
81127914:	e0bfff17 	ldw	r2,-4(fp)
81127918:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112791c:	e03ff805 	stb	zero,-32(fp)
81127920:	00000b06 	br	81127950 <OSMutexQuery+0x13c>
        *pdest++ = *psrc++;
81127924:	e0bffa17 	ldw	r2,-24(fp)
81127928:	10c00044 	addi	r3,r2,1
8112792c:	e0fffa15 	stw	r3,-24(fp)
81127930:	e0fff917 	ldw	r3,-28(fp)
81127934:	19000044 	addi	r4,r3,1
81127938:	e13ff915 	stw	r4,-28(fp)
8112793c:	18c00003 	ldbu	r3,0(r3)
81127940:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81127944:	e0bff803 	ldbu	r2,-32(fp)
81127948:	10800044 	addi	r2,r2,1
8112794c:	e0bff805 	stb	r2,-32(fp)
81127950:	e0bff803 	ldbu	r2,-32(fp)
81127954:	10800130 	cmpltui	r2,r2,4
81127958:	103ff21e 	bne	r2,zero,81127924 <__reset+0xfb107924>
8112795c:	e0bffb17 	ldw	r2,-20(fp)
81127960:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127964:	e0bffc17 	ldw	r2,-16(fp)
81127968:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112796c:	0005883a 	mov	r2,zero
}
81127970:	e037883a 	mov	sp,fp
81127974:	df000017 	ldw	fp,0(sp)
81127978:	dec00104 	addi	sp,sp,4
8112797c:	f800283a 	ret

81127980 <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
81127980:	defffc04 	addi	sp,sp,-16
81127984:	df000315 	stw	fp,12(sp)
81127988:	df000304 	addi	fp,sp,12
8112798c:	e13ffe15 	stw	r4,-8(fp)
81127990:	2805883a 	mov	r2,r5
81127994:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
81127998:	e0bffe17 	ldw	r2,-8(fp)
8112799c:	10800d03 	ldbu	r2,52(r2)
811279a0:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
811279a4:	e0fffd03 	ldbu	r3,-12(fp)
811279a8:	e13ffd03 	ldbu	r4,-12(fp)
811279ac:	d0a08544 	addi	r2,gp,-32235
811279b0:	2085883a 	add	r2,r4,r2
811279b4:	10800003 	ldbu	r2,0(r2)
811279b8:	1009883a 	mov	r4,r2
811279bc:	e0bffe17 	ldw	r2,-8(fp)
811279c0:	10800d43 	ldbu	r2,53(r2)
811279c4:	0084303a 	nor	r2,zero,r2
811279c8:	2084703a 	and	r2,r4,r2
811279cc:	1009883a 	mov	r4,r2
811279d0:	d0a08544 	addi	r2,gp,-32235
811279d4:	1885883a 	add	r2,r3,r2
811279d8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
811279dc:	e0fffd03 	ldbu	r3,-12(fp)
811279e0:	d0a08544 	addi	r2,gp,-32235
811279e4:	1885883a 	add	r2,r3,r2
811279e8:	10800003 	ldbu	r2,0(r2)
811279ec:	10803fcc 	andi	r2,r2,255
811279f0:	1000071e 	bne	r2,zero,81127a10 <OSMutex_RdyAtPrio+0x90>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
811279f4:	e0bffe17 	ldw	r2,-8(fp)
811279f8:	10800d83 	ldbu	r2,54(r2)
811279fc:	0084303a 	nor	r2,zero,r2
81127a00:	1007883a 	mov	r3,r2
81127a04:	d0a08503 	ldbu	r2,-32236(gp)
81127a08:	1884703a 	and	r2,r3,r2
81127a0c:	d0a08505 	stb	r2,-32236(gp)
    }
    ptcb->OSTCBPrio         = prio;
81127a10:	e0bffe17 	ldw	r2,-8(fp)
81127a14:	e0ffff03 	ldbu	r3,-4(fp)
81127a18:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
81127a1c:	e0bfff03 	ldbu	r2,-4(fp)
81127a20:	1004d0fa 	srli	r2,r2,3
81127a24:	108001cc 	andi	r2,r2,7
81127a28:	1007883a 	mov	r3,r2
81127a2c:	e0bffe17 	ldw	r2,-8(fp)
81127a30:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
81127a34:	e0bfff03 	ldbu	r2,-4(fp)
81127a38:	108001cc 	andi	r2,r2,7
81127a3c:	1007883a 	mov	r3,r2
81127a40:	e0bffe17 	ldw	r2,-8(fp)
81127a44:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
81127a48:	e0bffe17 	ldw	r2,-8(fp)
81127a4c:	10800d03 	ldbu	r2,52(r2)
81127a50:	10803fcc 	andi	r2,r2,255
81127a54:	00c00044 	movi	r3,1
81127a58:	1884983a 	sll	r2,r3,r2
81127a5c:	1007883a 	mov	r3,r2
81127a60:	e0bffe17 	ldw	r2,-8(fp)
81127a64:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
81127a68:	e0bffe17 	ldw	r2,-8(fp)
81127a6c:	10800cc3 	ldbu	r2,51(r2)
81127a70:	10803fcc 	andi	r2,r2,255
81127a74:	00c00044 	movi	r3,1
81127a78:	1884983a 	sll	r2,r3,r2
81127a7c:	1007883a 	mov	r3,r2
81127a80:	e0bffe17 	ldw	r2,-8(fp)
81127a84:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
81127a88:	e0bffe17 	ldw	r2,-8(fp)
81127a8c:	10c00d83 	ldbu	r3,54(r2)
81127a90:	d0a08503 	ldbu	r2,-32236(gp)
81127a94:	1884b03a 	or	r2,r3,r2
81127a98:	d0a08505 	stb	r2,-32236(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81127a9c:	e0bffe17 	ldw	r2,-8(fp)
81127aa0:	10800d03 	ldbu	r2,52(r2)
81127aa4:	10c03fcc 	andi	r3,r2,255
81127aa8:	e0bffe17 	ldw	r2,-8(fp)
81127aac:	10800d03 	ldbu	r2,52(r2)
81127ab0:	11003fcc 	andi	r4,r2,255
81127ab4:	d0a08544 	addi	r2,gp,-32235
81127ab8:	2085883a 	add	r2,r4,r2
81127abc:	11000003 	ldbu	r4,0(r2)
81127ac0:	e0bffe17 	ldw	r2,-8(fp)
81127ac4:	10800d43 	ldbu	r2,53(r2)
81127ac8:	2084b03a 	or	r2,r4,r2
81127acc:	1009883a 	mov	r4,r2
81127ad0:	d0a08544 	addi	r2,gp,-32235
81127ad4:	1885883a 	add	r2,r3,r2
81127ad8:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
81127adc:	e0ffff03 	ldbu	r3,-4(fp)
81127ae0:	00a045b4 	movhi	r2,33046
81127ae4:	10b75704 	addi	r2,r2,-8868
81127ae8:	18c7883a 	add	r3,r3,r3
81127aec:	18c7883a 	add	r3,r3,r3
81127af0:	10c5883a 	add	r2,r2,r3
81127af4:	e0fffe17 	ldw	r3,-8(fp)
81127af8:	10c00015 	stw	r3,0(r2)
}
81127afc:	0001883a 	nop
81127b00:	e037883a 	mov	sp,fp
81127b04:	df000017 	ldw	fp,0(sp)
81127b08:	dec00104 	addi	sp,sp,4
81127b0c:	f800283a 	ret

81127b10 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
81127b10:	defff804 	addi	sp,sp,-32
81127b14:	df000715 	stw	fp,28(sp)
81127b18:	df000704 	addi	fp,sp,28
81127b1c:	e13ffe15 	stw	r4,-8(fp)
81127b20:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127b24:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81127b28:	e0bfff17 	ldw	r2,-4(fp)
81127b2c:	1000021e 	bne	r2,zero,81127b38 <OSQAccept+0x28>
        return ((void *)0);
81127b30:	0005883a 	mov	r2,zero
81127b34:	00004206 	br	81127c40 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
81127b38:	e0bffe17 	ldw	r2,-8(fp)
81127b3c:	1000051e 	bne	r2,zero,81127b54 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
81127b40:	e0bfff17 	ldw	r2,-4(fp)
81127b44:	00c00104 	movi	r3,4
81127b48:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81127b4c:	0005883a 	mov	r2,zero
81127b50:	00003b06 	br	81127c40 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81127b54:	e0bffe17 	ldw	r2,-8(fp)
81127b58:	10800003 	ldbu	r2,0(r2)
81127b5c:	10803fcc 	andi	r2,r2,255
81127b60:	108000a0 	cmpeqi	r2,r2,2
81127b64:	1000051e 	bne	r2,zero,81127b7c <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
81127b68:	e0bfff17 	ldw	r2,-4(fp)
81127b6c:	00c00044 	movi	r3,1
81127b70:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
81127b74:	0005883a 	mov	r2,zero
81127b78:	00003106 	br	81127c40 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127b7c:	0005303a 	rdctl	r2,status
81127b80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127b84:	e0fffd17 	ldw	r3,-12(fp)
81127b88:	00bfff84 	movi	r2,-2
81127b8c:	1884703a 	and	r2,r3,r2
81127b90:	1001703a 	wrctl	status,r2
  
  return context;
81127b94:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81127b98:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
81127b9c:	e0bffe17 	ldw	r2,-8(fp)
81127ba0:	10800117 	ldw	r2,4(r2)
81127ba4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
81127ba8:	e0bffc17 	ldw	r2,-16(fp)
81127bac:	1080058b 	ldhu	r2,22(r2)
81127bb0:	10bfffcc 	andi	r2,r2,65535
81127bb4:	10001926 	beq	r2,zero,81127c1c <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
81127bb8:	e0bffc17 	ldw	r2,-16(fp)
81127bbc:	10800417 	ldw	r2,16(r2)
81127bc0:	11000104 	addi	r4,r2,4
81127bc4:	e0fffc17 	ldw	r3,-16(fp)
81127bc8:	19000415 	stw	r4,16(r3)
81127bcc:	10800017 	ldw	r2,0(r2)
81127bd0:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81127bd4:	e0bffc17 	ldw	r2,-16(fp)
81127bd8:	1080058b 	ldhu	r2,22(r2)
81127bdc:	10bfffc4 	addi	r2,r2,-1
81127be0:	1007883a 	mov	r3,r2
81127be4:	e0bffc17 	ldw	r2,-16(fp)
81127be8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
81127bec:	e0bffc17 	ldw	r2,-16(fp)
81127bf0:	10c00417 	ldw	r3,16(r2)
81127bf4:	e0bffc17 	ldw	r2,-16(fp)
81127bf8:	10800217 	ldw	r2,8(r2)
81127bfc:	1880041e 	bne	r3,r2,81127c10 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
81127c00:	e0bffc17 	ldw	r2,-16(fp)
81127c04:	10c00117 	ldw	r3,4(r2)
81127c08:	e0bffc17 	ldw	r2,-16(fp)
81127c0c:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
81127c10:	e0bfff17 	ldw	r2,-4(fp)
81127c14:	10000005 	stb	zero,0(r2)
81127c18:	00000406 	br	81127c2c <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
81127c1c:	e0bfff17 	ldw	r2,-4(fp)
81127c20:	00c007c4 	movi	r3,31
81127c24:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
81127c28:	e03ff915 	stw	zero,-28(fp)
81127c2c:	e0bffa17 	ldw	r2,-24(fp)
81127c30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127c34:	e0bffb17 	ldw	r2,-20(fp)
81127c38:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
81127c3c:	e0bff917 	ldw	r2,-28(fp)
}
81127c40:	e037883a 	mov	sp,fp
81127c44:	df000017 	ldw	fp,0(sp)
81127c48:	dec00104 	addi	sp,sp,4
81127c4c:	f800283a 	ret

81127c50 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
81127c50:	defff404 	addi	sp,sp,-48
81127c54:	dfc00b15 	stw	ra,44(sp)
81127c58:	df000a15 	stw	fp,40(sp)
81127c5c:	df000a04 	addi	fp,sp,40
81127c60:	e13ffe15 	stw	r4,-8(fp)
81127c64:	2805883a 	mov	r2,r5
81127c68:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127c6c:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
81127c70:	d0a08803 	ldbu	r2,-32224(gp)
81127c74:	10803fcc 	andi	r2,r2,255
81127c78:	10000226 	beq	r2,zero,81127c84 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
81127c7c:	0005883a 	mov	r2,zero
81127c80:	00005906 	br	81127de8 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127c84:	0005303a 	rdctl	r2,status
81127c88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127c8c:	e0fffd17 	ldw	r3,-12(fp)
81127c90:	00bfff84 	movi	r2,-2
81127c94:	1884703a 	and	r2,r3,r2
81127c98:	1001703a 	wrctl	status,r2
  
  return context;
81127c9c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81127ca0:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
81127ca4:	d0a08717 	ldw	r2,-32228(gp)
81127ca8:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
81127cac:	d0a08717 	ldw	r2,-32228(gp)
81127cb0:	10000326 	beq	r2,zero,81127cc0 <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
81127cb4:	d0a08717 	ldw	r2,-32228(gp)
81127cb8:	10800117 	ldw	r2,4(r2)
81127cbc:	d0a08715 	stw	r2,-32228(gp)
81127cc0:	e0bff717 	ldw	r2,-36(fp)
81127cc4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127cc8:	e0bff817 	ldw	r2,-32(fp)
81127ccc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
81127cd0:	e0bff617 	ldw	r2,-40(fp)
81127cd4:	10004326 	beq	r2,zero,81127de4 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127cd8:	0005303a 	rdctl	r2,status
81127cdc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127ce0:	e0fff917 	ldw	r3,-28(fp)
81127ce4:	00bfff84 	movi	r2,-2
81127ce8:	1884703a 	and	r2,r3,r2
81127cec:	1001703a 	wrctl	status,r2
  
  return context;
81127cf0:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
81127cf4:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
81127cf8:	d0a08417 	ldw	r2,-32240(gp)
81127cfc:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
81127d00:	e0bffb17 	ldw	r2,-20(fp)
81127d04:	10002d26 	beq	r2,zero,81127dbc <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
81127d08:	d0a08417 	ldw	r2,-32240(gp)
81127d0c:	10800017 	ldw	r2,0(r2)
81127d10:	d0a08415 	stw	r2,-32240(gp)
81127d14:	e0bff717 	ldw	r2,-36(fp)
81127d18:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127d1c:	e0bffa17 	ldw	r2,-24(fp)
81127d20:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
81127d24:	e0bffb17 	ldw	r2,-20(fp)
81127d28:	e0fffe17 	ldw	r3,-8(fp)
81127d2c:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
81127d30:	e0bfff0b 	ldhu	r2,-4(fp)
81127d34:	1085883a 	add	r2,r2,r2
81127d38:	1085883a 	add	r2,r2,r2
81127d3c:	1007883a 	mov	r3,r2
81127d40:	e0bffe17 	ldw	r2,-8(fp)
81127d44:	10c7883a 	add	r3,r2,r3
81127d48:	e0bffb17 	ldw	r2,-20(fp)
81127d4c:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
81127d50:	e0bffb17 	ldw	r2,-20(fp)
81127d54:	e0fffe17 	ldw	r3,-8(fp)
81127d58:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
81127d5c:	e0bffb17 	ldw	r2,-20(fp)
81127d60:	e0fffe17 	ldw	r3,-8(fp)
81127d64:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
81127d68:	e0bffb17 	ldw	r2,-20(fp)
81127d6c:	e0ffff0b 	ldhu	r3,-4(fp)
81127d70:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
81127d74:	e0bffb17 	ldw	r2,-20(fp)
81127d78:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
81127d7c:	e0bff617 	ldw	r2,-40(fp)
81127d80:	00c00084 	movi	r3,2
81127d84:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
81127d88:	e0bff617 	ldw	r2,-40(fp)
81127d8c:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
81127d90:	e0bff617 	ldw	r2,-40(fp)
81127d94:	e0fffb17 	ldw	r3,-20(fp)
81127d98:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
81127d9c:	e0bff617 	ldw	r2,-40(fp)
81127da0:	00c00fc4 	movi	r3,63
81127da4:	10c003c5 	stb	r3,15(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
81127da8:	e0bff617 	ldw	r2,-40(fp)
81127dac:	10000405 	stb	zero,16(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
81127db0:	e13ff617 	ldw	r4,-40(fp)
81127db4:	1123e800 	call	81123e80 <OS_EventWaitListInit>
81127db8:	00000a06 	br	81127de4 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
81127dbc:	d0e08717 	ldw	r3,-32228(gp)
81127dc0:	e0bff617 	ldw	r2,-40(fp)
81127dc4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
81127dc8:	e0bff617 	ldw	r2,-40(fp)
81127dcc:	d0a08715 	stw	r2,-32228(gp)
81127dd0:	e0bff717 	ldw	r2,-36(fp)
81127dd4:	e0bffc15 	stw	r2,-16(fp)
81127dd8:	e0bffc17 	ldw	r2,-16(fp)
81127ddc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
81127de0:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
81127de4:	e0bff617 	ldw	r2,-40(fp)
}
81127de8:	e037883a 	mov	sp,fp
81127dec:	dfc00117 	ldw	ra,4(sp)
81127df0:	df000017 	ldw	fp,0(sp)
81127df4:	dec00204 	addi	sp,sp,8
81127df8:	f800283a 	ret

81127dfc <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81127dfc:	defff204 	addi	sp,sp,-56
81127e00:	dfc00d15 	stw	ra,52(sp)
81127e04:	df000c15 	stw	fp,48(sp)
81127e08:	df000c04 	addi	fp,sp,48
81127e0c:	e13ffd15 	stw	r4,-12(fp)
81127e10:	2805883a 	mov	r2,r5
81127e14:	e1bfff15 	stw	r6,-4(fp)
81127e18:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81127e1c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81127e20:	e0bfff17 	ldw	r2,-4(fp)
81127e24:	1000021e 	bne	r2,zero,81127e30 <OSQDel+0x34>
        return (pevent);
81127e28:	e0bffd17 	ldw	r2,-12(fp)
81127e2c:	00008e06 	br	81128068 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81127e30:	e0bffd17 	ldw	r2,-12(fp)
81127e34:	1000051e 	bne	r2,zero,81127e4c <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81127e38:	e0bfff17 	ldw	r2,-4(fp)
81127e3c:	00c00104 	movi	r3,4
81127e40:	10c00005 	stb	r3,0(r2)
        return (pevent);
81127e44:	e0bffd17 	ldw	r2,-12(fp)
81127e48:	00008706 	br	81128068 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81127e4c:	e0bffd17 	ldw	r2,-12(fp)
81127e50:	10800003 	ldbu	r2,0(r2)
81127e54:	10803fcc 	andi	r2,r2,255
81127e58:	108000a0 	cmpeqi	r2,r2,2
81127e5c:	1000051e 	bne	r2,zero,81127e74 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81127e60:	e0bfff17 	ldw	r2,-4(fp)
81127e64:	00c00044 	movi	r3,1
81127e68:	10c00005 	stb	r3,0(r2)
        return (pevent);
81127e6c:	e0bffd17 	ldw	r2,-12(fp)
81127e70:	00007d06 	br	81128068 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81127e74:	d0a08803 	ldbu	r2,-32224(gp)
81127e78:	10803fcc 	andi	r2,r2,255
81127e7c:	10000526 	beq	r2,zero,81127e94 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81127e80:	e0bfff17 	ldw	r2,-4(fp)
81127e84:	00c003c4 	movi	r3,15
81127e88:	10c00005 	stb	r3,0(r2)
        return (pevent);
81127e8c:	e0bffd17 	ldw	r2,-12(fp)
81127e90:	00007506 	br	81128068 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127e94:	0005303a 	rdctl	r2,status
81127e98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127e9c:	e0fffc17 	ldw	r3,-16(fp)
81127ea0:	00bfff84 	movi	r2,-2
81127ea4:	1884703a 	and	r2,r3,r2
81127ea8:	1001703a 	wrctl	status,r2
  
  return context;
81127eac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81127eb0:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
81127eb4:	e0bffd17 	ldw	r2,-12(fp)
81127eb8:	10800283 	ldbu	r2,10(r2)
81127ebc:	10803fcc 	andi	r2,r2,255
81127ec0:	10000326 	beq	r2,zero,81127ed0 <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81127ec4:	00800044 	movi	r2,1
81127ec8:	e0bff405 	stb	r2,-48(fp)
81127ecc:	00000106 	br	81127ed4 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81127ed0:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
81127ed4:	e0bffe03 	ldbu	r2,-8(fp)
81127ed8:	10000326 	beq	r2,zero,81127ee8 <OSQDel+0xec>
81127edc:	10800060 	cmpeqi	r2,r2,1
81127ee0:	1000301e 	bne	r2,zero,81127fa4 <OSQDel+0x1a8>
81127ee4:	00005506 	br	8112803c <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
81127ee8:	e0bff403 	ldbu	r2,-48(fp)
81127eec:	10001e1e 	bne	r2,zero,81127f68 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81127ef0:	e0bffd17 	ldw	r2,-12(fp)
81127ef4:	00c00fc4 	movi	r3,63
81127ef8:	10c003c5 	stb	r3,15(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81127efc:	e0bffd17 	ldw	r2,-12(fp)
81127f00:	10000405 	stb	zero,16(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
81127f04:	e0bffd17 	ldw	r2,-12(fp)
81127f08:	10800117 	ldw	r2,4(r2)
81127f0c:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
81127f10:	d0e08417 	ldw	r3,-32240(gp)
81127f14:	e0bff817 	ldw	r2,-32(fp)
81127f18:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
81127f1c:	e0bff817 	ldw	r2,-32(fp)
81127f20:	d0a08415 	stw	r2,-32240(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81127f24:	e0bffd17 	ldw	r2,-12(fp)
81127f28:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81127f2c:	d0e08717 	ldw	r3,-32228(gp)
81127f30:	e0bffd17 	ldw	r2,-12(fp)
81127f34:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81127f38:	e0bffd17 	ldw	r2,-12(fp)
81127f3c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81127f40:	e0bffd17 	ldw	r2,-12(fp)
81127f44:	d0a08715 	stw	r2,-32228(gp)
81127f48:	e0bff617 	ldw	r2,-40(fp)
81127f4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127f50:	e0bff717 	ldw	r2,-36(fp)
81127f54:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81127f58:	e0bfff17 	ldw	r2,-4(fp)
81127f5c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
81127f60:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81127f64:	00003f06 	br	81128064 <OSQDel+0x268>
81127f68:	e0bff617 	ldw	r2,-40(fp)
81127f6c:	e0bff915 	stw	r2,-28(fp)
81127f70:	e0bff917 	ldw	r2,-28(fp)
81127f74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81127f78:	e0bfff17 	ldw	r2,-4(fp)
81127f7c:	00c01244 	movi	r3,73
81127f80:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81127f84:	e0bffd17 	ldw	r2,-12(fp)
81127f88:	e0bff515 	stw	r2,-44(fp)
             }
             break;
81127f8c:	00003506 	br	81128064 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
81127f90:	000f883a 	mov	r7,zero
81127f94:	01800104 	movi	r6,4
81127f98:	000b883a 	mov	r5,zero
81127f9c:	e13ffd17 	ldw	r4,-12(fp)
81127fa0:	11238d00 	call	811238d0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
81127fa4:	e0bffd17 	ldw	r2,-12(fp)
81127fa8:	10800283 	ldbu	r2,10(r2)
81127fac:	10803fcc 	andi	r2,r2,255
81127fb0:	103ff71e 	bne	r2,zero,81127f90 <__reset+0xfb107f90>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81127fb4:	e0bffd17 	ldw	r2,-12(fp)
81127fb8:	00c00fc4 	movi	r3,63
81127fbc:	10c003c5 	stb	r3,15(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81127fc0:	e0bffd17 	ldw	r2,-12(fp)
81127fc4:	10000405 	stb	zero,16(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
81127fc8:	e0bffd17 	ldw	r2,-12(fp)
81127fcc:	10800117 	ldw	r2,4(r2)
81127fd0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
81127fd4:	d0e08417 	ldw	r3,-32240(gp)
81127fd8:	e0bff817 	ldw	r2,-32(fp)
81127fdc:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
81127fe0:	e0bff817 	ldw	r2,-32(fp)
81127fe4:	d0a08415 	stw	r2,-32240(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81127fe8:	e0bffd17 	ldw	r2,-12(fp)
81127fec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81127ff0:	d0e08717 	ldw	r3,-32228(gp)
81127ff4:	e0bffd17 	ldw	r2,-12(fp)
81127ff8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81127ffc:	e0bffd17 	ldw	r2,-12(fp)
81128000:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81128004:	e0bffd17 	ldw	r2,-12(fp)
81128008:	d0a08715 	stw	r2,-32228(gp)
8112800c:	e0bff617 	ldw	r2,-40(fp)
81128010:	e0bffa15 	stw	r2,-24(fp)
81128014:	e0bffa17 	ldw	r2,-24(fp)
81128018:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112801c:	e0bff403 	ldbu	r2,-48(fp)
81128020:	10800058 	cmpnei	r2,r2,1
81128024:	1000011e 	bne	r2,zero,8112802c <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81128028:	112431c0 	call	8112431c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112802c:	e0bfff17 	ldw	r2,-4(fp)
81128030:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
81128034:	e03ff515 	stw	zero,-44(fp)
             break;
81128038:	00000a06 	br	81128064 <OSQDel+0x268>
8112803c:	e0bff617 	ldw	r2,-40(fp)
81128040:	e0bffb15 	stw	r2,-20(fp)
81128044:	e0bffb17 	ldw	r2,-20(fp)
81128048:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112804c:	e0bfff17 	ldw	r2,-4(fp)
81128050:	00c001c4 	movi	r3,7
81128054:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81128058:	e0bffd17 	ldw	r2,-12(fp)
8112805c:	e0bff515 	stw	r2,-44(fp)
             break;
81128060:	0001883a 	nop
    }
    return (pevent_return);
81128064:	e0bff517 	ldw	r2,-44(fp)
}
81128068:	e037883a 	mov	sp,fp
8112806c:	dfc00117 	ldw	ra,4(sp)
81128070:	df000017 	ldw	fp,0(sp)
81128074:	dec00204 	addi	sp,sp,8
81128078:	f800283a 	ret

8112807c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8112807c:	defffa04 	addi	sp,sp,-24
81128080:	df000515 	stw	fp,20(sp)
81128084:	df000504 	addi	fp,sp,20
81128088:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112808c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81128090:	e0bfff17 	ldw	r2,-4(fp)
81128094:	1000021e 	bne	r2,zero,811280a0 <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
81128098:	00800104 	movi	r2,4
8112809c:	00002106 	br	81128124 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
811280a0:	e0bfff17 	ldw	r2,-4(fp)
811280a4:	10800003 	ldbu	r2,0(r2)
811280a8:	10803fcc 	andi	r2,r2,255
811280ac:	108000a0 	cmpeqi	r2,r2,2
811280b0:	1000021e 	bne	r2,zero,811280bc <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
811280b4:	00800044 	movi	r2,1
811280b8:	00001a06 	br	81128124 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811280bc:	0005303a 	rdctl	r2,status
811280c0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811280c4:	e0fffd17 	ldw	r3,-12(fp)
811280c8:	00bfff84 	movi	r2,-2
811280cc:	1884703a 	and	r2,r3,r2
811280d0:	1001703a 	wrctl	status,r2
  
  return context;
811280d4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811280d8:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
811280dc:	e0bfff17 	ldw	r2,-4(fp)
811280e0:	10800117 	ldw	r2,4(r2)
811280e4:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
811280e8:	e0bffc17 	ldw	r2,-16(fp)
811280ec:	10c00117 	ldw	r3,4(r2)
811280f0:	e0bffc17 	ldw	r2,-16(fp)
811280f4:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
811280f8:	e0bffc17 	ldw	r2,-16(fp)
811280fc:	10c00117 	ldw	r3,4(r2)
81128100:	e0bffc17 	ldw	r2,-16(fp)
81128104:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
81128108:	e0bffc17 	ldw	r2,-16(fp)
8112810c:	1000058d 	sth	zero,22(r2)
81128110:	e0bffb17 	ldw	r2,-20(fp)
81128114:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128118:	e0bffe17 	ldw	r2,-8(fp)
8112811c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81128120:	0005883a 	mov	r2,zero
}
81128124:	e037883a 	mov	sp,fp
81128128:	df000017 	ldw	fp,0(sp)
8112812c:	dec00104 	addi	sp,sp,4
81128130:	f800283a 	ret

81128134 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81128134:	defff304 	addi	sp,sp,-52
81128138:	dfc00c15 	stw	ra,48(sp)
8112813c:	df000b15 	stw	fp,44(sp)
81128140:	df000b04 	addi	fp,sp,44
81128144:	e13ffd15 	stw	r4,-12(fp)
81128148:	2805883a 	mov	r2,r5
8112814c:	e1bfff15 	stw	r6,-4(fp)
81128150:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128154:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81128158:	e0bfff17 	ldw	r2,-4(fp)
8112815c:	1000021e 	bne	r2,zero,81128168 <OSQPend+0x34>
        return ((void *)0);
81128160:	0005883a 	mov	r2,zero
81128164:	00009106 	br	811283ac <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
81128168:	e0bffd17 	ldw	r2,-12(fp)
8112816c:	1000051e 	bne	r2,zero,81128184 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81128170:	e0bfff17 	ldw	r2,-4(fp)
81128174:	00c00104 	movi	r3,4
81128178:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112817c:	0005883a 	mov	r2,zero
81128180:	00008a06 	br	811283ac <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
81128184:	e0bffd17 	ldw	r2,-12(fp)
81128188:	10800003 	ldbu	r2,0(r2)
8112818c:	10803fcc 	andi	r2,r2,255
81128190:	108000a0 	cmpeqi	r2,r2,2
81128194:	1000051e 	bne	r2,zero,811281ac <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81128198:	e0bfff17 	ldw	r2,-4(fp)
8112819c:	00c00044 	movi	r3,1
811281a0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811281a4:	0005883a 	mov	r2,zero
811281a8:	00008006 	br	811283ac <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
811281ac:	d0a08803 	ldbu	r2,-32224(gp)
811281b0:	10803fcc 	andi	r2,r2,255
811281b4:	10000526 	beq	r2,zero,811281cc <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
811281b8:	e0bfff17 	ldw	r2,-4(fp)
811281bc:	00c00084 	movi	r3,2
811281c0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811281c4:	0005883a 	mov	r2,zero
811281c8:	00007806 	br	811283ac <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
811281cc:	d0a07903 	ldbu	r2,-32284(gp)
811281d0:	10803fcc 	andi	r2,r2,255
811281d4:	10000526 	beq	r2,zero,811281ec <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
811281d8:	e0bfff17 	ldw	r2,-4(fp)
811281dc:	00c00344 	movi	r3,13
811281e0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
811281e4:	0005883a 	mov	r2,zero
811281e8:	00007006 	br	811283ac <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811281ec:	0005303a 	rdctl	r2,status
811281f0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811281f4:	e0fffc17 	ldw	r3,-16(fp)
811281f8:	00bfff84 	movi	r2,-2
811281fc:	1884703a 	and	r2,r3,r2
81128200:	1001703a 	wrctl	status,r2
  
  return context;
81128204:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81128208:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112820c:	e0bffd17 	ldw	r2,-12(fp)
81128210:	10800117 	ldw	r2,4(r2)
81128214:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
81128218:	e0bff817 	ldw	r2,-32(fp)
8112821c:	1080058b 	ldhu	r2,22(r2)
81128220:	10bfffcc 	andi	r2,r2,65535
81128224:	10001e26 	beq	r2,zero,811282a0 <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
81128228:	e0bff817 	ldw	r2,-32(fp)
8112822c:	10800417 	ldw	r2,16(r2)
81128230:	11000104 	addi	r4,r2,4
81128234:	e0fff817 	ldw	r3,-32(fp)
81128238:	19000415 	stw	r4,16(r3)
8112823c:	10800017 	ldw	r2,0(r2)
81128240:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
81128244:	e0bff817 	ldw	r2,-32(fp)
81128248:	1080058b 	ldhu	r2,22(r2)
8112824c:	10bfffc4 	addi	r2,r2,-1
81128250:	1007883a 	mov	r3,r2
81128254:	e0bff817 	ldw	r2,-32(fp)
81128258:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112825c:	e0bff817 	ldw	r2,-32(fp)
81128260:	10c00417 	ldw	r3,16(r2)
81128264:	e0bff817 	ldw	r2,-32(fp)
81128268:	10800217 	ldw	r2,8(r2)
8112826c:	1880041e 	bne	r3,r2,81128280 <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
81128270:	e0bff817 	ldw	r2,-32(fp)
81128274:	10c00117 	ldw	r3,4(r2)
81128278:	e0bff817 	ldw	r2,-32(fp)
8112827c:	10c00415 	stw	r3,16(r2)
81128280:	e0bff617 	ldw	r2,-40(fp)
81128284:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128288:	e0bff717 	ldw	r2,-36(fp)
8112828c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
81128290:	e0bfff17 	ldw	r2,-4(fp)
81128294:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
81128298:	e0bff517 	ldw	r2,-44(fp)
8112829c:	00004306 	br	811283ac <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
811282a0:	d0a08917 	ldw	r2,-32220(gp)
811282a4:	d0e08917 	ldw	r3,-32220(gp)
811282a8:	18c00c03 	ldbu	r3,48(r3)
811282ac:	18c00114 	ori	r3,r3,4
811282b0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811282b4:	d0a08917 	ldw	r2,-32220(gp)
811282b8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
811282bc:	d0a08917 	ldw	r2,-32220(gp)
811282c0:	e0fffe0b 	ldhu	r3,-8(fp)
811282c4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
811282c8:	e13ffd17 	ldw	r4,-12(fp)
811282cc:	1123a680 	call	81123a68 <OS_EventTaskWait>
811282d0:	e0bff617 	ldw	r2,-40(fp)
811282d4:	e0bffb15 	stw	r2,-20(fp)
811282d8:	e0bffb17 	ldw	r2,-20(fp)
811282dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
811282e0:	112431c0 	call	8112431c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811282e4:	0005303a 	rdctl	r2,status
811282e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811282ec:	e0fff917 	ldw	r3,-28(fp)
811282f0:	00bfff84 	movi	r2,-2
811282f4:	1884703a 	and	r2,r3,r2
811282f8:	1001703a 	wrctl	status,r2
  
  return context;
811282fc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81128300:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81128304:	d0a08917 	ldw	r2,-32220(gp)
81128308:	10800c43 	ldbu	r2,49(r2)
8112830c:	10803fcc 	andi	r2,r2,255
81128310:	10000326 	beq	r2,zero,81128320 <OSQPend+0x1ec>
81128314:	108000a0 	cmpeqi	r2,r2,2
81128318:	1000071e 	bne	r2,zero,81128338 <OSQPend+0x204>
8112831c:	00000b06 	br	8112834c <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
81128320:	d0a08917 	ldw	r2,-32220(gp)
81128324:	10800917 	ldw	r2,36(r2)
81128328:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8112832c:	e0bfff17 	ldw	r2,-4(fp)
81128330:	10000005 	stb	zero,0(r2)
             break;
81128334:	00000e06 	br	81128370 <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
81128338:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112833c:	e0bfff17 	ldw	r2,-4(fp)
81128340:	00c00384 	movi	r3,14
81128344:	10c00005 	stb	r3,0(r2)
             break;
81128348:	00000906 	br	81128370 <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112834c:	d0a08917 	ldw	r2,-32220(gp)
81128350:	e17ffd17 	ldw	r5,-12(fp)
81128354:	1009883a 	mov	r4,r2
81128358:	1123cc80 	call	81123cc8 <OS_EventTaskRemove>
             pmsg = (void *)0;
8112835c:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
81128360:	e0bfff17 	ldw	r2,-4(fp)
81128364:	00c00284 	movi	r3,10
81128368:	10c00005 	stb	r3,0(r2)
             break;
8112836c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
81128370:	d0a08917 	ldw	r2,-32220(gp)
81128374:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
81128378:	d0a08917 	ldw	r2,-32220(gp)
8112837c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
81128380:	d0a08917 	ldw	r2,-32220(gp)
81128384:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81128388:	d0a08917 	ldw	r2,-32220(gp)
8112838c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
81128390:	d0a08917 	ldw	r2,-32220(gp)
81128394:	10000915 	stw	zero,36(r2)
81128398:	e0bff617 	ldw	r2,-40(fp)
8112839c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811283a0:	e0bffa17 	ldw	r2,-24(fp)
811283a4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
811283a8:	e0bff517 	ldw	r2,-44(fp)
}
811283ac:	e037883a 	mov	sp,fp
811283b0:	dfc00117 	ldw	ra,4(sp)
811283b4:	df000017 	ldw	fp,0(sp)
811283b8:	dec00204 	addi	sp,sp,8
811283bc:	f800283a 	ret

811283c0 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
811283c0:	defff604 	addi	sp,sp,-40
811283c4:	dfc00915 	stw	ra,36(sp)
811283c8:	df000815 	stw	fp,32(sp)
811283cc:	df000804 	addi	fp,sp,32
811283d0:	e13ffd15 	stw	r4,-12(fp)
811283d4:	2805883a 	mov	r2,r5
811283d8:	e1bfff15 	stw	r6,-4(fp)
811283dc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811283e0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
811283e4:	e0bfff17 	ldw	r2,-4(fp)
811283e8:	1000021e 	bne	r2,zero,811283f4 <OSQPendAbort+0x34>
        return (0);
811283ec:	0005883a 	mov	r2,zero
811283f0:	00004906 	br	81128518 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
811283f4:	e0bffd17 	ldw	r2,-12(fp)
811283f8:	1000051e 	bne	r2,zero,81128410 <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
811283fc:	e0bfff17 	ldw	r2,-4(fp)
81128400:	00c00104 	movi	r3,4
81128404:	10c00005 	stb	r3,0(r2)
        return (0);
81128408:	0005883a 	mov	r2,zero
8112840c:	00004206 	br	81128518 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
81128410:	e0bffd17 	ldw	r2,-12(fp)
81128414:	10800003 	ldbu	r2,0(r2)
81128418:	10803fcc 	andi	r2,r2,255
8112841c:	108000a0 	cmpeqi	r2,r2,2
81128420:	1000051e 	bne	r2,zero,81128438 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81128424:	e0bfff17 	ldw	r2,-4(fp)
81128428:	00c00044 	movi	r3,1
8112842c:	10c00005 	stb	r3,0(r2)
        return (0);
81128430:	0005883a 	mov	r2,zero
81128434:	00003806 	br	81128518 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128438:	0005303a 	rdctl	r2,status
8112843c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128440:	e0fffc17 	ldw	r3,-16(fp)
81128444:	00bfff84 	movi	r2,-2
81128448:	1884703a 	and	r2,r3,r2
8112844c:	1001703a 	wrctl	status,r2
  
  return context;
81128450:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81128454:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
81128458:	e0bffd17 	ldw	r2,-12(fp)
8112845c:	10800283 	ldbu	r2,10(r2)
81128460:	10803fcc 	andi	r2,r2,255
81128464:	10002526 	beq	r2,zero,811284fc <OSQPendAbort+0x13c>
        nbr_tasks = 0;
81128468:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112846c:	e0bffe03 	ldbu	r2,-8(fp)
81128470:	10800060 	cmpeqi	r2,r2,1
81128474:	10000e26 	beq	r2,zero,811284b0 <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
81128478:	00000806 	br	8112849c <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112847c:	01c00084 	movi	r7,2
81128480:	01800104 	movi	r6,4
81128484:	000b883a 	mov	r5,zero
81128488:	e13ffd17 	ldw	r4,-12(fp)
8112848c:	11238d00 	call	811238d0 <OS_EventTaskRdy>
                     nbr_tasks++;
81128490:	e0bff803 	ldbu	r2,-32(fp)
81128494:	10800044 	addi	r2,r2,1
81128498:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112849c:	e0bffd17 	ldw	r2,-12(fp)
811284a0:	10800283 	ldbu	r2,10(r2)
811284a4:	10803fcc 	andi	r2,r2,255
811284a8:	103ff41e 	bne	r2,zero,8112847c <__reset+0xfb10847c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
811284ac:	00000906 	br	811284d4 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
811284b0:	01c00084 	movi	r7,2
811284b4:	01800104 	movi	r6,4
811284b8:	000b883a 	mov	r5,zero
811284bc:	e13ffd17 	ldw	r4,-12(fp)
811284c0:	11238d00 	call	811238d0 <OS_EventTaskRdy>
                 nbr_tasks++;
811284c4:	e0bff803 	ldbu	r2,-32(fp)
811284c8:	10800044 	addi	r2,r2,1
811284cc:	e0bff805 	stb	r2,-32(fp)
                 break;
811284d0:	0001883a 	nop
811284d4:	e0bff917 	ldw	r2,-28(fp)
811284d8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811284dc:	e0bffa17 	ldw	r2,-24(fp)
811284e0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
811284e4:	112431c0 	call	8112431c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
811284e8:	e0bfff17 	ldw	r2,-4(fp)
811284ec:	00c00384 	movi	r3,14
811284f0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
811284f4:	e0bff803 	ldbu	r2,-32(fp)
811284f8:	00000706 	br	81128518 <OSQPendAbort+0x158>
811284fc:	e0bff917 	ldw	r2,-28(fp)
81128500:	e0bffb15 	stw	r2,-20(fp)
81128504:	e0bffb17 	ldw	r2,-20(fp)
81128508:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112850c:	e0bfff17 	ldw	r2,-4(fp)
81128510:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
81128514:	0005883a 	mov	r2,zero
}
81128518:	e037883a 	mov	sp,fp
8112851c:	dfc00117 	ldw	ra,4(sp)
81128520:	df000017 	ldw	fp,0(sp)
81128524:	dec00204 	addi	sp,sp,8
81128528:	f800283a 	ret

8112852c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112852c:	defff604 	addi	sp,sp,-40
81128530:	dfc00915 	stw	ra,36(sp)
81128534:	df000815 	stw	fp,32(sp)
81128538:	df000804 	addi	fp,sp,32
8112853c:	e13ffe15 	stw	r4,-8(fp)
81128540:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81128544:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
81128548:	e0bffe17 	ldw	r2,-8(fp)
8112854c:	1000021e 	bne	r2,zero,81128558 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
81128550:	00800104 	movi	r2,4
81128554:	00004a06 	br	81128680 <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
81128558:	e0bffe17 	ldw	r2,-8(fp)
8112855c:	10800003 	ldbu	r2,0(r2)
81128560:	10803fcc 	andi	r2,r2,255
81128564:	108000a0 	cmpeqi	r2,r2,2
81128568:	1000021e 	bne	r2,zero,81128574 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
8112856c:	00800044 	movi	r2,1
81128570:	00004306 	br	81128680 <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128574:	0005303a 	rdctl	r2,status
81128578:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112857c:	e0fffd17 	ldw	r3,-12(fp)
81128580:	00bfff84 	movi	r2,-2
81128584:	1884703a 	and	r2,r3,r2
81128588:	1001703a 	wrctl	status,r2
  
  return context;
8112858c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81128590:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
81128594:	e0bffe17 	ldw	r2,-8(fp)
81128598:	10800283 	ldbu	r2,10(r2)
8112859c:	10803fcc 	andi	r2,r2,255
811285a0:	10000c26 	beq	r2,zero,811285d4 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
811285a4:	000f883a 	mov	r7,zero
811285a8:	01800104 	movi	r6,4
811285ac:	e17fff17 	ldw	r5,-4(fp)
811285b0:	e13ffe17 	ldw	r4,-8(fp)
811285b4:	11238d00 	call	811238d0 <OS_EventTaskRdy>
811285b8:	e0bff817 	ldw	r2,-32(fp)
811285bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811285c0:	e0bff917 	ldw	r2,-28(fp)
811285c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
811285c8:	112431c0 	call	8112431c <OS_Sched>
        return (OS_ERR_NONE);
811285cc:	0005883a 	mov	r2,zero
811285d0:	00002b06 	br	81128680 <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
811285d4:	e0bffe17 	ldw	r2,-8(fp)
811285d8:	10800117 	ldw	r2,4(r2)
811285dc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
811285e0:	e0bffb17 	ldw	r2,-20(fp)
811285e4:	10c0058b 	ldhu	r3,22(r2)
811285e8:	e0bffb17 	ldw	r2,-20(fp)
811285ec:	1080050b 	ldhu	r2,20(r2)
811285f0:	18ffffcc 	andi	r3,r3,65535
811285f4:	10bfffcc 	andi	r2,r2,65535
811285f8:	18800636 	bltu	r3,r2,81128614 <OSQPost+0xe8>
811285fc:	e0bff817 	ldw	r2,-32(fp)
81128600:	e0bffa15 	stw	r2,-24(fp)
81128604:	e0bffa17 	ldw	r2,-24(fp)
81128608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112860c:	00800784 	movi	r2,30
81128610:	00001b06 	br	81128680 <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
81128614:	e0bffb17 	ldw	r2,-20(fp)
81128618:	10800317 	ldw	r2,12(r2)
8112861c:	11000104 	addi	r4,r2,4
81128620:	e0fffb17 	ldw	r3,-20(fp)
81128624:	19000315 	stw	r4,12(r3)
81128628:	e0ffff17 	ldw	r3,-4(fp)
8112862c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
81128630:	e0bffb17 	ldw	r2,-20(fp)
81128634:	1080058b 	ldhu	r2,22(r2)
81128638:	10800044 	addi	r2,r2,1
8112863c:	1007883a 	mov	r3,r2
81128640:	e0bffb17 	ldw	r2,-20(fp)
81128644:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
81128648:	e0bffb17 	ldw	r2,-20(fp)
8112864c:	10c00317 	ldw	r3,12(r2)
81128650:	e0bffb17 	ldw	r2,-20(fp)
81128654:	10800217 	ldw	r2,8(r2)
81128658:	1880041e 	bne	r3,r2,8112866c <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
8112865c:	e0bffb17 	ldw	r2,-20(fp)
81128660:	10c00117 	ldw	r3,4(r2)
81128664:	e0bffb17 	ldw	r2,-20(fp)
81128668:	10c00315 	stw	r3,12(r2)
8112866c:	e0bff817 	ldw	r2,-32(fp)
81128670:	e0bffc15 	stw	r2,-16(fp)
81128674:	e0bffc17 	ldw	r2,-16(fp)
81128678:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112867c:	0005883a 	mov	r2,zero
}
81128680:	e037883a 	mov	sp,fp
81128684:	dfc00117 	ldw	ra,4(sp)
81128688:	df000017 	ldw	fp,0(sp)
8112868c:	dec00204 	addi	sp,sp,8
81128690:	f800283a 	ret

81128694 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
81128694:	defff604 	addi	sp,sp,-40
81128698:	dfc00915 	stw	ra,36(sp)
8112869c:	df000815 	stw	fp,32(sp)
811286a0:	df000804 	addi	fp,sp,32
811286a4:	e13ffe15 	stw	r4,-8(fp)
811286a8:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
811286ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
811286b0:	e0bffe17 	ldw	r2,-8(fp)
811286b4:	1000021e 	bne	r2,zero,811286c0 <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
811286b8:	00800104 	movi	r2,4
811286bc:	00004c06 	br	811287f0 <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
811286c0:	e0bffe17 	ldw	r2,-8(fp)
811286c4:	10800003 	ldbu	r2,0(r2)
811286c8:	10803fcc 	andi	r2,r2,255
811286cc:	108000a0 	cmpeqi	r2,r2,2
811286d0:	1000021e 	bne	r2,zero,811286dc <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
811286d4:	00800044 	movi	r2,1
811286d8:	00004506 	br	811287f0 <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811286dc:	0005303a 	rdctl	r2,status
811286e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811286e4:	e0fffd17 	ldw	r3,-12(fp)
811286e8:	00bfff84 	movi	r2,-2
811286ec:	1884703a 	and	r2,r3,r2
811286f0:	1001703a 	wrctl	status,r2
  
  return context;
811286f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811286f8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
811286fc:	e0bffe17 	ldw	r2,-8(fp)
81128700:	10800283 	ldbu	r2,10(r2)
81128704:	10803fcc 	andi	r2,r2,255
81128708:	10000c26 	beq	r2,zero,8112873c <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112870c:	000f883a 	mov	r7,zero
81128710:	01800104 	movi	r6,4
81128714:	e17fff17 	ldw	r5,-4(fp)
81128718:	e13ffe17 	ldw	r4,-8(fp)
8112871c:	11238d00 	call	811238d0 <OS_EventTaskRdy>
81128720:	e0bff817 	ldw	r2,-32(fp)
81128724:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128728:	e0bff917 	ldw	r2,-28(fp)
8112872c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
81128730:	112431c0 	call	8112431c <OS_Sched>
        return (OS_ERR_NONE);
81128734:	0005883a 	mov	r2,zero
81128738:	00002d06 	br	811287f0 <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112873c:	e0bffe17 	ldw	r2,-8(fp)
81128740:	10800117 	ldw	r2,4(r2)
81128744:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
81128748:	e0bffb17 	ldw	r2,-20(fp)
8112874c:	10c0058b 	ldhu	r3,22(r2)
81128750:	e0bffb17 	ldw	r2,-20(fp)
81128754:	1080050b 	ldhu	r2,20(r2)
81128758:	18ffffcc 	andi	r3,r3,65535
8112875c:	10bfffcc 	andi	r2,r2,65535
81128760:	18800636 	bltu	r3,r2,8112877c <OSQPostFront+0xe8>
81128764:	e0bff817 	ldw	r2,-32(fp)
81128768:	e0bffa15 	stw	r2,-24(fp)
8112876c:	e0bffa17 	ldw	r2,-24(fp)
81128770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81128774:	00800784 	movi	r2,30
81128778:	00001d06 	br	811287f0 <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112877c:	e0bffb17 	ldw	r2,-20(fp)
81128780:	10c00417 	ldw	r3,16(r2)
81128784:	e0bffb17 	ldw	r2,-20(fp)
81128788:	10800117 	ldw	r2,4(r2)
8112878c:	1880041e 	bne	r3,r2,811287a0 <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
81128790:	e0bffb17 	ldw	r2,-20(fp)
81128794:	10c00217 	ldw	r3,8(r2)
81128798:	e0bffb17 	ldw	r2,-20(fp)
8112879c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
811287a0:	e0bffb17 	ldw	r2,-20(fp)
811287a4:	10800417 	ldw	r2,16(r2)
811287a8:	10ffff04 	addi	r3,r2,-4
811287ac:	e0bffb17 	ldw	r2,-20(fp)
811287b0:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
811287b4:	e0bffb17 	ldw	r2,-20(fp)
811287b8:	10800417 	ldw	r2,16(r2)
811287bc:	e0ffff17 	ldw	r3,-4(fp)
811287c0:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
811287c4:	e0bffb17 	ldw	r2,-20(fp)
811287c8:	1080058b 	ldhu	r2,22(r2)
811287cc:	10800044 	addi	r2,r2,1
811287d0:	1007883a 	mov	r3,r2
811287d4:	e0bffb17 	ldw	r2,-20(fp)
811287d8:	10c0058d 	sth	r3,22(r2)
811287dc:	e0bff817 	ldw	r2,-32(fp)
811287e0:	e0bffc15 	stw	r2,-16(fp)
811287e4:	e0bffc17 	ldw	r2,-16(fp)
811287e8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811287ec:	0005883a 	mov	r2,zero
}
811287f0:	e037883a 	mov	sp,fp
811287f4:	dfc00117 	ldw	ra,4(sp)
811287f8:	df000017 	ldw	fp,0(sp)
811287fc:	dec00204 	addi	sp,sp,8
81128800:	f800283a 	ret

81128804 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
81128804:	defff504 	addi	sp,sp,-44
81128808:	dfc00a15 	stw	ra,40(sp)
8112880c:	df000915 	stw	fp,36(sp)
81128810:	df000904 	addi	fp,sp,36
81128814:	e13ffd15 	stw	r4,-12(fp)
81128818:	e17ffe15 	stw	r5,-8(fp)
8112881c:	3005883a 	mov	r2,r6
81128820:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81128824:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81128828:	e0bffd17 	ldw	r2,-12(fp)
8112882c:	1000021e 	bne	r2,zero,81128838 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
81128830:	00800104 	movi	r2,4
81128834:	00007106 	br	811289fc <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
81128838:	e0bffd17 	ldw	r2,-12(fp)
8112883c:	10800003 	ldbu	r2,0(r2)
81128840:	10803fcc 	andi	r2,r2,255
81128844:	108000a0 	cmpeqi	r2,r2,2
81128848:	1000021e 	bne	r2,zero,81128854 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
8112884c:	00800044 	movi	r2,1
81128850:	00006a06 	br	811289fc <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128854:	0005303a 	rdctl	r2,status
81128858:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112885c:	e0fffc17 	ldw	r3,-16(fp)
81128860:	00bfff84 	movi	r2,-2
81128864:	1884703a 	and	r2,r3,r2
81128868:	1001703a 	wrctl	status,r2
  
  return context;
8112886c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81128870:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
81128874:	e0bffd17 	ldw	r2,-12(fp)
81128878:	10800283 	ldbu	r2,10(r2)
8112887c:	10803fcc 	andi	r2,r2,255
81128880:	10001d26 	beq	r2,zero,811288f8 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
81128884:	e0bfff03 	ldbu	r2,-4(fp)
81128888:	1080004c 	andi	r2,r2,1
8112888c:	10000b26 	beq	r2,zero,811288bc <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
81128890:	00000506 	br	811288a8 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
81128894:	000f883a 	mov	r7,zero
81128898:	01800104 	movi	r6,4
8112889c:	e17ffe17 	ldw	r5,-8(fp)
811288a0:	e13ffd17 	ldw	r4,-12(fp)
811288a4:	11238d00 	call	811238d0 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
811288a8:	e0bffd17 	ldw	r2,-12(fp)
811288ac:	10800283 	ldbu	r2,10(r2)
811288b0:	10803fcc 	andi	r2,r2,255
811288b4:	103ff71e 	bne	r2,zero,81128894 <__reset+0xfb108894>
811288b8:	00000506 	br	811288d0 <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
811288bc:	000f883a 	mov	r7,zero
811288c0:	01800104 	movi	r6,4
811288c4:	e17ffe17 	ldw	r5,-8(fp)
811288c8:	e13ffd17 	ldw	r4,-12(fp)
811288cc:	11238d00 	call	811238d0 <OS_EventTaskRdy>
811288d0:	e0bff717 	ldw	r2,-36(fp)
811288d4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811288d8:	e0bff817 	ldw	r2,-32(fp)
811288dc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
811288e0:	e0bfff03 	ldbu	r2,-4(fp)
811288e4:	1080010c 	andi	r2,r2,4
811288e8:	1000011e 	bne	r2,zero,811288f0 <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
811288ec:	112431c0 	call	8112431c <OS_Sched>
        }
        return (OS_ERR_NONE);
811288f0:	0005883a 	mov	r2,zero
811288f4:	00004106 	br	811289fc <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
811288f8:	e0bffd17 	ldw	r2,-12(fp)
811288fc:	10800117 	ldw	r2,4(r2)
81128900:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
81128904:	e0bffa17 	ldw	r2,-24(fp)
81128908:	10c0058b 	ldhu	r3,22(r2)
8112890c:	e0bffa17 	ldw	r2,-24(fp)
81128910:	1080050b 	ldhu	r2,20(r2)
81128914:	18ffffcc 	andi	r3,r3,65535
81128918:	10bfffcc 	andi	r2,r2,65535
8112891c:	18800636 	bltu	r3,r2,81128938 <OSQPostOpt+0x134>
81128920:	e0bff717 	ldw	r2,-36(fp)
81128924:	e0bff915 	stw	r2,-28(fp)
81128928:	e0bff917 	ldw	r2,-28(fp)
8112892c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
81128930:	00800784 	movi	r2,30
81128934:	00003106 	br	811289fc <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
81128938:	e0bfff03 	ldbu	r2,-4(fp)
8112893c:	1080008c 	andi	r2,r2,2
81128940:	10001326 	beq	r2,zero,81128990 <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
81128944:	e0bffa17 	ldw	r2,-24(fp)
81128948:	10c00417 	ldw	r3,16(r2)
8112894c:	e0bffa17 	ldw	r2,-24(fp)
81128950:	10800117 	ldw	r2,4(r2)
81128954:	1880041e 	bne	r3,r2,81128968 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
81128958:	e0bffa17 	ldw	r2,-24(fp)
8112895c:	10c00217 	ldw	r3,8(r2)
81128960:	e0bffa17 	ldw	r2,-24(fp)
81128964:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
81128968:	e0bffa17 	ldw	r2,-24(fp)
8112896c:	10800417 	ldw	r2,16(r2)
81128970:	10ffff04 	addi	r3,r2,-4
81128974:	e0bffa17 	ldw	r2,-24(fp)
81128978:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112897c:	e0bffa17 	ldw	r2,-24(fp)
81128980:	10800417 	ldw	r2,16(r2)
81128984:	e0fffe17 	ldw	r3,-8(fp)
81128988:	10c00015 	stw	r3,0(r2)
8112898c:	00001006 	br	811289d0 <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
81128990:	e0bffa17 	ldw	r2,-24(fp)
81128994:	10800317 	ldw	r2,12(r2)
81128998:	11000104 	addi	r4,r2,4
8112899c:	e0fffa17 	ldw	r3,-24(fp)
811289a0:	19000315 	stw	r4,12(r3)
811289a4:	e0fffe17 	ldw	r3,-8(fp)
811289a8:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
811289ac:	e0bffa17 	ldw	r2,-24(fp)
811289b0:	10c00317 	ldw	r3,12(r2)
811289b4:	e0bffa17 	ldw	r2,-24(fp)
811289b8:	10800217 	ldw	r2,8(r2)
811289bc:	1880041e 	bne	r3,r2,811289d0 <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
811289c0:	e0bffa17 	ldw	r2,-24(fp)
811289c4:	10c00117 	ldw	r3,4(r2)
811289c8:	e0bffa17 	ldw	r2,-24(fp)
811289cc:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
811289d0:	e0bffa17 	ldw	r2,-24(fp)
811289d4:	1080058b 	ldhu	r2,22(r2)
811289d8:	10800044 	addi	r2,r2,1
811289dc:	1007883a 	mov	r3,r2
811289e0:	e0bffa17 	ldw	r2,-24(fp)
811289e4:	10c0058d 	sth	r3,22(r2)
811289e8:	e0bff717 	ldw	r2,-36(fp)
811289ec:	e0bffb15 	stw	r2,-20(fp)
811289f0:	e0bffb17 	ldw	r2,-20(fp)
811289f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
811289f8:	0005883a 	mov	r2,zero
}
811289fc:	e037883a 	mov	sp,fp
81128a00:	dfc00117 	ldw	ra,4(sp)
81128a04:	df000017 	ldw	fp,0(sp)
81128a08:	dec00204 	addi	sp,sp,8
81128a0c:	f800283a 	ret

81128a10 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
81128a10:	defff604 	addi	sp,sp,-40
81128a14:	df000915 	stw	fp,36(sp)
81128a18:	df000904 	addi	fp,sp,36
81128a1c:	e13ffe15 	stw	r4,-8(fp)
81128a20:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
81128a24:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
81128a28:	e0bffe17 	ldw	r2,-8(fp)
81128a2c:	1000021e 	bne	r2,zero,81128a38 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
81128a30:	00800104 	movi	r2,4
81128a34:	00004906 	br	81128b5c <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
81128a38:	e0bfff17 	ldw	r2,-4(fp)
81128a3c:	1000021e 	bne	r2,zero,81128a48 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
81128a40:	00800244 	movi	r2,9
81128a44:	00004506 	br	81128b5c <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
81128a48:	e0bffe17 	ldw	r2,-8(fp)
81128a4c:	10800003 	ldbu	r2,0(r2)
81128a50:	10803fcc 	andi	r2,r2,255
81128a54:	108000a0 	cmpeqi	r2,r2,2
81128a58:	1000021e 	bne	r2,zero,81128a64 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
81128a5c:	00800044 	movi	r2,1
81128a60:	00003e06 	br	81128b5c <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128a64:	0005303a 	rdctl	r2,status
81128a68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128a6c:	e0fffd17 	ldw	r3,-12(fp)
81128a70:	00bfff84 	movi	r2,-2
81128a74:	1884703a 	and	r2,r3,r2
81128a78:	1001703a 	wrctl	status,r2
  
  return context;
81128a7c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81128a80:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
81128a84:	e0bffe17 	ldw	r2,-8(fp)
81128a88:	10c00283 	ldbu	r3,10(r2)
81128a8c:	e0bfff17 	ldw	r2,-4(fp)
81128a90:	10c00305 	stb	r3,12(r2)
    psrc                 = &pevent->OSEventTbl[0];
81128a94:	e0bffe17 	ldw	r2,-8(fp)
81128a98:	108002c4 	addi	r2,r2,11
81128a9c:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
81128aa0:	e0bfff17 	ldw	r2,-4(fp)
81128aa4:	10800204 	addi	r2,r2,8
81128aa8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81128aac:	e03ff705 	stb	zero,-36(fp)
81128ab0:	00000b06 	br	81128ae0 <OSQQuery+0xd0>
        *pdest++ = *psrc++;
81128ab4:	e0bff917 	ldw	r2,-28(fp)
81128ab8:	10c00044 	addi	r3,r2,1
81128abc:	e0fff915 	stw	r3,-28(fp)
81128ac0:	e0fff817 	ldw	r3,-32(fp)
81128ac4:	19000044 	addi	r4,r3,1
81128ac8:	e13ff815 	stw	r4,-32(fp)
81128acc:	18c00003 	ldbu	r3,0(r3)
81128ad0:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81128ad4:	e0bff703 	ldbu	r2,-36(fp)
81128ad8:	10800044 	addi	r2,r2,1
81128adc:	e0bff705 	stb	r2,-36(fp)
81128ae0:	e0bff703 	ldbu	r2,-36(fp)
81128ae4:	10800130 	cmpltui	r2,r2,4
81128ae8:	103ff21e 	bne	r2,zero,81128ab4 <__reset+0xfb108ab4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
81128aec:	e0bffe17 	ldw	r2,-8(fp)
81128af0:	10800117 	ldw	r2,4(r2)
81128af4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
81128af8:	e0bffc17 	ldw	r2,-16(fp)
81128afc:	1080058b 	ldhu	r2,22(r2)
81128b00:	10bfffcc 	andi	r2,r2,65535
81128b04:	10000626 	beq	r2,zero,81128b20 <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
81128b08:	e0bffc17 	ldw	r2,-16(fp)
81128b0c:	10800417 	ldw	r2,16(r2)
81128b10:	10c00017 	ldw	r3,0(r2)
81128b14:	e0bfff17 	ldw	r2,-4(fp)
81128b18:	10c00015 	stw	r3,0(r2)
81128b1c:	00000206 	br	81128b28 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
81128b20:	e0bfff17 	ldw	r2,-4(fp)
81128b24:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
81128b28:	e0bffc17 	ldw	r2,-16(fp)
81128b2c:	10c0058b 	ldhu	r3,22(r2)
81128b30:	e0bfff17 	ldw	r2,-4(fp)
81128b34:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
81128b38:	e0bffc17 	ldw	r2,-16(fp)
81128b3c:	10c0050b 	ldhu	r3,20(r2)
81128b40:	e0bfff17 	ldw	r2,-4(fp)
81128b44:	10c0018d 	sth	r3,6(r2)
81128b48:	e0bffa17 	ldw	r2,-24(fp)
81128b4c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128b50:	e0bffb17 	ldw	r2,-20(fp)
81128b54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81128b58:	0005883a 	mov	r2,zero
}
81128b5c:	e037883a 	mov	sp,fp
81128b60:	df000017 	ldw	fp,0(sp)
81128b64:	dec00104 	addi	sp,sp,4
81128b68:	f800283a 	ret

81128b6c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
81128b6c:	defffb04 	addi	sp,sp,-20
81128b70:	dfc00415 	stw	ra,16(sp)
81128b74:	df000315 	stw	fp,12(sp)
81128b78:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
81128b7c:	01407804 	movi	r5,480
81128b80:	012045b4 	movhi	r4,33046
81128b84:	212f3604 	addi	r4,r4,-17192
81128b88:	11242600 	call	81124260 <OS_MemClr>
    pq1 = &OSQTbl[0];
81128b8c:	00a045b4 	movhi	r2,33046
81128b90:	10af3604 	addi	r2,r2,-17192
81128b94:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
81128b98:	00a045b4 	movhi	r2,33046
81128b9c:	10af3c04 	addi	r2,r2,-17168
81128ba0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
81128ba4:	e03ffd0d 	sth	zero,-12(fp)
81128ba8:	00000c06 	br	81128bdc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
81128bac:	e0bffe17 	ldw	r2,-8(fp)
81128bb0:	e0ffff17 	ldw	r3,-4(fp)
81128bb4:	10c00015 	stw	r3,0(r2)
        pq1++;
81128bb8:	e0bffe17 	ldw	r2,-8(fp)
81128bbc:	10800604 	addi	r2,r2,24
81128bc0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
81128bc4:	e0bfff17 	ldw	r2,-4(fp)
81128bc8:	10800604 	addi	r2,r2,24
81128bcc:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
81128bd0:	e0bffd0b 	ldhu	r2,-12(fp)
81128bd4:	10800044 	addi	r2,r2,1
81128bd8:	e0bffd0d 	sth	r2,-12(fp)
81128bdc:	e0bffd0b 	ldhu	r2,-12(fp)
81128be0:	108004f0 	cmpltui	r2,r2,19
81128be4:	103ff11e 	bne	r2,zero,81128bac <__reset+0xfb108bac>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
81128be8:	e0bffe17 	ldw	r2,-8(fp)
81128bec:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
81128bf0:	00a045b4 	movhi	r2,33046
81128bf4:	10af3604 	addi	r2,r2,-17192
81128bf8:	d0a08415 	stw	r2,-32240(gp)
#endif
}
81128bfc:	0001883a 	nop
81128c00:	e037883a 	mov	sp,fp
81128c04:	dfc00117 	ldw	ra,4(sp)
81128c08:	df000017 	ldw	fp,0(sp)
81128c0c:	dec00204 	addi	sp,sp,8
81128c10:	f800283a 	ret

81128c14 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
81128c14:	defffa04 	addi	sp,sp,-24
81128c18:	df000515 	stw	fp,20(sp)
81128c1c:	df000504 	addi	fp,sp,20
81128c20:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81128c24:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81128c28:	e0bfff17 	ldw	r2,-4(fp)
81128c2c:	1000021e 	bne	r2,zero,81128c38 <OSSemAccept+0x24>
        return (0);
81128c30:	0005883a 	mov	r2,zero
81128c34:	00001f06 	br	81128cb4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81128c38:	e0bfff17 	ldw	r2,-4(fp)
81128c3c:	10800003 	ldbu	r2,0(r2)
81128c40:	10803fcc 	andi	r2,r2,255
81128c44:	108000e0 	cmpeqi	r2,r2,3
81128c48:	1000021e 	bne	r2,zero,81128c54 <OSSemAccept+0x40>
        return (0);
81128c4c:	0005883a 	mov	r2,zero
81128c50:	00001806 	br	81128cb4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128c54:	0005303a 	rdctl	r2,status
81128c58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128c5c:	e0fffe17 	ldw	r3,-8(fp)
81128c60:	00bfff84 	movi	r2,-2
81128c64:	1884703a 	and	r2,r3,r2
81128c68:	1001703a 	wrctl	status,r2
  
  return context;
81128c6c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81128c70:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
81128c74:	e0bfff17 	ldw	r2,-4(fp)
81128c78:	1080020b 	ldhu	r2,8(r2)
81128c7c:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
81128c80:	e0bffd0b 	ldhu	r2,-12(fp)
81128c84:	10000626 	beq	r2,zero,81128ca0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
81128c88:	e0bfff17 	ldw	r2,-4(fp)
81128c8c:	1080020b 	ldhu	r2,8(r2)
81128c90:	10bfffc4 	addi	r2,r2,-1
81128c94:	1007883a 	mov	r3,r2
81128c98:	e0bfff17 	ldw	r2,-4(fp)
81128c9c:	10c0020d 	sth	r3,8(r2)
81128ca0:	e0bffb17 	ldw	r2,-20(fp)
81128ca4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128ca8:	e0bffc17 	ldw	r2,-16(fp)
81128cac:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
81128cb0:	e0bffd0b 	ldhu	r2,-12(fp)
}
81128cb4:	e037883a 	mov	sp,fp
81128cb8:	df000017 	ldw	fp,0(sp)
81128cbc:	dec00104 	addi	sp,sp,4
81128cc0:	f800283a 	ret

81128cc4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
81128cc4:	defff904 	addi	sp,sp,-28
81128cc8:	dfc00615 	stw	ra,24(sp)
81128ccc:	df000515 	stw	fp,20(sp)
81128cd0:	df000504 	addi	fp,sp,20
81128cd4:	2005883a 	mov	r2,r4
81128cd8:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81128cdc:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81128ce0:	d0a08803 	ldbu	r2,-32224(gp)
81128ce4:	10803fcc 	andi	r2,r2,255
81128ce8:	10000226 	beq	r2,zero,81128cf4 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
81128cec:	0005883a 	mov	r2,zero
81128cf0:	00002506 	br	81128d88 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128cf4:	0005303a 	rdctl	r2,status
81128cf8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128cfc:	e0fffe17 	ldw	r3,-8(fp)
81128d00:	00bfff84 	movi	r2,-2
81128d04:	1884703a 	and	r2,r3,r2
81128d08:	1001703a 	wrctl	status,r2
  
  return context;
81128d0c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
81128d10:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
81128d14:	d0a08717 	ldw	r2,-32228(gp)
81128d18:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
81128d1c:	d0a08717 	ldw	r2,-32228(gp)
81128d20:	10000326 	beq	r2,zero,81128d30 <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
81128d24:	d0a08717 	ldw	r2,-32228(gp)
81128d28:	10800117 	ldw	r2,4(r2)
81128d2c:	d0a08715 	stw	r2,-32228(gp)
81128d30:	e0bffb17 	ldw	r2,-20(fp)
81128d34:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128d38:	e0bffc17 	ldw	r2,-16(fp)
81128d3c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
81128d40:	e0bffd17 	ldw	r2,-12(fp)
81128d44:	10000f26 	beq	r2,zero,81128d84 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
81128d48:	e0bffd17 	ldw	r2,-12(fp)
81128d4c:	00c000c4 	movi	r3,3
81128d50:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
81128d54:	e0bffd17 	ldw	r2,-12(fp)
81128d58:	e0ffff0b 	ldhu	r3,-4(fp)
81128d5c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
81128d60:	e0bffd17 	ldw	r2,-12(fp)
81128d64:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
81128d68:	e0bffd17 	ldw	r2,-12(fp)
81128d6c:	00c00fc4 	movi	r3,63
81128d70:	10c003c5 	stb	r3,15(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
81128d74:	e0bffd17 	ldw	r2,-12(fp)
81128d78:	10000405 	stb	zero,16(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
81128d7c:	e13ffd17 	ldw	r4,-12(fp)
81128d80:	1123e800 	call	81123e80 <OS_EventWaitListInit>
    }
    return (pevent);
81128d84:	e0bffd17 	ldw	r2,-12(fp)
}
81128d88:	e037883a 	mov	sp,fp
81128d8c:	dfc00117 	ldw	ra,4(sp)
81128d90:	df000017 	ldw	fp,0(sp)
81128d94:	dec00204 	addi	sp,sp,8
81128d98:	f800283a 	ret

81128d9c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
81128d9c:	defff304 	addi	sp,sp,-52
81128da0:	dfc00c15 	stw	ra,48(sp)
81128da4:	df000b15 	stw	fp,44(sp)
81128da8:	df000b04 	addi	fp,sp,44
81128dac:	e13ffd15 	stw	r4,-12(fp)
81128db0:	2805883a 	mov	r2,r5
81128db4:	e1bfff15 	stw	r6,-4(fp)
81128db8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81128dbc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81128dc0:	e0bfff17 	ldw	r2,-4(fp)
81128dc4:	1000021e 	bne	r2,zero,81128dd0 <OSSemDel+0x34>
        return (pevent);
81128dc8:	e0bffd17 	ldw	r2,-12(fp)
81128dcc:	00007e06 	br	81128fc8 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
81128dd0:	e0bffd17 	ldw	r2,-12(fp)
81128dd4:	1000051e 	bne	r2,zero,81128dec <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81128dd8:	e0bfff17 	ldw	r2,-4(fp)
81128ddc:	00c00104 	movi	r3,4
81128de0:	10c00005 	stb	r3,0(r2)
        return (pevent);
81128de4:	e0bffd17 	ldw	r2,-12(fp)
81128de8:	00007706 	br	81128fc8 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
81128dec:	e0bffd17 	ldw	r2,-12(fp)
81128df0:	10800003 	ldbu	r2,0(r2)
81128df4:	10803fcc 	andi	r2,r2,255
81128df8:	108000e0 	cmpeqi	r2,r2,3
81128dfc:	1000051e 	bne	r2,zero,81128e14 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
81128e00:	e0bfff17 	ldw	r2,-4(fp)
81128e04:	00c00044 	movi	r3,1
81128e08:	10c00005 	stb	r3,0(r2)
        return (pevent);
81128e0c:	e0bffd17 	ldw	r2,-12(fp)
81128e10:	00006d06 	br	81128fc8 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81128e14:	d0a08803 	ldbu	r2,-32224(gp)
81128e18:	10803fcc 	andi	r2,r2,255
81128e1c:	10000526 	beq	r2,zero,81128e34 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
81128e20:	e0bfff17 	ldw	r2,-4(fp)
81128e24:	00c003c4 	movi	r3,15
81128e28:	10c00005 	stb	r3,0(r2)
        return (pevent);
81128e2c:	e0bffd17 	ldw	r2,-12(fp)
81128e30:	00006506 	br	81128fc8 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128e34:	0005303a 	rdctl	r2,status
81128e38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128e3c:	e0fffc17 	ldw	r3,-16(fp)
81128e40:	00bfff84 	movi	r2,-2
81128e44:	1884703a 	and	r2,r3,r2
81128e48:	1001703a 	wrctl	status,r2
  
  return context;
81128e4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81128e50:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
81128e54:	e0bffd17 	ldw	r2,-12(fp)
81128e58:	10800283 	ldbu	r2,10(r2)
81128e5c:	10803fcc 	andi	r2,r2,255
81128e60:	10000326 	beq	r2,zero,81128e70 <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
81128e64:	00800044 	movi	r2,1
81128e68:	e0bff505 	stb	r2,-44(fp)
81128e6c:	00000106 	br	81128e74 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
81128e70:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
81128e74:	e0bffe03 	ldbu	r2,-8(fp)
81128e78:	10000326 	beq	r2,zero,81128e88 <OSSemDel+0xec>
81128e7c:	10800060 	cmpeqi	r2,r2,1
81128e80:	1000281e 	bne	r2,zero,81128f24 <OSSemDel+0x188>
81128e84:	00004506 	br	81128f9c <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
81128e88:	e0bff503 	ldbu	r2,-44(fp)
81128e8c:	1000161e 	bne	r2,zero,81128ee8 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
81128e90:	e0bffd17 	ldw	r2,-12(fp)
81128e94:	00c00fc4 	movi	r3,63
81128e98:	10c003c5 	stb	r3,15(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
81128e9c:	e0bffd17 	ldw	r2,-12(fp)
81128ea0:	10000405 	stb	zero,16(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81128ea4:	e0bffd17 	ldw	r2,-12(fp)
81128ea8:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
81128eac:	d0e08717 	ldw	r3,-32228(gp)
81128eb0:	e0bffd17 	ldw	r2,-12(fp)
81128eb4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
81128eb8:	e0bffd17 	ldw	r2,-12(fp)
81128ebc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
81128ec0:	e0bffd17 	ldw	r2,-12(fp)
81128ec4:	d0a08715 	stw	r2,-32228(gp)
81128ec8:	e0bff717 	ldw	r2,-36(fp)
81128ecc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128ed0:	e0bff817 	ldw	r2,-32(fp)
81128ed4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
81128ed8:	e0bfff17 	ldw	r2,-4(fp)
81128edc:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
81128ee0:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
81128ee4:	00003706 	br	81128fc4 <OSSemDel+0x228>
81128ee8:	e0bff717 	ldw	r2,-36(fp)
81128eec:	e0bff915 	stw	r2,-28(fp)
81128ef0:	e0bff917 	ldw	r2,-28(fp)
81128ef4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
81128ef8:	e0bfff17 	ldw	r2,-4(fp)
81128efc:	00c01244 	movi	r3,73
81128f00:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
81128f04:	e0bffd17 	ldw	r2,-12(fp)
81128f08:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81128f0c:	00002d06 	br	81128fc4 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
81128f10:	000f883a 	mov	r7,zero
81128f14:	01800044 	movi	r6,1
81128f18:	000b883a 	mov	r5,zero
81128f1c:	e13ffd17 	ldw	r4,-12(fp)
81128f20:	11238d00 	call	811238d0 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
81128f24:	e0bffd17 	ldw	r2,-12(fp)
81128f28:	10800283 	ldbu	r2,10(r2)
81128f2c:	10803fcc 	andi	r2,r2,255
81128f30:	103ff71e 	bne	r2,zero,81128f10 <__reset+0xfb108f10>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
81128f34:	e0bffd17 	ldw	r2,-12(fp)
81128f38:	00c00fc4 	movi	r3,63
81128f3c:	10c003c5 	stb	r3,15(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
81128f40:	e0bffd17 	ldw	r2,-12(fp)
81128f44:	10000405 	stb	zero,16(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
81128f48:	e0bffd17 	ldw	r2,-12(fp)
81128f4c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
81128f50:	d0e08717 	ldw	r3,-32228(gp)
81128f54:	e0bffd17 	ldw	r2,-12(fp)
81128f58:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
81128f5c:	e0bffd17 	ldw	r2,-12(fp)
81128f60:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
81128f64:	e0bffd17 	ldw	r2,-12(fp)
81128f68:	d0a08715 	stw	r2,-32228(gp)
81128f6c:	e0bff717 	ldw	r2,-36(fp)
81128f70:	e0bffa15 	stw	r2,-24(fp)
81128f74:	e0bffa17 	ldw	r2,-24(fp)
81128f78:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
81128f7c:	e0bff503 	ldbu	r2,-44(fp)
81128f80:	10800058 	cmpnei	r2,r2,1
81128f84:	1000011e 	bne	r2,zero,81128f8c <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81128f88:	112431c0 	call	8112431c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
81128f8c:	e0bfff17 	ldw	r2,-4(fp)
81128f90:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
81128f94:	e03ff615 	stw	zero,-40(fp)
             break;
81128f98:	00000a06 	br	81128fc4 <OSSemDel+0x228>
81128f9c:	e0bff717 	ldw	r2,-36(fp)
81128fa0:	e0bffb15 	stw	r2,-20(fp)
81128fa4:	e0bffb17 	ldw	r2,-20(fp)
81128fa8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
81128fac:	e0bfff17 	ldw	r2,-4(fp)
81128fb0:	00c001c4 	movi	r3,7
81128fb4:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
81128fb8:	e0bffd17 	ldw	r2,-12(fp)
81128fbc:	e0bff615 	stw	r2,-40(fp)
             break;
81128fc0:	0001883a 	nop
    }
    return (pevent_return);
81128fc4:	e0bff617 	ldw	r2,-40(fp)
}
81128fc8:	e037883a 	mov	sp,fp
81128fcc:	dfc00117 	ldw	ra,4(sp)
81128fd0:	df000017 	ldw	fp,0(sp)
81128fd4:	dec00204 	addi	sp,sp,8
81128fd8:	f800283a 	ret

81128fdc <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
81128fdc:	defff504 	addi	sp,sp,-44
81128fe0:	dfc00a15 	stw	ra,40(sp)
81128fe4:	df000915 	stw	fp,36(sp)
81128fe8:	df000904 	addi	fp,sp,36
81128fec:	e13ffd15 	stw	r4,-12(fp)
81128ff0:	2805883a 	mov	r2,r5
81128ff4:	e1bfff15 	stw	r6,-4(fp)
81128ff8:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81128ffc:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81129000:	e0bfff17 	ldw	r2,-4(fp)
81129004:	10007226 	beq	r2,zero,811291d0 <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
81129008:	e0bffd17 	ldw	r2,-12(fp)
8112900c:	1000041e 	bne	r2,zero,81129020 <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
81129010:	e0bfff17 	ldw	r2,-4(fp)
81129014:	00c00104 	movi	r3,4
81129018:	10c00005 	stb	r3,0(r2)
        return;
8112901c:	00006d06 	br	811291d4 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81129020:	e0bffd17 	ldw	r2,-12(fp)
81129024:	10800003 	ldbu	r2,0(r2)
81129028:	10803fcc 	andi	r2,r2,255
8112902c:	108000e0 	cmpeqi	r2,r2,3
81129030:	1000041e 	bne	r2,zero,81129044 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
81129034:	e0bfff17 	ldw	r2,-4(fp)
81129038:	00c00044 	movi	r3,1
8112903c:	10c00005 	stb	r3,0(r2)
        return;
81129040:	00006406 	br	811291d4 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
81129044:	d0a08803 	ldbu	r2,-32224(gp)
81129048:	10803fcc 	andi	r2,r2,255
8112904c:	10000426 	beq	r2,zero,81129060 <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
81129050:	e0bfff17 	ldw	r2,-4(fp)
81129054:	00c00084 	movi	r3,2
81129058:	10c00005 	stb	r3,0(r2)
        return;
8112905c:	00005d06 	br	811291d4 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
81129060:	d0a07903 	ldbu	r2,-32284(gp)
81129064:	10803fcc 	andi	r2,r2,255
81129068:	10000426 	beq	r2,zero,8112907c <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8112906c:	e0bfff17 	ldw	r2,-4(fp)
81129070:	00c00344 	movi	r3,13
81129074:	10c00005 	stb	r3,0(r2)
        return;
81129078:	00005606 	br	811291d4 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112907c:	0005303a 	rdctl	r2,status
81129080:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129084:	e0fffc17 	ldw	r3,-16(fp)
81129088:	00bfff84 	movi	r2,-2
8112908c:	1884703a 	and	r2,r3,r2
81129090:	1001703a 	wrctl	status,r2
  
  return context;
81129094:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81129098:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8112909c:	e0bffd17 	ldw	r2,-12(fp)
811290a0:	1080020b 	ldhu	r2,8(r2)
811290a4:	10bfffcc 	andi	r2,r2,65535
811290a8:	10000d26 	beq	r2,zero,811290e0 <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
811290ac:	e0bffd17 	ldw	r2,-12(fp)
811290b0:	1080020b 	ldhu	r2,8(r2)
811290b4:	10bfffc4 	addi	r2,r2,-1
811290b8:	1007883a 	mov	r3,r2
811290bc:	e0bffd17 	ldw	r2,-12(fp)
811290c0:	10c0020d 	sth	r3,8(r2)
811290c4:	e0bff717 	ldw	r2,-36(fp)
811290c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811290cc:	e0bff817 	ldw	r2,-32(fp)
811290d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
811290d4:	e0bfff17 	ldw	r2,-4(fp)
811290d8:	10000005 	stb	zero,0(r2)
        return;
811290dc:	00003d06 	br	811291d4 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
811290e0:	d0a08917 	ldw	r2,-32220(gp)
811290e4:	d0e08917 	ldw	r3,-32220(gp)
811290e8:	18c00c03 	ldbu	r3,48(r3)
811290ec:	18c00054 	ori	r3,r3,1
811290f0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
811290f4:	d0a08917 	ldw	r2,-32220(gp)
811290f8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
811290fc:	d0a08917 	ldw	r2,-32220(gp)
81129100:	e0fffe0b 	ldhu	r3,-8(fp)
81129104:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
81129108:	e13ffd17 	ldw	r4,-12(fp)
8112910c:	1123a680 	call	81123a68 <OS_EventTaskWait>
81129110:	e0bff717 	ldw	r2,-36(fp)
81129114:	e0bffb15 	stw	r2,-20(fp)
81129118:	e0bffb17 	ldw	r2,-20(fp)
8112911c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
81129120:	112431c0 	call	8112431c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129124:	0005303a 	rdctl	r2,status
81129128:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112912c:	e0fff917 	ldw	r3,-28(fp)
81129130:	00bfff84 	movi	r2,-2
81129134:	1884703a 	and	r2,r3,r2
81129138:	1001703a 	wrctl	status,r2
  
  return context;
8112913c:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
81129140:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
81129144:	d0a08917 	ldw	r2,-32220(gp)
81129148:	10800c43 	ldbu	r2,49(r2)
8112914c:	10803fcc 	andi	r2,r2,255
81129150:	10000326 	beq	r2,zero,81129160 <OSSemPend+0x184>
81129154:	108000a0 	cmpeqi	r2,r2,2
81129158:	1000041e 	bne	r2,zero,8112916c <OSSemPend+0x190>
8112915c:	00000706 	br	8112917c <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
81129160:	e0bfff17 	ldw	r2,-4(fp)
81129164:	10000005 	stb	zero,0(r2)
             break;
81129168:	00000c06 	br	8112919c <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112916c:	e0bfff17 	ldw	r2,-4(fp)
81129170:	00c00384 	movi	r3,14
81129174:	10c00005 	stb	r3,0(r2)
             break;
81129178:	00000806 	br	8112919c <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8112917c:	d0a08917 	ldw	r2,-32220(gp)
81129180:	e17ffd17 	ldw	r5,-12(fp)
81129184:	1009883a 	mov	r4,r2
81129188:	1123cc80 	call	81123cc8 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112918c:	e0bfff17 	ldw	r2,-4(fp)
81129190:	00c00284 	movi	r3,10
81129194:	10c00005 	stb	r3,0(r2)
             break;
81129198:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112919c:	d0a08917 	ldw	r2,-32220(gp)
811291a0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
811291a4:	d0a08917 	ldw	r2,-32220(gp)
811291a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
811291ac:	d0a08917 	ldw	r2,-32220(gp)
811291b0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
811291b4:	d0a08917 	ldw	r2,-32220(gp)
811291b8:	10000815 	stw	zero,32(r2)
811291bc:	e0bff717 	ldw	r2,-36(fp)
811291c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811291c4:	e0bffa17 	ldw	r2,-24(fp)
811291c8:	1001703a 	wrctl	status,r2
811291cc:	00000106 	br	811291d4 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
811291d0:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
811291d4:	e037883a 	mov	sp,fp
811291d8:	dfc00117 	ldw	ra,4(sp)
811291dc:	df000017 	ldw	fp,0(sp)
811291e0:	dec00204 	addi	sp,sp,8
811291e4:	f800283a 	ret

811291e8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
811291e8:	defff604 	addi	sp,sp,-40
811291ec:	dfc00915 	stw	ra,36(sp)
811291f0:	df000815 	stw	fp,32(sp)
811291f4:	df000804 	addi	fp,sp,32
811291f8:	e13ffd15 	stw	r4,-12(fp)
811291fc:	2805883a 	mov	r2,r5
81129200:	e1bfff15 	stw	r6,-4(fp)
81129204:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81129208:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112920c:	e0bfff17 	ldw	r2,-4(fp)
81129210:	1000021e 	bne	r2,zero,8112921c <OSSemPendAbort+0x34>
        return (0);
81129214:	0005883a 	mov	r2,zero
81129218:	00004906 	br	81129340 <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112921c:	e0bffd17 	ldw	r2,-12(fp)
81129220:	1000051e 	bne	r2,zero,81129238 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
81129224:	e0bfff17 	ldw	r2,-4(fp)
81129228:	00c00104 	movi	r3,4
8112922c:	10c00005 	stb	r3,0(r2)
        return (0);
81129230:	0005883a 	mov	r2,zero
81129234:	00004206 	br	81129340 <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
81129238:	e0bffd17 	ldw	r2,-12(fp)
8112923c:	10800003 	ldbu	r2,0(r2)
81129240:	10803fcc 	andi	r2,r2,255
81129244:	108000e0 	cmpeqi	r2,r2,3
81129248:	1000051e 	bne	r2,zero,81129260 <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
8112924c:	e0bfff17 	ldw	r2,-4(fp)
81129250:	00c00044 	movi	r3,1
81129254:	10c00005 	stb	r3,0(r2)
        return (0);
81129258:	0005883a 	mov	r2,zero
8112925c:	00003806 	br	81129340 <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129260:	0005303a 	rdctl	r2,status
81129264:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129268:	e0fffc17 	ldw	r3,-16(fp)
8112926c:	00bfff84 	movi	r2,-2
81129270:	1884703a 	and	r2,r3,r2
81129274:	1001703a 	wrctl	status,r2
  
  return context;
81129278:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112927c:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
81129280:	e0bffd17 	ldw	r2,-12(fp)
81129284:	10800283 	ldbu	r2,10(r2)
81129288:	10803fcc 	andi	r2,r2,255
8112928c:	10002526 	beq	r2,zero,81129324 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
81129290:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
81129294:	e0bffe03 	ldbu	r2,-8(fp)
81129298:	10800060 	cmpeqi	r2,r2,1
8112929c:	10000e26 	beq	r2,zero,811292d8 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
811292a0:	00000806 	br	811292c4 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
811292a4:	01c00084 	movi	r7,2
811292a8:	01800044 	movi	r6,1
811292ac:	000b883a 	mov	r5,zero
811292b0:	e13ffd17 	ldw	r4,-12(fp)
811292b4:	11238d00 	call	811238d0 <OS_EventTaskRdy>
                     nbr_tasks++;
811292b8:	e0bff803 	ldbu	r2,-32(fp)
811292bc:	10800044 	addi	r2,r2,1
811292c0:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
811292c4:	e0bffd17 	ldw	r2,-12(fp)
811292c8:	10800283 	ldbu	r2,10(r2)
811292cc:	10803fcc 	andi	r2,r2,255
811292d0:	103ff41e 	bne	r2,zero,811292a4 <__reset+0xfb1092a4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
811292d4:	00000906 	br	811292fc <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
811292d8:	01c00084 	movi	r7,2
811292dc:	01800044 	movi	r6,1
811292e0:	000b883a 	mov	r5,zero
811292e4:	e13ffd17 	ldw	r4,-12(fp)
811292e8:	11238d00 	call	811238d0 <OS_EventTaskRdy>
                 nbr_tasks++;
811292ec:	e0bff803 	ldbu	r2,-32(fp)
811292f0:	10800044 	addi	r2,r2,1
811292f4:	e0bff805 	stb	r2,-32(fp)
                 break;
811292f8:	0001883a 	nop
811292fc:	e0bff917 	ldw	r2,-28(fp)
81129300:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129304:	e0bffa17 	ldw	r2,-24(fp)
81129308:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112930c:	112431c0 	call	8112431c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
81129310:	e0bfff17 	ldw	r2,-4(fp)
81129314:	00c00384 	movi	r3,14
81129318:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112931c:	e0bff803 	ldbu	r2,-32(fp)
81129320:	00000706 	br	81129340 <OSSemPendAbort+0x158>
81129324:	e0bff917 	ldw	r2,-28(fp)
81129328:	e0bffb15 	stw	r2,-20(fp)
8112932c:	e0bffb17 	ldw	r2,-20(fp)
81129330:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81129334:	e0bfff17 	ldw	r2,-4(fp)
81129338:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
8112933c:	0005883a 	mov	r2,zero
}
81129340:	e037883a 	mov	sp,fp
81129344:	dfc00117 	ldw	ra,4(sp)
81129348:	df000017 	ldw	fp,0(sp)
8112934c:	dec00204 	addi	sp,sp,8
81129350:	f800283a 	ret

81129354 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
81129354:	defff804 	addi	sp,sp,-32
81129358:	dfc00715 	stw	ra,28(sp)
8112935c:	df000615 	stw	fp,24(sp)
81129360:	df000604 	addi	fp,sp,24
81129364:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81129368:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112936c:	e0bfff17 	ldw	r2,-4(fp)
81129370:	1000021e 	bne	r2,zero,8112937c <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
81129374:	00800104 	movi	r2,4
81129378:	00003506 	br	81129450 <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112937c:	e0bfff17 	ldw	r2,-4(fp)
81129380:	10800003 	ldbu	r2,0(r2)
81129384:	10803fcc 	andi	r2,r2,255
81129388:	108000e0 	cmpeqi	r2,r2,3
8112938c:	1000021e 	bne	r2,zero,81129398 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
81129390:	00800044 	movi	r2,1
81129394:	00002e06 	br	81129450 <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129398:	0005303a 	rdctl	r2,status
8112939c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811293a0:	e0fffe17 	ldw	r3,-8(fp)
811293a4:	00bfff84 	movi	r2,-2
811293a8:	1884703a 	and	r2,r3,r2
811293ac:	1001703a 	wrctl	status,r2
  
  return context;
811293b0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
811293b4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
811293b8:	e0bfff17 	ldw	r2,-4(fp)
811293bc:	10800283 	ldbu	r2,10(r2)
811293c0:	10803fcc 	andi	r2,r2,255
811293c4:	10000c26 	beq	r2,zero,811293f8 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
811293c8:	000f883a 	mov	r7,zero
811293cc:	01800044 	movi	r6,1
811293d0:	000b883a 	mov	r5,zero
811293d4:	e13fff17 	ldw	r4,-4(fp)
811293d8:	11238d00 	call	811238d0 <OS_EventTaskRdy>
811293dc:	e0bffa17 	ldw	r2,-24(fp)
811293e0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811293e4:	e0bffb17 	ldw	r2,-20(fp)
811293e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
811293ec:	112431c0 	call	8112431c <OS_Sched>
        return (OS_ERR_NONE);
811293f0:	0005883a 	mov	r2,zero
811293f4:	00001606 	br	81129450 <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
811293f8:	e0bfff17 	ldw	r2,-4(fp)
811293fc:	1080020b 	ldhu	r2,8(r2)
81129400:	10ffffcc 	andi	r3,r2,65535
81129404:	00bfffd4 	movui	r2,65535
81129408:	18800c26 	beq	r3,r2,8112943c <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
8112940c:	e0bfff17 	ldw	r2,-4(fp)
81129410:	1080020b 	ldhu	r2,8(r2)
81129414:	10800044 	addi	r2,r2,1
81129418:	1007883a 	mov	r3,r2
8112941c:	e0bfff17 	ldw	r2,-4(fp)
81129420:	10c0020d 	sth	r3,8(r2)
81129424:	e0bffa17 	ldw	r2,-24(fp)
81129428:	e0bffc15 	stw	r2,-16(fp)
8112942c:	e0bffc17 	ldw	r2,-16(fp)
81129430:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
81129434:	0005883a 	mov	r2,zero
81129438:	00000506 	br	81129450 <OSSemPost+0xfc>
8112943c:	e0bffa17 	ldw	r2,-24(fp)
81129440:	e0bffd15 	stw	r2,-12(fp)
81129444:	e0bffd17 	ldw	r2,-12(fp)
81129448:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8112944c:	00800c84 	movi	r2,50
}
81129450:	e037883a 	mov	sp,fp
81129454:	dfc00117 	ldw	ra,4(sp)
81129458:	df000017 	ldw	fp,0(sp)
8112945c:	dec00204 	addi	sp,sp,8
81129460:	f800283a 	ret

81129464 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
81129464:	defff704 	addi	sp,sp,-36
81129468:	df000815 	stw	fp,32(sp)
8112946c:	df000804 	addi	fp,sp,32
81129470:	e13ffe15 	stw	r4,-8(fp)
81129474:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
81129478:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112947c:	e0bffe17 	ldw	r2,-8(fp)
81129480:	1000021e 	bne	r2,zero,8112948c <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
81129484:	00800104 	movi	r2,4
81129488:	00003606 	br	81129564 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
8112948c:	e0bfff17 	ldw	r2,-4(fp)
81129490:	1000021e 	bne	r2,zero,8112949c <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
81129494:	00800244 	movi	r2,9
81129498:	00003206 	br	81129564 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112949c:	e0bffe17 	ldw	r2,-8(fp)
811294a0:	10800003 	ldbu	r2,0(r2)
811294a4:	10803fcc 	andi	r2,r2,255
811294a8:	108000e0 	cmpeqi	r2,r2,3
811294ac:	1000021e 	bne	r2,zero,811294b8 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
811294b0:	00800044 	movi	r2,1
811294b4:	00002b06 	br	81129564 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811294b8:	0005303a 	rdctl	r2,status
811294bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811294c0:	e0fffd17 	ldw	r3,-12(fp)
811294c4:	00bfff84 	movi	r2,-2
811294c8:	1884703a 	and	r2,r3,r2
811294cc:	1001703a 	wrctl	status,r2
  
  return context;
811294d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
811294d4:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
811294d8:	e0bffe17 	ldw	r2,-8(fp)
811294dc:	10c00283 	ldbu	r3,10(r2)
811294e0:	e0bfff17 	ldw	r2,-4(fp)
811294e4:	10c00185 	stb	r3,6(r2)
    psrc                   = &pevent->OSEventTbl[0];
811294e8:	e0bffe17 	ldw	r2,-8(fp)
811294ec:	108002c4 	addi	r2,r2,11
811294f0:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
811294f4:	e0bfff17 	ldw	r2,-4(fp)
811294f8:	10800084 	addi	r2,r2,2
811294fc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81129500:	e03ffa05 	stb	zero,-24(fp)
81129504:	00000b06 	br	81129534 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
81129508:	e0bff917 	ldw	r2,-28(fp)
8112950c:	10c00044 	addi	r3,r2,1
81129510:	e0fff915 	stw	r3,-28(fp)
81129514:	e0fff817 	ldw	r3,-32(fp)
81129518:	19000044 	addi	r4,r3,1
8112951c:	e13ff815 	stw	r4,-32(fp)
81129520:	18c00003 	ldbu	r3,0(r3)
81129524:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81129528:	e0bffa03 	ldbu	r2,-24(fp)
8112952c:	10800044 	addi	r2,r2,1
81129530:	e0bffa05 	stb	r2,-24(fp)
81129534:	e0bffa03 	ldbu	r2,-24(fp)
81129538:	10800130 	cmpltui	r2,r2,4
8112953c:	103ff21e 	bne	r2,zero,81129508 <__reset+0xfb109508>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
81129540:	e0bffe17 	ldw	r2,-8(fp)
81129544:	10c0020b 	ldhu	r3,8(r2)
81129548:	e0bfff17 	ldw	r2,-4(fp)
8112954c:	10c0000d 	sth	r3,0(r2)
81129550:	e0bffb17 	ldw	r2,-20(fp)
81129554:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129558:	e0bffc17 	ldw	r2,-16(fp)
8112955c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
81129560:	0005883a 	mov	r2,zero
}
81129564:	e037883a 	mov	sp,fp
81129568:	df000017 	ldw	fp,0(sp)
8112956c:	dec00104 	addi	sp,sp,4
81129570:	f800283a 	ret

81129574 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
81129574:	defff904 	addi	sp,sp,-28
81129578:	df000615 	stw	fp,24(sp)
8112957c:	df000604 	addi	fp,sp,24
81129580:	e13ffd15 	stw	r4,-12(fp)
81129584:	2805883a 	mov	r2,r5
81129588:	e1bfff15 	stw	r6,-4(fp)
8112958c:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
81129590:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
81129594:	e0bfff17 	ldw	r2,-4(fp)
81129598:	10003126 	beq	r2,zero,81129660 <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112959c:	e0bffd17 	ldw	r2,-12(fp)
811295a0:	1000041e 	bne	r2,zero,811295b4 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
811295a4:	e0bfff17 	ldw	r2,-4(fp)
811295a8:	00c00104 	movi	r3,4
811295ac:	10c00005 	stb	r3,0(r2)
        return;
811295b0:	00002c06 	br	81129664 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
811295b4:	e0bffd17 	ldw	r2,-12(fp)
811295b8:	10800003 	ldbu	r2,0(r2)
811295bc:	10803fcc 	andi	r2,r2,255
811295c0:	108000e0 	cmpeqi	r2,r2,3
811295c4:	1000041e 	bne	r2,zero,811295d8 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
811295c8:	e0bfff17 	ldw	r2,-4(fp)
811295cc:	00c00044 	movi	r3,1
811295d0:	10c00005 	stb	r3,0(r2)
        return;
811295d4:	00002306 	br	81129664 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811295d8:	0005303a 	rdctl	r2,status
811295dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811295e0:	e0fffc17 	ldw	r3,-16(fp)
811295e4:	00bfff84 	movi	r2,-2
811295e8:	1884703a 	and	r2,r3,r2
811295ec:	1001703a 	wrctl	status,r2
  
  return context;
811295f0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811295f4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
811295f8:	e0bfff17 	ldw	r2,-4(fp)
811295fc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
81129600:	e0bffd17 	ldw	r2,-12(fp)
81129604:	1080020b 	ldhu	r2,8(r2)
81129608:	10bfffcc 	andi	r2,r2,65535
8112960c:	10000426 	beq	r2,zero,81129620 <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
81129610:	e0bffd17 	ldw	r2,-12(fp)
81129614:	e0fffe0b 	ldhu	r3,-8(fp)
81129618:	10c0020d 	sth	r3,8(r2)
8112961c:	00000b06 	br	8112964c <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
81129620:	e0bffd17 	ldw	r2,-12(fp)
81129624:	10800283 	ldbu	r2,10(r2)
81129628:	10803fcc 	andi	r2,r2,255
8112962c:	1000041e 	bne	r2,zero,81129640 <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
81129630:	e0bffd17 	ldw	r2,-12(fp)
81129634:	e0fffe0b 	ldhu	r3,-8(fp)
81129638:	10c0020d 	sth	r3,8(r2)
8112963c:	00000306 	br	8112964c <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
81129640:	e0bfff17 	ldw	r2,-4(fp)
81129644:	00c01244 	movi	r3,73
81129648:	10c00005 	stb	r3,0(r2)
8112964c:	e0bffa17 	ldw	r2,-24(fp)
81129650:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129654:	e0bffb17 	ldw	r2,-20(fp)
81129658:	1001703a 	wrctl	status,r2
8112965c:	00000106 	br	81129664 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
81129660:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
81129664:	e037883a 	mov	sp,fp
81129668:	df000017 	ldw	fp,0(sp)
8112966c:	dec00104 	addi	sp,sp,4
81129670:	f800283a 	ret

81129674 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
81129674:	defff104 	addi	sp,sp,-60
81129678:	dfc00e15 	stw	ra,56(sp)
8112967c:	df000d15 	stw	fp,52(sp)
81129680:	df000d04 	addi	fp,sp,52
81129684:	2007883a 	mov	r3,r4
81129688:	2805883a 	mov	r2,r5
8112968c:	e0fffe05 	stb	r3,-8(fp)
81129690:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
81129694:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
81129698:	e0bffe03 	ldbu	r2,-8(fp)
8112969c:	108007b0 	cmpltui	r2,r2,30
811296a0:	1000051e 	bne	r2,zero,811296b8 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
811296a4:	e0bffe03 	ldbu	r2,-8(fp)
811296a8:	10803fe0 	cmpeqi	r2,r2,255
811296ac:	1000021e 	bne	r2,zero,811296b8 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
811296b0:	00800a84 	movi	r2,42
811296b4:	00012606 	br	81129b50 <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
811296b8:	e0bfff03 	ldbu	r2,-4(fp)
811296bc:	108007b0 	cmpltui	r2,r2,30
811296c0:	1000021e 	bne	r2,zero,811296cc <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
811296c4:	00800a84 	movi	r2,42
811296c8:	00012106 	br	81129b50 <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811296cc:	0005303a 	rdctl	r2,status
811296d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811296d4:	e0fffd17 	ldw	r3,-12(fp)
811296d8:	00bfff84 	movi	r2,-2
811296dc:	1884703a 	and	r2,r3,r2
811296e0:	1001703a 	wrctl	status,r2
  
  return context;
811296e4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
811296e8:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
811296ec:	e0ffff03 	ldbu	r3,-4(fp)
811296f0:	00a045b4 	movhi	r2,33046
811296f4:	10b75704 	addi	r2,r2,-8868
811296f8:	18c7883a 	add	r3,r3,r3
811296fc:	18c7883a 	add	r3,r3,r3
81129700:	10c5883a 	add	r2,r2,r3
81129704:	10800017 	ldw	r2,0(r2)
81129708:	10000626 	beq	r2,zero,81129724 <OSTaskChangePrio+0xb0>
8112970c:	e0bff517 	ldw	r2,-44(fp)
81129710:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129714:	e0bff617 	ldw	r2,-40(fp)
81129718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
8112971c:	00800a04 	movi	r2,40
81129720:	00010b06 	br	81129b50 <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
81129724:	e0bffe03 	ldbu	r2,-8(fp)
81129728:	10803fd8 	cmpnei	r2,r2,255
8112972c:	1000031e 	bne	r2,zero,8112973c <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
81129730:	d0a08917 	ldw	r2,-32220(gp)
81129734:	10800c83 	ldbu	r2,50(r2)
81129738:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
8112973c:	e0fffe03 	ldbu	r3,-8(fp)
81129740:	00a045b4 	movhi	r2,33046
81129744:	10b75704 	addi	r2,r2,-8868
81129748:	18c7883a 	add	r3,r3,r3
8112974c:	18c7883a 	add	r3,r3,r3
81129750:	10c5883a 	add	r2,r2,r3
81129754:	10800017 	ldw	r2,0(r2)
81129758:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
8112975c:	e0bff817 	ldw	r2,-32(fp)
81129760:	1000061e 	bne	r2,zero,8112977c <OSTaskChangePrio+0x108>
81129764:	e0bff517 	ldw	r2,-44(fp)
81129768:	e0bff715 	stw	r2,-36(fp)
8112976c:	e0bff717 	ldw	r2,-36(fp)
81129770:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
81129774:	00800a44 	movi	r2,41
81129778:	0000f506 	br	81129b50 <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
8112977c:	e0bff817 	ldw	r2,-32(fp)
81129780:	10800058 	cmpnei	r2,r2,1
81129784:	1000061e 	bne	r2,zero,811297a0 <OSTaskChangePrio+0x12c>
81129788:	e0bff517 	ldw	r2,-44(fp)
8112978c:	e0bff915 	stw	r2,-28(fp)
81129790:	e0bff917 	ldw	r2,-28(fp)
81129794:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
81129798:	008010c4 	movi	r2,67
8112979c:	0000ec06 	br	81129b50 <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
811297a0:	e0bfff03 	ldbu	r2,-4(fp)
811297a4:	1004d0fa 	srli	r2,r2,3
811297a8:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
811297ac:	e0bfff03 	ldbu	r2,-4(fp)
811297b0:	108001cc 	andi	r2,r2,7
811297b4:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
811297b8:	e0bffb03 	ldbu	r2,-20(fp)
811297bc:	00c00044 	movi	r3,1
811297c0:	1884983a 	sll	r2,r3,r2
811297c4:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
811297c8:	e0bffb43 	ldbu	r2,-19(fp)
811297cc:	00c00044 	movi	r3,1
811297d0:	1884983a 	sll	r2,r3,r2
811297d4:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
811297d8:	e0fffe03 	ldbu	r3,-8(fp)
811297dc:	00a045b4 	movhi	r2,33046
811297e0:	10b75704 	addi	r2,r2,-8868
811297e4:	18c7883a 	add	r3,r3,r3
811297e8:	18c7883a 	add	r3,r3,r3
811297ec:	10c5883a 	add	r2,r2,r3
811297f0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
811297f4:	e0ffff03 	ldbu	r3,-4(fp)
811297f8:	00a045b4 	movhi	r2,33046
811297fc:	10b75704 	addi	r2,r2,-8868
81129800:	18c7883a 	add	r3,r3,r3
81129804:	18c7883a 	add	r3,r3,r3
81129808:	10c5883a 	add	r2,r2,r3
8112980c:	e0fff817 	ldw	r3,-32(fp)
81129810:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
81129814:	e0bff817 	ldw	r2,-32(fp)
81129818:	10800d03 	ldbu	r2,52(r2)
8112981c:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
81129820:	e0bff817 	ldw	r2,-32(fp)
81129824:	10800d83 	ldbu	r2,54(r2)
81129828:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
8112982c:	e0bff817 	ldw	r2,-32(fp)
81129830:	10800d43 	ldbu	r2,53(r2)
81129834:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
81129838:	e0fffc03 	ldbu	r3,-16(fp)
8112983c:	d0a08544 	addi	r2,gp,-32235
81129840:	1885883a 	add	r2,r3,r2
81129844:	10c00003 	ldbu	r3,0(r2)
81129848:	e0bffc83 	ldbu	r2,-14(fp)
8112984c:	1884703a 	and	r2,r3,r2
81129850:	10803fcc 	andi	r2,r2,255
81129854:	10002826 	beq	r2,zero,811298f8 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
81129858:	e0fffc03 	ldbu	r3,-16(fp)
8112985c:	e13ffc03 	ldbu	r4,-16(fp)
81129860:	d0a08544 	addi	r2,gp,-32235
81129864:	2085883a 	add	r2,r4,r2
81129868:	10800003 	ldbu	r2,0(r2)
8112986c:	1009883a 	mov	r4,r2
81129870:	e0bffc83 	ldbu	r2,-14(fp)
81129874:	0084303a 	nor	r2,zero,r2
81129878:	2084703a 	and	r2,r4,r2
8112987c:	1009883a 	mov	r4,r2
81129880:	d0a08544 	addi	r2,gp,-32235
81129884:	1885883a 	add	r2,r3,r2
81129888:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
8112988c:	e0fffc03 	ldbu	r3,-16(fp)
81129890:	d0a08544 	addi	r2,gp,-32235
81129894:	1885883a 	add	r2,r3,r2
81129898:	10800003 	ldbu	r2,0(r2)
8112989c:	10803fcc 	andi	r2,r2,255
811298a0:	1000061e 	bne	r2,zero,811298bc <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
811298a4:	e0bffc43 	ldbu	r2,-15(fp)
811298a8:	0084303a 	nor	r2,zero,r2
811298ac:	1007883a 	mov	r3,r2
811298b0:	d0a08503 	ldbu	r2,-32236(gp)
811298b4:	1884703a 	and	r2,r3,r2
811298b8:	d0a08505 	stb	r2,-32236(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
811298bc:	d0e08503 	ldbu	r3,-32236(gp)
811298c0:	e0bffb83 	ldbu	r2,-18(fp)
811298c4:	1884b03a 	or	r2,r3,r2
811298c8:	d0a08505 	stb	r2,-32236(gp)
         OSRdyTbl[y_new] |= bitx_new;
811298cc:	e0fffb03 	ldbu	r3,-20(fp)
811298d0:	e13ffb03 	ldbu	r4,-20(fp)
811298d4:	d0a08544 	addi	r2,gp,-32235
811298d8:	2085883a 	add	r2,r4,r2
811298dc:	11000003 	ldbu	r4,0(r2)
811298e0:	e0bffbc3 	ldbu	r2,-17(fp)
811298e4:	2084b03a 	or	r2,r4,r2
811298e8:	1009883a 	mov	r4,r2
811298ec:	d0a08544 	addi	r2,gp,-32235
811298f0:	1885883a 	add	r2,r3,r2
811298f4:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
811298f8:	e0bff817 	ldw	r2,-32(fp)
811298fc:	10800717 	ldw	r2,28(r2)
81129900:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
81129904:	e0bff317 	ldw	r2,-52(fp)
81129908:	10003326 	beq	r2,zero,811299d8 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
8112990c:	e0bffc03 	ldbu	r2,-16(fp)
81129910:	e0fffc03 	ldbu	r3,-16(fp)
81129914:	e13ff317 	ldw	r4,-52(fp)
81129918:	20c7883a 	add	r3,r4,r3
8112991c:	18c002c4 	addi	r3,r3,11
81129920:	18c00003 	ldbu	r3,0(r3)
81129924:	1809883a 	mov	r4,r3
81129928:	e0fffc83 	ldbu	r3,-14(fp)
8112992c:	00c6303a 	nor	r3,zero,r3
81129930:	20c6703a 	and	r3,r4,r3
81129934:	1809883a 	mov	r4,r3
81129938:	e0fff317 	ldw	r3,-52(fp)
8112993c:	1885883a 	add	r2,r3,r2
81129940:	108002c4 	addi	r2,r2,11
81129944:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
81129948:	e0bffc03 	ldbu	r2,-16(fp)
8112994c:	e0fff317 	ldw	r3,-52(fp)
81129950:	1885883a 	add	r2,r3,r2
81129954:	108002c4 	addi	r2,r2,11
81129958:	10800003 	ldbu	r2,0(r2)
8112995c:	10803fcc 	andi	r2,r2,255
81129960:	1000091e 	bne	r2,zero,81129988 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
81129964:	e0bff317 	ldw	r2,-52(fp)
81129968:	10800283 	ldbu	r2,10(r2)
8112996c:	1007883a 	mov	r3,r2
81129970:	e0bffc43 	ldbu	r2,-15(fp)
81129974:	0084303a 	nor	r2,zero,r2
81129978:	1884703a 	and	r2,r3,r2
8112997c:	1007883a 	mov	r3,r2
81129980:	e0bff317 	ldw	r2,-52(fp)
81129984:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
81129988:	e0bff317 	ldw	r2,-52(fp)
8112998c:	10c00283 	ldbu	r3,10(r2)
81129990:	e0bffb83 	ldbu	r2,-18(fp)
81129994:	1884b03a 	or	r2,r3,r2
81129998:	1007883a 	mov	r3,r2
8112999c:	e0bff317 	ldw	r2,-52(fp)
811299a0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
811299a4:	e0bffb03 	ldbu	r2,-20(fp)
811299a8:	e0fffb03 	ldbu	r3,-20(fp)
811299ac:	e13ff317 	ldw	r4,-52(fp)
811299b0:	20c7883a 	add	r3,r4,r3
811299b4:	18c002c4 	addi	r3,r3,11
811299b8:	19000003 	ldbu	r4,0(r3)
811299bc:	e0fffbc3 	ldbu	r3,-17(fp)
811299c0:	20c6b03a 	or	r3,r4,r3
811299c4:	1809883a 	mov	r4,r3
811299c8:	e0fff317 	ldw	r3,-52(fp)
811299cc:	1885883a 	add	r2,r3,r2
811299d0:	108002c4 	addi	r2,r2,11
811299d4:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
811299d8:	e0bff817 	ldw	r2,-32(fp)
811299dc:	10800817 	ldw	r2,32(r2)
811299e0:	10004226 	beq	r2,zero,81129aec <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
811299e4:	e0bff817 	ldw	r2,-32(fp)
811299e8:	10800817 	ldw	r2,32(r2)
811299ec:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
811299f0:	e0bff417 	ldw	r2,-48(fp)
811299f4:	10800017 	ldw	r2,0(r2)
811299f8:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
811299fc:	00003906 	br	81129ae4 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
81129a00:	e0bffc03 	ldbu	r2,-16(fp)
81129a04:	e0fffc03 	ldbu	r3,-16(fp)
81129a08:	e13ff317 	ldw	r4,-52(fp)
81129a0c:	20c7883a 	add	r3,r4,r3
81129a10:	18c002c4 	addi	r3,r3,11
81129a14:	18c00003 	ldbu	r3,0(r3)
81129a18:	1809883a 	mov	r4,r3
81129a1c:	e0fffc83 	ldbu	r3,-14(fp)
81129a20:	00c6303a 	nor	r3,zero,r3
81129a24:	20c6703a 	and	r3,r4,r3
81129a28:	1809883a 	mov	r4,r3
81129a2c:	e0fff317 	ldw	r3,-52(fp)
81129a30:	1885883a 	add	r2,r3,r2
81129a34:	108002c4 	addi	r2,r2,11
81129a38:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
81129a3c:	e0bffc03 	ldbu	r2,-16(fp)
81129a40:	e0fff317 	ldw	r3,-52(fp)
81129a44:	1885883a 	add	r2,r3,r2
81129a48:	108002c4 	addi	r2,r2,11
81129a4c:	10800003 	ldbu	r2,0(r2)
81129a50:	10803fcc 	andi	r2,r2,255
81129a54:	1000091e 	bne	r2,zero,81129a7c <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
81129a58:	e0bff317 	ldw	r2,-52(fp)
81129a5c:	10800283 	ldbu	r2,10(r2)
81129a60:	1007883a 	mov	r3,r2
81129a64:	e0bffc43 	ldbu	r2,-15(fp)
81129a68:	0084303a 	nor	r2,zero,r2
81129a6c:	1884703a 	and	r2,r3,r2
81129a70:	1007883a 	mov	r3,r2
81129a74:	e0bff317 	ldw	r2,-52(fp)
81129a78:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
81129a7c:	e0bff317 	ldw	r2,-52(fp)
81129a80:	10c00283 	ldbu	r3,10(r2)
81129a84:	e0bffb83 	ldbu	r2,-18(fp)
81129a88:	1884b03a 	or	r2,r3,r2
81129a8c:	1007883a 	mov	r3,r2
81129a90:	e0bff317 	ldw	r2,-52(fp)
81129a94:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
81129a98:	e0bffb03 	ldbu	r2,-20(fp)
81129a9c:	e0fffb03 	ldbu	r3,-20(fp)
81129aa0:	e13ff317 	ldw	r4,-52(fp)
81129aa4:	20c7883a 	add	r3,r4,r3
81129aa8:	18c002c4 	addi	r3,r3,11
81129aac:	19000003 	ldbu	r4,0(r3)
81129ab0:	e0fffbc3 	ldbu	r3,-17(fp)
81129ab4:	20c6b03a 	or	r3,r4,r3
81129ab8:	1809883a 	mov	r4,r3
81129abc:	e0fff317 	ldw	r3,-52(fp)
81129ac0:	1885883a 	add	r2,r3,r2
81129ac4:	108002c4 	addi	r2,r2,11
81129ac8:	11000005 	stb	r4,0(r2)
            pevents++;
81129acc:	e0bff417 	ldw	r2,-48(fp)
81129ad0:	10800104 	addi	r2,r2,4
81129ad4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
81129ad8:	e0bff417 	ldw	r2,-48(fp)
81129adc:	10800017 	ldw	r2,0(r2)
81129ae0:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
81129ae4:	e0bff317 	ldw	r2,-52(fp)
81129ae8:	103fc51e 	bne	r2,zero,81129a00 <__reset+0xfb109a00>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
81129aec:	e0bff817 	ldw	r2,-32(fp)
81129af0:	e0ffff03 	ldbu	r3,-4(fp)
81129af4:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
81129af8:	e0bff817 	ldw	r2,-32(fp)
81129afc:	e0fffb03 	ldbu	r3,-20(fp)
81129b00:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
81129b04:	e0bff817 	ldw	r2,-32(fp)
81129b08:	e0fffb43 	ldbu	r3,-19(fp)
81129b0c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
81129b10:	e0bff817 	ldw	r2,-32(fp)
81129b14:	e0fffb83 	ldbu	r3,-18(fp)
81129b18:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
81129b1c:	e0bff817 	ldw	r2,-32(fp)
81129b20:	e0fffbc3 	ldbu	r3,-17(fp)
81129b24:	10c00d45 	stb	r3,53(r2)
81129b28:	e0bff517 	ldw	r2,-44(fp)
81129b2c:	e0bffa15 	stw	r2,-24(fp)
81129b30:	e0bffa17 	ldw	r2,-24(fp)
81129b34:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
81129b38:	d0a07943 	ldbu	r2,-32283(gp)
81129b3c:	10803fcc 	andi	r2,r2,255
81129b40:	10800058 	cmpnei	r2,r2,1
81129b44:	1000011e 	bne	r2,zero,81129b4c <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
81129b48:	112431c0 	call	8112431c <OS_Sched>
    }
    return (OS_ERR_NONE);
81129b4c:	0005883a 	mov	r2,zero
}
81129b50:	e037883a 	mov	sp,fp
81129b54:	dfc00117 	ldw	ra,4(sp)
81129b58:	df000017 	ldw	fp,0(sp)
81129b5c:	dec00204 	addi	sp,sp,8
81129b60:	f800283a 	ret

81129b64 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
81129b64:	deffee04 	addi	sp,sp,-72
81129b68:	dfc01115 	stw	ra,68(sp)
81129b6c:	df001015 	stw	fp,64(sp)
81129b70:	df001004 	addi	fp,sp,64
81129b74:	e13ffc15 	stw	r4,-16(fp)
81129b78:	e17ffd15 	stw	r5,-12(fp)
81129b7c:	e1bffe15 	stw	r6,-8(fp)
81129b80:	3805883a 	mov	r2,r7
81129b84:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81129b88:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81129b8c:	e0bfff03 	ldbu	r2,-4(fp)
81129b90:	108007f0 	cmpltui	r2,r2,31
81129b94:	1000021e 	bne	r2,zero,81129ba0 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
81129b98:	00800a84 	movi	r2,42
81129b9c:	00005706 	br	81129cfc <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129ba0:	0005303a 	rdctl	r2,status
81129ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129ba8:	e0fffb17 	ldw	r3,-20(fp)
81129bac:	00bfff84 	movi	r2,-2
81129bb0:	1884703a 	and	r2,r3,r2
81129bb4:	1001703a 	wrctl	status,r2
  
  return context;
81129bb8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81129bbc:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81129bc0:	d0a08803 	ldbu	r2,-32224(gp)
81129bc4:	10803fcc 	andi	r2,r2,255
81129bc8:	10000626 	beq	r2,zero,81129be4 <OSTaskCreate+0x80>
81129bcc:	e0bff317 	ldw	r2,-52(fp)
81129bd0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129bd4:	e0bff417 	ldw	r2,-48(fp)
81129bd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81129bdc:	00800f04 	movi	r2,60
81129be0:	00004606 	br	81129cfc <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81129be4:	e0ffff03 	ldbu	r3,-4(fp)
81129be8:	00a045b4 	movhi	r2,33046
81129bec:	10b75704 	addi	r2,r2,-8868
81129bf0:	18c7883a 	add	r3,r3,r3
81129bf4:	18c7883a 	add	r3,r3,r3
81129bf8:	10c5883a 	add	r2,r2,r3
81129bfc:	10800017 	ldw	r2,0(r2)
81129c00:	1000391e 	bne	r2,zero,81129ce8 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81129c04:	e0ffff03 	ldbu	r3,-4(fp)
81129c08:	00a045b4 	movhi	r2,33046
81129c0c:	10b75704 	addi	r2,r2,-8868
81129c10:	18c7883a 	add	r3,r3,r3
81129c14:	18c7883a 	add	r3,r3,r3
81129c18:	10c5883a 	add	r2,r2,r3
81129c1c:	00c00044 	movi	r3,1
81129c20:	10c00015 	stw	r3,0(r2)
81129c24:	e0bff317 	ldw	r2,-52(fp)
81129c28:	e0bff515 	stw	r2,-44(fp)
81129c2c:	e0bff517 	ldw	r2,-44(fp)
81129c30:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
81129c34:	000f883a 	mov	r7,zero
81129c38:	e1bffe17 	ldw	r6,-8(fp)
81129c3c:	e17ffd17 	ldw	r5,-12(fp)
81129c40:	e13ffc17 	ldw	r4,-16(fp)
81129c44:	1134bbc0 	call	81134bbc <OSTaskStkInit>
81129c48:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
81129c4c:	e0bfff03 	ldbu	r2,-4(fp)
81129c50:	d8000215 	stw	zero,8(sp)
81129c54:	d8000115 	stw	zero,4(sp)
81129c58:	d8000015 	stw	zero,0(sp)
81129c5c:	000f883a 	mov	r7,zero
81129c60:	000d883a 	mov	r6,zero
81129c64:	e17ff717 	ldw	r5,-36(fp)
81129c68:	1009883a 	mov	r4,r2
81129c6c:	112472c0 	call	8112472c <OS_TCBInit>
81129c70:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
81129c74:	e0bff803 	ldbu	r2,-32(fp)
81129c78:	1000061e 	bne	r2,zero,81129c94 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
81129c7c:	d0a07943 	ldbu	r2,-32283(gp)
81129c80:	10803fcc 	andi	r2,r2,255
81129c84:	10800058 	cmpnei	r2,r2,1
81129c88:	1000151e 	bne	r2,zero,81129ce0 <OSTaskCreate+0x17c>
                OS_Sched();
81129c8c:	112431c0 	call	8112431c <OS_Sched>
81129c90:	00001306 	br	81129ce0 <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129c94:	0005303a 	rdctl	r2,status
81129c98:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129c9c:	e0fffa17 	ldw	r3,-24(fp)
81129ca0:	00bfff84 	movi	r2,-2
81129ca4:	1884703a 	and	r2,r3,r2
81129ca8:	1001703a 	wrctl	status,r2
  
  return context;
81129cac:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81129cb0:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
81129cb4:	e0ffff03 	ldbu	r3,-4(fp)
81129cb8:	00a045b4 	movhi	r2,33046
81129cbc:	10b75704 	addi	r2,r2,-8868
81129cc0:	18c7883a 	add	r3,r3,r3
81129cc4:	18c7883a 	add	r3,r3,r3
81129cc8:	10c5883a 	add	r2,r2,r3
81129ccc:	10000015 	stw	zero,0(r2)
81129cd0:	e0bff317 	ldw	r2,-52(fp)
81129cd4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129cd8:	e0bff617 	ldw	r2,-40(fp)
81129cdc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81129ce0:	e0bff803 	ldbu	r2,-32(fp)
81129ce4:	00000506 	br	81129cfc <OSTaskCreate+0x198>
81129ce8:	e0bff317 	ldw	r2,-52(fp)
81129cec:	e0bff915 	stw	r2,-28(fp)
81129cf0:	e0bff917 	ldw	r2,-28(fp)
81129cf4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81129cf8:	00800a04 	movi	r2,40
}
81129cfc:	e037883a 	mov	sp,fp
81129d00:	dfc00117 	ldw	ra,4(sp)
81129d04:	df000017 	ldw	fp,0(sp)
81129d08:	dec00204 	addi	sp,sp,8
81129d0c:	f800283a 	ret

81129d10 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
81129d10:	deffec04 	addi	sp,sp,-80
81129d14:	dfc01315 	stw	ra,76(sp)
81129d18:	df001215 	stw	fp,72(sp)
81129d1c:	df001204 	addi	fp,sp,72
81129d20:	e13ffa15 	stw	r4,-24(fp)
81129d24:	e17ffb15 	stw	r5,-20(fp)
81129d28:	e1bffc15 	stw	r6,-16(fp)
81129d2c:	3809883a 	mov	r4,r7
81129d30:	e0c00217 	ldw	r3,8(fp)
81129d34:	e0800617 	ldw	r2,24(fp)
81129d38:	e13ffd05 	stb	r4,-12(fp)
81129d3c:	e0fffe0d 	sth	r3,-8(fp)
81129d40:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
81129d44:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
81129d48:	e0bffd03 	ldbu	r2,-12(fp)
81129d4c:	108007f0 	cmpltui	r2,r2,31
81129d50:	1000021e 	bne	r2,zero,81129d5c <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
81129d54:	00800a84 	movi	r2,42
81129d58:	00006106 	br	81129ee0 <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129d5c:	0005303a 	rdctl	r2,status
81129d60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129d64:	e0fff917 	ldw	r3,-28(fp)
81129d68:	00bfff84 	movi	r2,-2
81129d6c:	1884703a 	and	r2,r3,r2
81129d70:	1001703a 	wrctl	status,r2
  
  return context;
81129d74:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
81129d78:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
81129d7c:	d0a08803 	ldbu	r2,-32224(gp)
81129d80:	10803fcc 	andi	r2,r2,255
81129d84:	10000626 	beq	r2,zero,81129da0 <OSTaskCreateExt+0x90>
81129d88:	e0bff117 	ldw	r2,-60(fp)
81129d8c:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129d90:	e0bff217 	ldw	r2,-56(fp)
81129d94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
81129d98:	00800f04 	movi	r2,60
81129d9c:	00005006 	br	81129ee0 <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
81129da0:	e0fffd03 	ldbu	r3,-12(fp)
81129da4:	00a045b4 	movhi	r2,33046
81129da8:	10b75704 	addi	r2,r2,-8868
81129dac:	18c7883a 	add	r3,r3,r3
81129db0:	18c7883a 	add	r3,r3,r3
81129db4:	10c5883a 	add	r2,r2,r3
81129db8:	10800017 	ldw	r2,0(r2)
81129dbc:	1000431e 	bne	r2,zero,81129ecc <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
81129dc0:	e0fffd03 	ldbu	r3,-12(fp)
81129dc4:	00a045b4 	movhi	r2,33046
81129dc8:	10b75704 	addi	r2,r2,-8868
81129dcc:	18c7883a 	add	r3,r3,r3
81129dd0:	18c7883a 	add	r3,r3,r3
81129dd4:	10c5883a 	add	r2,r2,r3
81129dd8:	00c00044 	movi	r3,1
81129ddc:	10c00015 	stw	r3,0(r2)
81129de0:	e0bff117 	ldw	r2,-60(fp)
81129de4:	e0bff315 	stw	r2,-52(fp)
81129de8:	e0bff317 	ldw	r2,-52(fp)
81129dec:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
81129df0:	e0bfff0b 	ldhu	r2,-4(fp)
81129df4:	100d883a 	mov	r6,r2
81129df8:	e1400417 	ldw	r5,16(fp)
81129dfc:	e1000317 	ldw	r4,12(fp)
81129e00:	112ad700 	call	8112ad70 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
81129e04:	e0bfff0b 	ldhu	r2,-4(fp)
81129e08:	100f883a 	mov	r7,r2
81129e0c:	e1bffc17 	ldw	r6,-16(fp)
81129e10:	e17ffb17 	ldw	r5,-20(fp)
81129e14:	e13ffa17 	ldw	r4,-24(fp)
81129e18:	1134bbc0 	call	81134bbc <OSTaskStkInit>
81129e1c:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
81129e20:	e0fffd03 	ldbu	r3,-12(fp)
81129e24:	e13ffe0b 	ldhu	r4,-8(fp)
81129e28:	e0bfff0b 	ldhu	r2,-4(fp)
81129e2c:	d8800215 	stw	r2,8(sp)
81129e30:	e0800517 	ldw	r2,20(fp)
81129e34:	d8800115 	stw	r2,4(sp)
81129e38:	e0800417 	ldw	r2,16(fp)
81129e3c:	d8800015 	stw	r2,0(sp)
81129e40:	200f883a 	mov	r7,r4
81129e44:	e1800317 	ldw	r6,12(fp)
81129e48:	e17ff517 	ldw	r5,-44(fp)
81129e4c:	1809883a 	mov	r4,r3
81129e50:	112472c0 	call	8112472c <OS_TCBInit>
81129e54:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
81129e58:	e0bff603 	ldbu	r2,-40(fp)
81129e5c:	1000061e 	bne	r2,zero,81129e78 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
81129e60:	d0a07943 	ldbu	r2,-32283(gp)
81129e64:	10803fcc 	andi	r2,r2,255
81129e68:	10800058 	cmpnei	r2,r2,1
81129e6c:	1000151e 	bne	r2,zero,81129ec4 <OSTaskCreateExt+0x1b4>
                OS_Sched();
81129e70:	112431c0 	call	8112431c <OS_Sched>
81129e74:	00001306 	br	81129ec4 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129e78:	0005303a 	rdctl	r2,status
81129e7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129e80:	e0fff817 	ldw	r3,-32(fp)
81129e84:	00bfff84 	movi	r2,-2
81129e88:	1884703a 	and	r2,r3,r2
81129e8c:	1001703a 	wrctl	status,r2
  
  return context;
81129e90:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
81129e94:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
81129e98:	e0fffd03 	ldbu	r3,-12(fp)
81129e9c:	00a045b4 	movhi	r2,33046
81129ea0:	10b75704 	addi	r2,r2,-8868
81129ea4:	18c7883a 	add	r3,r3,r3
81129ea8:	18c7883a 	add	r3,r3,r3
81129eac:	10c5883a 	add	r2,r2,r3
81129eb0:	10000015 	stw	zero,0(r2)
81129eb4:	e0bff117 	ldw	r2,-60(fp)
81129eb8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129ebc:	e0bff417 	ldw	r2,-48(fp)
81129ec0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
81129ec4:	e0bff603 	ldbu	r2,-40(fp)
81129ec8:	00000506 	br	81129ee0 <OSTaskCreateExt+0x1d0>
81129ecc:	e0bff117 	ldw	r2,-60(fp)
81129ed0:	e0bff715 	stw	r2,-36(fp)
81129ed4:	e0bff717 	ldw	r2,-36(fp)
81129ed8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
81129edc:	00800a04 	movi	r2,40
}
81129ee0:	e037883a 	mov	sp,fp
81129ee4:	dfc00117 	ldw	ra,4(sp)
81129ee8:	df000017 	ldw	fp,0(sp)
81129eec:	dec00204 	addi	sp,sp,8
81129ef0:	f800283a 	ret

81129ef4 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
81129ef4:	defff404 	addi	sp,sp,-48
81129ef8:	dfc00b15 	stw	ra,44(sp)
81129efc:	df000a15 	stw	fp,40(sp)
81129f00:	df000a04 	addi	fp,sp,40
81129f04:	2005883a 	mov	r2,r4
81129f08:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
81129f0c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
81129f10:	d0a08803 	ldbu	r2,-32224(gp)
81129f14:	10803fcc 	andi	r2,r2,255
81129f18:	10000226 	beq	r2,zero,81129f24 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
81129f1c:	00801004 	movi	r2,64
81129f20:	0000c006 	br	8112a224 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
81129f24:	e0bfff03 	ldbu	r2,-4(fp)
81129f28:	10800798 	cmpnei	r2,r2,30
81129f2c:	1000021e 	bne	r2,zero,81129f38 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
81129f30:	00800f84 	movi	r2,62
81129f34:	0000bb06 	br	8112a224 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
81129f38:	e0bfff03 	ldbu	r2,-4(fp)
81129f3c:	108007b0 	cmpltui	r2,r2,30
81129f40:	1000051e 	bne	r2,zero,81129f58 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
81129f44:	e0bfff03 	ldbu	r2,-4(fp)
81129f48:	10803fe0 	cmpeqi	r2,r2,255
81129f4c:	1000021e 	bne	r2,zero,81129f58 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
81129f50:	00800a84 	movi	r2,42
81129f54:	0000b306 	br	8112a224 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129f58:	0005303a 	rdctl	r2,status
81129f5c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129f60:	e0fffe17 	ldw	r3,-8(fp)
81129f64:	00bfff84 	movi	r2,-2
81129f68:	1884703a 	and	r2,r3,r2
81129f6c:	1001703a 	wrctl	status,r2
  
  return context;
81129f70:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
81129f74:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
81129f78:	e0bfff03 	ldbu	r2,-4(fp)
81129f7c:	10803fd8 	cmpnei	r2,r2,255
81129f80:	1000031e 	bne	r2,zero,81129f90 <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
81129f84:	d0a08917 	ldw	r2,-32220(gp)
81129f88:	10800c83 	ldbu	r2,50(r2)
81129f8c:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
81129f90:	e0ffff03 	ldbu	r3,-4(fp)
81129f94:	00a045b4 	movhi	r2,33046
81129f98:	10b75704 	addi	r2,r2,-8868
81129f9c:	18c7883a 	add	r3,r3,r3
81129fa0:	18c7883a 	add	r3,r3,r3
81129fa4:	10c5883a 	add	r2,r2,r3
81129fa8:	10800017 	ldw	r2,0(r2)
81129fac:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
81129fb0:	e0bff817 	ldw	r2,-32(fp)
81129fb4:	1000061e 	bne	r2,zero,81129fd0 <OSTaskDel+0xdc>
81129fb8:	e0bff617 	ldw	r2,-40(fp)
81129fbc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129fc0:	e0bff717 	ldw	r2,-36(fp)
81129fc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
81129fc8:	008010c4 	movi	r2,67
81129fcc:	00009506 	br	8112a224 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
81129fd0:	e0bff817 	ldw	r2,-32(fp)
81129fd4:	10800058 	cmpnei	r2,r2,1
81129fd8:	1000061e 	bne	r2,zero,81129ff4 <OSTaskDel+0x100>
81129fdc:	e0bff617 	ldw	r2,-40(fp)
81129fe0:	e0bff915 	stw	r2,-28(fp)
81129fe4:	e0bff917 	ldw	r2,-28(fp)
81129fe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
81129fec:	00800f44 	movi	r2,61
81129ff0:	00008c06 	br	8112a224 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
81129ff4:	e0bff817 	ldw	r2,-32(fp)
81129ff8:	10800d03 	ldbu	r2,52(r2)
81129ffc:	10c03fcc 	andi	r3,r2,255
8112a000:	e0bff817 	ldw	r2,-32(fp)
8112a004:	10800d03 	ldbu	r2,52(r2)
8112a008:	11003fcc 	andi	r4,r2,255
8112a00c:	d0a08544 	addi	r2,gp,-32235
8112a010:	2085883a 	add	r2,r4,r2
8112a014:	10800003 	ldbu	r2,0(r2)
8112a018:	1009883a 	mov	r4,r2
8112a01c:	e0bff817 	ldw	r2,-32(fp)
8112a020:	10800d43 	ldbu	r2,53(r2)
8112a024:	0084303a 	nor	r2,zero,r2
8112a028:	2084703a 	and	r2,r4,r2
8112a02c:	1009883a 	mov	r4,r2
8112a030:	d0a08544 	addi	r2,gp,-32235
8112a034:	1885883a 	add	r2,r3,r2
8112a038:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8112a03c:	e0bff817 	ldw	r2,-32(fp)
8112a040:	10800d03 	ldbu	r2,52(r2)
8112a044:	10c03fcc 	andi	r3,r2,255
8112a048:	d0a08544 	addi	r2,gp,-32235
8112a04c:	1885883a 	add	r2,r3,r2
8112a050:	10800003 	ldbu	r2,0(r2)
8112a054:	10803fcc 	andi	r2,r2,255
8112a058:	1000071e 	bne	r2,zero,8112a078 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8112a05c:	e0bff817 	ldw	r2,-32(fp)
8112a060:	10800d83 	ldbu	r2,54(r2)
8112a064:	0084303a 	nor	r2,zero,r2
8112a068:	1007883a 	mov	r3,r2
8112a06c:	d0a08503 	ldbu	r2,-32236(gp)
8112a070:	1884703a 	and	r2,r3,r2
8112a074:	d0a08505 	stb	r2,-32236(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
8112a078:	e0bff817 	ldw	r2,-32(fp)
8112a07c:	10800717 	ldw	r2,28(r2)
8112a080:	10000526 	beq	r2,zero,8112a098 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
8112a084:	e0bff817 	ldw	r2,-32(fp)
8112a088:	10800717 	ldw	r2,28(r2)
8112a08c:	100b883a 	mov	r5,r2
8112a090:	e13ff817 	ldw	r4,-32(fp)
8112a094:	1123cc80 	call	81123cc8 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8112a098:	e0bff817 	ldw	r2,-32(fp)
8112a09c:	10800817 	ldw	r2,32(r2)
8112a0a0:	10000526 	beq	r2,zero,8112a0b8 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112a0a4:	e0bff817 	ldw	r2,-32(fp)
8112a0a8:	10800817 	ldw	r2,32(r2)
8112a0ac:	100b883a 	mov	r5,r2
8112a0b0:	e13ff817 	ldw	r4,-32(fp)
8112a0b4:	1123d800 	call	81123d80 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8112a0b8:	e0bff817 	ldw	r2,-32(fp)
8112a0bc:	10800a17 	ldw	r2,40(r2)
8112a0c0:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
8112a0c4:	e0bffb17 	ldw	r2,-20(fp)
8112a0c8:	10000226 	beq	r2,zero,8112a0d4 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
8112a0cc:	e13ffb17 	ldw	r4,-20(fp)
8112a0d0:	11262000 	call	81126200 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
8112a0d4:	e0bff817 	ldw	r2,-32(fp)
8112a0d8:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
8112a0dc:	e0bff817 	ldw	r2,-32(fp)
8112a0e0:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112a0e4:	e0bff817 	ldw	r2,-32(fp)
8112a0e8:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
8112a0ec:	d0a07903 	ldbu	r2,-32284(gp)
8112a0f0:	10803fcc 	andi	r2,r2,255
8112a0f4:	10803fe0 	cmpeqi	r2,r2,255
8112a0f8:	1000031e 	bne	r2,zero,8112a108 <OSTaskDel+0x214>
        OSLockNesting++;
8112a0fc:	d0a07903 	ldbu	r2,-32284(gp)
8112a100:	10800044 	addi	r2,r2,1
8112a104:	d0a07905 	stb	r2,-32284(gp)
8112a108:	e0bff617 	ldw	r2,-40(fp)
8112a10c:	e0bffd15 	stw	r2,-12(fp)
8112a110:	e0bffd17 	ldw	r2,-12(fp)
8112a114:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8112a118:	11238b00 	call	811238b0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a11c:	0005303a 	rdctl	r2,status
8112a120:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a124:	e0fffa17 	ldw	r3,-24(fp)
8112a128:	00bfff84 	movi	r2,-2
8112a12c:	1884703a 	and	r2,r3,r2
8112a130:	1001703a 	wrctl	status,r2
  
  return context;
8112a134:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
8112a138:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8112a13c:	d0a07903 	ldbu	r2,-32284(gp)
8112a140:	10803fcc 	andi	r2,r2,255
8112a144:	10000326 	beq	r2,zero,8112a154 <OSTaskDel+0x260>
        OSLockNesting--;
8112a148:	d0a07903 	ldbu	r2,-32284(gp)
8112a14c:	10bfffc4 	addi	r2,r2,-1
8112a150:	d0a07905 	stb	r2,-32284(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
8112a154:	e13ff817 	ldw	r4,-32(fp)
8112a158:	1134d3c0 	call	81134d3c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8112a15c:	d0a08143 	ldbu	r2,-32251(gp)
8112a160:	10bfffc4 	addi	r2,r2,-1
8112a164:	d0a08145 	stb	r2,-32251(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
8112a168:	e0ffff03 	ldbu	r3,-4(fp)
8112a16c:	00a045b4 	movhi	r2,33046
8112a170:	10b75704 	addi	r2,r2,-8868
8112a174:	18c7883a 	add	r3,r3,r3
8112a178:	18c7883a 	add	r3,r3,r3
8112a17c:	10c5883a 	add	r2,r2,r3
8112a180:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
8112a184:	e0bff817 	ldw	r2,-32(fp)
8112a188:	10800617 	ldw	r2,24(r2)
8112a18c:	1000071e 	bne	r2,zero,8112a1ac <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
8112a190:	e0bff817 	ldw	r2,-32(fp)
8112a194:	10800517 	ldw	r2,20(r2)
8112a198:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
8112a19c:	e0bff817 	ldw	r2,-32(fp)
8112a1a0:	10800517 	ldw	r2,20(r2)
8112a1a4:	d0a07c15 	stw	r2,-32272(gp)
8112a1a8:	00000a06 	br	8112a1d4 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
8112a1ac:	e0bff817 	ldw	r2,-32(fp)
8112a1b0:	10800617 	ldw	r2,24(r2)
8112a1b4:	e0fff817 	ldw	r3,-32(fp)
8112a1b8:	18c00517 	ldw	r3,20(r3)
8112a1bc:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
8112a1c0:	e0bff817 	ldw	r2,-32(fp)
8112a1c4:	10800517 	ldw	r2,20(r2)
8112a1c8:	e0fff817 	ldw	r3,-32(fp)
8112a1cc:	18c00617 	ldw	r3,24(r3)
8112a1d0:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
8112a1d4:	d0e08017 	ldw	r3,-32256(gp)
8112a1d8:	e0bff817 	ldw	r2,-32(fp)
8112a1dc:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
8112a1e0:	e0bff817 	ldw	r2,-32(fp)
8112a1e4:	d0a08015 	stw	r2,-32256(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
8112a1e8:	e0bff817 	ldw	r2,-32(fp)
8112a1ec:	00c00fc4 	movi	r3,63
8112a1f0:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112a1f4:	e0bff817 	ldw	r2,-32(fp)
8112a1f8:	10001345 	stb	zero,77(r2)
8112a1fc:	e0bff617 	ldw	r2,-40(fp)
8112a200:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a204:	e0bffc17 	ldw	r2,-16(fp)
8112a208:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112a20c:	d0a07943 	ldbu	r2,-32283(gp)
8112a210:	10803fcc 	andi	r2,r2,255
8112a214:	10800058 	cmpnei	r2,r2,1
8112a218:	1000011e 	bne	r2,zero,8112a220 <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
8112a21c:	112431c0 	call	8112431c <OS_Sched>
    }
    return (OS_ERR_NONE);
8112a220:	0005883a 	mov	r2,zero
}
8112a224:	e037883a 	mov	sp,fp
8112a228:	dfc00117 	ldw	ra,4(sp)
8112a22c:	df000017 	ldw	fp,0(sp)
8112a230:	dec00204 	addi	sp,sp,8
8112a234:	f800283a 	ret

8112a238 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
8112a238:	defff504 	addi	sp,sp,-44
8112a23c:	df000a15 	stw	fp,40(sp)
8112a240:	df000a04 	addi	fp,sp,40
8112a244:	2005883a 	mov	r2,r4
8112a248:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a24c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
8112a250:	e0bfff03 	ldbu	r2,-4(fp)
8112a254:	10800798 	cmpnei	r2,r2,30
8112a258:	1000021e 	bne	r2,zero,8112a264 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
8112a25c:	00800f84 	movi	r2,62
8112a260:	00004506 	br	8112a378 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112a264:	e0bfff03 	ldbu	r2,-4(fp)
8112a268:	108007b0 	cmpltui	r2,r2,30
8112a26c:	1000051e 	bne	r2,zero,8112a284 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
8112a270:	e0bfff03 	ldbu	r2,-4(fp)
8112a274:	10803fe0 	cmpeqi	r2,r2,255
8112a278:	1000021e 	bne	r2,zero,8112a284 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
8112a27c:	00800a84 	movi	r2,42
8112a280:	00003d06 	br	8112a378 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8112a284:	e0bfff03 	ldbu	r2,-4(fp)
8112a288:	10803fd8 	cmpnei	r2,r2,255
8112a28c:	1000111e 	bne	r2,zero,8112a2d4 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a290:	0005303a 	rdctl	r2,status
8112a294:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a298:	e0fff917 	ldw	r3,-28(fp)
8112a29c:	00bfff84 	movi	r2,-2
8112a2a0:	1884703a 	and	r2,r3,r2
8112a2a4:	1001703a 	wrctl	status,r2
  
  return context;
8112a2a8:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
8112a2ac:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
8112a2b0:	d0a08917 	ldw	r2,-32220(gp)
8112a2b4:	10800dc3 	ldbu	r2,55(r2)
8112a2b8:	e0bff805 	stb	r2,-32(fp)
8112a2bc:	e0bff617 	ldw	r2,-40(fp)
8112a2c0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a2c4:	e0bffe17 	ldw	r2,-8(fp)
8112a2c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
8112a2cc:	e0bff803 	ldbu	r2,-32(fp)
8112a2d0:	00002906 	br	8112a378 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a2d4:	0005303a 	rdctl	r2,status
8112a2d8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a2dc:	e0fff717 	ldw	r3,-36(fp)
8112a2e0:	00bfff84 	movi	r2,-2
8112a2e4:	1884703a 	and	r2,r3,r2
8112a2e8:	1001703a 	wrctl	status,r2
  
  return context;
8112a2ec:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
8112a2f0:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112a2f4:	e0ffff03 	ldbu	r3,-4(fp)
8112a2f8:	00a045b4 	movhi	r2,33046
8112a2fc:	10b75704 	addi	r2,r2,-8868
8112a300:	18c7883a 	add	r3,r3,r3
8112a304:	18c7883a 	add	r3,r3,r3
8112a308:	10c5883a 	add	r2,r2,r3
8112a30c:	10800017 	ldw	r2,0(r2)
8112a310:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
8112a314:	e0bffb17 	ldw	r2,-20(fp)
8112a318:	1000061e 	bne	r2,zero,8112a334 <OSTaskDelReq+0xfc>
8112a31c:	e0bff617 	ldw	r2,-40(fp)
8112a320:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a324:	e0bffa17 	ldw	r2,-24(fp)
8112a328:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
8112a32c:	008010c4 	movi	r2,67
8112a330:	00001106 	br	8112a378 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
8112a334:	e0bffb17 	ldw	r2,-20(fp)
8112a338:	10800058 	cmpnei	r2,r2,1
8112a33c:	1000061e 	bne	r2,zero,8112a358 <OSTaskDelReq+0x120>
8112a340:	e0bff617 	ldw	r2,-40(fp)
8112a344:	e0bffc15 	stw	r2,-16(fp)
8112a348:	e0bffc17 	ldw	r2,-16(fp)
8112a34c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112a350:	00800f44 	movi	r2,61
8112a354:	00000806 	br	8112a378 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
8112a358:	e0bffb17 	ldw	r2,-20(fp)
8112a35c:	00c00fc4 	movi	r3,63
8112a360:	10c00dc5 	stb	r3,55(r2)
8112a364:	e0bff617 	ldw	r2,-40(fp)
8112a368:	e0bffd15 	stw	r2,-12(fp)
8112a36c:	e0bffd17 	ldw	r2,-12(fp)
8112a370:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112a374:	0005883a 	mov	r2,zero
}
8112a378:	e037883a 	mov	sp,fp
8112a37c:	df000017 	ldw	fp,0(sp)
8112a380:	dec00104 	addi	sp,sp,4
8112a384:	f800283a 	ret

8112a388 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112a388:	defff404 	addi	sp,sp,-48
8112a38c:	dfc00b15 	stw	ra,44(sp)
8112a390:	df000a15 	stw	fp,40(sp)
8112a394:	df000a04 	addi	fp,sp,40
8112a398:	2005883a 	mov	r2,r4
8112a39c:	e17ffe15 	stw	r5,-8(fp)
8112a3a0:	e1bfff15 	stw	r6,-4(fp)
8112a3a4:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
8112a3a8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
8112a3ac:	e0bfff17 	ldw	r2,-4(fp)
8112a3b0:	1000021e 	bne	r2,zero,8112a3bc <OSTaskNameGet+0x34>
        return (0);
8112a3b4:	0005883a 	mov	r2,zero
8112a3b8:	00005406 	br	8112a50c <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
8112a3bc:	e0bffd03 	ldbu	r2,-12(fp)
8112a3c0:	108007f0 	cmpltui	r2,r2,31
8112a3c4:	1000081e 	bne	r2,zero,8112a3e8 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
8112a3c8:	e0bffd03 	ldbu	r2,-12(fp)
8112a3cc:	10803fe0 	cmpeqi	r2,r2,255
8112a3d0:	1000051e 	bne	r2,zero,8112a3e8 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
8112a3d4:	e0bfff17 	ldw	r2,-4(fp)
8112a3d8:	00c00a84 	movi	r3,42
8112a3dc:	10c00005 	stb	r3,0(r2)
            return (0);
8112a3e0:	0005883a 	mov	r2,zero
8112a3e4:	00004906 	br	8112a50c <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
8112a3e8:	e0bffe17 	ldw	r2,-8(fp)
8112a3ec:	1000051e 	bne	r2,zero,8112a404 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
8112a3f0:	e0bfff17 	ldw	r2,-4(fp)
8112a3f4:	00c00304 	movi	r3,12
8112a3f8:	10c00005 	stb	r3,0(r2)
        return (0);
8112a3fc:	0005883a 	mov	r2,zero
8112a400:	00004206 	br	8112a50c <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
8112a404:	d0a08803 	ldbu	r2,-32224(gp)
8112a408:	10803fcc 	andi	r2,r2,255
8112a40c:	10000526 	beq	r2,zero,8112a424 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
8112a410:	e0bfff17 	ldw	r2,-4(fp)
8112a414:	00c00444 	movi	r3,17
8112a418:	10c00005 	stb	r3,0(r2)
        return (0);
8112a41c:	0005883a 	mov	r2,zero
8112a420:	00003a06 	br	8112a50c <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a424:	0005303a 	rdctl	r2,status
8112a428:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a42c:	e0fffc17 	ldw	r3,-16(fp)
8112a430:	00bfff84 	movi	r2,-2
8112a434:	1884703a 	and	r2,r3,r2
8112a438:	1001703a 	wrctl	status,r2
  
  return context;
8112a43c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112a440:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
8112a444:	e0bffd03 	ldbu	r2,-12(fp)
8112a448:	10803fd8 	cmpnei	r2,r2,255
8112a44c:	1000031e 	bne	r2,zero,8112a45c <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
8112a450:	d0a08917 	ldw	r2,-32220(gp)
8112a454:	10800c83 	ldbu	r2,50(r2)
8112a458:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112a45c:	e0fffd03 	ldbu	r3,-12(fp)
8112a460:	00a045b4 	movhi	r2,33046
8112a464:	10b75704 	addi	r2,r2,-8868
8112a468:	18c7883a 	add	r3,r3,r3
8112a46c:	18c7883a 	add	r3,r3,r3
8112a470:	10c5883a 	add	r2,r2,r3
8112a474:	10800017 	ldw	r2,0(r2)
8112a478:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
8112a47c:	e0bff817 	ldw	r2,-32(fp)
8112a480:	1000091e 	bne	r2,zero,8112a4a8 <OSTaskNameGet+0x120>
8112a484:	e0bff617 	ldw	r2,-40(fp)
8112a488:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a48c:	e0bff717 	ldw	r2,-36(fp)
8112a490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112a494:	e0bfff17 	ldw	r2,-4(fp)
8112a498:	00c010c4 	movi	r3,67
8112a49c:	10c00005 	stb	r3,0(r2)
        return (0);
8112a4a0:	0005883a 	mov	r2,zero
8112a4a4:	00001906 	br	8112a50c <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
8112a4a8:	e0bff817 	ldw	r2,-32(fp)
8112a4ac:	10800058 	cmpnei	r2,r2,1
8112a4b0:	1000091e 	bne	r2,zero,8112a4d8 <OSTaskNameGet+0x150>
8112a4b4:	e0bff617 	ldw	r2,-40(fp)
8112a4b8:	e0bff915 	stw	r2,-28(fp)
8112a4bc:	e0bff917 	ldw	r2,-28(fp)
8112a4c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112a4c4:	e0bfff17 	ldw	r2,-4(fp)
8112a4c8:	00c010c4 	movi	r3,67
8112a4cc:	10c00005 	stb	r3,0(r2)
        return (0);
8112a4d0:	0005883a 	mov	r2,zero
8112a4d4:	00000d06 	br	8112a50c <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
8112a4d8:	e0bff817 	ldw	r2,-32(fp)
8112a4dc:	10801304 	addi	r2,r2,76
8112a4e0:	100b883a 	mov	r5,r2
8112a4e4:	e13ffe17 	ldw	r4,-8(fp)
8112a4e8:	11244600 	call	81124460 <OS_StrCopy>
8112a4ec:	e0bffb05 	stb	r2,-20(fp)
8112a4f0:	e0bff617 	ldw	r2,-40(fp)
8112a4f4:	e0bffa15 	stw	r2,-24(fp)
8112a4f8:	e0bffa17 	ldw	r2,-24(fp)
8112a4fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112a500:	e0bfff17 	ldw	r2,-4(fp)
8112a504:	10000005 	stb	zero,0(r2)
    return (len);
8112a508:	e0bffb03 	ldbu	r2,-20(fp)
}
8112a50c:	e037883a 	mov	sp,fp
8112a510:	dfc00117 	ldw	ra,4(sp)
8112a514:	df000017 	ldw	fp,0(sp)
8112a518:	dec00204 	addi	sp,sp,8
8112a51c:	f800283a 	ret

8112a520 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112a520:	defff304 	addi	sp,sp,-52
8112a524:	dfc00c15 	stw	ra,48(sp)
8112a528:	df000b15 	stw	fp,44(sp)
8112a52c:	df000b04 	addi	fp,sp,44
8112a530:	2005883a 	mov	r2,r4
8112a534:	e17ffe15 	stw	r5,-8(fp)
8112a538:	e1bfff15 	stw	r6,-4(fp)
8112a53c:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112a540:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112a544:	e0bfff17 	ldw	r2,-4(fp)
8112a548:	10005c26 	beq	r2,zero,8112a6bc <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
8112a54c:	e0bffd03 	ldbu	r2,-12(fp)
8112a550:	108007f0 	cmpltui	r2,r2,31
8112a554:	1000071e 	bne	r2,zero,8112a574 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
8112a558:	e0bffd03 	ldbu	r2,-12(fp)
8112a55c:	10803fe0 	cmpeqi	r2,r2,255
8112a560:	1000041e 	bne	r2,zero,8112a574 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
8112a564:	e0bfff17 	ldw	r2,-4(fp)
8112a568:	00c00a84 	movi	r3,42
8112a56c:	10c00005 	stb	r3,0(r2)
            return;
8112a570:	00005306 	br	8112a6c0 <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
8112a574:	e0bffe17 	ldw	r2,-8(fp)
8112a578:	1000041e 	bne	r2,zero,8112a58c <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
8112a57c:	e0bfff17 	ldw	r2,-4(fp)
8112a580:	00c00304 	movi	r3,12
8112a584:	10c00005 	stb	r3,0(r2)
        return;
8112a588:	00004d06 	br	8112a6c0 <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
8112a58c:	d0a08803 	ldbu	r2,-32224(gp)
8112a590:	10803fcc 	andi	r2,r2,255
8112a594:	10000426 	beq	r2,zero,8112a5a8 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
8112a598:	e0bfff17 	ldw	r2,-4(fp)
8112a59c:	00c00484 	movi	r3,18
8112a5a0:	10c00005 	stb	r3,0(r2)
        return;
8112a5a4:	00004606 	br	8112a6c0 <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a5a8:	0005303a 	rdctl	r2,status
8112a5ac:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a5b0:	e0fffc17 	ldw	r3,-16(fp)
8112a5b4:	00bfff84 	movi	r2,-2
8112a5b8:	1884703a 	and	r2,r3,r2
8112a5bc:	1001703a 	wrctl	status,r2
  
  return context;
8112a5c0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112a5c4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
8112a5c8:	e0bffd03 	ldbu	r2,-12(fp)
8112a5cc:	10803fd8 	cmpnei	r2,r2,255
8112a5d0:	1000031e 	bne	r2,zero,8112a5e0 <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
8112a5d4:	d0a08917 	ldw	r2,-32220(gp)
8112a5d8:	10800c83 	ldbu	r2,50(r2)
8112a5dc:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112a5e0:	e0fffd03 	ldbu	r3,-12(fp)
8112a5e4:	00a045b4 	movhi	r2,33046
8112a5e8:	10b75704 	addi	r2,r2,-8868
8112a5ec:	18c7883a 	add	r3,r3,r3
8112a5f0:	18c7883a 	add	r3,r3,r3
8112a5f4:	10c5883a 	add	r2,r2,r3
8112a5f8:	10800017 	ldw	r2,0(r2)
8112a5fc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
8112a600:	e0bff717 	ldw	r2,-36(fp)
8112a604:	1000081e 	bne	r2,zero,8112a628 <OSTaskNameSet+0x108>
8112a608:	e0bff517 	ldw	r2,-44(fp)
8112a60c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a610:	e0bff617 	ldw	r2,-40(fp)
8112a614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112a618:	e0bfff17 	ldw	r2,-4(fp)
8112a61c:	00c010c4 	movi	r3,67
8112a620:	10c00005 	stb	r3,0(r2)
        return;
8112a624:	00002606 	br	8112a6c0 <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
8112a628:	e0bff717 	ldw	r2,-36(fp)
8112a62c:	10800058 	cmpnei	r2,r2,1
8112a630:	1000081e 	bne	r2,zero,8112a654 <OSTaskNameSet+0x134>
8112a634:	e0bff517 	ldw	r2,-44(fp)
8112a638:	e0bff815 	stw	r2,-32(fp)
8112a63c:	e0bff817 	ldw	r2,-32(fp)
8112a640:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112a644:	e0bfff17 	ldw	r2,-4(fp)
8112a648:	00c010c4 	movi	r3,67
8112a64c:	10c00005 	stb	r3,0(r2)
        return;
8112a650:	00001b06 	br	8112a6c0 <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
8112a654:	e13ffe17 	ldw	r4,-8(fp)
8112a658:	11244d40 	call	811244d4 <OS_StrLen>
8112a65c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
8112a660:	e0bffa03 	ldbu	r2,-24(fp)
8112a664:	10800830 	cmpltui	r2,r2,32
8112a668:	1000081e 	bne	r2,zero,8112a68c <OSTaskNameSet+0x16c>
8112a66c:	e0bff517 	ldw	r2,-44(fp)
8112a670:	e0bff915 	stw	r2,-28(fp)
8112a674:	e0bff917 	ldw	r2,-28(fp)
8112a678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
8112a67c:	e0bfff17 	ldw	r2,-4(fp)
8112a680:	00c01044 	movi	r3,65
8112a684:	10c00005 	stb	r3,0(r2)
        return;
8112a688:	00000d06 	br	8112a6c0 <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
8112a68c:	e0bff717 	ldw	r2,-36(fp)
8112a690:	10801304 	addi	r2,r2,76
8112a694:	e17ffe17 	ldw	r5,-8(fp)
8112a698:	1009883a 	mov	r4,r2
8112a69c:	11244600 	call	81124460 <OS_StrCopy>
8112a6a0:	e0bff517 	ldw	r2,-44(fp)
8112a6a4:	e0bffb15 	stw	r2,-20(fp)
8112a6a8:	e0bffb17 	ldw	r2,-20(fp)
8112a6ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112a6b0:	e0bfff17 	ldw	r2,-4(fp)
8112a6b4:	10000005 	stb	zero,0(r2)
8112a6b8:	00000106 	br	8112a6c0 <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
8112a6bc:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112a6c0:	e037883a 	mov	sp,fp
8112a6c4:	dfc00117 	ldw	ra,4(sp)
8112a6c8:	df000017 	ldw	fp,0(sp)
8112a6cc:	dec00204 	addi	sp,sp,8
8112a6d0:	f800283a 	ret

8112a6d4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
8112a6d4:	defff404 	addi	sp,sp,-48
8112a6d8:	dfc00b15 	stw	ra,44(sp)
8112a6dc:	df000a15 	stw	fp,40(sp)
8112a6e0:	df000a04 	addi	fp,sp,40
8112a6e4:	2005883a 	mov	r2,r4
8112a6e8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112a6ec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
8112a6f0:	e0bfff03 	ldbu	r2,-4(fp)
8112a6f4:	108007b0 	cmpltui	r2,r2,30
8112a6f8:	1000021e 	bne	r2,zero,8112a704 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
8112a6fc:	00800a84 	movi	r2,42
8112a700:	00006406 	br	8112a894 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a704:	0005303a 	rdctl	r2,status
8112a708:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a70c:	e0fffe17 	ldw	r3,-8(fp)
8112a710:	00bfff84 	movi	r2,-2
8112a714:	1884703a 	and	r2,r3,r2
8112a718:	1001703a 	wrctl	status,r2
  
  return context;
8112a71c:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112a720:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112a724:	e0ffff03 	ldbu	r3,-4(fp)
8112a728:	00a045b4 	movhi	r2,33046
8112a72c:	10b75704 	addi	r2,r2,-8868
8112a730:	18c7883a 	add	r3,r3,r3
8112a734:	18c7883a 	add	r3,r3,r3
8112a738:	10c5883a 	add	r2,r2,r3
8112a73c:	10800017 	ldw	r2,0(r2)
8112a740:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
8112a744:	e0bff817 	ldw	r2,-32(fp)
8112a748:	1000061e 	bne	r2,zero,8112a764 <OSTaskResume+0x90>
8112a74c:	e0bff617 	ldw	r2,-40(fp)
8112a750:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a754:	e0bff717 	ldw	r2,-36(fp)
8112a758:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
8112a75c:	00801184 	movi	r2,70
8112a760:	00004c06 	br	8112a894 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
8112a764:	e0bff817 	ldw	r2,-32(fp)
8112a768:	10800058 	cmpnei	r2,r2,1
8112a76c:	1000061e 	bne	r2,zero,8112a788 <OSTaskResume+0xb4>
8112a770:	e0bff617 	ldw	r2,-40(fp)
8112a774:	e0bff915 	stw	r2,-28(fp)
8112a778:	e0bff917 	ldw	r2,-28(fp)
8112a77c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112a780:	008010c4 	movi	r2,67
8112a784:	00004306 	br	8112a894 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
8112a788:	e0bff817 	ldw	r2,-32(fp)
8112a78c:	10800c03 	ldbu	r2,48(r2)
8112a790:	10803fcc 	andi	r2,r2,255
8112a794:	1080020c 	andi	r2,r2,8
8112a798:	10003926 	beq	r2,zero,8112a880 <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
8112a79c:	e0bff817 	ldw	r2,-32(fp)
8112a7a0:	10c00c03 	ldbu	r3,48(r2)
8112a7a4:	00bffdc4 	movi	r2,-9
8112a7a8:	1884703a 	and	r2,r3,r2
8112a7ac:	1007883a 	mov	r3,r2
8112a7b0:	e0bff817 	ldw	r2,-32(fp)
8112a7b4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
8112a7b8:	e0bff817 	ldw	r2,-32(fp)
8112a7bc:	10800c03 	ldbu	r2,48(r2)
8112a7c0:	10803fcc 	andi	r2,r2,255
8112a7c4:	1000281e 	bne	r2,zero,8112a868 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
8112a7c8:	e0bff817 	ldw	r2,-32(fp)
8112a7cc:	10800b8b 	ldhu	r2,46(r2)
8112a7d0:	10bfffcc 	andi	r2,r2,65535
8112a7d4:	10001f1e 	bne	r2,zero,8112a854 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
8112a7d8:	e0bff817 	ldw	r2,-32(fp)
8112a7dc:	10c00d83 	ldbu	r3,54(r2)
8112a7e0:	d0a08503 	ldbu	r2,-32236(gp)
8112a7e4:	1884b03a 	or	r2,r3,r2
8112a7e8:	d0a08505 	stb	r2,-32236(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112a7ec:	e0bff817 	ldw	r2,-32(fp)
8112a7f0:	10800d03 	ldbu	r2,52(r2)
8112a7f4:	10c03fcc 	andi	r3,r2,255
8112a7f8:	e0bff817 	ldw	r2,-32(fp)
8112a7fc:	10800d03 	ldbu	r2,52(r2)
8112a800:	11003fcc 	andi	r4,r2,255
8112a804:	d0a08544 	addi	r2,gp,-32235
8112a808:	2085883a 	add	r2,r4,r2
8112a80c:	11000003 	ldbu	r4,0(r2)
8112a810:	e0bff817 	ldw	r2,-32(fp)
8112a814:	10800d43 	ldbu	r2,53(r2)
8112a818:	2084b03a 	or	r2,r4,r2
8112a81c:	1009883a 	mov	r4,r2
8112a820:	d0a08544 	addi	r2,gp,-32235
8112a824:	1885883a 	add	r2,r3,r2
8112a828:	11000005 	stb	r4,0(r2)
8112a82c:	e0bff617 	ldw	r2,-40(fp)
8112a830:	e0bffa15 	stw	r2,-24(fp)
8112a834:	e0bffa17 	ldw	r2,-24(fp)
8112a838:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
8112a83c:	d0a07943 	ldbu	r2,-32283(gp)
8112a840:	10803fcc 	andi	r2,r2,255
8112a844:	10800058 	cmpnei	r2,r2,1
8112a848:	10000b1e 	bne	r2,zero,8112a878 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
8112a84c:	112431c0 	call	8112431c <OS_Sched>
8112a850:	00000906 	br	8112a878 <OSTaskResume+0x1a4>
8112a854:	e0bff617 	ldw	r2,-40(fp)
8112a858:	e0bffb15 	stw	r2,-20(fp)
8112a85c:	e0bffb17 	ldw	r2,-20(fp)
8112a860:	1001703a 	wrctl	status,r2
8112a864:	00000406 	br	8112a878 <OSTaskResume+0x1a4>
8112a868:	e0bff617 	ldw	r2,-40(fp)
8112a86c:	e0bffc15 	stw	r2,-16(fp)
8112a870:	e0bffc17 	ldw	r2,-16(fp)
8112a874:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8112a878:	0005883a 	mov	r2,zero
8112a87c:	00000506 	br	8112a894 <OSTaskResume+0x1c0>
8112a880:	e0bff617 	ldw	r2,-40(fp)
8112a884:	e0bffd15 	stw	r2,-12(fp)
8112a888:	e0bffd17 	ldw	r2,-12(fp)
8112a88c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
8112a890:	00801104 	movi	r2,68
}
8112a894:	e037883a 	mov	sp,fp
8112a898:	dfc00117 	ldw	ra,4(sp)
8112a89c:	df000017 	ldw	fp,0(sp)
8112a8a0:	dec00204 	addi	sp,sp,8
8112a8a4:	f800283a 	ret

8112a8a8 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
8112a8a8:	defff304 	addi	sp,sp,-52
8112a8ac:	df000c15 	stw	fp,48(sp)
8112a8b0:	df000c04 	addi	fp,sp,48
8112a8b4:	2005883a 	mov	r2,r4
8112a8b8:	e17fff15 	stw	r5,-4(fp)
8112a8bc:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112a8c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
8112a8c4:	e0bffe03 	ldbu	r2,-8(fp)
8112a8c8:	108007f0 	cmpltui	r2,r2,31
8112a8cc:	1000051e 	bne	r2,zero,8112a8e4 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
8112a8d0:	e0bffe03 	ldbu	r2,-8(fp)
8112a8d4:	10803fe0 	cmpeqi	r2,r2,255
8112a8d8:	1000021e 	bne	r2,zero,8112a8e4 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
8112a8dc:	00800a84 	movi	r2,42
8112a8e0:	00005d06 	br	8112aa58 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
8112a8e4:	e0bfff17 	ldw	r2,-4(fp)
8112a8e8:	1000021e 	bne	r2,zero,8112a8f4 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
8112a8ec:	00800244 	movi	r2,9
8112a8f0:	00005906 	br	8112aa58 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
8112a8f4:	e0bfff17 	ldw	r2,-4(fp)
8112a8f8:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
8112a8fc:	e0bfff17 	ldw	r2,-4(fp)
8112a900:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a904:	0005303a 	rdctl	r2,status
8112a908:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a90c:	e0fffd17 	ldw	r3,-12(fp)
8112a910:	00bfff84 	movi	r2,-2
8112a914:	1884703a 	and	r2,r3,r2
8112a918:	1001703a 	wrctl	status,r2
  
  return context;
8112a91c:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
8112a920:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
8112a924:	e0bffe03 	ldbu	r2,-8(fp)
8112a928:	10803fd8 	cmpnei	r2,r2,255
8112a92c:	1000031e 	bne	r2,zero,8112a93c <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
8112a930:	d0a08917 	ldw	r2,-32220(gp)
8112a934:	10800c83 	ldbu	r2,50(r2)
8112a938:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112a93c:	e0fffe03 	ldbu	r3,-8(fp)
8112a940:	00a045b4 	movhi	r2,33046
8112a944:	10b75704 	addi	r2,r2,-8868
8112a948:	18c7883a 	add	r3,r3,r3
8112a94c:	18c7883a 	add	r3,r3,r3
8112a950:	10c5883a 	add	r2,r2,r3
8112a954:	10800017 	ldw	r2,0(r2)
8112a958:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
8112a95c:	e0bff817 	ldw	r2,-32(fp)
8112a960:	1000061e 	bne	r2,zero,8112a97c <OSTaskStkChk+0xd4>
8112a964:	e0bff617 	ldw	r2,-40(fp)
8112a968:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a96c:	e0bff717 	ldw	r2,-36(fp)
8112a970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112a974:	008010c4 	movi	r2,67
8112a978:	00003706 	br	8112aa58 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112a97c:	e0bff817 	ldw	r2,-32(fp)
8112a980:	10800058 	cmpnei	r2,r2,1
8112a984:	1000061e 	bne	r2,zero,8112a9a0 <OSTaskStkChk+0xf8>
8112a988:	e0bff617 	ldw	r2,-40(fp)
8112a98c:	e0bff915 	stw	r2,-28(fp)
8112a990:	e0bff917 	ldw	r2,-28(fp)
8112a994:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112a998:	008010c4 	movi	r2,67
8112a99c:	00002e06 	br	8112aa58 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
8112a9a0:	e0bff817 	ldw	r2,-32(fp)
8112a9a4:	1080040b 	ldhu	r2,16(r2)
8112a9a8:	10bfffcc 	andi	r2,r2,65535
8112a9ac:	1080004c 	andi	r2,r2,1
8112a9b0:	1000061e 	bne	r2,zero,8112a9cc <OSTaskStkChk+0x124>
8112a9b4:	e0bff617 	ldw	r2,-40(fp)
8112a9b8:	e0bffa15 	stw	r2,-24(fp)
8112a9bc:	e0bffa17 	ldw	r2,-24(fp)
8112a9c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
8112a9c4:	00801144 	movi	r2,69
8112a9c8:	00002306 	br	8112aa58 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
8112a9cc:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
8112a9d0:	e0bff817 	ldw	r2,-32(fp)
8112a9d4:	10800317 	ldw	r2,12(r2)
8112a9d8:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
8112a9dc:	e0bff817 	ldw	r2,-32(fp)
8112a9e0:	10800217 	ldw	r2,8(r2)
8112a9e4:	e0bff415 	stw	r2,-48(fp)
8112a9e8:	e0bff617 	ldw	r2,-40(fp)
8112a9ec:	e0bffb15 	stw	r2,-20(fp)
8112a9f0:	e0bffb17 	ldw	r2,-20(fp)
8112a9f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112a9f8:	00000306 	br	8112aa08 <OSTaskStkChk+0x160>
        nfree++;
8112a9fc:	e0bff517 	ldw	r2,-44(fp)
8112aa00:	10800044 	addi	r2,r2,1
8112aa04:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112aa08:	e0bff417 	ldw	r2,-48(fp)
8112aa0c:	10c00104 	addi	r3,r2,4
8112aa10:	e0fff415 	stw	r3,-48(fp)
8112aa14:	10800017 	ldw	r2,0(r2)
8112aa18:	103ff826 	beq	r2,zero,8112a9fc <__reset+0xfb10a9fc>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
8112aa1c:	e0bff517 	ldw	r2,-44(fp)
8112aa20:	1085883a 	add	r2,r2,r2
8112aa24:	1085883a 	add	r2,r2,r2
8112aa28:	1007883a 	mov	r3,r2
8112aa2c:	e0bfff17 	ldw	r2,-4(fp)
8112aa30:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
8112aa34:	e0fffc17 	ldw	r3,-16(fp)
8112aa38:	e0bff517 	ldw	r2,-44(fp)
8112aa3c:	1885c83a 	sub	r2,r3,r2
8112aa40:	1085883a 	add	r2,r2,r2
8112aa44:	1085883a 	add	r2,r2,r2
8112aa48:	1007883a 	mov	r3,r2
8112aa4c:	e0bfff17 	ldw	r2,-4(fp)
8112aa50:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
8112aa54:	0005883a 	mov	r2,zero
}
8112aa58:	e037883a 	mov	sp,fp
8112aa5c:	df000017 	ldw	fp,0(sp)
8112aa60:	dec00104 	addi	sp,sp,4
8112aa64:	f800283a 	ret

8112aa68 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
8112aa68:	defff504 	addi	sp,sp,-44
8112aa6c:	dfc00a15 	stw	ra,40(sp)
8112aa70:	df000915 	stw	fp,36(sp)
8112aa74:	df000904 	addi	fp,sp,36
8112aa78:	2005883a 	mov	r2,r4
8112aa7c:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112aa80:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
8112aa84:	e0bfff03 	ldbu	r2,-4(fp)
8112aa88:	10800798 	cmpnei	r2,r2,30
8112aa8c:	1000021e 	bne	r2,zero,8112aa98 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
8112aa90:	008011c4 	movi	r2,71
8112aa94:	00006806 	br	8112ac38 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112aa98:	e0bfff03 	ldbu	r2,-4(fp)
8112aa9c:	108007b0 	cmpltui	r2,r2,30
8112aaa0:	1000051e 	bne	r2,zero,8112aab8 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
8112aaa4:	e0bfff03 	ldbu	r2,-4(fp)
8112aaa8:	10803fe0 	cmpeqi	r2,r2,255
8112aaac:	1000021e 	bne	r2,zero,8112aab8 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
8112aab0:	00800a84 	movi	r2,42
8112aab4:	00006006 	br	8112ac38 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112aab8:	0005303a 	rdctl	r2,status
8112aabc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112aac0:	e0fffe17 	ldw	r3,-8(fp)
8112aac4:	00bfff84 	movi	r2,-2
8112aac8:	1884703a 	and	r2,r3,r2
8112aacc:	1001703a 	wrctl	status,r2
  
  return context;
8112aad0:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
8112aad4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
8112aad8:	e0bfff03 	ldbu	r2,-4(fp)
8112aadc:	10803fd8 	cmpnei	r2,r2,255
8112aae0:	1000061e 	bne	r2,zero,8112aafc <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
8112aae4:	d0a08917 	ldw	r2,-32220(gp)
8112aae8:	10800c83 	ldbu	r2,50(r2)
8112aaec:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
8112aaf0:	00800044 	movi	r2,1
8112aaf4:	e0bff705 	stb	r2,-36(fp)
8112aaf8:	00000906 	br	8112ab20 <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
8112aafc:	d0a08917 	ldw	r2,-32220(gp)
8112ab00:	10800c83 	ldbu	r2,50(r2)
8112ab04:	10c03fcc 	andi	r3,r2,255
8112ab08:	e0bfff03 	ldbu	r2,-4(fp)
8112ab0c:	1880031e 	bne	r3,r2,8112ab1c <OSTaskSuspend+0xb4>
        self = OS_TRUE;
8112ab10:	00800044 	movi	r2,1
8112ab14:	e0bff705 	stb	r2,-36(fp)
8112ab18:	00000106 	br	8112ab20 <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
8112ab1c:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112ab20:	e0ffff03 	ldbu	r3,-4(fp)
8112ab24:	00a045b4 	movhi	r2,33046
8112ab28:	10b75704 	addi	r2,r2,-8868
8112ab2c:	18c7883a 	add	r3,r3,r3
8112ab30:	18c7883a 	add	r3,r3,r3
8112ab34:	10c5883a 	add	r2,r2,r3
8112ab38:	10800017 	ldw	r2,0(r2)
8112ab3c:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
8112ab40:	e0bffa17 	ldw	r2,-24(fp)
8112ab44:	1000061e 	bne	r2,zero,8112ab60 <OSTaskSuspend+0xf8>
8112ab48:	e0bff817 	ldw	r2,-32(fp)
8112ab4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ab50:	e0bff917 	ldw	r2,-28(fp)
8112ab54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
8112ab58:	00801204 	movi	r2,72
8112ab5c:	00003606 	br	8112ac38 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
8112ab60:	e0bffa17 	ldw	r2,-24(fp)
8112ab64:	10800058 	cmpnei	r2,r2,1
8112ab68:	1000061e 	bne	r2,zero,8112ab84 <OSTaskSuspend+0x11c>
8112ab6c:	e0bff817 	ldw	r2,-32(fp)
8112ab70:	e0bffb15 	stw	r2,-20(fp)
8112ab74:	e0bffb17 	ldw	r2,-20(fp)
8112ab78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112ab7c:	008010c4 	movi	r2,67
8112ab80:	00002d06 	br	8112ac38 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
8112ab84:	e0bffa17 	ldw	r2,-24(fp)
8112ab88:	10800d03 	ldbu	r2,52(r2)
8112ab8c:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
8112ab90:	e0fffd03 	ldbu	r3,-12(fp)
8112ab94:	e13ffd03 	ldbu	r4,-12(fp)
8112ab98:	d0a08544 	addi	r2,gp,-32235
8112ab9c:	2085883a 	add	r2,r4,r2
8112aba0:	10800003 	ldbu	r2,0(r2)
8112aba4:	1009883a 	mov	r4,r2
8112aba8:	e0bffa17 	ldw	r2,-24(fp)
8112abac:	10800d43 	ldbu	r2,53(r2)
8112abb0:	0084303a 	nor	r2,zero,r2
8112abb4:	2084703a 	and	r2,r4,r2
8112abb8:	1009883a 	mov	r4,r2
8112abbc:	d0a08544 	addi	r2,gp,-32235
8112abc0:	1885883a 	add	r2,r3,r2
8112abc4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112abc8:	e0fffd03 	ldbu	r3,-12(fp)
8112abcc:	d0a08544 	addi	r2,gp,-32235
8112abd0:	1885883a 	add	r2,r3,r2
8112abd4:	10800003 	ldbu	r2,0(r2)
8112abd8:	10803fcc 	andi	r2,r2,255
8112abdc:	1000071e 	bne	r2,zero,8112abfc <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112abe0:	e0bffa17 	ldw	r2,-24(fp)
8112abe4:	10800d83 	ldbu	r2,54(r2)
8112abe8:	0084303a 	nor	r2,zero,r2
8112abec:	1007883a 	mov	r3,r2
8112abf0:	d0a08503 	ldbu	r2,-32236(gp)
8112abf4:	1884703a 	and	r2,r3,r2
8112abf8:	d0a08505 	stb	r2,-32236(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
8112abfc:	e0bffa17 	ldw	r2,-24(fp)
8112ac00:	10800c03 	ldbu	r2,48(r2)
8112ac04:	10800214 	ori	r2,r2,8
8112ac08:	1007883a 	mov	r3,r2
8112ac0c:	e0bffa17 	ldw	r2,-24(fp)
8112ac10:	10c00c05 	stb	r3,48(r2)
8112ac14:	e0bff817 	ldw	r2,-32(fp)
8112ac18:	e0bffc15 	stw	r2,-16(fp)
8112ac1c:	e0bffc17 	ldw	r2,-16(fp)
8112ac20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
8112ac24:	e0bff703 	ldbu	r2,-36(fp)
8112ac28:	10800058 	cmpnei	r2,r2,1
8112ac2c:	1000011e 	bne	r2,zero,8112ac34 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
8112ac30:	112431c0 	call	8112431c <OS_Sched>
    }
    return (OS_ERR_NONE);
8112ac34:	0005883a 	mov	r2,zero
}
8112ac38:	e037883a 	mov	sp,fp
8112ac3c:	dfc00117 	ldw	ra,4(sp)
8112ac40:	df000017 	ldw	fp,0(sp)
8112ac44:	dec00204 	addi	sp,sp,8
8112ac48:	f800283a 	ret

8112ac4c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
8112ac4c:	defff604 	addi	sp,sp,-40
8112ac50:	dfc00915 	stw	ra,36(sp)
8112ac54:	df000815 	stw	fp,32(sp)
8112ac58:	df000804 	addi	fp,sp,32
8112ac5c:	2005883a 	mov	r2,r4
8112ac60:	e17fff15 	stw	r5,-4(fp)
8112ac64:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ac68:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
8112ac6c:	e0bffe03 	ldbu	r2,-8(fp)
8112ac70:	108007f0 	cmpltui	r2,r2,31
8112ac74:	1000051e 	bne	r2,zero,8112ac8c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
8112ac78:	e0bffe03 	ldbu	r2,-8(fp)
8112ac7c:	10803fe0 	cmpeqi	r2,r2,255
8112ac80:	1000021e 	bne	r2,zero,8112ac8c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
8112ac84:	00800a84 	movi	r2,42
8112ac88:	00003406 	br	8112ad5c <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
8112ac8c:	e0bfff17 	ldw	r2,-4(fp)
8112ac90:	1000021e 	bne	r2,zero,8112ac9c <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
8112ac94:	00800244 	movi	r2,9
8112ac98:	00003006 	br	8112ad5c <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ac9c:	0005303a 	rdctl	r2,status
8112aca0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112aca4:	e0fffd17 	ldw	r3,-12(fp)
8112aca8:	00bfff84 	movi	r2,-2
8112acac:	1884703a 	and	r2,r3,r2
8112acb0:	1001703a 	wrctl	status,r2
  
  return context;
8112acb4:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112acb8:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
8112acbc:	e0bffe03 	ldbu	r2,-8(fp)
8112acc0:	10803fd8 	cmpnei	r2,r2,255
8112acc4:	1000031e 	bne	r2,zero,8112acd4 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
8112acc8:	d0a08917 	ldw	r2,-32220(gp)
8112accc:	10800c83 	ldbu	r2,50(r2)
8112acd0:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112acd4:	e0fffe03 	ldbu	r3,-8(fp)
8112acd8:	00a045b4 	movhi	r2,33046
8112acdc:	10b75704 	addi	r2,r2,-8868
8112ace0:	18c7883a 	add	r3,r3,r3
8112ace4:	18c7883a 	add	r3,r3,r3
8112ace8:	10c5883a 	add	r2,r2,r3
8112acec:	10800017 	ldw	r2,0(r2)
8112acf0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
8112acf4:	e0bffa17 	ldw	r2,-24(fp)
8112acf8:	1000061e 	bne	r2,zero,8112ad14 <OSTaskQuery+0xc8>
8112acfc:	e0bff817 	ldw	r2,-32(fp)
8112ad00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ad04:	e0bff917 	ldw	r2,-28(fp)
8112ad08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
8112ad0c:	00800a44 	movi	r2,41
8112ad10:	00001206 	br	8112ad5c <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
8112ad14:	e0bffa17 	ldw	r2,-24(fp)
8112ad18:	10800058 	cmpnei	r2,r2,1
8112ad1c:	1000061e 	bne	r2,zero,8112ad38 <OSTaskQuery+0xec>
8112ad20:	e0bff817 	ldw	r2,-32(fp)
8112ad24:	e0bffb15 	stw	r2,-20(fp)
8112ad28:	e0bffb17 	ldw	r2,-20(fp)
8112ad2c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112ad30:	008010c4 	movi	r2,67
8112ad34:	00000906 	br	8112ad5c <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
8112ad38:	01801b04 	movi	r6,108
8112ad3c:	e17ffa17 	ldw	r5,-24(fp)
8112ad40:	e13fff17 	ldw	r4,-4(fp)
8112ad44:	11242b40 	call	811242b4 <OS_MemCopy>
8112ad48:	e0bff817 	ldw	r2,-32(fp)
8112ad4c:	e0bffc15 	stw	r2,-16(fp)
8112ad50:	e0bffc17 	ldw	r2,-16(fp)
8112ad54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112ad58:	0005883a 	mov	r2,zero
}
8112ad5c:	e037883a 	mov	sp,fp
8112ad60:	dfc00117 	ldw	ra,4(sp)
8112ad64:	df000017 	ldw	fp,0(sp)
8112ad68:	dec00204 	addi	sp,sp,8
8112ad6c:	f800283a 	ret

8112ad70 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
8112ad70:	defffc04 	addi	sp,sp,-16
8112ad74:	df000315 	stw	fp,12(sp)
8112ad78:	df000304 	addi	fp,sp,12
8112ad7c:	e13ffd15 	stw	r4,-12(fp)
8112ad80:	e17ffe15 	stw	r5,-8(fp)
8112ad84:	3005883a 	mov	r2,r6
8112ad88:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
8112ad8c:	e0bfff0b 	ldhu	r2,-4(fp)
8112ad90:	1080004c 	andi	r2,r2,1
8112ad94:	10000d26 	beq	r2,zero,8112adcc <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
8112ad98:	e0bfff0b 	ldhu	r2,-4(fp)
8112ad9c:	1080008c 	andi	r2,r2,2
8112ada0:	10000a26 	beq	r2,zero,8112adcc <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112ada4:	00000706 	br	8112adc4 <OS_TaskStkClr+0x54>
                size--;
8112ada8:	e0bffe17 	ldw	r2,-8(fp)
8112adac:	10bfffc4 	addi	r2,r2,-1
8112adb0:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
8112adb4:	e0bffd17 	ldw	r2,-12(fp)
8112adb8:	10c00104 	addi	r3,r2,4
8112adbc:	e0fffd15 	stw	r3,-12(fp)
8112adc0:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112adc4:	e0bffe17 	ldw	r2,-8(fp)
8112adc8:	103ff71e 	bne	r2,zero,8112ada8 <__reset+0xfb10ada8>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
8112adcc:	0001883a 	nop
8112add0:	e037883a 	mov	sp,fp
8112add4:	df000017 	ldw	fp,0(sp)
8112add8:	dec00104 	addi	sp,sp,4
8112addc:	f800283a 	ret

8112ade0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
8112ade0:	defff904 	addi	sp,sp,-28
8112ade4:	dfc00615 	stw	ra,24(sp)
8112ade8:	df000515 	stw	fp,20(sp)
8112adec:	df000504 	addi	fp,sp,20
8112adf0:	2005883a 	mov	r2,r4
8112adf4:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112adf8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112adfc:	d0a08803 	ldbu	r2,-32224(gp)
8112ae00:	10803fcc 	andi	r2,r2,255
8112ae04:	1000311e 	bne	r2,zero,8112aecc <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
8112ae08:	e0bfff0b 	ldhu	r2,-4(fp)
8112ae0c:	10003026 	beq	r2,zero,8112aed0 <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ae10:	0005303a 	rdctl	r2,status
8112ae14:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ae18:	e0fffe17 	ldw	r3,-8(fp)
8112ae1c:	00bfff84 	movi	r2,-2
8112ae20:	1884703a 	and	r2,r3,r2
8112ae24:	1001703a 	wrctl	status,r2
  
  return context;
8112ae28:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
8112ae2c:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
8112ae30:	d0a08917 	ldw	r2,-32220(gp)
8112ae34:	10800d03 	ldbu	r2,52(r2)
8112ae38:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112ae3c:	e0fffd03 	ldbu	r3,-12(fp)
8112ae40:	e13ffd03 	ldbu	r4,-12(fp)
8112ae44:	d0a08544 	addi	r2,gp,-32235
8112ae48:	2085883a 	add	r2,r4,r2
8112ae4c:	10800003 	ldbu	r2,0(r2)
8112ae50:	1009883a 	mov	r4,r2
8112ae54:	d0a08917 	ldw	r2,-32220(gp)
8112ae58:	10800d43 	ldbu	r2,53(r2)
8112ae5c:	0084303a 	nor	r2,zero,r2
8112ae60:	2084703a 	and	r2,r4,r2
8112ae64:	1009883a 	mov	r4,r2
8112ae68:	d0a08544 	addi	r2,gp,-32235
8112ae6c:	1885883a 	add	r2,r3,r2
8112ae70:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
8112ae74:	e0fffd03 	ldbu	r3,-12(fp)
8112ae78:	d0a08544 	addi	r2,gp,-32235
8112ae7c:	1885883a 	add	r2,r3,r2
8112ae80:	10800003 	ldbu	r2,0(r2)
8112ae84:	10803fcc 	andi	r2,r2,255
8112ae88:	1000071e 	bne	r2,zero,8112aea8 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112ae8c:	d0a08917 	ldw	r2,-32220(gp)
8112ae90:	10800d83 	ldbu	r2,54(r2)
8112ae94:	0084303a 	nor	r2,zero,r2
8112ae98:	1007883a 	mov	r3,r2
8112ae9c:	d0a08503 	ldbu	r2,-32236(gp)
8112aea0:	1884703a 	and	r2,r3,r2
8112aea4:	d0a08505 	stb	r2,-32236(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
8112aea8:	d0a08917 	ldw	r2,-32220(gp)
8112aeac:	e0ffff0b 	ldhu	r3,-4(fp)
8112aeb0:	10c00b8d 	sth	r3,46(r2)
8112aeb4:	e0bffb17 	ldw	r2,-20(fp)
8112aeb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112aebc:	e0bffc17 	ldw	r2,-16(fp)
8112aec0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
8112aec4:	112431c0 	call	8112431c <OS_Sched>
8112aec8:	00000106 	br	8112aed0 <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
8112aecc:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
8112aed0:	e037883a 	mov	sp,fp
8112aed4:	dfc00117 	ldw	ra,4(sp)
8112aed8:	df000017 	ldw	fp,0(sp)
8112aedc:	dec00204 	addi	sp,sp,8
8112aee0:	f800283a 	ret

8112aee4 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
8112aee4:	defff804 	addi	sp,sp,-32
8112aee8:	dfc00715 	stw	ra,28(sp)
8112aeec:	df000615 	stw	fp,24(sp)
8112aef0:	df000604 	addi	fp,sp,24
8112aef4:	2015883a 	mov	r10,r4
8112aef8:	2809883a 	mov	r4,r5
8112aefc:	3007883a 	mov	r3,r6
8112af00:	3805883a 	mov	r2,r7
8112af04:	e2bffc05 	stb	r10,-16(fp)
8112af08:	e13ffd05 	stb	r4,-12(fp)
8112af0c:	e0fffe05 	stb	r3,-8(fp)
8112af10:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112af14:	d0a08803 	ldbu	r2,-32224(gp)
8112af18:	10803fcc 	andi	r2,r2,255
8112af1c:	10000226 	beq	r2,zero,8112af28 <OSTimeDlyHMSM+0x44>
        return (OS_ERR_TIME_DLY_ISR);
8112af20:	00801544 	movi	r2,85
8112af24:	00004106 	br	8112b02c <OSTimeDlyHMSM+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
8112af28:	e0bffc03 	ldbu	r2,-16(fp)
8112af2c:	1000081e 	bne	r2,zero,8112af50 <OSTimeDlyHMSM+0x6c>
        if (minutes == 0) {
8112af30:	e0bffd03 	ldbu	r2,-12(fp)
8112af34:	1000061e 	bne	r2,zero,8112af50 <OSTimeDlyHMSM+0x6c>
            if (seconds == 0) {
8112af38:	e0bffe03 	ldbu	r2,-8(fp)
8112af3c:	1000041e 	bne	r2,zero,8112af50 <OSTimeDlyHMSM+0x6c>
                if (ms == 0) {
8112af40:	e0bfff0b 	ldhu	r2,-4(fp)
8112af44:	1000021e 	bne	r2,zero,8112af50 <OSTimeDlyHMSM+0x6c>
                    return (OS_ERR_TIME_ZERO_DLY);
8112af48:	00801504 	movi	r2,84
8112af4c:	00003706 	br	8112b02c <OSTimeDlyHMSM+0x148>
                }
            }
        }
    }
    if (minutes > 59) {
8112af50:	e0bffd03 	ldbu	r2,-12(fp)
8112af54:	10800f30 	cmpltui	r2,r2,60
8112af58:	1000021e 	bne	r2,zero,8112af64 <OSTimeDlyHMSM+0x80>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
8112af5c:	00801444 	movi	r2,81
8112af60:	00003206 	br	8112b02c <OSTimeDlyHMSM+0x148>
    }
    if (seconds > 59) {
8112af64:	e0bffe03 	ldbu	r2,-8(fp)
8112af68:	10800f30 	cmpltui	r2,r2,60
8112af6c:	1000021e 	bne	r2,zero,8112af78 <OSTimeDlyHMSM+0x94>
        return (OS_ERR_TIME_INVALID_SECONDS);
8112af70:	00801484 	movi	r2,82
8112af74:	00002d06 	br	8112b02c <OSTimeDlyHMSM+0x148>
    }
    if (ms > 999) {
8112af78:	e0bfff0b 	ldhu	r2,-4(fp)
8112af7c:	1080fa30 	cmpltui	r2,r2,1000
8112af80:	1000021e 	bne	r2,zero,8112af8c <OSTimeDlyHMSM+0xa8>
        return (OS_ERR_TIME_INVALID_MS);
8112af84:	008014c4 	movi	r2,83
8112af88:	00002806 	br	8112b02c <OSTimeDlyHMSM+0x148>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112af8c:	e0bffc03 	ldbu	r2,-16(fp)
8112af90:	10c38424 	muli	r3,r2,3600
8112af94:	e0bffd03 	ldbu	r2,-12(fp)
8112af98:	10800f24 	muli	r2,r2,60
8112af9c:	1887883a 	add	r3,r3,r2
8112afa0:	e0bffe03 	ldbu	r2,-8(fp)
8112afa4:	1885883a 	add	r2,r3,r2
8112afa8:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
8112afac:	e0bfff0b 	ldhu	r2,-4(fp)
8112afb0:	10c0fa24 	muli	r3,r2,1000
8112afb4:	008418b4 	movhi	r2,4194
8112afb8:	109374c4 	addi	r2,r2,19923
8112afbc:	188a383a 	mulxuu	r5,r3,r2
8112afc0:	1885383a 	mul	r2,r3,r2
8112afc4:	1011883a 	mov	r8,r2
8112afc8:	2813883a 	mov	r9,r5
8112afcc:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112afd0:	2085883a 	add	r2,r4,r2
8112afd4:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
8112afd8:	e0bffb17 	ldw	r2,-20(fp)
8112afdc:	1004d43a 	srli	r2,r2,16
8112afe0:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
8112afe4:	e0bffb17 	ldw	r2,-20(fp)
8112afe8:	10bfffcc 	andi	r2,r2,65535
8112afec:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
8112aff0:	e0bffb17 	ldw	r2,-20(fp)
8112aff4:	10bfffcc 	andi	r2,r2,65535
8112aff8:	1009883a 	mov	r4,r2
8112affc:	112ade00 	call	8112ade0 <OSTimeDly>
    while (loops > 0) {
8112b000:	00000706 	br	8112b020 <OSTimeDlyHMSM+0x13c>
        OSTimeDly((INT16U)32768u);
8112b004:	01200014 	movui	r4,32768
8112b008:	112ade00 	call	8112ade0 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
8112b00c:	01200014 	movui	r4,32768
8112b010:	112ade00 	call	8112ade0 <OSTimeDly>
        loops--;
8112b014:	e0bffa0b 	ldhu	r2,-24(fp)
8112b018:	10bfffc4 	addi	r2,r2,-1
8112b01c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
8112b020:	e0bffa0b 	ldhu	r2,-24(fp)
8112b024:	103ff71e 	bne	r2,zero,8112b004 <__reset+0xfb10b004>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
8112b028:	0005883a 	mov	r2,zero
}
8112b02c:	e037883a 	mov	sp,fp
8112b030:	dfc00117 	ldw	ra,4(sp)
8112b034:	df000017 	ldw	fp,0(sp)
8112b038:	dec00204 	addi	sp,sp,8
8112b03c:	f800283a 	ret

8112b040 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
8112b040:	defff504 	addi	sp,sp,-44
8112b044:	dfc00a15 	stw	ra,40(sp)
8112b048:	df000915 	stw	fp,36(sp)
8112b04c:	df000904 	addi	fp,sp,36
8112b050:	2005883a 	mov	r2,r4
8112b054:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112b058:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
8112b05c:	e0bfff03 	ldbu	r2,-4(fp)
8112b060:	108007b0 	cmpltui	r2,r2,30
8112b064:	1000021e 	bne	r2,zero,8112b070 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
8112b068:	00800a84 	movi	r2,42
8112b06c:	00006406 	br	8112b200 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b070:	0005303a 	rdctl	r2,status
8112b074:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b078:	e0fffe17 	ldw	r3,-8(fp)
8112b07c:	00bfff84 	movi	r2,-2
8112b080:	1884703a 	and	r2,r3,r2
8112b084:	1001703a 	wrctl	status,r2
  
  return context;
8112b088:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112b08c:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
8112b090:	e0ffff03 	ldbu	r3,-4(fp)
8112b094:	00a045b4 	movhi	r2,33046
8112b098:	10b75704 	addi	r2,r2,-8868
8112b09c:	18c7883a 	add	r3,r3,r3
8112b0a0:	18c7883a 	add	r3,r3,r3
8112b0a4:	10c5883a 	add	r2,r2,r3
8112b0a8:	10800017 	ldw	r2,0(r2)
8112b0ac:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
8112b0b0:	e0bff917 	ldw	r2,-28(fp)
8112b0b4:	1000061e 	bne	r2,zero,8112b0d0 <OSTimeDlyResume+0x90>
8112b0b8:	e0bff717 	ldw	r2,-36(fp)
8112b0bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b0c0:	e0bff817 	ldw	r2,-32(fp)
8112b0c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112b0c8:	008010c4 	movi	r2,67
8112b0cc:	00004c06 	br	8112b200 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112b0d0:	e0bff917 	ldw	r2,-28(fp)
8112b0d4:	10800058 	cmpnei	r2,r2,1
8112b0d8:	1000061e 	bne	r2,zero,8112b0f4 <OSTimeDlyResume+0xb4>
8112b0dc:	e0bff717 	ldw	r2,-36(fp)
8112b0e0:	e0bffa15 	stw	r2,-24(fp)
8112b0e4:	e0bffa17 	ldw	r2,-24(fp)
8112b0e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112b0ec:	008010c4 	movi	r2,67
8112b0f0:	00004306 	br	8112b200 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
8112b0f4:	e0bff917 	ldw	r2,-28(fp)
8112b0f8:	10800b8b 	ldhu	r2,46(r2)
8112b0fc:	10bfffcc 	andi	r2,r2,65535
8112b100:	1000061e 	bne	r2,zero,8112b11c <OSTimeDlyResume+0xdc>
8112b104:	e0bff717 	ldw	r2,-36(fp)
8112b108:	e0bffb15 	stw	r2,-20(fp)
8112b10c:	e0bffb17 	ldw	r2,-20(fp)
8112b110:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
8112b114:	00801404 	movi	r2,80
8112b118:	00003906 	br	8112b200 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
8112b11c:	e0bff917 	ldw	r2,-28(fp)
8112b120:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112b124:	e0bff917 	ldw	r2,-28(fp)
8112b128:	10800c03 	ldbu	r2,48(r2)
8112b12c:	10803fcc 	andi	r2,r2,255
8112b130:	10800dcc 	andi	r2,r2,55
8112b134:	10000b26 	beq	r2,zero,8112b164 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
8112b138:	e0bff917 	ldw	r2,-28(fp)
8112b13c:	10c00c03 	ldbu	r3,48(r2)
8112b140:	00bff204 	movi	r2,-56
8112b144:	1884703a 	and	r2,r3,r2
8112b148:	1007883a 	mov	r3,r2
8112b14c:	e0bff917 	ldw	r2,-28(fp)
8112b150:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
8112b154:	e0bff917 	ldw	r2,-28(fp)
8112b158:	00c00044 	movi	r3,1
8112b15c:	10c00c45 	stb	r3,49(r2)
8112b160:	00000206 	br	8112b16c <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
8112b164:	e0bff917 	ldw	r2,-28(fp)
8112b168:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
8112b16c:	e0bff917 	ldw	r2,-28(fp)
8112b170:	10800c03 	ldbu	r2,48(r2)
8112b174:	10803fcc 	andi	r2,r2,255
8112b178:	1080020c 	andi	r2,r2,8
8112b17c:	10001b1e 	bne	r2,zero,8112b1ec <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
8112b180:	e0bff917 	ldw	r2,-28(fp)
8112b184:	10c00d83 	ldbu	r3,54(r2)
8112b188:	d0a08503 	ldbu	r2,-32236(gp)
8112b18c:	1884b03a 	or	r2,r3,r2
8112b190:	d0a08505 	stb	r2,-32236(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112b194:	e0bff917 	ldw	r2,-28(fp)
8112b198:	10800d03 	ldbu	r2,52(r2)
8112b19c:	10c03fcc 	andi	r3,r2,255
8112b1a0:	e0bff917 	ldw	r2,-28(fp)
8112b1a4:	10800d03 	ldbu	r2,52(r2)
8112b1a8:	11003fcc 	andi	r4,r2,255
8112b1ac:	d0a08544 	addi	r2,gp,-32235
8112b1b0:	2085883a 	add	r2,r4,r2
8112b1b4:	11000003 	ldbu	r4,0(r2)
8112b1b8:	e0bff917 	ldw	r2,-28(fp)
8112b1bc:	10800d43 	ldbu	r2,53(r2)
8112b1c0:	2084b03a 	or	r2,r4,r2
8112b1c4:	1009883a 	mov	r4,r2
8112b1c8:	d0a08544 	addi	r2,gp,-32235
8112b1cc:	1885883a 	add	r2,r3,r2
8112b1d0:	11000005 	stb	r4,0(r2)
8112b1d4:	e0bff717 	ldw	r2,-36(fp)
8112b1d8:	e0bffc15 	stw	r2,-16(fp)
8112b1dc:	e0bffc17 	ldw	r2,-16(fp)
8112b1e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
8112b1e4:	112431c0 	call	8112431c <OS_Sched>
8112b1e8:	00000406 	br	8112b1fc <OSTimeDlyResume+0x1bc>
8112b1ec:	e0bff717 	ldw	r2,-36(fp)
8112b1f0:	e0bffd15 	stw	r2,-12(fp)
8112b1f4:	e0bffd17 	ldw	r2,-12(fp)
8112b1f8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
8112b1fc:	0005883a 	mov	r2,zero
}
8112b200:	e037883a 	mov	sp,fp
8112b204:	dfc00117 	ldw	ra,4(sp)
8112b208:	df000017 	ldw	fp,0(sp)
8112b20c:	dec00204 	addi	sp,sp,8
8112b210:	f800283a 	ret

8112b214 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
8112b214:	defffb04 	addi	sp,sp,-20
8112b218:	df000415 	stw	fp,16(sp)
8112b21c:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b220:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b224:	0005303a 	rdctl	r2,status
8112b228:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b22c:	e0fffe17 	ldw	r3,-8(fp)
8112b230:	00bfff84 	movi	r2,-2
8112b234:	1884703a 	and	r2,r3,r2
8112b238:	1001703a 	wrctl	status,r2
  
  return context;
8112b23c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112b240:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
8112b244:	d0a08a17 	ldw	r2,-32216(gp)
8112b248:	e0bffd15 	stw	r2,-12(fp)
8112b24c:	e0bffc17 	ldw	r2,-16(fp)
8112b250:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b254:	e0bfff17 	ldw	r2,-4(fp)
8112b258:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
8112b25c:	e0bffd17 	ldw	r2,-12(fp)
}
8112b260:	e037883a 	mov	sp,fp
8112b264:	df000017 	ldw	fp,0(sp)
8112b268:	dec00104 	addi	sp,sp,4
8112b26c:	f800283a 	ret

8112b270 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
8112b270:	defffb04 	addi	sp,sp,-20
8112b274:	df000415 	stw	fp,16(sp)
8112b278:	df000404 	addi	fp,sp,16
8112b27c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b280:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b284:	0005303a 	rdctl	r2,status
8112b288:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b28c:	e0fffd17 	ldw	r3,-12(fp)
8112b290:	00bfff84 	movi	r2,-2
8112b294:	1884703a 	and	r2,r3,r2
8112b298:	1001703a 	wrctl	status,r2
  
  return context;
8112b29c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
8112b2a0:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
8112b2a4:	e0bfff17 	ldw	r2,-4(fp)
8112b2a8:	d0a08a15 	stw	r2,-32216(gp)
8112b2ac:	e0bffc17 	ldw	r2,-16(fp)
8112b2b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b2b4:	e0bffe17 	ldw	r2,-8(fp)
8112b2b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112b2bc:	0001883a 	nop
8112b2c0:	e037883a 	mov	sp,fp
8112b2c4:	df000017 	ldw	fp,0(sp)
8112b2c8:	dec00104 	addi	sp,sp,4
8112b2cc:	f800283a 	ret

8112b2d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8112b2d0:	defffd04 	addi	sp,sp,-12
8112b2d4:	dfc00215 	stw	ra,8(sp)
8112b2d8:	df000115 	stw	fp,4(sp)
8112b2dc:	df000104 	addi	fp,sp,4
8112b2e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
8112b2e4:	d1601204 	addi	r5,gp,-32696
8112b2e8:	e13fff17 	ldw	r4,-4(fp)
8112b2ec:	11340a80 	call	811340a8 <alt_dev_llist_insert>
}
8112b2f0:	e037883a 	mov	sp,fp
8112b2f4:	dfc00117 	ldw	ra,4(sp)
8112b2f8:	df000017 	ldw	fp,0(sp)
8112b2fc:	dec00204 	addi	sp,sp,8
8112b300:	f800283a 	ret

8112b304 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
8112b304:	defffd04 	addi	sp,sp,-12
8112b308:	dfc00215 	stw	ra,8(sp)
8112b30c:	df000115 	stw	fp,4(sp)
8112b310:	df000104 	addi	fp,sp,4
8112b314:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
8112b318:	1134ac80 	call	81134ac8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
8112b31c:	00800044 	movi	r2,1
8112b320:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
8112b324:	0001883a 	nop
8112b328:	e037883a 	mov	sp,fp
8112b32c:	dfc00117 	ldw	ra,4(sp)
8112b330:	df000017 	ldw	fp,0(sp)
8112b334:	dec00204 	addi	sp,sp,8
8112b338:	f800283a 	ret

8112b33c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
8112b33c:	defffe04 	addi	sp,sp,-8
8112b340:	dfc00115 	stw	ra,4(sp)
8112b344:	df000015 	stw	fp,0(sp)
8112b348:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
8112b34c:	01c0fa04 	movi	r7,1000
8112b350:	018000c4 	movi	r6,3
8112b354:	000b883a 	mov	r5,zero
8112b358:	01200034 	movhi	r4,32768
8112b35c:	21011004 	addi	r4,r4,1088
8112b360:	11312240 	call	81131224 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
8112b364:	01800084 	movi	r6,2
8112b368:	000b883a 	mov	r5,zero
8112b36c:	01204534 	movhi	r4,33044
8112b370:	2121d004 	addi	r4,r4,-30912
8112b374:	112f8500 	call	8112f850 <altera_avalon_jtag_uart_init>
8112b378:	01204534 	movhi	r4,33044
8112b37c:	2121c604 	addi	r4,r4,-30952
8112b380:	112b2d00 	call	8112b2d0 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_RX, sgdma_rx);
8112b384:	01800044 	movi	r6,1
8112b388:	000b883a 	mov	r5,zero
8112b38c:	01204534 	movhi	r4,33044
8112b390:	2125e104 	addi	r4,r4,-26748
8112b394:	11311040 	call	81131104 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( SGDMA_TX, sgdma_tx);
8112b398:	000d883a 	mov	r6,zero
8112b39c:	000b883a 	mov	r5,zero
8112b3a0:	01204534 	movhi	r4,33044
8112b3a4:	2125ed04 	addi	r4,r4,-26700
8112b3a8:	11311040 	call	81131104 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
8112b3ac:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8112b3b0:	01800184 	movi	r6,6
8112b3b4:	000b883a 	mov	r5,zero
8112b3b8:	01204534 	movhi	r4,33044
8112b3bc:	21260304 	addi	r4,r4,-26612
8112b3c0:	11313b00 	call	811313b0 <altera_avalon_uart_init>
8112b3c4:	01204534 	movhi	r4,33044
8112b3c8:	2125f904 	addi	r4,r4,-26652
8112b3cc:	112b2d00 	call	8112b2d0 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_MAC, tse_mac);
8112b3d0:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( DMA_DDR_M, dma_DDR_M);
8112b3d4:	00a04534 	movhi	r2,33044
8112b3d8:	10a62d04 	addi	r2,r2,-26444
8112b3dc:	10c00717 	ldw	r3,28(r2)
8112b3e0:	00a04534 	movhi	r2,33044
8112b3e4:	10a62d04 	addi	r2,r2,-26444
8112b3e8:	10800817 	ldw	r2,32(r2)
8112b3ec:	100d883a 	mov	r6,r2
8112b3f0:	180b883a 	mov	r5,r3
8112b3f4:	01204534 	movhi	r4,33044
8112b3f8:	21262d04 	addi	r4,r4,-26444
8112b3fc:	1133b000 	call	81133b00 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
8112b400:	01204534 	movhi	r4,33044
8112b404:	21264604 	addi	r4,r4,-26344
8112b408:	112b2d00 	call	8112b2d0 <alt_dev_reg>
}
8112b40c:	0001883a 	nop
8112b410:	e037883a 	mov	sp,fp
8112b414:	dfc00117 	ldw	ra,4(sp)
8112b418:	df000017 	ldw	fp,0(sp)
8112b41c:	dec00204 	addi	sp,sp,8
8112b420:	f800283a 	ret

8112b424 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
8112b424:	defffa04 	addi	sp,sp,-24
8112b428:	dfc00515 	stw	ra,20(sp)
8112b42c:	df000415 	stw	fp,16(sp)
8112b430:	df000404 	addi	fp,sp,16
8112b434:	e13ffe15 	stw	r4,-8(fp)
8112b438:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8112b43c:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
8112b440:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112b444:	10001e26 	beq	r2,zero,8112b4c0 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
8112b448:	00803fc4 	movi	r2,255
8112b44c:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8112b450:	d0a09417 	ldw	r2,-32176(gp)
8112b454:	e13ffe17 	ldw	r4,-8(fp)
8112b458:	e0ffff17 	ldw	r3,-4(fp)
8112b45c:	20c7883a 	add	r3,r4,r3
8112b460:	1806927a 	slli	r3,r3,9
8112b464:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
8112b468:	d0a09317 	ldw	r2,-32180(gp)
8112b46c:	00c00604 	movi	r3,24
8112b470:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8112b474:	d0a09017 	ldw	r2,-32192(gp)
8112b478:	1080002b 	ldhuio	r2,0(r2)
8112b47c:	10bfffcc 	andi	r2,r2,65535
8112b480:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
8112b484:	e0bffd0b 	ldhu	r2,-12(fp)
8112b488:	10bfffcc 	andi	r2,r2,65535
8112b48c:	1080010c 	andi	r2,r2,4
8112b490:	103ff81e 	bne	r2,zero,8112b474 <__reset+0xfb10b474>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
8112b494:	e0bffd0b 	ldhu	r2,-12(fp)
8112b498:	10bfffcc 	andi	r2,r2,65535
8112b49c:	1080040c 	andi	r2,r2,16
8112b4a0:	1000071e 	bne	r2,zero,8112b4c0 <Write_Sector_Data+0x9c>
        {
            result = true;
8112b4a4:	00800044 	movi	r2,1
8112b4a8:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8112b4ac:	d0209915 	stw	zero,-32156(gp)
            current_sector_index = sector_index+partition_offset;
8112b4b0:	e0fffe17 	ldw	r3,-8(fp)
8112b4b4:	e0bfff17 	ldw	r2,-4(fp)
8112b4b8:	1885883a 	add	r2,r3,r2
8112b4bc:	d0a09a15 	stw	r2,-32152(gp)
        }
    }
    return result;
8112b4c0:	e0bffc17 	ldw	r2,-16(fp)
}
8112b4c4:	e037883a 	mov	sp,fp
8112b4c8:	dfc00117 	ldw	ra,4(sp)
8112b4cc:	df000017 	ldw	fp,0(sp)
8112b4d0:	dec00204 	addi	sp,sp,8
8112b4d4:	f800283a 	ret

8112b4d8 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
8112b4d8:	defffd04 	addi	sp,sp,-12
8112b4dc:	dfc00215 	stw	ra,8(sp)
8112b4e0:	df000115 	stw	fp,4(sp)
8112b4e4:	df000104 	addi	fp,sp,4
    bool result = true;
8112b4e8:	00800044 	movi	r2,1
8112b4ec:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
8112b4f0:	d0a09917 	ldw	r2,-32156(gp)
8112b4f4:	10000526 	beq	r2,zero,8112b50c <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
8112b4f8:	d0a09a17 	ldw	r2,-32152(gp)
8112b4fc:	000b883a 	mov	r5,zero
8112b500:	1009883a 	mov	r4,r2
8112b504:	112b4240 	call	8112b424 <Write_Sector_Data>
8112b508:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
8112b50c:	e0bfff17 	ldw	r2,-4(fp)
}
8112b510:	e037883a 	mov	sp,fp
8112b514:	dfc00117 	ldw	ra,4(sp)
8112b518:	df000017 	ldw	fp,0(sp)
8112b51c:	dec00204 	addi	sp,sp,8
8112b520:	f800283a 	ret

8112b524 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
8112b524:	defffa04 	addi	sp,sp,-24
8112b528:	dfc00515 	stw	ra,20(sp)
8112b52c:	df000415 	stw	fp,16(sp)
8112b530:	df000404 	addi	fp,sp,16
8112b534:	e13ffe15 	stw	r4,-8(fp)
8112b538:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
8112b53c:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
8112b540:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112b544:	10002726 	beq	r2,zero,8112b5e4 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
8112b548:	00803fc4 	movi	r2,255
8112b54c:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
8112b550:	d0a09917 	ldw	r2,-32156(gp)
8112b554:	10000726 	beq	r2,zero,8112b574 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
8112b558:	d0a09a17 	ldw	r2,-32152(gp)
8112b55c:	000b883a 	mov	r5,zero
8112b560:	1009883a 	mov	r4,r2
8112b564:	112b4240 	call	8112b424 <Write_Sector_Data>
8112b568:	1000021e 	bne	r2,zero,8112b574 <Read_Sector_Data+0x50>
            {
                return false;
8112b56c:	0005883a 	mov	r2,zero
8112b570:	00001d06 	br	8112b5e8 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8112b574:	d0a09417 	ldw	r2,-32176(gp)
8112b578:	e13ffe17 	ldw	r4,-8(fp)
8112b57c:	e0ffff17 	ldw	r3,-4(fp)
8112b580:	20c7883a 	add	r3,r4,r3
8112b584:	1806927a 	slli	r3,r3,9
8112b588:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
8112b58c:	d0a09317 	ldw	r2,-32180(gp)
8112b590:	00c00444 	movi	r3,17
8112b594:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
8112b598:	d0a09017 	ldw	r2,-32192(gp)
8112b59c:	1080002b 	ldhuio	r2,0(r2)
8112b5a0:	10bfffcc 	andi	r2,r2,65535
8112b5a4:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
8112b5a8:	e0bffd0b 	ldhu	r2,-12(fp)
8112b5ac:	10bfffcc 	andi	r2,r2,65535
8112b5b0:	1080010c 	andi	r2,r2,4
8112b5b4:	103ff81e 	bne	r2,zero,8112b598 <__reset+0xfb10b598>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
8112b5b8:	e0bffd0b 	ldhu	r2,-12(fp)
8112b5bc:	10bfffcc 	andi	r2,r2,65535
8112b5c0:	1080040c 	andi	r2,r2,16
8112b5c4:	1000071e 	bne	r2,zero,8112b5e4 <Read_Sector_Data+0xc0>
		{
			result = true;
8112b5c8:	00800044 	movi	r2,1
8112b5cc:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
8112b5d0:	d0209915 	stw	zero,-32156(gp)
            current_sector_index = sector_index+partition_offset;
8112b5d4:	e0fffe17 	ldw	r3,-8(fp)
8112b5d8:	e0bfff17 	ldw	r2,-4(fp)
8112b5dc:	1885883a 	add	r2,r3,r2
8112b5e0:	d0a09a15 	stw	r2,-32152(gp)
		}
	}
	return result;
8112b5e4:	e0bffc17 	ldw	r2,-16(fp)
}
8112b5e8:	e037883a 	mov	sp,fp
8112b5ec:	dfc00117 	ldw	ra,4(sp)
8112b5f0:	df000017 	ldw	fp,0(sp)
8112b5f4:	dec00204 	addi	sp,sp,8
8112b5f8:	f800283a 	ret

8112b5fc <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
8112b5fc:	defffb04 	addi	sp,sp,-20
8112b600:	dfc00415 	stw	ra,16(sp)
8112b604:	df000315 	stw	fp,12(sp)
8112b608:	df000304 	addi	fp,sp,12
8112b60c:	e13ffe15 	stw	r4,-8(fp)
8112b610:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
8112b614:	e0bffe17 	ldw	r2,-8(fp)
8112b618:	1004d23a 	srli	r2,r2,8
8112b61c:	d0e09617 	ldw	r3,-32168(gp)
8112b620:	10c5883a 	add	r2,r2,r3
8112b624:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
8112b628:	00a045b4 	movhi	r2,33046
8112b62c:	10b77b04 	addi	r2,r2,-8724
8112b630:	10801117 	ldw	r2,68(r2)
8112b634:	e0fffd17 	ldw	r3,-12(fp)
8112b638:	1885883a 	add	r2,r3,r2
8112b63c:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
8112b640:	d0a09a17 	ldw	r2,-32152(gp)
8112b644:	e0fffd17 	ldw	r3,-12(fp)
8112b648:	18800726 	beq	r3,r2,8112b668 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
8112b64c:	e0bffd17 	ldw	r2,-12(fp)
8112b650:	000b883a 	mov	r5,zero
8112b654:	1009883a 	mov	r4,r2
8112b658:	112b5240 	call	8112b524 <Read_Sector_Data>
8112b65c:	1000021e 	bne	r2,zero,8112b668 <get_cluster_flag+0x6c>
        {
            return false;
8112b660:	0005883a 	mov	r2,zero
8112b664:	00000d06 	br	8112b69c <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
8112b668:	e0bffe17 	ldw	r2,-8(fp)
8112b66c:	10803fcc 	andi	r2,r2,255
8112b670:	1085883a 	add	r2,r2,r2
8112b674:	1007883a 	mov	r3,r2
8112b678:	d0a09817 	ldw	r2,-32160(gp)
8112b67c:	10800a17 	ldw	r2,40(r2)
8112b680:	1885883a 	add	r2,r3,r2
8112b684:	1080002b 	ldhuio	r2,0(r2)
8112b688:	10bfffcc 	andi	r2,r2,65535
8112b68c:	1007883a 	mov	r3,r2
8112b690:	e0bfff17 	ldw	r2,-4(fp)
8112b694:	10c0000d 	sth	r3,0(r2)
    return true;
8112b698:	00800044 	movi	r2,1
}
8112b69c:	e037883a 	mov	sp,fp
8112b6a0:	dfc00117 	ldw	ra,4(sp)
8112b6a4:	df000017 	ldw	fp,0(sp)
8112b6a8:	dec00204 	addi	sp,sp,8
8112b6ac:	f800283a 	ret

8112b6b0 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
8112b6b0:	defffa04 	addi	sp,sp,-24
8112b6b4:	dfc00515 	stw	ra,20(sp)
8112b6b8:	df000415 	stw	fp,16(sp)
8112b6bc:	df000404 	addi	fp,sp,16
8112b6c0:	e13ffd15 	stw	r4,-12(fp)
8112b6c4:	2805883a 	mov	r2,r5
8112b6c8:	e1bfff15 	stw	r6,-4(fp)
8112b6cc:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
8112b6d0:	e0bffd17 	ldw	r2,-12(fp)
8112b6d4:	1004d23a 	srli	r2,r2,8
8112b6d8:	d0e09617 	ldw	r3,-32168(gp)
8112b6dc:	10c5883a 	add	r2,r2,r3
8112b6e0:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
8112b6e4:	e0bfff17 	ldw	r2,-4(fp)
8112b6e8:	10000726 	beq	r2,zero,8112b708 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
8112b6ec:	00a045b4 	movhi	r2,33046
8112b6f0:	10b77b04 	addi	r2,r2,-8724
8112b6f4:	10801117 	ldw	r2,68(r2)
8112b6f8:	e0fffc17 	ldw	r3,-16(fp)
8112b6fc:	1885883a 	add	r2,r3,r2
8112b700:	e0bffc15 	stw	r2,-16(fp)
8112b704:	00000606 	br	8112b720 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
8112b708:	00a045b4 	movhi	r2,33046
8112b70c:	10b77b04 	addi	r2,r2,-8724
8112b710:	10801217 	ldw	r2,72(r2)
8112b714:	e0fffc17 	ldw	r3,-16(fp)
8112b718:	1885883a 	add	r2,r3,r2
8112b71c:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
8112b720:	d0a09a17 	ldw	r2,-32152(gp)
8112b724:	e0fffc17 	ldw	r3,-16(fp)
8112b728:	18800726 	beq	r3,r2,8112b748 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
8112b72c:	e0bffc17 	ldw	r2,-16(fp)
8112b730:	000b883a 	mov	r5,zero
8112b734:	1009883a 	mov	r4,r2
8112b738:	112b5240 	call	8112b524 <Read_Sector_Data>
8112b73c:	1000021e 	bne	r2,zero,8112b748 <mark_cluster+0x98>
        {
            return false;
8112b740:	0005883a 	mov	r2,zero
8112b744:	00000d06 	br	8112b77c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
8112b748:	e0bffd17 	ldw	r2,-12(fp)
8112b74c:	10803fcc 	andi	r2,r2,255
8112b750:	1085883a 	add	r2,r2,r2
8112b754:	1007883a 	mov	r3,r2
8112b758:	d0a09817 	ldw	r2,-32160(gp)
8112b75c:	10800a17 	ldw	r2,40(r2)
8112b760:	1885883a 	add	r2,r3,r2
8112b764:	1007883a 	mov	r3,r2
8112b768:	e0bffe0f 	ldh	r2,-8(fp)
8112b76c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
8112b770:	00800044 	movi	r2,1
8112b774:	d0a09915 	stw	r2,-32156(gp)
    return true;
8112b778:	00800044 	movi	r2,1
}
8112b77c:	e037883a 	mov	sp,fp
8112b780:	dfc00117 	ldw	ra,4(sp)
8112b784:	df000017 	ldw	fp,0(sp)
8112b788:	dec00204 	addi	sp,sp,8
8112b78c:	f800283a 	ret

8112b790 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
8112b790:	defff704 	addi	sp,sp,-36
8112b794:	dfc00815 	stw	ra,32(sp)
8112b798:	df000715 	stw	fp,28(sp)
8112b79c:	df000704 	addi	fp,sp,28
	bool result = false;
8112b7a0:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
8112b7a4:	000b883a 	mov	r5,zero
8112b7a8:	0009883a 	mov	r4,zero
8112b7ac:	112b5240 	call	8112b524 <Read_Sector_Data>
8112b7b0:	10005a26 	beq	r2,zero,8112b91c <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
8112b7b4:	d0a09817 	ldw	r2,-32160(gp)
8112b7b8:	10800a17 	ldw	r2,40(r2)
8112b7bc:	10807f84 	addi	r2,r2,510
8112b7c0:	1080002b 	ldhuio	r2,0(r2)
8112b7c4:	10bfffcc 	andi	r2,r2,65535
8112b7c8:	10bfffcc 	andi	r2,r2,65535
8112b7cc:	10a0001c 	xori	r2,r2,32768
8112b7d0:	10a00004 	addi	r2,r2,-32768
8112b7d4:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
8112b7d8:	e0bffb17 	ldw	r2,-20(fp)
8112b7dc:	10ffffcc 	andi	r3,r2,65535
8112b7e0:	00aa9554 	movui	r2,43605
8112b7e4:	18804d1e 	bne	r3,r2,8112b91c <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
8112b7e8:	e03ffa15 	stw	zero,-24(fp)
8112b7ec:	00004806 	br	8112b910 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
8112b7f0:	e0bffa17 	ldw	r2,-24(fp)
8112b7f4:	1004913a 	slli	r2,r2,4
8112b7f8:	10806f84 	addi	r2,r2,446
8112b7fc:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
8112b800:	d0a09817 	ldw	r2,-32160(gp)
8112b804:	10c00a17 	ldw	r3,40(r2)
8112b808:	e0bffc17 	ldw	r2,-16(fp)
8112b80c:	1885883a 	add	r2,r3,r2
8112b810:	10800104 	addi	r2,r2,4
8112b814:	10800023 	ldbuio	r2,0(r2)
8112b818:	10803fcc 	andi	r2,r2,255
8112b81c:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
8112b820:	e0bffd07 	ldb	r2,-12(fp)
8112b824:	10800060 	cmpeqi	r2,r2,1
8112b828:	1000091e 	bne	r2,zero,8112b850 <Check_for_Master_Boot_Record+0xc0>
8112b82c:	e0bffd07 	ldb	r2,-12(fp)
8112b830:	10800120 	cmpeqi	r2,r2,4
8112b834:	1000061e 	bne	r2,zero,8112b850 <Check_for_Master_Boot_Record+0xc0>
8112b838:	e0bffd07 	ldb	r2,-12(fp)
8112b83c:	108001a0 	cmpeqi	r2,r2,6
8112b840:	1000031e 	bne	r2,zero,8112b850 <Check_for_Master_Boot_Record+0xc0>
8112b844:	e0bffd07 	ldb	r2,-12(fp)
8112b848:	10800398 	cmpnei	r2,r2,14
8112b84c:	10002d1e 	bne	r2,zero,8112b904 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
8112b850:	d0a09817 	ldw	r2,-32160(gp)
8112b854:	10c00a17 	ldw	r3,40(r2)
8112b858:	e0bffc17 	ldw	r2,-16(fp)
8112b85c:	1885883a 	add	r2,r3,r2
8112b860:	10800284 	addi	r2,r2,10
8112b864:	1080002b 	ldhuio	r2,0(r2)
8112b868:	10bfffcc 	andi	r2,r2,65535
8112b86c:	1006943a 	slli	r3,r2,16
8112b870:	d0a09817 	ldw	r2,-32160(gp)
8112b874:	11000a17 	ldw	r4,40(r2)
8112b878:	e0bffc17 	ldw	r2,-16(fp)
8112b87c:	2085883a 	add	r2,r4,r2
8112b880:	10800204 	addi	r2,r2,8
8112b884:	1080002b 	ldhuio	r2,0(r2)
8112b888:	10bfffcc 	andi	r2,r2,65535
8112b88c:	10bfffcc 	andi	r2,r2,65535
8112b890:	1884b03a 	or	r2,r3,r2
8112b894:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
8112b898:	d0a09817 	ldw	r2,-32160(gp)
8112b89c:	10c00a17 	ldw	r3,40(r2)
8112b8a0:	e0bffc17 	ldw	r2,-16(fp)
8112b8a4:	1885883a 	add	r2,r3,r2
8112b8a8:	10800384 	addi	r2,r2,14
8112b8ac:	1080002b 	ldhuio	r2,0(r2)
8112b8b0:	10bfffcc 	andi	r2,r2,65535
8112b8b4:	1006943a 	slli	r3,r2,16
8112b8b8:	d0a09817 	ldw	r2,-32160(gp)
8112b8bc:	11000a17 	ldw	r4,40(r2)
8112b8c0:	e0bffc17 	ldw	r2,-16(fp)
8112b8c4:	2085883a 	add	r2,r4,r2
8112b8c8:	10800304 	addi	r2,r2,12
8112b8cc:	1080002b 	ldhuio	r2,0(r2)
8112b8d0:	10bfffcc 	andi	r2,r2,65535
8112b8d4:	10bfffcc 	andi	r2,r2,65535
8112b8d8:	1884b03a 	or	r2,r3,r2
8112b8dc:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
8112b8e0:	e0bfff17 	ldw	r2,-4(fp)
8112b8e4:	0080070e 	bge	zero,r2,8112b904 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
8112b8e8:	00800044 	movi	r2,1
8112b8ec:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
8112b8f0:	e0bfff17 	ldw	r2,-4(fp)
8112b8f4:	d0a09715 	stw	r2,-32164(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
8112b8f8:	e0bffe17 	ldw	r2,-8(fp)
8112b8fc:	d0a09615 	stw	r2,-32168(gp)
						break;
8112b900:	00000606 	br	8112b91c <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
8112b904:	e0bffa17 	ldw	r2,-24(fp)
8112b908:	10800044 	addi	r2,r2,1
8112b90c:	e0bffa15 	stw	r2,-24(fp)
8112b910:	e0bffa17 	ldw	r2,-24(fp)
8112b914:	10800110 	cmplti	r2,r2,4
8112b918:	103fb51e 	bne	r2,zero,8112b7f0 <__reset+0xfb10b7f0>
				}
			}
		}
	}

	return result;
8112b91c:	e0bff917 	ldw	r2,-28(fp)
}
8112b920:	e037883a 	mov	sp,fp
8112b924:	dfc00117 	ldw	ra,4(sp)
8112b928:	df000017 	ldw	fp,0(sp)
8112b92c:	dec00204 	addi	sp,sp,8
8112b930:	f800283a 	ret

8112b934 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
8112b934:	defff804 	addi	sp,sp,-32
8112b938:	dfc00715 	stw	ra,28(sp)
8112b93c:	df000615 	stw	fp,24(sp)
8112b940:	df000604 	addi	fp,sp,24
8112b944:	e13ffc15 	stw	r4,-16(fp)
8112b948:	e17ffd15 	stw	r5,-12(fp)
8112b94c:	e1bffe15 	stw	r6,-8(fp)
8112b950:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
8112b954:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112b958:	e0bffc17 	ldw	r2,-16(fp)
8112b95c:	108007cc 	andi	r2,r2,31
8112b960:	10008d1e 	bne	r2,zero,8112bb98 <Read_File_Record_At_Offset+0x264>
8112b964:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112b968:	10008b26 	beq	r2,zero,8112bb98 <Read_File_Record_At_Offset+0x264>
8112b96c:	d0a08f17 	ldw	r2,-32196(gp)
8112b970:	10008926 	beq	r2,zero,8112bb98 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
8112b974:	e03ffb15 	stw	zero,-20(fp)
8112b978:	00001106 	br	8112b9c0 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
8112b97c:	e0fffc17 	ldw	r3,-16(fp)
8112b980:	e0bffb17 	ldw	r2,-20(fp)
8112b984:	1885883a 	add	r2,r3,r2
8112b988:	1007883a 	mov	r3,r2
8112b98c:	d0a09817 	ldw	r2,-32160(gp)
8112b990:	10800a17 	ldw	r2,40(r2)
8112b994:	1885883a 	add	r2,r3,r2
8112b998:	10800023 	ldbuio	r2,0(r2)
8112b99c:	10803fcc 	andi	r2,r2,255
8112b9a0:	1009883a 	mov	r4,r2
8112b9a4:	e0fffd17 	ldw	r3,-12(fp)
8112b9a8:	e0bffb17 	ldw	r2,-20(fp)
8112b9ac:	1885883a 	add	r2,r3,r2
8112b9b0:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
8112b9b4:	e0bffb17 	ldw	r2,-20(fp)
8112b9b8:	10800044 	addi	r2,r2,1
8112b9bc:	e0bffb15 	stw	r2,-20(fp)
8112b9c0:	e0bffb17 	ldw	r2,-20(fp)
8112b9c4:	10800210 	cmplti	r2,r2,8
8112b9c8:	103fec1e 	bne	r2,zero,8112b97c <__reset+0xfb10b97c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
8112b9cc:	e03ffb15 	stw	zero,-20(fp)
8112b9d0:	00001306 	br	8112ba20 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
8112b9d4:	e0fffc17 	ldw	r3,-16(fp)
8112b9d8:	e0bffb17 	ldw	r2,-20(fp)
8112b9dc:	1885883a 	add	r2,r3,r2
8112b9e0:	1007883a 	mov	r3,r2
8112b9e4:	d0a09817 	ldw	r2,-32160(gp)
8112b9e8:	10800a17 	ldw	r2,40(r2)
8112b9ec:	1885883a 	add	r2,r3,r2
8112b9f0:	10800204 	addi	r2,r2,8
8112b9f4:	10800023 	ldbuio	r2,0(r2)
8112b9f8:	10803fcc 	andi	r2,r2,255
8112b9fc:	1009883a 	mov	r4,r2
8112ba00:	e0fffd17 	ldw	r3,-12(fp)
8112ba04:	e0bffb17 	ldw	r2,-20(fp)
8112ba08:	1885883a 	add	r2,r3,r2
8112ba0c:	10800204 	addi	r2,r2,8
8112ba10:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
8112ba14:	e0bffb17 	ldw	r2,-20(fp)
8112ba18:	10800044 	addi	r2,r2,1
8112ba1c:	e0bffb15 	stw	r2,-20(fp)
8112ba20:	e0bffb17 	ldw	r2,-20(fp)
8112ba24:	108000d0 	cmplti	r2,r2,3
8112ba28:	103fea1e 	bne	r2,zero,8112b9d4 <__reset+0xfb10b9d4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
8112ba2c:	d0a09817 	ldw	r2,-32160(gp)
8112ba30:	10c00a17 	ldw	r3,40(r2)
8112ba34:	e0bffc17 	ldw	r2,-16(fp)
8112ba38:	1885883a 	add	r2,r3,r2
8112ba3c:	108002c4 	addi	r2,r2,11
8112ba40:	10800023 	ldbuio	r2,0(r2)
8112ba44:	10803fcc 	andi	r2,r2,255
8112ba48:	1007883a 	mov	r3,r2
8112ba4c:	e0bffd17 	ldw	r2,-12(fp)
8112ba50:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
8112ba54:	d0a09817 	ldw	r2,-32160(gp)
8112ba58:	10c00a17 	ldw	r3,40(r2)
8112ba5c:	e0bffc17 	ldw	r2,-16(fp)
8112ba60:	1885883a 	add	r2,r3,r2
8112ba64:	10800384 	addi	r2,r2,14
8112ba68:	1080002b 	ldhuio	r2,0(r2)
8112ba6c:	10bfffcc 	andi	r2,r2,65535
8112ba70:	1007883a 	mov	r3,r2
8112ba74:	e0bffd17 	ldw	r2,-12(fp)
8112ba78:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
8112ba7c:	d0a09817 	ldw	r2,-32160(gp)
8112ba80:	10c00a17 	ldw	r3,40(r2)
8112ba84:	e0bffc17 	ldw	r2,-16(fp)
8112ba88:	1885883a 	add	r2,r3,r2
8112ba8c:	10800404 	addi	r2,r2,16
8112ba90:	1080002b 	ldhuio	r2,0(r2)
8112ba94:	10bfffcc 	andi	r2,r2,65535
8112ba98:	1007883a 	mov	r3,r2
8112ba9c:	e0bffd17 	ldw	r2,-12(fp)
8112baa0:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
8112baa4:	d0a09817 	ldw	r2,-32160(gp)
8112baa8:	10c00a17 	ldw	r3,40(r2)
8112baac:	e0bffc17 	ldw	r2,-16(fp)
8112bab0:	1885883a 	add	r2,r3,r2
8112bab4:	10800484 	addi	r2,r2,18
8112bab8:	1080002b 	ldhuio	r2,0(r2)
8112babc:	10bfffcc 	andi	r2,r2,65535
8112bac0:	1007883a 	mov	r3,r2
8112bac4:	e0bffd17 	ldw	r2,-12(fp)
8112bac8:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
8112bacc:	d0a09817 	ldw	r2,-32160(gp)
8112bad0:	10c00a17 	ldw	r3,40(r2)
8112bad4:	e0bffc17 	ldw	r2,-16(fp)
8112bad8:	1885883a 	add	r2,r3,r2
8112badc:	10800584 	addi	r2,r2,22
8112bae0:	1080002b 	ldhuio	r2,0(r2)
8112bae4:	10bfffcc 	andi	r2,r2,65535
8112bae8:	1007883a 	mov	r3,r2
8112baec:	e0bffd17 	ldw	r2,-12(fp)
8112baf0:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
8112baf4:	d0a09817 	ldw	r2,-32160(gp)
8112baf8:	10c00a17 	ldw	r3,40(r2)
8112bafc:	e0bffc17 	ldw	r2,-16(fp)
8112bb00:	1885883a 	add	r2,r3,r2
8112bb04:	10800604 	addi	r2,r2,24
8112bb08:	1080002b 	ldhuio	r2,0(r2)
8112bb0c:	10bfffcc 	andi	r2,r2,65535
8112bb10:	1007883a 	mov	r3,r2
8112bb14:	e0bffd17 	ldw	r2,-12(fp)
8112bb18:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
8112bb1c:	d0a09817 	ldw	r2,-32160(gp)
8112bb20:	10c00a17 	ldw	r3,40(r2)
8112bb24:	e0bffc17 	ldw	r2,-16(fp)
8112bb28:	1885883a 	add	r2,r3,r2
8112bb2c:	10800684 	addi	r2,r2,26
8112bb30:	1080002b 	ldhuio	r2,0(r2)
8112bb34:	10bfffcc 	andi	r2,r2,65535
8112bb38:	1007883a 	mov	r3,r2
8112bb3c:	e0bffd17 	ldw	r2,-12(fp)
8112bb40:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
8112bb44:	d0a09817 	ldw	r2,-32160(gp)
8112bb48:	10c00a17 	ldw	r3,40(r2)
8112bb4c:	e0bffc17 	ldw	r2,-16(fp)
8112bb50:	1885883a 	add	r2,r3,r2
8112bb54:	10800704 	addi	r2,r2,28
8112bb58:	10800037 	ldwio	r2,0(r2)
8112bb5c:	1007883a 	mov	r3,r2
8112bb60:	e0bffd17 	ldw	r2,-12(fp)
8112bb64:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
8112bb68:	e0bffd17 	ldw	r2,-12(fp)
8112bb6c:	e0fffe17 	ldw	r3,-8(fp)
8112bb70:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
8112bb74:	e0bffd17 	ldw	r2,-12(fp)
8112bb78:	e0ffff17 	ldw	r3,-4(fp)
8112bb7c:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
8112bb80:	e0bffc17 	ldw	r2,-16(fp)
8112bb84:	1007883a 	mov	r3,r2
8112bb88:	e0bffd17 	ldw	r2,-12(fp)
8112bb8c:	10c00c0d 	sth	r3,48(r2)
		result = true;
8112bb90:	00800044 	movi	r2,1
8112bb94:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
8112bb98:	e0bffa17 	ldw	r2,-24(fp)
}
8112bb9c:	e037883a 	mov	sp,fp
8112bba0:	dfc00117 	ldw	ra,4(sp)
8112bba4:	df000017 	ldw	fp,0(sp)
8112bba8:	dec00204 	addi	sp,sp,8
8112bbac:	f800283a 	ret

8112bbb0 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
8112bbb0:	defff904 	addi	sp,sp,-28
8112bbb4:	dfc00615 	stw	ra,24(sp)
8112bbb8:	df000515 	stw	fp,20(sp)
8112bbbc:	df000504 	addi	fp,sp,20
8112bbc0:	e13ffe15 	stw	r4,-8(fp)
8112bbc4:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
8112bbc8:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112bbcc:	e0bffe17 	ldw	r2,-8(fp)
8112bbd0:	108007cc 	andi	r2,r2,31
8112bbd4:	1000931e 	bne	r2,zero,8112be24 <Write_File_Record_At_Offset+0x274>
8112bbd8:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112bbdc:	10009126 	beq	r2,zero,8112be24 <Write_File_Record_At_Offset+0x274>
8112bbe0:	d0a08f17 	ldw	r2,-32196(gp)
8112bbe4:	10008f26 	beq	r2,zero,8112be24 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
8112bbe8:	e03ffc15 	stw	zero,-16(fp)
8112bbec:	00001f06 	br	8112bc6c <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
8112bbf0:	e0bffc17 	ldw	r2,-16(fp)
8112bbf4:	10800044 	addi	r2,r2,1
8112bbf8:	e0ffff17 	ldw	r3,-4(fp)
8112bbfc:	1885883a 	add	r2,r3,r2
8112bc00:	10800003 	ldbu	r2,0(r2)
8112bc04:	10803fcc 	andi	r2,r2,255
8112bc08:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
8112bc0c:	e0bffd0f 	ldh	r2,-12(fp)
8112bc10:	1004923a 	slli	r2,r2,8
8112bc14:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
8112bc18:	e0ffff17 	ldw	r3,-4(fp)
8112bc1c:	e0bffc17 	ldw	r2,-16(fp)
8112bc20:	1885883a 	add	r2,r3,r2
8112bc24:	10800003 	ldbu	r2,0(r2)
8112bc28:	10c03fcc 	andi	r3,r2,255
8112bc2c:	e0bffd0b 	ldhu	r2,-12(fp)
8112bc30:	1884b03a 	or	r2,r3,r2
8112bc34:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
8112bc38:	e0fffe17 	ldw	r3,-8(fp)
8112bc3c:	e0bffc17 	ldw	r2,-16(fp)
8112bc40:	1885883a 	add	r2,r3,r2
8112bc44:	1007883a 	mov	r3,r2
8112bc48:	d0a09817 	ldw	r2,-32160(gp)
8112bc4c:	10800a17 	ldw	r2,40(r2)
8112bc50:	1885883a 	add	r2,r3,r2
8112bc54:	1007883a 	mov	r3,r2
8112bc58:	e0bffd0f 	ldh	r2,-12(fp)
8112bc5c:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
8112bc60:	e0bffc17 	ldw	r2,-16(fp)
8112bc64:	10800084 	addi	r2,r2,2
8112bc68:	e0bffc15 	stw	r2,-16(fp)
8112bc6c:	e0bffc17 	ldw	r2,-16(fp)
8112bc70:	10800210 	cmplti	r2,r2,8
8112bc74:	103fde1e 	bne	r2,zero,8112bbf0 <__reset+0xfb10bbf0>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8112bc78:	e03ffc15 	stw	zero,-16(fp)
8112bc7c:	00001306 	br	8112bccc <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
8112bc80:	e0fffe17 	ldw	r3,-8(fp)
8112bc84:	e0bffc17 	ldw	r2,-16(fp)
8112bc88:	1885883a 	add	r2,r3,r2
8112bc8c:	1007883a 	mov	r3,r2
8112bc90:	d0a09817 	ldw	r2,-32160(gp)
8112bc94:	10800a17 	ldw	r2,40(r2)
8112bc98:	1885883a 	add	r2,r3,r2
8112bc9c:	10800204 	addi	r2,r2,8
8112bca0:	1009883a 	mov	r4,r2
8112bca4:	e0ffff17 	ldw	r3,-4(fp)
8112bca8:	e0bffc17 	ldw	r2,-16(fp)
8112bcac:	1885883a 	add	r2,r3,r2
8112bcb0:	10800204 	addi	r2,r2,8
8112bcb4:	10800003 	ldbu	r2,0(r2)
8112bcb8:	10803fcc 	andi	r2,r2,255
8112bcbc:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8112bcc0:	e0bffc17 	ldw	r2,-16(fp)
8112bcc4:	10800044 	addi	r2,r2,1
8112bcc8:	e0bffc15 	stw	r2,-16(fp)
8112bccc:	e0bffc17 	ldw	r2,-16(fp)
8112bcd0:	108000d0 	cmplti	r2,r2,3
8112bcd4:	103fea1e 	bne	r2,zero,8112bc80 <__reset+0xfb10bc80>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
8112bcd8:	d0a09817 	ldw	r2,-32160(gp)
8112bcdc:	10c00a17 	ldw	r3,40(r2)
8112bce0:	e0bffe17 	ldw	r2,-8(fp)
8112bce4:	1885883a 	add	r2,r3,r2
8112bce8:	108002c4 	addi	r2,r2,11
8112bcec:	1007883a 	mov	r3,r2
8112bcf0:	e0bfff17 	ldw	r2,-4(fp)
8112bcf4:	108002c3 	ldbu	r2,11(r2)
8112bcf8:	10803fcc 	andi	r2,r2,255
8112bcfc:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
8112bd00:	d0a09817 	ldw	r2,-32160(gp)
8112bd04:	10c00a17 	ldw	r3,40(r2)
8112bd08:	e0bffe17 	ldw	r2,-8(fp)
8112bd0c:	1885883a 	add	r2,r3,r2
8112bd10:	10800384 	addi	r2,r2,14
8112bd14:	1007883a 	mov	r3,r2
8112bd18:	e0bfff17 	ldw	r2,-4(fp)
8112bd1c:	1080030b 	ldhu	r2,12(r2)
8112bd20:	10bfffcc 	andi	r2,r2,65535
8112bd24:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
8112bd28:	d0a09817 	ldw	r2,-32160(gp)
8112bd2c:	10c00a17 	ldw	r3,40(r2)
8112bd30:	e0bffe17 	ldw	r2,-8(fp)
8112bd34:	1885883a 	add	r2,r3,r2
8112bd38:	10800404 	addi	r2,r2,16
8112bd3c:	1007883a 	mov	r3,r2
8112bd40:	e0bfff17 	ldw	r2,-4(fp)
8112bd44:	1080038b 	ldhu	r2,14(r2)
8112bd48:	10bfffcc 	andi	r2,r2,65535
8112bd4c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
8112bd50:	d0a09817 	ldw	r2,-32160(gp)
8112bd54:	10c00a17 	ldw	r3,40(r2)
8112bd58:	e0bffe17 	ldw	r2,-8(fp)
8112bd5c:	1885883a 	add	r2,r3,r2
8112bd60:	10800484 	addi	r2,r2,18
8112bd64:	1007883a 	mov	r3,r2
8112bd68:	e0bfff17 	ldw	r2,-4(fp)
8112bd6c:	1080040b 	ldhu	r2,16(r2)
8112bd70:	10bfffcc 	andi	r2,r2,65535
8112bd74:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
8112bd78:	d0a09817 	ldw	r2,-32160(gp)
8112bd7c:	10c00a17 	ldw	r3,40(r2)
8112bd80:	e0bffe17 	ldw	r2,-8(fp)
8112bd84:	1885883a 	add	r2,r3,r2
8112bd88:	10800584 	addi	r2,r2,22
8112bd8c:	1007883a 	mov	r3,r2
8112bd90:	e0bfff17 	ldw	r2,-4(fp)
8112bd94:	1080048b 	ldhu	r2,18(r2)
8112bd98:	10bfffcc 	andi	r2,r2,65535
8112bd9c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
8112bda0:	d0a09817 	ldw	r2,-32160(gp)
8112bda4:	10c00a17 	ldw	r3,40(r2)
8112bda8:	e0bffe17 	ldw	r2,-8(fp)
8112bdac:	1885883a 	add	r2,r3,r2
8112bdb0:	10800604 	addi	r2,r2,24
8112bdb4:	1007883a 	mov	r3,r2
8112bdb8:	e0bfff17 	ldw	r2,-4(fp)
8112bdbc:	1080050b 	ldhu	r2,20(r2)
8112bdc0:	10bfffcc 	andi	r2,r2,65535
8112bdc4:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
8112bdc8:	d0a09817 	ldw	r2,-32160(gp)
8112bdcc:	10c00a17 	ldw	r3,40(r2)
8112bdd0:	e0bffe17 	ldw	r2,-8(fp)
8112bdd4:	1885883a 	add	r2,r3,r2
8112bdd8:	10800684 	addi	r2,r2,26
8112bddc:	1007883a 	mov	r3,r2
8112bde0:	e0bfff17 	ldw	r2,-4(fp)
8112bde4:	1080058b 	ldhu	r2,22(r2)
8112bde8:	10bfffcc 	andi	r2,r2,65535
8112bdec:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
8112bdf0:	d0a09817 	ldw	r2,-32160(gp)
8112bdf4:	10c00a17 	ldw	r3,40(r2)
8112bdf8:	e0bffe17 	ldw	r2,-8(fp)
8112bdfc:	1885883a 	add	r2,r3,r2
8112be00:	10800704 	addi	r2,r2,28
8112be04:	1007883a 	mov	r3,r2
8112be08:	e0bfff17 	ldw	r2,-4(fp)
8112be0c:	10800617 	ldw	r2,24(r2)
8112be10:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
8112be14:	00800044 	movi	r2,1
8112be18:	d0a09915 	stw	r2,-32156(gp)
        result = true;
8112be1c:	00800044 	movi	r2,1
8112be20:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
8112be24:	e0bffb17 	ldw	r2,-20(fp)
}
8112be28:	e037883a 	mov	sp,fp
8112be2c:	dfc00117 	ldw	ra,4(sp)
8112be30:	df000017 	ldw	fp,0(sp)
8112be34:	dec00204 	addi	sp,sp,8
8112be38:	f800283a 	ret

8112be3c <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
8112be3c:	defff904 	addi	sp,sp,-28
8112be40:	dfc00615 	stw	ra,24(sp)
8112be44:	df000515 	stw	fp,20(sp)
8112be48:	df000504 	addi	fp,sp,20
8112be4c:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
8112be50:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
8112be54:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
8112be58:	e17fff17 	ldw	r5,-4(fp)
8112be5c:	0009883a 	mov	r4,zero
8112be60:	112b5240 	call	8112b524 <Read_Sector_Data>
8112be64:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
8112be68:	d0a09817 	ldw	r2,-32160(gp)
8112be6c:	10800a17 	ldw	r2,40(r2)
8112be70:	10807f84 	addi	r2,r2,510
8112be74:	1080002b 	ldhuio	r2,0(r2)
8112be78:	10bfffcc 	andi	r2,r2,65535
8112be7c:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
8112be80:	e0bffe0f 	ldh	r2,-8(fp)
8112be84:	10ffffcc 	andi	r3,r2,65535
8112be88:	00aa9554 	movui	r2,43605
8112be8c:	1881841e 	bne	r3,r2,8112c4a0 <Check_for_DOS_FAT+0x664>
8112be90:	e0bffb17 	ldw	r2,-20(fp)
8112be94:	10018226 	beq	r2,zero,8112c4a0 <Check_for_DOS_FAT+0x664>
	{
		int num_clusters = 0;
8112be98:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
8112be9c:	d0a09817 	ldw	r2,-32160(gp)
8112bea0:	10800a17 	ldw	r2,40(r2)
8112bea4:	10800023 	ldbuio	r2,0(r2)
8112bea8:	10803fcc 	andi	r2,r2,255
8112beac:	1007883a 	mov	r3,r2
8112beb0:	00a045b4 	movhi	r2,33046
8112beb4:	10b77b04 	addi	r2,r2,-8724
8112beb8:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
8112bebc:	d0a09817 	ldw	r2,-32160(gp)
8112bec0:	10800a17 	ldw	r2,40(r2)
8112bec4:	10800044 	addi	r2,r2,1
8112bec8:	10800023 	ldbuio	r2,0(r2)
8112becc:	10803fcc 	andi	r2,r2,255
8112bed0:	1007883a 	mov	r3,r2
8112bed4:	00a045b4 	movhi	r2,33046
8112bed8:	10b77b04 	addi	r2,r2,-8724
8112bedc:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
8112bee0:	d0a09817 	ldw	r2,-32160(gp)
8112bee4:	10800a17 	ldw	r2,40(r2)
8112bee8:	10800084 	addi	r2,r2,2
8112beec:	10800023 	ldbuio	r2,0(r2)
8112bef0:	10803fcc 	andi	r2,r2,255
8112bef4:	1007883a 	mov	r3,r2
8112bef8:	00a045b4 	movhi	r2,33046
8112befc:	10b77b04 	addi	r2,r2,-8724
8112bf00:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
8112bf04:	e03ffc15 	stw	zero,-16(fp)
8112bf08:	00001106 	br	8112bf50 <Check_for_DOS_FAT+0x114>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
8112bf0c:	d0a09817 	ldw	r2,-32160(gp)
8112bf10:	10c00a17 	ldw	r3,40(r2)
8112bf14:	e0bffc17 	ldw	r2,-16(fp)
8112bf18:	1885883a 	add	r2,r3,r2
8112bf1c:	108000c4 	addi	r2,r2,3
8112bf20:	10800023 	ldbuio	r2,0(r2)
8112bf24:	10803fcc 	andi	r2,r2,255
8112bf28:	1009883a 	mov	r4,r2
8112bf2c:	00a045b4 	movhi	r2,33046
8112bf30:	10b77b04 	addi	r2,r2,-8724
8112bf34:	e0fffc17 	ldw	r3,-16(fp)
8112bf38:	10c5883a 	add	r2,r2,r3
8112bf3c:	108000c4 	addi	r2,r2,3
8112bf40:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
8112bf44:	e0bffc17 	ldw	r2,-16(fp)
8112bf48:	10800044 	addi	r2,r2,1
8112bf4c:	e0bffc15 	stw	r2,-16(fp)
8112bf50:	e0bffc17 	ldw	r2,-16(fp)
8112bf54:	10800210 	cmplti	r2,r2,8
8112bf58:	103fec1e 	bne	r2,zero,8112bf0c <__reset+0xfb10bf0c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
8112bf5c:	d0a09817 	ldw	r2,-32160(gp)
8112bf60:	10800a17 	ldw	r2,40(r2)
8112bf64:	10800304 	addi	r2,r2,12
8112bf68:	10800023 	ldbuio	r2,0(r2)
8112bf6c:	10803fcc 	andi	r2,r2,255
8112bf70:	1004923a 	slli	r2,r2,8
8112bf74:	1007883a 	mov	r3,r2
8112bf78:	d0a09817 	ldw	r2,-32160(gp)
8112bf7c:	10800a17 	ldw	r2,40(r2)
8112bf80:	108002c4 	addi	r2,r2,11
8112bf84:	10800023 	ldbuio	r2,0(r2)
8112bf88:	10803fcc 	andi	r2,r2,255
8112bf8c:	10803fcc 	andi	r2,r2,255
8112bf90:	1080201c 	xori	r2,r2,128
8112bf94:	10bfe004 	addi	r2,r2,-128
8112bf98:	1884b03a 	or	r2,r3,r2
8112bf9c:	1007883a 	mov	r3,r2
8112bfa0:	00a045b4 	movhi	r2,33046
8112bfa4:	10b77b04 	addi	r2,r2,-8724
8112bfa8:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
8112bfac:	d0a09817 	ldw	r2,-32160(gp)
8112bfb0:	10800a17 	ldw	r2,40(r2)
8112bfb4:	10800344 	addi	r2,r2,13
8112bfb8:	10800023 	ldbuio	r2,0(r2)
8112bfbc:	10803fcc 	andi	r2,r2,255
8112bfc0:	1007883a 	mov	r3,r2
8112bfc4:	00a045b4 	movhi	r2,33046
8112bfc8:	10b77b04 	addi	r2,r2,-8724
8112bfcc:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
8112bfd0:	d0a09817 	ldw	r2,-32160(gp)
8112bfd4:	10800a17 	ldw	r2,40(r2)
8112bfd8:	10800384 	addi	r2,r2,14
8112bfdc:	1080002b 	ldhuio	r2,0(r2)
8112bfe0:	10bfffcc 	andi	r2,r2,65535
8112bfe4:	1007883a 	mov	r3,r2
8112bfe8:	00a045b4 	movhi	r2,33046
8112bfec:	10b77b04 	addi	r2,r2,-8724
8112bff0:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
8112bff4:	d0a09817 	ldw	r2,-32160(gp)
8112bff8:	10800a17 	ldw	r2,40(r2)
8112bffc:	10800404 	addi	r2,r2,16
8112c000:	10800023 	ldbuio	r2,0(r2)
8112c004:	10803fcc 	andi	r2,r2,255
8112c008:	1007883a 	mov	r3,r2
8112c00c:	00a045b4 	movhi	r2,33046
8112c010:	10b77b04 	addi	r2,r2,-8724
8112c014:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
8112c018:	d0a09817 	ldw	r2,-32160(gp)
8112c01c:	10800a17 	ldw	r2,40(r2)
8112c020:	10800484 	addi	r2,r2,18
8112c024:	10800023 	ldbuio	r2,0(r2)
8112c028:	10803fcc 	andi	r2,r2,255
8112c02c:	1004923a 	slli	r2,r2,8
8112c030:	1007883a 	mov	r3,r2
8112c034:	d0a09817 	ldw	r2,-32160(gp)
8112c038:	10800a17 	ldw	r2,40(r2)
8112c03c:	10800444 	addi	r2,r2,17
8112c040:	10800023 	ldbuio	r2,0(r2)
8112c044:	10803fcc 	andi	r2,r2,255
8112c048:	10803fcc 	andi	r2,r2,255
8112c04c:	1884b03a 	or	r2,r3,r2
8112c050:	1007883a 	mov	r3,r2
8112c054:	00a045b4 	movhi	r2,33046
8112c058:	10b77b04 	addi	r2,r2,-8724
8112c05c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
8112c060:	d0a09817 	ldw	r2,-32160(gp)
8112c064:	10800a17 	ldw	r2,40(r2)
8112c068:	10800504 	addi	r2,r2,20
8112c06c:	10800023 	ldbuio	r2,0(r2)
8112c070:	10803fcc 	andi	r2,r2,255
8112c074:	1004923a 	slli	r2,r2,8
8112c078:	1007883a 	mov	r3,r2
8112c07c:	d0a09817 	ldw	r2,-32160(gp)
8112c080:	10800a17 	ldw	r2,40(r2)
8112c084:	108004c4 	addi	r2,r2,19
8112c088:	10800023 	ldbuio	r2,0(r2)
8112c08c:	10803fcc 	andi	r2,r2,255
8112c090:	10803fcc 	andi	r2,r2,255
8112c094:	1884b03a 	or	r2,r3,r2
8112c098:	1007883a 	mov	r3,r2
8112c09c:	00a045b4 	movhi	r2,33046
8112c0a0:	10b77b04 	addi	r2,r2,-8724
8112c0a4:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
8112c0a8:	d0a09817 	ldw	r2,-32160(gp)
8112c0ac:	10800a17 	ldw	r2,40(r2)
8112c0b0:	10800544 	addi	r2,r2,21
8112c0b4:	10800023 	ldbuio	r2,0(r2)
8112c0b8:	10803fcc 	andi	r2,r2,255
8112c0bc:	1007883a 	mov	r3,r2
8112c0c0:	00a045b4 	movhi	r2,33046
8112c0c4:	10b77b04 	addi	r2,r2,-8724
8112c0c8:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
8112c0cc:	d0a09817 	ldw	r2,-32160(gp)
8112c0d0:	10800a17 	ldw	r2,40(r2)
8112c0d4:	10800584 	addi	r2,r2,22
8112c0d8:	1080002b 	ldhuio	r2,0(r2)
8112c0dc:	10bfffcc 	andi	r2,r2,65535
8112c0e0:	1007883a 	mov	r3,r2
8112c0e4:	00a045b4 	movhi	r2,33046
8112c0e8:	10b77b04 	addi	r2,r2,-8724
8112c0ec:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
8112c0f0:	d0a09817 	ldw	r2,-32160(gp)
8112c0f4:	10800a17 	ldw	r2,40(r2)
8112c0f8:	10800604 	addi	r2,r2,24
8112c0fc:	1080002b 	ldhuio	r2,0(r2)
8112c100:	10bfffcc 	andi	r2,r2,65535
8112c104:	1007883a 	mov	r3,r2
8112c108:	00a045b4 	movhi	r2,33046
8112c10c:	10b77b04 	addi	r2,r2,-8724
8112c110:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
8112c114:	d0a09817 	ldw	r2,-32160(gp)
8112c118:	10800a17 	ldw	r2,40(r2)
8112c11c:	10800684 	addi	r2,r2,26
8112c120:	1080002b 	ldhuio	r2,0(r2)
8112c124:	10bfffcc 	andi	r2,r2,65535
8112c128:	1007883a 	mov	r3,r2
8112c12c:	00a045b4 	movhi	r2,33046
8112c130:	10b77b04 	addi	r2,r2,-8724
8112c134:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
8112c138:	d0a09817 	ldw	r2,-32160(gp)
8112c13c:	10800a17 	ldw	r2,40(r2)
8112c140:	10800704 	addi	r2,r2,28
8112c144:	10800037 	ldwio	r2,0(r2)
8112c148:	1007883a 	mov	r3,r2
8112c14c:	00a045b4 	movhi	r2,33046
8112c150:	10b77b04 	addi	r2,r2,-8724
8112c154:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
8112c158:	d0a09817 	ldw	r2,-32160(gp)
8112c15c:	10800a17 	ldw	r2,40(r2)
8112c160:	10800804 	addi	r2,r2,32
8112c164:	10800037 	ldwio	r2,0(r2)
8112c168:	1007883a 	mov	r3,r2
8112c16c:	00a045b4 	movhi	r2,33046
8112c170:	10b77b04 	addi	r2,r2,-8724
8112c174:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
8112c178:	d0a09817 	ldw	r2,-32160(gp)
8112c17c:	10800a17 	ldw	r2,40(r2)
8112c180:	10800904 	addi	r2,r2,36
8112c184:	10800023 	ldbuio	r2,0(r2)
8112c188:	10803fcc 	andi	r2,r2,255
8112c18c:	1007883a 	mov	r3,r2
8112c190:	00a045b4 	movhi	r2,33046
8112c194:	10b77b04 	addi	r2,r2,-8724
8112c198:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
8112c19c:	d0a09817 	ldw	r2,-32160(gp)
8112c1a0:	10800a17 	ldw	r2,40(r2)
8112c1a4:	10800944 	addi	r2,r2,37
8112c1a8:	10800023 	ldbuio	r2,0(r2)
8112c1ac:	10803fcc 	andi	r2,r2,255
8112c1b0:	1007883a 	mov	r3,r2
8112c1b4:	00a045b4 	movhi	r2,33046
8112c1b8:	10b77b04 	addi	r2,r2,-8724
8112c1bc:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
8112c1c0:	d0a09817 	ldw	r2,-32160(gp)
8112c1c4:	10800a17 	ldw	r2,40(r2)
8112c1c8:	10800984 	addi	r2,r2,38
8112c1cc:	10800023 	ldbuio	r2,0(r2)
8112c1d0:	10803fcc 	andi	r2,r2,255
8112c1d4:	1007883a 	mov	r3,r2
8112c1d8:	00a045b4 	movhi	r2,33046
8112c1dc:	10b77b04 	addi	r2,r2,-8724
8112c1e0:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
8112c1e4:	00a045b4 	movhi	r2,33046
8112c1e8:	10b77b04 	addi	r2,r2,-8724
8112c1ec:	1080040b 	ldhu	r2,16(r2)
8112c1f0:	10ffffcc 	andi	r3,r2,65535
8112c1f4:	00a045b4 	movhi	r2,33046
8112c1f8:	10b77b04 	addi	r2,r2,-8724
8112c1fc:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
8112c200:	00a045b4 	movhi	r2,33046
8112c204:	10b77b04 	addi	r2,r2,-8724
8112c208:	10c01117 	ldw	r3,68(r2)
8112c20c:	00a045b4 	movhi	r2,33046
8112c210:	10b77b04 	addi	r2,r2,-8724
8112c214:	1080068b 	ldhu	r2,26(r2)
8112c218:	10bfffcc 	andi	r2,r2,65535
8112c21c:	1887883a 	add	r3,r3,r2
8112c220:	00a045b4 	movhi	r2,33046
8112c224:	10b77b04 	addi	r2,r2,-8724
8112c228:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
8112c22c:	00a045b4 	movhi	r2,33046
8112c230:	10b77b04 	addi	r2,r2,-8724
8112c234:	10c01217 	ldw	r3,72(r2)
8112c238:	00a045b4 	movhi	r2,33046
8112c23c:	10b77b04 	addi	r2,r2,-8724
8112c240:	1080068b 	ldhu	r2,26(r2)
8112c244:	10bfffcc 	andi	r2,r2,65535
8112c248:	1887883a 	add	r3,r3,r2
8112c24c:	00a045b4 	movhi	r2,33046
8112c250:	10b77b04 	addi	r2,r2,-8724
8112c254:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
8112c258:	00a045b4 	movhi	r2,33046
8112c25c:	10b77b04 	addi	r2,r2,-8724
8112c260:	10c01317 	ldw	r3,76(r2)
8112c264:	00a045b4 	movhi	r2,33046
8112c268:	10b77b04 	addi	r2,r2,-8724
8112c26c:	1080050b 	ldhu	r2,20(r2)
8112c270:	10bfffcc 	andi	r2,r2,65535
8112c274:	1008917a 	slli	r4,r2,5
8112c278:	00a045b4 	movhi	r2,33046
8112c27c:	10b77b04 	addi	r2,r2,-8724
8112c280:	1080030b 	ldhu	r2,12(r2)
8112c284:	10bfffcc 	andi	r2,r2,65535
8112c288:	2085283a 	div	r2,r4,r2
8112c28c:	1887883a 	add	r3,r3,r2
8112c290:	00a045b4 	movhi	r2,33046
8112c294:	10b77b04 	addi	r2,r2,-8724
8112c298:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
8112c29c:	00a045b4 	movhi	r2,33046
8112c2a0:	10b77b04 	addi	r2,r2,-8724
8112c2a4:	1080058b 	ldhu	r2,22(r2)
8112c2a8:	10bfffcc 	andi	r2,r2,65535
8112c2ac:	10000b26 	beq	r2,zero,8112c2dc <Check_for_DOS_FAT+0x4a0>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
8112c2b0:	00a045b4 	movhi	r2,33046
8112c2b4:	10b77b04 	addi	r2,r2,-8724
8112c2b8:	1080058b 	ldhu	r2,22(r2)
8112c2bc:	10ffffcc 	andi	r3,r2,65535
8112c2c0:	00a045b4 	movhi	r2,33046
8112c2c4:	10b77b04 	addi	r2,r2,-8724
8112c2c8:	10800383 	ldbu	r2,14(r2)
8112c2cc:	10803fcc 	andi	r2,r2,255
8112c2d0:	1885283a 	div	r2,r3,r2
8112c2d4:	e0bffd15 	stw	r2,-12(fp)
8112c2d8:	00000906 	br	8112c300 <Check_for_DOS_FAT+0x4c4>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
8112c2dc:	00a045b4 	movhi	r2,33046
8112c2e0:	10b77b04 	addi	r2,r2,-8724
8112c2e4:	10c00917 	ldw	r3,36(r2)
8112c2e8:	00a045b4 	movhi	r2,33046
8112c2ec:	10b77b04 	addi	r2,r2,-8724
8112c2f0:	10800383 	ldbu	r2,14(r2)
8112c2f4:	10803fcc 	andi	r2,r2,255
8112c2f8:	1885203a 	divu	r2,r3,r2
8112c2fc:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
8112c300:	e0bffd17 	ldw	r2,-12(fp)
8112c304:	1083fdc8 	cmpgei	r2,r2,4087
8112c308:	1000051e 	bne	r2,zero,8112c320 <Check_for_DOS_FAT+0x4e4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
8112c30c:	00a045b4 	movhi	r2,33046
8112c310:	10b77b04 	addi	r2,r2,-8724
8112c314:	00c00304 	movi	r3,12
8112c318:	10c01085 	stb	r3,66(r2)
8112c31c:	00000c06 	br	8112c350 <Check_for_DOS_FAT+0x514>
		}
		else if (num_clusters <= 65517)
8112c320:	e0bffd17 	ldw	r2,-12(fp)
8112c324:	00fffb54 	movui	r3,65517
8112c328:	18800516 	blt	r3,r2,8112c340 <Check_for_DOS_FAT+0x504>
		{
			boot_sector_data.bits_for_cluster_index = 16;
8112c32c:	00a045b4 	movhi	r2,33046
8112c330:	10b77b04 	addi	r2,r2,-8724
8112c334:	00c00404 	movi	r3,16
8112c338:	10c01085 	stb	r3,66(r2)
8112c33c:	00000406 	br	8112c350 <Check_for_DOS_FAT+0x514>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
8112c340:	00a045b4 	movhi	r2,33046
8112c344:	10b77b04 	addi	r2,r2,-8724
8112c348:	00c00804 	movi	r3,32
8112c34c:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
8112c350:	e03ffc15 	stw	zero,-16(fp)
8112c354:	00001106 	br	8112c39c <Check_for_DOS_FAT+0x560>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
8112c358:	d0a09817 	ldw	r2,-32160(gp)
8112c35c:	10c00a17 	ldw	r3,40(r2)
8112c360:	e0bffc17 	ldw	r2,-16(fp)
8112c364:	1885883a 	add	r2,r3,r2
8112c368:	108009c4 	addi	r2,r2,39
8112c36c:	10800023 	ldbuio	r2,0(r2)
8112c370:	10803fcc 	andi	r2,r2,255
8112c374:	1009883a 	mov	r4,r2
8112c378:	00a045b4 	movhi	r2,33046
8112c37c:	10b77b04 	addi	r2,r2,-8724
8112c380:	e0fffc17 	ldw	r3,-16(fp)
8112c384:	10c5883a 	add	r2,r2,r3
8112c388:	10800ac4 	addi	r2,r2,43
8112c38c:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
8112c390:	e0bffc17 	ldw	r2,-16(fp)
8112c394:	10800044 	addi	r2,r2,1
8112c398:	e0bffc15 	stw	r2,-16(fp)
8112c39c:	e0bffc17 	ldw	r2,-16(fp)
8112c3a0:	10800110 	cmplti	r2,r2,4
8112c3a4:	103fec1e 	bne	r2,zero,8112c358 <__reset+0xfb10c358>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8112c3a8:	e03ffc15 	stw	zero,-16(fp)
8112c3ac:	00001106 	br	8112c3f4 <Check_for_DOS_FAT+0x5b8>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
8112c3b0:	d0a09817 	ldw	r2,-32160(gp)
8112c3b4:	10c00a17 	ldw	r3,40(r2)
8112c3b8:	e0bffc17 	ldw	r2,-16(fp)
8112c3bc:	1885883a 	add	r2,r3,r2
8112c3c0:	10800ac4 	addi	r2,r2,43
8112c3c4:	10800023 	ldbuio	r2,0(r2)
8112c3c8:	10803fcc 	andi	r2,r2,255
8112c3cc:	1009883a 	mov	r4,r2
8112c3d0:	00a045b4 	movhi	r2,33046
8112c3d4:	10b77b04 	addi	r2,r2,-8724
8112c3d8:	e0fffc17 	ldw	r3,-16(fp)
8112c3dc:	10c5883a 	add	r2,r2,r3
8112c3e0:	10800bc4 	addi	r2,r2,47
8112c3e4:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
8112c3e8:	e0bffc17 	ldw	r2,-16(fp)
8112c3ec:	10800044 	addi	r2,r2,1
8112c3f0:	e0bffc15 	stw	r2,-16(fp)
8112c3f4:	e0bffc17 	ldw	r2,-16(fp)
8112c3f8:	108002d0 	cmplti	r2,r2,11
8112c3fc:	103fec1e 	bne	r2,zero,8112c3b0 <__reset+0xfb10c3b0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8112c400:	e03ffc15 	stw	zero,-16(fp)
8112c404:	00001106 	br	8112c44c <Check_for_DOS_FAT+0x610>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
8112c408:	d0a09817 	ldw	r2,-32160(gp)
8112c40c:	10c00a17 	ldw	r3,40(r2)
8112c410:	e0bffc17 	ldw	r2,-16(fp)
8112c414:	1885883a 	add	r2,r3,r2
8112c418:	10800d84 	addi	r2,r2,54
8112c41c:	10800023 	ldbuio	r2,0(r2)
8112c420:	10803fcc 	andi	r2,r2,255
8112c424:	1009883a 	mov	r4,r2
8112c428:	00a045b4 	movhi	r2,33046
8112c42c:	10b77b04 	addi	r2,r2,-8724
8112c430:	e0fffc17 	ldw	r3,-16(fp)
8112c434:	10c5883a 	add	r2,r2,r3
8112c438:	10800e84 	addi	r2,r2,58
8112c43c:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8112c440:	e0bffc17 	ldw	r2,-16(fp)
8112c444:	10800044 	addi	r2,r2,1
8112c448:	e0bffc15 	stw	r2,-16(fp)
8112c44c:	e0bffc17 	ldw	r2,-16(fp)
8112c450:	10800210 	cmplti	r2,r2,8
8112c454:	103fec1e 	bne	r2,zero,8112c408 <__reset+0xfb10c408>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8112c458:	e03ffc15 	stw	zero,-16(fp)
8112c45c:	00000a06 	br	8112c488 <Check_for_DOS_FAT+0x64c>
		{
			active_files[counter].in_use = false;
8112c460:	00a045b4 	movhi	r2,33046
8112c464:	10b79004 	addi	r2,r2,-8640
8112c468:	e0fffc17 	ldw	r3,-16(fp)
8112c46c:	180691ba 	slli	r3,r3,6
8112c470:	10c5883a 	add	r2,r2,r3
8112c474:	10800f04 	addi	r2,r2,60
8112c478:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
8112c47c:	e0bffc17 	ldw	r2,-16(fp)
8112c480:	10800044 	addi	r2,r2,1
8112c484:	e0bffc15 	stw	r2,-16(fp)
8112c488:	e0bffc17 	ldw	r2,-16(fp)
8112c48c:	10800510 	cmplti	r2,r2,20
8112c490:	103ff31e 	bne	r2,zero,8112c460 <__reset+0xfb10c460>
		{
			active_files[counter].in_use = false;
		}
		result = true;
8112c494:	00800044 	movi	r2,1
8112c498:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
8112c49c:	00000106 	br	8112c4a4 <Check_for_DOS_FAT+0x668>
		}
		result = true;
	}
    else
    {
        result = false;
8112c4a0:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
8112c4a4:	e0bffb17 	ldw	r2,-20(fp)
}
8112c4a8:	e037883a 	mov	sp,fp
8112c4ac:	dfc00117 	ldw	ra,4(sp)
8112c4b0:	df000017 	ldw	fp,0(sp)
8112c4b4:	dec00204 	addi	sp,sp,8
8112c4b8:	f800283a 	ret

8112c4bc <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
8112c4bc:	defffc04 	addi	sp,sp,-16
8112c4c0:	dfc00315 	stw	ra,12(sp)
8112c4c4:	df000215 	stw	fp,8(sp)
8112c4c8:	df000204 	addi	fp,sp,8
	bool result = false;
8112c4cc:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
8112c4d0:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112c4d4:	10002e26 	beq	r2,zero,8112c590 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
8112c4d8:	d0a09217 	ldw	r2,-32184(gp)
8112c4dc:	1080000b 	ldhu	r2,0(r2)
8112c4e0:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
8112c4e4:	d0209615 	stw	zero,-32168(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
8112c4e8:	d0209715 	stw	zero,-32164(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
8112c4ec:	e0bfff0f 	ldh	r2,-4(fp)
8112c4f0:	10002716 	blt	r2,zero,8112c590 <Look_for_FAT16+0xd4>
8112c4f4:	e0bfff0b 	ldhu	r2,-4(fp)
8112c4f8:	10bfffcc 	andi	r2,r2,65535
8112c4fc:	1083000c 	andi	r2,r2,3072
8112c500:	10830020 	cmpeqi	r2,r2,3072
8112c504:	1000221e 	bne	r2,zero,8112c590 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
8112c508:	e0bfff0b 	ldhu	r2,-4(fp)
8112c50c:	10bfffcc 	andi	r2,r2,65535
8112c510:	1083000c 	andi	r2,r2,3072
8112c514:	10810018 	cmpnei	r2,r2,1024
8112c518:	1000031e 	bne	r2,zero,8112c528 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
8112c51c:	0009883a 	mov	r4,zero
8112c520:	112be3c0 	call	8112be3c <Check_for_DOS_FAT>
8112c524:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
8112c528:	e0bfff0b 	ldhu	r2,-4(fp)
8112c52c:	10bfffcc 	andi	r2,r2,65535
8112c530:	1083000c 	andi	r2,r2,3072
8112c534:	1000061e 	bne	r2,zero,8112c550 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
8112c538:	112b7900 	call	8112b790 <Check_for_Master_Boot_Record>
8112c53c:	10000426 	beq	r2,zero,8112c550 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
8112c540:	d0a09617 	ldw	r2,-32168(gp)
8112c544:	1009883a 	mov	r4,r2
8112c548:	112be3c0 	call	8112be3c <Check_for_DOS_FAT>
8112c54c:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
8112c550:	e0bffe17 	ldw	r2,-8(fp)
8112c554:	10800058 	cmpnei	r2,r2,1
8112c558:	10000d1e 	bne	r2,zero,8112c590 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
8112c55c:	00a045b4 	movhi	r2,33046
8112c560:	10b77b04 	addi	r2,r2,-8724
8112c564:	10801083 	ldbu	r2,66(r2)
8112c568:	10803fcc 	andi	r2,r2,255
8112c56c:	10800420 	cmpeqi	r2,r2,16
8112c570:	1000021e 	bne	r2,zero,8112c57c <Look_for_FAT16+0xc0>
				{
					result = false;
8112c574:	e03ffe15 	stw	zero,-8(fp)
8112c578:	00000506 	br	8112c590 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
8112c57c:	00a045b4 	movhi	r2,33046
8112c580:	10b77b04 	addi	r2,r2,-8724
8112c584:	1080058b 	ldhu	r2,22(r2)
8112c588:	10bfffcc 	andi	r2,r2,65535
8112c58c:	d0a09715 	stw	r2,-32164(gp)
				}
			}
		}
	}
	return result;
8112c590:	e0bffe17 	ldw	r2,-8(fp)
}
8112c594:	e037883a 	mov	sp,fp
8112c598:	dfc00117 	ldw	ra,4(sp)
8112c59c:	df000017 	ldw	fp,0(sp)
8112c5a0:	dec00204 	addi	sp,sp,8
8112c5a4:	f800283a 	ret

8112c5a8 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
8112c5a8:	defffb04 	addi	sp,sp,-20
8112c5ac:	dfc00415 	stw	ra,16(sp)
8112c5b0:	df000315 	stw	fp,12(sp)
8112c5b4:	df000304 	addi	fp,sp,12
8112c5b8:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
8112c5bc:	e13fff17 	ldw	r4,-4(fp)
8112c5c0:	110ddac0 	call	8110ddac <strlen>
8112c5c4:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
8112c5c8:	e03ffd15 	stw	zero,-12(fp)
8112c5cc:	00001e06 	br	8112c648 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
8112c5d0:	e0bffd17 	ldw	r2,-12(fp)
8112c5d4:	e0ffff17 	ldw	r3,-4(fp)
8112c5d8:	1885883a 	add	r2,r3,r2
8112c5dc:	10800003 	ldbu	r2,0(r2)
8112c5e0:	10803fcc 	andi	r2,r2,255
8112c5e4:	1080201c 	xori	r2,r2,128
8112c5e8:	10bfe004 	addi	r2,r2,-128
8112c5ec:	10801850 	cmplti	r2,r2,97
8112c5f0:	1000121e 	bne	r2,zero,8112c63c <filename_to_upper_case+0x94>
8112c5f4:	e0bffd17 	ldw	r2,-12(fp)
8112c5f8:	e0ffff17 	ldw	r3,-4(fp)
8112c5fc:	1885883a 	add	r2,r3,r2
8112c600:	10800003 	ldbu	r2,0(r2)
8112c604:	10803fcc 	andi	r2,r2,255
8112c608:	1080201c 	xori	r2,r2,128
8112c60c:	10bfe004 	addi	r2,r2,-128
8112c610:	10801ec8 	cmpgei	r2,r2,123
8112c614:	1000091e 	bne	r2,zero,8112c63c <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
8112c618:	e0bffd17 	ldw	r2,-12(fp)
8112c61c:	e0ffff17 	ldw	r3,-4(fp)
8112c620:	1885883a 	add	r2,r3,r2
8112c624:	e0fffd17 	ldw	r3,-12(fp)
8112c628:	e13fff17 	ldw	r4,-4(fp)
8112c62c:	20c7883a 	add	r3,r4,r3
8112c630:	18c00003 	ldbu	r3,0(r3)
8112c634:	18fff804 	addi	r3,r3,-32
8112c638:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
8112c63c:	e0bffd17 	ldw	r2,-12(fp)
8112c640:	10800044 	addi	r2,r2,1
8112c644:	e0bffd15 	stw	r2,-12(fp)
8112c648:	e0fffd17 	ldw	r3,-12(fp)
8112c64c:	e0bffe17 	ldw	r2,-8(fp)
8112c650:	18bfdf16 	blt	r3,r2,8112c5d0 <__reset+0xfb10c5d0>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
8112c654:	0001883a 	nop
8112c658:	e037883a 	mov	sp,fp
8112c65c:	dfc00117 	ldw	ra,4(sp)
8112c660:	df000017 	ldw	fp,0(sp)
8112c664:	dec00204 	addi	sp,sp,8
8112c668:	f800283a 	ret

8112c66c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
8112c66c:	defff804 	addi	sp,sp,-32
8112c670:	dfc00715 	stw	ra,28(sp)
8112c674:	df000615 	stw	fp,24(sp)
8112c678:	df000604 	addi	fp,sp,24
8112c67c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
8112c680:	e13fff17 	ldw	r4,-4(fp)
8112c684:	110ddac0 	call	8110ddac <strlen>
8112c688:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
8112c68c:	00bfffc4 	movi	r2,-1
8112c690:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
8112c694:	00bfffc4 	movi	r2,-1
8112c698:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
8112c69c:	00800044 	movi	r2,1
8112c6a0:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
8112c6a4:	e03ffa15 	stw	zero,-24(fp)
8112c6a8:	00006d06 	br	8112c860 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
8112c6ac:	e0bffa17 	ldw	r2,-24(fp)
8112c6b0:	e0ffff17 	ldw	r3,-4(fp)
8112c6b4:	1885883a 	add	r2,r3,r2
8112c6b8:	10800003 	ldbu	r2,0(r2)
8112c6bc:	10803fcc 	andi	r2,r2,255
8112c6c0:	1080201c 	xori	r2,r2,128
8112c6c4:	10bfe004 	addi	r2,r2,-128
8112c6c8:	10800820 	cmpeqi	r2,r2,32
8112c6cc:	10003e1e 	bne	r2,zero,8112c7c8 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8112c6d0:	e0bffa17 	ldw	r2,-24(fp)
8112c6d4:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
8112c6d8:	e0bffb17 	ldw	r2,-20(fp)
8112c6dc:	1880121e 	bne	r3,r2,8112c728 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8112c6e0:	e0bffa17 	ldw	r2,-24(fp)
8112c6e4:	e0ffff17 	ldw	r3,-4(fp)
8112c6e8:	1885883a 	add	r2,r3,r2
8112c6ec:	10800003 	ldbu	r2,0(r2)
8112c6f0:	10803fcc 	andi	r2,r2,255
8112c6f4:	1080201c 	xori	r2,r2,128
8112c6f8:	10bfe004 	addi	r2,r2,-128
8112c6fc:	10801720 	cmpeqi	r2,r2,92
8112c700:	1000311e 	bne	r2,zero,8112c7c8 <check_file_name_for_FAT16_compliance+0x15c>
8112c704:	e0bffa17 	ldw	r2,-24(fp)
8112c708:	e0ffff17 	ldw	r3,-4(fp)
8112c70c:	1885883a 	add	r2,r3,r2
8112c710:	10800003 	ldbu	r2,0(r2)
8112c714:	10803fcc 	andi	r2,r2,255
8112c718:	1080201c 	xori	r2,r2,128
8112c71c:	10bfe004 	addi	r2,r2,-128
8112c720:	10800be0 	cmpeqi	r2,r2,47
8112c724:	1000281e 	bne	r2,zero,8112c7c8 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
8112c728:	e0fffa17 	ldw	r3,-24(fp)
8112c72c:	e0bffc17 	ldw	r2,-16(fp)
8112c730:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
8112c734:	10800258 	cmpnei	r2,r2,9
8112c738:	1000091e 	bne	r2,zero,8112c760 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
8112c73c:	e0bffa17 	ldw	r2,-24(fp)
8112c740:	e0ffff17 	ldw	r3,-4(fp)
8112c744:	1885883a 	add	r2,r3,r2
8112c748:	10800003 	ldbu	r2,0(r2)
8112c74c:	10803fcc 	andi	r2,r2,255
8112c750:	1080201c 	xori	r2,r2,128
8112c754:	10bfe004 	addi	r2,r2,-128
8112c758:	10800b98 	cmpnei	r2,r2,46
8112c75c:	10001a1e 	bne	r2,zero,8112c7c8 <check_file_name_for_FAT16_compliance+0x15c>
8112c760:	e0fffb17 	ldw	r3,-20(fp)
8112c764:	e0bffc17 	ldw	r2,-16(fp)
8112c768:	18801926 	beq	r3,r2,8112c7d0 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
8112c76c:	e0fffa17 	ldw	r3,-24(fp)
8112c770:	e0bffc17 	ldw	r2,-16(fp)
8112c774:	1885c83a 	sub	r2,r3,r2
8112c778:	10800110 	cmplti	r2,r2,4
8112c77c:	1000141e 	bne	r2,zero,8112c7d0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
8112c780:	e0bffa17 	ldw	r2,-24(fp)
8112c784:	e0ffff17 	ldw	r3,-4(fp)
8112c788:	1885883a 	add	r2,r3,r2
8112c78c:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
8112c790:	10803fcc 	andi	r2,r2,255
8112c794:	1080201c 	xori	r2,r2,128
8112c798:	10bfe004 	addi	r2,r2,-128
8112c79c:	10801720 	cmpeqi	r2,r2,92
8112c7a0:	10000b1e 	bne	r2,zero,8112c7d0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
8112c7a4:	e0bffa17 	ldw	r2,-24(fp)
8112c7a8:	e0ffff17 	ldw	r3,-4(fp)
8112c7ac:	1885883a 	add	r2,r3,r2
8112c7b0:	10800003 	ldbu	r2,0(r2)
8112c7b4:	10803fcc 	andi	r2,r2,255
8112c7b8:	1080201c 	xori	r2,r2,128
8112c7bc:	10bfe004 	addi	r2,r2,-128
8112c7c0:	10800be0 	cmpeqi	r2,r2,47
8112c7c4:	1000021e 	bne	r2,zero,8112c7d0 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
8112c7c8:	e03ffd15 	stw	zero,-12(fp)
            break;
8112c7cc:	00002706 	br	8112c86c <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
8112c7d0:	e0bffa17 	ldw	r2,-24(fp)
8112c7d4:	e0ffff17 	ldw	r3,-4(fp)
8112c7d8:	1885883a 	add	r2,r3,r2
8112c7dc:	10800003 	ldbu	r2,0(r2)
8112c7e0:	10803fcc 	andi	r2,r2,255
8112c7e4:	1080201c 	xori	r2,r2,128
8112c7e8:	10bfe004 	addi	r2,r2,-128
8112c7ec:	10801720 	cmpeqi	r2,r2,92
8112c7f0:	1000091e 	bne	r2,zero,8112c818 <check_file_name_for_FAT16_compliance+0x1ac>
8112c7f4:	e0bffa17 	ldw	r2,-24(fp)
8112c7f8:	e0ffff17 	ldw	r3,-4(fp)
8112c7fc:	1885883a 	add	r2,r3,r2
8112c800:	10800003 	ldbu	r2,0(r2)
8112c804:	10803fcc 	andi	r2,r2,255
8112c808:	1080201c 	xori	r2,r2,128
8112c80c:	10bfe004 	addi	r2,r2,-128
8112c810:	10800bd8 	cmpnei	r2,r2,47
8112c814:	1000041e 	bne	r2,zero,8112c828 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
8112c818:	e0bffa17 	ldw	r2,-24(fp)
8112c81c:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
8112c820:	e0bffa17 	ldw	r2,-24(fp)
8112c824:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
8112c828:	e0bffa17 	ldw	r2,-24(fp)
8112c82c:	e0ffff17 	ldw	r3,-4(fp)
8112c830:	1885883a 	add	r2,r3,r2
8112c834:	10800003 	ldbu	r2,0(r2)
8112c838:	10803fcc 	andi	r2,r2,255
8112c83c:	1080201c 	xori	r2,r2,128
8112c840:	10bfe004 	addi	r2,r2,-128
8112c844:	10800b98 	cmpnei	r2,r2,46
8112c848:	1000021e 	bne	r2,zero,8112c854 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
8112c84c:	e0bffa17 	ldw	r2,-24(fp)
8112c850:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
8112c854:	e0bffa17 	ldw	r2,-24(fp)
8112c858:	10800044 	addi	r2,r2,1
8112c85c:	e0bffa15 	stw	r2,-24(fp)
8112c860:	e0fffa17 	ldw	r3,-24(fp)
8112c864:	e0bffe17 	ldw	r2,-8(fp)
8112c868:	18bf9016 	blt	r3,r2,8112c6ac <__reset+0xfb10c6ac>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
8112c86c:	e0bffe17 	ldw	r2,-8(fp)
8112c870:	10bfffc4 	addi	r2,r2,-1
8112c874:	e0ffff17 	ldw	r3,-4(fp)
8112c878:	1885883a 	add	r2,r3,r2
8112c87c:	10800003 	ldbu	r2,0(r2)
8112c880:	10803fcc 	andi	r2,r2,255
8112c884:	1080201c 	xori	r2,r2,128
8112c888:	10bfe004 	addi	r2,r2,-128
8112c88c:	10801720 	cmpeqi	r2,r2,92
8112c890:	10000a1e 	bne	r2,zero,8112c8bc <check_file_name_for_FAT16_compliance+0x250>
8112c894:	e0bffe17 	ldw	r2,-8(fp)
8112c898:	10bfffc4 	addi	r2,r2,-1
8112c89c:	e0ffff17 	ldw	r3,-4(fp)
8112c8a0:	1885883a 	add	r2,r3,r2
8112c8a4:	10800003 	ldbu	r2,0(r2)
8112c8a8:	10803fcc 	andi	r2,r2,255
8112c8ac:	1080201c 	xori	r2,r2,128
8112c8b0:	10bfe004 	addi	r2,r2,-128
8112c8b4:	10800bd8 	cmpnei	r2,r2,47
8112c8b8:	1000011e 	bne	r2,zero,8112c8c0 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
8112c8bc:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
8112c8c0:	e0bffd17 	ldw	r2,-12(fp)
}
8112c8c4:	e037883a 	mov	sp,fp
8112c8c8:	dfc00117 	ldw	ra,4(sp)
8112c8cc:	df000017 	ldw	fp,0(sp)
8112c8d0:	dec00204 	addi	sp,sp,8
8112c8d4:	f800283a 	ret

8112c8d8 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
8112c8d8:	defffb04 	addi	sp,sp,-20
8112c8dc:	dfc00415 	stw	ra,16(sp)
8112c8e0:	df000315 	stw	fp,12(sp)
8112c8e4:	df000304 	addi	fp,sp,12
8112c8e8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
8112c8ec:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
8112c8f0:	e13fff17 	ldw	r4,-4(fp)
8112c8f4:	110ddac0 	call	8110ddac <strlen>
8112c8f8:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
8112c8fc:	e03ffd15 	stw	zero,-12(fp)
8112c900:	00001506 	br	8112c958 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
8112c904:	e0bffd17 	ldw	r2,-12(fp)
8112c908:	e0ffff17 	ldw	r3,-4(fp)
8112c90c:	1885883a 	add	r2,r3,r2
8112c910:	10800003 	ldbu	r2,0(r2)
8112c914:	10803fcc 	andi	r2,r2,255
8112c918:	1080201c 	xori	r2,r2,128
8112c91c:	10bfe004 	addi	r2,r2,-128
8112c920:	10801720 	cmpeqi	r2,r2,92
8112c924:	10000f1e 	bne	r2,zero,8112c964 <get_dir_divider_location+0x8c>
8112c928:	e0bffd17 	ldw	r2,-12(fp)
8112c92c:	e0ffff17 	ldw	r3,-4(fp)
8112c930:	1885883a 	add	r2,r3,r2
8112c934:	10800003 	ldbu	r2,0(r2)
8112c938:	10803fcc 	andi	r2,r2,255
8112c93c:	1080201c 	xori	r2,r2,128
8112c940:	10bfe004 	addi	r2,r2,-128
8112c944:	10800be0 	cmpeqi	r2,r2,47
8112c948:	1000061e 	bne	r2,zero,8112c964 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
8112c94c:	e0bffd17 	ldw	r2,-12(fp)
8112c950:	10800044 	addi	r2,r2,1
8112c954:	e0bffd15 	stw	r2,-12(fp)
8112c958:	e0fffd17 	ldw	r3,-12(fp)
8112c95c:	e0bffe17 	ldw	r2,-8(fp)
8112c960:	18bfe816 	blt	r3,r2,8112c904 <__reset+0xfb10c904>
        {
            break;
        }
    }
    
    if (index == length)
8112c964:	e0fffd17 	ldw	r3,-12(fp)
8112c968:	e0bffe17 	ldw	r2,-8(fp)
8112c96c:	1880021e 	bne	r3,r2,8112c978 <get_dir_divider_location+0xa0>
    {
        index = -1;
8112c970:	00bfffc4 	movi	r2,-1
8112c974:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
8112c978:	e0bffd17 	ldw	r2,-12(fp)
}
8112c97c:	e037883a 	mov	sp,fp
8112c980:	dfc00117 	ldw	ra,4(sp)
8112c984:	df000017 	ldw	fp,0(sp)
8112c988:	dec00204 	addi	sp,sp,8
8112c98c:	f800283a 	ret

8112c990 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
8112c990:	defffa04 	addi	sp,sp,-24
8112c994:	df000515 	stw	fp,20(sp)
8112c998:	df000504 	addi	fp,sp,20
8112c99c:	e13ffd15 	stw	r4,-12(fp)
8112c9a0:	e17ffe15 	stw	r5,-8(fp)
8112c9a4:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
8112c9a8:	00800044 	movi	r2,1
8112c9ac:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
8112c9b0:	e03ffc15 	stw	zero,-16(fp)
8112c9b4:	00004606 	br	8112cad0 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
8112c9b8:	e0fffd17 	ldw	r3,-12(fp)
8112c9bc:	e0bffc17 	ldw	r2,-16(fp)
8112c9c0:	1885883a 	add	r2,r3,r2
8112c9c4:	10800003 	ldbu	r2,0(r2)
8112c9c8:	10803fcc 	andi	r2,r2,255
8112c9cc:	10801870 	cmpltui	r2,r2,97
8112c9d0:	1000101e 	bne	r2,zero,8112ca14 <match_file_record_to_name_ext+0x84>
8112c9d4:	e0fffd17 	ldw	r3,-12(fp)
8112c9d8:	e0bffc17 	ldw	r2,-16(fp)
8112c9dc:	1885883a 	add	r2,r3,r2
8112c9e0:	10800003 	ldbu	r2,0(r2)
8112c9e4:	10803fcc 	andi	r2,r2,255
8112c9e8:	10801ee8 	cmpgeui	r2,r2,123
8112c9ec:	1000091e 	bne	r2,zero,8112ca14 <match_file_record_to_name_ext+0x84>
8112c9f0:	e0fffd17 	ldw	r3,-12(fp)
8112c9f4:	e0bffc17 	ldw	r2,-16(fp)
8112c9f8:	1885883a 	add	r2,r3,r2
8112c9fc:	10800003 	ldbu	r2,0(r2)
8112ca00:	10bff804 	addi	r2,r2,-32
8112ca04:	10c03fcc 	andi	r3,r2,255
8112ca08:	18c0201c 	xori	r3,r3,128
8112ca0c:	18ffe004 	addi	r3,r3,-128
8112ca10:	00000706 	br	8112ca30 <match_file_record_to_name_ext+0xa0>
8112ca14:	e0fffd17 	ldw	r3,-12(fp)
8112ca18:	e0bffc17 	ldw	r2,-16(fp)
8112ca1c:	1885883a 	add	r2,r3,r2
8112ca20:	10800003 	ldbu	r2,0(r2)
8112ca24:	10c03fcc 	andi	r3,r2,255
8112ca28:	18c0201c 	xori	r3,r3,128
8112ca2c:	18ffe004 	addi	r3,r3,-128
8112ca30:	e0bffc17 	ldw	r2,-16(fp)
8112ca34:	e13ffe17 	ldw	r4,-8(fp)
8112ca38:	2085883a 	add	r2,r4,r2
8112ca3c:	10800003 	ldbu	r2,0(r2)
8112ca40:	10803fcc 	andi	r2,r2,255
8112ca44:	1080201c 	xori	r2,r2,128
8112ca48:	10bfe004 	addi	r2,r2,-128
8112ca4c:	10801850 	cmplti	r2,r2,97
8112ca50:	1000121e 	bne	r2,zero,8112ca9c <match_file_record_to_name_ext+0x10c>
8112ca54:	e0bffc17 	ldw	r2,-16(fp)
8112ca58:	e13ffe17 	ldw	r4,-8(fp)
8112ca5c:	2085883a 	add	r2,r4,r2
8112ca60:	10800003 	ldbu	r2,0(r2)
8112ca64:	10803fcc 	andi	r2,r2,255
8112ca68:	1080201c 	xori	r2,r2,128
8112ca6c:	10bfe004 	addi	r2,r2,-128
8112ca70:	10801ec8 	cmpgei	r2,r2,123
8112ca74:	1000091e 	bne	r2,zero,8112ca9c <match_file_record_to_name_ext+0x10c>
8112ca78:	e0bffc17 	ldw	r2,-16(fp)
8112ca7c:	e13ffe17 	ldw	r4,-8(fp)
8112ca80:	2085883a 	add	r2,r4,r2
8112ca84:	10800003 	ldbu	r2,0(r2)
8112ca88:	10bff804 	addi	r2,r2,-32
8112ca8c:	10803fcc 	andi	r2,r2,255
8112ca90:	1080201c 	xori	r2,r2,128
8112ca94:	10bfe004 	addi	r2,r2,-128
8112ca98:	00000706 	br	8112cab8 <match_file_record_to_name_ext+0x128>
8112ca9c:	e0bffc17 	ldw	r2,-16(fp)
8112caa0:	e13ffe17 	ldw	r4,-8(fp)
8112caa4:	2085883a 	add	r2,r4,r2
8112caa8:	10800003 	ldbu	r2,0(r2)
8112caac:	10803fcc 	andi	r2,r2,255
8112cab0:	1080201c 	xori	r2,r2,128
8112cab4:	10bfe004 	addi	r2,r2,-128
8112cab8:	18800226 	beq	r3,r2,8112cac4 <match_file_record_to_name_ext+0x134>
        {
            match = false;
8112cabc:	e03ffb15 	stw	zero,-20(fp)
			break;
8112cac0:	00000606 	br	8112cadc <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
8112cac4:	e0bffc17 	ldw	r2,-16(fp)
8112cac8:	10800044 	addi	r2,r2,1
8112cacc:	e0bffc15 	stw	r2,-16(fp)
8112cad0:	e0bffc17 	ldw	r2,-16(fp)
8112cad4:	10800210 	cmplti	r2,r2,8
8112cad8:	103fb71e 	bne	r2,zero,8112c9b8 <__reset+0xfb10c9b8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
8112cadc:	e03ffc15 	stw	zero,-16(fp)
8112cae0:	00004a06 	br	8112cc0c <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
8112cae4:	e0fffd17 	ldw	r3,-12(fp)
8112cae8:	e0bffc17 	ldw	r2,-16(fp)
8112caec:	1885883a 	add	r2,r3,r2
8112caf0:	10800204 	addi	r2,r2,8
8112caf4:	10800003 	ldbu	r2,0(r2)
8112caf8:	10803fcc 	andi	r2,r2,255
8112cafc:	10801870 	cmpltui	r2,r2,97
8112cb00:	1000121e 	bne	r2,zero,8112cb4c <match_file_record_to_name_ext+0x1bc>
8112cb04:	e0fffd17 	ldw	r3,-12(fp)
8112cb08:	e0bffc17 	ldw	r2,-16(fp)
8112cb0c:	1885883a 	add	r2,r3,r2
8112cb10:	10800204 	addi	r2,r2,8
8112cb14:	10800003 	ldbu	r2,0(r2)
8112cb18:	10803fcc 	andi	r2,r2,255
8112cb1c:	10801ee8 	cmpgeui	r2,r2,123
8112cb20:	10000a1e 	bne	r2,zero,8112cb4c <match_file_record_to_name_ext+0x1bc>
8112cb24:	e0fffd17 	ldw	r3,-12(fp)
8112cb28:	e0bffc17 	ldw	r2,-16(fp)
8112cb2c:	1885883a 	add	r2,r3,r2
8112cb30:	10800204 	addi	r2,r2,8
8112cb34:	10800003 	ldbu	r2,0(r2)
8112cb38:	10bff804 	addi	r2,r2,-32
8112cb3c:	10c03fcc 	andi	r3,r2,255
8112cb40:	18c0201c 	xori	r3,r3,128
8112cb44:	18ffe004 	addi	r3,r3,-128
8112cb48:	00000806 	br	8112cb6c <match_file_record_to_name_ext+0x1dc>
8112cb4c:	e0fffd17 	ldw	r3,-12(fp)
8112cb50:	e0bffc17 	ldw	r2,-16(fp)
8112cb54:	1885883a 	add	r2,r3,r2
8112cb58:	10800204 	addi	r2,r2,8
8112cb5c:	10800003 	ldbu	r2,0(r2)
8112cb60:	10c03fcc 	andi	r3,r2,255
8112cb64:	18c0201c 	xori	r3,r3,128
8112cb68:	18ffe004 	addi	r3,r3,-128
8112cb6c:	e0bffc17 	ldw	r2,-16(fp)
8112cb70:	e13fff17 	ldw	r4,-4(fp)
8112cb74:	2085883a 	add	r2,r4,r2
8112cb78:	10800003 	ldbu	r2,0(r2)
8112cb7c:	10803fcc 	andi	r2,r2,255
8112cb80:	1080201c 	xori	r2,r2,128
8112cb84:	10bfe004 	addi	r2,r2,-128
8112cb88:	10801850 	cmplti	r2,r2,97
8112cb8c:	1000121e 	bne	r2,zero,8112cbd8 <match_file_record_to_name_ext+0x248>
8112cb90:	e0bffc17 	ldw	r2,-16(fp)
8112cb94:	e13fff17 	ldw	r4,-4(fp)
8112cb98:	2085883a 	add	r2,r4,r2
8112cb9c:	10800003 	ldbu	r2,0(r2)
8112cba0:	10803fcc 	andi	r2,r2,255
8112cba4:	1080201c 	xori	r2,r2,128
8112cba8:	10bfe004 	addi	r2,r2,-128
8112cbac:	10801ec8 	cmpgei	r2,r2,123
8112cbb0:	1000091e 	bne	r2,zero,8112cbd8 <match_file_record_to_name_ext+0x248>
8112cbb4:	e0bffc17 	ldw	r2,-16(fp)
8112cbb8:	e13fff17 	ldw	r4,-4(fp)
8112cbbc:	2085883a 	add	r2,r4,r2
8112cbc0:	10800003 	ldbu	r2,0(r2)
8112cbc4:	10bff804 	addi	r2,r2,-32
8112cbc8:	10803fcc 	andi	r2,r2,255
8112cbcc:	1080201c 	xori	r2,r2,128
8112cbd0:	10bfe004 	addi	r2,r2,-128
8112cbd4:	00000706 	br	8112cbf4 <match_file_record_to_name_ext+0x264>
8112cbd8:	e0bffc17 	ldw	r2,-16(fp)
8112cbdc:	e13fff17 	ldw	r4,-4(fp)
8112cbe0:	2085883a 	add	r2,r4,r2
8112cbe4:	10800003 	ldbu	r2,0(r2)
8112cbe8:	10803fcc 	andi	r2,r2,255
8112cbec:	1080201c 	xori	r2,r2,128
8112cbf0:	10bfe004 	addi	r2,r2,-128
8112cbf4:	18800226 	beq	r3,r2,8112cc00 <match_file_record_to_name_ext+0x270>
        {
            match = false;
8112cbf8:	e03ffb15 	stw	zero,-20(fp)
			break;
8112cbfc:	00000606 	br	8112cc18 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
8112cc00:	e0bffc17 	ldw	r2,-16(fp)
8112cc04:	10800044 	addi	r2,r2,1
8112cc08:	e0bffc15 	stw	r2,-16(fp)
8112cc0c:	e0bffc17 	ldw	r2,-16(fp)
8112cc10:	108000d0 	cmplti	r2,r2,3
8112cc14:	103fb31e 	bne	r2,zero,8112cae4 <__reset+0xfb10cae4>
        {
            match = false;
			break;
        }
    }
	return match;
8112cc18:	e0bffb17 	ldw	r2,-20(fp)
}
8112cc1c:	e037883a 	mov	sp,fp
8112cc20:	df000017 	ldw	fp,0(sp)
8112cc24:	dec00104 	addi	sp,sp,4
8112cc28:	f800283a 	ret

8112cc2c <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
8112cc2c:	deffe704 	addi	sp,sp,-100
8112cc30:	dfc01815 	stw	ra,96(sp)
8112cc34:	df001715 	stw	fp,92(sp)
8112cc38:	df001704 	addi	fp,sp,92
8112cc3c:	e13ffd15 	stw	r4,-12(fp)
8112cc40:	e17ffe15 	stw	r5,-8(fp)
8112cc44:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
8112cc48:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
8112cc4c:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
8112cc50:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
8112cc54:	e13ffd17 	ldw	r4,-12(fp)
8112cc58:	112c8d80 	call	8112c8d8 <get_dir_divider_location>
8112cc5c:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
8112cc60:	00012f06 	br	8112d120 <get_home_directory_cluster_for_file+0x4f4>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
8112cc64:	00800804 	movi	r2,32
8112cc68:	e0bff905 	stb	r2,-28(fp)
8112cc6c:	00800804 	movi	r2,32
8112cc70:	e0bff945 	stb	r2,-27(fp)
8112cc74:	00800804 	movi	r2,32
8112cc78:	e0bff985 	stb	r2,-26(fp)
8112cc7c:	00800804 	movi	r2,32
8112cc80:	e0bff9c5 	stb	r2,-25(fp)
8112cc84:	00800804 	movi	r2,32
8112cc88:	e0bffa05 	stb	r2,-24(fp)
8112cc8c:	00800804 	movi	r2,32
8112cc90:	e0bffa45 	stb	r2,-23(fp)
8112cc94:	00800804 	movi	r2,32
8112cc98:	e0bffa85 	stb	r2,-22(fp)
8112cc9c:	00800804 	movi	r2,32
8112cca0:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
8112cca4:	00800804 	movi	r2,32
8112cca8:	e0bffb05 	stb	r2,-20(fp)
8112ccac:	00800804 	movi	r2,32
8112ccb0:	e0bffb45 	stb	r2,-19(fp)
8112ccb4:	00800804 	movi	r2,32
8112ccb8:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
8112ccbc:	00bfffc4 	movi	r2,-1
8112ccc0:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
8112ccc4:	e0bfea17 	ldw	r2,-88(fp)
8112ccc8:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
8112cccc:	e03fec15 	stw	zero,-80(fp)
8112ccd0:	00002d06 	br	8112cd88 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
8112ccd4:	e0ffec17 	ldw	r3,-80(fp)
8112ccd8:	e0bfed17 	ldw	r2,-76(fp)
8112ccdc:	1885883a 	add	r2,r3,r2
8112cce0:	1007883a 	mov	r3,r2
8112cce4:	e0bffd17 	ldw	r2,-12(fp)
8112cce8:	10c5883a 	add	r2,r2,r3
8112ccec:	10800003 	ldbu	r2,0(r2)
8112ccf0:	10803fcc 	andi	r2,r2,255
8112ccf4:	1080201c 	xori	r2,r2,128
8112ccf8:	10bfe004 	addi	r2,r2,-128
8112ccfc:	10800b98 	cmpnei	r2,r2,46
8112cd00:	1000031e 	bne	r2,zero,8112cd10 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
8112cd04:	e0bfec17 	ldw	r2,-80(fp)
8112cd08:	e0bfee15 	stw	r2,-72(fp)
8112cd0c:	00001b06 	br	8112cd7c <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
8112cd10:	e0bfee17 	ldw	r2,-72(fp)
8112cd14:	10000c0e 	bge	r2,zero,8112cd48 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
8112cd18:	e0ffec17 	ldw	r3,-80(fp)
8112cd1c:	e0bfed17 	ldw	r2,-76(fp)
8112cd20:	1885883a 	add	r2,r3,r2
8112cd24:	1007883a 	mov	r3,r2
8112cd28:	e0bffd17 	ldw	r2,-12(fp)
8112cd2c:	10c5883a 	add	r2,r2,r3
8112cd30:	10c00003 	ldbu	r3,0(r2)
8112cd34:	e13ff904 	addi	r4,fp,-28
8112cd38:	e0bfec17 	ldw	r2,-80(fp)
8112cd3c:	2085883a 	add	r2,r4,r2
8112cd40:	10c00005 	stb	r3,0(r2)
8112cd44:	00000d06 	br	8112cd7c <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
8112cd48:	e0ffec17 	ldw	r3,-80(fp)
8112cd4c:	e0bfee17 	ldw	r2,-72(fp)
8112cd50:	1885c83a 	sub	r2,r3,r2
8112cd54:	e13fec17 	ldw	r4,-80(fp)
8112cd58:	e0ffed17 	ldw	r3,-76(fp)
8112cd5c:	20c7883a 	add	r3,r4,r3
8112cd60:	1809883a 	mov	r4,r3
8112cd64:	e0fffd17 	ldw	r3,-12(fp)
8112cd68:	1907883a 	add	r3,r3,r4
8112cd6c:	18c00003 	ldbu	r3,0(r3)
8112cd70:	e13ffb04 	addi	r4,fp,-20
8112cd74:	2085883a 	add	r2,r4,r2
8112cd78:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
8112cd7c:	e0bfec17 	ldw	r2,-80(fp)
8112cd80:	10800044 	addi	r2,r2,1
8112cd84:	e0bfec15 	stw	r2,-80(fp)
8112cd88:	e0ffec17 	ldw	r3,-80(fp)
8112cd8c:	e0bfeb17 	ldw	r2,-84(fp)
8112cd90:	18bfd016 	blt	r3,r2,8112ccd4 <__reset+0xfb10ccd4>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
8112cd94:	e0bfea17 	ldw	r2,-88(fp)
8112cd98:	10005c1e 	bne	r2,zero,8112cf0c <get_home_directory_cluster_for_file+0x2e0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8112cd9c:	00a045b4 	movhi	r2,33046
8112cda0:	10b77b04 	addi	r2,r2,-8724
8112cda4:	1080050b 	ldhu	r2,20(r2)
8112cda8:	10bfffcc 	andi	r2,r2,65535
8112cdac:	1006917a 	slli	r3,r2,5
8112cdb0:	00a045b4 	movhi	r2,33046
8112cdb4:	10b77b04 	addi	r2,r2,-8724
8112cdb8:	1080030b 	ldhu	r2,12(r2)
8112cdbc:	10bfffcc 	andi	r2,r2,65535
8112cdc0:	1885283a 	div	r2,r3,r2
8112cdc4:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112cdc8:	e03ff015 	stw	zero,-64(fp)
8112cdcc:	00003b06 	br	8112cebc <get_home_directory_cluster_for_file+0x290>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
8112cdd0:	00a045b4 	movhi	r2,33046
8112cdd4:	10b77b04 	addi	r2,r2,-8724
8112cdd8:	10c01317 	ldw	r3,76(r2)
8112cddc:	e0bff017 	ldw	r2,-64(fp)
8112cde0:	1885883a 	add	r2,r3,r2
8112cde4:	1007883a 	mov	r3,r2
8112cde8:	d0a09617 	ldw	r2,-32168(gp)
8112cdec:	100b883a 	mov	r5,r2
8112cdf0:	1809883a 	mov	r4,r3
8112cdf4:	112b5240 	call	8112b524 <Read_Sector_Data>
8112cdf8:	10003426 	beq	r2,zero,8112cecc <get_home_directory_cluster_for_file+0x2a0>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112cdfc:	e03ff115 	stw	zero,-60(fp)
8112ce00:	00002506 	br	8112ce98 <get_home_directory_cluster_for_file+0x26c>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
8112ce04:	e0bff117 	ldw	r2,-60(fp)
8112ce08:	1004917a 	slli	r2,r2,5
8112ce0c:	e0fff017 	ldw	r3,-64(fp)
8112ce10:	180f883a 	mov	r7,r3
8112ce14:	000d883a 	mov	r6,zero
8112ce18:	e17fff17 	ldw	r5,-4(fp)
8112ce1c:	1009883a 	mov	r4,r2
8112ce20:	112b9340 	call	8112b934 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112ce24:	e0bfff17 	ldw	r2,-4(fp)
8112ce28:	10800003 	ldbu	r2,0(r2)
8112ce2c:	10803fcc 	andi	r2,r2,255
8112ce30:	10803960 	cmpeqi	r2,r2,229
8112ce34:	1000151e 	bne	r2,zero,8112ce8c <get_home_directory_cluster_for_file+0x260>
8112ce38:	e0bfff17 	ldw	r2,-4(fp)
8112ce3c:	10800003 	ldbu	r2,0(r2)
8112ce40:	10803fcc 	andi	r2,r2,255
8112ce44:	10001126 	beq	r2,zero,8112ce8c <get_home_directory_cluster_for_file+0x260>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
8112ce48:	e0fffb04 	addi	r3,fp,-20
8112ce4c:	e0bff904 	addi	r2,fp,-28
8112ce50:	180d883a 	mov	r6,r3
8112ce54:	100b883a 	mov	r5,r2
8112ce58:	e13fff17 	ldw	r4,-4(fp)
8112ce5c:	112c9900 	call	8112c990 <match_file_record_to_name_ext>
8112ce60:	e0bff815 	stw	r2,-32(fp)
                            if (match)
8112ce64:	e0bff817 	ldw	r2,-32(fp)
8112ce68:	10000826 	beq	r2,zero,8112ce8c <get_home_directory_cluster_for_file+0x260>
                            {
                                new_cluster = file_record->start_cluster_index;
8112ce6c:	e0bfff17 	ldw	r2,-4(fp)
8112ce70:	1080058b 	ldhu	r2,22(r2)
8112ce74:	10bfffcc 	andi	r2,r2,65535
8112ce78:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
8112ce7c:	e0bfff17 	ldw	r2,-4(fp)
8112ce80:	00c00044 	movi	r3,1
8112ce84:	10c00a15 	stw	r3,40(r2)
                                break;
8112ce88:	00000606 	br	8112cea4 <get_home_directory_cluster_for_file+0x278>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112ce8c:	e0bff117 	ldw	r2,-60(fp)
8112ce90:	10800044 	addi	r2,r2,1
8112ce94:	e0bff115 	stw	r2,-60(fp)
8112ce98:	e0bff117 	ldw	r2,-60(fp)
8112ce9c:	10800410 	cmplti	r2,r2,16
8112cea0:	103fd81e 	bne	r2,zero,8112ce04 <__reset+0xfb10ce04>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
8112cea4:	e0ffef17 	ldw	r3,-68(fp)
8112cea8:	e0bfea17 	ldw	r2,-88(fp)
8112ceac:	1880091e 	bne	r3,r2,8112ced4 <get_home_directory_cluster_for_file+0x2a8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112ceb0:	e0bff017 	ldw	r2,-64(fp)
8112ceb4:	10800044 	addi	r2,r2,1
8112ceb8:	e0bff015 	stw	r2,-64(fp)
8112cebc:	e0fff017 	ldw	r3,-64(fp)
8112cec0:	e0bff717 	ldw	r2,-36(fp)
8112cec4:	18bfc216 	blt	r3,r2,8112cdd0 <__reset+0xfb10cdd0>
8112cec8:	00000306 	br	8112ced8 <get_home_directory_cluster_for_file+0x2ac>
                        }
                    }
                }
                else
                {
                    break;
8112cecc:	0001883a 	nop
8112ced0:	00000106 	br	8112ced8 <get_home_directory_cluster_for_file+0x2ac>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
8112ced4:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
8112ced8:	e0ffef17 	ldw	r3,-68(fp)
8112cedc:	e0bfea17 	ldw	r2,-88(fp)
8112cee0:	18800826 	beq	r3,r2,8112cf04 <get_home_directory_cluster_for_file+0x2d8>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
8112cee4:	e0bfef17 	ldw	r2,-68(fp)
8112cee8:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
8112ceec:	e0ffed17 	ldw	r3,-76(fp)
8112cef0:	e0bfeb17 	ldw	r2,-84(fp)
8112cef4:	1885883a 	add	r2,r3,r2
8112cef8:	10800044 	addi	r2,r2,1
8112cefc:	e0bfed15 	stw	r2,-76(fp)
8112cf00:	00007d06 	br	8112d0f8 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
8112cf04:	0005883a 	mov	r2,zero
8112cf08:	00009106 	br	8112d150 <get_home_directory_cluster_for_file+0x524>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
8112cf0c:	e0bfea17 	ldw	r2,-88(fp)
8112cf10:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112cf14:	e0bff417 	ldw	r2,-48(fp)
8112cf18:	10ffff84 	addi	r3,r2,-2
8112cf1c:	00a045b4 	movhi	r2,33046
8112cf20:	10b77b04 	addi	r2,r2,-8724
8112cf24:	10800383 	ldbu	r2,14(r2)
8112cf28:	10803fcc 	andi	r2,r2,255
8112cf2c:	1885383a 	mul	r2,r3,r2
8112cf30:	1007883a 	mov	r3,r2
8112cf34:	00a045b4 	movhi	r2,33046
8112cf38:	10b77b04 	addi	r2,r2,-8724
8112cf3c:	10801417 	ldw	r2,80(r2)
8112cf40:	1885883a 	add	r2,r3,r2
8112cf44:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112cf48:	e03ff215 	stw	zero,-56(fp)
8112cf4c:	00003606 	br	8112d028 <get_home_directory_cluster_for_file+0x3fc>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112cf50:	e0fff217 	ldw	r3,-56(fp)
8112cf54:	e0bff517 	ldw	r2,-44(fp)
8112cf58:	1885883a 	add	r2,r3,r2
8112cf5c:	d0e09617 	ldw	r3,-32168(gp)
8112cf60:	180b883a 	mov	r5,r3
8112cf64:	1009883a 	mov	r4,r2
8112cf68:	112b5240 	call	8112b524 <Read_Sector_Data>
8112cf6c:	10003526 	beq	r2,zero,8112d044 <get_home_directory_cluster_for_file+0x418>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
8112cf70:	e03ff315 	stw	zero,-52(fp)
8112cf74:	00002306 	br	8112d004 <get_home_directory_cluster_for_file+0x3d8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
8112cf78:	e0bff317 	ldw	r2,-52(fp)
8112cf7c:	1004917a 	slli	r2,r2,5
8112cf80:	e0fff417 	ldw	r3,-48(fp)
8112cf84:	e13ff217 	ldw	r4,-56(fp)
8112cf88:	200f883a 	mov	r7,r4
8112cf8c:	180d883a 	mov	r6,r3
8112cf90:	e17fff17 	ldw	r5,-4(fp)
8112cf94:	1009883a 	mov	r4,r2
8112cf98:	112b9340 	call	8112b934 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112cf9c:	e0bfff17 	ldw	r2,-4(fp)
8112cfa0:	10800003 	ldbu	r2,0(r2)
8112cfa4:	10803fcc 	andi	r2,r2,255
8112cfa8:	10803960 	cmpeqi	r2,r2,229
8112cfac:	1000121e 	bne	r2,zero,8112cff8 <get_home_directory_cluster_for_file+0x3cc>
8112cfb0:	e0bfff17 	ldw	r2,-4(fp)
8112cfb4:	10800003 	ldbu	r2,0(r2)
8112cfb8:	10803fcc 	andi	r2,r2,255
8112cfbc:	10000e26 	beq	r2,zero,8112cff8 <get_home_directory_cluster_for_file+0x3cc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
8112cfc0:	e0fffb04 	addi	r3,fp,-20
8112cfc4:	e0bff904 	addi	r2,fp,-28
8112cfc8:	180d883a 	mov	r6,r3
8112cfcc:	100b883a 	mov	r5,r2
8112cfd0:	e13fff17 	ldw	r4,-4(fp)
8112cfd4:	112c9900 	call	8112c990 <match_file_record_to_name_ext>
8112cfd8:	e0bff615 	stw	r2,-40(fp)
                                if (match)
8112cfdc:	e0bff617 	ldw	r2,-40(fp)
8112cfe0:	10000526 	beq	r2,zero,8112cff8 <get_home_directory_cluster_for_file+0x3cc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
8112cfe4:	e0bfff17 	ldw	r2,-4(fp)
8112cfe8:	1080058b 	ldhu	r2,22(r2)
8112cfec:	10bfffcc 	andi	r2,r2,65535
8112cff0:	e0bfef15 	stw	r2,-68(fp)
                                    break;
8112cff4:	00000606 	br	8112d010 <get_home_directory_cluster_for_file+0x3e4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
8112cff8:	e0bff317 	ldw	r2,-52(fp)
8112cffc:	10800044 	addi	r2,r2,1
8112d000:	e0bff315 	stw	r2,-52(fp)
8112d004:	e0bff317 	ldw	r2,-52(fp)
8112d008:	10800410 	cmplti	r2,r2,16
8112d00c:	103fda1e 	bne	r2,zero,8112cf78 <__reset+0xfb10cf78>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
8112d010:	e0ffef17 	ldw	r3,-68(fp)
8112d014:	e0bfea17 	ldw	r2,-88(fp)
8112d018:	18800c1e 	bne	r3,r2,8112d04c <get_home_directory_cluster_for_file+0x420>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112d01c:	e0bff217 	ldw	r2,-56(fp)
8112d020:	10800044 	addi	r2,r2,1
8112d024:	e0bff215 	stw	r2,-56(fp)
8112d028:	00a045b4 	movhi	r2,33046
8112d02c:	10b77b04 	addi	r2,r2,-8724
8112d030:	10800383 	ldbu	r2,14(r2)
8112d034:	10803fcc 	andi	r2,r2,255
8112d038:	e0fff217 	ldw	r3,-56(fp)
8112d03c:	18bfc416 	blt	r3,r2,8112cf50 <__reset+0xfb10cf50>
8112d040:	00000306 	br	8112d050 <get_home_directory_cluster_for_file+0x424>
                            }
                        }
                    }
                    else
                    {
                        break;
8112d044:	0001883a 	nop
8112d048:	00000106 	br	8112d050 <get_home_directory_cluster_for_file+0x424>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
8112d04c:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
8112d050:	e0ffef17 	ldw	r3,-68(fp)
8112d054:	e0bfea17 	ldw	r2,-88(fp)
8112d058:	1880141e 	bne	r3,r2,8112d0ac <get_home_directory_cluster_for_file+0x480>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
8112d05c:	e0bfef17 	ldw	r2,-68(fp)
8112d060:	e0fffc04 	addi	r3,fp,-16
8112d064:	180b883a 	mov	r5,r3
8112d068:	1009883a 	mov	r4,r2
8112d06c:	112b5fc0 	call	8112b5fc <get_cluster_flag>
8112d070:	10000c26 	beq	r2,zero,8112d0a4 <get_home_directory_cluster_for_file+0x478>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
8112d074:	e0bffc0b 	ldhu	r2,-16(fp)
8112d078:	10bfffcc 	andi	r2,r2,65535
8112d07c:	10fffe0c 	andi	r3,r2,65528
8112d080:	00bffe14 	movui	r2,65528
8112d084:	1880021e 	bne	r3,r2,8112d090 <get_home_directory_cluster_for_file+0x464>
						{
							return false;
8112d088:	0005883a 	mov	r2,zero
8112d08c:	00003006 	br	8112d150 <get_home_directory_cluster_for_file+0x524>
						}
						new_cluster = (next_cluster & 0x0000fff8);
8112d090:	e0bffc0b 	ldhu	r2,-16(fp)
8112d094:	10bfffcc 	andi	r2,r2,65535
8112d098:	10bffe0c 	andi	r2,r2,65528
8112d09c:	e0bfef15 	stw	r2,-68(fp)
8112d0a0:	00000206 	br	8112d0ac <get_home_directory_cluster_for_file+0x480>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
8112d0a4:	0005883a 	mov	r2,zero
8112d0a8:	00002906 	br	8112d150 <get_home_directory_cluster_for_file+0x524>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
8112d0ac:	e0bff417 	ldw	r2,-48(fp)
8112d0b0:	00fffdd4 	movui	r3,65527
8112d0b4:	18800316 	blt	r3,r2,8112d0c4 <get_home_directory_cluster_for_file+0x498>
8112d0b8:	e0ffef17 	ldw	r3,-68(fp)
8112d0bc:	e0bfea17 	ldw	r2,-88(fp)
8112d0c0:	18bf9426 	beq	r3,r2,8112cf14 <__reset+0xfb10cf14>
            if (new_cluster != home_dir_cluster)
8112d0c4:	e0ffef17 	ldw	r3,-68(fp)
8112d0c8:	e0bfea17 	ldw	r2,-88(fp)
8112d0cc:	18800826 	beq	r3,r2,8112d0f0 <get_home_directory_cluster_for_file+0x4c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
8112d0d0:	e0bfef17 	ldw	r2,-68(fp)
8112d0d4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
8112d0d8:	e0ffed17 	ldw	r3,-76(fp)
8112d0dc:	e0bfeb17 	ldw	r2,-84(fp)
8112d0e0:	1885883a 	add	r2,r3,r2
8112d0e4:	10800044 	addi	r2,r2,1
8112d0e8:	e0bfed15 	stw	r2,-76(fp)
8112d0ec:	00000206 	br	8112d0f8 <get_home_directory_cluster_for_file+0x4cc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
8112d0f0:	0005883a 	mov	r2,zero
8112d0f4:	00001606 	br	8112d150 <get_home_directory_cluster_for_file+0x524>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
8112d0f8:	e0bfed17 	ldw	r2,-76(fp)
8112d0fc:	e0fffd17 	ldw	r3,-12(fp)
8112d100:	1885883a 	add	r2,r3,r2
8112d104:	1009883a 	mov	r4,r2
8112d108:	112c8d80 	call	8112c8d8 <get_dir_divider_location>
8112d10c:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
8112d110:	e0bfeb17 	ldw	r2,-84(fp)
8112d114:	1000020e 	bge	r2,zero,8112d120 <get_home_directory_cluster_for_file+0x4f4>
        {
            // Directory has been located.
            result = true;
8112d118:	00800044 	movi	r2,1
8112d11c:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
8112d120:	e0bfeb17 	ldw	r2,-84(fp)
8112d124:	00becf16 	blt	zero,r2,8112cc64 <__reset+0xfb10cc64>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
8112d128:	e0bffe17 	ldw	r2,-8(fp)
8112d12c:	e0ffea17 	ldw	r3,-88(fp)
8112d130:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
8112d134:	e0bfea17 	ldw	r2,-88(fp)
8112d138:	1000041e 	bne	r2,zero,8112d14c <get_home_directory_cluster_for_file+0x520>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
8112d13c:	e0bfff17 	ldw	r2,-4(fp)
8112d140:	10000a15 	stw	zero,40(r2)
		result = true;
8112d144:	00800044 	movi	r2,1
8112d148:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
8112d14c:	e0bfe917 	ldw	r2,-92(fp)
}
8112d150:	e037883a 	mov	sp,fp
8112d154:	dfc00117 	ldw	ra,4(sp)
8112d158:	df000017 	ldw	fp,0(sp)
8112d15c:	dec00204 	addi	sp,sp,8
8112d160:	f800283a 	ret

8112d164 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
8112d164:	deffe804 	addi	sp,sp,-96
8112d168:	dfc01715 	stw	ra,92(sp)
8112d16c:	df001615 	stw	fp,88(sp)
8112d170:	df001604 	addi	fp,sp,88
8112d174:	e13ffd15 	stw	r4,-12(fp)
8112d178:	e17ffe15 	stw	r5,-8(fp)
8112d17c:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
8112d180:	e13ffe17 	ldw	r4,-8(fp)
8112d184:	112c8d80 	call	8112c8d8 <get_dir_divider_location>
8112d188:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
8112d18c:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
8112d190:	00800804 	movi	r2,32
8112d194:	e0bff905 	stb	r2,-28(fp)
8112d198:	00800804 	movi	r2,32
8112d19c:	e0bff945 	stb	r2,-27(fp)
8112d1a0:	00800804 	movi	r2,32
8112d1a4:	e0bff985 	stb	r2,-26(fp)
8112d1a8:	00800804 	movi	r2,32
8112d1ac:	e0bff9c5 	stb	r2,-25(fp)
8112d1b0:	00800804 	movi	r2,32
8112d1b4:	e0bffa05 	stb	r2,-24(fp)
8112d1b8:	00800804 	movi	r2,32
8112d1bc:	e0bffa45 	stb	r2,-23(fp)
8112d1c0:	00800804 	movi	r2,32
8112d1c4:	e0bffa85 	stb	r2,-22(fp)
8112d1c8:	00800804 	movi	r2,32
8112d1cc:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
8112d1d0:	00800804 	movi	r2,32
8112d1d4:	e0bffb05 	stb	r2,-20(fp)
8112d1d8:	00800804 	movi	r2,32
8112d1dc:	e0bffb45 	stb	r2,-19(fp)
8112d1e0:	00800804 	movi	r2,32
8112d1e4:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
8112d1e8:	00bfffc4 	movi	r2,-1
8112d1ec:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
8112d1f0:	e0bffd17 	ldw	r2,-12(fp)
8112d1f4:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
8112d1f8:	e13ffe17 	ldw	r4,-8(fp)
8112d1fc:	110ddac0 	call	8110ddac <strlen>
8112d200:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
8112d204:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
8112d208:	00000b06 	br	8112d238 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
8112d20c:	e0ffeb17 	ldw	r3,-84(fp)
8112d210:	e0bfea17 	ldw	r2,-88(fp)
8112d214:	1885883a 	add	r2,r3,r2
8112d218:	10800044 	addi	r2,r2,1
8112d21c:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
8112d220:	e0bfeb17 	ldw	r2,-84(fp)
8112d224:	e0fffe17 	ldw	r3,-8(fp)
8112d228:	1885883a 	add	r2,r3,r2
8112d22c:	1009883a 	mov	r4,r2
8112d230:	112c8d80 	call	8112c8d8 <get_dir_divider_location>
8112d234:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
8112d238:	e0bfea17 	ldw	r2,-88(fp)
8112d23c:	00bff316 	blt	zero,r2,8112d20c <__reset+0xfb10d20c>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
8112d240:	e0bfeb17 	ldw	r2,-84(fp)
8112d244:	e0bfee15 	stw	r2,-72(fp)
8112d248:	00002706 	br	8112d2e8 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
8112d24c:	e0bfee17 	ldw	r2,-72(fp)
8112d250:	e0fffe17 	ldw	r3,-8(fp)
8112d254:	1885883a 	add	r2,r3,r2
8112d258:	10800003 	ldbu	r2,0(r2)
8112d25c:	10803fcc 	andi	r2,r2,255
8112d260:	1080201c 	xori	r2,r2,128
8112d264:	10bfe004 	addi	r2,r2,-128
8112d268:	10800b98 	cmpnei	r2,r2,46
8112d26c:	1000031e 	bne	r2,zero,8112d27c <find_file_in_directory+0x118>
        {
            ext_index = index;
8112d270:	e0bfee17 	ldw	r2,-72(fp)
8112d274:	e0bfec15 	stw	r2,-80(fp)
8112d278:	00001806 	br	8112d2dc <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
8112d27c:	e0bfec17 	ldw	r2,-80(fp)
8112d280:	10000b0e 	bge	r2,zero,8112d2b0 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
8112d284:	e0ffee17 	ldw	r3,-72(fp)
8112d288:	e0bfeb17 	ldw	r2,-84(fp)
8112d28c:	1885c83a 	sub	r2,r3,r2
8112d290:	e0ffee17 	ldw	r3,-72(fp)
8112d294:	e13ffe17 	ldw	r4,-8(fp)
8112d298:	20c7883a 	add	r3,r4,r3
8112d29c:	18c00003 	ldbu	r3,0(r3)
8112d2a0:	e13ff904 	addi	r4,fp,-28
8112d2a4:	2085883a 	add	r2,r4,r2
8112d2a8:	10c00005 	stb	r3,0(r2)
8112d2ac:	00000b06 	br	8112d2dc <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
8112d2b0:	e0ffee17 	ldw	r3,-72(fp)
8112d2b4:	e0bfec17 	ldw	r2,-80(fp)
8112d2b8:	1885c83a 	sub	r2,r3,r2
8112d2bc:	10bfffc4 	addi	r2,r2,-1
8112d2c0:	e0ffee17 	ldw	r3,-72(fp)
8112d2c4:	e13ffe17 	ldw	r4,-8(fp)
8112d2c8:	20c7883a 	add	r3,r4,r3
8112d2cc:	18c00003 	ldbu	r3,0(r3)
8112d2d0:	e13ffb04 	addi	r4,fp,-20
8112d2d4:	2085883a 	add	r2,r4,r2
8112d2d8:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
8112d2dc:	e0bfee17 	ldw	r2,-72(fp)
8112d2e0:	10800044 	addi	r2,r2,1
8112d2e4:	e0bfee15 	stw	r2,-72(fp)
8112d2e8:	e0ffee17 	ldw	r3,-72(fp)
8112d2ec:	e0bff417 	ldw	r2,-48(fp)
8112d2f0:	18bfd616 	blt	r3,r2,8112d24c <__reset+0xfb10d24c>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
8112d2f4:	e0bffd17 	ldw	r2,-12(fp)
8112d2f8:	1000461e 	bne	r2,zero,8112d414 <find_file_in_directory+0x2b0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8112d2fc:	00a045b4 	movhi	r2,33046
8112d300:	10b77b04 	addi	r2,r2,-8724
8112d304:	1080050b 	ldhu	r2,20(r2)
8112d308:	10bfffcc 	andi	r2,r2,65535
8112d30c:	1006917a 	slli	r3,r2,5
8112d310:	00a045b4 	movhi	r2,33046
8112d314:	10b77b04 	addi	r2,r2,-8724
8112d318:	1080030b 	ldhu	r2,12(r2)
8112d31c:	10bfffcc 	andi	r2,r2,65535
8112d320:	1885283a 	div	r2,r3,r2
8112d324:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112d328:	e03ff015 	stw	zero,-64(fp)
8112d32c:	00003506 	br	8112d404 <find_file_in_directory+0x2a0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8112d330:	00a045b4 	movhi	r2,33046
8112d334:	10b77b04 	addi	r2,r2,-8724
8112d338:	10c01317 	ldw	r3,76(r2)
8112d33c:	e0bff017 	ldw	r2,-64(fp)
8112d340:	1885883a 	add	r2,r3,r2
8112d344:	1007883a 	mov	r3,r2
8112d348:	d0a09617 	ldw	r2,-32168(gp)
8112d34c:	100b883a 	mov	r5,r2
8112d350:	1809883a 	mov	r4,r3
8112d354:	112b5240 	call	8112b524 <Read_Sector_Data>
8112d358:	10009626 	beq	r2,zero,8112d5b4 <find_file_in_directory+0x450>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112d35c:	e03ff115 	stw	zero,-60(fp)
8112d360:	00002006 	br	8112d3e4 <find_file_in_directory+0x280>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
8112d364:	e0bff117 	ldw	r2,-60(fp)
8112d368:	1004917a 	slli	r2,r2,5
8112d36c:	e0fff017 	ldw	r3,-64(fp)
8112d370:	180f883a 	mov	r7,r3
8112d374:	000d883a 	mov	r6,zero
8112d378:	e17fff17 	ldw	r5,-4(fp)
8112d37c:	1009883a 	mov	r4,r2
8112d380:	112b9340 	call	8112b934 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112d384:	e0bfff17 	ldw	r2,-4(fp)
8112d388:	10800003 	ldbu	r2,0(r2)
8112d38c:	10803fcc 	andi	r2,r2,255
8112d390:	10803960 	cmpeqi	r2,r2,229
8112d394:	1000101e 	bne	r2,zero,8112d3d8 <find_file_in_directory+0x274>
8112d398:	e0bfff17 	ldw	r2,-4(fp)
8112d39c:	10800003 	ldbu	r2,0(r2)
8112d3a0:	10803fcc 	andi	r2,r2,255
8112d3a4:	10000c26 	beq	r2,zero,8112d3d8 <find_file_in_directory+0x274>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
8112d3a8:	e0fffb04 	addi	r3,fp,-20
8112d3ac:	e0bff904 	addi	r2,fp,-28
8112d3b0:	180d883a 	mov	r6,r3
8112d3b4:	100b883a 	mov	r5,r2
8112d3b8:	e13fff17 	ldw	r4,-4(fp)
8112d3bc:	112c9900 	call	8112c990 <match_file_record_to_name_ext>
8112d3c0:	e0bff815 	stw	r2,-32(fp)

                        if (match)
8112d3c4:	e0bff817 	ldw	r2,-32(fp)
8112d3c8:	10000326 	beq	r2,zero,8112d3d8 <find_file_in_directory+0x274>
                        {
                            result = true;
8112d3cc:	00800044 	movi	r2,1
8112d3d0:	e0bfef15 	stw	r2,-68(fp)
                            break;
8112d3d4:	00000606 	br	8112d3f0 <find_file_in_directory+0x28c>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112d3d8:	e0bff117 	ldw	r2,-60(fp)
8112d3dc:	10800044 	addi	r2,r2,1
8112d3e0:	e0bff115 	stw	r2,-60(fp)
8112d3e4:	e0bff117 	ldw	r2,-60(fp)
8112d3e8:	10800410 	cmplti	r2,r2,16
8112d3ec:	103fdd1e 	bne	r2,zero,8112d364 <__reset+0xfb10d364>
            }
            else
            {
                break;
            }
            if (result)
8112d3f0:	e0bfef17 	ldw	r2,-68(fp)
8112d3f4:	1000711e 	bne	r2,zero,8112d5bc <find_file_in_directory+0x458>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112d3f8:	e0bff017 	ldw	r2,-64(fp)
8112d3fc:	10800044 	addi	r2,r2,1
8112d400:	e0bff015 	stw	r2,-64(fp)
8112d404:	e0fff017 	ldw	r3,-64(fp)
8112d408:	e0bff717 	ldw	r2,-36(fp)
8112d40c:	18bfc816 	blt	r3,r2,8112d330 <__reset+0xfb10d330>
8112d410:	00006b06 	br	8112d5c0 <find_file_in_directory+0x45c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112d414:	e0bfed17 	ldw	r2,-76(fp)
8112d418:	10ffff84 	addi	r3,r2,-2
8112d41c:	00a045b4 	movhi	r2,33046
8112d420:	10b77b04 	addi	r2,r2,-8724
8112d424:	10800383 	ldbu	r2,14(r2)
8112d428:	10803fcc 	andi	r2,r2,255
8112d42c:	1885383a 	mul	r2,r3,r2
8112d430:	1007883a 	mov	r3,r2
8112d434:	00a045b4 	movhi	r2,33046
8112d438:	10b77b04 	addi	r2,r2,-8724
8112d43c:	10801417 	ldw	r2,80(r2)
8112d440:	1885883a 	add	r2,r3,r2
8112d444:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112d448:	e03ff215 	stw	zero,-56(fp)
8112d44c:	00003306 	br	8112d51c <find_file_in_directory+0x3b8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112d450:	e0fff217 	ldw	r3,-56(fp)
8112d454:	e0bff517 	ldw	r2,-44(fp)
8112d458:	1885883a 	add	r2,r3,r2
8112d45c:	d0e09617 	ldw	r3,-32168(gp)
8112d460:	180b883a 	mov	r5,r3
8112d464:	1009883a 	mov	r4,r2
8112d468:	112b5240 	call	8112b524 <Read_Sector_Data>
8112d46c:	10003226 	beq	r2,zero,8112d538 <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112d470:	e03ff315 	stw	zero,-52(fp)
8112d474:	00002106 	br	8112d4fc <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
8112d478:	e0bff317 	ldw	r2,-52(fp)
8112d47c:	1004917a 	slli	r2,r2,5
8112d480:	e0ffed17 	ldw	r3,-76(fp)
8112d484:	e13ff217 	ldw	r4,-56(fp)
8112d488:	200f883a 	mov	r7,r4
8112d48c:	180d883a 	mov	r6,r3
8112d490:	e17fff17 	ldw	r5,-4(fp)
8112d494:	1009883a 	mov	r4,r2
8112d498:	112b9340 	call	8112b934 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
8112d49c:	e0bfff17 	ldw	r2,-4(fp)
8112d4a0:	10800003 	ldbu	r2,0(r2)
8112d4a4:	10803fcc 	andi	r2,r2,255
8112d4a8:	10803960 	cmpeqi	r2,r2,229
8112d4ac:	1000101e 	bne	r2,zero,8112d4f0 <find_file_in_directory+0x38c>
8112d4b0:	e0bfff17 	ldw	r2,-4(fp)
8112d4b4:	10800003 	ldbu	r2,0(r2)
8112d4b8:	10803fcc 	andi	r2,r2,255
8112d4bc:	10000c26 	beq	r2,zero,8112d4f0 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
8112d4c0:	e0fffb04 	addi	r3,fp,-20
8112d4c4:	e0bff904 	addi	r2,fp,-28
8112d4c8:	180d883a 	mov	r6,r3
8112d4cc:	100b883a 	mov	r5,r2
8112d4d0:	e13fff17 	ldw	r4,-4(fp)
8112d4d4:	112c9900 	call	8112c990 <match_file_record_to_name_ext>
8112d4d8:	e0bff615 	stw	r2,-40(fp)

                            if (match)
8112d4dc:	e0bff617 	ldw	r2,-40(fp)
8112d4e0:	10000326 	beq	r2,zero,8112d4f0 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
8112d4e4:	00800044 	movi	r2,1
8112d4e8:	e0bfef15 	stw	r2,-68(fp)
                                break;
8112d4ec:	00000606 	br	8112d508 <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
8112d4f0:	e0bff317 	ldw	r2,-52(fp)
8112d4f4:	10800044 	addi	r2,r2,1
8112d4f8:	e0bff315 	stw	r2,-52(fp)
8112d4fc:	e0bff317 	ldw	r2,-52(fp)
8112d500:	10800410 	cmplti	r2,r2,16
8112d504:	103fdc1e 	bne	r2,zero,8112d478 <__reset+0xfb10d478>
                }
                else
                {
                    break;
                }
                if (result)
8112d508:	e0bfef17 	ldw	r2,-68(fp)
8112d50c:	10000c1e 	bne	r2,zero,8112d540 <find_file_in_directory+0x3dc>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112d510:	e0bff217 	ldw	r2,-56(fp)
8112d514:	10800044 	addi	r2,r2,1
8112d518:	e0bff215 	stw	r2,-56(fp)
8112d51c:	00a045b4 	movhi	r2,33046
8112d520:	10b77b04 	addi	r2,r2,-8724
8112d524:	10800383 	ldbu	r2,14(r2)
8112d528:	10803fcc 	andi	r2,r2,255
8112d52c:	e0fff217 	ldw	r3,-56(fp)
8112d530:	18bfc716 	blt	r3,r2,8112d450 <__reset+0xfb10d450>
8112d534:	00000306 	br	8112d544 <find_file_in_directory+0x3e0>
                        }
                    }
                }
                else
                {
                    break;
8112d538:	0001883a 	nop
8112d53c:	00000106 	br	8112d544 <find_file_in_directory+0x3e0>
                }
                if (result)
                {
                    break;
8112d540:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
8112d544:	e0bfef17 	ldw	r2,-68(fp)
8112d548:	1000141e 	bne	r2,zero,8112d59c <find_file_in_directory+0x438>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
8112d54c:	e0bfed17 	ldw	r2,-76(fp)
8112d550:	e0fffc04 	addi	r3,fp,-16
8112d554:	180b883a 	mov	r5,r3
8112d558:	1009883a 	mov	r4,r2
8112d55c:	112b5fc0 	call	8112b5fc <get_cluster_flag>
8112d560:	10000c26 	beq	r2,zero,8112d594 <find_file_in_directory+0x430>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8112d564:	e0bffc0b 	ldhu	r2,-16(fp)
8112d568:	10bfffcc 	andi	r2,r2,65535
8112d56c:	10fffe0c 	andi	r3,r2,65528
8112d570:	00bffe14 	movui	r2,65528
8112d574:	1880021e 	bne	r3,r2,8112d580 <find_file_in_directory+0x41c>
					{
						return false;
8112d578:	0005883a 	mov	r2,zero
8112d57c:	00001106 	br	8112d5c4 <find_file_in_directory+0x460>
					}
					cluster = (new_cluster & 0x0000fff8);
8112d580:	e0bffc0b 	ldhu	r2,-16(fp)
8112d584:	10bfffcc 	andi	r2,r2,65535
8112d588:	10bffe0c 	andi	r2,r2,65528
8112d58c:	e0bfed15 	stw	r2,-76(fp)
8112d590:	00000206 	br	8112d59c <find_file_in_directory+0x438>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
8112d594:	0005883a 	mov	r2,zero
8112d598:	00000a06 	br	8112d5c4 <find_file_in_directory+0x460>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
8112d59c:	e0bfed17 	ldw	r2,-76(fp)
8112d5a0:	00fffdd4 	movui	r3,65527
8112d5a4:	18800616 	blt	r3,r2,8112d5c0 <find_file_in_directory+0x45c>
8112d5a8:	e0bfef17 	ldw	r2,-68(fp)
8112d5ac:	103f9926 	beq	r2,zero,8112d414 <__reset+0xfb10d414>
8112d5b0:	00000306 	br	8112d5c0 <find_file_in_directory+0x45c>
                    }
                }
            }
            else
            {
                break;
8112d5b4:	0001883a 	nop
8112d5b8:	00000106 	br	8112d5c0 <find_file_in_directory+0x45c>
            }
            if (result)
            {
                break;
8112d5bc:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
8112d5c0:	e0bfef17 	ldw	r2,-68(fp)
}
8112d5c4:	e037883a 	mov	sp,fp
8112d5c8:	dfc00117 	ldw	ra,4(sp)
8112d5cc:	df000017 	ldw	fp,0(sp)
8112d5d0:	dec00204 	addi	sp,sp,8
8112d5d4:	f800283a 	ret

8112d5d8 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
8112d5d8:	defff504 	addi	sp,sp,-44
8112d5dc:	dfc00a15 	stw	ra,40(sp)
8112d5e0:	df000915 	stw	fp,36(sp)
8112d5e4:	df000904 	addi	fp,sp,36
8112d5e8:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
8112d5ec:	00a045b4 	movhi	r2,33046
8112d5f0:	10b77b04 	addi	r2,r2,-8724
8112d5f4:	10801117 	ldw	r2,68(r2)
8112d5f8:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
8112d5fc:	00800084 	movi	r2,2
8112d600:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
8112d604:	00bfffc4 	movi	r2,-1
8112d608:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
8112d60c:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
8112d610:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
8112d614:	00a045b4 	movhi	r2,33046
8112d618:	10b77b04 	addi	r2,r2,-8724
8112d61c:	10801417 	ldw	r2,80(r2)
8112d620:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
8112d624:	00a045b4 	movhi	r2,33046
8112d628:	10b77b04 	addi	r2,r2,-8724
8112d62c:	1080058b 	ldhu	r2,22(r2)
8112d630:	10bfffcc 	andi	r2,r2,65535
8112d634:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
8112d638:	00a045b4 	movhi	r2,33046
8112d63c:	10b77b04 	addi	r2,r2,-8724
8112d640:	10800917 	ldw	r2,36(r2)
8112d644:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
8112d648:	e0bffd17 	ldw	r2,-12(fp)
8112d64c:	e0fffe17 	ldw	r3,-8(fp)
8112d650:	18800b2e 	bgeu	r3,r2,8112d680 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
8112d654:	e0fffd17 	ldw	r3,-12(fp)
8112d658:	e0bffc17 	ldw	r2,-16(fp)
8112d65c:	1887c83a 	sub	r3,r3,r2
8112d660:	00a045b4 	movhi	r2,33046
8112d664:	10b77b04 	addi	r2,r2,-8724
8112d668:	10800383 	ldbu	r2,14(r2)
8112d66c:	10803fcc 	andi	r2,r2,255
8112d670:	1885203a 	divu	r2,r3,r2
8112d674:	10800044 	addi	r2,r2,1
8112d678:	e0bffb15 	stw	r2,-20(fp)
8112d67c:	00002a06 	br	8112d728 <find_first_empty_cluster+0x150>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
8112d680:	e0fffe17 	ldw	r3,-8(fp)
8112d684:	e0bffc17 	ldw	r2,-16(fp)
8112d688:	1887c83a 	sub	r3,r3,r2
8112d68c:	00a045b4 	movhi	r2,33046
8112d690:	10b77b04 	addi	r2,r2,-8724
8112d694:	10800383 	ldbu	r2,14(r2)
8112d698:	10803fcc 	andi	r2,r2,255
8112d69c:	1885203a 	divu	r2,r3,r2
8112d6a0:	10800044 	addi	r2,r2,1
8112d6a4:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
8112d6a8:	00001f06 	br	8112d728 <find_first_empty_cluster+0x150>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
8112d6ac:	e0bff717 	ldw	r2,-36(fp)
8112d6b0:	d0e09617 	ldw	r3,-32168(gp)
8112d6b4:	180b883a 	mov	r5,r3
8112d6b8:	1009883a 	mov	r4,r2
8112d6bc:	112b5240 	call	8112b524 <Read_Sector_Data>
8112d6c0:	10001426 	beq	r2,zero,8112d714 <find_first_empty_cluster+0x13c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
8112d6c4:	e0bff817 	ldw	r2,-32(fp)
8112d6c8:	10803fcc 	andi	r2,r2,255
8112d6cc:	1085883a 	add	r2,r2,r2
8112d6d0:	1007883a 	mov	r3,r2
8112d6d4:	d0a09817 	ldw	r2,-32160(gp)
8112d6d8:	10800a17 	ldw	r2,40(r2)
8112d6dc:	1885883a 	add	r2,r3,r2
8112d6e0:	1080002b 	ldhuio	r2,0(r2)
8112d6e4:	10bfffcc 	andi	r2,r2,65535
8112d6e8:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
8112d6ec:	e0bff90f 	ldh	r2,-28(fp)
8112d6f0:	10000726 	beq	r2,zero,8112d710 <find_first_empty_cluster+0x138>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
8112d6f4:	e0bff817 	ldw	r2,-32(fp)
8112d6f8:	10800044 	addi	r2,r2,1
8112d6fc:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
8112d700:	e0bff817 	ldw	r2,-32(fp)
8112d704:	10803fcc 	andi	r2,r2,255
8112d708:	103fee1e 	bne	r2,zero,8112d6c4 <__reset+0xfb10d6c4>
8112d70c:	00000106 	br	8112d714 <find_first_empty_cluster+0x13c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
8112d710:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
8112d714:	e0bff90f 	ldh	r2,-28(fp)
8112d718:	10000926 	beq	r2,zero,8112d740 <find_first_empty_cluster+0x168>
        {
            break;
        }
        sector++;
8112d71c:	e0bff717 	ldw	r2,-36(fp)
8112d720:	10800044 	addi	r2,r2,1
8112d724:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
8112d728:	00a045b4 	movhi	r2,33046
8112d72c:	10b77b04 	addi	r2,r2,-8724
8112d730:	10c01217 	ldw	r3,72(r2)
8112d734:	e0bff717 	ldw	r2,-36(fp)
8112d738:	18bfdc1e 	bne	r3,r2,8112d6ac <__reset+0xfb10d6ac>
8112d73c:	00000106 	br	8112d744 <find_first_empty_cluster+0x16c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
8112d740:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
8112d744:	e0bff90f 	ldh	r2,-28(fp)
8112d748:	1000081e 	bne	r2,zero,8112d76c <find_first_empty_cluster+0x194>
8112d74c:	e0bff90f 	ldh	r2,-28(fp)
8112d750:	e0fffb17 	ldw	r3,-20(fp)
8112d754:	18800536 	bltu	r3,r2,8112d76c <find_first_empty_cluster+0x194>
    {
        *cluster_number = cluster_index;
8112d758:	e0bfff17 	ldw	r2,-4(fp)
8112d75c:	e0fff817 	ldw	r3,-32(fp)
8112d760:	10c00015 	stw	r3,0(r2)
		result = true;
8112d764:	00800044 	movi	r2,1
8112d768:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
8112d76c:	e0bffa17 	ldw	r2,-24(fp)
}
8112d770:	e037883a 	mov	sp,fp
8112d774:	dfc00117 	ldw	ra,4(sp)
8112d778:	df000017 	ldw	fp,0(sp)
8112d77c:	dec00204 	addi	sp,sp,8
8112d780:	f800283a 	ret

8112d784 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
8112d784:	defff604 	addi	sp,sp,-40
8112d788:	dfc00915 	stw	ra,36(sp)
8112d78c:	df000815 	stw	fp,32(sp)
8112d790:	df000804 	addi	fp,sp,32
8112d794:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
8112d798:	00bfffc4 	movi	r2,-1
8112d79c:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
8112d7a0:	e0bfff17 	ldw	r2,-4(fp)
8112d7a4:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112d7a8:	e0bff917 	ldw	r2,-28(fp)
8112d7ac:	10ffff84 	addi	r3,r2,-2
8112d7b0:	00a045b4 	movhi	r2,33046
8112d7b4:	10b77b04 	addi	r2,r2,-8724
8112d7b8:	10800383 	ldbu	r2,14(r2)
8112d7bc:	10803fcc 	andi	r2,r2,255
8112d7c0:	1885383a 	mul	r2,r3,r2
8112d7c4:	1007883a 	mov	r3,r2
8112d7c8:	00a045b4 	movhi	r2,33046
8112d7cc:	10b77b04 	addi	r2,r2,-8724
8112d7d0:	10801417 	ldw	r2,80(r2)
8112d7d4:	1885883a 	add	r2,r3,r2
8112d7d8:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112d7dc:	e03ffa15 	stw	zero,-24(fp)
8112d7e0:	00002c06 	br	8112d894 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112d7e4:	e0fffa17 	ldw	r3,-24(fp)
8112d7e8:	e0bffc17 	ldw	r2,-16(fp)
8112d7ec:	1885883a 	add	r2,r3,r2
8112d7f0:	d0e09617 	ldw	r3,-32168(gp)
8112d7f4:	180b883a 	mov	r5,r3
8112d7f8:	1009883a 	mov	r4,r2
8112d7fc:	112b5240 	call	8112b524 <Read_Sector_Data>
8112d800:	10002b26 	beq	r2,zero,8112d8b0 <find_first_empty_record_in_a_subdirectory+0x12c>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112d804:	e03ffb15 	stw	zero,-20(fp)
8112d808:	00001c06 	br	8112d87c <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
8112d80c:	e0bffb17 	ldw	r2,-20(fp)
8112d810:	1004917a 	slli	r2,r2,5
8112d814:	1007883a 	mov	r3,r2
8112d818:	d0a09817 	ldw	r2,-32160(gp)
8112d81c:	10800a17 	ldw	r2,40(r2)
8112d820:	1885883a 	add	r2,r3,r2
8112d824:	10800023 	ldbuio	r2,0(r2)
8112d828:	10803fcc 	andi	r2,r2,255
8112d82c:	10803fcc 	andi	r2,r2,255
8112d830:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
8112d834:	e0bffd0b 	ldhu	r2,-12(fp)
8112d838:	10803960 	cmpeqi	r2,r2,229
8112d83c:	1000021e 	bne	r2,zero,8112d848 <find_first_empty_record_in_a_subdirectory+0xc4>
8112d840:	e0bffd0b 	ldhu	r2,-12(fp)
8112d844:	10000a1e 	bne	r2,zero,8112d870 <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
8112d848:	e0bffa17 	ldw	r2,-24(fp)
8112d84c:	1006913a 	slli	r3,r2,4
8112d850:	e0bffb17 	ldw	r2,-20(fp)
8112d854:	1885883a 	add	r2,r3,r2
8112d858:	1006943a 	slli	r3,r2,16
8112d85c:	e0bff917 	ldw	r2,-28(fp)
8112d860:	1884b03a 	or	r2,r3,r2
8112d864:	e0bff815 	stw	r2,-32(fp)
                        return result;
8112d868:	e0bff817 	ldw	r2,-32(fp)
8112d86c:	00005306 	br	8112d9bc <find_first_empty_record_in_a_subdirectory+0x238>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8112d870:	e0bffb17 	ldw	r2,-20(fp)
8112d874:	10800044 	addi	r2,r2,1
8112d878:	e0bffb15 	stw	r2,-20(fp)
8112d87c:	e0bffb17 	ldw	r2,-20(fp)
8112d880:	10800410 	cmplti	r2,r2,16
8112d884:	103fe11e 	bne	r2,zero,8112d80c <__reset+0xfb10d80c>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112d888:	e0bffa17 	ldw	r2,-24(fp)
8112d88c:	10800044 	addi	r2,r2,1
8112d890:	e0bffa15 	stw	r2,-24(fp)
8112d894:	00a045b4 	movhi	r2,33046
8112d898:	10b77b04 	addi	r2,r2,-8724
8112d89c:	10800383 	ldbu	r2,14(r2)
8112d8a0:	10803fcc 	andi	r2,r2,255
8112d8a4:	e0fffa17 	ldw	r3,-24(fp)
8112d8a8:	18bfce16 	blt	r3,r2,8112d7e4 <__reset+0xfb10d7e4>
8112d8ac:	00000106 	br	8112d8b4 <find_first_empty_record_in_a_subdirectory+0x130>
                    }
                }
            }
            else
            {
                break;
8112d8b0:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
8112d8b4:	e0bff817 	ldw	r2,-32(fp)
8112d8b8:	1000390e 	bge	r2,zero,8112d9a0 <find_first_empty_record_in_a_subdirectory+0x21c>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
8112d8bc:	e0bff917 	ldw	r2,-28(fp)
8112d8c0:	e0fffd84 	addi	r3,fp,-10
8112d8c4:	180b883a 	mov	r5,r3
8112d8c8:	1009883a 	mov	r4,r2
8112d8cc:	112b5fc0 	call	8112b5fc <get_cluster_flag>
8112d8d0:	10003126 	beq	r2,zero,8112d998 <find_first_empty_record_in_a_subdirectory+0x214>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8112d8d4:	e0bffd8b 	ldhu	r2,-10(fp)
8112d8d8:	10bfffcc 	andi	r2,r2,65535
8112d8dc:	10fffe0c 	andi	r3,r2,65528
8112d8e0:	00bffe14 	movui	r2,65528
8112d8e4:	18802e1e 	bne	r3,r2,8112d9a0 <find_first_empty_record_in_a_subdirectory+0x21c>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
8112d8e8:	e0bffe04 	addi	r2,fp,-8
8112d8ec:	1009883a 	mov	r4,r2
8112d8f0:	112d5d80 	call	8112d5d8 <find_first_empty_cluster>
8112d8f4:	10002326 	beq	r2,zero,8112d984 <find_first_empty_record_in_a_subdirectory+0x200>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
8112d8f8:	e0bff917 	ldw	r2,-28(fp)
8112d8fc:	e0fffe17 	ldw	r3,-8(fp)
8112d900:	18ffffcc 	andi	r3,r3,65535
8112d904:	18e0001c 	xori	r3,r3,32768
8112d908:	18e00004 	addi	r3,r3,-32768
8112d90c:	01800044 	movi	r6,1
8112d910:	180b883a 	mov	r5,r3
8112d914:	1009883a 	mov	r4,r2
8112d918:	112b6b00 	call	8112b6b0 <mark_cluster>
8112d91c:	10001926 	beq	r2,zero,8112d984 <find_first_empty_record_in_a_subdirectory+0x200>
8112d920:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
8112d924:	01800044 	movi	r6,1
8112d928:	017fffc4 	movi	r5,-1
8112d92c:	1009883a 	mov	r4,r2
8112d930:	112b6b00 	call	8112b6b0 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
8112d934:	10001326 	beq	r2,zero,8112d984 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8112d938:	e0bff917 	ldw	r2,-28(fp)
8112d93c:	e0fffe17 	ldw	r3,-8(fp)
8112d940:	18ffffcc 	andi	r3,r3,65535
8112d944:	18e0001c 	xori	r3,r3,32768
8112d948:	18e00004 	addi	r3,r3,-32768
8112d94c:	000d883a 	mov	r6,zero
8112d950:	180b883a 	mov	r5,r3
8112d954:	1009883a 	mov	r4,r2
8112d958:	112b6b00 	call	8112b6b0 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
8112d95c:	10000926 	beq	r2,zero,8112d984 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8112d960:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
8112d964:	000d883a 	mov	r6,zero
8112d968:	017fffc4 	movi	r5,-1
8112d96c:	1009883a 	mov	r4,r2
8112d970:	112b6b00 	call	8112b6b0 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
8112d974:	10000326 	beq	r2,zero,8112d984 <find_first_empty_record_in_a_subdirectory+0x200>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
8112d978:	112b4d80 	call	8112b4d8 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
8112d97c:	e0bffe17 	ldw	r2,-8(fp)
8112d980:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
8112d984:	e0bffd8b 	ldhu	r2,-10(fp)
8112d988:	10bfffcc 	andi	r2,r2,65535
8112d98c:	10bffe0c 	andi	r2,r2,65528
8112d990:	e0bff915 	stw	r2,-28(fp)
8112d994:	00000206 	br	8112d9a0 <find_first_empty_record_in_a_subdirectory+0x21c>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
8112d998:	00bfffc4 	movi	r2,-1
8112d99c:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
8112d9a0:	e0bff917 	ldw	r2,-28(fp)
8112d9a4:	00fffdd4 	movui	r3,65527
8112d9a8:	18800316 	blt	r3,r2,8112d9b8 <find_first_empty_record_in_a_subdirectory+0x234>
8112d9ac:	e0bff817 	ldw	r2,-32(fp)
8112d9b0:	10bfffe0 	cmpeqi	r2,r2,-1
8112d9b4:	103f7c1e 	bne	r2,zero,8112d7a8 <__reset+0xfb10d7a8>
    return result; 
8112d9b8:	e0bff817 	ldw	r2,-32(fp)
}
8112d9bc:	e037883a 	mov	sp,fp
8112d9c0:	dfc00117 	ldw	ra,4(sp)
8112d9c4:	df000017 	ldw	fp,0(sp)
8112d9c8:	dec00204 	addi	sp,sp,8
8112d9cc:	f800283a 	ret

8112d9d0 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
8112d9d0:	defff904 	addi	sp,sp,-28
8112d9d4:	dfc00615 	stw	ra,24(sp)
8112d9d8:	df000515 	stw	fp,20(sp)
8112d9dc:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8112d9e0:	00a045b4 	movhi	r2,33046
8112d9e4:	10b77b04 	addi	r2,r2,-8724
8112d9e8:	1080050b 	ldhu	r2,20(r2)
8112d9ec:	10bfffcc 	andi	r2,r2,65535
8112d9f0:	1006917a 	slli	r3,r2,5
8112d9f4:	00a045b4 	movhi	r2,33046
8112d9f8:	10b77b04 	addi	r2,r2,-8724
8112d9fc:	1080030b 	ldhu	r2,12(r2)
8112da00:	10bfffcc 	andi	r2,r2,65535
8112da04:	1885283a 	div	r2,r3,r2
8112da08:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
8112da0c:	00bfffc4 	movi	r2,-1
8112da10:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112da14:	e03ffb15 	stw	zero,-20(fp)
8112da18:	00002d06 	br	8112dad0 <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8112da1c:	00a045b4 	movhi	r2,33046
8112da20:	10b77b04 	addi	r2,r2,-8724
8112da24:	10c01317 	ldw	r3,76(r2)
8112da28:	e0bffb17 	ldw	r2,-20(fp)
8112da2c:	1885883a 	add	r2,r3,r2
8112da30:	1007883a 	mov	r3,r2
8112da34:	d0a09617 	ldw	r2,-32168(gp)
8112da38:	100b883a 	mov	r5,r2
8112da3c:	1809883a 	mov	r4,r3
8112da40:	112b5240 	call	8112b524 <Read_Sector_Data>
8112da44:	10002626 	beq	r2,zero,8112dae0 <find_first_empty_record_in_root_directory+0x110>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
8112da48:	e03ffc15 	stw	zero,-16(fp)
8112da4c:	00001a06 	br	8112dab8 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
8112da50:	e0bffc17 	ldw	r2,-16(fp)
8112da54:	1004917a 	slli	r2,r2,5
8112da58:	1007883a 	mov	r3,r2
8112da5c:	d0a09817 	ldw	r2,-32160(gp)
8112da60:	10800a17 	ldw	r2,40(r2)
8112da64:	1885883a 	add	r2,r3,r2
8112da68:	10800023 	ldbuio	r2,0(r2)
8112da6c:	10803fcc 	andi	r2,r2,255
8112da70:	10803fcc 	andi	r2,r2,255
8112da74:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
8112da78:	e0bfff0b 	ldhu	r2,-4(fp)
8112da7c:	10803960 	cmpeqi	r2,r2,229
8112da80:	1000021e 	bne	r2,zero,8112da8c <find_first_empty_record_in_root_directory+0xbc>
8112da84:	e0bfff0b 	ldhu	r2,-4(fp)
8112da88:	1000081e 	bne	r2,zero,8112daac <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
8112da8c:	e0bffb17 	ldw	r2,-20(fp)
8112da90:	1006913a 	slli	r3,r2,4
8112da94:	e0bffc17 	ldw	r2,-16(fp)
8112da98:	1885883a 	add	r2,r3,r2
8112da9c:	1004943a 	slli	r2,r2,16
8112daa0:	e0bffe15 	stw	r2,-8(fp)
                    return result;
8112daa4:	e0bffe17 	ldw	r2,-8(fp)
8112daa8:	00000f06 	br	8112dae8 <find_first_empty_record_in_root_directory+0x118>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
8112daac:	e0bffc17 	ldw	r2,-16(fp)
8112dab0:	10800044 	addi	r2,r2,1
8112dab4:	e0bffc15 	stw	r2,-16(fp)
8112dab8:	e0bffc17 	ldw	r2,-16(fp)
8112dabc:	10800410 	cmplti	r2,r2,16
8112dac0:	103fe31e 	bne	r2,zero,8112da50 <__reset+0xfb10da50>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8112dac4:	e0bffb17 	ldw	r2,-20(fp)
8112dac8:	10800044 	addi	r2,r2,1
8112dacc:	e0bffb15 	stw	r2,-20(fp)
8112dad0:	e0fffb17 	ldw	r3,-20(fp)
8112dad4:	e0bffd17 	ldw	r2,-12(fp)
8112dad8:	18bfd016 	blt	r3,r2,8112da1c <__reset+0xfb10da1c>
8112dadc:	00000106 	br	8112dae4 <find_first_empty_record_in_root_directory+0x114>
                }
            }
        }
        else
        {
            break;
8112dae0:	0001883a 	nop
        }
    }
    return result;
8112dae4:	e0bffe17 	ldw	r2,-8(fp)
}
8112dae8:	e037883a 	mov	sp,fp
8112daec:	dfc00117 	ldw	ra,4(sp)
8112daf0:	df000017 	ldw	fp,0(sp)
8112daf4:	dec00204 	addi	sp,sp,8
8112daf8:	f800283a 	ret

8112dafc <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
8112dafc:	defffa04 	addi	sp,sp,-24
8112db00:	df000515 	stw	fp,20(sp)
8112db04:	df000504 	addi	fp,sp,20
8112db08:	e13ffd15 	stw	r4,-12(fp)
8112db0c:	e17ffe15 	stw	r5,-8(fp)
8112db10:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
8112db14:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
8112db18:	e03ffb15 	stw	zero,-20(fp)
8112db1c:	00002506 	br	8112dbb4 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
8112db20:	e0bffc17 	ldw	r2,-16(fp)
8112db24:	e0fffd17 	ldw	r3,-12(fp)
8112db28:	1885883a 	add	r2,r3,r2
8112db2c:	10800003 	ldbu	r2,0(r2)
8112db30:	10803fcc 	andi	r2,r2,255
8112db34:	1080201c 	xori	r2,r2,128
8112db38:	10bfe004 	addi	r2,r2,-128
8112db3c:	10800ba0 	cmpeqi	r2,r2,46
8112db40:	1000141e 	bne	r2,zero,8112db94 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
8112db44:	e0bffb17 	ldw	r2,-20(fp)
8112db48:	e0fffe17 	ldw	r3,-8(fp)
8112db4c:	1885883a 	add	r2,r3,r2
8112db50:	e0fffc17 	ldw	r3,-16(fp)
8112db54:	e13ffd17 	ldw	r4,-12(fp)
8112db58:	20c7883a 	add	r3,r4,r3
8112db5c:	18c00003 	ldbu	r3,0(r3)
8112db60:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
8112db64:	e0bffc17 	ldw	r2,-16(fp)
8112db68:	e0fffd17 	ldw	r3,-12(fp)
8112db6c:	1885883a 	add	r2,r3,r2
8112db70:	10800003 	ldbu	r2,0(r2)
8112db74:	10803fcc 	andi	r2,r2,255
8112db78:	1080201c 	xori	r2,r2,128
8112db7c:	10bfe004 	addi	r2,r2,-128
8112db80:	10000926 	beq	r2,zero,8112dba8 <convert_filename_to_name_extension+0xac>
8112db84:	e0bffc17 	ldw	r2,-16(fp)
8112db88:	10800044 	addi	r2,r2,1
8112db8c:	e0bffc15 	stw	r2,-16(fp)
8112db90:	00000506 	br	8112dba8 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
8112db94:	e0bffb17 	ldw	r2,-20(fp)
8112db98:	e0fffe17 	ldw	r3,-8(fp)
8112db9c:	1885883a 	add	r2,r3,r2
8112dba0:	00c00804 	movi	r3,32
8112dba4:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
8112dba8:	e0bffb17 	ldw	r2,-20(fp)
8112dbac:	10800044 	addi	r2,r2,1
8112dbb0:	e0bffb15 	stw	r2,-20(fp)
8112dbb4:	e0bffb17 	ldw	r2,-20(fp)
8112dbb8:	10800210 	cmplti	r2,r2,8
8112dbbc:	103fd81e 	bne	r2,zero,8112db20 <__reset+0xfb10db20>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
8112dbc0:	e0bffc17 	ldw	r2,-16(fp)
8112dbc4:	e0fffd17 	ldw	r3,-12(fp)
8112dbc8:	1885883a 	add	r2,r3,r2
8112dbcc:	10800003 	ldbu	r2,0(r2)
8112dbd0:	10803fcc 	andi	r2,r2,255
8112dbd4:	1080201c 	xori	r2,r2,128
8112dbd8:	10bfe004 	addi	r2,r2,-128
8112dbdc:	10800b98 	cmpnei	r2,r2,46
8112dbe0:	1000031e 	bne	r2,zero,8112dbf0 <convert_filename_to_name_extension+0xf4>
8112dbe4:	e0bffc17 	ldw	r2,-16(fp)
8112dbe8:	10800044 	addi	r2,r2,1
8112dbec:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
8112dbf0:	e03ffb15 	stw	zero,-20(fp)
8112dbf4:	00001c06 	br	8112dc68 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
8112dbf8:	e0bffc17 	ldw	r2,-16(fp)
8112dbfc:	e0fffd17 	ldw	r3,-12(fp)
8112dc00:	1885883a 	add	r2,r3,r2
8112dc04:	10800003 	ldbu	r2,0(r2)
8112dc08:	10803fcc 	andi	r2,r2,255
8112dc0c:	1080201c 	xori	r2,r2,128
8112dc10:	10bfe004 	addi	r2,r2,-128
8112dc14:	10000c26 	beq	r2,zero,8112dc48 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
8112dc18:	e0bffb17 	ldw	r2,-20(fp)
8112dc1c:	e0ffff17 	ldw	r3,-4(fp)
8112dc20:	1885883a 	add	r2,r3,r2
8112dc24:	e0fffc17 	ldw	r3,-16(fp)
8112dc28:	e13ffd17 	ldw	r4,-12(fp)
8112dc2c:	20c7883a 	add	r3,r4,r3
8112dc30:	18c00003 	ldbu	r3,0(r3)
8112dc34:	10c00005 	stb	r3,0(r2)
            local++;
8112dc38:	e0bffc17 	ldw	r2,-16(fp)
8112dc3c:	10800044 	addi	r2,r2,1
8112dc40:	e0bffc15 	stw	r2,-16(fp)
8112dc44:	00000506 	br	8112dc5c <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
8112dc48:	e0bffb17 	ldw	r2,-20(fp)
8112dc4c:	e0ffff17 	ldw	r3,-4(fp)
8112dc50:	1885883a 	add	r2,r3,r2
8112dc54:	00c00804 	movi	r3,32
8112dc58:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
8112dc5c:	e0bffb17 	ldw	r2,-20(fp)
8112dc60:	10800044 	addi	r2,r2,1
8112dc64:	e0bffb15 	stw	r2,-20(fp)
8112dc68:	e0bffb17 	ldw	r2,-20(fp)
8112dc6c:	108000d0 	cmplti	r2,r2,3
8112dc70:	103fe11e 	bne	r2,zero,8112dbf8 <__reset+0xfb10dbf8>
        {
            extension[counter] = ' ';
        }
    }

}
8112dc74:	0001883a 	nop
8112dc78:	e037883a 	mov	sp,fp
8112dc7c:	df000017 	ldw	fp,0(sp)
8112dc80:	dec00104 	addi	sp,sp,4
8112dc84:	f800283a 	ret

8112dc88 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
8112dc88:	defff504 	addi	sp,sp,-44
8112dc8c:	dfc00a15 	stw	ra,40(sp)
8112dc90:	df000915 	stw	fp,36(sp)
8112dc94:	df000904 	addi	fp,sp,36
8112dc98:	e13ffd15 	stw	r4,-12(fp)
8112dc9c:	e17ffe15 	stw	r5,-8(fp)
8112dca0:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
8112dca4:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
8112dca8:	e0bffc04 	addi	r2,fp,-16
8112dcac:	1009883a 	mov	r4,r2
8112dcb0:	112d5d80 	call	8112d5d8 <find_first_empty_cluster>
8112dcb4:	1000a026 	beq	r2,zero,8112df38 <create_file+0x2b0>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
8112dcb8:	e0bfff17 	ldw	r2,-4(fp)
8112dcbc:	10800a17 	ldw	r2,40(r2)
8112dcc0:	1000031e 	bne	r2,zero,8112dcd0 <create_file+0x48>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
8112dcc4:	112d9d00 	call	8112d9d0 <find_first_empty_record_in_root_directory>
8112dcc8:	e0bff815 	stw	r2,-32(fp)
8112dccc:	00000606 	br	8112dce8 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
8112dcd0:	e0bfff17 	ldw	r2,-4(fp)
8112dcd4:	1080058b 	ldhu	r2,22(r2)
8112dcd8:	10bfffcc 	andi	r2,r2,65535
8112dcdc:	1009883a 	mov	r4,r2
8112dce0:	112d7840 	call	8112d784 <find_first_empty_record_in_a_subdirectory>
8112dce4:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
8112dce8:	e0bff817 	ldw	r2,-32(fp)
8112dcec:	10009216 	blt	r2,zero,8112df38 <create_file+0x2b0>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
8112dcf0:	e13ffd17 	ldw	r4,-12(fp)
8112dcf4:	112c8d80 	call	8112c8d8 <get_dir_divider_location>
8112dcf8:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
8112dcfc:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
8112dd00:	00000b06 	br	8112dd30 <create_file+0xa8>
            {
                last_dir_separator = last_dir_separator+location+1;
8112dd04:	e0fffa17 	ldw	r3,-24(fp)
8112dd08:	e0bff917 	ldw	r2,-28(fp)
8112dd0c:	1885883a 	add	r2,r3,r2
8112dd10:	10800044 	addi	r2,r2,1
8112dd14:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
8112dd18:	e0bffa17 	ldw	r2,-24(fp)
8112dd1c:	e0fffd17 	ldw	r3,-12(fp)
8112dd20:	1885883a 	add	r2,r3,r2
8112dd24:	1009883a 	mov	r4,r2
8112dd28:	112c8d80 	call	8112c8d8 <get_dir_divider_location>
8112dd2c:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
8112dd30:	e0bff917 	ldw	r2,-28(fp)
8112dd34:	00bff316 	blt	zero,r2,8112dd04 <__reset+0xfb10dd04>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
8112dd38:	e0bffa17 	ldw	r2,-24(fp)
8112dd3c:	e0fffd17 	ldw	r3,-12(fp)
8112dd40:	1887883a 	add	r3,r3,r2
8112dd44:	e13ffe17 	ldw	r4,-8(fp)
8112dd48:	e0bffe17 	ldw	r2,-8(fp)
8112dd4c:	10800204 	addi	r2,r2,8
8112dd50:	100d883a 	mov	r6,r2
8112dd54:	200b883a 	mov	r5,r4
8112dd58:	1809883a 	mov	r4,r3
8112dd5c:	112dafc0 	call	8112dafc <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
8112dd60:	e0bffe17 	ldw	r2,-8(fp)
8112dd64:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
8112dd68:	e0bffe17 	ldw	r2,-8(fp)
8112dd6c:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
8112dd70:	e0bffe17 	ldw	r2,-8(fp)
8112dd74:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
8112dd78:	e0bffe17 	ldw	r2,-8(fp)
8112dd7c:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
8112dd80:	e0bffe17 	ldw	r2,-8(fp)
8112dd84:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
8112dd88:	e0bffe17 	ldw	r2,-8(fp)
8112dd8c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
8112dd90:	e0bffc17 	ldw	r2,-16(fp)
8112dd94:	1007883a 	mov	r3,r2
8112dd98:	e0bffe17 	ldw	r2,-8(fp)
8112dd9c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
8112dda0:	e0bffe17 	ldw	r2,-8(fp)
8112dda4:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
8112dda8:	e0fffc17 	ldw	r3,-16(fp)
8112ddac:	e0bffe17 	ldw	r2,-8(fp)
8112ddb0:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
8112ddb4:	e0bffe17 	ldw	r2,-8(fp)
8112ddb8:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
8112ddbc:	e0bffe17 	ldw	r2,-8(fp)
8112ddc0:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
8112ddc4:	e0bff817 	ldw	r2,-32(fp)
8112ddc8:	10ffffcc 	andi	r3,r2,65535
8112ddcc:	e0bffe17 	ldw	r2,-8(fp)
8112ddd0:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
8112ddd4:	e0bff817 	ldw	r2,-32(fp)
8112ddd8:	1004d43a 	srli	r2,r2,16
8112dddc:	1000010e 	bge	r2,zero,8112dde4 <create_file+0x15c>
8112dde0:	108003c4 	addi	r2,r2,15
8112dde4:	1005d13a 	srai	r2,r2,4
8112dde8:	1007883a 	mov	r3,r2
8112ddec:	e0bffe17 	ldw	r2,-8(fp)
8112ddf0:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
8112ddf4:	e0bff817 	ldw	r2,-32(fp)
8112ddf8:	1004d43a 	srli	r2,r2,16
8112ddfc:	1007883a 	mov	r3,r2
8112de00:	00a00034 	movhi	r2,32768
8112de04:	108003c4 	addi	r2,r2,15
8112de08:	1884703a 	and	r2,r3,r2
8112de0c:	1000040e 	bge	r2,zero,8112de20 <create_file+0x198>
8112de10:	10bfffc4 	addi	r2,r2,-1
8112de14:	00fffc04 	movi	r3,-16
8112de18:	10c4b03a 	or	r2,r2,r3
8112de1c:	10800044 	addi	r2,r2,1
8112de20:	1004917a 	slli	r2,r2,5
8112de24:	1007883a 	mov	r3,r2
8112de28:	e0bffe17 	ldw	r2,-8(fp)
8112de2c:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
8112de30:	e0bfff17 	ldw	r2,-4(fp)
8112de34:	1080058b 	ldhu	r2,22(r2)
8112de38:	10ffffcc 	andi	r3,r2,65535
8112de3c:	e0bffe17 	ldw	r2,-8(fp)
8112de40:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
8112de44:	e0bffe17 	ldw	r2,-8(fp)
8112de48:	00c00044 	movi	r3,1
8112de4c:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
8112de50:	e0bffe17 	ldw	r2,-8(fp)
8112de54:	00c00044 	movi	r3,1
8112de58:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
8112de5c:	e0bffe17 	ldw	r2,-8(fp)
8112de60:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
8112de64:	1000071e 	bne	r2,zero,8112de84 <create_file+0x1fc>
8112de68:	00a045b4 	movhi	r2,33046
8112de6c:	10b77b04 	addi	r2,r2,-8724
8112de70:	10c01317 	ldw	r3,76(r2)
8112de74:	e0bffe17 	ldw	r2,-8(fp)
8112de78:	10800b17 	ldw	r2,44(r2)
8112de7c:	1885883a 	add	r2,r3,r2
8112de80:	00000f06 	br	8112dec0 <create_file+0x238>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
8112de84:	00a045b4 	movhi	r2,33046
8112de88:	10b77b04 	addi	r2,r2,-8724
8112de8c:	10c01417 	ldw	r3,80(r2)
8112de90:	e0bffe17 	ldw	r2,-8(fp)
8112de94:	10800a17 	ldw	r2,40(r2)
8112de98:	113fff84 	addi	r4,r2,-2
8112de9c:	00a045b4 	movhi	r2,33046
8112dea0:	10b77b04 	addi	r2,r2,-8724
8112dea4:	10800383 	ldbu	r2,14(r2)
8112dea8:	10803fcc 	andi	r2,r2,255
8112deac:	2085383a 	mul	r2,r4,r2
8112deb0:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
8112deb4:	e0bffe17 	ldw	r2,-8(fp)
8112deb8:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
8112debc:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
8112dec0:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
8112dec4:	e0bffb17 	ldw	r2,-20(fp)
8112dec8:	d0e09617 	ldw	r3,-32168(gp)
8112decc:	180b883a 	mov	r5,r3
8112ded0:	1009883a 	mov	r4,r2
8112ded4:	112b5240 	call	8112b524 <Read_Sector_Data>
8112ded8:	10001726 	beq	r2,zero,8112df38 <create_file+0x2b0>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
8112dedc:	e0bffe17 	ldw	r2,-8(fp)
8112dee0:	10800c0b 	ldhu	r2,48(r2)
8112dee4:	10bfffcc 	andi	r2,r2,65535
8112dee8:	10a0001c 	xori	r2,r2,32768
8112deec:	10a00004 	addi	r2,r2,-32768
8112def0:	e17ffe17 	ldw	r5,-8(fp)
8112def4:	1009883a 	mov	r4,r2
8112def8:	112bbb00 	call	8112bbb0 <Write_File_Record_At_Offset>
8112defc:	10000e26 	beq	r2,zero,8112df38 <create_file+0x2b0>
                {
                    Save_Modified_Sector();
8112df00:	112b4d80 	call	8112b4d8 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
8112df04:	e0bffc17 	ldw	r2,-16(fp)
8112df08:	01800044 	movi	r6,1
8112df0c:	017fffc4 	movi	r5,-1
8112df10:	1009883a 	mov	r4,r2
8112df14:	112b6b00 	call	8112b6b0 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
8112df18:	e0bffc17 	ldw	r2,-16(fp)
8112df1c:	000d883a 	mov	r6,zero
8112df20:	017fffc4 	movi	r5,-1
8112df24:	1009883a 	mov	r4,r2
8112df28:	112b6b00 	call	8112b6b0 <mark_cluster>
8112df2c:	10000226 	beq	r2,zero,8112df38 <create_file+0x2b0>
                    {
                        result = true;
8112df30:	00800044 	movi	r2,1
8112df34:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
8112df38:	e0bff717 	ldw	r2,-36(fp)
}
8112df3c:	e037883a 	mov	sp,fp
8112df40:	dfc00117 	ldw	ra,4(sp)
8112df44:	df000017 	ldw	fp,0(sp)
8112df48:	dec00204 	addi	sp,sp,8
8112df4c:	f800283a 	ret

8112df50 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
8112df50:	defffb04 	addi	sp,sp,-20
8112df54:	df000415 	stw	fp,16(sp)
8112df58:	df000404 	addi	fp,sp,16
8112df5c:	e13ffe15 	stw	r4,-8(fp)
8112df60:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
8112df64:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
8112df68:	e03ffc15 	stw	zero,-16(fp)
8112df6c:	00001506 	br	8112dfc4 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
8112df70:	e0fffe17 	ldw	r3,-8(fp)
8112df74:	e0bffc17 	ldw	r2,-16(fp)
8112df78:	1885883a 	add	r2,r3,r2
8112df7c:	10800003 	ldbu	r2,0(r2)
8112df80:	10803fcc 	andi	r2,r2,255
8112df84:	10800820 	cmpeqi	r2,r2,32
8112df88:	10000b1e 	bne	r2,zero,8112dfb8 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
8112df8c:	e0bffd17 	ldw	r2,-12(fp)
8112df90:	e0ffff17 	ldw	r3,-4(fp)
8112df94:	1885883a 	add	r2,r3,r2
8112df98:	e13ffe17 	ldw	r4,-8(fp)
8112df9c:	e0fffc17 	ldw	r3,-16(fp)
8112dfa0:	20c7883a 	add	r3,r4,r3
8112dfa4:	18c00003 	ldbu	r3,0(r3)
8112dfa8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
8112dfac:	e0bffd17 	ldw	r2,-12(fp)
8112dfb0:	10800044 	addi	r2,r2,1
8112dfb4:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
8112dfb8:	e0bffc17 	ldw	r2,-16(fp)
8112dfbc:	10800044 	addi	r2,r2,1
8112dfc0:	e0bffc15 	stw	r2,-16(fp)
8112dfc4:	e0bffc17 	ldw	r2,-16(fp)
8112dfc8:	10800210 	cmplti	r2,r2,8
8112dfcc:	103fe81e 	bne	r2,zero,8112df70 <__reset+0xfb10df70>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
8112dfd0:	e0bffe17 	ldw	r2,-8(fp)
8112dfd4:	10800203 	ldbu	r2,8(r2)
8112dfd8:	10803fcc 	andi	r2,r2,255
8112dfdc:	10800820 	cmpeqi	r2,r2,32
8112dfe0:	1000241e 	bne	r2,zero,8112e074 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
8112dfe4:	e0bffd17 	ldw	r2,-12(fp)
8112dfe8:	e0ffff17 	ldw	r3,-4(fp)
8112dfec:	1885883a 	add	r2,r3,r2
8112dff0:	00c00b84 	movi	r3,46
8112dff4:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
8112dff8:	e0bffd17 	ldw	r2,-12(fp)
8112dffc:	10800044 	addi	r2,r2,1
8112e000:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
8112e004:	e03ffc15 	stw	zero,-16(fp)
8112e008:	00001706 	br	8112e068 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
8112e00c:	e0fffe17 	ldw	r3,-8(fp)
8112e010:	e0bffc17 	ldw	r2,-16(fp)
8112e014:	1885883a 	add	r2,r3,r2
8112e018:	10800204 	addi	r2,r2,8
8112e01c:	10800003 	ldbu	r2,0(r2)
8112e020:	10803fcc 	andi	r2,r2,255
8112e024:	10800820 	cmpeqi	r2,r2,32
8112e028:	10000c1e 	bne	r2,zero,8112e05c <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
8112e02c:	e0bffd17 	ldw	r2,-12(fp)
8112e030:	e0ffff17 	ldw	r3,-4(fp)
8112e034:	1885883a 	add	r2,r3,r2
8112e038:	e13ffe17 	ldw	r4,-8(fp)
8112e03c:	e0fffc17 	ldw	r3,-16(fp)
8112e040:	20c7883a 	add	r3,r4,r3
8112e044:	18c00204 	addi	r3,r3,8
8112e048:	18c00003 	ldbu	r3,0(r3)
8112e04c:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
8112e050:	e0bffd17 	ldw	r2,-12(fp)
8112e054:	10800044 	addi	r2,r2,1
8112e058:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
8112e05c:	e0bffc17 	ldw	r2,-16(fp)
8112e060:	10800044 	addi	r2,r2,1
8112e064:	e0bffc15 	stw	r2,-16(fp)
8112e068:	e0bffc17 	ldw	r2,-16(fp)
8112e06c:	108000d0 	cmplti	r2,r2,3
8112e070:	103fe61e 	bne	r2,zero,8112e00c <__reset+0xfb10e00c>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
8112e074:	e0bffd17 	ldw	r2,-12(fp)
8112e078:	e0ffff17 	ldw	r3,-4(fp)
8112e07c:	1885883a 	add	r2,r3,r2
8112e080:	10000005 	stb	zero,0(r2)
}
8112e084:	0001883a 	nop
8112e088:	e037883a 	mov	sp,fp
8112e08c:	df000017 	ldw	fp,0(sp)
8112e090:	dec00104 	addi	sp,sp,4
8112e094:	f800283a 	ret

8112e098 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
8112e098:	defffc04 	addi	sp,sp,-16
8112e09c:	dfc00315 	stw	ra,12(sp)
8112e0a0:	df000215 	stw	fp,8(sp)
8112e0a4:	df000204 	addi	fp,sp,8
8112e0a8:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
8112e0ac:	d1601204 	addi	r5,gp,-32696
8112e0b0:	e13fff17 	ldw	r4,-4(fp)
8112e0b4:	113420c0 	call	8113420c <alt_find_dev>
8112e0b8:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
8112e0bc:	e0bffe17 	ldw	r2,-8(fp)
8112e0c0:	10001e26 	beq	r2,zero,8112e13c <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
8112e0c4:	e0bffe17 	ldw	r2,-8(fp)
8112e0c8:	10800a17 	ldw	r2,40(r2)
8112e0cc:	10808d04 	addi	r2,r2,564
8112e0d0:	d0a09015 	stw	r2,-32192(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
8112e0d4:	e0bffe17 	ldw	r2,-8(fp)
8112e0d8:	10800a17 	ldw	r2,40(r2)
8112e0dc:	10808904 	addi	r2,r2,548
8112e0e0:	d0a09115 	stw	r2,-32188(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
8112e0e4:	e0bffe17 	ldw	r2,-8(fp)
8112e0e8:	10800a17 	ldw	r2,40(r2)
8112e0ec:	10808404 	addi	r2,r2,528
8112e0f0:	d0a09215 	stw	r2,-32184(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
8112e0f4:	e0bffe17 	ldw	r2,-8(fp)
8112e0f8:	10800a17 	ldw	r2,40(r2)
8112e0fc:	10808c04 	addi	r2,r2,560
8112e100:	d0a09315 	stw	r2,-32180(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
8112e104:	e0bffe17 	ldw	r2,-8(fp)
8112e108:	10800a17 	ldw	r2,40(r2)
8112e10c:	10808b04 	addi	r2,r2,556
8112e110:	d0a09415 	stw	r2,-32176(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
8112e114:	e0bffe17 	ldw	r2,-8(fp)
8112e118:	10800a17 	ldw	r2,40(r2)
8112e11c:	d0a09515 	stw	r2,-32172(gp)
		device_pointer = dev;
8112e120:	e0bffe17 	ldw	r2,-8(fp)
8112e124:	d0a09815 	stw	r2,-32160(gp)
		initialized = false;
8112e128:	d0208e15 	stw	zero,-32200(gp)
		is_sd_card_formated_as_FAT16 = false;
8112e12c:	d0208f15 	stw	zero,-32196(gp)
		search_data.valid = false;
8112e130:	00a045b4 	movhi	r2,33046
8112e134:	10b77604 	addi	r2,r2,-8744
8112e138:	10000415 	stw	zero,16(r2)
	}
	return dev;
8112e13c:	e0bffe17 	ldw	r2,-8(fp)
}
8112e140:	e037883a 	mov	sp,fp
8112e144:	dfc00117 	ldw	ra,4(sp)
8112e148:	df000017 	ldw	fp,0(sp)
8112e14c:	dec00204 	addi	sp,sp,8
8112e150:	f800283a 	ret

8112e154 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
8112e154:	defffd04 	addi	sp,sp,-12
8112e158:	df000215 	stw	fp,8(sp)
8112e15c:	df000204 	addi	fp,sp,8
    bool result = false;
8112e160:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
8112e164:	d0a09817 	ldw	r2,-32160(gp)
8112e168:	10000826 	beq	r2,zero,8112e18c <alt_up_sd_card_is_Present+0x38>
8112e16c:	d0a09017 	ldw	r2,-32192(gp)
8112e170:	1080002b 	ldhuio	r2,0(r2)
8112e174:	10bfffcc 	andi	r2,r2,65535
8112e178:	1080008c 	andi	r2,r2,2
8112e17c:	10000326 	beq	r2,zero,8112e18c <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
8112e180:	00800044 	movi	r2,1
8112e184:	e0bffe15 	stw	r2,-8(fp)
8112e188:	00001e06 	br	8112e204 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
8112e18c:	d0a08e17 	ldw	r2,-32200(gp)
8112e190:	10800058 	cmpnei	r2,r2,1
8112e194:	10001b1e 	bne	r2,zero,8112e204 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
8112e198:	d0208e15 	stw	zero,-32200(gp)
		search_data.valid = false;
8112e19c:	00a045b4 	movhi	r2,33046
8112e1a0:	10b77604 	addi	r2,r2,-8744
8112e1a4:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
8112e1a8:	d0208f15 	stw	zero,-32196(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
8112e1ac:	e03fff15 	stw	zero,-4(fp)
8112e1b0:	00001106 	br	8112e1f8 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
8112e1b4:	00a045b4 	movhi	r2,33046
8112e1b8:	10b79004 	addi	r2,r2,-8640
8112e1bc:	e0ffff17 	ldw	r3,-4(fp)
8112e1c0:	180691ba 	slli	r3,r3,6
8112e1c4:	10c5883a 	add	r2,r2,r3
8112e1c8:	10800f04 	addi	r2,r2,60
8112e1cc:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
8112e1d0:	00a045b4 	movhi	r2,33046
8112e1d4:	10b79004 	addi	r2,r2,-8640
8112e1d8:	e0ffff17 	ldw	r3,-4(fp)
8112e1dc:	180691ba 	slli	r3,r3,6
8112e1e0:	10c5883a 	add	r2,r2,r3
8112e1e4:	10800e04 	addi	r2,r2,56
8112e1e8:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
8112e1ec:	e0bfff17 	ldw	r2,-4(fp)
8112e1f0:	10800044 	addi	r2,r2,1
8112e1f4:	e0bfff15 	stw	r2,-4(fp)
8112e1f8:	e0bfff17 	ldw	r2,-4(fp)
8112e1fc:	10800510 	cmplti	r2,r2,20
8112e200:	103fec1e 	bne	r2,zero,8112e1b4 <__reset+0xfb10e1b4>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
8112e204:	e0bffe17 	ldw	r2,-8(fp)
}
8112e208:	e037883a 	mov	sp,fp
8112e20c:	df000017 	ldw	fp,0(sp)
8112e210:	dec00104 	addi	sp,sp,4
8112e214:	f800283a 	ret

8112e218 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
8112e218:	defffd04 	addi	sp,sp,-12
8112e21c:	dfc00215 	stw	ra,8(sp)
8112e220:	df000115 	stw	fp,4(sp)
8112e224:	df000104 	addi	fp,sp,4
	bool result = false;
8112e228:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
8112e22c:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112e230:	10000c26 	beq	r2,zero,8112e264 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
8112e234:	d0a08e17 	ldw	r2,-32200(gp)
8112e238:	1000071e 	bne	r2,zero,8112e258 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
8112e23c:	112c4bc0 	call	8112c4bc <Look_for_FAT16>
8112e240:	d0a08f15 	stw	r2,-32196(gp)
			initialized = is_sd_card_formated_as_FAT16;
8112e244:	d0a08f17 	ldw	r2,-32196(gp)
8112e248:	d0a08e15 	stw	r2,-32200(gp)
			search_data.valid = false;
8112e24c:	00a045b4 	movhi	r2,33046
8112e250:	10b77604 	addi	r2,r2,-8744
8112e254:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
8112e258:	d0a08f17 	ldw	r2,-32196(gp)
8112e25c:	e0bfff15 	stw	r2,-4(fp)
8112e260:	00000206 	br	8112e26c <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
8112e264:	d0208e15 	stw	zero,-32200(gp)
		is_sd_card_formated_as_FAT16 = false;
8112e268:	d0208f15 	stw	zero,-32196(gp)
	}

	return result;
8112e26c:	e0bfff17 	ldw	r2,-4(fp)
}
8112e270:	e037883a 	mov	sp,fp
8112e274:	dfc00117 	ldw	ra,4(sp)
8112e278:	df000017 	ldw	fp,0(sp)
8112e27c:	dec00204 	addi	sp,sp,8
8112e280:	f800283a 	ret

8112e284 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
8112e284:	deffea04 	addi	sp,sp,-88
8112e288:	dfc01515 	stw	ra,84(sp)
8112e28c:	df001415 	stw	fp,80(sp)
8112e290:	df001404 	addi	fp,sp,80
8112e294:	e13ffe15 	stw	r4,-8(fp)
8112e298:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
8112e29c:	00800084 	movi	r2,2
8112e2a0:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112e2a4:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112e2a8:	10002426 	beq	r2,zero,8112e33c <alt_up_sd_card_find_first+0xb8>
8112e2ac:	d0a08f17 	ldw	r2,-32196(gp)
8112e2b0:	10002226 	beq	r2,zero,8112e33c <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
8112e2b4:	e0ffee04 	addi	r3,fp,-72
8112e2b8:	e0bfed04 	addi	r2,fp,-76
8112e2bc:	180d883a 	mov	r6,r3
8112e2c0:	100b883a 	mov	r5,r2
8112e2c4:	e13ffe17 	ldw	r4,-8(fp)
8112e2c8:	112cc2c0 	call	8112cc2c <get_home_directory_cluster_for_file>
8112e2cc:	10001926 	beq	r2,zero,8112e334 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
8112e2d0:	e0bfed17 	ldw	r2,-76(fp)
8112e2d4:	1007883a 	mov	r3,r2
8112e2d8:	00a045b4 	movhi	r2,33046
8112e2dc:	10b77604 	addi	r2,r2,-8744
8112e2e0:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
8112e2e4:	e0bfed17 	ldw	r2,-76(fp)
8112e2e8:	1007883a 	mov	r3,r2
8112e2ec:	00a045b4 	movhi	r2,33046
8112e2f0:	10b77604 	addi	r2,r2,-8744
8112e2f4:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
8112e2f8:	00a045b4 	movhi	r2,33046
8112e2fc:	10b77604 	addi	r2,r2,-8744
8112e300:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
8112e304:	00a045b4 	movhi	r2,33046
8112e308:	10b77604 	addi	r2,r2,-8744
8112e30c:	00ffffc4 	movi	r3,-1
8112e310:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
8112e314:	00a045b4 	movhi	r2,33046
8112e318:	10b77604 	addi	r2,r2,-8744
8112e31c:	00c00044 	movi	r3,1
8112e320:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
8112e324:	e13fff17 	ldw	r4,-4(fp)
8112e328:	112e3540 	call	8112e354 <alt_up_sd_card_find_next>
8112e32c:	e0bfec0d 	sth	r2,-80(fp)
8112e330:	00000206 	br	8112e33c <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
8112e334:	00800044 	movi	r2,1
8112e338:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
8112e33c:	e0bfec0b 	ldhu	r2,-80(fp)
}
8112e340:	e037883a 	mov	sp,fp
8112e344:	dfc00117 	ldw	ra,4(sp)
8112e348:	df000017 	ldw	fp,0(sp)
8112e34c:	dec00204 	addi	sp,sp,8
8112e350:	f800283a 	ret

8112e354 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
8112e354:	deffe404 	addi	sp,sp,-112
8112e358:	dfc01b15 	stw	ra,108(sp)
8112e35c:	df001a15 	stw	fp,104(sp)
8112e360:	df001a04 	addi	fp,sp,104
8112e364:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
8112e368:	00800084 	movi	r2,2
8112e36c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112e370:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112e374:	1000df26 	beq	r2,zero,8112e6f4 <alt_up_sd_card_find_next+0x3a0>
8112e378:	d0a08f17 	ldw	r2,-32196(gp)
8112e37c:	1000dd26 	beq	r2,zero,8112e6f4 <alt_up_sd_card_find_next+0x3a0>
	{
		if (search_data.valid)
8112e380:	00a045b4 	movhi	r2,33046
8112e384:	10b77604 	addi	r2,r2,-8744
8112e388:	10800417 	ldw	r2,16(r2)
8112e38c:	1000d726 	beq	r2,zero,8112e6ec <alt_up_sd_card_find_next+0x398>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
8112e390:	00a045b4 	movhi	r2,33046
8112e394:	10b77604 	addi	r2,r2,-8744
8112e398:	10800117 	ldw	r2,4(r2)
8112e39c:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
8112e3a0:	e0bfe717 	ldw	r2,-100(fp)
8112e3a4:	1000561e 	bne	r2,zero,8112e500 <alt_up_sd_card_find_next+0x1ac>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
8112e3a8:	00a045b4 	movhi	r2,33046
8112e3ac:	10b77b04 	addi	r2,r2,-8724
8112e3b0:	1080050b 	ldhu	r2,20(r2)
8112e3b4:	10bfffcc 	andi	r2,r2,65535
8112e3b8:	1006917a 	slli	r3,r2,5
8112e3bc:	00a045b4 	movhi	r2,33046
8112e3c0:	10b77b04 	addi	r2,r2,-8724
8112e3c4:	1080030b 	ldhu	r2,12(r2)
8112e3c8:	10bfffcc 	andi	r2,r2,65535
8112e3cc:	1885283a 	div	r2,r3,r2
8112e3d0:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
8112e3d4:	00a045b4 	movhi	r2,33046
8112e3d8:	10b77604 	addi	r2,r2,-8744
8112e3dc:	10800217 	ldw	r2,8(r2)
8112e3e0:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
8112e3e4:	00a045b4 	movhi	r2,33046
8112e3e8:	10b77604 	addi	r2,r2,-8744
8112e3ec:	1080030b 	ldhu	r2,12(r2)
8112e3f0:	10bfffcc 	andi	r2,r2,65535
8112e3f4:	10a0001c 	xori	r2,r2,32768
8112e3f8:	10a00004 	addi	r2,r2,-32768
8112e3fc:	10800044 	addi	r2,r2,1
8112e400:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
8112e404:	00003606 	br	8112e4e0 <alt_up_sd_card_find_next+0x18c>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
8112e408:	00a045b4 	movhi	r2,33046
8112e40c:	10b77b04 	addi	r2,r2,-8724
8112e410:	10c01317 	ldw	r3,76(r2)
8112e414:	e0bfe817 	ldw	r2,-96(fp)
8112e418:	1885883a 	add	r2,r3,r2
8112e41c:	1007883a 	mov	r3,r2
8112e420:	d0a09617 	ldw	r2,-32168(gp)
8112e424:	100b883a 	mov	r5,r2
8112e428:	1809883a 	mov	r4,r3
8112e42c:	112b5240 	call	8112b524 <Read_Sector_Data>
8112e430:	10002f26 	beq	r2,zero,8112e4f0 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
8112e434:	00002306 	br	8112e4c4 <alt_up_sd_card_find_next+0x170>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
8112e438:	e0bfe917 	ldw	r2,-92(fp)
8112e43c:	1004917a 	slli	r2,r2,5
8112e440:	e13fe817 	ldw	r4,-96(fp)
8112e444:	e0ffef04 	addi	r3,fp,-68
8112e448:	200f883a 	mov	r7,r4
8112e44c:	000d883a 	mov	r6,zero
8112e450:	180b883a 	mov	r5,r3
8112e454:	1009883a 	mov	r4,r2
8112e458:	112b9340 	call	8112b934 <Read_File_Record_At_Offset>
8112e45c:	10001626 	beq	r2,zero,8112e4b8 <alt_up_sd_card_find_next+0x164>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
8112e460:	e0bfef03 	ldbu	r2,-68(fp)
8112e464:	10803fcc 	andi	r2,r2,255
8112e468:	10001326 	beq	r2,zero,8112e4b8 <alt_up_sd_card_find_next+0x164>
8112e46c:	e0bfef03 	ldbu	r2,-68(fp)
8112e470:	10803fcc 	andi	r2,r2,255
8112e474:	10803960 	cmpeqi	r2,r2,229
8112e478:	10000f1e 	bne	r2,zero,8112e4b8 <alt_up_sd_card_find_next+0x164>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
8112e47c:	e0bfe917 	ldw	r2,-92(fp)
8112e480:	1007883a 	mov	r3,r2
8112e484:	00a045b4 	movhi	r2,33046
8112e488:	10b77604 	addi	r2,r2,-8744
8112e48c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
8112e490:	e0ffe817 	ldw	r3,-96(fp)
8112e494:	00a045b4 	movhi	r2,33046
8112e498:	10b77604 	addi	r2,r2,-8744
8112e49c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
8112e4a0:	e0bfef04 	addi	r2,fp,-68
8112e4a4:	e17fff17 	ldw	r5,-4(fp)
8112e4a8:	1009883a 	mov	r4,r2
8112e4ac:	112df500 	call	8112df50 <copy_file_record_name_to_string>
									return 0;
8112e4b0:	0005883a 	mov	r2,zero
8112e4b4:	00009006 	br	8112e6f8 <alt_up_sd_card_find_next+0x3a4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
8112e4b8:	e0bfe917 	ldw	r2,-92(fp)
8112e4bc:	10800044 	addi	r2,r2,1
8112e4c0:	e0bfe915 	stw	r2,-92(fp)
8112e4c4:	e0bfe917 	ldw	r2,-92(fp)
8112e4c8:	10800410 	cmplti	r2,r2,16
8112e4cc:	103fda1e 	bne	r2,zero,8112e438 <__reset+0xfb10e438>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
8112e4d0:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
8112e4d4:	e0bfe817 	ldw	r2,-96(fp)
8112e4d8:	10800044 	addi	r2,r2,1
8112e4dc:	e0bfe815 	stw	r2,-96(fp)
8112e4e0:	e0ffe817 	ldw	r3,-96(fp)
8112e4e4:	e0bfec17 	ldw	r2,-80(fp)
8112e4e8:	18bfc716 	blt	r3,r2,8112e408 <__reset+0xfb10e408>
8112e4ec:	00000106 	br	8112e4f4 <alt_up_sd_card_find_next+0x1a0>
						}
						file_counter = 0;
					}
					else
					{
						break;
8112e4f0:	0001883a 	nop
					}
				}
				result = -1;
8112e4f4:	00bfffc4 	movi	r2,-1
8112e4f8:	e0bfe60d 	sth	r2,-104(fp)
8112e4fc:	00007d06 	br	8112e6f4 <alt_up_sd_card_find_next+0x3a0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
8112e500:	00a045b4 	movhi	r2,33046
8112e504:	10b77604 	addi	r2,r2,-8744
8112e508:	1080030b 	ldhu	r2,12(r2)
8112e50c:	10bfffcc 	andi	r2,r2,65535
8112e510:	10a0001c 	xori	r2,r2,32768
8112e514:	10a00004 	addi	r2,r2,-32768
8112e518:	10800044 	addi	r2,r2,1
8112e51c:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
8112e520:	e0bfe717 	ldw	r2,-100(fp)
8112e524:	10ffff84 	addi	r3,r2,-2
8112e528:	00a045b4 	movhi	r2,33046
8112e52c:	10b77b04 	addi	r2,r2,-8724
8112e530:	10800383 	ldbu	r2,14(r2)
8112e534:	10803fcc 	andi	r2,r2,255
8112e538:	1885383a 	mul	r2,r3,r2
8112e53c:	1007883a 	mov	r3,r2
8112e540:	00a045b4 	movhi	r2,33046
8112e544:	10b77b04 	addi	r2,r2,-8724
8112e548:	10801417 	ldw	r2,80(r2)
8112e54c:	1885883a 	add	r2,r3,r2
8112e550:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
8112e554:	00a045b4 	movhi	r2,33046
8112e558:	10b77604 	addi	r2,r2,-8744
8112e55c:	10800217 	ldw	r2,8(r2)
8112e560:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112e564:	00003806 	br	8112e648 <alt_up_sd_card_find_next+0x2f4>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8112e568:	e0ffeb17 	ldw	r3,-84(fp)
8112e56c:	e0bfed17 	ldw	r2,-76(fp)
8112e570:	1885883a 	add	r2,r3,r2
8112e574:	d0e09617 	ldw	r3,-32168(gp)
8112e578:	180b883a 	mov	r5,r3
8112e57c:	1009883a 	mov	r4,r2
8112e580:	112b5240 	call	8112b524 <Read_Sector_Data>
8112e584:	10003726 	beq	r2,zero,8112e664 <alt_up_sd_card_find_next+0x310>
						{        
							for (; file_counter < 16; file_counter++)
8112e588:	00002806 	br	8112e62c <alt_up_sd_card_find_next+0x2d8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
8112e58c:	e0bfea17 	ldw	r2,-88(fp)
8112e590:	1004917a 	slli	r2,r2,5
8112e594:	e13fe717 	ldw	r4,-100(fp)
8112e598:	e17feb17 	ldw	r5,-84(fp)
8112e59c:	e0ffef04 	addi	r3,fp,-68
8112e5a0:	280f883a 	mov	r7,r5
8112e5a4:	200d883a 	mov	r6,r4
8112e5a8:	180b883a 	mov	r5,r3
8112e5ac:	1009883a 	mov	r4,r2
8112e5b0:	112b9340 	call	8112b934 <Read_File_Record_At_Offset>
8112e5b4:	10001a26 	beq	r2,zero,8112e620 <alt_up_sd_card_find_next+0x2cc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
8112e5b8:	e0bfef03 	ldbu	r2,-68(fp)
8112e5bc:	10803fcc 	andi	r2,r2,255
8112e5c0:	10001726 	beq	r2,zero,8112e620 <alt_up_sd_card_find_next+0x2cc>
8112e5c4:	e0bfef03 	ldbu	r2,-68(fp)
8112e5c8:	10803fcc 	andi	r2,r2,255
8112e5cc:	10803960 	cmpeqi	r2,r2,229
8112e5d0:	1000131e 	bne	r2,zero,8112e620 <alt_up_sd_card_find_next+0x2cc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
8112e5d4:	e0ffe717 	ldw	r3,-100(fp)
8112e5d8:	00a045b4 	movhi	r2,33046
8112e5dc:	10b77604 	addi	r2,r2,-8744
8112e5e0:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
8112e5e4:	e0bfea17 	ldw	r2,-88(fp)
8112e5e8:	1007883a 	mov	r3,r2
8112e5ec:	00a045b4 	movhi	r2,33046
8112e5f0:	10b77604 	addi	r2,r2,-8744
8112e5f4:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
8112e5f8:	e0ffeb17 	ldw	r3,-84(fp)
8112e5fc:	00a045b4 	movhi	r2,33046
8112e600:	10b77604 	addi	r2,r2,-8744
8112e604:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
8112e608:	e0bfef04 	addi	r2,fp,-68
8112e60c:	e17fff17 	ldw	r5,-4(fp)
8112e610:	1009883a 	mov	r4,r2
8112e614:	112df500 	call	8112df50 <copy_file_record_name_to_string>
										return 0;
8112e618:	0005883a 	mov	r2,zero
8112e61c:	00003606 	br	8112e6f8 <alt_up_sd_card_find_next+0x3a4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
8112e620:	e0bfea17 	ldw	r2,-88(fp)
8112e624:	10800044 	addi	r2,r2,1
8112e628:	e0bfea15 	stw	r2,-88(fp)
8112e62c:	e0bfea17 	ldw	r2,-88(fp)
8112e630:	10800410 	cmplti	r2,r2,16
8112e634:	103fd51e 	bne	r2,zero,8112e58c <__reset+0xfb10e58c>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
8112e638:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8112e63c:	e0bfeb17 	ldw	r2,-84(fp)
8112e640:	10800044 	addi	r2,r2,1
8112e644:	e0bfeb15 	stw	r2,-84(fp)
8112e648:	00a045b4 	movhi	r2,33046
8112e64c:	10b77b04 	addi	r2,r2,-8724
8112e650:	10800383 	ldbu	r2,14(r2)
8112e654:	10803fcc 	andi	r2,r2,255
8112e658:	e0ffeb17 	ldw	r3,-84(fp)
8112e65c:	18bfc216 	blt	r3,r2,8112e568 <__reset+0xfb10e568>
8112e660:	00000106 	br	8112e668 <alt_up_sd_card_find_next+0x314>
							}
							file_counter = 0;
						}
						else
						{
							break;
8112e664:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
8112e668:	00a045b4 	movhi	r2,33046
8112e66c:	10b77b04 	addi	r2,r2,-8724
8112e670:	10800383 	ldbu	r2,14(r2)
8112e674:	10803fcc 	andi	r2,r2,255
8112e678:	e0ffeb17 	ldw	r3,-84(fp)
8112e67c:	18801716 	blt	r3,r2,8112e6dc <alt_up_sd_card_find_next+0x388>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
8112e680:	e0bfe717 	ldw	r2,-100(fp)
8112e684:	e0ffee04 	addi	r3,fp,-72
8112e688:	180b883a 	mov	r5,r3
8112e68c:	1009883a 	mov	r4,r2
8112e690:	112b5fc0 	call	8112b5fc <get_cluster_flag>
8112e694:	10000f26 	beq	r2,zero,8112e6d4 <alt_up_sd_card_find_next+0x380>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
8112e698:	e0bfee0b 	ldhu	r2,-72(fp)
8112e69c:	10bfffcc 	andi	r2,r2,65535
8112e6a0:	10fffe0c 	andi	r3,r2,65528
8112e6a4:	00bffe14 	movui	r2,65528
8112e6a8:	1880051e 	bne	r3,r2,8112e6c0 <alt_up_sd_card_find_next+0x36c>
							{
								result = -1;
8112e6ac:	00bfffc4 	movi	r2,-1
8112e6b0:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
8112e6b4:	00a045b4 	movhi	r2,33046
8112e6b8:	10b77604 	addi	r2,r2,-8744
8112e6bc:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
8112e6c0:	e0bfee0b 	ldhu	r2,-72(fp)
8112e6c4:	10bfffcc 	andi	r2,r2,65535
8112e6c8:	10bffe0c 	andi	r2,r2,65528
8112e6cc:	e0bfe715 	stw	r2,-100(fp)
8112e6d0:	00000206 	br	8112e6dc <alt_up_sd_card_find_next+0x388>
						}
						else
						{
							// Error encountered.                 
							result = -1;
8112e6d4:	00bfffc4 	movi	r2,-1
8112e6d8:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
8112e6dc:	e0bfe717 	ldw	r2,-100(fp)
8112e6e0:	00fffdd4 	movui	r3,65527
8112e6e4:	18bf8e0e 	bge	r3,r2,8112e520 <__reset+0xfb10e520>
8112e6e8:	00000206 	br	8112e6f4 <alt_up_sd_card_find_next+0x3a0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
8112e6ec:	008000c4 	movi	r2,3
8112e6f0:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
8112e6f4:	e0bfe60b 	ldhu	r2,-104(fp)
}
8112e6f8:	e037883a 	mov	sp,fp
8112e6fc:	dfc00117 	ldw	ra,4(sp)
8112e700:	df000017 	ldw	fp,0(sp)
8112e704:	dec00204 	addi	sp,sp,8
8112e708:	f800283a 	ret

8112e70c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
8112e70c:	deffe904 	addi	sp,sp,-92
8112e710:	dfc01615 	stw	ra,88(sp)
8112e714:	df001515 	stw	fp,84(sp)
8112e718:	df001504 	addi	fp,sp,84
8112e71c:	e13ffe15 	stw	r4,-8(fp)
8112e720:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
8112e724:	00bfffc4 	movi	r2,-1
8112e728:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112e72c:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112e730:	1000cf26 	beq	r2,zero,8112ea70 <alt_up_sd_card_fopen+0x364>
8112e734:	d0a08f17 	ldw	r2,-32196(gp)
8112e738:	1000cd26 	beq	r2,zero,8112ea70 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
8112e73c:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
8112e740:	e13ffe17 	ldw	r4,-8(fp)
8112e744:	112c5a80 	call	8112c5a8 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
8112e748:	e13ffe17 	ldw	r4,-8(fp)
8112e74c:	112c66c0 	call	8112c66c <check_file_name_for_FAT16_compliance>
8112e750:	1000c726 	beq	r2,zero,8112ea70 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
8112e754:	e0ffee04 	addi	r3,fp,-72
8112e758:	e0bfed04 	addi	r2,fp,-76
8112e75c:	180d883a 	mov	r6,r3
8112e760:	100b883a 	mov	r5,r2
8112e764:	e13ffe17 	ldw	r4,-8(fp)
8112e768:	112cc2c0 	call	8112cc2c <get_home_directory_cluster_for_file>
8112e76c:	1000021e 	bne	r2,zero,8112e778 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
8112e770:	e0bfeb0b 	ldhu	r2,-84(fp)
8112e774:	0000bf06 	br	8112ea74 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
8112e778:	e03fec15 	stw	zero,-80(fp)
8112e77c:	00000e06 	br	8112e7b8 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
8112e780:	00a045b4 	movhi	r2,33046
8112e784:	10b79004 	addi	r2,r2,-8640
8112e788:	e0ffec17 	ldw	r3,-80(fp)
8112e78c:	180691ba 	slli	r3,r3,6
8112e790:	10c5883a 	add	r2,r2,r3
8112e794:	10800f04 	addi	r2,r2,60
8112e798:	10800017 	ldw	r2,0(r2)
8112e79c:	1000031e 	bne	r2,zero,8112e7ac <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
8112e7a0:	e0bfec17 	ldw	r2,-80(fp)
8112e7a4:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
8112e7a8:	00000606 	br	8112e7c4 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
8112e7ac:	e0bfec17 	ldw	r2,-80(fp)
8112e7b0:	10800044 	addi	r2,r2,1
8112e7b4:	e0bfec15 	stw	r2,-80(fp)
8112e7b8:	e0bfec17 	ldw	r2,-80(fp)
8112e7bc:	10800510 	cmplti	r2,r2,20
8112e7c0:	103fef1e 	bne	r2,zero,8112e780 <__reset+0xfb10e780>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
8112e7c4:	e0bfeb0f 	ldh	r2,-84(fp)
8112e7c8:	1000a916 	blt	r2,zero,8112ea70 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
8112e7cc:	e0bfed17 	ldw	r2,-76(fp)
8112e7d0:	1009883a 	mov	r4,r2
8112e7d4:	e0bfeb0f 	ldh	r2,-84(fp)
8112e7d8:	100691ba 	slli	r3,r2,6
8112e7dc:	00a045b4 	movhi	r2,33046
8112e7e0:	10b79004 	addi	r2,r2,-8640
8112e7e4:	1885883a 	add	r2,r3,r2
8112e7e8:	100d883a 	mov	r6,r2
8112e7ec:	e17ffe17 	ldw	r5,-8(fp)
8112e7f0:	112d1640 	call	8112d164 <find_file_in_directory>
8112e7f4:	10007b26 	beq	r2,zero,8112e9e4 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
8112e7f8:	e0bfff17 	ldw	r2,-4(fp)
8112e7fc:	10000226 	beq	r2,zero,8112e808 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
8112e800:	00bfffc4 	movi	r2,-1
8112e804:	00009b06 	br	8112ea74 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
8112e808:	e13feb0f 	ldh	r4,-84(fp)
8112e80c:	e0ffeb0f 	ldh	r3,-84(fp)
8112e810:	00a045b4 	movhi	r2,33046
8112e814:	10b79004 	addi	r2,r2,-8640
8112e818:	180691ba 	slli	r3,r3,6
8112e81c:	10c5883a 	add	r2,r2,r3
8112e820:	10800584 	addi	r2,r2,22
8112e824:	1080000b 	ldhu	r2,0(r2)
8112e828:	10ffffcc 	andi	r3,r2,65535
8112e82c:	00a045b4 	movhi	r2,33046
8112e830:	10b79004 	addi	r2,r2,-8640
8112e834:	200891ba 	slli	r4,r4,6
8112e838:	1105883a 	add	r2,r2,r4
8112e83c:	10800704 	addi	r2,r2,28
8112e840:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
8112e844:	e0ffeb0f 	ldh	r3,-84(fp)
8112e848:	00a045b4 	movhi	r2,33046
8112e84c:	10b79004 	addi	r2,r2,-8640
8112e850:	180691ba 	slli	r3,r3,6
8112e854:	10c5883a 	add	r2,r2,r3
8112e858:	10800804 	addi	r2,r2,32
8112e85c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
8112e860:	e0ffeb0f 	ldh	r3,-84(fp)
8112e864:	00a045b4 	movhi	r2,33046
8112e868:	10b79004 	addi	r2,r2,-8640
8112e86c:	180691ba 	slli	r3,r3,6
8112e870:	10c5883a 	add	r2,r2,r3
8112e874:	10800904 	addi	r2,r2,36
8112e878:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
8112e87c:	e0ffeb0f 	ldh	r3,-84(fp)
8112e880:	00a045b4 	movhi	r2,33046
8112e884:	10b79004 	addi	r2,r2,-8640
8112e888:	180691ba 	slli	r3,r3,6
8112e88c:	10c5883a 	add	r2,r2,r3
8112e890:	10800f04 	addi	r2,r2,60
8112e894:	00c00044 	movi	r3,1
8112e898:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
8112e89c:	e0ffeb0f 	ldh	r3,-84(fp)
8112e8a0:	00a045b4 	movhi	r2,33046
8112e8a4:	10b79004 	addi	r2,r2,-8640
8112e8a8:	180691ba 	slli	r3,r3,6
8112e8ac:	10c5883a 	add	r2,r2,r3
8112e8b0:	10800e04 	addi	r2,r2,56
8112e8b4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8112e8b8:	e03fec15 	stw	zero,-80(fp)
8112e8bc:	00004506 	br	8112e9d4 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
8112e8c0:	e0ffeb0f 	ldh	r3,-84(fp)
8112e8c4:	e0bfec17 	ldw	r2,-80(fp)
8112e8c8:	18803f26 	beq	r3,r2,8112e9c8 <alt_up_sd_card_fopen+0x2bc>
8112e8cc:	00a045b4 	movhi	r2,33046
8112e8d0:	10b79004 	addi	r2,r2,-8640
8112e8d4:	e0ffec17 	ldw	r3,-80(fp)
8112e8d8:	180691ba 	slli	r3,r3,6
8112e8dc:	10c5883a 	add	r2,r2,r3
8112e8e0:	10800f04 	addi	r2,r2,60
8112e8e4:	10800017 	ldw	r2,0(r2)
8112e8e8:	10800058 	cmpnei	r2,r2,1
8112e8ec:	1000361e 	bne	r2,zero,8112e9c8 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
8112e8f0:	e0ffeb0f 	ldh	r3,-84(fp)
8112e8f4:	00a045b4 	movhi	r2,33046
8112e8f8:	10b79004 	addi	r2,r2,-8640
8112e8fc:	180691ba 	slli	r3,r3,6
8112e900:	10c5883a 	add	r2,r2,r3
8112e904:	10800a04 	addi	r2,r2,40
8112e908:	10c00017 	ldw	r3,0(r2)
8112e90c:	00a045b4 	movhi	r2,33046
8112e910:	10b79004 	addi	r2,r2,-8640
8112e914:	e13fec17 	ldw	r4,-80(fp)
8112e918:	200891ba 	slli	r4,r4,6
8112e91c:	1105883a 	add	r2,r2,r4
8112e920:	10800a04 	addi	r2,r2,40
8112e924:	10800017 	ldw	r2,0(r2)
8112e928:	1880271e 	bne	r3,r2,8112e9c8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
8112e92c:	e0ffeb0f 	ldh	r3,-84(fp)
8112e930:	00a045b4 	movhi	r2,33046
8112e934:	10b79004 	addi	r2,r2,-8640
8112e938:	180691ba 	slli	r3,r3,6
8112e93c:	10c5883a 	add	r2,r2,r3
8112e940:	10800b04 	addi	r2,r2,44
8112e944:	10c00017 	ldw	r3,0(r2)
8112e948:	00a045b4 	movhi	r2,33046
8112e94c:	10b79004 	addi	r2,r2,-8640
8112e950:	e13fec17 	ldw	r4,-80(fp)
8112e954:	200891ba 	slli	r4,r4,6
8112e958:	1105883a 	add	r2,r2,r4
8112e95c:	10800b04 	addi	r2,r2,44
8112e960:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
8112e964:	1880181e 	bne	r3,r2,8112e9c8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
8112e968:	e0ffeb0f 	ldh	r3,-84(fp)
8112e96c:	00a045b4 	movhi	r2,33046
8112e970:	10b79004 	addi	r2,r2,-8640
8112e974:	180691ba 	slli	r3,r3,6
8112e978:	10c5883a 	add	r2,r2,r3
8112e97c:	10800c04 	addi	r2,r2,48
8112e980:	1100000b 	ldhu	r4,0(r2)
8112e984:	00a045b4 	movhi	r2,33046
8112e988:	10b79004 	addi	r2,r2,-8640
8112e98c:	e0ffec17 	ldw	r3,-80(fp)
8112e990:	180691ba 	slli	r3,r3,6
8112e994:	10c5883a 	add	r2,r2,r3
8112e998:	10800c04 	addi	r2,r2,48
8112e99c:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
8112e9a0:	20ffffcc 	andi	r3,r4,65535
8112e9a4:	18e0001c 	xori	r3,r3,32768
8112e9a8:	18e00004 	addi	r3,r3,-32768
8112e9ac:	10bfffcc 	andi	r2,r2,65535
8112e9b0:	10a0001c 	xori	r2,r2,32768
8112e9b4:	10a00004 	addi	r2,r2,-32768
8112e9b8:	1880031e 	bne	r3,r2,8112e9c8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
8112e9bc:	00bfff84 	movi	r2,-2
8112e9c0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
8112e9c4:	00002a06 	br	8112ea70 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
8112e9c8:	e0bfec17 	ldw	r2,-80(fp)
8112e9cc:	10800044 	addi	r2,r2,1
8112e9d0:	e0bfec15 	stw	r2,-80(fp)
8112e9d4:	e0bfec17 	ldw	r2,-80(fp)
8112e9d8:	10800510 	cmplti	r2,r2,20
8112e9dc:	103fb81e 	bne	r2,zero,8112e8c0 <__reset+0xfb10e8c0>
8112e9e0:	00002306 	br	8112ea70 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
8112e9e4:	e0bfff17 	ldw	r2,-4(fp)
8112e9e8:	10001f26 	beq	r2,zero,8112ea68 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
8112e9ec:	e0bfeb0f 	ldh	r2,-84(fp)
8112e9f0:	100691ba 	slli	r3,r2,6
8112e9f4:	00a045b4 	movhi	r2,33046
8112e9f8:	10b79004 	addi	r2,r2,-8640
8112e9fc:	1885883a 	add	r2,r3,r2
8112ea00:	e0ffee04 	addi	r3,fp,-72
8112ea04:	180d883a 	mov	r6,r3
8112ea08:	100b883a 	mov	r5,r2
8112ea0c:	e13ffe17 	ldw	r4,-8(fp)
8112ea10:	112dc880 	call	8112dc88 <create_file>
8112ea14:	10001126 	beq	r2,zero,8112ea5c <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
8112ea18:	e0ffeb0f 	ldh	r3,-84(fp)
8112ea1c:	00a045b4 	movhi	r2,33046
8112ea20:	10b79004 	addi	r2,r2,-8640
8112ea24:	180691ba 	slli	r3,r3,6
8112ea28:	10c5883a 	add	r2,r2,r3
8112ea2c:	10800f04 	addi	r2,r2,60
8112ea30:	00c00044 	movi	r3,1
8112ea34:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
8112ea38:	e0ffeb0f 	ldh	r3,-84(fp)
8112ea3c:	00a045b4 	movhi	r2,33046
8112ea40:	10b79004 	addi	r2,r2,-8640
8112ea44:	180691ba 	slli	r3,r3,6
8112ea48:	10c5883a 	add	r2,r2,r3
8112ea4c:	10800e04 	addi	r2,r2,56
8112ea50:	00c00044 	movi	r3,1
8112ea54:	10c00015 	stw	r3,0(r2)
8112ea58:	00000506 	br	8112ea70 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
8112ea5c:	00bfffc4 	movi	r2,-1
8112ea60:	e0bfeb0d 	sth	r2,-84(fp)
8112ea64:	00000206 	br	8112ea70 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
8112ea68:	00bfffc4 	movi	r2,-1
8112ea6c:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
8112ea70:	e0bfeb0b 	ldhu	r2,-84(fp)
}
8112ea74:	e037883a 	mov	sp,fp
8112ea78:	dfc00117 	ldw	ra,4(sp)
8112ea7c:	df000017 	ldw	fp,0(sp)
8112ea80:	dec00204 	addi	sp,sp,8
8112ea84:	f800283a 	ret

8112ea88 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
8112ea88:	defffd04 	addi	sp,sp,-12
8112ea8c:	df000215 	stw	fp,8(sp)
8112ea90:	df000204 	addi	fp,sp,8
8112ea94:	2007883a 	mov	r3,r4
8112ea98:	2805883a 	mov	r2,r5
8112ea9c:	e0fffe0d 	sth	r3,-8(fp)
8112eaa0:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112eaa4:	e0bffe0f 	ldh	r2,-8(fp)
8112eaa8:	10001416 	blt	r2,zero,8112eafc <alt_up_sd_card_set_attributes+0x74>
8112eaac:	e0bffe0f 	ldh	r2,-8(fp)
8112eab0:	10800508 	cmpgei	r2,r2,20
8112eab4:	1000111e 	bne	r2,zero,8112eafc <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
8112eab8:	e0fffe0f 	ldh	r3,-8(fp)
8112eabc:	00a045b4 	movhi	r2,33046
8112eac0:	10b79004 	addi	r2,r2,-8640
8112eac4:	180691ba 	slli	r3,r3,6
8112eac8:	10c5883a 	add	r2,r2,r3
8112eacc:	10800f04 	addi	r2,r2,60
8112ead0:	10800017 	ldw	r2,0(r2)
8112ead4:	10000926 	beq	r2,zero,8112eafc <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
8112ead8:	e0fffe0f 	ldh	r3,-8(fp)
8112eadc:	e0bfff0b 	ldhu	r2,-4(fp)
8112eae0:	1009883a 	mov	r4,r2
8112eae4:	00a045b4 	movhi	r2,33046
8112eae8:	10b79004 	addi	r2,r2,-8640
8112eaec:	180691ba 	slli	r3,r3,6
8112eaf0:	10c5883a 	add	r2,r2,r3
8112eaf4:	108002c4 	addi	r2,r2,11
8112eaf8:	11000005 	stb	r4,0(r2)
        }
    }
}
8112eafc:	0001883a 	nop
8112eb00:	e037883a 	mov	sp,fp
8112eb04:	df000017 	ldw	fp,0(sp)
8112eb08:	dec00104 	addi	sp,sp,4
8112eb0c:	f800283a 	ret

8112eb10 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
8112eb10:	defffd04 	addi	sp,sp,-12
8112eb14:	df000215 	stw	fp,8(sp)
8112eb18:	df000204 	addi	fp,sp,8
8112eb1c:	2005883a 	mov	r2,r4
8112eb20:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
8112eb24:	00bfffc4 	movi	r2,-1
8112eb28:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112eb2c:	e0bfff0f 	ldh	r2,-4(fp)
8112eb30:	10001416 	blt	r2,zero,8112eb84 <alt_up_sd_card_get_attributes+0x74>
8112eb34:	e0bfff0f 	ldh	r2,-4(fp)
8112eb38:	10800508 	cmpgei	r2,r2,20
8112eb3c:	1000111e 	bne	r2,zero,8112eb84 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
8112eb40:	e0ffff0f 	ldh	r3,-4(fp)
8112eb44:	00a045b4 	movhi	r2,33046
8112eb48:	10b79004 	addi	r2,r2,-8640
8112eb4c:	180691ba 	slli	r3,r3,6
8112eb50:	10c5883a 	add	r2,r2,r3
8112eb54:	10800f04 	addi	r2,r2,60
8112eb58:	10800017 	ldw	r2,0(r2)
8112eb5c:	10000926 	beq	r2,zero,8112eb84 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
8112eb60:	e0ffff0f 	ldh	r3,-4(fp)
8112eb64:	00a045b4 	movhi	r2,33046
8112eb68:	10b79004 	addi	r2,r2,-8640
8112eb6c:	180691ba 	slli	r3,r3,6
8112eb70:	10c5883a 	add	r2,r2,r3
8112eb74:	108002c4 	addi	r2,r2,11
8112eb78:	10800003 	ldbu	r2,0(r2)
8112eb7c:	10803fcc 	andi	r2,r2,255
8112eb80:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
8112eb84:	e0bffe0b 	ldhu	r2,-8(fp)
}
8112eb88:	e037883a 	mov	sp,fp
8112eb8c:	df000017 	ldw	fp,0(sp)
8112eb90:	dec00104 	addi	sp,sp,4
8112eb94:	f800283a 	ret

8112eb98 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
8112eb98:	defffa04 	addi	sp,sp,-24
8112eb9c:	dfc00515 	stw	ra,20(sp)
8112eba0:	df000415 	stw	fp,16(sp)
8112eba4:	df000404 	addi	fp,sp,16
8112eba8:	2005883a 	mov	r2,r4
8112ebac:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
8112ebb0:	00bfffc4 	movi	r2,-1
8112ebb4:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112ebb8:	e0bfff0f 	ldh	r2,-4(fp)
8112ebbc:	1000ce16 	blt	r2,zero,8112eef8 <alt_up_sd_card_read+0x360>
8112ebc0:	e0bfff0f 	ldh	r2,-4(fp)
8112ebc4:	10800508 	cmpgei	r2,r2,20
8112ebc8:	1000cb1e 	bne	r2,zero,8112eef8 <alt_up_sd_card_read+0x360>
    {
        if (active_files[file_handle].in_use)
8112ebcc:	e0ffff0f 	ldh	r3,-4(fp)
8112ebd0:	00a045b4 	movhi	r2,33046
8112ebd4:	10b79004 	addi	r2,r2,-8640
8112ebd8:	180691ba 	slli	r3,r3,6
8112ebdc:	10c5883a 	add	r2,r2,r3
8112ebe0:	10800f04 	addi	r2,r2,60
8112ebe4:	10800017 	ldw	r2,0(r2)
8112ebe8:	1000c326 	beq	r2,zero,8112eef8 <alt_up_sd_card_read+0x360>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
8112ebec:	e0ffff0f 	ldh	r3,-4(fp)
8112ebf0:	00a045b4 	movhi	r2,33046
8112ebf4:	10b79004 	addi	r2,r2,-8640
8112ebf8:	180691ba 	slli	r3,r3,6
8112ebfc:	10c5883a 	add	r2,r2,r3
8112ec00:	10800904 	addi	r2,r2,36
8112ec04:	10c00017 	ldw	r3,0(r2)
8112ec08:	e13fff0f 	ldh	r4,-4(fp)
8112ec0c:	00a045b4 	movhi	r2,33046
8112ec10:	10b79004 	addi	r2,r2,-8640
8112ec14:	200891ba 	slli	r4,r4,6
8112ec18:	1105883a 	add	r2,r2,r4
8112ec1c:	10800604 	addi	r2,r2,24
8112ec20:	10800017 	ldw	r2,0(r2)
8112ec24:	1880b42e 	bgeu	r3,r2,8112eef8 <alt_up_sd_card_read+0x360>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112ec28:	00a045b4 	movhi	r2,33046
8112ec2c:	10b77b04 	addi	r2,r2,-8724
8112ec30:	10c01417 	ldw	r3,80(r2)
8112ec34:	e13fff0f 	ldh	r4,-4(fp)
8112ec38:	00a045b4 	movhi	r2,33046
8112ec3c:	10b79004 	addi	r2,r2,-8640
8112ec40:	200891ba 	slli	r4,r4,6
8112ec44:	1105883a 	add	r2,r2,r4
8112ec48:	10800704 	addi	r2,r2,28
8112ec4c:	10800017 	ldw	r2,0(r2)
8112ec50:	113fff84 	addi	r4,r2,-2
8112ec54:	00a045b4 	movhi	r2,33046
8112ec58:	10b77b04 	addi	r2,r2,-8724
8112ec5c:	10800383 	ldbu	r2,14(r2)
8112ec60:	10803fcc 	andi	r2,r2,255
8112ec64:	2085383a 	mul	r2,r4,r2
8112ec68:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
8112ec6c:	e13fff0f 	ldh	r4,-4(fp)
8112ec70:	00a045b4 	movhi	r2,33046
8112ec74:	10b79004 	addi	r2,r2,-8640
8112ec78:	200891ba 	slli	r4,r4,6
8112ec7c:	1105883a 	add	r2,r2,r4
8112ec80:	10800804 	addi	r2,r2,32
8112ec84:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112ec88:	1885883a 	add	r2,r3,r2
8112ec8c:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
8112ec90:	e0ffff0f 	ldh	r3,-4(fp)
8112ec94:	00a045b4 	movhi	r2,33046
8112ec98:	10b79004 	addi	r2,r2,-8640
8112ec9c:	180691ba 	slli	r3,r3,6
8112eca0:	10c5883a 	add	r2,r2,r3
8112eca4:	10800904 	addi	r2,r2,36
8112eca8:	10800017 	ldw	r2,0(r2)
8112ecac:	10006826 	beq	r2,zero,8112ee50 <alt_up_sd_card_read+0x2b8>
8112ecb0:	e0ffff0f 	ldh	r3,-4(fp)
8112ecb4:	00a045b4 	movhi	r2,33046
8112ecb8:	10b79004 	addi	r2,r2,-8640
8112ecbc:	180691ba 	slli	r3,r3,6
8112ecc0:	10c5883a 	add	r2,r2,r3
8112ecc4:	10800904 	addi	r2,r2,36
8112ecc8:	10800017 	ldw	r2,0(r2)
8112eccc:	10807fcc 	andi	r2,r2,511
8112ecd0:	10005f1e 	bne	r2,zero,8112ee50 <alt_up_sd_card_read+0x2b8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
8112ecd4:	e0ffff0f 	ldh	r3,-4(fp)
8112ecd8:	00a045b4 	movhi	r2,33046
8112ecdc:	10b79004 	addi	r2,r2,-8640
8112ece0:	180691ba 	slli	r3,r3,6
8112ece4:	10c5883a 	add	r2,r2,r3
8112ece8:	10800804 	addi	r2,r2,32
8112ecec:	10c00017 	ldw	r3,0(r2)
8112ecf0:	00a045b4 	movhi	r2,33046
8112ecf4:	10b77b04 	addi	r2,r2,-8724
8112ecf8:	10800383 	ldbu	r2,14(r2)
8112ecfc:	10803fcc 	andi	r2,r2,255
8112ed00:	10bfffc4 	addi	r2,r2,-1
8112ed04:	1880401e 	bne	r3,r2,8112ee08 <alt_up_sd_card_read+0x270>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
8112ed08:	e0ffff0f 	ldh	r3,-4(fp)
8112ed0c:	00a045b4 	movhi	r2,33046
8112ed10:	10b79004 	addi	r2,r2,-8640
8112ed14:	180691ba 	slli	r3,r3,6
8112ed18:	10c5883a 	add	r2,r2,r3
8112ed1c:	10800704 	addi	r2,r2,28
8112ed20:	10800017 	ldw	r2,0(r2)
8112ed24:	e0fffe04 	addi	r3,fp,-8
8112ed28:	180b883a 	mov	r5,r3
8112ed2c:	1009883a 	mov	r4,r2
8112ed30:	112b5fc0 	call	8112b5fc <get_cluster_flag>
8112ed34:	10003226 	beq	r2,zero,8112ee00 <alt_up_sd_card_read+0x268>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
8112ed38:	e0bffe0b 	ldhu	r2,-8(fp)
8112ed3c:	10bfffcc 	andi	r2,r2,65535
8112ed40:	10fffe0c 	andi	r3,r2,65528
8112ed44:	00bffe14 	movui	r2,65528
8112ed48:	1880021e 	bne	r3,r2,8112ed54 <alt_up_sd_card_read+0x1bc>
                            {
                                /* End of file */
                                return -1;
8112ed4c:	00bfffc4 	movi	r2,-1
8112ed50:	00006a06 	br	8112eefc <alt_up_sd_card_read+0x364>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
8112ed54:	e13fff0f 	ldh	r4,-4(fp)
8112ed58:	e0bffe0b 	ldhu	r2,-8(fp)
8112ed5c:	10ffffcc 	andi	r3,r2,65535
8112ed60:	00a045b4 	movhi	r2,33046
8112ed64:	10b79004 	addi	r2,r2,-8640
8112ed68:	200891ba 	slli	r4,r4,6
8112ed6c:	1105883a 	add	r2,r2,r4
8112ed70:	10800704 	addi	r2,r2,28
8112ed74:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
8112ed78:	e0ffff0f 	ldh	r3,-4(fp)
8112ed7c:	00a045b4 	movhi	r2,33046
8112ed80:	10b79004 	addi	r2,r2,-8640
8112ed84:	180691ba 	slli	r3,r3,6
8112ed88:	10c5883a 	add	r2,r2,r3
8112ed8c:	10800804 	addi	r2,r2,32
8112ed90:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112ed94:	00a045b4 	movhi	r2,33046
8112ed98:	10b77b04 	addi	r2,r2,-8724
8112ed9c:	10c01417 	ldw	r3,80(r2)
8112eda0:	e13fff0f 	ldh	r4,-4(fp)
8112eda4:	00a045b4 	movhi	r2,33046
8112eda8:	10b79004 	addi	r2,r2,-8640
8112edac:	200891ba 	slli	r4,r4,6
8112edb0:	1105883a 	add	r2,r2,r4
8112edb4:	10800704 	addi	r2,r2,28
8112edb8:	10800017 	ldw	r2,0(r2)
8112edbc:	113fff84 	addi	r4,r2,-2
8112edc0:	00a045b4 	movhi	r2,33046
8112edc4:	10b77b04 	addi	r2,r2,-8724
8112edc8:	10800383 	ldbu	r2,14(r2)
8112edcc:	10803fcc 	andi	r2,r2,255
8112edd0:	2085383a 	mul	r2,r4,r2
8112edd4:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8112edd8:	e13fff0f 	ldh	r4,-4(fp)
8112eddc:	00a045b4 	movhi	r2,33046
8112ede0:	10b79004 	addi	r2,r2,-8640
8112ede4:	200891ba 	slli	r4,r4,6
8112ede8:	1105883a 	add	r2,r2,r4
8112edec:	10800804 	addi	r2,r2,32
8112edf0:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112edf4:	1885883a 	add	r2,r3,r2
8112edf8:	e0bffd15 	stw	r2,-12(fp)
8112edfc:	00001406 	br	8112ee50 <alt_up_sd_card_read+0x2b8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
8112ee00:	00bfff84 	movi	r2,-2
8112ee04:	00003d06 	br	8112eefc <alt_up_sd_card_read+0x364>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8112ee08:	e13fff0f 	ldh	r4,-4(fp)
8112ee0c:	e0ffff0f 	ldh	r3,-4(fp)
8112ee10:	00a045b4 	movhi	r2,33046
8112ee14:	10b79004 	addi	r2,r2,-8640
8112ee18:	180691ba 	slli	r3,r3,6
8112ee1c:	10c5883a 	add	r2,r2,r3
8112ee20:	10800804 	addi	r2,r2,32
8112ee24:	10800017 	ldw	r2,0(r2)
8112ee28:	10c00044 	addi	r3,r2,1
8112ee2c:	00a045b4 	movhi	r2,33046
8112ee30:	10b79004 	addi	r2,r2,-8640
8112ee34:	200891ba 	slli	r4,r4,6
8112ee38:	1105883a 	add	r2,r2,r4
8112ee3c:	10800804 	addi	r2,r2,32
8112ee40:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
8112ee44:	e0bffd17 	ldw	r2,-12(fp)
8112ee48:	10800044 	addi	r2,r2,1
8112ee4c:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
8112ee50:	d0e09617 	ldw	r3,-32168(gp)
8112ee54:	e0bffd17 	ldw	r2,-12(fp)
8112ee58:	1885883a 	add	r2,r3,r2
8112ee5c:	1007883a 	mov	r3,r2
8112ee60:	d0a09a17 	ldw	r2,-32152(gp)
8112ee64:	18800726 	beq	r3,r2,8112ee84 <alt_up_sd_card_read+0x2ec>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
8112ee68:	d0a09617 	ldw	r2,-32168(gp)
8112ee6c:	100b883a 	mov	r5,r2
8112ee70:	e13ffd17 	ldw	r4,-12(fp)
8112ee74:	112b5240 	call	8112b524 <Read_Sector_Data>
8112ee78:	1000021e 	bne	r2,zero,8112ee84 <alt_up_sd_card_read+0x2ec>
                    {
						return -2;
8112ee7c:	00bfff84 	movi	r2,-2
8112ee80:	00001e06 	br	8112eefc <alt_up_sd_card_read+0x364>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
8112ee84:	d0e09517 	ldw	r3,-32172(gp)
8112ee88:	e13fff0f 	ldh	r4,-4(fp)
8112ee8c:	00a045b4 	movhi	r2,33046
8112ee90:	10b79004 	addi	r2,r2,-8640
8112ee94:	200891ba 	slli	r4,r4,6
8112ee98:	1105883a 	add	r2,r2,r4
8112ee9c:	10800904 	addi	r2,r2,36
8112eea0:	10800017 	ldw	r2,0(r2)
8112eea4:	10807fcc 	andi	r2,r2,511
8112eea8:	1885883a 	add	r2,r3,r2
8112eeac:	10800023 	ldbuio	r2,0(r2)
8112eeb0:	10803fcc 	andi	r2,r2,255
8112eeb4:	10803fcc 	andi	r2,r2,255
8112eeb8:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8112eebc:	e13fff0f 	ldh	r4,-4(fp)
8112eec0:	e0ffff0f 	ldh	r3,-4(fp)
8112eec4:	00a045b4 	movhi	r2,33046
8112eec8:	10b79004 	addi	r2,r2,-8640
8112eecc:	180691ba 	slli	r3,r3,6
8112eed0:	10c5883a 	add	r2,r2,r3
8112eed4:	10800904 	addi	r2,r2,36
8112eed8:	10800017 	ldw	r2,0(r2)
8112eedc:	10c00044 	addi	r3,r2,1
8112eee0:	00a045b4 	movhi	r2,33046
8112eee4:	10b79004 	addi	r2,r2,-8640
8112eee8:	200891ba 	slli	r4,r4,6
8112eeec:	1105883a 	add	r2,r2,r4
8112eef0:	10800904 	addi	r2,r2,36
8112eef4:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
8112eef8:	e0bffc0b 	ldhu	r2,-16(fp)
}
8112eefc:	e037883a 	mov	sp,fp
8112ef00:	dfc00117 	ldw	ra,4(sp)
8112ef04:	df000017 	ldw	fp,0(sp)
8112ef08:	dec00204 	addi	sp,sp,8
8112ef0c:	f800283a 	ret

8112ef10 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
8112ef10:	defff804 	addi	sp,sp,-32
8112ef14:	dfc00715 	stw	ra,28(sp)
8112ef18:	df000615 	stw	fp,24(sp)
8112ef1c:	df000604 	addi	fp,sp,24
8112ef20:	2007883a 	mov	r3,r4
8112ef24:	2805883a 	mov	r2,r5
8112ef28:	e0fffe0d 	sth	r3,-8(fp)
8112ef2c:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
8112ef30:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
8112ef34:	e0bffe0f 	ldh	r2,-8(fp)
8112ef38:	10017716 	blt	r2,zero,8112f518 <alt_up_sd_card_write+0x608>
8112ef3c:	e0bffe0f 	ldh	r2,-8(fp)
8112ef40:	10800508 	cmpgei	r2,r2,20
8112ef44:	1001741e 	bne	r2,zero,8112f518 <alt_up_sd_card_write+0x608>
    {
        if (active_files[file_handle].in_use)
8112ef48:	e0fffe0f 	ldh	r3,-8(fp)
8112ef4c:	00a045b4 	movhi	r2,33046
8112ef50:	10b79004 	addi	r2,r2,-8640
8112ef54:	180691ba 	slli	r3,r3,6
8112ef58:	10c5883a 	add	r2,r2,r3
8112ef5c:	10800f04 	addi	r2,r2,60
8112ef60:	10800017 	ldw	r2,0(r2)
8112ef64:	10016c26 	beq	r2,zero,8112f518 <alt_up_sd_card_write+0x608>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112ef68:	00a045b4 	movhi	r2,33046
8112ef6c:	10b77b04 	addi	r2,r2,-8724
8112ef70:	10c01417 	ldw	r3,80(r2)
8112ef74:	e13ffe0f 	ldh	r4,-8(fp)
8112ef78:	00a045b4 	movhi	r2,33046
8112ef7c:	10b79004 	addi	r2,r2,-8640
8112ef80:	200891ba 	slli	r4,r4,6
8112ef84:	1105883a 	add	r2,r2,r4
8112ef88:	10800704 	addi	r2,r2,28
8112ef8c:	10800017 	ldw	r2,0(r2)
8112ef90:	113fff84 	addi	r4,r2,-2
8112ef94:	00a045b4 	movhi	r2,33046
8112ef98:	10b77b04 	addi	r2,r2,-8724
8112ef9c:	10800383 	ldbu	r2,14(r2)
8112efa0:	10803fcc 	andi	r2,r2,255
8112efa4:	2085383a 	mul	r2,r4,r2
8112efa8:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
8112efac:	e13ffe0f 	ldh	r4,-8(fp)
8112efb0:	00a045b4 	movhi	r2,33046
8112efb4:	10b79004 	addi	r2,r2,-8640
8112efb8:	200891ba 	slli	r4,r4,6
8112efbc:	1105883a 	add	r2,r2,r4
8112efc0:	10800804 	addi	r2,r2,32
8112efc4:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112efc8:	1885883a 	add	r2,r3,r2
8112efcc:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
8112efd0:	e0fffe0f 	ldh	r3,-8(fp)
8112efd4:	00a045b4 	movhi	r2,33046
8112efd8:	10b79004 	addi	r2,r2,-8640
8112efdc:	180691ba 	slli	r3,r3,6
8112efe0:	10c5883a 	add	r2,r2,r3
8112efe4:	10800904 	addi	r2,r2,36
8112efe8:	10c00017 	ldw	r3,0(r2)
8112efec:	00a045b4 	movhi	r2,33046
8112eff0:	10b77b04 	addi	r2,r2,-8724
8112eff4:	1080030b 	ldhu	r2,12(r2)
8112eff8:	10bfffcc 	andi	r2,r2,65535
8112effc:	1889203a 	divu	r4,r3,r2
8112f000:	2085383a 	mul	r2,r4,r2
8112f004:	1885c83a 	sub	r2,r3,r2
8112f008:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
8112f00c:	e0fffe0f 	ldh	r3,-8(fp)
8112f010:	00a045b4 	movhi	r2,33046
8112f014:	10b79004 	addi	r2,r2,-8640
8112f018:	180691ba 	slli	r3,r3,6
8112f01c:	10c5883a 	add	r2,r2,r3
8112f020:	10800904 	addi	r2,r2,36
8112f024:	10c00017 	ldw	r3,0(r2)
8112f028:	e13ffe0f 	ldh	r4,-8(fp)
8112f02c:	00a045b4 	movhi	r2,33046
8112f030:	10b79004 	addi	r2,r2,-8640
8112f034:	200891ba 	slli	r4,r4,6
8112f038:	1105883a 	add	r2,r2,r4
8112f03c:	10800604 	addi	r2,r2,24
8112f040:	10800017 	ldw	r2,0(r2)
8112f044:	1880672e 	bgeu	r3,r2,8112f1e4 <alt_up_sd_card_write+0x2d4>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8112f048:	e0fffe0f 	ldh	r3,-8(fp)
8112f04c:	00a045b4 	movhi	r2,33046
8112f050:	10b79004 	addi	r2,r2,-8640
8112f054:	180691ba 	slli	r3,r3,6
8112f058:	10c5883a 	add	r2,r2,r3
8112f05c:	10800904 	addi	r2,r2,36
8112f060:	10800017 	ldw	r2,0(r2)
8112f064:	1000e126 	beq	r2,zero,8112f3ec <alt_up_sd_card_write+0x4dc>
8112f068:	e0bffc0f 	ldh	r2,-16(fp)
8112f06c:	1000df1e 	bne	r2,zero,8112f3ec <alt_up_sd_card_write+0x4dc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
8112f070:	e0fffe0f 	ldh	r3,-8(fp)
8112f074:	00a045b4 	movhi	r2,33046
8112f078:	10b79004 	addi	r2,r2,-8640
8112f07c:	180691ba 	slli	r3,r3,6
8112f080:	10c5883a 	add	r2,r2,r3
8112f084:	10800804 	addi	r2,r2,32
8112f088:	10c00017 	ldw	r3,0(r2)
8112f08c:	00a045b4 	movhi	r2,33046
8112f090:	10b77b04 	addi	r2,r2,-8724
8112f094:	10800383 	ldbu	r2,14(r2)
8112f098:	10803fcc 	andi	r2,r2,255
8112f09c:	10bfffc4 	addi	r2,r2,-1
8112f0a0:	18803d1e 	bne	r3,r2,8112f198 <alt_up_sd_card_write+0x288>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
8112f0a4:	e0fffe0f 	ldh	r3,-8(fp)
8112f0a8:	00a045b4 	movhi	r2,33046
8112f0ac:	10b79004 	addi	r2,r2,-8640
8112f0b0:	180691ba 	slli	r3,r3,6
8112f0b4:	10c5883a 	add	r2,r2,r3
8112f0b8:	10800704 	addi	r2,r2,28
8112f0bc:	10800017 	ldw	r2,0(r2)
8112f0c0:	e0fffc84 	addi	r3,fp,-14
8112f0c4:	180b883a 	mov	r5,r3
8112f0c8:	1009883a 	mov	r4,r2
8112f0cc:	112b5fc0 	call	8112b5fc <get_cluster_flag>
8112f0d0:	10002f26 	beq	r2,zero,8112f190 <alt_up_sd_card_write+0x280>
                        {
                            if (next_cluster < 0x0000fff8)
8112f0d4:	e0bffc8b 	ldhu	r2,-14(fp)
8112f0d8:	10bfffcc 	andi	r2,r2,65535
8112f0dc:	10bffe28 	cmpgeui	r2,r2,65528
8112f0e0:	1000c21e 	bne	r2,zero,8112f3ec <alt_up_sd_card_write+0x4dc>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
8112f0e4:	e13ffe0f 	ldh	r4,-8(fp)
8112f0e8:	e0bffc8b 	ldhu	r2,-14(fp)
8112f0ec:	10ffffcc 	andi	r3,r2,65535
8112f0f0:	00a045b4 	movhi	r2,33046
8112f0f4:	10b79004 	addi	r2,r2,-8640
8112f0f8:	200891ba 	slli	r4,r4,6
8112f0fc:	1105883a 	add	r2,r2,r4
8112f100:	10800704 	addi	r2,r2,28
8112f104:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
8112f108:	e0fffe0f 	ldh	r3,-8(fp)
8112f10c:	00a045b4 	movhi	r2,33046
8112f110:	10b79004 	addi	r2,r2,-8640
8112f114:	180691ba 	slli	r3,r3,6
8112f118:	10c5883a 	add	r2,r2,r3
8112f11c:	10800804 	addi	r2,r2,32
8112f120:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112f124:	00a045b4 	movhi	r2,33046
8112f128:	10b77b04 	addi	r2,r2,-8724
8112f12c:	10c01417 	ldw	r3,80(r2)
8112f130:	e13ffe0f 	ldh	r4,-8(fp)
8112f134:	00a045b4 	movhi	r2,33046
8112f138:	10b79004 	addi	r2,r2,-8640
8112f13c:	200891ba 	slli	r4,r4,6
8112f140:	1105883a 	add	r2,r2,r4
8112f144:	10800704 	addi	r2,r2,28
8112f148:	10800017 	ldw	r2,0(r2)
8112f14c:	113fff84 	addi	r4,r2,-2
8112f150:	00a045b4 	movhi	r2,33046
8112f154:	10b77b04 	addi	r2,r2,-8724
8112f158:	10800383 	ldbu	r2,14(r2)
8112f15c:	10803fcc 	andi	r2,r2,255
8112f160:	2085383a 	mul	r2,r4,r2
8112f164:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8112f168:	e13ffe0f 	ldh	r4,-8(fp)
8112f16c:	00a045b4 	movhi	r2,33046
8112f170:	10b79004 	addi	r2,r2,-8640
8112f174:	200891ba 	slli	r4,r4,6
8112f178:	1105883a 	add	r2,r2,r4
8112f17c:	10800804 	addi	r2,r2,32
8112f180:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112f184:	1885883a 	add	r2,r3,r2
8112f188:	e0bffb15 	stw	r2,-20(fp)
8112f18c:	00009706 	br	8112f3ec <alt_up_sd_card_write+0x4dc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
8112f190:	0005883a 	mov	r2,zero
8112f194:	0000e106 	br	8112f51c <alt_up_sd_card_write+0x60c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8112f198:	e13ffe0f 	ldh	r4,-8(fp)
8112f19c:	e0fffe0f 	ldh	r3,-8(fp)
8112f1a0:	00a045b4 	movhi	r2,33046
8112f1a4:	10b79004 	addi	r2,r2,-8640
8112f1a8:	180691ba 	slli	r3,r3,6
8112f1ac:	10c5883a 	add	r2,r2,r3
8112f1b0:	10800804 	addi	r2,r2,32
8112f1b4:	10800017 	ldw	r2,0(r2)
8112f1b8:	10c00044 	addi	r3,r2,1
8112f1bc:	00a045b4 	movhi	r2,33046
8112f1c0:	10b79004 	addi	r2,r2,-8640
8112f1c4:	200891ba 	slli	r4,r4,6
8112f1c8:	1105883a 	add	r2,r2,r4
8112f1cc:	10800804 	addi	r2,r2,32
8112f1d0:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
8112f1d4:	e0bffb17 	ldw	r2,-20(fp)
8112f1d8:	10800044 	addi	r2,r2,1
8112f1dc:	e0bffb15 	stw	r2,-20(fp)
8112f1e0:	00008206 	br	8112f3ec <alt_up_sd_card_write+0x4dc>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8112f1e4:	e0fffe0f 	ldh	r3,-8(fp)
8112f1e8:	00a045b4 	movhi	r2,33046
8112f1ec:	10b79004 	addi	r2,r2,-8640
8112f1f0:	180691ba 	slli	r3,r3,6
8112f1f4:	10c5883a 	add	r2,r2,r3
8112f1f8:	10800904 	addi	r2,r2,36
8112f1fc:	10800017 	ldw	r2,0(r2)
8112f200:	10007a26 	beq	r2,zero,8112f3ec <alt_up_sd_card_write+0x4dc>
8112f204:	e0bffc0f 	ldh	r2,-16(fp)
8112f208:	1000781e 	bne	r2,zero,8112f3ec <alt_up_sd_card_write+0x4dc>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
8112f20c:	e0fffe0f 	ldh	r3,-8(fp)
8112f210:	00a045b4 	movhi	r2,33046
8112f214:	10b79004 	addi	r2,r2,-8640
8112f218:	180691ba 	slli	r3,r3,6
8112f21c:	10c5883a 	add	r2,r2,r3
8112f220:	10800804 	addi	r2,r2,32
8112f224:	10c00017 	ldw	r3,0(r2)
8112f228:	00a045b4 	movhi	r2,33046
8112f22c:	10b77b04 	addi	r2,r2,-8724
8112f230:	10800383 	ldbu	r2,14(r2)
8112f234:	10803fcc 	andi	r2,r2,255
8112f238:	10bfffc4 	addi	r2,r2,-1
8112f23c:	18803e1e 	bne	r3,r2,8112f338 <alt_up_sd_card_write+0x428>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
8112f240:	e0bffd04 	addi	r2,fp,-12
8112f244:	1009883a 	mov	r4,r2
8112f248:	112d5d80 	call	8112d5d8 <find_first_empty_cluster>
8112f24c:	10003826 	beq	r2,zero,8112f330 <alt_up_sd_card_write+0x420>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
8112f250:	e0fffe0f 	ldh	r3,-8(fp)
8112f254:	00a045b4 	movhi	r2,33046
8112f258:	10b79004 	addi	r2,r2,-8640
8112f25c:	180691ba 	slli	r3,r3,6
8112f260:	10c5883a 	add	r2,r2,r3
8112f264:	10800704 	addi	r2,r2,28
8112f268:	10800017 	ldw	r2,0(r2)
8112f26c:	e0fffd17 	ldw	r3,-12(fp)
8112f270:	18ffffcc 	andi	r3,r3,65535
8112f274:	18e0001c 	xori	r3,r3,32768
8112f278:	18e00004 	addi	r3,r3,-32768
8112f27c:	01800044 	movi	r6,1
8112f280:	180b883a 	mov	r5,r3
8112f284:	1009883a 	mov	r4,r2
8112f288:	112b6b00 	call	8112b6b0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
8112f28c:	e0bffd17 	ldw	r2,-12(fp)
8112f290:	01800044 	movi	r6,1
8112f294:	017fffc4 	movi	r5,-1
8112f298:	1009883a 	mov	r4,r2
8112f29c:	112b6b00 	call	8112b6b0 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
8112f2a0:	e0fffe0f 	ldh	r3,-8(fp)
8112f2a4:	00a045b4 	movhi	r2,33046
8112f2a8:	10b79004 	addi	r2,r2,-8640
8112f2ac:	180691ba 	slli	r3,r3,6
8112f2b0:	10c5883a 	add	r2,r2,r3
8112f2b4:	10800704 	addi	r2,r2,28
8112f2b8:	10800017 	ldw	r2,0(r2)
8112f2bc:	e0fffd17 	ldw	r3,-12(fp)
8112f2c0:	18ffffcc 	andi	r3,r3,65535
8112f2c4:	18e0001c 	xori	r3,r3,32768
8112f2c8:	18e00004 	addi	r3,r3,-32768
8112f2cc:	000d883a 	mov	r6,zero
8112f2d0:	180b883a 	mov	r5,r3
8112f2d4:	1009883a 	mov	r4,r2
8112f2d8:	112b6b00 	call	8112b6b0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
8112f2dc:	e0bffd17 	ldw	r2,-12(fp)
8112f2e0:	000d883a 	mov	r6,zero
8112f2e4:	017fffc4 	movi	r5,-1
8112f2e8:	1009883a 	mov	r4,r2
8112f2ec:	112b6b00 	call	8112b6b0 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
8112f2f0:	e13ffe0f 	ldh	r4,-8(fp)
8112f2f4:	e0fffd17 	ldw	r3,-12(fp)
8112f2f8:	00a045b4 	movhi	r2,33046
8112f2fc:	10b79004 	addi	r2,r2,-8640
8112f300:	200891ba 	slli	r4,r4,6
8112f304:	1105883a 	add	r2,r2,r4
8112f308:	10800704 	addi	r2,r2,28
8112f30c:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
8112f310:	e0fffe0f 	ldh	r3,-8(fp)
8112f314:	00a045b4 	movhi	r2,33046
8112f318:	10b79004 	addi	r2,r2,-8640
8112f31c:	180691ba 	slli	r3,r3,6
8112f320:	10c5883a 	add	r2,r2,r3
8112f324:	10800804 	addi	r2,r2,32
8112f328:	10000015 	stw	zero,0(r2)
8112f32c:	00001506 	br	8112f384 <alt_up_sd_card_write+0x474>
						}
						else
						{
							return false;
8112f330:	0005883a 	mov	r2,zero
8112f334:	00007906 	br	8112f51c <alt_up_sd_card_write+0x60c>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
8112f338:	e13ffe0f 	ldh	r4,-8(fp)
8112f33c:	e0fffe0f 	ldh	r3,-8(fp)
8112f340:	00a045b4 	movhi	r2,33046
8112f344:	10b79004 	addi	r2,r2,-8640
8112f348:	180691ba 	slli	r3,r3,6
8112f34c:	10c5883a 	add	r2,r2,r3
8112f350:	10800904 	addi	r2,r2,36
8112f354:	10c00017 	ldw	r3,0(r2)
8112f358:	00a045b4 	movhi	r2,33046
8112f35c:	10b77b04 	addi	r2,r2,-8724
8112f360:	1080030b 	ldhu	r2,12(r2)
8112f364:	10bfffcc 	andi	r2,r2,65535
8112f368:	1887203a 	divu	r3,r3,r2
8112f36c:	00a045b4 	movhi	r2,33046
8112f370:	10b79004 	addi	r2,r2,-8640
8112f374:	200891ba 	slli	r4,r4,6
8112f378:	1105883a 	add	r2,r2,r4
8112f37c:	10800804 	addi	r2,r2,32
8112f380:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112f384:	00a045b4 	movhi	r2,33046
8112f388:	10b77b04 	addi	r2,r2,-8724
8112f38c:	10c01417 	ldw	r3,80(r2)
8112f390:	e13ffe0f 	ldh	r4,-8(fp)
8112f394:	00a045b4 	movhi	r2,33046
8112f398:	10b79004 	addi	r2,r2,-8640
8112f39c:	200891ba 	slli	r4,r4,6
8112f3a0:	1105883a 	add	r2,r2,r4
8112f3a4:	10800704 	addi	r2,r2,28
8112f3a8:	10800017 	ldw	r2,0(r2)
8112f3ac:	113fff84 	addi	r4,r2,-2
8112f3b0:	00a045b4 	movhi	r2,33046
8112f3b4:	10b77b04 	addi	r2,r2,-8724
8112f3b8:	10800383 	ldbu	r2,14(r2)
8112f3bc:	10803fcc 	andi	r2,r2,255
8112f3c0:	2085383a 	mul	r2,r4,r2
8112f3c4:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
8112f3c8:	e13ffe0f 	ldh	r4,-8(fp)
8112f3cc:	00a045b4 	movhi	r2,33046
8112f3d0:	10b79004 	addi	r2,r2,-8640
8112f3d4:	200891ba 	slli	r4,r4,6
8112f3d8:	1105883a 	add	r2,r2,r4
8112f3dc:	10800804 	addi	r2,r2,32
8112f3e0:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8112f3e4:	1885883a 	add	r2,r3,r2
8112f3e8:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
8112f3ec:	d0e09617 	ldw	r3,-32168(gp)
8112f3f0:	e0bffb17 	ldw	r2,-20(fp)
8112f3f4:	1885883a 	add	r2,r3,r2
8112f3f8:	1007883a 	mov	r3,r2
8112f3fc:	d0a09a17 	ldw	r2,-32152(gp)
8112f400:	18800726 	beq	r3,r2,8112f420 <alt_up_sd_card_write+0x510>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
8112f404:	d0a09617 	ldw	r2,-32168(gp)
8112f408:	100b883a 	mov	r5,r2
8112f40c:	e13ffb17 	ldw	r4,-20(fp)
8112f410:	112b5240 	call	8112b524 <Read_Sector_Data>
8112f414:	1000021e 	bne	r2,zero,8112f420 <alt_up_sd_card_write+0x510>
                {
					return false;
8112f418:	0005883a 	mov	r2,zero
8112f41c:	00003f06 	br	8112f51c <alt_up_sd_card_write+0x60c>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
8112f420:	d0e09517 	ldw	r3,-32172(gp)
8112f424:	e0bffc0f 	ldh	r2,-16(fp)
8112f428:	1885883a 	add	r2,r3,r2
8112f42c:	e0ffff07 	ldb	r3,-4(fp)
8112f430:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
8112f434:	e13ffe0f 	ldh	r4,-8(fp)
8112f438:	e0fffe0f 	ldh	r3,-8(fp)
8112f43c:	00a045b4 	movhi	r2,33046
8112f440:	10b79004 	addi	r2,r2,-8640
8112f444:	180691ba 	slli	r3,r3,6
8112f448:	10c5883a 	add	r2,r2,r3
8112f44c:	10800904 	addi	r2,r2,36
8112f450:	10800017 	ldw	r2,0(r2)
8112f454:	10c00044 	addi	r3,r2,1
8112f458:	00a045b4 	movhi	r2,33046
8112f45c:	10b79004 	addi	r2,r2,-8640
8112f460:	200891ba 	slli	r4,r4,6
8112f464:	1105883a 	add	r2,r2,r4
8112f468:	10800904 	addi	r2,r2,36
8112f46c:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
8112f470:	e0fffe0f 	ldh	r3,-8(fp)
8112f474:	00a045b4 	movhi	r2,33046
8112f478:	10b79004 	addi	r2,r2,-8640
8112f47c:	180691ba 	slli	r3,r3,6
8112f480:	10c5883a 	add	r2,r2,r3
8112f484:	10800904 	addi	r2,r2,36
8112f488:	10c00017 	ldw	r3,0(r2)
8112f48c:	e13ffe0f 	ldh	r4,-8(fp)
8112f490:	00a045b4 	movhi	r2,33046
8112f494:	10b79004 	addi	r2,r2,-8640
8112f498:	200891ba 	slli	r4,r4,6
8112f49c:	1105883a 	add	r2,r2,r4
8112f4a0:	10800604 	addi	r2,r2,24
8112f4a4:	10800017 	ldw	r2,0(r2)
8112f4a8:	18801736 	bltu	r3,r2,8112f508 <alt_up_sd_card_write+0x5f8>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
8112f4ac:	e13ffe0f 	ldh	r4,-8(fp)
8112f4b0:	e0fffe0f 	ldh	r3,-8(fp)
8112f4b4:	00a045b4 	movhi	r2,33046
8112f4b8:	10b79004 	addi	r2,r2,-8640
8112f4bc:	180691ba 	slli	r3,r3,6
8112f4c0:	10c5883a 	add	r2,r2,r3
8112f4c4:	10800604 	addi	r2,r2,24
8112f4c8:	10800017 	ldw	r2,0(r2)
8112f4cc:	10c00044 	addi	r3,r2,1
8112f4d0:	00a045b4 	movhi	r2,33046
8112f4d4:	10b79004 	addi	r2,r2,-8640
8112f4d8:	200891ba 	slli	r4,r4,6
8112f4dc:	1105883a 	add	r2,r2,r4
8112f4e0:	10800604 	addi	r2,r2,24
8112f4e4:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
8112f4e8:	e0fffe0f 	ldh	r3,-8(fp)
8112f4ec:	00a045b4 	movhi	r2,33046
8112f4f0:	10b79004 	addi	r2,r2,-8640
8112f4f4:	180691ba 	slli	r3,r3,6
8112f4f8:	10c5883a 	add	r2,r2,r3
8112f4fc:	10800e04 	addi	r2,r2,56
8112f500:	00c00044 	movi	r3,1
8112f504:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
8112f508:	00800044 	movi	r2,1
8112f50c:	d0a09915 	stw	r2,-32156(gp)
			result = true;
8112f510:	00800044 	movi	r2,1
8112f514:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
8112f518:	e0bffa17 	ldw	r2,-24(fp)
}
8112f51c:	e037883a 	mov	sp,fp
8112f520:	dfc00117 	ldw	ra,4(sp)
8112f524:	df000017 	ldw	fp,0(sp)
8112f528:	dec00204 	addi	sp,sp,8
8112f52c:	f800283a 	ret

8112f530 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
8112f530:	defffb04 	addi	sp,sp,-20
8112f534:	dfc00415 	stw	ra,16(sp)
8112f538:	df000315 	stw	fp,12(sp)
8112f53c:	df000304 	addi	fp,sp,12
8112f540:	2005883a 	mov	r2,r4
8112f544:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
8112f548:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8112f54c:	112e1540 	call	8112e154 <alt_up_sd_card_is_Present>
8112f550:	10006026 	beq	r2,zero,8112f6d4 <alt_up_sd_card_fclose+0x1a4>
8112f554:	d0a08f17 	ldw	r2,-32196(gp)
8112f558:	10005e26 	beq	r2,zero,8112f6d4 <alt_up_sd_card_fclose+0x1a4>
    {
        if (active_files[file_handle].in_use) 
8112f55c:	e0ffff0f 	ldh	r3,-4(fp)
8112f560:	00a045b4 	movhi	r2,33046
8112f564:	10b79004 	addi	r2,r2,-8640
8112f568:	180691ba 	slli	r3,r3,6
8112f56c:	10c5883a 	add	r2,r2,r3
8112f570:	10800f04 	addi	r2,r2,60
8112f574:	10800017 	ldw	r2,0(r2)
8112f578:	10005626 	beq	r2,zero,8112f6d4 <alt_up_sd_card_fclose+0x1a4>
        {
			if (active_files[file_handle].modified)
8112f57c:	e0ffff0f 	ldh	r3,-4(fp)
8112f580:	00a045b4 	movhi	r2,33046
8112f584:	10b79004 	addi	r2,r2,-8640
8112f588:	180691ba 	slli	r3,r3,6
8112f58c:	10c5883a 	add	r2,r2,r3
8112f590:	10800e04 	addi	r2,r2,56
8112f594:	10800017 	ldw	r2,0(r2)
8112f598:	10004526 	beq	r2,zero,8112f6b0 <alt_up_sd_card_fclose+0x180>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
8112f59c:	e0ffff0f 	ldh	r3,-4(fp)
8112f5a0:	00a045b4 	movhi	r2,33046
8112f5a4:	10b79004 	addi	r2,r2,-8640
8112f5a8:	180691ba 	slli	r3,r3,6
8112f5ac:	10c5883a 	add	r2,r2,r3
8112f5b0:	10800b04 	addi	r2,r2,44
8112f5b4:	10800017 	ldw	r2,0(r2)
8112f5b8:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
8112f5bc:	e0ffff0f 	ldh	r3,-4(fp)
8112f5c0:	00a045b4 	movhi	r2,33046
8112f5c4:	10b79004 	addi	r2,r2,-8640
8112f5c8:	180691ba 	slli	r3,r3,6
8112f5cc:	10c5883a 	add	r2,r2,r3
8112f5d0:	10800a04 	addi	r2,r2,40
8112f5d4:	10800017 	ldw	r2,0(r2)
8112f5d8:	1000071e 	bne	r2,zero,8112f5f8 <alt_up_sd_card_fclose+0xc8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
8112f5dc:	00a045b4 	movhi	r2,33046
8112f5e0:	10b77b04 	addi	r2,r2,-8724
8112f5e4:	10801317 	ldw	r2,76(r2)
8112f5e8:	e0fffe17 	ldw	r3,-8(fp)
8112f5ec:	1885883a 	add	r2,r3,r2
8112f5f0:	e0bffe15 	stw	r2,-8(fp)
8112f5f4:	00001406 	br	8112f648 <alt_up_sd_card_fclose+0x118>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
8112f5f8:	00a045b4 	movhi	r2,33046
8112f5fc:	10b77b04 	addi	r2,r2,-8724
8112f600:	10c01417 	ldw	r3,80(r2)
8112f604:	e0bffe17 	ldw	r2,-8(fp)
8112f608:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
8112f60c:	e13fff0f 	ldh	r4,-4(fp)
8112f610:	00a045b4 	movhi	r2,33046
8112f614:	10b79004 	addi	r2,r2,-8640
8112f618:	200891ba 	slli	r4,r4,6
8112f61c:	1105883a 	add	r2,r2,r4
8112f620:	10800a04 	addi	r2,r2,40
8112f624:	10800017 	ldw	r2,0(r2)
8112f628:	113fff84 	addi	r4,r2,-2
8112f62c:	00a045b4 	movhi	r2,33046
8112f630:	10b77b04 	addi	r2,r2,-8724
8112f634:	10800383 	ldbu	r2,14(r2)
8112f638:	10803fcc 	andi	r2,r2,255
8112f63c:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
8112f640:	1885883a 	add	r2,r3,r2
8112f644:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
8112f648:	e0bffe17 	ldw	r2,-8(fp)
8112f64c:	d0e09617 	ldw	r3,-32168(gp)
8112f650:	180b883a 	mov	r5,r3
8112f654:	1009883a 	mov	r4,r2
8112f658:	112b5240 	call	8112b524 <Read_Sector_Data>
8112f65c:	10001426 	beq	r2,zero,8112f6b0 <alt_up_sd_card_fclose+0x180>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
8112f660:	e0ffff0f 	ldh	r3,-4(fp)
8112f664:	00a045b4 	movhi	r2,33046
8112f668:	10b79004 	addi	r2,r2,-8640
8112f66c:	180691ba 	slli	r3,r3,6
8112f670:	10c5883a 	add	r2,r2,r3
8112f674:	10800c04 	addi	r2,r2,48
8112f678:	1080000b 	ldhu	r2,0(r2)
8112f67c:	113fffcc 	andi	r4,r2,65535
8112f680:	2120001c 	xori	r4,r4,32768
8112f684:	21200004 	addi	r4,r4,-32768
8112f688:	e0bfff0f 	ldh	r2,-4(fp)
8112f68c:	100691ba 	slli	r3,r2,6
8112f690:	00a045b4 	movhi	r2,33046
8112f694:	10b79004 	addi	r2,r2,-8640
8112f698:	1885883a 	add	r2,r3,r2
8112f69c:	100b883a 	mov	r5,r2
8112f6a0:	112bbb00 	call	8112bbb0 <Write_File_Record_At_Offset>
8112f6a4:	10000226 	beq	r2,zero,8112f6b0 <alt_up_sd_card_fclose+0x180>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
8112f6a8:	112b4d80 	call	8112b4d8 <Save_Modified_Sector>
8112f6ac:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
8112f6b0:	e0ffff0f 	ldh	r3,-4(fp)
8112f6b4:	00a045b4 	movhi	r2,33046
8112f6b8:	10b79004 	addi	r2,r2,-8640
8112f6bc:	180691ba 	slli	r3,r3,6
8112f6c0:	10c5883a 	add	r2,r2,r3
8112f6c4:	10800f04 	addi	r2,r2,60
8112f6c8:	10000015 	stw	zero,0(r2)
			result = true;
8112f6cc:	00800044 	movi	r2,1
8112f6d0:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
8112f6d4:	e0bffd17 	ldw	r2,-12(fp)
}
8112f6d8:	e037883a 	mov	sp,fp
8112f6dc:	dfc00117 	ldw	ra,4(sp)
8112f6e0:	df000017 	ldw	fp,0(sp)
8112f6e4:	dec00204 	addi	sp,sp,8
8112f6e8:	f800283a 	ret

8112f6ec <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
8112f6ec:	defffa04 	addi	sp,sp,-24
8112f6f0:	dfc00515 	stw	ra,20(sp)
8112f6f4:	df000415 	stw	fp,16(sp)
8112f6f8:	df000404 	addi	fp,sp,16
8112f6fc:	e13ffd15 	stw	r4,-12(fp)
8112f700:	e17ffe15 	stw	r5,-8(fp)
8112f704:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8112f708:	e0bffd17 	ldw	r2,-12(fp)
8112f70c:	10800017 	ldw	r2,0(r2)
8112f710:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
8112f714:	e0bffc17 	ldw	r2,-16(fp)
8112f718:	10c00a04 	addi	r3,r2,40
8112f71c:	e0bffd17 	ldw	r2,-12(fp)
8112f720:	10800217 	ldw	r2,8(r2)
8112f724:	100f883a 	mov	r7,r2
8112f728:	e1bfff17 	ldw	r6,-4(fp)
8112f72c:	e17ffe17 	ldw	r5,-8(fp)
8112f730:	1809883a 	mov	r4,r3
8112f734:	112fe980 	call	8112fe98 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
8112f738:	e037883a 	mov	sp,fp
8112f73c:	dfc00117 	ldw	ra,4(sp)
8112f740:	df000017 	ldw	fp,0(sp)
8112f744:	dec00204 	addi	sp,sp,8
8112f748:	f800283a 	ret

8112f74c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
8112f74c:	defffa04 	addi	sp,sp,-24
8112f750:	dfc00515 	stw	ra,20(sp)
8112f754:	df000415 	stw	fp,16(sp)
8112f758:	df000404 	addi	fp,sp,16
8112f75c:	e13ffd15 	stw	r4,-12(fp)
8112f760:	e17ffe15 	stw	r5,-8(fp)
8112f764:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8112f768:	e0bffd17 	ldw	r2,-12(fp)
8112f76c:	10800017 	ldw	r2,0(r2)
8112f770:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
8112f774:	e0bffc17 	ldw	r2,-16(fp)
8112f778:	10c00a04 	addi	r3,r2,40
8112f77c:	e0bffd17 	ldw	r2,-12(fp)
8112f780:	10800217 	ldw	r2,8(r2)
8112f784:	100f883a 	mov	r7,r2
8112f788:	e1bfff17 	ldw	r6,-4(fp)
8112f78c:	e17ffe17 	ldw	r5,-8(fp)
8112f790:	1809883a 	mov	r4,r3
8112f794:	11301540 	call	81130154 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
8112f798:	e037883a 	mov	sp,fp
8112f79c:	dfc00117 	ldw	ra,4(sp)
8112f7a0:	df000017 	ldw	fp,0(sp)
8112f7a4:	dec00204 	addi	sp,sp,8
8112f7a8:	f800283a 	ret

8112f7ac <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
8112f7ac:	defffc04 	addi	sp,sp,-16
8112f7b0:	dfc00315 	stw	ra,12(sp)
8112f7b4:	df000215 	stw	fp,8(sp)
8112f7b8:	df000204 	addi	fp,sp,8
8112f7bc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
8112f7c0:	e0bfff17 	ldw	r2,-4(fp)
8112f7c4:	10800017 	ldw	r2,0(r2)
8112f7c8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
8112f7cc:	e0bffe17 	ldw	r2,-8(fp)
8112f7d0:	10c00a04 	addi	r3,r2,40
8112f7d4:	e0bfff17 	ldw	r2,-4(fp)
8112f7d8:	10800217 	ldw	r2,8(r2)
8112f7dc:	100b883a 	mov	r5,r2
8112f7e0:	1809883a 	mov	r4,r3
8112f7e4:	112fd400 	call	8112fd40 <altera_avalon_jtag_uart_close>
}
8112f7e8:	e037883a 	mov	sp,fp
8112f7ec:	dfc00117 	ldw	ra,4(sp)
8112f7f0:	df000017 	ldw	fp,0(sp)
8112f7f4:	dec00204 	addi	sp,sp,8
8112f7f8:	f800283a 	ret

8112f7fc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
8112f7fc:	defffa04 	addi	sp,sp,-24
8112f800:	dfc00515 	stw	ra,20(sp)
8112f804:	df000415 	stw	fp,16(sp)
8112f808:	df000404 	addi	fp,sp,16
8112f80c:	e13ffd15 	stw	r4,-12(fp)
8112f810:	e17ffe15 	stw	r5,-8(fp)
8112f814:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
8112f818:	e0bffd17 	ldw	r2,-12(fp)
8112f81c:	10800017 	ldw	r2,0(r2)
8112f820:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
8112f824:	e0bffc17 	ldw	r2,-16(fp)
8112f828:	10800a04 	addi	r2,r2,40
8112f82c:	e1bfff17 	ldw	r6,-4(fp)
8112f830:	e17ffe17 	ldw	r5,-8(fp)
8112f834:	1009883a 	mov	r4,r2
8112f838:	112fda80 	call	8112fda8 <altera_avalon_jtag_uart_ioctl>
}
8112f83c:	e037883a 	mov	sp,fp
8112f840:	dfc00117 	ldw	ra,4(sp)
8112f844:	df000017 	ldw	fp,0(sp)
8112f848:	dec00204 	addi	sp,sp,8
8112f84c:	f800283a 	ret

8112f850 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
8112f850:	defff104 	addi	sp,sp,-60
8112f854:	dfc00e15 	stw	ra,56(sp)
8112f858:	df000d15 	stw	fp,52(sp)
8112f85c:	df000d04 	addi	fp,sp,52
8112f860:	e13ff915 	stw	r4,-28(fp)
8112f864:	e17ffa15 	stw	r5,-24(fp)
8112f868:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
8112f86c:	e0bff917 	ldw	r2,-28(fp)
8112f870:	10800c04 	addi	r2,r2,48
8112f874:	e0bff415 	stw	r2,-48(fp)
8112f878:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
8112f87c:	e0bff80b 	ldhu	r2,-32(fp)
8112f880:	e0fff884 	addi	r3,fp,-30
8112f884:	180b883a 	mov	r5,r3
8112f888:	1009883a 	mov	r4,r2
8112f88c:	1124e980 	call	81124e98 <OSFlagCreate>
8112f890:	1007883a 	mov	r3,r2
8112f894:	e0bff417 	ldw	r2,-48(fp)
8112f898:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
8112f89c:	e0bff917 	ldw	r2,-28(fp)
8112f8a0:	10800a04 	addi	r2,r2,40
8112f8a4:	e0bff515 	stw	r2,-44(fp)
8112f8a8:	00800044 	movi	r2,1
8112f8ac:	e0bff78d 	sth	r2,-34(fp)
8112f8b0:	e0bff78b 	ldhu	r2,-34(fp)
8112f8b4:	1009883a 	mov	r4,r2
8112f8b8:	1128cc40 	call	81128cc4 <OSSemCreate>
8112f8bc:	1007883a 	mov	r3,r2
8112f8c0:	e0bff517 	ldw	r2,-44(fp)
8112f8c4:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
8112f8c8:	e0bff917 	ldw	r2,-28(fp)
8112f8cc:	10800b04 	addi	r2,r2,44
8112f8d0:	e0bff615 	stw	r2,-40(fp)
8112f8d4:	00800044 	movi	r2,1
8112f8d8:	e0bff70d 	sth	r2,-36(fp)
8112f8dc:	e0bff70b 	ldhu	r2,-36(fp)
8112f8e0:	1009883a 	mov	r4,r2
8112f8e4:	1128cc40 	call	81128cc4 <OSSemCreate>
8112f8e8:	1007883a 	mov	r3,r2
8112f8ec:	e0bff617 	ldw	r2,-40(fp)
8112f8f0:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8112f8f4:	e0bff917 	ldw	r2,-28(fp)
8112f8f8:	00c00044 	movi	r3,1
8112f8fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
8112f900:	e0bff917 	ldw	r2,-28(fp)
8112f904:	10800017 	ldw	r2,0(r2)
8112f908:	10800104 	addi	r2,r2,4
8112f90c:	1007883a 	mov	r3,r2
8112f910:	e0bff917 	ldw	r2,-28(fp)
8112f914:	10800817 	ldw	r2,32(r2)
8112f918:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
8112f91c:	e0bffa17 	ldw	r2,-24(fp)
8112f920:	e0fffb17 	ldw	r3,-20(fp)
8112f924:	d8000015 	stw	zero,0(sp)
8112f928:	e1fff917 	ldw	r7,-28(fp)
8112f92c:	01a044f4 	movhi	r6,33043
8112f930:	31be6604 	addi	r6,r6,-1640
8112f934:	180b883a 	mov	r5,r3
8112f938:	1009883a 	mov	r4,r2
8112f93c:	11344800 	call	81134480 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
8112f940:	e0bff917 	ldw	r2,-28(fp)
8112f944:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
8112f948:	e0bff917 	ldw	r2,-28(fp)
8112f94c:	10800204 	addi	r2,r2,8
8112f950:	d0e07317 	ldw	r3,-32308(gp)
8112f954:	e1fff917 	ldw	r7,-28(fp)
8112f958:	01a044f4 	movhi	r6,33043
8112f95c:	31bf0f04 	addi	r6,r6,-964
8112f960:	180b883a 	mov	r5,r3
8112f964:	1009883a 	mov	r4,r2
8112f968:	1133df00 	call	81133df0 <alt_alarm_start>
8112f96c:	1000040e 	bge	r2,zero,8112f980 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
8112f970:	e0fff917 	ldw	r3,-28(fp)
8112f974:	00a00034 	movhi	r2,32768
8112f978:	10bfffc4 	addi	r2,r2,-1
8112f97c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
8112f980:	0001883a 	nop
8112f984:	e037883a 	mov	sp,fp
8112f988:	dfc00117 	ldw	ra,4(sp)
8112f98c:	df000017 	ldw	fp,0(sp)
8112f990:	dec00204 	addi	sp,sp,8
8112f994:	f800283a 	ret

8112f998 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
8112f998:	defff204 	addi	sp,sp,-56
8112f99c:	dfc00d15 	stw	ra,52(sp)
8112f9a0:	df000c15 	stw	fp,48(sp)
8112f9a4:	df000c04 	addi	fp,sp,48
8112f9a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
8112f9ac:	e0bfff17 	ldw	r2,-4(fp)
8112f9b0:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
8112f9b4:	e0bff617 	ldw	r2,-40(fp)
8112f9b8:	10800017 	ldw	r2,0(r2)
8112f9bc:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8112f9c0:	e0bff717 	ldw	r2,-36(fp)
8112f9c4:	10800104 	addi	r2,r2,4
8112f9c8:	10800037 	ldwio	r2,0(r2)
8112f9cc:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
8112f9d0:	e0bff817 	ldw	r2,-32(fp)
8112f9d4:	1080c00c 	andi	r2,r2,768
8112f9d8:	10009126 	beq	r2,zero,8112fc20 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
8112f9dc:	e0bff817 	ldw	r2,-32(fp)
8112f9e0:	1080400c 	andi	r2,r2,256
8112f9e4:	10004726 	beq	r2,zero,8112fb04 <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
8112f9e8:	00800074 	movhi	r2,1
8112f9ec:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112f9f0:	e0bff617 	ldw	r2,-40(fp)
8112f9f4:	10800d17 	ldw	r2,52(r2)
8112f9f8:	10800044 	addi	r2,r2,1
8112f9fc:	1081ffcc 	andi	r2,r2,2047
8112fa00:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
8112fa04:	e0bff617 	ldw	r2,-40(fp)
8112fa08:	10c00e17 	ldw	r3,56(r2)
8112fa0c:	e0bff917 	ldw	r2,-28(fp)
8112fa10:	18802726 	beq	r3,r2,8112fab0 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
8112fa14:	e0bff717 	ldw	r2,-36(fp)
8112fa18:	10800037 	ldwio	r2,0(r2)
8112fa1c:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
8112fa20:	e0bff417 	ldw	r2,-48(fp)
8112fa24:	10a0000c 	andi	r2,r2,32768
8112fa28:	10002326 	beq	r2,zero,8112fab8 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
8112fa2c:	e0bff617 	ldw	r2,-40(fp)
8112fa30:	10800d17 	ldw	r2,52(r2)
8112fa34:	e0fff417 	ldw	r3,-48(fp)
8112fa38:	1809883a 	mov	r4,r3
8112fa3c:	e0fff617 	ldw	r3,-40(fp)
8112fa40:	1885883a 	add	r2,r3,r2
8112fa44:	10801104 	addi	r2,r2,68
8112fa48:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112fa4c:	e0bff617 	ldw	r2,-40(fp)
8112fa50:	10800d17 	ldw	r2,52(r2)
8112fa54:	10800044 	addi	r2,r2,1
8112fa58:	10c1ffcc 	andi	r3,r2,2047
8112fa5c:	e0bff617 	ldw	r2,-40(fp)
8112fa60:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
8112fa64:	e0bff617 	ldw	r2,-40(fp)
8112fa68:	10800c17 	ldw	r2,48(r2)
8112fa6c:	e0bffb15 	stw	r2,-20(fp)
8112fa70:	00800044 	movi	r2,1
8112fa74:	e0bffc0d 	sth	r2,-16(fp)
8112fa78:	00800044 	movi	r2,1
8112fa7c:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112fa80:	d0a07943 	ldbu	r2,-32283(gp)
8112fa84:	10803fcc 	andi	r2,r2,255
8112fa88:	103fd926 	beq	r2,zero,8112f9f0 <__reset+0xfb10f9f0>
  {
    OSFlagPost (group, flags, opt, &err);
8112fa8c:	e0bffc0b 	ldhu	r2,-16(fp)
8112fa90:	e0fffc83 	ldbu	r3,-14(fp)
8112fa94:	e13ffdc4 	addi	r4,fp,-9
8112fa98:	200f883a 	mov	r7,r4
8112fa9c:	180d883a 	mov	r6,r3
8112faa0:	100b883a 	mov	r5,r2
8112faa4:	e13ffb17 	ldw	r4,-20(fp)
8112faa8:	1125a740 	call	81125a74 <OSFlagPost>
      }
8112faac:	003fd006 	br	8112f9f0 <__reset+0xfb10f9f0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
8112fab0:	0001883a 	nop
8112fab4:	00000106 	br	8112fabc <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
8112fab8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
8112fabc:	e0bff417 	ldw	r2,-48(fp)
8112fac0:	10bfffec 	andhi	r2,r2,65535
8112fac4:	10000f26 	beq	r2,zero,8112fb04 <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
8112fac8:	e0bff617 	ldw	r2,-40(fp)
8112facc:	10c00817 	ldw	r3,32(r2)
8112fad0:	00bfff84 	movi	r2,-2
8112fad4:	1886703a 	and	r3,r3,r2
8112fad8:	e0bff617 	ldw	r2,-40(fp)
8112fadc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
8112fae0:	e0bff717 	ldw	r2,-36(fp)
8112fae4:	10800104 	addi	r2,r2,4
8112fae8:	1007883a 	mov	r3,r2
8112faec:	e0bff617 	ldw	r2,-40(fp)
8112faf0:	10800817 	ldw	r2,32(r2)
8112faf4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8112faf8:	e0bff717 	ldw	r2,-36(fp)
8112fafc:	10800104 	addi	r2,r2,4
8112fb00:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
8112fb04:	e0bff817 	ldw	r2,-32(fp)
8112fb08:	1080800c 	andi	r2,r2,512
8112fb0c:	103fac26 	beq	r2,zero,8112f9c0 <__reset+0xfb10f9c0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8112fb10:	e0bff817 	ldw	r2,-32(fp)
8112fb14:	1004d43a 	srli	r2,r2,16
8112fb18:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
8112fb1c:	00002606 	br	8112fbb8 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8112fb20:	e0bff717 	ldw	r2,-36(fp)
8112fb24:	e0fff617 	ldw	r3,-40(fp)
8112fb28:	18c01017 	ldw	r3,64(r3)
8112fb2c:	e13ff617 	ldw	r4,-40(fp)
8112fb30:	20c7883a 	add	r3,r4,r3
8112fb34:	18c21104 	addi	r3,r3,2116
8112fb38:	18c00003 	ldbu	r3,0(r3)
8112fb3c:	18c03fcc 	andi	r3,r3,255
8112fb40:	18c0201c 	xori	r3,r3,128
8112fb44:	18ffe004 	addi	r3,r3,-128
8112fb48:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112fb4c:	e0bff617 	ldw	r2,-40(fp)
8112fb50:	10801017 	ldw	r2,64(r2)
8112fb54:	10800044 	addi	r2,r2,1
8112fb58:	10c1ffcc 	andi	r3,r2,2047
8112fb5c:	e0bff617 	ldw	r2,-40(fp)
8112fb60:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
8112fb64:	e0bff617 	ldw	r2,-40(fp)
8112fb68:	10800c17 	ldw	r2,48(r2)
8112fb6c:	e0bffa15 	stw	r2,-24(fp)
8112fb70:	00800084 	movi	r2,2
8112fb74:	e0bffd0d 	sth	r2,-12(fp)
8112fb78:	00800044 	movi	r2,1
8112fb7c:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112fb80:	d0a07943 	ldbu	r2,-32283(gp)
8112fb84:	10803fcc 	andi	r2,r2,255
8112fb88:	10000826 	beq	r2,zero,8112fbac <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
8112fb8c:	e0bffd0b 	ldhu	r2,-12(fp)
8112fb90:	e0fffd83 	ldbu	r3,-10(fp)
8112fb94:	e13ffe04 	addi	r4,fp,-8
8112fb98:	200f883a 	mov	r7,r4
8112fb9c:	180d883a 	mov	r6,r3
8112fba0:	100b883a 	mov	r5,r2
8112fba4:	e13ffa17 	ldw	r4,-24(fp)
8112fba8:	1125a740 	call	81125a74 <OSFlagPost>

        space--;
8112fbac:	e0bff517 	ldw	r2,-44(fp)
8112fbb0:	10bfffc4 	addi	r2,r2,-1
8112fbb4:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
8112fbb8:	e0bff517 	ldw	r2,-44(fp)
8112fbbc:	10000526 	beq	r2,zero,8112fbd4 <altera_avalon_jtag_uart_irq+0x23c>
8112fbc0:	e0bff617 	ldw	r2,-40(fp)
8112fbc4:	10c01017 	ldw	r3,64(r2)
8112fbc8:	e0bff617 	ldw	r2,-40(fp)
8112fbcc:	10800f17 	ldw	r2,60(r2)
8112fbd0:	18bfd31e 	bne	r3,r2,8112fb20 <__reset+0xfb10fb20>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
8112fbd4:	e0bff517 	ldw	r2,-44(fp)
8112fbd8:	103f7926 	beq	r2,zero,8112f9c0 <__reset+0xfb10f9c0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
8112fbdc:	e0bff617 	ldw	r2,-40(fp)
8112fbe0:	10c00817 	ldw	r3,32(r2)
8112fbe4:	00bfff44 	movi	r2,-3
8112fbe8:	1886703a 	and	r3,r3,r2
8112fbec:	e0bff617 	ldw	r2,-40(fp)
8112fbf0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
8112fbf4:	e0bff617 	ldw	r2,-40(fp)
8112fbf8:	10800017 	ldw	r2,0(r2)
8112fbfc:	10800104 	addi	r2,r2,4
8112fc00:	1007883a 	mov	r3,r2
8112fc04:	e0bff617 	ldw	r2,-40(fp)
8112fc08:	10800817 	ldw	r2,32(r2)
8112fc0c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8112fc10:	e0bff717 	ldw	r2,-36(fp)
8112fc14:	10800104 	addi	r2,r2,4
8112fc18:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
8112fc1c:	003f6806 	br	8112f9c0 <__reset+0xfb10f9c0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8112fc20:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
8112fc24:	0001883a 	nop
8112fc28:	e037883a 	mov	sp,fp
8112fc2c:	dfc00117 	ldw	ra,4(sp)
8112fc30:	df000017 	ldw	fp,0(sp)
8112fc34:	dec00204 	addi	sp,sp,8
8112fc38:	f800283a 	ret

8112fc3c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
8112fc3c:	defff904 	addi	sp,sp,-28
8112fc40:	dfc00615 	stw	ra,24(sp)
8112fc44:	df000515 	stw	fp,20(sp)
8112fc48:	df000504 	addi	fp,sp,20
8112fc4c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
8112fc50:	e0bfff17 	ldw	r2,-4(fp)
8112fc54:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8112fc58:	e0bffb17 	ldw	r2,-20(fp)
8112fc5c:	10800017 	ldw	r2,0(r2)
8112fc60:	10800104 	addi	r2,r2,4
8112fc64:	10800037 	ldwio	r2,0(r2)
8112fc68:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
8112fc6c:	e0bffc17 	ldw	r2,-16(fp)
8112fc70:	1081000c 	andi	r2,r2,1024
8112fc74:	10000b26 	beq	r2,zero,8112fca4 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8112fc78:	e0bffb17 	ldw	r2,-20(fp)
8112fc7c:	10800017 	ldw	r2,0(r2)
8112fc80:	10800104 	addi	r2,r2,4
8112fc84:	1007883a 	mov	r3,r2
8112fc88:	e0bffb17 	ldw	r2,-20(fp)
8112fc8c:	10800817 	ldw	r2,32(r2)
8112fc90:	10810014 	ori	r2,r2,1024
8112fc94:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8112fc98:	e0bffb17 	ldw	r2,-20(fp)
8112fc9c:	10000915 	stw	zero,36(r2)
8112fca0:	00002106 	br	8112fd28 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
8112fca4:	e0bffb17 	ldw	r2,-20(fp)
8112fca8:	10c00917 	ldw	r3,36(r2)
8112fcac:	00a00034 	movhi	r2,32768
8112fcb0:	10bfff04 	addi	r2,r2,-4
8112fcb4:	10c01c36 	bltu	r2,r3,8112fd28 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
8112fcb8:	e0bffb17 	ldw	r2,-20(fp)
8112fcbc:	10800917 	ldw	r2,36(r2)
8112fcc0:	10c00044 	addi	r3,r2,1
8112fcc4:	e0bffb17 	ldw	r2,-20(fp)
8112fcc8:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
8112fccc:	e0bffb17 	ldw	r2,-20(fp)
8112fcd0:	10c00917 	ldw	r3,36(r2)
8112fcd4:	e0bffb17 	ldw	r2,-20(fp)
8112fcd8:	10800117 	ldw	r2,4(r2)
8112fcdc:	18801236 	bltu	r3,r2,8112fd28 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
8112fce0:	e0bffb17 	ldw	r2,-20(fp)
8112fce4:	10800c17 	ldw	r2,48(r2)
8112fce8:	e0bffd15 	stw	r2,-12(fp)
8112fcec:	00800104 	movi	r2,4
8112fcf0:	e0bffe0d 	sth	r2,-8(fp)
8112fcf4:	00800044 	movi	r2,1
8112fcf8:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8112fcfc:	d0a07943 	ldbu	r2,-32283(gp)
8112fd00:	10803fcc 	andi	r2,r2,255
8112fd04:	10000826 	beq	r2,zero,8112fd28 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
8112fd08:	e0bffe0b 	ldhu	r2,-8(fp)
8112fd0c:	e0fffe83 	ldbu	r3,-6(fp)
8112fd10:	e13ffec4 	addi	r4,fp,-5
8112fd14:	200f883a 	mov	r7,r4
8112fd18:	180d883a 	mov	r6,r3
8112fd1c:	100b883a 	mov	r5,r2
8112fd20:	e13ffd17 	ldw	r4,-12(fp)
8112fd24:	1125a740 	call	81125a74 <OSFlagPost>
8112fd28:	d0a07317 	ldw	r2,-32308(gp)
    }
  }

  return alt_ticks_per_second();
}
8112fd2c:	e037883a 	mov	sp,fp
8112fd30:	dfc00117 	ldw	ra,4(sp)
8112fd34:	df000017 	ldw	fp,0(sp)
8112fd38:	dec00204 	addi	sp,sp,8
8112fd3c:	f800283a 	ret

8112fd40 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
8112fd40:	defffd04 	addi	sp,sp,-12
8112fd44:	df000215 	stw	fp,8(sp)
8112fd48:	df000204 	addi	fp,sp,8
8112fd4c:	e13ffe15 	stw	r4,-8(fp)
8112fd50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8112fd54:	00000506 	br	8112fd6c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
8112fd58:	e0bfff17 	ldw	r2,-4(fp)
8112fd5c:	1090000c 	andi	r2,r2,16384
8112fd60:	10000226 	beq	r2,zero,8112fd6c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
8112fd64:	00bffd44 	movi	r2,-11
8112fd68:	00000b06 	br	8112fd98 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
8112fd6c:	e0bffe17 	ldw	r2,-8(fp)
8112fd70:	10c01017 	ldw	r3,64(r2)
8112fd74:	e0bffe17 	ldw	r2,-8(fp)
8112fd78:	10800f17 	ldw	r2,60(r2)
8112fd7c:	18800526 	beq	r3,r2,8112fd94 <altera_avalon_jtag_uart_close+0x54>
8112fd80:	e0bffe17 	ldw	r2,-8(fp)
8112fd84:	10c00917 	ldw	r3,36(r2)
8112fd88:	e0bffe17 	ldw	r2,-8(fp)
8112fd8c:	10800117 	ldw	r2,4(r2)
8112fd90:	18bff136 	bltu	r3,r2,8112fd58 <__reset+0xfb10fd58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
8112fd94:	0005883a 	mov	r2,zero
}
8112fd98:	e037883a 	mov	sp,fp
8112fd9c:	df000017 	ldw	fp,0(sp)
8112fda0:	dec00104 	addi	sp,sp,4
8112fda4:	f800283a 	ret

8112fda8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
8112fda8:	defffa04 	addi	sp,sp,-24
8112fdac:	df000515 	stw	fp,20(sp)
8112fdb0:	df000504 	addi	fp,sp,20
8112fdb4:	e13ffd15 	stw	r4,-12(fp)
8112fdb8:	e17ffe15 	stw	r5,-8(fp)
8112fdbc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
8112fdc0:	00bff9c4 	movi	r2,-25
8112fdc4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
8112fdc8:	e0bffe17 	ldw	r2,-8(fp)
8112fdcc:	10da8060 	cmpeqi	r3,r2,27137
8112fdd0:	1800031e 	bne	r3,zero,8112fde0 <altera_avalon_jtag_uart_ioctl+0x38>
8112fdd4:	109a80a0 	cmpeqi	r2,r2,27138
8112fdd8:	1000181e 	bne	r2,zero,8112fe3c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
8112fddc:	00002906 	br	8112fe84 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
8112fde0:	e0bffd17 	ldw	r2,-12(fp)
8112fde4:	10c00117 	ldw	r3,4(r2)
8112fde8:	00a00034 	movhi	r2,32768
8112fdec:	10bfffc4 	addi	r2,r2,-1
8112fdf0:	18802126 	beq	r3,r2,8112fe78 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
8112fdf4:	e0bfff17 	ldw	r2,-4(fp)
8112fdf8:	10800017 	ldw	r2,0(r2)
8112fdfc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
8112fe00:	e0bffc17 	ldw	r2,-16(fp)
8112fe04:	10800090 	cmplti	r2,r2,2
8112fe08:	1000061e 	bne	r2,zero,8112fe24 <altera_avalon_jtag_uart_ioctl+0x7c>
8112fe0c:	e0fffc17 	ldw	r3,-16(fp)
8112fe10:	00a00034 	movhi	r2,32768
8112fe14:	10bfffc4 	addi	r2,r2,-1
8112fe18:	18800226 	beq	r3,r2,8112fe24 <altera_avalon_jtag_uart_ioctl+0x7c>
8112fe1c:	e0bffc17 	ldw	r2,-16(fp)
8112fe20:	00000206 	br	8112fe2c <altera_avalon_jtag_uart_ioctl+0x84>
8112fe24:	00a00034 	movhi	r2,32768
8112fe28:	10bfff84 	addi	r2,r2,-2
8112fe2c:	e0fffd17 	ldw	r3,-12(fp)
8112fe30:	18800115 	stw	r2,4(r3)
      rc = 0;
8112fe34:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8112fe38:	00000f06 	br	8112fe78 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
8112fe3c:	e0bffd17 	ldw	r2,-12(fp)
8112fe40:	10c00117 	ldw	r3,4(r2)
8112fe44:	00a00034 	movhi	r2,32768
8112fe48:	10bfffc4 	addi	r2,r2,-1
8112fe4c:	18800c26 	beq	r3,r2,8112fe80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
8112fe50:	e0bffd17 	ldw	r2,-12(fp)
8112fe54:	10c00917 	ldw	r3,36(r2)
8112fe58:	e0bffd17 	ldw	r2,-12(fp)
8112fe5c:	10800117 	ldw	r2,4(r2)
8112fe60:	1885803a 	cmpltu	r2,r3,r2
8112fe64:	10c03fcc 	andi	r3,r2,255
8112fe68:	e0bfff17 	ldw	r2,-4(fp)
8112fe6c:	10c00015 	stw	r3,0(r2)
      rc = 0;
8112fe70:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8112fe74:	00000206 	br	8112fe80 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8112fe78:	0001883a 	nop
8112fe7c:	00000106 	br	8112fe84 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
8112fe80:	0001883a 	nop

  default:
    break;
  }

  return rc;
8112fe84:	e0bffb17 	ldw	r2,-20(fp)
}
8112fe88:	e037883a 	mov	sp,fp
8112fe8c:	df000017 	ldw	fp,0(sp)
8112fe90:	dec00104 	addi	sp,sp,4
8112fe94:	f800283a 	ret

8112fe98 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
8112fe98:	deffed04 	addi	sp,sp,-76
8112fe9c:	dfc01215 	stw	ra,72(sp)
8112fea0:	df001115 	stw	fp,68(sp)
8112fea4:	df001104 	addi	fp,sp,68
8112fea8:	e13ffc15 	stw	r4,-16(fp)
8112feac:	e17ffd15 	stw	r5,-12(fp)
8112feb0:	e1bffe15 	stw	r6,-8(fp)
8112feb4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
8112feb8:	e0bffd17 	ldw	r2,-12(fp)
8112febc:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
8112fec0:	e0bffc17 	ldw	r2,-16(fp)
8112fec4:	10800a17 	ldw	r2,40(r2)
8112fec8:	e0bff815 	stw	r2,-32(fp)
8112fecc:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
8112fed0:	e0bff90b 	ldhu	r2,-28(fp)
8112fed4:	e0fffb04 	addi	r3,fp,-20
8112fed8:	180d883a 	mov	r6,r3
8112fedc:	100b883a 	mov	r5,r2
8112fee0:	e13ff817 	ldw	r4,-32(fp)
8112fee4:	1128fdc0 	call	81128fdc <OSSemPend>

  while (space > 0)
8112fee8:	00006106 	br	81130070 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
8112feec:	e0bffc17 	ldw	r2,-16(fp)
8112fef0:	10800d17 	ldw	r2,52(r2)
8112fef4:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
8112fef8:	e0bffc17 	ldw	r2,-16(fp)
8112fefc:	10800e17 	ldw	r2,56(r2)
8112ff00:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
8112ff04:	e0fff317 	ldw	r3,-52(fp)
8112ff08:	e0bff417 	ldw	r2,-48(fp)
8112ff0c:	18800536 	bltu	r3,r2,8112ff24 <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
8112ff10:	e0fff317 	ldw	r3,-52(fp)
8112ff14:	e0bff417 	ldw	r2,-48(fp)
8112ff18:	1885c83a 	sub	r2,r3,r2
8112ff1c:	e0bff115 	stw	r2,-60(fp)
8112ff20:	00000406 	br	8112ff34 <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
8112ff24:	00c20004 	movi	r3,2048
8112ff28:	e0bff417 	ldw	r2,-48(fp)
8112ff2c:	1885c83a 	sub	r2,r3,r2
8112ff30:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
8112ff34:	e0bff117 	ldw	r2,-60(fp)
8112ff38:	10001e26 	beq	r2,zero,8112ffb4 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
8112ff3c:	e0fffe17 	ldw	r3,-8(fp)
8112ff40:	e0bff117 	ldw	r2,-60(fp)
8112ff44:	1880022e 	bgeu	r3,r2,8112ff50 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
8112ff48:	e0bffe17 	ldw	r2,-8(fp)
8112ff4c:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8112ff50:	e0bffc17 	ldw	r2,-16(fp)
8112ff54:	10c01104 	addi	r3,r2,68
8112ff58:	e0bff417 	ldw	r2,-48(fp)
8112ff5c:	1885883a 	add	r2,r3,r2
8112ff60:	e1bff117 	ldw	r6,-60(fp)
8112ff64:	100b883a 	mov	r5,r2
8112ff68:	e13ff017 	ldw	r4,-64(fp)
8112ff6c:	110d4800 	call	8110d480 <memcpy>
      ptr   += n;
8112ff70:	e0fff017 	ldw	r3,-64(fp)
8112ff74:	e0bff117 	ldw	r2,-60(fp)
8112ff78:	1885883a 	add	r2,r3,r2
8112ff7c:	e0bff015 	stw	r2,-64(fp)
      space -= n;
8112ff80:	e0fffe17 	ldw	r3,-8(fp)
8112ff84:	e0bff117 	ldw	r2,-60(fp)
8112ff88:	1885c83a 	sub	r2,r3,r2
8112ff8c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
8112ff90:	e0fff417 	ldw	r3,-48(fp)
8112ff94:	e0bff117 	ldw	r2,-60(fp)
8112ff98:	1885883a 	add	r2,r3,r2
8112ff9c:	10c1ffcc 	andi	r3,r2,2047
8112ffa0:	e0bffc17 	ldw	r2,-16(fp)
8112ffa4:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
8112ffa8:	e0bffe17 	ldw	r2,-8(fp)
8112ffac:	00bfcf16 	blt	zero,r2,8112feec <__reset+0xfb10feec>
8112ffb0:	00000106 	br	8112ffb8 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
8112ffb4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
8112ffb8:	e0fff017 	ldw	r3,-64(fp)
8112ffbc:	e0bffd17 	ldw	r2,-12(fp)
8112ffc0:	18802e1e 	bne	r3,r2,8113007c <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
8112ffc4:	e0bfff17 	ldw	r2,-4(fp)
8112ffc8:	1090000c 	andi	r2,r2,16384
8112ffcc:	10002d1e 	bne	r2,zero,81130084 <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
8112ffd0:	d0a07943 	ldbu	r2,-32283(gp)
8112ffd4:	10803fcc 	andi	r2,r2,255
8112ffd8:	10800058 	cmpnei	r2,r2,1
8112ffdc:	1000161e 	bne	r2,zero,81130038 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
8112ffe0:	e0bffc17 	ldw	r2,-16(fp)
8112ffe4:	10800c17 	ldw	r2,48(r2)
8112ffe8:	e0bff215 	stw	r2,-56(fp)
8112ffec:	00800144 	movi	r2,5
8112fff0:	e0bff98d 	sth	r2,-26(fp)
8112fff4:	00bfe0c4 	movi	r2,-125
8112fff8:	e0bffa05 	stb	r2,-24(fp)
8112fffc:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81130000:	d0a07943 	ldbu	r2,-32283(gp)
81130004:	10803fcc 	andi	r2,r2,255
81130008:	10001526 	beq	r2,zero,81130060 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113000c:	e0fff98b 	ldhu	r3,-26(fp)
81130010:	e13ffa03 	ldbu	r4,-24(fp)
81130014:	e17ffa8b 	ldhu	r5,-22(fp)
81130018:	e0bffb44 	addi	r2,fp,-19
8113001c:	d8800015 	stw	r2,0(sp)
81130020:	280f883a 	mov	r7,r5
81130024:	200d883a 	mov	r6,r4
81130028:	180b883a 	mov	r5,r3
8113002c:	e13ff217 	ldw	r4,-56(fp)
81130030:	112545c0 	call	8112545c <OSFlagPend>
81130034:	00000a06 	br	81130060 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81130038:	0001883a 	nop
8113003c:	e0bffc17 	ldw	r2,-16(fp)
81130040:	10c00d17 	ldw	r3,52(r2)
81130044:	e0bff317 	ldw	r2,-52(fp)
81130048:	1880051e 	bne	r3,r2,81130060 <altera_avalon_jtag_uart_read+0x1c8>
8113004c:	e0bffc17 	ldw	r2,-16(fp)
81130050:	10c00917 	ldw	r3,36(r2)
81130054:	e0bffc17 	ldw	r2,-16(fp)
81130058:	10800117 	ldw	r2,4(r2)
8113005c:	18bff736 	bltu	r3,r2,8113003c <__reset+0xfb11003c>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
81130060:	e0bffc17 	ldw	r2,-16(fp)
81130064:	10c00d17 	ldw	r3,52(r2)
81130068:	e0bff317 	ldw	r2,-52(fp)
8113006c:	18800726 	beq	r3,r2,8113008c <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
81130070:	e0bffe17 	ldw	r2,-8(fp)
81130074:	00bf9d16 	blt	zero,r2,8112feec <__reset+0xfb10feec>
81130078:	00000506 	br	81130090 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
8113007c:	0001883a 	nop
81130080:	00000306 	br	81130090 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
81130084:	0001883a 	nop
81130088:	00000106 	br	81130090 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
8113008c:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81130090:	e0bffc17 	ldw	r2,-16(fp)
81130094:	10800a17 	ldw	r2,40(r2)
81130098:	1009883a 	mov	r4,r2
8113009c:	11293540 	call	81129354 <OSSemPost>

  if (ptr != buffer)
811300a0:	e0fff017 	ldw	r3,-64(fp)
811300a4:	e0bffd17 	ldw	r2,-12(fp)
811300a8:	18801826 	beq	r3,r2,8113010c <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811300ac:	0005303a 	rdctl	r2,status
811300b0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811300b4:	e0fff717 	ldw	r3,-36(fp)
811300b8:	00bfff84 	movi	r2,-2
811300bc:	1884703a 	and	r2,r3,r2
811300c0:	1001703a 	wrctl	status,r2
  
  return context;
811300c4:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
811300c8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811300cc:	e0bffc17 	ldw	r2,-16(fp)
811300d0:	10800817 	ldw	r2,32(r2)
811300d4:	10c00054 	ori	r3,r2,1
811300d8:	e0bffc17 	ldw	r2,-16(fp)
811300dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811300e0:	e0bffc17 	ldw	r2,-16(fp)
811300e4:	10800017 	ldw	r2,0(r2)
811300e8:	10800104 	addi	r2,r2,4
811300ec:	1007883a 	mov	r3,r2
811300f0:	e0bffc17 	ldw	r2,-16(fp)
811300f4:	10800817 	ldw	r2,32(r2)
811300f8:	18800035 	stwio	r2,0(r3)
811300fc:	e0bff617 	ldw	r2,-40(fp)
81130100:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81130104:	e0bff517 	ldw	r2,-44(fp)
81130108:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
8113010c:	e0fff017 	ldw	r3,-64(fp)
81130110:	e0bffd17 	ldw	r2,-12(fp)
81130114:	18800426 	beq	r3,r2,81130128 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
81130118:	e0fff017 	ldw	r3,-64(fp)
8113011c:	e0bffd17 	ldw	r2,-12(fp)
81130120:	1885c83a 	sub	r2,r3,r2
81130124:	00000606 	br	81130140 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
81130128:	e0bfff17 	ldw	r2,-4(fp)
8113012c:	1090000c 	andi	r2,r2,16384
81130130:	10000226 	beq	r2,zero,8113013c <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
81130134:	00bffd44 	movi	r2,-11
81130138:	00000106 	br	81130140 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
8113013c:	00bffec4 	movi	r2,-5
}
81130140:	e037883a 	mov	sp,fp
81130144:	dfc00117 	ldw	ra,4(sp)
81130148:	df000017 	ldw	fp,0(sp)
8113014c:	dec00204 	addi	sp,sp,8
81130150:	f800283a 	ret

81130154 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81130154:	deffed04 	addi	sp,sp,-76
81130158:	dfc01215 	stw	ra,72(sp)
8113015c:	df001115 	stw	fp,68(sp)
81130160:	df001104 	addi	fp,sp,68
81130164:	e13ffc15 	stw	r4,-16(fp)
81130168:	e17ffd15 	stw	r5,-12(fp)
8113016c:	e1bffe15 	stw	r6,-8(fp)
81130170:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81130174:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
81130178:	e0bffd17 	ldw	r2,-12(fp)
8113017c:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
81130180:	e0bffc17 	ldw	r2,-16(fp)
81130184:	10800b17 	ldw	r2,44(r2)
81130188:	e0bff815 	stw	r2,-32(fp)
8113018c:	e03ff90d 	sth	zero,-28(fp)
81130190:	e0bff90b 	ldhu	r2,-28(fp)
81130194:	e0fffb44 	addi	r3,fp,-19
81130198:	180d883a 	mov	r6,r3
8113019c:	100b883a 	mov	r5,r2
811301a0:	e13ff817 	ldw	r4,-32(fp)
811301a4:	1128fdc0 	call	81128fdc <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
811301a8:	00003706 	br	81130288 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
811301ac:	e0bffc17 	ldw	r2,-16(fp)
811301b0:	10800f17 	ldw	r2,60(r2)
811301b4:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
811301b8:	e0bffc17 	ldw	r2,-16(fp)
811301bc:	10801017 	ldw	r2,64(r2)
811301c0:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
811301c4:	e0fff417 	ldw	r3,-48(fp)
811301c8:	e0bff017 	ldw	r2,-64(fp)
811301cc:	1880062e 	bgeu	r3,r2,811301e8 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
811301d0:	e0fff017 	ldw	r3,-64(fp)
811301d4:	e0bff417 	ldw	r2,-48(fp)
811301d8:	1885c83a 	sub	r2,r3,r2
811301dc:	10bfffc4 	addi	r2,r2,-1
811301e0:	e0bff115 	stw	r2,-60(fp)
811301e4:	00000b06 	br	81130214 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
811301e8:	e0bff017 	ldw	r2,-64(fp)
811301ec:	10000526 	beq	r2,zero,81130204 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
811301f0:	00c20004 	movi	r3,2048
811301f4:	e0bff417 	ldw	r2,-48(fp)
811301f8:	1885c83a 	sub	r2,r3,r2
811301fc:	e0bff115 	stw	r2,-60(fp)
81130200:	00000406 	br	81130214 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81130204:	00c1ffc4 	movi	r3,2047
81130208:	e0bff417 	ldw	r2,-48(fp)
8113020c:	1885c83a 	sub	r2,r3,r2
81130210:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81130214:	e0bff117 	ldw	r2,-60(fp)
81130218:	10001e26 	beq	r2,zero,81130294 <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
8113021c:	e0fffe17 	ldw	r3,-8(fp)
81130220:	e0bff117 	ldw	r2,-60(fp)
81130224:	1880022e 	bgeu	r3,r2,81130230 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
81130228:	e0bffe17 	ldw	r2,-8(fp)
8113022c:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81130230:	e0bffc17 	ldw	r2,-16(fp)
81130234:	10c21104 	addi	r3,r2,2116
81130238:	e0bff417 	ldw	r2,-48(fp)
8113023c:	1885883a 	add	r2,r3,r2
81130240:	e1bff117 	ldw	r6,-60(fp)
81130244:	e17ffd17 	ldw	r5,-12(fp)
81130248:	1009883a 	mov	r4,r2
8113024c:	110d4800 	call	8110d480 <memcpy>
      ptr   += n;
81130250:	e0fffd17 	ldw	r3,-12(fp)
81130254:	e0bff117 	ldw	r2,-60(fp)
81130258:	1885883a 	add	r2,r3,r2
8113025c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81130260:	e0fffe17 	ldw	r3,-8(fp)
81130264:	e0bff117 	ldw	r2,-60(fp)
81130268:	1885c83a 	sub	r2,r3,r2
8113026c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81130270:	e0fff417 	ldw	r3,-48(fp)
81130274:	e0bff117 	ldw	r2,-60(fp)
81130278:	1885883a 	add	r2,r3,r2
8113027c:	10c1ffcc 	andi	r3,r2,2047
81130280:	e0bffc17 	ldw	r2,-16(fp)
81130284:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
81130288:	e0bffe17 	ldw	r2,-8(fp)
8113028c:	00bfc716 	blt	zero,r2,811301ac <__reset+0xfb1101ac>
81130290:	00000106 	br	81130298 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
81130294:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81130298:	0005303a 	rdctl	r2,status
8113029c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811302a0:	e0fff717 	ldw	r3,-36(fp)
811302a4:	00bfff84 	movi	r2,-2
811302a8:	1884703a 	and	r2,r3,r2
811302ac:	1001703a 	wrctl	status,r2
  
  return context;
811302b0:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
811302b4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811302b8:	e0bffc17 	ldw	r2,-16(fp)
811302bc:	10800817 	ldw	r2,32(r2)
811302c0:	10c00094 	ori	r3,r2,2
811302c4:	e0bffc17 	ldw	r2,-16(fp)
811302c8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811302cc:	e0bffc17 	ldw	r2,-16(fp)
811302d0:	10800017 	ldw	r2,0(r2)
811302d4:	10800104 	addi	r2,r2,4
811302d8:	1007883a 	mov	r3,r2
811302dc:	e0bffc17 	ldw	r2,-16(fp)
811302e0:	10800817 	ldw	r2,32(r2)
811302e4:	18800035 	stwio	r2,0(r3)
811302e8:	e0bff617 	ldw	r2,-40(fp)
811302ec:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811302f0:	e0bff317 	ldw	r2,-52(fp)
811302f4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
811302f8:	e0bffe17 	ldw	r2,-8(fp)
811302fc:	00802a0e 	bge	zero,r2,811303a8 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
81130300:	e0bfff17 	ldw	r2,-4(fp)
81130304:	1090000c 	andi	r2,r2,16384
81130308:	10002a1e 	bne	r2,zero,811303b4 <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
8113030c:	d0a07943 	ldbu	r2,-32283(gp)
81130310:	10803fcc 	andi	r2,r2,255
81130314:	10800058 	cmpnei	r2,r2,1
81130318:	1000161e 	bne	r2,zero,81130374 <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
8113031c:	e0bffc17 	ldw	r2,-16(fp)
81130320:	10800c17 	ldw	r2,48(r2)
81130324:	e0bff515 	stw	r2,-44(fp)
81130328:	00800184 	movi	r2,6
8113032c:	e0bff98d 	sth	r2,-26(fp)
81130330:	00bfe0c4 	movi	r2,-125
81130334:	e0bffa05 	stb	r2,-24(fp)
81130338:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113033c:	d0a07943 	ldbu	r2,-32283(gp)
81130340:	10803fcc 	andi	r2,r2,255
81130344:	10001526 	beq	r2,zero,8113039c <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81130348:	e0fff98b 	ldhu	r3,-26(fp)
8113034c:	e13ffa03 	ldbu	r4,-24(fp)
81130350:	e17ffa8b 	ldhu	r5,-22(fp)
81130354:	e0bffb04 	addi	r2,fp,-20
81130358:	d8800015 	stw	r2,0(sp)
8113035c:	280f883a 	mov	r7,r5
81130360:	200d883a 	mov	r6,r4
81130364:	180b883a 	mov	r5,r3
81130368:	e13ff517 	ldw	r4,-44(fp)
8113036c:	112545c0 	call	8112545c <OSFlagPend>
81130370:	00000a06 	br	8113039c <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81130374:	0001883a 	nop
81130378:	e0bffc17 	ldw	r2,-16(fp)
8113037c:	10c01017 	ldw	r3,64(r2)
81130380:	e0bff017 	ldw	r2,-64(fp)
81130384:	1880051e 	bne	r3,r2,8113039c <altera_avalon_jtag_uart_write+0x248>
81130388:	e0bffc17 	ldw	r2,-16(fp)
8113038c:	10c00917 	ldw	r3,36(r2)
81130390:	e0bffc17 	ldw	r2,-16(fp)
81130394:	10800117 	ldw	r2,4(r2)
81130398:	18bff736 	bltu	r3,r2,81130378 <__reset+0xfb110378>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
8113039c:	e0bffc17 	ldw	r2,-16(fp)
811303a0:	10800917 	ldw	r2,36(r2)
811303a4:	1000051e 	bne	r2,zero,811303bc <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
811303a8:	e0bffe17 	ldw	r2,-8(fp)
811303ac:	00bfb616 	blt	zero,r2,81130288 <__reset+0xfb110288>
811303b0:	00000306 	br	811303c0 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
811303b4:	0001883a 	nop
811303b8:	00000106 	br	811303c0 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
811303bc:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
811303c0:	e0bffc17 	ldw	r2,-16(fp)
811303c4:	10800b17 	ldw	r2,44(r2)
811303c8:	1009883a 	mov	r4,r2
811303cc:	11293540 	call	81129354 <OSSemPost>

  if (ptr != start)
811303d0:	e0fffd17 	ldw	r3,-12(fp)
811303d4:	e0bff217 	ldw	r2,-56(fp)
811303d8:	18800426 	beq	r3,r2,811303ec <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
811303dc:	e0fffd17 	ldw	r3,-12(fp)
811303e0:	e0bff217 	ldw	r2,-56(fp)
811303e4:	1885c83a 	sub	r2,r3,r2
811303e8:	00000606 	br	81130404 <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
811303ec:	e0bfff17 	ldw	r2,-4(fp)
811303f0:	1090000c 	andi	r2,r2,16384
811303f4:	10000226 	beq	r2,zero,81130400 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
811303f8:	00bffd44 	movi	r2,-11
811303fc:	00000106 	br	81130404 <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81130400:	00bffec4 	movi	r2,-5
}
81130404:	e037883a 	mov	sp,fp
81130408:	dfc00117 	ldw	ra,4(sp)
8113040c:	df000017 	ldw	fp,0(sp)
81130410:	dec00204 	addi	sp,sp,8
81130414:	f800283a 	ret

81130418 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81130418:	defffe04 	addi	sp,sp,-8
8113041c:	dfc00115 	stw	ra,4(sp)
81130420:	df000015 	stw	fp,0(sp)
81130424:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81130428:	d0a01517 	ldw	r2,-32684(gp)
8113042c:	10000326 	beq	r2,zero,8113043c <alt_get_errno+0x24>
81130430:	d0a01517 	ldw	r2,-32684(gp)
81130434:	103ee83a 	callr	r2
81130438:	00000106 	br	81130440 <alt_get_errno+0x28>
8113043c:	d0a06804 	addi	r2,gp,-32352
}
81130440:	e037883a 	mov	sp,fp
81130444:	dfc00117 	ldw	ra,4(sp)
81130448:	df000017 	ldw	fp,0(sp)
8113044c:	dec00204 	addi	sp,sp,8
81130450:	f800283a 	ret

81130454 <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
81130454:	defffc04 	addi	sp,sp,-16
81130458:	df000315 	stw	fp,12(sp)
8113045c:	df000304 	addi	fp,sp,12
81130460:	e13ffe15 	stw	r4,-8(fp)
81130464:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81130468:	e0bffe17 	ldw	r2,-8(fp)
8113046c:	10800317 	ldw	r2,12(r2)
81130470:	10800037 	ldwio	r2,0(r2)
81130474:	1080040c 	andi	r2,r2,16
81130478:	10000226 	beq	r2,zero,81130484 <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
8113047c:	00bffc04 	movi	r2,-16
81130480:	00003906 	br	81130568 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81130484:	e0bffe17 	ldw	r2,-8(fp)
81130488:	10800317 	ldw	r2,12(r2)
8113048c:	10800404 	addi	r2,r2,16
81130490:	e0fffe17 	ldw	r3,-8(fp)
81130494:	18c00317 	ldw	r3,12(r3)
81130498:	18c00404 	addi	r3,r3,16
8113049c:	19000037 	ldwio	r4,0(r3)
811304a0:	00fff7c4 	movi	r3,-33
811304a4:	20c6703a 	and	r3,r4,r3
811304a8:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
811304ac:	e0bffe17 	ldw	r2,-8(fp)
811304b0:	10800317 	ldw	r2,12(r2)
811304b4:	00c03fc4 	movi	r3,255
811304b8:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
811304bc:	e0bffe17 	ldw	r2,-8(fp)
811304c0:	10800317 	ldw	r2,12(r2)
811304c4:	10800804 	addi	r2,r2,32
811304c8:	e0ffff17 	ldw	r3,-4(fp)
811304cc:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
811304d0:	e0bffe17 	ldw	r2,-8(fp)
811304d4:	10800917 	ldw	r2,36(r2)
811304d8:	10001126 	beq	r2,zero,81130520 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811304dc:	e0bffe17 	ldw	r2,-8(fp)
811304e0:	10800317 	ldw	r2,12(r2)
811304e4:	10800404 	addi	r2,r2,16
811304e8:	10800037 	ldwio	r2,0(r2)
811304ec:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
811304f0:	e0bffe17 	ldw	r2,-8(fp)
811304f4:	10c00b17 	ldw	r3,44(r2)
811304f8:	e0bffd17 	ldw	r2,-12(fp)
811304fc:	1884b03a 	or	r2,r3,r2
81130500:	10801814 	ori	r2,r2,96
81130504:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81130508:	e0bffe17 	ldw	r2,-8(fp)
8113050c:	10800317 	ldw	r2,12(r2)
81130510:	10800404 	addi	r2,r2,16
81130514:	e0fffd17 	ldw	r3,-12(fp)
81130518:	10c00035 	stwio	r3,0(r2)
8113051c:	00001106 	br	81130564 <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81130520:	e0bffe17 	ldw	r2,-8(fp)
81130524:	10800317 	ldw	r2,12(r2)
81130528:	10800404 	addi	r2,r2,16
8113052c:	10800037 	ldwio	r2,0(r2)
81130530:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
81130534:	e0bffd17 	ldw	r2,-12(fp)
81130538:	10801814 	ori	r2,r2,96
8113053c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
81130540:	e0fffd17 	ldw	r3,-12(fp)
81130544:	00bffbc4 	movi	r2,-17
81130548:	1884703a 	and	r2,r3,r2
8113054c:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81130550:	e0bffe17 	ldw	r2,-8(fp)
81130554:	10800317 	ldw	r2,12(r2)
81130558:	10800404 	addi	r2,r2,16
8113055c:	e0fffd17 	ldw	r3,-12(fp)
81130560:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
81130564:	0005883a 	mov	r2,zero
}
81130568:	e037883a 	mov	sp,fp
8113056c:	df000017 	ldw	fp,0(sp)
81130570:	dec00104 	addi	sp,sp,4
81130574:	f800283a 	ret

81130578 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
81130578:	defffc04 	addi	sp,sp,-16
8113057c:	df000315 	stw	fp,12(sp)
81130580:	df000304 	addi	fp,sp,12
81130584:	e13ffe15 	stw	r4,-8(fp)
81130588:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
8113058c:	0001883a 	nop
81130590:	e0bffe17 	ldw	r2,-8(fp)
81130594:	10800317 	ldw	r2,12(r2)
81130598:	10800037 	ldwio	r2,0(r2)
8113059c:	1080040c 	andi	r2,r2,16
811305a0:	103ffb1e 	bne	r2,zero,81130590 <__reset+0xfb110590>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
811305a4:	e0bffe17 	ldw	r2,-8(fp)
811305a8:	10800317 	ldw	r2,12(r2)
811305ac:	10800404 	addi	r2,r2,16
811305b0:	e0fffe17 	ldw	r3,-8(fp)
811305b4:	18c00317 	ldw	r3,12(r3)
811305b8:	18c00404 	addi	r3,r3,16
811305bc:	19000037 	ldwio	r4,0(r3)
811305c0:	00fff7c4 	movi	r3,-33
811305c4:	20c6703a 	and	r3,r4,r3
811305c8:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
811305cc:	e0bffe17 	ldw	r2,-8(fp)
811305d0:	10800317 	ldw	r2,12(r2)
811305d4:	00c03fc4 	movi	r3,255
811305d8:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
811305dc:	e0bffe17 	ldw	r2,-8(fp)
811305e0:	10800317 	ldw	r2,12(r2)
811305e4:	10800804 	addi	r2,r2,32
811305e8:	e0ffff17 	ldw	r3,-4(fp)
811305ec:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
811305f0:	e0bffe17 	ldw	r2,-8(fp)
811305f4:	10800317 	ldw	r2,12(r2)
811305f8:	10800404 	addi	r2,r2,16
811305fc:	e0fffe17 	ldw	r3,-8(fp)
81130600:	18c00317 	ldw	r3,12(r3)
81130604:	18c00404 	addi	r3,r3,16
81130608:	18c00037 	ldwio	r3,0(r3)
8113060c:	18c01814 	ori	r3,r3,96
81130610:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
81130614:	0001883a 	nop
81130618:	e0bffe17 	ldw	r2,-8(fp)
8113061c:	10800317 	ldw	r2,12(r2)
81130620:	10800037 	ldwio	r2,0(r2)
81130624:	1080040c 	andi	r2,r2,16
81130628:	103ffb1e 	bne	r2,zero,81130618 <__reset+0xfb110618>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
8113062c:	e0bffe17 	ldw	r2,-8(fp)
81130630:	10800317 	ldw	r2,12(r2)
81130634:	10800404 	addi	r2,r2,16
81130638:	e0fffe17 	ldw	r3,-8(fp)
8113063c:	18c00317 	ldw	r3,12(r3)
81130640:	18c00404 	addi	r3,r3,16
81130644:	19000037 	ldwio	r4,0(r3)
81130648:	00fff7c4 	movi	r3,-33
8113064c:	20c6703a 	and	r3,r4,r3
81130650:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
81130654:	e0bffe17 	ldw	r2,-8(fp)
81130658:	10800317 	ldw	r2,12(r2)
8113065c:	10800037 	ldwio	r2,0(r2)
81130660:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
81130664:	e0bffe17 	ldw	r2,-8(fp)
81130668:	10800317 	ldw	r2,12(r2)
8113066c:	00c03fc4 	movi	r3,255
81130670:	10c00035 	stwio	r3,0(r2)

  return status;
81130674:	e0bffd03 	ldbu	r2,-12(fp)
}
81130678:	e037883a 	mov	sp,fp
8113067c:	df000017 	ldw	fp,0(sp)
81130680:	dec00104 	addi	sp,sp,4
81130684:	f800283a 	ret

81130688 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
81130688:	defff404 	addi	sp,sp,-48
8113068c:	dfc00b15 	stw	ra,44(sp)
81130690:	df000a15 	stw	fp,40(sp)
81130694:	df000a04 	addi	fp,sp,40
81130698:	e13ffb15 	stw	r4,-20(fp)
8113069c:	e17ffc15 	stw	r5,-16(fp)
811306a0:	e1bffd15 	stw	r6,-12(fp)
811306a4:	e1fffe15 	stw	r7,-8(fp)
811306a8:	e0800217 	ldw	r2,8(fp)
811306ac:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
811306b0:	e0bfff0b 	ldhu	r2,-4(fp)
811306b4:	d8000415 	stw	zero,16(sp)
811306b8:	d8000315 	stw	zero,12(sp)
811306bc:	e0c00417 	ldw	r3,16(fp)
811306c0:	d8c00215 	stw	r3,8(sp)
811306c4:	e0c00317 	ldw	r3,12(fp)
811306c8:	d8c00115 	stw	r3,4(sp)
811306cc:	d8800015 	stw	r2,0(sp)
811306d0:	e1fffe17 	ldw	r7,-8(fp)
811306d4:	e1bffd17 	ldw	r6,-12(fp)
811306d8:	e17ffc17 	ldw	r5,-16(fp)
811306dc:	e13ffb17 	ldw	r4,-20(fp)
811306e0:	11306fc0 	call	811306fc <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
811306e4:	0001883a 	nop
811306e8:	e037883a 	mov	sp,fp
811306ec:	dfc00117 	ldw	ra,4(sp)
811306f0:	df000017 	ldw	fp,0(sp)
811306f4:	dec00204 	addi	sp,sp,8
811306f8:	f800283a 	ret

811306fc <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
811306fc:	defff204 	addi	sp,sp,-56
81130700:	dfc00d15 	stw	ra,52(sp)
81130704:	df000c15 	stw	fp,48(sp)
81130708:	df000c04 	addi	fp,sp,48
8113070c:	e13ffb15 	stw	r4,-20(fp)
81130710:	e17ffc15 	stw	r5,-16(fp)
81130714:	e1bffd15 	stw	r6,-12(fp)
81130718:	e1fffe15 	stw	r7,-8(fp)
8113071c:	e0800217 	ldw	r2,8(fp)
81130720:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81130724:	e0bfff0b 	ldhu	r2,-4(fp)
81130728:	d8000615 	stw	zero,24(sp)
8113072c:	e0c00617 	ldw	r3,24(fp)
81130730:	d8c00515 	stw	r3,20(sp)
81130734:	e0c00517 	ldw	r3,20(fp)
81130738:	d8c00415 	stw	r3,16(sp)
8113073c:	e0c00417 	ldw	r3,16(fp)
81130740:	d8c00315 	stw	r3,12(sp)
81130744:	e0c00317 	ldw	r3,12(fp)
81130748:	d8c00215 	stw	r3,8(sp)
8113074c:	d8000115 	stw	zero,4(sp)
81130750:	d8800015 	stw	r2,0(sp)
81130754:	e1fffe17 	ldw	r7,-8(fp)
81130758:	e1bffd17 	ldw	r6,-12(fp)
8113075c:	e17ffc17 	ldw	r5,-16(fp)
81130760:	e13ffb17 	ldw	r4,-20(fp)
81130764:	1130c900 	call	81130c90 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
81130768:	0001883a 	nop
8113076c:	e037883a 	mov	sp,fp
81130770:	dfc00117 	ldw	ra,4(sp)
81130774:	df000017 	ldw	fp,0(sp)
81130778:	dec00204 	addi	sp,sp,8
8113077c:	f800283a 	ret

81130780 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
81130780:	defff804 	addi	sp,sp,-32
81130784:	dfc00715 	stw	ra,28(sp)
81130788:	df000615 	stw	fp,24(sp)
8113078c:	df000604 	addi	fp,sp,24
81130790:	e13ffc15 	stw	r4,-16(fp)
81130794:	e17ffd15 	stw	r5,-12(fp)
81130798:	e1bffe15 	stw	r6,-8(fp)
8113079c:	3805883a 	mov	r2,r7
811307a0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
811307a4:	e0ffff0b 	ldhu	r3,-4(fp)
811307a8:	d8000115 	stw	zero,4(sp)
811307ac:	e0800217 	ldw	r2,8(fp)
811307b0:	d8800015 	stw	r2,0(sp)
811307b4:	180f883a 	mov	r7,r3
811307b8:	e1bffe17 	ldw	r6,-8(fp)
811307bc:	e17ffd17 	ldw	r5,-12(fp)
811307c0:	e13ffc17 	ldw	r4,-16(fp)
811307c4:	11307e00 	call	811307e0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
811307c8:	0001883a 	nop
811307cc:	e037883a 	mov	sp,fp
811307d0:	dfc00117 	ldw	ra,4(sp)
811307d4:	df000017 	ldw	fp,0(sp)
811307d8:	dec00204 	addi	sp,sp,8
811307dc:	f800283a 	ret

811307e0 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
811307e0:	defff304 	addi	sp,sp,-52
811307e4:	dfc00c15 	stw	ra,48(sp)
811307e8:	df000b15 	stw	fp,44(sp)
811307ec:	df000b04 	addi	fp,sp,44
811307f0:	e13ffc15 	stw	r4,-16(fp)
811307f4:	e17ffd15 	stw	r5,-12(fp)
811307f8:	e1bffe15 	stw	r6,-8(fp)
811307fc:	3805883a 	mov	r2,r7
81130800:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81130804:	e0bfff0b 	ldhu	r2,-4(fp)
81130808:	d8000615 	stw	zero,24(sp)
8113080c:	e0c00317 	ldw	r3,12(fp)
81130810:	d8c00515 	stw	r3,20(sp)
81130814:	d8000415 	stw	zero,16(sp)
81130818:	e0c00217 	ldw	r3,8(fp)
8113081c:	d8c00315 	stw	r3,12(sp)
81130820:	d8000215 	stw	zero,8(sp)
81130824:	d8000115 	stw	zero,4(sp)
81130828:	d8800015 	stw	r2,0(sp)
8113082c:	e1fffe17 	ldw	r7,-8(fp)
81130830:	000d883a 	mov	r6,zero
81130834:	e17ffd17 	ldw	r5,-12(fp)
81130838:	e13ffc17 	ldw	r4,-16(fp)
8113083c:	1130c900 	call	81130c90 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
81130840:	0001883a 	nop
81130844:	e037883a 	mov	sp,fp
81130848:	dfc00117 	ldw	ra,4(sp)
8113084c:	df000017 	ldw	fp,0(sp)
81130850:	dec00204 	addi	sp,sp,8
81130854:	f800283a 	ret

81130858 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
81130858:	defff404 	addi	sp,sp,-48
8113085c:	dfc00b15 	stw	ra,44(sp)
81130860:	df000a15 	stw	fp,40(sp)
81130864:	df000a04 	addi	fp,sp,40
81130868:	e13ffb15 	stw	r4,-20(fp)
8113086c:	e17ffc15 	stw	r5,-16(fp)
81130870:	e1bffd15 	stw	r6,-12(fp)
81130874:	3807883a 	mov	r3,r7
81130878:	e0800517 	ldw	r2,20(fp)
8113087c:	e0fffe0d 	sth	r3,-8(fp)
81130880:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
81130884:	e0fffe0b 	ldhu	r3,-8(fp)
81130888:	e0bfff03 	ldbu	r2,-4(fp)
8113088c:	d8800415 	stw	r2,16(sp)
81130890:	d8000315 	stw	zero,12(sp)
81130894:	e0800417 	ldw	r2,16(fp)
81130898:	d8800215 	stw	r2,8(sp)
8113089c:	e0800317 	ldw	r2,12(fp)
811308a0:	d8800115 	stw	r2,4(sp)
811308a4:	e0800217 	ldw	r2,8(fp)
811308a8:	d8800015 	stw	r2,0(sp)
811308ac:	180f883a 	mov	r7,r3
811308b0:	e1bffd17 	ldw	r6,-12(fp)
811308b4:	e17ffc17 	ldw	r5,-16(fp)
811308b8:	e13ffb17 	ldw	r4,-20(fp)
811308bc:	11308d80 	call	811308d8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
811308c0:	0001883a 	nop
811308c4:	e037883a 	mov	sp,fp
811308c8:	dfc00117 	ldw	ra,4(sp)
811308cc:	df000017 	ldw	fp,0(sp)
811308d0:	dec00204 	addi	sp,sp,8
811308d4:	f800283a 	ret

811308d8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
811308d8:	defff204 	addi	sp,sp,-56
811308dc:	dfc00d15 	stw	ra,52(sp)
811308e0:	df000c15 	stw	fp,48(sp)
811308e4:	df000c04 	addi	fp,sp,48
811308e8:	e13ffb15 	stw	r4,-20(fp)
811308ec:	e17ffc15 	stw	r5,-16(fp)
811308f0:	e1bffd15 	stw	r6,-12(fp)
811308f4:	3807883a 	mov	r3,r7
811308f8:	e0800617 	ldw	r2,24(fp)
811308fc:	e0fffe0d 	sth	r3,-8(fp)
81130900:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
81130904:	e0bffe0b 	ldhu	r2,-8(fp)
81130908:	e0ffff03 	ldbu	r3,-4(fp)
8113090c:	d8c00615 	stw	r3,24(sp)
81130910:	d8000515 	stw	zero,20(sp)
81130914:	e0c00517 	ldw	r3,20(fp)
81130918:	d8c00415 	stw	r3,16(sp)
8113091c:	e0c00317 	ldw	r3,12(fp)
81130920:	d8c00315 	stw	r3,12(sp)
81130924:	e0c00217 	ldw	r3,8(fp)
81130928:	d8c00215 	stw	r3,8(sp)
8113092c:	e0c00417 	ldw	r3,16(fp)
81130930:	d8c00115 	stw	r3,4(sp)
81130934:	d8800015 	stw	r2,0(sp)
81130938:	000f883a 	mov	r7,zero
8113093c:	e1bffd17 	ldw	r6,-12(fp)
81130940:	e17ffc17 	ldw	r5,-16(fp)
81130944:	e13ffb17 	ldw	r4,-20(fp)
81130948:	1130c900 	call	81130c90 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
8113094c:	0001883a 	nop
81130950:	e037883a 	mov	sp,fp
81130954:	dfc00117 	ldw	ra,4(sp)
81130958:	df000017 	ldw	fp,0(sp)
8113095c:	dec00204 	addi	sp,sp,8
81130960:	f800283a 	ret

81130964 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
81130964:	defffb04 	addi	sp,sp,-20
81130968:	df000415 	stw	fp,16(sp)
8113096c:	df000404 	addi	fp,sp,16
81130970:	e13ffc15 	stw	r4,-16(fp)
81130974:	e17ffd15 	stw	r5,-12(fp)
81130978:	e1bffe15 	stw	r6,-8(fp)
8113097c:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
81130980:	e0bffc17 	ldw	r2,-16(fp)
81130984:	e0fffd17 	ldw	r3,-12(fp)
81130988:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
8113098c:	e0bffc17 	ldw	r2,-16(fp)
81130990:	e0ffff17 	ldw	r3,-4(fp)
81130994:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
81130998:	e0bffc17 	ldw	r2,-16(fp)
8113099c:	e0fffe17 	ldw	r3,-8(fp)
811309a0:	10c00b15 	stw	r3,44(r2)
}
811309a4:	0001883a 	nop
811309a8:	e037883a 	mov	sp,fp
811309ac:	df000017 	ldw	fp,0(sp)
811309b0:	dec00104 	addi	sp,sp,4
811309b4:	f800283a 	ret

811309b8 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
811309b8:	defffd04 	addi	sp,sp,-12
811309bc:	df000215 	stw	fp,8(sp)
811309c0:	df000204 	addi	fp,sp,8
811309c4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
811309c8:	e0bfff17 	ldw	r2,-4(fp)
811309cc:	10800317 	ldw	r2,12(r2)
811309d0:	10800404 	addi	r2,r2,16
811309d4:	10800037 	ldwio	r2,0(r2)
811309d8:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
811309dc:	e0bffe17 	ldw	r2,-8(fp)
811309e0:	10800814 	ori	r2,r2,32
811309e4:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
811309e8:	e0bfff17 	ldw	r2,-4(fp)
811309ec:	10800317 	ldw	r2,12(r2)
811309f0:	10800404 	addi	r2,r2,16
811309f4:	e0fffe17 	ldw	r3,-8(fp)
811309f8:	10c00035 	stwio	r3,0(r2)
}
811309fc:	0001883a 	nop
81130a00:	e037883a 	mov	sp,fp
81130a04:	df000017 	ldw	fp,0(sp)
81130a08:	dec00104 	addi	sp,sp,4
81130a0c:	f800283a 	ret

81130a10 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
81130a10:	defffd04 	addi	sp,sp,-12
81130a14:	df000215 	stw	fp,8(sp)
81130a18:	df000204 	addi	fp,sp,8
81130a1c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81130a20:	e0bfff17 	ldw	r2,-4(fp)
81130a24:	10800317 	ldw	r2,12(r2)
81130a28:	10800404 	addi	r2,r2,16
81130a2c:	10800037 	ldwio	r2,0(r2)
81130a30:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
81130a34:	e0fffe17 	ldw	r3,-8(fp)
81130a38:	00bff7c4 	movi	r2,-33
81130a3c:	1884703a 	and	r2,r3,r2
81130a40:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81130a44:	e0bfff17 	ldw	r2,-4(fp)
81130a48:	10800317 	ldw	r2,12(r2)
81130a4c:	10800404 	addi	r2,r2,16
81130a50:	e0fffe17 	ldw	r3,-8(fp)
81130a54:	10c00035 	stwio	r3,0(r2)
}
81130a58:	0001883a 	nop
81130a5c:	e037883a 	mov	sp,fp
81130a60:	df000017 	ldw	fp,0(sp)
81130a64:	dec00104 	addi	sp,sp,4
81130a68:	f800283a 	ret

81130a6c <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
81130a6c:	defffe04 	addi	sp,sp,-8
81130a70:	df000115 	stw	fp,4(sp)
81130a74:	df000104 	addi	fp,sp,4
81130a78:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
81130a7c:	e0bfff17 	ldw	r2,-4(fp)
81130a80:	10800784 	addi	r2,r2,30
81130a84:	10800023 	ldbuio	r2,0(r2)
81130a88:	10803fcc 	andi	r2,r2,255
81130a8c:	10801fcc 	andi	r2,r2,127
81130a90:	10000226 	beq	r2,zero,81130a9c <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
81130a94:	00bffec4 	movi	r2,-5
81130a98:	00000906 	br	81130ac0 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
81130a9c:	e0bfff17 	ldw	r2,-4(fp)
81130aa0:	108007c4 	addi	r2,r2,31
81130aa4:	10800023 	ldbuio	r2,0(r2)
81130aa8:	10803fcc 	andi	r2,r2,255
81130aac:	1080200c 	andi	r2,r2,128
81130ab0:	10000226 	beq	r2,zero,81130abc <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
81130ab4:	00bfe244 	movi	r2,-119
81130ab8:	00000106 	br	81130ac0 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
81130abc:	0005883a 	mov	r2,zero
}
81130ac0:	e037883a 	mov	sp,fp
81130ac4:	df000017 	ldw	fp,0(sp)
81130ac8:	dec00104 	addi	sp,sp,4
81130acc:	f800283a 	ret

81130ad0 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
81130ad0:	defffc04 	addi	sp,sp,-16
81130ad4:	dfc00315 	stw	ra,12(sp)
81130ad8:	df000215 	stw	fp,8(sp)
81130adc:	df000204 	addi	fp,sp,8
81130ae0:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
81130ae4:	d1603804 	addi	r5,gp,-32544
81130ae8:	e13fff17 	ldw	r4,-4(fp)
81130aec:	113420c0 	call	8113420c <alt_find_dev>
81130af0:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
81130af4:	e0bffe17 	ldw	r2,-8(fp)
81130af8:	1000041e 	bne	r2,zero,81130b0c <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
81130afc:	11304180 	call	81130418 <alt_get_errno>
81130b00:	1007883a 	mov	r3,r2
81130b04:	008004c4 	movi	r2,19
81130b08:	18800015 	stw	r2,0(r3)
  }

  return dev;
81130b0c:	e0bffe17 	ldw	r2,-8(fp)
}
81130b10:	e037883a 	mov	sp,fp
81130b14:	dfc00117 	ldw	ra,4(sp)
81130b18:	df000017 	ldw	fp,0(sp)
81130b1c:	dec00204 	addi	sp,sp,8
81130b20:	f800283a 	ret

81130b24 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
81130b24:	defff104 	addi	sp,sp,-60
81130b28:	dfc00e15 	stw	ra,56(sp)
81130b2c:	df000d15 	stw	fp,52(sp)
81130b30:	df000d04 	addi	fp,sp,52
81130b34:	e13ffa15 	stw	r4,-24(fp)
81130b38:	e17ffb15 	stw	r5,-20(fp)
81130b3c:	e1bffc15 	stw	r6,-16(fp)
81130b40:	e1fffd15 	stw	r7,-12(fp)
81130b44:	e0c00217 	ldw	r3,8(fp)
81130b48:	e0800617 	ldw	r2,24(fp)
81130b4c:	e0fffe0d 	sth	r3,-8(fp)
81130b50:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
81130b54:	e0bffe0b 	ldhu	r2,-8(fp)
81130b58:	e0ffff03 	ldbu	r3,-4(fp)
81130b5c:	d8c00615 	stw	r3,24(sp)
81130b60:	d8000515 	stw	zero,20(sp)
81130b64:	d8000415 	stw	zero,16(sp)
81130b68:	e0c00517 	ldw	r3,20(fp)
81130b6c:	d8c00315 	stw	r3,12(sp)
81130b70:	e0c00417 	ldw	r3,16(fp)
81130b74:	d8c00215 	stw	r3,8(sp)
81130b78:	e0c00317 	ldw	r3,12(fp)
81130b7c:	d8c00115 	stw	r3,4(sp)
81130b80:	d8800015 	stw	r2,0(sp)
81130b84:	e1fffd17 	ldw	r7,-12(fp)
81130b88:	e1bffc17 	ldw	r6,-16(fp)
81130b8c:	e17ffb17 	ldw	r5,-20(fp)
81130b90:	e13ffa17 	ldw	r4,-24(fp)
81130b94:	1130c900 	call	81130c90 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
81130b98:	0001883a 	nop
81130b9c:	e037883a 	mov	sp,fp
81130ba0:	dfc00117 	ldw	ra,4(sp)
81130ba4:	df000017 	ldw	fp,0(sp)
81130ba8:	dec00204 	addi	sp,sp,8
81130bac:	f800283a 	ret

81130bb0 <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
81130bb0:	defffc04 	addi	sp,sp,-16
81130bb4:	df000315 	stw	fp,12(sp)
81130bb8:	df000304 	addi	fp,sp,12
81130bbc:	e13ffe15 	stw	r4,-8(fp)
81130bc0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81130bc4:	e0bffe17 	ldw	r2,-8(fp)
81130bc8:	10800317 	ldw	r2,12(r2)
81130bcc:	10800404 	addi	r2,r2,16
81130bd0:	10800037 	ldwio	r2,0(r2)
81130bd4:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
81130bd8:	e0fffd17 	ldw	r3,-12(fp)
81130bdc:	00a00434 	movhi	r2,32784
81130be0:	10bfffc4 	addi	r2,r2,-1
81130be4:	1884703a 	and	r2,r3,r2
81130be8:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
81130bec:	e0bfff17 	ldw	r2,-4(fp)
81130bf0:	1004953a 	slli	r2,r2,20
81130bf4:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
81130bf8:	e0bffd17 	ldw	r2,-12(fp)
81130bfc:	1884b03a 	or	r2,r3,r2
81130c00:	10800134 	orhi	r2,r2,4
81130c04:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81130c08:	e0bffe17 	ldw	r2,-8(fp)
81130c0c:	10800317 	ldw	r2,12(r2)
81130c10:	10800404 	addi	r2,r2,16
81130c14:	e0fffd17 	ldw	r3,-12(fp)
81130c18:	10c00035 	stwio	r3,0(r2)
  
  return;
81130c1c:	0001883a 	nop
}
81130c20:	e037883a 	mov	sp,fp
81130c24:	df000017 	ldw	fp,0(sp)
81130c28:	dec00104 	addi	sp,sp,4
81130c2c:	f800283a 	ret

81130c30 <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
81130c30:	defffd04 	addi	sp,sp,-12
81130c34:	df000215 	stw	fp,8(sp)
81130c38:	df000204 	addi	fp,sp,8
81130c3c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81130c40:	e0bfff17 	ldw	r2,-4(fp)
81130c44:	10800317 	ldw	r2,12(r2)
81130c48:	10800404 	addi	r2,r2,16
81130c4c:	10800037 	ldwio	r2,0(r2)
81130c50:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
81130c54:	e0fffe17 	ldw	r3,-8(fp)
81130c58:	00bfff34 	movhi	r2,65532
81130c5c:	10bfffc4 	addi	r2,r2,-1
81130c60:	1884703a 	and	r2,r3,r2
81130c64:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
81130c68:	e0bfff17 	ldw	r2,-4(fp)
81130c6c:	10800317 	ldw	r2,12(r2)
81130c70:	10800404 	addi	r2,r2,16
81130c74:	e0fffe17 	ldw	r3,-8(fp)
81130c78:	10c00035 	stwio	r3,0(r2)
  
  return;
81130c7c:	0001883a 	nop
}
81130c80:	e037883a 	mov	sp,fp
81130c84:	df000017 	ldw	fp,0(sp)
81130c88:	dec00104 	addi	sp,sp,4
81130c8c:	f800283a 	ret

81130c90 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
81130c90:	defff804 	addi	sp,sp,-32
81130c94:	dfc00715 	stw	ra,28(sp)
81130c98:	df000615 	stw	fp,24(sp)
81130c9c:	df000604 	addi	fp,sp,24
81130ca0:	e13ffa15 	stw	r4,-24(fp)
81130ca4:	e17ffb15 	stw	r5,-20(fp)
81130ca8:	e1bffc15 	stw	r6,-16(fp)
81130cac:	e1fffd15 	stw	r7,-12(fp)
81130cb0:	e0c00217 	ldw	r3,8(fp)
81130cb4:	e0800817 	ldw	r2,32(fp)
81130cb8:	e0fffe0d 	sth	r3,-8(fp)
81130cbc:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
81130cc0:	e0bffb17 	ldw	r2,-20(fp)
81130cc4:	108007c4 	addi	r2,r2,31
81130cc8:	e0fffb17 	ldw	r3,-20(fp)
81130ccc:	18c007c3 	ldbu	r3,31(r3)
81130cd0:	19003fcc 	andi	r4,r3,255
81130cd4:	00ffdfc4 	movi	r3,-129
81130cd8:	20c6703a 	and	r3,r4,r3
81130cdc:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
81130ce0:	e0bffa17 	ldw	r2,-24(fp)
81130ce4:	e0fffc17 	ldw	r3,-16(fp)
81130ce8:	19403fcc 	andi	r5,r3,255
81130cec:	10c00003 	ldbu	r3,0(r2)
81130cf0:	1806703a 	and	r3,r3,zero
81130cf4:	1809883a 	mov	r4,r3
81130cf8:	2807883a 	mov	r3,r5
81130cfc:	20c6b03a 	or	r3,r4,r3
81130d00:	10c00005 	stb	r3,0(r2)
81130d04:	e0fffc17 	ldw	r3,-16(fp)
81130d08:	1806d23a 	srli	r3,r3,8
81130d0c:	19403fcc 	andi	r5,r3,255
81130d10:	10c00043 	ldbu	r3,1(r2)
81130d14:	1806703a 	and	r3,r3,zero
81130d18:	1809883a 	mov	r4,r3
81130d1c:	2807883a 	mov	r3,r5
81130d20:	20c6b03a 	or	r3,r4,r3
81130d24:	10c00045 	stb	r3,1(r2)
81130d28:	e0fffc17 	ldw	r3,-16(fp)
81130d2c:	1806d43a 	srli	r3,r3,16
81130d30:	19403fcc 	andi	r5,r3,255
81130d34:	10c00083 	ldbu	r3,2(r2)
81130d38:	1806703a 	and	r3,r3,zero
81130d3c:	1809883a 	mov	r4,r3
81130d40:	2807883a 	mov	r3,r5
81130d44:	20c6b03a 	or	r3,r4,r3
81130d48:	10c00085 	stb	r3,2(r2)
81130d4c:	e0fffc17 	ldw	r3,-16(fp)
81130d50:	180ad63a 	srli	r5,r3,24
81130d54:	10c000c3 	ldbu	r3,3(r2)
81130d58:	1806703a 	and	r3,r3,zero
81130d5c:	1809883a 	mov	r4,r3
81130d60:	2807883a 	mov	r3,r5
81130d64:	20c6b03a 	or	r3,r4,r3
81130d68:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
81130d6c:	e0bffa17 	ldw	r2,-24(fp)
81130d70:	e0fffd17 	ldw	r3,-12(fp)
81130d74:	19403fcc 	andi	r5,r3,255
81130d78:	10c00203 	ldbu	r3,8(r2)
81130d7c:	1806703a 	and	r3,r3,zero
81130d80:	1809883a 	mov	r4,r3
81130d84:	2807883a 	mov	r3,r5
81130d88:	20c6b03a 	or	r3,r4,r3
81130d8c:	10c00205 	stb	r3,8(r2)
81130d90:	e0fffd17 	ldw	r3,-12(fp)
81130d94:	1806d23a 	srli	r3,r3,8
81130d98:	19403fcc 	andi	r5,r3,255
81130d9c:	10c00243 	ldbu	r3,9(r2)
81130da0:	1806703a 	and	r3,r3,zero
81130da4:	1809883a 	mov	r4,r3
81130da8:	2807883a 	mov	r3,r5
81130dac:	20c6b03a 	or	r3,r4,r3
81130db0:	10c00245 	stb	r3,9(r2)
81130db4:	e0fffd17 	ldw	r3,-12(fp)
81130db8:	1806d43a 	srli	r3,r3,16
81130dbc:	19403fcc 	andi	r5,r3,255
81130dc0:	10c00283 	ldbu	r3,10(r2)
81130dc4:	1806703a 	and	r3,r3,zero
81130dc8:	1809883a 	mov	r4,r3
81130dcc:	2807883a 	mov	r3,r5
81130dd0:	20c6b03a 	or	r3,r4,r3
81130dd4:	10c00285 	stb	r3,10(r2)
81130dd8:	e0fffd17 	ldw	r3,-12(fp)
81130ddc:	180ad63a 	srli	r5,r3,24
81130de0:	10c002c3 	ldbu	r3,11(r2)
81130de4:	1806703a 	and	r3,r3,zero
81130de8:	1809883a 	mov	r4,r3
81130dec:	2807883a 	mov	r3,r5
81130df0:	20c6b03a 	or	r3,r4,r3
81130df4:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
81130df8:	e0bffa17 	ldw	r2,-24(fp)
81130dfc:	e0fffb17 	ldw	r3,-20(fp)
81130e00:	19403fcc 	andi	r5,r3,255
81130e04:	10c00403 	ldbu	r3,16(r2)
81130e08:	1806703a 	and	r3,r3,zero
81130e0c:	1809883a 	mov	r4,r3
81130e10:	2807883a 	mov	r3,r5
81130e14:	20c6b03a 	or	r3,r4,r3
81130e18:	10c00405 	stb	r3,16(r2)
81130e1c:	e0fffb17 	ldw	r3,-20(fp)
81130e20:	1806d23a 	srli	r3,r3,8
81130e24:	19403fcc 	andi	r5,r3,255
81130e28:	10c00443 	ldbu	r3,17(r2)
81130e2c:	1806703a 	and	r3,r3,zero
81130e30:	1809883a 	mov	r4,r3
81130e34:	2807883a 	mov	r3,r5
81130e38:	20c6b03a 	or	r3,r4,r3
81130e3c:	10c00445 	stb	r3,17(r2)
81130e40:	e0fffb17 	ldw	r3,-20(fp)
81130e44:	1806d43a 	srli	r3,r3,16
81130e48:	19403fcc 	andi	r5,r3,255
81130e4c:	10c00483 	ldbu	r3,18(r2)
81130e50:	1806703a 	and	r3,r3,zero
81130e54:	1809883a 	mov	r4,r3
81130e58:	2807883a 	mov	r3,r5
81130e5c:	20c6b03a 	or	r3,r4,r3
81130e60:	10c00485 	stb	r3,18(r2)
81130e64:	e0fffb17 	ldw	r3,-20(fp)
81130e68:	180ad63a 	srli	r5,r3,24
81130e6c:	10c004c3 	ldbu	r3,19(r2)
81130e70:	1806703a 	and	r3,r3,zero
81130e74:	1809883a 	mov	r4,r3
81130e78:	2807883a 	mov	r3,r5
81130e7c:	20c6b03a 	or	r3,r4,r3
81130e80:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
81130e84:	e0bffa17 	ldw	r2,-24(fp)
81130e88:	10c00103 	ldbu	r3,4(r2)
81130e8c:	1806703a 	and	r3,r3,zero
81130e90:	10c00105 	stb	r3,4(r2)
81130e94:	10c00143 	ldbu	r3,5(r2)
81130e98:	1806703a 	and	r3,r3,zero
81130e9c:	10c00145 	stb	r3,5(r2)
81130ea0:	10c00183 	ldbu	r3,6(r2)
81130ea4:	1806703a 	and	r3,r3,zero
81130ea8:	10c00185 	stb	r3,6(r2)
81130eac:	10c001c3 	ldbu	r3,7(r2)
81130eb0:	1806703a 	and	r3,r3,zero
81130eb4:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
81130eb8:	e0bffa17 	ldw	r2,-24(fp)
81130ebc:	10c00303 	ldbu	r3,12(r2)
81130ec0:	1806703a 	and	r3,r3,zero
81130ec4:	10c00305 	stb	r3,12(r2)
81130ec8:	10c00343 	ldbu	r3,13(r2)
81130ecc:	1806703a 	and	r3,r3,zero
81130ed0:	10c00345 	stb	r3,13(r2)
81130ed4:	10c00383 	ldbu	r3,14(r2)
81130ed8:	1806703a 	and	r3,r3,zero
81130edc:	10c00385 	stb	r3,14(r2)
81130ee0:	10c003c3 	ldbu	r3,15(r2)
81130ee4:	1806703a 	and	r3,r3,zero
81130ee8:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
81130eec:	e0bffa17 	ldw	r2,-24(fp)
81130ef0:	10c00503 	ldbu	r3,20(r2)
81130ef4:	1806703a 	and	r3,r3,zero
81130ef8:	10c00505 	stb	r3,20(r2)
81130efc:	10c00543 	ldbu	r3,21(r2)
81130f00:	1806703a 	and	r3,r3,zero
81130f04:	10c00545 	stb	r3,21(r2)
81130f08:	10c00583 	ldbu	r3,22(r2)
81130f0c:	1806703a 	and	r3,r3,zero
81130f10:	10c00585 	stb	r3,22(r2)
81130f14:	10c005c3 	ldbu	r3,23(r2)
81130f18:	1806703a 	and	r3,r3,zero
81130f1c:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
81130f20:	e0bffa17 	ldw	r2,-24(fp)
81130f24:	e0fffe17 	ldw	r3,-8(fp)
81130f28:	19403fcc 	andi	r5,r3,255
81130f2c:	10c00603 	ldbu	r3,24(r2)
81130f30:	1806703a 	and	r3,r3,zero
81130f34:	1809883a 	mov	r4,r3
81130f38:	2807883a 	mov	r3,r5
81130f3c:	20c6b03a 	or	r3,r4,r3
81130f40:	10c00605 	stb	r3,24(r2)
81130f44:	e0fffe17 	ldw	r3,-8(fp)
81130f48:	1806d23a 	srli	r3,r3,8
81130f4c:	19403fcc 	andi	r5,r3,255
81130f50:	10c00643 	ldbu	r3,25(r2)
81130f54:	1806703a 	and	r3,r3,zero
81130f58:	1809883a 	mov	r4,r3
81130f5c:	2807883a 	mov	r3,r5
81130f60:	20c6b03a 	or	r3,r4,r3
81130f64:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
81130f68:	e0bffa17 	ldw	r2,-24(fp)
81130f6c:	10c00703 	ldbu	r3,28(r2)
81130f70:	1806703a 	and	r3,r3,zero
81130f74:	10c00705 	stb	r3,28(r2)
81130f78:	10c00743 	ldbu	r3,29(r2)
81130f7c:	1806703a 	and	r3,r3,zero
81130f80:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
81130f84:	e0bffa17 	ldw	r2,-24(fp)
81130f88:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
81130f8c:	e0800617 	ldw	r2,24(fp)
81130f90:	1007883a 	mov	r3,r2
81130f94:	e0bffa17 	ldw	r2,-24(fp)
81130f98:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
81130f9c:	e0800717 	ldw	r2,28(fp)
81130fa0:	1007883a 	mov	r3,r2
81130fa4:	e0bffa17 	ldw	r2,-24(fp)
81130fa8:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81130fac:	e0800317 	ldw	r2,12(fp)
81130fb0:	10000226 	beq	r2,zero,81130fbc <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
81130fb4:	00bfe044 	movi	r2,-127
81130fb8:	00000106 	br	81130fc0 <alt_avalon_sgdma_construct_descriptor_burst+0x330>
81130fbc:	00bfe004 	movi	r2,-128
81130fc0:	e0c00417 	ldw	r3,16(fp)
81130fc4:	18000226 	beq	r3,zero,81130fd0 <alt_avalon_sgdma_construct_descriptor_burst+0x340>
81130fc8:	00c00084 	movi	r3,2
81130fcc:	00000106 	br	81130fd4 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
81130fd0:	0007883a 	mov	r3,zero
81130fd4:	10c4b03a 	or	r2,r2,r3
81130fd8:	1007883a 	mov	r3,r2
81130fdc:	e0800517 	ldw	r2,20(fp)
81130fe0:	10000226 	beq	r2,zero,81130fec <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
81130fe4:	00800104 	movi	r2,4
81130fe8:	00000106 	br	81130ff0 <alt_avalon_sgdma_construct_descriptor_burst+0x360>
81130fec:	0005883a 	mov	r2,zero
81130ff0:	1884b03a 	or	r2,r3,r2
81130ff4:	1007883a 	mov	r3,r2
81130ff8:	e0bfff03 	ldbu	r2,-4(fp)
81130ffc:	10000426 	beq	r2,zero,81131010 <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
81131000:	e0bfff03 	ldbu	r2,-4(fp)
81131004:	108003cc 	andi	r2,r2,15
81131008:	100490fa 	slli	r2,r2,3
8113100c:	00000106 	br	81131014 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
81131010:	0005883a 	mov	r2,zero
81131014:	1884b03a 	or	r2,r3,r2
81131018:	1007883a 	mov	r3,r2
8113101c:	e0bffa17 	ldw	r2,-24(fp)
81131020:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
81131024:	01400804 	movi	r5,32
81131028:	e13ffa17 	ldw	r4,-24(fp)
8113102c:	11340440 	call	81134044 <alt_dcache_flush>
}
81131030:	0001883a 	nop
81131034:	e037883a 	mov	sp,fp
81131038:	dfc00117 	ldw	ra,4(sp)
8113103c:	df000017 	ldw	fp,0(sp)
81131040:	dec00204 	addi	sp,sp,8
81131044:	f800283a 	ret

81131048 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
81131048:	defff904 	addi	sp,sp,-28
8113104c:	dfc00615 	stw	ra,24(sp)
81131050:	df000515 	stw	fp,20(sp)
81131054:	df000504 	addi	fp,sp,20
81131058:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
8113105c:	e0bfff17 	ldw	r2,-4(fp)
81131060:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
81131064:	e0bffb17 	ldw	r2,-20(fp)
81131068:	10800317 	ldw	r2,12(r2)
8113106c:	10800404 	addi	r2,r2,16
81131070:	e0fffb17 	ldw	r3,-20(fp)
81131074:	18c00317 	ldw	r3,12(r3)
81131078:	18c00404 	addi	r3,r3,16
8113107c:	18c00037 	ldwio	r3,0(r3)
81131080:	18e00034 	orhi	r3,r3,32768
81131084:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
81131088:	e0bffb17 	ldw	r2,-20(fp)
8113108c:	10800317 	ldw	r2,12(r2)
81131090:	10800404 	addi	r2,r2,16
81131094:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
81131098:	e0bffb17 	ldw	r2,-20(fp)
8113109c:	10800917 	ldw	r2,36(r2)
811310a0:	10001226 	beq	r2,zero,811310ec <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811310a4:	0005303a 	rdctl	r2,status
811310a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811310ac:	e0fffd17 	ldw	r3,-12(fp)
811310b0:	00bfff84 	movi	r2,-2
811310b4:	1884703a 	and	r2,r3,r2
811310b8:	1001703a 	wrctl	status,r2
  
  return context;
811310bc:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
811310c0:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
811310c4:	e0bffb17 	ldw	r2,-20(fp)
811310c8:	10800917 	ldw	r2,36(r2)
811310cc:	e0fffb17 	ldw	r3,-20(fp)
811310d0:	18c00a17 	ldw	r3,40(r3)
811310d4:	1809883a 	mov	r4,r3
811310d8:	103ee83a 	callr	r2
811310dc:	e0bffc17 	ldw	r2,-16(fp)
811310e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811310e4:	e0bffe17 	ldw	r2,-8(fp)
811310e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
811310ec:	0001883a 	nop
811310f0:	e037883a 	mov	sp,fp
811310f4:	dfc00117 	ldw	ra,4(sp)
811310f8:	df000017 	ldw	fp,0(sp)
811310fc:	dec00204 	addi	sp,sp,8
81131100:	f800283a 	ret

81131104 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81131104:	defffa04 	addi	sp,sp,-24
81131108:	dfc00515 	stw	ra,20(sp)
8113110c:	df000415 	stw	fp,16(sp)
81131110:	df000404 	addi	fp,sp,16
81131114:	e13ffd15 	stw	r4,-12(fp)
81131118:	e17ffe15 	stw	r5,-8(fp)
8113111c:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81131120:	e0bffd17 	ldw	r2,-12(fp)
81131124:	10800317 	ldw	r2,12(r2)
81131128:	10800404 	addi	r2,r2,16
8113112c:	00c00074 	movhi	r3,1
81131130:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
81131134:	e0bffd17 	ldw	r2,-12(fp)
81131138:	10800317 	ldw	r2,12(r2)
8113113c:	10800404 	addi	r2,r2,16
81131140:	00c00074 	movhi	r3,1
81131144:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
81131148:	e0bffd17 	ldw	r2,-12(fp)
8113114c:	10800317 	ldw	r2,12(r2)
81131150:	10800404 	addi	r2,r2,16
81131154:	0007883a 	mov	r3,zero
81131158:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
8113115c:	e0bffd17 	ldw	r2,-12(fp)
81131160:	10800317 	ldw	r2,12(r2)
81131164:	00c03fc4 	movi	r3,255
81131168:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
8113116c:	d1603804 	addi	r5,gp,-32544
81131170:	e13ffd17 	ldw	r4,-12(fp)
81131174:	11340a80 	call	811340a8 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
81131178:	d8000015 	stw	zero,0(sp)
8113117c:	e1fffd17 	ldw	r7,-12(fp)
81131180:	01a044f4 	movhi	r6,33043
81131184:	31841204 	addi	r6,r6,4168
81131188:	e17fff17 	ldw	r5,-4(fp)
8113118c:	e13ffe17 	ldw	r4,-8(fp)
81131190:	11344800 	call	81134480 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
81131194:	0001883a 	nop
81131198:	e037883a 	mov	sp,fp
8113119c:	dfc00117 	ldw	ra,4(sp)
811311a0:	df000017 	ldw	fp,0(sp)
811311a4:	dec00204 	addi	sp,sp,8
811311a8:	f800283a 	ret

811311ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
811311ac:	defffa04 	addi	sp,sp,-24
811311b0:	dfc00515 	stw	ra,20(sp)
811311b4:	df000415 	stw	fp,16(sp)
811311b8:	df000404 	addi	fp,sp,16
811311bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
811311c0:	0007883a 	mov	r3,zero
811311c4:	e0bfff17 	ldw	r2,-4(fp)
811311c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
811311cc:	e0bfff17 	ldw	r2,-4(fp)
811311d0:	10800104 	addi	r2,r2,4
811311d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811311d8:	0005303a 	rdctl	r2,status
811311dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811311e0:	e0fffd17 	ldw	r3,-12(fp)
811311e4:	00bfff84 	movi	r2,-2
811311e8:	1884703a 	and	r2,r3,r2
811311ec:	1001703a 	wrctl	status,r2
  
  return context;
811311f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
811311f4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
811311f8:	112235c0 	call	8112235c <alt_tick>
811311fc:	e0bffc17 	ldw	r2,-16(fp)
81131200:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131204:	e0bffe17 	ldw	r2,-8(fp)
81131208:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
8113120c:	0001883a 	nop
81131210:	e037883a 	mov	sp,fp
81131214:	dfc00117 	ldw	ra,4(sp)
81131218:	df000017 	ldw	fp,0(sp)
8113121c:	dec00204 	addi	sp,sp,8
81131220:	f800283a 	ret

81131224 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
81131224:	defff804 	addi	sp,sp,-32
81131228:	dfc00715 	stw	ra,28(sp)
8113122c:	df000615 	stw	fp,24(sp)
81131230:	df000604 	addi	fp,sp,24
81131234:	e13ffc15 	stw	r4,-16(fp)
81131238:	e17ffd15 	stw	r5,-12(fp)
8113123c:	e1bffe15 	stw	r6,-8(fp)
81131240:	e1ffff15 	stw	r7,-4(fp)
81131244:	e0bfff17 	ldw	r2,-4(fp)
81131248:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
8113124c:	d0a07317 	ldw	r2,-32308(gp)
81131250:	1000021e 	bne	r2,zero,8113125c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
81131254:	e0bffb17 	ldw	r2,-20(fp)
81131258:	d0a07315 	stw	r2,-32308(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
8113125c:	e0bffc17 	ldw	r2,-16(fp)
81131260:	10800104 	addi	r2,r2,4
81131264:	00c001c4 	movi	r3,7
81131268:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
8113126c:	d8000015 	stw	zero,0(sp)
81131270:	e1fffc17 	ldw	r7,-16(fp)
81131274:	01a044f4 	movhi	r6,33043
81131278:	31846b04 	addi	r6,r6,4524
8113127c:	e17ffe17 	ldw	r5,-8(fp)
81131280:	e13ffd17 	ldw	r4,-12(fp)
81131284:	11344800 	call	81134480 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81131288:	0001883a 	nop
8113128c:	e037883a 	mov	sp,fp
81131290:	dfc00117 	ldw	ra,4(sp)
81131294:	df000017 	ldw	fp,0(sp)
81131298:	dec00204 	addi	sp,sp,8
8113129c:	f800283a 	ret

811312a0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
811312a0:	defffa04 	addi	sp,sp,-24
811312a4:	dfc00515 	stw	ra,20(sp)
811312a8:	df000415 	stw	fp,16(sp)
811312ac:	df000404 	addi	fp,sp,16
811312b0:	e13ffd15 	stw	r4,-12(fp)
811312b4:	e17ffe15 	stw	r5,-8(fp)
811312b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
811312bc:	e0bffd17 	ldw	r2,-12(fp)
811312c0:	10800017 	ldw	r2,0(r2)
811312c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
811312c8:	e0bffc17 	ldw	r2,-16(fp)
811312cc:	10c00a04 	addi	r3,r2,40
811312d0:	e0bffd17 	ldw	r2,-12(fp)
811312d4:	10800217 	ldw	r2,8(r2)
811312d8:	100f883a 	mov	r7,r2
811312dc:	e1bfff17 	ldw	r6,-4(fp)
811312e0:	e17ffe17 	ldw	r5,-8(fp)
811312e4:	1809883a 	mov	r4,r3
811312e8:	11319180 	call	81131918 <altera_avalon_uart_read>
      fd->fd_flags);
}
811312ec:	e037883a 	mov	sp,fp
811312f0:	dfc00117 	ldw	ra,4(sp)
811312f4:	df000017 	ldw	fp,0(sp)
811312f8:	dec00204 	addi	sp,sp,8
811312fc:	f800283a 	ret

81131300 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81131300:	defffa04 	addi	sp,sp,-24
81131304:	dfc00515 	stw	ra,20(sp)
81131308:	df000415 	stw	fp,16(sp)
8113130c:	df000404 	addi	fp,sp,16
81131310:	e13ffd15 	stw	r4,-12(fp)
81131314:	e17ffe15 	stw	r5,-8(fp)
81131318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
8113131c:	e0bffd17 	ldw	r2,-12(fp)
81131320:	10800017 	ldw	r2,0(r2)
81131324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81131328:	e0bffc17 	ldw	r2,-16(fp)
8113132c:	10c00a04 	addi	r3,r2,40
81131330:	e0bffd17 	ldw	r2,-12(fp)
81131334:	10800217 	ldw	r2,8(r2)
81131338:	100f883a 	mov	r7,r2
8113133c:	e1bfff17 	ldw	r6,-4(fp)
81131340:	e17ffe17 	ldw	r5,-8(fp)
81131344:	1809883a 	mov	r4,r3
81131348:	1131bbc0 	call	81131bbc <altera_avalon_uart_write>
      fd->fd_flags);
}
8113134c:	e037883a 	mov	sp,fp
81131350:	dfc00117 	ldw	ra,4(sp)
81131354:	df000017 	ldw	fp,0(sp)
81131358:	dec00204 	addi	sp,sp,8
8113135c:	f800283a 	ret

81131360 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81131360:	defffc04 	addi	sp,sp,-16
81131364:	dfc00315 	stw	ra,12(sp)
81131368:	df000215 	stw	fp,8(sp)
8113136c:	df000204 	addi	fp,sp,8
81131370:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81131374:	e0bfff17 	ldw	r2,-4(fp)
81131378:	10800017 	ldw	r2,0(r2)
8113137c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81131380:	e0bffe17 	ldw	r2,-8(fp)
81131384:	10c00a04 	addi	r3,r2,40
81131388:	e0bfff17 	ldw	r2,-4(fp)
8113138c:	10800217 	ldw	r2,8(r2)
81131390:	100b883a 	mov	r5,r2
81131394:	1809883a 	mov	r4,r3
81131398:	11318880 	call	81131888 <altera_avalon_uart_close>
}
8113139c:	e037883a 	mov	sp,fp
811313a0:	dfc00117 	ldw	ra,4(sp)
811313a4:	df000017 	ldw	fp,0(sp)
811313a8:	dec00204 	addi	sp,sp,8
811313ac:	f800283a 	ret

811313b0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
811313b0:	defff304 	addi	sp,sp,-52
811313b4:	dfc00c15 	stw	ra,48(sp)
811313b8:	df000b15 	stw	fp,44(sp)
811313bc:	df000b04 	addi	fp,sp,44
811313c0:	e13ffd15 	stw	r4,-12(fp)
811313c4:	e17ffe15 	stw	r5,-8(fp)
811313c8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
811313cc:	e0bffd17 	ldw	r2,-12(fp)
811313d0:	10800017 	ldw	r2,0(r2)
811313d4:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811313d8:	e0bffd17 	ldw	r2,-12(fp)
811313dc:	10800704 	addi	r2,r2,28
811313e0:	e0bffa15 	stw	r2,-24(fp)
811313e4:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
811313e8:	e0bffb0b 	ldhu	r2,-20(fp)
811313ec:	e0fffc84 	addi	r3,fp,-14
811313f0:	180b883a 	mov	r5,r3
811313f4:	1009883a 	mov	r4,r2
811313f8:	1124e980 	call	81124e98 <OSFlagCreate>
811313fc:	1007883a 	mov	r3,r2
81131400:	e0bffa17 	ldw	r2,-24(fp)
81131404:	10c00015 	stw	r3,0(r2)
  return err;
81131408:	e0bffc83 	ldbu	r2,-14(fp)
8113140c:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81131410:	1000241e 	bne	r2,zero,811314a4 <altera_avalon_uart_init+0xf4>
81131414:	e0bffd17 	ldw	r2,-12(fp)
81131418:	10800804 	addi	r2,r2,32
8113141c:	e0bff715 	stw	r2,-36(fp)
81131420:	00800044 	movi	r2,1
81131424:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81131428:	e0bffb8b 	ldhu	r2,-18(fp)
8113142c:	1009883a 	mov	r4,r2
81131430:	1128cc40 	call	81128cc4 <OSSemCreate>
81131434:	1007883a 	mov	r3,r2
81131438:	e0bff717 	ldw	r2,-36(fp)
8113143c:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81131440:	e0bff717 	ldw	r2,-36(fp)
81131444:	10800017 	ldw	r2,0(r2)
81131448:	10000226 	beq	r2,zero,81131454 <altera_avalon_uart_init+0xa4>
8113144c:	0005883a 	mov	r2,zero
81131450:	00000106 	br	81131458 <altera_avalon_uart_init+0xa8>
81131454:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81131458:	1000121e 	bne	r2,zero,811314a4 <altera_avalon_uart_init+0xf4>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
8113145c:	e0bffd17 	ldw	r2,-12(fp)
81131460:	10800904 	addi	r2,r2,36
81131464:	e0bff815 	stw	r2,-32(fp)
81131468:	00800044 	movi	r2,1
8113146c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81131470:	e0bffc0b 	ldhu	r2,-16(fp)
81131474:	1009883a 	mov	r4,r2
81131478:	1128cc40 	call	81128cc4 <OSSemCreate>
8113147c:	1007883a 	mov	r3,r2
81131480:	e0bff817 	ldw	r2,-32(fp)
81131484:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81131488:	e0bff817 	ldw	r2,-32(fp)
8113148c:	10800017 	ldw	r2,0(r2)
81131490:	10000226 	beq	r2,zero,8113149c <altera_avalon_uart_init+0xec>
81131494:	0005883a 	mov	r2,zero
81131498:	00000106 	br	811314a0 <altera_avalon_uart_init+0xf0>
8113149c:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
811314a0:	10000226 	beq	r2,zero,811314ac <altera_avalon_uart_init+0xfc>
811314a4:	00800044 	movi	r2,1
811314a8:	00000106 	br	811314b0 <altera_avalon_uart_init+0x100>
811314ac:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
811314b0:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
811314b4:	e0bff917 	ldw	r2,-28(fp)
811314b8:	10000f1e 	bne	r2,zero,811314f8 <altera_avalon_uart_init+0x148>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
811314bc:	e0bffd17 	ldw	r2,-12(fp)
811314c0:	00c32004 	movi	r3,3200
811314c4:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
811314c8:	e0bff617 	ldw	r2,-40(fp)
811314cc:	10800304 	addi	r2,r2,12
811314d0:	e0fffd17 	ldw	r3,-12(fp)
811314d4:	18c00117 	ldw	r3,4(r3)
811314d8:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
811314dc:	d8000015 	stw	zero,0(sp)
811314e0:	e1fffd17 	ldw	r7,-12(fp)
811314e4:	01a044f4 	movhi	r6,33043
811314e8:	31854404 	addi	r6,r6,5392
811314ec:	e17fff17 	ldw	r5,-4(fp)
811314f0:	e13ffe17 	ldw	r4,-8(fp)
811314f4:	11344800 	call	81134480 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
811314f8:	0001883a 	nop
811314fc:	e037883a 	mov	sp,fp
81131500:	dfc00117 	ldw	ra,4(sp)
81131504:	df000017 	ldw	fp,0(sp)
81131508:	dec00204 	addi	sp,sp,8
8113150c:	f800283a 	ret

81131510 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81131510:	defffa04 	addi	sp,sp,-24
81131514:	dfc00515 	stw	ra,20(sp)
81131518:	df000415 	stw	fp,16(sp)
8113151c:	df000404 	addi	fp,sp,16
81131520:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81131524:	e0bfff17 	ldw	r2,-4(fp)
81131528:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
8113152c:	e0bffc17 	ldw	r2,-16(fp)
81131530:	10800017 	ldw	r2,0(r2)
81131534:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81131538:	e0bffd17 	ldw	r2,-12(fp)
8113153c:	10800204 	addi	r2,r2,8
81131540:	10800037 	ldwio	r2,0(r2)
81131544:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81131548:	e0bffd17 	ldw	r2,-12(fp)
8113154c:	10800204 	addi	r2,r2,8
81131550:	0007883a 	mov	r3,zero
81131554:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81131558:	e0bffd17 	ldw	r2,-12(fp)
8113155c:	10800204 	addi	r2,r2,8
81131560:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81131564:	e0bffe17 	ldw	r2,-8(fp)
81131568:	1080200c 	andi	r2,r2,128
8113156c:	10000326 	beq	r2,zero,8113157c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
81131570:	e17ffe17 	ldw	r5,-8(fp)
81131574:	e13ffc17 	ldw	r4,-16(fp)
81131578:	11315ac0 	call	811315ac <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
8113157c:	e0bffe17 	ldw	r2,-8(fp)
81131580:	1081100c 	andi	r2,r2,1088
81131584:	10000326 	beq	r2,zero,81131594 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81131588:	e17ffe17 	ldw	r5,-8(fp)
8113158c:	e13ffc17 	ldw	r4,-16(fp)
81131590:	11316e40 	call	811316e4 <altera_avalon_uart_txirq>
  }
  

}
81131594:	0001883a 	nop
81131598:	e037883a 	mov	sp,fp
8113159c:	dfc00117 	ldw	ra,4(sp)
811315a0:	df000017 	ldw	fp,0(sp)
811315a4:	dec00204 	addi	sp,sp,8
811315a8:	f800283a 	ret

811315ac <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811315ac:	defff904 	addi	sp,sp,-28
811315b0:	dfc00615 	stw	ra,24(sp)
811315b4:	df000515 	stw	fp,20(sp)
811315b8:	df000504 	addi	fp,sp,20
811315bc:	e13ffe15 	stw	r4,-8(fp)
811315c0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
811315c4:	e0bfff17 	ldw	r2,-4(fp)
811315c8:	108000cc 	andi	r2,r2,3
811315cc:	10003f1e 	bne	r2,zero,811316cc <altera_avalon_uart_rxirq+0x120>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
811315d0:	e0bffe17 	ldw	r2,-8(fp)
811315d4:	10c00317 	ldw	r3,12(r2)
811315d8:	e0bffe17 	ldw	r2,-8(fp)
811315dc:	10800217 	ldw	r2,8(r2)
811315e0:	1880121e 	bne	r3,r2,8113162c <altera_avalon_uart_rxirq+0x80>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
811315e4:	e0bffe17 	ldw	r2,-8(fp)
811315e8:	10800717 	ldw	r2,28(r2)
811315ec:	e0bffc15 	stw	r2,-16(fp)
811315f0:	00800044 	movi	r2,1
811315f4:	e0bffd0d 	sth	r2,-12(fp)
811315f8:	00800044 	movi	r2,1
811315fc:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81131600:	d0a07943 	ldbu	r2,-32283(gp)
81131604:	10803fcc 	andi	r2,r2,255
81131608:	10000826 	beq	r2,zero,8113162c <altera_avalon_uart_rxirq+0x80>
  {
    OSFlagPost (group, flags, opt, &err);
8113160c:	e0bffd0b 	ldhu	r2,-12(fp)
81131610:	e0fffd83 	ldbu	r3,-10(fp)
81131614:	e13ffdc4 	addi	r4,fp,-9
81131618:	200f883a 	mov	r7,r4
8113161c:	180d883a 	mov	r6,r3
81131620:	100b883a 	mov	r5,r2
81131624:	e13ffc17 	ldw	r4,-16(fp)
81131628:	1125a740 	call	81125a74 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113162c:	e0bffe17 	ldw	r2,-8(fp)
81131630:	10800317 	ldw	r2,12(r2)
81131634:	10800044 	addi	r2,r2,1
81131638:	10800fcc 	andi	r2,r2,63
8113163c:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81131640:	e0bffe17 	ldw	r2,-8(fp)
81131644:	10800317 	ldw	r2,12(r2)
81131648:	e0fffe17 	ldw	r3,-8(fp)
8113164c:	18c00017 	ldw	r3,0(r3)
81131650:	18c00037 	ldwio	r3,0(r3)
81131654:	1809883a 	mov	r4,r3
81131658:	e0fffe17 	ldw	r3,-8(fp)
8113165c:	1885883a 	add	r2,r3,r2
81131660:	10800a04 	addi	r2,r2,40
81131664:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81131668:	e0bffe17 	ldw	r2,-8(fp)
8113166c:	e0fffb17 	ldw	r3,-20(fp)
81131670:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81131674:	e0bffe17 	ldw	r2,-8(fp)
81131678:	10800317 	ldw	r2,12(r2)
8113167c:	10800044 	addi	r2,r2,1
81131680:	10800fcc 	andi	r2,r2,63
81131684:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81131688:	e0bffe17 	ldw	r2,-8(fp)
8113168c:	10c00217 	ldw	r3,8(r2)
81131690:	e0bffb17 	ldw	r2,-20(fp)
81131694:	18800e1e 	bne	r3,r2,811316d0 <altera_avalon_uart_rxirq+0x124>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81131698:	e0bffe17 	ldw	r2,-8(fp)
8113169c:	10c00117 	ldw	r3,4(r2)
811316a0:	00bfdfc4 	movi	r2,-129
811316a4:	1886703a 	and	r3,r3,r2
811316a8:	e0bffe17 	ldw	r2,-8(fp)
811316ac:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
811316b0:	e0bffe17 	ldw	r2,-8(fp)
811316b4:	10800017 	ldw	r2,0(r2)
811316b8:	10800304 	addi	r2,r2,12
811316bc:	e0fffe17 	ldw	r3,-8(fp)
811316c0:	18c00117 	ldw	r3,4(r3)
811316c4:	10c00035 	stwio	r3,0(r2)
811316c8:	00000106 	br	811316d0 <altera_avalon_uart_rxirq+0x124>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
811316cc:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
811316d0:	e037883a 	mov	sp,fp
811316d4:	dfc00117 	ldw	ra,4(sp)
811316d8:	df000017 	ldw	fp,0(sp)
811316dc:	dec00204 	addi	sp,sp,8
811316e0:	f800283a 	ret

811316e4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
811316e4:	defffa04 	addi	sp,sp,-24
811316e8:	dfc00515 	stw	ra,20(sp)
811316ec:	df000415 	stw	fp,16(sp)
811316f0:	df000404 	addi	fp,sp,16
811316f4:	e13ffe15 	stw	r4,-8(fp)
811316f8:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
811316fc:	e0bffe17 	ldw	r2,-8(fp)
81131700:	10c00417 	ldw	r3,16(r2)
81131704:	e0bffe17 	ldw	r2,-8(fp)
81131708:	10800517 	ldw	r2,20(r2)
8113170c:	18804726 	beq	r3,r2,8113182c <altera_avalon_uart_txirq+0x148>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81131710:	e0bffe17 	ldw	r2,-8(fp)
81131714:	10800617 	ldw	r2,24(r2)
81131718:	1080008c 	andi	r2,r2,2
8113171c:	10000326 	beq	r2,zero,8113172c <altera_avalon_uart_txirq+0x48>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81131720:	e0bfff17 	ldw	r2,-4(fp)
81131724:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81131728:	10003226 	beq	r2,zero,811317f4 <altera_avalon_uart_txirq+0x110>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
8113172c:	e0bffe17 	ldw	r2,-8(fp)
81131730:	10c00417 	ldw	r3,16(r2)
81131734:	e0bffe17 	ldw	r2,-8(fp)
81131738:	10800517 	ldw	r2,20(r2)
8113173c:	10800044 	addi	r2,r2,1
81131740:	10800fcc 	andi	r2,r2,63
81131744:	1880121e 	bne	r3,r2,81131790 <altera_avalon_uart_txirq+0xac>
      { 
        ALT_FLAG_POST (sp->events, 
81131748:	e0bffe17 	ldw	r2,-8(fp)
8113174c:	10800717 	ldw	r2,28(r2)
81131750:	e0bffc15 	stw	r2,-16(fp)
81131754:	00800084 	movi	r2,2
81131758:	e0bffd0d 	sth	r2,-12(fp)
8113175c:	00800044 	movi	r2,1
81131760:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81131764:	d0a07943 	ldbu	r2,-32283(gp)
81131768:	10803fcc 	andi	r2,r2,255
8113176c:	10000826 	beq	r2,zero,81131790 <altera_avalon_uart_txirq+0xac>
  {
    OSFlagPost (group, flags, opt, &err);
81131770:	e0bffd0b 	ldhu	r2,-12(fp)
81131774:	e0fffd83 	ldbu	r3,-10(fp)
81131778:	e13ffdc4 	addi	r4,fp,-9
8113177c:	200f883a 	mov	r7,r4
81131780:	180d883a 	mov	r6,r3
81131784:	100b883a 	mov	r5,r2
81131788:	e13ffc17 	ldw	r4,-16(fp)
8113178c:	1125a740 	call	81125a74 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81131790:	e0bffe17 	ldw	r2,-8(fp)
81131794:	10800017 	ldw	r2,0(r2)
81131798:	10800104 	addi	r2,r2,4
8113179c:	e0fffe17 	ldw	r3,-8(fp)
811317a0:	18c00417 	ldw	r3,16(r3)
811317a4:	e13ffe17 	ldw	r4,-8(fp)
811317a8:	20c7883a 	add	r3,r4,r3
811317ac:	18c01a04 	addi	r3,r3,104
811317b0:	18c00003 	ldbu	r3,0(r3)
811317b4:	18c03fcc 	andi	r3,r3,255
811317b8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
811317bc:	e0bffe17 	ldw	r2,-8(fp)
811317c0:	10800417 	ldw	r2,16(r2)
811317c4:	10800044 	addi	r2,r2,1
811317c8:	e0fffe17 	ldw	r3,-8(fp)
811317cc:	18800415 	stw	r2,16(r3)
811317d0:	10c00fcc 	andi	r3,r2,63
811317d4:	e0bffe17 	ldw	r2,-8(fp)
811317d8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
811317dc:	e0bffe17 	ldw	r2,-8(fp)
811317e0:	10800117 	ldw	r2,4(r2)
811317e4:	10c01014 	ori	r3,r2,64
811317e8:	e0bffe17 	ldw	r2,-8(fp)
811317ec:	10c00115 	stw	r3,4(r2)
811317f0:	00000e06 	br	8113182c <altera_avalon_uart_txirq+0x148>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
811317f4:	e0bffe17 	ldw	r2,-8(fp)
811317f8:	10800017 	ldw	r2,0(r2)
811317fc:	10800204 	addi	r2,r2,8
81131800:	10800037 	ldwio	r2,0(r2)
81131804:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81131808:	e0bfff17 	ldw	r2,-4(fp)
8113180c:	1082000c 	andi	r2,r2,2048
81131810:	1000061e 	bne	r2,zero,8113182c <altera_avalon_uart_txirq+0x148>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81131814:	e0bffe17 	ldw	r2,-8(fp)
81131818:	10c00117 	ldw	r3,4(r2)
8113181c:	00bfefc4 	movi	r2,-65
81131820:	1886703a 	and	r3,r3,r2
81131824:	e0bffe17 	ldw	r2,-8(fp)
81131828:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
8113182c:	e0bffe17 	ldw	r2,-8(fp)
81131830:	10c00417 	ldw	r3,16(r2)
81131834:	e0bffe17 	ldw	r2,-8(fp)
81131838:	10800517 	ldw	r2,20(r2)
8113183c:	1880061e 	bne	r3,r2,81131858 <altera_avalon_uart_txirq+0x174>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81131840:	e0bffe17 	ldw	r2,-8(fp)
81131844:	10c00117 	ldw	r3,4(r2)
81131848:	00beefc4 	movi	r2,-1089
8113184c:	1886703a 	and	r3,r3,r2
81131850:	e0bffe17 	ldw	r2,-8(fp)
81131854:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81131858:	e0bffe17 	ldw	r2,-8(fp)
8113185c:	10800017 	ldw	r2,0(r2)
81131860:	10800304 	addi	r2,r2,12
81131864:	e0fffe17 	ldw	r3,-8(fp)
81131868:	18c00117 	ldw	r3,4(r3)
8113186c:	10c00035 	stwio	r3,0(r2)
}
81131870:	0001883a 	nop
81131874:	e037883a 	mov	sp,fp
81131878:	dfc00117 	ldw	ra,4(sp)
8113187c:	df000017 	ldw	fp,0(sp)
81131880:	dec00204 	addi	sp,sp,8
81131884:	f800283a 	ret

81131888 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81131888:	defffd04 	addi	sp,sp,-12
8113188c:	df000215 	stw	fp,8(sp)
81131890:	df000204 	addi	fp,sp,8
81131894:	e13ffe15 	stw	r4,-8(fp)
81131898:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113189c:	00000506 	br	811318b4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
811318a0:	e0bfff17 	ldw	r2,-4(fp)
811318a4:	1090000c 	andi	r2,r2,16384
811318a8:	10000226 	beq	r2,zero,811318b4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
811318ac:	00bffd44 	movi	r2,-11
811318b0:	00000606 	br	811318cc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
811318b4:	e0bffe17 	ldw	r2,-8(fp)
811318b8:	10c00417 	ldw	r3,16(r2)
811318bc:	e0bffe17 	ldw	r2,-8(fp)
811318c0:	10800517 	ldw	r2,20(r2)
811318c4:	18bff61e 	bne	r3,r2,811318a0 <__reset+0xfb1118a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
811318c8:	0005883a 	mov	r2,zero
}
811318cc:	e037883a 	mov	sp,fp
811318d0:	df000017 	ldw	fp,0(sp)
811318d4:	dec00104 	addi	sp,sp,4
811318d8:	f800283a 	ret

811318dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811318dc:	defffe04 	addi	sp,sp,-8
811318e0:	dfc00115 	stw	ra,4(sp)
811318e4:	df000015 	stw	fp,0(sp)
811318e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811318ec:	d0a01517 	ldw	r2,-32684(gp)
811318f0:	10000326 	beq	r2,zero,81131900 <alt_get_errno+0x24>
811318f4:	d0a01517 	ldw	r2,-32684(gp)
811318f8:	103ee83a 	callr	r2
811318fc:	00000106 	br	81131904 <alt_get_errno+0x28>
81131900:	d0a06804 	addi	r2,gp,-32352
}
81131904:	e037883a 	mov	sp,fp
81131908:	dfc00117 	ldw	ra,4(sp)
8113190c:	df000017 	ldw	fp,0(sp)
81131910:	dec00204 	addi	sp,sp,8
81131914:	f800283a 	ret

81131918 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81131918:	deffec04 	addi	sp,sp,-80
8113191c:	dfc01315 	stw	ra,76(sp)
81131920:	df001215 	stw	fp,72(sp)
81131924:	df001204 	addi	fp,sp,72
81131928:	e13ffc15 	stw	r4,-16(fp)
8113192c:	e17ffd15 	stw	r5,-12(fp)
81131930:	e1bffe15 	stw	r6,-8(fp)
81131934:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
81131938:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
8113193c:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81131940:	e0bfff17 	ldw	r2,-4(fp)
81131944:	1090000c 	andi	r2,r2,16384
81131948:	1005003a 	cmpeq	r2,r2,zero
8113194c:	10803fcc 	andi	r2,r2,255
81131950:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
81131954:	e0bffc17 	ldw	r2,-16(fp)
81131958:	10800817 	ldw	r2,32(r2)
8113195c:	e0bff815 	stw	r2,-32(fp)
81131960:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81131964:	e0bff90b 	ldhu	r2,-28(fp)
81131968:	e0fffb44 	addi	r3,fp,-19
8113196c:	180d883a 	mov	r6,r3
81131970:	100b883a 	mov	r5,r2
81131974:	e13ff817 	ldw	r4,-32(fp)
81131978:	1128fdc0 	call	81128fdc <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8113197c:	00001306 	br	811319cc <altera_avalon_uart_read+0xb4>
    {
      count++;
81131980:	e0bff017 	ldw	r2,-64(fp)
81131984:	10800044 	addi	r2,r2,1
81131988:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8113198c:	e0bffd17 	ldw	r2,-12(fp)
81131990:	10c00044 	addi	r3,r2,1
81131994:	e0fffd15 	stw	r3,-12(fp)
81131998:	e0fffc17 	ldw	r3,-16(fp)
8113199c:	18c00217 	ldw	r3,8(r3)
811319a0:	e13ffc17 	ldw	r4,-16(fp)
811319a4:	20c7883a 	add	r3,r4,r3
811319a8:	18c00a04 	addi	r3,r3,40
811319ac:	18c00003 	ldbu	r3,0(r3)
811319b0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
811319b4:	e0bffc17 	ldw	r2,-16(fp)
811319b8:	10800217 	ldw	r2,8(r2)
811319bc:	10800044 	addi	r2,r2,1
811319c0:	10c00fcc 	andi	r3,r2,63
811319c4:	e0bffc17 	ldw	r2,-16(fp)
811319c8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
811319cc:	e0fff017 	ldw	r3,-64(fp)
811319d0:	e0bffe17 	ldw	r2,-8(fp)
811319d4:	1880050e 	bge	r3,r2,811319ec <altera_avalon_uart_read+0xd4>
811319d8:	e0bffc17 	ldw	r2,-16(fp)
811319dc:	10c00217 	ldw	r3,8(r2)
811319e0:	e0bffc17 	ldw	r2,-16(fp)
811319e4:	10800317 	ldw	r2,12(r2)
811319e8:	18bfe51e 	bne	r3,r2,81131980 <__reset+0xfb111980>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
811319ec:	e0bff017 	ldw	r2,-64(fp)
811319f0:	10003a1e 	bne	r2,zero,81131adc <altera_avalon_uart_read+0x1c4>
811319f4:	e0bffc17 	ldw	r2,-16(fp)
811319f8:	10c00217 	ldw	r3,8(r2)
811319fc:	e0bffc17 	ldw	r2,-16(fp)
81131a00:	10800317 	ldw	r2,12(r2)
81131a04:	1880351e 	bne	r3,r2,81131adc <altera_avalon_uart_read+0x1c4>
    {
      if (!block)
81131a08:	e0bff117 	ldw	r2,-60(fp)
81131a0c:	1000071e 	bne	r2,zero,81131a2c <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81131a10:	11318dc0 	call	811318dc <alt_get_errno>
81131a14:	1007883a 	mov	r3,r2
81131a18:	008002c4 	movi	r2,11
81131a1c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
81131a20:	00800044 	movi	r2,1
81131a24:	e0bfef05 	stb	r2,-68(fp)
        break;
81131a28:	00003006 	br	81131aec <altera_avalon_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131a2c:	0005303a 	rdctl	r2,status
81131a30:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131a34:	e0fff517 	ldw	r3,-44(fp)
81131a38:	00bfff84 	movi	r2,-2
81131a3c:	1884703a 	and	r2,r3,r2
81131a40:	1001703a 	wrctl	status,r2
  
  return context;
81131a44:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
81131a48:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81131a4c:	e0bffc17 	ldw	r2,-16(fp)
81131a50:	10800117 	ldw	r2,4(r2)
81131a54:	10c02014 	ori	r3,r2,128
81131a58:	e0bffc17 	ldw	r2,-16(fp)
81131a5c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81131a60:	e0bffc17 	ldw	r2,-16(fp)
81131a64:	10800017 	ldw	r2,0(r2)
81131a68:	10800304 	addi	r2,r2,12
81131a6c:	e0fffc17 	ldw	r3,-16(fp)
81131a70:	18c00117 	ldw	r3,4(r3)
81131a74:	10c00035 	stwio	r3,0(r2)
81131a78:	e0bff417 	ldw	r2,-48(fp)
81131a7c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131a80:	e0bff617 	ldw	r2,-40(fp)
81131a84:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
81131a88:	e0bffc17 	ldw	r2,-16(fp)
81131a8c:	10800717 	ldw	r2,28(r2)
81131a90:	e0bff215 	stw	r2,-56(fp)
81131a94:	00800044 	movi	r2,1
81131a98:	e0bff98d 	sth	r2,-26(fp)
81131a9c:	00bfe0c4 	movi	r2,-125
81131aa0:	e0bffa05 	stb	r2,-24(fp)
81131aa4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81131aa8:	d0a07943 	ldbu	r2,-32283(gp)
81131aac:	10803fcc 	andi	r2,r2,255
81131ab0:	10000a26 	beq	r2,zero,81131adc <altera_avalon_uart_read+0x1c4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81131ab4:	e0fff98b 	ldhu	r3,-26(fp)
81131ab8:	e13ffa03 	ldbu	r4,-24(fp)
81131abc:	e17ffa8b 	ldhu	r5,-22(fp)
81131ac0:	e0bffb04 	addi	r2,fp,-20
81131ac4:	d8800015 	stw	r2,0(sp)
81131ac8:	280f883a 	mov	r7,r5
81131acc:	200d883a 	mov	r6,r4
81131ad0:	180b883a 	mov	r5,r3
81131ad4:	e13ff217 	ldw	r4,-56(fp)
81131ad8:	112545c0 	call	8112545c <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
81131adc:	e0bff017 	ldw	r2,-64(fp)
81131ae0:	1000021e 	bne	r2,zero,81131aec <altera_avalon_uart_read+0x1d4>
81131ae4:	e0bffe17 	ldw	r2,-8(fp)
81131ae8:	103fb81e 	bne	r2,zero,811319cc <__reset+0xfb1119cc>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
81131aec:	e0bffc17 	ldw	r2,-16(fp)
81131af0:	10800817 	ldw	r2,32(r2)
81131af4:	1009883a 	mov	r4,r2
81131af8:	11293540 	call	81129354 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131afc:	0005303a 	rdctl	r2,status
81131b00:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131b04:	e0fff717 	ldw	r3,-36(fp)
81131b08:	00bfff84 	movi	r2,-2
81131b0c:	1884703a 	and	r2,r3,r2
81131b10:	1001703a 	wrctl	status,r2
  
  return context;
81131b14:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81131b18:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81131b1c:	e0bffc17 	ldw	r2,-16(fp)
81131b20:	10800117 	ldw	r2,4(r2)
81131b24:	10c02014 	ori	r3,r2,128
81131b28:	e0bffc17 	ldw	r2,-16(fp)
81131b2c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81131b30:	e0bffc17 	ldw	r2,-16(fp)
81131b34:	10800017 	ldw	r2,0(r2)
81131b38:	10800304 	addi	r2,r2,12
81131b3c:	e0fffc17 	ldw	r3,-16(fp)
81131b40:	18c00117 	ldw	r3,4(r3)
81131b44:	10c00035 	stwio	r3,0(r2)
81131b48:	e0bff417 	ldw	r2,-48(fp)
81131b4c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131b50:	e0bff317 	ldw	r2,-52(fp)
81131b54:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
81131b58:	e0bfef03 	ldbu	r2,-68(fp)
81131b5c:	10000226 	beq	r2,zero,81131b68 <altera_avalon_uart_read+0x250>
    return -EWOULDBLOCK;
81131b60:	00bffd44 	movi	r2,-11
81131b64:	00000106 	br	81131b6c <altera_avalon_uart_read+0x254>
  }
  else {
    return count;
81131b68:	e0bff017 	ldw	r2,-64(fp)
  }
}
81131b6c:	e037883a 	mov	sp,fp
81131b70:	dfc00117 	ldw	ra,4(sp)
81131b74:	df000017 	ldw	fp,0(sp)
81131b78:	dec00204 	addi	sp,sp,8
81131b7c:	f800283a 	ret

81131b80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81131b80:	defffe04 	addi	sp,sp,-8
81131b84:	dfc00115 	stw	ra,4(sp)
81131b88:	df000015 	stw	fp,0(sp)
81131b8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81131b90:	d0a01517 	ldw	r2,-32684(gp)
81131b94:	10000326 	beq	r2,zero,81131ba4 <alt_get_errno+0x24>
81131b98:	d0a01517 	ldw	r2,-32684(gp)
81131b9c:	103ee83a 	callr	r2
81131ba0:	00000106 	br	81131ba8 <alt_get_errno+0x28>
81131ba4:	d0a06804 	addi	r2,gp,-32352
}
81131ba8:	e037883a 	mov	sp,fp
81131bac:	dfc00117 	ldw	ra,4(sp)
81131bb0:	df000017 	ldw	fp,0(sp)
81131bb4:	dec00204 	addi	sp,sp,8
81131bb8:	f800283a 	ret

81131bbc <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
81131bbc:	deffec04 	addi	sp,sp,-80
81131bc0:	dfc01315 	stw	ra,76(sp)
81131bc4:	df001215 	stw	fp,72(sp)
81131bc8:	df001204 	addi	fp,sp,72
81131bcc:	e13ffc15 	stw	r4,-16(fp)
81131bd0:	e17ffd15 	stw	r5,-12(fp)
81131bd4:	e1bffe15 	stw	r6,-8(fp)
81131bd8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
81131bdc:	e0bffe17 	ldw	r2,-8(fp)
81131be0:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
81131be4:	e0bfff17 	ldw	r2,-4(fp)
81131be8:	1090000c 	andi	r2,r2,16384
81131bec:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
81131bf0:	e0bffc17 	ldw	r2,-16(fp)
81131bf4:	10800917 	ldw	r2,36(r2)
81131bf8:	e0bff815 	stw	r2,-32(fp)
81131bfc:	e03ff90d 	sth	zero,-28(fp)
81131c00:	e0bff90b 	ldhu	r2,-28(fp)
81131c04:	e0fffb44 	addi	r3,fp,-19
81131c08:	180d883a 	mov	r6,r3
81131c0c:	100b883a 	mov	r5,r2
81131c10:	e13ff817 	ldw	r4,-32(fp)
81131c14:	1128fdc0 	call	81128fdc <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81131c18:	00005106 	br	81131d60 <altera_avalon_uart_write+0x1a4>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81131c1c:	e0bffc17 	ldw	r2,-16(fp)
81131c20:	10800517 	ldw	r2,20(r2)
81131c24:	10800044 	addi	r2,r2,1
81131c28:	10800fcc 	andi	r2,r2,63
81131c2c:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81131c30:	e0bffc17 	ldw	r2,-16(fp)
81131c34:	10c00417 	ldw	r3,16(r2)
81131c38:	e0bff217 	ldw	r2,-56(fp)
81131c3c:	1880371e 	bne	r3,r2,81131d1c <altera_avalon_uart_write+0x160>
    {
      if (no_block)
81131c40:	e0bff017 	ldw	r2,-64(fp)
81131c44:	10000526 	beq	r2,zero,81131c5c <altera_avalon_uart_write+0xa0>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
81131c48:	1131b800 	call	81131b80 <alt_get_errno>
81131c4c:	1007883a 	mov	r3,r2
81131c50:	008002c4 	movi	r2,11
81131c54:	18800015 	stw	r2,0(r3)
        break;
81131c58:	00004306 	br	81131d68 <altera_avalon_uart_write+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131c5c:	0005303a 	rdctl	r2,status
81131c60:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131c64:	e0fff517 	ldw	r3,-44(fp)
81131c68:	00bfff84 	movi	r2,-2
81131c6c:	1884703a 	and	r2,r3,r2
81131c70:	1001703a 	wrctl	status,r2
  
  return context;
81131c74:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81131c78:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81131c7c:	e0bffc17 	ldw	r2,-16(fp)
81131c80:	10800117 	ldw	r2,4(r2)
81131c84:	10c11014 	ori	r3,r2,1088
81131c88:	e0bffc17 	ldw	r2,-16(fp)
81131c8c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81131c90:	e0bffc17 	ldw	r2,-16(fp)
81131c94:	10800017 	ldw	r2,0(r2)
81131c98:	10800304 	addi	r2,r2,12
81131c9c:	e0fffc17 	ldw	r3,-16(fp)
81131ca0:	18c00117 	ldw	r3,4(r3)
81131ca4:	10c00035 	stwio	r3,0(r2)
81131ca8:	e0bff417 	ldw	r2,-48(fp)
81131cac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131cb0:	e0bff117 	ldw	r2,-60(fp)
81131cb4:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
81131cb8:	e0bffc17 	ldw	r2,-16(fp)
81131cbc:	10800717 	ldw	r2,28(r2)
81131cc0:	e0bff315 	stw	r2,-52(fp)
81131cc4:	00800084 	movi	r2,2
81131cc8:	e0bff98d 	sth	r2,-26(fp)
81131ccc:	00bfe0c4 	movi	r2,-125
81131cd0:	e0bffa05 	stb	r2,-24(fp)
81131cd4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81131cd8:	d0a07943 	ldbu	r2,-32283(gp)
81131cdc:	10803fcc 	andi	r2,r2,255
81131ce0:	10000a26 	beq	r2,zero,81131d0c <altera_avalon_uart_write+0x150>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81131ce4:	e0fff98b 	ldhu	r3,-26(fp)
81131ce8:	e13ffa03 	ldbu	r4,-24(fp)
81131cec:	e17ffa8b 	ldhu	r5,-22(fp)
81131cf0:	e0bffb04 	addi	r2,fp,-20
81131cf4:	d8800015 	stw	r2,0(sp)
81131cf8:	280f883a 	mov	r7,r5
81131cfc:	200d883a 	mov	r6,r4
81131d00:	180b883a 	mov	r5,r3
81131d04:	e13ff317 	ldw	r4,-52(fp)
81131d08:	112545c0 	call	8112545c <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
81131d0c:	e0bffc17 	ldw	r2,-16(fp)
81131d10:	10c00417 	ldw	r3,16(r2)
81131d14:	e0bff217 	ldw	r2,-56(fp)
81131d18:	18bfe726 	beq	r3,r2,81131cb8 <__reset+0xfb111cb8>
      }
    }

    count--;
81131d1c:	e0bfef17 	ldw	r2,-68(fp)
81131d20:	10bfffc4 	addi	r2,r2,-1
81131d24:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81131d28:	e0bffc17 	ldw	r2,-16(fp)
81131d2c:	10c00517 	ldw	r3,20(r2)
81131d30:	e0bffd17 	ldw	r2,-12(fp)
81131d34:	11000044 	addi	r4,r2,1
81131d38:	e13ffd15 	stw	r4,-12(fp)
81131d3c:	10800003 	ldbu	r2,0(r2)
81131d40:	1009883a 	mov	r4,r2
81131d44:	e0bffc17 	ldw	r2,-16(fp)
81131d48:	10c5883a 	add	r2,r2,r3
81131d4c:	10801a04 	addi	r2,r2,104
81131d50:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
81131d54:	e0bffc17 	ldw	r2,-16(fp)
81131d58:	e0fff217 	ldw	r3,-56(fp)
81131d5c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81131d60:	e0bfef17 	ldw	r2,-68(fp)
81131d64:	103fad1e 	bne	r2,zero,81131c1c <__reset+0xfb111c1c>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81131d68:	e0bffc17 	ldw	r2,-16(fp)
81131d6c:	10800917 	ldw	r2,36(r2)
81131d70:	1009883a 	mov	r4,r2
81131d74:	11293540 	call	81129354 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81131d78:	0005303a 	rdctl	r2,status
81131d7c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81131d80:	e0fff717 	ldw	r3,-36(fp)
81131d84:	00bfff84 	movi	r2,-2
81131d88:	1884703a 	and	r2,r3,r2
81131d8c:	1001703a 	wrctl	status,r2
  
  return context;
81131d90:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
81131d94:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81131d98:	e0bffc17 	ldw	r2,-16(fp)
81131d9c:	10800117 	ldw	r2,4(r2)
81131da0:	10c11014 	ori	r3,r2,1088
81131da4:	e0bffc17 	ldw	r2,-16(fp)
81131da8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81131dac:	e0bffc17 	ldw	r2,-16(fp)
81131db0:	10800017 	ldw	r2,0(r2)
81131db4:	10800304 	addi	r2,r2,12
81131db8:	e0fffc17 	ldw	r3,-16(fp)
81131dbc:	18c00117 	ldw	r3,4(r3)
81131dc0:	10c00035 	stwio	r3,0(r2)
81131dc4:	e0bff417 	ldw	r2,-48(fp)
81131dc8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81131dcc:	e0bff617 	ldw	r2,-40(fp)
81131dd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
81131dd4:	e0fffe17 	ldw	r3,-8(fp)
81131dd8:	e0bfef17 	ldw	r2,-68(fp)
81131ddc:	1885c83a 	sub	r2,r3,r2
}
81131de0:	e037883a 	mov	sp,fp
81131de4:	dfc00117 	ldw	ra,4(sp)
81131de8:	df000017 	ldw	fp,0(sp)
81131dec:	dec00204 	addi	sp,sp,8
81131df0:	f800283a 	ret

81131df4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81131df4:	defffe04 	addi	sp,sp,-8
81131df8:	dfc00115 	stw	ra,4(sp)
81131dfc:	df000015 	stw	fp,0(sp)
81131e00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81131e04:	d0a01517 	ldw	r2,-32684(gp)
81131e08:	10000326 	beq	r2,zero,81131e18 <alt_get_errno+0x24>
81131e0c:	d0a01517 	ldw	r2,-32684(gp)
81131e10:	103ee83a 	callr	r2
81131e14:	00000106 	br	81131e1c <alt_get_errno+0x28>
81131e18:	d0a06804 	addi	r2,gp,-32352
}
81131e1c:	e037883a 	mov	sp,fp
81131e20:	dfc00117 	ldw	ra,4(sp)
81131e24:	df000017 	ldw	fp,0(sp)
81131e28:	dec00204 	addi	sp,sp,8
81131e2c:	f800283a 	ret

81131e30 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81131e30:	defffc04 	addi	sp,sp,-16
81131e34:	df000315 	stw	fp,12(sp)
81131e38:	df000304 	addi	fp,sp,12
81131e3c:	e13ffd15 	stw	r4,-12(fp)
81131e40:	e17ffe15 	stw	r5,-8(fp)
81131e44:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81131e48:	e0bffd17 	ldw	r2,-12(fp)
81131e4c:	10800037 	ldwio	r2,0(r2)
81131e50:	1080010c 	andi	r2,r2,4
81131e54:	10000226 	beq	r2,zero,81131e60 <alt_msgdma_write_standard_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81131e58:	00bff904 	movi	r2,-28
81131e5c:	00001506 	br	81131eb4 <alt_msgdma_write_standard_descriptor+0x84>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81131e60:	e0bfff17 	ldw	r2,-4(fp)
81131e64:	10800017 	ldw	r2,0(r2)
81131e68:	1007883a 	mov	r3,r2
81131e6c:	e0bffe17 	ldw	r2,-8(fp)
81131e70:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81131e74:	e0bffe17 	ldw	r2,-8(fp)
81131e78:	10800104 	addi	r2,r2,4
81131e7c:	e0ffff17 	ldw	r3,-4(fp)
81131e80:	18c00117 	ldw	r3,4(r3)
81131e84:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81131e88:	e0bffe17 	ldw	r2,-8(fp)
81131e8c:	10800204 	addi	r2,r2,8
81131e90:	e0ffff17 	ldw	r3,-4(fp)
81131e94:	18c00217 	ldw	r3,8(r3)
81131e98:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
81131e9c:	e0bffe17 	ldw	r2,-8(fp)
81131ea0:	10800304 	addi	r2,r2,12
81131ea4:	e0ffff17 	ldw	r3,-4(fp)
81131ea8:	18c00317 	ldw	r3,12(r3)
81131eac:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
81131eb0:	0005883a 	mov	r2,zero
}
81131eb4:	e037883a 	mov	sp,fp
81131eb8:	df000017 	ldw	fp,0(sp)
81131ebc:	dec00104 	addi	sp,sp,4
81131ec0:	f800283a 	ret

81131ec4 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
81131ec4:	defffc04 	addi	sp,sp,-16
81131ec8:	df000315 	stw	fp,12(sp)
81131ecc:	df000304 	addi	fp,sp,12
81131ed0:	e13ffd15 	stw	r4,-12(fp)
81131ed4:	e17ffe15 	stw	r5,-8(fp)
81131ed8:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81131edc:	e0bffd17 	ldw	r2,-12(fp)
81131ee0:	10800037 	ldwio	r2,0(r2)
81131ee4:	1080010c 	andi	r2,r2,4
81131ee8:	10000226 	beq	r2,zero,81131ef4 <alt_msgdma_write_extended_descriptor+0x30>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81131eec:	00bff904 	movi	r2,-28
81131ef0:	00003b06 	br	81131fe0 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
81131ef4:	e0bfff17 	ldw	r2,-4(fp)
81131ef8:	10800017 	ldw	r2,0(r2)
81131efc:	1007883a 	mov	r3,r2
81131f00:	e0bffe17 	ldw	r2,-8(fp)
81131f04:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81131f08:	e0bffe17 	ldw	r2,-8(fp)
81131f0c:	10800104 	addi	r2,r2,4
81131f10:	e0ffff17 	ldw	r3,-4(fp)
81131f14:	18c00117 	ldw	r3,4(r3)
81131f18:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81131f1c:	e0bffe17 	ldw	r2,-8(fp)
81131f20:	10800204 	addi	r2,r2,8
81131f24:	e0ffff17 	ldw	r3,-4(fp)
81131f28:	18c00217 	ldw	r3,8(r3)
81131f2c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81131f30:	e0bffe17 	ldw	r2,-8(fp)
81131f34:	10800304 	addi	r2,r2,12
81131f38:	e0ffff17 	ldw	r3,-4(fp)
81131f3c:	18c0030b 	ldhu	r3,12(r3)
81131f40:	18ffffcc 	andi	r3,r3,65535
81131f44:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81131f48:	e0bffe17 	ldw	r2,-8(fp)
81131f4c:	10800384 	addi	r2,r2,14
81131f50:	e0ffff17 	ldw	r3,-4(fp)
81131f54:	18c00383 	ldbu	r3,14(r3)
81131f58:	18c03fcc 	andi	r3,r3,255
81131f5c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81131f60:	e0bffe17 	ldw	r2,-8(fp)
81131f64:	108003c4 	addi	r2,r2,15
81131f68:	e0ffff17 	ldw	r3,-4(fp)
81131f6c:	18c003c3 	ldbu	r3,15(r3)
81131f70:	18c03fcc 	andi	r3,r3,255
81131f74:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81131f78:	e0bffe17 	ldw	r2,-8(fp)
81131f7c:	10800404 	addi	r2,r2,16
81131f80:	e0ffff17 	ldw	r3,-4(fp)
81131f84:	18c0040b 	ldhu	r3,16(r3)
81131f88:	18ffffcc 	andi	r3,r3,65535
81131f8c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
81131f90:	e0bffe17 	ldw	r2,-8(fp)
81131f94:	10800484 	addi	r2,r2,18
81131f98:	e0ffff17 	ldw	r3,-4(fp)
81131f9c:	18c0048b 	ldhu	r3,18(r3)
81131fa0:	18ffffcc 	andi	r3,r3,65535
81131fa4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
81131fa8:	e0bffe17 	ldw	r2,-8(fp)
81131fac:	10800504 	addi	r2,r2,20
81131fb0:	0007883a 	mov	r3,zero
81131fb4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
81131fb8:	e0bffe17 	ldw	r2,-8(fp)
81131fbc:	10800604 	addi	r2,r2,24
81131fc0:	0007883a 	mov	r3,zero
81131fc4:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
81131fc8:	e0bffe17 	ldw	r2,-8(fp)
81131fcc:	10800704 	addi	r2,r2,28
81131fd0:	e0ffff17 	ldw	r3,-4(fp)
81131fd4:	18c00717 	ldw	r3,28(r3)
81131fd8:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
81131fdc:	0005883a 	mov	r2,zero
}
81131fe0:	e037883a 	mov	sp,fp
81131fe4:	df000017 	ldw	fp,0(sp)
81131fe8:	dec00104 	addi	sp,sp,4
81131fec:	f800283a 	ret

81131ff0 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81131ff0:	defff804 	addi	sp,sp,-32
81131ff4:	dfc00715 	stw	ra,28(sp)
81131ff8:	df000615 	stw	fp,24(sp)
81131ffc:	df000604 	addi	fp,sp,24
81132000:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81132004:	e0bfff17 	ldw	r2,-4(fp)
81132008:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8113200c:	e0bffa17 	ldw	r2,-24(fp)
81132010:	10801783 	ldbu	r2,94(r2)
81132014:	10803fcc 	andi	r2,r2,255
81132018:	10001126 	beq	r2,zero,81132060 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8113201c:	e0bffa17 	ldw	r2,-24(fp)
81132020:	10800617 	ldw	r2,24(r2)
81132024:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81132028:	1007883a 	mov	r3,r2
8113202c:	00bffdc4 	movi	r2,-9
81132030:	1884703a 	and	r2,r3,r2
81132034:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81132038:	e0bffa17 	ldw	r2,-24(fp)
8113203c:	10800617 	ldw	r2,24(r2)
81132040:	e0fffb17 	ldw	r3,-20(fp)
81132044:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81132048:	e0bffa17 	ldw	r2,-24(fp)
8113204c:	10800617 	ldw	r2,24(r2)
81132050:	10800404 	addi	r2,r2,16
81132054:	00c00044 	movi	r3,1
81132058:	10c00035 	stwio	r3,0(r2)
8113205c:	00001106 	br	811320a4 <alt_msgdma_irq+0xb4>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81132060:	e0bffa17 	ldw	r2,-24(fp)
81132064:	10800317 	ldw	r2,12(r2)
81132068:	10800104 	addi	r2,r2,4
8113206c:	10800037 	ldwio	r2,0(r2)
81132070:	1007883a 	mov	r3,r2
81132074:	00bffbc4 	movi	r2,-17
81132078:	1884703a 	and	r2,r3,r2
8113207c:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81132080:	e0bffa17 	ldw	r2,-24(fp)
81132084:	10800317 	ldw	r2,12(r2)
81132088:	10800104 	addi	r2,r2,4
8113208c:	e0fffb17 	ldw	r3,-20(fp)
81132090:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81132094:	e0bffa17 	ldw	r2,-24(fp)
81132098:	10800317 	ldw	r2,12(r2)
8113209c:	00c08004 	movi	r3,512
811320a0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
811320a4:	e0bffa17 	ldw	r2,-24(fp)
811320a8:	10800b17 	ldw	r2,44(r2)
811320ac:	10001226 	beq	r2,zero,811320f8 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811320b0:	0005303a 	rdctl	r2,status
811320b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811320b8:	e0fffd17 	ldw	r3,-12(fp)
811320bc:	00bfff84 	movi	r2,-2
811320c0:	1884703a 	and	r2,r3,r2
811320c4:	1001703a 	wrctl	status,r2
  
  return context;
811320c8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
811320cc:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
811320d0:	e0bffa17 	ldw	r2,-24(fp)
811320d4:	10800b17 	ldw	r2,44(r2)
811320d8:	e0fffa17 	ldw	r3,-24(fp)
811320dc:	18c00c17 	ldw	r3,48(r3)
811320e0:	1809883a 	mov	r4,r3
811320e4:	103ee83a 	callr	r2
811320e8:	e0bffc17 	ldw	r2,-16(fp)
811320ec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811320f0:	e0bffe17 	ldw	r2,-8(fp)
811320f4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
811320f8:	e0bffa17 	ldw	r2,-24(fp)
811320fc:	10801783 	ldbu	r2,94(r2)
81132100:	10803fcc 	andi	r2,r2,255
81132104:	10000a26 	beq	r2,zero,81132130 <alt_msgdma_irq+0x140>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81132108:	e0bffa17 	ldw	r2,-24(fp)
8113210c:	10800617 	ldw	r2,24(r2)
81132110:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81132114:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81132118:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8113211c:	e0bffa17 	ldw	r2,-24(fp)
81132120:	10800617 	ldw	r2,24(r2)
81132124:	e0fffb17 	ldw	r3,-20(fp)
81132128:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8113212c:	00000c06 	br	81132160 <alt_msgdma_irq+0x170>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81132130:	e0bffa17 	ldw	r2,-24(fp)
81132134:	10800317 	ldw	r2,12(r2)
81132138:	10800104 	addi	r2,r2,4
8113213c:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81132140:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81132144:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81132148:	e0bffa17 	ldw	r2,-24(fp)
8113214c:	10800317 	ldw	r2,12(r2)
81132150:	10800104 	addi	r2,r2,4
81132154:	e0fffb17 	ldw	r3,-20(fp)
81132158:	10c00035 	stwio	r3,0(r2)
    }

    return;
8113215c:	0001883a 	nop
}
81132160:	e037883a 	mov	sp,fp
81132164:	dfc00117 	ldw	ra,4(sp)
81132168:	df000017 	ldw	fp,0(sp)
8113216c:	dec00204 	addi	sp,sp,8
81132170:	f800283a 	ret

81132174 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81132174:	defffb04 	addi	sp,sp,-20
81132178:	df000415 	stw	fp,16(sp)
8113217c:	df000404 	addi	fp,sp,16
81132180:	e13ffc15 	stw	r4,-16(fp)
81132184:	e17ffd15 	stw	r5,-12(fp)
81132188:	e1bffe15 	stw	r6,-8(fp)
8113218c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81132190:	e0bffc17 	ldw	r2,-16(fp)
81132194:	10c01217 	ldw	r3,72(r2)
81132198:	e0800117 	ldw	r2,4(fp)
8113219c:	18800436 	bltu	r3,r2,811321b0 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
811321a0:	e0bffc17 	ldw	r2,-16(fp)
811321a4:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
811321a8:	10803fcc 	andi	r2,r2,255
811321ac:	10000226 	beq	r2,zero,811321b8 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
811321b0:	00bffa84 	movi	r2,-22
811321b4:	00000e06 	br	811321f0 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
811321b8:	e0bffd17 	ldw	r2,-12(fp)
811321bc:	e0fffe17 	ldw	r3,-8(fp)
811321c0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
811321c4:	e0bffd17 	ldw	r2,-12(fp)
811321c8:	e0ffff17 	ldw	r3,-4(fp)
811321cc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811321d0:	e0bffd17 	ldw	r2,-12(fp)
811321d4:	e0c00117 	ldw	r3,4(fp)
811321d8:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811321dc:	e0800217 	ldw	r2,8(fp)
811321e0:	10e00034 	orhi	r3,r2,32768
811321e4:	e0bffd17 	ldw	r2,-12(fp)
811321e8:	10c00315 	stw	r3,12(r2)
    
    return 0;
811321ec:	0005883a 	mov	r2,zero
}
811321f0:	e037883a 	mov	sp,fp
811321f4:	df000017 	ldw	fp,0(sp)
811321f8:	dec00104 	addi	sp,sp,4
811321fc:	f800283a 	ret

81132200 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81132200:	defff604 	addi	sp,sp,-40
81132204:	df000915 	stw	fp,36(sp)
81132208:	df000904 	addi	fp,sp,36
8113220c:	e13ff715 	stw	r4,-36(fp)
81132210:	e17ff815 	stw	r5,-32(fp)
81132214:	e1bff915 	stw	r6,-28(fp)
81132218:	e1fffa15 	stw	r7,-24(fp)
8113221c:	e1800317 	ldw	r6,12(fp)
81132220:	e1400417 	ldw	r5,16(fp)
81132224:	e1000517 	ldw	r4,20(fp)
81132228:	e0c00617 	ldw	r3,24(fp)
8113222c:	e0800717 	ldw	r2,28(fp)
81132230:	e1bffb0d 	sth	r6,-20(fp)
81132234:	e17ffc05 	stb	r5,-16(fp)
81132238:	e13ffd05 	stb	r4,-12(fp)
8113223c:	e0fffe0d 	sth	r3,-8(fp)
81132240:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81132244:	e0bff717 	ldw	r2,-36(fp)
81132248:	10c01217 	ldw	r3,72(r2)
8113224c:	e0800117 	ldw	r2,4(fp)
81132250:	18801936 	bltu	r3,r2,811322b8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81132254:	e13ff717 	ldw	r4,-36(fp)
81132258:	20801317 	ldw	r2,76(r4)
8113225c:	20c01417 	ldw	r3,80(r4)
81132260:	e13ffe0b 	ldhu	r4,-8(fp)
81132264:	213fffcc 	andi	r4,r4,65535
81132268:	2015883a 	mov	r10,r4
8113226c:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81132270:	1ac01136 	bltu	r3,r11,811322b8 <alt_msgdma_construct_extended_descriptor+0xb8>
81132274:	58c0011e 	bne	r11,r3,8113227c <alt_msgdma_construct_extended_descriptor+0x7c>
81132278:	12800f36 	bltu	r2,r10,811322b8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113227c:	e13ff717 	ldw	r4,-36(fp)
81132280:	20801317 	ldw	r2,76(r4)
81132284:	20c01417 	ldw	r3,80(r4)
81132288:	e13fff0b 	ldhu	r4,-4(fp)
8113228c:	213fffcc 	andi	r4,r4,65535
81132290:	2011883a 	mov	r8,r4
81132294:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81132298:	1a400736 	bltu	r3,r9,811322b8 <alt_msgdma_construct_extended_descriptor+0xb8>
8113229c:	48c0011e 	bne	r9,r3,811322a4 <alt_msgdma_construct_extended_descriptor+0xa4>
811322a0:	12000536 	bltu	r2,r8,811322b8 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
811322a4:	e0bff717 	ldw	r2,-36(fp)
811322a8:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811322ac:	10803fcc 	andi	r2,r2,255
811322b0:	10800060 	cmpeqi	r2,r2,1
811322b4:	1000021e 	bne	r2,zero,811322c0 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
811322b8:	00bffa84 	movi	r2,-22
811322bc:	00002106 	br	81132344 <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
811322c0:	e0bff817 	ldw	r2,-32(fp)
811322c4:	e0fff917 	ldw	r3,-28(fp)
811322c8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
811322cc:	e0bff817 	ldw	r2,-32(fp)
811322d0:	e0fffa17 	ldw	r3,-24(fp)
811322d4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811322d8:	e0bff817 	ldw	r2,-32(fp)
811322dc:	e0c00117 	ldw	r3,4(fp)
811322e0:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
811322e4:	e0bff817 	ldw	r2,-32(fp)
811322e8:	e0fffb0b 	ldhu	r3,-20(fp)
811322ec:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
811322f0:	e0bff817 	ldw	r2,-32(fp)
811322f4:	e0fffc03 	ldbu	r3,-16(fp)
811322f8:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
811322fc:	e0bff817 	ldw	r2,-32(fp)
81132300:	e0fffd03 	ldbu	r3,-12(fp)
81132304:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81132308:	e0bff817 	ldw	r2,-32(fp)
8113230c:	e0fffe0b 	ldhu	r3,-8(fp)
81132310:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81132314:	e0bff817 	ldw	r2,-32(fp)
81132318:	e0ffff0b 	ldhu	r3,-4(fp)
8113231c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81132320:	e0bff817 	ldw	r2,-32(fp)
81132324:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81132328:	e0bff817 	ldw	r2,-32(fp)
8113232c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81132330:	e0800217 	ldw	r2,8(fp)
81132334:	10e00034 	orhi	r3,r2,32768
81132338:	e0bff817 	ldw	r2,-32(fp)
8113233c:	10c00715 	stw	r3,28(r2)

  return 0 ;
81132340:	0005883a 	mov	r2,zero

}
81132344:	e037883a 	mov	sp,fp
81132348:	df000017 	ldw	fp,0(sp)
8113234c:	dec00104 	addi	sp,sp,4
81132350:	f800283a 	ret

81132354 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81132354:	deffee04 	addi	sp,sp,-72
81132358:	dfc01115 	stw	ra,68(sp)
8113235c:	df001015 	stw	fp,64(sp)
81132360:	df001004 	addi	fp,sp,64
81132364:	e13ffd15 	stw	r4,-12(fp)
81132368:	e17ffe15 	stw	r5,-8(fp)
8113236c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81132370:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81132374:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81132378:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
8113237c:	e0bffd17 	ldw	r2,-12(fp)
81132380:	10800317 	ldw	r2,12(r2)
81132384:	10800204 	addi	r2,r2,8
81132388:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
8113238c:	10bfffcc 	andi	r2,r2,65535
81132390:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81132394:	e0bffd17 	ldw	r2,-12(fp)
81132398:	10800317 	ldw	r2,12(r2)
8113239c:	10800204 	addi	r2,r2,8
811323a0:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811323a4:	1004d43a 	srli	r2,r2,16
811323a8:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811323ac:	e0bffd17 	ldw	r2,-12(fp)
811323b0:	10800917 	ldw	r2,36(r2)
811323b4:	e0fff417 	ldw	r3,-48(fp)
811323b8:	1880042e 	bgeu	r3,r2,811323cc <alt_msgdma_descriptor_async_transfer+0x78>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
811323bc:	e0bffd17 	ldw	r2,-12(fp)
811323c0:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811323c4:	e0fff317 	ldw	r3,-52(fp)
811323c8:	18800236 	bltu	r3,r2,811323d4 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
811323cc:	00bff904 	movi	r2,-28
811323d0:	0000a906 	br	81132678 <alt_msgdma_descriptor_async_transfer+0x324>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
811323d4:	e0bffd17 	ldw	r2,-12(fp)
811323d8:	10801817 	ldw	r2,96(r2)
811323dc:	e0bff615 	stw	r2,-40(fp)
811323e0:	e03ffc0d 	sth	zero,-16(fp)
811323e4:	e0bffc0b 	ldhu	r2,-16(fp)
811323e8:	e0fffc84 	addi	r3,fp,-14
811323ec:	180d883a 	mov	r6,r3
811323f0:	100b883a 	mov	r5,r2
811323f4:	e13ff617 	ldw	r4,-40(fp)
811323f8:	1128fdc0 	call	81128fdc <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
811323fc:	00800804 	movi	r2,32
81132400:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132404:	0005303a 	rdctl	r2,status
81132408:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113240c:	e0fff717 	ldw	r3,-36(fp)
81132410:	00bfff84 	movi	r2,-2
81132414:	1884703a 	and	r2,r3,r2
81132418:	1001703a 	wrctl	status,r2
  
  return context;
8113241c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81132420:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81132424:	e0bffd17 	ldw	r2,-12(fp)
81132428:	10800317 	ldw	r2,12(r2)
8113242c:	10800104 	addi	r2,r2,4
81132430:	e0fff117 	ldw	r3,-60(fp)
81132434:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81132438:	e0bffd17 	ldw	r2,-12(fp)
8113243c:	10800317 	ldw	r2,12(r2)
81132440:	e0fffd17 	ldw	r3,-12(fp)
81132444:	18c00317 	ldw	r3,12(r3)
81132448:	18c00037 	ldwio	r3,0(r3)
8113244c:	10c00035 	stwio	r3,0(r2)
81132450:	e0bff217 	ldw	r2,-56(fp)
81132454:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132458:	e0bffb17 	ldw	r2,-20(fp)
8113245c:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81132460:	e0bffe17 	ldw	r2,-8(fp)
81132464:	10001e26 	beq	r2,zero,811324e0 <alt_msgdma_descriptor_async_transfer+0x18c>
81132468:	e0bfff17 	ldw	r2,-4(fp)
8113246c:	10001c1e 	bne	r2,zero,811324e0 <alt_msgdma_descriptor_async_transfer+0x18c>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81132470:	00001106 	br	811324b8 <alt_msgdma_descriptor_async_transfer+0x164>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81132474:	01000044 	movi	r4,1
81132478:	1133f1c0 	call	81133f1c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113247c:	e0bff00b 	ldhu	r2,-64(fp)
81132480:	1084e230 	cmpltui	r2,r2,5000
81132484:	1000091e 	bne	r2,zero,811324ac <alt_msgdma_descriptor_async_transfer+0x158>
            {
                alt_printf("time out after 5 msec while waiting" 
81132488:	012044f4 	movhi	r4,33043
8113248c:	211eb604 	addi	r4,r4,31448
81132490:	11348600 	call	81134860 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81132494:	e0bffd17 	ldw	r2,-12(fp)
81132498:	10801817 	ldw	r2,96(r2)
8113249c:	1009883a 	mov	r4,r2
811324a0:	11293540 	call	81129354 <OSSemPost>
				
                return -ETIME;
811324a4:	00bff084 	movi	r2,-62
811324a8:	00007306 	br	81132678 <alt_msgdma_descriptor_async_transfer+0x324>
            }
            counter++; 
811324ac:	e0bff00b 	ldhu	r2,-64(fp)
811324b0:	10800044 	addi	r2,r2,1
811324b4:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
811324b8:	e0bffd17 	ldw	r2,-12(fp)
811324bc:	10c00317 	ldw	r3,12(r2)
811324c0:	e0bffd17 	ldw	r2,-12(fp)
811324c4:	10800417 	ldw	r2,16(r2)
811324c8:	e1bffe17 	ldw	r6,-8(fp)
811324cc:	100b883a 	mov	r5,r2
811324d0:	1809883a 	mov	r4,r3
811324d4:	1131e300 	call	81131e30 <alt_msgdma_write_standard_descriptor>
811324d8:	103fe61e 	bne	r2,zero,81132474 <__reset+0xfb112474>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
811324dc:	00002706 	br	8113257c <alt_msgdma_descriptor_async_transfer+0x228>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811324e0:	e0bffe17 	ldw	r2,-8(fp)
811324e4:	10001f1e 	bne	r2,zero,81132564 <alt_msgdma_descriptor_async_transfer+0x210>
811324e8:	e0bfff17 	ldw	r2,-4(fp)
811324ec:	10001d26 	beq	r2,zero,81132564 <alt_msgdma_descriptor_async_transfer+0x210>
    {
        counter = 0; /* reset counter */
811324f0:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811324f4:	00001106 	br	8113253c <alt_msgdma_descriptor_async_transfer+0x1e8>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811324f8:	01000044 	movi	r4,1
811324fc:	1133f1c0 	call	81133f1c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81132500:	e0bff00b 	ldhu	r2,-64(fp)
81132504:	1084e230 	cmpltui	r2,r2,5000
81132508:	1000091e 	bne	r2,zero,81132530 <alt_msgdma_descriptor_async_transfer+0x1dc>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
8113250c:	012044f4 	movhi	r4,33043
81132510:	211ecc04 	addi	r4,r4,31536
81132514:	11348600 	call	81134860 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81132518:	e0bffd17 	ldw	r2,-12(fp)
8113251c:	10801817 	ldw	r2,96(r2)
81132520:	1009883a 	mov	r4,r2
81132524:	11293540 	call	81129354 <OSSemPost>
				
                return -ETIME;
81132528:	00bff084 	movi	r2,-62
8113252c:	00005206 	br	81132678 <alt_msgdma_descriptor_async_transfer+0x324>
            }
            counter++; 
81132530:	e0bff00b 	ldhu	r2,-64(fp)
81132534:	10800044 	addi	r2,r2,1
81132538:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113253c:	e0bffd17 	ldw	r2,-12(fp)
81132540:	10c00317 	ldw	r3,12(r2)
81132544:	e0bffd17 	ldw	r2,-12(fp)
81132548:	10800417 	ldw	r2,16(r2)
8113254c:	e1bfff17 	ldw	r6,-4(fp)
81132550:	100b883a 	mov	r5,r2
81132554:	1809883a 	mov	r4,r3
81132558:	1131ec40 	call	81131ec4 <alt_msgdma_write_extended_descriptor>
8113255c:	103fe61e 	bne	r2,zero,811324f8 <__reset+0xfb1124f8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81132560:	00000606 	br	8113257c <alt_msgdma_descriptor_async_transfer+0x228>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81132564:	e0bffd17 	ldw	r2,-12(fp)
81132568:	10801817 	ldw	r2,96(r2)
8113256c:	1009883a 	mov	r4,r2
81132570:	11293540 	call	81129354 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81132574:	00bfffc4 	movi	r2,-1
81132578:	00003f06 	br	81132678 <alt_msgdma_descriptor_async_transfer+0x324>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
8113257c:	e0bffd17 	ldw	r2,-12(fp)
81132580:	10800b17 	ldw	r2,44(r2)
81132584:	10001c26 	beq	r2,zero,811325f8 <alt_msgdma_descriptor_async_transfer+0x2a4>
    {

        control |= (dev->control |
81132588:	e0bffd17 	ldw	r2,-12(fp)
8113258c:	10c00d17 	ldw	r3,52(r2)
81132590:	e0bff117 	ldw	r2,-60(fp)
81132594:	1884b03a 	or	r2,r3,r2
81132598:	10800514 	ori	r2,r2,20
8113259c:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
811325a0:	e0fff117 	ldw	r3,-60(fp)
811325a4:	00bff7c4 	movi	r2,-33
811325a8:	1884703a 	and	r2,r3,r2
811325ac:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811325b0:	0005303a 	rdctl	r2,status
811325b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811325b8:	e0fff917 	ldw	r3,-28(fp)
811325bc:	00bfff84 	movi	r2,-2
811325c0:	1884703a 	and	r2,r3,r2
811325c4:	1001703a 	wrctl	status,r2
  
  return context;
811325c8:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
811325cc:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811325d0:	e0bffd17 	ldw	r2,-12(fp)
811325d4:	10800317 	ldw	r2,12(r2)
811325d8:	10800104 	addi	r2,r2,4
811325dc:	e0fff117 	ldw	r3,-60(fp)
811325e0:	10c00035 	stwio	r3,0(r2)
811325e4:	e0bff217 	ldw	r2,-56(fp)
811325e8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811325ec:	e0bff517 	ldw	r2,-44(fp)
811325f0:	1001703a 	wrctl	status,r2
811325f4:	00001b06 	br	81132664 <alt_msgdma_descriptor_async_transfer+0x310>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
811325f8:	e0bffd17 	ldw	r2,-12(fp)
811325fc:	10c00d17 	ldw	r3,52(r2)
81132600:	e0bff117 	ldw	r2,-60(fp)
81132604:	1884b03a 	or	r2,r3,r2
81132608:	10800114 	ori	r2,r2,4
8113260c:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81132610:	e0fff117 	ldw	r3,-60(fp)
81132614:	00bff3c4 	movi	r2,-49
81132618:	1884703a 	and	r2,r3,r2
8113261c:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132620:	0005303a 	rdctl	r2,status
81132624:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132628:	e0fffa17 	ldw	r3,-24(fp)
8113262c:	00bfff84 	movi	r2,-2
81132630:	1884703a 	and	r2,r3,r2
81132634:	1001703a 	wrctl	status,r2
  
  return context;
81132638:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
8113263c:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81132640:	e0bffd17 	ldw	r2,-12(fp)
81132644:	10800317 	ldw	r2,12(r2)
81132648:	10800104 	addi	r2,r2,4
8113264c:	e0fff117 	ldw	r3,-60(fp)
81132650:	10c00035 	stwio	r3,0(r2)
81132654:	e0bff217 	ldw	r2,-56(fp)
81132658:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113265c:	e0bff817 	ldw	r2,-32(fp)
81132660:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81132664:	e0bffd17 	ldw	r2,-12(fp)
81132668:	10801817 	ldw	r2,96(r2)
8113266c:	1009883a 	mov	r4,r2
81132670:	11293540 	call	81129354 <OSSemPost>
    
    return 0;
81132674:	0005883a 	mov	r2,zero
}
81132678:	e037883a 	mov	sp,fp
8113267c:	dfc00117 	ldw	ra,4(sp)
81132680:	df000017 	ldw	fp,0(sp)
81132684:	dec00204 	addi	sp,sp,8
81132688:	f800283a 	ret

8113268c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
8113268c:	deffee04 	addi	sp,sp,-72
81132690:	dfc01115 	stw	ra,68(sp)
81132694:	df001015 	stw	fp,64(sp)
81132698:	df001004 	addi	fp,sp,64
8113269c:	e13ffd15 	stw	r4,-12(fp)
811326a0:	e17ffe15 	stw	r5,-8(fp)
811326a4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
811326a8:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
811326ac:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
811326b0:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
811326b4:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811326b8:	e0bffd17 	ldw	r2,-12(fp)
811326bc:	10800317 	ldw	r2,12(r2)
811326c0:	10800204 	addi	r2,r2,8
811326c4:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
811326c8:	10bfffcc 	andi	r2,r2,65535
811326cc:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
811326d0:	e0bffd17 	ldw	r2,-12(fp)
811326d4:	10800317 	ldw	r2,12(r2)
811326d8:	10800204 	addi	r2,r2,8
811326dc:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
811326e0:	1004d43a 	srli	r2,r2,16
811326e4:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
811326e8:	00807804 	movi	r2,480
811326ec:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
811326f0:	00001906 	br	81132758 <alt_msgdma_descriptor_sync_transfer+0xcc>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
811326f4:	01000044 	movi	r4,1
811326f8:	1133f1c0 	call	81133f1c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811326fc:	e0bff10b 	ldhu	r2,-60(fp)
81132700:	1084e230 	cmpltui	r2,r2,5000
81132704:	1000051e 	bne	r2,zero,8113271c <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81132708:	012044f4 	movhi	r4,33043
8113270c:	211ee204 	addi	r4,r4,31624
81132710:	11348600 	call	81134860 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81132714:	00bff084 	movi	r2,-62
81132718:	0000d706 	br	81132a78 <alt_msgdma_descriptor_sync_transfer+0x3ec>
        }
        counter++;  
8113271c:	e0bff10b 	ldhu	r2,-60(fp)
81132720:	10800044 	addi	r2,r2,1
81132724:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81132728:	e0bffd17 	ldw	r2,-12(fp)
8113272c:	10800317 	ldw	r2,12(r2)
81132730:	10800204 	addi	r2,r2,8
81132734:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81132738:	10bfffcc 	andi	r2,r2,65535
8113273c:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81132740:	e0bffd17 	ldw	r2,-12(fp)
81132744:	10800317 	ldw	r2,12(r2)
81132748:	10800204 	addi	r2,r2,8
8113274c:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81132750:	1004d43a 	srli	r2,r2,16
81132754:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81132758:	e0bffd17 	ldw	r2,-12(fp)
8113275c:	10800917 	ldw	r2,36(r2)
81132760:	e0fff317 	ldw	r3,-52(fp)
81132764:	18bfe32e 	bgeu	r3,r2,811326f4 <__reset+0xfb1126f4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81132768:	e0bffd17 	ldw	r2,-12(fp)
8113276c:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81132770:	e0fff217 	ldw	r3,-56(fp)
81132774:	18bfdf2e 	bgeu	r3,r2,811326f4 <__reset+0xfb1126f4>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
81132778:	e0bffd17 	ldw	r2,-12(fp)
8113277c:	10801817 	ldw	r2,96(r2)
81132780:	e0bff815 	stw	r2,-32(fp)
81132784:	e03ffc0d 	sth	zero,-16(fp)
81132788:	e0bffc0b 	ldhu	r2,-16(fp)
8113278c:	e0fffc84 	addi	r3,fp,-14
81132790:	180d883a 	mov	r6,r3
81132794:	100b883a 	mov	r5,r2
81132798:	e13ff817 	ldw	r4,-32(fp)
8113279c:	1128fdc0 	call	81128fdc <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811327a0:	0005303a 	rdctl	r2,status
811327a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811327a8:	e0fffb17 	ldw	r3,-20(fp)
811327ac:	00bfff84 	movi	r2,-2
811327b0:	1884703a 	and	r2,r3,r2
811327b4:	1001703a 	wrctl	status,r2
  
  return context;
811327b8:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
811327bc:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811327c0:	e0bffd17 	ldw	r2,-12(fp)
811327c4:	10800317 	ldw	r2,12(r2)
811327c8:	10800104 	addi	r2,r2,4
811327cc:	00c00804 	movi	r3,32
811327d0:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
811327d4:	e0bffd17 	ldw	r2,-12(fp)
811327d8:	10800317 	ldw	r2,12(r2)
811327dc:	e0fffd17 	ldw	r3,-12(fp)
811327e0:	18c00317 	ldw	r3,12(r3)
811327e4:	18c00037 	ldwio	r3,0(r3)
811327e8:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
811327ec:	e0bffe17 	ldw	r2,-8(fp)
811327f0:	10001f26 	beq	r2,zero,81132870 <alt_msgdma_descriptor_sync_transfer+0x1e4>
811327f4:	e0bfff17 	ldw	r2,-4(fp)
811327f8:	10001d1e 	bne	r2,zero,81132870 <alt_msgdma_descriptor_sync_transfer+0x1e4>
    {
        counter = 0; /* reset counter */
811327fc:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81132800:	00001106 	br	81132848 <alt_msgdma_descriptor_sync_transfer+0x1bc>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81132804:	01000044 	movi	r4,1
81132808:	1133f1c0 	call	81133f1c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113280c:	e0bff10b 	ldhu	r2,-60(fp)
81132810:	1084e230 	cmpltui	r2,r2,5000
81132814:	1000091e 	bne	r2,zero,8113283c <alt_msgdma_descriptor_sync_transfer+0x1b0>
            {
                alt_printf("time out after 5 msec while writing standard" 
81132818:	012044f4 	movhi	r4,33043
8113281c:	211ef604 	addi	r4,r4,31704
81132820:	11348600 	call	81134860 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81132824:	e0bffd17 	ldw	r2,-12(fp)
81132828:	10801817 	ldw	r2,96(r2)
8113282c:	1009883a 	mov	r4,r2
81132830:	11293540 	call	81129354 <OSSemPost>
				
                return -ETIME;
81132834:	00bff084 	movi	r2,-62
81132838:	00008f06 	br	81132a78 <alt_msgdma_descriptor_sync_transfer+0x3ec>
            }
            counter++;    
8113283c:	e0bff10b 	ldhu	r2,-60(fp)
81132840:	10800044 	addi	r2,r2,1
81132844:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81132848:	e0bffd17 	ldw	r2,-12(fp)
8113284c:	10c00317 	ldw	r3,12(r2)
81132850:	e0bffd17 	ldw	r2,-12(fp)
81132854:	10800417 	ldw	r2,16(r2)
81132858:	e1bffe17 	ldw	r6,-8(fp)
8113285c:	100b883a 	mov	r5,r2
81132860:	1809883a 	mov	r4,r3
81132864:	1131e300 	call	81131e30 <alt_msgdma_write_standard_descriptor>
81132868:	103fe61e 	bne	r2,zero,81132804 <__reset+0xfb112804>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113286c:	00002706 	br	8113290c <alt_msgdma_descriptor_sync_transfer+0x280>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81132870:	e0bffe17 	ldw	r2,-8(fp)
81132874:	10001f1e 	bne	r2,zero,811328f4 <alt_msgdma_descriptor_sync_transfer+0x268>
81132878:	e0bfff17 	ldw	r2,-4(fp)
8113287c:	10001d26 	beq	r2,zero,811328f4 <alt_msgdma_descriptor_sync_transfer+0x268>
    {
        counter = 0; /* reset counter */
81132880:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81132884:	00001106 	br	811328cc <alt_msgdma_descriptor_sync_transfer+0x240>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81132888:	01000044 	movi	r4,1
8113288c:	1133f1c0 	call	81133f1c <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81132890:	e0bff10b 	ldhu	r2,-60(fp)
81132894:	1084e230 	cmpltui	r2,r2,5000
81132898:	1000091e 	bne	r2,zero,811328c0 <alt_msgdma_descriptor_sync_transfer+0x234>
            {
                alt_printf("time out after 5 msec while writing extended" 
8113289c:	012044f4 	movhi	r4,33043
811328a0:	211f0704 	addi	r4,r4,31772
811328a4:	11348600 	call	81134860 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
811328a8:	e0bffd17 	ldw	r2,-12(fp)
811328ac:	10801817 	ldw	r2,96(r2)
811328b0:	1009883a 	mov	r4,r2
811328b4:	11293540 	call	81129354 <OSSemPost>
				
                return -ETIME;
811328b8:	00bff084 	movi	r2,-62
811328bc:	00006e06 	br	81132a78 <alt_msgdma_descriptor_sync_transfer+0x3ec>
            }
            counter++;
811328c0:	e0bff10b 	ldhu	r2,-60(fp)
811328c4:	10800044 	addi	r2,r2,1
811328c8:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811328cc:	e0bffd17 	ldw	r2,-12(fp)
811328d0:	10c00317 	ldw	r3,12(r2)
811328d4:	e0bffd17 	ldw	r2,-12(fp)
811328d8:	10800417 	ldw	r2,16(r2)
811328dc:	e1bfff17 	ldw	r6,-4(fp)
811328e0:	100b883a 	mov	r5,r2
811328e4:	1809883a 	mov	r4,r3
811328e8:	1131ec40 	call	81131ec4 <alt_msgdma_write_extended_descriptor>
811328ec:	103fe61e 	bne	r2,zero,81132888 <__reset+0xfb112888>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811328f0:	00000606 	br	8113290c <alt_msgdma_descriptor_sync_transfer+0x280>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
811328f4:	e0bffd17 	ldw	r2,-12(fp)
811328f8:	10801817 	ldw	r2,96(r2)
811328fc:	1009883a 	mov	r4,r2
81132900:	11293540 	call	81129354 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81132904:	00bfffc4 	movi	r2,-1
81132908:	00005b06 	br	81132a78 <alt_msgdma_descriptor_sync_transfer+0x3ec>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113290c:	e0bffd17 	ldw	r2,-12(fp)
81132910:	10800317 	ldw	r2,12(r2)
81132914:	10800104 	addi	r2,r2,4
81132918:	e0fffd17 	ldw	r3,-12(fp)
8113291c:	19000d17 	ldw	r4,52(r3)
81132920:	00fff2c4 	movi	r3,-53
81132924:	20c6703a 	and	r3,r4,r3
81132928:	18c00114 	ori	r3,r3,4
8113292c:	10c00035 	stwio	r3,0(r2)
81132930:	e0bff517 	ldw	r2,-44(fp)
81132934:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132938:	e0bff717 	ldw	r2,-36(fp)
8113293c:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81132940:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81132944:	e0bffd17 	ldw	r2,-12(fp)
81132948:	10800317 	ldw	r2,12(r2)
8113294c:	10800037 	ldwio	r2,0(r2)
81132950:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81132954:	00001506 	br	811329ac <alt_msgdma_descriptor_sync_transfer+0x320>
    {
        alt_busy_sleep(1); /* delay 1us */
81132958:	01000044 	movi	r4,1
8113295c:	1133f1c0 	call	81133f1c <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81132960:	e0bff10b 	ldhu	r2,-60(fp)
81132964:	1084e230 	cmpltui	r2,r2,5000
81132968:	1000091e 	bne	r2,zero,81132990 <alt_msgdma_descriptor_sync_transfer+0x304>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
8113296c:	012044f4 	movhi	r4,33043
81132970:	211f1804 	addi	r4,r4,31840
81132974:	11348600 	call	81134860 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
81132978:	e0bffd17 	ldw	r2,-12(fp)
8113297c:	10801817 	ldw	r2,96(r2)
81132980:	1009883a 	mov	r4,r2
81132984:	11293540 	call	81129354 <OSSemPost>
			
            return -ETIME;
81132988:	00bff084 	movi	r2,-62
8113298c:	00003a06 	br	81132a78 <alt_msgdma_descriptor_sync_transfer+0x3ec>
        }
        counter++;
81132990:	e0bff10b 	ldhu	r2,-60(fp)
81132994:	10800044 	addi	r2,r2,1
81132998:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
8113299c:	e0bffd17 	ldw	r2,-12(fp)
811329a0:	10800317 	ldw	r2,12(r2)
811329a4:	10800037 	ldwio	r2,0(r2)
811329a8:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
811329ac:	e0fff017 	ldw	r3,-64(fp)
811329b0:	e0bff617 	ldw	r2,-40(fp)
811329b4:	1884703a 	and	r2,r3,r2
811329b8:	1000031e 	bne	r2,zero,811329c8 <alt_msgdma_descriptor_sync_transfer+0x33c>
811329bc:	e0bff017 	ldw	r2,-64(fp)
811329c0:	1080004c 	andi	r2,r2,1
811329c4:	103fe41e 	bne	r2,zero,81132958 <__reset+0xfb112958>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
811329c8:	e0fff017 	ldw	r3,-64(fp)
811329cc:	e0bff617 	ldw	r2,-40(fp)
811329d0:	1884703a 	and	r2,r3,r2
811329d4:	10000626 	beq	r2,zero,811329f0 <alt_msgdma_descriptor_sync_transfer+0x364>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
811329d8:	e0bffd17 	ldw	r2,-12(fp)
811329dc:	10801817 	ldw	r2,96(r2)
811329e0:	1009883a 	mov	r4,r2
811329e4:	11293540 	call	81129354 <OSSemPost>
		
        return error;
811329e8:	e0bff617 	ldw	r2,-40(fp)
811329ec:	00002206 	br	81132a78 <alt_msgdma_descriptor_sync_transfer+0x3ec>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
811329f0:	e0bffd17 	ldw	r2,-12(fp)
811329f4:	10800317 	ldw	r2,12(r2)
811329f8:	10800104 	addi	r2,r2,4
811329fc:	10800037 	ldwio	r2,0(r2)
81132a00:	10800814 	ori	r2,r2,32
81132a04:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81132a08:	0005303a 	rdctl	r2,status
81132a0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81132a10:	e0fffa17 	ldw	r3,-24(fp)
81132a14:	00bfff84 	movi	r2,-2
81132a18:	1884703a 	and	r2,r3,r2
81132a1c:	1001703a 	wrctl	status,r2
  
  return context;
81132a20:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81132a24:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81132a28:	e0bffd17 	ldw	r2,-12(fp)
81132a2c:	10800317 	ldw	r2,12(r2)
81132a30:	10800104 	addi	r2,r2,4
81132a34:	e0fff417 	ldw	r3,-48(fp)
81132a38:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81132a3c:	e0bffd17 	ldw	r2,-12(fp)
81132a40:	10800317 	ldw	r2,12(r2)
81132a44:	e0fffd17 	ldw	r3,-12(fp)
81132a48:	18c00317 	ldw	r3,12(r3)
81132a4c:	18c00037 	ldwio	r3,0(r3)
81132a50:	10c00035 	stwio	r3,0(r2)
81132a54:	e0bff517 	ldw	r2,-44(fp)
81132a58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81132a5c:	e0bff917 	ldw	r2,-28(fp)
81132a60:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
81132a64:	e0bffd17 	ldw	r2,-12(fp)
81132a68:	10801817 	ldw	r2,96(r2)
81132a6c:	1009883a 	mov	r4,r2
81132a70:	11293540 	call	81129354 <OSSemPost>
    
    return 0;
81132a74:	0005883a 	mov	r2,zero

}
81132a78:	e037883a 	mov	sp,fp
81132a7c:	dfc00117 	ldw	ra,4(sp)
81132a80:	df000017 	ldw	fp,0(sp)
81132a84:	dec00204 	addi	sp,sp,8
81132a88:	f800283a 	ret

81132a8c <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
81132a8c:	defff804 	addi	sp,sp,-32
81132a90:	dfc00715 	stw	ra,28(sp)
81132a94:	df000615 	stw	fp,24(sp)
81132a98:	df000604 	addi	fp,sp,24
81132a9c:	e13ffc15 	stw	r4,-16(fp)
81132aa0:	e17ffd15 	stw	r5,-12(fp)
81132aa4:	e1bffe15 	stw	r6,-8(fp)
81132aa8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
81132aac:	e0800217 	ldw	r2,8(fp)
81132ab0:	d8800115 	stw	r2,4(sp)
81132ab4:	e0bfff17 	ldw	r2,-4(fp)
81132ab8:	d8800015 	stw	r2,0(sp)
81132abc:	e1fffe17 	ldw	r7,-8(fp)
81132ac0:	000d883a 	mov	r6,zero
81132ac4:	e17ffd17 	ldw	r5,-12(fp)
81132ac8:	e13ffc17 	ldw	r4,-16(fp)
81132acc:	11321740 	call	81132174 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81132ad0:	e037883a 	mov	sp,fp
81132ad4:	dfc00117 	ldw	ra,4(sp)
81132ad8:	df000017 	ldw	fp,0(sp)
81132adc:	dec00204 	addi	sp,sp,8
81132ae0:	f800283a 	ret

81132ae4 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
81132ae4:	defff804 	addi	sp,sp,-32
81132ae8:	dfc00715 	stw	ra,28(sp)
81132aec:	df000615 	stw	fp,24(sp)
81132af0:	df000604 	addi	fp,sp,24
81132af4:	e13ffc15 	stw	r4,-16(fp)
81132af8:	e17ffd15 	stw	r5,-12(fp)
81132afc:	e1bffe15 	stw	r6,-8(fp)
81132b00:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81132b04:	e0800217 	ldw	r2,8(fp)
81132b08:	d8800115 	stw	r2,4(sp)
81132b0c:	e0bfff17 	ldw	r2,-4(fp)
81132b10:	d8800015 	stw	r2,0(sp)
81132b14:	000f883a 	mov	r7,zero
81132b18:	e1bffe17 	ldw	r6,-8(fp)
81132b1c:	e17ffd17 	ldw	r5,-12(fp)
81132b20:	e13ffc17 	ldw	r4,-16(fp)
81132b24:	11321740 	call	81132174 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81132b28:	e037883a 	mov	sp,fp
81132b2c:	dfc00117 	ldw	ra,4(sp)
81132b30:	df000017 	ldw	fp,0(sp)
81132b34:	dec00204 	addi	sp,sp,8
81132b38:	f800283a 	ret

81132b3c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81132b3c:	defff804 	addi	sp,sp,-32
81132b40:	dfc00715 	stw	ra,28(sp)
81132b44:	df000615 	stw	fp,24(sp)
81132b48:	df000604 	addi	fp,sp,24
81132b4c:	e13ffc15 	stw	r4,-16(fp)
81132b50:	e17ffd15 	stw	r5,-12(fp)
81132b54:	e1bffe15 	stw	r6,-8(fp)
81132b58:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81132b5c:	e0800317 	ldw	r2,12(fp)
81132b60:	d8800115 	stw	r2,4(sp)
81132b64:	e0800217 	ldw	r2,8(fp)
81132b68:	d8800015 	stw	r2,0(sp)
81132b6c:	e1ffff17 	ldw	r7,-4(fp)
81132b70:	e1bffe17 	ldw	r6,-8(fp)
81132b74:	e17ffd17 	ldw	r5,-12(fp)
81132b78:	e13ffc17 	ldw	r4,-16(fp)
81132b7c:	11321740 	call	81132174 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81132b80:	e037883a 	mov	sp,fp
81132b84:	dfc00117 	ldw	ra,4(sp)
81132b88:	df000017 	ldw	fp,0(sp)
81132b8c:	dec00204 	addi	sp,sp,8
81132b90:	f800283a 	ret

81132b94 <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
81132b94:	defff004 	addi	sp,sp,-64
81132b98:	dfc00f15 	stw	ra,60(sp)
81132b9c:	df000e15 	stw	fp,56(sp)
81132ba0:	df000e04 	addi	fp,sp,56
81132ba4:	e13ff915 	stw	r4,-28(fp)
81132ba8:	e17ffa15 	stw	r5,-24(fp)
81132bac:	e1bffb15 	stw	r6,-20(fp)
81132bb0:	e1fffc15 	stw	r7,-16(fp)
81132bb4:	e1000317 	ldw	r4,12(fp)
81132bb8:	e0c00417 	ldw	r3,16(fp)
81132bbc:	e0800517 	ldw	r2,20(fp)
81132bc0:	e13ffd0d 	sth	r4,-12(fp)
81132bc4:	e0fffe05 	stb	r3,-8(fp)
81132bc8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81132bcc:	e0bffd0b 	ldhu	r2,-12(fp)
81132bd0:	e0fffe03 	ldbu	r3,-8(fp)
81132bd4:	e13fff0b 	ldhu	r4,-4(fp)
81132bd8:	d9000615 	stw	r4,24(sp)
81132bdc:	d8000515 	stw	zero,20(sp)
81132be0:	d8c00415 	stw	r3,16(sp)
81132be4:	d8000315 	stw	zero,12(sp)
81132be8:	d8800215 	stw	r2,8(sp)
81132bec:	e0800217 	ldw	r2,8(fp)
81132bf0:	d8800115 	stw	r2,4(sp)
81132bf4:	e0bffc17 	ldw	r2,-16(fp)
81132bf8:	d8800015 	stw	r2,0(sp)
81132bfc:	e1fffb17 	ldw	r7,-20(fp)
81132c00:	000d883a 	mov	r6,zero
81132c04:	e17ffa17 	ldw	r5,-24(fp)
81132c08:	e13ff917 	ldw	r4,-28(fp)
81132c0c:	11322000 	call	81132200 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81132c10:	e037883a 	mov	sp,fp
81132c14:	dfc00117 	ldw	ra,4(sp)
81132c18:	df000017 	ldw	fp,0(sp)
81132c1c:	dec00204 	addi	sp,sp,8
81132c20:	f800283a 	ret

81132c24 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81132c24:	defff004 	addi	sp,sp,-64
81132c28:	dfc00f15 	stw	ra,60(sp)
81132c2c:	df000e15 	stw	fp,56(sp)
81132c30:	df000e04 	addi	fp,sp,56
81132c34:	e13ff915 	stw	r4,-28(fp)
81132c38:	e17ffa15 	stw	r5,-24(fp)
81132c3c:	e1bffb15 	stw	r6,-20(fp)
81132c40:	e1fffc15 	stw	r7,-16(fp)
81132c44:	e1000317 	ldw	r4,12(fp)
81132c48:	e0c00417 	ldw	r3,16(fp)
81132c4c:	e0800517 	ldw	r2,20(fp)
81132c50:	e13ffd0d 	sth	r4,-12(fp)
81132c54:	e0fffe05 	stb	r3,-8(fp)
81132c58:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
81132c5c:	e0bffd0b 	ldhu	r2,-12(fp)
81132c60:	e0fffe03 	ldbu	r3,-8(fp)
81132c64:	e13fff0b 	ldhu	r4,-4(fp)
81132c68:	d8000615 	stw	zero,24(sp)
81132c6c:	d9000515 	stw	r4,20(sp)
81132c70:	d8000415 	stw	zero,16(sp)
81132c74:	d8c00315 	stw	r3,12(sp)
81132c78:	d8800215 	stw	r2,8(sp)
81132c7c:	e0800217 	ldw	r2,8(fp)
81132c80:	d8800115 	stw	r2,4(sp)
81132c84:	e0bffc17 	ldw	r2,-16(fp)
81132c88:	d8800015 	stw	r2,0(sp)
81132c8c:	000f883a 	mov	r7,zero
81132c90:	e1bffb17 	ldw	r6,-20(fp)
81132c94:	e17ffa17 	ldw	r5,-24(fp)
81132c98:	e13ff917 	ldw	r4,-28(fp)
81132c9c:	11322000 	call	81132200 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81132ca0:	e037883a 	mov	sp,fp
81132ca4:	dfc00117 	ldw	ra,4(sp)
81132ca8:	df000017 	ldw	fp,0(sp)
81132cac:	dec00204 	addi	sp,sp,8
81132cb0:	f800283a 	ret

81132cb4 <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
81132cb4:	deffee04 	addi	sp,sp,-72
81132cb8:	dfc01115 	stw	ra,68(sp)
81132cbc:	df001015 	stw	fp,64(sp)
81132cc0:	df001004 	addi	fp,sp,64
81132cc4:	e13ff715 	stw	r4,-36(fp)
81132cc8:	e17ff815 	stw	r5,-32(fp)
81132ccc:	e1bff915 	stw	r6,-28(fp)
81132cd0:	e1fffa15 	stw	r7,-24(fp)
81132cd4:	e1800417 	ldw	r6,16(fp)
81132cd8:	e1400517 	ldw	r5,20(fp)
81132cdc:	e1000617 	ldw	r4,24(fp)
81132ce0:	e0c00717 	ldw	r3,28(fp)
81132ce4:	e0800817 	ldw	r2,32(fp)
81132ce8:	e1bffb0d 	sth	r6,-20(fp)
81132cec:	e17ffc05 	stb	r5,-16(fp)
81132cf0:	e13ffd05 	stb	r4,-12(fp)
81132cf4:	e0fffe0d 	sth	r3,-8(fp)
81132cf8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
81132cfc:	e0bffb0b 	ldhu	r2,-20(fp)
81132d00:	e0fffc03 	ldbu	r3,-16(fp)
81132d04:	e13ffd03 	ldbu	r4,-12(fp)
81132d08:	e17ffe0b 	ldhu	r5,-8(fp)
81132d0c:	e1bfff0b 	ldhu	r6,-4(fp)
81132d10:	d9800615 	stw	r6,24(sp)
81132d14:	d9400515 	stw	r5,20(sp)
81132d18:	d9000415 	stw	r4,16(sp)
81132d1c:	d8c00315 	stw	r3,12(sp)
81132d20:	d8800215 	stw	r2,8(sp)
81132d24:	e0800317 	ldw	r2,12(fp)
81132d28:	d8800115 	stw	r2,4(sp)
81132d2c:	e0800217 	ldw	r2,8(fp)
81132d30:	d8800015 	stw	r2,0(sp)
81132d34:	e1fffa17 	ldw	r7,-24(fp)
81132d38:	e1bff917 	ldw	r6,-28(fp)
81132d3c:	e17ff817 	ldw	r5,-32(fp)
81132d40:	e13ff717 	ldw	r4,-36(fp)
81132d44:	11322000 	call	81132200 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
81132d48:	e037883a 	mov	sp,fp
81132d4c:	dfc00117 	ldw	ra,4(sp)
81132d50:	df000017 	ldw	fp,0(sp)
81132d54:	dec00204 	addi	sp,sp,8
81132d58:	f800283a 	ret

81132d5c <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81132d5c:	defffb04 	addi	sp,sp,-20
81132d60:	df000415 	stw	fp,16(sp)
81132d64:	df000404 	addi	fp,sp,16
81132d68:	e13ffc15 	stw	r4,-16(fp)
81132d6c:	e17ffd15 	stw	r5,-12(fp)
81132d70:	e1bffe15 	stw	r6,-8(fp)
81132d74:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
81132d78:	e0bffc17 	ldw	r2,-16(fp)
81132d7c:	10c01217 	ldw	r3,72(r2)
81132d80:	e0800117 	ldw	r2,4(fp)
81132d84:	18800436 	bltu	r3,r2,81132d98 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
81132d88:	e0bffc17 	ldw	r2,-16(fp)
81132d8c:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81132d90:	10803fcc 	andi	r2,r2,255
81132d94:	10000226 	beq	r2,zero,81132da0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81132d98:	00bffa84 	movi	r2,-22
81132d9c:	00001406 	br	81132df0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
81132da0:	e0bffd17 	ldw	r2,-12(fp)
81132da4:	e0fffe17 	ldw	r3,-8(fp)
81132da8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81132dac:	e0bffd17 	ldw	r2,-12(fp)
81132db0:	e0ffff17 	ldw	r3,-4(fp)
81132db4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81132db8:	e0bffd17 	ldw	r2,-12(fp)
81132dbc:	e0c00117 	ldw	r3,4(fp)
81132dc0:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
81132dc4:	e0fffd17 	ldw	r3,-12(fp)
81132dc8:	e0bffd17 	ldw	r2,-12(fp)
81132dcc:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81132dd0:	e0c00217 	ldw	r3,8(fp)
81132dd4:	00900034 	movhi	r2,16384
81132dd8:	10bfffc4 	addi	r2,r2,-1
81132ddc:	1884703a 	and	r2,r3,r2
81132de0:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
81132de4:	e0bffd17 	ldw	r2,-12(fp)
81132de8:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81132dec:	0005883a 	mov	r2,zero
}
81132df0:	e037883a 	mov	sp,fp
81132df4:	df000017 	ldw	fp,0(sp)
81132df8:	dec00104 	addi	sp,sp,4
81132dfc:	f800283a 	ret

81132e00 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81132e00:	defff404 	addi	sp,sp,-48
81132e04:	df000b15 	stw	fp,44(sp)
81132e08:	df000b04 	addi	fp,sp,44
81132e0c:	e13ff715 	stw	r4,-36(fp)
81132e10:	e17ff815 	stw	r5,-32(fp)
81132e14:	e1bff915 	stw	r6,-28(fp)
81132e18:	e1fffa15 	stw	r7,-24(fp)
81132e1c:	e1800517 	ldw	r6,20(fp)
81132e20:	e1400617 	ldw	r5,24(fp)
81132e24:	e1000717 	ldw	r4,28(fp)
81132e28:	e0c00817 	ldw	r3,32(fp)
81132e2c:	e0800917 	ldw	r2,36(fp)
81132e30:	e1bffb0d 	sth	r6,-20(fp)
81132e34:	e17ffc05 	stb	r5,-16(fp)
81132e38:	e13ffd05 	stb	r4,-12(fp)
81132e3c:	e0fffe0d 	sth	r3,-8(fp)
81132e40:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81132e44:	e0bff717 	ldw	r2,-36(fp)
81132e48:	10c01217 	ldw	r3,72(r2)
81132e4c:	e0800317 	ldw	r2,12(fp)
81132e50:	18801936 	bltu	r3,r2,81132eb8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
81132e54:	e13ff717 	ldw	r4,-36(fp)
81132e58:	20801317 	ldw	r2,76(r4)
81132e5c:	20c01417 	ldw	r3,80(r4)
81132e60:	e13ffe0b 	ldhu	r4,-8(fp)
81132e64:	213fffcc 	andi	r4,r4,65535
81132e68:	2015883a 	mov	r10,r4
81132e6c:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
81132e70:	1ac01136 	bltu	r3,r11,81132eb8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81132e74:	58c0011e 	bne	r11,r3,81132e7c <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
81132e78:	12800f36 	bltu	r2,r10,81132eb8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81132e7c:	e13ff717 	ldw	r4,-36(fp)
81132e80:	20801317 	ldw	r2,76(r4)
81132e84:	20c01417 	ldw	r3,80(r4)
81132e88:	e13fff0b 	ldhu	r4,-4(fp)
81132e8c:	213fffcc 	andi	r4,r4,65535
81132e90:	2011883a 	mov	r8,r4
81132e94:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81132e98:	1a400736 	bltu	r3,r9,81132eb8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
81132e9c:	48c0011e 	bne	r9,r3,81132ea4 <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
81132ea0:	12000536 	bltu	r2,r8,81132eb8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81132ea4:	e0bff717 	ldw	r2,-36(fp)
81132ea8:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81132eac:	10803fcc 	andi	r2,r2,255
81132eb0:	10800060 	cmpeqi	r2,r2,1
81132eb4:	1000021e 	bne	r2,zero,81132ec0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81132eb8:	00bffa84 	movi	r2,-22
81132ebc:	00003106 	br	81132f84 <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
81132ec0:	e0bff817 	ldw	r2,-32(fp)
81132ec4:	e0fff917 	ldw	r3,-28(fp)
81132ec8:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
81132ecc:	e0bff817 	ldw	r2,-32(fp)
81132ed0:	e0fffa17 	ldw	r3,-24(fp)
81132ed4:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81132ed8:	e0bff817 	ldw	r2,-32(fp)
81132edc:	e0c00117 	ldw	r3,4(fp)
81132ee0:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81132ee4:	e0bff817 	ldw	r2,-32(fp)
81132ee8:	e0c00217 	ldw	r3,8(fp)
81132eec:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81132ef0:	e0bff817 	ldw	r2,-32(fp)
81132ef4:	e0c00317 	ldw	r3,12(fp)
81132ef8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81132efc:	e0bff817 	ldw	r2,-32(fp)
81132f00:	e0fffb0b 	ldhu	r3,-20(fp)
81132f04:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81132f08:	e0bff817 	ldw	r2,-32(fp)
81132f0c:	e0fffc03 	ldbu	r3,-16(fp)
81132f10:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81132f14:	e0bff817 	ldw	r2,-32(fp)
81132f18:	e0fffd03 	ldbu	r3,-12(fp)
81132f1c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
81132f20:	e0bff817 	ldw	r2,-32(fp)
81132f24:	e0fffe0b 	ldhu	r3,-8(fp)
81132f28:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
81132f2c:	e0bff817 	ldw	r2,-32(fp)
81132f30:	e0ffff0b 	ldhu	r3,-4(fp)
81132f34:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
81132f38:	e0bff817 	ldw	r2,-32(fp)
81132f3c:	1019883a 	mov	r12,r2
81132f40:	001b883a 	mov	r13,zero
81132f44:	e33ff515 	stw	r12,-44(fp)
81132f48:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
81132f4c:	e0fff517 	ldw	r3,-44(fp)
81132f50:	e0bff817 	ldw	r2,-32(fp)
81132f54:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
81132f58:	e0fff617 	ldw	r3,-40(fp)
81132f5c:	e0bff817 	ldw	r2,-32(fp)
81132f60:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81132f64:	e0c00417 	ldw	r3,16(fp)
81132f68:	00900034 	movhi	r2,16384
81132f6c:	10bfffc4 	addi	r2,r2,-1
81132f70:	1884703a 	and	r2,r3,r2
81132f74:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
81132f78:	e0bff817 	ldw	r2,-32(fp)
81132f7c:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81132f80:	0005883a 	mov	r2,zero
}
81132f84:	e037883a 	mov	sp,fp
81132f88:	df000017 	ldw	fp,0(sp)
81132f8c:	dec00104 	addi	sp,sp,4
81132f90:	f800283a 	ret

81132f94 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81132f94:	defff804 	addi	sp,sp,-32
81132f98:	dfc00715 	stw	ra,28(sp)
81132f9c:	df000615 	stw	fp,24(sp)
81132fa0:	df000604 	addi	fp,sp,24
81132fa4:	e13ffc15 	stw	r4,-16(fp)
81132fa8:	e17ffd15 	stw	r5,-12(fp)
81132fac:	e1bffe15 	stw	r6,-8(fp)
81132fb0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81132fb4:	e0800317 	ldw	r2,12(fp)
81132fb8:	d8800115 	stw	r2,4(sp)
81132fbc:	e0800217 	ldw	r2,8(fp)
81132fc0:	d8800015 	stw	r2,0(sp)
81132fc4:	e1ffff17 	ldw	r7,-4(fp)
81132fc8:	e1bffe17 	ldw	r6,-8(fp)
81132fcc:	e17ffd17 	ldw	r5,-12(fp)
81132fd0:	e13ffc17 	ldw	r4,-16(fp)
81132fd4:	1132d5c0 	call	81132d5c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81132fd8:	e037883a 	mov	sp,fp
81132fdc:	dfc00117 	ldw	ra,4(sp)
81132fe0:	df000017 	ldw	fp,0(sp)
81132fe4:	dec00204 	addi	sp,sp,8
81132fe8:	f800283a 	ret

81132fec <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81132fec:	defff804 	addi	sp,sp,-32
81132ff0:	dfc00715 	stw	ra,28(sp)
81132ff4:	df000615 	stw	fp,24(sp)
81132ff8:	df000604 	addi	fp,sp,24
81132ffc:	e13ffc15 	stw	r4,-16(fp)
81133000:	e17ffd15 	stw	r5,-12(fp)
81133004:	e1bffe15 	stw	r6,-8(fp)
81133008:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113300c:	e0800217 	ldw	r2,8(fp)
81133010:	d8800115 	stw	r2,4(sp)
81133014:	e0bfff17 	ldw	r2,-4(fp)
81133018:	d8800015 	stw	r2,0(sp)
8113301c:	e1fffe17 	ldw	r7,-8(fp)
81133020:	000d883a 	mov	r6,zero
81133024:	e17ffd17 	ldw	r5,-12(fp)
81133028:	e13ffc17 	ldw	r4,-16(fp)
8113302c:	1132d5c0 	call	81132d5c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
81133030:	e037883a 	mov	sp,fp
81133034:	dfc00117 	ldw	ra,4(sp)
81133038:	df000017 	ldw	fp,0(sp)
8113303c:	dec00204 	addi	sp,sp,8
81133040:	f800283a 	ret

81133044 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
81133044:	defff804 	addi	sp,sp,-32
81133048:	dfc00715 	stw	ra,28(sp)
8113304c:	df000615 	stw	fp,24(sp)
81133050:	df000604 	addi	fp,sp,24
81133054:	e13ffc15 	stw	r4,-16(fp)
81133058:	e17ffd15 	stw	r5,-12(fp)
8113305c:	e1bffe15 	stw	r6,-8(fp)
81133060:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
81133064:	e0800217 	ldw	r2,8(fp)
81133068:	d8800115 	stw	r2,4(sp)
8113306c:	e0bfff17 	ldw	r2,-4(fp)
81133070:	d8800015 	stw	r2,0(sp)
81133074:	000f883a 	mov	r7,zero
81133078:	e1bffe17 	ldw	r6,-8(fp)
8113307c:	e17ffd17 	ldw	r5,-12(fp)
81133080:	e13ffc17 	ldw	r4,-16(fp)
81133084:	1132d5c0 	call	81132d5c <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81133088:	e037883a 	mov	sp,fp
8113308c:	dfc00117 	ldw	ra,4(sp)
81133090:	df000017 	ldw	fp,0(sp)
81133094:	dec00204 	addi	sp,sp,8
81133098:	f800283a 	ret

8113309c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
8113309c:	deffee04 	addi	sp,sp,-72
811330a0:	dfc01115 	stw	ra,68(sp)
811330a4:	df001015 	stw	fp,64(sp)
811330a8:	df001004 	addi	fp,sp,64
811330ac:	e13ff915 	stw	r4,-28(fp)
811330b0:	e17ffa15 	stw	r5,-24(fp)
811330b4:	e1bffb15 	stw	r6,-20(fp)
811330b8:	e1fffc15 	stw	r7,-16(fp)
811330bc:	e1000417 	ldw	r4,16(fp)
811330c0:	e0c00517 	ldw	r3,20(fp)
811330c4:	e0800617 	ldw	r2,24(fp)
811330c8:	e13ffd0d 	sth	r4,-12(fp)
811330cc:	e0fffe05 	stb	r3,-8(fp)
811330d0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
811330d4:	e0bffd0b 	ldhu	r2,-12(fp)
811330d8:	e0fffe03 	ldbu	r3,-8(fp)
811330dc:	e13fff0b 	ldhu	r4,-4(fp)
811330e0:	d9000815 	stw	r4,32(sp)
811330e4:	d8000715 	stw	zero,28(sp)
811330e8:	d8c00615 	stw	r3,24(sp)
811330ec:	d8000515 	stw	zero,20(sp)
811330f0:	d8800415 	stw	r2,16(sp)
811330f4:	e0800317 	ldw	r2,12(fp)
811330f8:	d8800315 	stw	r2,12(sp)
811330fc:	e0800217 	ldw	r2,8(fp)
81133100:	d8800215 	stw	r2,8(sp)
81133104:	e0bffc17 	ldw	r2,-16(fp)
81133108:	d8800115 	stw	r2,4(sp)
8113310c:	e0bffb17 	ldw	r2,-20(fp)
81133110:	d8800015 	stw	r2,0(sp)
81133114:	000f883a 	mov	r7,zero
81133118:	000d883a 	mov	r6,zero
8113311c:	e17ffa17 	ldw	r5,-24(fp)
81133120:	e13ff917 	ldw	r4,-28(fp)
81133124:	1132e000 	call	81132e00 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
81133128:	e037883a 	mov	sp,fp
8113312c:	dfc00117 	ldw	ra,4(sp)
81133130:	df000017 	ldw	fp,0(sp)
81133134:	dec00204 	addi	sp,sp,8
81133138:	f800283a 	ret

8113313c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
8113313c:	deffee04 	addi	sp,sp,-72
81133140:	dfc01115 	stw	ra,68(sp)
81133144:	df001015 	stw	fp,64(sp)
81133148:	df001004 	addi	fp,sp,64
8113314c:	e13ff915 	stw	r4,-28(fp)
81133150:	e17ffa15 	stw	r5,-24(fp)
81133154:	e1bffb15 	stw	r6,-20(fp)
81133158:	e1fffc15 	stw	r7,-16(fp)
8113315c:	e1000417 	ldw	r4,16(fp)
81133160:	e0c00517 	ldw	r3,20(fp)
81133164:	e0800617 	ldw	r2,24(fp)
81133168:	e13ffd0d 	sth	r4,-12(fp)
8113316c:	e0fffe05 	stb	r3,-8(fp)
81133170:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81133174:	e0bffd0b 	ldhu	r2,-12(fp)
81133178:	e0fffe03 	ldbu	r3,-8(fp)
8113317c:	e13fff0b 	ldhu	r4,-4(fp)
81133180:	d8000815 	stw	zero,32(sp)
81133184:	d9000715 	stw	r4,28(sp)
81133188:	d8000615 	stw	zero,24(sp)
8113318c:	d8c00515 	stw	r3,20(sp)
81133190:	d8800415 	stw	r2,16(sp)
81133194:	e0800317 	ldw	r2,12(fp)
81133198:	d8800315 	stw	r2,12(sp)
8113319c:	e0800217 	ldw	r2,8(fp)
811331a0:	d8800215 	stw	r2,8(sp)
811331a4:	d8000115 	stw	zero,4(sp)
811331a8:	d8000015 	stw	zero,0(sp)
811331ac:	e1fffc17 	ldw	r7,-16(fp)
811331b0:	e1bffb17 	ldw	r6,-20(fp)
811331b4:	e17ffa17 	ldw	r5,-24(fp)
811331b8:	e13ff917 	ldw	r4,-28(fp)
811331bc:	1132e000 	call	81132e00 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
811331c0:	e037883a 	mov	sp,fp
811331c4:	dfc00117 	ldw	ra,4(sp)
811331c8:	df000017 	ldw	fp,0(sp)
811331cc:	dec00204 	addi	sp,sp,8
811331d0:	f800283a 	ret

811331d4 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
811331d4:	deffec04 	addi	sp,sp,-80
811331d8:	dfc01315 	stw	ra,76(sp)
811331dc:	df001215 	stw	fp,72(sp)
811331e0:	df001204 	addi	fp,sp,72
811331e4:	e13ff715 	stw	r4,-36(fp)
811331e8:	e17ff815 	stw	r5,-32(fp)
811331ec:	e1bff915 	stw	r6,-28(fp)
811331f0:	e1fffa15 	stw	r7,-24(fp)
811331f4:	e1800617 	ldw	r6,24(fp)
811331f8:	e1400717 	ldw	r5,28(fp)
811331fc:	e1000817 	ldw	r4,32(fp)
81133200:	e0c00917 	ldw	r3,36(fp)
81133204:	e0800a17 	ldw	r2,40(fp)
81133208:	e1bffb0d 	sth	r6,-20(fp)
8113320c:	e17ffc05 	stb	r5,-16(fp)
81133210:	e13ffd05 	stb	r4,-12(fp)
81133214:	e0fffe0d 	sth	r3,-8(fp)
81133218:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
8113321c:	e0bffb0b 	ldhu	r2,-20(fp)
81133220:	e0fffc03 	ldbu	r3,-16(fp)
81133224:	e13ffd03 	ldbu	r4,-12(fp)
81133228:	e17ffe0b 	ldhu	r5,-8(fp)
8113322c:	e1bfff0b 	ldhu	r6,-4(fp)
81133230:	d9800815 	stw	r6,32(sp)
81133234:	d9400715 	stw	r5,28(sp)
81133238:	d9000615 	stw	r4,24(sp)
8113323c:	d8c00515 	stw	r3,20(sp)
81133240:	d8800415 	stw	r2,16(sp)
81133244:	e0800517 	ldw	r2,20(fp)
81133248:	d8800315 	stw	r2,12(sp)
8113324c:	e0800417 	ldw	r2,16(fp)
81133250:	d8800215 	stw	r2,8(sp)
81133254:	e0800317 	ldw	r2,12(fp)
81133258:	d8800115 	stw	r2,4(sp)
8113325c:	e0800217 	ldw	r2,8(fp)
81133260:	d8800015 	stw	r2,0(sp)
81133264:	e1fffa17 	ldw	r7,-24(fp)
81133268:	e1bff917 	ldw	r6,-28(fp)
8113326c:	e17ff817 	ldw	r5,-32(fp)
81133270:	e13ff717 	ldw	r4,-36(fp)
81133274:	1132e000 	call	81132e00 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81133278:	e037883a 	mov	sp,fp
8113327c:	dfc00117 	ldw	ra,4(sp)
81133280:	df000017 	ldw	fp,0(sp)
81133284:	dec00204 	addi	sp,sp,8
81133288:	f800283a 	ret

8113328c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
8113328c:	defffc04 	addi	sp,sp,-16
81133290:	df000315 	stw	fp,12(sp)
81133294:	df000304 	addi	fp,sp,12
81133298:	e13ffe15 	stw	r4,-8(fp)
8113329c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
811332a0:	e0bfff17 	ldw	r2,-4(fp)
811332a4:	1000021e 	bne	r2,zero,811332b0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
811332a8:	00bffa84 	movi	r2,-22
811332ac:	00002f06 	br	8113336c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
811332b0:	e0bfff17 	ldw	r2,-4(fp)
811332b4:	10c00317 	ldw	r3,12(r2)
811332b8:	e0bfff17 	ldw	r2,-4(fp)
811332bc:	18800226 	beq	r3,r2,811332c8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811332c0:	00bffa84 	movi	r2,-22
811332c4:	00002906 	br	8113336c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == NULL)
811332c8:	e0bffe17 	ldw	r2,-8(fp)
811332cc:	10800017 	ldw	r2,0(r2)
811332d0:	1000051e 	bne	r2,zero,811332e8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
	{
		*list = descriptor;  /* make this root-node if list is empty */
811332d4:	e0bffe17 	ldw	r2,-8(fp)
811332d8:	e0ffff17 	ldw	r3,-4(fp)
811332dc:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
811332e0:	0005883a 	mov	r2,zero
811332e4:	00002106 	br	8113336c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	if (*list == descriptor)
811332e8:	e0bffe17 	ldw	r2,-8(fp)
811332ec:	10c00017 	ldw	r3,0(r2)
811332f0:	e0bfff17 	ldw	r2,-4(fp)
811332f4:	1880021e 	bne	r3,r2,81133300 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
811332f8:	00bffa84 	movi	r2,-22
811332fc:	00001b06 	br	8113336c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81133300:	e0bffe17 	ldw	r2,-8(fp)
81133304:	10800017 	ldw	r2,0(r2)
81133308:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
8113330c:	00000906 	br	81133334 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81133310:	e0bffd17 	ldw	r2,-12(fp)
81133314:	10c00317 	ldw	r3,12(r2)
81133318:	e0bfff17 	ldw	r2,-4(fp)
8113331c:	1880021e 	bne	r3,r2,81133328 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81133320:	00bffa84 	movi	r2,-22
81133324:	00001106 	br	8113336c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81133328:	e0bffd17 	ldw	r2,-12(fp)
8113332c:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81133330:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81133334:	e0bffd17 	ldw	r2,-12(fp)
81133338:	10800317 	ldw	r2,12(r2)
8113333c:	e0fffe17 	ldw	r3,-8(fp)
81133340:	18c00017 	ldw	r3,0(r3)
81133344:	10fff21e 	bne	r2,r3,81133310 <__reset+0xfb113310>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
81133348:	e0ffff17 	ldw	r3,-4(fp)
8113334c:	e0bffd17 	ldw	r2,-12(fp)
81133350:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81133354:	e0bffe17 	ldw	r2,-8(fp)
81133358:	10800017 	ldw	r2,0(r2)
8113335c:	1007883a 	mov	r3,r2
81133360:	e0bfff17 	ldw	r2,-4(fp)
81133364:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81133368:	0005883a 	mov	r2,zero
}
8113336c:	e037883a 	mov	sp,fp
81133370:	df000017 	ldw	fp,0(sp)
81133374:	dec00104 	addi	sp,sp,4
81133378:	f800283a 	ret

8113337c <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
8113337c:	defff804 	addi	sp,sp,-32
81133380:	df000715 	stw	fp,28(sp)
81133384:	df000704 	addi	fp,sp,28
81133388:	e13ffe15 	stw	r4,-8(fp)
8113338c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81133390:	e13fff17 	ldw	r4,-4(fp)
81133394:	2000021e 	bne	r4,zero,811333a0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81133398:	00bffa84 	movi	r2,-22
8113339c:	00005906 	br	81133504 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
811333a0:	e13fff17 	ldw	r4,-4(fp)
811333a4:	2015883a 	mov	r10,r4
811333a8:	0017883a 	mov	r11,zero
811333ac:	e2bffc15 	stw	r10,-16(fp)
811333b0:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811333b4:	e13fff17 	ldw	r4,-4(fp)
811333b8:	21400317 	ldw	r5,12(r4)
811333bc:	e13ffc17 	ldw	r4,-16(fp)
811333c0:	29000626 	beq	r5,r4,811333dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
811333c4:	e13fff17 	ldw	r4,-4(fp)
811333c8:	21400b17 	ldw	r5,44(r4)
811333cc:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
811333d0:	29000226 	beq	r5,r4,811333dc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
811333d4:	00bffa84 	movi	r2,-22
811333d8:	00004a06 	br	81133504 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	if (*list == NULL)
811333dc:	e13ffe17 	ldw	r4,-8(fp)
811333e0:	21000017 	ldw	r4,0(r4)
811333e4:	2000051e 	bne	r4,zero,811333fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
811333e8:	e0bffe17 	ldw	r2,-8(fp)
811333ec:	e0ffff17 	ldw	r3,-4(fp)
811333f0:	10c00015 	stw	r3,0(r2)
		return 0;
811333f4:	0005883a 	mov	r2,zero
811333f8:	00004206 	br	81133504 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	if (*list == descriptor)
811333fc:	e13ffe17 	ldw	r4,-8(fp)
81133400:	21400017 	ldw	r5,0(r4)
81133404:	e13fff17 	ldw	r4,-4(fp)
81133408:	2900021e 	bne	r5,r4,81133414 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
8113340c:	00bffa84 	movi	r2,-22
81133410:	00003c06 	br	81133504 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81133414:	e13ffe17 	ldw	r4,-8(fp)
81133418:	21000017 	ldw	r4,0(r4)
8113341c:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81133420:	e13ffe17 	ldw	r4,-8(fp)
81133424:	21000017 	ldw	r4,0(r4)
81133428:	2011883a 	mov	r8,r4
8113342c:	0013883a 	mov	r9,zero
81133430:	e23ffa15 	stw	r8,-24(fp)
81133434:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81133438:	00001806 	br	8113349c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
8113343c:	e13fff17 	ldw	r4,-4(fp)
81133440:	200d883a 	mov	r6,r4
81133444:	000f883a 	mov	r7,zero
81133448:	e1bffc15 	stw	r6,-16(fp)
8113344c:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81133450:	e13ff917 	ldw	r4,-28(fp)
81133454:	21400317 	ldw	r5,12(r4)
81133458:	e13ffc17 	ldw	r4,-16(fp)
8113345c:	2900061e 	bne	r5,r4,81133478 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81133460:	e13ff917 	ldw	r4,-28(fp)
81133464:	21400b17 	ldw	r5,44(r4)
81133468:	e13ffd17 	ldw	r4,-12(fp)
8113346c:	2900021e 	bne	r5,r4,81133478 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81133470:	00bffa84 	movi	r2,-22
81133474:	00002306 	br	81133504 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81133478:	e13ff917 	ldw	r4,-28(fp)
8113347c:	21000317 	ldw	r4,12(r4)
81133480:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81133484:	e13ff917 	ldw	r4,-28(fp)
81133488:	21000b17 	ldw	r4,44(r4)
8113348c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81133490:	e13ffc17 	ldw	r4,-16(fp)
81133494:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81133498:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
8113349c:	e13ff917 	ldw	r4,-28(fp)
811334a0:	21400317 	ldw	r5,12(r4)
811334a4:	e13ffa17 	ldw	r4,-24(fp)
811334a8:	29000426 	beq	r5,r4,811334bc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x140>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
811334ac:	e13ff917 	ldw	r4,-28(fp)
811334b0:	21400b17 	ldw	r5,44(r4)
811334b4:	e13ffb17 	ldw	r4,-20(fp)
811334b8:	293fe01e 	bne	r5,r4,8113343c <__reset+0xfb11343c>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
811334bc:	e13fff17 	ldw	r4,-4(fp)
811334c0:	2005883a 	mov	r2,r4
811334c4:	0007883a 	mov	r3,zero
811334c8:	e0bffc15 	stw	r2,-16(fp)
811334cc:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
811334d0:	e0fffc17 	ldw	r3,-16(fp)
811334d4:	e0bff917 	ldw	r2,-28(fp)
811334d8:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
811334dc:	e0fffd17 	ldw	r3,-12(fp)
811334e0:	e0bff917 	ldw	r2,-28(fp)
811334e4:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
811334e8:	e0fffa17 	ldw	r3,-24(fp)
811334ec:	e0bfff17 	ldw	r2,-4(fp)
811334f0:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
811334f4:	e0fffb17 	ldw	r3,-20(fp)
811334f8:	e0bfff17 	ldw	r2,-4(fp)
811334fc:	10c00b15 	stw	r3,44(r2)
	return 0;
81133500:	0005883a 	mov	r2,zero
}
81133504:	e037883a 	mov	sp,fp
81133508:	df000017 	ldw	fp,0(sp)
8113350c:	dec00104 	addi	sp,sp,4
81133510:	f800283a 	ret

81133514 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81133514:	defffc04 	addi	sp,sp,-16
81133518:	df000315 	stw	fp,12(sp)
8113351c:	df000304 	addi	fp,sp,12
81133520:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81133524:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81133528:	e0bfff17 	ldw	r2,-4(fp)
8113352c:	1000021e 	bne	r2,zero,81133538 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
81133530:	00bffa84 	movi	r2,-22
81133534:	00001906 	br	8113359c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x88>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81133538:	e0bfff17 	ldw	r2,-4(fp)
8113353c:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81133540:	00000a06 	br	8113356c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x58>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81133544:	e0bffd17 	ldw	r2,-12(fp)
81133548:	10800717 	ldw	r2,28(r2)
8113354c:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81133550:	e0bffe17 	ldw	r2,-8(fp)
81133554:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81133558:	e0bffd17 	ldw	r2,-12(fp)
8113355c:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81133560:	e0bffd17 	ldw	r2,-12(fp)
81133564:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81133568:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
8113356c:	e0bffd17 	ldw	r2,-12(fp)
81133570:	10c00317 	ldw	r3,12(r2)
81133574:	e0bfff17 	ldw	r2,-4(fp)
81133578:	18bff21e 	bne	r3,r2,81133544 <__reset+0xfb113544>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
8113357c:	e0bffd17 	ldw	r2,-12(fp)
81133580:	10800717 	ldw	r2,28(r2)
81133584:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81133588:	e0bffe17 	ldw	r2,-8(fp)
8113358c:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81133590:	e0bffd17 	ldw	r2,-12(fp)
81133594:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81133598:	0005883a 	mov	r2,zero
}
8113359c:	e037883a 	mov	sp,fp
811335a0:	df000017 	ldw	fp,0(sp)
811335a4:	dec00104 	addi	sp,sp,4
811335a8:	f800283a 	ret

811335ac <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
811335ac:	defff804 	addi	sp,sp,-32
811335b0:	df000715 	stw	fp,28(sp)
811335b4:	df000704 	addi	fp,sp,28
811335b8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
811335bc:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
811335c0:	e13fff17 	ldw	r4,-4(fp)
811335c4:	2000021e 	bne	r4,zero,811335d0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
	{
		return -EINVAL;  /* this list cannot be empty */
811335c8:	00bffa84 	movi	r2,-22
811335cc:	00002806 	br	81133670 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc4>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
811335d0:	e13fff17 	ldw	r4,-4(fp)
811335d4:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
811335d8:	e13fff17 	ldw	r4,-4(fp)
811335dc:	2005883a 	mov	r2,r4
811335e0:	0007883a 	mov	r3,zero
811335e4:	e0bffb15 	stw	r2,-20(fp)
811335e8:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
811335ec:	00001006 	br	81133630 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x84>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
811335f0:	e0bff917 	ldw	r2,-28(fp)
811335f4:	10800f17 	ldw	r2,60(r2)
811335f8:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
811335fc:	e0bffa17 	ldw	r2,-24(fp)
81133600:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81133604:	e0bff917 	ldw	r2,-28(fp)
81133608:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
8113360c:	e0bff917 	ldw	r2,-28(fp)
81133610:	10800317 	ldw	r2,12(r2)
81133614:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81133618:	e0bff917 	ldw	r2,-28(fp)
8113361c:	10800b17 	ldw	r2,44(r2)
81133620:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81133624:	e0bffd17 	ldw	r2,-12(fp)
81133628:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
8113362c:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81133630:	e0bff917 	ldw	r2,-28(fp)
81133634:	10c00317 	ldw	r3,12(r2)
81133638:	e0bffb17 	ldw	r2,-20(fp)
8113363c:	18800426 	beq	r3,r2,81133650 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81133640:	e0bff917 	ldw	r2,-28(fp)
81133644:	10c00b17 	ldw	r3,44(r2)
81133648:	e0bffc17 	ldw	r2,-16(fp)
8113364c:	18bfe81e 	bne	r3,r2,811335f0 <__reset+0xfb1135f0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81133650:	e0bff917 	ldw	r2,-28(fp)
81133654:	10800f17 	ldw	r2,60(r2)
81133658:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
8113365c:	e0bffa17 	ldw	r2,-24(fp)
81133660:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81133664:	e0bff917 	ldw	r2,-28(fp)
81133668:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
8113366c:	0005883a 	mov	r2,zero
}
81133670:	e037883a 	mov	sp,fp
81133674:	df000017 	ldw	fp,0(sp)
81133678:	dec00104 	addi	sp,sp,4
8113367c:	f800283a 	ret

81133680 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81133680:	deffeb04 	addi	sp,sp,-84
81133684:	dfc01415 	stw	ra,80(sp)
81133688:	df001315 	stw	fp,76(sp)
8113368c:	df001304 	addi	fp,sp,76
81133690:	e13ffb15 	stw	r4,-20(fp)
81133694:	e17ffc15 	stw	r5,-16(fp)
81133698:	e1bffd15 	stw	r6,-12(fp)
8113369c:	3807883a 	mov	r3,r7
811336a0:	e0800217 	ldw	r2,8(fp)
811336a4:	e0fffe05 	stb	r3,-8(fp)
811336a8:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
811336ac:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
811336b0:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
811336b4:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
811336b8:	e0bffc17 	ldw	r2,-16(fp)
811336bc:	e0bff815 	stw	r2,-32(fp)
811336c0:	e0bffd17 	ldw	r2,-12(fp)
811336c4:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
811336c8:	e0bffb17 	ldw	r2,-20(fp)
811336cc:	10801817 	ldw	r2,96(r2)
811336d0:	e0bff615 	stw	r2,-40(fp)
811336d4:	e03ff70d 	sth	zero,-36(fp)
811336d8:	e0bff70b 	ldhu	r2,-36(fp)
811336dc:	e0fffa04 	addi	r3,fp,-24
811336e0:	180d883a 	mov	r6,r3
811336e4:	100b883a 	mov	r5,r2
811336e8:	e13ff617 	ldw	r4,-40(fp)
811336ec:	1128fdc0 	call	81128fdc <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
811336f0:	e0bffb17 	ldw	r2,-20(fp)
811336f4:	10800617 	ldw	r2,24(r2)
811336f8:	10800037 	ldwio	r2,0(r2)
811336fc:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
81133700:	e0bfed17 	ldw	r2,-76(fp)
81133704:	1080004c 	andi	r2,r2,1
81133708:	10000626 	beq	r2,zero,81133724 <alt_msgdma_start_prefetcher_with_list_addr+0xa4>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
8113370c:	e0bffb17 	ldw	r2,-20(fp)
81133710:	10801817 	ldw	r2,96(r2)
81133714:	1009883a 	mov	r4,r2
81133718:	11293540 	call	81129354 <OSSemPost>
		return -EBUSY;
8113371c:	00bffc04 	movi	r2,-16
81133720:	00009606 	br	8113397c <alt_msgdma_start_prefetcher_with_list_addr+0x2fc>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81133724:	00800804 	movi	r2,32
81133728:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113372c:	0005303a 	rdctl	r2,status
81133730:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133734:	e0fff217 	ldw	r3,-56(fp)
81133738:	00bfff84 	movi	r2,-2
8113373c:	1884703a 	and	r2,r3,r2
81133740:	1001703a 	wrctl	status,r2
  
  return context;
81133744:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81133748:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
8113374c:	e0bffb17 	ldw	r2,-20(fp)
81133750:	10800317 	ldw	r2,12(r2)
81133754:	10800104 	addi	r2,r2,4
81133758:	e0ffee17 	ldw	r3,-72(fp)
8113375c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81133760:	e0bffb17 	ldw	r2,-20(fp)
81133764:	10800317 	ldw	r2,12(r2)
81133768:	e0fffb17 	ldw	r3,-20(fp)
8113376c:	18c00317 	ldw	r3,12(r3)
81133770:	18c00037 	ldwio	r3,0(r3)
81133774:	10c00035 	stwio	r3,0(r2)
81133778:	e0bfef17 	ldw	r2,-68(fp)
8113377c:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133780:	e0bff017 	ldw	r2,-64(fp)
81133784:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81133788:	e0bffb17 	ldw	r2,-20(fp)
8113378c:	10800b17 	ldw	r2,44(r2)
81133790:	10002326 	beq	r2,zero,81133820 <alt_msgdma_start_prefetcher_with_list_addr+0x1a0>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
81133794:	e0bffb17 	ldw	r2,-20(fp)
81133798:	10c00d17 	ldw	r3,52(r2)
8113379c:	e0bfee17 	ldw	r2,-72(fp)
811337a0:	1884b03a 	or	r2,r3,r2
811337a4:	10800514 	ori	r2,r2,20
811337a8:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
811337ac:	e0ffee17 	ldw	r3,-72(fp)
811337b0:	00bff7c4 	movi	r2,-33
811337b4:	1884703a 	and	r2,r3,r2
811337b8:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
811337bc:	e0bfed17 	ldw	r2,-76(fp)
811337c0:	10800214 	ori	r2,r2,8
811337c4:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811337c8:	0005303a 	rdctl	r2,status
811337cc:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811337d0:	e0fff417 	ldw	r3,-48(fp)
811337d4:	00bfff84 	movi	r2,-2
811337d8:	1884703a 	and	r2,r3,r2
811337dc:	1001703a 	wrctl	status,r2
  
  return context;
811337e0:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
811337e4:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811337e8:	e0bffb17 	ldw	r2,-20(fp)
811337ec:	10800317 	ldw	r2,12(r2)
811337f0:	10800104 	addi	r2,r2,4
811337f4:	e0ffee17 	ldw	r3,-72(fp)
811337f8:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811337fc:	e0bffb17 	ldw	r2,-20(fp)
81133800:	10800617 	ldw	r2,24(r2)
81133804:	e0ffed17 	ldw	r3,-76(fp)
81133808:	10c00035 	stwio	r3,0(r2)
8113380c:	e0bfef17 	ldw	r2,-68(fp)
81133810:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133814:	e0bff117 	ldw	r2,-60(fp)
81133818:	1001703a 	wrctl	status,r2
8113381c:	00002306 	br	811338ac <alt_msgdma_start_prefetcher_with_list_addr+0x22c>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
81133820:	e0bffb17 	ldw	r2,-20(fp)
81133824:	10c00d17 	ldw	r3,52(r2)
81133828:	e0bfee17 	ldw	r2,-72(fp)
8113382c:	1884b03a 	or	r2,r3,r2
81133830:	10800114 	ori	r2,r2,4
81133834:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81133838:	e0ffee17 	ldw	r3,-72(fp)
8113383c:	00bff3c4 	movi	r2,-49
81133840:	1884703a 	and	r2,r3,r2
81133844:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81133848:	e0ffed17 	ldw	r3,-76(fp)
8113384c:	00bffdc4 	movi	r2,-9
81133850:	1884703a 	and	r2,r3,r2
81133854:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133858:	0005303a 	rdctl	r2,status
8113385c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133860:	e0fff517 	ldw	r3,-44(fp)
81133864:	00bfff84 	movi	r2,-2
81133868:	1884703a 	and	r2,r3,r2
8113386c:	1001703a 	wrctl	status,r2
  
  return context;
81133870:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
81133874:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81133878:	e0bffb17 	ldw	r2,-20(fp)
8113387c:	10800317 	ldw	r2,12(r2)
81133880:	10800104 	addi	r2,r2,4
81133884:	e0ffee17 	ldw	r3,-72(fp)
81133888:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
8113388c:	e0bffb17 	ldw	r2,-20(fp)
81133890:	10800617 	ldw	r2,24(r2)
81133894:	e0ffed17 	ldw	r3,-76(fp)
81133898:	10c00035 	stwio	r3,0(r2)
8113389c:	e0bfef17 	ldw	r2,-68(fp)
811338a0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811338a4:	e0bff317 	ldw	r2,-52(fp)
811338a8:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
811338ac:	e0bffb17 	ldw	r2,-20(fp)
811338b0:	10800617 	ldw	r2,24(r2)
811338b4:	10800104 	addi	r2,r2,4
811338b8:	e0fff817 	ldw	r3,-32(fp)
811338bc:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
811338c0:	e0bffb17 	ldw	r2,-20(fp)
811338c4:	10800617 	ldw	r2,24(r2)
811338c8:	10800204 	addi	r2,r2,8
811338cc:	e0fff917 	ldw	r3,-28(fp)
811338d0:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
811338d4:	e0bffe03 	ldbu	r2,-8(fp)
811338d8:	10000426 	beq	r2,zero,811338ec <alt_msgdma_start_prefetcher_with_list_addr+0x26c>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
811338dc:	e0bfed17 	ldw	r2,-76(fp)
811338e0:	10800414 	ori	r2,r2,16
811338e4:	e0bfed15 	stw	r2,-76(fp)
811338e8:	00000406 	br	811338fc <alt_msgdma_start_prefetcher_with_list_addr+0x27c>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
811338ec:	e0ffed17 	ldw	r3,-76(fp)
811338f0:	00bffbc4 	movi	r2,-17
811338f4:	1884703a 	and	r2,r3,r2
811338f8:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
811338fc:	e0bfff03 	ldbu	r2,-4(fp)
81133900:	10000e26 	beq	r2,zero,8113393c <alt_msgdma_start_prefetcher_with_list_addr+0x2bc>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
81133904:	e0bfed17 	ldw	r2,-76(fp)
81133908:	10800094 	ori	r2,r2,2
8113390c:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81133910:	e0bffb17 	ldw	r2,-20(fp)
81133914:	10800617 	ldw	r2,24(r2)
81133918:	10800304 	addi	r2,r2,12
8113391c:	10800037 	ldwio	r2,0(r2)
81133920:	10000a1e 	bne	r2,zero,8113394c <alt_msgdma_start_prefetcher_with_list_addr+0x2cc>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
81133924:	e0bffb17 	ldw	r2,-20(fp)
81133928:	10800617 	ldw	r2,24(r2)
8113392c:	10800304 	addi	r2,r2,12
81133930:	00c03fc4 	movi	r3,255
81133934:	10c00035 	stwio	r3,0(r2)
81133938:	00000406 	br	8113394c <alt_msgdma_start_prefetcher_with_list_addr+0x2cc>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
8113393c:	e0ffed17 	ldw	r3,-76(fp)
81133940:	00bfff44 	movi	r2,-3
81133944:	1884703a 	and	r2,r3,r2
81133948:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
8113394c:	e0bfed17 	ldw	r2,-76(fp)
81133950:	10800054 	ori	r2,r2,1
81133954:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81133958:	e0bffb17 	ldw	r2,-20(fp)
8113395c:	10800617 	ldw	r2,24(r2)
81133960:	e0ffed17 	ldw	r3,-76(fp)
81133964:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
81133968:	e0bffb17 	ldw	r2,-20(fp)
8113396c:	10801817 	ldw	r2,96(r2)
81133970:	1009883a 	mov	r4,r2
81133974:	11293540 	call	81129354 <OSSemPost>
	 
	 return 0;
81133978:	0005883a 	mov	r2,zero
}
8113397c:	e037883a 	mov	sp,fp
81133980:	dfc00117 	ldw	ra,4(sp)
81133984:	df000017 	ldw	fp,0(sp)
81133988:	dec00204 	addi	sp,sp,8
8113398c:	f800283a 	ret

81133990 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81133990:	defff704 	addi	sp,sp,-36
81133994:	dfc00815 	stw	ra,32(sp)
81133998:	df000715 	stw	fp,28(sp)
8113399c:	dc400615 	stw	r17,24(sp)
811339a0:	dc000515 	stw	r16,20(sp)
811339a4:	df000704 	addi	fp,sp,28
811339a8:	e13ffa15 	stw	r4,-24(fp)
811339ac:	e17ffb15 	stw	r5,-20(fp)
811339b0:	3007883a 	mov	r3,r6
811339b4:	3805883a 	mov	r2,r7
811339b8:	e0fffc05 	stb	r3,-16(fp)
811339bc:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
811339c0:	e13ffb17 	ldw	r4,-20(fp)
811339c4:	11335140 	call	81133514 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
811339c8:	10000226 	beq	r2,zero,811339d4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x44>
		return -EINVAL;
811339cc:	00bffa84 	movi	r2,-22
811339d0:	00000b06 	br	81133a00 <alt_msgdma_start_prefetcher_with_std_desc_list+0x70>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
811339d4:	e0bffb17 	ldw	r2,-20(fp)
811339d8:	1021883a 	mov	r16,r2
811339dc:	0023883a 	mov	r17,zero
811339e0:	e0fffc03 	ldbu	r3,-16(fp)
811339e4:	e0bffd03 	ldbu	r2,-12(fp)
811339e8:	d8800015 	stw	r2,0(sp)
811339ec:	180f883a 	mov	r7,r3
811339f0:	800b883a 	mov	r5,r16
811339f4:	880d883a 	mov	r6,r17
811339f8:	e13ffa17 	ldw	r4,-24(fp)
811339fc:	11336800 	call	81133680 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81133a00:	e6fffe04 	addi	sp,fp,-8
81133a04:	dfc00317 	ldw	ra,12(sp)
81133a08:	df000217 	ldw	fp,8(sp)
81133a0c:	dc400117 	ldw	r17,4(sp)
81133a10:	dc000017 	ldw	r16,0(sp)
81133a14:	dec00404 	addi	sp,sp,16
81133a18:	f800283a 	ret

81133a1c <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81133a1c:	defff704 	addi	sp,sp,-36
81133a20:	dfc00815 	stw	ra,32(sp)
81133a24:	df000715 	stw	fp,28(sp)
81133a28:	dc400615 	stw	r17,24(sp)
81133a2c:	dc000515 	stw	r16,20(sp)
81133a30:	df000704 	addi	fp,sp,28
81133a34:	e13ffa15 	stw	r4,-24(fp)
81133a38:	e17ffb15 	stw	r5,-20(fp)
81133a3c:	3007883a 	mov	r3,r6
81133a40:	3805883a 	mov	r2,r7
81133a44:	e0fffc05 	stb	r3,-16(fp)
81133a48:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81133a4c:	e13ffb17 	ldw	r4,-20(fp)
81133a50:	11335ac0 	call	811335ac <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
81133a54:	10000226 	beq	r2,zero,81133a60 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x44>
		return -EINVAL;
81133a58:	00bffa84 	movi	r2,-22
81133a5c:	00000b06 	br	81133a8c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x70>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81133a60:	e0bffb17 	ldw	r2,-20(fp)
81133a64:	1021883a 	mov	r16,r2
81133a68:	0023883a 	mov	r17,zero
81133a6c:	e0fffc03 	ldbu	r3,-16(fp)
81133a70:	e0bffd03 	ldbu	r2,-12(fp)
81133a74:	d8800015 	stw	r2,0(sp)
81133a78:	180f883a 	mov	r7,r3
81133a7c:	800b883a 	mov	r5,r16
81133a80:	880d883a 	mov	r6,r17
81133a84:	e13ffa17 	ldw	r4,-24(fp)
81133a88:	11336800 	call	81133680 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81133a8c:	e6fffe04 	addi	sp,fp,-8
81133a90:	dfc00317 	ldw	ra,12(sp)
81133a94:	df000217 	ldw	fp,8(sp)
81133a98:	dc400117 	ldw	r17,4(sp)
81133a9c:	dc000017 	ldw	r16,0(sp)
81133aa0:	dec00404 	addi	sp,sp,16
81133aa4:	f800283a 	ret

81133aa8 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81133aa8:	defffc04 	addi	sp,sp,-16
81133aac:	dfc00315 	stw	ra,12(sp)
81133ab0:	df000215 	stw	fp,8(sp)
81133ab4:	df000204 	addi	fp,sp,8
81133ab8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
81133abc:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
81133ac0:	d1603a04 	addi	r5,gp,-32536
81133ac4:	e13fff17 	ldw	r4,-4(fp)
81133ac8:	113420c0 	call	8113420c <alt_find_dev>
81133acc:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
81133ad0:	e0bffe17 	ldw	r2,-8(fp)
81133ad4:	1000041e 	bne	r2,zero,81133ae8 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
81133ad8:	1131df40 	call	81131df4 <alt_get_errno>
81133adc:	1007883a 	mov	r3,r2
81133ae0:	008004c4 	movi	r2,19
81133ae4:	18800015 	stw	r2,0(r3)
    }

    return dev;
81133ae8:	e0bffe17 	ldw	r2,-8(fp)
}
81133aec:	e037883a 	mov	sp,fp
81133af0:	dfc00117 	ldw	ra,4(sp)
81133af4:	df000017 	ldw	fp,0(sp)
81133af8:	dec00204 	addi	sp,sp,8
81133afc:	f800283a 	ret

81133b00 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
81133b00:	defff604 	addi	sp,sp,-40
81133b04:	dfc00915 	stw	ra,36(sp)
81133b08:	df000815 	stw	fp,32(sp)
81133b0c:	df000804 	addi	fp,sp,32
81133b10:	e13ffd15 	stw	r4,-12(fp)
81133b14:	e17ffe15 	stw	r5,-8(fp)
81133b18:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
81133b1c:	e0bffd17 	ldw	r2,-12(fp)
81133b20:	10801783 	ldbu	r2,94(r2)
81133b24:	10803fcc 	andi	r2,r2,255
81133b28:	10000b26 	beq	r2,zero,81133b58 <alt_msgdma_init+0x58>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81133b2c:	e0bffd17 	ldw	r2,-12(fp)
81133b30:	10800617 	ldw	r2,24(r2)
81133b34:	00c00104 	movi	r3,4
81133b38:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81133b3c:	0001883a 	nop
81133b40:	e0bffd17 	ldw	r2,-12(fp)
81133b44:	10800617 	ldw	r2,24(r2)
81133b48:	10800037 	ldwio	r2,0(r2)
81133b4c:	1080010c 	andi	r2,r2,4
81133b50:	1005d0ba 	srai	r2,r2,2
81133b54:	103ffa1e 	bne	r2,zero,81133b40 <__reset+0xfb113b40>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81133b58:	e0bffd17 	ldw	r2,-12(fp)
81133b5c:	10800317 	ldw	r2,12(r2)
81133b60:	10800104 	addi	r2,r2,4
81133b64:	00c00084 	movi	r3,2
81133b68:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81133b6c:	0001883a 	nop
81133b70:	e0bffd17 	ldw	r2,-12(fp)
81133b74:	10800317 	ldw	r2,12(r2)
81133b78:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81133b7c:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81133b80:	103ffb1e 	bne	r2,zero,81133b70 <__reset+0xfb113b70>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81133b84:	e0bffd17 	ldw	r2,-12(fp)
81133b88:	10800317 	ldw	r2,12(r2)
81133b8c:	10800104 	addi	r2,r2,4
81133b90:	10800037 	ldwio	r2,0(r2)
81133b94:	1007883a 	mov	r3,r2
81133b98:	00bffbc4 	movi	r2,-17
81133b9c:	1884703a 	and	r2,r3,r2
81133ba0:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81133ba4:	e0bff917 	ldw	r2,-28(fp)
81133ba8:	10800814 	ori	r2,r2,32
81133bac:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81133bb0:	e0bffd17 	ldw	r2,-12(fp)
81133bb4:	10800317 	ldw	r2,12(r2)
81133bb8:	10800104 	addi	r2,r2,4
81133bbc:	e0fff917 	ldw	r3,-28(fp)
81133bc0:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
81133bc4:	e0bffd17 	ldw	r2,-12(fp)
81133bc8:	10800317 	ldw	r2,12(r2)
81133bcc:	e0fffd17 	ldw	r3,-12(fp)
81133bd0:	18c00317 	ldw	r3,12(r3)
81133bd4:	18c00037 	ldwio	r3,0(r3)
81133bd8:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
81133bdc:	e0bffd17 	ldw	r2,-12(fp)
81133be0:	10801783 	ldbu	r2,94(r2)
81133be4:	10803fcc 	andi	r2,r2,255
81133be8:	10000826 	beq	r2,zero,81133c0c <alt_msgdma_init+0x10c>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
81133bec:	e0bffd17 	ldw	r2,-12(fp)
81133bf0:	10800617 	ldw	r2,24(r2)
81133bf4:	10800404 	addi	r2,r2,16
81133bf8:	e0fffd17 	ldw	r3,-12(fp)
81133bfc:	18c00617 	ldw	r3,24(r3)
81133c00:	18c00404 	addi	r3,r3,16
81133c04:	18c00037 	ldwio	r3,0(r3)
81133c08:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
81133c0c:	d1603a04 	addi	r5,gp,-32536
81133c10:	e13ffd17 	ldw	r4,-12(fp)
81133c14:	11340a80 	call	811340a8 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
81133c18:	e0bffd17 	ldw	r2,-12(fp)
81133c1c:	10801804 	addi	r2,r2,96
81133c20:	e0bffb15 	stw	r2,-20(fp)
81133c24:	00800044 	movi	r2,1
81133c28:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81133c2c:	e0bffc0b 	ldhu	r2,-16(fp)
81133c30:	1009883a 	mov	r4,r2
81133c34:	1128cc40 	call	81128cc4 <OSSemCreate>
81133c38:	1007883a 	mov	r3,r2
81133c3c:	e0bffb17 	ldw	r2,-20(fp)
81133c40:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81133c44:	e0bffb17 	ldw	r2,-20(fp)
81133c48:	10800017 	ldw	r2,0(r2)
81133c4c:	10000226 	beq	r2,zero,81133c58 <alt_msgdma_init+0x158>
81133c50:	0005883a 	mov	r2,zero
81133c54:	00000106 	br	81133c5c <alt_msgdma_init+0x15c>
81133c58:	00bfffc4 	movi	r2,-1
81133c5c:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
81133c60:	e0bffa17 	ldw	r2,-24(fp)
81133c64:	1000081e 	bne	r2,zero,81133c88 <alt_msgdma_init+0x188>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81133c68:	d8000015 	stw	zero,0(sp)
81133c6c:	e1fffd17 	ldw	r7,-12(fp)
81133c70:	01a044f4 	movhi	r6,33043
81133c74:	3187fc04 	addi	r6,r6,8176
81133c78:	e17fff17 	ldw	r5,-4(fp)
81133c7c:	e13ffe17 	ldw	r4,-8(fp)
81133c80:	11344800 	call	81134480 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
81133c84:	00000406 	br	81133c98 <alt_msgdma_init+0x198>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81133c88:	012044f4 	movhi	r4,33043
81133c8c:	211f2a04 	addi	r4,r4,31912
81133c90:	11348600 	call	81134860 <alt_printf>
    }
    
    return;
81133c94:	0001883a 	nop

}
81133c98:	e037883a 	mov	sp,fp
81133c9c:	dfc00117 	ldw	ra,4(sp)
81133ca0:	df000017 	ldw	fp,0(sp)
81133ca4:	dec00204 	addi	sp,sp,8
81133ca8:	f800283a 	ret

81133cac <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
81133cac:	defffb04 	addi	sp,sp,-20
81133cb0:	df000415 	stw	fp,16(sp)
81133cb4:	df000404 	addi	fp,sp,16
81133cb8:	e13ffc15 	stw	r4,-16(fp)
81133cbc:	e17ffd15 	stw	r5,-12(fp)
81133cc0:	e1bffe15 	stw	r6,-8(fp)
81133cc4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
81133cc8:	e0bffc17 	ldw	r2,-16(fp)
81133ccc:	e0fffd17 	ldw	r3,-12(fp)
81133cd0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
81133cd4:	e0bffc17 	ldw	r2,-16(fp)
81133cd8:	e0ffff17 	ldw	r3,-4(fp)
81133cdc:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
81133ce0:	e0bffc17 	ldw	r2,-16(fp)
81133ce4:	e0fffe17 	ldw	r3,-8(fp)
81133ce8:	10c00d15 	stw	r3,52(r2)

    return ;
81133cec:	0001883a 	nop
}
81133cf0:	e037883a 	mov	sp,fp
81133cf4:	df000017 	ldw	fp,0(sp)
81133cf8:	dec00104 	addi	sp,sp,4
81133cfc:	f800283a 	ret

81133d00 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81133d00:	defffc04 	addi	sp,sp,-16
81133d04:	dfc00315 	stw	ra,12(sp)
81133d08:	df000215 	stw	fp,8(sp)
81133d0c:	df000204 	addi	fp,sp,8
81133d10:	e13ffe15 	stw	r4,-8(fp)
81133d14:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
81133d18:	000d883a 	mov	r6,zero
81133d1c:	e17fff17 	ldw	r5,-4(fp)
81133d20:	e13ffe17 	ldw	r4,-8(fp)
81133d24:	11323540 	call	81132354 <alt_msgdma_descriptor_async_transfer>

}
81133d28:	e037883a 	mov	sp,fp
81133d2c:	dfc00117 	ldw	ra,4(sp)
81133d30:	df000017 	ldw	fp,0(sp)
81133d34:	dec00204 	addi	sp,sp,8
81133d38:	f800283a 	ret

81133d3c <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81133d3c:	defffc04 	addi	sp,sp,-16
81133d40:	dfc00315 	stw	ra,12(sp)
81133d44:	df000215 	stw	fp,8(sp)
81133d48:	df000204 	addi	fp,sp,8
81133d4c:	e13ffe15 	stw	r4,-8(fp)
81133d50:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81133d54:	e1bfff17 	ldw	r6,-4(fp)
81133d58:	000b883a 	mov	r5,zero
81133d5c:	e13ffe17 	ldw	r4,-8(fp)
81133d60:	11323540 	call	81132354 <alt_msgdma_descriptor_async_transfer>
}
81133d64:	e037883a 	mov	sp,fp
81133d68:	dfc00117 	ldw	ra,4(sp)
81133d6c:	df000017 	ldw	fp,0(sp)
81133d70:	dec00204 	addi	sp,sp,8
81133d74:	f800283a 	ret

81133d78 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81133d78:	defffc04 	addi	sp,sp,-16
81133d7c:	dfc00315 	stw	ra,12(sp)
81133d80:	df000215 	stw	fp,8(sp)
81133d84:	df000204 	addi	fp,sp,8
81133d88:	e13ffe15 	stw	r4,-8(fp)
81133d8c:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
81133d90:	000d883a 	mov	r6,zero
81133d94:	e17fff17 	ldw	r5,-4(fp)
81133d98:	e13ffe17 	ldw	r4,-8(fp)
81133d9c:	113268c0 	call	8113268c <alt_msgdma_descriptor_sync_transfer>
}
81133da0:	e037883a 	mov	sp,fp
81133da4:	dfc00117 	ldw	ra,4(sp)
81133da8:	df000017 	ldw	fp,0(sp)
81133dac:	dec00204 	addi	sp,sp,8
81133db0:	f800283a 	ret

81133db4 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81133db4:	defffc04 	addi	sp,sp,-16
81133db8:	dfc00315 	stw	ra,12(sp)
81133dbc:	df000215 	stw	fp,8(sp)
81133dc0:	df000204 	addi	fp,sp,8
81133dc4:	e13ffe15 	stw	r4,-8(fp)
81133dc8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
81133dcc:	e1bfff17 	ldw	r6,-4(fp)
81133dd0:	000b883a 	mov	r5,zero
81133dd4:	e13ffe17 	ldw	r4,-8(fp)
81133dd8:	113268c0 	call	8113268c <alt_msgdma_descriptor_sync_transfer>
}
81133ddc:	e037883a 	mov	sp,fp
81133de0:	dfc00117 	ldw	ra,4(sp)
81133de4:	df000017 	ldw	fp,0(sp)
81133de8:	dec00204 	addi	sp,sp,8
81133dec:	f800283a 	ret

81133df0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81133df0:	defff504 	addi	sp,sp,-44
81133df4:	df000a15 	stw	fp,40(sp)
81133df8:	df000a04 	addi	fp,sp,40
81133dfc:	e13ffc15 	stw	r4,-16(fp)
81133e00:	e17ffd15 	stw	r5,-12(fp)
81133e04:	e1bffe15 	stw	r6,-8(fp)
81133e08:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81133e0c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81133e10:	d0a07317 	ldw	r2,-32308(gp)
  
  if (alt_ticks_per_second ())
81133e14:	10003c26 	beq	r2,zero,81133f08 <alt_alarm_start+0x118>
  {
    if (alarm)
81133e18:	e0bffc17 	ldw	r2,-16(fp)
81133e1c:	10003826 	beq	r2,zero,81133f00 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
81133e20:	e0bffc17 	ldw	r2,-16(fp)
81133e24:	e0fffe17 	ldw	r3,-8(fp)
81133e28:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81133e2c:	e0bffc17 	ldw	r2,-16(fp)
81133e30:	e0ffff17 	ldw	r3,-4(fp)
81133e34:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81133e38:	0005303a 	rdctl	r2,status
81133e3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81133e40:	e0fff917 	ldw	r3,-28(fp)
81133e44:	00bfff84 	movi	r2,-2
81133e48:	1884703a 	and	r2,r3,r2
81133e4c:	1001703a 	wrctl	status,r2
  
  return context;
81133e50:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
81133e54:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81133e58:	d0a07417 	ldw	r2,-32304(gp)
      
      current_nticks = alt_nticks();
81133e5c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81133e60:	e0fffd17 	ldw	r3,-12(fp)
81133e64:	e0bff617 	ldw	r2,-40(fp)
81133e68:	1885883a 	add	r2,r3,r2
81133e6c:	10c00044 	addi	r3,r2,1
81133e70:	e0bffc17 	ldw	r2,-16(fp)
81133e74:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
81133e78:	e0bffc17 	ldw	r2,-16(fp)
81133e7c:	10c00217 	ldw	r3,8(r2)
81133e80:	e0bff617 	ldw	r2,-40(fp)
81133e84:	1880042e 	bgeu	r3,r2,81133e98 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
81133e88:	e0bffc17 	ldw	r2,-16(fp)
81133e8c:	00c00044 	movi	r3,1
81133e90:	10c00405 	stb	r3,16(r2)
81133e94:	00000206 	br	81133ea0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
81133e98:	e0bffc17 	ldw	r2,-16(fp)
81133e9c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
81133ea0:	e0bffc17 	ldw	r2,-16(fp)
81133ea4:	d0e01704 	addi	r3,gp,-32676
81133ea8:	e0fffa15 	stw	r3,-24(fp)
81133eac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
81133eb0:	e0bffb17 	ldw	r2,-20(fp)
81133eb4:	e0fffa17 	ldw	r3,-24(fp)
81133eb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81133ebc:	e0bffa17 	ldw	r2,-24(fp)
81133ec0:	10c00017 	ldw	r3,0(r2)
81133ec4:	e0bffb17 	ldw	r2,-20(fp)
81133ec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81133ecc:	e0bffa17 	ldw	r2,-24(fp)
81133ed0:	10800017 	ldw	r2,0(r2)
81133ed4:	e0fffb17 	ldw	r3,-20(fp)
81133ed8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81133edc:	e0bffa17 	ldw	r2,-24(fp)
81133ee0:	e0fffb17 	ldw	r3,-20(fp)
81133ee4:	10c00015 	stw	r3,0(r2)
81133ee8:	e0bff817 	ldw	r2,-32(fp)
81133eec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81133ef0:	e0bff717 	ldw	r2,-36(fp)
81133ef4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81133ef8:	0005883a 	mov	r2,zero
81133efc:	00000306 	br	81133f0c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
81133f00:	00bffa84 	movi	r2,-22
81133f04:	00000106 	br	81133f0c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
81133f08:	00bfde84 	movi	r2,-134
  }
}
81133f0c:	e037883a 	mov	sp,fp
81133f10:	df000017 	ldw	fp,0(sp)
81133f14:	dec00104 	addi	sp,sp,4
81133f18:	f800283a 	ret

81133f1c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81133f1c:	defffb04 	addi	sp,sp,-20
81133f20:	df000415 	stw	fp,16(sp)
81133f24:	df000404 	addi	fp,sp,16
81133f28:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
81133f2c:	008000c4 	movi	r2,3
81133f30:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81133f34:	e0fffd17 	ldw	r3,-12(fp)
81133f38:	008003f4 	movhi	r2,15
81133f3c:	10909004 	addi	r2,r2,16960
81133f40:	1887383a 	mul	r3,r3,r2
81133f44:	00817db4 	movhi	r2,1526
81133f48:	10b84004 	addi	r2,r2,-7936
81133f4c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81133f50:	00a00034 	movhi	r2,32768
81133f54:	10bfffc4 	addi	r2,r2,-1
81133f58:	10c5203a 	divu	r2,r2,r3
81133f5c:	e0ffff17 	ldw	r3,-4(fp)
81133f60:	1885203a 	divu	r2,r3,r2
81133f64:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81133f68:	e0bffe17 	ldw	r2,-8(fp)
81133f6c:	10002526 	beq	r2,zero,81134004 <alt_busy_sleep+0xe8>
  {
    for(i=0;i<big_loops;i++)
81133f70:	e03ffc15 	stw	zero,-16(fp)
81133f74:	00001406 	br	81133fc8 <alt_busy_sleep+0xac>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
81133f78:	00a00034 	movhi	r2,32768
81133f7c:	10bfffc4 	addi	r2,r2,-1
81133f80:	10bfffc4 	addi	r2,r2,-1
81133f84:	103ffe1e 	bne	r2,zero,81133f80 <__reset+0xfb113f80>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
81133f88:	e0fffd17 	ldw	r3,-12(fp)
81133f8c:	008003f4 	movhi	r2,15
81133f90:	10909004 	addi	r2,r2,16960
81133f94:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
81133f98:	00817db4 	movhi	r2,1526
81133f9c:	10b84004 	addi	r2,r2,-7936
81133fa0:	10c7203a 	divu	r3,r2,r3
81133fa4:	00a00034 	movhi	r2,32768
81133fa8:	10bfffc4 	addi	r2,r2,-1
81133fac:	10c5203a 	divu	r2,r2,r3
81133fb0:	e0ffff17 	ldw	r3,-4(fp)
81133fb4:	1885c83a 	sub	r2,r3,r2
81133fb8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
81133fbc:	e0bffc17 	ldw	r2,-16(fp)
81133fc0:	10800044 	addi	r2,r2,1
81133fc4:	e0bffc15 	stw	r2,-16(fp)
81133fc8:	e0fffc17 	ldw	r3,-16(fp)
81133fcc:	e0bffe17 	ldw	r2,-8(fp)
81133fd0:	18bfe916 	blt	r3,r2,81133f78 <__reset+0xfb113f78>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81133fd4:	e0fffd17 	ldw	r3,-12(fp)
81133fd8:	008003f4 	movhi	r2,15
81133fdc:	10909004 	addi	r2,r2,16960
81133fe0:	1887383a 	mul	r3,r3,r2
81133fe4:	00817db4 	movhi	r2,1526
81133fe8:	10b84004 	addi	r2,r2,-7936
81133fec:	10c7203a 	divu	r3,r2,r3
81133ff0:	e0bfff17 	ldw	r2,-4(fp)
81133ff4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81133ff8:	10bfffc4 	addi	r2,r2,-1
81133ffc:	103ffe1e 	bne	r2,zero,81133ff8 <__reset+0xfb113ff8>
81134000:	00000b06 	br	81134030 <alt_busy_sleep+0x114>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81134004:	e0fffd17 	ldw	r3,-12(fp)
81134008:	008003f4 	movhi	r2,15
8113400c:	10909004 	addi	r2,r2,16960
81134010:	1887383a 	mul	r3,r3,r2
81134014:	00817db4 	movhi	r2,1526
81134018:	10b84004 	addi	r2,r2,-7936
8113401c:	10c7203a 	divu	r3,r2,r3
81134020:	e0bfff17 	ldw	r2,-4(fp)
81134024:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81134028:	10bfffc4 	addi	r2,r2,-1
8113402c:	00bffe16 	blt	zero,r2,81134028 <__reset+0xfb114028>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81134030:	0005883a 	mov	r2,zero
}
81134034:	e037883a 	mov	sp,fp
81134038:	df000017 	ldw	fp,0(sp)
8113403c:	dec00104 	addi	sp,sp,4
81134040:	f800283a 	ret

81134044 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
81134044:	defffd04 	addi	sp,sp,-12
81134048:	df000215 	stw	fp,8(sp)
8113404c:	df000204 	addi	fp,sp,8
81134050:	e13ffe15 	stw	r4,-8(fp)
81134054:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
81134058:	0001883a 	nop
8113405c:	e037883a 	mov	sp,fp
81134060:	df000017 	ldw	fp,0(sp)
81134064:	dec00104 	addi	sp,sp,4
81134068:	f800283a 	ret

8113406c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
8113406c:	defffe04 	addi	sp,sp,-8
81134070:	dfc00115 	stw	ra,4(sp)
81134074:	df000015 	stw	fp,0(sp)
81134078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113407c:	d0a01517 	ldw	r2,-32684(gp)
81134080:	10000326 	beq	r2,zero,81134090 <alt_get_errno+0x24>
81134084:	d0a01517 	ldw	r2,-32684(gp)
81134088:	103ee83a 	callr	r2
8113408c:	00000106 	br	81134094 <alt_get_errno+0x28>
81134090:	d0a06804 	addi	r2,gp,-32352
}
81134094:	e037883a 	mov	sp,fp
81134098:	dfc00117 	ldw	ra,4(sp)
8113409c:	df000017 	ldw	fp,0(sp)
811340a0:	dec00204 	addi	sp,sp,8
811340a4:	f800283a 	ret

811340a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
811340a8:	defffa04 	addi	sp,sp,-24
811340ac:	dfc00515 	stw	ra,20(sp)
811340b0:	df000415 	stw	fp,16(sp)
811340b4:	df000404 	addi	fp,sp,16
811340b8:	e13ffe15 	stw	r4,-8(fp)
811340bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
811340c0:	e0bffe17 	ldw	r2,-8(fp)
811340c4:	10000326 	beq	r2,zero,811340d4 <alt_dev_llist_insert+0x2c>
811340c8:	e0bffe17 	ldw	r2,-8(fp)
811340cc:	10800217 	ldw	r2,8(r2)
811340d0:	1000061e 	bne	r2,zero,811340ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
811340d4:	113406c0 	call	8113406c <alt_get_errno>
811340d8:	1007883a 	mov	r3,r2
811340dc:	00800584 	movi	r2,22
811340e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
811340e4:	00bffa84 	movi	r2,-22
811340e8:	00001306 	br	81134138 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
811340ec:	e0bffe17 	ldw	r2,-8(fp)
811340f0:	e0ffff17 	ldw	r3,-4(fp)
811340f4:	e0fffc15 	stw	r3,-16(fp)
811340f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811340fc:	e0bffd17 	ldw	r2,-12(fp)
81134100:	e0fffc17 	ldw	r3,-16(fp)
81134104:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
81134108:	e0bffc17 	ldw	r2,-16(fp)
8113410c:	10c00017 	ldw	r3,0(r2)
81134110:	e0bffd17 	ldw	r2,-12(fp)
81134114:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81134118:	e0bffc17 	ldw	r2,-16(fp)
8113411c:	10800017 	ldw	r2,0(r2)
81134120:	e0fffd17 	ldw	r3,-12(fp)
81134124:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81134128:	e0bffc17 	ldw	r2,-16(fp)
8113412c:	e0fffd17 	ldw	r3,-12(fp)
81134130:	10c00015 	stw	r3,0(r2)

  return 0;  
81134134:	0005883a 	mov	r2,zero
}
81134138:	e037883a 	mov	sp,fp
8113413c:	dfc00117 	ldw	ra,4(sp)
81134140:	df000017 	ldw	fp,0(sp)
81134144:	dec00204 	addi	sp,sp,8
81134148:	f800283a 	ret

8113414c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
8113414c:	defffd04 	addi	sp,sp,-12
81134150:	dfc00215 	stw	ra,8(sp)
81134154:	df000115 	stw	fp,4(sp)
81134158:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113415c:	00a044f4 	movhi	r2,33043
81134160:	10949c04 	addi	r2,r2,21104
81134164:	e0bfff15 	stw	r2,-4(fp)
81134168:	00000606 	br	81134184 <_do_ctors+0x38>
        (*ctor) (); 
8113416c:	e0bfff17 	ldw	r2,-4(fp)
81134170:	10800017 	ldw	r2,0(r2)
81134174:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81134178:	e0bfff17 	ldw	r2,-4(fp)
8113417c:	10bfff04 	addi	r2,r2,-4
81134180:	e0bfff15 	stw	r2,-4(fp)
81134184:	e0ffff17 	ldw	r3,-4(fp)
81134188:	00a044f4 	movhi	r2,33043
8113418c:	10949d04 	addi	r2,r2,21108
81134190:	18bff62e 	bgeu	r3,r2,8113416c <__reset+0xfb11416c>
        (*ctor) (); 
}
81134194:	0001883a 	nop
81134198:	e037883a 	mov	sp,fp
8113419c:	dfc00117 	ldw	ra,4(sp)
811341a0:	df000017 	ldw	fp,0(sp)
811341a4:	dec00204 	addi	sp,sp,8
811341a8:	f800283a 	ret

811341ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
811341ac:	defffd04 	addi	sp,sp,-12
811341b0:	dfc00215 	stw	ra,8(sp)
811341b4:	df000115 	stw	fp,4(sp)
811341b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811341bc:	00a044f4 	movhi	r2,33043
811341c0:	10949c04 	addi	r2,r2,21104
811341c4:	e0bfff15 	stw	r2,-4(fp)
811341c8:	00000606 	br	811341e4 <_do_dtors+0x38>
        (*dtor) (); 
811341cc:	e0bfff17 	ldw	r2,-4(fp)
811341d0:	10800017 	ldw	r2,0(r2)
811341d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811341d8:	e0bfff17 	ldw	r2,-4(fp)
811341dc:	10bfff04 	addi	r2,r2,-4
811341e0:	e0bfff15 	stw	r2,-4(fp)
811341e4:	e0ffff17 	ldw	r3,-4(fp)
811341e8:	00a044f4 	movhi	r2,33043
811341ec:	10949d04 	addi	r2,r2,21108
811341f0:	18bff62e 	bgeu	r3,r2,811341cc <__reset+0xfb1141cc>
        (*dtor) (); 
}
811341f4:	0001883a 	nop
811341f8:	e037883a 	mov	sp,fp
811341fc:	dfc00117 	ldw	ra,4(sp)
81134200:	df000017 	ldw	fp,0(sp)
81134204:	dec00204 	addi	sp,sp,8
81134208:	f800283a 	ret

8113420c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
8113420c:	defffa04 	addi	sp,sp,-24
81134210:	dfc00515 	stw	ra,20(sp)
81134214:	df000415 	stw	fp,16(sp)
81134218:	df000404 	addi	fp,sp,16
8113421c:	e13ffe15 	stw	r4,-8(fp)
81134220:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81134224:	e0bfff17 	ldw	r2,-4(fp)
81134228:	10800017 	ldw	r2,0(r2)
8113422c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81134230:	e13ffe17 	ldw	r4,-8(fp)
81134234:	110ddac0 	call	8110ddac <strlen>
81134238:	10800044 	addi	r2,r2,1
8113423c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81134240:	00000d06 	br	81134278 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81134244:	e0bffc17 	ldw	r2,-16(fp)
81134248:	10800217 	ldw	r2,8(r2)
8113424c:	e0fffd17 	ldw	r3,-12(fp)
81134250:	180d883a 	mov	r6,r3
81134254:	e17ffe17 	ldw	r5,-8(fp)
81134258:	1009883a 	mov	r4,r2
8113425c:	1134f2c0 	call	81134f2c <memcmp>
81134260:	1000021e 	bne	r2,zero,8113426c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
81134264:	e0bffc17 	ldw	r2,-16(fp)
81134268:	00000706 	br	81134288 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
8113426c:	e0bffc17 	ldw	r2,-16(fp)
81134270:	10800017 	ldw	r2,0(r2)
81134274:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81134278:	e0fffc17 	ldw	r3,-16(fp)
8113427c:	e0bfff17 	ldw	r2,-4(fp)
81134280:	18bff01e 	bne	r3,r2,81134244 <__reset+0xfb114244>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81134284:	0005883a 	mov	r2,zero
}
81134288:	e037883a 	mov	sp,fp
8113428c:	dfc00117 	ldw	ra,4(sp)
81134290:	df000017 	ldw	fp,0(sp)
81134294:	dec00204 	addi	sp,sp,8
81134298:	f800283a 	ret

8113429c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
8113429c:	defffb04 	addi	sp,sp,-20
811342a0:	dfc00415 	stw	ra,16(sp)
811342a4:	df000315 	stw	fp,12(sp)
811342a8:	df000304 	addi	fp,sp,12
811342ac:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
811342b0:	d0a01017 	ldw	r2,-32704(gp)
811342b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
811342b8:	00003106 	br	81134380 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
811342bc:	e0bffd17 	ldw	r2,-12(fp)
811342c0:	10800217 	ldw	r2,8(r2)
811342c4:	1009883a 	mov	r4,r2
811342c8:	110ddac0 	call	8110ddac <strlen>
811342cc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
811342d0:	e0bffd17 	ldw	r2,-12(fp)
811342d4:	10c00217 	ldw	r3,8(r2)
811342d8:	e0bffe17 	ldw	r2,-8(fp)
811342dc:	10bfffc4 	addi	r2,r2,-1
811342e0:	1885883a 	add	r2,r3,r2
811342e4:	10800003 	ldbu	r2,0(r2)
811342e8:	10803fcc 	andi	r2,r2,255
811342ec:	1080201c 	xori	r2,r2,128
811342f0:	10bfe004 	addi	r2,r2,-128
811342f4:	10800bd8 	cmpnei	r2,r2,47
811342f8:	1000031e 	bne	r2,zero,81134308 <alt_find_file+0x6c>
    {
      len -= 1;
811342fc:	e0bffe17 	ldw	r2,-8(fp)
81134300:	10bfffc4 	addi	r2,r2,-1
81134304:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81134308:	e0bffe17 	ldw	r2,-8(fp)
8113430c:	e0ffff17 	ldw	r3,-4(fp)
81134310:	1885883a 	add	r2,r3,r2
81134314:	10800003 	ldbu	r2,0(r2)
81134318:	10803fcc 	andi	r2,r2,255
8113431c:	1080201c 	xori	r2,r2,128
81134320:	10bfe004 	addi	r2,r2,-128
81134324:	10800be0 	cmpeqi	r2,r2,47
81134328:	1000081e 	bne	r2,zero,8113434c <alt_find_file+0xb0>
8113432c:	e0bffe17 	ldw	r2,-8(fp)
81134330:	e0ffff17 	ldw	r3,-4(fp)
81134334:	1885883a 	add	r2,r3,r2
81134338:	10800003 	ldbu	r2,0(r2)
8113433c:	10803fcc 	andi	r2,r2,255
81134340:	1080201c 	xori	r2,r2,128
81134344:	10bfe004 	addi	r2,r2,-128
81134348:	10000a1e 	bne	r2,zero,81134374 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
8113434c:	e0bffd17 	ldw	r2,-12(fp)
81134350:	10800217 	ldw	r2,8(r2)
81134354:	e0fffe17 	ldw	r3,-8(fp)
81134358:	180d883a 	mov	r6,r3
8113435c:	e17fff17 	ldw	r5,-4(fp)
81134360:	1009883a 	mov	r4,r2
81134364:	1134f2c0 	call	81134f2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81134368:	1000021e 	bne	r2,zero,81134374 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
8113436c:	e0bffd17 	ldw	r2,-12(fp)
81134370:	00000706 	br	81134390 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
81134374:	e0bffd17 	ldw	r2,-12(fp)
81134378:	10800017 	ldw	r2,0(r2)
8113437c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81134380:	e0fffd17 	ldw	r3,-12(fp)
81134384:	d0a01004 	addi	r2,gp,-32704
81134388:	18bfcc1e 	bne	r3,r2,811342bc <__reset+0xfb1142bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
8113438c:	0005883a 	mov	r2,zero
}
81134390:	e037883a 	mov	sp,fp
81134394:	dfc00117 	ldw	ra,4(sp)
81134398:	df000017 	ldw	fp,0(sp)
8113439c:	dec00204 	addi	sp,sp,8
811343a0:	f800283a 	ret

811343a4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
811343a4:	defff904 	addi	sp,sp,-28
811343a8:	dfc00615 	stw	ra,24(sp)
811343ac:	df000515 	stw	fp,20(sp)
811343b0:	df000504 	addi	fp,sp,20
811343b4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
811343b8:	00bffa04 	movi	r2,-24
811343bc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
811343c0:	d0a06f17 	ldw	r2,-32324(gp)
811343c4:	e0bffd15 	stw	r2,-12(fp)
811343c8:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811343cc:	e0bffe0b 	ldhu	r2,-8(fp)
811343d0:	e0fffe84 	addi	r3,fp,-6
811343d4:	180d883a 	mov	r6,r3
811343d8:	100b883a 	mov	r5,r2
811343dc:	e13ffd17 	ldw	r4,-12(fp)
811343e0:	1128fdc0 	call	81128fdc <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
811343e4:	e03ffb15 	stw	zero,-20(fp)
811343e8:	00001906 	br	81134450 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
811343ec:	00a04534 	movhi	r2,33044
811343f0:	10a16604 	addi	r2,r2,-31336
811343f4:	e0fffb17 	ldw	r3,-20(fp)
811343f8:	18c00324 	muli	r3,r3,12
811343fc:	10c5883a 	add	r2,r2,r3
81134400:	10800017 	ldw	r2,0(r2)
81134404:	10000f1e 	bne	r2,zero,81134444 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
81134408:	00a04534 	movhi	r2,33044
8113440c:	10a16604 	addi	r2,r2,-31336
81134410:	e0fffb17 	ldw	r3,-20(fp)
81134414:	18c00324 	muli	r3,r3,12
81134418:	10c5883a 	add	r2,r2,r3
8113441c:	e0ffff17 	ldw	r3,-4(fp)
81134420:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
81134424:	d0e01417 	ldw	r3,-32688(gp)
81134428:	e0bffb17 	ldw	r2,-20(fp)
8113442c:	1880020e 	bge	r3,r2,81134438 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
81134430:	e0bffb17 	ldw	r2,-20(fp)
81134434:	d0a01415 	stw	r2,-32688(gp)
      }
      rc = i;
81134438:	e0bffb17 	ldw	r2,-20(fp)
8113443c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
81134440:	00000606 	br	8113445c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81134444:	e0bffb17 	ldw	r2,-20(fp)
81134448:	10800044 	addi	r2,r2,1
8113444c:	e0bffb15 	stw	r2,-20(fp)
81134450:	e0bffb17 	ldw	r2,-20(fp)
81134454:	10800810 	cmplti	r2,r2,32
81134458:	103fe41e 	bne	r2,zero,811343ec <__reset+0xfb1143ec>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
8113445c:	d0a06f17 	ldw	r2,-32324(gp)
81134460:	1009883a 	mov	r4,r2
81134464:	11293540 	call	81129354 <OSSemPost>

  return rc;
81134468:	e0bffc17 	ldw	r2,-16(fp)
}
8113446c:	e037883a 	mov	sp,fp
81134470:	dfc00117 	ldw	ra,4(sp)
81134474:	df000017 	ldw	fp,0(sp)
81134478:	dec00204 	addi	sp,sp,8
8113447c:	f800283a 	ret

81134480 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81134480:	defff904 	addi	sp,sp,-28
81134484:	dfc00615 	stw	ra,24(sp)
81134488:	df000515 	stw	fp,20(sp)
8113448c:	df000504 	addi	fp,sp,20
81134490:	e13ffc15 	stw	r4,-16(fp)
81134494:	e17ffd15 	stw	r5,-12(fp)
81134498:	e1bffe15 	stw	r6,-8(fp)
8113449c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
811344a0:	e0800217 	ldw	r2,8(fp)
811344a4:	d8800015 	stw	r2,0(sp)
811344a8:	e1ffff17 	ldw	r7,-4(fp)
811344ac:	e1bffe17 	ldw	r6,-8(fp)
811344b0:	e17ffd17 	ldw	r5,-12(fp)
811344b4:	e13ffc17 	ldw	r4,-16(fp)
811344b8:	11346300 	call	81134630 <alt_iic_isr_register>
}  
811344bc:	e037883a 	mov	sp,fp
811344c0:	dfc00117 	ldw	ra,4(sp)
811344c4:	df000017 	ldw	fp,0(sp)
811344c8:	dec00204 	addi	sp,sp,8
811344cc:	f800283a 	ret

811344d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
811344d0:	defff904 	addi	sp,sp,-28
811344d4:	df000615 	stw	fp,24(sp)
811344d8:	df000604 	addi	fp,sp,24
811344dc:	e13ffe15 	stw	r4,-8(fp)
811344e0:	e17fff15 	stw	r5,-4(fp)
811344e4:	e0bfff17 	ldw	r2,-4(fp)
811344e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811344ec:	0005303a 	rdctl	r2,status
811344f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811344f4:	e0fffb17 	ldw	r3,-20(fp)
811344f8:	00bfff84 	movi	r2,-2
811344fc:	1884703a 	and	r2,r3,r2
81134500:	1001703a 	wrctl	status,r2
  
  return context;
81134504:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81134508:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
8113450c:	00c00044 	movi	r3,1
81134510:	e0bffa17 	ldw	r2,-24(fp)
81134514:	1884983a 	sll	r2,r3,r2
81134518:	1007883a 	mov	r3,r2
8113451c:	d0a09b17 	ldw	r2,-32148(gp)
81134520:	1884b03a 	or	r2,r3,r2
81134524:	d0a09b15 	stw	r2,-32148(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81134528:	d0a09b17 	ldw	r2,-32148(gp)
8113452c:	100170fa 	wrctl	ienable,r2
81134530:	e0bffc17 	ldw	r2,-16(fp)
81134534:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134538:	e0bffd17 	ldw	r2,-12(fp)
8113453c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81134540:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81134544:	0001883a 	nop
}
81134548:	e037883a 	mov	sp,fp
8113454c:	df000017 	ldw	fp,0(sp)
81134550:	dec00104 	addi	sp,sp,4
81134554:	f800283a 	ret

81134558 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
81134558:	defff904 	addi	sp,sp,-28
8113455c:	df000615 	stw	fp,24(sp)
81134560:	df000604 	addi	fp,sp,24
81134564:	e13ffe15 	stw	r4,-8(fp)
81134568:	e17fff15 	stw	r5,-4(fp)
8113456c:	e0bfff17 	ldw	r2,-4(fp)
81134570:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81134574:	0005303a 	rdctl	r2,status
81134578:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113457c:	e0fffb17 	ldw	r3,-20(fp)
81134580:	00bfff84 	movi	r2,-2
81134584:	1884703a 	and	r2,r3,r2
81134588:	1001703a 	wrctl	status,r2
  
  return context;
8113458c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81134590:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81134594:	00c00044 	movi	r3,1
81134598:	e0bffa17 	ldw	r2,-24(fp)
8113459c:	1884983a 	sll	r2,r3,r2
811345a0:	0084303a 	nor	r2,zero,r2
811345a4:	1007883a 	mov	r3,r2
811345a8:	d0a09b17 	ldw	r2,-32148(gp)
811345ac:	1884703a 	and	r2,r3,r2
811345b0:	d0a09b15 	stw	r2,-32148(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811345b4:	d0a09b17 	ldw	r2,-32148(gp)
811345b8:	100170fa 	wrctl	ienable,r2
811345bc:	e0bffc17 	ldw	r2,-16(fp)
811345c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811345c4:	e0bffd17 	ldw	r2,-12(fp)
811345c8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811345cc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
811345d0:	0001883a 	nop
}
811345d4:	e037883a 	mov	sp,fp
811345d8:	df000017 	ldw	fp,0(sp)
811345dc:	dec00104 	addi	sp,sp,4
811345e0:	f800283a 	ret

811345e4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
811345e4:	defffc04 	addi	sp,sp,-16
811345e8:	df000315 	stw	fp,12(sp)
811345ec:	df000304 	addi	fp,sp,12
811345f0:	e13ffe15 	stw	r4,-8(fp)
811345f4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
811345f8:	000530fa 	rdctl	r2,ienable
811345fc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81134600:	00c00044 	movi	r3,1
81134604:	e0bfff17 	ldw	r2,-4(fp)
81134608:	1884983a 	sll	r2,r3,r2
8113460c:	1007883a 	mov	r3,r2
81134610:	e0bffd17 	ldw	r2,-12(fp)
81134614:	1884703a 	and	r2,r3,r2
81134618:	1004c03a 	cmpne	r2,r2,zero
8113461c:	10803fcc 	andi	r2,r2,255
}
81134620:	e037883a 	mov	sp,fp
81134624:	df000017 	ldw	fp,0(sp)
81134628:	dec00104 	addi	sp,sp,4
8113462c:	f800283a 	ret

81134630 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81134630:	defff504 	addi	sp,sp,-44
81134634:	dfc00a15 	stw	ra,40(sp)
81134638:	df000915 	stw	fp,36(sp)
8113463c:	df000904 	addi	fp,sp,36
81134640:	e13ffc15 	stw	r4,-16(fp)
81134644:	e17ffd15 	stw	r5,-12(fp)
81134648:	e1bffe15 	stw	r6,-8(fp)
8113464c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81134650:	00bffa84 	movi	r2,-22
81134654:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
81134658:	e0bffd17 	ldw	r2,-12(fp)
8113465c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81134660:	e0bff817 	ldw	r2,-32(fp)
81134664:	10800808 	cmpgei	r2,r2,32
81134668:	1000271e 	bne	r2,zero,81134708 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113466c:	0005303a 	rdctl	r2,status
81134670:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81134674:	e0fffb17 	ldw	r3,-20(fp)
81134678:	00bfff84 	movi	r2,-2
8113467c:	1884703a 	and	r2,r3,r2
81134680:	1001703a 	wrctl	status,r2
  
  return context;
81134684:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
81134688:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
8113468c:	00a045b4 	movhi	r2,33046
81134690:	10b8d004 	addi	r2,r2,-7360
81134694:	e0fff817 	ldw	r3,-32(fp)
81134698:	180690fa 	slli	r3,r3,3
8113469c:	10c5883a 	add	r2,r2,r3
811346a0:	e0fffe17 	ldw	r3,-8(fp)
811346a4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
811346a8:	00a045b4 	movhi	r2,33046
811346ac:	10b8d004 	addi	r2,r2,-7360
811346b0:	e0fff817 	ldw	r3,-32(fp)
811346b4:	180690fa 	slli	r3,r3,3
811346b8:	10c5883a 	add	r2,r2,r3
811346bc:	10800104 	addi	r2,r2,4
811346c0:	e0ffff17 	ldw	r3,-4(fp)
811346c4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
811346c8:	e0bffe17 	ldw	r2,-8(fp)
811346cc:	10000526 	beq	r2,zero,811346e4 <alt_iic_isr_register+0xb4>
811346d0:	e0bff817 	ldw	r2,-32(fp)
811346d4:	100b883a 	mov	r5,r2
811346d8:	e13ffc17 	ldw	r4,-16(fp)
811346dc:	11344d00 	call	811344d0 <alt_ic_irq_enable>
811346e0:	00000406 	br	811346f4 <alt_iic_isr_register+0xc4>
811346e4:	e0bff817 	ldw	r2,-32(fp)
811346e8:	100b883a 	mov	r5,r2
811346ec:	e13ffc17 	ldw	r4,-16(fp)
811346f0:	11345580 	call	81134558 <alt_ic_irq_disable>
811346f4:	e0bff715 	stw	r2,-36(fp)
811346f8:	e0bffa17 	ldw	r2,-24(fp)
811346fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81134700:	e0bff917 	ldw	r2,-28(fp)
81134704:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
81134708:	e0bff717 	ldw	r2,-36(fp)
}
8113470c:	e037883a 	mov	sp,fp
81134710:	dfc00117 	ldw	ra,4(sp)
81134714:	df000017 	ldw	fp,0(sp)
81134718:	dec00204 	addi	sp,sp,8
8113471c:	f800283a 	ret

81134720 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
81134720:	defff904 	addi	sp,sp,-28
81134724:	dfc00615 	stw	ra,24(sp)
81134728:	df000515 	stw	fp,20(sp)
8113472c:	df000504 	addi	fp,sp,20
81134730:	e13ffc15 	stw	r4,-16(fp)
81134734:	e17ffd15 	stw	r5,-12(fp)
81134738:	e1bffe15 	stw	r6,-8(fp)
8113473c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81134740:	e1bfff17 	ldw	r6,-4(fp)
81134744:	e17ffe17 	ldw	r5,-8(fp)
81134748:	e13ffd17 	ldw	r4,-12(fp)
8113474c:	1121f200 	call	81121f20 <open>
81134750:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
81134754:	e0bffb17 	ldw	r2,-20(fp)
81134758:	10001c16 	blt	r2,zero,811347cc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
8113475c:	00a04534 	movhi	r2,33044
81134760:	10a16604 	addi	r2,r2,-31336
81134764:	e0fffb17 	ldw	r3,-20(fp)
81134768:	18c00324 	muli	r3,r3,12
8113476c:	10c5883a 	add	r2,r2,r3
81134770:	10c00017 	ldw	r3,0(r2)
81134774:	e0bffc17 	ldw	r2,-16(fp)
81134778:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
8113477c:	00a04534 	movhi	r2,33044
81134780:	10a16604 	addi	r2,r2,-31336
81134784:	e0fffb17 	ldw	r3,-20(fp)
81134788:	18c00324 	muli	r3,r3,12
8113478c:	10c5883a 	add	r2,r2,r3
81134790:	10800104 	addi	r2,r2,4
81134794:	10c00017 	ldw	r3,0(r2)
81134798:	e0bffc17 	ldw	r2,-16(fp)
8113479c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
811347a0:	00a04534 	movhi	r2,33044
811347a4:	10a16604 	addi	r2,r2,-31336
811347a8:	e0fffb17 	ldw	r3,-20(fp)
811347ac:	18c00324 	muli	r3,r3,12
811347b0:	10c5883a 	add	r2,r2,r3
811347b4:	10800204 	addi	r2,r2,8
811347b8:	10c00017 	ldw	r3,0(r2)
811347bc:	e0bffc17 	ldw	r2,-16(fp)
811347c0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
811347c4:	e13ffb17 	ldw	r4,-20(fp)
811347c8:	11221ac0 	call	811221ac <alt_release_fd>
  }
} 
811347cc:	0001883a 	nop
811347d0:	e037883a 	mov	sp,fp
811347d4:	dfc00117 	ldw	ra,4(sp)
811347d8:	df000017 	ldw	fp,0(sp)
811347dc:	dec00204 	addi	sp,sp,8
811347e0:	f800283a 	ret

811347e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
811347e4:	defffb04 	addi	sp,sp,-20
811347e8:	dfc00415 	stw	ra,16(sp)
811347ec:	df000315 	stw	fp,12(sp)
811347f0:	df000304 	addi	fp,sp,12
811347f4:	e13ffd15 	stw	r4,-12(fp)
811347f8:	e17ffe15 	stw	r5,-8(fp)
811347fc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
81134800:	01c07fc4 	movi	r7,511
81134804:	01800044 	movi	r6,1
81134808:	e17ffd17 	ldw	r5,-12(fp)
8113480c:	01204534 	movhi	r4,33044
81134810:	21216904 	addi	r4,r4,-31324
81134814:	11347200 	call	81134720 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
81134818:	01c07fc4 	movi	r7,511
8113481c:	000d883a 	mov	r6,zero
81134820:	e17ffe17 	ldw	r5,-8(fp)
81134824:	01204534 	movhi	r4,33044
81134828:	21216604 	addi	r4,r4,-31336
8113482c:	11347200 	call	81134720 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81134830:	01c07fc4 	movi	r7,511
81134834:	01800044 	movi	r6,1
81134838:	e17fff17 	ldw	r5,-4(fp)
8113483c:	01204534 	movhi	r4,33044
81134840:	21216c04 	addi	r4,r4,-31312
81134844:	11347200 	call	81134720 <alt_open_fd>
}  
81134848:	0001883a 	nop
8113484c:	e037883a 	mov	sp,fp
81134850:	dfc00117 	ldw	ra,4(sp)
81134854:	df000017 	ldw	fp,0(sp)
81134858:	dec00204 	addi	sp,sp,8
8113485c:	f800283a 	ret

81134860 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
81134860:	defff204 	addi	sp,sp,-56
81134864:	dfc00a15 	stw	ra,40(sp)
81134868:	df000915 	stw	fp,36(sp)
8113486c:	df000904 	addi	fp,sp,36
81134870:	e13fff15 	stw	r4,-4(fp)
81134874:	e1400215 	stw	r5,8(fp)
81134878:	e1800315 	stw	r6,12(fp)
8113487c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
81134880:	e0800204 	addi	r2,fp,8
81134884:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
81134888:	e0bfff17 	ldw	r2,-4(fp)
8113488c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
81134890:	00006f06 	br	81134a50 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
81134894:	e0bff807 	ldb	r2,-32(fp)
81134898:	10800960 	cmpeqi	r2,r2,37
8113489c:	1000041e 	bne	r2,zero,811348b0 <alt_printf+0x50>
        {
            alt_putchar(c);
811348a0:	e0bff807 	ldb	r2,-32(fp)
811348a4:	1009883a 	mov	r4,r2
811348a8:	1134a8c0 	call	81134a8c <alt_putchar>
811348ac:	00006806 	br	81134a50 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
811348b0:	e0bff717 	ldw	r2,-36(fp)
811348b4:	10c00044 	addi	r3,r2,1
811348b8:	e0fff715 	stw	r3,-36(fp)
811348bc:	10800003 	ldbu	r2,0(r2)
811348c0:	e0bff805 	stb	r2,-32(fp)
811348c4:	e0bff807 	ldb	r2,-32(fp)
811348c8:	10006926 	beq	r2,zero,81134a70 <alt_printf+0x210>
            {
                if (c == '%')
811348cc:	e0bff807 	ldb	r2,-32(fp)
811348d0:	10800958 	cmpnei	r2,r2,37
811348d4:	1000041e 	bne	r2,zero,811348e8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
811348d8:	e0bff807 	ldb	r2,-32(fp)
811348dc:	1009883a 	mov	r4,r2
811348e0:	1134a8c0 	call	81134a8c <alt_putchar>
811348e4:	00005a06 	br	81134a50 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
811348e8:	e0bff807 	ldb	r2,-32(fp)
811348ec:	108018d8 	cmpnei	r2,r2,99
811348f0:	1000081e 	bne	r2,zero,81134914 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
811348f4:	e0bffe17 	ldw	r2,-8(fp)
811348f8:	10c00104 	addi	r3,r2,4
811348fc:	e0fffe15 	stw	r3,-8(fp)
81134900:	10800017 	ldw	r2,0(r2)
81134904:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81134908:	e13ffd17 	ldw	r4,-12(fp)
8113490c:	1134a8c0 	call	81134a8c <alt_putchar>
81134910:	00004f06 	br	81134a50 <alt_printf+0x1f0>
                }
                else if (c == 'x')
81134914:	e0bff807 	ldb	r2,-32(fp)
81134918:	10801e18 	cmpnei	r2,r2,120
8113491c:	1000341e 	bne	r2,zero,811349f0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81134920:	e0bffe17 	ldw	r2,-8(fp)
81134924:	10c00104 	addi	r3,r2,4
81134928:	e0fffe15 	stw	r3,-8(fp)
8113492c:	10800017 	ldw	r2,0(r2)
81134930:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81134934:	e0bffb17 	ldw	r2,-20(fp)
81134938:	1000031e 	bne	r2,zero,81134948 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
8113493c:	01000c04 	movi	r4,48
81134940:	1134a8c0 	call	81134a8c <alt_putchar>
                        continue;
81134944:	00004206 	br	81134a50 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81134948:	00800704 	movi	r2,28
8113494c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
81134950:	00000306 	br	81134960 <alt_printf+0x100>
                        digit_shift -= 4;
81134954:	e0bff917 	ldw	r2,-28(fp)
81134958:	10bfff04 	addi	r2,r2,-4
8113495c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
81134960:	00c003c4 	movi	r3,15
81134964:	e0bff917 	ldw	r2,-28(fp)
81134968:	1884983a 	sll	r2,r3,r2
8113496c:	1007883a 	mov	r3,r2
81134970:	e0bffb17 	ldw	r2,-20(fp)
81134974:	1884703a 	and	r2,r3,r2
81134978:	103ff626 	beq	r2,zero,81134954 <__reset+0xfb114954>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
8113497c:	00001906 	br	811349e4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
81134980:	00c003c4 	movi	r3,15
81134984:	e0bff917 	ldw	r2,-28(fp)
81134988:	1884983a 	sll	r2,r3,r2
8113498c:	1007883a 	mov	r3,r2
81134990:	e0bffb17 	ldw	r2,-20(fp)
81134994:	1886703a 	and	r3,r3,r2
81134998:	e0bff917 	ldw	r2,-28(fp)
8113499c:	1884d83a 	srl	r2,r3,r2
811349a0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
811349a4:	e0bffc17 	ldw	r2,-16(fp)
811349a8:	108002a8 	cmpgeui	r2,r2,10
811349ac:	1000041e 	bne	r2,zero,811349c0 <alt_printf+0x160>
                            c = '0' + digit;
811349b0:	e0bffc17 	ldw	r2,-16(fp)
811349b4:	10800c04 	addi	r2,r2,48
811349b8:	e0bff805 	stb	r2,-32(fp)
811349bc:	00000306 	br	811349cc <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
811349c0:	e0bffc17 	ldw	r2,-16(fp)
811349c4:	108015c4 	addi	r2,r2,87
811349c8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
811349cc:	e0bff807 	ldb	r2,-32(fp)
811349d0:	1009883a 	mov	r4,r2
811349d4:	1134a8c0 	call	81134a8c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811349d8:	e0bff917 	ldw	r2,-28(fp)
811349dc:	10bfff04 	addi	r2,r2,-4
811349e0:	e0bff915 	stw	r2,-28(fp)
811349e4:	e0bff917 	ldw	r2,-28(fp)
811349e8:	103fe50e 	bge	r2,zero,81134980 <__reset+0xfb114980>
811349ec:	00001806 	br	81134a50 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
811349f0:	e0bff807 	ldb	r2,-32(fp)
811349f4:	10801cd8 	cmpnei	r2,r2,115
811349f8:	1000151e 	bne	r2,zero,81134a50 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
811349fc:	e0bffe17 	ldw	r2,-8(fp)
81134a00:	10c00104 	addi	r3,r2,4
81134a04:	e0fffe15 	stw	r3,-8(fp)
81134a08:	10800017 	ldw	r2,0(r2)
81134a0c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81134a10:	00000906 	br	81134a38 <alt_printf+0x1d8>
                      alt_putchar(*s++);
81134a14:	e0bffa17 	ldw	r2,-24(fp)
81134a18:	10c00044 	addi	r3,r2,1
81134a1c:	e0fffa15 	stw	r3,-24(fp)
81134a20:	10800003 	ldbu	r2,0(r2)
81134a24:	10803fcc 	andi	r2,r2,255
81134a28:	1080201c 	xori	r2,r2,128
81134a2c:	10bfe004 	addi	r2,r2,-128
81134a30:	1009883a 	mov	r4,r2
81134a34:	1134a8c0 	call	81134a8c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81134a38:	e0bffa17 	ldw	r2,-24(fp)
81134a3c:	10800003 	ldbu	r2,0(r2)
81134a40:	10803fcc 	andi	r2,r2,255
81134a44:	1080201c 	xori	r2,r2,128
81134a48:	10bfe004 	addi	r2,r2,-128
81134a4c:	103ff11e 	bne	r2,zero,81134a14 <__reset+0xfb114a14>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
81134a50:	e0bff717 	ldw	r2,-36(fp)
81134a54:	10c00044 	addi	r3,r2,1
81134a58:	e0fff715 	stw	r3,-36(fp)
81134a5c:	10800003 	ldbu	r2,0(r2)
81134a60:	e0bff805 	stb	r2,-32(fp)
81134a64:	e0bff807 	ldb	r2,-32(fp)
81134a68:	103f8a1e 	bne	r2,zero,81134894 <__reset+0xfb114894>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81134a6c:	00000106 	br	81134a74 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
81134a70:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
81134a74:	0001883a 	nop
81134a78:	e037883a 	mov	sp,fp
81134a7c:	dfc00117 	ldw	ra,4(sp)
81134a80:	df000017 	ldw	fp,0(sp)
81134a84:	dec00504 	addi	sp,sp,20
81134a88:	f800283a 	ret

81134a8c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
81134a8c:	defffd04 	addi	sp,sp,-12
81134a90:	dfc00215 	stw	ra,8(sp)
81134a94:	df000115 	stw	fp,4(sp)
81134a98:	df000104 	addi	fp,sp,4
81134a9c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
81134aa0:	d0a00a17 	ldw	r2,-32728(gp)
81134aa4:	10800217 	ldw	r2,8(r2)
81134aa8:	100b883a 	mov	r5,r2
81134aac:	e13fff17 	ldw	r4,-4(fp)
81134ab0:	11182e80 	call	811182e8 <putc>
#endif
#endif
}
81134ab4:	e037883a 	mov	sp,fp
81134ab8:	dfc00117 	ldw	ra,4(sp)
81134abc:	df000017 	ldw	fp,0(sp)
81134ac0:	dec00204 	addi	sp,sp,8
81134ac4:	f800283a 	ret

81134ac8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81134ac8:	deffff04 	addi	sp,sp,-4
81134acc:	df000015 	stw	fp,0(sp)
81134ad0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
81134ad4:	000170fa 	wrctl	ienable,zero
}
81134ad8:	0001883a 	nop
81134adc:	e037883a 	mov	sp,fp
81134ae0:	df000017 	ldw	fp,0(sp)
81134ae4:	dec00104 	addi	sp,sp,4
81134ae8:	f800283a 	ret

81134aec <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
81134aec:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
81134af0:	d0e00a17 	ldw	r3,-32728(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
81134af4:	d1208917 	ldw	r4,-32220(gp)

      stw ra,  0(sp)
81134af8:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
81134afc:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
81134b00:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
81134b04:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
81134b08:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
81134b0c:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
81134b10:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
81134b14:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
81134b18:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
81134b1c:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
81134b20:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
81134b24:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
81134b28:	1134d600 	call	81134d60 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
81134b2c:	d1208317 	ldw	r4,-32244(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
81134b30:	d1607b07 	ldb	r5,-32276(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
81134b34:	d1208915 	stw	r4,-32220(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
81134b38:	d1607b45 	stb	r5,-32275(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
81134b3c:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
81134b40:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
81134b44:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
81134b48:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
81134b4c:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
81134b50:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
81134b54:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
81134b58:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
81134b5c:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
81134b60:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
81134b64:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
81134b68:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
81134b6c:	d0e00a15 	stw	r3,-32728(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
81134b70:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
81134b74:	f800283a 	ret

81134b78 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
81134b78:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
81134b7c:	047fff84 	movi	r17,-2
      and   r18, r18, r17
81134b80:	9464703a 	and	r18,r18,r17
      wrctl status, r18
81134b84:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
81134b88:	1134d600 	call	81134d60 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
81134b8c:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
81134b90:	d4a07945 	stb	r18,-32283(gp)

      /*
       * start execution of the new task.
       */

      br 9b
81134b94:	003fe506 	br	81134b2c <__reset+0xfb114b2c>

81134b98 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
81134b98:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
81134b9c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
81134ba0:	10800054 	ori	r2,r2,1
      wrctl status, r2
81134ba4:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
81134ba8:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
81134bac:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
81134bb0:	dec00204 	addi	sp,sp,8

      callr r2
81134bb4:	103ee83a 	callr	r2

      nop
81134bb8:	0001883a 	nop

81134bbc <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
81134bbc:	defff704 	addi	sp,sp,-36
81134bc0:	dfc00815 	stw	ra,32(sp)
81134bc4:	df000715 	stw	fp,28(sp)
81134bc8:	df000704 	addi	fp,sp,28
81134bcc:	e13ffc15 	stw	r4,-16(fp)
81134bd0:	e17ffd15 	stw	r5,-12(fp)
81134bd4:	e1bffe15 	stw	r6,-8(fp)
81134bd8:	3805883a 	mov	r2,r7
81134bdc:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
81134be0:	e0fffe17 	ldw	r3,-8(fp)
81134be4:	00bfff04 	movi	r2,-4
81134be8:	1884703a 	and	r2,r3,r2
81134bec:	10bef704 	addi	r2,r2,-1060
81134bf0:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
81134bf4:	01810904 	movi	r6,1060
81134bf8:	000b883a 	mov	r5,zero
81134bfc:	e13ff917 	ldw	r4,-28(fp)
81134c00:	110d5c80 	call	8110d5c8 <memset>
81134c04:	e0bff917 	ldw	r2,-28(fp)
81134c08:	10c0bb04 	addi	r3,r2,748
81134c0c:	e0bff917 	ldw	r2,-28(fp)
81134c10:	10c00115 	stw	r3,4(r2)
81134c14:	e0bff917 	ldw	r2,-28(fp)
81134c18:	10c0d504 	addi	r3,r2,852
81134c1c:	e0bff917 	ldw	r2,-28(fp)
81134c20:	10c00215 	stw	r3,8(r2)
81134c24:	e0bff917 	ldw	r2,-28(fp)
81134c28:	10c0ef04 	addi	r3,r2,956
81134c2c:	e0bff917 	ldw	r2,-28(fp)
81134c30:	10c00315 	stw	r3,12(r2)
81134c34:	e0fff917 	ldw	r3,-28(fp)
81134c38:	00a044f4 	movhi	r2,33043
81134c3c:	109f3204 	addi	r2,r2,31944
81134c40:	18800d15 	stw	r2,52(r3)
81134c44:	e0bff917 	ldw	r2,-28(fp)
81134c48:	00c00044 	movi	r3,1
81134c4c:	10c02915 	stw	r3,164(r2)
81134c50:	10002a15 	stw	zero,168(r2)
81134c54:	e0bff917 	ldw	r2,-28(fp)
81134c58:	00ccc384 	movi	r3,13070
81134c5c:	10c02b0d 	sth	r3,172(r2)
81134c60:	e0bff917 	ldw	r2,-28(fp)
81134c64:	00eaf344 	movi	r3,-21555
81134c68:	10c02b8d 	sth	r3,174(r2)
81134c6c:	e0bff917 	ldw	r2,-28(fp)
81134c70:	00c48d04 	movi	r3,4660
81134c74:	10c02c0d 	sth	r3,176(r2)
81134c78:	e0bff917 	ldw	r2,-28(fp)
81134c7c:	00f99b44 	movi	r3,-6547
81134c80:	10c02c8d 	sth	r3,178(r2)
81134c84:	e0bff917 	ldw	r2,-28(fp)
81134c88:	00f7bb04 	movi	r3,-8468
81134c8c:	10c02d0d 	sth	r3,180(r2)
81134c90:	e0bff917 	ldw	r2,-28(fp)
81134c94:	00c00144 	movi	r3,5
81134c98:	10c02d8d 	sth	r3,182(r2)
81134c9c:	e0bff917 	ldw	r2,-28(fp)
81134ca0:	00c002c4 	movi	r3,11
81134ca4:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
81134ca8:	e0bff917 	ldw	r2,-28(fp)
81134cac:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
81134cb0:	e0bffa17 	ldw	r2,-24(fp)
81134cb4:	10bff304 	addi	r2,r2,-52
81134cb8:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
81134cbc:	e0bffb17 	ldw	r2,-20(fp)
81134cc0:	10800c04 	addi	r2,r2,48
81134cc4:	e0fffc17 	ldw	r3,-16(fp)
81134cc8:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
81134ccc:	e0bffb17 	ldw	r2,-20(fp)
81134cd0:	10800b04 	addi	r2,r2,44
81134cd4:	e0fffd17 	ldw	r3,-12(fp)
81134cd8:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
81134cdc:	e0bffb17 	ldw	r2,-20(fp)
81134ce0:	10800a04 	addi	r2,r2,40
81134ce4:	e0fff917 	ldw	r3,-28(fp)
81134ce8:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
81134cec:	00a044f4 	movhi	r2,33043
81134cf0:	1092e604 	addi	r2,r2,19352
81134cf4:	10c00104 	addi	r3,r2,4
81134cf8:	e0bffb17 	ldw	r2,-20(fp)
81134cfc:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
81134d00:	e0bffb17 	ldw	r2,-20(fp)
}
81134d04:	e037883a 	mov	sp,fp
81134d08:	dfc00117 	ldw	ra,4(sp)
81134d0c:	df000017 	ldw	fp,0(sp)
81134d10:	dec00204 	addi	sp,sp,8
81134d14:	f800283a 	ret

81134d18 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
81134d18:	defffe04 	addi	sp,sp,-8
81134d1c:	df000115 	stw	fp,4(sp)
81134d20:	df000104 	addi	fp,sp,4
81134d24:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
81134d28:	0001883a 	nop
81134d2c:	e037883a 	mov	sp,fp
81134d30:	df000017 	ldw	fp,0(sp)
81134d34:	dec00104 	addi	sp,sp,4
81134d38:	f800283a 	ret

81134d3c <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
81134d3c:	defffe04 	addi	sp,sp,-8
81134d40:	df000115 	stw	fp,4(sp)
81134d44:	df000104 	addi	fp,sp,4
81134d48:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
81134d4c:	0001883a 	nop
81134d50:	e037883a 	mov	sp,fp
81134d54:	df000017 	ldw	fp,0(sp)
81134d58:	dec00104 	addi	sp,sp,4
81134d5c:	f800283a 	ret

81134d60 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
81134d60:	deffff04 	addi	sp,sp,-4
81134d64:	df000015 	stw	fp,0(sp)
81134d68:	d839883a 	mov	fp,sp
}
81134d6c:	0001883a 	nop
81134d70:	e037883a 	mov	sp,fp
81134d74:	df000017 	ldw	fp,0(sp)
81134d78:	dec00104 	addi	sp,sp,4
81134d7c:	f800283a 	ret

81134d80 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
81134d80:	deffff04 	addi	sp,sp,-4
81134d84:	df000015 	stw	fp,0(sp)
81134d88:	d839883a 	mov	fp,sp
}
81134d8c:	0001883a 	nop
81134d90:	e037883a 	mov	sp,fp
81134d94:	df000017 	ldw	fp,0(sp)
81134d98:	dec00104 	addi	sp,sp,4
81134d9c:	f800283a 	ret

81134da0 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
81134da0:	deffff04 	addi	sp,sp,-4
81134da4:	df000015 	stw	fp,0(sp)
81134da8:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
81134dac:	0001883a 	nop
81134db0:	e037883a 	mov	sp,fp
81134db4:	df000017 	ldw	fp,0(sp)
81134db8:	dec00104 	addi	sp,sp,4
81134dbc:	f800283a 	ret

81134dc0 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
81134dc0:	deffff04 	addi	sp,sp,-4
81134dc4:	df000015 	stw	fp,0(sp)
81134dc8:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
81134dcc:	0001883a 	nop
81134dd0:	e037883a 	mov	sp,fp
81134dd4:	df000017 	ldw	fp,0(sp)
81134dd8:	dec00104 	addi	sp,sp,4
81134ddc:	f800283a 	ret

81134de0 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
81134de0:	deffff04 	addi	sp,sp,-4
81134de4:	df000015 	stw	fp,0(sp)
81134de8:	d839883a 	mov	fp,sp
}
81134dec:	0001883a 	nop
81134df0:	e037883a 	mov	sp,fp
81134df4:	df000017 	ldw	fp,0(sp)
81134df8:	dec00104 	addi	sp,sp,4
81134dfc:	f800283a 	ret

81134e00 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
81134e00:	deffff04 	addi	sp,sp,-4
81134e04:	df000015 	stw	fp,0(sp)
81134e08:	d839883a 	mov	fp,sp
}
81134e0c:	0001883a 	nop
81134e10:	e037883a 	mov	sp,fp
81134e14:	df000017 	ldw	fp,0(sp)
81134e18:	dec00104 	addi	sp,sp,4
81134e1c:	f800283a 	ret

81134e20 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
81134e20:	defffe04 	addi	sp,sp,-8
81134e24:	df000115 	stw	fp,4(sp)
81134e28:	df000104 	addi	fp,sp,4
81134e2c:	e13fff15 	stw	r4,-4(fp)
}
81134e30:	0001883a 	nop
81134e34:	e037883a 	mov	sp,fp
81134e38:	df000017 	ldw	fp,0(sp)
81134e3c:	dec00104 	addi	sp,sp,4
81134e40:	f800283a 	ret

81134e44 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81134e44:	defffe04 	addi	sp,sp,-8
81134e48:	df000115 	stw	fp,4(sp)
81134e4c:	df000104 	addi	fp,sp,4
81134e50:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
81134e54:	e0bfff17 	ldw	r2,-4(fp)
81134e58:	10bffe84 	addi	r2,r2,-6
81134e5c:	10c00428 	cmpgeui	r3,r2,16
81134e60:	18001a1e 	bne	r3,zero,81134ecc <alt_exception_cause_generated_bad_addr+0x88>
81134e64:	100690ba 	slli	r3,r2,2
81134e68:	00a044f4 	movhi	r2,33043
81134e6c:	10939f04 	addi	r2,r2,20092
81134e70:	1885883a 	add	r2,r3,r2
81134e74:	10800017 	ldw	r2,0(r2)
81134e78:	1000683a 	jmp	r2
81134e7c:	81134ebc 	xorhi	r4,r16,19770
81134e80:	81134ebc 	xorhi	r4,r16,19770
81134e84:	81134ecc 	andi	r4,r16,19771
81134e88:	81134ecc 	andi	r4,r16,19771
81134e8c:	81134ecc 	andi	r4,r16,19771
81134e90:	81134ebc 	xorhi	r4,r16,19770
81134e94:	81134ec4 	addi	r4,r16,19771
81134e98:	81134ecc 	andi	r4,r16,19771
81134e9c:	81134ebc 	xorhi	r4,r16,19770
81134ea0:	81134ebc 	xorhi	r4,r16,19770
81134ea4:	81134ecc 	andi	r4,r16,19771
81134ea8:	81134ebc 	xorhi	r4,r16,19770
81134eac:	81134ec4 	addi	r4,r16,19771
81134eb0:	81134ecc 	andi	r4,r16,19771
81134eb4:	81134ecc 	andi	r4,r16,19771
81134eb8:	81134ebc 	xorhi	r4,r16,19770
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
81134ebc:	00800044 	movi	r2,1
81134ec0:	00000306 	br	81134ed0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
81134ec4:	0005883a 	mov	r2,zero
81134ec8:	00000106 	br	81134ed0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
81134ecc:	0005883a 	mov	r2,zero
  }
}
81134ed0:	e037883a 	mov	sp,fp
81134ed4:	df000017 	ldw	fp,0(sp)
81134ed8:	dec00104 	addi	sp,sp,4
81134edc:	f800283a 	ret

81134ee0 <atexit>:
81134ee0:	200b883a 	mov	r5,r4
81134ee4:	000f883a 	mov	r7,zero
81134ee8:	000d883a 	mov	r6,zero
81134eec:	0009883a 	mov	r4,zero
81134ef0:	1134fa81 	jmpi	81134fa8 <__register_exitproc>

81134ef4 <exit>:
81134ef4:	defffe04 	addi	sp,sp,-8
81134ef8:	000b883a 	mov	r5,zero
81134efc:	dc000015 	stw	r16,0(sp)
81134f00:	dfc00115 	stw	ra,4(sp)
81134f04:	2021883a 	mov	r16,r4
81134f08:	11350c00 	call	811350c0 <__call_exitprocs>
81134f0c:	00a04534 	movhi	r2,33044
81134f10:	10a65a04 	addi	r2,r2,-26264
81134f14:	11000017 	ldw	r4,0(r2)
81134f18:	20800f17 	ldw	r2,60(r4)
81134f1c:	10000126 	beq	r2,zero,81134f24 <exit+0x30>
81134f20:	103ee83a 	callr	r2
81134f24:	8009883a 	mov	r4,r16
81134f28:	11352400 	call	81135240 <_exit>

81134f2c <memcmp>:
81134f2c:	01c000c4 	movi	r7,3
81134f30:	3980192e 	bgeu	r7,r6,81134f98 <memcmp+0x6c>
81134f34:	2144b03a 	or	r2,r4,r5
81134f38:	11c4703a 	and	r2,r2,r7
81134f3c:	10000f26 	beq	r2,zero,81134f7c <memcmp+0x50>
81134f40:	20800003 	ldbu	r2,0(r4)
81134f44:	28c00003 	ldbu	r3,0(r5)
81134f48:	10c0151e 	bne	r2,r3,81134fa0 <memcmp+0x74>
81134f4c:	31bfff84 	addi	r6,r6,-2
81134f50:	01ffffc4 	movi	r7,-1
81134f54:	00000406 	br	81134f68 <memcmp+0x3c>
81134f58:	20800003 	ldbu	r2,0(r4)
81134f5c:	28c00003 	ldbu	r3,0(r5)
81134f60:	31bfffc4 	addi	r6,r6,-1
81134f64:	10c00e1e 	bne	r2,r3,81134fa0 <memcmp+0x74>
81134f68:	21000044 	addi	r4,r4,1
81134f6c:	29400044 	addi	r5,r5,1
81134f70:	31fff91e 	bne	r6,r7,81134f58 <__reset+0xfb114f58>
81134f74:	0005883a 	mov	r2,zero
81134f78:	f800283a 	ret
81134f7c:	20c00017 	ldw	r3,0(r4)
81134f80:	28800017 	ldw	r2,0(r5)
81134f84:	18bfee1e 	bne	r3,r2,81134f40 <__reset+0xfb114f40>
81134f88:	31bfff04 	addi	r6,r6,-4
81134f8c:	21000104 	addi	r4,r4,4
81134f90:	29400104 	addi	r5,r5,4
81134f94:	39bff936 	bltu	r7,r6,81134f7c <__reset+0xfb114f7c>
81134f98:	303fe91e 	bne	r6,zero,81134f40 <__reset+0xfb114f40>
81134f9c:	003ff506 	br	81134f74 <__reset+0xfb114f74>
81134fa0:	10c5c83a 	sub	r2,r2,r3
81134fa4:	f800283a 	ret

81134fa8 <__register_exitproc>:
81134fa8:	defffa04 	addi	sp,sp,-24
81134fac:	dc000315 	stw	r16,12(sp)
81134fb0:	04204534 	movhi	r16,33044
81134fb4:	84265a04 	addi	r16,r16,-26264
81134fb8:	80c00017 	ldw	r3,0(r16)
81134fbc:	dc400415 	stw	r17,16(sp)
81134fc0:	dfc00515 	stw	ra,20(sp)
81134fc4:	18805217 	ldw	r2,328(r3)
81134fc8:	2023883a 	mov	r17,r4
81134fcc:	10003726 	beq	r2,zero,811350ac <__register_exitproc+0x104>
81134fd0:	10c00117 	ldw	r3,4(r2)
81134fd4:	010007c4 	movi	r4,31
81134fd8:	20c00e16 	blt	r4,r3,81135014 <__register_exitproc+0x6c>
81134fdc:	1a000044 	addi	r8,r3,1
81134fe0:	8800221e 	bne	r17,zero,8113506c <__register_exitproc+0xc4>
81134fe4:	18c00084 	addi	r3,r3,2
81134fe8:	18c7883a 	add	r3,r3,r3
81134fec:	18c7883a 	add	r3,r3,r3
81134ff0:	12000115 	stw	r8,4(r2)
81134ff4:	10c7883a 	add	r3,r2,r3
81134ff8:	19400015 	stw	r5,0(r3)
81134ffc:	0005883a 	mov	r2,zero
81135000:	dfc00517 	ldw	ra,20(sp)
81135004:	dc400417 	ldw	r17,16(sp)
81135008:	dc000317 	ldw	r16,12(sp)
8113500c:	dec00604 	addi	sp,sp,24
81135010:	f800283a 	ret
81135014:	00800034 	movhi	r2,0
81135018:	10800004 	addi	r2,r2,0
8113501c:	10002626 	beq	r2,zero,811350b8 <__register_exitproc+0x110>
81135020:	01006404 	movi	r4,400
81135024:	d9400015 	stw	r5,0(sp)
81135028:	d9800115 	stw	r6,4(sp)
8113502c:	d9c00215 	stw	r7,8(sp)
81135030:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffc0>
81135034:	d9400017 	ldw	r5,0(sp)
81135038:	d9800117 	ldw	r6,4(sp)
8113503c:	d9c00217 	ldw	r7,8(sp)
81135040:	10001d26 	beq	r2,zero,811350b8 <__register_exitproc+0x110>
81135044:	81000017 	ldw	r4,0(r16)
81135048:	10000115 	stw	zero,4(r2)
8113504c:	02000044 	movi	r8,1
81135050:	22405217 	ldw	r9,328(r4)
81135054:	0007883a 	mov	r3,zero
81135058:	12400015 	stw	r9,0(r2)
8113505c:	20805215 	stw	r2,328(r4)
81135060:	10006215 	stw	zero,392(r2)
81135064:	10006315 	stw	zero,396(r2)
81135068:	883fde26 	beq	r17,zero,81134fe4 <__reset+0xfb114fe4>
8113506c:	18c9883a 	add	r4,r3,r3
81135070:	2109883a 	add	r4,r4,r4
81135074:	1109883a 	add	r4,r2,r4
81135078:	21802215 	stw	r6,136(r4)
8113507c:	01800044 	movi	r6,1
81135080:	12406217 	ldw	r9,392(r2)
81135084:	30cc983a 	sll	r6,r6,r3
81135088:	4992b03a 	or	r9,r9,r6
8113508c:	12406215 	stw	r9,392(r2)
81135090:	21c04215 	stw	r7,264(r4)
81135094:	01000084 	movi	r4,2
81135098:	893fd21e 	bne	r17,r4,81134fe4 <__reset+0xfb114fe4>
8113509c:	11006317 	ldw	r4,396(r2)
811350a0:	218cb03a 	or	r6,r4,r6
811350a4:	11806315 	stw	r6,396(r2)
811350a8:	003fce06 	br	81134fe4 <__reset+0xfb114fe4>
811350ac:	18805304 	addi	r2,r3,332
811350b0:	18805215 	stw	r2,328(r3)
811350b4:	003fc606 	br	81134fd0 <__reset+0xfb114fd0>
811350b8:	00bfffc4 	movi	r2,-1
811350bc:	003fd006 	br	81135000 <__reset+0xfb115000>

811350c0 <__call_exitprocs>:
811350c0:	defff504 	addi	sp,sp,-44
811350c4:	df000915 	stw	fp,36(sp)
811350c8:	dd400615 	stw	r21,24(sp)
811350cc:	dc800315 	stw	r18,12(sp)
811350d0:	dfc00a15 	stw	ra,40(sp)
811350d4:	ddc00815 	stw	r23,32(sp)
811350d8:	dd800715 	stw	r22,28(sp)
811350dc:	dd000515 	stw	r20,20(sp)
811350e0:	dcc00415 	stw	r19,16(sp)
811350e4:	dc400215 	stw	r17,8(sp)
811350e8:	dc000115 	stw	r16,4(sp)
811350ec:	d9000015 	stw	r4,0(sp)
811350f0:	2839883a 	mov	fp,r5
811350f4:	04800044 	movi	r18,1
811350f8:	057fffc4 	movi	r21,-1
811350fc:	00a04534 	movhi	r2,33044
81135100:	10a65a04 	addi	r2,r2,-26264
81135104:	12000017 	ldw	r8,0(r2)
81135108:	45005217 	ldw	r20,328(r8)
8113510c:	44c05204 	addi	r19,r8,328
81135110:	a0001c26 	beq	r20,zero,81135184 <__call_exitprocs+0xc4>
81135114:	a0800117 	ldw	r2,4(r20)
81135118:	15ffffc4 	addi	r23,r2,-1
8113511c:	b8000d16 	blt	r23,zero,81135154 <__call_exitprocs+0x94>
81135120:	14000044 	addi	r16,r2,1
81135124:	8421883a 	add	r16,r16,r16
81135128:	8421883a 	add	r16,r16,r16
8113512c:	84402004 	addi	r17,r16,128
81135130:	a463883a 	add	r17,r20,r17
81135134:	a421883a 	add	r16,r20,r16
81135138:	e0001e26 	beq	fp,zero,811351b4 <__call_exitprocs+0xf4>
8113513c:	80804017 	ldw	r2,256(r16)
81135140:	e0801c26 	beq	fp,r2,811351b4 <__call_exitprocs+0xf4>
81135144:	bdffffc4 	addi	r23,r23,-1
81135148:	843fff04 	addi	r16,r16,-4
8113514c:	8c7fff04 	addi	r17,r17,-4
81135150:	bd7ff91e 	bne	r23,r21,81135138 <__reset+0xfb115138>
81135154:	00800034 	movhi	r2,0
81135158:	10800004 	addi	r2,r2,0
8113515c:	10000926 	beq	r2,zero,81135184 <__call_exitprocs+0xc4>
81135160:	a0800117 	ldw	r2,4(r20)
81135164:	1000301e 	bne	r2,zero,81135228 <__call_exitprocs+0x168>
81135168:	a0800017 	ldw	r2,0(r20)
8113516c:	10003226 	beq	r2,zero,81135238 <__call_exitprocs+0x178>
81135170:	a009883a 	mov	r4,r20
81135174:	98800015 	stw	r2,0(r19)
81135178:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffc0>
8113517c:	9d000017 	ldw	r20,0(r19)
81135180:	a03fe41e 	bne	r20,zero,81135114 <__reset+0xfb115114>
81135184:	dfc00a17 	ldw	ra,40(sp)
81135188:	df000917 	ldw	fp,36(sp)
8113518c:	ddc00817 	ldw	r23,32(sp)
81135190:	dd800717 	ldw	r22,28(sp)
81135194:	dd400617 	ldw	r21,24(sp)
81135198:	dd000517 	ldw	r20,20(sp)
8113519c:	dcc00417 	ldw	r19,16(sp)
811351a0:	dc800317 	ldw	r18,12(sp)
811351a4:	dc400217 	ldw	r17,8(sp)
811351a8:	dc000117 	ldw	r16,4(sp)
811351ac:	dec00b04 	addi	sp,sp,44
811351b0:	f800283a 	ret
811351b4:	a0800117 	ldw	r2,4(r20)
811351b8:	80c00017 	ldw	r3,0(r16)
811351bc:	10bfffc4 	addi	r2,r2,-1
811351c0:	15c01426 	beq	r2,r23,81135214 <__call_exitprocs+0x154>
811351c4:	80000015 	stw	zero,0(r16)
811351c8:	183fde26 	beq	r3,zero,81135144 <__reset+0xfb115144>
811351cc:	95c8983a 	sll	r4,r18,r23
811351d0:	a0806217 	ldw	r2,392(r20)
811351d4:	a5800117 	ldw	r22,4(r20)
811351d8:	2084703a 	and	r2,r4,r2
811351dc:	10000b26 	beq	r2,zero,8113520c <__call_exitprocs+0x14c>
811351e0:	a0806317 	ldw	r2,396(r20)
811351e4:	2088703a 	and	r4,r4,r2
811351e8:	20000c1e 	bne	r4,zero,8113521c <__call_exitprocs+0x15c>
811351ec:	89400017 	ldw	r5,0(r17)
811351f0:	d9000017 	ldw	r4,0(sp)
811351f4:	183ee83a 	callr	r3
811351f8:	a0800117 	ldw	r2,4(r20)
811351fc:	15bfbf1e 	bne	r2,r22,811350fc <__reset+0xfb1150fc>
81135200:	98800017 	ldw	r2,0(r19)
81135204:	153fcf26 	beq	r2,r20,81135144 <__reset+0xfb115144>
81135208:	003fbc06 	br	811350fc <__reset+0xfb1150fc>
8113520c:	183ee83a 	callr	r3
81135210:	003ff906 	br	811351f8 <__reset+0xfb1151f8>
81135214:	a5c00115 	stw	r23,4(r20)
81135218:	003feb06 	br	811351c8 <__reset+0xfb1151c8>
8113521c:	89000017 	ldw	r4,0(r17)
81135220:	183ee83a 	callr	r3
81135224:	003ff406 	br	811351f8 <__reset+0xfb1151f8>
81135228:	a0800017 	ldw	r2,0(r20)
8113522c:	a027883a 	mov	r19,r20
81135230:	1029883a 	mov	r20,r2
81135234:	003fb606 	br	81135110 <__reset+0xfb115110>
81135238:	0005883a 	mov	r2,zero
8113523c:	003ffb06 	br	8113522c <__reset+0xfb11522c>

81135240 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81135240:	defffd04 	addi	sp,sp,-12
81135244:	df000215 	stw	fp,8(sp)
81135248:	df000204 	addi	fp,sp,8
8113524c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81135250:	d0207945 	stb	zero,-32283(gp)
81135254:	e0bfff17 	ldw	r2,-4(fp)
81135258:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
8113525c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81135260:	10000226 	beq	r2,zero,8113526c <_exit+0x2c>
    ALT_SIM_FAIL();
81135264:	002af070 	cmpltui	zero,zero,43969
81135268:	00000106 	br	81135270 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
8113526c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81135270:	003fff06 	br	81135270 <__reset+0xfb115270>
