
Simucam_R0_UART.elf:     file format elf32-littlenios2
Simucam_R0_UART.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x8110025c

Program Header:
    LOAD off    0x00001020 vaddr 0x81100020 paddr 0x81100020 align 2**12
         filesz 0x0003e8bc memsz 0x000525ec flags rwx
    LOAD off    0x00040000 vaddr 0x86020000 paddr 0x86020000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  86020000  86020000  00040000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000023c  81100020  81100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00039aa8  8110025c  8110025c  0000125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00002e84  81139d04  81139d04  0003ad04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d54  8113cb88  8113cb88  0003db88  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00013d30  8113e8dc  8113e8dc  0003f8dc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory 00000000  8115260c  8115260c  00040000  2**0
                  CONTENTS
  7 .ext_flash    00000000  86020020  86020020  00040000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00040000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001c18  00000000  00000000  00040028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0005a033  00000000  00000000  00041c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00014719  00000000  00000000  0009bc73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001cfa5  00000000  00000000  000b038c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00007878  00000000  00000000  000cd334  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000a573  00000000  00000000  000d4bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00026ce7  00000000  00000000  000df11f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00105e08  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002378  00000000  00000000  00105e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  00111e05  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00111e0b  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00111e17  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00111e18  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00111e19  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00111e1d  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00111e21  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00111e25  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  00111e30  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  00111e3a  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000011  00000000  00000000  00111e44  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000004a  00000000  00000000  00111e55  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00278448  00000000  00000000  00111e9f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
86020000 l    d  .entry	00000000 .entry
81100020 l    d  .exceptions	00000000 .exceptions
8110025c l    d  .text	00000000 .text
81139d04 l    d  .rodata	00000000 .rodata
8113cb88 l    d  .rwdata	00000000 .rwdata
8113e8dc l    d  .bss	00000000 .bss
8115260c l    d  .onchip_memory	00000000 .onchip_memory
86020020 l    d  .ext_flash	00000000 .ext_flash
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Simucam_R0_UART_bsp//obj/HAL/src/crt0.o
81100294 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 ddr2.c
00000000 l    df *ABS*	00000000 dma.c
00000000 l    df *ABS*	00000000 sense.c
00000000 l    df *ABS*	00000000 simucam_dma.c
00000000 l    df *ABS*	00000000 comm.c
00000000 l    df *ABS*	00000000 data_packet.c
00000000 l    df *ABS*	00000000 fee_buffers.c
8113e8f8 l     O .bss	00000004 viCh1HoldContext
8113e8fc l     O .bss	00000004 viCh2HoldContext
8113e900 l     O .bss	00000004 viCh3HoldContext
8113e904 l     O .bss	00000004 viCh4HoldContext
8113e908 l     O .bss	00000004 viCh5HoldContext
8113e90c l     O .bss	00000004 viCh6HoldContext
8113e910 l     O .bss	00000004 viCh7HoldContext
8113e914 l     O .bss	00000004 viCh8HoldContext
811050d8 l     F .text	00000054 vFeebWriteReg
8110512c l     F .text	00000050 uliFeebReadReg
00000000 l    df *ABS*	00000000 rmap.c
00000000 l    df *ABS*	00000000 spw_controller.c
811056dc l     F .text	00000050 uliSpwcReadReg
81105688 l     F .text	00000054 vSpwcWriteReg
00000000 l    df *ABS*	00000000 ctrl_io_lvds.c
8113e808 l     O .rwdata	00000001 ucIoValue
811058dc l     F .text	0000007c bCtrlIoLvdsDrive
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 msgdma.c
811061cc l     F .text	0000013c msgdma_write_extended_descriptor
81106308 l     F .text	00000164 msgdma_construct_extended_descriptor
8110646c l     F .text	00000318 msgdma_descriptor_async_transfer
81106784 l     F .text	000003fc msgdma_descriptor_sync_transfer
00000000 l    df *ABS*	00000000 power_spi.c
00000000 l    df *ABS*	00000000 reset.c
81107300 l     F .text	00000054 vRstcWriteReg
81107354 l     F .text	00000050 uliRstReadReg
00000000 l    df *ABS*	00000000 rtcc_spi.c
00000000 l    df *ABS*	00000000 seven_seg.c
00000000 l    df *ABS*	00000000 sync.c
8113e91c l     O .bss	00000004 viHoldContext
81108688 l     F .text	00000058 uliSyncReadReg
8110862c l     F .text	0000005c bSyncWriteReg
00000000 l    df *ABS*	00000000 fee_task.c
00000000 l    df *ABS*	00000000 in_ack_handler_task.c
8113e922 l     O .bss	00000004 xRAckLocal.4434
00000000 l    df *ABS*	00000000 initialization_task.c
00000000 l    df *ABS*	00000000 out_ack_handler_task.c
8113e926 l     O .bss	00000004 xSAckLocal.4430
00000000 l    df *ABS*	00000000 parser_comm_task.c
8113ea6c l     O .bss	0000004c PreParsedLocal.4487
00000000 l    df *ABS*	00000000 receiver_uart_task.c
8113eab8 l     O .bss	0000004c xPreParsedReader.4488
00000000 l    df *ABS*	00000000 sender_com_task.c
00000000 l    df *ABS*	00000000 sim_meb_task.c
00000000 l    df *ABS*	00000000 timeout_checker_ack_task.c
00000000 l    df *ABS*	00000000 simucam_main.c
00000000 l    df *ABS*	00000000 ccd.c
00000000 l    df *ABS*	00000000 communication_utils.c
00000000 l    df *ABS*	00000000 configs_simucam.c
00000000 l    df *ABS*	00000000 crc8.c
8113b223 l     O .rodata	00000100 crc8_table
00000000 l    df *ABS*	00000000 error_handler_simucam.c
00000000 l    df *ABS*	00000000 fee.c
00000000 l    df *ABS*	00000000 initialization_simucam.c
00000000 l    df *ABS*	00000000 log_manager_simucam.c
00000000 l    df *ABS*	00000000 meb.c
00000000 l    df *ABS*	00000000 sdcard_file_manager.c
00000000 l    df *ABS*	00000000 test_module_simucam.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 ctype_.c
8113c265 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
8113cb88 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
81111284 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcspn.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113c432 l     O .rodata	00000010 zeroes.4389
8113c442 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 vfprintf.c
8113c452 l     O .rodata	00000010 zeroes.4404
81115eb8 l     F .text	000000c4 __sbprintf
8113c462 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 vfscanf.c
8113c47a l     O .rodata	00000022 basefix.4359
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 dtoa.c
81117a40 l     F .text	00000208 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
81119590 l     F .text	00000008 __fp_unlock
811195a4 l     F .text	000001a4 __sinit.part.1
81119748 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
8113d3d4 l     O .rwdata	00000020 lc_ctype_charset
8113d3b4 l     O .rwdata	00000020 lc_message_charset
8113d3f4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
8113c4b8 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
8111c5b8 l     F .text	0000006c sulp
8113c600 l     O .rodata	00000014 fpi.2737
8113c614 l     O .rodata	00000028 tinytens
8113c5ec l     O .rodata	00000014 fpinan.2773
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
8113c64c l     O .rodata	00000010 blanks.4332
8113c63c l     O .rodata	00000010 zeroes.4333
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
8111fc28 l     F .text	00000104 __sprint_r.part.0
8113c66c l     O .rodata	00000010 blanks.4348
8113c65c l     O .rodata	00000010 zeroes.4349
811211c4 l     F .text	000000c4 __sbprintf
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
81121678 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
81125574 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
811256b8 l     F .text	00000034 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
811256ec l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
81125970 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
81125a60 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_open.c
81125c44 l     F .text	00000044 alt_get_errno
81125c88 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_read.c
81125eb0 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
8113e84c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
81126450 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
8113e858 l     O .rwdata	00000004 lockid
8113e9b4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
8113e85c l     O .rwdata	00000004 lockid
8113e9bc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
81127f54 l     F .text	00000050 OS_InitMisc
81127fa4 l     F .text	00000074 OS_InitRdyList
81128128 l     F .text	000000ec OS_InitTCBList
81127e6c l     F .text	000000e8 OS_InitEventList
81128018 l     F .text	00000088 OS_InitTaskIdle
811280a0 l     F .text	00000088 OS_InitTaskStat
811283b8 l     F .text	0000007c OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
8112a1d0 l     F .text	000000fc OS_FlagTaskRdy
81129f80 l     F .text	00000168 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_mutex.c
8112babc l     F .text	00000198 OSMutex_RdyAtPrio
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 os_tmr.c
811304ec l     F .text	00000044 OSTmr_Lock
8112ff8c l     F .text	00000074 OSTmr_Alloc
81130530 l     F .text	0000003c OSTmr_Unlock
811303f0 l     F .text	000000fc OSTmr_Unlink
81130000 l     F .text	000000a4 OSTmr_Free
811302a0 l     F .text	00000150 OSTmr_Link
81130218 l     F .text	00000088 OSTmr_InitTask
8113056c l     F .text	00000110 OSTmr_Task
00000000 l    df *ABS*	00000000 alt_sys_init.c
8113067c l     F .text	0000003c alt_dev_reg
8113d5d4 l     O .rwdata	0000106c jtag_uart_0
8113e640 l     O .rwdata	000000d0 rs232_uart
8113e710 l     O .rwdata	00000064 dma_DDR_M1
8113e774 l     O .rwdata	00000064 dma_DDR_M2
8113e7d8 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
81134e8c l     F .text	000002ac altera_avalon_jtag_uart_irq
81135138 l     F .text	0000010c altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
8113593c l     F .text	00000080 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
81135cd0 l     F .text	000000a4 altera_avalon_uart_irq
81135d74 l     F .text	00000140 altera_avalon_uart_rxirq
81135eb4 l     F .text	000001ac altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
811360bc l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
81136370 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
811365f4 l     F .text	00000044 alt_get_errno
81136638 l     F .text	0000009c alt_msgdma_write_standard_descriptor
811366d4 l     F .text	00000134 alt_msgdma_write_extended_descriptor
81136808 l     F .text	0000018c alt_msgdma_irq
81136994 l     F .text	00000094 alt_msgdma_construct_standard_descriptor
81136a28 l     F .text	0000015c alt_msgdma_construct_extended_descriptor
81136b84 l     F .text	00000340 alt_msgdma_descriptor_async_transfer
81136ec4 l     F .text	00000408 alt_msgdma_descriptor_sync_transfer
811375cc l     F .text	000000ac alt_msgdma_construct_prefetcher_standard_descriptor
81137678 l     F .text	0000019c alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
81138844 l     F .text	00000044 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
81138f58 l     F .text	000000cc alt_open_fd
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000044 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
8113ea64 l     O .bss	00000002 OSTmrCtr
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
8113ea68 g     O .bss	00000004 alt_instruction_exception_handler
8110cb3c g     F .text	0000004c vFailDeleteInitialization
8113ea38 g     O .bss	00000004 aux_status_register
8113f02c g     O .bss	00002000 vInAckHandlerTask_stk
81138600 g     F .text	00000044 alt_msgdma_standard_descriptor_async_transfer
8110788c g     F .text	0000004c vSyncInitIrq
8111bc3c g     F .text	0000007c _mprec_log10
81107a08 g     F .text	00000040 bSyncSetMbt
81105ac0 g     F .text	00000108 I2C_Read
8113e8aa g     O .rwdata	00000002 OSTaskNameSize
8114102c g     O .bss	00000118 xBuffer64
8111bd30 g     F .text	0000008c __any_on
8111a704 g     F .text	0000005c _isatty_r
8113c4c4 g     O .rodata	00000028 __mprec_tinytens
81125b80 g     F .text	000000c4 alt_main
811111a8 g     F .text	000000c8 _puts_r
81104964 g     F .text	00000058 bFeebCh3IrqFlagBufferEmpty
8113e9c4 g     O .bss	00000004 OSTmrFreeList
8115250c g     O .bss	00000100 alt_irq
8111a874 g     F .text	00000068 _lseek_r
8110e08c g     F .text	00000030 vChangeDefaultAutoResetSync
8112aa30 g     F .text	000000d4 OS_MemInit
8110b794 g     F .text	0000098c vLoadDefaultETHConf
8112f4cc g     F .text	00000068 OSTimeSet
81119948 g     F .text	000000ac __sflags
811246d4 g     F .text	00000088 .hidden __eqdf2
81102a38 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_FULL
8110df04 g     F .text	00000034 vLoadDefaultSyncSource
81130b7c g     F .text	000001ac Check_for_Master_Boot_Record
8114d948 g     O .bss	00000010 OSTmrWheelTbl
8113738c g     F .text	00000060 alt_msgdma_construct_standard_mm_to_mm_descriptor
81126b34 g     F .text	00000618 OSEventPendMulti
8115260c g       *ABS*	00000000 __alt_heap_start
81139590 g     F .text	0000002c OSTaskCreateHook
811349f4 g     F .text	000001c4 alt_up_sd_card_fclose
8113e92c g     O .bss	00000004 xSemCountBuffer64
81111164 g     F .text	00000044 printf
8113e919 g     O .bss	00000001 SspdConfigControl
81107e24 g     F .text	00000054 bSyncCtrReset
8113e882 g     O .rwdata	00000002 OSMboxEn
8110b080 g     F .text	00000394 bSendUART128
8110e700 g     F .text	000000a4 aatoh
811271b0 g     F .text	00000054 OSIntEnter
81122444 g     F .text	000000a4 _wcrtomb_r
81104870 g     F .text	00000044 vFeebCh8IrqFlagClrBufferEmpty
8110caa4 g     F .text	0000004c vFailReceiverCreate
811044d4 g     F .text	00000040 vFeebCh2HandleIrq
81111710 g     F .text	00000064 __sseek
811198f8 g     F .text	00000010 __sinit
81106c40 g     F .text	00000044 iMsgdmaExtendedDescriptorAsyncTransfer
811222e4 g     F .text	00000148 __swbuf_r
8110ab2c g     F .text	000002cc bResourcesInitRTOS
8110534c g     F .text	000000f4 bSpwcGetLinkError
8113e892 g     O .rwdata	00000002 OSQEn
8111a790 g     F .text	00000084 _setlocale_r
8113e80c g     O .rwdata	00000004 LedsPainelControl
8113eb2c g     O .bss	00000100 cDebugBuffer
81119750 g     F .text	00000070 __sfmoreglue
8111fc10 g     F .text	00000018 ungetc
811267f0 g     F .text	000000d4 __malloc_unlock
81102d28 g     F .text	00000210 DMA_MULTIPLE_TRANSFER
81139610 g     F .text	00000028 OSTaskStatHook
8110df74 g     F .text	00000030 vChangeDefaultSyncSource
8113e9c8 g     O .bss	00000001 OSLockNesting
8113e9cc g     O .bss	00000004 OSTmrSemSignal
8110d558 g     F .text	000000d8 vNFeeStructureInit
8113e930 g     O .bss	00000004 xSemCommInit
811028bc g     F .text	00000080 uliXorshift32
8111c624 g     F .text	00001600 _strtod_r
8113e934 g     O .bss	00000004 xSemCountSenderACK
8110e83c g     F .text	00000448 .hidden __divsf3
8113ea5c g     O .bss	00000004 current_sector_modified
8113e8d0 g     O .rwdata	00000002 OSDataSize
8113e9d0 g     O .bss	00000001 OSRunning
81105510 g     F .text	00000178 bSpwcInitCh
81141144 g     O .bss	00002000 senderTask_stk
8113e938 g     O .bss	00000004 fp
8111ac04 g     F .text	0000015c memmove
81143144 g     O .bss	0000045c xSimMebStruct
8113968c g     F .text	0000002c OSInitHookBegin
811082c0 g     F .text	00000074 bSyncCtrCh8OutEnable
8113e8c8 g     O .rwdata	00000002 OSTmrSize
811198e0 g     F .text	00000018 _cleanup
8110e338 g     F .text	00000040 siCloseFile
8111ad60 g     F .text	000000b0 _Balloc
8110e018 g     F .text	00000038 vLoadDefaultAutoResetSync
811335d0 g     F .text	000000cc alt_up_sd_card_is_Present
811372cc g     F .text	00000060 alt_msgdma_construct_standard_st_to_mm_descriptor
8113e8e4 g     O .bss	00000004 pxDmaM1Dev
81102ad0 g     F .text	000000a4 DMA_DISPATCHER_STOP
811308a4 g     F .text	00000054 Save_Modified_Sector
81104ac4 g     F .text	00000058 bFeebCh7IrqFlagBufferEmpty
8113e9d4 g     O .bss	00000004 OSIdleCtr
8110572c g     F .text	0000003c bEnableIsoDrivers
8112475c g     F .text	000000dc .hidden __gtdf2
81139320 g     F .text	0000002c altera_nios2_gen2_irq_init
81139408 g       .text	00000000 OSStartTsk
81107b7c g     F .text	00000070 bSyncSetNCycles
81128728 g     F .text	000002dc OS_TCBInit
8110db58 g     F .text	00000068 vInitSimucamBasicHW
811435a0 g     O .bss	00002000 vTimeoutCheckerTask_stk
811081d8 g     F .text	00000074 bSyncCtrCh6OutEnable
81105e3c g     F .text	00000138 i2c_write
86020000 g     F .entry	00000000 __reset
8113ea54 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
8113e9d8 g     O .bss	00000002 OSTmrUsed
8113e93c g     O .bss	00000004 xSemCountBuffer128
81103200 g     F .text	000000f8 TEMP_Read
81104554 g     F .text	00000040 vFeebCh4HandleIrq
8113e8ce g     O .rwdata	00000002 OSTmrWheelTblSize
8110da28 g     F .text	0000002c cFeeSpwChannelDisable
8113e86e g     O .rwdata	00000002 OSEventSize
8113e9da g     O .bss	00000001 OSPrioHighRdy
81110300 g     F .text	00000064 _fstat_r
811395bc g     F .text	0000002c OSTaskDelHook
8113e97c g     O .bss	00000004 errno
811085b4 g     F .text	0000003c uliSyncGetCtr
811177b0 g     F .text	0000001c __svfscanf
81111684 g     F .text	00000008 __seofread
811393e8 g       .text	00000000 OSStartHighRdy
8112defc g     F .text	000001ec OSTaskCreateExt
8110cd28 g     F .text	00000068 vFailGetCountSemaphorePreParsedBuffer
8111e754 g     F .text	00001244 ___svfiprintf_internal_r
81129ab0 g     F .text	00000068 OSFlagPendGetFlagsRdy
8113e8ae g     O .rwdata	00000002 OSTaskStatStkSize
81128bfc g     F .text	00000310 OSFlagAccept
8112c1d8 g     F .text	000000c0 OSQFlush
8112bc54 g     F .text	00000148 OSQAccept
8113e9a4 g     O .bss	00000004 alt_argv
81146804 g       *ABS*	00000000 _gp
8110c76c g     F .text	0000004c vFailSendPreAckReceiverSemaphore
81126314 g     F .text	0000013c usleep
81133ba8 g     F .text	00000384 alt_up_sd_card_fopen
8110e1a4 g     F .text	00000030 bSDcardIsPresent
8110a0e0 g     F .text	0000013c vSenderComTask
81133710 g     F .text	000000d8 alt_up_sd_card_find_first
8112dd48 g     F .text	000001b4 OSTaskCreate
8110cec8 g     F .text	00000068 vFailSendNack
8113ea48 g     O .bss	00000004 command_argument_register
8112d850 g     F .text	000004f8 OSTaskChangePrio
8113e9c0 g     O .bss	00000004 alt_heapsem
811060d4 g     F .text	00000080 bSetBoardLeds
81128a04 g     F .text	000001f8 OSDebugInit
8112e0e8 g     F .text	0000034c OSTaskDel
8112ab04 g     F .text	000001ac OSMutexAccept
8110dfa4 g     F .text	00000040 vSetTimeCode
81137e74 g     F .text	000000dc alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
8113e940 g     O .bss	00000004 xSemCountPreParsed
8113d454 g     O .rwdata	00000180 alt_fd_list
81104a14 g     F .text	00000058 bFeebCh5IrqFlagBufferEmpty
8114d958 g     O .bss	00000370 OSFlagTbl
8110c8d4 g     F .text	00000068 vFailGetCountSemaphoreReceiverTask
8110de5c g     F .text	0000003c vLoadDefaultRTValue
81127c34 g     F .text	000000c0 OS_EventTaskRemove
81132e24 g     F .text	00000134 find_first_empty_record_in_root_directory
81138a04 g     F .text	00000098 alt_find_dev
81110e4c g     F .text	00000150 memcpy
81121fb0 g     F .text	00000264 __hexnan
811455a0 g     O .bss	00000130 xBuffer32
8113e898 g     O .rwdata	00000002 OSRdyTblSize
8114dcc8 g     O .bss	000001a0 OSTmrTbl
81119598 g     F .text	0000000c _cleanup_r
811252b0 g     F .text	000000e4 .hidden __floatsidf
81107978 g     F .text	0000004c ucSyncStatusErrorCode
8110db24 g     F .text	00000034 cFeeRMAPLogDisable
811091c0 g     F .text	000002c0 vParserCommTask
81139024 g     F .text	00000084 alt_io_redirect
8110dab8 g     F .text	00000034 cFeeRMAPEchoingDisable
81124838 g     F .text	000000f4 .hidden __ltdf2
81104cf4 g     F .text	000000d4 bFeebSetIrqControl
8110d438 g     F .text	00000068 vCouldNotRetransmitB128TimeoutTask
8113e944 g     O .bss	00000004 xMutexReceivedACK
81103b7c g     F .text	000000b0 bSdmaInitM2Dma
81139d04 g       *ABS*	00000000 __DTOR_END__
811382fc g     F .text	00000094 alt_msgdma_start_prefetcher_with_extd_desc_list
81138644 g     F .text	00000044 alt_msgdma_extended_descriptor_async_transfer
81107ecc g     F .text	00000054 bSyncCtrErrInj
811385a4 g     F .text	0000005c alt_msgdma_register_callback
8110c120 g     F .text	00000330 vShowEthConfig
8110dbc0 g     F .text	00000030 bLogWriteSDCard
8110cbf0 g     F .text	00000068 vFailSetCountSemaphorexBuffer64
81109598 g     F .text	000000a0 bTrySendSemaphoreCommInit
81111270 g     F .text	00000014 puts
81139734 g     F .text	000000a4 alt_exception_cause_generated_bad_addr
8110784c g     F .text	00000040 vSyncHandleIrq
811268c4 g     F .text	00000128 OSEventNameGet
811046d8 g     F .text	00000044 vFeebCh2IrqFlagClrBufferEmpty
8113e87c g     O .rwdata	00000002 OSFlagMax
8111a990 g     F .text	000000e0 mbrtowc
81132a1c g     F .text	000001b4 find_first_empty_cluster
81108164 g     F .text	00000074 bSyncCtrCh5OutEnable
8113e920 g     O .bss	00000001 vucN
8111c390 g     F .text	00000074 __fpclassifyd
811078d8 g     F .text	00000054 bSyncStatusExtnIrq
811177cc g     F .text	00000054 _vfscanf_r
8112b184 g     F .text	000005a4 OSMutexPend
8111bb90 g     F .text	000000ac __ratio
8113350c g     F .text	000000c4 alt_up_sd_card_open_dev
81127204 g     F .text	00000100 OSIntExit
81107a48 g     F .text	00000040 bSyncSetBt
811211a8 g     F .text	0000001c __vfiprintf_internal
8113e8b6 g     O .rwdata	00000002 OSTCBSize
81104694 g     F .text	00000044 vFeebCh1IrqFlagClrBufferEmpty
8113e9db g     O .bss	00000001 OSPrioCur
811353ac g     F .text	000002c4 altera_avalon_jtag_uart_read
8110dbf0 g     F .text	0000002c bLogWriteETH
81137b3c g     F .text	000000f8 alt_msgdma_prefetcher_add_standard_desc_to_list
8111112c g     F .text	00000038 _printf_r
81123278 g     F .text	00000064 .hidden __udivsi3
811259b4 g     F .text	000000ac isatty
8113e918 g     O .bss	00000001 LedsBoardControl
8113e948 g     O .bss	00000004 xSemCountReceivedACK
8113e89c g     O .rwdata	00000002 OSStkWidth
8111a760 g     F .text	00000030 iswspace
8113c514 g     O .rodata	000000c8 __mprec_tens
8113e890 g     O .rwdata	00000002 OSPtrSize
8111a814 g     F .text	0000000c __locale_charset
8110807c g     F .text	00000074 bSyncCtrCh3OutEnable
81123468 g     F .text	000000c8 .hidden __lesf2
8113e870 g     O .rwdata	00000002 OSEventTblSize
81122644 g     F .text	0000007c .hidden __fixunsdfsi
8113934c g       .text	00000000 OSCtxSw
81105bc8 g     F .text	00000160 I2C_MultipleRead
8113e988 g     O .bss	00000004 __malloc_top_pad
8113e9dc g     O .bss	00000004 OSTCBList
8112ff4c g     F .text	00000040 OSTmrSignal
8113e998 g     O .bss	00000004 alt_fd_list_lock
8111e280 g     F .text	0000001c strtoul
8113e824 g     O .rwdata	00000004 __mb_cur_max
8111a844 g     F .text	0000000c _localeconv_r
8111e29c g     F .text	000002e0 _strtoull_r
81107290 g     F .text	00000070 vRstcHoldDeviceReset
8111b184 g     F .text	00000044 __i2b
8111a0a8 g     F .text	000004c4 __sfvwrite_r
81131cfc g     F .text	000000c0 get_dir_divider_location
8114de68 g     O .bss	00000c30 OSMemTbl
8113e9e0 g     O .bss	00000001 OSTickStepState
811456d0 g     O .bss	00002000 vReceiverUartTask_stk
8111147c g     F .text	0000005c _sbrk_r
8113e94c g     O .bss	00000004 xSemTimeoutChecker
811319bc g     F .text	000000cc filename_to_upper_case
8113e894 g     O .rwdata	00000002 OSQMax
81133f2c g     F .text	00000090 alt_up_sd_card_set_attributes
8112ae80 g     F .text	00000304 OSMutexDel
8114ea98 g     O .bss	00000800 OSTaskStatStk
8110e1d4 g     F .text	00000030 bSDcardFAT16Check
8112a64c g     F .text	000000f8 OSMemNameGet
8110c5c0 g     F .text	00000060 vFailCreateMutexSResources
81130d28 g     F .text	00000284 Read_File_Record_At_Offset
8113e874 g     O .rwdata	00000002 OSFlagEn
8111bdbc g     F .text	00000068 _read_r
8113e8ba g     O .rwdata	00000002 OSTimeTickHookEn
8112c6a0 g     F .text	00000170 OSQPost
8112a2cc g     F .text	000000ac OS_FlagUnlink
81102420 g     F .text	0000049c bDdr2MemoryRandomReadTest
8113e840 g     O .rwdata	00000004 alt_max_fd
8110d1e4 g     F .text	0000004c vFailTimeoutCheckerTaskCreate
81128270 g     F .text	00000070 OS_MemCopy
811282e0 g     F .text	000000d8 OS_Sched
811325a0 g     F .text	0000047c find_file_in_directory
81121354 g     F .text	000000f8 _fclose_r
8112a554 g     F .text	000000f8 OSMemGet
8112e72c g     F .text	000001bc OSTaskNameSet
81119560 g     F .text	00000030 fflush
8113e984 g     O .bss	00000004 __malloc_max_sbrked_mem
8113e9e4 g     O .bss	00000004 OSCtxSwCtr
81139638 g     F .text	00000054 OSTimeTickHook
811476d0 g     O .bss	00002000 vOutAckHandlerTask_stk
811257e8 g     F .text	00000188 alt_irq_register
8113e87e g     O .rwdata	00000002 OSFlagNameSize
8110f9cc g     F .text	00000118 .hidden __extendsfdf2
81127cf4 g     F .text	00000108 OS_EventTaskRemoveMulti
8113369c g     F .text	00000074 alt_up_sd_card_is_FAT16
81105958 g     F .text	00000088 I2C_TestAdress
81123530 g     F .text	000008b4 .hidden __adddf3
81123334 g     F .text	00000078 .hidden __nesf2
81127adc g     F .text	00000158 OS_EventTaskWaitMulti
8111b928 g     F .text	00000114 __b2d
81137874 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
8113e896 g     O .rwdata	00000002 OSQSize
81122c40 g     F .text	00000540 .hidden __umoddi3
81125aa4 g     F .text	000000dc lseek
8112d190 g     F .text	00000214 OSSemPend
81105440 g     F .text	000000d0 bSpwcGetLinkStatus
81104fa4 g     F .text	00000088 bFeebGetWindowing
8113e814 g     O .rwdata	00000004 _global_impure_ptr
81107800 g     F .text	0000004c bSSDisplayUpdate
81132060 g     F .text	00000540 get_home_directory_cluster_for_file
8111be24 g     F .text	0000056c _realloc_r
8113e880 g     O .rwdata	00000002 OSLowestPrio
8115260c g       *ABS*	00000000 __bss_end
81138e60 g     F .text	000000f8 alt_iic_isr_register
81139708 g     F .text	0000002c OSTCBInitHook
8113e8c6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
81126204 g     F .text	00000110 alt_tick
8110c86c g     F .text	00000068 vFailGetMutexSenderTask
811071b0 g     F .text	0000006c vRstcSimucamReset
8113c67c g     O .rodata	00000100 __hexdig
811383f0 g     F .text	000001b4 alt_msgdma_init
811226c0 g     F .text	00000580 .hidden __udivdi3
81109d98 g     F .text	000001a4 setPreAckSenderFreePos
811215cc g     F .text	00000024 _fputwc_r
8113e868 g     O .rwdata	00000002 OSEventEn
8113c4ec g     O .rodata	00000028 __mprec_bigtens
8111af60 g     F .text	0000010c __s2b
8113e8c2 g     O .rwdata	00000002 OSTmrCfgNameSize
81107b08 g     F .text	00000074 bSyncSetPolarity
81125394 g     F .text	000000b0 .hidden __floatunsidf
8110ccc0 g     F .text	00000068 vFailFoundBufferRetransmission
8111b660 g     F .text	00000060 __mcmp
8113ea60 g     O .bss	00000004 current_sector_index
81135b68 g     F .text	00000168 altera_avalon_uart_init
811386cc g     F .text	00000044 alt_msgdma_extended_descriptor_sync_transfer
8110405c g     F .text	00000438 bSdmaDmaM2Transfer
8110dfe4 g     F .text	00000034 vResetTimeCode
8110d9fc g     F .text	0000002c cFeeSpwChannelEnable
81119918 g     F .text	00000018 __fp_lock_all
81138e0c g     F .text	00000054 alt_ic_irq_enabled
811059e0 g     F .text	000000e0 I2C_Write
8113e9e8 g     O .bss	00000002 OSTmrFree
8112a0e8 g     F .text	000000e8 OS_FlagInit
81126160 g     F .text	000000a4 alt_alarm_stop
81111aa0 g     F .text	0000001c strtol
8112f6f8 g     F .text	00000140 OSTmrDel
81130a94 g     F .text	000000e8 mark_cluster
8113e8a4 g     O .rwdata	00000002 OSTaskIdleStkSize
8113e99c g     O .bss	00000004 alt_irq_active
8112cdb0 g     F .text	000000b8 OSSemAccept
8110fe98 g     F .text	0000044c _fseeko_r
8112a860 g     F .text	000000e0 OSMemPut
8112a378 g     F .text	000001dc OSMemCreate
8113e9ec g     O .bss	00000004 OSIdleCtrMax
81100104 g     F .exceptions	000000dc alt_irq_handler
8113d42c g     O .rwdata	00000028 alt_dev_null
81137484 g     F .text	00000098 alt_msgdma_construct_extended_mm_to_st_descriptor
81107ac8 g     F .text	00000040 bSyncSetOst
8113e8b8 g     O .rwdata	00000002 OSTicksPerSec
81132f58 g     F .text	00000194 convert_filename_to_name_extension
8110a21c g     F .text	00000030 vSimMebTask
81105d28 g     F .text	00000094 i2c_start
8113934c g       .text	00000000 OSIntCtxSw
811080f0 g     F .text	00000074 bSyncCtrCh4OutEnable
81138268 g     F .text	00000094 alt_msgdma_start_prefetcher_with_std_desc_list
81125690 g     F .text	00000028 alt_dcache_flush_all
8111b06c g     F .text	00000068 __hi0bits
8110de98 g     F .text	0000003c vChangeRTValue
8113ea34 g     O .bss	00000004 is_sd_card_formated_as_FAT16
8110d508 g     F .text	00000050 vNFeeNotInUse
81125230 g     F .text	00000080 .hidden __fixdfsi
811496d0 g     O .bss	00002000 vInitialTask_stk
8113e950 g     O .bss	00000002 usiIdCMD
81107dd0 g     F .text	00000054 bSyncCtrStart
81132bd0 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
81109828 g     F .text	00000410 bPreParser
8111dc24 g     F .text	00000018 strtod
8113e9f0 g     O .bss	00000004 OSTCBFreeList
8112d3a4 g     F .text	00000174 OSSemPendAbort
8110ca0c g     F .text	0000004c vFailGetMacRTC
81100000 g       *ABS*	00000000 __alt_mem_onchip_memory
8110d14c g     F .text	0000004c vFailCreateTimerRetransmisison
8110dc1c g     F .text	0000019c vSimucamStructureInit
8113e838 g     O .rwdata	00000008 alt_dev_list
81126494 g     F .text	00000100 write
811398a8 g     F .text	000000a8 _putc_r
8113ea58 g     O .bss	00000004 device_pointer
8113e8bc g     O .rwdata	00000002 OSVersionNbr
811233ac g     F .text	000000bc .hidden __gtsf2
81109480 g     F .text	00000118 getPreParsedPacket
81125730 g     F .text	000000b8 fstat
8110e0f0 g     F .text	00000040 vChangeIdNFEEMaster
8110fe4c g     F .text	0000002c fprintf
8110daec g     F .text	00000038 cFeeRMAPLogEnable
81102c18 g     F .text	00000110 DMA_SINGLE_TRANSFER
81104a6c g     F .text	00000058 bFeebCh6IrqFlagBufferEmpty
8110d298 g     F .text	00000068 vFailPostBlockingSemTimeoutTask
8110e3e0 g     F .text	00000058 _reg_write
8110e130 g     F .text	00000034 vChangeDefaultIdNFEEMaster
81124838 g     F .text	000000f4 .hidden __ledf2
8112f978 g     F .text	000001b8 OSTmrRemainGet
8113e864 g     O .rwdata	00000004 OSEndiannessTest
811073a4 g     F .text	00000058 v_spi_start
8111b3c8 g     F .text	00000148 __pow5mult
8111fd44 g     F .text	00001464 ___vfiprintf_internal_r
8113e994 g     O .bss	00000004 __nlocale_changed
811232dc g     F .text	00000058 .hidden __umodsi3
81107f20 g     F .text	00000074 bSyncCtrSyncOutEnable
8110e204 g     F .text	000000f8 bInitializeSDCard
8110d068 g     F .text	0000004c vFailParserCommTaskCreate
8111151c g     F .text	00000038 _scanf_r
8110d100 g     F .text	0000004c vFailOutAckHandlerTaskCreate
8113e876 g     O .rwdata	00000002 OSFlagGrpSize
811378d4 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
8112fb30 g     F .text	000000ec OSTmrStateGet
8115260c g       *ABS*	00000000 end
811045d4 g     F .text	00000040 vFeebCh6HandleIrq
8110cdf8 g     F .text	00000068 vNoContentInPreParsedBuffer
811102e4 g     F .text	0000001c fseeko
8110fcfc g     F .text	0000000c _atoi_r
811363b4 g     F .text	00000240 altera_avalon_uart_write
8110fe7c g     F .text	0000001c fseek
8110aff0 g     F .text	00000090 vCCDChangeValues
81134d3c g     F .text	00000150 altera_avalon_jtag_uart_init
81128570 g     F .text	000000e4 OS_TaskStat
811001e0 g     F .exceptions	0000007c alt_instruction_exception_entry
8110c66c g     F .text	0000004c vFailTestCriticasParts
81139d04 g       *ABS*	00000000 __CTOR_LIST__
811fa000 g       *ABS*	00000000 __alt_stack_pointer
81101fb0 g     F .text	00000470 bDdr2MemoryRandomWriteTest
811359bc g     F .text	00000084 alt_avalon_timer_sc_init
81104efc g     F .text	000000a8 bFeebSetWindowing
81135aa8 g     F .text	00000068 altera_avalon_uart_write_fd
8110fc8c g     F .text	00000064 .hidden __clzsi2
81135b10 g     F .text	00000058 altera_avalon_uart_close_fd
81135670 g     F .text	000002cc altera_avalon_jtag_uart_write
811300a4 g     F .text	00000174 OSTmr_Init
8114b6d0 g     O .bss	0000010c xBuffer128
81119908 g     F .text	00000004 __sfp_lock_acquire
811032f8 g     F .text	00000048 sense_log_temp
8111ab20 g     F .text	000000e4 memchr
81128214 g     F .text	0000005c OS_MemClr
81113c9c g     F .text	00002200 ___vfprintf_internal_r
8113942c g     F .text	00000164 OSTaskStkInit
81111554 g     F .text	00000060 _sprintf_r
81119d90 g     F .text	00000318 _free_r
811390a8 g     F .text	00000234 alt_printf
8110b744 g     F .text	00000050 vTimeoutCheck
8110e490 g     F .text	000001fc _print_codec_status
8111a820 g     F .text	00000010 __locale_mb_cur_max
81127824 g     F .text	000001a0 OS_EventTaskRdy
81102b74 g     F .text	000000a4 DMA_DISPATCHER_RESET
81139b40 g     F .text	00000188 __call_exitprocs
8113e9f4 g     O .bss	00000001 OSCPUUsage
8113e990 g     O .bss	00000004 __mlocale_changed
81107e78 g     F .text	00000054 bSyncCtrOneShot
8113e81c g     O .rwdata	00000004 __malloc_sbrk_base
8110025c g     F .text	0000003c _start
811085f0 g     F .text	0000003c uliSyncReadStatus
8113e9ac g     O .bss	00000004 _alt_tick_rate
8112c298 g     F .text	00000294 OSQPend
8111dd44 g     F .text	000002e8 _strtoll_r
8112f01c g     F .text	0000010c OSTimeDly
8111b510 g     F .text	00000150 __lshift
81108f38 g     F .text	00000288 vOutAckHandlerTask
8113732c g     F .text	00000060 alt_msgdma_construct_standard_mm_to_st_descriptor
8113e9b0 g     O .bss	00000004 _alt_nticks
81125ef4 g     F .text	00000104 read
811306f8 g     F .text	000000f0 alt_sys_init
8110f088 g     F .text	0000012c .hidden __floatsisf
8111e57c g     F .text	000001d8 __ssprint_r
811110c4 g     F .text	00000068 _open_r
8110e3b8 g     F .text	00000028 bTestSimucamCriticalHW
8110502c g     F .text	000000ac bFeebGetBuffersStatus
8110c450 g     F .text	000000a4 ucCrc8
811007ac g     F .text	00000cb4 bDdr2EepromDump
81139a20 g     F .text	00000120 __register_exitproc
8113e9f5 g     O .bss	00000001 OSTaskCtr
8110b6f4 g     F .text	00000050 siPosStr
81122214 g     F .text	000000d0 strncmp
8112f128 g     F .text	00000164 OSTimeDlyHMSM
8111b1c8 g     F .text	00000200 __multiply
81135244 g     F .text	00000070 altera_avalon_jtag_uart_close
81107574 g     F .text	00000058 v_spi_end
8110e378 g     F .text	00000040 cGetNextChar
8113eb04 g     O .bss	00000028 __malloc_current_mallinfo
8113e86a g     O .rwdata	00000002 OSEventMax
81123334 g     F .text	00000078 .hidden __eqsf2
8111ba3c g     F .text	00000154 __d2b
8112d518 g     F .text	00000118 OSSemPost
81104760 g     F .text	00000044 vFeebCh4IrqFlagClrBufferEmpty
8110ded4 g     F .text	00000030 vChangeDefaultRTValue
81104654 g     F .text	00000040 vFeebCh8HandleIrq
8113ea30 g     O .bss	00000004 initialized
81127398 g     F .text	000000e4 OSSchedUnlock
811075cc g     F .text	00000164 RTCC_SPI_R_MAC
81134bb8 g     F .text	00000068 altera_avalon_jtag_uart_read_fd
8111e02c g     F .text	00000254 _strtoul_r
81138bac g     F .text	000000e4 alt_get_fd
8113e9f8 g     O .bss	00000004 OSMemFreeList
811274f4 g     F .text	000000b8 OSStatInit
8110293c g     F .text	00000064 DMA_OPEN_DEVICE
81151fa4 g     O .bss	00000014 search_data
8110517c g     F .text	00000100 bSpwcSetLink
81125444 g     F .text	00000130 alt_busy_sleep
81129eb4 g     F .text	000000cc OSFlagQuery
81107f94 g     F .text	00000074 bSyncCtrCh1OutEnable
8113e8a0 g     O .rwdata	00000002 OSTaskCreateExtEn
8110e68c g     F .text	00000074 _split_codec_status
811179e4 g     F .text	0000005c _close_r
8110ce60 g     F .text	00000068 vCouldNotSendEthConfUART
81108c18 g     F .text	00000320 vInitialTask
81137814 g     F .text	00000060 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
8113982c g     F .text	0000007c memcmp
811277fc g     F .text	00000028 OS_Dummy
81134c88 g     F .text	00000058 altera_avalon_jtag_uart_close_fd
8115260c g       *ABS*	00000000 __alt_stack_base
81134ce0 g     F .text	0000005c altera_avalon_jtag_uart_ioctl_fd
811047a4 g     F .text	00000044 vFeebCh5IrqFlagClrBufferEmpty
81110364 g     F .text	000000d4 _fwrite_r
81137934 g     F .text	000000a8 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
811048b4 g     F .text	00000058 bFeebCh1IrqFlagBufferEmpty
81117888 g     F .text	0000015c __swsetup_r
8114f298 g     O .bss	000001e0 OSQTbl
8110a24c g     F .text	000008e0 vTimeoutCheckerTask
8114d92c g     O .bss	0000001c xConfEth
81123de4 g     F .text	000008f0 .hidden __divdf3
8110df38 g     F .text	0000003c vChangeSyncSource
811197c0 g     F .text	00000120 __sfp
81151fb8 g     O .bss	00000054 boot_sector_data
81102a84 g     F .text	0000004c DMA_DESCRIPTOR_BUFFER_EMPTY
8111bcb8 g     F .text	00000078 __copybits
8113cfac g     O .rwdata	00000408 __malloc_av_
81119914 g     F .text	00000004 __sinit_lock_release
8113e8dc g     O .bss	00000004 uliInitialState
81105dbc g     F .text	00000080 i2c_stop
8110e7a4 g     F .text	00000064 Verif_Error
8110e808 g     F .text	00000034 toInt
8110c7b8 g     F .text	0000004c vFailSendPreAckSenderSemaphore
8113e9fc g     O .bss	00000004 OSTCBHighRdy
8110f2ac g     F .text	00000720 .hidden __muldf3
81111628 g     F .text	0000005c __sread
81119c28 g     F .text	0000003c fread
8113ea00 g     O .bss	00000004 OSQFreeList
81138a9c g     F .text	00000110 alt_find_file
81138888 g     F .text	000000ac alt_dev_llist_insert
811266c8 g     F .text	00000128 __malloc_lock
8110fe1c g     F .text	00000030 _fprintf_r
81126064 g     F .text	000000fc sbrk
8110d978 g     F .text	0000002c vFeeSpwRMAPLoadDefault
81111abc g     F .text	000021e0 ___svfprintf_internal_r
811269ec g     F .text	00000148 OSEventNameSet
811194fc g     F .text	00000064 _fflush_r
81121288 g     F .text	000000cc _calloc_r
8113ea04 g     O .bss	00000001 OSRdyGrp
811079c4 g     F .text	00000044 ucSyncStatusCycleNumber
8112fc1c g     F .text	00000148 OSTmrStart
81104594 g     F .text	00000040 vFeebCh5HandleIrq
8110fe04 g     F .text	00000018 fopen
811029a0 g     F .text	0000004c DMA_CONFIG
8113e8dc g       *ABS*	00000000 __bss_start
81110f9c g     F .text	00000128 memset
81109c38 g     F .text	00000160 setPreParsedFreePos
81138390 g     F .text	00000060 alt_msgdma_open
81108710 g     F .text	00000508 vInAckHandlerTask
8110ae24 g     F .text	00000164 main
8110c93c g     F .text	00000068 vFailGetMutexReceiverTask
8110ddf0 g     F .text	0000003c vChangeEPValue
8113e9a8 g     O .bss	00000004 alt_envp
8113e980 g     O .bss	00000004 __malloc_max_total_mem
81137c34 g     F .text	000001a0 alt_msgdma_prefetcher_add_extended_desc_to_list
8110c4f4 g     F .text	0000005c ucCrc8wInit
8110d198 g     F .text	0000004c vCouldNotCheckBufferTimeOutFunction
81134c20 g     F .text	00000068 altera_avalon_jtag_uart_write_fd
81102f38 g     F .text	000002c8 POWER_Read
81105f74 g     F .text	00000160 i2c_read
8112242c g     F .text	00000018 __swbuf
8113c7ac g     O .rodata	00000100 OSUnMapTbl
81123468 g     F .text	000000c8 .hidden __ltsf2
81133fbc g     F .text	00000090 alt_up_sd_card_get_attributes
811199f4 g     F .text	00000234 _fread_r
8110c804 g     F .text	00000068 vFailGetCountSemaphoreSenderTask
81105768 g     F .text	0000003c bDisableIsoDrivers
8113e89a g     O .rwdata	00000002 OSSemEn
811307e8 g     F .text	000000bc Write_Sector_Data
811343cc g     F .text	00000628 alt_up_sd_card_write
81129b18 g     F .text	0000039c OSFlagPost
81111774 g     F .text	00000008 __sclose
8110d4a0 g     F .text	00000068 vFailStartTimerRetransmission
811fa000 g       *ABS*	00000000 __alt_heap_limit
8112144c g     F .text	00000014 fclose
811279c4 g     F .text	00000118 OS_EventTaskWait
8110d368 g     F .text	00000068 vCouldNotRetransmitB32TimeoutTask
81111860 g     F .text	00000240 _strtol_r
8110fae4 g     F .text	000001a8 .hidden __truncdfsf2
81128654 g     F .text	000000d4 OS_TaskStatStkChk
8112e434 g     F .text	00000158 OSTaskDelReq
81117c48 g     F .text	00001690 _dtoa_r
81137f50 g     F .text	00000318 alt_msgdma_start_prefetcher_with_list_addr
81110638 g     F .text	00000814 _malloc_r
811225b0 g     F .text	00000030 __ascii_wctomb
8112acb0 g     F .text	000001d0 OSMutexCreate
8110d300 g     F .text	00000068 vFailCouldNotRetransmitTimeoutTask
8113e844 g     O .rwdata	00000004 alt_errno
81137a7c g     F .text	000000c0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
8112747c g     F .text	00000078 OSStart
8110527c g     F .text	000000d0 bSpwcGetLink
81106cc8 g     F .text	000004e8 POWER_SPI_RW
8111f998 g     F .text	000000dc __submore
81126660 g     F .text	00000068 __env_unlock
8111a56c g     F .text	000000cc _fwalk
8112e8e8 g     F .text	000001dc OSTaskResume
8112a940 g     F .text	000000f0 OSMemQuery
8113e8ac g     O .rwdata	00000002 OSTaskStatEn
8115260c g       *ABS*	00000000 __alt_stack_limit
8113e8f4 g     O .bss	00000004 ECommSpwCh
8110e050 g     F .text	0000003c vChangeAutoResetSync
8111aabc g     F .text	00000064 _mbtowc_r
8113e886 g     O .rwdata	00000002 OSMemMax
8112c810 g     F .text	00000178 OSQPostFront
81139950 g     F .text	000000d0 putc
81123180 g     F .text	00000084 .hidden __divsi3
8113ea05 g     O .bss	00000006 OSRdyTbl
8113e860 g     O .rwdata	00000002 OSDebugEn
81119c64 g     F .text	0000012c _malloc_trim_r
81139d04 g       *ABS*	00000000 __CTOR_END__
8113e974 g     O .bss	00000008 xSdHandle
8110ec84 g     F .text	00000404 .hidden __mulsf3
8113e878 g     O .rwdata	00000002 OSFlagNodeSize
8113e8e0 g     O .bss	00000004 pnt_memory
8110e164 g     F .text	00000040 vSyncReset
81107a88 g     F .text	00000040 bSyncSetPer
81100298 g     F .text	00000514 bDdr2EepromTest
8113ea3c g     O .bss	00000004 status_register
8113e8c0 g     O .rwdata	00000002 OSTmrCfgMax
8110841c g     F .text	00000074 bSyncIrqFlagClrError
8110cf30 g     F .text	00000068 vFailSetPreAckSenderBuffer
8111c4dc g     F .text	000000dc strcmp
8113ea44 g     O .bss	00000004 command_register
8112bd9c g     F .text	000001b4 OSQCreate
8112e58c g     F .text	000001a0 OSTaskNameGet
8114b7dc g     O .bss	00000010 xReceivedACK
8112c988 g     F .text	00000214 OSQPostOpt
811275ac g     F .text	00000228 OSTimeTick
8113e8a8 g     O .rwdata	00000002 OSTaskMax
81139d04 g       *ABS*	00000000 __DTOR_LIST__
8112ce68 g     F .text	000000e0 OSSemCreate
8113e8cc g     O .rwdata	00000002 OSTmrWheelSize
8110e438 g     F .text	00000058 _reg_read
8112b948 g     F .text	00000174 OSMutexQuery
811246d4 g     F .text	00000088 .hidden __nedf2
8113e8a2 g     O .rwdata	00000002 OSTaskDelEn
8110ddb8 g     F .text	00000038 vLoadDefaultEPValue
8110824c g     F .text	00000074 bSyncCtrCh7OutEnable
8112d630 g     F .text	00000118 OSSemQuery
8112bf50 g     F .text	00000288 OSQDel
8112c52c g     F .text	00000174 OSQPendAbort
8113e954 g     O .bss	00000004 xMutexPreParsed
811306b8 g     F .text	00000040 alt_irq_init
81125ff8 g     F .text	0000006c alt_release_fd
811309d8 g     F .text	000000bc get_cluster_flag
81108490 g     F .text	00000074 bSyncIrqFlagClrBlank
81138688 g     F .text	00000044 alt_msgdma_standard_descriptor_sync_transfer
811115b4 g     F .text	00000074 sprintf
8113c064 g     O .rodata	00000100 .hidden __clz_tab
81130fac g     F .text	00000294 Write_File_Record_At_Offset
81101520 g     F .text	00000580 bDdr2MemoryWriteTest
8110c9a4 g     F .text	00000068 vFailGetMutexTxUARTSenderTask
8113e98c g     O .bss	00000004 _PathLocale
8110855c g     F .text	00000058 bSyncIrqFlagBlank
81106b80 g     F .text	000000c0 iMsgdmaConstructExtendedMmToMmDescriptor
8112fd64 g     F .text	000001e8 OSTmrStop
8110b6a4 g     F .text	00000050 usiGetIdCMD
8111dc3c g     F .text	00000108 strtof
811397d8 g     F .text	00000014 atexit
81104514 g     F .text	00000040 vFeebCh3HandleIrq
811233ac g     F .text	000000bc .hidden __gesf2
8111177c g     F .text	0000004c strcspn
81117820 g     F .text	00000068 _write_r
8110721c g     F .text	00000074 vRstcReleaseDeviceReset
8110d0b4 g     F .text	0000004c vFailInAckHandlerTaskCreate
81127304 g     F .text	00000094 OSSchedLock
8111a850 g     F .text	00000018 setlocale
811379dc g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
8114f478 g     O .bss	00000800 OSTmrTaskStk
811114d8 g     F .text	00000044 scanf
81128f0c g     F .text	00000110 OSFlagCreate
81131240 g     F .text	00000688 Check_for_DOS_FAT
811330ec g     F .text	000002d0 create_file
8111c4d4 g     F .text	00000008 nanf
8113e818 g     O .rwdata	00000004 _impure_ptr
8113ea40 g     O .bss	00000004 CSD_register_w0
8113e9a0 g     O .bss	00000004 alt_argc
811192d8 g     F .text	00000224 __sflush_r
8111a8dc g     F .text	000000b4 _mbrtowc_r
8113899c g     F .text	00000068 _do_dtors
8111a83c g     F .text	00000008 __locale_cjk_lang
81103340 g     F .text	0000078c sense_log
8113e8ec g     O .bss	00000004 ESdmaBufferSide
8113e872 g     O .rwdata	00000002 OSEventMultiEn
8110fe78 g     F .text	00000004 _fseek_r
8114b7ec g     O .bss	00002000 vParserCommTask_stk
8110c550 g     F .text	00000070 printErrorTask
8110de2c g     F .text	00000030 vChangeDefaultEPValue
8112f534 g     F .text	000001c4 OSTmrCreate
811112a0 g     F .text	000001dc __srefill_r
811057a4 g     F .text	0000003c bEnableLvdsBoard
8113e958 g     O .bss	00000004 xMutexBuffer32
8112901c g     F .text	00000250 OSFlagDel
8113ea0c g     O .bss	00000004 OSEventFreeList
8110581c g     F .text	000000c0 bSetPreEmphasys
81100020 g       .exceptions	00000000 alt_irq_entry
8111aa70 g     F .text	0000004c __ascii_mbtowc
81107d58 g     F .text	00000078 bSyncCtrExtnIrq
8111b8c4 g     F .text	00000064 __ulp
811294f0 g     F .text	000005c0 OSFlagPend
8113e8be g     O .rwdata	00000002 OSTmrEn
81119930 g     F .text	00000018 __fp_unlock_all
81109f3c g     F .text	000001a4 setPreAckReceiverFreePos
81107d18 g     F .text	00000040 bSyncErrInj
8113e830 g     O .rwdata	00000008 alt_fs_list
81131a88 g     F .text	00000274 check_file_name_for_FAT16_compliance
8112f838 g     F .text	00000140 OSTmrNameGet
8113ec2c g     O .bss	00000400 xSZData
81128434 g     F .text	0000007c OS_StrCopy
8113ea4c g     O .bss	00000004 buffer_memory
8110cd90 g     F .text	00000068 vFailGetxMutexPreParsedParserRxTask
8113e888 g     O .rwdata	00000002 OSMemNameSize
81103acc g     F .text	000000b0 bSdmaInitM1Dma
811083a8 g     F .text	00000074 bSyncIrqEnableBlank
811396b8 g     F .text	00000028 OSInitHookEnd
8110d630 g     F .text	00000348 vUpdateMemMapFEE
8110d000 g     F .text	00000068 vFailSetPreAckReceiverBuffer
81104b1c g     F .text	00000058 bFeebCh8IrqFlagBufferEmpty
8113e8b4 g     O .rwdata	00000002 OSTCBPrioTblMax
8111a868 g     F .text	0000000c localeconv
8113e95c g     O .bss	00000004 xTimerRetransmission
81109638 g     F .text	000001f0 vReceiverUartTask
8113e8b0 g     O .rwdata	00000002 OSTaskStatStkChkEn
8113e960 g     O .bss	00000004 xMutexBuffer128
81104494 g     F .text	00000040 vFeebCh1HandleIrq
81104614 g     F .text	00000040 vFeebCh7HandleIrq
81138c90 g     F .text	00000058 alt_ic_isr_register
8113e884 g     O .rwdata	00000002 OSMemEn
8113e804 g     O .rwdata	00000004 alt_stack_limit_value
81110438 g     F .text	0000003c fwrite
8113ea50 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
8113e88e g     O .rwdata	00000002 OSMutexEn
8113e8dc g       *ABS*	00000000 _edata
81135a40 g     F .text	00000068 altera_avalon_uart_read_fd
8110e0bc g     F .text	00000034 vLoadDefaultIdNFEEMaster
8115260c g       *ABS*	00000000 _end
8115200c g     O .bss	00000500 active_files
8113ea10 g     O .bss	00000001 OSIntNesting
8110ca58 g     F .text	0000004c vFailInitialization
81101460 g     F .text	000000c0 bDdr2SwitchMemory
8110da54 g     F .text	0000002c cFeeRMAPDump
8113e964 g     O .bss	00000004 xSemCountBuffer32
81121460 g     F .text	0000016c __fputwc
8110d9a4 g     F .text	0000002c vFeeSpwRMAPChangeConfig
81117740 g     F .text	00000070 vfscanf
811333bc g     F .text	00000150 copy_file_record_name_to_string
811352b4 g     F .text	000000f8 altera_avalon_jtag_uart_ioctl
8112f28c g     F .text	000001dc OSTimeDlyResume
811318c8 g     F .text	000000f4 Look_for_FAT16
8112939c g     F .text	00000154 OSFlagNameSet
8113e968 g     O .bss	00000004 xMutexBuffer64
8112eac4 g     F .text	000001c8 OSTaskStkChk
81138d78 g     F .text	00000094 alt_ic_irq_disable
81103c2c g     F .text	00000430 bSdmaDmaM1Transfer
8113e88a g     O .rwdata	00000002 OSMemSize
8110cb88 g     F .text	00000068 vFailSetCountSemaphorexBuffer32
8111168c g     F .text	00000084 __swrite
8113e820 g     O .rwdata	00000004 __malloc_trim_threshold
8111a830 g     F .text	0000000c __locale_msgcharset
8113ea14 g     O .bss	00000004 OSTCBCur
8110d3d0 g     F .text	00000068 vCouldNotRetransmitB64TimeoutTask
81106c84 g     F .text	00000044 iMsgdmaExtendedDescriptorSyncTransfer
811397ec g     F .text	00000040 exit
8112b728 g     F .text	00000220 OSMutexPost
81108504 g     F .text	00000058 bSyncIrqFlagError
811337e8 g     F .text	000003c0 alt_up_sd_card_find_next
8113e88c g     O .rwdata	00000002 OSMemTblSize
8111a638 g     F .text	000000cc _fwalk_reent
81137dd4 g     F .text	000000a0 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
8110f1b4 g     F .text	000000f8 .hidden __floatunsisf
8111b6c0 g     F .text	00000204 __mdiff
81104b74 g     F .text	00000180 vFeebInitIrq
8110caf0 g     F .text	0000004c vFailSenderCreate
81123204 g     F .text	00000074 .hidden __modsi3
81107c64 g     F .text	0000003c uliSyncGetPer
8113e96c g     O .bss	00000004 xMutexSenderACK
8110d230 g     F .text	00000068 vFailGetBlockingSemTimeoutTask
8113e810 g     O .rwdata	00000004 __ctype_ptr__
8110cf98 g     F .text	00000068 vFailSetPreParsedBuffer
811308f8 g     F .text	000000e0 Read_Sector_Data
811fa000 g       *ABS*	00000000 __alt_data_end
81100020 g     F .exceptions	00000000 alt_exception
8111990c g     F .text	00000004 __sfp_lock_release
81104dc8 g     F .text	000000ac bFeebGetIrqControl
8112714c g     F .text	00000064 OSInit
81106154 g     F .text	00000078 bSetPainelLeds
8113751c g     F .text	000000b0 alt_msgdma_construct_extended_mm_to_mm_descriptor
8113ea18 g     O .bss	00000004 OSTmrTime
81101aa0 g     F .text	00000510 bDdr2MemoryReadTest
8112ee78 g     F .text	0000012c OSTaskQuery
81108334 g     F .text	00000074 bSyncIrqEnableError
8112cd00 g     F .text	000000b0 OS_QInit
8111c404 g     F .text	000000d0 __sccl
8110fcf0 g     F .text	0000000c atoi
811086e0 g     F .text	00000030 vFeeTask
811284b0 g     F .text	0000005c OS_StrLen
8110490c g     F .text	00000058 bFeebCh2IrqFlagBufferEmpty
8112a744 g     F .text	0000011c OSMemNameSet
8113c164 g     O .rodata	00000101 _ctype_
81107c28 g     F .text	0000003c uliSyncGetBt
84000000 g       *ABS*	00000000 __alt_mem_ext_flash
8110cc58 g     F .text	00000068 vFailSetCountSemaphorexBuffer128
8113e8a6 g     O .rwdata	00000002 OSTaskProfileEn
811373ec g     F .text	00000098 alt_msgdma_construct_extended_st_to_mm_descriptor
8113e970 g     O .bss	00000004 xTxUARTMutex
8113ea1c g     O .bss	00000004 OSTime
8113e828 g     O .rwdata	00000004 __mbtowc
81136060 g     F .text	0000005c altera_avalon_uart_close
8113ea20 g     O .bss	00000004 OSTmrSem
8114fc78 g     O .bss	00000800 OSTaskIdleStk
8110fd08 g     F .text	000000fc _fopen_r
81139cc8 g     F .text	0000003c _exit
81138710 g     F .text	00000134 alt_alarm_start
8112926c g     F .text	00000130 OSFlagNameGet
8112f468 g     F .text	00000064 OSTimeGet
8113e8f0 g     O .bss	00000004 ESdmaChBufferId
8113404c g     F .text	00000380 alt_up_sd_card_read
81110474 g     F .text	000001c4 __smakebuf_r
811049bc g     F .text	00000058 bFeebCh4IrqFlagBufferEmpty
8113e8d4 g     O .rwdata	00000008 alt_msgdma_list
811117c8 g     F .text	00000098 strlen
811074c0 g     F .text	000000b4 uc_spi_get_byte
811395e8 g     F .text	00000028 OSTaskSwHook
81125d54 g     F .text	0000015c open
81150478 g     O .bss	00000c30 OSEventTbl
8110d9d0 g     F .text	0000002c vFeeSpwRMAPChangeDefault
8112475c g     F .text	000000dc .hidden __gedf2
8114d7ec g     O .bss	00000010 xSenderACK
811392dc g     F .text	00000044 alt_putchar
811510a8 g     O .bss	00000e58 OSTCBTbl
81121778 g     F .text	00000838 __gethex
8112d748 g     F .text	00000108 OSSemSet
8110da80 g     F .text	00000038 cFeeRMAPEchoingEnable
8113e82c g     O .rwdata	00000004 __wctomb
8110adf8 g     F .text	0000002c vVariablesInitialization
8111fd2c g     F .text	00000018 __sprint_r
81104e74 g     F .text	00000088 bFeebGetIrqFlags
8113e8e8 g     O .bss	00000004 pxDmaM2Dev
8110c620 g     F .text	0000004c vFailCreateSemaphoreResources
8113e848 g     O .rwdata	00000004 alt_priority_mask
811057e0 g     F .text	0000003c bDisableLvdsBoard
8112cf48 g     F .text	00000248 OSSemDel
8113ea24 g     O .bss	00000004 OSFlagFreeList
811073fc g     F .text	000000c4 v_spi_send_byte
81107730 g     F .text	000000d0 bSSDisplayConfig
81138ce8 g     F .text	00000090 alt_ic_irq_enable
8113e86c g     O .rwdata	00000002 OSEventNameSize
81115e9c g     F .text	0000001c __vfprintf_internal
8113ea28 g     O .bss	00000001 OSStatRdy
81108008 g     F .text	00000074 bSyncCtrCh2OutEnable
81151f00 g     O .bss	000000a4 OSTCBPrioTbl
81136100 g     F .text	00000270 altera_avalon_uart_read
811225e0 g     F .text	00000064 _wctomb_r
81126594 g     F .text	000000cc __env_lock
8113e8b2 g     O .rwdata	00000002 OSTaskSwHookEn
8110471c g     F .text	00000044 vFeebCh3IrqFlagClrBufferEmpty
8112492c g     F .text	00000904 .hidden __subdf3
8114d7fc g     O .bss	00000130 xPreParsed
81107ca0 g     F .text	0000003c uliSyncGetOst
811047e8 g     F .text	00000044 vFeebCh6IrqFlagClrBufferEmpty
8110b414 g     F .text	00000290 vSendEthConf
8111b0d4 g     F .text	000000b0 __lo0bits
81115f7c g     F .text	000017c4 __svfscanf_r
8113e850 g     O .rwdata	00000008 alt_alarm_list
8111fa74 g     F .text	0000019c _ungetc_r
8113e87a g     O .rwdata	00000002 OSFlagWidth
81138934 g     F .text	00000068 _do_ctors
811029ec g     F .text	0000004c DMA_BUSY
811224e8 g     F .text	000000c8 wcrtomb
8110af88 g     F .text	00000068 vCCDLoadDefaultValues
811255b8 g     F .text	000000d8 close
81107cdc g     F .text	0000003c uliSyncGetGeneral
8113e9b8 g     O .bss	00000004 alt_envsem
8113ea2c g     O .bss	00000004 OSIdleCtrRun
811277d4 g     F .text	00000028 OSVersion
8113e8c4 g     O .rwdata	00000002 OSTmrCfgWheelSize
8112efa4 g     F .text	00000078 OS_TaskStkClr
8110e2fc g     F .text	0000003c siOpenFile
8113e89e g     O .rwdata	00000002 OSTaskCreateEn
8110c720 g     F .text	0000004c vFailSendPreParsedSemaphore
81131dbc g     F .text	000002a4 match_file_record_to_name_ext
81127dfc g     F .text	00000070 OS_EventWaitListInit
811215f0 g     F .text	00000088 fputwc
8110c6b8 g     F .text	00000068 vFailSendxSemCommInit
811396e0 g     F .text	00000028 OSTaskIdleHook
81119910 g     F .text	00000004 __sinit_lock_acquire
8111ae38 g     F .text	00000128 __multadd
8110482c g     F .text	00000044 vFeebCh7IrqFlagClrBufferEmpty
8110792c g     F .text	0000004c ucSyncStatusState
8112ec8c g     F .text	000001ec OSTaskSuspend
8111ae10 g     F .text	00000028 _Bfree
81107bec g     F .text	0000003c uliSyncGetMbt
8112850c g     F .text	00000064 OS_TaskIdle
8113e8ca g     O .rwdata	00000002 OSTmrTblSize
8112cb9c g     F .text	00000164 OSQQuery



Disassembly of section .exceptions:

81100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
81100020:	deffed04 	addi	sp,sp,-76

#ifdef ALT_STACK_CHECK
        /* Ensure stack didn't just overflow. */
        bltu  sp, et, .Lstack_overflow
81100024:	de003636 	bltu	sp,et,81100100 <alt_exception+0xe0>
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
81100028:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
8110002c:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
81100030:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
81100034:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
81100038:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
8110003c:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
81100040:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
81100044:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
81100048:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
8110004c:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
81100050:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
81100054:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
81100058:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
8110005c:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
81100060:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
81100064:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
81100068:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
8110006c:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
81100070:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
81100074:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
81100078:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
8110007c:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
81100080:	10000326 	beq	r2,zero,81100090 <alt_exception+0x70>
        beq   r4, zero, .Lnot_irq
81100084:	20000226 	beq	r4,zero,81100090 <alt_exception+0x70>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
81100088:	11001040 	call	81100104 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
8110008c:	00000706 	br	811000ac <alt_exception+0x8c>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
81100090:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
81100094:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
81100098:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
8110009c:	11001e00 	call	811001e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
811000a0:	1000021e 	bne	r2,zero,811000ac <alt_exception+0x8c>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
811000a4:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
811000a8:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
811000ac:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
811000b0:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
811000b4:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
811000b8:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
811000bc:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
811000c0:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
811000c4:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
811000c8:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
811000cc:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
811000d0:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
811000d4:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
811000d8:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
811000dc:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
811000e0:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
811000e4:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
811000e8:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
811000ec:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
811000f0:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
811000f4:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
811000f8:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
811000fc:	ef80083a 	eret

#ifdef ALT_STACK_CHECK
.Lstack_overflow:
        break 3
81100100:	003da0fa 	break	3

81100104 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
81100104:	defff904 	addi	sp,sp,-28
81100108:	de00012e 	bgeu	sp,et,81100110 <alt_irq_handler+0xc>
8110010c:	003b68fa 	trap	3
81100110:	dfc00615 	stw	ra,24(sp)
81100114:	df000515 	stw	fp,20(sp)
81100118:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
8110011c:	11271b00 	call	811271b0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
81100120:	0005313a 	rdctl	r2,ipending
81100124:	e0bffe15 	stw	r2,-8(fp)

  return active;
81100128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
8110012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
81100130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
81100134:	00800044 	movi	r2,1
81100138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
8110013c:	e0fffb17 	ldw	r3,-20(fp)
81100140:	e0bffc17 	ldw	r2,-16(fp)
81100144:	1884703a 	and	r2,r3,r2
81100148:	10001426 	beq	r2,zero,8110019c <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
8110014c:	00a04574 	movhi	r2,33045
81100150:	10894304 	addi	r2,r2,9484
81100154:	e0fffd17 	ldw	r3,-12(fp)
81100158:	180690fa 	slli	r3,r3,3
8110015c:	10c5883a 	add	r2,r2,r3
81100160:	10c00017 	ldw	r3,0(r2)
81100164:	00a04574 	movhi	r2,33045
81100168:	10894304 	addi	r2,r2,9484
8110016c:	e13ffd17 	ldw	r4,-12(fp)
81100170:	200890fa 	slli	r4,r4,3
81100174:	1105883a 	add	r2,r2,r4
81100178:	10800104 	addi	r2,r2,4
8110017c:	10800017 	ldw	r2,0(r2)
81100180:	1009883a 	mov	r4,r2
81100184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
81100188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
8110018c:	0005313a 	rdctl	r2,ipending
81100190:	e0bfff15 	stw	r2,-4(fp)

  return active;
81100194:	e0bfff17 	ldw	r2,-4(fp)
81100198:	00000706 	br	811001b8 <alt_irq_handler+0xb4>
      }
      mask <<= 1;
8110019c:	e0bffc17 	ldw	r2,-16(fp)
811001a0:	1085883a 	add	r2,r2,r2
811001a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
811001a8:	e0bffd17 	ldw	r2,-12(fp)
811001ac:	10800044 	addi	r2,r2,1
811001b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
811001b4:	003fe106 	br	8110013c <__reset+0xfb0e013c>

    active = alt_irq_pending ();
811001b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
811001bc:	e0bffb17 	ldw	r2,-20(fp)
811001c0:	103fdb1e 	bne	r2,zero,81100130 <__reset+0xfb0e0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
811001c4:	11272040 	call	81127204 <OSIntExit>
}
811001c8:	0001883a 	nop
811001cc:	e037883a 	mov	sp,fp
811001d0:	dfc00117 	ldw	ra,4(sp)
811001d4:	df000017 	ldw	fp,0(sp)
811001d8:	dec00204 	addi	sp,sp,8
811001dc:	f800283a 	ret

811001e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
811001e0:	defffb04 	addi	sp,sp,-20
811001e4:	de00012e 	bgeu	sp,et,811001ec <alt_instruction_exception_entry+0xc>
811001e8:	003b68fa 	trap	3
811001ec:	dfc00415 	stw	ra,16(sp)
811001f0:	df000315 	stw	fp,12(sp)
811001f4:	df000304 	addi	fp,sp,12
811001f8:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
811001fc:	000531fa 	rdctl	r2,exception
81100200:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
81100204:	e0bffd17 	ldw	r2,-12(fp)
81100208:	10801f0c 	andi	r2,r2,124
8110020c:	1004d0ba 	srli	r2,r2,2
81100210:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
81100214:	0005333a 	rdctl	r2,badaddr
81100218:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
8110021c:	d0a09917 	ldw	r2,-32156(gp)
81100220:	10000726 	beq	r2,zero,81100240 <alt_instruction_exception_entry+0x60>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
81100224:	d0a09917 	ldw	r2,-32156(gp)
81100228:	e0fffd17 	ldw	r3,-12(fp)
8110022c:	e1bffe17 	ldw	r6,-8(fp)
81100230:	e17fff17 	ldw	r5,-4(fp)
81100234:	1809883a 	mov	r4,r3
81100238:	103ee83a 	callr	r2
8110023c:	00000206 	br	81100248 <alt_instruction_exception_entry+0x68>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
81100240:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
81100244:	0005883a 	mov	r2,zero
}
81100248:	e037883a 	mov	sp,fp
8110024c:	dfc00117 	ldw	ra,4(sp)
81100250:	df000017 	ldw	fp,0(sp)
81100254:	dec00204 	addi	sp,sp,8
81100258:	f800283a 	ret

Disassembly of section .text:

8110025c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
8110025c:	06e047f4 	movhi	sp,33055
    ori sp, sp, %lo(__alt_stack_pointer)
81100260:	dee80014 	ori	sp,sp,40960
    movhi gp, %hi(_gp)
81100264:	06a04534 	movhi	gp,33044
    ori gp, gp, %lo(_gp)
81100268:	d69a0114 	ori	gp,gp,26628
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
8110026c:	00a044f4 	movhi	r2,33043
    ori r2, r2, %lo(__bss_start)
81100270:	10ba3714 	ori	r2,r2,59612

    movhi r3, %hi(__bss_end)
81100274:	00e04574 	movhi	r3,33045
    ori r3, r3, %lo(__bss_end)
81100278:	18c98314 	ori	r3,r3,9740

    beq r2, r3, 1f
8110027c:	10c00326 	beq	r2,r3,8110028c <_start+0x30>

0:
    stw zero, (r2)
81100280:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
81100284:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
81100288:	10fffd36 	bltu	r2,r3,81100280 <__reset+0xfb0e0280>
    /*
     * Set up the stack limit (if required).  The linker has set up the
     * copy of the variable which is in memory.
     */

    ldw   et, %gprel(alt_stack_limit_value)(gp)
8110028c:	d6200017 	ldw	et,-32768(gp)

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
81100290:	1125b800 	call	81125b80 <alt_main>

81100294 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
81100294:	003fff06 	br	81100294 <__reset+0xfb0e0294>

81100298 <bDdr2EepromTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromTest(alt_u8 ucMemoryId) {
81100298:	defff604 	addi	sp,sp,-40
8110029c:	de00012e 	bgeu	sp,et,811002a4 <bDdr2EepromTest+0xc>
811002a0:	003b68fa 	trap	3
811002a4:	dfc00915 	stw	ra,36(sp)
811002a8:	df000815 	stw	fp,32(sp)
811002ac:	df000804 	addi	fp,sp,32
811002b0:	2005883a 	mov	r2,r4
811002b4:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Test =====\n");
811002b8:	00e04534 	movhi	r3,33044
811002bc:	18facb04 	addi	r3,r3,-5332
811002c0:	00a04534 	movhi	r2,33044
811002c4:	10a74104 	addi	r2,r2,-25340
811002c8:	1009883a 	mov	r4,r2
811002cc:	00800884 	movi	r2,34
811002d0:	100d883a 	mov	r6,r2
811002d4:	200b883a 	mov	r5,r4
811002d8:	1809883a 	mov	r4,r3
811002dc:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
811002e0:	d0a04d17 	ldw	r2,-32460(gp)
811002e4:	01604534 	movhi	r5,33044
811002e8:	297acb04 	addi	r5,r5,-5332
811002ec:	1009883a 	mov	r4,r2
811002f0:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
811002f4:	00bfe804 	movi	r2,-96
811002f8:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
811002fc:	00800044 	movi	r2,1
81100300:	e0bff915 	stw	r2,-28(fp)
	switch (ucMemoryId) {
81100304:	e0bfff03 	ldbu	r2,-4(fp)
81100308:	10c00060 	cmpeqi	r3,r2,1
8110030c:	1800031e 	bne	r3,zero,8110031c <bDdr2EepromTest+0x84>
81100310:	108000a0 	cmpeqi	r2,r2,2
81100314:	1000081e 	bne	r2,zero,81100338 <bDdr2EepromTest+0xa0>
81100318:	00000e06 	br	81100354 <bDdr2EepromTest+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
8110031c:	00a00034 	movhi	r2,32768
81100320:	10827c04 	addi	r2,r2,2544
81100324:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
81100328:	00a00034 	movhi	r2,32768
8110032c:	10828004 	addi	r2,r2,2560
81100330:	e0bffb15 	stw	r2,-20(fp)
		break;
81100334:	00001906 	br	8110039c <bDdr2EepromTest+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
81100338:	00a00034 	movhi	r2,32768
8110033c:	10825804 	addi	r2,r2,2400
81100340:	e0bffa15 	stw	r2,-24(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100344:	00a00034 	movhi	r2,32768
81100348:	10825c04 	addi	r2,r2,2416
8110034c:	e0bffb15 	stw	r2,-20(fp)
		break;
81100350:	00001206 	br	8110039c <bDdr2EepromTest+0x104>
	default:
		bSuccess = FALSE;
81100354:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81100358:	00e04534 	movhi	r3,33044
8110035c:	18facb04 	addi	r3,r3,-5332
81100360:	00a04534 	movhi	r2,33044
81100364:	10a74a04 	addi	r2,r2,-25304
81100368:	1009883a 	mov	r4,r2
8110036c:	00800bc4 	movi	r2,47
81100370:	100d883a 	mov	r6,r2
81100374:	200b883a 	mov	r5,r4
81100378:	1809883a 	mov	r4,r3
8110037c:	1110e4c0 	call	81110e4c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81100380:	d0a04d17 	ldw	r2,-32460(gp)
81100384:	01604534 	movhi	r5,33044
81100388:	297acb04 	addi	r5,r5,-5332
8110038c:	1009883a 	mov	r4,r2
81100390:	110fe4c0 	call	8110fe4c <fprintf>
		;
#endif
		return bSuccess;
81100394:	e0bff917 	ldw	r2,-28(fp)
81100398:	0000ff06 	br	81100798 <bDdr2EepromTest+0x500>
	}

	alt_u8 ucControlAddr, ucValue;
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
8110039c:	00e04534 	movhi	r3,33044
811003a0:	18facb04 	addi	r3,r3,-5332
811003a4:	00a04534 	movhi	r2,33044
811003a8:	10a75604 	addi	r2,r2,-25256
811003ac:	1009883a 	mov	r4,r2
811003b0:	008005c4 	movi	r2,23
811003b4:	100d883a 	mov	r6,r2
811003b8:	200b883a 	mov	r5,r4
811003bc:	1809883a 	mov	r4,r3
811003c0:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
811003c4:	d0a04d17 	ldw	r2,-32460(gp)
811003c8:	01604534 	movhi	r5,33044
811003cc:	297acb04 	addi	r5,r5,-5332
811003d0:	1009883a 	mov	r4,r2
811003d4:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	usleep(20 * 1000);
811003d8:	01138804 	movi	r4,20000
811003dc:	11263140 	call	81126314 <usleep>
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811003e0:	e03ffc15 	stw	zero,-16(fp)
811003e4:	00003306 	br	811004b4 <bDdr2EepromTest+0x21c>
		ucControlAddr = iI;
811003e8:	e0bffc17 	ldw	r2,-16(fp)
811003ec:	e0bffd45 	stb	r2,-11(fp)
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811003f0:	e0bffd03 	ldbu	r2,-12(fp)
811003f4:	10c03fcc 	andi	r3,r2,255
811003f8:	18c0201c 	xori	r3,r3,128
811003fc:	18ffe004 	addi	r3,r3,-128
81100400:	e13ffd43 	ldbu	r4,-11(fp)
81100404:	e0bffe04 	addi	r2,fp,-8
81100408:	d8800015 	stw	r2,0(sp)
8110040c:	200f883a 	mov	r7,r4
81100410:	180d883a 	mov	r6,r3
81100414:	e17ffb17 	ldw	r5,-20(fp)
81100418:	e13ffa17 	ldw	r4,-24(fp)
8110041c:	1105ac00 	call	81105ac0 <I2C_Read>
81100420:	e0bff915 	stw	r2,-28(fp)
				ucControlAddr, &ucValue);
		if (bSuccess) {
81100424:	e0bff917 	ldw	r2,-28(fp)
81100428:	10001026 	beq	r2,zero,8110046c <bDdr2EepromTest+0x1d4>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "EEPROM[%03d]=%02Xh\n", ucControlAddr,
8110042c:	e0bffd43 	ldbu	r2,-11(fp)
81100430:	e0fffe03 	ldbu	r3,-8(fp)
81100434:	18c03fcc 	andi	r3,r3,255
81100438:	180f883a 	mov	r7,r3
8110043c:	100d883a 	mov	r6,r2
81100440:	01604534 	movhi	r5,33044
81100444:	29675c04 	addi	r5,r5,-25232
81100448:	01204534 	movhi	r4,33044
8110044c:	213acb04 	addi	r4,r4,-5332
81100450:	11115b40 	call	811115b4 <sprintf>
					ucValue);
			debug(fp, cDebugBuffer);
81100454:	d0a04d17 	ldw	r2,-32460(gp)
81100458:	01604534 	movhi	r5,33044
8110045c:	297acb04 	addi	r5,r5,-5332
81100460:	1009883a 	mov	r4,r2
81100464:	110fe4c0 	call	8110fe4c <fprintf>
81100468:	00000f06 	br	811004a8 <bDdr2EepromTest+0x210>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
8110046c:	00e04534 	movhi	r3,33044
81100470:	18facb04 	addi	r3,r3,-5332
81100474:	00a04534 	movhi	r2,33044
81100478:	10a76104 	addi	r2,r2,-25212
8110047c:	1009883a 	mov	r4,r2
81100480:	008005c4 	movi	r2,23
81100484:	100d883a 	mov	r6,r2
81100488:	200b883a 	mov	r5,r4
8110048c:	1809883a 	mov	r4,r3
81100490:	1110e4c0 	call	81110e4c <memcpy>
			debug(fp, cDebugBuffer);
81100494:	d0a04d17 	ldw	r2,-32460(gp)
81100498:	01604534 	movhi	r5,33044
8110049c:	297acb04 	addi	r5,r5,-5332
811004a0:	1009883a 	mov	r4,r2
811004a4:	110fe4c0 	call	8110fe4c <fprintf>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Read Test\n");
	debug(fp, cDebugBuffer);
#endif
	usleep(20 * 1000);
	for (iI = 0; iI < 256 && bSuccess; iI++) {
811004a8:	e0bffc17 	ldw	r2,-16(fp)
811004ac:	10800044 	addi	r2,r2,1
811004b0:	e0bffc15 	stw	r2,-16(fp)
811004b4:	e0bffc17 	ldw	r2,-16(fp)
811004b8:	10804008 	cmpgei	r2,r2,256
811004bc:	1000021e 	bne	r2,zero,811004c8 <bDdr2EepromTest+0x230>
811004c0:	e0bff917 	ldw	r2,-28(fp)
811004c4:	103fc81e 	bne	r2,zero,811003e8 <__reset+0xfb0e03e8>
			sprintf(cDebugBuffer, "Failed to read EEPROM\n");
			debug(fp, cDebugBuffer);
#endif
		}
	}
	if (bSuccess) {
811004c8:	e0bff917 	ldw	r2,-28(fp)
811004cc:	10001026 	beq	r2,zero,81100510 <bDdr2EepromTest+0x278>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Completed\n\n");
811004d0:	00e04534 	movhi	r3,33044
811004d4:	18facb04 	addi	r3,r3,-5332
811004d8:	00a04534 	movhi	r2,33044
811004dc:	10a76704 	addi	r2,r2,-25188
811004e0:	1009883a 	mov	r4,r2
811004e4:	00800884 	movi	r2,34
811004e8:	100d883a 	mov	r6,r2
811004ec:	200b883a 	mov	r5,r4
811004f0:	1809883a 	mov	r4,r3
811004f4:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
811004f8:	d0a04d17 	ldw	r2,-32460(gp)
811004fc:	01604534 	movhi	r5,33044
81100500:	297acb04 	addi	r5,r5,-5332
81100504:	1009883a 	mov	r4,r2
81100508:	110fe4c0 	call	8110fe4c <fprintf>
8110050c:	00000f06 	br	8110054c <bDdr2EepromTest+0x2b4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Read Test Failed\n\n");
81100510:	00e04534 	movhi	r3,33044
81100514:	18facb04 	addi	r3,r3,-5332
81100518:	00a04534 	movhi	r2,33044
8110051c:	10a77004 	addi	r2,r2,-25152
81100520:	1009883a 	mov	r4,r2
81100524:	008007c4 	movi	r2,31
81100528:	100d883a 	mov	r6,r2
8110052c:	200b883a 	mov	r5,r4
81100530:	1809883a 	mov	r4,r3
81100534:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
81100538:	d0a04d17 	ldw	r2,-32460(gp)
8110053c:	01604534 	movhi	r5,33044
81100540:	297acb04 	addi	r5,r5,-5332
81100544:	1009883a 	mov	r4,r2
81100548:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 EEPROM Write Test\n");
8110054c:	00e04534 	movhi	r3,33044
81100550:	18facb04 	addi	r3,r3,-5332
81100554:	00a04534 	movhi	r2,33044
81100558:	10a77804 	addi	r2,r2,-25120
8110055c:	1009883a 	mov	r4,r2
81100560:	00800604 	movi	r2,24
81100564:	100d883a 	mov	r6,r2
81100568:	200b883a 	mov	r5,r4
8110056c:	1809883a 	mov	r4,r3
81100570:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81100574:	d0a04d17 	ldw	r2,-32460(gp)
81100578:	01604534 	movhi	r5,33044
8110057c:	297acb04 	addi	r5,r5,-5332
81100580:	1009883a 	mov	r4,r2
81100584:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	alt_u8 ucWriteData = 0x12, ucTestAddr = 128;
81100588:	00800484 	movi	r2,18
8110058c:	e0bffd85 	stb	r2,-10(fp)
81100590:	00bfe004 	movi	r2,-128
81100594:	e0bffdc5 	stb	r2,-9(fp)
	alt_u8 ucReadData;
	usleep(20 * 1000);
81100598:	01138804 	movi	r4,20000
8110059c:	11263140 	call	81126314 <usleep>
	bSuccess = I2C_Write(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811005a0:	e0bffd03 	ldbu	r2,-12(fp)
811005a4:	10c03fcc 	andi	r3,r2,255
811005a8:	18c0201c 	xori	r3,r3,128
811005ac:	18ffe004 	addi	r3,r3,-128
811005b0:	e13ffdc3 	ldbu	r4,-9(fp)
811005b4:	e0bffd83 	ldbu	r2,-10(fp)
811005b8:	d8800015 	stw	r2,0(sp)
811005bc:	200f883a 	mov	r7,r4
811005c0:	180d883a 	mov	r6,r3
811005c4:	e17ffb17 	ldw	r5,-20(fp)
811005c8:	e13ffa17 	ldw	r4,-24(fp)
811005cc:	11059e00 	call	811059e0 <I2C_Write>
811005d0:	e0bff915 	stw	r2,-28(fp)
			ucTestAddr, ucWriteData);
	if (!bSuccess) {
811005d4:	e0bff917 	ldw	r2,-28(fp)
811005d8:	1000101e 	bne	r2,zero,8110061c <bDdr2EepromTest+0x384>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to write EEPROM\n");
811005dc:	00e04534 	movhi	r3,33044
811005e0:	18facb04 	addi	r3,r3,-5332
811005e4:	00a04534 	movhi	r2,33044
811005e8:	10a77e04 	addi	r2,r2,-25096
811005ec:	1009883a 	mov	r4,r2
811005f0:	00800604 	movi	r2,24
811005f4:	100d883a 	mov	r6,r2
811005f8:	200b883a 	mov	r5,r4
811005fc:	1809883a 	mov	r4,r3
81100600:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
81100604:	d0a04d17 	ldw	r2,-32460(gp)
81100608:	01604534 	movhi	r5,33044
8110060c:	297acb04 	addi	r5,r5,-5332
81100610:	1009883a 	mov	r4,r2
81100614:	110fe4c0 	call	8110fe4c <fprintf>
81100618:	00003306 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
	} else {
		bSuccess = I2C_Read(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
8110061c:	e0bffd03 	ldbu	r2,-12(fp)
81100620:	10c03fcc 	andi	r3,r2,255
81100624:	18c0201c 	xori	r3,r3,128
81100628:	18ffe004 	addi	r3,r3,-128
8110062c:	e13ffdc3 	ldbu	r4,-9(fp)
81100630:	e0bffe44 	addi	r2,fp,-7
81100634:	d8800015 	stw	r2,0(sp)
81100638:	200f883a 	mov	r7,r4
8110063c:	180d883a 	mov	r6,r3
81100640:	e17ffb17 	ldw	r5,-20(fp)
81100644:	e13ffa17 	ldw	r4,-24(fp)
81100648:	1105ac00 	call	81105ac0 <I2C_Read>
8110064c:	e0bff915 	stw	r2,-28(fp)
				ucTestAddr, &ucReadData);
		if (!bSuccess) {
81100650:	e0bff917 	ldw	r2,-28(fp)
81100654:	1000101e 	bne	r2,zero,81100698 <bDdr2EepromTest+0x400>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "Failed to read EEPROM for verify\n");
81100658:	00e04534 	movhi	r3,33044
8110065c:	18facb04 	addi	r3,r3,-5332
81100660:	00a04534 	movhi	r2,33044
81100664:	10a78404 	addi	r2,r2,-25072
81100668:	1009883a 	mov	r4,r2
8110066c:	00800884 	movi	r2,34
81100670:	100d883a 	mov	r6,r2
81100674:	200b883a 	mov	r5,r4
81100678:	1809883a 	mov	r4,r3
8110067c:	1110e4c0 	call	81110e4c <memcpy>
			debug(fp, cDebugBuffer);
81100680:	d0a04d17 	ldw	r2,-32460(gp)
81100684:	01604534 	movhi	r5,33044
81100688:	297acb04 	addi	r5,r5,-5332
8110068c:	1009883a 	mov	r4,r2
81100690:	110fe4c0 	call	8110fe4c <fprintf>
81100694:	00001406 	br	811006e8 <bDdr2EepromTest+0x450>
#endif
		} else {
			if (ucReadData != ucWriteData) {
81100698:	e0bffe43 	ldbu	r2,-7(fp)
8110069c:	10c03fcc 	andi	r3,r2,255
811006a0:	e0bffd83 	ldbu	r2,-10(fp)
811006a4:	18801026 	beq	r3,r2,811006e8 <bDdr2EepromTest+0x450>
				bSuccess = FALSE;
811006a8:	e03ff915 	stw	zero,-28(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811006ac:	e0bffe43 	ldbu	r2,-7(fp)
811006b0:	10803fcc 	andi	r2,r2,255
811006b4:	e0fffd83 	ldbu	r3,-10(fp)
811006b8:	180f883a 	mov	r7,r3
811006bc:	100d883a 	mov	r6,r2
811006c0:	01604534 	movhi	r5,33044
811006c4:	29678d04 	addi	r5,r5,-25036
811006c8:	01204534 	movhi	r4,33044
811006cc:	213acb04 	addi	r4,r4,-5332
811006d0:	11115b40 	call	811115b4 <sprintf>
						"Verify EEPROM write fail, ReadData=%02Xh, WriteData=%02Xh\n",
						ucReadData, ucWriteData);
				debug(fp, cDebugBuffer);
811006d4:	d0a04d17 	ldw	r2,-32460(gp)
811006d8:	01604534 	movhi	r5,33044
811006dc:	297acb04 	addi	r5,r5,-5332
811006e0:	1009883a 	mov	r4,r2
811006e4:	110fe4c0 	call	8110fe4c <fprintf>
#endif
			}
		}
	}
	if (bSuccess) {
811006e8:	e0bff917 	ldw	r2,-28(fp)
811006ec:	10001026 	beq	r2,zero,81100730 <bDdr2EepromTest+0x498>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Completed\n\n");
811006f0:	00e04534 	movhi	r3,33044
811006f4:	18facb04 	addi	r3,r3,-5332
811006f8:	00a04534 	movhi	r2,33044
811006fc:	10a79c04 	addi	r2,r2,-24976
81100700:	1009883a 	mov	r4,r2
81100704:	008008c4 	movi	r2,35
81100708:	100d883a 	mov	r6,r2
8110070c:	200b883a 	mov	r5,r4
81100710:	1809883a 	mov	r4,r3
81100714:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
81100718:	d0a04d17 	ldw	r2,-32460(gp)
8110071c:	01604534 	movhi	r5,33044
81100720:	297acb04 	addi	r5,r5,-5332
81100724:	1009883a 	mov	r4,r2
81100728:	110fe4c0 	call	8110fe4c <fprintf>
8110072c:	00000f06 	br	8110076c <bDdr2EepromTest+0x4d4>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 EEPROM Write Test Failed\n\n");
81100730:	00e04534 	movhi	r3,33044
81100734:	18facb04 	addi	r3,r3,-5332
81100738:	00a04534 	movhi	r2,33044
8110073c:	10a7a504 	addi	r2,r2,-24940
81100740:	1009883a 	mov	r4,r2
81100744:	00800804 	movi	r2,32
81100748:	100d883a 	mov	r6,r2
8110074c:	200b883a 	mov	r5,r4
81100750:	1809883a 	mov	r4,r3
81100754:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
81100758:	d0a04d17 	ldw	r2,-32460(gp)
8110075c:	01604534 	movhi	r5,33044
81100760:	297acb04 	addi	r5,r5,-5332
81100764:	1009883a 	mov	r4,r2
81100768:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110076c:	00a04534 	movhi	r2,33044
81100770:	10bacb04 	addi	r2,r2,-5332
81100774:	00c00284 	movi	r3,10
81100778:	10c00005 	stb	r3,0(r2)
8110077c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81100780:	d0a04d17 	ldw	r2,-32460(gp)
81100784:	01604534 	movhi	r5,33044
81100788:	297acb04 	addi	r5,r5,-5332
8110078c:	1009883a 	mov	r4,r2
81100790:	110fe4c0 	call	8110fe4c <fprintf>
#endif

	return bSuccess;
81100794:	e0bff917 	ldw	r2,-28(fp)
}
81100798:	e037883a 	mov	sp,fp
8110079c:	dfc00117 	ldw	ra,4(sp)
811007a0:	df000017 	ldw	fp,0(sp)
811007a4:	dec00204 	addi	sp,sp,8
811007a8:	f800283a 	ret

811007ac <bDdr2EepromDump>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2EepromDump(alt_u8 ucMemoryId) {
811007ac:	deffb704 	addi	sp,sp,-292
811007b0:	de00012e 	bgeu	sp,et,811007b8 <bDdr2EepromDump+0xc>
811007b4:	003b68fa 	trap	3
811007b8:	dfc04815 	stw	ra,288(sp)
811007bc:	df004715 	stw	fp,284(sp)
811007c0:	df004704 	addi	fp,sp,284
811007c4:	2005883a 	mov	r2,r4
811007c8:	e0bfff05 	stb	r2,-4(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 EEPROM Dump =====\n");
811007cc:	00e04534 	movhi	r3,33044
811007d0:	18facb04 	addi	r3,r3,-5332
811007d4:	00a04534 	movhi	r2,33044
811007d8:	10a7ad04 	addi	r2,r2,-24908
811007dc:	1009883a 	mov	r4,r2
811007e0:	00800884 	movi	r2,34
811007e4:	100d883a 	mov	r6,r2
811007e8:	200b883a 	mov	r5,r4
811007ec:	1809883a 	mov	r4,r3
811007f0:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
811007f4:	d0a04d17 	ldw	r2,-32460(gp)
811007f8:	01604534 	movhi	r5,33044
811007fc:	297acb04 	addi	r5,r5,-5332
81100800:	1009883a 	mov	r4,r2
81100804:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	const alt_u8 cucDeviceAddr = DDR2_EEPROM_I2C_ADDRESS;
81100808:	00bfe804 	movi	r2,-96
8110080c:	e0bfbd05 	stb	r2,-268(fp)
	bool bSuccess;
	alt_u32 uliI2cSclBase;
	alt_u32 uliI2cSdaBase;
	int iI;

	bSuccess = TRUE;
81100810:	00800044 	movi	r2,1
81100814:	e0bfbe15 	stw	r2,-264(fp)
	switch (ucMemoryId) {
81100818:	e0bfff03 	ldbu	r2,-4(fp)
8110081c:	10c00060 	cmpeqi	r3,r2,1
81100820:	1800031e 	bne	r3,zero,81100830 <bDdr2EepromDump+0x84>
81100824:	108000a0 	cmpeqi	r2,r2,2
81100828:	1000081e 	bne	r2,zero,8110084c <bDdr2EepromDump+0xa0>
8110082c:	00000e06 	br	81100868 <bDdr2EepromDump+0xbc>
	case DDR2_M1_ID:
		uliI2cSclBase = DDR2_M1_EEPROM_I2C_SCL_BASE;
81100830:	00a00034 	movhi	r2,32768
81100834:	10827c04 	addi	r2,r2,2544
81100838:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M1_EEPROM_I2C_SDA_BASE;
8110083c:	00a00034 	movhi	r2,32768
81100840:	10828004 	addi	r2,r2,2560
81100844:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100848:	00001906 	br	811008b0 <bDdr2EepromDump+0x104>
	case DDR2_M2_ID:
		uliI2cSclBase = DDR2_M2_EEPROM_I2C_SCL_BASE;
8110084c:	00a00034 	movhi	r2,32768
81100850:	10825804 	addi	r2,r2,2400
81100854:	e0bfba15 	stw	r2,-280(fp)
		uliI2cSdaBase = DDR2_M2_EEPROM_I2C_SDA_BASE;
81100858:	00a00034 	movhi	r2,32768
8110085c:	10825c04 	addi	r2,r2,2416
81100860:	e0bfbb15 	stw	r2,-276(fp)
		break;
81100864:	00001206 	br	811008b0 <bDdr2EepromDump+0x104>
	default:
		bSuccess = FALSE;
81100868:	e03fbe15 	stw	zero,-264(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
8110086c:	00e04534 	movhi	r3,33044
81100870:	18facb04 	addi	r3,r3,-5332
81100874:	00a04534 	movhi	r2,33044
81100878:	10a7b604 	addi	r2,r2,-24872
8110087c:	1009883a 	mov	r4,r2
81100880:	00800bc4 	movi	r2,47
81100884:	100d883a 	mov	r6,r2
81100888:	200b883a 	mov	r5,r4
8110088c:	1809883a 	mov	r4,r3
81100890:	1110e4c0 	call	81110e4c <memcpy>
				"DR2 Memory ID not identified!! Aborting Dump \n");
		debug(fp, cDebugBuffer)
81100894:	d0a04d17 	ldw	r2,-32460(gp)
81100898:	01604534 	movhi	r5,33044
8110089c:	297acb04 	addi	r5,r5,-5332
811008a0:	1009883a 	mov	r4,r2
811008a4:	110fe4c0 	call	8110fe4c <fprintf>
		;
#endif
		return bSuccess;
811008a8:	e0bfbe17 	ldw	r2,-264(fp)
811008ac:	0002e706 	br	8110144c <bDdr2EepromDump+0xca0>
	}

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
811008b0:	e0bfbd03 	ldbu	r2,-268(fp)
811008b4:	10c03fcc 	andi	r3,r2,255
811008b8:	18c0201c 	xori	r3,r3,128
811008bc:	18ffe004 	addi	r3,r3,-128
811008c0:	e13fbf04 	addi	r4,fp,-260
811008c4:	00804004 	movi	r2,256
811008c8:	d8800015 	stw	r2,0(sp)
811008cc:	200f883a 	mov	r7,r4
811008d0:	180d883a 	mov	r6,r3
811008d4:	e17fbb17 	ldw	r5,-276(fp)
811008d8:	e13fba17 	ldw	r4,-280(fp)
811008dc:	1105bc80 	call	81105bc8 <I2C_MultipleRead>
811008e0:	e0bfbe15 	stw	r2,-264(fp)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
811008e4:	e0bfbe17 	ldw	r2,-264(fp)
811008e8:	1002be26 	beq	r2,zero,811013e4 <bDdr2EepromDump+0xc38>
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811008ec:	e03fbc15 	stw	zero,-272(fp)
811008f0:	0002b606 	br	811013cc <bDdr2EepromDump+0xc20>
			if (iI == 0) {
811008f4:	e0bfbc17 	ldw	r2,-272(fp)
811008f8:	1000121e 	bne	r2,zero,81100944 <bDdr2EepromDump+0x198>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
811008fc:	e0ffbf04 	addi	r3,fp,-260
81100900:	e0bfbc17 	ldw	r2,-272(fp)
81100904:	1885883a 	add	r2,r3,r2
81100908:	10800003 	ldbu	r2,0(r2)
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
			if (iI == 0) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110090c:	10803fcc 	andi	r2,r2,255
81100910:	100f883a 	mov	r7,r2
81100914:	e1bfbc17 	ldw	r6,-272(fp)
81100918:	01604534 	movhi	r5,33044
8110091c:	2967c204 	addi	r5,r5,-24824
81100920:	01204534 	movhi	r4,33044
81100924:	213acb04 	addi	r4,r4,-5332
81100928:	11115b40 	call	811115b4 <sprintf>
						"(Number of SPD Bytes Used)\n" "EEPROM[%03d]=%02Xh ",
						iI, ucSZData[iI]);
				debug(fp, cDebugBuffer);
8110092c:	d0a04d17 	ldw	r2,-32460(gp)
81100930:	01604534 	movhi	r5,33044
81100934:	297acb04 	addi	r5,r5,-5332
81100938:	1009883a 	mov	r4,r2
8110093c:	110fe4c0 	call	8110fe4c <fprintf>
81100940:	00029f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 1) {
81100944:	e0bfbc17 	ldw	r2,-272(fp)
81100948:	10800058 	cmpnei	r2,r2,1
8110094c:	1000101e 	bne	r2,zero,81100990 <bDdr2EepromDump+0x1e4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100950:	00e04534 	movhi	r3,33044
81100954:	18facb04 	addi	r3,r3,-5332
81100958:	00a04534 	movhi	r2,33044
8110095c:	10a7ce04 	addi	r2,r2,-24776
81100960:	1009883a 	mov	r4,r2
81100964:	00800c04 	movi	r2,48
81100968:	100d883a 	mov	r6,r2
8110096c:	200b883a 	mov	r5,r4
81100970:	1809883a 	mov	r4,r3
81100974:	1110e4c0 	call	81110e4c <memcpy>
						"(Total Number of Bytes in SPD Device, Log2(N))\n");
				debug(fp, cDebugBuffer);
81100978:	d0a04d17 	ldw	r2,-32460(gp)
8110097c:	01604534 	movhi	r5,33044
81100980:	297acb04 	addi	r5,r5,-5332
81100984:	1009883a 	mov	r4,r2
81100988:	110fe4c0 	call	8110fe4c <fprintf>
8110098c:	00028c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 2) {
81100990:	e0bfbc17 	ldw	r2,-272(fp)
81100994:	10800098 	cmpnei	r2,r2,2
81100998:	1000101e 	bne	r2,zero,811009dc <bDdr2EepromDump+0x230>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Basic Memory Type[08h:DDR2])\n");
8110099c:	00e04534 	movhi	r3,33044
811009a0:	18facb04 	addi	r3,r3,-5332
811009a4:	00a04534 	movhi	r2,33044
811009a8:	10a7da04 	addi	r2,r2,-24728
811009ac:	1009883a 	mov	r4,r2
811009b0:	008007c4 	movi	r2,31
811009b4:	100d883a 	mov	r6,r2
811009b8:	200b883a 	mov	r5,r4
811009bc:	1809883a 	mov	r4,r3
811009c0:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
811009c4:	d0a04d17 	ldw	r2,-32460(gp)
811009c8:	01604534 	movhi	r5,33044
811009cc:	297acb04 	addi	r5,r5,-5332
811009d0:	1009883a 	mov	r4,r2
811009d4:	110fe4c0 	call	8110fe4c <fprintf>
811009d8:	00027906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 3) {
811009dc:	e0bfbc17 	ldw	r2,-272(fp)
811009e0:	108000d8 	cmpnei	r2,r2,3
811009e4:	1000101e 	bne	r2,zero,81100a28 <bDdr2EepromDump+0x27c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811009e8:	00e04534 	movhi	r3,33044
811009ec:	18facb04 	addi	r3,r3,-5332
811009f0:	00a04534 	movhi	r2,33044
811009f4:	10a7e204 	addi	r2,r2,-24696
811009f8:	1009883a 	mov	r4,r2
811009fc:	008009c4 	movi	r2,39
81100a00:	100d883a 	mov	r6,r2
81100a04:	200b883a 	mov	r5,r4
81100a08:	1809883a 	mov	r4,r3
81100a0c:	1110e4c0 	call	81110e4c <memcpy>
						"(Number of Row Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a10:	d0a04d17 	ldw	r2,-32460(gp)
81100a14:	01604534 	movhi	r5,33044
81100a18:	297acb04 	addi	r5,r5,-5332
81100a1c:	1009883a 	mov	r4,r2
81100a20:	110fe4c0 	call	8110fe4c <fprintf>
81100a24:	00026606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 4) {
81100a28:	e0bfbc17 	ldw	r2,-272(fp)
81100a2c:	10800118 	cmpnei	r2,r2,4
81100a30:	1000101e 	bne	r2,zero,81100a74 <bDdr2EepromDump+0x2c8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a34:	00e04534 	movhi	r3,33044
81100a38:	18facb04 	addi	r3,r3,-5332
81100a3c:	00a04534 	movhi	r2,33044
81100a40:	10a7ec04 	addi	r2,r2,-24656
81100a44:	1009883a 	mov	r4,r2
81100a48:	00800a84 	movi	r2,42
81100a4c:	100d883a 	mov	r6,r2
81100a50:	200b883a 	mov	r5,r4
81100a54:	1809883a 	mov	r4,r3
81100a58:	1110e4c0 	call	81110e4c <memcpy>
						"(Number of Column Addresses on Assembly)\n");
				debug(fp, cDebugBuffer);
81100a5c:	d0a04d17 	ldw	r2,-32460(gp)
81100a60:	01604534 	movhi	r5,33044
81100a64:	297acb04 	addi	r5,r5,-5332
81100a68:	1009883a 	mov	r4,r2
81100a6c:	110fe4c0 	call	8110fe4c <fprintf>
81100a70:	00025306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 5) {
81100a74:	e0bfbc17 	ldw	r2,-272(fp)
81100a78:	10800158 	cmpnei	r2,r2,5
81100a7c:	1000101e 	bne	r2,zero,81100ac0 <bDdr2EepromDump+0x314>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100a80:	00e04534 	movhi	r3,33044
81100a84:	18facb04 	addi	r3,r3,-5332
81100a88:	00a04534 	movhi	r2,33044
81100a8c:	10a7f704 	addi	r2,r2,-24612
81100a90:	1009883a 	mov	r4,r2
81100a94:	00800c04 	movi	r2,48
81100a98:	100d883a 	mov	r6,r2
81100a9c:	200b883a 	mov	r5,r4
81100aa0:	1809883a 	mov	r4,r3
81100aa4:	1110e4c0 	call	81110e4c <memcpy>
						"(DIMM Height and Module Rank Number[b2b1b0+1])\n");
				debug(fp, cDebugBuffer);
81100aa8:	d0a04d17 	ldw	r2,-32460(gp)
81100aac:	01604534 	movhi	r5,33044
81100ab0:	297acb04 	addi	r5,r5,-5332
81100ab4:	1009883a 	mov	r4,r2
81100ab8:	110fe4c0 	call	8110fe4c <fprintf>
81100abc:	00024006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 6) {
81100ac0:	e0bfbc17 	ldw	r2,-272(fp)
81100ac4:	10800198 	cmpnei	r2,r2,6
81100ac8:	1000101e 	bne	r2,zero,81100b0c <bDdr2EepromDump+0x360>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width)\n");
81100acc:	00e04534 	movhi	r3,33044
81100ad0:	18facb04 	addi	r3,r3,-5332
81100ad4:	00a04534 	movhi	r2,33044
81100ad8:	10a80304 	addi	r2,r2,-24564
81100adc:	1009883a 	mov	r4,r2
81100ae0:	00800544 	movi	r2,21
81100ae4:	100d883a 	mov	r6,r2
81100ae8:	200b883a 	mov	r5,r4
81100aec:	1809883a 	mov	r4,r3
81100af0:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81100af4:	d0a04d17 	ldw	r2,-32460(gp)
81100af8:	01604534 	movhi	r5,33044
81100afc:	297acb04 	addi	r5,r5,-5332
81100b00:	1009883a 	mov	r4,r2
81100b04:	110fe4c0 	call	8110fe4c <fprintf>
81100b08:	00022d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 7) {
81100b0c:	e0bfbc17 	ldw	r2,-272(fp)
81100b10:	108001d8 	cmpnei	r2,r2,7
81100b14:	1000101e 	bne	r2,zero,81100b58 <bDdr2EepromDump+0x3ac>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Module Data Width, Continued)\n");
81100b18:	00e04534 	movhi	r3,33044
81100b1c:	18facb04 	addi	r3,r3,-5332
81100b20:	00a04534 	movhi	r2,33044
81100b24:	10a80904 	addi	r2,r2,-24540
81100b28:	1009883a 	mov	r4,r2
81100b2c:	00800804 	movi	r2,32
81100b30:	100d883a 	mov	r6,r2
81100b34:	200b883a 	mov	r5,r4
81100b38:	1809883a 	mov	r4,r3
81100b3c:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81100b40:	d0a04d17 	ldw	r2,-32460(gp)
81100b44:	01604534 	movhi	r5,33044
81100b48:	297acb04 	addi	r5,r5,-5332
81100b4c:	1009883a 	mov	r4,r2
81100b50:	110fe4c0 	call	8110fe4c <fprintf>
81100b54:	00021a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 16) {
81100b58:	e0bfbc17 	ldw	r2,-272(fp)
81100b5c:	10800418 	cmpnei	r2,r2,16
81100b60:	1000101e 	bne	r2,zero,81100ba4 <bDdr2EepromDump+0x3f8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100b64:	00e04534 	movhi	r3,33044
81100b68:	18facb04 	addi	r3,r3,-5332
81100b6c:	00a04534 	movhi	r2,33044
81100b70:	10a81104 	addi	r2,r2,-24508
81100b74:	1009883a 	mov	r4,r2
81100b78:	00800d04 	movi	r2,52
81100b7c:	100d883a 	mov	r6,r2
81100b80:	200b883a 	mov	r5,r4
81100b84:	1809883a 	mov	r4,r3
81100b88:	1110e4c0 	call	81110e4c <memcpy>
						"(Burst Lengths Supported[bitmap: x x x x 8 4 x x])\n");
				debug(fp, cDebugBuffer);
81100b8c:	d0a04d17 	ldw	r2,-32460(gp)
81100b90:	01604534 	movhi	r5,33044
81100b94:	297acb04 	addi	r5,r5,-5332
81100b98:	1009883a 	mov	r4,r2
81100b9c:	110fe4c0 	call	8110fe4c <fprintf>
81100ba0:	00020706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 13) {
81100ba4:	e0bfbc17 	ldw	r2,-272(fp)
81100ba8:	10800358 	cmpnei	r2,r2,13
81100bac:	1000101e 	bne	r2,zero,81100bf0 <bDdr2EepromDump+0x444>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Primary SDRAM width)\n");
81100bb0:	00e04534 	movhi	r3,33044
81100bb4:	18facb04 	addi	r3,r3,-5332
81100bb8:	00a04534 	movhi	r2,33044
81100bbc:	10a81e04 	addi	r2,r2,-24456
81100bc0:	1009883a 	mov	r4,r2
81100bc4:	008005c4 	movi	r2,23
81100bc8:	100d883a 	mov	r6,r2
81100bcc:	200b883a 	mov	r5,r4
81100bd0:	1809883a 	mov	r4,r3
81100bd4:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81100bd8:	d0a04d17 	ldw	r2,-32460(gp)
81100bdc:	01604534 	movhi	r5,33044
81100be0:	297acb04 	addi	r5,r5,-5332
81100be4:	1009883a 	mov	r4,r2
81100be8:	110fe4c0 	call	8110fe4c <fprintf>
81100bec:	0001f406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 14) {
81100bf0:	e0bfbc17 	ldw	r2,-272(fp)
81100bf4:	10800398 	cmpnei	r2,r2,14
81100bf8:	1000101e 	bne	r2,zero,81100c3c <bDdr2EepromDump+0x490>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(ECC SDRAM width)\n");
81100bfc:	00e04534 	movhi	r3,33044
81100c00:	18facb04 	addi	r3,r3,-5332
81100c04:	00a04534 	movhi	r2,33044
81100c08:	10a82404 	addi	r2,r2,-24432
81100c0c:	1009883a 	mov	r4,r2
81100c10:	008004c4 	movi	r2,19
81100c14:	100d883a 	mov	r6,r2
81100c18:	200b883a 	mov	r5,r4
81100c1c:	1809883a 	mov	r4,r3
81100c20:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81100c24:	d0a04d17 	ldw	r2,-32460(gp)
81100c28:	01604534 	movhi	r5,33044
81100c2c:	297acb04 	addi	r5,r5,-5332
81100c30:	1009883a 	mov	r4,r2
81100c34:	110fe4c0 	call	8110fe4c <fprintf>
81100c38:	0001e106 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 17) {
81100c3c:	e0bfbc17 	ldw	r2,-272(fp)
81100c40:	10800458 	cmpnei	r2,r2,17
81100c44:	1000101e 	bne	r2,zero,81100c88 <bDdr2EepromDump+0x4dc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Banks per SDRAM device)\n");
81100c48:	00e04534 	movhi	r3,33044
81100c4c:	18facb04 	addi	r3,r3,-5332
81100c50:	00a04534 	movhi	r2,33044
81100c54:	10a82904 	addi	r2,r2,-24412
81100c58:	1009883a 	mov	r4,r2
81100c5c:	00800684 	movi	r2,26
81100c60:	100d883a 	mov	r6,r2
81100c64:	200b883a 	mov	r5,r4
81100c68:	1809883a 	mov	r4,r3
81100c6c:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81100c70:	d0a04d17 	ldw	r2,-32460(gp)
81100c74:	01604534 	movhi	r5,33044
81100c78:	297acb04 	addi	r5,r5,-5332
81100c7c:	1009883a 	mov	r4,r2
81100c80:	110fe4c0 	call	8110fe4c <fprintf>
81100c84:	0001ce06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 18) {
81100c88:	e0bfbc17 	ldw	r2,-272(fp)
81100c8c:	10800498 	cmpnei	r2,r2,18
81100c90:	1000101e 	bne	r2,zero,81100cd4 <bDdr2EepromDump+0x528>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100c94:	00e04534 	movhi	r3,33044
81100c98:	18facb04 	addi	r3,r3,-5332
81100c9c:	00a04534 	movhi	r2,33044
81100ca0:	10a83004 	addi	r2,r2,-24384
81100ca4:	1009883a 	mov	r4,r2
81100ca8:	00800d44 	movi	r2,53
81100cac:	100d883a 	mov	r6,r2
81100cb0:	200b883a 	mov	r5,r4
81100cb4:	1809883a 	mov	r4,r3
81100cb8:	1110e4c0 	call	81110e4c <memcpy>
						"(CAS lantencies supported[bitmap: x x 5 4 3 2 x x])\n");
				debug(fp, cDebugBuffer);
81100cbc:	d0a04d17 	ldw	r2,-32460(gp)
81100cc0:	01604534 	movhi	r5,33044
81100cc4:	297acb04 	addi	r5,r5,-5332
81100cc8:	1009883a 	mov	r4,r2
81100ccc:	110fe4c0 	call	8110fe4c <fprintf>
81100cd0:	0001bb06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 20) {
81100cd4:	e0bfbc17 	ldw	r2,-272(fp)
81100cd8:	10800518 	cmpnei	r2,r2,20
81100cdc:	1000101e 	bne	r2,zero,81100d20 <bDdr2EepromDump+0x574>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ce0:	00e04534 	movhi	r3,33044
81100ce4:	18facb04 	addi	r3,r3,-5332
81100ce8:	00a04534 	movhi	r2,33044
81100cec:	10a83e04 	addi	r2,r2,-24328
81100cf0:	1009883a 	mov	r4,r2
81100cf4:	00801204 	movi	r2,72
81100cf8:	100d883a 	mov	r6,r2
81100cfc:	200b883a 	mov	r5,r4
81100d00:	1809883a 	mov	r4,r3
81100d04:	1110e4c0 	call	81110e4c <memcpy>
						"(DIMM Type: x x Mini-UDIMM Mini-RDIMM Micro-DIMM SO-DIMM UDIMMM RDIMM)\n");
				debug(fp, cDebugBuffer);
81100d08:	d0a04d17 	ldw	r2,-32460(gp)
81100d0c:	01604534 	movhi	r5,33044
81100d10:	297acb04 	addi	r5,r5,-5332
81100d14:	1009883a 	mov	r4,r2
81100d18:	110fe4c0 	call	8110fe4c <fprintf>
81100d1c:	0001a806 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 22) {
81100d20:	e0bfbc17 	ldw	r2,-272(fp)
81100d24:	10800598 	cmpnei	r2,r2,22
81100d28:	1000101e 	bne	r2,zero,81100d6c <bDdr2EepromDump+0x5c0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Memory Chip feature bitmap)\n");
81100d2c:	00e04534 	movhi	r3,33044
81100d30:	18facb04 	addi	r3,r3,-5332
81100d34:	00a04534 	movhi	r2,33044
81100d38:	10a85004 	addi	r2,r2,-24256
81100d3c:	1009883a 	mov	r4,r2
81100d40:	00800784 	movi	r2,30
81100d44:	100d883a 	mov	r6,r2
81100d48:	200b883a 	mov	r5,r4
81100d4c:	1809883a 	mov	r4,r3
81100d50:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81100d54:	d0a04d17 	ldw	r2,-32460(gp)
81100d58:	01604534 	movhi	r5,33044
81100d5c:	297acb04 	addi	r5,r5,-5332
81100d60:	1009883a 	mov	r4,r2
81100d64:	110fe4c0 	call	8110fe4c <fprintf>
81100d68:	00019506 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 27) {
81100d6c:	e0bfbc17 	ldw	r2,-272(fp)
81100d70:	108006d8 	cmpnei	r2,r2,27
81100d74:	1000101e 	bne	r2,zero,81100db8 <bDdr2EepromDump+0x60c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100d78:	00e04534 	movhi	r3,33044
81100d7c:	18facb04 	addi	r3,r3,-5332
81100d80:	00a04534 	movhi	r2,33044
81100d84:	10a85804 	addi	r2,r2,-24224
81100d88:	1009883a 	mov	r4,r2
81100d8c:	00800a04 	movi	r2,40
81100d90:	100d883a 	mov	r6,r2
81100d94:	200b883a 	mov	r5,r4
81100d98:	1809883a 	mov	r4,r3
81100d9c:	1110e4c0 	call	81110e4c <memcpy>
						"(Minimun row precharge time[tRP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100da0:	d0a04d17 	ldw	r2,-32460(gp)
81100da4:	01604534 	movhi	r5,33044
81100da8:	297acb04 	addi	r5,r5,-5332
81100dac:	1009883a 	mov	r4,r2
81100db0:	110fe4c0 	call	8110fe4c <fprintf>
81100db4:	00018206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 28) {
81100db8:	e0bfbc17 	ldw	r2,-272(fp)
81100dbc:	10800718 	cmpnei	r2,r2,28
81100dc0:	1000101e 	bne	r2,zero,81100e04 <bDdr2EepromDump+0x658>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100dc4:	00e04534 	movhi	r3,33044
81100dc8:	18facb04 	addi	r3,r3,-5332
81100dcc:	00a04534 	movhi	r2,33044
81100dd0:	10a86204 	addi	r2,r2,-24184
81100dd4:	1009883a 	mov	r4,r2
81100dd8:	00800cc4 	movi	r2,51
81100ddc:	100d883a 	mov	r6,r2
81100de0:	200b883a 	mov	r5,r4
81100de4:	1809883a 	mov	r4,r3
81100de8:	1110e4c0 	call	81110e4c <memcpy>
						"(Minimun row active-row activce delay[tRRD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100dec:	d0a04d17 	ldw	r2,-32460(gp)
81100df0:	01604534 	movhi	r5,33044
81100df4:	297acb04 	addi	r5,r5,-5332
81100df8:	1009883a 	mov	r4,r2
81100dfc:	110fe4c0 	call	8110fe4c <fprintf>
81100e00:	00016f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 29) {
81100e04:	e0bfbc17 	ldw	r2,-272(fp)
81100e08:	10800758 	cmpnei	r2,r2,29
81100e0c:	1000101e 	bne	r2,zero,81100e50 <bDdr2EepromDump+0x6a4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e10:	00e04534 	movhi	r3,33044
81100e14:	18facb04 	addi	r3,r3,-5332
81100e18:	00a04534 	movhi	r2,33044
81100e1c:	10a86f04 	addi	r2,r2,-24132
81100e20:	1009883a 	mov	r4,r2
81100e24:	008009c4 	movi	r2,39
81100e28:	100d883a 	mov	r6,r2
81100e2c:	200b883a 	mov	r5,r4
81100e30:	1809883a 	mov	r4,r3
81100e34:	1110e4c0 	call	81110e4c <memcpy>
						"(Minimun RAS to CAS delay[tRCD;nsx4])\n");
				debug(fp, cDebugBuffer);
81100e38:	d0a04d17 	ldw	r2,-32460(gp)
81100e3c:	01604534 	movhi	r5,33044
81100e40:	297acb04 	addi	r5,r5,-5332
81100e44:	1009883a 	mov	r4,r2
81100e48:	110fe4c0 	call	8110fe4c <fprintf>
81100e4c:	00015c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 30) {
81100e50:	e0bfbc17 	ldw	r2,-272(fp)
81100e54:	10800798 	cmpnei	r2,r2,30
81100e58:	1000101e 	bne	r2,zero,81100e9c <bDdr2EepromDump+0x6f0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100e5c:	00e04534 	movhi	r3,33044
81100e60:	18facb04 	addi	r3,r3,-5332
81100e64:	00a04534 	movhi	r2,33044
81100e68:	10a87904 	addi	r2,r2,-24092
81100e6c:	1009883a 	mov	r4,r2
81100e70:	00800b04 	movi	r2,44
81100e74:	100d883a 	mov	r6,r2
81100e78:	200b883a 	mov	r5,r4
81100e7c:	1809883a 	mov	r4,r3
81100e80:	1110e4c0 	call	81110e4c <memcpy>
						"(Minimun acive to precharge time[tRAS;ns])\n");
				debug(fp, cDebugBuffer);
81100e84:	d0a04d17 	ldw	r2,-32460(gp)
81100e88:	01604534 	movhi	r5,33044
81100e8c:	297acb04 	addi	r5,r5,-5332
81100e90:	1009883a 	mov	r4,r2
81100e94:	110fe4c0 	call	8110fe4c <fprintf>
81100e98:	00014906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 31) {
81100e9c:	e0bfbc17 	ldw	r2,-272(fp)
81100ea0:	108007d8 	cmpnei	r2,r2,31
81100ea4:	1000101e 	bne	r2,zero,81100ee8 <bDdr2EepromDump+0x73c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ea8:	00e04534 	movhi	r3,33044
81100eac:	18facb04 	addi	r3,r3,-5332
81100eb0:	00a04534 	movhi	r2,33044
81100eb4:	10a88404 	addi	r2,r2,-24048
81100eb8:	1009883a 	mov	r4,r2
81100ebc:	008010c4 	movi	r2,67
81100ec0:	100d883a 	mov	r6,r2
81100ec4:	200b883a 	mov	r5,r4
81100ec8:	1809883a 	mov	r4,r3
81100ecc:	1110e4c0 	call	81110e4c <memcpy>
						"(Size of each rank[bitmap:512MB,256MB,128MB,16GB,8GB,4GB,2GB,1GB)\n");
				debug(fp, cDebugBuffer);
81100ed0:	d0a04d17 	ldw	r2,-32460(gp)
81100ed4:	01604534 	movhi	r5,33044
81100ed8:	297acb04 	addi	r5,r5,-5332
81100edc:	1009883a 	mov	r4,r2
81100ee0:	110fe4c0 	call	8110fe4c <fprintf>
81100ee4:	00013606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 36) {
81100ee8:	e0bfbc17 	ldw	r2,-272(fp)
81100eec:	10800918 	cmpnei	r2,r2,36
81100ef0:	1000101e 	bne	r2,zero,81100f34 <bDdr2EepromDump+0x788>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100ef4:	00e04534 	movhi	r3,33044
81100ef8:	18facb04 	addi	r3,r3,-5332
81100efc:	00a04534 	movhi	r2,33044
81100f00:	10a89504 	addi	r2,r2,-23980
81100f04:	1009883a 	mov	r4,r2
81100f08:	00800a84 	movi	r2,42
81100f0c:	100d883a 	mov	r6,r2
81100f10:	200b883a 	mov	r5,r4
81100f14:	1809883a 	mov	r4,r3
81100f18:	1110e4c0 	call	81110e4c <memcpy>
						"(Minimun write receovery time[tWR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f1c:	d0a04d17 	ldw	r2,-32460(gp)
81100f20:	01604534 	movhi	r5,33044
81100f24:	297acb04 	addi	r5,r5,-5332
81100f28:	1009883a 	mov	r4,r2
81100f2c:	110fe4c0 	call	8110fe4c <fprintf>
81100f30:	00012306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 37) {
81100f34:	e0bfbc17 	ldw	r2,-272(fp)
81100f38:	10800958 	cmpnei	r2,r2,37
81100f3c:	1000101e 	bne	r2,zero,81100f80 <bDdr2EepromDump+0x7d4>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f40:	00e04534 	movhi	r3,33044
81100f44:	18facb04 	addi	r3,r3,-5332
81100f48:	00a04534 	movhi	r2,33044
81100f4c:	10a8a004 	addi	r2,r2,-23936
81100f50:	1009883a 	mov	r4,r2
81100f54:	00800cc4 	movi	r2,51
81100f58:	100d883a 	mov	r6,r2
81100f5c:	200b883a 	mov	r5,r4
81100f60:	1809883a 	mov	r4,r3
81100f64:	1110e4c0 	call	81110e4c <memcpy>
						"(Internal write to read command delay[tWTR;nsx4])\n");
				debug(fp, cDebugBuffer);
81100f68:	d0a04d17 	ldw	r2,-32460(gp)
81100f6c:	01604534 	movhi	r5,33044
81100f70:	297acb04 	addi	r5,r5,-5332
81100f74:	1009883a 	mov	r4,r2
81100f78:	110fe4c0 	call	8110fe4c <fprintf>
81100f7c:	00011006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 38) {
81100f80:	e0bfbc17 	ldw	r2,-272(fp)
81100f84:	10800998 	cmpnei	r2,r2,38
81100f88:	1000101e 	bne	r2,zero,81100fcc <bDdr2EepromDump+0x820>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100f8c:	00e04534 	movhi	r3,33044
81100f90:	18facb04 	addi	r3,r3,-5332
81100f94:	00a04534 	movhi	r2,33044
81100f98:	10a8ad04 	addi	r2,r2,-23884
81100f9c:	1009883a 	mov	r4,r2
81100fa0:	00800dc4 	movi	r2,55
81100fa4:	100d883a 	mov	r6,r2
81100fa8:	200b883a 	mov	r5,r4
81100fac:	1809883a 	mov	r4,r3
81100fb0:	1110e4c0 	call	81110e4c <memcpy>
						"(Internal read to precharge command delay[tRTP;nsx4])\n");
				debug(fp, cDebugBuffer);
81100fb4:	d0a04d17 	ldw	r2,-32460(gp)
81100fb8:	01604534 	movhi	r5,33044
81100fbc:	297acb04 	addi	r5,r5,-5332
81100fc0:	1009883a 	mov	r4,r2
81100fc4:	110fe4c0 	call	8110fe4c <fprintf>
81100fc8:	0000fd06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 41) {
81100fcc:	e0bfbc17 	ldw	r2,-272(fp)
81100fd0:	10800a58 	cmpnei	r2,r2,41
81100fd4:	1000101e 	bne	r2,zero,81101018 <bDdr2EepromDump+0x86c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81100fd8:	00e04534 	movhi	r3,33044
81100fdc:	18facb04 	addi	r3,r3,-5332
81100fe0:	00a04534 	movhi	r2,33044
81100fe4:	10a8bb04 	addi	r2,r2,-23828
81100fe8:	1009883a 	mov	r4,r2
81100fec:	00800c84 	movi	r2,50
81100ff0:	100d883a 	mov	r6,r2
81100ff4:	200b883a 	mov	r5,r4
81100ff8:	1809883a 	mov	r4,r3
81100ffc:	1110e4c0 	call	81110e4c <memcpy>
						"(Minimun activce to active/refresh time[tRC;ns])\n");
				debug(fp, cDebugBuffer);
81101000:	d0a04d17 	ldw	r2,-32460(gp)
81101004:	01604534 	movhi	r5,33044
81101008:	297acb04 	addi	r5,r5,-5332
8110100c:	1009883a 	mov	r4,r2
81101010:	110fe4c0 	call	8110fe4c <fprintf>
81101014:	0000ea06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 42) {
81101018:	e0bfbc17 	ldw	r2,-272(fp)
8110101c:	10800a98 	cmpnei	r2,r2,42
81101020:	1000101e 	bne	r2,zero,81101064 <bDdr2EepromDump+0x8b8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101024:	00e04534 	movhi	r3,33044
81101028:	18facb04 	addi	r3,r3,-5332
8110102c:	00a04534 	movhi	r2,33044
81101030:	10a8c804 	addi	r2,r2,-23776
81101034:	1009883a 	mov	r4,r2
81101038:	00800cc4 	movi	r2,51
8110103c:	100d883a 	mov	r6,r2
81101040:	200b883a 	mov	r5,r4
81101044:	1809883a 	mov	r4,r3
81101048:	1110e4c0 	call	81110e4c <memcpy>
						"(Minimun refresh to active/refresh time[tRFC;ns])\n");
				debug(fp, cDebugBuffer);
8110104c:	d0a04d17 	ldw	r2,-32460(gp)
81101050:	01604534 	movhi	r5,33044
81101054:	297acb04 	addi	r5,r5,-5332
81101058:	1009883a 	mov	r4,r2
8110105c:	110fe4c0 	call	8110fe4c <fprintf>
81101060:	0000d706 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 62) {
81101064:	e0bfbc17 	ldw	r2,-272(fp)
81101068:	10800f98 	cmpnei	r2,r2,62
8110106c:	1000101e 	bne	r2,zero,811010b0 <bDdr2EepromDump+0x904>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(SPD Revision)\n");
81101070:	00e04534 	movhi	r3,33044
81101074:	18facb04 	addi	r3,r3,-5332
81101078:	00a04534 	movhi	r2,33044
8110107c:	10a8d504 	addi	r2,r2,-23724
81101080:	1009883a 	mov	r4,r2
81101084:	00800404 	movi	r2,16
81101088:	100d883a 	mov	r6,r2
8110108c:	200b883a 	mov	r5,r4
81101090:	1809883a 	mov	r4,r3
81101094:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81101098:	d0a04d17 	ldw	r2,-32460(gp)
8110109c:	01604534 	movhi	r5,33044
811010a0:	297acb04 	addi	r5,r5,-5332
811010a4:	1009883a 	mov	r4,r2
811010a8:	110fe4c0 	call	8110fe4c <fprintf>
811010ac:	0000c406 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 63) {
811010b0:	e0bfbc17 	ldw	r2,-272(fp)
811010b4:	10800fd8 	cmpnei	r2,r2,63
811010b8:	10001f1e 	bne	r2,zero,81101138 <bDdr2EepromDump+0x98c>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Checksum)\n");
811010bc:	00a04534 	movhi	r2,33044
811010c0:	10bacb04 	addi	r2,r2,-5332
811010c4:	00c00a04 	movi	r3,40
811010c8:	10c00005 	stb	r3,0(r2)
811010cc:	00c010c4 	movi	r3,67
811010d0:	10c00045 	stb	r3,1(r2)
811010d4:	00c01a04 	movi	r3,104
811010d8:	10c00085 	stb	r3,2(r2)
811010dc:	00c01944 	movi	r3,101
811010e0:	10c000c5 	stb	r3,3(r2)
811010e4:	00c018c4 	movi	r3,99
811010e8:	10c00105 	stb	r3,4(r2)
811010ec:	00c01ac4 	movi	r3,107
811010f0:	10c00145 	stb	r3,5(r2)
811010f4:	00c01cc4 	movi	r3,115
811010f8:	10c00185 	stb	r3,6(r2)
811010fc:	00c01d44 	movi	r3,117
81101100:	10c001c5 	stb	r3,7(r2)
81101104:	00c01b44 	movi	r3,109
81101108:	10c00205 	stb	r3,8(r2)
8110110c:	00c00a44 	movi	r3,41
81101110:	10c00245 	stb	r3,9(r2)
81101114:	00c00284 	movi	r3,10
81101118:	10c00285 	stb	r3,10(r2)
8110111c:	100002c5 	stb	zero,11(r2)
				debug(fp, cDebugBuffer);
81101120:	d0a04d17 	ldw	r2,-32460(gp)
81101124:	01604534 	movhi	r5,33044
81101128:	297acb04 	addi	r5,r5,-5332
8110112c:	1009883a 	mov	r4,r2
81101130:	110fe4c0 	call	8110fe4c <fprintf>
81101134:	0000a206 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 64) {
81101138:	e0bfbc17 	ldw	r2,-272(fp)
8110113c:	10801018 	cmpnei	r2,r2,64
81101140:	1000101e 	bne	r2,zero,81101184 <bDdr2EepromDump+0x9d8>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(64~71: Manufacturer JEDEC ID)\n");
81101144:	00e04534 	movhi	r3,33044
81101148:	18facb04 	addi	r3,r3,-5332
8110114c:	00a04534 	movhi	r2,33044
81101150:	10a8d904 	addi	r2,r2,-23708
81101154:	1009883a 	mov	r4,r2
81101158:	00800804 	movi	r2,32
8110115c:	100d883a 	mov	r6,r2
81101160:	200b883a 	mov	r5,r4
81101164:	1809883a 	mov	r4,r3
81101168:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
8110116c:	d0a04d17 	ldw	r2,-32460(gp)
81101170:	01604534 	movhi	r5,33044
81101174:	297acb04 	addi	r5,r5,-5332
81101178:	1009883a 	mov	r4,r2
8110117c:	110fe4c0 	call	8110fe4c <fprintf>
81101180:	00008f06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 72) {
81101184:	e0bfbc17 	ldw	r2,-272(fp)
81101188:	10801218 	cmpnei	r2,r2,72
8110118c:	1000101e 	bne	r2,zero,811011d0 <bDdr2EepromDump+0xa24>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101190:	00e04534 	movhi	r3,33044
81101194:	18facb04 	addi	r3,r3,-5332
81101198:	00a04534 	movhi	r2,33044
8110119c:	10a8e104 	addi	r2,r2,-23676
811011a0:	1009883a 	mov	r4,r2
811011a4:	00800dc4 	movi	r2,55
811011a8:	100d883a 	mov	r6,r2
811011ac:	200b883a 	mov	r5,r4
811011b0:	1809883a 	mov	r4,r3
811011b4:	1110e4c0 	call	81110e4c <memcpy>
						"(Module manufacturing location[Vendor-specific code])\n");
				debug(fp, cDebugBuffer);
811011b8:	d0a04d17 	ldw	r2,-32460(gp)
811011bc:	01604534 	movhi	r5,33044
811011c0:	297acb04 	addi	r5,r5,-5332
811011c4:	1009883a 	mov	r4,r2
811011c8:	110fe4c0 	call	8110fe4c <fprintf>
811011cc:	00007c06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 73) {
811011d0:	e0bfbc17 	ldw	r2,-272(fp)
811011d4:	10801258 	cmpnei	r2,r2,73
811011d8:	1000101e 	bne	r2,zero,8110121c <bDdr2EepromDump+0xa70>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(73~90: Moduloe part number)\n");
811011dc:	00e04534 	movhi	r3,33044
811011e0:	18facb04 	addi	r3,r3,-5332
811011e4:	00a04534 	movhi	r2,33044
811011e8:	10a8ef04 	addi	r2,r2,-23620
811011ec:	1009883a 	mov	r4,r2
811011f0:	00800784 	movi	r2,30
811011f4:	100d883a 	mov	r6,r2
811011f8:	200b883a 	mov	r5,r4
811011fc:	1809883a 	mov	r4,r3
81101200:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81101204:	d0a04d17 	ldw	r2,-32460(gp)
81101208:	01604534 	movhi	r5,33044
8110120c:	297acb04 	addi	r5,r5,-5332
81101210:	1009883a 	mov	r4,r2
81101214:	110fe4c0 	call	8110fe4c <fprintf>
81101218:	00006906 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 91) {
8110121c:	e0bfbc17 	ldw	r2,-272(fp)
81101220:	108016d8 	cmpnei	r2,r2,91
81101224:	1000101e 	bne	r2,zero,81101268 <bDdr2EepromDump+0xabc>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(91~92: Moduloe revision code)\n");
81101228:	00e04534 	movhi	r3,33044
8110122c:	18facb04 	addi	r3,r3,-5332
81101230:	00a04534 	movhi	r2,33044
81101234:	10a8f704 	addi	r2,r2,-23588
81101238:	1009883a 	mov	r4,r2
8110123c:	00800804 	movi	r2,32
81101240:	100d883a 	mov	r6,r2
81101244:	200b883a 	mov	r5,r4
81101248:	1809883a 	mov	r4,r3
8110124c:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81101250:	d0a04d17 	ldw	r2,-32460(gp)
81101254:	01604534 	movhi	r5,33044
81101258:	297acb04 	addi	r5,r5,-5332
8110125c:	1009883a 	mov	r4,r2
81101260:	110fe4c0 	call	8110fe4c <fprintf>
81101264:	00005606 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 93) {
81101268:	e0bfbc17 	ldw	r2,-272(fp)
8110126c:	10801758 	cmpnei	r2,r2,93
81101270:	1000101e 	bne	r2,zero,811012b4 <bDdr2EepromDump+0xb08>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101274:	00e04534 	movhi	r3,33044
81101278:	18facb04 	addi	r3,r3,-5332
8110127c:	00a04534 	movhi	r2,33044
81101280:	10a8ff04 	addi	r2,r2,-23556
81101284:	1009883a 	mov	r4,r2
81101288:	008009c4 	movi	r2,39
8110128c:	100d883a 	mov	r6,r2
81101290:	200b883a 	mov	r5,r4
81101294:	1809883a 	mov	r4,r3
81101298:	1110e4c0 	call	81110e4c <memcpy>
						"(Manufacture Years since 2000[0-255])\n");
				debug(fp, cDebugBuffer);
8110129c:	d0a04d17 	ldw	r2,-32460(gp)
811012a0:	01604534 	movhi	r5,33044
811012a4:	297acb04 	addi	r5,r5,-5332
811012a8:	1009883a 	mov	r4,r2
811012ac:	110fe4c0 	call	8110fe4c <fprintf>
811012b0:	00004306 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 94) {
811012b4:	e0bfbc17 	ldw	r2,-272(fp)
811012b8:	10801798 	cmpnei	r2,r2,94
811012bc:	1000101e 	bne	r2,zero,81101300 <bDdr2EepromDump+0xb54>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(Manufacture Weeks[1-52])\n");
811012c0:	00e04534 	movhi	r3,33044
811012c4:	18facb04 	addi	r3,r3,-5332
811012c8:	00a04534 	movhi	r2,33044
811012cc:	10a90904 	addi	r2,r2,-23516
811012d0:	1009883a 	mov	r4,r2
811012d4:	008006c4 	movi	r2,27
811012d8:	100d883a 	mov	r6,r2
811012dc:	200b883a 	mov	r5,r4
811012e0:	1809883a 	mov	r4,r3
811012e4:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
811012e8:	d0a04d17 	ldw	r2,-32460(gp)
811012ec:	01604534 	movhi	r5,33044
811012f0:	297acb04 	addi	r5,r5,-5332
811012f4:	1009883a 	mov	r4,r2
811012f8:	110fe4c0 	call	8110fe4c <fprintf>
811012fc:	00003006 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 95) {
81101300:	e0bfbc17 	ldw	r2,-272(fp)
81101304:	108017d8 	cmpnei	r2,r2,95
81101308:	1000101e 	bne	r2,zero,8110134c <bDdr2EepromDump+0xba0>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
8110130c:	00e04534 	movhi	r3,33044
81101310:	18facb04 	addi	r3,r3,-5332
81101314:	00a04534 	movhi	r2,33044
81101318:	10a91004 	addi	r2,r2,-23488
8110131c:	1009883a 	mov	r4,r2
81101320:	00800a04 	movi	r2,40
81101324:	100d883a 	mov	r6,r2
81101328:	200b883a 	mov	r5,r4
8110132c:	1809883a 	mov	r4,r3
81101330:	1110e4c0 	call	81110e4c <memcpy>
						"(95~98[4-bytes]: Module serial number)\n");
				debug(fp, cDebugBuffer);
81101334:	d0a04d17 	ldw	r2,-32460(gp)
81101338:	01604534 	movhi	r5,33044
8110133c:	297acb04 	addi	r5,r5,-5332
81101340:	1009883a 	mov	r4,r2
81101344:	110fe4c0 	call	8110fe4c <fprintf>
81101348:	00001d06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else if (iI == 99) {
8110134c:	e0bfbc17 	ldw	r2,-272(fp)
81101350:	108018d8 	cmpnei	r2,r2,99
81101354:	1000101e 	bne	r2,zero,81101398 <bDdr2EepromDump+0xbec>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "(99~128: Manufacturer-specific data)\n");
81101358:	00e04534 	movhi	r3,33044
8110135c:	18facb04 	addi	r3,r3,-5332
81101360:	00a04534 	movhi	r2,33044
81101364:	10a91a04 	addi	r2,r2,-23448
81101368:	1009883a 	mov	r4,r2
8110136c:	00800984 	movi	r2,38
81101370:	100d883a 	mov	r6,r2
81101374:	200b883a 	mov	r5,r4
81101378:	1809883a 	mov	r4,r3
8110137c:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
81101380:	d0a04d17 	ldw	r2,-32460(gp)
81101384:	01604534 	movhi	r5,33044
81101388:	297acb04 	addi	r5,r5,-5332
8110138c:	1009883a 	mov	r4,r2
81101390:	110fe4c0 	call	8110fe4c <fprintf>
81101394:	00000a06 	br	811013c0 <bDdr2EepromDump+0xc14>
#endif
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "\n");
81101398:	00a04534 	movhi	r2,33044
8110139c:	10bacb04 	addi	r2,r2,-5332
811013a0:	00c00284 	movi	r3,10
811013a4:	10c00005 	stb	r3,0(r2)
811013a8:	10000045 	stb	zero,1(r2)
				debug(fp, cDebugBuffer);
811013ac:	d0a04d17 	ldw	r2,-32460(gp)
811013b0:	01604534 	movhi	r5,33044
811013b4:	297acb04 	addi	r5,r5,-5332
811013b8:	1009883a 	mov	r4,r2
811013bc:	110fe4c0 	call	8110fe4c <fprintf>

	alt_u8 ucSZData[256];
	bSuccess = I2C_MultipleRead(uliI2cSclBase, uliI2cSdaBase, cucDeviceAddr,
			ucSZData, sizeof(ucSZData));
	if (bSuccess) {
		for (iI = 0; iI < 256 && bSuccess; iI++) {
811013c0:	e0bfbc17 	ldw	r2,-272(fp)
811013c4:	10800044 	addi	r2,r2,1
811013c8:	e0bfbc15 	stw	r2,-272(fp)
811013cc:	e0bfbc17 	ldw	r2,-272(fp)
811013d0:	10804008 	cmpgei	r2,r2,256
811013d4:	1000121e 	bne	r2,zero,81101420 <bDdr2EepromDump+0xc74>
811013d8:	e0bfbe17 	ldw	r2,-264(fp)
811013dc:	103d451e 	bne	r2,zero,811008f4 <__reset+0xfb0e08f4>
811013e0:	00000f06 	br	81101420 <bDdr2EepromDump+0xc74>
#endif
			}
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Failed to dump EEPROM\n");
811013e4:	00e04534 	movhi	r3,33044
811013e8:	18facb04 	addi	r3,r3,-5332
811013ec:	00a04534 	movhi	r2,33044
811013f0:	10a92404 	addi	r2,r2,-23408
811013f4:	1009883a 	mov	r4,r2
811013f8:	008005c4 	movi	r2,23
811013fc:	100d883a 	mov	r6,r2
81101400:	200b883a 	mov	r5,r4
81101404:	1809883a 	mov	r4,r3
81101408:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
8110140c:	d0a04d17 	ldw	r2,-32460(gp)
81101410:	01604534 	movhi	r5,33044
81101414:	297acb04 	addi	r5,r5,-5332
81101418:	1009883a 	mov	r4,r2
8110141c:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101420:	00a04534 	movhi	r2,33044
81101424:	10bacb04 	addi	r2,r2,-5332
81101428:	00c00284 	movi	r3,10
8110142c:	10c00005 	stb	r3,0(r2)
81101430:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101434:	d0a04d17 	ldw	r2,-32460(gp)
81101438:	01604534 	movhi	r5,33044
8110143c:	297acb04 	addi	r5,r5,-5332
81101440:	1009883a 	mov	r4,r2
81101444:	110fe4c0 	call	8110fe4c <fprintf>
#endif

	return bSuccess;
81101448:	e0bfbe17 	ldw	r2,-264(fp)
}
8110144c:	e037883a 	mov	sp,fp
81101450:	dfc00117 	ldw	ra,4(sp)
81101454:	df000017 	ldw	fp,0(sp)
81101458:	dec00204 	addi	sp,sp,8
8110145c:	f800283a 	ret

81101460 <bDdr2SwitchMemory>:

bool bDdr2SwitchMemory(alt_u8 ucMemoryId) {
81101460:	defffb04 	addi	sp,sp,-20
81101464:	de00012e 	bgeu	sp,et,8110146c <bDdr2SwitchMemory+0xc>
81101468:	003b68fa 	trap	3
8110146c:	dfc00415 	stw	ra,16(sp)
81101470:	df000315 	stw	fp,12(sp)
81101474:	df000304 	addi	fp,sp,12
81101478:	2005883a 	mov	r2,r4
8110147c:	e0bfff05 	stb	r2,-4(fp)

	bool bSuccess;
	alt_u32 *puliDdr2MemAddr = (alt_u32 *) DDR2_EXT_ADDR_CONTROL_BASE;
81101480:	00a04834 	movhi	r2,33056
81101484:	108c2204 	addi	r2,r2,12424
81101488:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = TRUE;
8110148c:	00800044 	movi	r2,1
81101490:	e0bffd15 	stw	r2,-12(fp)
	switch (ucMemoryId) {
81101494:	e0bfff03 	ldbu	r2,-4(fp)
81101498:	10c00060 	cmpeqi	r3,r2,1
8110149c:	1800031e 	bne	r3,zero,811014ac <bDdr2SwitchMemory+0x4c>
811014a0:	108000a0 	cmpeqi	r2,r2,2
811014a4:	1000041e 	bne	r2,zero,811014b8 <bDdr2SwitchMemory+0x58>
811014a8:	00000706 	br	811014c8 <bDdr2SwitchMemory+0x68>
	case DDR2_M1_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M1_MEMORY_WINDOWED_OFFSET;
811014ac:	e0bffe17 	ldw	r2,-8(fp)
811014b0:	10000015 	stw	zero,0(r2)
		break;
811014b4:	00001406 	br	81101508 <bDdr2SwitchMemory+0xa8>
	case DDR2_M2_ID:
		*(puliDdr2MemAddr) = (alt_u32) DDR2_M2_MEMORY_WINDOWED_OFFSET;
811014b8:	e0bffe17 	ldw	r2,-8(fp)
811014bc:	00e00034 	movhi	r3,32768
811014c0:	10c00015 	stw	r3,0(r2)
		break;
811014c4:	00001006 	br	81101508 <bDdr2SwitchMemory+0xa8>
	default:
		bSuccess = FALSE;
811014c8:	e03ffd15 	stw	zero,-12(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811014cc:	00e04534 	movhi	r3,33044
811014d0:	18facb04 	addi	r3,r3,-5332
811014d4:	00a04534 	movhi	r2,33044
811014d8:	10a92a04 	addi	r2,r2,-23384
811014dc:	1009883a 	mov	r4,r2
811014e0:	00800f04 	movi	r2,60
811014e4:	100d883a 	mov	r6,r2
811014e8:	200b883a 	mov	r5,r4
811014ec:	1809883a 	mov	r4,r3
811014f0:	1110e4c0 	call	81110e4c <memcpy>
				"DR2 Memory ID not identified!! Error switching memories!! \n");
		debug(fp, cDebugBuffer)
811014f4:	d0a04d17 	ldw	r2,-32460(gp)
811014f8:	01604534 	movhi	r5,33044
811014fc:	297acb04 	addi	r5,r5,-5332
81101500:	1009883a 	mov	r4,r2
81101504:	110fe4c0 	call	8110fe4c <fprintf>
		;
#endif
	}

	return bSuccess;
81101508:	e0bffd17 	ldw	r2,-12(fp)
}
8110150c:	e037883a 	mov	sp,fp
81101510:	dfc00117 	ldw	ra,4(sp)
81101514:	df000017 	ldw	fp,0(sp)
81101518:	dec00204 	addi	sp,sp,8
8110151c:	f800283a 	ret

81101520 <bDdr2MemoryWriteTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryWriteTest(alt_u8 ucMemoryId) {
81101520:	deffe204 	addi	sp,sp,-120
81101524:	de00012e 	bgeu	sp,et,8110152c <bDdr2MemoryWriteTest+0xc>
81101528:	003b68fa 	trap	3
8110152c:	dfc01d15 	stw	ra,116(sp)
81101530:	df001c15 	stw	fp,112(sp)
81101534:	dc401b15 	stw	r17,108(sp)
81101538:	dc001a15 	stw	r16,104(sp)
8110153c:	df001c04 	addi	fp,sp,112
81101540:	2005883a 	mov	r2,r4
81101544:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Write Test =====\n");
81101548:	00e04534 	movhi	r3,33044
8110154c:	18facb04 	addi	r3,r3,-5332
81101550:	00a04534 	movhi	r2,33044
81101554:	10a93904 	addi	r2,r2,-23324
81101558:	1009883a 	mov	r4,r2
8110155c:	00800a04 	movi	r2,40
81101560:	100d883a 	mov	r6,r2
81101564:	200b883a 	mov	r5,r4
81101568:	1809883a 	mov	r4,r3
8110156c:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81101570:	d0a04d17 	ldw	r2,-32460(gp)
81101574:	01604534 	movhi	r5,33044
81101578:	297acb04 	addi	r5,r5,-5332
8110157c:	1009883a 	mov	r4,r2
81101580:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101584:	00800044 	movi	r2,1
81101588:	e0bfed15 	stw	r2,-76(fp)
	switch (ucMemoryId) {
8110158c:	e0bffd03 	ldbu	r2,-12(fp)
81101590:	10c00060 	cmpeqi	r3,r2,1
81101594:	1800031e 	bne	r3,zero,811015a4 <bDdr2MemoryWriteTest+0x84>
81101598:	108000a0 	cmpeqi	r2,r2,2
8110159c:	1000081e 	bne	r2,zero,811015c0 <bDdr2MemoryWriteTest+0xa0>
811015a0:	00000e06 	br	811015dc <bDdr2MemoryWriteTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015a4:	e0bffd03 	ldbu	r2,-12(fp)
811015a8:	1009883a 	mov	r4,r2
811015ac:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015b0:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811015b4:	00a00034 	movhi	r2,32768
811015b8:	e0bfe615 	stw	r2,-104(fp)
		break;
811015bc:	00001906 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811015c0:	e0bffd03 	ldbu	r2,-12(fp)
811015c4:	1009883a 	mov	r4,r2
811015c8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811015cc:	e03fe515 	stw	zero,-108(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811015d0:	00a00034 	movhi	r2,32768
811015d4:	e0bfe615 	stw	r2,-104(fp)
		break;
811015d8:	00001206 	br	81101624 <bDdr2MemoryWriteTest+0x104>
	default:
		bSuccess = FALSE;
811015dc:	e03fed15 	stw	zero,-76(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811015e0:	00e04534 	movhi	r3,33044
811015e4:	18facb04 	addi	r3,r3,-5332
811015e8:	00a04534 	movhi	r2,33044
811015ec:	10a74a04 	addi	r2,r2,-25304
811015f0:	1009883a 	mov	r4,r2
811015f4:	00800bc4 	movi	r2,47
811015f8:	100d883a 	mov	r6,r2
811015fc:	200b883a 	mov	r5,r4
81101600:	1809883a 	mov	r4,r3
81101604:	1110e4c0 	call	81110e4c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101608:	d0a04d17 	ldw	r2,-32460(gp)
8110160c:	01604534 	movhi	r5,33044
81101610:	297acb04 	addi	r5,r5,-5332
81101614:	1009883a 	mov	r4,r2
81101618:	110fe4c0 	call	8110fe4c <fprintf>
		;
#endif
		return bSuccess;
8110161c:	e0bfed17 	ldw	r2,-76(fp)
81101620:	00011806 	br	81101a84 <bDdr2MemoryWriteTest+0x564>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81101624:	e0bfe617 	ldw	r2,-104(fp)
81101628:	1004d53a 	srli	r2,r2,20
8110162c:	100d883a 	mov	r6,r2
81101630:	01604534 	movhi	r5,33044
81101634:	29694304 	addi	r5,r5,-23284
81101638:	01204534 	movhi	r4,33044
8110163c:	213acb04 	addi	r4,r4,-5332
81101640:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
81101644:	d0a04d17 	ldw	r2,-32460(gp)
81101648:	01604534 	movhi	r5,33044
8110164c:	297acb04 	addi	r5,r5,-5332
81101650:	1009883a 	mov	r4,r2
81101654:	110fe4c0 	call	8110fe4c <fprintf>

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes;

	int iNItemNum, iNPos;
	const int ciMyDataSize = sizeof(TMyData);
81101658:	00800104 	movi	r2,4
8110165c:	e0bfee15 	stw	r2,-72(fp)
	int iNProgressIndex = 0;
81101660:	e03fec15 	stw	zero,-80(fp)
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101664:	e03fef15 	stw	zero,-68(fp)

	for (iI = 0; iI < 10; iI++) {
81101668:	e03fe715 	stw	zero,-100(fp)
8110166c:	00001506 	br	811016c4 <bDdr2MemoryWriteTest+0x1a4>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101670:	e0ffe617 	ldw	r3,-104(fp)
81101674:	00b33374 	movhi	r2,52429
81101678:	10b33344 	addi	r2,r2,-13107
8110167c:	1888383a 	mulxuu	r4,r3,r2
81101680:	1885383a 	mul	r2,r3,r2
81101684:	1021883a 	mov	r16,r2
81101688:	2023883a 	mov	r17,r4
8110168c:	8804d0fa 	srli	r2,r17,3
81101690:	e0ffe717 	ldw	r3,-100(fp)
81101694:	18c00044 	addi	r3,r3,1
81101698:	10c7383a 	mul	r3,r2,r3
8110169c:	e0bfe717 	ldw	r2,-100(fp)
811016a0:	1085883a 	add	r2,r2,r2
811016a4:	1085883a 	add	r2,r2,r2
811016a8:	e13fe504 	addi	r4,fp,-108
811016ac:	2085883a 	add	r2,r4,r2
811016b0:	10800e04 	addi	r2,r2,56
811016b4:	10c00015 	stw	r3,0(r2)
	int iNProgressIndex = 0;
	alt_u32 uliInitValue;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
811016b8:	e0bfe717 	ldw	r2,-100(fp)
811016bc:	10800044 	addi	r2,r2,1
811016c0:	e0bfe715 	stw	r2,-100(fp)
811016c4:	e0bfe717 	ldw	r2,-100(fp)
811016c8:	10800290 	cmplti	r2,r2,10
811016cc:	103fe81e 	bne	r2,zero,81101670 <__reset+0xfb0e1670>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811016d0:	d0a06b17 	ldw	r2,-32340(gp)
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
811016d4:	e0bff015 	stw	r2,-64(fp)
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
811016d8:	00804004 	movi	r2,256
811016dc:	e0bfea15 	stw	r2,-88(fp)
	for (iI = 0; iI < iNItemNum; iI++) {
811016e0:	e03fe715 	stw	zero,-100(fp)
811016e4:	00001e06 	br	81101760 <bDdr2MemoryWriteTest+0x240>
		if (iI == 0) {
811016e8:	e0bfe717 	ldw	r2,-100(fp)
811016ec:	1000091e 	bne	r2,zero,81101714 <bDdr2MemoryWriteTest+0x1f4>
			xSZData[iI] = uliInitValue;
811016f0:	00a04534 	movhi	r2,33044
811016f4:	10bb0b04 	addi	r2,r2,-5076
811016f8:	e0ffe717 	ldw	r3,-100(fp)
811016fc:	18c7883a 	add	r3,r3,r3
81101700:	18c7883a 	add	r3,r3,r3
81101704:	10c5883a 	add	r2,r2,r3
81101708:	e0fff017 	ldw	r3,-64(fp)
8110170c:	10c00015 	stw	r3,0(r2)
81101710:	00001006 	br	81101754 <bDdr2MemoryWriteTest+0x234>
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
81101714:	e0bfe717 	ldw	r2,-100(fp)
81101718:	10ffffc4 	addi	r3,r2,-1
8110171c:	00a04534 	movhi	r2,33044
81101720:	10bb0b04 	addi	r2,r2,-5076
81101724:	18c7883a 	add	r3,r3,r3
81101728:	18c7883a 	add	r3,r3,r3
8110172c:	10c5883a 	add	r2,r2,r3
81101730:	10800017 	ldw	r2,0(r2)
81101734:	11000364 	muli	r4,r2,13
81101738:	00a04534 	movhi	r2,33044
8110173c:	10bb0b04 	addi	r2,r2,-5076
81101740:	e0ffe717 	ldw	r3,-100(fp)
81101744:	18c7883a 	add	r3,r3,r3
81101748:	18c7883a 	add	r3,r3,r3
8110174c:	10c5883a 	add	r2,r2,r3
81101750:	11000015 	stw	r4,0(r2)
	for (iI = 0; iI < 10; iI++) {
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}
	uliInitValue = alt_nticks();
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
	for (iI = 0; iI < iNItemNum; iI++) {
81101754:	e0bfe717 	ldw	r2,-100(fp)
81101758:	10800044 	addi	r2,r2,1
8110175c:	e0bfe715 	stw	r2,-100(fp)
81101760:	e0ffe717 	ldw	r3,-100(fp)
81101764:	e0bfea17 	ldw	r2,-88(fp)
81101768:	18bfdf16 	blt	r3,r2,811016e8 <__reset+0xfb0e16e8>
			xSZData[iI] = uliInitValue;
		} else {
			xSZData[iI] = xSZData[iI - 1] * 13;
		}
	}
	xSZData[iNItemNum - 1] = 0xAAAAAAAA;
8110176c:	e0bfea17 	ldw	r2,-88(fp)
81101770:	10ffffc4 	addi	r3,r2,-1
81101774:	00a04534 	movhi	r2,33044
81101778:	10bb0b04 	addi	r2,r2,-5076
8110177c:	18c7883a 	add	r3,r3,r3
81101780:	18c7883a 	add	r3,r3,r3
81101784:	10c7883a 	add	r3,r2,r3
81101788:	00aaaaf4 	movhi	r2,43691
8110178c:	10aaaa84 	addi	r2,r2,-21846
81101790:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 2] = 0x55555555;
81101794:	e0bfea17 	ldw	r2,-88(fp)
81101798:	10ffff84 	addi	r3,r2,-2
8110179c:	00a04534 	movhi	r2,33044
811017a0:	10bb0b04 	addi	r2,r2,-5076
811017a4:	18c7883a 	add	r3,r3,r3
811017a8:	18c7883a 	add	r3,r3,r3
811017ac:	10c7883a 	add	r3,r2,r3
811017b0:	00955574 	movhi	r2,21845
811017b4:	10955544 	addi	r2,r2,21845
811017b8:	18800015 	stw	r2,0(r3)
	xSZData[iNItemNum - 3] = 0x00000000;
811017bc:	e0bfea17 	ldw	r2,-88(fp)
811017c0:	10ffff44 	addi	r3,r2,-3
811017c4:	00a04534 	movhi	r2,33044
811017c8:	10bb0b04 	addi	r2,r2,-5076
811017cc:	18c7883a 	add	r3,r3,r3
811017d0:	18c7883a 	add	r3,r3,r3
811017d4:	10c5883a 	add	r2,r2,r3
811017d8:	10000015 	stw	zero,0(r2)
	xSZData[iNItemNum - 4] = 0xFFFFFFFF;
811017dc:	e0bfea17 	ldw	r2,-88(fp)
811017e0:	10ffff04 	addi	r3,r2,-4
811017e4:	00a04534 	movhi	r2,33044
811017e8:	10bb0b04 	addi	r2,r2,-5076
811017ec:	18c7883a 	add	r3,r3,r3
811017f0:	18c7883a 	add	r3,r3,r3
811017f4:	10c5883a 	add	r2,r2,r3
811017f8:	00ffffc4 	movi	r3,-1
811017fc:	10c00015 	stw	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing data...\n");
81101800:	00e04534 	movhi	r3,33044
81101804:	18facb04 	addi	r3,r3,-5332
81101808:	00a04534 	movhi	r2,33044
8110180c:	10a94904 	addi	r2,r2,-23260
81101810:	1009883a 	mov	r4,r2
81101814:	00800444 	movi	r2,17
81101818:	100d883a 	mov	r6,r2
8110181c:	200b883a 	mov	r5,r4
81101820:	1809883a 	mov	r4,r3
81101824:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81101828:	d0a04d17 	ldw	r2,-32460(gp)
8110182c:	01604534 	movhi	r5,33044
81101830:	297acb04 	addi	r5,r5,-5332
81101834:	1009883a 	mov	r4,r2
81101838:	110fe4c0 	call	8110fe4c <fprintf>
8110183c:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101840:	e0bff115 	stw	r2,-60(fp)
	pxDes = (TMyData *) uliDdr2Base;
81101844:	e0bfe517 	ldw	r2,-108(fp)
81101848:	e0bfe915 	stw	r2,-92(fp)
	iNAccessLen = sizeof(xSZData);
8110184c:	00810004 	movi	r2,1024
81101850:	e0bfe815 	stw	r2,-96(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101854:	e0ffe817 	ldw	r3,-96(fp)
81101858:	e0bfee17 	ldw	r2,-72(fp)
8110185c:	1885283a 	div	r2,r3,r2
81101860:	e0bfea15 	stw	r2,-88(fp)
	iNPos = 0;
81101864:	e03feb15 	stw	zero,-84(fp)
	while (iNPos < uliByteLen) {
81101868:	00003a06 	br	81101954 <bDdr2MemoryWriteTest+0x434>
		iNRemainedLen = uliByteLen - iNPos;
8110186c:	e0bfeb17 	ldw	r2,-84(fp)
81101870:	e0ffe617 	ldw	r3,-104(fp)
81101874:	1885c83a 	sub	r2,r3,r2
81101878:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
8110187c:	e0bfe817 	ldw	r2,-96(fp)
81101880:	e0fff217 	ldw	r3,-56(fp)
81101884:	1880060e 	bge	r3,r2,811018a0 <bDdr2MemoryWriteTest+0x380>
			iNAccessLen = iNRemainedLen;
81101888:	e0bff217 	ldw	r2,-56(fp)
8110188c:	e0bfe815 	stw	r2,-96(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101890:	e0ffe817 	ldw	r3,-96(fp)
81101894:	e0bfee17 	ldw	r2,-72(fp)
81101898:	1885283a 	div	r2,r3,r2
8110189c:	e0bfea15 	stw	r2,-88(fp)
		}
		memcpy(pxDes, xSZData, iNAccessLen);
811018a0:	e0bfe817 	ldw	r2,-96(fp)
811018a4:	100d883a 	mov	r6,r2
811018a8:	01604534 	movhi	r5,33044
811018ac:	297b0b04 	addi	r5,r5,-5076
811018b0:	e13fe917 	ldw	r4,-92(fp)
811018b4:	1110e4c0 	call	81110e4c <memcpy>
		pxDes += iNItemNum;
811018b8:	e0bfea17 	ldw	r2,-88(fp)
811018bc:	1085883a 	add	r2,r2,r2
811018c0:	1085883a 	add	r2,r2,r2
811018c4:	1007883a 	mov	r3,r2
811018c8:	e0bfe917 	ldw	r2,-92(fp)
811018cc:	10c5883a 	add	r2,r2,r3
811018d0:	e0bfe915 	stw	r2,-92(fp)
		iNPos += iNAccessLen;
811018d4:	e0ffeb17 	ldw	r3,-84(fp)
811018d8:	e0bfe817 	ldw	r2,-96(fp)
811018dc:	1885883a 	add	r2,r3,r2
811018e0:	e0bfeb15 	stw	r2,-84(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
811018e4:	e0bfec17 	ldw	r2,-80(fp)
811018e8:	10800288 	cmpgei	r2,r2,10
811018ec:	1000191e 	bne	r2,zero,81101954 <bDdr2MemoryWriteTest+0x434>
811018f0:	e0bfec17 	ldw	r2,-80(fp)
811018f4:	1085883a 	add	r2,r2,r2
811018f8:	1085883a 	add	r2,r2,r2
811018fc:	e0ffe504 	addi	r3,fp,-108
81101900:	1885883a 	add	r2,r3,r2
81101904:	10800e04 	addi	r2,r2,56
81101908:	10800017 	ldw	r2,0(r2)
8110190c:	e0ffeb17 	ldw	r3,-84(fp)
81101910:	18801036 	bltu	r3,r2,81101954 <bDdr2MemoryWriteTest+0x434>
			iNProgressIndex++;
81101914:	e0bfec17 	ldw	r2,-80(fp)
81101918:	10800044 	addi	r2,r2,1
8110191c:	e0bfec15 	stw	r2,-80(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101920:	e0bfec17 	ldw	r2,-80(fp)
81101924:	108002a4 	muli	r2,r2,10
81101928:	100d883a 	mov	r6,r2
8110192c:	01604534 	movhi	r5,33044
81101930:	29694e04 	addi	r5,r5,-23240
81101934:	01204534 	movhi	r4,33044
81101938:	213acb04 	addi	r4,r4,-5332
8110193c:	11115b40 	call	811115b4 <sprintf>
			debug(fp, cDebugBuffer);
81101940:	d0a04d17 	ldw	r2,-32460(gp)
81101944:	01604534 	movhi	r5,33044
81101948:	297acb04 	addi	r5,r5,-5332
8110194c:	1009883a 	mov	r4,r2
81101950:	110fe4c0 	call	8110fe4c <fprintf>
	iTimeStart = alt_nticks();
	pxDes = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (iNPos < uliByteLen) {
81101954:	e0ffeb17 	ldw	r3,-84(fp)
81101958:	e0bfe617 	ldw	r2,-104(fp)
8110195c:	18bfc336 	bltu	r3,r2,8110186c <__reset+0xfb0e186c>
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
			debug(fp, cDebugBuffer);
#endif
		}
	}
	alt_dcache_flush_all();
81101960:	11256900 	call	81125690 <alt_dcache_flush_all>
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101964:	00a04534 	movhi	r2,33044
81101968:	10bacb04 	addi	r2,r2,-5332
8110196c:	00c00284 	movi	r3,10
81101970:	10c00005 	stb	r3,0(r2)
81101974:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101978:	d0a04d17 	ldw	r2,-32460(gp)
8110197c:	01604534 	movhi	r5,33044
81101980:	297acb04 	addi	r5,r5,-5332
81101984:	1009883a 	mov	r4,r2
81101988:	110fe4c0 	call	8110fe4c <fprintf>
8110198c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101990:	e0bff117 	ldw	r2,-60(fp)
81101994:	1885c83a 	sub	r2,r3,r2
81101998:	e0bfef15 	stw	r2,-68(fp)
	if (bSuccess) {
8110199c:	e0bfed17 	ldw	r2,-76(fp)
811019a0:	10001e26 	beq	r2,zero,81101a1c <bDdr2MemoryWriteTest+0x4fc>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
811019a4:	e13fef17 	ldw	r4,-68(fp)
811019a8:	110f0880 	call	8110f088 <__floatsisf>
811019ac:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811019b0:	d0a06a17 	ldw	r2,-32344(gp)
811019b4:	1009883a 	mov	r4,r2
811019b8:	110f1b40 	call	8110f1b4 <__floatunsisf>
811019bc:	1007883a 	mov	r3,r2
811019c0:	180b883a 	mov	r5,r3
811019c4:	8009883a 	mov	r4,r16
811019c8:	110e83c0 	call	8110e83c <__divsf3>
811019cc:	1007883a 	mov	r3,r2
811019d0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811019d4:	1009883a 	mov	r4,r2
811019d8:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811019dc:	1009883a 	mov	r4,r2
811019e0:	180b883a 	mov	r5,r3
811019e4:	d9400015 	stw	r5,0(sp)
811019e8:	200f883a 	mov	r7,r4
811019ec:	e1bfe617 	ldw	r6,-104(fp)
811019f0:	01604534 	movhi	r5,33044
811019f4:	29695004 	addi	r5,r5,-23232
811019f8:	01204534 	movhi	r4,33044
811019fc:	213acb04 	addi	r4,r4,-5332
81101a00:	11115b40 	call	811115b4 <sprintf>
				"DDR2 write test pass, size=%lu bytes, %.3f sec\n", uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101a04:	d0a04d17 	ldw	r2,-32460(gp)
81101a08:	01604534 	movhi	r5,33044
81101a0c:	297acb04 	addi	r5,r5,-5332
81101a10:	1009883a 	mov	r4,r2
81101a14:	110fe4c0 	call	8110fe4c <fprintf>
81101a18:	00000f06 	br	81101a58 <bDdr2MemoryWriteTest+0x538>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81101a1c:	00e04534 	movhi	r3,33044
81101a20:	18facb04 	addi	r3,r3,-5332
81101a24:	00a04534 	movhi	r2,33044
81101a28:	10a95c04 	addi	r2,r2,-23184
81101a2c:	1009883a 	mov	r4,r2
81101a30:	00800584 	movi	r2,22
81101a34:	100d883a 	mov	r6,r2
81101a38:	200b883a 	mov	r5,r4
81101a3c:	1809883a 	mov	r4,r3
81101a40:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
81101a44:	d0a04d17 	ldw	r2,-32460(gp)
81101a48:	01604534 	movhi	r5,33044
81101a4c:	297acb04 	addi	r5,r5,-5332
81101a50:	1009883a 	mov	r4,r2
81101a54:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101a58:	00a04534 	movhi	r2,33044
81101a5c:	10bacb04 	addi	r2,r2,-5332
81101a60:	00c00284 	movi	r3,10
81101a64:	10c00005 	stb	r3,0(r2)
81101a68:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101a6c:	d0a04d17 	ldw	r2,-32460(gp)
81101a70:	01604534 	movhi	r5,33044
81101a74:	297acb04 	addi	r5,r5,-5332
81101a78:	1009883a 	mov	r4,r2
81101a7c:	110fe4c0 	call	8110fe4c <fprintf>
#endif

	return bSuccess;
81101a80:	e0bfed17 	ldw	r2,-76(fp)
}
81101a84:	e6fffe04 	addi	sp,fp,-8
81101a88:	dfc00317 	ldw	ra,12(sp)
81101a8c:	df000217 	ldw	fp,8(sp)
81101a90:	dc400117 	ldw	r17,4(sp)
81101a94:	dc000017 	ldw	r16,0(sp)
81101a98:	dec00404 	addi	sp,sp,16
81101a9c:	f800283a 	ret

81101aa0 <bDdr2MemoryReadTest>:
 * @param [in] MemoryId  ID da mémoria a ser testada
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryReadTest(alt_u8 ucMemoryId) {
81101aa0:	deffe204 	addi	sp,sp,-120
81101aa4:	de00012e 	bgeu	sp,et,81101aac <bDdr2MemoryReadTest+0xc>
81101aa8:	003b68fa 	trap	3
81101aac:	dfc01d15 	stw	ra,116(sp)
81101ab0:	df001c15 	stw	fp,112(sp)
81101ab4:	dc401b15 	stw	r17,108(sp)
81101ab8:	dc001a15 	stw	r16,104(sp)
81101abc:	df001c04 	addi	fp,sp,112
81101ac0:	2005883a 	mov	r2,r4
81101ac4:	e0bffd05 	stb	r2,-12(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Read Test =====\n");
81101ac8:	00e04534 	movhi	r3,33044
81101acc:	18facb04 	addi	r3,r3,-5332
81101ad0:	00a04534 	movhi	r2,33044
81101ad4:	10a96204 	addi	r2,r2,-23160
81101ad8:	1009883a 	mov	r4,r2
81101adc:	008009c4 	movi	r2,39
81101ae0:	100d883a 	mov	r6,r2
81101ae4:	200b883a 	mov	r5,r4
81101ae8:	1809883a 	mov	r4,r3
81101aec:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81101af0:	d0a04d17 	ldw	r2,-32460(gp)
81101af4:	01604534 	movhi	r5,33044
81101af8:	297acb04 	addi	r5,r5,-5332
81101afc:	1009883a 	mov	r4,r2
81101b00:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81101b04:	00800044 	movi	r2,1
81101b08:	e0bfe515 	stw	r2,-108(fp)
	switch (ucMemoryId) {
81101b0c:	e0bffd03 	ldbu	r2,-12(fp)
81101b10:	10c00060 	cmpeqi	r3,r2,1
81101b14:	1800031e 	bne	r3,zero,81101b24 <bDdr2MemoryReadTest+0x84>
81101b18:	108000a0 	cmpeqi	r2,r2,2
81101b1c:	1000081e 	bne	r2,zero,81101b40 <bDdr2MemoryReadTest+0xa0>
81101b20:	00000e06 	br	81101b5c <bDdr2MemoryReadTest+0xbc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b24:	e0bffd03 	ldbu	r2,-12(fp)
81101b28:	1009883a 	mov	r4,r2
81101b2c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b30:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81101b34:	00a00034 	movhi	r2,32768
81101b38:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b3c:	00001906 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81101b40:	e0bffd03 	ldbu	r2,-12(fp)
81101b44:	1009883a 	mov	r4,r2
81101b48:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81101b4c:	e03fe615 	stw	zero,-104(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81101b50:	00a00034 	movhi	r2,32768
81101b54:	e0bfe715 	stw	r2,-100(fp)
		break;
81101b58:	00001206 	br	81101ba4 <bDdr2MemoryReadTest+0x104>
	default:
		bSuccess = FALSE;
81101b5c:	e03fe515 	stw	zero,-108(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81101b60:	00e04534 	movhi	r3,33044
81101b64:	18facb04 	addi	r3,r3,-5332
81101b68:	00a04534 	movhi	r2,33044
81101b6c:	10a74a04 	addi	r2,r2,-25304
81101b70:	1009883a 	mov	r4,r2
81101b74:	00800bc4 	movi	r2,47
81101b78:	100d883a 	mov	r6,r2
81101b7c:	200b883a 	mov	r5,r4
81101b80:	1809883a 	mov	r4,r3
81101b84:	1110e4c0 	call	81110e4c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81101b88:	d0a04d17 	ldw	r2,-32460(gp)
81101b8c:	01604534 	movhi	r5,33044
81101b90:	297acb04 	addi	r5,r5,-5332
81101b94:	1009883a 	mov	r4,r2
81101b98:	110fe4c0 	call	8110fe4c <fprintf>
		;
#endif
		return bSuccess;
81101b9c:	e0bfe517 	ldw	r2,-108(fp)
81101ba0:	0000fc06 	br	81101f94 <bDdr2MemoryReadTest+0x4f4>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %lu MBytes\n", uliByteLen / 1024 / 1024);
81101ba4:	e0bfe717 	ldw	r2,-100(fp)
81101ba8:	1004d53a 	srli	r2,r2,20
81101bac:	100d883a 	mov	r6,r2
81101bb0:	01604534 	movhi	r5,33044
81101bb4:	29696c04 	addi	r5,r5,-23120
81101bb8:	01204534 	movhi	r4,33044
81101bbc:	213acb04 	addi	r4,r4,-5332
81101bc0:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
81101bc4:	d0a04d17 	ldw	r2,-32460(gp)
81101bc8:	01604534 	movhi	r5,33044
81101bcc:	297acb04 	addi	r5,r5,-5332
81101bd0:	1009883a 	mov	r4,r2
81101bd4:	110fe4c0 	call	8110fe4c <fprintf>
#endif

	int iI, iNRemainedLen, iNAccessLen;
	TMyData *pxDes, *pxSrc;
	int iNItemNum, iNPos;
	iNItemNum = sizeof(xSZData) / sizeof(xSZData[0]);
81101bd8:	00804004 	movi	r2,256
81101bdc:	e0bfec15 	stw	r2,-80(fp)
	const int ciMyDataSize = sizeof(TMyData);
81101be0:	00800104 	movi	r2,4
81101be4:	e0bfef15 	stw	r2,-68(fp)
	iNAccessLen = iNItemNum * ciMyDataSize;
81101be8:	e0ffec17 	ldw	r3,-80(fp)
81101bec:	e0bfef17 	ldw	r2,-68(fp)
81101bf0:	1885383a 	mul	r2,r3,r2
81101bf4:	e0bfe915 	stw	r2,-92(fp)
	int iNProgressIndex = 0;
81101bf8:	e03fee15 	stw	zero,-72(fp)
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;
81101bfc:	e03ff015 	stw	zero,-64(fp)

	for (iI = 0; iI < 10; iI++) {
81101c00:	e03fe815 	stw	zero,-96(fp)
81101c04:	00001506 	br	81101c5c <bDdr2MemoryReadTest+0x1bc>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
81101c08:	e0ffe717 	ldw	r3,-100(fp)
81101c0c:	00b33374 	movhi	r2,52429
81101c10:	10b33344 	addi	r2,r2,-13107
81101c14:	1888383a 	mulxuu	r4,r3,r2
81101c18:	1885383a 	mul	r2,r3,r2
81101c1c:	1021883a 	mov	r16,r2
81101c20:	2023883a 	mov	r17,r4
81101c24:	8804d0fa 	srli	r2,r17,3
81101c28:	e0ffe817 	ldw	r3,-96(fp)
81101c2c:	18c00044 	addi	r3,r3,1
81101c30:	10c7383a 	mul	r3,r2,r3
81101c34:	e0bfe817 	ldw	r2,-96(fp)
81101c38:	1085883a 	add	r2,r2,r2
81101c3c:	1085883a 	add	r2,r2,r2
81101c40:	e13fe504 	addi	r4,fp,-108
81101c44:	2085883a 	add	r2,r4,r2
81101c48:	10800e04 	addi	r2,r2,56
81101c4c:	10c00015 	stw	r3,0(r2)
	iNAccessLen = iNItemNum * ciMyDataSize;
	int iNProgressIndex = 0;
	alt_u32 uliSZProgress[10];
	int iTimeStart, iTimeElapsed = 0;

	for (iI = 0; iI < 10; iI++) {
81101c50:	e0bfe817 	ldw	r2,-96(fp)
81101c54:	10800044 	addi	r2,r2,1
81101c58:	e0bfe815 	stw	r2,-96(fp)
81101c5c:	e0bfe817 	ldw	r2,-96(fp)
81101c60:	10800290 	cmplti	r2,r2,10
81101c64:	103fe81e 	bne	r2,zero,81101c08 <__reset+0xfb0e1c08>
		uliSZProgress[iI] = uliByteLen / 10 * (iI + 1);
	}

	iNProgressIndex = 0;
81101c68:	e03fee15 	stw	zero,-72(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading/Verifying Data...\n");
81101c6c:	00e04534 	movhi	r3,33044
81101c70:	18facb04 	addi	r3,r3,-5332
81101c74:	00a04534 	movhi	r2,33044
81101c78:	10a97204 	addi	r2,r2,-23096
81101c7c:	1009883a 	mov	r4,r2
81101c80:	008006c4 	movi	r2,27
81101c84:	100d883a 	mov	r6,r2
81101c88:	200b883a 	mov	r5,r4
81101c8c:	1809883a 	mov	r4,r3
81101c90:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81101c94:	d0a04d17 	ldw	r2,-32460(gp)
81101c98:	01604534 	movhi	r5,33044
81101c9c:	297acb04 	addi	r5,r5,-5332
81101ca0:	1009883a 	mov	r4,r2
81101ca4:	110fe4c0 	call	8110fe4c <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81101ca8:	d0a06b17 	ldw	r2,-32340(gp)
#endif
	iTimeStart = alt_nticks();
81101cac:	e0bff115 	stw	r2,-60(fp)

	pxSrc = (TMyData *) uliDdr2Base;
81101cb0:	e0bfe617 	ldw	r2,-104(fp)
81101cb4:	e0bfeb15 	stw	r2,-84(fp)
	iNAccessLen = sizeof(xSZData);
81101cb8:	00810004 	movi	r2,1024
81101cbc:	e0bfe915 	stw	r2,-92(fp)
	iNItemNum = iNAccessLen / ciMyDataSize;
81101cc0:	e0ffe917 	ldw	r3,-92(fp)
81101cc4:	e0bfef17 	ldw	r2,-68(fp)
81101cc8:	1885283a 	div	r2,r3,r2
81101ccc:	e0bfec15 	stw	r2,-80(fp)
	iNPos = 0;
81101cd0:	e03fed15 	stw	zero,-76(fp)
	while (bSuccess && iNPos < uliByteLen) {
81101cd4:	00006206 	br	81101e60 <bDdr2MemoryReadTest+0x3c0>
		iNRemainedLen = uliByteLen - iNPos;
81101cd8:	e0bfed17 	ldw	r2,-76(fp)
81101cdc:	e0ffe717 	ldw	r3,-100(fp)
81101ce0:	1885c83a 	sub	r2,r3,r2
81101ce4:	e0bff215 	stw	r2,-56(fp)
		if (iNAccessLen > iNRemainedLen) {
81101ce8:	e0bfe917 	ldw	r2,-92(fp)
81101cec:	e0fff217 	ldw	r3,-56(fp)
81101cf0:	1880060e 	bge	r3,r2,81101d0c <bDdr2MemoryReadTest+0x26c>
			iNAccessLen = iNRemainedLen;
81101cf4:	e0bff217 	ldw	r2,-56(fp)
81101cf8:	e0bfe915 	stw	r2,-92(fp)
			iNItemNum = iNAccessLen / ciMyDataSize;
81101cfc:	e0ffe917 	ldw	r3,-92(fp)
81101d00:	e0bfef17 	ldw	r2,-68(fp)
81101d04:	1885283a 	div	r2,r3,r2
81101d08:	e0bfec15 	stw	r2,-80(fp)
		}
		pxDes = xSZData;
81101d0c:	00a04534 	movhi	r2,33044
81101d10:	10bb0b04 	addi	r2,r2,-5076
81101d14:	e0bfea15 	stw	r2,-88(fp)
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101d18:	e03fe815 	stw	zero,-96(fp)
81101d1c:	00002b06 	br	81101dcc <bDdr2MemoryReadTest+0x32c>
			if (*pxSrc++ != *pxDes++) {
81101d20:	e0bfeb17 	ldw	r2,-84(fp)
81101d24:	10c00104 	addi	r3,r2,4
81101d28:	e0ffeb15 	stw	r3,-84(fp)
81101d2c:	10c00017 	ldw	r3,0(r2)
81101d30:	e0bfea17 	ldw	r2,-88(fp)
81101d34:	11000104 	addi	r4,r2,4
81101d38:	e13fea15 	stw	r4,-88(fp)
81101d3c:	10800017 	ldw	r2,0(r2)
81101d40:	18801f26 	beq	r3,r2,81101dc0 <bDdr2MemoryReadTest+0x320>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d44:	e0bfeb17 	ldw	r2,-84(fp)
81101d48:	10bfff04 	addi	r2,r2,-4
81101d4c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d50:	1009883a 	mov	r4,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
81101d54:	00a04534 	movhi	r2,33044
81101d58:	10bb0b04 	addi	r2,r2,-5076
81101d5c:	e0ffe817 	ldw	r3,-96(fp)
81101d60:	18c7883a 	add	r3,r3,r3
81101d64:	18c7883a 	add	r3,r3,r3
81101d68:	10c5883a 	add	r2,r2,r3
81101d6c:	10800017 	ldw	r2,0(r2)
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d70:	100b883a 	mov	r5,r2
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
81101d74:	e0ffed17 	ldw	r3,-76(fp)
81101d78:	e0bfef17 	ldw	r2,-68(fp)
81101d7c:	1887283a 	div	r3,r3,r2
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
			if (*pxSrc++ != *pxDes++) {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81101d80:	e0bfe817 	ldw	r2,-96(fp)
81101d84:	1885883a 	add	r2,r3,r2
81101d88:	d8800015 	stw	r2,0(sp)
81101d8c:	280f883a 	mov	r7,r5
81101d90:	200d883a 	mov	r6,r4
81101d94:	01604534 	movhi	r5,33044
81101d98:	29697904 	addi	r5,r5,-23068
81101d9c:	01204534 	movhi	r4,33044
81101da0:	213acb04 	addi	r4,r4,-5332
81101da4:	11115b40 	call	811115b4 <sprintf>
						"verify ng, read=%08Xh, expected=%08Xh, WordIndex=%Xh\n",
						(int) *(pxSrc - 1), (int) xSZData[iI],
						(iNPos / ciMyDataSize) + iI);
				debug(fp, cDebugBuffer);
81101da8:	d0a04d17 	ldw	r2,-32460(gp)
81101dac:	01604534 	movhi	r5,33044
81101db0:	297acb04 	addi	r5,r5,-5332
81101db4:	1009883a 	mov	r4,r2
81101db8:	110fe4c0 	call	8110fe4c <fprintf>
#endif
				bSuccess = FALSE;
81101dbc:	e03fe515 	stw	zero,-108(fp)
		if (iNAccessLen > iNRemainedLen) {
			iNAccessLen = iNRemainedLen;
			iNItemNum = iNAccessLen / ciMyDataSize;
		}
		pxDes = xSZData;
		for (iI = 0; iI < iNItemNum && bSuccess; iI++) {
81101dc0:	e0bfe817 	ldw	r2,-96(fp)
81101dc4:	10800044 	addi	r2,r2,1
81101dc8:	e0bfe815 	stw	r2,-96(fp)
81101dcc:	e0ffe817 	ldw	r3,-96(fp)
81101dd0:	e0bfec17 	ldw	r2,-80(fp)
81101dd4:	1880020e 	bge	r3,r2,81101de0 <bDdr2MemoryReadTest+0x340>
81101dd8:	e0bfe517 	ldw	r2,-108(fp)
81101ddc:	103fd01e 	bne	r2,zero,81101d20 <__reset+0xfb0e1d20>
				debug(fp, cDebugBuffer);
#endif
				bSuccess = FALSE;
			}
		}
		iNPos += iNAccessLen;
81101de0:	e0ffed17 	ldw	r3,-76(fp)
81101de4:	e0bfe917 	ldw	r2,-92(fp)
81101de8:	1885883a 	add	r2,r3,r2
81101dec:	e0bfed15 	stw	r2,-76(fp)
		if (iNProgressIndex <= 9 && iNPos >= uliSZProgress[iNProgressIndex]) {
81101df0:	e0bfee17 	ldw	r2,-72(fp)
81101df4:	10800288 	cmpgei	r2,r2,10
81101df8:	1000191e 	bne	r2,zero,81101e60 <bDdr2MemoryReadTest+0x3c0>
81101dfc:	e0bfee17 	ldw	r2,-72(fp)
81101e00:	1085883a 	add	r2,r2,r2
81101e04:	1085883a 	add	r2,r2,r2
81101e08:	e0ffe504 	addi	r3,fp,-108
81101e0c:	1885883a 	add	r2,r3,r2
81101e10:	10800e04 	addi	r2,r2,56
81101e14:	10800017 	ldw	r2,0(r2)
81101e18:	e0ffed17 	ldw	r3,-76(fp)
81101e1c:	18801036 	bltu	r3,r2,81101e60 <bDdr2MemoryReadTest+0x3c0>
			iNProgressIndex++;
81101e20:	e0bfee17 	ldw	r2,-72(fp)
81101e24:	10800044 	addi	r2,r2,1
81101e28:	e0bfee15 	stw	r2,-72(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "%02d%% ", iNProgressIndex * 10);
81101e2c:	e0bfee17 	ldw	r2,-72(fp)
81101e30:	108002a4 	muli	r2,r2,10
81101e34:	100d883a 	mov	r6,r2
81101e38:	01604534 	movhi	r5,33044
81101e3c:	29694e04 	addi	r5,r5,-23240
81101e40:	01204534 	movhi	r4,33044
81101e44:	213acb04 	addi	r4,r4,-5332
81101e48:	11115b40 	call	811115b4 <sprintf>
			debug(fp, cDebugBuffer);
81101e4c:	d0a04d17 	ldw	r2,-32460(gp)
81101e50:	01604534 	movhi	r5,33044
81101e54:	297acb04 	addi	r5,r5,-5332
81101e58:	1009883a 	mov	r4,r2
81101e5c:	110fe4c0 	call	8110fe4c <fprintf>

	pxSrc = (TMyData *) uliDdr2Base;
	iNAccessLen = sizeof(xSZData);
	iNItemNum = iNAccessLen / ciMyDataSize;
	iNPos = 0;
	while (bSuccess && iNPos < uliByteLen) {
81101e60:	e0bfe517 	ldw	r2,-108(fp)
81101e64:	10000326 	beq	r2,zero,81101e74 <bDdr2MemoryReadTest+0x3d4>
81101e68:	e0ffed17 	ldw	r3,-76(fp)
81101e6c:	e0bfe717 	ldw	r2,-100(fp)
81101e70:	18bf9936 	bltu	r3,r2,81101cd8 <__reset+0xfb0e1cd8>
			debug(fp, cDebugBuffer);
#endif
		}
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101e74:	00a04534 	movhi	r2,33044
81101e78:	10bacb04 	addi	r2,r2,-5332
81101e7c:	00c00284 	movi	r3,10
81101e80:	10c00005 	stb	r3,0(r2)
81101e84:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101e88:	d0a04d17 	ldw	r2,-32460(gp)
81101e8c:	01604534 	movhi	r5,33044
81101e90:	297acb04 	addi	r5,r5,-5332
81101e94:	1009883a 	mov	r4,r2
81101e98:	110fe4c0 	call	8110fe4c <fprintf>
81101e9c:	d0e06b17 	ldw	r3,-32340(gp)
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
81101ea0:	e0bff117 	ldw	r2,-60(fp)
81101ea4:	1885c83a 	sub	r2,r3,r2
81101ea8:	e0bff015 	stw	r2,-64(fp)
	if (bSuccess) {
81101eac:	e0bfe517 	ldw	r2,-108(fp)
81101eb0:	10001e26 	beq	r2,zero,81101f2c <bDdr2MemoryReadTest+0x48c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
81101eb4:	e13ff017 	ldw	r4,-64(fp)
81101eb8:	110f0880 	call	8110f088 <__floatsisf>
81101ebc:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81101ec0:	d0a06a17 	ldw	r2,-32344(gp)
81101ec4:	1009883a 	mov	r4,r2
81101ec8:	110f1b40 	call	8110f1b4 <__floatunsisf>
81101ecc:	1007883a 	mov	r3,r2
81101ed0:	180b883a 	mov	r5,r3
81101ed4:	8009883a 	mov	r4,r16
81101ed8:	110e83c0 	call	8110e83c <__divsf3>
81101edc:	1007883a 	mov	r3,r2
81101ee0:	1805883a 	mov	r2,r3
#endif

	iTimeElapsed = alt_nticks() - iTimeStart;
	if (bSuccess) {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test pass, size=%ld bytes, %.3f sec\n",
81101ee4:	1009883a 	mov	r4,r2
81101ee8:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81101eec:	1009883a 	mov	r4,r2
81101ef0:	180b883a 	mov	r5,r3
81101ef4:	d9400015 	stw	r5,0(sp)
81101ef8:	200f883a 	mov	r7,r4
81101efc:	e1bfe717 	ldw	r6,-100(fp)
81101f00:	01604534 	movhi	r5,33044
81101f04:	29698704 	addi	r5,r5,-23012
81101f08:	01204534 	movhi	r4,33044
81101f0c:	213acb04 	addi	r4,r4,-5332
81101f10:	11115b40 	call	811115b4 <sprintf>
				uliByteLen,
				(float) iTimeElapsed / (float) alt_ticks_per_second());
		debug(fp, cDebugBuffer);
81101f14:	d0a04d17 	ldw	r2,-32460(gp)
81101f18:	01604534 	movhi	r5,33044
81101f1c:	297acb04 	addi	r5,r5,-5332
81101f20:	1009883a 	mov	r4,r2
81101f24:	110fe4c0 	call	8110fe4c <fprintf>
81101f28:	00000f06 	br	81101f68 <bDdr2MemoryReadTest+0x4c8>
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81101f2c:	00e04534 	movhi	r3,33044
81101f30:	18facb04 	addi	r3,r3,-5332
81101f34:	00a04534 	movhi	r2,33044
81101f38:	10a99304 	addi	r2,r2,-22964
81101f3c:	1009883a 	mov	r4,r2
81101f40:	00800544 	movi	r2,21
81101f44:	100d883a 	mov	r6,r2
81101f48:	200b883a 	mov	r5,r4
81101f4c:	1809883a 	mov	r4,r3
81101f50:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
81101f54:	d0a04d17 	ldw	r2,-32460(gp)
81101f58:	01604534 	movhi	r5,33044
81101f5c:	297acb04 	addi	r5,r5,-5332
81101f60:	1009883a 	mov	r4,r2
81101f64:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
81101f68:	00a04534 	movhi	r2,33044
81101f6c:	10bacb04 	addi	r2,r2,-5332
81101f70:	00c00284 	movi	r3,10
81101f74:	10c00005 	stb	r3,0(r2)
81101f78:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81101f7c:	d0a04d17 	ldw	r2,-32460(gp)
81101f80:	01604534 	movhi	r5,33044
81101f84:	297acb04 	addi	r5,r5,-5332
81101f88:	1009883a 	mov	r4,r2
81101f8c:	110fe4c0 	call	8110fe4c <fprintf>
#endif

	return bSuccess;
81101f90:	e0bfe517 	ldw	r2,-108(fp)
}
81101f94:	e6fffe04 	addi	sp,fp,-8
81101f98:	dfc00317 	ldw	ra,12(sp)
81101f9c:	df000217 	ldw	fp,8(sp)
81101fa0:	dc400117 	ldw	r17,4(sp)
81101fa4:	dc000017 	ldw	r16,0(sp)
81101fa8:	dec00404 	addi	sp,sp,16
81101fac:	f800283a 	ret

81101fb0 <bDdr2MemoryRandomWriteTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomWriteTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81101fb0:	deffec04 	addi	sp,sp,-80
81101fb4:	de00012e 	bgeu	sp,et,81101fbc <bDdr2MemoryRandomWriteTest+0xc>
81101fb8:	003b68fa 	trap	3
81101fbc:	dfc01315 	stw	ra,76(sp)
81101fc0:	df001215 	stw	fp,72(sp)
81101fc4:	dcc01115 	stw	r19,68(sp)
81101fc8:	dc801015 	stw	r18,64(sp)
81101fcc:	dc400f15 	stw	r17,60(sp)
81101fd0:	dc000e15 	stw	r16,56(sp)
81101fd4:	df001204 	addi	fp,sp,72
81101fd8:	2005883a 	mov	r2,r4
81101fdc:	e17ffa15 	stw	r5,-24(fp)
81101fe0:	e1bffb15 	stw	r6,-20(fp)
81101fe4:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Write Test =====\n");
81101fe8:	00e04534 	movhi	r3,33044
81101fec:	18facb04 	addi	r3,r3,-5332
81101ff0:	00a04534 	movhi	r2,33044
81101ff4:	10a99904 	addi	r2,r2,-22940
81101ff8:	1009883a 	mov	r4,r2
81101ffc:	00800bc4 	movi	r2,47
81102000:	100d883a 	mov	r6,r2
81102004:	200b883a 	mov	r5,r4
81102008:	1809883a 	mov	r4,r3
8110200c:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81102010:	d0a04d17 	ldw	r2,-32460(gp)
81102014:	01604534 	movhi	r5,33044
81102018:	297acb04 	addi	r5,r5,-5332
8110201c:	1009883a 	mov	r4,r2
81102020:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102024:	00800044 	movi	r2,1
81102028:	e0bff415 	stw	r2,-48(fp)
	switch (ucMemoryId) {
8110202c:	e0bff903 	ldbu	r2,-28(fp)
81102030:	10c00060 	cmpeqi	r3,r2,1
81102034:	1800031e 	bne	r3,zero,81102044 <bDdr2MemoryRandomWriteTest+0x94>
81102038:	108000a0 	cmpeqi	r2,r2,2
8110203c:	1000081e 	bne	r2,zero,81102060 <bDdr2MemoryRandomWriteTest+0xb0>
81102040:	00000e06 	br	8110207c <bDdr2MemoryRandomWriteTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102044:	e0bff903 	ldbu	r2,-28(fp)
81102048:	1009883a 	mov	r4,r2
8110204c:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
81102050:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
81102054:	00a00034 	movhi	r2,32768
81102058:	e0bff015 	stw	r2,-64(fp)
		break;
8110205c:	00001906 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
81102060:	e0bff903 	ldbu	r2,-28(fp)
81102064:	1009883a 	mov	r4,r2
81102068:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
8110206c:	e03fef15 	stw	zero,-68(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
81102070:	00a00034 	movhi	r2,32768
81102074:	e0bff015 	stw	r2,-64(fp)
		break;
81102078:	00001206 	br	811020c4 <bDdr2MemoryRandomWriteTest+0x114>
	default:
		bSuccess = FALSE;
8110207c:	e03ff415 	stw	zero,-48(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
81102080:	00e04534 	movhi	r3,33044
81102084:	18facb04 	addi	r3,r3,-5332
81102088:	00a04534 	movhi	r2,33044
8110208c:	10a74a04 	addi	r2,r2,-25304
81102090:	1009883a 	mov	r4,r2
81102094:	00800bc4 	movi	r2,47
81102098:	100d883a 	mov	r6,r2
8110209c:	200b883a 	mov	r5,r4
811020a0:	1809883a 	mov	r4,r3
811020a4:	1110e4c0 	call	81110e4c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
811020a8:	d0a04d17 	ldw	r2,-32460(gp)
811020ac:	01604534 	movhi	r5,33044
811020b0:	297acb04 	addi	r5,r5,-5332
811020b4:	1009883a 	mov	r4,r2
811020b8:	110fe4c0 	call	8110fe4c <fprintf>
		;
#endif
		return bSuccess;
811020bc:	e0bff417 	ldw	r2,-48(fp)
811020c0:	0000ce06 	br	811023fc <bDdr2MemoryRandomWriteTest+0x44c>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
811020c4:	e0bff017 	ldw	r2,-64(fp)
811020c8:	1004d53a 	srli	r2,r2,20
811020cc:	100d883a 	mov	r6,r2
811020d0:	01604534 	movhi	r5,33044
811020d4:	29694304 	addi	r5,r5,-23284
811020d8:	01204534 	movhi	r4,33044
811020dc:	213acb04 	addi	r4,r4,-5332
811020e0:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
811020e4:	d0a04d17 	ldw	r2,-32460(gp)
811020e8:	01604534 	movhi	r5,33044
811020ec:	297acb04 	addi	r5,r5,-5332
811020f0:	1009883a 	mov	r4,r2
811020f4:	110fe4c0 	call	8110fe4c <fprintf>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
811020f8:	d0a06b17 	ldw	r2,-32340(gp)
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliInitialState = alt_nticks();
811020fc:	d0a03615 	stw	r2,-32552(gp)
	uliCurrentState = uliInitialState;
81102100:	d0a03617 	ldw	r2,-32552(gp)
81102104:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102108:	e0ffef17 	ldw	r3,-68(fp)
8110210c:	e0bff017 	ldw	r2,-64(fp)
81102110:	1885883a 	add	r2,r3,r2
81102114:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102118:	e0fff017 	ldw	r3,-64(fp)
8110211c:	00b33374 	movhi	r2,52429
81102120:	10b33344 	addi	r2,r2,-13107
81102124:	1888383a 	mulxuu	r4,r3,r2
81102128:	1885383a 	mul	r2,r3,r2
8110212c:	1025883a 	mov	r18,r2
81102130:	2027883a 	mov	r19,r4
81102134:	9806d13a 	srli	r3,r19,4
81102138:	e0bfef17 	ldw	r2,-68(fp)
8110213c:	1885883a 	add	r2,r3,r2
81102140:	e0bff215 	stw	r2,-56(fp)
	ucPercentage = 5;
81102144:	00800144 	movi	r2,5
81102148:	e0bff305 	stb	r2,-52(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Writing to memory...\n");
8110214c:	00e04534 	movhi	r3,33044
81102150:	18facb04 	addi	r3,r3,-5332
81102154:	00a04534 	movhi	r2,33044
81102158:	10a9a504 	addi	r2,r2,-22892
8110215c:	1009883a 	mov	r4,r2
81102160:	00800584 	movi	r2,22
81102164:	100d883a 	mov	r6,r2
81102168:	200b883a 	mov	r5,r4
8110216c:	1809883a 	mov	r4,r3
81102170:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81102174:	d0a04d17 	ldw	r2,-32460(gp)
81102178:	01604534 	movhi	r5,33044
8110217c:	297acb04 	addi	r5,r5,-5332
81102180:	1009883a 	mov	r4,r2
81102184:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
81102188:	e0bffa17 	ldw	r2,-24(fp)
8110218c:	10800058 	cmpnei	r2,r2,1
81102190:	10000a1e 	bne	r2,zero,811021bc <bDdr2MemoryRandomWriteTest+0x20c>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
81102194:	01604534 	movhi	r5,33044
81102198:	2969ab04 	addi	r5,r5,-22868
8110219c:	01204534 	movhi	r4,33044
811021a0:	213acb04 	addi	r4,r4,-5332
811021a4:	11115b40 	call	811115b4 <sprintf>
		debug(fp, cDebugBuffer);
811021a8:	d0a04d17 	ldw	r2,-32460(gp)
811021ac:	01604534 	movhi	r5,33044
811021b0:	297acb04 	addi	r5,r5,-5332
811021b4:	1009883a 	mov	r4,r2
811021b8:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
	int TimeStart, TimeElapsed = 0;
811021bc:	e03ff615 	stw	zero,-40(fp)
811021c0:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
811021c4:	e0bff715 	stw	r2,-36(fp)
	for (puliDestination = (alt_u32*) uliDdr2Base;
811021c8:	e0bfef17 	ldw	r2,-68(fp)
811021cc:	e0bff115 	stw	r2,-60(fp)
811021d0:	00002c06 	br	81102284 <bDdr2MemoryRandomWriteTest+0x2d4>
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
811021d4:	e0bff804 	addi	r2,fp,-32
811021d8:	1009883a 	mov	r4,r2
811021dc:	11028bc0 	call	811028bc <uliXorshift32>
811021e0:	1007883a 	mov	r3,r2
811021e4:	e0bff117 	ldw	r2,-60(fp)
811021e8:	10c00015 	stw	r3,0(r2)
		if ((bVerbose == DDR2_VERBOSE)
				& ((alt_u32) puliDestination > uliNextMilestone)) {
811021ec:	e0bffa17 	ldw	r2,-24(fp)
811021f0:	10800060 	cmpeqi	r2,r2,1
811021f4:	1009883a 	mov	r4,r2
811021f8:	e0bff117 	ldw	r2,-60(fp)
811021fc:	e0fff217 	ldw	r3,-56(fp)
81102200:	1885803a 	cmpltu	r2,r3,r2
81102204:	2084703a 	and	r2,r4,r2
	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
		*puliDestination = uliXorshift32(&uliCurrentState);
		if ((bVerbose == DDR2_VERBOSE)
81102208:	10803fcc 	andi	r2,r2,255
8110220c:	10001a26 	beq	r2,zero,81102278 <bDdr2MemoryRandomWriteTest+0x2c8>
				& ((alt_u32) puliDestination > uliNextMilestone)) {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
81102210:	e0bff303 	ldbu	r2,-52(fp)
81102214:	100d883a 	mov	r6,r2
81102218:	01604534 	movhi	r5,33044
8110221c:	2969ad04 	addi	r5,r5,-22860
81102220:	01204534 	movhi	r4,33044
81102224:	213acb04 	addi	r4,r4,-5332
81102228:	11115b40 	call	811115b4 <sprintf>
			debug(fp, cDebugBuffer);
8110222c:	d0a04d17 	ldw	r2,-32460(gp)
81102230:	01604534 	movhi	r5,33044
81102234:	297acb04 	addi	r5,r5,-5332
81102238:	1009883a 	mov	r4,r2
8110223c:	110fe4c0 	call	8110fe4c <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
81102240:	e0fff017 	ldw	r3,-64(fp)
81102244:	00b33374 	movhi	r2,52429
81102248:	10b33344 	addi	r2,r2,-13107
8110224c:	1888383a 	mulxuu	r4,r3,r2
81102250:	1885383a 	mul	r2,r3,r2
81102254:	1021883a 	mov	r16,r2
81102258:	2023883a 	mov	r17,r4
8110225c:	8804d13a 	srli	r2,r17,4
81102260:	e0fff217 	ldw	r3,-56(fp)
81102264:	1885883a 	add	r2,r3,r2
81102268:	e0bff215 	stw	r2,-56(fp)
			ucPercentage += 5;
8110226c:	e0bff303 	ldbu	r2,-52(fp)
81102270:	10800144 	addi	r2,r2,5
81102274:	e0bff305 	stb	r2,-52(fp)
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
			puliDestination++) {
81102278:	e0bff117 	ldw	r2,-60(fp)
8110227c:	10800104 	addi	r2,r2,4
81102280:	e0bff115 	stw	r2,-60(fp)
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
			(alt_u32) puliDestination < uliMemoryEndAddress;
81102284:	e0fff117 	ldw	r3,-60(fp)
#endif
	}
	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliDestination = (alt_u32*) uliDdr2Base;
81102288:	e0bff517 	ldw	r2,-44(fp)
8110228c:	18bfd136 	bltu	r3,r2,811021d4 <__reset+0xfb0e21d4>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	alt_dcache_flush_all();
81102290:	11256900 	call	81125690 <alt_dcache_flush_all>
	if (bVerbose == DDR2_VERBOSE) {
81102294:	e0bffa17 	ldw	r2,-24(fp)
81102298:	10800058 	cmpnei	r2,r2,1
8110229c:	10000a1e 	bne	r2,zero,811022c8 <bDdr2MemoryRandomWriteTest+0x318>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
811022a0:	01604534 	movhi	r5,33044
811022a4:	2969b004 	addi	r5,r5,-22848
811022a8:	01204534 	movhi	r4,33044
811022ac:	213acb04 	addi	r4,r4,-5332
811022b0:	11115b40 	call	811115b4 <sprintf>
		debug(fp, cDebugBuffer);
811022b4:	d0a04d17 	ldw	r2,-32460(gp)
811022b8:	01604534 	movhi	r5,33044
811022bc:	297acb04 	addi	r5,r5,-5332
811022c0:	1009883a 	mov	r4,r2
811022c4:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}

	if (bSuccess) {
811022c8:	e0bff417 	ldw	r2,-48(fp)
811022cc:	10003126 	beq	r2,zero,81102394 <bDdr2MemoryRandomWriteTest+0x3e4>
		if (bTime == TRUE) {
811022d0:	e0bffb17 	ldw	r2,-20(fp)
811022d4:	10800058 	cmpnei	r2,r2,1
811022d8:	1000221e 	bne	r2,zero,81102364 <bDdr2MemoryRandomWriteTest+0x3b4>
811022dc:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
811022e0:	e0bff717 	ldw	r2,-36(fp)
811022e4:	1885c83a 	sub	r2,r3,r2
811022e8:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
811022ec:	e13ff617 	ldw	r4,-40(fp)
811022f0:	110f0880 	call	8110f088 <__floatsisf>
811022f4:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
811022f8:	d0a06a17 	ldw	r2,-32344(gp)
811022fc:	1009883a 	mov	r4,r2
81102300:	110f1b40 	call	8110f1b4 <__floatunsisf>
81102304:	1007883a 	mov	r3,r2
81102308:	180b883a 	mov	r5,r3
8110230c:	8009883a 	mov	r4,r16
81102310:	110e83c0 	call	8110e83c <__divsf3>
81102314:	1007883a 	mov	r3,r2
81102318:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
8110231c:	1009883a 	mov	r4,r2
81102320:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81102324:	1009883a 	mov	r4,r2
81102328:	180b883a 	mov	r5,r3
8110232c:	d9400015 	stw	r5,0(sp)
81102330:	200f883a 	mov	r7,r4
81102334:	e1bff017 	ldw	r6,-64(fp)
81102338:	01604534 	movhi	r5,33044
8110233c:	2969b304 	addi	r5,r5,-22836
81102340:	01204534 	movhi	r4,33044
81102344:	213acb04 	addi	r4,r4,-5332
81102348:	11115b40 	call	811115b4 <sprintf>
					"DDR2 write test pass, size=%ld bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
8110234c:	d0a04d17 	ldw	r2,-32460(gp)
81102350:	01604534 	movhi	r5,33044
81102354:	297acb04 	addi	r5,r5,-5332
81102358:	1009883a 	mov	r4,r2
8110235c:	110fe4c0 	call	8110fe4c <fprintf>
81102360:	00001b06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 write test pass, size=%ld bytes\n",
81102364:	e1bff017 	ldw	r6,-64(fp)
81102368:	01604534 	movhi	r5,33044
8110236c:	2969bf04 	addi	r5,r5,-22788
81102370:	01204534 	movhi	r4,33044
81102374:	213acb04 	addi	r4,r4,-5332
81102378:	11115b40 	call	811115b4 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
8110237c:	d0a04d17 	ldw	r2,-32460(gp)
81102380:	01604534 	movhi	r5,33044
81102384:	297acb04 	addi	r5,r5,-5332
81102388:	1009883a 	mov	r4,r2
8110238c:	110fe4c0 	call	8110fe4c <fprintf>
81102390:	00000f06 	br	811023d0 <bDdr2MemoryRandomWriteTest+0x420>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 write test fail\n");
81102394:	00e04534 	movhi	r3,33044
81102398:	18facb04 	addi	r3,r3,-5332
8110239c:	00a04534 	movhi	r2,33044
811023a0:	10a95c04 	addi	r2,r2,-23184
811023a4:	1009883a 	mov	r4,r2
811023a8:	00800584 	movi	r2,22
811023ac:	100d883a 	mov	r6,r2
811023b0:	200b883a 	mov	r5,r4
811023b4:	1809883a 	mov	r4,r3
811023b8:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
811023bc:	d0a04d17 	ldw	r2,-32460(gp)
811023c0:	01604534 	movhi	r5,33044
811023c4:	297acb04 	addi	r5,r5,-5332
811023c8:	1009883a 	mov	r4,r2
811023cc:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
811023d0:	00a04534 	movhi	r2,33044
811023d4:	10bacb04 	addi	r2,r2,-5332
811023d8:	00c00284 	movi	r3,10
811023dc:	10c00005 	stb	r3,0(r2)
811023e0:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
811023e4:	d0a04d17 	ldw	r2,-32460(gp)
811023e8:	01604534 	movhi	r5,33044
811023ec:	297acb04 	addi	r5,r5,-5332
811023f0:	1009883a 	mov	r4,r2
811023f4:	110fe4c0 	call	8110fe4c <fprintf>
#endif

	return bSuccess;
811023f8:	e0bff417 	ldw	r2,-48(fp)
}
811023fc:	e6fffc04 	addi	sp,fp,-16
81102400:	dfc00517 	ldw	ra,20(sp)
81102404:	df000417 	ldw	fp,16(sp)
81102408:	dcc00317 	ldw	r19,12(sp)
8110240c:	dc800217 	ldw	r18,8(sp)
81102410:	dc400117 	ldw	r17,4(sp)
81102414:	dc000017 	ldw	r16,0(sp)
81102418:	dec00604 	addi	sp,sp,24
8110241c:	f800283a 	ret

81102420 <bDdr2MemoryRandomReadTest>:
 * @param [in] bTime  Controla se a duração da função será medida
 *
 * @retval TRUE : Sucesso
 *
 */
bool bDdr2MemoryRandomReadTest(alt_u8 ucMemoryId, bool bVerbose, bool bTime) {
81102420:	deffec04 	addi	sp,sp,-80
81102424:	de00012e 	bgeu	sp,et,8110242c <bDdr2MemoryRandomReadTest+0xc>
81102428:	003b68fa 	trap	3
8110242c:	dfc01315 	stw	ra,76(sp)
81102430:	df001215 	stw	fp,72(sp)
81102434:	dcc01115 	stw	r19,68(sp)
81102438:	dc801015 	stw	r18,64(sp)
8110243c:	dc400f15 	stw	r17,60(sp)
81102440:	dc000e15 	stw	r16,56(sp)
81102444:	df001204 	addi	fp,sp,72
81102448:	2005883a 	mov	r2,r4
8110244c:	e17ffa15 	stw	r5,-24(fp)
81102450:	e1bffb15 	stw	r6,-20(fp)
81102454:	e0bff905 	stb	r2,-28(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "===== DE4 DDR2 Memory Random Read Test =====\n");
81102458:	00e04534 	movhi	r3,33044
8110245c:	18facb04 	addi	r3,r3,-5332
81102460:	00a04534 	movhi	r2,33044
81102464:	10a9c904 	addi	r2,r2,-22748
81102468:	1009883a 	mov	r4,r2
8110246c:	00800b84 	movi	r2,46
81102470:	100d883a 	mov	r6,r2
81102474:	200b883a 	mov	r5,r4
81102478:	1809883a 	mov	r4,r3
8110247c:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
81102480:	d0a04d17 	ldw	r2,-32460(gp)
81102484:	01604534 	movhi	r5,33044
81102488:	297acb04 	addi	r5,r5,-5332
8110248c:	1009883a 	mov	r4,r2
81102490:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	bool bSuccess;
	alt_u32 uliDdr2Base;
	alt_u32 uliByteLen;

	bSuccess = TRUE;
81102494:	00800044 	movi	r2,1
81102498:	e0bfef15 	stw	r2,-68(fp)
	switch (ucMemoryId) {
8110249c:	e0bff903 	ldbu	r2,-28(fp)
811024a0:	10c00060 	cmpeqi	r3,r2,1
811024a4:	1800031e 	bne	r3,zero,811024b4 <bDdr2MemoryRandomReadTest+0x94>
811024a8:	108000a0 	cmpeqi	r2,r2,2
811024ac:	1000081e 	bne	r2,zero,811024d0 <bDdr2MemoryRandomReadTest+0xb0>
811024b0:	00000e06 	br	811024ec <bDdr2MemoryRandomReadTest+0xcc>
	case DDR2_M1_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024b4:	e0bff903 	ldbu	r2,-28(fp)
811024b8:	1009883a 	mov	r4,r2
811024bc:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024c0:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M1_MEMORY_SIZE;
811024c4:	00a00034 	movhi	r2,32768
811024c8:	e0bff115 	stw	r2,-60(fp)
		break;
811024cc:	00001906 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	case DDR2_M2_ID:
		bDdr2SwitchMemory(ucMemoryId);
811024d0:	e0bff903 	ldbu	r2,-28(fp)
811024d4:	1009883a 	mov	r4,r2
811024d8:	11014600 	call	81101460 <bDdr2SwitchMemory>
		uliDdr2Base = DDR2_EXT_ADDR_WINDOWED_BASE;
811024dc:	e03ff015 	stw	zero,-64(fp)
		uliByteLen = DDR2_M2_MEMORY_SIZE;
811024e0:	00a00034 	movhi	r2,32768
811024e4:	e0bff115 	stw	r2,-60(fp)
		break;
811024e8:	00001206 	br	81102534 <bDdr2MemoryRandomReadTest+0x114>
	default:
		bSuccess = FALSE;
811024ec:	e03fef15 	stw	zero,-68(fp)
#ifdef DEBUG_ON
		sprintf(cDebugBuffer,
811024f0:	00e04534 	movhi	r3,33044
811024f4:	18facb04 	addi	r3,r3,-5332
811024f8:	00a04534 	movhi	r2,33044
811024fc:	10a74a04 	addi	r2,r2,-25304
81102500:	1009883a 	mov	r4,r2
81102504:	00800bc4 	movi	r2,47
81102508:	100d883a 	mov	r6,r2
8110250c:	200b883a 	mov	r5,r4
81102510:	1809883a 	mov	r4,r3
81102514:	1110e4c0 	call	81110e4c <memcpy>
				"DR2 Memory ID not identified!! Aborting Test \n");
		debug(fp, cDebugBuffer)
81102518:	d0a04d17 	ldw	r2,-32460(gp)
8110251c:	01604534 	movhi	r5,33044
81102520:	297acb04 	addi	r5,r5,-5332
81102524:	1009883a 	mov	r4,r2
81102528:	110fe4c0 	call	8110fe4c <fprintf>
		;
#endif
		return bSuccess;
8110252c:	e0bfef17 	ldw	r2,-68(fp)
81102530:	0000d906 	br	81102898 <bDdr2MemoryRandomReadTest+0x478>
	}

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "DDR2 Size: %ld MBytes\n", uliByteLen / 1024 / 1024);
81102534:	e0bff117 	ldw	r2,-60(fp)
81102538:	1004d53a 	srli	r2,r2,20
8110253c:	100d883a 	mov	r6,r2
81102540:	01604534 	movhi	r5,33044
81102544:	29694304 	addi	r5,r5,-23284
81102548:	01204534 	movhi	r4,33044
8110254c:	213acb04 	addi	r4,r4,-5332
81102550:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
81102554:	d0a04d17 	ldw	r2,-32460(gp)
81102558:	01604534 	movhi	r5,33044
8110255c:	297acb04 	addi	r5,r5,-5332
81102560:	1009883a 	mov	r4,r2
81102564:	110fe4c0 	call	8110fe4c <fprintf>
	alt_u32 uliCurrentState;
	alt_u32 uliMemoryEndAddress;
	alt_u32 uliNextMilestone;
	alt_u8 ucPercentage;

	uliCurrentState = uliInitialState;
81102568:	d0a03617 	ldw	r2,-32552(gp)
8110256c:	e0bff815 	stw	r2,-32(fp)
	uliMemoryEndAddress = uliDdr2Base + uliByteLen;
81102570:	e0fff017 	ldw	r3,-64(fp)
81102574:	e0bff117 	ldw	r2,-60(fp)
81102578:	1885883a 	add	r2,r3,r2
8110257c:	e0bff515 	stw	r2,-44(fp)
	uliNextMilestone = uliDdr2Base + uliByteLen / 20;
81102580:	e0fff117 	ldw	r3,-60(fp)
81102584:	00b33374 	movhi	r2,52429
81102588:	10b33344 	addi	r2,r2,-13107
8110258c:	1888383a 	mulxuu	r4,r3,r2
81102590:	1885383a 	mul	r2,r3,r2
81102594:	1025883a 	mov	r18,r2
81102598:	2027883a 	mov	r19,r4
8110259c:	9806d13a 	srli	r3,r19,4
811025a0:	e0bff017 	ldw	r2,-64(fp)
811025a4:	1885883a 	add	r2,r3,r2
811025a8:	e0bff315 	stw	r2,-52(fp)
	ucPercentage = 5;
811025ac:	00800144 	movi	r2,5
811025b0:	e0bff405 	stb	r2,-48(fp)
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "Reading from memory...\n");
811025b4:	00e04534 	movhi	r3,33044
811025b8:	18facb04 	addi	r3,r3,-5332
811025bc:	00a04534 	movhi	r2,33044
811025c0:	10a9d504 	addi	r2,r2,-22700
811025c4:	1009883a 	mov	r4,r2
811025c8:	00800604 	movi	r2,24
811025cc:	100d883a 	mov	r6,r2
811025d0:	200b883a 	mov	r5,r4
811025d4:	1809883a 	mov	r4,r3
811025d8:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
811025dc:	d0a04d17 	ldw	r2,-32460(gp)
811025e0:	01604534 	movhi	r5,33044
811025e4:	297acb04 	addi	r5,r5,-5332
811025e8:	1009883a 	mov	r4,r2
811025ec:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	if (bVerbose == DDR2_VERBOSE) {
811025f0:	e0bffa17 	ldw	r2,-24(fp)
811025f4:	10800058 	cmpnei	r2,r2,1
811025f8:	10000a1e 	bne	r2,zero,81102624 <bDdr2MemoryRandomReadTest+0x204>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "00%%..");
811025fc:	01604534 	movhi	r5,33044
81102600:	2969ab04 	addi	r5,r5,-22868
81102604:	01204534 	movhi	r4,33044
81102608:	213acb04 	addi	r4,r4,-5332
8110260c:	11115b40 	call	811115b4 <sprintf>
		debug(fp, cDebugBuffer);
81102610:	d0a04d17 	ldw	r2,-32460(gp)
81102614:	01604534 	movhi	r5,33044
81102618:	297acb04 	addi	r5,r5,-5332
8110261c:	1009883a 	mov	r4,r2
81102620:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}

	int TimeStart, TimeElapsed = 0;
81102624:	e03ff615 	stw	zero,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81102628:	d0a06b17 	ldw	r2,-32340(gp)

	TimeStart = alt_nticks();
8110262c:	e0bff715 	stw	r2,-36(fp)
	for (puliSource = (alt_u32*) uliDdr2Base;
81102630:	e0bff017 	ldw	r2,-64(fp)
81102634:	e0bff215 	stw	r2,-56(fp)
81102638:	00003a06 	br	81102724 <bDdr2MemoryRandomReadTest+0x304>
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
		if (uliXorshift32(&uliCurrentState) != *puliSource) {
8110263c:	e0bff804 	addi	r2,fp,-32
81102640:	1009883a 	mov	r4,r2
81102644:	11028bc0 	call	811028bc <uliXorshift32>
81102648:	1007883a 	mov	r3,r2
8110264c:	e0bff217 	ldw	r2,-56(fp)
81102650:	10800017 	ldw	r2,0(r2)
81102654:	18801026 	beq	r3,r2,81102698 <bDdr2MemoryRandomReadTest+0x278>
			bSuccess = FALSE;
81102658:	e03fef15 	stw	zero,-68(fp)
			if (bVerbose == DDR2_VERBOSE) {
8110265c:	e0bffa17 	ldw	r2,-24(fp)
81102660:	10800058 	cmpnei	r2,r2,1
81102664:	10000c1e 	bne	r2,zero,81102698 <bDdr2MemoryRandomReadTest+0x278>
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "Failed to read adress 0x%08lX\n",
81102668:	e0bff217 	ldw	r2,-56(fp)
8110266c:	100d883a 	mov	r6,r2
81102670:	01604534 	movhi	r5,33044
81102674:	2969db04 	addi	r5,r5,-22676
81102678:	01204534 	movhi	r4,33044
8110267c:	213acb04 	addi	r4,r4,-5332
81102680:	11115b40 	call	811115b4 <sprintf>
						(alt_u32)puliSource);
				debug(fp, cDebugBuffer);
81102684:	d0a04d17 	ldw	r2,-32460(gp)
81102688:	01604534 	movhi	r5,33044
8110268c:	297acb04 	addi	r5,r5,-5332
81102690:	1009883a 	mov	r4,r2
81102694:	110fe4c0 	call	8110fe4c <fprintf>
#endif
			}
		}
		if ((bVerbose == DDR2_VERBOSE)
81102698:	e0bffa17 	ldw	r2,-24(fp)
8110269c:	10800058 	cmpnei	r2,r2,1
811026a0:	10001d1e 	bne	r2,zero,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
				&& ((alt_u32) puliSource > uliNextMilestone)) {
811026a4:	e0bff217 	ldw	r2,-56(fp)
811026a8:	e0fff317 	ldw	r3,-52(fp)
811026ac:	18801a2e 	bgeu	r3,r2,81102718 <bDdr2MemoryRandomReadTest+0x2f8>
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "..%02d%%..", ucPercentage);
811026b0:	e0bff403 	ldbu	r2,-48(fp)
811026b4:	100d883a 	mov	r6,r2
811026b8:	01604534 	movhi	r5,33044
811026bc:	2969ad04 	addi	r5,r5,-22860
811026c0:	01204534 	movhi	r4,33044
811026c4:	213acb04 	addi	r4,r4,-5332
811026c8:	11115b40 	call	811115b4 <sprintf>
			debug(fp, cDebugBuffer);
811026cc:	d0a04d17 	ldw	r2,-32460(gp)
811026d0:	01604534 	movhi	r5,33044
811026d4:	297acb04 	addi	r5,r5,-5332
811026d8:	1009883a 	mov	r4,r2
811026dc:	110fe4c0 	call	8110fe4c <fprintf>
#endif
			uliNextMilestone += uliByteLen / 20;
811026e0:	e0fff117 	ldw	r3,-60(fp)
811026e4:	00b33374 	movhi	r2,52429
811026e8:	10b33344 	addi	r2,r2,-13107
811026ec:	1888383a 	mulxuu	r4,r3,r2
811026f0:	1885383a 	mul	r2,r3,r2
811026f4:	1021883a 	mov	r16,r2
811026f8:	2023883a 	mov	r17,r4
811026fc:	8804d13a 	srli	r2,r17,4
81102700:	e0fff317 	ldw	r3,-52(fp)
81102704:	1885883a 	add	r2,r3,r2
81102708:	e0bff315 	stw	r2,-52(fp)
			ucPercentage += 5;
8110270c:	e0bff403 	ldbu	r2,-48(fp)
81102710:	10800144 	addi	r2,r2,5
81102714:	e0bff405 	stb	r2,-48(fp)

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
			(alt_u32) puliSource < uliMemoryEndAddress; puliSource++) {
81102718:	e0bff217 	ldw	r2,-56(fp)
8110271c:	10800104 	addi	r2,r2,4
81102720:	e0bff215 	stw	r2,-56(fp)
81102724:	e0fff217 	ldw	r3,-56(fp)
	}

	int TimeStart, TimeElapsed = 0;

	TimeStart = alt_nticks();
	for (puliSource = (alt_u32*) uliDdr2Base;
81102728:	e0bff517 	ldw	r2,-44(fp)
8110272c:	18bfc336 	bltu	r3,r2,8110263c <__reset+0xfb0e263c>
#endif
			uliNextMilestone += uliByteLen / 20;
			ucPercentage += 5;
		}
	}
	if (bVerbose == DDR2_VERBOSE) {
81102730:	e0bffa17 	ldw	r2,-24(fp)
81102734:	10800058 	cmpnei	r2,r2,1
81102738:	10000a1e 	bne	r2,zero,81102764 <bDdr2MemoryRandomReadTest+0x344>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "..100%%\n");
8110273c:	01604534 	movhi	r5,33044
81102740:	2969b004 	addi	r5,r5,-22848
81102744:	01204534 	movhi	r4,33044
81102748:	213acb04 	addi	r4,r4,-5332
8110274c:	11115b40 	call	811115b4 <sprintf>
		debug(fp, cDebugBuffer);
81102750:	d0a04d17 	ldw	r2,-32460(gp)
81102754:	01604534 	movhi	r5,33044
81102758:	297acb04 	addi	r5,r5,-5332
8110275c:	1009883a 	mov	r4,r2
81102760:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}

	if (bSuccess) {
81102764:	e0bfef17 	ldw	r2,-68(fp)
81102768:	10003126 	beq	r2,zero,81102830 <bDdr2MemoryRandomReadTest+0x410>
		if (bTime == TRUE) {
8110276c:	e0bffb17 	ldw	r2,-20(fp)
81102770:	10800058 	cmpnei	r2,r2,1
81102774:	1000221e 	bne	r2,zero,81102800 <bDdr2MemoryRandomReadTest+0x3e0>
81102778:	d0e06b17 	ldw	r3,-32340(gp)
			TimeElapsed = alt_nticks() - TimeStart;
8110277c:	e0bff717 	ldw	r2,-36(fp)
81102780:	1885c83a 	sub	r2,r3,r2
81102784:	e0bff615 	stw	r2,-40(fp)
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
81102788:	e13ff617 	ldw	r4,-40(fp)
8110278c:	110f0880 	call	8110f088 <__floatsisf>
81102790:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81102794:	d0a06a17 	ldw	r2,-32344(gp)
81102798:	1009883a 	mov	r4,r2
8110279c:	110f1b40 	call	8110f1b4 <__floatunsisf>
811027a0:	1007883a 	mov	r3,r2
811027a4:	180b883a 	mov	r5,r3
811027a8:	8009883a 	mov	r4,r16
811027ac:	110e83c0 	call	8110e83c <__divsf3>
811027b0:	1007883a 	mov	r3,r2
811027b4:	1805883a 	mov	r2,r3

	if (bSuccess) {
		if (bTime == TRUE) {
			TimeElapsed = alt_nticks() - TimeStart;
#ifdef DEBUG_ON
			sprintf(cDebugBuffer,
811027b8:	1009883a 	mov	r4,r2
811027bc:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811027c0:	1009883a 	mov	r4,r2
811027c4:	180b883a 	mov	r5,r3
811027c8:	d9400015 	stw	r5,0(sp)
811027cc:	200f883a 	mov	r7,r4
811027d0:	e1bff117 	ldw	r6,-60(fp)
811027d4:	01604534 	movhi	r5,33044
811027d8:	2969e304 	addi	r5,r5,-22644
811027dc:	01204534 	movhi	r4,33044
811027e0:	213acb04 	addi	r4,r4,-5332
811027e4:	11115b40 	call	811115b4 <sprintf>
					"DDR2 read test pass, size=%lu bytes, %.3f sec\n",
					uliByteLen,
					(float) TimeElapsed / (float) alt_ticks_per_second());
			debug(fp, cDebugBuffer);
811027e8:	d0a04d17 	ldw	r2,-32460(gp)
811027ec:	01604534 	movhi	r5,33044
811027f0:	297acb04 	addi	r5,r5,-5332
811027f4:	1009883a 	mov	r4,r2
811027f8:	110fe4c0 	call	8110fe4c <fprintf>
811027fc:	00001b06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		} else {
#ifdef DEBUG_ON
			sprintf(cDebugBuffer, "DDR2 read test pass, size=%lu bytes\n",
81102800:	e1bff117 	ldw	r6,-60(fp)
81102804:	01604534 	movhi	r5,33044
81102808:	2969ef04 	addi	r5,r5,-22596
8110280c:	01204534 	movhi	r4,33044
81102810:	213acb04 	addi	r4,r4,-5332
81102814:	11115b40 	call	811115b4 <sprintf>
					uliByteLen);
			debug(fp, cDebugBuffer);
81102818:	d0a04d17 	ldw	r2,-32460(gp)
8110281c:	01604534 	movhi	r5,33044
81102820:	297acb04 	addi	r5,r5,-5332
81102824:	1009883a 	mov	r4,r2
81102828:	110fe4c0 	call	8110fe4c <fprintf>
8110282c:	00000f06 	br	8110286c <bDdr2MemoryRandomReadTest+0x44c>
#endif
		}
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "DDR2 read test fail\n");
81102830:	00e04534 	movhi	r3,33044
81102834:	18facb04 	addi	r3,r3,-5332
81102838:	00a04534 	movhi	r2,33044
8110283c:	10a99304 	addi	r2,r2,-22964
81102840:	1009883a 	mov	r4,r2
81102844:	00800544 	movi	r2,21
81102848:	100d883a 	mov	r6,r2
8110284c:	200b883a 	mov	r5,r4
81102850:	1809883a 	mov	r4,r3
81102854:	1110e4c0 	call	81110e4c <memcpy>
		debug(fp, cDebugBuffer);
81102858:	d0a04d17 	ldw	r2,-32460(gp)
8110285c:	01604534 	movhi	r5,33044
81102860:	297acb04 	addi	r5,r5,-5332
81102864:	1009883a 	mov	r4,r2
81102868:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "\n");
8110286c:	00a04534 	movhi	r2,33044
81102870:	10bacb04 	addi	r2,r2,-5332
81102874:	00c00284 	movi	r3,10
81102878:	10c00005 	stb	r3,0(r2)
8110287c:	10000045 	stb	zero,1(r2)
	debug(fp, cDebugBuffer);
81102880:	d0a04d17 	ldw	r2,-32460(gp)
81102884:	01604534 	movhi	r5,33044
81102888:	297acb04 	addi	r5,r5,-5332
8110288c:	1009883a 	mov	r4,r2
81102890:	110fe4c0 	call	8110fe4c <fprintf>
#endif

	return bSuccess;
81102894:	e0bfef17 	ldw	r2,-68(fp)
}
81102898:	e6fffc04 	addi	sp,fp,-16
8110289c:	dfc00517 	ldw	ra,20(sp)
811028a0:	df000417 	ldw	fp,16(sp)
811028a4:	dcc00317 	ldw	r19,12(sp)
811028a8:	dc800217 	ldw	r18,8(sp)
811028ac:	dc400117 	ldw	r17,4(sp)
811028b0:	dc000017 	ldw	r16,0(sp)
811028b4:	dec00604 	addi	sp,sp,24
811028b8:	f800283a 	ret

811028bc <uliXorshift32>:
 * @param [in] bDRIVE  Estado atual do RNG
 *
 * @retval Número aleatório resultate do RNG
 *
 */
alt_u32 uliXorshift32(alt_u32 *puliState) {
811028bc:	defffd04 	addi	sp,sp,-12
811028c0:	de00012e 	bgeu	sp,et,811028c8 <uliXorshift32+0xc>
811028c4:	003b68fa 	trap	3
811028c8:	df000215 	stw	fp,8(sp)
811028cc:	df000204 	addi	fp,sp,8
811028d0:	e13fff15 	stw	r4,-4(fp)

	alt_u32 uliX = *puliState;
811028d4:	e0bfff17 	ldw	r2,-4(fp)
811028d8:	10800017 	ldw	r2,0(r2)
811028dc:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 13;
811028e0:	e0bffe17 	ldw	r2,-8(fp)
811028e4:	1004937a 	slli	r2,r2,13
811028e8:	e0fffe17 	ldw	r3,-8(fp)
811028ec:	1884f03a 	xor	r2,r3,r2
811028f0:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX >> 17;
811028f4:	e0bffe17 	ldw	r2,-8(fp)
811028f8:	1004d47a 	srli	r2,r2,17
811028fc:	e0fffe17 	ldw	r3,-8(fp)
81102900:	1884f03a 	xor	r2,r3,r2
81102904:	e0bffe15 	stw	r2,-8(fp)
	uliX ^= uliX << 5;
81102908:	e0bffe17 	ldw	r2,-8(fp)
8110290c:	1004917a 	slli	r2,r2,5
81102910:	e0fffe17 	ldw	r3,-8(fp)
81102914:	1884f03a 	xor	r2,r3,r2
81102918:	e0bffe15 	stw	r2,-8(fp)
	*puliState = uliX;
8110291c:	e0bfff17 	ldw	r2,-4(fp)
81102920:	e0fffe17 	ldw	r3,-8(fp)
81102924:	10c00015 	stw	r3,0(r2)

	return uliX;
81102928:	e0bffe17 	ldw	r2,-8(fp)
}
8110292c:	e037883a 	mov	sp,fp
81102930:	df000017 	ldw	fp,0(sp)
81102934:	dec00104 	addi	sp,sp,4
81102938:	f800283a 	ret

8110293c <DMA_OPEN_DEVICE>:
 * @param [in] DmaName  String com o nome do DMA (XXX_CSR_NAME)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_OPEN_DEVICE(alt_msgdma_dev **DmaDevice, const char* DmaName){
8110293c:	defffb04 	addi	sp,sp,-20
81102940:	de00012e 	bgeu	sp,et,81102948 <DMA_OPEN_DEVICE+0xc>
81102944:	003b68fa 	trap	3
81102948:	dfc00415 	stw	ra,16(sp)
8110294c:	df000315 	stw	fp,12(sp)
81102950:	df000304 	addi	fp,sp,12
81102954:	e13ffe15 	stw	r4,-8(fp)
81102958:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
8110295c:	00800044 	movi	r2,1
81102960:	e0bffd15 	stw	r2,-12(fp)
  
  //Open DMA based on name

  *DmaDevice = alt_msgdma_open((char *)DmaName);
81102964:	e13fff17 	ldw	r4,-4(fp)
81102968:	11383900 	call	81138390 <alt_msgdma_open>
8110296c:	1007883a 	mov	r3,r2
81102970:	e0bffe17 	ldw	r2,-8(fp)
81102974:	10c00015 	stw	r3,0(r2)
  
  //Check if DMA opened correctly;
  if(*DmaDevice == NULL){
81102978:	e0bffe17 	ldw	r2,-8(fp)
8110297c:	10800017 	ldw	r2,0(r2)
81102980:	1000011e 	bne	r2,zero,81102988 <DMA_OPEN_DEVICE+0x4c>
    bSuccess = FALSE;
81102984:	e03ffd15 	stw	zero,-12(fp)
  }
  
  return bSuccess;
81102988:	e0bffd17 	ldw	r2,-12(fp)
}
8110298c:	e037883a 	mov	sp,fp
81102990:	dfc00117 	ldw	ra,4(sp)
81102994:	df000017 	ldw	fp,0(sp)
81102998:	dec00204 	addi	sp,sp,8
8110299c:	f800283a 	ret

811029a0 <DMA_CONFIG>:
 * @param [in] ConfigMask  Mascara com as configurações do DMA (overwrite)
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_CONFIG(alt_msgdma_dev *DmaDevice, alt_u32 ConfigMask){
811029a0:	defffc04 	addi	sp,sp,-16
811029a4:	de00012e 	bgeu	sp,et,811029ac <DMA_CONFIG+0xc>
811029a8:	003b68fa 	trap	3
811029ac:	df000315 	stw	fp,12(sp)
811029b0:	df000304 	addi	fp,sp,12
811029b4:	e13ffe15 	stw	r4,-8(fp)
811029b8:	e17fff15 	stw	r5,-4(fp)
  bool bSuccess = TRUE;
811029bc:	00800044 	movi	r2,1
811029c0:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ConfigMask);
811029c4:	e0bffe17 	ldw	r2,-8(fp)
811029c8:	10800317 	ldw	r2,12(r2)
811029cc:	10800104 	addi	r2,r2,4
811029d0:	e0ffff17 	ldw	r3,-4(fp)
811029d4:	10c00035 	stwio	r3,0(r2)
  return bSuccess;
811029d8:	e0bffd17 	ldw	r2,-12(fp)
}
811029dc:	e037883a 	mov	sp,fp
811029e0:	df000017 	ldw	fp,0(sp)
811029e4:	dec00104 	addi	sp,sp,4
811029e8:	f800283a 	ret

811029ec <DMA_BUSY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : DMA Ocupado
 *
 */
bool DMA_BUSY(alt_msgdma_dev *DmaDevice){
811029ec:	defffd04 	addi	sp,sp,-12
811029f0:	de00012e 	bgeu	sp,et,811029f8 <DMA_BUSY+0xc>
811029f4:	003b68fa 	trap	3
811029f8:	df000215 	stw	fp,8(sp)
811029fc:	df000204 	addi	fp,sp,8
81102a00:	e13fff15 	stw	r4,-4(fp)
  bool bBusy = FALSE;
81102a04:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK){
81102a08:	e0bfff17 	ldw	r2,-4(fp)
81102a0c:	10800317 	ldw	r2,12(r2)
81102a10:	10800037 	ldwio	r2,0(r2)
81102a14:	1080004c 	andi	r2,r2,1
81102a18:	10000226 	beq	r2,zero,81102a24 <DMA_BUSY+0x38>
    bBusy = TRUE;
81102a1c:	00800044 	movi	r2,1
81102a20:	e0bffe15 	stw	r2,-8(fp)
  }
  return bBusy;
81102a24:	e0bffe17 	ldw	r2,-8(fp)
}
81102a28:	e037883a 	mov	sp,fp
81102a2c:	df000017 	ldw	fp,0(sp)
81102a30:	dec00104 	addi	sp,sp,4
81102a34:	f800283a 	ret

81102a38 <DMA_DESCRIPTOR_BUFFER_FULL>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Cheio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_FULL(alt_msgdma_dev *DmaDevice){
81102a38:	defffd04 	addi	sp,sp,-12
81102a3c:	de00012e 	bgeu	sp,et,81102a44 <DMA_DESCRIPTOR_BUFFER_FULL+0xc>
81102a40:	003b68fa 	trap	3
81102a44:	df000215 	stw	fp,8(sp)
81102a48:	df000204 	addi	fp,sp,8
81102a4c:	e13fff15 	stw	r4,-4(fp)
  bool bFull = FALSE;
81102a50:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK){
81102a54:	e0bfff17 	ldw	r2,-4(fp)
81102a58:	10800317 	ldw	r2,12(r2)
81102a5c:	10800037 	ldwio	r2,0(r2)
81102a60:	1080010c 	andi	r2,r2,4
81102a64:	10000226 	beq	r2,zero,81102a70 <DMA_DESCRIPTOR_BUFFER_FULL+0x38>
    bFull = TRUE;
81102a68:	00800044 	movi	r2,1
81102a6c:	e0bffe15 	stw	r2,-8(fp)
  }
  return bFull;
81102a70:	e0bffe17 	ldw	r2,-8(fp)
}
81102a74:	e037883a 	mov	sp,fp
81102a78:	df000017 	ldw	fp,0(sp)
81102a7c:	dec00104 	addi	sp,sp,4
81102a80:	f800283a 	ret

81102a84 <DMA_DESCRIPTOR_BUFFER_EMPTY>:
 * @param [in] DmaDevice  Ponteiro para o Device do DMA a ser utilizado
 *
 * @retval TRUE : Buffer Vazio
 *
 */
bool DMA_DESCRIPTOR_BUFFER_EMPTY(alt_msgdma_dev *DmaDevice){
81102a84:	defffd04 	addi	sp,sp,-12
81102a88:	de00012e 	bgeu	sp,et,81102a90 <DMA_DESCRIPTOR_BUFFER_EMPTY+0xc>
81102a8c:	003b68fa 	trap	3
81102a90:	df000215 	stw	fp,8(sp)
81102a94:	df000204 	addi	fp,sp,8
81102a98:	e13fff15 	stw	r4,-4(fp)
  bool bEmpty = FALSE;
81102a9c:	e03ffe15 	stw	zero,-8(fp)
  if (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_EMPTY_MASK){
81102aa0:	e0bfff17 	ldw	r2,-4(fp)
81102aa4:	10800317 	ldw	r2,12(r2)
81102aa8:	10800037 	ldwio	r2,0(r2)
81102aac:	1080008c 	andi	r2,r2,2
81102ab0:	10000226 	beq	r2,zero,81102abc <DMA_DESCRIPTOR_BUFFER_EMPTY+0x38>
    bEmpty = TRUE;
81102ab4:	00800044 	movi	r2,1
81102ab8:	e0bffe15 	stw	r2,-8(fp)
  }
  return bEmpty;
81102abc:	e0bffe17 	ldw	r2,-8(fp)
}
81102ac0:	e037883a 	mov	sp,fp
81102ac4:	df000017 	ldw	fp,0(sp)
81102ac8:	dec00104 	addi	sp,sp,4
81102acc:	f800283a 	ret

81102ad0 <DMA_DISPATCHER_STOP>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_STOP(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102ad0:	defffa04 	addi	sp,sp,-24
81102ad4:	de00012e 	bgeu	sp,et,81102adc <DMA_DISPATCHER_STOP+0xc>
81102ad8:	003b68fa 	trap	3
81102adc:	dfc00515 	stw	ra,20(sp)
81102ae0:	df000415 	stw	fp,16(sp)
81102ae4:	df000404 	addi	fp,sp,16
81102ae8:	e13ffd15 	stw	r4,-12(fp)
81102aec:	e17ffe15 	stw	r5,-8(fp)
81102af0:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102af4:	00800044 	movi	r2,1
81102af8:	e0bffc15 	stw	r2,-16(fp)
  
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
81102afc:	e0bffd17 	ldw	r2,-12(fp)
81102b00:	10800317 	ldw	r2,12(r2)
81102b04:	10800104 	addi	r2,r2,4
81102b08:	00c00044 	movi	r3,1
81102b0c:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102b10:	e0bffe17 	ldw	r2,-8(fp)
81102b14:	10800058 	cmpnei	r2,r2,1
81102b18:	10000e1e 	bne	r2,zero,81102b54 <DMA_DISPATCHER_STOP+0x84>
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b1c:	00000706 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102b20:	e0bfff17 	ldw	r2,-4(fp)
81102b24:	1000031e 	bne	r2,zero,81102b34 <DMA_DISPATCHER_STOP+0x64>
        usleep(1);
81102b28:	01000044 	movi	r4,1
81102b2c:	11263140 	call	81126314 <usleep>
81102b30:	00000206 	br	81102b3c <DMA_DISPATCHER_STOP+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102b34:	e13fff17 	ldw	r4,-4(fp)
81102b38:	11263140 	call	81126314 <usleep>
  //Send stop command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_STOP_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait stop to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_STOP_STATE_MASK) {
81102b3c:	e0bffd17 	ldw	r2,-12(fp)
81102b40:	10800317 	ldw	r2,12(r2)
81102b44:	10800037 	ldwio	r2,0(r2)
81102b48:	1080080c 	andi	r2,r2,32
81102b4c:	103ff41e 	bne	r2,zero,81102b20 <__reset+0xfb0e2b20>
81102b50:	00000206 	br	81102b5c <DMA_DISPATCHER_STOP+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102b54:	e0bffc17 	ldw	r2,-16(fp)
81102b58:	00000106 	br	81102b60 <DMA_DISPATCHER_STOP+0x90>
  }
  
  return bSuccess;
81102b5c:	e0bffc17 	ldw	r2,-16(fp)
}
81102b60:	e037883a 	mov	sp,fp
81102b64:	dfc00117 	ldw	ra,4(sp)
81102b68:	df000017 	ldw	fp,0(sp)
81102b6c:	dec00204 	addi	sp,sp,8
81102b70:	f800283a 	ret

81102b74 <DMA_DISPATCHER_RESET>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_DISPATCHER_RESET(alt_msgdma_dev *DmaDevice, bool bWait, alt_32 WaitPeriodUs){
81102b74:	defffa04 	addi	sp,sp,-24
81102b78:	de00012e 	bgeu	sp,et,81102b80 <DMA_DISPATCHER_RESET+0xc>
81102b7c:	003b68fa 	trap	3
81102b80:	dfc00515 	stw	ra,20(sp)
81102b84:	df000415 	stw	fp,16(sp)
81102b88:	df000404 	addi	fp,sp,16
81102b8c:	e13ffd15 	stw	r4,-12(fp)
81102b90:	e17ffe15 	stw	r5,-8(fp)
81102b94:	e1bfff15 	stw	r6,-4(fp)
  bool bSuccess = TRUE;
81102b98:	00800044 	movi	r2,1
81102b9c:	e0bffc15 	stw	r2,-16(fp)
  
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81102ba0:	e0bffd17 	ldw	r2,-12(fp)
81102ba4:	10800317 	ldw	r2,12(r2)
81102ba8:	10800104 	addi	r2,r2,4
81102bac:	00c00084 	movi	r3,2
81102bb0:	10c00035 	stwio	r3,0(r2)
  
  if (bWait == DMA_WAIT) {
81102bb4:	e0bffe17 	ldw	r2,-8(fp)
81102bb8:	10800058 	cmpnei	r2,r2,1
81102bbc:	10000e1e 	bne	r2,zero,81102bf8 <DMA_DISPATCHER_RESET+0x84>
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102bc0:	00000706 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102bc4:	e0bfff17 	ldw	r2,-4(fp)
81102bc8:	1000031e 	bne	r2,zero,81102bd8 <DMA_DISPATCHER_RESET+0x64>
        usleep(1);
81102bcc:	01000044 	movi	r4,1
81102bd0:	11263140 	call	81126314 <usleep>
81102bd4:	00000206 	br	81102be0 <DMA_DISPATCHER_RESET+0x6c>
      } else {
        usleep(WaitPeriodUs);
81102bd8:	e13fff17 	ldw	r4,-4(fp)
81102bdc:	11263140 	call	81126314 <usleep>
  //Send reset command
  IOWR_ALTERA_MSGDMA_CSR_CONTROL(DmaDevice->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  
  if (bWait == DMA_WAIT) {
    //Wait reset to be finished
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81102be0:	e0bffd17 	ldw	r2,-12(fp)
81102be4:	10800317 	ldw	r2,12(r2)
81102be8:	10800037 	ldwio	r2,0(r2)
81102bec:	1080100c 	andi	r2,r2,64
81102bf0:	103ff41e 	bne	r2,zero,81102bc4 <__reset+0xfb0e2bc4>
81102bf4:	00000206 	br	81102c00 <DMA_DISPATCHER_RESET+0x8c>
      } else {
        usleep(WaitPeriodUs);
      }
    }
  } else {
    return bSuccess;
81102bf8:	e0bffc17 	ldw	r2,-16(fp)
81102bfc:	00000106 	br	81102c04 <DMA_DISPATCHER_RESET+0x90>
  }
  
  return bSuccess;
81102c00:	e0bffc17 	ldw	r2,-16(fp)
}
81102c04:	e037883a 	mov	sp,fp
81102c08:	dfc00117 	ldw	ra,4(sp)
81102c0c:	df000017 	ldw	fp,0(sp)
81102c10:	dec00204 	addi	sp,sp,8
81102c14:	f800283a 	ret

81102c18 <DMA_SINGLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_SINGLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddress, alt_u32 DestinationAddress, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102c18:	defff604 	addi	sp,sp,-40
81102c1c:	de00012e 	bgeu	sp,et,81102c24 <DMA_SINGLE_TRANSFER+0xc>
81102c20:	003b68fa 	trap	3
81102c24:	dfc00915 	stw	ra,36(sp)
81102c28:	df000815 	stw	fp,32(sp)
81102c2c:	dc000715 	stw	r16,28(sp)
81102c30:	df000804 	addi	fp,sp,32
81102c34:	e13ffb15 	stw	r4,-20(fp)
81102c38:	e17ffc15 	stw	r5,-16(fp)
81102c3c:	e1bffd15 	stw	r6,-12(fp)
81102c40:	e1fffe15 	stw	r7,-8(fp)
81102c44:	defff804 	addi	sp,sp,-32
81102c48:	d8800204 	addi	r2,sp,8
81102c4c:	108003c4 	addi	r2,r2,15
81102c50:	1004d13a 	srli	r2,r2,4
81102c54:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102c58:	00800044 	movi	r2,1
81102c5c:	e0bffa15 	stw	r2,-24(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;

  if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddress, (alt_u32 *)DestinationAddress, TransferSize, ControlBits) != 0){
81102c60:	e0fffc17 	ldw	r3,-16(fp)
81102c64:	e13ffd17 	ldw	r4,-12(fp)
81102c68:	e0800217 	ldw	r2,8(fp)
81102c6c:	d8800115 	stw	r2,4(sp)
81102c70:	e0bffe17 	ldw	r2,-8(fp)
81102c74:	d8800015 	stw	r2,0(sp)
81102c78:	200f883a 	mov	r7,r4
81102c7c:	180d883a 	mov	r6,r3
81102c80:	800b883a 	mov	r5,r16
81102c84:	e13ffb17 	ldw	r4,-20(fp)
81102c88:	113738c0 	call	8113738c <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102c8c:	10000326 	beq	r2,zero,81102c9c <DMA_SINGLE_TRANSFER+0x84>
    bSuccess = FALSE;
81102c90:	e03ffa15 	stw	zero,-24(fp)
    return bSuccess;
81102c94:	e0bffa17 	ldw	r2,-24(fp)
81102c98:	00001d06 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
  } else {
    if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102c9c:	800b883a 	mov	r5,r16
81102ca0:	e13ffb17 	ldw	r4,-20(fp)
81102ca4:	11386000 	call	81138600 <alt_msgdma_standard_descriptor_async_transfer>
81102ca8:	10000326 	beq	r2,zero,81102cb8 <DMA_SINGLE_TRANSFER+0xa0>
      bSuccess = FALSE;
81102cac:	e03ffa15 	stw	zero,-24(fp)
      return bSuccess;
81102cb0:	e0bffa17 	ldw	r2,-24(fp)
81102cb4:	00001606 	br	81102d10 <DMA_SINGLE_TRANSFER+0xf8>
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102cb8:	e0bffa17 	ldw	r2,-24(fp)
81102cbc:	10800060 	cmpeqi	r2,r2,1
81102cc0:	1007883a 	mov	r3,r2
81102cc4:	e0800317 	ldw	r2,12(fp)
81102cc8:	10800060 	cmpeqi	r2,r2,1
81102ccc:	1884703a 	and	r2,r3,r2
81102cd0:	10803fcc 	andi	r2,r2,255
81102cd4:	10000d26 	beq	r2,zero,81102d0c <DMA_SINGLE_TRANSFER+0xf4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cd8:	00000706 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102cdc:	e0800417 	ldw	r2,16(fp)
81102ce0:	1000031e 	bne	r2,zero,81102cf0 <DMA_SINGLE_TRANSFER+0xd8>
        usleep(1000);
81102ce4:	0100fa04 	movi	r4,1000
81102ce8:	11263140 	call	81126314 <usleep>
81102cec:	00000206 	br	81102cf8 <DMA_SINGLE_TRANSFER+0xe0>
      } else {
        usleep(WaitPeriodUs);
81102cf0:	e1000417 	ldw	r4,16(fp)
81102cf4:	11263140 	call	81126314 <usleep>
      return bSuccess;
    }
  }
  
  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102cf8:	e0bffb17 	ldw	r2,-20(fp)
81102cfc:	10800317 	ldw	r2,12(r2)
81102d00:	10800037 	ldwio	r2,0(r2)
81102d04:	1080004c 	andi	r2,r2,1
81102d08:	103ff41e 	bne	r2,zero,81102cdc <__reset+0xfb0e2cdc>
        usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102d0c:	e0bffa17 	ldw	r2,-24(fp)
}
81102d10:	e6ffff04 	addi	sp,fp,-4
81102d14:	dfc00217 	ldw	ra,8(sp)
81102d18:	df000117 	ldw	fp,4(sp)
81102d1c:	dc000017 	ldw	r16,0(sp)
81102d20:	dec00304 	addi	sp,sp,12
81102d24:	f800283a 	ret

81102d28 <DMA_MULTIPLE_TRANSFER>:
 * @param [in] WaitPeriodUs  Define em qual intervalo de tempo a função irá verificar se a transferencia foi concluida
 *
 * @retval TRUE : Sucesso
 *
 */
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
81102d28:	defff504 	addi	sp,sp,-44
81102d2c:	de00012e 	bgeu	sp,et,81102d34 <DMA_MULTIPLE_TRANSFER+0xc>
81102d30:	003b68fa 	trap	3
81102d34:	dfc00a15 	stw	ra,40(sp)
81102d38:	df000915 	stw	fp,36(sp)
81102d3c:	dc000815 	stw	r16,32(sp)
81102d40:	df000904 	addi	fp,sp,36
81102d44:	e13ffb15 	stw	r4,-20(fp)
81102d48:	e17ffc15 	stw	r5,-16(fp)
81102d4c:	e1bffd15 	stw	r6,-12(fp)
81102d50:	3805883a 	mov	r2,r7
81102d54:	e0bffe05 	stb	r2,-8(fp)
81102d58:	defff804 	addi	sp,sp,-32
81102d5c:	d8800204 	addi	r2,sp,8
81102d60:	108003c4 	addi	r2,r2,15
81102d64:	1004d13a 	srli	r2,r2,4
81102d68:	1020913a 	slli	r16,r2,4
  bool bSuccess = TRUE;
81102d6c:	00800044 	movi	r2,1
81102d70:	e0bff915 	stw	r2,-28(fp)
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;
81102d74:	e03ffa05 	stb	zero,-24(fp)

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102d78:	00002506 	br	81102e10 <DMA_MULTIPLE_TRANSFER+0xe8>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, (ControlBits | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_EARLY_DONE_ENABLE_MASK)) != 0){
81102d7c:	e0bffa03 	ldbu	r2,-24(fp)
81102d80:	1085883a 	add	r2,r2,r2
81102d84:	1085883a 	add	r2,r2,r2
81102d88:	1007883a 	mov	r3,r2
81102d8c:	e0bffc17 	ldw	r2,-16(fp)
81102d90:	10c5883a 	add	r2,r2,r3
81102d94:	10800017 	ldw	r2,0(r2)
81102d98:	1009883a 	mov	r4,r2
81102d9c:	e0bffa03 	ldbu	r2,-24(fp)
81102da0:	1085883a 	add	r2,r2,r2
81102da4:	1085883a 	add	r2,r2,r2
81102da8:	1007883a 	mov	r3,r2
81102dac:	e0bffd17 	ldw	r2,-12(fp)
81102db0:	10c5883a 	add	r2,r2,r3
81102db4:	10800017 	ldw	r2,0(r2)
81102db8:	1007883a 	mov	r3,r2
81102dbc:	e0800317 	ldw	r2,12(fp)
81102dc0:	10804034 	orhi	r2,r2,256
81102dc4:	d8800115 	stw	r2,4(sp)
81102dc8:	e0800217 	ldw	r2,8(fp)
81102dcc:	d8800015 	stw	r2,0(sp)
81102dd0:	180f883a 	mov	r7,r3
81102dd4:	200d883a 	mov	r6,r4
81102dd8:	800b883a 	mov	r5,r16
81102ddc:	e13ffb17 	ldw	r4,-20(fp)
81102de0:	113738c0 	call	8113738c <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102de4:	10000226 	beq	r2,zero,81102df0 <DMA_MULTIPLE_TRANSFER+0xc8>
      bSuccess = FALSE;
81102de8:	e03ff915 	stw	zero,-28(fp)
81102dec:	00000506 	br	81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102df0:	800b883a 	mov	r5,r16
81102df4:	e13ffb17 	ldw	r4,-20(fp)
81102df8:	11386000 	call	81138600 <alt_msgdma_standard_descriptor_async_transfer>
81102dfc:	10000126 	beq	r2,zero,81102e04 <DMA_MULTIPLE_TRANSFER+0xdc>
        bSuccess = FALSE;
81102e00:	e03ff915 	stw	zero,-28(fp)
      }
    }
	i++;
81102e04:	e0bffa03 	ldbu	r2,-24(fp)
81102e08:	10800044 	addi	r2,r2,1
81102e0c:	e0bffa05 	stb	r2,-24(fp)
bool DMA_MULTIPLE_TRANSFER(alt_msgdma_dev *DmaDevice, alt_u32 SourceAddressArray[], alt_u32 DestinationAddressArray[], alt_u8 TransferNumber, alt_u32 TransferSize, alt_u32 ControlBits, bool bWait, alt_32 WaitPeriodUs){
  bool bSuccess = TRUE;
  alt_msgdma_standard_descriptor DmaDescriptor;
  alt_u8 i = 0;

  while ((bSuccess == TRUE) & (i < (TransferNumber - 1))){
81102e10:	e0bff917 	ldw	r2,-28(fp)
81102e14:	10800060 	cmpeqi	r2,r2,1
81102e18:	1009883a 	mov	r4,r2
81102e1c:	e0fffa03 	ldbu	r3,-24(fp)
81102e20:	e0bffe03 	ldbu	r2,-8(fp)
81102e24:	10bfffc4 	addi	r2,r2,-1
81102e28:	1884803a 	cmplt	r2,r3,r2
81102e2c:	2084703a 	and	r2,r4,r2
81102e30:	10803fcc 	andi	r2,r2,255
81102e34:	103fd11e 	bne	r2,zero,81102d7c <__reset+0xfb0e2d7c>
        bSuccess = FALSE;
      }
    }
	i++;
  }
  if (bSuccess == TRUE){
81102e38:	e0bff917 	ldw	r2,-28(fp)
81102e3c:	10800058 	cmpnei	r2,r2,1
81102e40:	1000211e 	bne	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    if (alt_msgdma_construct_standard_mm_to_mm_descriptor(DmaDevice, &DmaDescriptor, (alt_u32 *)SourceAddressArray[i], (alt_u32 *)DestinationAddressArray[i], TransferSize, ControlBits) != 0){
81102e44:	e0bffa03 	ldbu	r2,-24(fp)
81102e48:	1085883a 	add	r2,r2,r2
81102e4c:	1085883a 	add	r2,r2,r2
81102e50:	1007883a 	mov	r3,r2
81102e54:	e0bffc17 	ldw	r2,-16(fp)
81102e58:	10c5883a 	add	r2,r2,r3
81102e5c:	10800017 	ldw	r2,0(r2)
81102e60:	1009883a 	mov	r4,r2
81102e64:	e0bffa03 	ldbu	r2,-24(fp)
81102e68:	1085883a 	add	r2,r2,r2
81102e6c:	1085883a 	add	r2,r2,r2
81102e70:	1007883a 	mov	r3,r2
81102e74:	e0bffd17 	ldw	r2,-12(fp)
81102e78:	10c5883a 	add	r2,r2,r3
81102e7c:	10800017 	ldw	r2,0(r2)
81102e80:	1007883a 	mov	r3,r2
81102e84:	e0800317 	ldw	r2,12(fp)
81102e88:	d8800115 	stw	r2,4(sp)
81102e8c:	e0800217 	ldw	r2,8(fp)
81102e90:	d8800015 	stw	r2,0(sp)
81102e94:	180f883a 	mov	r7,r3
81102e98:	200d883a 	mov	r6,r4
81102e9c:	800b883a 	mov	r5,r16
81102ea0:	e13ffb17 	ldw	r4,-20(fp)
81102ea4:	113738c0 	call	8113738c <alt_msgdma_construct_standard_mm_to_mm_descriptor>
81102ea8:	10000226 	beq	r2,zero,81102eb4 <DMA_MULTIPLE_TRANSFER+0x18c>
      bSuccess = FALSE;
81102eac:	e03ff915 	stw	zero,-28(fp)
81102eb0:	00000506 	br	81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
    } else {
      if (alt_msgdma_standard_descriptor_async_transfer(DmaDevice, &DmaDescriptor) != 0) {
81102eb4:	800b883a 	mov	r5,r16
81102eb8:	e13ffb17 	ldw	r4,-20(fp)
81102ebc:	11386000 	call	81138600 <alt_msgdma_standard_descriptor_async_transfer>
81102ec0:	10000126 	beq	r2,zero,81102ec8 <DMA_MULTIPLE_TRANSFER+0x1a0>
        bSuccess = FALSE;
81102ec4:	e03ff915 	stw	zero,-28(fp)
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
81102ec8:	e0bff917 	ldw	r2,-28(fp)
81102ecc:	10800060 	cmpeqi	r2,r2,1
81102ed0:	1007883a 	mov	r3,r2
81102ed4:	e0800417 	ldw	r2,16(fp)
81102ed8:	10800060 	cmpeqi	r2,r2,1
81102edc:	1884703a 	and	r2,r3,r2
81102ee0:	10803fcc 	andi	r2,r2,255
81102ee4:	10000d26 	beq	r2,zero,81102f1c <DMA_MULTIPLE_TRANSFER+0x1f4>
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102ee8:	00000706 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      if (WaitPeriodUs == DMA_DEFAULT_WAIT_PERIOD){
81102eec:	e0800517 	ldw	r2,20(fp)
81102ef0:	1000031e 	bne	r2,zero,81102f00 <DMA_MULTIPLE_TRANSFER+0x1d8>
    	usleep(1000);
81102ef4:	0100fa04 	movi	r4,1000
81102ef8:	11263140 	call	81126314 <usleep>
81102efc:	00000206 	br	81102f08 <DMA_MULTIPLE_TRANSFER+0x1e0>
      } else {
    	usleep(WaitPeriodUs);
81102f00:	e1000517 	ldw	r4,20(fp)
81102f04:	11263140 	call	81126314 <usleep>
      }
    }
  }

  if ((bSuccess == TRUE) & (bWait == DMA_WAIT)) {
    while (IORD_ALTERA_MSGDMA_CSR_STATUS (DmaDevice->csr_base) & ALTERA_MSGDMA_CSR_BUSY_MASK) {
81102f08:	e0bffb17 	ldw	r2,-20(fp)
81102f0c:	10800317 	ldw	r2,12(r2)
81102f10:	10800037 	ldwio	r2,0(r2)
81102f14:	1080004c 	andi	r2,r2,1
81102f18:	103ff41e 	bne	r2,zero,81102eec <__reset+0xfb0e2eec>
    	usleep(WaitPeriodUs);
      }
    }
  }
  
  return bSuccess;
81102f1c:	e0bff917 	ldw	r2,-28(fp)
}
81102f20:	e6ffff04 	addi	sp,fp,-4
81102f24:	dfc00217 	ldw	ra,8(sp)
81102f28:	df000117 	ldw	fp,4(sp)
81102f2c:	dc000017 	ldw	r16,0(sp)
81102f30:	dec00304 	addi	sp,sp,12
81102f34:	f800283a 	ret

81102f38 <POWER_Read>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

bool POWER_Read(alt_u32 szVol[POWER_PORT_NUM]) {
81102f38:	deffef04 	addi	sp,sp,-68
81102f3c:	de00012e 	bgeu	sp,et,81102f44 <POWER_Read+0xc>
81102f40:	003b68fa 	trap	3
81102f44:	dfc01015 	stw	ra,64(sp)
81102f48:	df000f15 	stw	fp,60(sp)
81102f4c:	df000f04 	addi	fp,sp,60
81102f50:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess = TRUE;
81102f54:	00800044 	movi	r2,1
81102f58:	e0bff315 	stw	r2,-52(fp)
	int i, c, nPortIndex = 0;
81102f5c:	e03ff615 	stw	zero,-40(fp)
	int szPortNum[] = { POWER_DEVICE0_PORT_NUM, POWER_DEVICE1_PORT_NUM };
81102f60:	00800204 	movi	r2,8
81102f64:	e0bffc15 	stw	r2,-16(fp)
81102f68:	00800104 	movi	r2,4
81102f6c:	e0bffd15 	stw	r2,-12(fp)
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
81102f70:	00800044 	movi	r2,1
81102f74:	e0bff715 	stw	r2,-36(fp)
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
81102f78:	00800044 	movi	r2,1
81102f7c:	e0bff815 	stw	r2,-32(fp)
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
81102f80:	e03ff915 	stw	zero,-28(fp)
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
81102f84:	e03ff515 	stw	zero,-44(fp)
81102f88:	00009206 	br	811031d4 <POWER_Read+0x29c>
		NextChannel = 0;
81102f8c:	e03ffa05 	stb	zero,-24(fp)
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
81102f90:	e0bff517 	ldw	r2,-44(fp)
81102f94:	10c03fcc 	andi	r3,r2,255
81102f98:	e13ffa03 	ldbu	r4,-24(fp)
81102f9c:	e0bfff17 	ldw	r2,-4(fp)
81102fa0:	d8800115 	stw	r2,4(sp)
81102fa4:	e0bff917 	ldw	r2,-28(fp)
81102fa8:	d8800015 	stw	r2,0(sp)
81102fac:	e1fff817 	ldw	r7,-32(fp)
81102fb0:	e1bff717 	ldw	r6,-36(fp)
81102fb4:	200b883a 	mov	r5,r4
81102fb8:	1809883a 	mov	r4,r3
81102fbc:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81102fc0:	e0bff315 	stw	r2,-52(fp)
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81102fc4:	e03ff415 	stw	zero,-48(fp)
81102fc8:	00007406 	br	8110319c <POWER_Read+0x264>
			NextChannel = i + 1;
81102fcc:	e0bff417 	ldw	r2,-48(fp)
81102fd0:	10800044 	addi	r2,r2,1
81102fd4:	e0bffa05 	stb	r2,-24(fp)
			bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &Value32);
81102fd8:	e0bff517 	ldw	r2,-44(fp)
81102fdc:	10c03fcc 	andi	r3,r2,255
81102fe0:	e13ffa03 	ldbu	r4,-24(fp)
81102fe4:	e0bffe04 	addi	r2,fp,-8
81102fe8:	d8800115 	stw	r2,4(sp)
81102fec:	e0bff917 	ldw	r2,-28(fp)
81102ff0:	d8800015 	stw	r2,0(sp)
81102ff4:	e1fff817 	ldw	r7,-32(fp)
81102ff8:	e1bff717 	ldw	r6,-36(fp)
81102ffc:	200b883a 	mov	r5,r4
81103000:	1809883a 	mov	r4,r3
81103004:	1106cc80 	call	81106cc8 <POWER_SPI_RW>
81103008:	e0bff315 	stw	r2,-52(fp)
			if (bSuccess) {
8110300c:	e0bff317 	ldw	r2,-52(fp)
81103010:	10005026 	beq	r2,zero,81103154 <POWER_Read+0x21c>
				HEAD = (Value32 >> 30) & 0x03;
81103014:	e0bffe17 	ldw	r2,-8(fp)
81103018:	1004d7ba 	srli	r2,r2,30
8110301c:	e0bffa45 	stb	r2,-23(fp)
				Channel = (Value32 >> 1) & 0x07;
81103020:	e0bffe17 	ldw	r2,-8(fp)
81103024:	1004d07a 	srli	r2,r2,1
81103028:	108001cc 	andi	r2,r2,7
8110302c:	e0bffa85 	stb	r2,-22(fp)
				SIGN = (Value32 >> 4) & 0x01;
81103030:	e0bffe17 	ldw	r2,-8(fp)
81103034:	1004d13a 	srli	r2,r2,4
81103038:	1080004c 	andi	r2,r2,1
8110303c:	e0bffac5 	stb	r2,-21(fp)
				SGL = (Value32 >> 5) & 0x01;
81103040:	e0bffe17 	ldw	r2,-8(fp)
81103044:	1004d17a 	srli	r2,r2,5
81103048:	1080004c 	andi	r2,r2,1
8110304c:	e0bffb05 	stb	r2,-20(fp)
				PARITY = Value32 & 0x01;
81103050:	e0bffe17 	ldw	r2,-8(fp)
81103054:	1080004c 	andi	r2,r2,1
81103058:	e0bffb45 	stb	r2,-19(fp)
				if (HEAD != 0) {
8110305c:	e0bffa43 	ldbu	r2,-23(fp)
81103060:	10000d26 	beq	r2,zero,81103098 <POWER_Read+0x160>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected HEAD\r\n", i);
81103064:	e1bff417 	ldw	r6,-48(fp)
81103068:	01604534 	movhi	r5,33044
8110306c:	2969f904 	addi	r5,r5,-22556
81103070:	01204534 	movhi	r4,33044
81103074:	213acb04 	addi	r4,r4,-5332
81103078:	11115b40 	call	811115b4 <sprintf>
					debug(fp, cDebugBuffer);
8110307c:	d0a04d17 	ldw	r2,-32460(gp)
81103080:	01604534 	movhi	r5,33044
81103084:	297acb04 	addi	r5,r5,-5332
81103088:	1009883a 	mov	r4,r2
8110308c:	110fe4c0 	call	8110fe4c <fprintf>
#endif
					bSuccess = FALSE;
81103090:	e03ff315 	stw	zero,-52(fp)
81103094:	00002206 	br	81103120 <POWER_Read+0x1e8>
				} else if (Channel != i) {
81103098:	e0fffa83 	ldbu	r3,-22(fp)
8110309c:	e0bff417 	ldw	r2,-48(fp)
811030a0:	18801026 	beq	r3,r2,811030e4 <POWER_Read+0x1ac>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer,
811030a4:	e0bffa83 	ldbu	r2,-22(fp)
811030a8:	d8800015 	stw	r2,0(sp)
811030ac:	e1fff417 	ldw	r7,-48(fp)
811030b0:	e1bff417 	ldw	r6,-48(fp)
811030b4:	01604534 	movhi	r5,33044
811030b8:	2969ff04 	addi	r5,r5,-22532
811030bc:	01204534 	movhi	r4,33044
811030c0:	213acb04 	addi	r4,r4,-5332
811030c4:	11115b40 	call	811115b4 <sprintf>
							"[%d]Unexpected Channel. Expected:%d, Read:%d\r\n",
							i, i, Channel);
					debug(fp, cDebugBuffer);
811030c8:	d0a04d17 	ldw	r2,-32460(gp)
811030cc:	01604534 	movhi	r5,33044
811030d0:	297acb04 	addi	r5,r5,-5332
811030d4:	1009883a 	mov	r4,r2
811030d8:	110fe4c0 	call	8110fe4c <fprintf>
#endif
					bSuccess = FALSE;
811030dc:	e03ff315 	stw	zero,-52(fp)
811030e0:	00000f06 	br	81103120 <POWER_Read+0x1e8>
				} else if (SIGN ^ bSIGN) {
811030e4:	e0fffac3 	ldbu	r3,-21(fp)
811030e8:	e0bff817 	ldw	r2,-32(fp)
811030ec:	18800c26 	beq	r3,r2,81103120 <POWER_Read+0x1e8>
#ifdef DEBUG_ON
					sprintf(cDebugBuffer, "[%d]Unexpected SIGN\r\n", i);
811030f0:	e1bff417 	ldw	r6,-48(fp)
811030f4:	01604534 	movhi	r5,33044
811030f8:	296a0b04 	addi	r5,r5,-22484
811030fc:	01204534 	movhi	r4,33044
81103100:	213acb04 	addi	r4,r4,-5332
81103104:	11115b40 	call	811115b4 <sprintf>
					debug(fp, cDebugBuffer);
81103108:	d0a04d17 	ldw	r2,-32460(gp)
8110310c:	01604534 	movhi	r5,33044
81103110:	297acb04 	addi	r5,r5,-5332
81103114:	1009883a 	mov	r4,r2
81103118:	110fe4c0 	call	8110fe4c <fprintf>
#endif
					bSuccess = FALSE;
8110311c:	e03ff315 	stw	zero,-52(fp)
					sprintf(cDebugBuffer, "[%d]Unexpected SGL\r\n", i);
					debug(fp, cDebugBuffer);
#endif
					bSuccess = FALSE;
				}
				if (bSuccess)
81103120:	e0bff317 	ldw	r2,-52(fp)
81103124:	10001a26 	beq	r2,zero,81103190 <POWER_Read+0x258>
					szVol[nPortIndex++] = Value32; //(Value32 >> 6) & 0xFFFFFF; // 24 bits
81103128:	e0bff617 	ldw	r2,-40(fp)
8110312c:	10c00044 	addi	r3,r2,1
81103130:	e0fff615 	stw	r3,-40(fp)
81103134:	1085883a 	add	r2,r2,r2
81103138:	1085883a 	add	r2,r2,r2
8110313c:	1007883a 	mov	r3,r2
81103140:	e0bfff17 	ldw	r2,-4(fp)
81103144:	10c5883a 	add	r2,r2,r3
81103148:	e0fffe17 	ldw	r3,-8(fp)
8110314c:	10c00015 	stw	r3,0(r2)
81103150:	00000f06 	br	81103190 <POWER_Read+0x258>
			} else {
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "SPI Read Error\r\n");
81103154:	00e04534 	movhi	r3,33044
81103158:	18facb04 	addi	r3,r3,-5332
8110315c:	00a04534 	movhi	r2,33044
81103160:	10aa1104 	addi	r2,r2,-22460
81103164:	1009883a 	mov	r4,r2
81103168:	00800444 	movi	r2,17
8110316c:	100d883a 	mov	r6,r2
81103170:	200b883a 	mov	r5,r4
81103174:	1809883a 	mov	r4,r3
81103178:	1110e4c0 	call	81110e4c <memcpy>
				debug(fp, cDebugBuffer);
8110317c:	d0a04d17 	ldw	r2,-32460(gp)
81103180:	01604534 	movhi	r5,33044
81103184:	297acb04 	addi	r5,r5,-5332
81103188:	1009883a 	mov	r4,r2
8110318c:	110fe4c0 	call	8110fe4c <fprintf>
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
		NextChannel = 0;
		bSuccess = POWER_SPI_RW(c, NextChannel, bEN, bSIGN, bSGL, &szVol[0]); // set conversion channel: 0
		for (i = 0; i < szPortNum[c] && bSuccess; i++) {
81103190:	e0bff417 	ldw	r2,-48(fp)
81103194:	10800044 	addi	r2,r2,1
81103198:	e0bff415 	stw	r2,-48(fp)
8110319c:	e0bff517 	ldw	r2,-44(fp)
811031a0:	1085883a 	add	r2,r2,r2
811031a4:	1085883a 	add	r2,r2,r2
811031a8:	e0fff304 	addi	r3,fp,-52
811031ac:	1885883a 	add	r2,r3,r2
811031b0:	10800904 	addi	r2,r2,36
811031b4:	10800017 	ldw	r2,0(r2)
811031b8:	e0fff417 	ldw	r3,-48(fp)
811031bc:	1880020e 	bge	r3,r2,811031c8 <POWER_Read+0x290>
811031c0:	e0bff317 	ldw	r2,-52(fp)
811031c4:	103f811e 	bne	r2,zero,81102fcc <__reset+0xfb0e2fcc>
	alt_u32 Value32;
	alt_u8 NextChannel, Channel, HEAD, SIGN, SGL, PARITY;
	const bool bEN = TRUE; // alwasy update next conversion channel
	const bool bSIGN = TRUE; // VolDrop = CH1-CH0
	const bool bSGL = FALSE; // GSGL=FALSE: Diff
	for (c = 0; c < POWER_DEVICE_NUM && bSuccess; c++) {
811031c8:	e0bff517 	ldw	r2,-44(fp)
811031cc:	10800044 	addi	r2,r2,1
811031d0:	e0bff515 	stw	r2,-44(fp)
811031d4:	e0bff517 	ldw	r2,-44(fp)
811031d8:	10800088 	cmpgei	r2,r2,2
811031dc:	1000021e 	bne	r2,zero,811031e8 <POWER_Read+0x2b0>
811031e0:	e0bff317 	ldw	r2,-52(fp)
811031e4:	103f691e 	bne	r2,zero,81102f8c <__reset+0xfb0e2f8c>
				debug(fp, cDebugBuffer);
#endif
			}
		} // for i
	} // for c
	return bSuccess;
811031e8:	e0bff317 	ldw	r2,-52(fp)
}
811031ec:	e037883a 	mov	sp,fp
811031f0:	dfc00117 	ldw	ra,4(sp)
811031f4:	df000017 	ldw	fp,0(sp)
811031f8:	dec00204 	addi	sp,sp,8
811031fc:	f800283a 	ret

81103200 <TEMP_Read>:

bool TEMP_Read(alt_8 *pFpgaTemp, alt_8 *pBoardTemp) {
81103200:	defff904 	addi	sp,sp,-28
81103204:	de00012e 	bgeu	sp,et,8110320c <TEMP_Read+0xc>
81103208:	003b68fa 	trap	3
8110320c:	dfc00615 	stw	ra,24(sp)
81103210:	df000515 	stw	fp,20(sp)
81103214:	df000504 	addi	fp,sp,20
81103218:	e13ffe15 	stw	r4,-8(fp)
8110321c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
	const alt_u8 DeviceAddr = 0x30;
81103220:	00800c04 	movi	r2,48
81103224:	e0bffd85 	stb	r2,-10(fp)
	alt_8 FpgaTemp, BoardTemp;
	char Data;

	// read local temp
	bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x00,
81103228:	e0bffd83 	ldbu	r2,-10(fp)
8110322c:	10c03fcc 	andi	r3,r2,255
81103230:	18c0201c 	xori	r3,r3,128
81103234:	18ffe004 	addi	r3,r3,-128
81103238:	e0bffdc4 	addi	r2,fp,-9
8110323c:	d8800015 	stw	r2,0(sp)
81103240:	000f883a 	mov	r7,zero
81103244:	180d883a 	mov	r6,r3
81103248:	01600034 	movhi	r5,32768
8110324c:	29426004 	addi	r5,r5,2432
81103250:	01200034 	movhi	r4,32768
81103254:	21026404 	addi	r4,r4,2448
81103258:	1105ac00 	call	81105ac0 <I2C_Read>
8110325c:	e0bffc15 	stw	r2,-16(fp)
			(alt_u8 *) &Data);
	if (bSuccess)
81103260:	e0bffc17 	ldw	r2,-16(fp)
81103264:	10000226 	beq	r2,zero,81103270 <TEMP_Read+0x70>
		BoardTemp = Data;
81103268:	e0bffdc3 	ldbu	r2,-9(fp)
8110326c:	e0bffd45 	stb	r2,-11(fp)

	// read remote temp
	if (bSuccess) {
81103270:	e0bffc17 	ldw	r2,-16(fp)
81103274:	10001226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
		bSuccess = I2C_Read(TEMP_SCL_BASE, TEMP_SDA_BASE, DeviceAddr, 0x01,
81103278:	e0bffd83 	ldbu	r2,-10(fp)
8110327c:	10c03fcc 	andi	r3,r2,255
81103280:	18c0201c 	xori	r3,r3,128
81103284:	18ffe004 	addi	r3,r3,-128
81103288:	e0bffdc4 	addi	r2,fp,-9
8110328c:	d8800015 	stw	r2,0(sp)
81103290:	01c00044 	movi	r7,1
81103294:	180d883a 	mov	r6,r3
81103298:	01600034 	movhi	r5,32768
8110329c:	29426004 	addi	r5,r5,2432
811032a0:	01200034 	movhi	r4,32768
811032a4:	21026404 	addi	r4,r4,2448
811032a8:	1105ac00 	call	81105ac0 <I2C_Read>
811032ac:	e0bffc15 	stw	r2,-16(fp)
				(alt_u8 *) &Data);
		if (bSuccess)
811032b0:	e0bffc17 	ldw	r2,-16(fp)
811032b4:	10000226 	beq	r2,zero,811032c0 <TEMP_Read+0xc0>
			FpgaTemp = Data;
811032b8:	e0bffdc3 	ldbu	r2,-9(fp)
811032bc:	e0bffd05 	stb	r2,-12(fp)
	}
	//
	if (bSuccess) {
811032c0:	e0bffc17 	ldw	r2,-16(fp)
811032c4:	10000626 	beq	r2,zero,811032e0 <TEMP_Read+0xe0>
		*pFpgaTemp = FpgaTemp;
811032c8:	e0bffe17 	ldw	r2,-8(fp)
811032cc:	e0fffd03 	ldbu	r3,-12(fp)
811032d0:	10c00005 	stb	r3,0(r2)
		*pBoardTemp = BoardTemp;
811032d4:	e0bfff17 	ldw	r2,-4(fp)
811032d8:	e0fffd43 	ldbu	r3,-11(fp)
811032dc:	10c00005 	stb	r3,0(r2)
	}

	return bSuccess;
811032e0:	e0bffc17 	ldw	r2,-16(fp)
}
811032e4:	e037883a 	mov	sp,fp
811032e8:	dfc00117 	ldw	ra,4(sp)
811032ec:	df000017 	ldw	fp,0(sp)
811032f0:	dec00204 	addi	sp,sp,8
811032f4:	f800283a 	ret

811032f8 <sense_log_temp>:

bool sense_log_temp(alt_u8 *FpgaTemp, alt_u8 *BoardTemp) {
811032f8:	defffb04 	addi	sp,sp,-20
811032fc:	de00012e 	bgeu	sp,et,81103304 <sense_log_temp+0xc>
81103300:	003b68fa 	trap	3
81103304:	dfc00415 	stw	ra,16(sp)
81103308:	df000315 	stw	fp,12(sp)
8110330c:	df000304 	addi	fp,sp,12
81103310:	e13ffe15 	stw	r4,-8(fp)
81103314:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;

	// show temp
	bSuccess = TEMP_Read((alt_8*) FpgaTemp, (alt_8*) BoardTemp);
81103318:	e17fff17 	ldw	r5,-4(fp)
8110331c:	e13ffe17 	ldw	r4,-8(fp)
81103320:	11032000 	call	81103200 <TEMP_Read>
81103324:	e0bffd15 	stw	r2,-12(fp)

	return (bSuccess);
81103328:	e0bffd17 	ldw	r2,-12(fp)
}
8110332c:	e037883a 	mov	sp,fp
81103330:	dfc00117 	ldw	ra,4(sp)
81103334:	df000017 	ldw	fp,0(sp)
81103338:	dec00204 	addi	sp,sp,8
8110333c:	f800283a 	ret

81103340 <sense_log>:

void sense_log(void) {
81103340:	deff0404 	addi	sp,sp,-1008
81103344:	de00012e 	bgeu	sp,et,8110334c <sense_log+0xc>
81103348:	003b68fa 	trap	3
8110334c:	dfc0fb15 	stw	ra,1004(sp)
81103350:	df00fa15 	stw	fp,1000(sp)
81103354:	dd40f915 	stw	r21,996(sp)
81103358:	dd00f815 	stw	r20,992(sp)
8110335c:	dcc0f715 	stw	r19,988(sp)
81103360:	dc80f615 	stw	r18,984(sp)
81103364:	dc40f515 	stw	r17,980(sp)
81103368:	dc00f415 	stw	r16,976(sp)
8110336c:	df00fa04 	addi	fp,sp,1000
	bool bSuccess;
	int i;
	const float fRef = 5.0; // 5.0V
81103370:	00902834 	movhi	r2,16544
81103374:	e0bf0e15 	stw	r2,-968(fp)
	float fVolDrop, fCurrent, fPower, fVol;
	alt_u32 szVol[POWER_PORT_NUM];
	alt_u32 SIG, MSB, RESULT;
	float szRes[] = { 0.003, 0.001, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003,
81103378:	008ed174 	movhi	r2,15173
8110337c:	10a6e984 	addi	r2,r2,-25690
81103380:	e0bf2215 	stw	r2,-888(fp)
81103384:	008ea0f4 	movhi	r2,14979
81103388:	10849bc4 	addi	r2,r2,4719
8110338c:	e0bf2315 	stw	r2,-884(fp)
81103390:	008ed174 	movhi	r2,15173
81103394:	10a6e984 	addi	r2,r2,-25690
81103398:	e0bf2415 	stw	r2,-880(fp)
8110339c:	008ed174 	movhi	r2,15173
811033a0:	10a6e984 	addi	r2,r2,-25690
811033a4:	e0bf2515 	stw	r2,-876(fp)
811033a8:	008ed174 	movhi	r2,15173
811033ac:	10a6e984 	addi	r2,r2,-25690
811033b0:	e0bf2615 	stw	r2,-872(fp)
811033b4:	008ed174 	movhi	r2,15173
811033b8:	10a6e984 	addi	r2,r2,-25690
811033bc:	e0bf2715 	stw	r2,-868(fp)
811033c0:	008ed174 	movhi	r2,15173
811033c4:	10a6e984 	addi	r2,r2,-25690
811033c8:	e0bf2815 	stw	r2,-864(fp)
811033cc:	008ed174 	movhi	r2,15173
811033d0:	10a6e984 	addi	r2,r2,-25690
811033d4:	e0bf2915 	stw	r2,-860(fp)
811033d8:	008ed174 	movhi	r2,15173
811033dc:	10a6e984 	addi	r2,r2,-25690
811033e0:	e0bf2a15 	stw	r2,-856(fp)
811033e4:	008ed174 	movhi	r2,15173
811033e8:	10a6e984 	addi	r2,r2,-25690
811033ec:	e0bf2b15 	stw	r2,-852(fp)
811033f0:	008ed174 	movhi	r2,15173
811033f4:	10a6e984 	addi	r2,r2,-25690
811033f8:	e0bf2c15 	stw	r2,-848(fp)
811033fc:	008ed174 	movhi	r2,15173
81103400:	10a6e984 	addi	r2,r2,-25690
81103404:	e0bf2d15 	stw	r2,-844(fp)
			0.003, 0.003, 0.003, 0.003 };
	float szRefVol[] = { 0.9, 0.9, 3.0, 0.9, 1.8, 2.5, 1.8, 2.5, 1.1, 1.4, 3.3,
81103408:	008fd9b4 	movhi	r2,16230
8110340c:	10999984 	addi	r2,r2,26214
81103410:	e0bf2e15 	stw	r2,-840(fp)
81103414:	008fd9b4 	movhi	r2,16230
81103418:	10999984 	addi	r2,r2,26214
8110341c:	e0bf2f15 	stw	r2,-836(fp)
81103420:	00901034 	movhi	r2,16448
81103424:	e0bf3015 	stw	r2,-832(fp)
81103428:	008fd9b4 	movhi	r2,16230
8110342c:	10999984 	addi	r2,r2,26214
81103430:	e0bf3115 	stw	r2,-828(fp)
81103434:	008ff9b4 	movhi	r2,16358
81103438:	10999984 	addi	r2,r2,26214
8110343c:	e0bf3215 	stw	r2,-824(fp)
81103440:	00900834 	movhi	r2,16416
81103444:	e0bf3315 	stw	r2,-820(fp)
81103448:	008ff9b4 	movhi	r2,16358
8110344c:	10999984 	addi	r2,r2,26214
81103450:	e0bf3415 	stw	r2,-816(fp)
81103454:	00900834 	movhi	r2,16416
81103458:	e0bf3515 	stw	r2,-812(fp)
8110345c:	008fe374 	movhi	r2,16269
81103460:	10b33344 	addi	r2,r2,-13107
81103464:	e0bf3615 	stw	r2,-808(fp)
81103468:	008fecf4 	movhi	r2,16307
8110346c:	108cccc4 	addi	r2,r2,13107
81103470:	e0bf3715 	stw	r2,-804(fp)
81103474:	009014f4 	movhi	r2,16467
81103478:	108cccc4 	addi	r2,r2,13107
8110347c:	e0bf3815 	stw	r2,-800(fp)
81103480:	00900834 	movhi	r2,16416
81103484:	e0bf3915 	stw	r2,-796(fp)
			2.5 };
	char szName[][64] = { "VCCD_PLL", "VCC0P9", "GPIO_VCCIOPD", "VCCHIP",
81103488:	00a04534 	movhi	r2,33044
8110348c:	10aa4804 	addi	r2,r2,-22240
81103490:	e0ff3a04 	addi	r3,fp,-792
81103494:	1009883a 	mov	r4,r2
81103498:	0080c004 	movi	r2,768
8110349c:	100d883a 	mov	r6,r2
811034a0:	200b883a 	mov	r5,r4
811034a4:	1809883a 	mov	r4,r3
811034a8:	1110e4c0 	call	81110e4c <memcpy>
			"VCC1P8_34R", "HSMA_VCCIO", "VCC1P8_78R", "VCCA_PLL", "VCCL_GXB",
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
811034ac:	e0bf1604 	addi	r2,fp,-936
811034b0:	1009883a 	mov	r4,r2
811034b4:	1102f380 	call	81102f38 <POWER_Read>
811034b8:	e0bf0f15 	stw	r2,-964(fp)
	if (bSuccess) {
811034bc:	e0bf0f17 	ldw	r2,-964(fp)
811034c0:	10016026 	beq	r2,zero,81103a44 <sense_log+0x704>
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811034c4:	e03f0c15 	stw	zero,-976(fp)
811034c8:	00014c06 	br	811039fc <sense_log+0x6bc>
			SIG = (szVol[i] >> 29) & 0x01;
811034cc:	e0bf0c17 	ldw	r2,-976(fp)
811034d0:	1085883a 	add	r2,r2,r2
811034d4:	1085883a 	add	r2,r2,r2
811034d8:	e0ff0c04 	addi	r3,fp,-976
811034dc:	1885883a 	add	r2,r3,r2
811034e0:	10800a04 	addi	r2,r2,40
811034e4:	10800017 	ldw	r2,0(r2)
811034e8:	1004d77a 	srli	r2,r2,29
811034ec:	1080004c 	andi	r2,r2,1
811034f0:	e0bf1015 	stw	r2,-960(fp)
			MSB = (szVol[i] >> 28) & 0x01;
811034f4:	e0bf0c17 	ldw	r2,-976(fp)
811034f8:	1085883a 	add	r2,r2,r2
811034fc:	1085883a 	add	r2,r2,r2
81103500:	e0ff0c04 	addi	r3,fp,-976
81103504:	1885883a 	add	r2,r3,r2
81103508:	10800a04 	addi	r2,r2,40
8110350c:	10800017 	ldw	r2,0(r2)
81103510:	1004d73a 	srli	r2,r2,28
81103514:	1080004c 	andi	r2,r2,1
81103518:	e0bf1115 	stw	r2,-956(fp)
			RESULT = (szVol[i] >> 6) & 0x3FFFFF; // 22 bits
8110351c:	e0bf0c17 	ldw	r2,-976(fp)
81103520:	1085883a 	add	r2,r2,r2
81103524:	1085883a 	add	r2,r2,r2
81103528:	e0ff0c04 	addi	r3,fp,-976
8110352c:	1885883a 	add	r2,r3,r2
81103530:	10800a04 	addi	r2,r2,40
81103534:	10800017 	ldw	r2,0(r2)
81103538:	1006d1ba 	srli	r3,r2,6
8110353c:	00801034 	movhi	r2,64
81103540:	10bfffc4 	addi	r2,r2,-1
81103544:	1884703a 	and	r2,r3,r2
81103548:	e0bf1215 	stw	r2,-952(fp)
			if (MSB == 0)
8110354c:	e0bf1117 	ldw	r2,-956(fp)
81103550:	1000091e 	bne	r2,zero,81103578 <sense_log+0x238>
				fVolDrop = (float) (RESULT) / (float) 0x400000;
81103554:	e13f1217 	ldw	r4,-952(fp)
81103558:	110f1b40 	call	8110f1b4 <__floatunsisf>
8110355c:	1007883a 	mov	r3,r2
81103560:	0152a034 	movhi	r5,19072
81103564:	1809883a 	mov	r4,r3
81103568:	110e83c0 	call	8110e83c <__divsf3>
8110356c:	1007883a 	mov	r3,r2
81103570:	e0ff0d15 	stw	r3,-972(fp)
81103574:	00000106 	br	8110357c <sense_log+0x23c>
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
81103578:	e03f0d15 	stw	zero,-972(fp)
			if (SIG && MSB) {
8110357c:	e0bf1017 	ldw	r2,-960(fp)
81103580:	10002626 	beq	r2,zero,8110361c <sense_log+0x2dc>
81103584:	e0bf1117 	ldw	r2,-956(fp)
81103588:	10002426 	beq	r2,zero,8110361c <sense_log+0x2dc>
				fVol = fRef * 0.5;
8110358c:	014fc034 	movhi	r5,16128
81103590:	e13f0e17 	ldw	r4,-968(fp)
81103594:	110ec840 	call	8110ec84 <__mulsf3>
81103598:	1007883a 	mov	r3,r2
8110359c:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
811035a0:	e0ff3a04 	addi	r3,fp,-792
811035a4:	e0bf0c17 	ldw	r2,-976(fp)
811035a8:	100491ba 	slli	r2,r2,6
811035ac:	18a1883a 	add	r16,r3,r2
811035b0:	e0bf0c17 	ldw	r2,-976(fp)
811035b4:	1085883a 	add	r2,r2,r2
811035b8:	1085883a 	add	r2,r2,r2
811035bc:	e0ff0c04 	addi	r3,fp,-976
811035c0:	1885883a 	add	r2,r3,r2
811035c4:	10800a04 	addi	r2,r2,40
811035c8:	10800017 	ldw	r2,0(r2)
			else
				fVolDrop = 0.0; //always be positive in schematic // -(float)(0x400000-RESULT)/(float)0x400000;
			if (SIG && MSB) {
				fVol = fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Over]\r\n  VolDrop:%f(V)\r\n",
811035cc:	1023883a 	mov	r17,r2
811035d0:	e13f1317 	ldw	r4,-948(fp)
811035d4:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811035d8:	1009883a 	mov	r4,r2
811035dc:	180b883a 	mov	r5,r3
811035e0:	d9000015 	stw	r4,0(sp)
811035e4:	d9400115 	stw	r5,4(sp)
811035e8:	880f883a 	mov	r7,r17
811035ec:	800d883a 	mov	r6,r16
811035f0:	01604534 	movhi	r5,33044
811035f4:	296a1604 	addi	r5,r5,-22440
811035f8:	01204534 	movhi	r4,33044
811035fc:	213acb04 	addi	r4,r4,-5332
81103600:	11115b40 	call	811115b4 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
81103604:	d0a04d17 	ldw	r2,-32460(gp)
81103608:	01604534 	movhi	r5,33044
8110360c:	297acb04 	addi	r5,r5,-5332
81103610:	1009883a 	mov	r4,r2
81103614:	110fe4c0 	call	8110fe4c <fprintf>
81103618:	0000f506 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (SIG && !MSB) {
8110361c:	e0bf1017 	ldw	r2,-960(fp)
81103620:	10006426 	beq	r2,zero,811037b4 <sense_log+0x474>
81103624:	e0bf1117 	ldw	r2,-956(fp)
81103628:	1000621e 	bne	r2,zero,811037b4 <sense_log+0x474>
				fVol = fRef * 0.5 * fVolDrop;
8110362c:	e13f0e17 	ldw	r4,-968(fp)
81103630:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81103634:	1011883a 	mov	r8,r2
81103638:	1813883a 	mov	r9,r3
8110363c:	000d883a 	mov	r6,zero
81103640:	01cff834 	movhi	r7,16352
81103644:	4009883a 	mov	r4,r8
81103648:	480b883a 	mov	r5,r9
8110364c:	110f2ac0 	call	8110f2ac <__muldf3>
81103650:	1009883a 	mov	r4,r2
81103654:	180b883a 	mov	r5,r3
81103658:	2021883a 	mov	r16,r4
8110365c:	2823883a 	mov	r17,r5
81103660:	e13f0d17 	ldw	r4,-972(fp)
81103664:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81103668:	1009883a 	mov	r4,r2
8110366c:	180b883a 	mov	r5,r3
81103670:	200d883a 	mov	r6,r4
81103674:	280f883a 	mov	r7,r5
81103678:	8009883a 	mov	r4,r16
8110367c:	880b883a 	mov	r5,r17
81103680:	110f2ac0 	call	8110f2ac <__muldf3>
81103684:	1009883a 	mov	r4,r2
81103688:	180b883a 	mov	r5,r3
8110368c:	2005883a 	mov	r2,r4
81103690:	2807883a 	mov	r3,r5
81103694:	1009883a 	mov	r4,r2
81103698:	180b883a 	mov	r5,r3
8110369c:	110fae40 	call	8110fae4 <__truncdfsf2>
811036a0:	1007883a 	mov	r3,r2
811036a4:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
811036a8:	e0bf0c17 	ldw	r2,-976(fp)
811036ac:	1085883a 	add	r2,r2,r2
811036b0:	1085883a 	add	r2,r2,r2
811036b4:	e0ff0c04 	addi	r3,fp,-976
811036b8:	1885883a 	add	r2,r3,r2
811036bc:	10801604 	addi	r2,r2,88
811036c0:	10c00017 	ldw	r3,0(r2)
811036c4:	180b883a 	mov	r5,r3
811036c8:	e13f0d17 	ldw	r4,-972(fp)
811036cc:	110e83c0 	call	8110e83c <__divsf3>
811036d0:	1007883a 	mov	r3,r2
811036d4:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
811036d8:	e0bf0c17 	ldw	r2,-976(fp)
811036dc:	1085883a 	add	r2,r2,r2
811036e0:	1085883a 	add	r2,r2,r2
811036e4:	e0ff0c04 	addi	r3,fp,-976
811036e8:	1885883a 	add	r2,r3,r2
811036ec:	10802204 	addi	r2,r2,136
811036f0:	10c00017 	ldw	r3,0(r2)
811036f4:	e17f1417 	ldw	r5,-944(fp)
811036f8:	1809883a 	mov	r4,r3
811036fc:	110ec840 	call	8110ec84 <__mulsf3>
81103700:	1007883a 	mov	r3,r2
81103704:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
81103708:	e0ff3a04 	addi	r3,fp,-792
8110370c:	e0bf0c17 	ldw	r2,-976(fp)
81103710:	100491ba 	slli	r2,r2,6
81103714:	18a9883a 	add	r20,r3,r2
81103718:	e0bf0c17 	ldw	r2,-976(fp)
8110371c:	1085883a 	add	r2,r2,r2
81103720:	1085883a 	add	r2,r2,r2
81103724:	e0ff0c04 	addi	r3,fp,-976
81103728:	1885883a 	add	r2,r3,r2
8110372c:	10800a04 	addi	r2,r2,40
81103730:	10800017 	ldw	r2,0(r2)
			} else if (SIG && !MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
81103734:	102b883a 	mov	r21,r2
81103738:	e13f0d17 	ldw	r4,-972(fp)
8110373c:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81103740:	1021883a 	mov	r16,r2
81103744:	1823883a 	mov	r17,r3
81103748:	e13f1417 	ldw	r4,-944(fp)
8110374c:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81103750:	1025883a 	mov	r18,r2
81103754:	1827883a 	mov	r19,r3
81103758:	e13f1517 	ldw	r4,-940(fp)
8110375c:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81103760:	1009883a 	mov	r4,r2
81103764:	180b883a 	mov	r5,r3
81103768:	d9000415 	stw	r4,16(sp)
8110376c:	d9400515 	stw	r5,20(sp)
81103770:	dc800215 	stw	r18,8(sp)
81103774:	dcc00315 	stw	r19,12(sp)
81103778:	dc000015 	stw	r16,0(sp)
8110377c:	dc400115 	stw	r17,4(sp)
81103780:	a80f883a 	mov	r7,r21
81103784:	a00d883a 	mov	r6,r20
81103788:	01604534 	movhi	r5,33044
8110378c:	296a1f04 	addi	r5,r5,-22404
81103790:	01204534 	movhi	r4,33044
81103794:	213acb04 	addi	r4,r4,-5332
81103798:	11115b40 	call	811115b4 <sprintf>
						"[%s:%06XH,Pos]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
8110379c:	d0a04d17 	ldw	r2,-32460(gp)
811037a0:	01604534 	movhi	r5,33044
811037a4:	297acb04 	addi	r5,r5,-5332
811037a8:	1009883a 	mov	r4,r2
811037ac:	110fe4c0 	call	8110fe4c <fprintf>
811037b0:	00008f06 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && MSB) {
811037b4:	e0bf1017 	ldw	r2,-960(fp)
811037b8:	1000641e 	bne	r2,zero,8110394c <sense_log+0x60c>
811037bc:	e0bf1117 	ldw	r2,-956(fp)
811037c0:	10006226 	beq	r2,zero,8110394c <sense_log+0x60c>
				fVol = fRef * 0.5 * fVolDrop;
811037c4:	e13f0e17 	ldw	r4,-968(fp)
811037c8:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811037cc:	1011883a 	mov	r8,r2
811037d0:	1813883a 	mov	r9,r3
811037d4:	000d883a 	mov	r6,zero
811037d8:	01cff834 	movhi	r7,16352
811037dc:	4009883a 	mov	r4,r8
811037e0:	480b883a 	mov	r5,r9
811037e4:	110f2ac0 	call	8110f2ac <__muldf3>
811037e8:	1009883a 	mov	r4,r2
811037ec:	180b883a 	mov	r5,r3
811037f0:	2021883a 	mov	r16,r4
811037f4:	2823883a 	mov	r17,r5
811037f8:	e13f0d17 	ldw	r4,-972(fp)
811037fc:	110f9cc0 	call	8110f9cc <__extendsfdf2>
81103800:	1009883a 	mov	r4,r2
81103804:	180b883a 	mov	r5,r3
81103808:	200d883a 	mov	r6,r4
8110380c:	280f883a 	mov	r7,r5
81103810:	8009883a 	mov	r4,r16
81103814:	880b883a 	mov	r5,r17
81103818:	110f2ac0 	call	8110f2ac <__muldf3>
8110381c:	1009883a 	mov	r4,r2
81103820:	180b883a 	mov	r5,r3
81103824:	2005883a 	mov	r2,r4
81103828:	2807883a 	mov	r3,r5
8110382c:	1009883a 	mov	r4,r2
81103830:	180b883a 	mov	r5,r3
81103834:	110fae40 	call	8110fae4 <__truncdfsf2>
81103838:	1007883a 	mov	r3,r2
8110383c:	e0ff1315 	stw	r3,-948(fp)
				fCurrent = fVolDrop / szRes[i];
81103840:	e0bf0c17 	ldw	r2,-976(fp)
81103844:	1085883a 	add	r2,r2,r2
81103848:	1085883a 	add	r2,r2,r2
8110384c:	e0ff0c04 	addi	r3,fp,-976
81103850:	1885883a 	add	r2,r3,r2
81103854:	10801604 	addi	r2,r2,88
81103858:	10c00017 	ldw	r3,0(r2)
8110385c:	180b883a 	mov	r5,r3
81103860:	e13f0d17 	ldw	r4,-972(fp)
81103864:	110e83c0 	call	8110e83c <__divsf3>
81103868:	1007883a 	mov	r3,r2
8110386c:	e0ff1415 	stw	r3,-944(fp)
				fPower = szRefVol[i] * fCurrent;
81103870:	e0bf0c17 	ldw	r2,-976(fp)
81103874:	1085883a 	add	r2,r2,r2
81103878:	1085883a 	add	r2,r2,r2
8110387c:	e0ff0c04 	addi	r3,fp,-976
81103880:	1885883a 	add	r2,r3,r2
81103884:	10802204 	addi	r2,r2,136
81103888:	10c00017 	ldw	r3,0(r2)
8110388c:	e17f1417 	ldw	r5,-944(fp)
81103890:	1809883a 	mov	r4,r3
81103894:	110ec840 	call	8110ec84 <__mulsf3>
81103898:	1007883a 	mov	r3,r2
8110389c:	e0ff1515 	stw	r3,-940(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
811038a0:	e0ff3a04 	addi	r3,fp,-792
811038a4:	e0bf0c17 	ldw	r2,-976(fp)
811038a8:	100491ba 	slli	r2,r2,6
811038ac:	18a9883a 	add	r20,r3,r2
811038b0:	e0bf0c17 	ldw	r2,-976(fp)
811038b4:	1085883a 	add	r2,r2,r2
811038b8:	1085883a 	add	r2,r2,r2
811038bc:	e0ff0c04 	addi	r3,fp,-976
811038c0:	1885883a 	add	r2,r3,r2
811038c4:	10800a04 	addi	r2,r2,40
811038c8:	10800017 	ldw	r2,0(r2)
			} else if (!SIG && MSB) {
				fVol = fRef * 0.5 * fVolDrop;
				fCurrent = fVolDrop / szRes[i];
				fPower = szRefVol[i] * fCurrent;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer,
811038cc:	102b883a 	mov	r21,r2
811038d0:	e13f0d17 	ldw	r4,-972(fp)
811038d4:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811038d8:	1021883a 	mov	r16,r2
811038dc:	1823883a 	mov	r17,r3
811038e0:	e13f1417 	ldw	r4,-944(fp)
811038e4:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811038e8:	1025883a 	mov	r18,r2
811038ec:	1827883a 	mov	r19,r3
811038f0:	e13f1517 	ldw	r4,-940(fp)
811038f4:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811038f8:	1009883a 	mov	r4,r2
811038fc:	180b883a 	mov	r5,r3
81103900:	d9000415 	stw	r4,16(sp)
81103904:	d9400515 	stw	r5,20(sp)
81103908:	dc800215 	stw	r18,8(sp)
8110390c:	dcc00315 	stw	r19,12(sp)
81103910:	dc000015 	stw	r16,0(sp)
81103914:	dc400115 	stw	r17,4(sp)
81103918:	a80f883a 	mov	r7,r21
8110391c:	a00d883a 	mov	r6,r20
81103920:	01604534 	movhi	r5,33044
81103924:	296a2f04 	addi	r5,r5,-22340
81103928:	01204534 	movhi	r4,33044
8110392c:	213acb04 	addi	r4,r4,-5332
81103930:	11115b40 	call	811115b4 <sprintf>
						"[%s:%06XH,Neg]\r\n  VolDrop:%f(V), Current:%f(A), Power:%f(W)\r\n",
						szName[i], (int) szVol[i], fVolDrop, fCurrent, fPower);
				debug(fp, cDebugBuffer);
81103934:	d0a04d17 	ldw	r2,-32460(gp)
81103938:	01604534 	movhi	r5,33044
8110393c:	297acb04 	addi	r5,r5,-5332
81103940:	1009883a 	mov	r4,r2
81103944:	110fe4c0 	call	8110fe4c <fprintf>
81103948:	00002906 	br	811039f0 <sense_log+0x6b0>
#endif
			} else if (!SIG && !MSB) {
8110394c:	e0bf1017 	ldw	r2,-960(fp)
81103950:	1000271e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
81103954:	e0bf1117 	ldw	r2,-956(fp)
81103958:	1000251e 	bne	r2,zero,811039f0 <sense_log+0x6b0>
				fVol = -fRef * 0.5;
8110395c:	e0bf0e17 	ldw	r2,-968(fp)
81103960:	10a0003c 	xorhi	r2,r2,32768
81103964:	014fc034 	movhi	r5,16128
81103968:	1009883a 	mov	r4,r2
8110396c:	110ec840 	call	8110ec84 <__mulsf3>
81103970:	1007883a 	mov	r3,r2
81103974:	e0ff1315 	stw	r3,-948(fp)
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
						szName[i], (int) szVol[i], fVol);
81103978:	e0ff3a04 	addi	r3,fp,-792
8110397c:	e0bf0c17 	ldw	r2,-976(fp)
81103980:	100491ba 	slli	r2,r2,6
81103984:	18a1883a 	add	r16,r3,r2
81103988:	e0bf0c17 	ldw	r2,-976(fp)
8110398c:	1085883a 	add	r2,r2,r2
81103990:	1085883a 	add	r2,r2,r2
81103994:	e0ff0c04 	addi	r3,fp,-976
81103998:	1885883a 	add	r2,r3,r2
8110399c:	10800a04 	addi	r2,r2,40
811039a0:	10800017 	ldw	r2,0(r2)
				debug(fp, cDebugBuffer);
#endif
			} else if (!SIG && !MSB) {
				fVol = -fRef * 0.5;
#ifdef DEBUG_ON
				sprintf(cDebugBuffer, "[%s:%06XH,Under]\r\n  VolDrop:%f(V)\r\n",
811039a4:	1023883a 	mov	r17,r2
811039a8:	e13f1317 	ldw	r4,-948(fp)
811039ac:	110f9cc0 	call	8110f9cc <__extendsfdf2>
811039b0:	1009883a 	mov	r4,r2
811039b4:	180b883a 	mov	r5,r3
811039b8:	d9000015 	stw	r4,0(sp)
811039bc:	d9400115 	stw	r5,4(sp)
811039c0:	880f883a 	mov	r7,r17
811039c4:	800d883a 	mov	r6,r16
811039c8:	01604534 	movhi	r5,33044
811039cc:	296a3f04 	addi	r5,r5,-22276
811039d0:	01204534 	movhi	r4,33044
811039d4:	213acb04 	addi	r4,r4,-5332
811039d8:	11115b40 	call	811115b4 <sprintf>
						szName[i], (int) szVol[i], fVol);
				debug(fp, cDebugBuffer);
811039dc:	d0a04d17 	ldw	r2,-32460(gp)
811039e0:	01604534 	movhi	r5,33044
811039e4:	297acb04 	addi	r5,r5,-5332
811039e8:	1009883a 	mov	r4,r2
811039ec:	110fe4c0 	call	8110fe4c <fprintf>
			"VCCH_GXB", "VCC3P3_HSMC", "HSMB_VCCIO", };

	// show power
	bSuccess = POWER_Read(szVol);
	if (bSuccess) {
		for (i = 0; i < POWER_PORT_NUM && bSuccess; i++) {
811039f0:	e0bf0c17 	ldw	r2,-976(fp)
811039f4:	10800044 	addi	r2,r2,1
811039f8:	e0bf0c15 	stw	r2,-976(fp)
811039fc:	e0bf0c17 	ldw	r2,-976(fp)
81103a00:	10800308 	cmpgei	r2,r2,12
81103a04:	1000021e 	bne	r2,zero,81103a10 <sense_log+0x6d0>
81103a08:	e0bf0f17 	ldw	r2,-964(fp)
81103a0c:	103eaf1e 	bne	r2,zero,811034cc <__reset+0xfb0e34cc>
				debug(fp, cDebugBuffer);
#endif
			}
		}
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "\r\n");
81103a10:	00a04534 	movhi	r2,33044
81103a14:	10bacb04 	addi	r2,r2,-5332
81103a18:	00c00344 	movi	r3,13
81103a1c:	10c00005 	stb	r3,0(r2)
81103a20:	00c00284 	movi	r3,10
81103a24:	10c00045 	stb	r3,1(r2)
81103a28:	10000085 	stb	zero,2(r2)
		debug(fp, cDebugBuffer);
81103a2c:	d0a04d17 	ldw	r2,-32460(gp)
81103a30:	01604534 	movhi	r5,33044
81103a34:	297acb04 	addi	r5,r5,-5332
81103a38:	1009883a 	mov	r4,r2
81103a3c:	110fe4c0 	call	8110fe4c <fprintf>
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
		debug(fp, cDebugBuffer);
#endif
	}
}
81103a40:	00001606 	br	81103a9c <sense_log+0x75c>
		sprintf(cDebugBuffer, "\r\n");
		debug(fp, cDebugBuffer);
#endif
	} else {
#ifdef DEBUG_ON
		sprintf(cDebugBuffer, "Error\r\n");
81103a44:	00a04534 	movhi	r2,33044
81103a48:	10bacb04 	addi	r2,r2,-5332
81103a4c:	00c01144 	movi	r3,69
81103a50:	10c00005 	stb	r3,0(r2)
81103a54:	00c01c84 	movi	r3,114
81103a58:	10c00045 	stb	r3,1(r2)
81103a5c:	00c01c84 	movi	r3,114
81103a60:	10c00085 	stb	r3,2(r2)
81103a64:	00c01bc4 	movi	r3,111
81103a68:	10c000c5 	stb	r3,3(r2)
81103a6c:	00c01c84 	movi	r3,114
81103a70:	10c00105 	stb	r3,4(r2)
81103a74:	00c00344 	movi	r3,13
81103a78:	10c00145 	stb	r3,5(r2)
81103a7c:	00c00284 	movi	r3,10
81103a80:	10c00185 	stb	r3,6(r2)
81103a84:	100001c5 	stb	zero,7(r2)
		debug(fp, cDebugBuffer);
81103a88:	d0a04d17 	ldw	r2,-32460(gp)
81103a8c:	01604534 	movhi	r5,33044
81103a90:	297acb04 	addi	r5,r5,-5332
81103a94:	1009883a 	mov	r4,r2
81103a98:	110fe4c0 	call	8110fe4c <fprintf>
#endif
	}
}
81103a9c:	0001883a 	nop
81103aa0:	e6fffa04 	addi	sp,fp,-24
81103aa4:	dfc00717 	ldw	ra,28(sp)
81103aa8:	df000617 	ldw	fp,24(sp)
81103aac:	dd400517 	ldw	r21,20(sp)
81103ab0:	dd000417 	ldw	r20,16(sp)
81103ab4:	dcc00317 	ldw	r19,12(sp)
81103ab8:	dc800217 	ldw	r18,8(sp)
81103abc:	dc400117 	ldw	r17,4(sp)
81103ac0:	dc000017 	ldw	r16,0(sp)
81103ac4:	dec00804 	addi	sp,sp,32
81103ac8:	f800283a 	ret

81103acc <bSdmaInitM1Dma>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSdmaInitM1Dma(void) {
81103acc:	defffc04 	addi	sp,sp,-16
81103ad0:	de00012e 	bgeu	sp,et,81103ad8 <bSdmaInitM1Dma+0xc>
81103ad4:	003b68fa 	trap	3
81103ad8:	dfc00315 	stw	ra,12(sp)
81103adc:	df000215 	stw	fp,8(sp)
81103ae0:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103ae4:	00800044 	movi	r2,1
81103ae8:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103aec:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM1Dev = alt_msgdma_open((char *) SDMA_DMA_M1_NAME);
81103af0:	01204534 	movhi	r4,33044
81103af4:	212b0804 	addi	r4,r4,-21472
81103af8:	11383900 	call	81138390 <alt_msgdma_open>
81103afc:	d0a03815 	stw	r2,-32544(gp)

	// check if the device was opened
	if (pxDmaM1Dev == NULL) {
81103b00:	d0a03817 	ldw	r2,-32544(gp)
81103b04:	1000021e 	bne	r2,zero,81103b10 <bSdmaInitM1Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103b08:	e03ffe15 	stw	zero,-8(fp)
81103b0c:	00001506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
81103b10:	d0a03817 	ldw	r2,-32544(gp)
81103b14:	10800317 	ldw	r2,12(r2)
81103b18:	10800104 	addi	r2,r2,4
81103b1c:	00c00084 	movi	r3,2
81103b20:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b24:	00000a06 	br	81103b50 <bSdmaInitM1Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103b28:	01000044 	movi	r4,1
81103b2c:	11263140 	call	81126314 <usleep>
			usiCounter++;
81103b30:	e0bfff0b 	ldhu	r2,-4(fp)
81103b34:	10800044 	addi	r2,r2,1
81103b38:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103b3c:	e0bfff0b 	ldhu	r2,-4(fp)
81103b40:	1084e230 	cmpltui	r2,r2,5000
81103b44:	1000021e 	bne	r2,zero,81103b50 <bSdmaInitM1Dma+0x84>
				bStatus = FALSE;
81103b48:	e03ffe15 	stw	zero,-8(fp)
				break;
81103b4c:	00000506 	br	81103b64 <bSdmaInitM1Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b50:	d0a03817 	ldw	r2,-32544(gp)
81103b54:	10800317 	ldw	r2,12(r2)
81103b58:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103b5c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM1Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103b60:	103ff11e 	bne	r2,zero,81103b28 <__reset+0xfb0e3b28>
				break;
			}
		}
	}

	return bStatus;
81103b64:	e0bffe17 	ldw	r2,-8(fp)
}
81103b68:	e037883a 	mov	sp,fp
81103b6c:	dfc00117 	ldw	ra,4(sp)
81103b70:	df000017 	ldw	fp,0(sp)
81103b74:	dec00204 	addi	sp,sp,8
81103b78:	f800283a 	ret

81103b7c <bSdmaInitM2Dma>:

bool bSdmaInitM2Dma(void) {
81103b7c:	defffc04 	addi	sp,sp,-16
81103b80:	de00012e 	bgeu	sp,et,81103b88 <bSdmaInitM2Dma+0xc>
81103b84:	003b68fa 	trap	3
81103b88:	dfc00315 	stw	ra,12(sp)
81103b8c:	df000215 	stw	fp,8(sp)
81103b90:	df000204 	addi	fp,sp,8
	bool bStatus = TRUE;
81103b94:	00800044 	movi	r2,1
81103b98:	e0bffe15 	stw	r2,-8(fp)
	alt_u16 usiCounter = 0;
81103b9c:	e03fff0d 	sth	zero,-4(fp)

	// open dma device
	pxDmaM2Dev = alt_msgdma_open((char *) SDMA_DMA_M2_NAME);
81103ba0:	01204534 	movhi	r4,33044
81103ba4:	212b0d04 	addi	r4,r4,-21452
81103ba8:	11383900 	call	81138390 <alt_msgdma_open>
81103bac:	d0a03915 	stw	r2,-32540(gp)

	// check if the device was opened
	if (pxDmaM2Dev == NULL) {
81103bb0:	d0a03917 	ldw	r2,-32540(gp)
81103bb4:	1000021e 	bne	r2,zero,81103bc0 <bSdmaInitM2Dma+0x44>
		// device not opened
		bStatus = FALSE;
81103bb8:	e03ffe15 	stw	zero,-8(fp)
81103bbc:	00001506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
81103bc0:	d0a03917 	ldw	r2,-32540(gp)
81103bc4:	10800317 	ldw	r2,12(r2)
81103bc8:	10800104 	addi	r2,r2,4
81103bcc:	00c00084 	movi	r3,2
81103bd0:	10c00035 	stwio	r3,0(r2)
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103bd4:	00000a06 	br	81103c00 <bSdmaInitM2Dma+0x84>
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
			usleep(1);
81103bd8:	01000044 	movi	r4,1
81103bdc:	11263140 	call	81126314 <usleep>
			usiCounter++;
81103be0:	e0bfff0b 	ldhu	r2,-4(fp)
81103be4:	10800044 	addi	r2,r2,1
81103be8:	e0bfff0d 	sth	r2,-4(fp)
			if (5000 <= usiCounter) { //wait at most 5ms for the device to be reseted
81103bec:	e0bfff0b 	ldhu	r2,-4(fp)
81103bf0:	1084e230 	cmpltui	r2,r2,5000
81103bf4:	1000021e 	bne	r2,zero,81103c00 <bSdmaInitM2Dma+0x84>
				bStatus = FALSE;
81103bf8:	e03ffe15 	stw	zero,-8(fp)
				break;
81103bfc:	00000506 	br	81103c14 <bSdmaInitM2Dma+0x98>
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c00:	d0a03917 	ldw	r2,-32540(gp)
81103c04:	10800317 	ldw	r2,12(r2)
81103c08:	10800037 	ldwio	r2,0(r2)
				& ALTERA_MSGDMA_CSR_RESET_STATE_MASK) {
81103c0c:	1080100c 	andi	r2,r2,64
	} else {
		// device opened
		// reset the dispatcher
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(pxDmaM2Dev->csr_base,
				ALTERA_MSGDMA_CSR_RESET_MASK);
		while (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
81103c10:	103ff11e 	bne	r2,zero,81103bd8 <__reset+0xfb0e3bd8>
				break;
			}
		}
	}

	return bStatus;
81103c14:	e0bffe17 	ldw	r2,-8(fp)
}
81103c18:	e037883a 	mov	sp,fp
81103c1c:	dfc00117 	ldw	ra,4(sp)
81103c20:	df000017 	ldw	fp,0(sp)
81103c24:	dec00204 	addi	sp,sp,8
81103c28:	f800283a 	ret

81103c2c <bSdmaDmaM1Transfer>:

bool bSdmaDmaM1Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
81103c2c:	deffe904 	addi	sp,sp,-92
81103c30:	de00012e 	bgeu	sp,et,81103c38 <bSdmaDmaM1Transfer+0xc>
81103c34:	003b68fa 	trap	3
81103c38:	dfc01615 	stw	ra,88(sp)
81103c3c:	df001515 	stw	fp,84(sp)
81103c40:	dc001415 	stw	r16,80(sp)
81103c44:	df001504 	addi	fp,sp,84
81103c48:	e13ffb15 	stw	r4,-20(fp)
81103c4c:	2809883a 	mov	r4,r5
81103c50:	3007883a 	mov	r3,r6
81103c54:	3805883a 	mov	r2,r7
81103c58:	e13ffc0d 	sth	r4,-16(fp)
81103c5c:	e0fffd05 	stb	r3,-12(fp)
81103c60:	e0bffe05 	stb	r2,-8(fp)
81103c64:	defff004 	addi	sp,sp,-64
81103c68:	d8800904 	addi	r2,sp,36
81103c6c:	108007c4 	addi	r2,r2,31
81103c70:	1004d17a 	srli	r2,r2,5
81103c74:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
81103c78:	00800044 	movi	r2,1
81103c7c:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
81103c80:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
81103c84:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
81103c88:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
81103c8c:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
81103c90:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
81103c94:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
81103c98:	e0bffe03 	ldbu	r2,-8(fp)
81103c9c:	10c00268 	cmpgeui	r3,r2,9
81103ca0:	1800a51e 	bne	r3,zero,81103f38 <bSdmaDmaM1Transfer+0x30c>
81103ca4:	100690ba 	slli	r3,r2,2
81103ca8:	00a04434 	movhi	r2,33040
81103cac:	108f2f04 	addi	r2,r2,15548
81103cb0:	1885883a 	add	r2,r3,r2
81103cb4:	10800017 	ldw	r2,0(r2)
81103cb8:	1000683a 	jmp	r2
81103cbc:	81103f38 	rdprs	r4,r16,16636
81103cc0:	81103ce0 	cmpeqi	r4,r16,16627
81103cc4:	81103d24 	muli	r4,r16,16628
81103cc8:	81103d70 	cmpltui	r4,r16,16629
81103ccc:	81103dbc 	xorhi	r4,r16,16630
81103cd0:	81103e08 	cmpgei	r4,r16,16632
81103cd4:	81103e54 	ori	r4,r16,16633
81103cd8:	81103ea0 	cmpeqi	r4,r16,16634
81103cdc:	81103eec 	andhi	r4,r16,16635
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81103ce0:	e0bffd03 	ldbu	r2,-12(fp)
81103ce4:	10000326 	beq	r2,zero,81103cf4 <bSdmaDmaM1Transfer+0xc8>
81103ce8:	10800060 	cmpeqi	r2,r2,1
81103cec:	1000051e 	bne	r2,zero,81103d04 <bSdmaDmaM1Transfer+0xd8>
81103cf0:	00000906 	br	81103d18 <bSdmaDmaM1Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81103cf4:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81103cf8:	00800044 	movi	r2,1
81103cfc:	e0bff715 	stw	r2,-36(fp)
			break;
81103d00:	00000706 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81103d04:	00800074 	movhi	r2,1
81103d08:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
81103d0c:	00800044 	movi	r2,1
81103d10:	e0bff715 	stw	r2,-36(fp)
			break;
81103d14:	00000206 	br	81103d20 <bSdmaDmaM1Transfer+0xf4>
		default:
			bStatus = FALSE;
81103d18:	e03ff415 	stw	zero,-48(fp)
			break;
81103d1c:	0001883a 	nop
		}
		break;
81103d20:	00008706 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81103d24:	e0bffd03 	ldbu	r2,-12(fp)
81103d28:	10000326 	beq	r2,zero,81103d38 <bSdmaDmaM1Transfer+0x10c>
81103d2c:	10800060 	cmpeqi	r2,r2,1
81103d30:	1000061e 	bne	r2,zero,81103d4c <bSdmaDmaM1Transfer+0x120>
81103d34:	00000b06 	br	81103d64 <bSdmaDmaM1Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81103d38:	00880004 	movi	r2,8192
81103d3c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81103d40:	00800044 	movi	r2,1
81103d44:	e0bff715 	stw	r2,-36(fp)
			break;
81103d48:	00000806 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
81103d4c:	00800074 	movhi	r2,1
81103d50:	10880004 	addi	r2,r2,8192
81103d54:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81103d58:	00800044 	movi	r2,1
81103d5c:	e0bff715 	stw	r2,-36(fp)
			break;
81103d60:	00000206 	br	81103d6c <bSdmaDmaM1Transfer+0x140>
		default:
			bStatus = FALSE;
81103d64:	e03ff415 	stw	zero,-48(fp)
			break;
81103d68:	0001883a 	nop
		}
		break;
81103d6c:	00007406 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
81103d70:	e0bffd03 	ldbu	r2,-12(fp)
81103d74:	10000326 	beq	r2,zero,81103d84 <bSdmaDmaM1Transfer+0x158>
81103d78:	10800060 	cmpeqi	r2,r2,1
81103d7c:	1000061e 	bne	r2,zero,81103d98 <bSdmaDmaM1Transfer+0x16c>
81103d80:	00000b06 	br	81103db0 <bSdmaDmaM1Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
81103d84:	00900004 	movi	r2,16384
81103d88:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
81103d8c:	00800044 	movi	r2,1
81103d90:	e0bff715 	stw	r2,-36(fp)
			break;
81103d94:	00000806 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
81103d98:	00800074 	movhi	r2,1
81103d9c:	10900004 	addi	r2,r2,16384
81103da0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
81103da4:	00800044 	movi	r2,1
81103da8:	e0bff715 	stw	r2,-36(fp)
			break;
81103dac:	00000206 	br	81103db8 <bSdmaDmaM1Transfer+0x18c>
		default:
			bStatus = FALSE;
81103db0:	e03ff415 	stw	zero,-48(fp)
			break;
81103db4:	0001883a 	nop
		}
		break;
81103db8:	00006106 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
81103dbc:	e0bffd03 	ldbu	r2,-12(fp)
81103dc0:	10000326 	beq	r2,zero,81103dd0 <bSdmaDmaM1Transfer+0x1a4>
81103dc4:	10800060 	cmpeqi	r2,r2,1
81103dc8:	1000061e 	bne	r2,zero,81103de4 <bSdmaDmaM1Transfer+0x1b8>
81103dcc:	00000b06 	br	81103dfc <bSdmaDmaM1Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81103dd0:	00980004 	movi	r2,24576
81103dd4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81103dd8:	00800044 	movi	r2,1
81103ddc:	e0bff715 	stw	r2,-36(fp)
			break;
81103de0:	00000806 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81103de4:	00800074 	movhi	r2,1
81103de8:	10980004 	addi	r2,r2,24576
81103dec:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81103df0:	00800044 	movi	r2,1
81103df4:	e0bff715 	stw	r2,-36(fp)
			break;
81103df8:	00000206 	br	81103e04 <bSdmaDmaM1Transfer+0x1d8>
		default:
			bStatus = FALSE;
81103dfc:	e03ff415 	stw	zero,-48(fp)
			break;
81103e00:	0001883a 	nop
		}
		break;
81103e04:	00004e06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81103e08:	e0bffd03 	ldbu	r2,-12(fp)
81103e0c:	10000326 	beq	r2,zero,81103e1c <bSdmaDmaM1Transfer+0x1f0>
81103e10:	10800060 	cmpeqi	r2,r2,1
81103e14:	1000061e 	bne	r2,zero,81103e30 <bSdmaDmaM1Transfer+0x204>
81103e18:	00000b06 	br	81103e48 <bSdmaDmaM1Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
81103e1c:	00a00014 	movui	r2,32768
81103e20:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81103e24:	00800044 	movi	r2,1
81103e28:	e0bff715 	stw	r2,-36(fp)
			break;
81103e2c:	00000806 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81103e30:	008000b4 	movhi	r2,2
81103e34:	10a00004 	addi	r2,r2,-32768
81103e38:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
81103e3c:	00800044 	movi	r2,1
81103e40:	e0bff715 	stw	r2,-36(fp)
			break;
81103e44:	00000206 	br	81103e50 <bSdmaDmaM1Transfer+0x224>
		default:
			bStatus = FALSE;
81103e48:	e03ff415 	stw	zero,-48(fp)
			break;
81103e4c:	0001883a 	nop
		}
		break;
81103e50:	00003b06 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81103e54:	e0bffd03 	ldbu	r2,-12(fp)
81103e58:	10000326 	beq	r2,zero,81103e68 <bSdmaDmaM1Transfer+0x23c>
81103e5c:	10800060 	cmpeqi	r2,r2,1
81103e60:	1000061e 	bne	r2,zero,81103e7c <bSdmaDmaM1Transfer+0x250>
81103e64:	00000b06 	br	81103e94 <bSdmaDmaM1Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81103e68:	00a80014 	movui	r2,40960
81103e6c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
81103e70:	00800044 	movi	r2,1
81103e74:	e0bff715 	stw	r2,-36(fp)
			break;
81103e78:	00000806 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
81103e7c:	008000b4 	movhi	r2,2
81103e80:	10a80004 	addi	r2,r2,-24576
81103e84:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
81103e88:	00800044 	movi	r2,1
81103e8c:	e0bff715 	stw	r2,-36(fp)
			break;
81103e90:	00000206 	br	81103e9c <bSdmaDmaM1Transfer+0x270>
		default:
			bStatus = FALSE;
81103e94:	e03ff415 	stw	zero,-48(fp)
			break;
81103e98:	0001883a 	nop
		}
		break;
81103e9c:	00002806 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
81103ea0:	e0bffd03 	ldbu	r2,-12(fp)
81103ea4:	10000326 	beq	r2,zero,81103eb4 <bSdmaDmaM1Transfer+0x288>
81103ea8:	10800060 	cmpeqi	r2,r2,1
81103eac:	1000061e 	bne	r2,zero,81103ec8 <bSdmaDmaM1Transfer+0x29c>
81103eb0:	00000b06 	br	81103ee0 <bSdmaDmaM1Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
81103eb4:	00b00014 	movui	r2,49152
81103eb8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
81103ebc:	00800044 	movi	r2,1
81103ec0:	e0bff715 	stw	r2,-36(fp)
			break;
81103ec4:	00000806 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
81103ec8:	008000b4 	movhi	r2,2
81103ecc:	10b00004 	addi	r2,r2,-16384
81103ed0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81103ed4:	00800044 	movi	r2,1
81103ed8:	e0bff715 	stw	r2,-36(fp)
			break;
81103edc:	00000206 	br	81103ee8 <bSdmaDmaM1Transfer+0x2bc>
		default:
			bStatus = FALSE;
81103ee0:	e03ff415 	stw	zero,-48(fp)
			break;
81103ee4:	0001883a 	nop
		}
		break;
81103ee8:	00001506 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
81103eec:	e0bffd03 	ldbu	r2,-12(fp)
81103ef0:	10000326 	beq	r2,zero,81103f00 <bSdmaDmaM1Transfer+0x2d4>
81103ef4:	10800060 	cmpeqi	r2,r2,1
81103ef8:	1000061e 	bne	r2,zero,81103f14 <bSdmaDmaM1Transfer+0x2e8>
81103efc:	00000b06 	br	81103f2c <bSdmaDmaM1Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81103f00:	00b80014 	movui	r2,57344
81103f04:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81103f08:	00800044 	movi	r2,1
81103f0c:	e0bff715 	stw	r2,-36(fp)
			break;
81103f10:	00000806 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81103f14:	008000b4 	movhi	r2,2
81103f18:	10b80004 	addi	r2,r2,-8192
81103f1c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81103f20:	00800044 	movi	r2,1
81103f24:	e0bff715 	stw	r2,-36(fp)
			break;
81103f28:	00000206 	br	81103f34 <bSdmaDmaM1Transfer+0x308>
		default:
			bStatus = FALSE;
81103f2c:	e03ff415 	stw	zero,-48(fp)
			break;
81103f30:	0001883a 	nop
		}
		break;
81103f34:	00000206 	br	81103f40 <bSdmaDmaM1Transfer+0x314>
	default:
		bStatus = FALSE;
81103f38:	e03ff415 	stw	zero,-48(fp)
		break;
81103f3c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M1_BASE_ADDR_LOW
81103f40:	e0bffb17 	ldw	r2,-20(fp)
81103f44:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81103f48:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81103f4c:	e0bff417 	ldw	r2,-48(fp)
81103f50:	10003b26 	beq	r2,zero,81104040 <bSdmaDmaM1Transfer+0x414>
		if (pxDmaM1Dev == NULL) {
81103f54:	d0a03817 	ldw	r2,-32544(gp)
81103f58:	1000021e 	bne	r2,zero,81103f64 <bSdmaDmaM1Transfer+0x338>
			bStatus = FALSE;
81103f5c:	e03ff415 	stw	zero,-48(fp)
81103f60:	00003706 	br	81104040 <bSdmaDmaM1Transfer+0x414>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81103f64:	e03ff50d 	sth	zero,-44(fp)
81103f68:	00003206 	br	81104034 <bSdmaDmaM1Transfer+0x408>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
81103f6c:	01000044 	movi	r4,1
81103f70:	11254440 	call	81125444 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
81103f74:	d0a03817 	ldw	r2,-32544(gp)
81103f78:	10800317 	ldw	r2,12(r2)
81103f7c:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
81103f80:	1080010c 	andi	r2,r2,4
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
81103f84:	103ff91e 	bne	r2,zero,81103f6c <__reset+0xfb0e3f6c>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM1Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM1Dev,
81103f88:	d2203817 	ldw	r8,-32544(gp)
81103f8c:	e17ff817 	ldw	r5,-32(fp)
81103f90:	e1bff617 	ldw	r6,-40(fp)
81103f94:	e0bff917 	ldw	r2,-28(fp)
81103f98:	e0fff717 	ldw	r3,-36(fp)
81103f9c:	01000044 	movi	r4,1
81103fa0:	d9000815 	stw	r4,32(sp)
81103fa4:	01000044 	movi	r4,1
81103fa8:	d9000715 	stw	r4,28(sp)
81103fac:	01000044 	movi	r4,1
81103fb0:	d9000615 	stw	r4,24(sp)
81103fb4:	01000044 	movi	r4,1
81103fb8:	d9000515 	stw	r4,20(sp)
81103fbc:	01000044 	movi	r4,1
81103fc0:	d9000415 	stw	r4,16(sp)
81103fc4:	d8c00315 	stw	r3,12(sp)
81103fc8:	d8800215 	stw	r2,8(sp)
81103fcc:	e0bffa17 	ldw	r2,-24(fp)
81103fd0:	d8800115 	stw	r2,4(sp)
81103fd4:	00802204 	movi	r2,136
81103fd8:	d8800015 	stw	r2,0(sp)
81103fdc:	300f883a 	mov	r7,r6
81103fe0:	280d883a 	mov	r6,r5
81103fe4:	800b883a 	mov	r5,r16
81103fe8:	4009883a 	mov	r4,r8
81103fec:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81103ff0:	10000226 	beq	r2,zero,81103ffc <bSdmaDmaM1Transfer+0x3d0>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
81103ff4:	e03ff415 	stw	zero,-48(fp)
					break;
81103ff8:	00001106 	br	81104040 <bSdmaDmaM1Transfer+0x414>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM1Dev,
81103ffc:	d0a03817 	ldw	r2,-32544(gp)
81104000:	800b883a 	mov	r5,r16
81104004:	1009883a 	mov	r4,r2
81104008:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
8110400c:	10000226 	beq	r2,zero,81104018 <bSdmaDmaM1Transfer+0x3ec>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104010:	e03ff415 	stw	zero,-48(fp)
						break;
81104014:	00000a06 	br	81104040 <bSdmaDmaM1Transfer+0x414>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104018:	e0bff817 	ldw	r2,-32(fp)
8110401c:	10802204 	addi	r2,r2,136
81104020:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
81104024:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM1Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104028:	e0bff50b 	ldhu	r2,-44(fp)
8110402c:	10800044 	addi	r2,r2,1
81104030:	e0bff50d 	sth	r2,-44(fp)
81104034:	e0fff50b 	ldhu	r3,-44(fp)
81104038:	e0bffc0b 	ldhu	r2,-16(fp)
8110403c:	18bfcd36 	bltu	r3,r2,81103f74 <__reset+0xfb0e3f74>
					uliSrcAddrHigh = (alt_u32) SDMA_M1_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104040:	e0bff417 	ldw	r2,-48(fp)
}
81104044:	e6ffff04 	addi	sp,fp,-4
81104048:	dfc00217 	ldw	ra,8(sp)
8110404c:	df000117 	ldw	fp,4(sp)
81104050:	dc000017 	ldw	r16,0(sp)
81104054:	dec00304 	addi	sp,sp,12
81104058:	f800283a 	ret

8110405c <bSdmaDmaM2Transfer>:

bool bSdmaDmaM2Transfer(alt_u32 *uliDdrInitialAddr,
		alt_u16 usiTransferSizeInBlocks, alt_u8 ucBufferSide,
		alt_u8 ucChBufferId) {
8110405c:	deffe904 	addi	sp,sp,-92
81104060:	de00012e 	bgeu	sp,et,81104068 <bSdmaDmaM2Transfer+0xc>
81104064:	003b68fa 	trap	3
81104068:	dfc01615 	stw	ra,88(sp)
8110406c:	df001515 	stw	fp,84(sp)
81104070:	dc001415 	stw	r16,80(sp)
81104074:	df001504 	addi	fp,sp,84
81104078:	e13ffb15 	stw	r4,-20(fp)
8110407c:	2809883a 	mov	r4,r5
81104080:	3007883a 	mov	r3,r6
81104084:	3805883a 	mov	r2,r7
81104088:	e13ffc0d 	sth	r4,-16(fp)
8110408c:	e0fffd05 	stb	r3,-12(fp)
81104090:	e0bffe05 	stb	r2,-8(fp)
81104094:	defff004 	addi	sp,sp,-64
81104098:	d8800904 	addi	r2,sp,36
8110409c:	108007c4 	addi	r2,r2,31
811040a0:	1004d17a 	srli	r2,r2,5
811040a4:	1020917a 	slli	r16,r2,5
	bool bStatus = TRUE;
811040a8:	00800044 	movi	r2,1
811040ac:	e0bff415 	stw	r2,-48(fp)
	alt_u16 usiCnt = 0;
811040b0:	e03ff50d 	sth	zero,-44(fp)

	alt_msgdma_extended_descriptor xDmaExtendedDescriptor;

	alt_u32 uliDestAddrLow = 0;
811040b4:	e03ff615 	stw	zero,-40(fp)
	alt_u32 uliDestAddrHigh = 0;
811040b8:	e03ff715 	stw	zero,-36(fp)

	alt_u32 uliSrcAddrLow = 0;
811040bc:	e03ff815 	stw	zero,-32(fp)
	alt_u32 uliSrcAddrHigh = 0;
811040c0:	e03ff915 	stw	zero,-28(fp)

	alt_u32 uliControlBits = 0x00000000;
811040c4:	e03ffa15 	stw	zero,-24(fp)

	switch (ucChBufferId) {
811040c8:	e0bffe03 	ldbu	r2,-8(fp)
811040cc:	10c00268 	cmpgeui	r3,r2,9
811040d0:	1800a51e 	bne	r3,zero,81104368 <bSdmaDmaM2Transfer+0x30c>
811040d4:	100690ba 	slli	r3,r2,2
811040d8:	00a04434 	movhi	r2,33040
811040dc:	10903b04 	addi	r2,r2,16620
811040e0:	1885883a 	add	r2,r3,r2
811040e4:	10800017 	ldw	r2,0(r2)
811040e8:	1000683a 	jmp	r2
811040ec:	81104368 	cmpgeui	r4,r16,16653
811040f0:	81104110 	cmplti	r4,r16,16644
811040f4:	81104154 	ori	r4,r16,16645
811040f8:	811041a0 	cmpeqi	r4,r16,16646
811040fc:	811041ec 	andhi	r4,r16,16647
81104100:	81104238 	rdprs	r4,r16,16648
81104104:	81104284 	addi	r4,r16,16650
81104108:	811042d0 	cmplti	r4,r16,16651
8110410c:	8110431c 	xori	r4,r16,16652
	case eSdmaCh1Buffer:
		switch (ucBufferSide) {
81104110:	e0bffd03 	ldbu	r2,-12(fp)
81104114:	10000326 	beq	r2,zero,81104124 <bSdmaDmaM2Transfer+0xc8>
81104118:	10800060 	cmpeqi	r2,r2,1
8110411c:	1000051e 	bne	r2,zero,81104134 <bSdmaDmaM2Transfer+0xd8>
81104120:	00000906 	br	81104148 <bSdmaDmaM2Transfer+0xec>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_LOW;
81104124:	e03ff615 	stw	zero,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_R_BUFF_BASE_ADDR_HIGH;
81104128:	00800044 	movi	r2,1
8110412c:	e0bff715 	stw	r2,-36(fp)
			break;
81104130:	00000706 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_LOW;
81104134:	00800074 	movhi	r2,1
81104138:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_1_L_BUFF_BASE_ADDR_HIGH;
8110413c:	00800044 	movi	r2,1
81104140:	e0bff715 	stw	r2,-36(fp)
			break;
81104144:	00000206 	br	81104150 <bSdmaDmaM2Transfer+0xf4>
		default:
			bStatus = FALSE;
81104148:	e03ff415 	stw	zero,-48(fp)
			break;
8110414c:	0001883a 	nop
		}
		break;
81104150:	00008706 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh2Buffer:
		switch (ucBufferSide) {
81104154:	e0bffd03 	ldbu	r2,-12(fp)
81104158:	10000326 	beq	r2,zero,81104168 <bSdmaDmaM2Transfer+0x10c>
8110415c:	10800060 	cmpeqi	r2,r2,1
81104160:	1000061e 	bne	r2,zero,8110417c <bSdmaDmaM2Transfer+0x120>
81104164:	00000b06 	br	81104194 <bSdmaDmaM2Transfer+0x138>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_LOW;
81104168:	00880004 	movi	r2,8192
8110416c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_R_BUFF_BASE_ADDR_HIGH;
81104170:	00800044 	movi	r2,1
81104174:	e0bff715 	stw	r2,-36(fp)
			break;
81104178:	00000806 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_LOW;
8110417c:	00800074 	movhi	r2,1
81104180:	10880004 	addi	r2,r2,8192
81104184:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_2_L_BUFF_BASE_ADDR_HIGH;
81104188:	00800044 	movi	r2,1
8110418c:	e0bff715 	stw	r2,-36(fp)
			break;
81104190:	00000206 	br	8110419c <bSdmaDmaM2Transfer+0x140>
		default:
			bStatus = FALSE;
81104194:	e03ff415 	stw	zero,-48(fp)
			break;
81104198:	0001883a 	nop
		}
		break;
8110419c:	00007406 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh3Buffer:
		switch (ucBufferSide) {
811041a0:	e0bffd03 	ldbu	r2,-12(fp)
811041a4:	10000326 	beq	r2,zero,811041b4 <bSdmaDmaM2Transfer+0x158>
811041a8:	10800060 	cmpeqi	r2,r2,1
811041ac:	1000061e 	bne	r2,zero,811041c8 <bSdmaDmaM2Transfer+0x16c>
811041b0:	00000b06 	br	811041e0 <bSdmaDmaM2Transfer+0x184>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_LOW;
811041b4:	00900004 	movi	r2,16384
811041b8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_R_BUFF_BASE_ADDR_HIGH;
811041bc:	00800044 	movi	r2,1
811041c0:	e0bff715 	stw	r2,-36(fp)
			break;
811041c4:	00000806 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_LOW;
811041c8:	00800074 	movhi	r2,1
811041cc:	10900004 	addi	r2,r2,16384
811041d0:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_3_L_BUFF_BASE_ADDR_HIGH;
811041d4:	00800044 	movi	r2,1
811041d8:	e0bff715 	stw	r2,-36(fp)
			break;
811041dc:	00000206 	br	811041e8 <bSdmaDmaM2Transfer+0x18c>
		default:
			bStatus = FALSE;
811041e0:	e03ff415 	stw	zero,-48(fp)
			break;
811041e4:	0001883a 	nop
		}
		break;
811041e8:	00006106 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh4Buffer:
		switch (ucBufferSide) {
811041ec:	e0bffd03 	ldbu	r2,-12(fp)
811041f0:	10000326 	beq	r2,zero,81104200 <bSdmaDmaM2Transfer+0x1a4>
811041f4:	10800060 	cmpeqi	r2,r2,1
811041f8:	1000061e 	bne	r2,zero,81104214 <bSdmaDmaM2Transfer+0x1b8>
811041fc:	00000b06 	br	8110422c <bSdmaDmaM2Transfer+0x1d0>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_LOW;
81104200:	00980004 	movi	r2,24576
81104204:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_R_BUFF_BASE_ADDR_HIGH;
81104208:	00800044 	movi	r2,1
8110420c:	e0bff715 	stw	r2,-36(fp)
			break;
81104210:	00000806 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_LOW;
81104214:	00800074 	movhi	r2,1
81104218:	10980004 	addi	r2,r2,24576
8110421c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_4_L_BUFF_BASE_ADDR_HIGH;
81104220:	00800044 	movi	r2,1
81104224:	e0bff715 	stw	r2,-36(fp)
			break;
81104228:	00000206 	br	81104234 <bSdmaDmaM2Transfer+0x1d8>
		default:
			bStatus = FALSE;
8110422c:	e03ff415 	stw	zero,-48(fp)
			break;
81104230:	0001883a 	nop
		}
		break;
81104234:	00004e06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh5Buffer:
		switch (ucBufferSide) {
81104238:	e0bffd03 	ldbu	r2,-12(fp)
8110423c:	10000326 	beq	r2,zero,8110424c <bSdmaDmaM2Transfer+0x1f0>
81104240:	10800060 	cmpeqi	r2,r2,1
81104244:	1000061e 	bne	r2,zero,81104260 <bSdmaDmaM2Transfer+0x204>
81104248:	00000b06 	br	81104278 <bSdmaDmaM2Transfer+0x21c>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_LOW;
8110424c:	00a00014 	movui	r2,32768
81104250:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_R_BUFF_BASE_ADDR_HIGH;
81104254:	00800044 	movi	r2,1
81104258:	e0bff715 	stw	r2,-36(fp)
			break;
8110425c:	00000806 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_LOW;
81104260:	008000b4 	movhi	r2,2
81104264:	10a00004 	addi	r2,r2,-32768
81104268:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_5_L_BUFF_BASE_ADDR_HIGH;
8110426c:	00800044 	movi	r2,1
81104270:	e0bff715 	stw	r2,-36(fp)
			break;
81104274:	00000206 	br	81104280 <bSdmaDmaM2Transfer+0x224>
		default:
			bStatus = FALSE;
81104278:	e03ff415 	stw	zero,-48(fp)
			break;
8110427c:	0001883a 	nop
		}
		break;
81104280:	00003b06 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh6Buffer:
		switch (ucBufferSide) {
81104284:	e0bffd03 	ldbu	r2,-12(fp)
81104288:	10000326 	beq	r2,zero,81104298 <bSdmaDmaM2Transfer+0x23c>
8110428c:	10800060 	cmpeqi	r2,r2,1
81104290:	1000061e 	bne	r2,zero,811042ac <bSdmaDmaM2Transfer+0x250>
81104294:	00000b06 	br	811042c4 <bSdmaDmaM2Transfer+0x268>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_LOW;
81104298:	00a80014 	movui	r2,40960
8110429c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_R_BUFF_BASE_ADDR_HIGH;
811042a0:	00800044 	movi	r2,1
811042a4:	e0bff715 	stw	r2,-36(fp)
			break;
811042a8:	00000806 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_LOW;
811042ac:	008000b4 	movhi	r2,2
811042b0:	10a80004 	addi	r2,r2,-24576
811042b4:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_6_L_BUFF_BASE_ADDR_HIGH;
811042b8:	00800044 	movi	r2,1
811042bc:	e0bff715 	stw	r2,-36(fp)
			break;
811042c0:	00000206 	br	811042cc <bSdmaDmaM2Transfer+0x270>
		default:
			bStatus = FALSE;
811042c4:	e03ff415 	stw	zero,-48(fp)
			break;
811042c8:	0001883a 	nop
		}
		break;
811042cc:	00002806 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh7Buffer:
		switch (ucBufferSide) {
811042d0:	e0bffd03 	ldbu	r2,-12(fp)
811042d4:	10000326 	beq	r2,zero,811042e4 <bSdmaDmaM2Transfer+0x288>
811042d8:	10800060 	cmpeqi	r2,r2,1
811042dc:	1000061e 	bne	r2,zero,811042f8 <bSdmaDmaM2Transfer+0x29c>
811042e0:	00000b06 	br	81104310 <bSdmaDmaM2Transfer+0x2b4>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_LOW;
811042e4:	00b00014 	movui	r2,49152
811042e8:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_R_BUFF_BASE_ADDR_HIGH;
811042ec:	00800044 	movi	r2,1
811042f0:	e0bff715 	stw	r2,-36(fp)
			break;
811042f4:	00000806 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_LOW;
811042f8:	008000b4 	movhi	r2,2
811042fc:	10b00004 	addi	r2,r2,-16384
81104300:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_7_L_BUFF_BASE_ADDR_HIGH;
81104304:	00800044 	movi	r2,1
81104308:	e0bff715 	stw	r2,-36(fp)
			break;
8110430c:	00000206 	br	81104318 <bSdmaDmaM2Transfer+0x2bc>
		default:
			bStatus = FALSE;
81104310:	e03ff415 	stw	zero,-48(fp)
			break;
81104314:	0001883a 	nop
		}
		break;
81104318:	00001506 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	case eSdmaCh8Buffer:
		switch (ucBufferSide) {
8110431c:	e0bffd03 	ldbu	r2,-12(fp)
81104320:	10000326 	beq	r2,zero,81104330 <bSdmaDmaM2Transfer+0x2d4>
81104324:	10800060 	cmpeqi	r2,r2,1
81104328:	1000061e 	bne	r2,zero,81104344 <bSdmaDmaM2Transfer+0x2e8>
8110432c:	00000b06 	br	8110435c <bSdmaDmaM2Transfer+0x300>
		case eSdmaRightBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_LOW;
81104330:	00b80014 	movui	r2,57344
81104334:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_R_BUFF_BASE_ADDR_HIGH;
81104338:	00800044 	movi	r2,1
8110433c:	e0bff715 	stw	r2,-36(fp)
			break;
81104340:	00000806 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		case eSdmaLeftBuffer:
			uliDestAddrLow = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_LOW;
81104344:	008000b4 	movhi	r2,2
81104348:	10b80004 	addi	r2,r2,-8192
8110434c:	e0bff615 	stw	r2,-40(fp)
			uliDestAddrHigh = (alt_u32) SDMA_CH_8_L_BUFF_BASE_ADDR_HIGH;
81104350:	00800044 	movi	r2,1
81104354:	e0bff715 	stw	r2,-36(fp)
			break;
81104358:	00000206 	br	81104364 <bSdmaDmaM2Transfer+0x308>
		default:
			bStatus = FALSE;
8110435c:	e03ff415 	stw	zero,-48(fp)
			break;
81104360:	0001883a 	nop
		}
		break;
81104364:	00000206 	br	81104370 <bSdmaDmaM2Transfer+0x314>
	default:
		bStatus = FALSE;
81104368:	e03ff415 	stw	zero,-48(fp)
		break;
8110436c:	0001883a 	nop
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
			+ (alt_u32) uliDdrInitialAddr;
81104370:	e0fffb17 	ldw	r3,-20(fp)
	default:
		bStatus = FALSE;
		break;
	}

	uliSrcAddrLow = (alt_u32) SDMA_M2_BASE_ADDR_LOW
81104374:	00a00034 	movhi	r2,32768
81104378:	1885883a 	add	r2,r3,r2
8110437c:	e0bff815 	stw	r2,-32(fp)
			+ (alt_u32) uliDdrInitialAddr;
	uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
81104380:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
81104384:	e0bff417 	ldw	r2,-48(fp)
81104388:	10003b26 	beq	r2,zero,81104478 <bSdmaDmaM2Transfer+0x41c>
		if (pxDmaM2Dev == NULL) {
8110438c:	d0a03917 	ldw	r2,-32540(gp)
81104390:	1000021e 	bne	r2,zero,8110439c <bSdmaDmaM2Transfer+0x340>
			bStatus = FALSE;
81104394:	e03ff415 	stw	zero,-48(fp)
81104398:	00003706 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
8110439c:	e03ff50d 	sth	zero,-44(fp)
811043a0:	00003206 	br	8110446c <bSdmaDmaM2Transfer+0x410>
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
811043a4:	01000044 	movi	r4,1
811043a8:	11254440 	call	81125444 <alt_busy_sleep>
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
811043ac:	d0a03917 	ldw	r2,-32540(gp)
811043b0:	10800317 	ldw	r2,12(r2)
811043b4:	10800037 	ldwio	r2,0(r2)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
811043b8:	1080010c 	andi	r2,r2,4
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
				// hold transfers for descriptor fifo space
				while (0
811043bc:	103ff91e 	bne	r2,zero,811043a4 <__reset+0xfb0e43a4>
						!= (IORD_ALTERA_MSGDMA_CSR_STATUS(pxDmaM2Dev->csr_base)
								& ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
					alt_busy_sleep(1); /* delay 1us */
				}
				if (iMsgdmaConstructExtendedMmToMmDescriptor(pxDmaM2Dev,
811043c0:	d2203917 	ldw	r8,-32540(gp)
811043c4:	e17ff817 	ldw	r5,-32(fp)
811043c8:	e1bff617 	ldw	r6,-40(fp)
811043cc:	e0bff917 	ldw	r2,-28(fp)
811043d0:	e0fff717 	ldw	r3,-36(fp)
811043d4:	01000044 	movi	r4,1
811043d8:	d9000815 	stw	r4,32(sp)
811043dc:	01000044 	movi	r4,1
811043e0:	d9000715 	stw	r4,28(sp)
811043e4:	01000044 	movi	r4,1
811043e8:	d9000615 	stw	r4,24(sp)
811043ec:	01000044 	movi	r4,1
811043f0:	d9000515 	stw	r4,20(sp)
811043f4:	01000044 	movi	r4,1
811043f8:	d9000415 	stw	r4,16(sp)
811043fc:	d8c00315 	stw	r3,12(sp)
81104400:	d8800215 	stw	r2,8(sp)
81104404:	e0bffa17 	ldw	r2,-24(fp)
81104408:	d8800115 	stw	r2,4(sp)
8110440c:	00802204 	movi	r2,136
81104410:	d8800015 	stw	r2,0(sp)
81104414:	300f883a 	mov	r7,r6
81104418:	280d883a 	mov	r6,r5
8110441c:	800b883a 	mov	r5,r16
81104420:	4009883a 	mov	r4,r8
81104424:	1106b800 	call	81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>
81104428:	10000226 	beq	r2,zero,81104434 <bSdmaDmaM2Transfer+0x3d8>
						&xDmaExtendedDescriptor, (alt_u32 *) uliSrcAddrLow,
						(alt_u32 *) uliDestAddrLow,
						SDMA_PIXEL_BLOCK_SIZE_BYTES, uliControlBits,
						(alt_u32 *) uliSrcAddrHigh, (alt_u32 *) uliDestAddrHigh,
						1, 1, 1, 1, 1)) {
					bStatus = FALSE;
8110442c:	e03ff415 	stw	zero,-48(fp)
					break;
81104430:	00001106 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
				} else {
					if (iMsgdmaExtendedDescriptorSyncTransfer(pxDmaM2Dev,
81104434:	d0a03917 	ldw	r2,-32540(gp)
81104438:	800b883a 	mov	r5,r16
8110443c:	1009883a 	mov	r4,r2
81104440:	1106c840 	call	81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>
81104444:	10000226 	beq	r2,zero,81104450 <bSdmaDmaM2Transfer+0x3f4>
							&xDmaExtendedDescriptor)) {
						bStatus = FALSE;
81104448:	e03ff415 	stw	zero,-48(fp)
						break;
8110444c:	00000a06 	br	81104478 <bSdmaDmaM2Transfer+0x41c>
					}
					uliSrcAddrLow += (alt_u32) SDMA_PIXEL_BLOCK_SIZE_BYTES;
81104450:	e0bff817 	ldw	r2,-32(fp)
81104454:	10802204 	addi	r2,r2,136
81104458:	e0bff815 	stw	r2,-32(fp)
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
8110445c:	e03ff915 	stw	zero,-28(fp)

	if (bStatus) {
		if (pxDmaM2Dev == NULL) {
			bStatus = FALSE;
		} else {
			for (usiCnt = 0; usiCnt < usiTransferSizeInBlocks; usiCnt++) {
81104460:	e0bff50b 	ldhu	r2,-44(fp)
81104464:	10800044 	addi	r2,r2,1
81104468:	e0bff50d 	sth	r2,-44(fp)
8110446c:	e0fff50b 	ldhu	r3,-44(fp)
81104470:	e0bffc0b 	ldhu	r2,-16(fp)
81104474:	18bfcd36 	bltu	r3,r2,811043ac <__reset+0xfb0e43ac>
					uliSrcAddrHigh = (alt_u32) SDMA_M2_BASE_ADDR_HIGH;
				}
			}
		}
	}
	return bStatus;
81104478:	e0bff417 	ldw	r2,-48(fp)
}
8110447c:	e6ffff04 	addi	sp,fp,-4
81104480:	dfc00217 	ldw	ra,8(sp)
81104484:	df000117 	ldw	fp,4(sp)
81104488:	dc000017 	ldw	r16,0(sp)
8110448c:	dec00304 	addi	sp,sp,12
81104490:	f800283a 	ret

81104494 <vFeebCh1HandleIrq>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vFeebCh1HandleIrq(void* pvContext) {
81104494:	defffc04 	addi	sp,sp,-16
81104498:	de00012e 	bgeu	sp,et,811044a0 <vFeebCh1HandleIrq+0xc>
8110449c:	003b68fa 	trap	3
811044a0:	dfc00315 	stw	ra,12(sp)
811044a4:	df000215 	stw	fp,8(sp)
811044a8:	df000204 	addi	fp,sp,8
811044ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044b0:	e0bfff17 	ldw	r2,-4(fp)
811044b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh1IrqFlagClrBufferEmpty();
811044b8:	11046940 	call	81104694 <vFeebCh1IrqFlagClrBufferEmpty>
}
811044bc:	0001883a 	nop
811044c0:	e037883a 	mov	sp,fp
811044c4:	dfc00117 	ldw	ra,4(sp)
811044c8:	df000017 	ldw	fp,0(sp)
811044cc:	dec00204 	addi	sp,sp,8
811044d0:	f800283a 	ret

811044d4 <vFeebCh2HandleIrq>:

void vFeebCh2HandleIrq(void* pvContext) {
811044d4:	defffc04 	addi	sp,sp,-16
811044d8:	de00012e 	bgeu	sp,et,811044e0 <vFeebCh2HandleIrq+0xc>
811044dc:	003b68fa 	trap	3
811044e0:	dfc00315 	stw	ra,12(sp)
811044e4:	df000215 	stw	fp,8(sp)
811044e8:	df000204 	addi	fp,sp,8
811044ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811044f0:	e0bfff17 	ldw	r2,-4(fp)
811044f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh2IrqFlagClrBufferEmpty();
811044f8:	11046d80 	call	811046d8 <vFeebCh2IrqFlagClrBufferEmpty>
}
811044fc:	0001883a 	nop
81104500:	e037883a 	mov	sp,fp
81104504:	dfc00117 	ldw	ra,4(sp)
81104508:	df000017 	ldw	fp,0(sp)
8110450c:	dec00204 	addi	sp,sp,8
81104510:	f800283a 	ret

81104514 <vFeebCh3HandleIrq>:

void vFeebCh3HandleIrq(void* pvContext) {
81104514:	defffc04 	addi	sp,sp,-16
81104518:	de00012e 	bgeu	sp,et,81104520 <vFeebCh3HandleIrq+0xc>
8110451c:	003b68fa 	trap	3
81104520:	dfc00315 	stw	ra,12(sp)
81104524:	df000215 	stw	fp,8(sp)
81104528:	df000204 	addi	fp,sp,8
8110452c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104530:	e0bfff17 	ldw	r2,-4(fp)
81104534:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh3IrqFlagClrBufferEmpty();
81104538:	110471c0 	call	8110471c <vFeebCh3IrqFlagClrBufferEmpty>
}
8110453c:	0001883a 	nop
81104540:	e037883a 	mov	sp,fp
81104544:	dfc00117 	ldw	ra,4(sp)
81104548:	df000017 	ldw	fp,0(sp)
8110454c:	dec00204 	addi	sp,sp,8
81104550:	f800283a 	ret

81104554 <vFeebCh4HandleIrq>:

void vFeebCh4HandleIrq(void* pvContext) {
81104554:	defffc04 	addi	sp,sp,-16
81104558:	de00012e 	bgeu	sp,et,81104560 <vFeebCh4HandleIrq+0xc>
8110455c:	003b68fa 	trap	3
81104560:	dfc00315 	stw	ra,12(sp)
81104564:	df000215 	stw	fp,8(sp)
81104568:	df000204 	addi	fp,sp,8
8110456c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104570:	e0bfff17 	ldw	r2,-4(fp)
81104574:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh4IrqFlagClrBufferEmpty();
81104578:	11047600 	call	81104760 <vFeebCh4IrqFlagClrBufferEmpty>
}
8110457c:	0001883a 	nop
81104580:	e037883a 	mov	sp,fp
81104584:	dfc00117 	ldw	ra,4(sp)
81104588:	df000017 	ldw	fp,0(sp)
8110458c:	dec00204 	addi	sp,sp,8
81104590:	f800283a 	ret

81104594 <vFeebCh5HandleIrq>:

void vFeebCh5HandleIrq(void* pvContext) {
81104594:	defffc04 	addi	sp,sp,-16
81104598:	de00012e 	bgeu	sp,et,811045a0 <vFeebCh5HandleIrq+0xc>
8110459c:	003b68fa 	trap	3
811045a0:	dfc00315 	stw	ra,12(sp)
811045a4:	df000215 	stw	fp,8(sp)
811045a8:	df000204 	addi	fp,sp,8
811045ac:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045b0:	e0bfff17 	ldw	r2,-4(fp)
811045b4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh5IrqFlagClrBufferEmpty();
811045b8:	11047a40 	call	811047a4 <vFeebCh5IrqFlagClrBufferEmpty>
}
811045bc:	0001883a 	nop
811045c0:	e037883a 	mov	sp,fp
811045c4:	dfc00117 	ldw	ra,4(sp)
811045c8:	df000017 	ldw	fp,0(sp)
811045cc:	dec00204 	addi	sp,sp,8
811045d0:	f800283a 	ret

811045d4 <vFeebCh6HandleIrq>:

void vFeebCh6HandleIrq(void* pvContext) {
811045d4:	defffc04 	addi	sp,sp,-16
811045d8:	de00012e 	bgeu	sp,et,811045e0 <vFeebCh6HandleIrq+0xc>
811045dc:	003b68fa 	trap	3
811045e0:	dfc00315 	stw	ra,12(sp)
811045e4:	df000215 	stw	fp,8(sp)
811045e8:	df000204 	addi	fp,sp,8
811045ec:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
811045f0:	e0bfff17 	ldw	r2,-4(fp)
811045f4:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*hold_context_ptr = ...;
	// if (*hold_context_ptr == '0') {}...
	// App logic sequence...
	vFeebCh6IrqFlagClrBufferEmpty();
811045f8:	11047e80 	call	811047e8 <vFeebCh6IrqFlagClrBufferEmpty>
}
811045fc:	0001883a 	nop
81104600:	e037883a 	mov	sp,fp
81104604:	dfc00117 	ldw	ra,4(sp)
81104608:	df000017 	ldw	fp,0(sp)
8110460c:	dec00204 	addi	sp,sp,8
81104610:	f800283a 	ret

81104614 <vFeebCh7HandleIrq>:

void vFeebCh7HandleIrq(void* pvContext) {
81104614:	defffc04 	addi	sp,sp,-16
81104618:	de00012e 	bgeu	sp,et,81104620 <vFeebCh7HandleIrq+0xc>
8110461c:	003b68fa 	trap	3
81104620:	dfc00315 	stw	ra,12(sp)
81104624:	df000215 	stw	fp,8(sp)
81104628:	df000204 	addi	fp,sp,8
8110462c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104630:	e0bfff17 	ldw	r2,-4(fp)
81104634:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh7IrqFlagClrBufferEmpty();
81104638:	110482c0 	call	8110482c <vFeebCh7IrqFlagClrBufferEmpty>
}
8110463c:	0001883a 	nop
81104640:	e037883a 	mov	sp,fp
81104644:	dfc00117 	ldw	ra,4(sp)
81104648:	df000017 	ldw	fp,0(sp)
8110464c:	dec00204 	addi	sp,sp,8
81104650:	f800283a 	ret

81104654 <vFeebCh8HandleIrq>:

void vFeebCh8HandleIrq(void* pvContext) {
81104654:	defffc04 	addi	sp,sp,-16
81104658:	de00012e 	bgeu	sp,et,81104660 <vFeebCh8HandleIrq+0xc>
8110465c:	003b68fa 	trap	3
81104660:	dfc00315 	stw	ra,12(sp)
81104664:	df000215 	stw	fp,8(sp)
81104668:	df000204 	addi	fp,sp,8
8110466c:	e13fff15 	stw	r4,-4(fp)
	// Cast context to hold_context's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81104670:	e0bfff17 	ldw	r2,-4(fp)
81104674:	e0bffe15 	stw	r2,-8(fp)
	// Use context value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vFeebCh8IrqFlagClrBufferEmpty();
81104678:	11048700 	call	81104870 <vFeebCh8IrqFlagClrBufferEmpty>
}
8110467c:	0001883a 	nop
81104680:	e037883a 	mov	sp,fp
81104684:	dfc00117 	ldw	ra,4(sp)
81104688:	df000017 	ldw	fp,0(sp)
8110468c:	dec00204 	addi	sp,sp,8
81104690:	f800283a 	ret

81104694 <vFeebCh1IrqFlagClrBufferEmpty>:

void vFeebCh1IrqFlagClrBufferEmpty(void) {
81104694:	defffe04 	addi	sp,sp,-8
81104698:	de00012e 	bgeu	sp,et,811046a0 <vFeebCh1IrqFlagClrBufferEmpty+0xc>
8110469c:	003b68fa 	trap	3
811046a0:	dfc00115 	stw	ra,4(sp)
811046a4:	df000015 	stw	fp,0(sp)
811046a8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811046ac:	01800044 	movi	r6,1
811046b0:	01400144 	movi	r5,5
811046b4:	01204834 	movhi	r4,33056
811046b8:	210b0004 	addi	r4,r4,11264
811046bc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811046c0:	0001883a 	nop
811046c4:	e037883a 	mov	sp,fp
811046c8:	dfc00117 	ldw	ra,4(sp)
811046cc:	df000017 	ldw	fp,0(sp)
811046d0:	dec00204 	addi	sp,sp,8
811046d4:	f800283a 	ret

811046d8 <vFeebCh2IrqFlagClrBufferEmpty>:

void vFeebCh2IrqFlagClrBufferEmpty(void) {
811046d8:	defffe04 	addi	sp,sp,-8
811046dc:	de00012e 	bgeu	sp,et,811046e4 <vFeebCh2IrqFlagClrBufferEmpty+0xc>
811046e0:	003b68fa 	trap	3
811046e4:	dfc00115 	stw	ra,4(sp)
811046e8:	df000015 	stw	fp,0(sp)
811046ec:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
811046f0:	01800044 	movi	r6,1
811046f4:	01400144 	movi	r5,5
811046f8:	01204834 	movhi	r4,33056
811046fc:	210a0004 	addi	r4,r4,10240
81104700:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104704:	0001883a 	nop
81104708:	e037883a 	mov	sp,fp
8110470c:	dfc00117 	ldw	ra,4(sp)
81104710:	df000017 	ldw	fp,0(sp)
81104714:	dec00204 	addi	sp,sp,8
81104718:	f800283a 	ret

8110471c <vFeebCh3IrqFlagClrBufferEmpty>:

void vFeebCh3IrqFlagClrBufferEmpty(void) {
8110471c:	defffe04 	addi	sp,sp,-8
81104720:	de00012e 	bgeu	sp,et,81104728 <vFeebCh3IrqFlagClrBufferEmpty+0xc>
81104724:	003b68fa 	trap	3
81104728:	dfc00115 	stw	ra,4(sp)
8110472c:	df000015 	stw	fp,0(sp)
81104730:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104734:	01800044 	movi	r6,1
81104738:	01400144 	movi	r5,5
8110473c:	01204834 	movhi	r4,33056
81104740:	21090004 	addi	r4,r4,9216
81104744:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104748:	0001883a 	nop
8110474c:	e037883a 	mov	sp,fp
81104750:	dfc00117 	ldw	ra,4(sp)
81104754:	df000017 	ldw	fp,0(sp)
81104758:	dec00204 	addi	sp,sp,8
8110475c:	f800283a 	ret

81104760 <vFeebCh4IrqFlagClrBufferEmpty>:

void vFeebCh4IrqFlagClrBufferEmpty(void) {
81104760:	defffe04 	addi	sp,sp,-8
81104764:	de00012e 	bgeu	sp,et,8110476c <vFeebCh4IrqFlagClrBufferEmpty+0xc>
81104768:	003b68fa 	trap	3
8110476c:	dfc00115 	stw	ra,4(sp)
81104770:	df000015 	stw	fp,0(sp)
81104774:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
81104778:	01800044 	movi	r6,1
8110477c:	01400144 	movi	r5,5
81104780:	01204834 	movhi	r4,33056
81104784:	21080004 	addi	r4,r4,8192
81104788:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110478c:	0001883a 	nop
81104790:	e037883a 	mov	sp,fp
81104794:	dfc00117 	ldw	ra,4(sp)
81104798:	df000017 	ldw	fp,0(sp)
8110479c:	dec00204 	addi	sp,sp,8
811047a0:	f800283a 	ret

811047a4 <vFeebCh5IrqFlagClrBufferEmpty>:

void vFeebCh5IrqFlagClrBufferEmpty(void) {
811047a4:	defffe04 	addi	sp,sp,-8
811047a8:	de00012e 	bgeu	sp,et,811047b0 <vFeebCh5IrqFlagClrBufferEmpty+0xc>
811047ac:	003b68fa 	trap	3
811047b0:	dfc00115 	stw	ra,4(sp)
811047b4:	df000015 	stw	fp,0(sp)
811047b8:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
811047bc:	01800044 	movi	r6,1
811047c0:	01400144 	movi	r5,5
811047c4:	01204834 	movhi	r4,33056
811047c8:	21070004 	addi	r4,r4,7168
811047cc:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
811047d0:	0001883a 	nop
811047d4:	e037883a 	mov	sp,fp
811047d8:	dfc00117 	ldw	ra,4(sp)
811047dc:	df000017 	ldw	fp,0(sp)
811047e0:	dec00204 	addi	sp,sp,8
811047e4:	f800283a 	ret

811047e8 <vFeebCh6IrqFlagClrBufferEmpty>:

void vFeebCh6IrqFlagClrBufferEmpty(void) {
811047e8:	defffe04 	addi	sp,sp,-8
811047ec:	de00012e 	bgeu	sp,et,811047f4 <vFeebCh6IrqFlagClrBufferEmpty+0xc>
811047f0:	003b68fa 	trap	3
811047f4:	dfc00115 	stw	ra,4(sp)
811047f8:	df000015 	stw	fp,0(sp)
811047fc:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104800:	01800044 	movi	r6,1
81104804:	01400144 	movi	r5,5
81104808:	01204834 	movhi	r4,33056
8110480c:	21060004 	addi	r4,r4,6144
81104810:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104814:	0001883a 	nop
81104818:	e037883a 	mov	sp,fp
8110481c:	dfc00117 	ldw	ra,4(sp)
81104820:	df000017 	ldw	fp,0(sp)
81104824:	dec00204 	addi	sp,sp,8
81104828:	f800283a 	ret

8110482c <vFeebCh7IrqFlagClrBufferEmpty>:

void vFeebCh7IrqFlagClrBufferEmpty(void) {
8110482c:	defffe04 	addi	sp,sp,-8
81104830:	de00012e 	bgeu	sp,et,81104838 <vFeebCh7IrqFlagClrBufferEmpty+0xc>
81104834:	003b68fa 	trap	3
81104838:	dfc00115 	stw	ra,4(sp)
8110483c:	df000015 	stw	fp,0(sp)
81104840:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104844:	01800044 	movi	r6,1
81104848:	01400144 	movi	r5,5
8110484c:	01204834 	movhi	r4,33056
81104850:	21050004 	addi	r4,r4,5120
81104854:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
81104858:	0001883a 	nop
8110485c:	e037883a 	mov	sp,fp
81104860:	dfc00117 	ldw	ra,4(sp)
81104864:	df000017 	ldw	fp,0(sp)
81104868:	dec00204 	addi	sp,sp,8
8110486c:	f800283a 	ret

81104870 <vFeebCh8IrqFlagClrBufferEmpty>:

void vFeebCh8IrqFlagClrBufferEmpty(void) {
81104870:	defffe04 	addi	sp,sp,-8
81104874:	de00012e 	bgeu	sp,et,8110487c <vFeebCh8IrqFlagClrBufferEmpty+0xc>
81104878:	003b68fa 	trap	3
8110487c:	dfc00115 	stw	ra,4(sp)
81104880:	df000015 	stw	fp,0(sp)
81104884:	d839883a 	mov	fp,sp
	vFeebWriteReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104888:	01800044 	movi	r6,1
8110488c:	01400144 	movi	r5,5
81104890:	01204834 	movhi	r4,33056
81104894:	21040004 	addi	r4,r4,4096
81104898:	11050d80 	call	811050d8 <vFeebWriteReg>
	COMM_IRQ_FLAG_REG_OFFSET, (alt_u32) COMM_IRQ_BUFFER_EMPTY_FLAG_MSK);
}
8110489c:	0001883a 	nop
811048a0:	e037883a 	mov	sp,fp
811048a4:	dfc00117 	ldw	ra,4(sp)
811048a8:	df000017 	ldw	fp,0(sp)
811048ac:	dec00204 	addi	sp,sp,8
811048b0:	f800283a 	ret

811048b4 <bFeebCh1IrqFlagBufferEmpty>:

bool bFeebCh1IrqFlagBufferEmpty(void) {
811048b4:	defffd04 	addi	sp,sp,-12
811048b8:	de00012e 	bgeu	sp,et,811048c0 <bFeebCh1IrqFlagBufferEmpty+0xc>
811048bc:	003b68fa 	trap	3
811048c0:	dfc00215 	stw	ra,8(sp)
811048c4:	df000115 	stw	fp,4(sp)
811048c8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048cc:	01400144 	movi	r5,5
811048d0:	01204834 	movhi	r4,33056
811048d4:	210b0004 	addi	r4,r4,11264
811048d8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811048dc:	1080004c 	andi	r2,r2,1
}

bool bFeebCh1IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_1_BASE_ADDR,
811048e0:	10000326 	beq	r2,zero,811048f0 <bFeebCh1IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811048e4:	00800044 	movi	r2,1
811048e8:	e0bfff15 	stw	r2,-4(fp)
811048ec:	00000106 	br	811048f4 <bFeebCh1IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811048f0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811048f4:	e0bfff17 	ldw	r2,-4(fp)
}
811048f8:	e037883a 	mov	sp,fp
811048fc:	dfc00117 	ldw	ra,4(sp)
81104900:	df000017 	ldw	fp,0(sp)
81104904:	dec00204 	addi	sp,sp,8
81104908:	f800283a 	ret

8110490c <bFeebCh2IrqFlagBufferEmpty>:

bool bFeebCh2IrqFlagBufferEmpty(void) {
8110490c:	defffd04 	addi	sp,sp,-12
81104910:	de00012e 	bgeu	sp,et,81104918 <bFeebCh2IrqFlagBufferEmpty+0xc>
81104914:	003b68fa 	trap	3
81104918:	dfc00215 	stw	ra,8(sp)
8110491c:	df000115 	stw	fp,4(sp)
81104920:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104924:	01400144 	movi	r5,5
81104928:	01204834 	movhi	r4,33056
8110492c:	210a0004 	addi	r4,r4,10240
81104930:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104934:	1080004c 	andi	r2,r2,1
}

bool bFeebCh2IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_2_BASE_ADDR,
81104938:	10000326 	beq	r2,zero,81104948 <bFeebCh2IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
8110493c:	00800044 	movi	r2,1
81104940:	e0bfff15 	stw	r2,-4(fp)
81104944:	00000106 	br	8110494c <bFeebCh2IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104948:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
8110494c:	e0bfff17 	ldw	r2,-4(fp)
}
81104950:	e037883a 	mov	sp,fp
81104954:	dfc00117 	ldw	ra,4(sp)
81104958:	df000017 	ldw	fp,0(sp)
8110495c:	dec00204 	addi	sp,sp,8
81104960:	f800283a 	ret

81104964 <bFeebCh3IrqFlagBufferEmpty>:

bool bFeebCh3IrqFlagBufferEmpty(void) {
81104964:	defffd04 	addi	sp,sp,-12
81104968:	de00012e 	bgeu	sp,et,81104970 <bFeebCh3IrqFlagBufferEmpty+0xc>
8110496c:	003b68fa 	trap	3
81104970:	dfc00215 	stw	ra,8(sp)
81104974:	df000115 	stw	fp,4(sp)
81104978:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
8110497c:	01400144 	movi	r5,5
81104980:	01204834 	movhi	r4,33056
81104984:	21090004 	addi	r4,r4,9216
81104988:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
8110498c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh3IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_3_BASE_ADDR,
81104990:	10000326 	beq	r2,zero,811049a0 <bFeebCh3IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104994:	00800044 	movi	r2,1
81104998:	e0bfff15 	stw	r2,-4(fp)
8110499c:	00000106 	br	811049a4 <bFeebCh3IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049a0:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049a4:	e0bfff17 	ldw	r2,-4(fp)
}
811049a8:	e037883a 	mov	sp,fp
811049ac:	dfc00117 	ldw	ra,4(sp)
811049b0:	df000017 	ldw	fp,0(sp)
811049b4:	dec00204 	addi	sp,sp,8
811049b8:	f800283a 	ret

811049bc <bFeebCh4IrqFlagBufferEmpty>:

bool bFeebCh4IrqFlagBufferEmpty(void) {
811049bc:	defffd04 	addi	sp,sp,-12
811049c0:	de00012e 	bgeu	sp,et,811049c8 <bFeebCh4IrqFlagBufferEmpty+0xc>
811049c4:	003b68fa 	trap	3
811049c8:	dfc00215 	stw	ra,8(sp)
811049cc:	df000115 	stw	fp,4(sp)
811049d0:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049d4:	01400144 	movi	r5,5
811049d8:	01204834 	movhi	r4,33056
811049dc:	21080004 	addi	r4,r4,8192
811049e0:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
811049e4:	1080004c 	andi	r2,r2,1
}

bool bFeebCh4IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_4_BASE_ADDR,
811049e8:	10000326 	beq	r2,zero,811049f8 <bFeebCh4IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
811049ec:	00800044 	movi	r2,1
811049f0:	e0bfff15 	stw	r2,-4(fp)
811049f4:	00000106 	br	811049fc <bFeebCh4IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
811049f8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
811049fc:	e0bfff17 	ldw	r2,-4(fp)
}
81104a00:	e037883a 	mov	sp,fp
81104a04:	dfc00117 	ldw	ra,4(sp)
81104a08:	df000017 	ldw	fp,0(sp)
81104a0c:	dec00204 	addi	sp,sp,8
81104a10:	f800283a 	ret

81104a14 <bFeebCh5IrqFlagBufferEmpty>:

bool bFeebCh5IrqFlagBufferEmpty(void) {
81104a14:	defffd04 	addi	sp,sp,-12
81104a18:	de00012e 	bgeu	sp,et,81104a20 <bFeebCh5IrqFlagBufferEmpty+0xc>
81104a1c:	003b68fa 	trap	3
81104a20:	dfc00215 	stw	ra,8(sp)
81104a24:	df000115 	stw	fp,4(sp)
81104a28:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a2c:	01400144 	movi	r5,5
81104a30:	01204834 	movhi	r4,33056
81104a34:	21070004 	addi	r4,r4,7168
81104a38:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a3c:	1080004c 	andi	r2,r2,1
}

bool bFeebCh5IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_5_BASE_ADDR,
81104a40:	10000326 	beq	r2,zero,81104a50 <bFeebCh5IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a44:	00800044 	movi	r2,1
81104a48:	e0bfff15 	stw	r2,-4(fp)
81104a4c:	00000106 	br	81104a54 <bFeebCh5IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104a50:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104a54:	e0bfff17 	ldw	r2,-4(fp)
}
81104a58:	e037883a 	mov	sp,fp
81104a5c:	dfc00117 	ldw	ra,4(sp)
81104a60:	df000017 	ldw	fp,0(sp)
81104a64:	dec00204 	addi	sp,sp,8
81104a68:	f800283a 	ret

81104a6c <bFeebCh6IrqFlagBufferEmpty>:

bool bFeebCh6IrqFlagBufferEmpty(void) {
81104a6c:	defffd04 	addi	sp,sp,-12
81104a70:	de00012e 	bgeu	sp,et,81104a78 <bFeebCh6IrqFlagBufferEmpty+0xc>
81104a74:	003b68fa 	trap	3
81104a78:	dfc00215 	stw	ra,8(sp)
81104a7c:	df000115 	stw	fp,4(sp)
81104a80:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a84:	01400144 	movi	r5,5
81104a88:	01204834 	movhi	r4,33056
81104a8c:	21060004 	addi	r4,r4,6144
81104a90:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104a94:	1080004c 	andi	r2,r2,1
}

bool bFeebCh6IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_6_BASE_ADDR,
81104a98:	10000326 	beq	r2,zero,81104aa8 <bFeebCh6IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104a9c:	00800044 	movi	r2,1
81104aa0:	e0bfff15 	stw	r2,-4(fp)
81104aa4:	00000106 	br	81104aac <bFeebCh6IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104aa8:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104aac:	e0bfff17 	ldw	r2,-4(fp)
}
81104ab0:	e037883a 	mov	sp,fp
81104ab4:	dfc00117 	ldw	ra,4(sp)
81104ab8:	df000017 	ldw	fp,0(sp)
81104abc:	dec00204 	addi	sp,sp,8
81104ac0:	f800283a 	ret

81104ac4 <bFeebCh7IrqFlagBufferEmpty>:

bool bFeebCh7IrqFlagBufferEmpty(void) {
81104ac4:	defffd04 	addi	sp,sp,-12
81104ac8:	de00012e 	bgeu	sp,et,81104ad0 <bFeebCh7IrqFlagBufferEmpty+0xc>
81104acc:	003b68fa 	trap	3
81104ad0:	dfc00215 	stw	ra,8(sp)
81104ad4:	df000115 	stw	fp,4(sp)
81104ad8:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104adc:	01400144 	movi	r5,5
81104ae0:	01204834 	movhi	r4,33056
81104ae4:	21050004 	addi	r4,r4,5120
81104ae8:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104aec:	1080004c 	andi	r2,r2,1
}

bool bFeebCh7IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_7_BASE_ADDR,
81104af0:	10000326 	beq	r2,zero,81104b00 <bFeebCh7IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104af4:	00800044 	movi	r2,1
81104af8:	e0bfff15 	stw	r2,-4(fp)
81104afc:	00000106 	br	81104b04 <bFeebCh7IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b00:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b04:	e0bfff17 	ldw	r2,-4(fp)
}
81104b08:	e037883a 	mov	sp,fp
81104b0c:	dfc00117 	ldw	ra,4(sp)
81104b10:	df000017 	ldw	fp,0(sp)
81104b14:	dec00204 	addi	sp,sp,8
81104b18:	f800283a 	ret

81104b1c <bFeebCh8IrqFlagBufferEmpty>:

bool bFeebCh8IrqFlagBufferEmpty(void) {
81104b1c:	defffd04 	addi	sp,sp,-12
81104b20:	de00012e 	bgeu	sp,et,81104b28 <bFeebCh8IrqFlagBufferEmpty+0xc>
81104b24:	003b68fa 	trap	3
81104b28:	dfc00215 	stw	ra,8(sp)
81104b2c:	df000115 	stw	fp,4(sp)
81104b30:	df000104 	addi	fp,sp,4
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b34:	01400144 	movi	r5,5
81104b38:	01204834 	movhi	r4,33056
81104b3c:	21040004 	addi	r4,r4,4096
81104b40:	110512c0 	call	8110512c <uliFeebReadReg>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104b44:	1080004c 	andi	r2,r2,1
}

bool bFeebCh8IrqFlagBufferEmpty(void) {
	bool bFlag;

	if (uliFeebReadReg((alt_u32*) COMM_CHANNEL_8_BASE_ADDR,
81104b48:	10000326 	beq	r2,zero,81104b58 <bFeebCh8IrqFlagBufferEmpty+0x3c>
	COMM_IRQ_FLAG_REG_OFFSET) & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
		bFlag = TRUE;
81104b4c:	00800044 	movi	r2,1
81104b50:	e0bfff15 	stw	r2,-4(fp)
81104b54:	00000106 	br	81104b5c <bFeebCh8IrqFlagBufferEmpty+0x40>
	} else {
		bFlag = FALSE;
81104b58:	e03fff15 	stw	zero,-4(fp)
	}

	return bFlag;
81104b5c:	e0bfff17 	ldw	r2,-4(fp)
}
81104b60:	e037883a 	mov	sp,fp
81104b64:	dfc00117 	ldw	ra,4(sp)
81104b68:	df000017 	ldw	fp,0(sp)
81104b6c:	dec00204 	addi	sp,sp,8
81104b70:	f800283a 	ret

81104b74 <vFeebInitIrq>:

void vFeebInitIrq(alt_u8 ucCommCh) {
81104b74:	defffc04 	addi	sp,sp,-16
81104b78:	de00012e 	bgeu	sp,et,81104b80 <vFeebInitIrq+0xc>
81104b7c:	003b68fa 	trap	3
81104b80:	dfc00315 	stw	ra,12(sp)
81104b84:	df000215 	stw	fp,8(sp)
81104b88:	df000204 	addi	fp,sp,8
81104b8c:	2005883a 	mov	r2,r4
81104b90:	e0bfff05 	stb	r2,-4(fp)
	void* pvHoldContext;
	switch (ucCommCh) {
81104b94:	e0bfff03 	ldbu	r2,-4(fp)
81104b98:	10c00268 	cmpgeui	r3,r2,9
81104b9c:	18004f1e 	bne	r3,zero,81104cdc <vFeebInitIrq+0x168>
81104ba0:	100690ba 	slli	r3,r2,2
81104ba4:	00a04434 	movhi	r2,33040
81104ba8:	1092ee04 	addi	r2,r2,19384
81104bac:	1885883a 	add	r2,r3,r2
81104bb0:	10800017 	ldw	r2,0(r2)
81104bb4:	1000683a 	jmp	r2
81104bb8:	81104cdc 	xori	r4,r16,16691
81104bbc:	81104bdc 	xori	r4,r16,16687
81104bc0:	81104bfc 	xorhi	r4,r16,16687
81104bc4:	81104c1c 	xori	r4,r16,16688
81104bc8:	81104c3c 	xorhi	r4,r16,16688
81104bcc:	81104c5c 	xori	r4,r16,16689
81104bd0:	81104c7c 	xorhi	r4,r16,16689
81104bd4:	81104c9c 	xori	r4,r16,16690
81104bd8:	81104cbc 	xorhi	r4,r16,16690
	case eCommSpwCh1:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh1HoldContext;
81104bdc:	d0a03d04 	addi	r2,gp,-32524
81104be0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_A_IRQ, pvHoldContext,
81104be4:	01a04434 	movhi	r6,33040
81104be8:	31912504 	addi	r6,r6,17556
81104bec:	e17ffe17 	ldw	r5,-8(fp)
81104bf0:	01000084 	movi	r4,2
81104bf4:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh1HandleIrq);
		break;
81104bf8:	00003806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh2:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh2HoldContext;
81104bfc:	d0a03e04 	addi	r2,gp,-32520
81104c00:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_B_IRQ, pvHoldContext,
81104c04:	01a04434 	movhi	r6,33040
81104c08:	31913504 	addi	r6,r6,17620
81104c0c:	e17ffe17 	ldw	r5,-8(fp)
81104c10:	010000c4 	movi	r4,3
81104c14:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh2HandleIrq);
		break;
81104c18:	00003006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh3:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh3HoldContext;
81104c1c:	d0a03f04 	addi	r2,gp,-32516
81104c20:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_C_IRQ, pvHoldContext,
81104c24:	01a04434 	movhi	r6,33040
81104c28:	31914504 	addi	r6,r6,17684
81104c2c:	e17ffe17 	ldw	r5,-8(fp)
81104c30:	01000104 	movi	r4,4
81104c34:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh3HandleIrq);
		break;
81104c38:	00002806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh4:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh4HoldContext;
81104c3c:	d0a04004 	addi	r2,gp,-32512
81104c40:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_D_IRQ, pvHoldContext,
81104c44:	01a04434 	movhi	r6,33040
81104c48:	31915504 	addi	r6,r6,17748
81104c4c:	e17ffe17 	ldw	r5,-8(fp)
81104c50:	01000204 	movi	r4,8
81104c54:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh4HandleIrq);
		break;
81104c58:	00002006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh5:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh5HoldContext;
81104c5c:	d0a04104 	addi	r2,gp,-32508
81104c60:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_E_IRQ, pvHoldContext,
81104c64:	01a04434 	movhi	r6,33040
81104c68:	31916504 	addi	r6,r6,17812
81104c6c:	e17ffe17 	ldw	r5,-8(fp)
81104c70:	010001c4 	movi	r4,7
81104c74:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh5HandleIrq);
		break;
81104c78:	00001806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh6:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh6HoldContext;
81104c7c:	d0a04204 	addi	r2,gp,-32504
81104c80:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_F_IRQ, pvHoldContext,
81104c84:	01a04434 	movhi	r6,33040
81104c88:	31917504 	addi	r6,r6,17876
81104c8c:	e17ffe17 	ldw	r5,-8(fp)
81104c90:	01000184 	movi	r4,6
81104c94:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh6HandleIrq);
		break;
81104c98:	00001006 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh7:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh7HoldContext;
81104c9c:	d0a04304 	addi	r2,gp,-32500
81104ca0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_G_IRQ, pvHoldContext,
81104ca4:	01a04434 	movhi	r6,33040
81104ca8:	31918504 	addi	r6,r6,17940
81104cac:	e17ffe17 	ldw	r5,-8(fp)
81104cb0:	01000144 	movi	r4,5
81104cb4:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh7HandleIrq);
		break;
81104cb8:	00000806 	br	81104cdc <vFeebInitIrq+0x168>
	case eCommSpwCh8:
		// Recast the hold_context pointer to match the alt_irq_register() function
		// prototype.
		pvHoldContext = (void*) &viCh8HoldContext;
81104cbc:	d0a04404 	addi	r2,gp,-32496
81104cc0:	e0bffe15 	stw	r2,-8(fp)
		// Register the interrupt handler
		alt_irq_register(COMM_PEDREIRO_V1_01_H_IRQ, pvHoldContext,
81104cc4:	01a04434 	movhi	r6,33040
81104cc8:	31919504 	addi	r6,r6,18004
81104ccc:	e17ffe17 	ldw	r5,-8(fp)
81104cd0:	01000244 	movi	r4,9
81104cd4:	11257e80 	call	811257e8 <alt_irq_register>
				vFeebCh8HandleIrq);
		break;
81104cd8:	0001883a 	nop
	}
}
81104cdc:	0001883a 	nop
81104ce0:	e037883a 	mov	sp,fp
81104ce4:	dfc00117 	ldw	ra,4(sp)
81104ce8:	df000017 	ldw	fp,0(sp)
81104cec:	dec00204 	addi	sp,sp,8
81104cf0:	f800283a 	ret

81104cf4 <bFeebSetIrqControl>:

bool bFeebSetIrqControl(TFeebChannel *pxFeebCh) {
81104cf4:	defffb04 	addi	sp,sp,-20
81104cf8:	de00012e 	bgeu	sp,et,81104d00 <bFeebSetIrqControl+0xc>
81104cfc:	003b68fa 	trap	3
81104d00:	dfc00415 	stw	ra,16(sp)
81104d04:	df000315 	stw	fp,12(sp)
81104d08:	df000304 	addi	fp,sp,12
81104d0c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104d10:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104d14:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104d18:	e0bfff17 	ldw	r2,-4(fp)
81104d1c:	10002426 	beq	r2,zero,81104db0 <bFeebSetIrqControl+0xbc>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104d20:	e0bfff17 	ldw	r2,-4(fp)
81104d24:	10800017 	ldw	r2,0(r2)
81104d28:	01400104 	movi	r5,4
81104d2c:	1009883a 	mov	r4,r2
81104d30:	110512c0 	call	8110512c <uliFeebReadReg>
81104d34:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (pxFeebCh->xIrqControl.bLeftBufferEmptyEn) {
81104d38:	e0bfff17 	ldw	r2,-4(fp)
81104d3c:	10800217 	ldw	r2,8(r2)
81104d40:	10000426 	beq	r2,zero,81104d54 <bFeebSetIrqControl+0x60>
			uliReg |= COMM_IRQ_L_BUFFER_EMPTY_EN_MSK;
81104d44:	e0bffe17 	ldw	r2,-8(fp)
81104d48:	10804014 	ori	r2,r2,256
81104d4c:	e0bffe15 	stw	r2,-8(fp)
81104d50:	00000406 	br	81104d64 <bFeebSetIrqControl+0x70>
		} else {
			uliReg &= (~COMM_IRQ_L_BUFFER_EMPTY_EN_MSK);
81104d54:	e0fffe17 	ldw	r3,-8(fp)
81104d58:	00bfbfc4 	movi	r2,-257
81104d5c:	1884703a 	and	r2,r3,r2
81104d60:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxFeebCh->xIrqControl.bRightBufferEmptyEn) {
81104d64:	e0bfff17 	ldw	r2,-4(fp)
81104d68:	10800317 	ldw	r2,12(r2)
81104d6c:	10000426 	beq	r2,zero,81104d80 <bFeebSetIrqControl+0x8c>
			uliReg |= COMM_IRQ_R_BUFFER_EMPTY_EN_MSK;
81104d70:	e0bffe17 	ldw	r2,-8(fp)
81104d74:	10800054 	ori	r2,r2,1
81104d78:	e0bffe15 	stw	r2,-8(fp)
81104d7c:	00000406 	br	81104d90 <bFeebSetIrqControl+0x9c>
		} else {
			uliReg &= (~COMM_IRQ_R_BUFFER_EMPTY_EN_MSK);
81104d80:	e0fffe17 	ldw	r3,-8(fp)
81104d84:	00bfff84 	movi	r2,-2
81104d88:	1884703a 	and	r2,r3,r2
81104d8c:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_IRQ_CTRL_REG_OFFSET,
81104d90:	e0bfff17 	ldw	r2,-4(fp)
81104d94:	10800017 	ldw	r2,0(r2)
81104d98:	e1bffe17 	ldw	r6,-8(fp)
81104d9c:	01400104 	movi	r5,4
81104da0:	1009883a 	mov	r4,r2
81104da4:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104da8:	00800044 	movi	r2,1
81104dac:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104db0:	e0bffd17 	ldw	r2,-12(fp)
}
81104db4:	e037883a 	mov	sp,fp
81104db8:	dfc00117 	ldw	ra,4(sp)
81104dbc:	df000017 	ldw	fp,0(sp)
81104dc0:	dec00204 	addi	sp,sp,8
81104dc4:	f800283a 	ret

81104dc8 <bFeebGetIrqControl>:

bool bFeebGetIrqControl(TFeebChannel *pxFeebCh) {
81104dc8:	defffb04 	addi	sp,sp,-20
81104dcc:	de00012e 	bgeu	sp,et,81104dd4 <bFeebGetIrqControl+0xc>
81104dd0:	003b68fa 	trap	3
81104dd4:	dfc00415 	stw	ra,16(sp)
81104dd8:	df000315 	stw	fp,12(sp)
81104ddc:	df000304 	addi	fp,sp,12
81104de0:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104de4:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104de8:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104dec:	e0bfff17 	ldw	r2,-4(fp)
81104df0:	10001a26 	beq	r2,zero,81104e5c <bFeebGetIrqControl+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104df4:	e0bfff17 	ldw	r2,-4(fp)
81104df8:	10800017 	ldw	r2,0(r2)
81104dfc:	01400104 	movi	r5,4
81104e00:	1009883a 	mov	r4,r2
81104e04:	110512c0 	call	8110512c <uliFeebReadReg>
81104e08:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_CTRL_REG_OFFSET);

		if (uliReg & COMM_IRQ_L_BUFFER_EMPTY_EN_MSK) {
81104e0c:	e0bffe17 	ldw	r2,-8(fp)
81104e10:	1080400c 	andi	r2,r2,256
81104e14:	10000426 	beq	r2,zero,81104e28 <bFeebGetIrqControl+0x60>
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = TRUE;
81104e18:	e0bfff17 	ldw	r2,-4(fp)
81104e1c:	00c00044 	movi	r3,1
81104e20:	10c00215 	stw	r3,8(r2)
81104e24:	00000206 	br	81104e30 <bFeebGetIrqControl+0x68>
		} else {
			pxFeebCh->xIrqControl.bLeftBufferEmptyEn = FALSE;
81104e28:	e0bfff17 	ldw	r2,-4(fp)
81104e2c:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_IRQ_R_BUFFER_EMPTY_EN_MSK) {
81104e30:	e0bffe17 	ldw	r2,-8(fp)
81104e34:	1080004c 	andi	r2,r2,1
81104e38:	10000426 	beq	r2,zero,81104e4c <bFeebGetIrqControl+0x84>
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = TRUE;
81104e3c:	e0bfff17 	ldw	r2,-4(fp)
81104e40:	00c00044 	movi	r3,1
81104e44:	10c00315 	stw	r3,12(r2)
81104e48:	00000206 	br	81104e54 <bFeebGetIrqControl+0x8c>
		} else {
			pxFeebCh->xIrqControl.bRightBufferEmptyEn = FALSE;
81104e4c:	e0bfff17 	ldw	r2,-4(fp)
81104e50:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
81104e54:	00800044 	movi	r2,1
81104e58:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104e5c:	e0bffd17 	ldw	r2,-12(fp)
}
81104e60:	e037883a 	mov	sp,fp
81104e64:	dfc00117 	ldw	ra,4(sp)
81104e68:	df000017 	ldw	fp,0(sp)
81104e6c:	dec00204 	addi	sp,sp,8
81104e70:	f800283a 	ret

81104e74 <bFeebGetIrqFlags>:

bool bFeebGetIrqFlags(TFeebChannel *pxFeebCh) {
81104e74:	defffb04 	addi	sp,sp,-20
81104e78:	de00012e 	bgeu	sp,et,81104e80 <bFeebGetIrqFlags+0xc>
81104e7c:	003b68fa 	trap	3
81104e80:	dfc00415 	stw	ra,16(sp)
81104e84:	df000315 	stw	fp,12(sp)
81104e88:	df000304 	addi	fp,sp,12
81104e8c:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104e90:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104e94:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104e98:	e0bfff17 	ldw	r2,-4(fp)
81104e9c:	10001126 	beq	r2,zero,81104ee4 <bFeebGetIrqFlags+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104ea0:	e0bfff17 	ldw	r2,-4(fp)
81104ea4:	10800017 	ldw	r2,0(r2)
81104ea8:	01400144 	movi	r5,5
81104eac:	1009883a 	mov	r4,r2
81104eb0:	110512c0 	call	8110512c <uliFeebReadReg>
81104eb4:	e0bffe15 	stw	r2,-8(fp)
		COMM_IRQ_FLAG_REG_OFFSET);

		if (uliReg & COMM_IRQ_BUFFER_EMPTY_FLAG_MSK) {
81104eb8:	e0bffe17 	ldw	r2,-8(fp)
81104ebc:	1080004c 	andi	r2,r2,1
81104ec0:	10000426 	beq	r2,zero,81104ed4 <bFeebGetIrqFlags+0x60>
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = TRUE;
81104ec4:	e0bfff17 	ldw	r2,-4(fp)
81104ec8:	00c00044 	movi	r3,1
81104ecc:	10c00415 	stw	r3,16(r2)
81104ed0:	00000206 	br	81104edc <bFeebGetIrqFlags+0x68>
		} else {
			pxFeebCh->xIrqFlag.bBufferEmptyFlag = FALSE;
81104ed4:	e0bfff17 	ldw	r2,-4(fp)
81104ed8:	10000415 	stw	zero,16(r2)
		}

		bStatus = TRUE;
81104edc:	00800044 	movi	r2,1
81104ee0:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104ee4:	e0bffd17 	ldw	r2,-12(fp)
}
81104ee8:	e037883a 	mov	sp,fp
81104eec:	dfc00117 	ldw	ra,4(sp)
81104ef0:	df000017 	ldw	fp,0(sp)
81104ef4:	dec00204 	addi	sp,sp,8
81104ef8:	f800283a 	ret

81104efc <bFeebSetWindowing>:

bool bFeebSetWindowing(TFeebChannel *pxFeebCh) {
81104efc:	defffb04 	addi	sp,sp,-20
81104f00:	de00012e 	bgeu	sp,et,81104f08 <bFeebSetWindowing+0xc>
81104f04:	003b68fa 	trap	3
81104f08:	dfc00415 	stw	ra,16(sp)
81104f0c:	df000315 	stw	fp,12(sp)
81104f10:	df000304 	addi	fp,sp,12
81104f14:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104f18:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104f1c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104f20:	e0bfff17 	ldw	r2,-4(fp)
81104f24:	10001926 	beq	r2,zero,81104f8c <bFeebSetWindowing+0x90>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104f28:	e0bfff17 	ldw	r2,-4(fp)
81104f2c:	10800017 	ldw	r2,0(r2)
81104f30:	000b883a 	mov	r5,zero
81104f34:	1009883a 	mov	r4,r2
81104f38:	110512c0 	call	8110512c <uliFeebReadReg>
81104f3c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxFeebCh->xWindowingConfig.bMasking) {
81104f40:	e0bfff17 	ldw	r2,-4(fp)
81104f44:	10800117 	ldw	r2,4(r2)
81104f48:	10000426 	beq	r2,zero,81104f5c <bFeebSetWindowing+0x60>
			uliReg |= COMM_CTRL_MASKING_EN_MSK;
81104f4c:	e0bffe17 	ldw	r2,-8(fp)
81104f50:	10804014 	ori	r2,r2,256
81104f54:	e0bffe15 	stw	r2,-8(fp)
81104f58:	00000406 	br	81104f6c <bFeebSetWindowing+0x70>
		} else {
			uliReg &= (~COMM_CTRL_MASKING_EN_MSK);
81104f5c:	e0fffe17 	ldw	r3,-8(fp)
81104f60:	00bfbfc4 	movi	r2,-257
81104f64:	1884703a 	and	r2,r3,r2
81104f68:	e0bffe15 	stw	r2,-8(fp)
		}

		vFeebWriteReg(pxFeebCh->puliFeebChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81104f6c:	e0bfff17 	ldw	r2,-4(fp)
81104f70:	10800017 	ldw	r2,0(r2)
81104f74:	e1bffe17 	ldw	r6,-8(fp)
81104f78:	000b883a 	mov	r5,zero
81104f7c:	1009883a 	mov	r4,r2
81104f80:	11050d80 	call	811050d8 <vFeebWriteReg>
				uliReg);
		bStatus = TRUE;
81104f84:	00800044 	movi	r2,1
81104f88:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81104f8c:	e0bffd17 	ldw	r2,-12(fp)
}
81104f90:	e037883a 	mov	sp,fp
81104f94:	dfc00117 	ldw	ra,4(sp)
81104f98:	df000017 	ldw	fp,0(sp)
81104f9c:	dec00204 	addi	sp,sp,8
81104fa0:	f800283a 	ret

81104fa4 <bFeebGetWindowing>:

bool bFeebGetWindowing(TFeebChannel *pxFeebCh) {
81104fa4:	defffb04 	addi	sp,sp,-20
81104fa8:	de00012e 	bgeu	sp,et,81104fb0 <bFeebGetWindowing+0xc>
81104fac:	003b68fa 	trap	3
81104fb0:	dfc00415 	stw	ra,16(sp)
81104fb4:	df000315 	stw	fp,12(sp)
81104fb8:	df000304 	addi	fp,sp,12
81104fbc:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81104fc0:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81104fc4:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81104fc8:	e0bfff17 	ldw	r2,-4(fp)
81104fcc:	10001126 	beq	r2,zero,81105014 <bFeebGetWindowing+0x70>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81104fd0:	e0bfff17 	ldw	r2,-4(fp)
81104fd4:	10800017 	ldw	r2,0(r2)
81104fd8:	000b883a 	mov	r5,zero
81104fdc:	1009883a 	mov	r4,r2
81104fe0:	110512c0 	call	8110512c <uliFeebReadReg>
81104fe4:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_MASKING_EN_MSK) {
81104fe8:	e0bffe17 	ldw	r2,-8(fp)
81104fec:	1080400c 	andi	r2,r2,256
81104ff0:	10000426 	beq	r2,zero,81105004 <bFeebGetWindowing+0x60>
			pxFeebCh->xWindowingConfig.bMasking = TRUE;
81104ff4:	e0bfff17 	ldw	r2,-4(fp)
81104ff8:	00c00044 	movi	r3,1
81104ffc:	10c00115 	stw	r3,4(r2)
81105000:	00000206 	br	8110500c <bFeebGetWindowing+0x68>
		} else {
			pxFeebCh->xWindowingConfig.bMasking = FALSE;
81105004:	e0bfff17 	ldw	r2,-4(fp)
81105008:	10000115 	stw	zero,4(r2)
		}

		bStatus = TRUE;
8110500c:	00800044 	movi	r2,1
81105010:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105014:	e0bffd17 	ldw	r2,-12(fp)
}
81105018:	e037883a 	mov	sp,fp
8110501c:	dfc00117 	ldw	ra,4(sp)
81105020:	df000017 	ldw	fp,0(sp)
81105024:	dec00204 	addi	sp,sp,8
81105028:	f800283a 	ret

8110502c <bFeebGetBuffersStatus>:

bool bFeebGetBuffersStatus(TFeebChannel *pxFeebCh) {
8110502c:	defffb04 	addi	sp,sp,-20
81105030:	de00012e 	bgeu	sp,et,81105038 <bFeebGetBuffersStatus+0xc>
81105034:	003b68fa 	trap	3
81105038:	dfc00415 	stw	ra,16(sp)
8110503c:	df000315 	stw	fp,12(sp)
81105040:	df000304 	addi	fp,sp,12
81105044:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105048:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110504c:	e03ffe15 	stw	zero,-8(fp)

	if (pxFeebCh != NULL) {
81105050:	e0bfff17 	ldw	r2,-4(fp)
81105054:	10001a26 	beq	r2,zero,811050c0 <bFeebGetBuffersStatus+0x94>
		uliReg = uliFeebReadReg(pxFeebCh->puliFeebChAddr,
81105058:	e0bfff17 	ldw	r2,-4(fp)
8110505c:	10800017 	ldw	r2,0(r2)
81105060:	01400184 	movi	r5,6
81105064:	1009883a 	mov	r4,r2
81105068:	110512c0 	call	8110512c <uliFeebReadReg>
8110506c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_BUFFER_REG_OFFSET);

		if (uliReg & COMM_BUFF_STAT_L_BUFF_EPY_MSK) {
81105070:	e0bffe17 	ldw	r2,-8(fp)
81105074:	1080400c 	andi	r2,r2,256
81105078:	10000426 	beq	r2,zero,8110508c <bFeebGetBuffersStatus+0x60>
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = TRUE;
8110507c:	e0bfff17 	ldw	r2,-4(fp)
81105080:	00c00044 	movi	r3,1
81105084:	10c00515 	stw	r3,20(r2)
81105088:	00000206 	br	81105094 <bFeebGetBuffersStatus+0x68>
		} else {
			pxFeebCh->xBufferStatus.bLeftBufferEmpty = FALSE;
8110508c:	e0bfff17 	ldw	r2,-4(fp)
81105090:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_BUFF_STAT_R_BUFF_EPY_MSK) {
81105094:	e0bffe17 	ldw	r2,-8(fp)
81105098:	1080004c 	andi	r2,r2,1
8110509c:	10000426 	beq	r2,zero,811050b0 <bFeebGetBuffersStatus+0x84>
			pxFeebCh->xBufferStatus.bRightBufferEmpty = TRUE;
811050a0:	e0bfff17 	ldw	r2,-4(fp)
811050a4:	00c00044 	movi	r3,1
811050a8:	10c00615 	stw	r3,24(r2)
811050ac:	00000206 	br	811050b8 <bFeebGetBuffersStatus+0x8c>
		} else {
			pxFeebCh->xBufferStatus.bRightBufferEmpty = FALSE;
811050b0:	e0bfff17 	ldw	r2,-4(fp)
811050b4:	10000615 	stw	zero,24(r2)
		}

		bStatus = TRUE;
811050b8:	00800044 	movi	r2,1
811050bc:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811050c0:	e0bffd17 	ldw	r2,-12(fp)
}
811050c4:	e037883a 	mov	sp,fp
811050c8:	dfc00117 	ldw	ra,4(sp)
811050cc:	df000017 	ldw	fp,0(sp)
811050d0:	dec00204 	addi	sp,sp,8
811050d4:	f800283a 	ret

811050d8 <vFeebWriteReg>:

//! [public functions]

//! [private functions]
static void vFeebWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
811050d8:	defffc04 	addi	sp,sp,-16
811050dc:	de00012e 	bgeu	sp,et,811050e4 <vFeebWriteReg+0xc>
811050e0:	003b68fa 	trap	3
811050e4:	df000315 	stw	fp,12(sp)
811050e8:	df000304 	addi	fp,sp,12
811050ec:	e13ffd15 	stw	r4,-12(fp)
811050f0:	e17ffe15 	stw	r5,-8(fp)
811050f4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811050f8:	e0bffe17 	ldw	r2,-8(fp)
811050fc:	1085883a 	add	r2,r2,r2
81105100:	1085883a 	add	r2,r2,r2
81105104:	1007883a 	mov	r3,r2
81105108:	e0bffd17 	ldw	r2,-12(fp)
8110510c:	10c5883a 	add	r2,r2,r3
81105110:	e0ffff17 	ldw	r3,-4(fp)
81105114:	10c00015 	stw	r3,0(r2)
}
81105118:	0001883a 	nop
8110511c:	e037883a 	mov	sp,fp
81105120:	df000017 	ldw	fp,0(sp)
81105124:	dec00104 	addi	sp,sp,4
81105128:	f800283a 	ret

8110512c <uliFeebReadReg>:

static alt_u32 uliFeebReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
8110512c:	defffc04 	addi	sp,sp,-16
81105130:	de00012e 	bgeu	sp,et,81105138 <uliFeebReadReg+0xc>
81105134:	003b68fa 	trap	3
81105138:	df000315 	stw	fp,12(sp)
8110513c:	df000304 	addi	fp,sp,12
81105140:	e13ffe15 	stw	r4,-8(fp)
81105144:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81105148:	e0bfff17 	ldw	r2,-4(fp)
8110514c:	1085883a 	add	r2,r2,r2
81105150:	1085883a 	add	r2,r2,r2
81105154:	1007883a 	mov	r3,r2
81105158:	e0bffe17 	ldw	r2,-8(fp)
8110515c:	10c5883a 	add	r2,r2,r3
81105160:	10800017 	ldw	r2,0(r2)
81105164:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105168:	e0bffd17 	ldw	r2,-12(fp)
}
8110516c:	e037883a 	mov	sp,fp
81105170:	df000017 	ldw	fp,0(sp)
81105174:	dec00104 	addi	sp,sp,4
81105178:	f800283a 	ret

8110517c <bSpwcSetLink>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bSpwcSetLink(TSpwcChannel *pxSpwcCh) {
8110517c:	defffb04 	addi	sp,sp,-20
81105180:	de00012e 	bgeu	sp,et,81105188 <bSpwcSetLink+0xc>
81105184:	003b68fa 	trap	3
81105188:	dfc00415 	stw	ra,16(sp)
8110518c:	df000315 	stw	fp,12(sp)
81105190:	df000304 	addi	fp,sp,12
81105194:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105198:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110519c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811051a0:	e0bfff17 	ldw	r2,-4(fp)
811051a4:	10002f26 	beq	r2,zero,81105264 <bSpwcSetLink+0xe8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811051a8:	e0bfff17 	ldw	r2,-4(fp)
811051ac:	10800017 	ldw	r2,0(r2)
811051b0:	000b883a 	mov	r5,zero
811051b4:	1009883a 	mov	r4,r2
811051b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811051bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (pxSpwcCh->xLinkConfig.bAutostart) {
811051c0:	e0bfff17 	ldw	r2,-4(fp)
811051c4:	10800117 	ldw	r2,4(r2)
811051c8:	10000426 	beq	r2,zero,811051dc <bSpwcSetLink+0x60>
			uliReg |= COMM_CTRL_LINK_AUTOSTART_MSK;
811051cc:	e0bffe17 	ldw	r2,-8(fp)
811051d0:	10800114 	ori	r2,r2,4
811051d4:	e0bffe15 	stw	r2,-8(fp)
811051d8:	00000406 	br	811051ec <bSpwcSetLink+0x70>
		} else {
			uliReg &= (~COMM_CTRL_LINK_AUTOSTART_MSK);
811051dc:	e0fffe17 	ldw	r3,-8(fp)
811051e0:	00bffec4 	movi	r2,-5
811051e4:	1884703a 	and	r2,r3,r2
811051e8:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bStart) {
811051ec:	e0bfff17 	ldw	r2,-4(fp)
811051f0:	10800217 	ldw	r2,8(r2)
811051f4:	10000426 	beq	r2,zero,81105208 <bSpwcSetLink+0x8c>
			uliReg |= COMM_CTRL_LINK_START_MSK;
811051f8:	e0bffe17 	ldw	r2,-8(fp)
811051fc:	10800094 	ori	r2,r2,2
81105200:	e0bffe15 	stw	r2,-8(fp)
81105204:	00000406 	br	81105218 <bSpwcSetLink+0x9c>
		} else {
			uliReg &= (~COMM_CTRL_LINK_START_MSK);
81105208:	e0fffe17 	ldw	r3,-8(fp)
8110520c:	00bfff44 	movi	r2,-3
81105210:	1884703a 	and	r2,r3,r2
81105214:	e0bffe15 	stw	r2,-8(fp)
		}
		if (pxSpwcCh->xLinkConfig.bDisconnect) {
81105218:	e0bfff17 	ldw	r2,-4(fp)
8110521c:	10800317 	ldw	r2,12(r2)
81105220:	10000426 	beq	r2,zero,81105234 <bSpwcSetLink+0xb8>
			uliReg |= COMM_CTRL_LINK_DISCONNECT_MSK;
81105224:	e0bffe17 	ldw	r2,-8(fp)
81105228:	10800054 	ori	r2,r2,1
8110522c:	e0bffe15 	stw	r2,-8(fp)
81105230:	00000406 	br	81105244 <bSpwcSetLink+0xc8>
		} else {
			uliReg &= (~COMM_CTRL_LINK_DISCONNECT_MSK);
81105234:	e0fffe17 	ldw	r3,-8(fp)
81105238:	00bfff84 	movi	r2,-2
8110523c:	1884703a 	and	r2,r3,r2
81105240:	e0bffe15 	stw	r2,-8(fp)
		}

		vSpwcWriteReg(pxSpwcCh->puliSpwcChAddr, COMM_WINDOW_CTRL_REG_OFFSET,
81105244:	e0bfff17 	ldw	r2,-4(fp)
81105248:	10800017 	ldw	r2,0(r2)
8110524c:	e1bffe17 	ldw	r6,-8(fp)
81105250:	000b883a 	mov	r5,zero
81105254:	1009883a 	mov	r4,r2
81105258:	11056880 	call	81105688 <vSpwcWriteReg>
				uliReg);
		bStatus = TRUE;
8110525c:	00800044 	movi	r2,1
81105260:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105264:	e0bffd17 	ldw	r2,-12(fp)
}
81105268:	e037883a 	mov	sp,fp
8110526c:	dfc00117 	ldw	ra,4(sp)
81105270:	df000017 	ldw	fp,0(sp)
81105274:	dec00204 	addi	sp,sp,8
81105278:	f800283a 	ret

8110527c <bSpwcGetLink>:

bool bSpwcGetLink(TSpwcChannel *pxSpwcCh) {
8110527c:	defffb04 	addi	sp,sp,-20
81105280:	de00012e 	bgeu	sp,et,81105288 <bSpwcGetLink+0xc>
81105284:	003b68fa 	trap	3
81105288:	dfc00415 	stw	ra,16(sp)
8110528c:	df000315 	stw	fp,12(sp)
81105290:	df000304 	addi	fp,sp,12
81105294:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105298:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110529c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
811052a0:	e0bfff17 	ldw	r2,-4(fp)
811052a4:	10002326 	beq	r2,zero,81105334 <bSpwcGetLink+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
811052a8:	e0bfff17 	ldw	r2,-4(fp)
811052ac:	10800017 	ldw	r2,0(r2)
811052b0:	000b883a 	mov	r5,zero
811052b4:	1009883a 	mov	r4,r2
811052b8:	11056dc0 	call	811056dc <uliSpwcReadReg>
811052bc:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_CTRL_REG_OFFSET);

		if (uliReg & COMM_CTRL_LINK_AUTOSTART_MSK) {
811052c0:	e0bffe17 	ldw	r2,-8(fp)
811052c4:	1080010c 	andi	r2,r2,4
811052c8:	10000426 	beq	r2,zero,811052dc <bSpwcGetLink+0x60>
			pxSpwcCh->xLinkConfig.bAutostart = TRUE;
811052cc:	e0bfff17 	ldw	r2,-4(fp)
811052d0:	00c00044 	movi	r3,1
811052d4:	10c00115 	stw	r3,4(r2)
811052d8:	00000206 	br	811052e4 <bSpwcGetLink+0x68>
		} else {
			pxSpwcCh->xLinkConfig.bAutostart = FALSE;
811052dc:	e0bfff17 	ldw	r2,-4(fp)
811052e0:	10000115 	stw	zero,4(r2)
		}
		if (uliReg & COMM_CTRL_LINK_START_MSK) {
811052e4:	e0bffe17 	ldw	r2,-8(fp)
811052e8:	1080008c 	andi	r2,r2,2
811052ec:	10000426 	beq	r2,zero,81105300 <bSpwcGetLink+0x84>
			pxSpwcCh->xLinkConfig.bStart = TRUE;
811052f0:	e0bfff17 	ldw	r2,-4(fp)
811052f4:	00c00044 	movi	r3,1
811052f8:	10c00215 	stw	r3,8(r2)
811052fc:	00000206 	br	81105308 <bSpwcGetLink+0x8c>
		} else {
			pxSpwcCh->xLinkConfig.bStart = FALSE;
81105300:	e0bfff17 	ldw	r2,-4(fp)
81105304:	10000215 	stw	zero,8(r2)
		}
		if (uliReg & COMM_CTRL_LINK_DISCONNECT_MSK) {
81105308:	e0bffe17 	ldw	r2,-8(fp)
8110530c:	1080004c 	andi	r2,r2,1
81105310:	10000426 	beq	r2,zero,81105324 <bSpwcGetLink+0xa8>
			pxSpwcCh->xLinkConfig.bDisconnect = TRUE;
81105314:	e0bfff17 	ldw	r2,-4(fp)
81105318:	00c00044 	movi	r3,1
8110531c:	10c00315 	stw	r3,12(r2)
81105320:	00000206 	br	8110532c <bSpwcGetLink+0xb0>
		} else {
			pxSpwcCh->xLinkConfig.bDisconnect = FALSE;
81105324:	e0bfff17 	ldw	r2,-4(fp)
81105328:	10000315 	stw	zero,12(r2)
		}

		bStatus = TRUE;
8110532c:	00800044 	movi	r2,1
81105330:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105334:	e0bffd17 	ldw	r2,-12(fp)
}
81105338:	e037883a 	mov	sp,fp
8110533c:	dfc00117 	ldw	ra,4(sp)
81105340:	df000017 	ldw	fp,0(sp)
81105344:	dec00204 	addi	sp,sp,8
81105348:	f800283a 	ret

8110534c <bSpwcGetLinkError>:

bool bSpwcGetLinkError(TSpwcChannel *pxSpwcCh) {
8110534c:	defffb04 	addi	sp,sp,-20
81105350:	de00012e 	bgeu	sp,et,81105358 <bSpwcGetLinkError+0xc>
81105354:	003b68fa 	trap	3
81105358:	dfc00415 	stw	ra,16(sp)
8110535c:	df000315 	stw	fp,12(sp)
81105360:	df000304 	addi	fp,sp,12
81105364:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
81105368:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
8110536c:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105370:	e0bfff17 	ldw	r2,-4(fp)
81105374:	10002c26 	beq	r2,zero,81105428 <bSpwcGetLinkError+0xdc>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
81105378:	e0bfff17 	ldw	r2,-4(fp)
8110537c:	10800017 	ldw	r2,0(r2)
81105380:	01400044 	movi	r5,1
81105384:	1009883a 	mov	r4,r2
81105388:	11056dc0 	call	811056dc <uliSpwcReadReg>
8110538c:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_DISC_ERR_MSK) {
81105390:	e0bffe17 	ldw	r2,-8(fp)
81105394:	1082000c 	andi	r2,r2,2048
81105398:	10000426 	beq	r2,zero,811053ac <bSpwcGetLinkError+0x60>
			pxSpwcCh->xLinkError.bDisconnect = TRUE;
8110539c:	e0bfff17 	ldw	r2,-4(fp)
811053a0:	00c00044 	movi	r3,1
811053a4:	10c00415 	stw	r3,16(r2)
811053a8:	00000206 	br	811053b4 <bSpwcGetLinkError+0x68>
		} else {
			pxSpwcCh->xLinkError.bDisconnect = FALSE;
811053ac:	e0bfff17 	ldw	r2,-4(fp)
811053b0:	10000415 	stw	zero,16(r2)
		}
		if (uliReg & COMM_STAT_LINK_PAR_ERR_MSK) {
811053b4:	e0bffe17 	ldw	r2,-8(fp)
811053b8:	1081000c 	andi	r2,r2,1024
811053bc:	10000426 	beq	r2,zero,811053d0 <bSpwcGetLinkError+0x84>
			pxSpwcCh->xLinkError.bParity = TRUE;
811053c0:	e0bfff17 	ldw	r2,-4(fp)
811053c4:	00c00044 	movi	r3,1
811053c8:	10c00515 	stw	r3,20(r2)
811053cc:	00000206 	br	811053d8 <bSpwcGetLinkError+0x8c>
		} else {
			pxSpwcCh->xLinkError.bParity = FALSE;
811053d0:	e0bfff17 	ldw	r2,-4(fp)
811053d4:	10000515 	stw	zero,20(r2)
		}
		if (uliReg & COMM_STAT_LINK_ESC_ERR_MSK) {
811053d8:	e0bffe17 	ldw	r2,-8(fp)
811053dc:	1080800c 	andi	r2,r2,512
811053e0:	10000426 	beq	r2,zero,811053f4 <bSpwcGetLinkError+0xa8>
			pxSpwcCh->xLinkError.bEscape = TRUE;
811053e4:	e0bfff17 	ldw	r2,-4(fp)
811053e8:	00c00044 	movi	r3,1
811053ec:	10c00615 	stw	r3,24(r2)
811053f0:	00000206 	br	811053fc <bSpwcGetLinkError+0xb0>
		} else {
			pxSpwcCh->xLinkError.bEscape = FALSE;
811053f4:	e0bfff17 	ldw	r2,-4(fp)
811053f8:	10000615 	stw	zero,24(r2)
		}
		if (uliReg & COMM_STAT_LINK_CRED_ERR_MSK) {
811053fc:	e0bffe17 	ldw	r2,-8(fp)
81105400:	1080400c 	andi	r2,r2,256
81105404:	10000426 	beq	r2,zero,81105418 <bSpwcGetLinkError+0xcc>
			pxSpwcCh->xLinkError.bCredit = TRUE;
81105408:	e0bfff17 	ldw	r2,-4(fp)
8110540c:	00c00044 	movi	r3,1
81105410:	10c00715 	stw	r3,28(r2)
81105414:	00000206 	br	81105420 <bSpwcGetLinkError+0xd4>
		} else {
			pxSpwcCh->xLinkError.bCredit = FALSE;
81105418:	e0bfff17 	ldw	r2,-4(fp)
8110541c:	10000715 	stw	zero,28(r2)
		}

		bStatus = TRUE;
81105420:	00800044 	movi	r2,1
81105424:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
81105428:	e0bffd17 	ldw	r2,-12(fp)
}
8110542c:	e037883a 	mov	sp,fp
81105430:	dfc00117 	ldw	ra,4(sp)
81105434:	df000017 	ldw	fp,0(sp)
81105438:	dec00204 	addi	sp,sp,8
8110543c:	f800283a 	ret

81105440 <bSpwcGetLinkStatus>:

bool bSpwcGetLinkStatus(TSpwcChannel *pxSpwcCh) {
81105440:	defffb04 	addi	sp,sp,-20
81105444:	de00012e 	bgeu	sp,et,8110544c <bSpwcGetLinkStatus+0xc>
81105448:	003b68fa 	trap	3
8110544c:	dfc00415 	stw	ra,16(sp)
81105450:	df000315 	stw	fp,12(sp)
81105454:	df000304 	addi	fp,sp,12
81105458:	e13fff15 	stw	r4,-4(fp)
	bool bStatus = FALSE;
8110545c:	e03ffd15 	stw	zero,-12(fp)
	alt_u32 uliReg = 0;
81105460:	e03ffe15 	stw	zero,-8(fp)

	if (pxSpwcCh != NULL) {
81105464:	e0bfff17 	ldw	r2,-4(fp)
81105468:	10002326 	beq	r2,zero,811054f8 <bSpwcGetLinkStatus+0xb8>
		uliReg = uliSpwcReadReg(pxSpwcCh->puliSpwcChAddr,
8110546c:	e0bfff17 	ldw	r2,-4(fp)
81105470:	10800017 	ldw	r2,0(r2)
81105474:	01400044 	movi	r5,1
81105478:	1009883a 	mov	r4,r2
8110547c:	11056dc0 	call	811056dc <uliSpwcReadReg>
81105480:	e0bffe15 	stw	r2,-8(fp)
		COMM_WINDOW_STAT_REG_OFFSET);

		if (uliReg & COMM_STAT_LINK_STARTED_MSK) {
81105484:	e0bffe17 	ldw	r2,-8(fp)
81105488:	1080010c 	andi	r2,r2,4
8110548c:	10000426 	beq	r2,zero,811054a0 <bSpwcGetLinkStatus+0x60>
			pxSpwcCh->xLinkStatus.bStarted = TRUE;
81105490:	e0bfff17 	ldw	r2,-4(fp)
81105494:	00c00044 	movi	r3,1
81105498:	10c00815 	stw	r3,32(r2)
8110549c:	00000206 	br	811054a8 <bSpwcGetLinkStatus+0x68>
		} else {
			pxSpwcCh->xLinkStatus.bStarted = FALSE;
811054a0:	e0bfff17 	ldw	r2,-4(fp)
811054a4:	10000815 	stw	zero,32(r2)
		}
		if (uliReg & COMM_STAT_LINK_CONNECTING_MSK) {
811054a8:	e0bffe17 	ldw	r2,-8(fp)
811054ac:	1080008c 	andi	r2,r2,2
811054b0:	10000426 	beq	r2,zero,811054c4 <bSpwcGetLinkStatus+0x84>
			pxSpwcCh->xLinkStatus.bConnecting = TRUE;
811054b4:	e0bfff17 	ldw	r2,-4(fp)
811054b8:	00c00044 	movi	r3,1
811054bc:	10c00915 	stw	r3,36(r2)
811054c0:	00000206 	br	811054cc <bSpwcGetLinkStatus+0x8c>
		} else {
			pxSpwcCh->xLinkStatus.bConnecting = FALSE;
811054c4:	e0bfff17 	ldw	r2,-4(fp)
811054c8:	10000915 	stw	zero,36(r2)
		}
		if (uliReg & COMM_STAT_LINK_RUNNING_MSK) {
811054cc:	e0bffe17 	ldw	r2,-8(fp)
811054d0:	1080004c 	andi	r2,r2,1
811054d4:	10000426 	beq	r2,zero,811054e8 <bSpwcGetLinkStatus+0xa8>
			pxSpwcCh->xLinkStatus.bRunning = TRUE;
811054d8:	e0bfff17 	ldw	r2,-4(fp)
811054dc:	00c00044 	movi	r3,1
811054e0:	10c00a15 	stw	r3,40(r2)
811054e4:	00000206 	br	811054f0 <bSpwcGetLinkStatus+0xb0>
		} else {
			pxSpwcCh->xLinkStatus.bRunning = FALSE;
811054e8:	e0bfff17 	ldw	r2,-4(fp)
811054ec:	10000a15 	stw	zero,40(r2)
		}

		bStatus = TRUE;
811054f0:	00800044 	movi	r2,1
811054f4:	e0bffd15 	stw	r2,-12(fp)
	}

	return bStatus;
811054f8:	e0bffd17 	ldw	r2,-12(fp)
}
811054fc:	e037883a 	mov	sp,fp
81105500:	dfc00117 	ldw	ra,4(sp)
81105504:	df000017 	ldw	fp,0(sp)
81105508:	dec00204 	addi	sp,sp,8
8110550c:	f800283a 	ret

81105510 <bSpwcInitCh>:

bool bSpwcInitCh(TSpwcChannel *pxSpwcCh, alt_u8 ucCommCh) {
81105510:	defffb04 	addi	sp,sp,-20
81105514:	de00012e 	bgeu	sp,et,8110551c <bSpwcInitCh+0xc>
81105518:	003b68fa 	trap	3
8110551c:	dfc00415 	stw	ra,16(sp)
81105520:	df000315 	stw	fp,12(sp)
81105524:	df000304 	addi	fp,sp,12
81105528:	e13ffe15 	stw	r4,-8(fp)
8110552c:	2805883a 	mov	r2,r5
81105530:	e0bfff05 	stb	r2,-4(fp)
	bool bStatus = FALSE;
81105534:	e03ffd15 	stw	zero,-12(fp)

	if (pxSpwcCh != NULL) {
81105538:	e0bffe17 	ldw	r2,-8(fp)
8110553c:	10004c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
		bStatus = TRUE;
81105540:	00800044 	movi	r2,1
81105544:	e0bffd15 	stw	r2,-12(fp)

		switch (ucCommCh) {
81105548:	e0bfff03 	ldbu	r2,-4(fp)
8110554c:	10c00268 	cmpgeui	r3,r2,9
81105550:	1800371e 	bne	r3,zero,81105630 <bSpwcInitCh+0x120>
81105554:	100690ba 	slli	r3,r2,2
81105558:	00a04434 	movhi	r2,33040
8110555c:	10955b04 	addi	r2,r2,21868
81105560:	1885883a 	add	r2,r3,r2
81105564:	10800017 	ldw	r2,0(r2)
81105568:	1000683a 	jmp	r2
8110556c:	81105630 	cmpltui	r4,r16,16728
81105570:	81105590 	cmplti	r4,r16,16726
81105574:	811055a4 	muli	r4,r16,16726
81105578:	811055b8 	rdprs	r4,r16,16726
8110557c:	811055cc 	andi	r4,r16,16727
81105580:	811055e0 	cmpeqi	r4,r16,16727
81105584:	811055f4 	orhi	r4,r16,16727
81105588:	81105608 	cmpgei	r4,r16,16728
8110558c:	8110561c 	xori	r4,r16,16728
		case eCommSpwCh1:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_1_BASE_ADDR;
81105590:	e0fffe17 	ldw	r3,-8(fp)
81105594:	00a04834 	movhi	r2,33056
81105598:	108b0004 	addi	r2,r2,11264
8110559c:	18800015 	stw	r2,0(r3)
			break;
811055a0:	00002506 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh2:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_2_BASE_ADDR;
811055a4:	e0fffe17 	ldw	r3,-8(fp)
811055a8:	00a04834 	movhi	r2,33056
811055ac:	108a0004 	addi	r2,r2,10240
811055b0:	18800015 	stw	r2,0(r3)
			break;
811055b4:	00002006 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh3:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_3_BASE_ADDR;
811055b8:	e0fffe17 	ldw	r3,-8(fp)
811055bc:	00a04834 	movhi	r2,33056
811055c0:	10890004 	addi	r2,r2,9216
811055c4:	18800015 	stw	r2,0(r3)
			break;
811055c8:	00001b06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh4:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_4_BASE_ADDR;
811055cc:	e0fffe17 	ldw	r3,-8(fp)
811055d0:	00a04834 	movhi	r2,33056
811055d4:	10880004 	addi	r2,r2,8192
811055d8:	18800015 	stw	r2,0(r3)
			break;
811055dc:	00001606 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh5:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_5_BASE_ADDR;
811055e0:	e0fffe17 	ldw	r3,-8(fp)
811055e4:	00a04834 	movhi	r2,33056
811055e8:	10870004 	addi	r2,r2,7168
811055ec:	18800015 	stw	r2,0(r3)
			break;
811055f0:	00001106 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh6:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_6_BASE_ADDR;
811055f4:	e0fffe17 	ldw	r3,-8(fp)
811055f8:	00a04834 	movhi	r2,33056
811055fc:	10860004 	addi	r2,r2,6144
81105600:	18800015 	stw	r2,0(r3)
			break;
81105604:	00000c06 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh7:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_7_BASE_ADDR;
81105608:	e0fffe17 	ldw	r3,-8(fp)
8110560c:	00a04834 	movhi	r2,33056
81105610:	10850004 	addi	r2,r2,5120
81105614:	18800015 	stw	r2,0(r3)
			break;
81105618:	00000706 	br	81105638 <bSpwcInitCh+0x128>
		case eCommSpwCh8:
			pxSpwcCh->puliSpwcChAddr = (alt_u32 *) COMM_CHANNEL_8_BASE_ADDR;
8110561c:	e0fffe17 	ldw	r3,-8(fp)
81105620:	00a04834 	movhi	r2,33056
81105624:	10840004 	addi	r2,r2,4096
81105628:	18800015 	stw	r2,0(r3)
			break;
8110562c:	00000206 	br	81105638 <bSpwcInitCh+0x128>
		default:
			bStatus = FALSE;
81105630:	e03ffd15 	stw	zero,-12(fp)
			break;
81105634:	0001883a 	nop
		}

		if (bStatus) {
81105638:	e0bffd17 	ldw	r2,-12(fp)
8110563c:	10000c26 	beq	r2,zero,81105670 <bSpwcInitCh+0x160>
//			if (!bFeebGetWindowing(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
			if (!bSpwcGetLink(pxSpwcCh)) {
81105640:	e13ffe17 	ldw	r4,-8(fp)
81105644:	110527c0 	call	8110527c <bSpwcGetLink>
81105648:	1000011e 	bne	r2,zero,81105650 <bSpwcInitCh+0x140>
				bStatus = FALSE;
8110564c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkError(pxSpwcCh)) {
81105650:	e13ffe17 	ldw	r4,-8(fp)
81105654:	110534c0 	call	8110534c <bSpwcGetLinkError>
81105658:	1000011e 	bne	r2,zero,81105660 <bSpwcInitCh+0x150>
				bStatus = FALSE;
8110565c:	e03ffd15 	stw	zero,-12(fp)
			}
			if (!bSpwcGetLinkStatus(pxSpwcCh)) {
81105660:	e13ffe17 	ldw	r4,-8(fp)
81105664:	11054400 	call	81105440 <bSpwcGetLinkStatus>
81105668:	1000011e 	bne	r2,zero,81105670 <bSpwcInitCh+0x160>
				bStatus = FALSE;
8110566c:	e03ffd15 	stw	zero,-12(fp)
//			if (!bFeebGetBuffersStatus(pxSpwcCh)) {
//				bStatus = FALSE;
//			}
		}
	}
	return bStatus;
81105670:	e0bffd17 	ldw	r2,-12(fp)
}
81105674:	e037883a 	mov	sp,fp
81105678:	dfc00117 	ldw	ra,4(sp)
8110567c:	df000017 	ldw	fp,0(sp)
81105680:	dec00204 	addi	sp,sp,8
81105684:	f800283a 	ret

81105688 <vSpwcWriteReg>:
//! [public functions]

//! [private functions]
static void vSpwcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81105688:	defffc04 	addi	sp,sp,-16
8110568c:	de00012e 	bgeu	sp,et,81105694 <vSpwcWriteReg+0xc>
81105690:	003b68fa 	trap	3
81105694:	df000315 	stw	fp,12(sp)
81105698:	df000304 	addi	fp,sp,12
8110569c:	e13ffd15 	stw	r4,-12(fp)
811056a0:	e17ffe15 	stw	r5,-8(fp)
811056a4:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
811056a8:	e0bffe17 	ldw	r2,-8(fp)
811056ac:	1085883a 	add	r2,r2,r2
811056b0:	1085883a 	add	r2,r2,r2
811056b4:	1007883a 	mov	r3,r2
811056b8:	e0bffd17 	ldw	r2,-12(fp)
811056bc:	10c5883a 	add	r2,r2,r3
811056c0:	e0ffff17 	ldw	r3,-4(fp)
811056c4:	10c00015 	stw	r3,0(r2)
}
811056c8:	0001883a 	nop
811056cc:	e037883a 	mov	sp,fp
811056d0:	df000017 	ldw	fp,0(sp)
811056d4:	dec00104 	addi	sp,sp,4
811056d8:	f800283a 	ret

811056dc <uliSpwcReadReg>:

static alt_u32 uliSpwcReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
811056dc:	defffc04 	addi	sp,sp,-16
811056e0:	de00012e 	bgeu	sp,et,811056e8 <uliSpwcReadReg+0xc>
811056e4:	003b68fa 	trap	3
811056e8:	df000315 	stw	fp,12(sp)
811056ec:	df000304 	addi	fp,sp,12
811056f0:	e13ffe15 	stw	r4,-8(fp)
811056f4:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
811056f8:	e0bfff17 	ldw	r2,-4(fp)
811056fc:	1085883a 	add	r2,r2,r2
81105700:	1085883a 	add	r2,r2,r2
81105704:	1007883a 	mov	r3,r2
81105708:	e0bffe17 	ldw	r2,-8(fp)
8110570c:	10c5883a 	add	r2,r2,r3
81105710:	10800017 	ldw	r2,0(r2)
81105714:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81105718:	e0bffd17 	ldw	r2,-12(fp)
}
8110571c:	e037883a 	mov	sp,fp
81105720:	df000017 	ldw	fp,0(sp)
81105724:	dec00104 	addi	sp,sp,4
81105728:	f800283a 	ret

8110572c <bEnableIsoDrivers>:
//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
bool bEnableIsoDrivers(void)
{
8110572c:	defffe04 	addi	sp,sp,-8
81105730:	de00012e 	bgeu	sp,et,81105738 <bEnableIsoDrivers+0xc>
81105734:	003b68fa 	trap	3
81105738:	dfc00115 	stw	ra,4(sp)
8110573c:	df000015 	stw	fp,0(sp)
81105740:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_EN_ISO_DRIVERS_MSK);
81105744:	01400204 	movi	r5,8
81105748:	01000044 	movi	r4,1
8110574c:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105750:	00800044 	movi	r2,1
}
81105754:	e037883a 	mov	sp,fp
81105758:	dfc00117 	ldw	ra,4(sp)
8110575c:	df000017 	ldw	fp,0(sp)
81105760:	dec00204 	addi	sp,sp,8
81105764:	f800283a 	ret

81105768 <bDisableIsoDrivers>:

bool bDisableIsoDrivers(void)
{
81105768:	defffe04 	addi	sp,sp,-8
8110576c:	de00012e 	bgeu	sp,et,81105774 <bDisableIsoDrivers+0xc>
81105770:	003b68fa 	trap	3
81105774:	dfc00115 	stw	ra,4(sp)
81105778:	df000015 	stw	fp,0(sp)
8110577c:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_EN_ISO_DRIVERS_MSK);
81105780:	01400204 	movi	r5,8
81105784:	0009883a 	mov	r4,zero
81105788:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
8110578c:	00800044 	movi	r2,1
}
81105790:	e037883a 	mov	sp,fp
81105794:	dfc00117 	ldw	ra,4(sp)
81105798:	df000017 	ldw	fp,0(sp)
8110579c:	dec00204 	addi	sp,sp,8
811057a0:	f800283a 	ret

811057a4 <bEnableLvdsBoard>:

bool bEnableLvdsBoard(void)
{
811057a4:	defffe04 	addi	sp,sp,-8
811057a8:	de00012e 	bgeu	sp,et,811057b0 <bEnableLvdsBoard+0xc>
811057ac:	003b68fa 	trap	3
811057b0:	dfc00115 	stw	ra,4(sp)
811057b4:	df000015 	stw	fp,0(sp)
811057b8:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PWDN_MSK);
811057bc:	01400104 	movi	r5,4
811057c0:	01000044 	movi	r4,1
811057c4:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
811057c8:	00800044 	movi	r2,1
}
811057cc:	e037883a 	mov	sp,fp
811057d0:	dfc00117 	ldw	ra,4(sp)
811057d4:	df000017 	ldw	fp,0(sp)
811057d8:	dec00204 	addi	sp,sp,8
811057dc:	f800283a 	ret

811057e0 <bDisableLvdsBoard>:

bool bDisableLvdsBoard(void)
{
811057e0:	defffe04 	addi	sp,sp,-8
811057e4:	de00012e 	bgeu	sp,et,811057ec <bDisableLvdsBoard+0xc>
811057e8:	003b68fa 	trap	3
811057ec:	dfc00115 	stw	ra,4(sp)
811057f0:	df000015 	stw	fp,0(sp)
811057f4:	d839883a 	mov	fp,sp
  bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PWDN_MSK);
811057f8:	01400104 	movi	r5,4
811057fc:	0009883a 	mov	r4,zero
81105800:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
  return  TRUE;
81105804:	00800044 	movi	r2,1
}
81105808:	e037883a 	mov	sp,fp
8110580c:	dfc00117 	ldw	ra,4(sp)
81105810:	df000017 	ldw	fp,0(sp)
81105814:	dec00204 	addi	sp,sp,8
81105818:	f800283a 	ret

8110581c <bSetPreEmphasys>:

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
8110581c:	defffd04 	addi	sp,sp,-12
81105820:	de00012e 	bgeu	sp,et,81105828 <bSetPreEmphasys+0xc>
81105824:	003b68fa 	trap	3
81105828:	dfc00215 	stw	ra,8(sp)
8110582c:	df000115 	stw	fp,4(sp)
81105830:	df000104 	addi	fp,sp,4
81105834:	2005883a 	mov	r2,r4
81105838:	e0bfff05 	stb	r2,-4(fp)
  switch (ucPemLevel) {
8110583c:	e0bfff03 	ldbu	r2,-4(fp)
81105840:	10c00060 	cmpeqi	r3,r2,1
81105844:	18000d1e 	bne	r3,zero,8110587c <bSetPreEmphasys+0x60>
81105848:	10c00088 	cmpgei	r3,r2,2
8110584c:	1800021e 	bne	r3,zero,81105858 <bSetPreEmphasys+0x3c>
81105850:	10000626 	beq	r2,zero,8110586c <bSetPreEmphasys+0x50>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105854:	00001b06 	br	811058c4 <bSetPreEmphasys+0xa8>
  return  TRUE;
}

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
81105858:	10c000a0 	cmpeqi	r3,r2,2
8110585c:	18000e1e 	bne	r3,zero,81105898 <bSetPreEmphasys+0x7c>
81105860:	108000e0 	cmpeqi	r2,r2,3
81105864:	1000131e 	bne	r2,zero,811058b4 <bSetPreEmphasys+0x98>
      break;
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
      break;
    default:
      break;
81105868:	00001606 	br	811058c4 <bSetPreEmphasys+0xa8>

bool bSetPreEmphasys(alt_u8 ucPemLevel)
{
  switch (ucPemLevel) {
    case LVDS_PEM_OFF:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
8110586c:	014000c4 	movi	r5,3
81105870:	0009883a 	mov	r4,zero
81105874:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105878:	00001206 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_LO:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM1_MSK);
8110587c:	01400084 	movi	r5,2
81105880:	0009883a 	mov	r4,zero
81105884:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM0_MSK);
81105888:	01400044 	movi	r5,1
8110588c:	01000044 	movi	r4,1
81105890:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
81105894:	00000b06 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_MID:
      bCtrlIoLvdsDrive(LVDS_IO_OFF, LVDS_PEM0_MSK);
81105898:	01400044 	movi	r5,1
8110589c:	0009883a 	mov	r4,zero
811058a0:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      bCtrlIoLvdsDrive(LVDS_IO_ON,  LVDS_PEM1_MSK);
811058a4:	01400084 	movi	r5,2
811058a8:	01000044 	movi	r4,1
811058ac:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058b0:	00000406 	br	811058c4 <bSetPreEmphasys+0xa8>
    case LVDS_PEM_HI:
      bCtrlIoLvdsDrive(LVDS_IO_ON, LVDS_PEM1_MSK | LVDS_PEM0_MSK);
811058b4:	014000c4 	movi	r5,3
811058b8:	01000044 	movi	r4,1
811058bc:	11058dc0 	call	811058dc <bCtrlIoLvdsDrive>
      break;
811058c0:	0001883a 	nop
    default:
      break;
  }
  return TRUE;
811058c4:	00800044 	movi	r2,1
}
811058c8:	e037883a 	mov	sp,fp
811058cc:	dfc00117 	ldw	ra,4(sp)
811058d0:	df000017 	ldw	fp,0(sp)
811058d4:	dec00204 	addi	sp,sp,8
811058d8:	f800283a 	ret

811058dc <bCtrlIoLvdsDrive>:
 * @param [in] ulliMask   -> mascara de i/o´s a serem alterados
 *
 * @retval TRUE -> sucesso
 */
static bool bCtrlIoLvdsDrive(bool bOnOff, alt_u8 ucMask)
{
811058dc:	defffd04 	addi	sp,sp,-12
811058e0:	de00012e 	bgeu	sp,et,811058e8 <bCtrlIoLvdsDrive+0xc>
811058e4:	003b68fa 	trap	3
811058e8:	df000215 	stw	fp,8(sp)
811058ec:	df000204 	addi	fp,sp,8
811058f0:	e13ffe15 	stw	r4,-8(fp)
811058f4:	2805883a 	mov	r2,r5
811058f8:	e0bfff05 	stb	r2,-4(fp)
  if (bOnOff == LVDS_IO_OFF) {
811058fc:	e0bffe17 	ldw	r2,-8(fp)
81105900:	1000071e 	bne	r2,zero,81105920 <bCtrlIoLvdsDrive+0x44>
	 ucIoValue &= (~ucMask);
81105904:	e0bfff03 	ldbu	r2,-4(fp)
81105908:	0084303a 	nor	r2,zero,r2
8110590c:	1007883a 	mov	r3,r2
81105910:	d0a00103 	ldbu	r2,-32764(gp)
81105914:	1884703a 	and	r2,r3,r2
81105918:	d0a00105 	stb	r2,-32764(gp)
8110591c:	00000406 	br	81105930 <bCtrlIoLvdsDrive+0x54>
  }
  else {
	 ucIoValue |= ucMask;
81105920:	d0e00103 	ldbu	r3,-32764(gp)
81105924:	e0bfff03 	ldbu	r2,-4(fp)
81105928:	1884b03a 	or	r2,r3,r2
8110592c:	d0a00105 	stb	r2,-32764(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LVDS_CTRL_IO_LVDS_ADDR_BASE, ucIoValue);
81105930:	d0a00103 	ldbu	r2,-32764(gp)
81105934:	10c03fcc 	andi	r3,r2,255
81105938:	00a00034 	movhi	r2,32768
8110593c:	10822804 	addi	r2,r2,2208
81105940:	10c00035 	stwio	r3,0(r2)
  return TRUE;
81105944:	00800044 	movi	r2,1
}
81105948:	e037883a 	mov	sp,fp
8110594c:	df000017 	ldw	fp,0(sp)
81105950:	dec00104 	addi	sp,sp,4
81105954:	f800283a 	ret

81105958 <I2C_TestAdress>:
void i2c_start(alt_u32 clk_base, alt_u32 data_base);
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool I2C_TestAdress(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr){
81105958:	defffa04 	addi	sp,sp,-24
8110595c:	de00012e 	bgeu	sp,et,81105964 <I2C_TestAdress+0xc>
81105960:	003b68fa 	trap	3
81105964:	dfc00515 	stw	ra,20(sp)
81105968:	df000415 	stw	fp,16(sp)
8110596c:	df000404 	addi	fp,sp,16
81105970:	e13ffd15 	stw	r4,-12(fp)
81105974:	e17ffe15 	stw	r5,-8(fp)
81105978:	3005883a 	mov	r2,r6
8110597c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105980:	00800044 	movi	r2,1
81105984:	e0bffc15 	stw	r2,-16(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105988:	e17ffe17 	ldw	r5,-8(fp)
8110598c:	e13ffd17 	ldw	r4,-12(fp)
81105990:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105994:	e0bfff03 	ldbu	r2,-4(fp)
81105998:	10803fcc 	andi	r2,r2,255
8110599c:	100d883a 	mov	r6,r2
811059a0:	e17ffe17 	ldw	r5,-8(fp)
811059a4:	e13ffd17 	ldw	r4,-12(fp)
811059a8:	1105e3c0 	call	81105e3c <i2c_write>
811059ac:	1000011e 	bne	r2,zero,811059b4 <I2C_TestAdress+0x5c>
        bSuccess = FALSE;
811059b0:	e03ffc15 	stw	zero,-16(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
811059b4:	e17ffe17 	ldw	r5,-8(fp)
811059b8:	e13ffd17 	ldw	r4,-12(fp)
811059bc:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
811059c0:	0106d604 	movi	r4,7000
811059c4:	11263140 	call	81126314 <usleep>
    
    return bSuccess;
811059c8:	e0bffc17 	ldw	r2,-16(fp)

}
811059cc:	e037883a 	mov	sp,fp
811059d0:	dfc00117 	ldw	ra,4(sp)
811059d4:	df000017 	ldw	fp,0(sp)
811059d8:	dec00204 	addi	sp,sp,8
811059dc:	f800283a 	ret

811059e0 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
811059e0:	defff804 	addi	sp,sp,-32
811059e4:	de00012e 	bgeu	sp,et,811059ec <I2C_Write+0xc>
811059e8:	003b68fa 	trap	3
811059ec:	dfc00715 	stw	ra,28(sp)
811059f0:	df000615 	stw	fp,24(sp)
811059f4:	df000604 	addi	fp,sp,24
811059f8:	e13ffb15 	stw	r4,-20(fp)
811059fc:	e17ffc15 	stw	r5,-16(fp)
81105a00:	3009883a 	mov	r4,r6
81105a04:	3807883a 	mov	r3,r7
81105a08:	e0800217 	ldw	r2,8(fp)
81105a0c:	e13ffd05 	stb	r4,-12(fp)
81105a10:	e0fffe05 	stb	r3,-8(fp)
81105a14:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105a18:	00800044 	movi	r2,1
81105a1c:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105a20:	e17ffc17 	ldw	r5,-16(fp)
81105a24:	e13ffb17 	ldw	r4,-20(fp)
81105a28:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105a2c:	e0bffd03 	ldbu	r2,-12(fp)
81105a30:	10803fcc 	andi	r2,r2,255
81105a34:	100d883a 	mov	r6,r2
81105a38:	e17ffc17 	ldw	r5,-16(fp)
81105a3c:	e13ffb17 	ldw	r4,-20(fp)
81105a40:	1105e3c0 	call	81105e3c <i2c_write>
81105a44:	1000011e 	bne	r2,zero,81105a4c <I2C_Write+0x6c>
        bSuccess = FALSE;
81105a48:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105a4c:	e0bffa17 	ldw	r2,-24(fp)
81105a50:	10000726 	beq	r2,zero,81105a70 <I2C_Write+0x90>
81105a54:	e0bffe03 	ldbu	r2,-8(fp)
81105a58:	100d883a 	mov	r6,r2
81105a5c:	e17ffc17 	ldw	r5,-16(fp)
81105a60:	e13ffb17 	ldw	r4,-20(fp)
81105a64:	1105e3c0 	call	81105e3c <i2c_write>
81105a68:	1000011e 	bne	r2,zero,81105a70 <I2C_Write+0x90>
        bSuccess = FALSE;
81105a6c:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
81105a70:	e0bffa17 	ldw	r2,-24(fp)
81105a74:	10000726 	beq	r2,zero,81105a94 <I2C_Write+0xb4>
81105a78:	e0bfff03 	ldbu	r2,-4(fp)
81105a7c:	100d883a 	mov	r6,r2
81105a80:	e17ffc17 	ldw	r5,-16(fp)
81105a84:	e13ffb17 	ldw	r4,-20(fp)
81105a88:	1105e3c0 	call	81105e3c <i2c_write>
81105a8c:	1000011e 	bne	r2,zero,81105a94 <I2C_Write+0xb4>
        bSuccess = FALSE;
81105a90:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
81105a94:	e17ffc17 	ldw	r5,-16(fp)
81105a98:	e13ffb17 	ldw	r4,-20(fp)
81105a9c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
81105aa0:	0106d604 	movi	r4,7000
81105aa4:	11263140 	call	81126314 <usleep>
    
    return bSuccess;
81105aa8:	e0bffa17 	ldw	r2,-24(fp)

}
81105aac:	e037883a 	mov	sp,fp
81105ab0:	dfc00117 	ldw	ra,4(sp)
81105ab4:	df000017 	ldw	fp,0(sp)
81105ab8:	dec00204 	addi	sp,sp,8
81105abc:	f800283a 	ret

81105ac0 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
81105ac0:	defff904 	addi	sp,sp,-28
81105ac4:	de00012e 	bgeu	sp,et,81105acc <I2C_Read+0xc>
81105ac8:	003b68fa 	trap	3
81105acc:	dfc00615 	stw	ra,24(sp)
81105ad0:	df000515 	stw	fp,20(sp)
81105ad4:	df000504 	addi	fp,sp,20
81105ad8:	e13ffc15 	stw	r4,-16(fp)
81105adc:	e17ffd15 	stw	r5,-12(fp)
81105ae0:	3007883a 	mov	r3,r6
81105ae4:	3805883a 	mov	r2,r7
81105ae8:	e0fffe05 	stb	r3,-8(fp)
81105aec:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
81105af0:	00800044 	movi	r2,1
81105af4:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105af8:	e17ffd17 	ldw	r5,-12(fp)
81105afc:	e13ffc17 	ldw	r4,-16(fp)
81105b00:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105b04:	e0bffe03 	ldbu	r2,-8(fp)
81105b08:	10803fcc 	andi	r2,r2,255
81105b0c:	100d883a 	mov	r6,r2
81105b10:	e17ffd17 	ldw	r5,-12(fp)
81105b14:	e13ffc17 	ldw	r4,-16(fp)
81105b18:	1105e3c0 	call	81105e3c <i2c_write>
81105b1c:	1000011e 	bne	r2,zero,81105b24 <I2C_Read+0x64>
        bSuccess = FALSE;
81105b20:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105b24:	e0bffb17 	ldw	r2,-20(fp)
81105b28:	10000726 	beq	r2,zero,81105b48 <I2C_Read+0x88>
81105b2c:	e0bfff03 	ldbu	r2,-4(fp)
81105b30:	100d883a 	mov	r6,r2
81105b34:	e17ffd17 	ldw	r5,-12(fp)
81105b38:	e13ffc17 	ldw	r4,-16(fp)
81105b3c:	1105e3c0 	call	81105e3c <i2c_write>
81105b40:	1000011e 	bne	r2,zero,81105b48 <I2C_Read+0x88>
        bSuccess = FALSE;
81105b44:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
81105b48:	e17ffd17 	ldw	r5,-12(fp)
81105b4c:	e13ffc17 	ldw	r4,-16(fp)
81105b50:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105b54:	e0bffe03 	ldbu	r2,-8(fp)
81105b58:	10800054 	ori	r2,r2,1
81105b5c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105b60:	e0bffb17 	ldw	r2,-20(fp)
81105b64:	10000826 	beq	r2,zero,81105b88 <I2C_Read+0xc8>
81105b68:	e0bffe03 	ldbu	r2,-8(fp)
81105b6c:	10803fcc 	andi	r2,r2,255
81105b70:	100d883a 	mov	r6,r2
81105b74:	e17ffd17 	ldw	r5,-12(fp)
81105b78:	e13ffc17 	ldw	r4,-16(fp)
81105b7c:	1105e3c0 	call	81105e3c <i2c_write>
81105b80:	1000011e 	bne	r2,zero,81105b88 <I2C_Read+0xc8>
        bSuccess = FALSE;
81105b84:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105b88:	e0bffb17 	ldw	r2,-20(fp)
81105b8c:	10000526 	beq	r2,zero,81105ba4 <I2C_Read+0xe4>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
81105b90:	000f883a 	mov	r7,zero
81105b94:	e1800217 	ldw	r6,8(fp)
81105b98:	e17ffd17 	ldw	r5,-12(fp)
81105b9c:	e13ffc17 	ldw	r4,-16(fp)
81105ba0:	1105f740 	call	81105f74 <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
81105ba4:	e17ffd17 	ldw	r5,-12(fp)
81105ba8:	e13ffc17 	ldw	r4,-16(fp)
81105bac:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;
81105bb0:	e0bffb17 	ldw	r2,-20(fp)
}
81105bb4:	e037883a 	mov	sp,fp
81105bb8:	dfc00117 	ldw	ra,4(sp)
81105bbc:	df000017 	ldw	fp,0(sp)
81105bc0:	dec00204 	addi	sp,sp,8
81105bc4:	f800283a 	ret

81105bc8 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 szData[], alt_u16 len){
81105bc8:	defff604 	addi	sp,sp,-40
81105bcc:	de00012e 	bgeu	sp,et,81105bd4 <I2C_MultipleRead+0xc>
81105bd0:	003b68fa 	trap	3
81105bd4:	dfc00915 	stw	ra,36(sp)
81105bd8:	df000815 	stw	fp,32(sp)
81105bdc:	df000804 	addi	fp,sp,32
81105be0:	e13ffb15 	stw	r4,-20(fp)
81105be4:	e17ffc15 	stw	r5,-16(fp)
81105be8:	3007883a 	mov	r3,r6
81105bec:	e1fffe15 	stw	r7,-8(fp)
81105bf0:	e0800217 	ldw	r2,8(fp)
81105bf4:	e0fffd05 	stb	r3,-12(fp)
81105bf8:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
81105bfc:	00800044 	movi	r2,1
81105c00:	e0bff915 	stw	r2,-28(fp)
    //alt_u8 DeviceAddr, 
    alt_u8 ControlAddr = 0;
81105c04:	e03ffa05 	stb	zero,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
81105c08:	e17ffc17 	ldw	r5,-16(fp)
81105c0c:	e13ffb17 	ldw	r4,-20(fp)
81105c10:	1105d280 	call	81105d28 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
81105c14:	e0bffd03 	ldbu	r2,-12(fp)
81105c18:	10803fcc 	andi	r2,r2,255
81105c1c:	100d883a 	mov	r6,r2
81105c20:	e17ffc17 	ldw	r5,-16(fp)
81105c24:	e13ffb17 	ldw	r4,-20(fp)
81105c28:	1105e3c0 	call	81105e3c <i2c_write>
81105c2c:	1000011e 	bne	r2,zero,81105c34 <I2C_MultipleRead+0x6c>
        bSuccess = FALSE;
81105c30:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
81105c34:	e0bff917 	ldw	r2,-28(fp)
81105c38:	10000726 	beq	r2,zero,81105c58 <I2C_MultipleRead+0x90>
81105c3c:	e0bffa03 	ldbu	r2,-24(fp)
81105c40:	100d883a 	mov	r6,r2
81105c44:	e17ffc17 	ldw	r5,-16(fp)
81105c48:	e13ffb17 	ldw	r4,-20(fp)
81105c4c:	1105e3c0 	call	81105e3c <i2c_write>
81105c50:	1000011e 	bne	r2,zero,81105c58 <I2C_MultipleRead+0x90>
        bSuccess = FALSE;
81105c54:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }    
    if (bSuccess)        
81105c58:	e0bff917 	ldw	r2,-28(fp)
81105c5c:	10000326 	beq	r2,zero,81105c6c <I2C_MultipleRead+0xa4>
        i2c_start(clk_base, data_base);  // restart
81105c60:	e17ffc17 	ldw	r5,-16(fp)
81105c64:	e13ffb17 	ldw	r4,-20(fp)
81105c68:	1105d280 	call	81105d28 <i2c_start>
    DeviceAddr |= 1; // Read
81105c6c:	e0bffd03 	ldbu	r2,-12(fp)
81105c70:	10800054 	ori	r2,r2,1
81105c74:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
81105c78:	e0bff917 	ldw	r2,-28(fp)
81105c7c:	10000826 	beq	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
81105c80:	e0bffd03 	ldbu	r2,-12(fp)
81105c84:	10803fcc 	andi	r2,r2,255
81105c88:	100d883a 	mov	r6,r2
81105c8c:	e17ffc17 	ldw	r5,-16(fp)
81105c90:	e13ffb17 	ldw	r4,-20(fp)
81105c94:	1105e3c0 	call	81105e3c <i2c_write>
81105c98:	1000011e 	bne	r2,zero,81105ca0 <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
81105c9c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
81105ca0:	e0bff917 	ldw	r2,-28(fp)
81105ca4:	10001726 	beq	r2,zero,81105d04 <I2C_MultipleRead+0x13c>
        for(i=0;i<len && bSuccess;i++){
81105ca8:	e03ff815 	stw	zero,-32(fp)
81105cac:	00001006 	br	81105cf0 <I2C_MultipleRead+0x128>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
81105cb0:	e0bff817 	ldw	r2,-32(fp)
81105cb4:	e0fffe17 	ldw	r3,-8(fp)
81105cb8:	1889883a 	add	r4,r3,r2
81105cbc:	e0bfff0b 	ldhu	r2,-4(fp)
81105cc0:	10ffffc4 	addi	r3,r2,-1
81105cc4:	e0bff817 	ldw	r2,-32(fp)
81105cc8:	1884c03a 	cmpne	r2,r3,r2
81105ccc:	10803fcc 	andi	r2,r2,255
81105cd0:	100f883a 	mov	r7,r2
81105cd4:	200d883a 	mov	r6,r4
81105cd8:	e17ffc17 	ldw	r5,-16(fp)
81105cdc:	e13ffb17 	ldw	r4,-20(fp)
81105ce0:	1105f740 	call	81105f74 <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
81105ce4:	e0bff817 	ldw	r2,-32(fp)
81105ce8:	10800044 	addi	r2,r2,1
81105cec:	e0bff815 	stw	r2,-32(fp)
81105cf0:	e0bfff0b 	ldhu	r2,-4(fp)
81105cf4:	e0fff817 	ldw	r3,-32(fp)
81105cf8:	1880020e 	bge	r3,r2,81105d04 <I2C_MultipleRead+0x13c>
81105cfc:	e0bff917 	ldw	r2,-28(fp)
81105d00:	103feb1e 	bne	r2,zero,81105cb0 <__reset+0xfb0e5cb0>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
81105d04:	e17ffc17 	ldw	r5,-16(fp)
81105d08:	e13ffb17 	ldw	r4,-20(fp)
81105d0c:	1105dbc0 	call	81105dbc <i2c_stop>
    
    return bSuccess;    
81105d10:	e0bff917 	ldw	r2,-28(fp)
    
}
81105d14:	e037883a 	mov	sp,fp
81105d18:	dfc00117 	ldw	ra,4(sp)
81105d1c:	df000017 	ldw	fp,0(sp)
81105d20:	dec00204 	addi	sp,sp,8
81105d24:	f800283a 	ret

81105d28 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
81105d28:	defffc04 	addi	sp,sp,-16
81105d2c:	de00012e 	bgeu	sp,et,81105d34 <i2c_start+0xc>
81105d30:	003b68fa 	trap	3
81105d34:	dfc00315 	stw	ra,12(sp)
81105d38:	df000215 	stw	fp,8(sp)
81105d3c:	df000204 	addi	fp,sp,8
81105d40:	e13ffe15 	stw	r4,-8(fp)
81105d44:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
81105d48:	e0bfff17 	ldw	r2,-4(fp)
81105d4c:	10800104 	addi	r2,r2,4
81105d50:	1007883a 	mov	r3,r2
81105d54:	00800044 	movi	r2,1
81105d58:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
81105d5c:	e0bfff17 	ldw	r2,-4(fp)
81105d60:	00c00044 	movi	r3,1
81105d64:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
81105d68:	e0bffe17 	ldw	r2,-8(fp)
81105d6c:	00c00044 	movi	r3,1
81105d70:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d74:	01000044 	movi	r4,1
81105d78:	11263140 	call	81126314 <usleep>
     
    SDA_LOW(data_base); // data low
81105d7c:	e0bfff17 	ldw	r2,-4(fp)
81105d80:	0007883a 	mov	r3,zero
81105d84:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
81105d88:	01000044 	movi	r4,1
81105d8c:	11263140 	call	81126314 <usleep>
    SCL_LOW(clk_base); // clock low
81105d90:	e0bffe17 	ldw	r2,-8(fp)
81105d94:	0007883a 	mov	r3,zero
81105d98:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
81105d9c:	01000044 	movi	r4,1
81105da0:	11263140 	call	81126314 <usleep>
}
81105da4:	0001883a 	nop
81105da8:	e037883a 	mov	sp,fp
81105dac:	dfc00117 	ldw	ra,4(sp)
81105db0:	df000017 	ldw	fp,0(sp)
81105db4:	dec00204 	addi	sp,sp,8
81105db8:	f800283a 	ret

81105dbc <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
81105dbc:	defffc04 	addi	sp,sp,-16
81105dc0:	de00012e 	bgeu	sp,et,81105dc8 <i2c_stop+0xc>
81105dc4:	003b68fa 	trap	3
81105dc8:	dfc00315 	stw	ra,12(sp)
81105dcc:	df000215 	stw	fp,8(sp)
81105dd0:	df000204 	addi	fp,sp,8
81105dd4:	e13ffe15 	stw	r4,-8(fp)
81105dd8:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
81105ddc:	e0bfff17 	ldw	r2,-4(fp)
81105de0:	10800104 	addi	r2,r2,4
81105de4:	1007883a 	mov	r3,r2
81105de8:	00800044 	movi	r2,1
81105dec:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
81105df0:	e0bfff17 	ldw	r2,-4(fp)
81105df4:	0007883a 	mov	r3,zero
81105df8:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
81105dfc:	e0bffe17 	ldw	r2,-8(fp)
81105e00:	00c00044 	movi	r3,1
81105e04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
81105e08:	01000044 	movi	r4,1
81105e0c:	11263140 	call	81126314 <usleep>
    SDA_HIGH(data_base); // data high
81105e10:	e0bfff17 	ldw	r2,-4(fp)
81105e14:	00c00044 	movi	r3,1
81105e18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
81105e1c:	01000044 	movi	r4,1
81105e20:	11263140 	call	81126314 <usleep>
    

    
}
81105e24:	0001883a 	nop
81105e28:	e037883a 	mov	sp,fp
81105e2c:	dfc00117 	ldw	ra,4(sp)
81105e30:	df000017 	ldw	fp,0(sp)
81105e34:	dec00204 	addi	sp,sp,8
81105e38:	f800283a 	ret

81105e3c <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
81105e3c:	defff804 	addi	sp,sp,-32
81105e40:	de00012e 	bgeu	sp,et,81105e48 <i2c_write+0xc>
81105e44:	003b68fa 	trap	3
81105e48:	dfc00715 	stw	ra,28(sp)
81105e4c:	df000615 	stw	fp,24(sp)
81105e50:	df000604 	addi	fp,sp,24
81105e54:	e13ffd15 	stw	r4,-12(fp)
81105e58:	e17ffe15 	stw	r5,-8(fp)
81105e5c:	3005883a 	mov	r2,r6
81105e60:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
81105e64:	00bfe004 	movi	r2,-128
81105e68:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
81105e6c:	e0bffe17 	ldw	r2,-8(fp)
81105e70:	10800104 	addi	r2,r2,4
81105e74:	1007883a 	mov	r3,r2
81105e78:	00800044 	movi	r2,1
81105e7c:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
81105e80:	e03ffb15 	stw	zero,-20(fp)
81105e84:	00001f06 	br	81105f04 <i2c_write+0xc8>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
81105e88:	e0bffd17 	ldw	r2,-12(fp)
81105e8c:	0007883a 	mov	r3,zero
81105e90:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
81105e94:	e0ffff03 	ldbu	r3,-4(fp)
81105e98:	e0bffa03 	ldbu	r2,-24(fp)
81105e9c:	1884703a 	and	r2,r3,r2
81105ea0:	10803fcc 	andi	r2,r2,255
81105ea4:	10000426 	beq	r2,zero,81105eb8 <i2c_write+0x7c>
            SDA_HIGH(data_base);
81105ea8:	e0bffe17 	ldw	r2,-8(fp)
81105eac:	00c00044 	movi	r3,1
81105eb0:	10c00035 	stwio	r3,0(r2)
81105eb4:	00000306 	br	81105ec4 <i2c_write+0x88>
        }else{    
            SDA_LOW(data_base);
81105eb8:	e0bffe17 	ldw	r2,-8(fp)
81105ebc:	0007883a 	mov	r3,zero
81105ec0:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
81105ec4:	e0bffa03 	ldbu	r2,-24(fp)
81105ec8:	1004d07a 	srli	r2,r2,1
81105ecc:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
81105ed0:	e0bffd17 	ldw	r2,-12(fp)
81105ed4:	00c00044 	movi	r3,1
81105ed8:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105edc:	01000044 	movi	r4,1
81105ee0:	11263140 	call	81126314 <usleep>
        SCL_LOW(clk_base);
81105ee4:	e0bffd17 	ldw	r2,-12(fp)
81105ee8:	0007883a 	mov	r3,zero
81105eec:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105ef0:	01000044 	movi	r4,1
81105ef4:	11263140 	call	81126314 <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
81105ef8:	e0bffb17 	ldw	r2,-20(fp)
81105efc:	10800044 	addi	r2,r2,1
81105f00:	e0bffb15 	stw	r2,-20(fp)
81105f04:	e0bffb17 	ldw	r2,-20(fp)
81105f08:	10800210 	cmplti	r2,r2,8
81105f0c:	103fde1e 	bne	r2,zero,81105e88 <__reset+0xfb0e5e88>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
81105f10:	e0bffe17 	ldw	r2,-8(fp)
81105f14:	10800104 	addi	r2,r2,4
81105f18:	0007883a 	mov	r3,zero
81105f1c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
81105f20:	e0bffd17 	ldw	r2,-12(fp)
81105f24:	00c00044 	movi	r3,1
81105f28:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
81105f2c:	01000044 	movi	r4,1
81105f30:	11263140 	call	81126314 <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
81105f34:	e0bffe17 	ldw	r2,-8(fp)
81105f38:	10800037 	ldwio	r2,0(r2)
81105f3c:	1005003a 	cmpeq	r2,r2,zero
81105f40:	10803fcc 	andi	r2,r2,255
81105f44:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
81105f48:	e0bffd17 	ldw	r2,-12(fp)
81105f4c:	0007883a 	mov	r3,zero
81105f50:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105f54:	01000044 	movi	r4,1
81105f58:	11263140 	call	81126314 <usleep>
    return bAck;
81105f5c:	e0bffc17 	ldw	r2,-16(fp)
}    
81105f60:	e037883a 	mov	sp,fp
81105f64:	dfc00117 	ldw	ra,4(sp)
81105f68:	df000017 	ldw	fp,0(sp)
81105f6c:	dec00204 	addi	sp,sp,8
81105f70:	f800283a 	ret

81105f74 <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
81105f74:	defff804 	addi	sp,sp,-32
81105f78:	de00012e 	bgeu	sp,et,81105f80 <i2c_read+0xc>
81105f7c:	003b68fa 	trap	3
81105f80:	dfc00715 	stw	ra,28(sp)
81105f84:	df000615 	stw	fp,24(sp)
81105f88:	df000604 	addi	fp,sp,24
81105f8c:	e13ffc15 	stw	r4,-16(fp)
81105f90:	e17ffd15 	stw	r5,-12(fp)
81105f94:	e1bffe15 	stw	r6,-8(fp)
81105f98:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
81105f9c:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
81105fa0:	e0bffd17 	ldw	r2,-12(fp)
81105fa4:	10800104 	addi	r2,r2,4
81105fa8:	0007883a 	mov	r3,zero
81105fac:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
81105fb0:	e0bffc17 	ldw	r2,-16(fp)
81105fb4:	0007883a 	mov	r3,zero
81105fb8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81105fbc:	01000044 	movi	r4,1
81105fc0:	11263140 	call	81126314 <usleep>

    for(i=0;i<8;i++){
81105fc4:	e03ffb15 	stw	zero,-20(fp)
81105fc8:	00001606 	br	81106024 <i2c_read+0xb0>
        Data <<= 1;
81105fcc:	e0bffa03 	ldbu	r2,-24(fp)
81105fd0:	1085883a 	add	r2,r2,r2
81105fd4:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
81105fd8:	e0bffc17 	ldw	r2,-16(fp)
81105fdc:	00c00044 	movi	r3,1
81105fe0:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81105fe4:	01000044 	movi	r4,1
81105fe8:	11263140 	call	81126314 <usleep>
        if (SDA_READ(data_base))  // read data   
81105fec:	e0bffd17 	ldw	r2,-12(fp)
81105ff0:	10800037 	ldwio	r2,0(r2)
81105ff4:	10000326 	beq	r2,zero,81106004 <i2c_read+0x90>
            Data |= 0x01;
81105ff8:	e0bffa03 	ldbu	r2,-24(fp)
81105ffc:	10800054 	ori	r2,r2,1
81106000:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
81106004:	e0bffc17 	ldw	r2,-16(fp)
81106008:	0007883a 	mov	r3,zero
8110600c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
81106010:	01000044 	movi	r4,1
81106014:	11263140 	call	81126314 <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
81106018:	e0bffb17 	ldw	r2,-20(fp)
8110601c:	10800044 	addi	r2,r2,1
81106020:	e0bffb15 	stw	r2,-20(fp)
81106024:	e0bffb17 	ldw	r2,-20(fp)
81106028:	10800210 	cmplti	r2,r2,8
8110602c:	103fe71e 	bne	r2,zero,81105fcc <__reset+0xfb0e5fcc>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
81106030:	e0bffc17 	ldw	r2,-16(fp)
81106034:	0007883a 	mov	r3,zero
81106038:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
8110603c:	e0bffd17 	ldw	r2,-12(fp)
81106040:	10800104 	addi	r2,r2,4
81106044:	1007883a 	mov	r3,r2
81106048:	00800044 	movi	r2,1
8110604c:	18800035 	stwio	r2,0(r3)
    if (bAck)
81106050:	e0bfff17 	ldw	r2,-4(fp)
81106054:	10000426 	beq	r2,zero,81106068 <i2c_read+0xf4>
        SDA_LOW(data_base);
81106058:	e0bffd17 	ldw	r2,-12(fp)
8110605c:	0007883a 	mov	r3,zero
81106060:	10c00035 	stwio	r3,0(r2)
81106064:	00000306 	br	81106074 <i2c_read+0x100>
    else
        SDA_HIGH(data_base);
81106068:	e0bffd17 	ldw	r2,-12(fp)
8110606c:	00c00044 	movi	r3,1
81106070:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
81106074:	e0bffc17 	ldw	r2,-16(fp)
81106078:	00c00044 	movi	r3,1
8110607c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
81106080:	01000044 	movi	r4,1
81106084:	11263140 	call	81126314 <usleep>
    SCL_LOW(clk_base); // clock low
81106088:	e0bffc17 	ldw	r2,-16(fp)
8110608c:	0007883a 	mov	r3,zero
81106090:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
81106094:	01000044 	movi	r4,1
81106098:	11263140 	call	81126314 <usleep>
    SDA_LOW(data_base);  // data low
8110609c:	e0bffd17 	ldw	r2,-12(fp)
811060a0:	0007883a 	mov	r3,zero
811060a4:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
811060a8:	01000044 	movi	r4,1
811060ac:	11263140 	call	81126314 <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
811060b0:	e0bffe17 	ldw	r2,-8(fp)
811060b4:	e0fffa03 	ldbu	r3,-24(fp)
811060b8:	10c00005 	stb	r3,0(r2)
}
811060bc:	0001883a 	nop
811060c0:	e037883a 	mov	sp,fp
811060c4:	dfc00117 	ldw	ra,4(sp)
811060c8:	df000017 	ldw	fp,0(sp)
811060cc:	dec00204 	addi	sp,sp,8
811060d0:	f800283a 	ret

811060d4 <bSetBoardLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetBoardLeds(bool bDRIVE, alt_u8 LedsMask){
811060d4:	defffd04 	addi	sp,sp,-12
811060d8:	de00012e 	bgeu	sp,et,811060e0 <bSetBoardLeds+0xc>
811060dc:	003b68fa 	trap	3
811060e0:	df000215 	stw	fp,8(sp)
811060e4:	df000204 	addi	fp,sp,8
811060e8:	e13ffe15 	stw	r4,-8(fp)
811060ec:	2805883a 	mov	r2,r5
811060f0:	e0bfff05 	stb	r2,-4(fp)

  // Board LEDs state: ON = 0; OFF = 1;

  if (bDRIVE == LEDS_ON){
811060f4:	e0bffe17 	ldw	r2,-8(fp)
811060f8:	10800058 	cmpnei	r2,r2,1
811060fc:	1000071e 	bne	r2,zero,8110611c <bSetBoardLeds+0x48>
	LedsBoardControl &= (~LedsMask);
81106100:	e0bfff03 	ldbu	r2,-4(fp)
81106104:	0084303a 	nor	r2,zero,r2
81106108:	1007883a 	mov	r3,r2
8110610c:	d0a04503 	ldbu	r2,-32492(gp)
81106110:	1884703a 	and	r2,r3,r2
81106114:	d0a04505 	stb	r2,-32492(gp)
81106118:	00000406 	br	8110612c <bSetBoardLeds+0x58>
  } else {
	LedsBoardControl |= LedsMask;
8110611c:	d0e04503 	ldbu	r3,-32492(gp)
81106120:	e0bfff03 	ldbu	r2,-4(fp)
81106124:	1884b03a 	or	r2,r3,r2
81106128:	d0a04505 	stb	r2,-32492(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BOARD_BASE, LedsBoardControl);
8110612c:	d0a04503 	ldbu	r2,-32492(gp)
81106130:	10c03fcc 	andi	r3,r2,255
81106134:	00a00034 	movhi	r2,32768
81106138:	10827404 	addi	r2,r2,2512
8110613c:	10c00035 	stwio	r3,0(r2)

  return TRUE;
81106140:	00800044 	movi	r2,1
}
81106144:	e037883a 	mov	sp,fp
81106148:	df000017 	ldw	fp,0(sp)
8110614c:	dec00104 	addi	sp,sp,4
81106150:	f800283a 	ret

81106154 <bSetPainelLeds>:
 * @param [in] LedsMask  Mascara de leds a serem modificados
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSetPainelLeds(bool bDRIVE, alt_u32 LedsMask){
81106154:	defffd04 	addi	sp,sp,-12
81106158:	de00012e 	bgeu	sp,et,81106160 <bSetPainelLeds+0xc>
8110615c:	003b68fa 	trap	3
81106160:	df000215 	stw	fp,8(sp)
81106164:	df000204 	addi	fp,sp,8
81106168:	e13ffe15 	stw	r4,-8(fp)
8110616c:	e17fff15 	stw	r5,-4(fp)

  // Painel LEDs state: ON = 1; OFF = 0;

  if (bDRIVE == LEDS_ON){
81106170:	e0bffe17 	ldw	r2,-8(fp)
81106174:	10800058 	cmpnei	r2,r2,1
81106178:	1000051e 	bne	r2,zero,81106190 <bSetPainelLeds+0x3c>
	LedsPainelControl |= LedsMask;
8110617c:	d0e00217 	ldw	r3,-32760(gp)
81106180:	e0bfff17 	ldw	r2,-4(fp)
81106184:	1884b03a 	or	r2,r3,r2
81106188:	d0a00215 	stw	r2,-32760(gp)
8110618c:	00000506 	br	811061a4 <bSetPainelLeds+0x50>
  } else {
	LedsPainelControl &= (~LedsMask);
81106190:	e0bfff17 	ldw	r2,-4(fp)
81106194:	0086303a 	nor	r3,zero,r2
81106198:	d0a00217 	ldw	r2,-32760(gp)
8110619c:	1884703a 	and	r2,r3,r2
811061a0:	d0a00215 	stw	r2,-32760(gp)
  }
  IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PAINEL_BASE, LedsPainelControl);
811061a4:	d0a00217 	ldw	r2,-32760(gp)
811061a8:	1007883a 	mov	r3,r2
811061ac:	00a00034 	movhi	r2,32768
811061b0:	10824004 	addi	r2,r2,2304
811061b4:	10c00035 	stwio	r3,0(r2)

  return TRUE;
811061b8:	00800044 	movi	r2,1
}
811061bc:	e037883a 	mov	sp,fp
811061c0:	df000017 	ldw	fp,0(sp)
811061c4:	dec00104 	addi	sp,sp,4
811061c8:	f800283a 	ret

811061cc <msgdma_write_extended_descriptor>:
/*
 * This function is used for writing extended descriptors to the dispatcher.  
 It handles only 32-bit descriptors.
 */
static int msgdma_write_extended_descriptor(alt_u32 *csr_base,
		alt_u32 *descriptor_base, alt_msgdma_extended_descriptor *descriptor) {
811061cc:	defffc04 	addi	sp,sp,-16
811061d0:	de00012e 	bgeu	sp,et,811061d8 <msgdma_write_extended_descriptor+0xc>
811061d4:	003b68fa 	trap	3
811061d8:	df000315 	stw	fp,12(sp)
811061dc:	df000304 	addi	fp,sp,12
811061e0:	e13ffd15 	stw	r4,-12(fp)
811061e4:	e17ffe15 	stw	r5,-8(fp)
811061e8:	e1bfff15 	stw	r6,-4(fp)
	if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) &
811061ec:	e0bffd17 	ldw	r2,-12(fp)
811061f0:	10800037 	ldwio	r2,0(r2)
811061f4:	1080010c 	andi	r2,r2,4
811061f8:	10000226 	beq	r2,zero,81106204 <msgdma_write_extended_descriptor+0x38>
	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK)) {
		/*at least one descriptor buffer is full, returning so that this function
		 is non-blocking*/
		return -ENOSPC;
811061fc:	00bff904 	movi	r2,-28
81106200:	00003d06 	br	811062f8 <msgdma_write_extended_descriptor+0x12c>
	}

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base,
81106204:	e0bfff17 	ldw	r2,-4(fp)
81106208:	10800017 	ldw	r2,0(r2)
8110620c:	1007883a 	mov	r3,r2
81106210:	e0bffe17 	ldw	r2,-8(fp)
81106214:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base,
81106218:	e0bffe17 	ldw	r2,-8(fp)
8110621c:	10800104 	addi	r2,r2,4
81106220:	e0ffff17 	ldw	r3,-4(fp)
81106224:	18c00117 	ldw	r3,4(r3)
81106228:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_low);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base,
8110622c:	e0bffe17 	ldw	r2,-8(fp)
81106230:	10800204 	addi	r2,r2,8
81106234:	e0ffff17 	ldw	r3,-4(fp)
81106238:	18c00217 	ldw	r3,8(r3)
8110623c:	10c00035 	stwio	r3,0(r2)
			descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(descriptor_base,
81106240:	e0bffe17 	ldw	r2,-8(fp)
81106244:	10800304 	addi	r2,r2,12
81106248:	e0ffff17 	ldw	r3,-4(fp)
8110624c:	18c0030b 	ldhu	r3,12(r3)
81106250:	18ffffcc 	andi	r3,r3,65535
81106254:	10c0002d 	sthio	r3,0(r2)
			descriptor->sequence_number);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(descriptor_base,
81106258:	e0bffe17 	ldw	r2,-8(fp)
8110625c:	10800384 	addi	r2,r2,14
81106260:	e0ffff17 	ldw	r3,-4(fp)
81106264:	18c00383 	ldbu	r3,14(r3)
81106268:	18c03fcc 	andi	r3,r3,255
8110626c:	10c00025 	stbio	r3,0(r2)
			descriptor->read_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(descriptor_base,
81106270:	e0bffe17 	ldw	r2,-8(fp)
81106274:	108003c4 	addi	r2,r2,15
81106278:	e0ffff17 	ldw	r3,-4(fp)
8110627c:	18c003c3 	ldbu	r3,15(r3)
81106280:	18c03fcc 	andi	r3,r3,255
81106284:	10c00025 	stbio	r3,0(r2)
			descriptor->write_burst_count);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(descriptor_base,
81106288:	e0bffe17 	ldw	r2,-8(fp)
8110628c:	10800404 	addi	r2,r2,16
81106290:	e0ffff17 	ldw	r3,-4(fp)
81106294:	18c0040b 	ldhu	r3,16(r3)
81106298:	18ffffcc 	andi	r3,r3,65535
8110629c:	10c0002d 	sthio	r3,0(r2)
			descriptor->read_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(descriptor_base,
811062a0:	e0bffe17 	ldw	r2,-8(fp)
811062a4:	10800484 	addi	r2,r2,18
811062a8:	e0ffff17 	ldw	r3,-4(fp)
811062ac:	18c0048b 	ldhu	r3,18(r3)
811062b0:	18ffffcc 	andi	r3,r3,65535
811062b4:	10c0002d 	sthio	r3,0(r2)
			descriptor->write_stride);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base,
811062b8:	e0bffe17 	ldw	r2,-8(fp)
811062bc:	10800504 	addi	r2,r2,20
811062c0:	e0ffff17 	ldw	r3,-4(fp)
811062c4:	18c00517 	ldw	r3,20(r3)
811062c8:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->read_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base,
811062cc:	e0bffe17 	ldw	r2,-8(fp)
811062d0:	10800604 	addi	r2,r2,24
811062d4:	e0ffff17 	ldw	r3,-4(fp)
811062d8:	18c00617 	ldw	r3,24(r3)
811062dc:	10c00035 	stwio	r3,0(r2)
			(alt_u32 )descriptor->write_address_high);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(descriptor_base,
811062e0:	e0bffe17 	ldw	r2,-8(fp)
811062e4:	10800704 	addi	r2,r2,28
811062e8:	e0ffff17 	ldw	r3,-4(fp)
811062ec:	18c00717 	ldw	r3,28(r3)
811062f0:	10c00035 	stwio	r3,0(r2)
			descriptor->control);
	return 0;
811062f4:	0005883a 	mov	r2,zero
}
811062f8:	e037883a 	mov	sp,fp
811062fc:	df000017 	ldw	fp,0(sp)
81106300:	dec00104 	addi	sp,sp,4
81106304:	f800283a 	ret

81106308 <msgdma_construct_extended_descriptor>:
static int msgdma_construct_extended_descriptor(alt_msgdma_dev *dev,
		alt_msgdma_extended_descriptor *descriptor, alt_u32 *read_address,
		alt_u32 *write_address, alt_u32 length, alt_u32 control,
		alt_u32 *read_address_high, alt_u32 *write_address_high,
		alt_u16 sequence_number, alt_u8 read_burst_count,
		alt_u8 write_burst_count, alt_u16 read_stride, alt_u16 write_stride) {
81106308:	defff604 	addi	sp,sp,-40
8110630c:	de00012e 	bgeu	sp,et,81106314 <msgdma_construct_extended_descriptor+0xc>
81106310:	003b68fa 	trap	3
81106314:	df000915 	stw	fp,36(sp)
81106318:	df000904 	addi	fp,sp,36
8110631c:	e13ff715 	stw	r4,-36(fp)
81106320:	e17ff815 	stw	r5,-32(fp)
81106324:	e1bff915 	stw	r6,-28(fp)
81106328:	e1fffa15 	stw	r7,-24(fp)
8110632c:	e1800517 	ldw	r6,20(fp)
81106330:	e1400617 	ldw	r5,24(fp)
81106334:	e1000717 	ldw	r4,28(fp)
81106338:	e0c00817 	ldw	r3,32(fp)
8110633c:	e0800917 	ldw	r2,36(fp)
81106340:	e1bffb0d 	sth	r6,-20(fp)
81106344:	e17ffc05 	stb	r5,-16(fp)
81106348:	e13ffd05 	stb	r4,-12(fp)
8110634c:	e0fffe0d 	sth	r3,-8(fp)
81106350:	e0bfff0d 	sth	r2,-4(fp)
	if (dev->max_byte < length || dev->max_stride < read_stride
81106354:	e0bff717 	ldw	r2,-36(fp)
81106358:	10c01217 	ldw	r3,72(r2)
8110635c:	e0800117 	ldw	r2,4(fp)
81106360:	18801936 	bltu	r3,r2,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106364:	e13ff717 	ldw	r4,-36(fp)
81106368:	20801317 	ldw	r2,76(r4)
8110636c:	20c01417 	ldw	r3,80(r4)
81106370:	e13ffe0b 	ldhu	r4,-8(fp)
81106374:	213fffcc 	andi	r4,r4,65535
81106378:	2015883a 	mov	r10,r4
8110637c:	0017883a 	mov	r11,zero
81106380:	1ac01136 	bltu	r3,r11,811063c8 <msgdma_construct_extended_descriptor+0xc0>
81106384:	58c0011e 	bne	r11,r3,8110638c <msgdma_construct_extended_descriptor+0x84>
81106388:	12800f36 	bltu	r2,r10,811063c8 <msgdma_construct_extended_descriptor+0xc0>
			|| dev->max_stride < write_stride || dev->enhanced_features != 1) {
8110638c:	e13ff717 	ldw	r4,-36(fp)
81106390:	20801317 	ldw	r2,76(r4)
81106394:	20c01417 	ldw	r3,80(r4)
81106398:	e13fff0b 	ldhu	r4,-4(fp)
8110639c:	213fffcc 	andi	r4,r4,65535
811063a0:	2011883a 	mov	r8,r4
811063a4:	0013883a 	mov	r9,zero
811063a8:	1a400736 	bltu	r3,r9,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063ac:	48c0011e 	bne	r9,r3,811063b4 <msgdma_construct_extended_descriptor+0xac>
811063b0:	12000536 	bltu	r2,r8,811063c8 <msgdma_construct_extended_descriptor+0xc0>
811063b4:	e0bff717 	ldw	r2,-36(fp)
811063b8:	10801703 	ldbu	r2,92(r2)
811063bc:	10803fcc 	andi	r2,r2,255
811063c0:	10800060 	cmpeqi	r2,r2,1
811063c4:	1000021e 	bne	r2,zero,811063d0 <msgdma_construct_extended_descriptor+0xc8>
		return -EINVAL;
811063c8:	00bffa84 	movi	r2,-22
811063cc:	00002306 	br	8110645c <msgdma_construct_extended_descriptor+0x154>
	}

	descriptor->read_address_low = read_address;
811063d0:	e0bff817 	ldw	r2,-32(fp)
811063d4:	e0fff917 	ldw	r3,-28(fp)
811063d8:	10c00015 	stw	r3,0(r2)
	descriptor->write_address_low = write_address;
811063dc:	e0bff817 	ldw	r2,-32(fp)
811063e0:	e0fffa17 	ldw	r3,-24(fp)
811063e4:	10c00115 	stw	r3,4(r2)
	descriptor->transfer_length = length;
811063e8:	e0bff817 	ldw	r2,-32(fp)
811063ec:	e0c00117 	ldw	r3,4(fp)
811063f0:	10c00215 	stw	r3,8(r2)
	descriptor->sequence_number = sequence_number;
811063f4:	e0bff817 	ldw	r2,-32(fp)
811063f8:	e0fffb0b 	ldhu	r3,-20(fp)
811063fc:	10c0030d 	sth	r3,12(r2)
	descriptor->read_burst_count = read_burst_count;
81106400:	e0bff817 	ldw	r2,-32(fp)
81106404:	e0fffc03 	ldbu	r3,-16(fp)
81106408:	10c00385 	stb	r3,14(r2)
	descriptor->write_burst_count = write_burst_count;
8110640c:	e0bff817 	ldw	r2,-32(fp)
81106410:	e0fffd03 	ldbu	r3,-12(fp)
81106414:	10c003c5 	stb	r3,15(r2)
	descriptor->read_stride = read_stride;
81106418:	e0bff817 	ldw	r2,-32(fp)
8110641c:	e0fffe0b 	ldhu	r3,-8(fp)
81106420:	10c0040d 	sth	r3,16(r2)
	descriptor->write_stride = write_stride;
81106424:	e0bff817 	ldw	r2,-32(fp)
81106428:	e0ffff0b 	ldhu	r3,-4(fp)
8110642c:	10c0048d 	sth	r3,18(r2)
	descriptor->read_address_high = read_address_high;
81106430:	e0bff817 	ldw	r2,-32(fp)
81106434:	e0c00317 	ldw	r3,12(fp)
81106438:	10c00515 	stw	r3,20(r2)
	descriptor->write_address_high = write_address_high;
8110643c:	e0bff817 	ldw	r2,-32(fp)
81106440:	e0c00417 	ldw	r3,16(fp)
81106444:	10c00615 	stw	r3,24(r2)
	descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81106448:	e0800217 	ldw	r2,8(fp)
8110644c:	10e00034 	orhi	r3,r2,32768
81106450:	e0bff817 	ldw	r2,-32(fp)
81106454:	10c00715 	stw	r3,28(r2)

	return 0;
81106458:	0005883a 	mov	r2,zero

}
8110645c:	e037883a 	mov	sp,fp
81106460:	df000017 	ldw	fp,0(sp)
81106464:	dec00104 	addi	sp,sp,4
81106468:	f800283a 	ret

8110646c <msgdma_descriptor_async_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_async_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
8110646c:	deffee04 	addi	sp,sp,-72
81106470:	de00012e 	bgeu	sp,et,81106478 <msgdma_descriptor_async_transfer+0xc>
81106474:	003b68fa 	trap	3
81106478:	dfc01115 	stw	ra,68(sp)
8110647c:	df001015 	stw	fp,64(sp)
81106480:	df001004 	addi	fp,sp,64
81106484:	e13ffd15 	stw	r4,-12(fp)
81106488:	e17ffe15 	stw	r5,-8(fp)
8110648c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
81106490:	e03ff115 	stw	zero,-60(fp)
	alt_irq_context context = 0;
81106494:	e03ff215 	stw	zero,-56(fp)
	alt_u16 counter = 0;
81106498:	e03ff00d 	sth	zero,-64(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
8110649c:	e0bffd17 	ldw	r2,-12(fp)
811064a0:	10800317 	ldw	r2,12(r2)
811064a4:	10800204 	addi	r2,r2,8
811064a8:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811064ac:	10bfffcc 	andi	r2,r2,65535
811064b0:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811064b4:	e0bffd17 	ldw	r2,-12(fp)
811064b8:	10800317 	ldw	r2,12(r2)
811064bc:	10800204 	addi	r2,r2,8
811064c0:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811064c4:	1004d43a 	srli	r2,r2,16
811064c8:	e0bff415 	stw	r2,-48(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811064cc:	e0bffd17 	ldw	r2,-12(fp)
811064d0:	10800917 	ldw	r2,36(r2)
811064d4:	e0fff417 	ldw	r3,-48(fp)
811064d8:	1880042e 	bgeu	r3,r2,811064ec <msgdma_descriptor_async_transfer+0x80>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
811064dc:	e0bffd17 	ldw	r2,-12(fp)
811064e0:	10800917 	ldw	r2,36(r2)
811064e4:	e0fff317 	ldw	r3,-52(fp)
811064e8:	18800236 	bltu	r3,r2,811064f4 <msgdma_descriptor_async_transfer+0x88>
		/*at least one write or read FIFO descriptor buffer is full,
		 returning so that this function is non-blocking*/
		return -ENOSPC;
811064ec:	00bff904 	movi	r2,-28
811064f0:	00009f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
811064f4:	e0bffd17 	ldw	r2,-12(fp)
811064f8:	10801817 	ldw	r2,96(r2)
811064fc:	e0bff615 	stw	r2,-40(fp)
81106500:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81106504:	e0bffc0b 	ldhu	r2,-16(fp)
81106508:	e0fffc84 	addi	r3,fp,-14
8110650c:	180d883a 	mov	r6,r3
81106510:	100b883a 	mov	r5,r2
81106514:	e13ff617 	ldw	r4,-40(fp)
81106518:	112d1900 	call	8112d190 <OSSemPend>

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8110651c:	00800804 	movi	r2,32
81106520:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106524:	0005303a 	rdctl	r2,status
81106528:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8110652c:	e0fff717 	ldw	r3,-36(fp)
81106530:	00bfff84 	movi	r2,-2
81106534:	1884703a 	and	r2,r3,r2
81106538:	1001703a 	wrctl	status,r2
  
  return context;
8110653c:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106540:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106544:	e0bffd17 	ldw	r2,-12(fp)
81106548:	10800317 	ldw	r2,12(r2)
8110654c:	10800104 	addi	r2,r2,4
81106550:	e0fff117 	ldw	r3,-60(fp)
81106554:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106558:	e0bffd17 	ldw	r2,-12(fp)
8110655c:	10800317 	ldw	r2,12(r2)
81106560:	e0fffd17 	ldw	r3,-12(fp)
81106564:	18c00317 	ldw	r3,12(r3)
81106568:	18c00037 	ldwio	r3,0(r3)
8110656c:	10c00035 	stwio	r3,0(r2)
81106570:	e0bff217 	ldw	r2,-56(fp)
81106574:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106578:	e0bffb17 	ldw	r2,-20(fp)
8110657c:	1001703a 	wrctl	status,r2
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

	if (NULL != standard_desc && NULL == extended_desc) {
81106580:	e0bffe17 	ldw	r2,-8(fp)
81106584:	10001026 	beq	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
81106588:	e0bfff17 	ldw	r2,-4(fp)
8110658c:	10000e1e 	bne	r2,zero,811065c8 <msgdma_descriptor_async_transfer+0x15c>
		counter = 0; /* reset counter */
81106590:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106594:	d0a04d17 	ldw	r2,-32460(gp)
81106598:	100f883a 	mov	r7,r2
8110659c:	01800784 	movi	r6,30
811065a0:	01400044 	movi	r5,1
811065a4:	01204534 	movhi	r4,33044
811065a8:	212b1204 	addi	r4,r4,-21432
811065ac:	11104380 	call	81110438 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811065b0:	e0bffd17 	ldw	r2,-12(fp)
811065b4:	10801817 	ldw	r2,96(r2)
811065b8:	1009883a 	mov	r4,r2
811065bc:	112d5180 	call	8112d518 <OSSemPost>

		return -ETIME;
811065c0:	00bff084 	movi	r2,-62
811065c4:	00006a06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	} else if (NULL == standard_desc && NULL != extended_desc) {
811065c8:	e0bffe17 	ldw	r2,-8(fp)
811065cc:	1000231e 	bne	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
811065d0:	e0bfff17 	ldw	r2,-4(fp)
811065d4:	10002126 	beq	r2,zero,8110665c <msgdma_descriptor_async_transfer+0x1f0>
		counter = 0; /* reset counter */
811065d8:	e03ff00d 	sth	zero,-64(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811065dc:	00001506 	br	81106634 <msgdma_descriptor_async_transfer+0x1c8>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
811065e0:	01000044 	movi	r4,1
811065e4:	11254440 	call	81125444 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811065e8:	e0bff00b 	ldhu	r2,-64(fp)
811065ec:	1084e230 	cmpltui	r2,r2,5000
811065f0:	10000d1e 	bne	r2,zero,81106628 <msgdma_descriptor_async_transfer+0x1bc>
			{
#ifdef DEBUG_ON
				debug(fp,
811065f4:	d0a04d17 	ldw	r2,-32460(gp)
811065f8:	100f883a 	mov	r7,r2
811065fc:	01801544 	movi	r6,85
81106600:	01400044 	movi	r5,1
81106604:	01204534 	movhi	r4,33044
81106608:	212b1a04 	addi	r4,r4,-21400
8110660c:	11104380 	call	81110438 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
81106610:	e0bffd17 	ldw	r2,-12(fp)
81106614:	10801817 	ldw	r2,96(r2)
81106618:	1009883a 	mov	r4,r2
8110661c:	112d5180 	call	8112d518 <OSSemPost>

				return -ETIME;
81106620:	00bff084 	movi	r2,-62
81106624:	00005206 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
			}
			counter++;
81106628:	e0bff00b 	ldhu	r2,-64(fp)
8110662c:	10800044 	addi	r2,r2,1
81106630:	e0bff00d 	sth	r2,-64(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
81106634:	e0bffd17 	ldw	r2,-12(fp)
81106638:	10c00317 	ldw	r3,12(r2)
8110663c:	e0bffd17 	ldw	r2,-12(fp)
81106640:	10800417 	ldw	r2,16(r2)
81106644:	e1bfff17 	ldw	r6,-4(fp)
81106648:	100b883a 	mov	r5,r2
8110664c:	1809883a 	mov	r4,r3
81106650:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106654:	103fe21e 	bne	r2,zero,811065e0 <__reset+0xfb0e65e0>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106658:	00000606 	br	81106674 <msgdma_descriptor_async_transfer+0x208>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110665c:	e0bffd17 	ldw	r2,-12(fp)
81106660:	10801817 	ldw	r2,96(r2)
81106664:	1009883a 	mov	r4,r2
81106668:	112d5180 	call	8112d518 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
8110666c:	00bfffc4 	movi	r2,-1
81106670:	00003f06 	br	81106770 <msgdma_descriptor_async_transfer+0x304>
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up controller to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if (dev->callback) {
81106674:	e0bffd17 	ldw	r2,-12(fp)
81106678:	10800b17 	ldw	r2,44(r2)
8110667c:	10001c26 	beq	r2,zero,811066f0 <msgdma_descriptor_async_transfer+0x284>

		control |= (dev->control |
81106680:	e0bffd17 	ldw	r2,-12(fp)
81106684:	10c00d17 	ldw	r3,52(r2)
81106688:	e0bff117 	ldw	r2,-60(fp)
8110668c:	1884b03a 	or	r2,r3,r2
81106690:	10800514 	ori	r2,r2,20
81106694:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
		ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81106698:	e0fff117 	ldw	r3,-60(fp)
8110669c:	00bff7c4 	movi	r2,-33
811066a0:	1884703a 	and	r2,r3,r2
811066a4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811066a8:	0005303a 	rdctl	r2,status
811066ac:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811066b0:	e0fff917 	ldw	r3,-28(fp)
811066b4:	00bfff84 	movi	r2,-2
811066b8:	1884703a 	and	r2,r3,r2
811066bc:	1001703a 	wrctl	status,r2
  
  return context;
811066c0:	e0bff917 	ldw	r2,-28(fp)
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
811066c4:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
811066c8:	e0bffd17 	ldw	r2,-12(fp)
811066cc:	10800317 	ldw	r2,12(r2)
811066d0:	10800104 	addi	r2,r2,4
811066d4:	e0fff117 	ldw	r3,-60(fp)
811066d8:	10c00035 	stwio	r3,0(r2)
811066dc:	e0bff217 	ldw	r2,-56(fp)
811066e0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811066e4:	e0bff517 	ldw	r2,-44(fp)
811066e8:	1001703a 	wrctl	status,r2
811066ec:	00001b06 	br	8110675c <msgdma_descriptor_async_transfer+0x2f0>
	 *   - Run
	 *   - Stop on an error with any particular descriptor
	 *   - Disable interrupt generation
	 */
	else {
		control |= (dev->control |
811066f0:	e0bffd17 	ldw	r2,-12(fp)
811066f4:	10c00d17 	ldw	r3,52(r2)
811066f8:	e0bff117 	ldw	r2,-60(fp)
811066fc:	1884b03a 	or	r2,r3,r2
81106700:	10800114 	ori	r2,r2,4
81106704:	e0bff115 	stw	r2,-60(fp)
		ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK)
81106708:	e0fff117 	ldw	r3,-60(fp)
8110670c:	00bff3c4 	movi	r2,-49
81106710:	1884703a 	and	r2,r3,r2
81106714:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106718:	0005303a 	rdctl	r2,status
8110671c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106720:	e0fffa17 	ldw	r3,-24(fp)
81106724:	00bfff84 	movi	r2,-2
81106728:	1884703a 	and	r2,r3,r2
8110672c:	1001703a 	wrctl	status,r2
  
  return context;
81106730:	e0bffa17 	ldw	r2,-24(fp)
				& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		/* making sure the read-modify-write below can't be pre-empted */
		context = alt_irq_disable_all();
81106734:	e0bff215 	stw	r2,-56(fp)
		IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106738:	e0bffd17 	ldw	r2,-12(fp)
8110673c:	10800317 	ldw	r2,12(r2)
81106740:	10800104 	addi	r2,r2,4
81106744:	e0fff117 	ldw	r3,-60(fp)
81106748:	10c00035 	stwio	r3,0(r2)
8110674c:	e0bff217 	ldw	r2,-56(fp)
81106750:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106754:	e0bff817 	ldw	r2,-32(fp)
81106758:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
8110675c:	e0bffd17 	ldw	r2,-12(fp)
81106760:	10801817 	ldw	r2,96(r2)
81106764:	1009883a 	mov	r4,r2
81106768:	112d5180 	call	8112d518 <OSSemPost>

	return 0;
8110676c:	0005883a 	mov	r2,zero
}
81106770:	e037883a 	mov	sp,fp
81106774:	dfc00117 	ldw	ra,4(sp)
81106778:	df000017 	ldw	fp,0(sp)
8110677c:	dec00204 	addi	sp,sp,8
81106780:	f800283a 	ret

81106784 <msgdma_descriptor_sync_transfer>:
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
static int msgdma_descriptor_sync_transfer(alt_msgdma_dev *dev,
		alt_msgdma_standard_descriptor *standard_desc,
		alt_msgdma_extended_descriptor *extended_desc) {
81106784:	deffee04 	addi	sp,sp,-72
81106788:	de00012e 	bgeu	sp,et,81106790 <msgdma_descriptor_sync_transfer+0xc>
8110678c:	003b68fa 	trap	3
81106790:	dfc01115 	stw	ra,68(sp)
81106794:	df001015 	stw	fp,64(sp)
81106798:	df001004 	addi	fp,sp,64
8110679c:	e13ffd15 	stw	r4,-12(fp)
811067a0:	e17ffe15 	stw	r5,-8(fp)
811067a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 control = 0;
811067a8:	e03ff415 	stw	zero,-48(fp)
	alt_irq_context context = 0;
811067ac:	e03ff515 	stw	zero,-44(fp)
	alt_u32 csr_status = 0;
811067b0:	e03ff015 	stw	zero,-64(fp)
	alt_u16 counter = 0;
811067b4:	e03ff10d 	sth	zero,-60(fp)
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067b8:	e0bffd17 	ldw	r2,-12(fp)
811067bc:	10800317 	ldw	r2,12(r2)
811067c0:	10800204 	addi	r2,r2,8
811067c4:	10800037 	ldwio	r2,0(r2)
		alt_msgdma_extended_descriptor *extended_desc) {
	alt_u32 control = 0;
	alt_irq_context context = 0;
	alt_u32 csr_status = 0;
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
811067c8:	10bfffcc 	andi	r2,r2,65535
811067cc:	e0bff215 	stw	r2,-56(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
811067d0:	e0bffd17 	ldw	r2,-12(fp)
811067d4:	10800317 	ldw	r2,12(r2)
811067d8:	10800204 	addi	r2,r2,8
811067dc:	10800037 	ldwio	r2,0(r2)
	alt_u16 counter = 0;
	alt_u32 fifo_read_fill_level = (
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
	alt_u32 fifo_write_fill_level = (
811067e0:	1004d43a 	srli	r2,r2,16
811067e4:	e0bff315 	stw	r2,-52(fp)
	IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >>
	ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
	alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK |
811067e8:	00807804 	movi	r2,480
811067ec:	e0bff615 	stw	r2,-40(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
811067f0:	00001d06 	br	81106868 <msgdma_descriptor_sync_transfer+0xe4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
		alt_busy_sleep(1); /* delay 1us */
811067f4:	01000044 	movi	r4,1
811067f8:	11254440 	call	81125444 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
811067fc:	e0bff10b 	ldhu	r2,-60(fp)
81106800:	1084e230 	cmpltui	r2,r2,5000
81106804:	1000091e 	bne	r2,zero,8110682c <msgdma_descriptor_sync_transfer+0xa8>
		{
#ifdef DEBUG_ON
			debug(fp,
81106808:	d0a04d17 	ldw	r2,-32460(gp)
8110680c:	100f883a 	mov	r7,r2
81106810:	01801304 	movi	r6,76
81106814:	01400044 	movi	r5,1
81106818:	01204534 	movhi	r4,33044
8110681c:	212b3004 	addi	r4,r4,-21312
81106820:	11104380 	call	81110438 <fwrite>
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
81106824:	00bff084 	movi	r2,-62
81106828:	0000d006 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
8110682c:	e0bff10b 	ldhu	r2,-60(fp)
81106830:	10800044 	addi	r2,r2,1
81106834:	e0bff10d 	sth	r2,-60(fp)
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106838:	e0bffd17 	ldw	r2,-12(fp)
8110683c:	10800317 	ldw	r2,12(r2)
81106840:	10800204 	addi	r2,r2,8
81106844:	10800037 	ldwio	r2,0(r2)
					"time out after 5 msec while waiting free FIFO buffer for storing descriptor\n");
#endif
			return -ETIME;
		}
		counter++;
		fifo_read_fill_level = (
81106848:	10bfffcc 	andi	r2,r2,65535
8110684c:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
81106850:	e0bffd17 	ldw	r2,-12(fp)
81106854:	10800317 	ldw	r2,12(r2)
81106858:	10800204 	addi	r2,r2,8
8110685c:	10800037 	ldwio	r2,0(r2)
		counter++;
		fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) &
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >>
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
		fifo_write_fill_level = (
81106860:	1004d43a 	srli	r2,r2,16
81106864:	e0bff315 	stw	r2,-52(fp)
	ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
	ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
	ALTERA_MSGDMA_CSR_RESET_STATE_MASK;

	/* Wait for available FIFO buffer to store new descriptor*/
	while ((dev->descriptor_fifo_depth <= fifo_write_fill_level)
81106868:	e0bffd17 	ldw	r2,-12(fp)
8110686c:	10800917 	ldw	r2,36(r2)
81106870:	e0fff317 	ldw	r3,-52(fp)
81106874:	18bfdf2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>
			|| (dev->descriptor_fifo_depth <= fifo_read_fill_level)) {
81106878:	e0bffd17 	ldw	r2,-12(fp)
8110687c:	10800917 	ldw	r2,36(r2)
81106880:	e0fff217 	ldw	r3,-56(fp)
81106884:	18bfdb2e 	bgeu	r3,r2,811067f4 <__reset+0xfb0e67f4>

	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND(dev->regs_lock, 0);
81106888:	e0bffd17 	ldw	r2,-12(fp)
8110688c:	10801817 	ldw	r2,96(r2)
81106890:	e0bff815 	stw	r2,-32(fp)
81106894:	e03ffc0d 	sth	zero,-16(fp)
81106898:	e0bffc0b 	ldhu	r2,-16(fp)
8110689c:	e0fffc84 	addi	r3,fp,-14
811068a0:	180d883a 	mov	r6,r3
811068a4:	100b883a 	mov	r5,r2
811068a8:	e13ff817 	ldw	r4,-32(fp)
811068ac:	112d1900 	call	8112d190 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811068b0:	0005303a 	rdctl	r2,status
811068b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811068b8:	e0fffb17 	ldw	r3,-20(fp)
811068bc:	00bfff84 	movi	r2,-2
811068c0:	1884703a 	and	r2,r3,r2
811068c4:	1001703a 	wrctl	status,r2
  
  return context;
811068c8:	e0bffb17 	ldw	r2,-20(fp)

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
811068cc:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811068d0:	e0bffd17 	ldw	r2,-12(fp)
811068d4:	10800317 	ldw	r2,12(r2)
811068d8:	10800104 	addi	r2,r2,4
811068dc:	00c00804 	movi	r3,32
811068e0:	10c00035 	stwio	r3,0(r2)
			ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811068e4:	e0bffd17 	ldw	r2,-12(fp)
811068e8:	10800317 	ldw	r2,12(r2)
811068ec:	e0fffd17 	ldw	r3,-12(fp)
811068f0:	18c00317 	ldw	r3,12(r3)
811068f4:	18c00037 	ldwio	r3,0(r3)
811068f8:	10c00035 	stwio	r3,0(r2)
			IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

	if (NULL != standard_desc && NULL == extended_desc) {
811068fc:	e0bffe17 	ldw	r2,-8(fp)
81106900:	10001026 	beq	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
81106904:	e0bfff17 	ldw	r2,-4(fp)
81106908:	10000e1e 	bne	r2,zero,81106944 <msgdma_descriptor_sync_transfer+0x1c0>
		counter = 0; /* reset counter */
8110690c:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
#ifdef DEBUG_ON
		debug(fp, "invalid dma descriptor option\n");
81106910:	d0a04d17 	ldw	r2,-32460(gp)
81106914:	100f883a 	mov	r7,r2
81106918:	01800784 	movi	r6,30
8110691c:	01400044 	movi	r5,1
81106920:	01204534 	movhi	r4,33044
81106924:	212b1204 	addi	r4,r4,-21432
81106928:	11104380 	call	81110438 <fwrite>
		/*
		 * Now that access to the registers is complete, release the
		 * registers semaphore so that other threads can access the
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
8110692c:	e0bffd17 	ldw	r2,-12(fp)
81106930:	10801817 	ldw	r2,96(r2)
81106934:	1009883a 	mov	r4,r2
81106938:	112d5180 	call	8112d518 <OSSemPost>

		return -ETIME;
8110693c:	00bff084 	movi	r2,-62
81106940:	00008a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	} else if (NULL == standard_desc && NULL != extended_desc) {
81106944:	e0bffe17 	ldw	r2,-8(fp)
81106948:	1000231e 	bne	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
8110694c:	e0bfff17 	ldw	r2,-4(fp)
81106950:	10002126 	beq	r2,zero,811069d8 <msgdma_descriptor_sync_transfer+0x254>
		counter = 0; /* reset counter */
81106954:	e03ff10d 	sth	zero,-60(fp)
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
81106958:	00001506 	br	811069b0 <msgdma_descriptor_sync_transfer+0x22c>
				!= msgdma_write_extended_descriptor(dev->csr_base,
						dev->descriptor_base, extended_desc)) {
			alt_busy_sleep(1); /* delay 1us */
8110695c:	01000044 	movi	r4,1
81106960:	11254440 	call	81125444 <alt_busy_sleep>
			if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106964:	e0bff10b 	ldhu	r2,-60(fp)
81106968:	1084e230 	cmpltui	r2,r2,5000
8110696c:	10000d1e 	bne	r2,zero,811069a4 <msgdma_descriptor_sync_transfer+0x220>
			{
#ifdef DEBUG_ON
				debug(fp,
81106970:	d0a04d17 	ldw	r2,-32460(gp)
81106974:	100f883a 	mov	r7,r2
81106978:	01801004 	movi	r6,64
8110697c:	01400044 	movi	r5,1
81106980:	01204534 	movhi	r4,33044
81106984:	212b4404 	addi	r4,r4,-21232
81106988:	11104380 	call	81110438 <fwrite>
				/*
				 * Now that access to the registers is complete, release the
				 * registers semaphore so that other threads can access the
				 * registers.
				 */
				ALT_SEM_POST(dev->regs_lock);
8110698c:	e0bffd17 	ldw	r2,-12(fp)
81106990:	10801817 	ldw	r2,96(r2)
81106994:	1009883a 	mov	r4,r2
81106998:	112d5180 	call	8112d518 <OSSemPost>

				return -ETIME;
8110699c:	00bff084 	movi	r2,-62
811069a0:	00007206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
			}
			counter++;
811069a4:	e0bff10b 	ldhu	r2,-60(fp)
811069a8:	10800044 	addi	r2,r2,1
811069ac:	e0bff10d 	sth	r2,-60(fp)
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
				!= msgdma_write_extended_descriptor(dev->csr_base,
811069b0:	e0bffd17 	ldw	r2,-12(fp)
811069b4:	10c00317 	ldw	r3,12(r2)
811069b8:	e0bffd17 	ldw	r2,-12(fp)
811069bc:	10800417 	ldw	r2,16(r2)
811069c0:	e1bfff17 	ldw	r6,-4(fp)
811069c4:	100b883a 	mov	r5,r2
811069c8:	1809883a 	mov	r4,r3
811069cc:	11061cc0 	call	811061cc <msgdma_write_extended_descriptor>
		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
		counter = 0; /* reset counter */
		/*writing descriptor structure to the dispatcher, wait until descriptor
		 write is succeed*/
		while (0
811069d0:	103fe21e 	bne	r2,zero,8110695c <__reset+0xfb0e695c>
		 * registers.
		 */
		ALT_SEM_POST(dev->regs_lock);

		return -ETIME;
	} else if (NULL == standard_desc && NULL != extended_desc) {
811069d4:	00000606 	br	811069f0 <msgdma_descriptor_sync_transfer+0x26c>
	} else {
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
811069d8:	e0bffd17 	ldw	r2,-12(fp)
811069dc:	10801817 	ldw	r2,96(r2)
811069e0:	1009883a 	mov	r4,r2
811069e4:	112d5180 	call	8112d518 <OSSemPost>

		/* operation not permitted due to descriptor type conflict */
		return -EPERM;
811069e8:	00bfffc4 	movi	r2,-1
811069ec:	00005f06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	 * Set up msgdma controller to:
	 * - Disable interrupt generation
	 * - Run once a valid descriptor is written to controller
	 * - Stop on an error with any particular descriptor
	 */
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
811069f0:	e0bffd17 	ldw	r2,-12(fp)
811069f4:	10800317 	ldw	r2,12(r2)
811069f8:	10800104 	addi	r2,r2,4
811069fc:	e0fffd17 	ldw	r3,-12(fp)
81106a00:	19000d17 	ldw	r4,52(r3)
81106a04:	00fff2c4 	movi	r3,-53
81106a08:	20c6703a 	and	r3,r4,r3
81106a0c:	18c00114 	ori	r3,r3,4
81106a10:	10c00035 	stwio	r3,0(r2)
81106a14:	e0bff517 	ldw	r2,-44(fp)
81106a18:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106a1c:	e0bff717 	ldw	r2,-36(fp)
81106a20:	1001703a 	wrctl	status,r2
			(dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK ) & (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK));

	alt_irq_enable_all(context);

	counter = 0; /* reset counter */
81106a24:	e03ff10d 	sth	zero,-60(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a28:	e0bffd17 	ldw	r2,-12(fp)
81106a2c:	10800317 	ldw	r2,12(r2)
81106a30:	10800037 	ldwio	r2,0(r2)
81106a34:	e0bff015 	stw	r2,-64(fp)

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106a38:	00001906 	br	81106aa0 <msgdma_descriptor_sync_transfer+0x31c>
		alt_busy_sleep(1); /* delay 1us */
81106a3c:	01000044 	movi	r4,1
81106a40:	11254440 	call	81125444 <alt_busy_sleep>
		if (5000 <= counter) /* time_out if waiting longer than 5 msec */
81106a44:	e0bff10b 	ldhu	r2,-60(fp)
81106a48:	1084e230 	cmpltui	r2,r2,5000
81106a4c:	10000d1e 	bne	r2,zero,81106a84 <msgdma_descriptor_sync_transfer+0x300>
		{
#ifdef DEBUG_ON
			debug(fp,
81106a50:	d0a04d17 	ldw	r2,-32460(gp)
81106a54:	100f883a 	mov	r7,r2
81106a58:	01801184 	movi	r6,70
81106a5c:	01400044 	movi	r5,1
81106a60:	01204534 	movhi	r4,33044
81106a64:	212b5504 	addi	r4,r4,-21164
81106a68:	11104380 	call	81110438 <fwrite>

			/*
			 * Now that access to the registers is complete, release the registers
			 * semaphore so that other threads can access the registers.
			 */
			ALT_SEM_POST(dev->regs_lock);
81106a6c:	e0bffd17 	ldw	r2,-12(fp)
81106a70:	10801817 	ldw	r2,96(r2)
81106a74:	1009883a 	mov	r4,r2
81106a78:	112d5180 	call	8112d518 <OSSemPost>

			return -ETIME;
81106a7c:	00bff084 	movi	r2,-62
81106a80:	00003a06 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
		}
		counter++;
81106a84:	e0bff10b 	ldhu	r2,-60(fp)
81106a88:	10800044 	addi	r2,r2,1
81106a8c:	e0bff10d 	sth	r2,-60(fp)
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81106a90:	e0bffd17 	ldw	r2,-12(fp)
81106a94:	10800317 	ldw	r2,12(r2)
81106a98:	10800037 	ldwio	r2,0(r2)
81106a9c:	e0bff015 	stw	r2,-64(fp)

	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);

	/* Wait for any pending transfers to complete or checking any errors or
	 conditions causing descriptor to stop dispatching */
	while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK)) {
81106aa0:	e0fff017 	ldw	r3,-64(fp)
81106aa4:	e0bff617 	ldw	r2,-40(fp)
81106aa8:	1884703a 	and	r2,r3,r2
81106aac:	1000031e 	bne	r2,zero,81106abc <msgdma_descriptor_sync_transfer+0x338>
81106ab0:	e0bff017 	ldw	r2,-64(fp)
81106ab4:	1080004c 	andi	r2,r2,1
81106ab8:	103fe01e 	bne	r2,zero,81106a3c <__reset+0xfb0e6a3c>
		csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	}

	/*Errors or conditions causing the dispatcher stopping issuing read/write
	 commands to masters*/
	if (0 != (csr_status & error)) {
81106abc:	e0fff017 	ldw	r3,-64(fp)
81106ac0:	e0bff617 	ldw	r2,-40(fp)
81106ac4:	1884703a 	and	r2,r3,r2
81106ac8:	10000626 	beq	r2,zero,81106ae4 <msgdma_descriptor_sync_transfer+0x360>
		/*
		 * Now that access to the registers is complete, release the registers
		 * semaphore so that other threads can access the registers.
		 */
		ALT_SEM_POST(dev->regs_lock);
81106acc:	e0bffd17 	ldw	r2,-12(fp)
81106ad0:	10801817 	ldw	r2,96(r2)
81106ad4:	1009883a 	mov	r4,r2
81106ad8:	112d5180 	call	8112d518 <OSSemPost>

		return error;
81106adc:	e0bff617 	ldw	r2,-40(fp)
81106ae0:	00002206 	br	81106b6c <msgdma_descriptor_sync_transfer+0x3e8>
	}

	/* Stop the msgdma dispatcher from issuing more descriptors to the
	 read or write masters  */
	/* stop issuing more descriptors */
	control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) |
81106ae4:	e0bffd17 	ldw	r2,-12(fp)
81106ae8:	10800317 	ldw	r2,12(r2)
81106aec:	10800104 	addi	r2,r2,4
81106af0:	10800037 	ldwio	r2,0(r2)
81106af4:	10800814 	ori	r2,r2,32
81106af8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81106afc:	0005303a 	rdctl	r2,status
81106b00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81106b04:	e0fffa17 	ldw	r3,-24(fp)
81106b08:	00bfff84 	movi	r2,-2
81106b0c:	1884703a 	and	r2,r3,r2
81106b10:	1001703a 	wrctl	status,r2
  
  return context;
81106b14:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81106b18:	e0bff515 	stw	r2,-44(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81106b1c:	e0bffd17 	ldw	r2,-12(fp)
81106b20:	10800317 	ldw	r2,12(r2)
81106b24:	10800104 	addi	r2,r2,4
81106b28:	e0fff417 	ldw	r3,-48(fp)
81106b2c:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
81106b30:	e0bffd17 	ldw	r2,-12(fp)
81106b34:	10800317 	ldw	r2,12(r2)
81106b38:	e0fffd17 	ldw	r3,-12(fp)
81106b3c:	18c00317 	ldw	r3,12(r3)
81106b40:	18c00037 	ldwio	r3,0(r3)
81106b44:	10c00035 	stwio	r3,0(r2)
81106b48:	e0bff517 	ldw	r2,-44(fp)
81106b4c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81106b50:	e0bff917 	ldw	r2,-28(fp)
81106b54:	1001703a 	wrctl	status,r2

	/*
	 * Now that access to the registers is complete, release the registers
	 * semaphore so that other threads can access the registers.
	 */
	ALT_SEM_POST(dev->regs_lock);
81106b58:	e0bffd17 	ldw	r2,-12(fp)
81106b5c:	10801817 	ldw	r2,96(r2)
81106b60:	1009883a 	mov	r4,r2
81106b64:	112d5180 	call	8112d518 <OSSemPost>

	return 0;
81106b68:	0005883a 	mov	r2,zero

}
81106b6c:	e037883a 	mov	sp,fp
81106b70:	dfc00117 	ldw	ra,4(sp)
81106b74:	df000017 	ldw	fp,0(sp)
81106b78:	dec00204 	addi	sp,sp,8
81106b7c:	f800283a 	ret

81106b80 <iMsgdmaConstructExtendedMmToMmDescriptor>:
int iMsgdmaConstructExtendedMmToMmDescriptor(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDescriptor, alt_u32 *puliReadAddress,
		alt_u32 *puliWriteAddress, alt_u32 uliLength, alt_u32 uliControl,
		alt_u32 *puliReadAddressHigh, alt_u32 *puliWriteAddressHigh,
		alt_u16 usiSequenceNumber, alt_u8 ucReadBurstCount,
		alt_u8 ucWriteBurstCount, alt_u16 usiReadStride, alt_u16 usiWriteStride) {
81106b80:	deffec04 	addi	sp,sp,-80
81106b84:	de00012e 	bgeu	sp,et,81106b8c <iMsgdmaConstructExtendedMmToMmDescriptor+0xc>
81106b88:	003b68fa 	trap	3
81106b8c:	dfc01315 	stw	ra,76(sp)
81106b90:	df001215 	stw	fp,72(sp)
81106b94:	df001204 	addi	fp,sp,72
81106b98:	e13ff715 	stw	r4,-36(fp)
81106b9c:	e17ff815 	stw	r5,-32(fp)
81106ba0:	e1bff915 	stw	r6,-28(fp)
81106ba4:	e1fffa15 	stw	r7,-24(fp)
81106ba8:	e1800617 	ldw	r6,24(fp)
81106bac:	e1400717 	ldw	r5,28(fp)
81106bb0:	e1000817 	ldw	r4,32(fp)
81106bb4:	e0c00917 	ldw	r3,36(fp)
81106bb8:	e0800a17 	ldw	r2,40(fp)
81106bbc:	e1bffb0d 	sth	r6,-20(fp)
81106bc0:	e17ffc05 	stb	r5,-16(fp)
81106bc4:	e13ffd05 	stb	r4,-12(fp)
81106bc8:	e0fffe0d 	sth	r3,-8(fp)
81106bcc:	e0bfff0d 	sth	r2,-4(fp)
	return msgdma_construct_extended_descriptor(pxDev, pxDescriptor,
81106bd0:	e0bffb0b 	ldhu	r2,-20(fp)
81106bd4:	e0fffc03 	ldbu	r3,-16(fp)
81106bd8:	e13ffd03 	ldbu	r4,-12(fp)
81106bdc:	e17ffe0b 	ldhu	r5,-8(fp)
81106be0:	e1bfff0b 	ldhu	r6,-4(fp)
81106be4:	d9800815 	stw	r6,32(sp)
81106be8:	d9400715 	stw	r5,28(sp)
81106bec:	d9000615 	stw	r4,24(sp)
81106bf0:	d8c00515 	stw	r3,20(sp)
81106bf4:	d8800415 	stw	r2,16(sp)
81106bf8:	e0800517 	ldw	r2,20(fp)
81106bfc:	d8800315 	stw	r2,12(sp)
81106c00:	e0800417 	ldw	r2,16(fp)
81106c04:	d8800215 	stw	r2,8(sp)
81106c08:	e0800317 	ldw	r2,12(fp)
81106c0c:	d8800115 	stw	r2,4(sp)
81106c10:	e0800217 	ldw	r2,8(fp)
81106c14:	d8800015 	stw	r2,0(sp)
81106c18:	e1fffa17 	ldw	r7,-24(fp)
81106c1c:	e1bff917 	ldw	r6,-28(fp)
81106c20:	e17ff817 	ldw	r5,-32(fp)
81106c24:	e13ff717 	ldw	r4,-36(fp)
81106c28:	11063080 	call	81106308 <msgdma_construct_extended_descriptor>
			puliReadAddress, puliWriteAddress, uliLength, uliControl,
			puliReadAddressHigh, puliWriteAddressHigh, usiSequenceNumber,
			ucReadBurstCount, ucWriteBurstCount, usiReadStride, usiWriteStride);

}
81106c2c:	e037883a 	mov	sp,fp
81106c30:	dfc00117 	ldw	ra,4(sp)
81106c34:	df000017 	ldw	fp,0(sp)
81106c38:	dec00204 	addi	sp,sp,8
81106c3c:	f800283a 	ret

81106c40 <iMsgdmaExtendedDescriptorAsyncTransfer>:
 * -ENOSPC -> FIFO descriptor buffer is full
 * -EPERM -> operation not permitted due to descriptor type conflict
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int iMsgdmaExtendedDescriptorAsyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c40:	defffc04 	addi	sp,sp,-16
81106c44:	de00012e 	bgeu	sp,et,81106c4c <iMsgdmaExtendedDescriptorAsyncTransfer+0xc>
81106c48:	003b68fa 	trap	3
81106c4c:	dfc00315 	stw	ra,12(sp)
81106c50:	df000215 	stw	fp,8(sp)
81106c54:	df000204 	addi	fp,sp,8
81106c58:	e13ffe15 	stw	r4,-8(fp)
81106c5c:	e17fff15 	stw	r5,-4(fp)
	/*
	 * Error detection/handling should be performed at the application
	 * or callback level as appropriate.
	 */
	return msgdma_descriptor_async_transfer(pxDev, NULL, pxDesc);
81106c60:	e1bfff17 	ldw	r6,-4(fp)
81106c64:	000b883a 	mov	r5,zero
81106c68:	e13ffe17 	ldw	r4,-8(fp)
81106c6c:	110646c0 	call	8110646c <msgdma_descriptor_async_transfer>
}
81106c70:	e037883a 	mov	sp,fp
81106c74:	dfc00117 	ldw	ra,4(sp)
81106c78:	df000017 	ldw	fp,0(sp)
81106c7c:	dec00204 	addi	sp,sp,8
81106c80:	f800283a 	ret

81106c84 <iMsgdmaExtendedDescriptorSyncTransfer>:
 *           return -EPERM (operation not permitted due to descriptor type 
 *		conflict)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int iMsgdmaExtendedDescriptorSyncTransfer(alt_msgdma_dev *pxDev,
		alt_msgdma_extended_descriptor *pxDesc) {
81106c84:	defffc04 	addi	sp,sp,-16
81106c88:	de00012e 	bgeu	sp,et,81106c90 <iMsgdmaExtendedDescriptorSyncTransfer+0xc>
81106c8c:	003b68fa 	trap	3
81106c90:	dfc00315 	stw	ra,12(sp)
81106c94:	df000215 	stw	fp,8(sp)
81106c98:	df000204 	addi	fp,sp,8
81106c9c:	e13ffe15 	stw	r4,-8(fp)
81106ca0:	e17fff15 	stw	r5,-4(fp)
	return msgdma_descriptor_sync_transfer(pxDev, NULL, pxDesc);
81106ca4:	e1bfff17 	ldw	r6,-4(fp)
81106ca8:	000b883a 	mov	r5,zero
81106cac:	e13ffe17 	ldw	r4,-8(fp)
81106cb0:	11067840 	call	81106784 <msgdma_descriptor_sync_transfer>
}
81106cb4:	e037883a 	mov	sp,fp
81106cb8:	dfc00117 	ldw	ra,4(sp)
81106cbc:	df000017 	ldw	fp,0(sp)
81106cc0:	dec00204 	addi	sp,sp,8
81106cc4:	f800283a 	ret

81106cc8 <POWER_SPI_RW>:
#define SPI_SDI(x)    IOWR_ALTERA_AVALON_PIO_DATA(CSENSE_SDI_BASE,x)
#define SPI_SDO       (IORD_ALTERA_AVALON_PIO_DATA(CSENSE_SDO_BASE) & 0x01)
#define SPI_DELAY     usleep(15)  // based on 50MHZ of CPU clock
// Note. SCK: typical 19.2KHZ (53 ms)
bool POWER_SPI_RW(alt_u8 IcIndex, alt_u8 NextChannel, bool bEN, bool bSIGN,
		bool bSGL, alt_u32 *pValue) {
81106cc8:	defff204 	addi	sp,sp,-56
81106ccc:	de00012e 	bgeu	sp,et,81106cd4 <POWER_SPI_RW+0xc>
81106cd0:	003b68fa 	trap	3
81106cd4:	dfc00d15 	stw	ra,52(sp)
81106cd8:	df000c15 	stw	fp,48(sp)
81106cdc:	df000c04 	addi	fp,sp,48
81106ce0:	2007883a 	mov	r3,r4
81106ce4:	2805883a 	mov	r2,r5
81106ce8:	e1bffe15 	stw	r6,-8(fp)
81106cec:	e1ffff15 	stw	r7,-4(fp)
81106cf0:	e0fffc05 	stb	r3,-16(fp)
81106cf4:	e0bffd05 	stb	r2,-12(fp)
	bool bSuccess;
	alt_u8 Config8;
	alt_u32 Value32 = 0, Mask32;
81106cf8:	e03ff515 	stw	zero,-44(fp)
	int i, nWait = 0, nZeroCnt;
81106cfc:	e03ff815 	stw	zero,-32(fp)
	const int nMaxWait = 1000000;
81106d00:	008003f4 	movhi	r2,15
81106d04:	10909004 	addi	r2,r2,16960
81106d08:	e0bffa15 	stw	r2,-24(fp)

	//
	Config8 = 0x80;
81106d0c:	00bfe004 	movi	r2,-128
81106d10:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bEN) ? 0x20 : 0x00;
81106d14:	e0bffe17 	ldw	r2,-8(fp)
81106d18:	10000226 	beq	r2,zero,81106d24 <POWER_SPI_RW+0x5c>
81106d1c:	00800804 	movi	r2,32
81106d20:	00000106 	br	81106d28 <POWER_SPI_RW+0x60>
81106d24:	0005883a 	mov	r2,zero
81106d28:	e0fff403 	ldbu	r3,-48(fp)
81106d2c:	10c4b03a 	or	r2,r2,r3
81106d30:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSGL) ? 0x10 : 0x00;
81106d34:	e0800217 	ldw	r2,8(fp)
81106d38:	10000226 	beq	r2,zero,81106d44 <POWER_SPI_RW+0x7c>
81106d3c:	00800404 	movi	r2,16
81106d40:	00000106 	br	81106d48 <POWER_SPI_RW+0x80>
81106d44:	0005883a 	mov	r2,zero
81106d48:	e0fff403 	ldbu	r3,-48(fp)
81106d4c:	10c4b03a 	or	r2,r2,r3
81106d50:	e0bff405 	stb	r2,-48(fp)
	Config8 |= (bSIGN) ? 0x08 : 0x00;
81106d54:	e0bfff17 	ldw	r2,-4(fp)
81106d58:	10000226 	beq	r2,zero,81106d64 <POWER_SPI_RW+0x9c>
81106d5c:	00800204 	movi	r2,8
81106d60:	00000106 	br	81106d68 <POWER_SPI_RW+0xa0>
81106d64:	0005883a 	mov	r2,zero
81106d68:	e0fff403 	ldbu	r3,-48(fp)
81106d6c:	10c4b03a 	or	r2,r2,r3
81106d70:	e0bff405 	stb	r2,-48(fp)
	Config8 |= NextChannel & 0x07; // channel
81106d74:	e0bffd03 	ldbu	r2,-12(fp)
81106d78:	108001cc 	andi	r2,r2,7
81106d7c:	1007883a 	mov	r3,r2
81106d80:	e0bff403 	ldbu	r2,-48(fp)
81106d84:	1884b03a 	or	r2,r3,r2
81106d88:	e0bff405 	stb	r2,-48(fp)

	SPI_FO(0); // use internal conversion clock
81106d8c:	0007883a 	mov	r3,zero
81106d90:	00a00034 	movhi	r2,32768
81106d94:	10824404 	addi	r2,r2,2320
81106d98:	10c00035 	stwio	r3,0(r2)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
81106d9c:	0007883a 	mov	r3,zero
81106da0:	00a00034 	movhi	r2,32768
81106da4:	10824c04 	addi	r2,r2,2352
81106da8:	10c00035 	stwio	r3,0(r2)
	SPI_CS_N(IcIndex, 0);  // chip select: active
81106dac:	e0bffc03 	ldbu	r2,-16(fp)
81106db0:	1000021e 	bne	r2,zero,81106dbc <POWER_SPI_RW+0xf4>
81106db4:	00c00084 	movi	r3,2
81106db8:	00000106 	br	81106dc0 <POWER_SPI_RW+0xf8>
81106dbc:	00c00044 	movi	r3,1
81106dc0:	00a00034 	movhi	r2,32768
81106dc4:	10824804 	addi	r2,r2,2336
81106dc8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
81106dcc:	010003c4 	movi	r4,15
81106dd0:	11263140 	call	81126314 <usleep>

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106dd4:	00000306 	br	81106de4 <POWER_SPI_RW+0x11c>
		nWait++;
81106dd8:	e0bff817 	ldw	r2,-32(fp)
81106ddc:	10800044 	addi	r2,r2,1
81106de0:	e0bff815 	stw	r2,-32(fp)
	SPI_SCK(0);  // set low to active extenal serial clock mode.
	SPI_CS_N(IcIndex, 0);  // chip select: active
	SPI_DELAY;

	// wait for converion end (when conversion done, SPI_SDO is low)
	while (SPI_SDO && nWait < nMaxWait) {
81106de4:	00a00034 	movhi	r2,32768
81106de8:	10825404 	addi	r2,r2,2384
81106dec:	10800037 	ldwio	r2,0(r2)
81106df0:	1080004c 	andi	r2,r2,1
81106df4:	10000326 	beq	r2,zero,81106e04 <POWER_SPI_RW+0x13c>
81106df8:	e0fff817 	ldw	r3,-32(fp)
81106dfc:	e0bffa17 	ldw	r2,-24(fp)
81106e00:	18bff516 	blt	r3,r2,81106dd8 <__reset+0xfb0e6dd8>
		nWait++;
	}

	if (SPI_SDO) {
81106e04:	00a00034 	movhi	r2,32768
81106e08:	10825404 	addi	r2,r2,2384
81106e0c:	10800037 	ldwio	r2,0(r2)
81106e10:	1080004c 	andi	r2,r2,1
81106e14:	10000626 	beq	r2,zero,81106e30 <POWER_SPI_RW+0x168>
		SPI_CS_N(IcIndex, 1);  // chip select: inactive
81106e18:	00c000c4 	movi	r3,3
81106e1c:	00a00034 	movhi	r2,32768
81106e20:	10824804 	addi	r2,r2,2336
81106e24:	10c00035 	stwio	r3,0(r2)
#ifdef DEBUG_ON
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
81106e28:	0005883a 	mov	r2,zero
81106e2c:	0000db06 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106e30:	e03ff715 	stw	zero,-36(fp)
81106e34:	00002406 	br	81106ec8 <POWER_SPI_RW+0x200>
			// ignore EOC/ and DMY bits
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0);    //sdi=nextch.7; // put data on pin
81106e38:	e0bff403 	ldbu	r2,-48(fp)
81106e3c:	10803fcc 	andi	r2,r2,255
81106e40:	1004d1fa 	srli	r2,r2,7
81106e44:	10c03fcc 	andi	r3,r2,255
81106e48:	00a00034 	movhi	r2,32768
81106e4c:	10825004 	addi	r2,r2,2368
81106e50:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106e54:	e0bff403 	ldbu	r2,-48(fp)
81106e58:	1085883a 	add	r2,r2,r2
81106e5c:	e0bff405 	stb	r2,-48(fp)
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81106e60:	e0bff517 	ldw	r2,-44(fp)
81106e64:	1085883a 	add	r2,r2,r2
81106e68:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81106e6c:	00a00034 	movhi	r2,32768
81106e70:	10825404 	addi	r2,r2,2384
81106e74:	10800037 	ldwio	r2,0(r2)
81106e78:	1080004c 	andi	r2,r2,1
81106e7c:	1007883a 	mov	r3,r2
81106e80:	e0bff517 	ldw	r2,-44(fp)
81106e84:	10c4b03a 	or	r2,r2,r3
81106e88:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106e8c:	00c00044 	movi	r3,1
81106e90:	00a00034 	movhi	r2,32768
81106e94:	10824c04 	addi	r2,r2,2352
81106e98:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106e9c:	010003c4 	movi	r4,15
81106ea0:	11263140 	call	81126314 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106ea4:	0007883a 	mov	r3,zero
81106ea8:	00a00034 	movhi	r2,32768
81106eac:	10824c04 	addi	r2,r2,2352
81106eb0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106eb4:	010003c4 	movi	r4,15
81106eb8:	11263140 	call	81126314 <usleep>
//		debug(fp, "Timeout \r\n");
#endif
		return FALSE;
	}

	for (i = 0; i < 2; i++) // send config bits 7:6,
81106ebc:	e0bff717 	ldw	r2,-36(fp)
81106ec0:	10800044 	addi	r2,r2,1
81106ec4:	e0bff715 	stw	r2,-36(fp)
81106ec8:	e0bff717 	ldw	r2,-36(fp)
81106ecc:	10800090 	cmplti	r2,r2,2
81106ed0:	103fd91e 	bne	r2,zero,81106e38 <__reset+0xfb0e6e38>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106ed4:	e03ff715 	stw	zero,-36(fp)
81106ed8:	00002406 	br	81106f6c <POWER_SPI_RW+0x2a4>
			{
		SPI_SDI((Config8 & 0x80) ? 1 : 0); //sdi=nextch.7; // put data on pin
81106edc:	e0bff403 	ldbu	r2,-48(fp)
81106ee0:	10803fcc 	andi	r2,r2,255
81106ee4:	1004d1fa 	srli	r2,r2,7
81106ee8:	10c03fcc 	andi	r3,r2,255
81106eec:	00a00034 	movhi	r2,32768
81106ef0:	10825004 	addi	r2,r2,2368
81106ef4:	10c00035 	stwio	r3,0(r2)
		Config8 <<= 1; //nextch = rl(nextch); // get next config bit ready
81106ef8:	e0bff403 	ldbu	r2,-48(fp)
81106efc:	1085883a 	add	r2,r2,r2
81106f00:	e0bff405 	stb	r2,-48(fp)

		Value32 <<= 1; //result_3 = rl(result_3);// get ready to load lsb
81106f04:	e0bff517 	ldw	r2,-44(fp)
81106f08:	1085883a 	add	r2,r2,r2
81106f0c:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_3.0 = sdo; // load lsb
81106f10:	00a00034 	movhi	r2,32768
81106f14:	10825404 	addi	r2,r2,2384
81106f18:	10800037 	ldwio	r2,0(r2)
81106f1c:	1080004c 	andi	r2,r2,1
81106f20:	1007883a 	mov	r3,r2
81106f24:	e0bff517 	ldw	r2,-44(fp)
81106f28:	10c4b03a 	or	r2,r2,r3
81106f2c:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106f30:	00c00044 	movi	r3,1
81106f34:	00a00034 	movhi	r2,32768
81106f38:	10824c04 	addi	r2,r2,2352
81106f3c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f40:	010003c4 	movi	r4,15
81106f44:	11263140 	call	81126314 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106f48:	0007883a 	mov	r3,zero
81106f4c:	00a00034 	movhi	r2,32768
81106f50:	10824c04 	addi	r2,r2,2352
81106f54:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106f58:	010003c4 	movi	r4,15
81106f5c:	11263140 	call	81126314 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // send config, read byte 3
81106f60:	e0bff717 	ldw	r2,-36(fp)
81106f64:	10800044 	addi	r2,r2,1
81106f68:	e0bff715 	stw	r2,-36(fp)
81106f6c:	e0bff717 	ldw	r2,-36(fp)
81106f70:	10800210 	cmplti	r2,r2,8
81106f74:	103fd91e 	bne	r2,zero,81106edc <__reset+0xfb0e6edc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106f78:	e03ff715 	stw	zero,-36(fp)
81106f7c:	00001a06 	br	81106fe8 <POWER_SPI_RW+0x320>
			{
		Value32 <<= 1; //result_2 = rl(result_2);// get ready to load lsb
81106f80:	e0bff517 	ldw	r2,-44(fp)
81106f84:	1085883a 	add	r2,r2,r2
81106f88:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_2.0 = sdo; // load lsb
81106f8c:	00a00034 	movhi	r2,32768
81106f90:	10825404 	addi	r2,r2,2384
81106f94:	10800037 	ldwio	r2,0(r2)
81106f98:	1080004c 	andi	r2,r2,1
81106f9c:	1007883a 	mov	r3,r2
81106fa0:	e0bff517 	ldw	r2,-44(fp)
81106fa4:	10c4b03a 	or	r2,r2,r3
81106fa8:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81106fac:	00c00044 	movi	r3,1
81106fb0:	00a00034 	movhi	r2,32768
81106fb4:	10824c04 	addi	r2,r2,2352
81106fb8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fbc:	010003c4 	movi	r4,15
81106fc0:	11263140 	call	81126314 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81106fc4:	0007883a 	mov	r3,zero
81106fc8:	00a00034 	movhi	r2,32768
81106fcc:	10824c04 	addi	r2,r2,2352
81106fd0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81106fd4:	010003c4 	movi	r4,15
81106fd8:	11263140 	call	81126314 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 2
81106fdc:	e0bff717 	ldw	r2,-36(fp)
81106fe0:	10800044 	addi	r2,r2,1
81106fe4:	e0bff715 	stw	r2,-36(fp)
81106fe8:	e0bff717 	ldw	r2,-36(fp)
81106fec:	10800210 	cmplti	r2,r2,8
81106ff0:	103fe31e 	bne	r2,zero,81106f80 <__reset+0xfb0e6f80>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81106ff4:	e03ff715 	stw	zero,-36(fp)
81106ff8:	00001a06 	br	81107064 <POWER_SPI_RW+0x39c>
			{
		Value32 <<= 1; //result_1 = rl(result_1);// get ready to load lsb
81106ffc:	e0bff517 	ldw	r2,-44(fp)
81107000:	1085883a 	add	r2,r2,r2
81107004:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_1.0 = sdo; // load lsb
81107008:	00a00034 	movhi	r2,32768
8110700c:	10825404 	addi	r2,r2,2384
81107010:	10800037 	ldwio	r2,0(r2)
81107014:	1080004c 	andi	r2,r2,1
81107018:	1007883a 	mov	r3,r2
8110701c:	e0bff517 	ldw	r2,-44(fp)
81107020:	10c4b03a 	or	r2,r2,r3
81107024:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
81107028:	00c00044 	movi	r3,1
8110702c:	00a00034 	movhi	r2,32768
81107030:	10824c04 	addi	r2,r2,2352
81107034:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107038:	010003c4 	movi	r4,15
8110703c:	11263140 	call	81126314 <usleep>
		SPI_SCK(0); //sck=0; // clock low
81107040:	0007883a 	mov	r3,zero
81107044:	00a00034 	movhi	r2,32768
81107048:	10824c04 	addi	r2,r2,2352
8110704c:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
81107050:	010003c4 	movi	r4,15
81107054:	11263140 	call	81126314 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 8; i++) // read byte 1
81107058:	e0bff717 	ldw	r2,-36(fp)
8110705c:	10800044 	addi	r2,r2,1
81107060:	e0bff715 	stw	r2,-36(fp)
81107064:	e0bff717 	ldw	r2,-36(fp)
81107068:	10800210 	cmplti	r2,r2,8
8110706c:	103fe31e 	bne	r2,zero,81106ffc <__reset+0xfb0e6ffc>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
81107070:	e03ff715 	stw	zero,-36(fp)
81107074:	00001a06 	br	811070e0 <POWER_SPI_RW+0x418>
			{
		Value32 <<= 1; //result_0 = rl(result_0);// get ready to load lsb
81107078:	e0bff517 	ldw	r2,-44(fp)
8110707c:	1085883a 	add	r2,r2,r2
81107080:	e0bff515 	stw	r2,-44(fp)
		Value32 |= SPI_SDO; //result_0.0 = sdo; // load lsb
81107084:	00a00034 	movhi	r2,32768
81107088:	10825404 	addi	r2,r2,2384
8110708c:	10800037 	ldwio	r2,0(r2)
81107090:	1080004c 	andi	r2,r2,1
81107094:	1007883a 	mov	r3,r2
81107098:	e0bff517 	ldw	r2,-44(fp)
8110709c:	10c4b03a 	or	r2,r2,r3
811070a0:	e0bff515 	stw	r2,-44(fp)

		SPI_SCK(1); //sck=1; // clock high
811070a4:	00c00044 	movi	r3,1
811070a8:	00a00034 	movhi	r2,32768
811070ac:	10824c04 	addi	r2,r2,2352
811070b0:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070b4:	010003c4 	movi	r4,15
811070b8:	11263140 	call	81126314 <usleep>
		SPI_SCK(0); //sck=0; // clock low
811070bc:	0007883a 	mov	r3,zero
811070c0:	00a00034 	movhi	r2,32768
811070c4:	10824c04 	addi	r2,r2,2352
811070c8:	10c00035 	stwio	r3,0(r2)
		SPI_DELAY;
811070cc:	010003c4 	movi	r4,15
811070d0:	11263140 	call	81126314 <usleep>
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}

	for (i = 0; i < 6; i++) // read byte 0
811070d4:	e0bff717 	ldw	r2,-36(fp)
811070d8:	10800044 	addi	r2,r2,1
811070dc:	e0bff715 	stw	r2,-36(fp)
811070e0:	e0bff717 	ldw	r2,-36(fp)
811070e4:	10800190 	cmplti	r2,r2,6
811070e8:	103fe31e 	bne	r2,zero,81107078 <__reset+0xfb0e7078>
		SPI_SCK(1); //sck=1; // clock high
		SPI_DELAY;
		SPI_SCK(0); //sck=0; // clock low
		SPI_DELAY;
	}
	SPI_SCK(1);
811070ec:	00c00044 	movi	r3,1
811070f0:	00a00034 	movhi	r2,32768
811070f4:	10824c04 	addi	r2,r2,2352
811070f8:	10c00035 	stwio	r3,0(r2)
	SPI_DELAY;
811070fc:	010003c4 	movi	r4,15
81107100:	11263140 	call	81126314 <usleep>
	SPI_CS_N(IcIndex, 1);  // chip select: inactive
81107104:	00c000c4 	movi	r3,3
81107108:	00a00034 	movhi	r2,32768
8110710c:	10824804 	addi	r2,r2,2336
81107110:	10c00035 	stwio	r3,0(r2)

	// check parity
	nZeroCnt = 0;
81107114:	e03ff915 	stw	zero,-28(fp)
	Mask32 = 0x01;
81107118:	00800044 	movi	r2,1
8110711c:	e0bff615 	stw	r2,-40(fp)
	for (i = 0; i < 32; i++) {
81107120:	e03ff715 	stw	zero,-36(fp)
81107124:	00000d06 	br	8110715c <POWER_SPI_RW+0x494>
		if ((Value32 & Mask32) == 0x00) {
81107128:	e0fff517 	ldw	r3,-44(fp)
8110712c:	e0bff617 	ldw	r2,-40(fp)
81107130:	1884703a 	and	r2,r3,r2
81107134:	1000031e 	bne	r2,zero,81107144 <POWER_SPI_RW+0x47c>
			nZeroCnt++;
81107138:	e0bff917 	ldw	r2,-28(fp)
8110713c:	10800044 	addi	r2,r2,1
81107140:	e0bff915 	stw	r2,-28(fp)
		}
		Mask32 <<= 1;
81107144:	e0bff617 	ldw	r2,-40(fp)
81107148:	1085883a 	add	r2,r2,r2
8110714c:	e0bff615 	stw	r2,-40(fp)
	SPI_CS_N(IcIndex, 1);  // chip select: inactive

	// check parity
	nZeroCnt = 0;
	Mask32 = 0x01;
	for (i = 0; i < 32; i++) {
81107150:	e0bff717 	ldw	r2,-36(fp)
81107154:	10800044 	addi	r2,r2,1
81107158:	e0bff715 	stw	r2,-36(fp)
8110715c:	e0bff717 	ldw	r2,-36(fp)
81107160:	10800810 	cmplti	r2,r2,32
81107164:	103ff01e 	bne	r2,zero,81107128 <__reset+0xfb0e7128>
		if ((Value32 & Mask32) == 0x00) {
			nZeroCnt++;
		}
		Mask32 <<= 1;
	}
	bSuccess = (nZeroCnt & 0x01) ? FALSE : TRUE;
81107168:	e0bff917 	ldw	r2,-28(fp)
8110716c:	1080004c 	andi	r2,r2,1
81107170:	1005003a 	cmpeq	r2,r2,zero
81107174:	10803fcc 	andi	r2,r2,255
81107178:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess) {
8110717c:	e0bffb17 	ldw	r2,-20(fp)
81107180:	1000021e 	bne	r2,zero,8110718c <POWER_SPI_RW+0x4c4>
#ifdef DEBUG_ON
//		debug(fp, "Parity Check Error \r\n");
#endif
		return FALSE;
81107184:	0005883a 	mov	r2,zero
81107188:	00000406 	br	8110719c <POWER_SPI_RW+0x4d4>
	}

	*pValue = Value32;
8110718c:	e0800317 	ldw	r2,12(fp)
81107190:	e0fff517 	ldw	r3,-44(fp)
81107194:	10c00015 	stw	r3,0(r2)

	return bSuccess;
81107198:	e0bffb17 	ldw	r2,-20(fp)
}
8110719c:	e037883a 	mov	sp,fp
811071a0:	dfc00117 	ldw	ra,4(sp)
811071a4:	df000017 	ldw	fp,0(sp)
811071a8:	dec00204 	addi	sp,sp,8
811071ac:	f800283a 	ret

811071b0 <vRstcSimucamReset>:

//! [program memory private global variables]
//! [program memory private global variables]

//! [public functions]
void vRstcSimucamReset(alt_u16 usiRstCnt) {
811071b0:	defffc04 	addi	sp,sp,-16
811071b4:	de00012e 	bgeu	sp,et,811071bc <vRstcSimucamReset+0xc>
811071b8:	003b68fa 	trap	3
811071bc:	dfc00315 	stw	ra,12(sp)
811071c0:	df000215 	stw	fp,8(sp)
811071c4:	df000204 	addi	fp,sp,8
811071c8:	2005883a 	mov	r2,r4
811071cc:	e0bfff0d 	sth	r2,-4(fp)
	alt_u32 uliReg = 0;
811071d0:	e03ffe15 	stw	zero,-8(fp)

	uliReg |= (alt_u32) (usiRstCnt & RSTC_SIMUCAM_RST_TMR_MSK);
811071d4:	e0bfff0b 	ldhu	r2,-4(fp)
811071d8:	e0fffe17 	ldw	r3,-8(fp)
811071dc:	1884b03a 	or	r2,r3,r2
811071e0:	e0bffe15 	stw	r2,-8(fp)
	uliReg |= (alt_u32) RSTC_SIMUCAM_RST_CTRL_MSK;
811071e4:	e0bffe17 	ldw	r2,-8(fp)
811071e8:	10800074 	orhi	r2,r2,1
811071ec:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811071f0:	e1bffe17 	ldw	r6,-8(fp)
811071f4:	000b883a 	mov	r5,zero
811071f8:	01200034 	movhi	r4,32768
811071fc:	21020004 	addi	r4,r4,2048
81107200:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_SIMUCAM_RESET_REG_OFFSET, uliReg);
}
81107204:	0001883a 	nop
81107208:	e037883a 	mov	sp,fp
8110720c:	dfc00117 	ldw	ra,4(sp)
81107210:	df000017 	ldw	fp,0(sp)
81107214:	dec00204 	addi	sp,sp,8
81107218:	f800283a 	ret

8110721c <vRstcReleaseDeviceReset>:

void vRstcReleaseDeviceReset(alt_u32 usiRstMask) {
8110721c:	defffc04 	addi	sp,sp,-16
81107220:	de00012e 	bgeu	sp,et,81107228 <vRstcReleaseDeviceReset+0xc>
81107224:	003b68fa 	trap	3
81107228:	dfc00315 	stw	ra,12(sp)
8110722c:	df000215 	stw	fp,8(sp)
81107230:	df000204 	addi	fp,sp,8
81107234:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
81107238:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
8110723c:	01400044 	movi	r5,1
81107240:	01200034 	movhi	r4,32768
81107244:	21020004 	addi	r4,r4,2048
81107248:	11073540 	call	81107354 <uliRstReadReg>
8110724c:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg &= ~((alt_u32) usiRstMask);
81107250:	e0bfff17 	ldw	r2,-4(fp)
81107254:	0084303a 	nor	r2,zero,r2
81107258:	e0fffe17 	ldw	r3,-8(fp)
8110725c:	1884703a 	and	r2,r3,r2
81107260:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
81107264:	e1bffe17 	ldw	r6,-8(fp)
81107268:	01400044 	movi	r5,1
8110726c:	01200034 	movhi	r4,32768
81107270:	21020004 	addi	r4,r4,2048
81107274:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
81107278:	0001883a 	nop
8110727c:	e037883a 	mov	sp,fp
81107280:	dfc00117 	ldw	ra,4(sp)
81107284:	df000017 	ldw	fp,0(sp)
81107288:	dec00204 	addi	sp,sp,8
8110728c:	f800283a 	ret

81107290 <vRstcHoldDeviceReset>:

void vRstcHoldDeviceReset(alt_u32 usiRstMask) {
81107290:	defffc04 	addi	sp,sp,-16
81107294:	de00012e 	bgeu	sp,et,8110729c <vRstcHoldDeviceReset+0xc>
81107298:	003b68fa 	trap	3
8110729c:	dfc00315 	stw	ra,12(sp)
811072a0:	df000215 	stw	fp,8(sp)
811072a4:	df000204 	addi	fp,sp,8
811072a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliReg = 0;
811072ac:	e03ffe15 	stw	zero,-8(fp)

	uliReg = uliRstReadReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072b0:	01400044 	movi	r5,1
811072b4:	01200034 	movhi	r4,32768
811072b8:	21020004 	addi	r4,r4,2048
811072bc:	11073540 	call	81107354 <uliRstReadReg>
811072c0:	e0bffe15 	stw	r2,-8(fp)
	RSTC_DEVICE_RESET_REG_OFFSET);
	uliReg |= (alt_u32) usiRstMask;
811072c4:	e0fffe17 	ldw	r3,-8(fp)
811072c8:	e0bfff17 	ldw	r2,-4(fp)
811072cc:	1884b03a 	or	r2,r3,r2
811072d0:	e0bffe15 	stw	r2,-8(fp)
	vRstcWriteReg((alt_u32*) RSTC_CONTROLLER_BASE_ADDR,
811072d4:	e1bffe17 	ldw	r6,-8(fp)
811072d8:	01400044 	movi	r5,1
811072dc:	01200034 	movhi	r4,32768
811072e0:	21020004 	addi	r4,r4,2048
811072e4:	11073000 	call	81107300 <vRstcWriteReg>
	RSTC_DEVICE_RESET_REG_OFFSET, uliReg);
}
811072e8:	0001883a 	nop
811072ec:	e037883a 	mov	sp,fp
811072f0:	dfc00117 	ldw	ra,4(sp)
811072f4:	df000017 	ldw	fp,0(sp)
811072f8:	dec00204 	addi	sp,sp,8
811072fc:	f800283a 	ret

81107300 <vRstcWriteReg>:
//! [public functions]

//! [private functions]
static void vRstcWriteReg(alt_u32 *puliAddr, alt_u32 uliOffset,
		alt_u32 uliValue) {
81107300:	defffc04 	addi	sp,sp,-16
81107304:	de00012e 	bgeu	sp,et,8110730c <vRstcWriteReg+0xc>
81107308:	003b68fa 	trap	3
8110730c:	df000315 	stw	fp,12(sp)
81107310:	df000304 	addi	fp,sp,12
81107314:	e13ffd15 	stw	r4,-12(fp)
81107318:	e17ffe15 	stw	r5,-8(fp)
8110731c:	e1bfff15 	stw	r6,-4(fp)
	*(puliAddr + uliOffset) = uliValue;
81107320:	e0bffe17 	ldw	r2,-8(fp)
81107324:	1085883a 	add	r2,r2,r2
81107328:	1085883a 	add	r2,r2,r2
8110732c:	1007883a 	mov	r3,r2
81107330:	e0bffd17 	ldw	r2,-12(fp)
81107334:	10c5883a 	add	r2,r2,r3
81107338:	e0ffff17 	ldw	r3,-4(fp)
8110733c:	10c00015 	stw	r3,0(r2)
}
81107340:	0001883a 	nop
81107344:	e037883a 	mov	sp,fp
81107348:	df000017 	ldw	fp,0(sp)
8110734c:	dec00104 	addi	sp,sp,4
81107350:	f800283a 	ret

81107354 <uliRstReadReg>:

static alt_u32 uliRstReadReg(alt_u32 *puliAddr, alt_u32 uliOffset) {
81107354:	defffc04 	addi	sp,sp,-16
81107358:	de00012e 	bgeu	sp,et,81107360 <uliRstReadReg+0xc>
8110735c:	003b68fa 	trap	3
81107360:	df000315 	stw	fp,12(sp)
81107364:	df000304 	addi	fp,sp,12
81107368:	e13ffe15 	stw	r4,-8(fp)
8110736c:	e17fff15 	stw	r5,-4(fp)
	alt_u32 uliValue;

	uliValue = *(puliAddr + uliOffset);
81107370:	e0bfff17 	ldw	r2,-4(fp)
81107374:	1085883a 	add	r2,r2,r2
81107378:	1085883a 	add	r2,r2,r2
8110737c:	1007883a 	mov	r3,r2
81107380:	e0bffe17 	ldw	r2,-8(fp)
81107384:	10c5883a 	add	r2,r2,r3
81107388:	10800017 	ldw	r2,0(r2)
8110738c:	e0bffd15 	stw	r2,-12(fp)
	return uliValue;
81107390:	e0bffd17 	ldw	r2,-12(fp)
}
81107394:	e037883a 	mov	sp,fp
81107398:	df000017 	ldw	fp,0(sp)
8110739c:	dec00104 	addi	sp,sp,4
811073a0:	f800283a 	ret

811073a4 <v_spi_start>:

#ifdef DEBUG_ON
char cDebugBuffer[256];
#endif

void v_spi_start(void){
811073a4:	defffe04 	addi	sp,sp,-8
811073a8:	de00012e 	bgeu	sp,et,811073b0 <v_spi_start+0xc>
811073ac:	003b68fa 	trap	3
811073b0:	dfc00115 	stw	ra,4(sp)
811073b4:	df000015 	stw	fp,0(sp)
811073b8:	d839883a 	mov	fp,sp
    //Pull CS_n Low to start communication
    SPI_SCK(0);
811073bc:	0007883a 	mov	r3,zero
811073c0:	00a00034 	movhi	r2,32768
811073c4:	10823004 	addi	r2,r2,2240
811073c8:	10c00035 	stwio	r3,0(r2)
    SPI_CS_N(0);
811073cc:	0007883a 	mov	r3,zero
811073d0:	00a00034 	movhi	r2,32768
811073d4:	10822c04 	addi	r2,r2,2224
811073d8:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
811073dc:	01002584 	movi	r4,150
811073e0:	11263140 	call	81126314 <usleep>
}
811073e4:	0001883a 	nop
811073e8:	e037883a 	mov	sp,fp
811073ec:	dfc00117 	ldw	ra,4(sp)
811073f0:	df000017 	ldw	fp,0(sp)
811073f4:	dec00204 	addi	sp,sp,8
811073f8:	f800283a 	ret

811073fc <v_spi_send_byte>:

void v_spi_send_byte(alt_u8 uc_data){
811073fc:	defffc04 	addi	sp,sp,-16
81107400:	de00012e 	bgeu	sp,et,81107408 <v_spi_send_byte+0xc>
81107404:	003b68fa 	trap	3
81107408:	dfc00315 	stw	ra,12(sp)
8110740c:	df000215 	stw	fp,8(sp)
81107410:	df000204 	addi	fp,sp,8
81107414:	2005883a 	mov	r2,r4
81107418:	e0bfff05 	stb	r2,-4(fp)

    alt_u8 i = 0;
8110741c:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_data_mask = 0x80;
81107420:	00bfe004 	movi	r2,-128
81107424:	e0bffe45 	stb	r2,-7(fp)

    for(i=0;i<8;i++)
81107428:	e03ffe05 	stb	zero,-8(fp)
8110742c:	00001b06 	br	8110749c <v_spi_send_byte+0xa0>
    {
        SPI_SDI((uc_data & uc_data_mask)?1:0);
81107430:	e0ffff03 	ldbu	r3,-4(fp)
81107434:	e0bffe43 	ldbu	r2,-7(fp)
81107438:	1884703a 	and	r2,r3,r2
8110743c:	10803fcc 	andi	r2,r2,255
81107440:	1004c03a 	cmpne	r2,r2,zero
81107444:	10c03fcc 	andi	r3,r2,255
81107448:	00a00034 	movhi	r2,32768
8110744c:	10823404 	addi	r2,r2,2256
81107450:	10c00035 	stwio	r3,0(r2)
        uc_data_mask >>= 1;
81107454:	e0bffe43 	ldbu	r2,-7(fp)
81107458:	1004d07a 	srli	r2,r2,1
8110745c:	e0bffe45 	stb	r2,-7(fp)

        SPI_SCK(1);//sck=1; // clock high
81107460:	00c00044 	movi	r3,1
81107464:	00a00034 	movhi	r2,32768
81107468:	10823004 	addi	r2,r2,2240
8110746c:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107470:	01002584 	movi	r4,150
81107474:	11263140 	call	81126314 <usleep>
        SPI_SCK(0);//sck=0; // clock low
81107478:	0007883a 	mov	r3,zero
8110747c:	00a00034 	movhi	r2,32768
81107480:	10823004 	addi	r2,r2,2240
81107484:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107488:	01002584 	movi	r4,150
8110748c:	11263140 	call	81126314 <usleep>
void v_spi_send_byte(alt_u8 uc_data){

    alt_u8 i = 0;
    alt_u8 uc_data_mask = 0x80;

    for(i=0;i<8;i++)
81107490:	e0bffe03 	ldbu	r2,-8(fp)
81107494:	10800044 	addi	r2,r2,1
81107498:	e0bffe05 	stb	r2,-8(fp)
8110749c:	e0bffe03 	ldbu	r2,-8(fp)
811074a0:	10800230 	cmpltui	r2,r2,8
811074a4:	103fe21e 	bne	r2,zero,81107430 <__reset+0xfb0e7430>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

}
811074a8:	0001883a 	nop
811074ac:	e037883a 	mov	sp,fp
811074b0:	dfc00117 	ldw	ra,4(sp)
811074b4:	df000017 	ldw	fp,0(sp)
811074b8:	dec00204 	addi	sp,sp,8
811074bc:	f800283a 	ret

811074c0 <uc_spi_get_byte>:

alt_u8 uc_spi_get_byte(void){
811074c0:	defffd04 	addi	sp,sp,-12
811074c4:	de00012e 	bgeu	sp,et,811074cc <uc_spi_get_byte+0xc>
811074c8:	003b68fa 	trap	3
811074cc:	dfc00215 	stw	ra,8(sp)
811074d0:	df000115 	stw	fp,4(sp)
811074d4:	df000104 	addi	fp,sp,4

    alt_u8 i = 0;
811074d8:	e03fff05 	stb	zero,-4(fp)
    alt_u8 uc_data = 0;
811074dc:	e03fff45 	stb	zero,-3(fp)

    for(i=0;i<8;i++) // read byte
811074e0:	e03fff05 	stb	zero,-4(fp)
811074e4:	00001a06 	br	81107550 <uc_spi_get_byte+0x90>
    {
        uc_data <<= 1;
811074e8:	e0bfff43 	ldbu	r2,-3(fp)
811074ec:	1085883a 	add	r2,r2,r2
811074f0:	e0bfff45 	stb	r2,-3(fp)
        uc_data |= SPI_SDO;
811074f4:	00a00034 	movhi	r2,32768
811074f8:	10823804 	addi	r2,r2,2272
811074fc:	10800037 	ldwio	r2,0(r2)
81107500:	1080004c 	andi	r2,r2,1
81107504:	1007883a 	mov	r3,r2
81107508:	e0bfff43 	ldbu	r2,-3(fp)
8110750c:	1884b03a 	or	r2,r3,r2
81107510:	e0bfff45 	stb	r2,-3(fp)

        SPI_SCK(1);//sck=1; // clock high
81107514:	00c00044 	movi	r3,1
81107518:	00a00034 	movhi	r2,32768
8110751c:	10823004 	addi	r2,r2,2240
81107520:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
81107524:	01002584 	movi	r4,150
81107528:	11263140 	call	81126314 <usleep>
        SPI_SCK(0);//sck=0; // clock low
8110752c:	0007883a 	mov	r3,zero
81107530:	00a00034 	movhi	r2,32768
81107534:	10823004 	addi	r2,r2,2240
81107538:	10c00035 	stwio	r3,0(r2)
        SPI_DELAY;
8110753c:	01002584 	movi	r4,150
81107540:	11263140 	call	81126314 <usleep>
alt_u8 uc_spi_get_byte(void){

    alt_u8 i = 0;
    alt_u8 uc_data = 0;

    for(i=0;i<8;i++) // read byte
81107544:	e0bfff03 	ldbu	r2,-4(fp)
81107548:	10800044 	addi	r2,r2,1
8110754c:	e0bfff05 	stb	r2,-4(fp)
81107550:	e0bfff03 	ldbu	r2,-4(fp)
81107554:	10800230 	cmpltui	r2,r2,8
81107558:	103fe31e 	bne	r2,zero,811074e8 <__reset+0xfb0e74e8>
        SPI_DELAY;
        SPI_SCK(0);//sck=0; // clock low
        SPI_DELAY;
    }

    return uc_data;
8110755c:	e0bfff43 	ldbu	r2,-3(fp)
}
81107560:	e037883a 	mov	sp,fp
81107564:	dfc00117 	ldw	ra,4(sp)
81107568:	df000017 	ldw	fp,0(sp)
8110756c:	dec00204 	addi	sp,sp,8
81107570:	f800283a 	ret

81107574 <v_spi_end>:

void v_spi_end(void){
81107574:	defffe04 	addi	sp,sp,-8
81107578:	de00012e 	bgeu	sp,et,81107580 <v_spi_end+0xc>
8110757c:	003b68fa 	trap	3
81107580:	dfc00115 	stw	ra,4(sp)
81107584:	df000015 	stw	fp,0(sp)
81107588:	d839883a 	mov	fp,sp
    //Set CS_n to end communication
    SPI_SCK(0);
8110758c:	0007883a 	mov	r3,zero
81107590:	00a00034 	movhi	r2,32768
81107594:	10823004 	addi	r2,r2,2240
81107598:	10c00035 	stwio	r3,0(r2)
    SPI_DELAY;
8110759c:	01002584 	movi	r4,150
811075a0:	11263140 	call	81126314 <usleep>
    SPI_CS_N(1);
811075a4:	00c00044 	movi	r3,1
811075a8:	00a00034 	movhi	r2,32768
811075ac:	10822c04 	addi	r2,r2,2224
811075b0:	10c00035 	stwio	r3,0(r2)
}
811075b4:	0001883a 	nop
811075b8:	e037883a 	mov	sp,fp
811075bc:	dfc00117 	ldw	ra,4(sp)
811075c0:	df000017 	ldw	fp,0(sp)
811075c4:	dec00204 	addi	sp,sp,8
811075c8:	f800283a 	ret

811075cc <RTCC_SPI_R_MAC>:

// Note. SCK: typical 19.2KHZ (53 ms)
bool RTCC_SPI_R_MAC(alt_u8 uc_EUI48_array[6])
{
811075cc:	defff604 	addi	sp,sp,-40
811075d0:	de00012e 	bgeu	sp,et,811075d8 <RTCC_SPI_R_MAC+0xc>
811075d4:	003b68fa 	trap	3
811075d8:	dfc00915 	stw	ra,36(sp)
811075dc:	df000815 	stw	fp,32(sp)
811075e0:	df000804 	addi	fp,sp,32
811075e4:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
811075e8:	e03ffc15 	stw	zero,-16(fp)

    alt_u8 uc_EUI48_B0 = 0;
811075ec:	e03ffd05 	stb	zero,-12(fp)
    alt_u8 uc_EUI48_B1 = 0;
811075f0:	e03ffd45 	stb	zero,-11(fp)
    alt_u8 uc_EUI48_B2 = 0;
811075f4:	e03ffd85 	stb	zero,-10(fp)
    alt_u8 uc_EUI48_B3 = 0;
811075f8:	e03ffdc5 	stb	zero,-9(fp)
    alt_u8 uc_EUI48_B4 = 0;
811075fc:	e03ffe05 	stb	zero,-8(fp)
    alt_u8 uc_EUI48_B5 = 0;
81107600:	e03ffe45 	stb	zero,-7(fp)

//    alt_u8 uc_sdi_mask;

    const alt_u8 uc_EUI48_B0_addr = 0x02;
81107604:	00800084 	movi	r2,2
81107608:	e0bffe85 	stb	r2,-6(fp)
//    const alt_u8 uc_EUI48_B2_addr = 0x04;
//    const alt_u8 uc_EUI48_B3_addr = 0x05;
//    const alt_u8 uc_EUI48_B4_addr = 0x06;
//    const alt_u8 uc_EUI48_B5_addr = 0x07;

    const alt_u8 uc_IDREAD_cmd = 0x33;
8110760c:	00800cc4 	movi	r2,51
81107610:	e0bffec5 	stb	r2,-5(fp)

//    int i = 0;
    
    // Start Communication
    v_spi_start();
81107614:	11073a40 	call	811073a4 <v_spi_start>

    //Send IDREAD (0011 0011)
    v_spi_send_byte(uc_IDREAD_cmd);
81107618:	e0bffec3 	ldbu	r2,-5(fp)
8110761c:	1009883a 	mov	r4,r2
81107620:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Send Address (0x02 - 0x07)
    v_spi_send_byte(uc_EUI48_B0_addr);
81107624:	e0bffe83 	ldbu	r2,-6(fp)
81107628:	1009883a 	mov	r4,r2
8110762c:	11073fc0 	call	811073fc <v_spi_send_byte>

    //Read MAC (EUI-48, 6 bytes)
    uc_EUI48_B0 = uc_spi_get_byte();
81107630:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107634:	e0bffd05 	stb	r2,-12(fp)
    uc_EUI48_B1 = uc_spi_get_byte();
81107638:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110763c:	e0bffd45 	stb	r2,-11(fp)
    uc_EUI48_B2 = uc_spi_get_byte();
81107640:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107644:	e0bffd85 	stb	r2,-10(fp)
    uc_EUI48_B3 = uc_spi_get_byte();
81107648:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110764c:	e0bffdc5 	stb	r2,-9(fp)
    uc_EUI48_B4 = uc_spi_get_byte();
81107650:	11074c00 	call	811074c0 <uc_spi_get_byte>
81107654:	e0bffe05 	stb	r2,-8(fp)
    uc_EUI48_B5 = uc_spi_get_byte();
81107658:	11074c00 	call	811074c0 <uc_spi_get_byte>
8110765c:	e0bffe45 	stb	r2,-7(fp)

    // End communication
    v_spi_end();
81107660:	11075740 	call	81107574 <v_spi_end>

    bSuccess = TRUE;
81107664:	00800044 	movi	r2,1
81107668:	e0bffc15 	stw	r2,-16(fp)
    
    uc_EUI48_array[0] = uc_EUI48_B0;
8110766c:	e0bfff17 	ldw	r2,-4(fp)
81107670:	e0fffd03 	ldbu	r3,-12(fp)
81107674:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[1] = uc_EUI48_B1;
81107678:	e0bfff17 	ldw	r2,-4(fp)
8110767c:	10800044 	addi	r2,r2,1
81107680:	e0fffd43 	ldbu	r3,-11(fp)
81107684:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[2] = uc_EUI48_B2;
81107688:	e0bfff17 	ldw	r2,-4(fp)
8110768c:	10800084 	addi	r2,r2,2
81107690:	e0fffd83 	ldbu	r3,-10(fp)
81107694:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[3] = uc_EUI48_B3;
81107698:	e0bfff17 	ldw	r2,-4(fp)
8110769c:	108000c4 	addi	r2,r2,3
811076a0:	e0fffdc3 	ldbu	r3,-9(fp)
811076a4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[4] = uc_EUI48_B4;
811076a8:	e0bfff17 	ldw	r2,-4(fp)
811076ac:	10800104 	addi	r2,r2,4
811076b0:	e0fffe03 	ldbu	r3,-8(fp)
811076b4:	10c00005 	stb	r3,0(r2)
    uc_EUI48_array[5] = uc_EUI48_B5;
811076b8:	e0bfff17 	ldw	r2,-4(fp)
811076bc:	10800144 	addi	r2,r2,5
811076c0:	e0fffe43 	ldbu	r3,-7(fp)
811076c4:	10c00005 	stb	r3,0(r2)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "RTCC EUI-48 MAC Address: 0x%02x:%02x:%02x:%02x:%02x:%02x \n", uc_EUI48_B0, uc_EUI48_B1, uc_EUI48_B2, uc_EUI48_B3, uc_EUI48_B4, uc_EUI48_B5);
811076c8:	e1bffd03 	ldbu	r6,-12(fp)
811076cc:	e1fffd43 	ldbu	r7,-11(fp)
811076d0:	e0bffd83 	ldbu	r2,-10(fp)
811076d4:	e0fffdc3 	ldbu	r3,-9(fp)
811076d8:	e13ffe03 	ldbu	r4,-8(fp)
811076dc:	e17ffe43 	ldbu	r5,-7(fp)
811076e0:	d9400315 	stw	r5,12(sp)
811076e4:	d9000215 	stw	r4,8(sp)
811076e8:	d8c00115 	stw	r3,4(sp)
811076ec:	d8800015 	stw	r2,0(sp)
811076f0:	01604534 	movhi	r5,33044
811076f4:	296b6704 	addi	r5,r5,-21092
811076f8:	01204534 	movhi	r4,33044
811076fc:	213acb04 	addi	r4,r4,-5332
81107700:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
81107704:	d0a04d17 	ldw	r2,-32460(gp)
81107708:	01604534 	movhi	r5,33044
8110770c:	297acb04 	addi	r5,r5,-5332
81107710:	1009883a 	mov	r4,r2
81107714:	110fe4c0 	call	8110fe4c <fprintf>
#endif

    return bSuccess;
81107718:	e0bffc17 	ldw	r2,-16(fp)
}
8110771c:	e037883a 	mov	sp,fp
81107720:	dfc00117 	ldw	ra,4(sp)
81107724:	df000017 	ldw	fp,0(sp)
81107728:	dec00204 	addi	sp,sp,8
8110772c:	f800283a 	ret

81107730 <bSSDisplayConfig>:
 *
 * @retval TRUE : Sucesso
 * @retval FALSE : Configuração não especificada
 *
 */
bool bSSDisplayConfig(alt_u8 SsdpConfig){
81107730:	defffd04 	addi	sp,sp,-12
81107734:	de00012e 	bgeu	sp,et,8110773c <bSSDisplayConfig+0xc>
81107738:	003b68fa 	trap	3
8110773c:	df000215 	stw	fp,8(sp)
81107740:	df000204 	addi	fp,sp,8
81107744:	2005883a 	mov	r2,r4
81107748:	e0bfff05 	stb	r2,-4(fp)

    switch(SsdpConfig){
8110774c:	e0bfff03 	ldbu	r2,-4(fp)
81107750:	10c00168 	cmpgeui	r3,r2,5
81107754:	18001c1e 	bne	r3,zero,811077c8 <bSSDisplayConfig+0x98>
81107758:	100690ba 	slli	r3,r2,2
8110775c:	00a04434 	movhi	r2,33040
81107760:	109ddc04 	addi	r2,r2,30576
81107764:	1885883a 	add	r2,r3,r2
81107768:	10800017 	ldw	r2,0(r2)
8110776c:	1000683a 	jmp	r2
81107770:	81107784 	addi	r4,r16,16862
81107774:	81107790 	cmplti	r4,r16,16862
81107778:	8110779c 	xori	r4,r16,16862
8110777c:	811077b0 	cmpltui	r4,r16,16862
81107780:	811077c0 	call	8811077c <__reset+0x20f077c>
	    case SSDP_NORMAL_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_UNLOCK_MASK);
81107784:	00800cc4 	movi	r2,51
81107788:	d0a04545 	stb	r2,-32491(gp)
	    break;
8110778c:	00001006 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_TEST_MODE:
	        SspdConfigControl = (SSDP_ON_MASK | SSDP_TEST_MASK);
81107790:	00801544 	movi	r2,85
81107794:	d0a04545 	stb	r2,-32491(gp)
	    break;
81107798:	00000d06 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_LOCK:
	        SspdConfigControl &= (~SSDP_UNLOCK_MASK);
8110779c:	d0e04543 	ldbu	r3,-32491(gp)
811077a0:	00bff744 	movi	r2,-35
811077a4:	1884703a 	and	r2,r3,r2
811077a8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077ac:	00000806 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_UNLOCK:
	        SspdConfigControl |= SSDP_UNLOCK_MASK;
811077b0:	d0a04543 	ldbu	r2,-32491(gp)
811077b4:	10800894 	ori	r2,r2,34
811077b8:	d0a04545 	stb	r2,-32491(gp)
	    break;
811077bc:	00000406 	br	811077d0 <bSSDisplayConfig+0xa0>
		
	    case SSDP_OFF:
	        SspdConfigControl = SSDP_OFF_MASK;
811077c0:	d0204545 	stb	zero,-32491(gp)
	    break;
811077c4:	00000206 	br	811077d0 <bSSDisplayConfig+0xa0>
		
		default:
		    return FALSE;
811077c8:	0005883a 	mov	r2,zero
811077cc:	00000806 	br	811077f0 <bSSDisplayConfig+0xc0>
	}

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
811077d0:	00a00034 	movhi	r2,32768
811077d4:	10828404 	addi	r2,r2,2576
811077d8:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_CONTROL_REG_OFFSET) = (alt_u32) SspdConfigControl;
811077dc:	d0a04543 	ldbu	r2,-32491(gp)
811077e0:	10c03fcc 	andi	r3,r2,255
811077e4:	e0bffe17 	ldw	r2,-8(fp)
811077e8:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
811077ec:	00800044 	movi	r2,1
}
811077f0:	e037883a 	mov	sp,fp
811077f4:	df000017 	ldw	fp,0(sp)
811077f8:	dec00104 	addi	sp,sp,4
811077fc:	f800283a 	ret

81107800 <bSSDisplayUpdate>:
 * @param [in] SsdpData Dado a ser colocado no display de sete segmentos, do tipo unsigned char (alt_u8)
 *
 * @retval TRUE : Sucesso
 *
 */
bool bSSDisplayUpdate(alt_u8 SsdpData){
81107800:	defffd04 	addi	sp,sp,-12
81107804:	de00012e 	bgeu	sp,et,8110780c <bSSDisplayUpdate+0xc>
81107808:	003b68fa 	trap	3
8110780c:	df000215 	stw	fp,8(sp)
81107810:	df000204 	addi	fp,sp,8
81107814:	2005883a 	mov	r2,r4
81107818:	e0bfff05 	stb	r2,-4(fp)

	alt_u32 *pSsdpAddr = (alt_u32 *)SSDP_BASE;
8110781c:	00a00034 	movhi	r2,32768
81107820:	10828404 	addi	r2,r2,2576
81107824:	e0bffe15 	stw	r2,-8(fp)
	*(pSsdpAddr + SSDP_DATA_REG_OFFSET) = (alt_u32) SsdpData;
81107828:	e0bffe17 	ldw	r2,-8(fp)
8110782c:	10800104 	addi	r2,r2,4
81107830:	e0ffff03 	ldbu	r3,-4(fp)
81107834:	10c00015 	stw	r3,0(r2)
	
	return TRUE;
81107838:	00800044 	movi	r2,1
}
8110783c:	e037883a 	mov	sp,fp
81107840:	df000017 	ldw	fp,0(sp)
81107844:	dec00104 	addi	sp,sp,4
81107848:	f800283a 	ret

8110784c <vSyncHandleIrq>:
 *
 * @param [in] void* context
 *
 * @retval void
 */
void vSyncHandleIrq(void* pvContext) {
8110784c:	defffd04 	addi	sp,sp,-12
81107850:	de00012e 	bgeu	sp,et,81107858 <vSyncHandleIrq+0xc>
81107854:	003b68fa 	trap	3
81107858:	df000215 	stw	fp,8(sp)
8110785c:	df000204 	addi	fp,sp,8
81107860:	e13fff15 	stw	r4,-4(fp)
	// Cast pvContext to viHoldContext's type. It is important that this be
	// declared volatile to avoid unwanted compiler optimization.
	volatile int* pviHoldContext = (volatile int*) pvContext;
81107864:	e0bfff17 	ldw	r2,-4(fp)
81107868:	e0bffe15 	stw	r2,-8(fp)
	// Use pvContext value according to your app logic...
	//*pviHoldContext = ...;
	// if (*pviHoldContext == '0') {}...
	// App logic sequence...
	vucN += 1;
8110786c:	d0a04703 	ldbu	r2,-32484(gp)
81107870:	10800044 	addi	r2,r2,1
81107874:	d0a04705 	stb	r2,-32484(gp)
}
81107878:	0001883a 	nop
8110787c:	e037883a 	mov	sp,fp
81107880:	df000017 	ldw	fp,0(sp)
81107884:	dec00104 	addi	sp,sp,4
81107888:	f800283a 	ret

8110788c <vSyncInitIrq>:
 *
 * @param [in] void
 *
 * @retval void
 */
void vSyncInitIrq(void) {
8110788c:	defffd04 	addi	sp,sp,-12
81107890:	de00012e 	bgeu	sp,et,81107898 <vSyncInitIrq+0xc>
81107894:	003b68fa 	trap	3
81107898:	dfc00215 	stw	ra,8(sp)
8110789c:	df000115 	stw	fp,4(sp)
811078a0:	df000104 	addi	fp,sp,4
	// Recast the viHoldContext pointer to match the alt_irq_register() function
	// prototype.
	void* hold_context_ptr = (void*) &viHoldContext;
811078a4:	d0a04604 	addi	r2,gp,-32488
811078a8:	e0bfff15 	stw	r2,-4(fp)
	// Register the interrupt handler
	alt_irq_register(SYNC_IRQ, hold_context_ptr, vSyncHandleIrq);
811078ac:	01a04434 	movhi	r6,33040
811078b0:	319e1304 	addi	r6,r6,30796
811078b4:	e17fff17 	ldw	r5,-4(fp)
811078b8:	01000284 	movi	r4,10
811078bc:	11257e80 	call	811257e8 <alt_irq_register>
}
811078c0:	0001883a 	nop
811078c4:	e037883a 	mov	sp,fp
811078c8:	dfc00117 	ldw	ra,4(sp)
811078cc:	df000017 	ldw	fp,0(sp)
811078d0:	dec00204 	addi	sp,sp,8
811078d4:	f800283a 	ret

811078d8 <bSyncStatusExtnIrq>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncStatusExtnIrq(void) {
811078d8:	defffc04 	addi	sp,sp,-16
811078dc:	de00012e 	bgeu	sp,et,811078e4 <bSyncStatusExtnIrq+0xc>
811078e0:	003b68fa 	trap	3
811078e4:	dfc00315 	stw	ra,12(sp)
811078e8:	df000215 	stw	fp,8(sp)
811078ec:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811078f0:	0009883a 	mov	r4,zero
811078f4:	11086880 	call	81108688 <uliSyncReadReg>
811078f8:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_STAT_EXTN_IRQ_MSK) {
811078fc:	e0bfff17 	ldw	r2,-4(fp)
81107900:	1000030e 	bge	r2,zero,81107910 <bSyncStatusExtnIrq+0x38>
		bResult = TRUE;
81107904:	00800044 	movi	r2,1
81107908:	e0bffe15 	stw	r2,-8(fp)
8110790c:	00000106 	br	81107914 <bSyncStatusExtnIrq+0x3c>
	} else {
		bResult = FALSE;
81107910:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81107914:	e0bffe17 	ldw	r2,-8(fp)
}
81107918:	e037883a 	mov	sp,fp
8110791c:	dfc00117 	ldw	ra,4(sp)
81107920:	df000017 	ldw	fp,0(sp)
81107924:	dec00204 	addi	sp,sp,8
81107928:	f800283a 	ret

8110792c <ucSyncStatusState>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusState(void) {
8110792c:	defffc04 	addi	sp,sp,-16
81107930:	de00012e 	bgeu	sp,et,81107938 <ucSyncStatusState+0xc>
81107934:	003b68fa 	trap	3
81107938:	dfc00315 	stw	ra,12(sp)
8110793c:	df000215 	stw	fp,8(sp)
81107940:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107944:	0009883a 	mov	r4,zero
81107948:	11086880 	call	81108688 <uliSyncReadReg>
8110794c:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_STATE_MSK) >> 16);
81107950:	e0bffe17 	ldw	r2,-8(fp)
81107954:	10803fec 	andhi	r2,r2,255
81107958:	1004d43a 	srli	r2,r2,16
8110795c:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
81107960:	e0bfff03 	ldbu	r2,-4(fp)
}
81107964:	e037883a 	mov	sp,fp
81107968:	dfc00117 	ldw	ra,4(sp)
8110796c:	df000017 	ldw	fp,0(sp)
81107970:	dec00204 	addi	sp,sp,8
81107974:	f800283a 	ret

81107978 <ucSyncStatusErrorCode>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusErrorCode(void) {
81107978:	defffc04 	addi	sp,sp,-16
8110797c:	de00012e 	bgeu	sp,et,81107984 <ucSyncStatusErrorCode+0xc>
81107980:	003b68fa 	trap	3
81107984:	dfc00315 	stw	ra,12(sp)
81107988:	df000215 	stw	fp,8(sp)
8110798c:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81107990:	0009883a 	mov	r4,zero
81107994:	11086880 	call	81108688 <uliSyncReadReg>
81107998:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_ERROR_CODE_MSK) >> 8);
8110799c:	e0bffe17 	ldw	r2,-8(fp)
811079a0:	10bfc00c 	andi	r2,r2,65280
811079a4:	1004d23a 	srli	r2,r2,8
811079a8:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079ac:	e0bfff03 	ldbu	r2,-4(fp)
}
811079b0:	e037883a 	mov	sp,fp
811079b4:	dfc00117 	ldw	ra,4(sp)
811079b8:	df000017 	ldw	fp,0(sp)
811079bc:	dec00204 	addi	sp,sp,8
811079c0:	f800283a 	ret

811079c4 <ucSyncStatusCycleNumber>:
 *
 * @param [in] void
 *
 * @retval alt_u8 result
 */
alt_u8 ucSyncStatusCycleNumber(void) {
811079c4:	defffc04 	addi	sp,sp,-16
811079c8:	de00012e 	bgeu	sp,et,811079d0 <ucSyncStatusCycleNumber+0xc>
811079cc:	003b68fa 	trap	3
811079d0:	dfc00315 	stw	ra,12(sp)
811079d4:	df000215 	stw	fp,8(sp)
811079d8:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	alt_u8 ucResult;

	uliAux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
811079dc:	0009883a 	mov	r4,zero
811079e0:	11086880 	call	81108688 <uliSyncReadReg>
811079e4:	e0bffe15 	stw	r2,-8(fp)
	ucResult = (alt_u8) ((uliAux & SYNC_STAT_CYCLE_NUMBER_MSK) >> 0);
811079e8:	e0bffe17 	ldw	r2,-8(fp)
811079ec:	e0bfff05 	stb	r2,-4(fp)
	return ucResult;
811079f0:	e0bfff03 	ldbu	r2,-4(fp)
}
811079f4:	e037883a 	mov	sp,fp
811079f8:	dfc00117 	ldw	ra,4(sp)
811079fc:	df000017 	ldw	fp,0(sp)
81107a00:	dec00204 	addi	sp,sp,8
81107a04:	f800283a 	ret

81107a08 <bSyncSetMbt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetMbt(alt_u32 uliValue) {
81107a08:	defffd04 	addi	sp,sp,-12
81107a0c:	de00012e 	bgeu	sp,et,81107a14 <bSyncSetMbt+0xc>
81107a10:	003b68fa 	trap	3
81107a14:	dfc00215 	stw	ra,8(sp)
81107a18:	df000115 	stw	fp,4(sp)
81107a1c:	df000104 	addi	fp,sp,4
81107a20:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_MBT_REG_OFFSET, uliValue);
81107a24:	e17fff17 	ldw	r5,-4(fp)
81107a28:	01000104 	movi	r4,4
81107a2c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a30:	00800044 	movi	r2,1
}
81107a34:	e037883a 	mov	sp,fp
81107a38:	dfc00117 	ldw	ra,4(sp)
81107a3c:	df000017 	ldw	fp,0(sp)
81107a40:	dec00204 	addi	sp,sp,8
81107a44:	f800283a 	ret

81107a48 <bSyncSetBt>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetBt(alt_u32 uliValue) {
81107a48:	defffd04 	addi	sp,sp,-12
81107a4c:	de00012e 	bgeu	sp,et,81107a54 <bSyncSetBt+0xc>
81107a50:	003b68fa 	trap	3
81107a54:	dfc00215 	stw	ra,8(sp)
81107a58:	df000115 	stw	fp,4(sp)
81107a5c:	df000104 	addi	fp,sp,4
81107a60:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_BT_REG_OFFSET, uliValue);
81107a64:	e17fff17 	ldw	r5,-4(fp)
81107a68:	01000144 	movi	r4,5
81107a6c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107a70:	00800044 	movi	r2,1
}
81107a74:	e037883a 	mov	sp,fp
81107a78:	dfc00117 	ldw	ra,4(sp)
81107a7c:	df000017 	ldw	fp,0(sp)
81107a80:	dec00204 	addi	sp,sp,8
81107a84:	f800283a 	ret

81107a88 <bSyncSetPer>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetPer(alt_u32 uliValue) {
81107a88:	defffd04 	addi	sp,sp,-12
81107a8c:	de00012e 	bgeu	sp,et,81107a94 <bSyncSetPer+0xc>
81107a90:	003b68fa 	trap	3
81107a94:	dfc00215 	stw	ra,8(sp)
81107a98:	df000115 	stw	fp,4(sp)
81107a9c:	df000104 	addi	fp,sp,4
81107aa0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_PER_REG_OFFSET, uliValue);
81107aa4:	e17fff17 	ldw	r5,-4(fp)
81107aa8:	01000184 	movi	r4,6
81107aac:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ab0:	00800044 	movi	r2,1
}
81107ab4:	e037883a 	mov	sp,fp
81107ab8:	dfc00117 	ldw	ra,4(sp)
81107abc:	df000017 	ldw	fp,0(sp)
81107ac0:	dec00204 	addi	sp,sp,8
81107ac4:	f800283a 	ret

81107ac8 <bSyncSetOst>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncSetOst(alt_u32 uliValue) {
81107ac8:	defffd04 	addi	sp,sp,-12
81107acc:	de00012e 	bgeu	sp,et,81107ad4 <bSyncSetOst+0xc>
81107ad0:	003b68fa 	trap	3
81107ad4:	dfc00215 	stw	ra,8(sp)
81107ad8:	df000115 	stw	fp,4(sp)
81107adc:	df000104 	addi	fp,sp,4
81107ae0:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_CONFIG_OST_REG_OFFSET, uliValue);
81107ae4:	e17fff17 	ldw	r5,-4(fp)
81107ae8:	010001c4 	movi	r4,7
81107aec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107af0:	00800044 	movi	r2,1
}
81107af4:	e037883a 	mov	sp,fp
81107af8:	dfc00117 	ldw	ra,4(sp)
81107afc:	df000017 	ldw	fp,0(sp)
81107b00:	dec00204 	addi	sp,sp,8
81107b04:	f800283a 	ret

81107b08 <bSyncSetPolarity>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncSetPolarity(bool bValue) {
81107b08:	defffc04 	addi	sp,sp,-16
81107b0c:	de00012e 	bgeu	sp,et,81107b14 <bSyncSetPolarity+0xc>
81107b10:	003b68fa 	trap	3
81107b14:	dfc00315 	stw	ra,12(sp)
81107b18:	df000215 	stw	fp,8(sp)
81107b1c:	df000204 	addi	fp,sp,8
81107b20:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b24:	01000204 	movi	r4,8
81107b28:	11086880 	call	81108688 <uliSyncReadReg>
81107b2c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107b30:	e0bfff17 	ldw	r2,-4(fp)
81107b34:	1000051e 	bne	r2,zero,81107b4c <bSyncSetPolarity+0x44>
		uliAux &= ~SYNC_CONFIG_GEN_POLARITY_MSK;
81107b38:	e0fffe17 	ldw	r3,-8(fp)
81107b3c:	00bfbfc4 	movi	r2,-257
81107b40:	1884703a 	and	r2,r3,r2
81107b44:	e0bffe15 	stw	r2,-8(fp)
81107b48:	00000306 	br	81107b58 <bSyncSetPolarity+0x50>
	} else {
		uliAux |= SYNC_CONFIG_GEN_POLARITY_MSK;
81107b4c:	e0bffe17 	ldw	r2,-8(fp)
81107b50:	10804014 	ori	r2,r2,256
81107b54:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107b58:	e17ffe17 	ldw	r5,-8(fp)
81107b5c:	01000204 	movi	r4,8
81107b60:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107b64:	00800044 	movi	r2,1
}
81107b68:	e037883a 	mov	sp,fp
81107b6c:	dfc00117 	ldw	ra,4(sp)
81107b70:	df000017 	ldw	fp,0(sp)
81107b74:	dec00204 	addi	sp,sp,8
81107b78:	f800283a 	ret

81107b7c <bSyncSetNCycles>:
 *
 * @param [in] alt_u8 value
 *
 * @retval bool TRUE
 */
bool bSyncSetNCycles(alt_u8 ucValue) {
81107b7c:	defffc04 	addi	sp,sp,-16
81107b80:	de00012e 	bgeu	sp,et,81107b88 <bSyncSetNCycles+0xc>
81107b84:	003b68fa 	trap	3
81107b88:	dfc00315 	stw	ra,12(sp)
81107b8c:	df000215 	stw	fp,8(sp)
81107b90:	df000204 	addi	fp,sp,8
81107b94:	2005883a 	mov	r2,r4
81107b98:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107b9c:	01000204 	movi	r4,8
81107ba0:	11086880 	call	81108688 <uliSyncReadReg>
81107ba4:	e0bffe15 	stw	r2,-8(fp)
	uliAux &= ~SYNC_CONFIG_GEN_N_CYCLES_MSK;
81107ba8:	e0fffe17 	ldw	r3,-8(fp)
81107bac:	00bfc004 	movi	r2,-256
81107bb0:	1884703a 	and	r2,r3,r2
81107bb4:	e0bffe15 	stw	r2,-8(fp)
	uliAux |= (alt_u32) ucValue;
81107bb8:	e0bfff03 	ldbu	r2,-4(fp)
81107bbc:	e0fffe17 	ldw	r3,-8(fp)
81107bc0:	1884b03a 	or	r2,r3,r2
81107bc4:	e0bffe15 	stw	r2,-8(fp)

	bSyncWriteReg(SYNC_CONFIG_GENERAL_REG_OFFSET, uliAux);
81107bc8:	e17ffe17 	ldw	r5,-8(fp)
81107bcc:	01000204 	movi	r4,8
81107bd0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107bd4:	00800044 	movi	r2,1
}
81107bd8:	e037883a 	mov	sp,fp
81107bdc:	dfc00117 	ldw	ra,4(sp)
81107be0:	df000017 	ldw	fp,0(sp)
81107be4:	dec00204 	addi	sp,sp,8
81107be8:	f800283a 	ret

81107bec <uliSyncGetMbt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetMbt(void) {
81107bec:	defffd04 	addi	sp,sp,-12
81107bf0:	de00012e 	bgeu	sp,et,81107bf8 <uliSyncGetMbt+0xc>
81107bf4:	003b68fa 	trap	3
81107bf8:	dfc00215 	stw	ra,8(sp)
81107bfc:	df000115 	stw	fp,4(sp)
81107c00:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_MBT_REG_OFFSET);
81107c04:	01000104 	movi	r4,4
81107c08:	11086880 	call	81108688 <uliSyncReadReg>
81107c0c:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c10:	e0bfff17 	ldw	r2,-4(fp)
}
81107c14:	e037883a 	mov	sp,fp
81107c18:	dfc00117 	ldw	ra,4(sp)
81107c1c:	df000017 	ldw	fp,0(sp)
81107c20:	dec00204 	addi	sp,sp,8
81107c24:	f800283a 	ret

81107c28 <uliSyncGetBt>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetBt(void) {
81107c28:	defffd04 	addi	sp,sp,-12
81107c2c:	de00012e 	bgeu	sp,et,81107c34 <uliSyncGetBt+0xc>
81107c30:	003b68fa 	trap	3
81107c34:	dfc00215 	stw	ra,8(sp)
81107c38:	df000115 	stw	fp,4(sp)
81107c3c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_BT_REG_OFFSET);
81107c40:	01000144 	movi	r4,5
81107c44:	11086880 	call	81108688 <uliSyncReadReg>
81107c48:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c4c:	e0bfff17 	ldw	r2,-4(fp)
}
81107c50:	e037883a 	mov	sp,fp
81107c54:	dfc00117 	ldw	ra,4(sp)
81107c58:	df000017 	ldw	fp,0(sp)
81107c5c:	dec00204 	addi	sp,sp,8
81107c60:	f800283a 	ret

81107c64 <uliSyncGetPer>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetPer(void) {
81107c64:	defffd04 	addi	sp,sp,-12
81107c68:	de00012e 	bgeu	sp,et,81107c70 <uliSyncGetPer+0xc>
81107c6c:	003b68fa 	trap	3
81107c70:	dfc00215 	stw	ra,8(sp)
81107c74:	df000115 	stw	fp,4(sp)
81107c78:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_PER_REG_OFFSET);
81107c7c:	01000184 	movi	r4,6
81107c80:	11086880 	call	81108688 <uliSyncReadReg>
81107c84:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107c88:	e0bfff17 	ldw	r2,-4(fp)
}
81107c8c:	e037883a 	mov	sp,fp
81107c90:	dfc00117 	ldw	ra,4(sp)
81107c94:	df000017 	ldw	fp,0(sp)
81107c98:	dec00204 	addi	sp,sp,8
81107c9c:	f800283a 	ret

81107ca0 <uliSyncGetOst>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetOst(void) {
81107ca0:	defffd04 	addi	sp,sp,-12
81107ca4:	de00012e 	bgeu	sp,et,81107cac <uliSyncGetOst+0xc>
81107ca8:	003b68fa 	trap	3
81107cac:	dfc00215 	stw	ra,8(sp)
81107cb0:	df000115 	stw	fp,4(sp)
81107cb4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_OST_REG_OFFSET);
81107cb8:	010001c4 	movi	r4,7
81107cbc:	11086880 	call	81108688 <uliSyncReadReg>
81107cc0:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107cc4:	e0bfff17 	ldw	r2,-4(fp)
}
81107cc8:	e037883a 	mov	sp,fp
81107ccc:	dfc00117 	ldw	ra,4(sp)
81107cd0:	df000017 	ldw	fp,0(sp)
81107cd4:	dec00204 	addi	sp,sp,8
81107cd8:	f800283a 	ret

81107cdc <uliSyncGetGeneral>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetGeneral(void) {
81107cdc:	defffd04 	addi	sp,sp,-12
81107ce0:	de00012e 	bgeu	sp,et,81107ce8 <uliSyncGetGeneral+0xc>
81107ce4:	003b68fa 	trap	3
81107ce8:	dfc00215 	stw	ra,8(sp)
81107cec:	df000115 	stw	fp,4(sp)
81107cf0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CONFIG_GENERAL_REG_OFFSET);
81107cf4:	01000204 	movi	r4,8
81107cf8:	11086880 	call	81108688 <uliSyncReadReg>
81107cfc:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
81107d00:	e0bfff17 	ldw	r2,-4(fp)
}
81107d04:	e037883a 	mov	sp,fp
81107d08:	dfc00117 	ldw	ra,4(sp)
81107d0c:	df000017 	ldw	fp,0(sp)
81107d10:	dec00204 	addi	sp,sp,8
81107d14:	f800283a 	ret

81107d18 <bSyncErrInj>:
 *
 * @param [in] alt_u32 value
 *
 * @retval bool TRUE
 */
bool bSyncErrInj(alt_u32 uliValue) {
81107d18:	defffd04 	addi	sp,sp,-12
81107d1c:	de00012e 	bgeu	sp,et,81107d24 <bSyncErrInj+0xc>
81107d20:	003b68fa 	trap	3
81107d24:	dfc00215 	stw	ra,8(sp)
81107d28:	df000115 	stw	fp,4(sp)
81107d2c:	df000104 	addi	fp,sp,4
81107d30:	e13fff15 	stw	r4,-4(fp)
	bSyncWriteReg(SYNC_ERR_INJ_REG_OFFSET, uliValue);
81107d34:	e17fff17 	ldw	r5,-4(fp)
81107d38:	01000244 	movi	r4,9
81107d3c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107d40:	00800044 	movi	r2,1
}
81107d44:	e037883a 	mov	sp,fp
81107d48:	dfc00117 	ldw	ra,4(sp)
81107d4c:	df000017 	ldw	fp,0(sp)
81107d50:	dec00204 	addi	sp,sp,8
81107d54:	f800283a 	ret

81107d58 <bSyncCtrExtnIrq>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrExtnIrq(bool bValue) {
81107d58:	defffc04 	addi	sp,sp,-16
81107d5c:	de00012e 	bgeu	sp,et,81107d64 <bSyncCtrExtnIrq+0xc>
81107d60:	003b68fa 	trap	3
81107d64:	dfc00315 	stw	ra,12(sp)
81107d68:	df000215 	stw	fp,8(sp)
81107d6c:	df000204 	addi	fp,sp,8
81107d70:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107d74:	01000284 	movi	r4,10
81107d78:	11086880 	call	81108688 <uliSyncReadReg>
81107d7c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107d80:	e0bfff17 	ldw	r2,-4(fp)
81107d84:	1000061e 	bne	r2,zero,81107da0 <bSyncCtrExtnIrq+0x48>
		uliAux &= ~SYNC_CTR_EXTN_INT_MSK;
81107d88:	e0fffe17 	ldw	r3,-8(fp)
81107d8c:	00a00034 	movhi	r2,32768
81107d90:	10bfffc4 	addi	r2,r2,-1
81107d94:	1884703a 	and	r2,r3,r2
81107d98:	e0bffe15 	stw	r2,-8(fp)
81107d9c:	00000306 	br	81107dac <bSyncCtrExtnIrq+0x54>
	} else {
		uliAux |= SYNC_CTR_EXTN_INT_MSK;
81107da0:	e0bffe17 	ldw	r2,-8(fp)
81107da4:	10a00034 	orhi	r2,r2,32768
81107da8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107dac:	e17ffe17 	ldw	r5,-8(fp)
81107db0:	01000284 	movi	r4,10
81107db4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107db8:	00800044 	movi	r2,1
}
81107dbc:	e037883a 	mov	sp,fp
81107dc0:	dfc00117 	ldw	ra,4(sp)
81107dc4:	df000017 	ldw	fp,0(sp)
81107dc8:	dec00204 	addi	sp,sp,8
81107dcc:	f800283a 	ret

81107dd0 <bSyncCtrStart>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrStart(void) {
81107dd0:	defffd04 	addi	sp,sp,-12
81107dd4:	de00012e 	bgeu	sp,et,81107ddc <bSyncCtrStart+0xc>
81107dd8:	003b68fa 	trap	3
81107ddc:	dfc00215 	stw	ra,8(sp)
81107de0:	df000115 	stw	fp,4(sp)
81107de4:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107de8:	01000284 	movi	r4,10
81107dec:	11086880 	call	81108688 <uliSyncReadReg>
81107df0:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_START_MSK;
81107df4:	e0bfff17 	ldw	r2,-4(fp)
81107df8:	10800234 	orhi	r2,r2,8
81107dfc:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e00:	e17fff17 	ldw	r5,-4(fp)
81107e04:	01000284 	movi	r4,10
81107e08:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e0c:	00800044 	movi	r2,1
}
81107e10:	e037883a 	mov	sp,fp
81107e14:	dfc00117 	ldw	ra,4(sp)
81107e18:	df000017 	ldw	fp,0(sp)
81107e1c:	dec00204 	addi	sp,sp,8
81107e20:	f800283a 	ret

81107e24 <bSyncCtrReset>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrReset(void) {
81107e24:	defffd04 	addi	sp,sp,-12
81107e28:	de00012e 	bgeu	sp,et,81107e30 <bSyncCtrReset+0xc>
81107e2c:	003b68fa 	trap	3
81107e30:	dfc00215 	stw	ra,8(sp)
81107e34:	df000115 	stw	fp,4(sp)
81107e38:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e3c:	01000284 	movi	r4,10
81107e40:	11086880 	call	81108688 <uliSyncReadReg>
81107e44:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_RESET_MSK;
81107e48:	e0bfff17 	ldw	r2,-4(fp)
81107e4c:	10800134 	orhi	r2,r2,4
81107e50:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107e54:	e17fff17 	ldw	r5,-4(fp)
81107e58:	01000284 	movi	r4,10
81107e5c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107e60:	00800044 	movi	r2,1
}
81107e64:	e037883a 	mov	sp,fp
81107e68:	dfc00117 	ldw	ra,4(sp)
81107e6c:	df000017 	ldw	fp,0(sp)
81107e70:	dec00204 	addi	sp,sp,8
81107e74:	f800283a 	ret

81107e78 <bSyncCtrOneShot>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrOneShot(void) {
81107e78:	defffd04 	addi	sp,sp,-12
81107e7c:	de00012e 	bgeu	sp,et,81107e84 <bSyncCtrOneShot+0xc>
81107e80:	003b68fa 	trap	3
81107e84:	dfc00215 	stw	ra,8(sp)
81107e88:	df000115 	stw	fp,4(sp)
81107e8c:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107e90:	01000284 	movi	r4,10
81107e94:	11086880 	call	81108688 <uliSyncReadReg>
81107e98:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ONE_SHOT_MSK;
81107e9c:	e0bfff17 	ldw	r2,-4(fp)
81107ea0:	108000b4 	orhi	r2,r2,2
81107ea4:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107ea8:	e17fff17 	ldw	r5,-4(fp)
81107eac:	01000284 	movi	r4,10
81107eb0:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107eb4:	00800044 	movi	r2,1
}
81107eb8:	e037883a 	mov	sp,fp
81107ebc:	dfc00117 	ldw	ra,4(sp)
81107ec0:	df000017 	ldw	fp,0(sp)
81107ec4:	dec00204 	addi	sp,sp,8
81107ec8:	f800283a 	ret

81107ecc <bSyncCtrErrInj>:
 *
 * @param [in] void
 *
 * @retval bool TRUE
 */
bool bSyncCtrErrInj(void) {
81107ecc:	defffd04 	addi	sp,sp,-12
81107ed0:	de00012e 	bgeu	sp,et,81107ed8 <bSyncCtrErrInj+0xc>
81107ed4:	003b68fa 	trap	3
81107ed8:	dfc00215 	stw	ra,8(sp)
81107edc:	df000115 	stw	fp,4(sp)
81107ee0:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107ee4:	01000284 	movi	r4,10
81107ee8:	11086880 	call	81108688 <uliSyncReadReg>
81107eec:	e0bfff15 	stw	r2,-4(fp)

	uliAux |= SYNC_CTR_ERR_INJ_MSK;
81107ef0:	e0bfff17 	ldw	r2,-4(fp)
81107ef4:	10800074 	orhi	r2,r2,1
81107ef8:	e0bfff15 	stw	r2,-4(fp)

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107efc:	e17fff17 	ldw	r5,-4(fp)
81107f00:	01000284 	movi	r4,10
81107f04:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f08:	00800044 	movi	r2,1
}
81107f0c:	e037883a 	mov	sp,fp
81107f10:	dfc00117 	ldw	ra,4(sp)
81107f14:	df000017 	ldw	fp,0(sp)
81107f18:	dec00204 	addi	sp,sp,8
81107f1c:	f800283a 	ret

81107f20 <bSyncCtrSyncOutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrSyncOutEnable(bool bValue) {
81107f20:	defffc04 	addi	sp,sp,-16
81107f24:	de00012e 	bgeu	sp,et,81107f2c <bSyncCtrSyncOutEnable+0xc>
81107f28:	003b68fa 	trap	3
81107f2c:	dfc00315 	stw	ra,12(sp)
81107f30:	df000215 	stw	fp,8(sp)
81107f34:	df000204 	addi	fp,sp,8
81107f38:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107f3c:	01000284 	movi	r4,10
81107f40:	11086880 	call	81108688 <uliSyncReadReg>
81107f44:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107f48:	e0bfff17 	ldw	r2,-4(fp)
81107f4c:	1000051e 	bne	r2,zero,81107f64 <bSyncCtrSyncOutEnable+0x44>
		uliAux &= ~SYNC_CTR_SYNC_OUT_EN_MSK;
81107f50:	e0fffe17 	ldw	r3,-8(fp)
81107f54:	00bfbfc4 	movi	r2,-257
81107f58:	1884703a 	and	r2,r3,r2
81107f5c:	e0bffe15 	stw	r2,-8(fp)
81107f60:	00000306 	br	81107f70 <bSyncCtrSyncOutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_SYNC_OUT_EN_MSK;
81107f64:	e0bffe17 	ldw	r2,-8(fp)
81107f68:	10804014 	ori	r2,r2,256
81107f6c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107f70:	e17ffe17 	ldw	r5,-8(fp)
81107f74:	01000284 	movi	r4,10
81107f78:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107f7c:	00800044 	movi	r2,1
}
81107f80:	e037883a 	mov	sp,fp
81107f84:	dfc00117 	ldw	ra,4(sp)
81107f88:	df000017 	ldw	fp,0(sp)
81107f8c:	dec00204 	addi	sp,sp,8
81107f90:	f800283a 	ret

81107f94 <bSyncCtrCh1OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh1OutEnable(bool bValue) {
81107f94:	defffc04 	addi	sp,sp,-16
81107f98:	de00012e 	bgeu	sp,et,81107fa0 <bSyncCtrCh1OutEnable+0xc>
81107f9c:	003b68fa 	trap	3
81107fa0:	dfc00315 	stw	ra,12(sp)
81107fa4:	df000215 	stw	fp,8(sp)
81107fa8:	df000204 	addi	fp,sp,8
81107fac:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81107fb0:	01000284 	movi	r4,10
81107fb4:	11086880 	call	81108688 <uliSyncReadReg>
81107fb8:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81107fbc:	e0bfff17 	ldw	r2,-4(fp)
81107fc0:	1000051e 	bne	r2,zero,81107fd8 <bSyncCtrCh1OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHA_EN_MSK;
81107fc4:	e0fffe17 	ldw	r3,-8(fp)
81107fc8:	00bfff84 	movi	r2,-2
81107fcc:	1884703a 	and	r2,r3,r2
81107fd0:	e0bffe15 	stw	r2,-8(fp)
81107fd4:	00000306 	br	81107fe4 <bSyncCtrCh1OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHA_EN_MSK;
81107fd8:	e0bffe17 	ldw	r2,-8(fp)
81107fdc:	10800054 	ori	r2,r2,1
81107fe0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81107fe4:	e17ffe17 	ldw	r5,-8(fp)
81107fe8:	01000284 	movi	r4,10
81107fec:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81107ff0:	00800044 	movi	r2,1
}
81107ff4:	e037883a 	mov	sp,fp
81107ff8:	dfc00117 	ldw	ra,4(sp)
81107ffc:	df000017 	ldw	fp,0(sp)
81108000:	dec00204 	addi	sp,sp,8
81108004:	f800283a 	ret

81108008 <bSyncCtrCh2OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh2OutEnable(bool bValue) {
81108008:	defffc04 	addi	sp,sp,-16
8110800c:	de00012e 	bgeu	sp,et,81108014 <bSyncCtrCh2OutEnable+0xc>
81108010:	003b68fa 	trap	3
81108014:	dfc00315 	stw	ra,12(sp)
81108018:	df000215 	stw	fp,8(sp)
8110801c:	df000204 	addi	fp,sp,8
81108020:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108024:	01000284 	movi	r4,10
81108028:	11086880 	call	81108688 <uliSyncReadReg>
8110802c:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108030:	e0bfff17 	ldw	r2,-4(fp)
81108034:	1000051e 	bne	r2,zero,8110804c <bSyncCtrCh2OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHB_EN_MSK;
81108038:	e0fffe17 	ldw	r3,-8(fp)
8110803c:	00bfff44 	movi	r2,-3
81108040:	1884703a 	and	r2,r3,r2
81108044:	e0bffe15 	stw	r2,-8(fp)
81108048:	00000306 	br	81108058 <bSyncCtrCh2OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHB_EN_MSK;
8110804c:	e0bffe17 	ldw	r2,-8(fp)
81108050:	10800094 	ori	r2,r2,2
81108054:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108058:	e17ffe17 	ldw	r5,-8(fp)
8110805c:	01000284 	movi	r4,10
81108060:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108064:	00800044 	movi	r2,1
}
81108068:	e037883a 	mov	sp,fp
8110806c:	dfc00117 	ldw	ra,4(sp)
81108070:	df000017 	ldw	fp,0(sp)
81108074:	dec00204 	addi	sp,sp,8
81108078:	f800283a 	ret

8110807c <bSyncCtrCh3OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh3OutEnable(bool bValue) {
8110807c:	defffc04 	addi	sp,sp,-16
81108080:	de00012e 	bgeu	sp,et,81108088 <bSyncCtrCh3OutEnable+0xc>
81108084:	003b68fa 	trap	3
81108088:	dfc00315 	stw	ra,12(sp)
8110808c:	df000215 	stw	fp,8(sp)
81108090:	df000204 	addi	fp,sp,8
81108094:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108098:	01000284 	movi	r4,10
8110809c:	11086880 	call	81108688 <uliSyncReadReg>
811080a0:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811080a4:	e0bfff17 	ldw	r2,-4(fp)
811080a8:	1000051e 	bne	r2,zero,811080c0 <bSyncCtrCh3OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHC_EN_MSK;
811080ac:	e0fffe17 	ldw	r3,-8(fp)
811080b0:	00bffec4 	movi	r2,-5
811080b4:	1884703a 	and	r2,r3,r2
811080b8:	e0bffe15 	stw	r2,-8(fp)
811080bc:	00000306 	br	811080cc <bSyncCtrCh3OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHC_EN_MSK;
811080c0:	e0bffe17 	ldw	r2,-8(fp)
811080c4:	10800114 	ori	r2,r2,4
811080c8:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811080cc:	e17ffe17 	ldw	r5,-8(fp)
811080d0:	01000284 	movi	r4,10
811080d4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811080d8:	00800044 	movi	r2,1
}
811080dc:	e037883a 	mov	sp,fp
811080e0:	dfc00117 	ldw	ra,4(sp)
811080e4:	df000017 	ldw	fp,0(sp)
811080e8:	dec00204 	addi	sp,sp,8
811080ec:	f800283a 	ret

811080f0 <bSyncCtrCh4OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh4OutEnable(bool bValue) {
811080f0:	defffc04 	addi	sp,sp,-16
811080f4:	de00012e 	bgeu	sp,et,811080fc <bSyncCtrCh4OutEnable+0xc>
811080f8:	003b68fa 	trap	3
811080fc:	dfc00315 	stw	ra,12(sp)
81108100:	df000215 	stw	fp,8(sp)
81108104:	df000204 	addi	fp,sp,8
81108108:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
8110810c:	01000284 	movi	r4,10
81108110:	11086880 	call	81108688 <uliSyncReadReg>
81108114:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108118:	e0bfff17 	ldw	r2,-4(fp)
8110811c:	1000051e 	bne	r2,zero,81108134 <bSyncCtrCh4OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHD_EN_MSK;
81108120:	e0fffe17 	ldw	r3,-8(fp)
81108124:	00bffdc4 	movi	r2,-9
81108128:	1884703a 	and	r2,r3,r2
8110812c:	e0bffe15 	stw	r2,-8(fp)
81108130:	00000306 	br	81108140 <bSyncCtrCh4OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHD_EN_MSK;
81108134:	e0bffe17 	ldw	r2,-8(fp)
81108138:	10800214 	ori	r2,r2,8
8110813c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108140:	e17ffe17 	ldw	r5,-8(fp)
81108144:	01000284 	movi	r4,10
81108148:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110814c:	00800044 	movi	r2,1
}
81108150:	e037883a 	mov	sp,fp
81108154:	dfc00117 	ldw	ra,4(sp)
81108158:	df000017 	ldw	fp,0(sp)
8110815c:	dec00204 	addi	sp,sp,8
81108160:	f800283a 	ret

81108164 <bSyncCtrCh5OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh5OutEnable(bool bValue) {
81108164:	defffc04 	addi	sp,sp,-16
81108168:	de00012e 	bgeu	sp,et,81108170 <bSyncCtrCh5OutEnable+0xc>
8110816c:	003b68fa 	trap	3
81108170:	dfc00315 	stw	ra,12(sp)
81108174:	df000215 	stw	fp,8(sp)
81108178:	df000204 	addi	fp,sp,8
8110817c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108180:	01000284 	movi	r4,10
81108184:	11086880 	call	81108688 <uliSyncReadReg>
81108188:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110818c:	e0bfff17 	ldw	r2,-4(fp)
81108190:	1000051e 	bne	r2,zero,811081a8 <bSyncCtrCh5OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHE_EN_MSK;
81108194:	e0fffe17 	ldw	r3,-8(fp)
81108198:	00bffbc4 	movi	r2,-17
8110819c:	1884703a 	and	r2,r3,r2
811081a0:	e0bffe15 	stw	r2,-8(fp)
811081a4:	00000306 	br	811081b4 <bSyncCtrCh5OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHE_EN_MSK;
811081a8:	e0bffe17 	ldw	r2,-8(fp)
811081ac:	10800414 	ori	r2,r2,16
811081b0:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
811081b4:	e17ffe17 	ldw	r5,-8(fp)
811081b8:	01000284 	movi	r4,10
811081bc:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811081c0:	00800044 	movi	r2,1
}
811081c4:	e037883a 	mov	sp,fp
811081c8:	dfc00117 	ldw	ra,4(sp)
811081cc:	df000017 	ldw	fp,0(sp)
811081d0:	dec00204 	addi	sp,sp,8
811081d4:	f800283a 	ret

811081d8 <bSyncCtrCh6OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh6OutEnable(bool bValue) {
811081d8:	defffc04 	addi	sp,sp,-16
811081dc:	de00012e 	bgeu	sp,et,811081e4 <bSyncCtrCh6OutEnable+0xc>
811081e0:	003b68fa 	trap	3
811081e4:	dfc00315 	stw	ra,12(sp)
811081e8:	df000215 	stw	fp,8(sp)
811081ec:	df000204 	addi	fp,sp,8
811081f0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811081f4:	01000284 	movi	r4,10
811081f8:	11086880 	call	81108688 <uliSyncReadReg>
811081fc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108200:	e0bfff17 	ldw	r2,-4(fp)
81108204:	1000051e 	bne	r2,zero,8110821c <bSyncCtrCh6OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHF_EN_MSK;
81108208:	e0fffe17 	ldw	r3,-8(fp)
8110820c:	00bff7c4 	movi	r2,-33
81108210:	1884703a 	and	r2,r3,r2
81108214:	e0bffe15 	stw	r2,-8(fp)
81108218:	00000306 	br	81108228 <bSyncCtrCh6OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHF_EN_MSK;
8110821c:	e0bffe17 	ldw	r2,-8(fp)
81108220:	10800814 	ori	r2,r2,32
81108224:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108228:	e17ffe17 	ldw	r5,-8(fp)
8110822c:	01000284 	movi	r4,10
81108230:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108234:	00800044 	movi	r2,1
}
81108238:	e037883a 	mov	sp,fp
8110823c:	dfc00117 	ldw	ra,4(sp)
81108240:	df000017 	ldw	fp,0(sp)
81108244:	dec00204 	addi	sp,sp,8
81108248:	f800283a 	ret

8110824c <bSyncCtrCh7OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh7OutEnable(bool bValue) {
8110824c:	defffc04 	addi	sp,sp,-16
81108250:	de00012e 	bgeu	sp,et,81108258 <bSyncCtrCh7OutEnable+0xc>
81108254:	003b68fa 	trap	3
81108258:	dfc00315 	stw	ra,12(sp)
8110825c:	df000215 	stw	fp,8(sp)
81108260:	df000204 	addi	fp,sp,8
81108264:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
81108268:	01000284 	movi	r4,10
8110826c:	11086880 	call	81108688 <uliSyncReadReg>
81108270:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108274:	e0bfff17 	ldw	r2,-4(fp)
81108278:	1000051e 	bne	r2,zero,81108290 <bSyncCtrCh7OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHG_EN_MSK;
8110827c:	e0fffe17 	ldw	r3,-8(fp)
81108280:	00bfefc4 	movi	r2,-65
81108284:	1884703a 	and	r2,r3,r2
81108288:	e0bffe15 	stw	r2,-8(fp)
8110828c:	00000306 	br	8110829c <bSyncCtrCh7OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHG_EN_MSK;
81108290:	e0bffe17 	ldw	r2,-8(fp)
81108294:	10801014 	ori	r2,r2,64
81108298:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
8110829c:	e17ffe17 	ldw	r5,-8(fp)
811082a0:	01000284 	movi	r4,10
811082a4:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811082a8:	00800044 	movi	r2,1
}
811082ac:	e037883a 	mov	sp,fp
811082b0:	dfc00117 	ldw	ra,4(sp)
811082b4:	df000017 	ldw	fp,0(sp)
811082b8:	dec00204 	addi	sp,sp,8
811082bc:	f800283a 	ret

811082c0 <bSyncCtrCh8OutEnable>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncCtrCh8OutEnable(bool bValue) {
811082c0:	defffc04 	addi	sp,sp,-16
811082c4:	de00012e 	bgeu	sp,et,811082cc <bSyncCtrCh8OutEnable+0xc>
811082c8:	003b68fa 	trap	3
811082cc:	dfc00315 	stw	ra,12(sp)
811082d0:	df000215 	stw	fp,8(sp)
811082d4:	df000204 	addi	fp,sp,8
811082d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811082dc:	01000284 	movi	r4,10
811082e0:	11086880 	call	81108688 <uliSyncReadReg>
811082e4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811082e8:	e0bfff17 	ldw	r2,-4(fp)
811082ec:	1000051e 	bne	r2,zero,81108304 <bSyncCtrCh8OutEnable+0x44>
		uliAux &= ~SYNC_CTR_CHH_EN_MSK;
811082f0:	e0fffe17 	ldw	r3,-8(fp)
811082f4:	00bfdfc4 	movi	r2,-129
811082f8:	1884703a 	and	r2,r3,r2
811082fc:	e0bffe15 	stw	r2,-8(fp)
81108300:	00000306 	br	81108310 <bSyncCtrCh8OutEnable+0x50>
	} else {
		uliAux |= SYNC_CTR_CHH_EN_MSK;
81108304:	e0bffe17 	ldw	r2,-8(fp)
81108308:	10802014 	ori	r2,r2,128
8110830c:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_CTR_REG_OFFSET, uliAux);
81108310:	e17ffe17 	ldw	r5,-8(fp)
81108314:	01000284 	movi	r4,10
81108318:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
8110831c:	00800044 	movi	r2,1
}
81108320:	e037883a 	mov	sp,fp
81108324:	dfc00117 	ldw	ra,4(sp)
81108328:	df000017 	ldw	fp,0(sp)
8110832c:	dec00204 	addi	sp,sp,8
81108330:	f800283a 	ret

81108334 <bSyncIrqEnableError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableError(bool bValue) {
81108334:	defffc04 	addi	sp,sp,-16
81108338:	de00012e 	bgeu	sp,et,81108340 <bSyncIrqEnableError+0xc>
8110833c:	003b68fa 	trap	3
81108340:	dfc00315 	stw	ra,12(sp)
81108344:	df000215 	stw	fp,8(sp)
81108348:	df000204 	addi	fp,sp,8
8110834c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
81108350:	01000044 	movi	r4,1
81108354:	11086880 	call	81108688 <uliSyncReadReg>
81108358:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
8110835c:	e0bfff17 	ldw	r2,-4(fp)
81108360:	1000051e 	bne	r2,zero,81108378 <bSyncIrqEnableError+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_ERROR_MSK;
81108364:	e0fffe17 	ldw	r3,-8(fp)
81108368:	00bfff44 	movi	r2,-3
8110836c:	1884703a 	and	r2,r3,r2
81108370:	e0bffe15 	stw	r2,-8(fp)
81108374:	00000306 	br	81108384 <bSyncIrqEnableError+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_ERROR_MSK;
81108378:	e0bffe17 	ldw	r2,-8(fp)
8110837c:	10800094 	ori	r2,r2,2
81108380:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
81108384:	e17ffe17 	ldw	r5,-8(fp)
81108388:	01000044 	movi	r4,1
8110838c:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108390:	00800044 	movi	r2,1
}
81108394:	e037883a 	mov	sp,fp
81108398:	dfc00117 	ldw	ra,4(sp)
8110839c:	df000017 	ldw	fp,0(sp)
811083a0:	dec00204 	addi	sp,sp,8
811083a4:	f800283a 	ret

811083a8 <bSyncIrqEnableBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqEnableBlank(bool bValue) {
811083a8:	defffc04 	addi	sp,sp,-16
811083ac:	de00012e 	bgeu	sp,et,811083b4 <bSyncIrqEnableBlank+0xc>
811083b0:	003b68fa 	trap	3
811083b4:	dfc00315 	stw	ra,12(sp)
811083b8:	df000215 	stw	fp,8(sp)
811083bc:	df000204 	addi	fp,sp,8
811083c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_ENABLE_REG_OFFSET);
811083c4:	01000044 	movi	r4,1
811083c8:	11086880 	call	81108688 <uliSyncReadReg>
811083cc:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811083d0:	e0bfff17 	ldw	r2,-4(fp)
811083d4:	1000051e 	bne	r2,zero,811083ec <bSyncIrqEnableBlank+0x44>
		uliAux &= ~SYNC_IRQ_ENABLE_BLANK_MSK;
811083d8:	e0fffe17 	ldw	r3,-8(fp)
811083dc:	00bfff84 	movi	r2,-2
811083e0:	1884703a 	and	r2,r3,r2
811083e4:	e0bffe15 	stw	r2,-8(fp)
811083e8:	00000306 	br	811083f8 <bSyncIrqEnableBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_ENABLE_BLANK_MSK;
811083ec:	e0bffe17 	ldw	r2,-8(fp)
811083f0:	10800054 	ori	r2,r2,1
811083f4:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_ENABLE_REG_OFFSET, uliAux);
811083f8:	e17ffe17 	ldw	r5,-8(fp)
811083fc:	01000044 	movi	r4,1
81108400:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108404:	00800044 	movi	r2,1
}
81108408:	e037883a 	mov	sp,fp
8110840c:	dfc00117 	ldw	ra,4(sp)
81108410:	df000017 	ldw	fp,0(sp)
81108414:	dec00204 	addi	sp,sp,8
81108418:	f800283a 	ret

8110841c <bSyncIrqFlagClrError>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrError(bool bValue) {
8110841c:	defffc04 	addi	sp,sp,-16
81108420:	de00012e 	bgeu	sp,et,81108428 <bSyncIrqFlagClrError+0xc>
81108424:	003b68fa 	trap	3
81108428:	dfc00315 	stw	ra,12(sp)
8110842c:	df000215 	stw	fp,8(sp)
81108430:	df000204 	addi	fp,sp,8
81108434:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
81108438:	01000084 	movi	r4,2
8110843c:	11086880 	call	81108688 <uliSyncReadReg>
81108440:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
81108444:	e0bfff17 	ldw	r2,-4(fp)
81108448:	1000051e 	bne	r2,zero,81108460 <bSyncIrqFlagClrError+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_ERROR_MSK;
8110844c:	e0fffe17 	ldw	r3,-8(fp)
81108450:	00bfff44 	movi	r2,-3
81108454:	1884703a 	and	r2,r3,r2
81108458:	e0bffe15 	stw	r2,-8(fp)
8110845c:	00000306 	br	8110846c <bSyncIrqFlagClrError+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_ERROR_MSK;
81108460:	e0bffe17 	ldw	r2,-8(fp)
81108464:	10800094 	ori	r2,r2,2
81108468:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
8110846c:	e17ffe17 	ldw	r5,-8(fp)
81108470:	01000084 	movi	r4,2
81108474:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
81108478:	00800044 	movi	r2,1
}
8110847c:	e037883a 	mov	sp,fp
81108480:	dfc00117 	ldw	ra,4(sp)
81108484:	df000017 	ldw	fp,0(sp)
81108488:	dec00204 	addi	sp,sp,8
8110848c:	f800283a 	ret

81108490 <bSyncIrqFlagClrBlank>:
 *
 * @param [in] bool value
 *
 * @retval bool TRUE
 */
bool bSyncIrqFlagClrBlank(bool bValue) {
81108490:	defffc04 	addi	sp,sp,-16
81108494:	de00012e 	bgeu	sp,et,8110849c <bSyncIrqFlagClrBlank+0xc>
81108498:	003b68fa 	trap	3
8110849c:	dfc00315 	stw	ra,12(sp)
811084a0:	df000215 	stw	fp,8(sp)
811084a4:	df000204 	addi	fp,sp,8
811084a8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET);
811084ac:	01000084 	movi	r4,2
811084b0:	11086880 	call	81108688 <uliSyncReadReg>
811084b4:	e0bffe15 	stw	r2,-8(fp)

	if (bValue == SYNC_BIT_OFF) {
811084b8:	e0bfff17 	ldw	r2,-4(fp)
811084bc:	1000051e 	bne	r2,zero,811084d4 <bSyncIrqFlagClrBlank+0x44>
		uliAux &= ~SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084c0:	e0fffe17 	ldw	r3,-8(fp)
811084c4:	00bfff84 	movi	r2,-2
811084c8:	1884703a 	and	r2,r3,r2
811084cc:	e0bffe15 	stw	r2,-8(fp)
811084d0:	00000306 	br	811084e0 <bSyncIrqFlagClrBlank+0x50>
	} else {
		uliAux |= SYNC_IRQ_FLAG_CLR_BLANK_MSK;
811084d4:	e0bffe17 	ldw	r2,-8(fp)
811084d8:	10800054 	ori	r2,r2,1
811084dc:	e0bffe15 	stw	r2,-8(fp)
	}

	bSyncWriteReg(SYNC_IRQ_FLAG_CLR_REG_OFFSET, uliAux);
811084e0:	e17ffe17 	ldw	r5,-8(fp)
811084e4:	01000084 	movi	r4,2
811084e8:	110862c0 	call	8110862c <bSyncWriteReg>
	return TRUE;
811084ec:	00800044 	movi	r2,1
}
811084f0:	e037883a 	mov	sp,fp
811084f4:	dfc00117 	ldw	ra,4(sp)
811084f8:	df000017 	ldw	fp,0(sp)
811084fc:	dec00204 	addi	sp,sp,8
81108500:	f800283a 	ret

81108504 <bSyncIrqFlagError>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagError(void) {
81108504:	defffc04 	addi	sp,sp,-16
81108508:	de00012e 	bgeu	sp,et,81108510 <bSyncIrqFlagError+0xc>
8110850c:	003b68fa 	trap	3
81108510:	dfc00315 	stw	ra,12(sp)
81108514:	df000215 	stw	fp,8(sp)
81108518:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
8110851c:	010000c4 	movi	r4,3
81108520:	11086880 	call	81108688 <uliSyncReadReg>
81108524:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_ERROR_MSK) {
81108528:	e0bfff17 	ldw	r2,-4(fp)
8110852c:	1080008c 	andi	r2,r2,2
81108530:	10000326 	beq	r2,zero,81108540 <bSyncIrqFlagError+0x3c>
		bResult = TRUE;
81108534:	00800044 	movi	r2,1
81108538:	e0bffe15 	stw	r2,-8(fp)
8110853c:	00000106 	br	81108544 <bSyncIrqFlagError+0x40>
	} else {
		bResult = FALSE;
81108540:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
81108544:	e0bffe17 	ldw	r2,-8(fp)
}
81108548:	e037883a 	mov	sp,fp
8110854c:	dfc00117 	ldw	ra,4(sp)
81108550:	df000017 	ldw	fp,0(sp)
81108554:	dec00204 	addi	sp,sp,8
81108558:	f800283a 	ret

8110855c <bSyncIrqFlagBlank>:
 *
 * @param [in] void
 *
 * @retval bool result
 */
bool bSyncIrqFlagBlank(void) {
8110855c:	defffc04 	addi	sp,sp,-16
81108560:	de00012e 	bgeu	sp,et,81108568 <bSyncIrqFlagBlank+0xc>
81108564:	003b68fa 	trap	3
81108568:	dfc00315 	stw	ra,12(sp)
8110856c:	df000215 	stw	fp,8(sp)
81108570:	df000204 	addi	fp,sp,8
	alt_u32 uliAux;
	bool bResult;

	uliAux = uliSyncReadReg(SYNC_IRQ_FLAG_REG_OFFSET);
81108574:	010000c4 	movi	r4,3
81108578:	11086880 	call	81108688 <uliSyncReadReg>
8110857c:	e0bfff15 	stw	r2,-4(fp)

	if (uliAux & SYNC_IRQ_FLAG_BLANK_MSK) {
81108580:	e0bfff17 	ldw	r2,-4(fp)
81108584:	1080004c 	andi	r2,r2,1
81108588:	10000326 	beq	r2,zero,81108598 <bSyncIrqFlagBlank+0x3c>
		bResult = TRUE;
8110858c:	00800044 	movi	r2,1
81108590:	e0bffe15 	stw	r2,-8(fp)
81108594:	00000106 	br	8110859c <bSyncIrqFlagBlank+0x40>
	} else {
		bResult = FALSE;
81108598:	e03ffe15 	stw	zero,-8(fp)
	}
	return bResult;
8110859c:	e0bffe17 	ldw	r2,-8(fp)
}
811085a0:	e037883a 	mov	sp,fp
811085a4:	dfc00117 	ldw	ra,4(sp)
811085a8:	df000017 	ldw	fp,0(sp)
811085ac:	dec00204 	addi	sp,sp,8
811085b0:	f800283a 	ret

811085b4 <uliSyncGetCtr>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncGetCtr(void) {
811085b4:	defffd04 	addi	sp,sp,-12
811085b8:	de00012e 	bgeu	sp,et,811085c0 <uliSyncGetCtr+0xc>
811085bc:	003b68fa 	trap	3
811085c0:	dfc00215 	stw	ra,8(sp)
811085c4:	df000115 	stw	fp,4(sp)
811085c8:	df000104 	addi	fp,sp,4
	alt_u32 uliAux;

	uliAux = uliSyncReadReg(SYNC_CTR_REG_OFFSET);
811085cc:	01000284 	movi	r4,10
811085d0:	11086880 	call	81108688 <uliSyncReadReg>
811085d4:	e0bfff15 	stw	r2,-4(fp)
	return uliAux;
811085d8:	e0bfff17 	ldw	r2,-4(fp)
}
811085dc:	e037883a 	mov	sp,fp
811085e0:	dfc00117 	ldw	ra,4(sp)
811085e4:	df000017 	ldw	fp,0(sp)
811085e8:	dec00204 	addi	sp,sp,8
811085ec:	f800283a 	ret

811085f0 <uliSyncReadStatus>:
 *
 * @param [in] void
 *
 * @retval alt_u32 value
 */
alt_u32 uliSyncReadStatus(void) {
811085f0:	defffd04 	addi	sp,sp,-12
811085f4:	de00012e 	bgeu	sp,et,811085fc <uliSyncReadStatus+0xc>
811085f8:	003b68fa 	trap	3
811085fc:	dfc00215 	stw	ra,8(sp)
81108600:	df000115 	stw	fp,4(sp)
81108604:	df000104 	addi	fp,sp,4
	alt_u32 aux;

	aux = uliSyncReadReg(SYNC_STAT_REG_OFFSET);
81108608:	0009883a 	mov	r4,zero
8110860c:	11086880 	call	81108688 <uliSyncReadReg>
81108610:	e0bfff15 	stw	r2,-4(fp)
	return aux;
81108614:	e0bfff17 	ldw	r2,-4(fp)
}
81108618:	e037883a 	mov	sp,fp
8110861c:	dfc00117 	ldw	ra,4(sp)
81108620:	df000017 	ldw	fp,0(sp)
81108624:	dec00204 	addi	sp,sp,8
81108628:	f800283a 	ret

8110862c <bSyncWriteReg>:
 * @param [in] alt_u32 offset
 * @param [in] alt_u32 value
 *
 * @retval TRUE -> success
 */
static bool bSyncWriteReg(alt_u32 uliOffset, alt_u32 uliValue) {
8110862c:	defffc04 	addi	sp,sp,-16
81108630:	de00012e 	bgeu	sp,et,81108638 <bSyncWriteReg+0xc>
81108634:	003b68fa 	trap	3
81108638:	df000315 	stw	fp,12(sp)
8110863c:	df000304 	addi	fp,sp,12
81108640:	e13ffe15 	stw	r4,-8(fp)
81108644:	e17fff15 	stw	r5,-4(fp)
	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
81108648:	00a00034 	movhi	r2,32768
8110864c:	10810004 	addi	r2,r2,1024
81108650:	e0bffd15 	stw	r2,-12(fp)
	*(p_addr + uliOffset) = uliValue;
81108654:	e0bffe17 	ldw	r2,-8(fp)
81108658:	1085883a 	add	r2,r2,r2
8110865c:	1085883a 	add	r2,r2,r2
81108660:	1007883a 	mov	r3,r2
81108664:	e0bffd17 	ldw	r2,-12(fp)
81108668:	10c5883a 	add	r2,r2,r3
8110866c:	e0ffff17 	ldw	r3,-4(fp)
81108670:	10c00015 	stw	r3,0(r2)
	return TRUE;
81108674:	00800044 	movi	r2,1
}
81108678:	e037883a 	mov	sp,fp
8110867c:	df000017 	ldw	fp,0(sp)
81108680:	dec00104 	addi	sp,sp,4
81108684:	f800283a 	ret

81108688 <uliSyncReadReg>:
 *
 * @param [in] alt_u32 offset
 *
 * @retval alt_u32 value -> reg
 */
static alt_u32 uliSyncReadReg(alt_u32 uliOffset) {
81108688:	defffc04 	addi	sp,sp,-16
8110868c:	de00012e 	bgeu	sp,et,81108694 <uliSyncReadReg+0xc>
81108690:	003b68fa 	trap	3
81108694:	df000315 	stw	fp,12(sp)
81108698:	df000304 	addi	fp,sp,12
8110869c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 value;

	alt_u32 *p_addr = (alt_u32 *) SYNC_BASE_ADDR;
811086a0:	00a00034 	movhi	r2,32768
811086a4:	10810004 	addi	r2,r2,1024
811086a8:	e0bffd15 	stw	r2,-12(fp)
	value = *(p_addr + uliOffset);
811086ac:	e0bfff17 	ldw	r2,-4(fp)
811086b0:	1085883a 	add	r2,r2,r2
811086b4:	1085883a 	add	r2,r2,r2
811086b8:	1007883a 	mov	r3,r2
811086bc:	e0bffd17 	ldw	r2,-12(fp)
811086c0:	10c5883a 	add	r2,r2,r3
811086c4:	10800017 	ldw	r2,0(r2)
811086c8:	e0bffe15 	stw	r2,-8(fp)
	return value;
811086cc:	e0bffe17 	ldw	r2,-8(fp)
}
811086d0:	e037883a 	mov	sp,fp
811086d4:	df000017 	ldw	fp,0(sp)
811086d8:	dec00104 	addi	sp,sp,4
811086dc:	f800283a 	ret

811086e0 <vFeeTask>:

#include "fee_task.h"



void vFeeTask(void *task_data) {
811086e0:	defffd04 	addi	sp,sp,-12
811086e4:	de00012e 	bgeu	sp,et,811086ec <vFeeTask+0xc>
811086e8:	003b68fa 	trap	3
811086ec:	df000215 	stw	fp,8(sp)
811086f0:	df000204 	addi	fp,sp,8
811086f4:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
811086f8:	e03ffe15 	stw	zero,-8(fp)

		// Check sync ?
			// mudar de estado se isso estiver agendado


}
811086fc:	0001883a 	nop
81108700:	e037883a 	mov	sp,fp
81108704:	df000017 	ldw	fp,0(sp)
81108708:	dec00104 	addi	sp,sp,4
8110870c:	f800283a 	ret

81108710 <vInAckHandlerTask>:


#include "in_ack_handler_task.h"


void vInAckHandlerTask(void *task_data) {
81108710:	defff704 	addi	sp,sp,-36
81108714:	de00012e 	bgeu	sp,et,8110871c <vInAckHandlerTask+0xc>
81108718:	003b68fa 	trap	3
8110871c:	dfc00815 	stw	ra,32(sp)
81108720:	df000715 	stw	fp,28(sp)
81108724:	df000704 	addi	fp,sp,28
81108728:	e13fff15 	stw	r4,-4(fp)

	bool bFound = FALSE;
8110872c:	e03ff915 	stw	zero,-28(fp)
    bool bFinished32 = FALSE;
81108730:	e03ffa15 	stw	zero,-24(fp)
    bool bFinished64 = FALSE;
81108734:	e03ffb15 	stw	zero,-20(fp)
    bool bFinished128 = FALSE;
81108738:	e03ffc15 	stw	zero,-16(fp)
	INT8U error_code;
    INT8U ucReturnMutex;
	tReceiverACKState eReceiverAckState;
	static txReceivedACK xRAckLocal;
    unsigned char ucCountRetries = 0;
8110873c:	e03ffe05 	stb	zero,-8(fp)
    unsigned char i = 0;
81108740:	e03ffe45 	stb	zero,-7(fp)

	#ifdef DEBUG_ON
		debug(fp,"vReceiverAckTask, enter task.\n");
81108744:	d0a04d17 	ldw	r2,-32460(gp)
81108748:	100f883a 	mov	r7,r2
8110874c:	01800784 	movi	r6,30
81108750:	01400044 	movi	r5,1
81108754:	01204534 	movhi	r4,33044
81108758:	212b7604 	addi	r4,r4,-21032
8110875c:	11104380 	call	81110438 <fwrite>
	#endif

	eReceiverAckState = sRAConfiguring;
81108760:	e03ffd15 	stw	zero,-12(fp)

	for(;;){

		switch (eReceiverAckState) {
81108764:	e0bffd17 	ldw	r2,-12(fp)
81108768:	10c00060 	cmpeqi	r3,r2,1
8110876c:	1800071e 	bne	r3,zero,8110878c <vInAckHandlerTask+0x7c>
81108770:	0080032e 	bgeu	zero,r2,81108780 <vInAckHandlerTask+0x70>
81108774:	108000a0 	cmpeqi	r2,r2,2
81108778:	10005a1e 	bne	r2,zero,811088e4 <vInAckHandlerTask+0x1d4>
                    vFailFoundBufferRetransmission();
                }
                eReceiverAckState = sRAGettingACK;
				break;
			default:
				break;
8110877c:	00012506 	br	81108c14 <vInAckHandlerTask+0x504>
	for(;;){

		switch (eReceiverAckState) {
			case sRAConfiguring:
                /*For future implementations*/
                eReceiverAckState = sRAGettingACK;
81108780:	00800044 	movi	r2,1
81108784:	e0bffd15 	stw	r2,-12(fp)
				break;
81108788:	00012206 	br	81108c14 <vInAckHandlerTask+0x504>
            case sRAGettingACK:
                /* Waits the semaphore that indicates there are some ack message was received*/
                OSSemPend(xSemCountReceivedACK, 0, &error_code);
8110878c:	d0a05117 	ldw	r2,-32444(gp)
81108790:	e0fffec4 	addi	r3,fp,-5
81108794:	180d883a 	mov	r6,r3
81108798:	000b883a 	mov	r5,zero
8110879c:	1009883a 	mov	r4,r2
811087a0:	112d1900 	call	8112d190 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
811087a4:	e0bffec3 	ldbu	r2,-5(fp)
811087a8:	10803fcc 	andi	r2,r2,255
811087ac:	10004b1e 	bne	r2,zero,811088dc <vInAckHandlerTask+0x1cc>

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
811087b0:	d0a05017 	ldw	r2,-32448(gp)
811087b4:	e0fffec4 	addi	r3,fp,-5
811087b8:	180d883a 	mov	r6,r3
811087bc:	000b883a 	mov	r5,zero
811087c0:	1009883a 	mov	r4,r2
811087c4:	112b1840 	call	8112b184 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
811087c8:	e0bffec3 	ldbu	r2,-5(fp)
811087cc:	10803fcc 	andi	r2,r2,255
811087d0:	1000401e 	bne	r2,zero,811088d4 <vInAckHandlerTask+0x1c4>

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811087d4:	e03ffe45 	stb	zero,-7(fp)
811087d8:	00003706 	br	811088b8 <vInAckHandlerTask+0x1a8>
                        {
                            
                            if ( xReceivedACK[i].cType != 0 ) {
811087dc:	e0fffe43 	ldbu	r3,-7(fp)
811087e0:	00a04574 	movhi	r2,33045
811087e4:	10adf704 	addi	r2,r2,-18468
811087e8:	18c7883a 	add	r3,r3,r3
811087ec:	18c7883a 	add	r3,r3,r3
811087f0:	10c5883a 	add	r2,r2,r3
811087f4:	10800003 	ldbu	r2,0(r2)
811087f8:	10803fcc 	andi	r2,r2,255
811087fc:	1080201c 	xori	r2,r2,128
81108800:	10bfe004 	addi	r2,r2,-128
81108804:	10002926 	beq	r2,zero,811088ac <vInAckHandlerTask+0x19c>

                                /*  Is it a NACK? */
                                if ( xReceivedACK[i].cType != NACK_CHAR ) {
81108808:	e0fffe43 	ldbu	r3,-7(fp)
8110880c:	00a04574 	movhi	r2,33045
81108810:	10adf704 	addi	r2,r2,-18468
81108814:	18c7883a 	add	r3,r3,r3
81108818:	18c7883a 	add	r3,r3,r3
8110881c:	10c5883a 	add	r2,r2,r3
81108820:	10800003 	ldbu	r2,0(r2)
81108824:	10803fcc 	andi	r2,r2,255
81108828:	1080201c 	xori	r2,r2,128
8110882c:	10bfe004 	addi	r2,r2,-128
81108830:	108008e0 	cmpeqi	r2,r2,35
81108834:	10000d1e 	bne	r2,zero,8110886c <vInAckHandlerTask+0x15c>
                                    /* Locate the message, copy for the local variable in order to free the mutex. */
                                    xRAckLocal = xReceivedACK[i];
81108838:	e0fffe43 	ldbu	r3,-7(fp)
8110883c:	00a04574 	movhi	r2,33045
81108840:	10adf704 	addi	r2,r2,-18468
81108844:	18c7883a 	add	r3,r3,r3
81108848:	18c7883a 	add	r3,r3,r3
8110884c:	10c5883a 	add	r2,r2,r3
81108850:	10c0000b 	ldhu	r3,0(r2)
81108854:	d0e0478d 	sth	r3,-32482(gp)
81108858:	1080008b 	ldhu	r2,2(r2)
8110885c:	d0a0480d 	sth	r2,-32480(gp)
                                    eReceiverAckState = sRACleanningBuffer;
81108860:	00800084 	movi	r2,2
81108864:	e0bffd15 	stw	r2,-12(fp)
                                    break;
81108868:	00001606 	br	811088c4 <vInAckHandlerTask+0x1b4>
                                } else {
                                    /*  Yes is a NACK, do nothing. The packet will be retransmited after timeout, since we can't know which message
                                        was not transmited, is too much expensive retransmit all "waiting ack" packets. So, do nothing, excet clear the pipe buffer*/
                                    #ifdef DEBUG_ON
                                        debug(fp,"NACK received.");
8110886c:	d0a04d17 	ldw	r2,-32460(gp)
81108870:	100f883a 	mov	r7,r2
81108874:	01800384 	movi	r6,14
81108878:	01400044 	movi	r5,1
8110887c:	01204534 	movhi	r4,33044
81108880:	212b7e04 	addi	r4,r4,-21000
81108884:	11104380 	call	81110438 <fwrite>
                                    #endif
                                    eReceiverAckState = sRAGettingACK;
81108888:	00800044 	movi	r2,1
8110888c:	e0bffd15 	stw	r2,-12(fp)
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81108890:	e0fffe43 	ldbu	r3,-7(fp)
81108894:	00a04574 	movhi	r2,33045
81108898:	10adf704 	addi	r2,r2,-18468
8110889c:	18c7883a 	add	r3,r3,r3
811088a0:	18c7883a 	add	r3,r3,r3
811088a4:	10c5883a 	add	r2,r2,r3
811088a8:	10000005 	stb	zero,0(r2)

                    OSMutexPend(xMutexReceivedACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {

                        /*Search for the ack*/
                        for(i = 0; i < N_ACKS_RECEIVED; i++)
811088ac:	e0bffe43 	ldbu	r2,-7(fp)
811088b0:	10800044 	addi	r2,r2,1
811088b4:	e0bffe45 	stb	r2,-7(fp)
811088b8:	e0bffe43 	ldbu	r2,-7(fp)
811088bc:	10800130 	cmpltui	r2,r2,4
811088c0:	103fc61e 	bne	r2,zero,811087dc <__reset+0xfb0e87dc>
                                }
                                xReceivedACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                            }

                        }
                        OSMutexPost(xMutexReceivedACK);
811088c4:	d0a05017 	ldw	r2,-32448(gp)
811088c8:	1009883a 	mov	r4,r2
811088cc:	112b7280 	call	8112b728 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d0:	0000d006 	br	81108c14 <vInAckHandlerTask+0x504>
                        }
                        OSMutexPost(xMutexReceivedACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexReceiverTask();
811088d4:	110c93c0 	call	8110c93c <vFailGetMutexReceiverTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
                }
                break;
811088d8:	0000ce06 	br	81108c14 <vInAckHandlerTask+0x504>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreReceiverTask();
811088dc:	110c8d40 	call	8110c8d4 <vFailGetCountSemaphoreReceiverTask>
                }
                break;
811088e0:	0000cc06 	br	81108c14 <vInAckHandlerTask+0x504>
			case sRACleanningBuffer:
                /* Now a search will be performed in the three output buffer in order to find
                   the (re)transmission buffer identified by the id and erase it. */

                bFound = FALSE;
811088e4:	e03ff915 	stw	zero,-28(fp)
                bFinished32=FALSE;
811088e8:	e03ffa15 	stw	zero,-24(fp)
                bFinished64=FALSE;
811088ec:	e03ffb15 	stw	zero,-20(fp)
                bFinished128=FALSE;
811088f0:	e03ffc15 	stw	zero,-16(fp)
                ucCountRetries = 0;
811088f4:	e03ffe05 	stb	zero,-8(fp)
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
811088f8:	0000b506 	br	81108bd0 <vInAckHandlerTask+0x4c0>

                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
811088fc:	e0bff917 	ldw	r2,-28(fp)
81108900:	1000361e 	bne	r2,zero,811089dc <vInAckHandlerTask+0x2cc>
81108904:	e0bffa17 	ldw	r2,-24(fp)
81108908:	1000341e 	bne	r2,zero,811089dc <vInAckHandlerTask+0x2cc>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
8110890c:	d0a05517 	ldw	r2,-32428(gp)
81108910:	e0fffec4 	addi	r3,fp,-5
81108914:	180b883a 	mov	r5,r3
81108918:	1009883a 	mov	r4,r2
8110891c:	112ab040 	call	8112ab04 <OSMutexAccept>
81108920:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81108924:	e0bffe83 	ldbu	r2,-6(fp)
81108928:	10002c26 	beq	r2,zero,811089dc <vInAckHandlerTask+0x2cc>
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
8110892c:	e03ffe45 	stb	zero,-7(fp)
81108930:	00002306 	br	811089c0 <vInAckHandlerTask+0x2b0>
                            {
                                if ( xBuffer32[i].usiId == xRAckLocal.usiId ) {
81108934:	e0fffe43 	ldbu	r3,-7(fp)
81108938:	00a04534 	movhi	r2,33044
8110893c:	10956804 	addi	r2,r2,21920
81108940:	18c009a4 	muli	r3,r3,38
81108944:	10c5883a 	add	r2,r2,r3
81108948:	10800804 	addi	r2,r2,32
8110894c:	10c0000b 	ldhu	r3,0(r2)
81108950:	d0a0480b 	ldhu	r2,-32480(gp)
81108954:	18ffffcc 	andi	r3,r3,65535
81108958:	10bfffcc 	andi	r2,r2,65535
8110895c:	1880151e 	bne	r3,r2,811089b4 <vInAckHandlerTask+0x2a4>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer32[i].usiId = 0;
81108960:	e0fffe43 	ldbu	r3,-7(fp)
81108964:	00a04534 	movhi	r2,33044
81108968:	10956804 	addi	r2,r2,21920
8110896c:	18c009a4 	muli	r3,r3,38
81108970:	10c5883a 	add	r2,r2,r3
81108974:	10800804 	addi	r2,r2,32
81108978:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110897c:	d0a05517 	ldw	r2,-32428(gp)
81108980:	1009883a 	mov	r4,r2
81108984:	112b7280 	call	8112b728 <OSMutexPost>
                                    bFound = TRUE;
81108988:	00800044 	movi	r2,1
8110898c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer32);
81108990:	d0a05817 	ldw	r2,-32416(gp)
81108994:	1009883a 	mov	r4,r2
81108998:	112d5180 	call	8112d518 <OSSemPost>
8110899c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
811089a0:	e0bffec3 	ldbu	r2,-5(fp)
811089a4:	10803fcc 	andi	r2,r2,255
811089a8:	10000926 	beq	r2,zero,811089d0 <vInAckHandlerTask+0x2c0>
                                        vFailSetCountSemaphorexBuffer32();
811089ac:	110cb880 	call	8110cb88 <vFailSetCountSemaphorexBuffer32>
                                    }
                                    break;
811089b0:	00000706 	br	811089d0 <vInAckHandlerTask+0x2c0>
                    if ( (bFound == FALSE) && (bFinished32 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer32, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_32; i++)
811089b4:	e0bffe43 	ldbu	r2,-7(fp)
811089b8:	10800044 	addi	r2,r2,1
811089bc:	e0bffe45 	stb	r2,-7(fp)
811089c0:	e0bffe43 	ldbu	r2,-7(fp)
811089c4:	10800230 	cmpltui	r2,r2,8
811089c8:	103fda1e 	bne	r2,zero,81108934 <__reset+0xfb0e8934>
811089cc:	00000106 	br	811089d4 <vInAckHandlerTask+0x2c4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer32);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer32();
                                    }
                                    break;
811089d0:	0001883a 	nop
                                }
                            }
                            bFinished32 = TRUE;
811089d4:	00800044 	movi	r2,1
811089d8:	e0bffa15 	stw	r2,-24(fp)
                        }
                    }


                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
811089dc:	e0bff917 	ldw	r2,-28(fp)
811089e0:	1000361e 	bne	r2,zero,81108abc <vInAckHandlerTask+0x3ac>
811089e4:	e0bffb17 	ldw	r2,-20(fp)
811089e8:	1000341e 	bne	r2,zero,81108abc <vInAckHandlerTask+0x3ac>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
811089ec:	d0a05917 	ldw	r2,-32412(gp)
811089f0:	e0fffec4 	addi	r3,fp,-5
811089f4:	180b883a 	mov	r5,r3
811089f8:	1009883a 	mov	r4,r2
811089fc:	112ab040 	call	8112ab04 <OSMutexAccept>
81108a00:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81108a04:	e0bffe83 	ldbu	r2,-6(fp)
81108a08:	10002c26 	beq	r2,zero,81108abc <vInAckHandlerTask+0x3ac>
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a0c:	e03ffe45 	stb	zero,-7(fp)
81108a10:	00002306 	br	81108aa0 <vInAckHandlerTask+0x390>
                            {
                                if ( xBuffer64[i].usiId == xRAckLocal.usiId ) {
81108a14:	e0fffe43 	ldbu	r3,-7(fp)
81108a18:	00a04534 	movhi	r2,33044
81108a1c:	10840b04 	addi	r2,r2,4140
81108a20:	18c011a4 	muli	r3,r3,70
81108a24:	10c5883a 	add	r2,r2,r3
81108a28:	10801004 	addi	r2,r2,64
81108a2c:	10c0000b 	ldhu	r3,0(r2)
81108a30:	d0a0480b 	ldhu	r2,-32480(gp)
81108a34:	18ffffcc 	andi	r3,r3,65535
81108a38:	10bfffcc 	andi	r2,r2,65535
81108a3c:	1880151e 	bne	r3,r2,81108a94 <vInAckHandlerTask+0x384>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer64[i].usiId = 0;
81108a40:	e0fffe43 	ldbu	r3,-7(fp)
81108a44:	00a04534 	movhi	r2,33044
81108a48:	10840b04 	addi	r2,r2,4140
81108a4c:	18c011a4 	muli	r3,r3,70
81108a50:	10c5883a 	add	r2,r2,r3
81108a54:	10801004 	addi	r2,r2,64
81108a58:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer64*/
81108a5c:	d0a05917 	ldw	r2,-32412(gp)
81108a60:	1009883a 	mov	r4,r2
81108a64:	112b7280 	call	8112b728 <OSMutexPost>
                                    bFound = TRUE;
81108a68:	00800044 	movi	r2,1
81108a6c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer64);
81108a70:	d0a04a17 	ldw	r2,-32472(gp)
81108a74:	1009883a 	mov	r4,r2
81108a78:	112d5180 	call	8112d518 <OSSemPost>
81108a7c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108a80:	e0bffec3 	ldbu	r2,-5(fp)
81108a84:	10803fcc 	andi	r2,r2,255
81108a88:	10000926 	beq	r2,zero,81108ab0 <vInAckHandlerTask+0x3a0>
                                        vFailSetCountSemaphorexBuffer64();
81108a8c:	110cbf00 	call	8110cbf0 <vFailSetCountSemaphorexBuffer64>
                                    }
                                    break;
81108a90:	00000706 	br	81108ab0 <vInAckHandlerTask+0x3a0>
                    if ( (bFound == FALSE) && (bFinished64 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer64, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_64; i++)
81108a94:	e0bffe43 	ldbu	r2,-7(fp)
81108a98:	10800044 	addi	r2,r2,1
81108a9c:	e0bffe45 	stb	r2,-7(fp)
81108aa0:	e0bffe43 	ldbu	r2,-7(fp)
81108aa4:	10800130 	cmpltui	r2,r2,4
81108aa8:	103fda1e 	bne	r2,zero,81108a14 <__reset+0xfb0e8a14>
81108aac:	00000106 	br	81108ab4 <vInAckHandlerTask+0x3a4>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer64);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer64();
                                    }
                                    break;
81108ab0:	0001883a 	nop
                                }
                            }
                            bFinished64 = TRUE;
81108ab4:	00800044 	movi	r2,1
81108ab8:	e0bffb15 	stw	r2,-20(fp)
                        }
                    }

                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
81108abc:	e0bff917 	ldw	r2,-28(fp)
81108ac0:	1000361e 	bne	r2,zero,81108b9c <vInAckHandlerTask+0x48c>
81108ac4:	e0bffc17 	ldw	r2,-16(fp)
81108ac8:	1000341e 	bne	r2,zero,81108b9c <vInAckHandlerTask+0x48c>
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
81108acc:	d0a05717 	ldw	r2,-32420(gp)
81108ad0:	e0fffec4 	addi	r3,fp,-5
81108ad4:	180b883a 	mov	r5,r3
81108ad8:	1009883a 	mov	r4,r2
81108adc:	112ab040 	call	8112ab04 <OSMutexAccept>
81108ae0:	e0bffe85 	stb	r2,-6(fp)
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
81108ae4:	e0bffe83 	ldbu	r2,-6(fp)
81108ae8:	10002c26 	beq	r2,zero,81108b9c <vInAckHandlerTask+0x48c>
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108aec:	e03ffe45 	stb	zero,-7(fp)
81108af0:	00002306 	br	81108b80 <vInAckHandlerTask+0x470>
                            {
                                if ( xBuffer128[i].usiId == xRAckLocal.usiId ) {
81108af4:	e0fffe43 	ldbu	r3,-7(fp)
81108af8:	00a04574 	movhi	r2,33045
81108afc:	10adb404 	addi	r2,r2,-18736
81108b00:	18c021a4 	muli	r3,r3,134
81108b04:	10c5883a 	add	r2,r2,r3
81108b08:	10802004 	addi	r2,r2,128
81108b0c:	10c0000b 	ldhu	r3,0(r2)
81108b10:	d0a0480b 	ldhu	r2,-32480(gp)
81108b14:	18ffffcc 	andi	r3,r3,65535
81108b18:	10bfffcc 	andi	r2,r2,65535
81108b1c:	1880151e 	bne	r3,r2,81108b74 <vInAckHandlerTask+0x464>
                                    /* Free the buffer and indicate by setting usiId to Zero. Post in the count semaphore to indicate
                                    that is an free position in the (re)trasmission buffer. */
                                    xBuffer128[i].usiId = 0;
81108b20:	e0fffe43 	ldbu	r3,-7(fp)
81108b24:	00a04574 	movhi	r2,33045
81108b28:	10adb404 	addi	r2,r2,-18736
81108b2c:	18c021a4 	muli	r3,r3,134
81108b30:	10c5883a 	add	r2,r2,r3
81108b34:	10802004 	addi	r2,r2,128
81108b38:	1000000d 	sth	zero,0(r2)
                                    OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
81108b3c:	d0a05717 	ldw	r2,-32420(gp)
81108b40:	1009883a 	mov	r4,r2
81108b44:	112b7280 	call	8112b728 <OSMutexPost>
                                    bFound = TRUE;
81108b48:	00800044 	movi	r2,1
81108b4c:	e0bff915 	stw	r2,-28(fp)
                                    error_code = OSSemPost(xSemCountBuffer128);
81108b50:	d0a04e17 	ldw	r2,-32456(gp)
81108b54:	1009883a 	mov	r4,r2
81108b58:	112d5180 	call	8112d518 <OSSemPost>
81108b5c:	e0bffec5 	stb	r2,-5(fp)
                                    if ( error_code != OS_ERR_NONE ) {
81108b60:	e0bffec3 	ldbu	r2,-5(fp)
81108b64:	10803fcc 	andi	r2,r2,255
81108b68:	10000926 	beq	r2,zero,81108b90 <vInAckHandlerTask+0x480>
                                        vFailSetCountSemaphorexBuffer128();
81108b6c:	110cc580 	call	8110cc58 <vFailSetCountSemaphorexBuffer128>
                                    }
                                    break;
81108b70:	00000706 	br	81108b90 <vInAckHandlerTask+0x480>
                    if ( (bFound == FALSE) && (bFinished128 == FALSE) ) {
                        /* Search in three (re)transmission buffer for the id*/
                        ucReturnMutex = OSMutexAccept(xMutexBuffer128, &error_code); /* Just check the the mutex (non blocking) */
                        if ( ucReturnMutex != 0 ) { /* Returning zero = Mutex not available */
                            /*Search for the id*/
                            for(i = 0; i < N_128; i++)
81108b74:	e0bffe43 	ldbu	r2,-7(fp)
81108b78:	10800044 	addi	r2,r2,1
81108b7c:	e0bffe45 	stb	r2,-7(fp)
81108b80:	e0bffe43 	ldbu	r2,-7(fp)
81108b84:	108000b0 	cmpltui	r2,r2,2
81108b88:	103fda1e 	bne	r2,zero,81108af4 <__reset+0xfb0e8af4>
81108b8c:	00000106 	br	81108b94 <vInAckHandlerTask+0x484>
                                    bFound = TRUE;
                                    error_code = OSSemPost(xSemCountBuffer128);
                                    if ( error_code != OS_ERR_NONE ) {
                                        vFailSetCountSemaphorexBuffer128();
                                    }
                                    break;
81108b90:	0001883a 	nop
                                }
                            }
                            bFinished128 = TRUE;
81108b94:	00800044 	movi	r2,1
81108b98:	e0bffc15 	stw	r2,-16(fp)
                        }
                    }
                    /* Check if finish the search, if not probably some mutex is in use, so put the task to sleep for some time*/
                    if ( ( bFound == FALSE ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) )) {
81108b9c:	e0bff917 	ldw	r2,-28(fp)
81108ba0:	10000b1e 	bne	r2,zero,81108bd0 <vInAckHandlerTask+0x4c0>
81108ba4:	e0bffa17 	ldw	r2,-24(fp)
81108ba8:	10000426 	beq	r2,zero,81108bbc <vInAckHandlerTask+0x4ac>
81108bac:	e0bffb17 	ldw	r2,-20(fp)
81108bb0:	10000226 	beq	r2,zero,81108bbc <vInAckHandlerTask+0x4ac>
81108bb4:	e0bffc17 	ldw	r2,-16(fp)
81108bb8:	1000051e 	bne	r2,zero,81108bd0 <vInAckHandlerTask+0x4c0>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
81108bbc:	01000144 	movi	r4,5
81108bc0:	112f01c0 	call	8112f01c <OSTimeDly>
                        ucCountRetries++;
81108bc4:	e0bffe03 	ldbu	r2,-8(fp)
81108bc8:	10800044 	addi	r2,r2,1
81108bcc:	e0bffe05 	stb	r2,-8(fp)
                bFinished32=FALSE;
                bFinished64=FALSE;
                bFinished128=FALSE;
                ucCountRetries = 0;
                /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
                while ( ( bFound == FALSE ) && ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) ||(bFinished128==FALSE) ) ) {
81108bd0:	e0bff917 	ldw	r2,-28(fp)
81108bd4:	1000091e 	bne	r2,zero,81108bfc <vInAckHandlerTask+0x4ec>
81108bd8:	e0bffe03 	ldbu	r2,-8(fp)
81108bdc:	108001a8 	cmpgeui	r2,r2,6
81108be0:	1000061e 	bne	r2,zero,81108bfc <vInAckHandlerTask+0x4ec>
81108be4:	e0bffa17 	ldw	r2,-24(fp)
81108be8:	103f4426 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108bec:	e0bffb17 	ldw	r2,-20(fp)
81108bf0:	103f4226 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
81108bf4:	e0bffc17 	ldw	r2,-16(fp)
81108bf8:	103f4026 	beq	r2,zero,811088fc <__reset+0xfb0e88fc>
                        OSTimeDly(5); /* Make this task sleep for 5 ticks*/
                        ucCountRetries++;
                    }
                }
                
                if (bFound == FALSE) {
81108bfc:	e0bff917 	ldw	r2,-28(fp)
81108c00:	1000011e 	bne	r2,zero,81108c08 <vInAckHandlerTask+0x4f8>
                    /* Could not found the buffer with the id received in the ack packet*/
                    vFailFoundBufferRetransmission();
81108c04:	110ccc00 	call	8110ccc0 <vFailFoundBufferRetransmission>
                }
                eReceiverAckState = sRAGettingACK;
81108c08:	00800044 	movi	r2,1
81108c0c:	e0bffd15 	stw	r2,-12(fp)
				break;
81108c10:	0001883a 	nop
			default:
				break;
		}
	}
81108c14:	003ed306 	br	81108764 <__reset+0xfb0e8764>

81108c18 <vInitialTask>:

#include "initialization_task.h"


void vInitialTask(void *task_data)
{
81108c18:	defff704 	addi	sp,sp,-36
81108c1c:	de00012e 	bgeu	sp,et,81108c24 <vInitialTask+0xc>
81108c20:	003b68fa 	trap	3
81108c24:	dfc00815 	stw	ra,32(sp)
81108c28:	df000715 	stw	fp,28(sp)
81108c2c:	df000704 	addi	fp,sp,28
81108c30:	e13fff15 	stw	r4,-4(fp)
  INT8U error_code = OS_ERR_NONE;
81108c34:	e03ffe05 	stb	zero,-8(fp)

	/* READ: Create the task that is responsible to READ UART buffer */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vReceiverUartTask,
81108c38:	00800104 	movi	r2,4
81108c3c:	d8800415 	stw	r2,16(sp)
81108c40:	d8000315 	stw	zero,12(sp)
81108c44:	00820004 	movi	r2,2048
81108c48:	d8800215 	stw	r2,8(sp)
81108c4c:	00a04534 	movhi	r2,33044
81108c50:	1095b404 	addi	r2,r2,22224
81108c54:	d8800115 	stw	r2,4(sp)
81108c58:	00800784 	movi	r2,30
81108c5c:	d8800015 	stw	r2,0(sp)
81108c60:	01c00784 	movi	r7,30
81108c64:	01a04534 	movhi	r6,33044
81108c68:	319db304 	addi	r6,r6,30412
81108c6c:	000b883a 	mov	r5,zero
81108c70:	01204474 	movhi	r4,33041
81108c74:	21258e04 	addi	r4,r4,-27080
81108c78:	112defc0 	call	8112defc <OSTaskCreateExt>
81108c7c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108c80:	e0bffe03 	ldbu	r2,-8(fp)
81108c84:	10803fcc 	andi	r2,r2,255
81108c88:	10000526 	beq	r2,zero,81108ca0 <vInitialTask+0x88>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108c8c:	e0bffe03 	ldbu	r2,-8(fp)
81108c90:	10803fcc 	andi	r2,r2,255
81108c94:	1009883a 	mov	r4,r2
81108c98:	110c5500 	call	8110c550 <printErrorTask>
		#endif
		vFailReceiverCreate();
81108c9c:	110caa40 	call	8110caa4 <vFailReceiverCreate>
	}


	/* Create the task that is responsible to parse all received messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vParserCommTask,
81108ca0:	00800104 	movi	r2,4
81108ca4:	d8800415 	stw	r2,16(sp)
81108ca8:	d8000315 	stw	zero,12(sp)
81108cac:	00820004 	movi	r2,2048
81108cb0:	d8800215 	stw	r2,8(sp)
81108cb4:	00a04574 	movhi	r2,33045
81108cb8:	10adfb04 	addi	r2,r2,-18452
81108cbc:	d8800115 	stw	r2,4(sp)
81108cc0:	00800684 	movi	r2,26
81108cc4:	d8800015 	stw	r2,0(sp)
81108cc8:	01c00684 	movi	r7,26
81108ccc:	01a04574 	movhi	r6,33045
81108cd0:	31b5fa04 	addi	r6,r6,-10264
81108cd4:	000b883a 	mov	r5,zero
81108cd8:	01204474 	movhi	r4,33041
81108cdc:	21247004 	addi	r4,r4,-28224
81108ce0:	112defc0 	call	8112defc <OSTaskCreateExt>
81108ce4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108ce8:	e0bffe03 	ldbu	r2,-8(fp)
81108cec:	10803fcc 	andi	r2,r2,255
81108cf0:	10000526 	beq	r2,zero,81108d08 <vInitialTask+0xf0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108cf4:	e0bffe03 	ldbu	r2,-8(fp)
81108cf8:	10803fcc 	andi	r2,r2,255
81108cfc:	1009883a 	mov	r4,r2
81108d00:	110c5500 	call	8110c550 <printErrorTask>
		#endif
		vFailParserCommTaskCreate();
81108d04:	110d0680 	call	8110d068 <vFailParserCommTaskCreate>
	}


	/* Create the task that is responsible to handle incomming ack packet */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInAckHandlerTask,
81108d08:	00800104 	movi	r2,4
81108d0c:	d8800415 	stw	r2,16(sp)
81108d10:	d8000315 	stw	zero,12(sp)
81108d14:	00820004 	movi	r2,2048
81108d18:	d8800215 	stw	r2,8(sp)
81108d1c:	00a04534 	movhi	r2,33044
81108d20:	10bc0b04 	addi	r2,r2,-4052
81108d24:	d8800115 	stw	r2,4(sp)
81108d28:	008005c4 	movi	r2,23
81108d2c:	d8800015 	stw	r2,0(sp)
81108d30:	01c005c4 	movi	r7,23
81108d34:	01a04534 	movhi	r6,33044
81108d38:	31840a04 	addi	r6,r6,4136
81108d3c:	000b883a 	mov	r5,zero
81108d40:	01204474 	movhi	r4,33041
81108d44:	2121c404 	addi	r4,r4,-30960
81108d48:	112defc0 	call	8112defc <OSTaskCreateExt>
81108d4c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108d50:	e0bffe03 	ldbu	r2,-8(fp)
81108d54:	10803fcc 	andi	r2,r2,255
81108d58:	10000526 	beq	r2,zero,81108d70 <vInitialTask+0x158>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108d5c:	e0bffe03 	ldbu	r2,-8(fp)
81108d60:	10803fcc 	andi	r2,r2,255
81108d64:	1009883a 	mov	r4,r2
81108d68:	110c5500 	call	8110c550 <printErrorTask>
		#endif
		vFailInAckHandlerTaskCreate();
81108d6c:	110d0b40 	call	8110d0b4 <vFailInAckHandlerTaskCreate>



	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vOutAckHandlerTask,
81108d70:	00800104 	movi	r2,4
81108d74:	d8800415 	stw	r2,16(sp)
81108d78:	d8000315 	stw	zero,12(sp)
81108d7c:	00820004 	movi	r2,2048
81108d80:	d8800215 	stw	r2,8(sp)
81108d84:	00a04534 	movhi	r2,33044
81108d88:	109db404 	addi	r2,r2,30416
81108d8c:	d8800115 	stw	r2,4(sp)
81108d90:	00800644 	movi	r2,25
81108d94:	d8800015 	stw	r2,0(sp)
81108d98:	01c00644 	movi	r7,25
81108d9c:	01a04574 	movhi	r6,33045
81108da0:	31a5b304 	addi	r6,r6,-26932
81108da4:	000b883a 	mov	r5,zero
81108da8:	01204474 	movhi	r4,33041
81108dac:	2123ce04 	addi	r4,r4,-28872
81108db0:	112defc0 	call	8112defc <OSTaskCreateExt>
81108db4:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108db8:	e0bffe03 	ldbu	r2,-8(fp)
81108dbc:	10803fcc 	andi	r2,r2,255
81108dc0:	10000526 	beq	r2,zero,81108dd8 <vInitialTask+0x1c0>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108dc4:	e0bffe03 	ldbu	r2,-8(fp)
81108dc8:	10803fcc 	andi	r2,r2,255
81108dcc:	1009883a 	mov	r4,r2
81108dd0:	110c5500 	call	8110c550 <printErrorTask>
		#endif
		vFailOutAckHandlerTaskCreate();
81108dd4:	110d1000 	call	8110d100 <vFailOutAckHandlerTaskCreate>
	}


	/* Create the task that is responsible to send the ack to NUC of the incomming messages */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vTimeoutCheckerTask,
81108dd8:	00800104 	movi	r2,4
81108ddc:	d8800415 	stw	r2,16(sp)
81108de0:	d8000315 	stw	zero,12(sp)
81108de4:	00820004 	movi	r2,2048
81108de8:	d8800215 	stw	r2,8(sp)
81108dec:	00a04534 	movhi	r2,33044
81108df0:	108d6804 	addi	r2,r2,13728
81108df4:	d8800115 	stw	r2,4(sp)
81108df8:	00800704 	movi	r2,28
81108dfc:	d8800015 	stw	r2,0(sp)
81108e00:	01c00704 	movi	r7,28
81108e04:	01a04534 	movhi	r6,33044
81108e08:	31956704 	addi	r6,r6,21916
81108e0c:	000b883a 	mov	r5,zero
81108e10:	01204474 	movhi	r4,33041
81108e14:	21289304 	addi	r4,r4,-23988
81108e18:	112defc0 	call	8112defc <OSTaskCreateExt>
81108e1c:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e20:	e0bffe03 	ldbu	r2,-8(fp)
81108e24:	10803fcc 	andi	r2,r2,255
81108e28:	10000526 	beq	r2,zero,81108e40 <vInitialTask+0x228>
		/* Can't create Task for receive comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );
81108e2c:	e0bffe03 	ldbu	r2,-8(fp)
81108e30:	10803fcc 	andi	r2,r2,255
81108e34:	1009883a 	mov	r4,r2
81108e38:	110c5500 	call	8110c550 <printErrorTask>
		#endif
		vFailTimeoutCheckerTaskCreate();
81108e3c:	110d1e40 	call	8110d1e4 <vFailTimeoutCheckerTaskCreate>



	/* SEND: Create the task that is responsible to SEND UART packets */
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vSenderComTask,
81108e40:	00800104 	movi	r2,4
81108e44:	d8800415 	stw	r2,16(sp)
81108e48:	d8000315 	stw	zero,12(sp)
81108e4c:	00820004 	movi	r2,2048
81108e50:	d8800215 	stw	r2,8(sp)
81108e54:	00a04534 	movhi	r2,33044
81108e58:	10845104 	addi	r2,r2,4420
81108e5c:	d8800115 	stw	r2,4(sp)
81108e60:	00800604 	movi	r2,24
81108e64:	d8800015 	stw	r2,0(sp)
81108e68:	01c00604 	movi	r7,24
81108e6c:	01a04534 	movhi	r6,33044
81108e70:	318c5004 	addi	r6,r6,12608
81108e74:	000b883a 	mov	r5,zero
81108e78:	01204474 	movhi	r4,33041
81108e7c:	21283804 	addi	r4,r4,-24352
81108e80:	112defc0 	call	8112defc <OSTaskCreateExt>
81108e84:	e0bffe05 	stb	r2,-8(fp)
									NULL,
									0);

	#endif

	if ( error_code != OS_ERR_NONE) {
81108e88:	e0bffe03 	ldbu	r2,-8(fp)
81108e8c:	10803fcc 	andi	r2,r2,255
81108e90:	10000526 	beq	r2,zero,81108ea8 <vInitialTask+0x290>
		/* Can't create Task for sender comm packets */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108e94:	e0bffe03 	ldbu	r2,-8(fp)
81108e98:	10803fcc 	andi	r2,r2,255
81108e9c:	1009883a 	mov	r4,r2
81108ea0:	110c5500 	call	8110c550 <printErrorTask>
		#endif
		vFailSenderCreate();
81108ea4:	110caf00 	call	8110caf0 <vFailSenderCreate>
	}

	/*	This is the timer that's trigger the task that implements the timeout/retransmission logic*/
	OSTmrStart ((OS_TMR *)xTimerRetransmission, (INT8U  *)&error_code);
81108ea8:	d0a05617 	ldw	r2,-32424(gp)
81108eac:	e17ffe04 	addi	r5,fp,-8
81108eb0:	1009883a 	mov	r4,r2
81108eb4:	112fc1c0 	call	8112fc1c <OSTmrStart>
	if ( error_code != OS_ERR_NONE) {
81108eb8:	e0bffe03 	ldbu	r2,-8(fp)
81108ebc:	10803fcc 	andi	r2,r2,255
81108ec0:	10000126 	beq	r2,zero,81108ec8 <vInitialTask+0x2b0>
		/*	Could not create the timer that syncs the task that is responsible to retransmit the packets*/
		vFailStartTimerRetransmission();
81108ec4:	110d4a00 	call	8110d4a0 <vFailStartTimerRetransmission>




	/* Delete the Initialization Task  */
	error_code = OSTaskDel(OS_PRIO_SELF); /* OS_PRIO_SELF = Means task self priority */
81108ec8:	01003fc4 	movi	r4,255
81108ecc:	112e0e80 	call	8112e0e8 <OSTaskDel>
81108ed0:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE) {
81108ed4:	e0bffe03 	ldbu	r2,-8(fp)
81108ed8:	10803fcc 	andi	r2,r2,255
81108edc:	10001026 	beq	r2,zero,81108f20 <vInitialTask+0x308>
		/*	Can't delete the initialization task, the problem is that the priority of this
			is that the PRIO is so high that will cause starvation if not deleted */
		#ifdef DEBUG_ON
			printErrorTask( error_code );		
81108ee0:	e0bffe03 	ldbu	r2,-8(fp)
81108ee4:	10803fcc 	andi	r2,r2,255
81108ee8:	1009883a 	mov	r4,r2
81108eec:	110c5500 	call	8110c550 <printErrorTask>
		#endif
		vFailDeleteInitialization();
81108ef0:	110cb3c0 	call	8110cb3c <vFailDeleteInitialization>
		/*	To not exit the intire application, the PRIO of this task will be lowered*/
		OSTaskChangePrio( INITIALIZATION_TASK_PRIO , INITIALIZATION_TASK_PRIO_FAIL );
81108ef4:	014009c4 	movi	r5,39
81108ef8:	01000044 	movi	r4,1
81108efc:	112d8500 	call	8112d850 <OSTaskChangePrio>

		for(;;) { /* Correct Program Flow should never get here */
			OSTaskDel(OS_PRIO_SELF); /* Try to delete it self */
81108f00:	01003fc4 	movi	r4,255
81108f04:	112e0e80 	call	8112e0e8 <OSTaskDel>
			OSTimeDlyHMSM(0,0,10,0); /* 1 sec */
81108f08:	000f883a 	mov	r7,zero
81108f0c:	01800284 	movi	r6,10
81108f10:	000b883a 	mov	r5,zero
81108f14:	0009883a 	mov	r4,zero
81108f18:	112f1280 	call	8112f128 <OSTimeDlyHMSM>
		}
81108f1c:	003ff806 	br	81108f00 <__reset+0xfb0e8f00>
	}

}
81108f20:	0001883a 	nop
81108f24:	e037883a 	mov	sp,fp
81108f28:	dfc00117 	ldw	ra,4(sp)
81108f2c:	df000017 	ldw	fp,0(sp)
81108f30:	dec00204 	addi	sp,sp,8
81108f34:	f800283a 	ret

81108f38 <vOutAckHandlerTask>:
 */

#include "out_ack_handler_task.h"


void vOutAckHandlerTask(void *task_data) {
81108f38:	defff604 	addi	sp,sp,-40
81108f3c:	de00012e 	bgeu	sp,et,81108f44 <vOutAckHandlerTask+0xc>
81108f40:	003b68fa 	trap	3
81108f44:	dfc00915 	stw	ra,36(sp)
81108f48:	df000815 	stw	fp,32(sp)
81108f4c:	df000804 	addi	fp,sp,32
81108f50:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
81108f54:	e03ff815 	stw	zero,-32(fp)
	INT8U error_code;
	tSerderACKState eSenderAckState;
	static txSenderACKs xSAckLocal;
    char cBufferAck[16] = "";
81108f58:	e03ffb15 	stw	zero,-20(fp)
81108f5c:	e03ffc15 	stw	zero,-16(fp)
81108f60:	e03ffd15 	stw	zero,-12(fp)
81108f64:	e03ffe15 	stw	zero,-8(fp)
    unsigned char ucCountRetries = 0;
81108f68:	e03ffa05 	stb	zero,-24(fp)
    unsigned char crc = 0;
81108f6c:	e03ffa85 	stb	zero,-22(fp)

	#ifdef DEBUG_ON
		debug(fp,"vSenderAckTask, enter task.\n");
81108f70:	d0a04d17 	ldw	r2,-32460(gp)
81108f74:	100f883a 	mov	r7,r2
81108f78:	01800704 	movi	r6,28
81108f7c:	01400044 	movi	r5,1
81108f80:	01204534 	movhi	r4,33044
81108f84:	212b8204 	addi	r4,r4,-20984
81108f88:	11104380 	call	81110438 <fwrite>
	#endif

	eSenderAckState = sSAConfiguring;
81108f8c:	e03ff915 	stw	zero,-28(fp)

	for(;;){

		switch (eSenderAckState) {
81108f90:	e0bff917 	ldw	r2,-28(fp)
81108f94:	10c00060 	cmpeqi	r3,r2,1
81108f98:	1800071e 	bne	r3,zero,81108fb8 <vOutAckHandlerTask+0x80>
81108f9c:	0080032e 	bgeu	zero,r2,81108fac <vOutAckHandlerTask+0x74>
81108fa0:	108000a0 	cmpeqi	r2,r2,2
81108fa4:	1000451e 	bne	r2,zero,811090bc <vOutAckHandlerTask+0x184>
                    vFailGetMutexTxUARTSenderTask();
                }
                eSenderAckState = sSAGettingACK;
				break;
			default:
				break;
81108fa8:	00008406 	br	811091bc <vOutAckHandlerTask+0x284>
	for(;;){

		switch (eSenderAckState) {
			case sSAConfiguring:
                /*For future implementations*/
                eSenderAckState = sSAGettingACK;
81108fac:	00800044 	movi	r2,1
81108fb0:	e0bff915 	stw	r2,-28(fp)
				break;
81108fb4:	00008106 	br	811091bc <vOutAckHandlerTask+0x284>
            case sSAGettingACK:
                /* Waits the semaphore that indicates there are some ack message to send*/
                OSSemPend(xSemCountSenderACK, 0, &error_code);
81108fb8:	d0a04c17 	ldw	r2,-32464(gp)
81108fbc:	e0fffac4 	addi	r3,fp,-21
81108fc0:	180d883a 	mov	r6,r3
81108fc4:	000b883a 	mov	r5,zero
81108fc8:	1009883a 	mov	r4,r2
81108fcc:	112d1900 	call	8112d190 <OSSemPend>
                if ( error_code == OS_ERR_NONE ) {
81108fd0:	e0bffac3 	ldbu	r2,-21(fp)
81108fd4:	10803fcc 	andi	r2,r2,255
81108fd8:	1000361e 	bne	r2,zero,811090b4 <vOutAckHandlerTask+0x17c>

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
81108fdc:	d0a05a17 	ldw	r2,-32408(gp)
81108fe0:	e0fffac4 	addi	r3,fp,-21
81108fe4:	180d883a 	mov	r6,r3
81108fe8:	000b883a 	mov	r5,zero
81108fec:	1009883a 	mov	r4,r2
81108ff0:	112b1840 	call	8112b184 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
81108ff4:	e0bffac3 	ldbu	r2,-21(fp)
81108ff8:	10803fcc 	andi	r2,r2,255
81108ffc:	10002b1e 	bne	r2,zero,811090ac <vOutAckHandlerTask+0x174>
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109000:	e03ffa45 	stb	zero,-23(fp)
81109004:	00002206 	br	81109090 <vOutAckHandlerTask+0x158>
                        {
                            if ( xSenderACK[i].cType != 0 ) {
81109008:	e0fffa43 	ldbu	r3,-23(fp)
8110900c:	00a04574 	movhi	r2,33045
81109010:	10b5fb04 	addi	r2,r2,-10260
81109014:	18c7883a 	add	r3,r3,r3
81109018:	18c7883a 	add	r3,r3,r3
8110901c:	10c5883a 	add	r2,r2,r3
81109020:	10800003 	ldbu	r2,0(r2)
81109024:	10803fcc 	andi	r2,r2,255
81109028:	1080201c 	xori	r2,r2,128
8110902c:	10bfe004 	addi	r2,r2,-128
81109030:	10001426 	beq	r2,zero,81109084 <vOutAckHandlerTask+0x14c>
                                /* Locate the message, copy for the local variable in order to free the mutex. */
                                xSAckLocal = xSenderACK[i];
81109034:	e0fffa43 	ldbu	r3,-23(fp)
81109038:	00a04574 	movhi	r2,33045
8110903c:	10b5fb04 	addi	r2,r2,-10260
81109040:	18c7883a 	add	r3,r3,r3
81109044:	18c7883a 	add	r3,r3,r3
81109048:	10c5883a 	add	r2,r2,r3
8110904c:	10c0000b 	ldhu	r3,0(r2)
81109050:	d0e0488d 	sth	r3,-32478(gp)
81109054:	1080008b 	ldhu	r2,2(r2)
81109058:	d0a0490d 	sth	r2,-32476(gp)
                                eSenderAckState = sSASending;
8110905c:	00800084 	movi	r2,2
81109060:	e0bff915 	stw	r2,-28(fp)
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
81109064:	e0fffa43 	ldbu	r3,-23(fp)
81109068:	00a04574 	movhi	r2,33045
8110906c:	10b5fb04 	addi	r2,r2,-10260
81109070:	18c7883a 	add	r3,r3,r3
81109074:	18c7883a 	add	r3,r3,r3
81109078:	10c5883a 	add	r2,r2,r3
8110907c:	10000005 	stb	zero,0(r2)
                                break;
81109080:	00000606 	br	8110909c <vOutAckHandlerTask+0x164>
                if ( error_code == OS_ERR_NONE ) {

                    OSMutexPend(xMutexSenderACK, 0, &error_code);
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the ack*/
                        for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109084:	e0bffa43 	ldbu	r2,-23(fp)
81109088:	10800044 	addi	r2,r2,1
8110908c:	e0bffa45 	stb	r2,-23(fp)
81109090:	e0bffa43 	ldbu	r2,-23(fp)
81109094:	10800130 	cmpltui	r2,r2,4
81109098:	103fdb1e 	bne	r2,zero,81109008 <__reset+0xfb0e9008>
                                eSenderAckState = sSASending;
                                xSenderACK[i].cType = 0; /* indicates that this position now can be used by other message*/
                                break;
                            }
                        }
                        OSMutexPost(xMutexSenderACK);
8110909c:	d0a05a17 	ldw	r2,-32408(gp)
811090a0:	1009883a 	mov	r4,r2
811090a4:	112b7280 	call	8112b728 <OSMutexPost>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090a8:	00004406 	br	811091bc <vOutAckHandlerTask+0x284>
                        }
                        OSMutexPost(xMutexSenderACK);
                    } else {
                        /*  Should never get here, will wait without timeout for the semaphore.
                            But if some error accours we will do nothing but print in the console */
                        vFailGetMutexSenderTask();
811090ac:	110c86c0 	call	8110c86c <vFailGetMutexSenderTask>
                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
                }
                break;
811090b0:	00004206 	br	811091bc <vOutAckHandlerTask+0x284>
                    }

                } else {
                    /*  Should never get here, will wait without timeout for the semaphore.
                        But if some error accours we will do nothing but print in the console */
                    vFailGetCountSemaphoreSenderTask();
811090b4:	110c8040 	call	8110c804 <vFailGetCountSemaphoreSenderTask>
                }
                break;
811090b8:	00004006 	br	811091bc <vOutAckHandlerTask+0x284>
			case sSASending:
                /* In this state has a parsed ack packet in the variable xSAckLocal
                   we just need to calc the crc8 and create the uart packet to send. */
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
811090bc:	d0a048c3 	ldbu	r2,-32477(gp)
811090c0:	10c03fcc 	andi	r3,r2,255
811090c4:	18c0201c 	xori	r3,r3,128
811090c8:	18ffe004 	addi	r3,r3,-128
811090cc:	d0a0490b 	ldhu	r2,-32476(gp)
811090d0:	113fffcc 	andi	r4,r2,65535
811090d4:	e0bffb04 	addi	r2,fp,-20
811090d8:	200f883a 	mov	r7,r4
811090dc:	180d883a 	mov	r6,r3
811090e0:	01604534 	movhi	r5,33044
811090e4:	296b8a04 	addi	r5,r5,-20952
811090e8:	1009883a 	mov	r4,r2
811090ec:	11115b40 	call	811115b4 <sprintf>
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
811090f0:	e0bffb04 	addi	r2,fp,-20
811090f4:	1009883a 	mov	r4,r2
811090f8:	11117c80 	call	811117c8 <strlen>
811090fc:	1007883a 	mov	r3,r2
81109100:	e0bffb04 	addi	r2,fp,-20
81109104:	180b883a 	mov	r5,r3
81109108:	1009883a 	mov	r4,r2
8110910c:	110c4f40 	call	8110c4f4 <ucCrc8wInit>
81109110:	e0bffa85 	stb	r2,-22(fp)
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);
81109114:	e13ffa83 	ldbu	r4,-22(fp)
81109118:	e0fffb04 	addi	r3,fp,-20
8110911c:	e0bffb04 	addi	r2,fp,-20
81109120:	200f883a 	mov	r7,r4
81109124:	180d883a 	mov	r6,r3
81109128:	01604534 	movhi	r5,33044
8110912c:	296b8c04 	addi	r5,r5,-20944
81109130:	1009883a 	mov	r4,r2
81109134:	11115b40 	call	811115b4 <sprintf>

                bSuccess = FALSE;
81109138:	e03ff815 	stw	zero,-32(fp)
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
8110913c:	00001406 	br	81109190 <vOutAckHandlerTask+0x258>

                    OSMutexPend(xTxUARTMutex, 5, &error_code); /* Wait 5 ticks = 5 ms */
81109140:	d0a05b17 	ldw	r2,-32404(gp)
81109144:	e0fffac4 	addi	r3,fp,-21
81109148:	180d883a 	mov	r6,r3
8110914c:	01400144 	movi	r5,5
81109150:	1009883a 	mov	r4,r2
81109154:	112b1840 	call	8112b184 <OSMutexPend>
                    if ( error_code == OS_NO_ERR ) {
81109158:	e0bffac3 	ldbu	r2,-21(fp)
8110915c:	10803fcc 	andi	r2,r2,255
81109160:	1000081e 	bne	r2,zero,81109184 <vOutAckHandlerTask+0x24c>
                        puts(cBufferAck);
81109164:	e0bffb04 	addi	r2,fp,-20
81109168:	1009883a 	mov	r4,r2
8110916c:	11112700 	call	81111270 <puts>
                        OSMutexPost(xTxUARTMutex);
81109170:	d0a05b17 	ldw	r2,-32404(gp)
81109174:	1009883a 	mov	r4,r2
81109178:	112b7280 	call	8112b728 <OSMutexPost>
                        bSuccess = TRUE;
8110917c:	00800044 	movi	r2,1
81109180:	e0bff815 	stw	r2,-32(fp)
                    }
                    ucCountRetries++;
81109184:	e0bffa03 	ldbu	r2,-24(fp)
81109188:	10800044 	addi	r2,r2,1
8110918c:	e0bffa05 	stb	r2,-24(fp)
                sprintf(cBufferAck, ACK_SPRINTF, xSAckLocal.cCommand, xSAckLocal.usiId);
                crc = ucCrc8wInit( cBufferAck , strlen(cBufferAck));
                sprintf(cBufferAck, "%s|%hhu;", cBufferAck, crc);

                bSuccess = FALSE;
                while ( ( bSuccess == FALSE ) && ( ucCountRetries < 6 ) ) {
81109190:	e0bff817 	ldw	r2,-32(fp)
81109194:	1000031e 	bne	r2,zero,811091a4 <vOutAckHandlerTask+0x26c>
81109198:	e0bffa03 	ldbu	r2,-24(fp)
8110919c:	108001b0 	cmpltui	r2,r2,6
811091a0:	103fe71e 	bne	r2,zero,81109140 <__reset+0xfb0e9140>
                        bSuccess = TRUE;
                    }
                    ucCountRetries++;
                }

                if (bSuccess == FALSE) {
811091a4:	e0bff817 	ldw	r2,-32(fp)
811091a8:	1000011e 	bne	r2,zero,811091b0 <vOutAckHandlerTask+0x278>
                    /* Could not use the uart tx buffer to send the ack*/
                    vFailGetMutexTxUARTSenderTask();
811091ac:	110c9a40 	call	8110c9a4 <vFailGetMutexTxUARTSenderTask>
                }
                eSenderAckState = sSAGettingACK;
811091b0:	00800044 	movi	r2,1
811091b4:	e0bff915 	stw	r2,-28(fp)
				break;
811091b8:	0001883a 	nop
			default:
				break;
		}
	}
811091bc:	003f7406 	br	81108f90 <__reset+0xfb0e8f90>

811091c0 <vParserCommTask>:


#include "parser_comm_task.h"


void vParserCommTask(void *task_data) {
811091c0:	defffa04 	addi	sp,sp,-24
811091c4:	de00012e 	bgeu	sp,et,811091cc <vParserCommTask+0xc>
811091c8:	003b68fa 	trap	3
811091cc:	dfc00515 	stw	ra,20(sp)
811091d0:	df000415 	stw	fp,16(sp)
811091d4:	df000404 	addi	fp,sp,16
811091d8:	e13fff15 	stw	r4,-4(fp)

	bool bSuccess = FALSE;
811091dc:	e03ffd15 	stw	zero,-12(fp)
	INT8U error_code;
	tParserStates eParserMode;
	static tPreParsed PreParsedLocal;

	#ifdef DEBUG_ON
		debug(fp,"vParserRXTask, enter task.\n");
811091e0:	d0a04d17 	ldw	r2,-32460(gp)
811091e4:	100f883a 	mov	r7,r2
811091e8:	018006c4 	movi	r6,27
811091ec:	01400044 	movi	r5,1
811091f0:	01204534 	movhi	r4,33044
811091f4:	212b8f04 	addi	r4,r4,-20932
811091f8:	11104380 	call	81110438 <fwrite>
	#endif

	eParserMode = sConfiguring;
811091fc:	e03ffc15 	stw	zero,-16(fp)

	for(;;){

		switch (eParserMode) {
81109200:	e0bffc17 	ldw	r2,-16(fp)
81109204:	10800168 	cmpgeui	r2,r2,5
81109208:	1000981e 	bne	r2,zero,8110946c <vParserCommTask+0x2ac>
8110920c:	e0bffc17 	ldw	r2,-16(fp)
81109210:	100690ba 	slli	r3,r2,2
81109214:	00a04474 	movhi	r2,33041
81109218:	10a48a04 	addi	r2,r2,-28120
8110921c:	1885883a 	add	r2,r3,r2
81109220:	10800017 	ldw	r2,0(r2)
81109224:	1000683a 	jmp	r2
81109228:	8110923c 	xorhi	r4,r16,16968
8110922c:	81109248 	cmpgei	r4,r16,16969
81109230:	81109314 	ori	r4,r16,16972
81109234:	811093a8 	cmpgeui	r4,r16,16974
81109238:	811093e8 	cmpgeui	r4,r16,16975
			case sConfiguring:
				/*For future implementations*/
				eParserMode = sWaitingConn;
8110923c:	00800044 	movi	r2,1
81109240:	e0bffc15 	stw	r2,-16(fp)
				break;
81109244:	00008d06 	br	8110947c <vParserCommTask+0x2bc>
			case sWaitingConn:

				bSuccess = FALSE;
81109248:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingConn;
8110924c:	00800044 	movi	r2,1
81109250:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81109254:	d0a04f17 	ldw	r2,-32452(gp)
81109258:	e0fffe04 	addi	r3,fp,-8
8110925c:	180d883a 	mov	r6,r3
81109260:	000b883a 	mov	r5,zero
81109264:	1009883a 	mov	r4,r2
81109268:	112d1900 	call	8112d190 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
8110926c:	e0bffe03 	ldbu	r2,-8(fp)
81109270:	10803fcc 	andi	r2,r2,255
81109274:	1000251e 	bne	r2,zero,8110930c <vParserCommTask+0x14c>
					/* There's command waiting to be threat */

					/* Should post the semaphore to the Sender Task stop to send the Initialization message (Request Status) */
					error_code = OSSemPost(xSemCommInit);
81109278:	d0a04b17 	ldw	r2,-32468(gp)
8110927c:	1009883a 	mov	r4,r2
81109280:	112d5180 	call	8112d518 <OSSemPost>
81109284:	e0bffe05 	stb	r2,-8(fp)
                    if ( error_code == OS_ERR_NONE ) {
81109288:	e0bffe03 	ldbu	r2,-8(fp)
8110928c:	10803fcc 	andi	r2,r2,255
81109290:	1000171e 	bne	r2,zero,811092f0 <vParserCommTask+0x130>

                    	bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81109294:	01204534 	movhi	r4,33044
81109298:	213a9b04 	addi	r4,r4,-5524
8110929c:	11094800 	call	81109480 <getPreParsedPacket>
811092a0:	e0bffd15 	stw	r2,-12(fp)
                    	if (bSuccess == TRUE) {
811092a4:	e0bffd17 	ldw	r2,-12(fp)
811092a8:	10800058 	cmpnei	r2,r2,1
811092ac:	10000e1e 	bne	r2,zero,811092e8 <vParserCommTask+0x128>
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
811092b0:	00a04534 	movhi	r2,33044
811092b4:	10ba9b04 	addi	r2,r2,-5524
811092b8:	10800103 	ldbu	r2,4(r2)
811092bc:	10803fcc 	andi	r2,r2,255
811092c0:	1080201c 	xori	r2,r2,128
811092c4:	10bfe004 	addi	r2,r2,-128
811092c8:	10800858 	cmpnei	r2,r2,33
811092cc:	1000031e 	bne	r2,zero,811092dc <vParserCommTask+0x11c>
                            	eParserMode = sReplyParsing;
811092d0:	00800104 	movi	r2,4
811092d4:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811092d8:	00006706 	br	81109478 <vParserCommTask+0x2b8>
                    	if (bSuccess == TRUE) {
                    		/* PreParsed Content copied to the local variable */
                            if ( PreParsedLocal.cType == START_REPLY_CHAR )
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
811092dc:	008000c4 	movi	r2,3
811092e0:	e0bffc15 	stw	r2,-16(fp)
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811092e4:	00006406 	br	81109478 <vParserCommTask+0x2b8>
                            	eParserMode = sReplyParsing;
                            else
                            	eParserMode = sRequestParsing;
                    	} else {
							/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
							vNoContentInPreParsedBuffer();
811092e8:	110cdf80 	call	8110cdf8 <vNoContentInPreParsedBuffer>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
811092ec:	00006206 	br	81109478 <vParserCommTask+0x2b8>
							vNoContentInPreParsedBuffer();
						}
                    } else {
						/*  Could not post the semaphore that indicates that NUC is connected and send a message.
							this a very IMPORTANT signalization!*/
                    	bSuccess = bTrySendSemaphoreCommInit();
811092f0:	11095980 	call	81109598 <bTrySendSemaphoreCommInit>
811092f4:	e0bffd15 	stw	r2,-12(fp)
						if (bSuccess == TRUE) {
811092f8:	e0bffd17 	ldw	r2,-12(fp)
811092fc:	10800058 	cmpnei	r2,r2,1
81109300:	10005d1e 	bne	r2,zero,81109478 <vParserCommTask+0x2b8>
							vFailSendxSemCommInit();
81109304:	110c6b80 	call	8110c6b8 <vFailSendxSemCommInit>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109308:	00005b06 	br	81109478 <vParserCommTask+0x2b8>
						if (bSuccess == TRUE) {
							vFailSendxSemCommInit();
						}
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
8110930c:	110cd280 	call	8110cd28 <vFailGetCountSemaphorePreParsedBuffer>
				}

				break;
81109310:	00005906 	br	81109478 <vParserCommTask+0x2b8>
			case sWaitingMessage:

				bSuccess = FALSE;
81109314:	e03ffd15 	stw	zero,-12(fp)
				eParserMode = sWaitingMessage;
81109318:	00800084 	movi	r2,2
8110931c:	e0bffc15 	stw	r2,-16(fp)

				OSSemPend(xSemCountPreParsed, 0, &error_code); /*Blocking*/
81109320:	d0a04f17 	ldw	r2,-32452(gp)
81109324:	e0fffe04 	addi	r3,fp,-8
81109328:	180d883a 	mov	r6,r3
8110932c:	000b883a 	mov	r5,zero
81109330:	1009883a 	mov	r4,r2
81109334:	112d1900 	call	8112d190 <OSSemPend>
				if ( error_code == OS_ERR_NONE ) {
81109338:	e0bffe03 	ldbu	r2,-8(fp)
8110933c:	10803fcc 	andi	r2,r2,255
81109340:	1000171e 	bne	r2,zero,811093a0 <vParserCommTask+0x1e0>
					/* There's command waiting to be threat */

					bSuccess = getPreParsedPacket(&PreParsedLocal); /*Blocking*/
81109344:	01204534 	movhi	r4,33044
81109348:	213a9b04 	addi	r4,r4,-5524
8110934c:	11094800 	call	81109480 <getPreParsedPacket>
81109350:	e0bffd15 	stw	r2,-12(fp)
					if (bSuccess == TRUE) {
81109354:	e0bffd17 	ldw	r2,-12(fp)
81109358:	10800058 	cmpnei	r2,r2,1
8110935c:	10000e1e 	bne	r2,zero,81109398 <vParserCommTask+0x1d8>
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
81109360:	00a04534 	movhi	r2,33044
81109364:	10ba9b04 	addi	r2,r2,-5524
81109368:	10800103 	ldbu	r2,4(r2)
8110936c:	10803fcc 	andi	r2,r2,255
81109370:	1080201c 	xori	r2,r2,128
81109374:	10bfe004 	addi	r2,r2,-128
81109378:	10800858 	cmpnei	r2,r2,33
8110937c:	1000031e 	bne	r2,zero,8110938c <vParserCommTask+0x1cc>
							eParserMode = sReplyParsing;
81109380:	00800104 	movi	r2,4
81109384:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109388:	00003c06 	br	8110947c <vParserCommTask+0x2bc>
					if (bSuccess == TRUE) {
						/* PreParsed Content copied to the local variable */
						if ( PreParsedLocal.cType == START_REPLY_CHAR )
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
8110938c:	008000c4 	movi	r2,3
81109390:	e0bffc15 	stw	r2,-16(fp)
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
81109394:	00003906 	br	8110947c <vParserCommTask+0x2bc>
							eParserMode = sReplyParsing;
						else
							eParserMode = sRequestParsing;
					} else {
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
81109398:	110cdf80 	call	8110cdf8 <vNoContentInPreParsedBuffer>
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}
				break;
8110939c:	00003706 	br	8110947c <vParserCommTask+0x2bc>
						/* Semaphore was post by some task but has no message in the PreParsedBuffer*/
						vNoContentInPreParsedBuffer();
					}

				} else {
					vFailGetCountSemaphorePreParsedBuffer();
811093a0:	110cd280 	call	8110cd28 <vFailGetCountSemaphorePreParsedBuffer>
				}
				break;
811093a4:	00003506 	br	8110947c <vParserCommTask+0x2bc>
			case sRequestParsing:
				/* Final parssing after identify that is a request packet */
				/* ATTENTION: In order to avoid overhead of process the response to NUC of simple Requests
				   will be threat here, and send from here the parser_rx.*/
			   	switch (PreParsedLocal.cType)
811093a8:	00a04534 	movhi	r2,33044
811093ac:	10ba9b04 	addi	r2,r2,-5524
811093b0:	10800103 	ldbu	r2,4(r2)
811093b4:	10803fcc 	andi	r2,r2,255
811093b8:	1080201c 	xori	r2,r2,128
811093bc:	10bfe004 	addi	r2,r2,-128
811093c0:	108010e0 	cmpeqi	r2,r2,67
811093c4:	10000426 	beq	r2,zero,811093d8 <vParserCommTask+0x218>
				{
					case ETH_CMD: /*NUC requested the ETH Configuration*/
							vSendEthConf();
811093c8:	110b4140 	call	8110b414 <vSendEthConf>
							eParserMode = sWaitingMessage;
811093cc:	00800084 	movi	r2,2
811093d0:	e0bffc15 	stw	r2,-16(fp)
						break;
811093d4:	00000306 	br	811093e4 <vParserCommTask+0x224>
					default:
						eParserMode = sWaitingMessage;
811093d8:	00800084 	movi	r2,2
811093dc:	e0bffc15 	stw	r2,-16(fp)
						break;
811093e0:	0001883a 	nop
				}
				break;
811093e4:	00002506 	br	8110947c <vParserCommTask+0x2bc>
			case sReplyParsing:
                switch (PreParsedLocal.cType)
811093e8:	00a04534 	movhi	r2,33044
811093ec:	10ba9b04 	addi	r2,r2,-5524
811093f0:	10800103 	ldbu	r2,4(r2)
811093f4:	10803fcc 	andi	r2,r2,255
811093f8:	1080201c 	xori	r2,r2,128
811093fc:	10bfe004 	addi	r2,r2,-128
81109400:	10c01220 	cmpeqi	r3,r2,72
81109404:	1800121e 	bne	r3,zero,81109450 <vParserCommTask+0x290>
81109408:	10c01248 	cmpgei	r3,r2,73
8110940c:	1800031e 	bne	r3,zero,8110941c <vParserCommTask+0x25c>
81109410:	10801120 	cmpeqi	r2,r2,68
81109414:	1000081e 	bne	r2,zero,81109438 <vParserCommTask+0x278>
81109418:	00001006 	br	8110945c <vParserCommTask+0x29c>
8110941c:	10c01420 	cmpeqi	r3,r2,80
81109420:	1800081e 	bne	r3,zero,81109444 <vParserCommTask+0x284>
81109424:	108014e0 	cmpeqi	r2,r2,83
81109428:	10000c26 	beq	r2,zero,8110945c <vParserCommTask+0x29c>
                {
                    case NUC_STATUS_CMD: /*Status from NUC*/

						eParserMode = sWaitingMessage;
8110942c:	00800084 	movi	r2,2
81109430:	e0bffc15 	stw	r2,-16(fp)
                        break;
81109434:	00000c06 	br	81109468 <vParserCommTask+0x2a8>
                    case POWER_OFF_CMD: /*Shut down command from SGSE*/

						eParserMode = sWaitingMessage;
81109438:	00800084 	movi	r2,2
8110943c:	e0bffc15 	stw	r2,-16(fp)
                        break;
81109440:	00000906 	br	81109468 <vParserCommTask+0x2a8>
                    case PUS_CMD: /*PUS command to MEB*/

						eParserMode = sWaitingMessage;
81109444:	00800084 	movi	r2,2
81109448:	e0bffc15 	stw	r2,-16(fp)
                        break;
8110944c:	00000606 	br	81109468 <vParserCommTask+0x2a8>
                    case HEART_BEAT_CMD: /*Heart beating (NUC are you there?)*/

						eParserMode = sWaitingMessage;
81109450:	00800084 	movi	r2,2
81109454:	e0bffc15 	stw	r2,-16(fp)
                        break;
81109458:	00000306 	br	81109468 <vParserCommTask+0x2a8>
                    default:
						eParserMode = sWaitingMessage;
8110945c:	00800084 	movi	r2,2
81109460:	e0bffc15 	stw	r2,-16(fp)
                        break;
81109464:	0001883a 	nop
                }
				break;
81109468:	00000406 	br	8110947c <vParserCommTask+0x2bc>
			default:
				eParserMode = sWaitingMessage;
8110946c:	00800084 	movi	r2,2
81109470:	e0bffc15 	stw	r2,-16(fp)
				break;
81109474:	00000106 	br	8110947c <vParserCommTask+0x2bc>
                    }
				} else {
					vFailGetCountSemaphorePreParsedBuffer();
				}

				break;
81109478:	0001883a 	nop
				break;
			default:
				eParserMode = sWaitingMessage;
				break;
		}
	}
8110947c:	003f6006 	br	81109200 <__reset+0xfb0e9200>

81109480 <getPreParsedPacket>:
}

bool getPreParsedPacket( tPreParsed *xPreParsedParser ) {
81109480:	defffb04 	addi	sp,sp,-20
81109484:	de00012e 	bgeu	sp,et,8110948c <getPreParsedPacket+0xc>
81109488:	003b68fa 	trap	3
8110948c:	dfc00415 	stw	ra,16(sp)
81109490:	df000315 	stw	fp,12(sp)
81109494:	df000304 	addi	fp,sp,12
81109498:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
8110949c:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
811094a0:	d0a05417 	ldw	r2,-32432(gp)
811094a4:	e0fffe44 	addi	r3,fp,-7
811094a8:	180d883a 	mov	r6,r3
811094ac:	000b883a 	mov	r5,zero
811094b0:	1009883a 	mov	r4,r2
811094b4:	112b1840 	call	8112b184 <OSMutexPend>
	if (error_code == OS_ERR_NONE) {
811094b8:	e0bffe43 	ldbu	r2,-7(fp)
811094bc:	10803fcc 	andi	r2,r2,255
811094c0:	10002e1e 	bne	r2,zero,8110957c <getPreParsedPacket+0xfc>
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
811094c4:	e03ffe05 	stb	zero,-8(fp)
811094c8:	00002506 	br	81109560 <getPreParsedPacket+0xe0>
		{
            if ( xPreParsed[i].cType != 0 ) {
811094cc:	e0fffe03 	ldbu	r3,-8(fp)
811094d0:	00a04574 	movhi	r2,33045
811094d4:	10b5ff04 	addi	r2,r2,-10244
811094d8:	18c01324 	muli	r3,r3,76
811094dc:	10c5883a 	add	r2,r2,r3
811094e0:	10800104 	addi	r2,r2,4
811094e4:	10800003 	ldbu	r2,0(r2)
811094e8:	10803fcc 	andi	r2,r2,255
811094ec:	1080201c 	xori	r2,r2,128
811094f0:	10bfe004 	addi	r2,r2,-128
811094f4:	10001726 	beq	r2,zero,81109554 <getPreParsedPacket+0xd4>
                /* Locate a filled PreParsed variable in the array*/
            	/* Perform a copy to a local variable */
            	(*xPreParsedParser) = xPreParsed[i];
811094f8:	e0fffe03 	ldbu	r3,-8(fp)
811094fc:	e13fff17 	ldw	r4,-4(fp)
81109500:	00a04574 	movhi	r2,33045
81109504:	10b5ff04 	addi	r2,r2,-10244
81109508:	18c01324 	muli	r3,r3,76
8110950c:	10c5883a 	add	r2,r2,r3
81109510:	2007883a 	mov	r3,r4
81109514:	1009883a 	mov	r4,r2
81109518:	00801304 	movi	r2,76
8110951c:	100d883a 	mov	r6,r2
81109520:	200b883a 	mov	r5,r4
81109524:	1809883a 	mov	r4,r3
81109528:	1110e4c0 	call	81110e4c <memcpy>
                bSuccess = TRUE;
8110952c:	00800044 	movi	r2,1
81109530:	e0bffd15 	stw	r2,-12(fp)
                xPreParsed[i].cType = 0;
81109534:	e0fffe03 	ldbu	r3,-8(fp)
81109538:	00a04574 	movhi	r2,33045
8110953c:	10b5ff04 	addi	r2,r2,-10244
81109540:	18c01324 	muli	r3,r3,76
81109544:	10c5883a 	add	r2,r2,r3
81109548:	10800104 	addi	r2,r2,4
8110954c:	10000005 	stb	zero,0(r2)
                break;
81109550:	00000606 	br	8110956c <getPreParsedPacket+0xec>

	OSMutexPend(xMutexPreParsed, 0, &error_code); /*Blocking*/
	if (error_code == OS_ERR_NONE) {
		/* Got the Mutex */
		/*For now, will only get the first, not the packet that is waiting for longer time*/
		for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109554:	e0bffe03 	ldbu	r2,-8(fp)
81109558:	10800044 	addi	r2,r2,1
8110955c:	e0bffe05 	stb	r2,-8(fp)
81109560:	e0bffe03 	ldbu	r2,-8(fp)
81109564:	10800130 	cmpltui	r2,r2,4
81109568:	103fd81e 	bne	r2,zero,811094cc <__reset+0xfb0e94cc>
                bSuccess = TRUE;
                xPreParsed[i].cType = 0;
                break;
            }
		}
		OSMutexPost(xMutexPreParsed);
8110956c:	d0a05417 	ldw	r2,-32432(gp)
81109570:	1009883a 	mov	r4,r2
81109574:	112b7280 	call	8112b728 <OSMutexPost>
81109578:	00000106 	br	81109580 <getPreParsedPacket+0x100>
	} else {
		/* Couldn't get Mutex. (Should not get here since is a blocking call without timeout)*/
		vFailGetxMutexPreParsedParserRxTask();
8110957c:	110cd900 	call	8110cd90 <vFailGetxMutexPreParsedParserRxTask>
	}
	return bSuccess;
81109580:	e0bffd17 	ldw	r2,-12(fp)
}
81109584:	e037883a 	mov	sp,fp
81109588:	dfc00117 	ldw	ra,4(sp)
8110958c:	df000017 	ldw	fp,0(sp)
81109590:	dec00204 	addi	sp,sp,8
81109594:	f800283a 	ret

81109598 <bTrySendSemaphoreCommInit>:

bool bTrySendSemaphoreCommInit( void ) {
81109598:	defffc04 	addi	sp,sp,-16
8110959c:	de00012e 	bgeu	sp,et,811095a4 <bTrySendSemaphoreCommInit+0xc>
811095a0:	003b68fa 	trap	3
811095a4:	dfc00315 	stw	ra,12(sp)
811095a8:	df000215 	stw	fp,8(sp)
811095ac:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
811095b0:	e03ffe15 	stw	zero,-8(fp)
	unsigned char ucCountRetries = 0;
811095b4:	e03fff05 	stb	zero,-4(fp)
	INT8U error_code;

	#ifdef DEBUG_ON
		debug(fp,"Can't post semaphore to SenderTask. Trying more 10 times.\n");
811095b8:	d0a04d17 	ldw	r2,-32460(gp)
811095bc:	100f883a 	mov	r7,r2
811095c0:	01800e84 	movi	r6,58
811095c4:	01400044 	movi	r5,1
811095c8:	01204534 	movhi	r4,33044
811095cc:	212b9604 	addi	r4,r4,-20904
811095d0:	11104380 	call	81110438 <fwrite>
	#endif

	ucCountRetries = 0;
811095d4:	e03fff05 	stb	zero,-4(fp)
	do
	{
		ucCountRetries++;
811095d8:	e0bfff03 	ldbu	r2,-4(fp)
811095dc:	10800044 	addi	r2,r2,1
811095e0:	e0bfff05 	stb	r2,-4(fp)
		OSTimeDly(50); /* 50 ticks -> 50 ms -> context switch */
811095e4:	01000c84 	movi	r4,50
811095e8:	112f01c0 	call	8112f01c <OSTimeDly>
		error_code = OSSemPost(xSemCommInit);
811095ec:	d0a04b17 	ldw	r2,-32468(gp)
811095f0:	1009883a 	mov	r4,r2
811095f4:	112d5180 	call	8112d518 <OSSemPost>
811095f8:	e0bfff45 	stb	r2,-3(fp)
	} while ((error_code != OS_ERR_NONE) && (ucCountRetries < 11));
811095fc:	e0bfff43 	ldbu	r2,-3(fp)
81109600:	10000326 	beq	r2,zero,81109610 <bTrySendSemaphoreCommInit+0x78>
81109604:	e0bfff03 	ldbu	r2,-4(fp)
81109608:	108002f0 	cmpltui	r2,r2,11
8110960c:	103ff21e 	bne	r2,zero,811095d8 <__reset+0xfb0e95d8>

	if ( error_code == OS_ERR_NONE ) {
81109610:	e0bfff43 	ldbu	r2,-3(fp)
81109614:	1000021e 	bne	r2,zero,81109620 <bTrySendSemaphoreCommInit+0x88>
		bSuccess = TRUE;
81109618:	00800044 	movi	r2,1
8110961c:	e0bffe15 	stw	r2,-8(fp)
	}

	return bSuccess;
81109620:	e0bffe17 	ldw	r2,-8(fp)
}
81109624:	e037883a 	mov	sp,fp
81109628:	dfc00117 	ldw	ra,4(sp)
8110962c:	df000017 	ldw	fp,0(sp)
81109630:	dec00204 	addi	sp,sp,8
81109634:	f800283a 	ret

81109638 <vReceiverUartTask>:


#include "receiver_uart_task.h"


void vReceiverUartTask(void *task_data) {
81109638:	deffeb04 	addi	sp,sp,-84
8110963c:	de00012e 	bgeu	sp,et,81109644 <vReceiverUartTask+0xc>
81109640:	003b68fa 	trap	3
81109644:	dfc01415 	stw	ra,80(sp)
81109648:	df001315 	stw	fp,76(sp)
8110964c:	df001304 	addi	fp,sp,76
81109650:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109654:	e03fee15 	stw	zero,-72(fp)
    char cReceiveBuffer[SIZE_RCV_BUFFER];
    tReaderStates eReaderRXMode;
    static tPreParsed xPreParsedReader;

    #ifdef DEBUG_ON
        debug(fp,"vFastReaderRX, enter task.\n");
81109658:	d0a04d17 	ldw	r2,-32460(gp)
8110965c:	100f883a 	mov	r7,r2
81109660:	018006c4 	movi	r6,27
81109664:	01400044 	movi	r5,1
81109668:	01204534 	movhi	r4,33044
8110966c:	212ba504 	addi	r4,r4,-20844
81109670:	11104380 	call	81110438 <fwrite>
    #endif

    eReaderRXMode = sRConfiguring;
81109674:	e03fed15 	stw	zero,-76(fp)

    for(;;) {

        switch (eReaderRXMode)
81109678:	e0bfed17 	ldw	r2,-76(fp)
8110967c:	10c00060 	cmpeqi	r3,r2,1
81109680:	1800091e 	bne	r3,zero,811096a8 <vReceiverUartTask+0x70>
81109684:	0080052e 	bgeu	zero,r2,8110969c <vReceiverUartTask+0x64>
81109688:	10c000a0 	cmpeqi	r3,r2,2
8110968c:	1800451e 	bne	r3,zero,811097a4 <vReceiverUartTask+0x16c>
81109690:	108000e0 	cmpeqi	r2,r2,3
81109694:	1000561e 	bne	r2,zero,811097f0 <vReceiverUartTask+0x1b8>
81109698:	00005f06 	br	81109818 <vReceiverUartTask+0x1e0>
        {
            case sRConfiguring:
                /* For future implementations */
                eReaderRXMode = sGetRxUart;
8110969c:	00800044 	movi	r2,1
811096a0:	e0bfed15 	stw	r2,-76(fp)
                break;
811096a4:	00005f06 	br	81109824 <vReceiverUartTask+0x1ec>
            case sGetRxUart:

                memset(cReceiveBuffer, 0, SIZE_RCV_BUFFER);
811096a8:	e0bfef04 	addi	r2,fp,-68
811096ac:	01801004 	movi	r6,64
811096b0:	000b883a 	mov	r5,zero
811096b4:	1009883a 	mov	r4,r2
811096b8:	1110f9c0 	call	81110f9c <memset>
                scanf("%s", cReceiveBuffer);
811096bc:	e0bfef04 	addi	r2,fp,-68
811096c0:	100b883a 	mov	r5,r2
811096c4:	01204534 	movhi	r4,33044
811096c8:	212bac04 	addi	r4,r4,-20816
811096cc:	11114d80 	call	811114d8 <scanf>
                bSuccess = bPreParser( cReceiveBuffer , &xPreParsedReader );
811096d0:	e0bfef04 	addi	r2,fp,-68
811096d4:	01604534 	movhi	r5,33044
811096d8:	297aae04 	addi	r5,r5,-5448
811096dc:	1009883a 	mov	r4,r2
811096e0:	11098280 	call	81109828 <bPreParser>
811096e4:	e0bfee15 	stw	r2,-72(fp)

                if ( bSuccess == TRUE ) {
811096e8:	e0bfee17 	ldw	r2,-72(fp)
811096ec:	10800058 	cmpnei	r2,r2,1
811096f0:	1000161e 	bne	r2,zero,8110974c <vReceiverUartTask+0x114>

                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
811096f4:	00a04534 	movhi	r2,33044
811096f8:	10baae04 	addi	r2,r2,-5448
811096fc:	10800103 	ldbu	r2,4(r2)
81109700:	10803fcc 	andi	r2,r2,255
81109704:	1080201c 	xori	r2,r2,128
81109708:	10bfe004 	addi	r2,r2,-128
8110970c:	10800fe0 	cmpeqi	r2,r2,63
81109710:	1000081e 	bne	r2,zero,81109734 <vReceiverUartTask+0xfc>
81109714:	00a04534 	movhi	r2,33044
81109718:	10baae04 	addi	r2,r2,-5448
8110971c:	10800103 	ldbu	r2,4(r2)
81109720:	10803fcc 	andi	r2,r2,255
81109724:	1080201c 	xori	r2,r2,128
81109728:	10bfe004 	addi	r2,r2,-128
8110972c:	10800858 	cmpnei	r2,r2,33
81109730:	1000031e 	bne	r2,zero,81109740 <vReceiverUartTask+0x108>
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
81109734:	00800084 	movi	r2,2
81109738:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
8110973c:	00003906 	br	81109824 <vReceiverUartTask+0x1ec>
                    if ( (xPreParsedReader.cType == START_REQUEST_CHAR) || (xPreParsedReader.cType == START_REPLY_CHAR) ) {
                        /* The packet is a request or reply sent by the NUC*/
                        eReaderRXMode = sSendToParser;
                    } else {
                        /* The packet is an ACK or NACK sent by the NUC*/
                        eReaderRXMode = sSendToACKReceiver;
81109740:	008000c4 	movi	r2,3
81109744:	e0bfed15 	stw	r2,-76(fp)
                        vFailSendNack();
                    }
                    eReaderRXMode = sGetRxUart;
                }

                break;
81109748:	00003606 	br	81109824 <vReceiverUartTask+0x1ec>
                        eReaderRXMode = sSendToACKReceiver;
                    }

                } else {
                    /*Should Send NACK - Mocking value the only parte that metters is the "cType = '#'" part */
                    xPreParsedReader.cType = '#';
8110974c:	00a04534 	movhi	r2,33044
81109750:	10baae04 	addi	r2,r2,-5448
81109754:	00c008c4 	movi	r3,35
81109758:	10c00105 	stb	r3,4(r2)
                    xPreParsedReader.cCommand = ')';
8110975c:	00a04534 	movhi	r2,33044
81109760:	10baae04 	addi	r2,r2,-5448
81109764:	00c00a44 	movi	r3,41
81109768:	10c00145 	stb	r3,5(r2)
                    xPreParsedReader.usiValues[0] = 1;
8110976c:	00a04534 	movhi	r2,33044
81109770:	10baae04 	addi	r2,r2,-5448
81109774:	00c00044 	movi	r3,1
81109778:	10c0020d 	sth	r3,8(r2)

                    /*Try to send ack to the Ack Sender Task*/
                    bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
8110977c:	01204534 	movhi	r4,33044
81109780:	213aae04 	addi	r4,r4,-5448
81109784:	1109d980 	call	81109d98 <setPreAckSenderFreePos>
81109788:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
8110978c:	e0bfee17 	ldw	r2,-72(fp)
81109790:	1000011e 	bne	r2,zero,81109798 <vReceiverUartTask+0x160>
                        vFailSendNack();
81109794:	110cec80 	call	8110cec8 <vFailSendNack>
                    }
                    eReaderRXMode = sGetRxUart;
81109798:	00800044 	movi	r2,1
8110979c:	e0bfed15 	stw	r2,-76(fp)
                }

                break;
811097a0:	00002006 	br	81109824 <vReceiverUartTask+0x1ec>
            case sSendToParser:

                /* Try to send ack to the Ack Sender Task*/
                bSuccess = setPreAckSenderFreePos( &xPreParsedReader );
811097a4:	01204534 	movhi	r4,33044
811097a8:	213aae04 	addi	r4,r4,-5448
811097ac:	1109d980 	call	81109d98 <setPreAckSenderFreePos>
811097b0:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == TRUE ) {
811097b4:	e0bfee17 	ldw	r2,-72(fp)
811097b8:	10800058 	cmpnei	r2,r2,1
811097bc:	1000081e 	bne	r2,zero,811097e0 <vReceiverUartTask+0x1a8>
                    /* If was possible to send ack, then try to send the command to the Parser Task*/
                    bSuccess = setPreParsedFreePos( &xPreParsedReader );
811097c0:	01204534 	movhi	r4,33044
811097c4:	213aae04 	addi	r4,r4,-5448
811097c8:	1109c380 	call	81109c38 <setPreParsedFreePos>
811097cc:	e0bfee15 	stw	r2,-72(fp)
                    if ( bSuccess == FALSE ) {
811097d0:	e0bfee17 	ldw	r2,-72(fp)
811097d4:	1000031e 	bne	r2,zero,811097e4 <vReceiverUartTask+0x1ac>
                        //TODO
                        /* At this point ack was sent but the command was not sent to the Parser task
                           should sent an error message for the NUC and maye to the SGSE*/
                        vFailSetPreParsedBuffer();
811097d8:	110cf980 	call	8110cf98 <vFailSetPreParsedBuffer>
811097dc:	00000106 	br	811097e4 <vReceiverUartTask+0x1ac>
                    }
                } else {
                    vFailSetPreAckSenderBuffer();
811097e0:	110cf300 	call	8110cf30 <vFailSetPreAckSenderBuffer>
                }
                /* If is not possible to send the ACK for this command then we don't process the command,
                   because it will be sent again by the NUC and we won't wast processing performing the command twice.*/
                eReaderRXMode = sGetRxUart;
811097e4:	00800044 	movi	r2,1
811097e8:	e0bfed15 	stw	r2,-76(fp)
                break;
811097ec:	00000d06 	br	81109824 <vReceiverUartTask+0x1ec>
            case sSendToACKReceiver:

                bSuccess = setPreAckReceiverFreePos( &xPreParsedReader );
811097f0:	01204534 	movhi	r4,33044
811097f4:	213aae04 	addi	r4,r4,-5448
811097f8:	1109f3c0 	call	81109f3c <setPreAckReceiverFreePos>
811097fc:	e0bfee15 	stw	r2,-72(fp)
                if ( bSuccess == FALSE ) {
81109800:	e0bfee17 	ldw	r2,-72(fp)
81109804:	1000011e 	bne	r2,zero,8110980c <vReceiverUartTask+0x1d4>
                    /*If was not possible to receive the ack do nothing.*/
                    vFailSetPreAckReceiverBuffer();
81109808:	110d0000 	call	8110d000 <vFailSetPreAckReceiverBuffer>
                }
                eReaderRXMode = sGetRxUart;
8110980c:	00800044 	movi	r2,1
81109810:	e0bfed15 	stw	r2,-76(fp)
                break;
81109814:	00000306 	br	81109824 <vReceiverUartTask+0x1ec>
            default:
                eReaderRXMode = sGetRxUart;
81109818:	00800044 	movi	r2,1
8110981c:	e0bfed15 	stw	r2,-76(fp)
                break;
81109820:	0001883a 	nop
        }

    }
81109824:	003f9406 	br	81109678 <__reset+0xfb0e9678>

81109828 <bPreParser>:
/*  This function will parse the buffer into a command, will identify if is an request or reply
    also will separate all the values separated by ':'. If the command isn't complete (';' in the final)
    it will return false. */
    /* Max size of parsed value is 6 digits, for now*/
bool bPreParser( char *buffer, tPreParsed *xPerParcedBuffer )
{
81109828:	defff204 	addi	sp,sp,-56
8110982c:	de00012e 	bgeu	sp,et,81109834 <bPreParser+0xc>
81109830:	003b68fa 	trap	3
81109834:	dfc00d15 	stw	ra,52(sp)
81109838:	df000c15 	stw	fp,48(sp)
8110983c:	dc000b15 	stw	r16,44(sp)
81109840:	df000c04 	addi	fp,sp,48
81109844:	e13ffd15 	stw	r4,-12(fp)
81109848:	e17ffe15 	stw	r5,-8(fp)
    bool bSuccess = FALSE;
8110984c:	e03ff415 	stw	zero,-48(fp)
    short int siStrLen, siTeminador, siIniReq, siIniResp, siIniACK, siIniNACK, siCRC;
    unsigned char i;
	char c, *p_inteiro;
	char inteiro[6]; /* Max size of parsed value is 6 digits, for now */

    siStrLen = strlen(buffer);
81109850:	e13ffd17 	ldw	r4,-12(fp)
81109854:	11117c80 	call	811117c8 <strlen>
81109858:	e0bff70d 	sth	r2,-36(fp)
    siTeminador = siPosStr(buffer, FINAL_CHAR);
8110985c:	01400ec4 	movi	r5,59
81109860:	e13ffd17 	ldw	r4,-12(fp)
81109864:	110b6f40 	call	8110b6f4 <siPosStr>
81109868:	e0bff78d 	sth	r2,-34(fp)
    siIniACK = siPosStr(buffer, ACK_CHAR);
8110986c:	01401004 	movi	r5,64
81109870:	e13ffd17 	ldw	r4,-12(fp)
81109874:	110b6f40 	call	8110b6f4 <siPosStr>
81109878:	e0bff80d 	sth	r2,-32(fp)
    siIniNACK = siPosStr(buffer, NACK_CHAR);
8110987c:	014008c4 	movi	r5,35
81109880:	e13ffd17 	ldw	r4,-12(fp)
81109884:	110b6f40 	call	8110b6f4 <siPosStr>
81109888:	e0bff88d 	sth	r2,-30(fp)
    siIniACK = min_sim(siIniACK, siIniNACK);
8110988c:	e17ff80b 	ldhu	r5,-32(fp)
81109890:	e0bff88b 	ldhu	r2,-30(fp)
81109894:	10ffffcc 	andi	r3,r2,65535
81109898:	18e0001c 	xori	r3,r3,32768
8110989c:	18e00004 	addi	r3,r3,-32768
811098a0:	293fffcc 	andi	r4,r5,65535
811098a4:	2120001c 	xori	r4,r4,32768
811098a8:	21200004 	addi	r4,r4,-32768
811098ac:	20c0010e 	bge	r4,r3,811098b4 <bPreParser+0x8c>
811098b0:	2805883a 	mov	r2,r5
811098b4:	e0bff80d 	sth	r2,-32(fp)
    siIniReq = siPosStr(buffer, START_REQUEST_CHAR);
811098b8:	01400fc4 	movi	r5,63
811098bc:	e13ffd17 	ldw	r4,-12(fp)
811098c0:	110b6f40 	call	8110b6f4 <siPosStr>
811098c4:	e0bff90d 	sth	r2,-28(fp)
    siIniResp = siPosStr(buffer, START_REPLY_CHAR);
811098c8:	01400844 	movi	r5,33
811098cc:	e13ffd17 	ldw	r4,-12(fp)
811098d0:	110b6f40 	call	8110b6f4 <siPosStr>
811098d4:	e0bff98d 	sth	r2,-26(fp)
    siIniReq = min_sim(siIniReq, siIniResp);
811098d8:	e17ff90b 	ldhu	r5,-28(fp)
811098dc:	e0bff98b 	ldhu	r2,-26(fp)
811098e0:	10ffffcc 	andi	r3,r2,65535
811098e4:	18e0001c 	xori	r3,r3,32768
811098e8:	18e00004 	addi	r3,r3,-32768
811098ec:	293fffcc 	andi	r4,r5,65535
811098f0:	2120001c 	xori	r4,r4,32768
811098f4:	21200004 	addi	r4,r4,-32768
811098f8:	20c0010e 	bge	r4,r3,81109900 <bPreParser+0xd8>
811098fc:	2805883a 	mov	r2,r5
81109900:	e0bff90d 	sth	r2,-28(fp)
    siIniReq = min_sim(siIniReq, siIniACK);
81109904:	e17ff90b 	ldhu	r5,-28(fp)
81109908:	e0bff80b 	ldhu	r2,-32(fp)
8110990c:	10ffffcc 	andi	r3,r2,65535
81109910:	18e0001c 	xori	r3,r3,32768
81109914:	18e00004 	addi	r3,r3,-32768
81109918:	293fffcc 	andi	r4,r5,65535
8110991c:	2120001c 	xori	r4,r4,32768
81109920:	21200004 	addi	r4,r4,-32768
81109924:	20c0010e 	bge	r4,r3,8110992c <bPreParser+0x104>
81109928:	2805883a 	mov	r2,r5
8110992c:	e0bff90d 	sth	r2,-28(fp)
    siCRC = siPosStr(buffer, SEPARATOR_CRC);
81109930:	01401f04 	movi	r5,124
81109934:	e13ffd17 	ldw	r4,-12(fp)
81109938:	110b6f40 	call	8110b6f4 <siPosStr>
8110993c:	e0bffa0d 	sth	r2,-24(fp)

    /* Check if there is [!|?] , |, ; in the packet*/
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {
81109940:	e0fff78f 	ldh	r3,-34(fp)
81109944:	e0bff70f 	ldh	r2,-36(fp)
81109948:	10bfffc4 	addi	r2,r2,-1
8110994c:	1880ac1e 	bne	r3,r2,81109c00 <bPreParser+0x3d8>
81109950:	e0fffa0f 	ldh	r3,-24(fp)
81109954:	e0bff78f 	ldh	r2,-34(fp)
81109958:	1880a90e 	bge	r3,r2,81109c00 <bPreParser+0x3d8>
8110995c:	e0fff90f 	ldh	r3,-28(fp)
81109960:	e0bffa0f 	ldh	r2,-24(fp)
81109964:	1880a60e 	bge	r3,r2,81109c00 <bPreParser+0x3d8>

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
81109968:	e0bff90f 	ldh	r2,-28(fp)
8110996c:	e0fffd17 	ldw	r3,-12(fp)
81109970:	1889883a 	add	r4,r3,r2
81109974:	e0fffa0f 	ldh	r3,-24(fp)
81109978:	e0bff90f 	ldh	r2,-28(fp)
8110997c:	1885c83a 	sub	r2,r3,r2
81109980:	100b883a 	mov	r5,r2
81109984:	110c4f40 	call	8110c4f4 <ucCrc8wInit>
81109988:	1007883a 	mov	r3,r2
8110998c:	e0bffe17 	ldw	r2,-8(fp)
81109990:	10c01205 	stb	r3,72(r2)
        xPerParcedBuffer->cType = buffer[siIniReq];
81109994:	e0bff90f 	ldh	r2,-28(fp)
81109998:	e0fffd17 	ldw	r3,-12(fp)
8110999c:	1885883a 	add	r2,r3,r2
811099a0:	10c00003 	ldbu	r3,0(r2)
811099a4:	e0bffe17 	ldw	r2,-8(fp)
811099a8:	10c00105 	stb	r3,4(r2)

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811099ac:	e0bffe17 	ldw	r2,-8(fp)
811099b0:	10800103 	ldbu	r2,4(r2)
811099b4:	10803fcc 	andi	r2,r2,255
811099b8:	1080201c 	xori	r2,r2,128
811099bc:	10bfe004 	addi	r2,r2,-128
811099c0:	108008d8 	cmpnei	r2,r2,35
811099c4:	1000091e 	bne	r2,zero,811099ec <bPreParser+0x1c4>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
811099c8:	e0bffe17 	ldw	r2,-8(fp)
811099cc:	00c00d84 	movi	r3,54
811099d0:	10c01245 	stb	r3,73(r2)
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
811099d4:	e0bffe17 	ldw	r2,-8(fp)
811099d8:	00c00d84 	movi	r3,54
811099dc:	10c01205 	stb	r3,72(r2)
            bSuccess = TRUE;
811099e0:	00800044 	movi	r2,1
811099e4:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
811099e8:	00008606 	br	81109c04 <bPreParser+0x3dc>
            xPerParcedBuffer->ucMessageCRC8 = 54; /*CRC8("#")=54*/
            xPerParcedBuffer->ucCalculatedCRC8 = 54; /*Even if calculated crc is wrong we should re-send the commands*/
            bSuccess = TRUE;
        } else {
            xPerParcedBuffer->cCommand = buffer[siIniReq+1];
811099ec:	e0bff90f 	ldh	r2,-28(fp)
811099f0:	10800044 	addi	r2,r2,1
811099f4:	e0fffd17 	ldw	r3,-12(fp)
811099f8:	1885883a 	add	r2,r3,r2
811099fc:	10c00003 	ldbu	r3,0(r2)
81109a00:	e0bffe17 	ldw	r2,-8(fp)
81109a04:	10c00145 	stb	r3,5(r2)
            xPerParcedBuffer->ucNofBytes = 0;
81109a08:	e0bffe17 	ldw	r2,-8(fp)
81109a0c:	10000185 	stb	zero,6(r2)
            memset( xPerParcedBuffer->usiValues , 0 , SIZE_UCVALUES);
81109a10:	e0bffe17 	ldw	r2,-8(fp)
81109a14:	10800204 	addi	r2,r2,8
81109a18:	01800804 	movi	r6,32
81109a1c:	000b883a 	mov	r5,zero
81109a20:	1009883a 	mov	r4,r2
81109a24:	1110f9c0 	call	81110f9c <memset>

            i = siIniReq + 3; /* "?C:i..." */
81109a28:	e0bff90b 	ldhu	r2,-28(fp)
81109a2c:	108000c4 	addi	r2,r2,3
81109a30:	e0bff505 	stb	r2,-44(fp)
            do {
                p_inteiro = inteiro;
81109a34:	e0bffac4 	addi	r2,fp,-21
81109a38:	e0bff615 	stw	r2,-40(fp)
                memset( &(inteiro) , 0 , sizeof( inteiro ) );
81109a3c:	e0bffac4 	addi	r2,fp,-21
81109a40:	01800184 	movi	r6,6
81109a44:	000b883a 	mov	r5,zero
81109a48:	1009883a 	mov	r4,r2
81109a4c:	1110f9c0 	call	81110f9c <memset>
                do {
                    c = buffer[i];
81109a50:	e0bff503 	ldbu	r2,-44(fp)
81109a54:	e0fffd17 	ldw	r3,-12(fp)
81109a58:	1885883a 	add	r2,r3,r2
81109a5c:	10800003 	ldbu	r2,0(r2)
81109a60:	e0bffa85 	stb	r2,-22(fp)
                    if ( isdigit( c ) ) {
81109a64:	d0e00317 	ldw	r3,-32756(gp)
81109a68:	e0bffa87 	ldb	r2,-22(fp)
81109a6c:	10800044 	addi	r2,r2,1
81109a70:	1885883a 	add	r2,r3,r2
81109a74:	10800003 	ldbu	r2,0(r2)
81109a78:	10803fcc 	andi	r2,r2,255
81109a7c:	1080010c 	andi	r2,r2,4
81109a80:	10000626 	beq	r2,zero,81109a9c <bPreParser+0x274>
                        (*p_inteiro) = c;
81109a84:	e0bff617 	ldw	r2,-40(fp)
81109a88:	e0fffa83 	ldbu	r3,-22(fp)
81109a8c:	10c00005 	stb	r3,0(r2)
                        p_inteiro++;
81109a90:	e0bff617 	ldw	r2,-40(fp)
81109a94:	10800044 	addi	r2,r2,1
81109a98:	e0bff615 	stw	r2,-40(fp)
                    }
                    i++;
81109a9c:	e0bff503 	ldbu	r2,-44(fp)
81109aa0:	10800044 	addi	r2,r2,1
81109aa4:	e0bff505 	stb	r2,-44(fp)
                } while ( (siStrLen>i) && ( ( c != SEPARATOR_CHAR ) && ( c != FINAL_CHAR ) && ( c != SEPARATOR_CRC )) ); //ASCII: 58 = ':' 59 = ';' and '|'
81109aa8:	e0bff70f 	ldh	r2,-36(fp)
81109aac:	e0fff503 	ldbu	r3,-44(fp)
81109ab0:	1880090e 	bge	r3,r2,81109ad8 <bPreParser+0x2b0>
81109ab4:	e0bffa87 	ldb	r2,-22(fp)
81109ab8:	10800ea0 	cmpeqi	r2,r2,58
81109abc:	1000061e 	bne	r2,zero,81109ad8 <bPreParser+0x2b0>
81109ac0:	e0bffa87 	ldb	r2,-22(fp)
81109ac4:	10800ee0 	cmpeqi	r2,r2,59
81109ac8:	1000031e 	bne	r2,zero,81109ad8 <bPreParser+0x2b0>
81109acc:	e0bffa87 	ldb	r2,-22(fp)
81109ad0:	10801f18 	cmpnei	r2,r2,124
81109ad4:	103fde1e 	bne	r2,zero,81109a50 <__reset+0xfb0e9a50>
                (*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
81109ad8:	e0bff617 	ldw	r2,-40(fp)
81109adc:	00c00284 	movi	r3,10
81109ae0:	10c00005 	stb	r3,0(r2)

                if ( ( c == SEPARATOR_CHAR ) || ( c == SEPARATOR_CRC ) ) {
81109ae4:	e0bffa87 	ldb	r2,-22(fp)
81109ae8:	10800ea0 	cmpeqi	r2,r2,58
81109aec:	1000031e 	bne	r2,zero,81109afc <bPreParser+0x2d4>
81109af0:	e0bffa87 	ldb	r2,-22(fp)
81109af4:	10801f18 	cmpnei	r2,r2,124
81109af8:	10001a1e 	bne	r2,zero,81109b64 <bPreParser+0x33c>
                    xPerParcedBuffer->usiValues[min_sim(xPerParcedBuffer->ucNofBytes,SIZE_UCVALUES)] = (unsigned short int)atoi( inteiro );
81109afc:	e0bffe17 	ldw	r2,-8(fp)
81109b00:	10800183 	ldbu	r2,6(r2)
81109b04:	10803fcc 	andi	r2,r2,255
81109b08:	10800828 	cmpgeui	r2,r2,32
81109b0c:	1000041e 	bne	r2,zero,81109b20 <bPreParser+0x2f8>
81109b10:	e0bffe17 	ldw	r2,-8(fp)
81109b14:	10800183 	ldbu	r2,6(r2)
81109b18:	14003fcc 	andi	r16,r2,255
81109b1c:	00000106 	br	81109b24 <bPreParser+0x2fc>
81109b20:	04000804 	movi	r16,32
81109b24:	e0bffac4 	addi	r2,fp,-21
81109b28:	1009883a 	mov	r4,r2
81109b2c:	110fcf00 	call	8110fcf0 <atoi>
81109b30:	1009883a 	mov	r4,r2
81109b34:	e0fffe17 	ldw	r3,-8(fp)
81109b38:	80800104 	addi	r2,r16,4
81109b3c:	1085883a 	add	r2,r2,r2
81109b40:	1885883a 	add	r2,r3,r2
81109b44:	1100000d 	sth	r4,0(r2)
                    xPerParcedBuffer->ucNofBytes++;
81109b48:	e0bffe17 	ldw	r2,-8(fp)
81109b4c:	10800183 	ldbu	r2,6(r2)
81109b50:	10800044 	addi	r2,r2,1
81109b54:	1007883a 	mov	r3,r2
81109b58:	e0bffe17 	ldw	r2,-8(fp)
81109b5c:	10c00185 	stb	r3,6(r2)
81109b60:	00000906 	br	81109b88 <bPreParser+0x360>
                }
                else if ( c == FINAL_CHAR )
81109b64:	e0bffa87 	ldb	r2,-22(fp)
81109b68:	10800ed8 	cmpnei	r2,r2,59
81109b6c:	1000061e 	bne	r2,zero,81109b88 <bPreParser+0x360>
                {
                    xPerParcedBuffer->ucMessageCRC8 = (unsigned char)atoi( inteiro );
81109b70:	e0bffac4 	addi	r2,fp,-21
81109b74:	1009883a 	mov	r4,r2
81109b78:	110fcf00 	call	8110fcf0 <atoi>
81109b7c:	1007883a 	mov	r3,r2
81109b80:	e0bffe17 	ldw	r2,-8(fp)
81109b84:	10c01245 	stb	r3,73(r2)
                }

            } while ( (c != FINAL_CHAR) && (siStrLen>i) );
81109b88:	e0bffa87 	ldb	r2,-22(fp)
81109b8c:	10800ee0 	cmpeqi	r2,r2,59
81109b90:	1000031e 	bne	r2,zero,81109ba0 <bPreParser+0x378>
81109b94:	e0bff70f 	ldh	r2,-36(fp)
81109b98:	e0fff503 	ldbu	r3,-44(fp)
81109b9c:	18bfa516 	blt	r3,r2,81109a34 <__reset+0xfb0e9a34>

            if ( c == FINAL_CHAR )
81109ba0:	e0bffa87 	ldb	r2,-22(fp)
81109ba4:	10800ed8 	cmpnei	r2,r2,59
81109ba8:	1000131e 	bne	r2,zero,81109bf8 <bPreParser+0x3d0>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
81109bac:	e0bffe17 	ldw	r2,-8(fp)
81109bb0:	10c01243 	ldbu	r3,73(r2)
81109bb4:	e0bffe17 	ldw	r2,-8(fp)
81109bb8:	10801203 	ldbu	r2,72(r2)
81109bbc:	18c03fcc 	andi	r3,r3,255
81109bc0:	10803fcc 	andi	r2,r2,255
81109bc4:	1880031e 	bne	r3,r2,81109bd4 <bPreParser+0x3ac>
                    bSuccess = TRUE;
81109bc8:	00800044 	movi	r2,1
81109bcc:	e0bff415 	stw	r2,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81109bd0:	00000c06 	br	81109c04 <bPreParser+0x3dc>
                if ( xPerParcedBuffer->ucMessageCRC8 == xPerParcedBuffer->ucCalculatedCRC8 ){
                    bSuccess = TRUE;
                } else {
                    /* Wrong CRC */
                    #ifdef DEBUG_ON
                        debug(fp,"Wrong CRC. Pre Parsed.\n");
81109bd4:	d0a04d17 	ldw	r2,-32460(gp)
81109bd8:	100f883a 	mov	r7,r2
81109bdc:	018005c4 	movi	r6,23
81109be0:	01400044 	movi	r5,1
81109be4:	01204534 	movhi	r4,33044
81109be8:	212bad04 	addi	r4,r4,-20812
81109bec:	11104380 	call	81110438 <fwrite>
                    #endif
                    bSuccess = FALSE;
81109bf0:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81109bf4:	00000306 	br	81109c04 <bPreParser+0x3dc>
                    #endif
                    bSuccess = FALSE;
                }

            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
81109bf8:	e03ff415 	stw	zero,-48(fp)
    if ( (siTeminador == (siStrLen-1)) && (siCRC < siTeminador) && (siIniReq < siCRC) ) {

        xPerParcedBuffer->ucCalculatedCRC8 = ucCrc8wInit(&buffer[siIniReq] , (siCRC - siIniReq) );
        xPerParcedBuffer->cType = buffer[siIniReq];

        if (xPerParcedBuffer->cType == NACK_CHAR ) {
81109bfc:	00000106 	br	81109c04 <bPreParser+0x3dc>
            else
                bSuccess = FALSE; /*Index overflow in the buffer*/
            }
    } else {
        /*Malformed Packet*/
        bSuccess = FALSE;
81109c00:	e03ff415 	stw	zero,-48(fp)
    }
    memset(buffer,0,strlen(buffer));
81109c04:	e13ffd17 	ldw	r4,-12(fp)
81109c08:	11117c80 	call	811117c8 <strlen>
81109c0c:	100d883a 	mov	r6,r2
81109c10:	000b883a 	mov	r5,zero
81109c14:	e13ffd17 	ldw	r4,-12(fp)
81109c18:	1110f9c0 	call	81110f9c <memset>

    return bSuccess;
81109c1c:	e0bff417 	ldw	r2,-48(fp)
}
81109c20:	e6ffff04 	addi	sp,fp,-4
81109c24:	dfc00217 	ldw	ra,8(sp)
81109c28:	df000117 	ldw	fp,4(sp)
81109c2c:	dc000017 	ldw	r16,0(sp)
81109c30:	dec00304 	addi	sp,sp,12
81109c34:	f800283a 	ret

81109c38 <setPreParsedFreePos>:

/* Search for a Free location to put the pre parsed packet in the pipe for the ParserTask */
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
81109c38:	defffb04 	addi	sp,sp,-20
81109c3c:	de00012e 	bgeu	sp,et,81109c44 <setPreParsedFreePos+0xc>
81109c40:	003b68fa 	trap	3
81109c44:	dfc00415 	stw	ra,16(sp)
81109c48:	df000315 	stw	fp,12(sp)
81109c4c:	df000304 	addi	fp,sp,12
81109c50:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109c54:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81109c58:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109c5c:	00004306 	br	81109d6c <setPreParsedFreePos+0x134>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81109c60:	d0a05417 	ldw	r2,-32432(gp)
81109c64:	e0fffe84 	addi	r3,fp,-6
81109c68:	180d883a 	mov	r6,r3
81109c6c:	01400084 	movi	r5,2
81109c70:	1009883a 	mov	r4,r2
81109c74:	112b1840 	call	8112b184 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81109c78:	e0bffe83 	ldbu	r2,-6(fp)
81109c7c:	10803fcc 	andi	r2,r2,255
81109c80:	1000371e 	bne	r2,zero,81109d60 <setPreParsedFreePos+0x128>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109c84:	e03ffe45 	stb	zero,-7(fp)
81109c88:	00002e06 	br	81109d44 <setPreParsedFreePos+0x10c>
            {
                if ( xPreParsed[i].cType == 0 ) {
81109c8c:	e0fffe43 	ldbu	r3,-7(fp)
81109c90:	00a04574 	movhi	r2,33045
81109c94:	10b5ff04 	addi	r2,r2,-10244
81109c98:	18c01324 	muli	r3,r3,76
81109c9c:	10c5883a 	add	r2,r2,r3
81109ca0:	10800104 	addi	r2,r2,4
81109ca4:	10800003 	ldbu	r2,0(r2)
81109ca8:	10803fcc 	andi	r2,r2,255
81109cac:	1080201c 	xori	r2,r2,128
81109cb0:	10bfe004 	addi	r2,r2,-128
81109cb4:	1000201e 	bne	r2,zero,81109d38 <setPreParsedFreePos+0x100>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xPreParsed[i] = (*xPrePReader);
81109cb8:	e0fffe43 	ldbu	r3,-7(fp)
81109cbc:	00a04574 	movhi	r2,33045
81109cc0:	10b5ff04 	addi	r2,r2,-10244
81109cc4:	18c01324 	muli	r3,r3,76
81109cc8:	10c7883a 	add	r3,r2,r3
81109ccc:	e0bfff17 	ldw	r2,-4(fp)
81109cd0:	1009883a 	mov	r4,r2
81109cd4:	00801304 	movi	r2,76
81109cd8:	100d883a 	mov	r6,r2
81109cdc:	200b883a 	mov	r5,r4
81109ce0:	1809883a 	mov	r4,r3
81109ce4:	1110e4c0 	call	81110e4c <memcpy>
                    error_code = OSSemPost(xSemCountPreParsed);
81109ce8:	d0a04f17 	ldw	r2,-32452(gp)
81109cec:	1009883a 	mov	r4,r2
81109cf0:	112d5180 	call	8112d518 <OSSemPost>
81109cf4:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81109cf8:	e0bffe83 	ldbu	r2,-6(fp)
81109cfc:	10803fcc 	andi	r2,r2,255
81109d00:	1000031e 	bne	r2,zero,81109d10 <setPreParsedFreePos+0xd8>
                        bSuccess = TRUE;
81109d04:	00800044 	movi	r2,1
81109d08:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreParsedSemaphore();
                        xPreParsed[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81109d0c:	00001006 	br	81109d50 <setPreParsedFreePos+0x118>
                    xPreParsed[i] = (*xPrePReader);
                    error_code = OSSemPost(xSemCountPreParsed);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreParsedSemaphore();
81109d10:	110c7200 	call	8110c720 <vFailSendPreParsedSemaphore>
                        xPreParsed[i].cType = 0;
81109d14:	e0fffe43 	ldbu	r3,-7(fp)
81109d18:	00a04574 	movhi	r2,33045
81109d1c:	10b5ff04 	addi	r2,r2,-10244
81109d20:	18c01324 	muli	r3,r3,76
81109d24:	10c5883a 	add	r2,r2,r3
81109d28:	10800104 	addi	r2,r2,4
81109d2c:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81109d30:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81109d34:	00000606 	br	81109d50 <setPreParsedFreePos+0x118>

        OSMutexPend(xMutexPreParsed, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_PREPARSED_ENTRIES; i++)
81109d38:	e0bffe43 	ldbu	r2,-7(fp)
81109d3c:	10800044 	addi	r2,r2,1
81109d40:	e0bffe45 	stb	r2,-7(fp)
81109d44:	e0bffe43 	ldbu	r2,-7(fp)
81109d48:	10800130 	cmpltui	r2,r2,4
81109d4c:	103fcf1e 	bne	r2,zero,81109c8c <__reset+0xfb0e9c8c>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexPreParsed);
81109d50:	d0a05417 	ldw	r2,-32432(gp)
81109d54:	1009883a 	mov	r4,r2
81109d58:	112b7280 	call	8112b728 <OSMutexPost>
81109d5c:	00000306 	br	81109d6c <setPreParsedFreePos+0x134>
        } else {
            ucCountRetries++;
81109d60:	e0bffe03 	ldbu	r2,-8(fp)
81109d64:	10800044 	addi	r2,r2,1
81109d68:	e0bffe05 	stb	r2,-8(fp)
bool setPreParsedFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109d6c:	e0bffd17 	ldw	r2,-12(fp)
81109d70:	1000031e 	bne	r2,zero,81109d80 <setPreParsedFreePos+0x148>
81109d74:	e0bffe03 	ldbu	r2,-8(fp)
81109d78:	108000b0 	cmpltui	r2,r2,2
81109d7c:	103fb81e 	bne	r2,zero,81109c60 <__reset+0xfb0e9c60>
            OSMutexPost(xMutexPreParsed);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81109d80:	e0bffd17 	ldw	r2,-12(fp)
}
81109d84:	e037883a 	mov	sp,fp
81109d88:	dfc00117 	ldw	ra,4(sp)
81109d8c:	df000017 	ldw	fp,0(sp)
81109d90:	dec00204 	addi	sp,sp,8
81109d94:	f800283a 	ret

81109d98 <setPreAckSenderFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckSenderFreePos( tPreParsed *xPrePReader ) {
81109d98:	defffb04 	addi	sp,sp,-20
81109d9c:	de00012e 	bgeu	sp,et,81109da4 <setPreAckSenderFreePos+0xc>
81109da0:	003b68fa 	trap	3
81109da4:	dfc00415 	stw	ra,16(sp)
81109da8:	df000315 	stw	fp,12(sp)
81109dac:	df000304 	addi	fp,sp,12
81109db0:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109db4:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81109db8:	e03ffe05 	stb	zero,-8(fp)

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109dbc:	00005406 	br	81109f10 <setPreAckSenderFreePos+0x178>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
81109dc0:	d0a05a17 	ldw	r2,-32408(gp)
81109dc4:	e0fffe84 	addi	r3,fp,-6
81109dc8:	180d883a 	mov	r6,r3
81109dcc:	01400104 	movi	r5,4
81109dd0:	1009883a 	mov	r4,r2
81109dd4:	112b1840 	call	8112b184 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81109dd8:	e0bffe83 	ldbu	r2,-6(fp)
81109ddc:	10803fcc 	andi	r2,r2,255
81109de0:	1000481e 	bne	r2,zero,81109f04 <setPreAckSenderFreePos+0x16c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109de4:	e03ffe45 	stb	zero,-7(fp)
81109de8:	00003f06 	br	81109ee8 <setPreAckSenderFreePos+0x150>
            {
                if ( xSenderACK[i].cType == 0 ) {
81109dec:	e0fffe43 	ldbu	r3,-7(fp)
81109df0:	00a04574 	movhi	r2,33045
81109df4:	10b5fb04 	addi	r2,r2,-10260
81109df8:	18c7883a 	add	r3,r3,r3
81109dfc:	18c7883a 	add	r3,r3,r3
81109e00:	10c5883a 	add	r2,r2,r3
81109e04:	10800003 	ldbu	r2,0(r2)
81109e08:	10803fcc 	andi	r2,r2,255
81109e0c:	1080201c 	xori	r2,r2,128
81109e10:	10bfe004 	addi	r2,r2,-128
81109e14:	1000311e 	bne	r2,zero,81109edc <setPreAckSenderFreePos+0x144>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xSenderACK[i].cType = xPrePReader->cType;
81109e18:	e0fffe43 	ldbu	r3,-7(fp)
81109e1c:	e0bfff17 	ldw	r2,-4(fp)
81109e20:	11000103 	ldbu	r4,4(r2)
81109e24:	00a04574 	movhi	r2,33045
81109e28:	10b5fb04 	addi	r2,r2,-10260
81109e2c:	18c7883a 	add	r3,r3,r3
81109e30:	18c7883a 	add	r3,r3,r3
81109e34:	10c5883a 	add	r2,r2,r3
81109e38:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].cCommand = xPrePReader->cCommand;
81109e3c:	e0fffe43 	ldbu	r3,-7(fp)
81109e40:	e0bfff17 	ldw	r2,-4(fp)
81109e44:	11000143 	ldbu	r4,5(r2)
81109e48:	00a04574 	movhi	r2,33045
81109e4c:	10b5fb04 	addi	r2,r2,-10260
81109e50:	18c7883a 	add	r3,r3,r3
81109e54:	18c7883a 	add	r3,r3,r3
81109e58:	10c5883a 	add	r2,r2,r3
81109e5c:	10800044 	addi	r2,r2,1
81109e60:	11000005 	stb	r4,0(r2)
                    xSenderACK[i].usiId = xPrePReader->usiValues[0]; /*The first value is always the command id*/
81109e64:	e0fffe43 	ldbu	r3,-7(fp)
81109e68:	e0bfff17 	ldw	r2,-4(fp)
81109e6c:	1100020b 	ldhu	r4,8(r2)
81109e70:	00a04574 	movhi	r2,33045
81109e74:	10b5fb04 	addi	r2,r2,-10260
81109e78:	18c7883a 	add	r3,r3,r3
81109e7c:	18c7883a 	add	r3,r3,r3
81109e80:	10c5883a 	add	r2,r2,r3
81109e84:	10800084 	addi	r2,r2,2
81109e88:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountSenderACK);
81109e8c:	d0a04c17 	ldw	r2,-32464(gp)
81109e90:	1009883a 	mov	r4,r2
81109e94:	112d5180 	call	8112d518 <OSSemPost>
81109e98:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
81109e9c:	e0bffe83 	ldbu	r2,-6(fp)
81109ea0:	10803fcc 	andi	r2,r2,255
81109ea4:	1000031e 	bne	r2,zero,81109eb4 <setPreAckSenderFreePos+0x11c>
                        bSuccess = TRUE;
81109ea8:	00800044 	movi	r2,1
81109eac:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckSenderSemaphore();
                        xSenderACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
81109eb0:	00001006 	br	81109ef4 <setPreAckSenderFreePos+0x15c>

                    error_code = OSSemPost(xSemCountSenderACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckSenderSemaphore();
81109eb4:	110c7b80 	call	8110c7b8 <vFailSendPreAckSenderSemaphore>
                        xSenderACK[i].cType = 0;
81109eb8:	e0fffe43 	ldbu	r3,-7(fp)
81109ebc:	00a04574 	movhi	r2,33045
81109ec0:	10b5fb04 	addi	r2,r2,-10260
81109ec4:	18c7883a 	add	r3,r3,r3
81109ec8:	18c7883a 	add	r3,r3,r3
81109ecc:	10c5883a 	add	r2,r2,r3
81109ed0:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
81109ed4:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
81109ed8:	00000606 	br	81109ef4 <setPreAckSenderFreePos+0x15c>

        OSMutexPend(xMutexSenderACK, 4, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 4 ticks = 4 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_SENDER; i++)
81109edc:	e0bffe43 	ldbu	r2,-7(fp)
81109ee0:	10800044 	addi	r2,r2,1
81109ee4:	e0bffe45 	stb	r2,-7(fp)
81109ee8:	e0bffe43 	ldbu	r2,-7(fp)
81109eec:	10800130 	cmpltui	r2,r2,4
81109ef0:	103fbe1e 	bne	r2,zero,81109dec <__reset+0xfb0e9dec>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexSenderACK);
81109ef4:	d0a05a17 	ldw	r2,-32408(gp)
81109ef8:	1009883a 	mov	r4,r2
81109efc:	112b7280 	call	8112b728 <OSMutexPost>
81109f00:	00000306 	br	81109f10 <setPreAckSenderFreePos+0x178>
        } else {
            ucCountRetries++;
81109f04:	e0bffe03 	ldbu	r2,-8(fp)
81109f08:	10800044 	addi	r2,r2,1
81109f0c:	e0bffe05 	stb	r2,-8(fp)
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    /* Try to send the ACK/NACK packet to the Sender Ack Task only 2 times, to not block the fast receiver */
    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109f10:	e0bffd17 	ldw	r2,-12(fp)
81109f14:	1000031e 	bne	r2,zero,81109f24 <setPreAckSenderFreePos+0x18c>
81109f18:	e0bffe03 	ldbu	r2,-8(fp)
81109f1c:	108000b0 	cmpltui	r2,r2,2
81109f20:	103fa71e 	bne	r2,zero,81109dc0 <__reset+0xfb0e9dc0>
            OSMutexPost(xMutexSenderACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
81109f24:	e0bffd17 	ldw	r2,-12(fp)
}
81109f28:	e037883a 	mov	sp,fp
81109f2c:	dfc00117 	ldw	ra,4(sp)
81109f30:	df000017 	ldw	fp,0(sp)
81109f34:	dec00204 	addi	sp,sp,8
81109f38:	f800283a 	ret

81109f3c <setPreAckReceiverFreePos>:

/* Search for some free location in the xSenderACK array, that comunicates with the AckSenderTask */
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
81109f3c:	defffb04 	addi	sp,sp,-20
81109f40:	de00012e 	bgeu	sp,et,81109f48 <setPreAckReceiverFreePos+0xc>
81109f44:	003b68fa 	trap	3
81109f48:	dfc00415 	stw	ra,16(sp)
81109f4c:	df000315 	stw	fp,12(sp)
81109f50:	df000304 	addi	fp,sp,12
81109f54:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
81109f58:	e03ffd15 	stw	zero,-12(fp)
    INT8U error_code;
    unsigned char ucCountRetries = 0;
81109f5c:	e03ffe05 	stb	zero,-8(fp)

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
81109f60:	00005406 	br	8110a0b4 <setPreAckReceiverFreePos+0x178>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
81109f64:	d0a05017 	ldw	r2,-32448(gp)
81109f68:	e0fffe84 	addi	r3,fp,-6
81109f6c:	180d883a 	mov	r6,r3
81109f70:	01400084 	movi	r5,2
81109f74:	1009883a 	mov	r4,r2
81109f78:	112b1840 	call	8112b184 <OSMutexPend>
        if ( error_code == OS_NO_ERR ) {
81109f7c:	e0bffe83 	ldbu	r2,-6(fp)
81109f80:	10803fcc 	andi	r2,r2,255
81109f84:	1000481e 	bne	r2,zero,8110a0a8 <setPreAckReceiverFreePos+0x16c>
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
81109f88:	e03ffe45 	stb	zero,-7(fp)
81109f8c:	00003f06 	br	8110a08c <setPreAckReceiverFreePos+0x150>
            {
                if ( xReceivedACK[i].cType == 0 ) {
81109f90:	e0fffe43 	ldbu	r3,-7(fp)
81109f94:	00a04574 	movhi	r2,33045
81109f98:	10adf704 	addi	r2,r2,-18468
81109f9c:	18c7883a 	add	r3,r3,r3
81109fa0:	18c7883a 	add	r3,r3,r3
81109fa4:	10c5883a 	add	r2,r2,r3
81109fa8:	10800003 	ldbu	r2,0(r2)
81109fac:	10803fcc 	andi	r2,r2,255
81109fb0:	1080201c 	xori	r2,r2,128
81109fb4:	10bfe004 	addi	r2,r2,-128
81109fb8:	1000311e 	bne	r2,zero,8110a080 <setPreAckReceiverFreePos+0x144>
                    /* Locate a free place*/
                    /* Need to check if the performance is the same as memcpy*/
                    xReceivedACK[i].cType = xPrePReader->cType;
81109fbc:	e0fffe43 	ldbu	r3,-7(fp)
81109fc0:	e0bfff17 	ldw	r2,-4(fp)
81109fc4:	11000103 	ldbu	r4,4(r2)
81109fc8:	00a04574 	movhi	r2,33045
81109fcc:	10adf704 	addi	r2,r2,-18468
81109fd0:	18c7883a 	add	r3,r3,r3
81109fd4:	18c7883a 	add	r3,r3,r3
81109fd8:	10c5883a 	add	r2,r2,r3
81109fdc:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].cCommand = xPrePReader->cCommand;
81109fe0:	e0fffe43 	ldbu	r3,-7(fp)
81109fe4:	e0bfff17 	ldw	r2,-4(fp)
81109fe8:	11000143 	ldbu	r4,5(r2)
81109fec:	00a04574 	movhi	r2,33045
81109ff0:	10adf704 	addi	r2,r2,-18468
81109ff4:	18c7883a 	add	r3,r3,r3
81109ff8:	18c7883a 	add	r3,r3,r3
81109ffc:	10c5883a 	add	r2,r2,r3
8110a000:	10800044 	addi	r2,r2,1
8110a004:	11000005 	stb	r4,0(r2)
                    xReceivedACK[i].usiId = xPrePReader->usiValues[0];
8110a008:	e0fffe43 	ldbu	r3,-7(fp)
8110a00c:	e0bfff17 	ldw	r2,-4(fp)
8110a010:	1100020b 	ldhu	r4,8(r2)
8110a014:	00a04574 	movhi	r2,33045
8110a018:	10adf704 	addi	r2,r2,-18468
8110a01c:	18c7883a 	add	r3,r3,r3
8110a020:	18c7883a 	add	r3,r3,r3
8110a024:	10c5883a 	add	r2,r2,r3
8110a028:	10800084 	addi	r2,r2,2
8110a02c:	1100000d 	sth	r4,0(r2)

                    error_code = OSSemPost(xSemCountReceivedACK);
8110a030:	d0a05117 	ldw	r2,-32444(gp)
8110a034:	1009883a 	mov	r4,r2
8110a038:	112d5180 	call	8112d518 <OSSemPost>
8110a03c:	e0bffe85 	stb	r2,-6(fp)
                    if ( error_code == OS_ERR_NONE ) {
8110a040:	e0bffe83 	ldbu	r2,-6(fp)
8110a044:	10803fcc 	andi	r2,r2,255
8110a048:	1000031e 	bne	r2,zero,8110a058 <setPreAckReceiverFreePos+0x11c>
                        bSuccess = TRUE;
8110a04c:	00800044 	movi	r2,1
8110a050:	e0bffd15 	stw	r2,-12(fp)
                    } else {
                        vFailSendPreAckReceiverSemaphore();
                        xReceivedACK[i].cType = 0;
                        bSuccess = FALSE;
                    }
                    break;
8110a054:	00001006 	br	8110a098 <setPreAckReceiverFreePos+0x15c>

                    error_code = OSSemPost(xSemCountReceivedACK);
                    if ( error_code == OS_ERR_NONE ) {
                        bSuccess = TRUE;
                    } else {
                        vFailSendPreAckReceiverSemaphore();
8110a058:	110c76c0 	call	8110c76c <vFailSendPreAckReceiverSemaphore>
                        xReceivedACK[i].cType = 0;
8110a05c:	e0fffe43 	ldbu	r3,-7(fp)
8110a060:	00a04574 	movhi	r2,33045
8110a064:	10adf704 	addi	r2,r2,-18468
8110a068:	18c7883a 	add	r3,r3,r3
8110a06c:	18c7883a 	add	r3,r3,r3
8110a070:	10c5883a 	add	r2,r2,r3
8110a074:	10000005 	stb	zero,0(r2)
                        bSuccess = FALSE;
8110a078:	e03ffd15 	stw	zero,-12(fp)
                    }
                    break;
8110a07c:	00000606 	br	8110a098 <setPreAckReceiverFreePos+0x15c>

        OSMutexPend(xMutexReceivedACK, 2, &error_code); /* Try to get mutex that protects the preparsed buffer. Wait 2 ticks = 2 ms */
        if ( error_code == OS_NO_ERR ) {
            /* Have free access to the buffer, check if there's any no threated command using the cType  */

            for(unsigned char i = 0; i < N_ACKS_RECEIVED; i++)
8110a080:	e0bffe43 	ldbu	r2,-7(fp)
8110a084:	10800044 	addi	r2,r2,1
8110a088:	e0bffe45 	stb	r2,-7(fp)
8110a08c:	e0bffe43 	ldbu	r2,-7(fp)
8110a090:	10800130 	cmpltui	r2,r2,4
8110a094:	103fbe1e 	bne	r2,zero,81109f90 <__reset+0xfb0e9f90>
                        bSuccess = FALSE;
                    }
                    break;
                }
            }
            OSMutexPost(xMutexReceivedACK);
8110a098:	d0a05017 	ldw	r2,-32448(gp)
8110a09c:	1009883a 	mov	r4,r2
8110a0a0:	112b7280 	call	8112b728 <OSMutexPost>
8110a0a4:	00000306 	br	8110a0b4 <setPreAckReceiverFreePos+0x178>
        } else {
            ucCountRetries++;
8110a0a8:	e0bffe03 	ldbu	r2,-8(fp)
8110a0ac:	10800044 	addi	r2,r2,1
8110a0b0:	e0bffe05 	stb	r2,-8(fp)
bool setPreAckReceiverFreePos( tPreParsed *xPrePReader ) {
    bool bSuccess = FALSE;
    INT8U error_code;
    unsigned char ucCountRetries = 0;

    while ( ( bSuccess == FALSE ) && ( ucCountRetries < 2 ) ) {
8110a0b4:	e0bffd17 	ldw	r2,-12(fp)
8110a0b8:	1000031e 	bne	r2,zero,8110a0c8 <setPreAckReceiverFreePos+0x18c>
8110a0bc:	e0bffe03 	ldbu	r2,-8(fp)
8110a0c0:	108000b0 	cmpltui	r2,r2,2
8110a0c4:	103fa71e 	bne	r2,zero,81109f64 <__reset+0xfb0e9f64>
            OSMutexPost(xMutexReceivedACK);
        } else {
            ucCountRetries++;
        }
    }
    return bSuccess;
8110a0c8:	e0bffd17 	ldw	r2,-12(fp)
}
8110a0cc:	e037883a 	mov	sp,fp
8110a0d0:	dfc00117 	ldw	ra,4(sp)
8110a0d4:	df000017 	ldw	fp,0(sp)
8110a0d8:	dec00204 	addi	sp,sp,8
8110a0dc:	f800283a 	ret

8110a0e0 <vSenderComTask>:

#include "sender_com_task.h"


void vSenderComTask(void *task_data)
{
8110a0e0:	defffb04 	addi	sp,sp,-20
8110a0e4:	de00012e 	bgeu	sp,et,8110a0ec <vSenderComTask+0xc>
8110a0e8:	003b68fa 	trap	3
8110a0ec:	dfc00415 	stw	ra,16(sp)
8110a0f0:	df000315 	stw	fp,12(sp)
8110a0f4:	df000304 	addi	fp,sp,12
8110a0f8:	e13fff15 	stw	r4,-4(fp)
    tSenderStates eSenderMode;
    int desligarEm = 0;
8110a0fc:	e03ffe15 	stw	zero,-8(fp)

    eSenderMode = sConfiguringSender;
8110a100:	e03ffd15 	stw	zero,-12(fp)

    #ifdef DEBUG_ON
        debug(fp,"vSenderComTask, enter task.\n");
8110a104:	d0a04d17 	ldw	r2,-32460(gp)
8110a108:	100f883a 	mov	r7,r2
8110a10c:	01800704 	movi	r6,28
8110a110:	01400044 	movi	r5,1
8110a114:	01204534 	movhi	r4,33044
8110a118:	212bb304 	addi	r4,r4,-20788
8110a11c:	11104380 	call	81110438 <fwrite>
    #endif

    for (;;){
        
        switch (eSenderMode)
8110a120:	e0bffd17 	ldw	r2,-12(fp)
8110a124:	10c00060 	cmpeqi	r3,r2,1
8110a128:	1800091e 	bne	r3,zero,8110a150 <vSenderComTask+0x70>
8110a12c:	0080052e 	bgeu	zero,r2,8110a144 <vSenderComTask+0x64>
8110a130:	10c000a0 	cmpeqi	r3,r2,2
8110a134:	1800371e 	bne	r3,zero,8110a214 <vSenderComTask+0x134>
8110a138:	10800160 	cmpeqi	r2,r2,5
8110a13c:	1000151e 	bne	r2,zero,8110a194 <vSenderComTask+0xb4>
8110a140:	00002c06 	br	8110a1f4 <vSenderComTask+0x114>
        {
            case sConfiguringSender:
                /* For future implementations. */
                eSenderMode = sStartingConnSender;
8110a144:	00800044 	movi	r2,1
8110a148:	e0bffd15 	stw	r2,-12(fp)
                break;
8110a14c:	00003206 	br	8110a218 <vSenderComTask+0x138>
            case sStartingConnSender:

                /*  This semaphore will return a non-zero value if the NUC communicate with the MEB 
                    vReceiverComTask is responsible to send this semaphore.
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
8110a150:	d0a04b17 	ldw	r2,-32468(gp)
8110a154:	1009883a 	mov	r4,r2
8110a158:	112cdb00 	call	8112cdb0 <OSSemAccept>
8110a15c:	10bfffcc 	andi	r2,r2,65535
8110a160:	10000326 	beq	r2,zero,8110a170 <vSenderComTask+0x90>
                    eSenderMode = sDummySender;
8110a164:	00800144 	movi	r2,5
8110a168:	e0bffd15 	stw	r2,-12(fp)
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
                }

                break;
8110a16c:	00002a06 	br	8110a218 <vSenderComTask+0x138>
                    OSSemAccept -> Non blocking Pend*/
                if ( OSSemAccept(xSemCommInit) ) {
                    eSenderMode = sDummySender;
                } else {
                    /* Asking for NUC the status */
                    puts(START_STATUS_SEQUENCE);
8110a170:	01204534 	movhi	r4,33044
8110a174:	212bbb04 	addi	r4,r4,-20756
8110a178:	11112700 	call	81111270 <puts>
                    OSTimeDlyHMSM(0, 0, 5, 0); /*Sleeps for 5 second*/
8110a17c:	000f883a 	mov	r7,zero
8110a180:	01800144 	movi	r6,5
8110a184:	000b883a 	mov	r5,zero
8110a188:	0009883a 	mov	r4,zero
8110a18c:	112f1280 	call	8112f128 <OSTimeDlyHMSM>
                }

                break;
8110a190:	00002106 	br	8110a218 <vSenderComTask+0x138>
                

                break;
            case sDummySender:
                /* code */
                eSenderMode = sDummySender;
8110a194:	00800144 	movi	r2,5
8110a198:	e0bffd15 	stw	r2,-12(fp)

                if (desligarEm <= 3) {
8110a19c:	e0bffe17 	ldw	r2,-8(fp)
8110a1a0:	10800108 	cmpgei	r2,r2,4
8110a1a4:	1000031e 	bne	r2,zero,8110a1b4 <vSenderComTask+0xd4>
                    puts(TURNOFF_SEQUENCE);
8110a1a8:	01204534 	movhi	r4,33044
8110a1ac:	212bbd04 	addi	r4,r4,-20748
8110a1b0:	11112700 	call	81111270 <puts>
                }
                desligarEm++;
8110a1b4:	e0bffe17 	ldw	r2,-8(fp)
8110a1b8:	10800044 	addi	r2,r2,1
8110a1bc:	e0bffe15 	stw	r2,-8(fp)
#ifdef DEBUG_ON
	debug(fp,"sDummySender\n");
8110a1c0:	d0a04d17 	ldw	r2,-32460(gp)
8110a1c4:	100f883a 	mov	r7,r2
8110a1c8:	01800344 	movi	r6,13
8110a1cc:	01400044 	movi	r5,1
8110a1d0:	01204534 	movhi	r4,33044
8110a1d4:	212bbf04 	addi	r4,r4,-20740
8110a1d8:	11104380 	call	81110438 <fwrite>
#endif
				OSTimeDlyHMSM(0, 0, 10, 0); /*Sleeps for 3 second*/
8110a1dc:	000f883a 	mov	r7,zero
8110a1e0:	01800284 	movi	r6,10
8110a1e4:	000b883a 	mov	r5,zero
8110a1e8:	0009883a 	mov	r4,zero
8110a1ec:	112f1280 	call	8112f128 <OSTimeDlyHMSM>
                break;
8110a1f0:	00000906 	br	8110a218 <vSenderComTask+0x138>
            default:
#ifdef DEBUG_ON
	debug(fp,"sender default\n");
8110a1f4:	d0a04d17 	ldw	r2,-32460(gp)
8110a1f8:	100f883a 	mov	r7,r2
8110a1fc:	018003c4 	movi	r6,15
8110a200:	01400044 	movi	r5,1
8110a204:	01204534 	movhi	r4,33044
8110a208:	212bc304 	addi	r4,r4,-20724
8110a20c:	11104380 	call	81110438 <fwrite>
#endif
                break;
8110a210:	00000106 	br	8110a218 <vSenderComTask+0x138>

                //pPointer = OSQPend(xQSenderTask, 0, &error_code);

                

                break;
8110a214:	0001883a 	nop
	debug(fp,"sender default\n");
#endif
                break;
        }

    }
8110a218:	003fc106 	br	8110a120 <__reset+0xfb0ea120>

8110a21c <vSimMebTask>:


#include "sim_meb_task.h"


void vSimMebTask(void *task_data) {
8110a21c:	defffd04 	addi	sp,sp,-12
8110a220:	de00012e 	bgeu	sp,et,8110a228 <vSimMebTask+0xc>
8110a224:	003b68fa 	trap	3
8110a228:	df000215 	stw	fp,8(sp)
8110a22c:	df000204 	addi	fp,sp,8
8110a230:	e13fff15 	stw	r4,-4(fp)
	tFEEStates eFeeState;
	bool bSuccess = FALSE;
8110a234:	e03ffe15 	stw	zero,-8(fp)


	//SIMUCAM MAIN TASK


}
8110a238:	0001883a 	nop
8110a23c:	e037883a 	mov	sp,fp
8110a240:	df000017 	ldw	fp,0(sp)
8110a244:	dec00104 	addi	sp,sp,4
8110a248:	f800283a 	ret

8110a24c <vTimeoutCheckerTask>:

#include "timeout_checker_ack_task.h"


/* Could impact in the overall performance of the system due to need many shared resources (many mutexes) */
void vTimeoutCheckerTask(void *task_data) {
8110a24c:	defff504 	addi	sp,sp,-44
8110a250:	de00012e 	bgeu	sp,et,8110a258 <vTimeoutCheckerTask+0xc>
8110a254:	003b68fa 	trap	3
8110a258:	dfc00a15 	stw	ra,40(sp)
8110a25c:	df000915 	stw	fp,36(sp)
8110a260:	df000904 	addi	fp,sp,36
8110a264:	e13fff15 	stw	r4,-4(fp)
    bool bFinished32 = FALSE;
8110a268:	e03ff715 	stw	zero,-36(fp)
    bool bFinished64 = FALSE;
8110a26c:	e03ff815 	stw	zero,-32(fp)
    bool bFinished128 = FALSE;
8110a270:	e03ff915 	stw	zero,-28(fp)
	INT8U error_code;
    unsigned char ucCountRetries = 0;
8110a274:	e03ffa05 	stb	zero,-24(fp)
    unsigned char i = 0, k =0;
8110a278:	e03ffa45 	stb	zero,-23(fp)
8110a27c:	e03ffa85 	stb	zero,-22(fp)
	unsigned char ucRetransB32[N_32];
	unsigned char ucRetransB64[N_64];
	unsigned char ucRetransB128[N_128];

    #ifdef DEBUG_ON
        debug(fp,"vTimeoutCheckerTask, enter task.\n");
8110a280:	d0a04d17 	ldw	r2,-32460(gp)
8110a284:	100f883a 	mov	r7,r2
8110a288:	01800844 	movi	r6,33
8110a28c:	01400044 	movi	r5,1
8110a290:	01204534 	movhi	r4,33044
8110a294:	212bc704 	addi	r4,r4,-20708
8110a298:	11104380 	call	81110438 <fwrite>
    #endif

    for (;;) {
        /* This semaphore is used to sync the Timer used for check timeout and this task that is for actualy implement the logic of the timeout for the communication*/
        OSSemPend(xSemTimeoutChecker, 0, &error_code);
8110a29c:	d0a05217 	ldw	r2,-32440(gp)
8110a2a0:	e0fffac4 	addi	r3,fp,-21
8110a2a4:	180d883a 	mov	r6,r3
8110a2a8:	000b883a 	mov	r5,zero
8110a2ac:	1009883a 	mov	r4,r2
8110a2b0:	112d1900 	call	8112d190 <OSSemPend>
        if ( error_code == OS_NO_ERR ) {
8110a2b4:	e0bffac3 	ldbu	r2,-21(fp)
8110a2b8:	10803fcc 	andi	r2,r2,255
8110a2bc:	1002191e 	bne	r2,zero,8110ab24 <vTimeoutCheckerTask+0x8d8>
            /*  Time to check all the (re)transmission buffers in order to retransmit if any message got timeout*/

            /*  Writing 0xFF in the buffer to check after if there is any scheduled retransmission
                If there is some, the valur will be between 0 and <max buffer size>*/
            memset(ucRetransB32, 255, N_32);
8110a2c0:	e0bffb04 	addi	r2,fp,-20
8110a2c4:	01800204 	movi	r6,8
8110a2c8:	01403fc4 	movi	r5,255
8110a2cc:	1009883a 	mov	r4,r2
8110a2d0:	1110f9c0 	call	81110f9c <memset>
            memset(ucRetransB64, 255, N_64);
8110a2d4:	e0bffd04 	addi	r2,fp,-12
8110a2d8:	01800104 	movi	r6,4
8110a2dc:	01403fc4 	movi	r5,255
8110a2e0:	1009883a 	mov	r4,r2
8110a2e4:	1110f9c0 	call	81110f9c <memset>
            memset(ucRetransB128, 255, N_128);
8110a2e8:	e0bffe04 	addi	r2,fp,-8
8110a2ec:	01800084 	movi	r6,2
8110a2f0:	01403fc4 	movi	r5,255
8110a2f4:	1009883a 	mov	r4,r2
8110a2f8:	1110f9c0 	call	81110f9c <memset>

            bFinished32=FALSE;
8110a2fc:	e03ff715 	stw	zero,-36(fp)
            bFinished64=FALSE;
8110a300:	e03ff815 	stw	zero,-32(fp)
            bFinished128=FALSE;
8110a304:	e03ff915 	stw	zero,-28(fp)
            ucCountRetries = 0;
8110a308:	e03ffa05 	stb	zero,-24(fp)

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110a30c:	00011a06 	br	8110a778 <vTimeoutCheckerTask+0x52c>

                if ( bFinished32 == FALSE ) {
8110a310:	e0bff717 	ldw	r2,-36(fp)
8110a314:	10005b1e 	bne	r2,zero,8110a484 <vTimeoutCheckerTask+0x238>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110a318:	d0a05517 	ldw	r2,-32428(gp)
8110a31c:	e0fffac4 	addi	r3,fp,-21
8110a320:	180d883a 	mov	r6,r3
8110a324:	01400084 	movi	r5,2
8110a328:	1009883a 	mov	r4,r2
8110a32c:	112b1840 	call	8112b184 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a330:	e0bffac3 	ldbu	r2,-21(fp)
8110a334:	10803fcc 	andi	r2,r2,255
8110a338:	1000521e 	bne	r2,zero,8110a484 <vTimeoutCheckerTask+0x238>
                        /*Search for the id*/
                        k = 0;
8110a33c:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_32; i++)
8110a340:	e03ffa45 	stb	zero,-23(fp)
8110a344:	00004706 	br	8110a464 <vTimeoutCheckerTask+0x218>
                        {
                            if ( xBuffer32[i].usiId != 0 ) {
8110a348:	e0fffa43 	ldbu	r3,-23(fp)
8110a34c:	00a04534 	movhi	r2,33044
8110a350:	10956804 	addi	r2,r2,21920
8110a354:	18c009a4 	muli	r3,r3,38
8110a358:	10c5883a 	add	r2,r2,r3
8110a35c:	10800804 	addi	r2,r2,32
8110a360:	1080000b 	ldhu	r2,0(r2)
8110a364:	10bfffcc 	andi	r2,r2,65535
8110a368:	10003b26 	beq	r2,zero,8110a458 <vTimeoutCheckerTask+0x20c>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer32[i].ucNofRetries < 1 ) {
8110a36c:	e0fffa43 	ldbu	r3,-23(fp)
8110a370:	00a04534 	movhi	r2,33044
8110a374:	10956804 	addi	r2,r2,21920
8110a378:	18c009a4 	muli	r3,r3,38
8110a37c:	10c5883a 	add	r2,r2,r3
8110a380:	10800904 	addi	r2,r2,36
8110a384:	10800003 	ldbu	r2,0(r2)
8110a388:	10803fcc 	andi	r2,r2,255
8110a38c:	1000101e 	bne	r2,zero,8110a3d0 <vTimeoutCheckerTask+0x184>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer32[i].usiId = 0;
8110a390:	e0fffa43 	ldbu	r3,-23(fp)
8110a394:	00a04534 	movhi	r2,33044
8110a398:	10956804 	addi	r2,r2,21920
8110a39c:	18c009a4 	muli	r3,r3,38
8110a3a0:	10c5883a 	add	r2,r2,r3
8110a3a4:	10800804 	addi	r2,r2,32
8110a3a8:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer32);
8110a3ac:	d0a05817 	ldw	r2,-32416(gp)
8110a3b0:	1009883a 	mov	r4,r2
8110a3b4:	112d5180 	call	8112d518 <OSSemPost>
8110a3b8:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110a3bc:	e0bffac3 	ldbu	r2,-21(fp)
8110a3c0:	10803fcc 	andi	r2,r2,255
8110a3c4:	10002426 	beq	r2,zero,8110a458 <vTimeoutCheckerTask+0x20c>
                                        vFailSetCountSemaphorexBuffer32();
8110a3c8:	110cb880 	call	8110cb88 <vFailSetCountSemaphorexBuffer32>
8110a3cc:	00002206 	br	8110a458 <vTimeoutCheckerTask+0x20c>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer32[i].usiTimeOut--;
8110a3d0:	e0fffa43 	ldbu	r3,-23(fp)
8110a3d4:	00a04534 	movhi	r2,33044
8110a3d8:	10956804 	addi	r2,r2,21920
8110a3dc:	190009a4 	muli	r4,r3,38
8110a3e0:	1105883a 	add	r2,r2,r4
8110a3e4:	10800884 	addi	r2,r2,34
8110a3e8:	1080000b 	ldhu	r2,0(r2)
8110a3ec:	10bfffc4 	addi	r2,r2,-1
8110a3f0:	1009883a 	mov	r4,r2
8110a3f4:	00a04534 	movhi	r2,33044
8110a3f8:	10956804 	addi	r2,r2,21920
8110a3fc:	18c009a4 	muli	r3,r3,38
8110a400:	10c5883a 	add	r2,r2,r3
8110a404:	10800884 	addi	r2,r2,34
8110a408:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer32[i].usiTimeOut < 1 ) {
8110a40c:	e0fffa43 	ldbu	r3,-23(fp)
8110a410:	00a04534 	movhi	r2,33044
8110a414:	10956804 	addi	r2,r2,21920
8110a418:	18c009a4 	muli	r3,r3,38
8110a41c:	10c5883a 	add	r2,r2,r3
8110a420:	10800884 	addi	r2,r2,34
8110a424:	1080000b 	ldhu	r2,0(r2)
8110a428:	10bfffcc 	andi	r2,r2,65535
8110a42c:	10a0001c 	xori	r2,r2,32768
8110a430:	10a00004 	addi	r2,r2,-32768
8110a434:	00800816 	blt	zero,r2,8110a458 <vTimeoutCheckerTask+0x20c>
                                        /* Schedule to retransmit */
                                        ucRetransB32[k] = i;
8110a438:	e0bffa83 	ldbu	r2,-22(fp)
8110a43c:	e0fffb04 	addi	r3,fp,-20
8110a440:	1885883a 	add	r2,r3,r2
8110a444:	e0fffa43 	ldbu	r3,-23(fp)
8110a448:	10c00005 	stb	r3,0(r2)
                                        k++;
8110a44c:	e0bffa83 	ldbu	r2,-22(fp)
8110a450:	10800044 	addi	r2,r2,1
8110a454:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer32, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_32; i++)
8110a458:	e0bffa43 	ldbu	r2,-23(fp)
8110a45c:	10800044 	addi	r2,r2,1
8110a460:	e0bffa45 	stb	r2,-23(fp)
8110a464:	e0bffa43 	ldbu	r2,-23(fp)
8110a468:	10800230 	cmpltui	r2,r2,8
8110a46c:	103fb61e 	bne	r2,zero,8110a348 <__reset+0xfb0ea348>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer32); /* Free the Mutex after use the xBuffer32*/
8110a470:	d0a05517 	ldw	r2,-32428(gp)
8110a474:	1009883a 	mov	r4,r2
8110a478:	112b7280 	call	8112b728 <OSMutexPost>
                        bFinished32 = TRUE;
8110a47c:	00800044 	movi	r2,1
8110a480:	e0bff715 	stw	r2,-36(fp)
                    }
                }

                if ( bFinished64 == FALSE ) {
8110a484:	e0bff817 	ldw	r2,-32(fp)
8110a488:	10005b1e 	bne	r2,zero,8110a5f8 <vTimeoutCheckerTask+0x3ac>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110a48c:	d0a05917 	ldw	r2,-32412(gp)
8110a490:	e0fffac4 	addi	r3,fp,-21
8110a494:	180d883a 	mov	r6,r3
8110a498:	01400084 	movi	r5,2
8110a49c:	1009883a 	mov	r4,r2
8110a4a0:	112b1840 	call	8112b184 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a4a4:	e0bffac3 	ldbu	r2,-21(fp)
8110a4a8:	10803fcc 	andi	r2,r2,255
8110a4ac:	1000521e 	bne	r2,zero,8110a5f8 <vTimeoutCheckerTask+0x3ac>
                        /*Search for the id*/
                        k = 0;
8110a4b0:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_64; i++)
8110a4b4:	e03ffa45 	stb	zero,-23(fp)
8110a4b8:	00004706 	br	8110a5d8 <vTimeoutCheckerTask+0x38c>
                        {
                            if ( xBuffer64[i].usiId != 0 ) {
8110a4bc:	e0fffa43 	ldbu	r3,-23(fp)
8110a4c0:	00a04534 	movhi	r2,33044
8110a4c4:	10840b04 	addi	r2,r2,4140
8110a4c8:	18c011a4 	muli	r3,r3,70
8110a4cc:	10c5883a 	add	r2,r2,r3
8110a4d0:	10801004 	addi	r2,r2,64
8110a4d4:	1080000b 	ldhu	r2,0(r2)
8110a4d8:	10bfffcc 	andi	r2,r2,65535
8110a4dc:	10003b26 	beq	r2,zero,8110a5cc <vTimeoutCheckerTask+0x380>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer64[i].ucNofRetries < 1 ) {
8110a4e0:	e0fffa43 	ldbu	r3,-23(fp)
8110a4e4:	00a04534 	movhi	r2,33044
8110a4e8:	10840b04 	addi	r2,r2,4140
8110a4ec:	18c011a4 	muli	r3,r3,70
8110a4f0:	10c5883a 	add	r2,r2,r3
8110a4f4:	10801104 	addi	r2,r2,68
8110a4f8:	10800003 	ldbu	r2,0(r2)
8110a4fc:	10803fcc 	andi	r2,r2,255
8110a500:	1000101e 	bne	r2,zero,8110a544 <vTimeoutCheckerTask+0x2f8>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer64[i].usiId = 0;
8110a504:	e0fffa43 	ldbu	r3,-23(fp)
8110a508:	00a04534 	movhi	r2,33044
8110a50c:	10840b04 	addi	r2,r2,4140
8110a510:	18c011a4 	muli	r3,r3,70
8110a514:	10c5883a 	add	r2,r2,r3
8110a518:	10801004 	addi	r2,r2,64
8110a51c:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer64);
8110a520:	d0a04a17 	ldw	r2,-32472(gp)
8110a524:	1009883a 	mov	r4,r2
8110a528:	112d5180 	call	8112d518 <OSSemPost>
8110a52c:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110a530:	e0bffac3 	ldbu	r2,-21(fp)
8110a534:	10803fcc 	andi	r2,r2,255
8110a538:	10002426 	beq	r2,zero,8110a5cc <vTimeoutCheckerTask+0x380>
                                        vFailSetCountSemaphorexBuffer64();
8110a53c:	110cbf00 	call	8110cbf0 <vFailSetCountSemaphorexBuffer64>
8110a540:	00002206 	br	8110a5cc <vTimeoutCheckerTask+0x380>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer64[i].usiTimeOut--;
8110a544:	e0fffa43 	ldbu	r3,-23(fp)
8110a548:	00a04534 	movhi	r2,33044
8110a54c:	10840b04 	addi	r2,r2,4140
8110a550:	190011a4 	muli	r4,r3,70
8110a554:	1105883a 	add	r2,r2,r4
8110a558:	10801084 	addi	r2,r2,66
8110a55c:	1080000b 	ldhu	r2,0(r2)
8110a560:	10bfffc4 	addi	r2,r2,-1
8110a564:	1009883a 	mov	r4,r2
8110a568:	00a04534 	movhi	r2,33044
8110a56c:	10840b04 	addi	r2,r2,4140
8110a570:	18c011a4 	muli	r3,r3,70
8110a574:	10c5883a 	add	r2,r2,r3
8110a578:	10801084 	addi	r2,r2,66
8110a57c:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer64[i].usiTimeOut < 1 ) {
8110a580:	e0fffa43 	ldbu	r3,-23(fp)
8110a584:	00a04534 	movhi	r2,33044
8110a588:	10840b04 	addi	r2,r2,4140
8110a58c:	18c011a4 	muli	r3,r3,70
8110a590:	10c5883a 	add	r2,r2,r3
8110a594:	10801084 	addi	r2,r2,66
8110a598:	1080000b 	ldhu	r2,0(r2)
8110a59c:	10bfffcc 	andi	r2,r2,65535
8110a5a0:	10a0001c 	xori	r2,r2,32768
8110a5a4:	10a00004 	addi	r2,r2,-32768
8110a5a8:	00800816 	blt	zero,r2,8110a5cc <vTimeoutCheckerTask+0x380>
                                        /* Schedule to retransmit */
                                        ucRetransB64[k] = i;
8110a5ac:	e0bffa83 	ldbu	r2,-22(fp)
8110a5b0:	e0fffd04 	addi	r3,fp,-12
8110a5b4:	1885883a 	add	r2,r3,r2
8110a5b8:	e0fffa43 	ldbu	r3,-23(fp)
8110a5bc:	10c00005 	stb	r3,0(r2)
                                        k++;
8110a5c0:	e0bffa83 	ldbu	r2,-22(fp)
8110a5c4:	10800044 	addi	r2,r2,1
8110a5c8:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer64, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_64; i++)
8110a5cc:	e0bffa43 	ldbu	r2,-23(fp)
8110a5d0:	10800044 	addi	r2,r2,1
8110a5d4:	e0bffa45 	stb	r2,-23(fp)
8110a5d8:	e0bffa43 	ldbu	r2,-23(fp)
8110a5dc:	10800130 	cmpltui	r2,r2,4
8110a5e0:	103fb61e 	bne	r2,zero,8110a4bc <__reset+0xfb0ea4bc>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer64); /* Free the Mutex after use the xBuffer32*/
8110a5e4:	d0a05917 	ldw	r2,-32412(gp)
8110a5e8:	1009883a 	mov	r4,r2
8110a5ec:	112b7280 	call	8112b728 <OSMutexPost>
                        bFinished64 = TRUE;
8110a5f0:	00800044 	movi	r2,1
8110a5f4:	e0bff815 	stw	r2,-32(fp)
                    }
                }

                if ( bFinished128 == FALSE ) {
8110a5f8:	e0bff917 	ldw	r2,-28(fp)
8110a5fc:	10005b1e 	bne	r2,zero,8110a76c <vTimeoutCheckerTask+0x520>
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
8110a600:	d0a05717 	ldw	r2,-32420(gp)
8110a604:	e0fffac4 	addi	r3,fp,-21
8110a608:	180d883a 	mov	r6,r3
8110a60c:	01400084 	movi	r5,2
8110a610:	1009883a 	mov	r4,r2
8110a614:	112b1840 	call	8112b184 <OSMutexPend>
                    if ( error_code == OS_ERR_NONE ) {
8110a618:	e0bffac3 	ldbu	r2,-21(fp)
8110a61c:	10803fcc 	andi	r2,r2,255
8110a620:	1000521e 	bne	r2,zero,8110a76c <vTimeoutCheckerTask+0x520>
                        /*Search for the id*/
                        k = 0;
8110a624:	e03ffa85 	stb	zero,-22(fp)
                        for(i = 0; i < N_128; i++)
8110a628:	e03ffa45 	stb	zero,-23(fp)
8110a62c:	00004706 	br	8110a74c <vTimeoutCheckerTask+0x500>
                        {
                            if ( xBuffer128[i].usiId != 0 ) {
8110a630:	e0fffa43 	ldbu	r3,-23(fp)
8110a634:	00a04574 	movhi	r2,33045
8110a638:	10adb404 	addi	r2,r2,-18736
8110a63c:	18c021a4 	muli	r3,r3,134
8110a640:	10c5883a 	add	r2,r2,r3
8110a644:	10802004 	addi	r2,r2,128
8110a648:	1080000b 	ldhu	r2,0(r2)
8110a64c:	10bfffcc 	andi	r2,r2,65535
8110a650:	10003b26 	beq	r2,zero,8110a740 <vTimeoutCheckerTask+0x4f4>
                                /* If isn't Zero, so there a message in this position of the (re)transmission buffer */

                                if ( xBuffer128[i].ucNofRetries < 1 ) {
8110a654:	e0fffa43 	ldbu	r3,-23(fp)
8110a658:	00a04574 	movhi	r2,33045
8110a65c:	10adb404 	addi	r2,r2,-18736
8110a660:	18c021a4 	muli	r3,r3,134
8110a664:	10c5883a 	add	r2,r2,r3
8110a668:	10802104 	addi	r2,r2,132
8110a66c:	10800003 	ldbu	r2,0(r2)
8110a670:	10803fcc 	andi	r2,r2,255
8110a674:	1000101e 	bne	r2,zero,8110a6b8 <vTimeoutCheckerTask+0x46c>
                                    /* Reach the max number of retransmission. Clear the position. */
                                    xBuffer128[i].usiId = 0;
8110a678:	e0fffa43 	ldbu	r3,-23(fp)
8110a67c:	00a04574 	movhi	r2,33045
8110a680:	10adb404 	addi	r2,r2,-18736
8110a684:	18c021a4 	muli	r3,r3,134
8110a688:	10c5883a 	add	r2,r2,r3
8110a68c:	10802004 	addi	r2,r2,128
8110a690:	1000000d 	sth	zero,0(r2)
                                    error_code = OSSemPost(xSemCountBuffer128);
8110a694:	d0a04e17 	ldw	r2,-32456(gp)
8110a698:	1009883a 	mov	r4,r2
8110a69c:	112d5180 	call	8112d518 <OSSemPost>
8110a6a0:	e0bffac5 	stb	r2,-21(fp)
                                    if ( error_code != OS_ERR_NONE ) {
8110a6a4:	e0bffac3 	ldbu	r2,-21(fp)
8110a6a8:	10803fcc 	andi	r2,r2,255
8110a6ac:	10002426 	beq	r2,zero,8110a740 <vTimeoutCheckerTask+0x4f4>
                                        vFailSetCountSemaphorexBuffer128();
8110a6b0:	110cc580 	call	8110cc58 <vFailSetCountSemaphorexBuffer128>
8110a6b4:	00002206 	br	8110a740 <vTimeoutCheckerTask+0x4f4>
                                    }
                                } else {
                                    /* Check if there's timeout to retransmit */
                                    xBuffer128[i].usiTimeOut--;
8110a6b8:	e0fffa43 	ldbu	r3,-23(fp)
8110a6bc:	00a04574 	movhi	r2,33045
8110a6c0:	10adb404 	addi	r2,r2,-18736
8110a6c4:	190021a4 	muli	r4,r3,134
8110a6c8:	1105883a 	add	r2,r2,r4
8110a6cc:	10802084 	addi	r2,r2,130
8110a6d0:	1080000b 	ldhu	r2,0(r2)
8110a6d4:	10bfffc4 	addi	r2,r2,-1
8110a6d8:	1009883a 	mov	r4,r2
8110a6dc:	00a04574 	movhi	r2,33045
8110a6e0:	10adb404 	addi	r2,r2,-18736
8110a6e4:	18c021a4 	muli	r3,r3,134
8110a6e8:	10c5883a 	add	r2,r2,r3
8110a6ec:	10802084 	addi	r2,r2,130
8110a6f0:	1100000d 	sth	r4,0(r2)
                                    if ( xBuffer128[i].usiTimeOut < 1 ) {
8110a6f4:	e0fffa43 	ldbu	r3,-23(fp)
8110a6f8:	00a04574 	movhi	r2,33045
8110a6fc:	10adb404 	addi	r2,r2,-18736
8110a700:	18c021a4 	muli	r3,r3,134
8110a704:	10c5883a 	add	r2,r2,r3
8110a708:	10802084 	addi	r2,r2,130
8110a70c:	1080000b 	ldhu	r2,0(r2)
8110a710:	10bfffcc 	andi	r2,r2,65535
8110a714:	10a0001c 	xori	r2,r2,32768
8110a718:	10a00004 	addi	r2,r2,-32768
8110a71c:	00800816 	blt	zero,r2,8110a740 <vTimeoutCheckerTask+0x4f4>
                                        /* Schedule to retransmit */
                                        ucRetransB128[k] = i;
8110a720:	e0bffa83 	ldbu	r2,-22(fp)
8110a724:	e0fffe04 	addi	r3,fp,-8
8110a728:	1885883a 	add	r2,r3,r2
8110a72c:	e0fffa43 	ldbu	r3,-23(fp)
8110a730:	10c00005 	stb	r3,0(r2)
                                        k++;
8110a734:	e0bffa83 	ldbu	r2,-22(fp)
8110a738:	10800044 	addi	r2,r2,1
8110a73c:	e0bffa85 	stb	r2,-22(fp)
                    /* Check all positions of the (re)transmission buffer*/
                    OSMutexPend(xMutexBuffer128, 2, &error_code); /* Try to get the mutex (wait 2 ticks) */
                    if ( error_code == OS_ERR_NONE ) {
                        /*Search for the id*/
                        k = 0;
                        for(i = 0; i < N_128; i++)
8110a740:	e0bffa43 	ldbu	r2,-23(fp)
8110a744:	10800044 	addi	r2,r2,1
8110a748:	e0bffa45 	stb	r2,-23(fp)
8110a74c:	e0bffa43 	ldbu	r2,-23(fp)
8110a750:	108000b0 	cmpltui	r2,r2,2
8110a754:	103fb61e 	bne	r2,zero,8110a630 <__reset+0xfb0ea630>
                                        k++;
                                    }
                                }
                            }
                        }
                        OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer32*/
8110a758:	d0a05717 	ldw	r2,-32420(gp)
8110a75c:	1009883a 	mov	r4,r2
8110a760:	112b7280 	call	8112b728 <OSMutexPost>
                        bFinished128 = TRUE;
8110a764:	00800044 	movi	r2,1
8110a768:	e0bff915 	stw	r2,-28(fp)
                    }
                }
                ucCountRetries++;
8110a76c:	e0bffa03 	ldbu	r2,-24(fp)
8110a770:	10800044 	addi	r2,r2,1
8110a774:	e0bffa05 	stb	r2,-24(fp)
            bFinished64=FALSE;
            bFinished128=FALSE;
            ucCountRetries = 0;

            /* The mutex will not be blocking, so it will try for five times search in the three (re)transmission buffer */
            while ( ( ucCountRetries < 6 ) && ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) ) {
8110a778:	e0bffa03 	ldbu	r2,-24(fp)
8110a77c:	108001a8 	cmpgeui	r2,r2,6
8110a780:	1000061e 	bne	r2,zero,8110a79c <vTimeoutCheckerTask+0x550>
8110a784:	e0bff717 	ldw	r2,-36(fp)
8110a788:	103ee126 	beq	r2,zero,8110a310 <__reset+0xfb0ea310>
8110a78c:	e0bff817 	ldw	r2,-32(fp)
8110a790:	103edf26 	beq	r2,zero,8110a310 <__reset+0xfb0ea310>
8110a794:	e0bff917 	ldw	r2,-28(fp)
8110a798:	103edd26 	beq	r2,zero,8110a310 <__reset+0xfb0ea310>
                }
                ucCountRetries++;
            }

            /*  Check if could not check some of the (re)transmission buffer*/
            if ( (bFinished32==FALSE) || (bFinished64==FALSE) || (bFinished128==FALSE) ) {
8110a79c:	e0bff717 	ldw	r2,-36(fp)
8110a7a0:	10000426 	beq	r2,zero,8110a7b4 <vTimeoutCheckerTask+0x568>
8110a7a4:	e0bff817 	ldw	r2,-32(fp)
8110a7a8:	10000226 	beq	r2,zero,8110a7b4 <vTimeoutCheckerTask+0x568>
8110a7ac:	e0bff917 	ldw	r2,-28(fp)
8110a7b0:	1000011e 	bne	r2,zero,8110a7b8 <vTimeoutCheckerTask+0x56c>
                /*  Could not check all (re)transmission buffer, only show message for now. There's no hard impact to thesystem
                    but we need to know that is accurring*/
                vCouldNotCheckBufferTimeOutFunction();
8110a7b4:	110d1980 	call	8110d198 <vCouldNotCheckBufferTimeOutFunction>
            /*  Retransmit could slow down the system in the worst case, because need to get more than one mutex at same time
                this also could impact in various task that need the mutex also, as this operation may be rare
                before try to get all mutexes, will check if there is anything in the scheduler buffers (ucRetransB32,ucRetransB64,ucRetransB128). */
                
            /*  Most part of the time this will be false, and many processing and kernell resources will be saved with this verification*/
            if ( (ucRetransB32[0] != 255) && (ucRetransB64[0] != 255) && (ucRetransB128[0] != 255) ) {
8110a7b8:	e0bffb03 	ldbu	r2,-20(fp)
8110a7bc:	10803fcc 	andi	r2,r2,255
8110a7c0:	10803fe0 	cmpeqi	r2,r2,255
8110a7c4:	103eb51e 	bne	r2,zero,8110a29c <__reset+0xfb0ea29c>
8110a7c8:	e0bffd03 	ldbu	r2,-12(fp)
8110a7cc:	10803fcc 	andi	r2,r2,255
8110a7d0:	10803fe0 	cmpeqi	r2,r2,255
8110a7d4:	103eb11e 	bne	r2,zero,8110a29c <__reset+0xfb0ea29c>
8110a7d8:	e0bffe03 	ldbu	r2,-8(fp)
8110a7dc:	10803fcc 	andi	r2,r2,255
8110a7e0:	10803fe0 	cmpeqi	r2,r2,255
8110a7e4:	103ead1e 	bne	r2,zero,8110a29c <__reset+0xfb0ea29c>
                /*  This operation will try to use the UART TX buffer, so after get the mutex it will remain for almost 3 or 4 ticks in the worst case.
                    In order to avoid that all the system lost the access to the communication for more time, and to minimize the priority inversion
                    if we can't get the mutex for the buffer32, buffer 64 or buffer128, we continue and in the next cycle of checkout it will try to re-send finaly. */                

                /*  Sleep for 50 ticks (50 milli) in the worst case*/
                OSMutexPend(xTxUARTMutex, 50, &error_code); /* Wait 50 ticks = 50 ms */
8110a7e8:	d0a05b17 	ldw	r2,-32404(gp)
8110a7ec:	e0fffac4 	addi	r3,fp,-21
8110a7f0:	180d883a 	mov	r6,r3
8110a7f4:	01400c84 	movi	r5,50
8110a7f8:	1009883a 	mov	r4,r2
8110a7fc:	112b1840 	call	8112b184 <OSMutexPend>
                if ( error_code == OS_NO_ERR ) {
8110a800:	e0bffac3 	ldbu	r2,-21(fp)
8110a804:	10803fcc 	andi	r2,r2,255
8110a808:	1000c41e 	bne	r2,zero,8110ab1c <vTimeoutCheckerTask+0x8d0>


                    if ( ucRetransB32[0] != 255 ) {
8110a80c:	e0bffb03 	ldbu	r2,-20(fp)
8110a810:	10803fcc 	andi	r2,r2,255
8110a814:	10803fe0 	cmpeqi	r2,r2,255
8110a818:	10003c1e 	bne	r2,zero,8110a90c <vTimeoutCheckerTask+0x6c0>
                        OSMutexPend(xMutexBuffer32, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110a81c:	d0a05517 	ldw	r2,-32428(gp)
8110a820:	e0fffac4 	addi	r3,fp,-21
8110a824:	180d883a 	mov	r6,r3
8110a828:	01400044 	movi	r5,1
8110a82c:	1009883a 	mov	r4,r2
8110a830:	112b1840 	call	8112b184 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110a834:	e0bffac3 	ldbu	r2,-21(fp)
8110a838:	10803fcc 	andi	r2,r2,255
8110a83c:	1000321e 	bne	r2,zero,8110a908 <vTimeoutCheckerTask+0x6bc>
                            k = 0;
8110a840:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB32[k];
8110a844:	e0bffa83 	ldbu	r2,-22(fp)
8110a848:	e0fffb04 	addi	r3,fp,-20
8110a84c:	1885883a 	add	r2,r3,r2
8110a850:	10800003 	ldbu	r2,0(r2)
8110a854:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer32[i].ucNofRetries--;
8110a858:	e0fffa43 	ldbu	r3,-23(fp)
8110a85c:	00a04534 	movhi	r2,33044
8110a860:	10956804 	addi	r2,r2,21920
8110a864:	190009a4 	muli	r4,r3,38
8110a868:	1105883a 	add	r2,r2,r4
8110a86c:	10800904 	addi	r2,r2,36
8110a870:	10800003 	ldbu	r2,0(r2)
8110a874:	10bfffc4 	addi	r2,r2,-1
8110a878:	1009883a 	mov	r4,r2
8110a87c:	00a04534 	movhi	r2,33044
8110a880:	10956804 	addi	r2,r2,21920
8110a884:	18c009a4 	muli	r3,r3,38
8110a888:	10c5883a 	add	r2,r2,r3
8110a88c:	10800904 	addi	r2,r2,36
8110a890:	11000005 	stb	r4,0(r2)
                                xBuffer32[i].usiTimeOut = TIMEOUT_COUNT;
8110a894:	e0fffa43 	ldbu	r3,-23(fp)
8110a898:	00a04534 	movhi	r2,33044
8110a89c:	10956804 	addi	r2,r2,21920
8110a8a0:	18c009a4 	muli	r3,r3,38
8110a8a4:	10c5883a 	add	r2,r2,r3
8110a8a8:	10800884 	addi	r2,r2,34
8110a8ac:	00c00104 	movi	r3,4
8110a8b0:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer32[i].buffer);                                
8110a8b4:	e0bffa43 	ldbu	r2,-23(fp)
8110a8b8:	10c009a4 	muli	r3,r2,38
8110a8bc:	00a04534 	movhi	r2,33044
8110a8c0:	10956804 	addi	r2,r2,21920
8110a8c4:	1885883a 	add	r2,r3,r2
8110a8c8:	1009883a 	mov	r4,r2
8110a8cc:	11112700 	call	81111270 <puts>
                                k++;
8110a8d0:	e0bffa83 	ldbu	r2,-22(fp)
8110a8d4:	10800044 	addi	r2,r2,1
8110a8d8:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB32[k] != 255 );                       
8110a8dc:	e0bffa83 	ldbu	r2,-22(fp)
8110a8e0:	e0fffb04 	addi	r3,fp,-20
8110a8e4:	1885883a 	add	r2,r3,r2
8110a8e8:	10800003 	ldbu	r2,0(r2)
8110a8ec:	10803fcc 	andi	r2,r2,255
8110a8f0:	10803fd8 	cmpnei	r2,r2,255
8110a8f4:	103fd31e 	bne	r2,zero,8110a844 <__reset+0xfb0ea844>

                            OSMutexPost(xMutexBuffer32);
8110a8f8:	d0a05517 	ldw	r2,-32428(gp)
8110a8fc:	1009883a 	mov	r4,r2
8110a900:	112b7280 	call	8112b728 <OSMutexPost>
8110a904:	00000106 	br	8110a90c <vTimeoutCheckerTask+0x6c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB32TimeoutTask();
8110a908:	110d3680 	call	8110d368 <vCouldNotRetransmitB32TimeoutTask>
                        }
                    }

                    if ( ucRetransB64[0] != 255 ) {
8110a90c:	e0bffd03 	ldbu	r2,-12(fp)
8110a910:	10803fcc 	andi	r2,r2,255
8110a914:	10803fe0 	cmpeqi	r2,r2,255
8110a918:	10003c1e 	bne	r2,zero,8110aa0c <vTimeoutCheckerTask+0x7c0>
                        OSMutexPend(xMutexBuffer64, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110a91c:	d0a05917 	ldw	r2,-32412(gp)
8110a920:	e0fffac4 	addi	r3,fp,-21
8110a924:	180d883a 	mov	r6,r3
8110a928:	01400044 	movi	r5,1
8110a92c:	1009883a 	mov	r4,r2
8110a930:	112b1840 	call	8112b184 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110a934:	e0bffac3 	ldbu	r2,-21(fp)
8110a938:	10803fcc 	andi	r2,r2,255
8110a93c:	1000321e 	bne	r2,zero,8110aa08 <vTimeoutCheckerTask+0x7bc>
                            k = 0;
8110a940:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB64[k];
8110a944:	e0bffa83 	ldbu	r2,-22(fp)
8110a948:	e0fffd04 	addi	r3,fp,-12
8110a94c:	1885883a 	add	r2,r3,r2
8110a950:	10800003 	ldbu	r2,0(r2)
8110a954:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer64[i].ucNofRetries--;
8110a958:	e0fffa43 	ldbu	r3,-23(fp)
8110a95c:	00a04534 	movhi	r2,33044
8110a960:	10840b04 	addi	r2,r2,4140
8110a964:	190011a4 	muli	r4,r3,70
8110a968:	1105883a 	add	r2,r2,r4
8110a96c:	10801104 	addi	r2,r2,68
8110a970:	10800003 	ldbu	r2,0(r2)
8110a974:	10bfffc4 	addi	r2,r2,-1
8110a978:	1009883a 	mov	r4,r2
8110a97c:	00a04534 	movhi	r2,33044
8110a980:	10840b04 	addi	r2,r2,4140
8110a984:	18c011a4 	muli	r3,r3,70
8110a988:	10c5883a 	add	r2,r2,r3
8110a98c:	10801104 	addi	r2,r2,68
8110a990:	11000005 	stb	r4,0(r2)
                                xBuffer64[i].usiTimeOut = TIMEOUT_COUNT;
8110a994:	e0fffa43 	ldbu	r3,-23(fp)
8110a998:	00a04534 	movhi	r2,33044
8110a99c:	10840b04 	addi	r2,r2,4140
8110a9a0:	18c011a4 	muli	r3,r3,70
8110a9a4:	10c5883a 	add	r2,r2,r3
8110a9a8:	10801084 	addi	r2,r2,66
8110a9ac:	00c00104 	movi	r3,4
8110a9b0:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer64[i].buffer);                                
8110a9b4:	e0bffa43 	ldbu	r2,-23(fp)
8110a9b8:	10c011a4 	muli	r3,r2,70
8110a9bc:	00a04534 	movhi	r2,33044
8110a9c0:	10840b04 	addi	r2,r2,4140
8110a9c4:	1885883a 	add	r2,r3,r2
8110a9c8:	1009883a 	mov	r4,r2
8110a9cc:	11112700 	call	81111270 <puts>
                                k++;
8110a9d0:	e0bffa83 	ldbu	r2,-22(fp)
8110a9d4:	10800044 	addi	r2,r2,1
8110a9d8:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB64[k] != 255 );
8110a9dc:	e0bffa83 	ldbu	r2,-22(fp)
8110a9e0:	e0fffd04 	addi	r3,fp,-12
8110a9e4:	1885883a 	add	r2,r3,r2
8110a9e8:	10800003 	ldbu	r2,0(r2)
8110a9ec:	10803fcc 	andi	r2,r2,255
8110a9f0:	10803fd8 	cmpnei	r2,r2,255
8110a9f4:	103fd31e 	bne	r2,zero,8110a944 <__reset+0xfb0ea944>

                            OSMutexPost(xMutexBuffer64);
8110a9f8:	d0a05917 	ldw	r2,-32412(gp)
8110a9fc:	1009883a 	mov	r4,r2
8110aa00:	112b7280 	call	8112b728 <OSMutexPost>
8110aa04:	00000106 	br	8110aa0c <vTimeoutCheckerTask+0x7c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB64TimeoutTask();
8110aa08:	110d3d00 	call	8110d3d0 <vCouldNotRetransmitB64TimeoutTask>
                        }    
                    }

                    if ( ucRetransB128[0] != 255 ) {
8110aa0c:	e0bffe03 	ldbu	r2,-8(fp)
8110aa10:	10803fcc 	andi	r2,r2,255
8110aa14:	10803fe0 	cmpeqi	r2,r2,255
8110aa18:	10003c1e 	bne	r2,zero,8110ab0c <vTimeoutCheckerTask+0x8c0>
                        OSMutexPend(xMutexBuffer128, 1, &error_code); /* Try to get the mutex (wait 1 ticks) */
8110aa1c:	d0a05717 	ldw	r2,-32420(gp)
8110aa20:	e0fffac4 	addi	r3,fp,-21
8110aa24:	180d883a 	mov	r6,r3
8110aa28:	01400044 	movi	r5,1
8110aa2c:	1009883a 	mov	r4,r2
8110aa30:	112b1840 	call	8112b184 <OSMutexPend>
                        if ( error_code == OS_ERR_NONE ) {
8110aa34:	e0bffac3 	ldbu	r2,-21(fp)
8110aa38:	10803fcc 	andi	r2,r2,255
8110aa3c:	1000321e 	bne	r2,zero,8110ab08 <vTimeoutCheckerTask+0x8bc>
                            k = 0;
8110aa40:	e03ffa85 	stb	zero,-22(fp)
                            do
                            {
                                i = ucRetransB128[k];
8110aa44:	e0bffa83 	ldbu	r2,-22(fp)
8110aa48:	e0fffe04 	addi	r3,fp,-8
8110aa4c:	1885883a 	add	r2,r3,r2
8110aa50:	10800003 	ldbu	r2,0(r2)
8110aa54:	e0bffa45 	stb	r2,-23(fp)
                                xBuffer128[i].ucNofRetries--;
8110aa58:	e0fffa43 	ldbu	r3,-23(fp)
8110aa5c:	00a04574 	movhi	r2,33045
8110aa60:	10adb404 	addi	r2,r2,-18736
8110aa64:	190021a4 	muli	r4,r3,134
8110aa68:	1105883a 	add	r2,r2,r4
8110aa6c:	10802104 	addi	r2,r2,132
8110aa70:	10800003 	ldbu	r2,0(r2)
8110aa74:	10bfffc4 	addi	r2,r2,-1
8110aa78:	1009883a 	mov	r4,r2
8110aa7c:	00a04574 	movhi	r2,33045
8110aa80:	10adb404 	addi	r2,r2,-18736
8110aa84:	18c021a4 	muli	r3,r3,134
8110aa88:	10c5883a 	add	r2,r2,r3
8110aa8c:	10802104 	addi	r2,r2,132
8110aa90:	11000005 	stb	r4,0(r2)
                                xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110aa94:	e0fffa43 	ldbu	r3,-23(fp)
8110aa98:	00a04574 	movhi	r2,33045
8110aa9c:	10adb404 	addi	r2,r2,-18736
8110aaa0:	18c021a4 	muli	r3,r3,134
8110aaa4:	10c5883a 	add	r2,r2,r3
8110aaa8:	10802084 	addi	r2,r2,130
8110aaac:	00c00104 	movi	r3,4
8110aab0:	10c0000d 	sth	r3,0(r2)
                                puts(xBuffer128[i].buffer);                                
8110aab4:	e0bffa43 	ldbu	r2,-23(fp)
8110aab8:	10c021a4 	muli	r3,r2,134
8110aabc:	00a04574 	movhi	r2,33045
8110aac0:	10adb404 	addi	r2,r2,-18736
8110aac4:	1885883a 	add	r2,r3,r2
8110aac8:	1009883a 	mov	r4,r2
8110aacc:	11112700 	call	81111270 <puts>
                                k++;
8110aad0:	e0bffa83 	ldbu	r2,-22(fp)
8110aad4:	10800044 	addi	r2,r2,1
8110aad8:	e0bffa85 	stb	r2,-22(fp)
                            } while ( ucRetransB128[k] != 255 );
8110aadc:	e0bffa83 	ldbu	r2,-22(fp)
8110aae0:	e0fffe04 	addi	r3,fp,-8
8110aae4:	1885883a 	add	r2,r3,r2
8110aae8:	10800003 	ldbu	r2,0(r2)
8110aaec:	10803fcc 	andi	r2,r2,255
8110aaf0:	10803fd8 	cmpnei	r2,r2,255
8110aaf4:	103fd31e 	bne	r2,zero,8110aa44 <__reset+0xfb0eaa44>

                            OSMutexPost(xMutexBuffer128);
8110aaf8:	d0a05717 	ldw	r2,-32420(gp)
8110aafc:	1009883a 	mov	r4,r2
8110ab00:	112b7280 	call	8112b728 <OSMutexPost>
8110ab04:	00000106 	br	8110ab0c <vTimeoutCheckerTask+0x8c0>
                        } else {
                            /*  Could not get the mutex for the buffer32. There is no big impact to the system. So next cycle it may be transmited.
                                This is not a reason to exit the execution of all Simucam.*/
                            vCouldNotRetransmitB128TimeoutTask();
8110ab08:	110d4380 	call	8110d438 <vCouldNotRetransmitB128TimeoutTask>
                        }
                    }                    
                    OSMutexPost(xTxUARTMutex);
8110ab0c:	d0a05b17 	ldw	r2,-32404(gp)
8110ab10:	1009883a 	mov	r4,r2
8110ab14:	112b7280 	call	8112b728 <OSMutexPost>
8110ab18:	003de006 	br	8110a29c <__reset+0xfb0ea29c>
                } else {
                    /*  Couldn't get access to the UART tx buffer, there is no big impact to the system. So next cycle it may be transmited.
                        This is not a reason to exit the execution of all Simucam.*/
                    vFailCouldNotRetransmitTimeoutTask();
8110ab1c:	110d3000 	call	8110d300 <vFailCouldNotRetransmitTimeoutTask>
8110ab20:	003dde06 	br	8110a29c <__reset+0xfb0ea29c>
                }
            }

        } else {
            /* Should not get here, is a blocking semaphore for sync.*/
            vFailGetBlockingSemTimeoutTask();
8110ab24:	110d2300 	call	8110d230 <vFailGetBlockingSemTimeoutTask>
        }
    }
8110ab28:	003ddc06 	br	8110a29c <__reset+0xfb0ea29c>

8110ab2c <bResourcesInitRTOS>:
 */
TSimucam_MEB xSimMebStruct;

/* Instanceatin and Initialization of the resources for the RTOS */
bool bResourcesInitRTOS( void )
{
8110ab2c:	defff904 	addi	sp,sp,-28
8110ab30:	de00012e 	bgeu	sp,et,8110ab38 <bResourcesInitRTOS+0xc>
8110ab34:	003b68fa 	trap	3
8110ab38:	dfc00615 	stw	ra,24(sp)
8110ab3c:	df000515 	stw	fp,20(sp)
8110ab40:	df000504 	addi	fp,sp,20
	bool bSuccess = TRUE;
8110ab44:	00800044 	movi	r2,1
8110ab48:	e0bffe15 	stw	r2,-8(fp)
	INT8U err;

	/* This semaphore in the sincronization of the task receiver_com_task with sender_com_task*/
	xSemCommInit = OSSemCreate(0);
8110ab4c:	0009883a 	mov	r4,zero
8110ab50:	112ce680 	call	8112ce68 <OSSemCreate>
8110ab54:	d0a04b15 	stw	r2,-32468(gp)
	if (!xSemCommInit) {
8110ab58:	d0a04b17 	ldw	r2,-32468(gp)
8110ab5c:	1000021e 	bne	r2,zero,8110ab68 <bResourcesInitRTOS+0x3c>
		vFailCreateSemaphoreResources();
8110ab60:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ab64:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of tx buffer, between SenderTask and Acks from ReceiverTask*/
	xTxUARTMutex = OSMutexCreate(PCP_MUTEX_TX_UART_PRIO, &err);
8110ab68:	e0bfff04 	addi	r2,fp,-4
8110ab6c:	100b883a 	mov	r5,r2
8110ab70:	010000c4 	movi	r4,3
8110ab74:	112acb00 	call	8112acb0 <OSMutexCreate>
8110ab78:	d0a05b15 	stw	r2,-32404(gp)
	if ( err != OS_ERR_NONE ) {
8110ab7c:	e0bfff03 	ldbu	r2,-4(fp)
8110ab80:	10803fcc 	andi	r2,r2,255
8110ab84:	10000526 	beq	r2,zero,8110ab9c <bResourcesInitRTOS+0x70>
		vFailCreateMutexSResources(err);
8110ab88:	e0bfff03 	ldbu	r2,-4(fp)
8110ab8c:	10803fcc 	andi	r2,r2,255
8110ab90:	1009883a 	mov	r4,r2
8110ab94:	110c5c00 	call	8110c5c0 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ab98:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "big" buffer of 128 characters*/
	xMutexBuffer128 = OSMutexCreate(PCP_MUTEX_B128_PRIO, &err);
8110ab9c:	e0bfff04 	addi	r2,fp,-4
8110aba0:	100b883a 	mov	r5,r2
8110aba4:	01000184 	movi	r4,6
8110aba8:	112acb00 	call	8112acb0 <OSMutexCreate>
8110abac:	d0a05715 	stw	r2,-32420(gp)
	if ( err != OS_ERR_NONE ) {
8110abb0:	e0bfff03 	ldbu	r2,-4(fp)
8110abb4:	10803fcc 	andi	r2,r2,255
8110abb8:	10000526 	beq	r2,zero,8110abd0 <bResourcesInitRTOS+0xa4>
		vFailCreateMutexSResources(err);
8110abbc:	e0bfff03 	ldbu	r2,-4(fp)
8110abc0:	10803fcc 	andi	r2,r2,255
8110abc4:	1009883a 	mov	r4,r2
8110abc8:	110c5c00 	call	8110c5c0 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110abcc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "medium" buffer of 64 characters*/
	xMutexBuffer64 = OSMutexCreate(PCP_MUTEX_B64_PRIO, &err);
8110abd0:	e0bfff04 	addi	r2,fp,-4
8110abd4:	100b883a 	mov	r5,r2
8110abd8:	010001c4 	movi	r4,7
8110abdc:	112acb00 	call	8112acb0 <OSMutexCreate>
8110abe0:	d0a05915 	stw	r2,-32412(gp)
	if ( err != OS_ERR_NONE ) {
8110abe4:	e0bfff03 	ldbu	r2,-4(fp)
8110abe8:	10803fcc 	andi	r2,r2,255
8110abec:	10000526 	beq	r2,zero,8110ac04 <bResourcesInitRTOS+0xd8>
		vFailCreateMutexSResources(err);
8110abf0:	e0bfff03 	ldbu	r2,-4(fp)
8110abf4:	10803fcc 	andi	r2,r2,255
8110abf8:	1009883a 	mov	r4,r2
8110abfc:	110c5c00 	call	8110c5c0 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ac00:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This mutex will protect the access of the (re)transmission "small" buffer of 32 characters*/
	xMutexBuffer32 = OSMutexCreate(PCP_MUTEX_B32_PRIO, &err);
8110ac04:	e0bfff04 	addi	r2,fp,-4
8110ac08:	100b883a 	mov	r5,r2
8110ac0c:	01000204 	movi	r4,8
8110ac10:	112acb00 	call	8112acb0 <OSMutexCreate>
8110ac14:	d0a05515 	stw	r2,-32428(gp)
	if ( err != OS_ERR_NONE ) {
8110ac18:	e0bfff03 	ldbu	r2,-4(fp)
8110ac1c:	10803fcc 	andi	r2,r2,255
8110ac20:	10000526 	beq	r2,zero,8110ac38 <bResourcesInitRTOS+0x10c>
		vFailCreateMutexSResources(err);
8110ac24:	e0bfff03 	ldbu	r2,-4(fp)
8110ac28:	10803fcc 	andi	r2,r2,255
8110ac2c:	1009883a 	mov	r4,r2
8110ac30:	110c5c00 	call	8110c5c0 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ac34:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "big" buffer of 128 characters*/
	xSemCountBuffer128 = OSSemCreate(N_128);
8110ac38:	01000084 	movi	r4,2
8110ac3c:	112ce680 	call	8112ce68 <OSSemCreate>
8110ac40:	d0a04e15 	stw	r2,-32456(gp)
	if (!xSemCountBuffer128) {
8110ac44:	d0a04e17 	ldw	r2,-32456(gp)
8110ac48:	1000021e 	bne	r2,zero,8110ac54 <bResourcesInitRTOS+0x128>
		vFailCreateSemaphoreResources();
8110ac4c:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ac50:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "medium" buffer of 64 characters*/
	xSemCountBuffer64 = OSSemCreate(N_64);
8110ac54:	01000104 	movi	r4,4
8110ac58:	112ce680 	call	8112ce68 <OSSemCreate>
8110ac5c:	d0a04a15 	stw	r2,-32472(gp)
	if (!xSemCountBuffer64) {
8110ac60:	d0a04a17 	ldw	r2,-32472(gp)
8110ac64:	1000021e 	bne	r2,zero,8110ac70 <bResourcesInitRTOS+0x144>
		vFailCreateSemaphoreResources();
8110ac68:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ac6c:	e03ffe15 	stw	zero,-8(fp)
	}

	/* This semaphore will count the number of positions available in the "small" buffer of 32 characters*/
	xSemCountBuffer32 = OSSemCreate(N_32);
8110ac70:	01000204 	movi	r4,8
8110ac74:	112ce680 	call	8112ce68 <OSSemCreate>
8110ac78:	d0a05815 	stw	r2,-32416(gp)
	if (!xSemCountBuffer32) {
8110ac7c:	d0a05817 	ldw	r2,-32416(gp)
8110ac80:	1000021e 	bne	r2,zero,8110ac8c <bResourcesInitRTOS+0x160>
		vFailCreateSemaphoreResources();
8110ac84:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ac88:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Mutex and Semaphores to control the communication of FastReaderTask */
	xMutexReceivedACK = OSMutexCreate(PCP_MUTEX_RECEIVER_ACK, &err);
8110ac8c:	e0bfff04 	addi	r2,fp,-4
8110ac90:	100b883a 	mov	r5,r2
8110ac94:	01000144 	movi	r4,5
8110ac98:	112acb00 	call	8112acb0 <OSMutexCreate>
8110ac9c:	d0a05015 	stw	r2,-32448(gp)
	if ( err != OS_ERR_NONE ) {
8110aca0:	e0bfff03 	ldbu	r2,-4(fp)
8110aca4:	10803fcc 	andi	r2,r2,255
8110aca8:	10000526 	beq	r2,zero,8110acc0 <bResourcesInitRTOS+0x194>
		vFailCreateMutexSResources(err);
8110acac:	e0bfff03 	ldbu	r2,-4(fp)
8110acb0:	10803fcc 	andi	r2,r2,255
8110acb4:	1009883a 	mov	r4,r2
8110acb8:	110c5c00 	call	8110c5c0 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110acbc:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex for Reader -> Parser*/
	xMutexPreParsed = OSMutexCreate(PCP_MUTEX_PrePareseds, &err);
8110acc0:	e0bfff04 	addi	r2,fp,-4
8110acc4:	100b883a 	mov	r5,r2
8110acc8:	01000244 	movi	r4,9
8110accc:	112acb00 	call	8112acb0 <OSMutexCreate>
8110acd0:	d0a05415 	stw	r2,-32432(gp)
	if ( err != OS_ERR_NONE ) {
8110acd4:	e0bfff03 	ldbu	r2,-4(fp)
8110acd8:	10803fcc 	andi	r2,r2,255
8110acdc:	10000526 	beq	r2,zero,8110acf4 <bResourcesInitRTOS+0x1c8>
		vFailCreateMutexSResources(err);
8110ace0:	e0bfff03 	ldbu	r2,-4(fp)
8110ace4:	10803fcc 	andi	r2,r2,255
8110ace8:	1009883a 	mov	r4,r2
8110acec:	110c5c00 	call	8110c5c0 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110acf0:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountReceivedACK = OSSemCreate(0);
8110acf4:	0009883a 	mov	r4,zero
8110acf8:	112ce680 	call	8112ce68 <OSSemCreate>
8110acfc:	d0a05115 	stw	r2,-32444(gp)
	if (!xSemCountReceivedACK) {
8110ad00:	d0a05117 	ldw	r2,-32444(gp)
8110ad04:	1000021e 	bne	r2,zero,8110ad10 <bResourcesInitRTOS+0x1e4>
		vFailCreateSemaphoreResources();
8110ad08:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ad0c:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemCountPreParsed = OSSemCreate(0);
8110ad10:	0009883a 	mov	r4,zero
8110ad14:	112ce680 	call	8112ce68 <OSSemCreate>
8110ad18:	d0a04f15 	stw	r2,-32452(gp)
	if (!xSemCountPreParsed) {
8110ad1c:	d0a04f17 	ldw	r2,-32452(gp)
8110ad20:	1000021e 	bne	r2,zero,8110ad2c <bResourcesInitRTOS+0x200>
		vFailCreateSemaphoreResources();
8110ad24:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ad28:	e03ffe15 	stw	zero,-8(fp)
	}

	/* Mutex and Semaphore to AckSenderTask*/
	xSemCountSenderACK = OSSemCreate(0);
8110ad2c:	0009883a 	mov	r4,zero
8110ad30:	112ce680 	call	8112ce68 <OSSemCreate>
8110ad34:	d0a04c15 	stw	r2,-32464(gp)
	if (!xSemCountSenderACK) {
8110ad38:	d0a04c17 	ldw	r2,-32464(gp)
8110ad3c:	1000021e 	bne	r2,zero,8110ad48 <bResourcesInitRTOS+0x21c>
		vFailCreateSemaphoreResources();
8110ad40:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ad44:	e03ffe15 	stw	zero,-8(fp)
	}

	xMutexSenderACK = OSMutexCreate(PCP_MUTEX_SENDER_ACK, &err);
8110ad48:	e0bfff04 	addi	r2,fp,-4
8110ad4c:	100b883a 	mov	r5,r2
8110ad50:	01000104 	movi	r4,4
8110ad54:	112acb00 	call	8112acb0 <OSMutexCreate>
8110ad58:	d0a05a15 	stw	r2,-32408(gp)
	if ( err != OS_ERR_NONE ) {
8110ad5c:	e0bfff03 	ldbu	r2,-4(fp)
8110ad60:	10803fcc 	andi	r2,r2,255
8110ad64:	10000526 	beq	r2,zero,8110ad7c <bResourcesInitRTOS+0x250>
		vFailCreateMutexSResources(err);
8110ad68:	e0bfff03 	ldbu	r2,-4(fp)
8110ad6c:	10803fcc 	andi	r2,r2,255
8110ad70:	1009883a 	mov	r4,r2
8110ad74:	110c5c00 	call	8110c5c0 <vFailCreateMutexSResources>
		bSuccess = FALSE;
8110ad78:	e03ffe15 	stw	zero,-8(fp)
	}

	xSemTimeoutChecker = OSSemCreate(0);
8110ad7c:	0009883a 	mov	r4,zero
8110ad80:	112ce680 	call	8112ce68 <OSSemCreate>
8110ad84:	d0a05215 	stw	r2,-32440(gp)
	if (!xSemTimeoutChecker) {
8110ad88:	d0a05217 	ldw	r2,-32440(gp)
8110ad8c:	1000021e 	bne	r2,zero,8110ad98 <bResourcesInitRTOS+0x26c>
		vFailCreateSemaphoreResources();
8110ad90:	110c6200 	call	8110c620 <vFailCreateSemaphoreResources>
		bSuccess = FALSE;
8110ad94:	e03ffe15 	stw	zero,-8(fp)
	}


	/* Create the timer that will be used to count the timeout for the retransmission*/
	xTimerRetransmission = OSTmrCreate(	(INT32U         )DLY_TIMER,  /* 200 ticks = 200 millisec */
8110ad98:	e0bfff04 	addi	r2,fp,-4
8110ad9c:	d8800215 	stw	r2,8(sp)
8110ada0:	00a04534 	movhi	r2,33044
8110ada4:	10abd004 	addi	r2,r2,-20672
8110ada8:	d8800115 	stw	r2,4(sp)
8110adac:	d8000015 	stw	zero,0(sp)
8110adb0:	01e04474 	movhi	r7,33041
8110adb4:	39edd104 	addi	r7,r7,-18620
8110adb8:	01800084 	movi	r6,2
8110adbc:	01400144 	movi	r5,5
8110adc0:	01003204 	movi	r4,200
8110adc4:	112f5340 	call	8112f534 <OSTmrCreate>
8110adc8:	d0a05615 	stw	r2,-32424(gp)
										(INT8U          )OS_TMR_OPT_PERIODIC,
										(OS_TMR_CALLBACK)vTimeoutCheck,
										(void          *)0,
										(INT8U         *)"timer timeout",
										(INT8U         *)&err);	
	if ( err != OS_ERR_NONE ) {
8110adcc:	e0bfff03 	ldbu	r2,-4(fp)
8110add0:	10803fcc 	andi	r2,r2,255
8110add4:	10000226 	beq	r2,zero,8110ade0 <bResourcesInitRTOS+0x2b4>
		vFailCreateTimerRetransmisison();
8110add8:	110d14c0 	call	8110d14c <vFailCreateTimerRetransmisison>
		bSuccess = FALSE;
8110addc:	e03ffe15 	stw	zero,-8(fp)
	}

	return bSuccess;
8110ade0:	e0bffe17 	ldw	r2,-8(fp)
}
8110ade4:	e037883a 	mov	sp,fp
8110ade8:	dfc00117 	ldw	ra,4(sp)
8110adec:	df000017 	ldw	fp,0(sp)
8110adf0:	dec00204 	addi	sp,sp,8
8110adf4:	f800283a 	ret

8110adf8 <vVariablesInitialization>:

void vVariablesInitialization ( void ) {
8110adf8:	deffff04 	addi	sp,sp,-4
8110adfc:	de00012e 	bgeu	sp,et,8110ae04 <vVariablesInitialization+0xc>
8110ae00:	003b68fa 	trap	3
8110ae04:	df000015 	stw	fp,0(sp)
8110ae08:	d839883a 	mov	fp,sp
	usiIdCMD = 0;
8110ae0c:	d020530d 	sth	zero,-32436(gp)
}
8110ae10:	0001883a 	nop
8110ae14:	e037883a 	mov	sp,fp
8110ae18:	df000017 	ldw	fp,0(sp)
8110ae1c:	dec00104 	addi	sp,sp,4
8110ae20:	f800283a 	ret

8110ae24 <main>:



/* Entry point */
int main(void)
{
8110ae24:	defff704 	addi	sp,sp,-36
8110ae28:	de00012e 	bgeu	sp,et,8110ae30 <main+0xc>
8110ae2c:	003b68fa 	trap	3
8110ae30:	dfc00815 	stw	ra,32(sp)
8110ae34:	df000715 	stw	fp,28(sp)
8110ae38:	df000704 	addi	fp,sp,28
	INT8U error_code;
	bool bIniSimucamStatus = FALSE;
8110ae3c:	e03ffe15 	stw	zero,-8(fp)
	
	/* Clear the RTOS timer */
	OSTimeSet(0);
8110ae40:	0009883a 	mov	r4,zero
8110ae44:	112f4cc0 	call	8112f4cc <OSTimeSet>

	/* Debug device initialization - JTAG USB */
	#ifdef DEBUG_ON
		fp = fopen(JTAG_UART_0_NAME, "r+");
8110ae48:	01604534 	movhi	r5,33044
8110ae4c:	296bd404 	addi	r5,r5,-20656
8110ae50:	01204534 	movhi	r4,33044
8110ae54:	212bd504 	addi	r4,r4,-20652
8110ae58:	110fe040 	call	8110fe04 <fopen>
8110ae5c:	d0a04d15 	stw	r2,-32460(gp)
	#endif	


	/* Initialization of basic HW */
	vInitSimucamBasicHW();
8110ae60:	110db580 	call	8110db58 <vInitSimucamBasicHW>

	/* Test of some critical IPCores HW interfaces in the Simucam */
	bIniSimucamStatus = bTestSimucamCriticalHW();
8110ae64:	110e3b80 	call	8110e3b8 <bTestSimucamCriticalHW>
8110ae68:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110ae6c:	e0bffe17 	ldw	r2,-8(fp)
8110ae70:	1000031e 	bne	r2,zero,8110ae80 <main+0x5c>
		vFailTestCriticasParts();
8110ae74:	110c66c0 	call	8110c66c <vFailTestCriticasParts>
		return -1;
8110ae78:	00bfffc4 	movi	r2,-1
8110ae7c:	00003d06 	br	8110af74 <main+0x150>
	}


	/* Log file Initialization in the SDCard */
	bIniSimucamStatus = bInitializeSDCard();
8110ae80:	110e2040 	call	8110e204 <bInitializeSDCard>
8110ae84:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110ae88:	e0bffe17 	ldw	r2,-8(fp)
8110ae8c:	1000031e 	bne	r2,zero,8110ae9c <main+0x78>
		vFailTestCriticasParts();
8110ae90:	110c66c0 	call	8110c66c <vFailTestCriticasParts>
		return -1;
8110ae94:	00bfffc4 	movi	r2,-1
8110ae98:	00003606 	br	8110af74 <main+0x150>
	}

	bIniSimucamStatus = vLoadDefaultETHConf();
8110ae9c:	110b7940 	call	8110b794 <vLoadDefaultETHConf>
8110aea0:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110aea4:	e0bffe17 	ldw	r2,-8(fp)
8110aea8:	1000091e 	bne	r2,zero,8110aed0 <main+0xac>
		/* Default configuration for eth connection loaded */
		debug(fp, "Didn't load ETH configuration from SDCard. Default configuration will be loaded. (exit) \n");
8110aeac:	d0a04d17 	ldw	r2,-32460(gp)
8110aeb0:	100f883a 	mov	r7,r2
8110aeb4:	01801644 	movi	r6,89
8110aeb8:	01400044 	movi	r5,1
8110aebc:	01204534 	movhi	r4,33044
8110aec0:	212bda04 	addi	r4,r4,-20632
8110aec4:	11104380 	call	81110438 <fwrite>
		return -1;
8110aec8:	00bfffc4 	movi	r2,-1
8110aecc:	00002906 	br	8110af74 <main+0x150>
	}

	/* If debug is enable, will print the eth configuration in the*/
	#ifdef DEBUG_ON
		vShowEthConfig();
8110aed0:	110c1200 	call	8110c120 <vShowEthConfig>
	#endif


	/* This function creates all resources needed by the RTOS*/
	bIniSimucamStatus = bResourcesInitRTOS();
8110aed4:	110ab2c0 	call	8110ab2c <bResourcesInitRTOS>
8110aed8:	e0bffe15 	stw	r2,-8(fp)
	if (bIniSimucamStatus == FALSE) {
8110aedc:	e0bffe17 	ldw	r2,-8(fp)
8110aee0:	1000091e 	bne	r2,zero,8110af08 <main+0xe4>
		/* Default configuration for eth connection loaded */
		debug(fp, "Can't allocate resources for RTOS. (exit) \n");
8110aee4:	d0a04d17 	ldw	r2,-32460(gp)
8110aee8:	100f883a 	mov	r7,r2
8110aeec:	01800ac4 	movi	r6,43
8110aef0:	01400044 	movi	r5,1
8110aef4:	01204534 	movhi	r4,33044
8110aef8:	212bf104 	addi	r4,r4,-20540
8110aefc:	11104380 	call	81110438 <fwrite>
		return -1;
8110af00:	00bfffc4 	movi	r2,-1
8110af04:	00001b06 	br	8110af74 <main+0x150>
	}

	/* Start the structure of control of the Simucam Application, including all FEEs instances */
	vSimucamStructureInit( &xSimMebStruct );
8110af08:	01204534 	movhi	r4,33044
8110af0c:	210c5104 	addi	r4,r4,12612
8110af10:	110dc1c0 	call	8110dc1c <vSimucamStructureInit>

	/* Creating the initialization task*/
	#if STACK_MONITOR
		error_code = OSTaskCreateExt(vInitialTask,
8110af14:	00800104 	movi	r2,4
8110af18:	d8800415 	stw	r2,16(sp)
8110af1c:	d8000315 	stw	zero,12(sp)
8110af20:	00820004 	movi	r2,2048
8110af24:	d8800215 	stw	r2,8(sp)
8110af28:	00a04574 	movhi	r2,33045
8110af2c:	10a5b404 	addi	r2,r2,-26928
8110af30:	d8800115 	stw	r2,4(sp)
8110af34:	00800044 	movi	r2,1
8110af38:	d8800015 	stw	r2,0(sp)
8110af3c:	01c00044 	movi	r7,1
8110af40:	01a04574 	movhi	r6,33045
8110af44:	31adb304 	addi	r6,r6,-18740
8110af48:	000b883a 	mov	r5,zero
8110af4c:	01204474 	movhi	r4,33041
8110af50:	21230604 	addi	r4,r4,-29672
8110af54:	112defc0 	call	8112defc <OSTaskCreateExt>
8110af58:	e0bfff05 	stb	r2,-4(fp)
									NULL,
									0);
	#endif


	if ( error_code == OS_ERR_NONE ) {
8110af5c:	e0bfff03 	ldbu	r2,-4(fp)
8110af60:	1000021e 	bne	r2,zero,8110af6c <main+0x148>
		/* Start the scheduler (start the Real Time Application) */
		OSStart();
8110af64:	112747c0 	call	8112747c <OSStart>
8110af68:	00000106 	br	8110af70 <main+0x14c>
	} else {
		/* Some error occurs in the creation of the Initialization Task */
		vFailInitialization();
8110af6c:	110ca580 	call	8110ca58 <vFailInitialization>
	}
  
	return 0;
8110af70:	0005883a 	mov	r2,zero
}
8110af74:	e037883a 	mov	sp,fp
8110af78:	dfc00117 	ldw	ra,4(sp)
8110af7c:	df000017 	ldw	fp,0(sp)
8110af80:	dec00204 	addi	sp,sp,8
8110af84:	f800283a 	ret

8110af88 <vCCDLoadDefaultValues>:
 */

#include "ccd.h"


void vCCDLoadDefaultValues( TCcdInfos *ccdDef ) {
8110af88:	defffe04 	addi	sp,sp,-8
8110af8c:	de00012e 	bgeu	sp,et,8110af94 <vCCDLoadDefaultValues+0xc>
8110af90:	003b68fa 	trap	3
8110af94:	df000115 	stw	fp,4(sp)
8110af98:	df000104 	addi	fp,sp,4
8110af9c:	e13fff15 	stw	r4,-4(fp)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadCcdDefsSDCard();

	ccdDef->usiHeight = 4510;
8110afa0:	e0bfff17 	ldw	r2,-4(fp)
8110afa4:	00c46784 	movi	r3,4510
8110afa8:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = 30;
8110afac:	e0bfff17 	ldw	r2,-4(fp)
8110afb0:	00c00784 	movi	r3,30
8110afb4:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = 2255;
8110afb8:	e0bfff17 	ldw	r2,-4(fp)
8110afbc:	00c233c4 	movi	r3,2255
8110afc0:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = 15;
8110afc4:	e0bfff17 	ldw	r2,-4(fp)
8110afc8:	00c003c4 	movi	r3,15
8110afcc:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = 25;
8110afd0:	e0bfff17 	ldw	r2,-4(fp)
8110afd4:	00c00644 	movi	r3,25
8110afd8:	10c0000d 	sth	r3,0(r2)
}
8110afdc:	0001883a 	nop
8110afe0:	e037883a 	mov	sp,fp
8110afe4:	df000017 	ldw	fp,0(sp)
8110afe8:	dec00104 	addi	sp,sp,4
8110afec:	f800283a 	ret

8110aff0 <vCCDChangeValues>:

/* Only in NFEE_CONFIG of NFEE_STAND_BY */
/* Used to change de values of the CCD definitions from any source */
void vCCDChangeValues( TCcdInfos *ccdDef, unsigned short int usiHeight, unsigned short int usiOLN, unsigned short int usiHalfWidth,
                                unsigned short int usiSOverscanN, unsigned short int usiSPrescanN  ) {
8110aff0:	defff904 	addi	sp,sp,-28
8110aff4:	de00012e 	bgeu	sp,et,8110affc <vCCDChangeValues+0xc>
8110aff8:	003b68fa 	trap	3
8110affc:	df000615 	stw	fp,24(sp)
8110b000:	df000604 	addi	fp,sp,24
8110b004:	e13ffa15 	stw	r4,-24(fp)
8110b008:	2811883a 	mov	r8,r5
8110b00c:	300b883a 	mov	r5,r6
8110b010:	3809883a 	mov	r4,r7
8110b014:	e0c00117 	ldw	r3,4(fp)
8110b018:	e0800217 	ldw	r2,8(fp)
8110b01c:	e23ffb0d 	sth	r8,-20(fp)
8110b020:	e17ffc0d 	sth	r5,-16(fp)
8110b024:	e13ffd0d 	sth	r4,-12(fp)
8110b028:	e0fffe0d 	sth	r3,-8(fp)
8110b02c:	e0bfff0d 	sth	r2,-4(fp)

	ccdDef->usiHeight = usiHeight;
8110b030:	e0bffa17 	ldw	r2,-24(fp)
8110b034:	e0fffb0b 	ldhu	r3,-20(fp)
8110b038:	10c0020d 	sth	r3,8(r2)
	ccdDef->usiOLN = usiOLN;
8110b03c:	e0bffa17 	ldw	r2,-24(fp)
8110b040:	e0fffc0b 	ldhu	r3,-16(fp)
8110b044:	10c0010d 	sth	r3,4(r2)
	ccdDef->usiHalfWidth = usiHalfWidth;
8110b048:	e0bffa17 	ldw	r2,-24(fp)
8110b04c:	e0fffd0b 	ldhu	r3,-12(fp)
8110b050:	10c0018d 	sth	r3,6(r2)
	ccdDef->usiSOverscanN = usiSOverscanN;
8110b054:	e0bffa17 	ldw	r2,-24(fp)
8110b058:	e0fffe0b 	ldhu	r3,-8(fp)
8110b05c:	10c0008d 	sth	r3,2(r2)
	ccdDef->usiSPrescanN = usiSPrescanN;
8110b060:	e0bffa17 	ldw	r2,-24(fp)
8110b064:	e0ffff0b 	ldhu	r3,-4(fp)
8110b068:	10c0000d 	sth	r3,0(r2)
}
8110b06c:	0001883a 	nop
8110b070:	e037883a 	mov	sp,fp
8110b074:	df000017 	ldw	fp,0(sp)
8110b078:	dec00104 	addi	sp,sp,4
8110b07c:	f800283a 	ret

8110b080 <bSendUART128>:




/*Critical function: In the worst case it makes the task sleep for 425 miliseconds due to retries */
bool bSendUART128 ( char *cBuffer, short int siIdMessage ) {
8110b080:	deffd804 	addi	sp,sp,-160
8110b084:	de00012e 	bgeu	sp,et,8110b08c <bSendUART128+0xc>
8110b088:	003b68fa 	trap	3
8110b08c:	dfc02715 	stw	ra,156(sp)
8110b090:	df002615 	stw	fp,152(sp)
8110b094:	df002604 	addi	fp,sp,152
8110b098:	e13ffe15 	stw	r4,-8(fp)
8110b09c:	2805883a 	mov	r2,r5
8110b0a0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U ucErrorCodeSem;
	INT8U ucErrorCodeMutexRetrans;
	INT8U ucErrorCodeMutexTxUART;
	INT8U error_code;
	INT8U ucReturnMutexRetrans;
    unsigned char ucCountRetriesSem = 0;
8110b0a4:	e03fda05 	stb	zero,-152(fp)
	unsigned char ucCountRetriesMutexRetrans = 0;
8110b0a8:	e03fda45 	stb	zero,-151(fp)
	unsigned char ucCountRetriesMutexTxUART = 0;
8110b0ac:	e03fda85 	stb	zero,-150(fp)
	unsigned char i = 0;
8110b0b0:	e03fdac5 	stb	zero,-149(fp)
	bool bSuccess = FALSE;
8110b0b4:	e03fdb15 	stw	zero,-148(fp)
	char cLocalBuffer128[128];


	/* Copy cBuffer to avoid problems of reentrancy*/
	memcpy(cLocalBuffer128, cBuffer, 128);
8110b0b8:	e0fffe17 	ldw	r3,-8(fp)
8110b0bc:	e0bfdd44 	addi	r2,fp,-139
8110b0c0:	1809883a 	mov	r4,r3
8110b0c4:	00c02004 	movi	r3,128
8110b0c8:	180d883a 	mov	r6,r3
8110b0cc:	200b883a 	mov	r5,r4
8110b0d0:	1009883a 	mov	r4,r2
8110b0d4:	1110e4c0 	call	81110e4c <memcpy>
	bSuccess = FALSE;
8110b0d8:	e03fdb15 	stw	zero,-148(fp)
	/* Do while for try to get semaphore of the (re)transmission 'big' buffer (128) */
	ucCountRetriesSem = 0;
8110b0dc:	e03fda05 	stb	zero,-152(fp)
	do
	{
		ucCountRetriesSem++;
8110b0e0:	e0bfda03 	ldbu	r2,-152(fp)
8110b0e4:	10800044 	addi	r2,r2,1
8110b0e8:	e0bfda05 	stb	r2,-152(fp)
		/* This semaphore tells if there's space available in the "big" buffer */
		OSSemPend(xSemCountBuffer128, TICKS_WAITING_FOR_SPACE, &ucErrorCodeSem);
8110b0ec:	d0a04e17 	ldw	r2,-32456(gp)
8110b0f0:	e0ffdc84 	addi	r3,fp,-142
8110b0f4:	180d883a 	mov	r6,r3
8110b0f8:	01401904 	movi	r5,100
8110b0fc:	1009883a 	mov	r4,r2
8110b100:	112d1900 	call	8112d190 <OSSemPend>
		if ( ucErrorCodeSem == OS_NO_ERR ) {
8110b104:	e0bfdc83 	ldbu	r2,-142(fp)
8110b108:	10803fcc 	andi	r2,r2,255
8110b10c:	1000b51e 	bne	r2,zero,8110b3e4 <bSendUART128+0x364>
			/* There is space on the 'big' buffer of (re)transmission, but first try to transmit the packet
			   only after successful then put in the retransmission buffer. Otherwise there is chance to fill the (re)transmission
			   buffer and don't send the message.*/
			ucCountRetriesMutexTxUART = 0;
8110b110:	e03fda85 	stb	zero,-150(fp)
			do
			{
				ucCountRetriesMutexTxUART++;
8110b114:	e0bfda83 	ldbu	r2,-150(fp)
8110b118:	10800044 	addi	r2,r2,1
8110b11c:	e0bfda85 	stb	r2,-150(fp)
				/*This mutex protect the txUART buffer*/
				OSMutexPend(xTxUARTMutex, 5, &ucErrorCodeMutexTxUART); /* Wait 5 ticks = 5 ms */
8110b120:	d0a05b17 	ldw	r2,-32404(gp)
8110b124:	e0ffdd04 	addi	r3,fp,-140
8110b128:	180d883a 	mov	r6,r3
8110b12c:	01400144 	movi	r5,5
8110b130:	1009883a 	mov	r4,r2
8110b134:	112b1840 	call	8112b184 <OSMutexPend>
				if ( ucErrorCodeMutexTxUART == OS_NO_ERR ) {
8110b138:	e0bfdd03 	ldbu	r2,-140(fp)
8110b13c:	10803fcc 	andi	r2,r2,255
8110b140:	1000981e 	bne	r2,zero,8110b3a4 <bSendUART128+0x324>
					/* 	Transmit the message to the NUC*/
					/* 	Trying the best scenario that is also get the mutex of the (re)transmission buffer
					   	if couldn't get, send the message any way as fast as possible to post the tx UART mutex
					   	and as soon as possible try to get the mutex of (re)transmission buffer.*/
					puts(cLocalBuffer128);
8110b144:	e0bfdd44 	addi	r2,fp,-139
8110b148:	1009883a 	mov	r4,r2
8110b14c:	11112700 	call	81111270 <puts>
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
8110b150:	d0a05717 	ldw	r2,-32420(gp)
8110b154:	e0ffdcc4 	addi	r3,fp,-141
8110b158:	180b883a 	mov	r5,r3
8110b15c:	1009883a 	mov	r4,r2
8110b160:	112ab040 	call	8112ab04 <OSMutexAccept>
8110b164:	e0bfdc05 	stb	r2,-144(fp)
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
8110b168:	e0bfdc03 	ldbu	r2,-144(fp)
8110b16c:	10003a26 	beq	r2,zero,8110b258 <bSendUART128+0x1d8>
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110b170:	e03fdac5 	stb	zero,-149(fp)
8110b174:	00003206 	br	8110b240 <bSendUART128+0x1c0>
						{
							if ( xBuffer128[i].usiId == 0 ) {
8110b178:	e0ffdac3 	ldbu	r3,-149(fp)
8110b17c:	00a04574 	movhi	r2,33045
8110b180:	10adb404 	addi	r2,r2,-18736
8110b184:	18c021a4 	muli	r3,r3,134
8110b188:	10c5883a 	add	r2,r2,r3
8110b18c:	10802004 	addi	r2,r2,128
8110b190:	1080000b 	ldhu	r2,0(r2)
8110b194:	10bfffcc 	andi	r2,r2,65535
8110b198:	1000261e 	bne	r2,zero,8110b234 <bSendUART128+0x1b4>
								/* Found a free place */
								bSuccess = TRUE;
8110b19c:	00800044 	movi	r2,1
8110b1a0:	e0bfdb15 	stw	r2,-148(fp)
								memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110b1a4:	e0bfdac3 	ldbu	r2,-149(fp)
8110b1a8:	10c021a4 	muli	r3,r2,134
8110b1ac:	00a04574 	movhi	r2,33045
8110b1b0:	10adb404 	addi	r2,r2,-18736
8110b1b4:	1885883a 	add	r2,r3,r2
8110b1b8:	1009883a 	mov	r4,r2
8110b1bc:	e0bfdd44 	addi	r2,fp,-139
8110b1c0:	00c02004 	movi	r3,128
8110b1c4:	180d883a 	mov	r6,r3
8110b1c8:	100b883a 	mov	r5,r2
8110b1cc:	1110e4c0 	call	81110e4c <memcpy>
								xBuffer128[i].usiId = siIdMessage;
8110b1d0:	e13fdac3 	ldbu	r4,-149(fp)
8110b1d4:	e0ffff0b 	ldhu	r3,-4(fp)
8110b1d8:	00a04574 	movhi	r2,33045
8110b1dc:	10adb404 	addi	r2,r2,-18736
8110b1e0:	210021a4 	muli	r4,r4,134
8110b1e4:	1105883a 	add	r2,r2,r4
8110b1e8:	10802004 	addi	r2,r2,128
8110b1ec:	10c0000d 	sth	r3,0(r2)
								xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110b1f0:	e0ffdac3 	ldbu	r3,-149(fp)
8110b1f4:	00a04574 	movhi	r2,33045
8110b1f8:	10adb404 	addi	r2,r2,-18736
8110b1fc:	18c021a4 	muli	r3,r3,134
8110b200:	10c5883a 	add	r2,r2,r3
8110b204:	10802104 	addi	r2,r2,132
8110b208:	00c000c4 	movi	r3,3
8110b20c:	10c00005 	stb	r3,0(r2)
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110b210:	e0ffdac3 	ldbu	r3,-149(fp)
8110b214:	00a04574 	movhi	r2,33045
8110b218:	10adb404 	addi	r2,r2,-18736
8110b21c:	18c021a4 	muli	r3,r3,134
8110b220:	10c5883a 	add	r2,r2,r3
8110b224:	10802084 	addi	r2,r2,130
8110b228:	00c00104 	movi	r3,4
8110b22c:	10c0000d 	sth	r3,0(r2)
								break;
8110b230:	00000606 	br	8110b24c <bSendUART128+0x1cc>
					puts(cLocalBuffer128);
					/*OSMutexAccept => non blocking*/
					ucReturnMutexRetrans = OSMutexAccept(xMutexBuffer128, &ucErrorCodeMutexRetrans); /* Just check the the mutex (non blocking) */
					if ( ucReturnMutexRetrans != 0 ) { /* Returning zero = Mutex not available */
						/*	Best scenario, could get the mutex at the first try*/
						for(i = 0; i < N_128; i++)
8110b234:	e0bfdac3 	ldbu	r2,-149(fp)
8110b238:	10800044 	addi	r2,r2,1
8110b23c:	e0bfdac5 	stb	r2,-149(fp)
8110b240:	e0bfdac3 	ldbu	r2,-149(fp)
8110b244:	108000b0 	cmpltui	r2,r2,2
8110b248:	103fcb1e 	bne	r2,zero,8110b178 <__reset+0xfb0eb178>
								xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
								break;
							}
						}

						OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110b24c:	d0a05717 	ldw	r2,-32420(gp)
8110b250:	1009883a 	mov	r4,r2
8110b254:	112b7280 	call	8112b728 <OSMutexPost>
					}
					OSMutexPost(xTxUARTMutex);
8110b258:	d0a05b17 	ldw	r2,-32404(gp)
8110b25c:	1009883a 	mov	r4,r2
8110b260:	112b7280 	call	8112b728 <OSMutexPost>

					/*  The message was send for sure, but there no garantee that the message was copied to the (re)transmission buffer
						need check if bsuccess is true. */
					if ( bSuccess != TRUE ) {
8110b264:	e0bfdb17 	ldw	r2,-148(fp)
8110b268:	10800060 	cmpeqi	r2,r2,1
8110b26c:	10004d1e 	bne	r2,zero,8110b3a4 <bSendUART128+0x324>
						/* If not ok, try to get the mutex for 3 times */
						ucCountRetriesMutexRetrans = 0;
8110b270:	e03fda45 	stb	zero,-151(fp)
						do
						{
							ucCountRetriesMutexRetrans++;
8110b274:	e0bfda43 	ldbu	r2,-151(fp)
8110b278:	10800044 	addi	r2,r2,1
8110b27c:	e0bfda45 	stb	r2,-151(fp)
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
8110b280:	d0a05717 	ldw	r2,-32420(gp)
8110b284:	e0ffdcc4 	addi	r3,fp,-141
8110b288:	180d883a 	mov	r6,r3
8110b28c:	01400144 	movi	r5,5
8110b290:	1009883a 	mov	r4,r2
8110b294:	112b1840 	call	8112b184 <OSMutexPend>
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
8110b298:	e0bfdcc3 	ldbu	r2,-141(fp)
8110b29c:	10803fcc 	andi	r2,r2,255
8110b2a0:	10003a1e 	bne	r2,zero,8110b38c <bSendUART128+0x30c>
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110b2a4:	e03fdac5 	stb	zero,-149(fp)
8110b2a8:	00003206 	br	8110b374 <bSendUART128+0x2f4>
								{
									if ( xBuffer128[i].usiId == 0 ) {
8110b2ac:	e0ffdac3 	ldbu	r3,-149(fp)
8110b2b0:	00a04574 	movhi	r2,33045
8110b2b4:	10adb404 	addi	r2,r2,-18736
8110b2b8:	18c021a4 	muli	r3,r3,134
8110b2bc:	10c5883a 	add	r2,r2,r3
8110b2c0:	10802004 	addi	r2,r2,128
8110b2c4:	1080000b 	ldhu	r2,0(r2)
8110b2c8:	10bfffcc 	andi	r2,r2,65535
8110b2cc:	1000261e 	bne	r2,zero,8110b368 <bSendUART128+0x2e8>
										/* Found a free place */
										bSuccess = TRUE;
8110b2d0:	00800044 	movi	r2,1
8110b2d4:	e0bfdb15 	stw	r2,-148(fp)
										memcpy(xBuffer128[i].buffer, cLocalBuffer128, 128);
8110b2d8:	e0bfdac3 	ldbu	r2,-149(fp)
8110b2dc:	10c021a4 	muli	r3,r2,134
8110b2e0:	00a04574 	movhi	r2,33045
8110b2e4:	10adb404 	addi	r2,r2,-18736
8110b2e8:	1885883a 	add	r2,r3,r2
8110b2ec:	1009883a 	mov	r4,r2
8110b2f0:	e0bfdd44 	addi	r2,fp,-139
8110b2f4:	00c02004 	movi	r3,128
8110b2f8:	180d883a 	mov	r6,r3
8110b2fc:	100b883a 	mov	r5,r2
8110b300:	1110e4c0 	call	81110e4c <memcpy>
										xBuffer128[i].usiId = siIdMessage;
8110b304:	e13fdac3 	ldbu	r4,-149(fp)
8110b308:	e0ffff0b 	ldhu	r3,-4(fp)
8110b30c:	00a04574 	movhi	r2,33045
8110b310:	10adb404 	addi	r2,r2,-18736
8110b314:	210021a4 	muli	r4,r4,134
8110b318:	1105883a 	add	r2,r2,r4
8110b31c:	10802004 	addi	r2,r2,128
8110b320:	10c0000d 	sth	r3,0(r2)
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
8110b324:	e0ffdac3 	ldbu	r3,-149(fp)
8110b328:	00a04574 	movhi	r2,33045
8110b32c:	10adb404 	addi	r2,r2,-18736
8110b330:	18c021a4 	muli	r3,r3,134
8110b334:	10c5883a 	add	r2,r2,r3
8110b338:	10802104 	addi	r2,r2,132
8110b33c:	00c000c4 	movi	r3,3
8110b340:	10c00005 	stb	r3,0(r2)
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
8110b344:	e0ffdac3 	ldbu	r3,-149(fp)
8110b348:	00a04574 	movhi	r2,33045
8110b34c:	10adb404 	addi	r2,r2,-18736
8110b350:	18c021a4 	muli	r3,r3,134
8110b354:	10c5883a 	add	r2,r2,r3
8110b358:	10802084 	addi	r2,r2,130
8110b35c:	00c00104 	movi	r3,4
8110b360:	10c0000d 	sth	r3,0(r2)
										break;
8110b364:	00000606 	br	8110b380 <bSendUART128+0x300>
							ucCountRetriesMutexRetrans++;
							/*OSMutexPend => Blocking*/
							OSMutexPend(xMutexBuffer128, 5, &ucErrorCodeMutexRetrans); /*5 ticks = 5 miliseconds */
							if ( ucErrorCodeMutexRetrans == OS_NO_ERR ) {
								/* Got access to (re)transmission buffer */
								for(i = 0; i < N_128; i++)
8110b368:	e0bfdac3 	ldbu	r2,-149(fp)
8110b36c:	10800044 	addi	r2,r2,1
8110b370:	e0bfdac5 	stb	r2,-149(fp)
8110b374:	e0bfdac3 	ldbu	r2,-149(fp)
8110b378:	108000b0 	cmpltui	r2,r2,2
8110b37c:	103fcb1e 	bne	r2,zero,8110b2ac <__reset+0xfb0eb2ac>
										xBuffer128[i].ucNofRetries = N_RETRIES_COMM;
										xBuffer128[i].usiTimeOut = TIMEOUT_COUNT;
										break;
									}
								}
								OSMutexPost(xMutexBuffer128); /* Free the Mutex after use the xBuffer128*/
8110b380:	d0a05717 	ldw	r2,-32420(gp)
8110b384:	1009883a 	mov	r4,r2
8110b388:	112b7280 	call	8112b728 <OSMutexPost>
							}
						} while ((ucErrorCodeMutexRetrans!= OS_NO_ERR) || ( ucCountRetriesMutexRetrans < 4)); /* Try for 3 times*/
8110b38c:	e0bfdcc3 	ldbu	r2,-141(fp)
8110b390:	10803fcc 	andi	r2,r2,255
8110b394:	103fb71e 	bne	r2,zero,8110b274 <__reset+0xfb0eb274>
8110b398:	e0bfda43 	ldbu	r2,-151(fp)
8110b39c:	10800130 	cmpltui	r2,r2,4
8110b3a0:	103fb41e 	bne	r2,zero,8110b274 <__reset+0xfb0eb274>
					}
				}
			} while ( (ucErrorCodeMutexTxUART!= OS_NO_ERR) || ( ucCountRetriesMutexTxUART < 4) ); /* Try for 3 times*/
8110b3a4:	e0bfdd03 	ldbu	r2,-140(fp)
8110b3a8:	10803fcc 	andi	r2,r2,255
8110b3ac:	103f591e 	bne	r2,zero,8110b114 <__reset+0xfb0eb114>
8110b3b0:	e0bfda83 	ldbu	r2,-150(fp)
8110b3b4:	10800130 	cmpltui	r2,r2,4
8110b3b8:	103f561e 	bne	r2,zero,8110b114 <__reset+0xfb0eb114>

			/* If was not possible to send the message or to copy the message to the (re)transmisison buffer*/
			if (bSuccess!=TRUE) {
8110b3bc:	e0bfdb17 	ldw	r2,-148(fp)
8110b3c0:	10800060 	cmpeqi	r2,r2,1
8110b3c4:	1000071e 	bne	r2,zero,8110b3e4 <bSendUART128+0x364>
				/*	Got the semaphore but could not send te message or write in the (re)transmisison buffer,
					so give the semaphore back in order to indicate that the position of the (re)transmission buffer
					was not consumed. Another task could try to use it.*/
				error_code = OSSemPost(xSemCountBuffer128);
8110b3c8:	d0a04e17 	ldw	r2,-32456(gp)
8110b3cc:	1009883a 	mov	r4,r2
8110b3d0:	112d5180 	call	8112d518 <OSSemPost>
8110b3d4:	e0bfdc45 	stb	r2,-143(fp)
				if ( error_code != OS_ERR_NONE ) {
8110b3d8:	e0bfdc43 	ldbu	r2,-143(fp)
8110b3dc:	10000126 	beq	r2,zero,8110b3e4 <bSendUART128+0x364>
					vFailSetCountSemaphorexBuffer128(); /*Could not send back the semaphore, this is critical.*/
8110b3e0:	110cc580 	call	8110cc58 <vFailSetCountSemaphorexBuffer128>
				}
			}
		}
	} while ( (ucErrorCodeSem != OS_NO_ERR) || ( ucCountRetriesSem < 6)) ; /* Try for 5 times*/
8110b3e4:	e0bfdc83 	ldbu	r2,-142(fp)
8110b3e8:	10803fcc 	andi	r2,r2,255
8110b3ec:	103f3c1e 	bne	r2,zero,8110b0e0 <__reset+0xfb0eb0e0>
8110b3f0:	e0bfda03 	ldbu	r2,-152(fp)
8110b3f4:	108001b0 	cmpltui	r2,r2,6
8110b3f8:	103f391e 	bne	r2,zero,8110b0e0 <__reset+0xfb0eb0e0>

	return bSuccess;
8110b3fc:	e0bfdb17 	ldw	r2,-148(fp)
}
8110b400:	e037883a 	mov	sp,fp
8110b404:	dfc00117 	ldw	ra,4(sp)
8110b408:	df000017 	ldw	fp,0(sp)
8110b40c:	dec00204 	addi	sp,sp,8
8110b410:	f800283a 	ret

8110b414 <vSendEthConf>:



void vSendEthConf ( void ) {
8110b414:	deffc304 	addi	sp,sp,-244
8110b418:	de00012e 	bgeu	sp,et,8110b420 <vSendEthConf+0xc>
8110b41c:	003b68fa 	trap	3
8110b420:	dfc03c15 	stw	ra,240(sp)
8110b424:	df003b15 	stw	fp,236(sp)
8110b428:	dd403a15 	stw	r21,232(sp)
8110b42c:	dd003915 	stw	r20,228(sp)
8110b430:	dcc03815 	stw	r19,224(sp)
8110b434:	dc803715 	stw	r18,220(sp)
8110b438:	dc403615 	stw	r17,216(sp)
8110b43c:	dc003515 	stw	r16,212(sp)
8110b440:	df003b04 	addi	fp,sp,236
    char cBufferETH[128] = "";
8110b444:	e03fd98d 	sth	zero,-154(fp)
8110b448:	e03fda0d 	sth	zero,-152(fp)
8110b44c:	e0bfda84 	addi	r2,fp,-150
8110b450:	00c01f04 	movi	r3,124
8110b454:	180d883a 	mov	r6,r3
8110b458:	000b883a 	mov	r5,zero
8110b45c:	1009883a 	mov	r4,r2
8110b460:	1110f9c0 	call	81110f9c <memset>
    unsigned char crc = 0;
8110b464:	e03fd705 	stb	zero,-164(fp)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;
8110b468:	e03fd815 	stw	zero,-160(fp)

    usiIdCMDLocal = usiGetIdCMD();
8110b46c:	110b6a40 	call	8110b6a4 <usiGetIdCMD>
8110b470:	e0bfd90d 	sth	r2,-156(fp)

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b474:	e57fd90b 	ldhu	r21,-156(fp)
8110b478:	00a04574 	movhi	r2,33045
8110b47c:	10b64b04 	addi	r2,r2,-9940
8110b480:	10c00617 	ldw	r3,24(r2)
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b484:	00a04574 	movhi	r2,33045
8110b488:	10b64b04 	addi	r2,r2,-9940
8110b48c:	10800003 	ldbu	r2,0(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b490:	11003fcc 	andi	r4,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b494:	00a04574 	movhi	r2,33045
8110b498:	10b64b04 	addi	r2,r2,-9940
8110b49c:	10800043 	ldbu	r2,1(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4a0:	11403fcc 	andi	r5,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b4a4:	00a04574 	movhi	r2,33045
8110b4a8:	10b64b04 	addi	r2,r2,-9940
8110b4ac:	10800083 	ldbu	r2,2(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4b0:	11803fcc 	andi	r6,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
8110b4b4:	00a04574 	movhi	r2,33045
8110b4b8:	10b64b04 	addi	r2,r2,-9940
8110b4bc:	108000c3 	ldbu	r2,3(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4c0:	11c03fcc 	andi	r7,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b4c4:	00a04574 	movhi	r2,33045
8110b4c8:	10b64b04 	addi	r2,r2,-9940
8110b4cc:	10800203 	ldbu	r2,8(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4d0:	12003fcc 	andi	r8,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b4d4:	00a04574 	movhi	r2,33045
8110b4d8:	10b64b04 	addi	r2,r2,-9940
8110b4dc:	10800243 	ldbu	r2,9(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4e0:	12403fcc 	andi	r9,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b4e4:	00a04574 	movhi	r2,33045
8110b4e8:	10b64b04 	addi	r2,r2,-9940
8110b4ec:	10800283 	ldbu	r2,10(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b4f0:	12803fcc 	andi	r10,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
8110b4f4:	00a04574 	movhi	r2,33045
8110b4f8:	10b64b04 	addi	r2,r2,-9940
8110b4fc:	108002c3 	ldbu	r2,11(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b500:	12c03fcc 	andi	r11,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b504:	00a04574 	movhi	r2,33045
8110b508:	10b64b04 	addi	r2,r2,-9940
8110b50c:	10800103 	ldbu	r2,4(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b510:	13003fcc 	andi	r12,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b514:	00a04574 	movhi	r2,33045
8110b518:	10b64b04 	addi	r2,r2,-9940
8110b51c:	10800143 	ldbu	r2,5(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b520:	13403fcc 	andi	r13,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b524:	00a04574 	movhi	r2,33045
8110b528:	10b64b04 	addi	r2,r2,-9940
8110b52c:	10800183 	ldbu	r2,6(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b530:	13803fcc 	andi	r14,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
8110b534:	00a04574 	movhi	r2,33045
8110b538:	10b64b04 	addi	r2,r2,-9940
8110b53c:	108001c3 	ldbu	r2,7(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b540:	13c03fcc 	andi	r15,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b544:	00a04574 	movhi	r2,33045
8110b548:	10b64b04 	addi	r2,r2,-9940
8110b54c:	10800303 	ldbu	r2,12(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b550:	14003fcc 	andi	r16,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b554:	00a04574 	movhi	r2,33045
8110b558:	10b64b04 	addi	r2,r2,-9940
8110b55c:	10800343 	ldbu	r2,13(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b560:	14403fcc 	andi	r17,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b564:	00a04574 	movhi	r2,33045
8110b568:	10b64b04 	addi	r2,r2,-9940
8110b56c:	10800383 	ldbu	r2,14(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b570:	14803fcc 	andi	r18,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
8110b574:	00a04574 	movhi	r2,33045
8110b578:	10b64b04 	addi	r2,r2,-9940
8110b57c:	108003c3 	ldbu	r2,15(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b580:	14c03fcc 	andi	r19,r2,255
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
8110b584:	00a04574 	movhi	r2,33045
8110b588:	10b64b04 	addi	r2,r2,-9940
8110b58c:	1080058b 	ldhu	r2,22(r2)
    unsigned short int  usiIdCMDLocal;
	bool bSuccees = FALSE;

    usiIdCMDLocal = usiGetIdCMD();

    sprintf(cBufferETH, ETH_SPRINTF, ETH_CMD, usiIdCMDLocal, xConfEth.bDHCP,
8110b590:	10bfffcc 	andi	r2,r2,65535
8110b594:	e53fd984 	addi	r20,fp,-154
8110b598:	d8801115 	stw	r2,68(sp)
8110b59c:	dcc01015 	stw	r19,64(sp)
8110b5a0:	dc800f15 	stw	r18,60(sp)
8110b5a4:	dc400e15 	stw	r17,56(sp)
8110b5a8:	dc000d15 	stw	r16,52(sp)
8110b5ac:	dbc00c15 	stw	r15,48(sp)
8110b5b0:	db800b15 	stw	r14,44(sp)
8110b5b4:	db400a15 	stw	r13,40(sp)
8110b5b8:	db000915 	stw	r12,36(sp)
8110b5bc:	dac00815 	stw	r11,32(sp)
8110b5c0:	da800715 	stw	r10,28(sp)
8110b5c4:	da400615 	stw	r9,24(sp)
8110b5c8:	da000515 	stw	r8,20(sp)
8110b5cc:	d9c00415 	stw	r7,16(sp)
8110b5d0:	d9800315 	stw	r6,12(sp)
8110b5d4:	d9400215 	stw	r5,8(sp)
8110b5d8:	d9000115 	stw	r4,4(sp)
8110b5dc:	d8c00015 	stw	r3,0(sp)
8110b5e0:	a80f883a 	mov	r7,r21
8110b5e4:	018010c4 	movi	r6,67
8110b5e8:	01604534 	movhi	r5,33044
8110b5ec:	296bfc04 	addi	r5,r5,-20496
8110b5f0:	a009883a 	mov	r4,r20
8110b5f4:	11115b40 	call	811115b4 <sprintf>
                        xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3],
                        xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3],
                        xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3],
                        xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3],
                        xConfEth.siPortPUS);
    crc = ucCrc8wInit( cBufferETH , strlen(cBufferETH));
8110b5f8:	e0bfd984 	addi	r2,fp,-154
8110b5fc:	1009883a 	mov	r4,r2
8110b600:	11117c80 	call	811117c8 <strlen>
8110b604:	1007883a 	mov	r3,r2
8110b608:	e0bfd984 	addi	r2,fp,-154
8110b60c:	180b883a 	mov	r5,r3
8110b610:	1009883a 	mov	r4,r2
8110b614:	110c4f40 	call	8110c4f4 <ucCrc8wInit>
8110b618:	e0bfd705 	stb	r2,-164(fp)
    sprintf(cBufferETH, "%s|%hhu;", cBufferETH, crc );
8110b61c:	e13fd703 	ldbu	r4,-164(fp)
8110b620:	e0ffd984 	addi	r3,fp,-154
8110b624:	e0bfd984 	addi	r2,fp,-154
8110b628:	200f883a 	mov	r7,r4
8110b62c:	180d883a 	mov	r6,r3
8110b630:	01604534 	movhi	r5,33044
8110b634:	296c1404 	addi	r5,r5,-20400
8110b638:	1009883a 	mov	r4,r2
8110b63c:	11115b40 	call	811115b4 <sprintf>

	bSuccees = bSendUART128(cBufferETH, usiIdCMDLocal);
8110b640:	e0bfd90b 	ldhu	r2,-156(fp)
8110b644:	10ffffcc 	andi	r3,r2,65535
8110b648:	18e0001c 	xori	r3,r3,32768
8110b64c:	18e00004 	addi	r3,r3,-32768
8110b650:	e0bfd984 	addi	r2,fp,-154
8110b654:	180b883a 	mov	r5,r3
8110b658:	1009883a 	mov	r4,r2
8110b65c:	110b0800 	call	8110b080 <bSendUART128>
8110b660:	e0bfd815 	stw	r2,-160(fp)

	if ( bSuccees != TRUE ) {
8110b664:	e0bfd817 	ldw	r2,-160(fp)
8110b668:	10800060 	cmpeqi	r2,r2,1
8110b66c:	1000011e 	bne	r2,zero,8110b674 <vSendEthConf+0x260>
		/*	Message wasn't send or could not insert in the (re)transmission buffer
			this will not be returned, because the system should keep working, an error function shoudl be called
			in order to print a message in the console, and maybe further implementation in the future*/
			vCouldNotSendEthConfUART();
8110b670:	110ce600 	call	8110ce60 <vCouldNotSendEthConfUART>
	}
}
8110b674:	0001883a 	nop
8110b678:	e6fffa04 	addi	sp,fp,-24
8110b67c:	dfc00717 	ldw	ra,28(sp)
8110b680:	df000617 	ldw	fp,24(sp)
8110b684:	dd400517 	ldw	r21,20(sp)
8110b688:	dd000417 	ldw	r20,16(sp)
8110b68c:	dcc00317 	ldw	r19,12(sp)
8110b690:	dc800217 	ldw	r18,8(sp)
8110b694:	dc400117 	ldw	r17,4(sp)
8110b698:	dc000017 	ldw	r16,0(sp)
8110b69c:	dec00804 	addi	sp,sp,32
8110b6a0:	f800283a 	ret

8110b6a4 <usiGetIdCMD>:


unsigned short int usiGetIdCMD ( void ) {
8110b6a4:	deffff04 	addi	sp,sp,-4
8110b6a8:	de00012e 	bgeu	sp,et,8110b6b0 <usiGetIdCMD+0xc>
8110b6ac:	003b68fa 	trap	3
8110b6b0:	df000015 	stw	fp,0(sp)
8110b6b4:	d839883a 	mov	fp,sp
    if ( usiIdCMD > 65534 )
8110b6b8:	d0a0530b 	ldhu	r2,-32436(gp)
8110b6bc:	10ffffcc 	andi	r3,r2,65535
8110b6c0:	00bfffd4 	movui	r2,65535
8110b6c4:	1880031e 	bne	r3,r2,8110b6d4 <usiGetIdCMD+0x30>
        usiIdCMD = 1;
8110b6c8:	00800044 	movi	r2,1
8110b6cc:	d0a0530d 	sth	r2,-32436(gp)
8110b6d0:	00000306 	br	8110b6e0 <usiGetIdCMD+0x3c>
    else
        usiIdCMD++;
8110b6d4:	d0a0530b 	ldhu	r2,-32436(gp)
8110b6d8:	10800044 	addi	r2,r2,1
8110b6dc:	d0a0530d 	sth	r2,-32436(gp)
    return usiIdCMD;
8110b6e0:	d0a0530b 	ldhu	r2,-32436(gp)
}
8110b6e4:	e037883a 	mov	sp,fp
8110b6e8:	df000017 	ldw	fp,0(sp)
8110b6ec:	dec00104 	addi	sp,sp,4
8110b6f0:	f800283a 	ret

8110b6f4 <siPosStr>:

inline short int siPosStr( char *buffer, char cValue) {
8110b6f4:	defffb04 	addi	sp,sp,-20
8110b6f8:	de00012e 	bgeu	sp,et,8110b700 <siPosStr+0xc>
8110b6fc:	003b68fa 	trap	3
8110b700:	dfc00415 	stw	ra,16(sp)
8110b704:	df000315 	stw	fp,12(sp)
8110b708:	df000304 	addi	fp,sp,12
8110b70c:	e13ffe15 	stw	r4,-8(fp)
8110b710:	2805883a 	mov	r2,r5
8110b714:	e0bfff05 	stb	r2,-4(fp)
    char cTempChar[2] = "";
8110b718:	e03ffd0d 	sth	zero,-12(fp)
    cTempChar[0] = cValue; /* This step was add for performance. The command strcspn needs "" (const char *) */
8110b71c:	e0bfff03 	ldbu	r2,-4(fp)
8110b720:	e0bffd05 	stb	r2,-12(fp)
    return strcspn(buffer, cTempChar);
8110b724:	e17ffd04 	addi	r5,fp,-12
8110b728:	e13ffe17 	ldw	r4,-8(fp)
8110b72c:	111177c0 	call	8111177c <strcspn>
}
8110b730:	e037883a 	mov	sp,fp
8110b734:	dfc00117 	ldw	ra,4(sp)
8110b738:	df000017 	ldw	fp,0(sp)
8110b73c:	dec00204 	addi	sp,sp,8
8110b740:	f800283a 	ret

8110b744 <vTimeoutCheck>:


void vTimeoutCheck (void *p_arg)
{
8110b744:	defffc04 	addi	sp,sp,-16
8110b748:	de00012e 	bgeu	sp,et,8110b750 <vTimeoutCheck+0xc>
8110b74c:	003b68fa 	trap	3
8110b750:	dfc00315 	stw	ra,12(sp)
8110b754:	df000215 	stw	fp,8(sp)
8110b758:	df000204 	addi	fp,sp,8
8110b75c:	e13fff15 	stw	r4,-4(fp)
	INT8U error_code;

	/* Time to check the (re)transmission buffers, posting a semaphore to sync the task that will threat timeout logic (vTimeoutCheckerTask) */
	error_code = OSSemPost(xSemTimeoutChecker);
8110b760:	d0a05217 	ldw	r2,-32440(gp)
8110b764:	1009883a 	mov	r4,r2
8110b768:	112d5180 	call	8112d518 <OSSemPost>
8110b76c:	e0bffe05 	stb	r2,-8(fp)
	if ( error_code != OS_ERR_NONE ) {
8110b770:	e0bffe03 	ldbu	r2,-8(fp)
8110b774:	10000126 	beq	r2,zero,8110b77c <vTimeoutCheck+0x38>
		vFailPostBlockingSemTimeoutTask();
8110b778:	110d2980 	call	8110d298 <vFailPostBlockingSemTimeoutTask>
	}
}
8110b77c:	0001883a 	nop
8110b780:	e037883a 	mov	sp,fp
8110b784:	dfc00117 	ldw	ra,4(sp)
8110b788:	df000017 	ldw	fp,0(sp)
8110b78c:	dec00204 	addi	sp,sp,8
8110b790:	f800283a 	ret

8110b794 <vLoadDefaultETHConf>:

/*Configuration related to the eth connection*/
TConfEth xConfEth;


bool vLoadDefaultETHConf( void ){
8110b794:	defff504 	addi	sp,sp,-44
8110b798:	de00012e 	bgeu	sp,et,8110b7a0 <vLoadDefaultETHConf+0xc>
8110b79c:	003b68fa 	trap	3
8110b7a0:	dfc00a15 	stw	ra,40(sp)
8110b7a4:	df000915 	stw	fp,36(sp)
8110b7a8:	dc000815 	stw	r16,32(sp)
8110b7ac:	df000904 	addi	fp,sp,36
	short int siFile, sidhcpTemp;
	bool bSuccess = FALSE;
8110b7b0:	e03ff715 	stw	zero,-36(fp)
	bool bEOF = FALSE;
8110b7b4:	e03ff815 	stw	zero,-32(fp)
	bool close = FALSE;
8110b7b8:	e03ffb15 	stw	zero,-20(fp)
	unsigned char ucParser;
	char c, *p_inteiro;
	char inteiro[8];


	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){
8110b7bc:	d0a05c17 	ldw	r2,-32400(gp)
8110b7c0:	10800058 	cmpnei	r2,r2,1
8110b7c4:	1001f61e 	bne	r2,zero,8110bfa0 <vLoadDefaultETHConf+0x80c>
8110b7c8:	110e1a40 	call	8110e1a4 <bSDcardIsPresent>
8110b7cc:	1001f426 	beq	r2,zero,8110bfa0 <vLoadDefaultETHConf+0x80c>
8110b7d0:	110e1d40 	call	8110e1d4 <bSDcardFAT16Check>
8110b7d4:	1001f226 	beq	r2,zero,8110bfa0 <vLoadDefaultETHConf+0x80c>

		siFile = siOpenFile( ETH_FILE_NAME );
8110b7d8:	01204534 	movhi	r4,33044
8110b7dc:	212c1704 	addi	r4,r4,-20388
8110b7e0:	110e2fc0 	call	8110e2fc <siOpenFile>
8110b7e4:	e0bffc0d 	sth	r2,-16(fp)

		if ( siFile >= 0 ){
8110b7e8:	e0bffc0f 	ldh	r2,-16(fp)
8110b7ec:	1001e816 	blt	r2,zero,8110bf90 <vLoadDefaultETHConf+0x7fc>

			memset( &(inteiro) , 10 , sizeof( inteiro ) );
8110b7f0:	e0bffd04 	addi	r2,fp,-12
8110b7f4:	01800204 	movi	r6,8
8110b7f8:	01400284 	movi	r5,10
8110b7fc:	1009883a 	mov	r4,r2
8110b800:	1110f9c0 	call	81110f9c <memset>
			p_inteiro = inteiro;
8110b804:	e0bffd04 	addi	r2,fp,-12
8110b808:	e0bffa15 	stw	r2,-24(fp)

			do {
				c = cGetNextChar(siFile);
8110b80c:	e0bffc0f 	ldh	r2,-16(fp)
8110b810:	1009883a 	mov	r4,r2
8110b814:	110e3780 	call	8110e378 <cGetNextChar>
8110b818:	e0bff945 	stb	r2,-27(fp)
				//printf("%c \n", c);
				switch (c) {
8110b81c:	e0bff947 	ldb	r2,-27(fp)
8110b820:	10800084 	addi	r2,r2,2
8110b824:	10c015a8 	cmpgeui	r3,r2,86
8110b828:	1801cf1e 	bne	r3,zero,8110bf68 <vLoadDefaultETHConf+0x7d4>
8110b82c:	100690ba 	slli	r3,r2,2
8110b830:	00a04474 	movhi	r2,33041
8110b834:	10ae1104 	addi	r2,r2,-18364
8110b838:	1885883a 	add	r2,r3,r2
8110b83c:	10800017 	ldw	r2,0(r2)
8110b840:	1000683a 	jmp	r2
8110b844:	8110b9dc 	xori	r4,r16,17127
8110b848:	8110b9d0 	cmplti	r4,r16,17127
8110b84c:	8110bf68 	cmpgeui	r4,r16,17149
8110b850:	8110bf68 	cmpgeui	r4,r16,17149
8110b854:	8110bf68 	cmpgeui	r4,r16,17149
8110b858:	8110bf68 	cmpgeui	r4,r16,17149
8110b85c:	8110bf68 	cmpgeui	r4,r16,17149
8110b860:	8110bf68 	cmpgeui	r4,r16,17149
8110b864:	8110bf68 	cmpgeui	r4,r16,17149
8110b868:	8110bf68 	cmpgeui	r4,r16,17149
8110b86c:	8110bf68 	cmpgeui	r4,r16,17149
8110b870:	8110bf68 	cmpgeui	r4,r16,17149
8110b874:	8110bf80 	call	88110bf8 <__reset+0x20f0bf8>
8110b878:	8110bf68 	cmpgeui	r4,r16,17149
8110b87c:	8110bf68 	cmpgeui	r4,r16,17149
8110b880:	8110bf80 	call	88110bf8 <__reset+0x20f0bf8>
8110b884:	8110bf68 	cmpgeui	r4,r16,17149
8110b888:	8110bf68 	cmpgeui	r4,r16,17149
8110b88c:	8110bf68 	cmpgeui	r4,r16,17149
8110b890:	8110bf68 	cmpgeui	r4,r16,17149
8110b894:	8110bf68 	cmpgeui	r4,r16,17149
8110b898:	8110bf68 	cmpgeui	r4,r16,17149
8110b89c:	8110bf68 	cmpgeui	r4,r16,17149
8110b8a0:	8110bf68 	cmpgeui	r4,r16,17149
8110b8a4:	8110bf68 	cmpgeui	r4,r16,17149
8110b8a8:	8110bf68 	cmpgeui	r4,r16,17149
8110b8ac:	8110bf68 	cmpgeui	r4,r16,17149
8110b8b0:	8110bf68 	cmpgeui	r4,r16,17149
8110b8b4:	8110bf68 	cmpgeui	r4,r16,17149
8110b8b8:	8110bf68 	cmpgeui	r4,r16,17149
8110b8bc:	8110bf68 	cmpgeui	r4,r16,17149
8110b8c0:	8110bf68 	cmpgeui	r4,r16,17149
8110b8c4:	8110bf68 	cmpgeui	r4,r16,17149
8110b8c8:	8110bf68 	cmpgeui	r4,r16,17149
8110b8cc:	8110bf80 	call	88110bf8 <__reset+0x20f0bf8>
8110b8d0:	8110bf68 	cmpgeui	r4,r16,17149
8110b8d4:	8110bf68 	cmpgeui	r4,r16,17149
8110b8d8:	8110bf68 	cmpgeui	r4,r16,17149
8110b8dc:	8110bf68 	cmpgeui	r4,r16,17149
8110b8e0:	8110bf68 	cmpgeui	r4,r16,17149
8110b8e4:	8110bf68 	cmpgeui	r4,r16,17149
8110b8e8:	8110b99c 	xori	r4,r16,17126
8110b8ec:	8110bf68 	cmpgeui	r4,r16,17149
8110b8f0:	8110bf68 	cmpgeui	r4,r16,17149
8110b8f4:	8110bf68 	cmpgeui	r4,r16,17149
8110b8f8:	8110bf68 	cmpgeui	r4,r16,17149
8110b8fc:	8110bf68 	cmpgeui	r4,r16,17149
8110b900:	8110bf68 	cmpgeui	r4,r16,17149
8110b904:	8110bf68 	cmpgeui	r4,r16,17149
8110b908:	8110bf68 	cmpgeui	r4,r16,17149
8110b90c:	8110bf68 	cmpgeui	r4,r16,17149
8110b910:	8110bf68 	cmpgeui	r4,r16,17149
8110b914:	8110bf68 	cmpgeui	r4,r16,17149
8110b918:	8110bf68 	cmpgeui	r4,r16,17149
8110b91c:	8110bf68 	cmpgeui	r4,r16,17149
8110b920:	8110bf68 	cmpgeui	r4,r16,17149
8110b924:	8110bf68 	cmpgeui	r4,r16,17149
8110b928:	8110bf68 	cmpgeui	r4,r16,17149
8110b92c:	8110bf68 	cmpgeui	r4,r16,17149
8110b930:	8110bf68 	cmpgeui	r4,r16,17149
8110b934:	8110bf68 	cmpgeui	r4,r16,17149
8110b938:	8110bf68 	cmpgeui	r4,r16,17149
8110b93c:	8110bf30 	cmpltui	r4,r16,17148
8110b940:	8110bf68 	cmpgeui	r4,r16,17149
8110b944:	8110bf68 	cmpgeui	r4,r16,17149
8110b948:	8110bf68 	cmpgeui	r4,r16,17149
8110b94c:	8110bf68 	cmpgeui	r4,r16,17149
8110b950:	8110bf68 	cmpgeui	r4,r16,17149
8110b954:	8110bf68 	cmpgeui	r4,r16,17149
8110b958:	8110bf68 	cmpgeui	r4,r16,17149
8110b95c:	8110bd30 	cmpltui	r4,r16,17140
8110b960:	8110bf68 	cmpgeui	r4,r16,17149
8110b964:	8110bf68 	cmpgeui	r4,r16,17149
8110b968:	8110bb90 	cmplti	r4,r16,17134
8110b96c:	8110be88 	cmpgei	r4,r16,17146
8110b970:	8110bac4 	addi	r4,r16,17131
8110b974:	8110bf68 	cmpgeui	r4,r16,17149
8110b978:	8110bf68 	cmpgeui	r4,r16,17149
8110b97c:	8110bf68 	cmpgeui	r4,r16,17149
8110b980:	8110b9f4 	orhi	r4,r16,17127
8110b984:	8110bf68 	cmpgeui	r4,r16,17149
8110b988:	8110bf68 	cmpgeui	r4,r16,17149
8110b98c:	8110be00 	call	88110be0 <__reset+0x20f0be0>
8110b990:	8110bf68 	cmpgeui	r4,r16,17149
8110b994:	8110bf68 	cmpgeui	r4,r16,17149
8110b998:	8110bc60 	cmpeqi	r4,r16,17137
					case 39:// single quote '
						c = cGetNextChar(siFile);
8110b99c:	e0bffc0f 	ldh	r2,-16(fp)
8110b9a0:	1009883a 	mov	r4,r2
8110b9a4:	110e3780 	call	8110e378 <cGetNextChar>
8110b9a8:	e0bff945 	stb	r2,-27(fp)
						while ( c != 39 ){
8110b9ac:	00000406 	br	8110b9c0 <vLoadDefaultETHConf+0x22c>
							c = cGetNextChar(siFile);
8110b9b0:	e0bffc0f 	ldh	r2,-16(fp)
8110b9b4:	1009883a 	mov	r4,r2
8110b9b8:	110e3780 	call	8110e378 <cGetNextChar>
8110b9bc:	e0bff945 	stb	r2,-27(fp)
				c = cGetNextChar(siFile);
				//printf("%c \n", c);
				switch (c) {
					case 39:// single quote '
						c = cGetNextChar(siFile);
						while ( c != 39 ){
8110b9c0:	e0bff947 	ldb	r2,-27(fp)
8110b9c4:	108009d8 	cmpnei	r2,r2,39
8110b9c8:	103ff91e 	bne	r2,zero,8110b9b0 <__reset+0xfb0eb9b0>
							c = cGetNextChar(siFile);
						}
						break;
8110b9cc:	00016d06 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case -1: 	//EOF
						bEOF = TRUE;
8110b9d0:	00800044 	movi	r2,1
8110b9d4:	e0bff815 	stw	r2,-32(fp)
						break;
8110b9d8:	00016a06 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case -2: 	//EOF
						printf("Problem with SDCard");
8110b9dc:	01204534 	movhi	r4,33044
8110b9e0:	212c1904 	addi	r4,r4,-20380
8110b9e4:	11111640 	call	81111164 <printf>
						bEOF = TRUE;
8110b9e8:	00800044 	movi	r2,1
8110b9ec:	e0bff815 	stw	r2,-32(fp)
						break;
8110b9f0:	00016406 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
					case 'M':

						ucParser = 0;
8110b9f4:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110b9f8:	e0bffc0f 	ldh	r2,-16(fp)
8110b9fc:	1009883a 	mov	r4,r2
8110ba00:	110e3780 	call	8110e378 <cGetNextChar>
8110ba04:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110ba08:	d0e00317 	ldw	r3,-32756(gp)
8110ba0c:	e0bff947 	ldb	r2,-27(fp)
8110ba10:	10800044 	addi	r2,r2,1
8110ba14:	1885883a 	add	r2,r3,r2
8110ba18:	10800003 	ldbu	r2,0(r2)
8110ba1c:	10803fcc 	andi	r2,r2,255
8110ba20:	1080010c 	andi	r2,r2,4
8110ba24:	10000626 	beq	r2,zero,8110ba40 <vLoadDefaultETHConf+0x2ac>
									(*p_inteiro) = c;
8110ba28:	e0bffa17 	ldw	r2,-24(fp)
8110ba2c:	e0fff943 	ldbu	r3,-27(fp)
8110ba30:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110ba34:	e0bffa17 	ldw	r2,-24(fp)
8110ba38:	10800044 	addi	r2,r2,1
8110ba3c:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=58) && (c !=59) ); //ASCII: 58 = ':' 59 = ';'
8110ba40:	e0bff947 	ldb	r2,-27(fp)
8110ba44:	10800ea0 	cmpeqi	r2,r2,58
8110ba48:	1000031e 	bne	r2,zero,8110ba58 <vLoadDefaultETHConf+0x2c4>
8110ba4c:	e0bff947 	ldb	r2,-27(fp)
8110ba50:	10800ed8 	cmpnei	r2,r2,59
8110ba54:	103fe81e 	bne	r2,zero,8110b9f8 <__reset+0xfb0eb9f8>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110ba58:	e0bffa17 	ldw	r2,-24(fp)
8110ba5c:	00c00284 	movi	r3,10
8110ba60:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucMAC[min_sim(ucParser,5)] = atoi( inteiro );
8110ba64:	e0bff903 	ldbu	r2,-28(fp)
8110ba68:	10800168 	cmpgeui	r2,r2,5
8110ba6c:	1000021e 	bne	r2,zero,8110ba78 <vLoadDefaultETHConf+0x2e4>
8110ba70:	e43ff903 	ldbu	r16,-28(fp)
8110ba74:	00000106 	br	8110ba7c <vLoadDefaultETHConf+0x2e8>
8110ba78:	04000144 	movi	r16,5
8110ba7c:	e0bffd04 	addi	r2,fp,-12
8110ba80:	1009883a 	mov	r4,r2
8110ba84:	110fcf00 	call	8110fcf0 <atoi>
8110ba88:	1007883a 	mov	r3,r2
8110ba8c:	00a04574 	movhi	r2,33045
8110ba90:	10b64b04 	addi	r2,r2,-9940
8110ba94:	1405883a 	add	r2,r2,r16
8110ba98:	10800404 	addi	r2,r2,16
8110ba9c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110baa0:	e0bffd04 	addi	r2,fp,-12
8110baa4:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110baa8:	e0bff903 	ldbu	r2,-28(fp)
8110baac:	10800044 	addi	r2,r2,1
8110bab0:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bab4:	e0bff947 	ldb	r2,-27(fp)
8110bab8:	10800ed8 	cmpnei	r2,r2,59
8110babc:	103fce1e 	bne	r2,zero,8110b9f8 <__reset+0xfb0eb9f8>

						break;
8110bac0:	00013006 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 'I':

						ucParser = 0;
8110bac4:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bac8:	e0bffc0f 	ldh	r2,-16(fp)
8110bacc:	1009883a 	mov	r4,r2
8110bad0:	110e3780 	call	8110e378 <cGetNextChar>
8110bad4:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bad8:	d0e00317 	ldw	r3,-32756(gp)
8110badc:	e0bff947 	ldb	r2,-27(fp)
8110bae0:	10800044 	addi	r2,r2,1
8110bae4:	1885883a 	add	r2,r3,r2
8110bae8:	10800003 	ldbu	r2,0(r2)
8110baec:	10803fcc 	andi	r2,r2,255
8110baf0:	1080010c 	andi	r2,r2,4
8110baf4:	10000626 	beq	r2,zero,8110bb10 <vLoadDefaultETHConf+0x37c>
									(*p_inteiro) = c;
8110baf8:	e0bffa17 	ldw	r2,-24(fp)
8110bafc:	e0fff943 	ldbu	r3,-27(fp)
8110bb00:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bb04:	e0bffa17 	ldw	r2,-24(fp)
8110bb08:	10800044 	addi	r2,r2,1
8110bb0c:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bb10:	e0bff947 	ldb	r2,-27(fp)
8110bb14:	10800ba0 	cmpeqi	r2,r2,46
8110bb18:	1000031e 	bne	r2,zero,8110bb28 <vLoadDefaultETHConf+0x394>
8110bb1c:	e0bff947 	ldb	r2,-27(fp)
8110bb20:	10800ed8 	cmpnei	r2,r2,59
8110bb24:	103fe81e 	bne	r2,zero,8110bac8 <__reset+0xfb0ebac8>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bb28:	e0bffa17 	ldw	r2,-24(fp)
8110bb2c:	00c00284 	movi	r3,10
8110bb30:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucIP[min_sim(ucParser,3)] = atoi( inteiro );
8110bb34:	e0bff903 	ldbu	r2,-28(fp)
8110bb38:	108000e8 	cmpgeui	r2,r2,3
8110bb3c:	1000021e 	bne	r2,zero,8110bb48 <vLoadDefaultETHConf+0x3b4>
8110bb40:	e43ff903 	ldbu	r16,-28(fp)
8110bb44:	00000106 	br	8110bb4c <vLoadDefaultETHConf+0x3b8>
8110bb48:	040000c4 	movi	r16,3
8110bb4c:	e0bffd04 	addi	r2,fp,-12
8110bb50:	1009883a 	mov	r4,r2
8110bb54:	110fcf00 	call	8110fcf0 <atoi>
8110bb58:	1007883a 	mov	r3,r2
8110bb5c:	00a04574 	movhi	r2,33045
8110bb60:	10b64b04 	addi	r2,r2,-9940
8110bb64:	1405883a 	add	r2,r2,r16
8110bb68:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bb6c:	e0bffd04 	addi	r2,fp,-12
8110bb70:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bb74:	e0bff903 	ldbu	r2,-28(fp)
8110bb78:	10800044 	addi	r2,r2,1
8110bb7c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bb80:	e0bff947 	ldb	r2,-27(fp)
8110bb84:	10800ed8 	cmpnei	r2,r2,59
8110bb88:	103fcf1e 	bne	r2,zero,8110bac8 <__reset+0xfb0ebac8>

						break;
8110bb8c:	0000fd06 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 'G':

						ucParser = 0;
8110bb90:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bb94:	e0bffc0f 	ldh	r2,-16(fp)
8110bb98:	1009883a 	mov	r4,r2
8110bb9c:	110e3780 	call	8110e378 <cGetNextChar>
8110bba0:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bba4:	d0e00317 	ldw	r3,-32756(gp)
8110bba8:	e0bff947 	ldb	r2,-27(fp)
8110bbac:	10800044 	addi	r2,r2,1
8110bbb0:	1885883a 	add	r2,r3,r2
8110bbb4:	10800003 	ldbu	r2,0(r2)
8110bbb8:	10803fcc 	andi	r2,r2,255
8110bbbc:	1080010c 	andi	r2,r2,4
8110bbc0:	10000626 	beq	r2,zero,8110bbdc <vLoadDefaultETHConf+0x448>
									(*p_inteiro) = c;
8110bbc4:	e0bffa17 	ldw	r2,-24(fp)
8110bbc8:	e0fff943 	ldbu	r3,-27(fp)
8110bbcc:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bbd0:	e0bffa17 	ldw	r2,-24(fp)
8110bbd4:	10800044 	addi	r2,r2,1
8110bbd8:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bbdc:	e0bff947 	ldb	r2,-27(fp)
8110bbe0:	10800ba0 	cmpeqi	r2,r2,46
8110bbe4:	1000031e 	bne	r2,zero,8110bbf4 <vLoadDefaultETHConf+0x460>
8110bbe8:	e0bff947 	ldb	r2,-27(fp)
8110bbec:	10800ed8 	cmpnei	r2,r2,59
8110bbf0:	103fe81e 	bne	r2,zero,8110bb94 <__reset+0xfb0ebb94>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bbf4:	e0bffa17 	ldw	r2,-24(fp)
8110bbf8:	00c00284 	movi	r3,10
8110bbfc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucGTW[min_sim(ucParser,3)] = atoi( inteiro );
8110bc00:	e0bff903 	ldbu	r2,-28(fp)
8110bc04:	108000e8 	cmpgeui	r2,r2,3
8110bc08:	1000021e 	bne	r2,zero,8110bc14 <vLoadDefaultETHConf+0x480>
8110bc0c:	e43ff903 	ldbu	r16,-28(fp)
8110bc10:	00000106 	br	8110bc18 <vLoadDefaultETHConf+0x484>
8110bc14:	040000c4 	movi	r16,3
8110bc18:	e0bffd04 	addi	r2,fp,-12
8110bc1c:	1009883a 	mov	r4,r2
8110bc20:	110fcf00 	call	8110fcf0 <atoi>
8110bc24:	1007883a 	mov	r3,r2
8110bc28:	00a04574 	movhi	r2,33045
8110bc2c:	10b64b04 	addi	r2,r2,-9940
8110bc30:	1405883a 	add	r2,r2,r16
8110bc34:	10800104 	addi	r2,r2,4
8110bc38:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bc3c:	e0bffd04 	addi	r2,fp,-12
8110bc40:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bc44:	e0bff903 	ldbu	r2,-28(fp)
8110bc48:	10800044 	addi	r2,r2,1
8110bc4c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bc50:	e0bff947 	ldb	r2,-27(fp)
8110bc54:	10800ed8 	cmpnei	r2,r2,59
8110bc58:	103fce1e 	bne	r2,zero,8110bb94 <__reset+0xfb0ebb94>

						break;
8110bc5c:	0000c906 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 'S':

						ucParser = 0;
8110bc60:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bc64:	e0bffc0f 	ldh	r2,-16(fp)
8110bc68:	1009883a 	mov	r4,r2
8110bc6c:	110e3780 	call	8110e378 <cGetNextChar>
8110bc70:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bc74:	d0e00317 	ldw	r3,-32756(gp)
8110bc78:	e0bff947 	ldb	r2,-27(fp)
8110bc7c:	10800044 	addi	r2,r2,1
8110bc80:	1885883a 	add	r2,r3,r2
8110bc84:	10800003 	ldbu	r2,0(r2)
8110bc88:	10803fcc 	andi	r2,r2,255
8110bc8c:	1080010c 	andi	r2,r2,4
8110bc90:	10000626 	beq	r2,zero,8110bcac <vLoadDefaultETHConf+0x518>
									(*p_inteiro) = c;
8110bc94:	e0bffa17 	ldw	r2,-24(fp)
8110bc98:	e0fff943 	ldbu	r3,-27(fp)
8110bc9c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bca0:	e0bffa17 	ldw	r2,-24(fp)
8110bca4:	10800044 	addi	r2,r2,1
8110bca8:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bcac:	e0bff947 	ldb	r2,-27(fp)
8110bcb0:	10800ba0 	cmpeqi	r2,r2,46
8110bcb4:	1000031e 	bne	r2,zero,8110bcc4 <vLoadDefaultETHConf+0x530>
8110bcb8:	e0bff947 	ldb	r2,-27(fp)
8110bcbc:	10800ed8 	cmpnei	r2,r2,59
8110bcc0:	103fe81e 	bne	r2,zero,8110bc64 <__reset+0xfb0ebc64>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bcc4:	e0bffa17 	ldw	r2,-24(fp)
8110bcc8:	00c00284 	movi	r3,10
8110bccc:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucSubNet[min_sim(ucParser,3)] = atoi( inteiro );
8110bcd0:	e0bff903 	ldbu	r2,-28(fp)
8110bcd4:	108000e8 	cmpgeui	r2,r2,3
8110bcd8:	1000021e 	bne	r2,zero,8110bce4 <vLoadDefaultETHConf+0x550>
8110bcdc:	e43ff903 	ldbu	r16,-28(fp)
8110bce0:	00000106 	br	8110bce8 <vLoadDefaultETHConf+0x554>
8110bce4:	040000c4 	movi	r16,3
8110bce8:	e0bffd04 	addi	r2,fp,-12
8110bcec:	1009883a 	mov	r4,r2
8110bcf0:	110fcf00 	call	8110fcf0 <atoi>
8110bcf4:	1007883a 	mov	r3,r2
8110bcf8:	00a04574 	movhi	r2,33045
8110bcfc:	10b64b04 	addi	r2,r2,-9940
8110bd00:	1405883a 	add	r2,r2,r16
8110bd04:	10800204 	addi	r2,r2,8
8110bd08:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bd0c:	e0bffd04 	addi	r2,fp,-12
8110bd10:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bd14:	e0bff903 	ldbu	r2,-28(fp)
8110bd18:	10800044 	addi	r2,r2,1
8110bd1c:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bd20:	e0bff947 	ldb	r2,-27(fp)
8110bd24:	10800ed8 	cmpnei	r2,r2,59
8110bd28:	103fce1e 	bne	r2,zero,8110bc64 <__reset+0xfb0ebc64>

						break;
8110bd2c:	00009506 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 'D':

						ucParser = 0;
8110bd30:	e03ff905 	stb	zero,-28(fp)
						do {
							do {
								c = cGetNextChar(siFile);
8110bd34:	e0bffc0f 	ldh	r2,-16(fp)
8110bd38:	1009883a 	mov	r4,r2
8110bd3c:	110e3780 	call	8110e378 <cGetNextChar>
8110bd40:	e0bff945 	stb	r2,-27(fp)
								if ( isdigit( c ) ) {
8110bd44:	d0e00317 	ldw	r3,-32756(gp)
8110bd48:	e0bff947 	ldb	r2,-27(fp)
8110bd4c:	10800044 	addi	r2,r2,1
8110bd50:	1885883a 	add	r2,r3,r2
8110bd54:	10800003 	ldbu	r2,0(r2)
8110bd58:	10803fcc 	andi	r2,r2,255
8110bd5c:	1080010c 	andi	r2,r2,4
8110bd60:	10000626 	beq	r2,zero,8110bd7c <vLoadDefaultETHConf+0x5e8>
									(*p_inteiro) = c;
8110bd64:	e0bffa17 	ldw	r2,-24(fp)
8110bd68:	e0fff943 	ldbu	r3,-27(fp)
8110bd6c:	10c00005 	stb	r3,0(r2)
									p_inteiro++;
8110bd70:	e0bffa17 	ldw	r2,-24(fp)
8110bd74:	10800044 	addi	r2,r2,1
8110bd78:	e0bffa15 	stw	r2,-24(fp)
								}
							} while ( (c !=46) && (c !=59) ); //ASCII: 46 = '.' 59 = ';'
8110bd7c:	e0bff947 	ldb	r2,-27(fp)
8110bd80:	10800ba0 	cmpeqi	r2,r2,46
8110bd84:	1000031e 	bne	r2,zero,8110bd94 <vLoadDefaultETHConf+0x600>
8110bd88:	e0bff947 	ldb	r2,-27(fp)
8110bd8c:	10800ed8 	cmpnei	r2,r2,59
8110bd90:	103fe81e 	bne	r2,zero,8110bd34 <__reset+0xfb0ebd34>
							(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bd94:	e0bffa17 	ldw	r2,-24(fp)
8110bd98:	00c00284 	movi	r3,10
8110bd9c:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							xConfEth.ucDNS[min_sim(ucParser,3)] = atoi( inteiro );
8110bda0:	e0bff903 	ldbu	r2,-28(fp)
8110bda4:	108000e8 	cmpgeui	r2,r2,3
8110bda8:	1000021e 	bne	r2,zero,8110bdb4 <vLoadDefaultETHConf+0x620>
8110bdac:	e43ff903 	ldbu	r16,-28(fp)
8110bdb0:	00000106 	br	8110bdb8 <vLoadDefaultETHConf+0x624>
8110bdb4:	040000c4 	movi	r16,3
8110bdb8:	e0bffd04 	addi	r2,fp,-12
8110bdbc:	1009883a 	mov	r4,r2
8110bdc0:	110fcf00 	call	8110fcf0 <atoi>
8110bdc4:	1007883a 	mov	r3,r2
8110bdc8:	00a04574 	movhi	r2,33045
8110bdcc:	10b64b04 	addi	r2,r2,-9940
8110bdd0:	1405883a 	add	r2,r2,r16
8110bdd4:	10800304 	addi	r2,r2,12
8110bdd8:	10c00005 	stb	r3,0(r2)
							/*Tiago: Proteger com mutex*/
							p_inteiro = inteiro;
8110bddc:	e0bffd04 	addi	r2,fp,-12
8110bde0:	e0bffa15 	stw	r2,-24(fp)
							ucParser++;
8110bde4:	e0bff903 	ldbu	r2,-28(fp)
8110bde8:	10800044 	addi	r2,r2,1
8110bdec:	e0bff905 	stb	r2,-28(fp)
						} while ( (c !=59) );
8110bdf0:	e0bff947 	ldb	r2,-27(fp)
8110bdf4:	10800ed8 	cmpnei	r2,r2,59
8110bdf8:	103fce1e 	bne	r2,zero,8110bd34 <__reset+0xfb0ebd34>

						break;						
8110bdfc:	00006106 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 'P':

						do {
							c = cGetNextChar(siFile);
8110be00:	e0bffc0f 	ldh	r2,-16(fp)
8110be04:	1009883a 	mov	r4,r2
8110be08:	110e3780 	call	8110e378 <cGetNextChar>
8110be0c:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110be10:	d0e00317 	ldw	r3,-32756(gp)
8110be14:	e0bff947 	ldb	r2,-27(fp)
8110be18:	10800044 	addi	r2,r2,1
8110be1c:	1885883a 	add	r2,r3,r2
8110be20:	10800003 	ldbu	r2,0(r2)
8110be24:	10803fcc 	andi	r2,r2,255
8110be28:	1080010c 	andi	r2,r2,4
8110be2c:	10000626 	beq	r2,zero,8110be48 <vLoadDefaultETHConf+0x6b4>
								(*p_inteiro) = c;
8110be30:	e0bffa17 	ldw	r2,-24(fp)
8110be34:	e0fff943 	ldbu	r3,-27(fp)
8110be38:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110be3c:	e0bffa17 	ldw	r2,-24(fp)
8110be40:	10800044 	addi	r2,r2,1
8110be44:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110be48:	e0bff947 	ldb	r2,-27(fp)
8110be4c:	10800ed8 	cmpnei	r2,r2,59
8110be50:	103feb1e 	bne	r2,zero,8110be00 <__reset+0xfb0ebe00>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110be54:	e0bffa17 	ldw	r2,-24(fp)
8110be58:	00c00284 	movi	r3,10
8110be5c:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						xConfEth.siPortPUS = atoi( inteiro );
8110be60:	e0bffd04 	addi	r2,fp,-12
8110be64:	1009883a 	mov	r4,r2
8110be68:	110fcf00 	call	8110fcf0 <atoi>
8110be6c:	1007883a 	mov	r3,r2
8110be70:	00a04574 	movhi	r2,33045
8110be74:	10b64b04 	addi	r2,r2,-9940
8110be78:	10c0058d 	sth	r3,22(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110be7c:	e0bffd04 	addi	r2,fp,-12
8110be80:	e0bffa15 	stw	r2,-24(fp)

						break;
8110be84:	00003f06 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 'H':

						do {
							c = cGetNextChar(siFile);
8110be88:	e0bffc0f 	ldh	r2,-16(fp)
8110be8c:	1009883a 	mov	r4,r2
8110be90:	110e3780 	call	8110e378 <cGetNextChar>
8110be94:	e0bff945 	stb	r2,-27(fp)
							if ( isdigit( c ) ) {
8110be98:	d0e00317 	ldw	r3,-32756(gp)
8110be9c:	e0bff947 	ldb	r2,-27(fp)
8110bea0:	10800044 	addi	r2,r2,1
8110bea4:	1885883a 	add	r2,r3,r2
8110bea8:	10800003 	ldbu	r2,0(r2)
8110beac:	10803fcc 	andi	r2,r2,255
8110beb0:	1080010c 	andi	r2,r2,4
8110beb4:	10000626 	beq	r2,zero,8110bed0 <vLoadDefaultETHConf+0x73c>
								(*p_inteiro) = c;
8110beb8:	e0bffa17 	ldw	r2,-24(fp)
8110bebc:	e0fff943 	ldbu	r3,-27(fp)
8110bec0:	10c00005 	stb	r3,0(r2)
								p_inteiro++;
8110bec4:	e0bffa17 	ldw	r2,-24(fp)
8110bec8:	10800044 	addi	r2,r2,1
8110becc:	e0bffa15 	stw	r2,-24(fp)
							}
						} while ( c !=59 ); //ASCII: 59 = ';'
8110bed0:	e0bff947 	ldb	r2,-27(fp)
8110bed4:	10800ed8 	cmpnei	r2,r2,59
8110bed8:	103feb1e 	bne	r2,zero,8110be88 <__reset+0xfb0ebe88>
						(*p_inteiro) = 10; // Adding LN -> ASCII: 10 = LINE FEED
8110bedc:	e0bffa17 	ldw	r2,-24(fp)
8110bee0:	00c00284 	movi	r3,10
8110bee4:	10c00005 	stb	r3,0(r2)
						/*Tiago: Proteger com mutex*/
						sidhcpTemp = atoi( inteiro );
8110bee8:	e0bffd04 	addi	r2,fp,-12
8110beec:	1009883a 	mov	r4,r2
8110bef0:	110fcf00 	call	8110fcf0 <atoi>
8110bef4:	e0bffc8d 	sth	r2,-14(fp)
						if (sidhcpTemp == 1)
8110bef8:	e0bffc8f 	ldh	r2,-14(fp)
8110befc:	10800058 	cmpnei	r2,r2,1
8110bf00:	1000051e 	bne	r2,zero,8110bf18 <vLoadDefaultETHConf+0x784>
							xConfEth.bDHCP = TRUE;
8110bf04:	00a04574 	movhi	r2,33045
8110bf08:	10b64b04 	addi	r2,r2,-9940
8110bf0c:	00c00044 	movi	r3,1
8110bf10:	10c00615 	stw	r3,24(r2)
8110bf14:	00000306 	br	8110bf24 <vLoadDefaultETHConf+0x790>
						else
							xConfEth.bDHCP = FALSE;
8110bf18:	00a04574 	movhi	r2,33045
8110bf1c:	10b64b04 	addi	r2,r2,-9940
8110bf20:	10000615 	stw	zero,24(r2)
						/*Tiago: Proteger com mutex*/
						p_inteiro = inteiro;
8110bf24:	e0bffd04 	addi	r2,fp,-12
8110bf28:	e0bffa15 	stw	r2,-24(fp)

						break;
8110bf2c:	00001506 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					case 0x3C: //"<"
						close = siCloseFile(siFile);
8110bf30:	e0bffc0f 	ldh	r2,-16(fp)
8110bf34:	1009883a 	mov	r4,r2
8110bf38:	110e3380 	call	8110e338 <siCloseFile>
8110bf3c:	e0bffb15 	stw	r2,-20(fp)
						if (close == FALSE)
8110bf40:	e0bffb17 	ldw	r2,-20(fp)
8110bf44:	1000031e 	bne	r2,zero,8110bf54 <vLoadDefaultETHConf+0x7c0>
							printf("Problema em fechar o arquivo\n");
8110bf48:	01204534 	movhi	r4,33044
8110bf4c:	212c1e04 	addi	r4,r4,-20360
8110bf50:	11112700 	call	81111270 <puts>

						/* End of Parser File */
						bEOF = TRUE;
8110bf54:	00800044 	movi	r2,1
8110bf58:	e0bff815 	stw	r2,-32(fp)
						bSuccess = TRUE; //pensar melhor
8110bf5c:	00800044 	movi	r2,1
8110bf60:	e0bff715 	stw	r2,-36(fp)
						break;
8110bf64:	00000706 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
8110bf68:	e0bff947 	ldb	r2,-27(fp)
8110bf6c:	100b883a 	mov	r5,r2
8110bf70:	01204534 	movhi	r4,33044
8110bf74:	212c2604 	addi	r4,r4,-20328
8110bf78:	11111640 	call	81111164 <printf>
						break;
8110bf7c:	00000106 	br	8110bf84 <vLoadDefaultETHConf+0x7f0>
						bEOF = TRUE;
						break;
					case 0x20: 	//ASCII: 0x20 = space
					case 10: 	//ASCII: 10 = LN
					case 13: 	//ASCII: 13 = CR
						break;
8110bf80:	0001883a 	nop
						break;
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
8110bf84:	e0bff817 	ldw	r2,-32(fp)
8110bf88:	103e2026 	beq	r2,zero,8110b80c <__reset+0xfb0eb80c>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110bf8c:	00000706 	br	8110bfac <vLoadDefaultETHConf+0x818>
					default:
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
8110bf90:	01204534 	movhi	r4,33044
8110bf94:	212c3304 	addi	r4,r4,-20276
8110bf98:	11112700 	call	81111270 <puts>

	if ( (xSdHandle.connected == TRUE) && (bSDcardIsPresent()) && (bSDcardFAT16Check()) ){

		siFile = siOpenFile( ETH_FILE_NAME );

		if ( siFile >= 0 ){
8110bf9c:	00000306 	br	8110bfac <vLoadDefaultETHConf+0x818>
						printf("Algum erro ocorreu na leitura do arquivo! c= %i \n", c);
						break;
				}
			} while ( bEOF == FALSE );
		} else printf("N�o achou o arquivo - fopen fail\n");
	} else printf("Sem SDCard\n");
8110bfa0:	01204534 	movhi	r4,33044
8110bfa4:	212c3c04 	addi	r4,r4,-20240
8110bfa8:	11112700 	call	81111270 <puts>

	/* Load the default configuration if not successful in read the SDCard */
	if ( bSuccess == FALSE ) {
8110bfac:	e0bff717 	ldw	r2,-36(fp)
8110bfb0:	1000541e 	bne	r2,zero,8110c104 <vLoadDefaultETHConf+0x970>
		/*Enviar mensagem que e gravar log que n�o encontrou o arquivo e come�ara a utilizar o padrao*/
		printf("Aten��o: Arquivo de conex�o n�o foi encontrado. Carregando conf padrao\n");
8110bfb4:	01204534 	movhi	r4,33044
8110bfb8:	212c3f04 	addi	r4,r4,-20228
8110bfbc:	11112700 	call	81111270 <puts>
		printf("N�o encontrou:'%s'.\n", ETH_FILE_NAME);
8110bfc0:	01604534 	movhi	r5,33044
8110bfc4:	296c1704 	addi	r5,r5,-20388
8110bfc8:	01204534 	movhi	r4,33044
8110bfcc:	212c5304 	addi	r4,r4,-20148
8110bfd0:	11111640 	call	81111164 <printf>


		xConfEth.siPortPUS = 17000;
8110bfd4:	00a04574 	movhi	r2,33045
8110bfd8:	10b64b04 	addi	r2,r2,-9940
8110bfdc:	00d09a04 	movi	r3,17000
8110bfe0:	10c0058d 	sth	r3,22(r2)
		/*ucIP[0].ucIP[1].ucIP[2].ucIP[3]
		 *192.168.0.5*/
		xConfEth.ucIP[0] = 192;
8110bfe4:	00a04574 	movhi	r2,33045
8110bfe8:	10b64b04 	addi	r2,r2,-9940
8110bfec:	00fff004 	movi	r3,-64
8110bff0:	10c00005 	stb	r3,0(r2)
		xConfEth.ucIP[1] = 168;
8110bff4:	00a04574 	movhi	r2,33045
8110bff8:	10b64b04 	addi	r2,r2,-9940
8110bffc:	00ffea04 	movi	r3,-88
8110c000:	10c00045 	stb	r3,1(r2)
		xConfEth.ucIP[2] = 0;
8110c004:	00a04574 	movhi	r2,33045
8110c008:	10b64b04 	addi	r2,r2,-9940
8110c00c:	10000085 	stb	zero,2(r2)
		xConfEth.ucIP[3] = 5;
8110c010:	00a04574 	movhi	r2,33045
8110c014:	10b64b04 	addi	r2,r2,-9940
8110c018:	00c00144 	movi	r3,5
8110c01c:	10c000c5 	stb	r3,3(r2)

		/*ucGTW[0].ucGTW[1].ucGTW[2].ucGTW[3]
		 *192.168.0.1*/
		xConfEth.ucGTW[0] = 192;
8110c020:	00a04574 	movhi	r2,33045
8110c024:	10b64b04 	addi	r2,r2,-9940
8110c028:	00fff004 	movi	r3,-64
8110c02c:	10c00105 	stb	r3,4(r2)
		xConfEth.ucGTW[1] = 168;
8110c030:	00a04574 	movhi	r2,33045
8110c034:	10b64b04 	addi	r2,r2,-9940
8110c038:	00ffea04 	movi	r3,-88
8110c03c:	10c00145 	stb	r3,5(r2)
		xConfEth.ucGTW[2] = 0;
8110c040:	00a04574 	movhi	r2,33045
8110c044:	10b64b04 	addi	r2,r2,-9940
8110c048:	10000185 	stb	zero,6(r2)
		xConfEth.ucGTW[3] = 1;
8110c04c:	00a04574 	movhi	r2,33045
8110c050:	10b64b04 	addi	r2,r2,-9940
8110c054:	00c00044 	movi	r3,1
8110c058:	10c001c5 	stb	r3,7(r2)

		/*ucSubNet[0].ucSubNet[1].ucSubNet[2].ucSubNet[3]
		 *192.168.0.5*/
		xConfEth.ucSubNet[0] = 255;
8110c05c:	00a04574 	movhi	r2,33045
8110c060:	10b64b04 	addi	r2,r2,-9940
8110c064:	00ffffc4 	movi	r3,-1
8110c068:	10c00205 	stb	r3,8(r2)
		xConfEth.ucSubNet[1] = 255;
8110c06c:	00a04574 	movhi	r2,33045
8110c070:	10b64b04 	addi	r2,r2,-9940
8110c074:	00ffffc4 	movi	r3,-1
8110c078:	10c00245 	stb	r3,9(r2)
		xConfEth.ucSubNet[2] = 255;
8110c07c:	00a04574 	movhi	r2,33045
8110c080:	10b64b04 	addi	r2,r2,-9940
8110c084:	00ffffc4 	movi	r3,-1
8110c088:	10c00285 	stb	r3,10(r2)
		xConfEth.ucSubNet[3] = 0;
8110c08c:	00a04574 	movhi	r2,33045
8110c090:	10b64b04 	addi	r2,r2,-9940
8110c094:	100002c5 	stb	zero,11(r2)


		/*ucMAC[0]:ucMAC[1]:ucMAC[2]:ucMAC[3]:ucMAC[4]:ucMAC[5]
		 *fc:f7:63:4d:1f:42*/
		xConfEth.ucMAC[0] = 0xFC;
8110c098:	00a04574 	movhi	r2,33045
8110c09c:	10b64b04 	addi	r2,r2,-9940
8110c0a0:	00ffff04 	movi	r3,-4
8110c0a4:	10c00405 	stb	r3,16(r2)
		xConfEth.ucMAC[1] = 0xF7;
8110c0a8:	00a04574 	movhi	r2,33045
8110c0ac:	10b64b04 	addi	r2,r2,-9940
8110c0b0:	00fffdc4 	movi	r3,-9
8110c0b4:	10c00445 	stb	r3,17(r2)
		xConfEth.ucMAC[2] = 0x63;
8110c0b8:	00a04574 	movhi	r2,33045
8110c0bc:	10b64b04 	addi	r2,r2,-9940
8110c0c0:	00c018c4 	movi	r3,99
8110c0c4:	10c00485 	stb	r3,18(r2)
		xConfEth.ucMAC[3] = 0x4D;
8110c0c8:	00a04574 	movhi	r2,33045
8110c0cc:	10b64b04 	addi	r2,r2,-9940
8110c0d0:	00c01344 	movi	r3,77
8110c0d4:	10c004c5 	stb	r3,19(r2)
		xConfEth.ucMAC[4] = 0x1F;
8110c0d8:	00a04574 	movhi	r2,33045
8110c0dc:	10b64b04 	addi	r2,r2,-9940
8110c0e0:	00c007c4 	movi	r3,31
8110c0e4:	10c00505 	stb	r3,20(r2)
		xConfEth.ucMAC[5] = 0x42;
8110c0e8:	00a04574 	movhi	r2,33045
8110c0ec:	10b64b04 	addi	r2,r2,-9940
8110c0f0:	00c01084 	movi	r3,66
8110c0f4:	10c00545 	stb	r3,21(r2)

		xConfEth.bDHCP = FALSE;
8110c0f8:	00a04574 	movhi	r2,33045
8110c0fc:	10b64b04 	addi	r2,r2,-9940
8110c100:	10000615 	stw	zero,24(r2)

	}

	return bSuccess;
8110c104:	e0bff717 	ldw	r2,-36(fp)
}
8110c108:	e6ffff04 	addi	sp,fp,-4
8110c10c:	dfc00217 	ldw	ra,8(sp)
8110c110:	df000117 	ldw	fp,4(sp)
8110c114:	dc000017 	ldw	r16,0(sp)
8110c118:	dec00304 	addi	sp,sp,12
8110c11c:	f800283a 	ret

8110c120 <vShowEthConfig>:

#ifdef DEBUG_ON
	void vShowEthConfig( void ) {
8110c120:	defff004 	addi	sp,sp,-64
8110c124:	de00012e 	bgeu	sp,et,8110c12c <vShowEthConfig+0xc>
8110c128:	003b68fa 	trap	3
8110c12c:	dfc00f15 	stw	ra,60(sp)
8110c130:	df000e15 	stw	fp,56(sp)
8110c134:	df000e04 	addi	fp,sp,56
		char buffer[40];

		debug(fp, "Ethernet loaded configuration.\n");
8110c138:	d0a04d17 	ldw	r2,-32460(gp)
8110c13c:	100f883a 	mov	r7,r2
8110c140:	018007c4 	movi	r6,31
8110c144:	01400044 	movi	r5,1
8110c148:	01204534 	movhi	r4,33044
8110c14c:	212c5904 	addi	r4,r4,-20124
8110c150:	11104380 	call	81110438 <fwrite>

		memset(buffer,0,40);
8110c154:	01800a04 	movi	r6,40
8110c158:	000b883a 	mov	r5,zero
8110c15c:	e13ff604 	addi	r4,fp,-40
8110c160:	1110f9c0 	call	81110f9c <memset>
		sprintf(buffer, "MAC: %x : %x : %x : %x : %x : %x \n", xConfEth.ucMAC[0], xConfEth.ucMAC[1], xConfEth.ucMAC[2], xConfEth.ucMAC[3], xConfEth.ucMAC[4], xConfEth.ucMAC[5]);
8110c164:	00a04574 	movhi	r2,33045
8110c168:	10b64b04 	addi	r2,r2,-9940
8110c16c:	10800403 	ldbu	r2,16(r2)
8110c170:	11803fcc 	andi	r6,r2,255
8110c174:	00a04574 	movhi	r2,33045
8110c178:	10b64b04 	addi	r2,r2,-9940
8110c17c:	10800443 	ldbu	r2,17(r2)
8110c180:	11c03fcc 	andi	r7,r2,255
8110c184:	00a04574 	movhi	r2,33045
8110c188:	10b64b04 	addi	r2,r2,-9940
8110c18c:	10800483 	ldbu	r2,18(r2)
8110c190:	10c03fcc 	andi	r3,r2,255
8110c194:	00a04574 	movhi	r2,33045
8110c198:	10b64b04 	addi	r2,r2,-9940
8110c19c:	108004c3 	ldbu	r2,19(r2)
8110c1a0:	11003fcc 	andi	r4,r2,255
8110c1a4:	00a04574 	movhi	r2,33045
8110c1a8:	10b64b04 	addi	r2,r2,-9940
8110c1ac:	10800503 	ldbu	r2,20(r2)
8110c1b0:	11403fcc 	andi	r5,r2,255
8110c1b4:	00a04574 	movhi	r2,33045
8110c1b8:	10b64b04 	addi	r2,r2,-9940
8110c1bc:	10800543 	ldbu	r2,21(r2)
8110c1c0:	10803fcc 	andi	r2,r2,255
8110c1c4:	d8800315 	stw	r2,12(sp)
8110c1c8:	d9400215 	stw	r5,8(sp)
8110c1cc:	d9000115 	stw	r4,4(sp)
8110c1d0:	d8c00015 	stw	r3,0(sp)
8110c1d4:	01604534 	movhi	r5,33044
8110c1d8:	296c6104 	addi	r5,r5,-20092
8110c1dc:	e13ff604 	addi	r4,fp,-40
8110c1e0:	11115b40 	call	811115b4 <sprintf>
		debug(fp, buffer );
8110c1e4:	d0a04d17 	ldw	r2,-32460(gp)
8110c1e8:	e17ff604 	addi	r5,fp,-40
8110c1ec:	1009883a 	mov	r4,r2
8110c1f0:	110fe4c0 	call	8110fe4c <fprintf>

		memset(buffer,0,40);
8110c1f4:	01800a04 	movi	r6,40
8110c1f8:	000b883a 	mov	r5,zero
8110c1fc:	e13ff604 	addi	r4,fp,-40
8110c200:	1110f9c0 	call	81110f9c <memset>
		sprintf(buffer, "IP: %i . %i . %i . %i \n",xConfEth.ucIP[0], xConfEth.ucIP[1], xConfEth.ucIP[2], xConfEth.ucIP[3] );
8110c204:	00a04574 	movhi	r2,33045
8110c208:	10b64b04 	addi	r2,r2,-9940
8110c20c:	10800003 	ldbu	r2,0(r2)
8110c210:	11003fcc 	andi	r4,r2,255
8110c214:	00a04574 	movhi	r2,33045
8110c218:	10b64b04 	addi	r2,r2,-9940
8110c21c:	10800043 	ldbu	r2,1(r2)
8110c220:	11403fcc 	andi	r5,r2,255
8110c224:	00a04574 	movhi	r2,33045
8110c228:	10b64b04 	addi	r2,r2,-9940
8110c22c:	10800083 	ldbu	r2,2(r2)
8110c230:	10c03fcc 	andi	r3,r2,255
8110c234:	00a04574 	movhi	r2,33045
8110c238:	10b64b04 	addi	r2,r2,-9940
8110c23c:	108000c3 	ldbu	r2,3(r2)
8110c240:	10803fcc 	andi	r2,r2,255
8110c244:	d8800115 	stw	r2,4(sp)
8110c248:	d8c00015 	stw	r3,0(sp)
8110c24c:	280f883a 	mov	r7,r5
8110c250:	200d883a 	mov	r6,r4
8110c254:	01604534 	movhi	r5,33044
8110c258:	296c6a04 	addi	r5,r5,-20056
8110c25c:	e13ff604 	addi	r4,fp,-40
8110c260:	11115b40 	call	811115b4 <sprintf>
		debug(fp, buffer );
8110c264:	d0a04d17 	ldw	r2,-32460(gp)
8110c268:	e17ff604 	addi	r5,fp,-40
8110c26c:	1009883a 	mov	r4,r2
8110c270:	110fe4c0 	call	8110fe4c <fprintf>

		memset(buffer,0,40);
8110c274:	01800a04 	movi	r6,40
8110c278:	000b883a 	mov	r5,zero
8110c27c:	e13ff604 	addi	r4,fp,-40
8110c280:	1110f9c0 	call	81110f9c <memset>
		sprintf(buffer, "GTW: %i . %i . %i . %i \n",xConfEth.ucGTW[0], xConfEth.ucGTW[1], xConfEth.ucGTW[2], xConfEth.ucGTW[3] );
8110c284:	00a04574 	movhi	r2,33045
8110c288:	10b64b04 	addi	r2,r2,-9940
8110c28c:	10800103 	ldbu	r2,4(r2)
8110c290:	11003fcc 	andi	r4,r2,255
8110c294:	00a04574 	movhi	r2,33045
8110c298:	10b64b04 	addi	r2,r2,-9940
8110c29c:	10800143 	ldbu	r2,5(r2)
8110c2a0:	11403fcc 	andi	r5,r2,255
8110c2a4:	00a04574 	movhi	r2,33045
8110c2a8:	10b64b04 	addi	r2,r2,-9940
8110c2ac:	10800183 	ldbu	r2,6(r2)
8110c2b0:	10c03fcc 	andi	r3,r2,255
8110c2b4:	00a04574 	movhi	r2,33045
8110c2b8:	10b64b04 	addi	r2,r2,-9940
8110c2bc:	108001c3 	ldbu	r2,7(r2)
8110c2c0:	10803fcc 	andi	r2,r2,255
8110c2c4:	d8800115 	stw	r2,4(sp)
8110c2c8:	d8c00015 	stw	r3,0(sp)
8110c2cc:	280f883a 	mov	r7,r5
8110c2d0:	200d883a 	mov	r6,r4
8110c2d4:	01604534 	movhi	r5,33044
8110c2d8:	296c7004 	addi	r5,r5,-20032
8110c2dc:	e13ff604 	addi	r4,fp,-40
8110c2e0:	11115b40 	call	811115b4 <sprintf>
		debug(fp, buffer );
8110c2e4:	d0a04d17 	ldw	r2,-32460(gp)
8110c2e8:	e17ff604 	addi	r5,fp,-40
8110c2ec:	1009883a 	mov	r4,r2
8110c2f0:	110fe4c0 	call	8110fe4c <fprintf>

		memset(buffer,0,40);
8110c2f4:	01800a04 	movi	r6,40
8110c2f8:	000b883a 	mov	r5,zero
8110c2fc:	e13ff604 	addi	r4,fp,-40
8110c300:	1110f9c0 	call	81110f9c <memset>
		sprintf(buffer, "Sub: %i . %i . %i . %i \n",xConfEth.ucSubNet[0], xConfEth.ucSubNet[1], xConfEth.ucSubNet[2], xConfEth.ucSubNet[3] );
8110c304:	00a04574 	movhi	r2,33045
8110c308:	10b64b04 	addi	r2,r2,-9940
8110c30c:	10800203 	ldbu	r2,8(r2)
8110c310:	11003fcc 	andi	r4,r2,255
8110c314:	00a04574 	movhi	r2,33045
8110c318:	10b64b04 	addi	r2,r2,-9940
8110c31c:	10800243 	ldbu	r2,9(r2)
8110c320:	11403fcc 	andi	r5,r2,255
8110c324:	00a04574 	movhi	r2,33045
8110c328:	10b64b04 	addi	r2,r2,-9940
8110c32c:	10800283 	ldbu	r2,10(r2)
8110c330:	10c03fcc 	andi	r3,r2,255
8110c334:	00a04574 	movhi	r2,33045
8110c338:	10b64b04 	addi	r2,r2,-9940
8110c33c:	108002c3 	ldbu	r2,11(r2)
8110c340:	10803fcc 	andi	r2,r2,255
8110c344:	d8800115 	stw	r2,4(sp)
8110c348:	d8c00015 	stw	r3,0(sp)
8110c34c:	280f883a 	mov	r7,r5
8110c350:	200d883a 	mov	r6,r4
8110c354:	01604534 	movhi	r5,33044
8110c358:	296c7704 	addi	r5,r5,-20004
8110c35c:	e13ff604 	addi	r4,fp,-40
8110c360:	11115b40 	call	811115b4 <sprintf>
		debug(fp, buffer );
8110c364:	d0a04d17 	ldw	r2,-32460(gp)
8110c368:	e17ff604 	addi	r5,fp,-40
8110c36c:	1009883a 	mov	r4,r2
8110c370:	110fe4c0 	call	8110fe4c <fprintf>

		memset(buffer,0,40);
8110c374:	01800a04 	movi	r6,40
8110c378:	000b883a 	mov	r5,zero
8110c37c:	e13ff604 	addi	r4,fp,-40
8110c380:	1110f9c0 	call	81110f9c <memset>
		sprintf(buffer, "DNS: %i . %i . %i . %i \n",xConfEth.ucDNS[0], xConfEth.ucDNS[1], xConfEth.ucDNS[2], xConfEth.ucDNS[3] );
8110c384:	00a04574 	movhi	r2,33045
8110c388:	10b64b04 	addi	r2,r2,-9940
8110c38c:	10800303 	ldbu	r2,12(r2)
8110c390:	11003fcc 	andi	r4,r2,255
8110c394:	00a04574 	movhi	r2,33045
8110c398:	10b64b04 	addi	r2,r2,-9940
8110c39c:	10800343 	ldbu	r2,13(r2)
8110c3a0:	11403fcc 	andi	r5,r2,255
8110c3a4:	00a04574 	movhi	r2,33045
8110c3a8:	10b64b04 	addi	r2,r2,-9940
8110c3ac:	10800383 	ldbu	r2,14(r2)
8110c3b0:	10c03fcc 	andi	r3,r2,255
8110c3b4:	00a04574 	movhi	r2,33045
8110c3b8:	10b64b04 	addi	r2,r2,-9940
8110c3bc:	108003c3 	ldbu	r2,15(r2)
8110c3c0:	10803fcc 	andi	r2,r2,255
8110c3c4:	d8800115 	stw	r2,4(sp)
8110c3c8:	d8c00015 	stw	r3,0(sp)
8110c3cc:	280f883a 	mov	r7,r5
8110c3d0:	200d883a 	mov	r6,r4
8110c3d4:	01604534 	movhi	r5,33044
8110c3d8:	296c7e04 	addi	r5,r5,-19976
8110c3dc:	e13ff604 	addi	r4,fp,-40
8110c3e0:	11115b40 	call	811115b4 <sprintf>
		debug(fp, buffer );
8110c3e4:	d0a04d17 	ldw	r2,-32460(gp)
8110c3e8:	e17ff604 	addi	r5,fp,-40
8110c3ec:	1009883a 	mov	r4,r2
8110c3f0:	110fe4c0 	call	8110fe4c <fprintf>

		memset(buffer,0,40);
8110c3f4:	01800a04 	movi	r6,40
8110c3f8:	000b883a 	mov	r5,zero
8110c3fc:	e13ff604 	addi	r4,fp,-40
8110c400:	1110f9c0 	call	81110f9c <memset>
		sprintf(buffer, "Porta PUS: %i\n", xConfEth.siPortPUS );
8110c404:	00a04574 	movhi	r2,33045
8110c408:	10b64b04 	addi	r2,r2,-9940
8110c40c:	1080058b 	ldhu	r2,22(r2)
8110c410:	10bfffcc 	andi	r2,r2,65535
8110c414:	100d883a 	mov	r6,r2
8110c418:	01604534 	movhi	r5,33044
8110c41c:	296c8504 	addi	r5,r5,-19948
8110c420:	e13ff604 	addi	r4,fp,-40
8110c424:	11115b40 	call	811115b4 <sprintf>
		debug(fp, buffer );
8110c428:	d0a04d17 	ldw	r2,-32460(gp)
8110c42c:	e17ff604 	addi	r5,fp,-40
8110c430:	1009883a 	mov	r4,r2
8110c434:	110fe4c0 	call	8110fe4c <fprintf>

	}
8110c438:	0001883a 	nop
8110c43c:	e037883a 	mov	sp,fp
8110c440:	dfc00117 	ldw	ra,4(sp)
8110c444:	df000017 	ldw	fp,0(sp)
8110c448:	dec00204 	addi	sp,sp,8
8110c44c:	f800283a 	ret

8110c450 <ucCrc8>:

#include "crc8.h"


unsigned char ucCrc8(unsigned crc, unsigned char const *data, size_t len)
{
8110c450:	defffb04 	addi	sp,sp,-20
8110c454:	de00012e 	bgeu	sp,et,8110c45c <ucCrc8+0xc>
8110c458:	003b68fa 	trap	3
8110c45c:	df000415 	stw	fp,16(sp)
8110c460:	df000404 	addi	fp,sp,16
8110c464:	e13ffd15 	stw	r4,-12(fp)
8110c468:	e17ffe15 	stw	r5,-8(fp)
8110c46c:	e1bfff15 	stw	r6,-4(fp)
    if (data == NULL)
8110c470:	e0bffe17 	ldw	r2,-8(fp)
8110c474:	1000021e 	bne	r2,zero,8110c480 <ucCrc8+0x30>
        return 0;
8110c478:	0005883a 	mov	r2,zero
8110c47c:	00001906 	br	8110c4e4 <ucCrc8+0x94>
    crc &= 0xff;
8110c480:	e0bffd17 	ldw	r2,-12(fp)
8110c484:	10803fcc 	andi	r2,r2,255
8110c488:	e0bffd15 	stw	r2,-12(fp)
    unsigned char const *end = data + len;
8110c48c:	e0fffe17 	ldw	r3,-8(fp)
8110c490:	e0bfff17 	ldw	r2,-4(fp)
8110c494:	1885883a 	add	r2,r3,r2
8110c498:	e0bffc15 	stw	r2,-16(fp)
    while (data < end)
8110c49c:	00000d06 	br	8110c4d4 <ucCrc8+0x84>
        crc = crc8_table[crc ^ *data++];
8110c4a0:	e0bffe17 	ldw	r2,-8(fp)
8110c4a4:	10c00044 	addi	r3,r2,1
8110c4a8:	e0fffe15 	stw	r3,-8(fp)
8110c4ac:	10800003 	ldbu	r2,0(r2)
8110c4b0:	10c03fcc 	andi	r3,r2,255
8110c4b4:	e0bffd17 	ldw	r2,-12(fp)
8110c4b8:	1886f03a 	xor	r3,r3,r2
8110c4bc:	00a04534 	movhi	r2,33044
8110c4c0:	10ac88c4 	addi	r2,r2,-19933
8110c4c4:	10c5883a 	add	r2,r2,r3
8110c4c8:	10800003 	ldbu	r2,0(r2)
8110c4cc:	10803fcc 	andi	r2,r2,255
8110c4d0:	e0bffd15 	stw	r2,-12(fp)
{
    if (data == NULL)
        return 0;
    crc &= 0xff;
    unsigned char const *end = data + len;
    while (data < end)
8110c4d4:	e0fffe17 	ldw	r3,-8(fp)
8110c4d8:	e0bffc17 	ldw	r2,-16(fp)
8110c4dc:	18bff036 	bltu	r3,r2,8110c4a0 <__reset+0xfb0ec4a0>
        crc = crc8_table[crc ^ *data++];
    return crc;
8110c4e0:	e0bffd17 	ldw	r2,-12(fp)
}
8110c4e4:	e037883a 	mov	sp,fp
8110c4e8:	df000017 	ldw	fp,0(sp)
8110c4ec:	dec00104 	addi	sp,sp,4
8110c4f0:	f800283a 	ret

8110c4f4 <ucCrc8wInit>:

unsigned char ucCrc8wInit(char const *data, size_t len)
{
8110c4f4:	defffb04 	addi	sp,sp,-20
8110c4f8:	de00012e 	bgeu	sp,et,8110c500 <ucCrc8wInit+0xc>
8110c4fc:	003b68fa 	trap	3
8110c500:	dfc00415 	stw	ra,16(sp)
8110c504:	df000315 	stw	fp,12(sp)
8110c508:	df000304 	addi	fp,sp,12
8110c50c:	e13ffe15 	stw	r4,-8(fp)
8110c510:	e17fff15 	stw	r5,-4(fp)
	unsigned char crc;
	crc = ucCrc8(0, NULL, 0);
8110c514:	000d883a 	mov	r6,zero
8110c518:	000b883a 	mov	r5,zero
8110c51c:	0009883a 	mov	r4,zero
8110c520:	110c4500 	call	8110c450 <ucCrc8>
8110c524:	e0bffd05 	stb	r2,-12(fp)
	return ucCrc8(crc, (unsigned char const *)data, len);
8110c528:	e0bffd03 	ldbu	r2,-12(fp)
8110c52c:	e1bfff17 	ldw	r6,-4(fp)
8110c530:	e17ffe17 	ldw	r5,-8(fp)
8110c534:	1009883a 	mov	r4,r2
8110c538:	110c4500 	call	8110c450 <ucCrc8>
}
8110c53c:	e037883a 	mov	sp,fp
8110c540:	dfc00117 	ldw	ra,4(sp)
8110c544:	df000017 	ldw	fp,0(sp)
8110c548:	dec00204 	addi	sp,sp,8
8110c54c:	f800283a 	ret

8110c550 <printErrorTask>:

#include "error_handler_simucam.h"


#ifdef DEBUG_ON
    void printErrorTask( INT8U error_code ) {
8110c550:	defff904 	addi	sp,sp,-28
8110c554:	de00012e 	bgeu	sp,et,8110c55c <printErrorTask+0xc>
8110c558:	003b68fa 	trap	3
8110c55c:	dfc00615 	stw	ra,24(sp)
8110c560:	df000515 	stw	fp,20(sp)
8110c564:	df000504 	addi	fp,sp,20
8110c568:	2005883a 	mov	r2,r4
8110c56c:	e0bfff05 	stb	r2,-4(fp)
		char buffer[16] = "";
8110c570:	e03ffb15 	stw	zero,-20(fp)
8110c574:	e03ffc15 	stw	zero,-16(fp)
8110c578:	e03ffd15 	stw	zero,-12(fp)
8110c57c:	e03ffe15 	stw	zero,-8(fp)
		
		sprintf(buffer, "Err: %d\n", error_code);
8110c580:	e0bfff03 	ldbu	r2,-4(fp)
8110c584:	100d883a 	mov	r6,r2
8110c588:	01604534 	movhi	r5,33044
8110c58c:	296cc904 	addi	r5,r5,-19676
8110c590:	e13ffb04 	addi	r4,fp,-20
8110c594:	11115b40 	call	811115b4 <sprintf>
		debug(fp, buffer);
8110c598:	d0a04d17 	ldw	r2,-32460(gp)
8110c59c:	e17ffb04 	addi	r5,fp,-20
8110c5a0:	1009883a 	mov	r4,r2
8110c5a4:	110fe4c0 	call	8110fe4c <fprintf>
	}
8110c5a8:	0001883a 	nop
8110c5ac:	e037883a 	mov	sp,fp
8110c5b0:	dfc00117 	ldw	ra,4(sp)
8110c5b4:	df000017 	ldw	fp,0(sp)
8110c5b8:	dec00204 	addi	sp,sp,8
8110c5bc:	f800283a 	ret

8110c5c0 <vFailCreateMutexSResources>:
#endif

void vFailCreateMutexSResources( INT8U error_code )
{
8110c5c0:	defffd04 	addi	sp,sp,-12
8110c5c4:	de00012e 	bgeu	sp,et,8110c5cc <vFailCreateMutexSResources+0xc>
8110c5c8:	003b68fa 	trap	3
8110c5cc:	dfc00215 	stw	ra,8(sp)
8110c5d0:	df000115 	stw	fp,4(sp)
8110c5d4:	df000104 	addi	fp,sp,4
8110c5d8:	2005883a 	mov	r2,r4
8110c5dc:	e0bfff05 	stb	r2,-4(fp)
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateMutexSResources. (exit)");
8110c5e0:	d0a04d17 	ldw	r2,-32460(gp)
8110c5e4:	100f883a 	mov	r7,r2
8110c5e8:	01800884 	movi	r6,34
8110c5ec:	01400044 	movi	r5,1
8110c5f0:	01204534 	movhi	r4,33044
8110c5f4:	212ccc04 	addi	r4,r4,-19664
8110c5f8:	11104380 	call	81110438 <fwrite>
	#endif
	#ifdef DEBUG_ON
		printErrorTask(error_code);
8110c5fc:	e0bfff03 	ldbu	r2,-4(fp)
8110c600:	1009883a 	mov	r4,r2
8110c604:	110c5500 	call	8110c550 <printErrorTask>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c608:	0001883a 	nop
8110c60c:	e037883a 	mov	sp,fp
8110c610:	dfc00117 	ldw	ra,4(sp)
8110c614:	df000017 	ldw	fp,0(sp)
8110c618:	dec00204 	addi	sp,sp,8
8110c61c:	f800283a 	ret

8110c620 <vFailCreateSemaphoreResources>:

void vFailCreateSemaphoreResources( void )
{
8110c620:	defffe04 	addi	sp,sp,-8
8110c624:	de00012e 	bgeu	sp,et,8110c62c <vFailCreateSemaphoreResources+0xc>
8110c628:	003b68fa 	trap	3
8110c62c:	dfc00115 	stw	ra,4(sp)
8110c630:	df000015 	stw	fp,0(sp)
8110c634:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateSemaphoreResources. (exit)");
8110c638:	d0a04d17 	ldw	r2,-32460(gp)
8110c63c:	100f883a 	mov	r7,r2
8110c640:	01800944 	movi	r6,37
8110c644:	01400044 	movi	r5,1
8110c648:	01204534 	movhi	r4,33044
8110c64c:	212cd504 	addi	r4,r4,-19628
8110c650:	11104380 	call	81110438 <fwrite>

	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c654:	0001883a 	nop
8110c658:	e037883a 	mov	sp,fp
8110c65c:	dfc00117 	ldw	ra,4(sp)
8110c660:	df000017 	ldw	fp,0(sp)
8110c664:	dec00204 	addi	sp,sp,8
8110c668:	f800283a 	ret

8110c66c <vFailTestCriticasParts>:


void vFailTestCriticasParts( void )
{
8110c66c:	defffe04 	addi	sp,sp,-8
8110c670:	de00012e 	bgeu	sp,et,8110c678 <vFailTestCriticasParts+0xc>
8110c674:	003b68fa 	trap	3
8110c678:	dfc00115 	stw	ra,4(sp)
8110c67c:	df000015 	stw	fp,0(sp)
8110c680:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTestCriticasParts. (exit)");
8110c684:	d0a04d17 	ldw	r2,-32460(gp)
8110c688:	100f883a 	mov	r7,r2
8110c68c:	01800784 	movi	r6,30
8110c690:	01400044 	movi	r5,1
8110c694:	01204534 	movhi	r4,33044
8110c698:	212cdf04 	addi	r4,r4,-19588
8110c69c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c6a0:	0001883a 	nop
8110c6a4:	e037883a 	mov	sp,fp
8110c6a8:	dfc00117 	ldw	ra,4(sp)
8110c6ac:	df000017 	ldw	fp,0(sp)
8110c6b0:	dec00204 	addi	sp,sp,8
8110c6b4:	f800283a 	ret

8110c6b8 <vFailSendxSemCommInit>:


void vFailSendxSemCommInit( void )
{
8110c6b8:	defffe04 	addi	sp,sp,-8
8110c6bc:	de00012e 	bgeu	sp,et,8110c6c4 <vFailSendxSemCommInit+0xc>
8110c6c0:	003b68fa 	trap	3
8110c6c4:	dfc00115 	stw	ra,4(sp)
8110c6c8:	df000015 	stw	fp,0(sp)
8110c6cc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendxSemCommInit. (exit)");
8110c6d0:	d0a04d17 	ldw	r2,-32460(gp)
8110c6d4:	100f883a 	mov	r7,r2
8110c6d8:	01800744 	movi	r6,29
8110c6dc:	01400044 	movi	r5,1
8110c6e0:	01204534 	movhi	r4,33044
8110c6e4:	212ce704 	addi	r4,r4,-19556
8110c6e8:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the vParserRXTask. (exit)");
8110c6ec:	d0a04d17 	ldw	r2,-32460(gp)
8110c6f0:	100f883a 	mov	r7,r2
8110c6f4:	01800a04 	movi	r6,40
8110c6f8:	01400044 	movi	r5,1
8110c6fc:	01204534 	movhi	r4,33044
8110c700:	212cef04 	addi	r4,r4,-19524
8110c704:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c708:	0001883a 	nop
8110c70c:	e037883a 	mov	sp,fp
8110c710:	dfc00117 	ldw	ra,4(sp)
8110c714:	df000017 	ldw	fp,0(sp)
8110c718:	dec00204 	addi	sp,sp,8
8110c71c:	f800283a 	ret

8110c720 <vFailSendPreParsedSemaphore>:

void vFailSendPreParsedSemaphore( void )
{
8110c720:	defffe04 	addi	sp,sp,-8
8110c724:	de00012e 	bgeu	sp,et,8110c72c <vFailSendPreParsedSemaphore+0xc>
8110c728:	003b68fa 	trap	3
8110c72c:	dfc00115 	stw	ra,4(sp)
8110c730:	df000015 	stw	fp,0(sp)
8110c734:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreParsedSemaphore. (exit)");
8110c738:	d0a04d17 	ldw	r2,-32460(gp)
8110c73c:	100f883a 	mov	r7,r2
8110c740:	018008c4 	movi	r6,35
8110c744:	01400044 	movi	r5,1
8110c748:	01204534 	movhi	r4,33044
8110c74c:	212cfa04 	addi	r4,r4,-19480
8110c750:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c754:	0001883a 	nop
8110c758:	e037883a 	mov	sp,fp
8110c75c:	dfc00117 	ldw	ra,4(sp)
8110c760:	df000017 	ldw	fp,0(sp)
8110c764:	dec00204 	addi	sp,sp,8
8110c768:	f800283a 	ret

8110c76c <vFailSendPreAckReceiverSemaphore>:

void vFailSendPreAckReceiverSemaphore( void )
{
8110c76c:	defffe04 	addi	sp,sp,-8
8110c770:	de00012e 	bgeu	sp,et,8110c778 <vFailSendPreAckReceiverSemaphore+0xc>
8110c774:	003b68fa 	trap	3
8110c778:	dfc00115 	stw	ra,4(sp)
8110c77c:	df000015 	stw	fp,0(sp)
8110c780:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckReceiverSemaphore. (exit)");
8110c784:	d0a04d17 	ldw	r2,-32460(gp)
8110c788:	100f883a 	mov	r7,r2
8110c78c:	01800a04 	movi	r6,40
8110c790:	01400044 	movi	r5,1
8110c794:	01204534 	movhi	r4,33044
8110c798:	212d0304 	addi	r4,r4,-19444
8110c79c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c7a0:	0001883a 	nop
8110c7a4:	e037883a 	mov	sp,fp
8110c7a8:	dfc00117 	ldw	ra,4(sp)
8110c7ac:	df000017 	ldw	fp,0(sp)
8110c7b0:	dec00204 	addi	sp,sp,8
8110c7b4:	f800283a 	ret

8110c7b8 <vFailSendPreAckSenderSemaphore>:


void vFailSendPreAckSenderSemaphore( void )
{
8110c7b8:	defffe04 	addi	sp,sp,-8
8110c7bc:	de00012e 	bgeu	sp,et,8110c7c4 <vFailSendPreAckSenderSemaphore+0xc>
8110c7c0:	003b68fa 	trap	3
8110c7c4:	dfc00115 	stw	ra,4(sp)
8110c7c8:	df000015 	stw	fp,0(sp)
8110c7cc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendPreAckSenderSemaphore. (exit)");
8110c7d0:	d0a04d17 	ldw	r2,-32460(gp)
8110c7d4:	100f883a 	mov	r7,r2
8110c7d8:	01800984 	movi	r6,38
8110c7dc:	01400044 	movi	r5,1
8110c7e0:	01204534 	movhi	r4,33044
8110c7e4:	212d0e04 	addi	r4,r4,-19400
8110c7e8:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c7ec:	0001883a 	nop
8110c7f0:	e037883a 	mov	sp,fp
8110c7f4:	dfc00117 	ldw	ra,4(sp)
8110c7f8:	df000017 	ldw	fp,0(sp)
8110c7fc:	dec00204 	addi	sp,sp,8
8110c800:	f800283a 	ret

8110c804 <vFailGetCountSemaphoreSenderTask>:


void vFailGetCountSemaphoreSenderTask( void )
{
8110c804:	defffe04 	addi	sp,sp,-8
8110c808:	de00012e 	bgeu	sp,et,8110c810 <vFailGetCountSemaphoreSenderTask+0xc>
8110c80c:	003b68fa 	trap	3
8110c810:	dfc00115 	stw	ra,4(sp)
8110c814:	df000015 	stw	fp,0(sp)
8110c818:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreSenderTask. (exit)");
8110c81c:	d0a04d17 	ldw	r2,-32460(gp)
8110c820:	100f883a 	mov	r7,r2
8110c824:	01800a04 	movi	r6,40
8110c828:	01400044 	movi	r5,1
8110c82c:	01204534 	movhi	r4,33044
8110c830:	212d1804 	addi	r4,r4,-19360
8110c834:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vSenderAckTask)\n");
8110c838:	d0a04d17 	ldw	r2,-32460(gp)
8110c83c:	100f883a 	mov	r7,r2
8110c840:	01801104 	movi	r6,68
8110c844:	01400044 	movi	r5,1
8110c848:	01204534 	movhi	r4,33044
8110c84c:	212d2304 	addi	r4,r4,-19316
8110c850:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c854:	0001883a 	nop
8110c858:	e037883a 	mov	sp,fp
8110c85c:	dfc00117 	ldw	ra,4(sp)
8110c860:	df000017 	ldw	fp,0(sp)
8110c864:	dec00204 	addi	sp,sp,8
8110c868:	f800283a 	ret

8110c86c <vFailGetMutexSenderTask>:

void vFailGetMutexSenderTask( void )
{
8110c86c:	defffe04 	addi	sp,sp,-8
8110c870:	de00012e 	bgeu	sp,et,8110c878 <vFailGetMutexSenderTask+0xc>
8110c874:	003b68fa 	trap	3
8110c878:	dfc00115 	stw	ra,4(sp)
8110c87c:	df000015 	stw	fp,0(sp)
8110c880:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexSenderTask. (exit)");
8110c884:	d0a04d17 	ldw	r2,-32460(gp)
8110c888:	100f883a 	mov	r7,r2
8110c88c:	018007c4 	movi	r6,31
8110c890:	01400044 	movi	r5,1
8110c894:	01204534 	movhi	r4,33044
8110c898:	212d3504 	addi	r4,r4,-19244
8110c89c:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vSenderAckTask)\n");
8110c8a0:	d0a04d17 	ldw	r2,-32460(gp)
8110c8a4:	100f883a 	mov	r7,r2
8110c8a8:	01801084 	movi	r6,66
8110c8ac:	01400044 	movi	r5,1
8110c8b0:	01204534 	movhi	r4,33044
8110c8b4:	212d3d04 	addi	r4,r4,-19212
8110c8b8:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c8bc:	0001883a 	nop
8110c8c0:	e037883a 	mov	sp,fp
8110c8c4:	dfc00117 	ldw	ra,4(sp)
8110c8c8:	df000017 	ldw	fp,0(sp)
8110c8cc:	dec00204 	addi	sp,sp,8
8110c8d0:	f800283a 	ret

8110c8d4 <vFailGetCountSemaphoreReceiverTask>:


void vFailGetCountSemaphoreReceiverTask( void )
{
8110c8d4:	defffe04 	addi	sp,sp,-8
8110c8d8:	de00012e 	bgeu	sp,et,8110c8e0 <vFailGetCountSemaphoreReceiverTask+0xc>
8110c8dc:	003b68fa 	trap	3
8110c8e0:	dfc00115 	stw	ra,4(sp)
8110c8e4:	df000015 	stw	fp,0(sp)
8110c8e8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphoreReceiverTask. (exit)");
8110c8ec:	d0a04d17 	ldw	r2,-32460(gp)
8110c8f0:	100f883a 	mov	r7,r2
8110c8f4:	01800a84 	movi	r6,42
8110c8f8:	01400044 	movi	r5,1
8110c8fc:	01204534 	movhi	r4,33044
8110c900:	212d4e04 	addi	r4,r4,-19144
8110c904:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vReceiverAckTask)\n");
8110c908:	d0a04d17 	ldw	r2,-32460(gp)
8110c90c:	100f883a 	mov	r7,r2
8110c910:	01801184 	movi	r6,70
8110c914:	01400044 	movi	r5,1
8110c918:	01204534 	movhi	r4,33044
8110c91c:	212d5904 	addi	r4,r4,-19100
8110c920:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c924:	0001883a 	nop
8110c928:	e037883a 	mov	sp,fp
8110c92c:	dfc00117 	ldw	ra,4(sp)
8110c930:	df000017 	ldw	fp,0(sp)
8110c934:	dec00204 	addi	sp,sp,8
8110c938:	f800283a 	ret

8110c93c <vFailGetMutexReceiverTask>:

void vFailGetMutexReceiverTask( void )
{
8110c93c:	defffe04 	addi	sp,sp,-8
8110c940:	de00012e 	bgeu	sp,et,8110c948 <vFailGetMutexReceiverTask+0xc>
8110c944:	003b68fa 	trap	3
8110c948:	dfc00115 	stw	ra,4(sp)
8110c94c:	df000015 	stw	fp,0(sp)
8110c950:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexReceiverTask. (exit)");
8110c954:	d0a04d17 	ldw	r2,-32460(gp)
8110c958:	100f883a 	mov	r7,r2
8110c95c:	01800844 	movi	r6,33
8110c960:	01400044 	movi	r5,1
8110c964:	01204534 	movhi	r4,33044
8110c968:	212d6b04 	addi	r4,r4,-19028
8110c96c:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the xSenderACK.(vReceiverAckTask)\n");
8110c970:	d0a04d17 	ldw	r2,-32460(gp)
8110c974:	100f883a 	mov	r7,r2
8110c978:	01801104 	movi	r6,68
8110c97c:	01400044 	movi	r5,1
8110c980:	01204534 	movhi	r4,33044
8110c984:	212d7404 	addi	r4,r4,-18992
8110c988:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c98c:	0001883a 	nop
8110c990:	e037883a 	mov	sp,fp
8110c994:	dfc00117 	ldw	ra,4(sp)
8110c998:	df000017 	ldw	fp,0(sp)
8110c99c:	dec00204 	addi	sp,sp,8
8110c9a0:	f800283a 	ret

8110c9a4 <vFailGetMutexTxUARTSenderTask>:


void vFailGetMutexTxUARTSenderTask( void )
{
8110c9a4:	defffe04 	addi	sp,sp,-8
8110c9a8:	de00012e 	bgeu	sp,et,8110c9b0 <vFailGetMutexTxUARTSenderTask+0xc>
8110c9ac:	003b68fa 	trap	3
8110c9b0:	dfc00115 	stw	ra,4(sp)
8110c9b4:	df000015 	stw	fp,0(sp)
8110c9b8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMutexTxUARTSenderTask. (exit)");
8110c9bc:	d0a04d17 	ldw	r2,-32460(gp)
8110c9c0:	100f883a 	mov	r7,r2
8110c9c4:	01800944 	movi	r6,37
8110c9c8:	01400044 	movi	r5,1
8110c9cc:	01204534 	movhi	r4,33044
8110c9d0:	212d8604 	addi	r4,r4,-18920
8110c9d4:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get mutex that protects the tx buffer.(vSenderAckTask)\n");
8110c9d8:	d0a04d17 	ldw	r2,-32460(gp)
8110c9dc:	100f883a 	mov	r7,r2
8110c9e0:	01801044 	movi	r6,65
8110c9e4:	01400044 	movi	r5,1
8110c9e8:	01204534 	movhi	r4,33044
8110c9ec:	212d9004 	addi	r4,r4,-18880
8110c9f0:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110c9f4:	0001883a 	nop
8110c9f8:	e037883a 	mov	sp,fp
8110c9fc:	dfc00117 	ldw	ra,4(sp)
8110ca00:	df000017 	ldw	fp,0(sp)
8110ca04:	dec00204 	addi	sp,sp,8
8110ca08:	f800283a 	ret

8110ca0c <vFailGetMacRTC>:


void vFailGetMacRTC( void )
{
8110ca0c:	defffe04 	addi	sp,sp,-8
8110ca10:	de00012e 	bgeu	sp,et,8110ca18 <vFailGetMacRTC+0xc>
8110ca14:	003b68fa 	trap	3
8110ca18:	dfc00115 	stw	ra,4(sp)
8110ca1c:	df000015 	stw	fp,0(sp)
8110ca20:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetMacRTC");
8110ca24:	d0a04d17 	ldw	r2,-32460(gp)
8110ca28:	100f883a 	mov	r7,r2
8110ca2c:	01800384 	movi	r6,14
8110ca30:	01400044 	movi	r5,1
8110ca34:	01204534 	movhi	r4,33044
8110ca38:	212da104 	addi	r4,r4,-18812
8110ca3c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ca40:	0001883a 	nop
8110ca44:	e037883a 	mov	sp,fp
8110ca48:	dfc00117 	ldw	ra,4(sp)
8110ca4c:	df000017 	ldw	fp,0(sp)
8110ca50:	dec00204 	addi	sp,sp,8
8110ca54:	f800283a 	ret

8110ca58 <vFailInitialization>:


void vFailInitialization( void )
{
8110ca58:	defffe04 	addi	sp,sp,-8
8110ca5c:	de00012e 	bgeu	sp,et,8110ca64 <vFailInitialization+0xc>
8110ca60:	003b68fa 	trap	3
8110ca64:	dfc00115 	stw	ra,4(sp)
8110ca68:	df000015 	stw	fp,0(sp)
8110ca6c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInitialization");
8110ca70:	d0a04d17 	ldw	r2,-32460(gp)
8110ca74:	100f883a 	mov	r7,r2
8110ca78:	018004c4 	movi	r6,19
8110ca7c:	01400044 	movi	r5,1
8110ca80:	01204534 	movhi	r4,33044
8110ca84:	212da504 	addi	r4,r4,-18796
8110ca88:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ca8c:	0001883a 	nop
8110ca90:	e037883a 	mov	sp,fp
8110ca94:	dfc00117 	ldw	ra,4(sp)
8110ca98:	df000017 	ldw	fp,0(sp)
8110ca9c:	dec00204 	addi	sp,sp,8
8110caa0:	f800283a 	ret

8110caa4 <vFailReceiverCreate>:


void vFailReceiverCreate( void )
{
8110caa4:	defffe04 	addi	sp,sp,-8
8110caa8:	de00012e 	bgeu	sp,et,8110cab0 <vFailReceiverCreate+0xc>
8110caac:	003b68fa 	trap	3
8110cab0:	dfc00115 	stw	ra,4(sp)
8110cab4:	df000015 	stw	fp,0(sp)
8110cab8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vReceiverUartTask");
8110cabc:	d0a04d17 	ldw	r2,-32460(gp)
8110cac0:	100f883a 	mov	r7,r2
8110cac4:	01800444 	movi	r6,17
8110cac8:	01400044 	movi	r5,1
8110cacc:	01204534 	movhi	r4,33044
8110cad0:	212daa04 	addi	r4,r4,-18776
8110cad4:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cad8:	0001883a 	nop
8110cadc:	e037883a 	mov	sp,fp
8110cae0:	dfc00117 	ldw	ra,4(sp)
8110cae4:	df000017 	ldw	fp,0(sp)
8110cae8:	dec00204 	addi	sp,sp,8
8110caec:	f800283a 	ret

8110caf0 <vFailSenderCreate>:


void vFailSenderCreate( void )
{
8110caf0:	defffe04 	addi	sp,sp,-8
8110caf4:	de00012e 	bgeu	sp,et,8110cafc <vFailSenderCreate+0xc>
8110caf8:	003b68fa 	trap	3
8110cafc:	dfc00115 	stw	ra,4(sp)
8110cb00:	df000015 	stw	fp,0(sp)
8110cb04:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSenderCreate");
8110cb08:	d0a04d17 	ldw	r2,-32460(gp)
8110cb0c:	100f883a 	mov	r7,r2
8110cb10:	01800444 	movi	r6,17
8110cb14:	01400044 	movi	r5,1
8110cb18:	01204534 	movhi	r4,33044
8110cb1c:	212daf04 	addi	r4,r4,-18756
8110cb20:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cb24:	0001883a 	nop
8110cb28:	e037883a 	mov	sp,fp
8110cb2c:	dfc00117 	ldw	ra,4(sp)
8110cb30:	df000017 	ldw	fp,0(sp)
8110cb34:	dec00204 	addi	sp,sp,8
8110cb38:	f800283a 	ret

8110cb3c <vFailDeleteInitialization>:


void vFailDeleteInitialization( void )
{
8110cb3c:	defffe04 	addi	sp,sp,-8
8110cb40:	de00012e 	bgeu	sp,et,8110cb48 <vFailDeleteInitialization+0xc>
8110cb44:	003b68fa 	trap	3
8110cb48:	dfc00115 	stw	ra,4(sp)
8110cb4c:	df000015 	stw	fp,0(sp)
8110cb50:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailDeleteInitialization");
8110cb54:	d0a04d17 	ldw	r2,-32460(gp)
8110cb58:	100f883a 	mov	r7,r2
8110cb5c:	01800644 	movi	r6,25
8110cb60:	01400044 	movi	r5,1
8110cb64:	01204534 	movhi	r4,33044
8110cb68:	212db404 	addi	r4,r4,-18736
8110cb6c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cb70:	0001883a 	nop
8110cb74:	e037883a 	mov	sp,fp
8110cb78:	dfc00117 	ldw	ra,4(sp)
8110cb7c:	df000017 	ldw	fp,0(sp)
8110cb80:	dec00204 	addi	sp,sp,8
8110cb84:	f800283a 	ret

8110cb88 <vFailSetCountSemaphorexBuffer32>:


void vFailSetCountSemaphorexBuffer32( void )
{
8110cb88:	defffe04 	addi	sp,sp,-8
8110cb8c:	de00012e 	bgeu	sp,et,8110cb94 <vFailSetCountSemaphorexBuffer32+0xc>
8110cb90:	003b68fa 	trap	3
8110cb94:	dfc00115 	stw	ra,4(sp)
8110cb98:	df000015 	stw	fp,0(sp)
8110cb9c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer32. (exit)");
8110cba0:	d0a04d17 	ldw	r2,-32460(gp)
8110cba4:	100f883a 	mov	r7,r2
8110cba8:	018009c4 	movi	r6,39
8110cbac:	01400044 	movi	r5,1
8110cbb0:	01204534 	movhi	r4,33044
8110cbb4:	212dbb04 	addi	r4,r4,-18708
8110cbb8:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110cbbc:	d0a04d17 	ldw	r2,-32460(gp)
8110cbc0:	100f883a 	mov	r7,r2
8110cbc4:	018008c4 	movi	r6,35
8110cbc8:	01400044 	movi	r5,1
8110cbcc:	01204534 	movhi	r4,33044
8110cbd0:	212dc504 	addi	r4,r4,-18668
8110cbd4:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cbd8:	0001883a 	nop
8110cbdc:	e037883a 	mov	sp,fp
8110cbe0:	dfc00117 	ldw	ra,4(sp)
8110cbe4:	df000017 	ldw	fp,0(sp)
8110cbe8:	dec00204 	addi	sp,sp,8
8110cbec:	f800283a 	ret

8110cbf0 <vFailSetCountSemaphorexBuffer64>:

void vFailSetCountSemaphorexBuffer64( void )
{
8110cbf0:	defffe04 	addi	sp,sp,-8
8110cbf4:	de00012e 	bgeu	sp,et,8110cbfc <vFailSetCountSemaphorexBuffer64+0xc>
8110cbf8:	003b68fa 	trap	3
8110cbfc:	dfc00115 	stw	ra,4(sp)
8110cc00:	df000015 	stw	fp,0(sp)
8110cc04:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer64. (exit)");
8110cc08:	d0a04d17 	ldw	r2,-32460(gp)
8110cc0c:	100f883a 	mov	r7,r2
8110cc10:	018009c4 	movi	r6,39
8110cc14:	01400044 	movi	r5,1
8110cc18:	01204534 	movhi	r4,33044
8110cc1c:	212dce04 	addi	r4,r4,-18632
8110cc20:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110cc24:	d0a04d17 	ldw	r2,-32460(gp)
8110cc28:	100f883a 	mov	r7,r2
8110cc2c:	018008c4 	movi	r6,35
8110cc30:	01400044 	movi	r5,1
8110cc34:	01204534 	movhi	r4,33044
8110cc38:	212dc504 	addi	r4,r4,-18668
8110cc3c:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cc40:	0001883a 	nop
8110cc44:	e037883a 	mov	sp,fp
8110cc48:	dfc00117 	ldw	ra,4(sp)
8110cc4c:	df000017 	ldw	fp,0(sp)
8110cc50:	dec00204 	addi	sp,sp,8
8110cc54:	f800283a 	ret

8110cc58 <vFailSetCountSemaphorexBuffer128>:

void vFailSetCountSemaphorexBuffer128( void )
{
8110cc58:	defffe04 	addi	sp,sp,-8
8110cc5c:	de00012e 	bgeu	sp,et,8110cc64 <vFailSetCountSemaphorexBuffer128+0xc>
8110cc60:	003b68fa 	trap	3
8110cc64:	dfc00115 	stw	ra,4(sp)
8110cc68:	df000015 	stw	fp,0(sp)
8110cc6c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetCountSemaphorexBuffer128. (exit)");
8110cc70:	d0a04d17 	ldw	r2,-32460(gp)
8110cc74:	100f883a 	mov	r7,r2
8110cc78:	01800a04 	movi	r6,40
8110cc7c:	01400044 	movi	r5,1
8110cc80:	01204534 	movhi	r4,33044
8110cc84:	212dd804 	addi	r4,r4,-18592
8110cc88:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not post to the semaphore.()\n");
8110cc8c:	d0a04d17 	ldw	r2,-32460(gp)
8110cc90:	100f883a 	mov	r7,r2
8110cc94:	018008c4 	movi	r6,35
8110cc98:	01400044 	movi	r5,1
8110cc9c:	01204534 	movhi	r4,33044
8110cca0:	212dc504 	addi	r4,r4,-18668
8110cca4:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cca8:	0001883a 	nop
8110ccac:	e037883a 	mov	sp,fp
8110ccb0:	dfc00117 	ldw	ra,4(sp)
8110ccb4:	df000017 	ldw	fp,0(sp)
8110ccb8:	dec00204 	addi	sp,sp,8
8110ccbc:	f800283a 	ret

8110ccc0 <vFailFoundBufferRetransmission>:

void vFailFoundBufferRetransmission( void )
{
8110ccc0:	defffe04 	addi	sp,sp,-8
8110ccc4:	de00012e 	bgeu	sp,et,8110cccc <vFailFoundBufferRetransmission+0xc>
8110ccc8:	003b68fa 	trap	3
8110cccc:	dfc00115 	stw	ra,4(sp)
8110ccd0:	df000015 	stw	fp,0(sp)
8110ccd4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailFoundBufferRetransmission. (exit)");
8110ccd8:	d0a04d17 	ldw	r2,-32460(gp)
8110ccdc:	100f883a 	mov	r7,r2
8110cce0:	01800984 	movi	r6,38
8110cce4:	01400044 	movi	r5,1
8110cce8:	01204534 	movhi	r4,33044
8110ccec:	212de304 	addi	r4,r4,-18548
8110ccf0:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not found the id in the (re)transmission buffers.(vReceiverAckTask)\n");
8110ccf4:	d0a04d17 	ldw	r2,-32460(gp)
8110ccf8:	100f883a 	mov	r7,r2
8110ccfc:	01801284 	movi	r6,74
8110cd00:	01400044 	movi	r5,1
8110cd04:	01204534 	movhi	r4,33044
8110cd08:	212ded04 	addi	r4,r4,-18508
8110cd0c:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cd10:	0001883a 	nop
8110cd14:	e037883a 	mov	sp,fp
8110cd18:	dfc00117 	ldw	ra,4(sp)
8110cd1c:	df000017 	ldw	fp,0(sp)
8110cd20:	dec00204 	addi	sp,sp,8
8110cd24:	f800283a 	ret

8110cd28 <vFailGetCountSemaphorePreParsedBuffer>:


void vFailGetCountSemaphorePreParsedBuffer( void )
{
8110cd28:	defffe04 	addi	sp,sp,-8
8110cd2c:	de00012e 	bgeu	sp,et,8110cd34 <vFailGetCountSemaphorePreParsedBuffer+0xc>
8110cd30:	003b68fa 	trap	3
8110cd34:	dfc00115 	stw	ra,4(sp)
8110cd38:	df000015 	stw	fp,0(sp)
8110cd3c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetCountSemaphorePreParsedBuffer. (exit)");
8110cd40:	d0a04d17 	ldw	r2,-32460(gp)
8110cd44:	100f883a 	mov	r7,r2
8110cd48:	01800b44 	movi	r6,45
8110cd4c:	01400044 	movi	r5,1
8110cd50:	01204534 	movhi	r4,33044
8110cd54:	212e0004 	addi	r4,r4,-18432
8110cd58:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the semaphore and some error happens.(vParserRXTask)\n");
8110cd5c:	d0a04d17 	ldw	r2,-32460(gp)
8110cd60:	100f883a 	mov	r7,r2
8110cd64:	018010c4 	movi	r6,67
8110cd68:	01400044 	movi	r5,1
8110cd6c:	01204534 	movhi	r4,33044
8110cd70:	212e0c04 	addi	r4,r4,-18384
8110cd74:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cd78:	0001883a 	nop
8110cd7c:	e037883a 	mov	sp,fp
8110cd80:	dfc00117 	ldw	ra,4(sp)
8110cd84:	df000017 	ldw	fp,0(sp)
8110cd88:	dec00204 	addi	sp,sp,8
8110cd8c:	f800283a 	ret

8110cd90 <vFailGetxMutexPreParsedParserRxTask>:


void vFailGetxMutexPreParsedParserRxTask( void )
{
8110cd90:	defffe04 	addi	sp,sp,-8
8110cd94:	de00012e 	bgeu	sp,et,8110cd9c <vFailGetxMutexPreParsedParserRxTask+0xc>
8110cd98:	003b68fa 	trap	3
8110cd9c:	dfc00115 	stw	ra,4(sp)
8110cda0:	df000015 	stw	fp,0(sp)
8110cda4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetxMutexPreParsedParserRxTask. (exit)");
8110cda8:	d0a04d17 	ldw	r2,-32460(gp)
8110cdac:	100f883a 	mov	r7,r2
8110cdb0:	01800ac4 	movi	r6,43
8110cdb4:	01400044 	movi	r5,1
8110cdb8:	01204534 	movhi	r4,33044
8110cdbc:	212e1d04 	addi	r4,r4,-18316
8110cdc0:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not get the mutex and some error happens.(vParserRXTask)\n");
8110cdc4:	d0a04d17 	ldw	r2,-32460(gp)
8110cdc8:	100f883a 	mov	r7,r2
8110cdcc:	01800fc4 	movi	r6,63
8110cdd0:	01400044 	movi	r5,1
8110cdd4:	01204534 	movhi	r4,33044
8110cdd8:	212e2804 	addi	r4,r4,-18272
8110cddc:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cde0:	0001883a 	nop
8110cde4:	e037883a 	mov	sp,fp
8110cde8:	dfc00117 	ldw	ra,4(sp)
8110cdec:	df000017 	ldw	fp,0(sp)
8110cdf0:	dec00204 	addi	sp,sp,8
8110cdf4:	f800283a 	ret

8110cdf8 <vNoContentInPreParsedBuffer>:


void vNoContentInPreParsedBuffer( void )
{
8110cdf8:	defffe04 	addi	sp,sp,-8
8110cdfc:	de00012e 	bgeu	sp,et,8110ce04 <vNoContentInPreParsedBuffer+0xc>
8110ce00:	003b68fa 	trap	3
8110ce04:	dfc00115 	stw	ra,4(sp)
8110ce08:	df000015 	stw	fp,0(sp)
8110ce0c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vNoContentInPreParsedBuffer. (exit)");
8110ce10:	d0a04d17 	ldw	r2,-32460(gp)
8110ce14:	100f883a 	mov	r7,r2
8110ce18:	018008c4 	movi	r6,35
8110ce1c:	01400044 	movi	r5,1
8110ce20:	01204534 	movhi	r4,33044
8110ce24:	212e3804 	addi	r4,r4,-18208
8110ce28:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Semaphore was post by some task but has no message in the PreParsedBuffer.(vParserRXTask)\n");
8110ce2c:	d0a04d17 	ldw	r2,-32460(gp)
8110ce30:	100f883a 	mov	r7,r2
8110ce34:	01801684 	movi	r6,90
8110ce38:	01400044 	movi	r5,1
8110ce3c:	01204534 	movhi	r4,33044
8110ce40:	212e4104 	addi	r4,r4,-18172
8110ce44:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ce48:	0001883a 	nop
8110ce4c:	e037883a 	mov	sp,fp
8110ce50:	dfc00117 	ldw	ra,4(sp)
8110ce54:	df000017 	ldw	fp,0(sp)
8110ce58:	dec00204 	addi	sp,sp,8
8110ce5c:	f800283a 	ret

8110ce60 <vCouldNotSendEthConfUART>:


void vCouldNotSendEthConfUART( void )
{
8110ce60:	defffe04 	addi	sp,sp,-8
8110ce64:	de00012e 	bgeu	sp,et,8110ce6c <vCouldNotSendEthConfUART+0xc>
8110ce68:	003b68fa 	trap	3
8110ce6c:	dfc00115 	stw	ra,4(sp)
8110ce70:	df000015 	stw	fp,0(sp)
8110ce74:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotSendEthConfUART. (exit)");
8110ce78:	d0a04d17 	ldw	r2,-32460(gp)
8110ce7c:	100f883a 	mov	r7,r2
8110ce80:	01800804 	movi	r6,32
8110ce84:	01400044 	movi	r5,1
8110ce88:	01204534 	movhi	r4,33044
8110ce8c:	212e5804 	addi	r4,r4,-18080
8110ce90:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send or not write ETH conf of the NUC in the (re)transmission buffer.(vSendEthConf)\n");
8110ce94:	d0a04d17 	ldw	r2,-32460(gp)
8110ce98:	100f883a 	mov	r7,r2
8110ce9c:	01801784 	movi	r6,94
8110cea0:	01400044 	movi	r5,1
8110cea4:	01204534 	movhi	r4,33044
8110cea8:	212e6104 	addi	r4,r4,-18044
8110ceac:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110ceb0:	0001883a 	nop
8110ceb4:	e037883a 	mov	sp,fp
8110ceb8:	dfc00117 	ldw	ra,4(sp)
8110cebc:	df000017 	ldw	fp,0(sp)
8110cec0:	dec00204 	addi	sp,sp,8
8110cec4:	f800283a 	ret

8110cec8 <vFailSendNack>:

void vFailSendNack( void )
{
8110cec8:	defffe04 	addi	sp,sp,-8
8110cecc:	de00012e 	bgeu	sp,et,8110ced4 <vFailSendNack+0xc>
8110ced0:	003b68fa 	trap	3
8110ced4:	dfc00115 	stw	ra,4(sp)
8110ced8:	df000015 	stw	fp,0(sp)
8110cedc:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSendNack. (exit)");
8110cee0:	d0a04d17 	ldw	r2,-32460(gp)
8110cee4:	100f883a 	mov	r7,r2
8110cee8:	01800544 	movi	r6,21
8110ceec:	01400044 	movi	r5,1
8110cef0:	01204534 	movhi	r4,33044
8110cef4:	212e7904 	addi	r4,r4,-17948
8110cef8:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Send Nack using the PreAckSender buffer. \n");
8110cefc:	d0a04d17 	ldw	r2,-32460(gp)
8110cf00:	100f883a 	mov	r7,r2
8110cf04:	01800a84 	movi	r6,42
8110cf08:	01400044 	movi	r5,1
8110cf0c:	01204534 	movhi	r4,33044
8110cf10:	212e7f04 	addi	r4,r4,-17924
8110cf14:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cf18:	0001883a 	nop
8110cf1c:	e037883a 	mov	sp,fp
8110cf20:	dfc00117 	ldw	ra,4(sp)
8110cf24:	df000017 	ldw	fp,0(sp)
8110cf28:	dec00204 	addi	sp,sp,8
8110cf2c:	f800283a 	ret

8110cf30 <vFailSetPreAckSenderBuffer>:

void vFailSetPreAckSenderBuffer( void )
{
8110cf30:	defffe04 	addi	sp,sp,-8
8110cf34:	de00012e 	bgeu	sp,et,8110cf3c <vFailSetPreAckSenderBuffer+0xc>
8110cf38:	003b68fa 	trap	3
8110cf3c:	dfc00115 	stw	ra,4(sp)
8110cf40:	df000015 	stw	fp,0(sp)
8110cf44:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckSenderBuffer. (exit)");
8110cf48:	d0a04d17 	ldw	r2,-32460(gp)
8110cf4c:	100f883a 	mov	r7,r2
8110cf50:	01800884 	movi	r6,34
8110cf54:	01400044 	movi	r5,1
8110cf58:	01204534 	movhi	r4,33044
8110cf5c:	212e8a04 	addi	r4,r4,-17880
8110cf60:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task out_ack_handler using the PreAckSender buffer.\n");
8110cf64:	d0a04d17 	ldw	r2,-32460(gp)
8110cf68:	100f883a 	mov	r7,r2
8110cf6c:	01801584 	movi	r6,86
8110cf70:	01400044 	movi	r5,1
8110cf74:	01204534 	movhi	r4,33044
8110cf78:	212e9304 	addi	r4,r4,-17844
8110cf7c:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cf80:	0001883a 	nop
8110cf84:	e037883a 	mov	sp,fp
8110cf88:	dfc00117 	ldw	ra,4(sp)
8110cf8c:	df000017 	ldw	fp,0(sp)
8110cf90:	dec00204 	addi	sp,sp,8
8110cf94:	f800283a 	ret

8110cf98 <vFailSetPreParsedBuffer>:

void vFailSetPreParsedBuffer( void )
{
8110cf98:	defffe04 	addi	sp,sp,-8
8110cf9c:	de00012e 	bgeu	sp,et,8110cfa4 <vFailSetPreParsedBuffer+0xc>
8110cfa0:	003b68fa 	trap	3
8110cfa4:	dfc00115 	stw	ra,4(sp)
8110cfa8:	df000015 	stw	fp,0(sp)
8110cfac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreParsedBuffer. (exit)");
8110cfb0:	d0a04d17 	ldw	r2,-32460(gp)
8110cfb4:	100f883a 	mov	r7,r2
8110cfb8:	018007c4 	movi	r6,31
8110cfbc:	01400044 	movi	r5,1
8110cfc0:	01204534 	movhi	r4,33044
8110cfc4:	212ea904 	addi	r4,r4,-17756
8110cfc8:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task parser_comm using the PreParsed buffer.\n");
8110cfcc:	d0a04d17 	ldw	r2,-32460(gp)
8110cfd0:	100f883a 	mov	r7,r2
8110cfd4:	018013c4 	movi	r6,79
8110cfd8:	01400044 	movi	r5,1
8110cfdc:	01204534 	movhi	r4,33044
8110cfe0:	212eb104 	addi	r4,r4,-17724
8110cfe4:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110cfe8:	0001883a 	nop
8110cfec:	e037883a 	mov	sp,fp
8110cff0:	dfc00117 	ldw	ra,4(sp)
8110cff4:	df000017 	ldw	fp,0(sp)
8110cff8:	dec00204 	addi	sp,sp,8
8110cffc:	f800283a 	ret

8110d000 <vFailSetPreAckReceiverBuffer>:


void vFailSetPreAckReceiverBuffer( void )
{
8110d000:	defffe04 	addi	sp,sp,-8
8110d004:	de00012e 	bgeu	sp,et,8110d00c <vFailSetPreAckReceiverBuffer+0xc>
8110d008:	003b68fa 	trap	3
8110d00c:	dfc00115 	stw	ra,4(sp)
8110d010:	df000015 	stw	fp,0(sp)
8110d014:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailSetPreAckReceiverBuffer. (exit)");
8110d018:	d0a04d17 	ldw	r2,-32460(gp)
8110d01c:	100f883a 	mov	r7,r2
8110d020:	01800904 	movi	r6,36
8110d024:	01400044 	movi	r5,1
8110d028:	01204534 	movhi	r4,33044
8110d02c:	212ec504 	addi	r4,r4,-17644
8110d030:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not send the message to the task in_out_handler using the PreAckReceiver buffer.\n");
8110d034:	d0a04d17 	ldw	r2,-32460(gp)
8110d038:	100f883a 	mov	r7,r2
8110d03c:	018015c4 	movi	r6,87
8110d040:	01400044 	movi	r5,1
8110d044:	01204534 	movhi	r4,33044
8110d048:	212ecf04 	addi	r4,r4,-17604
8110d04c:	11104380 	call	81110438 <fwrite>
	#endif	
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d050:	0001883a 	nop
8110d054:	e037883a 	mov	sp,fp
8110d058:	dfc00117 	ldw	ra,4(sp)
8110d05c:	df000017 	ldw	fp,0(sp)
8110d060:	dec00204 	addi	sp,sp,8
8110d064:	f800283a 	ret

8110d068 <vFailParserCommTaskCreate>:


void vFailParserCommTaskCreate( void )
{
8110d068:	defffe04 	addi	sp,sp,-8
8110d06c:	de00012e 	bgeu	sp,et,8110d074 <vFailParserCommTaskCreate+0xc>
8110d070:	003b68fa 	trap	3
8110d074:	dfc00115 	stw	ra,4(sp)
8110d078:	df000015 	stw	fp,0(sp)
8110d07c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailParserCommTaskCreate");
8110d080:	d0a04d17 	ldw	r2,-32460(gp)
8110d084:	100f883a 	mov	r7,r2
8110d088:	01800644 	movi	r6,25
8110d08c:	01400044 	movi	r5,1
8110d090:	01204534 	movhi	r4,33044
8110d094:	212ee504 	addi	r4,r4,-17516
8110d098:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d09c:	0001883a 	nop
8110d0a0:	e037883a 	mov	sp,fp
8110d0a4:	dfc00117 	ldw	ra,4(sp)
8110d0a8:	df000017 	ldw	fp,0(sp)
8110d0ac:	dec00204 	addi	sp,sp,8
8110d0b0:	f800283a 	ret

8110d0b4 <vFailInAckHandlerTaskCreate>:

void vFailInAckHandlerTaskCreate( void )
{
8110d0b4:	defffe04 	addi	sp,sp,-8
8110d0b8:	de00012e 	bgeu	sp,et,8110d0c0 <vFailInAckHandlerTaskCreate+0xc>
8110d0bc:	003b68fa 	trap	3
8110d0c0:	dfc00115 	stw	ra,4(sp)
8110d0c4:	df000015 	stw	fp,0(sp)
8110d0c8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110d0cc:	d0a04d17 	ldw	r2,-32460(gp)
8110d0d0:	100f883a 	mov	r7,r2
8110d0d4:	018006c4 	movi	r6,27
8110d0d8:	01400044 	movi	r5,1
8110d0dc:	01204534 	movhi	r4,33044
8110d0e0:	212eec04 	addi	r4,r4,-17488
8110d0e4:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d0e8:	0001883a 	nop
8110d0ec:	e037883a 	mov	sp,fp
8110d0f0:	dfc00117 	ldw	ra,4(sp)
8110d0f4:	df000017 	ldw	fp,0(sp)
8110d0f8:	dec00204 	addi	sp,sp,8
8110d0fc:	f800283a 	ret

8110d100 <vFailOutAckHandlerTaskCreate>:

void vFailOutAckHandlerTaskCreate( void )
{
8110d100:	defffe04 	addi	sp,sp,-8
8110d104:	de00012e 	bgeu	sp,et,8110d10c <vFailOutAckHandlerTaskCreate+0xc>
8110d108:	003b68fa 	trap	3
8110d10c:	dfc00115 	stw	ra,4(sp)
8110d110:	df000015 	stw	fp,0(sp)
8110d114:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailInAckHandlerTaskCreate");
8110d118:	d0a04d17 	ldw	r2,-32460(gp)
8110d11c:	100f883a 	mov	r7,r2
8110d120:	018006c4 	movi	r6,27
8110d124:	01400044 	movi	r5,1
8110d128:	01204534 	movhi	r4,33044
8110d12c:	212eec04 	addi	r4,r4,-17488
8110d130:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d134:	0001883a 	nop
8110d138:	e037883a 	mov	sp,fp
8110d13c:	dfc00117 	ldw	ra,4(sp)
8110d140:	df000017 	ldw	fp,0(sp)
8110d144:	dec00204 	addi	sp,sp,8
8110d148:	f800283a 	ret

8110d14c <vFailCreateTimerRetransmisison>:


void vFailCreateTimerRetransmisison( void )
{
8110d14c:	defffe04 	addi	sp,sp,-8
8110d150:	de00012e 	bgeu	sp,et,8110d158 <vFailCreateTimerRetransmisison+0xc>
8110d154:	003b68fa 	trap	3
8110d158:	dfc00115 	stw	ra,4(sp)
8110d15c:	df000015 	stw	fp,0(sp)
8110d160:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCreateTimerRetransmisison");
8110d164:	d0a04d17 	ldw	r2,-32460(gp)
8110d168:	100f883a 	mov	r7,r2
8110d16c:	01800784 	movi	r6,30
8110d170:	01400044 	movi	r5,1
8110d174:	01204534 	movhi	r4,33044
8110d178:	212ef304 	addi	r4,r4,-17460
8110d17c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d180:	0001883a 	nop
8110d184:	e037883a 	mov	sp,fp
8110d188:	dfc00117 	ldw	ra,4(sp)
8110d18c:	df000017 	ldw	fp,0(sp)
8110d190:	dec00204 	addi	sp,sp,8
8110d194:	f800283a 	ret

8110d198 <vCouldNotCheckBufferTimeOutFunction>:


void vCouldNotCheckBufferTimeOutFunction( void )
{
8110d198:	defffe04 	addi	sp,sp,-8
8110d19c:	de00012e 	bgeu	sp,et,8110d1a4 <vCouldNotCheckBufferTimeOutFunction+0xc>
8110d1a0:	003b68fa 	trap	3
8110d1a4:	dfc00115 	stw	ra,4(sp)
8110d1a8:	df000015 	stw	fp,0(sp)
8110d1ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotCheckBufferTimeOutFunction");
8110d1b0:	d0a04d17 	ldw	r2,-32460(gp)
8110d1b4:	100f883a 	mov	r7,r2
8110d1b8:	018008c4 	movi	r6,35
8110d1bc:	01400044 	movi	r5,1
8110d1c0:	01204534 	movhi	r4,33044
8110d1c4:	212efb04 	addi	r4,r4,-17428
8110d1c8:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d1cc:	0001883a 	nop
8110d1d0:	e037883a 	mov	sp,fp
8110d1d4:	dfc00117 	ldw	ra,4(sp)
8110d1d8:	df000017 	ldw	fp,0(sp)
8110d1dc:	dec00204 	addi	sp,sp,8
8110d1e0:	f800283a 	ret

8110d1e4 <vFailTimeoutCheckerTaskCreate>:

void vFailTimeoutCheckerTaskCreate( void )
{
8110d1e4:	defffe04 	addi	sp,sp,-8
8110d1e8:	de00012e 	bgeu	sp,et,8110d1f0 <vFailTimeoutCheckerTaskCreate+0xc>
8110d1ec:	003b68fa 	trap	3
8110d1f0:	dfc00115 	stw	ra,4(sp)
8110d1f4:	df000015 	stw	fp,0(sp)
8110d1f8:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailTimeoutCheckerTaskCreate");
8110d1fc:	d0a04d17 	ldw	r2,-32460(gp)
8110d200:	100f883a 	mov	r7,r2
8110d204:	01800744 	movi	r6,29
8110d208:	01400044 	movi	r5,1
8110d20c:	01204534 	movhi	r4,33044
8110d210:	212f0404 	addi	r4,r4,-17392
8110d214:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementaï¿½ï¿½o de indicaï¿½ï¿½o de falha antes de finalizar a execuï¿½ï¿½o
	 * Indicar falha com LEDs pois ï¿½ o unico HW inicializada atï¿½ o momento
	 */
}
8110d218:	0001883a 	nop
8110d21c:	e037883a 	mov	sp,fp
8110d220:	dfc00117 	ldw	ra,4(sp)
8110d224:	df000017 	ldw	fp,0(sp)
8110d228:	dec00204 	addi	sp,sp,8
8110d22c:	f800283a 	ret

8110d230 <vFailGetBlockingSemTimeoutTask>:


void vFailGetBlockingSemTimeoutTask( void )
{
8110d230:	defffe04 	addi	sp,sp,-8
8110d234:	de00012e 	bgeu	sp,et,8110d23c <vFailGetBlockingSemTimeoutTask+0xc>
8110d238:	003b68fa 	trap	3
8110d23c:	dfc00115 	stw	ra,4(sp)
8110d240:	df000015 	stw	fp,0(sp)
8110d244:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailGetBlockingSemTimeoutTask. (exit)");
8110d248:	d0a04d17 	ldw	r2,-32460(gp)
8110d24c:	100f883a 	mov	r7,r2
8110d250:	01800984 	movi	r6,38
8110d254:	01400044 	movi	r5,1
8110d258:	01204534 	movhi	r4,33044
8110d25c:	212f0c04 	addi	r4,r4,-17360
8110d260:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Retrun from a blocking (0) OSSemPend with a error.");
8110d264:	d0a04d17 	ldw	r2,-32460(gp)
8110d268:	100f883a 	mov	r7,r2
8110d26c:	01800c84 	movi	r6,50
8110d270:	01400044 	movi	r5,1
8110d274:	01204534 	movhi	r4,33044
8110d278:	212f1604 	addi	r4,r4,-17320
8110d27c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d280:	0001883a 	nop
8110d284:	e037883a 	mov	sp,fp
8110d288:	dfc00117 	ldw	ra,4(sp)
8110d28c:	df000017 	ldw	fp,0(sp)
8110d290:	dec00204 	addi	sp,sp,8
8110d294:	f800283a 	ret

8110d298 <vFailPostBlockingSemTimeoutTask>:

void vFailPostBlockingSemTimeoutTask( void )
{
8110d298:	defffe04 	addi	sp,sp,-8
8110d29c:	de00012e 	bgeu	sp,et,8110d2a4 <vFailPostBlockingSemTimeoutTask+0xc>
8110d2a0:	003b68fa 	trap	3
8110d2a4:	dfc00115 	stw	ra,4(sp)
8110d2a8:	df000015 	stw	fp,0(sp)
8110d2ac:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailPostBlockingSemTimeoutTask. (exit)");
8110d2b0:	d0a04d17 	ldw	r2,-32460(gp)
8110d2b4:	100f883a 	mov	r7,r2
8110d2b8:	018009c4 	movi	r6,39
8110d2bc:	01400044 	movi	r5,1
8110d2c0:	01204534 	movhi	r4,33044
8110d2c4:	212f2304 	addi	r4,r4,-17268
8110d2c8:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Could not Post the semaphore for the TimeoutTask.");
8110d2cc:	d0a04d17 	ldw	r2,-32460(gp)
8110d2d0:	100f883a 	mov	r7,r2
8110d2d4:	01800c44 	movi	r6,49
8110d2d8:	01400044 	movi	r5,1
8110d2dc:	01204534 	movhi	r4,33044
8110d2e0:	212f2d04 	addi	r4,r4,-17228
8110d2e4:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d2e8:	0001883a 	nop
8110d2ec:	e037883a 	mov	sp,fp
8110d2f0:	dfc00117 	ldw	ra,4(sp)
8110d2f4:	df000017 	ldw	fp,0(sp)
8110d2f8:	dec00204 	addi	sp,sp,8
8110d2fc:	f800283a 	ret

8110d300 <vFailCouldNotRetransmitTimeoutTask>:


void vFailCouldNotRetransmitTimeoutTask( void )
{
8110d300:	defffe04 	addi	sp,sp,-8
8110d304:	de00012e 	bgeu	sp,et,8110d30c <vFailCouldNotRetransmitTimeoutTask+0xc>
8110d308:	003b68fa 	trap	3
8110d30c:	dfc00115 	stw	ra,4(sp)
8110d310:	df000015 	stw	fp,0(sp)
8110d314:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailCouldNotRetransmitTimeoutTask. (exit)");
8110d318:	d0a04d17 	ldw	r2,-32460(gp)
8110d31c:	100f883a 	mov	r7,r2
8110d320:	01800a84 	movi	r6,42
8110d324:	01400044 	movi	r5,1
8110d328:	01204534 	movhi	r4,33044
8110d32c:	212f3a04 	addi	r4,r4,-17176
8110d330:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"After sleep for 50 ticks, could not get access to the tx uart. No retransmission occurs.");
8110d334:	d0a04d17 	ldw	r2,-32460(gp)
8110d338:	100f883a 	mov	r7,r2
8110d33c:	01801604 	movi	r6,88
8110d340:	01400044 	movi	r5,1
8110d344:	01204534 	movhi	r4,33044
8110d348:	212f4504 	addi	r4,r4,-17132
8110d34c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d350:	0001883a 	nop
8110d354:	e037883a 	mov	sp,fp
8110d358:	dfc00117 	ldw	ra,4(sp)
8110d35c:	df000017 	ldw	fp,0(sp)
8110d360:	dec00204 	addi	sp,sp,8
8110d364:	f800283a 	ret

8110d368 <vCouldNotRetransmitB32TimeoutTask>:


void vCouldNotRetransmitB32TimeoutTask( void )
{
8110d368:	defffe04 	addi	sp,sp,-8
8110d36c:	de00012e 	bgeu	sp,et,8110d374 <vCouldNotRetransmitB32TimeoutTask+0xc>
8110d370:	003b68fa 	trap	3
8110d374:	dfc00115 	stw	ra,4(sp)
8110d378:	df000015 	stw	fp,0(sp)
8110d37c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB32TimeoutTask. (exit)");
8110d380:	d0a04d17 	ldw	r2,-32460(gp)
8110d384:	100f883a 	mov	r7,r2
8110d388:	01800a44 	movi	r6,41
8110d38c:	01400044 	movi	r5,1
8110d390:	01204534 	movhi	r4,33044
8110d394:	212f5c04 	addi	r4,r4,-17040
8110d398:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (32).");
8110d39c:	d0a04d17 	ldw	r2,-32460(gp)
8110d3a0:	100f883a 	mov	r7,r2
8110d3a4:	01801404 	movi	r6,80
8110d3a8:	01400044 	movi	r5,1
8110d3ac:	01204534 	movhi	r4,33044
8110d3b0:	212f6704 	addi	r4,r4,-16996
8110d3b4:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d3b8:	0001883a 	nop
8110d3bc:	e037883a 	mov	sp,fp
8110d3c0:	dfc00117 	ldw	ra,4(sp)
8110d3c4:	df000017 	ldw	fp,0(sp)
8110d3c8:	dec00204 	addi	sp,sp,8
8110d3cc:	f800283a 	ret

8110d3d0 <vCouldNotRetransmitB64TimeoutTask>:

void vCouldNotRetransmitB64TimeoutTask( void )
{
8110d3d0:	defffe04 	addi	sp,sp,-8
8110d3d4:	de00012e 	bgeu	sp,et,8110d3dc <vCouldNotRetransmitB64TimeoutTask+0xc>
8110d3d8:	003b68fa 	trap	3
8110d3dc:	dfc00115 	stw	ra,4(sp)
8110d3e0:	df000015 	stw	fp,0(sp)
8110d3e4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB64TimeoutTask. (exit)");
8110d3e8:	d0a04d17 	ldw	r2,-32460(gp)
8110d3ec:	100f883a 	mov	r7,r2
8110d3f0:	01800a44 	movi	r6,41
8110d3f4:	01400044 	movi	r5,1
8110d3f8:	01204534 	movhi	r4,33044
8110d3fc:	212f7c04 	addi	r4,r4,-16912
8110d400:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (64).");
8110d404:	d0a04d17 	ldw	r2,-32460(gp)
8110d408:	100f883a 	mov	r7,r2
8110d40c:	01801404 	movi	r6,80
8110d410:	01400044 	movi	r5,1
8110d414:	01204534 	movhi	r4,33044
8110d418:	212f8704 	addi	r4,r4,-16868
8110d41c:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d420:	0001883a 	nop
8110d424:	e037883a 	mov	sp,fp
8110d428:	dfc00117 	ldw	ra,4(sp)
8110d42c:	df000017 	ldw	fp,0(sp)
8110d430:	dec00204 	addi	sp,sp,8
8110d434:	f800283a 	ret

8110d438 <vCouldNotRetransmitB128TimeoutTask>:

void vCouldNotRetransmitB128TimeoutTask( void )
{
8110d438:	defffe04 	addi	sp,sp,-8
8110d43c:	de00012e 	bgeu	sp,et,8110d444 <vCouldNotRetransmitB128TimeoutTask+0xc>
8110d440:	003b68fa 	trap	3
8110d444:	dfc00115 	stw	ra,4(sp)
8110d448:	df000015 	stw	fp,0(sp)
8110d44c:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vCouldNotRetransmitB128TimeoutTask. (exit)");
8110d450:	d0a04d17 	ldw	r2,-32460(gp)
8110d454:	100f883a 	mov	r7,r2
8110d458:	01800a84 	movi	r6,42
8110d45c:	01400044 	movi	r5,1
8110d460:	01204534 	movhi	r4,33044
8110d464:	212f9c04 	addi	r4,r4,-16784
8110d468:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"There's something to retransmit but could not get the mutex for the buffer (128).");
8110d46c:	d0a04d17 	ldw	r2,-32460(gp)
8110d470:	100f883a 	mov	r7,r2
8110d474:	01801444 	movi	r6,81
8110d478:	01400044 	movi	r5,1
8110d47c:	01204534 	movhi	r4,33044
8110d480:	212fa704 	addi	r4,r4,-16740
8110d484:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
}
8110d488:	0001883a 	nop
8110d48c:	e037883a 	mov	sp,fp
8110d490:	dfc00117 	ldw	ra,4(sp)
8110d494:	df000017 	ldw	fp,0(sp)
8110d498:	dec00204 	addi	sp,sp,8
8110d49c:	f800283a 	ret

8110d4a0 <vFailStartTimerRetransmission>:


void vFailStartTimerRetransmission( void )
{
8110d4a0:	defffe04 	addi	sp,sp,-8
8110d4a4:	de00012e 	bgeu	sp,et,8110d4ac <vFailStartTimerRetransmission+0xc>
8110d4a8:	003b68fa 	trap	3
8110d4ac:	dfc00115 	stw	ra,4(sp)
8110d4b0:	df000015 	stw	fp,0(sp)
8110d4b4:	d839883a 	mov	fp,sp
	#ifdef DEBUG_ON
		debug(fp,"vFailStartTimerRetransmission. (exit)");
8110d4b8:	d0a04d17 	ldw	r2,-32460(gp)
8110d4bc:	100f883a 	mov	r7,r2
8110d4c0:	01800944 	movi	r6,37
8110d4c4:	01400044 	movi	r5,1
8110d4c8:	01204534 	movhi	r4,33044
8110d4cc:	212fbc04 	addi	r4,r4,-16656
8110d4d0:	11104380 	call	81110438 <fwrite>
	#endif

	#ifdef DEBUG_ON
		debug(fp,"Fail trying to start the timer xTimerRetransmission.");
8110d4d4:	d0a04d17 	ldw	r2,-32460(gp)
8110d4d8:	100f883a 	mov	r7,r2
8110d4dc:	01800d04 	movi	r6,52
8110d4e0:	01400044 	movi	r5,1
8110d4e4:	01204534 	movhi	r4,33044
8110d4e8:	212fc604 	addi	r4,r4,-16616
8110d4ec:	11104380 	call	81110438 <fwrite>
	#endif
	/*
	 * Implementa��o de indica��o de falha antes de finalizar a execu��o
	 * Indicar falha com LEDs pois � o unico HW inicializada at� o momento
	 */
8110d4f0:	0001883a 	nop
8110d4f4:	e037883a 	mov	sp,fp
8110d4f8:	dfc00117 	ldw	ra,4(sp)
8110d4fc:	df000017 	ldw	fp,0(sp)
8110d500:	dec00204 	addi	sp,sp,8
8110d504:	f800283a 	ret

8110d508 <vNFeeNotInUse>:
 *      Author: Tiago-Low
 */

#include "fee.h"

void vNFeeNotInUse( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110d508:	defffd04 	addi	sp,sp,-12
8110d50c:	de00012e 	bgeu	sp,et,8110d514 <vNFeeNotInUse+0xc>
8110d510:	003b68fa 	trap	3
8110d514:	df000215 	stw	fp,8(sp)
8110d518:	df000204 	addi	fp,sp,8
8110d51c:	e13ffe15 	stw	r4,-8(fp)
8110d520:	2805883a 	mov	r2,r5
8110d524:	e0bfff05 	stb	r2,-4(fp)

    /* NFEE id [0..7] */
    pxNfeeL->ucId = ucIdNFEE;
8110d528:	e0bffe17 	ldw	r2,-8(fp)
8110d52c:	e0ffff03 	ldbu	r3,-4(fp)
8110d530:	10c00005 	stb	r3,0(r2)
    pxNfeeL->xControl.bEnabled = FALSE;
8110d534:	e0bffe17 	ldw	r2,-8(fp)
8110d538:	10002015 	stw	zero,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110d53c:	e0bffe17 	ldw	r2,-8(fp)
8110d540:	10002115 	stw	zero,132(r2)
}
8110d544:	0001883a 	nop
8110d548:	e037883a 	mov	sp,fp
8110d54c:	df000017 	ldw	fp,0(sp)
8110d550:	dec00104 	addi	sp,sp,4
8110d554:	f800283a 	ret

8110d558 <vNFeeStructureInit>:


/* Initialize the structure of control of NFEE with the default Configurations */
void vNFeeStructureInit( TNFee *pxNfeeL, unsigned char ucIdNFEE ) {
8110d558:	defffb04 	addi	sp,sp,-20
8110d55c:	de00012e 	bgeu	sp,et,8110d564 <vNFeeStructureInit+0xc>
8110d560:	003b68fa 	trap	3
8110d564:	dfc00415 	stw	ra,16(sp)
8110d568:	df000315 	stw	fp,12(sp)
8110d56c:	df000304 	addi	fp,sp,12
8110d570:	e13ffe15 	stw	r4,-8(fp)
8110d574:	2805883a 	mov	r2,r5
8110d578:	e0bfff05 	stb	r2,-4(fp)
    unsigned char ucIL = 0;
8110d57c:	e03ffd05 	stb	zero,-12(fp)

    /* NFEE id [0..5] */
    pxNfeeL->ucId = ucIdNFEE;
8110d580:	e0bffe17 	ldw	r2,-8(fp)
8110d584:	e0ffff03 	ldbu	r3,-4(fp)
8110d588:	10c00005 	stb	r3,0(r2)

    /* Load the default values of the CCDs regarding pixels configuration */
    vCCDLoadDefaultValues(&pxNfeeL->xCcdInfo);
8110d58c:	e0bffe17 	ldw	r2,-8(fp)
8110d590:	10802804 	addi	r2,r2,160
8110d594:	1009883a 	mov	r4,r2
8110d598:	110af880 	call	8110af88 <vCCDLoadDefaultValues>

    /* Update the values of memory mapping for this FEE */
    vUpdateMemMapFEE(pxNfeeL);
8110d59c:	e13ffe17 	ldw	r4,-8(fp)
8110d5a0:	110d6300 	call	8110d630 <vUpdateMemMapFEE>

    /* Initilizing control variables */
    pxNfeeL->xControl.bEnabled = TRUE;
8110d5a4:	e0bffe17 	ldw	r2,-8(fp)
8110d5a8:	00c00044 	movi	r3,1
8110d5ac:	10c02015 	stw	r3,128(r2)
    pxNfeeL->xControl.bUsingDMA = FALSE;
8110d5b0:	e0bffe17 	ldw	r2,-8(fp)
8110d5b4:	10002115 	stw	zero,132(r2)
    /* The NFEE initialize in the Config mode by default */
    pxNfeeL->xControl.eMode = sFeeConfig;    
8110d5b8:	e0bffe17 	ldw	r2,-8(fp)
8110d5bc:	10002615 	stw	zero,152(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110d5c0:	e03ffd05 	stb	zero,-12(fp)
8110d5c4:	00000906 	br	8110d5ec <vNFeeStructureInit+0x94>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
8110d5c8:	e0bffd03 	ldbu	r2,-12(fp)
8110d5cc:	e0fffe17 	ldw	r3,-8(fp)
8110d5d0:	1885883a 	add	r2,r3,r2
8110d5d4:	10802504 	addi	r2,r2,148
8110d5d8:	e0fffd03 	ldbu	r3,-12(fp)
8110d5dc:	10c00005 	stb	r3,0(r2)

    /*  todo: This function supposed to load the values from a SD Card in the future, for now it will load
        hard coded values */
    //bLoadNFEEDefsSDCard(); !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    /* Set the default redout order [ 0, 1, 2, 3 ] */
    for ( ucIL = 0; ucIL < 4; ucIL++) 
8110d5e0:	e0bffd03 	ldbu	r2,-12(fp)
8110d5e4:	10800044 	addi	r2,r2,1
8110d5e8:	e0bffd05 	stb	r2,-12(fp)
8110d5ec:	e0bffd03 	ldbu	r2,-12(fp)
8110d5f0:	10800130 	cmpltui	r2,r2,4
8110d5f4:	103ff41e 	bne	r2,zero,8110d5c8 <__reset+0xfb0ed5c8>
        pxNfeeL->xControl.ucROutOrder[ucIL] = ucIL;
    /* The default side is left */
    pxNfeeL->xControl.eSide = sLeft;
8110d5f8:	e0bffe17 	ldw	r2,-8(fp)
8110d5fc:	10002715 	stw	zero,156(r2)
    pxNfeeL->xControl.bEchoing = FALSE;
8110d600:	e0bffe17 	ldw	r2,-8(fp)
8110d604:	10002315 	stw	zero,140(r2)
    pxNfeeL->xControl.bLogging = FALSE;
8110d608:	e0bffe17 	ldw	r2,-8(fp)
8110d60c:	10002215 	stw	zero,136(r2)
    pxNfeeL->xControl.bChannelEnable = FALSE;
8110d610:	e0bffe17 	ldw	r2,-8(fp)
8110d614:	10002415 	stw	zero,144(r2)

}
8110d618:	0001883a 	nop
8110d61c:	e037883a 	mov	sp,fp
8110d620:	dfc00117 	ldw	ra,4(sp)
8110d624:	df000017 	ldw	fp,0(sp)
8110d628:	dec00204 	addi	sp,sp,8
8110d62c:	f800283a 	ret

8110d630 <vUpdateMemMapFEE>:

/* Update the memory mapping for the FEE due to the CCD informations */
void vUpdateMemMapFEE( TNFee *pxNfeeL ) {
8110d630:	defff404 	addi	sp,sp,-48
8110d634:	de00012e 	bgeu	sp,et,8110d63c <vUpdateMemMapFEE+0xc>
8110d638:	003b68fa 	trap	3
8110d63c:	df000b15 	stw	fp,44(sp)
8110d640:	df000b04 	addi	fp,sp,44
8110d644:	e13fff15 	stw	r4,-4(fp)
    unsigned long ulTotalSizeL = 0; /* pixels */
8110d648:	e03ff915 	stw	zero,-28(fp)
    unsigned long ulMemLinesL = 0; /* mem lines */
8110d64c:	e03ff515 	stw	zero,-44(fp)
    unsigned long ulTotalMemLinesL = 0;
8110d650:	e03ffa15 	stw	zero,-24(fp)
    unsigned long ulMemLeftBytesL = 0; /* bytes */
8110d654:	e03ffb15 	stw	zero,-20(fp)
    unsigned long ulMemLeftLinesL = 0; /* mem lines */
8110d658:	e03ffc15 	stw	zero,-16(fp)
    unsigned long ulMaskMemLinesL = 0; /* mem lines */
8110d65c:	e03ff615 	stw	zero,-40(fp)
    unsigned char ucPixelsInLastBlockL = 0;
8110d660:	e03ff705 	stb	zero,-36(fp)
    unsigned char ucShiftsL = 0;
8110d664:	e03ffd05 	stb	zero,-12(fp)
    unsigned char ucIL = 0;
8110d668:	e03ff745 	stb	zero,-35(fp)
    unsigned long ulLastOffset = 0;
8110d66c:	e03ff815 	stw	zero,-32(fp)
    unsigned long ulStepHalfCCD = 0;
8110d670:	e03ffe15 	stw	zero,-8(fp)


    /* Size of the footprint of the CCD in the DDR memory */
    pxNfeeL->xMemMap.ulTotalBytes = ( OFFSET_STEP_FEE );
8110d674:	e17fff17 	ldw	r5,-4(fp)
8110d678:	01035a34 	movhi	r4,3432
8110d67c:	21348c04 	addi	r4,r4,-11728
8110d680:	29000215 	stw	r4,8(r5)

    /* Offset of the FEE in the DDR memory */
    pxNfeeL->xMemMap.ulOffsetRoot = OFFSET_STEP_FEE * pxNfeeL->ucId;
8110d684:	e13fff17 	ldw	r4,-4(fp)
8110d688:	21000003 	ldbu	r4,0(r4)
8110d68c:	21403fcc 	andi	r5,r4,255
8110d690:	01035a34 	movhi	r4,3432
8110d694:	21348c04 	addi	r4,r4,-11728
8110d698:	2909383a 	mul	r4,r5,r4
8110d69c:	200b883a 	mov	r5,r4
8110d6a0:	e13fff17 	ldw	r4,-4(fp)
8110d6a4:	21400115 	stw	r5,4(r4)

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;
8110d6a8:	e13fff17 	ldw	r4,-4(fp)
8110d6ac:	21400117 	ldw	r5,4(r4)
8110d6b0:	01033234 	movhi	r4,3272
8110d6b4:	21348c04 	addi	r4,r4,-11728
8110d6b8:	290b883a 	add	r5,r5,r4
8110d6bc:	e13fff17 	ldw	r4,-4(fp)
8110d6c0:	21400315 	stw	r5,12(r4)

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110d6c4:	e13fff17 	ldw	r4,-4(fp)
8110d6c8:	21002a0b 	ldhu	r4,168(r4)
8110d6cc:	217fffcc 	andi	r5,r4,65535
8110d6d0:	e13fff17 	ldw	r4,-4(fp)
8110d6d4:	2100290b 	ldhu	r4,164(r4)
8110d6d8:	213fffcc 	andi	r4,r4,65535
8110d6dc:	290b883a 	add	r5,r5,r4
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );
8110d6e0:	e13fff17 	ldw	r4,-4(fp)
8110d6e4:	2100298b 	ldhu	r4,166(r4)
8110d6e8:	21bfffcc 	andi	r6,r4,65535
8110d6ec:	e13fff17 	ldw	r4,-4(fp)
8110d6f0:	2100288b 	ldhu	r4,162(r4)
8110d6f4:	213fffcc 	andi	r4,r4,65535
8110d6f8:	310d883a 	add	r6,r6,r4
8110d6fc:	e13fff17 	ldw	r4,-4(fp)
8110d700:	2100280b 	ldhu	r4,160(r4)
8110d704:	213fffcc 	andi	r4,r4,65535
8110d708:	3109883a 	add	r4,r6,r4

    /* LUT Addrs */
    pxNfeeL->xMemMap.ulLUTAddr = LUT_INITIAL_ADDR + pxNfeeL->xMemMap.ulOffsetRoot;

    /* (HEIGHT + usiOLN)*(usiSPrescanN + usiSOverscanN + usiHalfWidth) */
    ulTotalSizeL =  ( pxNfeeL->xCcdInfo.usiHeight + pxNfeeL->xCcdInfo.usiOLN ) *
8110d70c:	2909383a 	mul	r4,r5,r4
8110d710:	e13ff915 	stw	r4,-28(fp)
                    ( pxNfeeL->xCcdInfo.usiHalfWidth + pxNfeeL->xCcdInfo.usiSOverscanN + pxNfeeL->xCcdInfo.usiSPrescanN );

    /* Total size in Bytes of a half CCD */
    pxNfeeL->xMemMap.xCommon.usiTotalBytes = ulTotalSizeL * BYTES_PER_PIXEL;
8110d714:	e13ff917 	ldw	r4,-28(fp)
8110d718:	2109883a 	add	r4,r4,r4
8110d71c:	200b883a 	mov	r5,r4
8110d720:	e13fff17 	ldw	r4,-4(fp)
8110d724:	2140048d 	sth	r5,18(r4)

    /* Total of Memory lines (64 bits memory) */
    ulMemLinesL = (unsigned long) pxNfeeL->xMemMap.xCommon.usiTotalBytes / BYTES_PER_MEM_LINE;
8110d728:	e13fff17 	ldw	r4,-4(fp)
8110d72c:	2100048b 	ldhu	r4,18(r4)
8110d730:	213fffcc 	andi	r4,r4,65535
8110d734:	2008d0fa 	srli	r4,r4,3
8110d738:	213fffcc 	andi	r4,r4,65535
8110d73c:	e13ff515 	stw	r4,-44(fp)
    ulMemLeftBytesL = pxNfeeL->xMemMap.xCommon.usiTotalBytes % BYTES_PER_MEM_LINE;   /* Word memory Alignment check: how much bytes left not align in the last word of the memory */
8110d740:	e13fff17 	ldw	r4,-4(fp)
8110d744:	2100048b 	ldhu	r4,18(r4)
8110d748:	213fffcc 	andi	r4,r4,65535
8110d74c:	210001cc 	andi	r4,r4,7
8110d750:	e13ffb15 	stw	r4,-20(fp)
    if ( ulMemLeftBytesL > 0 ) {
8110d754:	e13ffb17 	ldw	r4,-20(fp)
8110d758:	20001326 	beq	r4,zero,8110d7a8 <vUpdateMemMapFEE+0x178>
        ulMemLinesL = ulMemLinesL + 1;
8110d75c:	e13ff517 	ldw	r4,-44(fp)
8110d760:	21000044 	addi	r4,r4,1
8110d764:	e13ff515 	stw	r4,-44(fp)
        pxNfeeL->xMemMap.xCommon.usiTotalBytes = pxNfeeL->xMemMap.xCommon.usiTotalBytes - ulMemLeftBytesL + BYTES_PER_MEM_LINE; /* Add a full line, after will be filled with zero padding */
8110d768:	e13fff17 	ldw	r4,-4(fp)
8110d76c:	2100048b 	ldhu	r4,18(r4)
8110d770:	e17ffb17 	ldw	r5,-20(fp)
8110d774:	2149c83a 	sub	r4,r4,r5
8110d778:	21000204 	addi	r4,r4,8
8110d77c:	200b883a 	mov	r5,r4
8110d780:	e13fff17 	ldw	r4,-4(fp)
8110d784:	2140048d 	sth	r5,18(r4)
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = BYTES_PER_MEM_LINE - ulMemLeftBytesL;
8110d788:	e13ffb17 	ldw	r4,-20(fp)
8110d78c:	200b883a 	mov	r5,r4
8110d790:	01000204 	movi	r4,8
8110d794:	2149c83a 	sub	r4,r4,r5
8110d798:	200b883a 	mov	r5,r4
8110d79c:	e13fff17 	ldw	r4,-4(fp)
8110d7a0:	21400505 	stb	r5,20(r4)
8110d7a4:	00000206 	br	8110d7b0 <vUpdateMemMapFEE+0x180>
    } else {
        pxNfeeL->xMemMap.xCommon.ucPaddingBytes = 0;
8110d7a8:	e13fff17 	ldw	r4,-4(fp)
8110d7ac:	20000505 	stb	zero,20(r4)
    }

    /* At this point we have mapping the pixel in the CCD and calculate the zero padding for the last WORD of the line memory of the half ccd */

    /* For every 16 mem line will be 1 mask mem line */
    ulMaskMemLinesL = (unsigned long) ulMemLinesL / BLOCK_MEM_SIZE;
8110d7b0:	e13ff517 	ldw	r4,-44(fp)
8110d7b4:	2008d13a 	srli	r4,r4,4
8110d7b8:	e13ff615 	stw	r4,-40(fp)
    ulMemLeftLinesL = ulMemLinesL % BLOCK_MEM_SIZE;
8110d7bc:	e13ff517 	ldw	r4,-44(fp)
8110d7c0:	210003cc 	andi	r4,r4,15
8110d7c4:	e13ffc15 	stw	r4,-16(fp)
    if ( ulMemLeftLinesL >= 1 ) {
8110d7c8:	e13ffc17 	ldw	r4,-16(fp)
8110d7cc:	20000b26 	beq	r4,zero,8110d7fc <vUpdateMemMapFEE+0x1cc>
        ulMaskMemLinesL = ulMaskMemLinesL + 1;
8110d7d0:	e13ff617 	ldw	r4,-40(fp)
8110d7d4:	21000044 	addi	r4,r4,1
8110d7d8:	e13ff615 	stw	r4,-40(fp)
        ulTotalMemLinesL = ( ulMemLinesL - ulMemLeftLinesL + BLOCK_MEM_SIZE ) + ulMaskMemLinesL; /* One extra 16 sized block, will be filled with zero padding the ret os spare lines */
8110d7dc:	e17ff517 	ldw	r5,-44(fp)
8110d7e0:	e13ffc17 	ldw	r4,-16(fp)
8110d7e4:	290bc83a 	sub	r5,r5,r4
8110d7e8:	e13ff617 	ldw	r4,-40(fp)
8110d7ec:	2909883a 	add	r4,r5,r4
8110d7f0:	21000404 	addi	r4,r4,16
8110d7f4:	e13ffa15 	stw	r4,-24(fp)
8110d7f8:	00000406 	br	8110d80c <vUpdateMemMapFEE+0x1dc>
    } else {
        ulTotalMemLinesL = ulMemLinesL + ulMaskMemLinesL;
8110d7fc:	e17ff517 	ldw	r5,-44(fp)
8110d800:	e13ff617 	ldw	r4,-40(fp)
8110d804:	2909883a 	add	r4,r5,r4
8110d808:	e13ffa15 	stw	r4,-24(fp)
    }

    /* Calculating how is the final mask with zero padding */
    if ( ulMemLeftBytesL >= 1 ) {
8110d80c:	e13ffb17 	ldw	r4,-20(fp)
8110d810:	20000926 	beq	r4,zero,8110d838 <vUpdateMemMapFEE+0x208>
        ucPixelsInLastBlockL = (unsigned char) (( ulMemLeftLinesL * PIXEL_PER_MEM_LINE ) + (unsigned int) ( ulMemLeftBytesL / BYTES_PER_PIXEL ));
8110d814:	e13ffc17 	ldw	r4,-16(fp)
8110d818:	2109883a 	add	r4,r4,r4
8110d81c:	2109883a 	add	r4,r4,r4
8110d820:	200b883a 	mov	r5,r4
8110d824:	e13ffb17 	ldw	r4,-20(fp)
8110d828:	2008d07a 	srli	r4,r4,1
8110d82c:	2909883a 	add	r4,r5,r4
8110d830:	e13ff705 	stb	r4,-36(fp)
8110d834:	00000406 	br	8110d848 <vUpdateMemMapFEE+0x218>
    } else {
        ucPixelsInLastBlockL = (unsigned char) ( ulMemLeftLinesL * PIXEL_PER_MEM_LINE );
8110d838:	e13ffc17 	ldw	r4,-16(fp)
8110d83c:	2109883a 	add	r4,r4,r4
8110d840:	2109883a 	add	r4,r4,r4
8110d844:	e13ff705 	stb	r4,-36(fp)
    }

    /* 16 * 4 = 64 - (number of pixels in the last block)) */
    ucShiftsL = ( BLOCK_MEM_SIZE * PIXEL_PER_MEM_LINE ) - ucPixelsInLastBlockL;
8110d848:	e13ff703 	ldbu	r4,-36(fp)
8110d84c:	01401004 	movi	r5,64
8110d850:	2909c83a 	sub	r4,r5,r4
8110d854:	e13ffd05 	stb	r4,-12(fp)

    /* WARNING: Verify the memory alocation (endianess) */
    pxNfeeL->xMemMap.xCommon.ucPaddingMask.ullWord = (unsigned long long)(0xFFFFFFFFFFFFFFFF >> ucShiftsL);
8110d858:	e13ffd03 	ldbu	r4,-12(fp)
8110d85c:	217ff804 	addi	r5,r4,-32
8110d860:	28000416 	blt	r5,zero,8110d874 <vUpdateMemMapFEE+0x244>
8110d864:	013fffc4 	movi	r4,-1
8110d868:	2144d83a 	srl	r2,r4,r5
8110d86c:	0007883a 	mov	r3,zero
8110d870:	00000a06 	br	8110d89c <vUpdateMemMapFEE+0x26c>
8110d874:	017fffc4 	movi	r5,-1
8110d878:	280c907a 	slli	r6,r5,1
8110d87c:	014007c4 	movi	r5,31
8110d880:	290bc83a 	sub	r5,r5,r4
8110d884:	314a983a 	sll	r5,r6,r5
8110d888:	01bfffc4 	movi	r6,-1
8110d88c:	3104d83a 	srl	r2,r6,r4
8110d890:	2884b03a 	or	r2,r5,r2
8110d894:	017fffc4 	movi	r5,-1
8110d898:	2906d83a 	srl	r3,r5,r4
8110d89c:	e13fff17 	ldw	r4,-4(fp)
8110d8a0:	20800615 	stw	r2,24(r4)
8110d8a4:	20c00715 	stw	r3,28(r4)

    /* Number of block is te same as the number of line masks in the memory */
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;
8110d8a8:	e0bff617 	ldw	r2,-40(fp)
8110d8ac:	1007883a 	mov	r3,r2
8110d8b0:	e0bfff17 	ldw	r2,-4(fp)
8110d8b4:	10c0040d 	sth	r3,16(r2)

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
8110d8b8:	e0bfff17 	ldw	r2,-4(fp)
8110d8bc:	10c00117 	ldw	r3,4(r2)
8110d8c0:	008004b4 	movhi	r2,18
8110d8c4:	10a40004 	addi	r2,r2,-28672
8110d8c8:	1885883a 	add	r2,r3,r2
8110d8cc:	e0bff815 	stw	r2,-32(fp)
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
8110d8d0:	e0bfff17 	ldw	r2,-4(fp)
8110d8d4:	1080048b 	ldhu	r2,18(r2)
8110d8d8:	10ffffcc 	andi	r3,r2,65535
8110d8dc:	008000b4 	movhi	r2,2
8110d8e0:	10a40004 	addi	r2,r2,-28672
8110d8e4:	1885883a 	add	r2,r3,r2
8110d8e8:	e0bffe15 	stw	r2,-8(fp)
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110d8ec:	e03ff745 	stb	zero,-35(fp)
8110d8f0:	00001906 	br	8110d958 <vUpdateMemMapFEE+0x328>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
8110d8f4:	e0bff743 	ldbu	r2,-35(fp)
8110d8f8:	e0ffff17 	ldw	r3,-4(fp)
8110d8fc:	10800624 	muli	r2,r2,24
8110d900:	1885883a 	add	r2,r3,r2
8110d904:	10800804 	addi	r2,r2,32
8110d908:	e0fff817 	ldw	r3,-32(fp)
8110d90c:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110d910:	e0fff817 	ldw	r3,-32(fp)
8110d914:	e0bffe17 	ldw	r2,-8(fp)
8110d918:	1885883a 	add	r2,r3,r2
8110d91c:	e0bff815 	stw	r2,-32(fp)
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
8110d920:	e0bff743 	ldbu	r2,-35(fp)
8110d924:	e0ffff17 	ldw	r3,-4(fp)
8110d928:	10800624 	muli	r2,r2,24
8110d92c:	1885883a 	add	r2,r3,r2
8110d930:	10800b04 	addi	r2,r2,44
8110d934:	e0fff817 	ldw	r3,-32(fp)
8110d938:	10c00015 	stw	r3,0(r2)
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
8110d93c:	e0fff817 	ldw	r3,-32(fp)
8110d940:	e0bffe17 	ldw	r2,-8(fp)
8110d944:	1885883a 	add	r2,r3,r2
8110d948:	e0bff815 	stw	r2,-32(fp)
    pxNfeeL->xMemMap.xCommon.usiNTotalBlocks = ulMaskMemLinesL;

    /* Set the addr for every CCD of the FEE, left and right sides */
    ulLastOffset = pxNfeeL->xMemMap.ulOffsetRoot + RESERVED_FEE_X + RESERVED_HALF_CCD_X;
    ulStepHalfCCD = RESERVED_HALF_CCD_X + pxNfeeL->xMemMap.xCommon.usiTotalBytes;
    for ( ucIL = 0; ucIL < 4; ucIL++ ) {
8110d94c:	e0bff743 	ldbu	r2,-35(fp)
8110d950:	10800044 	addi	r2,r2,1
8110d954:	e0bff745 	stb	r2,-35(fp)
8110d958:	e0bff743 	ldbu	r2,-35(fp)
8110d95c:	10800130 	cmpltui	r2,r2,4
8110d960:	103fe41e 	bne	r2,zero,8110d8f4 <__reset+0xfb0ed8f4>
        pxNfeeL->xMemMap.xCcd[ ucIL ].xLeft.ulOffsetAddr = ulLastOffset;
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
        pxNfeeL->xMemMap.xCcd[ ucIL ].xRight.ulOffsetAddr = ulLastOffset; 
        ulLastOffset = ulLastOffset + ulStepHalfCCD;
    }
}
8110d964:	0001883a 	nop
8110d968:	e037883a 	mov	sp,fp
8110d96c:	df000017 	ldw	fp,0(sp)
8110d970:	dec00104 	addi	sp,sp,4
8110d974:	f800283a 	ret

8110d978 <vFeeSpwRMAPLoadDefault>:

/* Load the default configuration of the SPW/RMAP */
void vFeeSpwRMAPLoadDefault( TNFee *pxNfeeL ) {
8110d978:	defffe04 	addi	sp,sp,-8
8110d97c:	de00012e 	bgeu	sp,et,8110d984 <vFeeSpwRMAPLoadDefault+0xc>
8110d980:	003b68fa 	trap	3
8110d984:	df000115 	stw	fp,4(sp)
8110d988:	df000104 	addi	fp,sp,4
8110d98c:	e13fff15 	stw	r4,-4(fp)
    //bGetSpwRmapSDCard();
    //todo: For now is hardcoded
    //todo: Verificar qual a estrutura usar para as configurações
}
8110d990:	0001883a 	nop
8110d994:	e037883a 	mov	sp,fp
8110d998:	df000017 	ldw	fp,0(sp)
8110d99c:	dec00104 	addi	sp,sp,4
8110d9a0:	f800283a 	ret

8110d9a4 <vFeeSpwRMAPChangeConfig>:

/* Only in NFEE_CONFIG */
/* Change the active configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeConfig( TNFee *pxNfeeL ) {
8110d9a4:	defffe04 	addi	sp,sp,-8
8110d9a8:	de00012e 	bgeu	sp,et,8110d9b0 <vFeeSpwRMAPChangeConfig+0xc>
8110d9ac:	003b68fa 	trap	3
8110d9b0:	df000115 	stw	fp,4(sp)
8110d9b4:	df000104 	addi	fp,sp,4
8110d9b8:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar qual a estrutura usar para as configurações
}
8110d9bc:	0001883a 	nop
8110d9c0:	e037883a 	mov	sp,fp
8110d9c4:	df000017 	ldw	fp,0(sp)
8110d9c8:	dec00104 	addi	sp,sp,4
8110d9cc:	f800283a 	ret

8110d9d0 <vFeeSpwRMAPChangeDefault>:

/* Only in NFEE_CONFIG */
/* Change the default configuration of the SPW/RMAP */
void vFeeSpwRMAPChangeDefault( TNFee *pxNfeeL ) {
8110d9d0:	defffe04 	addi	sp,sp,-8
8110d9d4:	de00012e 	bgeu	sp,et,8110d9dc <vFeeSpwRMAPChangeDefault+0xc>
8110d9d8:	003b68fa 	trap	3
8110d9dc:	df000115 	stw	fp,4(sp)
8110d9e0:	df000104 	addi	fp,sp,4
8110d9e4:	e13fff15 	stw	r4,-4(fp)
    //bSaveSpwRmapSDCard();
    //todo: Verificar qual a estrutura usar para as configurações, enviar o numero do FEE tbm
}
8110d9e8:	0001883a 	nop
8110d9ec:	e037883a 	mov	sp,fp
8110d9f0:	df000017 	ldw	fp,0(sp)
8110d9f4:	dec00104 	addi	sp,sp,4
8110d9f8:	f800283a 	ret

8110d9fc <cFeeSpwChannelEnable>:

/* Any mode */
/* Enable SPW channel for the FEE */
void cFeeSpwChannelEnable( TNFee *pxNfeeL ) {
8110d9fc:	defffe04 	addi	sp,sp,-8
8110da00:	de00012e 	bgeu	sp,et,8110da08 <cFeeSpwChannelEnable+0xc>
8110da04:	003b68fa 	trap	3
8110da08:	df000115 	stw	fp,4(sp)
8110da0c:	df000104 	addi	fp,sp,4
8110da10:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110da14:	0001883a 	nop
8110da18:	e037883a 	mov	sp,fp
8110da1c:	df000017 	ldw	fp,0(sp)
8110da20:	dec00104 	addi	sp,sp,4
8110da24:	f800283a 	ret

8110da28 <cFeeSpwChannelDisable>:

/* Any mode */
/* Disable SPW channel for the FEE */
void cFeeSpwChannelDisable( TNFee *pxNfeeL ) {
8110da28:	defffe04 	addi	sp,sp,-8
8110da2c:	de00012e 	bgeu	sp,et,8110da34 <cFeeSpwChannelDisable+0xc>
8110da30:	003b68fa 	trap	3
8110da34:	df000115 	stw	fp,4(sp)
8110da38:	df000104 	addi	fp,sp,4
8110da3c:	e13fff15 	stw	r4,-4(fp)
    //todo: Verificar com o França
}
8110da40:	0001883a 	nop
8110da44:	e037883a 	mov	sp,fp
8110da48:	df000017 	ldw	fp,0(sp)
8110da4c:	dec00104 	addi	sp,sp,4
8110da50:	f800283a 	ret

8110da54 <cFeeRMAPDump>:

/* Any mode */
/* Dump and send using PUS the RMAP Configuration areas [NFEESIM-UR-699] */
void cFeeRMAPDump( TNFee *pxNfeeL ) {
8110da54:	defffe04 	addi	sp,sp,-8
8110da58:	de00012e 	bgeu	sp,et,8110da60 <cFeeRMAPDump+0xc>
8110da5c:	003b68fa 	trap	3
8110da60:	df000115 	stw	fp,4(sp)
8110da64:	df000104 	addi	fp,sp,4
8110da68:	e13fff15 	stw	r4,-4(fp)

    //todo: ler as areas de memoria do RMAP e enviar via ethernet

}
8110da6c:	0001883a 	nop
8110da70:	e037883a 	mov	sp,fp
8110da74:	df000017 	ldw	fp,0(sp)
8110da78:	dec00104 	addi	sp,sp,4
8110da7c:	f800283a 	ret

8110da80 <cFeeRMAPEchoingEnable>:

/* Any mode */
/* Allow the user to activate the echo mode for RMAP [NFEESIM-UR-588]  */
void cFeeRMAPEchoingEnable( TNFee *pxNfeeL ) {
8110da80:	defffe04 	addi	sp,sp,-8
8110da84:	de00012e 	bgeu	sp,et,8110da8c <cFeeRMAPEchoingEnable+0xc>
8110da88:	003b68fa 	trap	3
8110da8c:	df000115 	stw	fp,4(sp)
8110da90:	df000104 	addi	fp,sp,4
8110da94:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = TRUE;
8110da98:	e0bfff17 	ldw	r2,-4(fp)
8110da9c:	00c00044 	movi	r3,1
8110daa0:	10c02315 	stw	r3,140(r2)
}
8110daa4:	0001883a 	nop
8110daa8:	e037883a 	mov	sp,fp
8110daac:	df000017 	ldw	fp,0(sp)
8110dab0:	dec00104 	addi	sp,sp,4
8110dab4:	f800283a 	ret

8110dab8 <cFeeRMAPEchoingDisable>:

/* Any mode */
/* Allow the user to disable the echo mode for RMAP [NFEESIM-UR-589]  */
void cFeeRMAPEchoingDisable( TNFee *pxNfeeL ) {
8110dab8:	defffe04 	addi	sp,sp,-8
8110dabc:	de00012e 	bgeu	sp,et,8110dac4 <cFeeRMAPEchoingDisable+0xc>
8110dac0:	003b68fa 	trap	3
8110dac4:	df000115 	stw	fp,4(sp)
8110dac8:	df000104 	addi	fp,sp,4
8110dacc:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bEchoing = FALSE;
8110dad0:	e0bfff17 	ldw	r2,-4(fp)
8110dad4:	10002315 	stw	zero,140(r2)
}
8110dad8:	0001883a 	nop
8110dadc:	e037883a 	mov	sp,fp
8110dae0:	df000017 	ldw	fp,0(sp)
8110dae4:	dec00104 	addi	sp,sp,4
8110dae8:	f800283a 	ret

8110daec <cFeeRMAPLogEnable>:

/* Any mode */
/* Allow the user to activate the log of RMAP [NFEESIM-UR-588]  */
void cFeeRMAPLogEnable( TNFee *pxNfeeL ) {
8110daec:	defffe04 	addi	sp,sp,-8
8110daf0:	de00012e 	bgeu	sp,et,8110daf8 <cFeeRMAPLogEnable+0xc>
8110daf4:	003b68fa 	trap	3
8110daf8:	df000115 	stw	fp,4(sp)
8110dafc:	df000104 	addi	fp,sp,4
8110db00:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = TRUE;
8110db04:	e0bfff17 	ldw	r2,-4(fp)
8110db08:	00c00044 	movi	r3,1
8110db0c:	10c02215 	stw	r3,136(r2)
}
8110db10:	0001883a 	nop
8110db14:	e037883a 	mov	sp,fp
8110db18:	df000017 	ldw	fp,0(sp)
8110db1c:	dec00104 	addi	sp,sp,4
8110db20:	f800283a 	ret

8110db24 <cFeeRMAPLogDisable>:

/* Any mode */
/* Allow the user to disable the log of RMAP [NFEESIM-UR-589]  */
void cFeeRMAPLogDisable( TNFee *pxNfeeL ) {
8110db24:	defffe04 	addi	sp,sp,-8
8110db28:	de00012e 	bgeu	sp,et,8110db30 <cFeeRMAPLogDisable+0xc>
8110db2c:	003b68fa 	trap	3
8110db30:	df000115 	stw	fp,4(sp)
8110db34:	df000104 	addi	fp,sp,4
8110db38:	e13fff15 	stw	r4,-4(fp)
    pxNfeeL->xControl.bLogging = FALSE;
8110db3c:	e0bfff17 	ldw	r2,-4(fp)
8110db40:	10002215 	stw	zero,136(r2)
}
8110db44:	0001883a 	nop
8110db48:	e037883a 	mov	sp,fp
8110db4c:	df000017 	ldw	fp,0(sp)
8110db50:	dec00104 	addi	sp,sp,4
8110db54:	f800283a 	ret

8110db58 <vInitSimucamBasicHW>:

#include "initialization_simucam.h"


void vInitSimucamBasicHW(void)
{
8110db58:	defffe04 	addi	sp,sp,-8
8110db5c:	de00012e 	bgeu	sp,et,8110db64 <vInitSimucamBasicHW+0xc>
8110db60:	003b68fa 	trap	3
8110db64:	dfc00115 	stw	ra,4(sp)
8110db68:	df000015 	stw	fp,0(sp)
8110db6c:	d839883a 	mov	fp,sp

	/* Turn Off all LEDs */
	bSetBoardLeds(LEDS_OFF, LEDS_BOARD_ALL_MASK);
8110db70:	01403fc4 	movi	r5,255
8110db74:	0009883a 	mov	r4,zero
8110db78:	11060d40 	call	811060d4 <bSetBoardLeds>
	bSetPainelLeds(LEDS_OFF, LEDS_PAINEL_ALL_MASK);
8110db7c:	01400834 	movhi	r5,32
8110db80:	297fffc4 	addi	r5,r5,-1
8110db84:	0009883a 	mov	r4,zero
8110db88:	11061540 	call	81106154 <bSetPainelLeds>

	/* Turn On Power LED */
	bSetPainelLeds(LEDS_ON, LEDS_POWER_MASK);
8110db8c:	01400074 	movhi	r5,1
8110db90:	01000044 	movi	r4,1
8110db94:	11061540 	call	81106154 <bSetPainelLeds>

	/* Configure Seven Segments Display */
	bSSDisplayConfig(SSDP_NORMAL_MODE);
8110db98:	0009883a 	mov	r4,zero
8110db9c:	11077300 	call	81107730 <bSSDisplayConfig>
	bSSDisplayUpdate(0);
8110dba0:	0009883a 	mov	r4,zero
8110dba4:	11078000 	call	81107800 <bSSDisplayUpdate>

}
8110dba8:	0001883a 	nop
8110dbac:	e037883a 	mov	sp,fp
8110dbb0:	dfc00117 	ldw	ra,4(sp)
8110dbb4:	df000017 	ldw	fp,0(sp)
8110dbb8:	dec00204 	addi	sp,sp,8
8110dbbc:	f800283a 	ret

8110dbc0 <bLogWriteSDCard>:

#include "log_manager_simucam.h"


bool bLogWriteSDCard ( const char * cDataIn, const char * cFilename )
{
8110dbc0:	defffd04 	addi	sp,sp,-12
8110dbc4:	de00012e 	bgeu	sp,et,8110dbcc <bLogWriteSDCard+0xc>
8110dbc8:	003b68fa 	trap	3
8110dbcc:	df000215 	stw	fp,8(sp)
8110dbd0:	df000204 	addi	fp,sp,8
8110dbd4:	e13ffe15 	stw	r4,-8(fp)
8110dbd8:	e17fff15 	stw	r5,-4(fp)

	return TRUE;
8110dbdc:	00800044 	movi	r2,1
}
8110dbe0:	e037883a 	mov	sp,fp
8110dbe4:	df000017 	ldw	fp,0(sp)
8110dbe8:	dec00104 	addi	sp,sp,4
8110dbec:	f800283a 	ret

8110dbf0 <bLogWriteETH>:

bool bLogWriteETH ( const char * cDataIn )
{
8110dbf0:	defffe04 	addi	sp,sp,-8
8110dbf4:	de00012e 	bgeu	sp,et,8110dbfc <bLogWriteETH+0xc>
8110dbf8:	003b68fa 	trap	3
8110dbfc:	df000115 	stw	fp,4(sp)
8110dc00:	df000104 	addi	fp,sp,4
8110dc04:	e13fff15 	stw	r4,-4(fp)

	return TRUE;
8110dc08:	00800044 	movi	r2,1
}
8110dc0c:	e037883a 	mov	sp,fp
8110dc10:	df000017 	ldw	fp,0(sp)
8110dc14:	dec00104 	addi	sp,sp,4
8110dc18:	f800283a 	ret

8110dc1c <vSimucamStructureInit>:
 */


#include "meb.h"

void vSimucamStructureInit( TSimucam_MEB *xMeb ) {
8110dc1c:	defffc04 	addi	sp,sp,-16
8110dc20:	de00012e 	bgeu	sp,et,8110dc28 <vSimucamStructureInit+0xc>
8110dc24:	003b68fa 	trap	3
8110dc28:	dfc00315 	stw	ra,12(sp)
8110dc2c:	df000215 	stw	fp,8(sp)
8110dc30:	df000204 	addi	fp,sp,8
8110dc34:	e13fff15 	stw	r4,-4(fp)
    unsigned char ucIL = 0;
8110dc38:	e03ffe05 	stb	zero,-8(fp)

    // LoadTypeOfFeeSDCard();
    // todo: Load from SDCard for now is Hardcoded to Normal FEE
    xMeb->eType = sNormalFEE;
8110dc3c:	e0bfff17 	ldw	r2,-4(fp)
8110dc40:	10000015 	stw	zero,0(r2)
    
    /* Simucam start in the Meb Config Mode */
    xMeb->eMode = sMebConfig;
8110dc44:	e0bfff17 	ldw	r2,-4(fp)
8110dc48:	10000115 	stw	zero,4(r2)

    /* Load EP */
    vLoadDefaultEPValue( xMeb );
8110dc4c:	e13fff17 	ldw	r4,-4(fp)
8110dc50:	110ddb80 	call	8110ddb8 <vLoadDefaultEPValue>
    /* Load RT */
    vLoadDefaultRTValue( xMeb );
8110dc54:	e13fff17 	ldw	r4,-4(fp)
8110dc58:	110de5c0 	call	8110de5c <vLoadDefaultRTValue>
    /* Load SyncSource */
    vLoadDefaultSyncSource( xMeb );
8110dc5c:	e13fff17 	ldw	r4,-4(fp)
8110dc60:	110df040 	call	8110df04 <vLoadDefaultSyncSource>
    /* Reset TimeCode */
    vResetTimeCode( xMeb );
8110dc64:	e13fff17 	ldw	r4,-4(fp)
8110dc68:	110dfe40 	call	8110dfe4 <vResetTimeCode>
    /* Load Default Id for NFEE master */
    vLoadDefaultIdNFEEMaster( xMeb );
8110dc6c:	e13fff17 	ldw	r4,-4(fp)
8110dc70:	110e0bc0 	call	8110e0bc <vLoadDefaultIdNFEEMaster>
    /* Load Default Config for Auto Reset Mode */
    vLoadDefaultAutoResetSync( xMeb );
8110dc74:	e13fff17 	ldw	r4,-4(fp)
8110dc78:	110e0180 	call	8110e018 <vLoadDefaultAutoResetSync>

    // LoadNumberOfNFeesSDCard();
    /* todo: Load from SDCard for now is Hardcoded for 4 instances of NFEE */
    xMeb->ucNofFeesInUse = 2;
8110dc7c:	e0bfff17 	ldw	r2,-4(fp)
8110dc80:	00c00084 	movi	r3,2
8110dc84:	10c00205 	stb	r3,8(r2)

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
8110dc88:	e0bfff17 	ldw	r2,-4(fp)
8110dc8c:	10800017 	ldw	r2,0(r2)
8110dc90:	1000391e 	bne	r2,zero,8110dd78 <vSimucamStructureInit+0x15c>
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110dc94:	e03ffe05 	stb	zero,-8(fp)
8110dc98:	00003306 	br	8110dd68 <vSimucamStructureInit+0x14c>
            if ( ucIL < xMeb->ucNofFeesInUse ) {
8110dc9c:	e0bfff17 	ldw	r2,-4(fp)
8110dca0:	10800203 	ldbu	r2,8(r2)
8110dca4:	10803fcc 	andi	r2,r2,255
8110dca8:	e0fffe03 	ldbu	r3,-8(fp)
8110dcac:	18800a2e 	bgeu	r3,r2,8110dcd8 <vSimucamStructureInit+0xbc>
                vNFeeStructureInit( &xMeb->xNfee[ ucIL ], ucIL);
8110dcb0:	e0bffe03 	ldbu	r2,-8(fp)
8110dcb4:	10802b24 	muli	r2,r2,172
8110dcb8:	10800304 	addi	r2,r2,12
8110dcbc:	e0ffff17 	ldw	r3,-4(fp)
8110dcc0:	1885883a 	add	r2,r3,r2
8110dcc4:	e0fffe03 	ldbu	r3,-8(fp)
8110dcc8:	180b883a 	mov	r5,r3
8110dccc:	1009883a 	mov	r4,r2
8110dcd0:	110d5580 	call	8110d558 <vNFeeStructureInit>
8110dcd4:	00000906 	br	8110dcfc <vSimucamStructureInit+0xe0>
            } else {
                vNFeeNotInUse( &xMeb->xNfee[ ucIL ], ucIL);
8110dcd8:	e0bffe03 	ldbu	r2,-8(fp)
8110dcdc:	10802b24 	muli	r2,r2,172
8110dce0:	10800304 	addi	r2,r2,12
8110dce4:	e0ffff17 	ldw	r3,-4(fp)
8110dce8:	1885883a 	add	r2,r3,r2
8110dcec:	e0fffe03 	ldbu	r3,-8(fp)
8110dcf0:	180b883a 	mov	r5,r3
8110dcf4:	1009883a 	mov	r4,r2
8110dcf8:	110d5080 	call	8110d508 <vNFeeNotInUse>
            }
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
8110dcfc:	e0bffe03 	ldbu	r2,-8(fp)
8110dd00:	e0fffe03 	ldbu	r3,-8(fp)
8110dd04:	18c02b24 	muli	r3,r3,172
8110dd08:	18c02304 	addi	r3,r3,140
8110dd0c:	e13fff17 	ldw	r4,-4(fp)
8110dd10:	20c7883a 	add	r3,r4,r3
8110dd14:	e13fff17 	ldw	r4,-4(fp)
8110dd18:	108042c4 	addi	r2,r2,267
8110dd1c:	1085883a 	add	r2,r2,r2
8110dd20:	1085883a 	add	r2,r2,r2
8110dd24:	2085883a 	add	r2,r4,r2
8110dd28:	10c00015 	stw	r3,0(r2)
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
8110dd2c:	e0bffe03 	ldbu	r2,-8(fp)
8110dd30:	e0fffe03 	ldbu	r3,-8(fp)
8110dd34:	18c02b24 	muli	r3,r3,172
8110dd38:	18c02404 	addi	r3,r3,144
8110dd3c:	e13fff17 	ldw	r4,-4(fp)
8110dd40:	20c7883a 	add	r3,r4,r3
8110dd44:	e13fff17 	ldw	r4,-4(fp)
8110dd48:	10804444 	addi	r2,r2,273
8110dd4c:	1085883a 	add	r2,r2,r2
8110dd50:	1085883a 	add	r2,r2,r2
8110dd54:	2085883a 	add	r2,r4,r2
8110dd58:	10c00015 	stw	r3,0(r2)
    xMeb->ucNofFeesInUse = 2;

    /* Verify if if a Fast or Normal */
    if ( xMeb->eType == sNormalFEE ) {
        /* Are Normal Fee instances */
        for ( ucIL = 0; ucIL < N_OF_NFEE; ucIL++ ) {
8110dd5c:	e0bffe03 	ldbu	r2,-8(fp)
8110dd60:	10800044 	addi	r2,r2,1
8110dd64:	e0bffe05 	stb	r2,-8(fp)
8110dd68:	e0bffe03 	ldbu	r2,-8(fp)
8110dd6c:	108001b0 	cmpltui	r2,r2,6
8110dd70:	103fca1e 	bne	r2,zero,8110dc9c <__reset+0xfb0edc9c>
8110dd74:	00000806 	br	8110dd98 <vSimucamStructureInit+0x17c>
            xMeb->pbEnabledNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bEnabled;
            xMeb->pbRunningDmaNFEEs[ ucIL ] = &xMeb->xNfee[ ucIL ].xControl.bUsingDMA;
        }
    } else {
        /* Are Fast Fee instances */
        for ( ucIL = 0; ucIL < N_OF_FastFEE; ucIL++ ) {
8110dd78:	e03ffe05 	stb	zero,-8(fp)
8110dd7c:	00000306 	br	8110dd8c <vSimucamStructureInit+0x170>
8110dd80:	e0bffe03 	ldbu	r2,-8(fp)
8110dd84:	10800044 	addi	r2,r2,1
8110dd88:	e0bffe05 	stb	r2,-8(fp)
8110dd8c:	e0bffe03 	ldbu	r2,-8(fp)
8110dd90:	108000b0 	cmpltui	r2,r2,2
8110dd94:	103ffa1e 	bne	r2,zero,8110dd80 <__reset+0xfb0edd80>
            }            
        }
    }

    /* Reseting swap memory mechanism */
    xMeb->ucActualDDR = 0;
8110dd98:	e0bfff17 	ldw	r2,-4(fp)
8110dd9c:	10010505 	stb	zero,1044(r2)

    /* At this point all structures that manage the aplication of Simucam and FEE are initialized, the tasks could start now */


}
8110dda0:	0001883a 	nop
8110dda4:	e037883a 	mov	sp,fp
8110dda8:	dfc00117 	ldw	ra,4(sp)
8110ddac:	df000017 	ldw	fp,0(sp)
8110ddb0:	dec00204 	addi	sp,sp,8
8110ddb4:	f800283a 	ret

8110ddb8 <vLoadDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultEPValue( TSimucam_MEB *xMeb ) {
8110ddb8:	defffe04 	addi	sp,sp,-8
8110ddbc:	de00012e 	bgeu	sp,et,8110ddc4 <vLoadDefaultEPValue+0xc>
8110ddc0:	003b68fa 	trap	3
8110ddc4:	df000115 	stw	fp,4(sp)
8110ddc8:	df000104 	addi	fp,sp,4
8110ddcc:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucEP = 25;
8110ddd0:	e0bfff17 	ldw	r2,-4(fp)
8110ddd4:	00d07234 	movhi	r3,16840
8110ddd8:	10c10615 	stw	r3,1048(r2)
}
8110dddc:	0001883a 	nop
8110dde0:	e037883a 	mov	sp,fp
8110dde4:	df000017 	ldw	fp,0(sp)
8110dde8:	dec00104 	addi	sp,sp,4
8110ddec:	f800283a 	ret

8110ddf0 <vChangeEPValue>:

/* Only in MEB_CONFIG */
/* Change the active value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110ddf0:	defffd04 	addi	sp,sp,-12
8110ddf4:	de00012e 	bgeu	sp,et,8110ddfc <vChangeEPValue+0xc>
8110ddf8:	003b68fa 	trap	3
8110ddfc:	df000215 	stw	fp,8(sp)
8110de00:	df000204 	addi	fp,sp,8
8110de04:	e13ffe15 	stw	r4,-8(fp)
8110de08:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucEP = ucValue;
8110de0c:	e0bffe17 	ldw	r2,-8(fp)
8110de10:	e0ffff17 	ldw	r3,-4(fp)
8110de14:	10c10615 	stw	r3,1048(r2)
}
8110de18:	0001883a 	nop
8110de1c:	e037883a 	mov	sp,fp
8110de20:	df000017 	ldw	fp,0(sp)
8110de24:	dec00104 	addi	sp,sp,4
8110de28:	f800283a 	ret

8110de2c <vChangeDefaultEPValue>:

/* Only in MEB_CONFIG */
/* Change the default value of EP - Exposure period [NFEESIM-UR-447] */
void vChangeDefaultEPValue( TSimucam_MEB *xMeb, float ucValue ) {
8110de2c:	defffd04 	addi	sp,sp,-12
8110de30:	de00012e 	bgeu	sp,et,8110de38 <vChangeDefaultEPValue+0xc>
8110de34:	003b68fa 	trap	3
8110de38:	df000215 	stw	fp,8(sp)
8110de3c:	df000204 	addi	fp,sp,8
8110de40:	e13ffe15 	stw	r4,-8(fp)
8110de44:	e17fff15 	stw	r5,-4(fp)
    //bSaveEPSDCard(ucValue);
}
8110de48:	0001883a 	nop
8110de4c:	e037883a 	mov	sp,fp
8110de50:	df000017 	ldw	fp,0(sp)
8110de54:	dec00104 	addi	sp,sp,4
8110de58:	f800283a 	ret

8110de5c <vLoadDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Load Default value of EP - Exposure period [NFEESIM-UR-447] */
void vLoadDefaultRTValue( TSimucam_MEB *xMeb ) {
8110de5c:	defffe04 	addi	sp,sp,-8
8110de60:	de00012e 	bgeu	sp,et,8110de68 <vLoadDefaultRTValue+0xc>
8110de64:	003b68fa 	trap	3
8110de68:	df000115 	stw	fp,4(sp)
8110de6c:	df000104 	addi	fp,sp,4
8110de70:	e13fff15 	stw	r4,-4(fp)
    //bGetEPSDCard();
    //todo: For now is hardcoded
    xMeb->ucRT = 3.9;
8110de74:	e0ffff17 	ldw	r3,-4(fp)
8110de78:	00901eb4 	movhi	r2,16506
8110de7c:	10a66684 	addi	r2,r2,-26214
8110de80:	18810715 	stw	r2,1052(r3)
}
8110de84:	0001883a 	nop
8110de88:	e037883a 	mov	sp,fp
8110de8c:	df000017 	ldw	fp,0(sp)
8110de90:	dec00104 	addi	sp,sp,4
8110de94:	f800283a 	ret

8110de98 <vChangeRTValue>:

/* Only in MEB_CONFIG */
/* Change the active value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110de98:	defffd04 	addi	sp,sp,-12
8110de9c:	de00012e 	bgeu	sp,et,8110dea4 <vChangeRTValue+0xc>
8110dea0:	003b68fa 	trap	3
8110dea4:	df000215 	stw	fp,8(sp)
8110dea8:	df000204 	addi	fp,sp,8
8110deac:	e13ffe15 	stw	r4,-8(fp)
8110deb0:	e17fff15 	stw	r5,-4(fp)
    xMeb->ucRT = ucValue;
8110deb4:	e0bffe17 	ldw	r2,-8(fp)
8110deb8:	e0ffff17 	ldw	r3,-4(fp)
8110debc:	10c10715 	stw	r3,1052(r2)
}
8110dec0:	0001883a 	nop
8110dec4:	e037883a 	mov	sp,fp
8110dec8:	df000017 	ldw	fp,0(sp)
8110decc:	dec00104 	addi	sp,sp,4
8110ded0:	f800283a 	ret

8110ded4 <vChangeDefaultRTValue>:

/* Only in MEB_CONFIG */
/* Change the default value of RT - CCD readout time [NFEESIM-UR-447] */
void vChangeDefaultRTValue( TSimucam_MEB *xMeb, float ucValue ) {
8110ded4:	defffd04 	addi	sp,sp,-12
8110ded8:	de00012e 	bgeu	sp,et,8110dee0 <vChangeDefaultRTValue+0xc>
8110dedc:	003b68fa 	trap	3
8110dee0:	df000215 	stw	fp,8(sp)
8110dee4:	df000204 	addi	fp,sp,8
8110dee8:	e13ffe15 	stw	r4,-8(fp)
8110deec:	e17fff15 	stw	r5,-4(fp)
    //bSaveRTSDCard(ucValue);
}
8110def0:	0001883a 	nop
8110def4:	e037883a 	mov	sp,fp
8110def8:	df000017 	ldw	fp,0(sp)
8110defc:	dec00104 	addi	sp,sp,4
8110df00:	f800283a 	ret

8110df04 <vLoadDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Load Default Config Sync - Internal or external */
void vLoadDefaultSyncSource( TSimucam_MEB *xMeb ) {
8110df04:	defffe04 	addi	sp,sp,-8
8110df08:	de00012e 	bgeu	sp,et,8110df10 <vLoadDefaultSyncSource+0xc>
8110df0c:	003b68fa 	trap	3
8110df10:	df000115 	stw	fp,4(sp)
8110df14:	df000104 	addi	fp,sp,4
8110df18:	e13fff15 	stw	r4,-4(fp)
    //bGetSyncSourceSDCard();
    //todo: For now is hardcoded
    xMeb->eSync = sInternal;
8110df1c:	e0bfff17 	ldw	r2,-4(fp)
8110df20:	10010815 	stw	zero,1056(r2)
}
8110df24:	0001883a 	nop
8110df28:	e037883a 	mov	sp,fp
8110df2c:	df000017 	ldw	fp,0(sp)
8110df30:	dec00104 	addi	sp,sp,4
8110df34:	f800283a 	ret

8110df38 <vChangeSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Active Config Sync - Internal or external */
void vChangeSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110df38:	defffd04 	addi	sp,sp,-12
8110df3c:	de00012e 	bgeu	sp,et,8110df44 <vChangeSyncSource+0xc>
8110df40:	003b68fa 	trap	3
8110df44:	df000215 	stw	fp,8(sp)
8110df48:	df000204 	addi	fp,sp,8
8110df4c:	e13ffe15 	stw	r4,-8(fp)
8110df50:	e17fff15 	stw	r5,-4(fp)
    xMeb->eSync = eSource;
8110df54:	e0bffe17 	ldw	r2,-8(fp)
8110df58:	e0ffff17 	ldw	r3,-4(fp)
8110df5c:	10c10815 	stw	r3,1056(r2)
}
8110df60:	0001883a 	nop
8110df64:	e037883a 	mov	sp,fp
8110df68:	df000017 	ldw	fp,0(sp)
8110df6c:	dec00104 	addi	sp,sp,4
8110df70:	f800283a 	ret

8110df74 <vChangeDefaultSyncSource>:

/* Only in MEB_CONFIG */
/* Change the Default Config Sync - Internal or external */
void vChangeDefaultSyncSource( TSimucam_MEB *xMeb, tSimucamSync eSource ) {
8110df74:	defffd04 	addi	sp,sp,-12
8110df78:	de00012e 	bgeu	sp,et,8110df80 <vChangeDefaultSyncSource+0xc>
8110df7c:	003b68fa 	trap	3
8110df80:	df000215 	stw	fp,8(sp)
8110df84:	df000204 	addi	fp,sp,8
8110df88:	e13ffe15 	stw	r4,-8(fp)
8110df8c:	e17fff15 	stw	r5,-4(fp)
    //bSaveSyncSourceSDCard(eSource);
}
8110df90:	0001883a 	nop
8110df94:	e037883a 	mov	sp,fp
8110df98:	df000017 	ldw	fp,0(sp)
8110df9c:	dec00104 	addi	sp,sp,4
8110dfa0:	f800283a 	ret

8110dfa4 <vSetTimeCode>:

/* Any mode */
/* Set the time code of the Simucam */
void vSetTimeCode( TSimucam_MEB *xMeb, unsigned char ucTime ) {
8110dfa4:	defffd04 	addi	sp,sp,-12
8110dfa8:	de00012e 	bgeu	sp,et,8110dfb0 <vSetTimeCode+0xc>
8110dfac:	003b68fa 	trap	3
8110dfb0:	df000215 	stw	fp,8(sp)
8110dfb4:	df000204 	addi	fp,sp,8
8110dfb8:	e13ffe15 	stw	r4,-8(fp)
8110dfbc:	2805883a 	mov	r2,r5
8110dfc0:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucTimeCode = ucTime;
8110dfc4:	e0bffe17 	ldw	r2,-8(fp)
8110dfc8:	e0ffff03 	ldbu	r3,-4(fp)
8110dfcc:	10c10905 	stb	r3,1060(r2)
}
8110dfd0:	0001883a 	nop
8110dfd4:	e037883a 	mov	sp,fp
8110dfd8:	df000017 	ldw	fp,0(sp)
8110dfdc:	dec00104 	addi	sp,sp,4
8110dfe0:	f800283a 	ret

8110dfe4 <vResetTimeCode>:

/* Reset the time code of the Simucam */
void vResetTimeCode( TSimucam_MEB *xMeb ) {
8110dfe4:	defffe04 	addi	sp,sp,-8
8110dfe8:	de00012e 	bgeu	sp,et,8110dff0 <vResetTimeCode+0xc>
8110dfec:	003b68fa 	trap	3
8110dff0:	df000115 	stw	fp,4(sp)
8110dff4:	df000104 	addi	fp,sp,4
8110dff8:	e13fff15 	stw	r4,-4(fp)
    xMeb->ucTimeCode = 0;
8110dffc:	e0bfff17 	ldw	r2,-4(fp)
8110e000:	10010905 	stb	zero,1060(r2)
}
8110e004:	0001883a 	nop
8110e008:	e037883a 	mov	sp,fp
8110e00c:	df000017 	ldw	fp,0(sp)
8110e010:	dec00104 	addi	sp,sp,4
8110e014:	f800283a 	ret

8110e018 <vLoadDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Load Default Config for AutoResetSync */
void vLoadDefaultAutoResetSync( TSimucam_MEB *xMeb ) {
8110e018:	defffe04 	addi	sp,sp,-8
8110e01c:	de00012e 	bgeu	sp,et,8110e024 <vLoadDefaultAutoResetSync+0xc>
8110e020:	003b68fa 	trap	3
8110e024:	df000115 	stw	fp,4(sp)
8110e028:	df000104 	addi	fp,sp,4
8110e02c:	e13fff15 	stw	r4,-4(fp)
    //bGetAutoResetSyncSDCard();
    //todo: For now is hardcoded
    xMeb->bAutoRestSyncMode = TRUE;
8110e030:	e0bfff17 	ldw	r2,-4(fp)
8110e034:	00c00044 	movi	r3,1
8110e038:	10c10a15 	stw	r3,1064(r2)
}
8110e03c:	0001883a 	nop
8110e040:	e037883a 	mov	sp,fp
8110e044:	df000017 	ldw	fp,0(sp)
8110e048:	dec00104 	addi	sp,sp,4
8110e04c:	f800283a 	ret

8110e050 <vChangeAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Config for AutoResetSync*/
void vChangeAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110e050:	defffd04 	addi	sp,sp,-12
8110e054:	de00012e 	bgeu	sp,et,8110e05c <vChangeAutoResetSync+0xc>
8110e058:	003b68fa 	trap	3
8110e05c:	df000215 	stw	fp,8(sp)
8110e060:	df000204 	addi	fp,sp,8
8110e064:	e13ffe15 	stw	r4,-8(fp)
8110e068:	e17fff15 	stw	r5,-4(fp)
    xMeb->bAutoRestSyncMode = bAutoReset;
8110e06c:	e0bffe17 	ldw	r2,-8(fp)
8110e070:	e0ffff17 	ldw	r3,-4(fp)
8110e074:	10c10a15 	stw	r3,1064(r2)
}
8110e078:	0001883a 	nop
8110e07c:	e037883a 	mov	sp,fp
8110e080:	df000017 	ldw	fp,0(sp)
8110e084:	dec00104 	addi	sp,sp,4
8110e088:	f800283a 	ret

8110e08c <vChangeDefaultAutoResetSync>:

/* Only in MEB_CONFIG */
/* Change the Default Config for AutoResetSync */
void vChangeDefaultAutoResetSync( TSimucam_MEB *xMeb, bool bAutoReset ) {
8110e08c:	defffd04 	addi	sp,sp,-12
8110e090:	de00012e 	bgeu	sp,et,8110e098 <vChangeDefaultAutoResetSync+0xc>
8110e094:	003b68fa 	trap	3
8110e098:	df000215 	stw	fp,8(sp)
8110e09c:	df000204 	addi	fp,sp,8
8110e0a0:	e13ffe15 	stw	r4,-8(fp)
8110e0a4:	e17fff15 	stw	r5,-4(fp)
    //bSaveAutoResetSyncSDCard(bAutoReset);
}
8110e0a8:	0001883a 	nop
8110e0ac:	e037883a 	mov	sp,fp
8110e0b0:	df000017 	ldw	fp,0(sp)
8110e0b4:	dec00104 	addi	sp,sp,4
8110e0b8:	f800283a 	ret

8110e0bc <vLoadDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Load Default Config for IdNFEEMaster */
void vLoadDefaultIdNFEEMaster( TSimucam_MEB *xMeb ) {
8110e0bc:	defffe04 	addi	sp,sp,-8
8110e0c0:	de00012e 	bgeu	sp,et,8110e0c8 <vLoadDefaultIdNFEEMaster+0xc>
8110e0c4:	003b68fa 	trap	3
8110e0c8:	df000115 	stw	fp,4(sp)
8110e0cc:	df000104 	addi	fp,sp,4
8110e0d0:	e13fff15 	stw	r4,-4(fp)
    //bGetIdNFEEMasterSDCard();
    //todo: For now is hardcoded
    xMeb->ucIdNFEEMaster = 0;
8110e0d4:	e0bfff17 	ldw	r2,-4(fp)
8110e0d8:	10010945 	stb	zero,1061(r2)
}
8110e0dc:	0001883a 	nop
8110e0e0:	e037883a 	mov	sp,fp
8110e0e4:	df000017 	ldw	fp,0(sp)
8110e0e8:	dec00104 	addi	sp,sp,4
8110e0ec:	f800283a 	ret

8110e0f0 <vChangeIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Config for IdNFEEMaster*/
void vChangeIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110e0f0:	defffd04 	addi	sp,sp,-12
8110e0f4:	de00012e 	bgeu	sp,et,8110e0fc <vChangeIdNFEEMaster+0xc>
8110e0f8:	003b68fa 	trap	3
8110e0fc:	df000215 	stw	fp,8(sp)
8110e100:	df000204 	addi	fp,sp,8
8110e104:	e13ffe15 	stw	r4,-8(fp)
8110e108:	2805883a 	mov	r2,r5
8110e10c:	e0bfff05 	stb	r2,-4(fp)
    xMeb->ucIdNFEEMaster = ucIdMaster;
8110e110:	e0bffe17 	ldw	r2,-8(fp)
8110e114:	e0ffff03 	ldbu	r3,-4(fp)
8110e118:	10c10945 	stb	r3,1061(r2)
}
8110e11c:	0001883a 	nop
8110e120:	e037883a 	mov	sp,fp
8110e124:	df000017 	ldw	fp,0(sp)
8110e128:	dec00104 	addi	sp,sp,4
8110e12c:	f800283a 	ret

8110e130 <vChangeDefaultIdNFEEMaster>:

/* Only in MEB_CONFIG */
/* Change the Default Config for IdNFEEMaster */
void vChangeDefaultIdNFEEMaster( TSimucam_MEB *xMeb, unsigned char ucIdMaster ) {
8110e130:	defffd04 	addi	sp,sp,-12
8110e134:	de00012e 	bgeu	sp,et,8110e13c <vChangeDefaultIdNFEEMaster+0xc>
8110e138:	003b68fa 	trap	3
8110e13c:	df000215 	stw	fp,8(sp)
8110e140:	df000204 	addi	fp,sp,8
8110e144:	e13ffe15 	stw	r4,-8(fp)
8110e148:	2805883a 	mov	r2,r5
8110e14c:	e0bfff05 	stb	r2,-4(fp)
    //bSaveIdNFEEMasterSDCard(ucIdMaster);
}
8110e150:	0001883a 	nop
8110e154:	e037883a 	mov	sp,fp
8110e158:	df000017 	ldw	fp,0(sp)
8110e15c:	dec00104 	addi	sp,sp,4
8110e160:	f800283a 	ret

8110e164 <vSyncReset>:

/* Any mode */
/* Synchronization Reset */
void vSyncReset( TSimucam_MEB *xMeb, float ufSynchDelay ) {
8110e164:	defffc04 	addi	sp,sp,-16
8110e168:	de00012e 	bgeu	sp,et,8110e170 <vSyncReset+0xc>
8110e16c:	003b68fa 	trap	3
8110e170:	dfc00315 	stw	ra,12(sp)
8110e174:	df000215 	stw	fp,8(sp)
8110e178:	df000204 	addi	fp,sp,8
8110e17c:	e13ffe15 	stw	r4,-8(fp)
8110e180:	e17fff15 	stw	r5,-4(fp)
    // Stop all transmission

    // Put all NFEE in Stand-by mode, if not in Config mode

    // Reset the time code
    vResetTimeCode(xMeb);
8110e184:	e13ffe17 	ldw	r4,-8(fp)
8110e188:	110dfe40 	call	8110dfe4 <vResetTimeCode>

    // Release a synchronization signal

    // Start new cycle

}
8110e18c:	0001883a 	nop
8110e190:	e037883a 	mov	sp,fp
8110e194:	dfc00117 	ldw	ra,4(sp)
8110e198:	df000017 	ldw	fp,0(sp)
8110e19c:	dec00204 	addi	sp,sp,8
8110e1a0:	f800283a 	ret

8110e1a4 <bSDcardIsPresent>:
#include "sdcard_file_manager.h"


TSDHandle xSdHandle;

bool bSDcardIsPresent( void ){
8110e1a4:	defffe04 	addi	sp,sp,-8
8110e1a8:	de00012e 	bgeu	sp,et,8110e1b0 <bSDcardIsPresent+0xc>
8110e1ac:	003b68fa 	trap	3
8110e1b0:	dfc00115 	stw	ra,4(sp)
8110e1b4:	df000015 	stw	fp,0(sp)
8110e1b8:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_Present();
8110e1bc:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
}
8110e1c0:	e037883a 	mov	sp,fp
8110e1c4:	dfc00117 	ldw	ra,4(sp)
8110e1c8:	df000017 	ldw	fp,0(sp)
8110e1cc:	dec00204 	addi	sp,sp,8
8110e1d0:	f800283a 	ret

8110e1d4 <bSDcardFAT16Check>:

bool bSDcardFAT16Check( void ){
8110e1d4:	defffe04 	addi	sp,sp,-8
8110e1d8:	de00012e 	bgeu	sp,et,8110e1e0 <bSDcardFAT16Check+0xc>
8110e1dc:	003b68fa 	trap	3
8110e1e0:	dfc00115 	stw	ra,4(sp)
8110e1e4:	df000015 	stw	fp,0(sp)
8110e1e8:	d839883a 	mov	fp,sp
	return alt_up_sd_card_is_FAT16();
8110e1ec:	113369c0 	call	8113369c <alt_up_sd_card_is_FAT16>
}
8110e1f0:	e037883a 	mov	sp,fp
8110e1f4:	dfc00117 	ldw	ra,4(sp)
8110e1f8:	df000017 	ldw	fp,0(sp)
8110e1fc:	dec00204 	addi	sp,sp,8
8110e200:	f800283a 	ret

8110e204 <bInitializeSDCard>:

bool bInitializeSDCard( void ){
8110e204:	defffd04 	addi	sp,sp,-12
8110e208:	de00012e 	bgeu	sp,et,8110e210 <bInitializeSDCard+0xc>
8110e20c:	003b68fa 	trap	3
8110e210:	dfc00215 	stw	ra,8(sp)
8110e214:	df000115 	stw	fp,4(sp)
8110e218:	df000104 	addi	fp,sp,4
	bool bSucess = FALSE;
8110e21c:	e03fff15 	stw	zero,-4(fp)
	xSdHandle.deviceHandle = NULL;
8110e220:	d0205d15 	stw	zero,-32396(gp)

	xSdHandle.deviceHandle = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
8110e224:	01204534 	movhi	r4,33044
8110e228:	212fd404 	addi	r4,r4,-16560
8110e22c:	113350c0 	call	8113350c <alt_up_sd_card_open_dev>
8110e230:	d0a05d15 	stw	r2,-32396(gp)
	if ( xSdHandle.deviceHandle != NULL ) {
8110e234:	d0a05d17 	ldw	r2,-32396(gp)
8110e238:	10002226 	beq	r2,zero,8110e2c4 <bInitializeSDCard+0xc0>

		bSucess = bSDcardIsPresent();
8110e23c:	110e1a40 	call	8110e1a4 <bSDcardIsPresent>
8110e240:	e0bfff15 	stw	r2,-4(fp)
		if ( bSucess ) {
8110e244:	e0bfff17 	ldw	r2,-4(fp)
8110e248:	10001626 	beq	r2,zero,8110e2a4 <bInitializeSDCard+0xa0>
			bSucess = bSDcardFAT16Check();
8110e24c:	110e1d40 	call	8110e1d4 <bSDcardFAT16Check>
8110e250:	e0bfff15 	stw	r2,-4(fp)
			if ( bSucess ) {
8110e254:	e0bfff17 	ldw	r2,-4(fp)
8110e258:	10000a26 	beq	r2,zero,8110e284 <bInitializeSDCard+0x80>
				xSdHandle.connected = TRUE;
8110e25c:	00800044 	movi	r2,1
8110e260:	d0a05c15 	stw	r2,-32400(gp)
				debug(fp, "SD is up.\r\n");
8110e264:	d0a04d17 	ldw	r2,-32460(gp)
8110e268:	100f883a 	mov	r7,r2
8110e26c:	018002c4 	movi	r6,11
8110e270:	01400044 	movi	r5,1
8110e274:	01204534 	movhi	r4,33044
8110e278:	212fdf04 	addi	r4,r4,-16516
8110e27c:	11104380 	call	81110438 <fwrite>
8110e280:	00001806 	br	8110e2e4 <bInitializeSDCard+0xe0>
			} else {
				/* SD isn't in FAT16 format*/
				debug(fp, "SD Card should be formated in FAT16.\r\n");
8110e284:	d0a04d17 	ldw	r2,-32460(gp)
8110e288:	100f883a 	mov	r7,r2
8110e28c:	01800984 	movi	r6,38
8110e290:	01400044 	movi	r5,1
8110e294:	01204534 	movhi	r4,33044
8110e298:	212fe204 	addi	r4,r4,-16504
8110e29c:	11104380 	call	81110438 <fwrite>
8110e2a0:	00001006 	br	8110e2e4 <bInitializeSDCard+0xe0>
			}
		} else {
			/* There's no SDCard in the slot */
			debug(fp, "There is no SD in the slot.\r\n");
8110e2a4:	d0a04d17 	ldw	r2,-32460(gp)
8110e2a8:	100f883a 	mov	r7,r2
8110e2ac:	01800744 	movi	r6,29
8110e2b0:	01400044 	movi	r5,1
8110e2b4:	01204534 	movhi	r4,33044
8110e2b8:	212fec04 	addi	r4,r4,-16464
8110e2bc:	11104380 	call	81110438 <fwrite>
8110e2c0:	00000806 	br	8110e2e4 <bInitializeSDCard+0xe0>
		}

	} else {
		/* Unable to open the SDCard device. */
		bSucess = FALSE;
8110e2c4:	e03fff15 	stw	zero,-4(fp)
		debug(fp, "Unable to open the SDCard device.\r\n");
8110e2c8:	d0a04d17 	ldw	r2,-32460(gp)
8110e2cc:	100f883a 	mov	r7,r2
8110e2d0:	018008c4 	movi	r6,35
8110e2d4:	01400044 	movi	r5,1
8110e2d8:	01204534 	movhi	r4,33044
8110e2dc:	212ff404 	addi	r4,r4,-16432
8110e2e0:	11104380 	call	81110438 <fwrite>
	}

	return bSucess;
8110e2e4:	e0bfff17 	ldw	r2,-4(fp)
}
8110e2e8:	e037883a 	mov	sp,fp
8110e2ec:	dfc00117 	ldw	ra,4(sp)
8110e2f0:	df000017 	ldw	fp,0(sp)
8110e2f4:	dec00204 	addi	sp,sp,8
8110e2f8:	f800283a 	ret

8110e2fc <siOpenFile>:
	}
	return (char)readCharacter;
}
*/

short int siOpenFile( char *filename ) {
8110e2fc:	defffd04 	addi	sp,sp,-12
8110e300:	de00012e 	bgeu	sp,et,8110e308 <siOpenFile+0xc>
8110e304:	003b68fa 	trap	3
8110e308:	dfc00215 	stw	ra,8(sp)
8110e30c:	df000115 	stw	fp,4(sp)
8110e310:	df000104 	addi	fp,sp,4
8110e314:	e13fff15 	stw	r4,-4(fp)
	return alt_up_sd_card_fopen( filename, FALSE );
8110e318:	000b883a 	mov	r5,zero
8110e31c:	e13fff17 	ldw	r4,-4(fp)
8110e320:	1133ba80 	call	81133ba8 <alt_up_sd_card_fopen>
}
8110e324:	e037883a 	mov	sp,fp
8110e328:	dfc00117 	ldw	ra,4(sp)
8110e32c:	df000017 	ldw	fp,0(sp)
8110e330:	dec00204 	addi	sp,sp,8
8110e334:	f800283a 	ret

8110e338 <siCloseFile>:

bool siCloseFile( short int file_handle ) {
8110e338:	defffd04 	addi	sp,sp,-12
8110e33c:	de00012e 	bgeu	sp,et,8110e344 <siCloseFile+0xc>
8110e340:	003b68fa 	trap	3
8110e344:	dfc00215 	stw	ra,8(sp)
8110e348:	df000115 	stw	fp,4(sp)
8110e34c:	df000104 	addi	fp,sp,4
8110e350:	2005883a 	mov	r2,r4
8110e354:	e0bfff0d 	sth	r2,-4(fp)
	return alt_up_sd_card_fclose( file_handle );
8110e358:	e0bfff0f 	ldh	r2,-4(fp)
8110e35c:	1009883a 	mov	r4,r2
8110e360:	11349f40 	call	811349f4 <alt_up_sd_card_fclose>
}
8110e364:	e037883a 	mov	sp,fp
8110e368:	dfc00117 	ldw	ra,4(sp)
8110e36c:	df000017 	ldw	fp,0(sp)
8110e370:	dec00204 	addi	sp,sp,8
8110e374:	f800283a 	ret

8110e378 <cGetNextChar>:

char cGetNextChar( short int file_handle ) {
8110e378:	defffd04 	addi	sp,sp,-12
8110e37c:	de00012e 	bgeu	sp,et,8110e384 <cGetNextChar+0xc>
8110e380:	003b68fa 	trap	3
8110e384:	dfc00215 	stw	ra,8(sp)
8110e388:	df000115 	stw	fp,4(sp)
8110e38c:	df000104 	addi	fp,sp,4
8110e390:	2005883a 	mov	r2,r4
8110e394:	e0bfff0d 	sth	r2,-4(fp)
	return (char)alt_up_sd_card_read( file_handle );
8110e398:	e0bfff0f 	ldh	r2,-4(fp)
8110e39c:	1009883a 	mov	r4,r2
8110e3a0:	113404c0 	call	8113404c <alt_up_sd_card_read>
}
8110e3a4:	e037883a 	mov	sp,fp
8110e3a8:	dfc00117 	ldw	ra,4(sp)
8110e3ac:	df000017 	ldw	fp,0(sp)
8110e3b0:	dec00204 	addi	sp,sp,8
8110e3b4:	f800283a 	ret

8110e3b8 <bTestSimucamCriticalHW>:


#include "test_module_simucam.h"

bool bTestSimucamCriticalHW( void )
{
8110e3b8:	deffff04 	addi	sp,sp,-4
8110e3bc:	de00012e 	bgeu	sp,et,8110e3c4 <bTestSimucamCriticalHW+0xc>
8110e3c0:	003b68fa 	trap	3
8110e3c4:	df000015 	stw	fp,0(sp)
8110e3c8:	d839883a 	mov	fp,sp
	/*
	 * Verificar com Fran�a quais testes podemos realizar aqui
	 * SDcard para criar logs e pegar defaults
	 */

	return TRUE;
8110e3cc:	00800044 	movi	r2,1
}
8110e3d0:	e037883a 	mov	sp,fp
8110e3d4:	df000017 	ldw	fp,0(sp)
8110e3d8:	dec00104 	addi	sp,sp,4
8110e3dc:	f800283a 	ret

8110e3e0 <_reg_write>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_write(int BASE_ADD, alt_32 REG_ADD, alt_32 REG_Dado) {
8110e3e0:	defffc04 	addi	sp,sp,-16
8110e3e4:	de00012e 	bgeu	sp,et,8110e3ec <_reg_write+0xc>
8110e3e8:	003b68fa 	trap	3
8110e3ec:	df000315 	stw	fp,12(sp)
8110e3f0:	df000304 	addi	fp,sp,12
8110e3f4:	e13ffd15 	stw	r4,-12(fp)
8110e3f8:	e17ffe15 	stw	r5,-8(fp)
8110e3fc:	e1bfff15 	stw	r6,-4(fp)

	IOWR_32DIRECT(BASE_ADD, REG_ADD << 2, REG_Dado);
8110e400:	e0bffe17 	ldw	r2,-8(fp)
8110e404:	1085883a 	add	r2,r2,r2
8110e408:	1085883a 	add	r2,r2,r2
8110e40c:	1007883a 	mov	r3,r2
8110e410:	e0bffd17 	ldw	r2,-12(fp)
8110e414:	1885883a 	add	r2,r3,r2
8110e418:	1007883a 	mov	r3,r2
8110e41c:	e0bfff17 	ldw	r2,-4(fp)
8110e420:	18800035 	stwio	r2,0(r3)
	return 1;
8110e424:	00800044 	movi	r2,1

}
8110e428:	e037883a 	mov	sp,fp
8110e42c:	df000017 	ldw	fp,0(sp)
8110e430:	dec00104 	addi	sp,sp,4
8110e434:	f800283a 	ret

8110e438 <_reg_read>:
 *
 * @retval 1 : Sucesso 
 *
 */

alt_32 _reg_read(int BASE_ADD, alt_32 REG_ADD, alt_32 *REG_Dado) {
8110e438:	defffc04 	addi	sp,sp,-16
8110e43c:	de00012e 	bgeu	sp,et,8110e444 <_reg_read+0xc>
8110e440:	003b68fa 	trap	3
8110e444:	df000315 	stw	fp,12(sp)
8110e448:	df000304 	addi	fp,sp,12
8110e44c:	e13ffd15 	stw	r4,-12(fp)
8110e450:	e17ffe15 	stw	r5,-8(fp)
8110e454:	e1bfff15 	stw	r6,-4(fp)

	*REG_Dado = IORD_32DIRECT(BASE_ADD, REG_ADD << 2);
8110e458:	e0bffe17 	ldw	r2,-8(fp)
8110e45c:	1085883a 	add	r2,r2,r2
8110e460:	1085883a 	add	r2,r2,r2
8110e464:	1007883a 	mov	r3,r2
8110e468:	e0bffd17 	ldw	r2,-12(fp)
8110e46c:	1885883a 	add	r2,r3,r2
8110e470:	10c00037 	ldwio	r3,0(r2)
8110e474:	e0bfff17 	ldw	r2,-4(fp)
8110e478:	10c00015 	stw	r3,0(r2)
	return 1;
8110e47c:	00800044 	movi	r2,1

}
8110e480:	e037883a 	mov	sp,fp
8110e484:	df000017 	ldw	fp,0(sp)
8110e488:	dec00104 	addi	sp,sp,4
8110e48c:	f800283a 	ret

8110e490 <_print_codec_status>:
 * @param [in] codec_status
 * *
 * @retval 1 : Sucesso
 *
 */
void _print_codec_status(int codec_status) {
8110e490:	defffa04 	addi	sp,sp,-24
8110e494:	de00012e 	bgeu	sp,et,8110e49c <_print_codec_status+0xc>
8110e498:	003b68fa 	trap	3
8110e49c:	dfc00515 	stw	ra,20(sp)
8110e4a0:	df000415 	stw	fp,16(sp)
8110e4a4:	df000404 	addi	fp,sp,16
8110e4a8:	e13fff15 	stw	r4,-4(fp)
	int started = (int) ((codec_status >> 6) & 1);
8110e4ac:	e0bfff17 	ldw	r2,-4(fp)
8110e4b0:	1005d1ba 	srai	r2,r2,6
8110e4b4:	1080004c 	andi	r2,r2,1
8110e4b8:	e0bffc15 	stw	r2,-16(fp)
	int connecting = (int) ((codec_status >> 5) & 1);
8110e4bc:	e0bfff17 	ldw	r2,-4(fp)
8110e4c0:	1005d17a 	srai	r2,r2,5
8110e4c4:	1080004c 	andi	r2,r2,1
8110e4c8:	e0bffd15 	stw	r2,-12(fp)
	int running = (int) ((codec_status >> 4) & 1);
8110e4cc:	e0bfff17 	ldw	r2,-4(fp)
8110e4d0:	1005d13a 	srai	r2,r2,4
8110e4d4:	1080004c 	andi	r2,r2,1
8110e4d8:	e0bffe15 	stw	r2,-8(fp)

#ifdef DEBUG_ON
	sprintf(cDebugBuffer, "-------- link status \n");
8110e4dc:	00e04534 	movhi	r3,33044
8110e4e0:	18facb04 	addi	r3,r3,-5332
8110e4e4:	00a04534 	movhi	r2,33044
8110e4e8:	10affd04 	addi	r2,r2,-16396
8110e4ec:	1009883a 	mov	r4,r2
8110e4f0:	008005c4 	movi	r2,23
8110e4f4:	100d883a 	mov	r6,r2
8110e4f8:	200b883a 	mov	r5,r4
8110e4fc:	1809883a 	mov	r4,r3
8110e500:	1110e4c0 	call	81110e4c <memcpy>
	debug(fp, cDebugBuffer);
8110e504:	d0a04d17 	ldw	r2,-32460(gp)
8110e508:	01604534 	movhi	r5,33044
8110e50c:	297acb04 	addi	r5,r5,-5332
8110e510:	1009883a 	mov	r4,r2
8110e514:	110fe4c0 	call	8110fe4c <fprintf>
	sprintf(cDebugBuffer, "Link started    : %s \n", (started == 1) ? "S" : "N");
8110e518:	e0bffc17 	ldw	r2,-16(fp)
8110e51c:	10800058 	cmpnei	r2,r2,1
8110e520:	1000031e 	bne	r2,zero,8110e530 <_print_codec_status+0xa0>
8110e524:	00a04534 	movhi	r2,33044
8110e528:	10b00304 	addi	r2,r2,-16372
8110e52c:	00000206 	br	8110e538 <_print_codec_status+0xa8>
8110e530:	00a04534 	movhi	r2,33044
8110e534:	10b00404 	addi	r2,r2,-16368
8110e538:	100d883a 	mov	r6,r2
8110e53c:	01604534 	movhi	r5,33044
8110e540:	29700504 	addi	r5,r5,-16364
8110e544:	01204534 	movhi	r4,33044
8110e548:	213acb04 	addi	r4,r4,-5332
8110e54c:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
8110e550:	d0a04d17 	ldw	r2,-32460(gp)
8110e554:	01604534 	movhi	r5,33044
8110e558:	297acb04 	addi	r5,r5,-5332
8110e55c:	1009883a 	mov	r4,r2
8110e560:	110fe4c0 	call	8110fe4c <fprintf>
	sprintf(cDebugBuffer, "Link connecting : %s \n", (connecting == 1) ? "S" : "N");
8110e564:	e0bffd17 	ldw	r2,-12(fp)
8110e568:	10800058 	cmpnei	r2,r2,1
8110e56c:	1000031e 	bne	r2,zero,8110e57c <_print_codec_status+0xec>
8110e570:	00a04534 	movhi	r2,33044
8110e574:	10b00304 	addi	r2,r2,-16372
8110e578:	00000206 	br	8110e584 <_print_codec_status+0xf4>
8110e57c:	00a04534 	movhi	r2,33044
8110e580:	10b00404 	addi	r2,r2,-16368
8110e584:	100d883a 	mov	r6,r2
8110e588:	01604534 	movhi	r5,33044
8110e58c:	29700b04 	addi	r5,r5,-16340
8110e590:	01204534 	movhi	r4,33044
8110e594:	213acb04 	addi	r4,r4,-5332
8110e598:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
8110e59c:	d0a04d17 	ldw	r2,-32460(gp)
8110e5a0:	01604534 	movhi	r5,33044
8110e5a4:	297acb04 	addi	r5,r5,-5332
8110e5a8:	1009883a 	mov	r4,r2
8110e5ac:	110fe4c0 	call	8110fe4c <fprintf>
	sprintf(cDebugBuffer, "Link running    : %s \n", (running == 1) ? "S" : "N");
8110e5b0:	e0bffe17 	ldw	r2,-8(fp)
8110e5b4:	10800058 	cmpnei	r2,r2,1
8110e5b8:	1000031e 	bne	r2,zero,8110e5c8 <_print_codec_status+0x138>
8110e5bc:	00a04534 	movhi	r2,33044
8110e5c0:	10b00304 	addi	r2,r2,-16372
8110e5c4:	00000206 	br	8110e5d0 <_print_codec_status+0x140>
8110e5c8:	00a04534 	movhi	r2,33044
8110e5cc:	10b00404 	addi	r2,r2,-16368
8110e5d0:	100d883a 	mov	r6,r2
8110e5d4:	01604534 	movhi	r5,33044
8110e5d8:	29701104 	addi	r5,r5,-16316
8110e5dc:	01204534 	movhi	r4,33044
8110e5e0:	213acb04 	addi	r4,r4,-5332
8110e5e4:	11115b40 	call	811115b4 <sprintf>
	debug(fp, cDebugBuffer);
8110e5e8:	d0a04d17 	ldw	r2,-32460(gp)
8110e5ec:	01604534 	movhi	r5,33044
8110e5f0:	297acb04 	addi	r5,r5,-5332
8110e5f4:	1009883a 	mov	r4,r2
8110e5f8:	110fe4c0 	call	8110fe4c <fprintf>
	sprintf(cDebugBuffer, "--------  \n");
8110e5fc:	00a04534 	movhi	r2,33044
8110e600:	10bacb04 	addi	r2,r2,-5332
8110e604:	00c00b44 	movi	r3,45
8110e608:	10c00005 	stb	r3,0(r2)
8110e60c:	00c00b44 	movi	r3,45
8110e610:	10c00045 	stb	r3,1(r2)
8110e614:	00c00b44 	movi	r3,45
8110e618:	10c00085 	stb	r3,2(r2)
8110e61c:	00c00b44 	movi	r3,45
8110e620:	10c000c5 	stb	r3,3(r2)
8110e624:	00c00b44 	movi	r3,45
8110e628:	10c00105 	stb	r3,4(r2)
8110e62c:	00c00b44 	movi	r3,45
8110e630:	10c00145 	stb	r3,5(r2)
8110e634:	00c00b44 	movi	r3,45
8110e638:	10c00185 	stb	r3,6(r2)
8110e63c:	00c00b44 	movi	r3,45
8110e640:	10c001c5 	stb	r3,7(r2)
8110e644:	00c00804 	movi	r3,32
8110e648:	10c00205 	stb	r3,8(r2)
8110e64c:	00c00804 	movi	r3,32
8110e650:	10c00245 	stb	r3,9(r2)
8110e654:	00c00284 	movi	r3,10
8110e658:	10c00285 	stb	r3,10(r2)
8110e65c:	100002c5 	stb	zero,11(r2)
	debug(fp, cDebugBuffer);
8110e660:	d0a04d17 	ldw	r2,-32460(gp)
8110e664:	01604534 	movhi	r5,33044
8110e668:	297acb04 	addi	r5,r5,-5332
8110e66c:	1009883a 	mov	r4,r2
8110e670:	110fe4c0 	call	8110fe4c <fprintf>
#endif
}
8110e674:	0001883a 	nop
8110e678:	e037883a 	mov	sp,fp
8110e67c:	dfc00117 	ldw	ra,4(sp)
8110e680:	df000017 	ldw	fp,0(sp)
8110e684:	dec00204 	addi	sp,sp,8
8110e688:	f800283a 	ret

8110e68c <_split_codec_status>:
 * *
 * @retval 1 : Sucesso
 *
 */
void _split_codec_status(int codec_status, int *started, int *connecting,
		int *running) {
8110e68c:	defffb04 	addi	sp,sp,-20
8110e690:	de00012e 	bgeu	sp,et,8110e698 <_split_codec_status+0xc>
8110e694:	003b68fa 	trap	3
8110e698:	df000415 	stw	fp,16(sp)
8110e69c:	df000404 	addi	fp,sp,16
8110e6a0:	e13ffc15 	stw	r4,-16(fp)
8110e6a4:	e17ffd15 	stw	r5,-12(fp)
8110e6a8:	e1bffe15 	stw	r6,-8(fp)
8110e6ac:	e1ffff15 	stw	r7,-4(fp)
	*started = (int) ((codec_status >> 6) & 1);
8110e6b0:	e0bffc17 	ldw	r2,-16(fp)
8110e6b4:	1005d1ba 	srai	r2,r2,6
8110e6b8:	10c0004c 	andi	r3,r2,1
8110e6bc:	e0bffd17 	ldw	r2,-12(fp)
8110e6c0:	10c00015 	stw	r3,0(r2)
	*connecting = (int) ((codec_status >> 5) & 1);
8110e6c4:	e0bffc17 	ldw	r2,-16(fp)
8110e6c8:	1005d17a 	srai	r2,r2,5
8110e6cc:	10c0004c 	andi	r3,r2,1
8110e6d0:	e0bffe17 	ldw	r2,-8(fp)
8110e6d4:	10c00015 	stw	r3,0(r2)
	*running = (int) ((codec_status >> 4) & 1);
8110e6d8:	e0bffc17 	ldw	r2,-16(fp)
8110e6dc:	1005d13a 	srai	r2,r2,4
8110e6e0:	10c0004c 	andi	r3,r2,1
8110e6e4:	e0bfff17 	ldw	r2,-4(fp)
8110e6e8:	10c00015 	stw	r3,0(r2)
}
8110e6ec:	0001883a 	nop
8110e6f0:	e037883a 	mov	sp,fp
8110e6f4:	df000017 	ldw	fp,0(sp)
8110e6f8:	dec00104 	addi	sp,sp,4
8110e6fc:	f800283a 	ret

8110e700 <aatoh>:
 * @param [in] &char[n]
 * *
 * @retval INT8U of hecadecimal value
 *
 */
alt_u8 aatoh(alt_u8 *buffer) {
8110e700:	defffc04 	addi	sp,sp,-16
8110e704:	de00012e 	bgeu	sp,et,8110e70c <aatoh+0xc>
8110e708:	003b68fa 	trap	3
8110e70c:	df000315 	stw	fp,12(sp)
8110e710:	df000304 	addi	fp,sp,12
8110e714:	e13fff15 	stw	r4,-4(fp)
	alt_u8* a;
	alt_u8 v;
	a = buffer;
8110e718:	e0bfff17 	ldw	r2,-4(fp)
8110e71c:	e0bffd15 	stw	r2,-12(fp)
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110e720:	e0bffd17 	ldw	r2,-12(fp)
8110e724:	10c00003 	ldbu	r3,0(r2)
8110e728:	e0bffd17 	ldw	r2,-12(fp)
8110e72c:	10800003 	ldbu	r2,0(r2)
8110e730:	10803fcc 	andi	r2,r2,255
8110e734:	10800eb0 	cmpltui	r2,r2,58
8110e738:	1000021e 	bne	r2,zero,8110e744 <aatoh+0x44>
8110e73c:	00800dc4 	movi	r2,55
8110e740:	00000106 	br	8110e748 <aatoh+0x48>
8110e744:	00800c04 	movi	r2,48
8110e748:	1885c83a 	sub	r2,r3,r2
8110e74c:	1004913a 	slli	r2,r2,4
8110e750:	1009883a 	mov	r4,r2
			+ (a[1] - (48 + 7 * (a[1] > 57)));
8110e754:	e0bffd17 	ldw	r2,-12(fp)
8110e758:	10800044 	addi	r2,r2,1
8110e75c:	10c00003 	ldbu	r3,0(r2)
8110e760:	e0bffd17 	ldw	r2,-12(fp)
8110e764:	10800044 	addi	r2,r2,1
8110e768:	10800003 	ldbu	r2,0(r2)
 */
alt_u8 aatoh(alt_u8 *buffer) {
	alt_u8* a;
	alt_u8 v;
	a = buffer;
	v = ((a[0] - (48 + 7 * (a[0] > 57))) << 4)
8110e76c:	10803fcc 	andi	r2,r2,255
8110e770:	10800eb0 	cmpltui	r2,r2,58
8110e774:	1000021e 	bne	r2,zero,8110e780 <aatoh+0x80>
8110e778:	00800dc4 	movi	r2,55
8110e77c:	00000106 	br	8110e784 <aatoh+0x84>
8110e780:	00800c04 	movi	r2,48
8110e784:	1885c83a 	sub	r2,r3,r2
8110e788:	2085883a 	add	r2,r4,r2
8110e78c:	e0bffe05 	stb	r2,-8(fp)
			+ (a[1] - (48 + 7 * (a[1] > 57)));
	return v;
8110e790:	e0bffe03 	ldbu	r2,-8(fp)
}
8110e794:	e037883a 	mov	sp,fp
8110e798:	df000017 	ldw	fp,0(sp)
8110e79c:	dec00104 	addi	sp,sp,4
8110e7a0:	f800283a 	ret

8110e7a4 <Verif_Error>:
 * *
 * @retval int
 *
 */

alt_u8 Verif_Error(alt_u8 error_code) {
8110e7a4:	defffd04 	addi	sp,sp,-12
8110e7a8:	de00012e 	bgeu	sp,et,8110e7b0 <Verif_Error+0xc>
8110e7ac:	003b68fa 	trap	3
8110e7b0:	dfc00215 	stw	ra,8(sp)
8110e7b4:	df000115 	stw	fp,4(sp)
8110e7b8:	df000104 	addi	fp,sp,4
8110e7bc:	2005883a 	mov	r2,r4
8110e7c0:	e0bfff05 	stb	r2,-4(fp)
	if (!error_code) {
8110e7c4:	e0bfff03 	ldbu	r2,-4(fp)
8110e7c8:	1000091e 	bne	r2,zero,8110e7f0 <Verif_Error+0x4c>
#ifdef DEBUG_ON
	debug(fp, "ERROR\n\r");
8110e7cc:	d0a04d17 	ldw	r2,-32460(gp)
8110e7d0:	100f883a 	mov	r7,r2
8110e7d4:	018001c4 	movi	r6,7
8110e7d8:	01400044 	movi	r5,1
8110e7dc:	01204534 	movhi	r4,33044
8110e7e0:	21301704 	addi	r4,r4,-16292
8110e7e4:	11104380 	call	81110438 <fwrite>
#endif
		return 0;
8110e7e8:	0005883a 	mov	r2,zero
8110e7ec:	00000106 	br	8110e7f4 <Verif_Error+0x50>
	} else
		return 1;
8110e7f0:	00800044 	movi	r2,1
}
8110e7f4:	e037883a 	mov	sp,fp
8110e7f8:	dfc00117 	ldw	ra,4(sp)
8110e7fc:	df000017 	ldw	fp,0(sp)
8110e800:	dec00204 	addi	sp,sp,8
8110e804:	f800283a 	ret

8110e808 <toInt>:
 * *
 * @retval int
 *
 */

alt_u8 toInt(alt_u8 ascii) {
8110e808:	defffe04 	addi	sp,sp,-8
8110e80c:	de00012e 	bgeu	sp,et,8110e814 <toInt+0xc>
8110e810:	003b68fa 	trap	3
8110e814:	df000115 	stw	fp,4(sp)
8110e818:	df000104 	addi	fp,sp,4
8110e81c:	2005883a 	mov	r2,r4
8110e820:	e0bfff05 	stb	r2,-4(fp)
	return (int) ascii - 48;
8110e824:	e0bfff03 	ldbu	r2,-4(fp)
8110e828:	10bff404 	addi	r2,r2,-48
}
8110e82c:	e037883a 	mov	sp,fp
8110e830:	df000017 	ldw	fp,0(sp)
8110e834:	dec00104 	addi	sp,sp,4
8110e838:	f800283a 	ret

8110e83c <__divsf3>:
8110e83c:	defff504 	addi	sp,sp,-44
8110e840:	200cd5fa 	srli	r6,r4,23
8110e844:	de00012e 	bgeu	sp,et,8110e84c <__divsf3+0x10>
8110e848:	003b68fa 	trap	3
8110e84c:	dcc00415 	stw	r19,16(sp)
8110e850:	2026d7fa 	srli	r19,r4,31
8110e854:	00c02034 	movhi	r3,128
8110e858:	dd800715 	stw	r22,28(sp)
8110e85c:	dd000515 	stw	r20,20(sp)
8110e860:	dc800315 	stw	r18,12(sp)
8110e864:	18ffffc4 	addi	r3,r3,-1
8110e868:	dfc00a15 	stw	ra,40(sp)
8110e86c:	df000915 	stw	fp,36(sp)
8110e870:	ddc00815 	stw	r23,32(sp)
8110e874:	dd400615 	stw	r21,24(sp)
8110e878:	dc400215 	stw	r17,8(sp)
8110e87c:	dc000115 	stw	r16,4(sp)
8110e880:	35003fcc 	andi	r20,r6,255
8110e884:	1924703a 	and	r18,r3,r4
8110e888:	9d803fcc 	andi	r22,r19,255
8110e88c:	a0005226 	beq	r20,zero,8110e9d8 <__divsf3+0x19c>
8110e890:	00803fc4 	movi	r2,255
8110e894:	a0802e26 	beq	r20,r2,8110e950 <__divsf3+0x114>
8110e898:	91002034 	orhi	r4,r18,128
8110e89c:	202490fa 	slli	r18,r4,3
8110e8a0:	a53fe044 	addi	r20,r20,-127
8110e8a4:	0021883a 	mov	r16,zero
8110e8a8:	002f883a 	mov	r23,zero
8110e8ac:	280cd5fa 	srli	r6,r5,23
8110e8b0:	282ad7fa 	srli	r21,r5,31
8110e8b4:	00c02034 	movhi	r3,128
8110e8b8:	18ffffc4 	addi	r3,r3,-1
8110e8bc:	31803fcc 	andi	r6,r6,255
8110e8c0:	1962703a 	and	r17,r3,r5
8110e8c4:	af003fcc 	andi	fp,r21,255
8110e8c8:	30004a26 	beq	r6,zero,8110e9f4 <__divsf3+0x1b8>
8110e8cc:	00803fc4 	movi	r2,255
8110e8d0:	30804526 	beq	r6,r2,8110e9e8 <__divsf3+0x1ac>
8110e8d4:	89402034 	orhi	r5,r17,128
8110e8d8:	282290fa 	slli	r17,r5,3
8110e8dc:	31bfe044 	addi	r6,r6,-127
8110e8e0:	000b883a 	mov	r5,zero
8110e8e4:	2c20b03a 	or	r16,r5,r16
8110e8e8:	802090ba 	slli	r16,r16,2
8110e8ec:	00a04474 	movhi	r2,33041
8110e8f0:	10ba4404 	addi	r2,r2,-5872
8110e8f4:	80a1883a 	add	r16,r16,r2
8110e8f8:	81000017 	ldw	r4,0(r16)
8110e8fc:	9d46f03a 	xor	r3,r19,r21
8110e900:	180f883a 	mov	r7,r3
8110e904:	18803fcc 	andi	r2,r3,255
8110e908:	a18dc83a 	sub	r6,r20,r6
8110e90c:	2000683a 	jmp	r4
8110e910:	8110eaf4 	orhi	r4,r16,17323
8110e914:	8110e978 	rdprs	r4,r16,17317
8110e918:	8110eae8 	cmpgeui	r4,r16,17323
8110e91c:	8110e964 	muli	r4,r16,17317
8110e920:	8110eae8 	cmpgeui	r4,r16,17323
8110e924:	8110eac0 	call	88110eac <__reset+0x20f0eac>
8110e928:	8110eae8 	cmpgeui	r4,r16,17323
8110e92c:	8110e964 	muli	r4,r16,17317
8110e930:	8110e978 	rdprs	r4,r16,17317
8110e934:	8110e978 	rdprs	r4,r16,17317
8110e938:	8110eac0 	call	88110eac <__reset+0x20f0eac>
8110e93c:	8110e964 	muli	r4,r16,17317
8110e940:	8110ebd4 	ori	r4,r16,17327
8110e944:	8110ebd4 	ori	r4,r16,17327
8110e948:	8110ebd4 	ori	r4,r16,17327
8110e94c:	8110eb88 	cmpgei	r4,r16,17326
8110e950:	9000581e 	bne	r18,zero,8110eab4 <__divsf3+0x278>
8110e954:	04000204 	movi	r16,8
8110e958:	05c00084 	movi	r23,2
8110e95c:	003fd306 	br	8110e8ac <__reset+0xfb0ee8ac>
8110e960:	0023883a 	mov	r17,zero
8110e964:	e02d883a 	mov	r22,fp
8110e968:	282f883a 	mov	r23,r5
8110e96c:	00800084 	movi	r2,2
8110e970:	b8808f1e 	bne	r23,r2,8110ebb0 <__divsf3+0x374>
8110e974:	b005883a 	mov	r2,r22
8110e978:	11c0004c 	andi	r7,r2,1
8110e97c:	013fffc4 	movi	r4,-1
8110e980:	000d883a 	mov	r6,zero
8110e984:	21003fcc 	andi	r4,r4,255
8110e988:	200895fa 	slli	r4,r4,23
8110e98c:	38803fcc 	andi	r2,r7,255
8110e990:	00c02034 	movhi	r3,128
8110e994:	100497fa 	slli	r2,r2,31
8110e998:	18ffffc4 	addi	r3,r3,-1
8110e99c:	30c6703a 	and	r3,r6,r3
8110e9a0:	1906b03a 	or	r3,r3,r4
8110e9a4:	1884b03a 	or	r2,r3,r2
8110e9a8:	dfc00a17 	ldw	ra,40(sp)
8110e9ac:	df000917 	ldw	fp,36(sp)
8110e9b0:	ddc00817 	ldw	r23,32(sp)
8110e9b4:	dd800717 	ldw	r22,28(sp)
8110e9b8:	dd400617 	ldw	r21,24(sp)
8110e9bc:	dd000517 	ldw	r20,20(sp)
8110e9c0:	dcc00417 	ldw	r19,16(sp)
8110e9c4:	dc800317 	ldw	r18,12(sp)
8110e9c8:	dc400217 	ldw	r17,8(sp)
8110e9cc:	dc000117 	ldw	r16,4(sp)
8110e9d0:	dec00b04 	addi	sp,sp,44
8110e9d4:	f800283a 	ret
8110e9d8:	90002b1e 	bne	r18,zero,8110ea88 <__divsf3+0x24c>
8110e9dc:	04000104 	movi	r16,4
8110e9e0:	05c00044 	movi	r23,1
8110e9e4:	003fb106 	br	8110e8ac <__reset+0xfb0ee8ac>
8110e9e8:	8800251e 	bne	r17,zero,8110ea80 <__divsf3+0x244>
8110e9ec:	01400084 	movi	r5,2
8110e9f0:	00000206 	br	8110e9fc <__divsf3+0x1c0>
8110e9f4:	88001a1e 	bne	r17,zero,8110ea60 <__divsf3+0x224>
8110e9f8:	01400044 	movi	r5,1
8110e9fc:	8160b03a 	or	r16,r16,r5
8110ea00:	802090ba 	slli	r16,r16,2
8110ea04:	00e04474 	movhi	r3,33041
8110ea08:	18fa8804 	addi	r3,r3,-5600
8110ea0c:	80e1883a 	add	r16,r16,r3
8110ea10:	80c00017 	ldw	r3,0(r16)
8110ea14:	9d44f03a 	xor	r2,r19,r21
8110ea18:	a18dc83a 	sub	r6,r20,r6
8110ea1c:	1800683a 	jmp	r3
8110ea20:	8110e978 	rdprs	r4,r16,17317
8110ea24:	8110e978 	rdprs	r4,r16,17317
8110ea28:	8110ebc4 	addi	r4,r16,17327
8110ea2c:	8110e960 	cmpeqi	r4,r16,17317
8110ea30:	8110ebc4 	addi	r4,r16,17327
8110ea34:	8110eac0 	call	88110eac <__reset+0x20f0eac>
8110ea38:	8110ebc4 	addi	r4,r16,17327
8110ea3c:	8110e960 	cmpeqi	r4,r16,17317
8110ea40:	8110e978 	rdprs	r4,r16,17317
8110ea44:	8110e978 	rdprs	r4,r16,17317
8110ea48:	8110eac0 	call	88110eac <__reset+0x20f0eac>
8110ea4c:	8110e960 	cmpeqi	r4,r16,17317
8110ea50:	8110ebd4 	ori	r4,r16,17327
8110ea54:	8110ebd4 	ori	r4,r16,17327
8110ea58:	8110ebd4 	ori	r4,r16,17327
8110ea5c:	8110ebec 	andhi	r4,r16,17327
8110ea60:	8809883a 	mov	r4,r17
8110ea64:	110fc8c0 	call	8110fc8c <__clzsi2>
8110ea68:	10fffec4 	addi	r3,r2,-5
8110ea6c:	10801d84 	addi	r2,r2,118
8110ea70:	88e2983a 	sll	r17,r17,r3
8110ea74:	008dc83a 	sub	r6,zero,r2
8110ea78:	000b883a 	mov	r5,zero
8110ea7c:	003f9906 	br	8110e8e4 <__reset+0xfb0ee8e4>
8110ea80:	014000c4 	movi	r5,3
8110ea84:	003f9706 	br	8110e8e4 <__reset+0xfb0ee8e4>
8110ea88:	9009883a 	mov	r4,r18
8110ea8c:	d9400015 	stw	r5,0(sp)
8110ea90:	110fc8c0 	call	8110fc8c <__clzsi2>
8110ea94:	10fffec4 	addi	r3,r2,-5
8110ea98:	11801d84 	addi	r6,r2,118
8110ea9c:	90e4983a 	sll	r18,r18,r3
8110eaa0:	01a9c83a 	sub	r20,zero,r6
8110eaa4:	0021883a 	mov	r16,zero
8110eaa8:	002f883a 	mov	r23,zero
8110eaac:	d9400017 	ldw	r5,0(sp)
8110eab0:	003f7e06 	br	8110e8ac <__reset+0xfb0ee8ac>
8110eab4:	04000304 	movi	r16,12
8110eab8:	05c000c4 	movi	r23,3
8110eabc:	003f7b06 	br	8110e8ac <__reset+0xfb0ee8ac>
8110eac0:	01802034 	movhi	r6,128
8110eac4:	000f883a 	mov	r7,zero
8110eac8:	31bfffc4 	addi	r6,r6,-1
8110eacc:	013fffc4 	movi	r4,-1
8110ead0:	003fac06 	br	8110e984 <__reset+0xfb0ee984>
8110ead4:	01400044 	movi	r5,1
8110ead8:	2909c83a 	sub	r4,r5,r4
8110eadc:	00c006c4 	movi	r3,27
8110eae0:	19004b0e 	bge	r3,r4,8110ec10 <__divsf3+0x3d4>
8110eae4:	114e703a 	and	r7,r2,r5
8110eae8:	0009883a 	mov	r4,zero
8110eaec:	000d883a 	mov	r6,zero
8110eaf0:	003fa406 	br	8110e984 <__reset+0xfb0ee984>
8110eaf4:	9006917a 	slli	r3,r18,5
8110eaf8:	8822917a 	slli	r17,r17,5
8110eafc:	1c40372e 	bgeu	r3,r17,8110ebdc <__divsf3+0x3a0>
8110eb00:	31bfffc4 	addi	r6,r6,-1
8110eb04:	010006c4 	movi	r4,27
8110eb08:	000b883a 	mov	r5,zero
8110eb0c:	180f883a 	mov	r7,r3
8110eb10:	294b883a 	add	r5,r5,r5
8110eb14:	18c7883a 	add	r3,r3,r3
8110eb18:	38000116 	blt	r7,zero,8110eb20 <__divsf3+0x2e4>
8110eb1c:	1c400236 	bltu	r3,r17,8110eb28 <__divsf3+0x2ec>
8110eb20:	1c47c83a 	sub	r3,r3,r17
8110eb24:	29400054 	ori	r5,r5,1
8110eb28:	213fffc4 	addi	r4,r4,-1
8110eb2c:	203ff71e 	bne	r4,zero,8110eb0c <__reset+0xfb0eeb0c>
8110eb30:	1806c03a 	cmpne	r3,r3,zero
8110eb34:	1962b03a 	or	r17,r3,r5
8110eb38:	31001fc4 	addi	r4,r6,127
8110eb3c:	013fe50e 	bge	zero,r4,8110ead4 <__reset+0xfb0eead4>
8110eb40:	88c001cc 	andi	r3,r17,7
8110eb44:	18000426 	beq	r3,zero,8110eb58 <__divsf3+0x31c>
8110eb48:	88c003cc 	andi	r3,r17,15
8110eb4c:	01400104 	movi	r5,4
8110eb50:	19400126 	beq	r3,r5,8110eb58 <__divsf3+0x31c>
8110eb54:	8963883a 	add	r17,r17,r5
8110eb58:	88c2002c 	andhi	r3,r17,2048
8110eb5c:	18000426 	beq	r3,zero,8110eb70 <__divsf3+0x334>
8110eb60:	00fe0034 	movhi	r3,63488
8110eb64:	18ffffc4 	addi	r3,r3,-1
8110eb68:	31002004 	addi	r4,r6,128
8110eb6c:	88e2703a 	and	r17,r17,r3
8110eb70:	00c03f84 	movi	r3,254
8110eb74:	193f8016 	blt	r3,r4,8110e978 <__reset+0xfb0ee978>
8110eb78:	880c91ba 	slli	r6,r17,6
8110eb7c:	11c0004c 	andi	r7,r2,1
8110eb80:	300cd27a 	srli	r6,r6,9
8110eb84:	003f7f06 	br	8110e984 <__reset+0xfb0ee984>
8110eb88:	9080102c 	andhi	r2,r18,64
8110eb8c:	10000226 	beq	r2,zero,8110eb98 <__divsf3+0x35c>
8110eb90:	8880102c 	andhi	r2,r17,64
8110eb94:	10001826 	beq	r2,zero,8110ebf8 <__divsf3+0x3bc>
8110eb98:	00802034 	movhi	r2,128
8110eb9c:	91801034 	orhi	r6,r18,64
8110eba0:	10bfffc4 	addi	r2,r2,-1
8110eba4:	980f883a 	mov	r7,r19
8110eba8:	308c703a 	and	r6,r6,r2
8110ebac:	003fc706 	br	8110eacc <__reset+0xfb0eeacc>
8110ebb0:	008000c4 	movi	r2,3
8110ebb4:	b8802d26 	beq	r23,r2,8110ec6c <__divsf3+0x430>
8110ebb8:	00c00044 	movi	r3,1
8110ebbc:	b005883a 	mov	r2,r22
8110ebc0:	b8ffdd1e 	bne	r23,r3,8110eb38 <__reset+0xfb0eeb38>
8110ebc4:	11c0004c 	andi	r7,r2,1
8110ebc8:	0009883a 	mov	r4,zero
8110ebcc:	000d883a 	mov	r6,zero
8110ebd0:	003f6c06 	br	8110e984 <__reset+0xfb0ee984>
8110ebd4:	9023883a 	mov	r17,r18
8110ebd8:	003f6406 	br	8110e96c <__reset+0xfb0ee96c>
8110ebdc:	1c47c83a 	sub	r3,r3,r17
8110ebe0:	01000684 	movi	r4,26
8110ebe4:	01400044 	movi	r5,1
8110ebe8:	003fc806 	br	8110eb0c <__reset+0xfb0eeb0c>
8110ebec:	9080102c 	andhi	r2,r18,64
8110ebf0:	103fe926 	beq	r2,zero,8110eb98 <__reset+0xfb0eeb98>
8110ebf4:	0023883a 	mov	r17,zero
8110ebf8:	00802034 	movhi	r2,128
8110ebfc:	89801034 	orhi	r6,r17,64
8110ec00:	10bfffc4 	addi	r2,r2,-1
8110ec04:	a80f883a 	mov	r7,r21
8110ec08:	308c703a 	and	r6,r6,r2
8110ec0c:	003faf06 	br	8110eacc <__reset+0xfb0eeacc>
8110ec10:	01c00804 	movi	r7,32
8110ec14:	390fc83a 	sub	r7,r7,r4
8110ec18:	89ce983a 	sll	r7,r17,r7
8110ec1c:	890ad83a 	srl	r5,r17,r4
8110ec20:	380ec03a 	cmpne	r7,r7,zero
8110ec24:	29cab03a 	or	r5,r5,r7
8110ec28:	28c001cc 	andi	r3,r5,7
8110ec2c:	18000426 	beq	r3,zero,8110ec40 <__divsf3+0x404>
8110ec30:	28c003cc 	andi	r3,r5,15
8110ec34:	01000104 	movi	r4,4
8110ec38:	19000126 	beq	r3,r4,8110ec40 <__divsf3+0x404>
8110ec3c:	290b883a 	add	r5,r5,r4
8110ec40:	28c1002c 	andhi	r3,r5,1024
8110ec44:	18000426 	beq	r3,zero,8110ec58 <__divsf3+0x41c>
8110ec48:	11c0004c 	andi	r7,r2,1
8110ec4c:	01000044 	movi	r4,1
8110ec50:	000d883a 	mov	r6,zero
8110ec54:	003f4b06 	br	8110e984 <__reset+0xfb0ee984>
8110ec58:	280a91ba 	slli	r5,r5,6
8110ec5c:	11c0004c 	andi	r7,r2,1
8110ec60:	0009883a 	mov	r4,zero
8110ec64:	280cd27a 	srli	r6,r5,9
8110ec68:	003f4606 	br	8110e984 <__reset+0xfb0ee984>
8110ec6c:	00802034 	movhi	r2,128
8110ec70:	89801034 	orhi	r6,r17,64
8110ec74:	10bfffc4 	addi	r2,r2,-1
8110ec78:	b00f883a 	mov	r7,r22
8110ec7c:	308c703a 	and	r6,r6,r2
8110ec80:	003f9206 	br	8110eacc <__reset+0xfb0eeacc>

8110ec84 <__mulsf3>:
8110ec84:	defff504 	addi	sp,sp,-44
8110ec88:	de00012e 	bgeu	sp,et,8110ec90 <__mulsf3+0xc>
8110ec8c:	003b68fa 	trap	3
8110ec90:	dc000115 	stw	r16,4(sp)
8110ec94:	2020d5fa 	srli	r16,r4,23
8110ec98:	dd400615 	stw	r21,24(sp)
8110ec9c:	202ad7fa 	srli	r21,r4,31
8110eca0:	dc800315 	stw	r18,12(sp)
8110eca4:	04802034 	movhi	r18,128
8110eca8:	df000915 	stw	fp,36(sp)
8110ecac:	dd000515 	stw	r20,20(sp)
8110ecb0:	94bfffc4 	addi	r18,r18,-1
8110ecb4:	dfc00a15 	stw	ra,40(sp)
8110ecb8:	ddc00815 	stw	r23,32(sp)
8110ecbc:	dd800715 	stw	r22,28(sp)
8110ecc0:	dcc00415 	stw	r19,16(sp)
8110ecc4:	dc400215 	stw	r17,8(sp)
8110ecc8:	84003fcc 	andi	r16,r16,255
8110eccc:	9124703a 	and	r18,r18,r4
8110ecd0:	a829883a 	mov	r20,r21
8110ecd4:	af003fcc 	andi	fp,r21,255
8110ecd8:	80005426 	beq	r16,zero,8110ee2c <__mulsf3+0x1a8>
8110ecdc:	00803fc4 	movi	r2,255
8110ece0:	80802f26 	beq	r16,r2,8110eda0 <__mulsf3+0x11c>
8110ece4:	91002034 	orhi	r4,r18,128
8110ece8:	202490fa 	slli	r18,r4,3
8110ecec:	843fe044 	addi	r16,r16,-127
8110ecf0:	0023883a 	mov	r17,zero
8110ecf4:	002f883a 	mov	r23,zero
8110ecf8:	2804d5fa 	srli	r2,r5,23
8110ecfc:	282cd7fa 	srli	r22,r5,31
8110ed00:	01002034 	movhi	r4,128
8110ed04:	213fffc4 	addi	r4,r4,-1
8110ed08:	10803fcc 	andi	r2,r2,255
8110ed0c:	2166703a 	and	r19,r4,r5
8110ed10:	b1803fcc 	andi	r6,r22,255
8110ed14:	10004c26 	beq	r2,zero,8110ee48 <__mulsf3+0x1c4>
8110ed18:	00c03fc4 	movi	r3,255
8110ed1c:	10c04726 	beq	r2,r3,8110ee3c <__mulsf3+0x1b8>
8110ed20:	99002034 	orhi	r4,r19,128
8110ed24:	202690fa 	slli	r19,r4,3
8110ed28:	10bfe044 	addi	r2,r2,-127
8110ed2c:	0007883a 	mov	r3,zero
8110ed30:	80a1883a 	add	r16,r16,r2
8110ed34:	010003c4 	movi	r4,15
8110ed38:	1c44b03a 	or	r2,r3,r17
8110ed3c:	b56af03a 	xor	r21,r22,r21
8110ed40:	81c00044 	addi	r7,r16,1
8110ed44:	20806b36 	bltu	r4,r2,8110eef4 <__mulsf3+0x270>
8110ed48:	100490ba 	slli	r2,r2,2
8110ed4c:	01204474 	movhi	r4,33041
8110ed50:	213b5804 	addi	r4,r4,-4768
8110ed54:	1105883a 	add	r2,r2,r4
8110ed58:	10800017 	ldw	r2,0(r2)
8110ed5c:	1000683a 	jmp	r2
8110ed60:	8110eef4 	orhi	r4,r16,17339
8110ed64:	8110edb4 	orhi	r4,r16,17334
8110ed68:	8110edb4 	orhi	r4,r16,17334
8110ed6c:	8110edb0 	cmpltui	r4,r16,17334
8110ed70:	8110eed8 	cmpnei	r4,r16,17339
8110ed74:	8110eed8 	cmpnei	r4,r16,17339
8110ed78:	8110eec4 	addi	r4,r16,17339
8110ed7c:	8110edb0 	cmpltui	r4,r16,17334
8110ed80:	8110eed8 	cmpnei	r4,r16,17339
8110ed84:	8110eec4 	addi	r4,r16,17339
8110ed88:	8110eed8 	cmpnei	r4,r16,17339
8110ed8c:	8110edb0 	cmpltui	r4,r16,17334
8110ed90:	8110eee4 	muli	r4,r16,17339
8110ed94:	8110eee4 	muli	r4,r16,17339
8110ed98:	8110eee4 	muli	r4,r16,17339
8110ed9c:	8110efc0 	call	88110efc <__reset+0x20f0efc>
8110eda0:	90003b1e 	bne	r18,zero,8110ee90 <__mulsf3+0x20c>
8110eda4:	04400204 	movi	r17,8
8110eda8:	05c00084 	movi	r23,2
8110edac:	003fd206 	br	8110ecf8 <__reset+0xfb0eecf8>
8110edb0:	302b883a 	mov	r21,r6
8110edb4:	00800084 	movi	r2,2
8110edb8:	18802626 	beq	r3,r2,8110ee54 <__mulsf3+0x1d0>
8110edbc:	008000c4 	movi	r2,3
8110edc0:	1880ab26 	beq	r3,r2,8110f070 <__mulsf3+0x3ec>
8110edc4:	00800044 	movi	r2,1
8110edc8:	1880a21e 	bne	r3,r2,8110f054 <__mulsf3+0x3d0>
8110edcc:	a829883a 	mov	r20,r21
8110edd0:	0007883a 	mov	r3,zero
8110edd4:	0009883a 	mov	r4,zero
8110edd8:	18803fcc 	andi	r2,r3,255
8110eddc:	100695fa 	slli	r3,r2,23
8110ede0:	a0803fcc 	andi	r2,r20,255
8110ede4:	100a97fa 	slli	r5,r2,31
8110ede8:	00802034 	movhi	r2,128
8110edec:	10bfffc4 	addi	r2,r2,-1
8110edf0:	2084703a 	and	r2,r4,r2
8110edf4:	10c4b03a 	or	r2,r2,r3
8110edf8:	1144b03a 	or	r2,r2,r5
8110edfc:	dfc00a17 	ldw	ra,40(sp)
8110ee00:	df000917 	ldw	fp,36(sp)
8110ee04:	ddc00817 	ldw	r23,32(sp)
8110ee08:	dd800717 	ldw	r22,28(sp)
8110ee0c:	dd400617 	ldw	r21,24(sp)
8110ee10:	dd000517 	ldw	r20,20(sp)
8110ee14:	dcc00417 	ldw	r19,16(sp)
8110ee18:	dc800317 	ldw	r18,12(sp)
8110ee1c:	dc400217 	ldw	r17,8(sp)
8110ee20:	dc000117 	ldw	r16,4(sp)
8110ee24:	dec00b04 	addi	sp,sp,44
8110ee28:	f800283a 	ret
8110ee2c:	90000d1e 	bne	r18,zero,8110ee64 <__mulsf3+0x1e0>
8110ee30:	04400104 	movi	r17,4
8110ee34:	05c00044 	movi	r23,1
8110ee38:	003faf06 	br	8110ecf8 <__reset+0xfb0eecf8>
8110ee3c:	9806c03a 	cmpne	r3,r19,zero
8110ee40:	18c00084 	addi	r3,r3,2
8110ee44:	003fba06 	br	8110ed30 <__reset+0xfb0eed30>
8110ee48:	9800141e 	bne	r19,zero,8110ee9c <__mulsf3+0x218>
8110ee4c:	00c00044 	movi	r3,1
8110ee50:	003fb706 	br	8110ed30 <__reset+0xfb0eed30>
8110ee54:	a829883a 	mov	r20,r21
8110ee58:	00ffffc4 	movi	r3,-1
8110ee5c:	0009883a 	mov	r4,zero
8110ee60:	003fdd06 	br	8110edd8 <__reset+0xfb0eedd8>
8110ee64:	9009883a 	mov	r4,r18
8110ee68:	d9400015 	stw	r5,0(sp)
8110ee6c:	110fc8c0 	call	8110fc8c <__clzsi2>
8110ee70:	10fffec4 	addi	r3,r2,-5
8110ee74:	10801d84 	addi	r2,r2,118
8110ee78:	90e4983a 	sll	r18,r18,r3
8110ee7c:	00a1c83a 	sub	r16,zero,r2
8110ee80:	0023883a 	mov	r17,zero
8110ee84:	002f883a 	mov	r23,zero
8110ee88:	d9400017 	ldw	r5,0(sp)
8110ee8c:	003f9a06 	br	8110ecf8 <__reset+0xfb0eecf8>
8110ee90:	04400304 	movi	r17,12
8110ee94:	05c000c4 	movi	r23,3
8110ee98:	003f9706 	br	8110ecf8 <__reset+0xfb0eecf8>
8110ee9c:	9809883a 	mov	r4,r19
8110eea0:	d9800015 	stw	r6,0(sp)
8110eea4:	110fc8c0 	call	8110fc8c <__clzsi2>
8110eea8:	10fffec4 	addi	r3,r2,-5
8110eeac:	10801d84 	addi	r2,r2,118
8110eeb0:	98e6983a 	sll	r19,r19,r3
8110eeb4:	0085c83a 	sub	r2,zero,r2
8110eeb8:	0007883a 	mov	r3,zero
8110eebc:	d9800017 	ldw	r6,0(sp)
8110eec0:	003f9b06 	br	8110ed30 <__reset+0xfb0eed30>
8110eec4:	01002034 	movhi	r4,128
8110eec8:	0029883a 	mov	r20,zero
8110eecc:	213fffc4 	addi	r4,r4,-1
8110eed0:	00ffffc4 	movi	r3,-1
8110eed4:	003fc006 	br	8110edd8 <__reset+0xfb0eedd8>
8110eed8:	9027883a 	mov	r19,r18
8110eedc:	b807883a 	mov	r3,r23
8110eee0:	003fb406 	br	8110edb4 <__reset+0xfb0eedb4>
8110eee4:	9027883a 	mov	r19,r18
8110eee8:	e02b883a 	mov	r21,fp
8110eeec:	b807883a 	mov	r3,r23
8110eef0:	003fb006 	br	8110edb4 <__reset+0xfb0eedb4>
8110eef4:	9004d43a 	srli	r2,r18,16
8110eef8:	9810d43a 	srli	r8,r19,16
8110eefc:	94bfffcc 	andi	r18,r18,65535
8110ef00:	993fffcc 	andi	r4,r19,65535
8110ef04:	910d383a 	mul	r6,r18,r4
8110ef08:	20a7383a 	mul	r19,r4,r2
8110ef0c:	9225383a 	mul	r18,r18,r8
8110ef10:	3006d43a 	srli	r3,r6,16
8110ef14:	1211383a 	mul	r8,r2,r8
8110ef18:	94e5883a 	add	r18,r18,r19
8110ef1c:	1c87883a 	add	r3,r3,r18
8110ef20:	1cc0022e 	bgeu	r3,r19,8110ef2c <__mulsf3+0x2a8>
8110ef24:	00800074 	movhi	r2,1
8110ef28:	4091883a 	add	r8,r8,r2
8110ef2c:	1804943a 	slli	r2,r3,16
8110ef30:	31bfffcc 	andi	r6,r6,65535
8110ef34:	1806d43a 	srli	r3,r3,16
8110ef38:	1185883a 	add	r2,r2,r6
8110ef3c:	102691ba 	slli	r19,r2,6
8110ef40:	1a07883a 	add	r3,r3,r8
8110ef44:	1004d6ba 	srli	r2,r2,26
8110ef48:	180891ba 	slli	r4,r3,6
8110ef4c:	9826c03a 	cmpne	r19,r19,zero
8110ef50:	9884b03a 	or	r2,r19,r2
8110ef54:	1126b03a 	or	r19,r2,r4
8110ef58:	9882002c 	andhi	r2,r19,2048
8110ef5c:	10000426 	beq	r2,zero,8110ef70 <__mulsf3+0x2ec>
8110ef60:	9804d07a 	srli	r2,r19,1
8110ef64:	9900004c 	andi	r4,r19,1
8110ef68:	3821883a 	mov	r16,r7
8110ef6c:	1126b03a 	or	r19,r2,r4
8110ef70:	80c01fc4 	addi	r3,r16,127
8110ef74:	00c0210e 	bge	zero,r3,8110effc <__mulsf3+0x378>
8110ef78:	988001cc 	andi	r2,r19,7
8110ef7c:	10000426 	beq	r2,zero,8110ef90 <__mulsf3+0x30c>
8110ef80:	988003cc 	andi	r2,r19,15
8110ef84:	01000104 	movi	r4,4
8110ef88:	11000126 	beq	r2,r4,8110ef90 <__mulsf3+0x30c>
8110ef8c:	9927883a 	add	r19,r19,r4
8110ef90:	9882002c 	andhi	r2,r19,2048
8110ef94:	10000426 	beq	r2,zero,8110efa8 <__mulsf3+0x324>
8110ef98:	00be0034 	movhi	r2,63488
8110ef9c:	10bfffc4 	addi	r2,r2,-1
8110efa0:	80c02004 	addi	r3,r16,128
8110efa4:	98a6703a 	and	r19,r19,r2
8110efa8:	00803f84 	movi	r2,254
8110efac:	10ffa916 	blt	r2,r3,8110ee54 <__reset+0xfb0eee54>
8110efb0:	980891ba 	slli	r4,r19,6
8110efb4:	a829883a 	mov	r20,r21
8110efb8:	2008d27a 	srli	r4,r4,9
8110efbc:	003f8606 	br	8110edd8 <__reset+0xfb0eedd8>
8110efc0:	9080102c 	andhi	r2,r18,64
8110efc4:	10000826 	beq	r2,zero,8110efe8 <__mulsf3+0x364>
8110efc8:	9880102c 	andhi	r2,r19,64
8110efcc:	1000061e 	bne	r2,zero,8110efe8 <__mulsf3+0x364>
8110efd0:	00802034 	movhi	r2,128
8110efd4:	99001034 	orhi	r4,r19,64
8110efd8:	10bfffc4 	addi	r2,r2,-1
8110efdc:	b029883a 	mov	r20,r22
8110efe0:	2088703a 	and	r4,r4,r2
8110efe4:	003fba06 	br	8110eed0 <__reset+0xfb0eeed0>
8110efe8:	00802034 	movhi	r2,128
8110efec:	91001034 	orhi	r4,r18,64
8110eff0:	10bfffc4 	addi	r2,r2,-1
8110eff4:	2088703a 	and	r4,r4,r2
8110eff8:	003fb506 	br	8110eed0 <__reset+0xfb0eeed0>
8110effc:	00800044 	movi	r2,1
8110f000:	10c7c83a 	sub	r3,r2,r3
8110f004:	008006c4 	movi	r2,27
8110f008:	10ff7016 	blt	r2,r3,8110edcc <__reset+0xfb0eedcc>
8110f00c:	00800804 	movi	r2,32
8110f010:	10c5c83a 	sub	r2,r2,r3
8110f014:	9884983a 	sll	r2,r19,r2
8110f018:	98c6d83a 	srl	r3,r19,r3
8110f01c:	1004c03a 	cmpne	r2,r2,zero
8110f020:	1884b03a 	or	r2,r3,r2
8110f024:	10c001cc 	andi	r3,r2,7
8110f028:	18000426 	beq	r3,zero,8110f03c <__mulsf3+0x3b8>
8110f02c:	10c003cc 	andi	r3,r2,15
8110f030:	01000104 	movi	r4,4
8110f034:	19000126 	beq	r3,r4,8110f03c <__mulsf3+0x3b8>
8110f038:	1105883a 	add	r2,r2,r4
8110f03c:	10c1002c 	andhi	r3,r2,1024
8110f040:	18000626 	beq	r3,zero,8110f05c <__mulsf3+0x3d8>
8110f044:	a829883a 	mov	r20,r21
8110f048:	00c00044 	movi	r3,1
8110f04c:	0009883a 	mov	r4,zero
8110f050:	003f6106 	br	8110edd8 <__reset+0xfb0eedd8>
8110f054:	3821883a 	mov	r16,r7
8110f058:	003fc506 	br	8110ef70 <__reset+0xfb0eef70>
8110f05c:	100491ba 	slli	r2,r2,6
8110f060:	a829883a 	mov	r20,r21
8110f064:	0007883a 	mov	r3,zero
8110f068:	1008d27a 	srli	r4,r2,9
8110f06c:	003f5a06 	br	8110edd8 <__reset+0xfb0eedd8>
8110f070:	00802034 	movhi	r2,128
8110f074:	99001034 	orhi	r4,r19,64
8110f078:	10bfffc4 	addi	r2,r2,-1
8110f07c:	a829883a 	mov	r20,r21
8110f080:	2088703a 	and	r4,r4,r2
8110f084:	003f9206 	br	8110eed0 <__reset+0xfb0eeed0>

8110f088 <__floatsisf>:
8110f088:	defffd04 	addi	sp,sp,-12
8110f08c:	de00012e 	bgeu	sp,et,8110f094 <__floatsisf+0xc>
8110f090:	003b68fa 	trap	3
8110f094:	dfc00215 	stw	ra,8(sp)
8110f098:	dc400115 	stw	r17,4(sp)
8110f09c:	dc000015 	stw	r16,0(sp)
8110f0a0:	20003526 	beq	r4,zero,8110f178 <__floatsisf+0xf0>
8110f0a4:	2021883a 	mov	r16,r4
8110f0a8:	2022d7fa 	srli	r17,r4,31
8110f0ac:	20003616 	blt	r4,zero,8110f188 <__floatsisf+0x100>
8110f0b0:	8009883a 	mov	r4,r16
8110f0b4:	110fc8c0 	call	8110fc8c <__clzsi2>
8110f0b8:	00c02784 	movi	r3,158
8110f0bc:	1887c83a 	sub	r3,r3,r2
8110f0c0:	01002584 	movi	r4,150
8110f0c4:	20c01416 	blt	r4,r3,8110f118 <__floatsisf+0x90>
8110f0c8:	20c9c83a 	sub	r4,r4,r3
8110f0cc:	8120983a 	sll	r16,r16,r4
8110f0d0:	00802034 	movhi	r2,128
8110f0d4:	10bfffc4 	addi	r2,r2,-1
8110f0d8:	8809883a 	mov	r4,r17
8110f0dc:	80a0703a 	and	r16,r16,r2
8110f0e0:	18803fcc 	andi	r2,r3,255
8110f0e4:	100695fa 	slli	r3,r2,23
8110f0e8:	20803fcc 	andi	r2,r4,255
8110f0ec:	100897fa 	slli	r4,r2,31
8110f0f0:	00802034 	movhi	r2,128
8110f0f4:	10bfffc4 	addi	r2,r2,-1
8110f0f8:	8084703a 	and	r2,r16,r2
8110f0fc:	10c4b03a 	or	r2,r2,r3
8110f100:	1104b03a 	or	r2,r2,r4
8110f104:	dfc00217 	ldw	ra,8(sp)
8110f108:	dc400117 	ldw	r17,4(sp)
8110f10c:	dc000017 	ldw	r16,0(sp)
8110f110:	dec00304 	addi	sp,sp,12
8110f114:	f800283a 	ret
8110f118:	01002644 	movi	r4,153
8110f11c:	20c01c16 	blt	r4,r3,8110f190 <__floatsisf+0x108>
8110f120:	20c9c83a 	sub	r4,r4,r3
8110f124:	8120983a 	sll	r16,r16,r4
8110f128:	013f0034 	movhi	r4,64512
8110f12c:	213fffc4 	addi	r4,r4,-1
8110f130:	814001cc 	andi	r5,r16,7
8110f134:	8108703a 	and	r4,r16,r4
8110f138:	28000426 	beq	r5,zero,8110f14c <__floatsisf+0xc4>
8110f13c:	840003cc 	andi	r16,r16,15
8110f140:	01400104 	movi	r5,4
8110f144:	81400126 	beq	r16,r5,8110f14c <__floatsisf+0xc4>
8110f148:	2149883a 	add	r4,r4,r5
8110f14c:	2141002c 	andhi	r5,r4,1024
8110f150:	28000526 	beq	r5,zero,8110f168 <__floatsisf+0xe0>
8110f154:	00c027c4 	movi	r3,159
8110f158:	1887c83a 	sub	r3,r3,r2
8110f15c:	00bf0034 	movhi	r2,64512
8110f160:	10bfffc4 	addi	r2,r2,-1
8110f164:	2088703a 	and	r4,r4,r2
8110f168:	202091ba 	slli	r16,r4,6
8110f16c:	8809883a 	mov	r4,r17
8110f170:	8020d27a 	srli	r16,r16,9
8110f174:	003fda06 	br	8110f0e0 <__reset+0xfb0ef0e0>
8110f178:	0009883a 	mov	r4,zero
8110f17c:	0007883a 	mov	r3,zero
8110f180:	0021883a 	mov	r16,zero
8110f184:	003fd606 	br	8110f0e0 <__reset+0xfb0ef0e0>
8110f188:	0121c83a 	sub	r16,zero,r4
8110f18c:	003fc806 	br	8110f0b0 <__reset+0xfb0ef0b0>
8110f190:	01002e44 	movi	r4,185
8110f194:	20c9c83a 	sub	r4,r4,r3
8110f198:	01400144 	movi	r5,5
8110f19c:	8108983a 	sll	r4,r16,r4
8110f1a0:	288bc83a 	sub	r5,r5,r2
8110f1a4:	8160d83a 	srl	r16,r16,r5
8110f1a8:	2008c03a 	cmpne	r4,r4,zero
8110f1ac:	8120b03a 	or	r16,r16,r4
8110f1b0:	003fdd06 	br	8110f128 <__reset+0xfb0ef128>

8110f1b4 <__floatunsisf>:
8110f1b4:	defffe04 	addi	sp,sp,-8
8110f1b8:	de00012e 	bgeu	sp,et,8110f1c0 <__floatunsisf+0xc>
8110f1bc:	003b68fa 	trap	3
8110f1c0:	dfc00115 	stw	ra,4(sp)
8110f1c4:	dc000015 	stw	r16,0(sp)
8110f1c8:	20002c26 	beq	r4,zero,8110f27c <__floatunsisf+0xc8>
8110f1cc:	2021883a 	mov	r16,r4
8110f1d0:	110fc8c0 	call	8110fc8c <__clzsi2>
8110f1d4:	00c02784 	movi	r3,158
8110f1d8:	1887c83a 	sub	r3,r3,r2
8110f1dc:	01002584 	movi	r4,150
8110f1e0:	20c00f16 	blt	r4,r3,8110f220 <__floatunsisf+0x6c>
8110f1e4:	20c9c83a 	sub	r4,r4,r3
8110f1e8:	8108983a 	sll	r4,r16,r4
8110f1ec:	00802034 	movhi	r2,128
8110f1f0:	10bfffc4 	addi	r2,r2,-1
8110f1f4:	2088703a 	and	r4,r4,r2
8110f1f8:	18803fcc 	andi	r2,r3,255
8110f1fc:	100695fa 	slli	r3,r2,23
8110f200:	00802034 	movhi	r2,128
8110f204:	10bfffc4 	addi	r2,r2,-1
8110f208:	2084703a 	and	r2,r4,r2
8110f20c:	10c4b03a 	or	r2,r2,r3
8110f210:	dfc00117 	ldw	ra,4(sp)
8110f214:	dc000017 	ldw	r16,0(sp)
8110f218:	dec00204 	addi	sp,sp,8
8110f21c:	f800283a 	ret
8110f220:	01002644 	movi	r4,153
8110f224:	20c01816 	blt	r4,r3,8110f288 <__floatunsisf+0xd4>
8110f228:	20c9c83a 	sub	r4,r4,r3
8110f22c:	8108983a 	sll	r4,r16,r4
8110f230:	017f0034 	movhi	r5,64512
8110f234:	297fffc4 	addi	r5,r5,-1
8110f238:	218001cc 	andi	r6,r4,7
8110f23c:	214a703a 	and	r5,r4,r5
8110f240:	30000426 	beq	r6,zero,8110f254 <__floatunsisf+0xa0>
8110f244:	210003cc 	andi	r4,r4,15
8110f248:	01800104 	movi	r6,4
8110f24c:	21800126 	beq	r4,r6,8110f254 <__floatunsisf+0xa0>
8110f250:	298b883a 	add	r5,r5,r6
8110f254:	2901002c 	andhi	r4,r5,1024
8110f258:	20000526 	beq	r4,zero,8110f270 <__floatunsisf+0xbc>
8110f25c:	00c027c4 	movi	r3,159
8110f260:	1887c83a 	sub	r3,r3,r2
8110f264:	00bf0034 	movhi	r2,64512
8110f268:	10bfffc4 	addi	r2,r2,-1
8110f26c:	288a703a 	and	r5,r5,r2
8110f270:	280891ba 	slli	r4,r5,6
8110f274:	2008d27a 	srli	r4,r4,9
8110f278:	003fdf06 	br	8110f1f8 <__reset+0xfb0ef1f8>
8110f27c:	0007883a 	mov	r3,zero
8110f280:	0009883a 	mov	r4,zero
8110f284:	003fdc06 	br	8110f1f8 <__reset+0xfb0ef1f8>
8110f288:	01402e44 	movi	r5,185
8110f28c:	28cbc83a 	sub	r5,r5,r3
8110f290:	01000144 	movi	r4,5
8110f294:	2089c83a 	sub	r4,r4,r2
8110f298:	814a983a 	sll	r5,r16,r5
8110f29c:	8108d83a 	srl	r4,r16,r4
8110f2a0:	2820c03a 	cmpne	r16,r5,zero
8110f2a4:	2408b03a 	or	r4,r4,r16
8110f2a8:	003fe106 	br	8110f230 <__reset+0xfb0ef230>

8110f2ac <__muldf3>:
8110f2ac:	defff304 	addi	sp,sp,-52
8110f2b0:	2804d53a 	srli	r2,r5,20
8110f2b4:	de00012e 	bgeu	sp,et,8110f2bc <__muldf3+0x10>
8110f2b8:	003b68fa 	trap	3
8110f2bc:	dd800915 	stw	r22,36(sp)
8110f2c0:	282cd7fa 	srli	r22,r5,31
8110f2c4:	dc000315 	stw	r16,12(sp)
8110f2c8:	04000434 	movhi	r16,16
8110f2cc:	dd400815 	stw	r21,32(sp)
8110f2d0:	dc800515 	stw	r18,20(sp)
8110f2d4:	843fffc4 	addi	r16,r16,-1
8110f2d8:	dfc00c15 	stw	ra,48(sp)
8110f2dc:	df000b15 	stw	fp,44(sp)
8110f2e0:	ddc00a15 	stw	r23,40(sp)
8110f2e4:	dd000715 	stw	r20,28(sp)
8110f2e8:	dcc00615 	stw	r19,24(sp)
8110f2ec:	dc400415 	stw	r17,16(sp)
8110f2f0:	1481ffcc 	andi	r18,r2,2047
8110f2f4:	2c20703a 	and	r16,r5,r16
8110f2f8:	b02b883a 	mov	r21,r22
8110f2fc:	b2403fcc 	andi	r9,r22,255
8110f300:	90006026 	beq	r18,zero,8110f484 <__muldf3+0x1d8>
8110f304:	0081ffc4 	movi	r2,2047
8110f308:	2029883a 	mov	r20,r4
8110f30c:	90803626 	beq	r18,r2,8110f3e8 <__muldf3+0x13c>
8110f310:	80800434 	orhi	r2,r16,16
8110f314:	100490fa 	slli	r2,r2,3
8110f318:	2020d77a 	srli	r16,r4,29
8110f31c:	202890fa 	slli	r20,r4,3
8110f320:	94bf0044 	addi	r18,r18,-1023
8110f324:	80a0b03a 	or	r16,r16,r2
8110f328:	0027883a 	mov	r19,zero
8110f32c:	0039883a 	mov	fp,zero
8110f330:	3804d53a 	srli	r2,r7,20
8110f334:	382ed7fa 	srli	r23,r7,31
8110f338:	04400434 	movhi	r17,16
8110f33c:	8c7fffc4 	addi	r17,r17,-1
8110f340:	1081ffcc 	andi	r2,r2,2047
8110f344:	3011883a 	mov	r8,r6
8110f348:	3c62703a 	and	r17,r7,r17
8110f34c:	ba803fcc 	andi	r10,r23,255
8110f350:	10006d26 	beq	r2,zero,8110f508 <__muldf3+0x25c>
8110f354:	00c1ffc4 	movi	r3,2047
8110f358:	10c06526 	beq	r2,r3,8110f4f0 <__muldf3+0x244>
8110f35c:	88c00434 	orhi	r3,r17,16
8110f360:	180690fa 	slli	r3,r3,3
8110f364:	3022d77a 	srli	r17,r6,29
8110f368:	301090fa 	slli	r8,r6,3
8110f36c:	10bf0044 	addi	r2,r2,-1023
8110f370:	88e2b03a 	or	r17,r17,r3
8110f374:	000b883a 	mov	r5,zero
8110f378:	9085883a 	add	r2,r18,r2
8110f37c:	2cc8b03a 	or	r4,r5,r19
8110f380:	00c003c4 	movi	r3,15
8110f384:	bdacf03a 	xor	r22,r23,r22
8110f388:	12c00044 	addi	r11,r2,1
8110f38c:	19009936 	bltu	r3,r4,8110f5f4 <__muldf3+0x348>
8110f390:	200890ba 	slli	r4,r4,2
8110f394:	00e04474 	movhi	r3,33041
8110f398:	18fcea04 	addi	r3,r3,-3160
8110f39c:	20c9883a 	add	r4,r4,r3
8110f3a0:	20c00017 	ldw	r3,0(r4)
8110f3a4:	1800683a 	jmp	r3
8110f3a8:	8110f5f4 	orhi	r4,r16,17367
8110f3ac:	8110f408 	cmpgei	r4,r16,17360
8110f3b0:	8110f408 	cmpgei	r4,r16,17360
8110f3b4:	8110f404 	addi	r4,r16,17360
8110f3b8:	8110f5d0 	cmplti	r4,r16,17367
8110f3bc:	8110f5d0 	cmplti	r4,r16,17367
8110f3c0:	8110f5b8 	rdprs	r4,r16,17366
8110f3c4:	8110f404 	addi	r4,r16,17360
8110f3c8:	8110f5d0 	cmplti	r4,r16,17367
8110f3cc:	8110f5b8 	rdprs	r4,r16,17366
8110f3d0:	8110f5d0 	cmplti	r4,r16,17367
8110f3d4:	8110f404 	addi	r4,r16,17360
8110f3d8:	8110f5e0 	cmpeqi	r4,r16,17367
8110f3dc:	8110f5e0 	cmpeqi	r4,r16,17367
8110f3e0:	8110f5e0 	cmpeqi	r4,r16,17367
8110f3e4:	8110f7fc 	xorhi	r4,r16,17375
8110f3e8:	2404b03a 	or	r2,r4,r16
8110f3ec:	10006f1e 	bne	r2,zero,8110f5ac <__muldf3+0x300>
8110f3f0:	04c00204 	movi	r19,8
8110f3f4:	0021883a 	mov	r16,zero
8110f3f8:	0029883a 	mov	r20,zero
8110f3fc:	07000084 	movi	fp,2
8110f400:	003fcb06 	br	8110f330 <__reset+0xfb0ef330>
8110f404:	502d883a 	mov	r22,r10
8110f408:	00800084 	movi	r2,2
8110f40c:	28805726 	beq	r5,r2,8110f56c <__muldf3+0x2c0>
8110f410:	008000c4 	movi	r2,3
8110f414:	28816626 	beq	r5,r2,8110f9b0 <__muldf3+0x704>
8110f418:	00800044 	movi	r2,1
8110f41c:	2881411e 	bne	r5,r2,8110f924 <__muldf3+0x678>
8110f420:	b02b883a 	mov	r21,r22
8110f424:	0005883a 	mov	r2,zero
8110f428:	000b883a 	mov	r5,zero
8110f42c:	0029883a 	mov	r20,zero
8110f430:	1004953a 	slli	r2,r2,20
8110f434:	a8c03fcc 	andi	r3,r21,255
8110f438:	04400434 	movhi	r17,16
8110f43c:	8c7fffc4 	addi	r17,r17,-1
8110f440:	180697fa 	slli	r3,r3,31
8110f444:	2c4a703a 	and	r5,r5,r17
8110f448:	288ab03a 	or	r5,r5,r2
8110f44c:	28c6b03a 	or	r3,r5,r3
8110f450:	a005883a 	mov	r2,r20
8110f454:	dfc00c17 	ldw	ra,48(sp)
8110f458:	df000b17 	ldw	fp,44(sp)
8110f45c:	ddc00a17 	ldw	r23,40(sp)
8110f460:	dd800917 	ldw	r22,36(sp)
8110f464:	dd400817 	ldw	r21,32(sp)
8110f468:	dd000717 	ldw	r20,28(sp)
8110f46c:	dcc00617 	ldw	r19,24(sp)
8110f470:	dc800517 	ldw	r18,20(sp)
8110f474:	dc400417 	ldw	r17,16(sp)
8110f478:	dc000317 	ldw	r16,12(sp)
8110f47c:	dec00d04 	addi	sp,sp,52
8110f480:	f800283a 	ret
8110f484:	2404b03a 	or	r2,r4,r16
8110f488:	2027883a 	mov	r19,r4
8110f48c:	10004226 	beq	r2,zero,8110f598 <__muldf3+0x2ec>
8110f490:	8000fc26 	beq	r16,zero,8110f884 <__muldf3+0x5d8>
8110f494:	8009883a 	mov	r4,r16
8110f498:	d9800215 	stw	r6,8(sp)
8110f49c:	d9c00015 	stw	r7,0(sp)
8110f4a0:	da400115 	stw	r9,4(sp)
8110f4a4:	110fc8c0 	call	8110fc8c <__clzsi2>
8110f4a8:	d9800217 	ldw	r6,8(sp)
8110f4ac:	d9c00017 	ldw	r7,0(sp)
8110f4b0:	da400117 	ldw	r9,4(sp)
8110f4b4:	113ffd44 	addi	r4,r2,-11
8110f4b8:	00c00704 	movi	r3,28
8110f4bc:	1900ed16 	blt	r3,r4,8110f874 <__muldf3+0x5c8>
8110f4c0:	00c00744 	movi	r3,29
8110f4c4:	147ffe04 	addi	r17,r2,-8
8110f4c8:	1907c83a 	sub	r3,r3,r4
8110f4cc:	8460983a 	sll	r16,r16,r17
8110f4d0:	98c6d83a 	srl	r3,r19,r3
8110f4d4:	9c68983a 	sll	r20,r19,r17
8110f4d8:	1c20b03a 	or	r16,r3,r16
8110f4dc:	1080fcc4 	addi	r2,r2,1011
8110f4e0:	00a5c83a 	sub	r18,zero,r2
8110f4e4:	0027883a 	mov	r19,zero
8110f4e8:	0039883a 	mov	fp,zero
8110f4ec:	003f9006 	br	8110f330 <__reset+0xfb0ef330>
8110f4f0:	3446b03a 	or	r3,r6,r17
8110f4f4:	1800261e 	bne	r3,zero,8110f590 <__muldf3+0x2e4>
8110f4f8:	0023883a 	mov	r17,zero
8110f4fc:	0011883a 	mov	r8,zero
8110f500:	01400084 	movi	r5,2
8110f504:	003f9c06 	br	8110f378 <__reset+0xfb0ef378>
8110f508:	3446b03a 	or	r3,r6,r17
8110f50c:	18001c26 	beq	r3,zero,8110f580 <__muldf3+0x2d4>
8110f510:	8800ce26 	beq	r17,zero,8110f84c <__muldf3+0x5a0>
8110f514:	8809883a 	mov	r4,r17
8110f518:	d9800215 	stw	r6,8(sp)
8110f51c:	da400115 	stw	r9,4(sp)
8110f520:	da800015 	stw	r10,0(sp)
8110f524:	110fc8c0 	call	8110fc8c <__clzsi2>
8110f528:	d9800217 	ldw	r6,8(sp)
8110f52c:	da400117 	ldw	r9,4(sp)
8110f530:	da800017 	ldw	r10,0(sp)
8110f534:	113ffd44 	addi	r4,r2,-11
8110f538:	00c00704 	movi	r3,28
8110f53c:	1900bf16 	blt	r3,r4,8110f83c <__muldf3+0x590>
8110f540:	00c00744 	movi	r3,29
8110f544:	123ffe04 	addi	r8,r2,-8
8110f548:	1907c83a 	sub	r3,r3,r4
8110f54c:	8a22983a 	sll	r17,r17,r8
8110f550:	30c6d83a 	srl	r3,r6,r3
8110f554:	3210983a 	sll	r8,r6,r8
8110f558:	1c62b03a 	or	r17,r3,r17
8110f55c:	1080fcc4 	addi	r2,r2,1011
8110f560:	0085c83a 	sub	r2,zero,r2
8110f564:	000b883a 	mov	r5,zero
8110f568:	003f8306 	br	8110f378 <__reset+0xfb0ef378>
8110f56c:	b02b883a 	mov	r21,r22
8110f570:	0081ffc4 	movi	r2,2047
8110f574:	000b883a 	mov	r5,zero
8110f578:	0029883a 	mov	r20,zero
8110f57c:	003fac06 	br	8110f430 <__reset+0xfb0ef430>
8110f580:	0023883a 	mov	r17,zero
8110f584:	0011883a 	mov	r8,zero
8110f588:	01400044 	movi	r5,1
8110f58c:	003f7a06 	br	8110f378 <__reset+0xfb0ef378>
8110f590:	014000c4 	movi	r5,3
8110f594:	003f7806 	br	8110f378 <__reset+0xfb0ef378>
8110f598:	04c00104 	movi	r19,4
8110f59c:	0021883a 	mov	r16,zero
8110f5a0:	0029883a 	mov	r20,zero
8110f5a4:	07000044 	movi	fp,1
8110f5a8:	003f6106 	br	8110f330 <__reset+0xfb0ef330>
8110f5ac:	04c00304 	movi	r19,12
8110f5b0:	070000c4 	movi	fp,3
8110f5b4:	003f5e06 	br	8110f330 <__reset+0xfb0ef330>
8110f5b8:	01400434 	movhi	r5,16
8110f5bc:	002b883a 	mov	r21,zero
8110f5c0:	297fffc4 	addi	r5,r5,-1
8110f5c4:	053fffc4 	movi	r20,-1
8110f5c8:	0081ffc4 	movi	r2,2047
8110f5cc:	003f9806 	br	8110f430 <__reset+0xfb0ef430>
8110f5d0:	8023883a 	mov	r17,r16
8110f5d4:	a011883a 	mov	r8,r20
8110f5d8:	e00b883a 	mov	r5,fp
8110f5dc:	003f8a06 	br	8110f408 <__reset+0xfb0ef408>
8110f5e0:	8023883a 	mov	r17,r16
8110f5e4:	a011883a 	mov	r8,r20
8110f5e8:	482d883a 	mov	r22,r9
8110f5ec:	e00b883a 	mov	r5,fp
8110f5f0:	003f8506 	br	8110f408 <__reset+0xfb0ef408>
8110f5f4:	a00ad43a 	srli	r5,r20,16
8110f5f8:	401ad43a 	srli	r13,r8,16
8110f5fc:	a53fffcc 	andi	r20,r20,65535
8110f600:	423fffcc 	andi	r8,r8,65535
8110f604:	4519383a 	mul	r12,r8,r20
8110f608:	4147383a 	mul	r3,r8,r5
8110f60c:	6d09383a 	mul	r4,r13,r20
8110f610:	600cd43a 	srli	r6,r12,16
8110f614:	2b5d383a 	mul	r14,r5,r13
8110f618:	20c9883a 	add	r4,r4,r3
8110f61c:	310d883a 	add	r6,r6,r4
8110f620:	30c0022e 	bgeu	r6,r3,8110f62c <__muldf3+0x380>
8110f624:	00c00074 	movhi	r3,1
8110f628:	70dd883a 	add	r14,r14,r3
8110f62c:	8826d43a 	srli	r19,r17,16
8110f630:	8bffffcc 	andi	r15,r17,65535
8110f634:	7d23383a 	mul	r17,r15,r20
8110f638:	7949383a 	mul	r4,r15,r5
8110f63c:	9d29383a 	mul	r20,r19,r20
8110f640:	8814d43a 	srli	r10,r17,16
8110f644:	3012943a 	slli	r9,r6,16
8110f648:	a129883a 	add	r20,r20,r4
8110f64c:	633fffcc 	andi	r12,r12,65535
8110f650:	5515883a 	add	r10,r10,r20
8110f654:	3006d43a 	srli	r3,r6,16
8110f658:	4b13883a 	add	r9,r9,r12
8110f65c:	2ccb383a 	mul	r5,r5,r19
8110f660:	5100022e 	bgeu	r10,r4,8110f66c <__muldf3+0x3c0>
8110f664:	01000074 	movhi	r4,1
8110f668:	290b883a 	add	r5,r5,r4
8110f66c:	802ad43a 	srli	r21,r16,16
8110f670:	843fffcc 	andi	r16,r16,65535
8110f674:	440d383a 	mul	r6,r8,r16
8110f678:	4565383a 	mul	r18,r8,r21
8110f67c:	8349383a 	mul	r4,r16,r13
8110f680:	500e943a 	slli	r7,r10,16
8110f684:	3010d43a 	srli	r8,r6,16
8110f688:	5028d43a 	srli	r20,r10,16
8110f68c:	2489883a 	add	r4,r4,r18
8110f690:	8abfffcc 	andi	r10,r17,65535
8110f694:	3a95883a 	add	r10,r7,r10
8110f698:	4119883a 	add	r12,r8,r4
8110f69c:	a169883a 	add	r20,r20,r5
8110f6a0:	1a87883a 	add	r3,r3,r10
8110f6a4:	6d5b383a 	mul	r13,r13,r21
8110f6a8:	6480022e 	bgeu	r12,r18,8110f6b4 <__muldf3+0x408>
8110f6ac:	01000074 	movhi	r4,1
8110f6b0:	691b883a 	add	r13,r13,r4
8110f6b4:	7c25383a 	mul	r18,r15,r16
8110f6b8:	7d4b383a 	mul	r5,r15,r21
8110f6bc:	84cf383a 	mul	r7,r16,r19
8110f6c0:	901ed43a 	srli	r15,r18,16
8110f6c4:	6008d43a 	srli	r4,r12,16
8110f6c8:	6010943a 	slli	r8,r12,16
8110f6cc:	394f883a 	add	r7,r7,r5
8110f6d0:	333fffcc 	andi	r12,r6,65535
8110f6d4:	79df883a 	add	r15,r15,r7
8110f6d8:	235b883a 	add	r13,r4,r13
8110f6dc:	9d63383a 	mul	r17,r19,r21
8110f6e0:	4309883a 	add	r4,r8,r12
8110f6e4:	7940022e 	bgeu	r15,r5,8110f6f0 <__muldf3+0x444>
8110f6e8:	01400074 	movhi	r5,1
8110f6ec:	8963883a 	add	r17,r17,r5
8110f6f0:	780a943a 	slli	r5,r15,16
8110f6f4:	91bfffcc 	andi	r6,r18,65535
8110f6f8:	70c7883a 	add	r3,r14,r3
8110f6fc:	298d883a 	add	r6,r5,r6
8110f700:	1a8f803a 	cmpltu	r7,r3,r10
8110f704:	350b883a 	add	r5,r6,r20
8110f708:	20c7883a 	add	r3,r4,r3
8110f70c:	3955883a 	add	r10,r7,r5
8110f710:	1909803a 	cmpltu	r4,r3,r4
8110f714:	6a91883a 	add	r8,r13,r10
8110f718:	780cd43a 	srli	r6,r15,16
8110f71c:	2219883a 	add	r12,r4,r8
8110f720:	2d0b803a 	cmpltu	r5,r5,r20
8110f724:	51cf803a 	cmpltu	r7,r10,r7
8110f728:	29ceb03a 	or	r7,r5,r7
8110f72c:	4351803a 	cmpltu	r8,r8,r13
8110f730:	610b803a 	cmpltu	r5,r12,r4
8110f734:	4148b03a 	or	r4,r8,r5
8110f738:	398f883a 	add	r7,r7,r6
8110f73c:	3909883a 	add	r4,r7,r4
8110f740:	1810927a 	slli	r8,r3,9
8110f744:	2449883a 	add	r4,r4,r17
8110f748:	2008927a 	slli	r4,r4,9
8110f74c:	6022d5fa 	srli	r17,r12,23
8110f750:	1806d5fa 	srli	r3,r3,23
8110f754:	4252b03a 	or	r9,r8,r9
8110f758:	600a927a 	slli	r5,r12,9
8110f75c:	4810c03a 	cmpne	r8,r9,zero
8110f760:	2462b03a 	or	r17,r4,r17
8110f764:	40c6b03a 	or	r3,r8,r3
8110f768:	8900402c 	andhi	r4,r17,256
8110f76c:	1950b03a 	or	r8,r3,r5
8110f770:	20000726 	beq	r4,zero,8110f790 <__muldf3+0x4e4>
8110f774:	4006d07a 	srli	r3,r8,1
8110f778:	880497fa 	slli	r2,r17,31
8110f77c:	4200004c 	andi	r8,r8,1
8110f780:	8822d07a 	srli	r17,r17,1
8110f784:	1a10b03a 	or	r8,r3,r8
8110f788:	1210b03a 	or	r8,r2,r8
8110f78c:	5805883a 	mov	r2,r11
8110f790:	1140ffc4 	addi	r5,r2,1023
8110f794:	0140440e 	bge	zero,r5,8110f8a8 <__muldf3+0x5fc>
8110f798:	40c001cc 	andi	r3,r8,7
8110f79c:	18000726 	beq	r3,zero,8110f7bc <__muldf3+0x510>
8110f7a0:	40c003cc 	andi	r3,r8,15
8110f7a4:	01000104 	movi	r4,4
8110f7a8:	19000426 	beq	r3,r4,8110f7bc <__muldf3+0x510>
8110f7ac:	4107883a 	add	r3,r8,r4
8110f7b0:	1a11803a 	cmpltu	r8,r3,r8
8110f7b4:	8a23883a 	add	r17,r17,r8
8110f7b8:	1811883a 	mov	r8,r3
8110f7bc:	88c0402c 	andhi	r3,r17,256
8110f7c0:	18000426 	beq	r3,zero,8110f7d4 <__muldf3+0x528>
8110f7c4:	11410004 	addi	r5,r2,1024
8110f7c8:	00bfc034 	movhi	r2,65280
8110f7cc:	10bfffc4 	addi	r2,r2,-1
8110f7d0:	88a2703a 	and	r17,r17,r2
8110f7d4:	0081ff84 	movi	r2,2046
8110f7d8:	117f6416 	blt	r2,r5,8110f56c <__reset+0xfb0ef56c>
8110f7dc:	8828977a 	slli	r20,r17,29
8110f7e0:	4010d0fa 	srli	r8,r8,3
8110f7e4:	8822927a 	slli	r17,r17,9
8110f7e8:	2881ffcc 	andi	r2,r5,2047
8110f7ec:	a228b03a 	or	r20,r20,r8
8110f7f0:	880ad33a 	srli	r5,r17,12
8110f7f4:	b02b883a 	mov	r21,r22
8110f7f8:	003f0d06 	br	8110f430 <__reset+0xfb0ef430>
8110f7fc:	8080022c 	andhi	r2,r16,8
8110f800:	10000926 	beq	r2,zero,8110f828 <__muldf3+0x57c>
8110f804:	8880022c 	andhi	r2,r17,8
8110f808:	1000071e 	bne	r2,zero,8110f828 <__muldf3+0x57c>
8110f80c:	00800434 	movhi	r2,16
8110f810:	89400234 	orhi	r5,r17,8
8110f814:	10bfffc4 	addi	r2,r2,-1
8110f818:	b82b883a 	mov	r21,r23
8110f81c:	288a703a 	and	r5,r5,r2
8110f820:	4029883a 	mov	r20,r8
8110f824:	003f6806 	br	8110f5c8 <__reset+0xfb0ef5c8>
8110f828:	00800434 	movhi	r2,16
8110f82c:	81400234 	orhi	r5,r16,8
8110f830:	10bfffc4 	addi	r2,r2,-1
8110f834:	288a703a 	and	r5,r5,r2
8110f838:	003f6306 	br	8110f5c8 <__reset+0xfb0ef5c8>
8110f83c:	147ff604 	addi	r17,r2,-40
8110f840:	3462983a 	sll	r17,r6,r17
8110f844:	0011883a 	mov	r8,zero
8110f848:	003f4406 	br	8110f55c <__reset+0xfb0ef55c>
8110f84c:	3009883a 	mov	r4,r6
8110f850:	d9800215 	stw	r6,8(sp)
8110f854:	da400115 	stw	r9,4(sp)
8110f858:	da800015 	stw	r10,0(sp)
8110f85c:	110fc8c0 	call	8110fc8c <__clzsi2>
8110f860:	10800804 	addi	r2,r2,32
8110f864:	da800017 	ldw	r10,0(sp)
8110f868:	da400117 	ldw	r9,4(sp)
8110f86c:	d9800217 	ldw	r6,8(sp)
8110f870:	003f3006 	br	8110f534 <__reset+0xfb0ef534>
8110f874:	143ff604 	addi	r16,r2,-40
8110f878:	9c20983a 	sll	r16,r19,r16
8110f87c:	0029883a 	mov	r20,zero
8110f880:	003f1606 	br	8110f4dc <__reset+0xfb0ef4dc>
8110f884:	d9800215 	stw	r6,8(sp)
8110f888:	d9c00015 	stw	r7,0(sp)
8110f88c:	da400115 	stw	r9,4(sp)
8110f890:	110fc8c0 	call	8110fc8c <__clzsi2>
8110f894:	10800804 	addi	r2,r2,32
8110f898:	da400117 	ldw	r9,4(sp)
8110f89c:	d9c00017 	ldw	r7,0(sp)
8110f8a0:	d9800217 	ldw	r6,8(sp)
8110f8a4:	003f0306 	br	8110f4b4 <__reset+0xfb0ef4b4>
8110f8a8:	00c00044 	movi	r3,1
8110f8ac:	1947c83a 	sub	r3,r3,r5
8110f8b0:	00800e04 	movi	r2,56
8110f8b4:	10feda16 	blt	r2,r3,8110f420 <__reset+0xfb0ef420>
8110f8b8:	008007c4 	movi	r2,31
8110f8bc:	10c01b16 	blt	r2,r3,8110f92c <__muldf3+0x680>
8110f8c0:	00800804 	movi	r2,32
8110f8c4:	10c5c83a 	sub	r2,r2,r3
8110f8c8:	888a983a 	sll	r5,r17,r2
8110f8cc:	40c8d83a 	srl	r4,r8,r3
8110f8d0:	4084983a 	sll	r2,r8,r2
8110f8d4:	88e2d83a 	srl	r17,r17,r3
8110f8d8:	2906b03a 	or	r3,r5,r4
8110f8dc:	1004c03a 	cmpne	r2,r2,zero
8110f8e0:	1886b03a 	or	r3,r3,r2
8110f8e4:	188001cc 	andi	r2,r3,7
8110f8e8:	10000726 	beq	r2,zero,8110f908 <__muldf3+0x65c>
8110f8ec:	188003cc 	andi	r2,r3,15
8110f8f0:	01000104 	movi	r4,4
8110f8f4:	11000426 	beq	r2,r4,8110f908 <__muldf3+0x65c>
8110f8f8:	1805883a 	mov	r2,r3
8110f8fc:	10c00104 	addi	r3,r2,4
8110f900:	1885803a 	cmpltu	r2,r3,r2
8110f904:	88a3883a 	add	r17,r17,r2
8110f908:	8880202c 	andhi	r2,r17,128
8110f90c:	10001c26 	beq	r2,zero,8110f980 <__muldf3+0x6d4>
8110f910:	b02b883a 	mov	r21,r22
8110f914:	00800044 	movi	r2,1
8110f918:	000b883a 	mov	r5,zero
8110f91c:	0029883a 	mov	r20,zero
8110f920:	003ec306 	br	8110f430 <__reset+0xfb0ef430>
8110f924:	5805883a 	mov	r2,r11
8110f928:	003f9906 	br	8110f790 <__reset+0xfb0ef790>
8110f92c:	00bff844 	movi	r2,-31
8110f930:	1145c83a 	sub	r2,r2,r5
8110f934:	8888d83a 	srl	r4,r17,r2
8110f938:	00800804 	movi	r2,32
8110f93c:	18801a26 	beq	r3,r2,8110f9a8 <__muldf3+0x6fc>
8110f940:	00801004 	movi	r2,64
8110f944:	10c5c83a 	sub	r2,r2,r3
8110f948:	8884983a 	sll	r2,r17,r2
8110f94c:	1204b03a 	or	r2,r2,r8
8110f950:	1004c03a 	cmpne	r2,r2,zero
8110f954:	2084b03a 	or	r2,r4,r2
8110f958:	144001cc 	andi	r17,r2,7
8110f95c:	88000d1e 	bne	r17,zero,8110f994 <__muldf3+0x6e8>
8110f960:	000b883a 	mov	r5,zero
8110f964:	1028d0fa 	srli	r20,r2,3
8110f968:	b02b883a 	mov	r21,r22
8110f96c:	0005883a 	mov	r2,zero
8110f970:	a468b03a 	or	r20,r20,r17
8110f974:	003eae06 	br	8110f430 <__reset+0xfb0ef430>
8110f978:	1007883a 	mov	r3,r2
8110f97c:	0023883a 	mov	r17,zero
8110f980:	880a927a 	slli	r5,r17,9
8110f984:	1805883a 	mov	r2,r3
8110f988:	8822977a 	slli	r17,r17,29
8110f98c:	280ad33a 	srli	r5,r5,12
8110f990:	003ff406 	br	8110f964 <__reset+0xfb0ef964>
8110f994:	10c003cc 	andi	r3,r2,15
8110f998:	01000104 	movi	r4,4
8110f99c:	193ff626 	beq	r3,r4,8110f978 <__reset+0xfb0ef978>
8110f9a0:	0023883a 	mov	r17,zero
8110f9a4:	003fd506 	br	8110f8fc <__reset+0xfb0ef8fc>
8110f9a8:	0005883a 	mov	r2,zero
8110f9ac:	003fe706 	br	8110f94c <__reset+0xfb0ef94c>
8110f9b0:	00800434 	movhi	r2,16
8110f9b4:	89400234 	orhi	r5,r17,8
8110f9b8:	10bfffc4 	addi	r2,r2,-1
8110f9bc:	b02b883a 	mov	r21,r22
8110f9c0:	288a703a 	and	r5,r5,r2
8110f9c4:	4029883a 	mov	r20,r8
8110f9c8:	003eff06 	br	8110f5c8 <__reset+0xfb0ef5c8>

8110f9cc <__extendsfdf2>:
8110f9cc:	200ad5fa 	srli	r5,r4,23
8110f9d0:	defffd04 	addi	sp,sp,-12
8110f9d4:	de00012e 	bgeu	sp,et,8110f9dc <__extendsfdf2+0x10>
8110f9d8:	003b68fa 	trap	3
8110f9dc:	29403fcc 	andi	r5,r5,255
8110f9e0:	dc400115 	stw	r17,4(sp)
8110f9e4:	29800044 	addi	r6,r5,1
8110f9e8:	04402034 	movhi	r17,128
8110f9ec:	dc000015 	stw	r16,0(sp)
8110f9f0:	8c7fffc4 	addi	r17,r17,-1
8110f9f4:	dfc00215 	stw	ra,8(sp)
8110f9f8:	31803fcc 	andi	r6,r6,255
8110f9fc:	00800044 	movi	r2,1
8110fa00:	8922703a 	and	r17,r17,r4
8110fa04:	2020d7fa 	srli	r16,r4,31
8110fa08:	1180110e 	bge	r2,r6,8110fa50 <__extendsfdf2+0x84>
8110fa0c:	880cd0fa 	srli	r6,r17,3
8110fa10:	8822977a 	slli	r17,r17,29
8110fa14:	2940e004 	addi	r5,r5,896
8110fa18:	2941ffcc 	andi	r5,r5,2047
8110fa1c:	2804953a 	slli	r2,r5,20
8110fa20:	01400434 	movhi	r5,16
8110fa24:	800697fa 	slli	r3,r16,31
8110fa28:	297fffc4 	addi	r5,r5,-1
8110fa2c:	314a703a 	and	r5,r6,r5
8110fa30:	288ab03a 	or	r5,r5,r2
8110fa34:	28c6b03a 	or	r3,r5,r3
8110fa38:	8805883a 	mov	r2,r17
8110fa3c:	dfc00217 	ldw	ra,8(sp)
8110fa40:	dc400117 	ldw	r17,4(sp)
8110fa44:	dc000017 	ldw	r16,0(sp)
8110fa48:	dec00304 	addi	sp,sp,12
8110fa4c:	f800283a 	ret
8110fa50:	2800111e 	bne	r5,zero,8110fa98 <__extendsfdf2+0xcc>
8110fa54:	88001c26 	beq	r17,zero,8110fac8 <__extendsfdf2+0xfc>
8110fa58:	8809883a 	mov	r4,r17
8110fa5c:	110fc8c0 	call	8110fc8c <__clzsi2>
8110fa60:	00c00284 	movi	r3,10
8110fa64:	18801b16 	blt	r3,r2,8110fad4 <__extendsfdf2+0x108>
8110fa68:	018002c4 	movi	r6,11
8110fa6c:	308dc83a 	sub	r6,r6,r2
8110fa70:	11000544 	addi	r4,r2,21
8110fa74:	8986d83a 	srl	r3,r17,r6
8110fa78:	8922983a 	sll	r17,r17,r4
8110fa7c:	0180e244 	movi	r6,905
8110fa80:	01400434 	movhi	r5,16
8110fa84:	3085c83a 	sub	r2,r6,r2
8110fa88:	297fffc4 	addi	r5,r5,-1
8110fa8c:	194c703a 	and	r6,r3,r5
8110fa90:	1141ffcc 	andi	r5,r2,2047
8110fa94:	003fe006 	br	8110fa18 <__reset+0xfb0efa18>
8110fa98:	88000826 	beq	r17,zero,8110fabc <__extendsfdf2+0xf0>
8110fa9c:	880cd0fa 	srli	r6,r17,3
8110faa0:	00800434 	movhi	r2,16
8110faa4:	10bfffc4 	addi	r2,r2,-1
8110faa8:	31800234 	orhi	r6,r6,8
8110faac:	8822977a 	slli	r17,r17,29
8110fab0:	308c703a 	and	r6,r6,r2
8110fab4:	0141ffc4 	movi	r5,2047
8110fab8:	003fd706 	br	8110fa18 <__reset+0xfb0efa18>
8110fabc:	0141ffc4 	movi	r5,2047
8110fac0:	000d883a 	mov	r6,zero
8110fac4:	003fd406 	br	8110fa18 <__reset+0xfb0efa18>
8110fac8:	000b883a 	mov	r5,zero
8110facc:	000d883a 	mov	r6,zero
8110fad0:	003fd106 	br	8110fa18 <__reset+0xfb0efa18>
8110fad4:	11bffd44 	addi	r6,r2,-11
8110fad8:	8986983a 	sll	r3,r17,r6
8110fadc:	0023883a 	mov	r17,zero
8110fae0:	003fe606 	br	8110fa7c <__reset+0xfb0efa7c>

8110fae4 <__truncdfsf2>:
8110fae4:	2810d53a 	srli	r8,r5,20
8110fae8:	01c00434 	movhi	r7,16
8110faec:	39ffffc4 	addi	r7,r7,-1
8110faf0:	29ce703a 	and	r7,r5,r7
8110faf4:	4201ffcc 	andi	r8,r8,2047
8110faf8:	380e90fa 	slli	r7,r7,3
8110fafc:	200cd77a 	srli	r6,r4,29
8110fb00:	42400044 	addi	r9,r8,1
8110fb04:	4a41ffcc 	andi	r9,r9,2047
8110fb08:	00c00044 	movi	r3,1
8110fb0c:	280ad7fa 	srli	r5,r5,31
8110fb10:	31ceb03a 	or	r7,r6,r7
8110fb14:	200490fa 	slli	r2,r4,3
8110fb18:	1a40230e 	bge	r3,r9,8110fba8 <__truncdfsf2+0xc4>
8110fb1c:	40ff2004 	addi	r3,r8,-896
8110fb20:	01803f84 	movi	r6,254
8110fb24:	30c01516 	blt	r6,r3,8110fb7c <__truncdfsf2+0x98>
8110fb28:	00c0380e 	bge	zero,r3,8110fc0c <__truncdfsf2+0x128>
8110fb2c:	200c91ba 	slli	r6,r4,6
8110fb30:	380e90fa 	slli	r7,r7,3
8110fb34:	1004d77a 	srli	r2,r2,29
8110fb38:	300cc03a 	cmpne	r6,r6,zero
8110fb3c:	31ccb03a 	or	r6,r6,r7
8110fb40:	308cb03a 	or	r6,r6,r2
8110fb44:	308001cc 	andi	r2,r6,7
8110fb48:	10000426 	beq	r2,zero,8110fb5c <__truncdfsf2+0x78>
8110fb4c:	308003cc 	andi	r2,r6,15
8110fb50:	01000104 	movi	r4,4
8110fb54:	11000126 	beq	r2,r4,8110fb5c <__truncdfsf2+0x78>
8110fb58:	31800104 	addi	r6,r6,4
8110fb5c:	3081002c 	andhi	r2,r6,1024
8110fb60:	10001626 	beq	r2,zero,8110fbbc <__truncdfsf2+0xd8>
8110fb64:	18c00044 	addi	r3,r3,1
8110fb68:	00803fc4 	movi	r2,255
8110fb6c:	18800326 	beq	r3,r2,8110fb7c <__truncdfsf2+0x98>
8110fb70:	300c91ba 	slli	r6,r6,6
8110fb74:	300cd27a 	srli	r6,r6,9
8110fb78:	00000206 	br	8110fb84 <__truncdfsf2+0xa0>
8110fb7c:	00ffffc4 	movi	r3,-1
8110fb80:	000d883a 	mov	r6,zero
8110fb84:	18c03fcc 	andi	r3,r3,255
8110fb88:	180895fa 	slli	r4,r3,23
8110fb8c:	00c02034 	movhi	r3,128
8110fb90:	280a97fa 	slli	r5,r5,31
8110fb94:	18ffffc4 	addi	r3,r3,-1
8110fb98:	30c6703a 	and	r3,r6,r3
8110fb9c:	1906b03a 	or	r3,r3,r4
8110fba0:	1944b03a 	or	r2,r3,r5
8110fba4:	f800283a 	ret
8110fba8:	40000b1e 	bne	r8,zero,8110fbd8 <__truncdfsf2+0xf4>
8110fbac:	388cb03a 	or	r6,r7,r2
8110fbb0:	0007883a 	mov	r3,zero
8110fbb4:	30000426 	beq	r6,zero,8110fbc8 <__truncdfsf2+0xe4>
8110fbb8:	01800144 	movi	r6,5
8110fbbc:	00803fc4 	movi	r2,255
8110fbc0:	300cd0fa 	srli	r6,r6,3
8110fbc4:	18800a26 	beq	r3,r2,8110fbf0 <__truncdfsf2+0x10c>
8110fbc8:	00802034 	movhi	r2,128
8110fbcc:	10bfffc4 	addi	r2,r2,-1
8110fbd0:	308c703a 	and	r6,r6,r2
8110fbd4:	003feb06 	br	8110fb84 <__reset+0xfb0efb84>
8110fbd8:	3888b03a 	or	r4,r7,r2
8110fbdc:	203fe726 	beq	r4,zero,8110fb7c <__reset+0xfb0efb7c>
8110fbe0:	380c90fa 	slli	r6,r7,3
8110fbe4:	00c03fc4 	movi	r3,255
8110fbe8:	31808034 	orhi	r6,r6,512
8110fbec:	003fd506 	br	8110fb44 <__reset+0xfb0efb44>
8110fbf0:	303fe226 	beq	r6,zero,8110fb7c <__reset+0xfb0efb7c>
8110fbf4:	00802034 	movhi	r2,128
8110fbf8:	31801034 	orhi	r6,r6,64
8110fbfc:	10bfffc4 	addi	r2,r2,-1
8110fc00:	00ffffc4 	movi	r3,-1
8110fc04:	308c703a 	and	r6,r6,r2
8110fc08:	003fde06 	br	8110fb84 <__reset+0xfb0efb84>
8110fc0c:	013ffa44 	movi	r4,-23
8110fc10:	19000e16 	blt	r3,r4,8110fc4c <__truncdfsf2+0x168>
8110fc14:	01000784 	movi	r4,30
8110fc18:	20c9c83a 	sub	r4,r4,r3
8110fc1c:	018007c4 	movi	r6,31
8110fc20:	39c02034 	orhi	r7,r7,128
8110fc24:	31000b16 	blt	r6,r4,8110fc54 <__truncdfsf2+0x170>
8110fc28:	423f2084 	addi	r8,r8,-894
8110fc2c:	120c983a 	sll	r6,r2,r8
8110fc30:	3a0e983a 	sll	r7,r7,r8
8110fc34:	1104d83a 	srl	r2,r2,r4
8110fc38:	300cc03a 	cmpne	r6,r6,zero
8110fc3c:	31ceb03a 	or	r7,r6,r7
8110fc40:	388cb03a 	or	r6,r7,r2
8110fc44:	0007883a 	mov	r3,zero
8110fc48:	003fbe06 	br	8110fb44 <__reset+0xfb0efb44>
8110fc4c:	0007883a 	mov	r3,zero
8110fc50:	003fd906 	br	8110fbb8 <__reset+0xfb0efbb8>
8110fc54:	01bfff84 	movi	r6,-2
8110fc58:	30cdc83a 	sub	r6,r6,r3
8110fc5c:	00c00804 	movi	r3,32
8110fc60:	398cd83a 	srl	r6,r7,r6
8110fc64:	20c00726 	beq	r4,r3,8110fc84 <__truncdfsf2+0x1a0>
8110fc68:	423f2884 	addi	r8,r8,-862
8110fc6c:	3a0e983a 	sll	r7,r7,r8
8110fc70:	3884b03a 	or	r2,r7,r2
8110fc74:	1004c03a 	cmpne	r2,r2,zero
8110fc78:	118cb03a 	or	r6,r2,r6
8110fc7c:	0007883a 	mov	r3,zero
8110fc80:	003fb006 	br	8110fb44 <__reset+0xfb0efb44>
8110fc84:	000f883a 	mov	r7,zero
8110fc88:	003ff906 	br	8110fc70 <__reset+0xfb0efc70>

8110fc8c <__clzsi2>:
8110fc8c:	00bfffd4 	movui	r2,65535
8110fc90:	11000536 	bltu	r2,r4,8110fca8 <__clzsi2+0x1c>
8110fc94:	00803fc4 	movi	r2,255
8110fc98:	11000f36 	bltu	r2,r4,8110fcd8 <__clzsi2+0x4c>
8110fc9c:	00800804 	movi	r2,32
8110fca0:	0007883a 	mov	r3,zero
8110fca4:	00000506 	br	8110fcbc <__clzsi2+0x30>
8110fca8:	00804034 	movhi	r2,256
8110fcac:	10bfffc4 	addi	r2,r2,-1
8110fcb0:	11000c2e 	bgeu	r2,r4,8110fce4 <__clzsi2+0x58>
8110fcb4:	00800204 	movi	r2,8
8110fcb8:	00c00604 	movi	r3,24
8110fcbc:	20c8d83a 	srl	r4,r4,r3
8110fcc0:	00e04534 	movhi	r3,33044
8110fcc4:	18f01904 	addi	r3,r3,-16284
8110fcc8:	1909883a 	add	r4,r3,r4
8110fccc:	20c00003 	ldbu	r3,0(r4)
8110fcd0:	10c5c83a 	sub	r2,r2,r3
8110fcd4:	f800283a 	ret
8110fcd8:	00800604 	movi	r2,24
8110fcdc:	00c00204 	movi	r3,8
8110fce0:	003ff606 	br	8110fcbc <__reset+0xfb0efcbc>
8110fce4:	00800404 	movi	r2,16
8110fce8:	1007883a 	mov	r3,r2
8110fcec:	003ff306 	br	8110fcbc <__reset+0xfb0efcbc>

8110fcf0 <atoi>:
8110fcf0:	01800284 	movi	r6,10
8110fcf4:	000b883a 	mov	r5,zero
8110fcf8:	1111aa01 	jmpi	81111aa0 <strtol>

8110fcfc <_atoi_r>:
8110fcfc:	01c00284 	movi	r7,10
8110fd00:	000d883a 	mov	r6,zero
8110fd04:	11118601 	jmpi	81111860 <_strtol_r>

8110fd08 <_fopen_r>:
8110fd08:	defffa04 	addi	sp,sp,-24
8110fd0c:	3005883a 	mov	r2,r6
8110fd10:	de00012e 	bgeu	sp,et,8110fd18 <_fopen_r+0x10>
8110fd14:	003b68fa 	trap	3
8110fd18:	d80d883a 	mov	r6,sp
8110fd1c:	dcc00415 	stw	r19,16(sp)
8110fd20:	2827883a 	mov	r19,r5
8110fd24:	100b883a 	mov	r5,r2
8110fd28:	dc800315 	stw	r18,12(sp)
8110fd2c:	dfc00515 	stw	ra,20(sp)
8110fd30:	dc400215 	stw	r17,8(sp)
8110fd34:	dc000115 	stw	r16,4(sp)
8110fd38:	2025883a 	mov	r18,r4
8110fd3c:	11199480 	call	81119948 <__sflags>
8110fd40:	10002726 	beq	r2,zero,8110fde0 <_fopen_r+0xd8>
8110fd44:	9009883a 	mov	r4,r18
8110fd48:	1023883a 	mov	r17,r2
8110fd4c:	11197c00 	call	811197c0 <__sfp>
8110fd50:	1021883a 	mov	r16,r2
8110fd54:	10002226 	beq	r2,zero,8110fde0 <_fopen_r+0xd8>
8110fd58:	d9800017 	ldw	r6,0(sp)
8110fd5c:	01c06d84 	movi	r7,438
8110fd60:	980b883a 	mov	r5,r19
8110fd64:	9009883a 	mov	r4,r18
8110fd68:	11110c40 	call	811110c4 <_open_r>
8110fd6c:	10001916 	blt	r2,zero,8110fdd4 <_fopen_r+0xcc>
8110fd70:	8080038d 	sth	r2,14(r16)
8110fd74:	00a04474 	movhi	r2,33041
8110fd78:	10858a04 	addi	r2,r2,5672
8110fd7c:	80800815 	stw	r2,32(r16)
8110fd80:	00a04474 	movhi	r2,33041
8110fd84:	1085a304 	addi	r2,r2,5772
8110fd88:	80800915 	stw	r2,36(r16)
8110fd8c:	00a04474 	movhi	r2,33041
8110fd90:	1085c404 	addi	r2,r2,5904
8110fd94:	80800a15 	stw	r2,40(r16)
8110fd98:	00a04474 	movhi	r2,33041
8110fd9c:	1085dd04 	addi	r2,r2,6004
8110fda0:	8440030d 	sth	r17,12(r16)
8110fda4:	84000715 	stw	r16,28(r16)
8110fda8:	80800b15 	stw	r2,44(r16)
8110fdac:	8c40400c 	andi	r17,r17,256
8110fdb0:	88000d1e 	bne	r17,zero,8110fde8 <_fopen_r+0xe0>
8110fdb4:	8005883a 	mov	r2,r16
8110fdb8:	dfc00517 	ldw	ra,20(sp)
8110fdbc:	dcc00417 	ldw	r19,16(sp)
8110fdc0:	dc800317 	ldw	r18,12(sp)
8110fdc4:	dc400217 	ldw	r17,8(sp)
8110fdc8:	dc000117 	ldw	r16,4(sp)
8110fdcc:	dec00604 	addi	sp,sp,24
8110fdd0:	f800283a 	ret
8110fdd4:	11199080 	call	81119908 <__sfp_lock_acquire>
8110fdd8:	8000030d 	sth	zero,12(r16)
8110fddc:	111990c0 	call	8111990c <__sfp_lock_release>
8110fde0:	0005883a 	mov	r2,zero
8110fde4:	003ff406 	br	8110fdb8 <__reset+0xfb0efdb8>
8110fde8:	01c00084 	movi	r7,2
8110fdec:	000d883a 	mov	r6,zero
8110fdf0:	800b883a 	mov	r5,r16
8110fdf4:	9009883a 	mov	r4,r18
8110fdf8:	110fe780 	call	8110fe78 <_fseek_r>
8110fdfc:	8005883a 	mov	r2,r16
8110fe00:	003fed06 	br	8110fdb8 <__reset+0xfb0efdb8>

8110fe04 <fopen>:
8110fe04:	00a04534 	movhi	r2,33044
8110fe08:	10ba0604 	addi	r2,r2,-6120
8110fe0c:	280d883a 	mov	r6,r5
8110fe10:	200b883a 	mov	r5,r4
8110fe14:	11000017 	ldw	r4,0(r2)
8110fe18:	110fd081 	jmpi	8110fd08 <_fopen_r>

8110fe1c <_fprintf_r>:
8110fe1c:	defffe04 	addi	sp,sp,-8
8110fe20:	2809883a 	mov	r4,r5
8110fe24:	300b883a 	mov	r5,r6
8110fe28:	de00012e 	bgeu	sp,et,8110fe30 <_fprintf_r+0x14>
8110fe2c:	003b68fa 	trap	3
8110fe30:	dfc00015 	stw	ra,0(sp)
8110fe34:	d9c00115 	stw	r7,4(sp)
8110fe38:	d9800104 	addi	r6,sp,4
8110fe3c:	1115e9c0 	call	81115e9c <__vfprintf_internal>
8110fe40:	dfc00017 	ldw	ra,0(sp)
8110fe44:	dec00204 	addi	sp,sp,8
8110fe48:	f800283a 	ret

8110fe4c <fprintf>:
8110fe4c:	defffd04 	addi	sp,sp,-12
8110fe50:	de00012e 	bgeu	sp,et,8110fe58 <fprintf+0xc>
8110fe54:	003b68fa 	trap	3
8110fe58:	dfc00015 	stw	ra,0(sp)
8110fe5c:	d9800115 	stw	r6,4(sp)
8110fe60:	d9c00215 	stw	r7,8(sp)
8110fe64:	d9800104 	addi	r6,sp,4
8110fe68:	1115e9c0 	call	81115e9c <__vfprintf_internal>
8110fe6c:	dfc00017 	ldw	ra,0(sp)
8110fe70:	dec00304 	addi	sp,sp,12
8110fe74:	f800283a 	ret

8110fe78 <_fseek_r>:
8110fe78:	110fe981 	jmpi	8110fe98 <_fseeko_r>

8110fe7c <fseek>:
8110fe7c:	00a04534 	movhi	r2,33044
8110fe80:	10ba0604 	addi	r2,r2,-6120
8110fe84:	300f883a 	mov	r7,r6
8110fe88:	280d883a 	mov	r6,r5
8110fe8c:	200b883a 	mov	r5,r4
8110fe90:	11000017 	ldw	r4,0(r2)
8110fe94:	110fe981 	jmpi	8110fe98 <_fseeko_r>

8110fe98 <_fseeko_r>:
8110fe98:	deffe804 	addi	sp,sp,-96
8110fe9c:	de00012e 	bgeu	sp,et,8110fea4 <_fseeko_r+0xc>
8110fea0:	003b68fa 	trap	3
8110fea4:	dd401415 	stw	r21,80(sp)
8110fea8:	dc801115 	stw	r18,68(sp)
8110feac:	dc401015 	stw	r17,64(sp)
8110feb0:	dc000f15 	stw	r16,60(sp)
8110feb4:	dfc01715 	stw	ra,92(sp)
8110feb8:	ddc01615 	stw	r23,88(sp)
8110febc:	dd801515 	stw	r22,84(sp)
8110fec0:	dd001315 	stw	r20,76(sp)
8110fec4:	dcc01215 	stw	r19,72(sp)
8110fec8:	2023883a 	mov	r17,r4
8110fecc:	2821883a 	mov	r16,r5
8110fed0:	302b883a 	mov	r21,r6
8110fed4:	3825883a 	mov	r18,r7
8110fed8:	20000226 	beq	r4,zero,8110fee4 <_fseeko_r+0x4c>
8110fedc:	20800e17 	ldw	r2,56(r4)
8110fee0:	10005a26 	beq	r2,zero,8111004c <_fseeko_r+0x1b4>
8110fee4:	8080030b 	ldhu	r2,12(r16)
8110fee8:	00c04204 	movi	r3,264
8110feec:	1080420c 	andi	r2,r2,264
8110fef0:	10c05b26 	beq	r2,r3,81110060 <_fseeko_r+0x1c8>
8110fef4:	85000a17 	ldw	r20,40(r16)
8110fef8:	a000f626 	beq	r20,zero,811102d4 <_fseeko_r+0x43c>
8110fefc:	00800044 	movi	r2,1
8110ff00:	90803e26 	beq	r18,r2,8110fffc <_fseeko_r+0x164>
8110ff04:	00800084 	movi	r2,2
8110ff08:	90801026 	beq	r18,r2,8110ff4c <_fseeko_r+0xb4>
8110ff0c:	90000f26 	beq	r18,zero,8110ff4c <_fseeko_r+0xb4>
8110ff10:	00800584 	movi	r2,22
8110ff14:	88800015 	stw	r2,0(r17)
8110ff18:	04ffffc4 	movi	r19,-1
8110ff1c:	9805883a 	mov	r2,r19
8110ff20:	dfc01717 	ldw	ra,92(sp)
8110ff24:	ddc01617 	ldw	r23,88(sp)
8110ff28:	dd801517 	ldw	r22,84(sp)
8110ff2c:	dd401417 	ldw	r21,80(sp)
8110ff30:	dd001317 	ldw	r20,76(sp)
8110ff34:	dcc01217 	ldw	r19,72(sp)
8110ff38:	dc801117 	ldw	r18,68(sp)
8110ff3c:	dc401017 	ldw	r17,64(sp)
8110ff40:	dc000f17 	ldw	r16,60(sp)
8110ff44:	dec01804 	addi	sp,sp,96
8110ff48:	f800283a 	ret
8110ff4c:	80800417 	ldw	r2,16(r16)
8110ff50:	002f883a 	mov	r23,zero
8110ff54:	0027883a 	mov	r19,zero
8110ff58:	1000cb26 	beq	r2,zero,81110288 <_fseeko_r+0x3f0>
8110ff5c:	8080030b 	ldhu	r2,12(r16)
8110ff60:	10c2068c 	andi	r3,r2,2074
8110ff64:	1800071e 	bne	r3,zero,8110ff84 <_fseeko_r+0xec>
8110ff68:	10c1000c 	andi	r3,r2,1024
8110ff6c:	1800451e 	bne	r3,zero,81110084 <_fseeko_r+0x1ec>
8110ff70:	00e04474 	movhi	r3,33041
8110ff74:	18c5c404 	addi	r3,r3,5904
8110ff78:	a0c0b726 	beq	r20,r3,81110258 <_fseeko_r+0x3c0>
8110ff7c:	10820014 	ori	r2,r2,2048
8110ff80:	8080030d 	sth	r2,12(r16)
8110ff84:	800b883a 	mov	r5,r16
8110ff88:	8809883a 	mov	r4,r17
8110ff8c:	11194fc0 	call	811194fc <_fflush_r>
8110ff90:	1027883a 	mov	r19,r2
8110ff94:	103fe01e 	bne	r2,zero,8110ff18 <__reset+0xfb0eff18>
8110ff98:	81400717 	ldw	r5,28(r16)
8110ff9c:	900f883a 	mov	r7,r18
8110ffa0:	a80d883a 	mov	r6,r21
8110ffa4:	8809883a 	mov	r4,r17
8110ffa8:	a03ee83a 	callr	r20
8110ffac:	00ffffc4 	movi	r3,-1
8110ffb0:	10ffd926 	beq	r2,r3,8110ff18 <__reset+0xfb0eff18>
8110ffb4:	81400c17 	ldw	r5,48(r16)
8110ffb8:	28000526 	beq	r5,zero,8110ffd0 <_fseeko_r+0x138>
8110ffbc:	80801004 	addi	r2,r16,64
8110ffc0:	28800226 	beq	r5,r2,8110ffcc <_fseeko_r+0x134>
8110ffc4:	8809883a 	mov	r4,r17
8110ffc8:	1119d900 	call	81119d90 <_free_r>
8110ffcc:	80000c15 	stw	zero,48(r16)
8110ffd0:	8080030b 	ldhu	r2,12(r16)
8110ffd4:	80c00417 	ldw	r3,16(r16)
8110ffd8:	80000115 	stw	zero,4(r16)
8110ffdc:	10bdf7cc 	andi	r2,r2,63455
8110ffe0:	80c00015 	stw	r3,0(r16)
8110ffe4:	8080030d 	sth	r2,12(r16)
8110ffe8:	01800204 	movi	r6,8
8110ffec:	000b883a 	mov	r5,zero
8110fff0:	81001704 	addi	r4,r16,92
8110fff4:	1110f9c0 	call	81110f9c <memset>
8110fff8:	003fc806 	br	8110ff1c <__reset+0xfb0eff1c>
8110fffc:	800b883a 	mov	r5,r16
81110000:	8809883a 	mov	r4,r17
81110004:	11194fc0 	call	811194fc <_fflush_r>
81110008:	8080030b 	ldhu	r2,12(r16)
8111000c:	10c4000c 	andi	r3,r2,4096
81110010:	18008726 	beq	r3,zero,81110230 <_fseeko_r+0x398>
81110014:	84c01417 	ldw	r19,80(r16)
81110018:	10c0010c 	andi	r3,r2,4
8111001c:	1800431e 	bne	r3,zero,8111012c <_fseeko_r+0x294>
81110020:	1080020c 	andi	r2,r2,8
81110024:	10008026 	beq	r2,zero,81110228 <_fseeko_r+0x390>
81110028:	80c00017 	ldw	r3,0(r16)
8111002c:	80800417 	ldw	r2,16(r16)
81110030:	18000226 	beq	r3,zero,8111003c <_fseeko_r+0x1a4>
81110034:	1887c83a 	sub	r3,r3,r2
81110038:	98e7883a 	add	r19,r19,r3
8111003c:	aceb883a 	add	r21,r21,r19
81110040:	05c00044 	movi	r23,1
81110044:	0025883a 	mov	r18,zero
81110048:	003fc306 	br	8110ff58 <__reset+0xfb0eff58>
8111004c:	11198f80 	call	811198f8 <__sinit>
81110050:	8080030b 	ldhu	r2,12(r16)
81110054:	00c04204 	movi	r3,264
81110058:	1080420c 	andi	r2,r2,264
8111005c:	10ffa51e 	bne	r2,r3,8110fef4 <__reset+0xfb0efef4>
81110060:	800b883a 	mov	r5,r16
81110064:	8809883a 	mov	r4,r17
81110068:	11194fc0 	call	811194fc <_fflush_r>
8111006c:	003fa106 	br	8110fef4 <__reset+0xfb0efef4>
81110070:	8080030b 	ldhu	r2,12(r16)
81110074:	00c10004 	movi	r3,1024
81110078:	80c01315 	stw	r3,76(r16)
8111007c:	10c4b03a 	or	r2,r2,r3
81110080:	8080030d 	sth	r2,12(r16)
81110084:	9000311e 	bne	r18,zero,8111014c <_fseeko_r+0x2b4>
81110088:	a82d883a 	mov	r22,r21
8111008c:	b800371e 	bne	r23,zero,8111016c <_fseeko_r+0x2d4>
81110090:	8080030b 	ldhu	r2,12(r16)
81110094:	1084000c 	andi	r2,r2,4096
81110098:	10007f26 	beq	r2,zero,81110298 <_fseeko_r+0x400>
8111009c:	80801417 	ldw	r2,80(r16)
811100a0:	81800117 	ldw	r6,4(r16)
811100a4:	81400c17 	ldw	r5,48(r16)
811100a8:	11a7c83a 	sub	r19,r2,r6
811100ac:	28008226 	beq	r5,zero,811102b8 <_fseeko_r+0x420>
811100b0:	81c00f17 	ldw	r7,60(r16)
811100b4:	99e7c83a 	sub	r19,r19,r7
811100b8:	81000e17 	ldw	r4,56(r16)
811100bc:	80800417 	ldw	r2,16(r16)
811100c0:	99a7883a 	add	r19,r19,r6
811100c4:	2087c83a 	sub	r3,r4,r2
811100c8:	98e7c83a 	sub	r19,r19,r3
811100cc:	38c7883a 	add	r3,r7,r3
811100d0:	b4c02b16 	blt	r22,r19,81110180 <_fseeko_r+0x2e8>
811100d4:	98c9883a 	add	r4,r19,r3
811100d8:	b100292e 	bgeu	r22,r4,81110180 <_fseeko_r+0x2e8>
811100dc:	b4e7c83a 	sub	r19,r22,r19
811100e0:	14c5883a 	add	r2,r2,r19
811100e4:	1ce7c83a 	sub	r19,r3,r19
811100e8:	80800015 	stw	r2,0(r16)
811100ec:	84c00115 	stw	r19,4(r16)
811100f0:	28000526 	beq	r5,zero,81110108 <_fseeko_r+0x270>
811100f4:	80801004 	addi	r2,r16,64
811100f8:	28800226 	beq	r5,r2,81110104 <_fseeko_r+0x26c>
811100fc:	8809883a 	mov	r4,r17
81110100:	1119d900 	call	81119d90 <_free_r>
81110104:	80000c15 	stw	zero,48(r16)
81110108:	8080030b 	ldhu	r2,12(r16)
8111010c:	01800204 	movi	r6,8
81110110:	000b883a 	mov	r5,zero
81110114:	10bff7cc 	andi	r2,r2,65503
81110118:	8080030d 	sth	r2,12(r16)
8111011c:	81001704 	addi	r4,r16,92
81110120:	1110f9c0 	call	81110f9c <memset>
81110124:	0027883a 	mov	r19,zero
81110128:	003f7c06 	br	8110ff1c <__reset+0xfb0eff1c>
8111012c:	80c00117 	ldw	r3,4(r16)
81110130:	80800c17 	ldw	r2,48(r16)
81110134:	98e7c83a 	sub	r19,r19,r3
81110138:	10003b26 	beq	r2,zero,81110228 <_fseeko_r+0x390>
8111013c:	80c00f17 	ldw	r3,60(r16)
81110140:	80800417 	ldw	r2,16(r16)
81110144:	98e7c83a 	sub	r19,r19,r3
81110148:	003fbc06 	br	8111003c <__reset+0xfb0f003c>
8111014c:	8140038f 	ldh	r5,14(r16)
81110150:	d80d883a 	mov	r6,sp
81110154:	8809883a 	mov	r4,r17
81110158:	11103000 	call	81110300 <_fstat_r>
8111015c:	103f891e 	bne	r2,zero,8110ff84 <__reset+0xfb0eff84>
81110160:	dd800417 	ldw	r22,16(sp)
81110164:	adad883a 	add	r22,r21,r22
81110168:	b83fc926 	beq	r23,zero,81110090 <__reset+0xfb0f0090>
8111016c:	81400c17 	ldw	r5,48(r16)
81110170:	81800117 	ldw	r6,4(r16)
81110174:	28005026 	beq	r5,zero,811102b8 <_fseeko_r+0x420>
81110178:	81c00f17 	ldw	r7,60(r16)
8111017c:	003fce06 	br	811100b8 <__reset+0xfb0f00b8>
81110180:	84c01317 	ldw	r19,76(r16)
81110184:	81400717 	ldw	r5,28(r16)
81110188:	000f883a 	mov	r7,zero
8111018c:	04e7c83a 	sub	r19,zero,r19
81110190:	9da6703a 	and	r19,r19,r22
81110194:	980d883a 	mov	r6,r19
81110198:	8809883a 	mov	r4,r17
8111019c:	a03ee83a 	callr	r20
811101a0:	00ffffc4 	movi	r3,-1
811101a4:	10ff7726 	beq	r2,r3,8110ff84 <__reset+0xfb0eff84>
811101a8:	80800417 	ldw	r2,16(r16)
811101ac:	81400c17 	ldw	r5,48(r16)
811101b0:	80000115 	stw	zero,4(r16)
811101b4:	80800015 	stw	r2,0(r16)
811101b8:	28000526 	beq	r5,zero,811101d0 <_fseeko_r+0x338>
811101bc:	80801004 	addi	r2,r16,64
811101c0:	28800226 	beq	r5,r2,811101cc <_fseeko_r+0x334>
811101c4:	8809883a 	mov	r4,r17
811101c8:	1119d900 	call	81119d90 <_free_r>
811101cc:	80000c15 	stw	zero,48(r16)
811101d0:	8080030b 	ldhu	r2,12(r16)
811101d4:	b4e7c83a 	sub	r19,r22,r19
811101d8:	10bff7cc 	andi	r2,r2,65503
811101dc:	8080030d 	sth	r2,12(r16)
811101e0:	98000b26 	beq	r19,zero,81110210 <_fseeko_r+0x378>
811101e4:	800b883a 	mov	r5,r16
811101e8:	8809883a 	mov	r4,r17
811101ec:	11112a00 	call	811112a0 <__srefill_r>
811101f0:	103f641e 	bne	r2,zero,8110ff84 <__reset+0xfb0eff84>
811101f4:	80800117 	ldw	r2,4(r16)
811101f8:	14ff6236 	bltu	r2,r19,8110ff84 <__reset+0xfb0eff84>
811101fc:	80c00017 	ldw	r3,0(r16)
81110200:	14c5c83a 	sub	r2,r2,r19
81110204:	80800115 	stw	r2,4(r16)
81110208:	1ce7883a 	add	r19,r3,r19
8111020c:	84c00015 	stw	r19,0(r16)
81110210:	01800204 	movi	r6,8
81110214:	000b883a 	mov	r5,zero
81110218:	81001704 	addi	r4,r16,92
8111021c:	1110f9c0 	call	81110f9c <memset>
81110220:	0027883a 	mov	r19,zero
81110224:	003f3d06 	br	8110ff1c <__reset+0xfb0eff1c>
81110228:	80800417 	ldw	r2,16(r16)
8111022c:	003f8306 	br	8111003c <__reset+0xfb0f003c>
81110230:	81400717 	ldw	r5,28(r16)
81110234:	900f883a 	mov	r7,r18
81110238:	000d883a 	mov	r6,zero
8111023c:	8809883a 	mov	r4,r17
81110240:	a03ee83a 	callr	r20
81110244:	1027883a 	mov	r19,r2
81110248:	00bfffc4 	movi	r2,-1
8111024c:	98bf3226 	beq	r19,r2,8110ff18 <__reset+0xfb0eff18>
81110250:	8080030b 	ldhu	r2,12(r16)
81110254:	003f7006 	br	81110018 <__reset+0xfb0f0018>
81110258:	8140038f 	ldh	r5,14(r16)
8111025c:	283f4716 	blt	r5,zero,8110ff7c <__reset+0xfb0eff7c>
81110260:	d80d883a 	mov	r6,sp
81110264:	8809883a 	mov	r4,r17
81110268:	11103000 	call	81110300 <_fstat_r>
8111026c:	1000041e 	bne	r2,zero,81110280 <_fseeko_r+0x3e8>
81110270:	d8800117 	ldw	r2,4(sp)
81110274:	00e00014 	movui	r3,32768
81110278:	10bc000c 	andi	r2,r2,61440
8111027c:	10ff7c26 	beq	r2,r3,81110070 <__reset+0xfb0f0070>
81110280:	8080030b 	ldhu	r2,12(r16)
81110284:	003f3d06 	br	8110ff7c <__reset+0xfb0eff7c>
81110288:	800b883a 	mov	r5,r16
8111028c:	8809883a 	mov	r4,r17
81110290:	11104740 	call	81110474 <__smakebuf_r>
81110294:	003f3106 	br	8110ff5c <__reset+0xfb0eff5c>
81110298:	81400717 	ldw	r5,28(r16)
8111029c:	01c00044 	movi	r7,1
811102a0:	000d883a 	mov	r6,zero
811102a4:	8809883a 	mov	r4,r17
811102a8:	a03ee83a 	callr	r20
811102ac:	00ffffc4 	movi	r3,-1
811102b0:	10ff7b1e 	bne	r2,r3,811100a0 <__reset+0xfb0f00a0>
811102b4:	003f3306 	br	8110ff84 <__reset+0xfb0eff84>
811102b8:	80c00017 	ldw	r3,0(r16)
811102bc:	80800417 	ldw	r2,16(r16)
811102c0:	000b883a 	mov	r5,zero
811102c4:	1887c83a 	sub	r3,r3,r2
811102c8:	98e7c83a 	sub	r19,r19,r3
811102cc:	30c7883a 	add	r3,r6,r3
811102d0:	003f7f06 	br	811100d0 <__reset+0xfb0f00d0>
811102d4:	00800744 	movi	r2,29
811102d8:	88800015 	stw	r2,0(r17)
811102dc:	04ffffc4 	movi	r19,-1
811102e0:	003f0e06 	br	8110ff1c <__reset+0xfb0eff1c>

811102e4 <fseeko>:
811102e4:	00a04534 	movhi	r2,33044
811102e8:	10ba0604 	addi	r2,r2,-6120
811102ec:	300f883a 	mov	r7,r6
811102f0:	280d883a 	mov	r6,r5
811102f4:	200b883a 	mov	r5,r4
811102f8:	11000017 	ldw	r4,0(r2)
811102fc:	110fe981 	jmpi	8110fe98 <_fseeko_r>

81110300 <_fstat_r>:
81110300:	defffd04 	addi	sp,sp,-12
81110304:	de00012e 	bgeu	sp,et,8111030c <_fstat_r+0xc>
81110308:	003b68fa 	trap	3
8111030c:	2805883a 	mov	r2,r5
81110310:	dc000015 	stw	r16,0(sp)
81110314:	04204534 	movhi	r16,33044
81110318:	dc400115 	stw	r17,4(sp)
8111031c:	843a5f04 	addi	r16,r16,-5764
81110320:	2023883a 	mov	r17,r4
81110324:	300b883a 	mov	r5,r6
81110328:	1009883a 	mov	r4,r2
8111032c:	dfc00215 	stw	ra,8(sp)
81110330:	80000015 	stw	zero,0(r16)
81110334:	11257300 	call	81125730 <fstat>
81110338:	00ffffc4 	movi	r3,-1
8111033c:	10c00526 	beq	r2,r3,81110354 <_fstat_r+0x54>
81110340:	dfc00217 	ldw	ra,8(sp)
81110344:	dc400117 	ldw	r17,4(sp)
81110348:	dc000017 	ldw	r16,0(sp)
8111034c:	dec00304 	addi	sp,sp,12
81110350:	f800283a 	ret
81110354:	80c00017 	ldw	r3,0(r16)
81110358:	183ff926 	beq	r3,zero,81110340 <__reset+0xfb0f0340>
8111035c:	88c00015 	stw	r3,0(r17)
81110360:	003ff706 	br	81110340 <__reset+0xfb0f0340>

81110364 <_fwrite_r>:
81110364:	defff504 	addi	sp,sp,-44
81110368:	de00012e 	bgeu	sp,et,81110370 <_fwrite_r+0xc>
8111036c:	003b68fa 	trap	3
81110370:	dc800815 	stw	r18,32(sp)
81110374:	39a5383a 	mul	r18,r7,r6
81110378:	d8800304 	addi	r2,sp,12
8111037c:	d8800015 	stw	r2,0(sp)
81110380:	00800044 	movi	r2,1
81110384:	dcc00915 	stw	r19,36(sp)
81110388:	dc400715 	stw	r17,28(sp)
8111038c:	dc000615 	stw	r16,24(sp)
81110390:	d9400315 	stw	r5,12(sp)
81110394:	dfc00a15 	stw	ra,40(sp)
81110398:	dc800415 	stw	r18,16(sp)
8111039c:	dc800215 	stw	r18,8(sp)
811103a0:	d8800115 	stw	r2,4(sp)
811103a4:	3027883a 	mov	r19,r6
811103a8:	3821883a 	mov	r16,r7
811103ac:	2023883a 	mov	r17,r4
811103b0:	d9400b17 	ldw	r5,44(sp)
811103b4:	20000226 	beq	r4,zero,811103c0 <_fwrite_r+0x5c>
811103b8:	20800e17 	ldw	r2,56(r4)
811103bc:	10001a26 	beq	r2,zero,81110428 <_fwrite_r+0xc4>
811103c0:	2880030b 	ldhu	r2,12(r5)
811103c4:	10c8000c 	andi	r3,r2,8192
811103c8:	1800061e 	bne	r3,zero,811103e4 <_fwrite_r+0x80>
811103cc:	29001917 	ldw	r4,100(r5)
811103d0:	00f7ffc4 	movi	r3,-8193
811103d4:	10880014 	ori	r2,r2,8192
811103d8:	20c6703a 	and	r3,r4,r3
811103dc:	2880030d 	sth	r2,12(r5)
811103e0:	28c01915 	stw	r3,100(r5)
811103e4:	d80d883a 	mov	r6,sp
811103e8:	8809883a 	mov	r4,r17
811103ec:	111a0a80 	call	8111a0a8 <__sfvwrite_r>
811103f0:	10000b26 	beq	r2,zero,81110420 <_fwrite_r+0xbc>
811103f4:	d9000217 	ldw	r4,8(sp)
811103f8:	980b883a 	mov	r5,r19
811103fc:	9109c83a 	sub	r4,r18,r4
81110400:	11232780 	call	81123278 <__udivsi3>
81110404:	dfc00a17 	ldw	ra,40(sp)
81110408:	dcc00917 	ldw	r19,36(sp)
8111040c:	dc800817 	ldw	r18,32(sp)
81110410:	dc400717 	ldw	r17,28(sp)
81110414:	dc000617 	ldw	r16,24(sp)
81110418:	dec00b04 	addi	sp,sp,44
8111041c:	f800283a 	ret
81110420:	8005883a 	mov	r2,r16
81110424:	003ff706 	br	81110404 <__reset+0xfb0f0404>
81110428:	d9400515 	stw	r5,20(sp)
8111042c:	11198f80 	call	811198f8 <__sinit>
81110430:	d9400517 	ldw	r5,20(sp)
81110434:	003fe206 	br	811103c0 <__reset+0xfb0f03c0>

81110438 <fwrite>:
81110438:	defffe04 	addi	sp,sp,-8
8111043c:	00a04534 	movhi	r2,33044
81110440:	de00012e 	bgeu	sp,et,81110448 <fwrite+0x10>
81110444:	003b68fa 	trap	3
81110448:	10ba0604 	addi	r2,r2,-6120
8111044c:	d9c00015 	stw	r7,0(sp)
81110450:	300f883a 	mov	r7,r6
81110454:	280d883a 	mov	r6,r5
81110458:	200b883a 	mov	r5,r4
8111045c:	11000017 	ldw	r4,0(r2)
81110460:	dfc00115 	stw	ra,4(sp)
81110464:	11103640 	call	81110364 <_fwrite_r>
81110468:	dfc00117 	ldw	ra,4(sp)
8111046c:	dec00204 	addi	sp,sp,8
81110470:	f800283a 	ret

81110474 <__smakebuf_r>:
81110474:	2880030b 	ldhu	r2,12(r5)
81110478:	10c0008c 	andi	r3,r2,2
8111047c:	1800431e 	bne	r3,zero,8111058c <__smakebuf_r+0x118>
81110480:	deffec04 	addi	sp,sp,-80
81110484:	de00012e 	bgeu	sp,et,8111048c <__smakebuf_r+0x18>
81110488:	003b68fa 	trap	3
8111048c:	dc000f15 	stw	r16,60(sp)
81110490:	2821883a 	mov	r16,r5
81110494:	2940038f 	ldh	r5,14(r5)
81110498:	dc401015 	stw	r17,64(sp)
8111049c:	dfc01315 	stw	ra,76(sp)
811104a0:	dcc01215 	stw	r19,72(sp)
811104a4:	dc801115 	stw	r18,68(sp)
811104a8:	2023883a 	mov	r17,r4
811104ac:	28001c16 	blt	r5,zero,81110520 <__smakebuf_r+0xac>
811104b0:	d80d883a 	mov	r6,sp
811104b4:	11103000 	call	81110300 <_fstat_r>
811104b8:	10001816 	blt	r2,zero,8111051c <__smakebuf_r+0xa8>
811104bc:	d8800117 	ldw	r2,4(sp)
811104c0:	00e00014 	movui	r3,32768
811104c4:	10bc000c 	andi	r2,r2,61440
811104c8:	14c80020 	cmpeqi	r19,r2,8192
811104cc:	10c03726 	beq	r2,r3,811105ac <__smakebuf_r+0x138>
811104d0:	80c0030b 	ldhu	r3,12(r16)
811104d4:	18c20014 	ori	r3,r3,2048
811104d8:	80c0030d 	sth	r3,12(r16)
811104dc:	00c80004 	movi	r3,8192
811104e0:	10c0521e 	bne	r2,r3,8111062c <__smakebuf_r+0x1b8>
811104e4:	8140038f 	ldh	r5,14(r16)
811104e8:	8809883a 	mov	r4,r17
811104ec:	111a7040 	call	8111a704 <_isatty_r>
811104f0:	10004c26 	beq	r2,zero,81110624 <__smakebuf_r+0x1b0>
811104f4:	8080030b 	ldhu	r2,12(r16)
811104f8:	80c010c4 	addi	r3,r16,67
811104fc:	80c00015 	stw	r3,0(r16)
81110500:	10800054 	ori	r2,r2,1
81110504:	8080030d 	sth	r2,12(r16)
81110508:	00800044 	movi	r2,1
8111050c:	80c00415 	stw	r3,16(r16)
81110510:	80800515 	stw	r2,20(r16)
81110514:	04810004 	movi	r18,1024
81110518:	00000706 	br	81110538 <__smakebuf_r+0xc4>
8111051c:	8080030b 	ldhu	r2,12(r16)
81110520:	10c0200c 	andi	r3,r2,128
81110524:	18001f1e 	bne	r3,zero,811105a4 <__smakebuf_r+0x130>
81110528:	04810004 	movi	r18,1024
8111052c:	10820014 	ori	r2,r2,2048
81110530:	8080030d 	sth	r2,12(r16)
81110534:	0027883a 	mov	r19,zero
81110538:	900b883a 	mov	r5,r18
8111053c:	8809883a 	mov	r4,r17
81110540:	11106380 	call	81110638 <_malloc_r>
81110544:	10002c26 	beq	r2,zero,811105f8 <__smakebuf_r+0x184>
81110548:	80c0030b 	ldhu	r3,12(r16)
8111054c:	012044b4 	movhi	r4,33042
81110550:	21256604 	addi	r4,r4,-27240
81110554:	89000f15 	stw	r4,60(r17)
81110558:	18c02014 	ori	r3,r3,128
8111055c:	80c0030d 	sth	r3,12(r16)
81110560:	80800015 	stw	r2,0(r16)
81110564:	80800415 	stw	r2,16(r16)
81110568:	84800515 	stw	r18,20(r16)
8111056c:	98001a1e 	bne	r19,zero,811105d8 <__smakebuf_r+0x164>
81110570:	dfc01317 	ldw	ra,76(sp)
81110574:	dcc01217 	ldw	r19,72(sp)
81110578:	dc801117 	ldw	r18,68(sp)
8111057c:	dc401017 	ldw	r17,64(sp)
81110580:	dc000f17 	ldw	r16,60(sp)
81110584:	dec01404 	addi	sp,sp,80
81110588:	f800283a 	ret
8111058c:	288010c4 	addi	r2,r5,67
81110590:	28800015 	stw	r2,0(r5)
81110594:	28800415 	stw	r2,16(r5)
81110598:	00800044 	movi	r2,1
8111059c:	28800515 	stw	r2,20(r5)
811105a0:	f800283a 	ret
811105a4:	04801004 	movi	r18,64
811105a8:	003fe006 	br	8111052c <__reset+0xfb0f052c>
811105ac:	81000a17 	ldw	r4,40(r16)
811105b0:	00e04474 	movhi	r3,33041
811105b4:	18c5c404 	addi	r3,r3,5904
811105b8:	20ffc51e 	bne	r4,r3,811104d0 <__reset+0xfb0f04d0>
811105bc:	8080030b 	ldhu	r2,12(r16)
811105c0:	04810004 	movi	r18,1024
811105c4:	84801315 	stw	r18,76(r16)
811105c8:	1484b03a 	or	r2,r2,r18
811105cc:	8080030d 	sth	r2,12(r16)
811105d0:	0027883a 	mov	r19,zero
811105d4:	003fd806 	br	81110538 <__reset+0xfb0f0538>
811105d8:	8140038f 	ldh	r5,14(r16)
811105dc:	8809883a 	mov	r4,r17
811105e0:	111a7040 	call	8111a704 <_isatty_r>
811105e4:	103fe226 	beq	r2,zero,81110570 <__reset+0xfb0f0570>
811105e8:	8080030b 	ldhu	r2,12(r16)
811105ec:	10800054 	ori	r2,r2,1
811105f0:	8080030d 	sth	r2,12(r16)
811105f4:	003fde06 	br	81110570 <__reset+0xfb0f0570>
811105f8:	8080030b 	ldhu	r2,12(r16)
811105fc:	10c0800c 	andi	r3,r2,512
81110600:	183fdb1e 	bne	r3,zero,81110570 <__reset+0xfb0f0570>
81110604:	10800094 	ori	r2,r2,2
81110608:	80c010c4 	addi	r3,r16,67
8111060c:	8080030d 	sth	r2,12(r16)
81110610:	00800044 	movi	r2,1
81110614:	80c00015 	stw	r3,0(r16)
81110618:	80c00415 	stw	r3,16(r16)
8111061c:	80800515 	stw	r2,20(r16)
81110620:	003fd306 	br	81110570 <__reset+0xfb0f0570>
81110624:	04810004 	movi	r18,1024
81110628:	003fc306 	br	81110538 <__reset+0xfb0f0538>
8111062c:	0027883a 	mov	r19,zero
81110630:	04810004 	movi	r18,1024
81110634:	003fc006 	br	81110538 <__reset+0xfb0f0538>

81110638 <_malloc_r>:
81110638:	defff504 	addi	sp,sp,-44
8111063c:	de00012e 	bgeu	sp,et,81110644 <_malloc_r+0xc>
81110640:	003b68fa 	trap	3
81110644:	288002c4 	addi	r2,r5,11
81110648:	dc800315 	stw	r18,12(sp)
8111064c:	dfc00a15 	stw	ra,40(sp)
81110650:	df000915 	stw	fp,36(sp)
81110654:	ddc00815 	stw	r23,32(sp)
81110658:	dd800715 	stw	r22,28(sp)
8111065c:	dd400615 	stw	r21,24(sp)
81110660:	dd000515 	stw	r20,20(sp)
81110664:	dcc00415 	stw	r19,16(sp)
81110668:	dc400215 	stw	r17,8(sp)
8111066c:	dc000115 	stw	r16,4(sp)
81110670:	00c00584 	movi	r3,22
81110674:	2025883a 	mov	r18,r4
81110678:	18807f2e 	bgeu	r3,r2,81110878 <_malloc_r+0x240>
8111067c:	047ffe04 	movi	r17,-8
81110680:	1462703a 	and	r17,r2,r17
81110684:	8800a316 	blt	r17,zero,81110914 <_malloc_r+0x2dc>
81110688:	8940a236 	bltu	r17,r5,81110914 <_malloc_r+0x2dc>
8111068c:	11266c80 	call	811266c8 <__malloc_lock>
81110690:	00807dc4 	movi	r2,503
81110694:	1441e92e 	bgeu	r2,r17,81110e3c <_malloc_r+0x804>
81110698:	8804d27a 	srli	r2,r17,9
8111069c:	1000a126 	beq	r2,zero,81110924 <_malloc_r+0x2ec>
811106a0:	00c00104 	movi	r3,4
811106a4:	18811e36 	bltu	r3,r2,81110b20 <_malloc_r+0x4e8>
811106a8:	8804d1ba 	srli	r2,r17,6
811106ac:	12000e44 	addi	r8,r2,57
811106b0:	11c00e04 	addi	r7,r2,56
811106b4:	4209883a 	add	r4,r8,r8
811106b8:	04e04534 	movhi	r19,33044
811106bc:	2109883a 	add	r4,r4,r4
811106c0:	9cf3eb04 	addi	r19,r19,-12372
811106c4:	2109883a 	add	r4,r4,r4
811106c8:	9909883a 	add	r4,r19,r4
811106cc:	24000117 	ldw	r16,4(r4)
811106d0:	213ffe04 	addi	r4,r4,-8
811106d4:	24009726 	beq	r4,r16,81110934 <_malloc_r+0x2fc>
811106d8:	80800117 	ldw	r2,4(r16)
811106dc:	01bfff04 	movi	r6,-4
811106e0:	014003c4 	movi	r5,15
811106e4:	1184703a 	and	r2,r2,r6
811106e8:	1447c83a 	sub	r3,r2,r17
811106ec:	28c00716 	blt	r5,r3,8111070c <_malloc_r+0xd4>
811106f0:	1800920e 	bge	r3,zero,8111093c <_malloc_r+0x304>
811106f4:	84000317 	ldw	r16,12(r16)
811106f8:	24008e26 	beq	r4,r16,81110934 <_malloc_r+0x2fc>
811106fc:	80800117 	ldw	r2,4(r16)
81110700:	1184703a 	and	r2,r2,r6
81110704:	1447c83a 	sub	r3,r2,r17
81110708:	28fff90e 	bge	r5,r3,811106f0 <__reset+0xfb0f06f0>
8111070c:	3809883a 	mov	r4,r7
81110710:	01a04534 	movhi	r6,33044
81110714:	9c000417 	ldw	r16,16(r19)
81110718:	31b3eb04 	addi	r6,r6,-12372
8111071c:	32000204 	addi	r8,r6,8
81110720:	82013426 	beq	r16,r8,81110bf4 <_malloc_r+0x5bc>
81110724:	80c00117 	ldw	r3,4(r16)
81110728:	00bfff04 	movi	r2,-4
8111072c:	188e703a 	and	r7,r3,r2
81110730:	3c45c83a 	sub	r2,r7,r17
81110734:	00c003c4 	movi	r3,15
81110738:	18811f16 	blt	r3,r2,81110bb8 <_malloc_r+0x580>
8111073c:	32000515 	stw	r8,20(r6)
81110740:	32000415 	stw	r8,16(r6)
81110744:	10007f0e 	bge	r2,zero,81110944 <_malloc_r+0x30c>
81110748:	00807fc4 	movi	r2,511
8111074c:	11c0fd36 	bltu	r2,r7,81110b44 <_malloc_r+0x50c>
81110750:	3806d0fa 	srli	r3,r7,3
81110754:	01c00044 	movi	r7,1
81110758:	30800117 	ldw	r2,4(r6)
8111075c:	19400044 	addi	r5,r3,1
81110760:	294b883a 	add	r5,r5,r5
81110764:	1807d0ba 	srai	r3,r3,2
81110768:	294b883a 	add	r5,r5,r5
8111076c:	294b883a 	add	r5,r5,r5
81110770:	298b883a 	add	r5,r5,r6
81110774:	38c6983a 	sll	r3,r7,r3
81110778:	29c00017 	ldw	r7,0(r5)
8111077c:	2a7ffe04 	addi	r9,r5,-8
81110780:	1886b03a 	or	r3,r3,r2
81110784:	82400315 	stw	r9,12(r16)
81110788:	81c00215 	stw	r7,8(r16)
8111078c:	30c00115 	stw	r3,4(r6)
81110790:	2c000015 	stw	r16,0(r5)
81110794:	3c000315 	stw	r16,12(r7)
81110798:	2005d0ba 	srai	r2,r4,2
8111079c:	01400044 	movi	r5,1
811107a0:	288a983a 	sll	r5,r5,r2
811107a4:	19406f36 	bltu	r3,r5,81110964 <_malloc_r+0x32c>
811107a8:	28c4703a 	and	r2,r5,r3
811107ac:	10000a1e 	bne	r2,zero,811107d8 <_malloc_r+0x1a0>
811107b0:	00bfff04 	movi	r2,-4
811107b4:	294b883a 	add	r5,r5,r5
811107b8:	2088703a 	and	r4,r4,r2
811107bc:	28c4703a 	and	r2,r5,r3
811107c0:	21000104 	addi	r4,r4,4
811107c4:	1000041e 	bne	r2,zero,811107d8 <_malloc_r+0x1a0>
811107c8:	294b883a 	add	r5,r5,r5
811107cc:	28c4703a 	and	r2,r5,r3
811107d0:	21000104 	addi	r4,r4,4
811107d4:	103ffc26 	beq	r2,zero,811107c8 <__reset+0xfb0f07c8>
811107d8:	02bfff04 	movi	r10,-4
811107dc:	024003c4 	movi	r9,15
811107e0:	21800044 	addi	r6,r4,1
811107e4:	318d883a 	add	r6,r6,r6
811107e8:	318d883a 	add	r6,r6,r6
811107ec:	318d883a 	add	r6,r6,r6
811107f0:	998d883a 	add	r6,r19,r6
811107f4:	333ffe04 	addi	r12,r6,-8
811107f8:	2017883a 	mov	r11,r4
811107fc:	31800104 	addi	r6,r6,4
81110800:	34000017 	ldw	r16,0(r6)
81110804:	31fffd04 	addi	r7,r6,-12
81110808:	81c0041e 	bne	r16,r7,8111081c <_malloc_r+0x1e4>
8111080c:	0000fb06 	br	81110bfc <_malloc_r+0x5c4>
81110810:	1801030e 	bge	r3,zero,81110c20 <_malloc_r+0x5e8>
81110814:	84000317 	ldw	r16,12(r16)
81110818:	81c0f826 	beq	r16,r7,81110bfc <_malloc_r+0x5c4>
8111081c:	80800117 	ldw	r2,4(r16)
81110820:	1284703a 	and	r2,r2,r10
81110824:	1447c83a 	sub	r3,r2,r17
81110828:	48fff90e 	bge	r9,r3,81110810 <__reset+0xfb0f0810>
8111082c:	80800317 	ldw	r2,12(r16)
81110830:	81000217 	ldw	r4,8(r16)
81110834:	89400054 	ori	r5,r17,1
81110838:	81400115 	stw	r5,4(r16)
8111083c:	20800315 	stw	r2,12(r4)
81110840:	11000215 	stw	r4,8(r2)
81110844:	8463883a 	add	r17,r16,r17
81110848:	9c400515 	stw	r17,20(r19)
8111084c:	9c400415 	stw	r17,16(r19)
81110850:	18800054 	ori	r2,r3,1
81110854:	88800115 	stw	r2,4(r17)
81110858:	8a000315 	stw	r8,12(r17)
8111085c:	8a000215 	stw	r8,8(r17)
81110860:	88e3883a 	add	r17,r17,r3
81110864:	88c00015 	stw	r3,0(r17)
81110868:	9009883a 	mov	r4,r18
8111086c:	11267f00 	call	811267f0 <__malloc_unlock>
81110870:	80800204 	addi	r2,r16,8
81110874:	00001b06 	br	811108e4 <_malloc_r+0x2ac>
81110878:	04400404 	movi	r17,16
8111087c:	89402536 	bltu	r17,r5,81110914 <_malloc_r+0x2dc>
81110880:	11266c80 	call	811266c8 <__malloc_lock>
81110884:	00800184 	movi	r2,6
81110888:	01000084 	movi	r4,2
8111088c:	04e04534 	movhi	r19,33044
81110890:	1085883a 	add	r2,r2,r2
81110894:	9cf3eb04 	addi	r19,r19,-12372
81110898:	1085883a 	add	r2,r2,r2
8111089c:	9885883a 	add	r2,r19,r2
811108a0:	14000117 	ldw	r16,4(r2)
811108a4:	10fffe04 	addi	r3,r2,-8
811108a8:	80c0d926 	beq	r16,r3,81110c10 <_malloc_r+0x5d8>
811108ac:	80c00117 	ldw	r3,4(r16)
811108b0:	81000317 	ldw	r4,12(r16)
811108b4:	00bfff04 	movi	r2,-4
811108b8:	1884703a 	and	r2,r3,r2
811108bc:	81400217 	ldw	r5,8(r16)
811108c0:	8085883a 	add	r2,r16,r2
811108c4:	10c00117 	ldw	r3,4(r2)
811108c8:	29000315 	stw	r4,12(r5)
811108cc:	21400215 	stw	r5,8(r4)
811108d0:	18c00054 	ori	r3,r3,1
811108d4:	10c00115 	stw	r3,4(r2)
811108d8:	9009883a 	mov	r4,r18
811108dc:	11267f00 	call	811267f0 <__malloc_unlock>
811108e0:	80800204 	addi	r2,r16,8
811108e4:	dfc00a17 	ldw	ra,40(sp)
811108e8:	df000917 	ldw	fp,36(sp)
811108ec:	ddc00817 	ldw	r23,32(sp)
811108f0:	dd800717 	ldw	r22,28(sp)
811108f4:	dd400617 	ldw	r21,24(sp)
811108f8:	dd000517 	ldw	r20,20(sp)
811108fc:	dcc00417 	ldw	r19,16(sp)
81110900:	dc800317 	ldw	r18,12(sp)
81110904:	dc400217 	ldw	r17,8(sp)
81110908:	dc000117 	ldw	r16,4(sp)
8111090c:	dec00b04 	addi	sp,sp,44
81110910:	f800283a 	ret
81110914:	00800304 	movi	r2,12
81110918:	90800015 	stw	r2,0(r18)
8111091c:	0005883a 	mov	r2,zero
81110920:	003ff006 	br	811108e4 <__reset+0xfb0f08e4>
81110924:	01002004 	movi	r4,128
81110928:	02001004 	movi	r8,64
8111092c:	01c00fc4 	movi	r7,63
81110930:	003f6106 	br	811106b8 <__reset+0xfb0f06b8>
81110934:	4009883a 	mov	r4,r8
81110938:	003f7506 	br	81110710 <__reset+0xfb0f0710>
8111093c:	81000317 	ldw	r4,12(r16)
81110940:	003fde06 	br	811108bc <__reset+0xfb0f08bc>
81110944:	81c5883a 	add	r2,r16,r7
81110948:	11400117 	ldw	r5,4(r2)
8111094c:	9009883a 	mov	r4,r18
81110950:	29400054 	ori	r5,r5,1
81110954:	11400115 	stw	r5,4(r2)
81110958:	11267f00 	call	811267f0 <__malloc_unlock>
8111095c:	80800204 	addi	r2,r16,8
81110960:	003fe006 	br	811108e4 <__reset+0xfb0f08e4>
81110964:	9c000217 	ldw	r16,8(r19)
81110968:	00bfff04 	movi	r2,-4
8111096c:	85800117 	ldw	r22,4(r16)
81110970:	b0ac703a 	and	r22,r22,r2
81110974:	b4400336 	bltu	r22,r17,81110984 <_malloc_r+0x34c>
81110978:	b445c83a 	sub	r2,r22,r17
8111097c:	00c003c4 	movi	r3,15
81110980:	18805d16 	blt	r3,r2,81110af8 <_malloc_r+0x4c0>
81110984:	05e04534 	movhi	r23,33044
81110988:	00a04534 	movhi	r2,33044
8111098c:	10ba6204 	addi	r2,r2,-5752
81110990:	bdfa0704 	addi	r23,r23,-6116
81110994:	15400017 	ldw	r21,0(r2)
81110998:	b8c00017 	ldw	r3,0(r23)
8111099c:	00bfffc4 	movi	r2,-1
811109a0:	858d883a 	add	r6,r16,r22
811109a4:	8d6b883a 	add	r21,r17,r21
811109a8:	1880ea26 	beq	r3,r2,81110d54 <_malloc_r+0x71c>
811109ac:	ad4403c4 	addi	r21,r21,4111
811109b0:	00bc0004 	movi	r2,-4096
811109b4:	a8aa703a 	and	r21,r21,r2
811109b8:	a80b883a 	mov	r5,r21
811109bc:	9009883a 	mov	r4,r18
811109c0:	d9800015 	stw	r6,0(sp)
811109c4:	111147c0 	call	8111147c <_sbrk_r>
811109c8:	1029883a 	mov	r20,r2
811109cc:	00bfffc4 	movi	r2,-1
811109d0:	d9800017 	ldw	r6,0(sp)
811109d4:	a080e826 	beq	r20,r2,81110d78 <_malloc_r+0x740>
811109d8:	a180a636 	bltu	r20,r6,81110c74 <_malloc_r+0x63c>
811109dc:	07204534 	movhi	fp,33044
811109e0:	e73ac104 	addi	fp,fp,-5372
811109e4:	e0800017 	ldw	r2,0(fp)
811109e8:	a887883a 	add	r3,r21,r2
811109ec:	e0c00015 	stw	r3,0(fp)
811109f0:	3500e626 	beq	r6,r20,81110d8c <_malloc_r+0x754>
811109f4:	b9000017 	ldw	r4,0(r23)
811109f8:	00bfffc4 	movi	r2,-1
811109fc:	2080ee26 	beq	r4,r2,81110db8 <_malloc_r+0x780>
81110a00:	a185c83a 	sub	r2,r20,r6
81110a04:	10c5883a 	add	r2,r2,r3
81110a08:	e0800015 	stw	r2,0(fp)
81110a0c:	a0c001cc 	andi	r3,r20,7
81110a10:	1800bc26 	beq	r3,zero,81110d04 <_malloc_r+0x6cc>
81110a14:	a0e9c83a 	sub	r20,r20,r3
81110a18:	00840204 	movi	r2,4104
81110a1c:	a5000204 	addi	r20,r20,8
81110a20:	10c7c83a 	sub	r3,r2,r3
81110a24:	a545883a 	add	r2,r20,r21
81110a28:	1083ffcc 	andi	r2,r2,4095
81110a2c:	18abc83a 	sub	r21,r3,r2
81110a30:	a80b883a 	mov	r5,r21
81110a34:	9009883a 	mov	r4,r18
81110a38:	111147c0 	call	8111147c <_sbrk_r>
81110a3c:	00ffffc4 	movi	r3,-1
81110a40:	10c0e126 	beq	r2,r3,81110dc8 <_malloc_r+0x790>
81110a44:	1505c83a 	sub	r2,r2,r20
81110a48:	1545883a 	add	r2,r2,r21
81110a4c:	10800054 	ori	r2,r2,1
81110a50:	e0c00017 	ldw	r3,0(fp)
81110a54:	9d000215 	stw	r20,8(r19)
81110a58:	a0800115 	stw	r2,4(r20)
81110a5c:	a8c7883a 	add	r3,r21,r3
81110a60:	e0c00015 	stw	r3,0(fp)
81110a64:	84c00e26 	beq	r16,r19,81110aa0 <_malloc_r+0x468>
81110a68:	018003c4 	movi	r6,15
81110a6c:	3580a72e 	bgeu	r6,r22,81110d0c <_malloc_r+0x6d4>
81110a70:	81400117 	ldw	r5,4(r16)
81110a74:	013ffe04 	movi	r4,-8
81110a78:	b0bffd04 	addi	r2,r22,-12
81110a7c:	1104703a 	and	r2,r2,r4
81110a80:	2900004c 	andi	r4,r5,1
81110a84:	2088b03a 	or	r4,r4,r2
81110a88:	81000115 	stw	r4,4(r16)
81110a8c:	01400144 	movi	r5,5
81110a90:	8089883a 	add	r4,r16,r2
81110a94:	21400115 	stw	r5,4(r4)
81110a98:	21400215 	stw	r5,8(r4)
81110a9c:	3080cd36 	bltu	r6,r2,81110dd4 <_malloc_r+0x79c>
81110aa0:	00a04534 	movhi	r2,33044
81110aa4:	10ba6104 	addi	r2,r2,-5756
81110aa8:	11000017 	ldw	r4,0(r2)
81110aac:	20c0012e 	bgeu	r4,r3,81110ab4 <_malloc_r+0x47c>
81110ab0:	10c00015 	stw	r3,0(r2)
81110ab4:	00a04534 	movhi	r2,33044
81110ab8:	10ba6004 	addi	r2,r2,-5760
81110abc:	11000017 	ldw	r4,0(r2)
81110ac0:	9c000217 	ldw	r16,8(r19)
81110ac4:	20c0012e 	bgeu	r4,r3,81110acc <_malloc_r+0x494>
81110ac8:	10c00015 	stw	r3,0(r2)
81110acc:	80c00117 	ldw	r3,4(r16)
81110ad0:	00bfff04 	movi	r2,-4
81110ad4:	1886703a 	and	r3,r3,r2
81110ad8:	1c45c83a 	sub	r2,r3,r17
81110adc:	1c400236 	bltu	r3,r17,81110ae8 <_malloc_r+0x4b0>
81110ae0:	00c003c4 	movi	r3,15
81110ae4:	18800416 	blt	r3,r2,81110af8 <_malloc_r+0x4c0>
81110ae8:	9009883a 	mov	r4,r18
81110aec:	11267f00 	call	811267f0 <__malloc_unlock>
81110af0:	0005883a 	mov	r2,zero
81110af4:	003f7b06 	br	811108e4 <__reset+0xfb0f08e4>
81110af8:	88c00054 	ori	r3,r17,1
81110afc:	80c00115 	stw	r3,4(r16)
81110b00:	8463883a 	add	r17,r16,r17
81110b04:	10800054 	ori	r2,r2,1
81110b08:	9c400215 	stw	r17,8(r19)
81110b0c:	88800115 	stw	r2,4(r17)
81110b10:	9009883a 	mov	r4,r18
81110b14:	11267f00 	call	811267f0 <__malloc_unlock>
81110b18:	80800204 	addi	r2,r16,8
81110b1c:	003f7106 	br	811108e4 <__reset+0xfb0f08e4>
81110b20:	00c00504 	movi	r3,20
81110b24:	18804a2e 	bgeu	r3,r2,81110c50 <_malloc_r+0x618>
81110b28:	00c01504 	movi	r3,84
81110b2c:	18806e36 	bltu	r3,r2,81110ce8 <_malloc_r+0x6b0>
81110b30:	8804d33a 	srli	r2,r17,12
81110b34:	12001bc4 	addi	r8,r2,111
81110b38:	11c01b84 	addi	r7,r2,110
81110b3c:	4209883a 	add	r4,r8,r8
81110b40:	003edd06 	br	811106b8 <__reset+0xfb0f06b8>
81110b44:	3804d27a 	srli	r2,r7,9
81110b48:	00c00104 	movi	r3,4
81110b4c:	1880442e 	bgeu	r3,r2,81110c60 <_malloc_r+0x628>
81110b50:	00c00504 	movi	r3,20
81110b54:	18808136 	bltu	r3,r2,81110d5c <_malloc_r+0x724>
81110b58:	11401704 	addi	r5,r2,92
81110b5c:	10c016c4 	addi	r3,r2,91
81110b60:	294b883a 	add	r5,r5,r5
81110b64:	294b883a 	add	r5,r5,r5
81110b68:	294b883a 	add	r5,r5,r5
81110b6c:	994b883a 	add	r5,r19,r5
81110b70:	28800017 	ldw	r2,0(r5)
81110b74:	01a04534 	movhi	r6,33044
81110b78:	297ffe04 	addi	r5,r5,-8
81110b7c:	31b3eb04 	addi	r6,r6,-12372
81110b80:	28806526 	beq	r5,r2,81110d18 <_malloc_r+0x6e0>
81110b84:	01bfff04 	movi	r6,-4
81110b88:	10c00117 	ldw	r3,4(r2)
81110b8c:	1986703a 	and	r3,r3,r6
81110b90:	38c0022e 	bgeu	r7,r3,81110b9c <_malloc_r+0x564>
81110b94:	10800217 	ldw	r2,8(r2)
81110b98:	28bffb1e 	bne	r5,r2,81110b88 <__reset+0xfb0f0b88>
81110b9c:	11400317 	ldw	r5,12(r2)
81110ba0:	98c00117 	ldw	r3,4(r19)
81110ba4:	81400315 	stw	r5,12(r16)
81110ba8:	80800215 	stw	r2,8(r16)
81110bac:	2c000215 	stw	r16,8(r5)
81110bb0:	14000315 	stw	r16,12(r2)
81110bb4:	003ef806 	br	81110798 <__reset+0xfb0f0798>
81110bb8:	88c00054 	ori	r3,r17,1
81110bbc:	80c00115 	stw	r3,4(r16)
81110bc0:	8463883a 	add	r17,r16,r17
81110bc4:	34400515 	stw	r17,20(r6)
81110bc8:	34400415 	stw	r17,16(r6)
81110bcc:	10c00054 	ori	r3,r2,1
81110bd0:	8a000315 	stw	r8,12(r17)
81110bd4:	8a000215 	stw	r8,8(r17)
81110bd8:	88c00115 	stw	r3,4(r17)
81110bdc:	88a3883a 	add	r17,r17,r2
81110be0:	88800015 	stw	r2,0(r17)
81110be4:	9009883a 	mov	r4,r18
81110be8:	11267f00 	call	811267f0 <__malloc_unlock>
81110bec:	80800204 	addi	r2,r16,8
81110bf0:	003f3c06 	br	811108e4 <__reset+0xfb0f08e4>
81110bf4:	30c00117 	ldw	r3,4(r6)
81110bf8:	003ee706 	br	81110798 <__reset+0xfb0f0798>
81110bfc:	5ac00044 	addi	r11,r11,1
81110c00:	588000cc 	andi	r2,r11,3
81110c04:	31800204 	addi	r6,r6,8
81110c08:	103efd1e 	bne	r2,zero,81110800 <__reset+0xfb0f0800>
81110c0c:	00002406 	br	81110ca0 <_malloc_r+0x668>
81110c10:	14000317 	ldw	r16,12(r2)
81110c14:	143f251e 	bne	r2,r16,811108ac <__reset+0xfb0f08ac>
81110c18:	21000084 	addi	r4,r4,2
81110c1c:	003ebc06 	br	81110710 <__reset+0xfb0f0710>
81110c20:	8085883a 	add	r2,r16,r2
81110c24:	10c00117 	ldw	r3,4(r2)
81110c28:	81000317 	ldw	r4,12(r16)
81110c2c:	81400217 	ldw	r5,8(r16)
81110c30:	18c00054 	ori	r3,r3,1
81110c34:	10c00115 	stw	r3,4(r2)
81110c38:	29000315 	stw	r4,12(r5)
81110c3c:	21400215 	stw	r5,8(r4)
81110c40:	9009883a 	mov	r4,r18
81110c44:	11267f00 	call	811267f0 <__malloc_unlock>
81110c48:	80800204 	addi	r2,r16,8
81110c4c:	003f2506 	br	811108e4 <__reset+0xfb0f08e4>
81110c50:	12001704 	addi	r8,r2,92
81110c54:	11c016c4 	addi	r7,r2,91
81110c58:	4209883a 	add	r4,r8,r8
81110c5c:	003e9606 	br	811106b8 <__reset+0xfb0f06b8>
81110c60:	3804d1ba 	srli	r2,r7,6
81110c64:	11400e44 	addi	r5,r2,57
81110c68:	10c00e04 	addi	r3,r2,56
81110c6c:	294b883a 	add	r5,r5,r5
81110c70:	003fbc06 	br	81110b64 <__reset+0xfb0f0b64>
81110c74:	84ff5926 	beq	r16,r19,811109dc <__reset+0xfb0f09dc>
81110c78:	00a04534 	movhi	r2,33044
81110c7c:	10b3eb04 	addi	r2,r2,-12372
81110c80:	14000217 	ldw	r16,8(r2)
81110c84:	00bfff04 	movi	r2,-4
81110c88:	80c00117 	ldw	r3,4(r16)
81110c8c:	1886703a 	and	r3,r3,r2
81110c90:	003f9106 	br	81110ad8 <__reset+0xfb0f0ad8>
81110c94:	60800217 	ldw	r2,8(r12)
81110c98:	213fffc4 	addi	r4,r4,-1
81110c9c:	1300651e 	bne	r2,r12,81110e34 <_malloc_r+0x7fc>
81110ca0:	208000cc 	andi	r2,r4,3
81110ca4:	633ffe04 	addi	r12,r12,-8
81110ca8:	103ffa1e 	bne	r2,zero,81110c94 <__reset+0xfb0f0c94>
81110cac:	98800117 	ldw	r2,4(r19)
81110cb0:	0146303a 	nor	r3,zero,r5
81110cb4:	1884703a 	and	r2,r3,r2
81110cb8:	98800115 	stw	r2,4(r19)
81110cbc:	294b883a 	add	r5,r5,r5
81110cc0:	117f2836 	bltu	r2,r5,81110964 <__reset+0xfb0f0964>
81110cc4:	283f2726 	beq	r5,zero,81110964 <__reset+0xfb0f0964>
81110cc8:	2886703a 	and	r3,r5,r2
81110ccc:	5809883a 	mov	r4,r11
81110cd0:	183ec31e 	bne	r3,zero,811107e0 <__reset+0xfb0f07e0>
81110cd4:	294b883a 	add	r5,r5,r5
81110cd8:	2886703a 	and	r3,r5,r2
81110cdc:	21000104 	addi	r4,r4,4
81110ce0:	183ffc26 	beq	r3,zero,81110cd4 <__reset+0xfb0f0cd4>
81110ce4:	003ebe06 	br	811107e0 <__reset+0xfb0f07e0>
81110ce8:	00c05504 	movi	r3,340
81110cec:	18801236 	bltu	r3,r2,81110d38 <_malloc_r+0x700>
81110cf0:	8804d3fa 	srli	r2,r17,15
81110cf4:	12001e04 	addi	r8,r2,120
81110cf8:	11c01dc4 	addi	r7,r2,119
81110cfc:	4209883a 	add	r4,r8,r8
81110d00:	003e6d06 	br	811106b8 <__reset+0xfb0f06b8>
81110d04:	00c40004 	movi	r3,4096
81110d08:	003f4606 	br	81110a24 <__reset+0xfb0f0a24>
81110d0c:	00800044 	movi	r2,1
81110d10:	a0800115 	stw	r2,4(r20)
81110d14:	003f7406 	br	81110ae8 <__reset+0xfb0f0ae8>
81110d18:	1805d0ba 	srai	r2,r3,2
81110d1c:	01c00044 	movi	r7,1
81110d20:	30c00117 	ldw	r3,4(r6)
81110d24:	388e983a 	sll	r7,r7,r2
81110d28:	2805883a 	mov	r2,r5
81110d2c:	38c6b03a 	or	r3,r7,r3
81110d30:	30c00115 	stw	r3,4(r6)
81110d34:	003f9b06 	br	81110ba4 <__reset+0xfb0f0ba4>
81110d38:	00c15504 	movi	r3,1364
81110d3c:	18801a36 	bltu	r3,r2,81110da8 <_malloc_r+0x770>
81110d40:	8804d4ba 	srli	r2,r17,18
81110d44:	12001f44 	addi	r8,r2,125
81110d48:	11c01f04 	addi	r7,r2,124
81110d4c:	4209883a 	add	r4,r8,r8
81110d50:	003e5906 	br	811106b8 <__reset+0xfb0f06b8>
81110d54:	ad400404 	addi	r21,r21,16
81110d58:	003f1706 	br	811109b8 <__reset+0xfb0f09b8>
81110d5c:	00c01504 	movi	r3,84
81110d60:	18802336 	bltu	r3,r2,81110df0 <_malloc_r+0x7b8>
81110d64:	3804d33a 	srli	r2,r7,12
81110d68:	11401bc4 	addi	r5,r2,111
81110d6c:	10c01b84 	addi	r3,r2,110
81110d70:	294b883a 	add	r5,r5,r5
81110d74:	003f7b06 	br	81110b64 <__reset+0xfb0f0b64>
81110d78:	9c000217 	ldw	r16,8(r19)
81110d7c:	00bfff04 	movi	r2,-4
81110d80:	80c00117 	ldw	r3,4(r16)
81110d84:	1886703a 	and	r3,r3,r2
81110d88:	003f5306 	br	81110ad8 <__reset+0xfb0f0ad8>
81110d8c:	3083ffcc 	andi	r2,r6,4095
81110d90:	103f181e 	bne	r2,zero,811109f4 <__reset+0xfb0f09f4>
81110d94:	99000217 	ldw	r4,8(r19)
81110d98:	b545883a 	add	r2,r22,r21
81110d9c:	10800054 	ori	r2,r2,1
81110da0:	20800115 	stw	r2,4(r4)
81110da4:	003f3e06 	br	81110aa0 <__reset+0xfb0f0aa0>
81110da8:	01003f84 	movi	r4,254
81110dac:	02001fc4 	movi	r8,127
81110db0:	01c01f84 	movi	r7,126
81110db4:	003e4006 	br	811106b8 <__reset+0xfb0f06b8>
81110db8:	00a04534 	movhi	r2,33044
81110dbc:	10ba0704 	addi	r2,r2,-6116
81110dc0:	15000015 	stw	r20,0(r2)
81110dc4:	003f1106 	br	81110a0c <__reset+0xfb0f0a0c>
81110dc8:	00800044 	movi	r2,1
81110dcc:	002b883a 	mov	r21,zero
81110dd0:	003f1f06 	br	81110a50 <__reset+0xfb0f0a50>
81110dd4:	81400204 	addi	r5,r16,8
81110dd8:	9009883a 	mov	r4,r18
81110ddc:	1119d900 	call	81119d90 <_free_r>
81110de0:	00a04534 	movhi	r2,33044
81110de4:	10bac104 	addi	r2,r2,-5372
81110de8:	10c00017 	ldw	r3,0(r2)
81110dec:	003f2c06 	br	81110aa0 <__reset+0xfb0f0aa0>
81110df0:	00c05504 	movi	r3,340
81110df4:	18800536 	bltu	r3,r2,81110e0c <_malloc_r+0x7d4>
81110df8:	3804d3fa 	srli	r2,r7,15
81110dfc:	11401e04 	addi	r5,r2,120
81110e00:	10c01dc4 	addi	r3,r2,119
81110e04:	294b883a 	add	r5,r5,r5
81110e08:	003f5606 	br	81110b64 <__reset+0xfb0f0b64>
81110e0c:	00c15504 	movi	r3,1364
81110e10:	18800536 	bltu	r3,r2,81110e28 <_malloc_r+0x7f0>
81110e14:	3804d4ba 	srli	r2,r7,18
81110e18:	11401f44 	addi	r5,r2,125
81110e1c:	10c01f04 	addi	r3,r2,124
81110e20:	294b883a 	add	r5,r5,r5
81110e24:	003f4f06 	br	81110b64 <__reset+0xfb0f0b64>
81110e28:	01403f84 	movi	r5,254
81110e2c:	00c01f84 	movi	r3,126
81110e30:	003f4c06 	br	81110b64 <__reset+0xfb0f0b64>
81110e34:	98800117 	ldw	r2,4(r19)
81110e38:	003fa006 	br	81110cbc <__reset+0xfb0f0cbc>
81110e3c:	8808d0fa 	srli	r4,r17,3
81110e40:	20800044 	addi	r2,r4,1
81110e44:	1085883a 	add	r2,r2,r2
81110e48:	003e9006 	br	8111088c <__reset+0xfb0f088c>

81110e4c <memcpy>:
81110e4c:	defffd04 	addi	sp,sp,-12
81110e50:	de00012e 	bgeu	sp,et,81110e58 <memcpy+0xc>
81110e54:	003b68fa 	trap	3
81110e58:	00c003c4 	movi	r3,15
81110e5c:	dfc00215 	stw	ra,8(sp)
81110e60:	dc400115 	stw	r17,4(sp)
81110e64:	dc000015 	stw	r16,0(sp)
81110e68:	2005883a 	mov	r2,r4
81110e6c:	1980452e 	bgeu	r3,r6,81110f84 <memcpy+0x138>
81110e70:	2906b03a 	or	r3,r5,r4
81110e74:	18c000cc 	andi	r3,r3,3
81110e78:	1800441e 	bne	r3,zero,81110f8c <memcpy+0x140>
81110e7c:	347ffc04 	addi	r17,r6,-16
81110e80:	8822d13a 	srli	r17,r17,4
81110e84:	28c00104 	addi	r3,r5,4
81110e88:	23400104 	addi	r13,r4,4
81110e8c:	8820913a 	slli	r16,r17,4
81110e90:	2b000204 	addi	r12,r5,8
81110e94:	22c00204 	addi	r11,r4,8
81110e98:	84000504 	addi	r16,r16,20
81110e9c:	2a800304 	addi	r10,r5,12
81110ea0:	22400304 	addi	r9,r4,12
81110ea4:	2c21883a 	add	r16,r5,r16
81110ea8:	2811883a 	mov	r8,r5
81110eac:	200f883a 	mov	r7,r4
81110eb0:	41000017 	ldw	r4,0(r8)
81110eb4:	1fc00017 	ldw	ra,0(r3)
81110eb8:	63c00017 	ldw	r15,0(r12)
81110ebc:	39000015 	stw	r4,0(r7)
81110ec0:	53800017 	ldw	r14,0(r10)
81110ec4:	6fc00015 	stw	ra,0(r13)
81110ec8:	5bc00015 	stw	r15,0(r11)
81110ecc:	4b800015 	stw	r14,0(r9)
81110ed0:	18c00404 	addi	r3,r3,16
81110ed4:	39c00404 	addi	r7,r7,16
81110ed8:	42000404 	addi	r8,r8,16
81110edc:	6b400404 	addi	r13,r13,16
81110ee0:	63000404 	addi	r12,r12,16
81110ee4:	5ac00404 	addi	r11,r11,16
81110ee8:	52800404 	addi	r10,r10,16
81110eec:	4a400404 	addi	r9,r9,16
81110ef0:	1c3fef1e 	bne	r3,r16,81110eb0 <__reset+0xfb0f0eb0>
81110ef4:	89c00044 	addi	r7,r17,1
81110ef8:	380e913a 	slli	r7,r7,4
81110efc:	310003cc 	andi	r4,r6,15
81110f00:	02c000c4 	movi	r11,3
81110f04:	11c7883a 	add	r3,r2,r7
81110f08:	29cb883a 	add	r5,r5,r7
81110f0c:	5900212e 	bgeu	r11,r4,81110f94 <memcpy+0x148>
81110f10:	1813883a 	mov	r9,r3
81110f14:	2811883a 	mov	r8,r5
81110f18:	200f883a 	mov	r7,r4
81110f1c:	42800017 	ldw	r10,0(r8)
81110f20:	4a400104 	addi	r9,r9,4
81110f24:	39ffff04 	addi	r7,r7,-4
81110f28:	4abfff15 	stw	r10,-4(r9)
81110f2c:	42000104 	addi	r8,r8,4
81110f30:	59fffa36 	bltu	r11,r7,81110f1c <__reset+0xfb0f0f1c>
81110f34:	213fff04 	addi	r4,r4,-4
81110f38:	2008d0ba 	srli	r4,r4,2
81110f3c:	318000cc 	andi	r6,r6,3
81110f40:	21000044 	addi	r4,r4,1
81110f44:	2109883a 	add	r4,r4,r4
81110f48:	2109883a 	add	r4,r4,r4
81110f4c:	1907883a 	add	r3,r3,r4
81110f50:	290b883a 	add	r5,r5,r4
81110f54:	30000626 	beq	r6,zero,81110f70 <memcpy+0x124>
81110f58:	198d883a 	add	r6,r3,r6
81110f5c:	29c00003 	ldbu	r7,0(r5)
81110f60:	18c00044 	addi	r3,r3,1
81110f64:	29400044 	addi	r5,r5,1
81110f68:	19ffffc5 	stb	r7,-1(r3)
81110f6c:	19bffb1e 	bne	r3,r6,81110f5c <__reset+0xfb0f0f5c>
81110f70:	dfc00217 	ldw	ra,8(sp)
81110f74:	dc400117 	ldw	r17,4(sp)
81110f78:	dc000017 	ldw	r16,0(sp)
81110f7c:	dec00304 	addi	sp,sp,12
81110f80:	f800283a 	ret
81110f84:	2007883a 	mov	r3,r4
81110f88:	003ff206 	br	81110f54 <__reset+0xfb0f0f54>
81110f8c:	2007883a 	mov	r3,r4
81110f90:	003ff106 	br	81110f58 <__reset+0xfb0f0f58>
81110f94:	200d883a 	mov	r6,r4
81110f98:	003fee06 	br	81110f54 <__reset+0xfb0f0f54>

81110f9c <memset>:
81110f9c:	20c000cc 	andi	r3,r4,3
81110fa0:	2005883a 	mov	r2,r4
81110fa4:	18004426 	beq	r3,zero,811110b8 <memset+0x11c>
81110fa8:	31ffffc4 	addi	r7,r6,-1
81110fac:	30004026 	beq	r6,zero,811110b0 <memset+0x114>
81110fb0:	2813883a 	mov	r9,r5
81110fb4:	200d883a 	mov	r6,r4
81110fb8:	2007883a 	mov	r3,r4
81110fbc:	00000406 	br	81110fd0 <memset+0x34>
81110fc0:	3a3fffc4 	addi	r8,r7,-1
81110fc4:	31800044 	addi	r6,r6,1
81110fc8:	38003926 	beq	r7,zero,811110b0 <memset+0x114>
81110fcc:	400f883a 	mov	r7,r8
81110fd0:	18c00044 	addi	r3,r3,1
81110fd4:	32400005 	stb	r9,0(r6)
81110fd8:	1a0000cc 	andi	r8,r3,3
81110fdc:	403ff81e 	bne	r8,zero,81110fc0 <__reset+0xfb0f0fc0>
81110fe0:	010000c4 	movi	r4,3
81110fe4:	21c02d2e 	bgeu	r4,r7,8111109c <memset+0x100>
81110fe8:	29003fcc 	andi	r4,r5,255
81110fec:	200c923a 	slli	r6,r4,8
81110ff0:	3108b03a 	or	r4,r6,r4
81110ff4:	200c943a 	slli	r6,r4,16
81110ff8:	218cb03a 	or	r6,r4,r6
81110ffc:	010003c4 	movi	r4,15
81111000:	21c0182e 	bgeu	r4,r7,81111064 <memset+0xc8>
81111004:	3b3ffc04 	addi	r12,r7,-16
81111008:	6018d13a 	srli	r12,r12,4
8111100c:	1a000104 	addi	r8,r3,4
81111010:	1ac00204 	addi	r11,r3,8
81111014:	6008913a 	slli	r4,r12,4
81111018:	1a800304 	addi	r10,r3,12
8111101c:	1813883a 	mov	r9,r3
81111020:	21000504 	addi	r4,r4,20
81111024:	1909883a 	add	r4,r3,r4
81111028:	49800015 	stw	r6,0(r9)
8111102c:	41800015 	stw	r6,0(r8)
81111030:	59800015 	stw	r6,0(r11)
81111034:	51800015 	stw	r6,0(r10)
81111038:	42000404 	addi	r8,r8,16
8111103c:	4a400404 	addi	r9,r9,16
81111040:	5ac00404 	addi	r11,r11,16
81111044:	52800404 	addi	r10,r10,16
81111048:	413ff71e 	bne	r8,r4,81111028 <__reset+0xfb0f1028>
8111104c:	63000044 	addi	r12,r12,1
81111050:	6018913a 	slli	r12,r12,4
81111054:	39c003cc 	andi	r7,r7,15
81111058:	010000c4 	movi	r4,3
8111105c:	1b07883a 	add	r3,r3,r12
81111060:	21c00e2e 	bgeu	r4,r7,8111109c <memset+0x100>
81111064:	1813883a 	mov	r9,r3
81111068:	3811883a 	mov	r8,r7
8111106c:	010000c4 	movi	r4,3
81111070:	49800015 	stw	r6,0(r9)
81111074:	423fff04 	addi	r8,r8,-4
81111078:	4a400104 	addi	r9,r9,4
8111107c:	223ffc36 	bltu	r4,r8,81111070 <__reset+0xfb0f1070>
81111080:	393fff04 	addi	r4,r7,-4
81111084:	2008d0ba 	srli	r4,r4,2
81111088:	39c000cc 	andi	r7,r7,3
8111108c:	21000044 	addi	r4,r4,1
81111090:	2109883a 	add	r4,r4,r4
81111094:	2109883a 	add	r4,r4,r4
81111098:	1907883a 	add	r3,r3,r4
8111109c:	38000526 	beq	r7,zero,811110b4 <memset+0x118>
811110a0:	19cf883a 	add	r7,r3,r7
811110a4:	19400005 	stb	r5,0(r3)
811110a8:	18c00044 	addi	r3,r3,1
811110ac:	38fffd1e 	bne	r7,r3,811110a4 <__reset+0xfb0f10a4>
811110b0:	f800283a 	ret
811110b4:	f800283a 	ret
811110b8:	2007883a 	mov	r3,r4
811110bc:	300f883a 	mov	r7,r6
811110c0:	003fc706 	br	81110fe0 <__reset+0xfb0f0fe0>

811110c4 <_open_r>:
811110c4:	defffd04 	addi	sp,sp,-12
811110c8:	de00012e 	bgeu	sp,et,811110d0 <_open_r+0xc>
811110cc:	003b68fa 	trap	3
811110d0:	2805883a 	mov	r2,r5
811110d4:	dc000015 	stw	r16,0(sp)
811110d8:	04204534 	movhi	r16,33044
811110dc:	dc400115 	stw	r17,4(sp)
811110e0:	300b883a 	mov	r5,r6
811110e4:	843a5f04 	addi	r16,r16,-5764
811110e8:	2023883a 	mov	r17,r4
811110ec:	380d883a 	mov	r6,r7
811110f0:	1009883a 	mov	r4,r2
811110f4:	dfc00215 	stw	ra,8(sp)
811110f8:	80000015 	stw	zero,0(r16)
811110fc:	1125d540 	call	81125d54 <open>
81111100:	00ffffc4 	movi	r3,-1
81111104:	10c00526 	beq	r2,r3,8111111c <_open_r+0x58>
81111108:	dfc00217 	ldw	ra,8(sp)
8111110c:	dc400117 	ldw	r17,4(sp)
81111110:	dc000017 	ldw	r16,0(sp)
81111114:	dec00304 	addi	sp,sp,12
81111118:	f800283a 	ret
8111111c:	80c00017 	ldw	r3,0(r16)
81111120:	183ff926 	beq	r3,zero,81111108 <__reset+0xfb0f1108>
81111124:	88c00015 	stw	r3,0(r17)
81111128:	003ff706 	br	81111108 <__reset+0xfb0f1108>

8111112c <_printf_r>:
8111112c:	defffd04 	addi	sp,sp,-12
81111130:	2805883a 	mov	r2,r5
81111134:	de00012e 	bgeu	sp,et,8111113c <_printf_r+0x10>
81111138:	003b68fa 	trap	3
8111113c:	dfc00015 	stw	ra,0(sp)
81111140:	d9800115 	stw	r6,4(sp)
81111144:	d9c00215 	stw	r7,8(sp)
81111148:	21400217 	ldw	r5,8(r4)
8111114c:	d9c00104 	addi	r7,sp,4
81111150:	100d883a 	mov	r6,r2
81111154:	1113c9c0 	call	81113c9c <___vfprintf_internal_r>
81111158:	dfc00017 	ldw	ra,0(sp)
8111115c:	dec00304 	addi	sp,sp,12
81111160:	f800283a 	ret

81111164 <printf>:
81111164:	defffc04 	addi	sp,sp,-16
81111168:	de00012e 	bgeu	sp,et,81111170 <printf+0xc>
8111116c:	003b68fa 	trap	3
81111170:	dfc00015 	stw	ra,0(sp)
81111174:	d9400115 	stw	r5,4(sp)
81111178:	d9800215 	stw	r6,8(sp)
8111117c:	d9c00315 	stw	r7,12(sp)
81111180:	00a04534 	movhi	r2,33044
81111184:	10ba0604 	addi	r2,r2,-6120
81111188:	10800017 	ldw	r2,0(r2)
8111118c:	200b883a 	mov	r5,r4
81111190:	d9800104 	addi	r6,sp,4
81111194:	11000217 	ldw	r4,8(r2)
81111198:	1115e9c0 	call	81115e9c <__vfprintf_internal>
8111119c:	dfc00017 	ldw	ra,0(sp)
811111a0:	dec00404 	addi	sp,sp,16
811111a4:	f800283a 	ret

811111a8 <_puts_r>:
811111a8:	defff604 	addi	sp,sp,-40
811111ac:	de00012e 	bgeu	sp,et,811111b4 <_puts_r+0xc>
811111b0:	003b68fa 	trap	3
811111b4:	dc000715 	stw	r16,28(sp)
811111b8:	2021883a 	mov	r16,r4
811111bc:	2809883a 	mov	r4,r5
811111c0:	dc400815 	stw	r17,32(sp)
811111c4:	dfc00915 	stw	ra,36(sp)
811111c8:	2823883a 	mov	r17,r5
811111cc:	11117c80 	call	811117c8 <strlen>
811111d0:	10c00044 	addi	r3,r2,1
811111d4:	d8800115 	stw	r2,4(sp)
811111d8:	00a04534 	movhi	r2,33044
811111dc:	10b0fb04 	addi	r2,r2,-15380
811111e0:	d8800215 	stw	r2,8(sp)
811111e4:	00800044 	movi	r2,1
811111e8:	d8800315 	stw	r2,12(sp)
811111ec:	00800084 	movi	r2,2
811111f0:	dc400015 	stw	r17,0(sp)
811111f4:	d8c00615 	stw	r3,24(sp)
811111f8:	dec00415 	stw	sp,16(sp)
811111fc:	d8800515 	stw	r2,20(sp)
81111200:	80000226 	beq	r16,zero,8111120c <_puts_r+0x64>
81111204:	80800e17 	ldw	r2,56(r16)
81111208:	10001426 	beq	r2,zero,8111125c <_puts_r+0xb4>
8111120c:	81400217 	ldw	r5,8(r16)
81111210:	2880030b 	ldhu	r2,12(r5)
81111214:	10c8000c 	andi	r3,r2,8192
81111218:	1800061e 	bne	r3,zero,81111234 <_puts_r+0x8c>
8111121c:	29001917 	ldw	r4,100(r5)
81111220:	00f7ffc4 	movi	r3,-8193
81111224:	10880014 	ori	r2,r2,8192
81111228:	20c6703a 	and	r3,r4,r3
8111122c:	2880030d 	sth	r2,12(r5)
81111230:	28c01915 	stw	r3,100(r5)
81111234:	d9800404 	addi	r6,sp,16
81111238:	8009883a 	mov	r4,r16
8111123c:	111a0a80 	call	8111a0a8 <__sfvwrite_r>
81111240:	1000091e 	bne	r2,zero,81111268 <_puts_r+0xc0>
81111244:	00800284 	movi	r2,10
81111248:	dfc00917 	ldw	ra,36(sp)
8111124c:	dc400817 	ldw	r17,32(sp)
81111250:	dc000717 	ldw	r16,28(sp)
81111254:	dec00a04 	addi	sp,sp,40
81111258:	f800283a 	ret
8111125c:	8009883a 	mov	r4,r16
81111260:	11198f80 	call	811198f8 <__sinit>
81111264:	003fe906 	br	8111120c <__reset+0xfb0f120c>
81111268:	00bfffc4 	movi	r2,-1
8111126c:	003ff606 	br	81111248 <__reset+0xfb0f1248>

81111270 <puts>:
81111270:	00a04534 	movhi	r2,33044
81111274:	10ba0604 	addi	r2,r2,-6120
81111278:	200b883a 	mov	r5,r4
8111127c:	11000017 	ldw	r4,0(r2)
81111280:	11111a81 	jmpi	811111a8 <_puts_r>

81111284 <lflush>:
81111284:	2080030b 	ldhu	r2,12(r4)
81111288:	00c00244 	movi	r3,9
8111128c:	1080024c 	andi	r2,r2,9
81111290:	10c00226 	beq	r2,r3,8111129c <lflush+0x18>
81111294:	0005883a 	mov	r2,zero
81111298:	f800283a 	ret
8111129c:	11195601 	jmpi	81119560 <fflush>

811112a0 <__srefill_r>:
811112a0:	defffc04 	addi	sp,sp,-16
811112a4:	de00012e 	bgeu	sp,et,811112ac <__srefill_r+0xc>
811112a8:	003b68fa 	trap	3
811112ac:	dc400115 	stw	r17,4(sp)
811112b0:	dc000015 	stw	r16,0(sp)
811112b4:	dfc00315 	stw	ra,12(sp)
811112b8:	dc800215 	stw	r18,8(sp)
811112bc:	2023883a 	mov	r17,r4
811112c0:	2821883a 	mov	r16,r5
811112c4:	20000226 	beq	r4,zero,811112d0 <__srefill_r+0x30>
811112c8:	20800e17 	ldw	r2,56(r4)
811112cc:	10003c26 	beq	r2,zero,811113c0 <__srefill_r+0x120>
811112d0:	80c0030b 	ldhu	r3,12(r16)
811112d4:	1908000c 	andi	r4,r3,8192
811112d8:	1805883a 	mov	r2,r3
811112dc:	2000071e 	bne	r4,zero,811112fc <__srefill_r+0x5c>
811112e0:	81001917 	ldw	r4,100(r16)
811112e4:	18880014 	ori	r2,r3,8192
811112e8:	00f7ffc4 	movi	r3,-8193
811112ec:	20c8703a 	and	r4,r4,r3
811112f0:	8080030d 	sth	r2,12(r16)
811112f4:	1007883a 	mov	r3,r2
811112f8:	81001915 	stw	r4,100(r16)
811112fc:	80000115 	stw	zero,4(r16)
81111300:	1100080c 	andi	r4,r2,32
81111304:	2000571e 	bne	r4,zero,81111464 <__srefill_r+0x1c4>
81111308:	1100010c 	andi	r4,r2,4
8111130c:	20001f26 	beq	r4,zero,8111138c <__srefill_r+0xec>
81111310:	81400c17 	ldw	r5,48(r16)
81111314:	28000826 	beq	r5,zero,81111338 <__srefill_r+0x98>
81111318:	80801004 	addi	r2,r16,64
8111131c:	28800226 	beq	r5,r2,81111328 <__srefill_r+0x88>
81111320:	8809883a 	mov	r4,r17
81111324:	1119d900 	call	81119d90 <_free_r>
81111328:	80800f17 	ldw	r2,60(r16)
8111132c:	80000c15 	stw	zero,48(r16)
81111330:	80800115 	stw	r2,4(r16)
81111334:	1000391e 	bne	r2,zero,8111141c <__srefill_r+0x17c>
81111338:	80800417 	ldw	r2,16(r16)
8111133c:	10004b26 	beq	r2,zero,8111146c <__srefill_r+0x1cc>
81111340:	8480030b 	ldhu	r18,12(r16)
81111344:	908000cc 	andi	r2,r18,3
81111348:	10001f1e 	bne	r2,zero,811113c8 <__srefill_r+0x128>
8111134c:	81800417 	ldw	r6,16(r16)
81111350:	80800817 	ldw	r2,32(r16)
81111354:	81c00517 	ldw	r7,20(r16)
81111358:	81400717 	ldw	r5,28(r16)
8111135c:	81800015 	stw	r6,0(r16)
81111360:	8809883a 	mov	r4,r17
81111364:	103ee83a 	callr	r2
81111368:	80800115 	stw	r2,4(r16)
8111136c:	00800e0e 	bge	zero,r2,811113a8 <__srefill_r+0x108>
81111370:	0005883a 	mov	r2,zero
81111374:	dfc00317 	ldw	ra,12(sp)
81111378:	dc800217 	ldw	r18,8(sp)
8111137c:	dc400117 	ldw	r17,4(sp)
81111380:	dc000017 	ldw	r16,0(sp)
81111384:	dec00404 	addi	sp,sp,16
81111388:	f800283a 	ret
8111138c:	1100040c 	andi	r4,r2,16
81111390:	20003026 	beq	r4,zero,81111454 <__srefill_r+0x1b4>
81111394:	1080020c 	andi	r2,r2,8
81111398:	1000241e 	bne	r2,zero,8111142c <__srefill_r+0x18c>
8111139c:	18c00114 	ori	r3,r3,4
811113a0:	80c0030d 	sth	r3,12(r16)
811113a4:	003fe406 	br	81111338 <__reset+0xfb0f1338>
811113a8:	80c0030b 	ldhu	r3,12(r16)
811113ac:	1000161e 	bne	r2,zero,81111408 <__srefill_r+0x168>
811113b0:	18c00814 	ori	r3,r3,32
811113b4:	00bfffc4 	movi	r2,-1
811113b8:	80c0030d 	sth	r3,12(r16)
811113bc:	003fed06 	br	81111374 <__reset+0xfb0f1374>
811113c0:	11198f80 	call	811198f8 <__sinit>
811113c4:	003fc206 	br	811112d0 <__reset+0xfb0f12d0>
811113c8:	00a04534 	movhi	r2,33044
811113cc:	10ba0504 	addi	r2,r2,-6124
811113d0:	11000017 	ldw	r4,0(r2)
811113d4:	01604474 	movhi	r5,33041
811113d8:	00800044 	movi	r2,1
811113dc:	2944a104 	addi	r5,r5,4740
811113e0:	8080030d 	sth	r2,12(r16)
811113e4:	111a56c0 	call	8111a56c <_fwalk>
811113e8:	00800244 	movi	r2,9
811113ec:	8480030d 	sth	r18,12(r16)
811113f0:	9480024c 	andi	r18,r18,9
811113f4:	90bfd51e 	bne	r18,r2,8111134c <__reset+0xfb0f134c>
811113f8:	800b883a 	mov	r5,r16
811113fc:	8809883a 	mov	r4,r17
81111400:	11192d80 	call	811192d8 <__sflush_r>
81111404:	003fd106 	br	8111134c <__reset+0xfb0f134c>
81111408:	18c01014 	ori	r3,r3,64
8111140c:	80000115 	stw	zero,4(r16)
81111410:	00bfffc4 	movi	r2,-1
81111414:	80c0030d 	sth	r3,12(r16)
81111418:	003fd606 	br	81111374 <__reset+0xfb0f1374>
8111141c:	80c00e17 	ldw	r3,56(r16)
81111420:	0005883a 	mov	r2,zero
81111424:	80c00015 	stw	r3,0(r16)
81111428:	003fd206 	br	81111374 <__reset+0xfb0f1374>
8111142c:	800b883a 	mov	r5,r16
81111430:	8809883a 	mov	r4,r17
81111434:	11194fc0 	call	811194fc <_fflush_r>
81111438:	10000a1e 	bne	r2,zero,81111464 <__srefill_r+0x1c4>
8111143c:	8080030b 	ldhu	r2,12(r16)
81111440:	00fffdc4 	movi	r3,-9
81111444:	80000215 	stw	zero,8(r16)
81111448:	1886703a 	and	r3,r3,r2
8111144c:	80000615 	stw	zero,24(r16)
81111450:	003fd206 	br	8111139c <__reset+0xfb0f139c>
81111454:	00800244 	movi	r2,9
81111458:	88800015 	stw	r2,0(r17)
8111145c:	18c01014 	ori	r3,r3,64
81111460:	80c0030d 	sth	r3,12(r16)
81111464:	00bfffc4 	movi	r2,-1
81111468:	003fc206 	br	81111374 <__reset+0xfb0f1374>
8111146c:	800b883a 	mov	r5,r16
81111470:	8809883a 	mov	r4,r17
81111474:	11104740 	call	81110474 <__smakebuf_r>
81111478:	003fb106 	br	81111340 <__reset+0xfb0f1340>

8111147c <_sbrk_r>:
8111147c:	defffd04 	addi	sp,sp,-12
81111480:	de00012e 	bgeu	sp,et,81111488 <_sbrk_r+0xc>
81111484:	003b68fa 	trap	3
81111488:	dc000015 	stw	r16,0(sp)
8111148c:	04204534 	movhi	r16,33044
81111490:	dc400115 	stw	r17,4(sp)
81111494:	843a5f04 	addi	r16,r16,-5764
81111498:	2023883a 	mov	r17,r4
8111149c:	2809883a 	mov	r4,r5
811114a0:	dfc00215 	stw	ra,8(sp)
811114a4:	80000015 	stw	zero,0(r16)
811114a8:	11260640 	call	81126064 <sbrk>
811114ac:	00ffffc4 	movi	r3,-1
811114b0:	10c00526 	beq	r2,r3,811114c8 <_sbrk_r+0x4c>
811114b4:	dfc00217 	ldw	ra,8(sp)
811114b8:	dc400117 	ldw	r17,4(sp)
811114bc:	dc000017 	ldw	r16,0(sp)
811114c0:	dec00304 	addi	sp,sp,12
811114c4:	f800283a 	ret
811114c8:	80c00017 	ldw	r3,0(r16)
811114cc:	183ff926 	beq	r3,zero,811114b4 <__reset+0xfb0f14b4>
811114d0:	88c00015 	stw	r3,0(r17)
811114d4:	003ff706 	br	811114b4 <__reset+0xfb0f14b4>

811114d8 <scanf>:
811114d8:	defffc04 	addi	sp,sp,-16
811114dc:	de00012e 	bgeu	sp,et,811114e4 <scanf+0xc>
811114e0:	003b68fa 	trap	3
811114e4:	dfc00015 	stw	ra,0(sp)
811114e8:	d9400115 	stw	r5,4(sp)
811114ec:	d9800215 	stw	r6,8(sp)
811114f0:	d9c00315 	stw	r7,12(sp)
811114f4:	00a04534 	movhi	r2,33044
811114f8:	10ba0604 	addi	r2,r2,-6120
811114fc:	200d883a 	mov	r6,r4
81111500:	11000017 	ldw	r4,0(r2)
81111504:	d9c00104 	addi	r7,sp,4
81111508:	21400117 	ldw	r5,4(r4)
8111150c:	11177cc0 	call	811177cc <_vfscanf_r>
81111510:	dfc00017 	ldw	ra,0(sp)
81111514:	dec00404 	addi	sp,sp,16
81111518:	f800283a 	ret

8111151c <_scanf_r>:
8111151c:	defffd04 	addi	sp,sp,-12
81111520:	2805883a 	mov	r2,r5
81111524:	de00012e 	bgeu	sp,et,8111152c <_scanf_r+0x10>
81111528:	003b68fa 	trap	3
8111152c:	dfc00015 	stw	ra,0(sp)
81111530:	d9800115 	stw	r6,4(sp)
81111534:	d9c00215 	stw	r7,8(sp)
81111538:	21400117 	ldw	r5,4(r4)
8111153c:	d9c00104 	addi	r7,sp,4
81111540:	100d883a 	mov	r6,r2
81111544:	11177cc0 	call	811177cc <_vfscanf_r>
81111548:	dfc00017 	ldw	ra,0(sp)
8111154c:	dec00304 	addi	sp,sp,12
81111550:	f800283a 	ret

81111554 <_sprintf_r>:
81111554:	deffe404 	addi	sp,sp,-112
81111558:	2807883a 	mov	r3,r5
8111155c:	de00012e 	bgeu	sp,et,81111564 <_sprintf_r+0x10>
81111560:	003b68fa 	trap	3
81111564:	dfc01a15 	stw	ra,104(sp)
81111568:	d9c01b15 	stw	r7,108(sp)
8111156c:	00a00034 	movhi	r2,32768
81111570:	10bfffc4 	addi	r2,r2,-1
81111574:	02008204 	movi	r8,520
81111578:	d8800215 	stw	r2,8(sp)
8111157c:	d8800515 	stw	r2,20(sp)
81111580:	d9c01b04 	addi	r7,sp,108
81111584:	d80b883a 	mov	r5,sp
81111588:	00bfffc4 	movi	r2,-1
8111158c:	d8c00015 	stw	r3,0(sp)
81111590:	d8c00415 	stw	r3,16(sp)
81111594:	da00030d 	sth	r8,12(sp)
81111598:	d880038d 	sth	r2,14(sp)
8111159c:	1111abc0 	call	81111abc <___svfprintf_internal_r>
811115a0:	d8c00017 	ldw	r3,0(sp)
811115a4:	18000005 	stb	zero,0(r3)
811115a8:	dfc01a17 	ldw	ra,104(sp)
811115ac:	dec01c04 	addi	sp,sp,112
811115b0:	f800283a 	ret

811115b4 <sprintf>:
811115b4:	deffe304 	addi	sp,sp,-116
811115b8:	2007883a 	mov	r3,r4
811115bc:	de00012e 	bgeu	sp,et,811115c4 <sprintf+0x10>
811115c0:	003b68fa 	trap	3
811115c4:	dfc01a15 	stw	ra,104(sp)
811115c8:	d9801b15 	stw	r6,108(sp)
811115cc:	d9c01c15 	stw	r7,112(sp)
811115d0:	01204534 	movhi	r4,33044
811115d4:	213a0604 	addi	r4,r4,-6120
811115d8:	21000017 	ldw	r4,0(r4)
811115dc:	00a00034 	movhi	r2,32768
811115e0:	10bfffc4 	addi	r2,r2,-1
811115e4:	280d883a 	mov	r6,r5
811115e8:	02008204 	movi	r8,520
811115ec:	d8800215 	stw	r2,8(sp)
811115f0:	d8800515 	stw	r2,20(sp)
811115f4:	d9c01b04 	addi	r7,sp,108
811115f8:	d80b883a 	mov	r5,sp
811115fc:	00bfffc4 	movi	r2,-1
81111600:	d8c00015 	stw	r3,0(sp)
81111604:	d8c00415 	stw	r3,16(sp)
81111608:	da00030d 	sth	r8,12(sp)
8111160c:	d880038d 	sth	r2,14(sp)
81111610:	1111abc0 	call	81111abc <___svfprintf_internal_r>
81111614:	d8c00017 	ldw	r3,0(sp)
81111618:	18000005 	stb	zero,0(r3)
8111161c:	dfc01a17 	ldw	ra,104(sp)
81111620:	dec01d04 	addi	sp,sp,116
81111624:	f800283a 	ret

81111628 <__sread>:
81111628:	defffe04 	addi	sp,sp,-8
8111162c:	de00012e 	bgeu	sp,et,81111634 <__sread+0xc>
81111630:	003b68fa 	trap	3
81111634:	dc000015 	stw	r16,0(sp)
81111638:	2821883a 	mov	r16,r5
8111163c:	2940038f 	ldh	r5,14(r5)
81111640:	dfc00115 	stw	ra,4(sp)
81111644:	111bdbc0 	call	8111bdbc <_read_r>
81111648:	10000716 	blt	r2,zero,81111668 <__sread+0x40>
8111164c:	80c01417 	ldw	r3,80(r16)
81111650:	1887883a 	add	r3,r3,r2
81111654:	80c01415 	stw	r3,80(r16)
81111658:	dfc00117 	ldw	ra,4(sp)
8111165c:	dc000017 	ldw	r16,0(sp)
81111660:	dec00204 	addi	sp,sp,8
81111664:	f800283a 	ret
81111668:	80c0030b 	ldhu	r3,12(r16)
8111166c:	18fbffcc 	andi	r3,r3,61439
81111670:	80c0030d 	sth	r3,12(r16)
81111674:	dfc00117 	ldw	ra,4(sp)
81111678:	dc000017 	ldw	r16,0(sp)
8111167c:	dec00204 	addi	sp,sp,8
81111680:	f800283a 	ret

81111684 <__seofread>:
81111684:	0005883a 	mov	r2,zero
81111688:	f800283a 	ret

8111168c <__swrite>:
8111168c:	defffb04 	addi	sp,sp,-20
81111690:	de00012e 	bgeu	sp,et,81111698 <__swrite+0xc>
81111694:	003b68fa 	trap	3
81111698:	2880030b 	ldhu	r2,12(r5)
8111169c:	dcc00315 	stw	r19,12(sp)
811116a0:	dc800215 	stw	r18,8(sp)
811116a4:	dc400115 	stw	r17,4(sp)
811116a8:	dc000015 	stw	r16,0(sp)
811116ac:	dfc00415 	stw	ra,16(sp)
811116b0:	10c0400c 	andi	r3,r2,256
811116b4:	2821883a 	mov	r16,r5
811116b8:	2023883a 	mov	r17,r4
811116bc:	3025883a 	mov	r18,r6
811116c0:	3827883a 	mov	r19,r7
811116c4:	18000526 	beq	r3,zero,811116dc <__swrite+0x50>
811116c8:	2940038f 	ldh	r5,14(r5)
811116cc:	01c00084 	movi	r7,2
811116d0:	000d883a 	mov	r6,zero
811116d4:	111a8740 	call	8111a874 <_lseek_r>
811116d8:	8080030b 	ldhu	r2,12(r16)
811116dc:	8140038f 	ldh	r5,14(r16)
811116e0:	10bbffcc 	andi	r2,r2,61439
811116e4:	980f883a 	mov	r7,r19
811116e8:	900d883a 	mov	r6,r18
811116ec:	8809883a 	mov	r4,r17
811116f0:	8080030d 	sth	r2,12(r16)
811116f4:	dfc00417 	ldw	ra,16(sp)
811116f8:	dcc00317 	ldw	r19,12(sp)
811116fc:	dc800217 	ldw	r18,8(sp)
81111700:	dc400117 	ldw	r17,4(sp)
81111704:	dc000017 	ldw	r16,0(sp)
81111708:	dec00504 	addi	sp,sp,20
8111170c:	11178201 	jmpi	81117820 <_write_r>

81111710 <__sseek>:
81111710:	defffe04 	addi	sp,sp,-8
81111714:	de00012e 	bgeu	sp,et,8111171c <__sseek+0xc>
81111718:	003b68fa 	trap	3
8111171c:	dc000015 	stw	r16,0(sp)
81111720:	2821883a 	mov	r16,r5
81111724:	2940038f 	ldh	r5,14(r5)
81111728:	dfc00115 	stw	ra,4(sp)
8111172c:	111a8740 	call	8111a874 <_lseek_r>
81111730:	00ffffc4 	movi	r3,-1
81111734:	10c00826 	beq	r2,r3,81111758 <__sseek+0x48>
81111738:	80c0030b 	ldhu	r3,12(r16)
8111173c:	80801415 	stw	r2,80(r16)
81111740:	18c40014 	ori	r3,r3,4096
81111744:	80c0030d 	sth	r3,12(r16)
81111748:	dfc00117 	ldw	ra,4(sp)
8111174c:	dc000017 	ldw	r16,0(sp)
81111750:	dec00204 	addi	sp,sp,8
81111754:	f800283a 	ret
81111758:	80c0030b 	ldhu	r3,12(r16)
8111175c:	18fbffcc 	andi	r3,r3,61439
81111760:	80c0030d 	sth	r3,12(r16)
81111764:	dfc00117 	ldw	ra,4(sp)
81111768:	dc000017 	ldw	r16,0(sp)
8111176c:	dec00204 	addi	sp,sp,8
81111770:	f800283a 	ret

81111774 <__sclose>:
81111774:	2940038f 	ldh	r5,14(r5)
81111778:	11179e41 	jmpi	811179e4 <_close_r>

8111177c <strcspn>:
8111177c:	21c00007 	ldb	r7,0(r4)
81111780:	38000f26 	beq	r7,zero,811117c0 <strcspn+0x44>
81111784:	2a000007 	ldb	r8,0(r5)
81111788:	2005883a 	mov	r2,r4
8111178c:	40000726 	beq	r8,zero,811117ac <strcspn+0x30>
81111790:	3a000926 	beq	r7,r8,811117b8 <strcspn+0x3c>
81111794:	2807883a 	mov	r3,r5
81111798:	00000106 	br	811117a0 <strcspn+0x24>
8111179c:	31c00626 	beq	r6,r7,811117b8 <strcspn+0x3c>
811117a0:	18c00044 	addi	r3,r3,1
811117a4:	19800007 	ldb	r6,0(r3)
811117a8:	303ffc1e 	bne	r6,zero,8111179c <__reset+0xfb0f179c>
811117ac:	10800044 	addi	r2,r2,1
811117b0:	11c00007 	ldb	r7,0(r2)
811117b4:	383ff51e 	bne	r7,zero,8111178c <__reset+0xfb0f178c>
811117b8:	1105c83a 	sub	r2,r2,r4
811117bc:	f800283a 	ret
811117c0:	0005883a 	mov	r2,zero
811117c4:	f800283a 	ret

811117c8 <strlen>:
811117c8:	208000cc 	andi	r2,r4,3
811117cc:	10002026 	beq	r2,zero,81111850 <strlen+0x88>
811117d0:	20800007 	ldb	r2,0(r4)
811117d4:	10002026 	beq	r2,zero,81111858 <strlen+0x90>
811117d8:	2005883a 	mov	r2,r4
811117dc:	00000206 	br	811117e8 <strlen+0x20>
811117e0:	10c00007 	ldb	r3,0(r2)
811117e4:	18001826 	beq	r3,zero,81111848 <strlen+0x80>
811117e8:	10800044 	addi	r2,r2,1
811117ec:	10c000cc 	andi	r3,r2,3
811117f0:	183ffb1e 	bne	r3,zero,811117e0 <__reset+0xfb0f17e0>
811117f4:	10c00017 	ldw	r3,0(r2)
811117f8:	01ffbff4 	movhi	r7,65279
811117fc:	39ffbfc4 	addi	r7,r7,-257
81111800:	00ca303a 	nor	r5,zero,r3
81111804:	01a02074 	movhi	r6,32897
81111808:	19c7883a 	add	r3,r3,r7
8111180c:	31a02004 	addi	r6,r6,-32640
81111810:	1946703a 	and	r3,r3,r5
81111814:	1986703a 	and	r3,r3,r6
81111818:	1800091e 	bne	r3,zero,81111840 <strlen+0x78>
8111181c:	10800104 	addi	r2,r2,4
81111820:	10c00017 	ldw	r3,0(r2)
81111824:	19cb883a 	add	r5,r3,r7
81111828:	00c6303a 	nor	r3,zero,r3
8111182c:	28c6703a 	and	r3,r5,r3
81111830:	1986703a 	and	r3,r3,r6
81111834:	183ff926 	beq	r3,zero,8111181c <__reset+0xfb0f181c>
81111838:	00000106 	br	81111840 <strlen+0x78>
8111183c:	10800044 	addi	r2,r2,1
81111840:	10c00007 	ldb	r3,0(r2)
81111844:	183ffd1e 	bne	r3,zero,8111183c <__reset+0xfb0f183c>
81111848:	1105c83a 	sub	r2,r2,r4
8111184c:	f800283a 	ret
81111850:	2005883a 	mov	r2,r4
81111854:	003fe706 	br	811117f4 <__reset+0xfb0f17f4>
81111858:	0005883a 	mov	r2,zero
8111185c:	f800283a 	ret

81111860 <_strtol_r>:
81111860:	00a04534 	movhi	r2,33044
81111864:	defff404 	addi	sp,sp,-48
81111868:	10ba0404 	addi	r2,r2,-6128
8111186c:	de00012e 	bgeu	sp,et,81111874 <_strtol_r+0x14>
81111870:	003b68fa 	trap	3
81111874:	dd400715 	stw	r21,28(sp)
81111878:	15400017 	ldw	r21,0(r2)
8111187c:	dd800815 	stw	r22,32(sp)
81111880:	dd000615 	stw	r20,24(sp)
81111884:	dcc00515 	stw	r19,20(sp)
81111888:	d9000015 	stw	r4,0(sp)
8111188c:	dfc00b15 	stw	ra,44(sp)
81111890:	df000a15 	stw	fp,40(sp)
81111894:	ddc00915 	stw	r23,36(sp)
81111898:	dc800415 	stw	r18,16(sp)
8111189c:	dc400315 	stw	r17,12(sp)
811118a0:	dc000215 	stw	r16,8(sp)
811118a4:	2829883a 	mov	r20,r5
811118a8:	3027883a 	mov	r19,r6
811118ac:	382d883a 	mov	r22,r7
811118b0:	2809883a 	mov	r4,r5
811118b4:	24000003 	ldbu	r16,0(r4)
811118b8:	24400044 	addi	r17,r4,1
811118bc:	2007883a 	mov	r3,r4
811118c0:	ac05883a 	add	r2,r21,r16
811118c4:	10800043 	ldbu	r2,1(r2)
811118c8:	8809883a 	mov	r4,r17
811118cc:	1080020c 	andi	r2,r2,8
811118d0:	103ff81e 	bne	r2,zero,811118b4 <__reset+0xfb0f18b4>
811118d4:	00800b44 	movi	r2,45
811118d8:	80805826 	beq	r16,r2,81111a3c <_strtol_r+0x1dc>
811118dc:	00800ac4 	movi	r2,43
811118e0:	80805a26 	beq	r16,r2,81111a4c <_strtol_r+0x1ec>
811118e4:	0039883a 	mov	fp,zero
811118e8:	b0004426 	beq	r22,zero,811119fc <_strtol_r+0x19c>
811118ec:	00800404 	movi	r2,16
811118f0:	b0806026 	beq	r22,r2,81111a74 <_strtol_r+0x214>
811118f4:	b02f883a 	mov	r23,r22
811118f8:	00a00034 	movhi	r2,32768
811118fc:	e025003a 	cmpeq	r18,fp,zero
81111900:	14a5c83a 	sub	r18,r2,r18
81111904:	b80b883a 	mov	r5,r23
81111908:	9009883a 	mov	r4,r18
8111190c:	11232dc0 	call	811232dc <__umodsi3>
81111910:	b80b883a 	mov	r5,r23
81111914:	9009883a 	mov	r4,r18
81111918:	d8800115 	stw	r2,4(sp)
8111191c:	11232780 	call	81123278 <__udivsi3>
81111920:	ac07883a 	add	r3,r21,r16
81111924:	18c00043 	ldbu	r3,1(r3)
81111928:	880b883a 	mov	r5,r17
8111192c:	000d883a 	mov	r6,zero
81111930:	1a00010c 	andi	r8,r3,4
81111934:	0009883a 	mov	r4,zero
81111938:	02800044 	movi	r10,1
8111193c:	027fffc4 	movi	r9,-1
81111940:	d9c00117 	ldw	r7,4(sp)
81111944:	40000e26 	beq	r8,zero,81111980 <_strtol_r+0x120>
81111948:	843ff404 	addi	r16,r16,-48
8111194c:	8580120e 	bge	r16,r22,81111998 <_strtol_r+0x138>
81111950:	32400526 	beq	r6,r9,81111968 <_strtol_r+0x108>
81111954:	11002536 	bltu	r2,r4,811119ec <_strtol_r+0x18c>
81111958:	20802326 	beq	r4,r2,811119e8 <_strtol_r+0x188>
8111195c:	25c9383a 	mul	r4,r4,r23
81111960:	01800044 	movi	r6,1
81111964:	8109883a 	add	r4,r16,r4
81111968:	2c000003 	ldbu	r16,0(r5)
8111196c:	29400044 	addi	r5,r5,1
81111970:	ac07883a 	add	r3,r21,r16
81111974:	18c00043 	ldbu	r3,1(r3)
81111978:	1a00010c 	andi	r8,r3,4
8111197c:	403ff21e 	bne	r8,zero,81111948 <__reset+0xfb0f1948>
81111980:	18c000cc 	andi	r3,r3,3
81111984:	18000426 	beq	r3,zero,81111998 <_strtol_r+0x138>
81111988:	1a801a26 	beq	r3,r10,811119f4 <_strtol_r+0x194>
8111198c:	00c015c4 	movi	r3,87
81111990:	80e1c83a 	sub	r16,r16,r3
81111994:	85bfee16 	blt	r16,r22,81111950 <__reset+0xfb0f1950>
81111998:	00bfffc4 	movi	r2,-1
8111199c:	30801e26 	beq	r6,r2,81111a18 <_strtol_r+0x1b8>
811119a0:	e0001b1e 	bne	fp,zero,81111a10 <_strtol_r+0x1b0>
811119a4:	2005883a 	mov	r2,r4
811119a8:	98000326 	beq	r19,zero,811119b8 <_strtol_r+0x158>
811119ac:	3000211e 	bne	r6,zero,81111a34 <_strtol_r+0x1d4>
811119b0:	a00b883a 	mov	r5,r20
811119b4:	99400015 	stw	r5,0(r19)
811119b8:	dfc00b17 	ldw	ra,44(sp)
811119bc:	df000a17 	ldw	fp,40(sp)
811119c0:	ddc00917 	ldw	r23,36(sp)
811119c4:	dd800817 	ldw	r22,32(sp)
811119c8:	dd400717 	ldw	r21,28(sp)
811119cc:	dd000617 	ldw	r20,24(sp)
811119d0:	dcc00517 	ldw	r19,20(sp)
811119d4:	dc800417 	ldw	r18,16(sp)
811119d8:	dc400317 	ldw	r17,12(sp)
811119dc:	dc000217 	ldw	r16,8(sp)
811119e0:	dec00c04 	addi	sp,sp,48
811119e4:	f800283a 	ret
811119e8:	3c3fdc0e 	bge	r7,r16,8111195c <__reset+0xfb0f195c>
811119ec:	01bfffc4 	movi	r6,-1
811119f0:	003fdd06 	br	81111968 <__reset+0xfb0f1968>
811119f4:	00c00dc4 	movi	r3,55
811119f8:	003fe506 	br	81111990 <__reset+0xfb0f1990>
811119fc:	00800c04 	movi	r2,48
81111a00:	80801626 	beq	r16,r2,81111a5c <_strtol_r+0x1fc>
81111a04:	05800284 	movi	r22,10
81111a08:	b02f883a 	mov	r23,r22
81111a0c:	003fba06 	br	811118f8 <__reset+0xfb0f18f8>
81111a10:	0109c83a 	sub	r4,zero,r4
81111a14:	003fe306 	br	811119a4 <__reset+0xfb0f19a4>
81111a18:	d9000017 	ldw	r4,0(sp)
81111a1c:	00c00884 	movi	r3,34
81111a20:	e005003a 	cmpeq	r2,fp,zero
81111a24:	20c00015 	stw	r3,0(r4)
81111a28:	00e00034 	movhi	r3,32768
81111a2c:	1885c83a 	sub	r2,r3,r2
81111a30:	983fe126 	beq	r19,zero,811119b8 <__reset+0xfb0f19b8>
81111a34:	297fffc4 	addi	r5,r5,-1
81111a38:	003fde06 	br	811119b4 <__reset+0xfb0f19b4>
81111a3c:	1c400084 	addi	r17,r3,2
81111a40:	1c000043 	ldbu	r16,1(r3)
81111a44:	07000044 	movi	fp,1
81111a48:	003fa706 	br	811118e8 <__reset+0xfb0f18e8>
81111a4c:	1c400084 	addi	r17,r3,2
81111a50:	1c000043 	ldbu	r16,1(r3)
81111a54:	0039883a 	mov	fp,zero
81111a58:	003fa306 	br	811118e8 <__reset+0xfb0f18e8>
81111a5c:	88800003 	ldbu	r2,0(r17)
81111a60:	00c01604 	movi	r3,88
81111a64:	108037cc 	andi	r2,r2,223
81111a68:	10c00826 	beq	r2,r3,81111a8c <_strtol_r+0x22c>
81111a6c:	05800204 	movi	r22,8
81111a70:	003fa006 	br	811118f4 <__reset+0xfb0f18f4>
81111a74:	00800c04 	movi	r2,48
81111a78:	80bf9e1e 	bne	r16,r2,811118f4 <__reset+0xfb0f18f4>
81111a7c:	88800003 	ldbu	r2,0(r17)
81111a80:	00c01604 	movi	r3,88
81111a84:	108037cc 	andi	r2,r2,223
81111a88:	10ff9a1e 	bne	r2,r3,811118f4 <__reset+0xfb0f18f4>
81111a8c:	05c00404 	movi	r23,16
81111a90:	8c000043 	ldbu	r16,1(r17)
81111a94:	b82d883a 	mov	r22,r23
81111a98:	8c400084 	addi	r17,r17,2
81111a9c:	003f9606 	br	811118f8 <__reset+0xfb0f18f8>

81111aa0 <strtol>:
81111aa0:	00a04534 	movhi	r2,33044
81111aa4:	10ba0604 	addi	r2,r2,-6120
81111aa8:	300f883a 	mov	r7,r6
81111aac:	280d883a 	mov	r6,r5
81111ab0:	200b883a 	mov	r5,r4
81111ab4:	11000017 	ldw	r4,0(r2)
81111ab8:	11118601 	jmpi	81111860 <_strtol_r>

81111abc <___svfprintf_internal_r>:
81111abc:	deffb704 	addi	sp,sp,-292
81111ac0:	de00012e 	bgeu	sp,et,81111ac8 <___svfprintf_internal_r+0xc>
81111ac4:	003b68fa 	trap	3
81111ac8:	dfc04815 	stw	ra,288(sp)
81111acc:	ddc04615 	stw	r23,280(sp)
81111ad0:	d9402c15 	stw	r5,176(sp)
81111ad4:	d9003915 	stw	r4,228(sp)
81111ad8:	302f883a 	mov	r23,r6
81111adc:	d9c02d15 	stw	r7,180(sp)
81111ae0:	df004715 	stw	fp,284(sp)
81111ae4:	dd804515 	stw	r22,276(sp)
81111ae8:	dd404415 	stw	r21,272(sp)
81111aec:	dd004315 	stw	r20,268(sp)
81111af0:	dcc04215 	stw	r19,264(sp)
81111af4:	dc804115 	stw	r18,260(sp)
81111af8:	dc404015 	stw	r17,256(sp)
81111afc:	dc003f15 	stw	r16,252(sp)
81111b00:	111a8440 	call	8111a844 <_localeconv_r>
81111b04:	10800017 	ldw	r2,0(r2)
81111b08:	1009883a 	mov	r4,r2
81111b0c:	d8803415 	stw	r2,208(sp)
81111b10:	11117c80 	call	811117c8 <strlen>
81111b14:	d8c02c17 	ldw	r3,176(sp)
81111b18:	d8803815 	stw	r2,224(sp)
81111b1c:	1880030b 	ldhu	r2,12(r3)
81111b20:	1080200c 	andi	r2,r2,128
81111b24:	10000226 	beq	r2,zero,81111b30 <___svfprintf_internal_r+0x74>
81111b28:	18800417 	ldw	r2,16(r3)
81111b2c:	10067f26 	beq	r2,zero,8111352c <___svfprintf_internal_r+0x1a70>
81111b30:	dcc03917 	ldw	r19,228(sp)
81111b34:	d8c00404 	addi	r3,sp,16
81111b38:	05604534 	movhi	r21,33044
81111b3c:	d9001e04 	addi	r4,sp,120
81111b40:	ad710c84 	addi	r21,r21,-15310
81111b44:	d8c01e15 	stw	r3,120(sp)
81111b48:	d8002015 	stw	zero,128(sp)
81111b4c:	d8001f15 	stw	zero,124(sp)
81111b50:	d8003315 	stw	zero,204(sp)
81111b54:	d8003615 	stw	zero,216(sp)
81111b58:	d8003715 	stw	zero,220(sp)
81111b5c:	1811883a 	mov	r8,r3
81111b60:	d8003a15 	stw	zero,232(sp)
81111b64:	d8003b15 	stw	zero,236(sp)
81111b68:	d8002f15 	stw	zero,188(sp)
81111b6c:	d9002815 	stw	r4,160(sp)
81111b70:	b8800007 	ldb	r2,0(r23)
81111b74:	10026726 	beq	r2,zero,81112514 <___svfprintf_internal_r+0xa58>
81111b78:	00c00944 	movi	r3,37
81111b7c:	b821883a 	mov	r16,r23
81111b80:	10c0021e 	bne	r2,r3,81111b8c <___svfprintf_internal_r+0xd0>
81111b84:	00001406 	br	81111bd8 <___svfprintf_internal_r+0x11c>
81111b88:	10c00326 	beq	r2,r3,81111b98 <___svfprintf_internal_r+0xdc>
81111b8c:	84000044 	addi	r16,r16,1
81111b90:	80800007 	ldb	r2,0(r16)
81111b94:	103ffc1e 	bne	r2,zero,81111b88 <__reset+0xfb0f1b88>
81111b98:	85e3c83a 	sub	r17,r16,r23
81111b9c:	88000e26 	beq	r17,zero,81111bd8 <___svfprintf_internal_r+0x11c>
81111ba0:	d8c02017 	ldw	r3,128(sp)
81111ba4:	d8801f17 	ldw	r2,124(sp)
81111ba8:	45c00015 	stw	r23,0(r8)
81111bac:	1c47883a 	add	r3,r3,r17
81111bb0:	10800044 	addi	r2,r2,1
81111bb4:	d8c02015 	stw	r3,128(sp)
81111bb8:	44400115 	stw	r17,4(r8)
81111bbc:	d8801f15 	stw	r2,124(sp)
81111bc0:	00c001c4 	movi	r3,7
81111bc4:	18809716 	blt	r3,r2,81111e24 <___svfprintf_internal_r+0x368>
81111bc8:	42000204 	addi	r8,r8,8
81111bcc:	d9402f17 	ldw	r5,188(sp)
81111bd0:	2c4b883a 	add	r5,r5,r17
81111bd4:	d9402f15 	stw	r5,188(sp)
81111bd8:	80800007 	ldb	r2,0(r16)
81111bdc:	10009826 	beq	r2,zero,81111e40 <___svfprintf_internal_r+0x384>
81111be0:	84400047 	ldb	r17,1(r16)
81111be4:	00bfffc4 	movi	r2,-1
81111be8:	85c00044 	addi	r23,r16,1
81111bec:	d8002785 	stb	zero,158(sp)
81111bf0:	0007883a 	mov	r3,zero
81111bf4:	000f883a 	mov	r7,zero
81111bf8:	d8802915 	stw	r2,164(sp)
81111bfc:	d8003115 	stw	zero,196(sp)
81111c00:	0025883a 	mov	r18,zero
81111c04:	01401604 	movi	r5,88
81111c08:	01800244 	movi	r6,9
81111c0c:	02800a84 	movi	r10,42
81111c10:	02401b04 	movi	r9,108
81111c14:	bdc00044 	addi	r23,r23,1
81111c18:	88bff804 	addi	r2,r17,-32
81111c1c:	2882f036 	bltu	r5,r2,811127e0 <___svfprintf_internal_r+0xd24>
81111c20:	100490ba 	slli	r2,r2,2
81111c24:	01204474 	movhi	r4,33041
81111c28:	21070e04 	addi	r4,r4,7224
81111c2c:	1105883a 	add	r2,r2,r4
81111c30:	10800017 	ldw	r2,0(r2)
81111c34:	1000683a 	jmp	r2
81111c38:	81112748 	cmpgei	r4,r16,17565
81111c3c:	811127e0 	cmpeqi	r4,r16,17567
81111c40:	811127e0 	cmpeqi	r4,r16,17567
81111c44:	8111273c 	xorhi	r4,r16,17564
81111c48:	811127e0 	cmpeqi	r4,r16,17567
81111c4c:	811127e0 	cmpeqi	r4,r16,17567
81111c50:	811127e0 	cmpeqi	r4,r16,17567
81111c54:	811127e0 	cmpeqi	r4,r16,17567
81111c58:	811127e0 	cmpeqi	r4,r16,17567
81111c5c:	811127e0 	cmpeqi	r4,r16,17567
81111c60:	81111e9c 	xori	r4,r16,17530
81111c64:	81112678 	rdprs	r4,r16,17561
81111c68:	811127e0 	cmpeqi	r4,r16,17567
81111c6c:	81111dac 	andhi	r4,r16,17526
81111c70:	81111ec4 	addi	r4,r16,17531
81111c74:	811127e0 	cmpeqi	r4,r16,17567
81111c78:	81111f38 	rdprs	r4,r16,17532
81111c7c:	81111f04 	addi	r4,r16,17532
81111c80:	81111f04 	addi	r4,r16,17532
81111c84:	81111f04 	addi	r4,r16,17532
81111c88:	81111f04 	addi	r4,r16,17532
81111c8c:	81111f04 	addi	r4,r16,17532
81111c90:	81111f04 	addi	r4,r16,17532
81111c94:	81111f04 	addi	r4,r16,17532
81111c98:	81111f04 	addi	r4,r16,17532
81111c9c:	81111f04 	addi	r4,r16,17532
81111ca0:	811127e0 	cmpeqi	r4,r16,17567
81111ca4:	811127e0 	cmpeqi	r4,r16,17567
81111ca8:	811127e0 	cmpeqi	r4,r16,17567
81111cac:	811127e0 	cmpeqi	r4,r16,17567
81111cb0:	811127e0 	cmpeqi	r4,r16,17567
81111cb4:	811127e0 	cmpeqi	r4,r16,17567
81111cb8:	811127e0 	cmpeqi	r4,r16,17567
81111cbc:	811127e0 	cmpeqi	r4,r16,17567
81111cc0:	811127e0 	cmpeqi	r4,r16,17567
81111cc4:	811127e0 	cmpeqi	r4,r16,17567
81111cc8:	81111ff0 	cmpltui	r4,r16,17535
81111ccc:	81111f44 	addi	r4,r16,17533
81111cd0:	811127e0 	cmpeqi	r4,r16,17567
81111cd4:	81111f44 	addi	r4,r16,17533
81111cd8:	811127e0 	cmpeqi	r4,r16,17567
81111cdc:	811127e0 	cmpeqi	r4,r16,17567
81111ce0:	811127e0 	cmpeqi	r4,r16,17567
81111ce4:	811127e0 	cmpeqi	r4,r16,17567
81111ce8:	81111fe4 	muli	r4,r16,17535
81111cec:	811127e0 	cmpeqi	r4,r16,17567
81111cf0:	811127e0 	cmpeqi	r4,r16,17567
81111cf4:	811120ac 	andhi	r4,r16,17538
81111cf8:	811127e0 	cmpeqi	r4,r16,17567
81111cfc:	811127e0 	cmpeqi	r4,r16,17567
81111d00:	811127e0 	cmpeqi	r4,r16,17567
81111d04:	811127e0 	cmpeqi	r4,r16,17567
81111d08:	811127e0 	cmpeqi	r4,r16,17567
81111d0c:	8111251c 	xori	r4,r16,17556
81111d10:	811127e0 	cmpeqi	r4,r16,17567
81111d14:	811127e0 	cmpeqi	r4,r16,17567
81111d18:	8111257c 	xorhi	r4,r16,17557
81111d1c:	811127e0 	cmpeqi	r4,r16,17567
81111d20:	811127e0 	cmpeqi	r4,r16,17567
81111d24:	811127e0 	cmpeqi	r4,r16,17567
81111d28:	811127e0 	cmpeqi	r4,r16,17567
81111d2c:	811127e0 	cmpeqi	r4,r16,17567
81111d30:	811127e0 	cmpeqi	r4,r16,17567
81111d34:	811127e0 	cmpeqi	r4,r16,17567
81111d38:	811127e0 	cmpeqi	r4,r16,17567
81111d3c:	811127e0 	cmpeqi	r4,r16,17567
81111d40:	811127e0 	cmpeqi	r4,r16,17567
81111d44:	8111262c 	andhi	r4,r16,17560
81111d48:	81112768 	cmpgeui	r4,r16,17565
81111d4c:	81111f44 	addi	r4,r16,17533
81111d50:	81111f44 	addi	r4,r16,17533
81111d54:	81111f44 	addi	r4,r16,17533
81111d58:	811127bc 	xorhi	r4,r16,17566
81111d5c:	81112768 	cmpgeui	r4,r16,17565
81111d60:	811127e0 	cmpeqi	r4,r16,17567
81111d64:	811127e0 	cmpeqi	r4,r16,17567
81111d68:	81112778 	rdprs	r4,r16,17565
81111d6c:	811127e0 	cmpeqi	r4,r16,17567
81111d70:	81112788 	cmpgei	r4,r16,17566
81111d74:	81112668 	cmpgeui	r4,r16,17561
81111d78:	81111db8 	rdprs	r4,r16,17526
81111d7c:	81112688 	cmpgei	r4,r16,17562
81111d80:	811127e0 	cmpeqi	r4,r16,17567
81111d84:	81112694 	ori	r4,r16,17562
81111d88:	811127e0 	cmpeqi	r4,r16,17567
81111d8c:	811126f0 	cmpltui	r4,r16,17563
81111d90:	811127e0 	cmpeqi	r4,r16,17567
81111d94:	811127e0 	cmpeqi	r4,r16,17567
81111d98:	81112700 	call	88111270 <__reset+0x20f1270>
81111d9c:	d9003117 	ldw	r4,196(sp)
81111da0:	d8802d15 	stw	r2,180(sp)
81111da4:	0109c83a 	sub	r4,zero,r4
81111da8:	d9003115 	stw	r4,196(sp)
81111dac:	94800114 	ori	r18,r18,4
81111db0:	bc400007 	ldb	r17,0(r23)
81111db4:	003f9706 	br	81111c14 <__reset+0xfb0f1c14>
81111db8:	00800c04 	movi	r2,48
81111dbc:	d9002d17 	ldw	r4,180(sp)
81111dc0:	d9402917 	ldw	r5,164(sp)
81111dc4:	d8802705 	stb	r2,156(sp)
81111dc8:	00801e04 	movi	r2,120
81111dcc:	d8802745 	stb	r2,157(sp)
81111dd0:	d8002785 	stb	zero,158(sp)
81111dd4:	20c00104 	addi	r3,r4,4
81111dd8:	25000017 	ldw	r20,0(r4)
81111ddc:	002d883a 	mov	r22,zero
81111de0:	90800094 	ori	r2,r18,2
81111de4:	28028616 	blt	r5,zero,81112800 <___svfprintf_internal_r+0xd44>
81111de8:	00bfdfc4 	movi	r2,-129
81111dec:	90a4703a 	and	r18,r18,r2
81111df0:	d8c02d15 	stw	r3,180(sp)
81111df4:	94800094 	ori	r18,r18,2
81111df8:	a002731e 	bne	r20,zero,811127c8 <___svfprintf_internal_r+0xd0c>
81111dfc:	00a04534 	movhi	r2,33044
81111e00:	10b10504 	addi	r2,r2,-15340
81111e04:	d8803a15 	stw	r2,232(sp)
81111e08:	04401e04 	movi	r17,120
81111e0c:	d8c02917 	ldw	r3,164(sp)
81111e10:	0039883a 	mov	fp,zero
81111e14:	1801d526 	beq	r3,zero,8111256c <___svfprintf_internal_r+0xab0>
81111e18:	0029883a 	mov	r20,zero
81111e1c:	002d883a 	mov	r22,zero
81111e20:	0001f106 	br	811125e8 <___svfprintf_internal_r+0xb2c>
81111e24:	d9402c17 	ldw	r5,176(sp)
81111e28:	d9801e04 	addi	r6,sp,120
81111e2c:	9809883a 	mov	r4,r19
81111e30:	111e57c0 	call	8111e57c <__ssprint_r>
81111e34:	1000081e 	bne	r2,zero,81111e58 <___svfprintf_internal_r+0x39c>
81111e38:	da000404 	addi	r8,sp,16
81111e3c:	003f6306 	br	81111bcc <__reset+0xfb0f1bcc>
81111e40:	d8802017 	ldw	r2,128(sp)
81111e44:	10000426 	beq	r2,zero,81111e58 <___svfprintf_internal_r+0x39c>
81111e48:	d9402c17 	ldw	r5,176(sp)
81111e4c:	d9003917 	ldw	r4,228(sp)
81111e50:	d9801e04 	addi	r6,sp,120
81111e54:	111e57c0 	call	8111e57c <__ssprint_r>
81111e58:	d8802c17 	ldw	r2,176(sp)
81111e5c:	10c0030b 	ldhu	r3,12(r2)
81111e60:	d8802f17 	ldw	r2,188(sp)
81111e64:	18c0100c 	andi	r3,r3,64
81111e68:	1805f51e 	bne	r3,zero,81113640 <___svfprintf_internal_r+0x1b84>
81111e6c:	dfc04817 	ldw	ra,288(sp)
81111e70:	df004717 	ldw	fp,284(sp)
81111e74:	ddc04617 	ldw	r23,280(sp)
81111e78:	dd804517 	ldw	r22,276(sp)
81111e7c:	dd404417 	ldw	r21,272(sp)
81111e80:	dd004317 	ldw	r20,268(sp)
81111e84:	dcc04217 	ldw	r19,264(sp)
81111e88:	dc804117 	ldw	r18,260(sp)
81111e8c:	dc404017 	ldw	r17,256(sp)
81111e90:	dc003f17 	ldw	r16,252(sp)
81111e94:	dec04904 	addi	sp,sp,292
81111e98:	f800283a 	ret
81111e9c:	d8802d17 	ldw	r2,180(sp)
81111ea0:	d9002d17 	ldw	r4,180(sp)
81111ea4:	10800017 	ldw	r2,0(r2)
81111ea8:	d8803115 	stw	r2,196(sp)
81111eac:	20800104 	addi	r2,r4,4
81111eb0:	d9003117 	ldw	r4,196(sp)
81111eb4:	203fb916 	blt	r4,zero,81111d9c <__reset+0xfb0f1d9c>
81111eb8:	d8802d15 	stw	r2,180(sp)
81111ebc:	bc400007 	ldb	r17,0(r23)
81111ec0:	003f5406 	br	81111c14 <__reset+0xfb0f1c14>
81111ec4:	bc400007 	ldb	r17,0(r23)
81111ec8:	bac00044 	addi	r11,r23,1
81111ecc:	8a873926 	beq	r17,r10,81113bb4 <___svfprintf_internal_r+0x20f8>
81111ed0:	88bff404 	addi	r2,r17,-48
81111ed4:	0009883a 	mov	r4,zero
81111ed8:	30868836 	bltu	r6,r2,811138fc <___svfprintf_internal_r+0x1e40>
81111edc:	5c400007 	ldb	r17,0(r11)
81111ee0:	210002a4 	muli	r4,r4,10
81111ee4:	5dc00044 	addi	r23,r11,1
81111ee8:	b817883a 	mov	r11,r23
81111eec:	2089883a 	add	r4,r4,r2
81111ef0:	88bff404 	addi	r2,r17,-48
81111ef4:	30bff92e 	bgeu	r6,r2,81111edc <__reset+0xfb0f1edc>
81111ef8:	2005d716 	blt	r4,zero,81113658 <___svfprintf_internal_r+0x1b9c>
81111efc:	d9002915 	stw	r4,164(sp)
81111f00:	003f4506 	br	81111c18 <__reset+0xfb0f1c18>
81111f04:	b809883a 	mov	r4,r23
81111f08:	d8003115 	stw	zero,196(sp)
81111f0c:	88bff404 	addi	r2,r17,-48
81111f10:	0017883a 	mov	r11,zero
81111f14:	24400007 	ldb	r17,0(r4)
81111f18:	5ac002a4 	muli	r11,r11,10
81111f1c:	bdc00044 	addi	r23,r23,1
81111f20:	b809883a 	mov	r4,r23
81111f24:	12d7883a 	add	r11,r2,r11
81111f28:	88bff404 	addi	r2,r17,-48
81111f2c:	30bff92e 	bgeu	r6,r2,81111f14 <__reset+0xfb0f1f14>
81111f30:	dac03115 	stw	r11,196(sp)
81111f34:	003f3806 	br	81111c18 <__reset+0xfb0f1c18>
81111f38:	94802014 	ori	r18,r18,128
81111f3c:	bc400007 	ldb	r17,0(r23)
81111f40:	003f3406 	br	81111c14 <__reset+0xfb0f1c14>
81111f44:	18c03fcc 	andi	r3,r3,255
81111f48:	1807471e 	bne	r3,zero,81113c68 <___svfprintf_internal_r+0x21ac>
81111f4c:	9080020c 	andi	r2,r18,8
81111f50:	10047d26 	beq	r2,zero,81113148 <___svfprintf_internal_r+0x168c>
81111f54:	d8c02d17 	ldw	r3,180(sp)
81111f58:	d9002d17 	ldw	r4,180(sp)
81111f5c:	d9402d17 	ldw	r5,180(sp)
81111f60:	18c00017 	ldw	r3,0(r3)
81111f64:	21000117 	ldw	r4,4(r4)
81111f68:	29400204 	addi	r5,r5,8
81111f6c:	d8c03615 	stw	r3,216(sp)
81111f70:	d9003715 	stw	r4,220(sp)
81111f74:	d9402d15 	stw	r5,180(sp)
81111f78:	d9003617 	ldw	r4,216(sp)
81111f7c:	d9403717 	ldw	r5,220(sp)
81111f80:	da003e15 	stw	r8,248(sp)
81111f84:	04000044 	movi	r16,1
81111f88:	111c3900 	call	8111c390 <__fpclassifyd>
81111f8c:	da003e17 	ldw	r8,248(sp)
81111f90:	14044b1e 	bne	r2,r16,811130c0 <___svfprintf_internal_r+0x1604>
81111f94:	d9003617 	ldw	r4,216(sp)
81111f98:	d9403717 	ldw	r5,220(sp)
81111f9c:	000d883a 	mov	r6,zero
81111fa0:	000f883a 	mov	r7,zero
81111fa4:	11248380 	call	81124838 <__ledf2>
81111fa8:	da003e17 	ldw	r8,248(sp)
81111fac:	1005f316 	blt	r2,zero,8111377c <___svfprintf_internal_r+0x1cc0>
81111fb0:	df002783 	ldbu	fp,158(sp)
81111fb4:	008011c4 	movi	r2,71
81111fb8:	1445590e 	bge	r2,r17,81113520 <___svfprintf_internal_r+0x1a64>
81111fbc:	04204534 	movhi	r16,33044
81111fc0:	8430fd04 	addi	r16,r16,-15372
81111fc4:	00c000c4 	movi	r3,3
81111fc8:	00bfdfc4 	movi	r2,-129
81111fcc:	d8c02a15 	stw	r3,168(sp)
81111fd0:	90a4703a 	and	r18,r18,r2
81111fd4:	d8c02e15 	stw	r3,184(sp)
81111fd8:	d8002915 	stw	zero,164(sp)
81111fdc:	d8003215 	stw	zero,200(sp)
81111fe0:	00006606 	br	8111217c <___svfprintf_internal_r+0x6c0>
81111fe4:	94800214 	ori	r18,r18,8
81111fe8:	bc400007 	ldb	r17,0(r23)
81111fec:	003f0906 	br	81111c14 <__reset+0xfb0f1c14>
81111ff0:	18c03fcc 	andi	r3,r3,255
81111ff4:	1807181e 	bne	r3,zero,81113c58 <___svfprintf_internal_r+0x219c>
81111ff8:	94800414 	ori	r18,r18,16
81111ffc:	9080080c 	andi	r2,r18,32
81112000:	10039626 	beq	r2,zero,81112e5c <___svfprintf_internal_r+0x13a0>
81112004:	d9402d17 	ldw	r5,180(sp)
81112008:	28800117 	ldw	r2,4(r5)
8111200c:	2d000017 	ldw	r20,0(r5)
81112010:	29400204 	addi	r5,r5,8
81112014:	d9402d15 	stw	r5,180(sp)
81112018:	102d883a 	mov	r22,r2
8111201c:	10039816 	blt	r2,zero,81112e80 <___svfprintf_internal_r+0x13c4>
81112020:	d9402917 	ldw	r5,164(sp)
81112024:	df002783 	ldbu	fp,158(sp)
81112028:	2803ab16 	blt	r5,zero,81112ed8 <___svfprintf_internal_r+0x141c>
8111202c:	00ffdfc4 	movi	r3,-129
81112030:	a584b03a 	or	r2,r20,r22
81112034:	90e4703a 	and	r18,r18,r3
81112038:	10014a26 	beq	r2,zero,81112564 <___svfprintf_internal_r+0xaa8>
8111203c:	b0034b26 	beq	r22,zero,81112d6c <___svfprintf_internal_r+0x12b0>
81112040:	dc402a15 	stw	r17,168(sp)
81112044:	dc001e04 	addi	r16,sp,120
81112048:	b023883a 	mov	r17,r22
8111204c:	402d883a 	mov	r22,r8
81112050:	a009883a 	mov	r4,r20
81112054:	880b883a 	mov	r5,r17
81112058:	01800284 	movi	r6,10
8111205c:	000f883a 	mov	r7,zero
81112060:	1122c400 	call	81122c40 <__umoddi3>
81112064:	10800c04 	addi	r2,r2,48
81112068:	843fffc4 	addi	r16,r16,-1
8111206c:	a009883a 	mov	r4,r20
81112070:	880b883a 	mov	r5,r17
81112074:	80800005 	stb	r2,0(r16)
81112078:	01800284 	movi	r6,10
8111207c:	000f883a 	mov	r7,zero
81112080:	11226c00 	call	811226c0 <__udivdi3>
81112084:	1029883a 	mov	r20,r2
81112088:	10c4b03a 	or	r2,r2,r3
8111208c:	1823883a 	mov	r17,r3
81112090:	103fef1e 	bne	r2,zero,81112050 <__reset+0xfb0f2050>
81112094:	d8c02817 	ldw	r3,160(sp)
81112098:	dc402a17 	ldw	r17,168(sp)
8111209c:	b011883a 	mov	r8,r22
811120a0:	1c07c83a 	sub	r3,r3,r16
811120a4:	d8c02e15 	stw	r3,184(sp)
811120a8:	00002e06 	br	81112164 <___svfprintf_internal_r+0x6a8>
811120ac:	18c03fcc 	andi	r3,r3,255
811120b0:	1806e71e 	bne	r3,zero,81113c50 <___svfprintf_internal_r+0x2194>
811120b4:	94800414 	ori	r18,r18,16
811120b8:	9080080c 	andi	r2,r18,32
811120bc:	1002d426 	beq	r2,zero,81112c10 <___svfprintf_internal_r+0x1154>
811120c0:	d9402d17 	ldw	r5,180(sp)
811120c4:	d8c02917 	ldw	r3,164(sp)
811120c8:	d8002785 	stb	zero,158(sp)
811120cc:	28800204 	addi	r2,r5,8
811120d0:	2d000017 	ldw	r20,0(r5)
811120d4:	2d800117 	ldw	r22,4(r5)
811120d8:	18041516 	blt	r3,zero,81113130 <___svfprintf_internal_r+0x1674>
811120dc:	013fdfc4 	movi	r4,-129
811120e0:	a586b03a 	or	r3,r20,r22
811120e4:	d8802d15 	stw	r2,180(sp)
811120e8:	9124703a 	and	r18,r18,r4
811120ec:	1802d51e 	bne	r3,zero,81112c44 <___svfprintf_internal_r+0x1188>
811120f0:	d9402917 	ldw	r5,164(sp)
811120f4:	0039883a 	mov	fp,zero
811120f8:	2806be26 	beq	r5,zero,81113bf4 <___svfprintf_internal_r+0x2138>
811120fc:	0029883a 	mov	r20,zero
81112100:	002d883a 	mov	r22,zero
81112104:	dc001e04 	addi	r16,sp,120
81112108:	a006d0fa 	srli	r3,r20,3
8111210c:	b008977a 	slli	r4,r22,29
81112110:	b02cd0fa 	srli	r22,r22,3
81112114:	a50001cc 	andi	r20,r20,7
81112118:	a0800c04 	addi	r2,r20,48
8111211c:	843fffc4 	addi	r16,r16,-1
81112120:	20e8b03a 	or	r20,r4,r3
81112124:	80800005 	stb	r2,0(r16)
81112128:	a586b03a 	or	r3,r20,r22
8111212c:	183ff61e 	bne	r3,zero,81112108 <__reset+0xfb0f2108>
81112130:	90c0004c 	andi	r3,r18,1
81112134:	18013926 	beq	r3,zero,8111261c <___svfprintf_internal_r+0xb60>
81112138:	10803fcc 	andi	r2,r2,255
8111213c:	1080201c 	xori	r2,r2,128
81112140:	10bfe004 	addi	r2,r2,-128
81112144:	00c00c04 	movi	r3,48
81112148:	10c13426 	beq	r2,r3,8111261c <___svfprintf_internal_r+0xb60>
8111214c:	80ffffc5 	stb	r3,-1(r16)
81112150:	d8c02817 	ldw	r3,160(sp)
81112154:	80bfffc4 	addi	r2,r16,-1
81112158:	1021883a 	mov	r16,r2
8111215c:	1887c83a 	sub	r3,r3,r2
81112160:	d8c02e15 	stw	r3,184(sp)
81112164:	d8802e17 	ldw	r2,184(sp)
81112168:	d9002917 	ldw	r4,164(sp)
8111216c:	1100010e 	bge	r2,r4,81112174 <___svfprintf_internal_r+0x6b8>
81112170:	2005883a 	mov	r2,r4
81112174:	d8802a15 	stw	r2,168(sp)
81112178:	d8003215 	stw	zero,200(sp)
8111217c:	e7003fcc 	andi	fp,fp,255
81112180:	e700201c 	xori	fp,fp,128
81112184:	e73fe004 	addi	fp,fp,-128
81112188:	e0000326 	beq	fp,zero,81112198 <___svfprintf_internal_r+0x6dc>
8111218c:	d8c02a17 	ldw	r3,168(sp)
81112190:	18c00044 	addi	r3,r3,1
81112194:	d8c02a15 	stw	r3,168(sp)
81112198:	90c0008c 	andi	r3,r18,2
8111219c:	d8c02b15 	stw	r3,172(sp)
811121a0:	18000326 	beq	r3,zero,811121b0 <___svfprintf_internal_r+0x6f4>
811121a4:	d8c02a17 	ldw	r3,168(sp)
811121a8:	18c00084 	addi	r3,r3,2
811121ac:	d8c02a15 	stw	r3,168(sp)
811121b0:	90c0210c 	andi	r3,r18,132
811121b4:	d8c03015 	stw	r3,192(sp)
811121b8:	1801a11e 	bne	r3,zero,81112840 <___svfprintf_internal_r+0xd84>
811121bc:	d9003117 	ldw	r4,196(sp)
811121c0:	d8c02a17 	ldw	r3,168(sp)
811121c4:	20e9c83a 	sub	r20,r4,r3
811121c8:	05019d0e 	bge	zero,r20,81112840 <___svfprintf_internal_r+0xd84>
811121cc:	02400404 	movi	r9,16
811121d0:	d8c02017 	ldw	r3,128(sp)
811121d4:	d8801f17 	ldw	r2,124(sp)
811121d8:	4d051b0e 	bge	r9,r20,81113648 <___svfprintf_internal_r+0x1b8c>
811121dc:	01604534 	movhi	r5,33044
811121e0:	29711084 	addi	r5,r5,-15294
811121e4:	dc403c15 	stw	r17,240(sp)
811121e8:	d9403515 	stw	r5,212(sp)
811121ec:	a023883a 	mov	r17,r20
811121f0:	482d883a 	mov	r22,r9
811121f4:	9029883a 	mov	r20,r18
811121f8:	070001c4 	movi	fp,7
811121fc:	8025883a 	mov	r18,r16
81112200:	dc002c17 	ldw	r16,176(sp)
81112204:	00000306 	br	81112214 <___svfprintf_internal_r+0x758>
81112208:	8c7ffc04 	addi	r17,r17,-16
8111220c:	42000204 	addi	r8,r8,8
81112210:	b440130e 	bge	r22,r17,81112260 <___svfprintf_internal_r+0x7a4>
81112214:	01204534 	movhi	r4,33044
81112218:	18c00404 	addi	r3,r3,16
8111221c:	10800044 	addi	r2,r2,1
81112220:	21311084 	addi	r4,r4,-15294
81112224:	41000015 	stw	r4,0(r8)
81112228:	45800115 	stw	r22,4(r8)
8111222c:	d8c02015 	stw	r3,128(sp)
81112230:	d8801f15 	stw	r2,124(sp)
81112234:	e0bff40e 	bge	fp,r2,81112208 <__reset+0xfb0f2208>
81112238:	d9801e04 	addi	r6,sp,120
8111223c:	800b883a 	mov	r5,r16
81112240:	9809883a 	mov	r4,r19
81112244:	111e57c0 	call	8111e57c <__ssprint_r>
81112248:	103f031e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
8111224c:	8c7ffc04 	addi	r17,r17,-16
81112250:	d8c02017 	ldw	r3,128(sp)
81112254:	d8801f17 	ldw	r2,124(sp)
81112258:	da000404 	addi	r8,sp,16
8111225c:	b47fed16 	blt	r22,r17,81112214 <__reset+0xfb0f2214>
81112260:	9021883a 	mov	r16,r18
81112264:	a025883a 	mov	r18,r20
81112268:	8829883a 	mov	r20,r17
8111226c:	dc403c17 	ldw	r17,240(sp)
81112270:	d9403517 	ldw	r5,212(sp)
81112274:	a0c7883a 	add	r3,r20,r3
81112278:	10800044 	addi	r2,r2,1
8111227c:	41400015 	stw	r5,0(r8)
81112280:	45000115 	stw	r20,4(r8)
81112284:	d8c02015 	stw	r3,128(sp)
81112288:	d8801f15 	stw	r2,124(sp)
8111228c:	010001c4 	movi	r4,7
81112290:	20829f16 	blt	r4,r2,81112d10 <___svfprintf_internal_r+0x1254>
81112294:	df002787 	ldb	fp,158(sp)
81112298:	42000204 	addi	r8,r8,8
8111229c:	e0000c26 	beq	fp,zero,811122d0 <___svfprintf_internal_r+0x814>
811122a0:	d8801f17 	ldw	r2,124(sp)
811122a4:	d9002784 	addi	r4,sp,158
811122a8:	18c00044 	addi	r3,r3,1
811122ac:	10800044 	addi	r2,r2,1
811122b0:	41000015 	stw	r4,0(r8)
811122b4:	01000044 	movi	r4,1
811122b8:	41000115 	stw	r4,4(r8)
811122bc:	d8c02015 	stw	r3,128(sp)
811122c0:	d8801f15 	stw	r2,124(sp)
811122c4:	010001c4 	movi	r4,7
811122c8:	20823816 	blt	r4,r2,81112bac <___svfprintf_internal_r+0x10f0>
811122cc:	42000204 	addi	r8,r8,8
811122d0:	d8802b17 	ldw	r2,172(sp)
811122d4:	10000c26 	beq	r2,zero,81112308 <___svfprintf_internal_r+0x84c>
811122d8:	d8801f17 	ldw	r2,124(sp)
811122dc:	d9002704 	addi	r4,sp,156
811122e0:	18c00084 	addi	r3,r3,2
811122e4:	10800044 	addi	r2,r2,1
811122e8:	41000015 	stw	r4,0(r8)
811122ec:	01000084 	movi	r4,2
811122f0:	41000115 	stw	r4,4(r8)
811122f4:	d8c02015 	stw	r3,128(sp)
811122f8:	d8801f15 	stw	r2,124(sp)
811122fc:	010001c4 	movi	r4,7
81112300:	20823216 	blt	r4,r2,81112bcc <___svfprintf_internal_r+0x1110>
81112304:	42000204 	addi	r8,r8,8
81112308:	d9003017 	ldw	r4,192(sp)
8111230c:	00802004 	movi	r2,128
81112310:	20819726 	beq	r4,r2,81112970 <___svfprintf_internal_r+0xeb4>
81112314:	d9402917 	ldw	r5,164(sp)
81112318:	d8802e17 	ldw	r2,184(sp)
8111231c:	28adc83a 	sub	r22,r5,r2
81112320:	05802f0e 	bge	zero,r22,811123e0 <___svfprintf_internal_r+0x924>
81112324:	07000404 	movi	fp,16
81112328:	d8801f17 	ldw	r2,124(sp)
8111232c:	e583c00e 	bge	fp,r22,81113230 <___svfprintf_internal_r+0x1774>
81112330:	01604534 	movhi	r5,33044
81112334:	29710c84 	addi	r5,r5,-15310
81112338:	dc402915 	stw	r17,164(sp)
8111233c:	d9402b15 	stw	r5,172(sp)
81112340:	b023883a 	mov	r17,r22
81112344:	050001c4 	movi	r20,7
81112348:	902d883a 	mov	r22,r18
8111234c:	8025883a 	mov	r18,r16
81112350:	dc002c17 	ldw	r16,176(sp)
81112354:	00000306 	br	81112364 <___svfprintf_internal_r+0x8a8>
81112358:	8c7ffc04 	addi	r17,r17,-16
8111235c:	42000204 	addi	r8,r8,8
81112360:	e440110e 	bge	fp,r17,811123a8 <___svfprintf_internal_r+0x8ec>
81112364:	18c00404 	addi	r3,r3,16
81112368:	10800044 	addi	r2,r2,1
8111236c:	45400015 	stw	r21,0(r8)
81112370:	47000115 	stw	fp,4(r8)
81112374:	d8c02015 	stw	r3,128(sp)
81112378:	d8801f15 	stw	r2,124(sp)
8111237c:	a0bff60e 	bge	r20,r2,81112358 <__reset+0xfb0f2358>
81112380:	d9801e04 	addi	r6,sp,120
81112384:	800b883a 	mov	r5,r16
81112388:	9809883a 	mov	r4,r19
8111238c:	111e57c0 	call	8111e57c <__ssprint_r>
81112390:	103eb11e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112394:	8c7ffc04 	addi	r17,r17,-16
81112398:	d8c02017 	ldw	r3,128(sp)
8111239c:	d8801f17 	ldw	r2,124(sp)
811123a0:	da000404 	addi	r8,sp,16
811123a4:	e47fef16 	blt	fp,r17,81112364 <__reset+0xfb0f2364>
811123a8:	9021883a 	mov	r16,r18
811123ac:	b025883a 	mov	r18,r22
811123b0:	882d883a 	mov	r22,r17
811123b4:	dc402917 	ldw	r17,164(sp)
811123b8:	d9002b17 	ldw	r4,172(sp)
811123bc:	1d87883a 	add	r3,r3,r22
811123c0:	10800044 	addi	r2,r2,1
811123c4:	41000015 	stw	r4,0(r8)
811123c8:	45800115 	stw	r22,4(r8)
811123cc:	d8c02015 	stw	r3,128(sp)
811123d0:	d8801f15 	stw	r2,124(sp)
811123d4:	010001c4 	movi	r4,7
811123d8:	2081ec16 	blt	r4,r2,81112b8c <___svfprintf_internal_r+0x10d0>
811123dc:	42000204 	addi	r8,r8,8
811123e0:	9080400c 	andi	r2,r18,256
811123e4:	1001181e 	bne	r2,zero,81112848 <___svfprintf_internal_r+0xd8c>
811123e8:	d9402e17 	ldw	r5,184(sp)
811123ec:	d8801f17 	ldw	r2,124(sp)
811123f0:	44000015 	stw	r16,0(r8)
811123f4:	1947883a 	add	r3,r3,r5
811123f8:	10800044 	addi	r2,r2,1
811123fc:	41400115 	stw	r5,4(r8)
81112400:	d8c02015 	stw	r3,128(sp)
81112404:	d8801f15 	stw	r2,124(sp)
81112408:	010001c4 	movi	r4,7
8111240c:	2081d116 	blt	r4,r2,81112b54 <___svfprintf_internal_r+0x1098>
81112410:	42000204 	addi	r8,r8,8
81112414:	9480010c 	andi	r18,r18,4
81112418:	90003226 	beq	r18,zero,811124e4 <___svfprintf_internal_r+0xa28>
8111241c:	d9403117 	ldw	r5,196(sp)
81112420:	d8802a17 	ldw	r2,168(sp)
81112424:	28a1c83a 	sub	r16,r5,r2
81112428:	04002e0e 	bge	zero,r16,811124e4 <___svfprintf_internal_r+0xa28>
8111242c:	04400404 	movi	r17,16
81112430:	d8801f17 	ldw	r2,124(sp)
81112434:	8c04b90e 	bge	r17,r16,8111371c <___svfprintf_internal_r+0x1c60>
81112438:	01604534 	movhi	r5,33044
8111243c:	29711084 	addi	r5,r5,-15294
81112440:	d9403515 	stw	r5,212(sp)
81112444:	048001c4 	movi	r18,7
81112448:	dd002c17 	ldw	r20,176(sp)
8111244c:	00000306 	br	8111245c <___svfprintf_internal_r+0x9a0>
81112450:	843ffc04 	addi	r16,r16,-16
81112454:	42000204 	addi	r8,r8,8
81112458:	8c00130e 	bge	r17,r16,811124a8 <___svfprintf_internal_r+0x9ec>
8111245c:	01204534 	movhi	r4,33044
81112460:	18c00404 	addi	r3,r3,16
81112464:	10800044 	addi	r2,r2,1
81112468:	21311084 	addi	r4,r4,-15294
8111246c:	41000015 	stw	r4,0(r8)
81112470:	44400115 	stw	r17,4(r8)
81112474:	d8c02015 	stw	r3,128(sp)
81112478:	d8801f15 	stw	r2,124(sp)
8111247c:	90bff40e 	bge	r18,r2,81112450 <__reset+0xfb0f2450>
81112480:	d9801e04 	addi	r6,sp,120
81112484:	a00b883a 	mov	r5,r20
81112488:	9809883a 	mov	r4,r19
8111248c:	111e57c0 	call	8111e57c <__ssprint_r>
81112490:	103e711e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112494:	843ffc04 	addi	r16,r16,-16
81112498:	d8c02017 	ldw	r3,128(sp)
8111249c:	d8801f17 	ldw	r2,124(sp)
811124a0:	da000404 	addi	r8,sp,16
811124a4:	8c3fed16 	blt	r17,r16,8111245c <__reset+0xfb0f245c>
811124a8:	d9403517 	ldw	r5,212(sp)
811124ac:	1c07883a 	add	r3,r3,r16
811124b0:	10800044 	addi	r2,r2,1
811124b4:	41400015 	stw	r5,0(r8)
811124b8:	44000115 	stw	r16,4(r8)
811124bc:	d8c02015 	stw	r3,128(sp)
811124c0:	d8801f15 	stw	r2,124(sp)
811124c4:	010001c4 	movi	r4,7
811124c8:	2080060e 	bge	r4,r2,811124e4 <___svfprintf_internal_r+0xa28>
811124cc:	d9402c17 	ldw	r5,176(sp)
811124d0:	d9801e04 	addi	r6,sp,120
811124d4:	9809883a 	mov	r4,r19
811124d8:	111e57c0 	call	8111e57c <__ssprint_r>
811124dc:	103e5e1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
811124e0:	d8c02017 	ldw	r3,128(sp)
811124e4:	d8803117 	ldw	r2,196(sp)
811124e8:	d9002a17 	ldw	r4,168(sp)
811124ec:	1100010e 	bge	r2,r4,811124f4 <___svfprintf_internal_r+0xa38>
811124f0:	2005883a 	mov	r2,r4
811124f4:	d9402f17 	ldw	r5,188(sp)
811124f8:	288b883a 	add	r5,r5,r2
811124fc:	d9402f15 	stw	r5,188(sp)
81112500:	18019c1e 	bne	r3,zero,81112b74 <___svfprintf_internal_r+0x10b8>
81112504:	b8800007 	ldb	r2,0(r23)
81112508:	d8001f15 	stw	zero,124(sp)
8111250c:	da000404 	addi	r8,sp,16
81112510:	103d991e 	bne	r2,zero,81111b78 <__reset+0xfb0f1b78>
81112514:	b821883a 	mov	r16,r23
81112518:	003daf06 	br	81111bd8 <__reset+0xfb0f1bd8>
8111251c:	18c03fcc 	andi	r3,r3,255
81112520:	1805c71e 	bne	r3,zero,81113c40 <___svfprintf_internal_r+0x2184>
81112524:	94800414 	ori	r18,r18,16
81112528:	9080080c 	andi	r2,r18,32
8111252c:	10020126 	beq	r2,zero,81112d34 <___svfprintf_internal_r+0x1278>
81112530:	d8802d17 	ldw	r2,180(sp)
81112534:	d9002917 	ldw	r4,164(sp)
81112538:	d8002785 	stb	zero,158(sp)
8111253c:	10c00204 	addi	r3,r2,8
81112540:	15000017 	ldw	r20,0(r2)
81112544:	15800117 	ldw	r22,4(r2)
81112548:	20038e16 	blt	r4,zero,81113384 <___svfprintf_internal_r+0x18c8>
8111254c:	013fdfc4 	movi	r4,-129
81112550:	a584b03a 	or	r2,r20,r22
81112554:	d8c02d15 	stw	r3,180(sp)
81112558:	9124703a 	and	r18,r18,r4
8111255c:	0039883a 	mov	fp,zero
81112560:	103eb61e 	bne	r2,zero,8111203c <__reset+0xfb0f203c>
81112564:	d8802917 	ldw	r2,164(sp)
81112568:	1002c81e 	bne	r2,zero,8111308c <___svfprintf_internal_r+0x15d0>
8111256c:	d8002915 	stw	zero,164(sp)
81112570:	d8002e15 	stw	zero,184(sp)
81112574:	dc001e04 	addi	r16,sp,120
81112578:	003efa06 	br	81112164 <__reset+0xfb0f2164>
8111257c:	18c03fcc 	andi	r3,r3,255
81112580:	1805ad1e 	bne	r3,zero,81113c38 <___svfprintf_internal_r+0x217c>
81112584:	01604534 	movhi	r5,33044
81112588:	29710004 	addi	r5,r5,-15360
8111258c:	d9403a15 	stw	r5,232(sp)
81112590:	9080080c 	andi	r2,r18,32
81112594:	10006126 	beq	r2,zero,8111271c <___svfprintf_internal_r+0xc60>
81112598:	d8802d17 	ldw	r2,180(sp)
8111259c:	15000017 	ldw	r20,0(r2)
811125a0:	15800117 	ldw	r22,4(r2)
811125a4:	10800204 	addi	r2,r2,8
811125a8:	d8802d15 	stw	r2,180(sp)
811125ac:	9080004c 	andi	r2,r18,1
811125b0:	10018e26 	beq	r2,zero,81112bec <___svfprintf_internal_r+0x1130>
811125b4:	a584b03a 	or	r2,r20,r22
811125b8:	10030926 	beq	r2,zero,811131e0 <___svfprintf_internal_r+0x1724>
811125bc:	d8c02917 	ldw	r3,164(sp)
811125c0:	00800c04 	movi	r2,48
811125c4:	d8802705 	stb	r2,156(sp)
811125c8:	dc402745 	stb	r17,157(sp)
811125cc:	d8002785 	stb	zero,158(sp)
811125d0:	90800094 	ori	r2,r18,2
811125d4:	18048716 	blt	r3,zero,811137f4 <___svfprintf_internal_r+0x1d38>
811125d8:	00bfdfc4 	movi	r2,-129
811125dc:	90a4703a 	and	r18,r18,r2
811125e0:	94800094 	ori	r18,r18,2
811125e4:	0039883a 	mov	fp,zero
811125e8:	d9003a17 	ldw	r4,232(sp)
811125ec:	dc001e04 	addi	r16,sp,120
811125f0:	a08003cc 	andi	r2,r20,15
811125f4:	b006973a 	slli	r3,r22,28
811125f8:	2085883a 	add	r2,r4,r2
811125fc:	a028d13a 	srli	r20,r20,4
81112600:	10800003 	ldbu	r2,0(r2)
81112604:	b02cd13a 	srli	r22,r22,4
81112608:	843fffc4 	addi	r16,r16,-1
8111260c:	1d28b03a 	or	r20,r3,r20
81112610:	80800005 	stb	r2,0(r16)
81112614:	a584b03a 	or	r2,r20,r22
81112618:	103ff51e 	bne	r2,zero,811125f0 <__reset+0xfb0f25f0>
8111261c:	d8c02817 	ldw	r3,160(sp)
81112620:	1c07c83a 	sub	r3,r3,r16
81112624:	d8c02e15 	stw	r3,184(sp)
81112628:	003ece06 	br	81112164 <__reset+0xfb0f2164>
8111262c:	d8c02d17 	ldw	r3,180(sp)
81112630:	d9002d17 	ldw	r4,180(sp)
81112634:	d8002785 	stb	zero,158(sp)
81112638:	18800017 	ldw	r2,0(r3)
8111263c:	21000104 	addi	r4,r4,4
81112640:	00c00044 	movi	r3,1
81112644:	d8c02a15 	stw	r3,168(sp)
81112648:	d8801405 	stb	r2,80(sp)
8111264c:	d9002d15 	stw	r4,180(sp)
81112650:	d8c02e15 	stw	r3,184(sp)
81112654:	d8002915 	stw	zero,164(sp)
81112658:	d8003215 	stw	zero,200(sp)
8111265c:	dc001404 	addi	r16,sp,80
81112660:	0039883a 	mov	fp,zero
81112664:	003ecc06 	br	81112198 <__reset+0xfb0f2198>
81112668:	18c03fcc 	andi	r3,r3,255
8111266c:	183e9226 	beq	r3,zero,811120b8 <__reset+0xfb0f20b8>
81112670:	d9c02785 	stb	r7,158(sp)
81112674:	003e9006 	br	811120b8 <__reset+0xfb0f20b8>
81112678:	00c00044 	movi	r3,1
8111267c:	01c00ac4 	movi	r7,43
81112680:	bc400007 	ldb	r17,0(r23)
81112684:	003d6306 	br	81111c14 <__reset+0xfb0f1c14>
81112688:	94800814 	ori	r18,r18,32
8111268c:	bc400007 	ldb	r17,0(r23)
81112690:	003d6006 	br	81111c14 <__reset+0xfb0f1c14>
81112694:	d8c02d17 	ldw	r3,180(sp)
81112698:	d8002785 	stb	zero,158(sp)
8111269c:	1c000017 	ldw	r16,0(r3)
811126a0:	1d000104 	addi	r20,r3,4
811126a4:	80040f26 	beq	r16,zero,811136e4 <___svfprintf_internal_r+0x1c28>
811126a8:	d9002917 	ldw	r4,164(sp)
811126ac:	2003dc16 	blt	r4,zero,81113620 <___svfprintf_internal_r+0x1b64>
811126b0:	200d883a 	mov	r6,r4
811126b4:	000b883a 	mov	r5,zero
811126b8:	8009883a 	mov	r4,r16
811126bc:	da003e15 	stw	r8,248(sp)
811126c0:	111ab200 	call	8111ab20 <memchr>
811126c4:	da003e17 	ldw	r8,248(sp)
811126c8:	10045826 	beq	r2,zero,8111382c <___svfprintf_internal_r+0x1d70>
811126cc:	1405c83a 	sub	r2,r2,r16
811126d0:	d8802e15 	stw	r2,184(sp)
811126d4:	1003d816 	blt	r2,zero,81113638 <___svfprintf_internal_r+0x1b7c>
811126d8:	df002783 	ldbu	fp,158(sp)
811126dc:	d8802a15 	stw	r2,168(sp)
811126e0:	dd002d15 	stw	r20,180(sp)
811126e4:	d8002915 	stw	zero,164(sp)
811126e8:	d8003215 	stw	zero,200(sp)
811126ec:	003ea306 	br	8111217c <__reset+0xfb0f217c>
811126f0:	18c03fcc 	andi	r3,r3,255
811126f4:	183f8c26 	beq	r3,zero,81112528 <__reset+0xfb0f2528>
811126f8:	d9c02785 	stb	r7,158(sp)
811126fc:	003f8a06 	br	81112528 <__reset+0xfb0f2528>
81112700:	18c03fcc 	andi	r3,r3,255
81112704:	1805631e 	bne	r3,zero,81113c94 <___svfprintf_internal_r+0x21d8>
81112708:	01604534 	movhi	r5,33044
8111270c:	29710504 	addi	r5,r5,-15340
81112710:	d9403a15 	stw	r5,232(sp)
81112714:	9080080c 	andi	r2,r18,32
81112718:	103f9f1e 	bne	r2,zero,81112598 <__reset+0xfb0f2598>
8111271c:	9080040c 	andi	r2,r18,16
81112720:	10029c26 	beq	r2,zero,81113194 <___svfprintf_internal_r+0x16d8>
81112724:	d8c02d17 	ldw	r3,180(sp)
81112728:	002d883a 	mov	r22,zero
8111272c:	1d000017 	ldw	r20,0(r3)
81112730:	18c00104 	addi	r3,r3,4
81112734:	d8c02d15 	stw	r3,180(sp)
81112738:	003f9c06 	br	811125ac <__reset+0xfb0f25ac>
8111273c:	94800054 	ori	r18,r18,1
81112740:	bc400007 	ldb	r17,0(r23)
81112744:	003d3306 	br	81111c14 <__reset+0xfb0f1c14>
81112748:	38803fcc 	andi	r2,r7,255
8111274c:	1080201c 	xori	r2,r2,128
81112750:	10bfe004 	addi	r2,r2,-128
81112754:	1002971e 	bne	r2,zero,811131b4 <___svfprintf_internal_r+0x16f8>
81112758:	00c00044 	movi	r3,1
8111275c:	01c00804 	movi	r7,32
81112760:	bc400007 	ldb	r17,0(r23)
81112764:	003d2b06 	br	81111c14 <__reset+0xfb0f1c14>
81112768:	18c03fcc 	andi	r3,r3,255
8111276c:	183e2326 	beq	r3,zero,81111ffc <__reset+0xfb0f1ffc>
81112770:	d9c02785 	stb	r7,158(sp)
81112774:	003e2106 	br	81111ffc <__reset+0xfb0f1ffc>
81112778:	bc400007 	ldb	r17,0(r23)
8111277c:	8a430426 	beq	r17,r9,81113390 <___svfprintf_internal_r+0x18d4>
81112780:	94800414 	ori	r18,r18,16
81112784:	003d2306 	br	81111c14 <__reset+0xfb0f1c14>
81112788:	18c03fcc 	andi	r3,r3,255
8111278c:	18053f1e 	bne	r3,zero,81113c8c <___svfprintf_internal_r+0x21d0>
81112790:	9080080c 	andi	r2,r18,32
81112794:	10028926 	beq	r2,zero,811131bc <___svfprintf_internal_r+0x1700>
81112798:	d9402d17 	ldw	r5,180(sp)
8111279c:	d9002f17 	ldw	r4,188(sp)
811127a0:	28800017 	ldw	r2,0(r5)
811127a4:	2007d7fa 	srai	r3,r4,31
811127a8:	29400104 	addi	r5,r5,4
811127ac:	d9402d15 	stw	r5,180(sp)
811127b0:	11000015 	stw	r4,0(r2)
811127b4:	10c00115 	stw	r3,4(r2)
811127b8:	003ced06 	br	81111b70 <__reset+0xfb0f1b70>
811127bc:	94801014 	ori	r18,r18,64
811127c0:	bc400007 	ldb	r17,0(r23)
811127c4:	003d1306 	br	81111c14 <__reset+0xfb0f1c14>
811127c8:	01204534 	movhi	r4,33044
811127cc:	21310504 	addi	r4,r4,-15340
811127d0:	0039883a 	mov	fp,zero
811127d4:	d9003a15 	stw	r4,232(sp)
811127d8:	04401e04 	movi	r17,120
811127dc:	003f8206 	br	811125e8 <__reset+0xfb0f25e8>
811127e0:	18c03fcc 	andi	r3,r3,255
811127e4:	1805221e 	bne	r3,zero,81113c70 <___svfprintf_internal_r+0x21b4>
811127e8:	883d9526 	beq	r17,zero,81111e40 <__reset+0xfb0f1e40>
811127ec:	00c00044 	movi	r3,1
811127f0:	d8c02a15 	stw	r3,168(sp)
811127f4:	dc401405 	stb	r17,80(sp)
811127f8:	d8002785 	stb	zero,158(sp)
811127fc:	003f9406 	br	81112650 <__reset+0xfb0f2650>
81112800:	01204534 	movhi	r4,33044
81112804:	21310504 	addi	r4,r4,-15340
81112808:	d9003a15 	stw	r4,232(sp)
8111280c:	d8c02d15 	stw	r3,180(sp)
81112810:	1025883a 	mov	r18,r2
81112814:	04401e04 	movi	r17,120
81112818:	a584b03a 	or	r2,r20,r22
8111281c:	1000fa1e 	bne	r2,zero,81112c08 <___svfprintf_internal_r+0x114c>
81112820:	0039883a 	mov	fp,zero
81112824:	00800084 	movi	r2,2
81112828:	10803fcc 	andi	r2,r2,255
8111282c:	00c00044 	movi	r3,1
81112830:	10c21626 	beq	r2,r3,8111308c <___svfprintf_internal_r+0x15d0>
81112834:	00c00084 	movi	r3,2
81112838:	10fe301e 	bne	r2,r3,811120fc <__reset+0xfb0f20fc>
8111283c:	003d7606 	br	81111e18 <__reset+0xfb0f1e18>
81112840:	d8c02017 	ldw	r3,128(sp)
81112844:	003e9506 	br	8111229c <__reset+0xfb0f229c>
81112848:	00801944 	movi	r2,101
8111284c:	14407c0e 	bge	r2,r17,81112a40 <___svfprintf_internal_r+0xf84>
81112850:	d9003617 	ldw	r4,216(sp)
81112854:	d9403717 	ldw	r5,220(sp)
81112858:	000d883a 	mov	r6,zero
8111285c:	000f883a 	mov	r7,zero
81112860:	d8c03d15 	stw	r3,244(sp)
81112864:	da003e15 	stw	r8,248(sp)
81112868:	11246d40 	call	811246d4 <__eqdf2>
8111286c:	d8c03d17 	ldw	r3,244(sp)
81112870:	da003e17 	ldw	r8,248(sp)
81112874:	1000f51e 	bne	r2,zero,81112c4c <___svfprintf_internal_r+0x1190>
81112878:	d8801f17 	ldw	r2,124(sp)
8111287c:	01204534 	movhi	r4,33044
81112880:	21310c04 	addi	r4,r4,-15312
81112884:	18c00044 	addi	r3,r3,1
81112888:	10800044 	addi	r2,r2,1
8111288c:	41000015 	stw	r4,0(r8)
81112890:	01000044 	movi	r4,1
81112894:	41000115 	stw	r4,4(r8)
81112898:	d8c02015 	stw	r3,128(sp)
8111289c:	d8801f15 	stw	r2,124(sp)
811128a0:	010001c4 	movi	r4,7
811128a4:	20826616 	blt	r4,r2,81113240 <___svfprintf_internal_r+0x1784>
811128a8:	42000204 	addi	r8,r8,8
811128ac:	d8802617 	ldw	r2,152(sp)
811128b0:	d9403317 	ldw	r5,204(sp)
811128b4:	11400216 	blt	r2,r5,811128c0 <___svfprintf_internal_r+0xe04>
811128b8:	9080004c 	andi	r2,r18,1
811128bc:	103ed526 	beq	r2,zero,81112414 <__reset+0xfb0f2414>
811128c0:	d8803817 	ldw	r2,224(sp)
811128c4:	d9003417 	ldw	r4,208(sp)
811128c8:	d9403817 	ldw	r5,224(sp)
811128cc:	1887883a 	add	r3,r3,r2
811128d0:	d8801f17 	ldw	r2,124(sp)
811128d4:	41000015 	stw	r4,0(r8)
811128d8:	41400115 	stw	r5,4(r8)
811128dc:	10800044 	addi	r2,r2,1
811128e0:	d8c02015 	stw	r3,128(sp)
811128e4:	d8801f15 	stw	r2,124(sp)
811128e8:	010001c4 	movi	r4,7
811128ec:	2082af16 	blt	r4,r2,811133ac <___svfprintf_internal_r+0x18f0>
811128f0:	42000204 	addi	r8,r8,8
811128f4:	d8803317 	ldw	r2,204(sp)
811128f8:	143fffc4 	addi	r16,r2,-1
811128fc:	043ec50e 	bge	zero,r16,81112414 <__reset+0xfb0f2414>
81112900:	04400404 	movi	r17,16
81112904:	d8801f17 	ldw	r2,124(sp)
81112908:	8c00860e 	bge	r17,r16,81112b24 <___svfprintf_internal_r+0x1068>
8111290c:	01604534 	movhi	r5,33044
81112910:	29710c84 	addi	r5,r5,-15310
81112914:	d9402b15 	stw	r5,172(sp)
81112918:	058001c4 	movi	r22,7
8111291c:	dd002c17 	ldw	r20,176(sp)
81112920:	00000306 	br	81112930 <___svfprintf_internal_r+0xe74>
81112924:	42000204 	addi	r8,r8,8
81112928:	843ffc04 	addi	r16,r16,-16
8111292c:	8c00800e 	bge	r17,r16,81112b30 <___svfprintf_internal_r+0x1074>
81112930:	18c00404 	addi	r3,r3,16
81112934:	10800044 	addi	r2,r2,1
81112938:	45400015 	stw	r21,0(r8)
8111293c:	44400115 	stw	r17,4(r8)
81112940:	d8c02015 	stw	r3,128(sp)
81112944:	d8801f15 	stw	r2,124(sp)
81112948:	b0bff60e 	bge	r22,r2,81112924 <__reset+0xfb0f2924>
8111294c:	d9801e04 	addi	r6,sp,120
81112950:	a00b883a 	mov	r5,r20
81112954:	9809883a 	mov	r4,r19
81112958:	111e57c0 	call	8111e57c <__ssprint_r>
8111295c:	103d3e1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112960:	d8c02017 	ldw	r3,128(sp)
81112964:	d8801f17 	ldw	r2,124(sp)
81112968:	da000404 	addi	r8,sp,16
8111296c:	003fee06 	br	81112928 <__reset+0xfb0f2928>
81112970:	d9403117 	ldw	r5,196(sp)
81112974:	d8802a17 	ldw	r2,168(sp)
81112978:	28adc83a 	sub	r22,r5,r2
8111297c:	05be650e 	bge	zero,r22,81112314 <__reset+0xfb0f2314>
81112980:	07000404 	movi	fp,16
81112984:	d8801f17 	ldw	r2,124(sp)
81112988:	e583a20e 	bge	fp,r22,81113814 <___svfprintf_internal_r+0x1d58>
8111298c:	01604534 	movhi	r5,33044
81112990:	29710c84 	addi	r5,r5,-15310
81112994:	dc403015 	stw	r17,192(sp)
81112998:	d9402b15 	stw	r5,172(sp)
8111299c:	b023883a 	mov	r17,r22
811129a0:	050001c4 	movi	r20,7
811129a4:	902d883a 	mov	r22,r18
811129a8:	8025883a 	mov	r18,r16
811129ac:	dc002c17 	ldw	r16,176(sp)
811129b0:	00000306 	br	811129c0 <___svfprintf_internal_r+0xf04>
811129b4:	8c7ffc04 	addi	r17,r17,-16
811129b8:	42000204 	addi	r8,r8,8
811129bc:	e440110e 	bge	fp,r17,81112a04 <___svfprintf_internal_r+0xf48>
811129c0:	18c00404 	addi	r3,r3,16
811129c4:	10800044 	addi	r2,r2,1
811129c8:	45400015 	stw	r21,0(r8)
811129cc:	47000115 	stw	fp,4(r8)
811129d0:	d8c02015 	stw	r3,128(sp)
811129d4:	d8801f15 	stw	r2,124(sp)
811129d8:	a0bff60e 	bge	r20,r2,811129b4 <__reset+0xfb0f29b4>
811129dc:	d9801e04 	addi	r6,sp,120
811129e0:	800b883a 	mov	r5,r16
811129e4:	9809883a 	mov	r4,r19
811129e8:	111e57c0 	call	8111e57c <__ssprint_r>
811129ec:	103d1a1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
811129f0:	8c7ffc04 	addi	r17,r17,-16
811129f4:	d8c02017 	ldw	r3,128(sp)
811129f8:	d8801f17 	ldw	r2,124(sp)
811129fc:	da000404 	addi	r8,sp,16
81112a00:	e47fef16 	blt	fp,r17,811129c0 <__reset+0xfb0f29c0>
81112a04:	9021883a 	mov	r16,r18
81112a08:	b025883a 	mov	r18,r22
81112a0c:	882d883a 	mov	r22,r17
81112a10:	dc403017 	ldw	r17,192(sp)
81112a14:	d9002b17 	ldw	r4,172(sp)
81112a18:	1d87883a 	add	r3,r3,r22
81112a1c:	10800044 	addi	r2,r2,1
81112a20:	41000015 	stw	r4,0(r8)
81112a24:	45800115 	stw	r22,4(r8)
81112a28:	d8c02015 	stw	r3,128(sp)
81112a2c:	d8801f15 	stw	r2,124(sp)
81112a30:	010001c4 	movi	r4,7
81112a34:	20819a16 	blt	r4,r2,811130a0 <___svfprintf_internal_r+0x15e4>
81112a38:	42000204 	addi	r8,r8,8
81112a3c:	003e3506 	br	81112314 <__reset+0xfb0f2314>
81112a40:	d9403317 	ldw	r5,204(sp)
81112a44:	00800044 	movi	r2,1
81112a48:	18c00044 	addi	r3,r3,1
81112a4c:	1141710e 	bge	r2,r5,81113014 <___svfprintf_internal_r+0x1558>
81112a50:	dc401f17 	ldw	r17,124(sp)
81112a54:	00800044 	movi	r2,1
81112a58:	40800115 	stw	r2,4(r8)
81112a5c:	8c400044 	addi	r17,r17,1
81112a60:	44000015 	stw	r16,0(r8)
81112a64:	d8c02015 	stw	r3,128(sp)
81112a68:	dc401f15 	stw	r17,124(sp)
81112a6c:	008001c4 	movi	r2,7
81112a70:	14417416 	blt	r2,r17,81113044 <___svfprintf_internal_r+0x1588>
81112a74:	42000204 	addi	r8,r8,8
81112a78:	d8803817 	ldw	r2,224(sp)
81112a7c:	d9003417 	ldw	r4,208(sp)
81112a80:	8c400044 	addi	r17,r17,1
81112a84:	10c7883a 	add	r3,r2,r3
81112a88:	40800115 	stw	r2,4(r8)
81112a8c:	41000015 	stw	r4,0(r8)
81112a90:	d8c02015 	stw	r3,128(sp)
81112a94:	dc401f15 	stw	r17,124(sp)
81112a98:	008001c4 	movi	r2,7
81112a9c:	14417216 	blt	r2,r17,81113068 <___svfprintf_internal_r+0x15ac>
81112aa0:	45800204 	addi	r22,r8,8
81112aa4:	d9003617 	ldw	r4,216(sp)
81112aa8:	d9403717 	ldw	r5,220(sp)
81112aac:	000d883a 	mov	r6,zero
81112ab0:	000f883a 	mov	r7,zero
81112ab4:	d8c03d15 	stw	r3,244(sp)
81112ab8:	11246d40 	call	811246d4 <__eqdf2>
81112abc:	d8c03d17 	ldw	r3,244(sp)
81112ac0:	1000b326 	beq	r2,zero,81112d90 <___svfprintf_internal_r+0x12d4>
81112ac4:	d9403317 	ldw	r5,204(sp)
81112ac8:	84000044 	addi	r16,r16,1
81112acc:	8c400044 	addi	r17,r17,1
81112ad0:	28bfffc4 	addi	r2,r5,-1
81112ad4:	1887883a 	add	r3,r3,r2
81112ad8:	b0800115 	stw	r2,4(r22)
81112adc:	b4000015 	stw	r16,0(r22)
81112ae0:	d8c02015 	stw	r3,128(sp)
81112ae4:	dc401f15 	stw	r17,124(sp)
81112ae8:	008001c4 	movi	r2,7
81112aec:	1440d216 	blt	r2,r17,81112e38 <___svfprintf_internal_r+0x137c>
81112af0:	b5800204 	addi	r22,r22,8
81112af4:	d9003b17 	ldw	r4,236(sp)
81112af8:	df0022c4 	addi	fp,sp,139
81112afc:	8c400044 	addi	r17,r17,1
81112b00:	20c7883a 	add	r3,r4,r3
81112b04:	b7000015 	stw	fp,0(r22)
81112b08:	b1000115 	stw	r4,4(r22)
81112b0c:	d8c02015 	stw	r3,128(sp)
81112b10:	dc401f15 	stw	r17,124(sp)
81112b14:	008001c4 	movi	r2,7
81112b18:	14400e16 	blt	r2,r17,81112b54 <___svfprintf_internal_r+0x1098>
81112b1c:	b2000204 	addi	r8,r22,8
81112b20:	003e3c06 	br	81112414 <__reset+0xfb0f2414>
81112b24:	01204534 	movhi	r4,33044
81112b28:	21310c84 	addi	r4,r4,-15310
81112b2c:	d9002b15 	stw	r4,172(sp)
81112b30:	d9002b17 	ldw	r4,172(sp)
81112b34:	1c07883a 	add	r3,r3,r16
81112b38:	44000115 	stw	r16,4(r8)
81112b3c:	41000015 	stw	r4,0(r8)
81112b40:	10800044 	addi	r2,r2,1
81112b44:	d8c02015 	stw	r3,128(sp)
81112b48:	d8801f15 	stw	r2,124(sp)
81112b4c:	010001c4 	movi	r4,7
81112b50:	20be2f0e 	bge	r4,r2,81112410 <__reset+0xfb0f2410>
81112b54:	d9402c17 	ldw	r5,176(sp)
81112b58:	d9801e04 	addi	r6,sp,120
81112b5c:	9809883a 	mov	r4,r19
81112b60:	111e57c0 	call	8111e57c <__ssprint_r>
81112b64:	103cbc1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112b68:	d8c02017 	ldw	r3,128(sp)
81112b6c:	da000404 	addi	r8,sp,16
81112b70:	003e2806 	br	81112414 <__reset+0xfb0f2414>
81112b74:	d9402c17 	ldw	r5,176(sp)
81112b78:	d9801e04 	addi	r6,sp,120
81112b7c:	9809883a 	mov	r4,r19
81112b80:	111e57c0 	call	8111e57c <__ssprint_r>
81112b84:	103e5f26 	beq	r2,zero,81112504 <__reset+0xfb0f2504>
81112b88:	003cb306 	br	81111e58 <__reset+0xfb0f1e58>
81112b8c:	d9402c17 	ldw	r5,176(sp)
81112b90:	d9801e04 	addi	r6,sp,120
81112b94:	9809883a 	mov	r4,r19
81112b98:	111e57c0 	call	8111e57c <__ssprint_r>
81112b9c:	103cae1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112ba0:	d8c02017 	ldw	r3,128(sp)
81112ba4:	da000404 	addi	r8,sp,16
81112ba8:	003e0d06 	br	811123e0 <__reset+0xfb0f23e0>
81112bac:	d9402c17 	ldw	r5,176(sp)
81112bb0:	d9801e04 	addi	r6,sp,120
81112bb4:	9809883a 	mov	r4,r19
81112bb8:	111e57c0 	call	8111e57c <__ssprint_r>
81112bbc:	103ca61e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112bc0:	d8c02017 	ldw	r3,128(sp)
81112bc4:	da000404 	addi	r8,sp,16
81112bc8:	003dc106 	br	811122d0 <__reset+0xfb0f22d0>
81112bcc:	d9402c17 	ldw	r5,176(sp)
81112bd0:	d9801e04 	addi	r6,sp,120
81112bd4:	9809883a 	mov	r4,r19
81112bd8:	111e57c0 	call	8111e57c <__ssprint_r>
81112bdc:	103c9e1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112be0:	d8c02017 	ldw	r3,128(sp)
81112be4:	da000404 	addi	r8,sp,16
81112be8:	003dc706 	br	81112308 <__reset+0xfb0f2308>
81112bec:	d8802917 	ldw	r2,164(sp)
81112bf0:	d8002785 	stb	zero,158(sp)
81112bf4:	103f0816 	blt	r2,zero,81112818 <__reset+0xfb0f2818>
81112bf8:	00ffdfc4 	movi	r3,-129
81112bfc:	a584b03a 	or	r2,r20,r22
81112c00:	90e4703a 	and	r18,r18,r3
81112c04:	103c8126 	beq	r2,zero,81111e0c <__reset+0xfb0f1e0c>
81112c08:	0039883a 	mov	fp,zero
81112c0c:	003e7606 	br	811125e8 <__reset+0xfb0f25e8>
81112c10:	9080040c 	andi	r2,r18,16
81112c14:	10013d26 	beq	r2,zero,8111310c <___svfprintf_internal_r+0x1650>
81112c18:	d9002d17 	ldw	r4,180(sp)
81112c1c:	d9402917 	ldw	r5,164(sp)
81112c20:	d8002785 	stb	zero,158(sp)
81112c24:	20800104 	addi	r2,r4,4
81112c28:	25000017 	ldw	r20,0(r4)
81112c2c:	002d883a 	mov	r22,zero
81112c30:	28013f16 	blt	r5,zero,81113130 <___svfprintf_internal_r+0x1674>
81112c34:	00ffdfc4 	movi	r3,-129
81112c38:	d8802d15 	stw	r2,180(sp)
81112c3c:	90e4703a 	and	r18,r18,r3
81112c40:	a03d2b26 	beq	r20,zero,811120f0 <__reset+0xfb0f20f0>
81112c44:	0039883a 	mov	fp,zero
81112c48:	003d2e06 	br	81112104 <__reset+0xfb0f2104>
81112c4c:	dc402617 	ldw	r17,152(sp)
81112c50:	0441830e 	bge	zero,r17,81113260 <___svfprintf_internal_r+0x17a4>
81112c54:	dc403217 	ldw	r17,200(sp)
81112c58:	d8803317 	ldw	r2,204(sp)
81112c5c:	1440010e 	bge	r2,r17,81112c64 <___svfprintf_internal_r+0x11a8>
81112c60:	1023883a 	mov	r17,r2
81112c64:	04400a0e 	bge	zero,r17,81112c90 <___svfprintf_internal_r+0x11d4>
81112c68:	d8801f17 	ldw	r2,124(sp)
81112c6c:	1c47883a 	add	r3,r3,r17
81112c70:	44000015 	stw	r16,0(r8)
81112c74:	10800044 	addi	r2,r2,1
81112c78:	44400115 	stw	r17,4(r8)
81112c7c:	d8c02015 	stw	r3,128(sp)
81112c80:	d8801f15 	stw	r2,124(sp)
81112c84:	010001c4 	movi	r4,7
81112c88:	20827516 	blt	r4,r2,81113660 <___svfprintf_internal_r+0x1ba4>
81112c8c:	42000204 	addi	r8,r8,8
81112c90:	88027b16 	blt	r17,zero,81113680 <___svfprintf_internal_r+0x1bc4>
81112c94:	d9003217 	ldw	r4,200(sp)
81112c98:	2463c83a 	sub	r17,r4,r17
81112c9c:	0440990e 	bge	zero,r17,81112f04 <___svfprintf_internal_r+0x1448>
81112ca0:	05800404 	movi	r22,16
81112ca4:	d8801f17 	ldw	r2,124(sp)
81112ca8:	b441530e 	bge	r22,r17,811131f8 <___svfprintf_internal_r+0x173c>
81112cac:	01204534 	movhi	r4,33044
81112cb0:	21310c84 	addi	r4,r4,-15310
81112cb4:	d9002b15 	stw	r4,172(sp)
81112cb8:	070001c4 	movi	fp,7
81112cbc:	dd002c17 	ldw	r20,176(sp)
81112cc0:	00000306 	br	81112cd0 <___svfprintf_internal_r+0x1214>
81112cc4:	42000204 	addi	r8,r8,8
81112cc8:	8c7ffc04 	addi	r17,r17,-16
81112ccc:	b4414d0e 	bge	r22,r17,81113204 <___svfprintf_internal_r+0x1748>
81112cd0:	18c00404 	addi	r3,r3,16
81112cd4:	10800044 	addi	r2,r2,1
81112cd8:	45400015 	stw	r21,0(r8)
81112cdc:	45800115 	stw	r22,4(r8)
81112ce0:	d8c02015 	stw	r3,128(sp)
81112ce4:	d8801f15 	stw	r2,124(sp)
81112ce8:	e0bff60e 	bge	fp,r2,81112cc4 <__reset+0xfb0f2cc4>
81112cec:	d9801e04 	addi	r6,sp,120
81112cf0:	a00b883a 	mov	r5,r20
81112cf4:	9809883a 	mov	r4,r19
81112cf8:	111e57c0 	call	8111e57c <__ssprint_r>
81112cfc:	103c561e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112d00:	d8c02017 	ldw	r3,128(sp)
81112d04:	d8801f17 	ldw	r2,124(sp)
81112d08:	da000404 	addi	r8,sp,16
81112d0c:	003fee06 	br	81112cc8 <__reset+0xfb0f2cc8>
81112d10:	d9402c17 	ldw	r5,176(sp)
81112d14:	d9801e04 	addi	r6,sp,120
81112d18:	9809883a 	mov	r4,r19
81112d1c:	111e57c0 	call	8111e57c <__ssprint_r>
81112d20:	103c4d1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112d24:	d8c02017 	ldw	r3,128(sp)
81112d28:	df002787 	ldb	fp,158(sp)
81112d2c:	da000404 	addi	r8,sp,16
81112d30:	003d5a06 	br	8111229c <__reset+0xfb0f229c>
81112d34:	9080040c 	andi	r2,r18,16
81112d38:	10005c26 	beq	r2,zero,81112eac <___svfprintf_internal_r+0x13f0>
81112d3c:	d9402d17 	ldw	r5,180(sp)
81112d40:	d8c02917 	ldw	r3,164(sp)
81112d44:	d8002785 	stb	zero,158(sp)
81112d48:	28800104 	addi	r2,r5,4
81112d4c:	2d000017 	ldw	r20,0(r5)
81112d50:	002d883a 	mov	r22,zero
81112d54:	18005e16 	blt	r3,zero,81112ed0 <___svfprintf_internal_r+0x1414>
81112d58:	00ffdfc4 	movi	r3,-129
81112d5c:	d8802d15 	stw	r2,180(sp)
81112d60:	90e4703a 	and	r18,r18,r3
81112d64:	0039883a 	mov	fp,zero
81112d68:	a03dfe26 	beq	r20,zero,81112564 <__reset+0xfb0f2564>
81112d6c:	00800244 	movi	r2,9
81112d70:	153cb336 	bltu	r2,r20,81112040 <__reset+0xfb0f2040>
81112d74:	a5000c04 	addi	r20,r20,48
81112d78:	dc001dc4 	addi	r16,sp,119
81112d7c:	dd001dc5 	stb	r20,119(sp)
81112d80:	d8c02817 	ldw	r3,160(sp)
81112d84:	1c07c83a 	sub	r3,r3,r16
81112d88:	d8c02e15 	stw	r3,184(sp)
81112d8c:	003cf506 	br	81112164 <__reset+0xfb0f2164>
81112d90:	d8803317 	ldw	r2,204(sp)
81112d94:	143fffc4 	addi	r16,r2,-1
81112d98:	043f560e 	bge	zero,r16,81112af4 <__reset+0xfb0f2af4>
81112d9c:	07000404 	movi	fp,16
81112da0:	e403530e 	bge	fp,r16,81113af0 <___svfprintf_internal_r+0x2034>
81112da4:	01604534 	movhi	r5,33044
81112da8:	29710c84 	addi	r5,r5,-15310
81112dac:	d9402b15 	stw	r5,172(sp)
81112db0:	01c001c4 	movi	r7,7
81112db4:	dd002c17 	ldw	r20,176(sp)
81112db8:	00000306 	br	81112dc8 <___svfprintf_internal_r+0x130c>
81112dbc:	843ffc04 	addi	r16,r16,-16
81112dc0:	b5800204 	addi	r22,r22,8
81112dc4:	e400130e 	bge	fp,r16,81112e14 <___svfprintf_internal_r+0x1358>
81112dc8:	18c00404 	addi	r3,r3,16
81112dcc:	8c400044 	addi	r17,r17,1
81112dd0:	b5400015 	stw	r21,0(r22)
81112dd4:	b7000115 	stw	fp,4(r22)
81112dd8:	d8c02015 	stw	r3,128(sp)
81112ddc:	dc401f15 	stw	r17,124(sp)
81112de0:	3c7ff60e 	bge	r7,r17,81112dbc <__reset+0xfb0f2dbc>
81112de4:	d9801e04 	addi	r6,sp,120
81112de8:	a00b883a 	mov	r5,r20
81112dec:	9809883a 	mov	r4,r19
81112df0:	d9c03d15 	stw	r7,244(sp)
81112df4:	111e57c0 	call	8111e57c <__ssprint_r>
81112df8:	d9c03d17 	ldw	r7,244(sp)
81112dfc:	103c161e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112e00:	843ffc04 	addi	r16,r16,-16
81112e04:	d8c02017 	ldw	r3,128(sp)
81112e08:	dc401f17 	ldw	r17,124(sp)
81112e0c:	dd800404 	addi	r22,sp,16
81112e10:	e43fed16 	blt	fp,r16,81112dc8 <__reset+0xfb0f2dc8>
81112e14:	d8802b17 	ldw	r2,172(sp)
81112e18:	1c07883a 	add	r3,r3,r16
81112e1c:	8c400044 	addi	r17,r17,1
81112e20:	b0800015 	stw	r2,0(r22)
81112e24:	b4000115 	stw	r16,4(r22)
81112e28:	d8c02015 	stw	r3,128(sp)
81112e2c:	dc401f15 	stw	r17,124(sp)
81112e30:	008001c4 	movi	r2,7
81112e34:	147f2e0e 	bge	r2,r17,81112af0 <__reset+0xfb0f2af0>
81112e38:	d9402c17 	ldw	r5,176(sp)
81112e3c:	d9801e04 	addi	r6,sp,120
81112e40:	9809883a 	mov	r4,r19
81112e44:	111e57c0 	call	8111e57c <__ssprint_r>
81112e48:	103c031e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112e4c:	d8c02017 	ldw	r3,128(sp)
81112e50:	dc401f17 	ldw	r17,124(sp)
81112e54:	dd800404 	addi	r22,sp,16
81112e58:	003f2606 	br	81112af4 <__reset+0xfb0f2af4>
81112e5c:	9080040c 	andi	r2,r18,16
81112e60:	1000c326 	beq	r2,zero,81113170 <___svfprintf_internal_r+0x16b4>
81112e64:	d8802d17 	ldw	r2,180(sp)
81112e68:	15000017 	ldw	r20,0(r2)
81112e6c:	10800104 	addi	r2,r2,4
81112e70:	d8802d15 	stw	r2,180(sp)
81112e74:	a02dd7fa 	srai	r22,r20,31
81112e78:	b005883a 	mov	r2,r22
81112e7c:	103c680e 	bge	r2,zero,81112020 <__reset+0xfb0f2020>
81112e80:	0529c83a 	sub	r20,zero,r20
81112e84:	a004c03a 	cmpne	r2,r20,zero
81112e88:	05adc83a 	sub	r22,zero,r22
81112e8c:	b0adc83a 	sub	r22,r22,r2
81112e90:	d8802917 	ldw	r2,164(sp)
81112e94:	07000b44 	movi	fp,45
81112e98:	df002785 	stb	fp,158(sp)
81112e9c:	10022e16 	blt	r2,zero,81113758 <___svfprintf_internal_r+0x1c9c>
81112ea0:	00bfdfc4 	movi	r2,-129
81112ea4:	90a4703a 	and	r18,r18,r2
81112ea8:	003c6406 	br	8111203c <__reset+0xfb0f203c>
81112eac:	9080100c 	andi	r2,r18,64
81112eb0:	d8002785 	stb	zero,158(sp)
81112eb4:	10012526 	beq	r2,zero,8111334c <___svfprintf_internal_r+0x1890>
81112eb8:	d9002d17 	ldw	r4,180(sp)
81112ebc:	d9402917 	ldw	r5,164(sp)
81112ec0:	002d883a 	mov	r22,zero
81112ec4:	20800104 	addi	r2,r4,4
81112ec8:	2500000b 	ldhu	r20,0(r4)
81112ecc:	283fa20e 	bge	r5,zero,81112d58 <__reset+0xfb0f2d58>
81112ed0:	d8802d15 	stw	r2,180(sp)
81112ed4:	0039883a 	mov	fp,zero
81112ed8:	a584b03a 	or	r2,r20,r22
81112edc:	103c571e 	bne	r2,zero,8111203c <__reset+0xfb0f203c>
81112ee0:	00800044 	movi	r2,1
81112ee4:	003e5006 	br	81112828 <__reset+0xfb0f2828>
81112ee8:	d9402c17 	ldw	r5,176(sp)
81112eec:	d9801e04 	addi	r6,sp,120
81112ef0:	9809883a 	mov	r4,r19
81112ef4:	111e57c0 	call	8111e57c <__ssprint_r>
81112ef8:	103bd71e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81112efc:	d8c02017 	ldw	r3,128(sp)
81112f00:	da000404 	addi	r8,sp,16
81112f04:	d9003217 	ldw	r4,200(sp)
81112f08:	d8802617 	ldw	r2,152(sp)
81112f0c:	d9403317 	ldw	r5,204(sp)
81112f10:	8123883a 	add	r17,r16,r4
81112f14:	11400216 	blt	r2,r5,81112f20 <___svfprintf_internal_r+0x1464>
81112f18:	9100004c 	andi	r4,r18,1
81112f1c:	20000d26 	beq	r4,zero,81112f54 <___svfprintf_internal_r+0x1498>
81112f20:	d9003817 	ldw	r4,224(sp)
81112f24:	d9403417 	ldw	r5,208(sp)
81112f28:	1907883a 	add	r3,r3,r4
81112f2c:	d9001f17 	ldw	r4,124(sp)
81112f30:	41400015 	stw	r5,0(r8)
81112f34:	d9403817 	ldw	r5,224(sp)
81112f38:	21000044 	addi	r4,r4,1
81112f3c:	d8c02015 	stw	r3,128(sp)
81112f40:	41400115 	stw	r5,4(r8)
81112f44:	d9001f15 	stw	r4,124(sp)
81112f48:	014001c4 	movi	r5,7
81112f4c:	2901dc16 	blt	r5,r4,811136c0 <___svfprintf_internal_r+0x1c04>
81112f50:	42000204 	addi	r8,r8,8
81112f54:	d9003317 	ldw	r4,204(sp)
81112f58:	8121883a 	add	r16,r16,r4
81112f5c:	2085c83a 	sub	r2,r4,r2
81112f60:	8461c83a 	sub	r16,r16,r17
81112f64:	1400010e 	bge	r2,r16,81112f6c <___svfprintf_internal_r+0x14b0>
81112f68:	1021883a 	mov	r16,r2
81112f6c:	04000a0e 	bge	zero,r16,81112f98 <___svfprintf_internal_r+0x14dc>
81112f70:	d9001f17 	ldw	r4,124(sp)
81112f74:	1c07883a 	add	r3,r3,r16
81112f78:	44400015 	stw	r17,0(r8)
81112f7c:	21000044 	addi	r4,r4,1
81112f80:	44000115 	stw	r16,4(r8)
81112f84:	d8c02015 	stw	r3,128(sp)
81112f88:	d9001f15 	stw	r4,124(sp)
81112f8c:	014001c4 	movi	r5,7
81112f90:	2901e616 	blt	r5,r4,8111372c <___svfprintf_internal_r+0x1c70>
81112f94:	42000204 	addi	r8,r8,8
81112f98:	8001f616 	blt	r16,zero,81113774 <___svfprintf_internal_r+0x1cb8>
81112f9c:	1421c83a 	sub	r16,r2,r16
81112fa0:	043d1c0e 	bge	zero,r16,81112414 <__reset+0xfb0f2414>
81112fa4:	04400404 	movi	r17,16
81112fa8:	d8801f17 	ldw	r2,124(sp)
81112fac:	8c3edd0e 	bge	r17,r16,81112b24 <__reset+0xfb0f2b24>
81112fb0:	01604534 	movhi	r5,33044
81112fb4:	29710c84 	addi	r5,r5,-15310
81112fb8:	d9402b15 	stw	r5,172(sp)
81112fbc:	058001c4 	movi	r22,7
81112fc0:	dd002c17 	ldw	r20,176(sp)
81112fc4:	00000306 	br	81112fd4 <___svfprintf_internal_r+0x1518>
81112fc8:	42000204 	addi	r8,r8,8
81112fcc:	843ffc04 	addi	r16,r16,-16
81112fd0:	8c3ed70e 	bge	r17,r16,81112b30 <__reset+0xfb0f2b30>
81112fd4:	18c00404 	addi	r3,r3,16
81112fd8:	10800044 	addi	r2,r2,1
81112fdc:	45400015 	stw	r21,0(r8)
81112fe0:	44400115 	stw	r17,4(r8)
81112fe4:	d8c02015 	stw	r3,128(sp)
81112fe8:	d8801f15 	stw	r2,124(sp)
81112fec:	b0bff60e 	bge	r22,r2,81112fc8 <__reset+0xfb0f2fc8>
81112ff0:	d9801e04 	addi	r6,sp,120
81112ff4:	a00b883a 	mov	r5,r20
81112ff8:	9809883a 	mov	r4,r19
81112ffc:	111e57c0 	call	8111e57c <__ssprint_r>
81113000:	103b951e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81113004:	d8c02017 	ldw	r3,128(sp)
81113008:	d8801f17 	ldw	r2,124(sp)
8111300c:	da000404 	addi	r8,sp,16
81113010:	003fee06 	br	81112fcc <__reset+0xfb0f2fcc>
81113014:	9088703a 	and	r4,r18,r2
81113018:	203e8d1e 	bne	r4,zero,81112a50 <__reset+0xfb0f2a50>
8111301c:	dc401f17 	ldw	r17,124(sp)
81113020:	40800115 	stw	r2,4(r8)
81113024:	44000015 	stw	r16,0(r8)
81113028:	8c400044 	addi	r17,r17,1
8111302c:	d8c02015 	stw	r3,128(sp)
81113030:	dc401f15 	stw	r17,124(sp)
81113034:	008001c4 	movi	r2,7
81113038:	147f7f16 	blt	r2,r17,81112e38 <__reset+0xfb0f2e38>
8111303c:	45800204 	addi	r22,r8,8
81113040:	003eac06 	br	81112af4 <__reset+0xfb0f2af4>
81113044:	d9402c17 	ldw	r5,176(sp)
81113048:	d9801e04 	addi	r6,sp,120
8111304c:	9809883a 	mov	r4,r19
81113050:	111e57c0 	call	8111e57c <__ssprint_r>
81113054:	103b801e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81113058:	d8c02017 	ldw	r3,128(sp)
8111305c:	dc401f17 	ldw	r17,124(sp)
81113060:	da000404 	addi	r8,sp,16
81113064:	003e8406 	br	81112a78 <__reset+0xfb0f2a78>
81113068:	d9402c17 	ldw	r5,176(sp)
8111306c:	d9801e04 	addi	r6,sp,120
81113070:	9809883a 	mov	r4,r19
81113074:	111e57c0 	call	8111e57c <__ssprint_r>
81113078:	103b771e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
8111307c:	d8c02017 	ldw	r3,128(sp)
81113080:	dc401f17 	ldw	r17,124(sp)
81113084:	dd800404 	addi	r22,sp,16
81113088:	003e8606 	br	81112aa4 <__reset+0xfb0f2aa4>
8111308c:	0029883a 	mov	r20,zero
81113090:	a5000c04 	addi	r20,r20,48
81113094:	dc001dc4 	addi	r16,sp,119
81113098:	dd001dc5 	stb	r20,119(sp)
8111309c:	003f3806 	br	81112d80 <__reset+0xfb0f2d80>
811130a0:	d9402c17 	ldw	r5,176(sp)
811130a4:	d9801e04 	addi	r6,sp,120
811130a8:	9809883a 	mov	r4,r19
811130ac:	111e57c0 	call	8111e57c <__ssprint_r>
811130b0:	103b691e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
811130b4:	d8c02017 	ldw	r3,128(sp)
811130b8:	da000404 	addi	r8,sp,16
811130bc:	003c9506 	br	81112314 <__reset+0xfb0f2314>
811130c0:	d9003617 	ldw	r4,216(sp)
811130c4:	d9403717 	ldw	r5,220(sp)
811130c8:	da003e15 	stw	r8,248(sp)
811130cc:	111c3900 	call	8111c390 <__fpclassifyd>
811130d0:	da003e17 	ldw	r8,248(sp)
811130d4:	1000bd1e 	bne	r2,zero,811133cc <___svfprintf_internal_r+0x1910>
811130d8:	008011c4 	movi	r2,71
811130dc:	14411e0e 	bge	r2,r17,81113558 <___svfprintf_internal_r+0x1a9c>
811130e0:	04204534 	movhi	r16,33044
811130e4:	8430ff04 	addi	r16,r16,-15364
811130e8:	00c000c4 	movi	r3,3
811130ec:	00bfdfc4 	movi	r2,-129
811130f0:	d8c02a15 	stw	r3,168(sp)
811130f4:	90a4703a 	and	r18,r18,r2
811130f8:	df002783 	ldbu	fp,158(sp)
811130fc:	d8c02e15 	stw	r3,184(sp)
81113100:	d8002915 	stw	zero,164(sp)
81113104:	d8003215 	stw	zero,200(sp)
81113108:	003c1c06 	br	8111217c <__reset+0xfb0f217c>
8111310c:	9080100c 	andi	r2,r18,64
81113110:	d8002785 	stb	zero,158(sp)
81113114:	10009426 	beq	r2,zero,81113368 <___svfprintf_internal_r+0x18ac>
81113118:	d8c02d17 	ldw	r3,180(sp)
8111311c:	d9002917 	ldw	r4,164(sp)
81113120:	002d883a 	mov	r22,zero
81113124:	18800104 	addi	r2,r3,4
81113128:	1d00000b 	ldhu	r20,0(r3)
8111312c:	203ec10e 	bge	r4,zero,81112c34 <__reset+0xfb0f2c34>
81113130:	a586b03a 	or	r3,r20,r22
81113134:	d8802d15 	stw	r2,180(sp)
81113138:	183ec21e 	bne	r3,zero,81112c44 <__reset+0xfb0f2c44>
8111313c:	0039883a 	mov	fp,zero
81113140:	0005883a 	mov	r2,zero
81113144:	003db806 	br	81112828 <__reset+0xfb0f2828>
81113148:	d8802d17 	ldw	r2,180(sp)
8111314c:	d8c02d17 	ldw	r3,180(sp)
81113150:	d9002d17 	ldw	r4,180(sp)
81113154:	10800017 	ldw	r2,0(r2)
81113158:	18c00117 	ldw	r3,4(r3)
8111315c:	21000204 	addi	r4,r4,8
81113160:	d8803615 	stw	r2,216(sp)
81113164:	d8c03715 	stw	r3,220(sp)
81113168:	d9002d15 	stw	r4,180(sp)
8111316c:	003b8206 	br	81111f78 <__reset+0xfb0f1f78>
81113170:	9080100c 	andi	r2,r18,64
81113174:	10010726 	beq	r2,zero,81113594 <___svfprintf_internal_r+0x1ad8>
81113178:	d8c02d17 	ldw	r3,180(sp)
8111317c:	1d00000f 	ldh	r20,0(r3)
81113180:	18c00104 	addi	r3,r3,4
81113184:	d8c02d15 	stw	r3,180(sp)
81113188:	a02dd7fa 	srai	r22,r20,31
8111318c:	b005883a 	mov	r2,r22
81113190:	003ba206 	br	8111201c <__reset+0xfb0f201c>
81113194:	9080100c 	andi	r2,r18,64
81113198:	10010526 	beq	r2,zero,811135b0 <___svfprintf_internal_r+0x1af4>
8111319c:	d9002d17 	ldw	r4,180(sp)
811131a0:	002d883a 	mov	r22,zero
811131a4:	2500000b 	ldhu	r20,0(r4)
811131a8:	21000104 	addi	r4,r4,4
811131ac:	d9002d15 	stw	r4,180(sp)
811131b0:	003cfe06 	br	811125ac <__reset+0xfb0f25ac>
811131b4:	bc400007 	ldb	r17,0(r23)
811131b8:	003a9606 	br	81111c14 <__reset+0xfb0f1c14>
811131bc:	9080040c 	andi	r2,r18,16
811131c0:	10010126 	beq	r2,zero,811135c8 <___svfprintf_internal_r+0x1b0c>
811131c4:	d9402d17 	ldw	r5,180(sp)
811131c8:	d8c02f17 	ldw	r3,188(sp)
811131cc:	28800017 	ldw	r2,0(r5)
811131d0:	29400104 	addi	r5,r5,4
811131d4:	d9402d15 	stw	r5,180(sp)
811131d8:	10c00015 	stw	r3,0(r2)
811131dc:	003a6406 	br	81111b70 <__reset+0xfb0f1b70>
811131e0:	d9002917 	ldw	r4,164(sp)
811131e4:	d8002785 	stb	zero,158(sp)
811131e8:	203d8d16 	blt	r4,zero,81112820 <__reset+0xfb0f2820>
811131ec:	00bfdfc4 	movi	r2,-129
811131f0:	90a4703a 	and	r18,r18,r2
811131f4:	003b0506 	br	81111e0c <__reset+0xfb0f1e0c>
811131f8:	01604534 	movhi	r5,33044
811131fc:	29710c84 	addi	r5,r5,-15310
81113200:	d9402b15 	stw	r5,172(sp)
81113204:	d9402b17 	ldw	r5,172(sp)
81113208:	1c47883a 	add	r3,r3,r17
8111320c:	10800044 	addi	r2,r2,1
81113210:	41400015 	stw	r5,0(r8)
81113214:	44400115 	stw	r17,4(r8)
81113218:	d8c02015 	stw	r3,128(sp)
8111321c:	d8801f15 	stw	r2,124(sp)
81113220:	010001c4 	movi	r4,7
81113224:	20bf3016 	blt	r4,r2,81112ee8 <__reset+0xfb0f2ee8>
81113228:	42000204 	addi	r8,r8,8
8111322c:	003f3506 	br	81112f04 <__reset+0xfb0f2f04>
81113230:	01204534 	movhi	r4,33044
81113234:	21310c84 	addi	r4,r4,-15310
81113238:	d9002b15 	stw	r4,172(sp)
8111323c:	003c5e06 	br	811123b8 <__reset+0xfb0f23b8>
81113240:	d9402c17 	ldw	r5,176(sp)
81113244:	d9801e04 	addi	r6,sp,120
81113248:	9809883a 	mov	r4,r19
8111324c:	111e57c0 	call	8111e57c <__ssprint_r>
81113250:	103b011e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81113254:	d8c02017 	ldw	r3,128(sp)
81113258:	da000404 	addi	r8,sp,16
8111325c:	003d9306 	br	811128ac <__reset+0xfb0f28ac>
81113260:	d8801f17 	ldw	r2,124(sp)
81113264:	01604534 	movhi	r5,33044
81113268:	01000044 	movi	r4,1
8111326c:	18c00044 	addi	r3,r3,1
81113270:	10800044 	addi	r2,r2,1
81113274:	29710c04 	addi	r5,r5,-15312
81113278:	41000115 	stw	r4,4(r8)
8111327c:	41400015 	stw	r5,0(r8)
81113280:	d8c02015 	stw	r3,128(sp)
81113284:	d8801f15 	stw	r2,124(sp)
81113288:	010001c4 	movi	r4,7
8111328c:	2080b516 	blt	r4,r2,81113564 <___svfprintf_internal_r+0x1aa8>
81113290:	42000204 	addi	r8,r8,8
81113294:	8800041e 	bne	r17,zero,811132a8 <___svfprintf_internal_r+0x17ec>
81113298:	d8803317 	ldw	r2,204(sp)
8111329c:	1000021e 	bne	r2,zero,811132a8 <___svfprintf_internal_r+0x17ec>
811132a0:	9080004c 	andi	r2,r18,1
811132a4:	103c5b26 	beq	r2,zero,81112414 <__reset+0xfb0f2414>
811132a8:	d9003817 	ldw	r4,224(sp)
811132ac:	d8801f17 	ldw	r2,124(sp)
811132b0:	d9403417 	ldw	r5,208(sp)
811132b4:	20c7883a 	add	r3,r4,r3
811132b8:	10800044 	addi	r2,r2,1
811132bc:	41000115 	stw	r4,4(r8)
811132c0:	41400015 	stw	r5,0(r8)
811132c4:	d8c02015 	stw	r3,128(sp)
811132c8:	d8801f15 	stw	r2,124(sp)
811132cc:	010001c4 	movi	r4,7
811132d0:	20818016 	blt	r4,r2,811138d4 <___svfprintf_internal_r+0x1e18>
811132d4:	42000204 	addi	r8,r8,8
811132d8:	0463c83a 	sub	r17,zero,r17
811132dc:	0440cb0e 	bge	zero,r17,8111360c <___svfprintf_internal_r+0x1b50>
811132e0:	05800404 	movi	r22,16
811132e4:	b440e80e 	bge	r22,r17,81113688 <___svfprintf_internal_r+0x1bcc>
811132e8:	01604534 	movhi	r5,33044
811132ec:	29710c84 	addi	r5,r5,-15310
811132f0:	d9402b15 	stw	r5,172(sp)
811132f4:	070001c4 	movi	fp,7
811132f8:	dd002c17 	ldw	r20,176(sp)
811132fc:	00000306 	br	8111330c <___svfprintf_internal_r+0x1850>
81113300:	42000204 	addi	r8,r8,8
81113304:	8c7ffc04 	addi	r17,r17,-16
81113308:	b440e20e 	bge	r22,r17,81113694 <___svfprintf_internal_r+0x1bd8>
8111330c:	18c00404 	addi	r3,r3,16
81113310:	10800044 	addi	r2,r2,1
81113314:	45400015 	stw	r21,0(r8)
81113318:	45800115 	stw	r22,4(r8)
8111331c:	d8c02015 	stw	r3,128(sp)
81113320:	d8801f15 	stw	r2,124(sp)
81113324:	e0bff60e 	bge	fp,r2,81113300 <__reset+0xfb0f3300>
81113328:	d9801e04 	addi	r6,sp,120
8111332c:	a00b883a 	mov	r5,r20
81113330:	9809883a 	mov	r4,r19
81113334:	111e57c0 	call	8111e57c <__ssprint_r>
81113338:	103ac71e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
8111333c:	d8c02017 	ldw	r3,128(sp)
81113340:	d8801f17 	ldw	r2,124(sp)
81113344:	da000404 	addi	r8,sp,16
81113348:	003fee06 	br	81113304 <__reset+0xfb0f3304>
8111334c:	d8c02d17 	ldw	r3,180(sp)
81113350:	d9002917 	ldw	r4,164(sp)
81113354:	002d883a 	mov	r22,zero
81113358:	18800104 	addi	r2,r3,4
8111335c:	1d000017 	ldw	r20,0(r3)
81113360:	203e7d0e 	bge	r4,zero,81112d58 <__reset+0xfb0f2d58>
81113364:	003eda06 	br	81112ed0 <__reset+0xfb0f2ed0>
81113368:	d9402d17 	ldw	r5,180(sp)
8111336c:	d8c02917 	ldw	r3,164(sp)
81113370:	002d883a 	mov	r22,zero
81113374:	28800104 	addi	r2,r5,4
81113378:	2d000017 	ldw	r20,0(r5)
8111337c:	183e2d0e 	bge	r3,zero,81112c34 <__reset+0xfb0f2c34>
81113380:	003f6b06 	br	81113130 <__reset+0xfb0f3130>
81113384:	d8c02d15 	stw	r3,180(sp)
81113388:	0039883a 	mov	fp,zero
8111338c:	003ed206 	br	81112ed8 <__reset+0xfb0f2ed8>
81113390:	bc400043 	ldbu	r17,1(r23)
81113394:	94800814 	ori	r18,r18,32
81113398:	bdc00044 	addi	r23,r23,1
8111339c:	8c403fcc 	andi	r17,r17,255
811133a0:	8c40201c 	xori	r17,r17,128
811133a4:	8c7fe004 	addi	r17,r17,-128
811133a8:	003a1a06 	br	81111c14 <__reset+0xfb0f1c14>
811133ac:	d9402c17 	ldw	r5,176(sp)
811133b0:	d9801e04 	addi	r6,sp,120
811133b4:	9809883a 	mov	r4,r19
811133b8:	111e57c0 	call	8111e57c <__ssprint_r>
811133bc:	103aa61e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
811133c0:	d8c02017 	ldw	r3,128(sp)
811133c4:	da000404 	addi	r8,sp,16
811133c8:	003d4a06 	br	811128f4 <__reset+0xfb0f28f4>
811133cc:	d9002917 	ldw	r4,164(sp)
811133d0:	05bff7c4 	movi	r22,-33
811133d4:	00bfffc4 	movi	r2,-1
811133d8:	8dac703a 	and	r22,r17,r22
811133dc:	20806a26 	beq	r4,r2,81113588 <___svfprintf_internal_r+0x1acc>
811133e0:	008011c4 	movi	r2,71
811133e4:	b0813726 	beq	r22,r2,811138c4 <___svfprintf_internal_r+0x1e08>
811133e8:	d9003717 	ldw	r4,220(sp)
811133ec:	90c04014 	ori	r3,r18,256
811133f0:	d8c02b15 	stw	r3,172(sp)
811133f4:	20015d16 	blt	r4,zero,8111396c <___svfprintf_internal_r+0x1eb0>
811133f8:	dd003717 	ldw	r20,220(sp)
811133fc:	d8002a05 	stb	zero,168(sp)
81113400:	00801984 	movi	r2,102
81113404:	88814026 	beq	r17,r2,81113908 <___svfprintf_internal_r+0x1e4c>
81113408:	00801184 	movi	r2,70
8111340c:	88817126 	beq	r17,r2,811139d4 <___svfprintf_internal_r+0x1f18>
81113410:	00801144 	movi	r2,69
81113414:	b0816226 	beq	r22,r2,811139a0 <___svfprintf_internal_r+0x1ee4>
81113418:	d8c02917 	ldw	r3,164(sp)
8111341c:	d8802104 	addi	r2,sp,132
81113420:	d8800315 	stw	r2,12(sp)
81113424:	d9403617 	ldw	r5,216(sp)
81113428:	d8802504 	addi	r2,sp,148
8111342c:	d8800215 	stw	r2,8(sp)
81113430:	d8802604 	addi	r2,sp,152
81113434:	d8c00015 	stw	r3,0(sp)
81113438:	d8800115 	stw	r2,4(sp)
8111343c:	01c00084 	movi	r7,2
81113440:	a00d883a 	mov	r6,r20
81113444:	9809883a 	mov	r4,r19
81113448:	d8c03d15 	stw	r3,244(sp)
8111344c:	da003e15 	stw	r8,248(sp)
81113450:	1117c480 	call	81117c48 <_dtoa_r>
81113454:	1021883a 	mov	r16,r2
81113458:	008019c4 	movi	r2,103
8111345c:	d8c03d17 	ldw	r3,244(sp)
81113460:	da003e17 	ldw	r8,248(sp)
81113464:	8880e726 	beq	r17,r2,81113804 <___svfprintf_internal_r+0x1d48>
81113468:	008011c4 	movi	r2,71
8111346c:	8880d426 	beq	r17,r2,811137c0 <___svfprintf_internal_r+0x1d04>
81113470:	80f9883a 	add	fp,r16,r3
81113474:	d9003617 	ldw	r4,216(sp)
81113478:	000d883a 	mov	r6,zero
8111347c:	000f883a 	mov	r7,zero
81113480:	a00b883a 	mov	r5,r20
81113484:	da003e15 	stw	r8,248(sp)
81113488:	11246d40 	call	811246d4 <__eqdf2>
8111348c:	da003e17 	ldw	r8,248(sp)
81113490:	1000e426 	beq	r2,zero,81113824 <___svfprintf_internal_r+0x1d68>
81113494:	d8802117 	ldw	r2,132(sp)
81113498:	1700062e 	bgeu	r2,fp,811134b4 <___svfprintf_internal_r+0x19f8>
8111349c:	01000c04 	movi	r4,48
811134a0:	10c00044 	addi	r3,r2,1
811134a4:	d8c02115 	stw	r3,132(sp)
811134a8:	11000005 	stb	r4,0(r2)
811134ac:	d8802117 	ldw	r2,132(sp)
811134b0:	173ffb36 	bltu	r2,fp,811134a0 <__reset+0xfb0f34a0>
811134b4:	1405c83a 	sub	r2,r2,r16
811134b8:	d8803315 	stw	r2,204(sp)
811134bc:	008011c4 	movi	r2,71
811134c0:	b080c526 	beq	r22,r2,811137d8 <___svfprintf_internal_r+0x1d1c>
811134c4:	00801944 	movi	r2,101
811134c8:	1441d90e 	bge	r2,r17,81113c30 <___svfprintf_internal_r+0x2174>
811134cc:	d8c02617 	ldw	r3,152(sp)
811134d0:	00801984 	movi	r2,102
811134d4:	d8c03215 	stw	r3,200(sp)
811134d8:	88813426 	beq	r17,r2,811139ac <___svfprintf_internal_r+0x1ef0>
811134dc:	d8c03217 	ldw	r3,200(sp)
811134e0:	d9003317 	ldw	r4,204(sp)
811134e4:	19012516 	blt	r3,r4,8111397c <___svfprintf_internal_r+0x1ec0>
811134e8:	9480004c 	andi	r18,r18,1
811134ec:	9001841e 	bne	r18,zero,81113b00 <___svfprintf_internal_r+0x2044>
811134f0:	1805883a 	mov	r2,r3
811134f4:	1801cc16 	blt	r3,zero,81113c28 <___svfprintf_internal_r+0x216c>
811134f8:	d8c03217 	ldw	r3,200(sp)
811134fc:	044019c4 	movi	r17,103
81113500:	d8c02e15 	stw	r3,184(sp)
81113504:	df002a07 	ldb	fp,168(sp)
81113508:	e000a61e 	bne	fp,zero,811137a4 <___svfprintf_internal_r+0x1ce8>
8111350c:	df002783 	ldbu	fp,158(sp)
81113510:	d8802a15 	stw	r2,168(sp)
81113514:	dc802b17 	ldw	r18,172(sp)
81113518:	d8002915 	stw	zero,164(sp)
8111351c:	003b1706 	br	8111217c <__reset+0xfb0f217c>
81113520:	04204534 	movhi	r16,33044
81113524:	8430fc04 	addi	r16,r16,-15376
81113528:	003aa606 	br	81111fc4 <__reset+0xfb0f1fc4>
8111352c:	d9003917 	ldw	r4,228(sp)
81113530:	04001004 	movi	r16,64
81113534:	800b883a 	mov	r5,r16
81113538:	11106380 	call	81110638 <_malloc_r>
8111353c:	d9002c17 	ldw	r4,176(sp)
81113540:	20800015 	stw	r2,0(r4)
81113544:	20800415 	stw	r2,16(r4)
81113548:	1001cb26 	beq	r2,zero,81113c78 <___svfprintf_internal_r+0x21bc>
8111354c:	d8802c17 	ldw	r2,176(sp)
81113550:	14000515 	stw	r16,20(r2)
81113554:	00397606 	br	81111b30 <__reset+0xfb0f1b30>
81113558:	04204534 	movhi	r16,33044
8111355c:	8430fe04 	addi	r16,r16,-15368
81113560:	003ee106 	br	811130e8 <__reset+0xfb0f30e8>
81113564:	d9402c17 	ldw	r5,176(sp)
81113568:	d9801e04 	addi	r6,sp,120
8111356c:	9809883a 	mov	r4,r19
81113570:	111e57c0 	call	8111e57c <__ssprint_r>
81113574:	103a381e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81113578:	dc402617 	ldw	r17,152(sp)
8111357c:	d8c02017 	ldw	r3,128(sp)
81113580:	da000404 	addi	r8,sp,16
81113584:	003f4306 	br	81113294 <__reset+0xfb0f3294>
81113588:	01400184 	movi	r5,6
8111358c:	d9402915 	stw	r5,164(sp)
81113590:	003f9506 	br	811133e8 <__reset+0xfb0f33e8>
81113594:	d9002d17 	ldw	r4,180(sp)
81113598:	25000017 	ldw	r20,0(r4)
8111359c:	21000104 	addi	r4,r4,4
811135a0:	d9002d15 	stw	r4,180(sp)
811135a4:	a02dd7fa 	srai	r22,r20,31
811135a8:	b005883a 	mov	r2,r22
811135ac:	003a9b06 	br	8111201c <__reset+0xfb0f201c>
811135b0:	d9402d17 	ldw	r5,180(sp)
811135b4:	002d883a 	mov	r22,zero
811135b8:	2d000017 	ldw	r20,0(r5)
811135bc:	29400104 	addi	r5,r5,4
811135c0:	d9402d15 	stw	r5,180(sp)
811135c4:	003bf906 	br	811125ac <__reset+0xfb0f25ac>
811135c8:	9480100c 	andi	r18,r18,64
811135cc:	90006e26 	beq	r18,zero,81113788 <___svfprintf_internal_r+0x1ccc>
811135d0:	d9002d17 	ldw	r4,180(sp)
811135d4:	d9402f17 	ldw	r5,188(sp)
811135d8:	20800017 	ldw	r2,0(r4)
811135dc:	21000104 	addi	r4,r4,4
811135e0:	d9002d15 	stw	r4,180(sp)
811135e4:	1140000d 	sth	r5,0(r2)
811135e8:	00396106 	br	81111b70 <__reset+0xfb0f1b70>
811135ec:	d9402c17 	ldw	r5,176(sp)
811135f0:	d9801e04 	addi	r6,sp,120
811135f4:	9809883a 	mov	r4,r19
811135f8:	111e57c0 	call	8111e57c <__ssprint_r>
811135fc:	103a161e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81113600:	d8c02017 	ldw	r3,128(sp)
81113604:	d8801f17 	ldw	r2,124(sp)
81113608:	da000404 	addi	r8,sp,16
8111360c:	d9403317 	ldw	r5,204(sp)
81113610:	10800044 	addi	r2,r2,1
81113614:	44000015 	stw	r16,0(r8)
81113618:	28c7883a 	add	r3,r5,r3
8111361c:	003b7706 	br	811123fc <__reset+0xfb0f23fc>
81113620:	8009883a 	mov	r4,r16
81113624:	da003e15 	stw	r8,248(sp)
81113628:	11117c80 	call	811117c8 <strlen>
8111362c:	d8802e15 	stw	r2,184(sp)
81113630:	da003e17 	ldw	r8,248(sp)
81113634:	103c280e 	bge	r2,zero,811126d8 <__reset+0xfb0f26d8>
81113638:	0005883a 	mov	r2,zero
8111363c:	003c2606 	br	811126d8 <__reset+0xfb0f26d8>
81113640:	00bfffc4 	movi	r2,-1
81113644:	003a0906 	br	81111e6c <__reset+0xfb0f1e6c>
81113648:	01204534 	movhi	r4,33044
8111364c:	21311084 	addi	r4,r4,-15294
81113650:	d9003515 	stw	r4,212(sp)
81113654:	003b0606 	br	81112270 <__reset+0xfb0f2270>
81113658:	013fffc4 	movi	r4,-1
8111365c:	003a2706 	br	81111efc <__reset+0xfb0f1efc>
81113660:	d9402c17 	ldw	r5,176(sp)
81113664:	d9801e04 	addi	r6,sp,120
81113668:	9809883a 	mov	r4,r19
8111366c:	111e57c0 	call	8111e57c <__ssprint_r>
81113670:	1039f91e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81113674:	d8c02017 	ldw	r3,128(sp)
81113678:	da000404 	addi	r8,sp,16
8111367c:	003d8406 	br	81112c90 <__reset+0xfb0f2c90>
81113680:	0023883a 	mov	r17,zero
81113684:	003d8306 	br	81112c94 <__reset+0xfb0f2c94>
81113688:	01204534 	movhi	r4,33044
8111368c:	21310c84 	addi	r4,r4,-15310
81113690:	d9002b15 	stw	r4,172(sp)
81113694:	d9002b17 	ldw	r4,172(sp)
81113698:	1c47883a 	add	r3,r3,r17
8111369c:	10800044 	addi	r2,r2,1
811136a0:	41000015 	stw	r4,0(r8)
811136a4:	44400115 	stw	r17,4(r8)
811136a8:	d8c02015 	stw	r3,128(sp)
811136ac:	d8801f15 	stw	r2,124(sp)
811136b0:	010001c4 	movi	r4,7
811136b4:	20bfcd16 	blt	r4,r2,811135ec <__reset+0xfb0f35ec>
811136b8:	42000204 	addi	r8,r8,8
811136bc:	003fd306 	br	8111360c <__reset+0xfb0f360c>
811136c0:	d9402c17 	ldw	r5,176(sp)
811136c4:	d9801e04 	addi	r6,sp,120
811136c8:	9809883a 	mov	r4,r19
811136cc:	111e57c0 	call	8111e57c <__ssprint_r>
811136d0:	1039e11e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
811136d4:	d8802617 	ldw	r2,152(sp)
811136d8:	d8c02017 	ldw	r3,128(sp)
811136dc:	da000404 	addi	r8,sp,16
811136e0:	003e1c06 	br	81112f54 <__reset+0xfb0f2f54>
811136e4:	d8802917 	ldw	r2,164(sp)
811136e8:	00c00184 	movi	r3,6
811136ec:	1880012e 	bgeu	r3,r2,811136f4 <___svfprintf_internal_r+0x1c38>
811136f0:	1805883a 	mov	r2,r3
811136f4:	d8802e15 	stw	r2,184(sp)
811136f8:	1000f316 	blt	r2,zero,81113ac8 <___svfprintf_internal_r+0x200c>
811136fc:	04204534 	movhi	r16,33044
81113700:	d8802a15 	stw	r2,168(sp)
81113704:	dd002d15 	stw	r20,180(sp)
81113708:	d8002915 	stw	zero,164(sp)
8111370c:	d8003215 	stw	zero,200(sp)
81113710:	84310a04 	addi	r16,r16,-15320
81113714:	0039883a 	mov	fp,zero
81113718:	003a9f06 	br	81112198 <__reset+0xfb0f2198>
8111371c:	01204534 	movhi	r4,33044
81113720:	21311084 	addi	r4,r4,-15294
81113724:	d9003515 	stw	r4,212(sp)
81113728:	003b5f06 	br	811124a8 <__reset+0xfb0f24a8>
8111372c:	d9402c17 	ldw	r5,176(sp)
81113730:	d9801e04 	addi	r6,sp,120
81113734:	9809883a 	mov	r4,r19
81113738:	111e57c0 	call	8111e57c <__ssprint_r>
8111373c:	1039c61e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
81113740:	d8802617 	ldw	r2,152(sp)
81113744:	d9403317 	ldw	r5,204(sp)
81113748:	d8c02017 	ldw	r3,128(sp)
8111374c:	da000404 	addi	r8,sp,16
81113750:	2885c83a 	sub	r2,r5,r2
81113754:	003e1006 	br	81112f98 <__reset+0xfb0f2f98>
81113758:	00800044 	movi	r2,1
8111375c:	10803fcc 	andi	r2,r2,255
81113760:	00c00044 	movi	r3,1
81113764:	10fa3526 	beq	r2,r3,8111203c <__reset+0xfb0f203c>
81113768:	00c00084 	movi	r3,2
8111376c:	10fb9e26 	beq	r2,r3,811125e8 <__reset+0xfb0f25e8>
81113770:	003a6406 	br	81112104 <__reset+0xfb0f2104>
81113774:	0021883a 	mov	r16,zero
81113778:	003e0806 	br	81112f9c <__reset+0xfb0f2f9c>
8111377c:	07000b44 	movi	fp,45
81113780:	df002785 	stb	fp,158(sp)
81113784:	003a0b06 	br	81111fb4 <__reset+0xfb0f1fb4>
81113788:	d8c02d17 	ldw	r3,180(sp)
8111378c:	d9002f17 	ldw	r4,188(sp)
81113790:	18800017 	ldw	r2,0(r3)
81113794:	18c00104 	addi	r3,r3,4
81113798:	d8c02d15 	stw	r3,180(sp)
8111379c:	11000015 	stw	r4,0(r2)
811137a0:	0038f306 	br	81111b70 <__reset+0xfb0f1b70>
811137a4:	00c00b44 	movi	r3,45
811137a8:	d8c02785 	stb	r3,158(sp)
811137ac:	d8802a15 	stw	r2,168(sp)
811137b0:	dc802b17 	ldw	r18,172(sp)
811137b4:	d8002915 	stw	zero,164(sp)
811137b8:	07000b44 	movi	fp,45
811137bc:	003a7306 	br	8111218c <__reset+0xfb0f218c>
811137c0:	9080004c 	andi	r2,r18,1
811137c4:	1000941e 	bne	r2,zero,81113a18 <___svfprintf_internal_r+0x1f5c>
811137c8:	d8802117 	ldw	r2,132(sp)
811137cc:	1405c83a 	sub	r2,r2,r16
811137d0:	d8803315 	stw	r2,204(sp)
811137d4:	b441161e 	bne	r22,r17,81113c30 <___svfprintf_internal_r+0x2174>
811137d8:	dd802617 	ldw	r22,152(sp)
811137dc:	00bfff44 	movi	r2,-3
811137e0:	b0801a16 	blt	r22,r2,8111384c <___svfprintf_internal_r+0x1d90>
811137e4:	d9402917 	ldw	r5,164(sp)
811137e8:	2d801816 	blt	r5,r22,8111384c <___svfprintf_internal_r+0x1d90>
811137ec:	dd803215 	stw	r22,200(sp)
811137f0:	003f3a06 	br	811134dc <__reset+0xfb0f34dc>
811137f4:	1025883a 	mov	r18,r2
811137f8:	0039883a 	mov	fp,zero
811137fc:	00800084 	movi	r2,2
81113800:	003fd606 	br	8111375c <__reset+0xfb0f375c>
81113804:	9080004c 	andi	r2,r18,1
81113808:	103f191e 	bne	r2,zero,81113470 <__reset+0xfb0f3470>
8111380c:	d8802117 	ldw	r2,132(sp)
81113810:	003f2806 	br	811134b4 <__reset+0xfb0f34b4>
81113814:	01204534 	movhi	r4,33044
81113818:	21310c84 	addi	r4,r4,-15310
8111381c:	d9002b15 	stw	r4,172(sp)
81113820:	003c7c06 	br	81112a14 <__reset+0xfb0f2a14>
81113824:	e005883a 	mov	r2,fp
81113828:	003f2206 	br	811134b4 <__reset+0xfb0f34b4>
8111382c:	d9402917 	ldw	r5,164(sp)
81113830:	df002783 	ldbu	fp,158(sp)
81113834:	dd002d15 	stw	r20,180(sp)
81113838:	d9402a15 	stw	r5,168(sp)
8111383c:	d9402e15 	stw	r5,184(sp)
81113840:	d8002915 	stw	zero,164(sp)
81113844:	d8003215 	stw	zero,200(sp)
81113848:	003a4c06 	br	8111217c <__reset+0xfb0f217c>
8111384c:	8c7fff84 	addi	r17,r17,-2
81113850:	b5bfffc4 	addi	r22,r22,-1
81113854:	dd802615 	stw	r22,152(sp)
81113858:	dc4022c5 	stb	r17,139(sp)
8111385c:	b000c316 	blt	r22,zero,81113b6c <___svfprintf_internal_r+0x20b0>
81113860:	00800ac4 	movi	r2,43
81113864:	d8802305 	stb	r2,140(sp)
81113868:	00800244 	movi	r2,9
8111386c:	15806e16 	blt	r2,r22,81113a28 <___svfprintf_internal_r+0x1f6c>
81113870:	00800c04 	movi	r2,48
81113874:	b5800c04 	addi	r22,r22,48
81113878:	d8802345 	stb	r2,141(sp)
8111387c:	dd802385 	stb	r22,142(sp)
81113880:	d88023c4 	addi	r2,sp,143
81113884:	df0022c4 	addi	fp,sp,139
81113888:	d8c03317 	ldw	r3,204(sp)
8111388c:	1739c83a 	sub	fp,r2,fp
81113890:	d9003317 	ldw	r4,204(sp)
81113894:	e0c7883a 	add	r3,fp,r3
81113898:	df003b15 	stw	fp,236(sp)
8111389c:	d8c02e15 	stw	r3,184(sp)
811138a0:	00800044 	movi	r2,1
811138a4:	1100b70e 	bge	r2,r4,81113b84 <___svfprintf_internal_r+0x20c8>
811138a8:	d8c02e17 	ldw	r3,184(sp)
811138ac:	18c00044 	addi	r3,r3,1
811138b0:	d8c02e15 	stw	r3,184(sp)
811138b4:	1805883a 	mov	r2,r3
811138b8:	1800b016 	blt	r3,zero,81113b7c <___svfprintf_internal_r+0x20c0>
811138bc:	d8003215 	stw	zero,200(sp)
811138c0:	003f1006 	br	81113504 <__reset+0xfb0f3504>
811138c4:	d8802917 	ldw	r2,164(sp)
811138c8:	103ec71e 	bne	r2,zero,811133e8 <__reset+0xfb0f33e8>
811138cc:	dc002915 	stw	r16,164(sp)
811138d0:	003ec506 	br	811133e8 <__reset+0xfb0f33e8>
811138d4:	d9402c17 	ldw	r5,176(sp)
811138d8:	d9801e04 	addi	r6,sp,120
811138dc:	9809883a 	mov	r4,r19
811138e0:	111e57c0 	call	8111e57c <__ssprint_r>
811138e4:	10395c1e 	bne	r2,zero,81111e58 <__reset+0xfb0f1e58>
811138e8:	dc402617 	ldw	r17,152(sp)
811138ec:	d8c02017 	ldw	r3,128(sp)
811138f0:	d8801f17 	ldw	r2,124(sp)
811138f4:	da000404 	addi	r8,sp,16
811138f8:	003e7706 	br	811132d8 <__reset+0xfb0f32d8>
811138fc:	582f883a 	mov	r23,r11
81113900:	d8002915 	stw	zero,164(sp)
81113904:	0038c406 	br	81111c18 <__reset+0xfb0f1c18>
81113908:	d8c02917 	ldw	r3,164(sp)
8111390c:	d8802104 	addi	r2,sp,132
81113910:	d8800315 	stw	r2,12(sp)
81113914:	d9403617 	ldw	r5,216(sp)
81113918:	d8802504 	addi	r2,sp,148
8111391c:	d8800215 	stw	r2,8(sp)
81113920:	d8802604 	addi	r2,sp,152
81113924:	d8c00015 	stw	r3,0(sp)
81113928:	9809883a 	mov	r4,r19
8111392c:	d8800115 	stw	r2,4(sp)
81113930:	01c000c4 	movi	r7,3
81113934:	a00d883a 	mov	r6,r20
81113938:	da003e15 	stw	r8,248(sp)
8111393c:	1117c480 	call	81117c48 <_dtoa_r>
81113940:	d9002917 	ldw	r4,164(sp)
81113944:	da003e17 	ldw	r8,248(sp)
81113948:	1021883a 	mov	r16,r2
8111394c:	1139883a 	add	fp,r2,r4
81113950:	2007883a 	mov	r3,r4
81113954:	81000007 	ldb	r4,0(r16)
81113958:	00800c04 	movi	r2,48
8111395c:	20806f26 	beq	r4,r2,81113b1c <___svfprintf_internal_r+0x2060>
81113960:	d8c02617 	ldw	r3,152(sp)
81113964:	e0f9883a 	add	fp,fp,r3
81113968:	003ec206 	br	81113474 <__reset+0xfb0f3474>
8111396c:	00c00b44 	movi	r3,45
81113970:	2520003c 	xorhi	r20,r4,32768
81113974:	d8c02a05 	stb	r3,168(sp)
81113978:	003ea106 	br	81113400 <__reset+0xfb0f3400>
8111397c:	d8c03217 	ldw	r3,200(sp)
81113980:	00c0890e 	bge	zero,r3,81113ba8 <___svfprintf_internal_r+0x20ec>
81113984:	00800044 	movi	r2,1
81113988:	d9003317 	ldw	r4,204(sp)
8111398c:	1105883a 	add	r2,r2,r4
81113990:	d8802e15 	stw	r2,184(sp)
81113994:	10005f16 	blt	r2,zero,81113b14 <___svfprintf_internal_r+0x2058>
81113998:	044019c4 	movi	r17,103
8111399c:	003ed906 	br	81113504 <__reset+0xfb0f3504>
811139a0:	d9002917 	ldw	r4,164(sp)
811139a4:	20c00044 	addi	r3,r4,1
811139a8:	003e9c06 	br	8111341c <__reset+0xfb0f341c>
811139ac:	d9002917 	ldw	r4,164(sp)
811139b0:	00c0680e 	bge	zero,r3,81113b54 <___svfprintf_internal_r+0x2098>
811139b4:	2000461e 	bne	r4,zero,81113ad0 <___svfprintf_internal_r+0x2014>
811139b8:	9480004c 	andi	r18,r18,1
811139bc:	9000441e 	bne	r18,zero,81113ad0 <___svfprintf_internal_r+0x2014>
811139c0:	1805883a 	mov	r2,r3
811139c4:	1800a016 	blt	r3,zero,81113c48 <___svfprintf_internal_r+0x218c>
811139c8:	d8c03217 	ldw	r3,200(sp)
811139cc:	d8c02e15 	stw	r3,184(sp)
811139d0:	003ecc06 	br	81113504 <__reset+0xfb0f3504>
811139d4:	d9402917 	ldw	r5,164(sp)
811139d8:	d8802104 	addi	r2,sp,132
811139dc:	d8800315 	stw	r2,12(sp)
811139e0:	d9400015 	stw	r5,0(sp)
811139e4:	d8802504 	addi	r2,sp,148
811139e8:	d9403617 	ldw	r5,216(sp)
811139ec:	d8800215 	stw	r2,8(sp)
811139f0:	d8802604 	addi	r2,sp,152
811139f4:	d8800115 	stw	r2,4(sp)
811139f8:	01c000c4 	movi	r7,3
811139fc:	a00d883a 	mov	r6,r20
81113a00:	9809883a 	mov	r4,r19
81113a04:	da003e15 	stw	r8,248(sp)
81113a08:	1117c480 	call	81117c48 <_dtoa_r>
81113a0c:	d8c02917 	ldw	r3,164(sp)
81113a10:	da003e17 	ldw	r8,248(sp)
81113a14:	1021883a 	mov	r16,r2
81113a18:	00801184 	movi	r2,70
81113a1c:	80f9883a 	add	fp,r16,r3
81113a20:	88bfcc26 	beq	r17,r2,81113954 <__reset+0xfb0f3954>
81113a24:	003e9306 	br	81113474 <__reset+0xfb0f3474>
81113a28:	df0022c4 	addi	fp,sp,139
81113a2c:	dc002915 	stw	r16,164(sp)
81113a30:	9829883a 	mov	r20,r19
81113a34:	e021883a 	mov	r16,fp
81113a38:	4027883a 	mov	r19,r8
81113a3c:	b009883a 	mov	r4,r22
81113a40:	01400284 	movi	r5,10
81113a44:	11232040 	call	81123204 <__modsi3>
81113a48:	10800c04 	addi	r2,r2,48
81113a4c:	843fffc4 	addi	r16,r16,-1
81113a50:	b009883a 	mov	r4,r22
81113a54:	01400284 	movi	r5,10
81113a58:	80800005 	stb	r2,0(r16)
81113a5c:	11231800 	call	81123180 <__divsi3>
81113a60:	102d883a 	mov	r22,r2
81113a64:	00800244 	movi	r2,9
81113a68:	15bff416 	blt	r2,r22,81113a3c <__reset+0xfb0f3a3c>
81113a6c:	9811883a 	mov	r8,r19
81113a70:	b0800c04 	addi	r2,r22,48
81113a74:	a027883a 	mov	r19,r20
81113a78:	8029883a 	mov	r20,r16
81113a7c:	a17fffc4 	addi	r5,r20,-1
81113a80:	a0bfffc5 	stb	r2,-1(r20)
81113a84:	dc002917 	ldw	r16,164(sp)
81113a88:	2f00752e 	bgeu	r5,fp,81113c60 <___svfprintf_internal_r+0x21a4>
81113a8c:	d9c02384 	addi	r7,sp,142
81113a90:	3d0fc83a 	sub	r7,r7,r20
81113a94:	d9002344 	addi	r4,sp,141
81113a98:	e1cf883a 	add	r7,fp,r7
81113a9c:	00000106 	br	81113aa4 <___svfprintf_internal_r+0x1fe8>
81113aa0:	28800003 	ldbu	r2,0(r5)
81113aa4:	20800005 	stb	r2,0(r4)
81113aa8:	21000044 	addi	r4,r4,1
81113aac:	29400044 	addi	r5,r5,1
81113ab0:	21fffb1e 	bne	r4,r7,81113aa0 <__reset+0xfb0f3aa0>
81113ab4:	d8802304 	addi	r2,sp,140
81113ab8:	1505c83a 	sub	r2,r2,r20
81113abc:	d8c02344 	addi	r3,sp,141
81113ac0:	1885883a 	add	r2,r3,r2
81113ac4:	003f7006 	br	81113888 <__reset+0xfb0f3888>
81113ac8:	0005883a 	mov	r2,zero
81113acc:	003f0b06 	br	811136fc <__reset+0xfb0f36fc>
81113ad0:	d9002917 	ldw	r4,164(sp)
81113ad4:	d8c03217 	ldw	r3,200(sp)
81113ad8:	20800044 	addi	r2,r4,1
81113adc:	1885883a 	add	r2,r3,r2
81113ae0:	d8802e15 	stw	r2,184(sp)
81113ae4:	103e870e 	bge	r2,zero,81113504 <__reset+0xfb0f3504>
81113ae8:	0005883a 	mov	r2,zero
81113aec:	003e8506 	br	81113504 <__reset+0xfb0f3504>
81113af0:	01204534 	movhi	r4,33044
81113af4:	21310c84 	addi	r4,r4,-15310
81113af8:	d9002b15 	stw	r4,172(sp)
81113afc:	003cc506 	br	81112e14 <__reset+0xfb0f2e14>
81113b00:	d8c03217 	ldw	r3,200(sp)
81113b04:	18c00044 	addi	r3,r3,1
81113b08:	d8c02e15 	stw	r3,184(sp)
81113b0c:	1805883a 	mov	r2,r3
81113b10:	183fa10e 	bge	r3,zero,81113998 <__reset+0xfb0f3998>
81113b14:	0005883a 	mov	r2,zero
81113b18:	003f9f06 	br	81113998 <__reset+0xfb0f3998>
81113b1c:	d9003617 	ldw	r4,216(sp)
81113b20:	000d883a 	mov	r6,zero
81113b24:	000f883a 	mov	r7,zero
81113b28:	a00b883a 	mov	r5,r20
81113b2c:	d8c03d15 	stw	r3,244(sp)
81113b30:	da003e15 	stw	r8,248(sp)
81113b34:	11246d40 	call	811246d4 <__eqdf2>
81113b38:	d8c03d17 	ldw	r3,244(sp)
81113b3c:	da003e17 	ldw	r8,248(sp)
81113b40:	103f8726 	beq	r2,zero,81113960 <__reset+0xfb0f3960>
81113b44:	00800044 	movi	r2,1
81113b48:	10c7c83a 	sub	r3,r2,r3
81113b4c:	d8c02615 	stw	r3,152(sp)
81113b50:	003f8406 	br	81113964 <__reset+0xfb0f3964>
81113b54:	20000e1e 	bne	r4,zero,81113b90 <___svfprintf_internal_r+0x20d4>
81113b58:	9480004c 	andi	r18,r18,1
81113b5c:	90000c1e 	bne	r18,zero,81113b90 <___svfprintf_internal_r+0x20d4>
81113b60:	00800044 	movi	r2,1
81113b64:	d8802e15 	stw	r2,184(sp)
81113b68:	003e6606 	br	81113504 <__reset+0xfb0f3504>
81113b6c:	00800b44 	movi	r2,45
81113b70:	05adc83a 	sub	r22,zero,r22
81113b74:	d8802305 	stb	r2,140(sp)
81113b78:	003f3b06 	br	81113868 <__reset+0xfb0f3868>
81113b7c:	0005883a 	mov	r2,zero
81113b80:	003f4e06 	br	811138bc <__reset+0xfb0f38bc>
81113b84:	90a4703a 	and	r18,r18,r2
81113b88:	903f4a26 	beq	r18,zero,811138b4 <__reset+0xfb0f38b4>
81113b8c:	003f4606 	br	811138a8 <__reset+0xfb0f38a8>
81113b90:	d8c02917 	ldw	r3,164(sp)
81113b94:	18c00084 	addi	r3,r3,2
81113b98:	d8c02e15 	stw	r3,184(sp)
81113b9c:	1805883a 	mov	r2,r3
81113ba0:	183e580e 	bge	r3,zero,81113504 <__reset+0xfb0f3504>
81113ba4:	003fd006 	br	81113ae8 <__reset+0xfb0f3ae8>
81113ba8:	00800084 	movi	r2,2
81113bac:	10c5c83a 	sub	r2,r2,r3
81113bb0:	003f7506 	br	81113988 <__reset+0xfb0f3988>
81113bb4:	d8802d17 	ldw	r2,180(sp)
81113bb8:	d9002d17 	ldw	r4,180(sp)
81113bbc:	bc400043 	ldbu	r17,1(r23)
81113bc0:	10800017 	ldw	r2,0(r2)
81113bc4:	582f883a 	mov	r23,r11
81113bc8:	d8802915 	stw	r2,164(sp)
81113bcc:	20800104 	addi	r2,r4,4
81113bd0:	d9002917 	ldw	r4,164(sp)
81113bd4:	d8802d15 	stw	r2,180(sp)
81113bd8:	203df00e 	bge	r4,zero,8111339c <__reset+0xfb0f339c>
81113bdc:	8c403fcc 	andi	r17,r17,255
81113be0:	00bfffc4 	movi	r2,-1
81113be4:	8c40201c 	xori	r17,r17,128
81113be8:	d8802915 	stw	r2,164(sp)
81113bec:	8c7fe004 	addi	r17,r17,-128
81113bf0:	00380806 	br	81111c14 <__reset+0xfb0f1c14>
81113bf4:	9080004c 	andi	r2,r18,1
81113bf8:	0039883a 	mov	fp,zero
81113bfc:	10000726 	beq	r2,zero,81113c1c <___svfprintf_internal_r+0x2160>
81113c00:	d8c02817 	ldw	r3,160(sp)
81113c04:	dc001dc4 	addi	r16,sp,119
81113c08:	00800c04 	movi	r2,48
81113c0c:	1c07c83a 	sub	r3,r3,r16
81113c10:	d8801dc5 	stb	r2,119(sp)
81113c14:	d8c02e15 	stw	r3,184(sp)
81113c18:	00395206 	br	81112164 <__reset+0xfb0f2164>
81113c1c:	d8002e15 	stw	zero,184(sp)
81113c20:	dc001e04 	addi	r16,sp,120
81113c24:	00394f06 	br	81112164 <__reset+0xfb0f2164>
81113c28:	0005883a 	mov	r2,zero
81113c2c:	003e3206 	br	811134f8 <__reset+0xfb0f34f8>
81113c30:	dd802617 	ldw	r22,152(sp)
81113c34:	003f0606 	br	81113850 <__reset+0xfb0f3850>
81113c38:	d9c02785 	stb	r7,158(sp)
81113c3c:	003a5106 	br	81112584 <__reset+0xfb0f2584>
81113c40:	d9c02785 	stb	r7,158(sp)
81113c44:	003a3706 	br	81112524 <__reset+0xfb0f2524>
81113c48:	0005883a 	mov	r2,zero
81113c4c:	003f5e06 	br	811139c8 <__reset+0xfb0f39c8>
81113c50:	d9c02785 	stb	r7,158(sp)
81113c54:	00391706 	br	811120b4 <__reset+0xfb0f20b4>
81113c58:	d9c02785 	stb	r7,158(sp)
81113c5c:	0038e606 	br	81111ff8 <__reset+0xfb0f1ff8>
81113c60:	d8802344 	addi	r2,sp,141
81113c64:	003f0806 	br	81113888 <__reset+0xfb0f3888>
81113c68:	d9c02785 	stb	r7,158(sp)
81113c6c:	0038b706 	br	81111f4c <__reset+0xfb0f1f4c>
81113c70:	d9c02785 	stb	r7,158(sp)
81113c74:	003adc06 	br	811127e8 <__reset+0xfb0f27e8>
81113c78:	d9403917 	ldw	r5,228(sp)
81113c7c:	00800304 	movi	r2,12
81113c80:	28800015 	stw	r2,0(r5)
81113c84:	00bfffc4 	movi	r2,-1
81113c88:	00387806 	br	81111e6c <__reset+0xfb0f1e6c>
81113c8c:	d9c02785 	stb	r7,158(sp)
81113c90:	003abf06 	br	81112790 <__reset+0xfb0f2790>
81113c94:	d9c02785 	stb	r7,158(sp)
81113c98:	003a9b06 	br	81112708 <__reset+0xfb0f2708>

81113c9c <___vfprintf_internal_r>:
81113c9c:	deffb804 	addi	sp,sp,-288
81113ca0:	de00012e 	bgeu	sp,et,81113ca8 <___vfprintf_internal_r+0xc>
81113ca4:	003b68fa 	trap	3
81113ca8:	dfc04715 	stw	ra,284(sp)
81113cac:	ddc04515 	stw	r23,276(sp)
81113cb0:	dd404315 	stw	r21,268(sp)
81113cb4:	d9002c15 	stw	r4,176(sp)
81113cb8:	282f883a 	mov	r23,r5
81113cbc:	302b883a 	mov	r21,r6
81113cc0:	d9c02d15 	stw	r7,180(sp)
81113cc4:	df004615 	stw	fp,280(sp)
81113cc8:	dd804415 	stw	r22,272(sp)
81113ccc:	dd004215 	stw	r20,264(sp)
81113cd0:	dcc04115 	stw	r19,260(sp)
81113cd4:	dc804015 	stw	r18,256(sp)
81113cd8:	dc403f15 	stw	r17,252(sp)
81113cdc:	dc003e15 	stw	r16,248(sp)
81113ce0:	111a8440 	call	8111a844 <_localeconv_r>
81113ce4:	10800017 	ldw	r2,0(r2)
81113ce8:	1009883a 	mov	r4,r2
81113cec:	d8803415 	stw	r2,208(sp)
81113cf0:	11117c80 	call	811117c8 <strlen>
81113cf4:	d8803715 	stw	r2,220(sp)
81113cf8:	d8802c17 	ldw	r2,176(sp)
81113cfc:	10000226 	beq	r2,zero,81113d08 <___vfprintf_internal_r+0x6c>
81113d00:	10800e17 	ldw	r2,56(r2)
81113d04:	1000f926 	beq	r2,zero,811140ec <___vfprintf_internal_r+0x450>
81113d08:	b880030b 	ldhu	r2,12(r23)
81113d0c:	10c8000c 	andi	r3,r2,8192
81113d10:	1800061e 	bne	r3,zero,81113d2c <___vfprintf_internal_r+0x90>
81113d14:	b9001917 	ldw	r4,100(r23)
81113d18:	00f7ffc4 	movi	r3,-8193
81113d1c:	10880014 	ori	r2,r2,8192
81113d20:	20c6703a 	and	r3,r4,r3
81113d24:	b880030d 	sth	r2,12(r23)
81113d28:	b8c01915 	stw	r3,100(r23)
81113d2c:	10c0020c 	andi	r3,r2,8
81113d30:	1800c126 	beq	r3,zero,81114038 <___vfprintf_internal_r+0x39c>
81113d34:	b8c00417 	ldw	r3,16(r23)
81113d38:	1800bf26 	beq	r3,zero,81114038 <___vfprintf_internal_r+0x39c>
81113d3c:	1080068c 	andi	r2,r2,26
81113d40:	00c00284 	movi	r3,10
81113d44:	10c0c426 	beq	r2,r3,81114058 <___vfprintf_internal_r+0x3bc>
81113d48:	d8c00404 	addi	r3,sp,16
81113d4c:	05204534 	movhi	r20,33044
81113d50:	d9001e04 	addi	r4,sp,120
81113d54:	a5311484 	addi	r20,r20,-15278
81113d58:	d8c01e15 	stw	r3,120(sp)
81113d5c:	d8002015 	stw	zero,128(sp)
81113d60:	d8001f15 	stw	zero,124(sp)
81113d64:	d8003315 	stw	zero,204(sp)
81113d68:	d8003615 	stw	zero,216(sp)
81113d6c:	d8003815 	stw	zero,224(sp)
81113d70:	1811883a 	mov	r8,r3
81113d74:	d8003915 	stw	zero,228(sp)
81113d78:	d8003a15 	stw	zero,232(sp)
81113d7c:	d8002f15 	stw	zero,188(sp)
81113d80:	d9002815 	stw	r4,160(sp)
81113d84:	a8800007 	ldb	r2,0(r21)
81113d88:	10027b26 	beq	r2,zero,81114778 <___vfprintf_internal_r+0xadc>
81113d8c:	00c00944 	movi	r3,37
81113d90:	a821883a 	mov	r16,r21
81113d94:	10c0021e 	bne	r2,r3,81113da0 <___vfprintf_internal_r+0x104>
81113d98:	00001406 	br	81113dec <___vfprintf_internal_r+0x150>
81113d9c:	10c00326 	beq	r2,r3,81113dac <___vfprintf_internal_r+0x110>
81113da0:	84000044 	addi	r16,r16,1
81113da4:	80800007 	ldb	r2,0(r16)
81113da8:	103ffc1e 	bne	r2,zero,81113d9c <__reset+0xfb0f3d9c>
81113dac:	8563c83a 	sub	r17,r16,r21
81113db0:	88000e26 	beq	r17,zero,81113dec <___vfprintf_internal_r+0x150>
81113db4:	d8c02017 	ldw	r3,128(sp)
81113db8:	d8801f17 	ldw	r2,124(sp)
81113dbc:	45400015 	stw	r21,0(r8)
81113dc0:	1c47883a 	add	r3,r3,r17
81113dc4:	10800044 	addi	r2,r2,1
81113dc8:	d8c02015 	stw	r3,128(sp)
81113dcc:	44400115 	stw	r17,4(r8)
81113dd0:	d8801f15 	stw	r2,124(sp)
81113dd4:	00c001c4 	movi	r3,7
81113dd8:	1880a716 	blt	r3,r2,81114078 <___vfprintf_internal_r+0x3dc>
81113ddc:	42000204 	addi	r8,r8,8
81113de0:	d9402f17 	ldw	r5,188(sp)
81113de4:	2c4b883a 	add	r5,r5,r17
81113de8:	d9402f15 	stw	r5,188(sp)
81113dec:	80800007 	ldb	r2,0(r16)
81113df0:	1000a826 	beq	r2,zero,81114094 <___vfprintf_internal_r+0x3f8>
81113df4:	84400047 	ldb	r17,1(r16)
81113df8:	00bfffc4 	movi	r2,-1
81113dfc:	85400044 	addi	r21,r16,1
81113e00:	d8002785 	stb	zero,158(sp)
81113e04:	0007883a 	mov	r3,zero
81113e08:	000f883a 	mov	r7,zero
81113e0c:	d8802915 	stw	r2,164(sp)
81113e10:	d8003115 	stw	zero,196(sp)
81113e14:	0025883a 	mov	r18,zero
81113e18:	01401604 	movi	r5,88
81113e1c:	01800244 	movi	r6,9
81113e20:	02800a84 	movi	r10,42
81113e24:	02401b04 	movi	r9,108
81113e28:	ad400044 	addi	r21,r21,1
81113e2c:	88bff804 	addi	r2,r17,-32
81113e30:	28830436 	bltu	r5,r2,81114a44 <___vfprintf_internal_r+0xda8>
81113e34:	100490ba 	slli	r2,r2,2
81113e38:	01204474 	movhi	r4,33041
81113e3c:	210f9304 	addi	r4,r4,15948
81113e40:	1105883a 	add	r2,r2,r4
81113e44:	10800017 	ldw	r2,0(r2)
81113e48:	1000683a 	jmp	r2
81113e4c:	81114964 	muli	r4,r16,17701
81113e50:	81114a44 	addi	r4,r16,17705
81113e54:	81114a44 	addi	r4,r16,17705
81113e58:	81114984 	addi	r4,r16,17702
81113e5c:	81114a44 	addi	r4,r16,17705
81113e60:	81114a44 	addi	r4,r16,17705
81113e64:	81114a44 	addi	r4,r16,17705
81113e68:	81114a44 	addi	r4,r16,17705
81113e6c:	81114a44 	addi	r4,r16,17705
81113e70:	81114a44 	addi	r4,r16,17705
81113e74:	811140f8 	rdprs	r4,r16,17667
81113e78:	811148a0 	cmpeqi	r4,r16,17698
81113e7c:	81114a44 	addi	r4,r16,17705
81113e80:	81113fc0 	call	881113fc <__reset+0x20f13fc>
81113e84:	81114120 	cmpeqi	r4,r16,17668
81113e88:	81114a44 	addi	r4,r16,17705
81113e8c:	81114160 	cmpeqi	r4,r16,17669
81113e90:	8111416c 	andhi	r4,r16,17669
81113e94:	8111416c 	andhi	r4,r16,17669
81113e98:	8111416c 	andhi	r4,r16,17669
81113e9c:	8111416c 	andhi	r4,r16,17669
81113ea0:	8111416c 	andhi	r4,r16,17669
81113ea4:	8111416c 	andhi	r4,r16,17669
81113ea8:	8111416c 	andhi	r4,r16,17669
81113eac:	8111416c 	andhi	r4,r16,17669
81113eb0:	8111416c 	andhi	r4,r16,17669
81113eb4:	81114a44 	addi	r4,r16,17705
81113eb8:	81114a44 	addi	r4,r16,17705
81113ebc:	81114a44 	addi	r4,r16,17705
81113ec0:	81114a44 	addi	r4,r16,17705
81113ec4:	81114a44 	addi	r4,r16,17705
81113ec8:	81114a44 	addi	r4,r16,17705
81113ecc:	81114a44 	addi	r4,r16,17705
81113ed0:	81114a44 	addi	r4,r16,17705
81113ed4:	81114a44 	addi	r4,r16,17705
81113ed8:	81114a44 	addi	r4,r16,17705
81113edc:	811141a0 	cmpeqi	r4,r16,17670
81113ee0:	8111425c 	xori	r4,r16,17673
81113ee4:	81114a44 	addi	r4,r16,17705
81113ee8:	8111425c 	xori	r4,r16,17673
81113eec:	81114a44 	addi	r4,r16,17705
81113ef0:	81114a44 	addi	r4,r16,17705
81113ef4:	81114a44 	addi	r4,r16,17705
81113ef8:	81114a44 	addi	r4,r16,17705
81113efc:	811142fc 	xorhi	r4,r16,17675
81113f00:	81114a44 	addi	r4,r16,17705
81113f04:	81114a44 	addi	r4,r16,17705
81113f08:	81114308 	cmpgei	r4,r16,17676
81113f0c:	81114a44 	addi	r4,r16,17705
81113f10:	81114a44 	addi	r4,r16,17705
81113f14:	81114a44 	addi	r4,r16,17705
81113f18:	81114a44 	addi	r4,r16,17705
81113f1c:	81114a44 	addi	r4,r16,17705
81113f20:	81114780 	call	88111478 <__reset+0x20f1478>
81113f24:	81114a44 	addi	r4,r16,17705
81113f28:	81114a44 	addi	r4,r16,17705
81113f2c:	811147e0 	cmpeqi	r4,r16,17695
81113f30:	81114a44 	addi	r4,r16,17705
81113f34:	81114a44 	addi	r4,r16,17705
81113f38:	81114a44 	addi	r4,r16,17705
81113f3c:	81114a44 	addi	r4,r16,17705
81113f40:	81114a44 	addi	r4,r16,17705
81113f44:	81114a44 	addi	r4,r16,17705
81113f48:	81114a44 	addi	r4,r16,17705
81113f4c:	81114a44 	addi	r4,r16,17705
81113f50:	81114a44 	addi	r4,r16,17705
81113f54:	81114a44 	addi	r4,r16,17705
81113f58:	811149f0 	cmpltui	r4,r16,17703
81113f5c:	81114990 	cmplti	r4,r16,17702
81113f60:	8111425c 	xori	r4,r16,17673
81113f64:	8111425c 	xori	r4,r16,17673
81113f68:	8111425c 	xori	r4,r16,17673
81113f6c:	811149a0 	cmpeqi	r4,r16,17702
81113f70:	81114990 	cmplti	r4,r16,17702
81113f74:	81114a44 	addi	r4,r16,17705
81113f78:	81114a44 	addi	r4,r16,17705
81113f7c:	811149ac 	andhi	r4,r16,17702
81113f80:	81114a44 	addi	r4,r16,17705
81113f84:	811149bc 	xorhi	r4,r16,17702
81113f88:	81114890 	cmplti	r4,r16,17698
81113f8c:	81113fcc 	andi	r4,r16,17663
81113f90:	811148b0 	cmpltui	r4,r16,17698
81113f94:	81114a44 	addi	r4,r16,17705
81113f98:	811148bc 	xorhi	r4,r16,17698
81113f9c:	81114a44 	addi	r4,r16,17705
81113fa0:	81114918 	cmpnei	r4,r16,17700
81113fa4:	81114a44 	addi	r4,r16,17705
81113fa8:	81114a44 	addi	r4,r16,17705
81113fac:	81114928 	cmpgeui	r4,r16,17700
81113fb0:	d9003117 	ldw	r4,196(sp)
81113fb4:	d8802d15 	stw	r2,180(sp)
81113fb8:	0109c83a 	sub	r4,zero,r4
81113fbc:	d9003115 	stw	r4,196(sp)
81113fc0:	94800114 	ori	r18,r18,4
81113fc4:	ac400007 	ldb	r17,0(r21)
81113fc8:	003f9706 	br	81113e28 <__reset+0xfb0f3e28>
81113fcc:	00800c04 	movi	r2,48
81113fd0:	d9002d17 	ldw	r4,180(sp)
81113fd4:	d9402917 	ldw	r5,164(sp)
81113fd8:	d8802705 	stb	r2,156(sp)
81113fdc:	00801e04 	movi	r2,120
81113fe0:	d8802745 	stb	r2,157(sp)
81113fe4:	d8002785 	stb	zero,158(sp)
81113fe8:	20c00104 	addi	r3,r4,4
81113fec:	24c00017 	ldw	r19,0(r4)
81113ff0:	002d883a 	mov	r22,zero
81113ff4:	90800094 	ori	r2,r18,2
81113ff8:	28029a16 	blt	r5,zero,81114a64 <___vfprintf_internal_r+0xdc8>
81113ffc:	00bfdfc4 	movi	r2,-129
81114000:	90a4703a 	and	r18,r18,r2
81114004:	d8c02d15 	stw	r3,180(sp)
81114008:	94800094 	ori	r18,r18,2
8111400c:	9802871e 	bne	r19,zero,81114a2c <___vfprintf_internal_r+0xd90>
81114010:	00a04534 	movhi	r2,33044
81114014:	10b10504 	addi	r2,r2,-15340
81114018:	d8803915 	stw	r2,228(sp)
8111401c:	04401e04 	movi	r17,120
81114020:	d8802917 	ldw	r2,164(sp)
81114024:	0039883a 	mov	fp,zero
81114028:	1001e926 	beq	r2,zero,811147d0 <___vfprintf_internal_r+0xb34>
8111402c:	0027883a 	mov	r19,zero
81114030:	002d883a 	mov	r22,zero
81114034:	00020506 	br	8111484c <___vfprintf_internal_r+0xbb0>
81114038:	d9002c17 	ldw	r4,176(sp)
8111403c:	b80b883a 	mov	r5,r23
81114040:	11178880 	call	81117888 <__swsetup_r>
81114044:	1005ac1e 	bne	r2,zero,811156f8 <___vfprintf_internal_r+0x1a5c>
81114048:	b880030b 	ldhu	r2,12(r23)
8111404c:	00c00284 	movi	r3,10
81114050:	1080068c 	andi	r2,r2,26
81114054:	10ff3c1e 	bne	r2,r3,81113d48 <__reset+0xfb0f3d48>
81114058:	b880038f 	ldh	r2,14(r23)
8111405c:	103f3a16 	blt	r2,zero,81113d48 <__reset+0xfb0f3d48>
81114060:	d9c02d17 	ldw	r7,180(sp)
81114064:	d9002c17 	ldw	r4,176(sp)
81114068:	a80d883a 	mov	r6,r21
8111406c:	b80b883a 	mov	r5,r23
81114070:	1115eb80 	call	81115eb8 <__sbprintf>
81114074:	00001106 	br	811140bc <___vfprintf_internal_r+0x420>
81114078:	d9002c17 	ldw	r4,176(sp)
8111407c:	d9801e04 	addi	r6,sp,120
81114080:	b80b883a 	mov	r5,r23
81114084:	111fd2c0 	call	8111fd2c <__sprint_r>
81114088:	1000081e 	bne	r2,zero,811140ac <___vfprintf_internal_r+0x410>
8111408c:	da000404 	addi	r8,sp,16
81114090:	003f5306 	br	81113de0 <__reset+0xfb0f3de0>
81114094:	d8802017 	ldw	r2,128(sp)
81114098:	10000426 	beq	r2,zero,811140ac <___vfprintf_internal_r+0x410>
8111409c:	d9002c17 	ldw	r4,176(sp)
811140a0:	d9801e04 	addi	r6,sp,120
811140a4:	b80b883a 	mov	r5,r23
811140a8:	111fd2c0 	call	8111fd2c <__sprint_r>
811140ac:	b880030b 	ldhu	r2,12(r23)
811140b0:	1080100c 	andi	r2,r2,64
811140b4:	1005901e 	bne	r2,zero,811156f8 <___vfprintf_internal_r+0x1a5c>
811140b8:	d8802f17 	ldw	r2,188(sp)
811140bc:	dfc04717 	ldw	ra,284(sp)
811140c0:	df004617 	ldw	fp,280(sp)
811140c4:	ddc04517 	ldw	r23,276(sp)
811140c8:	dd804417 	ldw	r22,272(sp)
811140cc:	dd404317 	ldw	r21,268(sp)
811140d0:	dd004217 	ldw	r20,264(sp)
811140d4:	dcc04117 	ldw	r19,260(sp)
811140d8:	dc804017 	ldw	r18,256(sp)
811140dc:	dc403f17 	ldw	r17,252(sp)
811140e0:	dc003e17 	ldw	r16,248(sp)
811140e4:	dec04804 	addi	sp,sp,288
811140e8:	f800283a 	ret
811140ec:	d9002c17 	ldw	r4,176(sp)
811140f0:	11198f80 	call	811198f8 <__sinit>
811140f4:	003f0406 	br	81113d08 <__reset+0xfb0f3d08>
811140f8:	d8802d17 	ldw	r2,180(sp)
811140fc:	d9002d17 	ldw	r4,180(sp)
81114100:	10800017 	ldw	r2,0(r2)
81114104:	d8803115 	stw	r2,196(sp)
81114108:	20800104 	addi	r2,r4,4
8111410c:	d9003117 	ldw	r4,196(sp)
81114110:	203fa716 	blt	r4,zero,81113fb0 <__reset+0xfb0f3fb0>
81114114:	d8802d15 	stw	r2,180(sp)
81114118:	ac400007 	ldb	r17,0(r21)
8111411c:	003f4206 	br	81113e28 <__reset+0xfb0f3e28>
81114120:	ac400007 	ldb	r17,0(r21)
81114124:	aac00044 	addi	r11,r21,1
81114128:	8a872826 	beq	r17,r10,81115dcc <___vfprintf_internal_r+0x2130>
8111412c:	88bff404 	addi	r2,r17,-48
81114130:	0009883a 	mov	r4,zero
81114134:	30867d36 	bltu	r6,r2,81115b2c <___vfprintf_internal_r+0x1e90>
81114138:	5c400007 	ldb	r17,0(r11)
8111413c:	210002a4 	muli	r4,r4,10
81114140:	5d400044 	addi	r21,r11,1
81114144:	a817883a 	mov	r11,r21
81114148:	2089883a 	add	r4,r4,r2
8111414c:	88bff404 	addi	r2,r17,-48
81114150:	30bff92e 	bgeu	r6,r2,81114138 <__reset+0xfb0f4138>
81114154:	2005c916 	blt	r4,zero,8111587c <___vfprintf_internal_r+0x1be0>
81114158:	d9002915 	stw	r4,164(sp)
8111415c:	003f3306 	br	81113e2c <__reset+0xfb0f3e2c>
81114160:	94802014 	ori	r18,r18,128
81114164:	ac400007 	ldb	r17,0(r21)
81114168:	003f2f06 	br	81113e28 <__reset+0xfb0f3e28>
8111416c:	a809883a 	mov	r4,r21
81114170:	d8003115 	stw	zero,196(sp)
81114174:	88bff404 	addi	r2,r17,-48
81114178:	0017883a 	mov	r11,zero
8111417c:	24400007 	ldb	r17,0(r4)
81114180:	5ac002a4 	muli	r11,r11,10
81114184:	ad400044 	addi	r21,r21,1
81114188:	a809883a 	mov	r4,r21
8111418c:	12d7883a 	add	r11,r2,r11
81114190:	88bff404 	addi	r2,r17,-48
81114194:	30bff92e 	bgeu	r6,r2,8111417c <__reset+0xfb0f417c>
81114198:	dac03115 	stw	r11,196(sp)
8111419c:	003f2306 	br	81113e2c <__reset+0xfb0f3e2c>
811141a0:	18c03fcc 	andi	r3,r3,255
811141a4:	18072b1e 	bne	r3,zero,81115e54 <___vfprintf_internal_r+0x21b8>
811141a8:	94800414 	ori	r18,r18,16
811141ac:	9080080c 	andi	r2,r18,32
811141b0:	10037b26 	beq	r2,zero,81114fa0 <___vfprintf_internal_r+0x1304>
811141b4:	d9402d17 	ldw	r5,180(sp)
811141b8:	28800117 	ldw	r2,4(r5)
811141bc:	2cc00017 	ldw	r19,0(r5)
811141c0:	29400204 	addi	r5,r5,8
811141c4:	d9402d15 	stw	r5,180(sp)
811141c8:	102d883a 	mov	r22,r2
811141cc:	10044b16 	blt	r2,zero,811152fc <___vfprintf_internal_r+0x1660>
811141d0:	d9402917 	ldw	r5,164(sp)
811141d4:	df002783 	ldbu	fp,158(sp)
811141d8:	2803bc16 	blt	r5,zero,811150cc <___vfprintf_internal_r+0x1430>
811141dc:	00ffdfc4 	movi	r3,-129
811141e0:	9d84b03a 	or	r2,r19,r22
811141e4:	90e4703a 	and	r18,r18,r3
811141e8:	10017726 	beq	r2,zero,811147c8 <___vfprintf_internal_r+0xb2c>
811141ec:	b0038326 	beq	r22,zero,81114ffc <___vfprintf_internal_r+0x1360>
811141f0:	dc402a15 	stw	r17,168(sp)
811141f4:	dc001e04 	addi	r16,sp,120
811141f8:	b023883a 	mov	r17,r22
811141fc:	402d883a 	mov	r22,r8
81114200:	9809883a 	mov	r4,r19
81114204:	880b883a 	mov	r5,r17
81114208:	01800284 	movi	r6,10
8111420c:	000f883a 	mov	r7,zero
81114210:	1122c400 	call	81122c40 <__umoddi3>
81114214:	10800c04 	addi	r2,r2,48
81114218:	843fffc4 	addi	r16,r16,-1
8111421c:	9809883a 	mov	r4,r19
81114220:	880b883a 	mov	r5,r17
81114224:	80800005 	stb	r2,0(r16)
81114228:	01800284 	movi	r6,10
8111422c:	000f883a 	mov	r7,zero
81114230:	11226c00 	call	811226c0 <__udivdi3>
81114234:	1027883a 	mov	r19,r2
81114238:	10c4b03a 	or	r2,r2,r3
8111423c:	1823883a 	mov	r17,r3
81114240:	103fef1e 	bne	r2,zero,81114200 <__reset+0xfb0f4200>
81114244:	d8c02817 	ldw	r3,160(sp)
81114248:	dc402a17 	ldw	r17,168(sp)
8111424c:	b011883a 	mov	r8,r22
81114250:	1c07c83a 	sub	r3,r3,r16
81114254:	d8c02e15 	stw	r3,184(sp)
81114258:	00005906 	br	811143c0 <___vfprintf_internal_r+0x724>
8111425c:	18c03fcc 	andi	r3,r3,255
81114260:	1806fa1e 	bne	r3,zero,81115e4c <___vfprintf_internal_r+0x21b0>
81114264:	9080020c 	andi	r2,r18,8
81114268:	10048a26 	beq	r2,zero,81115494 <___vfprintf_internal_r+0x17f8>
8111426c:	d8c02d17 	ldw	r3,180(sp)
81114270:	d9002d17 	ldw	r4,180(sp)
81114274:	d9402d17 	ldw	r5,180(sp)
81114278:	18c00017 	ldw	r3,0(r3)
8111427c:	21000117 	ldw	r4,4(r4)
81114280:	29400204 	addi	r5,r5,8
81114284:	d8c03615 	stw	r3,216(sp)
81114288:	d9003815 	stw	r4,224(sp)
8111428c:	d9402d15 	stw	r5,180(sp)
81114290:	d9003617 	ldw	r4,216(sp)
81114294:	d9403817 	ldw	r5,224(sp)
81114298:	da003d15 	stw	r8,244(sp)
8111429c:	04000044 	movi	r16,1
811142a0:	111c3900 	call	8111c390 <__fpclassifyd>
811142a4:	da003d17 	ldw	r8,244(sp)
811142a8:	14041f1e 	bne	r2,r16,81115328 <___vfprintf_internal_r+0x168c>
811142ac:	d9003617 	ldw	r4,216(sp)
811142b0:	d9403817 	ldw	r5,224(sp)
811142b4:	000d883a 	mov	r6,zero
811142b8:	000f883a 	mov	r7,zero
811142bc:	11248380 	call	81124838 <__ledf2>
811142c0:	da003d17 	ldw	r8,244(sp)
811142c4:	1005be16 	blt	r2,zero,811159c0 <___vfprintf_internal_r+0x1d24>
811142c8:	df002783 	ldbu	fp,158(sp)
811142cc:	008011c4 	movi	r2,71
811142d0:	1445330e 	bge	r2,r17,811157a0 <___vfprintf_internal_r+0x1b04>
811142d4:	04204534 	movhi	r16,33044
811142d8:	8430fd04 	addi	r16,r16,-15372
811142dc:	00c000c4 	movi	r3,3
811142e0:	00bfdfc4 	movi	r2,-129
811142e4:	d8c02a15 	stw	r3,168(sp)
811142e8:	90a4703a 	and	r18,r18,r2
811142ec:	d8c02e15 	stw	r3,184(sp)
811142f0:	d8002915 	stw	zero,164(sp)
811142f4:	d8003215 	stw	zero,200(sp)
811142f8:	00003706 	br	811143d8 <___vfprintf_internal_r+0x73c>
811142fc:	94800214 	ori	r18,r18,8
81114300:	ac400007 	ldb	r17,0(r21)
81114304:	003ec806 	br	81113e28 <__reset+0xfb0f3e28>
81114308:	18c03fcc 	andi	r3,r3,255
8111430c:	1806db1e 	bne	r3,zero,81115e7c <___vfprintf_internal_r+0x21e0>
81114310:	94800414 	ori	r18,r18,16
81114314:	9080080c 	andi	r2,r18,32
81114318:	1002d826 	beq	r2,zero,81114e7c <___vfprintf_internal_r+0x11e0>
8111431c:	d9402d17 	ldw	r5,180(sp)
81114320:	d8c02917 	ldw	r3,164(sp)
81114324:	d8002785 	stb	zero,158(sp)
81114328:	28800204 	addi	r2,r5,8
8111432c:	2cc00017 	ldw	r19,0(r5)
81114330:	2d800117 	ldw	r22,4(r5)
81114334:	18048f16 	blt	r3,zero,81115574 <___vfprintf_internal_r+0x18d8>
81114338:	013fdfc4 	movi	r4,-129
8111433c:	9d86b03a 	or	r3,r19,r22
81114340:	d8802d15 	stw	r2,180(sp)
81114344:	9124703a 	and	r18,r18,r4
81114348:	1802d91e 	bne	r3,zero,81114eb0 <___vfprintf_internal_r+0x1214>
8111434c:	d8c02917 	ldw	r3,164(sp)
81114350:	0039883a 	mov	fp,zero
81114354:	1805c326 	beq	r3,zero,81115a64 <___vfprintf_internal_r+0x1dc8>
81114358:	0027883a 	mov	r19,zero
8111435c:	002d883a 	mov	r22,zero
81114360:	dc001e04 	addi	r16,sp,120
81114364:	9806d0fa 	srli	r3,r19,3
81114368:	b008977a 	slli	r4,r22,29
8111436c:	b02cd0fa 	srli	r22,r22,3
81114370:	9cc001cc 	andi	r19,r19,7
81114374:	98800c04 	addi	r2,r19,48
81114378:	843fffc4 	addi	r16,r16,-1
8111437c:	20e6b03a 	or	r19,r4,r3
81114380:	80800005 	stb	r2,0(r16)
81114384:	9d86b03a 	or	r3,r19,r22
81114388:	183ff61e 	bne	r3,zero,81114364 <__reset+0xfb0f4364>
8111438c:	90c0004c 	andi	r3,r18,1
81114390:	18013b26 	beq	r3,zero,81114880 <___vfprintf_internal_r+0xbe4>
81114394:	10803fcc 	andi	r2,r2,255
81114398:	1080201c 	xori	r2,r2,128
8111439c:	10bfe004 	addi	r2,r2,-128
811143a0:	00c00c04 	movi	r3,48
811143a4:	10c13626 	beq	r2,r3,81114880 <___vfprintf_internal_r+0xbe4>
811143a8:	80ffffc5 	stb	r3,-1(r16)
811143ac:	d8c02817 	ldw	r3,160(sp)
811143b0:	80bfffc4 	addi	r2,r16,-1
811143b4:	1021883a 	mov	r16,r2
811143b8:	1887c83a 	sub	r3,r3,r2
811143bc:	d8c02e15 	stw	r3,184(sp)
811143c0:	d8802e17 	ldw	r2,184(sp)
811143c4:	d9002917 	ldw	r4,164(sp)
811143c8:	1100010e 	bge	r2,r4,811143d0 <___vfprintf_internal_r+0x734>
811143cc:	2005883a 	mov	r2,r4
811143d0:	d8802a15 	stw	r2,168(sp)
811143d4:	d8003215 	stw	zero,200(sp)
811143d8:	e7003fcc 	andi	fp,fp,255
811143dc:	e700201c 	xori	fp,fp,128
811143e0:	e73fe004 	addi	fp,fp,-128
811143e4:	e0000326 	beq	fp,zero,811143f4 <___vfprintf_internal_r+0x758>
811143e8:	d8c02a17 	ldw	r3,168(sp)
811143ec:	18c00044 	addi	r3,r3,1
811143f0:	d8c02a15 	stw	r3,168(sp)
811143f4:	90c0008c 	andi	r3,r18,2
811143f8:	d8c02b15 	stw	r3,172(sp)
811143fc:	18000326 	beq	r3,zero,8111440c <___vfprintf_internal_r+0x770>
81114400:	d8c02a17 	ldw	r3,168(sp)
81114404:	18c00084 	addi	r3,r3,2
81114408:	d8c02a15 	stw	r3,168(sp)
8111440c:	90c0210c 	andi	r3,r18,132
81114410:	d8c03015 	stw	r3,192(sp)
81114414:	1801a31e 	bne	r3,zero,81114aa4 <___vfprintf_internal_r+0xe08>
81114418:	d9003117 	ldw	r4,196(sp)
8111441c:	d8c02a17 	ldw	r3,168(sp)
81114420:	20e7c83a 	sub	r19,r4,r3
81114424:	04c19f0e 	bge	zero,r19,81114aa4 <___vfprintf_internal_r+0xe08>
81114428:	02400404 	movi	r9,16
8111442c:	d8c02017 	ldw	r3,128(sp)
81114430:	d8801f17 	ldw	r2,124(sp)
81114434:	4cc50d0e 	bge	r9,r19,8111586c <___vfprintf_internal_r+0x1bd0>
81114438:	01604534 	movhi	r5,33044
8111443c:	29711884 	addi	r5,r5,-15262
81114440:	dc403b15 	stw	r17,236(sp)
81114444:	d9403515 	stw	r5,212(sp)
81114448:	9823883a 	mov	r17,r19
8111444c:	482d883a 	mov	r22,r9
81114450:	9027883a 	mov	r19,r18
81114454:	070001c4 	movi	fp,7
81114458:	8025883a 	mov	r18,r16
8111445c:	dc002c17 	ldw	r16,176(sp)
81114460:	00000306 	br	81114470 <___vfprintf_internal_r+0x7d4>
81114464:	8c7ffc04 	addi	r17,r17,-16
81114468:	42000204 	addi	r8,r8,8
8111446c:	b440130e 	bge	r22,r17,811144bc <___vfprintf_internal_r+0x820>
81114470:	01204534 	movhi	r4,33044
81114474:	18c00404 	addi	r3,r3,16
81114478:	10800044 	addi	r2,r2,1
8111447c:	21311884 	addi	r4,r4,-15262
81114480:	41000015 	stw	r4,0(r8)
81114484:	45800115 	stw	r22,4(r8)
81114488:	d8c02015 	stw	r3,128(sp)
8111448c:	d8801f15 	stw	r2,124(sp)
81114490:	e0bff40e 	bge	fp,r2,81114464 <__reset+0xfb0f4464>
81114494:	d9801e04 	addi	r6,sp,120
81114498:	b80b883a 	mov	r5,r23
8111449c:	8009883a 	mov	r4,r16
811144a0:	111fd2c0 	call	8111fd2c <__sprint_r>
811144a4:	103f011e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811144a8:	8c7ffc04 	addi	r17,r17,-16
811144ac:	d8c02017 	ldw	r3,128(sp)
811144b0:	d8801f17 	ldw	r2,124(sp)
811144b4:	da000404 	addi	r8,sp,16
811144b8:	b47fed16 	blt	r22,r17,81114470 <__reset+0xfb0f4470>
811144bc:	9021883a 	mov	r16,r18
811144c0:	9825883a 	mov	r18,r19
811144c4:	8827883a 	mov	r19,r17
811144c8:	dc403b17 	ldw	r17,236(sp)
811144cc:	d9403517 	ldw	r5,212(sp)
811144d0:	98c7883a 	add	r3,r19,r3
811144d4:	10800044 	addi	r2,r2,1
811144d8:	41400015 	stw	r5,0(r8)
811144dc:	44c00115 	stw	r19,4(r8)
811144e0:	d8c02015 	stw	r3,128(sp)
811144e4:	d8801f15 	stw	r2,124(sp)
811144e8:	010001c4 	movi	r4,7
811144ec:	2082a316 	blt	r4,r2,81114f7c <___vfprintf_internal_r+0x12e0>
811144f0:	df002787 	ldb	fp,158(sp)
811144f4:	42000204 	addi	r8,r8,8
811144f8:	e0000c26 	beq	fp,zero,8111452c <___vfprintf_internal_r+0x890>
811144fc:	d8801f17 	ldw	r2,124(sp)
81114500:	d9002784 	addi	r4,sp,158
81114504:	18c00044 	addi	r3,r3,1
81114508:	10800044 	addi	r2,r2,1
8111450c:	41000015 	stw	r4,0(r8)
81114510:	01000044 	movi	r4,1
81114514:	41000115 	stw	r4,4(r8)
81114518:	d8c02015 	stw	r3,128(sp)
8111451c:	d8801f15 	stw	r2,124(sp)
81114520:	010001c4 	movi	r4,7
81114524:	20823c16 	blt	r4,r2,81114e18 <___vfprintf_internal_r+0x117c>
81114528:	42000204 	addi	r8,r8,8
8111452c:	d8802b17 	ldw	r2,172(sp)
81114530:	10000c26 	beq	r2,zero,81114564 <___vfprintf_internal_r+0x8c8>
81114534:	d8801f17 	ldw	r2,124(sp)
81114538:	d9002704 	addi	r4,sp,156
8111453c:	18c00084 	addi	r3,r3,2
81114540:	10800044 	addi	r2,r2,1
81114544:	41000015 	stw	r4,0(r8)
81114548:	01000084 	movi	r4,2
8111454c:	41000115 	stw	r4,4(r8)
81114550:	d8c02015 	stw	r3,128(sp)
81114554:	d8801f15 	stw	r2,124(sp)
81114558:	010001c4 	movi	r4,7
8111455c:	20823616 	blt	r4,r2,81114e38 <___vfprintf_internal_r+0x119c>
81114560:	42000204 	addi	r8,r8,8
81114564:	d9003017 	ldw	r4,192(sp)
81114568:	00802004 	movi	r2,128
8111456c:	20819926 	beq	r4,r2,81114bd4 <___vfprintf_internal_r+0xf38>
81114570:	d9402917 	ldw	r5,164(sp)
81114574:	d8802e17 	ldw	r2,184(sp)
81114578:	28adc83a 	sub	r22,r5,r2
8111457c:	0580310e 	bge	zero,r22,81114644 <___vfprintf_internal_r+0x9a8>
81114580:	07000404 	movi	fp,16
81114584:	d8801f17 	ldw	r2,124(sp)
81114588:	e584140e 	bge	fp,r22,811155dc <___vfprintf_internal_r+0x1940>
8111458c:	01604534 	movhi	r5,33044
81114590:	29711484 	addi	r5,r5,-15278
81114594:	dc402915 	stw	r17,164(sp)
81114598:	d9402b15 	stw	r5,172(sp)
8111459c:	b023883a 	mov	r17,r22
811145a0:	04c001c4 	movi	r19,7
811145a4:	a82d883a 	mov	r22,r21
811145a8:	902b883a 	mov	r21,r18
811145ac:	8025883a 	mov	r18,r16
811145b0:	dc002c17 	ldw	r16,176(sp)
811145b4:	00000306 	br	811145c4 <___vfprintf_internal_r+0x928>
811145b8:	8c7ffc04 	addi	r17,r17,-16
811145bc:	42000204 	addi	r8,r8,8
811145c0:	e440110e 	bge	fp,r17,81114608 <___vfprintf_internal_r+0x96c>
811145c4:	18c00404 	addi	r3,r3,16
811145c8:	10800044 	addi	r2,r2,1
811145cc:	45000015 	stw	r20,0(r8)
811145d0:	47000115 	stw	fp,4(r8)
811145d4:	d8c02015 	stw	r3,128(sp)
811145d8:	d8801f15 	stw	r2,124(sp)
811145dc:	98bff60e 	bge	r19,r2,811145b8 <__reset+0xfb0f45b8>
811145e0:	d9801e04 	addi	r6,sp,120
811145e4:	b80b883a 	mov	r5,r23
811145e8:	8009883a 	mov	r4,r16
811145ec:	111fd2c0 	call	8111fd2c <__sprint_r>
811145f0:	103eae1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811145f4:	8c7ffc04 	addi	r17,r17,-16
811145f8:	d8c02017 	ldw	r3,128(sp)
811145fc:	d8801f17 	ldw	r2,124(sp)
81114600:	da000404 	addi	r8,sp,16
81114604:	e47fef16 	blt	fp,r17,811145c4 <__reset+0xfb0f45c4>
81114608:	9021883a 	mov	r16,r18
8111460c:	a825883a 	mov	r18,r21
81114610:	b02b883a 	mov	r21,r22
81114614:	882d883a 	mov	r22,r17
81114618:	dc402917 	ldw	r17,164(sp)
8111461c:	d9002b17 	ldw	r4,172(sp)
81114620:	1d87883a 	add	r3,r3,r22
81114624:	10800044 	addi	r2,r2,1
81114628:	41000015 	stw	r4,0(r8)
8111462c:	45800115 	stw	r22,4(r8)
81114630:	d8c02015 	stw	r3,128(sp)
81114634:	d8801f15 	stw	r2,124(sp)
81114638:	010001c4 	movi	r4,7
8111463c:	2081ee16 	blt	r4,r2,81114df8 <___vfprintf_internal_r+0x115c>
81114640:	42000204 	addi	r8,r8,8
81114644:	9080400c 	andi	r2,r18,256
81114648:	1001181e 	bne	r2,zero,81114aac <___vfprintf_internal_r+0xe10>
8111464c:	d9402e17 	ldw	r5,184(sp)
81114650:	d8801f17 	ldw	r2,124(sp)
81114654:	44000015 	stw	r16,0(r8)
81114658:	1947883a 	add	r3,r3,r5
8111465c:	10800044 	addi	r2,r2,1
81114660:	41400115 	stw	r5,4(r8)
81114664:	d8c02015 	stw	r3,128(sp)
81114668:	d8801f15 	stw	r2,124(sp)
8111466c:	010001c4 	movi	r4,7
81114670:	2081d316 	blt	r4,r2,81114dc0 <___vfprintf_internal_r+0x1124>
81114674:	42000204 	addi	r8,r8,8
81114678:	9480010c 	andi	r18,r18,4
8111467c:	90003226 	beq	r18,zero,81114748 <___vfprintf_internal_r+0xaac>
81114680:	d9403117 	ldw	r5,196(sp)
81114684:	d8802a17 	ldw	r2,168(sp)
81114688:	28a1c83a 	sub	r16,r5,r2
8111468c:	04002e0e 	bge	zero,r16,81114748 <___vfprintf_internal_r+0xaac>
81114690:	04400404 	movi	r17,16
81114694:	d8801f17 	ldw	r2,124(sp)
81114698:	8c04a20e 	bge	r17,r16,81115924 <___vfprintf_internal_r+0x1c88>
8111469c:	01604534 	movhi	r5,33044
811146a0:	29711884 	addi	r5,r5,-15262
811146a4:	d9403515 	stw	r5,212(sp)
811146a8:	048001c4 	movi	r18,7
811146ac:	dcc02c17 	ldw	r19,176(sp)
811146b0:	00000306 	br	811146c0 <___vfprintf_internal_r+0xa24>
811146b4:	843ffc04 	addi	r16,r16,-16
811146b8:	42000204 	addi	r8,r8,8
811146bc:	8c00130e 	bge	r17,r16,8111470c <___vfprintf_internal_r+0xa70>
811146c0:	01204534 	movhi	r4,33044
811146c4:	18c00404 	addi	r3,r3,16
811146c8:	10800044 	addi	r2,r2,1
811146cc:	21311884 	addi	r4,r4,-15262
811146d0:	41000015 	stw	r4,0(r8)
811146d4:	44400115 	stw	r17,4(r8)
811146d8:	d8c02015 	stw	r3,128(sp)
811146dc:	d8801f15 	stw	r2,124(sp)
811146e0:	90bff40e 	bge	r18,r2,811146b4 <__reset+0xfb0f46b4>
811146e4:	d9801e04 	addi	r6,sp,120
811146e8:	b80b883a 	mov	r5,r23
811146ec:	9809883a 	mov	r4,r19
811146f0:	111fd2c0 	call	8111fd2c <__sprint_r>
811146f4:	103e6d1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811146f8:	843ffc04 	addi	r16,r16,-16
811146fc:	d8c02017 	ldw	r3,128(sp)
81114700:	d8801f17 	ldw	r2,124(sp)
81114704:	da000404 	addi	r8,sp,16
81114708:	8c3fed16 	blt	r17,r16,811146c0 <__reset+0xfb0f46c0>
8111470c:	d9403517 	ldw	r5,212(sp)
81114710:	1c07883a 	add	r3,r3,r16
81114714:	10800044 	addi	r2,r2,1
81114718:	41400015 	stw	r5,0(r8)
8111471c:	44000115 	stw	r16,4(r8)
81114720:	d8c02015 	stw	r3,128(sp)
81114724:	d8801f15 	stw	r2,124(sp)
81114728:	010001c4 	movi	r4,7
8111472c:	2080060e 	bge	r4,r2,81114748 <___vfprintf_internal_r+0xaac>
81114730:	d9002c17 	ldw	r4,176(sp)
81114734:	d9801e04 	addi	r6,sp,120
81114738:	b80b883a 	mov	r5,r23
8111473c:	111fd2c0 	call	8111fd2c <__sprint_r>
81114740:	103e5a1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114744:	d8c02017 	ldw	r3,128(sp)
81114748:	d8803117 	ldw	r2,196(sp)
8111474c:	d9002a17 	ldw	r4,168(sp)
81114750:	1100010e 	bge	r2,r4,81114758 <___vfprintf_internal_r+0xabc>
81114754:	2005883a 	mov	r2,r4
81114758:	d9402f17 	ldw	r5,188(sp)
8111475c:	288b883a 	add	r5,r5,r2
81114760:	d9402f15 	stw	r5,188(sp)
81114764:	18019e1e 	bne	r3,zero,81114de0 <___vfprintf_internal_r+0x1144>
81114768:	a8800007 	ldb	r2,0(r21)
8111476c:	d8001f15 	stw	zero,124(sp)
81114770:	da000404 	addi	r8,sp,16
81114774:	103d851e 	bne	r2,zero,81113d8c <__reset+0xfb0f3d8c>
81114778:	a821883a 	mov	r16,r21
8111477c:	003d9b06 	br	81113dec <__reset+0xfb0f3dec>
81114780:	18c03fcc 	andi	r3,r3,255
81114784:	1805c11e 	bne	r3,zero,81115e8c <___vfprintf_internal_r+0x21f0>
81114788:	94800414 	ori	r18,r18,16
8111478c:	9080080c 	andi	r2,r18,32
81114790:	10020c26 	beq	r2,zero,81114fc4 <___vfprintf_internal_r+0x1328>
81114794:	d8802d17 	ldw	r2,180(sp)
81114798:	d9002917 	ldw	r4,164(sp)
8111479c:	d8002785 	stb	zero,158(sp)
811147a0:	10c00204 	addi	r3,r2,8
811147a4:	14c00017 	ldw	r19,0(r2)
811147a8:	15800117 	ldw	r22,4(r2)
811147ac:	20040f16 	blt	r4,zero,811157ec <___vfprintf_internal_r+0x1b50>
811147b0:	013fdfc4 	movi	r4,-129
811147b4:	9d84b03a 	or	r2,r19,r22
811147b8:	d8c02d15 	stw	r3,180(sp)
811147bc:	9124703a 	and	r18,r18,r4
811147c0:	0039883a 	mov	fp,zero
811147c4:	103e891e 	bne	r2,zero,811141ec <__reset+0xfb0f41ec>
811147c8:	d9002917 	ldw	r4,164(sp)
811147cc:	2002c11e 	bne	r4,zero,811152d4 <___vfprintf_internal_r+0x1638>
811147d0:	d8002915 	stw	zero,164(sp)
811147d4:	d8002e15 	stw	zero,184(sp)
811147d8:	dc001e04 	addi	r16,sp,120
811147dc:	003ef806 	br	811143c0 <__reset+0xfb0f43c0>
811147e0:	18c03fcc 	andi	r3,r3,255
811147e4:	18059d1e 	bne	r3,zero,81115e5c <___vfprintf_internal_r+0x21c0>
811147e8:	01604534 	movhi	r5,33044
811147ec:	29710004 	addi	r5,r5,-15360
811147f0:	d9403915 	stw	r5,228(sp)
811147f4:	9080080c 	andi	r2,r18,32
811147f8:	10005226 	beq	r2,zero,81114944 <___vfprintf_internal_r+0xca8>
811147fc:	d8802d17 	ldw	r2,180(sp)
81114800:	14c00017 	ldw	r19,0(r2)
81114804:	15800117 	ldw	r22,4(r2)
81114808:	10800204 	addi	r2,r2,8
8111480c:	d8802d15 	stw	r2,180(sp)
81114810:	9080004c 	andi	r2,r18,1
81114814:	10019026 	beq	r2,zero,81114e58 <___vfprintf_internal_r+0x11bc>
81114818:	9d84b03a 	or	r2,r19,r22
8111481c:	10036926 	beq	r2,zero,811155c4 <___vfprintf_internal_r+0x1928>
81114820:	d8c02917 	ldw	r3,164(sp)
81114824:	00800c04 	movi	r2,48
81114828:	d8802705 	stb	r2,156(sp)
8111482c:	dc402745 	stb	r17,157(sp)
81114830:	d8002785 	stb	zero,158(sp)
81114834:	90800094 	ori	r2,r18,2
81114838:	18045d16 	blt	r3,zero,811159b0 <___vfprintf_internal_r+0x1d14>
8111483c:	00bfdfc4 	movi	r2,-129
81114840:	90a4703a 	and	r18,r18,r2
81114844:	94800094 	ori	r18,r18,2
81114848:	0039883a 	mov	fp,zero
8111484c:	d9003917 	ldw	r4,228(sp)
81114850:	dc001e04 	addi	r16,sp,120
81114854:	988003cc 	andi	r2,r19,15
81114858:	b006973a 	slli	r3,r22,28
8111485c:	2085883a 	add	r2,r4,r2
81114860:	9826d13a 	srli	r19,r19,4
81114864:	10800003 	ldbu	r2,0(r2)
81114868:	b02cd13a 	srli	r22,r22,4
8111486c:	843fffc4 	addi	r16,r16,-1
81114870:	1ce6b03a 	or	r19,r3,r19
81114874:	80800005 	stb	r2,0(r16)
81114878:	9d84b03a 	or	r2,r19,r22
8111487c:	103ff51e 	bne	r2,zero,81114854 <__reset+0xfb0f4854>
81114880:	d8c02817 	ldw	r3,160(sp)
81114884:	1c07c83a 	sub	r3,r3,r16
81114888:	d8c02e15 	stw	r3,184(sp)
8111488c:	003ecc06 	br	811143c0 <__reset+0xfb0f43c0>
81114890:	18c03fcc 	andi	r3,r3,255
81114894:	183e9f26 	beq	r3,zero,81114314 <__reset+0xfb0f4314>
81114898:	d9c02785 	stb	r7,158(sp)
8111489c:	003e9d06 	br	81114314 <__reset+0xfb0f4314>
811148a0:	00c00044 	movi	r3,1
811148a4:	01c00ac4 	movi	r7,43
811148a8:	ac400007 	ldb	r17,0(r21)
811148ac:	003d5e06 	br	81113e28 <__reset+0xfb0f3e28>
811148b0:	94800814 	ori	r18,r18,32
811148b4:	ac400007 	ldb	r17,0(r21)
811148b8:	003d5b06 	br	81113e28 <__reset+0xfb0f3e28>
811148bc:	d8c02d17 	ldw	r3,180(sp)
811148c0:	d8002785 	stb	zero,158(sp)
811148c4:	1c000017 	ldw	r16,0(r3)
811148c8:	1cc00104 	addi	r19,r3,4
811148cc:	80041926 	beq	r16,zero,81115934 <___vfprintf_internal_r+0x1c98>
811148d0:	d9002917 	ldw	r4,164(sp)
811148d4:	2003d016 	blt	r4,zero,81115818 <___vfprintf_internal_r+0x1b7c>
811148d8:	200d883a 	mov	r6,r4
811148dc:	000b883a 	mov	r5,zero
811148e0:	8009883a 	mov	r4,r16
811148e4:	da003d15 	stw	r8,244(sp)
811148e8:	111ab200 	call	8111ab20 <memchr>
811148ec:	da003d17 	ldw	r8,244(sp)
811148f0:	10045426 	beq	r2,zero,81115a44 <___vfprintf_internal_r+0x1da8>
811148f4:	1405c83a 	sub	r2,r2,r16
811148f8:	d8802e15 	stw	r2,184(sp)
811148fc:	1003cc16 	blt	r2,zero,81115830 <___vfprintf_internal_r+0x1b94>
81114900:	df002783 	ldbu	fp,158(sp)
81114904:	d8802a15 	stw	r2,168(sp)
81114908:	dcc02d15 	stw	r19,180(sp)
8111490c:	d8002915 	stw	zero,164(sp)
81114910:	d8003215 	stw	zero,200(sp)
81114914:	003eb006 	br	811143d8 <__reset+0xfb0f43d8>
81114918:	18c03fcc 	andi	r3,r3,255
8111491c:	183f9b26 	beq	r3,zero,8111478c <__reset+0xfb0f478c>
81114920:	d9c02785 	stb	r7,158(sp)
81114924:	003f9906 	br	8111478c <__reset+0xfb0f478c>
81114928:	18c03fcc 	andi	r3,r3,255
8111492c:	1805551e 	bne	r3,zero,81115e84 <___vfprintf_internal_r+0x21e8>
81114930:	01604534 	movhi	r5,33044
81114934:	29710504 	addi	r5,r5,-15340
81114938:	d9403915 	stw	r5,228(sp)
8111493c:	9080080c 	andi	r2,r18,32
81114940:	103fae1e 	bne	r2,zero,811147fc <__reset+0xfb0f47fc>
81114944:	9080040c 	andi	r2,r18,16
81114948:	1002de26 	beq	r2,zero,811154c4 <___vfprintf_internal_r+0x1828>
8111494c:	d8c02d17 	ldw	r3,180(sp)
81114950:	002d883a 	mov	r22,zero
81114954:	1cc00017 	ldw	r19,0(r3)
81114958:	18c00104 	addi	r3,r3,4
8111495c:	d8c02d15 	stw	r3,180(sp)
81114960:	003fab06 	br	81114810 <__reset+0xfb0f4810>
81114964:	38803fcc 	andi	r2,r7,255
81114968:	1080201c 	xori	r2,r2,128
8111496c:	10bfe004 	addi	r2,r2,-128
81114970:	1002d21e 	bne	r2,zero,811154bc <___vfprintf_internal_r+0x1820>
81114974:	00c00044 	movi	r3,1
81114978:	01c00804 	movi	r7,32
8111497c:	ac400007 	ldb	r17,0(r21)
81114980:	003d2906 	br	81113e28 <__reset+0xfb0f3e28>
81114984:	94800054 	ori	r18,r18,1
81114988:	ac400007 	ldb	r17,0(r21)
8111498c:	003d2606 	br	81113e28 <__reset+0xfb0f3e28>
81114990:	18c03fcc 	andi	r3,r3,255
81114994:	183e0526 	beq	r3,zero,811141ac <__reset+0xfb0f41ac>
81114998:	d9c02785 	stb	r7,158(sp)
8111499c:	003e0306 	br	811141ac <__reset+0xfb0f41ac>
811149a0:	94801014 	ori	r18,r18,64
811149a4:	ac400007 	ldb	r17,0(r21)
811149a8:	003d1f06 	br	81113e28 <__reset+0xfb0f3e28>
811149ac:	ac400007 	ldb	r17,0(r21)
811149b0:	8a438726 	beq	r17,r9,811157d0 <___vfprintf_internal_r+0x1b34>
811149b4:	94800414 	ori	r18,r18,16
811149b8:	003d1b06 	br	81113e28 <__reset+0xfb0f3e28>
811149bc:	18c03fcc 	andi	r3,r3,255
811149c0:	1805341e 	bne	r3,zero,81115e94 <___vfprintf_internal_r+0x21f8>
811149c4:	9080080c 	andi	r2,r18,32
811149c8:	1002cd26 	beq	r2,zero,81115500 <___vfprintf_internal_r+0x1864>
811149cc:	d9402d17 	ldw	r5,180(sp)
811149d0:	d9002f17 	ldw	r4,188(sp)
811149d4:	28800017 	ldw	r2,0(r5)
811149d8:	2007d7fa 	srai	r3,r4,31
811149dc:	29400104 	addi	r5,r5,4
811149e0:	d9402d15 	stw	r5,180(sp)
811149e4:	11000015 	stw	r4,0(r2)
811149e8:	10c00115 	stw	r3,4(r2)
811149ec:	003ce506 	br	81113d84 <__reset+0xfb0f3d84>
811149f0:	d8c02d17 	ldw	r3,180(sp)
811149f4:	d9002d17 	ldw	r4,180(sp)
811149f8:	d8002785 	stb	zero,158(sp)
811149fc:	18800017 	ldw	r2,0(r3)
81114a00:	21000104 	addi	r4,r4,4
81114a04:	00c00044 	movi	r3,1
81114a08:	d8c02a15 	stw	r3,168(sp)
81114a0c:	d8801405 	stb	r2,80(sp)
81114a10:	d9002d15 	stw	r4,180(sp)
81114a14:	d8c02e15 	stw	r3,184(sp)
81114a18:	d8002915 	stw	zero,164(sp)
81114a1c:	d8003215 	stw	zero,200(sp)
81114a20:	dc001404 	addi	r16,sp,80
81114a24:	0039883a 	mov	fp,zero
81114a28:	003e7206 	br	811143f4 <__reset+0xfb0f43f4>
81114a2c:	01204534 	movhi	r4,33044
81114a30:	21310504 	addi	r4,r4,-15340
81114a34:	0039883a 	mov	fp,zero
81114a38:	d9003915 	stw	r4,228(sp)
81114a3c:	04401e04 	movi	r17,120
81114a40:	003f8206 	br	8111484c <__reset+0xfb0f484c>
81114a44:	18c03fcc 	andi	r3,r3,255
81114a48:	1805061e 	bne	r3,zero,81115e64 <___vfprintf_internal_r+0x21c8>
81114a4c:	883d9126 	beq	r17,zero,81114094 <__reset+0xfb0f4094>
81114a50:	00c00044 	movi	r3,1
81114a54:	d8c02a15 	stw	r3,168(sp)
81114a58:	dc401405 	stb	r17,80(sp)
81114a5c:	d8002785 	stb	zero,158(sp)
81114a60:	003fec06 	br	81114a14 <__reset+0xfb0f4a14>
81114a64:	01604534 	movhi	r5,33044
81114a68:	29710504 	addi	r5,r5,-15340
81114a6c:	d9403915 	stw	r5,228(sp)
81114a70:	d8c02d15 	stw	r3,180(sp)
81114a74:	1025883a 	mov	r18,r2
81114a78:	04401e04 	movi	r17,120
81114a7c:	9d84b03a 	or	r2,r19,r22
81114a80:	1000fc1e 	bne	r2,zero,81114e74 <___vfprintf_internal_r+0x11d8>
81114a84:	0039883a 	mov	fp,zero
81114a88:	00800084 	movi	r2,2
81114a8c:	10803fcc 	andi	r2,r2,255
81114a90:	00c00044 	movi	r3,1
81114a94:	10c20f26 	beq	r2,r3,811152d4 <___vfprintf_internal_r+0x1638>
81114a98:	00c00084 	movi	r3,2
81114a9c:	10fd6326 	beq	r2,r3,8111402c <__reset+0xfb0f402c>
81114aa0:	003e2d06 	br	81114358 <__reset+0xfb0f4358>
81114aa4:	d8c02017 	ldw	r3,128(sp)
81114aa8:	003e9306 	br	811144f8 <__reset+0xfb0f44f8>
81114aac:	00801944 	movi	r2,101
81114ab0:	14407e0e 	bge	r2,r17,81114cac <___vfprintf_internal_r+0x1010>
81114ab4:	d9003617 	ldw	r4,216(sp)
81114ab8:	d9403817 	ldw	r5,224(sp)
81114abc:	000d883a 	mov	r6,zero
81114ac0:	000f883a 	mov	r7,zero
81114ac4:	d8c03c15 	stw	r3,240(sp)
81114ac8:	da003d15 	stw	r8,244(sp)
81114acc:	11246d40 	call	811246d4 <__eqdf2>
81114ad0:	d8c03c17 	ldw	r3,240(sp)
81114ad4:	da003d17 	ldw	r8,244(sp)
81114ad8:	1000f71e 	bne	r2,zero,81114eb8 <___vfprintf_internal_r+0x121c>
81114adc:	d8801f17 	ldw	r2,124(sp)
81114ae0:	01204534 	movhi	r4,33044
81114ae4:	21310c04 	addi	r4,r4,-15312
81114ae8:	18c00044 	addi	r3,r3,1
81114aec:	10800044 	addi	r2,r2,1
81114af0:	41000015 	stw	r4,0(r8)
81114af4:	01000044 	movi	r4,1
81114af8:	41000115 	stw	r4,4(r8)
81114afc:	d8c02015 	stw	r3,128(sp)
81114b00:	d8801f15 	stw	r2,124(sp)
81114b04:	010001c4 	movi	r4,7
81114b08:	2082b816 	blt	r4,r2,811155ec <___vfprintf_internal_r+0x1950>
81114b0c:	42000204 	addi	r8,r8,8
81114b10:	d8802617 	ldw	r2,152(sp)
81114b14:	d9403317 	ldw	r5,204(sp)
81114b18:	11400216 	blt	r2,r5,81114b24 <___vfprintf_internal_r+0xe88>
81114b1c:	9080004c 	andi	r2,r18,1
81114b20:	103ed526 	beq	r2,zero,81114678 <__reset+0xfb0f4678>
81114b24:	d8803717 	ldw	r2,220(sp)
81114b28:	d9003417 	ldw	r4,208(sp)
81114b2c:	d9403717 	ldw	r5,220(sp)
81114b30:	1887883a 	add	r3,r3,r2
81114b34:	d8801f17 	ldw	r2,124(sp)
81114b38:	41000015 	stw	r4,0(r8)
81114b3c:	41400115 	stw	r5,4(r8)
81114b40:	10800044 	addi	r2,r2,1
81114b44:	d8c02015 	stw	r3,128(sp)
81114b48:	d8801f15 	stw	r2,124(sp)
81114b4c:	010001c4 	movi	r4,7
81114b50:	20832916 	blt	r4,r2,811157f8 <___vfprintf_internal_r+0x1b5c>
81114b54:	42000204 	addi	r8,r8,8
81114b58:	d8803317 	ldw	r2,204(sp)
81114b5c:	143fffc4 	addi	r16,r2,-1
81114b60:	043ec50e 	bge	zero,r16,81114678 <__reset+0xfb0f4678>
81114b64:	04400404 	movi	r17,16
81114b68:	d8801f17 	ldw	r2,124(sp)
81114b6c:	8c00880e 	bge	r17,r16,81114d90 <___vfprintf_internal_r+0x10f4>
81114b70:	01604534 	movhi	r5,33044
81114b74:	29711484 	addi	r5,r5,-15278
81114b78:	d9402b15 	stw	r5,172(sp)
81114b7c:	058001c4 	movi	r22,7
81114b80:	dcc02c17 	ldw	r19,176(sp)
81114b84:	00000306 	br	81114b94 <___vfprintf_internal_r+0xef8>
81114b88:	42000204 	addi	r8,r8,8
81114b8c:	843ffc04 	addi	r16,r16,-16
81114b90:	8c00820e 	bge	r17,r16,81114d9c <___vfprintf_internal_r+0x1100>
81114b94:	18c00404 	addi	r3,r3,16
81114b98:	10800044 	addi	r2,r2,1
81114b9c:	45000015 	stw	r20,0(r8)
81114ba0:	44400115 	stw	r17,4(r8)
81114ba4:	d8c02015 	stw	r3,128(sp)
81114ba8:	d8801f15 	stw	r2,124(sp)
81114bac:	b0bff60e 	bge	r22,r2,81114b88 <__reset+0xfb0f4b88>
81114bb0:	d9801e04 	addi	r6,sp,120
81114bb4:	b80b883a 	mov	r5,r23
81114bb8:	9809883a 	mov	r4,r19
81114bbc:	111fd2c0 	call	8111fd2c <__sprint_r>
81114bc0:	103d3a1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114bc4:	d8c02017 	ldw	r3,128(sp)
81114bc8:	d8801f17 	ldw	r2,124(sp)
81114bcc:	da000404 	addi	r8,sp,16
81114bd0:	003fee06 	br	81114b8c <__reset+0xfb0f4b8c>
81114bd4:	d9403117 	ldw	r5,196(sp)
81114bd8:	d8802a17 	ldw	r2,168(sp)
81114bdc:	28adc83a 	sub	r22,r5,r2
81114be0:	05be630e 	bge	zero,r22,81114570 <__reset+0xfb0f4570>
81114be4:	07000404 	movi	fp,16
81114be8:	d8801f17 	ldw	r2,124(sp)
81114bec:	e5838f0e 	bge	fp,r22,81115a2c <___vfprintf_internal_r+0x1d90>
81114bf0:	01604534 	movhi	r5,33044
81114bf4:	29711484 	addi	r5,r5,-15278
81114bf8:	dc403015 	stw	r17,192(sp)
81114bfc:	d9402b15 	stw	r5,172(sp)
81114c00:	b023883a 	mov	r17,r22
81114c04:	04c001c4 	movi	r19,7
81114c08:	a82d883a 	mov	r22,r21
81114c0c:	902b883a 	mov	r21,r18
81114c10:	8025883a 	mov	r18,r16
81114c14:	dc002c17 	ldw	r16,176(sp)
81114c18:	00000306 	br	81114c28 <___vfprintf_internal_r+0xf8c>
81114c1c:	8c7ffc04 	addi	r17,r17,-16
81114c20:	42000204 	addi	r8,r8,8
81114c24:	e440110e 	bge	fp,r17,81114c6c <___vfprintf_internal_r+0xfd0>
81114c28:	18c00404 	addi	r3,r3,16
81114c2c:	10800044 	addi	r2,r2,1
81114c30:	45000015 	stw	r20,0(r8)
81114c34:	47000115 	stw	fp,4(r8)
81114c38:	d8c02015 	stw	r3,128(sp)
81114c3c:	d8801f15 	stw	r2,124(sp)
81114c40:	98bff60e 	bge	r19,r2,81114c1c <__reset+0xfb0f4c1c>
81114c44:	d9801e04 	addi	r6,sp,120
81114c48:	b80b883a 	mov	r5,r23
81114c4c:	8009883a 	mov	r4,r16
81114c50:	111fd2c0 	call	8111fd2c <__sprint_r>
81114c54:	103d151e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114c58:	8c7ffc04 	addi	r17,r17,-16
81114c5c:	d8c02017 	ldw	r3,128(sp)
81114c60:	d8801f17 	ldw	r2,124(sp)
81114c64:	da000404 	addi	r8,sp,16
81114c68:	e47fef16 	blt	fp,r17,81114c28 <__reset+0xfb0f4c28>
81114c6c:	9021883a 	mov	r16,r18
81114c70:	a825883a 	mov	r18,r21
81114c74:	b02b883a 	mov	r21,r22
81114c78:	882d883a 	mov	r22,r17
81114c7c:	dc403017 	ldw	r17,192(sp)
81114c80:	d9002b17 	ldw	r4,172(sp)
81114c84:	1d87883a 	add	r3,r3,r22
81114c88:	10800044 	addi	r2,r2,1
81114c8c:	41000015 	stw	r4,0(r8)
81114c90:	45800115 	stw	r22,4(r8)
81114c94:	d8c02015 	stw	r3,128(sp)
81114c98:	d8801f15 	stw	r2,124(sp)
81114c9c:	010001c4 	movi	r4,7
81114ca0:	20818e16 	blt	r4,r2,811152dc <___vfprintf_internal_r+0x1640>
81114ca4:	42000204 	addi	r8,r8,8
81114ca8:	003e3106 	br	81114570 <__reset+0xfb0f4570>
81114cac:	d9403317 	ldw	r5,204(sp)
81114cb0:	00800044 	movi	r2,1
81114cb4:	18c00044 	addi	r3,r3,1
81114cb8:	1141530e 	bge	r2,r5,81115208 <___vfprintf_internal_r+0x156c>
81114cbc:	dc401f17 	ldw	r17,124(sp)
81114cc0:	00800044 	movi	r2,1
81114cc4:	40800115 	stw	r2,4(r8)
81114cc8:	8c400044 	addi	r17,r17,1
81114ccc:	44000015 	stw	r16,0(r8)
81114cd0:	d8c02015 	stw	r3,128(sp)
81114cd4:	dc401f15 	stw	r17,124(sp)
81114cd8:	008001c4 	movi	r2,7
81114cdc:	14416b16 	blt	r2,r17,8111528c <___vfprintf_internal_r+0x15f0>
81114ce0:	42000204 	addi	r8,r8,8
81114ce4:	d8803717 	ldw	r2,220(sp)
81114ce8:	d9003417 	ldw	r4,208(sp)
81114cec:	8c400044 	addi	r17,r17,1
81114cf0:	10c7883a 	add	r3,r2,r3
81114cf4:	40800115 	stw	r2,4(r8)
81114cf8:	41000015 	stw	r4,0(r8)
81114cfc:	d8c02015 	stw	r3,128(sp)
81114d00:	dc401f15 	stw	r17,124(sp)
81114d04:	008001c4 	movi	r2,7
81114d08:	14416916 	blt	r2,r17,811152b0 <___vfprintf_internal_r+0x1614>
81114d0c:	45800204 	addi	r22,r8,8
81114d10:	d9003617 	ldw	r4,216(sp)
81114d14:	d9403817 	ldw	r5,224(sp)
81114d18:	000d883a 	mov	r6,zero
81114d1c:	000f883a 	mov	r7,zero
81114d20:	d8c03c15 	stw	r3,240(sp)
81114d24:	11246d40 	call	811246d4 <__eqdf2>
81114d28:	d8c03c17 	ldw	r3,240(sp)
81114d2c:	1000bc26 	beq	r2,zero,81115020 <___vfprintf_internal_r+0x1384>
81114d30:	d9403317 	ldw	r5,204(sp)
81114d34:	84000044 	addi	r16,r16,1
81114d38:	8c400044 	addi	r17,r17,1
81114d3c:	28bfffc4 	addi	r2,r5,-1
81114d40:	1887883a 	add	r3,r3,r2
81114d44:	b0800115 	stw	r2,4(r22)
81114d48:	b4000015 	stw	r16,0(r22)
81114d4c:	d8c02015 	stw	r3,128(sp)
81114d50:	dc401f15 	stw	r17,124(sp)
81114d54:	008001c4 	movi	r2,7
81114d58:	14414316 	blt	r2,r17,81115268 <___vfprintf_internal_r+0x15cc>
81114d5c:	b5800204 	addi	r22,r22,8
81114d60:	d9003a17 	ldw	r4,232(sp)
81114d64:	df0022c4 	addi	fp,sp,139
81114d68:	8c400044 	addi	r17,r17,1
81114d6c:	20c7883a 	add	r3,r4,r3
81114d70:	b7000015 	stw	fp,0(r22)
81114d74:	b1000115 	stw	r4,4(r22)
81114d78:	d8c02015 	stw	r3,128(sp)
81114d7c:	dc401f15 	stw	r17,124(sp)
81114d80:	008001c4 	movi	r2,7
81114d84:	14400e16 	blt	r2,r17,81114dc0 <___vfprintf_internal_r+0x1124>
81114d88:	b2000204 	addi	r8,r22,8
81114d8c:	003e3a06 	br	81114678 <__reset+0xfb0f4678>
81114d90:	01204534 	movhi	r4,33044
81114d94:	21311484 	addi	r4,r4,-15278
81114d98:	d9002b15 	stw	r4,172(sp)
81114d9c:	d9002b17 	ldw	r4,172(sp)
81114da0:	1c07883a 	add	r3,r3,r16
81114da4:	44000115 	stw	r16,4(r8)
81114da8:	41000015 	stw	r4,0(r8)
81114dac:	10800044 	addi	r2,r2,1
81114db0:	d8c02015 	stw	r3,128(sp)
81114db4:	d8801f15 	stw	r2,124(sp)
81114db8:	010001c4 	movi	r4,7
81114dbc:	20be2d0e 	bge	r4,r2,81114674 <__reset+0xfb0f4674>
81114dc0:	d9002c17 	ldw	r4,176(sp)
81114dc4:	d9801e04 	addi	r6,sp,120
81114dc8:	b80b883a 	mov	r5,r23
81114dcc:	111fd2c0 	call	8111fd2c <__sprint_r>
81114dd0:	103cb61e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114dd4:	d8c02017 	ldw	r3,128(sp)
81114dd8:	da000404 	addi	r8,sp,16
81114ddc:	003e2606 	br	81114678 <__reset+0xfb0f4678>
81114de0:	d9002c17 	ldw	r4,176(sp)
81114de4:	d9801e04 	addi	r6,sp,120
81114de8:	b80b883a 	mov	r5,r23
81114dec:	111fd2c0 	call	8111fd2c <__sprint_r>
81114df0:	103e5d26 	beq	r2,zero,81114768 <__reset+0xfb0f4768>
81114df4:	003cad06 	br	811140ac <__reset+0xfb0f40ac>
81114df8:	d9002c17 	ldw	r4,176(sp)
81114dfc:	d9801e04 	addi	r6,sp,120
81114e00:	b80b883a 	mov	r5,r23
81114e04:	111fd2c0 	call	8111fd2c <__sprint_r>
81114e08:	103ca81e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114e0c:	d8c02017 	ldw	r3,128(sp)
81114e10:	da000404 	addi	r8,sp,16
81114e14:	003e0b06 	br	81114644 <__reset+0xfb0f4644>
81114e18:	d9002c17 	ldw	r4,176(sp)
81114e1c:	d9801e04 	addi	r6,sp,120
81114e20:	b80b883a 	mov	r5,r23
81114e24:	111fd2c0 	call	8111fd2c <__sprint_r>
81114e28:	103ca01e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114e2c:	d8c02017 	ldw	r3,128(sp)
81114e30:	da000404 	addi	r8,sp,16
81114e34:	003dbd06 	br	8111452c <__reset+0xfb0f452c>
81114e38:	d9002c17 	ldw	r4,176(sp)
81114e3c:	d9801e04 	addi	r6,sp,120
81114e40:	b80b883a 	mov	r5,r23
81114e44:	111fd2c0 	call	8111fd2c <__sprint_r>
81114e48:	103c981e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114e4c:	d8c02017 	ldw	r3,128(sp)
81114e50:	da000404 	addi	r8,sp,16
81114e54:	003dc306 	br	81114564 <__reset+0xfb0f4564>
81114e58:	d8802917 	ldw	r2,164(sp)
81114e5c:	d8002785 	stb	zero,158(sp)
81114e60:	103f0616 	blt	r2,zero,81114a7c <__reset+0xfb0f4a7c>
81114e64:	00ffdfc4 	movi	r3,-129
81114e68:	9d84b03a 	or	r2,r19,r22
81114e6c:	90e4703a 	and	r18,r18,r3
81114e70:	103c6b26 	beq	r2,zero,81114020 <__reset+0xfb0f4020>
81114e74:	0039883a 	mov	fp,zero
81114e78:	003e7406 	br	8111484c <__reset+0xfb0f484c>
81114e7c:	9080040c 	andi	r2,r18,16
81114e80:	1001b326 	beq	r2,zero,81115550 <___vfprintf_internal_r+0x18b4>
81114e84:	d9002d17 	ldw	r4,180(sp)
81114e88:	d9402917 	ldw	r5,164(sp)
81114e8c:	d8002785 	stb	zero,158(sp)
81114e90:	20800104 	addi	r2,r4,4
81114e94:	24c00017 	ldw	r19,0(r4)
81114e98:	002d883a 	mov	r22,zero
81114e9c:	2801b516 	blt	r5,zero,81115574 <___vfprintf_internal_r+0x18d8>
81114ea0:	00ffdfc4 	movi	r3,-129
81114ea4:	d8802d15 	stw	r2,180(sp)
81114ea8:	90e4703a 	and	r18,r18,r3
81114eac:	983d2726 	beq	r19,zero,8111434c <__reset+0xfb0f434c>
81114eb0:	0039883a 	mov	fp,zero
81114eb4:	003d2a06 	br	81114360 <__reset+0xfb0f4360>
81114eb8:	dc402617 	ldw	r17,152(sp)
81114ebc:	0441d30e 	bge	zero,r17,8111560c <___vfprintf_internal_r+0x1970>
81114ec0:	dc403217 	ldw	r17,200(sp)
81114ec4:	d8803317 	ldw	r2,204(sp)
81114ec8:	1440010e 	bge	r2,r17,81114ed0 <___vfprintf_internal_r+0x1234>
81114ecc:	1023883a 	mov	r17,r2
81114ed0:	04400a0e 	bge	zero,r17,81114efc <___vfprintf_internal_r+0x1260>
81114ed4:	d8801f17 	ldw	r2,124(sp)
81114ed8:	1c47883a 	add	r3,r3,r17
81114edc:	44000015 	stw	r16,0(r8)
81114ee0:	10800044 	addi	r2,r2,1
81114ee4:	44400115 	stw	r17,4(r8)
81114ee8:	d8c02015 	stw	r3,128(sp)
81114eec:	d8801f15 	stw	r2,124(sp)
81114ef0:	010001c4 	movi	r4,7
81114ef4:	20826516 	blt	r4,r2,8111588c <___vfprintf_internal_r+0x1bf0>
81114ef8:	42000204 	addi	r8,r8,8
81114efc:	88026116 	blt	r17,zero,81115884 <___vfprintf_internal_r+0x1be8>
81114f00:	d9003217 	ldw	r4,200(sp)
81114f04:	2463c83a 	sub	r17,r4,r17
81114f08:	04407b0e 	bge	zero,r17,811150f8 <___vfprintf_internal_r+0x145c>
81114f0c:	05800404 	movi	r22,16
81114f10:	d8801f17 	ldw	r2,124(sp)
81114f14:	b4419d0e 	bge	r22,r17,8111558c <___vfprintf_internal_r+0x18f0>
81114f18:	01204534 	movhi	r4,33044
81114f1c:	21311484 	addi	r4,r4,-15278
81114f20:	d9002b15 	stw	r4,172(sp)
81114f24:	070001c4 	movi	fp,7
81114f28:	dcc02c17 	ldw	r19,176(sp)
81114f2c:	00000306 	br	81114f3c <___vfprintf_internal_r+0x12a0>
81114f30:	42000204 	addi	r8,r8,8
81114f34:	8c7ffc04 	addi	r17,r17,-16
81114f38:	b441970e 	bge	r22,r17,81115598 <___vfprintf_internal_r+0x18fc>
81114f3c:	18c00404 	addi	r3,r3,16
81114f40:	10800044 	addi	r2,r2,1
81114f44:	45000015 	stw	r20,0(r8)
81114f48:	45800115 	stw	r22,4(r8)
81114f4c:	d8c02015 	stw	r3,128(sp)
81114f50:	d8801f15 	stw	r2,124(sp)
81114f54:	e0bff60e 	bge	fp,r2,81114f30 <__reset+0xfb0f4f30>
81114f58:	d9801e04 	addi	r6,sp,120
81114f5c:	b80b883a 	mov	r5,r23
81114f60:	9809883a 	mov	r4,r19
81114f64:	111fd2c0 	call	8111fd2c <__sprint_r>
81114f68:	103c501e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114f6c:	d8c02017 	ldw	r3,128(sp)
81114f70:	d8801f17 	ldw	r2,124(sp)
81114f74:	da000404 	addi	r8,sp,16
81114f78:	003fee06 	br	81114f34 <__reset+0xfb0f4f34>
81114f7c:	d9002c17 	ldw	r4,176(sp)
81114f80:	d9801e04 	addi	r6,sp,120
81114f84:	b80b883a 	mov	r5,r23
81114f88:	111fd2c0 	call	8111fd2c <__sprint_r>
81114f8c:	103c471e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81114f90:	d8c02017 	ldw	r3,128(sp)
81114f94:	df002787 	ldb	fp,158(sp)
81114f98:	da000404 	addi	r8,sp,16
81114f9c:	003d5606 	br	811144f8 <__reset+0xfb0f44f8>
81114fa0:	9080040c 	andi	r2,r18,16
81114fa4:	10016126 	beq	r2,zero,8111552c <___vfprintf_internal_r+0x1890>
81114fa8:	d8802d17 	ldw	r2,180(sp)
81114fac:	14c00017 	ldw	r19,0(r2)
81114fb0:	10800104 	addi	r2,r2,4
81114fb4:	d8802d15 	stw	r2,180(sp)
81114fb8:	982dd7fa 	srai	r22,r19,31
81114fbc:	b005883a 	mov	r2,r22
81114fc0:	003c8206 	br	811141cc <__reset+0xfb0f41cc>
81114fc4:	9080040c 	andi	r2,r18,16
81114fc8:	10003526 	beq	r2,zero,811150a0 <___vfprintf_internal_r+0x1404>
81114fcc:	d9402d17 	ldw	r5,180(sp)
81114fd0:	d8c02917 	ldw	r3,164(sp)
81114fd4:	d8002785 	stb	zero,158(sp)
81114fd8:	28800104 	addi	r2,r5,4
81114fdc:	2cc00017 	ldw	r19,0(r5)
81114fe0:	002d883a 	mov	r22,zero
81114fe4:	18003716 	blt	r3,zero,811150c4 <___vfprintf_internal_r+0x1428>
81114fe8:	00ffdfc4 	movi	r3,-129
81114fec:	d8802d15 	stw	r2,180(sp)
81114ff0:	90e4703a 	and	r18,r18,r3
81114ff4:	0039883a 	mov	fp,zero
81114ff8:	983df326 	beq	r19,zero,811147c8 <__reset+0xfb0f47c8>
81114ffc:	00800244 	movi	r2,9
81115000:	14fc7b36 	bltu	r2,r19,811141f0 <__reset+0xfb0f41f0>
81115004:	d8c02817 	ldw	r3,160(sp)
81115008:	dc001dc4 	addi	r16,sp,119
8111500c:	9cc00c04 	addi	r19,r19,48
81115010:	1c07c83a 	sub	r3,r3,r16
81115014:	dcc01dc5 	stb	r19,119(sp)
81115018:	d8c02e15 	stw	r3,184(sp)
8111501c:	003ce806 	br	811143c0 <__reset+0xfb0f43c0>
81115020:	d8803317 	ldw	r2,204(sp)
81115024:	143fffc4 	addi	r16,r2,-1
81115028:	043f4d0e 	bge	zero,r16,81114d60 <__reset+0xfb0f4d60>
8111502c:	07000404 	movi	fp,16
81115030:	e400810e 	bge	fp,r16,81115238 <___vfprintf_internal_r+0x159c>
81115034:	01604534 	movhi	r5,33044
81115038:	29711484 	addi	r5,r5,-15278
8111503c:	d9402b15 	stw	r5,172(sp)
81115040:	01c001c4 	movi	r7,7
81115044:	dcc02c17 	ldw	r19,176(sp)
81115048:	00000306 	br	81115058 <___vfprintf_internal_r+0x13bc>
8111504c:	b5800204 	addi	r22,r22,8
81115050:	843ffc04 	addi	r16,r16,-16
81115054:	e4007b0e 	bge	fp,r16,81115244 <___vfprintf_internal_r+0x15a8>
81115058:	18c00404 	addi	r3,r3,16
8111505c:	8c400044 	addi	r17,r17,1
81115060:	b5000015 	stw	r20,0(r22)
81115064:	b7000115 	stw	fp,4(r22)
81115068:	d8c02015 	stw	r3,128(sp)
8111506c:	dc401f15 	stw	r17,124(sp)
81115070:	3c7ff60e 	bge	r7,r17,8111504c <__reset+0xfb0f504c>
81115074:	d9801e04 	addi	r6,sp,120
81115078:	b80b883a 	mov	r5,r23
8111507c:	9809883a 	mov	r4,r19
81115080:	d9c03c15 	stw	r7,240(sp)
81115084:	111fd2c0 	call	8111fd2c <__sprint_r>
81115088:	d9c03c17 	ldw	r7,240(sp)
8111508c:	103c071e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81115090:	d8c02017 	ldw	r3,128(sp)
81115094:	dc401f17 	ldw	r17,124(sp)
81115098:	dd800404 	addi	r22,sp,16
8111509c:	003fec06 	br	81115050 <__reset+0xfb0f5050>
811150a0:	9080100c 	andi	r2,r18,64
811150a4:	d8002785 	stb	zero,158(sp)
811150a8:	10010e26 	beq	r2,zero,811154e4 <___vfprintf_internal_r+0x1848>
811150ac:	d9002d17 	ldw	r4,180(sp)
811150b0:	d9402917 	ldw	r5,164(sp)
811150b4:	002d883a 	mov	r22,zero
811150b8:	20800104 	addi	r2,r4,4
811150bc:	24c0000b 	ldhu	r19,0(r4)
811150c0:	283fc90e 	bge	r5,zero,81114fe8 <__reset+0xfb0f4fe8>
811150c4:	d8802d15 	stw	r2,180(sp)
811150c8:	0039883a 	mov	fp,zero
811150cc:	9d84b03a 	or	r2,r19,r22
811150d0:	103c461e 	bne	r2,zero,811141ec <__reset+0xfb0f41ec>
811150d4:	00800044 	movi	r2,1
811150d8:	003e6c06 	br	81114a8c <__reset+0xfb0f4a8c>
811150dc:	d9002c17 	ldw	r4,176(sp)
811150e0:	d9801e04 	addi	r6,sp,120
811150e4:	b80b883a 	mov	r5,r23
811150e8:	111fd2c0 	call	8111fd2c <__sprint_r>
811150ec:	103bef1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811150f0:	d8c02017 	ldw	r3,128(sp)
811150f4:	da000404 	addi	r8,sp,16
811150f8:	d9003217 	ldw	r4,200(sp)
811150fc:	d8802617 	ldw	r2,152(sp)
81115100:	d9403317 	ldw	r5,204(sp)
81115104:	8123883a 	add	r17,r16,r4
81115108:	11400216 	blt	r2,r5,81115114 <___vfprintf_internal_r+0x1478>
8111510c:	9100004c 	andi	r4,r18,1
81115110:	20000d26 	beq	r4,zero,81115148 <___vfprintf_internal_r+0x14ac>
81115114:	d9003717 	ldw	r4,220(sp)
81115118:	d9403417 	ldw	r5,208(sp)
8111511c:	1907883a 	add	r3,r3,r4
81115120:	d9001f17 	ldw	r4,124(sp)
81115124:	41400015 	stw	r5,0(r8)
81115128:	d9403717 	ldw	r5,220(sp)
8111512c:	21000044 	addi	r4,r4,1
81115130:	d8c02015 	stw	r3,128(sp)
81115134:	41400115 	stw	r5,4(r8)
81115138:	d9001f15 	stw	r4,124(sp)
8111513c:	014001c4 	movi	r5,7
81115140:	2901e816 	blt	r5,r4,811158e4 <___vfprintf_internal_r+0x1c48>
81115144:	42000204 	addi	r8,r8,8
81115148:	d9003317 	ldw	r4,204(sp)
8111514c:	8121883a 	add	r16,r16,r4
81115150:	2085c83a 	sub	r2,r4,r2
81115154:	8461c83a 	sub	r16,r16,r17
81115158:	1400010e 	bge	r2,r16,81115160 <___vfprintf_internal_r+0x14c4>
8111515c:	1021883a 	mov	r16,r2
81115160:	04000a0e 	bge	zero,r16,8111518c <___vfprintf_internal_r+0x14f0>
81115164:	d9001f17 	ldw	r4,124(sp)
81115168:	1c07883a 	add	r3,r3,r16
8111516c:	44400015 	stw	r17,0(r8)
81115170:	21000044 	addi	r4,r4,1
81115174:	44000115 	stw	r16,4(r8)
81115178:	d8c02015 	stw	r3,128(sp)
8111517c:	d9001f15 	stw	r4,124(sp)
81115180:	014001c4 	movi	r5,7
81115184:	2901fb16 	blt	r5,r4,81115974 <___vfprintf_internal_r+0x1cd8>
81115188:	42000204 	addi	r8,r8,8
8111518c:	8001f716 	blt	r16,zero,8111596c <___vfprintf_internal_r+0x1cd0>
81115190:	1421c83a 	sub	r16,r2,r16
81115194:	043d380e 	bge	zero,r16,81114678 <__reset+0xfb0f4678>
81115198:	04400404 	movi	r17,16
8111519c:	d8801f17 	ldw	r2,124(sp)
811151a0:	8c3efb0e 	bge	r17,r16,81114d90 <__reset+0xfb0f4d90>
811151a4:	01604534 	movhi	r5,33044
811151a8:	29711484 	addi	r5,r5,-15278
811151ac:	d9402b15 	stw	r5,172(sp)
811151b0:	058001c4 	movi	r22,7
811151b4:	dcc02c17 	ldw	r19,176(sp)
811151b8:	00000306 	br	811151c8 <___vfprintf_internal_r+0x152c>
811151bc:	42000204 	addi	r8,r8,8
811151c0:	843ffc04 	addi	r16,r16,-16
811151c4:	8c3ef50e 	bge	r17,r16,81114d9c <__reset+0xfb0f4d9c>
811151c8:	18c00404 	addi	r3,r3,16
811151cc:	10800044 	addi	r2,r2,1
811151d0:	45000015 	stw	r20,0(r8)
811151d4:	44400115 	stw	r17,4(r8)
811151d8:	d8c02015 	stw	r3,128(sp)
811151dc:	d8801f15 	stw	r2,124(sp)
811151e0:	b0bff60e 	bge	r22,r2,811151bc <__reset+0xfb0f51bc>
811151e4:	d9801e04 	addi	r6,sp,120
811151e8:	b80b883a 	mov	r5,r23
811151ec:	9809883a 	mov	r4,r19
811151f0:	111fd2c0 	call	8111fd2c <__sprint_r>
811151f4:	103bad1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811151f8:	d8c02017 	ldw	r3,128(sp)
811151fc:	d8801f17 	ldw	r2,124(sp)
81115200:	da000404 	addi	r8,sp,16
81115204:	003fee06 	br	811151c0 <__reset+0xfb0f51c0>
81115208:	9088703a 	and	r4,r18,r2
8111520c:	203eab1e 	bne	r4,zero,81114cbc <__reset+0xfb0f4cbc>
81115210:	dc401f17 	ldw	r17,124(sp)
81115214:	40800115 	stw	r2,4(r8)
81115218:	44000015 	stw	r16,0(r8)
8111521c:	8c400044 	addi	r17,r17,1
81115220:	d8c02015 	stw	r3,128(sp)
81115224:	dc401f15 	stw	r17,124(sp)
81115228:	008001c4 	movi	r2,7
8111522c:	14400e16 	blt	r2,r17,81115268 <___vfprintf_internal_r+0x15cc>
81115230:	45800204 	addi	r22,r8,8
81115234:	003eca06 	br	81114d60 <__reset+0xfb0f4d60>
81115238:	01204534 	movhi	r4,33044
8111523c:	21311484 	addi	r4,r4,-15278
81115240:	d9002b15 	stw	r4,172(sp)
81115244:	d8802b17 	ldw	r2,172(sp)
81115248:	1c07883a 	add	r3,r3,r16
8111524c:	8c400044 	addi	r17,r17,1
81115250:	b0800015 	stw	r2,0(r22)
81115254:	b4000115 	stw	r16,4(r22)
81115258:	d8c02015 	stw	r3,128(sp)
8111525c:	dc401f15 	stw	r17,124(sp)
81115260:	008001c4 	movi	r2,7
81115264:	147ebd0e 	bge	r2,r17,81114d5c <__reset+0xfb0f4d5c>
81115268:	d9002c17 	ldw	r4,176(sp)
8111526c:	d9801e04 	addi	r6,sp,120
81115270:	b80b883a 	mov	r5,r23
81115274:	111fd2c0 	call	8111fd2c <__sprint_r>
81115278:	103b8c1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
8111527c:	d8c02017 	ldw	r3,128(sp)
81115280:	dc401f17 	ldw	r17,124(sp)
81115284:	dd800404 	addi	r22,sp,16
81115288:	003eb506 	br	81114d60 <__reset+0xfb0f4d60>
8111528c:	d9002c17 	ldw	r4,176(sp)
81115290:	d9801e04 	addi	r6,sp,120
81115294:	b80b883a 	mov	r5,r23
81115298:	111fd2c0 	call	8111fd2c <__sprint_r>
8111529c:	103b831e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811152a0:	d8c02017 	ldw	r3,128(sp)
811152a4:	dc401f17 	ldw	r17,124(sp)
811152a8:	da000404 	addi	r8,sp,16
811152ac:	003e8d06 	br	81114ce4 <__reset+0xfb0f4ce4>
811152b0:	d9002c17 	ldw	r4,176(sp)
811152b4:	d9801e04 	addi	r6,sp,120
811152b8:	b80b883a 	mov	r5,r23
811152bc:	111fd2c0 	call	8111fd2c <__sprint_r>
811152c0:	103b7a1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811152c4:	d8c02017 	ldw	r3,128(sp)
811152c8:	dc401f17 	ldw	r17,124(sp)
811152cc:	dd800404 	addi	r22,sp,16
811152d0:	003e8f06 	br	81114d10 <__reset+0xfb0f4d10>
811152d4:	0027883a 	mov	r19,zero
811152d8:	003f4a06 	br	81115004 <__reset+0xfb0f5004>
811152dc:	d9002c17 	ldw	r4,176(sp)
811152e0:	d9801e04 	addi	r6,sp,120
811152e4:	b80b883a 	mov	r5,r23
811152e8:	111fd2c0 	call	8111fd2c <__sprint_r>
811152ec:	103b6f1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811152f0:	d8c02017 	ldw	r3,128(sp)
811152f4:	da000404 	addi	r8,sp,16
811152f8:	003c9d06 	br	81114570 <__reset+0xfb0f4570>
811152fc:	04e7c83a 	sub	r19,zero,r19
81115300:	9804c03a 	cmpne	r2,r19,zero
81115304:	05adc83a 	sub	r22,zero,r22
81115308:	b0adc83a 	sub	r22,r22,r2
8111530c:	d8802917 	ldw	r2,164(sp)
81115310:	07000b44 	movi	fp,45
81115314:	df002785 	stb	fp,158(sp)
81115318:	10017b16 	blt	r2,zero,81115908 <___vfprintf_internal_r+0x1c6c>
8111531c:	00bfdfc4 	movi	r2,-129
81115320:	90a4703a 	and	r18,r18,r2
81115324:	003bb106 	br	811141ec <__reset+0xfb0f41ec>
81115328:	d9003617 	ldw	r4,216(sp)
8111532c:	d9403817 	ldw	r5,224(sp)
81115330:	da003d15 	stw	r8,244(sp)
81115334:	111c3900 	call	8111c390 <__fpclassifyd>
81115338:	da003d17 	ldw	r8,244(sp)
8111533c:	1000f026 	beq	r2,zero,81115700 <___vfprintf_internal_r+0x1a64>
81115340:	d9002917 	ldw	r4,164(sp)
81115344:	05bff7c4 	movi	r22,-33
81115348:	00bfffc4 	movi	r2,-1
8111534c:	8dac703a 	and	r22,r17,r22
81115350:	20820026 	beq	r4,r2,81115b54 <___vfprintf_internal_r+0x1eb8>
81115354:	008011c4 	movi	r2,71
81115358:	b081f726 	beq	r22,r2,81115b38 <___vfprintf_internal_r+0x1e9c>
8111535c:	d9003817 	ldw	r4,224(sp)
81115360:	90c04014 	ori	r3,r18,256
81115364:	d8c02b15 	stw	r3,172(sp)
81115368:	20021516 	blt	r4,zero,81115bc0 <___vfprintf_internal_r+0x1f24>
8111536c:	dcc03817 	ldw	r19,224(sp)
81115370:	d8002a05 	stb	zero,168(sp)
81115374:	00801984 	movi	r2,102
81115378:	8881f926 	beq	r17,r2,81115b60 <___vfprintf_internal_r+0x1ec4>
8111537c:	00801184 	movi	r2,70
81115380:	88821c26 	beq	r17,r2,81115bf4 <___vfprintf_internal_r+0x1f58>
81115384:	00801144 	movi	r2,69
81115388:	b081ef26 	beq	r22,r2,81115b48 <___vfprintf_internal_r+0x1eac>
8111538c:	d8c02917 	ldw	r3,164(sp)
81115390:	d8802104 	addi	r2,sp,132
81115394:	d8800315 	stw	r2,12(sp)
81115398:	d9403617 	ldw	r5,216(sp)
8111539c:	d8802504 	addi	r2,sp,148
811153a0:	d9002c17 	ldw	r4,176(sp)
811153a4:	d8800215 	stw	r2,8(sp)
811153a8:	d8802604 	addi	r2,sp,152
811153ac:	d8c00015 	stw	r3,0(sp)
811153b0:	d8800115 	stw	r2,4(sp)
811153b4:	01c00084 	movi	r7,2
811153b8:	980d883a 	mov	r6,r19
811153bc:	d8c03c15 	stw	r3,240(sp)
811153c0:	da003d15 	stw	r8,244(sp)
811153c4:	1117c480 	call	81117c48 <_dtoa_r>
811153c8:	1021883a 	mov	r16,r2
811153cc:	008019c4 	movi	r2,103
811153d0:	d8c03c17 	ldw	r3,240(sp)
811153d4:	da003d17 	ldw	r8,244(sp)
811153d8:	88817126 	beq	r17,r2,811159a0 <___vfprintf_internal_r+0x1d04>
811153dc:	008011c4 	movi	r2,71
811153e0:	88829226 	beq	r17,r2,81115e2c <___vfprintf_internal_r+0x2190>
811153e4:	80f9883a 	add	fp,r16,r3
811153e8:	d9003617 	ldw	r4,216(sp)
811153ec:	000d883a 	mov	r6,zero
811153f0:	000f883a 	mov	r7,zero
811153f4:	980b883a 	mov	r5,r19
811153f8:	da003d15 	stw	r8,244(sp)
811153fc:	11246d40 	call	811246d4 <__eqdf2>
81115400:	da003d17 	ldw	r8,244(sp)
81115404:	10018d26 	beq	r2,zero,81115a3c <___vfprintf_internal_r+0x1da0>
81115408:	d8802117 	ldw	r2,132(sp)
8111540c:	1700062e 	bgeu	r2,fp,81115428 <___vfprintf_internal_r+0x178c>
81115410:	01000c04 	movi	r4,48
81115414:	10c00044 	addi	r3,r2,1
81115418:	d8c02115 	stw	r3,132(sp)
8111541c:	11000005 	stb	r4,0(r2)
81115420:	d8802117 	ldw	r2,132(sp)
81115424:	173ffb36 	bltu	r2,fp,81115414 <__reset+0xfb0f5414>
81115428:	1405c83a 	sub	r2,r2,r16
8111542c:	d8803315 	stw	r2,204(sp)
81115430:	008011c4 	movi	r2,71
81115434:	b0817626 	beq	r22,r2,81115a10 <___vfprintf_internal_r+0x1d74>
81115438:	00801944 	movi	r2,101
8111543c:	1442810e 	bge	r2,r17,81115e44 <___vfprintf_internal_r+0x21a8>
81115440:	d8c02617 	ldw	r3,152(sp)
81115444:	00801984 	movi	r2,102
81115448:	d8c03215 	stw	r3,200(sp)
8111544c:	8881fe26 	beq	r17,r2,81115c48 <___vfprintf_internal_r+0x1fac>
81115450:	d8c03217 	ldw	r3,200(sp)
81115454:	d9003317 	ldw	r4,204(sp)
81115458:	1901dd16 	blt	r3,r4,81115bd0 <___vfprintf_internal_r+0x1f34>
8111545c:	9480004c 	andi	r18,r18,1
81115460:	90022b1e 	bne	r18,zero,81115d10 <___vfprintf_internal_r+0x2074>
81115464:	1805883a 	mov	r2,r3
81115468:	18028016 	blt	r3,zero,81115e6c <___vfprintf_internal_r+0x21d0>
8111546c:	d8c03217 	ldw	r3,200(sp)
81115470:	044019c4 	movi	r17,103
81115474:	d8c02e15 	stw	r3,184(sp)
81115478:	df002a07 	ldb	fp,168(sp)
8111547c:	e001531e 	bne	fp,zero,811159cc <___vfprintf_internal_r+0x1d30>
81115480:	df002783 	ldbu	fp,158(sp)
81115484:	d8802a15 	stw	r2,168(sp)
81115488:	dc802b17 	ldw	r18,172(sp)
8111548c:	d8002915 	stw	zero,164(sp)
81115490:	003bd106 	br	811143d8 <__reset+0xfb0f43d8>
81115494:	d8802d17 	ldw	r2,180(sp)
81115498:	d8c02d17 	ldw	r3,180(sp)
8111549c:	d9002d17 	ldw	r4,180(sp)
811154a0:	10800017 	ldw	r2,0(r2)
811154a4:	18c00117 	ldw	r3,4(r3)
811154a8:	21000204 	addi	r4,r4,8
811154ac:	d8803615 	stw	r2,216(sp)
811154b0:	d8c03815 	stw	r3,224(sp)
811154b4:	d9002d15 	stw	r4,180(sp)
811154b8:	003b7506 	br	81114290 <__reset+0xfb0f4290>
811154bc:	ac400007 	ldb	r17,0(r21)
811154c0:	003a5906 	br	81113e28 <__reset+0xfb0f3e28>
811154c4:	9080100c 	andi	r2,r18,64
811154c8:	1000a826 	beq	r2,zero,8111576c <___vfprintf_internal_r+0x1ad0>
811154cc:	d9002d17 	ldw	r4,180(sp)
811154d0:	002d883a 	mov	r22,zero
811154d4:	24c0000b 	ldhu	r19,0(r4)
811154d8:	21000104 	addi	r4,r4,4
811154dc:	d9002d15 	stw	r4,180(sp)
811154e0:	003ccb06 	br	81114810 <__reset+0xfb0f4810>
811154e4:	d8c02d17 	ldw	r3,180(sp)
811154e8:	d9002917 	ldw	r4,164(sp)
811154ec:	002d883a 	mov	r22,zero
811154f0:	18800104 	addi	r2,r3,4
811154f4:	1cc00017 	ldw	r19,0(r3)
811154f8:	203ebb0e 	bge	r4,zero,81114fe8 <__reset+0xfb0f4fe8>
811154fc:	003ef106 	br	811150c4 <__reset+0xfb0f50c4>
81115500:	9080040c 	andi	r2,r18,16
81115504:	1000921e 	bne	r2,zero,81115750 <___vfprintf_internal_r+0x1ab4>
81115508:	9480100c 	andi	r18,r18,64
8111550c:	90013926 	beq	r18,zero,811159f4 <___vfprintf_internal_r+0x1d58>
81115510:	d9002d17 	ldw	r4,180(sp)
81115514:	d9402f17 	ldw	r5,188(sp)
81115518:	20800017 	ldw	r2,0(r4)
8111551c:	21000104 	addi	r4,r4,4
81115520:	d9002d15 	stw	r4,180(sp)
81115524:	1140000d 	sth	r5,0(r2)
81115528:	003a1606 	br	81113d84 <__reset+0xfb0f3d84>
8111552c:	9080100c 	andi	r2,r18,64
81115530:	10008026 	beq	r2,zero,81115734 <___vfprintf_internal_r+0x1a98>
81115534:	d8c02d17 	ldw	r3,180(sp)
81115538:	1cc0000f 	ldh	r19,0(r3)
8111553c:	18c00104 	addi	r3,r3,4
81115540:	d8c02d15 	stw	r3,180(sp)
81115544:	982dd7fa 	srai	r22,r19,31
81115548:	b005883a 	mov	r2,r22
8111554c:	003b1f06 	br	811141cc <__reset+0xfb0f41cc>
81115550:	9080100c 	andi	r2,r18,64
81115554:	d8002785 	stb	zero,158(sp)
81115558:	10008a1e 	bne	r2,zero,81115784 <___vfprintf_internal_r+0x1ae8>
8111555c:	d9402d17 	ldw	r5,180(sp)
81115560:	d8c02917 	ldw	r3,164(sp)
81115564:	002d883a 	mov	r22,zero
81115568:	28800104 	addi	r2,r5,4
8111556c:	2cc00017 	ldw	r19,0(r5)
81115570:	183e4b0e 	bge	r3,zero,81114ea0 <__reset+0xfb0f4ea0>
81115574:	9d86b03a 	or	r3,r19,r22
81115578:	d8802d15 	stw	r2,180(sp)
8111557c:	183e4c1e 	bne	r3,zero,81114eb0 <__reset+0xfb0f4eb0>
81115580:	0039883a 	mov	fp,zero
81115584:	0005883a 	mov	r2,zero
81115588:	003d4006 	br	81114a8c <__reset+0xfb0f4a8c>
8111558c:	01604534 	movhi	r5,33044
81115590:	29711484 	addi	r5,r5,-15278
81115594:	d9402b15 	stw	r5,172(sp)
81115598:	d9402b17 	ldw	r5,172(sp)
8111559c:	1c47883a 	add	r3,r3,r17
811155a0:	10800044 	addi	r2,r2,1
811155a4:	41400015 	stw	r5,0(r8)
811155a8:	44400115 	stw	r17,4(r8)
811155ac:	d8c02015 	stw	r3,128(sp)
811155b0:	d8801f15 	stw	r2,124(sp)
811155b4:	010001c4 	movi	r4,7
811155b8:	20bec816 	blt	r4,r2,811150dc <__reset+0xfb0f50dc>
811155bc:	42000204 	addi	r8,r8,8
811155c0:	003ecd06 	br	811150f8 <__reset+0xfb0f50f8>
811155c4:	d9002917 	ldw	r4,164(sp)
811155c8:	d8002785 	stb	zero,158(sp)
811155cc:	203d2d16 	blt	r4,zero,81114a84 <__reset+0xfb0f4a84>
811155d0:	00bfdfc4 	movi	r2,-129
811155d4:	90a4703a 	and	r18,r18,r2
811155d8:	003a9106 	br	81114020 <__reset+0xfb0f4020>
811155dc:	01204534 	movhi	r4,33044
811155e0:	21311484 	addi	r4,r4,-15278
811155e4:	d9002b15 	stw	r4,172(sp)
811155e8:	003c0c06 	br	8111461c <__reset+0xfb0f461c>
811155ec:	d9002c17 	ldw	r4,176(sp)
811155f0:	d9801e04 	addi	r6,sp,120
811155f4:	b80b883a 	mov	r5,r23
811155f8:	111fd2c0 	call	8111fd2c <__sprint_r>
811155fc:	103aab1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81115600:	d8c02017 	ldw	r3,128(sp)
81115604:	da000404 	addi	r8,sp,16
81115608:	003d4106 	br	81114b10 <__reset+0xfb0f4b10>
8111560c:	d8801f17 	ldw	r2,124(sp)
81115610:	01604534 	movhi	r5,33044
81115614:	01000044 	movi	r4,1
81115618:	18c00044 	addi	r3,r3,1
8111561c:	10800044 	addi	r2,r2,1
81115620:	29710c04 	addi	r5,r5,-15312
81115624:	41000115 	stw	r4,4(r8)
81115628:	41400015 	stw	r5,0(r8)
8111562c:	d8c02015 	stw	r3,128(sp)
81115630:	d8801f15 	stw	r2,124(sp)
81115634:	010001c4 	movi	r4,7
81115638:	20805c16 	blt	r4,r2,811157ac <___vfprintf_internal_r+0x1b10>
8111563c:	42000204 	addi	r8,r8,8
81115640:	8800041e 	bne	r17,zero,81115654 <___vfprintf_internal_r+0x19b8>
81115644:	d8803317 	ldw	r2,204(sp)
81115648:	1000021e 	bne	r2,zero,81115654 <___vfprintf_internal_r+0x19b8>
8111564c:	9080004c 	andi	r2,r18,1
81115650:	103c0926 	beq	r2,zero,81114678 <__reset+0xfb0f4678>
81115654:	d9003717 	ldw	r4,220(sp)
81115658:	d8801f17 	ldw	r2,124(sp)
8111565c:	d9403417 	ldw	r5,208(sp)
81115660:	20c7883a 	add	r3,r4,r3
81115664:	10800044 	addi	r2,r2,1
81115668:	41000115 	stw	r4,4(r8)
8111566c:	41400015 	stw	r5,0(r8)
81115670:	d8c02015 	stw	r3,128(sp)
81115674:	d8801f15 	stw	r2,124(sp)
81115678:	010001c4 	movi	r4,7
8111567c:	20812116 	blt	r4,r2,81115b04 <___vfprintf_internal_r+0x1e68>
81115680:	42000204 	addi	r8,r8,8
81115684:	0463c83a 	sub	r17,zero,r17
81115688:	0440730e 	bge	zero,r17,81115858 <___vfprintf_internal_r+0x1bbc>
8111568c:	05800404 	movi	r22,16
81115690:	b440860e 	bge	r22,r17,811158ac <___vfprintf_internal_r+0x1c10>
81115694:	01604534 	movhi	r5,33044
81115698:	29711484 	addi	r5,r5,-15278
8111569c:	d9402b15 	stw	r5,172(sp)
811156a0:	070001c4 	movi	fp,7
811156a4:	dcc02c17 	ldw	r19,176(sp)
811156a8:	00000306 	br	811156b8 <___vfprintf_internal_r+0x1a1c>
811156ac:	42000204 	addi	r8,r8,8
811156b0:	8c7ffc04 	addi	r17,r17,-16
811156b4:	b440800e 	bge	r22,r17,811158b8 <___vfprintf_internal_r+0x1c1c>
811156b8:	18c00404 	addi	r3,r3,16
811156bc:	10800044 	addi	r2,r2,1
811156c0:	45000015 	stw	r20,0(r8)
811156c4:	45800115 	stw	r22,4(r8)
811156c8:	d8c02015 	stw	r3,128(sp)
811156cc:	d8801f15 	stw	r2,124(sp)
811156d0:	e0bff60e 	bge	fp,r2,811156ac <__reset+0xfb0f56ac>
811156d4:	d9801e04 	addi	r6,sp,120
811156d8:	b80b883a 	mov	r5,r23
811156dc:	9809883a 	mov	r4,r19
811156e0:	111fd2c0 	call	8111fd2c <__sprint_r>
811156e4:	103a711e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811156e8:	d8c02017 	ldw	r3,128(sp)
811156ec:	d8801f17 	ldw	r2,124(sp)
811156f0:	da000404 	addi	r8,sp,16
811156f4:	003fee06 	br	811156b0 <__reset+0xfb0f56b0>
811156f8:	00bfffc4 	movi	r2,-1
811156fc:	003a6f06 	br	811140bc <__reset+0xfb0f40bc>
81115700:	008011c4 	movi	r2,71
81115704:	1440b816 	blt	r2,r17,811159e8 <___vfprintf_internal_r+0x1d4c>
81115708:	04204534 	movhi	r16,33044
8111570c:	8430fe04 	addi	r16,r16,-15368
81115710:	00c000c4 	movi	r3,3
81115714:	00bfdfc4 	movi	r2,-129
81115718:	d8c02a15 	stw	r3,168(sp)
8111571c:	90a4703a 	and	r18,r18,r2
81115720:	df002783 	ldbu	fp,158(sp)
81115724:	d8c02e15 	stw	r3,184(sp)
81115728:	d8002915 	stw	zero,164(sp)
8111572c:	d8003215 	stw	zero,200(sp)
81115730:	003b2906 	br	811143d8 <__reset+0xfb0f43d8>
81115734:	d9002d17 	ldw	r4,180(sp)
81115738:	24c00017 	ldw	r19,0(r4)
8111573c:	21000104 	addi	r4,r4,4
81115740:	d9002d15 	stw	r4,180(sp)
81115744:	982dd7fa 	srai	r22,r19,31
81115748:	b005883a 	mov	r2,r22
8111574c:	003a9f06 	br	811141cc <__reset+0xfb0f41cc>
81115750:	d9402d17 	ldw	r5,180(sp)
81115754:	d8c02f17 	ldw	r3,188(sp)
81115758:	28800017 	ldw	r2,0(r5)
8111575c:	29400104 	addi	r5,r5,4
81115760:	d9402d15 	stw	r5,180(sp)
81115764:	10c00015 	stw	r3,0(r2)
81115768:	00398606 	br	81113d84 <__reset+0xfb0f3d84>
8111576c:	d9402d17 	ldw	r5,180(sp)
81115770:	002d883a 	mov	r22,zero
81115774:	2cc00017 	ldw	r19,0(r5)
81115778:	29400104 	addi	r5,r5,4
8111577c:	d9402d15 	stw	r5,180(sp)
81115780:	003c2306 	br	81114810 <__reset+0xfb0f4810>
81115784:	d8c02d17 	ldw	r3,180(sp)
81115788:	d9002917 	ldw	r4,164(sp)
8111578c:	002d883a 	mov	r22,zero
81115790:	18800104 	addi	r2,r3,4
81115794:	1cc0000b 	ldhu	r19,0(r3)
81115798:	203dc10e 	bge	r4,zero,81114ea0 <__reset+0xfb0f4ea0>
8111579c:	003f7506 	br	81115574 <__reset+0xfb0f5574>
811157a0:	04204534 	movhi	r16,33044
811157a4:	8430fc04 	addi	r16,r16,-15376
811157a8:	003acc06 	br	811142dc <__reset+0xfb0f42dc>
811157ac:	d9002c17 	ldw	r4,176(sp)
811157b0:	d9801e04 	addi	r6,sp,120
811157b4:	b80b883a 	mov	r5,r23
811157b8:	111fd2c0 	call	8111fd2c <__sprint_r>
811157bc:	103a3b1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811157c0:	dc402617 	ldw	r17,152(sp)
811157c4:	d8c02017 	ldw	r3,128(sp)
811157c8:	da000404 	addi	r8,sp,16
811157cc:	003f9c06 	br	81115640 <__reset+0xfb0f5640>
811157d0:	ac400043 	ldbu	r17,1(r21)
811157d4:	94800814 	ori	r18,r18,32
811157d8:	ad400044 	addi	r21,r21,1
811157dc:	8c403fcc 	andi	r17,r17,255
811157e0:	8c40201c 	xori	r17,r17,128
811157e4:	8c7fe004 	addi	r17,r17,-128
811157e8:	00398f06 	br	81113e28 <__reset+0xfb0f3e28>
811157ec:	d8c02d15 	stw	r3,180(sp)
811157f0:	0039883a 	mov	fp,zero
811157f4:	003e3506 	br	811150cc <__reset+0xfb0f50cc>
811157f8:	d9002c17 	ldw	r4,176(sp)
811157fc:	d9801e04 	addi	r6,sp,120
81115800:	b80b883a 	mov	r5,r23
81115804:	111fd2c0 	call	8111fd2c <__sprint_r>
81115808:	103a281e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
8111580c:	d8c02017 	ldw	r3,128(sp)
81115810:	da000404 	addi	r8,sp,16
81115814:	003cd006 	br	81114b58 <__reset+0xfb0f4b58>
81115818:	8009883a 	mov	r4,r16
8111581c:	da003d15 	stw	r8,244(sp)
81115820:	11117c80 	call	811117c8 <strlen>
81115824:	d8802e15 	stw	r2,184(sp)
81115828:	da003d17 	ldw	r8,244(sp)
8111582c:	103c340e 	bge	r2,zero,81114900 <__reset+0xfb0f4900>
81115830:	0005883a 	mov	r2,zero
81115834:	003c3206 	br	81114900 <__reset+0xfb0f4900>
81115838:	d9002c17 	ldw	r4,176(sp)
8111583c:	d9801e04 	addi	r6,sp,120
81115840:	b80b883a 	mov	r5,r23
81115844:	111fd2c0 	call	8111fd2c <__sprint_r>
81115848:	103a181e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
8111584c:	d8c02017 	ldw	r3,128(sp)
81115850:	d8801f17 	ldw	r2,124(sp)
81115854:	da000404 	addi	r8,sp,16
81115858:	d9403317 	ldw	r5,204(sp)
8111585c:	10800044 	addi	r2,r2,1
81115860:	44000015 	stw	r16,0(r8)
81115864:	28c7883a 	add	r3,r5,r3
81115868:	003b7d06 	br	81114660 <__reset+0xfb0f4660>
8111586c:	01204534 	movhi	r4,33044
81115870:	21311884 	addi	r4,r4,-15262
81115874:	d9003515 	stw	r4,212(sp)
81115878:	003b1406 	br	811144cc <__reset+0xfb0f44cc>
8111587c:	013fffc4 	movi	r4,-1
81115880:	003a3506 	br	81114158 <__reset+0xfb0f4158>
81115884:	0023883a 	mov	r17,zero
81115888:	003d9d06 	br	81114f00 <__reset+0xfb0f4f00>
8111588c:	d9002c17 	ldw	r4,176(sp)
81115890:	d9801e04 	addi	r6,sp,120
81115894:	b80b883a 	mov	r5,r23
81115898:	111fd2c0 	call	8111fd2c <__sprint_r>
8111589c:	103a031e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811158a0:	d8c02017 	ldw	r3,128(sp)
811158a4:	da000404 	addi	r8,sp,16
811158a8:	003d9406 	br	81114efc <__reset+0xfb0f4efc>
811158ac:	01204534 	movhi	r4,33044
811158b0:	21311484 	addi	r4,r4,-15278
811158b4:	d9002b15 	stw	r4,172(sp)
811158b8:	d9002b17 	ldw	r4,172(sp)
811158bc:	1c47883a 	add	r3,r3,r17
811158c0:	10800044 	addi	r2,r2,1
811158c4:	41000015 	stw	r4,0(r8)
811158c8:	44400115 	stw	r17,4(r8)
811158cc:	d8c02015 	stw	r3,128(sp)
811158d0:	d8801f15 	stw	r2,124(sp)
811158d4:	010001c4 	movi	r4,7
811158d8:	20bfd716 	blt	r4,r2,81115838 <__reset+0xfb0f5838>
811158dc:	42000204 	addi	r8,r8,8
811158e0:	003fdd06 	br	81115858 <__reset+0xfb0f5858>
811158e4:	d9002c17 	ldw	r4,176(sp)
811158e8:	d9801e04 	addi	r6,sp,120
811158ec:	b80b883a 	mov	r5,r23
811158f0:	111fd2c0 	call	8111fd2c <__sprint_r>
811158f4:	1039ed1e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
811158f8:	d8802617 	ldw	r2,152(sp)
811158fc:	d8c02017 	ldw	r3,128(sp)
81115900:	da000404 	addi	r8,sp,16
81115904:	003e1006 	br	81115148 <__reset+0xfb0f5148>
81115908:	00800044 	movi	r2,1
8111590c:	10803fcc 	andi	r2,r2,255
81115910:	00c00044 	movi	r3,1
81115914:	10fa3526 	beq	r2,r3,811141ec <__reset+0xfb0f41ec>
81115918:	00c00084 	movi	r3,2
8111591c:	10fbcb26 	beq	r2,r3,8111484c <__reset+0xfb0f484c>
81115920:	003a8f06 	br	81114360 <__reset+0xfb0f4360>
81115924:	01204534 	movhi	r4,33044
81115928:	21311884 	addi	r4,r4,-15262
8111592c:	d9003515 	stw	r4,212(sp)
81115930:	003b7606 	br	8111470c <__reset+0xfb0f470c>
81115934:	d8802917 	ldw	r2,164(sp)
81115938:	00c00184 	movi	r3,6
8111593c:	1880012e 	bgeu	r3,r2,81115944 <___vfprintf_internal_r+0x1ca8>
81115940:	1805883a 	mov	r2,r3
81115944:	d8802e15 	stw	r2,184(sp)
81115948:	1000ef16 	blt	r2,zero,81115d08 <___vfprintf_internal_r+0x206c>
8111594c:	04204534 	movhi	r16,33044
81115950:	d8802a15 	stw	r2,168(sp)
81115954:	dcc02d15 	stw	r19,180(sp)
81115958:	d8002915 	stw	zero,164(sp)
8111595c:	d8003215 	stw	zero,200(sp)
81115960:	84310a04 	addi	r16,r16,-15320
81115964:	0039883a 	mov	fp,zero
81115968:	003aa206 	br	811143f4 <__reset+0xfb0f43f4>
8111596c:	0021883a 	mov	r16,zero
81115970:	003e0706 	br	81115190 <__reset+0xfb0f5190>
81115974:	d9002c17 	ldw	r4,176(sp)
81115978:	d9801e04 	addi	r6,sp,120
8111597c:	b80b883a 	mov	r5,r23
81115980:	111fd2c0 	call	8111fd2c <__sprint_r>
81115984:	1039c91e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81115988:	d8802617 	ldw	r2,152(sp)
8111598c:	d9403317 	ldw	r5,204(sp)
81115990:	d8c02017 	ldw	r3,128(sp)
81115994:	da000404 	addi	r8,sp,16
81115998:	2885c83a 	sub	r2,r5,r2
8111599c:	003dfb06 	br	8111518c <__reset+0xfb0f518c>
811159a0:	9080004c 	andi	r2,r18,1
811159a4:	103e8f1e 	bne	r2,zero,811153e4 <__reset+0xfb0f53e4>
811159a8:	d8802117 	ldw	r2,132(sp)
811159ac:	003e9e06 	br	81115428 <__reset+0xfb0f5428>
811159b0:	1025883a 	mov	r18,r2
811159b4:	0039883a 	mov	fp,zero
811159b8:	00800084 	movi	r2,2
811159bc:	003fd306 	br	8111590c <__reset+0xfb0f590c>
811159c0:	07000b44 	movi	fp,45
811159c4:	df002785 	stb	fp,158(sp)
811159c8:	003a4006 	br	811142cc <__reset+0xfb0f42cc>
811159cc:	00c00b44 	movi	r3,45
811159d0:	d8c02785 	stb	r3,158(sp)
811159d4:	d8802a15 	stw	r2,168(sp)
811159d8:	dc802b17 	ldw	r18,172(sp)
811159dc:	d8002915 	stw	zero,164(sp)
811159e0:	07000b44 	movi	fp,45
811159e4:	003a8006 	br	811143e8 <__reset+0xfb0f43e8>
811159e8:	04204534 	movhi	r16,33044
811159ec:	8430ff04 	addi	r16,r16,-15364
811159f0:	003f4706 	br	81115710 <__reset+0xfb0f5710>
811159f4:	d8c02d17 	ldw	r3,180(sp)
811159f8:	d9002f17 	ldw	r4,188(sp)
811159fc:	18800017 	ldw	r2,0(r3)
81115a00:	18c00104 	addi	r3,r3,4
81115a04:	d8c02d15 	stw	r3,180(sp)
81115a08:	11000015 	stw	r4,0(r2)
81115a0c:	0038dd06 	br	81113d84 <__reset+0xfb0f3d84>
81115a10:	dd802617 	ldw	r22,152(sp)
81115a14:	00bfff44 	movi	r2,-3
81115a18:	b0801c16 	blt	r22,r2,81115a8c <___vfprintf_internal_r+0x1df0>
81115a1c:	d9402917 	ldw	r5,164(sp)
81115a20:	2d801a16 	blt	r5,r22,81115a8c <___vfprintf_internal_r+0x1df0>
81115a24:	dd803215 	stw	r22,200(sp)
81115a28:	003e8906 	br	81115450 <__reset+0xfb0f5450>
81115a2c:	01204534 	movhi	r4,33044
81115a30:	21311484 	addi	r4,r4,-15278
81115a34:	d9002b15 	stw	r4,172(sp)
81115a38:	003c9106 	br	81114c80 <__reset+0xfb0f4c80>
81115a3c:	e005883a 	mov	r2,fp
81115a40:	003e7906 	br	81115428 <__reset+0xfb0f5428>
81115a44:	d9402917 	ldw	r5,164(sp)
81115a48:	df002783 	ldbu	fp,158(sp)
81115a4c:	dcc02d15 	stw	r19,180(sp)
81115a50:	d9402a15 	stw	r5,168(sp)
81115a54:	d9402e15 	stw	r5,184(sp)
81115a58:	d8002915 	stw	zero,164(sp)
81115a5c:	d8003215 	stw	zero,200(sp)
81115a60:	003a5d06 	br	811143d8 <__reset+0xfb0f43d8>
81115a64:	9080004c 	andi	r2,r18,1
81115a68:	0039883a 	mov	fp,zero
81115a6c:	10000426 	beq	r2,zero,81115a80 <___vfprintf_internal_r+0x1de4>
81115a70:	00800c04 	movi	r2,48
81115a74:	dc001dc4 	addi	r16,sp,119
81115a78:	d8801dc5 	stb	r2,119(sp)
81115a7c:	003b8006 	br	81114880 <__reset+0xfb0f4880>
81115a80:	d8002e15 	stw	zero,184(sp)
81115a84:	dc001e04 	addi	r16,sp,120
81115a88:	003a4d06 	br	811143c0 <__reset+0xfb0f43c0>
81115a8c:	8c7fff84 	addi	r17,r17,-2
81115a90:	b5bfffc4 	addi	r22,r22,-1
81115a94:	dd802615 	stw	r22,152(sp)
81115a98:	dc4022c5 	stb	r17,139(sp)
81115a9c:	b000bf16 	blt	r22,zero,81115d9c <___vfprintf_internal_r+0x2100>
81115aa0:	00800ac4 	movi	r2,43
81115aa4:	d8802305 	stb	r2,140(sp)
81115aa8:	00800244 	movi	r2,9
81115aac:	15807016 	blt	r2,r22,81115c70 <___vfprintf_internal_r+0x1fd4>
81115ab0:	00800c04 	movi	r2,48
81115ab4:	b5800c04 	addi	r22,r22,48
81115ab8:	d8802345 	stb	r2,141(sp)
81115abc:	dd802385 	stb	r22,142(sp)
81115ac0:	d88023c4 	addi	r2,sp,143
81115ac4:	df0022c4 	addi	fp,sp,139
81115ac8:	d8c03317 	ldw	r3,204(sp)
81115acc:	1739c83a 	sub	fp,r2,fp
81115ad0:	d9003317 	ldw	r4,204(sp)
81115ad4:	e0c7883a 	add	r3,fp,r3
81115ad8:	df003a15 	stw	fp,232(sp)
81115adc:	d8c02e15 	stw	r3,184(sp)
81115ae0:	00800044 	movi	r2,1
81115ae4:	1100b30e 	bge	r2,r4,81115db4 <___vfprintf_internal_r+0x2118>
81115ae8:	d8c02e17 	ldw	r3,184(sp)
81115aec:	18c00044 	addi	r3,r3,1
81115af0:	d8c02e15 	stw	r3,184(sp)
81115af4:	1805883a 	mov	r2,r3
81115af8:	1800ac16 	blt	r3,zero,81115dac <___vfprintf_internal_r+0x2110>
81115afc:	d8003215 	stw	zero,200(sp)
81115b00:	003e5d06 	br	81115478 <__reset+0xfb0f5478>
81115b04:	d9002c17 	ldw	r4,176(sp)
81115b08:	d9801e04 	addi	r6,sp,120
81115b0c:	b80b883a 	mov	r5,r23
81115b10:	111fd2c0 	call	8111fd2c <__sprint_r>
81115b14:	1039651e 	bne	r2,zero,811140ac <__reset+0xfb0f40ac>
81115b18:	dc402617 	ldw	r17,152(sp)
81115b1c:	d8c02017 	ldw	r3,128(sp)
81115b20:	d8801f17 	ldw	r2,124(sp)
81115b24:	da000404 	addi	r8,sp,16
81115b28:	003ed606 	br	81115684 <__reset+0xfb0f5684>
81115b2c:	582b883a 	mov	r21,r11
81115b30:	d8002915 	stw	zero,164(sp)
81115b34:	0038bd06 	br	81113e2c <__reset+0xfb0f3e2c>
81115b38:	d8802917 	ldw	r2,164(sp)
81115b3c:	103e071e 	bne	r2,zero,8111535c <__reset+0xfb0f535c>
81115b40:	dc002915 	stw	r16,164(sp)
81115b44:	003e0506 	br	8111535c <__reset+0xfb0f535c>
81115b48:	d9002917 	ldw	r4,164(sp)
81115b4c:	20c00044 	addi	r3,r4,1
81115b50:	003e0f06 	br	81115390 <__reset+0xfb0f5390>
81115b54:	01400184 	movi	r5,6
81115b58:	d9402915 	stw	r5,164(sp)
81115b5c:	003dff06 	br	8111535c <__reset+0xfb0f535c>
81115b60:	d8802104 	addi	r2,sp,132
81115b64:	d8800315 	stw	r2,12(sp)
81115b68:	d8802504 	addi	r2,sp,148
81115b6c:	d8800215 	stw	r2,8(sp)
81115b70:	d8802604 	addi	r2,sp,152
81115b74:	d8800115 	stw	r2,4(sp)
81115b78:	d8802917 	ldw	r2,164(sp)
81115b7c:	d9403617 	ldw	r5,216(sp)
81115b80:	d9002c17 	ldw	r4,176(sp)
81115b84:	d8800015 	stw	r2,0(sp)
81115b88:	01c000c4 	movi	r7,3
81115b8c:	980d883a 	mov	r6,r19
81115b90:	da003d15 	stw	r8,244(sp)
81115b94:	1117c480 	call	81117c48 <_dtoa_r>
81115b98:	d8c02917 	ldw	r3,164(sp)
81115b9c:	da003d17 	ldw	r8,244(sp)
81115ba0:	1021883a 	mov	r16,r2
81115ba4:	10f9883a 	add	fp,r2,r3
81115ba8:	81000007 	ldb	r4,0(r16)
81115bac:	00800c04 	movi	r2,48
81115bb0:	20805e26 	beq	r4,r2,81115d2c <___vfprintf_internal_r+0x2090>
81115bb4:	d8c02617 	ldw	r3,152(sp)
81115bb8:	e0f9883a 	add	fp,fp,r3
81115bbc:	003e0a06 	br	811153e8 <__reset+0xfb0f53e8>
81115bc0:	00c00b44 	movi	r3,45
81115bc4:	24e0003c 	xorhi	r19,r4,32768
81115bc8:	d8c02a05 	stb	r3,168(sp)
81115bcc:	003de906 	br	81115374 <__reset+0xfb0f5374>
81115bd0:	d8c03217 	ldw	r3,200(sp)
81115bd4:	00c07a0e 	bge	zero,r3,81115dc0 <___vfprintf_internal_r+0x2124>
81115bd8:	00800044 	movi	r2,1
81115bdc:	d9003317 	ldw	r4,204(sp)
81115be0:	1105883a 	add	r2,r2,r4
81115be4:	d8802e15 	stw	r2,184(sp)
81115be8:	10004e16 	blt	r2,zero,81115d24 <___vfprintf_internal_r+0x2088>
81115bec:	044019c4 	movi	r17,103
81115bf0:	003e2106 	br	81115478 <__reset+0xfb0f5478>
81115bf4:	d9002917 	ldw	r4,164(sp)
81115bf8:	d8802104 	addi	r2,sp,132
81115bfc:	d8800315 	stw	r2,12(sp)
81115c00:	d9000015 	stw	r4,0(sp)
81115c04:	d8802504 	addi	r2,sp,148
81115c08:	d9403617 	ldw	r5,216(sp)
81115c0c:	d9002c17 	ldw	r4,176(sp)
81115c10:	d8800215 	stw	r2,8(sp)
81115c14:	d8802604 	addi	r2,sp,152
81115c18:	d8800115 	stw	r2,4(sp)
81115c1c:	01c000c4 	movi	r7,3
81115c20:	980d883a 	mov	r6,r19
81115c24:	da003d15 	stw	r8,244(sp)
81115c28:	1117c480 	call	81117c48 <_dtoa_r>
81115c2c:	d8c02917 	ldw	r3,164(sp)
81115c30:	da003d17 	ldw	r8,244(sp)
81115c34:	1021883a 	mov	r16,r2
81115c38:	00801184 	movi	r2,70
81115c3c:	80f9883a 	add	fp,r16,r3
81115c40:	88bfd926 	beq	r17,r2,81115ba8 <__reset+0xfb0f5ba8>
81115c44:	003de806 	br	811153e8 <__reset+0xfb0f53e8>
81115c48:	d9002917 	ldw	r4,164(sp)
81115c4c:	00c04d0e 	bge	zero,r3,81115d84 <___vfprintf_internal_r+0x20e8>
81115c50:	2000441e 	bne	r4,zero,81115d64 <___vfprintf_internal_r+0x20c8>
81115c54:	9480004c 	andi	r18,r18,1
81115c58:	9000421e 	bne	r18,zero,81115d64 <___vfprintf_internal_r+0x20c8>
81115c5c:	1805883a 	mov	r2,r3
81115c60:	18007016 	blt	r3,zero,81115e24 <___vfprintf_internal_r+0x2188>
81115c64:	d8c03217 	ldw	r3,200(sp)
81115c68:	d8c02e15 	stw	r3,184(sp)
81115c6c:	003e0206 	br	81115478 <__reset+0xfb0f5478>
81115c70:	df0022c4 	addi	fp,sp,139
81115c74:	dc002915 	stw	r16,164(sp)
81115c78:	4027883a 	mov	r19,r8
81115c7c:	e021883a 	mov	r16,fp
81115c80:	b009883a 	mov	r4,r22
81115c84:	01400284 	movi	r5,10
81115c88:	11232040 	call	81123204 <__modsi3>
81115c8c:	10800c04 	addi	r2,r2,48
81115c90:	843fffc4 	addi	r16,r16,-1
81115c94:	b009883a 	mov	r4,r22
81115c98:	01400284 	movi	r5,10
81115c9c:	80800005 	stb	r2,0(r16)
81115ca0:	11231800 	call	81123180 <__divsi3>
81115ca4:	102d883a 	mov	r22,r2
81115ca8:	00800244 	movi	r2,9
81115cac:	15bff416 	blt	r2,r22,81115c80 <__reset+0xfb0f5c80>
81115cb0:	9811883a 	mov	r8,r19
81115cb4:	b0800c04 	addi	r2,r22,48
81115cb8:	8027883a 	mov	r19,r16
81115cbc:	997fffc4 	addi	r5,r19,-1
81115cc0:	98bfffc5 	stb	r2,-1(r19)
81115cc4:	dc002917 	ldw	r16,164(sp)
81115cc8:	2f006a2e 	bgeu	r5,fp,81115e74 <___vfprintf_internal_r+0x21d8>
81115ccc:	d9c02384 	addi	r7,sp,142
81115cd0:	3ccfc83a 	sub	r7,r7,r19
81115cd4:	d9002344 	addi	r4,sp,141
81115cd8:	e1cf883a 	add	r7,fp,r7
81115cdc:	00000106 	br	81115ce4 <___vfprintf_internal_r+0x2048>
81115ce0:	28800003 	ldbu	r2,0(r5)
81115ce4:	20800005 	stb	r2,0(r4)
81115ce8:	21000044 	addi	r4,r4,1
81115cec:	29400044 	addi	r5,r5,1
81115cf0:	393ffb1e 	bne	r7,r4,81115ce0 <__reset+0xfb0f5ce0>
81115cf4:	d8802304 	addi	r2,sp,140
81115cf8:	14c5c83a 	sub	r2,r2,r19
81115cfc:	d8c02344 	addi	r3,sp,141
81115d00:	1885883a 	add	r2,r3,r2
81115d04:	003f7006 	br	81115ac8 <__reset+0xfb0f5ac8>
81115d08:	0005883a 	mov	r2,zero
81115d0c:	003f0f06 	br	8111594c <__reset+0xfb0f594c>
81115d10:	d8c03217 	ldw	r3,200(sp)
81115d14:	18c00044 	addi	r3,r3,1
81115d18:	d8c02e15 	stw	r3,184(sp)
81115d1c:	1805883a 	mov	r2,r3
81115d20:	183fb20e 	bge	r3,zero,81115bec <__reset+0xfb0f5bec>
81115d24:	0005883a 	mov	r2,zero
81115d28:	003fb006 	br	81115bec <__reset+0xfb0f5bec>
81115d2c:	d9003617 	ldw	r4,216(sp)
81115d30:	000d883a 	mov	r6,zero
81115d34:	000f883a 	mov	r7,zero
81115d38:	980b883a 	mov	r5,r19
81115d3c:	d8c03c15 	stw	r3,240(sp)
81115d40:	da003d15 	stw	r8,244(sp)
81115d44:	11246d40 	call	811246d4 <__eqdf2>
81115d48:	d8c03c17 	ldw	r3,240(sp)
81115d4c:	da003d17 	ldw	r8,244(sp)
81115d50:	103f9826 	beq	r2,zero,81115bb4 <__reset+0xfb0f5bb4>
81115d54:	00800044 	movi	r2,1
81115d58:	10c7c83a 	sub	r3,r2,r3
81115d5c:	d8c02615 	stw	r3,152(sp)
81115d60:	003f9506 	br	81115bb8 <__reset+0xfb0f5bb8>
81115d64:	d9002917 	ldw	r4,164(sp)
81115d68:	d8c03217 	ldw	r3,200(sp)
81115d6c:	20800044 	addi	r2,r4,1
81115d70:	1885883a 	add	r2,r3,r2
81115d74:	d8802e15 	stw	r2,184(sp)
81115d78:	103dbf0e 	bge	r2,zero,81115478 <__reset+0xfb0f5478>
81115d7c:	0005883a 	mov	r2,zero
81115d80:	003dbd06 	br	81115478 <__reset+0xfb0f5478>
81115d84:	2000211e 	bne	r4,zero,81115e0c <___vfprintf_internal_r+0x2170>
81115d88:	9480004c 	andi	r18,r18,1
81115d8c:	90001f1e 	bne	r18,zero,81115e0c <___vfprintf_internal_r+0x2170>
81115d90:	00800044 	movi	r2,1
81115d94:	d8802e15 	stw	r2,184(sp)
81115d98:	003db706 	br	81115478 <__reset+0xfb0f5478>
81115d9c:	00800b44 	movi	r2,45
81115da0:	05adc83a 	sub	r22,zero,r22
81115da4:	d8802305 	stb	r2,140(sp)
81115da8:	003f3f06 	br	81115aa8 <__reset+0xfb0f5aa8>
81115dac:	0005883a 	mov	r2,zero
81115db0:	003f5206 	br	81115afc <__reset+0xfb0f5afc>
81115db4:	90a4703a 	and	r18,r18,r2
81115db8:	903f4e26 	beq	r18,zero,81115af4 <__reset+0xfb0f5af4>
81115dbc:	003f4a06 	br	81115ae8 <__reset+0xfb0f5ae8>
81115dc0:	00800084 	movi	r2,2
81115dc4:	10c5c83a 	sub	r2,r2,r3
81115dc8:	003f8406 	br	81115bdc <__reset+0xfb0f5bdc>
81115dcc:	d8802d17 	ldw	r2,180(sp)
81115dd0:	d9002d17 	ldw	r4,180(sp)
81115dd4:	ac400043 	ldbu	r17,1(r21)
81115dd8:	10800017 	ldw	r2,0(r2)
81115ddc:	582b883a 	mov	r21,r11
81115de0:	d8802915 	stw	r2,164(sp)
81115de4:	20800104 	addi	r2,r4,4
81115de8:	d9002917 	ldw	r4,164(sp)
81115dec:	d8802d15 	stw	r2,180(sp)
81115df0:	203e7a0e 	bge	r4,zero,811157dc <__reset+0xfb0f57dc>
81115df4:	8c403fcc 	andi	r17,r17,255
81115df8:	00bfffc4 	movi	r2,-1
81115dfc:	8c40201c 	xori	r17,r17,128
81115e00:	d8802915 	stw	r2,164(sp)
81115e04:	8c7fe004 	addi	r17,r17,-128
81115e08:	00380706 	br	81113e28 <__reset+0xfb0f3e28>
81115e0c:	d8c02917 	ldw	r3,164(sp)
81115e10:	18c00084 	addi	r3,r3,2
81115e14:	d8c02e15 	stw	r3,184(sp)
81115e18:	1805883a 	mov	r2,r3
81115e1c:	183d960e 	bge	r3,zero,81115478 <__reset+0xfb0f5478>
81115e20:	003fd606 	br	81115d7c <__reset+0xfb0f5d7c>
81115e24:	0005883a 	mov	r2,zero
81115e28:	003f8e06 	br	81115c64 <__reset+0xfb0f5c64>
81115e2c:	9080004c 	andi	r2,r18,1
81115e30:	103f811e 	bne	r2,zero,81115c38 <__reset+0xfb0f5c38>
81115e34:	d8802117 	ldw	r2,132(sp)
81115e38:	1405c83a 	sub	r2,r2,r16
81115e3c:	d8803315 	stw	r2,204(sp)
81115e40:	b47ef326 	beq	r22,r17,81115a10 <__reset+0xfb0f5a10>
81115e44:	dd802617 	ldw	r22,152(sp)
81115e48:	003f1106 	br	81115a90 <__reset+0xfb0f5a90>
81115e4c:	d9c02785 	stb	r7,158(sp)
81115e50:	00390406 	br	81114264 <__reset+0xfb0f4264>
81115e54:	d9c02785 	stb	r7,158(sp)
81115e58:	0038d306 	br	811141a8 <__reset+0xfb0f41a8>
81115e5c:	d9c02785 	stb	r7,158(sp)
81115e60:	003a6106 	br	811147e8 <__reset+0xfb0f47e8>
81115e64:	d9c02785 	stb	r7,158(sp)
81115e68:	003af806 	br	81114a4c <__reset+0xfb0f4a4c>
81115e6c:	0005883a 	mov	r2,zero
81115e70:	003d7e06 	br	8111546c <__reset+0xfb0f546c>
81115e74:	d8802344 	addi	r2,sp,141
81115e78:	003f1306 	br	81115ac8 <__reset+0xfb0f5ac8>
81115e7c:	d9c02785 	stb	r7,158(sp)
81115e80:	00392306 	br	81114310 <__reset+0xfb0f4310>
81115e84:	d9c02785 	stb	r7,158(sp)
81115e88:	003aa906 	br	81114930 <__reset+0xfb0f4930>
81115e8c:	d9c02785 	stb	r7,158(sp)
81115e90:	003a3d06 	br	81114788 <__reset+0xfb0f4788>
81115e94:	d9c02785 	stb	r7,158(sp)
81115e98:	003aca06 	br	811149c4 <__reset+0xfb0f49c4>

81115e9c <__vfprintf_internal>:
81115e9c:	00a04534 	movhi	r2,33044
81115ea0:	10ba0604 	addi	r2,r2,-6120
81115ea4:	300f883a 	mov	r7,r6
81115ea8:	280d883a 	mov	r6,r5
81115eac:	200b883a 	mov	r5,r4
81115eb0:	11000017 	ldw	r4,0(r2)
81115eb4:	1113c9c1 	jmpi	81113c9c <___vfprintf_internal_r>

81115eb8 <__sbprintf>:
81115eb8:	defee204 	addi	sp,sp,-1144
81115ebc:	de00012e 	bgeu	sp,et,81115ec4 <__sbprintf+0xc>
81115ec0:	003b68fa 	trap	3
81115ec4:	2880030b 	ldhu	r2,12(r5)
81115ec8:	2ac01917 	ldw	r11,100(r5)
81115ecc:	2a80038b 	ldhu	r10,14(r5)
81115ed0:	2a400717 	ldw	r9,28(r5)
81115ed4:	2a000917 	ldw	r8,36(r5)
81115ed8:	00c10004 	movi	r3,1024
81115edc:	dc011a15 	stw	r16,1128(sp)
81115ee0:	10bfff4c 	andi	r2,r2,65533
81115ee4:	2821883a 	mov	r16,r5
81115ee8:	d8cb883a 	add	r5,sp,r3
81115eec:	dc811c15 	stw	r18,1136(sp)
81115ef0:	dc411b15 	stw	r17,1132(sp)
81115ef4:	dfc11d15 	stw	ra,1140(sp)
81115ef8:	2025883a 	mov	r18,r4
81115efc:	d881030d 	sth	r2,1036(sp)
81115f00:	dac11915 	stw	r11,1124(sp)
81115f04:	da81038d 	sth	r10,1038(sp)
81115f08:	da410715 	stw	r9,1052(sp)
81115f0c:	da010915 	stw	r8,1060(sp)
81115f10:	dec10015 	stw	sp,1024(sp)
81115f14:	dec10415 	stw	sp,1040(sp)
81115f18:	d8c10215 	stw	r3,1032(sp)
81115f1c:	d8c10515 	stw	r3,1044(sp)
81115f20:	d8010615 	stw	zero,1048(sp)
81115f24:	1113c9c0 	call	81113c9c <___vfprintf_internal_r>
81115f28:	1023883a 	mov	r17,r2
81115f2c:	10000416 	blt	r2,zero,81115f40 <__sbprintf+0x88>
81115f30:	d9410004 	addi	r5,sp,1024
81115f34:	9009883a 	mov	r4,r18
81115f38:	11194fc0 	call	811194fc <_fflush_r>
81115f3c:	10000d1e 	bne	r2,zero,81115f74 <__sbprintf+0xbc>
81115f40:	d881030b 	ldhu	r2,1036(sp)
81115f44:	1080100c 	andi	r2,r2,64
81115f48:	10000326 	beq	r2,zero,81115f58 <__sbprintf+0xa0>
81115f4c:	8080030b 	ldhu	r2,12(r16)
81115f50:	10801014 	ori	r2,r2,64
81115f54:	8080030d 	sth	r2,12(r16)
81115f58:	8805883a 	mov	r2,r17
81115f5c:	dfc11d17 	ldw	ra,1140(sp)
81115f60:	dc811c17 	ldw	r18,1136(sp)
81115f64:	dc411b17 	ldw	r17,1132(sp)
81115f68:	dc011a17 	ldw	r16,1128(sp)
81115f6c:	dec11e04 	addi	sp,sp,1144
81115f70:	f800283a 	ret
81115f74:	047fffc4 	movi	r17,-1
81115f78:	003ff106 	br	81115f40 <__reset+0xfb0f5f40>

81115f7c <__svfscanf_r>:
81115f7c:	deff4b04 	addi	sp,sp,-724
81115f80:	de00012e 	bgeu	sp,et,81115f88 <__svfscanf_r+0xc>
81115f84:	003b68fa 	trap	3
81115f88:	2880030b 	ldhu	r2,12(r5)
81115f8c:	df00b315 	stw	fp,716(sp)
81115f90:	dd80b115 	stw	r22,708(sp)
81115f94:	dfc0b415 	stw	ra,720(sp)
81115f98:	ddc0b215 	stw	r23,712(sp)
81115f9c:	dd40b015 	stw	r21,704(sp)
81115fa0:	dd00af15 	stw	r20,700(sp)
81115fa4:	dcc0ae15 	stw	r19,696(sp)
81115fa8:	dc80ad15 	stw	r18,692(sp)
81115fac:	dc40ac15 	stw	r17,688(sp)
81115fb0:	dc00ab15 	stw	r16,684(sp)
81115fb4:	10c8000c 	andi	r3,r2,8192
81115fb8:	d9c09c15 	stw	r7,624(sp)
81115fbc:	2839883a 	mov	fp,r5
81115fc0:	202d883a 	mov	r22,r4
81115fc4:	1800061e 	bne	r3,zero,81115fe0 <__svfscanf_r+0x64>
81115fc8:	29001917 	ldw	r4,100(r5)
81115fcc:	00f7ffc4 	movi	r3,-8193
81115fd0:	10880014 	ori	r2,r2,8192
81115fd4:	20c6703a 	and	r3,r4,r3
81115fd8:	2880030d 	sth	r2,12(r5)
81115fdc:	28c01915 	stw	r3,100(r5)
81115fe0:	30800003 	ldbu	r2,0(r6)
81115fe4:	0021883a 	mov	r16,zero
81115fe8:	05e04534 	movhi	r23,33044
81115fec:	d800a115 	stw	zero,644(sp)
81115ff0:	d8009e15 	stw	zero,632(sp)
81115ff4:	d800a015 	stw	zero,640(sp)
81115ff8:	d8809b15 	stw	r2,620(sp)
81115ffc:	bdfa0404 	addi	r23,r23,-6128
81116000:	8025883a 	mov	r18,r16
81116004:	35000044 	addi	r20,r6,1
81116008:	10001e26 	beq	r2,zero,81116084 <__svfscanf_r+0x108>
8111600c:	b9c00017 	ldw	r7,0(r23)
81116010:	3887883a 	add	r3,r7,r2
81116014:	18c00043 	ldbu	r3,1(r3)
81116018:	18c0020c 	andi	r3,r3,8
8111601c:	18001b26 	beq	r3,zero,8111608c <__svfscanf_r+0x110>
81116020:	e0800117 	ldw	r2,4(fp)
81116024:	00800e0e 	bge	zero,r2,81116060 <__svfscanf_r+0xe4>
81116028:	e0c00017 	ldw	r3,0(fp)
8111602c:	b9000017 	ldw	r4,0(r23)
81116030:	18800003 	ldbu	r2,0(r3)
81116034:	2085883a 	add	r2,r4,r2
81116038:	10800043 	ldbu	r2,1(r2)
8111603c:	1080020c 	andi	r2,r2,8
81116040:	10000b26 	beq	r2,zero,81116070 <__svfscanf_r+0xf4>
81116044:	e0800117 	ldw	r2,4(fp)
81116048:	18c00044 	addi	r3,r3,1
8111604c:	e0c00015 	stw	r3,0(fp)
81116050:	10bfffc4 	addi	r2,r2,-1
81116054:	e0800115 	stw	r2,4(fp)
81116058:	94800044 	addi	r18,r18,1
8111605c:	00bff216 	blt	zero,r2,81116028 <__reset+0xfb0f6028>
81116060:	e00b883a 	mov	r5,fp
81116064:	b009883a 	mov	r4,r22
81116068:	11112a00 	call	811112a0 <__srefill_r>
8111606c:	103fee26 	beq	r2,zero,81116028 <__reset+0xfb0f6028>
81116070:	a00d883a 	mov	r6,r20
81116074:	30800003 	ldbu	r2,0(r6)
81116078:	35000044 	addi	r20,r6,1
8111607c:	d8809b15 	stw	r2,620(sp)
81116080:	103fe21e 	bne	r2,zero,8111600c <__reset+0xfb0f600c>
81116084:	d880a017 	ldw	r2,640(sp)
81116088:	00009906 	br	811162f0 <__svfscanf_r+0x374>
8111608c:	00c00944 	movi	r3,37
81116090:	10c0881e 	bne	r2,r3,811162b4 <__svfscanf_r+0x338>
81116094:	30c00043 	ldbu	r3,1(r6)
81116098:	0023883a 	mov	r17,zero
8111609c:	0027883a 	mov	r19,zero
811160a0:	01001e04 	movi	r4,120
811160a4:	01401b04 	movi	r5,108
811160a8:	a1800044 	addi	r6,r20,1
811160ac:	20c0a236 	bltu	r4,r3,81116338 <__svfscanf_r+0x3bc>
811160b0:	180490ba 	slli	r2,r3,2
811160b4:	02204474 	movhi	r8,33041
811160b8:	42183204 	addi	r8,r8,24776
811160bc:	1205883a 	add	r2,r2,r8
811160c0:	10800017 	ldw	r2,0(r2)
811160c4:	1000683a 	jmp	r2
811160c8:	811162ec 	andhi	r4,r16,17803
811160cc:	81116338 	rdprs	r4,r16,17804
811160d0:	81116338 	rdprs	r4,r16,17804
811160d4:	81116338 	rdprs	r4,r16,17804
811160d8:	81116338 	rdprs	r4,r16,17804
811160dc:	81116338 	rdprs	r4,r16,17804
811160e0:	81116338 	rdprs	r4,r16,17804
811160e4:	81116338 	rdprs	r4,r16,17804
811160e8:	81116338 	rdprs	r4,r16,17804
811160ec:	81116338 	rdprs	r4,r16,17804
811160f0:	81116338 	rdprs	r4,r16,17804
811160f4:	81116338 	rdprs	r4,r16,17804
811160f8:	81116338 	rdprs	r4,r16,17804
811160fc:	81116338 	rdprs	r4,r16,17804
81116100:	81116338 	rdprs	r4,r16,17804
81116104:	81116338 	rdprs	r4,r16,17804
81116108:	81116338 	rdprs	r4,r16,17804
8111610c:	81116338 	rdprs	r4,r16,17804
81116110:	81116338 	rdprs	r4,r16,17804
81116114:	81116338 	rdprs	r4,r16,17804
81116118:	81116338 	rdprs	r4,r16,17804
8111611c:	81116338 	rdprs	r4,r16,17804
81116120:	81116338 	rdprs	r4,r16,17804
81116124:	81116338 	rdprs	r4,r16,17804
81116128:	81116338 	rdprs	r4,r16,17804
8111612c:	81116338 	rdprs	r4,r16,17804
81116130:	81116338 	rdprs	r4,r16,17804
81116134:	81116338 	rdprs	r4,r16,17804
81116138:	81116338 	rdprs	r4,r16,17804
8111613c:	81116338 	rdprs	r4,r16,17804
81116140:	81116338 	rdprs	r4,r16,17804
81116144:	81116338 	rdprs	r4,r16,17804
81116148:	81116338 	rdprs	r4,r16,17804
8111614c:	81116338 	rdprs	r4,r16,17804
81116150:	81116338 	rdprs	r4,r16,17804
81116154:	81116338 	rdprs	r4,r16,17804
81116158:	81116338 	rdprs	r4,r16,17804
8111615c:	811162ac 	andhi	r4,r16,17802
81116160:	81116338 	rdprs	r4,r16,17804
81116164:	81116338 	rdprs	r4,r16,17804
81116168:	81116338 	rdprs	r4,r16,17804
8111616c:	81116338 	rdprs	r4,r16,17804
81116170:	81116320 	cmpeqi	r4,r16,17804
81116174:	81116338 	rdprs	r4,r16,17804
81116178:	81116338 	rdprs	r4,r16,17804
8111617c:	81116338 	rdprs	r4,r16,17804
81116180:	81116338 	rdprs	r4,r16,17804
81116184:	81116338 	rdprs	r4,r16,17804
81116188:	81116454 	ori	r4,r16,17809
8111618c:	81116454 	ori	r4,r16,17809
81116190:	81116454 	ori	r4,r16,17809
81116194:	81116454 	ori	r4,r16,17809
81116198:	81116454 	ori	r4,r16,17809
8111619c:	81116454 	ori	r4,r16,17809
811161a0:	81116454 	ori	r4,r16,17809
811161a4:	81116454 	ori	r4,r16,17809
811161a8:	81116454 	ori	r4,r16,17809
811161ac:	81116454 	ori	r4,r16,17809
811161b0:	81116338 	rdprs	r4,r16,17804
811161b4:	81116338 	rdprs	r4,r16,17804
811161b8:	81116338 	rdprs	r4,r16,17804
811161bc:	81116338 	rdprs	r4,r16,17804
811161c0:	81116338 	rdprs	r4,r16,17804
811161c4:	81116338 	rdprs	r4,r16,17804
811161c8:	81116338 	rdprs	r4,r16,17804
811161cc:	81116338 	rdprs	r4,r16,17804
811161d0:	81116338 	rdprs	r4,r16,17804
811161d4:	81116338 	rdprs	r4,r16,17804
811161d8:	81116428 	cmpgeui	r4,r16,17808
811161dc:	811164d8 	cmpnei	r4,r16,17811
811161e0:	81116338 	rdprs	r4,r16,17804
811161e4:	811164d8 	cmpnei	r4,r16,17811
811161e8:	81116338 	rdprs	r4,r16,17804
811161ec:	81116338 	rdprs	r4,r16,17804
811161f0:	81116338 	rdprs	r4,r16,17804
811161f4:	81116338 	rdprs	r4,r16,17804
811161f8:	811164c4 	addi	r4,r16,17811
811161fc:	81116338 	rdprs	r4,r16,17804
81116200:	81116338 	rdprs	r4,r16,17804
81116204:	81116498 	cmpnei	r4,r16,17810
81116208:	81116338 	rdprs	r4,r16,17804
8111620c:	81116338 	rdprs	r4,r16,17804
81116210:	81116338 	rdprs	r4,r16,17804
81116214:	81116338 	rdprs	r4,r16,17804
81116218:	81116338 	rdprs	r4,r16,17804
8111621c:	81116338 	rdprs	r4,r16,17804
81116220:	81116338 	rdprs	r4,r16,17804
81116224:	81116338 	rdprs	r4,r16,17804
81116228:	81116470 	cmpltui	r4,r16,17809
8111622c:	81116338 	rdprs	r4,r16,17804
81116230:	81116338 	rdprs	r4,r16,17804
81116234:	8111660c 	andi	r4,r16,17816
81116238:	81116338 	rdprs	r4,r16,17804
8111623c:	81116338 	rdprs	r4,r16,17804
81116240:	81116338 	rdprs	r4,r16,17804
81116244:	81116338 	rdprs	r4,r16,17804
81116248:	81116338 	rdprs	r4,r16,17804
8111624c:	81116338 	rdprs	r4,r16,17804
81116250:	81116338 	rdprs	r4,r16,17804
81116254:	81116590 	cmplti	r4,r16,17814
81116258:	81116568 	cmpgeui	r4,r16,17813
8111625c:	811164d8 	cmpnei	r4,r16,17811
81116260:	811164d8 	cmpnei	r4,r16,17811
81116264:	811164d8 	cmpnei	r4,r16,17811
81116268:	81116554 	ori	r4,r16,17813
8111626c:	81116698 	cmpnei	r4,r16,17818
81116270:	81116338 	rdprs	r4,r16,17804
81116274:	81116338 	rdprs	r4,r16,17804
81116278:	81116540 	call	88111654 <__reset+0x20f1654>
8111627c:	81116338 	rdprs	r4,r16,17804
81116280:	81116510 	cmplti	r4,r16,17812
81116284:	811164ec 	andhi	r4,r16,17811
81116288:	811163fc 	xorhi	r4,r16,17807
8111628c:	81116338 	rdprs	r4,r16,17804
81116290:	81116338 	rdprs	r4,r16,17804
81116294:	811163e8 	cmpgeui	r4,r16,17807
81116298:	81116338 	rdprs	r4,r16,17804
8111629c:	81116370 	cmpltui	r4,r16,17805
811162a0:	81116338 	rdprs	r4,r16,17804
811162a4:	81116338 	rdprs	r4,r16,17804
811162a8:	81116470 	cmpltui	r4,r16,17809
811162ac:	d9809d15 	stw	r6,628(sp)
811162b0:	3029883a 	mov	r20,r6
811162b4:	e0800117 	ldw	r2,4(fp)
811162b8:	0081aa0e 	bge	zero,r2,81116964 <__svfscanf_r+0x9e8>
811162bc:	e0800017 	ldw	r2,0(fp)
811162c0:	a0ffffc3 	ldbu	r3,-1(r20)
811162c4:	11000003 	ldbu	r4,0(r2)
811162c8:	20ff6e1e 	bne	r4,r3,81116084 <__reset+0xfb0f6084>
811162cc:	e0c00117 	ldw	r3,4(fp)
811162d0:	10800044 	addi	r2,r2,1
811162d4:	e0800015 	stw	r2,0(fp)
811162d8:	18bfffc4 	addi	r2,r3,-1
811162dc:	e0800115 	stw	r2,4(fp)
811162e0:	94800044 	addi	r18,r18,1
811162e4:	a00d883a 	mov	r6,r20
811162e8:	003f6206 	br	81116074 <__reset+0xfb0f6074>
811162ec:	00bfffc4 	movi	r2,-1
811162f0:	dfc0b417 	ldw	ra,720(sp)
811162f4:	df00b317 	ldw	fp,716(sp)
811162f8:	ddc0b217 	ldw	r23,712(sp)
811162fc:	dd80b117 	ldw	r22,708(sp)
81116300:	dd40b017 	ldw	r21,704(sp)
81116304:	dd00af17 	ldw	r20,700(sp)
81116308:	dcc0ae17 	ldw	r19,696(sp)
8111630c:	dc80ad17 	ldw	r18,692(sp)
81116310:	dc40ac17 	ldw	r17,688(sp)
81116314:	dc00ab17 	ldw	r16,684(sp)
81116318:	dec0b504 	addi	sp,sp,724
8111631c:	f800283a 	ret
81116320:	a0800043 	ldbu	r2,1(r20)
81116324:	3029883a 	mov	r20,r6
81116328:	8c400414 	ori	r17,r17,16
8111632c:	10c03fcc 	andi	r3,r2,255
81116330:	a1800044 	addi	r6,r20,1
81116334:	20ff5e2e 	bgeu	r4,r3,811160b0 <__reset+0xfb0f60b0>
81116338:	38c7883a 	add	r3,r7,r3
8111633c:	18800043 	ldbu	r2,1(r3)
81116340:	d9809d15 	stw	r6,628(sp)
81116344:	00c00044 	movi	r3,1
81116348:	108000cc 	andi	r2,r2,3
8111634c:	10c18f26 	beq	r2,r3,8111698c <__svfscanf_r+0xa10>
81116350:	e0800117 	ldw	r2,4(fp)
81116354:	00808716 	blt	zero,r2,81116574 <__svfscanf_r+0x5f8>
81116358:	e00b883a 	mov	r5,fp
8111635c:	b009883a 	mov	r4,r22
81116360:	11112a00 	call	811112a0 <__srefill_r>
81116364:	1001431e 	bne	r2,zero,81116874 <__svfscanf_r+0x8f8>
81116368:	b9c00017 	ldw	r7,0(r23)
8111636c:	00008106 	br	81116574 <__svfscanf_r+0x5f8>
81116370:	e0800117 	ldw	r2,4(fp)
81116374:	d9809d15 	stw	r6,628(sp)
81116378:	0081a30e 	bge	zero,r2,81116a08 <__svfscanf_r+0xa8c>
8111637c:	00a044b4 	movhi	r2,33042
81116380:	10b80b04 	addi	r2,r2,-8148
81116384:	02000284 	movi	r8,10
81116388:	d880a115 	stw	r2,644(sp)
8111638c:	da009e15 	stw	r8,632(sp)
81116390:	050000c4 	movi	r20,3
81116394:	e0c00017 	ldw	r3,0(fp)
81116398:	00000206 	br	811163a4 <__svfscanf_r+0x428>
8111639c:	18c00044 	addi	r3,r3,1
811163a0:	e0c00015 	stw	r3,0(fp)
811163a4:	19000003 	ldbu	r4,0(r3)
811163a8:	20803fcc 	andi	r2,r4,255
811163ac:	3885883a 	add	r2,r7,r2
811163b0:	10800043 	ldbu	r2,1(r2)
811163b4:	1140020c 	andi	r5,r2,8
811163b8:	2801ab26 	beq	r5,zero,81116a68 <__svfscanf_r+0xaec>
811163bc:	e0800117 	ldw	r2,4(fp)
811163c0:	94800044 	addi	r18,r18,1
811163c4:	10bfffc4 	addi	r2,r2,-1
811163c8:	e0800115 	stw	r2,4(fp)
811163cc:	00bff316 	blt	zero,r2,8111639c <__reset+0xfb0f639c>
811163d0:	e00b883a 	mov	r5,fp
811163d4:	b009883a 	mov	r4,r22
811163d8:	11112a00 	call	811112a0 <__srefill_r>
811163dc:	1001251e 	bne	r2,zero,81116874 <__svfscanf_r+0x8f8>
811163e0:	b9c00017 	ldw	r7,0(r23)
811163e4:	003feb06 	br	81116394 <__reset+0xfb0f6394>
811163e8:	e0800117 	ldw	r2,4(fp)
811163ec:	d9809d15 	stw	r6,628(sp)
811163f0:	00818b0e 	bge	zero,r2,81116a20 <__svfscanf_r+0xaa4>
811163f4:	05000084 	movi	r20,2
811163f8:	003fe606 	br	81116394 <__reset+0xfb0f6394>
811163fc:	e0800117 	ldw	r2,4(fp)
81116400:	d9809d15 	stw	r6,628(sp)
81116404:	8c408814 	ori	r17,r17,544
81116408:	00801d0e 	bge	zero,r2,81116480 <__svfscanf_r+0x504>
8111640c:	00a044b4 	movhi	r2,33042
81116410:	10b80b04 	addi	r2,r2,-8148
81116414:	02000404 	movi	r8,16
81116418:	d880a115 	stw	r2,644(sp)
8111641c:	da009e15 	stw	r8,632(sp)
81116420:	050000c4 	movi	r20,3
81116424:	003fdb06 	br	81116394 <__reset+0xfb0f6394>
81116428:	e0800117 	ldw	r2,4(fp)
8111642c:	d9809d15 	stw	r6,628(sp)
81116430:	8c400054 	ori	r17,r17,1
81116434:	00bfc80e 	bge	zero,r2,81116358 <__reset+0xfb0f6358>
81116438:	00e04474 	movhi	r3,33041
8111643c:	18c61804 	addi	r3,r3,6240
81116440:	02000284 	movi	r8,10
81116444:	d8c0a115 	stw	r3,644(sp)
81116448:	da009e15 	stw	r8,632(sp)
8111644c:	050000c4 	movi	r20,3
81116450:	003fd006 	br	81116394 <__reset+0xfb0f6394>
81116454:	9cc002a4 	muli	r19,r19,10
81116458:	a0800043 	ldbu	r2,1(r20)
8111645c:	3029883a 	mov	r20,r6
81116460:	98e7883a 	add	r19,r19,r3
81116464:	9cfff404 	addi	r19,r19,-48
81116468:	10c03fcc 	andi	r3,r2,255
8111646c:	003f0e06 	br	811160a8 <__reset+0xfb0f60a8>
81116470:	e0800117 	ldw	r2,4(fp)
81116474:	d9809d15 	stw	r6,628(sp)
81116478:	8c408014 	ori	r17,r17,512
8111647c:	00bfe316 	blt	zero,r2,8111640c <__reset+0xfb0f640c>
81116480:	e00b883a 	mov	r5,fp
81116484:	b009883a 	mov	r4,r22
81116488:	11112a00 	call	811112a0 <__srefill_r>
8111648c:	1000f91e 	bne	r2,zero,81116874 <__svfscanf_r+0x8f8>
81116490:	b9c00017 	ldw	r7,0(r23)
81116494:	003fdd06 	br	8111640c <__reset+0xfb0f640c>
81116498:	e0800117 	ldw	r2,4(fp)
8111649c:	d9809d15 	stw	r6,628(sp)
811164a0:	8c400054 	ori	r17,r17,1
811164a4:	0080140e 	bge	zero,r2,811164f8 <__svfscanf_r+0x57c>
811164a8:	00a044b4 	movhi	r2,33042
811164ac:	10b80b04 	addi	r2,r2,-8148
811164b0:	02000204 	movi	r8,8
811164b4:	d880a115 	stw	r2,644(sp)
811164b8:	da009e15 	stw	r8,632(sp)
811164bc:	050000c4 	movi	r20,3
811164c0:	003fb406 	br	81116394 <__reset+0xfb0f6394>
811164c4:	a0800043 	ldbu	r2,1(r20)
811164c8:	8c400094 	ori	r17,r17,2
811164cc:	3029883a 	mov	r20,r6
811164d0:	10c03fcc 	andi	r3,r2,255
811164d4:	003ef406 	br	811160a8 <__reset+0xfb0f60a8>
811164d8:	e0800117 	ldw	r2,4(fp)
811164dc:	d9809d15 	stw	r6,628(sp)
811164e0:	0081420e 	bge	zero,r2,811169ec <__svfscanf_r+0xa70>
811164e4:	05000104 	movi	r20,4
811164e8:	003faa06 	br	81116394 <__reset+0xfb0f6394>
811164ec:	e0800117 	ldw	r2,4(fp)
811164f0:	d9809d15 	stw	r6,628(sp)
811164f4:	00bfec16 	blt	zero,r2,811164a8 <__reset+0xfb0f64a8>
811164f8:	e00b883a 	mov	r5,fp
811164fc:	b009883a 	mov	r4,r22
81116500:	11112a00 	call	811112a0 <__srefill_r>
81116504:	1000db1e 	bne	r2,zero,81116874 <__svfscanf_r+0x8f8>
81116508:	b9c00017 	ldw	r7,0(r23)
8111650c:	003fe606 	br	811164a8 <__reset+0xfb0f64a8>
81116510:	d9809d15 	stw	r6,628(sp)
81116514:	8880040c 	andi	r2,r17,16
81116518:	10009c1e 	bne	r2,zero,8111678c <__svfscanf_r+0x810>
8111651c:	8880010c 	andi	r2,r17,4
81116520:	10011e26 	beq	r2,zero,8111699c <__svfscanf_r+0xa20>
81116524:	da009c17 	ldw	r8,624(sp)
81116528:	3029883a 	mov	r20,r6
8111652c:	40800017 	ldw	r2,0(r8)
81116530:	42000104 	addi	r8,r8,4
81116534:	da009c15 	stw	r8,624(sp)
81116538:	1480000d 	sth	r18,0(r2)
8111653c:	003ecc06 	br	81116070 <__reset+0xfb0f6070>
81116540:	a0c00043 	ldbu	r3,1(r20)
81116544:	19410c26 	beq	r3,r5,81116978 <__svfscanf_r+0x9fc>
81116548:	8c400054 	ori	r17,r17,1
8111654c:	3029883a 	mov	r20,r6
81116550:	003ed506 	br	811160a8 <__reset+0xfb0f60a8>
81116554:	a0800043 	ldbu	r2,1(r20)
81116558:	8c400114 	ori	r17,r17,4
8111655c:	3029883a 	mov	r20,r6
81116560:	10c03fcc 	andi	r3,r2,255
81116564:	003ed006 	br	811160a8 <__reset+0xfb0f60a8>
81116568:	e0800117 	ldw	r2,4(fp)
8111656c:	d9809d15 	stw	r6,628(sp)
81116570:	00bf790e 	bge	zero,r2,81116358 <__reset+0xfb0f6358>
81116574:	00a04474 	movhi	r2,33041
81116578:	10861804 	addi	r2,r2,6240
8111657c:	02000284 	movi	r8,10
81116580:	d880a115 	stw	r2,644(sp)
81116584:	da009e15 	stw	r8,632(sp)
81116588:	050000c4 	movi	r20,3
8111658c:	003f8106 	br	81116394 <__reset+0xfb0f6394>
81116590:	e0800117 	ldw	r2,4(fp)
81116594:	d9809d15 	stw	r6,628(sp)
81116598:	0080c40e 	bge	zero,r2,811168ac <__svfscanf_r+0x930>
8111659c:	9800011e 	bne	r19,zero,811165a4 <__svfscanf_r+0x628>
811165a0:	04c00044 	movi	r19,1
811165a4:	8880004c 	andi	r2,r17,1
811165a8:	1000441e 	bne	r2,zero,811166bc <__svfscanf_r+0x740>
811165ac:	8c40040c 	andi	r17,r17,16
811165b0:	8800da26 	beq	r17,zero,8111691c <__svfscanf_r+0x9a0>
811165b4:	0021883a 	mov	r16,zero
811165b8:	00000806 	br	811165dc <__svfscanf_r+0x660>
811165bc:	1887883a 	add	r3,r3,r2
811165c0:	e00b883a 	mov	r5,fp
811165c4:	b009883a 	mov	r4,r22
811165c8:	e0c00015 	stw	r3,0(fp)
811165cc:	80a1883a 	add	r16,r16,r2
811165d0:	98a7c83a 	sub	r19,r19,r2
811165d4:	11112a00 	call	811112a0 <__srefill_r>
811165d8:	1000ca1e 	bne	r2,zero,81116904 <__svfscanf_r+0x988>
811165dc:	e0800117 	ldw	r2,4(fp)
811165e0:	e0c00017 	ldw	r3,0(fp)
811165e4:	14fff516 	blt	r2,r19,811165bc <__reset+0xfb0f65bc>
811165e8:	14c5c83a 	sub	r2,r2,r19
811165ec:	1cd5883a 	add	r10,r3,r19
811165f0:	84e1883a 	add	r16,r16,r19
811165f4:	e0800115 	stw	r2,4(fp)
811165f8:	e2800015 	stw	r10,0(fp)
811165fc:	dd009d17 	ldw	r20,628(sp)
81116600:	9425883a 	add	r18,r18,r16
81116604:	a00d883a 	mov	r6,r20
81116608:	003e9a06 	br	81116074 <__reset+0xfb0f6074>
8111660c:	300b883a 	mov	r5,r6
81116610:	d9005884 	addi	r4,sp,354
81116614:	d9809d15 	stw	r6,628(sp)
81116618:	111c4040 	call	8111c404 <__sccl>
8111661c:	1029883a 	mov	r20,r2
81116620:	e0800117 	ldw	r2,4(fp)
81116624:	0081050e 	bge	zero,r2,81116a3c <__svfscanf_r+0xac0>
81116628:	e1000017 	ldw	r4,0(fp)
8111662c:	20800003 	ldbu	r2,0(r4)
81116630:	98005926 	beq	r19,zero,81116798 <__svfscanf_r+0x81c>
81116634:	8c40040c 	andi	r17,r17,16
81116638:	88005a26 	beq	r17,zero,811167a4 <__svfscanf_r+0x828>
8111663c:	9823883a 	mov	r17,r19
81116640:	0021883a 	mov	r16,zero
81116644:	00000106 	br	8111664c <__svfscanf_r+0x6d0>
81116648:	20800003 	ldbu	r2,0(r4)
8111664c:	10803fcc 	andi	r2,r2,255
81116650:	d8c05884 	addi	r3,sp,354
81116654:	1885883a 	add	r2,r3,r2
81116658:	10800007 	ldb	r2,0(r2)
8111665c:	1000ad26 	beq	r2,zero,81116914 <__svfscanf_r+0x998>
81116660:	e0800117 	ldw	r2,4(fp)
81116664:	21000044 	addi	r4,r4,1
81116668:	84000044 	addi	r16,r16,1
8111666c:	10bfffc4 	addi	r2,r2,-1
81116670:	e0800115 	stw	r2,4(fp)
81116674:	e1000015 	stw	r4,0(fp)
81116678:	84c0a026 	beq	r16,r19,811168fc <__svfscanf_r+0x980>
8111667c:	00bff216 	blt	zero,r2,81116648 <__reset+0xfb0f6648>
81116680:	e00b883a 	mov	r5,fp
81116684:	b009883a 	mov	r4,r22
81116688:	11112a00 	call	811112a0 <__srefill_r>
8111668c:	10009a1e 	bne	r2,zero,811168f8 <__svfscanf_r+0x97c>
81116690:	e1000017 	ldw	r4,0(fp)
81116694:	003fec06 	br	81116648 <__reset+0xfb0f6648>
81116698:	e0800117 	ldw	r2,4(fp)
8111669c:	d9809d15 	stw	r6,628(sp)
811166a0:	0080eb0e 	bge	zero,r2,81116a50 <__svfscanf_r+0xad4>
811166a4:	00a04474 	movhi	r2,33041
811166a8:	10861804 	addi	r2,r2,6240
811166ac:	d880a115 	stw	r2,644(sp)
811166b0:	d8009e15 	stw	zero,632(sp)
811166b4:	050000c4 	movi	r20,3
811166b8:	003f3606 	br	81116394 <__reset+0xfb0f6394>
811166bc:	dd409904 	addi	r21,sp,612
811166c0:	8c40040c 	andi	r17,r17,16
811166c4:	01800204 	movi	r6,8
811166c8:	000b883a 	mov	r5,zero
811166cc:	a809883a 	mov	r4,r21
811166d0:	dc409f15 	stw	r17,636(sp)
811166d4:	1110f9c0 	call	81110f9c <memset>
811166d8:	dc409f17 	ldw	r17,636(sp)
811166dc:	88006e26 	beq	r17,zero,81116898 <__svfscanf_r+0x91c>
811166e0:	0029883a 	mov	r20,zero
811166e4:	0023883a 	mov	r17,zero
811166e8:	111a8200 	call	8111a820 <__locale_mb_cur_max>
811166ec:	14406126 	beq	r2,r17,81116874 <__svfscanf_r+0x8f8>
811166f0:	e0800017 	ldw	r2,0(fp)
811166f4:	e0c00117 	ldw	r3,4(fp)
811166f8:	d9000104 	addi	r4,sp,4
811166fc:	12000003 	ldbu	r8,0(r2)
81116700:	18ffffc4 	addi	r3,r3,-1
81116704:	10800044 	addi	r2,r2,1
81116708:	e0c00115 	stw	r3,4(fp)
8111670c:	e0800015 	stw	r2,0(fp)
81116710:	8c000044 	addi	r16,r17,1
81116714:	dd400015 	stw	r21,0(sp)
81116718:	2463883a 	add	r17,r4,r17
8111671c:	200d883a 	mov	r6,r4
81116720:	a00b883a 	mov	r5,r20
81116724:	800f883a 	mov	r7,r16
81116728:	b009883a 	mov	r4,r22
8111672c:	8a000005 	stb	r8,0(r17)
81116730:	111a8dc0 	call	8111a8dc <_mbrtowc_r>
81116734:	017fffc4 	movi	r5,-1
81116738:	11404e26 	beq	r2,r5,81116874 <__svfscanf_r+0x8f8>
8111673c:	1000601e 	bne	r2,zero,811168c0 <__svfscanf_r+0x944>
81116740:	da009f17 	ldw	r8,636(sp)
81116744:	4000641e 	bne	r8,zero,811168d8 <__svfscanf_r+0x95c>
81116748:	a0000015 	stw	zero,0(r20)
8111674c:	9425883a 	add	r18,r18,r16
81116750:	9967883a 	add	r19,r19,r5
81116754:	a5000104 	addi	r20,r20,4
81116758:	e0800117 	ldw	r2,4(fp)
8111675c:	0023883a 	mov	r17,zero
81116760:	00804b16 	blt	zero,r2,81116890 <__svfscanf_r+0x914>
81116764:	e00b883a 	mov	r5,fp
81116768:	b009883a 	mov	r4,r22
8111676c:	11112a00 	call	811112a0 <__srefill_r>
81116770:	10004726 	beq	r2,zero,81116890 <__svfscanf_r+0x914>
81116774:	88003f1e 	bne	r17,zero,81116874 <__svfscanf_r+0x8f8>
81116778:	d8c09f17 	ldw	r3,636(sp)
8111677c:	1800031e 	bne	r3,zero,8111678c <__svfscanf_r+0x810>
81116780:	da00a017 	ldw	r8,640(sp)
81116784:	42000044 	addi	r8,r8,1
81116788:	da00a015 	stw	r8,640(sp)
8111678c:	dd009d17 	ldw	r20,628(sp)
81116790:	a00d883a 	mov	r6,r20
81116794:	003e3706 	br	81116074 <__reset+0xfb0f6074>
81116798:	8c40040c 	andi	r17,r17,16
8111679c:	04ffffc4 	movi	r19,-1
811167a0:	883fa61e 	bne	r17,zero,8111663c <__reset+0xfb0f663c>
811167a4:	da009c17 	ldw	r8,624(sp)
811167a8:	9abfffc4 	addi	r10,r19,-1
811167ac:	44000017 	ldw	r16,0(r8)
811167b0:	44400104 	addi	r17,r8,4
811167b4:	8007883a 	mov	r3,r16
811167b8:	82ab883a 	add	r21,r16,r10
811167bc:	00000306 	br	811167cc <__svfscanf_r+0x850>
811167c0:	e1000017 	ldw	r4,0(fp)
811167c4:	9807883a 	mov	r3,r19
811167c8:	20800003 	ldbu	r2,0(r4)
811167cc:	10803fcc 	andi	r2,r2,255
811167d0:	d9405884 	addi	r5,sp,354
811167d4:	2885883a 	add	r2,r5,r2
811167d8:	10800007 	ldb	r2,0(r2)
811167dc:	10004b26 	beq	r2,zero,8111690c <__svfscanf_r+0x990>
811167e0:	e0800117 	ldw	r2,4(fp)
811167e4:	21400044 	addi	r5,r4,1
811167e8:	e1400015 	stw	r5,0(fp)
811167ec:	10bfffc4 	addi	r2,r2,-1
811167f0:	e0800115 	stw	r2,4(fp)
811167f4:	20800003 	ldbu	r2,0(r4)
811167f8:	1cc00044 	addi	r19,r3,1
811167fc:	18800005 	stb	r2,0(r3)
81116800:	1d400726 	beq	r3,r21,81116820 <__svfscanf_r+0x8a4>
81116804:	e0800117 	ldw	r2,4(fp)
81116808:	00bfed16 	blt	zero,r2,811167c0 <__reset+0xfb0f67c0>
8111680c:	e00b883a 	mov	r5,fp
81116810:	b009883a 	mov	r4,r22
81116814:	11112a00 	call	811112a0 <__srefill_r>
81116818:	103fe926 	beq	r2,zero,811167c0 <__reset+0xfb0f67c0>
8111681c:	84c01526 	beq	r16,r19,81116874 <__svfscanf_r+0x8f8>
81116820:	9c21c83a 	sub	r16,r19,r16
81116824:	803e1726 	beq	r16,zero,81116084 <__reset+0xfb0f6084>
81116828:	da00a017 	ldw	r8,640(sp)
8111682c:	98000005 	stb	zero,0(r19)
81116830:	dc409c15 	stw	r17,624(sp)
81116834:	42000044 	addi	r8,r8,1
81116838:	da00a015 	stw	r8,640(sp)
8111683c:	9425883a 	add	r18,r18,r16
81116840:	a00d883a 	mov	r6,r20
81116844:	003e0b06 	br	81116074 <__reset+0xfb0f6074>
81116848:	017fff84 	movi	r5,-2
8111684c:	11439b1e 	bne	r2,r5,811176bc <__svfscanf_r+0x1740>
81116850:	8821883a 	mov	r16,r17
81116854:	e0800117 	ldw	r2,4(fp)
81116858:	0082e516 	blt	zero,r2,811173f0 <__svfscanf_r+0x1474>
8111685c:	e00b883a 	mov	r5,fp
81116860:	b009883a 	mov	r4,r22
81116864:	11112a00 	call	811112a0 <__srefill_r>
81116868:	1002e126 	beq	r2,zero,811173f0 <__svfscanf_r+0x1474>
8111686c:	dc409f17 	ldw	r17,636(sp)
81116870:	8002e826 	beq	r16,zero,81117414 <__svfscanf_r+0x1498>
81116874:	da00a017 	ldw	r8,640(sp)
81116878:	403e9c26 	beq	r8,zero,811162ec <__reset+0xfb0f62ec>
8111687c:	e080030b 	ldhu	r2,12(fp)
81116880:	1080100c 	andi	r2,r2,64
81116884:	103e991e 	bne	r2,zero,811162ec <__reset+0xfb0f62ec>
81116888:	4005883a 	mov	r2,r8
8111688c:	003e9806 	br	811162f0 <__reset+0xfb0f62f0>
81116890:	983f951e 	bne	r19,zero,811166e8 <__reset+0xfb0f66e8>
81116894:	003fb806 	br	81116778 <__reset+0xfb0f6778>
81116898:	da009c17 	ldw	r8,624(sp)
8111689c:	45000017 	ldw	r20,0(r8)
811168a0:	42000104 	addi	r8,r8,4
811168a4:	da009c15 	stw	r8,624(sp)
811168a8:	003f8e06 	br	811166e4 <__reset+0xfb0f66e4>
811168ac:	e00b883a 	mov	r5,fp
811168b0:	b009883a 	mov	r4,r22
811168b4:	11112a00 	call	811112a0 <__srefill_r>
811168b8:	103f3826 	beq	r2,zero,8111659c <__reset+0xfb0f659c>
811168bc:	003fed06 	br	81116874 <__reset+0xfb0f6874>
811168c0:	00ffff84 	movi	r3,-2
811168c4:	10c0071e 	bne	r2,r3,811168e4 <__svfscanf_r+0x968>
811168c8:	e0800117 	ldw	r2,4(fp)
811168cc:	8023883a 	mov	r17,r16
811168d0:	00bf8516 	blt	zero,r2,811166e8 <__reset+0xfb0f66e8>
811168d4:	003fa306 	br	81116764 <__reset+0xfb0f6764>
811168d8:	9425883a 	add	r18,r18,r16
811168dc:	9cffffc4 	addi	r19,r19,-1
811168e0:	003f9d06 	br	81116758 <__reset+0xfb0f6758>
811168e4:	da009f17 	ldw	r8,636(sp)
811168e8:	9425883a 	add	r18,r18,r16
811168ec:	9cffffc4 	addi	r19,r19,-1
811168f0:	403f9826 	beq	r8,zero,81116754 <__reset+0xfb0f6754>
811168f4:	003f9806 	br	81116758 <__reset+0xfb0f6758>
811168f8:	8023883a 	mov	r17,r16
811168fc:	8821883a 	mov	r16,r17
81116900:	003fce06 	br	8111683c <__reset+0xfb0f683c>
81116904:	803f3d1e 	bne	r16,zero,811165fc <__reset+0xfb0f65fc>
81116908:	003fda06 	br	81116874 <__reset+0xfb0f6874>
8111690c:	1827883a 	mov	r19,r3
81116910:	003fc306 	br	81116820 <__reset+0xfb0f6820>
81116914:	803fc91e 	bne	r16,zero,8111683c <__reset+0xfb0f683c>
81116918:	003dda06 	br	81116084 <__reset+0xfb0f6084>
8111691c:	da009c17 	ldw	r8,624(sp)
81116920:	df000015 	stw	fp,0(sp)
81116924:	980f883a 	mov	r7,r19
81116928:	41400017 	ldw	r5,0(r8)
8111692c:	01800044 	movi	r6,1
81116930:	b009883a 	mov	r4,r22
81116934:	11199f40 	call	811199f4 <_fread_r>
81116938:	da009c17 	ldw	r8,624(sp)
8111693c:	40c00104 	addi	r3,r8,4
81116940:	103fcc26 	beq	r2,zero,81116874 <__reset+0xfb0f6874>
81116944:	da00a017 	ldw	r8,640(sp)
81116948:	dd009d17 	ldw	r20,628(sp)
8111694c:	90a5883a 	add	r18,r18,r2
81116950:	42000044 	addi	r8,r8,1
81116954:	da00a015 	stw	r8,640(sp)
81116958:	d8c09c15 	stw	r3,624(sp)
8111695c:	a00d883a 	mov	r6,r20
81116960:	003dc406 	br	81116074 <__reset+0xfb0f6074>
81116964:	e00b883a 	mov	r5,fp
81116968:	b009883a 	mov	r4,r22
8111696c:	11112a00 	call	811112a0 <__srefill_r>
81116970:	103e5226 	beq	r2,zero,811162bc <__reset+0xfb0f62bc>
81116974:	003fbf06 	br	81116874 <__reset+0xfb0f6874>
81116978:	a0800083 	ldbu	r2,2(r20)
8111697c:	8c400094 	ori	r17,r17,2
81116980:	a5000084 	addi	r20,r20,2
81116984:	10c03fcc 	andi	r3,r2,255
81116988:	003dc706 	br	811160a8 <__reset+0xfb0f60a8>
8111698c:	e0800117 	ldw	r2,4(fp)
81116990:	88e2b03a 	or	r17,r17,r3
81116994:	00bef716 	blt	zero,r2,81116574 <__reset+0xfb0f6574>
81116998:	003e6f06 	br	81116358 <__reset+0xfb0f6358>
8111699c:	8880004c 	andi	r2,r17,1
811169a0:	10000b1e 	bne	r2,zero,811169d0 <__svfscanf_r+0xa54>
811169a4:	8c40008c 	andi	r17,r17,2
811169a8:	88000926 	beq	r17,zero,811169d0 <__svfscanf_r+0xa54>
811169ac:	da009c17 	ldw	r8,624(sp)
811169b0:	9007d7fa 	srai	r3,r18,31
811169b4:	dd009d17 	ldw	r20,628(sp)
811169b8:	40800017 	ldw	r2,0(r8)
811169bc:	42000104 	addi	r8,r8,4
811169c0:	da009c15 	stw	r8,624(sp)
811169c4:	14800015 	stw	r18,0(r2)
811169c8:	10c00115 	stw	r3,4(r2)
811169cc:	003da806 	br	81116070 <__reset+0xfb0f6070>
811169d0:	da009c17 	ldw	r8,624(sp)
811169d4:	dd009d17 	ldw	r20,628(sp)
811169d8:	40800017 	ldw	r2,0(r8)
811169dc:	42000104 	addi	r8,r8,4
811169e0:	da009c15 	stw	r8,624(sp)
811169e4:	14800015 	stw	r18,0(r2)
811169e8:	003da106 	br	81116070 <__reset+0xfb0f6070>
811169ec:	e00b883a 	mov	r5,fp
811169f0:	b009883a 	mov	r4,r22
811169f4:	11112a00 	call	811112a0 <__srefill_r>
811169f8:	103f9e1e 	bne	r2,zero,81116874 <__reset+0xfb0f6874>
811169fc:	b9c00017 	ldw	r7,0(r23)
81116a00:	05000104 	movi	r20,4
81116a04:	003e6306 	br	81116394 <__reset+0xfb0f6394>
81116a08:	e00b883a 	mov	r5,fp
81116a0c:	b009883a 	mov	r4,r22
81116a10:	11112a00 	call	811112a0 <__srefill_r>
81116a14:	103f971e 	bne	r2,zero,81116874 <__reset+0xfb0f6874>
81116a18:	b9c00017 	ldw	r7,0(r23)
81116a1c:	003e5706 	br	8111637c <__reset+0xfb0f637c>
81116a20:	e00b883a 	mov	r5,fp
81116a24:	b009883a 	mov	r4,r22
81116a28:	11112a00 	call	811112a0 <__srefill_r>
81116a2c:	103f911e 	bne	r2,zero,81116874 <__reset+0xfb0f6874>
81116a30:	b9c00017 	ldw	r7,0(r23)
81116a34:	05000084 	movi	r20,2
81116a38:	003e5606 	br	81116394 <__reset+0xfb0f6394>
81116a3c:	e00b883a 	mov	r5,fp
81116a40:	b009883a 	mov	r4,r22
81116a44:	11112a00 	call	811112a0 <__srefill_r>
81116a48:	103ef726 	beq	r2,zero,81116628 <__reset+0xfb0f6628>
81116a4c:	003f8906 	br	81116874 <__reset+0xfb0f6874>
81116a50:	e00b883a 	mov	r5,fp
81116a54:	b009883a 	mov	r4,r22
81116a58:	11112a00 	call	811112a0 <__srefill_r>
81116a5c:	103f851e 	bne	r2,zero,81116874 <__reset+0xfb0f6874>
81116a60:	b9c00017 	ldw	r7,0(r23)
81116a64:	003f0f06 	br	811166a4 <__reset+0xfb0f66a4>
81116a68:	014000c4 	movi	r5,3
81116a6c:	a1414a26 	beq	r20,r5,81116f98 <__svfscanf_r+0x101c>
81116a70:	01000104 	movi	r4,4
81116a74:	a101f11e 	bne	r20,r4,8111723c <__svfscanf_r+0x12c0>
81116a78:	b009883a 	mov	r4,r22
81116a7c:	111a8440 	call	8111a844 <_localeconv_r>
81116a80:	10800017 	ldw	r2,0(r2)
81116a84:	98ffffc4 	addi	r3,r19,-1
81116a88:	d880a315 	stw	r2,652(sp)
81116a8c:	00805704 	movi	r2,348
81116a90:	10c21e2e 	bgeu	r2,r3,8111730c <__svfscanf_r+0x1390>
81116a94:	9cffa8c4 	addi	r19,r19,-349
81116a98:	dcc0a215 	stw	r19,648(sp)
81116a9c:	04c05744 	movi	r19,349
81116aa0:	8d01e014 	ori	r20,r17,1920
81116aa4:	0023883a 	mov	r17,zero
81116aa8:	dc000104 	addi	r16,sp,4
81116aac:	8805883a 	mov	r2,r17
81116ab0:	0019883a 	mov	r12,zero
81116ab4:	8023883a 	mov	r17,r16
81116ab8:	b007883a 	mov	r3,r22
81116abc:	9821883a 	mov	r16,r19
81116ac0:	002b883a 	mov	r21,zero
81116ac4:	d800a515 	stw	zero,660(sp)
81116ac8:	d800a415 	stw	zero,656(sp)
81116acc:	d8009f15 	stw	zero,636(sp)
81116ad0:	01c01384 	movi	r7,78
81116ad4:	602d883a 	mov	r22,r12
81116ad8:	1027883a 	mov	r19,r2
81116adc:	e1000017 	ldw	r4,0(fp)
81116ae0:	21400003 	ldbu	r5,0(r4)
81116ae4:	28bff544 	addi	r2,r5,-43
81116ae8:	10803fcc 	andi	r2,r2,255
81116aec:	38810e36 	bltu	r7,r2,81116f28 <__svfscanf_r+0xfac>
81116af0:	100490ba 	slli	r2,r2,2
81116af4:	01a04474 	movhi	r6,33041
81116af8:	319ac204 	addi	r6,r6,27400
81116afc:	1185883a 	add	r2,r2,r6
81116b00:	10800017 	ldw	r2,0(r2)
81116b04:	1000683a 	jmp	r2
81116b08:	81116e00 	call	881116e0 <__reset+0x20f16e0>
81116b0c:	81116f28 	cmpgeui	r4,r16,17852
81116b10:	81116e00 	call	881116e0 <__reset+0x20f16e0>
81116b14:	81116f28 	cmpgeui	r4,r16,17852
81116b18:	81116f28 	cmpgeui	r4,r16,17852
81116b1c:	81116dd4 	ori	r4,r16,17847
81116b20:	81116c44 	addi	r4,r16,17841
81116b24:	81116c44 	addi	r4,r16,17841
81116b28:	81116c44 	addi	r4,r16,17841
81116b2c:	81116c44 	addi	r4,r16,17841
81116b30:	81116c44 	addi	r4,r16,17841
81116b34:	81116c44 	addi	r4,r16,17841
81116b38:	81116c44 	addi	r4,r16,17841
81116b3c:	81116c44 	addi	r4,r16,17841
81116b40:	81116c44 	addi	r4,r16,17841
81116b44:	81116f28 	cmpgeui	r4,r16,17852
81116b48:	81116f28 	cmpgeui	r4,r16,17852
81116b4c:	81116f28 	cmpgeui	r4,r16,17852
81116b50:	81116f28 	cmpgeui	r4,r16,17852
81116b54:	81116f28 	cmpgeui	r4,r16,17852
81116b58:	81116f28 	cmpgeui	r4,r16,17852
81116b5c:	81116f28 	cmpgeui	r4,r16,17852
81116b60:	81116f18 	cmpnei	r4,r16,17852
81116b64:	81116f28 	cmpgeui	r4,r16,17852
81116b68:	81116f28 	cmpgeui	r4,r16,17852
81116b6c:	81116f28 	cmpgeui	r4,r16,17852
81116b70:	81116ed4 	ori	r4,r16,17851
81116b74:	81116eb8 	rdprs	r4,r16,17850
81116b78:	81116f28 	cmpgeui	r4,r16,17852
81116b7c:	81116f28 	cmpgeui	r4,r16,17852
81116b80:	81116e84 	addi	r4,r16,17850
81116b84:	81116f28 	cmpgeui	r4,r16,17852
81116b88:	81116f28 	cmpgeui	r4,r16,17852
81116b8c:	81116f28 	cmpgeui	r4,r16,17852
81116b90:	81116f28 	cmpgeui	r4,r16,17852
81116b94:	81116e4c 	andi	r4,r16,17849
81116b98:	81116f28 	cmpgeui	r4,r16,17852
81116b9c:	81116f28 	cmpgeui	r4,r16,17852
81116ba0:	81116f28 	cmpgeui	r4,r16,17852
81116ba4:	81116f28 	cmpgeui	r4,r16,17852
81116ba8:	81116f28 	cmpgeui	r4,r16,17852
81116bac:	81116e30 	cmpltui	r4,r16,17848
81116bb0:	81116f28 	cmpgeui	r4,r16,17852
81116bb4:	81116f28 	cmpgeui	r4,r16,17852
81116bb8:	81116f28 	cmpgeui	r4,r16,17852
81116bbc:	81116f28 	cmpgeui	r4,r16,17852
81116bc0:	81116e14 	ori	r4,r16,17848
81116bc4:	81116f28 	cmpgeui	r4,r16,17852
81116bc8:	81116f28 	cmpgeui	r4,r16,17852
81116bcc:	81116f28 	cmpgeui	r4,r16,17852
81116bd0:	81116f28 	cmpgeui	r4,r16,17852
81116bd4:	81116f28 	cmpgeui	r4,r16,17852
81116bd8:	81116f28 	cmpgeui	r4,r16,17852
81116bdc:	81116f28 	cmpgeui	r4,r16,17852
81116be0:	81116f18 	cmpnei	r4,r16,17852
81116be4:	81116f28 	cmpgeui	r4,r16,17852
81116be8:	81116f28 	cmpgeui	r4,r16,17852
81116bec:	81116f28 	cmpgeui	r4,r16,17852
81116bf0:	81116ed4 	ori	r4,r16,17851
81116bf4:	81116eb8 	rdprs	r4,r16,17850
81116bf8:	81116f28 	cmpgeui	r4,r16,17852
81116bfc:	81116f28 	cmpgeui	r4,r16,17852
81116c00:	81116e84 	addi	r4,r16,17850
81116c04:	81116f28 	cmpgeui	r4,r16,17852
81116c08:	81116f28 	cmpgeui	r4,r16,17852
81116c0c:	81116f28 	cmpgeui	r4,r16,17852
81116c10:	81116f28 	cmpgeui	r4,r16,17852
81116c14:	81116e4c 	andi	r4,r16,17849
81116c18:	81116f28 	cmpgeui	r4,r16,17852
81116c1c:	81116f28 	cmpgeui	r4,r16,17852
81116c20:	81116f28 	cmpgeui	r4,r16,17852
81116c24:	81116f28 	cmpgeui	r4,r16,17852
81116c28:	81116f28 	cmpgeui	r4,r16,17852
81116c2c:	81116e30 	cmpltui	r4,r16,17848
81116c30:	81116f28 	cmpgeui	r4,r16,17852
81116c34:	81116f28 	cmpgeui	r4,r16,17852
81116c38:	81116f28 	cmpgeui	r4,r16,17852
81116c3c:	81116f28 	cmpgeui	r4,r16,17852
81116c40:	81116e14 	ori	r4,r16,17848
81116c44:	a8803fcc 	andi	r2,r21,255
81116c48:	1080201c 	xori	r2,r2,128
81116c4c:	10bfe004 	addi	r2,r2,-128
81116c50:	b085883a 	add	r2,r22,r2
81116c54:	10000d1e 	bne	r2,zero,81116c8c <__svfscanf_r+0xd10>
81116c58:	00bf9fc4 	movi	r2,-385
81116c5c:	a0a8703a 	and	r20,r20,r2
81116c60:	89400005 	stb	r5,0(r17)
81116c64:	8c400044 	addi	r17,r17,1
81116c68:	e0800117 	ldw	r2,4(fp)
81116c6c:	843fffc4 	addi	r16,r16,-1
81116c70:	94800044 	addi	r18,r18,1
81116c74:	10bfffc4 	addi	r2,r2,-1
81116c78:	e0800115 	stw	r2,4(fp)
81116c7c:	0080b40e 	bge	zero,r2,81116f50 <__svfscanf_r+0xfd4>
81116c80:	21000044 	addi	r4,r4,1
81116c84:	e1000015 	stw	r4,0(fp)
81116c88:	803f941e 	bne	r16,zero,81116adc <__reset+0xfb0f6adc>
81116c8c:	8821883a 	mov	r16,r17
81116c90:	b019883a 	mov	r12,r22
81116c94:	9823883a 	mov	r17,r19
81116c98:	182d883a 	mov	r22,r3
81116c9c:	9801961e 	bne	r19,zero,811172f8 <__svfscanf_r+0x137c>
81116ca0:	633fffc4 	addi	r12,r12,-1
81116ca4:	00800044 	movi	r2,1
81116ca8:	1302882e 	bgeu	r2,r12,811176cc <__svfscanf_r+0x1750>
81116cac:	a8803fcc 	andi	r2,r21,255
81116cb0:	1080201c 	xori	r2,r2,128
81116cb4:	10bfe004 	addi	r2,r2,-128
81116cb8:	113fffc4 	addi	r4,r2,-1
81116cbc:	01400184 	movi	r5,6
81116cc0:	29001136 	bltu	r5,r4,81116d08 <__svfscanf_r+0xd8c>
81116cc4:	01000084 	movi	r4,2
81116cc8:	2082900e 	bge	r4,r2,8111770c <__svfscanf_r+0x1790>
81116ccc:	00c000c4 	movi	r3,3
81116cd0:	10c00d26 	beq	r2,r3,81116d08 <__svfscanf_r+0xd8c>
81116cd4:	9425c83a 	sub	r18,r18,r16
81116cd8:	1827883a 	mov	r19,r3
81116cdc:	843fffc4 	addi	r16,r16,-1
81116ce0:	81400007 	ldb	r5,0(r16)
81116ce4:	e00d883a 	mov	r6,fp
81116ce8:	b009883a 	mov	r4,r22
81116cec:	111fa740 	call	8111fa74 <_ungetc_r>
81116cf0:	a8bfffc4 	addi	r2,r21,-1
81116cf4:	10c03fcc 	andi	r3,r2,255
81116cf8:	8493883a 	add	r9,r16,r18
81116cfc:	102b883a 	mov	r21,r2
81116d00:	98fff636 	bltu	r19,r3,81116cdc <__reset+0xfb0f6cdc>
81116d04:	4825883a 	mov	r18,r9
81116d08:	a080400c 	andi	r2,r20,256
81116d0c:	10001426 	beq	r2,zero,81116d60 <__svfscanf_r+0xde4>
81116d10:	a081000c 	andi	r2,r20,1024
81116d14:	1002571e 	bne	r2,zero,81117674 <__svfscanf_r+0x16f8>
81116d18:	817fffc7 	ldb	r5,-1(r16)
81116d1c:	00801944 	movi	r2,101
81116d20:	84ffffc4 	addi	r19,r16,-1
81116d24:	957fffc4 	addi	r21,r18,-1
81116d28:	28800826 	beq	r5,r2,81116d4c <__svfscanf_r+0xdd0>
81116d2c:	00801144 	movi	r2,69
81116d30:	28800626 	beq	r5,r2,81116d4c <__svfscanf_r+0xdd0>
81116d34:	e00d883a 	mov	r6,fp
81116d38:	b009883a 	mov	r4,r22
81116d3c:	111fa740 	call	8111fa74 <_ungetc_r>
81116d40:	817fff87 	ldb	r5,-2(r16)
81116d44:	84ffff84 	addi	r19,r16,-2
81116d48:	957fff84 	addi	r21,r18,-2
81116d4c:	e00d883a 	mov	r6,fp
81116d50:	b009883a 	mov	r4,r22
81116d54:	111fa740 	call	8111fa74 <_ungetc_r>
81116d58:	a825883a 	mov	r18,r21
81116d5c:	9821883a 	mov	r16,r19
81116d60:	a080040c 	andi	r2,r20,16
81116d64:	103e891e 	bne	r2,zero,8111678c <__reset+0xfb0f678c>
81116d68:	80000005 	stb	zero,0(r16)
81116d6c:	a081800c 	andi	r2,r20,1536
81116d70:	01010004 	movi	r4,1024
81116d74:	1101dd26 	beq	r2,r4,811174ec <__svfscanf_r+0x1570>
81116d78:	da00a417 	ldw	r8,656(sp)
81116d7c:	4001e71e 	bne	r8,zero,8111751c <__svfscanf_r+0x15a0>
81116d80:	000d883a 	mov	r6,zero
81116d84:	d9400104 	addi	r5,sp,4
81116d88:	b009883a 	mov	r4,r22
81116d8c:	111c6240 	call	8111c624 <_strtod_r>
81116d90:	1021883a 	mov	r16,r2
81116d94:	a080004c 	andi	r2,r20,1
81116d98:	1000021e 	bne	r2,zero,81116da4 <__svfscanf_r+0xe28>
81116d9c:	a2c0008c 	andi	r11,r20,2
81116da0:	5801e826 	beq	r11,zero,81117544 <__svfscanf_r+0x15c8>
81116da4:	da009c17 	ldw	r8,624(sp)
81116da8:	40800017 	ldw	r2,0(r8)
81116dac:	42000104 	addi	r8,r8,4
81116db0:	da009c15 	stw	r8,624(sp)
81116db4:	14000015 	stw	r16,0(r2)
81116db8:	10c00115 	stw	r3,4(r2)
81116dbc:	da00a017 	ldw	r8,640(sp)
81116dc0:	dd009d17 	ldw	r20,628(sp)
81116dc4:	42000044 	addi	r8,r8,1
81116dc8:	da00a015 	stw	r8,640(sp)
81116dcc:	a00d883a 	mov	r6,r20
81116dd0:	003ca806 	br	81116074 <__reset+0xfb0f6074>
81116dd4:	a080400c 	andi	r2,r20,256
81116dd8:	103f9a26 	beq	r2,zero,81116c44 <__reset+0xfb0f6c44>
81116ddc:	da00a217 	ldw	r8,648(sp)
81116de0:	00bfdfc4 	movi	r2,-129
81116de4:	a0a8703a 	and	r20,r20,r2
81116de8:	9cc00044 	addi	r19,r19,1
81116dec:	403f9e26 	beq	r8,zero,81116c68 <__reset+0xfb0f6c68>
81116df0:	423fffc4 	addi	r8,r8,-1
81116df4:	da00a215 	stw	r8,648(sp)
81116df8:	84000044 	addi	r16,r16,1
81116dfc:	003f9a06 	br	81116c68 <__reset+0xfb0f6c68>
81116e00:	a080200c 	andi	r2,r20,128
81116e04:	103fa126 	beq	r2,zero,81116c8c <__reset+0xfb0f6c8c>
81116e08:	00bfdfc4 	movi	r2,-129
81116e0c:	a0a8703a 	and	r20,r20,r2
81116e10:	003f9306 	br	81116c60 <__reset+0xfb0f6c60>
81116e14:	a8803fcc 	andi	r2,r21,255
81116e18:	1080201c 	xori	r2,r2,128
81116e1c:	10bfe004 	addi	r2,r2,-128
81116e20:	020001c4 	movi	r8,7
81116e24:	123f991e 	bne	r2,r8,81116c8c <__reset+0xfb0f6c8c>
81116e28:	05400204 	movi	r21,8
81116e2c:	003f8c06 	br	81116c60 <__reset+0xfb0f6c60>
81116e30:	a8803fcc 	andi	r2,r21,255
81116e34:	1080201c 	xori	r2,r2,128
81116e38:	10bfe004 	addi	r2,r2,-128
81116e3c:	01800184 	movi	r6,6
81116e40:	11bf921e 	bne	r2,r6,81116c8c <__reset+0xfb0f6c8c>
81116e44:	054001c4 	movi	r21,7
81116e48:	003f8506 	br	81116c60 <__reset+0xfb0f6c60>
81116e4c:	b000491e 	bne	r22,zero,81116f74 <__svfscanf_r+0xff8>
81116e50:	9800031e 	bne	r19,zero,81116e60 <__svfscanf_r+0xee4>
81116e54:	a081c00c 	andi	r2,r20,1792
81116e58:	0181c004 	movi	r6,1792
81116e5c:	11819f26 	beq	r2,r6,811174dc <__svfscanf_r+0x1560>
81116e60:	a8803fcc 	andi	r2,r21,255
81116e64:	1080201c 	xori	r2,r2,128
81116e68:	10bfe004 	addi	r2,r2,-128
81116e6c:	01800044 	movi	r6,1
81116e70:	11800226 	beq	r2,r6,81116e7c <__svfscanf_r+0xf00>
81116e74:	01800104 	movi	r6,4
81116e78:	11bf841e 	bne	r2,r6,81116c8c <__reset+0xfb0f6c8c>
81116e7c:	ad400044 	addi	r21,r21,1
81116e80:	003f7706 	br	81116c60 <__reset+0xfb0f6c60>
81116e84:	a8803fcc 	andi	r2,r21,255
81116e88:	1080201c 	xori	r2,r2,128
81116e8c:	10bfe004 	addi	r2,r2,-128
81116e90:	10003c1e 	bne	r2,zero,81116f84 <__svfscanf_r+0x1008>
81116e94:	9801141e 	bne	r19,zero,811172e8 <__svfscanf_r+0x136c>
81116e98:	a081c00c 	andi	r2,r20,1792
81116e9c:	0181c004 	movi	r6,1792
81116ea0:	11818226 	beq	r2,r6,811174ac <__svfscanf_r+0x1530>
81116ea4:	8821883a 	mov	r16,r17
81116ea8:	b019883a 	mov	r12,r22
81116eac:	9823883a 	mov	r17,r19
81116eb0:	182d883a 	mov	r22,r3
81116eb4:	003f7a06 	br	81116ca0 <__reset+0xfb0f6ca0>
81116eb8:	a8803fcc 	andi	r2,r21,255
81116ebc:	1080201c 	xori	r2,r2,128
81116ec0:	10bfe004 	addi	r2,r2,-128
81116ec4:	01800084 	movi	r6,2
81116ec8:	11bf701e 	bne	r2,r6,81116c8c <__reset+0xfb0f6c8c>
81116ecc:	054000c4 	movi	r21,3
81116ed0:	003f6306 	br	81116c60 <__reset+0xfb0f6c60>
81116ed4:	a081400c 	andi	r2,r20,1280
81116ed8:	01810004 	movi	r6,1024
81116edc:	11800326 	beq	r2,r6,81116eec <__svfscanf_r+0xf70>
81116ee0:	a184703a 	and	r2,r20,r6
81116ee4:	103f6926 	beq	r2,zero,81116c8c <__reset+0xfb0f6c8c>
81116ee8:	983fee26 	beq	r19,zero,81116ea4 <__reset+0xfb0f6ea4>
81116eec:	a080800c 	andi	r2,r20,512
81116ef0:	1000041e 	bne	r2,zero,81116f04 <__svfscanf_r+0xf88>
81116ef4:	da009f17 	ldw	r8,636(sp)
81116ef8:	dc40a515 	stw	r17,660(sp)
81116efc:	9a27c83a 	sub	r19,r19,r8
81116f00:	dcc0a415 	stw	r19,656(sp)
81116f04:	00be1fc4 	movi	r2,-1921
81116f08:	a0a8703a 	and	r20,r20,r2
81116f0c:	a5006014 	ori	r20,r20,384
81116f10:	0027883a 	mov	r19,zero
81116f14:	003f5206 	br	81116c60 <__reset+0xfb0f6c60>
81116f18:	00800044 	movi	r2,1
81116f1c:	b0bf5b1e 	bne	r22,r2,81116c8c <__reset+0xfb0f6c8c>
81116f20:	05800084 	movi	r22,2
81116f24:	003f4e06 	br	81116c60 <__reset+0xfb0f6c60>
81116f28:	d980a317 	ldw	r6,652(sp)
81116f2c:	30800003 	ldbu	r2,0(r6)
81116f30:	29803fcc 	andi	r6,r5,255
81116f34:	30bf551e 	bne	r6,r2,81116c8c <__reset+0xfb0f6c8c>
81116f38:	a080800c 	andi	r2,r20,512
81116f3c:	103f5326 	beq	r2,zero,81116c8c <__reset+0xfb0f6c8c>
81116f40:	023f5fc4 	movi	r8,-641
81116f44:	a228703a 	and	r20,r20,r8
81116f48:	dcc09f15 	stw	r19,636(sp)
81116f4c:	003f4406 	br	81116c60 <__reset+0xfb0f6c60>
81116f50:	1809883a 	mov	r4,r3
81116f54:	e00b883a 	mov	r5,fp
81116f58:	d8c0a615 	stw	r3,664(sp)
81116f5c:	d9c0aa15 	stw	r7,680(sp)
81116f60:	11112a00 	call	811112a0 <__srefill_r>
81116f64:	d8c0a617 	ldw	r3,664(sp)
81116f68:	d9c0aa17 	ldw	r7,680(sp)
81116f6c:	103f4626 	beq	r2,zero,81116c88 <__reset+0xfb0f6c88>
81116f70:	003f4606 	br	81116c8c <__reset+0xfb0f6c8c>
81116f74:	00800084 	movi	r2,2
81116f78:	b0bfb91e 	bne	r22,r2,81116e60 <__reset+0xfb0f6e60>
81116f7c:	058000c4 	movi	r22,3
81116f80:	003f3706 	br	81116c60 <__reset+0xfb0f6c60>
81116f84:	018000c4 	movi	r6,3
81116f88:	11bfbc26 	beq	r2,r6,81116e7c <__reset+0xfb0f6e7c>
81116f8c:	01800144 	movi	r6,5
81116f90:	11bfba26 	beq	r2,r6,81116e7c <__reset+0xfb0f6e7c>
81116f94:	003f3d06 	br	81116c8c <__reset+0xfb0f6c8c>
81116f98:	98bfffc4 	addi	r2,r19,-1
81116f9c:	01405704 	movi	r5,348
81116fa0:	2880d82e 	bgeu	r5,r2,81117304 <__svfscanf_r+0x1388>
81116fa4:	99ffa8c4 	addi	r7,r19,-349
81116fa8:	04c05744 	movi	r19,349
81116fac:	8c436014 	ori	r17,r17,3456
81116fb0:	9013883a 	mov	r9,r18
81116fb4:	8825883a 	mov	r18,r17
81116fb8:	dc409e17 	ldw	r17,632(sp)
81116fbc:	0029883a 	mov	r20,zero
81116fc0:	dc000104 	addi	r16,sp,4
81116fc4:	05401344 	movi	r21,77
81116fc8:	02c08004 	movi	r11,512
81116fcc:	01bf7fc4 	movi	r6,-513
81116fd0:	023fdfc4 	movi	r8,-129
81116fd4:	20bff544 	addi	r2,r4,-43
81116fd8:	10803fcc 	andi	r2,r2,255
81116fdc:	a8807236 	bltu	r21,r2,811171a8 <__svfscanf_r+0x122c>
81116fe0:	100490ba 	slli	r2,r2,2
81116fe4:	01604474 	movhi	r5,33041
81116fe8:	295bfe04 	addi	r5,r5,28664
81116fec:	1145883a 	add	r2,r2,r5
81116ff0:	10800017 	ldw	r2,0(r2)
81116ff4:	1000683a 	jmp	r2
81116ff8:	8111722c 	andhi	r4,r16,17864
81116ffc:	811171a8 	cmpgeui	r4,r16,17862
81117000:	8111722c 	andhi	r4,r16,17864
81117004:	811171a8 	cmpgeui	r4,r16,17862
81117008:	811171a8 	cmpgeui	r4,r16,17862
8111700c:	81117204 	addi	r4,r16,17864
81117010:	811171e4 	muli	r4,r16,17863
81117014:	811171e4 	muli	r4,r16,17863
81117018:	811171e4 	muli	r4,r16,17863
8111701c:	811171e4 	muli	r4,r16,17863
81117020:	811171e4 	muli	r4,r16,17863
81117024:	811171e4 	muli	r4,r16,17863
81117028:	811171e4 	muli	r4,r16,17863
8111702c:	8111718c 	andi	r4,r16,17862
81117030:	8111718c 	andi	r4,r16,17862
81117034:	811171a8 	cmpgeui	r4,r16,17862
81117038:	811171a8 	cmpgeui	r4,r16,17862
8111703c:	811171a8 	cmpgeui	r4,r16,17862
81117040:	811171a8 	cmpgeui	r4,r16,17862
81117044:	811171a8 	cmpgeui	r4,r16,17862
81117048:	811171a8 	cmpgeui	r4,r16,17862
8111704c:	811171a8 	cmpgeui	r4,r16,17862
81117050:	81117178 	rdprs	r4,r16,17861
81117054:	81117178 	rdprs	r4,r16,17861
81117058:	81117178 	rdprs	r4,r16,17861
8111705c:	81117178 	rdprs	r4,r16,17861
81117060:	81117178 	rdprs	r4,r16,17861
81117064:	81117178 	rdprs	r4,r16,17861
81117068:	811171a8 	cmpgeui	r4,r16,17862
8111706c:	811171a8 	cmpgeui	r4,r16,17862
81117070:	811171a8 	cmpgeui	r4,r16,17862
81117074:	811171a8 	cmpgeui	r4,r16,17862
81117078:	811171a8 	cmpgeui	r4,r16,17862
8111707c:	811171a8 	cmpgeui	r4,r16,17862
81117080:	811171a8 	cmpgeui	r4,r16,17862
81117084:	811171a8 	cmpgeui	r4,r16,17862
81117088:	811171a8 	cmpgeui	r4,r16,17862
8111708c:	811171a8 	cmpgeui	r4,r16,17862
81117090:	811171a8 	cmpgeui	r4,r16,17862
81117094:	811171a8 	cmpgeui	r4,r16,17862
81117098:	811171a8 	cmpgeui	r4,r16,17862
8111709c:	811171a8 	cmpgeui	r4,r16,17862
811170a0:	811171a8 	cmpgeui	r4,r16,17862
811170a4:	811171a8 	cmpgeui	r4,r16,17862
811170a8:	811171a8 	cmpgeui	r4,r16,17862
811170ac:	81117130 	cmpltui	r4,r16,17860
811170b0:	811171a8 	cmpgeui	r4,r16,17862
811170b4:	811171a8 	cmpgeui	r4,r16,17862
811170b8:	811171a8 	cmpgeui	r4,r16,17862
811170bc:	811171a8 	cmpgeui	r4,r16,17862
811170c0:	811171a8 	cmpgeui	r4,r16,17862
811170c4:	811171a8 	cmpgeui	r4,r16,17862
811170c8:	811171a8 	cmpgeui	r4,r16,17862
811170cc:	811171a8 	cmpgeui	r4,r16,17862
811170d0:	81117178 	rdprs	r4,r16,17861
811170d4:	81117178 	rdprs	r4,r16,17861
811170d8:	81117178 	rdprs	r4,r16,17861
811170dc:	81117178 	rdprs	r4,r16,17861
811170e0:	81117178 	rdprs	r4,r16,17861
811170e4:	81117178 	rdprs	r4,r16,17861
811170e8:	811171a8 	cmpgeui	r4,r16,17862
811170ec:	811171a8 	cmpgeui	r4,r16,17862
811170f0:	811171a8 	cmpgeui	r4,r16,17862
811170f4:	811171a8 	cmpgeui	r4,r16,17862
811170f8:	811171a8 	cmpgeui	r4,r16,17862
811170fc:	811171a8 	cmpgeui	r4,r16,17862
81117100:	811171a8 	cmpgeui	r4,r16,17862
81117104:	811171a8 	cmpgeui	r4,r16,17862
81117108:	811171a8 	cmpgeui	r4,r16,17862
8111710c:	811171a8 	cmpgeui	r4,r16,17862
81117110:	811171a8 	cmpgeui	r4,r16,17862
81117114:	811171a8 	cmpgeui	r4,r16,17862
81117118:	811171a8 	cmpgeui	r4,r16,17862
8111711c:	811171a8 	cmpgeui	r4,r16,17862
81117120:	811171a8 	cmpgeui	r4,r16,17862
81117124:	811171a8 	cmpgeui	r4,r16,17862
81117128:	811171a8 	cmpgeui	r4,r16,17862
8111712c:	81117130 	cmpltui	r4,r16,17860
81117130:	9081800c 	andi	r2,r18,1536
81117134:	12c01c1e 	bne	r2,r11,811171a8 <__svfscanf_r+0x122c>
81117138:	91a4703a 	and	r18,r18,r6
8111713c:	94814014 	ori	r18,r18,1280
81117140:	04400404 	movi	r17,16
81117144:	81000005 	stb	r4,0(r16)
81117148:	84000044 	addi	r16,r16,1
8111714c:	e0800117 	ldw	r2,4(fp)
81117150:	10bfffc4 	addi	r2,r2,-1
81117154:	e0800115 	stw	r2,4(fp)
81117158:	0080540e 	bge	zero,r2,811172ac <__svfscanf_r+0x1330>
8111715c:	18c00044 	addi	r3,r3,1
81117160:	e0c00015 	stw	r3,0(fp)
81117164:	9cffffc4 	addi	r19,r19,-1
81117168:	98000f26 	beq	r19,zero,811171a8 <__svfscanf_r+0x122c>
8111716c:	e0c00017 	ldw	r3,0(fp)
81117170:	19000003 	ldbu	r4,0(r3)
81117174:	003f9706 	br	81116fd4 <__reset+0xfb0f6fd4>
81117178:	00800284 	movi	r2,10
8111717c:	14400a0e 	bge	r2,r17,811171a8 <__svfscanf_r+0x122c>
81117180:	00bd1fc4 	movi	r2,-2945
81117184:	90a4703a 	and	r18,r18,r2
81117188:	003fee06 	br	81117144 <__reset+0xfb0f7144>
8111718c:	01604534 	movhi	r5,33044
81117190:	8c63883a 	add	r17,r17,r17
81117194:	29711e84 	addi	r5,r5,-15238
81117198:	2c45883a 	add	r2,r5,r17
8111719c:	1440000f 	ldh	r17,0(r2)
811171a0:	00800204 	movi	r2,8
811171a4:	147ff616 	blt	r2,r17,81117180 <__reset+0xfb0f7180>
811171a8:	dc409e15 	stw	r17,632(sp)
811171ac:	9023883a 	mov	r17,r18
811171b0:	8880400c 	andi	r2,r17,256
811171b4:	4825883a 	mov	r18,r9
811171b8:	10000426 	beq	r2,zero,811171cc <__svfscanf_r+0x1250>
811171bc:	d9800104 	addi	r6,sp,4
811171c0:	3400be36 	bltu	r6,r16,811174bc <__svfscanf_r+0x1540>
811171c4:	da000104 	addi	r8,sp,4
811171c8:	443bae26 	beq	r8,r16,81116084 <__reset+0xfb0f6084>
811171cc:	8880040c 	andi	r2,r17,16
811171d0:	10009326 	beq	r2,zero,81117420 <__svfscanf_r+0x14a4>
811171d4:	d8800104 	addi	r2,sp,4
811171d8:	80a1c83a 	sub	r16,r16,r2
811171dc:	8521883a 	add	r16,r16,r20
811171e0:	003d0606 	br	811165fc <__reset+0xfb0f65fc>
811171e4:	01604534 	movhi	r5,33044
811171e8:	8c63883a 	add	r17,r17,r17
811171ec:	29711e84 	addi	r5,r5,-15238
811171f0:	2c45883a 	add	r2,r5,r17
811171f4:	1440000f 	ldh	r17,0(r2)
811171f8:	00bd1fc4 	movi	r2,-2945
811171fc:	90a4703a 	and	r18,r18,r2
81117200:	003fd006 	br	81117144 <__reset+0xfb0f7144>
81117204:	9082000c 	andi	r2,r18,2048
81117208:	103fce26 	beq	r2,zero,81117144 <__reset+0xfb0f7144>
8111720c:	8800021e 	bne	r17,zero,81117218 <__svfscanf_r+0x129c>
81117210:	94808014 	ori	r18,r18,512
81117214:	04400204 	movi	r17,8
81117218:	9081000c 	andi	r2,r18,1024
8111721c:	10009426 	beq	r2,zero,81117470 <__svfscanf_r+0x14f4>
81117220:	00be9fc4 	movi	r2,-1409
81117224:	90a4703a 	and	r18,r18,r2
81117228:	003fc606 	br	81117144 <__reset+0xfb0f7144>
8111722c:	9080200c 	andi	r2,r18,128
81117230:	103fdd26 	beq	r2,zero,811171a8 <__reset+0xfb0f71a8>
81117234:	9224703a 	and	r18,r18,r8
81117238:	003fc206 	br	81117144 <__reset+0xfb0f7144>
8111723c:	9800011e 	bne	r19,zero,81117244 <__svfscanf_r+0x12c8>
81117240:	04ffffc4 	movi	r19,-1
81117244:	8900004c 	andi	r4,r17,1
81117248:	20005b1e 	bne	r4,zero,811173b8 <__svfscanf_r+0x143c>
8111724c:	8c40040c 	andi	r17,r17,16
81117250:	88003026 	beq	r17,zero,81117314 <__svfscanf_r+0x1398>
81117254:	0021883a 	mov	r16,zero
81117258:	00000306 	br	81117268 <__svfscanf_r+0x12ec>
8111725c:	18800003 	ldbu	r2,0(r3)
81117260:	3885883a 	add	r2,r7,r2
81117264:	10800043 	ldbu	r2,1(r2)
81117268:	1080020c 	andi	r2,r2,8
8111726c:	103ce31e 	bne	r2,zero,811165fc <__reset+0xfb0f65fc>
81117270:	e0800117 	ldw	r2,4(fp)
81117274:	18c00044 	addi	r3,r3,1
81117278:	84000044 	addi	r16,r16,1
8111727c:	10bfffc4 	addi	r2,r2,-1
81117280:	e0800115 	stw	r2,4(fp)
81117284:	e0c00015 	stw	r3,0(fp)
81117288:	84fcdc26 	beq	r16,r19,811165fc <__reset+0xfb0f65fc>
8111728c:	00bff316 	blt	zero,r2,8111725c <__reset+0xfb0f725c>
81117290:	e00b883a 	mov	r5,fp
81117294:	b009883a 	mov	r4,r22
81117298:	11112a00 	call	811112a0 <__srefill_r>
8111729c:	103cd71e 	bne	r2,zero,811165fc <__reset+0xfb0f65fc>
811172a0:	b9c00017 	ldw	r7,0(r23)
811172a4:	e0c00017 	ldw	r3,0(fp)
811172a8:	003fec06 	br	8111725c <__reset+0xfb0f725c>
811172ac:	e00b883a 	mov	r5,fp
811172b0:	b009883a 	mov	r4,r22
811172b4:	d980a715 	stw	r6,668(sp)
811172b8:	d9c0aa15 	stw	r7,680(sp)
811172bc:	da00a815 	stw	r8,672(sp)
811172c0:	da40a915 	stw	r9,676(sp)
811172c4:	dac0a615 	stw	r11,664(sp)
811172c8:	11112a00 	call	811112a0 <__srefill_r>
811172cc:	d980a717 	ldw	r6,668(sp)
811172d0:	d9c0aa17 	ldw	r7,680(sp)
811172d4:	da00a817 	ldw	r8,672(sp)
811172d8:	da40a917 	ldw	r9,676(sp)
811172dc:	dac0a617 	ldw	r11,664(sp)
811172e0:	103fa026 	beq	r2,zero,81117164 <__reset+0xfb0f7164>
811172e4:	003fb006 	br	811171a8 <__reset+0xfb0f71a8>
811172e8:	8821883a 	mov	r16,r17
811172ec:	b019883a 	mov	r12,r22
811172f0:	9823883a 	mov	r17,r19
811172f4:	182d883a 	mov	r22,r3
811172f8:	00bfbfc4 	movi	r2,-257
811172fc:	a0a8703a 	and	r20,r20,r2
81117300:	003e6706 	br	81116ca0 <__reset+0xfb0f6ca0>
81117304:	000f883a 	mov	r7,zero
81117308:	003f2806 	br	81116fac <__reset+0xfb0f6fac>
8111730c:	d800a215 	stw	zero,648(sp)
81117310:	003de306 	br	81116aa0 <__reset+0xfb0f6aa0>
81117314:	da009c17 	ldw	r8,624(sp)
81117318:	9abfffc4 	addi	r10,r19,-1
8111731c:	44400017 	ldw	r17,0(r8)
81117320:	44000104 	addi	r16,r8,4
81117324:	880b883a 	mov	r5,r17
81117328:	8aa9883a 	add	r20,r17,r10
8111732c:	00000606 	br	81117348 <__svfscanf_r+0x13cc>
81117330:	e0c00017 	ldw	r3,0(fp)
81117334:	b9000017 	ldw	r4,0(r23)
81117338:	a80b883a 	mov	r5,r21
8111733c:	18800003 	ldbu	r2,0(r3)
81117340:	2085883a 	add	r2,r4,r2
81117344:	10800043 	ldbu	r2,1(r2)
81117348:	1080020c 	andi	r2,r2,8
8111734c:	1000551e 	bne	r2,zero,811174a4 <__svfscanf_r+0x1528>
81117350:	e0800117 	ldw	r2,4(fp)
81117354:	19000044 	addi	r4,r3,1
81117358:	e1000015 	stw	r4,0(fp)
8111735c:	10bfffc4 	addi	r2,r2,-1
81117360:	e0800115 	stw	r2,4(fp)
81117364:	18800003 	ldbu	r2,0(r3)
81117368:	2d400044 	addi	r21,r5,1
8111736c:	a827883a 	mov	r19,r21
81117370:	28800005 	stb	r2,0(r5)
81117374:	2d000626 	beq	r5,r20,81117390 <__svfscanf_r+0x1414>
81117378:	e0800117 	ldw	r2,4(fp)
8111737c:	00bfec16 	blt	zero,r2,81117330 <__reset+0xfb0f7330>
81117380:	e00b883a 	mov	r5,fp
81117384:	b009883a 	mov	r4,r22
81117388:	11112a00 	call	811112a0 <__srefill_r>
8111738c:	103fe826 	beq	r2,zero,81117330 <__reset+0xfb0f7330>
81117390:	da00a017 	ldw	r8,640(sp)
81117394:	dd009d17 	ldw	r20,628(sp)
81117398:	9c63c83a 	sub	r17,r19,r17
8111739c:	42000044 	addi	r8,r8,1
811173a0:	98000005 	stb	zero,0(r19)
811173a4:	9465883a 	add	r18,r18,r17
811173a8:	da00a015 	stw	r8,640(sp)
811173ac:	dc009c15 	stw	r16,624(sp)
811173b0:	a00d883a 	mov	r6,r20
811173b4:	003b2f06 	br	81116074 <__reset+0xfb0f6074>
811173b8:	dd409904 	addi	r21,sp,612
811173bc:	8c40040c 	andi	r17,r17,16
811173c0:	01800204 	movi	r6,8
811173c4:	000b883a 	mov	r5,zero
811173c8:	a809883a 	mov	r4,r21
811173cc:	1110f9c0 	call	81110f9c <memset>
811173d0:	8800401e 	bne	r17,zero,811174d4 <__svfscanf_r+0x1558>
811173d4:	da009c17 	ldw	r8,624(sp)
811173d8:	45000017 	ldw	r20,0(r8)
811173dc:	42000104 	addi	r8,r8,4
811173e0:	da009c15 	stw	r8,624(sp)
811173e4:	000d883a 	mov	r6,zero
811173e8:	3021883a 	mov	r16,r6
811173ec:	dc409f15 	stw	r17,636(sp)
811173f0:	e0800017 	ldw	r2,0(fp)
811173f4:	b8c00017 	ldw	r3,0(r23)
811173f8:	10800003 	ldbu	r2,0(r2)
811173fc:	1885883a 	add	r2,r3,r2
81117400:	10800043 	ldbu	r2,1(r2)
81117404:	1080020c 	andi	r2,r2,8
81117408:	1000011e 	bne	r2,zero,81117410 <__svfscanf_r+0x1494>
8111740c:	9800701e 	bne	r19,zero,811175d0 <__svfscanf_r+0x1654>
81117410:	dc409f17 	ldw	r17,636(sp)
81117414:	883cdd1e 	bne	r17,zero,8111678c <__reset+0xfb0f678c>
81117418:	a0000015 	stw	zero,0(r20)
8111741c:	003cd806 	br	81116780 <__reset+0xfb0f6780>
81117420:	d9c09e17 	ldw	r7,632(sp)
81117424:	da00a117 	ldw	r8,644(sp)
81117428:	000d883a 	mov	r6,zero
8111742c:	d9400104 	addi	r5,sp,4
81117430:	b009883a 	mov	r4,r22
81117434:	80000005 	stb	zero,0(r16)
81117438:	403ee83a 	callr	r8
8111743c:	88c0080c 	andi	r3,r17,32
81117440:	1800121e 	bne	r3,zero,8111748c <__svfscanf_r+0x1510>
81117444:	88c0010c 	andi	r3,r17,4
81117448:	18004d26 	beq	r3,zero,81117580 <__svfscanf_r+0x1604>
8111744c:	da009c17 	ldw	r8,624(sp)
81117450:	40c00017 	ldw	r3,0(r8)
81117454:	42000104 	addi	r8,r8,4
81117458:	da009c15 	stw	r8,624(sp)
8111745c:	1880000d 	sth	r2,0(r3)
81117460:	da00a017 	ldw	r8,640(sp)
81117464:	42000044 	addi	r8,r8,1
81117468:	da00a015 	stw	r8,640(sp)
8111746c:	003f5906 	br	811171d4 <__reset+0xfb0f71d4>
81117470:	00bf1fc4 	movi	r2,-897
81117474:	90a4703a 	and	r18,r18,r2
81117478:	38000226 	beq	r7,zero,81117484 <__svfscanf_r+0x1508>
8111747c:	39ffffc4 	addi	r7,r7,-1
81117480:	9cc00044 	addi	r19,r19,1
81117484:	a5000044 	addi	r20,r20,1
81117488:	003f3006 	br	8111714c <__reset+0xfb0f714c>
8111748c:	da009c17 	ldw	r8,624(sp)
81117490:	40c00017 	ldw	r3,0(r8)
81117494:	42000104 	addi	r8,r8,4
81117498:	da009c15 	stw	r8,624(sp)
8111749c:	18800015 	stw	r2,0(r3)
811174a0:	003fef06 	br	81117460 <__reset+0xfb0f7460>
811174a4:	2827883a 	mov	r19,r5
811174a8:	003fb906 	br	81117390 <__reset+0xfb0f7390>
811174ac:	01be1fc4 	movi	r6,-1921
811174b0:	a1a8703a 	and	r20,r20,r6
811174b4:	05400044 	movi	r21,1
811174b8:	003de906 	br	81116c60 <__reset+0xfb0f6c60>
811174bc:	817fffc7 	ldb	r5,-1(r16)
811174c0:	e00d883a 	mov	r6,fp
811174c4:	b009883a 	mov	r4,r22
811174c8:	843fffc4 	addi	r16,r16,-1
811174cc:	111fa740 	call	8111fa74 <_ungetc_r>
811174d0:	003f3c06 	br	811171c4 <__reset+0xfb0f71c4>
811174d4:	dd009b04 	addi	r20,sp,620
811174d8:	003fc206 	br	811173e4 <__reset+0xfb0f73e4>
811174dc:	00be1fc4 	movi	r2,-1921
811174e0:	a0a8703a 	and	r20,r20,r2
811174e4:	05800044 	movi	r22,1
811174e8:	003ddd06 	br	81116c60 <__reset+0xfb0f6c60>
811174ec:	d8c09f17 	ldw	r3,636(sp)
811174f0:	88e3c83a 	sub	r17,r17,r3
811174f4:	044dc83a 	sub	r6,zero,r17
811174f8:	883e2126 	beq	r17,zero,81116d80 <__reset+0xfb0f6d80>
811174fc:	d88055c4 	addi	r2,sp,343
81117500:	80800136 	bltu	r16,r2,81117508 <__svfscanf_r+0x158c>
81117504:	dc005584 	addi	r16,sp,342
81117508:	01604534 	movhi	r5,33044
8111750c:	29711d04 	addi	r5,r5,-15244
81117510:	8009883a 	mov	r4,r16
81117514:	11115b40 	call	811115b4 <sprintf>
81117518:	003e1906 	br	81116d80 <__reset+0xfb0f6d80>
8111751c:	d8c0a517 	ldw	r3,660(sp)
81117520:	000d883a 	mov	r6,zero
81117524:	01c00284 	movi	r7,10
81117528:	19400044 	addi	r5,r3,1
8111752c:	b009883a 	mov	r4,r22
81117530:	11118600 	call	81111860 <_strtol_r>
81117534:	da00a417 	ldw	r8,656(sp)
81117538:	dc00a517 	ldw	r16,660(sp)
8111753c:	120dc83a 	sub	r6,r2,r8
81117540:	003fee06 	br	811174fc <__reset+0xfb0f74fc>
81117544:	da009c17 	ldw	r8,624(sp)
81117548:	180b883a 	mov	r5,r3
8111754c:	8009883a 	mov	r4,r16
81117550:	45000017 	ldw	r20,0(r8)
81117554:	44400104 	addi	r17,r8,4
81117558:	d8c0a615 	stw	r3,664(sp)
8111755c:	111c3900 	call	8111c390 <__fpclassifyd>
81117560:	d8c0a617 	ldw	r3,664(sp)
81117564:	10006426 	beq	r2,zero,811176f8 <__svfscanf_r+0x177c>
81117568:	8009883a 	mov	r4,r16
8111756c:	180b883a 	mov	r5,r3
81117570:	110fae40 	call	8110fae4 <__truncdfsf2>
81117574:	a0800015 	stw	r2,0(r20)
81117578:	dc409c15 	stw	r17,624(sp)
8111757c:	003e0f06 	br	81116dbc <__reset+0xfb0f6dbc>
81117580:	88c0004c 	andi	r3,r17,1
81117584:	183fc11e 	bne	r3,zero,8111748c <__reset+0xfb0f748c>
81117588:	8c40008c 	andi	r17,r17,2
8111758c:	883fbf26 	beq	r17,zero,8111748c <__reset+0xfb0f748c>
81117590:	da00a117 	ldw	r8,644(sp)
81117594:	00a044b4 	movhi	r2,33042
81117598:	10b80b04 	addi	r2,r2,-8148
8111759c:	d9c09e17 	ldw	r7,632(sp)
811175a0:	000d883a 	mov	r6,zero
811175a4:	d9400104 	addi	r5,sp,4
811175a8:	b009883a 	mov	r4,r22
811175ac:	40806226 	beq	r8,r2,81117738 <__svfscanf_r+0x17bc>
811175b0:	111dd440 	call	8111dd44 <_strtoll_r>
811175b4:	da009c17 	ldw	r8,624(sp)
811175b8:	41000017 	ldw	r4,0(r8)
811175bc:	42000104 	addi	r8,r8,4
811175c0:	da009c15 	stw	r8,624(sp)
811175c4:	20800015 	stw	r2,0(r4)
811175c8:	20c00115 	stw	r3,4(r4)
811175cc:	003fa406 	br	81117460 <__reset+0xfb0f7460>
811175d0:	111a8200 	call	8111a820 <__locale_mb_cur_max>
811175d4:	80bca726 	beq	r16,r2,81116874 <__reset+0xfb0f6874>
811175d8:	e0800017 	ldw	r2,0(fp)
811175dc:	e1000117 	ldw	r4,4(fp)
811175e0:	d8c00104 	addi	r3,sp,4
811175e4:	12000003 	ldbu	r8,0(r2)
811175e8:	213fffc4 	addi	r4,r4,-1
811175ec:	10800044 	addi	r2,r2,1
811175f0:	e1000115 	stw	r4,4(fp)
811175f4:	e0800015 	stw	r2,0(fp)
811175f8:	84400044 	addi	r17,r16,1
811175fc:	dd400015 	stw	r21,0(sp)
81117600:	1c21883a 	add	r16,r3,r16
81117604:	b009883a 	mov	r4,r22
81117608:	880f883a 	mov	r7,r17
8111760c:	180d883a 	mov	r6,r3
81117610:	a00b883a 	mov	r5,r20
81117614:	82000005 	stb	r8,0(r16)
81117618:	111a8dc0 	call	8111a8dc <_mbrtowc_r>
8111761c:	013fffc4 	movi	r4,-1
81117620:	113c9426 	beq	r2,r4,81116874 <__reset+0xfb0f6874>
81117624:	103c881e 	bne	r2,zero,81116848 <__reset+0xfb0f6848>
81117628:	a0000015 	stw	zero,0(r20)
8111762c:	0009883a 	mov	r4,zero
81117630:	111a7600 	call	8111a760 <iswspace>
81117634:	10001a26 	beq	r2,zero,811176a0 <__svfscanf_r+0x1724>
81117638:	8821883a 	mov	r16,r17
8111763c:	dc409f17 	ldw	r17,636(sp)
81117640:	803f7426 	beq	r16,zero,81117414 <__reset+0xfb0f7414>
81117644:	843fffc4 	addi	r16,r16,-1
81117648:	d9800104 	addi	r6,sp,4
8111764c:	342b883a 	add	r21,r6,r16
81117650:	00000106 	br	81117658 <__svfscanf_r+0x16dc>
81117654:	843fffc4 	addi	r16,r16,-1
81117658:	a9400003 	ldbu	r5,0(r21)
8111765c:	e00d883a 	mov	r6,fp
81117660:	b009883a 	mov	r4,r22
81117664:	111fa740 	call	8111fa74 <_ungetc_r>
81117668:	ad7fffc4 	addi	r21,r21,-1
8111766c:	803ff91e 	bne	r16,zero,81117654 <__reset+0xfb0f7654>
81117670:	003f6806 	br	81117414 <__reset+0xfb0f7414>
81117674:	d9800104 	addi	r6,sp,4
81117678:	802b883a 	mov	r21,r16
8111767c:	343a812e 	bgeu	r6,r16,81116084 <__reset+0xfb0f6084>
81117680:	ad7fffc4 	addi	r21,r21,-1
81117684:	a9400007 	ldb	r5,0(r21)
81117688:	e00d883a 	mov	r6,fp
8111768c:	b009883a 	mov	r4,r22
81117690:	111fa740 	call	8111fa74 <_ungetc_r>
81117694:	da000104 	addi	r8,sp,4
81117698:	457ff91e 	bne	r8,r21,81117680 <__reset+0xfb0f7680>
8111769c:	003a7906 	br	81116084 <__reset+0xfb0f6084>
811176a0:	da009f17 	ldw	r8,636(sp)
811176a4:	9465883a 	add	r18,r18,r17
811176a8:	9cffffc4 	addi	r19,r19,-1
811176ac:	4000051e 	bne	r8,zero,811176c4 <__svfscanf_r+0x1748>
811176b0:	a5000104 	addi	r20,r20,4
811176b4:	0021883a 	mov	r16,zero
811176b8:	003c6606 	br	81116854 <__reset+0xfb0f6854>
811176bc:	a1000017 	ldw	r4,0(r20)
811176c0:	003fdb06 	br	81117630 <__reset+0xfb0f7630>
811176c4:	0021883a 	mov	r16,zero
811176c8:	003c6206 	br	81116854 <__reset+0xfb0f6854>
811176cc:	d8800104 	addi	r2,sp,4
811176d0:	802b883a 	mov	r21,r16
811176d4:	143a6b2e 	bgeu	r2,r16,81116084 <__reset+0xfb0f6084>
811176d8:	ad7fffc4 	addi	r21,r21,-1
811176dc:	a9400007 	ldb	r5,0(r21)
811176e0:	e00d883a 	mov	r6,fp
811176e4:	b009883a 	mov	r4,r22
811176e8:	111fa740 	call	8111fa74 <_ungetc_r>
811176ec:	d8c00104 	addi	r3,sp,4
811176f0:	1d7ff91e 	bne	r3,r21,811176d8 <__reset+0xfb0f76d8>
811176f4:	003a6306 	br	81116084 <__reset+0xfb0f6084>
811176f8:	0009883a 	mov	r4,zero
811176fc:	111c4d40 	call	8111c4d4 <nanf>
81117700:	a0800015 	stw	r2,0(r20)
81117704:	dc409c15 	stw	r17,624(sp)
81117708:	003dac06 	br	81116dbc <__reset+0xfb0f6dbc>
8111770c:	d9000104 	addi	r4,sp,4
81117710:	802b883a 	mov	r21,r16
81117714:	243a5b2e 	bgeu	r4,r16,81116084 <__reset+0xfb0f6084>
81117718:	ad7fffc4 	addi	r21,r21,-1
8111771c:	a9400007 	ldb	r5,0(r21)
81117720:	e00d883a 	mov	r6,fp
81117724:	b009883a 	mov	r4,r22
81117728:	111fa740 	call	8111fa74 <_ungetc_r>
8111772c:	d9400104 	addi	r5,sp,4
81117730:	2d7ff91e 	bne	r5,r21,81117718 <__reset+0xfb0f7718>
81117734:	003a5306 	br	81116084 <__reset+0xfb0f6084>
81117738:	111e29c0 	call	8111e29c <_strtoull_r>
8111773c:	003f9d06 	br	811175b4 <__reset+0xfb0f75b4>

81117740 <vfscanf>:
81117740:	00a04534 	movhi	r2,33044
81117744:	defffb04 	addi	sp,sp,-20
81117748:	10ba0604 	addi	r2,r2,-6120
8111774c:	de00012e 	bgeu	sp,et,81117754 <vfscanf+0x14>
81117750:	003b68fa 	trap	3
81117754:	dc000215 	stw	r16,8(sp)
81117758:	14000017 	ldw	r16,0(r2)
8111775c:	dc400315 	stw	r17,12(sp)
81117760:	dfc00415 	stw	ra,16(sp)
81117764:	2023883a 	mov	r17,r4
81117768:	80000826 	beq	r16,zero,8111778c <vfscanf+0x4c>
8111776c:	80800e17 	ldw	r2,56(r16)
81117770:	1000061e 	bne	r2,zero,8111778c <vfscanf+0x4c>
81117774:	8009883a 	mov	r4,r16
81117778:	d9400015 	stw	r5,0(sp)
8111777c:	d9800115 	stw	r6,4(sp)
81117780:	11198f80 	call	811198f8 <__sinit>
81117784:	d9800117 	ldw	r6,4(sp)
81117788:	d9400017 	ldw	r5,0(sp)
8111778c:	300f883a 	mov	r7,r6
81117790:	8009883a 	mov	r4,r16
81117794:	280d883a 	mov	r6,r5
81117798:	880b883a 	mov	r5,r17
8111779c:	dfc00417 	ldw	ra,16(sp)
811177a0:	dc400317 	ldw	r17,12(sp)
811177a4:	dc000217 	ldw	r16,8(sp)
811177a8:	dec00504 	addi	sp,sp,20
811177ac:	1115f7c1 	jmpi	81115f7c <__svfscanf_r>

811177b0 <__svfscanf>:
811177b0:	00a04534 	movhi	r2,33044
811177b4:	10ba0604 	addi	r2,r2,-6120
811177b8:	300f883a 	mov	r7,r6
811177bc:	280d883a 	mov	r6,r5
811177c0:	200b883a 	mov	r5,r4
811177c4:	11000017 	ldw	r4,0(r2)
811177c8:	1115f7c1 	jmpi	81115f7c <__svfscanf_r>

811177cc <_vfscanf_r>:
811177cc:	defffb04 	addi	sp,sp,-20
811177d0:	de00012e 	bgeu	sp,et,811177d8 <_vfscanf_r+0xc>
811177d4:	003b68fa 	trap	3
811177d8:	dc000315 	stw	r16,12(sp)
811177dc:	dfc00415 	stw	ra,16(sp)
811177e0:	2021883a 	mov	r16,r4
811177e4:	20000926 	beq	r4,zero,8111780c <_vfscanf_r+0x40>
811177e8:	20800e17 	ldw	r2,56(r4)
811177ec:	1000071e 	bne	r2,zero,8111780c <_vfscanf_r+0x40>
811177f0:	d9400015 	stw	r5,0(sp)
811177f4:	d9800115 	stw	r6,4(sp)
811177f8:	d9c00215 	stw	r7,8(sp)
811177fc:	11198f80 	call	811198f8 <__sinit>
81117800:	d9c00217 	ldw	r7,8(sp)
81117804:	d9800117 	ldw	r6,4(sp)
81117808:	d9400017 	ldw	r5,0(sp)
8111780c:	8009883a 	mov	r4,r16
81117810:	dfc00417 	ldw	ra,16(sp)
81117814:	dc000317 	ldw	r16,12(sp)
81117818:	dec00504 	addi	sp,sp,20
8111781c:	1115f7c1 	jmpi	81115f7c <__svfscanf_r>

81117820 <_write_r>:
81117820:	defffd04 	addi	sp,sp,-12
81117824:	de00012e 	bgeu	sp,et,8111782c <_write_r+0xc>
81117828:	003b68fa 	trap	3
8111782c:	2805883a 	mov	r2,r5
81117830:	dc000015 	stw	r16,0(sp)
81117834:	04204534 	movhi	r16,33044
81117838:	dc400115 	stw	r17,4(sp)
8111783c:	300b883a 	mov	r5,r6
81117840:	843a5f04 	addi	r16,r16,-5764
81117844:	2023883a 	mov	r17,r4
81117848:	380d883a 	mov	r6,r7
8111784c:	1009883a 	mov	r4,r2
81117850:	dfc00215 	stw	ra,8(sp)
81117854:	80000015 	stw	zero,0(r16)
81117858:	11264940 	call	81126494 <write>
8111785c:	00ffffc4 	movi	r3,-1
81117860:	10c00526 	beq	r2,r3,81117878 <_write_r+0x58>
81117864:	dfc00217 	ldw	ra,8(sp)
81117868:	dc400117 	ldw	r17,4(sp)
8111786c:	dc000017 	ldw	r16,0(sp)
81117870:	dec00304 	addi	sp,sp,12
81117874:	f800283a 	ret
81117878:	80c00017 	ldw	r3,0(r16)
8111787c:	183ff926 	beq	r3,zero,81117864 <__reset+0xfb0f7864>
81117880:	88c00015 	stw	r3,0(r17)
81117884:	003ff706 	br	81117864 <__reset+0xfb0f7864>

81117888 <__swsetup_r>:
81117888:	00a04534 	movhi	r2,33044
8111788c:	defffd04 	addi	sp,sp,-12
81117890:	10ba0604 	addi	r2,r2,-6120
81117894:	de00012e 	bgeu	sp,et,8111789c <__swsetup_r+0x14>
81117898:	003b68fa 	trap	3
8111789c:	dc400115 	stw	r17,4(sp)
811178a0:	2023883a 	mov	r17,r4
811178a4:	11000017 	ldw	r4,0(r2)
811178a8:	dc000015 	stw	r16,0(sp)
811178ac:	dfc00215 	stw	ra,8(sp)
811178b0:	2821883a 	mov	r16,r5
811178b4:	20000226 	beq	r4,zero,811178c0 <__swsetup_r+0x38>
811178b8:	20800e17 	ldw	r2,56(r4)
811178bc:	10003126 	beq	r2,zero,81117984 <__swsetup_r+0xfc>
811178c0:	8080030b 	ldhu	r2,12(r16)
811178c4:	10c0020c 	andi	r3,r2,8
811178c8:	1009883a 	mov	r4,r2
811178cc:	18000f26 	beq	r3,zero,8111790c <__swsetup_r+0x84>
811178d0:	80c00417 	ldw	r3,16(r16)
811178d4:	18001526 	beq	r3,zero,8111792c <__swsetup_r+0xa4>
811178d8:	1100004c 	andi	r4,r2,1
811178dc:	20001c1e 	bne	r4,zero,81117950 <__swsetup_r+0xc8>
811178e0:	1080008c 	andi	r2,r2,2
811178e4:	1000291e 	bne	r2,zero,8111798c <__swsetup_r+0x104>
811178e8:	80800517 	ldw	r2,20(r16)
811178ec:	80800215 	stw	r2,8(r16)
811178f0:	18001c26 	beq	r3,zero,81117964 <__swsetup_r+0xdc>
811178f4:	0005883a 	mov	r2,zero
811178f8:	dfc00217 	ldw	ra,8(sp)
811178fc:	dc400117 	ldw	r17,4(sp)
81117900:	dc000017 	ldw	r16,0(sp)
81117904:	dec00304 	addi	sp,sp,12
81117908:	f800283a 	ret
8111790c:	2080040c 	andi	r2,r4,16
81117910:	10002e26 	beq	r2,zero,811179cc <__swsetup_r+0x144>
81117914:	2080010c 	andi	r2,r4,4
81117918:	10001e1e 	bne	r2,zero,81117994 <__swsetup_r+0x10c>
8111791c:	80c00417 	ldw	r3,16(r16)
81117920:	20800214 	ori	r2,r4,8
81117924:	8080030d 	sth	r2,12(r16)
81117928:	183feb1e 	bne	r3,zero,811178d8 <__reset+0xfb0f78d8>
8111792c:	1100a00c 	andi	r4,r2,640
81117930:	01408004 	movi	r5,512
81117934:	217fe826 	beq	r4,r5,811178d8 <__reset+0xfb0f78d8>
81117938:	800b883a 	mov	r5,r16
8111793c:	8809883a 	mov	r4,r17
81117940:	11104740 	call	81110474 <__smakebuf_r>
81117944:	8080030b 	ldhu	r2,12(r16)
81117948:	80c00417 	ldw	r3,16(r16)
8111794c:	003fe206 	br	811178d8 <__reset+0xfb0f78d8>
81117950:	80800517 	ldw	r2,20(r16)
81117954:	80000215 	stw	zero,8(r16)
81117958:	0085c83a 	sub	r2,zero,r2
8111795c:	80800615 	stw	r2,24(r16)
81117960:	183fe41e 	bne	r3,zero,811178f4 <__reset+0xfb0f78f4>
81117964:	80c0030b 	ldhu	r3,12(r16)
81117968:	0005883a 	mov	r2,zero
8111796c:	1900200c 	andi	r4,r3,128
81117970:	203fe126 	beq	r4,zero,811178f8 <__reset+0xfb0f78f8>
81117974:	18c01014 	ori	r3,r3,64
81117978:	80c0030d 	sth	r3,12(r16)
8111797c:	00bfffc4 	movi	r2,-1
81117980:	003fdd06 	br	811178f8 <__reset+0xfb0f78f8>
81117984:	11198f80 	call	811198f8 <__sinit>
81117988:	003fcd06 	br	811178c0 <__reset+0xfb0f78c0>
8111798c:	0005883a 	mov	r2,zero
81117990:	003fd606 	br	811178ec <__reset+0xfb0f78ec>
81117994:	81400c17 	ldw	r5,48(r16)
81117998:	28000626 	beq	r5,zero,811179b4 <__swsetup_r+0x12c>
8111799c:	80801004 	addi	r2,r16,64
811179a0:	28800326 	beq	r5,r2,811179b0 <__swsetup_r+0x128>
811179a4:	8809883a 	mov	r4,r17
811179a8:	1119d900 	call	81119d90 <_free_r>
811179ac:	8100030b 	ldhu	r4,12(r16)
811179b0:	80000c15 	stw	zero,48(r16)
811179b4:	80c00417 	ldw	r3,16(r16)
811179b8:	00bff6c4 	movi	r2,-37
811179bc:	1108703a 	and	r4,r2,r4
811179c0:	80000115 	stw	zero,4(r16)
811179c4:	80c00015 	stw	r3,0(r16)
811179c8:	003fd506 	br	81117920 <__reset+0xfb0f7920>
811179cc:	00800244 	movi	r2,9
811179d0:	88800015 	stw	r2,0(r17)
811179d4:	20801014 	ori	r2,r4,64
811179d8:	8080030d 	sth	r2,12(r16)
811179dc:	00bfffc4 	movi	r2,-1
811179e0:	003fc506 	br	811178f8 <__reset+0xfb0f78f8>

811179e4 <_close_r>:
811179e4:	defffd04 	addi	sp,sp,-12
811179e8:	de00012e 	bgeu	sp,et,811179f0 <_close_r+0xc>
811179ec:	003b68fa 	trap	3
811179f0:	dc000015 	stw	r16,0(sp)
811179f4:	04204534 	movhi	r16,33044
811179f8:	dc400115 	stw	r17,4(sp)
811179fc:	843a5f04 	addi	r16,r16,-5764
81117a00:	2023883a 	mov	r17,r4
81117a04:	2809883a 	mov	r4,r5
81117a08:	dfc00215 	stw	ra,8(sp)
81117a0c:	80000015 	stw	zero,0(r16)
81117a10:	11255b80 	call	811255b8 <close>
81117a14:	00ffffc4 	movi	r3,-1
81117a18:	10c00526 	beq	r2,r3,81117a30 <_close_r+0x4c>
81117a1c:	dfc00217 	ldw	ra,8(sp)
81117a20:	dc400117 	ldw	r17,4(sp)
81117a24:	dc000017 	ldw	r16,0(sp)
81117a28:	dec00304 	addi	sp,sp,12
81117a2c:	f800283a 	ret
81117a30:	80c00017 	ldw	r3,0(r16)
81117a34:	183ff926 	beq	r3,zero,81117a1c <__reset+0xfb0f7a1c>
81117a38:	88c00015 	stw	r3,0(r17)
81117a3c:	003ff706 	br	81117a1c <__reset+0xfb0f7a1c>

81117a40 <quorem>:
81117a40:	defff704 	addi	sp,sp,-36
81117a44:	de00012e 	bgeu	sp,et,81117a4c <quorem+0xc>
81117a48:	003b68fa 	trap	3
81117a4c:	dc800215 	stw	r18,8(sp)
81117a50:	20800417 	ldw	r2,16(r4)
81117a54:	2c800417 	ldw	r18,16(r5)
81117a58:	dfc00815 	stw	ra,32(sp)
81117a5c:	ddc00715 	stw	r23,28(sp)
81117a60:	dd800615 	stw	r22,24(sp)
81117a64:	dd400515 	stw	r21,20(sp)
81117a68:	dd000415 	stw	r20,16(sp)
81117a6c:	dcc00315 	stw	r19,12(sp)
81117a70:	dc400115 	stw	r17,4(sp)
81117a74:	dc000015 	stw	r16,0(sp)
81117a78:	14807116 	blt	r2,r18,81117c40 <quorem+0x200>
81117a7c:	94bfffc4 	addi	r18,r18,-1
81117a80:	94ad883a 	add	r22,r18,r18
81117a84:	b5ad883a 	add	r22,r22,r22
81117a88:	2c400504 	addi	r17,r5,20
81117a8c:	8da9883a 	add	r20,r17,r22
81117a90:	25400504 	addi	r21,r4,20
81117a94:	282f883a 	mov	r23,r5
81117a98:	adad883a 	add	r22,r21,r22
81117a9c:	a1400017 	ldw	r5,0(r20)
81117aa0:	2021883a 	mov	r16,r4
81117aa4:	b1000017 	ldw	r4,0(r22)
81117aa8:	29400044 	addi	r5,r5,1
81117aac:	11232780 	call	81123278 <__udivsi3>
81117ab0:	1027883a 	mov	r19,r2
81117ab4:	10002c26 	beq	r2,zero,81117b68 <quorem+0x128>
81117ab8:	a813883a 	mov	r9,r21
81117abc:	880b883a 	mov	r5,r17
81117ac0:	0009883a 	mov	r4,zero
81117ac4:	000d883a 	mov	r6,zero
81117ac8:	2a000017 	ldw	r8,0(r5)
81117acc:	49c00017 	ldw	r7,0(r9)
81117ad0:	29400104 	addi	r5,r5,4
81117ad4:	40bfffcc 	andi	r2,r8,65535
81117ad8:	14c5383a 	mul	r2,r2,r19
81117adc:	4010d43a 	srli	r8,r8,16
81117ae0:	38ffffcc 	andi	r3,r7,65535
81117ae4:	1105883a 	add	r2,r2,r4
81117ae8:	1008d43a 	srli	r4,r2,16
81117aec:	44d1383a 	mul	r8,r8,r19
81117af0:	198d883a 	add	r6,r3,r6
81117af4:	10ffffcc 	andi	r3,r2,65535
81117af8:	30c7c83a 	sub	r3,r6,r3
81117afc:	380ed43a 	srli	r7,r7,16
81117b00:	4105883a 	add	r2,r8,r4
81117b04:	180dd43a 	srai	r6,r3,16
81117b08:	113fffcc 	andi	r4,r2,65535
81117b0c:	390fc83a 	sub	r7,r7,r4
81117b10:	398d883a 	add	r6,r7,r6
81117b14:	300e943a 	slli	r7,r6,16
81117b18:	18ffffcc 	andi	r3,r3,65535
81117b1c:	1008d43a 	srli	r4,r2,16
81117b20:	38ceb03a 	or	r7,r7,r3
81117b24:	49c00015 	stw	r7,0(r9)
81117b28:	300dd43a 	srai	r6,r6,16
81117b2c:	4a400104 	addi	r9,r9,4
81117b30:	a17fe52e 	bgeu	r20,r5,81117ac8 <__reset+0xfb0f7ac8>
81117b34:	b0800017 	ldw	r2,0(r22)
81117b38:	10000b1e 	bne	r2,zero,81117b68 <quorem+0x128>
81117b3c:	b0bfff04 	addi	r2,r22,-4
81117b40:	a880082e 	bgeu	r21,r2,81117b64 <quorem+0x124>
81117b44:	b0ffff17 	ldw	r3,-4(r22)
81117b48:	18000326 	beq	r3,zero,81117b58 <quorem+0x118>
81117b4c:	00000506 	br	81117b64 <quorem+0x124>
81117b50:	10c00017 	ldw	r3,0(r2)
81117b54:	1800031e 	bne	r3,zero,81117b64 <quorem+0x124>
81117b58:	10bfff04 	addi	r2,r2,-4
81117b5c:	94bfffc4 	addi	r18,r18,-1
81117b60:	a8bffb36 	bltu	r21,r2,81117b50 <__reset+0xfb0f7b50>
81117b64:	84800415 	stw	r18,16(r16)
81117b68:	b80b883a 	mov	r5,r23
81117b6c:	8009883a 	mov	r4,r16
81117b70:	111b6600 	call	8111b660 <__mcmp>
81117b74:	10002616 	blt	r2,zero,81117c10 <quorem+0x1d0>
81117b78:	9cc00044 	addi	r19,r19,1
81117b7c:	a805883a 	mov	r2,r21
81117b80:	000b883a 	mov	r5,zero
81117b84:	11000017 	ldw	r4,0(r2)
81117b88:	89800017 	ldw	r6,0(r17)
81117b8c:	10800104 	addi	r2,r2,4
81117b90:	20ffffcc 	andi	r3,r4,65535
81117b94:	194b883a 	add	r5,r3,r5
81117b98:	30ffffcc 	andi	r3,r6,65535
81117b9c:	28c7c83a 	sub	r3,r5,r3
81117ba0:	300cd43a 	srli	r6,r6,16
81117ba4:	2008d43a 	srli	r4,r4,16
81117ba8:	180bd43a 	srai	r5,r3,16
81117bac:	18ffffcc 	andi	r3,r3,65535
81117bb0:	2189c83a 	sub	r4,r4,r6
81117bb4:	2149883a 	add	r4,r4,r5
81117bb8:	200c943a 	slli	r6,r4,16
81117bbc:	8c400104 	addi	r17,r17,4
81117bc0:	200bd43a 	srai	r5,r4,16
81117bc4:	30c6b03a 	or	r3,r6,r3
81117bc8:	10ffff15 	stw	r3,-4(r2)
81117bcc:	a47fed2e 	bgeu	r20,r17,81117b84 <__reset+0xfb0f7b84>
81117bd0:	9485883a 	add	r2,r18,r18
81117bd4:	1085883a 	add	r2,r2,r2
81117bd8:	a887883a 	add	r3,r21,r2
81117bdc:	18800017 	ldw	r2,0(r3)
81117be0:	10000b1e 	bne	r2,zero,81117c10 <quorem+0x1d0>
81117be4:	18bfff04 	addi	r2,r3,-4
81117be8:	a880082e 	bgeu	r21,r2,81117c0c <quorem+0x1cc>
81117bec:	18ffff17 	ldw	r3,-4(r3)
81117bf0:	18000326 	beq	r3,zero,81117c00 <quorem+0x1c0>
81117bf4:	00000506 	br	81117c0c <quorem+0x1cc>
81117bf8:	10c00017 	ldw	r3,0(r2)
81117bfc:	1800031e 	bne	r3,zero,81117c0c <quorem+0x1cc>
81117c00:	10bfff04 	addi	r2,r2,-4
81117c04:	94bfffc4 	addi	r18,r18,-1
81117c08:	a8bffb36 	bltu	r21,r2,81117bf8 <__reset+0xfb0f7bf8>
81117c0c:	84800415 	stw	r18,16(r16)
81117c10:	9805883a 	mov	r2,r19
81117c14:	dfc00817 	ldw	ra,32(sp)
81117c18:	ddc00717 	ldw	r23,28(sp)
81117c1c:	dd800617 	ldw	r22,24(sp)
81117c20:	dd400517 	ldw	r21,20(sp)
81117c24:	dd000417 	ldw	r20,16(sp)
81117c28:	dcc00317 	ldw	r19,12(sp)
81117c2c:	dc800217 	ldw	r18,8(sp)
81117c30:	dc400117 	ldw	r17,4(sp)
81117c34:	dc000017 	ldw	r16,0(sp)
81117c38:	dec00904 	addi	sp,sp,36
81117c3c:	f800283a 	ret
81117c40:	0005883a 	mov	r2,zero
81117c44:	003ff306 	br	81117c14 <__reset+0xfb0f7c14>

81117c48 <_dtoa_r>:
81117c48:	deffde04 	addi	sp,sp,-136
81117c4c:	de00012e 	bgeu	sp,et,81117c54 <_dtoa_r+0xc>
81117c50:	003b68fa 	trap	3
81117c54:	20801017 	ldw	r2,64(r4)
81117c58:	df002015 	stw	fp,128(sp)
81117c5c:	dcc01b15 	stw	r19,108(sp)
81117c60:	dc801a15 	stw	r18,104(sp)
81117c64:	dc401915 	stw	r17,100(sp)
81117c68:	dc001815 	stw	r16,96(sp)
81117c6c:	dfc02115 	stw	ra,132(sp)
81117c70:	ddc01f15 	stw	r23,124(sp)
81117c74:	dd801e15 	stw	r22,120(sp)
81117c78:	dd401d15 	stw	r21,116(sp)
81117c7c:	dd001c15 	stw	r20,112(sp)
81117c80:	d9c00315 	stw	r7,12(sp)
81117c84:	2039883a 	mov	fp,r4
81117c88:	3023883a 	mov	r17,r6
81117c8c:	2825883a 	mov	r18,r5
81117c90:	dc002417 	ldw	r16,144(sp)
81117c94:	3027883a 	mov	r19,r6
81117c98:	10000826 	beq	r2,zero,81117cbc <_dtoa_r+0x74>
81117c9c:	21801117 	ldw	r6,68(r4)
81117ca0:	00c00044 	movi	r3,1
81117ca4:	100b883a 	mov	r5,r2
81117ca8:	1986983a 	sll	r3,r3,r6
81117cac:	11800115 	stw	r6,4(r2)
81117cb0:	10c00215 	stw	r3,8(r2)
81117cb4:	111ae100 	call	8111ae10 <_Bfree>
81117cb8:	e0001015 	stw	zero,64(fp)
81117cbc:	88002e16 	blt	r17,zero,81117d78 <_dtoa_r+0x130>
81117cc0:	80000015 	stw	zero,0(r16)
81117cc4:	889ffc2c 	andhi	r2,r17,32752
81117cc8:	00dffc34 	movhi	r3,32752
81117ccc:	10c01c26 	beq	r2,r3,81117d40 <_dtoa_r+0xf8>
81117cd0:	000d883a 	mov	r6,zero
81117cd4:	000f883a 	mov	r7,zero
81117cd8:	9009883a 	mov	r4,r18
81117cdc:	980b883a 	mov	r5,r19
81117ce0:	11246d40 	call	811246d4 <__eqdf2>
81117ce4:	10002b1e 	bne	r2,zero,81117d94 <_dtoa_r+0x14c>
81117ce8:	d9c02317 	ldw	r7,140(sp)
81117cec:	00800044 	movi	r2,1
81117cf0:	38800015 	stw	r2,0(r7)
81117cf4:	d8802517 	ldw	r2,148(sp)
81117cf8:	10019e26 	beq	r2,zero,81118374 <_dtoa_r+0x72c>
81117cfc:	d8c02517 	ldw	r3,148(sp)
81117d00:	00a04534 	movhi	r2,33044
81117d04:	10b10c44 	addi	r2,r2,-15311
81117d08:	18800015 	stw	r2,0(r3)
81117d0c:	10bfffc4 	addi	r2,r2,-1
81117d10:	dfc02117 	ldw	ra,132(sp)
81117d14:	df002017 	ldw	fp,128(sp)
81117d18:	ddc01f17 	ldw	r23,124(sp)
81117d1c:	dd801e17 	ldw	r22,120(sp)
81117d20:	dd401d17 	ldw	r21,116(sp)
81117d24:	dd001c17 	ldw	r20,112(sp)
81117d28:	dcc01b17 	ldw	r19,108(sp)
81117d2c:	dc801a17 	ldw	r18,104(sp)
81117d30:	dc401917 	ldw	r17,100(sp)
81117d34:	dc001817 	ldw	r16,96(sp)
81117d38:	dec02204 	addi	sp,sp,136
81117d3c:	f800283a 	ret
81117d40:	d8c02317 	ldw	r3,140(sp)
81117d44:	0089c3c4 	movi	r2,9999
81117d48:	18800015 	stw	r2,0(r3)
81117d4c:	90017726 	beq	r18,zero,8111832c <_dtoa_r+0x6e4>
81117d50:	00a04534 	movhi	r2,33044
81117d54:	10b12a04 	addi	r2,r2,-15192
81117d58:	d9002517 	ldw	r4,148(sp)
81117d5c:	203fec26 	beq	r4,zero,81117d10 <__reset+0xfb0f7d10>
81117d60:	10c000c7 	ldb	r3,3(r2)
81117d64:	1801781e 	bne	r3,zero,81118348 <_dtoa_r+0x700>
81117d68:	10c000c4 	addi	r3,r2,3
81117d6c:	d9802517 	ldw	r6,148(sp)
81117d70:	30c00015 	stw	r3,0(r6)
81117d74:	003fe606 	br	81117d10 <__reset+0xfb0f7d10>
81117d78:	04e00034 	movhi	r19,32768
81117d7c:	9cffffc4 	addi	r19,r19,-1
81117d80:	00800044 	movi	r2,1
81117d84:	8ce6703a 	and	r19,r17,r19
81117d88:	80800015 	stw	r2,0(r16)
81117d8c:	9823883a 	mov	r17,r19
81117d90:	003fcc06 	br	81117cc4 <__reset+0xfb0f7cc4>
81117d94:	d8800204 	addi	r2,sp,8
81117d98:	d8800015 	stw	r2,0(sp)
81117d9c:	d9c00104 	addi	r7,sp,4
81117da0:	900b883a 	mov	r5,r18
81117da4:	980d883a 	mov	r6,r19
81117da8:	e009883a 	mov	r4,fp
81117dac:	8820d53a 	srli	r16,r17,20
81117db0:	111ba3c0 	call	8111ba3c <__d2b>
81117db4:	d8800915 	stw	r2,36(sp)
81117db8:	8001651e 	bne	r16,zero,81118350 <_dtoa_r+0x708>
81117dbc:	dd800217 	ldw	r22,8(sp)
81117dc0:	dc000117 	ldw	r16,4(sp)
81117dc4:	00800804 	movi	r2,32
81117dc8:	b421883a 	add	r16,r22,r16
81117dcc:	80c10c84 	addi	r3,r16,1074
81117dd0:	10c2d10e 	bge	r2,r3,81118918 <_dtoa_r+0xcd0>
81117dd4:	00801004 	movi	r2,64
81117dd8:	81010484 	addi	r4,r16,1042
81117ddc:	10c7c83a 	sub	r3,r2,r3
81117de0:	9108d83a 	srl	r4,r18,r4
81117de4:	88e2983a 	sll	r17,r17,r3
81117de8:	2448b03a 	or	r4,r4,r17
81117dec:	11253940 	call	81125394 <__floatunsidf>
81117df0:	017f8434 	movhi	r5,65040
81117df4:	01800044 	movi	r6,1
81117df8:	1009883a 	mov	r4,r2
81117dfc:	194b883a 	add	r5,r3,r5
81117e00:	843fffc4 	addi	r16,r16,-1
81117e04:	d9801115 	stw	r6,68(sp)
81117e08:	000d883a 	mov	r6,zero
81117e0c:	01cffe34 	movhi	r7,16376
81117e10:	112492c0 	call	8112492c <__subdf3>
81117e14:	0198dbf4 	movhi	r6,25455
81117e18:	01cff4f4 	movhi	r7,16339
81117e1c:	3190d844 	addi	r6,r6,17249
81117e20:	39e1e9c4 	addi	r7,r7,-30809
81117e24:	1009883a 	mov	r4,r2
81117e28:	180b883a 	mov	r5,r3
81117e2c:	110f2ac0 	call	8110f2ac <__muldf3>
81117e30:	01a2d874 	movhi	r6,35681
81117e34:	01cff1f4 	movhi	r7,16327
81117e38:	31b22cc4 	addi	r6,r6,-14157
81117e3c:	39e28a04 	addi	r7,r7,-30168
81117e40:	180b883a 	mov	r5,r3
81117e44:	1009883a 	mov	r4,r2
81117e48:	11235300 	call	81123530 <__adddf3>
81117e4c:	8009883a 	mov	r4,r16
81117e50:	1029883a 	mov	r20,r2
81117e54:	1823883a 	mov	r17,r3
81117e58:	11252b00 	call	811252b0 <__floatsidf>
81117e5c:	019427f4 	movhi	r6,20639
81117e60:	01cff4f4 	movhi	r7,16339
81117e64:	319e7ec4 	addi	r6,r6,31227
81117e68:	39d104c4 	addi	r7,r7,17427
81117e6c:	1009883a 	mov	r4,r2
81117e70:	180b883a 	mov	r5,r3
81117e74:	110f2ac0 	call	8110f2ac <__muldf3>
81117e78:	100d883a 	mov	r6,r2
81117e7c:	180f883a 	mov	r7,r3
81117e80:	a009883a 	mov	r4,r20
81117e84:	880b883a 	mov	r5,r17
81117e88:	11235300 	call	81123530 <__adddf3>
81117e8c:	1009883a 	mov	r4,r2
81117e90:	180b883a 	mov	r5,r3
81117e94:	1029883a 	mov	r20,r2
81117e98:	1823883a 	mov	r17,r3
81117e9c:	11252300 	call	81125230 <__fixdfsi>
81117ea0:	000d883a 	mov	r6,zero
81117ea4:	000f883a 	mov	r7,zero
81117ea8:	a009883a 	mov	r4,r20
81117eac:	880b883a 	mov	r5,r17
81117eb0:	d8800515 	stw	r2,20(sp)
81117eb4:	11248380 	call	81124838 <__ledf2>
81117eb8:	10028716 	blt	r2,zero,811188d8 <_dtoa_r+0xc90>
81117ebc:	d8c00517 	ldw	r3,20(sp)
81117ec0:	00800584 	movi	r2,22
81117ec4:	10c27536 	bltu	r2,r3,8111889c <_dtoa_r+0xc54>
81117ec8:	180490fa 	slli	r2,r3,3
81117ecc:	00e04534 	movhi	r3,33044
81117ed0:	18f14504 	addi	r3,r3,-15084
81117ed4:	1885883a 	add	r2,r3,r2
81117ed8:	11000017 	ldw	r4,0(r2)
81117edc:	11400117 	ldw	r5,4(r2)
81117ee0:	900d883a 	mov	r6,r18
81117ee4:	980f883a 	mov	r7,r19
81117ee8:	112475c0 	call	8112475c <__gedf2>
81117eec:	00828d0e 	bge	zero,r2,81118924 <_dtoa_r+0xcdc>
81117ef0:	d9000517 	ldw	r4,20(sp)
81117ef4:	d8000e15 	stw	zero,56(sp)
81117ef8:	213fffc4 	addi	r4,r4,-1
81117efc:	d9000515 	stw	r4,20(sp)
81117f00:	b42dc83a 	sub	r22,r22,r16
81117f04:	b5bfffc4 	addi	r22,r22,-1
81117f08:	b0026f16 	blt	r22,zero,811188c8 <_dtoa_r+0xc80>
81117f0c:	d8000815 	stw	zero,32(sp)
81117f10:	d9c00517 	ldw	r7,20(sp)
81117f14:	38026416 	blt	r7,zero,811188a8 <_dtoa_r+0xc60>
81117f18:	b1ed883a 	add	r22,r22,r7
81117f1c:	d9c00d15 	stw	r7,52(sp)
81117f20:	d8000a15 	stw	zero,40(sp)
81117f24:	d9800317 	ldw	r6,12(sp)
81117f28:	00800244 	movi	r2,9
81117f2c:	11811436 	bltu	r2,r6,81118380 <_dtoa_r+0x738>
81117f30:	00800144 	movi	r2,5
81117f34:	1184e10e 	bge	r2,r6,811192bc <_dtoa_r+0x1674>
81117f38:	31bfff04 	addi	r6,r6,-4
81117f3c:	d9800315 	stw	r6,12(sp)
81117f40:	0023883a 	mov	r17,zero
81117f44:	d9800317 	ldw	r6,12(sp)
81117f48:	008000c4 	movi	r2,3
81117f4c:	30836726 	beq	r6,r2,81118cec <_dtoa_r+0x10a4>
81117f50:	1183410e 	bge	r2,r6,81118c58 <_dtoa_r+0x1010>
81117f54:	d9c00317 	ldw	r7,12(sp)
81117f58:	00800104 	movi	r2,4
81117f5c:	38827c26 	beq	r7,r2,81118950 <_dtoa_r+0xd08>
81117f60:	00800144 	movi	r2,5
81117f64:	3884c41e 	bne	r7,r2,81119278 <_dtoa_r+0x1630>
81117f68:	00800044 	movi	r2,1
81117f6c:	d8800b15 	stw	r2,44(sp)
81117f70:	d8c00517 	ldw	r3,20(sp)
81117f74:	d9002217 	ldw	r4,136(sp)
81117f78:	1907883a 	add	r3,r3,r4
81117f7c:	19800044 	addi	r6,r3,1
81117f80:	d8c00c15 	stw	r3,48(sp)
81117f84:	d9800615 	stw	r6,24(sp)
81117f88:	0183a40e 	bge	zero,r6,81118e1c <_dtoa_r+0x11d4>
81117f8c:	d9800617 	ldw	r6,24(sp)
81117f90:	3021883a 	mov	r16,r6
81117f94:	e0001115 	stw	zero,68(fp)
81117f98:	008005c4 	movi	r2,23
81117f9c:	1184c92e 	bgeu	r2,r6,811192c4 <_dtoa_r+0x167c>
81117fa0:	00c00044 	movi	r3,1
81117fa4:	00800104 	movi	r2,4
81117fa8:	1085883a 	add	r2,r2,r2
81117fac:	11000504 	addi	r4,r2,20
81117fb0:	180b883a 	mov	r5,r3
81117fb4:	18c00044 	addi	r3,r3,1
81117fb8:	313ffb2e 	bgeu	r6,r4,81117fa8 <__reset+0xfb0f7fa8>
81117fbc:	e1401115 	stw	r5,68(fp)
81117fc0:	e009883a 	mov	r4,fp
81117fc4:	111ad600 	call	8111ad60 <_Balloc>
81117fc8:	d8800715 	stw	r2,28(sp)
81117fcc:	e0801015 	stw	r2,64(fp)
81117fd0:	00800384 	movi	r2,14
81117fd4:	1400f736 	bltu	r2,r16,811183b4 <_dtoa_r+0x76c>
81117fd8:	8800f626 	beq	r17,zero,811183b4 <_dtoa_r+0x76c>
81117fdc:	d9c00517 	ldw	r7,20(sp)
81117fe0:	01c39a0e 	bge	zero,r7,81118e4c <_dtoa_r+0x1204>
81117fe4:	388003cc 	andi	r2,r7,15
81117fe8:	100490fa 	slli	r2,r2,3
81117fec:	382bd13a 	srai	r21,r7,4
81117ff0:	00e04534 	movhi	r3,33044
81117ff4:	18f14504 	addi	r3,r3,-15084
81117ff8:	1885883a 	add	r2,r3,r2
81117ffc:	a8c0040c 	andi	r3,r21,16
81118000:	12400017 	ldw	r9,0(r2)
81118004:	12000117 	ldw	r8,4(r2)
81118008:	18037926 	beq	r3,zero,81118df0 <_dtoa_r+0x11a8>
8111800c:	00a04534 	movhi	r2,33044
81118010:	10b13b04 	addi	r2,r2,-15124
81118014:	11800817 	ldw	r6,32(r2)
81118018:	11c00917 	ldw	r7,36(r2)
8111801c:	9009883a 	mov	r4,r18
81118020:	980b883a 	mov	r5,r19
81118024:	da001715 	stw	r8,92(sp)
81118028:	da401615 	stw	r9,88(sp)
8111802c:	1123de40 	call	81123de4 <__divdf3>
81118030:	da001717 	ldw	r8,92(sp)
81118034:	da401617 	ldw	r9,88(sp)
81118038:	ad4003cc 	andi	r21,r21,15
8111803c:	040000c4 	movi	r16,3
81118040:	1023883a 	mov	r17,r2
81118044:	1829883a 	mov	r20,r3
81118048:	a8001126 	beq	r21,zero,81118090 <_dtoa_r+0x448>
8111804c:	05e04534 	movhi	r23,33044
81118050:	bdf13b04 	addi	r23,r23,-15124
81118054:	4805883a 	mov	r2,r9
81118058:	4007883a 	mov	r3,r8
8111805c:	a980004c 	andi	r6,r21,1
81118060:	1009883a 	mov	r4,r2
81118064:	a82bd07a 	srai	r21,r21,1
81118068:	180b883a 	mov	r5,r3
8111806c:	30000426 	beq	r6,zero,81118080 <_dtoa_r+0x438>
81118070:	b9800017 	ldw	r6,0(r23)
81118074:	b9c00117 	ldw	r7,4(r23)
81118078:	84000044 	addi	r16,r16,1
8111807c:	110f2ac0 	call	8110f2ac <__muldf3>
81118080:	bdc00204 	addi	r23,r23,8
81118084:	a83ff51e 	bne	r21,zero,8111805c <__reset+0xfb0f805c>
81118088:	1013883a 	mov	r9,r2
8111808c:	1811883a 	mov	r8,r3
81118090:	480d883a 	mov	r6,r9
81118094:	400f883a 	mov	r7,r8
81118098:	8809883a 	mov	r4,r17
8111809c:	a00b883a 	mov	r5,r20
811180a0:	1123de40 	call	81123de4 <__divdf3>
811180a4:	d8800f15 	stw	r2,60(sp)
811180a8:	d8c01015 	stw	r3,64(sp)
811180ac:	d8c00e17 	ldw	r3,56(sp)
811180b0:	18000626 	beq	r3,zero,811180cc <_dtoa_r+0x484>
811180b4:	d9000f17 	ldw	r4,60(sp)
811180b8:	d9401017 	ldw	r5,64(sp)
811180bc:	000d883a 	mov	r6,zero
811180c0:	01cffc34 	movhi	r7,16368
811180c4:	11248380 	call	81124838 <__ledf2>
811180c8:	10040b16 	blt	r2,zero,811190f8 <_dtoa_r+0x14b0>
811180cc:	8009883a 	mov	r4,r16
811180d0:	11252b00 	call	811252b0 <__floatsidf>
811180d4:	d9800f17 	ldw	r6,60(sp)
811180d8:	d9c01017 	ldw	r7,64(sp)
811180dc:	1009883a 	mov	r4,r2
811180e0:	180b883a 	mov	r5,r3
811180e4:	110f2ac0 	call	8110f2ac <__muldf3>
811180e8:	000d883a 	mov	r6,zero
811180ec:	01d00734 	movhi	r7,16412
811180f0:	1009883a 	mov	r4,r2
811180f4:	180b883a 	mov	r5,r3
811180f8:	11235300 	call	81123530 <__adddf3>
811180fc:	1021883a 	mov	r16,r2
81118100:	d8800617 	ldw	r2,24(sp)
81118104:	047f3034 	movhi	r17,64704
81118108:	1c63883a 	add	r17,r3,r17
8111810c:	10031826 	beq	r2,zero,81118d70 <_dtoa_r+0x1128>
81118110:	d8c00517 	ldw	r3,20(sp)
81118114:	db000617 	ldw	r12,24(sp)
81118118:	d8c01315 	stw	r3,76(sp)
8111811c:	d9000b17 	ldw	r4,44(sp)
81118120:	20038f26 	beq	r4,zero,81118f60 <_dtoa_r+0x1318>
81118124:	60bfffc4 	addi	r2,r12,-1
81118128:	100490fa 	slli	r2,r2,3
8111812c:	00e04534 	movhi	r3,33044
81118130:	18f14504 	addi	r3,r3,-15084
81118134:	1885883a 	add	r2,r3,r2
81118138:	11800017 	ldw	r6,0(r2)
8111813c:	11c00117 	ldw	r7,4(r2)
81118140:	d8800717 	ldw	r2,28(sp)
81118144:	0009883a 	mov	r4,zero
81118148:	014ff834 	movhi	r5,16352
8111814c:	db001615 	stw	r12,88(sp)
81118150:	15c00044 	addi	r23,r2,1
81118154:	1123de40 	call	81123de4 <__divdf3>
81118158:	800d883a 	mov	r6,r16
8111815c:	880f883a 	mov	r7,r17
81118160:	1009883a 	mov	r4,r2
81118164:	180b883a 	mov	r5,r3
81118168:	112492c0 	call	8112492c <__subdf3>
8111816c:	d9401017 	ldw	r5,64(sp)
81118170:	d9000f17 	ldw	r4,60(sp)
81118174:	102b883a 	mov	r21,r2
81118178:	d8c01215 	stw	r3,72(sp)
8111817c:	11252300 	call	81125230 <__fixdfsi>
81118180:	1009883a 	mov	r4,r2
81118184:	1029883a 	mov	r20,r2
81118188:	11252b00 	call	811252b0 <__floatsidf>
8111818c:	d9000f17 	ldw	r4,60(sp)
81118190:	d9401017 	ldw	r5,64(sp)
81118194:	100d883a 	mov	r6,r2
81118198:	180f883a 	mov	r7,r3
8111819c:	112492c0 	call	8112492c <__subdf3>
811181a0:	1823883a 	mov	r17,r3
811181a4:	d8c00717 	ldw	r3,28(sp)
811181a8:	d9401217 	ldw	r5,72(sp)
811181ac:	a2000c04 	addi	r8,r20,48
811181b0:	1021883a 	mov	r16,r2
811181b4:	1a000005 	stb	r8,0(r3)
811181b8:	800d883a 	mov	r6,r16
811181bc:	880f883a 	mov	r7,r17
811181c0:	a809883a 	mov	r4,r21
811181c4:	4029883a 	mov	r20,r8
811181c8:	112475c0 	call	8112475c <__gedf2>
811181cc:	00841d16 	blt	zero,r2,81119244 <_dtoa_r+0x15fc>
811181d0:	800d883a 	mov	r6,r16
811181d4:	880f883a 	mov	r7,r17
811181d8:	0009883a 	mov	r4,zero
811181dc:	014ffc34 	movhi	r5,16368
811181e0:	112492c0 	call	8112492c <__subdf3>
811181e4:	d9401217 	ldw	r5,72(sp)
811181e8:	100d883a 	mov	r6,r2
811181ec:	180f883a 	mov	r7,r3
811181f0:	a809883a 	mov	r4,r21
811181f4:	112475c0 	call	8112475c <__gedf2>
811181f8:	db001617 	ldw	r12,88(sp)
811181fc:	00840e16 	blt	zero,r2,81119238 <_dtoa_r+0x15f0>
81118200:	00800044 	movi	r2,1
81118204:	13006b0e 	bge	r2,r12,811183b4 <_dtoa_r+0x76c>
81118208:	d9000717 	ldw	r4,28(sp)
8111820c:	dd800f15 	stw	r22,60(sp)
81118210:	dcc01015 	stw	r19,64(sp)
81118214:	2319883a 	add	r12,r4,r12
81118218:	dcc01217 	ldw	r19,72(sp)
8111821c:	602d883a 	mov	r22,r12
81118220:	dc801215 	stw	r18,72(sp)
81118224:	b825883a 	mov	r18,r23
81118228:	00000906 	br	81118250 <_dtoa_r+0x608>
8111822c:	112492c0 	call	8112492c <__subdf3>
81118230:	a80d883a 	mov	r6,r21
81118234:	980f883a 	mov	r7,r19
81118238:	1009883a 	mov	r4,r2
8111823c:	180b883a 	mov	r5,r3
81118240:	11248380 	call	81124838 <__ledf2>
81118244:	1003e816 	blt	r2,zero,811191e8 <_dtoa_r+0x15a0>
81118248:	b825883a 	mov	r18,r23
8111824c:	bd83e926 	beq	r23,r22,811191f4 <_dtoa_r+0x15ac>
81118250:	a809883a 	mov	r4,r21
81118254:	980b883a 	mov	r5,r19
81118258:	000d883a 	mov	r6,zero
8111825c:	01d00934 	movhi	r7,16420
81118260:	110f2ac0 	call	8110f2ac <__muldf3>
81118264:	000d883a 	mov	r6,zero
81118268:	01d00934 	movhi	r7,16420
8111826c:	8009883a 	mov	r4,r16
81118270:	880b883a 	mov	r5,r17
81118274:	102b883a 	mov	r21,r2
81118278:	1827883a 	mov	r19,r3
8111827c:	110f2ac0 	call	8110f2ac <__muldf3>
81118280:	180b883a 	mov	r5,r3
81118284:	1009883a 	mov	r4,r2
81118288:	1821883a 	mov	r16,r3
8111828c:	1023883a 	mov	r17,r2
81118290:	11252300 	call	81125230 <__fixdfsi>
81118294:	1009883a 	mov	r4,r2
81118298:	1029883a 	mov	r20,r2
8111829c:	11252b00 	call	811252b0 <__floatsidf>
811182a0:	8809883a 	mov	r4,r17
811182a4:	800b883a 	mov	r5,r16
811182a8:	100d883a 	mov	r6,r2
811182ac:	180f883a 	mov	r7,r3
811182b0:	112492c0 	call	8112492c <__subdf3>
811182b4:	a5000c04 	addi	r20,r20,48
811182b8:	a80d883a 	mov	r6,r21
811182bc:	980f883a 	mov	r7,r19
811182c0:	1009883a 	mov	r4,r2
811182c4:	180b883a 	mov	r5,r3
811182c8:	95000005 	stb	r20,0(r18)
811182cc:	1021883a 	mov	r16,r2
811182d0:	1823883a 	mov	r17,r3
811182d4:	11248380 	call	81124838 <__ledf2>
811182d8:	bdc00044 	addi	r23,r23,1
811182dc:	800d883a 	mov	r6,r16
811182e0:	880f883a 	mov	r7,r17
811182e4:	0009883a 	mov	r4,zero
811182e8:	014ffc34 	movhi	r5,16368
811182ec:	103fcf0e 	bge	r2,zero,8111822c <__reset+0xfb0f822c>
811182f0:	d8c01317 	ldw	r3,76(sp)
811182f4:	d8c00515 	stw	r3,20(sp)
811182f8:	d9400917 	ldw	r5,36(sp)
811182fc:	e009883a 	mov	r4,fp
81118300:	111ae100 	call	8111ae10 <_Bfree>
81118304:	d9000517 	ldw	r4,20(sp)
81118308:	d9802317 	ldw	r6,140(sp)
8111830c:	d9c02517 	ldw	r7,148(sp)
81118310:	b8000005 	stb	zero,0(r23)
81118314:	20800044 	addi	r2,r4,1
81118318:	30800015 	stw	r2,0(r6)
8111831c:	3802aa26 	beq	r7,zero,81118dc8 <_dtoa_r+0x1180>
81118320:	3dc00015 	stw	r23,0(r7)
81118324:	d8800717 	ldw	r2,28(sp)
81118328:	003e7906 	br	81117d10 <__reset+0xfb0f7d10>
8111832c:	00800434 	movhi	r2,16
81118330:	10bfffc4 	addi	r2,r2,-1
81118334:	88a2703a 	and	r17,r17,r2
81118338:	883e851e 	bne	r17,zero,81117d50 <__reset+0xfb0f7d50>
8111833c:	00a04534 	movhi	r2,33044
81118340:	10b12704 	addi	r2,r2,-15204
81118344:	003e8406 	br	81117d58 <__reset+0xfb0f7d58>
81118348:	10c00204 	addi	r3,r2,8
8111834c:	003e8706 	br	81117d6c <__reset+0xfb0f7d6c>
81118350:	01400434 	movhi	r5,16
81118354:	297fffc4 	addi	r5,r5,-1
81118358:	994a703a 	and	r5,r19,r5
8111835c:	9009883a 	mov	r4,r18
81118360:	843f0044 	addi	r16,r16,-1023
81118364:	294ffc34 	orhi	r5,r5,16368
81118368:	dd800217 	ldw	r22,8(sp)
8111836c:	d8001115 	stw	zero,68(sp)
81118370:	003ea506 	br	81117e08 <__reset+0xfb0f7e08>
81118374:	00a04534 	movhi	r2,33044
81118378:	10b10c04 	addi	r2,r2,-15312
8111837c:	003e6406 	br	81117d10 <__reset+0xfb0f7d10>
81118380:	e0001115 	stw	zero,68(fp)
81118384:	000b883a 	mov	r5,zero
81118388:	e009883a 	mov	r4,fp
8111838c:	111ad600 	call	8111ad60 <_Balloc>
81118390:	01bfffc4 	movi	r6,-1
81118394:	01c00044 	movi	r7,1
81118398:	d8800715 	stw	r2,28(sp)
8111839c:	d9800c15 	stw	r6,48(sp)
811183a0:	e0801015 	stw	r2,64(fp)
811183a4:	d8000315 	stw	zero,12(sp)
811183a8:	d9c00b15 	stw	r7,44(sp)
811183ac:	d9800615 	stw	r6,24(sp)
811183b0:	d8002215 	stw	zero,136(sp)
811183b4:	d8800117 	ldw	r2,4(sp)
811183b8:	10008916 	blt	r2,zero,811185e0 <_dtoa_r+0x998>
811183bc:	d9000517 	ldw	r4,20(sp)
811183c0:	00c00384 	movi	r3,14
811183c4:	19008616 	blt	r3,r4,811185e0 <_dtoa_r+0x998>
811183c8:	200490fa 	slli	r2,r4,3
811183cc:	00e04534 	movhi	r3,33044
811183d0:	d9802217 	ldw	r6,136(sp)
811183d4:	18f14504 	addi	r3,r3,-15084
811183d8:	1885883a 	add	r2,r3,r2
811183dc:	14000017 	ldw	r16,0(r2)
811183e0:	14400117 	ldw	r17,4(r2)
811183e4:	30016316 	blt	r6,zero,81118974 <_dtoa_r+0xd2c>
811183e8:	800d883a 	mov	r6,r16
811183ec:	880f883a 	mov	r7,r17
811183f0:	9009883a 	mov	r4,r18
811183f4:	980b883a 	mov	r5,r19
811183f8:	1123de40 	call	81123de4 <__divdf3>
811183fc:	180b883a 	mov	r5,r3
81118400:	1009883a 	mov	r4,r2
81118404:	11252300 	call	81125230 <__fixdfsi>
81118408:	1009883a 	mov	r4,r2
8111840c:	102b883a 	mov	r21,r2
81118410:	11252b00 	call	811252b0 <__floatsidf>
81118414:	800d883a 	mov	r6,r16
81118418:	880f883a 	mov	r7,r17
8111841c:	1009883a 	mov	r4,r2
81118420:	180b883a 	mov	r5,r3
81118424:	110f2ac0 	call	8110f2ac <__muldf3>
81118428:	100d883a 	mov	r6,r2
8111842c:	180f883a 	mov	r7,r3
81118430:	9009883a 	mov	r4,r18
81118434:	980b883a 	mov	r5,r19
81118438:	112492c0 	call	8112492c <__subdf3>
8111843c:	d9c00717 	ldw	r7,28(sp)
81118440:	1009883a 	mov	r4,r2
81118444:	a8800c04 	addi	r2,r21,48
81118448:	38800005 	stb	r2,0(r7)
8111844c:	3dc00044 	addi	r23,r7,1
81118450:	d9c00617 	ldw	r7,24(sp)
81118454:	01800044 	movi	r6,1
81118458:	180b883a 	mov	r5,r3
8111845c:	2005883a 	mov	r2,r4
81118460:	39803826 	beq	r7,r6,81118544 <_dtoa_r+0x8fc>
81118464:	000d883a 	mov	r6,zero
81118468:	01d00934 	movhi	r7,16420
8111846c:	110f2ac0 	call	8110f2ac <__muldf3>
81118470:	000d883a 	mov	r6,zero
81118474:	000f883a 	mov	r7,zero
81118478:	1009883a 	mov	r4,r2
8111847c:	180b883a 	mov	r5,r3
81118480:	1025883a 	mov	r18,r2
81118484:	1827883a 	mov	r19,r3
81118488:	11246d40 	call	811246d4 <__eqdf2>
8111848c:	103f9a26 	beq	r2,zero,811182f8 <__reset+0xfb0f82f8>
81118490:	d9c00617 	ldw	r7,24(sp)
81118494:	d8c00717 	ldw	r3,28(sp)
81118498:	b829883a 	mov	r20,r23
8111849c:	38bfffc4 	addi	r2,r7,-1
811184a0:	18ad883a 	add	r22,r3,r2
811184a4:	00000a06 	br	811184d0 <_dtoa_r+0x888>
811184a8:	110f2ac0 	call	8110f2ac <__muldf3>
811184ac:	000d883a 	mov	r6,zero
811184b0:	000f883a 	mov	r7,zero
811184b4:	1009883a 	mov	r4,r2
811184b8:	180b883a 	mov	r5,r3
811184bc:	1025883a 	mov	r18,r2
811184c0:	1827883a 	mov	r19,r3
811184c4:	b829883a 	mov	r20,r23
811184c8:	11246d40 	call	811246d4 <__eqdf2>
811184cc:	103f8a26 	beq	r2,zero,811182f8 <__reset+0xfb0f82f8>
811184d0:	800d883a 	mov	r6,r16
811184d4:	880f883a 	mov	r7,r17
811184d8:	9009883a 	mov	r4,r18
811184dc:	980b883a 	mov	r5,r19
811184e0:	1123de40 	call	81123de4 <__divdf3>
811184e4:	180b883a 	mov	r5,r3
811184e8:	1009883a 	mov	r4,r2
811184ec:	11252300 	call	81125230 <__fixdfsi>
811184f0:	1009883a 	mov	r4,r2
811184f4:	102b883a 	mov	r21,r2
811184f8:	11252b00 	call	811252b0 <__floatsidf>
811184fc:	800d883a 	mov	r6,r16
81118500:	880f883a 	mov	r7,r17
81118504:	1009883a 	mov	r4,r2
81118508:	180b883a 	mov	r5,r3
8111850c:	110f2ac0 	call	8110f2ac <__muldf3>
81118510:	100d883a 	mov	r6,r2
81118514:	180f883a 	mov	r7,r3
81118518:	9009883a 	mov	r4,r18
8111851c:	980b883a 	mov	r5,r19
81118520:	112492c0 	call	8112492c <__subdf3>
81118524:	aa000c04 	addi	r8,r21,48
81118528:	a2000005 	stb	r8,0(r20)
8111852c:	000d883a 	mov	r6,zero
81118530:	01d00934 	movhi	r7,16420
81118534:	1009883a 	mov	r4,r2
81118538:	180b883a 	mov	r5,r3
8111853c:	a5c00044 	addi	r23,r20,1
81118540:	b53fd91e 	bne	r22,r20,811184a8 <__reset+0xfb0f84a8>
81118544:	100d883a 	mov	r6,r2
81118548:	180f883a 	mov	r7,r3
8111854c:	1009883a 	mov	r4,r2
81118550:	180b883a 	mov	r5,r3
81118554:	11235300 	call	81123530 <__adddf3>
81118558:	100d883a 	mov	r6,r2
8111855c:	180f883a 	mov	r7,r3
81118560:	8009883a 	mov	r4,r16
81118564:	880b883a 	mov	r5,r17
81118568:	1027883a 	mov	r19,r2
8111856c:	1825883a 	mov	r18,r3
81118570:	11248380 	call	81124838 <__ledf2>
81118574:	10000816 	blt	r2,zero,81118598 <_dtoa_r+0x950>
81118578:	980d883a 	mov	r6,r19
8111857c:	900f883a 	mov	r7,r18
81118580:	8009883a 	mov	r4,r16
81118584:	880b883a 	mov	r5,r17
81118588:	11246d40 	call	811246d4 <__eqdf2>
8111858c:	103f5a1e 	bne	r2,zero,811182f8 <__reset+0xfb0f82f8>
81118590:	ad40004c 	andi	r21,r21,1
81118594:	a83f5826 	beq	r21,zero,811182f8 <__reset+0xfb0f82f8>
81118598:	bd3fffc3 	ldbu	r20,-1(r23)
8111859c:	b8bfffc4 	addi	r2,r23,-1
811185a0:	1007883a 	mov	r3,r2
811185a4:	01400e44 	movi	r5,57
811185a8:	d9800717 	ldw	r6,28(sp)
811185ac:	00000506 	br	811185c4 <_dtoa_r+0x97c>
811185b0:	18ffffc4 	addi	r3,r3,-1
811185b4:	11824726 	beq	r2,r6,81118ed4 <_dtoa_r+0x128c>
811185b8:	1d000003 	ldbu	r20,0(r3)
811185bc:	102f883a 	mov	r23,r2
811185c0:	10bfffc4 	addi	r2,r2,-1
811185c4:	a1003fcc 	andi	r4,r20,255
811185c8:	2100201c 	xori	r4,r4,128
811185cc:	213fe004 	addi	r4,r4,-128
811185d0:	217ff726 	beq	r4,r5,811185b0 <__reset+0xfb0f85b0>
811185d4:	a2000044 	addi	r8,r20,1
811185d8:	12000005 	stb	r8,0(r2)
811185dc:	003f4606 	br	811182f8 <__reset+0xfb0f82f8>
811185e0:	d9000b17 	ldw	r4,44(sp)
811185e4:	2000c826 	beq	r4,zero,81118908 <_dtoa_r+0xcc0>
811185e8:	d9800317 	ldw	r6,12(sp)
811185ec:	00c00044 	movi	r3,1
811185f0:	1980f90e 	bge	r3,r6,811189d8 <_dtoa_r+0xd90>
811185f4:	d8800617 	ldw	r2,24(sp)
811185f8:	d8c00a17 	ldw	r3,40(sp)
811185fc:	157fffc4 	addi	r21,r2,-1
81118600:	1d41f316 	blt	r3,r21,81118dd0 <_dtoa_r+0x1188>
81118604:	1d6bc83a 	sub	r21,r3,r21
81118608:	d9c00617 	ldw	r7,24(sp)
8111860c:	3802aa16 	blt	r7,zero,811190b8 <_dtoa_r+0x1470>
81118610:	dd000817 	ldw	r20,32(sp)
81118614:	d8800617 	ldw	r2,24(sp)
81118618:	d8c00817 	ldw	r3,32(sp)
8111861c:	01400044 	movi	r5,1
81118620:	e009883a 	mov	r4,fp
81118624:	1887883a 	add	r3,r3,r2
81118628:	d8c00815 	stw	r3,32(sp)
8111862c:	b0ad883a 	add	r22,r22,r2
81118630:	111b1840 	call	8111b184 <__i2b>
81118634:	1023883a 	mov	r17,r2
81118638:	a0000826 	beq	r20,zero,8111865c <_dtoa_r+0xa14>
8111863c:	0580070e 	bge	zero,r22,8111865c <_dtoa_r+0xa14>
81118640:	a005883a 	mov	r2,r20
81118644:	b500b916 	blt	r22,r20,8111892c <_dtoa_r+0xce4>
81118648:	d9000817 	ldw	r4,32(sp)
8111864c:	a0a9c83a 	sub	r20,r20,r2
81118650:	b0adc83a 	sub	r22,r22,r2
81118654:	2089c83a 	sub	r4,r4,r2
81118658:	d9000815 	stw	r4,32(sp)
8111865c:	d9800a17 	ldw	r6,40(sp)
81118660:	0181810e 	bge	zero,r6,81118c68 <_dtoa_r+0x1020>
81118664:	d9c00b17 	ldw	r7,44(sp)
81118668:	3800b326 	beq	r7,zero,81118938 <_dtoa_r+0xcf0>
8111866c:	a800b226 	beq	r21,zero,81118938 <_dtoa_r+0xcf0>
81118670:	880b883a 	mov	r5,r17
81118674:	a80d883a 	mov	r6,r21
81118678:	e009883a 	mov	r4,fp
8111867c:	111b3c80 	call	8111b3c8 <__pow5mult>
81118680:	d9800917 	ldw	r6,36(sp)
81118684:	100b883a 	mov	r5,r2
81118688:	e009883a 	mov	r4,fp
8111868c:	1023883a 	mov	r17,r2
81118690:	111b1c80 	call	8111b1c8 <__multiply>
81118694:	1021883a 	mov	r16,r2
81118698:	d8800a17 	ldw	r2,40(sp)
8111869c:	d9400917 	ldw	r5,36(sp)
811186a0:	e009883a 	mov	r4,fp
811186a4:	1545c83a 	sub	r2,r2,r21
811186a8:	d8800a15 	stw	r2,40(sp)
811186ac:	111ae100 	call	8111ae10 <_Bfree>
811186b0:	d8c00a17 	ldw	r3,40(sp)
811186b4:	18009f1e 	bne	r3,zero,81118934 <_dtoa_r+0xcec>
811186b8:	05c00044 	movi	r23,1
811186bc:	e009883a 	mov	r4,fp
811186c0:	b80b883a 	mov	r5,r23
811186c4:	111b1840 	call	8111b184 <__i2b>
811186c8:	d9000d17 	ldw	r4,52(sp)
811186cc:	102b883a 	mov	r21,r2
811186d0:	2000ce26 	beq	r4,zero,81118a0c <_dtoa_r+0xdc4>
811186d4:	200d883a 	mov	r6,r4
811186d8:	100b883a 	mov	r5,r2
811186dc:	e009883a 	mov	r4,fp
811186e0:	111b3c80 	call	8111b3c8 <__pow5mult>
811186e4:	d9800317 	ldw	r6,12(sp)
811186e8:	102b883a 	mov	r21,r2
811186ec:	b981810e 	bge	r23,r6,81118cf4 <_dtoa_r+0x10ac>
811186f0:	0027883a 	mov	r19,zero
811186f4:	a8800417 	ldw	r2,16(r21)
811186f8:	05c00804 	movi	r23,32
811186fc:	10800104 	addi	r2,r2,4
81118700:	1085883a 	add	r2,r2,r2
81118704:	1085883a 	add	r2,r2,r2
81118708:	a885883a 	add	r2,r21,r2
8111870c:	11000017 	ldw	r4,0(r2)
81118710:	111b06c0 	call	8111b06c <__hi0bits>
81118714:	b885c83a 	sub	r2,r23,r2
81118718:	1585883a 	add	r2,r2,r22
8111871c:	108007cc 	andi	r2,r2,31
81118720:	1000b326 	beq	r2,zero,811189f0 <_dtoa_r+0xda8>
81118724:	00c00804 	movi	r3,32
81118728:	1887c83a 	sub	r3,r3,r2
8111872c:	01000104 	movi	r4,4
81118730:	20c2cd0e 	bge	r4,r3,81119268 <_dtoa_r+0x1620>
81118734:	00c00704 	movi	r3,28
81118738:	1885c83a 	sub	r2,r3,r2
8111873c:	d8c00817 	ldw	r3,32(sp)
81118740:	a0a9883a 	add	r20,r20,r2
81118744:	b0ad883a 	add	r22,r22,r2
81118748:	1887883a 	add	r3,r3,r2
8111874c:	d8c00815 	stw	r3,32(sp)
81118750:	d9800817 	ldw	r6,32(sp)
81118754:	0180040e 	bge	zero,r6,81118768 <_dtoa_r+0xb20>
81118758:	800b883a 	mov	r5,r16
8111875c:	e009883a 	mov	r4,fp
81118760:	111b5100 	call	8111b510 <__lshift>
81118764:	1021883a 	mov	r16,r2
81118768:	0580050e 	bge	zero,r22,81118780 <_dtoa_r+0xb38>
8111876c:	a80b883a 	mov	r5,r21
81118770:	b00d883a 	mov	r6,r22
81118774:	e009883a 	mov	r4,fp
81118778:	111b5100 	call	8111b510 <__lshift>
8111877c:	102b883a 	mov	r21,r2
81118780:	d9c00e17 	ldw	r7,56(sp)
81118784:	3801211e 	bne	r7,zero,81118c0c <_dtoa_r+0xfc4>
81118788:	d9800617 	ldw	r6,24(sp)
8111878c:	0181380e 	bge	zero,r6,81118c70 <_dtoa_r+0x1028>
81118790:	d8c00b17 	ldw	r3,44(sp)
81118794:	1800ab1e 	bne	r3,zero,81118a44 <_dtoa_r+0xdfc>
81118798:	dc800717 	ldw	r18,28(sp)
8111879c:	dcc00617 	ldw	r19,24(sp)
811187a0:	9029883a 	mov	r20,r18
811187a4:	00000206 	br	811187b0 <_dtoa_r+0xb68>
811187a8:	111ae380 	call	8111ae38 <__multadd>
811187ac:	1021883a 	mov	r16,r2
811187b0:	a80b883a 	mov	r5,r21
811187b4:	8009883a 	mov	r4,r16
811187b8:	1117a400 	call	81117a40 <quorem>
811187bc:	10800c04 	addi	r2,r2,48
811187c0:	90800005 	stb	r2,0(r18)
811187c4:	94800044 	addi	r18,r18,1
811187c8:	9507c83a 	sub	r3,r18,r20
811187cc:	000f883a 	mov	r7,zero
811187d0:	01800284 	movi	r6,10
811187d4:	800b883a 	mov	r5,r16
811187d8:	e009883a 	mov	r4,fp
811187dc:	1cfff216 	blt	r3,r19,811187a8 <__reset+0xfb0f87a8>
811187e0:	1011883a 	mov	r8,r2
811187e4:	d8800617 	ldw	r2,24(sp)
811187e8:	0082370e 	bge	zero,r2,811190c8 <_dtoa_r+0x1480>
811187ec:	d9000717 	ldw	r4,28(sp)
811187f0:	0025883a 	mov	r18,zero
811187f4:	20af883a 	add	r23,r4,r2
811187f8:	01800044 	movi	r6,1
811187fc:	800b883a 	mov	r5,r16
81118800:	e009883a 	mov	r4,fp
81118804:	da001715 	stw	r8,92(sp)
81118808:	111b5100 	call	8111b510 <__lshift>
8111880c:	a80b883a 	mov	r5,r21
81118810:	1009883a 	mov	r4,r2
81118814:	d8800915 	stw	r2,36(sp)
81118818:	111b6600 	call	8111b660 <__mcmp>
8111881c:	da001717 	ldw	r8,92(sp)
81118820:	0081800e 	bge	zero,r2,81118e24 <_dtoa_r+0x11dc>
81118824:	b93fffc3 	ldbu	r4,-1(r23)
81118828:	b8bfffc4 	addi	r2,r23,-1
8111882c:	1007883a 	mov	r3,r2
81118830:	01800e44 	movi	r6,57
81118834:	d9c00717 	ldw	r7,28(sp)
81118838:	00000506 	br	81118850 <_dtoa_r+0xc08>
8111883c:	18ffffc4 	addi	r3,r3,-1
81118840:	11c12326 	beq	r2,r7,81118cd0 <_dtoa_r+0x1088>
81118844:	19000003 	ldbu	r4,0(r3)
81118848:	102f883a 	mov	r23,r2
8111884c:	10bfffc4 	addi	r2,r2,-1
81118850:	21403fcc 	andi	r5,r4,255
81118854:	2940201c 	xori	r5,r5,128
81118858:	297fe004 	addi	r5,r5,-128
8111885c:	29bff726 	beq	r5,r6,8111883c <__reset+0xfb0f883c>
81118860:	21000044 	addi	r4,r4,1
81118864:	11000005 	stb	r4,0(r2)
81118868:	a80b883a 	mov	r5,r21
8111886c:	e009883a 	mov	r4,fp
81118870:	111ae100 	call	8111ae10 <_Bfree>
81118874:	883ea026 	beq	r17,zero,811182f8 <__reset+0xfb0f82f8>
81118878:	90000426 	beq	r18,zero,8111888c <_dtoa_r+0xc44>
8111887c:	94400326 	beq	r18,r17,8111888c <_dtoa_r+0xc44>
81118880:	900b883a 	mov	r5,r18
81118884:	e009883a 	mov	r4,fp
81118888:	111ae100 	call	8111ae10 <_Bfree>
8111888c:	880b883a 	mov	r5,r17
81118890:	e009883a 	mov	r4,fp
81118894:	111ae100 	call	8111ae10 <_Bfree>
81118898:	003e9706 	br	811182f8 <__reset+0xfb0f82f8>
8111889c:	01800044 	movi	r6,1
811188a0:	d9800e15 	stw	r6,56(sp)
811188a4:	003d9606 	br	81117f00 <__reset+0xfb0f7f00>
811188a8:	d8800817 	ldw	r2,32(sp)
811188ac:	d8c00517 	ldw	r3,20(sp)
811188b0:	d8000d15 	stw	zero,52(sp)
811188b4:	10c5c83a 	sub	r2,r2,r3
811188b8:	00c9c83a 	sub	r4,zero,r3
811188bc:	d8800815 	stw	r2,32(sp)
811188c0:	d9000a15 	stw	r4,40(sp)
811188c4:	003d9706 	br	81117f24 <__reset+0xfb0f7f24>
811188c8:	05adc83a 	sub	r22,zero,r22
811188cc:	dd800815 	stw	r22,32(sp)
811188d0:	002d883a 	mov	r22,zero
811188d4:	003d8e06 	br	81117f10 <__reset+0xfb0f7f10>
811188d8:	d9000517 	ldw	r4,20(sp)
811188dc:	11252b00 	call	811252b0 <__floatsidf>
811188e0:	100d883a 	mov	r6,r2
811188e4:	180f883a 	mov	r7,r3
811188e8:	a009883a 	mov	r4,r20
811188ec:	880b883a 	mov	r5,r17
811188f0:	11246d40 	call	811246d4 <__eqdf2>
811188f4:	103d7126 	beq	r2,zero,81117ebc <__reset+0xfb0f7ebc>
811188f8:	d9c00517 	ldw	r7,20(sp)
811188fc:	39ffffc4 	addi	r7,r7,-1
81118900:	d9c00515 	stw	r7,20(sp)
81118904:	003d6d06 	br	81117ebc <__reset+0xfb0f7ebc>
81118908:	dd400a17 	ldw	r21,40(sp)
8111890c:	dd000817 	ldw	r20,32(sp)
81118910:	0023883a 	mov	r17,zero
81118914:	003f4806 	br	81118638 <__reset+0xfb0f8638>
81118918:	10e3c83a 	sub	r17,r2,r3
8111891c:	9448983a 	sll	r4,r18,r17
81118920:	003d3206 	br	81117dec <__reset+0xfb0f7dec>
81118924:	d8000e15 	stw	zero,56(sp)
81118928:	003d7506 	br	81117f00 <__reset+0xfb0f7f00>
8111892c:	b005883a 	mov	r2,r22
81118930:	003f4506 	br	81118648 <__reset+0xfb0f8648>
81118934:	dc000915 	stw	r16,36(sp)
81118938:	d9800a17 	ldw	r6,40(sp)
8111893c:	d9400917 	ldw	r5,36(sp)
81118940:	e009883a 	mov	r4,fp
81118944:	111b3c80 	call	8111b3c8 <__pow5mult>
81118948:	1021883a 	mov	r16,r2
8111894c:	003f5a06 	br	811186b8 <__reset+0xfb0f86b8>
81118950:	01c00044 	movi	r7,1
81118954:	d9c00b15 	stw	r7,44(sp)
81118958:	d8802217 	ldw	r2,136(sp)
8111895c:	0081280e 	bge	zero,r2,81118e00 <_dtoa_r+0x11b8>
81118960:	100d883a 	mov	r6,r2
81118964:	1021883a 	mov	r16,r2
81118968:	d8800c15 	stw	r2,48(sp)
8111896c:	d8800615 	stw	r2,24(sp)
81118970:	003d8806 	br	81117f94 <__reset+0xfb0f7f94>
81118974:	d8800617 	ldw	r2,24(sp)
81118978:	00be9b16 	blt	zero,r2,811183e8 <__reset+0xfb0f83e8>
8111897c:	10010f1e 	bne	r2,zero,81118dbc <_dtoa_r+0x1174>
81118980:	880b883a 	mov	r5,r17
81118984:	000d883a 	mov	r6,zero
81118988:	01d00534 	movhi	r7,16404
8111898c:	8009883a 	mov	r4,r16
81118990:	110f2ac0 	call	8110f2ac <__muldf3>
81118994:	900d883a 	mov	r6,r18
81118998:	980f883a 	mov	r7,r19
8111899c:	1009883a 	mov	r4,r2
811189a0:	180b883a 	mov	r5,r3
811189a4:	112475c0 	call	8112475c <__gedf2>
811189a8:	002b883a 	mov	r21,zero
811189ac:	0023883a 	mov	r17,zero
811189b0:	1000bf16 	blt	r2,zero,81118cb0 <_dtoa_r+0x1068>
811189b4:	d9802217 	ldw	r6,136(sp)
811189b8:	ddc00717 	ldw	r23,28(sp)
811189bc:	018c303a 	nor	r6,zero,r6
811189c0:	d9800515 	stw	r6,20(sp)
811189c4:	a80b883a 	mov	r5,r21
811189c8:	e009883a 	mov	r4,fp
811189cc:	111ae100 	call	8111ae10 <_Bfree>
811189d0:	883e4926 	beq	r17,zero,811182f8 <__reset+0xfb0f82f8>
811189d4:	003fad06 	br	8111888c <__reset+0xfb0f888c>
811189d8:	d9c01117 	ldw	r7,68(sp)
811189dc:	3801bc26 	beq	r7,zero,811190d0 <_dtoa_r+0x1488>
811189e0:	10810cc4 	addi	r2,r2,1075
811189e4:	dd400a17 	ldw	r21,40(sp)
811189e8:	dd000817 	ldw	r20,32(sp)
811189ec:	003f0a06 	br	81118618 <__reset+0xfb0f8618>
811189f0:	00800704 	movi	r2,28
811189f4:	d9000817 	ldw	r4,32(sp)
811189f8:	a0a9883a 	add	r20,r20,r2
811189fc:	b0ad883a 	add	r22,r22,r2
81118a00:	2089883a 	add	r4,r4,r2
81118a04:	d9000815 	stw	r4,32(sp)
81118a08:	003f5106 	br	81118750 <__reset+0xfb0f8750>
81118a0c:	d8c00317 	ldw	r3,12(sp)
81118a10:	b8c1fc0e 	bge	r23,r3,81119204 <_dtoa_r+0x15bc>
81118a14:	0027883a 	mov	r19,zero
81118a18:	b805883a 	mov	r2,r23
81118a1c:	003f3e06 	br	81118718 <__reset+0xfb0f8718>
81118a20:	880b883a 	mov	r5,r17
81118a24:	e009883a 	mov	r4,fp
81118a28:	000f883a 	mov	r7,zero
81118a2c:	01800284 	movi	r6,10
81118a30:	111ae380 	call	8111ae38 <__multadd>
81118a34:	d9000c17 	ldw	r4,48(sp)
81118a38:	1023883a 	mov	r17,r2
81118a3c:	0102040e 	bge	zero,r4,81119250 <_dtoa_r+0x1608>
81118a40:	d9000615 	stw	r4,24(sp)
81118a44:	0500050e 	bge	zero,r20,81118a5c <_dtoa_r+0xe14>
81118a48:	880b883a 	mov	r5,r17
81118a4c:	a00d883a 	mov	r6,r20
81118a50:	e009883a 	mov	r4,fp
81118a54:	111b5100 	call	8111b510 <__lshift>
81118a58:	1023883a 	mov	r17,r2
81118a5c:	9801241e 	bne	r19,zero,81118ef0 <_dtoa_r+0x12a8>
81118a60:	8829883a 	mov	r20,r17
81118a64:	d9000617 	ldw	r4,24(sp)
81118a68:	dcc00717 	ldw	r19,28(sp)
81118a6c:	9480004c 	andi	r18,r18,1
81118a70:	20bfffc4 	addi	r2,r4,-1
81118a74:	9885883a 	add	r2,r19,r2
81118a78:	d8800415 	stw	r2,16(sp)
81118a7c:	dc800615 	stw	r18,24(sp)
81118a80:	a80b883a 	mov	r5,r21
81118a84:	8009883a 	mov	r4,r16
81118a88:	1117a400 	call	81117a40 <quorem>
81118a8c:	880b883a 	mov	r5,r17
81118a90:	8009883a 	mov	r4,r16
81118a94:	102f883a 	mov	r23,r2
81118a98:	111b6600 	call	8111b660 <__mcmp>
81118a9c:	a80b883a 	mov	r5,r21
81118aa0:	a00d883a 	mov	r6,r20
81118aa4:	e009883a 	mov	r4,fp
81118aa8:	102d883a 	mov	r22,r2
81118aac:	111b6c00 	call	8111b6c0 <__mdiff>
81118ab0:	1007883a 	mov	r3,r2
81118ab4:	10800317 	ldw	r2,12(r2)
81118ab8:	bc800c04 	addi	r18,r23,48
81118abc:	180b883a 	mov	r5,r3
81118ac0:	10004e1e 	bne	r2,zero,81118bfc <_dtoa_r+0xfb4>
81118ac4:	8009883a 	mov	r4,r16
81118ac8:	d8c01615 	stw	r3,88(sp)
81118acc:	111b6600 	call	8111b660 <__mcmp>
81118ad0:	d8c01617 	ldw	r3,88(sp)
81118ad4:	e009883a 	mov	r4,fp
81118ad8:	d8801615 	stw	r2,88(sp)
81118adc:	180b883a 	mov	r5,r3
81118ae0:	111ae100 	call	8111ae10 <_Bfree>
81118ae4:	d8801617 	ldw	r2,88(sp)
81118ae8:	1000041e 	bne	r2,zero,81118afc <_dtoa_r+0xeb4>
81118aec:	d9800317 	ldw	r6,12(sp)
81118af0:	3000021e 	bne	r6,zero,81118afc <_dtoa_r+0xeb4>
81118af4:	d8c00617 	ldw	r3,24(sp)
81118af8:	18003726 	beq	r3,zero,81118bd8 <_dtoa_r+0xf90>
81118afc:	b0002016 	blt	r22,zero,81118b80 <_dtoa_r+0xf38>
81118b00:	b000041e 	bne	r22,zero,81118b14 <_dtoa_r+0xecc>
81118b04:	d9000317 	ldw	r4,12(sp)
81118b08:	2000021e 	bne	r4,zero,81118b14 <_dtoa_r+0xecc>
81118b0c:	d8c00617 	ldw	r3,24(sp)
81118b10:	18001b26 	beq	r3,zero,81118b80 <_dtoa_r+0xf38>
81118b14:	00810716 	blt	zero,r2,81118f34 <_dtoa_r+0x12ec>
81118b18:	d8c00417 	ldw	r3,16(sp)
81118b1c:	9d800044 	addi	r22,r19,1
81118b20:	9c800005 	stb	r18,0(r19)
81118b24:	b02f883a 	mov	r23,r22
81118b28:	98c10626 	beq	r19,r3,81118f44 <_dtoa_r+0x12fc>
81118b2c:	800b883a 	mov	r5,r16
81118b30:	000f883a 	mov	r7,zero
81118b34:	01800284 	movi	r6,10
81118b38:	e009883a 	mov	r4,fp
81118b3c:	111ae380 	call	8111ae38 <__multadd>
81118b40:	1021883a 	mov	r16,r2
81118b44:	000f883a 	mov	r7,zero
81118b48:	01800284 	movi	r6,10
81118b4c:	880b883a 	mov	r5,r17
81118b50:	e009883a 	mov	r4,fp
81118b54:	8d002526 	beq	r17,r20,81118bec <_dtoa_r+0xfa4>
81118b58:	111ae380 	call	8111ae38 <__multadd>
81118b5c:	a00b883a 	mov	r5,r20
81118b60:	000f883a 	mov	r7,zero
81118b64:	01800284 	movi	r6,10
81118b68:	e009883a 	mov	r4,fp
81118b6c:	1023883a 	mov	r17,r2
81118b70:	111ae380 	call	8111ae38 <__multadd>
81118b74:	1029883a 	mov	r20,r2
81118b78:	b027883a 	mov	r19,r22
81118b7c:	003fc006 	br	81118a80 <__reset+0xfb0f8a80>
81118b80:	9011883a 	mov	r8,r18
81118b84:	00800e0e 	bge	zero,r2,81118bc0 <_dtoa_r+0xf78>
81118b88:	800b883a 	mov	r5,r16
81118b8c:	01800044 	movi	r6,1
81118b90:	e009883a 	mov	r4,fp
81118b94:	da001715 	stw	r8,92(sp)
81118b98:	111b5100 	call	8111b510 <__lshift>
81118b9c:	a80b883a 	mov	r5,r21
81118ba0:	1009883a 	mov	r4,r2
81118ba4:	1021883a 	mov	r16,r2
81118ba8:	111b6600 	call	8111b660 <__mcmp>
81118bac:	da001717 	ldw	r8,92(sp)
81118bb0:	0081960e 	bge	zero,r2,8111920c <_dtoa_r+0x15c4>
81118bb4:	00800e44 	movi	r2,57
81118bb8:	40817026 	beq	r8,r2,8111917c <_dtoa_r+0x1534>
81118bbc:	ba000c44 	addi	r8,r23,49
81118bc0:	8825883a 	mov	r18,r17
81118bc4:	9dc00044 	addi	r23,r19,1
81118bc8:	9a000005 	stb	r8,0(r19)
81118bcc:	a023883a 	mov	r17,r20
81118bd0:	dc000915 	stw	r16,36(sp)
81118bd4:	003f2406 	br	81118868 <__reset+0xfb0f8868>
81118bd8:	00800e44 	movi	r2,57
81118bdc:	9011883a 	mov	r8,r18
81118be0:	90816626 	beq	r18,r2,8111917c <_dtoa_r+0x1534>
81118be4:	05bff516 	blt	zero,r22,81118bbc <__reset+0xfb0f8bbc>
81118be8:	003ff506 	br	81118bc0 <__reset+0xfb0f8bc0>
81118bec:	111ae380 	call	8111ae38 <__multadd>
81118bf0:	1023883a 	mov	r17,r2
81118bf4:	1029883a 	mov	r20,r2
81118bf8:	003fdf06 	br	81118b78 <__reset+0xfb0f8b78>
81118bfc:	e009883a 	mov	r4,fp
81118c00:	111ae100 	call	8111ae10 <_Bfree>
81118c04:	00800044 	movi	r2,1
81118c08:	003fbc06 	br	81118afc <__reset+0xfb0f8afc>
81118c0c:	a80b883a 	mov	r5,r21
81118c10:	8009883a 	mov	r4,r16
81118c14:	111b6600 	call	8111b660 <__mcmp>
81118c18:	103edb0e 	bge	r2,zero,81118788 <__reset+0xfb0f8788>
81118c1c:	800b883a 	mov	r5,r16
81118c20:	000f883a 	mov	r7,zero
81118c24:	01800284 	movi	r6,10
81118c28:	e009883a 	mov	r4,fp
81118c2c:	111ae380 	call	8111ae38 <__multadd>
81118c30:	1021883a 	mov	r16,r2
81118c34:	d8800517 	ldw	r2,20(sp)
81118c38:	d8c00b17 	ldw	r3,44(sp)
81118c3c:	10bfffc4 	addi	r2,r2,-1
81118c40:	d8800515 	stw	r2,20(sp)
81118c44:	183f761e 	bne	r3,zero,81118a20 <__reset+0xfb0f8a20>
81118c48:	d9000c17 	ldw	r4,48(sp)
81118c4c:	0101730e 	bge	zero,r4,8111921c <_dtoa_r+0x15d4>
81118c50:	d9000615 	stw	r4,24(sp)
81118c54:	003ed006 	br	81118798 <__reset+0xfb0f8798>
81118c58:	00800084 	movi	r2,2
81118c5c:	3081861e 	bne	r6,r2,81119278 <_dtoa_r+0x1630>
81118c60:	d8000b15 	stw	zero,44(sp)
81118c64:	003f3c06 	br	81118958 <__reset+0xfb0f8958>
81118c68:	dc000917 	ldw	r16,36(sp)
81118c6c:	003e9206 	br	811186b8 <__reset+0xfb0f86b8>
81118c70:	d9c00317 	ldw	r7,12(sp)
81118c74:	00800084 	movi	r2,2
81118c78:	11fec50e 	bge	r2,r7,81118790 <__reset+0xfb0f8790>
81118c7c:	d9000617 	ldw	r4,24(sp)
81118c80:	20013c1e 	bne	r4,zero,81119174 <_dtoa_r+0x152c>
81118c84:	a80b883a 	mov	r5,r21
81118c88:	000f883a 	mov	r7,zero
81118c8c:	01800144 	movi	r6,5
81118c90:	e009883a 	mov	r4,fp
81118c94:	111ae380 	call	8111ae38 <__multadd>
81118c98:	100b883a 	mov	r5,r2
81118c9c:	8009883a 	mov	r4,r16
81118ca0:	102b883a 	mov	r21,r2
81118ca4:	111b6600 	call	8111b660 <__mcmp>
81118ca8:	dc000915 	stw	r16,36(sp)
81118cac:	00bf410e 	bge	zero,r2,811189b4 <__reset+0xfb0f89b4>
81118cb0:	d9c00717 	ldw	r7,28(sp)
81118cb4:	00800c44 	movi	r2,49
81118cb8:	38800005 	stb	r2,0(r7)
81118cbc:	d8800517 	ldw	r2,20(sp)
81118cc0:	3dc00044 	addi	r23,r7,1
81118cc4:	10800044 	addi	r2,r2,1
81118cc8:	d8800515 	stw	r2,20(sp)
81118ccc:	003f3d06 	br	811189c4 <__reset+0xfb0f89c4>
81118cd0:	d9800517 	ldw	r6,20(sp)
81118cd4:	d9c00717 	ldw	r7,28(sp)
81118cd8:	00800c44 	movi	r2,49
81118cdc:	31800044 	addi	r6,r6,1
81118ce0:	d9800515 	stw	r6,20(sp)
81118ce4:	38800005 	stb	r2,0(r7)
81118ce8:	003edf06 	br	81118868 <__reset+0xfb0f8868>
81118cec:	d8000b15 	stw	zero,44(sp)
81118cf0:	003c9f06 	br	81117f70 <__reset+0xfb0f7f70>
81118cf4:	903e7e1e 	bne	r18,zero,811186f0 <__reset+0xfb0f86f0>
81118cf8:	00800434 	movhi	r2,16
81118cfc:	10bfffc4 	addi	r2,r2,-1
81118d00:	9884703a 	and	r2,r19,r2
81118d04:	1000ea1e 	bne	r2,zero,811190b0 <_dtoa_r+0x1468>
81118d08:	9cdffc2c 	andhi	r19,r19,32752
81118d0c:	9800e826 	beq	r19,zero,811190b0 <_dtoa_r+0x1468>
81118d10:	d9c00817 	ldw	r7,32(sp)
81118d14:	b5800044 	addi	r22,r22,1
81118d18:	04c00044 	movi	r19,1
81118d1c:	39c00044 	addi	r7,r7,1
81118d20:	d9c00815 	stw	r7,32(sp)
81118d24:	d8800d17 	ldw	r2,52(sp)
81118d28:	103e721e 	bne	r2,zero,811186f4 <__reset+0xfb0f86f4>
81118d2c:	00800044 	movi	r2,1
81118d30:	003e7906 	br	81118718 <__reset+0xfb0f8718>
81118d34:	8009883a 	mov	r4,r16
81118d38:	11252b00 	call	811252b0 <__floatsidf>
81118d3c:	d9800f17 	ldw	r6,60(sp)
81118d40:	d9c01017 	ldw	r7,64(sp)
81118d44:	1009883a 	mov	r4,r2
81118d48:	180b883a 	mov	r5,r3
81118d4c:	110f2ac0 	call	8110f2ac <__muldf3>
81118d50:	000d883a 	mov	r6,zero
81118d54:	01d00734 	movhi	r7,16412
81118d58:	1009883a 	mov	r4,r2
81118d5c:	180b883a 	mov	r5,r3
81118d60:	11235300 	call	81123530 <__adddf3>
81118d64:	047f3034 	movhi	r17,64704
81118d68:	1021883a 	mov	r16,r2
81118d6c:	1c63883a 	add	r17,r3,r17
81118d70:	d9000f17 	ldw	r4,60(sp)
81118d74:	d9401017 	ldw	r5,64(sp)
81118d78:	000d883a 	mov	r6,zero
81118d7c:	01d00534 	movhi	r7,16404
81118d80:	112492c0 	call	8112492c <__subdf3>
81118d84:	800d883a 	mov	r6,r16
81118d88:	880f883a 	mov	r7,r17
81118d8c:	1009883a 	mov	r4,r2
81118d90:	180b883a 	mov	r5,r3
81118d94:	102b883a 	mov	r21,r2
81118d98:	1829883a 	mov	r20,r3
81118d9c:	112475c0 	call	8112475c <__gedf2>
81118da0:	00806c16 	blt	zero,r2,81118f54 <_dtoa_r+0x130c>
81118da4:	89e0003c 	xorhi	r7,r17,32768
81118da8:	800d883a 	mov	r6,r16
81118dac:	a809883a 	mov	r4,r21
81118db0:	a00b883a 	mov	r5,r20
81118db4:	11248380 	call	81124838 <__ledf2>
81118db8:	103d7e0e 	bge	r2,zero,811183b4 <__reset+0xfb0f83b4>
81118dbc:	002b883a 	mov	r21,zero
81118dc0:	0023883a 	mov	r17,zero
81118dc4:	003efb06 	br	811189b4 <__reset+0xfb0f89b4>
81118dc8:	d8800717 	ldw	r2,28(sp)
81118dcc:	003bd006 	br	81117d10 <__reset+0xfb0f7d10>
81118dd0:	d9000a17 	ldw	r4,40(sp)
81118dd4:	d9800d17 	ldw	r6,52(sp)
81118dd8:	dd400a15 	stw	r21,40(sp)
81118ddc:	a905c83a 	sub	r2,r21,r4
81118de0:	308d883a 	add	r6,r6,r2
81118de4:	d9800d15 	stw	r6,52(sp)
81118de8:	002b883a 	mov	r21,zero
81118dec:	003e0606 	br	81118608 <__reset+0xfb0f8608>
81118df0:	9023883a 	mov	r17,r18
81118df4:	9829883a 	mov	r20,r19
81118df8:	04000084 	movi	r16,2
81118dfc:	003c9206 	br	81118048 <__reset+0xfb0f8048>
81118e00:	04000044 	movi	r16,1
81118e04:	dc000c15 	stw	r16,48(sp)
81118e08:	dc000615 	stw	r16,24(sp)
81118e0c:	dc002215 	stw	r16,136(sp)
81118e10:	e0001115 	stw	zero,68(fp)
81118e14:	000b883a 	mov	r5,zero
81118e18:	003c6906 	br	81117fc0 <__reset+0xfb0f7fc0>
81118e1c:	3021883a 	mov	r16,r6
81118e20:	003ffb06 	br	81118e10 <__reset+0xfb0f8e10>
81118e24:	1000021e 	bne	r2,zero,81118e30 <_dtoa_r+0x11e8>
81118e28:	4200004c 	andi	r8,r8,1
81118e2c:	403e7d1e 	bne	r8,zero,81118824 <__reset+0xfb0f8824>
81118e30:	01000c04 	movi	r4,48
81118e34:	00000106 	br	81118e3c <_dtoa_r+0x11f4>
81118e38:	102f883a 	mov	r23,r2
81118e3c:	b8bfffc4 	addi	r2,r23,-1
81118e40:	10c00007 	ldb	r3,0(r2)
81118e44:	193ffc26 	beq	r3,r4,81118e38 <__reset+0xfb0f8e38>
81118e48:	003e8706 	br	81118868 <__reset+0xfb0f8868>
81118e4c:	d8800517 	ldw	r2,20(sp)
81118e50:	00a3c83a 	sub	r17,zero,r2
81118e54:	8800a426 	beq	r17,zero,811190e8 <_dtoa_r+0x14a0>
81118e58:	888003cc 	andi	r2,r17,15
81118e5c:	100490fa 	slli	r2,r2,3
81118e60:	00e04534 	movhi	r3,33044
81118e64:	18f14504 	addi	r3,r3,-15084
81118e68:	1885883a 	add	r2,r3,r2
81118e6c:	11800017 	ldw	r6,0(r2)
81118e70:	11c00117 	ldw	r7,4(r2)
81118e74:	9009883a 	mov	r4,r18
81118e78:	980b883a 	mov	r5,r19
81118e7c:	8823d13a 	srai	r17,r17,4
81118e80:	110f2ac0 	call	8110f2ac <__muldf3>
81118e84:	d8800f15 	stw	r2,60(sp)
81118e88:	d8c01015 	stw	r3,64(sp)
81118e8c:	8800e826 	beq	r17,zero,81119230 <_dtoa_r+0x15e8>
81118e90:	05204534 	movhi	r20,33044
81118e94:	a5313b04 	addi	r20,r20,-15124
81118e98:	04000084 	movi	r16,2
81118e9c:	8980004c 	andi	r6,r17,1
81118ea0:	1009883a 	mov	r4,r2
81118ea4:	8823d07a 	srai	r17,r17,1
81118ea8:	180b883a 	mov	r5,r3
81118eac:	30000426 	beq	r6,zero,81118ec0 <_dtoa_r+0x1278>
81118eb0:	a1800017 	ldw	r6,0(r20)
81118eb4:	a1c00117 	ldw	r7,4(r20)
81118eb8:	84000044 	addi	r16,r16,1
81118ebc:	110f2ac0 	call	8110f2ac <__muldf3>
81118ec0:	a5000204 	addi	r20,r20,8
81118ec4:	883ff51e 	bne	r17,zero,81118e9c <__reset+0xfb0f8e9c>
81118ec8:	d8800f15 	stw	r2,60(sp)
81118ecc:	d8c01015 	stw	r3,64(sp)
81118ed0:	003c7606 	br	811180ac <__reset+0xfb0f80ac>
81118ed4:	00c00c04 	movi	r3,48
81118ed8:	10c00005 	stb	r3,0(r2)
81118edc:	d8c00517 	ldw	r3,20(sp)
81118ee0:	bd3fffc3 	ldbu	r20,-1(r23)
81118ee4:	18c00044 	addi	r3,r3,1
81118ee8:	d8c00515 	stw	r3,20(sp)
81118eec:	003db906 	br	811185d4 <__reset+0xfb0f85d4>
81118ef0:	89400117 	ldw	r5,4(r17)
81118ef4:	e009883a 	mov	r4,fp
81118ef8:	111ad600 	call	8111ad60 <_Balloc>
81118efc:	89800417 	ldw	r6,16(r17)
81118f00:	89400304 	addi	r5,r17,12
81118f04:	11000304 	addi	r4,r2,12
81118f08:	31800084 	addi	r6,r6,2
81118f0c:	318d883a 	add	r6,r6,r6
81118f10:	318d883a 	add	r6,r6,r6
81118f14:	1027883a 	mov	r19,r2
81118f18:	1110e4c0 	call	81110e4c <memcpy>
81118f1c:	01800044 	movi	r6,1
81118f20:	980b883a 	mov	r5,r19
81118f24:	e009883a 	mov	r4,fp
81118f28:	111b5100 	call	8111b510 <__lshift>
81118f2c:	1029883a 	mov	r20,r2
81118f30:	003ecc06 	br	81118a64 <__reset+0xfb0f8a64>
81118f34:	00800e44 	movi	r2,57
81118f38:	90809026 	beq	r18,r2,8111917c <_dtoa_r+0x1534>
81118f3c:	92000044 	addi	r8,r18,1
81118f40:	003f1f06 	br	81118bc0 <__reset+0xfb0f8bc0>
81118f44:	9011883a 	mov	r8,r18
81118f48:	8825883a 	mov	r18,r17
81118f4c:	a023883a 	mov	r17,r20
81118f50:	003e2906 	br	811187f8 <__reset+0xfb0f87f8>
81118f54:	002b883a 	mov	r21,zero
81118f58:	0023883a 	mov	r17,zero
81118f5c:	003f5406 	br	81118cb0 <__reset+0xfb0f8cb0>
81118f60:	61bfffc4 	addi	r6,r12,-1
81118f64:	300490fa 	slli	r2,r6,3
81118f68:	00e04534 	movhi	r3,33044
81118f6c:	18f14504 	addi	r3,r3,-15084
81118f70:	1885883a 	add	r2,r3,r2
81118f74:	11000017 	ldw	r4,0(r2)
81118f78:	11400117 	ldw	r5,4(r2)
81118f7c:	d8800717 	ldw	r2,28(sp)
81118f80:	880f883a 	mov	r7,r17
81118f84:	d9801215 	stw	r6,72(sp)
81118f88:	800d883a 	mov	r6,r16
81118f8c:	db001615 	stw	r12,88(sp)
81118f90:	15c00044 	addi	r23,r2,1
81118f94:	110f2ac0 	call	8110f2ac <__muldf3>
81118f98:	d9401017 	ldw	r5,64(sp)
81118f9c:	d9000f17 	ldw	r4,60(sp)
81118fa0:	d8c01515 	stw	r3,84(sp)
81118fa4:	d8801415 	stw	r2,80(sp)
81118fa8:	11252300 	call	81125230 <__fixdfsi>
81118fac:	1009883a 	mov	r4,r2
81118fb0:	1021883a 	mov	r16,r2
81118fb4:	11252b00 	call	811252b0 <__floatsidf>
81118fb8:	d9000f17 	ldw	r4,60(sp)
81118fbc:	d9401017 	ldw	r5,64(sp)
81118fc0:	100d883a 	mov	r6,r2
81118fc4:	180f883a 	mov	r7,r3
81118fc8:	112492c0 	call	8112492c <__subdf3>
81118fcc:	1829883a 	mov	r20,r3
81118fd0:	d8c00717 	ldw	r3,28(sp)
81118fd4:	84000c04 	addi	r16,r16,48
81118fd8:	1023883a 	mov	r17,r2
81118fdc:	1c000005 	stb	r16,0(r3)
81118fe0:	db001617 	ldw	r12,88(sp)
81118fe4:	00800044 	movi	r2,1
81118fe8:	60802226 	beq	r12,r2,81119074 <_dtoa_r+0x142c>
81118fec:	d9c00717 	ldw	r7,28(sp)
81118ff0:	8805883a 	mov	r2,r17
81118ff4:	b82b883a 	mov	r21,r23
81118ff8:	3b19883a 	add	r12,r7,r12
81118ffc:	6023883a 	mov	r17,r12
81119000:	a007883a 	mov	r3,r20
81119004:	dc800f15 	stw	r18,60(sp)
81119008:	000d883a 	mov	r6,zero
8111900c:	01d00934 	movhi	r7,16420
81119010:	1009883a 	mov	r4,r2
81119014:	180b883a 	mov	r5,r3
81119018:	110f2ac0 	call	8110f2ac <__muldf3>
8111901c:	180b883a 	mov	r5,r3
81119020:	1009883a 	mov	r4,r2
81119024:	1829883a 	mov	r20,r3
81119028:	1025883a 	mov	r18,r2
8111902c:	11252300 	call	81125230 <__fixdfsi>
81119030:	1009883a 	mov	r4,r2
81119034:	1021883a 	mov	r16,r2
81119038:	11252b00 	call	811252b0 <__floatsidf>
8111903c:	100d883a 	mov	r6,r2
81119040:	180f883a 	mov	r7,r3
81119044:	9009883a 	mov	r4,r18
81119048:	a00b883a 	mov	r5,r20
8111904c:	84000c04 	addi	r16,r16,48
81119050:	112492c0 	call	8112492c <__subdf3>
81119054:	ad400044 	addi	r21,r21,1
81119058:	ac3fffc5 	stb	r16,-1(r21)
8111905c:	ac7fea1e 	bne	r21,r17,81119008 <__reset+0xfb0f9008>
81119060:	1023883a 	mov	r17,r2
81119064:	d8801217 	ldw	r2,72(sp)
81119068:	dc800f17 	ldw	r18,60(sp)
8111906c:	1829883a 	mov	r20,r3
81119070:	b8af883a 	add	r23,r23,r2
81119074:	d9001417 	ldw	r4,80(sp)
81119078:	d9401517 	ldw	r5,84(sp)
8111907c:	000d883a 	mov	r6,zero
81119080:	01cff834 	movhi	r7,16352
81119084:	11235300 	call	81123530 <__adddf3>
81119088:	880d883a 	mov	r6,r17
8111908c:	a00f883a 	mov	r7,r20
81119090:	1009883a 	mov	r4,r2
81119094:	180b883a 	mov	r5,r3
81119098:	11248380 	call	81124838 <__ledf2>
8111909c:	10003e0e 	bge	r2,zero,81119198 <_dtoa_r+0x1550>
811190a0:	d9001317 	ldw	r4,76(sp)
811190a4:	bd3fffc3 	ldbu	r20,-1(r23)
811190a8:	d9000515 	stw	r4,20(sp)
811190ac:	003d3b06 	br	8111859c <__reset+0xfb0f859c>
811190b0:	0027883a 	mov	r19,zero
811190b4:	003f1b06 	br	81118d24 <__reset+0xfb0f8d24>
811190b8:	d8800817 	ldw	r2,32(sp)
811190bc:	11e9c83a 	sub	r20,r2,r7
811190c0:	0005883a 	mov	r2,zero
811190c4:	003d5406 	br	81118618 <__reset+0xfb0f8618>
811190c8:	00800044 	movi	r2,1
811190cc:	003dc706 	br	811187ec <__reset+0xfb0f87ec>
811190d0:	d8c00217 	ldw	r3,8(sp)
811190d4:	00800d84 	movi	r2,54
811190d8:	dd400a17 	ldw	r21,40(sp)
811190dc:	10c5c83a 	sub	r2,r2,r3
811190e0:	dd000817 	ldw	r20,32(sp)
811190e4:	003d4c06 	br	81118618 <__reset+0xfb0f8618>
811190e8:	dc800f15 	stw	r18,60(sp)
811190ec:	dcc01015 	stw	r19,64(sp)
811190f0:	04000084 	movi	r16,2
811190f4:	003bed06 	br	811180ac <__reset+0xfb0f80ac>
811190f8:	d9000617 	ldw	r4,24(sp)
811190fc:	203f0d26 	beq	r4,zero,81118d34 <__reset+0xfb0f8d34>
81119100:	d9800c17 	ldw	r6,48(sp)
81119104:	01bcab0e 	bge	zero,r6,811183b4 <__reset+0xfb0f83b4>
81119108:	d9401017 	ldw	r5,64(sp)
8111910c:	d9000f17 	ldw	r4,60(sp)
81119110:	000d883a 	mov	r6,zero
81119114:	01d00934 	movhi	r7,16420
81119118:	110f2ac0 	call	8110f2ac <__muldf3>
8111911c:	81000044 	addi	r4,r16,1
81119120:	d8800f15 	stw	r2,60(sp)
81119124:	d8c01015 	stw	r3,64(sp)
81119128:	11252b00 	call	811252b0 <__floatsidf>
8111912c:	d9800f17 	ldw	r6,60(sp)
81119130:	d9c01017 	ldw	r7,64(sp)
81119134:	1009883a 	mov	r4,r2
81119138:	180b883a 	mov	r5,r3
8111913c:	110f2ac0 	call	8110f2ac <__muldf3>
81119140:	01d00734 	movhi	r7,16412
81119144:	000d883a 	mov	r6,zero
81119148:	1009883a 	mov	r4,r2
8111914c:	180b883a 	mov	r5,r3
81119150:	11235300 	call	81123530 <__adddf3>
81119154:	d9c00517 	ldw	r7,20(sp)
81119158:	047f3034 	movhi	r17,64704
8111915c:	1021883a 	mov	r16,r2
81119160:	39ffffc4 	addi	r7,r7,-1
81119164:	d9c01315 	stw	r7,76(sp)
81119168:	1c63883a 	add	r17,r3,r17
8111916c:	db000c17 	ldw	r12,48(sp)
81119170:	003bea06 	br	8111811c <__reset+0xfb0f811c>
81119174:	dc000915 	stw	r16,36(sp)
81119178:	003e0e06 	br	811189b4 <__reset+0xfb0f89b4>
8111917c:	01000e44 	movi	r4,57
81119180:	8825883a 	mov	r18,r17
81119184:	9dc00044 	addi	r23,r19,1
81119188:	99000005 	stb	r4,0(r19)
8111918c:	a023883a 	mov	r17,r20
81119190:	dc000915 	stw	r16,36(sp)
81119194:	003da406 	br	81118828 <__reset+0xfb0f8828>
81119198:	d9801417 	ldw	r6,80(sp)
8111919c:	d9c01517 	ldw	r7,84(sp)
811191a0:	0009883a 	mov	r4,zero
811191a4:	014ff834 	movhi	r5,16352
811191a8:	112492c0 	call	8112492c <__subdf3>
811191ac:	880d883a 	mov	r6,r17
811191b0:	a00f883a 	mov	r7,r20
811191b4:	1009883a 	mov	r4,r2
811191b8:	180b883a 	mov	r5,r3
811191bc:	112475c0 	call	8112475c <__gedf2>
811191c0:	00bc7c0e 	bge	zero,r2,811183b4 <__reset+0xfb0f83b4>
811191c4:	01000c04 	movi	r4,48
811191c8:	00000106 	br	811191d0 <_dtoa_r+0x1588>
811191cc:	102f883a 	mov	r23,r2
811191d0:	b8bfffc4 	addi	r2,r23,-1
811191d4:	10c00007 	ldb	r3,0(r2)
811191d8:	193ffc26 	beq	r3,r4,811191cc <__reset+0xfb0f91cc>
811191dc:	d9801317 	ldw	r6,76(sp)
811191e0:	d9800515 	stw	r6,20(sp)
811191e4:	003c4406 	br	811182f8 <__reset+0xfb0f82f8>
811191e8:	d9801317 	ldw	r6,76(sp)
811191ec:	d9800515 	stw	r6,20(sp)
811191f0:	003cea06 	br	8111859c <__reset+0xfb0f859c>
811191f4:	dd800f17 	ldw	r22,60(sp)
811191f8:	dcc01017 	ldw	r19,64(sp)
811191fc:	dc801217 	ldw	r18,72(sp)
81119200:	003c6c06 	br	811183b4 <__reset+0xfb0f83b4>
81119204:	903e031e 	bne	r18,zero,81118a14 <__reset+0xfb0f8a14>
81119208:	003ebb06 	br	81118cf8 <__reset+0xfb0f8cf8>
8111920c:	103e6c1e 	bne	r2,zero,81118bc0 <__reset+0xfb0f8bc0>
81119210:	4080004c 	andi	r2,r8,1
81119214:	103e6a26 	beq	r2,zero,81118bc0 <__reset+0xfb0f8bc0>
81119218:	003e6606 	br	81118bb4 <__reset+0xfb0f8bb4>
8111921c:	d8c00317 	ldw	r3,12(sp)
81119220:	00800084 	movi	r2,2
81119224:	10c02916 	blt	r2,r3,811192cc <_dtoa_r+0x1684>
81119228:	d9000c17 	ldw	r4,48(sp)
8111922c:	003e8806 	br	81118c50 <__reset+0xfb0f8c50>
81119230:	04000084 	movi	r16,2
81119234:	003b9d06 	br	811180ac <__reset+0xfb0f80ac>
81119238:	d9001317 	ldw	r4,76(sp)
8111923c:	d9000515 	stw	r4,20(sp)
81119240:	003cd606 	br	8111859c <__reset+0xfb0f859c>
81119244:	d8801317 	ldw	r2,76(sp)
81119248:	d8800515 	stw	r2,20(sp)
8111924c:	003c2a06 	br	811182f8 <__reset+0xfb0f82f8>
81119250:	d9800317 	ldw	r6,12(sp)
81119254:	00800084 	movi	r2,2
81119258:	11801516 	blt	r2,r6,811192b0 <_dtoa_r+0x1668>
8111925c:	d9c00c17 	ldw	r7,48(sp)
81119260:	d9c00615 	stw	r7,24(sp)
81119264:	003df706 	br	81118a44 <__reset+0xfb0f8a44>
81119268:	193d3926 	beq	r3,r4,81118750 <__reset+0xfb0f8750>
8111926c:	00c00f04 	movi	r3,60
81119270:	1885c83a 	sub	r2,r3,r2
81119274:	003ddf06 	br	811189f4 <__reset+0xfb0f89f4>
81119278:	e009883a 	mov	r4,fp
8111927c:	e0001115 	stw	zero,68(fp)
81119280:	000b883a 	mov	r5,zero
81119284:	111ad600 	call	8111ad60 <_Balloc>
81119288:	d8800715 	stw	r2,28(sp)
8111928c:	d8c00717 	ldw	r3,28(sp)
81119290:	00bfffc4 	movi	r2,-1
81119294:	01000044 	movi	r4,1
81119298:	d8800c15 	stw	r2,48(sp)
8111929c:	e0c01015 	stw	r3,64(fp)
811192a0:	d9000b15 	stw	r4,44(sp)
811192a4:	d8800615 	stw	r2,24(sp)
811192a8:	d8002215 	stw	zero,136(sp)
811192ac:	003c4106 	br	811183b4 <__reset+0xfb0f83b4>
811192b0:	d8c00c17 	ldw	r3,48(sp)
811192b4:	d8c00615 	stw	r3,24(sp)
811192b8:	003e7006 	br	81118c7c <__reset+0xfb0f8c7c>
811192bc:	04400044 	movi	r17,1
811192c0:	003b2006 	br	81117f44 <__reset+0xfb0f7f44>
811192c4:	000b883a 	mov	r5,zero
811192c8:	003b3d06 	br	81117fc0 <__reset+0xfb0f7fc0>
811192cc:	d8800c17 	ldw	r2,48(sp)
811192d0:	d8800615 	stw	r2,24(sp)
811192d4:	003e6906 	br	81118c7c <__reset+0xfb0f8c7c>

811192d8 <__sflush_r>:
811192d8:	defffb04 	addi	sp,sp,-20
811192dc:	de00012e 	bgeu	sp,et,811192e4 <__sflush_r+0xc>
811192e0:	003b68fa 	trap	3
811192e4:	2880030b 	ldhu	r2,12(r5)
811192e8:	dcc00315 	stw	r19,12(sp)
811192ec:	dc400115 	stw	r17,4(sp)
811192f0:	dfc00415 	stw	ra,16(sp)
811192f4:	dc800215 	stw	r18,8(sp)
811192f8:	dc000015 	stw	r16,0(sp)
811192fc:	10c0020c 	andi	r3,r2,8
81119300:	2823883a 	mov	r17,r5
81119304:	2027883a 	mov	r19,r4
81119308:	1800311e 	bne	r3,zero,811193d0 <__sflush_r+0xf8>
8111930c:	28c00117 	ldw	r3,4(r5)
81119310:	10820014 	ori	r2,r2,2048
81119314:	2880030d 	sth	r2,12(r5)
81119318:	00c04b0e 	bge	zero,r3,81119448 <__sflush_r+0x170>
8111931c:	8a000a17 	ldw	r8,40(r17)
81119320:	40002326 	beq	r8,zero,811193b0 <__sflush_r+0xd8>
81119324:	9c000017 	ldw	r16,0(r19)
81119328:	10c4000c 	andi	r3,r2,4096
8111932c:	98000015 	stw	zero,0(r19)
81119330:	18004826 	beq	r3,zero,81119454 <__sflush_r+0x17c>
81119334:	89801417 	ldw	r6,80(r17)
81119338:	10c0010c 	andi	r3,r2,4
8111933c:	18000626 	beq	r3,zero,81119358 <__sflush_r+0x80>
81119340:	88c00117 	ldw	r3,4(r17)
81119344:	88800c17 	ldw	r2,48(r17)
81119348:	30cdc83a 	sub	r6,r6,r3
8111934c:	10000226 	beq	r2,zero,81119358 <__sflush_r+0x80>
81119350:	88800f17 	ldw	r2,60(r17)
81119354:	308dc83a 	sub	r6,r6,r2
81119358:	89400717 	ldw	r5,28(r17)
8111935c:	000f883a 	mov	r7,zero
81119360:	9809883a 	mov	r4,r19
81119364:	403ee83a 	callr	r8
81119368:	00ffffc4 	movi	r3,-1
8111936c:	10c04426 	beq	r2,r3,81119480 <__sflush_r+0x1a8>
81119370:	88c0030b 	ldhu	r3,12(r17)
81119374:	89000417 	ldw	r4,16(r17)
81119378:	88000115 	stw	zero,4(r17)
8111937c:	197dffcc 	andi	r5,r3,63487
81119380:	8940030d 	sth	r5,12(r17)
81119384:	89000015 	stw	r4,0(r17)
81119388:	18c4000c 	andi	r3,r3,4096
8111938c:	18002c1e 	bne	r3,zero,81119440 <__sflush_r+0x168>
81119390:	89400c17 	ldw	r5,48(r17)
81119394:	9c000015 	stw	r16,0(r19)
81119398:	28000526 	beq	r5,zero,811193b0 <__sflush_r+0xd8>
8111939c:	88801004 	addi	r2,r17,64
811193a0:	28800226 	beq	r5,r2,811193ac <__sflush_r+0xd4>
811193a4:	9809883a 	mov	r4,r19
811193a8:	1119d900 	call	81119d90 <_free_r>
811193ac:	88000c15 	stw	zero,48(r17)
811193b0:	0005883a 	mov	r2,zero
811193b4:	dfc00417 	ldw	ra,16(sp)
811193b8:	dcc00317 	ldw	r19,12(sp)
811193bc:	dc800217 	ldw	r18,8(sp)
811193c0:	dc400117 	ldw	r17,4(sp)
811193c4:	dc000017 	ldw	r16,0(sp)
811193c8:	dec00504 	addi	sp,sp,20
811193cc:	f800283a 	ret
811193d0:	2c800417 	ldw	r18,16(r5)
811193d4:	903ff626 	beq	r18,zero,811193b0 <__reset+0xfb0f93b0>
811193d8:	2c000017 	ldw	r16,0(r5)
811193dc:	108000cc 	andi	r2,r2,3
811193e0:	2c800015 	stw	r18,0(r5)
811193e4:	84a1c83a 	sub	r16,r16,r18
811193e8:	1000131e 	bne	r2,zero,81119438 <__sflush_r+0x160>
811193ec:	28800517 	ldw	r2,20(r5)
811193f0:	88800215 	stw	r2,8(r17)
811193f4:	04000316 	blt	zero,r16,81119404 <__sflush_r+0x12c>
811193f8:	003fed06 	br	811193b0 <__reset+0xfb0f93b0>
811193fc:	90a5883a 	add	r18,r18,r2
81119400:	043feb0e 	bge	zero,r16,811193b0 <__reset+0xfb0f93b0>
81119404:	88800917 	ldw	r2,36(r17)
81119408:	89400717 	ldw	r5,28(r17)
8111940c:	800f883a 	mov	r7,r16
81119410:	900d883a 	mov	r6,r18
81119414:	9809883a 	mov	r4,r19
81119418:	103ee83a 	callr	r2
8111941c:	80a1c83a 	sub	r16,r16,r2
81119420:	00bff616 	blt	zero,r2,811193fc <__reset+0xfb0f93fc>
81119424:	88c0030b 	ldhu	r3,12(r17)
81119428:	00bfffc4 	movi	r2,-1
8111942c:	18c01014 	ori	r3,r3,64
81119430:	88c0030d 	sth	r3,12(r17)
81119434:	003fdf06 	br	811193b4 <__reset+0xfb0f93b4>
81119438:	0005883a 	mov	r2,zero
8111943c:	003fec06 	br	811193f0 <__reset+0xfb0f93f0>
81119440:	88801415 	stw	r2,80(r17)
81119444:	003fd206 	br	81119390 <__reset+0xfb0f9390>
81119448:	28c00f17 	ldw	r3,60(r5)
8111944c:	00ffb316 	blt	zero,r3,8111931c <__reset+0xfb0f931c>
81119450:	003fd706 	br	811193b0 <__reset+0xfb0f93b0>
81119454:	89400717 	ldw	r5,28(r17)
81119458:	000d883a 	mov	r6,zero
8111945c:	01c00044 	movi	r7,1
81119460:	9809883a 	mov	r4,r19
81119464:	403ee83a 	callr	r8
81119468:	100d883a 	mov	r6,r2
8111946c:	00bfffc4 	movi	r2,-1
81119470:	30801426 	beq	r6,r2,811194c4 <__sflush_r+0x1ec>
81119474:	8880030b 	ldhu	r2,12(r17)
81119478:	8a000a17 	ldw	r8,40(r17)
8111947c:	003fae06 	br	81119338 <__reset+0xfb0f9338>
81119480:	98c00017 	ldw	r3,0(r19)
81119484:	183fba26 	beq	r3,zero,81119370 <__reset+0xfb0f9370>
81119488:	01000744 	movi	r4,29
8111948c:	19000626 	beq	r3,r4,811194a8 <__sflush_r+0x1d0>
81119490:	01000584 	movi	r4,22
81119494:	19000426 	beq	r3,r4,811194a8 <__sflush_r+0x1d0>
81119498:	88c0030b 	ldhu	r3,12(r17)
8111949c:	18c01014 	ori	r3,r3,64
811194a0:	88c0030d 	sth	r3,12(r17)
811194a4:	003fc306 	br	811193b4 <__reset+0xfb0f93b4>
811194a8:	8880030b 	ldhu	r2,12(r17)
811194ac:	88c00417 	ldw	r3,16(r17)
811194b0:	88000115 	stw	zero,4(r17)
811194b4:	10bdffcc 	andi	r2,r2,63487
811194b8:	8880030d 	sth	r2,12(r17)
811194bc:	88c00015 	stw	r3,0(r17)
811194c0:	003fb306 	br	81119390 <__reset+0xfb0f9390>
811194c4:	98800017 	ldw	r2,0(r19)
811194c8:	103fea26 	beq	r2,zero,81119474 <__reset+0xfb0f9474>
811194cc:	00c00744 	movi	r3,29
811194d0:	10c00226 	beq	r2,r3,811194dc <__sflush_r+0x204>
811194d4:	00c00584 	movi	r3,22
811194d8:	10c0031e 	bne	r2,r3,811194e8 <__sflush_r+0x210>
811194dc:	9c000015 	stw	r16,0(r19)
811194e0:	0005883a 	mov	r2,zero
811194e4:	003fb306 	br	811193b4 <__reset+0xfb0f93b4>
811194e8:	88c0030b 	ldhu	r3,12(r17)
811194ec:	3005883a 	mov	r2,r6
811194f0:	18c01014 	ori	r3,r3,64
811194f4:	88c0030d 	sth	r3,12(r17)
811194f8:	003fae06 	br	811193b4 <__reset+0xfb0f93b4>

811194fc <_fflush_r>:
811194fc:	defffd04 	addi	sp,sp,-12
81119500:	de00012e 	bgeu	sp,et,81119508 <_fflush_r+0xc>
81119504:	003b68fa 	trap	3
81119508:	dc000115 	stw	r16,4(sp)
8111950c:	dfc00215 	stw	ra,8(sp)
81119510:	2021883a 	mov	r16,r4
81119514:	20000226 	beq	r4,zero,81119520 <_fflush_r+0x24>
81119518:	20800e17 	ldw	r2,56(r4)
8111951c:	10000c26 	beq	r2,zero,81119550 <_fflush_r+0x54>
81119520:	2880030f 	ldh	r2,12(r5)
81119524:	1000051e 	bne	r2,zero,8111953c <_fflush_r+0x40>
81119528:	0005883a 	mov	r2,zero
8111952c:	dfc00217 	ldw	ra,8(sp)
81119530:	dc000117 	ldw	r16,4(sp)
81119534:	dec00304 	addi	sp,sp,12
81119538:	f800283a 	ret
8111953c:	8009883a 	mov	r4,r16
81119540:	dfc00217 	ldw	ra,8(sp)
81119544:	dc000117 	ldw	r16,4(sp)
81119548:	dec00304 	addi	sp,sp,12
8111954c:	11192d81 	jmpi	811192d8 <__sflush_r>
81119550:	d9400015 	stw	r5,0(sp)
81119554:	11198f80 	call	811198f8 <__sinit>
81119558:	d9400017 	ldw	r5,0(sp)
8111955c:	003ff006 	br	81119520 <__reset+0xfb0f9520>

81119560 <fflush>:
81119560:	20000526 	beq	r4,zero,81119578 <fflush+0x18>
81119564:	00a04534 	movhi	r2,33044
81119568:	10ba0604 	addi	r2,r2,-6120
8111956c:	200b883a 	mov	r5,r4
81119570:	11000017 	ldw	r4,0(r2)
81119574:	11194fc1 	jmpi	811194fc <_fflush_r>
81119578:	00a04534 	movhi	r2,33044
8111957c:	10ba0504 	addi	r2,r2,-6124
81119580:	11000017 	ldw	r4,0(r2)
81119584:	016044b4 	movhi	r5,33042
81119588:	29653f04 	addi	r5,r5,-27396
8111958c:	111a6381 	jmpi	8111a638 <_fwalk_reent>

81119590 <__fp_unlock>:
81119590:	0005883a 	mov	r2,zero
81119594:	f800283a 	ret

81119598 <_cleanup_r>:
81119598:	016044b4 	movhi	r5,33042
8111959c:	2944d504 	addi	r5,r5,4948
811195a0:	111a6381 	jmpi	8111a638 <_fwalk_reent>

811195a4 <__sinit.part.1>:
811195a4:	defff704 	addi	sp,sp,-36
811195a8:	00e044b4 	movhi	r3,33042
811195ac:	de00012e 	bgeu	sp,et,811195b4 <__sinit.part.1+0x10>
811195b0:	003b68fa 	trap	3
811195b4:	18e56604 	addi	r3,r3,-27240
811195b8:	dfc00815 	stw	ra,32(sp)
811195bc:	ddc00715 	stw	r23,28(sp)
811195c0:	dd800615 	stw	r22,24(sp)
811195c4:	dd400515 	stw	r21,20(sp)
811195c8:	dd000415 	stw	r20,16(sp)
811195cc:	dcc00315 	stw	r19,12(sp)
811195d0:	dc800215 	stw	r18,8(sp)
811195d4:	dc400115 	stw	r17,4(sp)
811195d8:	dc000015 	stw	r16,0(sp)
811195dc:	24000117 	ldw	r16,4(r4)
811195e0:	20c00f15 	stw	r3,60(r4)
811195e4:	2080bb04 	addi	r2,r4,748
811195e8:	00c000c4 	movi	r3,3
811195ec:	20c0b915 	stw	r3,740(r4)
811195f0:	2080ba15 	stw	r2,744(r4)
811195f4:	2000b815 	stw	zero,736(r4)
811195f8:	05c00204 	movi	r23,8
811195fc:	00800104 	movi	r2,4
81119600:	2025883a 	mov	r18,r4
81119604:	b80d883a 	mov	r6,r23
81119608:	81001704 	addi	r4,r16,92
8111960c:	000b883a 	mov	r5,zero
81119610:	80000015 	stw	zero,0(r16)
81119614:	80000115 	stw	zero,4(r16)
81119618:	80000215 	stw	zero,8(r16)
8111961c:	8080030d 	sth	r2,12(r16)
81119620:	80001915 	stw	zero,100(r16)
81119624:	8000038d 	sth	zero,14(r16)
81119628:	80000415 	stw	zero,16(r16)
8111962c:	80000515 	stw	zero,20(r16)
81119630:	80000615 	stw	zero,24(r16)
81119634:	1110f9c0 	call	81110f9c <memset>
81119638:	05a04474 	movhi	r22,33041
8111963c:	94400217 	ldw	r17,8(r18)
81119640:	05604474 	movhi	r21,33041
81119644:	05204474 	movhi	r20,33041
81119648:	04e04474 	movhi	r19,33041
8111964c:	b5858a04 	addi	r22,r22,5672
81119650:	ad45a304 	addi	r21,r21,5772
81119654:	a505c404 	addi	r20,r20,5904
81119658:	9cc5dd04 	addi	r19,r19,6004
8111965c:	85800815 	stw	r22,32(r16)
81119660:	85400915 	stw	r21,36(r16)
81119664:	85000a15 	stw	r20,40(r16)
81119668:	84c00b15 	stw	r19,44(r16)
8111966c:	84000715 	stw	r16,28(r16)
81119670:	00800284 	movi	r2,10
81119674:	8880030d 	sth	r2,12(r17)
81119678:	00800044 	movi	r2,1
8111967c:	b80d883a 	mov	r6,r23
81119680:	89001704 	addi	r4,r17,92
81119684:	000b883a 	mov	r5,zero
81119688:	88000015 	stw	zero,0(r17)
8111968c:	88000115 	stw	zero,4(r17)
81119690:	88000215 	stw	zero,8(r17)
81119694:	88001915 	stw	zero,100(r17)
81119698:	8880038d 	sth	r2,14(r17)
8111969c:	88000415 	stw	zero,16(r17)
811196a0:	88000515 	stw	zero,20(r17)
811196a4:	88000615 	stw	zero,24(r17)
811196a8:	1110f9c0 	call	81110f9c <memset>
811196ac:	94000317 	ldw	r16,12(r18)
811196b0:	00800484 	movi	r2,18
811196b4:	8c400715 	stw	r17,28(r17)
811196b8:	8d800815 	stw	r22,32(r17)
811196bc:	8d400915 	stw	r21,36(r17)
811196c0:	8d000a15 	stw	r20,40(r17)
811196c4:	8cc00b15 	stw	r19,44(r17)
811196c8:	8080030d 	sth	r2,12(r16)
811196cc:	00800084 	movi	r2,2
811196d0:	80000015 	stw	zero,0(r16)
811196d4:	80000115 	stw	zero,4(r16)
811196d8:	80000215 	stw	zero,8(r16)
811196dc:	80001915 	stw	zero,100(r16)
811196e0:	8080038d 	sth	r2,14(r16)
811196e4:	80000415 	stw	zero,16(r16)
811196e8:	80000515 	stw	zero,20(r16)
811196ec:	80000615 	stw	zero,24(r16)
811196f0:	b80d883a 	mov	r6,r23
811196f4:	000b883a 	mov	r5,zero
811196f8:	81001704 	addi	r4,r16,92
811196fc:	1110f9c0 	call	81110f9c <memset>
81119700:	00800044 	movi	r2,1
81119704:	84000715 	stw	r16,28(r16)
81119708:	85800815 	stw	r22,32(r16)
8111970c:	85400915 	stw	r21,36(r16)
81119710:	85000a15 	stw	r20,40(r16)
81119714:	84c00b15 	stw	r19,44(r16)
81119718:	90800e15 	stw	r2,56(r18)
8111971c:	dfc00817 	ldw	ra,32(sp)
81119720:	ddc00717 	ldw	r23,28(sp)
81119724:	dd800617 	ldw	r22,24(sp)
81119728:	dd400517 	ldw	r21,20(sp)
8111972c:	dd000417 	ldw	r20,16(sp)
81119730:	dcc00317 	ldw	r19,12(sp)
81119734:	dc800217 	ldw	r18,8(sp)
81119738:	dc400117 	ldw	r17,4(sp)
8111973c:	dc000017 	ldw	r16,0(sp)
81119740:	dec00904 	addi	sp,sp,36
81119744:	f800283a 	ret

81119748 <__fp_lock>:
81119748:	0005883a 	mov	r2,zero
8111974c:	f800283a 	ret

81119750 <__sfmoreglue>:
81119750:	defffc04 	addi	sp,sp,-16
81119754:	de00012e 	bgeu	sp,et,8111975c <__sfmoreglue+0xc>
81119758:	003b68fa 	trap	3
8111975c:	dc400115 	stw	r17,4(sp)
81119760:	2c7fffc4 	addi	r17,r5,-1
81119764:	8c401a24 	muli	r17,r17,104
81119768:	dc800215 	stw	r18,8(sp)
8111976c:	2825883a 	mov	r18,r5
81119770:	89401d04 	addi	r5,r17,116
81119774:	dc000015 	stw	r16,0(sp)
81119778:	dfc00315 	stw	ra,12(sp)
8111977c:	11106380 	call	81110638 <_malloc_r>
81119780:	1021883a 	mov	r16,r2
81119784:	10000726 	beq	r2,zero,811197a4 <__sfmoreglue+0x54>
81119788:	11000304 	addi	r4,r2,12
8111978c:	10000015 	stw	zero,0(r2)
81119790:	14800115 	stw	r18,4(r2)
81119794:	11000215 	stw	r4,8(r2)
81119798:	89801a04 	addi	r6,r17,104
8111979c:	000b883a 	mov	r5,zero
811197a0:	1110f9c0 	call	81110f9c <memset>
811197a4:	8005883a 	mov	r2,r16
811197a8:	dfc00317 	ldw	ra,12(sp)
811197ac:	dc800217 	ldw	r18,8(sp)
811197b0:	dc400117 	ldw	r17,4(sp)
811197b4:	dc000017 	ldw	r16,0(sp)
811197b8:	dec00404 	addi	sp,sp,16
811197bc:	f800283a 	ret

811197c0 <__sfp>:
811197c0:	defffb04 	addi	sp,sp,-20
811197c4:	de00012e 	bgeu	sp,et,811197cc <__sfp+0xc>
811197c8:	003b68fa 	trap	3
811197cc:	dc000015 	stw	r16,0(sp)
811197d0:	04204534 	movhi	r16,33044
811197d4:	843a0504 	addi	r16,r16,-6124
811197d8:	dcc00315 	stw	r19,12(sp)
811197dc:	2027883a 	mov	r19,r4
811197e0:	81000017 	ldw	r4,0(r16)
811197e4:	dfc00415 	stw	ra,16(sp)
811197e8:	dc800215 	stw	r18,8(sp)
811197ec:	20800e17 	ldw	r2,56(r4)
811197f0:	dc400115 	stw	r17,4(sp)
811197f4:	1000021e 	bne	r2,zero,81119800 <__sfp+0x40>
811197f8:	11195a40 	call	811195a4 <__sinit.part.1>
811197fc:	81000017 	ldw	r4,0(r16)
81119800:	2480b804 	addi	r18,r4,736
81119804:	047fffc4 	movi	r17,-1
81119808:	91000117 	ldw	r4,4(r18)
8111980c:	94000217 	ldw	r16,8(r18)
81119810:	213fffc4 	addi	r4,r4,-1
81119814:	20000a16 	blt	r4,zero,81119840 <__sfp+0x80>
81119818:	8080030f 	ldh	r2,12(r16)
8111981c:	10000c26 	beq	r2,zero,81119850 <__sfp+0x90>
81119820:	80c01d04 	addi	r3,r16,116
81119824:	00000206 	br	81119830 <__sfp+0x70>
81119828:	18bfe60f 	ldh	r2,-104(r3)
8111982c:	10000826 	beq	r2,zero,81119850 <__sfp+0x90>
81119830:	213fffc4 	addi	r4,r4,-1
81119834:	1c3ffd04 	addi	r16,r3,-12
81119838:	18c01a04 	addi	r3,r3,104
8111983c:	247ffa1e 	bne	r4,r17,81119828 <__reset+0xfb0f9828>
81119840:	90800017 	ldw	r2,0(r18)
81119844:	10001d26 	beq	r2,zero,811198bc <__sfp+0xfc>
81119848:	1025883a 	mov	r18,r2
8111984c:	003fee06 	br	81119808 <__reset+0xfb0f9808>
81119850:	00bfffc4 	movi	r2,-1
81119854:	8080038d 	sth	r2,14(r16)
81119858:	00800044 	movi	r2,1
8111985c:	8080030d 	sth	r2,12(r16)
81119860:	80001915 	stw	zero,100(r16)
81119864:	80000015 	stw	zero,0(r16)
81119868:	80000215 	stw	zero,8(r16)
8111986c:	80000115 	stw	zero,4(r16)
81119870:	80000415 	stw	zero,16(r16)
81119874:	80000515 	stw	zero,20(r16)
81119878:	80000615 	stw	zero,24(r16)
8111987c:	01800204 	movi	r6,8
81119880:	000b883a 	mov	r5,zero
81119884:	81001704 	addi	r4,r16,92
81119888:	1110f9c0 	call	81110f9c <memset>
8111988c:	8005883a 	mov	r2,r16
81119890:	80000c15 	stw	zero,48(r16)
81119894:	80000d15 	stw	zero,52(r16)
81119898:	80001115 	stw	zero,68(r16)
8111989c:	80001215 	stw	zero,72(r16)
811198a0:	dfc00417 	ldw	ra,16(sp)
811198a4:	dcc00317 	ldw	r19,12(sp)
811198a8:	dc800217 	ldw	r18,8(sp)
811198ac:	dc400117 	ldw	r17,4(sp)
811198b0:	dc000017 	ldw	r16,0(sp)
811198b4:	dec00504 	addi	sp,sp,20
811198b8:	f800283a 	ret
811198bc:	01400104 	movi	r5,4
811198c0:	9809883a 	mov	r4,r19
811198c4:	11197500 	call	81119750 <__sfmoreglue>
811198c8:	90800015 	stw	r2,0(r18)
811198cc:	103fde1e 	bne	r2,zero,81119848 <__reset+0xfb0f9848>
811198d0:	00800304 	movi	r2,12
811198d4:	98800015 	stw	r2,0(r19)
811198d8:	0005883a 	mov	r2,zero
811198dc:	003ff006 	br	811198a0 <__reset+0xfb0f98a0>

811198e0 <_cleanup>:
811198e0:	00a04534 	movhi	r2,33044
811198e4:	10ba0504 	addi	r2,r2,-6124
811198e8:	11000017 	ldw	r4,0(r2)
811198ec:	016044b4 	movhi	r5,33042
811198f0:	2944d504 	addi	r5,r5,4948
811198f4:	111a6381 	jmpi	8111a638 <_fwalk_reent>

811198f8 <__sinit>:
811198f8:	20800e17 	ldw	r2,56(r4)
811198fc:	10000126 	beq	r2,zero,81119904 <__sinit+0xc>
81119900:	f800283a 	ret
81119904:	11195a41 	jmpi	811195a4 <__sinit.part.1>

81119908 <__sfp_lock_acquire>:
81119908:	f800283a 	ret

8111990c <__sfp_lock_release>:
8111990c:	f800283a 	ret

81119910 <__sinit_lock_acquire>:
81119910:	f800283a 	ret

81119914 <__sinit_lock_release>:
81119914:	f800283a 	ret

81119918 <__fp_lock_all>:
81119918:	00a04534 	movhi	r2,33044
8111991c:	10ba0604 	addi	r2,r2,-6120
81119920:	11000017 	ldw	r4,0(r2)
81119924:	016044b4 	movhi	r5,33042
81119928:	2965d204 	addi	r5,r5,-26808
8111992c:	111a56c1 	jmpi	8111a56c <_fwalk>

81119930 <__fp_unlock_all>:
81119930:	00a04534 	movhi	r2,33044
81119934:	10ba0604 	addi	r2,r2,-6120
81119938:	11000017 	ldw	r4,0(r2)
8111993c:	016044b4 	movhi	r5,33042
81119940:	29656404 	addi	r5,r5,-27248
81119944:	111a56c1 	jmpi	8111a56c <_fwalk>

81119948 <__sflags>:
81119948:	28800007 	ldb	r2,0(r5)
8111994c:	00c01c84 	movi	r3,114
81119950:	10c02426 	beq	r2,r3,811199e4 <__sflags+0x9c>
81119954:	00c01dc4 	movi	r3,119
81119958:	10c01e26 	beq	r2,r3,811199d4 <__sflags+0x8c>
8111995c:	00c01844 	movi	r3,97
81119960:	10c00426 	beq	r2,r3,81119974 <__sflags+0x2c>
81119964:	00800584 	movi	r2,22
81119968:	20800015 	stw	r2,0(r4)
8111996c:	0005883a 	mov	r2,zero
81119970:	f800283a 	ret
81119974:	02c08204 	movi	r11,520
81119978:	01000044 	movi	r4,1
8111997c:	00804204 	movi	r2,264
81119980:	01c00ac4 	movi	r7,43
81119984:	02bff8c4 	movi	r10,-29
81119988:	027fff04 	movi	r9,-4
8111998c:	02001e04 	movi	r8,120
81119990:	29400044 	addi	r5,r5,1
81119994:	28c00007 	ldb	r3,0(r5)
81119998:	18000626 	beq	r3,zero,811199b4 <__sflags+0x6c>
8111999c:	19c00826 	beq	r3,r7,811199c0 <__sflags+0x78>
811199a0:	1a3ffb1e 	bne	r3,r8,81119990 <__reset+0xfb0f9990>
811199a4:	29400044 	addi	r5,r5,1
811199a8:	28c00007 	ldb	r3,0(r5)
811199ac:	21020014 	ori	r4,r4,2048
811199b0:	183ffa1e 	bne	r3,zero,8111999c <__reset+0xfb0f999c>
811199b4:	22c8b03a 	or	r4,r4,r11
811199b8:	31000015 	stw	r4,0(r6)
811199bc:	f800283a 	ret
811199c0:	1284703a 	and	r2,r2,r10
811199c4:	2248703a 	and	r4,r4,r9
811199c8:	10800414 	ori	r2,r2,16
811199cc:	21000094 	ori	r4,r4,2
811199d0:	003fef06 	br	81119990 <__reset+0xfb0f9990>
811199d4:	02c18004 	movi	r11,1536
811199d8:	01000044 	movi	r4,1
811199dc:	00800204 	movi	r2,8
811199e0:	003fe706 	br	81119980 <__reset+0xfb0f9980>
811199e4:	0017883a 	mov	r11,zero
811199e8:	0009883a 	mov	r4,zero
811199ec:	00800104 	movi	r2,4
811199f0:	003fe306 	br	81119980 <__reset+0xfb0f9980>

811199f4 <_fread_r>:
811199f4:	defff404 	addi	sp,sp,-48
811199f8:	de00012e 	bgeu	sp,et,81119a00 <_fread_r+0xc>
811199fc:	003b68fa 	trap	3
81119a00:	dd800815 	stw	r22,32(sp)
81119a04:	39ad383a 	mul	r22,r7,r6
81119a08:	dc000215 	stw	r16,8(sp)
81119a0c:	dfc00b15 	stw	ra,44(sp)
81119a10:	df000a15 	stw	fp,40(sp)
81119a14:	ddc00915 	stw	r23,36(sp)
81119a18:	dd400715 	stw	r21,28(sp)
81119a1c:	dd000615 	stw	r20,24(sp)
81119a20:	dcc00515 	stw	r19,20(sp)
81119a24:	dc800415 	stw	r18,16(sp)
81119a28:	dc400315 	stw	r17,12(sp)
81119a2c:	dc000c17 	ldw	r16,48(sp)
81119a30:	b0003b26 	beq	r22,zero,81119b20 <_fread_r+0x12c>
81119a34:	302f883a 	mov	r23,r6
81119a38:	382b883a 	mov	r21,r7
81119a3c:	2029883a 	mov	r20,r4
81119a40:	2827883a 	mov	r19,r5
81119a44:	20000226 	beq	r4,zero,81119a50 <_fread_r+0x5c>
81119a48:	20800e17 	ldw	r2,56(r4)
81119a4c:	10006e26 	beq	r2,zero,81119c08 <_fread_r+0x214>
81119a50:	8080030b 	ldhu	r2,12(r16)
81119a54:	10c8000c 	andi	r3,r2,8192
81119a58:	1800061e 	bne	r3,zero,81119a74 <_fread_r+0x80>
81119a5c:	81001917 	ldw	r4,100(r16)
81119a60:	00f7ffc4 	movi	r3,-8193
81119a64:	10880014 	ori	r2,r2,8192
81119a68:	20c6703a 	and	r3,r4,r3
81119a6c:	8080030d 	sth	r2,12(r16)
81119a70:	80c01915 	stw	r3,100(r16)
81119a74:	84400117 	ldw	r17,4(r16)
81119a78:	88005f16 	blt	r17,zero,81119bf8 <_fread_r+0x204>
81119a7c:	8809883a 	mov	r4,r17
81119a80:	1080008c 	andi	r2,r2,2
81119a84:	1000281e 	bne	r2,zero,81119b28 <_fread_r+0x134>
81119a88:	b025883a 	mov	r18,r22
81119a8c:	00000b06 	br	81119abc <_fread_r+0xc8>
81119a90:	1110e4c0 	call	81110e4c <memcpy>
81119a94:	80800017 	ldw	r2,0(r16)
81119a98:	9c67883a 	add	r19,r19,r17
81119a9c:	9465c83a 	sub	r18,r18,r17
81119aa0:	1463883a 	add	r17,r2,r17
81119aa4:	800b883a 	mov	r5,r16
81119aa8:	a009883a 	mov	r4,r20
81119aac:	84400015 	stw	r17,0(r16)
81119ab0:	11112a00 	call	811112a0 <__srefill_r>
81119ab4:	10004c1e 	bne	r2,zero,81119be8 <_fread_r+0x1f4>
81119ab8:	84400117 	ldw	r17,4(r16)
81119abc:	880d883a 	mov	r6,r17
81119ac0:	9809883a 	mov	r4,r19
81119ac4:	81400017 	ldw	r5,0(r16)
81119ac8:	8cbff136 	bltu	r17,r18,81119a90 <__reset+0xfb0f9a90>
81119acc:	900d883a 	mov	r6,r18
81119ad0:	1110e4c0 	call	81110e4c <memcpy>
81119ad4:	80c00117 	ldw	r3,4(r16)
81119ad8:	81000017 	ldw	r4,0(r16)
81119adc:	a805883a 	mov	r2,r21
81119ae0:	1c87c83a 	sub	r3,r3,r18
81119ae4:	24a5883a 	add	r18,r4,r18
81119ae8:	80c00115 	stw	r3,4(r16)
81119aec:	84800015 	stw	r18,0(r16)
81119af0:	dfc00b17 	ldw	ra,44(sp)
81119af4:	df000a17 	ldw	fp,40(sp)
81119af8:	ddc00917 	ldw	r23,36(sp)
81119afc:	dd800817 	ldw	r22,32(sp)
81119b00:	dd400717 	ldw	r21,28(sp)
81119b04:	dd000617 	ldw	r20,24(sp)
81119b08:	dcc00517 	ldw	r19,20(sp)
81119b0c:	dc800417 	ldw	r18,16(sp)
81119b10:	dc400317 	ldw	r17,12(sp)
81119b14:	dc000217 	ldw	r16,8(sp)
81119b18:	dec00c04 	addi	sp,sp,48
81119b1c:	f800283a 	ret
81119b20:	0005883a 	mov	r2,zero
81119b24:	003ff206 	br	81119af0 <__reset+0xfb0f9af0>
81119b28:	b007883a 	mov	r3,r22
81119b2c:	2580012e 	bgeu	r4,r22,81119b34 <_fread_r+0x140>
81119b30:	2007883a 	mov	r3,r4
81119b34:	81400017 	ldw	r5,0(r16)
81119b38:	180d883a 	mov	r6,r3
81119b3c:	9809883a 	mov	r4,r19
81119b40:	d8c00115 	stw	r3,4(sp)
81119b44:	1110e4c0 	call	81110e4c <memcpy>
81119b48:	d8c00117 	ldw	r3,4(sp)
81119b4c:	84400017 	ldw	r17,0(r16)
81119b50:	80800117 	ldw	r2,4(r16)
81119b54:	81400c17 	ldw	r5,48(r16)
81119b58:	88e3883a 	add	r17,r17,r3
81119b5c:	10c5c83a 	sub	r2,r2,r3
81119b60:	84400015 	stw	r17,0(r16)
81119b64:	80800115 	stw	r2,4(r16)
81119b68:	b0e5c83a 	sub	r18,r22,r3
81119b6c:	28002b26 	beq	r5,zero,81119c1c <_fread_r+0x228>
81119b70:	90002b26 	beq	r18,zero,81119c20 <_fread_r+0x22c>
81119b74:	80801004 	addi	r2,r16,64
81119b78:	28800526 	beq	r5,r2,81119b90 <_fread_r+0x19c>
81119b7c:	a009883a 	mov	r4,r20
81119b80:	d8c00115 	stw	r3,4(sp)
81119b84:	1119d900 	call	81119d90 <_free_r>
81119b88:	d8c00117 	ldw	r3,4(sp)
81119b8c:	84400017 	ldw	r17,0(r16)
81119b90:	80000c15 	stw	zero,48(r16)
81119b94:	80800517 	ldw	r2,20(r16)
81119b98:	87000417 	ldw	fp,16(r16)
81119b9c:	98e7883a 	add	r19,r19,r3
81119ba0:	d8800015 	stw	r2,0(sp)
81119ba4:	00000106 	br	81119bac <_fread_r+0x1b8>
81119ba8:	90001d26 	beq	r18,zero,81119c20 <_fread_r+0x22c>
81119bac:	84c00415 	stw	r19,16(r16)
81119bb0:	84800515 	stw	r18,20(r16)
81119bb4:	84c00015 	stw	r19,0(r16)
81119bb8:	a009883a 	mov	r4,r20
81119bbc:	800b883a 	mov	r5,r16
81119bc0:	11112a00 	call	811112a0 <__srefill_r>
81119bc4:	d9000017 	ldw	r4,0(sp)
81119bc8:	80c00117 	ldw	r3,4(r16)
81119bcc:	87000415 	stw	fp,16(r16)
81119bd0:	81000515 	stw	r4,20(r16)
81119bd4:	84400015 	stw	r17,0(r16)
81119bd8:	80000115 	stw	zero,4(r16)
81119bdc:	90e5c83a 	sub	r18,r18,r3
81119be0:	98e7883a 	add	r19,r19,r3
81119be4:	103ff026 	beq	r2,zero,81119ba8 <__reset+0xfb0f9ba8>
81119be8:	b80b883a 	mov	r5,r23
81119bec:	b489c83a 	sub	r4,r22,r18
81119bf0:	11232780 	call	81123278 <__udivsi3>
81119bf4:	003fbe06 	br	81119af0 <__reset+0xfb0f9af0>
81119bf8:	80000115 	stw	zero,4(r16)
81119bfc:	0009883a 	mov	r4,zero
81119c00:	0023883a 	mov	r17,zero
81119c04:	003f9e06 	br	81119a80 <__reset+0xfb0f9a80>
81119c08:	11198f80 	call	811198f8 <__sinit>
81119c0c:	8080030b 	ldhu	r2,12(r16)
81119c10:	10c8000c 	andi	r3,r2,8192
81119c14:	183f971e 	bne	r3,zero,81119a74 <__reset+0xfb0f9a74>
81119c18:	003f9006 	br	81119a5c <__reset+0xfb0f9a5c>
81119c1c:	903fdd1e 	bne	r18,zero,81119b94 <__reset+0xfb0f9b94>
81119c20:	a805883a 	mov	r2,r21
81119c24:	003fb206 	br	81119af0 <__reset+0xfb0f9af0>

81119c28 <fread>:
81119c28:	defffe04 	addi	sp,sp,-8
81119c2c:	00a04534 	movhi	r2,33044
81119c30:	de00012e 	bgeu	sp,et,81119c38 <fread+0x10>
81119c34:	003b68fa 	trap	3
81119c38:	10ba0604 	addi	r2,r2,-6120
81119c3c:	d9c00015 	stw	r7,0(sp)
81119c40:	300f883a 	mov	r7,r6
81119c44:	280d883a 	mov	r6,r5
81119c48:	200b883a 	mov	r5,r4
81119c4c:	11000017 	ldw	r4,0(r2)
81119c50:	dfc00115 	stw	ra,4(sp)
81119c54:	11199f40 	call	811199f4 <_fread_r>
81119c58:	dfc00117 	ldw	ra,4(sp)
81119c5c:	dec00204 	addi	sp,sp,8
81119c60:	f800283a 	ret

81119c64 <_malloc_trim_r>:
81119c64:	defffb04 	addi	sp,sp,-20
81119c68:	de00012e 	bgeu	sp,et,81119c70 <_malloc_trim_r+0xc>
81119c6c:	003b68fa 	trap	3
81119c70:	dcc00315 	stw	r19,12(sp)
81119c74:	04e04534 	movhi	r19,33044
81119c78:	dc800215 	stw	r18,8(sp)
81119c7c:	dc400115 	stw	r17,4(sp)
81119c80:	dc000015 	stw	r16,0(sp)
81119c84:	dfc00415 	stw	ra,16(sp)
81119c88:	2821883a 	mov	r16,r5
81119c8c:	9cf3eb04 	addi	r19,r19,-12372
81119c90:	2025883a 	mov	r18,r4
81119c94:	11266c80 	call	811266c8 <__malloc_lock>
81119c98:	98800217 	ldw	r2,8(r19)
81119c9c:	14400117 	ldw	r17,4(r2)
81119ca0:	00bfff04 	movi	r2,-4
81119ca4:	88a2703a 	and	r17,r17,r2
81119ca8:	8c21c83a 	sub	r16,r17,r16
81119cac:	8403fbc4 	addi	r16,r16,4079
81119cb0:	8020d33a 	srli	r16,r16,12
81119cb4:	0083ffc4 	movi	r2,4095
81119cb8:	843fffc4 	addi	r16,r16,-1
81119cbc:	8020933a 	slli	r16,r16,12
81119cc0:	1400060e 	bge	r2,r16,81119cdc <_malloc_trim_r+0x78>
81119cc4:	000b883a 	mov	r5,zero
81119cc8:	9009883a 	mov	r4,r18
81119ccc:	111147c0 	call	8111147c <_sbrk_r>
81119cd0:	98c00217 	ldw	r3,8(r19)
81119cd4:	1c47883a 	add	r3,r3,r17
81119cd8:	10c00a26 	beq	r2,r3,81119d04 <_malloc_trim_r+0xa0>
81119cdc:	9009883a 	mov	r4,r18
81119ce0:	11267f00 	call	811267f0 <__malloc_unlock>
81119ce4:	0005883a 	mov	r2,zero
81119ce8:	dfc00417 	ldw	ra,16(sp)
81119cec:	dcc00317 	ldw	r19,12(sp)
81119cf0:	dc800217 	ldw	r18,8(sp)
81119cf4:	dc400117 	ldw	r17,4(sp)
81119cf8:	dc000017 	ldw	r16,0(sp)
81119cfc:	dec00504 	addi	sp,sp,20
81119d00:	f800283a 	ret
81119d04:	040bc83a 	sub	r5,zero,r16
81119d08:	9009883a 	mov	r4,r18
81119d0c:	111147c0 	call	8111147c <_sbrk_r>
81119d10:	00ffffc4 	movi	r3,-1
81119d14:	10c00d26 	beq	r2,r3,81119d4c <_malloc_trim_r+0xe8>
81119d18:	00e04534 	movhi	r3,33044
81119d1c:	18fac104 	addi	r3,r3,-5372
81119d20:	18800017 	ldw	r2,0(r3)
81119d24:	99000217 	ldw	r4,8(r19)
81119d28:	8c23c83a 	sub	r17,r17,r16
81119d2c:	8c400054 	ori	r17,r17,1
81119d30:	1421c83a 	sub	r16,r2,r16
81119d34:	24400115 	stw	r17,4(r4)
81119d38:	9009883a 	mov	r4,r18
81119d3c:	1c000015 	stw	r16,0(r3)
81119d40:	11267f00 	call	811267f0 <__malloc_unlock>
81119d44:	00800044 	movi	r2,1
81119d48:	003fe706 	br	81119ce8 <__reset+0xfb0f9ce8>
81119d4c:	000b883a 	mov	r5,zero
81119d50:	9009883a 	mov	r4,r18
81119d54:	111147c0 	call	8111147c <_sbrk_r>
81119d58:	99000217 	ldw	r4,8(r19)
81119d5c:	014003c4 	movi	r5,15
81119d60:	1107c83a 	sub	r3,r2,r4
81119d64:	28ffdd0e 	bge	r5,r3,81119cdc <__reset+0xfb0f9cdc>
81119d68:	01604534 	movhi	r5,33044
81119d6c:	297a0704 	addi	r5,r5,-6116
81119d70:	29400017 	ldw	r5,0(r5)
81119d74:	18c00054 	ori	r3,r3,1
81119d78:	20c00115 	stw	r3,4(r4)
81119d7c:	00e04534 	movhi	r3,33044
81119d80:	1145c83a 	sub	r2,r2,r5
81119d84:	18fac104 	addi	r3,r3,-5372
81119d88:	18800015 	stw	r2,0(r3)
81119d8c:	003fd306 	br	81119cdc <__reset+0xfb0f9cdc>

81119d90 <_free_r>:
81119d90:	28004326 	beq	r5,zero,81119ea0 <_free_r+0x110>
81119d94:	defffd04 	addi	sp,sp,-12
81119d98:	de00012e 	bgeu	sp,et,81119da0 <_free_r+0x10>
81119d9c:	003b68fa 	trap	3
81119da0:	dc400115 	stw	r17,4(sp)
81119da4:	dc000015 	stw	r16,0(sp)
81119da8:	2023883a 	mov	r17,r4
81119dac:	2821883a 	mov	r16,r5
81119db0:	dfc00215 	stw	ra,8(sp)
81119db4:	11266c80 	call	811266c8 <__malloc_lock>
81119db8:	81ffff17 	ldw	r7,-4(r16)
81119dbc:	00bfff84 	movi	r2,-2
81119dc0:	01204534 	movhi	r4,33044
81119dc4:	81bffe04 	addi	r6,r16,-8
81119dc8:	3884703a 	and	r2,r7,r2
81119dcc:	2133eb04 	addi	r4,r4,-12372
81119dd0:	308b883a 	add	r5,r6,r2
81119dd4:	2a400117 	ldw	r9,4(r5)
81119dd8:	22000217 	ldw	r8,8(r4)
81119ddc:	00ffff04 	movi	r3,-4
81119de0:	48c6703a 	and	r3,r9,r3
81119de4:	2a005726 	beq	r5,r8,81119f44 <_free_r+0x1b4>
81119de8:	28c00115 	stw	r3,4(r5)
81119dec:	39c0004c 	andi	r7,r7,1
81119df0:	3800091e 	bne	r7,zero,81119e18 <_free_r+0x88>
81119df4:	823ffe17 	ldw	r8,-8(r16)
81119df8:	22400204 	addi	r9,r4,8
81119dfc:	320dc83a 	sub	r6,r6,r8
81119e00:	31c00217 	ldw	r7,8(r6)
81119e04:	1205883a 	add	r2,r2,r8
81119e08:	3a406526 	beq	r7,r9,81119fa0 <_free_r+0x210>
81119e0c:	32000317 	ldw	r8,12(r6)
81119e10:	3a000315 	stw	r8,12(r7)
81119e14:	41c00215 	stw	r7,8(r8)
81119e18:	28cf883a 	add	r7,r5,r3
81119e1c:	39c00117 	ldw	r7,4(r7)
81119e20:	39c0004c 	andi	r7,r7,1
81119e24:	38003a26 	beq	r7,zero,81119f10 <_free_r+0x180>
81119e28:	10c00054 	ori	r3,r2,1
81119e2c:	30c00115 	stw	r3,4(r6)
81119e30:	3087883a 	add	r3,r6,r2
81119e34:	18800015 	stw	r2,0(r3)
81119e38:	00c07fc4 	movi	r3,511
81119e3c:	18801936 	bltu	r3,r2,81119ea4 <_free_r+0x114>
81119e40:	1004d0fa 	srli	r2,r2,3
81119e44:	01c00044 	movi	r7,1
81119e48:	21400117 	ldw	r5,4(r4)
81119e4c:	10c00044 	addi	r3,r2,1
81119e50:	18c7883a 	add	r3,r3,r3
81119e54:	1005d0ba 	srai	r2,r2,2
81119e58:	18c7883a 	add	r3,r3,r3
81119e5c:	18c7883a 	add	r3,r3,r3
81119e60:	1907883a 	add	r3,r3,r4
81119e64:	3884983a 	sll	r2,r7,r2
81119e68:	19c00017 	ldw	r7,0(r3)
81119e6c:	1a3ffe04 	addi	r8,r3,-8
81119e70:	1144b03a 	or	r2,r2,r5
81119e74:	32000315 	stw	r8,12(r6)
81119e78:	31c00215 	stw	r7,8(r6)
81119e7c:	20800115 	stw	r2,4(r4)
81119e80:	19800015 	stw	r6,0(r3)
81119e84:	39800315 	stw	r6,12(r7)
81119e88:	8809883a 	mov	r4,r17
81119e8c:	dfc00217 	ldw	ra,8(sp)
81119e90:	dc400117 	ldw	r17,4(sp)
81119e94:	dc000017 	ldw	r16,0(sp)
81119e98:	dec00304 	addi	sp,sp,12
81119e9c:	11267f01 	jmpi	811267f0 <__malloc_unlock>
81119ea0:	f800283a 	ret
81119ea4:	100ad27a 	srli	r5,r2,9
81119ea8:	00c00104 	movi	r3,4
81119eac:	19404a36 	bltu	r3,r5,81119fd8 <_free_r+0x248>
81119eb0:	100ad1ba 	srli	r5,r2,6
81119eb4:	28c00e44 	addi	r3,r5,57
81119eb8:	18c7883a 	add	r3,r3,r3
81119ebc:	29400e04 	addi	r5,r5,56
81119ec0:	18c7883a 	add	r3,r3,r3
81119ec4:	18c7883a 	add	r3,r3,r3
81119ec8:	1909883a 	add	r4,r3,r4
81119ecc:	20c00017 	ldw	r3,0(r4)
81119ed0:	01e04534 	movhi	r7,33044
81119ed4:	213ffe04 	addi	r4,r4,-8
81119ed8:	39f3eb04 	addi	r7,r7,-12372
81119edc:	20c04426 	beq	r4,r3,81119ff0 <_free_r+0x260>
81119ee0:	01ffff04 	movi	r7,-4
81119ee4:	19400117 	ldw	r5,4(r3)
81119ee8:	29ca703a 	and	r5,r5,r7
81119eec:	1140022e 	bgeu	r2,r5,81119ef8 <_free_r+0x168>
81119ef0:	18c00217 	ldw	r3,8(r3)
81119ef4:	20fffb1e 	bne	r4,r3,81119ee4 <__reset+0xfb0f9ee4>
81119ef8:	19000317 	ldw	r4,12(r3)
81119efc:	31000315 	stw	r4,12(r6)
81119f00:	30c00215 	stw	r3,8(r6)
81119f04:	21800215 	stw	r6,8(r4)
81119f08:	19800315 	stw	r6,12(r3)
81119f0c:	003fde06 	br	81119e88 <__reset+0xfb0f9e88>
81119f10:	29c00217 	ldw	r7,8(r5)
81119f14:	10c5883a 	add	r2,r2,r3
81119f18:	00e04534 	movhi	r3,33044
81119f1c:	18f3ed04 	addi	r3,r3,-12364
81119f20:	38c03b26 	beq	r7,r3,8111a010 <_free_r+0x280>
81119f24:	2a000317 	ldw	r8,12(r5)
81119f28:	11400054 	ori	r5,r2,1
81119f2c:	3087883a 	add	r3,r6,r2
81119f30:	3a000315 	stw	r8,12(r7)
81119f34:	41c00215 	stw	r7,8(r8)
81119f38:	31400115 	stw	r5,4(r6)
81119f3c:	18800015 	stw	r2,0(r3)
81119f40:	003fbd06 	br	81119e38 <__reset+0xfb0f9e38>
81119f44:	39c0004c 	andi	r7,r7,1
81119f48:	10c5883a 	add	r2,r2,r3
81119f4c:	3800071e 	bne	r7,zero,81119f6c <_free_r+0x1dc>
81119f50:	81fffe17 	ldw	r7,-8(r16)
81119f54:	31cdc83a 	sub	r6,r6,r7
81119f58:	30c00317 	ldw	r3,12(r6)
81119f5c:	31400217 	ldw	r5,8(r6)
81119f60:	11c5883a 	add	r2,r2,r7
81119f64:	28c00315 	stw	r3,12(r5)
81119f68:	19400215 	stw	r5,8(r3)
81119f6c:	10c00054 	ori	r3,r2,1
81119f70:	30c00115 	stw	r3,4(r6)
81119f74:	00e04534 	movhi	r3,33044
81119f78:	18fa0804 	addi	r3,r3,-6112
81119f7c:	18c00017 	ldw	r3,0(r3)
81119f80:	21800215 	stw	r6,8(r4)
81119f84:	10ffc036 	bltu	r2,r3,81119e88 <__reset+0xfb0f9e88>
81119f88:	00a04534 	movhi	r2,33044
81119f8c:	10ba6204 	addi	r2,r2,-5752
81119f90:	11400017 	ldw	r5,0(r2)
81119f94:	8809883a 	mov	r4,r17
81119f98:	1119c640 	call	81119c64 <_malloc_trim_r>
81119f9c:	003fba06 	br	81119e88 <__reset+0xfb0f9e88>
81119fa0:	28c9883a 	add	r4,r5,r3
81119fa4:	21000117 	ldw	r4,4(r4)
81119fa8:	2100004c 	andi	r4,r4,1
81119fac:	2000391e 	bne	r4,zero,8111a094 <_free_r+0x304>
81119fb0:	29c00217 	ldw	r7,8(r5)
81119fb4:	29000317 	ldw	r4,12(r5)
81119fb8:	1885883a 	add	r2,r3,r2
81119fbc:	10c00054 	ori	r3,r2,1
81119fc0:	39000315 	stw	r4,12(r7)
81119fc4:	21c00215 	stw	r7,8(r4)
81119fc8:	30c00115 	stw	r3,4(r6)
81119fcc:	308d883a 	add	r6,r6,r2
81119fd0:	30800015 	stw	r2,0(r6)
81119fd4:	003fac06 	br	81119e88 <__reset+0xfb0f9e88>
81119fd8:	00c00504 	movi	r3,20
81119fdc:	19401536 	bltu	r3,r5,8111a034 <_free_r+0x2a4>
81119fe0:	28c01704 	addi	r3,r5,92
81119fe4:	18c7883a 	add	r3,r3,r3
81119fe8:	294016c4 	addi	r5,r5,91
81119fec:	003fb406 	br	81119ec0 <__reset+0xfb0f9ec0>
81119ff0:	280bd0ba 	srai	r5,r5,2
81119ff4:	00c00044 	movi	r3,1
81119ff8:	38800117 	ldw	r2,4(r7)
81119ffc:	194a983a 	sll	r5,r3,r5
8111a000:	2007883a 	mov	r3,r4
8111a004:	2884b03a 	or	r2,r5,r2
8111a008:	38800115 	stw	r2,4(r7)
8111a00c:	003fbb06 	br	81119efc <__reset+0xfb0f9efc>
8111a010:	21800515 	stw	r6,20(r4)
8111a014:	21800415 	stw	r6,16(r4)
8111a018:	10c00054 	ori	r3,r2,1
8111a01c:	31c00315 	stw	r7,12(r6)
8111a020:	31c00215 	stw	r7,8(r6)
8111a024:	30c00115 	stw	r3,4(r6)
8111a028:	308d883a 	add	r6,r6,r2
8111a02c:	30800015 	stw	r2,0(r6)
8111a030:	003f9506 	br	81119e88 <__reset+0xfb0f9e88>
8111a034:	00c01504 	movi	r3,84
8111a038:	19400536 	bltu	r3,r5,8111a050 <_free_r+0x2c0>
8111a03c:	100ad33a 	srli	r5,r2,12
8111a040:	28c01bc4 	addi	r3,r5,111
8111a044:	18c7883a 	add	r3,r3,r3
8111a048:	29401b84 	addi	r5,r5,110
8111a04c:	003f9c06 	br	81119ec0 <__reset+0xfb0f9ec0>
8111a050:	00c05504 	movi	r3,340
8111a054:	19400536 	bltu	r3,r5,8111a06c <_free_r+0x2dc>
8111a058:	100ad3fa 	srli	r5,r2,15
8111a05c:	28c01e04 	addi	r3,r5,120
8111a060:	18c7883a 	add	r3,r3,r3
8111a064:	29401dc4 	addi	r5,r5,119
8111a068:	003f9506 	br	81119ec0 <__reset+0xfb0f9ec0>
8111a06c:	00c15504 	movi	r3,1364
8111a070:	19400536 	bltu	r3,r5,8111a088 <_free_r+0x2f8>
8111a074:	100ad4ba 	srli	r5,r2,18
8111a078:	28c01f44 	addi	r3,r5,125
8111a07c:	18c7883a 	add	r3,r3,r3
8111a080:	29401f04 	addi	r5,r5,124
8111a084:	003f8e06 	br	81119ec0 <__reset+0xfb0f9ec0>
8111a088:	00c03f84 	movi	r3,254
8111a08c:	01401f84 	movi	r5,126
8111a090:	003f8b06 	br	81119ec0 <__reset+0xfb0f9ec0>
8111a094:	10c00054 	ori	r3,r2,1
8111a098:	30c00115 	stw	r3,4(r6)
8111a09c:	308d883a 	add	r6,r6,r2
8111a0a0:	30800015 	stw	r2,0(r6)
8111a0a4:	003f7806 	br	81119e88 <__reset+0xfb0f9e88>

8111a0a8 <__sfvwrite_r>:
8111a0a8:	30800217 	ldw	r2,8(r6)
8111a0ac:	10006926 	beq	r2,zero,8111a254 <__sfvwrite_r+0x1ac>
8111a0b0:	defff404 	addi	sp,sp,-48
8111a0b4:	de00012e 	bgeu	sp,et,8111a0bc <__sfvwrite_r+0x14>
8111a0b8:	003b68fa 	trap	3
8111a0bc:	28c0030b 	ldhu	r3,12(r5)
8111a0c0:	dd400715 	stw	r21,28(sp)
8111a0c4:	dd000615 	stw	r20,24(sp)
8111a0c8:	dc000215 	stw	r16,8(sp)
8111a0cc:	dfc00b15 	stw	ra,44(sp)
8111a0d0:	df000a15 	stw	fp,40(sp)
8111a0d4:	ddc00915 	stw	r23,36(sp)
8111a0d8:	dd800815 	stw	r22,32(sp)
8111a0dc:	dcc00515 	stw	r19,20(sp)
8111a0e0:	dc800415 	stw	r18,16(sp)
8111a0e4:	dc400315 	stw	r17,12(sp)
8111a0e8:	1880020c 	andi	r2,r3,8
8111a0ec:	2821883a 	mov	r16,r5
8111a0f0:	202b883a 	mov	r21,r4
8111a0f4:	3029883a 	mov	r20,r6
8111a0f8:	10002726 	beq	r2,zero,8111a198 <__sfvwrite_r+0xf0>
8111a0fc:	28800417 	ldw	r2,16(r5)
8111a100:	10002526 	beq	r2,zero,8111a198 <__sfvwrite_r+0xf0>
8111a104:	1880008c 	andi	r2,r3,2
8111a108:	a4400017 	ldw	r17,0(r20)
8111a10c:	10002a26 	beq	r2,zero,8111a1b8 <__sfvwrite_r+0x110>
8111a110:	05a00034 	movhi	r22,32768
8111a114:	0027883a 	mov	r19,zero
8111a118:	0025883a 	mov	r18,zero
8111a11c:	b5bf0004 	addi	r22,r22,-1024
8111a120:	980d883a 	mov	r6,r19
8111a124:	a809883a 	mov	r4,r21
8111a128:	90004626 	beq	r18,zero,8111a244 <__sfvwrite_r+0x19c>
8111a12c:	900f883a 	mov	r7,r18
8111a130:	b480022e 	bgeu	r22,r18,8111a13c <__sfvwrite_r+0x94>
8111a134:	01e00034 	movhi	r7,32768
8111a138:	39ff0004 	addi	r7,r7,-1024
8111a13c:	80800917 	ldw	r2,36(r16)
8111a140:	81400717 	ldw	r5,28(r16)
8111a144:	103ee83a 	callr	r2
8111a148:	0080570e 	bge	zero,r2,8111a2a8 <__sfvwrite_r+0x200>
8111a14c:	a0c00217 	ldw	r3,8(r20)
8111a150:	98a7883a 	add	r19,r19,r2
8111a154:	90a5c83a 	sub	r18,r18,r2
8111a158:	1885c83a 	sub	r2,r3,r2
8111a15c:	a0800215 	stw	r2,8(r20)
8111a160:	103fef1e 	bne	r2,zero,8111a120 <__reset+0xfb0fa120>
8111a164:	0005883a 	mov	r2,zero
8111a168:	dfc00b17 	ldw	ra,44(sp)
8111a16c:	df000a17 	ldw	fp,40(sp)
8111a170:	ddc00917 	ldw	r23,36(sp)
8111a174:	dd800817 	ldw	r22,32(sp)
8111a178:	dd400717 	ldw	r21,28(sp)
8111a17c:	dd000617 	ldw	r20,24(sp)
8111a180:	dcc00517 	ldw	r19,20(sp)
8111a184:	dc800417 	ldw	r18,16(sp)
8111a188:	dc400317 	ldw	r17,12(sp)
8111a18c:	dc000217 	ldw	r16,8(sp)
8111a190:	dec00c04 	addi	sp,sp,48
8111a194:	f800283a 	ret
8111a198:	800b883a 	mov	r5,r16
8111a19c:	a809883a 	mov	r4,r21
8111a1a0:	11178880 	call	81117888 <__swsetup_r>
8111a1a4:	1000eb1e 	bne	r2,zero,8111a554 <__sfvwrite_r+0x4ac>
8111a1a8:	80c0030b 	ldhu	r3,12(r16)
8111a1ac:	a4400017 	ldw	r17,0(r20)
8111a1b0:	1880008c 	andi	r2,r3,2
8111a1b4:	103fd61e 	bne	r2,zero,8111a110 <__reset+0xfb0fa110>
8111a1b8:	1880004c 	andi	r2,r3,1
8111a1bc:	10003f1e 	bne	r2,zero,8111a2bc <__sfvwrite_r+0x214>
8111a1c0:	0039883a 	mov	fp,zero
8111a1c4:	0025883a 	mov	r18,zero
8111a1c8:	90001a26 	beq	r18,zero,8111a234 <__sfvwrite_r+0x18c>
8111a1cc:	1880800c 	andi	r2,r3,512
8111a1d0:	84c00217 	ldw	r19,8(r16)
8111a1d4:	10002126 	beq	r2,zero,8111a25c <__sfvwrite_r+0x1b4>
8111a1d8:	982f883a 	mov	r23,r19
8111a1dc:	94c09336 	bltu	r18,r19,8111a42c <__sfvwrite_r+0x384>
8111a1e0:	1881200c 	andi	r2,r3,1152
8111a1e4:	10009e1e 	bne	r2,zero,8111a460 <__sfvwrite_r+0x3b8>
8111a1e8:	81000017 	ldw	r4,0(r16)
8111a1ec:	b80d883a 	mov	r6,r23
8111a1f0:	e00b883a 	mov	r5,fp
8111a1f4:	111ac040 	call	8111ac04 <memmove>
8111a1f8:	80c00217 	ldw	r3,8(r16)
8111a1fc:	81000017 	ldw	r4,0(r16)
8111a200:	9005883a 	mov	r2,r18
8111a204:	1ce7c83a 	sub	r19,r3,r19
8111a208:	25cf883a 	add	r7,r4,r23
8111a20c:	84c00215 	stw	r19,8(r16)
8111a210:	81c00015 	stw	r7,0(r16)
8111a214:	a0c00217 	ldw	r3,8(r20)
8111a218:	e0b9883a 	add	fp,fp,r2
8111a21c:	90a5c83a 	sub	r18,r18,r2
8111a220:	18a7c83a 	sub	r19,r3,r2
8111a224:	a4c00215 	stw	r19,8(r20)
8111a228:	983fce26 	beq	r19,zero,8111a164 <__reset+0xfb0fa164>
8111a22c:	80c0030b 	ldhu	r3,12(r16)
8111a230:	903fe61e 	bne	r18,zero,8111a1cc <__reset+0xfb0fa1cc>
8111a234:	8f000017 	ldw	fp,0(r17)
8111a238:	8c800117 	ldw	r18,4(r17)
8111a23c:	8c400204 	addi	r17,r17,8
8111a240:	003fe106 	br	8111a1c8 <__reset+0xfb0fa1c8>
8111a244:	8cc00017 	ldw	r19,0(r17)
8111a248:	8c800117 	ldw	r18,4(r17)
8111a24c:	8c400204 	addi	r17,r17,8
8111a250:	003fb306 	br	8111a120 <__reset+0xfb0fa120>
8111a254:	0005883a 	mov	r2,zero
8111a258:	f800283a 	ret
8111a25c:	81000017 	ldw	r4,0(r16)
8111a260:	80800417 	ldw	r2,16(r16)
8111a264:	11005736 	bltu	r2,r4,8111a3c4 <__sfvwrite_r+0x31c>
8111a268:	85c00517 	ldw	r23,20(r16)
8111a26c:	95c05536 	bltu	r18,r23,8111a3c4 <__sfvwrite_r+0x31c>
8111a270:	00a00034 	movhi	r2,32768
8111a274:	10bfffc4 	addi	r2,r2,-1
8111a278:	9009883a 	mov	r4,r18
8111a27c:	1480012e 	bgeu	r2,r18,8111a284 <__sfvwrite_r+0x1dc>
8111a280:	1009883a 	mov	r4,r2
8111a284:	b80b883a 	mov	r5,r23
8111a288:	11231800 	call	81123180 <__divsi3>
8111a28c:	15cf383a 	mul	r7,r2,r23
8111a290:	81400717 	ldw	r5,28(r16)
8111a294:	80800917 	ldw	r2,36(r16)
8111a298:	e00d883a 	mov	r6,fp
8111a29c:	a809883a 	mov	r4,r21
8111a2a0:	103ee83a 	callr	r2
8111a2a4:	00bfdb16 	blt	zero,r2,8111a214 <__reset+0xfb0fa214>
8111a2a8:	8080030b 	ldhu	r2,12(r16)
8111a2ac:	10801014 	ori	r2,r2,64
8111a2b0:	8080030d 	sth	r2,12(r16)
8111a2b4:	00bfffc4 	movi	r2,-1
8111a2b8:	003fab06 	br	8111a168 <__reset+0xfb0fa168>
8111a2bc:	0027883a 	mov	r19,zero
8111a2c0:	0011883a 	mov	r8,zero
8111a2c4:	0039883a 	mov	fp,zero
8111a2c8:	0025883a 	mov	r18,zero
8111a2cc:	90001f26 	beq	r18,zero,8111a34c <__sfvwrite_r+0x2a4>
8111a2d0:	40005a26 	beq	r8,zero,8111a43c <__sfvwrite_r+0x394>
8111a2d4:	982d883a 	mov	r22,r19
8111a2d8:	94c0012e 	bgeu	r18,r19,8111a2e0 <__sfvwrite_r+0x238>
8111a2dc:	902d883a 	mov	r22,r18
8111a2e0:	81000017 	ldw	r4,0(r16)
8111a2e4:	80800417 	ldw	r2,16(r16)
8111a2e8:	b02f883a 	mov	r23,r22
8111a2ec:	81c00517 	ldw	r7,20(r16)
8111a2f0:	1100032e 	bgeu	r2,r4,8111a300 <__sfvwrite_r+0x258>
8111a2f4:	80c00217 	ldw	r3,8(r16)
8111a2f8:	38c7883a 	add	r3,r7,r3
8111a2fc:	1d801816 	blt	r3,r22,8111a360 <__sfvwrite_r+0x2b8>
8111a300:	b1c03e16 	blt	r22,r7,8111a3fc <__sfvwrite_r+0x354>
8111a304:	80800917 	ldw	r2,36(r16)
8111a308:	81400717 	ldw	r5,28(r16)
8111a30c:	e00d883a 	mov	r6,fp
8111a310:	da000115 	stw	r8,4(sp)
8111a314:	a809883a 	mov	r4,r21
8111a318:	103ee83a 	callr	r2
8111a31c:	102f883a 	mov	r23,r2
8111a320:	da000117 	ldw	r8,4(sp)
8111a324:	00bfe00e 	bge	zero,r2,8111a2a8 <__reset+0xfb0fa2a8>
8111a328:	9de7c83a 	sub	r19,r19,r23
8111a32c:	98001f26 	beq	r19,zero,8111a3ac <__sfvwrite_r+0x304>
8111a330:	a0800217 	ldw	r2,8(r20)
8111a334:	e5f9883a 	add	fp,fp,r23
8111a338:	95e5c83a 	sub	r18,r18,r23
8111a33c:	15efc83a 	sub	r23,r2,r23
8111a340:	a5c00215 	stw	r23,8(r20)
8111a344:	b83f8726 	beq	r23,zero,8111a164 <__reset+0xfb0fa164>
8111a348:	903fe11e 	bne	r18,zero,8111a2d0 <__reset+0xfb0fa2d0>
8111a34c:	8f000017 	ldw	fp,0(r17)
8111a350:	8c800117 	ldw	r18,4(r17)
8111a354:	0011883a 	mov	r8,zero
8111a358:	8c400204 	addi	r17,r17,8
8111a35c:	003fdb06 	br	8111a2cc <__reset+0xfb0fa2cc>
8111a360:	180d883a 	mov	r6,r3
8111a364:	e00b883a 	mov	r5,fp
8111a368:	da000115 	stw	r8,4(sp)
8111a36c:	d8c00015 	stw	r3,0(sp)
8111a370:	111ac040 	call	8111ac04 <memmove>
8111a374:	d8c00017 	ldw	r3,0(sp)
8111a378:	80800017 	ldw	r2,0(r16)
8111a37c:	800b883a 	mov	r5,r16
8111a380:	a809883a 	mov	r4,r21
8111a384:	10c5883a 	add	r2,r2,r3
8111a388:	80800015 	stw	r2,0(r16)
8111a38c:	d8c00015 	stw	r3,0(sp)
8111a390:	11194fc0 	call	811194fc <_fflush_r>
8111a394:	d8c00017 	ldw	r3,0(sp)
8111a398:	da000117 	ldw	r8,4(sp)
8111a39c:	103fc21e 	bne	r2,zero,8111a2a8 <__reset+0xfb0fa2a8>
8111a3a0:	182f883a 	mov	r23,r3
8111a3a4:	9de7c83a 	sub	r19,r19,r23
8111a3a8:	983fe11e 	bne	r19,zero,8111a330 <__reset+0xfb0fa330>
8111a3ac:	800b883a 	mov	r5,r16
8111a3b0:	a809883a 	mov	r4,r21
8111a3b4:	11194fc0 	call	811194fc <_fflush_r>
8111a3b8:	103fbb1e 	bne	r2,zero,8111a2a8 <__reset+0xfb0fa2a8>
8111a3bc:	0011883a 	mov	r8,zero
8111a3c0:	003fdb06 	br	8111a330 <__reset+0xfb0fa330>
8111a3c4:	94c0012e 	bgeu	r18,r19,8111a3cc <__sfvwrite_r+0x324>
8111a3c8:	9027883a 	mov	r19,r18
8111a3cc:	980d883a 	mov	r6,r19
8111a3d0:	e00b883a 	mov	r5,fp
8111a3d4:	111ac040 	call	8111ac04 <memmove>
8111a3d8:	80800217 	ldw	r2,8(r16)
8111a3dc:	80c00017 	ldw	r3,0(r16)
8111a3e0:	14c5c83a 	sub	r2,r2,r19
8111a3e4:	1cc7883a 	add	r3,r3,r19
8111a3e8:	80800215 	stw	r2,8(r16)
8111a3ec:	80c00015 	stw	r3,0(r16)
8111a3f0:	10004326 	beq	r2,zero,8111a500 <__sfvwrite_r+0x458>
8111a3f4:	9805883a 	mov	r2,r19
8111a3f8:	003f8606 	br	8111a214 <__reset+0xfb0fa214>
8111a3fc:	b00d883a 	mov	r6,r22
8111a400:	e00b883a 	mov	r5,fp
8111a404:	da000115 	stw	r8,4(sp)
8111a408:	111ac040 	call	8111ac04 <memmove>
8111a40c:	80800217 	ldw	r2,8(r16)
8111a410:	80c00017 	ldw	r3,0(r16)
8111a414:	da000117 	ldw	r8,4(sp)
8111a418:	1585c83a 	sub	r2,r2,r22
8111a41c:	1dad883a 	add	r22,r3,r22
8111a420:	80800215 	stw	r2,8(r16)
8111a424:	85800015 	stw	r22,0(r16)
8111a428:	003fbf06 	br	8111a328 <__reset+0xfb0fa328>
8111a42c:	81000017 	ldw	r4,0(r16)
8111a430:	9027883a 	mov	r19,r18
8111a434:	902f883a 	mov	r23,r18
8111a438:	003f6c06 	br	8111a1ec <__reset+0xfb0fa1ec>
8111a43c:	900d883a 	mov	r6,r18
8111a440:	01400284 	movi	r5,10
8111a444:	e009883a 	mov	r4,fp
8111a448:	111ab200 	call	8111ab20 <memchr>
8111a44c:	10003e26 	beq	r2,zero,8111a548 <__sfvwrite_r+0x4a0>
8111a450:	10800044 	addi	r2,r2,1
8111a454:	1727c83a 	sub	r19,r2,fp
8111a458:	02000044 	movi	r8,1
8111a45c:	003f9d06 	br	8111a2d4 <__reset+0xfb0fa2d4>
8111a460:	80800517 	ldw	r2,20(r16)
8111a464:	81400417 	ldw	r5,16(r16)
8111a468:	81c00017 	ldw	r7,0(r16)
8111a46c:	10a7883a 	add	r19,r2,r2
8111a470:	9885883a 	add	r2,r19,r2
8111a474:	1026d7fa 	srli	r19,r2,31
8111a478:	396dc83a 	sub	r22,r7,r5
8111a47c:	b1000044 	addi	r4,r22,1
8111a480:	9885883a 	add	r2,r19,r2
8111a484:	1027d07a 	srai	r19,r2,1
8111a488:	2485883a 	add	r2,r4,r18
8111a48c:	980d883a 	mov	r6,r19
8111a490:	9880022e 	bgeu	r19,r2,8111a49c <__sfvwrite_r+0x3f4>
8111a494:	1027883a 	mov	r19,r2
8111a498:	100d883a 	mov	r6,r2
8111a49c:	18c1000c 	andi	r3,r3,1024
8111a4a0:	18001c26 	beq	r3,zero,8111a514 <__sfvwrite_r+0x46c>
8111a4a4:	300b883a 	mov	r5,r6
8111a4a8:	a809883a 	mov	r4,r21
8111a4ac:	11106380 	call	81110638 <_malloc_r>
8111a4b0:	102f883a 	mov	r23,r2
8111a4b4:	10002926 	beq	r2,zero,8111a55c <__sfvwrite_r+0x4b4>
8111a4b8:	81400417 	ldw	r5,16(r16)
8111a4bc:	b00d883a 	mov	r6,r22
8111a4c0:	1009883a 	mov	r4,r2
8111a4c4:	1110e4c0 	call	81110e4c <memcpy>
8111a4c8:	8080030b 	ldhu	r2,12(r16)
8111a4cc:	00fedfc4 	movi	r3,-1153
8111a4d0:	10c4703a 	and	r2,r2,r3
8111a4d4:	10802014 	ori	r2,r2,128
8111a4d8:	8080030d 	sth	r2,12(r16)
8111a4dc:	bd89883a 	add	r4,r23,r22
8111a4e0:	9d8fc83a 	sub	r7,r19,r22
8111a4e4:	85c00415 	stw	r23,16(r16)
8111a4e8:	84c00515 	stw	r19,20(r16)
8111a4ec:	81000015 	stw	r4,0(r16)
8111a4f0:	9027883a 	mov	r19,r18
8111a4f4:	81c00215 	stw	r7,8(r16)
8111a4f8:	902f883a 	mov	r23,r18
8111a4fc:	003f3b06 	br	8111a1ec <__reset+0xfb0fa1ec>
8111a500:	800b883a 	mov	r5,r16
8111a504:	a809883a 	mov	r4,r21
8111a508:	11194fc0 	call	811194fc <_fflush_r>
8111a50c:	103fb926 	beq	r2,zero,8111a3f4 <__reset+0xfb0fa3f4>
8111a510:	003f6506 	br	8111a2a8 <__reset+0xfb0fa2a8>
8111a514:	a809883a 	mov	r4,r21
8111a518:	111be240 	call	8111be24 <_realloc_r>
8111a51c:	102f883a 	mov	r23,r2
8111a520:	103fee1e 	bne	r2,zero,8111a4dc <__reset+0xfb0fa4dc>
8111a524:	81400417 	ldw	r5,16(r16)
8111a528:	a809883a 	mov	r4,r21
8111a52c:	1119d900 	call	81119d90 <_free_r>
8111a530:	8080030b 	ldhu	r2,12(r16)
8111a534:	00ffdfc4 	movi	r3,-129
8111a538:	1884703a 	and	r2,r3,r2
8111a53c:	00c00304 	movi	r3,12
8111a540:	a8c00015 	stw	r3,0(r21)
8111a544:	003f5906 	br	8111a2ac <__reset+0xfb0fa2ac>
8111a548:	94c00044 	addi	r19,r18,1
8111a54c:	02000044 	movi	r8,1
8111a550:	003f6006 	br	8111a2d4 <__reset+0xfb0fa2d4>
8111a554:	00bfffc4 	movi	r2,-1
8111a558:	003f0306 	br	8111a168 <__reset+0xfb0fa168>
8111a55c:	00800304 	movi	r2,12
8111a560:	a8800015 	stw	r2,0(r21)
8111a564:	8080030b 	ldhu	r2,12(r16)
8111a568:	003f5006 	br	8111a2ac <__reset+0xfb0fa2ac>

8111a56c <_fwalk>:
8111a56c:	defff704 	addi	sp,sp,-36
8111a570:	de00012e 	bgeu	sp,et,8111a578 <_fwalk+0xc>
8111a574:	003b68fa 	trap	3
8111a578:	dd000415 	stw	r20,16(sp)
8111a57c:	dfc00815 	stw	ra,32(sp)
8111a580:	ddc00715 	stw	r23,28(sp)
8111a584:	dd800615 	stw	r22,24(sp)
8111a588:	dd400515 	stw	r21,20(sp)
8111a58c:	dcc00315 	stw	r19,12(sp)
8111a590:	dc800215 	stw	r18,8(sp)
8111a594:	dc400115 	stw	r17,4(sp)
8111a598:	dc000015 	stw	r16,0(sp)
8111a59c:	2500b804 	addi	r20,r4,736
8111a5a0:	a0002326 	beq	r20,zero,8111a630 <_fwalk+0xc4>
8111a5a4:	282b883a 	mov	r21,r5
8111a5a8:	002f883a 	mov	r23,zero
8111a5ac:	05800044 	movi	r22,1
8111a5b0:	04ffffc4 	movi	r19,-1
8111a5b4:	a4400117 	ldw	r17,4(r20)
8111a5b8:	a4800217 	ldw	r18,8(r20)
8111a5bc:	8c7fffc4 	addi	r17,r17,-1
8111a5c0:	88000d16 	blt	r17,zero,8111a5f8 <_fwalk+0x8c>
8111a5c4:	94000304 	addi	r16,r18,12
8111a5c8:	94800384 	addi	r18,r18,14
8111a5cc:	8080000b 	ldhu	r2,0(r16)
8111a5d0:	8c7fffc4 	addi	r17,r17,-1
8111a5d4:	813ffd04 	addi	r4,r16,-12
8111a5d8:	b080042e 	bgeu	r22,r2,8111a5ec <_fwalk+0x80>
8111a5dc:	9080000f 	ldh	r2,0(r18)
8111a5e0:	14c00226 	beq	r2,r19,8111a5ec <_fwalk+0x80>
8111a5e4:	a83ee83a 	callr	r21
8111a5e8:	b8aeb03a 	or	r23,r23,r2
8111a5ec:	84001a04 	addi	r16,r16,104
8111a5f0:	94801a04 	addi	r18,r18,104
8111a5f4:	8cfff51e 	bne	r17,r19,8111a5cc <__reset+0xfb0fa5cc>
8111a5f8:	a5000017 	ldw	r20,0(r20)
8111a5fc:	a03fed1e 	bne	r20,zero,8111a5b4 <__reset+0xfb0fa5b4>
8111a600:	b805883a 	mov	r2,r23
8111a604:	dfc00817 	ldw	ra,32(sp)
8111a608:	ddc00717 	ldw	r23,28(sp)
8111a60c:	dd800617 	ldw	r22,24(sp)
8111a610:	dd400517 	ldw	r21,20(sp)
8111a614:	dd000417 	ldw	r20,16(sp)
8111a618:	dcc00317 	ldw	r19,12(sp)
8111a61c:	dc800217 	ldw	r18,8(sp)
8111a620:	dc400117 	ldw	r17,4(sp)
8111a624:	dc000017 	ldw	r16,0(sp)
8111a628:	dec00904 	addi	sp,sp,36
8111a62c:	f800283a 	ret
8111a630:	002f883a 	mov	r23,zero
8111a634:	003ff206 	br	8111a600 <__reset+0xfb0fa600>

8111a638 <_fwalk_reent>:
8111a638:	defff704 	addi	sp,sp,-36
8111a63c:	de00012e 	bgeu	sp,et,8111a644 <_fwalk_reent+0xc>
8111a640:	003b68fa 	trap	3
8111a644:	dd000415 	stw	r20,16(sp)
8111a648:	dfc00815 	stw	ra,32(sp)
8111a64c:	ddc00715 	stw	r23,28(sp)
8111a650:	dd800615 	stw	r22,24(sp)
8111a654:	dd400515 	stw	r21,20(sp)
8111a658:	dcc00315 	stw	r19,12(sp)
8111a65c:	dc800215 	stw	r18,8(sp)
8111a660:	dc400115 	stw	r17,4(sp)
8111a664:	dc000015 	stw	r16,0(sp)
8111a668:	2500b804 	addi	r20,r4,736
8111a66c:	a0002326 	beq	r20,zero,8111a6fc <_fwalk_reent+0xc4>
8111a670:	282b883a 	mov	r21,r5
8111a674:	2027883a 	mov	r19,r4
8111a678:	002f883a 	mov	r23,zero
8111a67c:	05800044 	movi	r22,1
8111a680:	04bfffc4 	movi	r18,-1
8111a684:	a4400117 	ldw	r17,4(r20)
8111a688:	a4000217 	ldw	r16,8(r20)
8111a68c:	8c7fffc4 	addi	r17,r17,-1
8111a690:	88000c16 	blt	r17,zero,8111a6c4 <_fwalk_reent+0x8c>
8111a694:	84000304 	addi	r16,r16,12
8111a698:	8080000b 	ldhu	r2,0(r16)
8111a69c:	8c7fffc4 	addi	r17,r17,-1
8111a6a0:	817ffd04 	addi	r5,r16,-12
8111a6a4:	b080052e 	bgeu	r22,r2,8111a6bc <_fwalk_reent+0x84>
8111a6a8:	8080008f 	ldh	r2,2(r16)
8111a6ac:	9809883a 	mov	r4,r19
8111a6b0:	14800226 	beq	r2,r18,8111a6bc <_fwalk_reent+0x84>
8111a6b4:	a83ee83a 	callr	r21
8111a6b8:	b8aeb03a 	or	r23,r23,r2
8111a6bc:	84001a04 	addi	r16,r16,104
8111a6c0:	8cbff51e 	bne	r17,r18,8111a698 <__reset+0xfb0fa698>
8111a6c4:	a5000017 	ldw	r20,0(r20)
8111a6c8:	a03fee1e 	bne	r20,zero,8111a684 <__reset+0xfb0fa684>
8111a6cc:	b805883a 	mov	r2,r23
8111a6d0:	dfc00817 	ldw	ra,32(sp)
8111a6d4:	ddc00717 	ldw	r23,28(sp)
8111a6d8:	dd800617 	ldw	r22,24(sp)
8111a6dc:	dd400517 	ldw	r21,20(sp)
8111a6e0:	dd000417 	ldw	r20,16(sp)
8111a6e4:	dcc00317 	ldw	r19,12(sp)
8111a6e8:	dc800217 	ldw	r18,8(sp)
8111a6ec:	dc400117 	ldw	r17,4(sp)
8111a6f0:	dc000017 	ldw	r16,0(sp)
8111a6f4:	dec00904 	addi	sp,sp,36
8111a6f8:	f800283a 	ret
8111a6fc:	002f883a 	mov	r23,zero
8111a700:	003ff206 	br	8111a6cc <__reset+0xfb0fa6cc>

8111a704 <_isatty_r>:
8111a704:	defffd04 	addi	sp,sp,-12
8111a708:	de00012e 	bgeu	sp,et,8111a710 <_isatty_r+0xc>
8111a70c:	003b68fa 	trap	3
8111a710:	dc000015 	stw	r16,0(sp)
8111a714:	04204534 	movhi	r16,33044
8111a718:	dc400115 	stw	r17,4(sp)
8111a71c:	843a5f04 	addi	r16,r16,-5764
8111a720:	2023883a 	mov	r17,r4
8111a724:	2809883a 	mov	r4,r5
8111a728:	dfc00215 	stw	ra,8(sp)
8111a72c:	80000015 	stw	zero,0(r16)
8111a730:	11259b40 	call	811259b4 <isatty>
8111a734:	00ffffc4 	movi	r3,-1
8111a738:	10c00526 	beq	r2,r3,8111a750 <_isatty_r+0x4c>
8111a73c:	dfc00217 	ldw	ra,8(sp)
8111a740:	dc400117 	ldw	r17,4(sp)
8111a744:	dc000017 	ldw	r16,0(sp)
8111a748:	dec00304 	addi	sp,sp,12
8111a74c:	f800283a 	ret
8111a750:	80c00017 	ldw	r3,0(r16)
8111a754:	183ff926 	beq	r3,zero,8111a73c <__reset+0xfb0fa73c>
8111a758:	88c00015 	stw	r3,0(r17)
8111a75c:	003ff706 	br	8111a73c <__reset+0xfb0fa73c>

8111a760 <iswspace>:
8111a760:	00803fc4 	movi	r2,255
8111a764:	11000836 	bltu	r2,r4,8111a788 <iswspace+0x28>
8111a768:	00a04534 	movhi	r2,33044
8111a76c:	10ba0404 	addi	r2,r2,-6128
8111a770:	10800017 	ldw	r2,0(r2)
8111a774:	1109883a 	add	r4,r2,r4
8111a778:	20800043 	ldbu	r2,1(r4)
8111a77c:	1080020c 	andi	r2,r2,8
8111a780:	10803fcc 	andi	r2,r2,255
8111a784:	f800283a 	ret
8111a788:	0005883a 	mov	r2,zero
8111a78c:	f800283a 	ret

8111a790 <_setlocale_r>:
8111a790:	30001d26 	beq	r6,zero,8111a808 <_setlocale_r+0x78>
8111a794:	01604534 	movhi	r5,33044
8111a798:	defffe04 	addi	sp,sp,-8
8111a79c:	29712b04 	addi	r5,r5,-15188
8111a7a0:	3009883a 	mov	r4,r6
8111a7a4:	de00012e 	bgeu	sp,et,8111a7ac <_setlocale_r+0x1c>
8111a7a8:	003b68fa 	trap	3
8111a7ac:	dc000015 	stw	r16,0(sp)
8111a7b0:	dfc00115 	stw	ra,4(sp)
8111a7b4:	3021883a 	mov	r16,r6
8111a7b8:	111c4dc0 	call	8111c4dc <strcmp>
8111a7bc:	1000061e 	bne	r2,zero,8111a7d8 <_setlocale_r+0x48>
8111a7c0:	00a04534 	movhi	r2,33044
8111a7c4:	10b0fa04 	addi	r2,r2,-15384
8111a7c8:	dfc00117 	ldw	ra,4(sp)
8111a7cc:	dc000017 	ldw	r16,0(sp)
8111a7d0:	dec00204 	addi	sp,sp,8
8111a7d4:	f800283a 	ret
8111a7d8:	01604534 	movhi	r5,33044
8111a7dc:	2970fa04 	addi	r5,r5,-15384
8111a7e0:	8009883a 	mov	r4,r16
8111a7e4:	111c4dc0 	call	8111c4dc <strcmp>
8111a7e8:	103ff526 	beq	r2,zero,8111a7c0 <__reset+0xfb0fa7c0>
8111a7ec:	01604534 	movhi	r5,33044
8111a7f0:	29710404 	addi	r5,r5,-15344
8111a7f4:	8009883a 	mov	r4,r16
8111a7f8:	111c4dc0 	call	8111c4dc <strcmp>
8111a7fc:	103ff026 	beq	r2,zero,8111a7c0 <__reset+0xfb0fa7c0>
8111a800:	0005883a 	mov	r2,zero
8111a804:	003ff006 	br	8111a7c8 <__reset+0xfb0fa7c8>
8111a808:	00a04534 	movhi	r2,33044
8111a80c:	10b0fa04 	addi	r2,r2,-15384
8111a810:	f800283a 	ret

8111a814 <__locale_charset>:
8111a814:	00a04534 	movhi	r2,33044
8111a818:	10b4f504 	addi	r2,r2,-11308
8111a81c:	f800283a 	ret

8111a820 <__locale_mb_cur_max>:
8111a820:	00a04534 	movhi	r2,33044
8111a824:	10ba0904 	addi	r2,r2,-6108
8111a828:	10800017 	ldw	r2,0(r2)
8111a82c:	f800283a 	ret

8111a830 <__locale_msgcharset>:
8111a830:	00a04534 	movhi	r2,33044
8111a834:	10b4ed04 	addi	r2,r2,-11340
8111a838:	f800283a 	ret

8111a83c <__locale_cjk_lang>:
8111a83c:	0005883a 	mov	r2,zero
8111a840:	f800283a 	ret

8111a844 <_localeconv_r>:
8111a844:	00a04534 	movhi	r2,33044
8111a848:	10b4fd04 	addi	r2,r2,-11276
8111a84c:	f800283a 	ret

8111a850 <setlocale>:
8111a850:	00a04534 	movhi	r2,33044
8111a854:	10ba0604 	addi	r2,r2,-6120
8111a858:	280d883a 	mov	r6,r5
8111a85c:	200b883a 	mov	r5,r4
8111a860:	11000017 	ldw	r4,0(r2)
8111a864:	111a7901 	jmpi	8111a790 <_setlocale_r>

8111a868 <localeconv>:
8111a868:	00a04534 	movhi	r2,33044
8111a86c:	10b4fd04 	addi	r2,r2,-11276
8111a870:	f800283a 	ret

8111a874 <_lseek_r>:
8111a874:	defffd04 	addi	sp,sp,-12
8111a878:	de00012e 	bgeu	sp,et,8111a880 <_lseek_r+0xc>
8111a87c:	003b68fa 	trap	3
8111a880:	2805883a 	mov	r2,r5
8111a884:	dc000015 	stw	r16,0(sp)
8111a888:	04204534 	movhi	r16,33044
8111a88c:	dc400115 	stw	r17,4(sp)
8111a890:	300b883a 	mov	r5,r6
8111a894:	843a5f04 	addi	r16,r16,-5764
8111a898:	2023883a 	mov	r17,r4
8111a89c:	380d883a 	mov	r6,r7
8111a8a0:	1009883a 	mov	r4,r2
8111a8a4:	dfc00215 	stw	ra,8(sp)
8111a8a8:	80000015 	stw	zero,0(r16)
8111a8ac:	1125aa40 	call	81125aa4 <lseek>
8111a8b0:	00ffffc4 	movi	r3,-1
8111a8b4:	10c00526 	beq	r2,r3,8111a8cc <_lseek_r+0x58>
8111a8b8:	dfc00217 	ldw	ra,8(sp)
8111a8bc:	dc400117 	ldw	r17,4(sp)
8111a8c0:	dc000017 	ldw	r16,0(sp)
8111a8c4:	dec00304 	addi	sp,sp,12
8111a8c8:	f800283a 	ret
8111a8cc:	80c00017 	ldw	r3,0(r16)
8111a8d0:	183ff926 	beq	r3,zero,8111a8b8 <__reset+0xfb0fa8b8>
8111a8d4:	88c00015 	stw	r3,0(r17)
8111a8d8:	003ff706 	br	8111a8b8 <__reset+0xfb0fa8b8>

8111a8dc <_mbrtowc_r>:
8111a8dc:	defff704 	addi	sp,sp,-36
8111a8e0:	00a04534 	movhi	r2,33044
8111a8e4:	de00012e 	bgeu	sp,et,8111a8ec <_mbrtowc_r+0x10>
8111a8e8:	003b68fa 	trap	3
8111a8ec:	10ba0a04 	addi	r2,r2,-6104
8111a8f0:	dc800715 	stw	r18,28(sp)
8111a8f4:	dc400615 	stw	r17,24(sp)
8111a8f8:	dc000515 	stw	r16,20(sp)
8111a8fc:	dfc00815 	stw	ra,32(sp)
8111a900:	2021883a 	mov	r16,r4
8111a904:	dc400917 	ldw	r17,36(sp)
8111a908:	14800017 	ldw	r18,0(r2)
8111a90c:	30001626 	beq	r6,zero,8111a968 <_mbrtowc_r+0x8c>
8111a910:	d9400215 	stw	r5,8(sp)
8111a914:	d9800315 	stw	r6,12(sp)
8111a918:	d9c00415 	stw	r7,16(sp)
8111a91c:	111a8140 	call	8111a814 <__locale_charset>
8111a920:	d9c00417 	ldw	r7,16(sp)
8111a924:	d9800317 	ldw	r6,12(sp)
8111a928:	d9400217 	ldw	r5,8(sp)
8111a92c:	d8800015 	stw	r2,0(sp)
8111a930:	dc400115 	stw	r17,4(sp)
8111a934:	8009883a 	mov	r4,r16
8111a938:	903ee83a 	callr	r18
8111a93c:	00ffffc4 	movi	r3,-1
8111a940:	10c0031e 	bne	r2,r3,8111a950 <_mbrtowc_r+0x74>
8111a944:	88000015 	stw	zero,0(r17)
8111a948:	00c02284 	movi	r3,138
8111a94c:	80c00015 	stw	r3,0(r16)
8111a950:	dfc00817 	ldw	ra,32(sp)
8111a954:	dc800717 	ldw	r18,28(sp)
8111a958:	dc400617 	ldw	r17,24(sp)
8111a95c:	dc000517 	ldw	r16,20(sp)
8111a960:	dec00904 	addi	sp,sp,36
8111a964:	f800283a 	ret
8111a968:	111a8140 	call	8111a814 <__locale_charset>
8111a96c:	01a04534 	movhi	r6,33044
8111a970:	31b10404 	addi	r6,r6,-15344
8111a974:	dc400115 	stw	r17,4(sp)
8111a978:	d8800015 	stw	r2,0(sp)
8111a97c:	01c00044 	movi	r7,1
8111a980:	000b883a 	mov	r5,zero
8111a984:	8009883a 	mov	r4,r16
8111a988:	903ee83a 	callr	r18
8111a98c:	003feb06 	br	8111a93c <__reset+0xfb0fa93c>

8111a990 <mbrtowc>:
8111a990:	defff704 	addi	sp,sp,-36
8111a994:	00a04534 	movhi	r2,33044
8111a998:	de00012e 	bgeu	sp,et,8111a9a0 <mbrtowc+0x10>
8111a99c:	003b68fa 	trap	3
8111a9a0:	10ba0604 	addi	r2,r2,-6120
8111a9a4:	dc800415 	stw	r18,16(sp)
8111a9a8:	dc400315 	stw	r17,12(sp)
8111a9ac:	dfc00815 	stw	ra,32(sp)
8111a9b0:	dd400715 	stw	r21,28(sp)
8111a9b4:	dd000615 	stw	r20,24(sp)
8111a9b8:	dcc00515 	stw	r19,20(sp)
8111a9bc:	dc000215 	stw	r16,8(sp)
8111a9c0:	3825883a 	mov	r18,r7
8111a9c4:	14400017 	ldw	r17,0(r2)
8111a9c8:	28001c26 	beq	r5,zero,8111aa3c <mbrtowc+0xac>
8111a9cc:	00a04534 	movhi	r2,33044
8111a9d0:	10ba0a04 	addi	r2,r2,-6104
8111a9d4:	15400017 	ldw	r21,0(r2)
8111a9d8:	2821883a 	mov	r16,r5
8111a9dc:	2027883a 	mov	r19,r4
8111a9e0:	3029883a 	mov	r20,r6
8111a9e4:	111a8140 	call	8111a814 <__locale_charset>
8111a9e8:	d8800015 	stw	r2,0(sp)
8111a9ec:	dc800115 	stw	r18,4(sp)
8111a9f0:	a00f883a 	mov	r7,r20
8111a9f4:	800d883a 	mov	r6,r16
8111a9f8:	980b883a 	mov	r5,r19
8111a9fc:	8809883a 	mov	r4,r17
8111aa00:	a83ee83a 	callr	r21
8111aa04:	00ffffc4 	movi	r3,-1
8111aa08:	10c0031e 	bne	r2,r3,8111aa18 <mbrtowc+0x88>
8111aa0c:	90000015 	stw	zero,0(r18)
8111aa10:	00c02284 	movi	r3,138
8111aa14:	88c00015 	stw	r3,0(r17)
8111aa18:	dfc00817 	ldw	ra,32(sp)
8111aa1c:	dd400717 	ldw	r21,28(sp)
8111aa20:	dd000617 	ldw	r20,24(sp)
8111aa24:	dcc00517 	ldw	r19,20(sp)
8111aa28:	dc800417 	ldw	r18,16(sp)
8111aa2c:	dc400317 	ldw	r17,12(sp)
8111aa30:	dc000217 	ldw	r16,8(sp)
8111aa34:	dec00904 	addi	sp,sp,36
8111aa38:	f800283a 	ret
8111aa3c:	00a04534 	movhi	r2,33044
8111aa40:	10ba0a04 	addi	r2,r2,-6104
8111aa44:	14000017 	ldw	r16,0(r2)
8111aa48:	111a8140 	call	8111a814 <__locale_charset>
8111aa4c:	01a04534 	movhi	r6,33044
8111aa50:	31b10404 	addi	r6,r6,-15344
8111aa54:	dc800115 	stw	r18,4(sp)
8111aa58:	d8800015 	stw	r2,0(sp)
8111aa5c:	01c00044 	movi	r7,1
8111aa60:	000b883a 	mov	r5,zero
8111aa64:	8809883a 	mov	r4,r17
8111aa68:	803ee83a 	callr	r16
8111aa6c:	003fe506 	br	8111aa04 <__reset+0xfb0faa04>

8111aa70 <__ascii_mbtowc>:
8111aa70:	deffff04 	addi	sp,sp,-4
8111aa74:	de00012e 	bgeu	sp,et,8111aa7c <__ascii_mbtowc+0xc>
8111aa78:	003b68fa 	trap	3
8111aa7c:	28000826 	beq	r5,zero,8111aaa0 <__ascii_mbtowc+0x30>
8111aa80:	30000926 	beq	r6,zero,8111aaa8 <__ascii_mbtowc+0x38>
8111aa84:	38000b26 	beq	r7,zero,8111aab4 <__ascii_mbtowc+0x44>
8111aa88:	30800003 	ldbu	r2,0(r6)
8111aa8c:	28800015 	stw	r2,0(r5)
8111aa90:	30800003 	ldbu	r2,0(r6)
8111aa94:	1004c03a 	cmpne	r2,r2,zero
8111aa98:	dec00104 	addi	sp,sp,4
8111aa9c:	f800283a 	ret
8111aaa0:	d80b883a 	mov	r5,sp
8111aaa4:	303ff71e 	bne	r6,zero,8111aa84 <__reset+0xfb0faa84>
8111aaa8:	0005883a 	mov	r2,zero
8111aaac:	dec00104 	addi	sp,sp,4
8111aab0:	f800283a 	ret
8111aab4:	00bfff84 	movi	r2,-2
8111aab8:	003ff706 	br	8111aa98 <__reset+0xfb0faa98>

8111aabc <_mbtowc_r>:
8111aabc:	00a04534 	movhi	r2,33044
8111aac0:	defff804 	addi	sp,sp,-32
8111aac4:	10ba0a04 	addi	r2,r2,-6104
8111aac8:	de00012e 	bgeu	sp,et,8111aad0 <_mbtowc_r+0x14>
8111aacc:	003b68fa 	trap	3
8111aad0:	dfc00715 	stw	ra,28(sp)
8111aad4:	dc000615 	stw	r16,24(sp)
8111aad8:	14000017 	ldw	r16,0(r2)
8111aadc:	d9000215 	stw	r4,8(sp)
8111aae0:	d9400315 	stw	r5,12(sp)
8111aae4:	d9800415 	stw	r6,16(sp)
8111aae8:	d9c00515 	stw	r7,20(sp)
8111aaec:	111a8140 	call	8111a814 <__locale_charset>
8111aaf0:	d8800015 	stw	r2,0(sp)
8111aaf4:	d8800817 	ldw	r2,32(sp)
8111aaf8:	d9c00517 	ldw	r7,20(sp)
8111aafc:	d9800417 	ldw	r6,16(sp)
8111ab00:	d9400317 	ldw	r5,12(sp)
8111ab04:	d9000217 	ldw	r4,8(sp)
8111ab08:	d8800115 	stw	r2,4(sp)
8111ab0c:	803ee83a 	callr	r16
8111ab10:	dfc00717 	ldw	ra,28(sp)
8111ab14:	dc000617 	ldw	r16,24(sp)
8111ab18:	dec00804 	addi	sp,sp,32
8111ab1c:	f800283a 	ret

8111ab20 <memchr>:
8111ab20:	208000cc 	andi	r2,r4,3
8111ab24:	280f883a 	mov	r7,r5
8111ab28:	10003426 	beq	r2,zero,8111abfc <memchr+0xdc>
8111ab2c:	30bfffc4 	addi	r2,r6,-1
8111ab30:	30001a26 	beq	r6,zero,8111ab9c <memchr+0x7c>
8111ab34:	20c00003 	ldbu	r3,0(r4)
8111ab38:	29803fcc 	andi	r6,r5,255
8111ab3c:	30c0051e 	bne	r6,r3,8111ab54 <memchr+0x34>
8111ab40:	00001806 	br	8111aba4 <memchr+0x84>
8111ab44:	10001526 	beq	r2,zero,8111ab9c <memchr+0x7c>
8111ab48:	20c00003 	ldbu	r3,0(r4)
8111ab4c:	10bfffc4 	addi	r2,r2,-1
8111ab50:	30c01426 	beq	r6,r3,8111aba4 <memchr+0x84>
8111ab54:	21000044 	addi	r4,r4,1
8111ab58:	20c000cc 	andi	r3,r4,3
8111ab5c:	183ff91e 	bne	r3,zero,8111ab44 <__reset+0xfb0fab44>
8111ab60:	020000c4 	movi	r8,3
8111ab64:	40801136 	bltu	r8,r2,8111abac <memchr+0x8c>
8111ab68:	10000c26 	beq	r2,zero,8111ab9c <memchr+0x7c>
8111ab6c:	20c00003 	ldbu	r3,0(r4)
8111ab70:	29403fcc 	andi	r5,r5,255
8111ab74:	28c00b26 	beq	r5,r3,8111aba4 <memchr+0x84>
8111ab78:	20c00044 	addi	r3,r4,1
8111ab7c:	39803fcc 	andi	r6,r7,255
8111ab80:	2089883a 	add	r4,r4,r2
8111ab84:	00000306 	br	8111ab94 <memchr+0x74>
8111ab88:	18c00044 	addi	r3,r3,1
8111ab8c:	197fffc3 	ldbu	r5,-1(r3)
8111ab90:	31400526 	beq	r6,r5,8111aba8 <memchr+0x88>
8111ab94:	1805883a 	mov	r2,r3
8111ab98:	20fffb1e 	bne	r4,r3,8111ab88 <__reset+0xfb0fab88>
8111ab9c:	0005883a 	mov	r2,zero
8111aba0:	f800283a 	ret
8111aba4:	2005883a 	mov	r2,r4
8111aba8:	f800283a 	ret
8111abac:	28c03fcc 	andi	r3,r5,255
8111abb0:	1812923a 	slli	r9,r3,8
8111abb4:	02ffbff4 	movhi	r11,65279
8111abb8:	02a02074 	movhi	r10,32897
8111abbc:	48d2b03a 	or	r9,r9,r3
8111abc0:	4806943a 	slli	r3,r9,16
8111abc4:	5affbfc4 	addi	r11,r11,-257
8111abc8:	52a02004 	addi	r10,r10,-32640
8111abcc:	48d2b03a 	or	r9,r9,r3
8111abd0:	20c00017 	ldw	r3,0(r4)
8111abd4:	48c6f03a 	xor	r3,r9,r3
8111abd8:	1acd883a 	add	r6,r3,r11
8111abdc:	00c6303a 	nor	r3,zero,r3
8111abe0:	30c6703a 	and	r3,r6,r3
8111abe4:	1a86703a 	and	r3,r3,r10
8111abe8:	183fe01e 	bne	r3,zero,8111ab6c <__reset+0xfb0fab6c>
8111abec:	10bfff04 	addi	r2,r2,-4
8111abf0:	21000104 	addi	r4,r4,4
8111abf4:	40bff636 	bltu	r8,r2,8111abd0 <__reset+0xfb0fabd0>
8111abf8:	003fdb06 	br	8111ab68 <__reset+0xfb0fab68>
8111abfc:	3005883a 	mov	r2,r6
8111ac00:	003fd706 	br	8111ab60 <__reset+0xfb0fab60>

8111ac04 <memmove>:
8111ac04:	2005883a 	mov	r2,r4
8111ac08:	29000b2e 	bgeu	r5,r4,8111ac38 <memmove+0x34>
8111ac0c:	298f883a 	add	r7,r5,r6
8111ac10:	21c0092e 	bgeu	r4,r7,8111ac38 <memmove+0x34>
8111ac14:	2187883a 	add	r3,r4,r6
8111ac18:	198bc83a 	sub	r5,r3,r6
8111ac1c:	30004826 	beq	r6,zero,8111ad40 <memmove+0x13c>
8111ac20:	39ffffc4 	addi	r7,r7,-1
8111ac24:	39000003 	ldbu	r4,0(r7)
8111ac28:	18ffffc4 	addi	r3,r3,-1
8111ac2c:	19000005 	stb	r4,0(r3)
8111ac30:	28fffb1e 	bne	r5,r3,8111ac20 <__reset+0xfb0fac20>
8111ac34:	f800283a 	ret
8111ac38:	00c003c4 	movi	r3,15
8111ac3c:	1980412e 	bgeu	r3,r6,8111ad44 <memmove+0x140>
8111ac40:	2886b03a 	or	r3,r5,r2
8111ac44:	18c000cc 	andi	r3,r3,3
8111ac48:	1800401e 	bne	r3,zero,8111ad4c <memmove+0x148>
8111ac4c:	33fffc04 	addi	r15,r6,-16
8111ac50:	781ed13a 	srli	r15,r15,4
8111ac54:	28c00104 	addi	r3,r5,4
8111ac58:	13400104 	addi	r13,r2,4
8111ac5c:	781c913a 	slli	r14,r15,4
8111ac60:	2b000204 	addi	r12,r5,8
8111ac64:	12c00204 	addi	r11,r2,8
8111ac68:	73800504 	addi	r14,r14,20
8111ac6c:	2a800304 	addi	r10,r5,12
8111ac70:	12400304 	addi	r9,r2,12
8111ac74:	2b9d883a 	add	r14,r5,r14
8111ac78:	2811883a 	mov	r8,r5
8111ac7c:	100f883a 	mov	r7,r2
8111ac80:	41000017 	ldw	r4,0(r8)
8111ac84:	39c00404 	addi	r7,r7,16
8111ac88:	18c00404 	addi	r3,r3,16
8111ac8c:	393ffc15 	stw	r4,-16(r7)
8111ac90:	193ffc17 	ldw	r4,-16(r3)
8111ac94:	6b400404 	addi	r13,r13,16
8111ac98:	5ac00404 	addi	r11,r11,16
8111ac9c:	693ffc15 	stw	r4,-16(r13)
8111aca0:	61000017 	ldw	r4,0(r12)
8111aca4:	4a400404 	addi	r9,r9,16
8111aca8:	42000404 	addi	r8,r8,16
8111acac:	593ffc15 	stw	r4,-16(r11)
8111acb0:	51000017 	ldw	r4,0(r10)
8111acb4:	63000404 	addi	r12,r12,16
8111acb8:	52800404 	addi	r10,r10,16
8111acbc:	493ffc15 	stw	r4,-16(r9)
8111acc0:	1bbfef1e 	bne	r3,r14,8111ac80 <__reset+0xfb0fac80>
8111acc4:	79000044 	addi	r4,r15,1
8111acc8:	2008913a 	slli	r4,r4,4
8111accc:	328003cc 	andi	r10,r6,15
8111acd0:	02c000c4 	movi	r11,3
8111acd4:	1107883a 	add	r3,r2,r4
8111acd8:	290b883a 	add	r5,r5,r4
8111acdc:	5a801e2e 	bgeu	r11,r10,8111ad58 <memmove+0x154>
8111ace0:	1813883a 	mov	r9,r3
8111ace4:	2811883a 	mov	r8,r5
8111ace8:	500f883a 	mov	r7,r10
8111acec:	41000017 	ldw	r4,0(r8)
8111acf0:	4a400104 	addi	r9,r9,4
8111acf4:	39ffff04 	addi	r7,r7,-4
8111acf8:	493fff15 	stw	r4,-4(r9)
8111acfc:	42000104 	addi	r8,r8,4
8111ad00:	59fffa36 	bltu	r11,r7,8111acec <__reset+0xfb0facec>
8111ad04:	513fff04 	addi	r4,r10,-4
8111ad08:	2008d0ba 	srli	r4,r4,2
8111ad0c:	318000cc 	andi	r6,r6,3
8111ad10:	21000044 	addi	r4,r4,1
8111ad14:	2109883a 	add	r4,r4,r4
8111ad18:	2109883a 	add	r4,r4,r4
8111ad1c:	1907883a 	add	r3,r3,r4
8111ad20:	290b883a 	add	r5,r5,r4
8111ad24:	30000b26 	beq	r6,zero,8111ad54 <memmove+0x150>
8111ad28:	198d883a 	add	r6,r3,r6
8111ad2c:	29c00003 	ldbu	r7,0(r5)
8111ad30:	18c00044 	addi	r3,r3,1
8111ad34:	29400044 	addi	r5,r5,1
8111ad38:	19ffffc5 	stb	r7,-1(r3)
8111ad3c:	19bffb1e 	bne	r3,r6,8111ad2c <__reset+0xfb0fad2c>
8111ad40:	f800283a 	ret
8111ad44:	1007883a 	mov	r3,r2
8111ad48:	003ff606 	br	8111ad24 <__reset+0xfb0fad24>
8111ad4c:	1007883a 	mov	r3,r2
8111ad50:	003ff506 	br	8111ad28 <__reset+0xfb0fad28>
8111ad54:	f800283a 	ret
8111ad58:	500d883a 	mov	r6,r10
8111ad5c:	003ff106 	br	8111ad24 <__reset+0xfb0fad24>

8111ad60 <_Balloc>:
8111ad60:	defffc04 	addi	sp,sp,-16
8111ad64:	de00012e 	bgeu	sp,et,8111ad6c <_Balloc+0xc>
8111ad68:	003b68fa 	trap	3
8111ad6c:	20801317 	ldw	r2,76(r4)
8111ad70:	dc400115 	stw	r17,4(sp)
8111ad74:	dc000015 	stw	r16,0(sp)
8111ad78:	dfc00315 	stw	ra,12(sp)
8111ad7c:	dc800215 	stw	r18,8(sp)
8111ad80:	2023883a 	mov	r17,r4
8111ad84:	2821883a 	mov	r16,r5
8111ad88:	10000f26 	beq	r2,zero,8111adc8 <_Balloc+0x68>
8111ad8c:	8407883a 	add	r3,r16,r16
8111ad90:	18c7883a 	add	r3,r3,r3
8111ad94:	10c7883a 	add	r3,r2,r3
8111ad98:	18800017 	ldw	r2,0(r3)
8111ad9c:	10001126 	beq	r2,zero,8111ade4 <_Balloc+0x84>
8111ada0:	11000017 	ldw	r4,0(r2)
8111ada4:	19000015 	stw	r4,0(r3)
8111ada8:	10000415 	stw	zero,16(r2)
8111adac:	10000315 	stw	zero,12(r2)
8111adb0:	dfc00317 	ldw	ra,12(sp)
8111adb4:	dc800217 	ldw	r18,8(sp)
8111adb8:	dc400117 	ldw	r17,4(sp)
8111adbc:	dc000017 	ldw	r16,0(sp)
8111adc0:	dec00404 	addi	sp,sp,16
8111adc4:	f800283a 	ret
8111adc8:	01800844 	movi	r6,33
8111adcc:	01400104 	movi	r5,4
8111add0:	11212880 	call	81121288 <_calloc_r>
8111add4:	88801315 	stw	r2,76(r17)
8111add8:	103fec1e 	bne	r2,zero,8111ad8c <__reset+0xfb0fad8c>
8111addc:	0005883a 	mov	r2,zero
8111ade0:	003ff306 	br	8111adb0 <__reset+0xfb0fadb0>
8111ade4:	01400044 	movi	r5,1
8111ade8:	2c24983a 	sll	r18,r5,r16
8111adec:	8809883a 	mov	r4,r17
8111adf0:	91800144 	addi	r6,r18,5
8111adf4:	318d883a 	add	r6,r6,r6
8111adf8:	318d883a 	add	r6,r6,r6
8111adfc:	11212880 	call	81121288 <_calloc_r>
8111ae00:	103ff626 	beq	r2,zero,8111addc <__reset+0xfb0faddc>
8111ae04:	14000115 	stw	r16,4(r2)
8111ae08:	14800215 	stw	r18,8(r2)
8111ae0c:	003fe606 	br	8111ada8 <__reset+0xfb0fada8>

8111ae10 <_Bfree>:
8111ae10:	28000826 	beq	r5,zero,8111ae34 <_Bfree+0x24>
8111ae14:	28c00117 	ldw	r3,4(r5)
8111ae18:	20801317 	ldw	r2,76(r4)
8111ae1c:	18c7883a 	add	r3,r3,r3
8111ae20:	18c7883a 	add	r3,r3,r3
8111ae24:	10c5883a 	add	r2,r2,r3
8111ae28:	10c00017 	ldw	r3,0(r2)
8111ae2c:	28c00015 	stw	r3,0(r5)
8111ae30:	11400015 	stw	r5,0(r2)
8111ae34:	f800283a 	ret

8111ae38 <__multadd>:
8111ae38:	defffa04 	addi	sp,sp,-24
8111ae3c:	de00012e 	bgeu	sp,et,8111ae44 <__multadd+0xc>
8111ae40:	003b68fa 	trap	3
8111ae44:	0011883a 	mov	r8,zero
8111ae48:	dc800315 	stw	r18,12(sp)
8111ae4c:	dc400215 	stw	r17,8(sp)
8111ae50:	dc000115 	stw	r16,4(sp)
8111ae54:	2823883a 	mov	r17,r5
8111ae58:	2c000417 	ldw	r16,16(r5)
8111ae5c:	dfc00515 	stw	ra,20(sp)
8111ae60:	dcc00415 	stw	r19,16(sp)
8111ae64:	2025883a 	mov	r18,r4
8111ae68:	29400504 	addi	r5,r5,20
8111ae6c:	28c00017 	ldw	r3,0(r5)
8111ae70:	29400104 	addi	r5,r5,4
8111ae74:	42000044 	addi	r8,r8,1
8111ae78:	18bfffcc 	andi	r2,r3,65535
8111ae7c:	1185383a 	mul	r2,r2,r6
8111ae80:	1806d43a 	srli	r3,r3,16
8111ae84:	11cf883a 	add	r7,r2,r7
8111ae88:	3808d43a 	srli	r4,r7,16
8111ae8c:	1987383a 	mul	r3,r3,r6
8111ae90:	38bfffcc 	andi	r2,r7,65535
8111ae94:	1907883a 	add	r3,r3,r4
8111ae98:	1808943a 	slli	r4,r3,16
8111ae9c:	180ed43a 	srli	r7,r3,16
8111aea0:	2085883a 	add	r2,r4,r2
8111aea4:	28bfff15 	stw	r2,-4(r5)
8111aea8:	443ff016 	blt	r8,r16,8111ae6c <__reset+0xfb0fae6c>
8111aeac:	38000926 	beq	r7,zero,8111aed4 <__multadd+0x9c>
8111aeb0:	88800217 	ldw	r2,8(r17)
8111aeb4:	80800f0e 	bge	r16,r2,8111aef4 <__multadd+0xbc>
8111aeb8:	80800144 	addi	r2,r16,5
8111aebc:	1085883a 	add	r2,r2,r2
8111aec0:	1085883a 	add	r2,r2,r2
8111aec4:	8885883a 	add	r2,r17,r2
8111aec8:	11c00015 	stw	r7,0(r2)
8111aecc:	84000044 	addi	r16,r16,1
8111aed0:	8c000415 	stw	r16,16(r17)
8111aed4:	8805883a 	mov	r2,r17
8111aed8:	dfc00517 	ldw	ra,20(sp)
8111aedc:	dcc00417 	ldw	r19,16(sp)
8111aee0:	dc800317 	ldw	r18,12(sp)
8111aee4:	dc400217 	ldw	r17,8(sp)
8111aee8:	dc000117 	ldw	r16,4(sp)
8111aeec:	dec00604 	addi	sp,sp,24
8111aef0:	f800283a 	ret
8111aef4:	89400117 	ldw	r5,4(r17)
8111aef8:	9009883a 	mov	r4,r18
8111aefc:	d9c00015 	stw	r7,0(sp)
8111af00:	29400044 	addi	r5,r5,1
8111af04:	111ad600 	call	8111ad60 <_Balloc>
8111af08:	89800417 	ldw	r6,16(r17)
8111af0c:	89400304 	addi	r5,r17,12
8111af10:	11000304 	addi	r4,r2,12
8111af14:	31800084 	addi	r6,r6,2
8111af18:	318d883a 	add	r6,r6,r6
8111af1c:	318d883a 	add	r6,r6,r6
8111af20:	1027883a 	mov	r19,r2
8111af24:	1110e4c0 	call	81110e4c <memcpy>
8111af28:	d9c00017 	ldw	r7,0(sp)
8111af2c:	88000a26 	beq	r17,zero,8111af58 <__multadd+0x120>
8111af30:	88c00117 	ldw	r3,4(r17)
8111af34:	90801317 	ldw	r2,76(r18)
8111af38:	18c7883a 	add	r3,r3,r3
8111af3c:	18c7883a 	add	r3,r3,r3
8111af40:	10c5883a 	add	r2,r2,r3
8111af44:	10c00017 	ldw	r3,0(r2)
8111af48:	88c00015 	stw	r3,0(r17)
8111af4c:	14400015 	stw	r17,0(r2)
8111af50:	9823883a 	mov	r17,r19
8111af54:	003fd806 	br	8111aeb8 <__reset+0xfb0faeb8>
8111af58:	9823883a 	mov	r17,r19
8111af5c:	003fd606 	br	8111aeb8 <__reset+0xfb0faeb8>

8111af60 <__s2b>:
8111af60:	defff904 	addi	sp,sp,-28
8111af64:	de00012e 	bgeu	sp,et,8111af6c <__s2b+0xc>
8111af68:	003b68fa 	trap	3
8111af6c:	dc400115 	stw	r17,4(sp)
8111af70:	dc000015 	stw	r16,0(sp)
8111af74:	2023883a 	mov	r17,r4
8111af78:	2821883a 	mov	r16,r5
8111af7c:	39000204 	addi	r4,r7,8
8111af80:	01400244 	movi	r5,9
8111af84:	dcc00315 	stw	r19,12(sp)
8111af88:	dc800215 	stw	r18,8(sp)
8111af8c:	dfc00615 	stw	ra,24(sp)
8111af90:	dd400515 	stw	r21,20(sp)
8111af94:	dd000415 	stw	r20,16(sp)
8111af98:	3825883a 	mov	r18,r7
8111af9c:	3027883a 	mov	r19,r6
8111afa0:	11231800 	call	81123180 <__divsi3>
8111afa4:	00c00044 	movi	r3,1
8111afa8:	000b883a 	mov	r5,zero
8111afac:	1880030e 	bge	r3,r2,8111afbc <__s2b+0x5c>
8111afb0:	18c7883a 	add	r3,r3,r3
8111afb4:	29400044 	addi	r5,r5,1
8111afb8:	18bffd16 	blt	r3,r2,8111afb0 <__reset+0xfb0fafb0>
8111afbc:	8809883a 	mov	r4,r17
8111afc0:	111ad600 	call	8111ad60 <_Balloc>
8111afc4:	d8c00717 	ldw	r3,28(sp)
8111afc8:	10c00515 	stw	r3,20(r2)
8111afcc:	00c00044 	movi	r3,1
8111afd0:	10c00415 	stw	r3,16(r2)
8111afd4:	00c00244 	movi	r3,9
8111afd8:	1cc0210e 	bge	r3,r19,8111b060 <__s2b+0x100>
8111afdc:	80eb883a 	add	r21,r16,r3
8111afe0:	a829883a 	mov	r20,r21
8111afe4:	84e1883a 	add	r16,r16,r19
8111afe8:	a1c00007 	ldb	r7,0(r20)
8111afec:	01800284 	movi	r6,10
8111aff0:	a5000044 	addi	r20,r20,1
8111aff4:	100b883a 	mov	r5,r2
8111aff8:	39fff404 	addi	r7,r7,-48
8111affc:	8809883a 	mov	r4,r17
8111b000:	111ae380 	call	8111ae38 <__multadd>
8111b004:	a43ff81e 	bne	r20,r16,8111afe8 <__reset+0xfb0fafe8>
8111b008:	ace1883a 	add	r16,r21,r19
8111b00c:	843ffe04 	addi	r16,r16,-8
8111b010:	9c800a0e 	bge	r19,r18,8111b03c <__s2b+0xdc>
8111b014:	94e5c83a 	sub	r18,r18,r19
8111b018:	84a5883a 	add	r18,r16,r18
8111b01c:	81c00007 	ldb	r7,0(r16)
8111b020:	01800284 	movi	r6,10
8111b024:	84000044 	addi	r16,r16,1
8111b028:	100b883a 	mov	r5,r2
8111b02c:	39fff404 	addi	r7,r7,-48
8111b030:	8809883a 	mov	r4,r17
8111b034:	111ae380 	call	8111ae38 <__multadd>
8111b038:	84bff81e 	bne	r16,r18,8111b01c <__reset+0xfb0fb01c>
8111b03c:	dfc00617 	ldw	ra,24(sp)
8111b040:	dd400517 	ldw	r21,20(sp)
8111b044:	dd000417 	ldw	r20,16(sp)
8111b048:	dcc00317 	ldw	r19,12(sp)
8111b04c:	dc800217 	ldw	r18,8(sp)
8111b050:	dc400117 	ldw	r17,4(sp)
8111b054:	dc000017 	ldw	r16,0(sp)
8111b058:	dec00704 	addi	sp,sp,28
8111b05c:	f800283a 	ret
8111b060:	84000284 	addi	r16,r16,10
8111b064:	1827883a 	mov	r19,r3
8111b068:	003fe906 	br	8111b010 <__reset+0xfb0fb010>

8111b06c <__hi0bits>:
8111b06c:	20bfffec 	andhi	r2,r4,65535
8111b070:	1000141e 	bne	r2,zero,8111b0c4 <__hi0bits+0x58>
8111b074:	2008943a 	slli	r4,r4,16
8111b078:	00800404 	movi	r2,16
8111b07c:	20ffc02c 	andhi	r3,r4,65280
8111b080:	1800021e 	bne	r3,zero,8111b08c <__hi0bits+0x20>
8111b084:	2008923a 	slli	r4,r4,8
8111b088:	10800204 	addi	r2,r2,8
8111b08c:	20fc002c 	andhi	r3,r4,61440
8111b090:	1800021e 	bne	r3,zero,8111b09c <__hi0bits+0x30>
8111b094:	2008913a 	slli	r4,r4,4
8111b098:	10800104 	addi	r2,r2,4
8111b09c:	20f0002c 	andhi	r3,r4,49152
8111b0a0:	1800031e 	bne	r3,zero,8111b0b0 <__hi0bits+0x44>
8111b0a4:	2109883a 	add	r4,r4,r4
8111b0a8:	10800084 	addi	r2,r2,2
8111b0ac:	2109883a 	add	r4,r4,r4
8111b0b0:	20000316 	blt	r4,zero,8111b0c0 <__hi0bits+0x54>
8111b0b4:	2110002c 	andhi	r4,r4,16384
8111b0b8:	2000041e 	bne	r4,zero,8111b0cc <__hi0bits+0x60>
8111b0bc:	00800804 	movi	r2,32
8111b0c0:	f800283a 	ret
8111b0c4:	0005883a 	mov	r2,zero
8111b0c8:	003fec06 	br	8111b07c <__reset+0xfb0fb07c>
8111b0cc:	10800044 	addi	r2,r2,1
8111b0d0:	f800283a 	ret

8111b0d4 <__lo0bits>:
8111b0d4:	20c00017 	ldw	r3,0(r4)
8111b0d8:	188001cc 	andi	r2,r3,7
8111b0dc:	10000826 	beq	r2,zero,8111b100 <__lo0bits+0x2c>
8111b0e0:	1880004c 	andi	r2,r3,1
8111b0e4:	1000211e 	bne	r2,zero,8111b16c <__lo0bits+0x98>
8111b0e8:	1880008c 	andi	r2,r3,2
8111b0ec:	1000211e 	bne	r2,zero,8111b174 <__lo0bits+0xa0>
8111b0f0:	1806d0ba 	srli	r3,r3,2
8111b0f4:	00800084 	movi	r2,2
8111b0f8:	20c00015 	stw	r3,0(r4)
8111b0fc:	f800283a 	ret
8111b100:	18bfffcc 	andi	r2,r3,65535
8111b104:	10001326 	beq	r2,zero,8111b154 <__lo0bits+0x80>
8111b108:	0005883a 	mov	r2,zero
8111b10c:	19403fcc 	andi	r5,r3,255
8111b110:	2800021e 	bne	r5,zero,8111b11c <__lo0bits+0x48>
8111b114:	1806d23a 	srli	r3,r3,8
8111b118:	10800204 	addi	r2,r2,8
8111b11c:	194003cc 	andi	r5,r3,15
8111b120:	2800021e 	bne	r5,zero,8111b12c <__lo0bits+0x58>
8111b124:	1806d13a 	srli	r3,r3,4
8111b128:	10800104 	addi	r2,r2,4
8111b12c:	194000cc 	andi	r5,r3,3
8111b130:	2800021e 	bne	r5,zero,8111b13c <__lo0bits+0x68>
8111b134:	1806d0ba 	srli	r3,r3,2
8111b138:	10800084 	addi	r2,r2,2
8111b13c:	1940004c 	andi	r5,r3,1
8111b140:	2800081e 	bne	r5,zero,8111b164 <__lo0bits+0x90>
8111b144:	1806d07a 	srli	r3,r3,1
8111b148:	1800051e 	bne	r3,zero,8111b160 <__lo0bits+0x8c>
8111b14c:	00800804 	movi	r2,32
8111b150:	f800283a 	ret
8111b154:	1806d43a 	srli	r3,r3,16
8111b158:	00800404 	movi	r2,16
8111b15c:	003feb06 	br	8111b10c <__reset+0xfb0fb10c>
8111b160:	10800044 	addi	r2,r2,1
8111b164:	20c00015 	stw	r3,0(r4)
8111b168:	f800283a 	ret
8111b16c:	0005883a 	mov	r2,zero
8111b170:	f800283a 	ret
8111b174:	1806d07a 	srli	r3,r3,1
8111b178:	00800044 	movi	r2,1
8111b17c:	20c00015 	stw	r3,0(r4)
8111b180:	f800283a 	ret

8111b184 <__i2b>:
8111b184:	defffd04 	addi	sp,sp,-12
8111b188:	de00012e 	bgeu	sp,et,8111b190 <__i2b+0xc>
8111b18c:	003b68fa 	trap	3
8111b190:	dc000015 	stw	r16,0(sp)
8111b194:	04000044 	movi	r16,1
8111b198:	dc400115 	stw	r17,4(sp)
8111b19c:	2823883a 	mov	r17,r5
8111b1a0:	800b883a 	mov	r5,r16
8111b1a4:	dfc00215 	stw	ra,8(sp)
8111b1a8:	111ad600 	call	8111ad60 <_Balloc>
8111b1ac:	14400515 	stw	r17,20(r2)
8111b1b0:	14000415 	stw	r16,16(r2)
8111b1b4:	dfc00217 	ldw	ra,8(sp)
8111b1b8:	dc400117 	ldw	r17,4(sp)
8111b1bc:	dc000017 	ldw	r16,0(sp)
8111b1c0:	dec00304 	addi	sp,sp,12
8111b1c4:	f800283a 	ret

8111b1c8 <__multiply>:
8111b1c8:	defffa04 	addi	sp,sp,-24
8111b1cc:	de00012e 	bgeu	sp,et,8111b1d4 <__multiply+0xc>
8111b1d0:	003b68fa 	trap	3
8111b1d4:	dcc00315 	stw	r19,12(sp)
8111b1d8:	dc800215 	stw	r18,8(sp)
8111b1dc:	34c00417 	ldw	r19,16(r6)
8111b1e0:	2c800417 	ldw	r18,16(r5)
8111b1e4:	dd000415 	stw	r20,16(sp)
8111b1e8:	dc400115 	stw	r17,4(sp)
8111b1ec:	dfc00515 	stw	ra,20(sp)
8111b1f0:	dc000015 	stw	r16,0(sp)
8111b1f4:	2829883a 	mov	r20,r5
8111b1f8:	3023883a 	mov	r17,r6
8111b1fc:	94c0050e 	bge	r18,r19,8111b214 <__multiply+0x4c>
8111b200:	9007883a 	mov	r3,r18
8111b204:	3029883a 	mov	r20,r6
8111b208:	9825883a 	mov	r18,r19
8111b20c:	2823883a 	mov	r17,r5
8111b210:	1827883a 	mov	r19,r3
8111b214:	a0800217 	ldw	r2,8(r20)
8111b218:	94e1883a 	add	r16,r18,r19
8111b21c:	a1400117 	ldw	r5,4(r20)
8111b220:	1400010e 	bge	r2,r16,8111b228 <__multiply+0x60>
8111b224:	29400044 	addi	r5,r5,1
8111b228:	111ad600 	call	8111ad60 <_Balloc>
8111b22c:	8415883a 	add	r10,r16,r16
8111b230:	12c00504 	addi	r11,r2,20
8111b234:	5295883a 	add	r10,r10,r10
8111b238:	5a95883a 	add	r10,r11,r10
8111b23c:	5807883a 	mov	r3,r11
8111b240:	5a80032e 	bgeu	r11,r10,8111b250 <__multiply+0x88>
8111b244:	18000015 	stw	zero,0(r3)
8111b248:	18c00104 	addi	r3,r3,4
8111b24c:	1abffd36 	bltu	r3,r10,8111b244 <__reset+0xfb0fb244>
8111b250:	9ce7883a 	add	r19,r19,r19
8111b254:	94a5883a 	add	r18,r18,r18
8111b258:	89800504 	addi	r6,r17,20
8111b25c:	9ce7883a 	add	r19,r19,r19
8111b260:	a3400504 	addi	r13,r20,20
8111b264:	94a5883a 	add	r18,r18,r18
8111b268:	34d9883a 	add	r12,r6,r19
8111b26c:	6c93883a 	add	r9,r13,r18
8111b270:	3300422e 	bgeu	r6,r12,8111b37c <__multiply+0x1b4>
8111b274:	37c00017 	ldw	ra,0(r6)
8111b278:	fbffffcc 	andi	r15,ra,65535
8111b27c:	78001b26 	beq	r15,zero,8111b2ec <__multiply+0x124>
8111b280:	5811883a 	mov	r8,r11
8111b284:	681d883a 	mov	r14,r13
8111b288:	000f883a 	mov	r7,zero
8111b28c:	71000017 	ldw	r4,0(r14)
8111b290:	40c00017 	ldw	r3,0(r8)
8111b294:	73800104 	addi	r14,r14,4
8111b298:	217fffcc 	andi	r5,r4,65535
8111b29c:	2bcb383a 	mul	r5,r5,r15
8111b2a0:	2008d43a 	srli	r4,r4,16
8111b2a4:	1c7fffcc 	andi	r17,r3,65535
8111b2a8:	2c4b883a 	add	r5,r5,r17
8111b2ac:	29cb883a 	add	r5,r5,r7
8111b2b0:	23c9383a 	mul	r4,r4,r15
8111b2b4:	1806d43a 	srli	r3,r3,16
8111b2b8:	280ed43a 	srli	r7,r5,16
8111b2bc:	297fffcc 	andi	r5,r5,65535
8111b2c0:	20c7883a 	add	r3,r4,r3
8111b2c4:	19c7883a 	add	r3,r3,r7
8111b2c8:	1808943a 	slli	r4,r3,16
8111b2cc:	4023883a 	mov	r17,r8
8111b2d0:	180ed43a 	srli	r7,r3,16
8111b2d4:	214ab03a 	or	r5,r4,r5
8111b2d8:	41400015 	stw	r5,0(r8)
8111b2dc:	42000104 	addi	r8,r8,4
8111b2e0:	727fea36 	bltu	r14,r9,8111b28c <__reset+0xfb0fb28c>
8111b2e4:	89c00115 	stw	r7,4(r17)
8111b2e8:	37c00017 	ldw	ra,0(r6)
8111b2ec:	f83ed43a 	srli	ra,ra,16
8111b2f0:	f8001f26 	beq	ra,zero,8111b370 <__multiply+0x1a8>
8111b2f4:	58c00017 	ldw	r3,0(r11)
8111b2f8:	681d883a 	mov	r14,r13
8111b2fc:	581f883a 	mov	r15,r11
8111b300:	1811883a 	mov	r8,r3
8111b304:	5825883a 	mov	r18,r11
8111b308:	000f883a 	mov	r7,zero
8111b30c:	00000106 	br	8111b314 <__multiply+0x14c>
8111b310:	8825883a 	mov	r18,r17
8111b314:	7140000b 	ldhu	r5,0(r14)
8111b318:	4010d43a 	srli	r8,r8,16
8111b31c:	193fffcc 	andi	r4,r3,65535
8111b320:	2fcb383a 	mul	r5,r5,ra
8111b324:	7bc00104 	addi	r15,r15,4
8111b328:	73800104 	addi	r14,r14,4
8111b32c:	2a0b883a 	add	r5,r5,r8
8111b330:	29cb883a 	add	r5,r5,r7
8111b334:	2806943a 	slli	r3,r5,16
8111b338:	94400104 	addi	r17,r18,4
8111b33c:	280ad43a 	srli	r5,r5,16
8111b340:	1908b03a 	or	r4,r3,r4
8111b344:	793fff15 	stw	r4,-4(r15)
8111b348:	70ffff17 	ldw	r3,-4(r14)
8111b34c:	8a000017 	ldw	r8,0(r17)
8111b350:	1806d43a 	srli	r3,r3,16
8111b354:	413fffcc 	andi	r4,r8,65535
8111b358:	1fc7383a 	mul	r3,r3,ra
8111b35c:	1907883a 	add	r3,r3,r4
8111b360:	1947883a 	add	r3,r3,r5
8111b364:	180ed43a 	srli	r7,r3,16
8111b368:	727fe936 	bltu	r14,r9,8111b310 <__reset+0xfb0fb310>
8111b36c:	90c00115 	stw	r3,4(r18)
8111b370:	31800104 	addi	r6,r6,4
8111b374:	5ac00104 	addi	r11,r11,4
8111b378:	333fbe36 	bltu	r6,r12,8111b274 <__reset+0xfb0fb274>
8111b37c:	0400090e 	bge	zero,r16,8111b3a4 <__multiply+0x1dc>
8111b380:	50ffff17 	ldw	r3,-4(r10)
8111b384:	52bfff04 	addi	r10,r10,-4
8111b388:	18000326 	beq	r3,zero,8111b398 <__multiply+0x1d0>
8111b38c:	00000506 	br	8111b3a4 <__multiply+0x1dc>
8111b390:	50c00017 	ldw	r3,0(r10)
8111b394:	1800031e 	bne	r3,zero,8111b3a4 <__multiply+0x1dc>
8111b398:	843fffc4 	addi	r16,r16,-1
8111b39c:	52bfff04 	addi	r10,r10,-4
8111b3a0:	803ffb1e 	bne	r16,zero,8111b390 <__reset+0xfb0fb390>
8111b3a4:	14000415 	stw	r16,16(r2)
8111b3a8:	dfc00517 	ldw	ra,20(sp)
8111b3ac:	dd000417 	ldw	r20,16(sp)
8111b3b0:	dcc00317 	ldw	r19,12(sp)
8111b3b4:	dc800217 	ldw	r18,8(sp)
8111b3b8:	dc400117 	ldw	r17,4(sp)
8111b3bc:	dc000017 	ldw	r16,0(sp)
8111b3c0:	dec00604 	addi	sp,sp,24
8111b3c4:	f800283a 	ret

8111b3c8 <__pow5mult>:
8111b3c8:	defffa04 	addi	sp,sp,-24
8111b3cc:	de00012e 	bgeu	sp,et,8111b3d4 <__pow5mult+0xc>
8111b3d0:	003b68fa 	trap	3
8111b3d4:	308000cc 	andi	r2,r6,3
8111b3d8:	dcc00315 	stw	r19,12(sp)
8111b3dc:	dc000015 	stw	r16,0(sp)
8111b3e0:	dfc00515 	stw	ra,20(sp)
8111b3e4:	dd000415 	stw	r20,16(sp)
8111b3e8:	dc800215 	stw	r18,8(sp)
8111b3ec:	dc400115 	stw	r17,4(sp)
8111b3f0:	3021883a 	mov	r16,r6
8111b3f4:	2027883a 	mov	r19,r4
8111b3f8:	10002f1e 	bne	r2,zero,8111b4b8 <__pow5mult+0xf0>
8111b3fc:	2825883a 	mov	r18,r5
8111b400:	8021d0ba 	srai	r16,r16,2
8111b404:	80001a26 	beq	r16,zero,8111b470 <__pow5mult+0xa8>
8111b408:	9c401217 	ldw	r17,72(r19)
8111b40c:	8800061e 	bne	r17,zero,8111b428 <__pow5mult+0x60>
8111b410:	00003406 	br	8111b4e4 <__pow5mult+0x11c>
8111b414:	8021d07a 	srai	r16,r16,1
8111b418:	80001526 	beq	r16,zero,8111b470 <__pow5mult+0xa8>
8111b41c:	88800017 	ldw	r2,0(r17)
8111b420:	10001c26 	beq	r2,zero,8111b494 <__pow5mult+0xcc>
8111b424:	1023883a 	mov	r17,r2
8111b428:	8080004c 	andi	r2,r16,1
8111b42c:	103ff926 	beq	r2,zero,8111b414 <__reset+0xfb0fb414>
8111b430:	880d883a 	mov	r6,r17
8111b434:	900b883a 	mov	r5,r18
8111b438:	9809883a 	mov	r4,r19
8111b43c:	111b1c80 	call	8111b1c8 <__multiply>
8111b440:	90001b26 	beq	r18,zero,8111b4b0 <__pow5mult+0xe8>
8111b444:	91000117 	ldw	r4,4(r18)
8111b448:	98c01317 	ldw	r3,76(r19)
8111b44c:	8021d07a 	srai	r16,r16,1
8111b450:	2109883a 	add	r4,r4,r4
8111b454:	2109883a 	add	r4,r4,r4
8111b458:	1907883a 	add	r3,r3,r4
8111b45c:	19000017 	ldw	r4,0(r3)
8111b460:	91000015 	stw	r4,0(r18)
8111b464:	1c800015 	stw	r18,0(r3)
8111b468:	1025883a 	mov	r18,r2
8111b46c:	803feb1e 	bne	r16,zero,8111b41c <__reset+0xfb0fb41c>
8111b470:	9005883a 	mov	r2,r18
8111b474:	dfc00517 	ldw	ra,20(sp)
8111b478:	dd000417 	ldw	r20,16(sp)
8111b47c:	dcc00317 	ldw	r19,12(sp)
8111b480:	dc800217 	ldw	r18,8(sp)
8111b484:	dc400117 	ldw	r17,4(sp)
8111b488:	dc000017 	ldw	r16,0(sp)
8111b48c:	dec00604 	addi	sp,sp,24
8111b490:	f800283a 	ret
8111b494:	880d883a 	mov	r6,r17
8111b498:	880b883a 	mov	r5,r17
8111b49c:	9809883a 	mov	r4,r19
8111b4a0:	111b1c80 	call	8111b1c8 <__multiply>
8111b4a4:	88800015 	stw	r2,0(r17)
8111b4a8:	10000015 	stw	zero,0(r2)
8111b4ac:	003fdd06 	br	8111b424 <__reset+0xfb0fb424>
8111b4b0:	1025883a 	mov	r18,r2
8111b4b4:	003fd706 	br	8111b414 <__reset+0xfb0fb414>
8111b4b8:	10bfffc4 	addi	r2,r2,-1
8111b4bc:	1085883a 	add	r2,r2,r2
8111b4c0:	00e04534 	movhi	r3,33044
8111b4c4:	18f12e04 	addi	r3,r3,-15176
8111b4c8:	1085883a 	add	r2,r2,r2
8111b4cc:	1885883a 	add	r2,r3,r2
8111b4d0:	11800017 	ldw	r6,0(r2)
8111b4d4:	000f883a 	mov	r7,zero
8111b4d8:	111ae380 	call	8111ae38 <__multadd>
8111b4dc:	1025883a 	mov	r18,r2
8111b4e0:	003fc706 	br	8111b400 <__reset+0xfb0fb400>
8111b4e4:	05000044 	movi	r20,1
8111b4e8:	a00b883a 	mov	r5,r20
8111b4ec:	9809883a 	mov	r4,r19
8111b4f0:	111ad600 	call	8111ad60 <_Balloc>
8111b4f4:	1023883a 	mov	r17,r2
8111b4f8:	00809c44 	movi	r2,625
8111b4fc:	88800515 	stw	r2,20(r17)
8111b500:	8d000415 	stw	r20,16(r17)
8111b504:	9c401215 	stw	r17,72(r19)
8111b508:	88000015 	stw	zero,0(r17)
8111b50c:	003fc606 	br	8111b428 <__reset+0xfb0fb428>

8111b510 <__lshift>:
8111b510:	defff904 	addi	sp,sp,-28
8111b514:	de00012e 	bgeu	sp,et,8111b51c <__lshift+0xc>
8111b518:	003b68fa 	trap	3
8111b51c:	dd400515 	stw	r21,20(sp)
8111b520:	dcc00315 	stw	r19,12(sp)
8111b524:	302bd17a 	srai	r21,r6,5
8111b528:	2cc00417 	ldw	r19,16(r5)
8111b52c:	28800217 	ldw	r2,8(r5)
8111b530:	dd000415 	stw	r20,16(sp)
8111b534:	ace7883a 	add	r19,r21,r19
8111b538:	dc800215 	stw	r18,8(sp)
8111b53c:	dc400115 	stw	r17,4(sp)
8111b540:	dc000015 	stw	r16,0(sp)
8111b544:	dfc00615 	stw	ra,24(sp)
8111b548:	9c000044 	addi	r16,r19,1
8111b54c:	2823883a 	mov	r17,r5
8111b550:	3029883a 	mov	r20,r6
8111b554:	2025883a 	mov	r18,r4
8111b558:	29400117 	ldw	r5,4(r5)
8111b55c:	1400030e 	bge	r2,r16,8111b56c <__lshift+0x5c>
8111b560:	1085883a 	add	r2,r2,r2
8111b564:	29400044 	addi	r5,r5,1
8111b568:	143ffd16 	blt	r2,r16,8111b560 <__reset+0xfb0fb560>
8111b56c:	9009883a 	mov	r4,r18
8111b570:	111ad600 	call	8111ad60 <_Balloc>
8111b574:	10c00504 	addi	r3,r2,20
8111b578:	0540070e 	bge	zero,r21,8111b598 <__lshift+0x88>
8111b57c:	ad6b883a 	add	r21,r21,r21
8111b580:	ad6b883a 	add	r21,r21,r21
8111b584:	1809883a 	mov	r4,r3
8111b588:	1d47883a 	add	r3,r3,r21
8111b58c:	20000015 	stw	zero,0(r4)
8111b590:	21000104 	addi	r4,r4,4
8111b594:	193ffd1e 	bne	r3,r4,8111b58c <__reset+0xfb0fb58c>
8111b598:	8a000417 	ldw	r8,16(r17)
8111b59c:	89000504 	addi	r4,r17,20
8111b5a0:	a18007cc 	andi	r6,r20,31
8111b5a4:	4211883a 	add	r8,r8,r8
8111b5a8:	4211883a 	add	r8,r8,r8
8111b5ac:	2211883a 	add	r8,r4,r8
8111b5b0:	30002326 	beq	r6,zero,8111b640 <__lshift+0x130>
8111b5b4:	02400804 	movi	r9,32
8111b5b8:	4993c83a 	sub	r9,r9,r6
8111b5bc:	000b883a 	mov	r5,zero
8111b5c0:	21c00017 	ldw	r7,0(r4)
8111b5c4:	1815883a 	mov	r10,r3
8111b5c8:	18c00104 	addi	r3,r3,4
8111b5cc:	398e983a 	sll	r7,r7,r6
8111b5d0:	21000104 	addi	r4,r4,4
8111b5d4:	394ab03a 	or	r5,r7,r5
8111b5d8:	197fff15 	stw	r5,-4(r3)
8111b5dc:	217fff17 	ldw	r5,-4(r4)
8111b5e0:	2a4ad83a 	srl	r5,r5,r9
8111b5e4:	223ff636 	bltu	r4,r8,8111b5c0 <__reset+0xfb0fb5c0>
8111b5e8:	51400115 	stw	r5,4(r10)
8111b5ec:	28001a1e 	bne	r5,zero,8111b658 <__lshift+0x148>
8111b5f0:	843fffc4 	addi	r16,r16,-1
8111b5f4:	14000415 	stw	r16,16(r2)
8111b5f8:	88000826 	beq	r17,zero,8111b61c <__lshift+0x10c>
8111b5fc:	89000117 	ldw	r4,4(r17)
8111b600:	90c01317 	ldw	r3,76(r18)
8111b604:	2109883a 	add	r4,r4,r4
8111b608:	2109883a 	add	r4,r4,r4
8111b60c:	1907883a 	add	r3,r3,r4
8111b610:	19000017 	ldw	r4,0(r3)
8111b614:	89000015 	stw	r4,0(r17)
8111b618:	1c400015 	stw	r17,0(r3)
8111b61c:	dfc00617 	ldw	ra,24(sp)
8111b620:	dd400517 	ldw	r21,20(sp)
8111b624:	dd000417 	ldw	r20,16(sp)
8111b628:	dcc00317 	ldw	r19,12(sp)
8111b62c:	dc800217 	ldw	r18,8(sp)
8111b630:	dc400117 	ldw	r17,4(sp)
8111b634:	dc000017 	ldw	r16,0(sp)
8111b638:	dec00704 	addi	sp,sp,28
8111b63c:	f800283a 	ret
8111b640:	21400017 	ldw	r5,0(r4)
8111b644:	18c00104 	addi	r3,r3,4
8111b648:	21000104 	addi	r4,r4,4
8111b64c:	197fff15 	stw	r5,-4(r3)
8111b650:	223ffb36 	bltu	r4,r8,8111b640 <__reset+0xfb0fb640>
8111b654:	003fe606 	br	8111b5f0 <__reset+0xfb0fb5f0>
8111b658:	9c000084 	addi	r16,r19,2
8111b65c:	003fe406 	br	8111b5f0 <__reset+0xfb0fb5f0>

8111b660 <__mcmp>:
8111b660:	20800417 	ldw	r2,16(r4)
8111b664:	28c00417 	ldw	r3,16(r5)
8111b668:	10c5c83a 	sub	r2,r2,r3
8111b66c:	1000111e 	bne	r2,zero,8111b6b4 <__mcmp+0x54>
8111b670:	18c7883a 	add	r3,r3,r3
8111b674:	18c7883a 	add	r3,r3,r3
8111b678:	21000504 	addi	r4,r4,20
8111b67c:	29400504 	addi	r5,r5,20
8111b680:	20c5883a 	add	r2,r4,r3
8111b684:	28cb883a 	add	r5,r5,r3
8111b688:	00000106 	br	8111b690 <__mcmp+0x30>
8111b68c:	20800a2e 	bgeu	r4,r2,8111b6b8 <__mcmp+0x58>
8111b690:	10bfff04 	addi	r2,r2,-4
8111b694:	297fff04 	addi	r5,r5,-4
8111b698:	11800017 	ldw	r6,0(r2)
8111b69c:	28c00017 	ldw	r3,0(r5)
8111b6a0:	30fffa26 	beq	r6,r3,8111b68c <__reset+0xfb0fb68c>
8111b6a4:	30c00236 	bltu	r6,r3,8111b6b0 <__mcmp+0x50>
8111b6a8:	00800044 	movi	r2,1
8111b6ac:	f800283a 	ret
8111b6b0:	00bfffc4 	movi	r2,-1
8111b6b4:	f800283a 	ret
8111b6b8:	0005883a 	mov	r2,zero
8111b6bc:	f800283a 	ret

8111b6c0 <__mdiff>:
8111b6c0:	defffa04 	addi	sp,sp,-24
8111b6c4:	de00012e 	bgeu	sp,et,8111b6cc <__mdiff+0xc>
8111b6c8:	003b68fa 	trap	3
8111b6cc:	28c00417 	ldw	r3,16(r5)
8111b6d0:	30800417 	ldw	r2,16(r6)
8111b6d4:	dcc00315 	stw	r19,12(sp)
8111b6d8:	dc800215 	stw	r18,8(sp)
8111b6dc:	dfc00515 	stw	ra,20(sp)
8111b6e0:	dd000415 	stw	r20,16(sp)
8111b6e4:	dc400115 	stw	r17,4(sp)
8111b6e8:	dc000015 	stw	r16,0(sp)
8111b6ec:	1887c83a 	sub	r3,r3,r2
8111b6f0:	2825883a 	mov	r18,r5
8111b6f4:	3027883a 	mov	r19,r6
8111b6f8:	1800141e 	bne	r3,zero,8111b74c <__mdiff+0x8c>
8111b6fc:	1085883a 	add	r2,r2,r2
8111b700:	1085883a 	add	r2,r2,r2
8111b704:	2a000504 	addi	r8,r5,20
8111b708:	34000504 	addi	r16,r6,20
8111b70c:	4087883a 	add	r3,r8,r2
8111b710:	8085883a 	add	r2,r16,r2
8111b714:	00000106 	br	8111b71c <__mdiff+0x5c>
8111b718:	40c0592e 	bgeu	r8,r3,8111b880 <__mdiff+0x1c0>
8111b71c:	18ffff04 	addi	r3,r3,-4
8111b720:	10bfff04 	addi	r2,r2,-4
8111b724:	19c00017 	ldw	r7,0(r3)
8111b728:	11400017 	ldw	r5,0(r2)
8111b72c:	397ffa26 	beq	r7,r5,8111b718 <__reset+0xfb0fb718>
8111b730:	3940592e 	bgeu	r7,r5,8111b898 <__mdiff+0x1d8>
8111b734:	9005883a 	mov	r2,r18
8111b738:	4023883a 	mov	r17,r8
8111b73c:	9825883a 	mov	r18,r19
8111b740:	05000044 	movi	r20,1
8111b744:	1027883a 	mov	r19,r2
8111b748:	00000406 	br	8111b75c <__mdiff+0x9c>
8111b74c:	18005616 	blt	r3,zero,8111b8a8 <__mdiff+0x1e8>
8111b750:	34400504 	addi	r17,r6,20
8111b754:	2c000504 	addi	r16,r5,20
8111b758:	0029883a 	mov	r20,zero
8111b75c:	91400117 	ldw	r5,4(r18)
8111b760:	111ad600 	call	8111ad60 <_Balloc>
8111b764:	92400417 	ldw	r9,16(r18)
8111b768:	9b000417 	ldw	r12,16(r19)
8111b76c:	12c00504 	addi	r11,r2,20
8111b770:	4a51883a 	add	r8,r9,r9
8111b774:	6319883a 	add	r12,r12,r12
8111b778:	4211883a 	add	r8,r8,r8
8111b77c:	6319883a 	add	r12,r12,r12
8111b780:	15000315 	stw	r20,12(r2)
8111b784:	8211883a 	add	r8,r16,r8
8111b788:	8b19883a 	add	r12,r17,r12
8111b78c:	0007883a 	mov	r3,zero
8111b790:	81400017 	ldw	r5,0(r16)
8111b794:	89c00017 	ldw	r7,0(r17)
8111b798:	59800104 	addi	r6,r11,4
8111b79c:	293fffcc 	andi	r4,r5,65535
8111b7a0:	20c7883a 	add	r3,r4,r3
8111b7a4:	393fffcc 	andi	r4,r7,65535
8111b7a8:	1909c83a 	sub	r4,r3,r4
8111b7ac:	280ad43a 	srli	r5,r5,16
8111b7b0:	380ed43a 	srli	r7,r7,16
8111b7b4:	2007d43a 	srai	r3,r4,16
8111b7b8:	213fffcc 	andi	r4,r4,65535
8111b7bc:	29cbc83a 	sub	r5,r5,r7
8111b7c0:	28c7883a 	add	r3,r5,r3
8111b7c4:	180a943a 	slli	r5,r3,16
8111b7c8:	8c400104 	addi	r17,r17,4
8111b7cc:	84000104 	addi	r16,r16,4
8111b7d0:	2908b03a 	or	r4,r5,r4
8111b7d4:	59000015 	stw	r4,0(r11)
8111b7d8:	1807d43a 	srai	r3,r3,16
8111b7dc:	3015883a 	mov	r10,r6
8111b7e0:	3017883a 	mov	r11,r6
8111b7e4:	8b3fea36 	bltu	r17,r12,8111b790 <__reset+0xfb0fb790>
8111b7e8:	8200162e 	bgeu	r16,r8,8111b844 <__mdiff+0x184>
8111b7ec:	8017883a 	mov	r11,r16
8111b7f0:	59400017 	ldw	r5,0(r11)
8111b7f4:	31800104 	addi	r6,r6,4
8111b7f8:	5ac00104 	addi	r11,r11,4
8111b7fc:	293fffcc 	andi	r4,r5,65535
8111b800:	20c7883a 	add	r3,r4,r3
8111b804:	280ed43a 	srli	r7,r5,16
8111b808:	180bd43a 	srai	r5,r3,16
8111b80c:	193fffcc 	andi	r4,r3,65535
8111b810:	3947883a 	add	r3,r7,r5
8111b814:	180a943a 	slli	r5,r3,16
8111b818:	1807d43a 	srai	r3,r3,16
8111b81c:	2908b03a 	or	r4,r5,r4
8111b820:	313fff15 	stw	r4,-4(r6)
8111b824:	5a3ff236 	bltu	r11,r8,8111b7f0 <__reset+0xfb0fb7f0>
8111b828:	0406303a 	nor	r3,zero,r16
8111b82c:	1a07883a 	add	r3,r3,r8
8111b830:	1806d0ba 	srli	r3,r3,2
8111b834:	18c00044 	addi	r3,r3,1
8111b838:	18c7883a 	add	r3,r3,r3
8111b83c:	18c7883a 	add	r3,r3,r3
8111b840:	50d5883a 	add	r10,r10,r3
8111b844:	50ffff04 	addi	r3,r10,-4
8111b848:	2000041e 	bne	r4,zero,8111b85c <__mdiff+0x19c>
8111b84c:	18ffff04 	addi	r3,r3,-4
8111b850:	19000017 	ldw	r4,0(r3)
8111b854:	4a7fffc4 	addi	r9,r9,-1
8111b858:	203ffc26 	beq	r4,zero,8111b84c <__reset+0xfb0fb84c>
8111b85c:	12400415 	stw	r9,16(r2)
8111b860:	dfc00517 	ldw	ra,20(sp)
8111b864:	dd000417 	ldw	r20,16(sp)
8111b868:	dcc00317 	ldw	r19,12(sp)
8111b86c:	dc800217 	ldw	r18,8(sp)
8111b870:	dc400117 	ldw	r17,4(sp)
8111b874:	dc000017 	ldw	r16,0(sp)
8111b878:	dec00604 	addi	sp,sp,24
8111b87c:	f800283a 	ret
8111b880:	000b883a 	mov	r5,zero
8111b884:	111ad600 	call	8111ad60 <_Balloc>
8111b888:	00c00044 	movi	r3,1
8111b88c:	10c00415 	stw	r3,16(r2)
8111b890:	10000515 	stw	zero,20(r2)
8111b894:	003ff206 	br	8111b860 <__reset+0xfb0fb860>
8111b898:	8023883a 	mov	r17,r16
8111b89c:	0029883a 	mov	r20,zero
8111b8a0:	4021883a 	mov	r16,r8
8111b8a4:	003fad06 	br	8111b75c <__reset+0xfb0fb75c>
8111b8a8:	9005883a 	mov	r2,r18
8111b8ac:	94400504 	addi	r17,r18,20
8111b8b0:	9c000504 	addi	r16,r19,20
8111b8b4:	9825883a 	mov	r18,r19
8111b8b8:	05000044 	movi	r20,1
8111b8bc:	1027883a 	mov	r19,r2
8111b8c0:	003fa606 	br	8111b75c <__reset+0xfb0fb75c>

8111b8c4 <__ulp>:
8111b8c4:	295ffc2c 	andhi	r5,r5,32752
8111b8c8:	00bf3034 	movhi	r2,64704
8111b8cc:	2887883a 	add	r3,r5,r2
8111b8d0:	00c0020e 	bge	zero,r3,8111b8dc <__ulp+0x18>
8111b8d4:	0005883a 	mov	r2,zero
8111b8d8:	f800283a 	ret
8111b8dc:	00c7c83a 	sub	r3,zero,r3
8111b8e0:	1807d53a 	srai	r3,r3,20
8111b8e4:	008004c4 	movi	r2,19
8111b8e8:	10c00b0e 	bge	r2,r3,8111b918 <__ulp+0x54>
8111b8ec:	18bffb04 	addi	r2,r3,-20
8111b8f0:	01000784 	movi	r4,30
8111b8f4:	0007883a 	mov	r3,zero
8111b8f8:	20800516 	blt	r4,r2,8111b910 <__ulp+0x4c>
8111b8fc:	010007c4 	movi	r4,31
8111b900:	2089c83a 	sub	r4,r4,r2
8111b904:	00800044 	movi	r2,1
8111b908:	1104983a 	sll	r2,r2,r4
8111b90c:	f800283a 	ret
8111b910:	00800044 	movi	r2,1
8111b914:	f800283a 	ret
8111b918:	01400234 	movhi	r5,8
8111b91c:	28c7d83a 	sra	r3,r5,r3
8111b920:	0005883a 	mov	r2,zero
8111b924:	f800283a 	ret

8111b928 <__b2d>:
8111b928:	defffa04 	addi	sp,sp,-24
8111b92c:	de00012e 	bgeu	sp,et,8111b934 <__b2d+0xc>
8111b930:	003b68fa 	trap	3
8111b934:	dc000015 	stw	r16,0(sp)
8111b938:	24000417 	ldw	r16,16(r4)
8111b93c:	dc400115 	stw	r17,4(sp)
8111b940:	24400504 	addi	r17,r4,20
8111b944:	8421883a 	add	r16,r16,r16
8111b948:	8421883a 	add	r16,r16,r16
8111b94c:	8c21883a 	add	r16,r17,r16
8111b950:	dc800215 	stw	r18,8(sp)
8111b954:	84bfff17 	ldw	r18,-4(r16)
8111b958:	dd000415 	stw	r20,16(sp)
8111b95c:	dcc00315 	stw	r19,12(sp)
8111b960:	9009883a 	mov	r4,r18
8111b964:	2829883a 	mov	r20,r5
8111b968:	dfc00515 	stw	ra,20(sp)
8111b96c:	111b06c0 	call	8111b06c <__hi0bits>
8111b970:	00c00804 	movi	r3,32
8111b974:	1889c83a 	sub	r4,r3,r2
8111b978:	a1000015 	stw	r4,0(r20)
8111b97c:	01000284 	movi	r4,10
8111b980:	84ffff04 	addi	r19,r16,-4
8111b984:	20801216 	blt	r4,r2,8111b9d0 <__b2d+0xa8>
8111b988:	018002c4 	movi	r6,11
8111b98c:	308dc83a 	sub	r6,r6,r2
8111b990:	9186d83a 	srl	r3,r18,r6
8111b994:	18cffc34 	orhi	r3,r3,16368
8111b998:	8cc0212e 	bgeu	r17,r19,8111ba20 <__b2d+0xf8>
8111b99c:	813ffe17 	ldw	r4,-8(r16)
8111b9a0:	218cd83a 	srl	r6,r4,r6
8111b9a4:	10800544 	addi	r2,r2,21
8111b9a8:	9084983a 	sll	r2,r18,r2
8111b9ac:	1184b03a 	or	r2,r2,r6
8111b9b0:	dfc00517 	ldw	ra,20(sp)
8111b9b4:	dd000417 	ldw	r20,16(sp)
8111b9b8:	dcc00317 	ldw	r19,12(sp)
8111b9bc:	dc800217 	ldw	r18,8(sp)
8111b9c0:	dc400117 	ldw	r17,4(sp)
8111b9c4:	dc000017 	ldw	r16,0(sp)
8111b9c8:	dec00604 	addi	sp,sp,24
8111b9cc:	f800283a 	ret
8111b9d0:	8cc00f2e 	bgeu	r17,r19,8111ba10 <__b2d+0xe8>
8111b9d4:	117ffd44 	addi	r5,r2,-11
8111b9d8:	80bffe17 	ldw	r2,-8(r16)
8111b9dc:	28000e26 	beq	r5,zero,8111ba18 <__b2d+0xf0>
8111b9e0:	1949c83a 	sub	r4,r3,r5
8111b9e4:	9164983a 	sll	r18,r18,r5
8111b9e8:	1106d83a 	srl	r3,r2,r4
8111b9ec:	81bffe04 	addi	r6,r16,-8
8111b9f0:	948ffc34 	orhi	r18,r18,16368
8111b9f4:	90c6b03a 	or	r3,r18,r3
8111b9f8:	89800e2e 	bgeu	r17,r6,8111ba34 <__b2d+0x10c>
8111b9fc:	81bffd17 	ldw	r6,-12(r16)
8111ba00:	1144983a 	sll	r2,r2,r5
8111ba04:	310ad83a 	srl	r5,r6,r4
8111ba08:	2884b03a 	or	r2,r5,r2
8111ba0c:	003fe806 	br	8111b9b0 <__reset+0xfb0fb9b0>
8111ba10:	10bffd44 	addi	r2,r2,-11
8111ba14:	1000041e 	bne	r2,zero,8111ba28 <__b2d+0x100>
8111ba18:	90cffc34 	orhi	r3,r18,16368
8111ba1c:	003fe406 	br	8111b9b0 <__reset+0xfb0fb9b0>
8111ba20:	000d883a 	mov	r6,zero
8111ba24:	003fdf06 	br	8111b9a4 <__reset+0xfb0fb9a4>
8111ba28:	90a4983a 	sll	r18,r18,r2
8111ba2c:	0005883a 	mov	r2,zero
8111ba30:	003ff906 	br	8111ba18 <__reset+0xfb0fba18>
8111ba34:	1144983a 	sll	r2,r2,r5
8111ba38:	003fdd06 	br	8111b9b0 <__reset+0xfb0fb9b0>

8111ba3c <__d2b>:
8111ba3c:	defff804 	addi	sp,sp,-32
8111ba40:	de00012e 	bgeu	sp,et,8111ba48 <__d2b+0xc>
8111ba44:	003b68fa 	trap	3
8111ba48:	dc000215 	stw	r16,8(sp)
8111ba4c:	3021883a 	mov	r16,r6
8111ba50:	dc400315 	stw	r17,12(sp)
8111ba54:	8022907a 	slli	r17,r16,1
8111ba58:	dd000615 	stw	r20,24(sp)
8111ba5c:	2829883a 	mov	r20,r5
8111ba60:	01400044 	movi	r5,1
8111ba64:	dcc00515 	stw	r19,20(sp)
8111ba68:	dc800415 	stw	r18,16(sp)
8111ba6c:	dfc00715 	stw	ra,28(sp)
8111ba70:	3825883a 	mov	r18,r7
8111ba74:	8822d57a 	srli	r17,r17,21
8111ba78:	111ad600 	call	8111ad60 <_Balloc>
8111ba7c:	1027883a 	mov	r19,r2
8111ba80:	00800434 	movhi	r2,16
8111ba84:	10bfffc4 	addi	r2,r2,-1
8111ba88:	808c703a 	and	r6,r16,r2
8111ba8c:	88000126 	beq	r17,zero,8111ba94 <__d2b+0x58>
8111ba90:	31800434 	orhi	r6,r6,16
8111ba94:	d9800015 	stw	r6,0(sp)
8111ba98:	a0002426 	beq	r20,zero,8111bb2c <__d2b+0xf0>
8111ba9c:	d9000104 	addi	r4,sp,4
8111baa0:	dd000115 	stw	r20,4(sp)
8111baa4:	111b0d40 	call	8111b0d4 <__lo0bits>
8111baa8:	d8c00017 	ldw	r3,0(sp)
8111baac:	10002f1e 	bne	r2,zero,8111bb6c <__d2b+0x130>
8111bab0:	d9000117 	ldw	r4,4(sp)
8111bab4:	99000515 	stw	r4,20(r19)
8111bab8:	1821003a 	cmpeq	r16,r3,zero
8111babc:	01000084 	movi	r4,2
8111bac0:	2421c83a 	sub	r16,r4,r16
8111bac4:	98c00615 	stw	r3,24(r19)
8111bac8:	9c000415 	stw	r16,16(r19)
8111bacc:	88001f1e 	bne	r17,zero,8111bb4c <__d2b+0x110>
8111bad0:	10bef384 	addi	r2,r2,-1074
8111bad4:	90800015 	stw	r2,0(r18)
8111bad8:	00900034 	movhi	r2,16384
8111badc:	10bfffc4 	addi	r2,r2,-1
8111bae0:	8085883a 	add	r2,r16,r2
8111bae4:	1085883a 	add	r2,r2,r2
8111bae8:	1085883a 	add	r2,r2,r2
8111baec:	9885883a 	add	r2,r19,r2
8111baf0:	11000517 	ldw	r4,20(r2)
8111baf4:	8020917a 	slli	r16,r16,5
8111baf8:	111b06c0 	call	8111b06c <__hi0bits>
8111bafc:	d8c00817 	ldw	r3,32(sp)
8111bb00:	8085c83a 	sub	r2,r16,r2
8111bb04:	18800015 	stw	r2,0(r3)
8111bb08:	9805883a 	mov	r2,r19
8111bb0c:	dfc00717 	ldw	ra,28(sp)
8111bb10:	dd000617 	ldw	r20,24(sp)
8111bb14:	dcc00517 	ldw	r19,20(sp)
8111bb18:	dc800417 	ldw	r18,16(sp)
8111bb1c:	dc400317 	ldw	r17,12(sp)
8111bb20:	dc000217 	ldw	r16,8(sp)
8111bb24:	dec00804 	addi	sp,sp,32
8111bb28:	f800283a 	ret
8111bb2c:	d809883a 	mov	r4,sp
8111bb30:	111b0d40 	call	8111b0d4 <__lo0bits>
8111bb34:	d8c00017 	ldw	r3,0(sp)
8111bb38:	04000044 	movi	r16,1
8111bb3c:	9c000415 	stw	r16,16(r19)
8111bb40:	98c00515 	stw	r3,20(r19)
8111bb44:	10800804 	addi	r2,r2,32
8111bb48:	883fe126 	beq	r17,zero,8111bad0 <__reset+0xfb0fbad0>
8111bb4c:	00c00d44 	movi	r3,53
8111bb50:	8c7ef344 	addi	r17,r17,-1075
8111bb54:	88a3883a 	add	r17,r17,r2
8111bb58:	1885c83a 	sub	r2,r3,r2
8111bb5c:	d8c00817 	ldw	r3,32(sp)
8111bb60:	94400015 	stw	r17,0(r18)
8111bb64:	18800015 	stw	r2,0(r3)
8111bb68:	003fe706 	br	8111bb08 <__reset+0xfb0fbb08>
8111bb6c:	01000804 	movi	r4,32
8111bb70:	2089c83a 	sub	r4,r4,r2
8111bb74:	1908983a 	sll	r4,r3,r4
8111bb78:	d9400117 	ldw	r5,4(sp)
8111bb7c:	1886d83a 	srl	r3,r3,r2
8111bb80:	2148b03a 	or	r4,r4,r5
8111bb84:	99000515 	stw	r4,20(r19)
8111bb88:	d8c00015 	stw	r3,0(sp)
8111bb8c:	003fca06 	br	8111bab8 <__reset+0xfb0fbab8>

8111bb90 <__ratio>:
8111bb90:	defff904 	addi	sp,sp,-28
8111bb94:	de00012e 	bgeu	sp,et,8111bb9c <__ratio+0xc>
8111bb98:	003b68fa 	trap	3
8111bb9c:	dc400315 	stw	r17,12(sp)
8111bba0:	2823883a 	mov	r17,r5
8111bba4:	d9400104 	addi	r5,sp,4
8111bba8:	dfc00615 	stw	ra,24(sp)
8111bbac:	dcc00515 	stw	r19,20(sp)
8111bbb0:	dc800415 	stw	r18,16(sp)
8111bbb4:	2027883a 	mov	r19,r4
8111bbb8:	dc000215 	stw	r16,8(sp)
8111bbbc:	111b9280 	call	8111b928 <__b2d>
8111bbc0:	d80b883a 	mov	r5,sp
8111bbc4:	8809883a 	mov	r4,r17
8111bbc8:	1025883a 	mov	r18,r2
8111bbcc:	1821883a 	mov	r16,r3
8111bbd0:	111b9280 	call	8111b928 <__b2d>
8111bbd4:	8a000417 	ldw	r8,16(r17)
8111bbd8:	99000417 	ldw	r4,16(r19)
8111bbdc:	d9400117 	ldw	r5,4(sp)
8111bbe0:	2209c83a 	sub	r4,r4,r8
8111bbe4:	2010917a 	slli	r8,r4,5
8111bbe8:	d9000017 	ldw	r4,0(sp)
8111bbec:	2909c83a 	sub	r4,r5,r4
8111bbf0:	4109883a 	add	r4,r8,r4
8111bbf4:	01000e0e 	bge	zero,r4,8111bc30 <__ratio+0xa0>
8111bbf8:	2008953a 	slli	r4,r4,20
8111bbfc:	2421883a 	add	r16,r4,r16
8111bc00:	100d883a 	mov	r6,r2
8111bc04:	180f883a 	mov	r7,r3
8111bc08:	9009883a 	mov	r4,r18
8111bc0c:	800b883a 	mov	r5,r16
8111bc10:	1123de40 	call	81123de4 <__divdf3>
8111bc14:	dfc00617 	ldw	ra,24(sp)
8111bc18:	dcc00517 	ldw	r19,20(sp)
8111bc1c:	dc800417 	ldw	r18,16(sp)
8111bc20:	dc400317 	ldw	r17,12(sp)
8111bc24:	dc000217 	ldw	r16,8(sp)
8111bc28:	dec00704 	addi	sp,sp,28
8111bc2c:	f800283a 	ret
8111bc30:	2008953a 	slli	r4,r4,20
8111bc34:	1907c83a 	sub	r3,r3,r4
8111bc38:	003ff106 	br	8111bc00 <__reset+0xfb0fbc00>

8111bc3c <_mprec_log10>:
8111bc3c:	defffe04 	addi	sp,sp,-8
8111bc40:	de00012e 	bgeu	sp,et,8111bc48 <_mprec_log10+0xc>
8111bc44:	003b68fa 	trap	3
8111bc48:	008005c4 	movi	r2,23
8111bc4c:	dc000015 	stw	r16,0(sp)
8111bc50:	dfc00115 	stw	ra,4(sp)
8111bc54:	2021883a 	mov	r16,r4
8111bc58:	11000d0e 	bge	r2,r4,8111bc90 <_mprec_log10+0x54>
8111bc5c:	0005883a 	mov	r2,zero
8111bc60:	00cffc34 	movhi	r3,16368
8111bc64:	843fffc4 	addi	r16,r16,-1
8111bc68:	000d883a 	mov	r6,zero
8111bc6c:	01d00934 	movhi	r7,16420
8111bc70:	1009883a 	mov	r4,r2
8111bc74:	180b883a 	mov	r5,r3
8111bc78:	110f2ac0 	call	8110f2ac <__muldf3>
8111bc7c:	803ff91e 	bne	r16,zero,8111bc64 <__reset+0xfb0fbc64>
8111bc80:	dfc00117 	ldw	ra,4(sp)
8111bc84:	dc000017 	ldw	r16,0(sp)
8111bc88:	dec00204 	addi	sp,sp,8
8111bc8c:	f800283a 	ret
8111bc90:	202090fa 	slli	r16,r4,3
8111bc94:	00a04534 	movhi	r2,33044
8111bc98:	10b14504 	addi	r2,r2,-15084
8111bc9c:	1421883a 	add	r16,r2,r16
8111bca0:	80800017 	ldw	r2,0(r16)
8111bca4:	80c00117 	ldw	r3,4(r16)
8111bca8:	dfc00117 	ldw	ra,4(sp)
8111bcac:	dc000017 	ldw	r16,0(sp)
8111bcb0:	dec00204 	addi	sp,sp,8
8111bcb4:	f800283a 	ret

8111bcb8 <__copybits>:
8111bcb8:	297fffc4 	addi	r5,r5,-1
8111bcbc:	280fd17a 	srai	r7,r5,5
8111bcc0:	30c00417 	ldw	r3,16(r6)
8111bcc4:	30800504 	addi	r2,r6,20
8111bcc8:	39c00044 	addi	r7,r7,1
8111bccc:	18c7883a 	add	r3,r3,r3
8111bcd0:	39cf883a 	add	r7,r7,r7
8111bcd4:	18c7883a 	add	r3,r3,r3
8111bcd8:	39cf883a 	add	r7,r7,r7
8111bcdc:	10c7883a 	add	r3,r2,r3
8111bce0:	21cf883a 	add	r7,r4,r7
8111bce4:	10c00d2e 	bgeu	r2,r3,8111bd1c <__copybits+0x64>
8111bce8:	200b883a 	mov	r5,r4
8111bcec:	12000017 	ldw	r8,0(r2)
8111bcf0:	29400104 	addi	r5,r5,4
8111bcf4:	10800104 	addi	r2,r2,4
8111bcf8:	2a3fff15 	stw	r8,-4(r5)
8111bcfc:	10fffb36 	bltu	r2,r3,8111bcec <__reset+0xfb0fbcec>
8111bd00:	1985c83a 	sub	r2,r3,r6
8111bd04:	10bffac4 	addi	r2,r2,-21
8111bd08:	1004d0ba 	srli	r2,r2,2
8111bd0c:	10800044 	addi	r2,r2,1
8111bd10:	1085883a 	add	r2,r2,r2
8111bd14:	1085883a 	add	r2,r2,r2
8111bd18:	2089883a 	add	r4,r4,r2
8111bd1c:	21c0032e 	bgeu	r4,r7,8111bd2c <__copybits+0x74>
8111bd20:	20000015 	stw	zero,0(r4)
8111bd24:	21000104 	addi	r4,r4,4
8111bd28:	21fffd36 	bltu	r4,r7,8111bd20 <__reset+0xfb0fbd20>
8111bd2c:	f800283a 	ret

8111bd30 <__any_on>:
8111bd30:	20c00417 	ldw	r3,16(r4)
8111bd34:	2805d17a 	srai	r2,r5,5
8111bd38:	21000504 	addi	r4,r4,20
8111bd3c:	18800d0e 	bge	r3,r2,8111bd74 <__any_on+0x44>
8111bd40:	18c7883a 	add	r3,r3,r3
8111bd44:	18c7883a 	add	r3,r3,r3
8111bd48:	20c7883a 	add	r3,r4,r3
8111bd4c:	20c0192e 	bgeu	r4,r3,8111bdb4 <__any_on+0x84>
8111bd50:	18bfff17 	ldw	r2,-4(r3)
8111bd54:	18ffff04 	addi	r3,r3,-4
8111bd58:	1000041e 	bne	r2,zero,8111bd6c <__any_on+0x3c>
8111bd5c:	20c0142e 	bgeu	r4,r3,8111bdb0 <__any_on+0x80>
8111bd60:	18ffff04 	addi	r3,r3,-4
8111bd64:	19400017 	ldw	r5,0(r3)
8111bd68:	283ffc26 	beq	r5,zero,8111bd5c <__reset+0xfb0fbd5c>
8111bd6c:	00800044 	movi	r2,1
8111bd70:	f800283a 	ret
8111bd74:	10c00a0e 	bge	r2,r3,8111bda0 <__any_on+0x70>
8111bd78:	1085883a 	add	r2,r2,r2
8111bd7c:	1085883a 	add	r2,r2,r2
8111bd80:	294007cc 	andi	r5,r5,31
8111bd84:	2087883a 	add	r3,r4,r2
8111bd88:	283ff026 	beq	r5,zero,8111bd4c <__reset+0xfb0fbd4c>
8111bd8c:	19800017 	ldw	r6,0(r3)
8111bd90:	3144d83a 	srl	r2,r6,r5
8111bd94:	114a983a 	sll	r5,r2,r5
8111bd98:	317ff41e 	bne	r6,r5,8111bd6c <__reset+0xfb0fbd6c>
8111bd9c:	003feb06 	br	8111bd4c <__reset+0xfb0fbd4c>
8111bda0:	1085883a 	add	r2,r2,r2
8111bda4:	1085883a 	add	r2,r2,r2
8111bda8:	2087883a 	add	r3,r4,r2
8111bdac:	003fe706 	br	8111bd4c <__reset+0xfb0fbd4c>
8111bdb0:	f800283a 	ret
8111bdb4:	0005883a 	mov	r2,zero
8111bdb8:	f800283a 	ret

8111bdbc <_read_r>:
8111bdbc:	defffd04 	addi	sp,sp,-12
8111bdc0:	de00012e 	bgeu	sp,et,8111bdc8 <_read_r+0xc>
8111bdc4:	003b68fa 	trap	3
8111bdc8:	2805883a 	mov	r2,r5
8111bdcc:	dc000015 	stw	r16,0(sp)
8111bdd0:	04204534 	movhi	r16,33044
8111bdd4:	dc400115 	stw	r17,4(sp)
8111bdd8:	300b883a 	mov	r5,r6
8111bddc:	843a5f04 	addi	r16,r16,-5764
8111bde0:	2023883a 	mov	r17,r4
8111bde4:	380d883a 	mov	r6,r7
8111bde8:	1009883a 	mov	r4,r2
8111bdec:	dfc00215 	stw	ra,8(sp)
8111bdf0:	80000015 	stw	zero,0(r16)
8111bdf4:	1125ef40 	call	81125ef4 <read>
8111bdf8:	00ffffc4 	movi	r3,-1
8111bdfc:	10c00526 	beq	r2,r3,8111be14 <_read_r+0x58>
8111be00:	dfc00217 	ldw	ra,8(sp)
8111be04:	dc400117 	ldw	r17,4(sp)
8111be08:	dc000017 	ldw	r16,0(sp)
8111be0c:	dec00304 	addi	sp,sp,12
8111be10:	f800283a 	ret
8111be14:	80c00017 	ldw	r3,0(r16)
8111be18:	183ff926 	beq	r3,zero,8111be00 <__reset+0xfb0fbe00>
8111be1c:	88c00015 	stw	r3,0(r17)
8111be20:	003ff706 	br	8111be00 <__reset+0xfb0fbe00>

8111be24 <_realloc_r>:
8111be24:	defff604 	addi	sp,sp,-40
8111be28:	de00012e 	bgeu	sp,et,8111be30 <_realloc_r+0xc>
8111be2c:	003b68fa 	trap	3
8111be30:	dc800215 	stw	r18,8(sp)
8111be34:	dfc00915 	stw	ra,36(sp)
8111be38:	df000815 	stw	fp,32(sp)
8111be3c:	ddc00715 	stw	r23,28(sp)
8111be40:	dd800615 	stw	r22,24(sp)
8111be44:	dd400515 	stw	r21,20(sp)
8111be48:	dd000415 	stw	r20,16(sp)
8111be4c:	dcc00315 	stw	r19,12(sp)
8111be50:	dc400115 	stw	r17,4(sp)
8111be54:	dc000015 	stw	r16,0(sp)
8111be58:	3025883a 	mov	r18,r6
8111be5c:	2800b726 	beq	r5,zero,8111c13c <_realloc_r+0x318>
8111be60:	282b883a 	mov	r21,r5
8111be64:	2029883a 	mov	r20,r4
8111be68:	11266c80 	call	811266c8 <__malloc_lock>
8111be6c:	a8bfff17 	ldw	r2,-4(r21)
8111be70:	043fff04 	movi	r16,-4
8111be74:	90c002c4 	addi	r3,r18,11
8111be78:	01000584 	movi	r4,22
8111be7c:	acfffe04 	addi	r19,r21,-8
8111be80:	1420703a 	and	r16,r2,r16
8111be84:	20c0332e 	bgeu	r4,r3,8111bf54 <_realloc_r+0x130>
8111be88:	047ffe04 	movi	r17,-8
8111be8c:	1c62703a 	and	r17,r3,r17
8111be90:	8807883a 	mov	r3,r17
8111be94:	88005816 	blt	r17,zero,8111bff8 <_realloc_r+0x1d4>
8111be98:	8c805736 	bltu	r17,r18,8111bff8 <_realloc_r+0x1d4>
8111be9c:	80c0300e 	bge	r16,r3,8111bf60 <_realloc_r+0x13c>
8111bea0:	07204534 	movhi	fp,33044
8111bea4:	e733eb04 	addi	fp,fp,-12372
8111bea8:	e1c00217 	ldw	r7,8(fp)
8111beac:	9c09883a 	add	r4,r19,r16
8111beb0:	22000117 	ldw	r8,4(r4)
8111beb4:	21c06326 	beq	r4,r7,8111c044 <_realloc_r+0x220>
8111beb8:	017fff84 	movi	r5,-2
8111bebc:	414a703a 	and	r5,r8,r5
8111bec0:	214b883a 	add	r5,r4,r5
8111bec4:	29800117 	ldw	r6,4(r5)
8111bec8:	3180004c 	andi	r6,r6,1
8111becc:	30003f26 	beq	r6,zero,8111bfcc <_realloc_r+0x1a8>
8111bed0:	1080004c 	andi	r2,r2,1
8111bed4:	10008326 	beq	r2,zero,8111c0e4 <_realloc_r+0x2c0>
8111bed8:	900b883a 	mov	r5,r18
8111bedc:	a009883a 	mov	r4,r20
8111bee0:	11106380 	call	81110638 <_malloc_r>
8111bee4:	1025883a 	mov	r18,r2
8111bee8:	10011e26 	beq	r2,zero,8111c364 <_realloc_r+0x540>
8111beec:	a93fff17 	ldw	r4,-4(r21)
8111bef0:	10fffe04 	addi	r3,r2,-8
8111bef4:	00bfff84 	movi	r2,-2
8111bef8:	2084703a 	and	r2,r4,r2
8111befc:	9885883a 	add	r2,r19,r2
8111bf00:	1880ee26 	beq	r3,r2,8111c2bc <_realloc_r+0x498>
8111bf04:	81bfff04 	addi	r6,r16,-4
8111bf08:	00800904 	movi	r2,36
8111bf0c:	1180b836 	bltu	r2,r6,8111c1f0 <_realloc_r+0x3cc>
8111bf10:	00c004c4 	movi	r3,19
8111bf14:	19809636 	bltu	r3,r6,8111c170 <_realloc_r+0x34c>
8111bf18:	9005883a 	mov	r2,r18
8111bf1c:	a807883a 	mov	r3,r21
8111bf20:	19000017 	ldw	r4,0(r3)
8111bf24:	11000015 	stw	r4,0(r2)
8111bf28:	19000117 	ldw	r4,4(r3)
8111bf2c:	11000115 	stw	r4,4(r2)
8111bf30:	18c00217 	ldw	r3,8(r3)
8111bf34:	10c00215 	stw	r3,8(r2)
8111bf38:	a80b883a 	mov	r5,r21
8111bf3c:	a009883a 	mov	r4,r20
8111bf40:	1119d900 	call	81119d90 <_free_r>
8111bf44:	a009883a 	mov	r4,r20
8111bf48:	11267f00 	call	811267f0 <__malloc_unlock>
8111bf4c:	9005883a 	mov	r2,r18
8111bf50:	00001206 	br	8111bf9c <_realloc_r+0x178>
8111bf54:	00c00404 	movi	r3,16
8111bf58:	1823883a 	mov	r17,r3
8111bf5c:	003fce06 	br	8111be98 <__reset+0xfb0fbe98>
8111bf60:	a825883a 	mov	r18,r21
8111bf64:	8445c83a 	sub	r2,r16,r17
8111bf68:	00c003c4 	movi	r3,15
8111bf6c:	18802636 	bltu	r3,r2,8111c008 <_realloc_r+0x1e4>
8111bf70:	99800117 	ldw	r6,4(r19)
8111bf74:	9c07883a 	add	r3,r19,r16
8111bf78:	3180004c 	andi	r6,r6,1
8111bf7c:	3420b03a 	or	r16,r6,r16
8111bf80:	9c000115 	stw	r16,4(r19)
8111bf84:	18800117 	ldw	r2,4(r3)
8111bf88:	10800054 	ori	r2,r2,1
8111bf8c:	18800115 	stw	r2,4(r3)
8111bf90:	a009883a 	mov	r4,r20
8111bf94:	11267f00 	call	811267f0 <__malloc_unlock>
8111bf98:	9005883a 	mov	r2,r18
8111bf9c:	dfc00917 	ldw	ra,36(sp)
8111bfa0:	df000817 	ldw	fp,32(sp)
8111bfa4:	ddc00717 	ldw	r23,28(sp)
8111bfa8:	dd800617 	ldw	r22,24(sp)
8111bfac:	dd400517 	ldw	r21,20(sp)
8111bfb0:	dd000417 	ldw	r20,16(sp)
8111bfb4:	dcc00317 	ldw	r19,12(sp)
8111bfb8:	dc800217 	ldw	r18,8(sp)
8111bfbc:	dc400117 	ldw	r17,4(sp)
8111bfc0:	dc000017 	ldw	r16,0(sp)
8111bfc4:	dec00a04 	addi	sp,sp,40
8111bfc8:	f800283a 	ret
8111bfcc:	017fff04 	movi	r5,-4
8111bfd0:	414a703a 	and	r5,r8,r5
8111bfd4:	814d883a 	add	r6,r16,r5
8111bfd8:	30c01f16 	blt	r6,r3,8111c058 <_realloc_r+0x234>
8111bfdc:	20800317 	ldw	r2,12(r4)
8111bfe0:	20c00217 	ldw	r3,8(r4)
8111bfe4:	a825883a 	mov	r18,r21
8111bfe8:	3021883a 	mov	r16,r6
8111bfec:	18800315 	stw	r2,12(r3)
8111bff0:	10c00215 	stw	r3,8(r2)
8111bff4:	003fdb06 	br	8111bf64 <__reset+0xfb0fbf64>
8111bff8:	00800304 	movi	r2,12
8111bffc:	a0800015 	stw	r2,0(r20)
8111c000:	0005883a 	mov	r2,zero
8111c004:	003fe506 	br	8111bf9c <__reset+0xfb0fbf9c>
8111c008:	98c00117 	ldw	r3,4(r19)
8111c00c:	9c4b883a 	add	r5,r19,r17
8111c010:	11000054 	ori	r4,r2,1
8111c014:	18c0004c 	andi	r3,r3,1
8111c018:	1c62b03a 	or	r17,r3,r17
8111c01c:	9c400115 	stw	r17,4(r19)
8111c020:	29000115 	stw	r4,4(r5)
8111c024:	2885883a 	add	r2,r5,r2
8111c028:	10c00117 	ldw	r3,4(r2)
8111c02c:	29400204 	addi	r5,r5,8
8111c030:	a009883a 	mov	r4,r20
8111c034:	18c00054 	ori	r3,r3,1
8111c038:	10c00115 	stw	r3,4(r2)
8111c03c:	1119d900 	call	81119d90 <_free_r>
8111c040:	003fd306 	br	8111bf90 <__reset+0xfb0fbf90>
8111c044:	017fff04 	movi	r5,-4
8111c048:	414a703a 	and	r5,r8,r5
8111c04c:	89800404 	addi	r6,r17,16
8111c050:	8151883a 	add	r8,r16,r5
8111c054:	4180590e 	bge	r8,r6,8111c1bc <_realloc_r+0x398>
8111c058:	1080004c 	andi	r2,r2,1
8111c05c:	103f9e1e 	bne	r2,zero,8111bed8 <__reset+0xfb0fbed8>
8111c060:	adbffe17 	ldw	r22,-8(r21)
8111c064:	00bfff04 	movi	r2,-4
8111c068:	9dadc83a 	sub	r22,r19,r22
8111c06c:	b1800117 	ldw	r6,4(r22)
8111c070:	3084703a 	and	r2,r6,r2
8111c074:	20002026 	beq	r4,zero,8111c0f8 <_realloc_r+0x2d4>
8111c078:	80af883a 	add	r23,r16,r2
8111c07c:	b96f883a 	add	r23,r23,r5
8111c080:	21c05f26 	beq	r4,r7,8111c200 <_realloc_r+0x3dc>
8111c084:	b8c01c16 	blt	r23,r3,8111c0f8 <_realloc_r+0x2d4>
8111c088:	20800317 	ldw	r2,12(r4)
8111c08c:	20c00217 	ldw	r3,8(r4)
8111c090:	81bfff04 	addi	r6,r16,-4
8111c094:	01000904 	movi	r4,36
8111c098:	18800315 	stw	r2,12(r3)
8111c09c:	10c00215 	stw	r3,8(r2)
8111c0a0:	b0c00217 	ldw	r3,8(r22)
8111c0a4:	b0800317 	ldw	r2,12(r22)
8111c0a8:	b4800204 	addi	r18,r22,8
8111c0ac:	18800315 	stw	r2,12(r3)
8111c0b0:	10c00215 	stw	r3,8(r2)
8111c0b4:	21801b36 	bltu	r4,r6,8111c124 <_realloc_r+0x300>
8111c0b8:	008004c4 	movi	r2,19
8111c0bc:	1180352e 	bgeu	r2,r6,8111c194 <_realloc_r+0x370>
8111c0c0:	a8800017 	ldw	r2,0(r21)
8111c0c4:	b0800215 	stw	r2,8(r22)
8111c0c8:	a8800117 	ldw	r2,4(r21)
8111c0cc:	b0800315 	stw	r2,12(r22)
8111c0d0:	008006c4 	movi	r2,27
8111c0d4:	11807f36 	bltu	r2,r6,8111c2d4 <_realloc_r+0x4b0>
8111c0d8:	b0800404 	addi	r2,r22,16
8111c0dc:	ad400204 	addi	r21,r21,8
8111c0e0:	00002d06 	br	8111c198 <_realloc_r+0x374>
8111c0e4:	adbffe17 	ldw	r22,-8(r21)
8111c0e8:	00bfff04 	movi	r2,-4
8111c0ec:	9dadc83a 	sub	r22,r19,r22
8111c0f0:	b1000117 	ldw	r4,4(r22)
8111c0f4:	2084703a 	and	r2,r4,r2
8111c0f8:	b03f7726 	beq	r22,zero,8111bed8 <__reset+0xfb0fbed8>
8111c0fc:	80af883a 	add	r23,r16,r2
8111c100:	b8ff7516 	blt	r23,r3,8111bed8 <__reset+0xfb0fbed8>
8111c104:	b0800317 	ldw	r2,12(r22)
8111c108:	b0c00217 	ldw	r3,8(r22)
8111c10c:	81bfff04 	addi	r6,r16,-4
8111c110:	01000904 	movi	r4,36
8111c114:	18800315 	stw	r2,12(r3)
8111c118:	10c00215 	stw	r3,8(r2)
8111c11c:	b4800204 	addi	r18,r22,8
8111c120:	21bfe52e 	bgeu	r4,r6,8111c0b8 <__reset+0xfb0fc0b8>
8111c124:	a80b883a 	mov	r5,r21
8111c128:	9009883a 	mov	r4,r18
8111c12c:	111ac040 	call	8111ac04 <memmove>
8111c130:	b821883a 	mov	r16,r23
8111c134:	b027883a 	mov	r19,r22
8111c138:	003f8a06 	br	8111bf64 <__reset+0xfb0fbf64>
8111c13c:	300b883a 	mov	r5,r6
8111c140:	dfc00917 	ldw	ra,36(sp)
8111c144:	df000817 	ldw	fp,32(sp)
8111c148:	ddc00717 	ldw	r23,28(sp)
8111c14c:	dd800617 	ldw	r22,24(sp)
8111c150:	dd400517 	ldw	r21,20(sp)
8111c154:	dd000417 	ldw	r20,16(sp)
8111c158:	dcc00317 	ldw	r19,12(sp)
8111c15c:	dc800217 	ldw	r18,8(sp)
8111c160:	dc400117 	ldw	r17,4(sp)
8111c164:	dc000017 	ldw	r16,0(sp)
8111c168:	dec00a04 	addi	sp,sp,40
8111c16c:	11106381 	jmpi	81110638 <_malloc_r>
8111c170:	a8c00017 	ldw	r3,0(r21)
8111c174:	90c00015 	stw	r3,0(r18)
8111c178:	a8c00117 	ldw	r3,4(r21)
8111c17c:	90c00115 	stw	r3,4(r18)
8111c180:	00c006c4 	movi	r3,27
8111c184:	19804536 	bltu	r3,r6,8111c29c <_realloc_r+0x478>
8111c188:	90800204 	addi	r2,r18,8
8111c18c:	a8c00204 	addi	r3,r21,8
8111c190:	003f6306 	br	8111bf20 <__reset+0xfb0fbf20>
8111c194:	9005883a 	mov	r2,r18
8111c198:	a8c00017 	ldw	r3,0(r21)
8111c19c:	b821883a 	mov	r16,r23
8111c1a0:	b027883a 	mov	r19,r22
8111c1a4:	10c00015 	stw	r3,0(r2)
8111c1a8:	a8c00117 	ldw	r3,4(r21)
8111c1ac:	10c00115 	stw	r3,4(r2)
8111c1b0:	a8c00217 	ldw	r3,8(r21)
8111c1b4:	10c00215 	stw	r3,8(r2)
8111c1b8:	003f6a06 	br	8111bf64 <__reset+0xfb0fbf64>
8111c1bc:	9c67883a 	add	r19,r19,r17
8111c1c0:	4445c83a 	sub	r2,r8,r17
8111c1c4:	e4c00215 	stw	r19,8(fp)
8111c1c8:	10800054 	ori	r2,r2,1
8111c1cc:	98800115 	stw	r2,4(r19)
8111c1d0:	a8bfff17 	ldw	r2,-4(r21)
8111c1d4:	a009883a 	mov	r4,r20
8111c1d8:	1080004c 	andi	r2,r2,1
8111c1dc:	1462b03a 	or	r17,r2,r17
8111c1e0:	ac7fff15 	stw	r17,-4(r21)
8111c1e4:	11267f00 	call	811267f0 <__malloc_unlock>
8111c1e8:	a805883a 	mov	r2,r21
8111c1ec:	003f6b06 	br	8111bf9c <__reset+0xfb0fbf9c>
8111c1f0:	a80b883a 	mov	r5,r21
8111c1f4:	9009883a 	mov	r4,r18
8111c1f8:	111ac040 	call	8111ac04 <memmove>
8111c1fc:	003f4e06 	br	8111bf38 <__reset+0xfb0fbf38>
8111c200:	89000404 	addi	r4,r17,16
8111c204:	b93fbc16 	blt	r23,r4,8111c0f8 <__reset+0xfb0fc0f8>
8111c208:	b0800317 	ldw	r2,12(r22)
8111c20c:	b0c00217 	ldw	r3,8(r22)
8111c210:	81bfff04 	addi	r6,r16,-4
8111c214:	01000904 	movi	r4,36
8111c218:	18800315 	stw	r2,12(r3)
8111c21c:	10c00215 	stw	r3,8(r2)
8111c220:	b4800204 	addi	r18,r22,8
8111c224:	21804336 	bltu	r4,r6,8111c334 <_realloc_r+0x510>
8111c228:	008004c4 	movi	r2,19
8111c22c:	11803f2e 	bgeu	r2,r6,8111c32c <_realloc_r+0x508>
8111c230:	a8800017 	ldw	r2,0(r21)
8111c234:	b0800215 	stw	r2,8(r22)
8111c238:	a8800117 	ldw	r2,4(r21)
8111c23c:	b0800315 	stw	r2,12(r22)
8111c240:	008006c4 	movi	r2,27
8111c244:	11803f36 	bltu	r2,r6,8111c344 <_realloc_r+0x520>
8111c248:	b0800404 	addi	r2,r22,16
8111c24c:	ad400204 	addi	r21,r21,8
8111c250:	a8c00017 	ldw	r3,0(r21)
8111c254:	10c00015 	stw	r3,0(r2)
8111c258:	a8c00117 	ldw	r3,4(r21)
8111c25c:	10c00115 	stw	r3,4(r2)
8111c260:	a8c00217 	ldw	r3,8(r21)
8111c264:	10c00215 	stw	r3,8(r2)
8111c268:	b447883a 	add	r3,r22,r17
8111c26c:	bc45c83a 	sub	r2,r23,r17
8111c270:	e0c00215 	stw	r3,8(fp)
8111c274:	10800054 	ori	r2,r2,1
8111c278:	18800115 	stw	r2,4(r3)
8111c27c:	b0800117 	ldw	r2,4(r22)
8111c280:	a009883a 	mov	r4,r20
8111c284:	1080004c 	andi	r2,r2,1
8111c288:	1462b03a 	or	r17,r2,r17
8111c28c:	b4400115 	stw	r17,4(r22)
8111c290:	11267f00 	call	811267f0 <__malloc_unlock>
8111c294:	9005883a 	mov	r2,r18
8111c298:	003f4006 	br	8111bf9c <__reset+0xfb0fbf9c>
8111c29c:	a8c00217 	ldw	r3,8(r21)
8111c2a0:	90c00215 	stw	r3,8(r18)
8111c2a4:	a8c00317 	ldw	r3,12(r21)
8111c2a8:	90c00315 	stw	r3,12(r18)
8111c2ac:	30801126 	beq	r6,r2,8111c2f4 <_realloc_r+0x4d0>
8111c2b0:	90800404 	addi	r2,r18,16
8111c2b4:	a8c00404 	addi	r3,r21,16
8111c2b8:	003f1906 	br	8111bf20 <__reset+0xfb0fbf20>
8111c2bc:	90ffff17 	ldw	r3,-4(r18)
8111c2c0:	00bfff04 	movi	r2,-4
8111c2c4:	a825883a 	mov	r18,r21
8111c2c8:	1884703a 	and	r2,r3,r2
8111c2cc:	80a1883a 	add	r16,r16,r2
8111c2d0:	003f2406 	br	8111bf64 <__reset+0xfb0fbf64>
8111c2d4:	a8800217 	ldw	r2,8(r21)
8111c2d8:	b0800415 	stw	r2,16(r22)
8111c2dc:	a8800317 	ldw	r2,12(r21)
8111c2e0:	b0800515 	stw	r2,20(r22)
8111c2e4:	31000a26 	beq	r6,r4,8111c310 <_realloc_r+0x4ec>
8111c2e8:	b0800604 	addi	r2,r22,24
8111c2ec:	ad400404 	addi	r21,r21,16
8111c2f0:	003fa906 	br	8111c198 <__reset+0xfb0fc198>
8111c2f4:	a9000417 	ldw	r4,16(r21)
8111c2f8:	90800604 	addi	r2,r18,24
8111c2fc:	a8c00604 	addi	r3,r21,24
8111c300:	91000415 	stw	r4,16(r18)
8111c304:	a9000517 	ldw	r4,20(r21)
8111c308:	91000515 	stw	r4,20(r18)
8111c30c:	003f0406 	br	8111bf20 <__reset+0xfb0fbf20>
8111c310:	a8c00417 	ldw	r3,16(r21)
8111c314:	ad400604 	addi	r21,r21,24
8111c318:	b0800804 	addi	r2,r22,32
8111c31c:	b0c00615 	stw	r3,24(r22)
8111c320:	a8ffff17 	ldw	r3,-4(r21)
8111c324:	b0c00715 	stw	r3,28(r22)
8111c328:	003f9b06 	br	8111c198 <__reset+0xfb0fc198>
8111c32c:	9005883a 	mov	r2,r18
8111c330:	003fc706 	br	8111c250 <__reset+0xfb0fc250>
8111c334:	a80b883a 	mov	r5,r21
8111c338:	9009883a 	mov	r4,r18
8111c33c:	111ac040 	call	8111ac04 <memmove>
8111c340:	003fc906 	br	8111c268 <__reset+0xfb0fc268>
8111c344:	a8800217 	ldw	r2,8(r21)
8111c348:	b0800415 	stw	r2,16(r22)
8111c34c:	a8800317 	ldw	r2,12(r21)
8111c350:	b0800515 	stw	r2,20(r22)
8111c354:	31000726 	beq	r6,r4,8111c374 <_realloc_r+0x550>
8111c358:	b0800604 	addi	r2,r22,24
8111c35c:	ad400404 	addi	r21,r21,16
8111c360:	003fbb06 	br	8111c250 <__reset+0xfb0fc250>
8111c364:	a009883a 	mov	r4,r20
8111c368:	11267f00 	call	811267f0 <__malloc_unlock>
8111c36c:	0005883a 	mov	r2,zero
8111c370:	003f0a06 	br	8111bf9c <__reset+0xfb0fbf9c>
8111c374:	a8c00417 	ldw	r3,16(r21)
8111c378:	ad400604 	addi	r21,r21,24
8111c37c:	b0800804 	addi	r2,r22,32
8111c380:	b0c00615 	stw	r3,24(r22)
8111c384:	a8ffff17 	ldw	r3,-4(r21)
8111c388:	b0c00715 	stw	r3,28(r22)
8111c38c:	003fb006 	br	8111c250 <__reset+0xfb0fc250>

8111c390 <__fpclassifyd>:
8111c390:	00a00034 	movhi	r2,32768
8111c394:	10bfffc4 	addi	r2,r2,-1
8111c398:	2884703a 	and	r2,r5,r2
8111c39c:	10000726 	beq	r2,zero,8111c3bc <__fpclassifyd+0x2c>
8111c3a0:	00fffc34 	movhi	r3,65520
8111c3a4:	019ff834 	movhi	r6,32736
8111c3a8:	28c7883a 	add	r3,r5,r3
8111c3ac:	31bfffc4 	addi	r6,r6,-1
8111c3b0:	30c00536 	bltu	r6,r3,8111c3c8 <__fpclassifyd+0x38>
8111c3b4:	00800104 	movi	r2,4
8111c3b8:	f800283a 	ret
8111c3bc:	2000021e 	bne	r4,zero,8111c3c8 <__fpclassifyd+0x38>
8111c3c0:	00800084 	movi	r2,2
8111c3c4:	f800283a 	ret
8111c3c8:	00dffc34 	movhi	r3,32752
8111c3cc:	019ff834 	movhi	r6,32736
8111c3d0:	28cb883a 	add	r5,r5,r3
8111c3d4:	31bfffc4 	addi	r6,r6,-1
8111c3d8:	317ff62e 	bgeu	r6,r5,8111c3b4 <__reset+0xfb0fc3b4>
8111c3dc:	01400434 	movhi	r5,16
8111c3e0:	297fffc4 	addi	r5,r5,-1
8111c3e4:	28800236 	bltu	r5,r2,8111c3f0 <__fpclassifyd+0x60>
8111c3e8:	008000c4 	movi	r2,3
8111c3ec:	f800283a 	ret
8111c3f0:	10c00226 	beq	r2,r3,8111c3fc <__fpclassifyd+0x6c>
8111c3f4:	0005883a 	mov	r2,zero
8111c3f8:	f800283a 	ret
8111c3fc:	2005003a 	cmpeq	r2,r4,zero
8111c400:	f800283a 	ret

8111c404 <__sccl>:
8111c404:	2a000003 	ldbu	r8,0(r5)
8111c408:	00801784 	movi	r2,94
8111c40c:	40802a26 	beq	r8,r2,8111c4b8 <__sccl+0xb4>
8111c410:	29400044 	addi	r5,r5,1
8111c414:	000f883a 	mov	r7,zero
8111c418:	0013883a 	mov	r9,zero
8111c41c:	2007883a 	mov	r3,r4
8111c420:	21804004 	addi	r6,r4,256
8111c424:	19c00005 	stb	r7,0(r3)
8111c428:	18c00044 	addi	r3,r3,1
8111c42c:	19bffd1e 	bne	r3,r6,8111c424 <__reset+0xfb0fc424>
8111c430:	40001126 	beq	r8,zero,8111c478 <__sccl+0x74>
8111c434:	00800044 	movi	r2,1
8111c438:	124fc83a 	sub	r7,r2,r9
8111c43c:	02800b44 	movi	r10,45
8111c440:	02c01744 	movi	r11,93
8111c444:	2205883a 	add	r2,r4,r8
8111c448:	11c00005 	stb	r7,0(r2)
8111c44c:	28800044 	addi	r2,r5,1
8111c450:	28c00003 	ldbu	r3,0(r5)
8111c454:	1a800a26 	beq	r3,r10,8111c480 <__sccl+0x7c>
8111c458:	1ac00426 	beq	r3,r11,8111c46c <__sccl+0x68>
8111c45c:	18000426 	beq	r3,zero,8111c470 <__sccl+0x6c>
8111c460:	1811883a 	mov	r8,r3
8111c464:	100b883a 	mov	r5,r2
8111c468:	003ff606 	br	8111c444 <__reset+0xfb0fc444>
8111c46c:	f800283a 	ret
8111c470:	2805883a 	mov	r2,r5
8111c474:	f800283a 	ret
8111c478:	28bfffc4 	addi	r2,r5,-1
8111c47c:	f800283a 	ret
8111c480:	12400003 	ldbu	r9,0(r2)
8111c484:	4ac01126 	beq	r9,r11,8111c4cc <__sccl+0xc8>
8111c488:	4a001016 	blt	r9,r8,8111c4cc <__sccl+0xc8>
8111c48c:	41800044 	addi	r6,r8,1
8111c490:	29400084 	addi	r5,r5,2
8111c494:	2187883a 	add	r3,r4,r6
8111c498:	00000106 	br	8111c4a0 <__sccl+0x9c>
8111c49c:	31800044 	addi	r6,r6,1
8111c4a0:	19c00005 	stb	r7,0(r3)
8111c4a4:	3011883a 	mov	r8,r6
8111c4a8:	18c00044 	addi	r3,r3,1
8111c4ac:	327ffb16 	blt	r6,r9,8111c49c <__reset+0xfb0fc49c>
8111c4b0:	10800084 	addi	r2,r2,2
8111c4b4:	003fe606 	br	8111c450 <__reset+0xfb0fc450>
8111c4b8:	2a000043 	ldbu	r8,1(r5)
8111c4bc:	01c00044 	movi	r7,1
8111c4c0:	29400084 	addi	r5,r5,2
8111c4c4:	02400044 	movi	r9,1
8111c4c8:	003fd406 	br	8111c41c <__reset+0xfb0fc41c>
8111c4cc:	5011883a 	mov	r8,r10
8111c4d0:	003fe406 	br	8111c464 <__reset+0xfb0fc464>

8111c4d4 <nanf>:
8111c4d4:	009ff034 	movhi	r2,32704
8111c4d8:	f800283a 	ret

8111c4dc <strcmp>:
8111c4dc:	2144b03a 	or	r2,r4,r5
8111c4e0:	108000cc 	andi	r2,r2,3
8111c4e4:	1000171e 	bne	r2,zero,8111c544 <strcmp+0x68>
8111c4e8:	20800017 	ldw	r2,0(r4)
8111c4ec:	28c00017 	ldw	r3,0(r5)
8111c4f0:	10c0141e 	bne	r2,r3,8111c544 <strcmp+0x68>
8111c4f4:	027fbff4 	movhi	r9,65279
8111c4f8:	4a7fbfc4 	addi	r9,r9,-257
8111c4fc:	0086303a 	nor	r3,zero,r2
8111c500:	02202074 	movhi	r8,32897
8111c504:	1245883a 	add	r2,r2,r9
8111c508:	42202004 	addi	r8,r8,-32640
8111c50c:	10c4703a 	and	r2,r2,r3
8111c510:	1204703a 	and	r2,r2,r8
8111c514:	10000226 	beq	r2,zero,8111c520 <strcmp+0x44>
8111c518:	00002306 	br	8111c5a8 <strcmp+0xcc>
8111c51c:	1000221e 	bne	r2,zero,8111c5a8 <strcmp+0xcc>
8111c520:	21000104 	addi	r4,r4,4
8111c524:	20c00017 	ldw	r3,0(r4)
8111c528:	29400104 	addi	r5,r5,4
8111c52c:	29800017 	ldw	r6,0(r5)
8111c530:	1a4f883a 	add	r7,r3,r9
8111c534:	00c4303a 	nor	r2,zero,r3
8111c538:	3884703a 	and	r2,r7,r2
8111c53c:	1204703a 	and	r2,r2,r8
8111c540:	19bff626 	beq	r3,r6,8111c51c <__reset+0xfb0fc51c>
8111c544:	20800003 	ldbu	r2,0(r4)
8111c548:	10c03fcc 	andi	r3,r2,255
8111c54c:	18c0201c 	xori	r3,r3,128
8111c550:	18ffe004 	addi	r3,r3,-128
8111c554:	18000c26 	beq	r3,zero,8111c588 <strcmp+0xac>
8111c558:	29800007 	ldb	r6,0(r5)
8111c55c:	19800326 	beq	r3,r6,8111c56c <strcmp+0x90>
8111c560:	00001306 	br	8111c5b0 <strcmp+0xd4>
8111c564:	29800007 	ldb	r6,0(r5)
8111c568:	11800b1e 	bne	r2,r6,8111c598 <strcmp+0xbc>
8111c56c:	21000044 	addi	r4,r4,1
8111c570:	20c00003 	ldbu	r3,0(r4)
8111c574:	29400044 	addi	r5,r5,1
8111c578:	18803fcc 	andi	r2,r3,255
8111c57c:	1080201c 	xori	r2,r2,128
8111c580:	10bfe004 	addi	r2,r2,-128
8111c584:	103ff71e 	bne	r2,zero,8111c564 <__reset+0xfb0fc564>
8111c588:	0007883a 	mov	r3,zero
8111c58c:	28800003 	ldbu	r2,0(r5)
8111c590:	1885c83a 	sub	r2,r3,r2
8111c594:	f800283a 	ret
8111c598:	28800003 	ldbu	r2,0(r5)
8111c59c:	18c03fcc 	andi	r3,r3,255
8111c5a0:	1885c83a 	sub	r2,r3,r2
8111c5a4:	f800283a 	ret
8111c5a8:	0005883a 	mov	r2,zero
8111c5ac:	f800283a 	ret
8111c5b0:	10c03fcc 	andi	r3,r2,255
8111c5b4:	003ff506 	br	8111c58c <__reset+0xfb0fc58c>

8111c5b8 <sulp>:
8111c5b8:	defffd04 	addi	sp,sp,-12
8111c5bc:	de00012e 	bgeu	sp,et,8111c5c4 <sulp+0xc>
8111c5c0:	003b68fa 	trap	3
8111c5c4:	dc400115 	stw	r17,4(sp)
8111c5c8:	3023883a 	mov	r17,r6
8111c5cc:	dc000015 	stw	r16,0(sp)
8111c5d0:	dfc00215 	stw	ra,8(sp)
8111c5d4:	2821883a 	mov	r16,r5
8111c5d8:	111b8c40 	call	8111b8c4 <__ulp>
8111c5dc:	88000c26 	beq	r17,zero,8111c610 <sulp+0x58>
8111c5e0:	841ffc2c 	andhi	r16,r16,32752
8111c5e4:	8020d53a 	srli	r16,r16,20
8111c5e8:	01c01ac4 	movi	r7,107
8111c5ec:	3c21c83a 	sub	r16,r7,r16
8111c5f0:	0400070e 	bge	zero,r16,8111c610 <sulp+0x58>
8111c5f4:	8020953a 	slli	r16,r16,20
8111c5f8:	01cffc34 	movhi	r7,16368
8111c5fc:	000d883a 	mov	r6,zero
8111c600:	81cf883a 	add	r7,r16,r7
8111c604:	1009883a 	mov	r4,r2
8111c608:	180b883a 	mov	r5,r3
8111c60c:	110f2ac0 	call	8110f2ac <__muldf3>
8111c610:	dfc00217 	ldw	ra,8(sp)
8111c614:	dc400117 	ldw	r17,4(sp)
8111c618:	dc000017 	ldw	r16,0(sp)
8111c61c:	dec00304 	addi	sp,sp,12
8111c620:	f800283a 	ret

8111c624 <_strtod_r>:
8111c624:	deffe204 	addi	sp,sp,-120
8111c628:	de00012e 	bgeu	sp,et,8111c630 <_strtod_r+0xc>
8111c62c:	003b68fa 	trap	3
8111c630:	ddc01b15 	stw	r23,108(sp)
8111c634:	dd001815 	stw	r20,96(sp)
8111c638:	dc801615 	stw	r18,88(sp)
8111c63c:	dc401515 	stw	r17,84(sp)
8111c640:	dc001415 	stw	r16,80(sp)
8111c644:	d9400615 	stw	r5,24(sp)
8111c648:	dfc01d15 	stw	ra,116(sp)
8111c64c:	df001c15 	stw	fp,112(sp)
8111c650:	dd801a15 	stw	r22,104(sp)
8111c654:	dd401915 	stw	r21,100(sp)
8111c658:	dcc01715 	stw	r19,92(sp)
8111c65c:	2021883a 	mov	r16,r4
8111c660:	d8000515 	stw	zero,20(sp)
8111c664:	2809883a 	mov	r4,r5
8111c668:	20800003 	ldbu	r2,0(r4)
8111c66c:	01e044b4 	movhi	r7,33042
8111c670:	282f883a 	mov	r23,r5
8111c674:	10c03fcc 	andi	r3,r2,255
8111c678:	01400b44 	movi	r5,45
8111c67c:	39f1a804 	addi	r7,r7,-14688
8111c680:	3029883a 	mov	r20,r6
8111c684:	0025883a 	mov	r18,zero
8111c688:	0023883a 	mov	r17,zero
8111c68c:	28c0ba36 	bltu	r5,r3,8111c978 <_strtod_r+0x354>
8111c690:	180690ba 	slli	r3,r3,2
8111c694:	19c7883a 	add	r3,r3,r7
8111c698:	18c00017 	ldw	r3,0(r3)
8111c69c:	1800683a 	jmp	r3
8111c6a0:	8111c760 	cmpeqi	r4,r16,18205
8111c6a4:	8111c978 	rdprs	r4,r16,18213
8111c6a8:	8111c978 	rdprs	r4,r16,18213
8111c6ac:	8111c978 	rdprs	r4,r16,18213
8111c6b0:	8111c978 	rdprs	r4,r16,18213
8111c6b4:	8111c978 	rdprs	r4,r16,18213
8111c6b8:	8111c978 	rdprs	r4,r16,18213
8111c6bc:	8111c978 	rdprs	r4,r16,18213
8111c6c0:	8111c978 	rdprs	r4,r16,18213
8111c6c4:	8111c964 	muli	r4,r16,18213
8111c6c8:	8111c964 	muli	r4,r16,18213
8111c6cc:	8111c964 	muli	r4,r16,18213
8111c6d0:	8111c964 	muli	r4,r16,18213
8111c6d4:	8111c964 	muli	r4,r16,18213
8111c6d8:	8111c978 	rdprs	r4,r16,18213
8111c6dc:	8111c978 	rdprs	r4,r16,18213
8111c6e0:	8111c978 	rdprs	r4,r16,18213
8111c6e4:	8111c978 	rdprs	r4,r16,18213
8111c6e8:	8111c978 	rdprs	r4,r16,18213
8111c6ec:	8111c978 	rdprs	r4,r16,18213
8111c6f0:	8111c978 	rdprs	r4,r16,18213
8111c6f4:	8111c978 	rdprs	r4,r16,18213
8111c6f8:	8111c978 	rdprs	r4,r16,18213
8111c6fc:	8111c978 	rdprs	r4,r16,18213
8111c700:	8111c978 	rdprs	r4,r16,18213
8111c704:	8111c978 	rdprs	r4,r16,18213
8111c708:	8111c978 	rdprs	r4,r16,18213
8111c70c:	8111c978 	rdprs	r4,r16,18213
8111c710:	8111c978 	rdprs	r4,r16,18213
8111c714:	8111c978 	rdprs	r4,r16,18213
8111c718:	8111c978 	rdprs	r4,r16,18213
8111c71c:	8111c978 	rdprs	r4,r16,18213
8111c720:	8111c964 	muli	r4,r16,18213
8111c724:	8111c978 	rdprs	r4,r16,18213
8111c728:	8111c978 	rdprs	r4,r16,18213
8111c72c:	8111c978 	rdprs	r4,r16,18213
8111c730:	8111c978 	rdprs	r4,r16,18213
8111c734:	8111c978 	rdprs	r4,r16,18213
8111c738:	8111c978 	rdprs	r4,r16,18213
8111c73c:	8111c978 	rdprs	r4,r16,18213
8111c740:	8111c978 	rdprs	r4,r16,18213
8111c744:	8111c978 	rdprs	r4,r16,18213
8111c748:	8111c978 	rdprs	r4,r16,18213
8111c74c:	8111c7b8 	rdprs	r4,r16,18206
8111c750:	8111c978 	rdprs	r4,r16,18213
8111c754:	8111c958 	cmpnei	r4,r16,18213
8111c758:	00801244 	movi	r2,73
8111c75c:	88843526 	beq	r17,r2,8111d834 <_strtod_r+0x1210>
8111c760:	002b883a 	mov	r21,zero
8111c764:	002d883a 	mov	r22,zero
8111c768:	a0000526 	beq	r20,zero,8111c780 <_strtod_r+0x15c>
8111c76c:	d8000715 	stw	zero,28(sp)
8111c770:	a5c00015 	stw	r23,0(r20)
8111c774:	d9000717 	ldw	r4,28(sp)
8111c778:	20000126 	beq	r4,zero,8111c780 <_strtod_r+0x15c>
8111c77c:	b5a0003c 	xorhi	r22,r22,32768
8111c780:	a805883a 	mov	r2,r21
8111c784:	b007883a 	mov	r3,r22
8111c788:	dfc01d17 	ldw	ra,116(sp)
8111c78c:	df001c17 	ldw	fp,112(sp)
8111c790:	ddc01b17 	ldw	r23,108(sp)
8111c794:	dd801a17 	ldw	r22,104(sp)
8111c798:	dd401917 	ldw	r21,100(sp)
8111c79c:	dd001817 	ldw	r20,96(sp)
8111c7a0:	dcc01717 	ldw	r19,92(sp)
8111c7a4:	dc801617 	ldw	r18,88(sp)
8111c7a8:	dc401517 	ldw	r17,84(sp)
8111c7ac:	dc001417 	ldw	r16,80(sp)
8111c7b0:	dec01e04 	addi	sp,sp,120
8111c7b4:	f800283a 	ret
8111c7b8:	d8000715 	stw	zero,28(sp)
8111c7bc:	24c00044 	addi	r19,r4,1
8111c7c0:	dcc00615 	stw	r19,24(sp)
8111c7c4:	20800043 	ldbu	r2,1(r4)
8111c7c8:	10c03fcc 	andi	r3,r2,255
8111c7cc:	18c0201c 	xori	r3,r3,128
8111c7d0:	18ffe004 	addi	r3,r3,-128
8111c7d4:	183fe226 	beq	r3,zero,8111c760 <__reset+0xfb0fc760>
8111c7d8:	11403fcc 	andi	r5,r2,255
8111c7dc:	2940201c 	xori	r5,r5,128
8111c7e0:	297fe004 	addi	r5,r5,-128
8111c7e4:	00c00c04 	movi	r3,48
8111c7e8:	28c0e526 	beq	r5,r3,8111cb80 <_strtod_r+0x55c>
8111c7ec:	dcc00815 	stw	r19,32(sp)
8111c7f0:	0025883a 	mov	r18,zero
8111c7f4:	10fff404 	addi	r3,r2,-48
8111c7f8:	18c03fcc 	andi	r3,r3,255
8111c7fc:	01000244 	movi	r4,9
8111c800:	20c37536 	bltu	r4,r3,8111d5d8 <_strtod_r+0xfb4>
8111c804:	dd400817 	ldw	r21,32(sp)
8111c808:	0027883a 	mov	r19,zero
8111c80c:	0039883a 	mov	fp,zero
8111c810:	002d883a 	mov	r22,zero
8111c814:	01400204 	movi	r5,8
8111c818:	2d805a16 	blt	r5,r22,8111c984 <_strtod_r+0x360>
8111c81c:	e70002a4 	muli	fp,fp,10
8111c820:	10c03fcc 	andi	r3,r2,255
8111c824:	18c0201c 	xori	r3,r3,128
8111c828:	18ffe004 	addi	r3,r3,-128
8111c82c:	e0f9883a 	add	fp,fp,r3
8111c830:	e73ff404 	addi	fp,fp,-48
8111c834:	ad400044 	addi	r21,r21,1
8111c838:	dd400615 	stw	r21,24(sp)
8111c83c:	a8800003 	ldbu	r2,0(r21)
8111c840:	b5800044 	addi	r22,r22,1
8111c844:	10fff404 	addi	r3,r2,-48
8111c848:	18c03fcc 	andi	r3,r3,255
8111c84c:	20fff22e 	bgeu	r4,r3,8111c818 <__reset+0xfb0fc818>
8111c850:	14403fcc 	andi	r17,r2,255
8111c854:	8c40201c 	xori	r17,r17,128
8111c858:	8c7fe004 	addi	r17,r17,-128
8111c85c:	8009883a 	mov	r4,r16
8111c860:	111a8440 	call	8111a844 <_localeconv_r>
8111c864:	11400017 	ldw	r5,0(r2)
8111c868:	8009883a 	mov	r4,r16
8111c86c:	d9401315 	stw	r5,76(sp)
8111c870:	111a8440 	call	8111a844 <_localeconv_r>
8111c874:	11000017 	ldw	r4,0(r2)
8111c878:	11117c80 	call	811117c8 <strlen>
8111c87c:	d9401317 	ldw	r5,76(sp)
8111c880:	100d883a 	mov	r6,r2
8111c884:	a809883a 	mov	r4,r21
8111c888:	11222140 	call	81122214 <strncmp>
8111c88c:	1000ce26 	beq	r2,zero,8111cbc8 <_strtod_r+0x5a4>
8111c890:	b013883a 	mov	r9,r22
8111c894:	000b883a 	mov	r5,zero
8111c898:	0015883a 	mov	r10,zero
8111c89c:	0017883a 	mov	r11,zero
8111c8a0:	00801944 	movi	r2,101
8111c8a4:	88807826 	beq	r17,r2,8111ca88 <_strtod_r+0x464>
8111c8a8:	00801144 	movi	r2,69
8111c8ac:	88807626 	beq	r17,r2,8111ca88 <_strtod_r+0x464>
8111c8b0:	002b883a 	mov	r21,zero
8111c8b4:	48003d1e 	bne	r9,zero,8111c9ac <_strtod_r+0x388>
8111c8b8:	2800391e 	bne	r5,zero,8111c9a0 <_strtod_r+0x37c>
8111c8bc:	9000381e 	bne	r18,zero,8111c9a0 <_strtod_r+0x37c>
8111c8c0:	583fa71e 	bne	r11,zero,8111c760 <__reset+0xfb0fc760>
8111c8c4:	00801384 	movi	r2,78
8111c8c8:	88800526 	beq	r17,r2,8111c8e0 <_strtod_r+0x2bc>
8111c8cc:	147fa20e 	bge	r2,r17,8111c758 <__reset+0xfb0fc758>
8111c8d0:	00801a44 	movi	r2,105
8111c8d4:	8883d726 	beq	r17,r2,8111d834 <_strtod_r+0x1210>
8111c8d8:	00801b84 	movi	r2,110
8111c8dc:	88bfa01e 	bne	r17,r2,8111c760 <__reset+0xfb0fc760>
8111c8e0:	01604534 	movhi	r5,33044
8111c8e4:	d9000617 	ldw	r4,24(sp)
8111c8e8:	29717a04 	addi	r5,r5,-14872
8111c8ec:	01c00644 	movi	r7,25
8111c8f0:	00000b06 	br	8111c920 <_strtod_r+0x2fc>
8111c8f4:	21000044 	addi	r4,r4,1
8111c8f8:	20800003 	ldbu	r2,0(r4)
8111c8fc:	10ffefc4 	addi	r3,r2,-65
8111c900:	10803fcc 	andi	r2,r2,255
8111c904:	1080201c 	xori	r2,r2,128
8111c908:	18c03fcc 	andi	r3,r3,255
8111c90c:	10bfe004 	addi	r2,r2,-128
8111c910:	38c00136 	bltu	r7,r3,8111c918 <_strtod_r+0x2f4>
8111c914:	10800804 	addi	r2,r2,32
8111c918:	29400044 	addi	r5,r5,1
8111c91c:	11bf901e 	bne	r2,r6,8111c760 <__reset+0xfb0fc760>
8111c920:	29800007 	ldb	r6,0(r5)
8111c924:	303ff31e 	bne	r6,zero,8111c8f4 <__reset+0xfb0fc8f4>
8111c928:	20800044 	addi	r2,r4,1
8111c92c:	d8800615 	stw	r2,24(sp)
8111c930:	20c00047 	ldb	r3,1(r4)
8111c934:	00800a04 	movi	r2,40
8111c938:	18849d26 	beq	r3,r2,8111dbb0 <_strtod_r+0x158c>
8111c93c:	047ffe34 	movhi	r17,65528
8111c940:	0025883a 	mov	r18,zero
8111c944:	902b883a 	mov	r21,r18
8111c948:	882d883a 	mov	r22,r17
8111c94c:	a03f8926 	beq	r20,zero,8111c774 <__reset+0xfb0fc774>
8111c950:	ddc00617 	ldw	r23,24(sp)
8111c954:	003f8606 	br	8111c770 <__reset+0xfb0fc770>
8111c958:	00800044 	movi	r2,1
8111c95c:	d8800715 	stw	r2,28(sp)
8111c960:	003f9606 	br	8111c7bc <__reset+0xfb0fc7bc>
8111c964:	21000044 	addi	r4,r4,1
8111c968:	d9000615 	stw	r4,24(sp)
8111c96c:	20800003 	ldbu	r2,0(r4)
8111c970:	10c03fcc 	andi	r3,r2,255
8111c974:	28ff462e 	bgeu	r5,r3,8111c690 <__reset+0xfb0fc690>
8111c978:	2027883a 	mov	r19,r4
8111c97c:	d8000715 	stw	zero,28(sp)
8111c980:	003f9506 	br	8111c7d8 <__reset+0xfb0fc7d8>
8111c984:	9cc002a4 	muli	r19,r19,10
8111c988:	10803fcc 	andi	r2,r2,255
8111c98c:	1080201c 	xori	r2,r2,128
8111c990:	10bfe004 	addi	r2,r2,-128
8111c994:	9885883a 	add	r2,r19,r2
8111c998:	14fff404 	addi	r19,r2,-48
8111c99c:	003fa506 	br	8111c834 <__reset+0xfb0fc834>
8111c9a0:	002b883a 	mov	r21,zero
8111c9a4:	002d883a 	mov	r22,zero
8111c9a8:	003fe806 	br	8111c94c <__reset+0xfb0fc94c>
8111c9ac:	aaabc83a 	sub	r21,r21,r10
8111c9b0:	b000011e 	bne	r22,zero,8111c9b8 <_strtod_r+0x394>
8111c9b4:	482d883a 	mov	r22,r9
8111c9b8:	00800404 	movi	r2,16
8111c9bc:	482f883a 	mov	r23,r9
8111c9c0:	1240010e 	bge	r2,r9,8111c9c8 <_strtod_r+0x3a4>
8111c9c4:	102f883a 	mov	r23,r2
8111c9c8:	e009883a 	mov	r4,fp
8111c9cc:	da401315 	stw	r9,76(sp)
8111c9d0:	11253940 	call	81125394 <__floatunsidf>
8111c9d4:	1025883a 	mov	r18,r2
8111c9d8:	00800244 	movi	r2,9
8111c9dc:	1823883a 	mov	r17,r3
8111c9e0:	da401317 	ldw	r9,76(sp)
8111c9e4:	15c0160e 	bge	r2,r23,8111ca40 <_strtod_r+0x41c>
8111c9e8:	b8bffdc4 	addi	r2,r23,-9
8111c9ec:	100490fa 	slli	r2,r2,3
8111c9f0:	180b883a 	mov	r5,r3
8111c9f4:	00e04534 	movhi	r3,33044
8111c9f8:	18f14504 	addi	r3,r3,-15084
8111c9fc:	1885883a 	add	r2,r3,r2
8111ca00:	11800017 	ldw	r6,0(r2)
8111ca04:	11c00117 	ldw	r7,4(r2)
8111ca08:	9009883a 	mov	r4,r18
8111ca0c:	110f2ac0 	call	8110f2ac <__muldf3>
8111ca10:	9809883a 	mov	r4,r19
8111ca14:	1025883a 	mov	r18,r2
8111ca18:	1823883a 	mov	r17,r3
8111ca1c:	11253940 	call	81125394 <__floatunsidf>
8111ca20:	9009883a 	mov	r4,r18
8111ca24:	880b883a 	mov	r5,r17
8111ca28:	100d883a 	mov	r6,r2
8111ca2c:	180f883a 	mov	r7,r3
8111ca30:	11235300 	call	81123530 <__adddf3>
8111ca34:	da401317 	ldw	r9,76(sp)
8111ca38:	1025883a 	mov	r18,r2
8111ca3c:	1823883a 	mov	r17,r3
8111ca40:	008003c4 	movi	r2,15
8111ca44:	12407b16 	blt	r2,r9,8111cc34 <_strtod_r+0x610>
8111ca48:	a83fbe26 	beq	r21,zero,8111c944 <__reset+0xfb0fc944>
8111ca4c:	0543670e 	bge	zero,r21,8111d7ec <_strtod_r+0x11c8>
8111ca50:	00c00584 	movi	r3,22
8111ca54:	1d42e816 	blt	r3,r21,8111d5f8 <_strtod_r+0xfd4>
8111ca58:	a82a90fa 	slli	r21,r21,3
8111ca5c:	00a04534 	movhi	r2,33044
8111ca60:	10b14504 	addi	r2,r2,-15084
8111ca64:	1545883a 	add	r2,r2,r21
8111ca68:	11000017 	ldw	r4,0(r2)
8111ca6c:	11400117 	ldw	r5,4(r2)
8111ca70:	900d883a 	mov	r6,r18
8111ca74:	880f883a 	mov	r7,r17
8111ca78:	110f2ac0 	call	8110f2ac <__muldf3>
8111ca7c:	102b883a 	mov	r21,r2
8111ca80:	182d883a 	mov	r22,r3
8111ca84:	003fb106 	br	8111c94c <__reset+0xfb0fc94c>
8111ca88:	4801b526 	beq	r9,zero,8111d160 <_strtod_r+0xb3c>
8111ca8c:	ddc00617 	ldw	r23,24(sp)
8111ca90:	00c00ac4 	movi	r3,43
8111ca94:	b8800044 	addi	r2,r23,1
8111ca98:	d8800615 	stw	r2,24(sp)
8111ca9c:	b8800047 	ldb	r2,1(r23)
8111caa0:	10c1e926 	beq	r2,r3,8111d248 <_strtod_r+0xc24>
8111caa4:	00c00b44 	movi	r3,45
8111caa8:	10c1ec26 	beq	r2,r3,8111d25c <_strtod_r+0xc38>
8111caac:	1023883a 	mov	r17,r2
8111cab0:	0019883a 	mov	r12,zero
8111cab4:	88bff404 	addi	r2,r17,-48
8111cab8:	00c00244 	movi	r3,9
8111cabc:	1881b736 	bltu	r3,r2,8111d19c <_strtod_r+0xb78>
8111cac0:	00800c04 	movi	r2,48
8111cac4:	8880071e 	bne	r17,r2,8111cae4 <_strtod_r+0x4c0>
8111cac8:	d8800617 	ldw	r2,24(sp)
8111cacc:	8807883a 	mov	r3,r17
8111cad0:	10800044 	addi	r2,r2,1
8111cad4:	d8800615 	stw	r2,24(sp)
8111cad8:	14400007 	ldb	r17,0(r2)
8111cadc:	10800044 	addi	r2,r2,1
8111cae0:	88fffc26 	beq	r17,r3,8111cad4 <__reset+0xfb0fcad4>
8111cae4:	88bff3c4 	addi	r2,r17,-49
8111cae8:	00c00204 	movi	r3,8
8111caec:	18bf7036 	bltu	r3,r2,8111c8b0 <__reset+0xfb0fc8b0>
8111caf0:	db800617 	ldw	r14,24(sp)
8111caf4:	88bff404 	addi	r2,r17,-48
8111caf8:	03400244 	movi	r13,9
8111cafc:	71c00044 	addi	r7,r14,1
8111cb00:	d9c00615 	stw	r7,24(sp)
8111cb04:	74400043 	ldbu	r17,1(r14)
8111cb08:	88fff404 	addi	r3,r17,-48
8111cb0c:	8c403fcc 	andi	r17,r17,255
8111cb10:	8c40201c 	xori	r17,r17,128
8111cb14:	18c03fcc 	andi	r3,r3,255
8111cb18:	8c7fe004 	addi	r17,r17,-128
8111cb1c:	68c00e36 	bltu	r13,r3,8111cb58 <_strtod_r+0x534>
8111cb20:	71000084 	addi	r4,r14,2
8111cb24:	d9000615 	stw	r4,24(sp)
8111cb28:	108002a4 	muli	r2,r2,10
8111cb2c:	21800003 	ldbu	r6,0(r4)
8111cb30:	200f883a 	mov	r7,r4
8111cb34:	1463883a 	add	r17,r2,r17
8111cb38:	30fff404 	addi	r3,r6,-48
8111cb3c:	88bff404 	addi	r2,r17,-48
8111cb40:	34403fcc 	andi	r17,r6,255
8111cb44:	8c40201c 	xori	r17,r17,128
8111cb48:	18c03fcc 	andi	r3,r3,255
8111cb4c:	8c7fe004 	addi	r17,r17,-128
8111cb50:	21000044 	addi	r4,r4,1
8111cb54:	68fff32e 	bgeu	r13,r3,8111cb24 <__reset+0xfb0fcb24>
8111cb58:	3b8fc83a 	sub	r7,r7,r14
8111cb5c:	00c00204 	movi	r3,8
8111cb60:	19c29716 	blt	r3,r7,8111d5c0 <_strtod_r+0xf9c>
8111cb64:	102b883a 	mov	r21,r2
8111cb68:	009387c4 	movi	r2,19999
8111cb6c:	1540010e 	bge	r2,r21,8111cb74 <_strtod_r+0x550>
8111cb70:	102b883a 	mov	r21,r2
8111cb74:	603f4f26 	beq	r12,zero,8111c8b4 <__reset+0xfb0fc8b4>
8111cb78:	056bc83a 	sub	r21,zero,r21
8111cb7c:	003f4d06 	br	8111c8b4 <__reset+0xfb0fc8b4>
8111cb80:	98800047 	ldb	r2,1(r19)
8111cb84:	00c01604 	movi	r3,88
8111cb88:	10c1de26 	beq	r2,r3,8111d304 <_strtod_r+0xce0>
8111cb8c:	00c01e04 	movi	r3,120
8111cb90:	10c1dc26 	beq	r2,r3,8111d304 <_strtod_r+0xce0>
8111cb94:	98c00044 	addi	r3,r19,1
8111cb98:	1827883a 	mov	r19,r3
8111cb9c:	d8c00615 	stw	r3,24(sp)
8111cba0:	18c00044 	addi	r3,r3,1
8111cba4:	18bfffc3 	ldbu	r2,-1(r3)
8111cba8:	11003fcc 	andi	r4,r2,255
8111cbac:	2100201c 	xori	r4,r4,128
8111cbb0:	213fe004 	addi	r4,r4,-128
8111cbb4:	217ff826 	beq	r4,r5,8111cb98 <__reset+0xfb0fcb98>
8111cbb8:	203f7926 	beq	r4,zero,8111c9a0 <__reset+0xfb0fc9a0>
8111cbbc:	dcc00815 	stw	r19,32(sp)
8111cbc0:	04800044 	movi	r18,1
8111cbc4:	003f0b06 	br	8111c7f4 <__reset+0xfb0fc7f4>
8111cbc8:	8009883a 	mov	r4,r16
8111cbcc:	111a8440 	call	8111a844 <_localeconv_r>
8111cbd0:	11000017 	ldw	r4,0(r2)
8111cbd4:	11117c80 	call	811117c8 <strlen>
8111cbd8:	d8c00617 	ldw	r3,24(sp)
8111cbdc:	1885883a 	add	r2,r3,r2
8111cbe0:	d8800615 	stw	r2,24(sp)
8111cbe4:	14400007 	ldb	r17,0(r2)
8111cbe8:	b001881e 	bne	r22,zero,8111d20c <_strtod_r+0xbe8>
8111cbec:	00c00c04 	movi	r3,48
8111cbf0:	88c3391e 	bne	r17,r3,8111d8d8 <_strtod_r+0x12b4>
8111cbf4:	10c00044 	addi	r3,r2,1
8111cbf8:	8809883a 	mov	r4,r17
8111cbfc:	d8c00615 	stw	r3,24(sp)
8111cc00:	1c400007 	ldb	r17,0(r3)
8111cc04:	188bc83a 	sub	r5,r3,r2
8111cc08:	18c00044 	addi	r3,r3,1
8111cc0c:	893ffb26 	beq	r17,r4,8111cbfc <__reset+0xfb0fcbfc>
8111cc10:	88bff3c4 	addi	r2,r17,-49
8111cc14:	00c00204 	movi	r3,8
8111cc18:	1882e72e 	bgeu	r3,r2,8111d7b8 <_strtod_r+0x1194>
8111cc1c:	00801944 	movi	r2,101
8111cc20:	88814d26 	beq	r17,r2,8111d158 <_strtod_r+0xb34>
8111cc24:	0013883a 	mov	r9,zero
8111cc28:	0015883a 	mov	r10,zero
8111cc2c:	02c00044 	movi	r11,1
8111cc30:	003f1d06 	br	8111c8a8 <__reset+0xfb0fc8a8>
8111cc34:	4defc83a 	sub	r23,r9,r23
8111cc38:	bd6f883a 	add	r23,r23,r21
8111cc3c:	05c21e0e 	bge	zero,r23,8111d4b8 <_strtod_r+0xe94>
8111cc40:	b88003cc 	andi	r2,r23,15
8111cc44:	10000d26 	beq	r2,zero,8111cc7c <_strtod_r+0x658>
8111cc48:	100490fa 	slli	r2,r2,3
8111cc4c:	00e04534 	movhi	r3,33044
8111cc50:	18f14504 	addi	r3,r3,-15084
8111cc54:	1885883a 	add	r2,r3,r2
8111cc58:	11000017 	ldw	r4,0(r2)
8111cc5c:	11400117 	ldw	r5,4(r2)
8111cc60:	900d883a 	mov	r6,r18
8111cc64:	880f883a 	mov	r7,r17
8111cc68:	da401315 	stw	r9,76(sp)
8111cc6c:	110f2ac0 	call	8110f2ac <__muldf3>
8111cc70:	da401317 	ldw	r9,76(sp)
8111cc74:	1025883a 	mov	r18,r2
8111cc78:	1823883a 	mov	r17,r3
8111cc7c:	023ffc04 	movi	r8,-16
8111cc80:	ba10703a 	and	r8,r23,r8
8111cc84:	40003c26 	beq	r8,zero,8111cd78 <_strtod_r+0x754>
8111cc88:	00804d04 	movi	r2,308
8111cc8c:	1201cd16 	blt	r2,r8,8111d3c4 <_strtod_r+0xda0>
8111cc90:	4011d13a 	srai	r8,r8,4
8111cc94:	03000044 	movi	r12,1
8111cc98:	62037c0e 	bge	r12,r8,8111da8c <_strtod_r+0x1468>
8111cc9c:	01204534 	movhi	r4,33044
8111cca0:	21313b04 	addi	r4,r4,-15124
8111cca4:	2015883a 	mov	r10,r4
8111cca8:	0027883a 	mov	r19,zero
8111ccac:	d9000915 	stw	r4,36(sp)
8111ccb0:	9005883a 	mov	r2,r18
8111ccb4:	8807883a 	mov	r3,r17
8111ccb8:	dc000c15 	stw	r16,48(sp)
8111ccbc:	dc800e15 	stw	r18,56(sp)
8111ccc0:	9821883a 	mov	r16,r19
8111ccc4:	0009883a 	mov	r4,zero
8111ccc8:	8827883a 	mov	r19,r17
8111cccc:	602f883a 	mov	r23,r12
8111ccd0:	da400a15 	stw	r9,40(sp)
8111ccd4:	5025883a 	mov	r18,r10
8111ccd8:	4023883a 	mov	r17,r8
8111ccdc:	8980004c 	andi	r6,r17,1
8111cce0:	30000626 	beq	r6,zero,8111ccfc <_strtod_r+0x6d8>
8111cce4:	91800017 	ldw	r6,0(r18)
8111cce8:	91c00117 	ldw	r7,4(r18)
8111ccec:	1009883a 	mov	r4,r2
8111ccf0:	180b883a 	mov	r5,r3
8111ccf4:	110f2ac0 	call	8110f2ac <__muldf3>
8111ccf8:	01000044 	movi	r4,1
8111ccfc:	8823d07a 	srai	r17,r17,1
8111cd00:	84000044 	addi	r16,r16,1
8111cd04:	94800204 	addi	r18,r18,8
8111cd08:	8dfff41e 	bne	r17,r23,8111ccdc <__reset+0xfb0fccdc>
8111cd0c:	21003fcc 	andi	r4,r4,255
8111cd10:	9823883a 	mov	r17,r19
8111cd14:	da400a17 	ldw	r9,40(sp)
8111cd18:	8027883a 	mov	r19,r16
8111cd1c:	dc800e17 	ldw	r18,56(sp)
8111cd20:	dc000c17 	ldw	r16,48(sp)
8111cd24:	2003b11e 	bne	r4,zero,8111dbec <_strtod_r+0x15c8>
8111cd28:	981690fa 	slli	r11,r19,3
8111cd2c:	d8800917 	ldw	r2,36(sp)
8111cd30:	01ff2c34 	movhi	r7,64688
8111cd34:	900d883a 	mov	r6,r18
8111cd38:	12ef883a 	add	r23,r2,r11
8111cd3c:	b9000017 	ldw	r4,0(r23)
8111cd40:	b9400117 	ldw	r5,4(r23)
8111cd44:	89cf883a 	add	r7,r17,r7
8111cd48:	da401315 	stw	r9,76(sp)
8111cd4c:	110f2ac0 	call	8110f2ac <__muldf3>
8111cd50:	1025883a 	mov	r18,r2
8111cd54:	011f2834 	movhi	r4,31904
8111cd58:	189ffc2c 	andhi	r2,r3,32752
8111cd5c:	da401317 	ldw	r9,76(sp)
8111cd60:	20819836 	bltu	r4,r2,8111d3c4 <_strtod_r+0xda0>
8111cd64:	011f2434 	movhi	r4,31888
8111cd68:	2083382e 	bgeu	r4,r2,8111da4c <_strtod_r+0x1428>
8111cd6c:	045ffc34 	movhi	r17,32752
8111cd70:	8c7fffc4 	addi	r17,r17,-1
8111cd74:	04bfffc4 	movi	r18,-1
8111cd78:	d8000915 	stw	zero,36(sp)
8111cd7c:	d9400817 	ldw	r5,32(sp)
8111cd80:	df000015 	stw	fp,0(sp)
8111cd84:	480f883a 	mov	r7,r9
8111cd88:	b00d883a 	mov	r6,r22
8111cd8c:	8009883a 	mov	r4,r16
8111cd90:	111af600 	call	8111af60 <__s2b>
8111cd94:	d8800815 	stw	r2,32(sp)
8111cd98:	10018a26 	beq	r2,zero,8111d3c4 <_strtod_r+0xda0>
8111cd9c:	a807d7fa 	srai	r3,r21,31
8111cda0:	0545c83a 	sub	r2,zero,r21
8111cda4:	dd400a15 	stw	r21,40(sp)
8111cda8:	1886703a 	and	r3,r3,r2
8111cdac:	d8c00c15 	stw	r3,48(sp)
8111cdb0:	a8013516 	blt	r21,zero,8111d288 <_strtod_r+0xc64>
8111cdb4:	d9400817 	ldw	r5,32(sp)
8111cdb8:	0011883a 	mov	r8,zero
8111cdbc:	0027883a 	mov	r19,zero
8111cdc0:	29400304 	addi	r5,r5,12
8111cdc4:	d9400f15 	stw	r5,60(sp)
8111cdc8:	402b883a 	mov	r21,r8
8111cdcc:	dd001215 	stw	r20,72(sp)
8111cdd0:	d8800817 	ldw	r2,32(sp)
8111cdd4:	8009883a 	mov	r4,r16
8111cdd8:	11400117 	ldw	r5,4(r2)
8111cddc:	111ad600 	call	8111ad60 <_Balloc>
8111cde0:	1029883a 	mov	r20,r2
8111cde4:	10012d26 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111cde8:	d8c00817 	ldw	r3,32(sp)
8111cdec:	d9400f17 	ldw	r5,60(sp)
8111cdf0:	11000304 	addi	r4,r2,12
8111cdf4:	19800417 	ldw	r6,16(r3)
8111cdf8:	31800084 	addi	r6,r6,2
8111cdfc:	318d883a 	add	r6,r6,r6
8111ce00:	318d883a 	add	r6,r6,r6
8111ce04:	1110e4c0 	call	81110e4c <memcpy>
8111ce08:	d9000204 	addi	r4,sp,8
8111ce0c:	d9000015 	stw	r4,0(sp)
8111ce10:	d9c00404 	addi	r7,sp,16
8111ce14:	900b883a 	mov	r5,r18
8111ce18:	880d883a 	mov	r6,r17
8111ce1c:	8009883a 	mov	r4,r16
8111ce20:	111ba3c0 	call	8111ba3c <__d2b>
8111ce24:	d8800515 	stw	r2,20(sp)
8111ce28:	dc801115 	stw	r18,68(sp)
8111ce2c:	dc401015 	stw	r17,64(sp)
8111ce30:	10027c26 	beq	r2,zero,8111d824 <_strtod_r+0x1200>
8111ce34:	01400044 	movi	r5,1
8111ce38:	8009883a 	mov	r4,r16
8111ce3c:	111b1840 	call	8111b184 <__i2b>
8111ce40:	1027883a 	mov	r19,r2
8111ce44:	10011526 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111ce48:	d8800417 	ldw	r2,16(sp)
8111ce4c:	1000c816 	blt	r2,zero,8111d170 <_strtod_r+0xb4c>
8111ce50:	d9400c17 	ldw	r5,48(sp)
8111ce54:	d9000a17 	ldw	r4,40(sp)
8111ce58:	28ad883a 	add	r22,r5,r2
8111ce5c:	d9400917 	ldw	r5,36(sp)
8111ce60:	df000217 	ldw	fp,8(sp)
8111ce64:	05ff0084 	movi	r23,-1022
8111ce68:	1147c83a 	sub	r3,r2,r5
8111ce6c:	1f07883a 	add	r3,r3,fp
8111ce70:	00800d84 	movi	r2,54
8111ce74:	18ffffc4 	addi	r3,r3,-1
8111ce78:	1739c83a 	sub	fp,r2,fp
8111ce7c:	1dc0a50e 	bge	r3,r23,8111d114 <_strtod_r+0xaf0>
8111ce80:	b8efc83a 	sub	r23,r23,r3
8111ce84:	008007c4 	movi	r2,31
8111ce88:	e5f9c83a 	sub	fp,fp,r23
8111ce8c:	15c0bc16 	blt	r2,r23,8111d180 <_strtod_r+0xb5c>
8111ce90:	00800044 	movi	r2,1
8111ce94:	15c4983a 	sll	r2,r2,r23
8111ce98:	d8000b15 	stw	zero,44(sp)
8111ce9c:	d8800d15 	stw	r2,52(sp)
8111cea0:	2707883a 	add	r3,r4,fp
8111cea4:	d9000917 	ldw	r4,36(sp)
8111cea8:	b739883a 	add	fp,r22,fp
8111ceac:	20ef883a 	add	r23,r4,r3
8111ceb0:	b009883a 	mov	r4,r22
8111ceb4:	e580010e 	bge	fp,r22,8111cebc <_strtod_r+0x898>
8111ceb8:	e009883a 	mov	r4,fp
8111cebc:	b805883a 	mov	r2,r23
8111cec0:	25c0010e 	bge	r4,r23,8111cec8 <_strtod_r+0x8a4>
8111cec4:	2005883a 	mov	r2,r4
8111cec8:	0080030e 	bge	zero,r2,8111ced8 <_strtod_r+0x8b4>
8111cecc:	e0b9c83a 	sub	fp,fp,r2
8111ced0:	b8afc83a 	sub	r23,r23,r2
8111ced4:	b0adc83a 	sub	r22,r22,r2
8111ced8:	d9400c17 	ldw	r5,48(sp)
8111cedc:	28001126 	beq	r5,zero,8111cf24 <_strtod_r+0x900>
8111cee0:	280d883a 	mov	r6,r5
8111cee4:	8009883a 	mov	r4,r16
8111cee8:	980b883a 	mov	r5,r19
8111ceec:	111b3c80 	call	8111b3c8 <__pow5mult>
8111cef0:	1027883a 	mov	r19,r2
8111cef4:	1000e926 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111cef8:	d9800517 	ldw	r6,20(sp)
8111cefc:	100b883a 	mov	r5,r2
8111cf00:	8009883a 	mov	r4,r16
8111cf04:	111b1c80 	call	8111b1c8 <__multiply>
8111cf08:	1000e426 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111cf0c:	d9400517 	ldw	r5,20(sp)
8111cf10:	8009883a 	mov	r4,r16
8111cf14:	d8801315 	stw	r2,76(sp)
8111cf18:	111ae100 	call	8111ae10 <_Bfree>
8111cf1c:	d8801317 	ldw	r2,76(sp)
8111cf20:	d8800515 	stw	r2,20(sp)
8111cf24:	0700060e 	bge	zero,fp,8111cf40 <_strtod_r+0x91c>
8111cf28:	d9400517 	ldw	r5,20(sp)
8111cf2c:	e00d883a 	mov	r6,fp
8111cf30:	8009883a 	mov	r4,r16
8111cf34:	111b5100 	call	8111b510 <__lshift>
8111cf38:	d8800515 	stw	r2,20(sp)
8111cf3c:	10023926 	beq	r2,zero,8111d824 <_strtod_r+0x1200>
8111cf40:	d8800a17 	ldw	r2,40(sp)
8111cf44:	10000626 	beq	r2,zero,8111cf60 <_strtod_r+0x93c>
8111cf48:	d9800a17 	ldw	r6,40(sp)
8111cf4c:	a00b883a 	mov	r5,r20
8111cf50:	8009883a 	mov	r4,r16
8111cf54:	111b3c80 	call	8111b3c8 <__pow5mult>
8111cf58:	1029883a 	mov	r20,r2
8111cf5c:	1000cf26 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111cf60:	05c0060e 	bge	zero,r23,8111cf7c <_strtod_r+0x958>
8111cf64:	a00b883a 	mov	r5,r20
8111cf68:	b80d883a 	mov	r6,r23
8111cf6c:	8009883a 	mov	r4,r16
8111cf70:	111b5100 	call	8111b510 <__lshift>
8111cf74:	1029883a 	mov	r20,r2
8111cf78:	1000c826 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111cf7c:	0580060e 	bge	zero,r22,8111cf98 <_strtod_r+0x974>
8111cf80:	980b883a 	mov	r5,r19
8111cf84:	b00d883a 	mov	r6,r22
8111cf88:	8009883a 	mov	r4,r16
8111cf8c:	111b5100 	call	8111b510 <__lshift>
8111cf90:	1027883a 	mov	r19,r2
8111cf94:	1000c126 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111cf98:	d9400517 	ldw	r5,20(sp)
8111cf9c:	a00d883a 	mov	r6,r20
8111cfa0:	8009883a 	mov	r4,r16
8111cfa4:	111b6c00 	call	8111b6c0 <__mdiff>
8111cfa8:	102b883a 	mov	r21,r2
8111cfac:	1000bb26 	beq	r2,zero,8111d29c <_strtod_r+0xc78>
8111cfb0:	10c00317 	ldw	r3,12(r2)
8111cfb4:	980b883a 	mov	r5,r19
8111cfb8:	10000315 	stw	zero,12(r2)
8111cfbc:	1009883a 	mov	r4,r2
8111cfc0:	d8c00e15 	stw	r3,56(sp)
8111cfc4:	111b6600 	call	8111b660 <__mcmp>
8111cfc8:	10027616 	blt	r2,zero,8111d9a4 <_strtod_r+0x1380>
8111cfcc:	10024426 	beq	r2,zero,8111d8e0 <_strtod_r+0x12bc>
8111cfd0:	980b883a 	mov	r5,r19
8111cfd4:	a809883a 	mov	r4,r21
8111cfd8:	111bb900 	call	8111bb90 <__ratio>
8111cfdc:	000d883a 	mov	r6,zero
8111cfe0:	01d00034 	movhi	r7,16384
8111cfe4:	1009883a 	mov	r4,r2
8111cfe8:	180b883a 	mov	r5,r3
8111cfec:	102f883a 	mov	r23,r2
8111cff0:	182d883a 	mov	r22,r3
8111cff4:	11248380 	call	81124838 <__ledf2>
8111cff8:	00804a16 	blt	zero,r2,8111d124 <_strtod_r+0xb00>
8111cffc:	d9400e17 	ldw	r5,56(sp)
8111d000:	28006b26 	beq	r5,zero,8111d1b0 <_strtod_r+0xb8c>
8111d004:	058ffc34 	movhi	r22,16368
8111d008:	d8000b15 	stw	zero,44(sp)
8111d00c:	d8000d15 	stw	zero,52(sp)
8111d010:	b02f883a 	mov	r23,r22
8111d014:	8f1ffc2c 	andhi	fp,r17,32752
8111d018:	009ff834 	movhi	r2,32736
8111d01c:	e080cd26 	beq	fp,r2,8111d354 <_strtod_r+0xd30>
8111d020:	d9400917 	ldw	r5,36(sp)
8111d024:	28001a26 	beq	r5,zero,8111d090 <_strtod_r+0xa6c>
8111d028:	0081a834 	movhi	r2,1696
8111d02c:	17001836 	bltu	r2,fp,8111d090 <_strtod_r+0xa6c>
8111d030:	d9000d17 	ldw	r4,52(sp)
8111d034:	01d07834 	movhi	r7,16864
8111d038:	39ffffc4 	addi	r7,r7,-1
8111d03c:	01bff034 	movhi	r6,65472
8111d040:	b80b883a 	mov	r5,r23
8111d044:	11248380 	call	81124838 <__ledf2>
8111d048:	00800e16 	blt	zero,r2,8111d084 <_strtod_r+0xa60>
8111d04c:	d9000d17 	ldw	r4,52(sp)
8111d050:	b80b883a 	mov	r5,r23
8111d054:	11226440 	call	81122644 <__fixunsdfsi>
8111d058:	10018126 	beq	r2,zero,8111d660 <_strtod_r+0x103c>
8111d05c:	1009883a 	mov	r4,r2
8111d060:	11253940 	call	81125394 <__floatunsidf>
8111d064:	d8800d15 	stw	r2,52(sp)
8111d068:	182f883a 	mov	r23,r3
8111d06c:	d8800e17 	ldw	r2,56(sp)
8111d070:	1001791e 	bne	r2,zero,8111d658 <_strtod_r+0x1034>
8111d074:	ba20003c 	xorhi	r8,r23,32768
8111d078:	d8c00d17 	ldw	r3,52(sp)
8111d07c:	402d883a 	mov	r22,r8
8111d080:	d8c00b15 	stw	r3,44(sp)
8111d084:	0081ac34 	movhi	r2,1712
8111d088:	b091883a 	add	r8,r22,r2
8111d08c:	472dc83a 	sub	r22,r8,fp
8111d090:	9009883a 	mov	r4,r18
8111d094:	880b883a 	mov	r5,r17
8111d098:	111b8c40 	call	8111b8c4 <__ulp>
8111d09c:	d9000b17 	ldw	r4,44(sp)
8111d0a0:	b00b883a 	mov	r5,r22
8111d0a4:	100d883a 	mov	r6,r2
8111d0a8:	180f883a 	mov	r7,r3
8111d0ac:	110f2ac0 	call	8110f2ac <__muldf3>
8111d0b0:	900d883a 	mov	r6,r18
8111d0b4:	880f883a 	mov	r7,r17
8111d0b8:	1009883a 	mov	r4,r2
8111d0bc:	180b883a 	mov	r5,r3
8111d0c0:	11235300 	call	81123530 <__adddf3>
8111d0c4:	1025883a 	mov	r18,r2
8111d0c8:	1823883a 	mov	r17,r3
8111d0cc:	182d883a 	mov	r22,r3
8111d0d0:	d9000917 	ldw	r4,36(sp)
8111d0d4:	2000021e 	bne	r4,zero,8111d0e0 <_strtod_r+0xabc>
8111d0d8:	b09ffc2c 	andhi	r2,r22,32752
8111d0dc:	e080be26 	beq	fp,r2,8111d3d8 <_strtod_r+0xdb4>
8111d0e0:	d9400517 	ldw	r5,20(sp)
8111d0e4:	8009883a 	mov	r4,r16
8111d0e8:	111ae100 	call	8111ae10 <_Bfree>
8111d0ec:	a00b883a 	mov	r5,r20
8111d0f0:	8009883a 	mov	r4,r16
8111d0f4:	111ae100 	call	8111ae10 <_Bfree>
8111d0f8:	980b883a 	mov	r5,r19
8111d0fc:	8009883a 	mov	r4,r16
8111d100:	111ae100 	call	8111ae10 <_Bfree>
8111d104:	a80b883a 	mov	r5,r21
8111d108:	8009883a 	mov	r4,r16
8111d10c:	111ae100 	call	8111ae10 <_Bfree>
8111d110:	003f2f06 	br	8111cdd0 <__reset+0xfb0fcdd0>
8111d114:	00c00044 	movi	r3,1
8111d118:	d8000b15 	stw	zero,44(sp)
8111d11c:	d8c00d15 	stw	r3,52(sp)
8111d120:	003f5f06 	br	8111cea0 <__reset+0xfb0fcea0>
8111d124:	b809883a 	mov	r4,r23
8111d128:	000d883a 	mov	r6,zero
8111d12c:	01cff834 	movhi	r7,16352
8111d130:	b00b883a 	mov	r5,r22
8111d134:	110f2ac0 	call	8110f2ac <__muldf3>
8111d138:	d9000e17 	ldw	r4,56(sp)
8111d13c:	d8800d15 	stw	r2,52(sp)
8111d140:	182f883a 	mov	r23,r3
8111d144:	2000181e 	bne	r4,zero,8111d1a8 <_strtod_r+0xb84>
8111d148:	1a20003c 	xorhi	r8,r3,32768
8111d14c:	d8800b15 	stw	r2,44(sp)
8111d150:	402d883a 	mov	r22,r8
8111d154:	003faf06 	br	8111d014 <__reset+0xfb0fd014>
8111d158:	0015883a 	mov	r10,zero
8111d15c:	02c00044 	movi	r11,1
8111d160:	2800011e 	bne	r5,zero,8111d168 <_strtod_r+0xb44>
8111d164:	903d7e26 	beq	r18,zero,8111c760 <__reset+0xfb0fc760>
8111d168:	0013883a 	mov	r9,zero
8111d16c:	003e4706 	br	8111ca8c <__reset+0xfb0fca8c>
8111d170:	d8c00a17 	ldw	r3,40(sp)
8111d174:	dd800c17 	ldw	r22,48(sp)
8111d178:	1889c83a 	sub	r4,r3,r2
8111d17c:	003f3706 	br	8111ce5c <__reset+0xfb0fce5c>
8111d180:	00bef884 	movi	r2,-1054
8111d184:	05c00044 	movi	r23,1
8111d188:	10c5c83a 	sub	r2,r2,r3
8111d18c:	b884983a 	sll	r2,r23,r2
8111d190:	ddc00d15 	stw	r23,52(sp)
8111d194:	d8800b15 	stw	r2,44(sp)
8111d198:	003f4106 	br	8111cea0 <__reset+0xfb0fcea0>
8111d19c:	ddc00615 	stw	r23,24(sp)
8111d1a0:	002b883a 	mov	r21,zero
8111d1a4:	003dc306 	br	8111c8b4 <__reset+0xfb0fc8b4>
8111d1a8:	1811883a 	mov	r8,r3
8111d1ac:	003fe706 	br	8111d14c <__reset+0xfb0fd14c>
8111d1b0:	90002e1e 	bne	r18,zero,8111d26c <_strtod_r+0xc48>
8111d1b4:	00c00434 	movhi	r3,16
8111d1b8:	18ffffc4 	addi	r3,r3,-1
8111d1bc:	88c4703a 	and	r2,r17,r3
8111d1c0:	10002c1e 	bne	r2,zero,8111d274 <_strtod_r+0xc50>
8111d1c4:	000d883a 	mov	r6,zero
8111d1c8:	01cffc34 	movhi	r7,16368
8111d1cc:	b809883a 	mov	r4,r23
8111d1d0:	b00b883a 	mov	r5,r22
8111d1d4:	11248380 	call	81124838 <__ledf2>
8111d1d8:	10021716 	blt	r2,zero,8111da38 <_strtod_r+0x1414>
8111d1dc:	b809883a 	mov	r4,r23
8111d1e0:	b00b883a 	mov	r5,r22
8111d1e4:	000d883a 	mov	r6,zero
8111d1e8:	01cff834 	movhi	r7,16352
8111d1ec:	110f2ac0 	call	8110f2ac <__muldf3>
8111d1f0:	d8800d15 	stw	r2,52(sp)
8111d1f4:	182f883a 	mov	r23,r3
8111d1f8:	102d883a 	mov	r22,r2
8111d1fc:	1a20003c 	xorhi	r8,r3,32768
8111d200:	dd800b15 	stw	r22,44(sp)
8111d204:	402d883a 	mov	r22,r8
8111d208:	003f8206 	br	8111d014 <__reset+0xfb0fd014>
8111d20c:	b013883a 	mov	r9,r22
8111d210:	000b883a 	mov	r5,zero
8111d214:	0015883a 	mov	r10,zero
8111d218:	893ff404 	addi	r4,r17,-48
8111d21c:	00800244 	movi	r2,9
8111d220:	11001036 	bltu	r2,r4,8111d264 <_strtod_r+0xc40>
8111d224:	28c00044 	addi	r3,r5,1
8111d228:	2023883a 	mov	r17,r4
8111d22c:	20014d1e 	bne	r4,zero,8111d764 <_strtod_r+0x1140>
8111d230:	d9800617 	ldw	r6,24(sp)
8111d234:	180b883a 	mov	r5,r3
8111d238:	30800044 	addi	r2,r6,1
8111d23c:	d8800615 	stw	r2,24(sp)
8111d240:	34400047 	ldb	r17,1(r6)
8111d244:	003ff406 	br	8111d218 <__reset+0xfb0fd218>
8111d248:	0019883a 	mov	r12,zero
8111d24c:	b8800084 	addi	r2,r23,2
8111d250:	d8800615 	stw	r2,24(sp)
8111d254:	bc400087 	ldb	r17,2(r23)
8111d258:	003e1606 	br	8111cab4 <__reset+0xfb0fcab4>
8111d25c:	03000044 	movi	r12,1
8111d260:	003ffa06 	br	8111d24c <__reset+0xfb0fd24c>
8111d264:	02c00044 	movi	r11,1
8111d268:	003d8d06 	br	8111c8a0 <__reset+0xfb0fc8a0>
8111d26c:	00800044 	movi	r2,1
8111d270:	9080fe26 	beq	r18,r2,8111d66c <_strtod_r+0x1048>
8111d274:	d8000b15 	stw	zero,44(sp)
8111d278:	05affc34 	movhi	r22,49136
8111d27c:	d8000d15 	stw	zero,52(sp)
8111d280:	05cffc34 	movhi	r23,16368
8111d284:	003f6306 	br	8111d014 <__reset+0xfb0fd014>
8111d288:	d8000a15 	stw	zero,40(sp)
8111d28c:	003ec906 	br	8111cdb4 <__reset+0xfb0fcdb4>
8111d290:	d9001117 	ldw	r4,68(sp)
8111d294:	00bfffc4 	movi	r2,-1
8111d298:	2080461e 	bne	r4,r2,8111d3b4 <_strtod_r+0xd90>
8111d29c:	dd000a15 	stw	r20,40(sp)
8111d2a0:	dd001217 	ldw	r20,72(sp)
8111d2a4:	a811883a 	mov	r8,r21
8111d2a8:	d8800517 	ldw	r2,20(sp)
8111d2ac:	00c00884 	movi	r3,34
8111d2b0:	80c00015 	stw	r3,0(r16)
8111d2b4:	002b883a 	mov	r21,zero
8111d2b8:	059ffc34 	movhi	r22,32752
8111d2bc:	100b883a 	mov	r5,r2
8111d2c0:	8009883a 	mov	r4,r16
8111d2c4:	da001315 	stw	r8,76(sp)
8111d2c8:	111ae100 	call	8111ae10 <_Bfree>
8111d2cc:	d9400a17 	ldw	r5,40(sp)
8111d2d0:	8009883a 	mov	r4,r16
8111d2d4:	111ae100 	call	8111ae10 <_Bfree>
8111d2d8:	980b883a 	mov	r5,r19
8111d2dc:	8009883a 	mov	r4,r16
8111d2e0:	111ae100 	call	8111ae10 <_Bfree>
8111d2e4:	d9400817 	ldw	r5,32(sp)
8111d2e8:	8009883a 	mov	r4,r16
8111d2ec:	111ae100 	call	8111ae10 <_Bfree>
8111d2f0:	da001317 	ldw	r8,76(sp)
8111d2f4:	8009883a 	mov	r4,r16
8111d2f8:	400b883a 	mov	r5,r8
8111d2fc:	111ae100 	call	8111ae10 <_Bfree>
8111d300:	003d9206 	br	8111c94c <__reset+0xfb0fc94c>
8111d304:	d8c00717 	ldw	r3,28(sp)
8111d308:	d8800504 	addi	r2,sp,20
8111d30c:	01a04534 	movhi	r6,33044
8111d310:	31b18004 	addi	r6,r6,-14848
8111d314:	d8c00115 	stw	r3,4(sp)
8111d318:	d8800015 	stw	r2,0(sp)
8111d31c:	d9c00404 	addi	r7,sp,16
8111d320:	d9400604 	addi	r5,sp,24
8111d324:	8009883a 	mov	r4,r16
8111d328:	11217780 	call	81121778 <__gethex>
8111d32c:	154001cc 	andi	r21,r2,7
8111d330:	a83d9b26 	beq	r21,zero,8111c9a0 <__reset+0xfb0fc9a0>
8111d334:	00c00184 	movi	r3,6
8111d338:	a8c0d61e 	bne	r21,r3,8111d694 <_strtod_r+0x1070>
8111d33c:	9cc00044 	addi	r19,r19,1
8111d340:	dcc00615 	stw	r19,24(sp)
8111d344:	002b883a 	mov	r21,zero
8111d348:	002d883a 	mov	r22,zero
8111d34c:	d8000715 	stw	zero,28(sp)
8111d350:	003d7e06 	br	8111c94c <__reset+0xfb0fc94c>
8111d354:	00bf2c34 	movhi	r2,64688
8111d358:	88a3883a 	add	r17,r17,r2
8111d35c:	9009883a 	mov	r4,r18
8111d360:	880b883a 	mov	r5,r17
8111d364:	111b8c40 	call	8111b8c4 <__ulp>
8111d368:	d9000b17 	ldw	r4,44(sp)
8111d36c:	100d883a 	mov	r6,r2
8111d370:	180f883a 	mov	r7,r3
8111d374:	b00b883a 	mov	r5,r22
8111d378:	110f2ac0 	call	8110f2ac <__muldf3>
8111d37c:	900d883a 	mov	r6,r18
8111d380:	180b883a 	mov	r5,r3
8111d384:	880f883a 	mov	r7,r17
8111d388:	1009883a 	mov	r4,r2
8111d38c:	11235300 	call	81123530 <__adddf3>
8111d390:	015f2834 	movhi	r5,31904
8111d394:	1025883a 	mov	r18,r2
8111d398:	297fffc4 	addi	r5,r5,-1
8111d39c:	189ffc2c 	andhi	r2,r3,32752
8111d3a0:	2880892e 	bgeu	r5,r2,8111d5c8 <_strtod_r+0xfa4>
8111d3a4:	d8801017 	ldw	r2,64(sp)
8111d3a8:	00dffc34 	movhi	r3,32752
8111d3ac:	18ffffc4 	addi	r3,r3,-1
8111d3b0:	10ffb726 	beq	r2,r3,8111d290 <__reset+0xfb0fd290>
8111d3b4:	045ffc34 	movhi	r17,32752
8111d3b8:	8c7fffc4 	addi	r17,r17,-1
8111d3bc:	04bfffc4 	movi	r18,-1
8111d3c0:	003f4706 	br	8111d0e0 <__reset+0xfb0fd0e0>
8111d3c4:	00800884 	movi	r2,34
8111d3c8:	80800015 	stw	r2,0(r16)
8111d3cc:	002b883a 	mov	r21,zero
8111d3d0:	059ffc34 	movhi	r22,32752
8111d3d4:	003d5d06 	br	8111c94c <__reset+0xfb0fc94c>
8111d3d8:	d9000d17 	ldw	r4,52(sp)
8111d3dc:	b80b883a 	mov	r5,r23
8111d3e0:	11252300 	call	81125230 <__fixdfsi>
8111d3e4:	1009883a 	mov	r4,r2
8111d3e8:	11252b00 	call	811252b0 <__floatsidf>
8111d3ec:	d9000d17 	ldw	r4,52(sp)
8111d3f0:	b80b883a 	mov	r5,r23
8111d3f4:	100d883a 	mov	r6,r2
8111d3f8:	180f883a 	mov	r7,r3
8111d3fc:	112492c0 	call	8112492c <__subdf3>
8111d400:	d9400e17 	ldw	r5,56(sp)
8111d404:	1039883a 	mov	fp,r2
8111d408:	182f883a 	mov	r23,r3
8111d40c:	2800141e 	bne	r5,zero,8111d460 <_strtod_r+0xe3c>
8111d410:	9000131e 	bne	r18,zero,8111d460 <_strtod_r+0xe3c>
8111d414:	00800434 	movhi	r2,16
8111d418:	10bfffc4 	addi	r2,r2,-1
8111d41c:	b0ac703a 	and	r22,r22,r2
8111d420:	b0000f1e 	bne	r22,zero,8111d460 <_strtod_r+0xe3c>
8111d424:	01a52834 	movhi	r6,38048
8111d428:	01cff434 	movhi	r7,16336
8111d42c:	318d6544 	addi	r6,r6,13717
8111d430:	39ffffc4 	addi	r7,r7,-1
8111d434:	e009883a 	mov	r4,fp
8111d438:	180b883a 	mov	r5,r3
8111d43c:	11248380 	call	81124838 <__ledf2>
8111d440:	103f270e 	bge	r2,zero,8111d0e0 <__reset+0xfb0fd0e0>
8111d444:	dd000a15 	stw	r20,40(sp)
8111d448:	a811883a 	mov	r8,r21
8111d44c:	dd001217 	ldw	r20,72(sp)
8111d450:	d8800517 	ldw	r2,20(sp)
8111d454:	002b883a 	mov	r21,zero
8111d458:	882d883a 	mov	r22,r17
8111d45c:	003f9706 	br	8111d2bc <__reset+0xfb0fd2bc>
8111d460:	01a52834 	movhi	r6,38048
8111d464:	01cff834 	movhi	r7,16352
8111d468:	318d6544 	addi	r6,r6,13717
8111d46c:	39ffffc4 	addi	r7,r7,-1
8111d470:	e009883a 	mov	r4,fp
8111d474:	b80b883a 	mov	r5,r23
8111d478:	11248380 	call	81124838 <__ledf2>
8111d47c:	10000716 	blt	r2,zero,8111d49c <_strtod_r+0xe78>
8111d480:	018d6c34 	movhi	r6,13744
8111d484:	31b94d44 	addi	r6,r6,-6859
8111d488:	01cff834 	movhi	r7,16352
8111d48c:	e009883a 	mov	r4,fp
8111d490:	b80b883a 	mov	r5,r23
8111d494:	112475c0 	call	8112475c <__gedf2>
8111d498:	00bf110e 	bge	zero,r2,8111d0e0 <__reset+0xfb0fd0e0>
8111d49c:	dd000a15 	stw	r20,40(sp)
8111d4a0:	a811883a 	mov	r8,r21
8111d4a4:	dd001217 	ldw	r20,72(sp)
8111d4a8:	d8800517 	ldw	r2,20(sp)
8111d4ac:	902b883a 	mov	r21,r18
8111d4b0:	882d883a 	mov	r22,r17
8111d4b4:	003f8106 	br	8111d2bc <__reset+0xfb0fd2bc>
8111d4b8:	b83e2f26 	beq	r23,zero,8111cd78 <__reset+0xfb0fcd78>
8111d4bc:	05efc83a 	sub	r23,zero,r23
8111d4c0:	b88003cc 	andi	r2,r23,15
8111d4c4:	10000d26 	beq	r2,zero,8111d4fc <_strtod_r+0xed8>
8111d4c8:	100490fa 	slli	r2,r2,3
8111d4cc:	00e04534 	movhi	r3,33044
8111d4d0:	18f14504 	addi	r3,r3,-15084
8111d4d4:	1885883a 	add	r2,r3,r2
8111d4d8:	11800017 	ldw	r6,0(r2)
8111d4dc:	11c00117 	ldw	r7,4(r2)
8111d4e0:	9009883a 	mov	r4,r18
8111d4e4:	880b883a 	mov	r5,r17
8111d4e8:	da401315 	stw	r9,76(sp)
8111d4ec:	1123de40 	call	81123de4 <__divdf3>
8111d4f0:	da401317 	ldw	r9,76(sp)
8111d4f4:	1025883a 	mov	r18,r2
8111d4f8:	1823883a 	mov	r17,r3
8111d4fc:	b82fd13a 	srai	r23,r23,4
8111d500:	b83e1d26 	beq	r23,zero,8111cd78 <__reset+0xfb0fcd78>
8111d504:	008007c4 	movi	r2,31
8111d508:	15c02816 	blt	r2,r23,8111d5ac <_strtod_r+0xf88>
8111d50c:	b880040c 	andi	r2,r23,16
8111d510:	10019726 	beq	r2,zero,8111db70 <_strtod_r+0x154c>
8111d514:	05c1880e 	bge	zero,r23,8111db38 <_strtod_r+0x1514>
8111d518:	00c01a84 	movi	r3,106
8111d51c:	d8c00915 	stw	r3,36(sp)
8111d520:	04e04534 	movhi	r19,33044
8111d524:	9cf18504 	addi	r19,r19,-14828
8111d528:	8807883a 	mov	r3,r17
8111d52c:	9005883a 	mov	r2,r18
8111d530:	8023883a 	mov	r17,r16
8111d534:	0009883a 	mov	r4,zero
8111d538:	9821883a 	mov	r16,r19
8111d53c:	da400a15 	stw	r9,40(sp)
8111d540:	1827883a 	mov	r19,r3
8111d544:	b980004c 	andi	r6,r23,1
8111d548:	30000626 	beq	r6,zero,8111d564 <_strtod_r+0xf40>
8111d54c:	81800017 	ldw	r6,0(r16)
8111d550:	81c00117 	ldw	r7,4(r16)
8111d554:	1009883a 	mov	r4,r2
8111d558:	180b883a 	mov	r5,r3
8111d55c:	110f2ac0 	call	8110f2ac <__muldf3>
8111d560:	01000044 	movi	r4,1
8111d564:	b82fd07a 	srai	r23,r23,1
8111d568:	84000204 	addi	r16,r16,8
8111d56c:	b83ff51e 	bne	r23,zero,8111d544 <__reset+0xfb0fd544>
8111d570:	21003fcc 	andi	r4,r4,255
8111d574:	8821883a 	mov	r16,r17
8111d578:	da400a17 	ldw	r9,40(sp)
8111d57c:	9823883a 	mov	r17,r19
8111d580:	2001a51e 	bne	r4,zero,8111dc18 <_strtod_r+0x15f4>
8111d584:	d9000917 	ldw	r4,36(sp)
8111d588:	20016d1e 	bne	r4,zero,8111db40 <_strtod_r+0x151c>
8111d58c:	000d883a 	mov	r6,zero
8111d590:	000f883a 	mov	r7,zero
8111d594:	9009883a 	mov	r4,r18
8111d598:	880b883a 	mov	r5,r17
8111d59c:	da401315 	stw	r9,76(sp)
8111d5a0:	11246d40 	call	811246d4 <__eqdf2>
8111d5a4:	da401317 	ldw	r9,76(sp)
8111d5a8:	103df41e 	bne	r2,zero,8111cd7c <__reset+0xfb0fcd7c>
8111d5ac:	00800884 	movi	r2,34
8111d5b0:	80800015 	stw	r2,0(r16)
8111d5b4:	002b883a 	mov	r21,zero
8111d5b8:	002d883a 	mov	r22,zero
8111d5bc:	003ce306 	br	8111c94c <__reset+0xfb0fc94c>
8111d5c0:	055387c4 	movi	r21,19999
8111d5c4:	003d6b06 	br	8111cb74 <__reset+0xfb0fcb74>
8111d5c8:	0440d434 	movhi	r17,848
8111d5cc:	1c63883a 	add	r17,r3,r17
8111d5d0:	882d883a 	mov	r22,r17
8111d5d4:	003ebe06 	br	8111d0d0 <__reset+0xfb0fd0d0>
8111d5d8:	14403fcc 	andi	r17,r2,255
8111d5dc:	8c40201c 	xori	r17,r17,128
8111d5e0:	8c7fe004 	addi	r17,r17,-128
8111d5e4:	dd400817 	ldw	r21,32(sp)
8111d5e8:	0027883a 	mov	r19,zero
8111d5ec:	0039883a 	mov	fp,zero
8111d5f0:	002d883a 	mov	r22,zero
8111d5f4:	003c9906 	br	8111c85c <__reset+0xfb0fc85c>
8111d5f8:	00c00944 	movi	r3,37
8111d5fc:	1a47c83a 	sub	r3,r3,r9
8111d600:	1d7d8c16 	blt	r3,r21,8111cc34 <__reset+0xfb0fcc34>
8111d604:	1261c83a 	sub	r16,r2,r9
8111d608:	800490fa 	slli	r2,r16,3
8111d60c:	04e04534 	movhi	r19,33044
8111d610:	9cf14504 	addi	r19,r19,-15084
8111d614:	9885883a 	add	r2,r19,r2
8111d618:	11000017 	ldw	r4,0(r2)
8111d61c:	11400117 	ldw	r5,4(r2)
8111d620:	900d883a 	mov	r6,r18
8111d624:	880f883a 	mov	r7,r17
8111d628:	110f2ac0 	call	8110f2ac <__muldf3>
8111d62c:	ac0dc83a 	sub	r6,r21,r16
8111d630:	300c90fa 	slli	r6,r6,3
8111d634:	1009883a 	mov	r4,r2
8111d638:	180b883a 	mov	r5,r3
8111d63c:	9985883a 	add	r2,r19,r6
8111d640:	11800017 	ldw	r6,0(r2)
8111d644:	11c00117 	ldw	r7,4(r2)
8111d648:	110f2ac0 	call	8110f2ac <__muldf3>
8111d64c:	102b883a 	mov	r21,r2
8111d650:	182d883a 	mov	r22,r3
8111d654:	003cbd06 	br	8111c94c <__reset+0xfb0fc94c>
8111d658:	b811883a 	mov	r8,r23
8111d65c:	003e8606 	br	8111d078 <__reset+0xfb0fd078>
8111d660:	d8000d15 	stw	zero,52(sp)
8111d664:	05cffc34 	movhi	r23,16368
8111d668:	003e8006 	br	8111d06c <__reset+0xfb0fd06c>
8111d66c:	883f011e 	bne	r17,zero,8111d274 <__reset+0xfb0fd274>
8111d670:	dd000a15 	stw	r20,40(sp)
8111d674:	dd001217 	ldw	r20,72(sp)
8111d678:	a811883a 	mov	r8,r21
8111d67c:	00800884 	movi	r2,34
8111d680:	80800015 	stw	r2,0(r16)
8111d684:	002b883a 	mov	r21,zero
8111d688:	d8800517 	ldw	r2,20(sp)
8111d68c:	002d883a 	mov	r22,zero
8111d690:	003f0a06 	br	8111d2bc <__reset+0xfb0fd2bc>
8111d694:	d9800517 	ldw	r6,20(sp)
8111d698:	30000826 	beq	r6,zero,8111d6bc <_strtod_r+0x1098>
8111d69c:	01400d44 	movi	r5,53
8111d6a0:	d9000204 	addi	r4,sp,8
8111d6a4:	d8801315 	stw	r2,76(sp)
8111d6a8:	111bcb80 	call	8111bcb8 <__copybits>
8111d6ac:	d9400517 	ldw	r5,20(sp)
8111d6b0:	8009883a 	mov	r4,r16
8111d6b4:	111ae100 	call	8111ae10 <_Bfree>
8111d6b8:	d8801317 	ldw	r2,76(sp)
8111d6bc:	00c00184 	movi	r3,6
8111d6c0:	1d400f36 	bltu	r3,r21,8111d700 <_strtod_r+0x10dc>
8111d6c4:	a82a90ba 	slli	r21,r21,2
8111d6c8:	00e044b4 	movhi	r3,33042
8111d6cc:	18f5b704 	addi	r3,r3,-10532
8111d6d0:	a8eb883a 	add	r21,r21,r3
8111d6d4:	a8c00017 	ldw	r3,0(r21)
8111d6d8:	1800683a 	jmp	r3
8111d6dc:	8111d758 	cmpnei	r4,r16,18269
8111d6e0:	8111d730 	cmpltui	r4,r16,18268
8111d6e4:	8111d714 	ori	r4,r16,18268
8111d6e8:	8111d6f8 	rdprs	r4,r16,18267
8111d6ec:	8111d720 	cmpeqi	r4,r16,18268
8111d6f0:	8111d730 	cmpltui	r4,r16,18268
8111d6f4:	8111d758 	cmpnei	r4,r16,18269
8111d6f8:	045ffc34 	movhi	r17,32752
8111d6fc:	0025883a 	mov	r18,zero
8111d700:	1080020c 	andi	r2,r2,8
8111d704:	902b883a 	mov	r21,r18
8111d708:	103c8f26 	beq	r2,zero,8111c948 <__reset+0xfb0fc948>
8111d70c:	8da00034 	orhi	r22,r17,32768
8111d710:	003c8e06 	br	8111c94c <__reset+0xfb0fc94c>
8111d714:	dc800217 	ldw	r18,8(sp)
8111d718:	dc400317 	ldw	r17,12(sp)
8111d71c:	003ff806 	br	8111d700 <__reset+0xfb0fd700>
8111d720:	04600034 	movhi	r17,32768
8111d724:	8c7fffc4 	addi	r17,r17,-1
8111d728:	04bfffc4 	movi	r18,-1
8111d72c:	003ff406 	br	8111d700 <__reset+0xfb0fd700>
8111d730:	d8c00417 	ldw	r3,16(sp)
8111d734:	dc400317 	ldw	r17,12(sp)
8111d738:	013ffc34 	movhi	r4,65520
8111d73c:	18c10cc4 	addi	r3,r3,1075
8111d740:	1806953a 	slli	r3,r3,20
8111d744:	213fffc4 	addi	r4,r4,-1
8111d748:	8922703a 	and	r17,r17,r4
8111d74c:	dc800217 	ldw	r18,8(sp)
8111d750:	88e2b03a 	or	r17,r17,r3
8111d754:	003fea06 	br	8111d700 <__reset+0xfb0fd700>
8111d758:	0023883a 	mov	r17,zero
8111d75c:	0025883a 	mov	r18,zero
8111d760:	003fe706 	br	8111d700 <__reset+0xfb0fd700>
8111d764:	01800044 	movi	r6,1
8111d768:	50d5883a 	add	r10,r10,r3
8111d76c:	2a4b883a 	add	r5,r5,r9
8111d770:	19811a26 	beq	r3,r6,8111dbdc <_strtod_r+0x15b8>
8111d774:	01800204 	movi	r6,8
8111d778:	01c00404 	movi	r7,16
8111d77c:	4a400044 	addi	r9,r9,1
8111d780:	48bfffc4 	addi	r2,r9,-1
8111d784:	30801616 	blt	r6,r2,8111d7e0 <_strtod_r+0x11bc>
8111d788:	e70002a4 	muli	fp,fp,10
8111d78c:	497ffb1e 	bne	r9,r5,8111d77c <__reset+0xfb0fd77c>
8111d790:	d9800617 	ldw	r6,24(sp)
8111d794:	4a400044 	addi	r9,r9,1
8111d798:	00c00204 	movi	r3,8
8111d79c:	19400c0e 	bge	r3,r5,8111d7d0 <_strtod_r+0x11ac>
8111d7a0:	00800404 	movi	r2,16
8111d7a4:	000b883a 	mov	r5,zero
8111d7a8:	127ea316 	blt	r2,r9,8111d238 <__reset+0xfb0fd238>
8111d7ac:	988002a4 	muli	r2,r19,10
8111d7b0:	20a7883a 	add	r19,r4,r2
8111d7b4:	003ea006 	br	8111d238 <__reset+0xfb0fd238>
8111d7b8:	d8800617 	ldw	r2,24(sp)
8111d7bc:	8c7ff404 	addi	r17,r17,-48
8111d7c0:	2a800044 	addi	r10,r5,1
8111d7c4:	d8800815 	stw	r2,32(sp)
8111d7c8:	100d883a 	mov	r6,r2
8111d7cc:	02400044 	movi	r9,1
8111d7d0:	e08002a4 	muli	r2,fp,10
8111d7d4:	000b883a 	mov	r5,zero
8111d7d8:	88b9883a 	add	fp,r17,r2
8111d7dc:	003e9606 	br	8111d238 <__reset+0xfb0fd238>
8111d7e0:	3a7fea16 	blt	r7,r9,8111d78c <__reset+0xfb0fd78c>
8111d7e4:	9cc002a4 	muli	r19,r19,10
8111d7e8:	003fe806 	br	8111d78c <__reset+0xfb0fd78c>
8111d7ec:	00bffa84 	movi	r2,-22
8111d7f0:	a8bd1016 	blt	r21,r2,8111cc34 <__reset+0xfb0fcc34>
8111d7f4:	a82a90fa 	slli	r21,r21,3
8111d7f8:	00a04534 	movhi	r2,33044
8111d7fc:	10b14504 	addi	r2,r2,-15084
8111d800:	1545c83a 	sub	r2,r2,r21
8111d804:	11800017 	ldw	r6,0(r2)
8111d808:	11c00117 	ldw	r7,4(r2)
8111d80c:	9009883a 	mov	r4,r18
8111d810:	880b883a 	mov	r5,r17
8111d814:	1123de40 	call	81123de4 <__divdf3>
8111d818:	102b883a 	mov	r21,r2
8111d81c:	182d883a 	mov	r22,r3
8111d820:	003c4a06 	br	8111c94c <__reset+0xfb0fc94c>
8111d824:	dd000a15 	stw	r20,40(sp)
8111d828:	a811883a 	mov	r8,r21
8111d82c:	dd001217 	ldw	r20,72(sp)
8111d830:	003e9e06 	br	8111d2ac <__reset+0xfb0fd2ac>
8111d834:	01604534 	movhi	r5,33044
8111d838:	d9000617 	ldw	r4,24(sp)
8111d83c:	29717704 	addi	r5,r5,-14884
8111d840:	01c00644 	movi	r7,25
8111d844:	00000b06 	br	8111d874 <_strtod_r+0x1250>
8111d848:	21000044 	addi	r4,r4,1
8111d84c:	20800003 	ldbu	r2,0(r4)
8111d850:	10ffefc4 	addi	r3,r2,-65
8111d854:	10803fcc 	andi	r2,r2,255
8111d858:	1080201c 	xori	r2,r2,128
8111d85c:	18c03fcc 	andi	r3,r3,255
8111d860:	10bfe004 	addi	r2,r2,-128
8111d864:	38c00136 	bltu	r7,r3,8111d86c <_strtod_r+0x1248>
8111d868:	10800804 	addi	r2,r2,32
8111d86c:	29400044 	addi	r5,r5,1
8111d870:	11bbbb1e 	bne	r2,r6,8111c760 <__reset+0xfb0fc760>
8111d874:	29800007 	ldb	r6,0(r5)
8111d878:	303ff31e 	bne	r6,zero,8111d848 <__reset+0xfb0fd848>
8111d87c:	01a04534 	movhi	r6,33044
8111d880:	d9000615 	stw	r4,24(sp)
8111d884:	31b17804 	addi	r6,r6,-14880
8111d888:	200b883a 	mov	r5,r4
8111d88c:	02000644 	movi	r8,25
8111d890:	00000a06 	br	8111d8bc <_strtod_r+0x1298>
8111d894:	28800003 	ldbu	r2,0(r5)
8111d898:	10ffefc4 	addi	r3,r2,-65
8111d89c:	10803fcc 	andi	r2,r2,255
8111d8a0:	1080201c 	xori	r2,r2,128
8111d8a4:	18c03fcc 	andi	r3,r3,255
8111d8a8:	10bfe004 	addi	r2,r2,-128
8111d8ac:	40c00136 	bltu	r8,r3,8111d8b4 <_strtod_r+0x1290>
8111d8b0:	10800804 	addi	r2,r2,32
8111d8b4:	31800044 	addi	r6,r6,1
8111d8b8:	11c0711e 	bne	r2,r7,8111da80 <_strtod_r+0x145c>
8111d8bc:	31c00007 	ldb	r7,0(r6)
8111d8c0:	29400044 	addi	r5,r5,1
8111d8c4:	383ff31e 	bne	r7,zero,8111d894 <__reset+0xfb0fd894>
8111d8c8:	d9400615 	stw	r5,24(sp)
8111d8cc:	045ffc34 	movhi	r17,32752
8111d8d0:	0025883a 	mov	r18,zero
8111d8d4:	003c1b06 	br	8111c944 <__reset+0xfb0fc944>
8111d8d8:	000b883a 	mov	r5,zero
8111d8dc:	003ccc06 	br	8111cc10 <__reset+0xfb0fcc10>
8111d8e0:	d9400e17 	ldw	r5,56(sp)
8111d8e4:	dd000a15 	stw	r20,40(sp)
8111d8e8:	00800434 	movhi	r2,16
8111d8ec:	a811883a 	mov	r8,r21
8111d8f0:	dd001217 	ldw	r20,72(sp)
8111d8f4:	dd401117 	ldw	r21,68(sp)
8111d8f8:	dd801017 	ldw	r22,64(sp)
8111d8fc:	10bfffc4 	addi	r2,r2,-1
8111d900:	28005626 	beq	r5,zero,8111da5c <_strtod_r+0x1438>
8111d904:	8886703a 	and	r3,r17,r2
8111d908:	18807826 	beq	r3,r2,8111daec <_strtod_r+0x14c8>
8111d90c:	d8c00b17 	ldw	r3,44(sp)
8111d910:	18005726 	beq	r3,zero,8111da70 <_strtod_r+0x144c>
8111d914:	1c44703a 	and	r2,r3,r17
8111d918:	10000f26 	beq	r2,zero,8111d958 <_strtod_r+0x1334>
8111d91c:	d9000e17 	ldw	r4,56(sp)
8111d920:	d9800917 	ldw	r6,36(sp)
8111d924:	20005e26 	beq	r4,zero,8111daa0 <_strtod_r+0x147c>
8111d928:	9009883a 	mov	r4,r18
8111d92c:	880b883a 	mov	r5,r17
8111d930:	da001315 	stw	r8,76(sp)
8111d934:	111c5b80 	call	8111c5b8 <sulp>
8111d938:	100d883a 	mov	r6,r2
8111d93c:	180f883a 	mov	r7,r3
8111d940:	9009883a 	mov	r4,r18
8111d944:	880b883a 	mov	r5,r17
8111d948:	11235300 	call	81123530 <__adddf3>
8111d94c:	da001317 	ldw	r8,76(sp)
8111d950:	102b883a 	mov	r21,r2
8111d954:	182d883a 	mov	r22,r3
8111d958:	d8c00917 	ldw	r3,36(sp)
8111d95c:	18000f26 	beq	r3,zero,8111d99c <_strtod_r+0x1378>
8111d960:	a809883a 	mov	r4,r21
8111d964:	b00b883a 	mov	r5,r22
8111d968:	000d883a 	mov	r6,zero
8111d96c:	01ce5434 	movhi	r7,14672
8111d970:	da001315 	stw	r8,76(sp)
8111d974:	110f2ac0 	call	8110f2ac <__muldf3>
8111d978:	102b883a 	mov	r21,r2
8111d97c:	182d883a 	mov	r22,r3
8111d980:	da001317 	ldw	r8,76(sp)
8111d984:	1800051e 	bne	r3,zero,8111d99c <_strtod_r+0x1378>
8111d988:	d8800517 	ldw	r2,20(sp)
8111d98c:	a83e4b1e 	bne	r21,zero,8111d2bc <__reset+0xfb0fd2bc>
8111d990:	00c00884 	movi	r3,34
8111d994:	80c00015 	stw	r3,0(r16)
8111d998:	003e4806 	br	8111d2bc <__reset+0xfb0fd2bc>
8111d99c:	d8800517 	ldw	r2,20(sp)
8111d9a0:	003e4606 	br	8111d2bc <__reset+0xfb0fd2bc>
8111d9a4:	d9000e17 	ldw	r4,56(sp)
8111d9a8:	dd000a15 	stw	r20,40(sp)
8111d9ac:	a811883a 	mov	r8,r21
8111d9b0:	dd001217 	ldw	r20,72(sp)
8111d9b4:	dd401117 	ldw	r21,68(sp)
8111d9b8:	dd801017 	ldw	r22,64(sp)
8111d9bc:	203fe61e 	bne	r4,zero,8111d958 <__reset+0xfb0fd958>
8111d9c0:	903fe51e 	bne	r18,zero,8111d958 <__reset+0xfb0fd958>
8111d9c4:	00800434 	movhi	r2,16
8111d9c8:	10bfffc4 	addi	r2,r2,-1
8111d9cc:	8884703a 	and	r2,r17,r2
8111d9d0:	103fe11e 	bne	r2,zero,8111d958 <__reset+0xfb0fd958>
8111d9d4:	8ddffc2c 	andhi	r23,r17,32752
8111d9d8:	0081ac34 	movhi	r2,1712
8111d9dc:	15ffde2e 	bgeu	r2,r23,8111d958 <__reset+0xfb0fd958>
8111d9e0:	40800517 	ldw	r2,20(r8)
8111d9e4:	1000031e 	bne	r2,zero,8111d9f4 <_strtod_r+0x13d0>
8111d9e8:	40800417 	ldw	r2,16(r8)
8111d9ec:	00c00044 	movi	r3,1
8111d9f0:	18bfd90e 	bge	r3,r2,8111d958 <__reset+0xfb0fd958>
8111d9f4:	400b883a 	mov	r5,r8
8111d9f8:	01800044 	movi	r6,1
8111d9fc:	8009883a 	mov	r4,r16
8111da00:	111b5100 	call	8111b510 <__lshift>
8111da04:	980b883a 	mov	r5,r19
8111da08:	1009883a 	mov	r4,r2
8111da0c:	d8801315 	stw	r2,76(sp)
8111da10:	111b6600 	call	8111b660 <__mcmp>
8111da14:	da001317 	ldw	r8,76(sp)
8111da18:	00bfcf0e 	bge	zero,r2,8111d958 <__reset+0xfb0fd958>
8111da1c:	d8c00917 	ldw	r3,36(sp)
8111da20:	18005c26 	beq	r3,zero,8111db94 <_strtod_r+0x1570>
8111da24:	0081ac34 	movhi	r2,1712
8111da28:	15c05a16 	blt	r2,r23,8111db94 <_strtod_r+0x1570>
8111da2c:	0080dc34 	movhi	r2,880
8111da30:	15ffcb16 	blt	r2,r23,8111d960 <__reset+0xfb0fd960>
8111da34:	003f1106 	br	8111d67c <__reset+0xfb0fd67c>
8111da38:	002d883a 	mov	r22,zero
8111da3c:	022ff834 	movhi	r8,49120
8111da40:	d8000d15 	stw	zero,52(sp)
8111da44:	05cff834 	movhi	r23,16352
8111da48:	003ded06 	br	8111d200 <__reset+0xfb0fd200>
8111da4c:	0440d434 	movhi	r17,848
8111da50:	1c63883a 	add	r17,r3,r17
8111da54:	d8000915 	stw	zero,36(sp)
8111da58:	003cc806 	br	8111cd7c <__reset+0xfb0fcd7c>
8111da5c:	8884703a 	and	r2,r17,r2
8111da60:	103faa1e 	bne	r2,zero,8111d90c <__reset+0xfb0fd90c>
8111da64:	903fa91e 	bne	r18,zero,8111d90c <__reset+0xfb0fd90c>
8111da68:	8ddffc2c 	andhi	r23,r17,32752
8111da6c:	003feb06 	br	8111da1c <__reset+0xfb0fda1c>
8111da70:	d8c00d17 	ldw	r3,52(sp)
8111da74:	1cae703a 	and	r23,r3,r18
8111da78:	b83fb726 	beq	r23,zero,8111d958 <__reset+0xfb0fd958>
8111da7c:	003fa706 	br	8111d91c <__reset+0xfb0fd91c>
8111da80:	21000044 	addi	r4,r4,1
8111da84:	d9000615 	stw	r4,24(sp)
8111da88:	003f9006 	br	8111d8cc <__reset+0xfb0fd8cc>
8111da8c:	01604534 	movhi	r5,33044
8111da90:	29713b04 	addi	r5,r5,-15124
8111da94:	d9400915 	stw	r5,36(sp)
8111da98:	0027883a 	mov	r19,zero
8111da9c:	003ca206 	br	8111cd28 <__reset+0xfb0fcd28>
8111daa0:	9009883a 	mov	r4,r18
8111daa4:	880b883a 	mov	r5,r17
8111daa8:	da001315 	stw	r8,76(sp)
8111daac:	111c5b80 	call	8111c5b8 <sulp>
8111dab0:	100d883a 	mov	r6,r2
8111dab4:	180f883a 	mov	r7,r3
8111dab8:	9009883a 	mov	r4,r18
8111dabc:	880b883a 	mov	r5,r17
8111dac0:	112492c0 	call	8112492c <__subdf3>
8111dac4:	000d883a 	mov	r6,zero
8111dac8:	000f883a 	mov	r7,zero
8111dacc:	1009883a 	mov	r4,r2
8111dad0:	180b883a 	mov	r5,r3
8111dad4:	102b883a 	mov	r21,r2
8111dad8:	182d883a 	mov	r22,r3
8111dadc:	11246d40 	call	811246d4 <__eqdf2>
8111dae0:	da001317 	ldw	r8,76(sp)
8111dae4:	103ee526 	beq	r2,zero,8111d67c <__reset+0xfb0fd67c>
8111dae8:	003f9b06 	br	8111d958 <__reset+0xfb0fd958>
8111daec:	d8800917 	ldw	r2,36(sp)
8111daf0:	10002226 	beq	r2,zero,8111db7c <_strtod_r+0x1558>
8111daf4:	889ffc2c 	andhi	r2,r17,32752
8111daf8:	00c1a834 	movhi	r3,1696
8111dafc:	18801f36 	bltu	r3,r2,8111db7c <_strtod_r+0x1558>
8111db00:	1004d53a 	srli	r2,r2,20
8111db04:	00c01ac4 	movi	r3,107
8111db08:	1887c83a 	sub	r3,r3,r2
8111db0c:	00bfffc4 	movi	r2,-1
8111db10:	10c4983a 	sll	r2,r2,r3
8111db14:	14bf7d1e 	bne	r2,r18,8111d90c <__reset+0xfb0fd90c>
8111db18:	00dffc34 	movhi	r3,32752
8111db1c:	18ffffc4 	addi	r3,r3,-1
8111db20:	88c03526 	beq	r17,r3,8111dbf8 <_strtod_r+0x15d4>
8111db24:	8c5ffc2c 	andhi	r17,r17,32752
8111db28:	00800434 	movhi	r2,16
8111db2c:	002b883a 	mov	r21,zero
8111db30:	88ad883a 	add	r22,r17,r2
8111db34:	003f8806 	br	8111d958 <__reset+0xfb0fd958>
8111db38:	01401a84 	movi	r5,106
8111db3c:	d9400915 	stw	r5,36(sp)
8111db40:	8ddffc2c 	andhi	r23,r17,32752
8111db44:	b82ed53a 	srli	r23,r23,20
8111db48:	00801ac4 	movi	r2,107
8111db4c:	15c5c83a 	sub	r2,r2,r23
8111db50:	00be8e0e 	bge	zero,r2,8111d58c <__reset+0xfb0fd58c>
8111db54:	00c007c4 	movi	r3,31
8111db58:	18800a0e 	bge	r3,r2,8111db84 <_strtod_r+0x1560>
8111db5c:	00c00d04 	movi	r3,52
8111db60:	0025883a 	mov	r18,zero
8111db64:	1880270e 	bge	r3,r2,8111dc04 <_strtod_r+0x15e0>
8111db68:	0440dc34 	movhi	r17,880
8111db6c:	003e8706 	br	8111d58c <__reset+0xfb0fd58c>
8111db70:	d8000915 	stw	zero,36(sp)
8111db74:	05fe6a16 	blt	zero,r23,8111d520 <__reset+0xfb0fd520>
8111db78:	003e8406 	br	8111d58c <__reset+0xfb0fd58c>
8111db7c:	00bfffc4 	movi	r2,-1
8111db80:	003fe406 	br	8111db14 <__reset+0xfb0fdb14>
8111db84:	00ffffc4 	movi	r3,-1
8111db88:	1884983a 	sll	r2,r3,r2
8111db8c:	14a4703a 	and	r18,r2,r18
8111db90:	003e7e06 	br	8111d58c <__reset+0xfb0fd58c>
8111db94:	00bffc34 	movhi	r2,65520
8111db98:	b8af883a 	add	r23,r23,r2
8111db9c:	057fffc4 	movi	r21,-1
8111dba0:	00800434 	movhi	r2,16
8111dba4:	1545883a 	add	r2,r2,r21
8111dba8:	b8acb03a 	or	r22,r23,r2
8111dbac:	003f6a06 	br	8111d958 <__reset+0xfb0fd958>
8111dbb0:	01604534 	movhi	r5,33044
8111dbb4:	29717b04 	addi	r5,r5,-14868
8111dbb8:	d9800204 	addi	r6,sp,8
8111dbbc:	d9000604 	addi	r4,sp,24
8111dbc0:	1121fb00 	call	81121fb0 <__hexnan>
8111dbc4:	00c00144 	movi	r3,5
8111dbc8:	10fb5c1e 	bne	r2,r3,8111c93c <__reset+0xfb0fc93c>
8111dbcc:	dc400317 	ldw	r17,12(sp)
8111dbd0:	dc800217 	ldw	r18,8(sp)
8111dbd4:	8c5ffc34 	orhi	r17,r17,32752
8111dbd8:	003b5a06 	br	8111c944 <__reset+0xfb0fc944>
8111dbdc:	480b883a 	mov	r5,r9
8111dbe0:	d9800617 	ldw	r6,24(sp)
8111dbe4:	4a400044 	addi	r9,r9,1
8111dbe8:	003eeb06 	br	8111d798 <__reset+0xfb0fd798>
8111dbec:	1025883a 	mov	r18,r2
8111dbf0:	1823883a 	mov	r17,r3
8111dbf4:	003c4c06 	br	8111cd28 <__reset+0xfb0fcd28>
8111dbf8:	00ffffc4 	movi	r3,-1
8111dbfc:	10ffc91e 	bne	r2,r3,8111db24 <__reset+0xfb0fdb24>
8111dc00:	003da906 	br	8111d2a8 <__reset+0xfb0fd2a8>
8111dc04:	10bff804 	addi	r2,r2,-32
8111dc08:	00ffffc4 	movi	r3,-1
8111dc0c:	1884983a 	sll	r2,r3,r2
8111dc10:	1462703a 	and	r17,r2,r17
8111dc14:	003e5d06 	br	8111d58c <__reset+0xfb0fd58c>
8111dc18:	1025883a 	mov	r18,r2
8111dc1c:	1823883a 	mov	r17,r3
8111dc20:	003e5806 	br	8111d584 <__reset+0xfb0fd584>

8111dc24 <strtod>:
8111dc24:	00a04534 	movhi	r2,33044
8111dc28:	10ba0604 	addi	r2,r2,-6120
8111dc2c:	280d883a 	mov	r6,r5
8111dc30:	200b883a 	mov	r5,r4
8111dc34:	11000017 	ldw	r4,0(r2)
8111dc38:	111c6241 	jmpi	8111c624 <_strtod_r>

8111dc3c <strtof>:
8111dc3c:	defffb04 	addi	sp,sp,-20
8111dc40:	de00012e 	bgeu	sp,et,8111dc48 <strtof+0xc>
8111dc44:	003b68fa 	trap	3
8111dc48:	dcc00315 	stw	r19,12(sp)
8111dc4c:	04e04534 	movhi	r19,33044
8111dc50:	9cfa0604 	addi	r19,r19,-6120
8111dc54:	280d883a 	mov	r6,r5
8111dc58:	200b883a 	mov	r5,r4
8111dc5c:	99000017 	ldw	r4,0(r19)
8111dc60:	dfc00415 	stw	ra,16(sp)
8111dc64:	dc800215 	stw	r18,8(sp)
8111dc68:	dc400115 	stw	r17,4(sp)
8111dc6c:	dc000015 	stw	r16,0(sp)
8111dc70:	111c6240 	call	8111c624 <_strtod_r>
8111dc74:	1009883a 	mov	r4,r2
8111dc78:	180b883a 	mov	r5,r3
8111dc7c:	1025883a 	mov	r18,r2
8111dc80:	1823883a 	mov	r17,r3
8111dc84:	110fae40 	call	8110fae4 <__truncdfsf2>
8111dc88:	000b883a 	mov	r5,zero
8111dc8c:	1009883a 	mov	r4,r2
8111dc90:	1021883a 	mov	r16,r2
8111dc94:	11233340 	call	81123334 <__eqsf2>
8111dc98:	1000111e 	bne	r2,zero,8111dce0 <strtof+0xa4>
8111dc9c:	000d883a 	mov	r6,zero
8111dca0:	000f883a 	mov	r7,zero
8111dca4:	9009883a 	mov	r4,r18
8111dca8:	880b883a 	mov	r5,r17
8111dcac:	11246d40 	call	811246d4 <__eqdf2>
8111dcb0:	10000b26 	beq	r2,zero,8111dce0 <strtof+0xa4>
8111dcb4:	98800017 	ldw	r2,0(r19)
8111dcb8:	00c00884 	movi	r3,34
8111dcbc:	10c00015 	stw	r3,0(r2)
8111dcc0:	8005883a 	mov	r2,r16
8111dcc4:	dfc00417 	ldw	ra,16(sp)
8111dcc8:	dcc00317 	ldw	r19,12(sp)
8111dccc:	dc800217 	ldw	r18,8(sp)
8111dcd0:	dc400117 	ldw	r17,4(sp)
8111dcd4:	dc000017 	ldw	r16,0(sp)
8111dcd8:	dec00504 	addi	sp,sp,20
8111dcdc:	f800283a 	ret
8111dce0:	015fe034 	movhi	r5,32640
8111dce4:	297fffc4 	addi	r5,r5,-1
8111dce8:	8009883a 	mov	r4,r16
8111dcec:	11233ac0 	call	811233ac <__gesf2>
8111dcf0:	0080070e 	bge	zero,r2,8111dd10 <strtof+0xd4>
8111dcf4:	01dffc34 	movhi	r7,32752
8111dcf8:	39ffffc4 	addi	r7,r7,-1
8111dcfc:	01bfffc4 	movi	r6,-1
8111dd00:	9009883a 	mov	r4,r18
8111dd04:	880b883a 	mov	r5,r17
8111dd08:	112475c0 	call	8112475c <__gedf2>
8111dd0c:	00bfe90e 	bge	zero,r2,8111dcb4 <__reset+0xfb0fdcb4>
8111dd10:	017fe034 	movhi	r5,65408
8111dd14:	297fffc4 	addi	r5,r5,-1
8111dd18:	8009883a 	mov	r4,r16
8111dd1c:	11234680 	call	81123468 <__lesf2>
8111dd20:	103fe70e 	bge	r2,zero,8111dcc0 <__reset+0xfb0fdcc0>
8111dd24:	01fffc34 	movhi	r7,65520
8111dd28:	39ffffc4 	addi	r7,r7,-1
8111dd2c:	01bfffc4 	movi	r6,-1
8111dd30:	9009883a 	mov	r4,r18
8111dd34:	880b883a 	mov	r5,r17
8111dd38:	11248380 	call	81124838 <__ledf2>
8111dd3c:	103fdd0e 	bge	r2,zero,8111dcb4 <__reset+0xfb0fdcb4>
8111dd40:	003fdf06 	br	8111dcc0 <__reset+0xfb0fdcc0>

8111dd44 <_strtoll_r>:
8111dd44:	00a04534 	movhi	r2,33044
8111dd48:	defff304 	addi	sp,sp,-52
8111dd4c:	10ba0404 	addi	r2,r2,-6128
8111dd50:	de00012e 	bgeu	sp,et,8111dd58 <_strtoll_r+0x14>
8111dd54:	003b68fa 	trap	3
8111dd58:	dc800515 	stw	r18,20(sp)
8111dd5c:	14800017 	ldw	r18,0(r2)
8111dd60:	dd800915 	stw	r22,36(sp)
8111dd64:	dd400815 	stw	r21,32(sp)
8111dd68:	dcc00615 	stw	r19,24(sp)
8111dd6c:	d9000015 	stw	r4,0(sp)
8111dd70:	dfc00c15 	stw	ra,48(sp)
8111dd74:	df000b15 	stw	fp,44(sp)
8111dd78:	ddc00a15 	stw	r23,40(sp)
8111dd7c:	dd000715 	stw	r20,28(sp)
8111dd80:	dc400415 	stw	r17,16(sp)
8111dd84:	dc000315 	stw	r16,12(sp)
8111dd88:	282d883a 	mov	r22,r5
8111dd8c:	302b883a 	mov	r21,r6
8111dd90:	3827883a 	mov	r19,r7
8111dd94:	2809883a 	mov	r4,r5
8111dd98:	24000003 	ldbu	r16,0(r4)
8111dd9c:	24400044 	addi	r17,r4,1
8111dda0:	2007883a 	mov	r3,r4
8111dda4:	9405883a 	add	r2,r18,r16
8111dda8:	10800043 	ldbu	r2,1(r2)
8111ddac:	8809883a 	mov	r4,r17
8111ddb0:	1080020c 	andi	r2,r2,8
8111ddb4:	103ff81e 	bne	r2,zero,8111dd98 <__reset+0xfb0fdd98>
8111ddb8:	00800b44 	movi	r2,45
8111ddbc:	80807826 	beq	r16,r2,8111dfa0 <_strtoll_r+0x25c>
8111ddc0:	00800ac4 	movi	r2,43
8111ddc4:	80807a26 	beq	r16,r2,8111dfb0 <_strtoll_r+0x26c>
8111ddc8:	0039883a 	mov	fp,zero
8111ddcc:	98004e26 	beq	r19,zero,8111df08 <_strtoll_r+0x1c4>
8111ddd0:	00800404 	movi	r2,16
8111ddd4:	98808226 	beq	r19,r2,8111dfe0 <_strtoll_r+0x29c>
8111ddd8:	982fd7fa 	srai	r23,r19,31
8111dddc:	9829883a 	mov	r20,r19
8111dde0:	e0004f26 	beq	fp,zero,8111df20 <_strtoll_r+0x1dc>
8111dde4:	0017883a 	mov	r11,zero
8111dde8:	02a00034 	movhi	r10,32768
8111ddec:	5809883a 	mov	r4,r11
8111ddf0:	500b883a 	mov	r5,r10
8111ddf4:	a00d883a 	mov	r6,r20
8111ddf8:	b80f883a 	mov	r7,r23
8111ddfc:	da800215 	stw	r10,8(sp)
8111de00:	dac00115 	stw	r11,4(sp)
8111de04:	1122c400 	call	81122c40 <__umoddi3>
8111de08:	dac00117 	ldw	r11,4(sp)
8111de0c:	da800217 	ldw	r10,8(sp)
8111de10:	a00d883a 	mov	r6,r20
8111de14:	5809883a 	mov	r4,r11
8111de18:	500b883a 	mov	r5,r10
8111de1c:	b80f883a 	mov	r7,r23
8111de20:	d8800115 	stw	r2,4(sp)
8111de24:	11226c00 	call	811226c0 <__udivdi3>
8111de28:	9409883a 	add	r4,r18,r16
8111de2c:	21000043 	ldbu	r4,1(r4)
8111de30:	1019883a 	mov	r12,r2
8111de34:	880b883a 	mov	r5,r17
8111de38:	2240010c 	andi	r9,r4,4
8111de3c:	0015883a 	mov	r10,zero
8111de40:	000d883a 	mov	r6,zero
8111de44:	000f883a 	mov	r7,zero
8111de48:	03400044 	movi	r13,1
8111de4c:	02ffffc4 	movi	r11,-1
8111de50:	da000117 	ldw	r8,4(sp)
8111de54:	48000d26 	beq	r9,zero,8111de8c <_strtoll_r+0x148>
8111de58:	843ff404 	addi	r16,r16,-48
8111de5c:	84c0110e 	bge	r16,r19,8111dea4 <_strtoll_r+0x160>
8111de60:	52c00426 	beq	r10,r11,8111de74 <_strtoll_r+0x130>
8111de64:	19c00236 	bltu	r3,r7,8111de70 <_strtoll_r+0x12c>
8111de68:	38c0311e 	bne	r7,r3,8111df30 <_strtoll_r+0x1ec>
8111de6c:	6180302e 	bgeu	r12,r6,8111df30 <_strtoll_r+0x1ec>
8111de70:	02bfffc4 	movi	r10,-1
8111de74:	2c000003 	ldbu	r16,0(r5)
8111de78:	29400044 	addi	r5,r5,1
8111de7c:	9409883a 	add	r4,r18,r16
8111de80:	21000043 	ldbu	r4,1(r4)
8111de84:	2240010c 	andi	r9,r4,4
8111de88:	483ff31e 	bne	r9,zero,8111de58 <__reset+0xfb0fde58>
8111de8c:	210000cc 	andi	r4,r4,3
8111de90:	20000426 	beq	r4,zero,8111dea4 <_strtoll_r+0x160>
8111de94:	23403426 	beq	r4,r13,8111df68 <_strtoll_r+0x224>
8111de98:	008015c4 	movi	r2,87
8111de9c:	80a1c83a 	sub	r16,r16,r2
8111dea0:	84ffef16 	blt	r16,r19,8111de60 <__reset+0xfb0fde60>
8111dea4:	00bfffc4 	movi	r2,-1
8111dea8:	50803426 	beq	r10,r2,8111df7c <_strtoll_r+0x238>
8111deac:	e0000426 	beq	fp,zero,8111dec0 <_strtoll_r+0x17c>
8111deb0:	018dc83a 	sub	r6,zero,r6
8111deb4:	3004c03a 	cmpne	r2,r6,zero
8111deb8:	01e1c83a 	sub	r16,zero,r7
8111debc:	808fc83a 	sub	r7,r16,r2
8111dec0:	3005883a 	mov	r2,r6
8111dec4:	3807883a 	mov	r3,r7
8111dec8:	a8000326 	beq	r21,zero,8111ded8 <_strtoll_r+0x194>
8111decc:	5000321e 	bne	r10,zero,8111df98 <_strtoll_r+0x254>
8111ded0:	b00b883a 	mov	r5,r22
8111ded4:	a9400015 	stw	r5,0(r21)
8111ded8:	dfc00c17 	ldw	ra,48(sp)
8111dedc:	df000b17 	ldw	fp,44(sp)
8111dee0:	ddc00a17 	ldw	r23,40(sp)
8111dee4:	dd800917 	ldw	r22,36(sp)
8111dee8:	dd400817 	ldw	r21,32(sp)
8111deec:	dd000717 	ldw	r20,28(sp)
8111def0:	dcc00617 	ldw	r19,24(sp)
8111def4:	dc800517 	ldw	r18,20(sp)
8111def8:	dc400417 	ldw	r17,16(sp)
8111defc:	dc000317 	ldw	r16,12(sp)
8111df00:	dec00d04 	addi	sp,sp,52
8111df04:	f800283a 	ret
8111df08:	00800c04 	movi	r2,48
8111df0c:	80802c26 	beq	r16,r2,8111dfc0 <_strtoll_r+0x27c>
8111df10:	05000284 	movi	r20,10
8111df14:	002f883a 	mov	r23,zero
8111df18:	a027883a 	mov	r19,r20
8111df1c:	e03fb11e 	bne	fp,zero,8111dde4 <__reset+0xfb0fdde4>
8111df20:	02a00034 	movhi	r10,32768
8111df24:	52bfffc4 	addi	r10,r10,-1
8111df28:	02ffffc4 	movi	r11,-1
8111df2c:	003faf06 	br	8111ddec <__reset+0xfb0fddec>
8111df30:	33000f26 	beq	r6,r12,8111df70 <_strtoll_r+0x22c>
8111df34:	b985383a 	mul	r2,r23,r6
8111df38:	3d0f383a 	mul	r7,r7,r20
8111df3c:	3508383a 	mulxuu	r4,r6,r20
8111df40:	350d383a 	mul	r6,r6,r20
8111df44:	8013d7fa 	srai	r9,r16,31
8111df48:	388f883a 	add	r7,r7,r2
8111df4c:	818d883a 	add	r6,r16,r6
8111df50:	390f883a 	add	r7,r7,r4
8111df54:	3421803a 	cmpltu	r16,r6,r16
8111df58:	49cf883a 	add	r7,r9,r7
8111df5c:	81cf883a 	add	r7,r16,r7
8111df60:	02800044 	movi	r10,1
8111df64:	003fc306 	br	8111de74 <__reset+0xfb0fde74>
8111df68:	00800dc4 	movi	r2,55
8111df6c:	003fcb06 	br	8111de9c <__reset+0xfb0fde9c>
8111df70:	38fff01e 	bne	r7,r3,8111df34 <__reset+0xfb0fdf34>
8111df74:	443fbe16 	blt	r8,r16,8111de70 <__reset+0xfb0fde70>
8111df78:	003fee06 	br	8111df34 <__reset+0xfb0fdf34>
8111df7c:	e0002426 	beq	fp,zero,8111e010 <_strtoll_r+0x2cc>
8111df80:	0005883a 	mov	r2,zero
8111df84:	00e00034 	movhi	r3,32768
8111df88:	d9800017 	ldw	r6,0(sp)
8111df8c:	01000884 	movi	r4,34
8111df90:	31000015 	stw	r4,0(r6)
8111df94:	a83fd026 	beq	r21,zero,8111ded8 <__reset+0xfb0fded8>
8111df98:	297fffc4 	addi	r5,r5,-1
8111df9c:	003fcd06 	br	8111ded4 <__reset+0xfb0fded4>
8111dfa0:	1c400084 	addi	r17,r3,2
8111dfa4:	1c000043 	ldbu	r16,1(r3)
8111dfa8:	07000044 	movi	fp,1
8111dfac:	003f8706 	br	8111ddcc <__reset+0xfb0fddcc>
8111dfb0:	1c400084 	addi	r17,r3,2
8111dfb4:	1c000043 	ldbu	r16,1(r3)
8111dfb8:	0039883a 	mov	fp,zero
8111dfbc:	003f8306 	br	8111ddcc <__reset+0xfb0fddcc>
8111dfc0:	88800003 	ldbu	r2,0(r17)
8111dfc4:	00c01604 	movi	r3,88
8111dfc8:	108037cc 	andi	r2,r2,223
8111dfcc:	10c00a26 	beq	r2,r3,8111dff8 <_strtoll_r+0x2b4>
8111dfd0:	05000204 	movi	r20,8
8111dfd4:	002f883a 	mov	r23,zero
8111dfd8:	a027883a 	mov	r19,r20
8111dfdc:	003f8006 	br	8111dde0 <__reset+0xfb0fdde0>
8111dfe0:	00800c04 	movi	r2,48
8111dfe4:	80800e1e 	bne	r16,r2,8111e020 <_strtoll_r+0x2dc>
8111dfe8:	88800003 	ldbu	r2,0(r17)
8111dfec:	00c01604 	movi	r3,88
8111dff0:	108037cc 	andi	r2,r2,223
8111dff4:	10c00a1e 	bne	r2,r3,8111e020 <_strtoll_r+0x2dc>
8111dff8:	05000404 	movi	r20,16
8111dffc:	8c000043 	ldbu	r16,1(r17)
8111e000:	002f883a 	mov	r23,zero
8111e004:	8c400084 	addi	r17,r17,2
8111e008:	a027883a 	mov	r19,r20
8111e00c:	003f7406 	br	8111dde0 <__reset+0xfb0fdde0>
8111e010:	00e00034 	movhi	r3,32768
8111e014:	18ffffc4 	addi	r3,r3,-1
8111e018:	5005883a 	mov	r2,r10
8111e01c:	003fda06 	br	8111df88 <__reset+0xfb0fdf88>
8111e020:	9829883a 	mov	r20,r19
8111e024:	002f883a 	mov	r23,zero
8111e028:	003f6d06 	br	8111dde0 <__reset+0xfb0fdde0>

8111e02c <_strtoul_r>:
8111e02c:	00a04534 	movhi	r2,33044
8111e030:	defff604 	addi	sp,sp,-40
8111e034:	10ba0404 	addi	r2,r2,-6128
8111e038:	de00012e 	bgeu	sp,et,8111e040 <_strtoul_r+0x14>
8111e03c:	003b68fa 	trap	3
8111e040:	dc800315 	stw	r18,12(sp)
8111e044:	14800017 	ldw	r18,0(r2)
8111e048:	dd400615 	stw	r21,24(sp)
8111e04c:	dd000515 	stw	r20,20(sp)
8111e050:	dcc00415 	stw	r19,16(sp)
8111e054:	2029883a 	mov	r20,r4
8111e058:	dfc00915 	stw	ra,36(sp)
8111e05c:	ddc00815 	stw	r23,32(sp)
8111e060:	dd800715 	stw	r22,28(sp)
8111e064:	dc400215 	stw	r17,8(sp)
8111e068:	dc000115 	stw	r16,4(sp)
8111e06c:	2827883a 	mov	r19,r5
8111e070:	382b883a 	mov	r21,r7
8111e074:	2809883a 	mov	r4,r5
8111e078:	24000003 	ldbu	r16,0(r4)
8111e07c:	24400044 	addi	r17,r4,1
8111e080:	2007883a 	mov	r3,r4
8111e084:	9405883a 	add	r2,r18,r16
8111e088:	10800043 	ldbu	r2,1(r2)
8111e08c:	8809883a 	mov	r4,r17
8111e090:	1080020c 	andi	r2,r2,8
8111e094:	103ff81e 	bne	r2,zero,8111e078 <__reset+0xfb0fe078>
8111e098:	00800b44 	movi	r2,45
8111e09c:	80805326 	beq	r16,r2,8111e1ec <_strtoul_r+0x1c0>
8111e0a0:	00800ac4 	movi	r2,43
8111e0a4:	80805526 	beq	r16,r2,8111e1fc <_strtoul_r+0x1d0>
8111e0a8:	002f883a 	mov	r23,zero
8111e0ac:	a8000f26 	beq	r21,zero,8111e0ec <_strtoul_r+0xc0>
8111e0b0:	00800404 	movi	r2,16
8111e0b4:	a8805f26 	beq	r21,r2,8111e234 <_strtoul_r+0x208>
8111e0b8:	013fffc4 	movi	r4,-1
8111e0bc:	a80b883a 	mov	r5,r21
8111e0c0:	d9800015 	stw	r6,0(sp)
8111e0c4:	11232780 	call	81123278 <__udivsi3>
8111e0c8:	a80b883a 	mov	r5,r21
8111e0cc:	013fffc4 	movi	r4,-1
8111e0d0:	102d883a 	mov	r22,r2
8111e0d4:	11232dc0 	call	811232dc <__umodsi3>
8111e0d8:	d9800017 	ldw	r6,0(sp)
8111e0dc:	1019883a 	mov	r12,r2
8111e0e0:	a817883a 	mov	r11,r21
8111e0e4:	b00f883a 	mov	r7,r22
8111e0e8:	00000706 	br	8111e108 <_strtoul_r+0xdc>
8111e0ec:	00800c04 	movi	r2,48
8111e0f0:	80804626 	beq	r16,r2,8111e20c <_strtoul_r+0x1e0>
8111e0f4:	05400284 	movi	r21,10
8111e0f8:	01c666b4 	movhi	r7,6554
8111e0fc:	03000144 	movi	r12,5
8111e100:	39e66644 	addi	r7,r7,-26215
8111e104:	a817883a 	mov	r11,r21
8111e108:	9407883a 	add	r3,r18,r16
8111e10c:	18c00043 	ldbu	r3,1(r3)
8111e110:	8809883a 	mov	r4,r17
8111e114:	0011883a 	mov	r8,zero
8111e118:	1940010c 	andi	r5,r3,4
8111e11c:	0005883a 	mov	r2,zero
8111e120:	02800044 	movi	r10,1
8111e124:	027fffc4 	movi	r9,-1
8111e128:	28000e26 	beq	r5,zero,8111e164 <_strtoul_r+0x138>
8111e12c:	843ff404 	addi	r16,r16,-48
8111e130:	8540120e 	bge	r16,r21,8111e17c <_strtoul_r+0x150>
8111e134:	42400526 	beq	r8,r9,8111e14c <_strtoul_r+0x120>
8111e138:	38802236 	bltu	r7,r2,8111e1c4 <_strtoul_r+0x198>
8111e13c:	11c02026 	beq	r2,r7,8111e1c0 <_strtoul_r+0x194>
8111e140:	12c5383a 	mul	r2,r2,r11
8111e144:	02000044 	movi	r8,1
8111e148:	8085883a 	add	r2,r16,r2
8111e14c:	24000003 	ldbu	r16,0(r4)
8111e150:	21000044 	addi	r4,r4,1
8111e154:	9407883a 	add	r3,r18,r16
8111e158:	18c00043 	ldbu	r3,1(r3)
8111e15c:	1940010c 	andi	r5,r3,4
8111e160:	283ff21e 	bne	r5,zero,8111e12c <__reset+0xfb0fe12c>
8111e164:	18c000cc 	andi	r3,r3,3
8111e168:	18000426 	beq	r3,zero,8111e17c <_strtoul_r+0x150>
8111e16c:	1a801726 	beq	r3,r10,8111e1cc <_strtoul_r+0x1a0>
8111e170:	00c015c4 	movi	r3,87
8111e174:	80e1c83a 	sub	r16,r16,r3
8111e178:	857fee16 	blt	r16,r21,8111e134 <__reset+0xfb0fe134>
8111e17c:	40001516 	blt	r8,zero,8111e1d4 <_strtoul_r+0x1a8>
8111e180:	b8000126 	beq	r23,zero,8111e188 <_strtoul_r+0x15c>
8111e184:	0085c83a 	sub	r2,zero,r2
8111e188:	30000226 	beq	r6,zero,8111e194 <_strtoul_r+0x168>
8111e18c:	4000151e 	bne	r8,zero,8111e1e4 <_strtoul_r+0x1b8>
8111e190:	34c00015 	stw	r19,0(r6)
8111e194:	dfc00917 	ldw	ra,36(sp)
8111e198:	ddc00817 	ldw	r23,32(sp)
8111e19c:	dd800717 	ldw	r22,28(sp)
8111e1a0:	dd400617 	ldw	r21,24(sp)
8111e1a4:	dd000517 	ldw	r20,20(sp)
8111e1a8:	dcc00417 	ldw	r19,16(sp)
8111e1ac:	dc800317 	ldw	r18,12(sp)
8111e1b0:	dc400217 	ldw	r17,8(sp)
8111e1b4:	dc000117 	ldw	r16,4(sp)
8111e1b8:	dec00a04 	addi	sp,sp,40
8111e1bc:	f800283a 	ret
8111e1c0:	643fdf0e 	bge	r12,r16,8111e140 <__reset+0xfb0fe140>
8111e1c4:	023fffc4 	movi	r8,-1
8111e1c8:	003fe006 	br	8111e14c <__reset+0xfb0fe14c>
8111e1cc:	00c00dc4 	movi	r3,55
8111e1d0:	003fe806 	br	8111e174 <__reset+0xfb0fe174>
8111e1d4:	00800884 	movi	r2,34
8111e1d8:	a0800015 	stw	r2,0(r20)
8111e1dc:	00bfffc4 	movi	r2,-1
8111e1e0:	303fec26 	beq	r6,zero,8111e194 <__reset+0xfb0fe194>
8111e1e4:	24ffffc4 	addi	r19,r4,-1
8111e1e8:	003fe906 	br	8111e190 <__reset+0xfb0fe190>
8111e1ec:	1c400084 	addi	r17,r3,2
8111e1f0:	1c000043 	ldbu	r16,1(r3)
8111e1f4:	05c00044 	movi	r23,1
8111e1f8:	003fac06 	br	8111e0ac <__reset+0xfb0fe0ac>
8111e1fc:	1c400084 	addi	r17,r3,2
8111e200:	1c000043 	ldbu	r16,1(r3)
8111e204:	002f883a 	mov	r23,zero
8111e208:	003fa806 	br	8111e0ac <__reset+0xfb0fe0ac>
8111e20c:	88800003 	ldbu	r2,0(r17)
8111e210:	00c01604 	movi	r3,88
8111e214:	108037cc 	andi	r2,r2,223
8111e218:	10c00c26 	beq	r2,r3,8111e24c <_strtoul_r+0x220>
8111e21c:	05400204 	movi	r21,8
8111e220:	01c80034 	movhi	r7,8192
8111e224:	030001c4 	movi	r12,7
8111e228:	39ffffc4 	addi	r7,r7,-1
8111e22c:	a817883a 	mov	r11,r21
8111e230:	003fb506 	br	8111e108 <__reset+0xfb0fe108>
8111e234:	00800c04 	movi	r2,48
8111e238:	80800c1e 	bne	r16,r2,8111e26c <_strtoul_r+0x240>
8111e23c:	88800003 	ldbu	r2,0(r17)
8111e240:	00c01604 	movi	r3,88
8111e244:	108037cc 	andi	r2,r2,223
8111e248:	10c0081e 	bne	r2,r3,8111e26c <_strtoul_r+0x240>
8111e24c:	02c00404 	movi	r11,16
8111e250:	05840034 	movhi	r22,4096
8111e254:	8c000043 	ldbu	r16,1(r17)
8111e258:	030003c4 	movi	r12,15
8111e25c:	8c400084 	addi	r17,r17,2
8111e260:	b5bfffc4 	addi	r22,r22,-1
8111e264:	582b883a 	mov	r21,r11
8111e268:	003f9e06 	br	8111e0e4 <__reset+0xfb0fe0e4>
8111e26c:	01c40034 	movhi	r7,4096
8111e270:	030003c4 	movi	r12,15
8111e274:	39ffffc4 	addi	r7,r7,-1
8111e278:	a817883a 	mov	r11,r21
8111e27c:	003fa206 	br	8111e108 <__reset+0xfb0fe108>

8111e280 <strtoul>:
8111e280:	00a04534 	movhi	r2,33044
8111e284:	10ba0604 	addi	r2,r2,-6120
8111e288:	300f883a 	mov	r7,r6
8111e28c:	280d883a 	mov	r6,r5
8111e290:	200b883a 	mov	r5,r4
8111e294:	11000017 	ldw	r4,0(r2)
8111e298:	111e02c1 	jmpi	8111e02c <_strtoul_r>

8111e29c <_strtoull_r>:
8111e29c:	00a04534 	movhi	r2,33044
8111e2a0:	defff404 	addi	sp,sp,-48
8111e2a4:	10ba0404 	addi	r2,r2,-6128
8111e2a8:	de00012e 	bgeu	sp,et,8111e2b0 <_strtoull_r+0x14>
8111e2ac:	003b68fa 	trap	3
8111e2b0:	dc400315 	stw	r17,12(sp)
8111e2b4:	14400017 	ldw	r17,0(r2)
8111e2b8:	dd400715 	stw	r21,28(sp)
8111e2bc:	dd000615 	stw	r20,24(sp)
8111e2c0:	dcc00515 	stw	r19,20(sp)
8111e2c4:	dc800415 	stw	r18,16(sp)
8111e2c8:	dfc00b15 	stw	ra,44(sp)
8111e2cc:	df000a15 	stw	fp,40(sp)
8111e2d0:	ddc00915 	stw	r23,36(sp)
8111e2d4:	dd800815 	stw	r22,32(sp)
8111e2d8:	dc000215 	stw	r16,8(sp)
8111e2dc:	2827883a 	mov	r19,r5
8111e2e0:	202b883a 	mov	r21,r4
8111e2e4:	3029883a 	mov	r20,r6
8111e2e8:	3825883a 	mov	r18,r7
8111e2ec:	2807883a 	mov	r3,r5
8111e2f0:	1c000003 	ldbu	r16,0(r3)
8111e2f4:	1f000044 	addi	fp,r3,1
8111e2f8:	1809883a 	mov	r4,r3
8111e2fc:	8c05883a 	add	r2,r17,r16
8111e300:	10800043 	ldbu	r2,1(r2)
8111e304:	e007883a 	mov	r3,fp
8111e308:	1080020c 	andi	r2,r2,8
8111e30c:	103ff81e 	bne	r2,zero,8111e2f0 <__reset+0xfb0fe2f0>
8111e310:	00800b44 	movi	r2,45
8111e314:	80806e26 	beq	r16,r2,8111e4d0 <_strtoull_r+0x234>
8111e318:	00800ac4 	movi	r2,43
8111e31c:	80807026 	beq	r16,r2,8111e4e0 <_strtoull_r+0x244>
8111e320:	002f883a 	mov	r23,zero
8111e324:	90001426 	beq	r18,zero,8111e378 <_strtoull_r+0xdc>
8111e328:	00800404 	movi	r2,16
8111e32c:	90807c26 	beq	r18,r2,8111e520 <_strtoull_r+0x284>
8111e330:	902dd7fa 	srai	r22,r18,31
8111e334:	013fffc4 	movi	r4,-1
8111e338:	200b883a 	mov	r5,r4
8111e33c:	900d883a 	mov	r6,r18
8111e340:	b00f883a 	mov	r7,r22
8111e344:	11226c00 	call	811226c0 <__udivdi3>
8111e348:	013fffc4 	movi	r4,-1
8111e34c:	900d883a 	mov	r6,r18
8111e350:	b00f883a 	mov	r7,r22
8111e354:	200b883a 	mov	r5,r4
8111e358:	d8c00115 	stw	r3,4(sp)
8111e35c:	d8800015 	stw	r2,0(sp)
8111e360:	1122c400 	call	81122c40 <__umoddi3>
8111e364:	101b883a 	mov	r13,r2
8111e368:	9015883a 	mov	r10,r18
8111e36c:	dac00017 	ldw	r11,0(sp)
8111e370:	da000117 	ldw	r8,4(sp)
8111e374:	00000a06 	br	8111e3a0 <_strtoull_r+0x104>
8111e378:	00800c04 	movi	r2,48
8111e37c:	80805c26 	beq	r16,r2,8111e4f0 <_strtoull_r+0x254>
8111e380:	02800284 	movi	r10,10
8111e384:	02e666b4 	movhi	r11,39322
8111e388:	020666b4 	movhi	r8,6554
8111e38c:	03400144 	movi	r13,5
8111e390:	5ae66644 	addi	r11,r11,-26215
8111e394:	42266644 	addi	r8,r8,-26215
8111e398:	002d883a 	mov	r22,zero
8111e39c:	5025883a 	mov	r18,r10
8111e3a0:	8c0b883a 	add	r5,r17,r16
8111e3a4:	29400043 	ldbu	r5,1(r5)
8111e3a8:	e009883a 	mov	r4,fp
8111e3ac:	000f883a 	mov	r7,zero
8111e3b0:	2980010c 	andi	r6,r5,4
8111e3b4:	0005883a 	mov	r2,zero
8111e3b8:	0007883a 	mov	r3,zero
8111e3bc:	03000044 	movi	r12,1
8111e3c0:	027fffc4 	movi	r9,-1
8111e3c4:	30000d26 	beq	r6,zero,8111e3fc <_strtoull_r+0x160>
8111e3c8:	843ff404 	addi	r16,r16,-48
8111e3cc:	8480110e 	bge	r16,r18,8111e414 <_strtoull_r+0x178>
8111e3d0:	3a400426 	beq	r7,r9,8111e3e4 <_strtoull_r+0x148>
8111e3d4:	40c00236 	bltu	r8,r3,8111e3e0 <_strtoull_r+0x144>
8111e3d8:	1a00231e 	bne	r3,r8,8111e468 <_strtoull_r+0x1cc>
8111e3dc:	5880222e 	bgeu	r11,r2,8111e468 <_strtoull_r+0x1cc>
8111e3e0:	01ffffc4 	movi	r7,-1
8111e3e4:	24000003 	ldbu	r16,0(r4)
8111e3e8:	21000044 	addi	r4,r4,1
8111e3ec:	8c0b883a 	add	r5,r17,r16
8111e3f0:	29400043 	ldbu	r5,1(r5)
8111e3f4:	2980010c 	andi	r6,r5,4
8111e3f8:	303ff31e 	bne	r6,zero,8111e3c8 <__reset+0xfb0fe3c8>
8111e3fc:	294000cc 	andi	r5,r5,3
8111e400:	28000426 	beq	r5,zero,8111e414 <_strtoull_r+0x178>
8111e404:	2b002626 	beq	r5,r12,8111e4a0 <_strtoull_r+0x204>
8111e408:	014015c4 	movi	r5,87
8111e40c:	8161c83a 	sub	r16,r16,r5
8111e410:	84bfef16 	blt	r16,r18,8111e3d0 <__reset+0xfb0fe3d0>
8111e414:	38002716 	blt	r7,zero,8111e4b4 <_strtoull_r+0x218>
8111e418:	b8000426 	beq	r23,zero,8111e42c <_strtoull_r+0x190>
8111e41c:	0085c83a 	sub	r2,zero,r2
8111e420:	100ac03a 	cmpne	r5,r2,zero
8111e424:	00e1c83a 	sub	r16,zero,r3
8111e428:	8147c83a 	sub	r3,r16,r5
8111e42c:	a0000226 	beq	r20,zero,8111e438 <_strtoull_r+0x19c>
8111e430:	3800251e 	bne	r7,zero,8111e4c8 <_strtoull_r+0x22c>
8111e434:	a4c00015 	stw	r19,0(r20)
8111e438:	dfc00b17 	ldw	ra,44(sp)
8111e43c:	df000a17 	ldw	fp,40(sp)
8111e440:	ddc00917 	ldw	r23,36(sp)
8111e444:	dd800817 	ldw	r22,32(sp)
8111e448:	dd400717 	ldw	r21,28(sp)
8111e44c:	dd000617 	ldw	r20,24(sp)
8111e450:	dcc00517 	ldw	r19,20(sp)
8111e454:	dc800417 	ldw	r18,16(sp)
8111e458:	dc400317 	ldw	r17,12(sp)
8111e45c:	dc000217 	ldw	r16,8(sp)
8111e460:	dec00c04 	addi	sp,sp,48
8111e464:	f800283a 	ret
8111e468:	12c00f26 	beq	r2,r11,8111e4a8 <_strtoull_r+0x20c>
8111e46c:	b08d383a 	mul	r6,r22,r2
8111e470:	1a87383a 	mul	r3,r3,r10
8111e474:	128a383a 	mulxuu	r5,r2,r10
8111e478:	1285383a 	mul	r2,r2,r10
8111e47c:	800fd7fa 	srai	r7,r16,31
8111e480:	1987883a 	add	r3,r3,r6
8111e484:	8085883a 	add	r2,r16,r2
8111e488:	1947883a 	add	r3,r3,r5
8111e48c:	38c7883a 	add	r3,r7,r3
8111e490:	1421803a 	cmpltu	r16,r2,r16
8111e494:	80c7883a 	add	r3,r16,r3
8111e498:	01c00044 	movi	r7,1
8111e49c:	003fd106 	br	8111e3e4 <__reset+0xfb0fe3e4>
8111e4a0:	01400dc4 	movi	r5,55
8111e4a4:	003fd906 	br	8111e40c <__reset+0xfb0fe40c>
8111e4a8:	1a3ff01e 	bne	r3,r8,8111e46c <__reset+0xfb0fe46c>
8111e4ac:	6c3fcc16 	blt	r13,r16,8111e3e0 <__reset+0xfb0fe3e0>
8111e4b0:	003fee06 	br	8111e46c <__reset+0xfb0fe46c>
8111e4b4:	00800884 	movi	r2,34
8111e4b8:	a8800015 	stw	r2,0(r21)
8111e4bc:	00bfffc4 	movi	r2,-1
8111e4c0:	1007883a 	mov	r3,r2
8111e4c4:	a03fdc26 	beq	r20,zero,8111e438 <__reset+0xfb0fe438>
8111e4c8:	24ffffc4 	addi	r19,r4,-1
8111e4cc:	003fd906 	br	8111e434 <__reset+0xfb0fe434>
8111e4d0:	27000084 	addi	fp,r4,2
8111e4d4:	24000043 	ldbu	r16,1(r4)
8111e4d8:	05c00044 	movi	r23,1
8111e4dc:	003f9106 	br	8111e324 <__reset+0xfb0fe324>
8111e4e0:	27000084 	addi	fp,r4,2
8111e4e4:	24000043 	ldbu	r16,1(r4)
8111e4e8:	002f883a 	mov	r23,zero
8111e4ec:	003f8d06 	br	8111e324 <__reset+0xfb0fe324>
8111e4f0:	e0800003 	ldbu	r2,0(fp)
8111e4f4:	00c01604 	movi	r3,88
8111e4f8:	108037cc 	andi	r2,r2,223
8111e4fc:	10c00e26 	beq	r2,r3,8111e538 <_strtoull_r+0x29c>
8111e500:	02800204 	movi	r10,8
8111e504:	02ffffc4 	movi	r11,-1
8111e508:	02080034 	movhi	r8,8192
8111e50c:	034001c4 	movi	r13,7
8111e510:	42d1883a 	add	r8,r8,r11
8111e514:	002d883a 	mov	r22,zero
8111e518:	5025883a 	mov	r18,r10
8111e51c:	003fa006 	br	8111e3a0 <__reset+0xfb0fe3a0>
8111e520:	00800c04 	movi	r2,48
8111e524:	80800e1e 	bne	r16,r2,8111e560 <_strtoull_r+0x2c4>
8111e528:	e0800003 	ldbu	r2,0(fp)
8111e52c:	00c01604 	movi	r3,88
8111e530:	108037cc 	andi	r2,r2,223
8111e534:	10c00a1e 	bne	r2,r3,8111e560 <_strtoull_r+0x2c4>
8111e538:	02800404 	movi	r10,16
8111e53c:	02ffffc4 	movi	r11,-1
8111e540:	02040034 	movhi	r8,4096
8111e544:	e4000043 	ldbu	r16,1(fp)
8111e548:	034003c4 	movi	r13,15
8111e54c:	e7000084 	addi	fp,fp,2
8111e550:	42d1883a 	add	r8,r8,r11
8111e554:	002d883a 	mov	r22,zero
8111e558:	5025883a 	mov	r18,r10
8111e55c:	003f9006 	br	8111e3a0 <__reset+0xfb0fe3a0>
8111e560:	02ffffc4 	movi	r11,-1
8111e564:	02040034 	movhi	r8,4096
8111e568:	034003c4 	movi	r13,15
8111e56c:	42d1883a 	add	r8,r8,r11
8111e570:	9015883a 	mov	r10,r18
8111e574:	002d883a 	mov	r22,zero
8111e578:	003f8906 	br	8111e3a0 <__reset+0xfb0fe3a0>

8111e57c <__ssprint_r>:
8111e57c:	defff604 	addi	sp,sp,-40
8111e580:	de00012e 	bgeu	sp,et,8111e588 <__ssprint_r+0xc>
8111e584:	003b68fa 	trap	3
8111e588:	30800217 	ldw	r2,8(r6)
8111e58c:	dc800215 	stw	r18,8(sp)
8111e590:	dfc00915 	stw	ra,36(sp)
8111e594:	df000815 	stw	fp,32(sp)
8111e598:	ddc00715 	stw	r23,28(sp)
8111e59c:	dd800615 	stw	r22,24(sp)
8111e5a0:	dd400515 	stw	r21,20(sp)
8111e5a4:	dd000415 	stw	r20,16(sp)
8111e5a8:	dcc00315 	stw	r19,12(sp)
8111e5ac:	dc400115 	stw	r17,4(sp)
8111e5b0:	dc000015 	stw	r16,0(sp)
8111e5b4:	3025883a 	mov	r18,r6
8111e5b8:	10005826 	beq	r2,zero,8111e71c <__ssprint_r+0x1a0>
8111e5bc:	2027883a 	mov	r19,r4
8111e5c0:	35c00017 	ldw	r23,0(r6)
8111e5c4:	29000017 	ldw	r4,0(r5)
8111e5c8:	28800217 	ldw	r2,8(r5)
8111e5cc:	2823883a 	mov	r17,r5
8111e5d0:	0039883a 	mov	fp,zero
8111e5d4:	0021883a 	mov	r16,zero
8111e5d8:	80003926 	beq	r16,zero,8111e6c0 <__ssprint_r+0x144>
8111e5dc:	102b883a 	mov	r21,r2
8111e5e0:	102d883a 	mov	r22,r2
8111e5e4:	80803a36 	bltu	r16,r2,8111e6d0 <__ssprint_r+0x154>
8111e5e8:	88c0030b 	ldhu	r3,12(r17)
8111e5ec:	1881200c 	andi	r2,r3,1152
8111e5f0:	10002626 	beq	r2,zero,8111e68c <__ssprint_r+0x110>
8111e5f4:	88800517 	ldw	r2,20(r17)
8111e5f8:	89400417 	ldw	r5,16(r17)
8111e5fc:	81800044 	addi	r6,r16,1
8111e600:	108f883a 	add	r7,r2,r2
8111e604:	3885883a 	add	r2,r7,r2
8111e608:	100ed7fa 	srli	r7,r2,31
8111e60c:	216dc83a 	sub	r22,r4,r5
8111e610:	3589883a 	add	r4,r6,r22
8111e614:	3885883a 	add	r2,r7,r2
8111e618:	102bd07a 	srai	r21,r2,1
8111e61c:	a80d883a 	mov	r6,r21
8111e620:	a900022e 	bgeu	r21,r4,8111e62c <__ssprint_r+0xb0>
8111e624:	202b883a 	mov	r21,r4
8111e628:	200d883a 	mov	r6,r4
8111e62c:	18c1000c 	andi	r3,r3,1024
8111e630:	18002a26 	beq	r3,zero,8111e6dc <__ssprint_r+0x160>
8111e634:	300b883a 	mov	r5,r6
8111e638:	9809883a 	mov	r4,r19
8111e63c:	11106380 	call	81110638 <_malloc_r>
8111e640:	1029883a 	mov	r20,r2
8111e644:	10002c26 	beq	r2,zero,8111e6f8 <__ssprint_r+0x17c>
8111e648:	89400417 	ldw	r5,16(r17)
8111e64c:	b00d883a 	mov	r6,r22
8111e650:	1009883a 	mov	r4,r2
8111e654:	1110e4c0 	call	81110e4c <memcpy>
8111e658:	8880030b 	ldhu	r2,12(r17)
8111e65c:	00fedfc4 	movi	r3,-1153
8111e660:	10c4703a 	and	r2,r2,r3
8111e664:	10802014 	ori	r2,r2,128
8111e668:	8880030d 	sth	r2,12(r17)
8111e66c:	a589883a 	add	r4,r20,r22
8111e670:	adadc83a 	sub	r22,r21,r22
8111e674:	8d400515 	stw	r21,20(r17)
8111e678:	8d800215 	stw	r22,8(r17)
8111e67c:	8d000415 	stw	r20,16(r17)
8111e680:	89000015 	stw	r4,0(r17)
8111e684:	802b883a 	mov	r21,r16
8111e688:	802d883a 	mov	r22,r16
8111e68c:	b00d883a 	mov	r6,r22
8111e690:	e00b883a 	mov	r5,fp
8111e694:	111ac040 	call	8111ac04 <memmove>
8111e698:	88800217 	ldw	r2,8(r17)
8111e69c:	89000017 	ldw	r4,0(r17)
8111e6a0:	90c00217 	ldw	r3,8(r18)
8111e6a4:	1545c83a 	sub	r2,r2,r21
8111e6a8:	2589883a 	add	r4,r4,r22
8111e6ac:	88800215 	stw	r2,8(r17)
8111e6b0:	89000015 	stw	r4,0(r17)
8111e6b4:	1c21c83a 	sub	r16,r3,r16
8111e6b8:	94000215 	stw	r16,8(r18)
8111e6bc:	80001726 	beq	r16,zero,8111e71c <__ssprint_r+0x1a0>
8111e6c0:	bf000017 	ldw	fp,0(r23)
8111e6c4:	bc000117 	ldw	r16,4(r23)
8111e6c8:	bdc00204 	addi	r23,r23,8
8111e6cc:	003fc206 	br	8111e5d8 <__reset+0xfb0fe5d8>
8111e6d0:	802b883a 	mov	r21,r16
8111e6d4:	802d883a 	mov	r22,r16
8111e6d8:	003fec06 	br	8111e68c <__reset+0xfb0fe68c>
8111e6dc:	9809883a 	mov	r4,r19
8111e6e0:	111be240 	call	8111be24 <_realloc_r>
8111e6e4:	1029883a 	mov	r20,r2
8111e6e8:	103fe01e 	bne	r2,zero,8111e66c <__reset+0xfb0fe66c>
8111e6ec:	89400417 	ldw	r5,16(r17)
8111e6f0:	9809883a 	mov	r4,r19
8111e6f4:	1119d900 	call	81119d90 <_free_r>
8111e6f8:	88c0030b 	ldhu	r3,12(r17)
8111e6fc:	00800304 	movi	r2,12
8111e700:	98800015 	stw	r2,0(r19)
8111e704:	18c01014 	ori	r3,r3,64
8111e708:	88c0030d 	sth	r3,12(r17)
8111e70c:	00bfffc4 	movi	r2,-1
8111e710:	90000215 	stw	zero,8(r18)
8111e714:	90000115 	stw	zero,4(r18)
8111e718:	00000206 	br	8111e724 <__ssprint_r+0x1a8>
8111e71c:	90000115 	stw	zero,4(r18)
8111e720:	0005883a 	mov	r2,zero
8111e724:	dfc00917 	ldw	ra,36(sp)
8111e728:	df000817 	ldw	fp,32(sp)
8111e72c:	ddc00717 	ldw	r23,28(sp)
8111e730:	dd800617 	ldw	r22,24(sp)
8111e734:	dd400517 	ldw	r21,20(sp)
8111e738:	dd000417 	ldw	r20,16(sp)
8111e73c:	dcc00317 	ldw	r19,12(sp)
8111e740:	dc800217 	ldw	r18,8(sp)
8111e744:	dc400117 	ldw	r17,4(sp)
8111e748:	dc000017 	ldw	r16,0(sp)
8111e74c:	dec00a04 	addi	sp,sp,40
8111e750:	f800283a 	ret

8111e754 <___svfiprintf_internal_r>:
8111e754:	deffc804 	addi	sp,sp,-224
8111e758:	de00012e 	bgeu	sp,et,8111e760 <___svfiprintf_internal_r+0xc>
8111e75c:	003b68fa 	trap	3
8111e760:	2880030b 	ldhu	r2,12(r5)
8111e764:	dcc03115 	stw	r19,196(sp)
8111e768:	dfc03715 	stw	ra,220(sp)
8111e76c:	df003615 	stw	fp,216(sp)
8111e770:	ddc03515 	stw	r23,212(sp)
8111e774:	dd803415 	stw	r22,208(sp)
8111e778:	dd403315 	stw	r21,204(sp)
8111e77c:	dd003215 	stw	r20,200(sp)
8111e780:	dc803015 	stw	r18,192(sp)
8111e784:	dc402f15 	stw	r17,188(sp)
8111e788:	dc002e15 	stw	r16,184(sp)
8111e78c:	d9402715 	stw	r5,156(sp)
8111e790:	d9002a15 	stw	r4,168(sp)
8111e794:	1080200c 	andi	r2,r2,128
8111e798:	d9c02315 	stw	r7,140(sp)
8111e79c:	3027883a 	mov	r19,r6
8111e7a0:	10000226 	beq	r2,zero,8111e7ac <___svfiprintf_internal_r+0x58>
8111e7a4:	28800417 	ldw	r2,16(r5)
8111e7a8:	10041d26 	beq	r2,zero,8111f820 <___svfiprintf_internal_r+0x10cc>
8111e7ac:	dac01a04 	addi	r11,sp,104
8111e7b0:	dac01e15 	stw	r11,120(sp)
8111e7b4:	d8801e17 	ldw	r2,120(sp)
8111e7b8:	dac019c4 	addi	r11,sp,103
8111e7bc:	dd402a17 	ldw	r21,168(sp)
8111e7c0:	ddc02717 	ldw	r23,156(sp)
8111e7c4:	05a04534 	movhi	r22,33044
8111e7c8:	05204534 	movhi	r20,33044
8111e7cc:	dac01f15 	stw	r11,124(sp)
8111e7d0:	12d7c83a 	sub	r11,r2,r11
8111e7d4:	b5b19304 	addi	r22,r22,-14772
8111e7d8:	a5318f04 	addi	r20,r20,-14788
8111e7dc:	dec01a15 	stw	sp,104(sp)
8111e7e0:	d8001c15 	stw	zero,112(sp)
8111e7e4:	d8001b15 	stw	zero,108(sp)
8111e7e8:	d811883a 	mov	r8,sp
8111e7ec:	d8002915 	stw	zero,164(sp)
8111e7f0:	d8002515 	stw	zero,148(sp)
8111e7f4:	dac02b15 	stw	r11,172(sp)
8111e7f8:	98800007 	ldb	r2,0(r19)
8111e7fc:	1002dd26 	beq	r2,zero,8111f374 <___svfiprintf_internal_r+0xc20>
8111e800:	00c00944 	movi	r3,37
8111e804:	9823883a 	mov	r17,r19
8111e808:	10c0021e 	bne	r2,r3,8111e814 <___svfiprintf_internal_r+0xc0>
8111e80c:	00001406 	br	8111e860 <___svfiprintf_internal_r+0x10c>
8111e810:	10c00326 	beq	r2,r3,8111e820 <___svfiprintf_internal_r+0xcc>
8111e814:	8c400044 	addi	r17,r17,1
8111e818:	88800007 	ldb	r2,0(r17)
8111e81c:	103ffc1e 	bne	r2,zero,8111e810 <__reset+0xfb0fe810>
8111e820:	8ce1c83a 	sub	r16,r17,r19
8111e824:	80000e26 	beq	r16,zero,8111e860 <___svfiprintf_internal_r+0x10c>
8111e828:	d8c01c17 	ldw	r3,112(sp)
8111e82c:	d8801b17 	ldw	r2,108(sp)
8111e830:	44c00015 	stw	r19,0(r8)
8111e834:	1c07883a 	add	r3,r3,r16
8111e838:	10800044 	addi	r2,r2,1
8111e83c:	d8c01c15 	stw	r3,112(sp)
8111e840:	44000115 	stw	r16,4(r8)
8111e844:	d8801b15 	stw	r2,108(sp)
8111e848:	00c001c4 	movi	r3,7
8111e84c:	18831e16 	blt	r3,r2,8111f4c8 <___svfiprintf_internal_r+0xd74>
8111e850:	42000204 	addi	r8,r8,8
8111e854:	dac02517 	ldw	r11,148(sp)
8111e858:	5c17883a 	add	r11,r11,r16
8111e85c:	dac02515 	stw	r11,148(sp)
8111e860:	88800007 	ldb	r2,0(r17)
8111e864:	1002c526 	beq	r2,zero,8111f37c <___svfiprintf_internal_r+0xc28>
8111e868:	88c00047 	ldb	r3,1(r17)
8111e86c:	8cc00044 	addi	r19,r17,1
8111e870:	d8001d85 	stb	zero,118(sp)
8111e874:	0009883a 	mov	r4,zero
8111e878:	000f883a 	mov	r7,zero
8111e87c:	043fffc4 	movi	r16,-1
8111e880:	d8002415 	stw	zero,144(sp)
8111e884:	0025883a 	mov	r18,zero
8111e888:	01401604 	movi	r5,88
8111e88c:	01800244 	movi	r6,9
8111e890:	02800a84 	movi	r10,42
8111e894:	02401b04 	movi	r9,108
8111e898:	9cc00044 	addi	r19,r19,1
8111e89c:	18bff804 	addi	r2,r3,-32
8111e8a0:	2881dd36 	bltu	r5,r2,8111f018 <___svfiprintf_internal_r+0x8c4>
8111e8a4:	100490ba 	slli	r2,r2,2
8111e8a8:	02e044b4 	movhi	r11,33042
8111e8ac:	5afa2f04 	addi	r11,r11,-5956
8111e8b0:	12c5883a 	add	r2,r2,r11
8111e8b4:	10800017 	ldw	r2,0(r2)
8111e8b8:	1000683a 	jmp	r2
8111e8bc:	8111eab8 	rdprs	r4,r16,18346
8111e8c0:	8111f018 	cmpnei	r4,r16,18368
8111e8c4:	8111f018 	cmpnei	r4,r16,18368
8111e8c8:	8111eaac 	andhi	r4,r16,18346
8111e8cc:	8111f018 	cmpnei	r4,r16,18368
8111e8d0:	8111f018 	cmpnei	r4,r16,18368
8111e8d4:	8111f018 	cmpnei	r4,r16,18368
8111e8d8:	8111f018 	cmpnei	r4,r16,18368
8111e8dc:	8111f018 	cmpnei	r4,r16,18368
8111e8e0:	8111f018 	cmpnei	r4,r16,18368
8111e8e4:	8111ea20 	cmpeqi	r4,r16,18344
8111e8e8:	8111ebfc 	xorhi	r4,r16,18351
8111e8ec:	8111f018 	cmpnei	r4,r16,18368
8111e8f0:	8111ea4c 	andi	r4,r16,18345
8111e8f4:	8111f04c 	andi	r4,r16,18369
8111e8f8:	8111f018 	cmpnei	r4,r16,18368
8111e8fc:	8111f040 	call	88111f04 <__reset+0x20f1f04>
8111e900:	8111efe0 	cmpeqi	r4,r16,18367
8111e904:	8111efe0 	cmpeqi	r4,r16,18367
8111e908:	8111efe0 	cmpeqi	r4,r16,18367
8111e90c:	8111efe0 	cmpeqi	r4,r16,18367
8111e910:	8111efe0 	cmpeqi	r4,r16,18367
8111e914:	8111efe0 	cmpeqi	r4,r16,18367
8111e918:	8111efe0 	cmpeqi	r4,r16,18367
8111e91c:	8111efe0 	cmpeqi	r4,r16,18367
8111e920:	8111efe0 	cmpeqi	r4,r16,18367
8111e924:	8111f018 	cmpnei	r4,r16,18368
8111e928:	8111f018 	cmpnei	r4,r16,18368
8111e92c:	8111f018 	cmpnei	r4,r16,18368
8111e930:	8111f018 	cmpnei	r4,r16,18368
8111e934:	8111f018 	cmpnei	r4,r16,18368
8111e938:	8111f018 	cmpnei	r4,r16,18368
8111e93c:	8111f018 	cmpnei	r4,r16,18368
8111e940:	8111f018 	cmpnei	r4,r16,18368
8111e944:	8111f018 	cmpnei	r4,r16,18368
8111e948:	8111f018 	cmpnei	r4,r16,18368
8111e94c:	8111ef7c 	xorhi	r4,r16,18365
8111e950:	8111f018 	cmpnei	r4,r16,18368
8111e954:	8111f018 	cmpnei	r4,r16,18368
8111e958:	8111f018 	cmpnei	r4,r16,18368
8111e95c:	8111f018 	cmpnei	r4,r16,18368
8111e960:	8111f018 	cmpnei	r4,r16,18368
8111e964:	8111f018 	cmpnei	r4,r16,18368
8111e968:	8111f018 	cmpnei	r4,r16,18368
8111e96c:	8111f018 	cmpnei	r4,r16,18368
8111e970:	8111f018 	cmpnei	r4,r16,18368
8111e974:	8111f018 	cmpnei	r4,r16,18368
8111e978:	8111f0f4 	orhi	r4,r16,18371
8111e97c:	8111f018 	cmpnei	r4,r16,18368
8111e980:	8111f018 	cmpnei	r4,r16,18368
8111e984:	8111f018 	cmpnei	r4,r16,18368
8111e988:	8111f018 	cmpnei	r4,r16,18368
8111e98c:	8111f018 	cmpnei	r4,r16,18368
8111e990:	8111f08c 	andi	r4,r16,18370
8111e994:	8111f018 	cmpnei	r4,r16,18368
8111e998:	8111f018 	cmpnei	r4,r16,18368
8111e99c:	8111edc0 	call	88111edc <__reset+0x20f1edc>
8111e9a0:	8111f018 	cmpnei	r4,r16,18368
8111e9a4:	8111f018 	cmpnei	r4,r16,18368
8111e9a8:	8111f018 	cmpnei	r4,r16,18368
8111e9ac:	8111f018 	cmpnei	r4,r16,18368
8111e9b0:	8111f018 	cmpnei	r4,r16,18368
8111e9b4:	8111f018 	cmpnei	r4,r16,18368
8111e9b8:	8111f018 	cmpnei	r4,r16,18368
8111e9bc:	8111f018 	cmpnei	r4,r16,18368
8111e9c0:	8111f018 	cmpnei	r4,r16,18368
8111e9c4:	8111f018 	cmpnei	r4,r16,18368
8111e9c8:	8111ecb0 	cmpltui	r4,r16,18354
8111e9cc:	8111ee5c 	xori	r4,r16,18361
8111e9d0:	8111f018 	cmpnei	r4,r16,18368
8111e9d4:	8111f018 	cmpnei	r4,r16,18368
8111e9d8:	8111f018 	cmpnei	r4,r16,18368
8111e9dc:	8111ee50 	cmplti	r4,r16,18361
8111e9e0:	8111ee5c 	xori	r4,r16,18361
8111e9e4:	8111f018 	cmpnei	r4,r16,18368
8111e9e8:	8111f018 	cmpnei	r4,r16,18368
8111e9ec:	8111ee40 	call	88111ee4 <__reset+0x20f1ee4>
8111e9f0:	8111f018 	cmpnei	r4,r16,18368
8111e9f4:	8111ee04 	addi	r4,r16,18360
8111e9f8:	8111ec0c 	andi	r4,r16,18352
8111e9fc:	8111ea58 	cmpnei	r4,r16,18345
8111ea00:	8111ef70 	cmpltui	r4,r16,18365
8111ea04:	8111f018 	cmpnei	r4,r16,18368
8111ea08:	8111ef24 	muli	r4,r16,18364
8111ea0c:	8111f018 	cmpnei	r4,r16,18368
8111ea10:	8111eb7c 	xorhi	r4,r16,18349
8111ea14:	8111f018 	cmpnei	r4,r16,18368
8111ea18:	8111f018 	cmpnei	r4,r16,18368
8111ea1c:	8111ead8 	cmpnei	r4,r16,18347
8111ea20:	dac02317 	ldw	r11,140(sp)
8111ea24:	5ac00017 	ldw	r11,0(r11)
8111ea28:	dac02415 	stw	r11,144(sp)
8111ea2c:	dac02317 	ldw	r11,140(sp)
8111ea30:	58800104 	addi	r2,r11,4
8111ea34:	dac02417 	ldw	r11,144(sp)
8111ea38:	5802e90e 	bge	r11,zero,8111f5e0 <___svfiprintf_internal_r+0xe8c>
8111ea3c:	dac02417 	ldw	r11,144(sp)
8111ea40:	d8802315 	stw	r2,140(sp)
8111ea44:	02d7c83a 	sub	r11,zero,r11
8111ea48:	dac02415 	stw	r11,144(sp)
8111ea4c:	94800114 	ori	r18,r18,4
8111ea50:	98c00007 	ldb	r3,0(r19)
8111ea54:	003f9006 	br	8111e898 <__reset+0xfb0fe898>
8111ea58:	00800c04 	movi	r2,48
8111ea5c:	dac02317 	ldw	r11,140(sp)
8111ea60:	d8801d05 	stb	r2,116(sp)
8111ea64:	00801e04 	movi	r2,120
8111ea68:	d8801d45 	stb	r2,117(sp)
8111ea6c:	d8001d85 	stb	zero,118(sp)
8111ea70:	58c00104 	addi	r3,r11,4
8111ea74:	5f000017 	ldw	fp,0(r11)
8111ea78:	0013883a 	mov	r9,zero
8111ea7c:	90800094 	ori	r2,r18,2
8111ea80:	80032b16 	blt	r16,zero,8111f730 <___svfiprintf_internal_r+0xfdc>
8111ea84:	00bfdfc4 	movi	r2,-129
8111ea88:	90a4703a 	and	r18,r18,r2
8111ea8c:	d8c02315 	stw	r3,140(sp)
8111ea90:	94800094 	ori	r18,r18,2
8111ea94:	e002dc26 	beq	fp,zero,8111f608 <___svfiprintf_internal_r+0xeb4>
8111ea98:	01204534 	movhi	r4,33044
8111ea9c:	21310504 	addi	r4,r4,-15340
8111eaa0:	0015883a 	mov	r10,zero
8111eaa4:	d9002915 	stw	r4,164(sp)
8111eaa8:	00002306 	br	8111eb38 <___svfiprintf_internal_r+0x3e4>
8111eaac:	94800054 	ori	r18,r18,1
8111eab0:	98c00007 	ldb	r3,0(r19)
8111eab4:	003f7806 	br	8111e898 <__reset+0xfb0fe898>
8111eab8:	38803fcc 	andi	r2,r7,255
8111eabc:	1080201c 	xori	r2,r2,128
8111eac0:	10bfe004 	addi	r2,r2,-128
8111eac4:	1002f31e 	bne	r2,zero,8111f694 <___svfiprintf_internal_r+0xf40>
8111eac8:	01000044 	movi	r4,1
8111eacc:	01c00804 	movi	r7,32
8111ead0:	98c00007 	ldb	r3,0(r19)
8111ead4:	003f7006 	br	8111e898 <__reset+0xfb0fe898>
8111ead8:	21003fcc 	andi	r4,r4,255
8111eadc:	2003aa1e 	bne	r4,zero,8111f988 <___svfiprintf_internal_r+0x1234>
8111eae0:	00a04534 	movhi	r2,33044
8111eae4:	10b10504 	addi	r2,r2,-15340
8111eae8:	d8802915 	stw	r2,164(sp)
8111eaec:	9080080c 	andi	r2,r18,32
8111eaf0:	1000ba26 	beq	r2,zero,8111eddc <___svfiprintf_internal_r+0x688>
8111eaf4:	dac02317 	ldw	r11,140(sp)
8111eaf8:	5f000017 	ldw	fp,0(r11)
8111eafc:	5a400117 	ldw	r9,4(r11)
8111eb00:	5ac00204 	addi	r11,r11,8
8111eb04:	dac02315 	stw	r11,140(sp)
8111eb08:	9080004c 	andi	r2,r18,1
8111eb0c:	10029026 	beq	r2,zero,8111f550 <___svfiprintf_internal_r+0xdfc>
8111eb10:	e244b03a 	or	r2,fp,r9
8111eb14:	1002d41e 	bne	r2,zero,8111f668 <___svfiprintf_internal_r+0xf14>
8111eb18:	d8001d85 	stb	zero,118(sp)
8111eb1c:	80030b16 	blt	r16,zero,8111f74c <___svfiprintf_internal_r+0xff8>
8111eb20:	00bfdfc4 	movi	r2,-129
8111eb24:	90a4703a 	and	r18,r18,r2
8111eb28:	0015883a 	mov	r10,zero
8111eb2c:	80002426 	beq	r16,zero,8111ebc0 <___svfiprintf_internal_r+0x46c>
8111eb30:	0039883a 	mov	fp,zero
8111eb34:	0013883a 	mov	r9,zero
8111eb38:	d9002917 	ldw	r4,164(sp)
8111eb3c:	dc401a04 	addi	r17,sp,104
8111eb40:	e08003cc 	andi	r2,fp,15
8111eb44:	4806973a 	slli	r3,r9,28
8111eb48:	2085883a 	add	r2,r4,r2
8111eb4c:	e038d13a 	srli	fp,fp,4
8111eb50:	10800003 	ldbu	r2,0(r2)
8111eb54:	4812d13a 	srli	r9,r9,4
8111eb58:	8c7fffc4 	addi	r17,r17,-1
8111eb5c:	1f38b03a 	or	fp,r3,fp
8111eb60:	88800005 	stb	r2,0(r17)
8111eb64:	e244b03a 	or	r2,fp,r9
8111eb68:	103ff51e 	bne	r2,zero,8111eb40 <__reset+0xfb0feb40>
8111eb6c:	dac01e17 	ldw	r11,120(sp)
8111eb70:	5c57c83a 	sub	r11,r11,r17
8111eb74:	dac02115 	stw	r11,132(sp)
8111eb78:	00001406 	br	8111ebcc <___svfiprintf_internal_r+0x478>
8111eb7c:	21003fcc 	andi	r4,r4,255
8111eb80:	2003741e 	bne	r4,zero,8111f954 <___svfiprintf_internal_r+0x1200>
8111eb84:	9080080c 	andi	r2,r18,32
8111eb88:	10014526 	beq	r2,zero,8111f0a0 <___svfiprintf_internal_r+0x94c>
8111eb8c:	dac02317 	ldw	r11,140(sp)
8111eb90:	d8001d85 	stb	zero,118(sp)
8111eb94:	58c00204 	addi	r3,r11,8
8111eb98:	5f000017 	ldw	fp,0(r11)
8111eb9c:	5a400117 	ldw	r9,4(r11)
8111eba0:	8002d916 	blt	r16,zero,8111f708 <___svfiprintf_internal_r+0xfb4>
8111eba4:	013fdfc4 	movi	r4,-129
8111eba8:	e244b03a 	or	r2,fp,r9
8111ebac:	d8c02315 	stw	r3,140(sp)
8111ebb0:	9124703a 	and	r18,r18,r4
8111ebb4:	0015883a 	mov	r10,zero
8111ebb8:	1000b91e 	bne	r2,zero,8111eea0 <___svfiprintf_internal_r+0x74c>
8111ebbc:	8002e61e 	bne	r16,zero,8111f758 <___svfiprintf_internal_r+0x1004>
8111ebc0:	0021883a 	mov	r16,zero
8111ebc4:	d8002115 	stw	zero,132(sp)
8111ebc8:	dc401a04 	addi	r17,sp,104
8111ebcc:	d8c02117 	ldw	r3,132(sp)
8111ebd0:	dc002015 	stw	r16,128(sp)
8111ebd4:	80c0010e 	bge	r16,r3,8111ebdc <___svfiprintf_internal_r+0x488>
8111ebd8:	d8c02015 	stw	r3,128(sp)
8111ebdc:	52803fcc 	andi	r10,r10,255
8111ebe0:	5280201c 	xori	r10,r10,128
8111ebe4:	52bfe004 	addi	r10,r10,-128
8111ebe8:	50003c26 	beq	r10,zero,8111ecdc <___svfiprintf_internal_r+0x588>
8111ebec:	dac02017 	ldw	r11,128(sp)
8111ebf0:	5ac00044 	addi	r11,r11,1
8111ebf4:	dac02015 	stw	r11,128(sp)
8111ebf8:	00003806 	br	8111ecdc <___svfiprintf_internal_r+0x588>
8111ebfc:	01000044 	movi	r4,1
8111ec00:	01c00ac4 	movi	r7,43
8111ec04:	98c00007 	ldb	r3,0(r19)
8111ec08:	003f2306 	br	8111e898 <__reset+0xfb0fe898>
8111ec0c:	21003fcc 	andi	r4,r4,255
8111ec10:	2003481e 	bne	r4,zero,8111f934 <___svfiprintf_internal_r+0x11e0>
8111ec14:	9080080c 	andi	r2,r18,32
8111ec18:	10013b26 	beq	r2,zero,8111f108 <___svfiprintf_internal_r+0x9b4>
8111ec1c:	dac02317 	ldw	r11,140(sp)
8111ec20:	d8001d85 	stb	zero,118(sp)
8111ec24:	58800204 	addi	r2,r11,8
8111ec28:	5f000017 	ldw	fp,0(r11)
8111ec2c:	5a400117 	ldw	r9,4(r11)
8111ec30:	8002a816 	blt	r16,zero,8111f6d4 <___svfiprintf_internal_r+0xf80>
8111ec34:	013fdfc4 	movi	r4,-129
8111ec38:	e246b03a 	or	r3,fp,r9
8111ec3c:	d8802315 	stw	r2,140(sp)
8111ec40:	9124703a 	and	r18,r18,r4
8111ec44:	18013c26 	beq	r3,zero,8111f138 <___svfiprintf_internal_r+0x9e4>
8111ec48:	0015883a 	mov	r10,zero
8111ec4c:	dc401a04 	addi	r17,sp,104
8111ec50:	e006d0fa 	srli	r3,fp,3
8111ec54:	4808977a 	slli	r4,r9,29
8111ec58:	4812d0fa 	srli	r9,r9,3
8111ec5c:	e70001cc 	andi	fp,fp,7
8111ec60:	e0800c04 	addi	r2,fp,48
8111ec64:	8c7fffc4 	addi	r17,r17,-1
8111ec68:	20f8b03a 	or	fp,r4,r3
8111ec6c:	88800005 	stb	r2,0(r17)
8111ec70:	e246b03a 	or	r3,fp,r9
8111ec74:	183ff61e 	bne	r3,zero,8111ec50 <__reset+0xfb0fec50>
8111ec78:	90c0004c 	andi	r3,r18,1
8111ec7c:	1800a526 	beq	r3,zero,8111ef14 <___svfiprintf_internal_r+0x7c0>
8111ec80:	10803fcc 	andi	r2,r2,255
8111ec84:	1080201c 	xori	r2,r2,128
8111ec88:	10bfe004 	addi	r2,r2,-128
8111ec8c:	00c00c04 	movi	r3,48
8111ec90:	10ffb626 	beq	r2,r3,8111eb6c <__reset+0xfb0feb6c>
8111ec94:	88ffffc5 	stb	r3,-1(r17)
8111ec98:	d8c01e17 	ldw	r3,120(sp)
8111ec9c:	88bfffc4 	addi	r2,r17,-1
8111eca0:	1023883a 	mov	r17,r2
8111eca4:	1887c83a 	sub	r3,r3,r2
8111eca8:	d8c02115 	stw	r3,132(sp)
8111ecac:	003fc706 	br	8111ebcc <__reset+0xfb0febcc>
8111ecb0:	dac02317 	ldw	r11,140(sp)
8111ecb4:	00c00044 	movi	r3,1
8111ecb8:	d8c02015 	stw	r3,128(sp)
8111ecbc:	58800017 	ldw	r2,0(r11)
8111ecc0:	5ac00104 	addi	r11,r11,4
8111ecc4:	d8001d85 	stb	zero,118(sp)
8111ecc8:	d8801005 	stb	r2,64(sp)
8111eccc:	dac02315 	stw	r11,140(sp)
8111ecd0:	d8c02115 	stw	r3,132(sp)
8111ecd4:	dc401004 	addi	r17,sp,64
8111ecd8:	0021883a 	mov	r16,zero
8111ecdc:	90c0008c 	andi	r3,r18,2
8111ece0:	d8c02215 	stw	r3,136(sp)
8111ece4:	18000326 	beq	r3,zero,8111ecf4 <___svfiprintf_internal_r+0x5a0>
8111ece8:	dac02017 	ldw	r11,128(sp)
8111ecec:	5ac00084 	addi	r11,r11,2
8111ecf0:	dac02015 	stw	r11,128(sp)
8111ecf4:	90c0210c 	andi	r3,r18,132
8111ecf8:	d8c02615 	stw	r3,152(sp)
8111ecfc:	1801131e 	bne	r3,zero,8111f14c <___svfiprintf_internal_r+0x9f8>
8111ed00:	dac02417 	ldw	r11,144(sp)
8111ed04:	d8c02017 	ldw	r3,128(sp)
8111ed08:	58f9c83a 	sub	fp,r11,r3
8111ed0c:	07010f0e 	bge	zero,fp,8111f14c <___svfiprintf_internal_r+0x9f8>
8111ed10:	02400404 	movi	r9,16
8111ed14:	d8c01c17 	ldw	r3,112(sp)
8111ed18:	d8801b17 	ldw	r2,108(sp)
8111ed1c:	4f02d60e 	bge	r9,fp,8111f878 <___svfiprintf_internal_r+0x1124>
8111ed20:	01604534 	movhi	r5,33044
8111ed24:	29719304 	addi	r5,r5,-14772
8111ed28:	d9402815 	stw	r5,160(sp)
8111ed2c:	028001c4 	movi	r10,7
8111ed30:	00000306 	br	8111ed40 <___svfiprintf_internal_r+0x5ec>
8111ed34:	e73ffc04 	addi	fp,fp,-16
8111ed38:	42000204 	addi	r8,r8,8
8111ed3c:	4f00150e 	bge	r9,fp,8111ed94 <___svfiprintf_internal_r+0x640>
8111ed40:	18c00404 	addi	r3,r3,16
8111ed44:	10800044 	addi	r2,r2,1
8111ed48:	45800015 	stw	r22,0(r8)
8111ed4c:	42400115 	stw	r9,4(r8)
8111ed50:	d8c01c15 	stw	r3,112(sp)
8111ed54:	d8801b15 	stw	r2,108(sp)
8111ed58:	50bff60e 	bge	r10,r2,8111ed34 <__reset+0xfb0fed34>
8111ed5c:	d9801a04 	addi	r6,sp,104
8111ed60:	b80b883a 	mov	r5,r23
8111ed64:	a809883a 	mov	r4,r21
8111ed68:	da402c15 	stw	r9,176(sp)
8111ed6c:	da802d15 	stw	r10,180(sp)
8111ed70:	111e57c0 	call	8111e57c <__ssprint_r>
8111ed74:	da402c17 	ldw	r9,176(sp)
8111ed78:	da802d17 	ldw	r10,180(sp)
8111ed7c:	1001851e 	bne	r2,zero,8111f394 <___svfiprintf_internal_r+0xc40>
8111ed80:	e73ffc04 	addi	fp,fp,-16
8111ed84:	d8c01c17 	ldw	r3,112(sp)
8111ed88:	d8801b17 	ldw	r2,108(sp)
8111ed8c:	d811883a 	mov	r8,sp
8111ed90:	4f3feb16 	blt	r9,fp,8111ed40 <__reset+0xfb0fed40>
8111ed94:	dac02817 	ldw	r11,160(sp)
8111ed98:	e0c7883a 	add	r3,fp,r3
8111ed9c:	10800044 	addi	r2,r2,1
8111eda0:	42c00015 	stw	r11,0(r8)
8111eda4:	47000115 	stw	fp,4(r8)
8111eda8:	d8c01c15 	stw	r3,112(sp)
8111edac:	d8801b15 	stw	r2,108(sp)
8111edb0:	010001c4 	movi	r4,7
8111edb4:	2081ee16 	blt	r4,r2,8111f570 <___svfiprintf_internal_r+0xe1c>
8111edb8:	42000204 	addi	r8,r8,8
8111edbc:	0000e506 	br	8111f154 <___svfiprintf_internal_r+0xa00>
8111edc0:	21003fcc 	andi	r4,r4,255
8111edc4:	2002dd1e 	bne	r4,zero,8111f93c <___svfiprintf_internal_r+0x11e8>
8111edc8:	00a04534 	movhi	r2,33044
8111edcc:	10b10004 	addi	r2,r2,-15360
8111edd0:	d8802915 	stw	r2,164(sp)
8111edd4:	9080080c 	andi	r2,r18,32
8111edd8:	103f461e 	bne	r2,zero,8111eaf4 <__reset+0xfb0feaf4>
8111eddc:	9080040c 	andi	r2,r18,16
8111ede0:	10022e1e 	bne	r2,zero,8111f69c <___svfiprintf_internal_r+0xf48>
8111ede4:	9080100c 	andi	r2,r18,64
8111ede8:	dac02317 	ldw	r11,140(sp)
8111edec:	10027326 	beq	r2,zero,8111f7bc <___svfiprintf_internal_r+0x1068>
8111edf0:	5f00000b 	ldhu	fp,0(r11)
8111edf4:	5ac00104 	addi	r11,r11,4
8111edf8:	0013883a 	mov	r9,zero
8111edfc:	dac02315 	stw	r11,140(sp)
8111ee00:	003f4106 	br	8111eb08 <__reset+0xfb0feb08>
8111ee04:	21003fcc 	andi	r4,r4,255
8111ee08:	2002e11e 	bne	r4,zero,8111f990 <___svfiprintf_internal_r+0x123c>
8111ee0c:	9080080c 	andi	r2,r18,32
8111ee10:	1002011e 	bne	r2,zero,8111f618 <___svfiprintf_internal_r+0xec4>
8111ee14:	9080040c 	andi	r2,r18,16
8111ee18:	10023e1e 	bne	r2,zero,8111f714 <___svfiprintf_internal_r+0xfc0>
8111ee1c:	9480100c 	andi	r18,r18,64
8111ee20:	90023c26 	beq	r18,zero,8111f714 <___svfiprintf_internal_r+0xfc0>
8111ee24:	dac02317 	ldw	r11,140(sp)
8111ee28:	58800017 	ldw	r2,0(r11)
8111ee2c:	5ac00104 	addi	r11,r11,4
8111ee30:	dac02315 	stw	r11,140(sp)
8111ee34:	dac02517 	ldw	r11,148(sp)
8111ee38:	12c0000d 	sth	r11,0(r2)
8111ee3c:	003e6e06 	br	8111e7f8 <__reset+0xfb0fe7f8>
8111ee40:	98c00007 	ldb	r3,0(r19)
8111ee44:	1a422926 	beq	r3,r9,8111f6ec <___svfiprintf_internal_r+0xf98>
8111ee48:	94800414 	ori	r18,r18,16
8111ee4c:	003e9206 	br	8111e898 <__reset+0xfb0fe898>
8111ee50:	94801014 	ori	r18,r18,64
8111ee54:	98c00007 	ldb	r3,0(r19)
8111ee58:	003e8f06 	br	8111e898 <__reset+0xfb0fe898>
8111ee5c:	21003fcc 	andi	r4,r4,255
8111ee60:	2002c71e 	bne	r4,zero,8111f980 <___svfiprintf_internal_r+0x122c>
8111ee64:	9080080c 	andi	r2,r18,32
8111ee68:	10004926 	beq	r2,zero,8111ef90 <___svfiprintf_internal_r+0x83c>
8111ee6c:	dac02317 	ldw	r11,140(sp)
8111ee70:	58800117 	ldw	r2,4(r11)
8111ee74:	5f000017 	ldw	fp,0(r11)
8111ee78:	5ac00204 	addi	r11,r11,8
8111ee7c:	dac02315 	stw	r11,140(sp)
8111ee80:	1013883a 	mov	r9,r2
8111ee84:	10004b16 	blt	r2,zero,8111efb4 <___svfiprintf_internal_r+0x860>
8111ee88:	da801d83 	ldbu	r10,118(sp)
8111ee8c:	8001cb16 	blt	r16,zero,8111f5bc <___svfiprintf_internal_r+0xe68>
8111ee90:	00ffdfc4 	movi	r3,-129
8111ee94:	e244b03a 	or	r2,fp,r9
8111ee98:	90e4703a 	and	r18,r18,r3
8111ee9c:	103f4726 	beq	r2,zero,8111ebbc <__reset+0xfb0febbc>
8111eea0:	48008c26 	beq	r9,zero,8111f0d4 <___svfiprintf_internal_r+0x980>
8111eea4:	dc802015 	stw	r18,128(sp)
8111eea8:	dc002115 	stw	r16,132(sp)
8111eeac:	dc401a04 	addi	r17,sp,104
8111eeb0:	e021883a 	mov	r16,fp
8111eeb4:	da002215 	stw	r8,136(sp)
8111eeb8:	5039883a 	mov	fp,r10
8111eebc:	4825883a 	mov	r18,r9
8111eec0:	8009883a 	mov	r4,r16
8111eec4:	900b883a 	mov	r5,r18
8111eec8:	01800284 	movi	r6,10
8111eecc:	000f883a 	mov	r7,zero
8111eed0:	1122c400 	call	81122c40 <__umoddi3>
8111eed4:	10800c04 	addi	r2,r2,48
8111eed8:	8c7fffc4 	addi	r17,r17,-1
8111eedc:	8009883a 	mov	r4,r16
8111eee0:	900b883a 	mov	r5,r18
8111eee4:	88800005 	stb	r2,0(r17)
8111eee8:	01800284 	movi	r6,10
8111eeec:	000f883a 	mov	r7,zero
8111eef0:	11226c00 	call	811226c0 <__udivdi3>
8111eef4:	1021883a 	mov	r16,r2
8111eef8:	10c4b03a 	or	r2,r2,r3
8111eefc:	1825883a 	mov	r18,r3
8111ef00:	103fef1e 	bne	r2,zero,8111eec0 <__reset+0xfb0feec0>
8111ef04:	dc802017 	ldw	r18,128(sp)
8111ef08:	dc002117 	ldw	r16,132(sp)
8111ef0c:	da002217 	ldw	r8,136(sp)
8111ef10:	e015883a 	mov	r10,fp
8111ef14:	d8c01e17 	ldw	r3,120(sp)
8111ef18:	1c47c83a 	sub	r3,r3,r17
8111ef1c:	d8c02115 	stw	r3,132(sp)
8111ef20:	003f2a06 	br	8111ebcc <__reset+0xfb0febcc>
8111ef24:	dac02317 	ldw	r11,140(sp)
8111ef28:	d8001d85 	stb	zero,118(sp)
8111ef2c:	5c400017 	ldw	r17,0(r11)
8111ef30:	5f000104 	addi	fp,r11,4
8111ef34:	88022f26 	beq	r17,zero,8111f7f4 <___svfiprintf_internal_r+0x10a0>
8111ef38:	80022516 	blt	r16,zero,8111f7d0 <___svfiprintf_internal_r+0x107c>
8111ef3c:	800d883a 	mov	r6,r16
8111ef40:	000b883a 	mov	r5,zero
8111ef44:	8809883a 	mov	r4,r17
8111ef48:	da002c15 	stw	r8,176(sp)
8111ef4c:	111ab200 	call	8111ab20 <memchr>
8111ef50:	da002c17 	ldw	r8,176(sp)
8111ef54:	10026426 	beq	r2,zero,8111f8e8 <___svfiprintf_internal_r+0x1194>
8111ef58:	1445c83a 	sub	r2,r2,r17
8111ef5c:	d8802115 	stw	r2,132(sp)
8111ef60:	da801d83 	ldbu	r10,118(sp)
8111ef64:	df002315 	stw	fp,140(sp)
8111ef68:	0021883a 	mov	r16,zero
8111ef6c:	003f1706 	br	8111ebcc <__reset+0xfb0febcc>
8111ef70:	94800814 	ori	r18,r18,32
8111ef74:	98c00007 	ldb	r3,0(r19)
8111ef78:	003e4706 	br	8111e898 <__reset+0xfb0fe898>
8111ef7c:	21003fcc 	andi	r4,r4,255
8111ef80:	2002701e 	bne	r4,zero,8111f944 <___svfiprintf_internal_r+0x11f0>
8111ef84:	94800414 	ori	r18,r18,16
8111ef88:	9080080c 	andi	r2,r18,32
8111ef8c:	103fb71e 	bne	r2,zero,8111ee6c <__reset+0xfb0fee6c>
8111ef90:	9080040c 	andi	r2,r18,16
8111ef94:	1001ab26 	beq	r2,zero,8111f644 <___svfiprintf_internal_r+0xef0>
8111ef98:	dac02317 	ldw	r11,140(sp)
8111ef9c:	5f000017 	ldw	fp,0(r11)
8111efa0:	5ac00104 	addi	r11,r11,4
8111efa4:	dac02315 	stw	r11,140(sp)
8111efa8:	e013d7fa 	srai	r9,fp,31
8111efac:	4805883a 	mov	r2,r9
8111efb0:	103fb50e 	bge	r2,zero,8111ee88 <__reset+0xfb0fee88>
8111efb4:	0739c83a 	sub	fp,zero,fp
8111efb8:	02800b44 	movi	r10,45
8111efbc:	e004c03a 	cmpne	r2,fp,zero
8111efc0:	0253c83a 	sub	r9,zero,r9
8111efc4:	da801d85 	stb	r10,118(sp)
8111efc8:	4893c83a 	sub	r9,r9,r2
8111efcc:	80023016 	blt	r16,zero,8111f890 <___svfiprintf_internal_r+0x113c>
8111efd0:	00bfdfc4 	movi	r2,-129
8111efd4:	90a4703a 	and	r18,r18,r2
8111efd8:	483fb21e 	bne	r9,zero,8111eea4 <__reset+0xfb0feea4>
8111efdc:	00003d06 	br	8111f0d4 <___svfiprintf_internal_r+0x980>
8111efe0:	9817883a 	mov	r11,r19
8111efe4:	d8002415 	stw	zero,144(sp)
8111efe8:	18bff404 	addi	r2,r3,-48
8111efec:	0019883a 	mov	r12,zero
8111eff0:	58c00007 	ldb	r3,0(r11)
8111eff4:	630002a4 	muli	r12,r12,10
8111eff8:	9cc00044 	addi	r19,r19,1
8111effc:	9817883a 	mov	r11,r19
8111f000:	1319883a 	add	r12,r2,r12
8111f004:	18bff404 	addi	r2,r3,-48
8111f008:	30bff92e 	bgeu	r6,r2,8111eff0 <__reset+0xfb0feff0>
8111f00c:	db002415 	stw	r12,144(sp)
8111f010:	18bff804 	addi	r2,r3,-32
8111f014:	28be232e 	bgeu	r5,r2,8111e8a4 <__reset+0xfb0fe8a4>
8111f018:	21003fcc 	andi	r4,r4,255
8111f01c:	20024b1e 	bne	r4,zero,8111f94c <___svfiprintf_internal_r+0x11f8>
8111f020:	1800d626 	beq	r3,zero,8111f37c <___svfiprintf_internal_r+0xc28>
8111f024:	02c00044 	movi	r11,1
8111f028:	dac02015 	stw	r11,128(sp)
8111f02c:	d8c01005 	stb	r3,64(sp)
8111f030:	d8001d85 	stb	zero,118(sp)
8111f034:	dac02115 	stw	r11,132(sp)
8111f038:	dc401004 	addi	r17,sp,64
8111f03c:	003f2606 	br	8111ecd8 <__reset+0xfb0fecd8>
8111f040:	94802014 	ori	r18,r18,128
8111f044:	98c00007 	ldb	r3,0(r19)
8111f048:	003e1306 	br	8111e898 <__reset+0xfb0fe898>
8111f04c:	98c00007 	ldb	r3,0(r19)
8111f050:	9ac00044 	addi	r11,r19,1
8111f054:	1a822b26 	beq	r3,r10,8111f904 <___svfiprintf_internal_r+0x11b0>
8111f058:	18bff404 	addi	r2,r3,-48
8111f05c:	0021883a 	mov	r16,zero
8111f060:	30821e36 	bltu	r6,r2,8111f8dc <___svfiprintf_internal_r+0x1188>
8111f064:	58c00007 	ldb	r3,0(r11)
8111f068:	840002a4 	muli	r16,r16,10
8111f06c:	5cc00044 	addi	r19,r11,1
8111f070:	9817883a 	mov	r11,r19
8111f074:	80a1883a 	add	r16,r16,r2
8111f078:	18bff404 	addi	r2,r3,-48
8111f07c:	30bff92e 	bgeu	r6,r2,8111f064 <__reset+0xfb0ff064>
8111f080:	803e060e 	bge	r16,zero,8111e89c <__reset+0xfb0fe89c>
8111f084:	043fffc4 	movi	r16,-1
8111f088:	003e0406 	br	8111e89c <__reset+0xfb0fe89c>
8111f08c:	21003fcc 	andi	r4,r4,255
8111f090:	2002371e 	bne	r4,zero,8111f970 <___svfiprintf_internal_r+0x121c>
8111f094:	94800414 	ori	r18,r18,16
8111f098:	9080080c 	andi	r2,r18,32
8111f09c:	103ebb1e 	bne	r2,zero,8111eb8c <__reset+0xfb0feb8c>
8111f0a0:	9080040c 	andi	r2,r18,16
8111f0a4:	10013b26 	beq	r2,zero,8111f594 <___svfiprintf_internal_r+0xe40>
8111f0a8:	dac02317 	ldw	r11,140(sp)
8111f0ac:	d8001d85 	stb	zero,118(sp)
8111f0b0:	0013883a 	mov	r9,zero
8111f0b4:	58800104 	addi	r2,r11,4
8111f0b8:	5f000017 	ldw	fp,0(r11)
8111f0bc:	80013d16 	blt	r16,zero,8111f5b4 <___svfiprintf_internal_r+0xe60>
8111f0c0:	00ffdfc4 	movi	r3,-129
8111f0c4:	d8802315 	stw	r2,140(sp)
8111f0c8:	90e4703a 	and	r18,r18,r3
8111f0cc:	0015883a 	mov	r10,zero
8111f0d0:	e03eba26 	beq	fp,zero,8111ebbc <__reset+0xfb0febbc>
8111f0d4:	00800244 	movi	r2,9
8111f0d8:	173f7236 	bltu	r2,fp,8111eea4 <__reset+0xfb0feea4>
8111f0dc:	dac02b17 	ldw	r11,172(sp)
8111f0e0:	e7000c04 	addi	fp,fp,48
8111f0e4:	df0019c5 	stb	fp,103(sp)
8111f0e8:	dac02115 	stw	r11,132(sp)
8111f0ec:	dc4019c4 	addi	r17,sp,103
8111f0f0:	003eb606 	br	8111ebcc <__reset+0xfb0febcc>
8111f0f4:	21003fcc 	andi	r4,r4,255
8111f0f8:	20021f1e 	bne	r4,zero,8111f978 <___svfiprintf_internal_r+0x1224>
8111f0fc:	94800414 	ori	r18,r18,16
8111f100:	9080080c 	andi	r2,r18,32
8111f104:	103ec51e 	bne	r2,zero,8111ec1c <__reset+0xfb0fec1c>
8111f108:	9080040c 	andi	r2,r18,16
8111f10c:	10016926 	beq	r2,zero,8111f6b4 <___svfiprintf_internal_r+0xf60>
8111f110:	dac02317 	ldw	r11,140(sp)
8111f114:	d8001d85 	stb	zero,118(sp)
8111f118:	0013883a 	mov	r9,zero
8111f11c:	58800104 	addi	r2,r11,4
8111f120:	5f000017 	ldw	fp,0(r11)
8111f124:	80016b16 	blt	r16,zero,8111f6d4 <___svfiprintf_internal_r+0xf80>
8111f128:	00ffdfc4 	movi	r3,-129
8111f12c:	d8802315 	stw	r2,140(sp)
8111f130:	90e4703a 	and	r18,r18,r3
8111f134:	e03ec41e 	bne	fp,zero,8111ec48 <__reset+0xfb0fec48>
8111f138:	0015883a 	mov	r10,zero
8111f13c:	8001c226 	beq	r16,zero,8111f848 <___svfiprintf_internal_r+0x10f4>
8111f140:	0039883a 	mov	fp,zero
8111f144:	0013883a 	mov	r9,zero
8111f148:	003ec006 	br	8111ec4c <__reset+0xfb0fec4c>
8111f14c:	d8c01c17 	ldw	r3,112(sp)
8111f150:	d8801b17 	ldw	r2,108(sp)
8111f154:	d9001d87 	ldb	r4,118(sp)
8111f158:	20000b26 	beq	r4,zero,8111f188 <___svfiprintf_internal_r+0xa34>
8111f15c:	d9001d84 	addi	r4,sp,118
8111f160:	18c00044 	addi	r3,r3,1
8111f164:	10800044 	addi	r2,r2,1
8111f168:	41000015 	stw	r4,0(r8)
8111f16c:	01000044 	movi	r4,1
8111f170:	41000115 	stw	r4,4(r8)
8111f174:	d8c01c15 	stw	r3,112(sp)
8111f178:	d8801b15 	stw	r2,108(sp)
8111f17c:	010001c4 	movi	r4,7
8111f180:	2080e116 	blt	r4,r2,8111f508 <___svfiprintf_internal_r+0xdb4>
8111f184:	42000204 	addi	r8,r8,8
8111f188:	dac02217 	ldw	r11,136(sp)
8111f18c:	58000b26 	beq	r11,zero,8111f1bc <___svfiprintf_internal_r+0xa68>
8111f190:	d9001d04 	addi	r4,sp,116
8111f194:	18c00084 	addi	r3,r3,2
8111f198:	10800044 	addi	r2,r2,1
8111f19c:	41000015 	stw	r4,0(r8)
8111f1a0:	01000084 	movi	r4,2
8111f1a4:	41000115 	stw	r4,4(r8)
8111f1a8:	d8c01c15 	stw	r3,112(sp)
8111f1ac:	d8801b15 	stw	r2,108(sp)
8111f1b0:	010001c4 	movi	r4,7
8111f1b4:	2080dd16 	blt	r4,r2,8111f52c <___svfiprintf_internal_r+0xdd8>
8111f1b8:	42000204 	addi	r8,r8,8
8111f1bc:	dac02617 	ldw	r11,152(sp)
8111f1c0:	01002004 	movi	r4,128
8111f1c4:	59008426 	beq	r11,r4,8111f3d8 <___svfiprintf_internal_r+0xc84>
8111f1c8:	dac02117 	ldw	r11,132(sp)
8111f1cc:	82e1c83a 	sub	r16,r16,r11
8111f1d0:	0400270e 	bge	zero,r16,8111f270 <___svfiprintf_internal_r+0xb1c>
8111f1d4:	01c00404 	movi	r7,16
8111f1d8:	3c016a0e 	bge	r7,r16,8111f784 <___svfiprintf_internal_r+0x1030>
8111f1dc:	01604534 	movhi	r5,33044
8111f1e0:	29718f04 	addi	r5,r5,-14788
8111f1e4:	d9402215 	stw	r5,136(sp)
8111f1e8:	070001c4 	movi	fp,7
8111f1ec:	00000306 	br	8111f1fc <___svfiprintf_internal_r+0xaa8>
8111f1f0:	843ffc04 	addi	r16,r16,-16
8111f1f4:	42000204 	addi	r8,r8,8
8111f1f8:	3c00130e 	bge	r7,r16,8111f248 <___svfiprintf_internal_r+0xaf4>
8111f1fc:	18c00404 	addi	r3,r3,16
8111f200:	10800044 	addi	r2,r2,1
8111f204:	45000015 	stw	r20,0(r8)
8111f208:	41c00115 	stw	r7,4(r8)
8111f20c:	d8c01c15 	stw	r3,112(sp)
8111f210:	d8801b15 	stw	r2,108(sp)
8111f214:	e0bff60e 	bge	fp,r2,8111f1f0 <__reset+0xfb0ff1f0>
8111f218:	d9801a04 	addi	r6,sp,104
8111f21c:	b80b883a 	mov	r5,r23
8111f220:	a809883a 	mov	r4,r21
8111f224:	d9c02c15 	stw	r7,176(sp)
8111f228:	111e57c0 	call	8111e57c <__ssprint_r>
8111f22c:	d9c02c17 	ldw	r7,176(sp)
8111f230:	1000581e 	bne	r2,zero,8111f394 <___svfiprintf_internal_r+0xc40>
8111f234:	843ffc04 	addi	r16,r16,-16
8111f238:	d8c01c17 	ldw	r3,112(sp)
8111f23c:	d8801b17 	ldw	r2,108(sp)
8111f240:	d811883a 	mov	r8,sp
8111f244:	3c3fed16 	blt	r7,r16,8111f1fc <__reset+0xfb0ff1fc>
8111f248:	dac02217 	ldw	r11,136(sp)
8111f24c:	1c07883a 	add	r3,r3,r16
8111f250:	10800044 	addi	r2,r2,1
8111f254:	42c00015 	stw	r11,0(r8)
8111f258:	44000115 	stw	r16,4(r8)
8111f25c:	d8c01c15 	stw	r3,112(sp)
8111f260:	d8801b15 	stw	r2,108(sp)
8111f264:	010001c4 	movi	r4,7
8111f268:	20809e16 	blt	r4,r2,8111f4e4 <___svfiprintf_internal_r+0xd90>
8111f26c:	42000204 	addi	r8,r8,8
8111f270:	dac02117 	ldw	r11,132(sp)
8111f274:	10800044 	addi	r2,r2,1
8111f278:	44400015 	stw	r17,0(r8)
8111f27c:	58c7883a 	add	r3,r11,r3
8111f280:	42c00115 	stw	r11,4(r8)
8111f284:	d8c01c15 	stw	r3,112(sp)
8111f288:	d8801b15 	stw	r2,108(sp)
8111f28c:	010001c4 	movi	r4,7
8111f290:	20807f16 	blt	r4,r2,8111f490 <___svfiprintf_internal_r+0xd3c>
8111f294:	42000204 	addi	r8,r8,8
8111f298:	9480010c 	andi	r18,r18,4
8111f29c:	90002926 	beq	r18,zero,8111f344 <___svfiprintf_internal_r+0xbf0>
8111f2a0:	dac02417 	ldw	r11,144(sp)
8111f2a4:	d8802017 	ldw	r2,128(sp)
8111f2a8:	58a1c83a 	sub	r16,r11,r2
8111f2ac:	0400250e 	bge	zero,r16,8111f344 <___svfiprintf_internal_r+0xbf0>
8111f2b0:	04400404 	movi	r17,16
8111f2b4:	d8801b17 	ldw	r2,108(sp)
8111f2b8:	8c017c0e 	bge	r17,r16,8111f8ac <___svfiprintf_internal_r+0x1158>
8111f2bc:	01604534 	movhi	r5,33044
8111f2c0:	29719304 	addi	r5,r5,-14772
8111f2c4:	d9402815 	stw	r5,160(sp)
8111f2c8:	048001c4 	movi	r18,7
8111f2cc:	00000306 	br	8111f2dc <___svfiprintf_internal_r+0xb88>
8111f2d0:	843ffc04 	addi	r16,r16,-16
8111f2d4:	42000204 	addi	r8,r8,8
8111f2d8:	8c00110e 	bge	r17,r16,8111f320 <___svfiprintf_internal_r+0xbcc>
8111f2dc:	18c00404 	addi	r3,r3,16
8111f2e0:	10800044 	addi	r2,r2,1
8111f2e4:	45800015 	stw	r22,0(r8)
8111f2e8:	44400115 	stw	r17,4(r8)
8111f2ec:	d8c01c15 	stw	r3,112(sp)
8111f2f0:	d8801b15 	stw	r2,108(sp)
8111f2f4:	90bff60e 	bge	r18,r2,8111f2d0 <__reset+0xfb0ff2d0>
8111f2f8:	d9801a04 	addi	r6,sp,104
8111f2fc:	b80b883a 	mov	r5,r23
8111f300:	a809883a 	mov	r4,r21
8111f304:	111e57c0 	call	8111e57c <__ssprint_r>
8111f308:	1000221e 	bne	r2,zero,8111f394 <___svfiprintf_internal_r+0xc40>
8111f30c:	843ffc04 	addi	r16,r16,-16
8111f310:	d8c01c17 	ldw	r3,112(sp)
8111f314:	d8801b17 	ldw	r2,108(sp)
8111f318:	d811883a 	mov	r8,sp
8111f31c:	8c3fef16 	blt	r17,r16,8111f2dc <__reset+0xfb0ff2dc>
8111f320:	dac02817 	ldw	r11,160(sp)
8111f324:	1c07883a 	add	r3,r3,r16
8111f328:	10800044 	addi	r2,r2,1
8111f32c:	42c00015 	stw	r11,0(r8)
8111f330:	44000115 	stw	r16,4(r8)
8111f334:	d8c01c15 	stw	r3,112(sp)
8111f338:	d8801b15 	stw	r2,108(sp)
8111f33c:	010001c4 	movi	r4,7
8111f340:	2080aa16 	blt	r4,r2,8111f5ec <___svfiprintf_internal_r+0xe98>
8111f344:	d8802417 	ldw	r2,144(sp)
8111f348:	dac02017 	ldw	r11,128(sp)
8111f34c:	12c0010e 	bge	r2,r11,8111f354 <___svfiprintf_internal_r+0xc00>
8111f350:	5805883a 	mov	r2,r11
8111f354:	dac02517 	ldw	r11,148(sp)
8111f358:	5897883a 	add	r11,r11,r2
8111f35c:	dac02515 	stw	r11,148(sp)
8111f360:	1800531e 	bne	r3,zero,8111f4b0 <___svfiprintf_internal_r+0xd5c>
8111f364:	98800007 	ldb	r2,0(r19)
8111f368:	d8001b15 	stw	zero,108(sp)
8111f36c:	d811883a 	mov	r8,sp
8111f370:	103d231e 	bne	r2,zero,8111e800 <__reset+0xfb0fe800>
8111f374:	9823883a 	mov	r17,r19
8111f378:	003d3906 	br	8111e860 <__reset+0xfb0fe860>
8111f37c:	d8801c17 	ldw	r2,112(sp)
8111f380:	10000426 	beq	r2,zero,8111f394 <___svfiprintf_internal_r+0xc40>
8111f384:	d9402717 	ldw	r5,156(sp)
8111f388:	d9002a17 	ldw	r4,168(sp)
8111f38c:	d9801a04 	addi	r6,sp,104
8111f390:	111e57c0 	call	8111e57c <__ssprint_r>
8111f394:	dac02717 	ldw	r11,156(sp)
8111f398:	d8802517 	ldw	r2,148(sp)
8111f39c:	58c0030b 	ldhu	r3,12(r11)
8111f3a0:	18c0100c 	andi	r3,r3,64
8111f3a4:	1801381e 	bne	r3,zero,8111f888 <___svfiprintf_internal_r+0x1134>
8111f3a8:	dfc03717 	ldw	ra,220(sp)
8111f3ac:	df003617 	ldw	fp,216(sp)
8111f3b0:	ddc03517 	ldw	r23,212(sp)
8111f3b4:	dd803417 	ldw	r22,208(sp)
8111f3b8:	dd403317 	ldw	r21,204(sp)
8111f3bc:	dd003217 	ldw	r20,200(sp)
8111f3c0:	dcc03117 	ldw	r19,196(sp)
8111f3c4:	dc803017 	ldw	r18,192(sp)
8111f3c8:	dc402f17 	ldw	r17,188(sp)
8111f3cc:	dc002e17 	ldw	r16,184(sp)
8111f3d0:	dec03804 	addi	sp,sp,224
8111f3d4:	f800283a 	ret
8111f3d8:	dac02417 	ldw	r11,144(sp)
8111f3dc:	d9002017 	ldw	r4,128(sp)
8111f3e0:	5939c83a 	sub	fp,r11,r4
8111f3e4:	073f780e 	bge	zero,fp,8111f1c8 <__reset+0xfb0ff1c8>
8111f3e8:	02400404 	movi	r9,16
8111f3ec:	4f01370e 	bge	r9,fp,8111f8cc <___svfiprintf_internal_r+0x1178>
8111f3f0:	02e04534 	movhi	r11,33044
8111f3f4:	5af18f04 	addi	r11,r11,-14788
8111f3f8:	dac02215 	stw	r11,136(sp)
8111f3fc:	028001c4 	movi	r10,7
8111f400:	00000306 	br	8111f410 <___svfiprintf_internal_r+0xcbc>
8111f404:	e73ffc04 	addi	fp,fp,-16
8111f408:	42000204 	addi	r8,r8,8
8111f40c:	4f00150e 	bge	r9,fp,8111f464 <___svfiprintf_internal_r+0xd10>
8111f410:	18c00404 	addi	r3,r3,16
8111f414:	10800044 	addi	r2,r2,1
8111f418:	45000015 	stw	r20,0(r8)
8111f41c:	42400115 	stw	r9,4(r8)
8111f420:	d8c01c15 	stw	r3,112(sp)
8111f424:	d8801b15 	stw	r2,108(sp)
8111f428:	50bff60e 	bge	r10,r2,8111f404 <__reset+0xfb0ff404>
8111f42c:	d9801a04 	addi	r6,sp,104
8111f430:	b80b883a 	mov	r5,r23
8111f434:	a809883a 	mov	r4,r21
8111f438:	da402c15 	stw	r9,176(sp)
8111f43c:	da802d15 	stw	r10,180(sp)
8111f440:	111e57c0 	call	8111e57c <__ssprint_r>
8111f444:	da402c17 	ldw	r9,176(sp)
8111f448:	da802d17 	ldw	r10,180(sp)
8111f44c:	103fd11e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f450:	e73ffc04 	addi	fp,fp,-16
8111f454:	d8c01c17 	ldw	r3,112(sp)
8111f458:	d8801b17 	ldw	r2,108(sp)
8111f45c:	d811883a 	mov	r8,sp
8111f460:	4f3feb16 	blt	r9,fp,8111f410 <__reset+0xfb0ff410>
8111f464:	dac02217 	ldw	r11,136(sp)
8111f468:	1f07883a 	add	r3,r3,fp
8111f46c:	10800044 	addi	r2,r2,1
8111f470:	42c00015 	stw	r11,0(r8)
8111f474:	47000115 	stw	fp,4(r8)
8111f478:	d8c01c15 	stw	r3,112(sp)
8111f47c:	d8801b15 	stw	r2,108(sp)
8111f480:	010001c4 	movi	r4,7
8111f484:	2080b616 	blt	r4,r2,8111f760 <___svfiprintf_internal_r+0x100c>
8111f488:	42000204 	addi	r8,r8,8
8111f48c:	003f4e06 	br	8111f1c8 <__reset+0xfb0ff1c8>
8111f490:	d9801a04 	addi	r6,sp,104
8111f494:	b80b883a 	mov	r5,r23
8111f498:	a809883a 	mov	r4,r21
8111f49c:	111e57c0 	call	8111e57c <__ssprint_r>
8111f4a0:	103fbc1e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f4a4:	d8c01c17 	ldw	r3,112(sp)
8111f4a8:	d811883a 	mov	r8,sp
8111f4ac:	003f7a06 	br	8111f298 <__reset+0xfb0ff298>
8111f4b0:	d9801a04 	addi	r6,sp,104
8111f4b4:	b80b883a 	mov	r5,r23
8111f4b8:	a809883a 	mov	r4,r21
8111f4bc:	111e57c0 	call	8111e57c <__ssprint_r>
8111f4c0:	103fa826 	beq	r2,zero,8111f364 <__reset+0xfb0ff364>
8111f4c4:	003fb306 	br	8111f394 <__reset+0xfb0ff394>
8111f4c8:	d9801a04 	addi	r6,sp,104
8111f4cc:	b80b883a 	mov	r5,r23
8111f4d0:	a809883a 	mov	r4,r21
8111f4d4:	111e57c0 	call	8111e57c <__ssprint_r>
8111f4d8:	103fae1e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f4dc:	d811883a 	mov	r8,sp
8111f4e0:	003cdc06 	br	8111e854 <__reset+0xfb0fe854>
8111f4e4:	d9801a04 	addi	r6,sp,104
8111f4e8:	b80b883a 	mov	r5,r23
8111f4ec:	a809883a 	mov	r4,r21
8111f4f0:	111e57c0 	call	8111e57c <__ssprint_r>
8111f4f4:	103fa71e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f4f8:	d8c01c17 	ldw	r3,112(sp)
8111f4fc:	d8801b17 	ldw	r2,108(sp)
8111f500:	d811883a 	mov	r8,sp
8111f504:	003f5a06 	br	8111f270 <__reset+0xfb0ff270>
8111f508:	d9801a04 	addi	r6,sp,104
8111f50c:	b80b883a 	mov	r5,r23
8111f510:	a809883a 	mov	r4,r21
8111f514:	111e57c0 	call	8111e57c <__ssprint_r>
8111f518:	103f9e1e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f51c:	d8c01c17 	ldw	r3,112(sp)
8111f520:	d8801b17 	ldw	r2,108(sp)
8111f524:	d811883a 	mov	r8,sp
8111f528:	003f1706 	br	8111f188 <__reset+0xfb0ff188>
8111f52c:	d9801a04 	addi	r6,sp,104
8111f530:	b80b883a 	mov	r5,r23
8111f534:	a809883a 	mov	r4,r21
8111f538:	111e57c0 	call	8111e57c <__ssprint_r>
8111f53c:	103f951e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f540:	d8c01c17 	ldw	r3,112(sp)
8111f544:	d8801b17 	ldw	r2,108(sp)
8111f548:	d811883a 	mov	r8,sp
8111f54c:	003f1b06 	br	8111f1bc <__reset+0xfb0ff1bc>
8111f550:	d8001d85 	stb	zero,118(sp)
8111f554:	80007b16 	blt	r16,zero,8111f744 <___svfiprintf_internal_r+0xff0>
8111f558:	00ffdfc4 	movi	r3,-129
8111f55c:	e244b03a 	or	r2,fp,r9
8111f560:	90e4703a 	and	r18,r18,r3
8111f564:	103d7026 	beq	r2,zero,8111eb28 <__reset+0xfb0feb28>
8111f568:	0015883a 	mov	r10,zero
8111f56c:	003d7206 	br	8111eb38 <__reset+0xfb0feb38>
8111f570:	d9801a04 	addi	r6,sp,104
8111f574:	b80b883a 	mov	r5,r23
8111f578:	a809883a 	mov	r4,r21
8111f57c:	111e57c0 	call	8111e57c <__ssprint_r>
8111f580:	103f841e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f584:	d8c01c17 	ldw	r3,112(sp)
8111f588:	d8801b17 	ldw	r2,108(sp)
8111f58c:	d811883a 	mov	r8,sp
8111f590:	003ef006 	br	8111f154 <__reset+0xfb0ff154>
8111f594:	9080100c 	andi	r2,r18,64
8111f598:	d8001d85 	stb	zero,118(sp)
8111f59c:	dac02317 	ldw	r11,140(sp)
8111f5a0:	10008126 	beq	r2,zero,8111f7a8 <___svfiprintf_internal_r+0x1054>
8111f5a4:	58800104 	addi	r2,r11,4
8111f5a8:	5f00000b 	ldhu	fp,0(r11)
8111f5ac:	0013883a 	mov	r9,zero
8111f5b0:	803ec30e 	bge	r16,zero,8111f0c0 <__reset+0xfb0ff0c0>
8111f5b4:	d8802315 	stw	r2,140(sp)
8111f5b8:	0015883a 	mov	r10,zero
8111f5bc:	e244b03a 	or	r2,fp,r9
8111f5c0:	103e371e 	bne	r2,zero,8111eea0 <__reset+0xfb0feea0>
8111f5c4:	00800044 	movi	r2,1
8111f5c8:	10803fcc 	andi	r2,r2,255
8111f5cc:	00c00044 	movi	r3,1
8111f5d0:	10c06126 	beq	r2,r3,8111f758 <___svfiprintf_internal_r+0x1004>
8111f5d4:	00c00084 	movi	r3,2
8111f5d8:	10fd5526 	beq	r2,r3,8111eb30 <__reset+0xfb0feb30>
8111f5dc:	003ed806 	br	8111f140 <__reset+0xfb0ff140>
8111f5e0:	d8802315 	stw	r2,140(sp)
8111f5e4:	98c00007 	ldb	r3,0(r19)
8111f5e8:	003cab06 	br	8111e898 <__reset+0xfb0fe898>
8111f5ec:	d9801a04 	addi	r6,sp,104
8111f5f0:	b80b883a 	mov	r5,r23
8111f5f4:	a809883a 	mov	r4,r21
8111f5f8:	111e57c0 	call	8111e57c <__ssprint_r>
8111f5fc:	103f651e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f600:	d8c01c17 	ldw	r3,112(sp)
8111f604:	003f4f06 	br	8111f344 <__reset+0xfb0ff344>
8111f608:	00a04534 	movhi	r2,33044
8111f60c:	10b10504 	addi	r2,r2,-15340
8111f610:	d8802915 	stw	r2,164(sp)
8111f614:	003d4406 	br	8111eb28 <__reset+0xfb0feb28>
8111f618:	dac02317 	ldw	r11,140(sp)
8111f61c:	58800017 	ldw	r2,0(r11)
8111f620:	dac02517 	ldw	r11,148(sp)
8111f624:	5807d7fa 	srai	r3,r11,31
8111f628:	dac02317 	ldw	r11,140(sp)
8111f62c:	10c00115 	stw	r3,4(r2)
8111f630:	5ac00104 	addi	r11,r11,4
8111f634:	dac02315 	stw	r11,140(sp)
8111f638:	dac02517 	ldw	r11,148(sp)
8111f63c:	12c00015 	stw	r11,0(r2)
8111f640:	003c6d06 	br	8111e7f8 <__reset+0xfb0fe7f8>
8111f644:	9080100c 	andi	r2,r18,64
8111f648:	dac02317 	ldw	r11,140(sp)
8111f64c:	103e5326 	beq	r2,zero,8111ef9c <__reset+0xfb0fef9c>
8111f650:	5f00000f 	ldh	fp,0(r11)
8111f654:	5ac00104 	addi	r11,r11,4
8111f658:	dac02315 	stw	r11,140(sp)
8111f65c:	e013d7fa 	srai	r9,fp,31
8111f660:	4805883a 	mov	r2,r9
8111f664:	003e0706 	br	8111ee84 <__reset+0xfb0fee84>
8111f668:	00800c04 	movi	r2,48
8111f66c:	d8801d05 	stb	r2,116(sp)
8111f670:	d8c01d45 	stb	r3,117(sp)
8111f674:	d8001d85 	stb	zero,118(sp)
8111f678:	90800094 	ori	r2,r18,2
8111f67c:	80008f16 	blt	r16,zero,8111f8bc <___svfiprintf_internal_r+0x1168>
8111f680:	00bfdfc4 	movi	r2,-129
8111f684:	90a4703a 	and	r18,r18,r2
8111f688:	94800094 	ori	r18,r18,2
8111f68c:	0015883a 	mov	r10,zero
8111f690:	003d2906 	br	8111eb38 <__reset+0xfb0feb38>
8111f694:	98c00007 	ldb	r3,0(r19)
8111f698:	003c7f06 	br	8111e898 <__reset+0xfb0fe898>
8111f69c:	dac02317 	ldw	r11,140(sp)
8111f6a0:	0013883a 	mov	r9,zero
8111f6a4:	5f000017 	ldw	fp,0(r11)
8111f6a8:	5ac00104 	addi	r11,r11,4
8111f6ac:	dac02315 	stw	r11,140(sp)
8111f6b0:	003d1506 	br	8111eb08 <__reset+0xfb0feb08>
8111f6b4:	9080100c 	andi	r2,r18,64
8111f6b8:	d8001d85 	stb	zero,118(sp)
8111f6bc:	dac02317 	ldw	r11,140(sp)
8111f6c0:	10003426 	beq	r2,zero,8111f794 <___svfiprintf_internal_r+0x1040>
8111f6c4:	58800104 	addi	r2,r11,4
8111f6c8:	5f00000b 	ldhu	fp,0(r11)
8111f6cc:	0013883a 	mov	r9,zero
8111f6d0:	803e950e 	bge	r16,zero,8111f128 <__reset+0xfb0ff128>
8111f6d4:	e246b03a 	or	r3,fp,r9
8111f6d8:	d8802315 	stw	r2,140(sp)
8111f6dc:	183d5a1e 	bne	r3,zero,8111ec48 <__reset+0xfb0fec48>
8111f6e0:	0015883a 	mov	r10,zero
8111f6e4:	0005883a 	mov	r2,zero
8111f6e8:	003fb706 	br	8111f5c8 <__reset+0xfb0ff5c8>
8111f6ec:	98c00043 	ldbu	r3,1(r19)
8111f6f0:	94800814 	ori	r18,r18,32
8111f6f4:	9cc00044 	addi	r19,r19,1
8111f6f8:	18c03fcc 	andi	r3,r3,255
8111f6fc:	18c0201c 	xori	r3,r3,128
8111f700:	18ffe004 	addi	r3,r3,-128
8111f704:	003c6406 	br	8111e898 <__reset+0xfb0fe898>
8111f708:	d8c02315 	stw	r3,140(sp)
8111f70c:	0015883a 	mov	r10,zero
8111f710:	003faa06 	br	8111f5bc <__reset+0xfb0ff5bc>
8111f714:	dac02317 	ldw	r11,140(sp)
8111f718:	58800017 	ldw	r2,0(r11)
8111f71c:	5ac00104 	addi	r11,r11,4
8111f720:	dac02315 	stw	r11,140(sp)
8111f724:	dac02517 	ldw	r11,148(sp)
8111f728:	12c00015 	stw	r11,0(r2)
8111f72c:	003c3206 	br	8111e7f8 <__reset+0xfb0fe7f8>
8111f730:	01204534 	movhi	r4,33044
8111f734:	21310504 	addi	r4,r4,-15340
8111f738:	d9002915 	stw	r4,164(sp)
8111f73c:	d8c02315 	stw	r3,140(sp)
8111f740:	1025883a 	mov	r18,r2
8111f744:	e244b03a 	or	r2,fp,r9
8111f748:	103f871e 	bne	r2,zero,8111f568 <__reset+0xfb0ff568>
8111f74c:	0015883a 	mov	r10,zero
8111f750:	00800084 	movi	r2,2
8111f754:	003f9c06 	br	8111f5c8 <__reset+0xfb0ff5c8>
8111f758:	0039883a 	mov	fp,zero
8111f75c:	003e5f06 	br	8111f0dc <__reset+0xfb0ff0dc>
8111f760:	d9801a04 	addi	r6,sp,104
8111f764:	b80b883a 	mov	r5,r23
8111f768:	a809883a 	mov	r4,r21
8111f76c:	111e57c0 	call	8111e57c <__ssprint_r>
8111f770:	103f081e 	bne	r2,zero,8111f394 <__reset+0xfb0ff394>
8111f774:	d8c01c17 	ldw	r3,112(sp)
8111f778:	d8801b17 	ldw	r2,108(sp)
8111f77c:	d811883a 	mov	r8,sp
8111f780:	003e9106 	br	8111f1c8 <__reset+0xfb0ff1c8>
8111f784:	01204534 	movhi	r4,33044
8111f788:	21318f04 	addi	r4,r4,-14788
8111f78c:	d9002215 	stw	r4,136(sp)
8111f790:	003ead06 	br	8111f248 <__reset+0xfb0ff248>
8111f794:	58800104 	addi	r2,r11,4
8111f798:	5f000017 	ldw	fp,0(r11)
8111f79c:	0013883a 	mov	r9,zero
8111f7a0:	803e610e 	bge	r16,zero,8111f128 <__reset+0xfb0ff128>
8111f7a4:	003fcb06 	br	8111f6d4 <__reset+0xfb0ff6d4>
8111f7a8:	58800104 	addi	r2,r11,4
8111f7ac:	5f000017 	ldw	fp,0(r11)
8111f7b0:	0013883a 	mov	r9,zero
8111f7b4:	803e420e 	bge	r16,zero,8111f0c0 <__reset+0xfb0ff0c0>
8111f7b8:	003f7e06 	br	8111f5b4 <__reset+0xfb0ff5b4>
8111f7bc:	5f000017 	ldw	fp,0(r11)
8111f7c0:	5ac00104 	addi	r11,r11,4
8111f7c4:	0013883a 	mov	r9,zero
8111f7c8:	dac02315 	stw	r11,140(sp)
8111f7cc:	003cce06 	br	8111eb08 <__reset+0xfb0feb08>
8111f7d0:	8809883a 	mov	r4,r17
8111f7d4:	da002c15 	stw	r8,176(sp)
8111f7d8:	11117c80 	call	811117c8 <strlen>
8111f7dc:	d8802115 	stw	r2,132(sp)
8111f7e0:	da801d83 	ldbu	r10,118(sp)
8111f7e4:	df002315 	stw	fp,140(sp)
8111f7e8:	0021883a 	mov	r16,zero
8111f7ec:	da002c17 	ldw	r8,176(sp)
8111f7f0:	003cf606 	br	8111ebcc <__reset+0xfb0febcc>
8111f7f4:	00800184 	movi	r2,6
8111f7f8:	1400012e 	bgeu	r2,r16,8111f800 <___svfiprintf_internal_r+0x10ac>
8111f7fc:	1021883a 	mov	r16,r2
8111f800:	dc002115 	stw	r16,132(sp)
8111f804:	8005883a 	mov	r2,r16
8111f808:	80003c16 	blt	r16,zero,8111f8fc <___svfiprintf_internal_r+0x11a8>
8111f80c:	04604534 	movhi	r17,33044
8111f810:	d8802015 	stw	r2,128(sp)
8111f814:	df002315 	stw	fp,140(sp)
8111f818:	8c710a04 	addi	r17,r17,-15320
8111f81c:	003d2e06 	br	8111ecd8 <__reset+0xfb0fecd8>
8111f820:	04001004 	movi	r16,64
8111f824:	800b883a 	mov	r5,r16
8111f828:	11106380 	call	81110638 <_malloc_r>
8111f82c:	dac02717 	ldw	r11,156(sp)
8111f830:	58800015 	stw	r2,0(r11)
8111f834:	58800415 	stw	r2,16(r11)
8111f838:	10004826 	beq	r2,zero,8111f95c <___svfiprintf_internal_r+0x1208>
8111f83c:	dac02717 	ldw	r11,156(sp)
8111f840:	5c000515 	stw	r16,20(r11)
8111f844:	003bd906 	br	8111e7ac <__reset+0xfb0fe7ac>
8111f848:	9080004c 	andi	r2,r18,1
8111f84c:	0015883a 	mov	r10,zero
8111f850:	10000626 	beq	r2,zero,8111f86c <___svfiprintf_internal_r+0x1118>
8111f854:	dac02b17 	ldw	r11,172(sp)
8111f858:	00800c04 	movi	r2,48
8111f85c:	d88019c5 	stb	r2,103(sp)
8111f860:	dac02115 	stw	r11,132(sp)
8111f864:	dc4019c4 	addi	r17,sp,103
8111f868:	003cd806 	br	8111ebcc <__reset+0xfb0febcc>
8111f86c:	d8002115 	stw	zero,132(sp)
8111f870:	dc401a04 	addi	r17,sp,104
8111f874:	003cd506 	br	8111ebcc <__reset+0xfb0febcc>
8111f878:	01204534 	movhi	r4,33044
8111f87c:	21319304 	addi	r4,r4,-14772
8111f880:	d9002815 	stw	r4,160(sp)
8111f884:	003d4306 	br	8111ed94 <__reset+0xfb0fed94>
8111f888:	00bfffc4 	movi	r2,-1
8111f88c:	003ec606 	br	8111f3a8 <__reset+0xfb0ff3a8>
8111f890:	00800044 	movi	r2,1
8111f894:	10803fcc 	andi	r2,r2,255
8111f898:	00c00044 	movi	r3,1
8111f89c:	10fd8026 	beq	r2,r3,8111eea0 <__reset+0xfb0feea0>
8111f8a0:	00c00084 	movi	r3,2
8111f8a4:	10fca426 	beq	r2,r3,8111eb38 <__reset+0xfb0feb38>
8111f8a8:	003ce806 	br	8111ec4c <__reset+0xfb0fec4c>
8111f8ac:	01204534 	movhi	r4,33044
8111f8b0:	21319304 	addi	r4,r4,-14772
8111f8b4:	d9002815 	stw	r4,160(sp)
8111f8b8:	003e9906 	br	8111f320 <__reset+0xfb0ff320>
8111f8bc:	1025883a 	mov	r18,r2
8111f8c0:	0015883a 	mov	r10,zero
8111f8c4:	00800084 	movi	r2,2
8111f8c8:	003ff206 	br	8111f894 <__reset+0xfb0ff894>
8111f8cc:	01604534 	movhi	r5,33044
8111f8d0:	29718f04 	addi	r5,r5,-14788
8111f8d4:	d9402215 	stw	r5,136(sp)
8111f8d8:	003ee206 	br	8111f464 <__reset+0xfb0ff464>
8111f8dc:	5827883a 	mov	r19,r11
8111f8e0:	0021883a 	mov	r16,zero
8111f8e4:	003bed06 	br	8111e89c <__reset+0xfb0fe89c>
8111f8e8:	dc002115 	stw	r16,132(sp)
8111f8ec:	da801d83 	ldbu	r10,118(sp)
8111f8f0:	df002315 	stw	fp,140(sp)
8111f8f4:	0021883a 	mov	r16,zero
8111f8f8:	003cb406 	br	8111ebcc <__reset+0xfb0febcc>
8111f8fc:	0005883a 	mov	r2,zero
8111f900:	003fc206 	br	8111f80c <__reset+0xfb0ff80c>
8111f904:	d8802317 	ldw	r2,140(sp)
8111f908:	98c00043 	ldbu	r3,1(r19)
8111f90c:	5827883a 	mov	r19,r11
8111f910:	14000017 	ldw	r16,0(r2)
8111f914:	10800104 	addi	r2,r2,4
8111f918:	d8802315 	stw	r2,140(sp)
8111f91c:	803f760e 	bge	r16,zero,8111f6f8 <__reset+0xfb0ff6f8>
8111f920:	18c03fcc 	andi	r3,r3,255
8111f924:	18c0201c 	xori	r3,r3,128
8111f928:	043fffc4 	movi	r16,-1
8111f92c:	18ffe004 	addi	r3,r3,-128
8111f930:	003bd906 	br	8111e898 <__reset+0xfb0fe898>
8111f934:	d9c01d85 	stb	r7,118(sp)
8111f938:	003cb606 	br	8111ec14 <__reset+0xfb0fec14>
8111f93c:	d9c01d85 	stb	r7,118(sp)
8111f940:	003d2106 	br	8111edc8 <__reset+0xfb0fedc8>
8111f944:	d9c01d85 	stb	r7,118(sp)
8111f948:	003d8e06 	br	8111ef84 <__reset+0xfb0fef84>
8111f94c:	d9c01d85 	stb	r7,118(sp)
8111f950:	003db306 	br	8111f020 <__reset+0xfb0ff020>
8111f954:	d9c01d85 	stb	r7,118(sp)
8111f958:	003c8a06 	br	8111eb84 <__reset+0xfb0feb84>
8111f95c:	dac02a17 	ldw	r11,168(sp)
8111f960:	00800304 	movi	r2,12
8111f964:	58800015 	stw	r2,0(r11)
8111f968:	00bfffc4 	movi	r2,-1
8111f96c:	003e8e06 	br	8111f3a8 <__reset+0xfb0ff3a8>
8111f970:	d9c01d85 	stb	r7,118(sp)
8111f974:	003dc706 	br	8111f094 <__reset+0xfb0ff094>
8111f978:	d9c01d85 	stb	r7,118(sp)
8111f97c:	003ddf06 	br	8111f0fc <__reset+0xfb0ff0fc>
8111f980:	d9c01d85 	stb	r7,118(sp)
8111f984:	003d3706 	br	8111ee64 <__reset+0xfb0fee64>
8111f988:	d9c01d85 	stb	r7,118(sp)
8111f98c:	003c5406 	br	8111eae0 <__reset+0xfb0feae0>
8111f990:	d9c01d85 	stb	r7,118(sp)
8111f994:	003d1d06 	br	8111ee0c <__reset+0xfb0fee0c>

8111f998 <__submore>:
8111f998:	defffa04 	addi	sp,sp,-24
8111f99c:	de00012e 	bgeu	sp,et,8111f9a4 <__submore+0xc>
8111f9a0:	003b68fa 	trap	3
8111f9a4:	dc000015 	stw	r16,0(sp)
8111f9a8:	2821883a 	mov	r16,r5
8111f9ac:	29400c17 	ldw	r5,48(r5)
8111f9b0:	dfc00515 	stw	ra,20(sp)
8111f9b4:	dd000415 	stw	r20,16(sp)
8111f9b8:	dcc00315 	stw	r19,12(sp)
8111f9bc:	dc800215 	stw	r18,8(sp)
8111f9c0:	dc400115 	stw	r17,4(sp)
8111f9c4:	80801004 	addi	r2,r16,64
8111f9c8:	28801726 	beq	r5,r2,8111fa28 <__submore+0x90>
8111f9cc:	84400d17 	ldw	r17,52(r16)
8111f9d0:	8c67883a 	add	r19,r17,r17
8111f9d4:	980d883a 	mov	r6,r19
8111f9d8:	111be240 	call	8111be24 <_realloc_r>
8111f9dc:	1025883a 	mov	r18,r2
8111f9e0:	10002226 	beq	r2,zero,8111fa6c <__submore+0xd4>
8111f9e4:	1469883a 	add	r20,r2,r17
8111f9e8:	880d883a 	mov	r6,r17
8111f9ec:	100b883a 	mov	r5,r2
8111f9f0:	a009883a 	mov	r4,r20
8111f9f4:	1110e4c0 	call	81110e4c <memcpy>
8111f9f8:	0005883a 	mov	r2,zero
8111f9fc:	85000015 	stw	r20,0(r16)
8111fa00:	84800c15 	stw	r18,48(r16)
8111fa04:	84c00d15 	stw	r19,52(r16)
8111fa08:	dfc00517 	ldw	ra,20(sp)
8111fa0c:	dd000417 	ldw	r20,16(sp)
8111fa10:	dcc00317 	ldw	r19,12(sp)
8111fa14:	dc800217 	ldw	r18,8(sp)
8111fa18:	dc400117 	ldw	r17,4(sp)
8111fa1c:	dc000017 	ldw	r16,0(sp)
8111fa20:	dec00604 	addi	sp,sp,24
8111fa24:	f800283a 	ret
8111fa28:	04410004 	movi	r17,1024
8111fa2c:	880b883a 	mov	r5,r17
8111fa30:	11106380 	call	81110638 <_malloc_r>
8111fa34:	1007883a 	mov	r3,r2
8111fa38:	10000c26 	beq	r2,zero,8111fa6c <__submore+0xd4>
8111fa3c:	80801083 	ldbu	r2,66(r16)
8111fa40:	80c00c15 	stw	r3,48(r16)
8111fa44:	84400d15 	stw	r17,52(r16)
8111fa48:	1880ffc5 	stb	r2,1023(r3)
8111fa4c:	81401043 	ldbu	r5,65(r16)
8111fa50:	1900ff44 	addi	r4,r3,1021
8111fa54:	0005883a 	mov	r2,zero
8111fa58:	1940ff85 	stb	r5,1022(r3)
8111fa5c:	81401003 	ldbu	r5,64(r16)
8111fa60:	1940ff45 	stb	r5,1021(r3)
8111fa64:	81000015 	stw	r4,0(r16)
8111fa68:	003fe706 	br	8111fa08 <__reset+0xfb0ffa08>
8111fa6c:	00bfffc4 	movi	r2,-1
8111fa70:	003fe506 	br	8111fa08 <__reset+0xfb0ffa08>

8111fa74 <_ungetc_r>:
8111fa74:	00bfffc4 	movi	r2,-1
8111fa78:	28806326 	beq	r5,r2,8111fc08 <_ungetc_r+0x194>
8111fa7c:	defffb04 	addi	sp,sp,-20
8111fa80:	de00012e 	bgeu	sp,et,8111fa88 <_ungetc_r+0x14>
8111fa84:	003b68fa 	trap	3
8111fa88:	dcc00315 	stw	r19,12(sp)
8111fa8c:	dc400115 	stw	r17,4(sp)
8111fa90:	dc000015 	stw	r16,0(sp)
8111fa94:	dfc00415 	stw	ra,16(sp)
8111fa98:	dc800215 	stw	r18,8(sp)
8111fa9c:	2023883a 	mov	r17,r4
8111faa0:	3021883a 	mov	r16,r6
8111faa4:	2827883a 	mov	r19,r5
8111faa8:	20000226 	beq	r4,zero,8111fab4 <_ungetc_r+0x40>
8111faac:	20800e17 	ldw	r2,56(r4)
8111fab0:	10002e26 	beq	r2,zero,8111fb6c <_ungetc_r+0xf8>
8111fab4:	80c0030b 	ldhu	r3,12(r16)
8111fab8:	1888000c 	andi	r2,r3,8192
8111fabc:	1000051e 	bne	r2,zero,8111fad4 <_ungetc_r+0x60>
8111fac0:	81001917 	ldw	r4,100(r16)
8111fac4:	00b7ffc4 	movi	r2,-8193
8111fac8:	18c80014 	ori	r3,r3,8192
8111facc:	2084703a 	and	r2,r4,r2
8111fad0:	80801915 	stw	r2,100(r16)
8111fad4:	00bff7c4 	movi	r2,-33
8111fad8:	1884703a 	and	r2,r3,r2
8111fadc:	8080030d 	sth	r2,12(r16)
8111fae0:	1900010c 	andi	r4,r3,4
8111fae4:	2000061e 	bne	r4,zero,8111fb00 <_ungetc_r+0x8c>
8111fae8:	1900040c 	andi	r4,r3,16
8111faec:	20001d26 	beq	r4,zero,8111fb64 <_ungetc_r+0xf0>
8111faf0:	18c0020c 	andi	r3,r3,8
8111faf4:	1800331e 	bne	r3,zero,8111fbc4 <_ungetc_r+0x150>
8111faf8:	10800114 	ori	r2,r2,4
8111fafc:	8080030d 	sth	r2,12(r16)
8111fb00:	80800c17 	ldw	r2,48(r16)
8111fb04:	9c803fcc 	andi	r18,r19,255
8111fb08:	10001a26 	beq	r2,zero,8111fb74 <_ungetc_r+0x100>
8111fb0c:	80c00117 	ldw	r3,4(r16)
8111fb10:	80800d17 	ldw	r2,52(r16)
8111fb14:	18800f0e 	bge	r3,r2,8111fb54 <_ungetc_r+0xe0>
8111fb18:	80c00017 	ldw	r3,0(r16)
8111fb1c:	9005883a 	mov	r2,r18
8111fb20:	193fffc4 	addi	r4,r3,-1
8111fb24:	81000015 	stw	r4,0(r16)
8111fb28:	1cffffc5 	stb	r19,-1(r3)
8111fb2c:	80c00117 	ldw	r3,4(r16)
8111fb30:	18c00044 	addi	r3,r3,1
8111fb34:	80c00115 	stw	r3,4(r16)
8111fb38:	dfc00417 	ldw	ra,16(sp)
8111fb3c:	dcc00317 	ldw	r19,12(sp)
8111fb40:	dc800217 	ldw	r18,8(sp)
8111fb44:	dc400117 	ldw	r17,4(sp)
8111fb48:	dc000017 	ldw	r16,0(sp)
8111fb4c:	dec00504 	addi	sp,sp,20
8111fb50:	f800283a 	ret
8111fb54:	800b883a 	mov	r5,r16
8111fb58:	8809883a 	mov	r4,r17
8111fb5c:	111f9980 	call	8111f998 <__submore>
8111fb60:	103fed26 	beq	r2,zero,8111fb18 <__reset+0xfb0ffb18>
8111fb64:	00bfffc4 	movi	r2,-1
8111fb68:	003ff306 	br	8111fb38 <__reset+0xfb0ffb38>
8111fb6c:	11198f80 	call	811198f8 <__sinit>
8111fb70:	003fd006 	br	8111fab4 <__reset+0xfb0ffab4>
8111fb74:	80c00417 	ldw	r3,16(r16)
8111fb78:	80800017 	ldw	r2,0(r16)
8111fb7c:	18000326 	beq	r3,zero,8111fb8c <_ungetc_r+0x118>
8111fb80:	1880022e 	bgeu	r3,r2,8111fb8c <_ungetc_r+0x118>
8111fb84:	10ffffc3 	ldbu	r3,-1(r2)
8111fb88:	90c01826 	beq	r18,r3,8111fbec <_ungetc_r+0x178>
8111fb8c:	81400117 	ldw	r5,4(r16)
8111fb90:	80800e15 	stw	r2,56(r16)
8111fb94:	008000c4 	movi	r2,3
8111fb98:	81001004 	addi	r4,r16,64
8111fb9c:	80c01084 	addi	r3,r16,66
8111fba0:	80800d15 	stw	r2,52(r16)
8111fba4:	00800044 	movi	r2,1
8111fba8:	80800115 	stw	r2,4(r16)
8111fbac:	81400f15 	stw	r5,60(r16)
8111fbb0:	81000c15 	stw	r4,48(r16)
8111fbb4:	84c01085 	stb	r19,66(r16)
8111fbb8:	80c00015 	stw	r3,0(r16)
8111fbbc:	9005883a 	mov	r2,r18
8111fbc0:	003fdd06 	br	8111fb38 <__reset+0xfb0ffb38>
8111fbc4:	800b883a 	mov	r5,r16
8111fbc8:	8809883a 	mov	r4,r17
8111fbcc:	11194fc0 	call	811194fc <_fflush_r>
8111fbd0:	103fe41e 	bne	r2,zero,8111fb64 <__reset+0xfb0ffb64>
8111fbd4:	8080030b 	ldhu	r2,12(r16)
8111fbd8:	00fffdc4 	movi	r3,-9
8111fbdc:	80000215 	stw	zero,8(r16)
8111fbe0:	1884703a 	and	r2,r3,r2
8111fbe4:	80000615 	stw	zero,24(r16)
8111fbe8:	003fc306 	br	8111faf8 <__reset+0xfb0ffaf8>
8111fbec:	80c00117 	ldw	r3,4(r16)
8111fbf0:	10bfffc4 	addi	r2,r2,-1
8111fbf4:	80800015 	stw	r2,0(r16)
8111fbf8:	18800044 	addi	r2,r3,1
8111fbfc:	80800115 	stw	r2,4(r16)
8111fc00:	9005883a 	mov	r2,r18
8111fc04:	003fcc06 	br	8111fb38 <__reset+0xfb0ffb38>
8111fc08:	00bfffc4 	movi	r2,-1
8111fc0c:	f800283a 	ret

8111fc10 <ungetc>:
8111fc10:	00a04534 	movhi	r2,33044
8111fc14:	10ba0604 	addi	r2,r2,-6120
8111fc18:	280d883a 	mov	r6,r5
8111fc1c:	200b883a 	mov	r5,r4
8111fc20:	11000017 	ldw	r4,0(r2)
8111fc24:	111fa741 	jmpi	8111fa74 <_ungetc_r>

8111fc28 <__sprint_r.part.0>:
8111fc28:	defff604 	addi	sp,sp,-40
8111fc2c:	de00012e 	bgeu	sp,et,8111fc34 <__sprint_r.part.0+0xc>
8111fc30:	003b68fa 	trap	3
8111fc34:	28801917 	ldw	r2,100(r5)
8111fc38:	dd400515 	stw	r21,20(sp)
8111fc3c:	dfc00915 	stw	ra,36(sp)
8111fc40:	df000815 	stw	fp,32(sp)
8111fc44:	ddc00715 	stw	r23,28(sp)
8111fc48:	dd800615 	stw	r22,24(sp)
8111fc4c:	dd000415 	stw	r20,16(sp)
8111fc50:	dcc00315 	stw	r19,12(sp)
8111fc54:	dc800215 	stw	r18,8(sp)
8111fc58:	dc400115 	stw	r17,4(sp)
8111fc5c:	dc000015 	stw	r16,0(sp)
8111fc60:	1088000c 	andi	r2,r2,8192
8111fc64:	302b883a 	mov	r21,r6
8111fc68:	10002e26 	beq	r2,zero,8111fd24 <__sprint_r.part.0+0xfc>
8111fc6c:	30800217 	ldw	r2,8(r6)
8111fc70:	35800017 	ldw	r22,0(r6)
8111fc74:	10002926 	beq	r2,zero,8111fd1c <__sprint_r.part.0+0xf4>
8111fc78:	2827883a 	mov	r19,r5
8111fc7c:	2029883a 	mov	r20,r4
8111fc80:	b5c00104 	addi	r23,r22,4
8111fc84:	04bfffc4 	movi	r18,-1
8111fc88:	bc400017 	ldw	r17,0(r23)
8111fc8c:	b4000017 	ldw	r16,0(r22)
8111fc90:	0039883a 	mov	fp,zero
8111fc94:	8822d0ba 	srli	r17,r17,2
8111fc98:	8800031e 	bne	r17,zero,8111fca8 <__sprint_r.part.0+0x80>
8111fc9c:	00001806 	br	8111fd00 <__sprint_r.part.0+0xd8>
8111fca0:	84000104 	addi	r16,r16,4
8111fca4:	8f001526 	beq	r17,fp,8111fcfc <__sprint_r.part.0+0xd4>
8111fca8:	81400017 	ldw	r5,0(r16)
8111fcac:	980d883a 	mov	r6,r19
8111fcb0:	a009883a 	mov	r4,r20
8111fcb4:	11215cc0 	call	811215cc <_fputwc_r>
8111fcb8:	e7000044 	addi	fp,fp,1
8111fcbc:	14bff81e 	bne	r2,r18,8111fca0 <__reset+0xfb0ffca0>
8111fcc0:	9005883a 	mov	r2,r18
8111fcc4:	a8000215 	stw	zero,8(r21)
8111fcc8:	a8000115 	stw	zero,4(r21)
8111fccc:	dfc00917 	ldw	ra,36(sp)
8111fcd0:	df000817 	ldw	fp,32(sp)
8111fcd4:	ddc00717 	ldw	r23,28(sp)
8111fcd8:	dd800617 	ldw	r22,24(sp)
8111fcdc:	dd400517 	ldw	r21,20(sp)
8111fce0:	dd000417 	ldw	r20,16(sp)
8111fce4:	dcc00317 	ldw	r19,12(sp)
8111fce8:	dc800217 	ldw	r18,8(sp)
8111fcec:	dc400117 	ldw	r17,4(sp)
8111fcf0:	dc000017 	ldw	r16,0(sp)
8111fcf4:	dec00a04 	addi	sp,sp,40
8111fcf8:	f800283a 	ret
8111fcfc:	a8800217 	ldw	r2,8(r21)
8111fd00:	8c63883a 	add	r17,r17,r17
8111fd04:	8c63883a 	add	r17,r17,r17
8111fd08:	1445c83a 	sub	r2,r2,r17
8111fd0c:	a8800215 	stw	r2,8(r21)
8111fd10:	b5800204 	addi	r22,r22,8
8111fd14:	bdc00204 	addi	r23,r23,8
8111fd18:	103fdb1e 	bne	r2,zero,8111fc88 <__reset+0xfb0ffc88>
8111fd1c:	0005883a 	mov	r2,zero
8111fd20:	003fe806 	br	8111fcc4 <__reset+0xfb0ffcc4>
8111fd24:	111a0a80 	call	8111a0a8 <__sfvwrite_r>
8111fd28:	003fe606 	br	8111fcc4 <__reset+0xfb0ffcc4>

8111fd2c <__sprint_r>:
8111fd2c:	30c00217 	ldw	r3,8(r6)
8111fd30:	18000126 	beq	r3,zero,8111fd38 <__sprint_r+0xc>
8111fd34:	111fc281 	jmpi	8111fc28 <__sprint_r.part.0>
8111fd38:	30000115 	stw	zero,4(r6)
8111fd3c:	0005883a 	mov	r2,zero
8111fd40:	f800283a 	ret

8111fd44 <___vfiprintf_internal_r>:
8111fd44:	deffc904 	addi	sp,sp,-220
8111fd48:	de00012e 	bgeu	sp,et,8111fd50 <___vfiprintf_internal_r+0xc>
8111fd4c:	003b68fa 	trap	3
8111fd50:	df003515 	stw	fp,212(sp)
8111fd54:	dd003115 	stw	r20,196(sp)
8111fd58:	dfc03615 	stw	ra,216(sp)
8111fd5c:	ddc03415 	stw	r23,208(sp)
8111fd60:	dd803315 	stw	r22,204(sp)
8111fd64:	dd403215 	stw	r21,200(sp)
8111fd68:	dcc03015 	stw	r19,192(sp)
8111fd6c:	dc802f15 	stw	r18,188(sp)
8111fd70:	dc402e15 	stw	r17,184(sp)
8111fd74:	dc002d15 	stw	r16,180(sp)
8111fd78:	d9002015 	stw	r4,128(sp)
8111fd7c:	d9c02215 	stw	r7,136(sp)
8111fd80:	2829883a 	mov	r20,r5
8111fd84:	3039883a 	mov	fp,r6
8111fd88:	20000226 	beq	r4,zero,8111fd94 <___vfiprintf_internal_r+0x50>
8111fd8c:	20800e17 	ldw	r2,56(r4)
8111fd90:	1000cf26 	beq	r2,zero,811200d0 <___vfiprintf_internal_r+0x38c>
8111fd94:	a080030b 	ldhu	r2,12(r20)
8111fd98:	10c8000c 	andi	r3,r2,8192
8111fd9c:	1800061e 	bne	r3,zero,8111fdb8 <___vfiprintf_internal_r+0x74>
8111fda0:	a1001917 	ldw	r4,100(r20)
8111fda4:	00f7ffc4 	movi	r3,-8193
8111fda8:	10880014 	ori	r2,r2,8192
8111fdac:	20c6703a 	and	r3,r4,r3
8111fdb0:	a080030d 	sth	r2,12(r20)
8111fdb4:	a0c01915 	stw	r3,100(r20)
8111fdb8:	10c0020c 	andi	r3,r2,8
8111fdbc:	1800a926 	beq	r3,zero,81120064 <___vfiprintf_internal_r+0x320>
8111fdc0:	a0c00417 	ldw	r3,16(r20)
8111fdc4:	1800a726 	beq	r3,zero,81120064 <___vfiprintf_internal_r+0x320>
8111fdc8:	1080068c 	andi	r2,r2,26
8111fdcc:	00c00284 	movi	r3,10
8111fdd0:	10c0ac26 	beq	r2,r3,81120084 <___vfiprintf_internal_r+0x340>
8111fdd4:	da801a04 	addi	r10,sp,104
8111fdd8:	da801e15 	stw	r10,120(sp)
8111fddc:	d8801e17 	ldw	r2,120(sp)
8111fde0:	da8019c4 	addi	r10,sp,103
8111fde4:	05a04534 	movhi	r22,33044
8111fde8:	05e04534 	movhi	r23,33044
8111fdec:	da801f15 	stw	r10,124(sp)
8111fdf0:	1295c83a 	sub	r10,r2,r10
8111fdf4:	b5b19b04 	addi	r22,r22,-14740
8111fdf8:	bdf19704 	addi	r23,r23,-14756
8111fdfc:	dec01a15 	stw	sp,104(sp)
8111fe00:	d8001c15 	stw	zero,112(sp)
8111fe04:	d8001b15 	stw	zero,108(sp)
8111fe08:	d8002615 	stw	zero,152(sp)
8111fe0c:	d8002315 	stw	zero,140(sp)
8111fe10:	da802715 	stw	r10,156(sp)
8111fe14:	d811883a 	mov	r8,sp
8111fe18:	dd002115 	stw	r20,132(sp)
8111fe1c:	e021883a 	mov	r16,fp
8111fe20:	80800007 	ldb	r2,0(r16)
8111fe24:	1003ea26 	beq	r2,zero,81120dd0 <___vfiprintf_internal_r+0x108c>
8111fe28:	00c00944 	movi	r3,37
8111fe2c:	8025883a 	mov	r18,r16
8111fe30:	10c0021e 	bne	r2,r3,8111fe3c <___vfiprintf_internal_r+0xf8>
8111fe34:	00001606 	br	8111fe90 <___vfiprintf_internal_r+0x14c>
8111fe38:	10c00326 	beq	r2,r3,8111fe48 <___vfiprintf_internal_r+0x104>
8111fe3c:	94800044 	addi	r18,r18,1
8111fe40:	90800007 	ldb	r2,0(r18)
8111fe44:	103ffc1e 	bne	r2,zero,8111fe38 <__reset+0xfb0ffe38>
8111fe48:	9423c83a 	sub	r17,r18,r16
8111fe4c:	88001026 	beq	r17,zero,8111fe90 <___vfiprintf_internal_r+0x14c>
8111fe50:	d8c01c17 	ldw	r3,112(sp)
8111fe54:	d8801b17 	ldw	r2,108(sp)
8111fe58:	44000015 	stw	r16,0(r8)
8111fe5c:	88c7883a 	add	r3,r17,r3
8111fe60:	10800044 	addi	r2,r2,1
8111fe64:	44400115 	stw	r17,4(r8)
8111fe68:	d8c01c15 	stw	r3,112(sp)
8111fe6c:	d8801b15 	stw	r2,108(sp)
8111fe70:	010001c4 	movi	r4,7
8111fe74:	2080760e 	bge	r4,r2,81120050 <___vfiprintf_internal_r+0x30c>
8111fe78:	1803821e 	bne	r3,zero,81120c84 <___vfiprintf_internal_r+0xf40>
8111fe7c:	da802317 	ldw	r10,140(sp)
8111fe80:	d8001b15 	stw	zero,108(sp)
8111fe84:	d811883a 	mov	r8,sp
8111fe88:	5455883a 	add	r10,r10,r17
8111fe8c:	da802315 	stw	r10,140(sp)
8111fe90:	90800007 	ldb	r2,0(r18)
8111fe94:	10044626 	beq	r2,zero,81120fb0 <___vfiprintf_internal_r+0x126c>
8111fe98:	90c00047 	ldb	r3,1(r18)
8111fe9c:	94000044 	addi	r16,r18,1
8111fea0:	d8001d85 	stb	zero,118(sp)
8111fea4:	0009883a 	mov	r4,zero
8111fea8:	000f883a 	mov	r7,zero
8111feac:	027fffc4 	movi	r9,-1
8111feb0:	0023883a 	mov	r17,zero
8111feb4:	0029883a 	mov	r20,zero
8111feb8:	01401604 	movi	r5,88
8111febc:	01800244 	movi	r6,9
8111fec0:	03400a84 	movi	r13,42
8111fec4:	03001b04 	movi	r12,108
8111fec8:	84000044 	addi	r16,r16,1
8111fecc:	18bff804 	addi	r2,r3,-32
8111fed0:	28827336 	bltu	r5,r2,811208a0 <___vfiprintf_internal_r+0xb5c>
8111fed4:	100490ba 	slli	r2,r2,2
8111fed8:	02a044b4 	movhi	r10,33042
8111fedc:	52bfbb04 	addi	r10,r10,-276
8111fee0:	1285883a 	add	r2,r2,r10
8111fee4:	10800017 	ldw	r2,0(r2)
8111fee8:	1000683a 	jmp	r2
8111feec:	811205d4 	ori	r4,r16,18455
8111fef0:	811208a0 	cmpeqi	r4,r16,18466
8111fef4:	811208a0 	cmpeqi	r4,r16,18466
8111fef8:	811205f4 	orhi	r4,r16,18455
8111fefc:	811208a0 	cmpeqi	r4,r16,18466
8111ff00:	811208a0 	cmpeqi	r4,r16,18466
8111ff04:	811208a0 	cmpeqi	r4,r16,18466
8111ff08:	811208a0 	cmpeqi	r4,r16,18466
8111ff0c:	811208a0 	cmpeqi	r4,r16,18466
8111ff10:	811208a0 	cmpeqi	r4,r16,18466
8111ff14:	811207dc 	xori	r4,r16,18463
8111ff18:	811207f8 	rdprs	r4,r16,18463
8111ff1c:	811208a0 	cmpeqi	r4,r16,18466
8111ff20:	811200e0 	cmpeqi	r4,r16,18435
8111ff24:	81120808 	cmpgei	r4,r16,18464
8111ff28:	811208a0 	cmpeqi	r4,r16,18466
8111ff2c:	81120600 	call	88112060 <__reset+0x20f2060>
8111ff30:	8112060c 	andi	r4,r16,18456
8111ff34:	8112060c 	andi	r4,r16,18456
8111ff38:	8112060c 	andi	r4,r16,18456
8111ff3c:	8112060c 	andi	r4,r16,18456
8111ff40:	8112060c 	andi	r4,r16,18456
8111ff44:	8112060c 	andi	r4,r16,18456
8111ff48:	8112060c 	andi	r4,r16,18456
8111ff4c:	8112060c 	andi	r4,r16,18456
8111ff50:	8112060c 	andi	r4,r16,18456
8111ff54:	811208a0 	cmpeqi	r4,r16,18466
8111ff58:	811208a0 	cmpeqi	r4,r16,18466
8111ff5c:	811208a0 	cmpeqi	r4,r16,18466
8111ff60:	811208a0 	cmpeqi	r4,r16,18466
8111ff64:	811208a0 	cmpeqi	r4,r16,18466
8111ff68:	811208a0 	cmpeqi	r4,r16,18466
8111ff6c:	811208a0 	cmpeqi	r4,r16,18466
8111ff70:	811208a0 	cmpeqi	r4,r16,18466
8111ff74:	811208a0 	cmpeqi	r4,r16,18466
8111ff78:	811208a0 	cmpeqi	r4,r16,18466
8111ff7c:	81120638 	rdprs	r4,r16,18456
8111ff80:	811208a0 	cmpeqi	r4,r16,18466
8111ff84:	811208a0 	cmpeqi	r4,r16,18466
8111ff88:	811208a0 	cmpeqi	r4,r16,18466
8111ff8c:	811208a0 	cmpeqi	r4,r16,18466
8111ff90:	811208a0 	cmpeqi	r4,r16,18466
8111ff94:	811208a0 	cmpeqi	r4,r16,18466
8111ff98:	811208a0 	cmpeqi	r4,r16,18466
8111ff9c:	811208a0 	cmpeqi	r4,r16,18466
8111ffa0:	811208a0 	cmpeqi	r4,r16,18466
8111ffa4:	811208a0 	cmpeqi	r4,r16,18466
8111ffa8:	81120670 	cmpltui	r4,r16,18457
8111ffac:	811208a0 	cmpeqi	r4,r16,18466
8111ffb0:	811208a0 	cmpeqi	r4,r16,18466
8111ffb4:	811208a0 	cmpeqi	r4,r16,18466
8111ffb8:	811208a0 	cmpeqi	r4,r16,18466
8111ffbc:	811208a0 	cmpeqi	r4,r16,18466
8111ffc0:	811206c8 	cmpgei	r4,r16,18459
8111ffc4:	811208a0 	cmpeqi	r4,r16,18466
8111ffc8:	811208a0 	cmpeqi	r4,r16,18466
8111ffcc:	81120738 	rdprs	r4,r16,18460
8111ffd0:	811208a0 	cmpeqi	r4,r16,18466
8111ffd4:	811208a0 	cmpeqi	r4,r16,18466
8111ffd8:	811208a0 	cmpeqi	r4,r16,18466
8111ffdc:	811208a0 	cmpeqi	r4,r16,18466
8111ffe0:	811208a0 	cmpeqi	r4,r16,18466
8111ffe4:	811208a0 	cmpeqi	r4,r16,18466
8111ffe8:	811208a0 	cmpeqi	r4,r16,18466
8111ffec:	811208a0 	cmpeqi	r4,r16,18466
8111fff0:	811208a0 	cmpeqi	r4,r16,18466
8111fff4:	811208a0 	cmpeqi	r4,r16,18466
8111fff8:	811204e4 	muli	r4,r16,18451
8111fffc:	81120510 	cmplti	r4,r16,18452
81120000:	811208a0 	cmpeqi	r4,r16,18466
81120004:	811208a0 	cmpeqi	r4,r16,18466
81120008:	811208a0 	cmpeqi	r4,r16,18466
8112000c:	81120848 	cmpgei	r4,r16,18465
81120010:	81120510 	cmplti	r4,r16,18452
81120014:	811208a0 	cmpeqi	r4,r16,18466
81120018:	811208a0 	cmpeqi	r4,r16,18466
8112001c:	811203a4 	muli	r4,r16,18446
81120020:	811208a0 	cmpeqi	r4,r16,18466
81120024:	811203b4 	orhi	r4,r16,18446
81120028:	811203f0 	cmpltui	r4,r16,18447
8112002c:	811200ec 	andhi	r4,r16,18435
81120030:	81120398 	cmpnei	r4,r16,18446
81120034:	811208a0 	cmpeqi	r4,r16,18466
81120038:	81120774 	orhi	r4,r16,18461
8112003c:	811208a0 	cmpeqi	r4,r16,18466
81120040:	811207cc 	andi	r4,r16,18463
81120044:	811208a0 	cmpeqi	r4,r16,18466
81120048:	811208a0 	cmpeqi	r4,r16,18466
8112004c:	81120490 	cmplti	r4,r16,18450
81120050:	42000204 	addi	r8,r8,8
81120054:	da802317 	ldw	r10,140(sp)
81120058:	5455883a 	add	r10,r10,r17
8112005c:	da802315 	stw	r10,140(sp)
81120060:	003f8b06 	br	8111fe90 <__reset+0xfb0ffe90>
81120064:	d9002017 	ldw	r4,128(sp)
81120068:	a00b883a 	mov	r5,r20
8112006c:	11178880 	call	81117888 <__swsetup_r>
81120070:	1003b11e 	bne	r2,zero,81120f38 <___vfiprintf_internal_r+0x11f4>
81120074:	a080030b 	ldhu	r2,12(r20)
81120078:	00c00284 	movi	r3,10
8112007c:	1080068c 	andi	r2,r2,26
81120080:	10ff541e 	bne	r2,r3,8111fdd4 <__reset+0xfb0ffdd4>
81120084:	a080038f 	ldh	r2,14(r20)
81120088:	103f5216 	blt	r2,zero,8111fdd4 <__reset+0xfb0ffdd4>
8112008c:	d9c02217 	ldw	r7,136(sp)
81120090:	d9002017 	ldw	r4,128(sp)
81120094:	e00d883a 	mov	r6,fp
81120098:	a00b883a 	mov	r5,r20
8112009c:	11211c40 	call	811211c4 <__sbprintf>
811200a0:	dfc03617 	ldw	ra,216(sp)
811200a4:	df003517 	ldw	fp,212(sp)
811200a8:	ddc03417 	ldw	r23,208(sp)
811200ac:	dd803317 	ldw	r22,204(sp)
811200b0:	dd403217 	ldw	r21,200(sp)
811200b4:	dd003117 	ldw	r20,196(sp)
811200b8:	dcc03017 	ldw	r19,192(sp)
811200bc:	dc802f17 	ldw	r18,188(sp)
811200c0:	dc402e17 	ldw	r17,184(sp)
811200c4:	dc002d17 	ldw	r16,180(sp)
811200c8:	dec03704 	addi	sp,sp,220
811200cc:	f800283a 	ret
811200d0:	11198f80 	call	811198f8 <__sinit>
811200d4:	003f2f06 	br	8111fd94 <__reset+0xfb0ffd94>
811200d8:	0463c83a 	sub	r17,zero,r17
811200dc:	d8802215 	stw	r2,136(sp)
811200e0:	a5000114 	ori	r20,r20,4
811200e4:	80c00007 	ldb	r3,0(r16)
811200e8:	003f7706 	br	8111fec8 <__reset+0xfb0ffec8>
811200ec:	00800c04 	movi	r2,48
811200f0:	da802217 	ldw	r10,136(sp)
811200f4:	d8801d05 	stb	r2,116(sp)
811200f8:	00801e04 	movi	r2,120
811200fc:	d8801d45 	stb	r2,117(sp)
81120100:	d8001d85 	stb	zero,118(sp)
81120104:	50c00104 	addi	r3,r10,4
81120108:	54800017 	ldw	r18,0(r10)
8112010c:	0027883a 	mov	r19,zero
81120110:	a0800094 	ori	r2,r20,2
81120114:	48030b16 	blt	r9,zero,81120d44 <___vfiprintf_internal_r+0x1000>
81120118:	00bfdfc4 	movi	r2,-129
8112011c:	a096703a 	and	r11,r20,r2
81120120:	d8c02215 	stw	r3,136(sp)
81120124:	5d000094 	ori	r20,r11,2
81120128:	90032b1e 	bne	r18,zero,81120dd8 <___vfiprintf_internal_r+0x1094>
8112012c:	00a04534 	movhi	r2,33044
81120130:	10b10504 	addi	r2,r2,-15340
81120134:	d8802615 	stw	r2,152(sp)
81120138:	0039883a 	mov	fp,zero
8112013c:	48017b1e 	bne	r9,zero,8112072c <___vfiprintf_internal_r+0x9e8>
81120140:	0013883a 	mov	r9,zero
81120144:	0027883a 	mov	r19,zero
81120148:	dd401a04 	addi	r21,sp,104
8112014c:	4825883a 	mov	r18,r9
81120150:	4cc0010e 	bge	r9,r19,81120158 <___vfiprintf_internal_r+0x414>
81120154:	9825883a 	mov	r18,r19
81120158:	e7003fcc 	andi	fp,fp,255
8112015c:	e700201c 	xori	fp,fp,128
81120160:	e73fe004 	addi	fp,fp,-128
81120164:	e0000126 	beq	fp,zero,8112016c <___vfiprintf_internal_r+0x428>
81120168:	94800044 	addi	r18,r18,1
8112016c:	a380008c 	andi	r14,r20,2
81120170:	70000126 	beq	r14,zero,81120178 <___vfiprintf_internal_r+0x434>
81120174:	94800084 	addi	r18,r18,2
81120178:	a700210c 	andi	fp,r20,132
8112017c:	e001df1e 	bne	fp,zero,811208fc <___vfiprintf_internal_r+0xbb8>
81120180:	8c87c83a 	sub	r3,r17,r18
81120184:	00c1dd0e 	bge	zero,r3,811208fc <___vfiprintf_internal_r+0xbb8>
81120188:	01c00404 	movi	r7,16
8112018c:	d8801c17 	ldw	r2,112(sp)
81120190:	38c3ad0e 	bge	r7,r3,81121048 <___vfiprintf_internal_r+0x1304>
81120194:	02a04534 	movhi	r10,33044
81120198:	52b19b04 	addi	r10,r10,-14740
8112019c:	dc002915 	stw	r16,164(sp)
811201a0:	d9801b17 	ldw	r6,108(sp)
811201a4:	da802415 	stw	r10,144(sp)
811201a8:	03c001c4 	movi	r15,7
811201ac:	da402515 	stw	r9,148(sp)
811201b0:	db802815 	stw	r14,160(sp)
811201b4:	1821883a 	mov	r16,r3
811201b8:	00000506 	br	811201d0 <___vfiprintf_internal_r+0x48c>
811201bc:	31400084 	addi	r5,r6,2
811201c0:	42000204 	addi	r8,r8,8
811201c4:	200d883a 	mov	r6,r4
811201c8:	843ffc04 	addi	r16,r16,-16
811201cc:	3c000d0e 	bge	r7,r16,81120204 <___vfiprintf_internal_r+0x4c0>
811201d0:	10800404 	addi	r2,r2,16
811201d4:	31000044 	addi	r4,r6,1
811201d8:	45800015 	stw	r22,0(r8)
811201dc:	41c00115 	stw	r7,4(r8)
811201e0:	d8801c15 	stw	r2,112(sp)
811201e4:	d9001b15 	stw	r4,108(sp)
811201e8:	793ff40e 	bge	r15,r4,811201bc <__reset+0xfb1001bc>
811201ec:	1001b51e 	bne	r2,zero,811208c4 <___vfiprintf_internal_r+0xb80>
811201f0:	843ffc04 	addi	r16,r16,-16
811201f4:	000d883a 	mov	r6,zero
811201f8:	01400044 	movi	r5,1
811201fc:	d811883a 	mov	r8,sp
81120200:	3c3ff316 	blt	r7,r16,811201d0 <__reset+0xfb1001d0>
81120204:	8007883a 	mov	r3,r16
81120208:	da402517 	ldw	r9,148(sp)
8112020c:	db802817 	ldw	r14,160(sp)
81120210:	dc002917 	ldw	r16,164(sp)
81120214:	da802417 	ldw	r10,144(sp)
81120218:	1885883a 	add	r2,r3,r2
8112021c:	40c00115 	stw	r3,4(r8)
81120220:	42800015 	stw	r10,0(r8)
81120224:	d8801c15 	stw	r2,112(sp)
81120228:	d9401b15 	stw	r5,108(sp)
8112022c:	00c001c4 	movi	r3,7
81120230:	19426016 	blt	r3,r5,81120bb4 <___vfiprintf_internal_r+0xe70>
81120234:	d8c01d87 	ldb	r3,118(sp)
81120238:	42000204 	addi	r8,r8,8
8112023c:	29000044 	addi	r4,r5,1
81120240:	1801b31e 	bne	r3,zero,81120910 <___vfiprintf_internal_r+0xbcc>
81120244:	7001c026 	beq	r14,zero,81120948 <___vfiprintf_internal_r+0xc04>
81120248:	d8c01d04 	addi	r3,sp,116
8112024c:	10800084 	addi	r2,r2,2
81120250:	40c00015 	stw	r3,0(r8)
81120254:	00c00084 	movi	r3,2
81120258:	40c00115 	stw	r3,4(r8)
8112025c:	d8801c15 	stw	r2,112(sp)
81120260:	d9001b15 	stw	r4,108(sp)
81120264:	00c001c4 	movi	r3,7
81120268:	1902650e 	bge	r3,r4,81120c00 <___vfiprintf_internal_r+0xebc>
8112026c:	10029a1e 	bne	r2,zero,81120cd8 <___vfiprintf_internal_r+0xf94>
81120270:	00c02004 	movi	r3,128
81120274:	01000044 	movi	r4,1
81120278:	000b883a 	mov	r5,zero
8112027c:	d811883a 	mov	r8,sp
81120280:	e0c1b31e 	bne	fp,r3,81120950 <___vfiprintf_internal_r+0xc0c>
81120284:	8cb9c83a 	sub	fp,r17,r18
81120288:	0701b10e 	bge	zero,fp,81120950 <___vfiprintf_internal_r+0xc0c>
8112028c:	01c00404 	movi	r7,16
81120290:	3f03890e 	bge	r7,fp,811210b8 <___vfiprintf_internal_r+0x1374>
81120294:	00e04534 	movhi	r3,33044
81120298:	18f19704 	addi	r3,r3,-14756
8112029c:	d8c02415 	stw	r3,144(sp)
811202a0:	8007883a 	mov	r3,r16
811202a4:	034001c4 	movi	r13,7
811202a8:	e021883a 	mov	r16,fp
811202ac:	da402515 	stw	r9,148(sp)
811202b0:	1839883a 	mov	fp,r3
811202b4:	00000506 	br	811202cc <___vfiprintf_internal_r+0x588>
811202b8:	29800084 	addi	r6,r5,2
811202bc:	42000204 	addi	r8,r8,8
811202c0:	180b883a 	mov	r5,r3
811202c4:	843ffc04 	addi	r16,r16,-16
811202c8:	3c000d0e 	bge	r7,r16,81120300 <___vfiprintf_internal_r+0x5bc>
811202cc:	10800404 	addi	r2,r2,16
811202d0:	28c00044 	addi	r3,r5,1
811202d4:	45c00015 	stw	r23,0(r8)
811202d8:	41c00115 	stw	r7,4(r8)
811202dc:	d8801c15 	stw	r2,112(sp)
811202e0:	d8c01b15 	stw	r3,108(sp)
811202e4:	68fff40e 	bge	r13,r3,811202b8 <__reset+0xfb1002b8>
811202e8:	1002241e 	bne	r2,zero,81120b7c <___vfiprintf_internal_r+0xe38>
811202ec:	843ffc04 	addi	r16,r16,-16
811202f0:	01800044 	movi	r6,1
811202f4:	000b883a 	mov	r5,zero
811202f8:	d811883a 	mov	r8,sp
811202fc:	3c3ff316 	blt	r7,r16,811202cc <__reset+0xfb1002cc>
81120300:	da402517 	ldw	r9,148(sp)
81120304:	e007883a 	mov	r3,fp
81120308:	8039883a 	mov	fp,r16
8112030c:	1821883a 	mov	r16,r3
81120310:	d8c02417 	ldw	r3,144(sp)
81120314:	1705883a 	add	r2,r2,fp
81120318:	47000115 	stw	fp,4(r8)
8112031c:	40c00015 	stw	r3,0(r8)
81120320:	d8801c15 	stw	r2,112(sp)
81120324:	d9801b15 	stw	r6,108(sp)
81120328:	00c001c4 	movi	r3,7
8112032c:	19827616 	blt	r3,r6,81120d08 <___vfiprintf_internal_r+0xfc4>
81120330:	4cf9c83a 	sub	fp,r9,r19
81120334:	42000204 	addi	r8,r8,8
81120338:	31000044 	addi	r4,r6,1
8112033c:	300b883a 	mov	r5,r6
81120340:	07018516 	blt	zero,fp,81120958 <___vfiprintf_internal_r+0xc14>
81120344:	9885883a 	add	r2,r19,r2
81120348:	45400015 	stw	r21,0(r8)
8112034c:	44c00115 	stw	r19,4(r8)
81120350:	d8801c15 	stw	r2,112(sp)
81120354:	d9001b15 	stw	r4,108(sp)
81120358:	00c001c4 	movi	r3,7
8112035c:	1901dd0e 	bge	r3,r4,81120ad4 <___vfiprintf_internal_r+0xd90>
81120360:	1002401e 	bne	r2,zero,81120c64 <___vfiprintf_internal_r+0xf20>
81120364:	d8001b15 	stw	zero,108(sp)
81120368:	a2c0010c 	andi	r11,r20,4
8112036c:	58000226 	beq	r11,zero,81120378 <___vfiprintf_internal_r+0x634>
81120370:	8ca7c83a 	sub	r19,r17,r18
81120374:	04c2f216 	blt	zero,r19,81120f40 <___vfiprintf_internal_r+0x11fc>
81120378:	8c80010e 	bge	r17,r18,81120380 <___vfiprintf_internal_r+0x63c>
8112037c:	9023883a 	mov	r17,r18
81120380:	da802317 	ldw	r10,140(sp)
81120384:	5455883a 	add	r10,r10,r17
81120388:	da802315 	stw	r10,140(sp)
8112038c:	d8001b15 	stw	zero,108(sp)
81120390:	d811883a 	mov	r8,sp
81120394:	003ea206 	br	8111fe20 <__reset+0xfb0ffe20>
81120398:	a5000814 	ori	r20,r20,32
8112039c:	80c00007 	ldb	r3,0(r16)
811203a0:	003ec906 	br	8111fec8 <__reset+0xfb0ffec8>
811203a4:	80c00007 	ldb	r3,0(r16)
811203a8:	1b030926 	beq	r3,r12,81120fd0 <___vfiprintf_internal_r+0x128c>
811203ac:	a5000414 	ori	r20,r20,16
811203b0:	003ec506 	br	8111fec8 <__reset+0xfb0ffec8>
811203b4:	21003fcc 	andi	r4,r4,255
811203b8:	20035e1e 	bne	r4,zero,81121134 <___vfiprintf_internal_r+0x13f0>
811203bc:	a080080c 	andi	r2,r20,32
811203c0:	1002a526 	beq	r2,zero,81120e58 <___vfiprintf_internal_r+0x1114>
811203c4:	da802217 	ldw	r10,136(sp)
811203c8:	50800017 	ldw	r2,0(r10)
811203cc:	da802317 	ldw	r10,140(sp)
811203d0:	5007d7fa 	srai	r3,r10,31
811203d4:	da802217 	ldw	r10,136(sp)
811203d8:	10c00115 	stw	r3,4(r2)
811203dc:	52800104 	addi	r10,r10,4
811203e0:	da802215 	stw	r10,136(sp)
811203e4:	da802317 	ldw	r10,140(sp)
811203e8:	12800015 	stw	r10,0(r2)
811203ec:	003e8c06 	br	8111fe20 <__reset+0xfb0ffe20>
811203f0:	21003fcc 	andi	r4,r4,255
811203f4:	2003511e 	bne	r4,zero,8112113c <___vfiprintf_internal_r+0x13f8>
811203f8:	a080080c 	andi	r2,r20,32
811203fc:	1000a126 	beq	r2,zero,81120684 <___vfiprintf_internal_r+0x940>
81120400:	da802217 	ldw	r10,136(sp)
81120404:	d8001d85 	stb	zero,118(sp)
81120408:	50800204 	addi	r2,r10,8
8112040c:	54800017 	ldw	r18,0(r10)
81120410:	54c00117 	ldw	r19,4(r10)
81120414:	4802b416 	blt	r9,zero,81120ee8 <___vfiprintf_internal_r+0x11a4>
81120418:	013fdfc4 	movi	r4,-129
8112041c:	94c6b03a 	or	r3,r18,r19
81120420:	d8802215 	stw	r2,136(sp)
81120424:	a128703a 	and	r20,r20,r4
81120428:	1800a226 	beq	r3,zero,811206b4 <___vfiprintf_internal_r+0x970>
8112042c:	0039883a 	mov	fp,zero
81120430:	dd401a04 	addi	r21,sp,104
81120434:	9006d0fa 	srli	r3,r18,3
81120438:	9808977a 	slli	r4,r19,29
8112043c:	9826d0fa 	srli	r19,r19,3
81120440:	948001cc 	andi	r18,r18,7
81120444:	90800c04 	addi	r2,r18,48
81120448:	ad7fffc4 	addi	r21,r21,-1
8112044c:	20e4b03a 	or	r18,r4,r3
81120450:	a8800005 	stb	r2,0(r21)
81120454:	94c6b03a 	or	r3,r18,r19
81120458:	183ff61e 	bne	r3,zero,81120434 <__reset+0xfb100434>
8112045c:	a0c0004c 	andi	r3,r20,1
81120460:	18005926 	beq	r3,zero,811205c8 <___vfiprintf_internal_r+0x884>
81120464:	10803fcc 	andi	r2,r2,255
81120468:	1080201c 	xori	r2,r2,128
8112046c:	10bfe004 	addi	r2,r2,-128
81120470:	00c00c04 	movi	r3,48
81120474:	10c05426 	beq	r2,r3,811205c8 <___vfiprintf_internal_r+0x884>
81120478:	da801e17 	ldw	r10,120(sp)
8112047c:	a8bfffc4 	addi	r2,r21,-1
81120480:	a8ffffc5 	stb	r3,-1(r21)
81120484:	50a7c83a 	sub	r19,r10,r2
81120488:	102b883a 	mov	r21,r2
8112048c:	003f2f06 	br	8112014c <__reset+0xfb10014c>
81120490:	21003fcc 	andi	r4,r4,255
81120494:	2003421e 	bne	r4,zero,811211a0 <___vfiprintf_internal_r+0x145c>
81120498:	00a04534 	movhi	r2,33044
8112049c:	10b10504 	addi	r2,r2,-15340
811204a0:	d8802615 	stw	r2,152(sp)
811204a4:	a080080c 	andi	r2,r20,32
811204a8:	1000aa26 	beq	r2,zero,81120754 <___vfiprintf_internal_r+0xa10>
811204ac:	da802217 	ldw	r10,136(sp)
811204b0:	54800017 	ldw	r18,0(r10)
811204b4:	54c00117 	ldw	r19,4(r10)
811204b8:	52800204 	addi	r10,r10,8
811204bc:	da802215 	stw	r10,136(sp)
811204c0:	a080004c 	andi	r2,r20,1
811204c4:	1001d226 	beq	r2,zero,81120c10 <___vfiprintf_internal_r+0xecc>
811204c8:	94c4b03a 	or	r2,r18,r19
811204cc:	1002351e 	bne	r2,zero,81120da4 <___vfiprintf_internal_r+0x1060>
811204d0:	d8001d85 	stb	zero,118(sp)
811204d4:	48022216 	blt	r9,zero,81120d60 <___vfiprintf_internal_r+0x101c>
811204d8:	00bfdfc4 	movi	r2,-129
811204dc:	a0a8703a 	and	r20,r20,r2
811204e0:	003f1506 	br	81120138 <__reset+0xfb100138>
811204e4:	da802217 	ldw	r10,136(sp)
811204e8:	04800044 	movi	r18,1
811204ec:	d8001d85 	stb	zero,118(sp)
811204f0:	50800017 	ldw	r2,0(r10)
811204f4:	52800104 	addi	r10,r10,4
811204f8:	da802215 	stw	r10,136(sp)
811204fc:	d8801005 	stb	r2,64(sp)
81120500:	9027883a 	mov	r19,r18
81120504:	dd401004 	addi	r21,sp,64
81120508:	0013883a 	mov	r9,zero
8112050c:	003f1706 	br	8112016c <__reset+0xfb10016c>
81120510:	21003fcc 	andi	r4,r4,255
81120514:	2003201e 	bne	r4,zero,81121198 <___vfiprintf_internal_r+0x1454>
81120518:	a080080c 	andi	r2,r20,32
8112051c:	10004b26 	beq	r2,zero,8112064c <___vfiprintf_internal_r+0x908>
81120520:	da802217 	ldw	r10,136(sp)
81120524:	50800117 	ldw	r2,4(r10)
81120528:	54800017 	ldw	r18,0(r10)
8112052c:	52800204 	addi	r10,r10,8
81120530:	da802215 	stw	r10,136(sp)
81120534:	1027883a 	mov	r19,r2
81120538:	10022c16 	blt	r2,zero,81120dec <___vfiprintf_internal_r+0x10a8>
8112053c:	df001d83 	ldbu	fp,118(sp)
81120540:	48007216 	blt	r9,zero,8112070c <___vfiprintf_internal_r+0x9c8>
81120544:	00ffdfc4 	movi	r3,-129
81120548:	94c4b03a 	or	r2,r18,r19
8112054c:	a0e8703a 	and	r20,r20,r3
81120550:	1000cc26 	beq	r2,zero,81120884 <___vfiprintf_internal_r+0xb40>
81120554:	98021026 	beq	r19,zero,81120d98 <___vfiprintf_internal_r+0x1054>
81120558:	dc402415 	stw	r17,144(sp)
8112055c:	dc002515 	stw	r16,148(sp)
81120560:	9823883a 	mov	r17,r19
81120564:	9021883a 	mov	r16,r18
81120568:	dd401a04 	addi	r21,sp,104
8112056c:	4825883a 	mov	r18,r9
81120570:	4027883a 	mov	r19,r8
81120574:	8009883a 	mov	r4,r16
81120578:	880b883a 	mov	r5,r17
8112057c:	01800284 	movi	r6,10
81120580:	000f883a 	mov	r7,zero
81120584:	1122c400 	call	81122c40 <__umoddi3>
81120588:	10800c04 	addi	r2,r2,48
8112058c:	ad7fffc4 	addi	r21,r21,-1
81120590:	8009883a 	mov	r4,r16
81120594:	880b883a 	mov	r5,r17
81120598:	a8800005 	stb	r2,0(r21)
8112059c:	01800284 	movi	r6,10
811205a0:	000f883a 	mov	r7,zero
811205a4:	11226c00 	call	811226c0 <__udivdi3>
811205a8:	1021883a 	mov	r16,r2
811205ac:	10c4b03a 	or	r2,r2,r3
811205b0:	1823883a 	mov	r17,r3
811205b4:	103fef1e 	bne	r2,zero,81120574 <__reset+0xfb100574>
811205b8:	dc402417 	ldw	r17,144(sp)
811205bc:	dc002517 	ldw	r16,148(sp)
811205c0:	9013883a 	mov	r9,r18
811205c4:	9811883a 	mov	r8,r19
811205c8:	da801e17 	ldw	r10,120(sp)
811205cc:	5567c83a 	sub	r19,r10,r21
811205d0:	003ede06 	br	8112014c <__reset+0xfb10014c>
811205d4:	38803fcc 	andi	r2,r7,255
811205d8:	1080201c 	xori	r2,r2,128
811205dc:	10bfe004 	addi	r2,r2,-128
811205e0:	1002371e 	bne	r2,zero,81120ec0 <___vfiprintf_internal_r+0x117c>
811205e4:	01000044 	movi	r4,1
811205e8:	01c00804 	movi	r7,32
811205ec:	80c00007 	ldb	r3,0(r16)
811205f0:	003e3506 	br	8111fec8 <__reset+0xfb0ffec8>
811205f4:	a5000054 	ori	r20,r20,1
811205f8:	80c00007 	ldb	r3,0(r16)
811205fc:	003e3206 	br	8111fec8 <__reset+0xfb0ffec8>
81120600:	a5002014 	ori	r20,r20,128
81120604:	80c00007 	ldb	r3,0(r16)
81120608:	003e2f06 	br	8111fec8 <__reset+0xfb0ffec8>
8112060c:	8015883a 	mov	r10,r16
81120610:	0023883a 	mov	r17,zero
81120614:	18bff404 	addi	r2,r3,-48
81120618:	50c00007 	ldb	r3,0(r10)
8112061c:	8c4002a4 	muli	r17,r17,10
81120620:	84000044 	addi	r16,r16,1
81120624:	8015883a 	mov	r10,r16
81120628:	1463883a 	add	r17,r2,r17
8112062c:	18bff404 	addi	r2,r3,-48
81120630:	30bff92e 	bgeu	r6,r2,81120618 <__reset+0xfb100618>
81120634:	003e2506 	br	8111fecc <__reset+0xfb0ffecc>
81120638:	21003fcc 	andi	r4,r4,255
8112063c:	2002d41e 	bne	r4,zero,81121190 <___vfiprintf_internal_r+0x144c>
81120640:	a5000414 	ori	r20,r20,16
81120644:	a080080c 	andi	r2,r20,32
81120648:	103fb51e 	bne	r2,zero,81120520 <__reset+0xfb100520>
8112064c:	a080040c 	andi	r2,r20,16
81120650:	1001f826 	beq	r2,zero,81120e34 <___vfiprintf_internal_r+0x10f0>
81120654:	da802217 	ldw	r10,136(sp)
81120658:	54800017 	ldw	r18,0(r10)
8112065c:	52800104 	addi	r10,r10,4
81120660:	da802215 	stw	r10,136(sp)
81120664:	9027d7fa 	srai	r19,r18,31
81120668:	9805883a 	mov	r2,r19
8112066c:	003fb206 	br	81120538 <__reset+0xfb100538>
81120670:	21003fcc 	andi	r4,r4,255
81120674:	2002c41e 	bne	r4,zero,81121188 <___vfiprintf_internal_r+0x1444>
81120678:	a5000414 	ori	r20,r20,16
8112067c:	a080080c 	andi	r2,r20,32
81120680:	103f5f1e 	bne	r2,zero,81120400 <__reset+0xfb100400>
81120684:	a080040c 	andi	r2,r20,16
81120688:	10020f26 	beq	r2,zero,81120ec8 <___vfiprintf_internal_r+0x1184>
8112068c:	da802217 	ldw	r10,136(sp)
81120690:	d8001d85 	stb	zero,118(sp)
81120694:	0027883a 	mov	r19,zero
81120698:	50800104 	addi	r2,r10,4
8112069c:	54800017 	ldw	r18,0(r10)
811206a0:	48021116 	blt	r9,zero,81120ee8 <___vfiprintf_internal_r+0x11a4>
811206a4:	00ffdfc4 	movi	r3,-129
811206a8:	d8802215 	stw	r2,136(sp)
811206ac:	a0e8703a 	and	r20,r20,r3
811206b0:	903f5e1e 	bne	r18,zero,8112042c <__reset+0xfb10042c>
811206b4:	0039883a 	mov	fp,zero
811206b8:	4802a626 	beq	r9,zero,81121154 <___vfiprintf_internal_r+0x1410>
811206bc:	0025883a 	mov	r18,zero
811206c0:	0027883a 	mov	r19,zero
811206c4:	003f5a06 	br	81120430 <__reset+0xfb100430>
811206c8:	21003fcc 	andi	r4,r4,255
811206cc:	20029f1e 	bne	r4,zero,8112114c <___vfiprintf_internal_r+0x1408>
811206d0:	a5000414 	ori	r20,r20,16
811206d4:	a080080c 	andi	r2,r20,32
811206d8:	10005e1e 	bne	r2,zero,81120854 <___vfiprintf_internal_r+0xb10>
811206dc:	a080040c 	andi	r2,r20,16
811206e0:	1001a21e 	bne	r2,zero,81120d6c <___vfiprintf_internal_r+0x1028>
811206e4:	a080100c 	andi	r2,r20,64
811206e8:	d8001d85 	stb	zero,118(sp)
811206ec:	da802217 	ldw	r10,136(sp)
811206f0:	1002231e 	bne	r2,zero,81120f80 <___vfiprintf_internal_r+0x123c>
811206f4:	50800104 	addi	r2,r10,4
811206f8:	54800017 	ldw	r18,0(r10)
811206fc:	0027883a 	mov	r19,zero
81120700:	4801a00e 	bge	r9,zero,81120d84 <___vfiprintf_internal_r+0x1040>
81120704:	d8802215 	stw	r2,136(sp)
81120708:	0039883a 	mov	fp,zero
8112070c:	94c4b03a 	or	r2,r18,r19
81120710:	103f901e 	bne	r2,zero,81120554 <__reset+0xfb100554>
81120714:	00800044 	movi	r2,1
81120718:	10803fcc 	andi	r2,r2,255
8112071c:	00c00044 	movi	r3,1
81120720:	10c05926 	beq	r2,r3,81120888 <___vfiprintf_internal_r+0xb44>
81120724:	00c00084 	movi	r3,2
81120728:	10ffe41e 	bne	r2,r3,811206bc <__reset+0xfb1006bc>
8112072c:	0025883a 	mov	r18,zero
81120730:	0027883a 	mov	r19,zero
81120734:	00013d06 	br	81120c2c <___vfiprintf_internal_r+0xee8>
81120738:	21003fcc 	andi	r4,r4,255
8112073c:	2002811e 	bne	r4,zero,81121144 <___vfiprintf_internal_r+0x1400>
81120740:	00a04534 	movhi	r2,33044
81120744:	10b10004 	addi	r2,r2,-15360
81120748:	d8802615 	stw	r2,152(sp)
8112074c:	a080080c 	andi	r2,r20,32
81120750:	103f561e 	bne	r2,zero,811204ac <__reset+0xfb1004ac>
81120754:	a080040c 	andi	r2,r20,16
81120758:	1001d126 	beq	r2,zero,81120ea0 <___vfiprintf_internal_r+0x115c>
8112075c:	da802217 	ldw	r10,136(sp)
81120760:	0027883a 	mov	r19,zero
81120764:	54800017 	ldw	r18,0(r10)
81120768:	52800104 	addi	r10,r10,4
8112076c:	da802215 	stw	r10,136(sp)
81120770:	003f5306 	br	811204c0 <__reset+0xfb1004c0>
81120774:	da802217 	ldw	r10,136(sp)
81120778:	d8001d85 	stb	zero,118(sp)
8112077c:	55400017 	ldw	r21,0(r10)
81120780:	50c00104 	addi	r3,r10,4
81120784:	a8024226 	beq	r21,zero,81121090 <___vfiprintf_internal_r+0x134c>
81120788:	48021816 	blt	r9,zero,81120fec <___vfiprintf_internal_r+0x12a8>
8112078c:	480d883a 	mov	r6,r9
81120790:	000b883a 	mov	r5,zero
81120794:	a809883a 	mov	r4,r21
81120798:	d8c02a15 	stw	r3,168(sp)
8112079c:	da002b15 	stw	r8,172(sp)
811207a0:	da402c15 	stw	r9,176(sp)
811207a4:	111ab200 	call	8111ab20 <memchr>
811207a8:	d8c02a17 	ldw	r3,168(sp)
811207ac:	da002b17 	ldw	r8,172(sp)
811207b0:	da402c17 	ldw	r9,176(sp)
811207b4:	10024826 	beq	r2,zero,811210d8 <___vfiprintf_internal_r+0x1394>
811207b8:	1567c83a 	sub	r19,r2,r21
811207bc:	df001d83 	ldbu	fp,118(sp)
811207c0:	d8c02215 	stw	r3,136(sp)
811207c4:	0013883a 	mov	r9,zero
811207c8:	003e6006 	br	8112014c <__reset+0xfb10014c>
811207cc:	21003fcc 	andi	r4,r4,255
811207d0:	203fc026 	beq	r4,zero,811206d4 <__reset+0xfb1006d4>
811207d4:	d9c01d85 	stb	r7,118(sp)
811207d8:	003fbe06 	br	811206d4 <__reset+0xfb1006d4>
811207dc:	da802217 	ldw	r10,136(sp)
811207e0:	54400017 	ldw	r17,0(r10)
811207e4:	50800104 	addi	r2,r10,4
811207e8:	883e3b16 	blt	r17,zero,811200d8 <__reset+0xfb1000d8>
811207ec:	d8802215 	stw	r2,136(sp)
811207f0:	80c00007 	ldb	r3,0(r16)
811207f4:	003db406 	br	8111fec8 <__reset+0xfb0ffec8>
811207f8:	01000044 	movi	r4,1
811207fc:	01c00ac4 	movi	r7,43
81120800:	80c00007 	ldb	r3,0(r16)
81120804:	003db006 	br	8111fec8 <__reset+0xfb0ffec8>
81120808:	80c00007 	ldb	r3,0(r16)
8112080c:	82800044 	addi	r10,r16,1
81120810:	1b423c26 	beq	r3,r13,81121104 <___vfiprintf_internal_r+0x13c0>
81120814:	18bff404 	addi	r2,r3,-48
81120818:	0013883a 	mov	r9,zero
8112081c:	30822b36 	bltu	r6,r2,811210cc <___vfiprintf_internal_r+0x1388>
81120820:	50c00007 	ldb	r3,0(r10)
81120824:	4a4002a4 	muli	r9,r9,10
81120828:	54000044 	addi	r16,r10,1
8112082c:	8015883a 	mov	r10,r16
81120830:	4893883a 	add	r9,r9,r2
81120834:	18bff404 	addi	r2,r3,-48
81120838:	30bff92e 	bgeu	r6,r2,81120820 <__reset+0xfb100820>
8112083c:	483da30e 	bge	r9,zero,8111fecc <__reset+0xfb0ffecc>
81120840:	027fffc4 	movi	r9,-1
81120844:	003da106 	br	8111fecc <__reset+0xfb0ffecc>
81120848:	a5001014 	ori	r20,r20,64
8112084c:	80c00007 	ldb	r3,0(r16)
81120850:	003d9d06 	br	8111fec8 <__reset+0xfb0ffec8>
81120854:	da802217 	ldw	r10,136(sp)
81120858:	d8001d85 	stb	zero,118(sp)
8112085c:	50c00204 	addi	r3,r10,8
81120860:	54800017 	ldw	r18,0(r10)
81120864:	54c00117 	ldw	r19,4(r10)
81120868:	4801ca16 	blt	r9,zero,81120f94 <___vfiprintf_internal_r+0x1250>
8112086c:	013fdfc4 	movi	r4,-129
81120870:	94c4b03a 	or	r2,r18,r19
81120874:	d8c02215 	stw	r3,136(sp)
81120878:	a128703a 	and	r20,r20,r4
8112087c:	0039883a 	mov	fp,zero
81120880:	103f341e 	bne	r2,zero,81120554 <__reset+0xfb100554>
81120884:	483e2e26 	beq	r9,zero,81120140 <__reset+0xfb100140>
81120888:	0025883a 	mov	r18,zero
8112088c:	94800c04 	addi	r18,r18,48
81120890:	dc8019c5 	stb	r18,103(sp)
81120894:	dcc02717 	ldw	r19,156(sp)
81120898:	dd4019c4 	addi	r21,sp,103
8112089c:	003e2b06 	br	8112014c <__reset+0xfb10014c>
811208a0:	21003fcc 	andi	r4,r4,255
811208a4:	2002361e 	bne	r4,zero,81121180 <___vfiprintf_internal_r+0x143c>
811208a8:	1801c126 	beq	r3,zero,81120fb0 <___vfiprintf_internal_r+0x126c>
811208ac:	04800044 	movi	r18,1
811208b0:	d8c01005 	stb	r3,64(sp)
811208b4:	d8001d85 	stb	zero,118(sp)
811208b8:	9027883a 	mov	r19,r18
811208bc:	dd401004 	addi	r21,sp,64
811208c0:	003f1106 	br	81120508 <__reset+0xfb100508>
811208c4:	d9402117 	ldw	r5,132(sp)
811208c8:	d9002017 	ldw	r4,128(sp)
811208cc:	d9801a04 	addi	r6,sp,104
811208d0:	d9c02b15 	stw	r7,172(sp)
811208d4:	dbc02a15 	stw	r15,168(sp)
811208d8:	111fc280 	call	8111fc28 <__sprint_r.part.0>
811208dc:	d9c02b17 	ldw	r7,172(sp)
811208e0:	dbc02a17 	ldw	r15,168(sp)
811208e4:	10006d1e 	bne	r2,zero,81120a9c <___vfiprintf_internal_r+0xd58>
811208e8:	d9801b17 	ldw	r6,108(sp)
811208ec:	d8801c17 	ldw	r2,112(sp)
811208f0:	d811883a 	mov	r8,sp
811208f4:	31400044 	addi	r5,r6,1
811208f8:	003e3306 	br	811201c8 <__reset+0xfb1001c8>
811208fc:	d9401b17 	ldw	r5,108(sp)
81120900:	d8801c17 	ldw	r2,112(sp)
81120904:	29000044 	addi	r4,r5,1
81120908:	d8c01d87 	ldb	r3,118(sp)
8112090c:	183e4d26 	beq	r3,zero,81120244 <__reset+0xfb100244>
81120910:	00c00044 	movi	r3,1
81120914:	d9401d84 	addi	r5,sp,118
81120918:	10c5883a 	add	r2,r2,r3
8112091c:	41400015 	stw	r5,0(r8)
81120920:	40c00115 	stw	r3,4(r8)
81120924:	d8801c15 	stw	r2,112(sp)
81120928:	d9001b15 	stw	r4,108(sp)
8112092c:	014001c4 	movi	r5,7
81120930:	2900a90e 	bge	r5,r4,81120bd8 <___vfiprintf_internal_r+0xe94>
81120934:	1000da1e 	bne	r2,zero,81120ca0 <___vfiprintf_internal_r+0xf5c>
81120938:	7000ab1e 	bne	r14,zero,81120be8 <___vfiprintf_internal_r+0xea4>
8112093c:	000b883a 	mov	r5,zero
81120940:	1809883a 	mov	r4,r3
81120944:	d811883a 	mov	r8,sp
81120948:	00c02004 	movi	r3,128
8112094c:	e0fe4d26 	beq	fp,r3,81120284 <__reset+0xfb100284>
81120950:	4cf9c83a 	sub	fp,r9,r19
81120954:	073e7b0e 	bge	zero,fp,81120344 <__reset+0xfb100344>
81120958:	01c00404 	movi	r7,16
8112095c:	3f01900e 	bge	r7,fp,81120fa0 <___vfiprintf_internal_r+0x125c>
81120960:	00e04534 	movhi	r3,33044
81120964:	18f19704 	addi	r3,r3,-14756
81120968:	d8c02415 	stw	r3,144(sp)
8112096c:	034001c4 	movi	r13,7
81120970:	00000506 	br	81120988 <___vfiprintf_internal_r+0xc44>
81120974:	29000084 	addi	r4,r5,2
81120978:	42000204 	addi	r8,r8,8
8112097c:	180b883a 	mov	r5,r3
81120980:	e73ffc04 	addi	fp,fp,-16
81120984:	3f000d0e 	bge	r7,fp,811209bc <___vfiprintf_internal_r+0xc78>
81120988:	10800404 	addi	r2,r2,16
8112098c:	28c00044 	addi	r3,r5,1
81120990:	45c00015 	stw	r23,0(r8)
81120994:	41c00115 	stw	r7,4(r8)
81120998:	d8801c15 	stw	r2,112(sp)
8112099c:	d8c01b15 	stw	r3,108(sp)
811209a0:	68fff40e 	bge	r13,r3,81120974 <__reset+0xfb100974>
811209a4:	1000101e 	bne	r2,zero,811209e8 <___vfiprintf_internal_r+0xca4>
811209a8:	e73ffc04 	addi	fp,fp,-16
811209ac:	01000044 	movi	r4,1
811209b0:	000b883a 	mov	r5,zero
811209b4:	d811883a 	mov	r8,sp
811209b8:	3f3ff316 	blt	r7,fp,81120988 <__reset+0xfb100988>
811209bc:	da802417 	ldw	r10,144(sp)
811209c0:	1705883a 	add	r2,r2,fp
811209c4:	47000115 	stw	fp,4(r8)
811209c8:	42800015 	stw	r10,0(r8)
811209cc:	d8801c15 	stw	r2,112(sp)
811209d0:	d9001b15 	stw	r4,108(sp)
811209d4:	00c001c4 	movi	r3,7
811209d8:	19003616 	blt	r3,r4,81120ab4 <___vfiprintf_internal_r+0xd70>
811209dc:	42000204 	addi	r8,r8,8
811209e0:	21000044 	addi	r4,r4,1
811209e4:	003e5706 	br	81120344 <__reset+0xfb100344>
811209e8:	d9402117 	ldw	r5,132(sp)
811209ec:	d9002017 	ldw	r4,128(sp)
811209f0:	d9801a04 	addi	r6,sp,104
811209f4:	d9c02b15 	stw	r7,172(sp)
811209f8:	db402a15 	stw	r13,168(sp)
811209fc:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120a00:	d9c02b17 	ldw	r7,172(sp)
81120a04:	db402a17 	ldw	r13,168(sp)
81120a08:	1000241e 	bne	r2,zero,81120a9c <___vfiprintf_internal_r+0xd58>
81120a0c:	d9401b17 	ldw	r5,108(sp)
81120a10:	d8801c17 	ldw	r2,112(sp)
81120a14:	d811883a 	mov	r8,sp
81120a18:	29000044 	addi	r4,r5,1
81120a1c:	003fd806 	br	81120980 <__reset+0xfb100980>
81120a20:	d9401b17 	ldw	r5,108(sp)
81120a24:	00e04534 	movhi	r3,33044
81120a28:	18f19b04 	addi	r3,r3,-14740
81120a2c:	d8c02415 	stw	r3,144(sp)
81120a30:	29400044 	addi	r5,r5,1
81120a34:	d8c02417 	ldw	r3,144(sp)
81120a38:	14c5883a 	add	r2,r2,r19
81120a3c:	44c00115 	stw	r19,4(r8)
81120a40:	40c00015 	stw	r3,0(r8)
81120a44:	d8801c15 	stw	r2,112(sp)
81120a48:	d9401b15 	stw	r5,108(sp)
81120a4c:	00c001c4 	movi	r3,7
81120a50:	1940070e 	bge	r3,r5,81120a70 <___vfiprintf_internal_r+0xd2c>
81120a54:	103e4826 	beq	r2,zero,81120378 <__reset+0xfb100378>
81120a58:	d9402117 	ldw	r5,132(sp)
81120a5c:	d9002017 	ldw	r4,128(sp)
81120a60:	d9801a04 	addi	r6,sp,104
81120a64:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120a68:	10000c1e 	bne	r2,zero,81120a9c <___vfiprintf_internal_r+0xd58>
81120a6c:	d8801c17 	ldw	r2,112(sp)
81120a70:	8c80010e 	bge	r17,r18,81120a78 <___vfiprintf_internal_r+0xd34>
81120a74:	9023883a 	mov	r17,r18
81120a78:	da802317 	ldw	r10,140(sp)
81120a7c:	5455883a 	add	r10,r10,r17
81120a80:	da802315 	stw	r10,140(sp)
81120a84:	103e4126 	beq	r2,zero,8112038c <__reset+0xfb10038c>
81120a88:	d9402117 	ldw	r5,132(sp)
81120a8c:	d9002017 	ldw	r4,128(sp)
81120a90:	d9801a04 	addi	r6,sp,104
81120a94:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120a98:	103e3c26 	beq	r2,zero,8112038c <__reset+0xfb10038c>
81120a9c:	dd002117 	ldw	r20,132(sp)
81120aa0:	a080030b 	ldhu	r2,12(r20)
81120aa4:	1080100c 	andi	r2,r2,64
81120aa8:	1001231e 	bne	r2,zero,81120f38 <___vfiprintf_internal_r+0x11f4>
81120aac:	d8802317 	ldw	r2,140(sp)
81120ab0:	003d7b06 	br	811200a0 <__reset+0xfb1000a0>
81120ab4:	1000991e 	bne	r2,zero,81120d1c <___vfiprintf_internal_r+0xfd8>
81120ab8:	00c00044 	movi	r3,1
81120abc:	9805883a 	mov	r2,r19
81120ac0:	dd400015 	stw	r21,0(sp)
81120ac4:	dcc00115 	stw	r19,4(sp)
81120ac8:	dcc01c15 	stw	r19,112(sp)
81120acc:	d8c01b15 	stw	r3,108(sp)
81120ad0:	d811883a 	mov	r8,sp
81120ad4:	42000204 	addi	r8,r8,8
81120ad8:	a2c0010c 	andi	r11,r20,4
81120adc:	583fe426 	beq	r11,zero,81120a70 <__reset+0xfb100a70>
81120ae0:	8ca7c83a 	sub	r19,r17,r18
81120ae4:	04ffe20e 	bge	zero,r19,81120a70 <__reset+0xfb100a70>
81120ae8:	01c00404 	movi	r7,16
81120aec:	3cffcc0e 	bge	r7,r19,81120a20 <__reset+0xfb100a20>
81120af0:	02a04534 	movhi	r10,33044
81120af4:	52b19b04 	addi	r10,r10,-14740
81120af8:	d9001b17 	ldw	r4,108(sp)
81120afc:	da802415 	stw	r10,144(sp)
81120b00:	382b883a 	mov	r21,r7
81120b04:	050001c4 	movi	r20,7
81120b08:	df002017 	ldw	fp,128(sp)
81120b0c:	00000506 	br	81120b24 <___vfiprintf_internal_r+0xde0>
81120b10:	21400084 	addi	r5,r4,2
81120b14:	42000204 	addi	r8,r8,8
81120b18:	1809883a 	mov	r4,r3
81120b1c:	9cfffc04 	addi	r19,r19,-16
81120b20:	acffc40e 	bge	r21,r19,81120a34 <__reset+0xfb100a34>
81120b24:	10800404 	addi	r2,r2,16
81120b28:	20c00044 	addi	r3,r4,1
81120b2c:	45800015 	stw	r22,0(r8)
81120b30:	45400115 	stw	r21,4(r8)
81120b34:	d8801c15 	stw	r2,112(sp)
81120b38:	d8c01b15 	stw	r3,108(sp)
81120b3c:	a0fff40e 	bge	r20,r3,81120b10 <__reset+0xfb100b10>
81120b40:	1000041e 	bne	r2,zero,81120b54 <___vfiprintf_internal_r+0xe10>
81120b44:	01400044 	movi	r5,1
81120b48:	0009883a 	mov	r4,zero
81120b4c:	d811883a 	mov	r8,sp
81120b50:	003ff206 	br	81120b1c <__reset+0xfb100b1c>
81120b54:	d9402117 	ldw	r5,132(sp)
81120b58:	d9801a04 	addi	r6,sp,104
81120b5c:	e009883a 	mov	r4,fp
81120b60:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120b64:	103fcd1e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120b68:	d9001b17 	ldw	r4,108(sp)
81120b6c:	d8801c17 	ldw	r2,112(sp)
81120b70:	d811883a 	mov	r8,sp
81120b74:	21400044 	addi	r5,r4,1
81120b78:	003fe806 	br	81120b1c <__reset+0xfb100b1c>
81120b7c:	d9402117 	ldw	r5,132(sp)
81120b80:	d9002017 	ldw	r4,128(sp)
81120b84:	d9801a04 	addi	r6,sp,104
81120b88:	d9c02b15 	stw	r7,172(sp)
81120b8c:	db402a15 	stw	r13,168(sp)
81120b90:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120b94:	d9c02b17 	ldw	r7,172(sp)
81120b98:	db402a17 	ldw	r13,168(sp)
81120b9c:	103fbf1e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120ba0:	d9401b17 	ldw	r5,108(sp)
81120ba4:	d8801c17 	ldw	r2,112(sp)
81120ba8:	d811883a 	mov	r8,sp
81120bac:	29800044 	addi	r6,r5,1
81120bb0:	003dc406 	br	811202c4 <__reset+0xfb1002c4>
81120bb4:	1000d21e 	bne	r2,zero,81120f00 <___vfiprintf_internal_r+0x11bc>
81120bb8:	d8c01d87 	ldb	r3,118(sp)
81120bbc:	18009526 	beq	r3,zero,81120e14 <___vfiprintf_internal_r+0x10d0>
81120bc0:	00800044 	movi	r2,1
81120bc4:	d8c01d84 	addi	r3,sp,118
81120bc8:	1009883a 	mov	r4,r2
81120bcc:	d8c00015 	stw	r3,0(sp)
81120bd0:	d8800115 	stw	r2,4(sp)
81120bd4:	d811883a 	mov	r8,sp
81120bd8:	200b883a 	mov	r5,r4
81120bdc:	42000204 	addi	r8,r8,8
81120be0:	21000044 	addi	r4,r4,1
81120be4:	003d9706 	br	81120244 <__reset+0xfb100244>
81120be8:	d9001d04 	addi	r4,sp,116
81120bec:	00800084 	movi	r2,2
81120bf0:	d9000015 	stw	r4,0(sp)
81120bf4:	d8800115 	stw	r2,4(sp)
81120bf8:	1809883a 	mov	r4,r3
81120bfc:	d811883a 	mov	r8,sp
81120c00:	200b883a 	mov	r5,r4
81120c04:	42000204 	addi	r8,r8,8
81120c08:	21000044 	addi	r4,r4,1
81120c0c:	003f4e06 	br	81120948 <__reset+0xfb100948>
81120c10:	d8001d85 	stb	zero,118(sp)
81120c14:	48005016 	blt	r9,zero,81120d58 <___vfiprintf_internal_r+0x1014>
81120c18:	00ffdfc4 	movi	r3,-129
81120c1c:	94c4b03a 	or	r2,r18,r19
81120c20:	a0e8703a 	and	r20,r20,r3
81120c24:	103d4426 	beq	r2,zero,81120138 <__reset+0xfb100138>
81120c28:	0039883a 	mov	fp,zero
81120c2c:	d9002617 	ldw	r4,152(sp)
81120c30:	dd401a04 	addi	r21,sp,104
81120c34:	908003cc 	andi	r2,r18,15
81120c38:	9806973a 	slli	r3,r19,28
81120c3c:	2085883a 	add	r2,r4,r2
81120c40:	9024d13a 	srli	r18,r18,4
81120c44:	10800003 	ldbu	r2,0(r2)
81120c48:	9826d13a 	srli	r19,r19,4
81120c4c:	ad7fffc4 	addi	r21,r21,-1
81120c50:	1ca4b03a 	or	r18,r3,r18
81120c54:	a8800005 	stb	r2,0(r21)
81120c58:	94c4b03a 	or	r2,r18,r19
81120c5c:	103ff51e 	bne	r2,zero,81120c34 <__reset+0xfb100c34>
81120c60:	003e5906 	br	811205c8 <__reset+0xfb1005c8>
81120c64:	d9402117 	ldw	r5,132(sp)
81120c68:	d9002017 	ldw	r4,128(sp)
81120c6c:	d9801a04 	addi	r6,sp,104
81120c70:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120c74:	103f891e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120c78:	d8801c17 	ldw	r2,112(sp)
81120c7c:	d811883a 	mov	r8,sp
81120c80:	003f9506 	br	81120ad8 <__reset+0xfb100ad8>
81120c84:	d9402117 	ldw	r5,132(sp)
81120c88:	d9002017 	ldw	r4,128(sp)
81120c8c:	d9801a04 	addi	r6,sp,104
81120c90:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120c94:	103f811e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120c98:	d811883a 	mov	r8,sp
81120c9c:	003ced06 	br	81120054 <__reset+0xfb100054>
81120ca0:	d9402117 	ldw	r5,132(sp)
81120ca4:	d9002017 	ldw	r4,128(sp)
81120ca8:	d9801a04 	addi	r6,sp,104
81120cac:	da402c15 	stw	r9,176(sp)
81120cb0:	db802a15 	stw	r14,168(sp)
81120cb4:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120cb8:	da402c17 	ldw	r9,176(sp)
81120cbc:	db802a17 	ldw	r14,168(sp)
81120cc0:	103f761e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120cc4:	d9401b17 	ldw	r5,108(sp)
81120cc8:	d8801c17 	ldw	r2,112(sp)
81120ccc:	d811883a 	mov	r8,sp
81120cd0:	29000044 	addi	r4,r5,1
81120cd4:	003d5b06 	br	81120244 <__reset+0xfb100244>
81120cd8:	d9402117 	ldw	r5,132(sp)
81120cdc:	d9002017 	ldw	r4,128(sp)
81120ce0:	d9801a04 	addi	r6,sp,104
81120ce4:	da402c15 	stw	r9,176(sp)
81120ce8:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120cec:	da402c17 	ldw	r9,176(sp)
81120cf0:	103f6a1e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120cf4:	d9401b17 	ldw	r5,108(sp)
81120cf8:	d8801c17 	ldw	r2,112(sp)
81120cfc:	d811883a 	mov	r8,sp
81120d00:	29000044 	addi	r4,r5,1
81120d04:	003f1006 	br	81120948 <__reset+0xfb100948>
81120d08:	1000c31e 	bne	r2,zero,81121018 <___vfiprintf_internal_r+0x12d4>
81120d0c:	01000044 	movi	r4,1
81120d10:	000b883a 	mov	r5,zero
81120d14:	d811883a 	mov	r8,sp
81120d18:	003f0d06 	br	81120950 <__reset+0xfb100950>
81120d1c:	d9402117 	ldw	r5,132(sp)
81120d20:	d9002017 	ldw	r4,128(sp)
81120d24:	d9801a04 	addi	r6,sp,104
81120d28:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120d2c:	103f5b1e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120d30:	d9001b17 	ldw	r4,108(sp)
81120d34:	d8801c17 	ldw	r2,112(sp)
81120d38:	d811883a 	mov	r8,sp
81120d3c:	21000044 	addi	r4,r4,1
81120d40:	003d8006 	br	81120344 <__reset+0xfb100344>
81120d44:	01204534 	movhi	r4,33044
81120d48:	21310504 	addi	r4,r4,-15340
81120d4c:	d9002615 	stw	r4,152(sp)
81120d50:	d8c02215 	stw	r3,136(sp)
81120d54:	1029883a 	mov	r20,r2
81120d58:	94c4b03a 	or	r2,r18,r19
81120d5c:	103fb21e 	bne	r2,zero,81120c28 <__reset+0xfb100c28>
81120d60:	0039883a 	mov	fp,zero
81120d64:	00800084 	movi	r2,2
81120d68:	003e6b06 	br	81120718 <__reset+0xfb100718>
81120d6c:	da802217 	ldw	r10,136(sp)
81120d70:	d8001d85 	stb	zero,118(sp)
81120d74:	0027883a 	mov	r19,zero
81120d78:	50800104 	addi	r2,r10,4
81120d7c:	54800017 	ldw	r18,0(r10)
81120d80:	483e6016 	blt	r9,zero,81120704 <__reset+0xfb100704>
81120d84:	00ffdfc4 	movi	r3,-129
81120d88:	d8802215 	stw	r2,136(sp)
81120d8c:	a0e8703a 	and	r20,r20,r3
81120d90:	0039883a 	mov	fp,zero
81120d94:	903ebb26 	beq	r18,zero,81120884 <__reset+0xfb100884>
81120d98:	00800244 	movi	r2,9
81120d9c:	14bdee36 	bltu	r2,r18,81120558 <__reset+0xfb100558>
81120da0:	003eba06 	br	8112088c <__reset+0xfb10088c>
81120da4:	00800c04 	movi	r2,48
81120da8:	d8c01d45 	stb	r3,117(sp)
81120dac:	d8801d05 	stb	r2,116(sp)
81120db0:	d8001d85 	stb	zero,118(sp)
81120db4:	a0c00094 	ori	r3,r20,2
81120db8:	4800a916 	blt	r9,zero,81121060 <___vfiprintf_internal_r+0x131c>
81120dbc:	00bfdfc4 	movi	r2,-129
81120dc0:	a096703a 	and	r11,r20,r2
81120dc4:	5d000094 	ori	r20,r11,2
81120dc8:	0039883a 	mov	fp,zero
81120dcc:	003f9706 	br	81120c2c <__reset+0xfb100c2c>
81120dd0:	8025883a 	mov	r18,r16
81120dd4:	003c2e06 	br	8111fe90 <__reset+0xfb0ffe90>
81120dd8:	00a04534 	movhi	r2,33044
81120ddc:	10b10504 	addi	r2,r2,-15340
81120de0:	0039883a 	mov	fp,zero
81120de4:	d8802615 	stw	r2,152(sp)
81120de8:	003f9006 	br	81120c2c <__reset+0xfb100c2c>
81120dec:	04a5c83a 	sub	r18,zero,r18
81120df0:	07000b44 	movi	fp,45
81120df4:	9004c03a 	cmpne	r2,r18,zero
81120df8:	04e7c83a 	sub	r19,zero,r19
81120dfc:	df001d85 	stb	fp,118(sp)
81120e00:	98a7c83a 	sub	r19,r19,r2
81120e04:	48009f16 	blt	r9,zero,81121084 <___vfiprintf_internal_r+0x1340>
81120e08:	00bfdfc4 	movi	r2,-129
81120e0c:	a0a8703a 	and	r20,r20,r2
81120e10:	003dd006 	br	81120554 <__reset+0xfb100554>
81120e14:	70004c26 	beq	r14,zero,81120f48 <___vfiprintf_internal_r+0x1204>
81120e18:	00800084 	movi	r2,2
81120e1c:	d8c01d04 	addi	r3,sp,116
81120e20:	d8c00015 	stw	r3,0(sp)
81120e24:	d8800115 	stw	r2,4(sp)
81120e28:	01000044 	movi	r4,1
81120e2c:	d811883a 	mov	r8,sp
81120e30:	003f7306 	br	81120c00 <__reset+0xfb100c00>
81120e34:	a080100c 	andi	r2,r20,64
81120e38:	da802217 	ldw	r10,136(sp)
81120e3c:	103e0626 	beq	r2,zero,81120658 <__reset+0xfb100658>
81120e40:	5480000f 	ldh	r18,0(r10)
81120e44:	52800104 	addi	r10,r10,4
81120e48:	da802215 	stw	r10,136(sp)
81120e4c:	9027d7fa 	srai	r19,r18,31
81120e50:	9805883a 	mov	r2,r19
81120e54:	003db806 	br	81120538 <__reset+0xfb100538>
81120e58:	a080040c 	andi	r2,r20,16
81120e5c:	1000091e 	bne	r2,zero,81120e84 <___vfiprintf_internal_r+0x1140>
81120e60:	a2c0100c 	andi	r11,r20,64
81120e64:	58000726 	beq	r11,zero,81120e84 <___vfiprintf_internal_r+0x1140>
81120e68:	da802217 	ldw	r10,136(sp)
81120e6c:	50800017 	ldw	r2,0(r10)
81120e70:	52800104 	addi	r10,r10,4
81120e74:	da802215 	stw	r10,136(sp)
81120e78:	da802317 	ldw	r10,140(sp)
81120e7c:	1280000d 	sth	r10,0(r2)
81120e80:	003be706 	br	8111fe20 <__reset+0xfb0ffe20>
81120e84:	da802217 	ldw	r10,136(sp)
81120e88:	50800017 	ldw	r2,0(r10)
81120e8c:	52800104 	addi	r10,r10,4
81120e90:	da802215 	stw	r10,136(sp)
81120e94:	da802317 	ldw	r10,140(sp)
81120e98:	12800015 	stw	r10,0(r2)
81120e9c:	003be006 	br	8111fe20 <__reset+0xfb0ffe20>
81120ea0:	a080100c 	andi	r2,r20,64
81120ea4:	da802217 	ldw	r10,136(sp)
81120ea8:	10003026 	beq	r2,zero,81120f6c <___vfiprintf_internal_r+0x1228>
81120eac:	5480000b 	ldhu	r18,0(r10)
81120eb0:	52800104 	addi	r10,r10,4
81120eb4:	0027883a 	mov	r19,zero
81120eb8:	da802215 	stw	r10,136(sp)
81120ebc:	003d8006 	br	811204c0 <__reset+0xfb1004c0>
81120ec0:	80c00007 	ldb	r3,0(r16)
81120ec4:	003c0006 	br	8111fec8 <__reset+0xfb0ffec8>
81120ec8:	a080100c 	andi	r2,r20,64
81120ecc:	d8001d85 	stb	zero,118(sp)
81120ed0:	da802217 	ldw	r10,136(sp)
81120ed4:	1000201e 	bne	r2,zero,81120f58 <___vfiprintf_internal_r+0x1214>
81120ed8:	50800104 	addi	r2,r10,4
81120edc:	54800017 	ldw	r18,0(r10)
81120ee0:	0027883a 	mov	r19,zero
81120ee4:	483def0e 	bge	r9,zero,811206a4 <__reset+0xfb1006a4>
81120ee8:	94c6b03a 	or	r3,r18,r19
81120eec:	d8802215 	stw	r2,136(sp)
81120ef0:	183d4e1e 	bne	r3,zero,8112042c <__reset+0xfb10042c>
81120ef4:	0039883a 	mov	fp,zero
81120ef8:	0005883a 	mov	r2,zero
81120efc:	003e0606 	br	81120718 <__reset+0xfb100718>
81120f00:	d9402117 	ldw	r5,132(sp)
81120f04:	d9002017 	ldw	r4,128(sp)
81120f08:	d9801a04 	addi	r6,sp,104
81120f0c:	da402c15 	stw	r9,176(sp)
81120f10:	db802a15 	stw	r14,168(sp)
81120f14:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120f18:	da402c17 	ldw	r9,176(sp)
81120f1c:	db802a17 	ldw	r14,168(sp)
81120f20:	103ede1e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81120f24:	d9401b17 	ldw	r5,108(sp)
81120f28:	d8801c17 	ldw	r2,112(sp)
81120f2c:	d811883a 	mov	r8,sp
81120f30:	29000044 	addi	r4,r5,1
81120f34:	003e7406 	br	81120908 <__reset+0xfb100908>
81120f38:	00bfffc4 	movi	r2,-1
81120f3c:	003c5806 	br	811200a0 <__reset+0xfb1000a0>
81120f40:	d811883a 	mov	r8,sp
81120f44:	003ee806 	br	81120ae8 <__reset+0xfb100ae8>
81120f48:	000b883a 	mov	r5,zero
81120f4c:	01000044 	movi	r4,1
81120f50:	d811883a 	mov	r8,sp
81120f54:	003e7c06 	br	81120948 <__reset+0xfb100948>
81120f58:	50800104 	addi	r2,r10,4
81120f5c:	5480000b 	ldhu	r18,0(r10)
81120f60:	0027883a 	mov	r19,zero
81120f64:	483dcf0e 	bge	r9,zero,811206a4 <__reset+0xfb1006a4>
81120f68:	003fdf06 	br	81120ee8 <__reset+0xfb100ee8>
81120f6c:	54800017 	ldw	r18,0(r10)
81120f70:	52800104 	addi	r10,r10,4
81120f74:	0027883a 	mov	r19,zero
81120f78:	da802215 	stw	r10,136(sp)
81120f7c:	003d5006 	br	811204c0 <__reset+0xfb1004c0>
81120f80:	50800104 	addi	r2,r10,4
81120f84:	5480000b 	ldhu	r18,0(r10)
81120f88:	0027883a 	mov	r19,zero
81120f8c:	483f7d0e 	bge	r9,zero,81120d84 <__reset+0xfb100d84>
81120f90:	003ddc06 	br	81120704 <__reset+0xfb100704>
81120f94:	d8c02215 	stw	r3,136(sp)
81120f98:	0039883a 	mov	fp,zero
81120f9c:	003ddb06 	br	8112070c <__reset+0xfb10070c>
81120fa0:	02a04534 	movhi	r10,33044
81120fa4:	52b19704 	addi	r10,r10,-14756
81120fa8:	da802415 	stw	r10,144(sp)
81120fac:	003e8306 	br	811209bc <__reset+0xfb1009bc>
81120fb0:	d8801c17 	ldw	r2,112(sp)
81120fb4:	dd002117 	ldw	r20,132(sp)
81120fb8:	103eb926 	beq	r2,zero,81120aa0 <__reset+0xfb100aa0>
81120fbc:	d9002017 	ldw	r4,128(sp)
81120fc0:	d9801a04 	addi	r6,sp,104
81120fc4:	a00b883a 	mov	r5,r20
81120fc8:	111fc280 	call	8111fc28 <__sprint_r.part.0>
81120fcc:	003eb406 	br	81120aa0 <__reset+0xfb100aa0>
81120fd0:	80c00043 	ldbu	r3,1(r16)
81120fd4:	a5000814 	ori	r20,r20,32
81120fd8:	84000044 	addi	r16,r16,1
81120fdc:	18c03fcc 	andi	r3,r3,255
81120fe0:	18c0201c 	xori	r3,r3,128
81120fe4:	18ffe004 	addi	r3,r3,-128
81120fe8:	003bb706 	br	8111fec8 <__reset+0xfb0ffec8>
81120fec:	a809883a 	mov	r4,r21
81120ff0:	d8c02a15 	stw	r3,168(sp)
81120ff4:	da002b15 	stw	r8,172(sp)
81120ff8:	11117c80 	call	811117c8 <strlen>
81120ffc:	d8c02a17 	ldw	r3,168(sp)
81121000:	1027883a 	mov	r19,r2
81121004:	df001d83 	ldbu	fp,118(sp)
81121008:	d8c02215 	stw	r3,136(sp)
8112100c:	0013883a 	mov	r9,zero
81121010:	da002b17 	ldw	r8,172(sp)
81121014:	003c4d06 	br	8112014c <__reset+0xfb10014c>
81121018:	d9402117 	ldw	r5,132(sp)
8112101c:	d9002017 	ldw	r4,128(sp)
81121020:	d9801a04 	addi	r6,sp,104
81121024:	da402c15 	stw	r9,176(sp)
81121028:	111fc280 	call	8111fc28 <__sprint_r.part.0>
8112102c:	da402c17 	ldw	r9,176(sp)
81121030:	103e9a1e 	bne	r2,zero,81120a9c <__reset+0xfb100a9c>
81121034:	d9401b17 	ldw	r5,108(sp)
81121038:	d8801c17 	ldw	r2,112(sp)
8112103c:	d811883a 	mov	r8,sp
81121040:	29000044 	addi	r4,r5,1
81121044:	003e4206 	br	81120950 <__reset+0xfb100950>
81121048:	d9401b17 	ldw	r5,108(sp)
8112104c:	01204534 	movhi	r4,33044
81121050:	21319b04 	addi	r4,r4,-14740
81121054:	d9002415 	stw	r4,144(sp)
81121058:	29400044 	addi	r5,r5,1
8112105c:	003c6d06 	br	81120214 <__reset+0xfb100214>
81121060:	0039883a 	mov	fp,zero
81121064:	00800084 	movi	r2,2
81121068:	10803fcc 	andi	r2,r2,255
8112106c:	01000044 	movi	r4,1
81121070:	11001e26 	beq	r2,r4,811210ec <___vfiprintf_internal_r+0x13a8>
81121074:	01000084 	movi	r4,2
81121078:	11001e1e 	bne	r2,r4,811210f4 <___vfiprintf_internal_r+0x13b0>
8112107c:	1829883a 	mov	r20,r3
81121080:	003eea06 	br	81120c2c <__reset+0xfb100c2c>
81121084:	a007883a 	mov	r3,r20
81121088:	00800044 	movi	r2,1
8112108c:	003ff606 	br	81121068 <__reset+0xfb101068>
81121090:	00800184 	movi	r2,6
81121094:	1240012e 	bgeu	r2,r9,8112109c <___vfiprintf_internal_r+0x1358>
81121098:	1013883a 	mov	r9,r2
8112109c:	4827883a 	mov	r19,r9
811210a0:	4825883a 	mov	r18,r9
811210a4:	48001516 	blt	r9,zero,811210fc <___vfiprintf_internal_r+0x13b8>
811210a8:	05604534 	movhi	r21,33044
811210ac:	d8c02215 	stw	r3,136(sp)
811210b0:	ad710a04 	addi	r21,r21,-15320
811210b4:	003d1406 	br	81120508 <__reset+0xfb100508>
811210b8:	02a04534 	movhi	r10,33044
811210bc:	52b19704 	addi	r10,r10,-14756
811210c0:	da802415 	stw	r10,144(sp)
811210c4:	200d883a 	mov	r6,r4
811210c8:	003c9106 	br	81120310 <__reset+0xfb100310>
811210cc:	5021883a 	mov	r16,r10
811210d0:	0013883a 	mov	r9,zero
811210d4:	003b7d06 	br	8111fecc <__reset+0xfb0ffecc>
811210d8:	4827883a 	mov	r19,r9
811210dc:	df001d83 	ldbu	fp,118(sp)
811210e0:	d8c02215 	stw	r3,136(sp)
811210e4:	0013883a 	mov	r9,zero
811210e8:	003c1806 	br	8112014c <__reset+0xfb10014c>
811210ec:	1829883a 	mov	r20,r3
811210f0:	003d1806 	br	81120554 <__reset+0xfb100554>
811210f4:	1829883a 	mov	r20,r3
811210f8:	003ccd06 	br	81120430 <__reset+0xfb100430>
811210fc:	0025883a 	mov	r18,zero
81121100:	003fe906 	br	811210a8 <__reset+0xfb1010a8>
81121104:	d8802217 	ldw	r2,136(sp)
81121108:	80c00043 	ldbu	r3,1(r16)
8112110c:	5021883a 	mov	r16,r10
81121110:	12400017 	ldw	r9,0(r2)
81121114:	10800104 	addi	r2,r2,4
81121118:	d8802215 	stw	r2,136(sp)
8112111c:	483faf0e 	bge	r9,zero,81120fdc <__reset+0xfb100fdc>
81121120:	18c03fcc 	andi	r3,r3,255
81121124:	18c0201c 	xori	r3,r3,128
81121128:	027fffc4 	movi	r9,-1
8112112c:	18ffe004 	addi	r3,r3,-128
81121130:	003b6506 	br	8111fec8 <__reset+0xfb0ffec8>
81121134:	d9c01d85 	stb	r7,118(sp)
81121138:	003ca006 	br	811203bc <__reset+0xfb1003bc>
8112113c:	d9c01d85 	stb	r7,118(sp)
81121140:	003cad06 	br	811203f8 <__reset+0xfb1003f8>
81121144:	d9c01d85 	stb	r7,118(sp)
81121148:	003d7d06 	br	81120740 <__reset+0xfb100740>
8112114c:	d9c01d85 	stb	r7,118(sp)
81121150:	003d5f06 	br	811206d0 <__reset+0xfb1006d0>
81121154:	a080004c 	andi	r2,r20,1
81121158:	0039883a 	mov	fp,zero
8112115c:	10000526 	beq	r2,zero,81121174 <___vfiprintf_internal_r+0x1430>
81121160:	00800c04 	movi	r2,48
81121164:	d88019c5 	stb	r2,103(sp)
81121168:	dcc02717 	ldw	r19,156(sp)
8112116c:	dd4019c4 	addi	r21,sp,103
81121170:	003bf606 	br	8112014c <__reset+0xfb10014c>
81121174:	0027883a 	mov	r19,zero
81121178:	dd401a04 	addi	r21,sp,104
8112117c:	003bf306 	br	8112014c <__reset+0xfb10014c>
81121180:	d9c01d85 	stb	r7,118(sp)
81121184:	003dc806 	br	811208a8 <__reset+0xfb1008a8>
81121188:	d9c01d85 	stb	r7,118(sp)
8112118c:	003d3a06 	br	81120678 <__reset+0xfb100678>
81121190:	d9c01d85 	stb	r7,118(sp)
81121194:	003d2a06 	br	81120640 <__reset+0xfb100640>
81121198:	d9c01d85 	stb	r7,118(sp)
8112119c:	003cde06 	br	81120518 <__reset+0xfb100518>
811211a0:	d9c01d85 	stb	r7,118(sp)
811211a4:	003cbc06 	br	81120498 <__reset+0xfb100498>

811211a8 <__vfiprintf_internal>:
811211a8:	00a04534 	movhi	r2,33044
811211ac:	10ba0604 	addi	r2,r2,-6120
811211b0:	300f883a 	mov	r7,r6
811211b4:	280d883a 	mov	r6,r5
811211b8:	200b883a 	mov	r5,r4
811211bc:	11000017 	ldw	r4,0(r2)
811211c0:	111fd441 	jmpi	8111fd44 <___vfiprintf_internal_r>

811211c4 <__sbprintf>:
811211c4:	defee204 	addi	sp,sp,-1144
811211c8:	de00012e 	bgeu	sp,et,811211d0 <__sbprintf+0xc>
811211cc:	003b68fa 	trap	3
811211d0:	2880030b 	ldhu	r2,12(r5)
811211d4:	2ac01917 	ldw	r11,100(r5)
811211d8:	2a80038b 	ldhu	r10,14(r5)
811211dc:	2a400717 	ldw	r9,28(r5)
811211e0:	2a000917 	ldw	r8,36(r5)
811211e4:	00c10004 	movi	r3,1024
811211e8:	dc011a15 	stw	r16,1128(sp)
811211ec:	10bfff4c 	andi	r2,r2,65533
811211f0:	2821883a 	mov	r16,r5
811211f4:	d8cb883a 	add	r5,sp,r3
811211f8:	dc811c15 	stw	r18,1136(sp)
811211fc:	dc411b15 	stw	r17,1132(sp)
81121200:	dfc11d15 	stw	ra,1140(sp)
81121204:	2025883a 	mov	r18,r4
81121208:	d881030d 	sth	r2,1036(sp)
8112120c:	dac11915 	stw	r11,1124(sp)
81121210:	da81038d 	sth	r10,1038(sp)
81121214:	da410715 	stw	r9,1052(sp)
81121218:	da010915 	stw	r8,1060(sp)
8112121c:	dec10015 	stw	sp,1024(sp)
81121220:	dec10415 	stw	sp,1040(sp)
81121224:	d8c10215 	stw	r3,1032(sp)
81121228:	d8c10515 	stw	r3,1044(sp)
8112122c:	d8010615 	stw	zero,1048(sp)
81121230:	111fd440 	call	8111fd44 <___vfiprintf_internal_r>
81121234:	1023883a 	mov	r17,r2
81121238:	10000416 	blt	r2,zero,8112124c <__sbprintf+0x88>
8112123c:	d9410004 	addi	r5,sp,1024
81121240:	9009883a 	mov	r4,r18
81121244:	11194fc0 	call	811194fc <_fflush_r>
81121248:	10000d1e 	bne	r2,zero,81121280 <__sbprintf+0xbc>
8112124c:	d881030b 	ldhu	r2,1036(sp)
81121250:	1080100c 	andi	r2,r2,64
81121254:	10000326 	beq	r2,zero,81121264 <__sbprintf+0xa0>
81121258:	8080030b 	ldhu	r2,12(r16)
8112125c:	10801014 	ori	r2,r2,64
81121260:	8080030d 	sth	r2,12(r16)
81121264:	8805883a 	mov	r2,r17
81121268:	dfc11d17 	ldw	ra,1140(sp)
8112126c:	dc811c17 	ldw	r18,1136(sp)
81121270:	dc411b17 	ldw	r17,1132(sp)
81121274:	dc011a17 	ldw	r16,1128(sp)
81121278:	dec11e04 	addi	sp,sp,1144
8112127c:	f800283a 	ret
81121280:	047fffc4 	movi	r17,-1
81121284:	003ff106 	br	8112124c <__reset+0xfb10124c>

81121288 <_calloc_r>:
81121288:	298b383a 	mul	r5,r5,r6
8112128c:	defffe04 	addi	sp,sp,-8
81121290:	de00012e 	bgeu	sp,et,81121298 <_calloc_r+0x10>
81121294:	003b68fa 	trap	3
81121298:	dfc00115 	stw	ra,4(sp)
8112129c:	dc000015 	stw	r16,0(sp)
811212a0:	11106380 	call	81110638 <_malloc_r>
811212a4:	10002926 	beq	r2,zero,8112134c <_calloc_r+0xc4>
811212a8:	11bfff17 	ldw	r6,-4(r2)
811212ac:	1021883a 	mov	r16,r2
811212b0:	00bfff04 	movi	r2,-4
811212b4:	308c703a 	and	r6,r6,r2
811212b8:	00c00904 	movi	r3,36
811212bc:	308d883a 	add	r6,r6,r2
811212c0:	19801636 	bltu	r3,r6,8112131c <_calloc_r+0x94>
811212c4:	008004c4 	movi	r2,19
811212c8:	11800b2e 	bgeu	r2,r6,811212f8 <_calloc_r+0x70>
811212cc:	80000015 	stw	zero,0(r16)
811212d0:	80000115 	stw	zero,4(r16)
811212d4:	008006c4 	movi	r2,27
811212d8:	11801a2e 	bgeu	r2,r6,81121344 <_calloc_r+0xbc>
811212dc:	80000215 	stw	zero,8(r16)
811212e0:	80000315 	stw	zero,12(r16)
811212e4:	30c0151e 	bne	r6,r3,8112133c <_calloc_r+0xb4>
811212e8:	80000415 	stw	zero,16(r16)
811212ec:	80800604 	addi	r2,r16,24
811212f0:	80000515 	stw	zero,20(r16)
811212f4:	00000106 	br	811212fc <_calloc_r+0x74>
811212f8:	8005883a 	mov	r2,r16
811212fc:	10000015 	stw	zero,0(r2)
81121300:	10000115 	stw	zero,4(r2)
81121304:	10000215 	stw	zero,8(r2)
81121308:	8005883a 	mov	r2,r16
8112130c:	dfc00117 	ldw	ra,4(sp)
81121310:	dc000017 	ldw	r16,0(sp)
81121314:	dec00204 	addi	sp,sp,8
81121318:	f800283a 	ret
8112131c:	000b883a 	mov	r5,zero
81121320:	8009883a 	mov	r4,r16
81121324:	1110f9c0 	call	81110f9c <memset>
81121328:	8005883a 	mov	r2,r16
8112132c:	dfc00117 	ldw	ra,4(sp)
81121330:	dc000017 	ldw	r16,0(sp)
81121334:	dec00204 	addi	sp,sp,8
81121338:	f800283a 	ret
8112133c:	80800404 	addi	r2,r16,16
81121340:	003fee06 	br	811212fc <__reset+0xfb1012fc>
81121344:	80800204 	addi	r2,r16,8
81121348:	003fec06 	br	811212fc <__reset+0xfb1012fc>
8112134c:	0005883a 	mov	r2,zero
81121350:	003fee06 	br	8112130c <__reset+0xfb10130c>

81121354 <_fclose_r>:
81121354:	28003b26 	beq	r5,zero,81121444 <_fclose_r+0xf0>
81121358:	defffc04 	addi	sp,sp,-16
8112135c:	de00012e 	bgeu	sp,et,81121364 <_fclose_r+0x10>
81121360:	003b68fa 	trap	3
81121364:	dc400115 	stw	r17,4(sp)
81121368:	dc000015 	stw	r16,0(sp)
8112136c:	dfc00315 	stw	ra,12(sp)
81121370:	dc800215 	stw	r18,8(sp)
81121374:	2023883a 	mov	r17,r4
81121378:	2821883a 	mov	r16,r5
8112137c:	20000226 	beq	r4,zero,81121388 <_fclose_r+0x34>
81121380:	20800e17 	ldw	r2,56(r4)
81121384:	10002726 	beq	r2,zero,81121424 <_fclose_r+0xd0>
81121388:	8080030f 	ldh	r2,12(r16)
8112138c:	1000071e 	bne	r2,zero,811213ac <_fclose_r+0x58>
81121390:	0005883a 	mov	r2,zero
81121394:	dfc00317 	ldw	ra,12(sp)
81121398:	dc800217 	ldw	r18,8(sp)
8112139c:	dc400117 	ldw	r17,4(sp)
811213a0:	dc000017 	ldw	r16,0(sp)
811213a4:	dec00404 	addi	sp,sp,16
811213a8:	f800283a 	ret
811213ac:	800b883a 	mov	r5,r16
811213b0:	8809883a 	mov	r4,r17
811213b4:	11192d80 	call	811192d8 <__sflush_r>
811213b8:	1025883a 	mov	r18,r2
811213bc:	80800b17 	ldw	r2,44(r16)
811213c0:	10000426 	beq	r2,zero,811213d4 <_fclose_r+0x80>
811213c4:	81400717 	ldw	r5,28(r16)
811213c8:	8809883a 	mov	r4,r17
811213cc:	103ee83a 	callr	r2
811213d0:	10001616 	blt	r2,zero,8112142c <_fclose_r+0xd8>
811213d4:	8080030b 	ldhu	r2,12(r16)
811213d8:	1080200c 	andi	r2,r2,128
811213dc:	1000151e 	bne	r2,zero,81121434 <_fclose_r+0xe0>
811213e0:	81400c17 	ldw	r5,48(r16)
811213e4:	28000526 	beq	r5,zero,811213fc <_fclose_r+0xa8>
811213e8:	80801004 	addi	r2,r16,64
811213ec:	28800226 	beq	r5,r2,811213f8 <_fclose_r+0xa4>
811213f0:	8809883a 	mov	r4,r17
811213f4:	1119d900 	call	81119d90 <_free_r>
811213f8:	80000c15 	stw	zero,48(r16)
811213fc:	81401117 	ldw	r5,68(r16)
81121400:	28000326 	beq	r5,zero,81121410 <_fclose_r+0xbc>
81121404:	8809883a 	mov	r4,r17
81121408:	1119d900 	call	81119d90 <_free_r>
8112140c:	80001115 	stw	zero,68(r16)
81121410:	11199080 	call	81119908 <__sfp_lock_acquire>
81121414:	8000030d 	sth	zero,12(r16)
81121418:	111990c0 	call	8111990c <__sfp_lock_release>
8112141c:	9005883a 	mov	r2,r18
81121420:	003fdc06 	br	81121394 <__reset+0xfb101394>
81121424:	11198f80 	call	811198f8 <__sinit>
81121428:	003fd706 	br	81121388 <__reset+0xfb101388>
8112142c:	04bfffc4 	movi	r18,-1
81121430:	003fe806 	br	811213d4 <__reset+0xfb1013d4>
81121434:	81400417 	ldw	r5,16(r16)
81121438:	8809883a 	mov	r4,r17
8112143c:	1119d900 	call	81119d90 <_free_r>
81121440:	003fe706 	br	811213e0 <__reset+0xfb1013e0>
81121444:	0005883a 	mov	r2,zero
81121448:	f800283a 	ret

8112144c <fclose>:
8112144c:	00a04534 	movhi	r2,33044
81121450:	10ba0604 	addi	r2,r2,-6120
81121454:	200b883a 	mov	r5,r4
81121458:	11000017 	ldw	r4,0(r2)
8112145c:	11213541 	jmpi	81121354 <_fclose_r>

81121460 <__fputwc>:
81121460:	defff804 	addi	sp,sp,-32
81121464:	de00012e 	bgeu	sp,et,8112146c <__fputwc+0xc>
81121468:	003b68fa 	trap	3
8112146c:	dcc00415 	stw	r19,16(sp)
81121470:	dc800315 	stw	r18,12(sp)
81121474:	dc000115 	stw	r16,4(sp)
81121478:	dfc00715 	stw	ra,28(sp)
8112147c:	dd400615 	stw	r21,24(sp)
81121480:	dd000515 	stw	r20,20(sp)
81121484:	dc400215 	stw	r17,8(sp)
81121488:	2027883a 	mov	r19,r4
8112148c:	2825883a 	mov	r18,r5
81121490:	3021883a 	mov	r16,r6
81121494:	111a8200 	call	8111a820 <__locale_mb_cur_max>
81121498:	00c00044 	movi	r3,1
8112149c:	10c03e26 	beq	r2,r3,81121598 <__fputwc+0x138>
811214a0:	81c01704 	addi	r7,r16,92
811214a4:	900d883a 	mov	r6,r18
811214a8:	d80b883a 	mov	r5,sp
811214ac:	9809883a 	mov	r4,r19
811214b0:	11224440 	call	81122444 <_wcrtomb_r>
811214b4:	1029883a 	mov	r20,r2
811214b8:	00bfffc4 	movi	r2,-1
811214bc:	a0802026 	beq	r20,r2,81121540 <__fputwc+0xe0>
811214c0:	d9400003 	ldbu	r5,0(sp)
811214c4:	a0001c26 	beq	r20,zero,81121538 <__fputwc+0xd8>
811214c8:	0023883a 	mov	r17,zero
811214cc:	05400284 	movi	r21,10
811214d0:	00000906 	br	811214f8 <__fputwc+0x98>
811214d4:	80800017 	ldw	r2,0(r16)
811214d8:	11400005 	stb	r5,0(r2)
811214dc:	80c00017 	ldw	r3,0(r16)
811214e0:	18c00044 	addi	r3,r3,1
811214e4:	80c00015 	stw	r3,0(r16)
811214e8:	8c400044 	addi	r17,r17,1
811214ec:	dc45883a 	add	r2,sp,r17
811214f0:	8d00112e 	bgeu	r17,r20,81121538 <__fputwc+0xd8>
811214f4:	11400003 	ldbu	r5,0(r2)
811214f8:	80c00217 	ldw	r3,8(r16)
811214fc:	18ffffc4 	addi	r3,r3,-1
81121500:	80c00215 	stw	r3,8(r16)
81121504:	183ff30e 	bge	r3,zero,811214d4 <__reset+0xfb1014d4>
81121508:	80800617 	ldw	r2,24(r16)
8112150c:	18801916 	blt	r3,r2,81121574 <__fputwc+0x114>
81121510:	80800017 	ldw	r2,0(r16)
81121514:	11400005 	stb	r5,0(r2)
81121518:	80800017 	ldw	r2,0(r16)
8112151c:	10c00003 	ldbu	r3,0(r2)
81121520:	10800044 	addi	r2,r2,1
81121524:	1d402326 	beq	r3,r21,811215b4 <__fputwc+0x154>
81121528:	80800015 	stw	r2,0(r16)
8112152c:	8c400044 	addi	r17,r17,1
81121530:	dc45883a 	add	r2,sp,r17
81121534:	8d3fef36 	bltu	r17,r20,811214f4 <__reset+0xfb1014f4>
81121538:	9005883a 	mov	r2,r18
8112153c:	00000406 	br	81121550 <__fputwc+0xf0>
81121540:	80c0030b 	ldhu	r3,12(r16)
81121544:	a005883a 	mov	r2,r20
81121548:	18c01014 	ori	r3,r3,64
8112154c:	80c0030d 	sth	r3,12(r16)
81121550:	dfc00717 	ldw	ra,28(sp)
81121554:	dd400617 	ldw	r21,24(sp)
81121558:	dd000517 	ldw	r20,20(sp)
8112155c:	dcc00417 	ldw	r19,16(sp)
81121560:	dc800317 	ldw	r18,12(sp)
81121564:	dc400217 	ldw	r17,8(sp)
81121568:	dc000117 	ldw	r16,4(sp)
8112156c:	dec00804 	addi	sp,sp,32
81121570:	f800283a 	ret
81121574:	800d883a 	mov	r6,r16
81121578:	29403fcc 	andi	r5,r5,255
8112157c:	9809883a 	mov	r4,r19
81121580:	11222e40 	call	811222e4 <__swbuf_r>
81121584:	10bfffe0 	cmpeqi	r2,r2,-1
81121588:	10803fcc 	andi	r2,r2,255
8112158c:	103fd626 	beq	r2,zero,811214e8 <__reset+0xfb1014e8>
81121590:	00bfffc4 	movi	r2,-1
81121594:	003fee06 	br	81121550 <__reset+0xfb101550>
81121598:	90ffffc4 	addi	r3,r18,-1
8112159c:	01003f84 	movi	r4,254
811215a0:	20ffbf36 	bltu	r4,r3,811214a0 <__reset+0xfb1014a0>
811215a4:	900b883a 	mov	r5,r18
811215a8:	dc800005 	stb	r18,0(sp)
811215ac:	1029883a 	mov	r20,r2
811215b0:	003fc506 	br	811214c8 <__reset+0xfb1014c8>
811215b4:	800d883a 	mov	r6,r16
811215b8:	a80b883a 	mov	r5,r21
811215bc:	9809883a 	mov	r4,r19
811215c0:	11222e40 	call	811222e4 <__swbuf_r>
811215c4:	10bfffe0 	cmpeqi	r2,r2,-1
811215c8:	003fef06 	br	81121588 <__reset+0xfb101588>

811215cc <_fputwc_r>:
811215cc:	3080030b 	ldhu	r2,12(r6)
811215d0:	10c8000c 	andi	r3,r2,8192
811215d4:	1800051e 	bne	r3,zero,811215ec <_fputwc_r+0x20>
811215d8:	30c01917 	ldw	r3,100(r6)
811215dc:	10880014 	ori	r2,r2,8192
811215e0:	3080030d 	sth	r2,12(r6)
811215e4:	18880014 	ori	r2,r3,8192
811215e8:	30801915 	stw	r2,100(r6)
811215ec:	11214601 	jmpi	81121460 <__fputwc>

811215f0 <fputwc>:
811215f0:	00a04534 	movhi	r2,33044
811215f4:	defffc04 	addi	sp,sp,-16
811215f8:	10ba0604 	addi	r2,r2,-6120
811215fc:	de00012e 	bgeu	sp,et,81121604 <fputwc+0x14>
81121600:	003b68fa 	trap	3
81121604:	dc000115 	stw	r16,4(sp)
81121608:	14000017 	ldw	r16,0(r2)
8112160c:	dc400215 	stw	r17,8(sp)
81121610:	dfc00315 	stw	ra,12(sp)
81121614:	2023883a 	mov	r17,r4
81121618:	80000226 	beq	r16,zero,81121624 <fputwc+0x34>
8112161c:	80800e17 	ldw	r2,56(r16)
81121620:	10001026 	beq	r2,zero,81121664 <fputwc+0x74>
81121624:	2880030b 	ldhu	r2,12(r5)
81121628:	10c8000c 	andi	r3,r2,8192
8112162c:	1800051e 	bne	r3,zero,81121644 <fputwc+0x54>
81121630:	28c01917 	ldw	r3,100(r5)
81121634:	10880014 	ori	r2,r2,8192
81121638:	2880030d 	sth	r2,12(r5)
8112163c:	18880014 	ori	r2,r3,8192
81121640:	28801915 	stw	r2,100(r5)
81121644:	280d883a 	mov	r6,r5
81121648:	8009883a 	mov	r4,r16
8112164c:	880b883a 	mov	r5,r17
81121650:	dfc00317 	ldw	ra,12(sp)
81121654:	dc400217 	ldw	r17,8(sp)
81121658:	dc000117 	ldw	r16,4(sp)
8112165c:	dec00404 	addi	sp,sp,16
81121660:	11214601 	jmpi	81121460 <__fputwc>
81121664:	8009883a 	mov	r4,r16
81121668:	d9400015 	stw	r5,0(sp)
8112166c:	11198f80 	call	811198f8 <__sinit>
81121670:	d9400017 	ldw	r5,0(sp)
81121674:	003feb06 	br	81121624 <__reset+0xfb101624>

81121678 <rshift>:
81121678:	2807d17a 	srai	r3,r5,5
8112167c:	20800417 	ldw	r2,16(r4)
81121680:	22000504 	addi	r8,r4,20
81121684:	1880250e 	bge	r3,r2,8112171c <rshift+0xa4>
81121688:	1085883a 	add	r2,r2,r2
8112168c:	18c7883a 	add	r3,r3,r3
81121690:	1085883a 	add	r2,r2,r2
81121694:	18c7883a 	add	r3,r3,r3
81121698:	294007cc 	andi	r5,r5,31
8112169c:	4085883a 	add	r2,r8,r2
811216a0:	40c7883a 	add	r3,r8,r3
811216a4:	28002026 	beq	r5,zero,81121728 <rshift+0xb0>
811216a8:	19800017 	ldw	r6,0(r3)
811216ac:	02c00804 	movi	r11,32
811216b0:	19c00104 	addi	r7,r3,4
811216b4:	5957c83a 	sub	r11,r11,r5
811216b8:	314cd83a 	srl	r6,r6,r5
811216bc:	38802c2e 	bgeu	r7,r2,81121770 <rshift+0xf8>
811216c0:	4015883a 	mov	r10,r8
811216c4:	3a400017 	ldw	r9,0(r7)
811216c8:	52800104 	addi	r10,r10,4
811216cc:	39c00104 	addi	r7,r7,4
811216d0:	4ad2983a 	sll	r9,r9,r11
811216d4:	498cb03a 	or	r6,r9,r6
811216d8:	51bfff15 	stw	r6,-4(r10)
811216dc:	39bfff17 	ldw	r6,-4(r7)
811216e0:	314cd83a 	srl	r6,r6,r5
811216e4:	38bff736 	bltu	r7,r2,811216c4 <__reset+0xfb1016c4>
811216e8:	10c7c83a 	sub	r3,r2,r3
811216ec:	18fffec4 	addi	r3,r3,-5
811216f0:	1806d0ba 	srli	r3,r3,2
811216f4:	18c00044 	addi	r3,r3,1
811216f8:	18c7883a 	add	r3,r3,r3
811216fc:	18c7883a 	add	r3,r3,r3
81121700:	40c7883a 	add	r3,r8,r3
81121704:	19800015 	stw	r6,0(r3)
81121708:	30000126 	beq	r6,zero,81121710 <rshift+0x98>
8112170c:	18c00104 	addi	r3,r3,4
81121710:	1a05c83a 	sub	r2,r3,r8
81121714:	1005d0ba 	srai	r2,r2,2
81121718:	00001206 	br	81121764 <rshift+0xec>
8112171c:	20000415 	stw	zero,16(r4)
81121720:	20000515 	stw	zero,20(r4)
81121724:	f800283a 	ret
81121728:	18bffc2e 	bgeu	r3,r2,8112171c <__reset+0xfb10171c>
8112172c:	180d883a 	mov	r6,r3
81121730:	400b883a 	mov	r5,r8
81121734:	31c00017 	ldw	r7,0(r6)
81121738:	29400104 	addi	r5,r5,4
8112173c:	31800104 	addi	r6,r6,4
81121740:	29ffff15 	stw	r7,-4(r5)
81121744:	30bffb36 	bltu	r6,r2,81121734 <__reset+0xfb101734>
81121748:	00c6303a 	nor	r3,zero,r3
8112174c:	1885883a 	add	r2,r3,r2
81121750:	1004d0ba 	srli	r2,r2,2
81121754:	10800044 	addi	r2,r2,1
81121758:	1085883a 	add	r2,r2,r2
8112175c:	1085883a 	add	r2,r2,r2
81121760:	1005d0ba 	srai	r2,r2,2
81121764:	20800415 	stw	r2,16(r4)
81121768:	103fed26 	beq	r2,zero,81121720 <__reset+0xfb101720>
8112176c:	f800283a 	ret
81121770:	4007883a 	mov	r3,r8
81121774:	003fe306 	br	81121704 <__reset+0xfb101704>

81121778 <__gethex>:
81121778:	deffeb04 	addi	sp,sp,-84
8112177c:	de00012e 	bgeu	sp,et,81121784 <__gethex+0xc>
81121780:	003b68fa 	trap	3
81121784:	dfc01415 	stw	ra,80(sp)
81121788:	dd801115 	stw	r22,68(sp)
8112178c:	dcc00e15 	stw	r19,56(sp)
81121790:	dc800d15 	stw	r18,52(sp)
81121794:	2827883a 	mov	r19,r5
81121798:	d9000115 	stw	r4,4(sp)
8112179c:	d9800015 	stw	r6,0(sp)
811217a0:	d9c00415 	stw	r7,16(sp)
811217a4:	df001315 	stw	fp,76(sp)
811217a8:	ddc01215 	stw	r23,72(sp)
811217ac:	dd401015 	stw	r21,64(sp)
811217b0:	dd000f15 	stw	r20,60(sp)
811217b4:	dc400c15 	stw	r17,48(sp)
811217b8:	dc000b15 	stw	r16,44(sp)
811217bc:	111a8440 	call	8111a844 <_localeconv_r>
811217c0:	14800017 	ldw	r18,0(r2)
811217c4:	9009883a 	mov	r4,r18
811217c8:	11117c80 	call	811117c8 <strlen>
811217cc:	98c00017 	ldw	r3,0(r19)
811217d0:	102d883a 	mov	r22,r2
811217d4:	9085883a 	add	r2,r18,r2
811217d8:	10bfffc3 	ldbu	r2,-1(r2)
811217dc:	19000083 	ldbu	r4,2(r3)
811217e0:	d8800305 	stb	r2,12(sp)
811217e4:	00800c04 	movi	r2,48
811217e8:	2081521e 	bne	r4,r2,81121d34 <__gethex+0x5bc>
811217ec:	017fff84 	movi	r5,-2
811217f0:	188000c4 	addi	r2,r3,3
811217f4:	28cbc83a 	sub	r5,r5,r3
811217f8:	200d883a 	mov	r6,r4
811217fc:	28a3883a 	add	r17,r5,r2
81121800:	102b883a 	mov	r21,r2
81121804:	10800044 	addi	r2,r2,1
81121808:	113fffc3 	ldbu	r4,-1(r2)
8112180c:	21bffb26 	beq	r4,r6,811217fc <__reset+0xfb1017fc>
81121810:	05204534 	movhi	r20,33044
81121814:	a5319f04 	addi	r20,r20,-14724
81121818:	a109883a 	add	r4,r20,r4
8112181c:	20800003 	ldbu	r2,0(r4)
81121820:	10008826 	beq	r2,zero,81121a44 <__gethex+0x2cc>
81121824:	a8800003 	ldbu	r2,0(r21)
81121828:	0015883a 	mov	r10,zero
8112182c:	002f883a 	mov	r23,zero
81121830:	a085883a 	add	r2,r20,r2
81121834:	10800003 	ldbu	r2,0(r2)
81121838:	a821883a 	mov	r16,r21
8112183c:	10000526 	beq	r2,zero,81121854 <__gethex+0xdc>
81121840:	84000044 	addi	r16,r16,1
81121844:	80800003 	ldbu	r2,0(r16)
81121848:	a085883a 	add	r2,r20,r2
8112184c:	10800003 	ldbu	r2,0(r2)
81121850:	103ffb1e 	bne	r2,zero,81121840 <__reset+0xfb101840>
81121854:	b00d883a 	mov	r6,r22
81121858:	900b883a 	mov	r5,r18
8112185c:	8009883a 	mov	r4,r16
81121860:	da800a15 	stw	r10,40(sp)
81121864:	11222140 	call	81122214 <strncmp>
81121868:	da800a17 	ldw	r10,40(sp)
8112186c:	1000031e 	bne	r2,zero,8112187c <__gethex+0x104>
81121870:	b8015226 	beq	r23,zero,81121dbc <__gethex+0x644>
81121874:	80800003 	ldbu	r2,0(r16)
81121878:	00000206 	br	81121884 <__gethex+0x10c>
8112187c:	80800003 	ldbu	r2,0(r16)
81121880:	b8011f26 	beq	r23,zero,81121d00 <__gethex+0x588>
81121884:	85efc83a 	sub	r23,r16,r23
81121888:	bdef883a 	add	r23,r23,r23
8112188c:	bdef883a 	add	r23,r23,r23
81121890:	05efc83a 	sub	r23,zero,r23
81121894:	10803fcc 	andi	r2,r2,255
81121898:	01001404 	movi	r4,80
8112189c:	11008626 	beq	r2,r4,81121ab8 <__gethex+0x340>
811218a0:	01001c04 	movi	r4,112
811218a4:	11008426 	beq	r2,r4,81121ab8 <__gethex+0x340>
811218a8:	8039883a 	mov	fp,r16
811218ac:	9c000015 	stw	r16,0(r19)
811218b0:	5000711e 	bne	r10,zero,81121a78 <__gethex+0x300>
811218b4:	e545c83a 	sub	r2,fp,r21
811218b8:	10bfffc4 	addi	r2,r2,-1
811218bc:	010001c4 	movi	r4,7
811218c0:	000b883a 	mov	r5,zero
811218c4:	2080030e 	bge	r4,r2,811218d4 <__gethex+0x15c>
811218c8:	1005d07a 	srai	r2,r2,1
811218cc:	29400044 	addi	r5,r5,1
811218d0:	20bffd16 	blt	r4,r2,811218c8 <__reset+0xfb1018c8>
811218d4:	d9000117 	ldw	r4,4(sp)
811218d8:	111ad600 	call	8111ad60 <_Balloc>
811218dc:	10c00504 	addi	r3,r2,20
811218e0:	d8c00215 	stw	r3,8(sp)
811218e4:	1021883a 	mov	r16,r2
811218e8:	af01732e 	bgeu	r21,fp,81121eb8 <__gethex+0x740>
811218ec:	dc400303 	ldbu	r17,12(sp)
811218f0:	03400044 	movi	r13,1
811218f4:	1815883a 	mov	r10,r3
811218f8:	0013883a 	mov	r9,zero
811218fc:	0027883a 	mov	r19,zero
81121900:	6d9bc83a 	sub	r13,r13,r22
81121904:	02c00804 	movi	r11,32
81121908:	e0bfffc3 	ldbu	r2,-1(fp)
8112190c:	e3bfffc4 	addi	r14,fp,-1
81121910:	88803026 	beq	r17,r2,811219d4 <__gethex+0x25c>
81121914:	9ac04526 	beq	r19,r11,81121a2c <__gethex+0x2b4>
81121918:	980b883a 	mov	r5,r19
8112191c:	9cc00104 	addi	r19,r19,4
81121920:	e13fffc3 	ldbu	r4,-1(fp)
81121924:	7039883a 	mov	fp,r14
81121928:	a109883a 	add	r4,r20,r4
8112192c:	20800003 	ldbu	r2,0(r4)
81121930:	108003cc 	andi	r2,r2,15
81121934:	1144983a 	sll	r2,r2,r5
81121938:	4892b03a 	or	r9,r9,r2
8112193c:	af3ff236 	bltu	r21,fp,81121908 <__reset+0xfb101908>
81121940:	d8c00217 	ldw	r3,8(sp)
81121944:	50800104 	addi	r2,r10,4
81121948:	52400015 	stw	r9,0(r10)
8112194c:	10c5c83a 	sub	r2,r2,r3
81121950:	1005d0ba 	srai	r2,r2,2
81121954:	4809883a 	mov	r4,r9
81121958:	80800415 	stw	r2,16(r16)
8112195c:	1022917a 	slli	r17,r2,5
81121960:	111b06c0 	call	8111b06c <__hi0bits>
81121964:	d8c00017 	ldw	r3,0(sp)
81121968:	8885c83a 	sub	r2,r17,r2
8112196c:	1c800017 	ldw	r18,0(r3)
81121970:	9080c716 	blt	r18,r2,81121c90 <__gethex+0x518>
81121974:	1480e416 	blt	r2,r18,81121d08 <__gethex+0x590>
81121978:	0027883a 	mov	r19,zero
8112197c:	d8c00017 	ldw	r3,0(sp)
81121980:	18800217 	ldw	r2,8(r3)
81121984:	15c08d16 	blt	r2,r23,81121bbc <__gethex+0x444>
81121988:	d8c00017 	ldw	r3,0(sp)
8112198c:	18800117 	ldw	r2,4(r3)
81121990:	b880aa0e 	bge	r23,r2,81121c3c <__gethex+0x4c4>
81121994:	15efc83a 	sub	r23,r2,r23
81121998:	bc80ed16 	blt	r23,r18,81121d50 <__gethex+0x5d8>
8112199c:	18c00317 	ldw	r3,12(r3)
811219a0:	01000084 	movi	r4,2
811219a4:	19014926 	beq	r3,r4,81121ecc <__gethex+0x754>
811219a8:	010000c4 	movi	r4,3
811219ac:	19012e26 	beq	r3,r4,81121e68 <__gethex+0x6f0>
811219b0:	01000044 	movi	r4,1
811219b4:	19014826 	beq	r3,r4,81121ed8 <__gethex+0x760>
811219b8:	d9000117 	ldw	r4,4(sp)
811219bc:	800b883a 	mov	r5,r16
811219c0:	111ae100 	call	8111ae10 <_Bfree>
811219c4:	d8801517 	ldw	r2,84(sp)
811219c8:	10000015 	stw	zero,0(r2)
811219cc:	00801404 	movi	r2,80
811219d0:	00002b06 	br	81121a80 <__gethex+0x308>
811219d4:	735f883a 	add	r15,r14,r13
811219d8:	7d7fce36 	bltu	r15,r21,81121914 <__reset+0xfb101914>
811219dc:	7809883a 	mov	r4,r15
811219e0:	b00d883a 	mov	r6,r22
811219e4:	900b883a 	mov	r5,r18
811219e8:	da400515 	stw	r9,20(sp)
811219ec:	da800a15 	stw	r10,40(sp)
811219f0:	dac00915 	stw	r11,36(sp)
811219f4:	db400815 	stw	r13,32(sp)
811219f8:	db800615 	stw	r14,24(sp)
811219fc:	dbc00715 	stw	r15,28(sp)
81121a00:	11222140 	call	81122214 <strncmp>
81121a04:	da400517 	ldw	r9,20(sp)
81121a08:	da800a17 	ldw	r10,40(sp)
81121a0c:	dac00917 	ldw	r11,36(sp)
81121a10:	db400817 	ldw	r13,32(sp)
81121a14:	db800617 	ldw	r14,24(sp)
81121a18:	dbc00717 	ldw	r15,28(sp)
81121a1c:	103fbd1e 	bne	r2,zero,81121914 <__reset+0xfb101914>
81121a20:	7839883a 	mov	fp,r15
81121a24:	af3fb836 	bltu	r21,fp,81121908 <__reset+0xfb101908>
81121a28:	003fc506 	br	81121940 <__reset+0xfb101940>
81121a2c:	04c00104 	movi	r19,4
81121a30:	52400015 	stw	r9,0(r10)
81121a34:	000b883a 	mov	r5,zero
81121a38:	54d5883a 	add	r10,r10,r19
81121a3c:	0013883a 	mov	r9,zero
81121a40:	003fb706 	br	81121920 <__reset+0xfb101920>
81121a44:	b00d883a 	mov	r6,r22
81121a48:	900b883a 	mov	r5,r18
81121a4c:	a809883a 	mov	r4,r21
81121a50:	11222140 	call	81122214 <strncmp>
81121a54:	10006426 	beq	r2,zero,81121be8 <__gethex+0x470>
81121a58:	a8800003 	ldbu	r2,0(r21)
81121a5c:	a821883a 	mov	r16,r21
81121a60:	10803fcc 	andi	r2,r2,255
81121a64:	01001404 	movi	r4,80
81121a68:	11001126 	beq	r2,r4,81121ab0 <__gethex+0x338>
81121a6c:	01001c04 	movi	r4,112
81121a70:	11000f26 	beq	r2,r4,81121ab0 <__gethex+0x338>
81121a74:	9c000015 	stw	r16,0(r19)
81121a78:	8800831e 	bne	r17,zero,81121c88 <__gethex+0x510>
81121a7c:	00800184 	movi	r2,6
81121a80:	dfc01417 	ldw	ra,80(sp)
81121a84:	df001317 	ldw	fp,76(sp)
81121a88:	ddc01217 	ldw	r23,72(sp)
81121a8c:	dd801117 	ldw	r22,68(sp)
81121a90:	dd401017 	ldw	r21,64(sp)
81121a94:	dd000f17 	ldw	r20,60(sp)
81121a98:	dcc00e17 	ldw	r19,56(sp)
81121a9c:	dc800d17 	ldw	r18,52(sp)
81121aa0:	dc400c17 	ldw	r17,48(sp)
81121aa4:	dc000b17 	ldw	r16,44(sp)
81121aa8:	dec01504 	addi	sp,sp,84
81121aac:	f800283a 	ret
81121ab0:	002f883a 	mov	r23,zero
81121ab4:	02800044 	movi	r10,1
81121ab8:	80800043 	ldbu	r2,1(r16)
81121abc:	01400ac4 	movi	r5,43
81121ac0:	11003fcc 	andi	r4,r2,255
81121ac4:	21406e26 	beq	r4,r5,81121c80 <__gethex+0x508>
81121ac8:	01400b44 	movi	r5,45
81121acc:	21404226 	beq	r4,r5,81121bd8 <__gethex+0x460>
81121ad0:	81400044 	addi	r5,r16,1
81121ad4:	000d883a 	mov	r6,zero
81121ad8:	10803fcc 	andi	r2,r2,255
81121adc:	a085883a 	add	r2,r20,r2
81121ae0:	11000003 	ldbu	r4,0(r2)
81121ae4:	03000604 	movi	r12,24
81121ae8:	20bfffc4 	addi	r2,r4,-1
81121aec:	10803fcc 	andi	r2,r2,255
81121af0:	60bf6d36 	bltu	r12,r2,811218a8 <__reset+0xfb1018a8>
81121af4:	2ac00043 	ldbu	r11,1(r5)
81121af8:	20803fcc 	andi	r2,r4,255
81121afc:	01204534 	movhi	r4,33044
81121b00:	21319f04 	addi	r4,r4,-14724
81121b04:	22c9883a 	add	r4,r4,r11
81121b08:	23400003 	ldbu	r13,0(r4)
81121b0c:	10bffc04 	addi	r2,r2,-16
81121b10:	29400044 	addi	r5,r5,1
81121b14:	693fffc4 	addi	r4,r13,-1
81121b18:	21003fcc 	andi	r4,r4,255
81121b1c:	6b403fcc 	andi	r13,r13,255
81121b20:	61000b36 	bltu	r12,r4,81121b50 <__gethex+0x3d8>
81121b24:	29400044 	addi	r5,r5,1
81121b28:	29000003 	ldbu	r4,0(r5)
81121b2c:	108002a4 	muli	r2,r2,10
81121b30:	a109883a 	add	r4,r20,r4
81121b34:	22c00003 	ldbu	r11,0(r4)
81121b38:	1345883a 	add	r2,r2,r13
81121b3c:	10bffc04 	addi	r2,r2,-16
81121b40:	593fffc4 	addi	r4,r11,-1
81121b44:	21003fcc 	andi	r4,r4,255
81121b48:	5b403fcc 	andi	r13,r11,255
81121b4c:	613ff52e 	bgeu	r12,r4,81121b24 <__reset+0xfb101b24>
81121b50:	30000126 	beq	r6,zero,81121b58 <__gethex+0x3e0>
81121b54:	0085c83a 	sub	r2,zero,r2
81121b58:	8039883a 	mov	fp,r16
81121b5c:	b8af883a 	add	r23,r23,r2
81121b60:	2821883a 	mov	r16,r5
81121b64:	003f5106 	br	811218ac <__reset+0xfb1018ac>
81121b68:	80800217 	ldw	r2,8(r16)
81121b6c:	e080f00e 	bge	fp,r2,81121f30 <__gethex+0x7b8>
81121b70:	e007883a 	mov	r3,fp
81121b74:	18800144 	addi	r2,r3,5
81121b78:	1085883a 	add	r2,r2,r2
81121b7c:	18c00044 	addi	r3,r3,1
81121b80:	1085883a 	add	r2,r2,r2
81121b84:	8085883a 	add	r2,r16,r2
81121b88:	80c00415 	stw	r3,16(r16)
81121b8c:	01000044 	movi	r4,1
81121b90:	11000015 	stw	r4,0(r2)
81121b94:	00800084 	movi	r2,2
81121b98:	8880d826 	beq	r17,r2,81121efc <__gethex+0x784>
81121b9c:	e0c0ac0e 	bge	fp,r3,81121e50 <__gethex+0x6d8>
81121ba0:	01400044 	movi	r5,1
81121ba4:	8009883a 	mov	r4,r16
81121ba8:	11216780 	call	81121678 <rshift>
81121bac:	d8c00017 	ldw	r3,0(sp)
81121bb0:	bdc00044 	addi	r23,r23,1
81121bb4:	18800217 	ldw	r2,8(r3)
81121bb8:	15c0a70e 	bge	r2,r23,81121e58 <__gethex+0x6e0>
81121bbc:	d9000117 	ldw	r4,4(sp)
81121bc0:	800b883a 	mov	r5,r16
81121bc4:	111ae100 	call	8111ae10 <_Bfree>
81121bc8:	d9001517 	ldw	r4,84(sp)
81121bcc:	008028c4 	movi	r2,163
81121bd0:	20000015 	stw	zero,0(r4)
81121bd4:	003faa06 	br	81121a80 <__reset+0xfb101a80>
81121bd8:	01800044 	movi	r6,1
81121bdc:	80800083 	ldbu	r2,2(r16)
81121be0:	81400084 	addi	r5,r16,2
81121be4:	003fbc06 	br	81121ad8 <__reset+0xfb101ad8>
81121be8:	ada1883a 	add	r16,r21,r22
81121bec:	81000003 	ldbu	r4,0(r16)
81121bf0:	21403fcc 	andi	r5,r4,255
81121bf4:	a145883a 	add	r2,r20,r5
81121bf8:	10800003 	ldbu	r2,0(r2)
81121bfc:	11803fcc 	andi	r6,r2,255
81121c00:	30004f26 	beq	r6,zero,81121d40 <__gethex+0x5c8>
81121c04:	00c00c04 	movi	r3,48
81121c08:	802b883a 	mov	r21,r16
81121c0c:	28c0061e 	bne	r5,r3,81121c28 <__gethex+0x4b0>
81121c10:	2809883a 	mov	r4,r5
81121c14:	ad400044 	addi	r21,r21,1
81121c18:	a8800003 	ldbu	r2,0(r21)
81121c1c:	113ffd26 	beq	r2,r4,81121c14 <__reset+0xfb101c14>
81121c20:	a085883a 	add	r2,r20,r2
81121c24:	10800003 	ldbu	r2,0(r2)
81121c28:	10803fcc 	andi	r2,r2,255
81121c2c:	1015003a 	cmpeq	r10,r2,zero
81121c30:	802f883a 	mov	r23,r16
81121c34:	04400044 	movi	r17,1
81121c38:	003eff06 	br	81121838 <__reset+0xfb101838>
81121c3c:	04400044 	movi	r17,1
81121c40:	98000926 	beq	r19,zero,81121c68 <__gethex+0x4f0>
81121c44:	d8c00017 	ldw	r3,0(sp)
81121c48:	18800317 	ldw	r2,12(r3)
81121c4c:	00c00084 	movi	r3,2
81121c50:	10c06826 	beq	r2,r3,81121df4 <__gethex+0x67c>
81121c54:	00c000c4 	movi	r3,3
81121c58:	10c06a26 	beq	r2,r3,81121e04 <__gethex+0x68c>
81121c5c:	00c00044 	movi	r3,1
81121c60:	10c08d26 	beq	r2,r3,81121e98 <__gethex+0x720>
81121c64:	8c400414 	ori	r17,r17,16
81121c68:	d9001517 	ldw	r4,84(sp)
81121c6c:	d8c00417 	ldw	r3,16(sp)
81121c70:	8805883a 	mov	r2,r17
81121c74:	24000015 	stw	r16,0(r4)
81121c78:	1dc00015 	stw	r23,0(r3)
81121c7c:	003f8006 	br	81121a80 <__reset+0xfb101a80>
81121c80:	000d883a 	mov	r6,zero
81121c84:	003fd506 	br	81121bdc <__reset+0xfb101bdc>
81121c88:	0005883a 	mov	r2,zero
81121c8c:	003f7c06 	br	81121a80 <__reset+0xfb101a80>
81121c90:	14a3c83a 	sub	r17,r2,r18
81121c94:	880b883a 	mov	r5,r17
81121c98:	8009883a 	mov	r4,r16
81121c9c:	111bd300 	call	8111bd30 <__any_on>
81121ca0:	10002926 	beq	r2,zero,81121d48 <__gethex+0x5d0>
81121ca4:	897fffc4 	addi	r5,r17,-1
81121ca8:	2807d17a 	srai	r3,r5,5
81121cac:	d8800217 	ldw	r2,8(sp)
81121cb0:	290007cc 	andi	r4,r5,31
81121cb4:	18c7883a 	add	r3,r3,r3
81121cb8:	18c7883a 	add	r3,r3,r3
81121cbc:	04c00044 	movi	r19,1
81121cc0:	10c7883a 	add	r3,r2,r3
81121cc4:	9908983a 	sll	r4,r19,r4
81121cc8:	18c00017 	ldw	r3,0(r3)
81121ccc:	20c6703a 	and	r3,r4,r3
81121cd0:	18000626 	beq	r3,zero,81121cec <__gethex+0x574>
81121cd4:	99407b0e 	bge	r19,r5,81121ec4 <__gethex+0x74c>
81121cd8:	897fff84 	addi	r5,r17,-2
81121cdc:	8009883a 	mov	r4,r16
81121ce0:	111bd300 	call	8111bd30 <__any_on>
81121ce4:	10007726 	beq	r2,zero,81121ec4 <__gethex+0x74c>
81121ce8:	04c000c4 	movi	r19,3
81121cec:	880b883a 	mov	r5,r17
81121cf0:	8009883a 	mov	r4,r16
81121cf4:	11216780 	call	81121678 <rshift>
81121cf8:	bc6f883a 	add	r23,r23,r17
81121cfc:	003f1f06 	br	8112197c <__reset+0xfb10197c>
81121d00:	002f883a 	mov	r23,zero
81121d04:	003ee306 	br	81121894 <__reset+0xfb101894>
81121d08:	d9000117 	ldw	r4,4(sp)
81121d0c:	90a3c83a 	sub	r17,r18,r2
81121d10:	800b883a 	mov	r5,r16
81121d14:	880d883a 	mov	r6,r17
81121d18:	111b5100 	call	8111b510 <__lshift>
81121d1c:	10c00504 	addi	r3,r2,20
81121d20:	1021883a 	mov	r16,r2
81121d24:	bc6fc83a 	sub	r23,r23,r17
81121d28:	d8c00215 	stw	r3,8(sp)
81121d2c:	0027883a 	mov	r19,zero
81121d30:	003f1206 	br	8112197c <__reset+0xfb10197c>
81121d34:	1d400084 	addi	r21,r3,2
81121d38:	0023883a 	mov	r17,zero
81121d3c:	003eb406 	br	81121810 <__reset+0xfb101810>
81121d40:	2005883a 	mov	r2,r4
81121d44:	003f4606 	br	81121a60 <__reset+0xfb101a60>
81121d48:	0027883a 	mov	r19,zero
81121d4c:	003fe706 	br	81121cec <__reset+0xfb101cec>
81121d50:	bc7fffc4 	addi	r17,r23,-1
81121d54:	9800421e 	bne	r19,zero,81121e60 <__gethex+0x6e8>
81121d58:	88000426 	beq	r17,zero,81121d6c <__gethex+0x5f4>
81121d5c:	880b883a 	mov	r5,r17
81121d60:	8009883a 	mov	r4,r16
81121d64:	111bd300 	call	8111bd30 <__any_on>
81121d68:	1027883a 	mov	r19,r2
81121d6c:	8805d17a 	srai	r2,r17,5
81121d70:	d8c00217 	ldw	r3,8(sp)
81121d74:	8c4007cc 	andi	r17,r17,31
81121d78:	1085883a 	add	r2,r2,r2
81121d7c:	1085883a 	add	r2,r2,r2
81121d80:	1885883a 	add	r2,r3,r2
81121d84:	00c00044 	movi	r3,1
81121d88:	1c62983a 	sll	r17,r3,r17
81121d8c:	10800017 	ldw	r2,0(r2)
81121d90:	8884703a 	and	r2,r17,r2
81121d94:	10000126 	beq	r2,zero,81121d9c <__gethex+0x624>
81121d98:	9cc00094 	ori	r19,r19,2
81121d9c:	b80b883a 	mov	r5,r23
81121da0:	8009883a 	mov	r4,r16
81121da4:	11216780 	call	81121678 <rshift>
81121da8:	d8c00017 	ldw	r3,0(sp)
81121dac:	95e5c83a 	sub	r18,r18,r23
81121db0:	04400084 	movi	r17,2
81121db4:	1dc00117 	ldw	r23,4(r3)
81121db8:	003fa106 	br	81121c40 <__reset+0xfb101c40>
81121dbc:	85af883a 	add	r23,r16,r22
81121dc0:	b8800003 	ldbu	r2,0(r23)
81121dc4:	b821883a 	mov	r16,r23
81121dc8:	11003fcc 	andi	r4,r2,255
81121dcc:	a109883a 	add	r4,r20,r4
81121dd0:	21000003 	ldbu	r4,0(r4)
81121dd4:	203eaa26 	beq	r4,zero,81121880 <__reset+0xfb101880>
81121dd8:	84000044 	addi	r16,r16,1
81121ddc:	80800003 	ldbu	r2,0(r16)
81121de0:	11003fcc 	andi	r4,r2,255
81121de4:	a109883a 	add	r4,r20,r4
81121de8:	21000003 	ldbu	r4,0(r4)
81121dec:	203ffa1e 	bne	r4,zero,81121dd8 <__reset+0xfb101dd8>
81121df0:	003ea306 	br	81121880 <__reset+0xfb101880>
81121df4:	d9001617 	ldw	r4,88(sp)
81121df8:	00800044 	movi	r2,1
81121dfc:	1109c83a 	sub	r4,r2,r4
81121e00:	d9001615 	stw	r4,88(sp)
81121e04:	d8801617 	ldw	r2,88(sp)
81121e08:	103f9626 	beq	r2,zero,81121c64 <__reset+0xfb101c64>
81121e0c:	87000417 	ldw	fp,16(r16)
81121e10:	d9800217 	ldw	r6,8(sp)
81121e14:	013fffc4 	movi	r4,-1
81121e18:	e727883a 	add	r19,fp,fp
81121e1c:	9ce7883a 	add	r19,r19,r19
81121e20:	3005883a 	mov	r2,r6
81121e24:	34cb883a 	add	r5,r6,r19
81121e28:	00000306 	br	81121e38 <__gethex+0x6c0>
81121e2c:	10000015 	stw	zero,0(r2)
81121e30:	10800104 	addi	r2,r2,4
81121e34:	117f4c2e 	bgeu	r2,r5,81121b68 <__reset+0xfb101b68>
81121e38:	10c00017 	ldw	r3,0(r2)
81121e3c:	193ffb26 	beq	r3,r4,81121e2c <__reset+0xfb101e2c>
81121e40:	18c00044 	addi	r3,r3,1
81121e44:	10c00015 	stw	r3,0(r2)
81121e48:	00800084 	movi	r2,2
81121e4c:	88802b26 	beq	r17,r2,81121efc <__gethex+0x784>
81121e50:	948007cc 	andi	r18,r18,31
81121e54:	90002f1e 	bne	r18,zero,81121f14 <__gethex+0x79c>
81121e58:	04400844 	movi	r17,33
81121e5c:	003f8206 	br	81121c68 <__reset+0xfb101c68>
81121e60:	04c00044 	movi	r19,1
81121e64:	003fc106 	br	81121d6c <__reset+0xfb101d6c>
81121e68:	d8c01617 	ldw	r3,88(sp)
81121e6c:	183ed226 	beq	r3,zero,811219b8 <__reset+0xfb1019b8>
81121e70:	d8c00417 	ldw	r3,16(sp)
81121e74:	d9001517 	ldw	r4,84(sp)
81121e78:	18800015 	stw	r2,0(r3)
81121e7c:	d8c00217 	ldw	r3,8(sp)
81121e80:	00800044 	movi	r2,1
81121e84:	80800415 	stw	r2,16(r16)
81121e88:	18800015 	stw	r2,0(r3)
81121e8c:	24000015 	stw	r16,0(r4)
81121e90:	00801884 	movi	r2,98
81121e94:	003efa06 	br	81121a80 <__reset+0xfb101a80>
81121e98:	9880008c 	andi	r2,r19,2
81121e9c:	103f7126 	beq	r2,zero,81121c64 <__reset+0xfb101c64>
81121ea0:	d8c00217 	ldw	r3,8(sp)
81121ea4:	18800017 	ldw	r2,0(r3)
81121ea8:	9884b03a 	or	r2,r19,r2
81121eac:	1080004c 	andi	r2,r2,1
81121eb0:	103fd61e 	bne	r2,zero,81121e0c <__reset+0xfb101e0c>
81121eb4:	003f6b06 	br	81121c64 <__reset+0xfb101c64>
81121eb8:	da800217 	ldw	r10,8(sp)
81121ebc:	0013883a 	mov	r9,zero
81121ec0:	003e9f06 	br	81121940 <__reset+0xfb101940>
81121ec4:	04c00084 	movi	r19,2
81121ec8:	003f8806 	br	81121cec <__reset+0xfb101cec>
81121ecc:	d9001617 	ldw	r4,88(sp)
81121ed0:	203fe726 	beq	r4,zero,81121e70 <__reset+0xfb101e70>
81121ed4:	003eb806 	br	811219b8 <__reset+0xfb1019b8>
81121ed8:	95feb71e 	bne	r18,r23,811219b8 <__reset+0xfb1019b8>
81121edc:	1cbfe40e 	bge	r3,r18,81121e70 <__reset+0xfb101e70>
81121ee0:	917fffc4 	addi	r5,r18,-1
81121ee4:	8009883a 	mov	r4,r16
81121ee8:	111bd300 	call	8111bd30 <__any_on>
81121eec:	103eb226 	beq	r2,zero,811219b8 <__reset+0xfb1019b8>
81121ef0:	d8c00017 	ldw	r3,0(sp)
81121ef4:	18800117 	ldw	r2,4(r3)
81121ef8:	003fdd06 	br	81121e70 <__reset+0xfb101e70>
81121efc:	d8c00017 	ldw	r3,0(sp)
81121f00:	18800017 	ldw	r2,0(r3)
81121f04:	10bfffc4 	addi	r2,r2,-1
81121f08:	90801c26 	beq	r18,r2,81121f7c <__gethex+0x804>
81121f0c:	04400884 	movi	r17,34
81121f10:	003f5506 	br	81121c68 <__reset+0xfb101c68>
81121f14:	34c5883a 	add	r2,r6,r19
81121f18:	113fff17 	ldw	r4,-4(r2)
81121f1c:	111b06c0 	call	8111b06c <__hi0bits>
81121f20:	00c00804 	movi	r3,32
81121f24:	1ca5c83a 	sub	r18,r3,r18
81121f28:	14bfcb0e 	bge	r2,r18,81121e58 <__reset+0xfb101e58>
81121f2c:	003f1c06 	br	81121ba0 <__reset+0xfb101ba0>
81121f30:	81400117 	ldw	r5,4(r16)
81121f34:	d9000117 	ldw	r4,4(sp)
81121f38:	29400044 	addi	r5,r5,1
81121f3c:	111ad600 	call	8111ad60 <_Balloc>
81121f40:	81800417 	ldw	r6,16(r16)
81121f44:	81400304 	addi	r5,r16,12
81121f48:	11000304 	addi	r4,r2,12
81121f4c:	31800084 	addi	r6,r6,2
81121f50:	318d883a 	add	r6,r6,r6
81121f54:	318d883a 	add	r6,r6,r6
81121f58:	1029883a 	mov	r20,r2
81121f5c:	1110e4c0 	call	81110e4c <memcpy>
81121f60:	d9000117 	ldw	r4,4(sp)
81121f64:	800b883a 	mov	r5,r16
81121f68:	a021883a 	mov	r16,r20
81121f6c:	111ae100 	call	8111ae10 <_Bfree>
81121f70:	a0c00417 	ldw	r3,16(r20)
81121f74:	a1800504 	addi	r6,r20,20
81121f78:	003efe06 	br	81121b74 <__reset+0xfb101b74>
81121f7c:	9005d17a 	srai	r2,r18,5
81121f80:	944007cc 	andi	r17,r18,31
81121f84:	1085883a 	add	r2,r2,r2
81121f88:	1085883a 	add	r2,r2,r2
81121f8c:	3087883a 	add	r3,r6,r2
81121f90:	00800044 	movi	r2,1
81121f94:	1462983a 	sll	r17,r2,r17
81121f98:	18800017 	ldw	r2,0(r3)
81121f9c:	8884703a 	and	r2,r17,r2
81121fa0:	1022c03a 	cmpne	r17,r2,zero
81121fa4:	00800884 	movi	r2,34
81121fa8:	1463c83a 	sub	r17,r2,r17
81121fac:	003f2e06 	br	81121c68 <__reset+0xfb101c68>

81121fb0 <__hexnan>:
81121fb0:	defff904 	addi	sp,sp,-28
81121fb4:	de00012e 	bgeu	sp,et,81121fbc <__hexnan+0xc>
81121fb8:	003b68fa 	trap	3
81121fbc:	dc800215 	stw	r18,8(sp)
81121fc0:	2c800017 	ldw	r18,0(r5)
81121fc4:	dfc00615 	stw	ra,24(sp)
81121fc8:	dd400515 	stw	r21,20(sp)
81121fcc:	901fd17a 	srai	r15,r18,5
81121fd0:	dd000415 	stw	r20,16(sp)
81121fd4:	dcc00315 	stw	r19,12(sp)
81121fd8:	7bdf883a 	add	r15,r15,r15
81121fdc:	7bdf883a 	add	r15,r15,r15
81121fe0:	dc400115 	stw	r17,4(sp)
81121fe4:	dc000015 	stw	r16,0(sp)
81121fe8:	948007cc 	andi	r18,r18,31
81121fec:	33df883a 	add	r15,r6,r15
81121ff0:	90000126 	beq	r18,zero,81121ff8 <__hexnan+0x48>
81121ff4:	7bc00104 	addi	r15,r15,4
81121ff8:	22000017 	ldw	r8,0(r4)
81121ffc:	7affff04 	addi	r11,r15,-4
81122000:	03a04534 	movhi	r14,33044
81122004:	783fff15 	stw	zero,-4(r15)
81122008:	581b883a 	mov	r13,r11
8112200c:	580b883a 	mov	r5,r11
81122010:	000f883a 	mov	r7,zero
81122014:	003f883a 	mov	ra,zero
81122018:	0019883a 	mov	r12,zero
8112201c:	73b19f04 	addi	r14,r14,-14724
81122020:	04400204 	movi	r17,8
81122024:	04000804 	movi	r16,32
81122028:	04c001c4 	movi	r19,7
8112202c:	42000044 	addi	r8,r8,1
81122030:	40c00003 	ldbu	r3,0(r8)
81122034:	18001d26 	beq	r3,zero,811220ac <__hexnan+0xfc>
81122038:	70c5883a 	add	r2,r14,r3
8112203c:	10800003 	ldbu	r2,0(r2)
81122040:	12403fcc 	andi	r9,r2,255
81122044:	4800301e 	bne	r9,zero,81122108 <__hexnan+0x158>
81122048:	80c04236 	bltu	r16,r3,81122154 <__hexnan+0x1a4>
8112204c:	fb3ff70e 	bge	ra,r12,8112202c <__reset+0xfb10202c>
81122050:	2b40112e 	bgeu	r5,r13,81122098 <__hexnan+0xe8>
81122054:	99c01016 	blt	r19,r7,81122098 <__hexnan+0xe8>
81122058:	89e9c83a 	sub	r20,r17,r7
8112205c:	a529883a 	add	r20,r20,r20
81122060:	2a800017 	ldw	r10,0(r5)
81122064:	a529883a 	add	r20,r20,r20
81122068:	852bc83a 	sub	r21,r16,r20
8112206c:	28c00104 	addi	r3,r5,4
81122070:	2805883a 	mov	r2,r5
81122074:	19c00017 	ldw	r7,0(r3)
81122078:	10800104 	addi	r2,r2,4
8112207c:	18c00104 	addi	r3,r3,4
81122080:	3d52983a 	sll	r9,r7,r21
81122084:	4a92b03a 	or	r9,r9,r10
81122088:	3d14d83a 	srl	r10,r7,r20
8112208c:	127fff15 	stw	r9,-4(r2)
81122090:	1abfff15 	stw	r10,-4(r3)
81122094:	137ff736 	bltu	r2,r13,81122074 <__reset+0xfb102074>
81122098:	31402836 	bltu	r6,r5,8112213c <__hexnan+0x18c>
8112209c:	42000044 	addi	r8,r8,1
811220a0:	40c00003 	ldbu	r3,0(r8)
811220a4:	01c00204 	movi	r7,8
811220a8:	183fe31e 	bne	r3,zero,81122038 <__reset+0xfb102038>
811220ac:	60002b26 	beq	r12,zero,8112215c <__hexnan+0x1ac>
811220b0:	2b40022e 	bgeu	r5,r13,811220bc <__hexnan+0x10c>
811220b4:	008001c4 	movi	r2,7
811220b8:	11c0430e 	bge	r2,r7,811221c8 <__hexnan+0x218>
811220bc:	3140312e 	bgeu	r6,r5,81122184 <__hexnan+0x1d4>
811220c0:	3007883a 	mov	r3,r6
811220c4:	29000017 	ldw	r4,0(r5)
811220c8:	18800104 	addi	r2,r3,4
811220cc:	29400104 	addi	r5,r5,4
811220d0:	19000015 	stw	r4,0(r3)
811220d4:	1007883a 	mov	r3,r2
811220d8:	597ffa2e 	bgeu	r11,r5,811220c4 <__reset+0xfb1020c4>
811220dc:	10000015 	stw	zero,0(r2)
811220e0:	10800104 	addi	r2,r2,4
811220e4:	58bffd2e 	bgeu	r11,r2,811220dc <__reset+0xfb1020dc>
811220e8:	78bfff17 	ldw	r2,-4(r15)
811220ec:	1000041e 	bne	r2,zero,81122100 <__hexnan+0x150>
811220f0:	32c02d26 	beq	r6,r11,811221a8 <__hexnan+0x1f8>
811220f4:	5affff04 	addi	r11,r11,-4
811220f8:	58800017 	ldw	r2,0(r11)
811220fc:	103ffc26 	beq	r2,zero,811220f0 <__reset+0xfb1020f0>
81122100:	00800144 	movi	r2,5
81122104:	00001606 	br	81122160 <__hexnan+0x1b0>
81122108:	39c00044 	addi	r7,r7,1
8112210c:	63000044 	addi	r12,r12,1
81122110:	89c0040e 	bge	r17,r7,81122124 <__hexnan+0x174>
81122114:	317fc52e 	bgeu	r6,r5,8112202c <__reset+0xfb10202c>
81122118:	283fff15 	stw	zero,-4(r5)
8112211c:	01c00044 	movi	r7,1
81122120:	297fff04 	addi	r5,r5,-4
81122124:	28c00017 	ldw	r3,0(r5)
81122128:	108003cc 	andi	r2,r2,15
8112212c:	1806913a 	slli	r3,r3,4
81122130:	1884b03a 	or	r2,r3,r2
81122134:	28800015 	stw	r2,0(r5)
81122138:	003fbc06 	br	8112202c <__reset+0xfb10202c>
8112213c:	2b7fff04 	addi	r13,r5,-4
81122140:	283fff15 	stw	zero,-4(r5)
81122144:	603f883a 	mov	ra,r12
81122148:	680b883a 	mov	r5,r13
8112214c:	000f883a 	mov	r7,zero
81122150:	003fb606 	br	8112202c <__reset+0xfb10202c>
81122154:	00800a44 	movi	r2,41
81122158:	18801726 	beq	r3,r2,811221b8 <__hexnan+0x208>
8112215c:	00800104 	movi	r2,4
81122160:	dfc00617 	ldw	ra,24(sp)
81122164:	dd400517 	ldw	r21,20(sp)
81122168:	dd000417 	ldw	r20,16(sp)
8112216c:	dcc00317 	ldw	r19,12(sp)
81122170:	dc800217 	ldw	r18,8(sp)
81122174:	dc400117 	ldw	r17,4(sp)
81122178:	dc000017 	ldw	r16,0(sp)
8112217c:	dec00704 	addi	sp,sp,28
81122180:	f800283a 	ret
81122184:	903fd826 	beq	r18,zero,811220e8 <__reset+0xfb1020e8>
81122188:	00c00804 	movi	r3,32
8112218c:	1ca5c83a 	sub	r18,r3,r18
81122190:	00ffffc4 	movi	r3,-1
81122194:	78bfff17 	ldw	r2,-4(r15)
81122198:	1c86d83a 	srl	r3,r3,r18
8112219c:	1884703a 	and	r2,r3,r2
811221a0:	78bfff15 	stw	r2,-4(r15)
811221a4:	003fd106 	br	811220ec <__reset+0xfb1020ec>
811221a8:	00800044 	movi	r2,1
811221ac:	58800015 	stw	r2,0(r11)
811221b0:	00800144 	movi	r2,5
811221b4:	003fea06 	br	81122160 <__reset+0xfb102160>
811221b8:	42000044 	addi	r8,r8,1
811221bc:	22000015 	stw	r8,0(r4)
811221c0:	603fbb1e 	bne	r12,zero,811220b0 <__reset+0xfb1020b0>
811221c4:	003fe506 	br	8112215c <__reset+0xfb10215c>
811221c8:	02400204 	movi	r9,8
811221cc:	49d3c83a 	sub	r9,r9,r7
811221d0:	4a53883a 	add	r9,r9,r9
811221d4:	2a000017 	ldw	r8,0(r5)
811221d8:	4a53883a 	add	r9,r9,r9
811221dc:	02800804 	movi	r10,32
811221e0:	5255c83a 	sub	r10,r10,r9
811221e4:	28c00104 	addi	r3,r5,4
811221e8:	2805883a 	mov	r2,r5
811221ec:	19c00017 	ldw	r7,0(r3)
811221f0:	10800104 	addi	r2,r2,4
811221f4:	18c00104 	addi	r3,r3,4
811221f8:	3a88983a 	sll	r4,r7,r10
811221fc:	2208b03a 	or	r4,r4,r8
81122200:	3a50d83a 	srl	r8,r7,r9
81122204:	113fff15 	stw	r4,-4(r2)
81122208:	1a3fff15 	stw	r8,-4(r3)
8112220c:	137ff736 	bltu	r2,r13,811221ec <__reset+0xfb1021ec>
81122210:	003faa06 	br	811220bc <__reset+0xfb1020bc>

81122214 <strncmp>:
81122214:	30003126 	beq	r6,zero,811222dc <strncmp+0xc8>
81122218:	2144b03a 	or	r2,r4,r5
8112221c:	108000cc 	andi	r2,r2,3
81122220:	10001e1e 	bne	r2,zero,8112229c <strncmp+0x88>
81122224:	024000c4 	movi	r9,3
81122228:	49801c2e 	bgeu	r9,r6,8112229c <strncmp+0x88>
8112222c:	20800017 	ldw	r2,0(r4)
81122230:	28c00017 	ldw	r3,0(r5)
81122234:	10c0191e 	bne	r2,r3,8112229c <strncmp+0x88>
81122238:	31bfff04 	addi	r6,r6,-4
8112223c:	30002726 	beq	r6,zero,811222dc <strncmp+0xc8>
81122240:	02ffbff4 	movhi	r11,65279
81122244:	5affbfc4 	addi	r11,r11,-257
81122248:	0086303a 	nor	r3,zero,r2
8112224c:	02a02074 	movhi	r10,32897
81122250:	12c5883a 	add	r2,r2,r11
81122254:	52a02004 	addi	r10,r10,-32640
81122258:	10c4703a 	and	r2,r2,r3
8112225c:	1284703a 	and	r2,r2,r10
81122260:	10000b26 	beq	r2,zero,81122290 <strncmp+0x7c>
81122264:	00001d06 	br	811222dc <strncmp+0xc8>
81122268:	20c00017 	ldw	r3,0(r4)
8112226c:	29c00017 	ldw	r7,0(r5)
81122270:	1ad1883a 	add	r8,r3,r11
81122274:	00c4303a 	nor	r2,zero,r3
81122278:	4084703a 	and	r2,r8,r2
8112227c:	1284703a 	and	r2,r2,r10
81122280:	19c0061e 	bne	r3,r7,8112229c <strncmp+0x88>
81122284:	31bfff04 	addi	r6,r6,-4
81122288:	30001426 	beq	r6,zero,811222dc <strncmp+0xc8>
8112228c:	1000131e 	bne	r2,zero,811222dc <strncmp+0xc8>
81122290:	21000104 	addi	r4,r4,4
81122294:	29400104 	addi	r5,r5,4
81122298:	49bff336 	bltu	r9,r6,81122268 <__reset+0xfb102268>
8112229c:	28800007 	ldb	r2,0(r5)
811222a0:	20c00007 	ldb	r3,0(r4)
811222a4:	31bfffc4 	addi	r6,r6,-1
811222a8:	10c0081e 	bne	r2,r3,811222cc <strncmp+0xb8>
811222ac:	30000b26 	beq	r6,zero,811222dc <strncmp+0xc8>
811222b0:	10000a26 	beq	r2,zero,811222dc <strncmp+0xc8>
811222b4:	21000044 	addi	r4,r4,1
811222b8:	29400044 	addi	r5,r5,1
811222bc:	20800007 	ldb	r2,0(r4)
811222c0:	28c00007 	ldb	r3,0(r5)
811222c4:	31bfffc4 	addi	r6,r6,-1
811222c8:	10fff826 	beq	r2,r3,811222ac <__reset+0xfb1022ac>
811222cc:	20800003 	ldbu	r2,0(r4)
811222d0:	28c00003 	ldbu	r3,0(r5)
811222d4:	10c5c83a 	sub	r2,r2,r3
811222d8:	f800283a 	ret
811222dc:	0005883a 	mov	r2,zero
811222e0:	f800283a 	ret

811222e4 <__swbuf_r>:
811222e4:	defffb04 	addi	sp,sp,-20
811222e8:	de00012e 	bgeu	sp,et,811222f0 <__swbuf_r+0xc>
811222ec:	003b68fa 	trap	3
811222f0:	dcc00315 	stw	r19,12(sp)
811222f4:	dc800215 	stw	r18,8(sp)
811222f8:	dc000015 	stw	r16,0(sp)
811222fc:	dfc00415 	stw	ra,16(sp)
81122300:	dc400115 	stw	r17,4(sp)
81122304:	2025883a 	mov	r18,r4
81122308:	2827883a 	mov	r19,r5
8112230c:	3021883a 	mov	r16,r6
81122310:	20000226 	beq	r4,zero,8112231c <__swbuf_r+0x38>
81122314:	20800e17 	ldw	r2,56(r4)
81122318:	10004226 	beq	r2,zero,81122424 <__swbuf_r+0x140>
8112231c:	80800617 	ldw	r2,24(r16)
81122320:	8100030b 	ldhu	r4,12(r16)
81122324:	80800215 	stw	r2,8(r16)
81122328:	2080020c 	andi	r2,r4,8
8112232c:	10003626 	beq	r2,zero,81122408 <__swbuf_r+0x124>
81122330:	80c00417 	ldw	r3,16(r16)
81122334:	18003426 	beq	r3,zero,81122408 <__swbuf_r+0x124>
81122338:	2088000c 	andi	r2,r4,8192
8112233c:	9c403fcc 	andi	r17,r19,255
81122340:	10001a26 	beq	r2,zero,811223ac <__swbuf_r+0xc8>
81122344:	80800017 	ldw	r2,0(r16)
81122348:	81000517 	ldw	r4,20(r16)
8112234c:	10c7c83a 	sub	r3,r2,r3
81122350:	1900200e 	bge	r3,r4,811223d4 <__swbuf_r+0xf0>
81122354:	18c00044 	addi	r3,r3,1
81122358:	81000217 	ldw	r4,8(r16)
8112235c:	11400044 	addi	r5,r2,1
81122360:	81400015 	stw	r5,0(r16)
81122364:	213fffc4 	addi	r4,r4,-1
81122368:	81000215 	stw	r4,8(r16)
8112236c:	14c00005 	stb	r19,0(r2)
81122370:	80800517 	ldw	r2,20(r16)
81122374:	10c01e26 	beq	r2,r3,811223f0 <__swbuf_r+0x10c>
81122378:	8080030b 	ldhu	r2,12(r16)
8112237c:	1080004c 	andi	r2,r2,1
81122380:	10000226 	beq	r2,zero,8112238c <__swbuf_r+0xa8>
81122384:	00800284 	movi	r2,10
81122388:	88801926 	beq	r17,r2,811223f0 <__swbuf_r+0x10c>
8112238c:	8805883a 	mov	r2,r17
81122390:	dfc00417 	ldw	ra,16(sp)
81122394:	dcc00317 	ldw	r19,12(sp)
81122398:	dc800217 	ldw	r18,8(sp)
8112239c:	dc400117 	ldw	r17,4(sp)
811223a0:	dc000017 	ldw	r16,0(sp)
811223a4:	dec00504 	addi	sp,sp,20
811223a8:	f800283a 	ret
811223ac:	81401917 	ldw	r5,100(r16)
811223b0:	00b7ffc4 	movi	r2,-8193
811223b4:	21080014 	ori	r4,r4,8192
811223b8:	2884703a 	and	r2,r5,r2
811223bc:	80801915 	stw	r2,100(r16)
811223c0:	80800017 	ldw	r2,0(r16)
811223c4:	8100030d 	sth	r4,12(r16)
811223c8:	81000517 	ldw	r4,20(r16)
811223cc:	10c7c83a 	sub	r3,r2,r3
811223d0:	193fe016 	blt	r3,r4,81122354 <__reset+0xfb102354>
811223d4:	800b883a 	mov	r5,r16
811223d8:	9009883a 	mov	r4,r18
811223dc:	11194fc0 	call	811194fc <_fflush_r>
811223e0:	1000071e 	bne	r2,zero,81122400 <__swbuf_r+0x11c>
811223e4:	80800017 	ldw	r2,0(r16)
811223e8:	00c00044 	movi	r3,1
811223ec:	003fda06 	br	81122358 <__reset+0xfb102358>
811223f0:	800b883a 	mov	r5,r16
811223f4:	9009883a 	mov	r4,r18
811223f8:	11194fc0 	call	811194fc <_fflush_r>
811223fc:	103fe326 	beq	r2,zero,8112238c <__reset+0xfb10238c>
81122400:	00bfffc4 	movi	r2,-1
81122404:	003fe206 	br	81122390 <__reset+0xfb102390>
81122408:	800b883a 	mov	r5,r16
8112240c:	9009883a 	mov	r4,r18
81122410:	11178880 	call	81117888 <__swsetup_r>
81122414:	103ffa1e 	bne	r2,zero,81122400 <__reset+0xfb102400>
81122418:	8100030b 	ldhu	r4,12(r16)
8112241c:	80c00417 	ldw	r3,16(r16)
81122420:	003fc506 	br	81122338 <__reset+0xfb102338>
81122424:	11198f80 	call	811198f8 <__sinit>
81122428:	003fbc06 	br	8112231c <__reset+0xfb10231c>

8112242c <__swbuf>:
8112242c:	00a04534 	movhi	r2,33044
81122430:	10ba0604 	addi	r2,r2,-6120
81122434:	280d883a 	mov	r6,r5
81122438:	200b883a 	mov	r5,r4
8112243c:	11000017 	ldw	r4,0(r2)
81122440:	11222e41 	jmpi	811222e4 <__swbuf_r>

81122444 <_wcrtomb_r>:
81122444:	defff604 	addi	sp,sp,-40
81122448:	00a04534 	movhi	r2,33044
8112244c:	de00012e 	bgeu	sp,et,81122454 <_wcrtomb_r+0x10>
81122450:	003b68fa 	trap	3
81122454:	10ba0b04 	addi	r2,r2,-6100
81122458:	dc800815 	stw	r18,32(sp)
8112245c:	dc400715 	stw	r17,28(sp)
81122460:	dc000615 	stw	r16,24(sp)
81122464:	dfc00915 	stw	ra,36(sp)
81122468:	2021883a 	mov	r16,r4
8112246c:	3823883a 	mov	r17,r7
81122470:	14800017 	ldw	r18,0(r2)
81122474:	28001426 	beq	r5,zero,811224c8 <_wcrtomb_r+0x84>
81122478:	d9400415 	stw	r5,16(sp)
8112247c:	d9800515 	stw	r6,20(sp)
81122480:	111a8140 	call	8111a814 <__locale_charset>
81122484:	d9800517 	ldw	r6,20(sp)
81122488:	d9400417 	ldw	r5,16(sp)
8112248c:	100f883a 	mov	r7,r2
81122490:	dc400015 	stw	r17,0(sp)
81122494:	8009883a 	mov	r4,r16
81122498:	903ee83a 	callr	r18
8112249c:	00ffffc4 	movi	r3,-1
811224a0:	10c0031e 	bne	r2,r3,811224b0 <_wcrtomb_r+0x6c>
811224a4:	88000015 	stw	zero,0(r17)
811224a8:	00c02284 	movi	r3,138
811224ac:	80c00015 	stw	r3,0(r16)
811224b0:	dfc00917 	ldw	ra,36(sp)
811224b4:	dc800817 	ldw	r18,32(sp)
811224b8:	dc400717 	ldw	r17,28(sp)
811224bc:	dc000617 	ldw	r16,24(sp)
811224c0:	dec00a04 	addi	sp,sp,40
811224c4:	f800283a 	ret
811224c8:	111a8140 	call	8111a814 <__locale_charset>
811224cc:	100f883a 	mov	r7,r2
811224d0:	dc400015 	stw	r17,0(sp)
811224d4:	000d883a 	mov	r6,zero
811224d8:	d9400104 	addi	r5,sp,4
811224dc:	8009883a 	mov	r4,r16
811224e0:	903ee83a 	callr	r18
811224e4:	003fed06 	br	8112249c <__reset+0xfb10249c>

811224e8 <wcrtomb>:
811224e8:	defff604 	addi	sp,sp,-40
811224ec:	00a04534 	movhi	r2,33044
811224f0:	de00012e 	bgeu	sp,et,811224f8 <wcrtomb+0x10>
811224f4:	003b68fa 	trap	3
811224f8:	10ba0604 	addi	r2,r2,-6120
811224fc:	dc800615 	stw	r18,24(sp)
81122500:	dc400515 	stw	r17,20(sp)
81122504:	dfc00915 	stw	ra,36(sp)
81122508:	dd000815 	stw	r20,32(sp)
8112250c:	dcc00715 	stw	r19,28(sp)
81122510:	dc000415 	stw	r16,16(sp)
81122514:	3025883a 	mov	r18,r6
81122518:	14400017 	ldw	r17,0(r2)
8112251c:	20001926 	beq	r4,zero,81122584 <wcrtomb+0x9c>
81122520:	00a04534 	movhi	r2,33044
81122524:	10ba0b04 	addi	r2,r2,-6100
81122528:	15000017 	ldw	r20,0(r2)
8112252c:	2021883a 	mov	r16,r4
81122530:	2827883a 	mov	r19,r5
81122534:	111a8140 	call	8111a814 <__locale_charset>
81122538:	100f883a 	mov	r7,r2
8112253c:	dc800015 	stw	r18,0(sp)
81122540:	980d883a 	mov	r6,r19
81122544:	800b883a 	mov	r5,r16
81122548:	8809883a 	mov	r4,r17
8112254c:	a03ee83a 	callr	r20
81122550:	00ffffc4 	movi	r3,-1
81122554:	10c0031e 	bne	r2,r3,81122564 <wcrtomb+0x7c>
81122558:	90000015 	stw	zero,0(r18)
8112255c:	00c02284 	movi	r3,138
81122560:	88c00015 	stw	r3,0(r17)
81122564:	dfc00917 	ldw	ra,36(sp)
81122568:	dd000817 	ldw	r20,32(sp)
8112256c:	dcc00717 	ldw	r19,28(sp)
81122570:	dc800617 	ldw	r18,24(sp)
81122574:	dc400517 	ldw	r17,20(sp)
81122578:	dc000417 	ldw	r16,16(sp)
8112257c:	dec00a04 	addi	sp,sp,40
81122580:	f800283a 	ret
81122584:	00a04534 	movhi	r2,33044
81122588:	10ba0b04 	addi	r2,r2,-6100
8112258c:	14000017 	ldw	r16,0(r2)
81122590:	111a8140 	call	8111a814 <__locale_charset>
81122594:	100f883a 	mov	r7,r2
81122598:	dc800015 	stw	r18,0(sp)
8112259c:	000d883a 	mov	r6,zero
811225a0:	d9400104 	addi	r5,sp,4
811225a4:	8809883a 	mov	r4,r17
811225a8:	803ee83a 	callr	r16
811225ac:	003fe806 	br	81122550 <__reset+0xfb102550>

811225b0 <__ascii_wctomb>:
811225b0:	28000526 	beq	r5,zero,811225c8 <__ascii_wctomb+0x18>
811225b4:	00803fc4 	movi	r2,255
811225b8:	11800536 	bltu	r2,r6,811225d0 <__ascii_wctomb+0x20>
811225bc:	29800005 	stb	r6,0(r5)
811225c0:	00800044 	movi	r2,1
811225c4:	f800283a 	ret
811225c8:	0005883a 	mov	r2,zero
811225cc:	f800283a 	ret
811225d0:	00802284 	movi	r2,138
811225d4:	20800015 	stw	r2,0(r4)
811225d8:	00bfffc4 	movi	r2,-1
811225dc:	f800283a 	ret

811225e0 <_wctomb_r>:
811225e0:	00a04534 	movhi	r2,33044
811225e4:	defff904 	addi	sp,sp,-28
811225e8:	10ba0b04 	addi	r2,r2,-6100
811225ec:	de00012e 	bgeu	sp,et,811225f4 <_wctomb_r+0x14>
811225f0:	003b68fa 	trap	3
811225f4:	dfc00615 	stw	ra,24(sp)
811225f8:	dc400515 	stw	r17,20(sp)
811225fc:	dc000415 	stw	r16,16(sp)
81122600:	3823883a 	mov	r17,r7
81122604:	14000017 	ldw	r16,0(r2)
81122608:	d9000115 	stw	r4,4(sp)
8112260c:	d9400215 	stw	r5,8(sp)
81122610:	d9800315 	stw	r6,12(sp)
81122614:	111a8140 	call	8111a814 <__locale_charset>
81122618:	d9800317 	ldw	r6,12(sp)
8112261c:	d9400217 	ldw	r5,8(sp)
81122620:	d9000117 	ldw	r4,4(sp)
81122624:	100f883a 	mov	r7,r2
81122628:	dc400015 	stw	r17,0(sp)
8112262c:	803ee83a 	callr	r16
81122630:	dfc00617 	ldw	ra,24(sp)
81122634:	dc400517 	ldw	r17,20(sp)
81122638:	dc000417 	ldw	r16,16(sp)
8112263c:	dec00704 	addi	sp,sp,28
81122640:	f800283a 	ret

81122644 <__fixunsdfsi>:
81122644:	defffd04 	addi	sp,sp,-12
81122648:	000d883a 	mov	r6,zero
8112264c:	01d07834 	movhi	r7,16864
81122650:	de00012e 	bgeu	sp,et,81122658 <__fixunsdfsi+0x14>
81122654:	003b68fa 	trap	3
81122658:	dc400115 	stw	r17,4(sp)
8112265c:	dc000015 	stw	r16,0(sp)
81122660:	dfc00215 	stw	ra,8(sp)
81122664:	2023883a 	mov	r17,r4
81122668:	2821883a 	mov	r16,r5
8112266c:	112475c0 	call	8112475c <__gedf2>
81122670:	1000080e 	bge	r2,zero,81122694 <__fixunsdfsi+0x50>
81122674:	8809883a 	mov	r4,r17
81122678:	800b883a 	mov	r5,r16
8112267c:	11252300 	call	81125230 <__fixdfsi>
81122680:	dfc00217 	ldw	ra,8(sp)
81122684:	dc400117 	ldw	r17,4(sp)
81122688:	dc000017 	ldw	r16,0(sp)
8112268c:	dec00304 	addi	sp,sp,12
81122690:	f800283a 	ret
81122694:	000d883a 	mov	r6,zero
81122698:	01d07834 	movhi	r7,16864
8112269c:	8809883a 	mov	r4,r17
811226a0:	800b883a 	mov	r5,r16
811226a4:	112492c0 	call	8112492c <__subdf3>
811226a8:	180b883a 	mov	r5,r3
811226ac:	1009883a 	mov	r4,r2
811226b0:	11252300 	call	81125230 <__fixdfsi>
811226b4:	00e00034 	movhi	r3,32768
811226b8:	10c5883a 	add	r2,r2,r3
811226bc:	003ff006 	br	81122680 <__reset+0xfb102680>

811226c0 <__udivdi3>:
811226c0:	defff504 	addi	sp,sp,-44
811226c4:	de00012e 	bgeu	sp,et,811226cc <__udivdi3+0xc>
811226c8:	003b68fa 	trap	3
811226cc:	dcc00415 	stw	r19,16(sp)
811226d0:	dc000115 	stw	r16,4(sp)
811226d4:	dfc00a15 	stw	ra,40(sp)
811226d8:	df000915 	stw	fp,36(sp)
811226dc:	ddc00815 	stw	r23,32(sp)
811226e0:	dd800715 	stw	r22,28(sp)
811226e4:	dd400615 	stw	r21,24(sp)
811226e8:	dd000515 	stw	r20,20(sp)
811226ec:	dc800315 	stw	r18,12(sp)
811226f0:	dc400215 	stw	r17,8(sp)
811226f4:	2027883a 	mov	r19,r4
811226f8:	2821883a 	mov	r16,r5
811226fc:	3800411e 	bne	r7,zero,81122804 <__udivdi3+0x144>
81122700:	3023883a 	mov	r17,r6
81122704:	2025883a 	mov	r18,r4
81122708:	2980522e 	bgeu	r5,r6,81122854 <__udivdi3+0x194>
8112270c:	00bfffd4 	movui	r2,65535
81122710:	282d883a 	mov	r22,r5
81122714:	1180a836 	bltu	r2,r6,811229b8 <__udivdi3+0x2f8>
81122718:	00803fc4 	movi	r2,255
8112271c:	1185803a 	cmpltu	r2,r2,r6
81122720:	100490fa 	slli	r2,r2,3
81122724:	3086d83a 	srl	r3,r6,r2
81122728:	01204534 	movhi	r4,33044
8112272c:	21301904 	addi	r4,r4,-16284
81122730:	20c7883a 	add	r3,r4,r3
81122734:	18c00003 	ldbu	r3,0(r3)
81122738:	1885883a 	add	r2,r3,r2
8112273c:	00c00804 	movi	r3,32
81122740:	1887c83a 	sub	r3,r3,r2
81122744:	18000526 	beq	r3,zero,8112275c <__udivdi3+0x9c>
81122748:	80e0983a 	sll	r16,r16,r3
8112274c:	9884d83a 	srl	r2,r19,r2
81122750:	30e2983a 	sll	r17,r6,r3
81122754:	98e4983a 	sll	r18,r19,r3
81122758:	142cb03a 	or	r22,r2,r16
8112275c:	882ad43a 	srli	r21,r17,16
81122760:	b009883a 	mov	r4,r22
81122764:	8d3fffcc 	andi	r20,r17,65535
81122768:	a80b883a 	mov	r5,r21
8112276c:	11232dc0 	call	811232dc <__umodsi3>
81122770:	b009883a 	mov	r4,r22
81122774:	a80b883a 	mov	r5,r21
81122778:	1027883a 	mov	r19,r2
8112277c:	11232780 	call	81123278 <__udivsi3>
81122780:	102d883a 	mov	r22,r2
81122784:	9826943a 	slli	r19,r19,16
81122788:	9004d43a 	srli	r2,r18,16
8112278c:	a5a1383a 	mul	r16,r20,r22
81122790:	14c4b03a 	or	r2,r2,r19
81122794:	1400052e 	bgeu	r2,r16,811227ac <__udivdi3+0xec>
81122798:	1445883a 	add	r2,r2,r17
8112279c:	b0ffffc4 	addi	r3,r22,-1
811227a0:	14400136 	bltu	r2,r17,811227a8 <__udivdi3+0xe8>
811227a4:	14012336 	bltu	r2,r16,81122c34 <__udivdi3+0x574>
811227a8:	182d883a 	mov	r22,r3
811227ac:	1421c83a 	sub	r16,r2,r16
811227b0:	a80b883a 	mov	r5,r21
811227b4:	8009883a 	mov	r4,r16
811227b8:	11232dc0 	call	811232dc <__umodsi3>
811227bc:	1027883a 	mov	r19,r2
811227c0:	a80b883a 	mov	r5,r21
811227c4:	8009883a 	mov	r4,r16
811227c8:	11232780 	call	81123278 <__udivsi3>
811227cc:	9826943a 	slli	r19,r19,16
811227d0:	a0a9383a 	mul	r20,r20,r2
811227d4:	94bfffcc 	andi	r18,r18,65535
811227d8:	94e4b03a 	or	r18,r18,r19
811227dc:	9500052e 	bgeu	r18,r20,811227f4 <__udivdi3+0x134>
811227e0:	8ca5883a 	add	r18,r17,r18
811227e4:	10ffffc4 	addi	r3,r2,-1
811227e8:	9440f136 	bltu	r18,r17,81122bb0 <__udivdi3+0x4f0>
811227ec:	9500f02e 	bgeu	r18,r20,81122bb0 <__udivdi3+0x4f0>
811227f0:	10bfff84 	addi	r2,r2,-2
811227f4:	b00c943a 	slli	r6,r22,16
811227f8:	0007883a 	mov	r3,zero
811227fc:	3084b03a 	or	r2,r6,r2
81122800:	00005906 	br	81122968 <__udivdi3+0x2a8>
81122804:	29c05636 	bltu	r5,r7,81122960 <__udivdi3+0x2a0>
81122808:	00bfffd4 	movui	r2,65535
8112280c:	11c0622e 	bgeu	r2,r7,81122998 <__udivdi3+0x2d8>
81122810:	00804034 	movhi	r2,256
81122814:	10bfffc4 	addi	r2,r2,-1
81122818:	11c0ee36 	bltu	r2,r7,81122bd4 <__udivdi3+0x514>
8112281c:	00800404 	movi	r2,16
81122820:	3886d83a 	srl	r3,r7,r2
81122824:	01204534 	movhi	r4,33044
81122828:	21301904 	addi	r4,r4,-16284
8112282c:	20c7883a 	add	r3,r4,r3
81122830:	18c00003 	ldbu	r3,0(r3)
81122834:	05400804 	movi	r21,32
81122838:	1885883a 	add	r2,r3,r2
8112283c:	a8abc83a 	sub	r21,r21,r2
81122840:	a800621e 	bne	r21,zero,811229cc <__udivdi3+0x30c>
81122844:	3c00e936 	bltu	r7,r16,81122bec <__udivdi3+0x52c>
81122848:	9985403a 	cmpgeu	r2,r19,r6
8112284c:	0007883a 	mov	r3,zero
81122850:	00004506 	br	81122968 <__udivdi3+0x2a8>
81122854:	3000041e 	bne	r6,zero,81122868 <__udivdi3+0x1a8>
81122858:	000b883a 	mov	r5,zero
8112285c:	01000044 	movi	r4,1
81122860:	11232780 	call	81123278 <__udivsi3>
81122864:	1023883a 	mov	r17,r2
81122868:	00bfffd4 	movui	r2,65535
8112286c:	14404e2e 	bgeu	r2,r17,811229a8 <__udivdi3+0x2e8>
81122870:	00804034 	movhi	r2,256
81122874:	10bfffc4 	addi	r2,r2,-1
81122878:	1440d836 	bltu	r2,r17,81122bdc <__udivdi3+0x51c>
8112287c:	00800404 	movi	r2,16
81122880:	8886d83a 	srl	r3,r17,r2
81122884:	01204534 	movhi	r4,33044
81122888:	21301904 	addi	r4,r4,-16284
8112288c:	20c7883a 	add	r3,r4,r3
81122890:	18c00003 	ldbu	r3,0(r3)
81122894:	1885883a 	add	r2,r3,r2
81122898:	00c00804 	movi	r3,32
8112289c:	1887c83a 	sub	r3,r3,r2
811228a0:	18008f1e 	bne	r3,zero,81122ae0 <__udivdi3+0x420>
811228a4:	882ad43a 	srli	r21,r17,16
811228a8:	8461c83a 	sub	r16,r16,r17
811228ac:	8d3fffcc 	andi	r20,r17,65535
811228b0:	00c00044 	movi	r3,1
811228b4:	8009883a 	mov	r4,r16
811228b8:	a80b883a 	mov	r5,r21
811228bc:	d8c00015 	stw	r3,0(sp)
811228c0:	11232dc0 	call	811232dc <__umodsi3>
811228c4:	8009883a 	mov	r4,r16
811228c8:	a80b883a 	mov	r5,r21
811228cc:	1027883a 	mov	r19,r2
811228d0:	11232780 	call	81123278 <__udivsi3>
811228d4:	9826943a 	slli	r19,r19,16
811228d8:	9008d43a 	srli	r4,r18,16
811228dc:	1521383a 	mul	r16,r2,r20
811228e0:	102d883a 	mov	r22,r2
811228e4:	24c8b03a 	or	r4,r4,r19
811228e8:	d8c00017 	ldw	r3,0(sp)
811228ec:	2400052e 	bgeu	r4,r16,81122904 <__udivdi3+0x244>
811228f0:	2449883a 	add	r4,r4,r17
811228f4:	b0bfffc4 	addi	r2,r22,-1
811228f8:	24400136 	bltu	r4,r17,81122900 <__udivdi3+0x240>
811228fc:	2400ca36 	bltu	r4,r16,81122c28 <__udivdi3+0x568>
81122900:	102d883a 	mov	r22,r2
81122904:	2421c83a 	sub	r16,r4,r16
81122908:	a80b883a 	mov	r5,r21
8112290c:	8009883a 	mov	r4,r16
81122910:	d8c00015 	stw	r3,0(sp)
81122914:	11232dc0 	call	811232dc <__umodsi3>
81122918:	1027883a 	mov	r19,r2
8112291c:	a80b883a 	mov	r5,r21
81122920:	8009883a 	mov	r4,r16
81122924:	11232780 	call	81123278 <__udivsi3>
81122928:	9826943a 	slli	r19,r19,16
8112292c:	1529383a 	mul	r20,r2,r20
81122930:	94bfffcc 	andi	r18,r18,65535
81122934:	94e4b03a 	or	r18,r18,r19
81122938:	d8c00017 	ldw	r3,0(sp)
8112293c:	9500052e 	bgeu	r18,r20,81122954 <__udivdi3+0x294>
81122940:	8ca5883a 	add	r18,r17,r18
81122944:	113fffc4 	addi	r4,r2,-1
81122948:	94409736 	bltu	r18,r17,81122ba8 <__udivdi3+0x4e8>
8112294c:	9500962e 	bgeu	r18,r20,81122ba8 <__udivdi3+0x4e8>
81122950:	10bfff84 	addi	r2,r2,-2
81122954:	b00c943a 	slli	r6,r22,16
81122958:	3084b03a 	or	r2,r6,r2
8112295c:	00000206 	br	81122968 <__udivdi3+0x2a8>
81122960:	0007883a 	mov	r3,zero
81122964:	0005883a 	mov	r2,zero
81122968:	dfc00a17 	ldw	ra,40(sp)
8112296c:	df000917 	ldw	fp,36(sp)
81122970:	ddc00817 	ldw	r23,32(sp)
81122974:	dd800717 	ldw	r22,28(sp)
81122978:	dd400617 	ldw	r21,24(sp)
8112297c:	dd000517 	ldw	r20,20(sp)
81122980:	dcc00417 	ldw	r19,16(sp)
81122984:	dc800317 	ldw	r18,12(sp)
81122988:	dc400217 	ldw	r17,8(sp)
8112298c:	dc000117 	ldw	r16,4(sp)
81122990:	dec00b04 	addi	sp,sp,44
81122994:	f800283a 	ret
81122998:	00803fc4 	movi	r2,255
8112299c:	11c5803a 	cmpltu	r2,r2,r7
811229a0:	100490fa 	slli	r2,r2,3
811229a4:	003f9e06 	br	81122820 <__reset+0xfb102820>
811229a8:	00803fc4 	movi	r2,255
811229ac:	1445803a 	cmpltu	r2,r2,r17
811229b0:	100490fa 	slli	r2,r2,3
811229b4:	003fb206 	br	81122880 <__reset+0xfb102880>
811229b8:	00804034 	movhi	r2,256
811229bc:	10bfffc4 	addi	r2,r2,-1
811229c0:	11808836 	bltu	r2,r6,81122be4 <__udivdi3+0x524>
811229c4:	00800404 	movi	r2,16
811229c8:	003f5606 	br	81122724 <__reset+0xfb102724>
811229cc:	30aed83a 	srl	r23,r6,r2
811229d0:	3d4e983a 	sll	r7,r7,r21
811229d4:	80acd83a 	srl	r22,r16,r2
811229d8:	9884d83a 	srl	r2,r19,r2
811229dc:	3deeb03a 	or	r23,r7,r23
811229e0:	b824d43a 	srli	r18,r23,16
811229e4:	8560983a 	sll	r16,r16,r21
811229e8:	b009883a 	mov	r4,r22
811229ec:	900b883a 	mov	r5,r18
811229f0:	3568983a 	sll	r20,r6,r21
811229f4:	1420b03a 	or	r16,r2,r16
811229f8:	11232dc0 	call	811232dc <__umodsi3>
811229fc:	b009883a 	mov	r4,r22
81122a00:	900b883a 	mov	r5,r18
81122a04:	1023883a 	mov	r17,r2
81122a08:	11232780 	call	81123278 <__udivsi3>
81122a0c:	8808943a 	slli	r4,r17,16
81122a10:	bf3fffcc 	andi	fp,r23,65535
81122a14:	8006d43a 	srli	r3,r16,16
81122a18:	e0a3383a 	mul	r17,fp,r2
81122a1c:	100d883a 	mov	r6,r2
81122a20:	1906b03a 	or	r3,r3,r4
81122a24:	1c40042e 	bgeu	r3,r17,81122a38 <__udivdi3+0x378>
81122a28:	1dc7883a 	add	r3,r3,r23
81122a2c:	10bfffc4 	addi	r2,r2,-1
81122a30:	1dc0752e 	bgeu	r3,r23,81122c08 <__udivdi3+0x548>
81122a34:	100d883a 	mov	r6,r2
81122a38:	1c63c83a 	sub	r17,r3,r17
81122a3c:	900b883a 	mov	r5,r18
81122a40:	8809883a 	mov	r4,r17
81122a44:	d9800015 	stw	r6,0(sp)
81122a48:	11232dc0 	call	811232dc <__umodsi3>
81122a4c:	102d883a 	mov	r22,r2
81122a50:	8809883a 	mov	r4,r17
81122a54:	900b883a 	mov	r5,r18
81122a58:	11232780 	call	81123278 <__udivsi3>
81122a5c:	b02c943a 	slli	r22,r22,16
81122a60:	e089383a 	mul	r4,fp,r2
81122a64:	843fffcc 	andi	r16,r16,65535
81122a68:	85a0b03a 	or	r16,r16,r22
81122a6c:	d9800017 	ldw	r6,0(sp)
81122a70:	8100042e 	bgeu	r16,r4,81122a84 <__udivdi3+0x3c4>
81122a74:	85e1883a 	add	r16,r16,r23
81122a78:	10ffffc4 	addi	r3,r2,-1
81122a7c:	85c05e2e 	bgeu	r16,r23,81122bf8 <__udivdi3+0x538>
81122a80:	1805883a 	mov	r2,r3
81122a84:	300c943a 	slli	r6,r6,16
81122a88:	a17fffcc 	andi	r5,r20,65535
81122a8c:	a028d43a 	srli	r20,r20,16
81122a90:	3084b03a 	or	r2,r6,r2
81122a94:	10ffffcc 	andi	r3,r2,65535
81122a98:	100cd43a 	srli	r6,r2,16
81122a9c:	194f383a 	mul	r7,r3,r5
81122aa0:	1d07383a 	mul	r3,r3,r20
81122aa4:	314b383a 	mul	r5,r6,r5
81122aa8:	3810d43a 	srli	r8,r7,16
81122aac:	8121c83a 	sub	r16,r16,r4
81122ab0:	1947883a 	add	r3,r3,r5
81122ab4:	40c7883a 	add	r3,r8,r3
81122ab8:	350d383a 	mul	r6,r6,r20
81122abc:	1940022e 	bgeu	r3,r5,81122ac8 <__udivdi3+0x408>
81122ac0:	01000074 	movhi	r4,1
81122ac4:	310d883a 	add	r6,r6,r4
81122ac8:	1828d43a 	srli	r20,r3,16
81122acc:	a18d883a 	add	r6,r20,r6
81122ad0:	81803e36 	bltu	r16,r6,81122bcc <__udivdi3+0x50c>
81122ad4:	81803826 	beq	r16,r6,81122bb8 <__udivdi3+0x4f8>
81122ad8:	0007883a 	mov	r3,zero
81122adc:	003fa206 	br	81122968 <__reset+0xfb102968>
81122ae0:	88e2983a 	sll	r17,r17,r3
81122ae4:	80a8d83a 	srl	r20,r16,r2
81122ae8:	80e0983a 	sll	r16,r16,r3
81122aec:	882ad43a 	srli	r21,r17,16
81122af0:	9884d83a 	srl	r2,r19,r2
81122af4:	a009883a 	mov	r4,r20
81122af8:	a80b883a 	mov	r5,r21
81122afc:	142eb03a 	or	r23,r2,r16
81122b00:	98e4983a 	sll	r18,r19,r3
81122b04:	11232dc0 	call	811232dc <__umodsi3>
81122b08:	a009883a 	mov	r4,r20
81122b0c:	a80b883a 	mov	r5,r21
81122b10:	1021883a 	mov	r16,r2
81122b14:	11232780 	call	81123278 <__udivsi3>
81122b18:	1039883a 	mov	fp,r2
81122b1c:	8d3fffcc 	andi	r20,r17,65535
81122b20:	8020943a 	slli	r16,r16,16
81122b24:	b804d43a 	srli	r2,r23,16
81122b28:	a72d383a 	mul	r22,r20,fp
81122b2c:	1404b03a 	or	r2,r2,r16
81122b30:	1580062e 	bgeu	r2,r22,81122b4c <__udivdi3+0x48c>
81122b34:	1445883a 	add	r2,r2,r17
81122b38:	e0ffffc4 	addi	r3,fp,-1
81122b3c:	14403836 	bltu	r2,r17,81122c20 <__udivdi3+0x560>
81122b40:	1580372e 	bgeu	r2,r22,81122c20 <__udivdi3+0x560>
81122b44:	e73fff84 	addi	fp,fp,-2
81122b48:	1445883a 	add	r2,r2,r17
81122b4c:	15adc83a 	sub	r22,r2,r22
81122b50:	a80b883a 	mov	r5,r21
81122b54:	b009883a 	mov	r4,r22
81122b58:	11232dc0 	call	811232dc <__umodsi3>
81122b5c:	1027883a 	mov	r19,r2
81122b60:	b009883a 	mov	r4,r22
81122b64:	a80b883a 	mov	r5,r21
81122b68:	11232780 	call	81123278 <__udivsi3>
81122b6c:	9826943a 	slli	r19,r19,16
81122b70:	a0a1383a 	mul	r16,r20,r2
81122b74:	b93fffcc 	andi	r4,r23,65535
81122b78:	24c8b03a 	or	r4,r4,r19
81122b7c:	2400062e 	bgeu	r4,r16,81122b98 <__udivdi3+0x4d8>
81122b80:	2449883a 	add	r4,r4,r17
81122b84:	10ffffc4 	addi	r3,r2,-1
81122b88:	24402336 	bltu	r4,r17,81122c18 <__udivdi3+0x558>
81122b8c:	2400222e 	bgeu	r4,r16,81122c18 <__udivdi3+0x558>
81122b90:	10bfff84 	addi	r2,r2,-2
81122b94:	2449883a 	add	r4,r4,r17
81122b98:	e038943a 	slli	fp,fp,16
81122b9c:	2421c83a 	sub	r16,r4,r16
81122ba0:	e086b03a 	or	r3,fp,r2
81122ba4:	003f4306 	br	811228b4 <__reset+0xfb1028b4>
81122ba8:	2005883a 	mov	r2,r4
81122bac:	003f6906 	br	81122954 <__reset+0xfb102954>
81122bb0:	1805883a 	mov	r2,r3
81122bb4:	003f0f06 	br	811227f4 <__reset+0xfb1027f4>
81122bb8:	1806943a 	slli	r3,r3,16
81122bbc:	9d66983a 	sll	r19,r19,r21
81122bc0:	39ffffcc 	andi	r7,r7,65535
81122bc4:	19c7883a 	add	r3,r3,r7
81122bc8:	98ffc32e 	bgeu	r19,r3,81122ad8 <__reset+0xfb102ad8>
81122bcc:	10bfffc4 	addi	r2,r2,-1
81122bd0:	003fc106 	br	81122ad8 <__reset+0xfb102ad8>
81122bd4:	00800604 	movi	r2,24
81122bd8:	003f1106 	br	81122820 <__reset+0xfb102820>
81122bdc:	00800604 	movi	r2,24
81122be0:	003f2706 	br	81122880 <__reset+0xfb102880>
81122be4:	00800604 	movi	r2,24
81122be8:	003ece06 	br	81122724 <__reset+0xfb102724>
81122bec:	0007883a 	mov	r3,zero
81122bf0:	00800044 	movi	r2,1
81122bf4:	003f5c06 	br	81122968 <__reset+0xfb102968>
81122bf8:	813fa12e 	bgeu	r16,r4,81122a80 <__reset+0xfb102a80>
81122bfc:	10bfff84 	addi	r2,r2,-2
81122c00:	85e1883a 	add	r16,r16,r23
81122c04:	003f9f06 	br	81122a84 <__reset+0xfb102a84>
81122c08:	1c7f8a2e 	bgeu	r3,r17,81122a34 <__reset+0xfb102a34>
81122c0c:	31bfff84 	addi	r6,r6,-2
81122c10:	1dc7883a 	add	r3,r3,r23
81122c14:	003f8806 	br	81122a38 <__reset+0xfb102a38>
81122c18:	1805883a 	mov	r2,r3
81122c1c:	003fde06 	br	81122b98 <__reset+0xfb102b98>
81122c20:	1839883a 	mov	fp,r3
81122c24:	003fc906 	br	81122b4c <__reset+0xfb102b4c>
81122c28:	b5bfff84 	addi	r22,r22,-2
81122c2c:	2449883a 	add	r4,r4,r17
81122c30:	003f3406 	br	81122904 <__reset+0xfb102904>
81122c34:	b5bfff84 	addi	r22,r22,-2
81122c38:	1445883a 	add	r2,r2,r17
81122c3c:	003edb06 	br	811227ac <__reset+0xfb1027ac>

81122c40 <__umoddi3>:
81122c40:	defff404 	addi	sp,sp,-48
81122c44:	de00012e 	bgeu	sp,et,81122c4c <__umoddi3+0xc>
81122c48:	003b68fa 	trap	3
81122c4c:	df000a15 	stw	fp,40(sp)
81122c50:	dc400315 	stw	r17,12(sp)
81122c54:	dc000215 	stw	r16,8(sp)
81122c58:	dfc00b15 	stw	ra,44(sp)
81122c5c:	ddc00915 	stw	r23,36(sp)
81122c60:	dd800815 	stw	r22,32(sp)
81122c64:	dd400715 	stw	r21,28(sp)
81122c68:	dd000615 	stw	r20,24(sp)
81122c6c:	dcc00515 	stw	r19,20(sp)
81122c70:	dc800415 	stw	r18,16(sp)
81122c74:	2021883a 	mov	r16,r4
81122c78:	2823883a 	mov	r17,r5
81122c7c:	2839883a 	mov	fp,r5
81122c80:	38003c1e 	bne	r7,zero,81122d74 <__umoddi3+0x134>
81122c84:	3027883a 	mov	r19,r6
81122c88:	2029883a 	mov	r20,r4
81122c8c:	2980512e 	bgeu	r5,r6,81122dd4 <__umoddi3+0x194>
81122c90:	00bfffd4 	movui	r2,65535
81122c94:	11809a36 	bltu	r2,r6,81122f00 <__umoddi3+0x2c0>
81122c98:	01003fc4 	movi	r4,255
81122c9c:	2189803a 	cmpltu	r4,r4,r6
81122ca0:	200890fa 	slli	r4,r4,3
81122ca4:	3104d83a 	srl	r2,r6,r4
81122ca8:	00e04534 	movhi	r3,33044
81122cac:	18f01904 	addi	r3,r3,-16284
81122cb0:	1885883a 	add	r2,r3,r2
81122cb4:	10c00003 	ldbu	r3,0(r2)
81122cb8:	00800804 	movi	r2,32
81122cbc:	1909883a 	add	r4,r3,r4
81122cc0:	1125c83a 	sub	r18,r2,r4
81122cc4:	90000526 	beq	r18,zero,81122cdc <__umoddi3+0x9c>
81122cc8:	8ca2983a 	sll	r17,r17,r18
81122ccc:	8108d83a 	srl	r4,r16,r4
81122cd0:	34a6983a 	sll	r19,r6,r18
81122cd4:	84a8983a 	sll	r20,r16,r18
81122cd8:	2478b03a 	or	fp,r4,r17
81122cdc:	982ed43a 	srli	r23,r19,16
81122ce0:	e009883a 	mov	r4,fp
81122ce4:	9dbfffcc 	andi	r22,r19,65535
81122ce8:	b80b883a 	mov	r5,r23
81122cec:	11232dc0 	call	811232dc <__umodsi3>
81122cf0:	e009883a 	mov	r4,fp
81122cf4:	b80b883a 	mov	r5,r23
81122cf8:	102b883a 	mov	r21,r2
81122cfc:	11232780 	call	81123278 <__udivsi3>
81122d00:	a806943a 	slli	r3,r21,16
81122d04:	a008d43a 	srli	r4,r20,16
81122d08:	b085383a 	mul	r2,r22,r2
81122d0c:	20c8b03a 	or	r4,r4,r3
81122d10:	2080032e 	bgeu	r4,r2,81122d20 <__umoddi3+0xe0>
81122d14:	24c9883a 	add	r4,r4,r19
81122d18:	24c00136 	bltu	r4,r19,81122d20 <__umoddi3+0xe0>
81122d1c:	20811036 	bltu	r4,r2,81123160 <__umoddi3+0x520>
81122d20:	20abc83a 	sub	r21,r4,r2
81122d24:	b80b883a 	mov	r5,r23
81122d28:	a809883a 	mov	r4,r21
81122d2c:	11232dc0 	call	811232dc <__umodsi3>
81122d30:	1023883a 	mov	r17,r2
81122d34:	b80b883a 	mov	r5,r23
81122d38:	a809883a 	mov	r4,r21
81122d3c:	11232780 	call	81123278 <__udivsi3>
81122d40:	8822943a 	slli	r17,r17,16
81122d44:	b085383a 	mul	r2,r22,r2
81122d48:	a0ffffcc 	andi	r3,r20,65535
81122d4c:	1c46b03a 	or	r3,r3,r17
81122d50:	1880042e 	bgeu	r3,r2,81122d64 <__umoddi3+0x124>
81122d54:	1cc7883a 	add	r3,r3,r19
81122d58:	1cc00236 	bltu	r3,r19,81122d64 <__umoddi3+0x124>
81122d5c:	1880012e 	bgeu	r3,r2,81122d64 <__umoddi3+0x124>
81122d60:	1cc7883a 	add	r3,r3,r19
81122d64:	1885c83a 	sub	r2,r3,r2
81122d68:	1484d83a 	srl	r2,r2,r18
81122d6c:	0007883a 	mov	r3,zero
81122d70:	00004f06 	br	81122eb0 <__umoddi3+0x270>
81122d74:	29c04c36 	bltu	r5,r7,81122ea8 <__umoddi3+0x268>
81122d78:	00bfffd4 	movui	r2,65535
81122d7c:	11c0582e 	bgeu	r2,r7,81122ee0 <__umoddi3+0x2a0>
81122d80:	00804034 	movhi	r2,256
81122d84:	10bfffc4 	addi	r2,r2,-1
81122d88:	11c0e736 	bltu	r2,r7,81123128 <__umoddi3+0x4e8>
81122d8c:	01000404 	movi	r4,16
81122d90:	3904d83a 	srl	r2,r7,r4
81122d94:	00e04534 	movhi	r3,33044
81122d98:	18f01904 	addi	r3,r3,-16284
81122d9c:	1885883a 	add	r2,r3,r2
81122da0:	14c00003 	ldbu	r19,0(r2)
81122da4:	00c00804 	movi	r3,32
81122da8:	9927883a 	add	r19,r19,r4
81122dac:	1ce9c83a 	sub	r20,r3,r19
81122db0:	a000581e 	bne	r20,zero,81122f14 <__umoddi3+0x2d4>
81122db4:	3c400136 	bltu	r7,r17,81122dbc <__umoddi3+0x17c>
81122db8:	8180eb36 	bltu	r16,r6,81123168 <__umoddi3+0x528>
81122dbc:	8185c83a 	sub	r2,r16,r6
81122dc0:	89e3c83a 	sub	r17,r17,r7
81122dc4:	8089803a 	cmpltu	r4,r16,r2
81122dc8:	8939c83a 	sub	fp,r17,r4
81122dcc:	e007883a 	mov	r3,fp
81122dd0:	00003706 	br	81122eb0 <__umoddi3+0x270>
81122dd4:	3000041e 	bne	r6,zero,81122de8 <__umoddi3+0x1a8>
81122dd8:	000b883a 	mov	r5,zero
81122ddc:	01000044 	movi	r4,1
81122de0:	11232780 	call	81123278 <__udivsi3>
81122de4:	1027883a 	mov	r19,r2
81122de8:	00bfffd4 	movui	r2,65535
81122dec:	14c0402e 	bgeu	r2,r19,81122ef0 <__umoddi3+0x2b0>
81122df0:	00804034 	movhi	r2,256
81122df4:	10bfffc4 	addi	r2,r2,-1
81122df8:	14c0cd36 	bltu	r2,r19,81123130 <__umoddi3+0x4f0>
81122dfc:	00800404 	movi	r2,16
81122e00:	9886d83a 	srl	r3,r19,r2
81122e04:	01204534 	movhi	r4,33044
81122e08:	21301904 	addi	r4,r4,-16284
81122e0c:	20c7883a 	add	r3,r4,r3
81122e10:	18c00003 	ldbu	r3,0(r3)
81122e14:	1887883a 	add	r3,r3,r2
81122e18:	00800804 	movi	r2,32
81122e1c:	10e5c83a 	sub	r18,r2,r3
81122e20:	9000901e 	bne	r18,zero,81123064 <__umoddi3+0x424>
81122e24:	982cd43a 	srli	r22,r19,16
81122e28:	8ce3c83a 	sub	r17,r17,r19
81122e2c:	9d7fffcc 	andi	r21,r19,65535
81122e30:	b00b883a 	mov	r5,r22
81122e34:	8809883a 	mov	r4,r17
81122e38:	11232dc0 	call	811232dc <__umodsi3>
81122e3c:	8809883a 	mov	r4,r17
81122e40:	b00b883a 	mov	r5,r22
81122e44:	1021883a 	mov	r16,r2
81122e48:	11232780 	call	81123278 <__udivsi3>
81122e4c:	8006943a 	slli	r3,r16,16
81122e50:	a008d43a 	srli	r4,r20,16
81122e54:	1545383a 	mul	r2,r2,r21
81122e58:	20c8b03a 	or	r4,r4,r3
81122e5c:	2080042e 	bgeu	r4,r2,81122e70 <__umoddi3+0x230>
81122e60:	24c9883a 	add	r4,r4,r19
81122e64:	24c00236 	bltu	r4,r19,81122e70 <__umoddi3+0x230>
81122e68:	2080012e 	bgeu	r4,r2,81122e70 <__umoddi3+0x230>
81122e6c:	24c9883a 	add	r4,r4,r19
81122e70:	20a1c83a 	sub	r16,r4,r2
81122e74:	b00b883a 	mov	r5,r22
81122e78:	8009883a 	mov	r4,r16
81122e7c:	11232dc0 	call	811232dc <__umodsi3>
81122e80:	1023883a 	mov	r17,r2
81122e84:	b00b883a 	mov	r5,r22
81122e88:	8009883a 	mov	r4,r16
81122e8c:	11232780 	call	81123278 <__udivsi3>
81122e90:	8822943a 	slli	r17,r17,16
81122e94:	1545383a 	mul	r2,r2,r21
81122e98:	a53fffcc 	andi	r20,r20,65535
81122e9c:	a446b03a 	or	r3,r20,r17
81122ea0:	18bfb02e 	bgeu	r3,r2,81122d64 <__reset+0xfb102d64>
81122ea4:	003fab06 	br	81122d54 <__reset+0xfb102d54>
81122ea8:	2005883a 	mov	r2,r4
81122eac:	2807883a 	mov	r3,r5
81122eb0:	dfc00b17 	ldw	ra,44(sp)
81122eb4:	df000a17 	ldw	fp,40(sp)
81122eb8:	ddc00917 	ldw	r23,36(sp)
81122ebc:	dd800817 	ldw	r22,32(sp)
81122ec0:	dd400717 	ldw	r21,28(sp)
81122ec4:	dd000617 	ldw	r20,24(sp)
81122ec8:	dcc00517 	ldw	r19,20(sp)
81122ecc:	dc800417 	ldw	r18,16(sp)
81122ed0:	dc400317 	ldw	r17,12(sp)
81122ed4:	dc000217 	ldw	r16,8(sp)
81122ed8:	dec00c04 	addi	sp,sp,48
81122edc:	f800283a 	ret
81122ee0:	04c03fc4 	movi	r19,255
81122ee4:	99c9803a 	cmpltu	r4,r19,r7
81122ee8:	200890fa 	slli	r4,r4,3
81122eec:	003fa806 	br	81122d90 <__reset+0xfb102d90>
81122ef0:	00803fc4 	movi	r2,255
81122ef4:	14c5803a 	cmpltu	r2,r2,r19
81122ef8:	100490fa 	slli	r2,r2,3
81122efc:	003fc006 	br	81122e00 <__reset+0xfb102e00>
81122f00:	00804034 	movhi	r2,256
81122f04:	10bfffc4 	addi	r2,r2,-1
81122f08:	11808b36 	bltu	r2,r6,81123138 <__umoddi3+0x4f8>
81122f0c:	01000404 	movi	r4,16
81122f10:	003f6406 	br	81122ca4 <__reset+0xfb102ca4>
81122f14:	34c4d83a 	srl	r2,r6,r19
81122f18:	3d0e983a 	sll	r7,r7,r20
81122f1c:	8cf8d83a 	srl	fp,r17,r19
81122f20:	8d10983a 	sll	r8,r17,r20
81122f24:	38aab03a 	or	r21,r7,r2
81122f28:	a82cd43a 	srli	r22,r21,16
81122f2c:	84e2d83a 	srl	r17,r16,r19
81122f30:	e009883a 	mov	r4,fp
81122f34:	b00b883a 	mov	r5,r22
81122f38:	8a22b03a 	or	r17,r17,r8
81122f3c:	3524983a 	sll	r18,r6,r20
81122f40:	11232dc0 	call	811232dc <__umodsi3>
81122f44:	e009883a 	mov	r4,fp
81122f48:	b00b883a 	mov	r5,r22
81122f4c:	102f883a 	mov	r23,r2
81122f50:	11232780 	call	81123278 <__udivsi3>
81122f54:	100d883a 	mov	r6,r2
81122f58:	b808943a 	slli	r4,r23,16
81122f5c:	aa3fffcc 	andi	r8,r21,65535
81122f60:	8804d43a 	srli	r2,r17,16
81122f64:	41af383a 	mul	r23,r8,r6
81122f68:	8520983a 	sll	r16,r16,r20
81122f6c:	1104b03a 	or	r2,r2,r4
81122f70:	15c0042e 	bgeu	r2,r23,81122f84 <__umoddi3+0x344>
81122f74:	1545883a 	add	r2,r2,r21
81122f78:	30ffffc4 	addi	r3,r6,-1
81122f7c:	1540742e 	bgeu	r2,r21,81123150 <__umoddi3+0x510>
81122f80:	180d883a 	mov	r6,r3
81122f84:	15efc83a 	sub	r23,r2,r23
81122f88:	b00b883a 	mov	r5,r22
81122f8c:	b809883a 	mov	r4,r23
81122f90:	d9800115 	stw	r6,4(sp)
81122f94:	da000015 	stw	r8,0(sp)
81122f98:	11232dc0 	call	811232dc <__umodsi3>
81122f9c:	b00b883a 	mov	r5,r22
81122fa0:	b809883a 	mov	r4,r23
81122fa4:	1039883a 	mov	fp,r2
81122fa8:	11232780 	call	81123278 <__udivsi3>
81122fac:	da000017 	ldw	r8,0(sp)
81122fb0:	e038943a 	slli	fp,fp,16
81122fb4:	100b883a 	mov	r5,r2
81122fb8:	4089383a 	mul	r4,r8,r2
81122fbc:	8a3fffcc 	andi	r8,r17,65535
81122fc0:	4710b03a 	or	r8,r8,fp
81122fc4:	d9800117 	ldw	r6,4(sp)
81122fc8:	4100042e 	bgeu	r8,r4,81122fdc <__umoddi3+0x39c>
81122fcc:	4551883a 	add	r8,r8,r21
81122fd0:	10bfffc4 	addi	r2,r2,-1
81122fd4:	45405a2e 	bgeu	r8,r21,81123140 <__umoddi3+0x500>
81122fd8:	100b883a 	mov	r5,r2
81122fdc:	300c943a 	slli	r6,r6,16
81122fe0:	91ffffcc 	andi	r7,r18,65535
81122fe4:	9004d43a 	srli	r2,r18,16
81122fe8:	314cb03a 	or	r6,r6,r5
81122fec:	317fffcc 	andi	r5,r6,65535
81122ff0:	300cd43a 	srli	r6,r6,16
81122ff4:	29d3383a 	mul	r9,r5,r7
81122ff8:	288b383a 	mul	r5,r5,r2
81122ffc:	31cf383a 	mul	r7,r6,r7
81123000:	4806d43a 	srli	r3,r9,16
81123004:	4111c83a 	sub	r8,r8,r4
81123008:	29cb883a 	add	r5,r5,r7
8112300c:	194b883a 	add	r5,r3,r5
81123010:	3085383a 	mul	r2,r6,r2
81123014:	29c0022e 	bgeu	r5,r7,81123020 <__umoddi3+0x3e0>
81123018:	00c00074 	movhi	r3,1
8112301c:	10c5883a 	add	r2,r2,r3
81123020:	2808d43a 	srli	r4,r5,16
81123024:	280a943a 	slli	r5,r5,16
81123028:	4a7fffcc 	andi	r9,r9,65535
8112302c:	2085883a 	add	r2,r4,r2
81123030:	2a4b883a 	add	r5,r5,r9
81123034:	40803636 	bltu	r8,r2,81123110 <__umoddi3+0x4d0>
81123038:	40804d26 	beq	r8,r2,81123170 <__umoddi3+0x530>
8112303c:	4089c83a 	sub	r4,r8,r2
81123040:	280f883a 	mov	r7,r5
81123044:	81cfc83a 	sub	r7,r16,r7
81123048:	81c7803a 	cmpltu	r3,r16,r7
8112304c:	20c7c83a 	sub	r3,r4,r3
81123050:	1cc4983a 	sll	r2,r3,r19
81123054:	3d0ed83a 	srl	r7,r7,r20
81123058:	1d06d83a 	srl	r3,r3,r20
8112305c:	11c4b03a 	or	r2,r2,r7
81123060:	003f9306 	br	81122eb0 <__reset+0xfb102eb0>
81123064:	9ca6983a 	sll	r19,r19,r18
81123068:	88e8d83a 	srl	r20,r17,r3
8112306c:	80c4d83a 	srl	r2,r16,r3
81123070:	982cd43a 	srli	r22,r19,16
81123074:	8ca2983a 	sll	r17,r17,r18
81123078:	a009883a 	mov	r4,r20
8112307c:	b00b883a 	mov	r5,r22
81123080:	1478b03a 	or	fp,r2,r17
81123084:	11232dc0 	call	811232dc <__umodsi3>
81123088:	a009883a 	mov	r4,r20
8112308c:	b00b883a 	mov	r5,r22
81123090:	1023883a 	mov	r17,r2
81123094:	11232780 	call	81123278 <__udivsi3>
81123098:	9d7fffcc 	andi	r21,r19,65535
8112309c:	880a943a 	slli	r5,r17,16
811230a0:	e008d43a 	srli	r4,fp,16
811230a4:	a885383a 	mul	r2,r21,r2
811230a8:	84a8983a 	sll	r20,r16,r18
811230ac:	2148b03a 	or	r4,r4,r5
811230b0:	2080042e 	bgeu	r4,r2,811230c4 <__umoddi3+0x484>
811230b4:	24c9883a 	add	r4,r4,r19
811230b8:	24c00236 	bltu	r4,r19,811230c4 <__umoddi3+0x484>
811230bc:	2080012e 	bgeu	r4,r2,811230c4 <__umoddi3+0x484>
811230c0:	24c9883a 	add	r4,r4,r19
811230c4:	20a3c83a 	sub	r17,r4,r2
811230c8:	b00b883a 	mov	r5,r22
811230cc:	8809883a 	mov	r4,r17
811230d0:	11232dc0 	call	811232dc <__umodsi3>
811230d4:	102f883a 	mov	r23,r2
811230d8:	8809883a 	mov	r4,r17
811230dc:	b00b883a 	mov	r5,r22
811230e0:	11232780 	call	81123278 <__udivsi3>
811230e4:	b82e943a 	slli	r23,r23,16
811230e8:	a885383a 	mul	r2,r21,r2
811230ec:	e13fffcc 	andi	r4,fp,65535
811230f0:	25c8b03a 	or	r4,r4,r23
811230f4:	2080042e 	bgeu	r4,r2,81123108 <__umoddi3+0x4c8>
811230f8:	24c9883a 	add	r4,r4,r19
811230fc:	24c00236 	bltu	r4,r19,81123108 <__umoddi3+0x4c8>
81123100:	2080012e 	bgeu	r4,r2,81123108 <__umoddi3+0x4c8>
81123104:	24c9883a 	add	r4,r4,r19
81123108:	20a3c83a 	sub	r17,r4,r2
8112310c:	003f4806 	br	81122e30 <__reset+0xfb102e30>
81123110:	2c8fc83a 	sub	r7,r5,r18
81123114:	1545c83a 	sub	r2,r2,r21
81123118:	29cb803a 	cmpltu	r5,r5,r7
8112311c:	1145c83a 	sub	r2,r2,r5
81123120:	4089c83a 	sub	r4,r8,r2
81123124:	003fc706 	br	81123044 <__reset+0xfb103044>
81123128:	01000604 	movi	r4,24
8112312c:	003f1806 	br	81122d90 <__reset+0xfb102d90>
81123130:	00800604 	movi	r2,24
81123134:	003f3206 	br	81122e00 <__reset+0xfb102e00>
81123138:	01000604 	movi	r4,24
8112313c:	003ed906 	br	81122ca4 <__reset+0xfb102ca4>
81123140:	413fa52e 	bgeu	r8,r4,81122fd8 <__reset+0xfb102fd8>
81123144:	297fff84 	addi	r5,r5,-2
81123148:	4551883a 	add	r8,r8,r21
8112314c:	003fa306 	br	81122fdc <__reset+0xfb102fdc>
81123150:	15ff8b2e 	bgeu	r2,r23,81122f80 <__reset+0xfb102f80>
81123154:	31bfff84 	addi	r6,r6,-2
81123158:	1545883a 	add	r2,r2,r21
8112315c:	003f8906 	br	81122f84 <__reset+0xfb102f84>
81123160:	24c9883a 	add	r4,r4,r19
81123164:	003eee06 	br	81122d20 <__reset+0xfb102d20>
81123168:	8005883a 	mov	r2,r16
8112316c:	003f1706 	br	81122dcc <__reset+0xfb102dcc>
81123170:	817fe736 	bltu	r16,r5,81123110 <__reset+0xfb103110>
81123174:	280f883a 	mov	r7,r5
81123178:	0009883a 	mov	r4,zero
8112317c:	003fb106 	br	81123044 <__reset+0xfb103044>

81123180 <__divsi3>:
81123180:	20001b16 	blt	r4,zero,811231f0 <__divsi3+0x70>
81123184:	000f883a 	mov	r7,zero
81123188:	28001616 	blt	r5,zero,811231e4 <__divsi3+0x64>
8112318c:	200d883a 	mov	r6,r4
81123190:	29001a2e 	bgeu	r5,r4,811231fc <__divsi3+0x7c>
81123194:	00800804 	movi	r2,32
81123198:	00c00044 	movi	r3,1
8112319c:	00000106 	br	811231a4 <__divsi3+0x24>
811231a0:	10000d26 	beq	r2,zero,811231d8 <__divsi3+0x58>
811231a4:	294b883a 	add	r5,r5,r5
811231a8:	10bfffc4 	addi	r2,r2,-1
811231ac:	18c7883a 	add	r3,r3,r3
811231b0:	293ffb36 	bltu	r5,r4,811231a0 <__reset+0xfb1031a0>
811231b4:	0005883a 	mov	r2,zero
811231b8:	18000726 	beq	r3,zero,811231d8 <__divsi3+0x58>
811231bc:	0005883a 	mov	r2,zero
811231c0:	31400236 	bltu	r6,r5,811231cc <__divsi3+0x4c>
811231c4:	314dc83a 	sub	r6,r6,r5
811231c8:	10c4b03a 	or	r2,r2,r3
811231cc:	1806d07a 	srli	r3,r3,1
811231d0:	280ad07a 	srli	r5,r5,1
811231d4:	183ffa1e 	bne	r3,zero,811231c0 <__reset+0xfb1031c0>
811231d8:	38000126 	beq	r7,zero,811231e0 <__divsi3+0x60>
811231dc:	0085c83a 	sub	r2,zero,r2
811231e0:	f800283a 	ret
811231e4:	014bc83a 	sub	r5,zero,r5
811231e8:	39c0005c 	xori	r7,r7,1
811231ec:	003fe706 	br	8112318c <__reset+0xfb10318c>
811231f0:	0109c83a 	sub	r4,zero,r4
811231f4:	01c00044 	movi	r7,1
811231f8:	003fe306 	br	81123188 <__reset+0xfb103188>
811231fc:	00c00044 	movi	r3,1
81123200:	003fee06 	br	811231bc <__reset+0xfb1031bc>

81123204 <__modsi3>:
81123204:	20001716 	blt	r4,zero,81123264 <__modsi3+0x60>
81123208:	000f883a 	mov	r7,zero
8112320c:	2005883a 	mov	r2,r4
81123210:	28001216 	blt	r5,zero,8112325c <__modsi3+0x58>
81123214:	2900162e 	bgeu	r5,r4,81123270 <__modsi3+0x6c>
81123218:	01800804 	movi	r6,32
8112321c:	00c00044 	movi	r3,1
81123220:	00000106 	br	81123228 <__modsi3+0x24>
81123224:	30000a26 	beq	r6,zero,81123250 <__modsi3+0x4c>
81123228:	294b883a 	add	r5,r5,r5
8112322c:	31bfffc4 	addi	r6,r6,-1
81123230:	18c7883a 	add	r3,r3,r3
81123234:	293ffb36 	bltu	r5,r4,81123224 <__reset+0xfb103224>
81123238:	18000526 	beq	r3,zero,81123250 <__modsi3+0x4c>
8112323c:	1806d07a 	srli	r3,r3,1
81123240:	11400136 	bltu	r2,r5,81123248 <__modsi3+0x44>
81123244:	1145c83a 	sub	r2,r2,r5
81123248:	280ad07a 	srli	r5,r5,1
8112324c:	183ffb1e 	bne	r3,zero,8112323c <__reset+0xfb10323c>
81123250:	38000126 	beq	r7,zero,81123258 <__modsi3+0x54>
81123254:	0085c83a 	sub	r2,zero,r2
81123258:	f800283a 	ret
8112325c:	014bc83a 	sub	r5,zero,r5
81123260:	003fec06 	br	81123214 <__reset+0xfb103214>
81123264:	0109c83a 	sub	r4,zero,r4
81123268:	01c00044 	movi	r7,1
8112326c:	003fe706 	br	8112320c <__reset+0xfb10320c>
81123270:	00c00044 	movi	r3,1
81123274:	003ff106 	br	8112323c <__reset+0xfb10323c>

81123278 <__udivsi3>:
81123278:	200d883a 	mov	r6,r4
8112327c:	2900152e 	bgeu	r5,r4,811232d4 <__udivsi3+0x5c>
81123280:	28001416 	blt	r5,zero,811232d4 <__udivsi3+0x5c>
81123284:	00800804 	movi	r2,32
81123288:	00c00044 	movi	r3,1
8112328c:	00000206 	br	81123298 <__udivsi3+0x20>
81123290:	10000e26 	beq	r2,zero,811232cc <__udivsi3+0x54>
81123294:	28000516 	blt	r5,zero,811232ac <__udivsi3+0x34>
81123298:	294b883a 	add	r5,r5,r5
8112329c:	10bfffc4 	addi	r2,r2,-1
811232a0:	18c7883a 	add	r3,r3,r3
811232a4:	293ffa36 	bltu	r5,r4,81123290 <__reset+0xfb103290>
811232a8:	18000826 	beq	r3,zero,811232cc <__udivsi3+0x54>
811232ac:	0005883a 	mov	r2,zero
811232b0:	31400236 	bltu	r6,r5,811232bc <__udivsi3+0x44>
811232b4:	314dc83a 	sub	r6,r6,r5
811232b8:	10c4b03a 	or	r2,r2,r3
811232bc:	1806d07a 	srli	r3,r3,1
811232c0:	280ad07a 	srli	r5,r5,1
811232c4:	183ffa1e 	bne	r3,zero,811232b0 <__reset+0xfb1032b0>
811232c8:	f800283a 	ret
811232cc:	0005883a 	mov	r2,zero
811232d0:	f800283a 	ret
811232d4:	00c00044 	movi	r3,1
811232d8:	003ff406 	br	811232ac <__reset+0xfb1032ac>

811232dc <__umodsi3>:
811232dc:	2005883a 	mov	r2,r4
811232e0:	2900122e 	bgeu	r5,r4,8112332c <__umodsi3+0x50>
811232e4:	28001116 	blt	r5,zero,8112332c <__umodsi3+0x50>
811232e8:	01800804 	movi	r6,32
811232ec:	00c00044 	movi	r3,1
811232f0:	00000206 	br	811232fc <__umodsi3+0x20>
811232f4:	30000c26 	beq	r6,zero,81123328 <__umodsi3+0x4c>
811232f8:	28000516 	blt	r5,zero,81123310 <__umodsi3+0x34>
811232fc:	294b883a 	add	r5,r5,r5
81123300:	31bfffc4 	addi	r6,r6,-1
81123304:	18c7883a 	add	r3,r3,r3
81123308:	293ffa36 	bltu	r5,r4,811232f4 <__reset+0xfb1032f4>
8112330c:	18000626 	beq	r3,zero,81123328 <__umodsi3+0x4c>
81123310:	1806d07a 	srli	r3,r3,1
81123314:	11400136 	bltu	r2,r5,8112331c <__umodsi3+0x40>
81123318:	1145c83a 	sub	r2,r2,r5
8112331c:	280ad07a 	srli	r5,r5,1
81123320:	183ffb1e 	bne	r3,zero,81123310 <__reset+0xfb103310>
81123324:	f800283a 	ret
81123328:	f800283a 	ret
8112332c:	00c00044 	movi	r3,1
81123330:	003ff706 	br	81123310 <__reset+0xfb103310>

81123334 <__eqsf2>:
81123334:	2006d5fa 	srli	r3,r4,23
81123338:	280cd5fa 	srli	r6,r5,23
8112333c:	01c02034 	movhi	r7,128
81123340:	39ffffc4 	addi	r7,r7,-1
81123344:	18c03fcc 	andi	r3,r3,255
81123348:	02003fc4 	movi	r8,255
8112334c:	3904703a 	and	r2,r7,r4
81123350:	31803fcc 	andi	r6,r6,255
81123354:	394e703a 	and	r7,r7,r5
81123358:	2008d7fa 	srli	r4,r4,31
8112335c:	280ad7fa 	srli	r5,r5,31
81123360:	1a000d26 	beq	r3,r8,81123398 <__eqsf2+0x64>
81123364:	02003fc4 	movi	r8,255
81123368:	32000826 	beq	r6,r8,8112338c <__eqsf2+0x58>
8112336c:	19800226 	beq	r3,r6,81123378 <__eqsf2+0x44>
81123370:	00800044 	movi	r2,1
81123374:	f800283a 	ret
81123378:	11fffd1e 	bne	r2,r7,81123370 <__reset+0xfb103370>
8112337c:	21400926 	beq	r4,r5,811233a4 <__eqsf2+0x70>
81123380:	183ffb1e 	bne	r3,zero,81123370 <__reset+0xfb103370>
81123384:	1004c03a 	cmpne	r2,r2,zero
81123388:	f800283a 	ret
8112338c:	383ff726 	beq	r7,zero,8112336c <__reset+0xfb10336c>
81123390:	00800044 	movi	r2,1
81123394:	f800283a 	ret
81123398:	103ff226 	beq	r2,zero,81123364 <__reset+0xfb103364>
8112339c:	00800044 	movi	r2,1
811233a0:	f800283a 	ret
811233a4:	0005883a 	mov	r2,zero
811233a8:	f800283a 	ret

811233ac <__gesf2>:
811233ac:	2004d5fa 	srli	r2,r4,23
811233b0:	2806d5fa 	srli	r3,r5,23
811233b4:	01802034 	movhi	r6,128
811233b8:	31bfffc4 	addi	r6,r6,-1
811233bc:	10803fcc 	andi	r2,r2,255
811233c0:	01c03fc4 	movi	r7,255
811233c4:	3110703a 	and	r8,r6,r4
811233c8:	18c03fcc 	andi	r3,r3,255
811233cc:	314c703a 	and	r6,r6,r5
811233d0:	2008d7fa 	srli	r4,r4,31
811233d4:	280ad7fa 	srli	r5,r5,31
811233d8:	11c01926 	beq	r2,r7,81123440 <__gesf2+0x94>
811233dc:	01c03fc4 	movi	r7,255
811233e0:	19c00f26 	beq	r3,r7,81123420 <__gesf2+0x74>
811233e4:	1000061e 	bne	r2,zero,81123400 <__gesf2+0x54>
811233e8:	400f003a 	cmpeq	r7,r8,zero
811233ec:	1800071e 	bne	r3,zero,8112340c <__gesf2+0x60>
811233f0:	3000061e 	bne	r6,zero,8112340c <__gesf2+0x60>
811233f4:	0005883a 	mov	r2,zero
811233f8:	40000e1e 	bne	r8,zero,81123434 <__gesf2+0x88>
811233fc:	f800283a 	ret
81123400:	18000a1e 	bne	r3,zero,8112342c <__gesf2+0x80>
81123404:	30000b26 	beq	r6,zero,81123434 <__gesf2+0x88>
81123408:	000f883a 	mov	r7,zero
8112340c:	29403fcc 	andi	r5,r5,255
81123410:	38000726 	beq	r7,zero,81123430 <__gesf2+0x84>
81123414:	28000826 	beq	r5,zero,81123438 <__gesf2+0x8c>
81123418:	00800044 	movi	r2,1
8112341c:	f800283a 	ret
81123420:	303ff026 	beq	r6,zero,811233e4 <__reset+0xfb1033e4>
81123424:	00bfff84 	movi	r2,-2
81123428:	f800283a 	ret
8112342c:	29403fcc 	andi	r5,r5,255
81123430:	21400526 	beq	r4,r5,81123448 <__gesf2+0x9c>
81123434:	203ff826 	beq	r4,zero,81123418 <__reset+0xfb103418>
81123438:	00bfffc4 	movi	r2,-1
8112343c:	f800283a 	ret
81123440:	403fe626 	beq	r8,zero,811233dc <__reset+0xfb1033dc>
81123444:	003ff706 	br	81123424 <__reset+0xfb103424>
81123448:	18bffa16 	blt	r3,r2,81123434 <__reset+0xfb103434>
8112344c:	10c00216 	blt	r2,r3,81123458 <__gesf2+0xac>
81123450:	323ff836 	bltu	r6,r8,81123434 <__reset+0xfb103434>
81123454:	4180022e 	bgeu	r8,r6,81123460 <__gesf2+0xb4>
81123458:	203fef1e 	bne	r4,zero,81123418 <__reset+0xfb103418>
8112345c:	003ff606 	br	81123438 <__reset+0xfb103438>
81123460:	0005883a 	mov	r2,zero
81123464:	f800283a 	ret

81123468 <__lesf2>:
81123468:	2004d5fa 	srli	r2,r4,23
8112346c:	280cd5fa 	srli	r6,r5,23
81123470:	00c02034 	movhi	r3,128
81123474:	18ffffc4 	addi	r3,r3,-1
81123478:	10803fcc 	andi	r2,r2,255
8112347c:	01c03fc4 	movi	r7,255
81123480:	1910703a 	and	r8,r3,r4
81123484:	31803fcc 	andi	r6,r6,255
81123488:	1946703a 	and	r3,r3,r5
8112348c:	2008d7fa 	srli	r4,r4,31
81123490:	280ad7fa 	srli	r5,r5,31
81123494:	11c01b26 	beq	r2,r7,81123504 <__lesf2+0x9c>
81123498:	01c03fc4 	movi	r7,255
8112349c:	31c01126 	beq	r6,r7,811234e4 <__lesf2+0x7c>
811234a0:	1000071e 	bne	r2,zero,811234c0 <__lesf2+0x58>
811234a4:	400f003a 	cmpeq	r7,r8,zero
811234a8:	21003fcc 	andi	r4,r4,255
811234ac:	3000081e 	bne	r6,zero,811234d0 <__lesf2+0x68>
811234b0:	1800071e 	bne	r3,zero,811234d0 <__lesf2+0x68>
811234b4:	0005883a 	mov	r2,zero
811234b8:	40000f1e 	bne	r8,zero,811234f8 <__lesf2+0x90>
811234bc:	f800283a 	ret
811234c0:	21003fcc 	andi	r4,r4,255
811234c4:	30000a1e 	bne	r6,zero,811234f0 <__lesf2+0x88>
811234c8:	18000b26 	beq	r3,zero,811234f8 <__lesf2+0x90>
811234cc:	000f883a 	mov	r7,zero
811234d0:	29403fcc 	andi	r5,r5,255
811234d4:	38000726 	beq	r7,zero,811234f4 <__lesf2+0x8c>
811234d8:	28000826 	beq	r5,zero,811234fc <__lesf2+0x94>
811234dc:	00800044 	movi	r2,1
811234e0:	f800283a 	ret
811234e4:	183fee26 	beq	r3,zero,811234a0 <__reset+0xfb1034a0>
811234e8:	00800084 	movi	r2,2
811234ec:	f800283a 	ret
811234f0:	29403fcc 	andi	r5,r5,255
811234f4:	21400626 	beq	r4,r5,81123510 <__lesf2+0xa8>
811234f8:	203ff826 	beq	r4,zero,811234dc <__reset+0xfb1034dc>
811234fc:	00bfffc4 	movi	r2,-1
81123500:	f800283a 	ret
81123504:	403fe426 	beq	r8,zero,81123498 <__reset+0xfb103498>
81123508:	00800084 	movi	r2,2
8112350c:	f800283a 	ret
81123510:	30bff916 	blt	r6,r2,811234f8 <__reset+0xfb1034f8>
81123514:	11800216 	blt	r2,r6,81123520 <__lesf2+0xb8>
81123518:	1a3ff736 	bltu	r3,r8,811234f8 <__reset+0xfb1034f8>
8112351c:	40c0022e 	bgeu	r8,r3,81123528 <__lesf2+0xc0>
81123520:	203fee1e 	bne	r4,zero,811234dc <__reset+0xfb1034dc>
81123524:	003ff506 	br	811234fc <__reset+0xfb1034fc>
81123528:	0005883a 	mov	r2,zero
8112352c:	f800283a 	ret

81123530 <__adddf3>:
81123530:	02c00434 	movhi	r11,16
81123534:	5affffc4 	addi	r11,r11,-1
81123538:	2806d7fa 	srli	r3,r5,31
8112353c:	2ad4703a 	and	r10,r5,r11
81123540:	3ad2703a 	and	r9,r7,r11
81123544:	3804d53a 	srli	r2,r7,20
81123548:	3018d77a 	srli	r12,r6,29
8112354c:	280ad53a 	srli	r5,r5,20
81123550:	501490fa 	slli	r10,r10,3
81123554:	2010d77a 	srli	r8,r4,29
81123558:	481290fa 	slli	r9,r9,3
8112355c:	380ed7fa 	srli	r7,r7,31
81123560:	defffb04 	addi	sp,sp,-20
81123564:	de00012e 	bgeu	sp,et,8112356c <__adddf3+0x3c>
81123568:	003b68fa 	trap	3
8112356c:	dc800215 	stw	r18,8(sp)
81123570:	dc400115 	stw	r17,4(sp)
81123574:	dc000015 	stw	r16,0(sp)
81123578:	dfc00415 	stw	ra,16(sp)
8112357c:	dcc00315 	stw	r19,12(sp)
81123580:	1c803fcc 	andi	r18,r3,255
81123584:	2c01ffcc 	andi	r16,r5,2047
81123588:	5210b03a 	or	r8,r10,r8
8112358c:	202290fa 	slli	r17,r4,3
81123590:	1081ffcc 	andi	r2,r2,2047
81123594:	4b12b03a 	or	r9,r9,r12
81123598:	300c90fa 	slli	r6,r6,3
8112359c:	91c07526 	beq	r18,r7,81123774 <__adddf3+0x244>
811235a0:	8087c83a 	sub	r3,r16,r2
811235a4:	00c0ab0e 	bge	zero,r3,81123854 <__adddf3+0x324>
811235a8:	10002a1e 	bne	r2,zero,81123654 <__adddf3+0x124>
811235ac:	4984b03a 	or	r2,r9,r6
811235b0:	1000961e 	bne	r2,zero,8112380c <__adddf3+0x2dc>
811235b4:	888001cc 	andi	r2,r17,7
811235b8:	10000726 	beq	r2,zero,811235d8 <__adddf3+0xa8>
811235bc:	888003cc 	andi	r2,r17,15
811235c0:	00c00104 	movi	r3,4
811235c4:	10c00426 	beq	r2,r3,811235d8 <__adddf3+0xa8>
811235c8:	88c7883a 	add	r3,r17,r3
811235cc:	1c63803a 	cmpltu	r17,r3,r17
811235d0:	4451883a 	add	r8,r8,r17
811235d4:	1823883a 	mov	r17,r3
811235d8:	4080202c 	andhi	r2,r8,128
811235dc:	10005926 	beq	r2,zero,81123744 <__adddf3+0x214>
811235e0:	84000044 	addi	r16,r16,1
811235e4:	0081ffc4 	movi	r2,2047
811235e8:	8080ba26 	beq	r16,r2,811238d4 <__adddf3+0x3a4>
811235ec:	00bfe034 	movhi	r2,65408
811235f0:	10bfffc4 	addi	r2,r2,-1
811235f4:	4090703a 	and	r8,r8,r2
811235f8:	4004977a 	slli	r2,r8,29
811235fc:	4010927a 	slli	r8,r8,9
81123600:	8822d0fa 	srli	r17,r17,3
81123604:	8401ffcc 	andi	r16,r16,2047
81123608:	4010d33a 	srli	r8,r8,12
8112360c:	9007883a 	mov	r3,r18
81123610:	1444b03a 	or	r2,r2,r17
81123614:	8401ffcc 	andi	r16,r16,2047
81123618:	8020953a 	slli	r16,r16,20
8112361c:	18c03fcc 	andi	r3,r3,255
81123620:	01000434 	movhi	r4,16
81123624:	213fffc4 	addi	r4,r4,-1
81123628:	180697fa 	slli	r3,r3,31
8112362c:	4110703a 	and	r8,r8,r4
81123630:	4410b03a 	or	r8,r8,r16
81123634:	40c6b03a 	or	r3,r8,r3
81123638:	dfc00417 	ldw	ra,16(sp)
8112363c:	dcc00317 	ldw	r19,12(sp)
81123640:	dc800217 	ldw	r18,8(sp)
81123644:	dc400117 	ldw	r17,4(sp)
81123648:	dc000017 	ldw	r16,0(sp)
8112364c:	dec00504 	addi	sp,sp,20
81123650:	f800283a 	ret
81123654:	0081ffc4 	movi	r2,2047
81123658:	80bfd626 	beq	r16,r2,811235b4 <__reset+0xfb1035b4>
8112365c:	4a402034 	orhi	r9,r9,128
81123660:	00800e04 	movi	r2,56
81123664:	10c09f16 	blt	r2,r3,811238e4 <__adddf3+0x3b4>
81123668:	008007c4 	movi	r2,31
8112366c:	10c0c216 	blt	r2,r3,81123978 <__adddf3+0x448>
81123670:	00800804 	movi	r2,32
81123674:	10c5c83a 	sub	r2,r2,r3
81123678:	488a983a 	sll	r5,r9,r2
8112367c:	30c8d83a 	srl	r4,r6,r3
81123680:	3084983a 	sll	r2,r6,r2
81123684:	48c6d83a 	srl	r3,r9,r3
81123688:	290cb03a 	or	r6,r5,r4
8112368c:	1004c03a 	cmpne	r2,r2,zero
81123690:	308cb03a 	or	r6,r6,r2
81123694:	898dc83a 	sub	r6,r17,r6
81123698:	89a3803a 	cmpltu	r17,r17,r6
8112369c:	40d1c83a 	sub	r8,r8,r3
811236a0:	4451c83a 	sub	r8,r8,r17
811236a4:	3023883a 	mov	r17,r6
811236a8:	4080202c 	andhi	r2,r8,128
811236ac:	10002326 	beq	r2,zero,8112373c <__adddf3+0x20c>
811236b0:	04c02034 	movhi	r19,128
811236b4:	9cffffc4 	addi	r19,r19,-1
811236b8:	44e6703a 	and	r19,r8,r19
811236bc:	98007626 	beq	r19,zero,81123898 <__adddf3+0x368>
811236c0:	9809883a 	mov	r4,r19
811236c4:	110fc8c0 	call	8110fc8c <__clzsi2>
811236c8:	10fffe04 	addi	r3,r2,-8
811236cc:	010007c4 	movi	r4,31
811236d0:	20c07716 	blt	r4,r3,811238b0 <__adddf3+0x380>
811236d4:	00800804 	movi	r2,32
811236d8:	10c5c83a 	sub	r2,r2,r3
811236dc:	8884d83a 	srl	r2,r17,r2
811236e0:	98d0983a 	sll	r8,r19,r3
811236e4:	88e2983a 	sll	r17,r17,r3
811236e8:	1204b03a 	or	r2,r2,r8
811236ec:	1c007416 	blt	r3,r16,811238c0 <__adddf3+0x390>
811236f0:	1c21c83a 	sub	r16,r3,r16
811236f4:	82000044 	addi	r8,r16,1
811236f8:	00c007c4 	movi	r3,31
811236fc:	1a009116 	blt	r3,r8,81123944 <__adddf3+0x414>
81123700:	00c00804 	movi	r3,32
81123704:	1a07c83a 	sub	r3,r3,r8
81123708:	8a08d83a 	srl	r4,r17,r8
8112370c:	88e2983a 	sll	r17,r17,r3
81123710:	10c6983a 	sll	r3,r2,r3
81123714:	1210d83a 	srl	r8,r2,r8
81123718:	8804c03a 	cmpne	r2,r17,zero
8112371c:	1906b03a 	or	r3,r3,r4
81123720:	18a2b03a 	or	r17,r3,r2
81123724:	0021883a 	mov	r16,zero
81123728:	003fa206 	br	811235b4 <__reset+0xfb1035b4>
8112372c:	1890b03a 	or	r8,r3,r2
81123730:	40017d26 	beq	r8,zero,81123d28 <__adddf3+0x7f8>
81123734:	1011883a 	mov	r8,r2
81123738:	1823883a 	mov	r17,r3
8112373c:	888001cc 	andi	r2,r17,7
81123740:	103f9e1e 	bne	r2,zero,811235bc <__reset+0xfb1035bc>
81123744:	4004977a 	slli	r2,r8,29
81123748:	8822d0fa 	srli	r17,r17,3
8112374c:	4010d0fa 	srli	r8,r8,3
81123750:	9007883a 	mov	r3,r18
81123754:	1444b03a 	or	r2,r2,r17
81123758:	0101ffc4 	movi	r4,2047
8112375c:	81002426 	beq	r16,r4,811237f0 <__adddf3+0x2c0>
81123760:	8120703a 	and	r16,r16,r4
81123764:	01000434 	movhi	r4,16
81123768:	213fffc4 	addi	r4,r4,-1
8112376c:	4110703a 	and	r8,r8,r4
81123770:	003fa806 	br	81123614 <__reset+0xfb103614>
81123774:	8089c83a 	sub	r4,r16,r2
81123778:	01005e0e 	bge	zero,r4,811238f4 <__adddf3+0x3c4>
8112377c:	10002b26 	beq	r2,zero,8112382c <__adddf3+0x2fc>
81123780:	0081ffc4 	movi	r2,2047
81123784:	80bf8b26 	beq	r16,r2,811235b4 <__reset+0xfb1035b4>
81123788:	4a402034 	orhi	r9,r9,128
8112378c:	00800e04 	movi	r2,56
81123790:	1100a40e 	bge	r2,r4,81123a24 <__adddf3+0x4f4>
81123794:	498cb03a 	or	r6,r9,r6
81123798:	300ac03a 	cmpne	r5,r6,zero
8112379c:	0013883a 	mov	r9,zero
811237a0:	2c4b883a 	add	r5,r5,r17
811237a4:	2c63803a 	cmpltu	r17,r5,r17
811237a8:	4a11883a 	add	r8,r9,r8
811237ac:	8a11883a 	add	r8,r17,r8
811237b0:	2823883a 	mov	r17,r5
811237b4:	4080202c 	andhi	r2,r8,128
811237b8:	103fe026 	beq	r2,zero,8112373c <__reset+0xfb10373c>
811237bc:	84000044 	addi	r16,r16,1
811237c0:	0081ffc4 	movi	r2,2047
811237c4:	8080d226 	beq	r16,r2,81123b10 <__adddf3+0x5e0>
811237c8:	00bfe034 	movhi	r2,65408
811237cc:	10bfffc4 	addi	r2,r2,-1
811237d0:	4090703a 	and	r8,r8,r2
811237d4:	880ad07a 	srli	r5,r17,1
811237d8:	400897fa 	slli	r4,r8,31
811237dc:	88c0004c 	andi	r3,r17,1
811237e0:	28e2b03a 	or	r17,r5,r3
811237e4:	4010d07a 	srli	r8,r8,1
811237e8:	2462b03a 	or	r17,r4,r17
811237ec:	003f7106 	br	811235b4 <__reset+0xfb1035b4>
811237f0:	4088b03a 	or	r4,r8,r2
811237f4:	20014526 	beq	r4,zero,81123d0c <__adddf3+0x7dc>
811237f8:	01000434 	movhi	r4,16
811237fc:	42000234 	orhi	r8,r8,8
81123800:	213fffc4 	addi	r4,r4,-1
81123804:	4110703a 	and	r8,r8,r4
81123808:	003f8206 	br	81123614 <__reset+0xfb103614>
8112380c:	18ffffc4 	addi	r3,r3,-1
81123810:	1800491e 	bne	r3,zero,81123938 <__adddf3+0x408>
81123814:	898bc83a 	sub	r5,r17,r6
81123818:	8963803a 	cmpltu	r17,r17,r5
8112381c:	4251c83a 	sub	r8,r8,r9
81123820:	4451c83a 	sub	r8,r8,r17
81123824:	2823883a 	mov	r17,r5
81123828:	003f9f06 	br	811236a8 <__reset+0xfb1036a8>
8112382c:	4984b03a 	or	r2,r9,r6
81123830:	103f6026 	beq	r2,zero,811235b4 <__reset+0xfb1035b4>
81123834:	213fffc4 	addi	r4,r4,-1
81123838:	2000931e 	bne	r4,zero,81123a88 <__adddf3+0x558>
8112383c:	898d883a 	add	r6,r17,r6
81123840:	3463803a 	cmpltu	r17,r6,r17
81123844:	4251883a 	add	r8,r8,r9
81123848:	8a11883a 	add	r8,r17,r8
8112384c:	3023883a 	mov	r17,r6
81123850:	003fd806 	br	811237b4 <__reset+0xfb1037b4>
81123854:	1800541e 	bne	r3,zero,811239a8 <__adddf3+0x478>
81123858:	80800044 	addi	r2,r16,1
8112385c:	1081ffcc 	andi	r2,r2,2047
81123860:	00c00044 	movi	r3,1
81123864:	1880a00e 	bge	r3,r2,81123ae8 <__adddf3+0x5b8>
81123868:	8989c83a 	sub	r4,r17,r6
8112386c:	8905803a 	cmpltu	r2,r17,r4
81123870:	4267c83a 	sub	r19,r8,r9
81123874:	98a7c83a 	sub	r19,r19,r2
81123878:	9880202c 	andhi	r2,r19,128
8112387c:	10006326 	beq	r2,zero,81123a0c <__adddf3+0x4dc>
81123880:	3463c83a 	sub	r17,r6,r17
81123884:	4a07c83a 	sub	r3,r9,r8
81123888:	344d803a 	cmpltu	r6,r6,r17
8112388c:	19a7c83a 	sub	r19,r3,r6
81123890:	3825883a 	mov	r18,r7
81123894:	983f8a1e 	bne	r19,zero,811236c0 <__reset+0xfb1036c0>
81123898:	8809883a 	mov	r4,r17
8112389c:	110fc8c0 	call	8110fc8c <__clzsi2>
811238a0:	10800804 	addi	r2,r2,32
811238a4:	10fffe04 	addi	r3,r2,-8
811238a8:	010007c4 	movi	r4,31
811238ac:	20ff890e 	bge	r4,r3,811236d4 <__reset+0xfb1036d4>
811238b0:	10bff604 	addi	r2,r2,-40
811238b4:	8884983a 	sll	r2,r17,r2
811238b8:	0023883a 	mov	r17,zero
811238bc:	1c3f8c0e 	bge	r3,r16,811236f0 <__reset+0xfb1036f0>
811238c0:	023fe034 	movhi	r8,65408
811238c4:	423fffc4 	addi	r8,r8,-1
811238c8:	80e1c83a 	sub	r16,r16,r3
811238cc:	1210703a 	and	r8,r2,r8
811238d0:	003f3806 	br	811235b4 <__reset+0xfb1035b4>
811238d4:	9007883a 	mov	r3,r18
811238d8:	0011883a 	mov	r8,zero
811238dc:	0005883a 	mov	r2,zero
811238e0:	003f4c06 	br	81123614 <__reset+0xfb103614>
811238e4:	498cb03a 	or	r6,r9,r6
811238e8:	300cc03a 	cmpne	r6,r6,zero
811238ec:	0007883a 	mov	r3,zero
811238f0:	003f6806 	br	81123694 <__reset+0xfb103694>
811238f4:	20009c1e 	bne	r4,zero,81123b68 <__adddf3+0x638>
811238f8:	80800044 	addi	r2,r16,1
811238fc:	1141ffcc 	andi	r5,r2,2047
81123900:	01000044 	movi	r4,1
81123904:	2140670e 	bge	r4,r5,81123aa4 <__adddf3+0x574>
81123908:	0101ffc4 	movi	r4,2047
8112390c:	11007f26 	beq	r2,r4,81123b0c <__adddf3+0x5dc>
81123910:	898d883a 	add	r6,r17,r6
81123914:	4247883a 	add	r3,r8,r9
81123918:	3451803a 	cmpltu	r8,r6,r17
8112391c:	40d1883a 	add	r8,r8,r3
81123920:	402297fa 	slli	r17,r8,31
81123924:	300cd07a 	srli	r6,r6,1
81123928:	4010d07a 	srli	r8,r8,1
8112392c:	1021883a 	mov	r16,r2
81123930:	89a2b03a 	or	r17,r17,r6
81123934:	003f1f06 	br	811235b4 <__reset+0xfb1035b4>
81123938:	0081ffc4 	movi	r2,2047
8112393c:	80bf481e 	bne	r16,r2,81123660 <__reset+0xfb103660>
81123940:	003f1c06 	br	811235b4 <__reset+0xfb1035b4>
81123944:	843ff844 	addi	r16,r16,-31
81123948:	01000804 	movi	r4,32
8112394c:	1406d83a 	srl	r3,r2,r16
81123950:	41005026 	beq	r8,r4,81123a94 <__adddf3+0x564>
81123954:	01001004 	movi	r4,64
81123958:	2211c83a 	sub	r8,r4,r8
8112395c:	1204983a 	sll	r2,r2,r8
81123960:	88a2b03a 	or	r17,r17,r2
81123964:	8822c03a 	cmpne	r17,r17,zero
81123968:	1c62b03a 	or	r17,r3,r17
8112396c:	0011883a 	mov	r8,zero
81123970:	0021883a 	mov	r16,zero
81123974:	003f7106 	br	8112373c <__reset+0xfb10373c>
81123978:	193ff804 	addi	r4,r3,-32
8112397c:	00800804 	movi	r2,32
81123980:	4908d83a 	srl	r4,r9,r4
81123984:	18804526 	beq	r3,r2,81123a9c <__adddf3+0x56c>
81123988:	00801004 	movi	r2,64
8112398c:	10c5c83a 	sub	r2,r2,r3
81123990:	4886983a 	sll	r3,r9,r2
81123994:	198cb03a 	or	r6,r3,r6
81123998:	300cc03a 	cmpne	r6,r6,zero
8112399c:	218cb03a 	or	r6,r4,r6
811239a0:	0007883a 	mov	r3,zero
811239a4:	003f3b06 	br	81123694 <__reset+0xfb103694>
811239a8:	80002a26 	beq	r16,zero,81123a54 <__adddf3+0x524>
811239ac:	0101ffc4 	movi	r4,2047
811239b0:	11006826 	beq	r2,r4,81123b54 <__adddf3+0x624>
811239b4:	00c7c83a 	sub	r3,zero,r3
811239b8:	42002034 	orhi	r8,r8,128
811239bc:	01000e04 	movi	r4,56
811239c0:	20c07c16 	blt	r4,r3,81123bb4 <__adddf3+0x684>
811239c4:	010007c4 	movi	r4,31
811239c8:	20c0da16 	blt	r4,r3,81123d34 <__adddf3+0x804>
811239cc:	01000804 	movi	r4,32
811239d0:	20c9c83a 	sub	r4,r4,r3
811239d4:	4114983a 	sll	r10,r8,r4
811239d8:	88cad83a 	srl	r5,r17,r3
811239dc:	8908983a 	sll	r4,r17,r4
811239e0:	40c6d83a 	srl	r3,r8,r3
811239e4:	5162b03a 	or	r17,r10,r5
811239e8:	2008c03a 	cmpne	r4,r4,zero
811239ec:	8922b03a 	or	r17,r17,r4
811239f0:	3463c83a 	sub	r17,r6,r17
811239f4:	48c7c83a 	sub	r3,r9,r3
811239f8:	344d803a 	cmpltu	r6,r6,r17
811239fc:	1991c83a 	sub	r8,r3,r6
81123a00:	1021883a 	mov	r16,r2
81123a04:	3825883a 	mov	r18,r7
81123a08:	003f2706 	br	811236a8 <__reset+0xfb1036a8>
81123a0c:	24d0b03a 	or	r8,r4,r19
81123a10:	40001b1e 	bne	r8,zero,81123a80 <__adddf3+0x550>
81123a14:	0005883a 	mov	r2,zero
81123a18:	0007883a 	mov	r3,zero
81123a1c:	0021883a 	mov	r16,zero
81123a20:	003f4d06 	br	81123758 <__reset+0xfb103758>
81123a24:	008007c4 	movi	r2,31
81123a28:	11003c16 	blt	r2,r4,81123b1c <__adddf3+0x5ec>
81123a2c:	00800804 	movi	r2,32
81123a30:	1105c83a 	sub	r2,r2,r4
81123a34:	488e983a 	sll	r7,r9,r2
81123a38:	310ad83a 	srl	r5,r6,r4
81123a3c:	3084983a 	sll	r2,r6,r2
81123a40:	4912d83a 	srl	r9,r9,r4
81123a44:	394ab03a 	or	r5,r7,r5
81123a48:	1004c03a 	cmpne	r2,r2,zero
81123a4c:	288ab03a 	or	r5,r5,r2
81123a50:	003f5306 	br	811237a0 <__reset+0xfb1037a0>
81123a54:	4448b03a 	or	r4,r8,r17
81123a58:	20003e26 	beq	r4,zero,81123b54 <__adddf3+0x624>
81123a5c:	00c6303a 	nor	r3,zero,r3
81123a60:	18003a1e 	bne	r3,zero,81123b4c <__adddf3+0x61c>
81123a64:	3463c83a 	sub	r17,r6,r17
81123a68:	4a07c83a 	sub	r3,r9,r8
81123a6c:	344d803a 	cmpltu	r6,r6,r17
81123a70:	1991c83a 	sub	r8,r3,r6
81123a74:	1021883a 	mov	r16,r2
81123a78:	3825883a 	mov	r18,r7
81123a7c:	003f0a06 	br	811236a8 <__reset+0xfb1036a8>
81123a80:	2023883a 	mov	r17,r4
81123a84:	003f0d06 	br	811236bc <__reset+0xfb1036bc>
81123a88:	0081ffc4 	movi	r2,2047
81123a8c:	80bf3f1e 	bne	r16,r2,8112378c <__reset+0xfb10378c>
81123a90:	003ec806 	br	811235b4 <__reset+0xfb1035b4>
81123a94:	0005883a 	mov	r2,zero
81123a98:	003fb106 	br	81123960 <__reset+0xfb103960>
81123a9c:	0007883a 	mov	r3,zero
81123aa0:	003fbc06 	br	81123994 <__reset+0xfb103994>
81123aa4:	4444b03a 	or	r2,r8,r17
81123aa8:	8000871e 	bne	r16,zero,81123cc8 <__adddf3+0x798>
81123aac:	1000ba26 	beq	r2,zero,81123d98 <__adddf3+0x868>
81123ab0:	4984b03a 	or	r2,r9,r6
81123ab4:	103ebf26 	beq	r2,zero,811235b4 <__reset+0xfb1035b4>
81123ab8:	8985883a 	add	r2,r17,r6
81123abc:	4247883a 	add	r3,r8,r9
81123ac0:	1451803a 	cmpltu	r8,r2,r17
81123ac4:	40d1883a 	add	r8,r8,r3
81123ac8:	40c0202c 	andhi	r3,r8,128
81123acc:	1023883a 	mov	r17,r2
81123ad0:	183f1a26 	beq	r3,zero,8112373c <__reset+0xfb10373c>
81123ad4:	00bfe034 	movhi	r2,65408
81123ad8:	10bfffc4 	addi	r2,r2,-1
81123adc:	2021883a 	mov	r16,r4
81123ae0:	4090703a 	and	r8,r8,r2
81123ae4:	003eb306 	br	811235b4 <__reset+0xfb1035b4>
81123ae8:	4444b03a 	or	r2,r8,r17
81123aec:	8000291e 	bne	r16,zero,81123b94 <__adddf3+0x664>
81123af0:	10004b1e 	bne	r2,zero,81123c20 <__adddf3+0x6f0>
81123af4:	4990b03a 	or	r8,r9,r6
81123af8:	40008b26 	beq	r8,zero,81123d28 <__adddf3+0x7f8>
81123afc:	4811883a 	mov	r8,r9
81123b00:	3023883a 	mov	r17,r6
81123b04:	3825883a 	mov	r18,r7
81123b08:	003eaa06 	br	811235b4 <__reset+0xfb1035b4>
81123b0c:	1021883a 	mov	r16,r2
81123b10:	0011883a 	mov	r8,zero
81123b14:	0005883a 	mov	r2,zero
81123b18:	003f0f06 	br	81123758 <__reset+0xfb103758>
81123b1c:	217ff804 	addi	r5,r4,-32
81123b20:	00800804 	movi	r2,32
81123b24:	494ad83a 	srl	r5,r9,r5
81123b28:	20807d26 	beq	r4,r2,81123d20 <__adddf3+0x7f0>
81123b2c:	00801004 	movi	r2,64
81123b30:	1109c83a 	sub	r4,r2,r4
81123b34:	4912983a 	sll	r9,r9,r4
81123b38:	498cb03a 	or	r6,r9,r6
81123b3c:	300cc03a 	cmpne	r6,r6,zero
81123b40:	298ab03a 	or	r5,r5,r6
81123b44:	0013883a 	mov	r9,zero
81123b48:	003f1506 	br	811237a0 <__reset+0xfb1037a0>
81123b4c:	0101ffc4 	movi	r4,2047
81123b50:	113f9a1e 	bne	r2,r4,811239bc <__reset+0xfb1039bc>
81123b54:	4811883a 	mov	r8,r9
81123b58:	3023883a 	mov	r17,r6
81123b5c:	1021883a 	mov	r16,r2
81123b60:	3825883a 	mov	r18,r7
81123b64:	003e9306 	br	811235b4 <__reset+0xfb1035b4>
81123b68:	8000161e 	bne	r16,zero,81123bc4 <__adddf3+0x694>
81123b6c:	444ab03a 	or	r5,r8,r17
81123b70:	28005126 	beq	r5,zero,81123cb8 <__adddf3+0x788>
81123b74:	0108303a 	nor	r4,zero,r4
81123b78:	20004d1e 	bne	r4,zero,81123cb0 <__adddf3+0x780>
81123b7c:	89a3883a 	add	r17,r17,r6
81123b80:	4253883a 	add	r9,r8,r9
81123b84:	898d803a 	cmpltu	r6,r17,r6
81123b88:	3251883a 	add	r8,r6,r9
81123b8c:	1021883a 	mov	r16,r2
81123b90:	003f0806 	br	811237b4 <__reset+0xfb1037b4>
81123b94:	1000301e 	bne	r2,zero,81123c58 <__adddf3+0x728>
81123b98:	4984b03a 	or	r2,r9,r6
81123b9c:	10007126 	beq	r2,zero,81123d64 <__adddf3+0x834>
81123ba0:	4811883a 	mov	r8,r9
81123ba4:	3023883a 	mov	r17,r6
81123ba8:	3825883a 	mov	r18,r7
81123bac:	0401ffc4 	movi	r16,2047
81123bb0:	003e8006 	br	811235b4 <__reset+0xfb1035b4>
81123bb4:	4462b03a 	or	r17,r8,r17
81123bb8:	8822c03a 	cmpne	r17,r17,zero
81123bbc:	0007883a 	mov	r3,zero
81123bc0:	003f8b06 	br	811239f0 <__reset+0xfb1039f0>
81123bc4:	0141ffc4 	movi	r5,2047
81123bc8:	11403b26 	beq	r2,r5,81123cb8 <__adddf3+0x788>
81123bcc:	0109c83a 	sub	r4,zero,r4
81123bd0:	42002034 	orhi	r8,r8,128
81123bd4:	01400e04 	movi	r5,56
81123bd8:	29006716 	blt	r5,r4,81123d78 <__adddf3+0x848>
81123bdc:	014007c4 	movi	r5,31
81123be0:	29007016 	blt	r5,r4,81123da4 <__adddf3+0x874>
81123be4:	01400804 	movi	r5,32
81123be8:	290bc83a 	sub	r5,r5,r4
81123bec:	4154983a 	sll	r10,r8,r5
81123bf0:	890ed83a 	srl	r7,r17,r4
81123bf4:	894a983a 	sll	r5,r17,r5
81123bf8:	4108d83a 	srl	r4,r8,r4
81123bfc:	51e2b03a 	or	r17,r10,r7
81123c00:	280ac03a 	cmpne	r5,r5,zero
81123c04:	8962b03a 	or	r17,r17,r5
81123c08:	89a3883a 	add	r17,r17,r6
81123c0c:	2253883a 	add	r9,r4,r9
81123c10:	898d803a 	cmpltu	r6,r17,r6
81123c14:	3251883a 	add	r8,r6,r9
81123c18:	1021883a 	mov	r16,r2
81123c1c:	003ee506 	br	811237b4 <__reset+0xfb1037b4>
81123c20:	4984b03a 	or	r2,r9,r6
81123c24:	103e6326 	beq	r2,zero,811235b4 <__reset+0xfb1035b4>
81123c28:	8987c83a 	sub	r3,r17,r6
81123c2c:	88c9803a 	cmpltu	r4,r17,r3
81123c30:	4245c83a 	sub	r2,r8,r9
81123c34:	1105c83a 	sub	r2,r2,r4
81123c38:	1100202c 	andhi	r4,r2,128
81123c3c:	203ebb26 	beq	r4,zero,8112372c <__reset+0xfb10372c>
81123c40:	3463c83a 	sub	r17,r6,r17
81123c44:	4a07c83a 	sub	r3,r9,r8
81123c48:	344d803a 	cmpltu	r6,r6,r17
81123c4c:	1991c83a 	sub	r8,r3,r6
81123c50:	3825883a 	mov	r18,r7
81123c54:	003e5706 	br	811235b4 <__reset+0xfb1035b4>
81123c58:	4984b03a 	or	r2,r9,r6
81123c5c:	10002e26 	beq	r2,zero,81123d18 <__adddf3+0x7e8>
81123c60:	4004d0fa 	srli	r2,r8,3
81123c64:	8822d0fa 	srli	r17,r17,3
81123c68:	4010977a 	slli	r8,r8,29
81123c6c:	10c0022c 	andhi	r3,r2,8
81123c70:	4462b03a 	or	r17,r8,r17
81123c74:	18000826 	beq	r3,zero,81123c98 <__adddf3+0x768>
81123c78:	4808d0fa 	srli	r4,r9,3
81123c7c:	20c0022c 	andhi	r3,r4,8
81123c80:	1800051e 	bne	r3,zero,81123c98 <__adddf3+0x768>
81123c84:	300cd0fa 	srli	r6,r6,3
81123c88:	4806977a 	slli	r3,r9,29
81123c8c:	2005883a 	mov	r2,r4
81123c90:	3825883a 	mov	r18,r7
81123c94:	19a2b03a 	or	r17,r3,r6
81123c98:	8810d77a 	srli	r8,r17,29
81123c9c:	100490fa 	slli	r2,r2,3
81123ca0:	882290fa 	slli	r17,r17,3
81123ca4:	0401ffc4 	movi	r16,2047
81123ca8:	4090b03a 	or	r8,r8,r2
81123cac:	003e4106 	br	811235b4 <__reset+0xfb1035b4>
81123cb0:	0141ffc4 	movi	r5,2047
81123cb4:	117fc71e 	bne	r2,r5,81123bd4 <__reset+0xfb103bd4>
81123cb8:	4811883a 	mov	r8,r9
81123cbc:	3023883a 	mov	r17,r6
81123cc0:	1021883a 	mov	r16,r2
81123cc4:	003e3b06 	br	811235b4 <__reset+0xfb1035b4>
81123cc8:	10002f26 	beq	r2,zero,81123d88 <__adddf3+0x858>
81123ccc:	4984b03a 	or	r2,r9,r6
81123cd0:	10001126 	beq	r2,zero,81123d18 <__adddf3+0x7e8>
81123cd4:	4004d0fa 	srli	r2,r8,3
81123cd8:	8822d0fa 	srli	r17,r17,3
81123cdc:	4010977a 	slli	r8,r8,29
81123ce0:	10c0022c 	andhi	r3,r2,8
81123ce4:	4462b03a 	or	r17,r8,r17
81123ce8:	183feb26 	beq	r3,zero,81123c98 <__reset+0xfb103c98>
81123cec:	4808d0fa 	srli	r4,r9,3
81123cf0:	20c0022c 	andhi	r3,r4,8
81123cf4:	183fe81e 	bne	r3,zero,81123c98 <__reset+0xfb103c98>
81123cf8:	300cd0fa 	srli	r6,r6,3
81123cfc:	4806977a 	slli	r3,r9,29
81123d00:	2005883a 	mov	r2,r4
81123d04:	19a2b03a 	or	r17,r3,r6
81123d08:	003fe306 	br	81123c98 <__reset+0xfb103c98>
81123d0c:	0011883a 	mov	r8,zero
81123d10:	0005883a 	mov	r2,zero
81123d14:	003e3f06 	br	81123614 <__reset+0xfb103614>
81123d18:	0401ffc4 	movi	r16,2047
81123d1c:	003e2506 	br	811235b4 <__reset+0xfb1035b4>
81123d20:	0013883a 	mov	r9,zero
81123d24:	003f8406 	br	81123b38 <__reset+0xfb103b38>
81123d28:	0005883a 	mov	r2,zero
81123d2c:	0007883a 	mov	r3,zero
81123d30:	003e8906 	br	81123758 <__reset+0xfb103758>
81123d34:	197ff804 	addi	r5,r3,-32
81123d38:	01000804 	movi	r4,32
81123d3c:	414ad83a 	srl	r5,r8,r5
81123d40:	19002426 	beq	r3,r4,81123dd4 <__adddf3+0x8a4>
81123d44:	01001004 	movi	r4,64
81123d48:	20c7c83a 	sub	r3,r4,r3
81123d4c:	40c6983a 	sll	r3,r8,r3
81123d50:	1c46b03a 	or	r3,r3,r17
81123d54:	1806c03a 	cmpne	r3,r3,zero
81123d58:	28e2b03a 	or	r17,r5,r3
81123d5c:	0007883a 	mov	r3,zero
81123d60:	003f2306 	br	811239f0 <__reset+0xfb1039f0>
81123d64:	0007883a 	mov	r3,zero
81123d68:	5811883a 	mov	r8,r11
81123d6c:	00bfffc4 	movi	r2,-1
81123d70:	0401ffc4 	movi	r16,2047
81123d74:	003e7806 	br	81123758 <__reset+0xfb103758>
81123d78:	4462b03a 	or	r17,r8,r17
81123d7c:	8822c03a 	cmpne	r17,r17,zero
81123d80:	0009883a 	mov	r4,zero
81123d84:	003fa006 	br	81123c08 <__reset+0xfb103c08>
81123d88:	4811883a 	mov	r8,r9
81123d8c:	3023883a 	mov	r17,r6
81123d90:	0401ffc4 	movi	r16,2047
81123d94:	003e0706 	br	811235b4 <__reset+0xfb1035b4>
81123d98:	4811883a 	mov	r8,r9
81123d9c:	3023883a 	mov	r17,r6
81123da0:	003e0406 	br	811235b4 <__reset+0xfb1035b4>
81123da4:	21fff804 	addi	r7,r4,-32
81123da8:	01400804 	movi	r5,32
81123dac:	41ced83a 	srl	r7,r8,r7
81123db0:	21400a26 	beq	r4,r5,81123ddc <__adddf3+0x8ac>
81123db4:	01401004 	movi	r5,64
81123db8:	2909c83a 	sub	r4,r5,r4
81123dbc:	4108983a 	sll	r4,r8,r4
81123dc0:	2448b03a 	or	r4,r4,r17
81123dc4:	2008c03a 	cmpne	r4,r4,zero
81123dc8:	3922b03a 	or	r17,r7,r4
81123dcc:	0009883a 	mov	r4,zero
81123dd0:	003f8d06 	br	81123c08 <__reset+0xfb103c08>
81123dd4:	0007883a 	mov	r3,zero
81123dd8:	003fdd06 	br	81123d50 <__reset+0xfb103d50>
81123ddc:	0009883a 	mov	r4,zero
81123de0:	003ff706 	br	81123dc0 <__reset+0xfb103dc0>

81123de4 <__divdf3>:
81123de4:	defff204 	addi	sp,sp,-56
81123de8:	de00012e 	bgeu	sp,et,81123df0 <__divdf3+0xc>
81123dec:	003b68fa 	trap	3
81123df0:	dd400915 	stw	r21,36(sp)
81123df4:	282ad53a 	srli	r21,r5,20
81123df8:	dd000815 	stw	r20,32(sp)
81123dfc:	2828d7fa 	srli	r20,r5,31
81123e00:	dc000415 	stw	r16,16(sp)
81123e04:	04000434 	movhi	r16,16
81123e08:	df000c15 	stw	fp,48(sp)
81123e0c:	843fffc4 	addi	r16,r16,-1
81123e10:	dfc00d15 	stw	ra,52(sp)
81123e14:	ddc00b15 	stw	r23,44(sp)
81123e18:	dd800a15 	stw	r22,40(sp)
81123e1c:	dcc00715 	stw	r19,28(sp)
81123e20:	dc800615 	stw	r18,24(sp)
81123e24:	dc400515 	stw	r17,20(sp)
81123e28:	ad41ffcc 	andi	r21,r21,2047
81123e2c:	2c20703a 	and	r16,r5,r16
81123e30:	a7003fcc 	andi	fp,r20,255
81123e34:	a8006126 	beq	r21,zero,81123fbc <__divdf3+0x1d8>
81123e38:	0081ffc4 	movi	r2,2047
81123e3c:	2025883a 	mov	r18,r4
81123e40:	a8803726 	beq	r21,r2,81123f20 <__divdf3+0x13c>
81123e44:	80800434 	orhi	r2,r16,16
81123e48:	100490fa 	slli	r2,r2,3
81123e4c:	2020d77a 	srli	r16,r4,29
81123e50:	202490fa 	slli	r18,r4,3
81123e54:	ad7f0044 	addi	r21,r21,-1023
81123e58:	80a0b03a 	or	r16,r16,r2
81123e5c:	0027883a 	mov	r19,zero
81123e60:	0013883a 	mov	r9,zero
81123e64:	3804d53a 	srli	r2,r7,20
81123e68:	382cd7fa 	srli	r22,r7,31
81123e6c:	04400434 	movhi	r17,16
81123e70:	8c7fffc4 	addi	r17,r17,-1
81123e74:	1081ffcc 	andi	r2,r2,2047
81123e78:	3011883a 	mov	r8,r6
81123e7c:	3c62703a 	and	r17,r7,r17
81123e80:	b5c03fcc 	andi	r23,r22,255
81123e84:	10006c26 	beq	r2,zero,81124038 <__divdf3+0x254>
81123e88:	00c1ffc4 	movi	r3,2047
81123e8c:	10c06426 	beq	r2,r3,81124020 <__divdf3+0x23c>
81123e90:	88c00434 	orhi	r3,r17,16
81123e94:	180690fa 	slli	r3,r3,3
81123e98:	3022d77a 	srli	r17,r6,29
81123e9c:	301090fa 	slli	r8,r6,3
81123ea0:	10bf0044 	addi	r2,r2,-1023
81123ea4:	88e2b03a 	or	r17,r17,r3
81123ea8:	000f883a 	mov	r7,zero
81123eac:	a58cf03a 	xor	r6,r20,r22
81123eb0:	3cc8b03a 	or	r4,r7,r19
81123eb4:	a8abc83a 	sub	r21,r21,r2
81123eb8:	008003c4 	movi	r2,15
81123ebc:	3007883a 	mov	r3,r6
81123ec0:	34c03fcc 	andi	r19,r6,255
81123ec4:	11009036 	bltu	r2,r4,81124108 <__divdf3+0x324>
81123ec8:	200890ba 	slli	r4,r4,2
81123ecc:	00a044b4 	movhi	r2,33042
81123ed0:	108fb804 	addi	r2,r2,16096
81123ed4:	2089883a 	add	r4,r4,r2
81123ed8:	20800017 	ldw	r2,0(r4)
81123edc:	1000683a 	jmp	r2
81123ee0:	81124108 	cmpgei	r4,r16,18692
81123ee4:	81123f58 	cmpnei	r4,r16,18685
81123ee8:	811240f8 	rdprs	r4,r16,18691
81123eec:	81123f4c 	andi	r4,r16,18685
81123ef0:	811240f8 	rdprs	r4,r16,18691
81123ef4:	811240cc 	andi	r4,r16,18691
81123ef8:	811240f8 	rdprs	r4,r16,18691
81123efc:	81123f4c 	andi	r4,r16,18685
81123f00:	81123f58 	cmpnei	r4,r16,18685
81123f04:	81123f58 	cmpnei	r4,r16,18685
81123f08:	811240cc 	andi	r4,r16,18691
81123f0c:	81123f4c 	andi	r4,r16,18685
81123f10:	81123f3c 	xorhi	r4,r16,18684
81123f14:	81123f3c 	xorhi	r4,r16,18684
81123f18:	81123f3c 	xorhi	r4,r16,18684
81123f1c:	811243ec 	andhi	r4,r16,18703
81123f20:	2404b03a 	or	r2,r4,r16
81123f24:	1000661e 	bne	r2,zero,811240c0 <__divdf3+0x2dc>
81123f28:	04c00204 	movi	r19,8
81123f2c:	0021883a 	mov	r16,zero
81123f30:	0025883a 	mov	r18,zero
81123f34:	02400084 	movi	r9,2
81123f38:	003fca06 	br	81123e64 <__reset+0xfb103e64>
81123f3c:	8023883a 	mov	r17,r16
81123f40:	9011883a 	mov	r8,r18
81123f44:	e02f883a 	mov	r23,fp
81123f48:	480f883a 	mov	r7,r9
81123f4c:	00800084 	movi	r2,2
81123f50:	3881311e 	bne	r7,r2,81124418 <__divdf3+0x634>
81123f54:	b827883a 	mov	r19,r23
81123f58:	98c0004c 	andi	r3,r19,1
81123f5c:	0081ffc4 	movi	r2,2047
81123f60:	000b883a 	mov	r5,zero
81123f64:	0025883a 	mov	r18,zero
81123f68:	1004953a 	slli	r2,r2,20
81123f6c:	18c03fcc 	andi	r3,r3,255
81123f70:	04400434 	movhi	r17,16
81123f74:	8c7fffc4 	addi	r17,r17,-1
81123f78:	180697fa 	slli	r3,r3,31
81123f7c:	2c4a703a 	and	r5,r5,r17
81123f80:	288ab03a 	or	r5,r5,r2
81123f84:	28c6b03a 	or	r3,r5,r3
81123f88:	9005883a 	mov	r2,r18
81123f8c:	dfc00d17 	ldw	ra,52(sp)
81123f90:	df000c17 	ldw	fp,48(sp)
81123f94:	ddc00b17 	ldw	r23,44(sp)
81123f98:	dd800a17 	ldw	r22,40(sp)
81123f9c:	dd400917 	ldw	r21,36(sp)
81123fa0:	dd000817 	ldw	r20,32(sp)
81123fa4:	dcc00717 	ldw	r19,28(sp)
81123fa8:	dc800617 	ldw	r18,24(sp)
81123fac:	dc400517 	ldw	r17,20(sp)
81123fb0:	dc000417 	ldw	r16,16(sp)
81123fb4:	dec00e04 	addi	sp,sp,56
81123fb8:	f800283a 	ret
81123fbc:	2404b03a 	or	r2,r4,r16
81123fc0:	2027883a 	mov	r19,r4
81123fc4:	10003926 	beq	r2,zero,811240ac <__divdf3+0x2c8>
81123fc8:	80012e26 	beq	r16,zero,81124484 <__divdf3+0x6a0>
81123fcc:	8009883a 	mov	r4,r16
81123fd0:	d9800315 	stw	r6,12(sp)
81123fd4:	d9c00215 	stw	r7,8(sp)
81123fd8:	110fc8c0 	call	8110fc8c <__clzsi2>
81123fdc:	d9800317 	ldw	r6,12(sp)
81123fe0:	d9c00217 	ldw	r7,8(sp)
81123fe4:	113ffd44 	addi	r4,r2,-11
81123fe8:	00c00704 	movi	r3,28
81123fec:	19012116 	blt	r3,r4,81124474 <__divdf3+0x690>
81123ff0:	00c00744 	movi	r3,29
81123ff4:	147ffe04 	addi	r17,r2,-8
81123ff8:	1907c83a 	sub	r3,r3,r4
81123ffc:	8460983a 	sll	r16,r16,r17
81124000:	98c6d83a 	srl	r3,r19,r3
81124004:	9c64983a 	sll	r18,r19,r17
81124008:	1c20b03a 	or	r16,r3,r16
8112400c:	1080fcc4 	addi	r2,r2,1011
81124010:	00abc83a 	sub	r21,zero,r2
81124014:	0027883a 	mov	r19,zero
81124018:	0013883a 	mov	r9,zero
8112401c:	003f9106 	br	81123e64 <__reset+0xfb103e64>
81124020:	3446b03a 	or	r3,r6,r17
81124024:	18001f1e 	bne	r3,zero,811240a4 <__divdf3+0x2c0>
81124028:	0023883a 	mov	r17,zero
8112402c:	0011883a 	mov	r8,zero
81124030:	01c00084 	movi	r7,2
81124034:	003f9d06 	br	81123eac <__reset+0xfb103eac>
81124038:	3446b03a 	or	r3,r6,r17
8112403c:	18001526 	beq	r3,zero,81124094 <__divdf3+0x2b0>
81124040:	88011b26 	beq	r17,zero,811244b0 <__divdf3+0x6cc>
81124044:	8809883a 	mov	r4,r17
81124048:	d9800315 	stw	r6,12(sp)
8112404c:	da400115 	stw	r9,4(sp)
81124050:	110fc8c0 	call	8110fc8c <__clzsi2>
81124054:	d9800317 	ldw	r6,12(sp)
81124058:	da400117 	ldw	r9,4(sp)
8112405c:	113ffd44 	addi	r4,r2,-11
81124060:	00c00704 	movi	r3,28
81124064:	19010e16 	blt	r3,r4,811244a0 <__divdf3+0x6bc>
81124068:	00c00744 	movi	r3,29
8112406c:	123ffe04 	addi	r8,r2,-8
81124070:	1907c83a 	sub	r3,r3,r4
81124074:	8a22983a 	sll	r17,r17,r8
81124078:	30c6d83a 	srl	r3,r6,r3
8112407c:	3210983a 	sll	r8,r6,r8
81124080:	1c62b03a 	or	r17,r3,r17
81124084:	1080fcc4 	addi	r2,r2,1011
81124088:	0085c83a 	sub	r2,zero,r2
8112408c:	000f883a 	mov	r7,zero
81124090:	003f8606 	br	81123eac <__reset+0xfb103eac>
81124094:	0023883a 	mov	r17,zero
81124098:	0011883a 	mov	r8,zero
8112409c:	01c00044 	movi	r7,1
811240a0:	003f8206 	br	81123eac <__reset+0xfb103eac>
811240a4:	01c000c4 	movi	r7,3
811240a8:	003f8006 	br	81123eac <__reset+0xfb103eac>
811240ac:	04c00104 	movi	r19,4
811240b0:	0021883a 	mov	r16,zero
811240b4:	0025883a 	mov	r18,zero
811240b8:	02400044 	movi	r9,1
811240bc:	003f6906 	br	81123e64 <__reset+0xfb103e64>
811240c0:	04c00304 	movi	r19,12
811240c4:	024000c4 	movi	r9,3
811240c8:	003f6606 	br	81123e64 <__reset+0xfb103e64>
811240cc:	01400434 	movhi	r5,16
811240d0:	0007883a 	mov	r3,zero
811240d4:	297fffc4 	addi	r5,r5,-1
811240d8:	04bfffc4 	movi	r18,-1
811240dc:	0081ffc4 	movi	r2,2047
811240e0:	003fa106 	br	81123f68 <__reset+0xfb103f68>
811240e4:	00c00044 	movi	r3,1
811240e8:	1887c83a 	sub	r3,r3,r2
811240ec:	01000e04 	movi	r4,56
811240f0:	20c1210e 	bge	r4,r3,81124578 <__divdf3+0x794>
811240f4:	98c0004c 	andi	r3,r19,1
811240f8:	0005883a 	mov	r2,zero
811240fc:	000b883a 	mov	r5,zero
81124100:	0025883a 	mov	r18,zero
81124104:	003f9806 	br	81123f68 <__reset+0xfb103f68>
81124108:	8c00fd36 	bltu	r17,r16,81124500 <__divdf3+0x71c>
8112410c:	8440fb26 	beq	r16,r17,811244fc <__divdf3+0x718>
81124110:	8007883a 	mov	r3,r16
81124114:	ad7fffc4 	addi	r21,r21,-1
81124118:	0021883a 	mov	r16,zero
8112411c:	4004d63a 	srli	r2,r8,24
81124120:	8822923a 	slli	r17,r17,8
81124124:	1809883a 	mov	r4,r3
81124128:	402c923a 	slli	r22,r8,8
8112412c:	88b8b03a 	or	fp,r17,r2
81124130:	e028d43a 	srli	r20,fp,16
81124134:	d8c00015 	stw	r3,0(sp)
81124138:	e5ffffcc 	andi	r23,fp,65535
8112413c:	a00b883a 	mov	r5,r20
81124140:	11232780 	call	81123278 <__udivsi3>
81124144:	d8c00017 	ldw	r3,0(sp)
81124148:	a00b883a 	mov	r5,r20
8112414c:	d8800315 	stw	r2,12(sp)
81124150:	1809883a 	mov	r4,r3
81124154:	11232dc0 	call	811232dc <__umodsi3>
81124158:	d9800317 	ldw	r6,12(sp)
8112415c:	1006943a 	slli	r3,r2,16
81124160:	9004d43a 	srli	r2,r18,16
81124164:	b9a3383a 	mul	r17,r23,r6
81124168:	10c4b03a 	or	r2,r2,r3
8112416c:	1440062e 	bgeu	r2,r17,81124188 <__divdf3+0x3a4>
81124170:	1705883a 	add	r2,r2,fp
81124174:	30ffffc4 	addi	r3,r6,-1
81124178:	1700ee36 	bltu	r2,fp,81124534 <__divdf3+0x750>
8112417c:	1440ed2e 	bgeu	r2,r17,81124534 <__divdf3+0x750>
81124180:	31bfff84 	addi	r6,r6,-2
81124184:	1705883a 	add	r2,r2,fp
81124188:	1463c83a 	sub	r17,r2,r17
8112418c:	a00b883a 	mov	r5,r20
81124190:	8809883a 	mov	r4,r17
81124194:	d9800315 	stw	r6,12(sp)
81124198:	11232780 	call	81123278 <__udivsi3>
8112419c:	a00b883a 	mov	r5,r20
811241a0:	8809883a 	mov	r4,r17
811241a4:	d8800215 	stw	r2,8(sp)
811241a8:	11232dc0 	call	811232dc <__umodsi3>
811241ac:	d9c00217 	ldw	r7,8(sp)
811241b0:	1004943a 	slli	r2,r2,16
811241b4:	94bfffcc 	andi	r18,r18,65535
811241b8:	b9d1383a 	mul	r8,r23,r7
811241bc:	90a4b03a 	or	r18,r18,r2
811241c0:	d9800317 	ldw	r6,12(sp)
811241c4:	9200062e 	bgeu	r18,r8,811241e0 <__divdf3+0x3fc>
811241c8:	9725883a 	add	r18,r18,fp
811241cc:	38bfffc4 	addi	r2,r7,-1
811241d0:	9700d636 	bltu	r18,fp,8112452c <__divdf3+0x748>
811241d4:	9200d52e 	bgeu	r18,r8,8112452c <__divdf3+0x748>
811241d8:	39ffff84 	addi	r7,r7,-2
811241dc:	9725883a 	add	r18,r18,fp
811241e0:	3004943a 	slli	r2,r6,16
811241e4:	b012d43a 	srli	r9,r22,16
811241e8:	b1bfffcc 	andi	r6,r22,65535
811241ec:	11e2b03a 	or	r17,r2,r7
811241f0:	8806d43a 	srli	r3,r17,16
811241f4:	893fffcc 	andi	r4,r17,65535
811241f8:	218b383a 	mul	r5,r4,r6
811241fc:	30c5383a 	mul	r2,r6,r3
81124200:	2249383a 	mul	r4,r4,r9
81124204:	280ed43a 	srli	r7,r5,16
81124208:	9225c83a 	sub	r18,r18,r8
8112420c:	2089883a 	add	r4,r4,r2
81124210:	3909883a 	add	r4,r7,r4
81124214:	1a47383a 	mul	r3,r3,r9
81124218:	2080022e 	bgeu	r4,r2,81124224 <__divdf3+0x440>
8112421c:	00800074 	movhi	r2,1
81124220:	1887883a 	add	r3,r3,r2
81124224:	2004d43a 	srli	r2,r4,16
81124228:	2008943a 	slli	r4,r4,16
8112422c:	297fffcc 	andi	r5,r5,65535
81124230:	10c7883a 	add	r3,r2,r3
81124234:	2149883a 	add	r4,r4,r5
81124238:	90c0a536 	bltu	r18,r3,811244d0 <__divdf3+0x6ec>
8112423c:	90c0bf26 	beq	r18,r3,8112453c <__divdf3+0x758>
81124240:	90c7c83a 	sub	r3,r18,r3
81124244:	810fc83a 	sub	r7,r16,r4
81124248:	81e5803a 	cmpltu	r18,r16,r7
8112424c:	1ca5c83a 	sub	r18,r3,r18
81124250:	e480c126 	beq	fp,r18,81124558 <__divdf3+0x774>
81124254:	a00b883a 	mov	r5,r20
81124258:	9009883a 	mov	r4,r18
8112425c:	d9800315 	stw	r6,12(sp)
81124260:	d9c00215 	stw	r7,8(sp)
81124264:	da400115 	stw	r9,4(sp)
81124268:	11232780 	call	81123278 <__udivsi3>
8112426c:	a00b883a 	mov	r5,r20
81124270:	9009883a 	mov	r4,r18
81124274:	d8800015 	stw	r2,0(sp)
81124278:	11232dc0 	call	811232dc <__umodsi3>
8112427c:	d9c00217 	ldw	r7,8(sp)
81124280:	da000017 	ldw	r8,0(sp)
81124284:	1006943a 	slli	r3,r2,16
81124288:	3804d43a 	srli	r2,r7,16
8112428c:	ba21383a 	mul	r16,r23,r8
81124290:	d9800317 	ldw	r6,12(sp)
81124294:	10c4b03a 	or	r2,r2,r3
81124298:	da400117 	ldw	r9,4(sp)
8112429c:	1400062e 	bgeu	r2,r16,811242b8 <__divdf3+0x4d4>
811242a0:	1705883a 	add	r2,r2,fp
811242a4:	40ffffc4 	addi	r3,r8,-1
811242a8:	1700ad36 	bltu	r2,fp,81124560 <__divdf3+0x77c>
811242ac:	1400ac2e 	bgeu	r2,r16,81124560 <__divdf3+0x77c>
811242b0:	423fff84 	addi	r8,r8,-2
811242b4:	1705883a 	add	r2,r2,fp
811242b8:	1421c83a 	sub	r16,r2,r16
811242bc:	a00b883a 	mov	r5,r20
811242c0:	8009883a 	mov	r4,r16
811242c4:	d9800315 	stw	r6,12(sp)
811242c8:	d9c00215 	stw	r7,8(sp)
811242cc:	da000015 	stw	r8,0(sp)
811242d0:	da400115 	stw	r9,4(sp)
811242d4:	11232780 	call	81123278 <__udivsi3>
811242d8:	8009883a 	mov	r4,r16
811242dc:	a00b883a 	mov	r5,r20
811242e0:	1025883a 	mov	r18,r2
811242e4:	11232dc0 	call	811232dc <__umodsi3>
811242e8:	d9c00217 	ldw	r7,8(sp)
811242ec:	1004943a 	slli	r2,r2,16
811242f0:	bcaf383a 	mul	r23,r23,r18
811242f4:	393fffcc 	andi	r4,r7,65535
811242f8:	2088b03a 	or	r4,r4,r2
811242fc:	d9800317 	ldw	r6,12(sp)
81124300:	da000017 	ldw	r8,0(sp)
81124304:	da400117 	ldw	r9,4(sp)
81124308:	25c0062e 	bgeu	r4,r23,81124324 <__divdf3+0x540>
8112430c:	2709883a 	add	r4,r4,fp
81124310:	90bfffc4 	addi	r2,r18,-1
81124314:	27009436 	bltu	r4,fp,81124568 <__divdf3+0x784>
81124318:	25c0932e 	bgeu	r4,r23,81124568 <__divdf3+0x784>
8112431c:	94bfff84 	addi	r18,r18,-2
81124320:	2709883a 	add	r4,r4,fp
81124324:	4004943a 	slli	r2,r8,16
81124328:	25efc83a 	sub	r23,r4,r23
8112432c:	1490b03a 	or	r8,r2,r18
81124330:	4008d43a 	srli	r4,r8,16
81124334:	40ffffcc 	andi	r3,r8,65535
81124338:	30c5383a 	mul	r2,r6,r3
8112433c:	1a47383a 	mul	r3,r3,r9
81124340:	310d383a 	mul	r6,r6,r4
81124344:	100ad43a 	srli	r5,r2,16
81124348:	4913383a 	mul	r9,r9,r4
8112434c:	1987883a 	add	r3,r3,r6
81124350:	28c7883a 	add	r3,r5,r3
81124354:	1980022e 	bgeu	r3,r6,81124360 <__divdf3+0x57c>
81124358:	01000074 	movhi	r4,1
8112435c:	4913883a 	add	r9,r9,r4
81124360:	1808d43a 	srli	r4,r3,16
81124364:	1806943a 	slli	r3,r3,16
81124368:	10bfffcc 	andi	r2,r2,65535
8112436c:	2253883a 	add	r9,r4,r9
81124370:	1887883a 	add	r3,r3,r2
81124374:	ba403836 	bltu	r23,r9,81124458 <__divdf3+0x674>
81124378:	ba403626 	beq	r23,r9,81124454 <__divdf3+0x670>
8112437c:	42000054 	ori	r8,r8,1
81124380:	a880ffc4 	addi	r2,r21,1023
81124384:	00bf570e 	bge	zero,r2,811240e4 <__reset+0xfb1040e4>
81124388:	40c001cc 	andi	r3,r8,7
8112438c:	18000726 	beq	r3,zero,811243ac <__divdf3+0x5c8>
81124390:	40c003cc 	andi	r3,r8,15
81124394:	01000104 	movi	r4,4
81124398:	19000426 	beq	r3,r4,811243ac <__divdf3+0x5c8>
8112439c:	4107883a 	add	r3,r8,r4
811243a0:	1a11803a 	cmpltu	r8,r3,r8
811243a4:	8a23883a 	add	r17,r17,r8
811243a8:	1811883a 	mov	r8,r3
811243ac:	88c0402c 	andhi	r3,r17,256
811243b0:	18000426 	beq	r3,zero,811243c4 <__divdf3+0x5e0>
811243b4:	00ffc034 	movhi	r3,65280
811243b8:	18ffffc4 	addi	r3,r3,-1
811243bc:	a8810004 	addi	r2,r21,1024
811243c0:	88e2703a 	and	r17,r17,r3
811243c4:	00c1ff84 	movi	r3,2046
811243c8:	18bee316 	blt	r3,r2,81123f58 <__reset+0xfb103f58>
811243cc:	8824977a 	slli	r18,r17,29
811243d0:	4010d0fa 	srli	r8,r8,3
811243d4:	8822927a 	slli	r17,r17,9
811243d8:	1081ffcc 	andi	r2,r2,2047
811243dc:	9224b03a 	or	r18,r18,r8
811243e0:	880ad33a 	srli	r5,r17,12
811243e4:	98c0004c 	andi	r3,r19,1
811243e8:	003edf06 	br	81123f68 <__reset+0xfb103f68>
811243ec:	8080022c 	andhi	r2,r16,8
811243f0:	10001226 	beq	r2,zero,8112443c <__divdf3+0x658>
811243f4:	8880022c 	andhi	r2,r17,8
811243f8:	1000101e 	bne	r2,zero,8112443c <__divdf3+0x658>
811243fc:	00800434 	movhi	r2,16
81124400:	89400234 	orhi	r5,r17,8
81124404:	10bfffc4 	addi	r2,r2,-1
81124408:	b007883a 	mov	r3,r22
8112440c:	288a703a 	and	r5,r5,r2
81124410:	4025883a 	mov	r18,r8
81124414:	003f3106 	br	811240dc <__reset+0xfb1040dc>
81124418:	008000c4 	movi	r2,3
8112441c:	3880a626 	beq	r7,r2,811246b8 <__divdf3+0x8d4>
81124420:	00800044 	movi	r2,1
81124424:	3880521e 	bne	r7,r2,81124570 <__divdf3+0x78c>
81124428:	b807883a 	mov	r3,r23
8112442c:	0005883a 	mov	r2,zero
81124430:	000b883a 	mov	r5,zero
81124434:	0025883a 	mov	r18,zero
81124438:	003ecb06 	br	81123f68 <__reset+0xfb103f68>
8112443c:	00800434 	movhi	r2,16
81124440:	81400234 	orhi	r5,r16,8
81124444:	10bfffc4 	addi	r2,r2,-1
81124448:	a007883a 	mov	r3,r20
8112444c:	288a703a 	and	r5,r5,r2
81124450:	003f2206 	br	811240dc <__reset+0xfb1040dc>
81124454:	183fca26 	beq	r3,zero,81124380 <__reset+0xfb104380>
81124458:	e5ef883a 	add	r23,fp,r23
8112445c:	40bfffc4 	addi	r2,r8,-1
81124460:	bf00392e 	bgeu	r23,fp,81124548 <__divdf3+0x764>
81124464:	1011883a 	mov	r8,r2
81124468:	ba7fc41e 	bne	r23,r9,8112437c <__reset+0xfb10437c>
8112446c:	b0ffc31e 	bne	r22,r3,8112437c <__reset+0xfb10437c>
81124470:	003fc306 	br	81124380 <__reset+0xfb104380>
81124474:	143ff604 	addi	r16,r2,-40
81124478:	9c20983a 	sll	r16,r19,r16
8112447c:	0025883a 	mov	r18,zero
81124480:	003ee206 	br	8112400c <__reset+0xfb10400c>
81124484:	d9800315 	stw	r6,12(sp)
81124488:	d9c00215 	stw	r7,8(sp)
8112448c:	110fc8c0 	call	8110fc8c <__clzsi2>
81124490:	10800804 	addi	r2,r2,32
81124494:	d9c00217 	ldw	r7,8(sp)
81124498:	d9800317 	ldw	r6,12(sp)
8112449c:	003ed106 	br	81123fe4 <__reset+0xfb103fe4>
811244a0:	147ff604 	addi	r17,r2,-40
811244a4:	3462983a 	sll	r17,r6,r17
811244a8:	0011883a 	mov	r8,zero
811244ac:	003ef506 	br	81124084 <__reset+0xfb104084>
811244b0:	3009883a 	mov	r4,r6
811244b4:	d9800315 	stw	r6,12(sp)
811244b8:	da400115 	stw	r9,4(sp)
811244bc:	110fc8c0 	call	8110fc8c <__clzsi2>
811244c0:	10800804 	addi	r2,r2,32
811244c4:	da400117 	ldw	r9,4(sp)
811244c8:	d9800317 	ldw	r6,12(sp)
811244cc:	003ee306 	br	8112405c <__reset+0xfb10405c>
811244d0:	85a1883a 	add	r16,r16,r22
811244d4:	8585803a 	cmpltu	r2,r16,r22
811244d8:	1705883a 	add	r2,r2,fp
811244dc:	14a5883a 	add	r18,r2,r18
811244e0:	88bfffc4 	addi	r2,r17,-1
811244e4:	e4800c2e 	bgeu	fp,r18,81124518 <__divdf3+0x734>
811244e8:	90c03e36 	bltu	r18,r3,811245e4 <__divdf3+0x800>
811244ec:	1c806926 	beq	r3,r18,81124694 <__divdf3+0x8b0>
811244f0:	90c7c83a 	sub	r3,r18,r3
811244f4:	1023883a 	mov	r17,r2
811244f8:	003f5206 	br	81124244 <__reset+0xfb104244>
811244fc:	923f0436 	bltu	r18,r8,81124110 <__reset+0xfb104110>
81124500:	800897fa 	slli	r4,r16,31
81124504:	9004d07a 	srli	r2,r18,1
81124508:	8006d07a 	srli	r3,r16,1
8112450c:	902097fa 	slli	r16,r18,31
81124510:	20a4b03a 	or	r18,r4,r2
81124514:	003f0106 	br	8112411c <__reset+0xfb10411c>
81124518:	e4bff51e 	bne	fp,r18,811244f0 <__reset+0xfb1044f0>
8112451c:	85bff22e 	bgeu	r16,r22,811244e8 <__reset+0xfb1044e8>
81124520:	e0c7c83a 	sub	r3,fp,r3
81124524:	1023883a 	mov	r17,r2
81124528:	003f4606 	br	81124244 <__reset+0xfb104244>
8112452c:	100f883a 	mov	r7,r2
81124530:	003f2b06 	br	811241e0 <__reset+0xfb1041e0>
81124534:	180d883a 	mov	r6,r3
81124538:	003f1306 	br	81124188 <__reset+0xfb104188>
8112453c:	813fe436 	bltu	r16,r4,811244d0 <__reset+0xfb1044d0>
81124540:	0007883a 	mov	r3,zero
81124544:	003f3f06 	br	81124244 <__reset+0xfb104244>
81124548:	ba402c36 	bltu	r23,r9,811245fc <__divdf3+0x818>
8112454c:	4dc05426 	beq	r9,r23,811246a0 <__divdf3+0x8bc>
81124550:	1011883a 	mov	r8,r2
81124554:	003f8906 	br	8112437c <__reset+0xfb10437c>
81124558:	023fffc4 	movi	r8,-1
8112455c:	003f8806 	br	81124380 <__reset+0xfb104380>
81124560:	1811883a 	mov	r8,r3
81124564:	003f5406 	br	811242b8 <__reset+0xfb1042b8>
81124568:	1025883a 	mov	r18,r2
8112456c:	003f6d06 	br	81124324 <__reset+0xfb104324>
81124570:	b827883a 	mov	r19,r23
81124574:	003f8206 	br	81124380 <__reset+0xfb104380>
81124578:	010007c4 	movi	r4,31
8112457c:	20c02616 	blt	r4,r3,81124618 <__divdf3+0x834>
81124580:	00800804 	movi	r2,32
81124584:	10c5c83a 	sub	r2,r2,r3
81124588:	888a983a 	sll	r5,r17,r2
8112458c:	40c8d83a 	srl	r4,r8,r3
81124590:	4084983a 	sll	r2,r8,r2
81124594:	88e2d83a 	srl	r17,r17,r3
81124598:	2906b03a 	or	r3,r5,r4
8112459c:	1004c03a 	cmpne	r2,r2,zero
811245a0:	1886b03a 	or	r3,r3,r2
811245a4:	188001cc 	andi	r2,r3,7
811245a8:	10000726 	beq	r2,zero,811245c8 <__divdf3+0x7e4>
811245ac:	188003cc 	andi	r2,r3,15
811245b0:	01000104 	movi	r4,4
811245b4:	11000426 	beq	r2,r4,811245c8 <__divdf3+0x7e4>
811245b8:	1805883a 	mov	r2,r3
811245bc:	10c00104 	addi	r3,r2,4
811245c0:	1885803a 	cmpltu	r2,r3,r2
811245c4:	88a3883a 	add	r17,r17,r2
811245c8:	8880202c 	andhi	r2,r17,128
811245cc:	10002726 	beq	r2,zero,8112466c <__divdf3+0x888>
811245d0:	98c0004c 	andi	r3,r19,1
811245d4:	00800044 	movi	r2,1
811245d8:	000b883a 	mov	r5,zero
811245dc:	0025883a 	mov	r18,zero
811245e0:	003e6106 	br	81123f68 <__reset+0xfb103f68>
811245e4:	85a1883a 	add	r16,r16,r22
811245e8:	8585803a 	cmpltu	r2,r16,r22
811245ec:	1705883a 	add	r2,r2,fp
811245f0:	14a5883a 	add	r18,r2,r18
811245f4:	8c7fff84 	addi	r17,r17,-2
811245f8:	003f1106 	br	81124240 <__reset+0xfb104240>
811245fc:	b589883a 	add	r4,r22,r22
81124600:	25ad803a 	cmpltu	r22,r4,r22
81124604:	b739883a 	add	fp,r22,fp
81124608:	40bfff84 	addi	r2,r8,-2
8112460c:	bf2f883a 	add	r23,r23,fp
81124610:	202d883a 	mov	r22,r4
81124614:	003f9306 	br	81124464 <__reset+0xfb104464>
81124618:	013ff844 	movi	r4,-31
8112461c:	2085c83a 	sub	r2,r4,r2
81124620:	8888d83a 	srl	r4,r17,r2
81124624:	00800804 	movi	r2,32
81124628:	18802126 	beq	r3,r2,811246b0 <__divdf3+0x8cc>
8112462c:	00801004 	movi	r2,64
81124630:	10c5c83a 	sub	r2,r2,r3
81124634:	8884983a 	sll	r2,r17,r2
81124638:	1204b03a 	or	r2,r2,r8
8112463c:	1004c03a 	cmpne	r2,r2,zero
81124640:	2084b03a 	or	r2,r4,r2
81124644:	144001cc 	andi	r17,r2,7
81124648:	88000d1e 	bne	r17,zero,81124680 <__divdf3+0x89c>
8112464c:	000b883a 	mov	r5,zero
81124650:	1024d0fa 	srli	r18,r2,3
81124654:	98c0004c 	andi	r3,r19,1
81124658:	0005883a 	mov	r2,zero
8112465c:	9464b03a 	or	r18,r18,r17
81124660:	003e4106 	br	81123f68 <__reset+0xfb103f68>
81124664:	1007883a 	mov	r3,r2
81124668:	0023883a 	mov	r17,zero
8112466c:	880a927a 	slli	r5,r17,9
81124670:	1805883a 	mov	r2,r3
81124674:	8822977a 	slli	r17,r17,29
81124678:	280ad33a 	srli	r5,r5,12
8112467c:	003ff406 	br	81124650 <__reset+0xfb104650>
81124680:	10c003cc 	andi	r3,r2,15
81124684:	01000104 	movi	r4,4
81124688:	193ff626 	beq	r3,r4,81124664 <__reset+0xfb104664>
8112468c:	0023883a 	mov	r17,zero
81124690:	003fca06 	br	811245bc <__reset+0xfb1045bc>
81124694:	813fd336 	bltu	r16,r4,811245e4 <__reset+0xfb1045e4>
81124698:	1023883a 	mov	r17,r2
8112469c:	003fa806 	br	81124540 <__reset+0xfb104540>
811246a0:	b0ffd636 	bltu	r22,r3,811245fc <__reset+0xfb1045fc>
811246a4:	1011883a 	mov	r8,r2
811246a8:	b0ff341e 	bne	r22,r3,8112437c <__reset+0xfb10437c>
811246ac:	003f3406 	br	81124380 <__reset+0xfb104380>
811246b0:	0005883a 	mov	r2,zero
811246b4:	003fe006 	br	81124638 <__reset+0xfb104638>
811246b8:	00800434 	movhi	r2,16
811246bc:	89400234 	orhi	r5,r17,8
811246c0:	10bfffc4 	addi	r2,r2,-1
811246c4:	b807883a 	mov	r3,r23
811246c8:	288a703a 	and	r5,r5,r2
811246cc:	4025883a 	mov	r18,r8
811246d0:	003e8206 	br	811240dc <__reset+0xfb1040dc>

811246d4 <__eqdf2>:
811246d4:	2804d53a 	srli	r2,r5,20
811246d8:	3806d53a 	srli	r3,r7,20
811246dc:	02000434 	movhi	r8,16
811246e0:	423fffc4 	addi	r8,r8,-1
811246e4:	1081ffcc 	andi	r2,r2,2047
811246e8:	0281ffc4 	movi	r10,2047
811246ec:	2a12703a 	and	r9,r5,r8
811246f0:	18c1ffcc 	andi	r3,r3,2047
811246f4:	3a10703a 	and	r8,r7,r8
811246f8:	280ad7fa 	srli	r5,r5,31
811246fc:	380ed7fa 	srli	r7,r7,31
81124700:	12801026 	beq	r2,r10,81124744 <__eqdf2+0x70>
81124704:	0281ffc4 	movi	r10,2047
81124708:	1a800a26 	beq	r3,r10,81124734 <__eqdf2+0x60>
8112470c:	10c00226 	beq	r2,r3,81124718 <__eqdf2+0x44>
81124710:	00800044 	movi	r2,1
81124714:	f800283a 	ret
81124718:	4a3ffd1e 	bne	r9,r8,81124710 <__reset+0xfb104710>
8112471c:	21bffc1e 	bne	r4,r6,81124710 <__reset+0xfb104710>
81124720:	29c00c26 	beq	r5,r7,81124754 <__eqdf2+0x80>
81124724:	103ffa1e 	bne	r2,zero,81124710 <__reset+0xfb104710>
81124728:	2244b03a 	or	r2,r4,r9
8112472c:	1004c03a 	cmpne	r2,r2,zero
81124730:	f800283a 	ret
81124734:	3214b03a 	or	r10,r6,r8
81124738:	503ff426 	beq	r10,zero,8112470c <__reset+0xfb10470c>
8112473c:	00800044 	movi	r2,1
81124740:	f800283a 	ret
81124744:	2254b03a 	or	r10,r4,r9
81124748:	503fee26 	beq	r10,zero,81124704 <__reset+0xfb104704>
8112474c:	00800044 	movi	r2,1
81124750:	f800283a 	ret
81124754:	0005883a 	mov	r2,zero
81124758:	f800283a 	ret

8112475c <__gedf2>:
8112475c:	2804d53a 	srli	r2,r5,20
81124760:	3806d53a 	srli	r3,r7,20
81124764:	02000434 	movhi	r8,16
81124768:	423fffc4 	addi	r8,r8,-1
8112476c:	1081ffcc 	andi	r2,r2,2047
81124770:	0241ffc4 	movi	r9,2047
81124774:	2a14703a 	and	r10,r5,r8
81124778:	18c1ffcc 	andi	r3,r3,2047
8112477c:	3a10703a 	and	r8,r7,r8
81124780:	280ad7fa 	srli	r5,r5,31
81124784:	380ed7fa 	srli	r7,r7,31
81124788:	12401d26 	beq	r2,r9,81124800 <__gedf2+0xa4>
8112478c:	0241ffc4 	movi	r9,2047
81124790:	1a401226 	beq	r3,r9,811247dc <__gedf2+0x80>
81124794:	1000081e 	bne	r2,zero,811247b8 <__gedf2+0x5c>
81124798:	2296b03a 	or	r11,r4,r10
8112479c:	5813003a 	cmpeq	r9,r11,zero
811247a0:	1800091e 	bne	r3,zero,811247c8 <__gedf2+0x6c>
811247a4:	3218b03a 	or	r12,r6,r8
811247a8:	6000071e 	bne	r12,zero,811247c8 <__gedf2+0x6c>
811247ac:	0005883a 	mov	r2,zero
811247b0:	5800101e 	bne	r11,zero,811247f4 <__gedf2+0x98>
811247b4:	f800283a 	ret
811247b8:	18000c1e 	bne	r3,zero,811247ec <__gedf2+0x90>
811247bc:	3212b03a 	or	r9,r6,r8
811247c0:	48000c26 	beq	r9,zero,811247f4 <__gedf2+0x98>
811247c4:	0013883a 	mov	r9,zero
811247c8:	39c03fcc 	andi	r7,r7,255
811247cc:	48000826 	beq	r9,zero,811247f0 <__gedf2+0x94>
811247d0:	38000926 	beq	r7,zero,811247f8 <__gedf2+0x9c>
811247d4:	00800044 	movi	r2,1
811247d8:	f800283a 	ret
811247dc:	3212b03a 	or	r9,r6,r8
811247e0:	483fec26 	beq	r9,zero,81124794 <__reset+0xfb104794>
811247e4:	00bfff84 	movi	r2,-2
811247e8:	f800283a 	ret
811247ec:	39c03fcc 	andi	r7,r7,255
811247f0:	29c00626 	beq	r5,r7,8112480c <__gedf2+0xb0>
811247f4:	283ff726 	beq	r5,zero,811247d4 <__reset+0xfb1047d4>
811247f8:	00bfffc4 	movi	r2,-1
811247fc:	f800283a 	ret
81124800:	2292b03a 	or	r9,r4,r10
81124804:	483fe126 	beq	r9,zero,8112478c <__reset+0xfb10478c>
81124808:	003ff606 	br	811247e4 <__reset+0xfb1047e4>
8112480c:	18bff916 	blt	r3,r2,811247f4 <__reset+0xfb1047f4>
81124810:	10c00316 	blt	r2,r3,81124820 <__gedf2+0xc4>
81124814:	42bff736 	bltu	r8,r10,811247f4 <__reset+0xfb1047f4>
81124818:	52000326 	beq	r10,r8,81124828 <__gedf2+0xcc>
8112481c:	5200042e 	bgeu	r10,r8,81124830 <__gedf2+0xd4>
81124820:	283fec1e 	bne	r5,zero,811247d4 <__reset+0xfb1047d4>
81124824:	003ff406 	br	811247f8 <__reset+0xfb1047f8>
81124828:	313ff236 	bltu	r6,r4,811247f4 <__reset+0xfb1047f4>
8112482c:	21bffc36 	bltu	r4,r6,81124820 <__reset+0xfb104820>
81124830:	0005883a 	mov	r2,zero
81124834:	f800283a 	ret

81124838 <__ledf2>:
81124838:	2804d53a 	srli	r2,r5,20
8112483c:	3810d53a 	srli	r8,r7,20
81124840:	00c00434 	movhi	r3,16
81124844:	18ffffc4 	addi	r3,r3,-1
81124848:	1081ffcc 	andi	r2,r2,2047
8112484c:	0241ffc4 	movi	r9,2047
81124850:	28d4703a 	and	r10,r5,r3
81124854:	4201ffcc 	andi	r8,r8,2047
81124858:	38c6703a 	and	r3,r7,r3
8112485c:	280ad7fa 	srli	r5,r5,31
81124860:	380ed7fa 	srli	r7,r7,31
81124864:	12401f26 	beq	r2,r9,811248e4 <__ledf2+0xac>
81124868:	0241ffc4 	movi	r9,2047
8112486c:	42401426 	beq	r8,r9,811248c0 <__ledf2+0x88>
81124870:	1000091e 	bne	r2,zero,81124898 <__ledf2+0x60>
81124874:	2296b03a 	or	r11,r4,r10
81124878:	5813003a 	cmpeq	r9,r11,zero
8112487c:	29403fcc 	andi	r5,r5,255
81124880:	40000a1e 	bne	r8,zero,811248ac <__ledf2+0x74>
81124884:	30d8b03a 	or	r12,r6,r3
81124888:	6000081e 	bne	r12,zero,811248ac <__ledf2+0x74>
8112488c:	0005883a 	mov	r2,zero
81124890:	5800111e 	bne	r11,zero,811248d8 <__ledf2+0xa0>
81124894:	f800283a 	ret
81124898:	29403fcc 	andi	r5,r5,255
8112489c:	40000c1e 	bne	r8,zero,811248d0 <__ledf2+0x98>
811248a0:	30d2b03a 	or	r9,r6,r3
811248a4:	48000c26 	beq	r9,zero,811248d8 <__ledf2+0xa0>
811248a8:	0013883a 	mov	r9,zero
811248ac:	39c03fcc 	andi	r7,r7,255
811248b0:	48000826 	beq	r9,zero,811248d4 <__ledf2+0x9c>
811248b4:	38001126 	beq	r7,zero,811248fc <__ledf2+0xc4>
811248b8:	00800044 	movi	r2,1
811248bc:	f800283a 	ret
811248c0:	30d2b03a 	or	r9,r6,r3
811248c4:	483fea26 	beq	r9,zero,81124870 <__reset+0xfb104870>
811248c8:	00800084 	movi	r2,2
811248cc:	f800283a 	ret
811248d0:	39c03fcc 	andi	r7,r7,255
811248d4:	39400726 	beq	r7,r5,811248f4 <__ledf2+0xbc>
811248d8:	2800081e 	bne	r5,zero,811248fc <__ledf2+0xc4>
811248dc:	00800044 	movi	r2,1
811248e0:	f800283a 	ret
811248e4:	2292b03a 	or	r9,r4,r10
811248e8:	483fdf26 	beq	r9,zero,81124868 <__reset+0xfb104868>
811248ec:	00800084 	movi	r2,2
811248f0:	f800283a 	ret
811248f4:	4080030e 	bge	r8,r2,81124904 <__ledf2+0xcc>
811248f8:	383fef26 	beq	r7,zero,811248b8 <__reset+0xfb1048b8>
811248fc:	00bfffc4 	movi	r2,-1
81124900:	f800283a 	ret
81124904:	123feb16 	blt	r2,r8,811248b4 <__reset+0xfb1048b4>
81124908:	1abff336 	bltu	r3,r10,811248d8 <__reset+0xfb1048d8>
8112490c:	50c00326 	beq	r10,r3,8112491c <__ledf2+0xe4>
81124910:	50c0042e 	bgeu	r10,r3,81124924 <__ledf2+0xec>
81124914:	283fe81e 	bne	r5,zero,811248b8 <__reset+0xfb1048b8>
81124918:	003ff806 	br	811248fc <__reset+0xfb1048fc>
8112491c:	313fee36 	bltu	r6,r4,811248d8 <__reset+0xfb1048d8>
81124920:	21bffc36 	bltu	r4,r6,81124914 <__reset+0xfb104914>
81124924:	0005883a 	mov	r2,zero
81124928:	f800283a 	ret

8112492c <__subdf3>:
8112492c:	02000434 	movhi	r8,16
81124930:	423fffc4 	addi	r8,r8,-1
81124934:	defffb04 	addi	sp,sp,-20
81124938:	2a14703a 	and	r10,r5,r8
8112493c:	3812d53a 	srli	r9,r7,20
81124940:	3a10703a 	and	r8,r7,r8
81124944:	de00012e 	bgeu	sp,et,8112494c <__subdf3+0x20>
81124948:	003b68fa 	trap	3
8112494c:	2006d77a 	srli	r3,r4,29
81124950:	3004d77a 	srli	r2,r6,29
81124954:	dc000015 	stw	r16,0(sp)
81124958:	501490fa 	slli	r10,r10,3
8112495c:	2820d53a 	srli	r16,r5,20
81124960:	401090fa 	slli	r8,r8,3
81124964:	dc800215 	stw	r18,8(sp)
81124968:	dc400115 	stw	r17,4(sp)
8112496c:	dfc00415 	stw	ra,16(sp)
81124970:	202290fa 	slli	r17,r4,3
81124974:	dcc00315 	stw	r19,12(sp)
81124978:	4a41ffcc 	andi	r9,r9,2047
8112497c:	0101ffc4 	movi	r4,2047
81124980:	2824d7fa 	srli	r18,r5,31
81124984:	8401ffcc 	andi	r16,r16,2047
81124988:	50c6b03a 	or	r3,r10,r3
8112498c:	380ed7fa 	srli	r7,r7,31
81124990:	408ab03a 	or	r5,r8,r2
81124994:	300c90fa 	slli	r6,r6,3
81124998:	49009626 	beq	r9,r4,81124bf4 <__subdf3+0x2c8>
8112499c:	39c0005c 	xori	r7,r7,1
811249a0:	8245c83a 	sub	r2,r16,r9
811249a4:	3c807426 	beq	r7,r18,81124b78 <__subdf3+0x24c>
811249a8:	0080af0e 	bge	zero,r2,81124c68 <__subdf3+0x33c>
811249ac:	48002a1e 	bne	r9,zero,81124a58 <__subdf3+0x12c>
811249b0:	2988b03a 	or	r4,r5,r6
811249b4:	20009a1e 	bne	r4,zero,81124c20 <__subdf3+0x2f4>
811249b8:	888001cc 	andi	r2,r17,7
811249bc:	10000726 	beq	r2,zero,811249dc <__subdf3+0xb0>
811249c0:	888003cc 	andi	r2,r17,15
811249c4:	01000104 	movi	r4,4
811249c8:	11000426 	beq	r2,r4,811249dc <__subdf3+0xb0>
811249cc:	890b883a 	add	r5,r17,r4
811249d0:	2c63803a 	cmpltu	r17,r5,r17
811249d4:	1c47883a 	add	r3,r3,r17
811249d8:	2823883a 	mov	r17,r5
811249dc:	1880202c 	andhi	r2,r3,128
811249e0:	10005926 	beq	r2,zero,81124b48 <__subdf3+0x21c>
811249e4:	84000044 	addi	r16,r16,1
811249e8:	0081ffc4 	movi	r2,2047
811249ec:	8080be26 	beq	r16,r2,81124ce8 <__subdf3+0x3bc>
811249f0:	017fe034 	movhi	r5,65408
811249f4:	297fffc4 	addi	r5,r5,-1
811249f8:	1946703a 	and	r3,r3,r5
811249fc:	1804977a 	slli	r2,r3,29
81124a00:	1806927a 	slli	r3,r3,9
81124a04:	8822d0fa 	srli	r17,r17,3
81124a08:	8401ffcc 	andi	r16,r16,2047
81124a0c:	180ad33a 	srli	r5,r3,12
81124a10:	9100004c 	andi	r4,r18,1
81124a14:	1444b03a 	or	r2,r2,r17
81124a18:	80c1ffcc 	andi	r3,r16,2047
81124a1c:	1820953a 	slli	r16,r3,20
81124a20:	20c03fcc 	andi	r3,r4,255
81124a24:	180897fa 	slli	r4,r3,31
81124a28:	00c00434 	movhi	r3,16
81124a2c:	18ffffc4 	addi	r3,r3,-1
81124a30:	28c6703a 	and	r3,r5,r3
81124a34:	1c06b03a 	or	r3,r3,r16
81124a38:	1906b03a 	or	r3,r3,r4
81124a3c:	dfc00417 	ldw	ra,16(sp)
81124a40:	dcc00317 	ldw	r19,12(sp)
81124a44:	dc800217 	ldw	r18,8(sp)
81124a48:	dc400117 	ldw	r17,4(sp)
81124a4c:	dc000017 	ldw	r16,0(sp)
81124a50:	dec00504 	addi	sp,sp,20
81124a54:	f800283a 	ret
81124a58:	0101ffc4 	movi	r4,2047
81124a5c:	813fd626 	beq	r16,r4,811249b8 <__reset+0xfb1049b8>
81124a60:	29402034 	orhi	r5,r5,128
81124a64:	01000e04 	movi	r4,56
81124a68:	2080a316 	blt	r4,r2,81124cf8 <__subdf3+0x3cc>
81124a6c:	010007c4 	movi	r4,31
81124a70:	2080c616 	blt	r4,r2,81124d8c <__subdf3+0x460>
81124a74:	01000804 	movi	r4,32
81124a78:	2089c83a 	sub	r4,r4,r2
81124a7c:	2910983a 	sll	r8,r5,r4
81124a80:	308ed83a 	srl	r7,r6,r2
81124a84:	3108983a 	sll	r4,r6,r4
81124a88:	2884d83a 	srl	r2,r5,r2
81124a8c:	41ccb03a 	or	r6,r8,r7
81124a90:	2008c03a 	cmpne	r4,r4,zero
81124a94:	310cb03a 	or	r6,r6,r4
81124a98:	898dc83a 	sub	r6,r17,r6
81124a9c:	89a3803a 	cmpltu	r17,r17,r6
81124aa0:	1887c83a 	sub	r3,r3,r2
81124aa4:	1c47c83a 	sub	r3,r3,r17
81124aa8:	3023883a 	mov	r17,r6
81124aac:	1880202c 	andhi	r2,r3,128
81124ab0:	10002326 	beq	r2,zero,81124b40 <__subdf3+0x214>
81124ab4:	04c02034 	movhi	r19,128
81124ab8:	9cffffc4 	addi	r19,r19,-1
81124abc:	1ce6703a 	and	r19,r3,r19
81124ac0:	98007a26 	beq	r19,zero,81124cac <__subdf3+0x380>
81124ac4:	9809883a 	mov	r4,r19
81124ac8:	110fc8c0 	call	8110fc8c <__clzsi2>
81124acc:	113ffe04 	addi	r4,r2,-8
81124ad0:	00c007c4 	movi	r3,31
81124ad4:	19007b16 	blt	r3,r4,81124cc4 <__subdf3+0x398>
81124ad8:	00800804 	movi	r2,32
81124adc:	1105c83a 	sub	r2,r2,r4
81124ae0:	8884d83a 	srl	r2,r17,r2
81124ae4:	9906983a 	sll	r3,r19,r4
81124ae8:	8922983a 	sll	r17,r17,r4
81124aec:	10c4b03a 	or	r2,r2,r3
81124af0:	24007816 	blt	r4,r16,81124cd4 <__subdf3+0x3a8>
81124af4:	2421c83a 	sub	r16,r4,r16
81124af8:	80c00044 	addi	r3,r16,1
81124afc:	010007c4 	movi	r4,31
81124b00:	20c09516 	blt	r4,r3,81124d58 <__subdf3+0x42c>
81124b04:	01400804 	movi	r5,32
81124b08:	28cbc83a 	sub	r5,r5,r3
81124b0c:	88c8d83a 	srl	r4,r17,r3
81124b10:	8962983a 	sll	r17,r17,r5
81124b14:	114a983a 	sll	r5,r2,r5
81124b18:	10c6d83a 	srl	r3,r2,r3
81124b1c:	8804c03a 	cmpne	r2,r17,zero
81124b20:	290ab03a 	or	r5,r5,r4
81124b24:	28a2b03a 	or	r17,r5,r2
81124b28:	0021883a 	mov	r16,zero
81124b2c:	003fa206 	br	811249b8 <__reset+0xfb1049b8>
81124b30:	2090b03a 	or	r8,r4,r2
81124b34:	40018e26 	beq	r8,zero,81125170 <__subdf3+0x844>
81124b38:	1007883a 	mov	r3,r2
81124b3c:	2023883a 	mov	r17,r4
81124b40:	888001cc 	andi	r2,r17,7
81124b44:	103f9e1e 	bne	r2,zero,811249c0 <__reset+0xfb1049c0>
81124b48:	1804977a 	slli	r2,r3,29
81124b4c:	8822d0fa 	srli	r17,r17,3
81124b50:	1810d0fa 	srli	r8,r3,3
81124b54:	9100004c 	andi	r4,r18,1
81124b58:	1444b03a 	or	r2,r2,r17
81124b5c:	00c1ffc4 	movi	r3,2047
81124b60:	80c02826 	beq	r16,r3,81124c04 <__subdf3+0x2d8>
81124b64:	01400434 	movhi	r5,16
81124b68:	297fffc4 	addi	r5,r5,-1
81124b6c:	80e0703a 	and	r16,r16,r3
81124b70:	414a703a 	and	r5,r8,r5
81124b74:	003fa806 	br	81124a18 <__reset+0xfb104a18>
81124b78:	0080630e 	bge	zero,r2,81124d08 <__subdf3+0x3dc>
81124b7c:	48003026 	beq	r9,zero,81124c40 <__subdf3+0x314>
81124b80:	0101ffc4 	movi	r4,2047
81124b84:	813f8c26 	beq	r16,r4,811249b8 <__reset+0xfb1049b8>
81124b88:	29402034 	orhi	r5,r5,128
81124b8c:	01000e04 	movi	r4,56
81124b90:	2080a90e 	bge	r4,r2,81124e38 <__subdf3+0x50c>
81124b94:	298cb03a 	or	r6,r5,r6
81124b98:	3012c03a 	cmpne	r9,r6,zero
81124b9c:	0005883a 	mov	r2,zero
81124ba0:	4c53883a 	add	r9,r9,r17
81124ba4:	4c63803a 	cmpltu	r17,r9,r17
81124ba8:	10c7883a 	add	r3,r2,r3
81124bac:	88c7883a 	add	r3,r17,r3
81124bb0:	4823883a 	mov	r17,r9
81124bb4:	1880202c 	andhi	r2,r3,128
81124bb8:	1000d026 	beq	r2,zero,81124efc <__subdf3+0x5d0>
81124bbc:	84000044 	addi	r16,r16,1
81124bc0:	0081ffc4 	movi	r2,2047
81124bc4:	8080fe26 	beq	r16,r2,81124fc0 <__subdf3+0x694>
81124bc8:	00bfe034 	movhi	r2,65408
81124bcc:	10bfffc4 	addi	r2,r2,-1
81124bd0:	1886703a 	and	r3,r3,r2
81124bd4:	880ad07a 	srli	r5,r17,1
81124bd8:	180497fa 	slli	r2,r3,31
81124bdc:	8900004c 	andi	r4,r17,1
81124be0:	2922b03a 	or	r17,r5,r4
81124be4:	1806d07a 	srli	r3,r3,1
81124be8:	1462b03a 	or	r17,r2,r17
81124bec:	3825883a 	mov	r18,r7
81124bf0:	003f7106 	br	811249b8 <__reset+0xfb1049b8>
81124bf4:	2984b03a 	or	r2,r5,r6
81124bf8:	103f6826 	beq	r2,zero,8112499c <__reset+0xfb10499c>
81124bfc:	39c03fcc 	andi	r7,r7,255
81124c00:	003f6706 	br	811249a0 <__reset+0xfb1049a0>
81124c04:	4086b03a 	or	r3,r8,r2
81124c08:	18015226 	beq	r3,zero,81125154 <__subdf3+0x828>
81124c0c:	00c00434 	movhi	r3,16
81124c10:	41400234 	orhi	r5,r8,8
81124c14:	18ffffc4 	addi	r3,r3,-1
81124c18:	28ca703a 	and	r5,r5,r3
81124c1c:	003f7e06 	br	81124a18 <__reset+0xfb104a18>
81124c20:	10bfffc4 	addi	r2,r2,-1
81124c24:	1000491e 	bne	r2,zero,81124d4c <__subdf3+0x420>
81124c28:	898fc83a 	sub	r7,r17,r6
81124c2c:	89e3803a 	cmpltu	r17,r17,r7
81124c30:	1947c83a 	sub	r3,r3,r5
81124c34:	1c47c83a 	sub	r3,r3,r17
81124c38:	3823883a 	mov	r17,r7
81124c3c:	003f9b06 	br	81124aac <__reset+0xfb104aac>
81124c40:	2988b03a 	or	r4,r5,r6
81124c44:	203f5c26 	beq	r4,zero,811249b8 <__reset+0xfb1049b8>
81124c48:	10bfffc4 	addi	r2,r2,-1
81124c4c:	1000931e 	bne	r2,zero,81124e9c <__subdf3+0x570>
81124c50:	898d883a 	add	r6,r17,r6
81124c54:	3463803a 	cmpltu	r17,r6,r17
81124c58:	1947883a 	add	r3,r3,r5
81124c5c:	88c7883a 	add	r3,r17,r3
81124c60:	3023883a 	mov	r17,r6
81124c64:	003fd306 	br	81124bb4 <__reset+0xfb104bb4>
81124c68:	1000541e 	bne	r2,zero,81124dbc <__subdf3+0x490>
81124c6c:	80800044 	addi	r2,r16,1
81124c70:	1081ffcc 	andi	r2,r2,2047
81124c74:	01000044 	movi	r4,1
81124c78:	2080a20e 	bge	r4,r2,81124f04 <__subdf3+0x5d8>
81124c7c:	8989c83a 	sub	r4,r17,r6
81124c80:	8905803a 	cmpltu	r2,r17,r4
81124c84:	1967c83a 	sub	r19,r3,r5
81124c88:	98a7c83a 	sub	r19,r19,r2
81124c8c:	9880202c 	andhi	r2,r19,128
81124c90:	10006326 	beq	r2,zero,81124e20 <__subdf3+0x4f4>
81124c94:	3463c83a 	sub	r17,r6,r17
81124c98:	28c7c83a 	sub	r3,r5,r3
81124c9c:	344d803a 	cmpltu	r6,r6,r17
81124ca0:	19a7c83a 	sub	r19,r3,r6
81124ca4:	3825883a 	mov	r18,r7
81124ca8:	983f861e 	bne	r19,zero,81124ac4 <__reset+0xfb104ac4>
81124cac:	8809883a 	mov	r4,r17
81124cb0:	110fc8c0 	call	8110fc8c <__clzsi2>
81124cb4:	10800804 	addi	r2,r2,32
81124cb8:	113ffe04 	addi	r4,r2,-8
81124cbc:	00c007c4 	movi	r3,31
81124cc0:	193f850e 	bge	r3,r4,81124ad8 <__reset+0xfb104ad8>
81124cc4:	10bff604 	addi	r2,r2,-40
81124cc8:	8884983a 	sll	r2,r17,r2
81124ccc:	0023883a 	mov	r17,zero
81124cd0:	243f880e 	bge	r4,r16,81124af4 <__reset+0xfb104af4>
81124cd4:	00ffe034 	movhi	r3,65408
81124cd8:	18ffffc4 	addi	r3,r3,-1
81124cdc:	8121c83a 	sub	r16,r16,r4
81124ce0:	10c6703a 	and	r3,r2,r3
81124ce4:	003f3406 	br	811249b8 <__reset+0xfb1049b8>
81124ce8:	9100004c 	andi	r4,r18,1
81124cec:	000b883a 	mov	r5,zero
81124cf0:	0005883a 	mov	r2,zero
81124cf4:	003f4806 	br	81124a18 <__reset+0xfb104a18>
81124cf8:	298cb03a 	or	r6,r5,r6
81124cfc:	300cc03a 	cmpne	r6,r6,zero
81124d00:	0005883a 	mov	r2,zero
81124d04:	003f6406 	br	81124a98 <__reset+0xfb104a98>
81124d08:	10009a1e 	bne	r2,zero,81124f74 <__subdf3+0x648>
81124d0c:	82400044 	addi	r9,r16,1
81124d10:	4881ffcc 	andi	r2,r9,2047
81124d14:	02800044 	movi	r10,1
81124d18:	5080670e 	bge	r10,r2,81124eb8 <__subdf3+0x58c>
81124d1c:	0081ffc4 	movi	r2,2047
81124d20:	4880af26 	beq	r9,r2,81124fe0 <__subdf3+0x6b4>
81124d24:	898d883a 	add	r6,r17,r6
81124d28:	1945883a 	add	r2,r3,r5
81124d2c:	3447803a 	cmpltu	r3,r6,r17
81124d30:	1887883a 	add	r3,r3,r2
81124d34:	182297fa 	slli	r17,r3,31
81124d38:	300cd07a 	srli	r6,r6,1
81124d3c:	1806d07a 	srli	r3,r3,1
81124d40:	4821883a 	mov	r16,r9
81124d44:	89a2b03a 	or	r17,r17,r6
81124d48:	003f1b06 	br	811249b8 <__reset+0xfb1049b8>
81124d4c:	0101ffc4 	movi	r4,2047
81124d50:	813f441e 	bne	r16,r4,81124a64 <__reset+0xfb104a64>
81124d54:	003f1806 	br	811249b8 <__reset+0xfb1049b8>
81124d58:	843ff844 	addi	r16,r16,-31
81124d5c:	01400804 	movi	r5,32
81124d60:	1408d83a 	srl	r4,r2,r16
81124d64:	19405026 	beq	r3,r5,81124ea8 <__subdf3+0x57c>
81124d68:	01401004 	movi	r5,64
81124d6c:	28c7c83a 	sub	r3,r5,r3
81124d70:	10c4983a 	sll	r2,r2,r3
81124d74:	88a2b03a 	or	r17,r17,r2
81124d78:	8822c03a 	cmpne	r17,r17,zero
81124d7c:	2462b03a 	or	r17,r4,r17
81124d80:	0007883a 	mov	r3,zero
81124d84:	0021883a 	mov	r16,zero
81124d88:	003f6d06 	br	81124b40 <__reset+0xfb104b40>
81124d8c:	11fff804 	addi	r7,r2,-32
81124d90:	01000804 	movi	r4,32
81124d94:	29ced83a 	srl	r7,r5,r7
81124d98:	11004526 	beq	r2,r4,81124eb0 <__subdf3+0x584>
81124d9c:	01001004 	movi	r4,64
81124da0:	2089c83a 	sub	r4,r4,r2
81124da4:	2904983a 	sll	r2,r5,r4
81124da8:	118cb03a 	or	r6,r2,r6
81124dac:	300cc03a 	cmpne	r6,r6,zero
81124db0:	398cb03a 	or	r6,r7,r6
81124db4:	0005883a 	mov	r2,zero
81124db8:	003f3706 	br	81124a98 <__reset+0xfb104a98>
81124dbc:	80002a26 	beq	r16,zero,81124e68 <__subdf3+0x53c>
81124dc0:	0101ffc4 	movi	r4,2047
81124dc4:	49006626 	beq	r9,r4,81124f60 <__subdf3+0x634>
81124dc8:	0085c83a 	sub	r2,zero,r2
81124dcc:	18c02034 	orhi	r3,r3,128
81124dd0:	01000e04 	movi	r4,56
81124dd4:	20807e16 	blt	r4,r2,81124fd0 <__subdf3+0x6a4>
81124dd8:	010007c4 	movi	r4,31
81124ddc:	2080e716 	blt	r4,r2,8112517c <__subdf3+0x850>
81124de0:	01000804 	movi	r4,32
81124de4:	2089c83a 	sub	r4,r4,r2
81124de8:	1914983a 	sll	r10,r3,r4
81124dec:	8890d83a 	srl	r8,r17,r2
81124df0:	8908983a 	sll	r4,r17,r4
81124df4:	1884d83a 	srl	r2,r3,r2
81124df8:	5222b03a 	or	r17,r10,r8
81124dfc:	2006c03a 	cmpne	r3,r4,zero
81124e00:	88e2b03a 	or	r17,r17,r3
81124e04:	3463c83a 	sub	r17,r6,r17
81124e08:	2885c83a 	sub	r2,r5,r2
81124e0c:	344d803a 	cmpltu	r6,r6,r17
81124e10:	1187c83a 	sub	r3,r2,r6
81124e14:	4821883a 	mov	r16,r9
81124e18:	3825883a 	mov	r18,r7
81124e1c:	003f2306 	br	81124aac <__reset+0xfb104aac>
81124e20:	24d0b03a 	or	r8,r4,r19
81124e24:	40001b1e 	bne	r8,zero,81124e94 <__subdf3+0x568>
81124e28:	0005883a 	mov	r2,zero
81124e2c:	0009883a 	mov	r4,zero
81124e30:	0021883a 	mov	r16,zero
81124e34:	003f4906 	br	81124b5c <__reset+0xfb104b5c>
81124e38:	010007c4 	movi	r4,31
81124e3c:	20803a16 	blt	r4,r2,81124f28 <__subdf3+0x5fc>
81124e40:	01000804 	movi	r4,32
81124e44:	2089c83a 	sub	r4,r4,r2
81124e48:	2912983a 	sll	r9,r5,r4
81124e4c:	3090d83a 	srl	r8,r6,r2
81124e50:	3108983a 	sll	r4,r6,r4
81124e54:	2884d83a 	srl	r2,r5,r2
81124e58:	4a12b03a 	or	r9,r9,r8
81124e5c:	2008c03a 	cmpne	r4,r4,zero
81124e60:	4912b03a 	or	r9,r9,r4
81124e64:	003f4e06 	br	81124ba0 <__reset+0xfb104ba0>
81124e68:	1c48b03a 	or	r4,r3,r17
81124e6c:	20003c26 	beq	r4,zero,81124f60 <__subdf3+0x634>
81124e70:	0084303a 	nor	r2,zero,r2
81124e74:	1000381e 	bne	r2,zero,81124f58 <__subdf3+0x62c>
81124e78:	3463c83a 	sub	r17,r6,r17
81124e7c:	28c5c83a 	sub	r2,r5,r3
81124e80:	344d803a 	cmpltu	r6,r6,r17
81124e84:	1187c83a 	sub	r3,r2,r6
81124e88:	4821883a 	mov	r16,r9
81124e8c:	3825883a 	mov	r18,r7
81124e90:	003f0606 	br	81124aac <__reset+0xfb104aac>
81124e94:	2023883a 	mov	r17,r4
81124e98:	003f0906 	br	81124ac0 <__reset+0xfb104ac0>
81124e9c:	0101ffc4 	movi	r4,2047
81124ea0:	813f3a1e 	bne	r16,r4,81124b8c <__reset+0xfb104b8c>
81124ea4:	003ec406 	br	811249b8 <__reset+0xfb1049b8>
81124ea8:	0005883a 	mov	r2,zero
81124eac:	003fb106 	br	81124d74 <__reset+0xfb104d74>
81124eb0:	0005883a 	mov	r2,zero
81124eb4:	003fbc06 	br	81124da8 <__reset+0xfb104da8>
81124eb8:	1c44b03a 	or	r2,r3,r17
81124ebc:	80008e1e 	bne	r16,zero,811250f8 <__subdf3+0x7cc>
81124ec0:	1000c826 	beq	r2,zero,811251e4 <__subdf3+0x8b8>
81124ec4:	2984b03a 	or	r2,r5,r6
81124ec8:	103ebb26 	beq	r2,zero,811249b8 <__reset+0xfb1049b8>
81124ecc:	8989883a 	add	r4,r17,r6
81124ed0:	1945883a 	add	r2,r3,r5
81124ed4:	2447803a 	cmpltu	r3,r4,r17
81124ed8:	1887883a 	add	r3,r3,r2
81124edc:	1880202c 	andhi	r2,r3,128
81124ee0:	2023883a 	mov	r17,r4
81124ee4:	103f1626 	beq	r2,zero,81124b40 <__reset+0xfb104b40>
81124ee8:	00bfe034 	movhi	r2,65408
81124eec:	10bfffc4 	addi	r2,r2,-1
81124ef0:	5021883a 	mov	r16,r10
81124ef4:	1886703a 	and	r3,r3,r2
81124ef8:	003eaf06 	br	811249b8 <__reset+0xfb1049b8>
81124efc:	3825883a 	mov	r18,r7
81124f00:	003f0f06 	br	81124b40 <__reset+0xfb104b40>
81124f04:	1c44b03a 	or	r2,r3,r17
81124f08:	8000251e 	bne	r16,zero,81124fa0 <__subdf3+0x674>
81124f0c:	1000661e 	bne	r2,zero,811250a8 <__subdf3+0x77c>
81124f10:	2990b03a 	or	r8,r5,r6
81124f14:	40009626 	beq	r8,zero,81125170 <__subdf3+0x844>
81124f18:	2807883a 	mov	r3,r5
81124f1c:	3023883a 	mov	r17,r6
81124f20:	3825883a 	mov	r18,r7
81124f24:	003ea406 	br	811249b8 <__reset+0xfb1049b8>
81124f28:	127ff804 	addi	r9,r2,-32
81124f2c:	01000804 	movi	r4,32
81124f30:	2a52d83a 	srl	r9,r5,r9
81124f34:	11008c26 	beq	r2,r4,81125168 <__subdf3+0x83c>
81124f38:	01001004 	movi	r4,64
81124f3c:	2085c83a 	sub	r2,r4,r2
81124f40:	2884983a 	sll	r2,r5,r2
81124f44:	118cb03a 	or	r6,r2,r6
81124f48:	300cc03a 	cmpne	r6,r6,zero
81124f4c:	4992b03a 	or	r9,r9,r6
81124f50:	0005883a 	mov	r2,zero
81124f54:	003f1206 	br	81124ba0 <__reset+0xfb104ba0>
81124f58:	0101ffc4 	movi	r4,2047
81124f5c:	493f9c1e 	bne	r9,r4,81124dd0 <__reset+0xfb104dd0>
81124f60:	2807883a 	mov	r3,r5
81124f64:	3023883a 	mov	r17,r6
81124f68:	4821883a 	mov	r16,r9
81124f6c:	3825883a 	mov	r18,r7
81124f70:	003e9106 	br	811249b8 <__reset+0xfb1049b8>
81124f74:	80001f1e 	bne	r16,zero,81124ff4 <__subdf3+0x6c8>
81124f78:	1c48b03a 	or	r4,r3,r17
81124f7c:	20005a26 	beq	r4,zero,811250e8 <__subdf3+0x7bc>
81124f80:	0084303a 	nor	r2,zero,r2
81124f84:	1000561e 	bne	r2,zero,811250e0 <__subdf3+0x7b4>
81124f88:	89a3883a 	add	r17,r17,r6
81124f8c:	1945883a 	add	r2,r3,r5
81124f90:	898d803a 	cmpltu	r6,r17,r6
81124f94:	3087883a 	add	r3,r6,r2
81124f98:	4821883a 	mov	r16,r9
81124f9c:	003f0506 	br	81124bb4 <__reset+0xfb104bb4>
81124fa0:	10002b1e 	bne	r2,zero,81125050 <__subdf3+0x724>
81124fa4:	2984b03a 	or	r2,r5,r6
81124fa8:	10008026 	beq	r2,zero,811251ac <__subdf3+0x880>
81124fac:	2807883a 	mov	r3,r5
81124fb0:	3023883a 	mov	r17,r6
81124fb4:	3825883a 	mov	r18,r7
81124fb8:	0401ffc4 	movi	r16,2047
81124fbc:	003e7e06 	br	811249b8 <__reset+0xfb1049b8>
81124fc0:	3809883a 	mov	r4,r7
81124fc4:	0011883a 	mov	r8,zero
81124fc8:	0005883a 	mov	r2,zero
81124fcc:	003ee306 	br	81124b5c <__reset+0xfb104b5c>
81124fd0:	1c62b03a 	or	r17,r3,r17
81124fd4:	8822c03a 	cmpne	r17,r17,zero
81124fd8:	0005883a 	mov	r2,zero
81124fdc:	003f8906 	br	81124e04 <__reset+0xfb104e04>
81124fe0:	3809883a 	mov	r4,r7
81124fe4:	4821883a 	mov	r16,r9
81124fe8:	0011883a 	mov	r8,zero
81124fec:	0005883a 	mov	r2,zero
81124ff0:	003eda06 	br	81124b5c <__reset+0xfb104b5c>
81124ff4:	0101ffc4 	movi	r4,2047
81124ff8:	49003b26 	beq	r9,r4,811250e8 <__subdf3+0x7bc>
81124ffc:	0085c83a 	sub	r2,zero,r2
81125000:	18c02034 	orhi	r3,r3,128
81125004:	01000e04 	movi	r4,56
81125008:	20806e16 	blt	r4,r2,811251c4 <__subdf3+0x898>
8112500c:	010007c4 	movi	r4,31
81125010:	20807716 	blt	r4,r2,811251f0 <__subdf3+0x8c4>
81125014:	01000804 	movi	r4,32
81125018:	2089c83a 	sub	r4,r4,r2
8112501c:	1914983a 	sll	r10,r3,r4
81125020:	8890d83a 	srl	r8,r17,r2
81125024:	8908983a 	sll	r4,r17,r4
81125028:	1884d83a 	srl	r2,r3,r2
8112502c:	5222b03a 	or	r17,r10,r8
81125030:	2006c03a 	cmpne	r3,r4,zero
81125034:	88e2b03a 	or	r17,r17,r3
81125038:	89a3883a 	add	r17,r17,r6
8112503c:	1145883a 	add	r2,r2,r5
81125040:	898d803a 	cmpltu	r6,r17,r6
81125044:	3087883a 	add	r3,r6,r2
81125048:	4821883a 	mov	r16,r9
8112504c:	003ed906 	br	81124bb4 <__reset+0xfb104bb4>
81125050:	2984b03a 	or	r2,r5,r6
81125054:	10004226 	beq	r2,zero,81125160 <__subdf3+0x834>
81125058:	1808d0fa 	srli	r4,r3,3
8112505c:	8822d0fa 	srli	r17,r17,3
81125060:	1806977a 	slli	r3,r3,29
81125064:	2080022c 	andhi	r2,r4,8
81125068:	1c62b03a 	or	r17,r3,r17
8112506c:	10000826 	beq	r2,zero,81125090 <__subdf3+0x764>
81125070:	2812d0fa 	srli	r9,r5,3
81125074:	4880022c 	andhi	r2,r9,8
81125078:	1000051e 	bne	r2,zero,81125090 <__subdf3+0x764>
8112507c:	300cd0fa 	srli	r6,r6,3
81125080:	2804977a 	slli	r2,r5,29
81125084:	4809883a 	mov	r4,r9
81125088:	3825883a 	mov	r18,r7
8112508c:	11a2b03a 	or	r17,r2,r6
81125090:	8806d77a 	srli	r3,r17,29
81125094:	200890fa 	slli	r4,r4,3
81125098:	882290fa 	slli	r17,r17,3
8112509c:	0401ffc4 	movi	r16,2047
811250a0:	1906b03a 	or	r3,r3,r4
811250a4:	003e4406 	br	811249b8 <__reset+0xfb1049b8>
811250a8:	2984b03a 	or	r2,r5,r6
811250ac:	103e4226 	beq	r2,zero,811249b8 <__reset+0xfb1049b8>
811250b0:	8989c83a 	sub	r4,r17,r6
811250b4:	8911803a 	cmpltu	r8,r17,r4
811250b8:	1945c83a 	sub	r2,r3,r5
811250bc:	1205c83a 	sub	r2,r2,r8
811250c0:	1200202c 	andhi	r8,r2,128
811250c4:	403e9a26 	beq	r8,zero,81124b30 <__reset+0xfb104b30>
811250c8:	3463c83a 	sub	r17,r6,r17
811250cc:	28c5c83a 	sub	r2,r5,r3
811250d0:	344d803a 	cmpltu	r6,r6,r17
811250d4:	1187c83a 	sub	r3,r2,r6
811250d8:	3825883a 	mov	r18,r7
811250dc:	003e3606 	br	811249b8 <__reset+0xfb1049b8>
811250e0:	0101ffc4 	movi	r4,2047
811250e4:	493fc71e 	bne	r9,r4,81125004 <__reset+0xfb105004>
811250e8:	2807883a 	mov	r3,r5
811250ec:	3023883a 	mov	r17,r6
811250f0:	4821883a 	mov	r16,r9
811250f4:	003e3006 	br	811249b8 <__reset+0xfb1049b8>
811250f8:	10003626 	beq	r2,zero,811251d4 <__subdf3+0x8a8>
811250fc:	2984b03a 	or	r2,r5,r6
81125100:	10001726 	beq	r2,zero,81125160 <__subdf3+0x834>
81125104:	1808d0fa 	srli	r4,r3,3
81125108:	8822d0fa 	srli	r17,r17,3
8112510c:	1806977a 	slli	r3,r3,29
81125110:	2080022c 	andhi	r2,r4,8
81125114:	1c62b03a 	or	r17,r3,r17
81125118:	10000726 	beq	r2,zero,81125138 <__subdf3+0x80c>
8112511c:	2812d0fa 	srli	r9,r5,3
81125120:	4880022c 	andhi	r2,r9,8
81125124:	1000041e 	bne	r2,zero,81125138 <__subdf3+0x80c>
81125128:	300cd0fa 	srli	r6,r6,3
8112512c:	2804977a 	slli	r2,r5,29
81125130:	4809883a 	mov	r4,r9
81125134:	11a2b03a 	or	r17,r2,r6
81125138:	8806d77a 	srli	r3,r17,29
8112513c:	200890fa 	slli	r4,r4,3
81125140:	882290fa 	slli	r17,r17,3
81125144:	3825883a 	mov	r18,r7
81125148:	1906b03a 	or	r3,r3,r4
8112514c:	0401ffc4 	movi	r16,2047
81125150:	003e1906 	br	811249b8 <__reset+0xfb1049b8>
81125154:	000b883a 	mov	r5,zero
81125158:	0005883a 	mov	r2,zero
8112515c:	003e2e06 	br	81124a18 <__reset+0xfb104a18>
81125160:	0401ffc4 	movi	r16,2047
81125164:	003e1406 	br	811249b8 <__reset+0xfb1049b8>
81125168:	0005883a 	mov	r2,zero
8112516c:	003f7506 	br	81124f44 <__reset+0xfb104f44>
81125170:	0005883a 	mov	r2,zero
81125174:	0009883a 	mov	r4,zero
81125178:	003e7806 	br	81124b5c <__reset+0xfb104b5c>
8112517c:	123ff804 	addi	r8,r2,-32
81125180:	01000804 	movi	r4,32
81125184:	1a10d83a 	srl	r8,r3,r8
81125188:	11002526 	beq	r2,r4,81125220 <__subdf3+0x8f4>
8112518c:	01001004 	movi	r4,64
81125190:	2085c83a 	sub	r2,r4,r2
81125194:	1884983a 	sll	r2,r3,r2
81125198:	1444b03a 	or	r2,r2,r17
8112519c:	1004c03a 	cmpne	r2,r2,zero
811251a0:	40a2b03a 	or	r17,r8,r2
811251a4:	0005883a 	mov	r2,zero
811251a8:	003f1606 	br	81124e04 <__reset+0xfb104e04>
811251ac:	02000434 	movhi	r8,16
811251b0:	0009883a 	mov	r4,zero
811251b4:	423fffc4 	addi	r8,r8,-1
811251b8:	00bfffc4 	movi	r2,-1
811251bc:	0401ffc4 	movi	r16,2047
811251c0:	003e6606 	br	81124b5c <__reset+0xfb104b5c>
811251c4:	1c62b03a 	or	r17,r3,r17
811251c8:	8822c03a 	cmpne	r17,r17,zero
811251cc:	0005883a 	mov	r2,zero
811251d0:	003f9906 	br	81125038 <__reset+0xfb105038>
811251d4:	2807883a 	mov	r3,r5
811251d8:	3023883a 	mov	r17,r6
811251dc:	0401ffc4 	movi	r16,2047
811251e0:	003df506 	br	811249b8 <__reset+0xfb1049b8>
811251e4:	2807883a 	mov	r3,r5
811251e8:	3023883a 	mov	r17,r6
811251ec:	003df206 	br	811249b8 <__reset+0xfb1049b8>
811251f0:	123ff804 	addi	r8,r2,-32
811251f4:	01000804 	movi	r4,32
811251f8:	1a10d83a 	srl	r8,r3,r8
811251fc:	11000a26 	beq	r2,r4,81125228 <__subdf3+0x8fc>
81125200:	01001004 	movi	r4,64
81125204:	2085c83a 	sub	r2,r4,r2
81125208:	1884983a 	sll	r2,r3,r2
8112520c:	1444b03a 	or	r2,r2,r17
81125210:	1004c03a 	cmpne	r2,r2,zero
81125214:	40a2b03a 	or	r17,r8,r2
81125218:	0005883a 	mov	r2,zero
8112521c:	003f8606 	br	81125038 <__reset+0xfb105038>
81125220:	0005883a 	mov	r2,zero
81125224:	003fdc06 	br	81125198 <__reset+0xfb105198>
81125228:	0005883a 	mov	r2,zero
8112522c:	003ff706 	br	8112520c <__reset+0xfb10520c>

81125230 <__fixdfsi>:
81125230:	280cd53a 	srli	r6,r5,20
81125234:	00c00434 	movhi	r3,16
81125238:	18ffffc4 	addi	r3,r3,-1
8112523c:	3181ffcc 	andi	r6,r6,2047
81125240:	01c0ff84 	movi	r7,1022
81125244:	28c6703a 	and	r3,r5,r3
81125248:	280ad7fa 	srli	r5,r5,31
8112524c:	3980120e 	bge	r7,r6,81125298 <__fixdfsi+0x68>
81125250:	00810744 	movi	r2,1053
81125254:	11800c16 	blt	r2,r6,81125288 <__fixdfsi+0x58>
81125258:	00810cc4 	movi	r2,1075
8112525c:	1185c83a 	sub	r2,r2,r6
81125260:	01c007c4 	movi	r7,31
81125264:	18c00434 	orhi	r3,r3,16
81125268:	38800d16 	blt	r7,r2,811252a0 <__fixdfsi+0x70>
8112526c:	31befb44 	addi	r6,r6,-1043
81125270:	2084d83a 	srl	r2,r4,r2
81125274:	1986983a 	sll	r3,r3,r6
81125278:	1884b03a 	or	r2,r3,r2
8112527c:	28000726 	beq	r5,zero,8112529c <__fixdfsi+0x6c>
81125280:	0085c83a 	sub	r2,zero,r2
81125284:	f800283a 	ret
81125288:	00a00034 	movhi	r2,32768
8112528c:	10bfffc4 	addi	r2,r2,-1
81125290:	2885883a 	add	r2,r5,r2
81125294:	f800283a 	ret
81125298:	0005883a 	mov	r2,zero
8112529c:	f800283a 	ret
811252a0:	008104c4 	movi	r2,1043
811252a4:	1185c83a 	sub	r2,r2,r6
811252a8:	1884d83a 	srl	r2,r3,r2
811252ac:	003ff306 	br	8112527c <__reset+0xfb10527c>

811252b0 <__floatsidf>:
811252b0:	defffd04 	addi	sp,sp,-12
811252b4:	de00012e 	bgeu	sp,et,811252bc <__floatsidf+0xc>
811252b8:	003b68fa 	trap	3
811252bc:	dfc00215 	stw	ra,8(sp)
811252c0:	dc400115 	stw	r17,4(sp)
811252c4:	dc000015 	stw	r16,0(sp)
811252c8:	20002b26 	beq	r4,zero,81125378 <__floatsidf+0xc8>
811252cc:	2023883a 	mov	r17,r4
811252d0:	2020d7fa 	srli	r16,r4,31
811252d4:	20002d16 	blt	r4,zero,8112538c <__floatsidf+0xdc>
811252d8:	8809883a 	mov	r4,r17
811252dc:	110fc8c0 	call	8110fc8c <__clzsi2>
811252e0:	01410784 	movi	r5,1054
811252e4:	288bc83a 	sub	r5,r5,r2
811252e8:	01010cc4 	movi	r4,1075
811252ec:	2149c83a 	sub	r4,r4,r5
811252f0:	00c007c4 	movi	r3,31
811252f4:	1900160e 	bge	r3,r4,81125350 <__floatsidf+0xa0>
811252f8:	00c104c4 	movi	r3,1043
811252fc:	1947c83a 	sub	r3,r3,r5
81125300:	88c6983a 	sll	r3,r17,r3
81125304:	00800434 	movhi	r2,16
81125308:	10bfffc4 	addi	r2,r2,-1
8112530c:	1886703a 	and	r3,r3,r2
81125310:	2941ffcc 	andi	r5,r5,2047
81125314:	800d883a 	mov	r6,r16
81125318:	0005883a 	mov	r2,zero
8112531c:	280a953a 	slli	r5,r5,20
81125320:	31803fcc 	andi	r6,r6,255
81125324:	01000434 	movhi	r4,16
81125328:	300c97fa 	slli	r6,r6,31
8112532c:	213fffc4 	addi	r4,r4,-1
81125330:	1906703a 	and	r3,r3,r4
81125334:	1946b03a 	or	r3,r3,r5
81125338:	1986b03a 	or	r3,r3,r6
8112533c:	dfc00217 	ldw	ra,8(sp)
81125340:	dc400117 	ldw	r17,4(sp)
81125344:	dc000017 	ldw	r16,0(sp)
81125348:	dec00304 	addi	sp,sp,12
8112534c:	f800283a 	ret
81125350:	00c002c4 	movi	r3,11
81125354:	1887c83a 	sub	r3,r3,r2
81125358:	88c6d83a 	srl	r3,r17,r3
8112535c:	8904983a 	sll	r2,r17,r4
81125360:	01000434 	movhi	r4,16
81125364:	213fffc4 	addi	r4,r4,-1
81125368:	2941ffcc 	andi	r5,r5,2047
8112536c:	1906703a 	and	r3,r3,r4
81125370:	800d883a 	mov	r6,r16
81125374:	003fe906 	br	8112531c <__reset+0xfb10531c>
81125378:	000d883a 	mov	r6,zero
8112537c:	000b883a 	mov	r5,zero
81125380:	0007883a 	mov	r3,zero
81125384:	0005883a 	mov	r2,zero
81125388:	003fe406 	br	8112531c <__reset+0xfb10531c>
8112538c:	0123c83a 	sub	r17,zero,r4
81125390:	003fd106 	br	811252d8 <__reset+0xfb1052d8>

81125394 <__floatunsidf>:
81125394:	defffe04 	addi	sp,sp,-8
81125398:	de00012e 	bgeu	sp,et,811253a0 <__floatunsidf+0xc>
8112539c:	003b68fa 	trap	3
811253a0:	dc000015 	stw	r16,0(sp)
811253a4:	dfc00115 	stw	ra,4(sp)
811253a8:	2021883a 	mov	r16,r4
811253ac:	20002226 	beq	r4,zero,81125438 <__floatunsidf+0xa4>
811253b0:	110fc8c0 	call	8110fc8c <__clzsi2>
811253b4:	01010784 	movi	r4,1054
811253b8:	2089c83a 	sub	r4,r4,r2
811253bc:	01810cc4 	movi	r6,1075
811253c0:	310dc83a 	sub	r6,r6,r4
811253c4:	00c007c4 	movi	r3,31
811253c8:	1980120e 	bge	r3,r6,81125414 <__floatunsidf+0x80>
811253cc:	00c104c4 	movi	r3,1043
811253d0:	1907c83a 	sub	r3,r3,r4
811253d4:	80ca983a 	sll	r5,r16,r3
811253d8:	00800434 	movhi	r2,16
811253dc:	10bfffc4 	addi	r2,r2,-1
811253e0:	2101ffcc 	andi	r4,r4,2047
811253e4:	0021883a 	mov	r16,zero
811253e8:	288a703a 	and	r5,r5,r2
811253ec:	2008953a 	slli	r4,r4,20
811253f0:	00c00434 	movhi	r3,16
811253f4:	18ffffc4 	addi	r3,r3,-1
811253f8:	28c6703a 	and	r3,r5,r3
811253fc:	8005883a 	mov	r2,r16
81125400:	1906b03a 	or	r3,r3,r4
81125404:	dfc00117 	ldw	ra,4(sp)
81125408:	dc000017 	ldw	r16,0(sp)
8112540c:	dec00204 	addi	sp,sp,8
81125410:	f800283a 	ret
81125414:	00c002c4 	movi	r3,11
81125418:	188bc83a 	sub	r5,r3,r2
8112541c:	814ad83a 	srl	r5,r16,r5
81125420:	00c00434 	movhi	r3,16
81125424:	18ffffc4 	addi	r3,r3,-1
81125428:	81a0983a 	sll	r16,r16,r6
8112542c:	2101ffcc 	andi	r4,r4,2047
81125430:	28ca703a 	and	r5,r5,r3
81125434:	003fed06 	br	811253ec <__reset+0xfb1053ec>
81125438:	0009883a 	mov	r4,zero
8112543c:	000b883a 	mov	r5,zero
81125440:	003fea06 	br	811253ec <__reset+0xfb1053ec>

81125444 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
81125444:	defffb04 	addi	sp,sp,-20
81125448:	de00012e 	bgeu	sp,et,81125450 <alt_busy_sleep+0xc>
8112544c:	003b68fa 	trap	3
81125450:	df000415 	stw	fp,16(sp)
81125454:	df000404 	addi	fp,sp,16
81125458:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
8112545c:	008000c4 	movi	r2,3
81125460:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
81125464:	e0fffd17 	ldw	r3,-12(fp)
81125468:	008003f4 	movhi	r2,15
8112546c:	10909004 	addi	r2,r2,16960
81125470:	1887383a 	mul	r3,r3,r2
81125474:	00817db4 	movhi	r2,1526
81125478:	10b84004 	addi	r2,r2,-7936
8112547c:	10c7203a 	divu	r3,r2,r3
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
81125480:	00a00034 	movhi	r2,32768
81125484:	10bfffc4 	addi	r2,r2,-1
81125488:	10c5203a 	divu	r2,r2,r3
8112548c:	e0ffff17 	ldw	r3,-4(fp)
81125490:	1885203a 	divu	r2,r3,r2
81125494:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
81125498:	e0bffe17 	ldw	r2,-8(fp)
8112549c:	10002526 	beq	r2,zero,81125534 <alt_busy_sleep+0xf0>
  {
    for(i=0;i<big_loops;i++)
811254a0:	e03ffc15 	stw	zero,-16(fp)
811254a4:	00001406 	br	811254f8 <alt_busy_sleep+0xb4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
811254a8:	00a00034 	movhi	r2,32768
811254ac:	10bfffc4 	addi	r2,r2,-1
811254b0:	10bfffc4 	addi	r2,r2,-1
811254b4:	103ffe1e 	bne	r2,zero,811254b0 <__reset+0xfb1054b0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
811254b8:	e0fffd17 	ldw	r3,-12(fp)
811254bc:	008003f4 	movhi	r2,15
811254c0:	10909004 	addi	r2,r2,16960
811254c4:	1887383a 	mul	r3,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
811254c8:	00817db4 	movhi	r2,1526
811254cc:	10b84004 	addi	r2,r2,-7936
811254d0:	10c7203a 	divu	r3,r2,r3
811254d4:	00a00034 	movhi	r2,32768
811254d8:	10bfffc4 	addi	r2,r2,-1
811254dc:	10c5203a 	divu	r2,r2,r3
811254e0:	e0ffff17 	ldw	r3,-4(fp)
811254e4:	1885c83a 	sub	r2,r3,r2
811254e8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
811254ec:	e0bffc17 	ldw	r2,-16(fp)
811254f0:	10800044 	addi	r2,r2,1
811254f4:	e0bffc15 	stw	r2,-16(fp)
811254f8:	e0fffc17 	ldw	r3,-16(fp)
811254fc:	e0bffe17 	ldw	r2,-8(fp)
81125500:	18bfe916 	blt	r3,r2,811254a8 <__reset+0xfb1054a8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81125504:	e0fffd17 	ldw	r3,-12(fp)
81125508:	008003f4 	movhi	r2,15
8112550c:	10909004 	addi	r2,r2,16960
81125510:	1887383a 	mul	r3,r3,r2
81125514:	00817db4 	movhi	r2,1526
81125518:	10b84004 	addi	r2,r2,-7936
8112551c:	10c7203a 	divu	r3,r2,r3
81125520:	e0bfff17 	ldw	r2,-4(fp)
81125524:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81125528:	10bfffc4 	addi	r2,r2,-1
8112552c:	103ffe1e 	bne	r2,zero,81125528 <__reset+0xfb105528>
81125530:	00000b06 	br	81125560 <alt_busy_sleep+0x11c>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
81125534:	e0fffd17 	ldw	r3,-12(fp)
81125538:	008003f4 	movhi	r2,15
8112553c:	10909004 	addi	r2,r2,16960
81125540:	1887383a 	mul	r3,r3,r2
81125544:	00817db4 	movhi	r2,1526
81125548:	10b84004 	addi	r2,r2,-7936
8112554c:	10c7203a 	divu	r3,r2,r3
81125550:	e0bfff17 	ldw	r2,-4(fp)
81125554:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
81125558:	10bfffc4 	addi	r2,r2,-1
8112555c:	00bffe16 	blt	zero,r2,81125558 <__reset+0xfb105558>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
81125560:	0005883a 	mov	r2,zero
}
81125564:	e037883a 	mov	sp,fp
81125568:	df000017 	ldw	fp,0(sp)
8112556c:	dec00104 	addi	sp,sp,4
81125570:	f800283a 	ret

81125574 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81125574:	defffe04 	addi	sp,sp,-8
81125578:	de00012e 	bgeu	sp,et,81125580 <alt_get_errno+0xc>
8112557c:	003b68fa 	trap	3
81125580:	dfc00115 	stw	ra,4(sp)
81125584:	df000015 	stw	fp,0(sp)
81125588:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8112558c:	d0a01017 	ldw	r2,-32704(gp)
81125590:	10000326 	beq	r2,zero,811255a0 <alt_get_errno+0x2c>
81125594:	d0a01017 	ldw	r2,-32704(gp)
81125598:	103ee83a 	callr	r2
8112559c:	00000106 	br	811255a4 <alt_get_errno+0x30>
811255a0:	d0a05e04 	addi	r2,gp,-32392
}
811255a4:	e037883a 	mov	sp,fp
811255a8:	dfc00117 	ldw	ra,4(sp)
811255ac:	df000017 	ldw	fp,0(sp)
811255b0:	dec00204 	addi	sp,sp,8
811255b4:	f800283a 	ret

811255b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
811255b8:	defffb04 	addi	sp,sp,-20
811255bc:	de00012e 	bgeu	sp,et,811255c4 <close+0xc>
811255c0:	003b68fa 	trap	3
811255c4:	dfc00415 	stw	ra,16(sp)
811255c8:	df000315 	stw	fp,12(sp)
811255cc:	df000304 	addi	fp,sp,12
811255d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
811255d4:	e0bfff17 	ldw	r2,-4(fp)
811255d8:	10000616 	blt	r2,zero,811255f4 <close+0x3c>
811255dc:	e0bfff17 	ldw	r2,-4(fp)
811255e0:	10c00324 	muli	r3,r2,12
811255e4:	00a04534 	movhi	r2,33044
811255e8:	10b51504 	addi	r2,r2,-11180
811255ec:	1885883a 	add	r2,r3,r2
811255f0:	00000106 	br	811255f8 <close+0x40>
811255f4:	0005883a 	mov	r2,zero
811255f8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
811255fc:	e0bffd17 	ldw	r2,-12(fp)
81125600:	10001926 	beq	r2,zero,81125668 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
81125604:	e0bffd17 	ldw	r2,-12(fp)
81125608:	10800017 	ldw	r2,0(r2)
8112560c:	10800417 	ldw	r2,16(r2)
81125610:	10000626 	beq	r2,zero,8112562c <close+0x74>
81125614:	e0bffd17 	ldw	r2,-12(fp)
81125618:	10800017 	ldw	r2,0(r2)
8112561c:	10800417 	ldw	r2,16(r2)
81125620:	e13ffd17 	ldw	r4,-12(fp)
81125624:	103ee83a 	callr	r2
81125628:	00000106 	br	81125630 <close+0x78>
8112562c:	0005883a 	mov	r2,zero
81125630:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
81125634:	e13fff17 	ldw	r4,-4(fp)
81125638:	1125ff80 	call	81125ff8 <alt_release_fd>
    if (rval < 0)
8112563c:	e0bffe17 	ldw	r2,-8(fp)
81125640:	1000070e 	bge	r2,zero,81125660 <close+0xa8>
    {
      ALT_ERRNO = -rval;
81125644:	11255740 	call	81125574 <alt_get_errno>
81125648:	1007883a 	mov	r3,r2
8112564c:	e0bffe17 	ldw	r2,-8(fp)
81125650:	0085c83a 	sub	r2,zero,r2
81125654:	18800015 	stw	r2,0(r3)
      return -1;
81125658:	00bfffc4 	movi	r2,-1
8112565c:	00000706 	br	8112567c <close+0xc4>
    }
    return 0;
81125660:	0005883a 	mov	r2,zero
81125664:	00000506 	br	8112567c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
81125668:	11255740 	call	81125574 <alt_get_errno>
8112566c:	1007883a 	mov	r3,r2
81125670:	00801444 	movi	r2,81
81125674:	18800015 	stw	r2,0(r3)
    return -1;
81125678:	00bfffc4 	movi	r2,-1
  }
}
8112567c:	e037883a 	mov	sp,fp
81125680:	dfc00117 	ldw	ra,4(sp)
81125684:	df000017 	ldw	fp,0(sp)
81125688:	dec00204 	addi	sp,sp,8
8112568c:	f800283a 	ret

81125690 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
81125690:	deffff04 	addi	sp,sp,-4
81125694:	de00012e 	bgeu	sp,et,8112569c <alt_dcache_flush_all+0xc>
81125698:	003b68fa 	trap	3
8112569c:	df000015 	stw	fp,0(sp)
811256a0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
811256a4:	0001883a 	nop
811256a8:	e037883a 	mov	sp,fp
811256ac:	df000017 	ldw	fp,0(sp)
811256b0:	dec00104 	addi	sp,sp,4
811256b4:	f800283a 	ret

811256b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
811256b8:	defffc04 	addi	sp,sp,-16
811256bc:	de00012e 	bgeu	sp,et,811256c4 <alt_dev_null_write+0xc>
811256c0:	003b68fa 	trap	3
811256c4:	df000315 	stw	fp,12(sp)
811256c8:	df000304 	addi	fp,sp,12
811256cc:	e13ffd15 	stw	r4,-12(fp)
811256d0:	e17ffe15 	stw	r5,-8(fp)
811256d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
811256d8:	e0bfff17 	ldw	r2,-4(fp)
}
811256dc:	e037883a 	mov	sp,fp
811256e0:	df000017 	ldw	fp,0(sp)
811256e4:	dec00104 	addi	sp,sp,4
811256e8:	f800283a 	ret

811256ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811256ec:	defffe04 	addi	sp,sp,-8
811256f0:	de00012e 	bgeu	sp,et,811256f8 <alt_get_errno+0xc>
811256f4:	003b68fa 	trap	3
811256f8:	dfc00115 	stw	ra,4(sp)
811256fc:	df000015 	stw	fp,0(sp)
81125700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81125704:	d0a01017 	ldw	r2,-32704(gp)
81125708:	10000326 	beq	r2,zero,81125718 <alt_get_errno+0x2c>
8112570c:	d0a01017 	ldw	r2,-32704(gp)
81125710:	103ee83a 	callr	r2
81125714:	00000106 	br	8112571c <alt_get_errno+0x30>
81125718:	d0a05e04 	addi	r2,gp,-32392
}
8112571c:	e037883a 	mov	sp,fp
81125720:	dfc00117 	ldw	ra,4(sp)
81125724:	df000017 	ldw	fp,0(sp)
81125728:	dec00204 	addi	sp,sp,8
8112572c:	f800283a 	ret

81125730 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
81125730:	defffb04 	addi	sp,sp,-20
81125734:	de00012e 	bgeu	sp,et,8112573c <fstat+0xc>
81125738:	003b68fa 	trap	3
8112573c:	dfc00415 	stw	ra,16(sp)
81125740:	df000315 	stw	fp,12(sp)
81125744:	df000304 	addi	fp,sp,12
81125748:	e13ffe15 	stw	r4,-8(fp)
8112574c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81125750:	e0bffe17 	ldw	r2,-8(fp)
81125754:	10000616 	blt	r2,zero,81125770 <fstat+0x40>
81125758:	e0bffe17 	ldw	r2,-8(fp)
8112575c:	10c00324 	muli	r3,r2,12
81125760:	00a04534 	movhi	r2,33044
81125764:	10b51504 	addi	r2,r2,-11180
81125768:	1885883a 	add	r2,r3,r2
8112576c:	00000106 	br	81125774 <fstat+0x44>
81125770:	0005883a 	mov	r2,zero
81125774:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
81125778:	e0bffd17 	ldw	r2,-12(fp)
8112577c:	10001026 	beq	r2,zero,811257c0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
81125780:	e0bffd17 	ldw	r2,-12(fp)
81125784:	10800017 	ldw	r2,0(r2)
81125788:	10800817 	ldw	r2,32(r2)
8112578c:	10000726 	beq	r2,zero,811257ac <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
81125790:	e0bffd17 	ldw	r2,-12(fp)
81125794:	10800017 	ldw	r2,0(r2)
81125798:	10800817 	ldw	r2,32(r2)
8112579c:	e17fff17 	ldw	r5,-4(fp)
811257a0:	e13ffd17 	ldw	r4,-12(fp)
811257a4:	103ee83a 	callr	r2
811257a8:	00000a06 	br	811257d4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
811257ac:	e0bfff17 	ldw	r2,-4(fp)
811257b0:	00c80004 	movi	r3,8192
811257b4:	10c00115 	stw	r3,4(r2)
      return 0;
811257b8:	0005883a 	mov	r2,zero
811257bc:	00000506 	br	811257d4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
811257c0:	11256ec0 	call	811256ec <alt_get_errno>
811257c4:	1007883a 	mov	r3,r2
811257c8:	00801444 	movi	r2,81
811257cc:	18800015 	stw	r2,0(r3)
    return -1;
811257d0:	00bfffc4 	movi	r2,-1
  }
}
811257d4:	e037883a 	mov	sp,fp
811257d8:	dfc00117 	ldw	ra,4(sp)
811257dc:	df000017 	ldw	fp,0(sp)
811257e0:	dec00204 	addi	sp,sp,8
811257e4:	f800283a 	ret

811257e8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
811257e8:	defff004 	addi	sp,sp,-64
811257ec:	de00012e 	bgeu	sp,et,811257f4 <alt_irq_register+0xc>
811257f0:	003b68fa 	trap	3
811257f4:	df000f15 	stw	fp,60(sp)
811257f8:	df000f04 	addi	fp,sp,60
811257fc:	e13ffd15 	stw	r4,-12(fp)
81125800:	e17ffe15 	stw	r5,-8(fp)
81125804:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
81125808:	00bffa84 	movi	r2,-22
8112580c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81125810:	e0bffd17 	ldw	r2,-12(fp)
81125814:	10800828 	cmpgeui	r2,r2,32
81125818:	1000501e 	bne	r2,zero,8112595c <alt_irq_register+0x174>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112581c:	0005303a 	rdctl	r2,status
81125820:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125824:	e0fff617 	ldw	r3,-40(fp)
81125828:	00bfff84 	movi	r2,-2
8112582c:	1884703a 	and	r2,r3,r2
81125830:	1001703a 	wrctl	status,r2
  
  return context;
81125834:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
81125838:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
8112583c:	00a04574 	movhi	r2,33045
81125840:	10894304 	addi	r2,r2,9484
81125844:	e0fffd17 	ldw	r3,-12(fp)
81125848:	180690fa 	slli	r3,r3,3
8112584c:	10c5883a 	add	r2,r2,r3
81125850:	e0ffff17 	ldw	r3,-4(fp)
81125854:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
81125858:	00a04574 	movhi	r2,33045
8112585c:	10894304 	addi	r2,r2,9484
81125860:	e0fffd17 	ldw	r3,-12(fp)
81125864:	180690fa 	slli	r3,r3,3
81125868:	10c5883a 	add	r2,r2,r3
8112586c:	10800104 	addi	r2,r2,4
81125870:	e0fffe17 	ldw	r3,-8(fp)
81125874:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
81125878:	e0bfff17 	ldw	r2,-4(fp)
8112587c:	10001926 	beq	r2,zero,811258e4 <alt_irq_register+0xfc>
81125880:	e0bffd17 	ldw	r2,-12(fp)
81125884:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81125888:	0005303a 	rdctl	r2,status
8112588c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81125890:	e0fff717 	ldw	r3,-36(fp)
81125894:	00bfff84 	movi	r2,-2
81125898:	1884703a 	and	r2,r3,r2
8112589c:	1001703a 	wrctl	status,r2
  
  return context;
811258a0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
811258a4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
811258a8:	00c00044 	movi	r3,1
811258ac:	e0bff217 	ldw	r2,-56(fp)
811258b0:	1884983a 	sll	r2,r3,r2
811258b4:	1007883a 	mov	r3,r2
811258b8:	d0a06617 	ldw	r2,-32360(gp)
811258bc:	1884b03a 	or	r2,r3,r2
811258c0:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
811258c4:	d0a06617 	ldw	r2,-32360(gp)
811258c8:	100170fa 	wrctl	ienable,r2
811258cc:	e0bff817 	ldw	r2,-32(fp)
811258d0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811258d4:	e0bff917 	ldw	r2,-28(fp)
811258d8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
811258dc:	0005883a 	mov	r2,zero
811258e0:	00001906 	br	81125948 <alt_irq_register+0x160>
811258e4:	e0bffd17 	ldw	r2,-12(fp)
811258e8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811258ec:	0005303a 	rdctl	r2,status
811258f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811258f4:	e0fffa17 	ldw	r3,-24(fp)
811258f8:	00bfff84 	movi	r2,-2
811258fc:	1884703a 	and	r2,r3,r2
81125900:	1001703a 	wrctl	status,r2
  
  return context;
81125904:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81125908:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
8112590c:	00c00044 	movi	r3,1
81125910:	e0bff417 	ldw	r2,-48(fp)
81125914:	1884983a 	sll	r2,r3,r2
81125918:	0084303a 	nor	r2,zero,r2
8112591c:	1007883a 	mov	r3,r2
81125920:	d0a06617 	ldw	r2,-32360(gp)
81125924:	1884703a 	and	r2,r3,r2
81125928:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
8112592c:	d0a06617 	ldw	r2,-32360(gp)
81125930:	100170fa 	wrctl	ienable,r2
81125934:	e0bffb17 	ldw	r2,-20(fp)
81125938:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112593c:	e0bffc17 	ldw	r2,-16(fp)
81125940:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81125944:	0005883a 	mov	r2,zero
81125948:	e0bff115 	stw	r2,-60(fp)
8112594c:	e0bff317 	ldw	r2,-52(fp)
81125950:	e0bff515 	stw	r2,-44(fp)
81125954:	e0bff517 	ldw	r2,-44(fp)
81125958:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
8112595c:	e0bff117 	ldw	r2,-60(fp)
}
81125960:	e037883a 	mov	sp,fp
81125964:	df000017 	ldw	fp,0(sp)
81125968:	dec00104 	addi	sp,sp,4
8112596c:	f800283a 	ret

81125970 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81125970:	defffe04 	addi	sp,sp,-8
81125974:	de00012e 	bgeu	sp,et,8112597c <alt_get_errno+0xc>
81125978:	003b68fa 	trap	3
8112597c:	dfc00115 	stw	ra,4(sp)
81125980:	df000015 	stw	fp,0(sp)
81125984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81125988:	d0a01017 	ldw	r2,-32704(gp)
8112598c:	10000326 	beq	r2,zero,8112599c <alt_get_errno+0x2c>
81125990:	d0a01017 	ldw	r2,-32704(gp)
81125994:	103ee83a 	callr	r2
81125998:	00000106 	br	811259a0 <alt_get_errno+0x30>
8112599c:	d0a05e04 	addi	r2,gp,-32392
}
811259a0:	e037883a 	mov	sp,fp
811259a4:	dfc00117 	ldw	ra,4(sp)
811259a8:	df000017 	ldw	fp,0(sp)
811259ac:	dec00204 	addi	sp,sp,8
811259b0:	f800283a 	ret

811259b4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
811259b4:	deffed04 	addi	sp,sp,-76
811259b8:	de00012e 	bgeu	sp,et,811259c0 <isatty+0xc>
811259bc:	003b68fa 	trap	3
811259c0:	dfc01215 	stw	ra,72(sp)
811259c4:	df001115 	stw	fp,68(sp)
811259c8:	df001104 	addi	fp,sp,68
811259cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811259d0:	e0bfff17 	ldw	r2,-4(fp)
811259d4:	10000616 	blt	r2,zero,811259f0 <isatty+0x3c>
811259d8:	e0bfff17 	ldw	r2,-4(fp)
811259dc:	10c00324 	muli	r3,r2,12
811259e0:	00a04534 	movhi	r2,33044
811259e4:	10b51504 	addi	r2,r2,-11180
811259e8:	1885883a 	add	r2,r3,r2
811259ec:	00000106 	br	811259f4 <isatty+0x40>
811259f0:	0005883a 	mov	r2,zero
811259f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
811259f8:	e0bfef17 	ldw	r2,-68(fp)
811259fc:	10000e26 	beq	r2,zero,81125a38 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
81125a00:	e0bfef17 	ldw	r2,-68(fp)
81125a04:	10800017 	ldw	r2,0(r2)
81125a08:	10800817 	ldw	r2,32(r2)
81125a0c:	1000021e 	bne	r2,zero,81125a18 <isatty+0x64>
    {
      return 1;
81125a10:	00800044 	movi	r2,1
81125a14:	00000d06 	br	81125a4c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
81125a18:	e0bff004 	addi	r2,fp,-64
81125a1c:	100b883a 	mov	r5,r2
81125a20:	e13fff17 	ldw	r4,-4(fp)
81125a24:	11257300 	call	81125730 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
81125a28:	e0bff117 	ldw	r2,-60(fp)
81125a2c:	10880020 	cmpeqi	r2,r2,8192
81125a30:	10803fcc 	andi	r2,r2,255
81125a34:	00000506 	br	81125a4c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
81125a38:	11259700 	call	81125970 <alt_get_errno>
81125a3c:	1007883a 	mov	r3,r2
81125a40:	00801444 	movi	r2,81
81125a44:	18800015 	stw	r2,0(r3)
    return 0;
81125a48:	0005883a 	mov	r2,zero
  }
}
81125a4c:	e037883a 	mov	sp,fp
81125a50:	dfc00117 	ldw	ra,4(sp)
81125a54:	df000017 	ldw	fp,0(sp)
81125a58:	dec00204 	addi	sp,sp,8
81125a5c:	f800283a 	ret

81125a60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81125a60:	defffe04 	addi	sp,sp,-8
81125a64:	de00012e 	bgeu	sp,et,81125a6c <alt_get_errno+0xc>
81125a68:	003b68fa 	trap	3
81125a6c:	dfc00115 	stw	ra,4(sp)
81125a70:	df000015 	stw	fp,0(sp)
81125a74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81125a78:	d0a01017 	ldw	r2,-32704(gp)
81125a7c:	10000326 	beq	r2,zero,81125a8c <alt_get_errno+0x2c>
81125a80:	d0a01017 	ldw	r2,-32704(gp)
81125a84:	103ee83a 	callr	r2
81125a88:	00000106 	br	81125a90 <alt_get_errno+0x30>
81125a8c:	d0a05e04 	addi	r2,gp,-32392
}
81125a90:	e037883a 	mov	sp,fp
81125a94:	dfc00117 	ldw	ra,4(sp)
81125a98:	df000017 	ldw	fp,0(sp)
81125a9c:	dec00204 	addi	sp,sp,8
81125aa0:	f800283a 	ret

81125aa4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
81125aa4:	defff904 	addi	sp,sp,-28
81125aa8:	de00012e 	bgeu	sp,et,81125ab0 <lseek+0xc>
81125aac:	003b68fa 	trap	3
81125ab0:	dfc00615 	stw	ra,24(sp)
81125ab4:	df000515 	stw	fp,20(sp)
81125ab8:	df000504 	addi	fp,sp,20
81125abc:	e13ffd15 	stw	r4,-12(fp)
81125ac0:	e17ffe15 	stw	r5,-8(fp)
81125ac4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
81125ac8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81125acc:	e0bffd17 	ldw	r2,-12(fp)
81125ad0:	10000616 	blt	r2,zero,81125aec <lseek+0x48>
81125ad4:	e0bffd17 	ldw	r2,-12(fp)
81125ad8:	10c00324 	muli	r3,r2,12
81125adc:	00a04534 	movhi	r2,33044
81125ae0:	10b51504 	addi	r2,r2,-11180
81125ae4:	1885883a 	add	r2,r3,r2
81125ae8:	00000106 	br	81125af0 <lseek+0x4c>
81125aec:	0005883a 	mov	r2,zero
81125af0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
81125af4:	e0bffc17 	ldw	r2,-16(fp)
81125af8:	10001026 	beq	r2,zero,81125b3c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
81125afc:	e0bffc17 	ldw	r2,-16(fp)
81125b00:	10800017 	ldw	r2,0(r2)
81125b04:	10800717 	ldw	r2,28(r2)
81125b08:	10000926 	beq	r2,zero,81125b30 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
81125b0c:	e0bffc17 	ldw	r2,-16(fp)
81125b10:	10800017 	ldw	r2,0(r2)
81125b14:	10800717 	ldw	r2,28(r2)
81125b18:	e1bfff17 	ldw	r6,-4(fp)
81125b1c:	e17ffe17 	ldw	r5,-8(fp)
81125b20:	e13ffc17 	ldw	r4,-16(fp)
81125b24:	103ee83a 	callr	r2
81125b28:	e0bffb15 	stw	r2,-20(fp)
81125b2c:	00000506 	br	81125b44 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
81125b30:	00bfde84 	movi	r2,-134
81125b34:	e0bffb15 	stw	r2,-20(fp)
81125b38:	00000206 	br	81125b44 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
81125b3c:	00bfebc4 	movi	r2,-81
81125b40:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
81125b44:	e0bffb17 	ldw	r2,-20(fp)
81125b48:	1000070e 	bge	r2,zero,81125b68 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
81125b4c:	1125a600 	call	81125a60 <alt_get_errno>
81125b50:	1007883a 	mov	r3,r2
81125b54:	e0bffb17 	ldw	r2,-20(fp)
81125b58:	0085c83a 	sub	r2,zero,r2
81125b5c:	18800015 	stw	r2,0(r3)
    rc = -1;
81125b60:	00bfffc4 	movi	r2,-1
81125b64:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
81125b68:	e0bffb17 	ldw	r2,-20(fp)
}
81125b6c:	e037883a 	mov	sp,fp
81125b70:	dfc00117 	ldw	ra,4(sp)
81125b74:	df000017 	ldw	fp,0(sp)
81125b78:	dec00204 	addi	sp,sp,8
81125b7c:	f800283a 	ret

81125b80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
81125b80:	defff904 	addi	sp,sp,-28
81125b84:	de00012e 	bgeu	sp,et,81125b8c <alt_main+0xc>
81125b88:	003b68fa 	trap	3
81125b8c:	dfc00615 	stw	ra,24(sp)
81125b90:	df000515 	stw	fp,20(sp)
81125b94:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
81125b98:	0009883a 	mov	r4,zero
81125b9c:	11306b80 	call	811306b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
81125ba0:	112714c0 	call	8112714c <OSInit>
81125ba4:	01000044 	movi	r4,1
81125ba8:	112ce680 	call	8112ce68 <OSSemCreate>
81125bac:	d0a06d15 	stw	r2,-32332(gp)
81125bb0:	01000044 	movi	r4,1
81125bb4:	112ce680 	call	8112ce68 <OSSemCreate>
81125bb8:	d0a06f15 	stw	r2,-32324(gp)
81125bbc:	d0a06504 	addi	r2,gp,-32364
81125bc0:	e0bffc15 	stw	r2,-16(fp)
81125bc4:	00800044 	movi	r2,1
81125bc8:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81125bcc:	e0bffd0b 	ldhu	r2,-12(fp)
81125bd0:	1009883a 	mov	r4,r2
81125bd4:	112ce680 	call	8112ce68 <OSSemCreate>
81125bd8:	1007883a 	mov	r3,r2
81125bdc:	e0bffc17 	ldw	r2,-16(fp)
81125be0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
81125be4:	11306f80 	call	811306f8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
81125be8:	01a04534 	movhi	r6,33044
81125bec:	31b1e204 	addi	r6,r6,-14456
81125bf0:	01604534 	movhi	r5,33044
81125bf4:	2971e704 	addi	r5,r5,-14436
81125bf8:	01204534 	movhi	r4,33044
81125bfc:	2131e704 	addi	r4,r4,-14436
81125c00:	11390240 	call	81139024 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
81125c04:	11389340 	call	81138934 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
81125c08:	01204534 	movhi	r4,33044
81125c0c:	21226704 	addi	r4,r4,-30308
81125c10:	11397d80 	call	811397d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
81125c14:	d0a06717 	ldw	r2,-32356(gp)
81125c18:	d0e06817 	ldw	r3,-32352(gp)
81125c1c:	d1206917 	ldw	r4,-32348(gp)
81125c20:	200d883a 	mov	r6,r4
81125c24:	180b883a 	mov	r5,r3
81125c28:	1009883a 	mov	r4,r2
81125c2c:	110ae240 	call	8110ae24 <main>
81125c30:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
81125c34:	01000044 	movi	r4,1
81125c38:	11255b80 	call	811255b8 <close>
  exit (result);
81125c3c:	e13ffb17 	ldw	r4,-20(fp)
81125c40:	11397ec0 	call	811397ec <exit>

81125c44 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81125c44:	defffe04 	addi	sp,sp,-8
81125c48:	de00012e 	bgeu	sp,et,81125c50 <alt_get_errno+0xc>
81125c4c:	003b68fa 	trap	3
81125c50:	dfc00115 	stw	ra,4(sp)
81125c54:	df000015 	stw	fp,0(sp)
81125c58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81125c5c:	d0a01017 	ldw	r2,-32704(gp)
81125c60:	10000326 	beq	r2,zero,81125c70 <alt_get_errno+0x2c>
81125c64:	d0a01017 	ldw	r2,-32704(gp)
81125c68:	103ee83a 	callr	r2
81125c6c:	00000106 	br	81125c74 <alt_get_errno+0x30>
81125c70:	d0a05e04 	addi	r2,gp,-32392
}
81125c74:	e037883a 	mov	sp,fp
81125c78:	dfc00117 	ldw	ra,4(sp)
81125c7c:	df000017 	ldw	fp,0(sp)
81125c80:	dec00204 	addi	sp,sp,8
81125c84:	f800283a 	ret

81125c88 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
81125c88:	defffd04 	addi	sp,sp,-12
81125c8c:	de00012e 	bgeu	sp,et,81125c94 <alt_file_locked+0xc>
81125c90:	003b68fa 	trap	3
81125c94:	df000215 	stw	fp,8(sp)
81125c98:	df000204 	addi	fp,sp,8
81125c9c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
81125ca0:	e0bfff17 	ldw	r2,-4(fp)
81125ca4:	10800217 	ldw	r2,8(r2)
81125ca8:	10d00034 	orhi	r3,r2,16384
81125cac:	e0bfff17 	ldw	r2,-4(fp)
81125cb0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81125cb4:	e03ffe15 	stw	zero,-8(fp)
81125cb8:	00001d06 	br	81125d30 <alt_file_locked+0xa8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81125cbc:	00a04534 	movhi	r2,33044
81125cc0:	10b51504 	addi	r2,r2,-11180
81125cc4:	e0fffe17 	ldw	r3,-8(fp)
81125cc8:	18c00324 	muli	r3,r3,12
81125ccc:	10c5883a 	add	r2,r2,r3
81125cd0:	10c00017 	ldw	r3,0(r2)
81125cd4:	e0bfff17 	ldw	r2,-4(fp)
81125cd8:	10800017 	ldw	r2,0(r2)
81125cdc:	1880111e 	bne	r3,r2,81125d24 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81125ce0:	00a04534 	movhi	r2,33044
81125ce4:	10b51504 	addi	r2,r2,-11180
81125ce8:	e0fffe17 	ldw	r3,-8(fp)
81125cec:	18c00324 	muli	r3,r3,12
81125cf0:	10c5883a 	add	r2,r2,r3
81125cf4:	10800204 	addi	r2,r2,8
81125cf8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
81125cfc:	1000090e 	bge	r2,zero,81125d24 <alt_file_locked+0x9c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
81125d00:	e0bffe17 	ldw	r2,-8(fp)
81125d04:	10c00324 	muli	r3,r2,12
81125d08:	00a04534 	movhi	r2,33044
81125d0c:	10b51504 	addi	r2,r2,-11180
81125d10:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
81125d14:	e0bfff17 	ldw	r2,-4(fp)
81125d18:	18800226 	beq	r3,r2,81125d24 <alt_file_locked+0x9c>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
81125d1c:	00bffcc4 	movi	r2,-13
81125d20:	00000806 	br	81125d44 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
81125d24:	e0bffe17 	ldw	r2,-8(fp)
81125d28:	10800044 	addi	r2,r2,1
81125d2c:	e0bffe15 	stw	r2,-8(fp)
81125d30:	d0a00f17 	ldw	r2,-32708(gp)
81125d34:	1007883a 	mov	r3,r2
81125d38:	e0bffe17 	ldw	r2,-8(fp)
81125d3c:	18bfdf2e 	bgeu	r3,r2,81125cbc <__reset+0xfb105cbc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
81125d40:	0005883a 	mov	r2,zero
}
81125d44:	e037883a 	mov	sp,fp
81125d48:	df000017 	ldw	fp,0(sp)
81125d4c:	dec00104 	addi	sp,sp,4
81125d50:	f800283a 	ret

81125d54 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
81125d54:	defff604 	addi	sp,sp,-40
81125d58:	de00012e 	bgeu	sp,et,81125d60 <open+0xc>
81125d5c:	003b68fa 	trap	3
81125d60:	dfc00915 	stw	ra,36(sp)
81125d64:	df000815 	stw	fp,32(sp)
81125d68:	df000804 	addi	fp,sp,32
81125d6c:	e13ffd15 	stw	r4,-12(fp)
81125d70:	e17ffe15 	stw	r5,-8(fp)
81125d74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
81125d78:	00bfffc4 	movi	r2,-1
81125d7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
81125d80:	00bffb44 	movi	r2,-19
81125d84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
81125d88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
81125d8c:	d1600d04 	addi	r5,gp,-32716
81125d90:	e13ffd17 	ldw	r4,-12(fp)
81125d94:	1138a040 	call	81138a04 <alt_find_dev>
81125d98:	e0bff815 	stw	r2,-32(fp)
81125d9c:	e0bff817 	ldw	r2,-32(fp)
81125da0:	1000051e 	bne	r2,zero,81125db8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
81125da4:	e13ffd17 	ldw	r4,-12(fp)
81125da8:	1138a9c0 	call	81138a9c <alt_find_file>
81125dac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
81125db0:	00800044 	movi	r2,1
81125db4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
81125db8:	e0bff817 	ldw	r2,-32(fp)
81125dbc:	10002926 	beq	r2,zero,81125e64 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
81125dc0:	e13ff817 	ldw	r4,-32(fp)
81125dc4:	1138bac0 	call	81138bac <alt_get_fd>
81125dc8:	e0bff915 	stw	r2,-28(fp)
81125dcc:	e0bff917 	ldw	r2,-28(fp)
81125dd0:	1000030e 	bge	r2,zero,81125de0 <open+0x8c>
    {
      status = index;
81125dd4:	e0bff917 	ldw	r2,-28(fp)
81125dd8:	e0bffa15 	stw	r2,-24(fp)
81125ddc:	00002306 	br	81125e6c <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
81125de0:	e0bff917 	ldw	r2,-28(fp)
81125de4:	10c00324 	muli	r3,r2,12
81125de8:	00a04534 	movhi	r2,33044
81125dec:	10b51504 	addi	r2,r2,-11180
81125df0:	1885883a 	add	r2,r3,r2
81125df4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
81125df8:	e0fffe17 	ldw	r3,-8(fp)
81125dfc:	00900034 	movhi	r2,16384
81125e00:	10bfffc4 	addi	r2,r2,-1
81125e04:	1886703a 	and	r3,r3,r2
81125e08:	e0bffc17 	ldw	r2,-16(fp)
81125e0c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
81125e10:	e0bffb17 	ldw	r2,-20(fp)
81125e14:	1000051e 	bne	r2,zero,81125e2c <open+0xd8>
81125e18:	e13ffc17 	ldw	r4,-16(fp)
81125e1c:	1125c880 	call	81125c88 <alt_file_locked>
81125e20:	e0bffa15 	stw	r2,-24(fp)
81125e24:	e0bffa17 	ldw	r2,-24(fp)
81125e28:	10001016 	blt	r2,zero,81125e6c <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
81125e2c:	e0bff817 	ldw	r2,-32(fp)
81125e30:	10800317 	ldw	r2,12(r2)
81125e34:	10000826 	beq	r2,zero,81125e58 <open+0x104>
81125e38:	e0bff817 	ldw	r2,-32(fp)
81125e3c:	10800317 	ldw	r2,12(r2)
81125e40:	e1ffff17 	ldw	r7,-4(fp)
81125e44:	e1bffe17 	ldw	r6,-8(fp)
81125e48:	e17ffd17 	ldw	r5,-12(fp)
81125e4c:	e13ffc17 	ldw	r4,-16(fp)
81125e50:	103ee83a 	callr	r2
81125e54:	00000106 	br	81125e5c <open+0x108>
81125e58:	0005883a 	mov	r2,zero
81125e5c:	e0bffa15 	stw	r2,-24(fp)
81125e60:	00000206 	br	81125e6c <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
81125e64:	00bffb44 	movi	r2,-19
81125e68:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
81125e6c:	e0bffa17 	ldw	r2,-24(fp)
81125e70:	1000090e 	bge	r2,zero,81125e98 <open+0x144>
  {
    alt_release_fd (index);  
81125e74:	e13ff917 	ldw	r4,-28(fp)
81125e78:	1125ff80 	call	81125ff8 <alt_release_fd>
    ALT_ERRNO = -status;
81125e7c:	1125c440 	call	81125c44 <alt_get_errno>
81125e80:	1007883a 	mov	r3,r2
81125e84:	e0bffa17 	ldw	r2,-24(fp)
81125e88:	0085c83a 	sub	r2,zero,r2
81125e8c:	18800015 	stw	r2,0(r3)
    return -1;
81125e90:	00bfffc4 	movi	r2,-1
81125e94:	00000106 	br	81125e9c <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
81125e98:	e0bff917 	ldw	r2,-28(fp)
}
81125e9c:	e037883a 	mov	sp,fp
81125ea0:	dfc00117 	ldw	ra,4(sp)
81125ea4:	df000017 	ldw	fp,0(sp)
81125ea8:	dec00204 	addi	sp,sp,8
81125eac:	f800283a 	ret

81125eb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81125eb0:	defffe04 	addi	sp,sp,-8
81125eb4:	de00012e 	bgeu	sp,et,81125ebc <alt_get_errno+0xc>
81125eb8:	003b68fa 	trap	3
81125ebc:	dfc00115 	stw	ra,4(sp)
81125ec0:	df000015 	stw	fp,0(sp)
81125ec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81125ec8:	d0a01017 	ldw	r2,-32704(gp)
81125ecc:	10000326 	beq	r2,zero,81125edc <alt_get_errno+0x2c>
81125ed0:	d0a01017 	ldw	r2,-32704(gp)
81125ed4:	103ee83a 	callr	r2
81125ed8:	00000106 	br	81125ee0 <alt_get_errno+0x30>
81125edc:	d0a05e04 	addi	r2,gp,-32392
}
81125ee0:	e037883a 	mov	sp,fp
81125ee4:	dfc00117 	ldw	ra,4(sp)
81125ee8:	df000017 	ldw	fp,0(sp)
81125eec:	dec00204 	addi	sp,sp,8
81125ef0:	f800283a 	ret

81125ef4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
81125ef4:	defff904 	addi	sp,sp,-28
81125ef8:	de00012e 	bgeu	sp,et,81125f00 <read+0xc>
81125efc:	003b68fa 	trap	3
81125f00:	dfc00615 	stw	ra,24(sp)
81125f04:	df000515 	stw	fp,20(sp)
81125f08:	df000504 	addi	fp,sp,20
81125f0c:	e13ffd15 	stw	r4,-12(fp)
81125f10:	e17ffe15 	stw	r5,-8(fp)
81125f14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
81125f18:	e0bffd17 	ldw	r2,-12(fp)
81125f1c:	10000616 	blt	r2,zero,81125f38 <read+0x44>
81125f20:	e0bffd17 	ldw	r2,-12(fp)
81125f24:	10c00324 	muli	r3,r2,12
81125f28:	00a04534 	movhi	r2,33044
81125f2c:	10b51504 	addi	r2,r2,-11180
81125f30:	1885883a 	add	r2,r3,r2
81125f34:	00000106 	br	81125f3c <read+0x48>
81125f38:	0005883a 	mov	r2,zero
81125f3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
81125f40:	e0bffb17 	ldw	r2,-20(fp)
81125f44:	10002226 	beq	r2,zero,81125fd0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81125f48:	e0bffb17 	ldw	r2,-20(fp)
81125f4c:	10800217 	ldw	r2,8(r2)
81125f50:	108000cc 	andi	r2,r2,3
81125f54:	10800060 	cmpeqi	r2,r2,1
81125f58:	1000181e 	bne	r2,zero,81125fbc <read+0xc8>
        (fd->dev->read))
81125f5c:	e0bffb17 	ldw	r2,-20(fp)
81125f60:	10800017 	ldw	r2,0(r2)
81125f64:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
81125f68:	10001426 	beq	r2,zero,81125fbc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
81125f6c:	e0bffb17 	ldw	r2,-20(fp)
81125f70:	10800017 	ldw	r2,0(r2)
81125f74:	10800517 	ldw	r2,20(r2)
81125f78:	e0ffff17 	ldw	r3,-4(fp)
81125f7c:	180d883a 	mov	r6,r3
81125f80:	e17ffe17 	ldw	r5,-8(fp)
81125f84:	e13ffb17 	ldw	r4,-20(fp)
81125f88:	103ee83a 	callr	r2
81125f8c:	e0bffc15 	stw	r2,-16(fp)
81125f90:	e0bffc17 	ldw	r2,-16(fp)
81125f94:	1000070e 	bge	r2,zero,81125fb4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
81125f98:	1125eb00 	call	81125eb0 <alt_get_errno>
81125f9c:	1007883a 	mov	r3,r2
81125fa0:	e0bffc17 	ldw	r2,-16(fp)
81125fa4:	0085c83a 	sub	r2,zero,r2
81125fa8:	18800015 	stw	r2,0(r3)
          return -1;
81125fac:	00bfffc4 	movi	r2,-1
81125fb0:	00000c06 	br	81125fe4 <read+0xf0>
        }
        return rval;
81125fb4:	e0bffc17 	ldw	r2,-16(fp)
81125fb8:	00000a06 	br	81125fe4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
81125fbc:	1125eb00 	call	81125eb0 <alt_get_errno>
81125fc0:	1007883a 	mov	r3,r2
81125fc4:	00800344 	movi	r2,13
81125fc8:	18800015 	stw	r2,0(r3)
81125fcc:	00000406 	br	81125fe0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
81125fd0:	1125eb00 	call	81125eb0 <alt_get_errno>
81125fd4:	1007883a 	mov	r3,r2
81125fd8:	00801444 	movi	r2,81
81125fdc:	18800015 	stw	r2,0(r3)
  }
  return -1;
81125fe0:	00bfffc4 	movi	r2,-1
}
81125fe4:	e037883a 	mov	sp,fp
81125fe8:	dfc00117 	ldw	ra,4(sp)
81125fec:	df000017 	ldw	fp,0(sp)
81125ff0:	dec00204 	addi	sp,sp,8
81125ff4:	f800283a 	ret

81125ff8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
81125ff8:	defffe04 	addi	sp,sp,-8
81125ffc:	de00012e 	bgeu	sp,et,81126004 <alt_release_fd+0xc>
81126000:	003b68fa 	trap	3
81126004:	df000115 	stw	fp,4(sp)
81126008:	df000104 	addi	fp,sp,4
8112600c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
81126010:	e0bfff17 	ldw	r2,-4(fp)
81126014:	108000d0 	cmplti	r2,r2,3
81126018:	10000d1e 	bne	r2,zero,81126050 <alt_release_fd+0x58>
  {
    alt_fd_list[fd].fd_flags = 0;
8112601c:	00a04534 	movhi	r2,33044
81126020:	10b51504 	addi	r2,r2,-11180
81126024:	e0ffff17 	ldw	r3,-4(fp)
81126028:	18c00324 	muli	r3,r3,12
8112602c:	10c5883a 	add	r2,r2,r3
81126030:	10800204 	addi	r2,r2,8
81126034:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
81126038:	00a04534 	movhi	r2,33044
8112603c:	10b51504 	addi	r2,r2,-11180
81126040:	e0ffff17 	ldw	r3,-4(fp)
81126044:	18c00324 	muli	r3,r3,12
81126048:	10c5883a 	add	r2,r2,r3
8112604c:	10000015 	stw	zero,0(r2)
  }
}
81126050:	0001883a 	nop
81126054:	e037883a 	mov	sp,fp
81126058:	df000017 	ldw	fp,0(sp)
8112605c:	dec00104 	addi	sp,sp,4
81126060:	f800283a 	ret

81126064 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
81126064:	defff604 	addi	sp,sp,-40
81126068:	de00012e 	bgeu	sp,et,81126070 <sbrk+0xc>
8112606c:	003b68fa 	trap	3
81126070:	df000915 	stw	fp,36(sp)
81126074:	df000904 	addi	fp,sp,36
81126078:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112607c:	0005303a 	rdctl	r2,status
81126080:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126084:	e0fffe17 	ldw	r3,-8(fp)
81126088:	00bfff84 	movi	r2,-2
8112608c:	1884703a 	and	r2,r3,r2
81126090:	1001703a 	wrctl	status,r2
  
  return context;
81126094:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
81126098:	e0bff815 	stw	r2,-32(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
8112609c:	d0a01217 	ldw	r2,-32696(gp)
811260a0:	10c000c4 	addi	r3,r2,3
811260a4:	00bfff04 	movi	r2,-4
811260a8:	1884703a 	and	r2,r3,r2
811260ac:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
811260b0:	d0e01217 	ldw	r3,-32696(gp)
811260b4:	e0bfff17 	ldw	r2,-4(fp)
811260b8:	1887883a 	add	r3,r3,r2
811260bc:	00a04834 	movhi	r2,33056
811260c0:	10a80004 	addi	r2,r2,-24576
811260c4:	10c0062e 	bgeu	r2,r3,811260e0 <sbrk+0x7c>
811260c8:	e0bff817 	ldw	r2,-32(fp)
811260cc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811260d0:	e0bff717 	ldw	r2,-36(fp)
811260d4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
811260d8:	00bfffc4 	movi	r2,-1
811260dc:	00001c06 	br	81126150 <sbrk+0xec>
  }
#endif

  prev_heap_end = heap_end; 
811260e0:	d0a01217 	ldw	r2,-32696(gp)
811260e4:	e0bffa15 	stw	r2,-24(fp)
  heap_end += incr; 
811260e8:	d0e01217 	ldw	r3,-32696(gp)
811260ec:	e0bfff17 	ldw	r2,-4(fp)
811260f0:	1885883a 	add	r2,r3,r2
811260f4:	d0a01215 	stw	r2,-32696(gp)
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_limit (void)
{
  char * limit;
  NIOS2_READ_ET(limit);
811260f8:	c005883a 	mov	r2,et
811260fc:	e0bff915 	stw	r2,-28(fp)

  return limit; 
81126100:	e0fff917 	ldw	r3,-28(fp)
   * pointer overflow. 
   * If the stack limit isn't pointing at the top of the heap then the code
   * is using a different stack so none of this needs to be done.
   */

  if (alt_stack_limit() == prev_heap_end)
81126104:	e0bffa17 	ldw	r2,-24(fp)
81126108:	18800c1e 	bne	r3,r2,8112613c <sbrk+0xd8>
 */

static ALT_INLINE char * ALT_ALWAYS_INLINE alt_stack_pointer (void)
{
  char * pointer;
  NIOS2_READ_SP(pointer);
8112610c:	d805883a 	mov	r2,sp
81126110:	e0bffb15 	stw	r2,-20(fp)

  return pointer; 
81126114:	e0bffb17 	ldw	r2,-20(fp)
  {
    if (alt_stack_pointer() <= heap_end)
81126118:	d0e01217 	ldw	r3,-32696(gp)
8112611c:	18800136 	bltu	r3,r2,81126124 <sbrk+0xc0>
 * alt_report_stack_overflow reports that a stack overflow happened.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_report_stack_overflow (void)
{
  NIOS2_REPORT_STACK_OVERFLOW();
81126120:	003da0fa 	break	3
      alt_report_stack_overflow();

    alt_set_stack_limit(heap_end);
81126124:	d0a01217 	ldw	r2,-32696(gp)
81126128:	e0bffc15 	stw	r2,-16(fp)
 * limit register.
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_set_stack_limit (char * limit)
{
  alt_stack_limit_value = limit;
8112612c:	e0bffc17 	ldw	r2,-16(fp)
81126130:	d0a00015 	stw	r2,-32768(gp)
  NIOS2_WRITE_ET(limit);
81126134:	e0bffc17 	ldw	r2,-16(fp)
81126138:	1031883a 	mov	et,r2
8112613c:	e0bff817 	ldw	r2,-32(fp)
81126140:	e0bffd15 	stw	r2,-12(fp)
81126144:	e0bffd17 	ldw	r2,-12(fp)
81126148:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
8112614c:	e0bffa17 	ldw	r2,-24(fp)
} 
81126150:	e037883a 	mov	sp,fp
81126154:	df000017 	ldw	fp,0(sp)
81126158:	dec00104 	addi	sp,sp,4
8112615c:	f800283a 	ret

81126160 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
81126160:	defffa04 	addi	sp,sp,-24
81126164:	de00012e 	bgeu	sp,et,8112616c <alt_alarm_stop+0xc>
81126168:	003b68fa 	trap	3
8112616c:	df000515 	stw	fp,20(sp)
81126170:	df000504 	addi	fp,sp,20
81126174:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126178:	0005303a 	rdctl	r2,status
8112617c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126180:	e0fffc17 	ldw	r3,-16(fp)
81126184:	00bfff84 	movi	r2,-2
81126188:	1884703a 	and	r2,r3,r2
8112618c:	1001703a 	wrctl	status,r2
  
  return context;
81126190:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
81126194:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
81126198:	e0bfff17 	ldw	r2,-4(fp)
8112619c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
811261a0:	e0bffd17 	ldw	r2,-12(fp)
811261a4:	10800017 	ldw	r2,0(r2)
811261a8:	e0fffd17 	ldw	r3,-12(fp)
811261ac:	18c00117 	ldw	r3,4(r3)
811261b0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
811261b4:	e0bffd17 	ldw	r2,-12(fp)
811261b8:	10800117 	ldw	r2,4(r2)
811261bc:	e0fffd17 	ldw	r3,-12(fp)
811261c0:	18c00017 	ldw	r3,0(r3)
811261c4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
811261c8:	e0bffd17 	ldw	r2,-12(fp)
811261cc:	e0fffd17 	ldw	r3,-12(fp)
811261d0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
811261d4:	e0bffd17 	ldw	r2,-12(fp)
811261d8:	e0fffd17 	ldw	r3,-12(fp)
811261dc:	10c00015 	stw	r3,0(r2)
811261e0:	e0bffb17 	ldw	r2,-20(fp)
811261e4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811261e8:	e0bffe17 	ldw	r2,-8(fp)
811261ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
811261f0:	0001883a 	nop
811261f4:	e037883a 	mov	sp,fp
811261f8:	df000017 	ldw	fp,0(sp)
811261fc:	dec00104 	addi	sp,sp,4
81126200:	f800283a 	ret

81126204 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
81126204:	defffb04 	addi	sp,sp,-20
81126208:	de00012e 	bgeu	sp,et,81126210 <alt_tick+0xc>
8112620c:	003b68fa 	trap	3
81126210:	dfc00415 	stw	ra,16(sp)
81126214:	df000315 	stw	fp,12(sp)
81126218:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
8112621c:	d0a01317 	ldw	r2,-32692(gp)
81126220:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
81126224:	d0a06b17 	ldw	r2,-32340(gp)
81126228:	10800044 	addi	r2,r2,1
8112622c:	d0a06b15 	stw	r2,-32340(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
81126230:	00002e06 	br	811262ec <alt_tick+0xe8>
  {
    next = (alt_alarm*) alarm->llist.next;
81126234:	e0bffd17 	ldw	r2,-12(fp)
81126238:	10800017 	ldw	r2,0(r2)
8112623c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
81126240:	e0bffd17 	ldw	r2,-12(fp)
81126244:	10800403 	ldbu	r2,16(r2)
81126248:	10803fcc 	andi	r2,r2,255
8112624c:	10000426 	beq	r2,zero,81126260 <alt_tick+0x5c>
81126250:	d0a06b17 	ldw	r2,-32340(gp)
81126254:	1000021e 	bne	r2,zero,81126260 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
81126258:	e0bffd17 	ldw	r2,-12(fp)
8112625c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
81126260:	e0bffd17 	ldw	r2,-12(fp)
81126264:	10800217 	ldw	r2,8(r2)
81126268:	d0e06b17 	ldw	r3,-32340(gp)
8112626c:	18801d36 	bltu	r3,r2,811262e4 <alt_tick+0xe0>
81126270:	e0bffd17 	ldw	r2,-12(fp)
81126274:	10800403 	ldbu	r2,16(r2)
81126278:	10803fcc 	andi	r2,r2,255
8112627c:	1000191e 	bne	r2,zero,811262e4 <alt_tick+0xe0>
    {
      next_callback = alarm->callback (alarm->context);
81126280:	e0bffd17 	ldw	r2,-12(fp)
81126284:	10800317 	ldw	r2,12(r2)
81126288:	e0fffd17 	ldw	r3,-12(fp)
8112628c:	18c00517 	ldw	r3,20(r3)
81126290:	1809883a 	mov	r4,r3
81126294:	103ee83a 	callr	r2
81126298:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
8112629c:	e0bfff17 	ldw	r2,-4(fp)
811262a0:	1000031e 	bne	r2,zero,811262b0 <alt_tick+0xac>
      {
        alt_alarm_stop (alarm);
811262a4:	e13ffd17 	ldw	r4,-12(fp)
811262a8:	11261600 	call	81126160 <alt_alarm_stop>
811262ac:	00000d06 	br	811262e4 <alt_tick+0xe0>
      }
      else
      {
        alarm->time += next_callback;
811262b0:	e0bffd17 	ldw	r2,-12(fp)
811262b4:	10c00217 	ldw	r3,8(r2)
811262b8:	e0bfff17 	ldw	r2,-4(fp)
811262bc:	1887883a 	add	r3,r3,r2
811262c0:	e0bffd17 	ldw	r2,-12(fp)
811262c4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
811262c8:	e0bffd17 	ldw	r2,-12(fp)
811262cc:	10c00217 	ldw	r3,8(r2)
811262d0:	d0a06b17 	ldw	r2,-32340(gp)
811262d4:	1880032e 	bgeu	r3,r2,811262e4 <alt_tick+0xe0>
        {
          alarm->rollover = 1;
811262d8:	e0bffd17 	ldw	r2,-12(fp)
811262dc:	00c00044 	movi	r3,1
811262e0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
811262e4:	e0bffe17 	ldw	r2,-8(fp)
811262e8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
811262ec:	e0fffd17 	ldw	r3,-12(fp)
811262f0:	d0a01304 	addi	r2,gp,-32692
811262f4:	18bfcf1e 	bne	r3,r2,81126234 <__reset+0xfb106234>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
811262f8:	11275ac0 	call	811275ac <OSTimeTick>
}
811262fc:	0001883a 	nop
81126300:	e037883a 	mov	sp,fp
81126304:	dfc00117 	ldw	ra,4(sp)
81126308:	df000017 	ldw	fp,0(sp)
8112630c:	dec00204 	addi	sp,sp,8
81126310:	f800283a 	ret

81126314 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
81126314:	defffb04 	addi	sp,sp,-20
81126318:	de00012e 	bgeu	sp,et,81126320 <usleep+0xc>
8112631c:	003b68fa 	trap	3
81126320:	dfc00415 	stw	ra,16(sp)
81126324:	df000315 	stw	fp,12(sp)
81126328:	df000304 	addi	fp,sp,12
8112632c:	e13fff15 	stw	r4,-4(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
81126330:	d0a07303 	ldbu	r2,-32308(gp)
81126334:	10803fcc 	andi	r2,r2,255
81126338:	1000031e 	bne	r2,zero,81126348 <usleep+0x34>
  {
    return alt_busy_sleep (us);
8112633c:	e13fff17 	ldw	r4,-4(fp)
81126340:	11254440 	call	81125444 <alt_busy_sleep>
81126344:	00003d06 	br	8112643c <usleep+0x128>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81126348:	d0a06a17 	ldw	r2,-32344(gp)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
8112634c:	e0bffe15 	stw	r2,-8(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
81126350:	e0ffff17 	ldw	r3,-4(fp)
81126354:	0090c734 	movhi	r2,17180
81126358:	10b7a0c4 	addi	r2,r2,-8573
8112635c:	1888383a 	mulxuu	r4,r3,r2
81126360:	1885383a 	mul	r2,r3,r2
81126364:	1013883a 	mov	r9,r2
81126368:	2015883a 	mov	r10,r4
8112636c:	5006d4ba 	srli	r3,r10,18
81126370:	e0bffe17 	ldw	r2,-8(fp)
81126374:	1893383a 	mul	r9,r3,r2
81126378:	e0ffff17 	ldw	r3,-4(fp)
8112637c:	0090c734 	movhi	r2,17180
81126380:	10b7a0c4 	addi	r2,r2,-8573
81126384:	1888383a 	mulxuu	r4,r3,r2
81126388:	1885383a 	mul	r2,r3,r2
8112638c:	100f883a 	mov	r7,r2
81126390:	2011883a 	mov	r8,r4
81126394:	4004d4ba 	srli	r2,r8,18
81126398:	010003f4 	movhi	r4,15
8112639c:	21109004 	addi	r4,r4,16960
811263a0:	1105383a 	mul	r2,r2,r4
811263a4:	1885c83a 	sub	r2,r3,r2
811263a8:	e0fffe17 	ldw	r3,-8(fp)
811263ac:	10c7383a 	mul	r3,r2,r3
811263b0:	0090c734 	movhi	r2,17180
811263b4:	10b7a0c4 	addi	r2,r2,-8573
811263b8:	1888383a 	mulxuu	r4,r3,r2
811263bc:	1885383a 	mul	r2,r3,r2
811263c0:	100b883a 	mov	r5,r2
811263c4:	200d883a 	mov	r6,r4
811263c8:	3004d4ba 	srli	r2,r6,18
811263cc:	4885883a 	add	r2,r9,r2
811263d0:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811263d4:	00000706 	br	811263f4 <usleep+0xe0>
  {
    OSTimeDly(0xffff);
811263d8:	013fffd4 	movui	r4,65535
811263dc:	112f01c0 	call	8112f01c <OSTimeDly>
    ticks -= 0xffff;
811263e0:	e0fffd17 	ldw	r3,-12(fp)
811263e4:	00bffff4 	movhi	r2,65535
811263e8:	10800044 	addi	r2,r2,1
811263ec:	1885883a 	add	r2,r3,r2
811263f0:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
811263f4:	e0bffd17 	ldw	r2,-12(fp)
811263f8:	00ffffd4 	movui	r3,65535
811263fc:	18bff636 	bltu	r3,r2,811263d8 <__reset+0xfb1063d8>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
81126400:	e0bffd17 	ldw	r2,-12(fp)
81126404:	10bfffcc 	andi	r2,r2,65535
81126408:	1009883a 	mov	r4,r2
8112640c:	112f01c0 	call	8112f01c <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
81126410:	008003f4 	movhi	r2,15
81126414:	10909004 	addi	r2,r2,16960
81126418:	e0fffe17 	ldw	r3,-8(fp)
8112641c:	10c7203a 	divu	r3,r2,r3
81126420:	e0bfff17 	ldw	r2,-4(fp)
81126424:	10c9203a 	divu	r4,r2,r3
81126428:	20c7383a 	mul	r3,r4,r3
8112642c:	10c5c83a 	sub	r2,r2,r3
81126430:	1009883a 	mov	r4,r2
81126434:	11254440 	call	81125444 <alt_busy_sleep>

  return 0;  
81126438:	0005883a 	mov	r2,zero
}
8112643c:	e037883a 	mov	sp,fp
81126440:	dfc00117 	ldw	ra,4(sp)
81126444:	df000017 	ldw	fp,0(sp)
81126448:	dec00204 	addi	sp,sp,8
8112644c:	f800283a 	ret

81126450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81126450:	defffe04 	addi	sp,sp,-8
81126454:	de00012e 	bgeu	sp,et,8112645c <alt_get_errno+0xc>
81126458:	003b68fa 	trap	3
8112645c:	dfc00115 	stw	ra,4(sp)
81126460:	df000015 	stw	fp,0(sp)
81126464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81126468:	d0a01017 	ldw	r2,-32704(gp)
8112646c:	10000326 	beq	r2,zero,8112647c <alt_get_errno+0x2c>
81126470:	d0a01017 	ldw	r2,-32704(gp)
81126474:	103ee83a 	callr	r2
81126478:	00000106 	br	81126480 <alt_get_errno+0x30>
8112647c:	d0a05e04 	addi	r2,gp,-32392
}
81126480:	e037883a 	mov	sp,fp
81126484:	dfc00117 	ldw	ra,4(sp)
81126488:	df000017 	ldw	fp,0(sp)
8112648c:	dec00204 	addi	sp,sp,8
81126490:	f800283a 	ret

81126494 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
81126494:	defff904 	addi	sp,sp,-28
81126498:	de00012e 	bgeu	sp,et,811264a0 <write+0xc>
8112649c:	003b68fa 	trap	3
811264a0:	dfc00615 	stw	ra,24(sp)
811264a4:	df000515 	stw	fp,20(sp)
811264a8:	df000504 	addi	fp,sp,20
811264ac:	e13ffd15 	stw	r4,-12(fp)
811264b0:	e17ffe15 	stw	r5,-8(fp)
811264b4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
811264b8:	e0bffd17 	ldw	r2,-12(fp)
811264bc:	10000616 	blt	r2,zero,811264d8 <write+0x44>
811264c0:	e0bffd17 	ldw	r2,-12(fp)
811264c4:	10c00324 	muli	r3,r2,12
811264c8:	00a04534 	movhi	r2,33044
811264cc:	10b51504 	addi	r2,r2,-11180
811264d0:	1885883a 	add	r2,r3,r2
811264d4:	00000106 	br	811264dc <write+0x48>
811264d8:	0005883a 	mov	r2,zero
811264dc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
811264e0:	e0bffb17 	ldw	r2,-20(fp)
811264e4:	10002126 	beq	r2,zero,8112656c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
811264e8:	e0bffb17 	ldw	r2,-20(fp)
811264ec:	10800217 	ldw	r2,8(r2)
811264f0:	108000cc 	andi	r2,r2,3
811264f4:	10001826 	beq	r2,zero,81126558 <write+0xc4>
811264f8:	e0bffb17 	ldw	r2,-20(fp)
811264fc:	10800017 	ldw	r2,0(r2)
81126500:	10800617 	ldw	r2,24(r2)
81126504:	10001426 	beq	r2,zero,81126558 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
81126508:	e0bffb17 	ldw	r2,-20(fp)
8112650c:	10800017 	ldw	r2,0(r2)
81126510:	10800617 	ldw	r2,24(r2)
81126514:	e0ffff17 	ldw	r3,-4(fp)
81126518:	180d883a 	mov	r6,r3
8112651c:	e17ffe17 	ldw	r5,-8(fp)
81126520:	e13ffb17 	ldw	r4,-20(fp)
81126524:	103ee83a 	callr	r2
81126528:	e0bffc15 	stw	r2,-16(fp)
8112652c:	e0bffc17 	ldw	r2,-16(fp)
81126530:	1000070e 	bge	r2,zero,81126550 <write+0xbc>
      {
        ALT_ERRNO = -rval;
81126534:	11264500 	call	81126450 <alt_get_errno>
81126538:	1007883a 	mov	r3,r2
8112653c:	e0bffc17 	ldw	r2,-16(fp)
81126540:	0085c83a 	sub	r2,zero,r2
81126544:	18800015 	stw	r2,0(r3)
        return -1;
81126548:	00bfffc4 	movi	r2,-1
8112654c:	00000c06 	br	81126580 <write+0xec>
      }
      return rval;
81126550:	e0bffc17 	ldw	r2,-16(fp)
81126554:	00000a06 	br	81126580 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
81126558:	11264500 	call	81126450 <alt_get_errno>
8112655c:	1007883a 	mov	r3,r2
81126560:	00800344 	movi	r2,13
81126564:	18800015 	stw	r2,0(r3)
81126568:	00000406 	br	8112657c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
8112656c:	11264500 	call	81126450 <alt_get_errno>
81126570:	1007883a 	mov	r3,r2
81126574:	00801444 	movi	r2,81
81126578:	18800015 	stw	r2,0(r3)
  }
  return -1;
8112657c:	00bfffc4 	movi	r2,-1
}
81126580:	e037883a 	mov	sp,fp
81126584:	dfc00117 	ldw	ra,4(sp)
81126588:	df000017 	ldw	fp,0(sp)
8112658c:	dec00204 	addi	sp,sp,8
81126590:	f800283a 	ret

81126594 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
81126594:	deffde04 	addi	sp,sp,-136
81126598:	de00012e 	bgeu	sp,et,811265a0 <__env_lock+0xc>
8112659c:	003b68fa 	trap	3
811265a0:	dfc02115 	stw	ra,132(sp)
811265a4:	df002015 	stw	fp,128(sp)
811265a8:	df002004 	addi	fp,sp,128
811265ac:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811265b0:	e0bfe104 	addi	r2,fp,-124
811265b4:	100b883a 	mov	r5,r2
811265b8:	01003fc4 	movi	r4,255
811265bc:	112ee780 	call	8112ee78 <OSTaskQuery>
811265c0:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
811265c4:	e0bffe83 	ldbu	r2,-6(fp)
811265c8:	10803fcc 	andi	r2,r2,255
811265cc:	10001e1e 	bne	r2,zero,81126648 <__env_lock+0xb4>
    return;

  id = tcb.OSTCBPrio;
811265d0:	e0bfed83 	ldbu	r2,-74(fp)
811265d4:	10803fcc 	andi	r2,r2,255
811265d8:	e0bfe015 	stw	r2,-128(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
811265dc:	d0a06d17 	ldw	r2,-32332(gp)
811265e0:	e0fffc04 	addi	r3,fp,-16
811265e4:	180b883a 	mov	r5,r3
811265e8:	1009883a 	mov	r4,r2
811265ec:	112d6300 	call	8112d630 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
811265f0:	e0bffe03 	ldbu	r2,-8(fp)
811265f4:	10803fcc 	andi	r2,r2,255
811265f8:	10000726 	beq	r2,zero,81126618 <__env_lock+0x84>
811265fc:	d0a01517 	ldw	r2,-32684(gp)
81126600:	e0ffe017 	ldw	r3,-128(fp)
81126604:	1880041e 	bne	r3,r2,81126618 <__env_lock+0x84>
  {
    /* we do; just count the recursion */

    locks++;
81126608:	d0a06c17 	ldw	r2,-32336(gp)
8112660c:	10800044 	addi	r2,r2,1
81126610:	d0a06c15 	stw	r2,-32336(gp)
81126614:	00000a06 	br	81126640 <__env_lock+0xac>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
81126618:	d0a06d17 	ldw	r2,-32332(gp)
8112661c:	e0fffe84 	addi	r3,fp,-6
81126620:	180d883a 	mov	r6,r3
81126624:	000b883a 	mov	r5,zero
81126628:	1009883a 	mov	r4,r2
8112662c:	112d1900 	call	8112d190 <OSSemPend>
    locks  = 1;
81126630:	00800044 	movi	r2,1
81126634:	d0a06c15 	stw	r2,-32336(gp)
    lockid = id;
81126638:	e0bfe017 	ldw	r2,-128(fp)
8112663c:	d0a01515 	stw	r2,-32684(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
81126640:	0001883a 	nop
81126644:	00000106 	br	8112664c <__env_lock+0xb8>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
81126648:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
8112664c:	e037883a 	mov	sp,fp
81126650:	dfc00117 	ldw	ra,4(sp)
81126654:	df000017 	ldw	fp,0(sp)
81126658:	dec00204 	addi	sp,sp,8
8112665c:	f800283a 	ret

81126660 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
81126660:	defffd04 	addi	sp,sp,-12
81126664:	de00012e 	bgeu	sp,et,8112666c <__env_unlock+0xc>
81126668:	003b68fa 	trap	3
8112666c:	dfc00215 	stw	ra,8(sp)
81126670:	df000115 	stw	fp,4(sp)
81126674:	df000104 	addi	fp,sp,4
81126678:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
8112667c:	d0a06c17 	ldw	r2,-32336(gp)
81126680:	10000b26 	beq	r2,zero,811266b0 <__env_unlock+0x50>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
81126684:	d0a06c17 	ldw	r2,-32336(gp)
81126688:	10bfffc4 	addi	r2,r2,-1
8112668c:	d0a06c15 	stw	r2,-32336(gp)
81126690:	d0a06c17 	ldw	r2,-32336(gp)
81126694:	1000071e 	bne	r2,zero,811266b4 <__env_unlock+0x54>
  {
    lockid = -1;
81126698:	00bfffc4 	movi	r2,-1
8112669c:	d0a01515 	stw	r2,-32684(gp)
    OSSemPost( alt_envsem );
811266a0:	d0a06d17 	ldw	r2,-32332(gp)
811266a4:	1009883a 	mov	r4,r2
811266a8:	112d5180 	call	8112d518 <OSSemPost>
811266ac:	00000106 	br	811266b4 <__env_unlock+0x54>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
811266b0:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811266b4:	e037883a 	mov	sp,fp
811266b8:	dfc00117 	ldw	ra,4(sp)
811266bc:	df000017 	ldw	fp,0(sp)
811266c0:	dec00204 	addi	sp,sp,8
811266c4:	f800283a 	ret

811266c8 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
811266c8:	deffda04 	addi	sp,sp,-152
811266cc:	de00012e 	bgeu	sp,et,811266d4 <__malloc_lock+0xc>
811266d0:	003b68fa 	trap	3
811266d4:	dfc02515 	stw	ra,148(sp)
811266d8:	df002415 	stw	fp,144(sp)
811266dc:	df002404 	addi	fp,sp,144
811266e0:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811266e4:	e03fdc15 	stw	zero,-144(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
811266e8:	d0a07303 	ldbu	r2,-32308(gp)
811266ec:	10803fcc 	andi	r2,r2,255
811266f0:	10800060 	cmpeqi	r2,r2,1
811266f4:	10003626 	beq	r2,zero,811267d0 <__malloc_lock+0x108>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
811266f8:	e0bfe104 	addi	r2,fp,-124
811266fc:	100b883a 	mov	r5,r2
81126700:	01003fc4 	movi	r4,255
81126704:	112ee780 	call	8112ee78 <OSTaskQuery>
81126708:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
8112670c:	e0bffe83 	ldbu	r2,-6(fp)
81126710:	10803fcc 	andi	r2,r2,255
81126714:	1000301e 	bne	r2,zero,811267d8 <__malloc_lock+0x110>
    return;

  id = tcb.OSTCBPrio;
81126718:	e0bfed83 	ldbu	r2,-74(fp)
8112671c:	10803fcc 	andi	r2,r2,255
81126720:	e0bfdd15 	stw	r2,-140(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
81126724:	d0a06f17 	ldw	r2,-32324(gp)
81126728:	e0fffc04 	addi	r3,fp,-16
8112672c:	180b883a 	mov	r5,r3
81126730:	1009883a 	mov	r4,r2
81126734:	112d6300 	call	8112d630 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126738:	0005303a 	rdctl	r2,status
8112673c:	e0bfe015 	stw	r2,-128(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126740:	e0ffe017 	ldw	r3,-128(fp)
81126744:	00bfff84 	movi	r2,-2
81126748:	1884703a 	and	r2,r3,r2
8112674c:	1001703a 	wrctl	status,r2
  
  return context;
81126750:	e0bfe017 	ldw	r2,-128(fp)
  
  OS_ENTER_CRITICAL();
81126754:	e0bfdc15 	stw	r2,-144(fp)

  if( !semdata.OSCnt && id == lockid ) 
81126758:	e0bffc0b 	ldhu	r2,-16(fp)
8112675c:	10bfffcc 	andi	r2,r2,65535
81126760:	10000b1e 	bne	r2,zero,81126790 <__malloc_lock+0xc8>
81126764:	d0a01617 	ldw	r2,-32680(gp)
81126768:	e0ffdd17 	ldw	r3,-140(fp)
8112676c:	1880081e 	bne	r3,r2,81126790 <__malloc_lock+0xc8>
  {
    /* we do; just count the recursion */
    locks++;
81126770:	d0a06e17 	ldw	r2,-32328(gp)
81126774:	10800044 	addi	r2,r2,1
81126778:	d0a06e15 	stw	r2,-32328(gp)
8112677c:	e0bfdc17 	ldw	r2,-144(fp)
81126780:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126784:	e0bfde17 	ldw	r2,-136(fp)
81126788:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
8112678c:	00000e06 	br	811267c8 <__malloc_lock+0x100>
81126790:	e0bfdc17 	ldw	r2,-144(fp)
81126794:	e0bfdf15 	stw	r2,-132(fp)
81126798:	e0bfdf17 	ldw	r2,-132(fp)
8112679c:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
811267a0:	d0a06f17 	ldw	r2,-32324(gp)
811267a4:	e0fffe84 	addi	r3,fp,-6
811267a8:	180d883a 	mov	r6,r3
811267ac:	000b883a 	mov	r5,zero
811267b0:	1009883a 	mov	r4,r2
811267b4:	112d1900 	call	8112d190 <OSSemPend>
    locks  = 1;
811267b8:	00800044 	movi	r2,1
811267bc:	d0a06e15 	stw	r2,-32328(gp)
    lockid = id;
811267c0:	e0bfdd17 	ldw	r2,-140(fp)
811267c4:	d0a01615 	stw	r2,-32680(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
811267c8:	0001883a 	nop
811267cc:	00000306 	br	811267dc <__malloc_lock+0x114>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
811267d0:	0001883a 	nop
811267d4:	00000106 	br	811267dc <__malloc_lock+0x114>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
811267d8:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
811267dc:	e037883a 	mov	sp,fp
811267e0:	dfc00117 	ldw	ra,4(sp)
811267e4:	df000017 	ldw	fp,0(sp)
811267e8:	dec00204 	addi	sp,sp,8
811267ec:	f800283a 	ret

811267f0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
811267f0:	defff804 	addi	sp,sp,-32
811267f4:	de00012e 	bgeu	sp,et,811267fc <__malloc_unlock+0xc>
811267f8:	003b68fa 	trap	3
811267fc:	dfc00715 	stw	ra,28(sp)
81126800:	df000615 	stw	fp,24(sp)
81126804:	df000604 	addi	fp,sp,24
81126808:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112680c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
81126810:	d0a07303 	ldbu	r2,-32308(gp)
81126814:	10803fcc 	andi	r2,r2,255
81126818:	10800060 	cmpeqi	r2,r2,1
8112681c:	10002326 	beq	r2,zero,811268ac <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126820:	0005303a 	rdctl	r2,status
81126824:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126828:	e0fffe17 	ldw	r3,-8(fp)
8112682c:	00bfff84 	movi	r2,-2
81126830:	1884703a 	and	r2,r3,r2
81126834:	1001703a 	wrctl	status,r2
  
  return context;
81126838:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
8112683c:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
81126840:	d0a06e17 	ldw	r2,-32328(gp)
81126844:	1000051e 	bne	r2,zero,8112685c <__malloc_unlock+0x6c>
81126848:	e0bffa17 	ldw	r2,-24(fp)
8112684c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126850:	e0bffb17 	ldw	r2,-20(fp)
81126854:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
81126858:	00001506 	br	811268b0 <__malloc_unlock+0xc0>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
8112685c:	d0a06e17 	ldw	r2,-32328(gp)
81126860:	10bfffc4 	addi	r2,r2,-1
81126864:	d0a06e15 	stw	r2,-32328(gp)
81126868:	d0a06e17 	ldw	r2,-32328(gp)
8112686c:	10000a1e 	bne	r2,zero,81126898 <__malloc_unlock+0xa8>
  {
    lockid = -1;
81126870:	00bfffc4 	movi	r2,-1
81126874:	d0a01615 	stw	r2,-32680(gp)
81126878:	e0bffa17 	ldw	r2,-24(fp)
8112687c:	e0bffc15 	stw	r2,-16(fp)
81126880:	e0bffc17 	ldw	r2,-16(fp)
81126884:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
81126888:	d0a06f17 	ldw	r2,-32324(gp)
8112688c:	1009883a 	mov	r4,r2
81126890:	112d5180 	call	8112d518 <OSSemPost>
81126894:	00000606 	br	811268b0 <__malloc_unlock+0xc0>
81126898:	e0bffa17 	ldw	r2,-24(fp)
8112689c:	e0bffd15 	stw	r2,-12(fp)
811268a0:	e0bffd17 	ldw	r2,-12(fp)
811268a4:	1001703a 	wrctl	status,r2
811268a8:	00000106 	br	811268b0 <__malloc_unlock+0xc0>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
811268ac:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
811268b0:	e037883a 	mov	sp,fp
811268b4:	dfc00117 	ldw	ra,4(sp)
811268b8:	df000017 	ldw	fp,0(sp)
811268bc:	dec00204 	addi	sp,sp,8
811268c0:	f800283a 	ret

811268c4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811268c4:	defff704 	addi	sp,sp,-36
811268c8:	de00012e 	bgeu	sp,et,811268d0 <OSEventNameGet+0xc>
811268cc:	003b68fa 	trap	3
811268d0:	dfc00815 	stw	ra,32(sp)
811268d4:	df000715 	stw	fp,28(sp)
811268d8:	df000704 	addi	fp,sp,28
811268dc:	e13ffd15 	stw	r4,-12(fp)
811268e0:	e17ffe15 	stw	r5,-8(fp)
811268e4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811268e8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811268ec:	e0bfff17 	ldw	r2,-4(fp)
811268f0:	1000021e 	bne	r2,zero,811268fc <OSEventNameGet+0x38>
        return (0);
811268f4:	0005883a 	mov	r2,zero
811268f8:	00003706 	br	811269d8 <OSEventNameGet+0x114>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
811268fc:	e0bffd17 	ldw	r2,-12(fp)
81126900:	1000051e 	bne	r2,zero,81126918 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
81126904:	e0bfff17 	ldw	r2,-4(fp)
81126908:	00c00104 	movi	r3,4
8112690c:	10c00005 	stb	r3,0(r2)
        return (0);
81126910:	0005883a 	mov	r2,zero
81126914:	00003006 	br	811269d8 <OSEventNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81126918:	e0bffe17 	ldw	r2,-8(fp)
8112691c:	1000051e 	bne	r2,zero,81126934 <OSEventNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
81126920:	e0bfff17 	ldw	r2,-4(fp)
81126924:	00c00304 	movi	r3,12
81126928:	10c00005 	stb	r3,0(r2)
        return (0);
8112692c:	0005883a 	mov	r2,zero
81126930:	00002906 	br	811269d8 <OSEventNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81126934:	d0a08303 	ldbu	r2,-32244(gp)
81126938:	10803fcc 	andi	r2,r2,255
8112693c:	10000526 	beq	r2,zero,81126954 <OSEventNameGet+0x90>
        *perr  = OS_ERR_NAME_GET_ISR;
81126940:	e0bfff17 	ldw	r2,-4(fp)
81126944:	00c00444 	movi	r3,17
81126948:	10c00005 	stb	r3,0(r2)
        return (0);
8112694c:	0005883a 	mov	r2,zero
81126950:	00002106 	br	811269d8 <OSEventNameGet+0x114>
    }
    switch (pevent->OSEventType) {
81126954:	e0bffd17 	ldw	r2,-12(fp)
81126958:	10800003 	ldbu	r2,0(r2)
8112695c:	10803fcc 	andi	r2,r2,255
81126960:	10bfffc4 	addi	r2,r2,-1
81126964:	10800128 	cmpgeui	r2,r2,4
81126968:	10000526 	beq	r2,zero,81126980 <OSEventNameGet+0xbc>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
8112696c:	e0bfff17 	ldw	r2,-4(fp)
81126970:	00c00044 	movi	r3,1
81126974:	10c00005 	stb	r3,0(r2)
             return (0);
81126978:	0005883a 	mov	r2,zero
8112697c:	00001606 	br	811269d8 <OSEventNameGet+0x114>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81126980:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126984:	0005303a 	rdctl	r2,status
81126988:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112698c:	e0fffb17 	ldw	r3,-20(fp)
81126990:	00bfff84 	movi	r2,-2
81126994:	1884703a 	and	r2,r3,r2
81126998:	1001703a 	wrctl	status,r2
  
  return context;
8112699c:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
811269a0:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
811269a4:	e0bffd17 	ldw	r2,-12(fp)
811269a8:	10800444 	addi	r2,r2,17
811269ac:	100b883a 	mov	r5,r2
811269b0:	e13ffe17 	ldw	r4,-8(fp)
811269b4:	11284340 	call	81128434 <OS_StrCopy>
811269b8:	e0bffa05 	stb	r2,-24(fp)
811269bc:	e0bff917 	ldw	r2,-28(fp)
811269c0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811269c4:	e0bffc17 	ldw	r2,-16(fp)
811269c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811269cc:	e0bfff17 	ldw	r2,-4(fp)
811269d0:	10000005 	stb	zero,0(r2)
    return (len);
811269d4:	e0bffa03 	ldbu	r2,-24(fp)
}
811269d8:	e037883a 	mov	sp,fp
811269dc:	dfc00117 	ldw	ra,4(sp)
811269e0:	df000017 	ldw	fp,0(sp)
811269e4:	dec00204 	addi	sp,sp,8
811269e8:	f800283a 	ret

811269ec <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
811269ec:	defff604 	addi	sp,sp,-40
811269f0:	de00012e 	bgeu	sp,et,811269f8 <OSEventNameSet+0xc>
811269f4:	003b68fa 	trap	3
811269f8:	dfc00915 	stw	ra,36(sp)
811269fc:	df000815 	stw	fp,32(sp)
81126a00:	df000804 	addi	fp,sp,32
81126a04:	e13ffd15 	stw	r4,-12(fp)
81126a08:	e17ffe15 	stw	r5,-8(fp)
81126a0c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81126a10:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81126a14:	e0bfff17 	ldw	r2,-4(fp)
81126a18:	10004026 	beq	r2,zero,81126b1c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
81126a1c:	e0bffd17 	ldw	r2,-12(fp)
81126a20:	1000041e 	bne	r2,zero,81126a34 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
81126a24:	e0bfff17 	ldw	r2,-4(fp)
81126a28:	00c00104 	movi	r3,4
81126a2c:	10c00005 	stb	r3,0(r2)
        return;
81126a30:	00003b06 	br	81126b20 <OSEventNameSet+0x134>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
81126a34:	e0bffe17 	ldw	r2,-8(fp)
81126a38:	1000041e 	bne	r2,zero,81126a4c <OSEventNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
81126a3c:	e0bfff17 	ldw	r2,-4(fp)
81126a40:	00c00304 	movi	r3,12
81126a44:	10c00005 	stb	r3,0(r2)
        return;
81126a48:	00003506 	br	81126b20 <OSEventNameSet+0x134>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
81126a4c:	d0a08303 	ldbu	r2,-32244(gp)
81126a50:	10803fcc 	andi	r2,r2,255
81126a54:	10000426 	beq	r2,zero,81126a68 <OSEventNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81126a58:	e0bfff17 	ldw	r2,-4(fp)
81126a5c:	00c00484 	movi	r3,18
81126a60:	10c00005 	stb	r3,0(r2)
        return;
81126a64:	00002e06 	br	81126b20 <OSEventNameSet+0x134>
    }
    switch (pevent->OSEventType) {
81126a68:	e0bffd17 	ldw	r2,-12(fp)
81126a6c:	10800003 	ldbu	r2,0(r2)
81126a70:	10803fcc 	andi	r2,r2,255
81126a74:	10bfffc4 	addi	r2,r2,-1
81126a78:	10800128 	cmpgeui	r2,r2,4
81126a7c:	10000426 	beq	r2,zero,81126a90 <OSEventNameSet+0xa4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
81126a80:	e0bfff17 	ldw	r2,-4(fp)
81126a84:	00c00044 	movi	r3,1
81126a88:	10c00005 	stb	r3,0(r2)
             return;
81126a8c:	00002406 	br	81126b20 <OSEventNameSet+0x134>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
81126a90:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126a94:	0005303a 	rdctl	r2,status
81126a98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126a9c:	e0fffc17 	ldw	r3,-16(fp)
81126aa0:	00bfff84 	movi	r2,-2
81126aa4:	1884703a 	and	r2,r3,r2
81126aa8:	1001703a 	wrctl	status,r2
  
  return context;
81126aac:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
81126ab0:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
81126ab4:	e13ffe17 	ldw	r4,-8(fp)
81126ab8:	11284b00 	call	811284b0 <OS_StrLen>
81126abc:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
81126ac0:	e0bffa03 	ldbu	r2,-24(fp)
81126ac4:	10800830 	cmpltui	r2,r2,32
81126ac8:	1000081e 	bne	r2,zero,81126aec <OSEventNameSet+0x100>
81126acc:	e0bff817 	ldw	r2,-32(fp)
81126ad0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126ad4:	e0bff917 	ldw	r2,-28(fp)
81126ad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
81126adc:	e0bfff17 	ldw	r2,-4(fp)
81126ae0:	00c002c4 	movi	r3,11
81126ae4:	10c00005 	stb	r3,0(r2)
        return;
81126ae8:	00000d06 	br	81126b20 <OSEventNameSet+0x134>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
81126aec:	e0bffd17 	ldw	r2,-12(fp)
81126af0:	10800444 	addi	r2,r2,17
81126af4:	e17ffe17 	ldw	r5,-8(fp)
81126af8:	1009883a 	mov	r4,r2
81126afc:	11284340 	call	81128434 <OS_StrCopy>
81126b00:	e0bff817 	ldw	r2,-32(fp)
81126b04:	e0bffb15 	stw	r2,-20(fp)
81126b08:	e0bffb17 	ldw	r2,-20(fp)
81126b0c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81126b10:	e0bfff17 	ldw	r2,-4(fp)
81126b14:	10000005 	stb	zero,0(r2)
81126b18:	00000106 	br	81126b20 <OSEventNameSet+0x134>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
81126b1c:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
81126b20:	e037883a 	mov	sp,fp
81126b24:	dfc00117 	ldw	ra,4(sp)
81126b28:	df000017 	ldw	fp,0(sp)
81126b2c:	dec00204 	addi	sp,sp,8
81126b30:	f800283a 	ret

81126b34 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
81126b34:	deffed04 	addi	sp,sp,-76
81126b38:	de00012e 	bgeu	sp,et,81126b40 <OSEventPendMulti+0xc>
81126b3c:	003b68fa 	trap	3
81126b40:	dfc01215 	stw	ra,72(sp)
81126b44:	df001115 	stw	fp,68(sp)
81126b48:	df001104 	addi	fp,sp,68
81126b4c:	e13ffc15 	stw	r4,-16(fp)
81126b50:	e17ffd15 	stw	r5,-12(fp)
81126b54:	e1bffe15 	stw	r6,-8(fp)
81126b58:	3805883a 	mov	r2,r7
81126b5c:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
81126b60:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
81126b64:	e0800217 	ldw	r2,8(fp)
81126b68:	1000021e 	bne	r2,zero,81126b74 <OSEventPendMulti+0x40>
        return (0);
81126b6c:	0005883a 	mov	r2,zero
81126b70:	00017106 	br	81127138 <OSEventPendMulti+0x604>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
81126b74:	e0bffc17 	ldw	r2,-16(fp)
81126b78:	1000051e 	bne	r2,zero,81126b90 <OSEventPendMulti+0x5c>
       *perr =  OS_ERR_PEVENT_NULL;
81126b7c:	e0800217 	ldw	r2,8(fp)
81126b80:	00c00104 	movi	r3,4
81126b84:	10c00005 	stb	r3,0(r2)
        return (0);
81126b88:	0005883a 	mov	r2,zero
81126b8c:	00016a06 	br	81127138 <OSEventPendMulti+0x604>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
81126b90:	e0bffd17 	ldw	r2,-12(fp)
81126b94:	1000051e 	bne	r2,zero,81126bac <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
81126b98:	e0800217 	ldw	r2,8(fp)
81126b9c:	00c00104 	movi	r3,4
81126ba0:	10c00005 	stb	r3,0(r2)
        return (0);
81126ba4:	0005883a 	mov	r2,zero
81126ba8:	00016306 	br	81127138 <OSEventPendMulti+0x604>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
81126bac:	e0bffe17 	ldw	r2,-8(fp)
81126bb0:	1000051e 	bne	r2,zero,81126bc8 <OSEventPendMulti+0x94>
       *perr =  OS_ERR_PEVENT_NULL;
81126bb4:	e0800217 	ldw	r2,8(fp)
81126bb8:	00c00104 	movi	r3,4
81126bbc:	10c00005 	stb	r3,0(r2)
        return (0);
81126bc0:	0005883a 	mov	r2,zero
81126bc4:	00015c06 	br	81127138 <OSEventPendMulti+0x604>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
81126bc8:	e0bffd17 	ldw	r2,-12(fp)
81126bcc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
81126bd0:	e0bffc17 	ldw	r2,-16(fp)
81126bd4:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
81126bd8:	e0bfef17 	ldw	r2,-68(fp)
81126bdc:	10800017 	ldw	r2,0(r2)
81126be0:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
81126be4:	00001906 	br	81126c4c <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
81126be8:	e0bff017 	ldw	r2,-64(fp)
81126bec:	10800003 	ldbu	r2,0(r2)
81126bf0:	10803fcc 	andi	r2,r2,255
81126bf4:	10c000a0 	cmpeqi	r3,r2,2
81126bf8:	1800091e 	bne	r3,zero,81126c20 <OSEventPendMulti+0xec>
81126bfc:	10c000e0 	cmpeqi	r3,r2,3
81126c00:	1800091e 	bne	r3,zero,81126c28 <OSEventPendMulti+0xf4>
81126c04:	10800060 	cmpeqi	r2,r2,1
81126c08:	1000091e 	bne	r2,zero,81126c30 <OSEventPendMulti+0xfc>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
81126c0c:	e0800217 	ldw	r2,8(fp)
81126c10:	00c00044 	movi	r3,1
81126c14:	10c00005 	stb	r3,0(r2)
                 return (0);
81126c18:	0005883a 	mov	r2,zero
81126c1c:	00014606 	br	81127138 <OSEventPendMulti+0x604>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
81126c20:	0001883a 	nop
81126c24:	00000306 	br	81126c34 <OSEventPendMulti+0x100>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
81126c28:	0001883a 	nop
81126c2c:	00000106 	br	81126c34 <OSEventPendMulti+0x100>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
81126c30:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
81126c34:	e0bfef17 	ldw	r2,-68(fp)
81126c38:	10800104 	addi	r2,r2,4
81126c3c:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81126c40:	e0bfef17 	ldw	r2,-68(fp)
81126c44:	10800017 	ldw	r2,0(r2)
81126c48:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
81126c4c:	e0bff017 	ldw	r2,-64(fp)
81126c50:	103fe51e 	bne	r2,zero,81126be8 <__reset+0xfb106be8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
81126c54:	d0a08303 	ldbu	r2,-32244(gp)
81126c58:	10803fcc 	andi	r2,r2,255
81126c5c:	10000526 	beq	r2,zero,81126c74 <OSEventPendMulti+0x140>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
81126c60:	e0800217 	ldw	r2,8(fp)
81126c64:	00c00084 	movi	r3,2
81126c68:	10c00005 	stb	r3,0(r2)
        return (0);
81126c6c:	0005883a 	mov	r2,zero
81126c70:	00013106 	br	81127138 <OSEventPendMulti+0x604>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
81126c74:	d0a07103 	ldbu	r2,-32316(gp)
81126c78:	10803fcc 	andi	r2,r2,255
81126c7c:	10000526 	beq	r2,zero,81126c94 <OSEventPendMulti+0x160>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
81126c80:	e0800217 	ldw	r2,8(fp)
81126c84:	00c00344 	movi	r3,13
81126c88:	10c00005 	stb	r3,0(r2)
        return (0);
81126c8c:	0005883a 	mov	r2,zero
81126c90:	00012906 	br	81127138 <OSEventPendMulti+0x604>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126c94:	0005303a 	rdctl	r2,status
81126c98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126c9c:	e0fffb17 	ldw	r3,-20(fp)
81126ca0:	00bfff84 	movi	r2,-2
81126ca4:	1884703a 	and	r2,r3,r2
81126ca8:	1001703a 	wrctl	status,r2
  
  return context;
81126cac:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
81126cb0:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
81126cb4:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
81126cb8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
81126cbc:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
81126cc0:	e0bffc17 	ldw	r2,-16(fp)
81126cc4:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
81126cc8:	e0bfef17 	ldw	r2,-68(fp)
81126ccc:	10800017 	ldw	r2,0(r2)
81126cd0:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81126cd4:	00008106 	br	81126edc <OSEventPendMulti+0x3a8>
        switch (pevent->OSEventType) {
81126cd8:	e0bff017 	ldw	r2,-64(fp)
81126cdc:	10800003 	ldbu	r2,0(r2)
81126ce0:	10803fcc 	andi	r2,r2,255
81126ce4:	10c000a0 	cmpeqi	r3,r2,2
81126ce8:	18003c1e 	bne	r3,zero,81126ddc <OSEventPendMulti+0x2a8>
81126cec:	10c000e0 	cmpeqi	r3,r2,3
81126cf0:	1800031e 	bne	r3,zero,81126d00 <OSEventPendMulti+0x1cc>
81126cf4:	10800060 	cmpeqi	r2,r2,1
81126cf8:	10001e1e 	bne	r2,zero,81126d74 <OSEventPendMulti+0x240>
81126cfc:	00006606 	br	81126e98 <OSEventPendMulti+0x364>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
81126d00:	e0bff017 	ldw	r2,-64(fp)
81126d04:	1080020b 	ldhu	r2,8(r2)
81126d08:	10bfffcc 	andi	r2,r2,65535
81126d0c:	10001526 	beq	r2,zero,81126d64 <OSEventPendMulti+0x230>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
81126d10:	e0bff017 	ldw	r2,-64(fp)
81126d14:	1080020b 	ldhu	r2,8(r2)
81126d18:	10bfffc4 	addi	r2,r2,-1
81126d1c:	1007883a 	mov	r3,r2
81126d20:	e0bff017 	ldw	r2,-64(fp)
81126d24:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
81126d28:	e0bffd17 	ldw	r2,-12(fp)
81126d2c:	10c00104 	addi	r3,r2,4
81126d30:	e0fffd15 	stw	r3,-12(fp)
81126d34:	e0fff017 	ldw	r3,-64(fp)
81126d38:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
81126d3c:	00800044 	movi	r2,1
81126d40:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
81126d44:	e0bffe17 	ldw	r2,-8(fp)
81126d48:	10c00104 	addi	r3,r2,4
81126d4c:	e0fffe15 	stw	r3,-8(fp)
81126d50:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
81126d54:	e0bff18b 	ldhu	r2,-58(fp)
81126d58:	10800044 	addi	r2,r2,1
81126d5c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
81126d60:	00005806 	br	81126ec4 <OSEventPendMulti+0x390>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
81126d64:	e0bff203 	ldbu	r2,-56(fp)
81126d68:	10800054 	ori	r2,r2,1
81126d6c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81126d70:	00005406 	br	81126ec4 <OSEventPendMulti+0x390>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
81126d74:	e0bff017 	ldw	r2,-64(fp)
81126d78:	10800117 	ldw	r2,4(r2)
81126d7c:	10001326 	beq	r2,zero,81126dcc <OSEventPendMulti+0x298>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
81126d80:	e0bffe17 	ldw	r2,-8(fp)
81126d84:	10c00104 	addi	r3,r2,4
81126d88:	e0fffe15 	stw	r3,-8(fp)
81126d8c:	e0fff017 	ldw	r3,-64(fp)
81126d90:	18c00117 	ldw	r3,4(r3)
81126d94:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
81126d98:	e0bff017 	ldw	r2,-64(fp)
81126d9c:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
81126da0:	e0bffd17 	ldw	r2,-12(fp)
81126da4:	10c00104 	addi	r3,r2,4
81126da8:	e0fffd15 	stw	r3,-12(fp)
81126dac:	e0fff017 	ldw	r3,-64(fp)
81126db0:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
81126db4:	00800044 	movi	r2,1
81126db8:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81126dbc:	e0bff18b 	ldhu	r2,-58(fp)
81126dc0:	10800044 	addi	r2,r2,1
81126dc4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
81126dc8:	00003e06 	br	81126ec4 <OSEventPendMulti+0x390>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
81126dcc:	e0bff203 	ldbu	r2,-56(fp)
81126dd0:	10800094 	ori	r2,r2,2
81126dd4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81126dd8:	00003a06 	br	81126ec4 <OSEventPendMulti+0x390>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
81126ddc:	e0bff017 	ldw	r2,-64(fp)
81126de0:	10800117 	ldw	r2,4(r2)
81126de4:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
81126de8:	e0bff517 	ldw	r2,-44(fp)
81126dec:	1080058b 	ldhu	r2,22(r2)
81126df0:	10bfffcc 	andi	r2,r2,65535
81126df4:	10002426 	beq	r2,zero,81126e88 <OSEventPendMulti+0x354>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
81126df8:	e0bffe17 	ldw	r2,-8(fp)
81126dfc:	10c00104 	addi	r3,r2,4
81126e00:	e0fffe15 	stw	r3,-8(fp)
81126e04:	e0fff517 	ldw	r3,-44(fp)
81126e08:	18c00417 	ldw	r3,16(r3)
81126e0c:	19400104 	addi	r5,r3,4
81126e10:	e13ff517 	ldw	r4,-44(fp)
81126e14:	21400415 	stw	r5,16(r4)
81126e18:	18c00017 	ldw	r3,0(r3)
81126e1c:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
81126e20:	e0bff517 	ldw	r2,-44(fp)
81126e24:	10c00417 	ldw	r3,16(r2)
81126e28:	e0bff517 	ldw	r2,-44(fp)
81126e2c:	10800217 	ldw	r2,8(r2)
81126e30:	1880041e 	bne	r3,r2,81126e44 <OSEventPendMulti+0x310>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
81126e34:	e0bff517 	ldw	r2,-44(fp)
81126e38:	10c00117 	ldw	r3,4(r2)
81126e3c:	e0bff517 	ldw	r2,-44(fp)
81126e40:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
81126e44:	e0bff517 	ldw	r2,-44(fp)
81126e48:	1080058b 	ldhu	r2,22(r2)
81126e4c:	10bfffc4 	addi	r2,r2,-1
81126e50:	1007883a 	mov	r3,r2
81126e54:	e0bff517 	ldw	r2,-44(fp)
81126e58:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
81126e5c:	e0bffd17 	ldw	r2,-12(fp)
81126e60:	10c00104 	addi	r3,r2,4
81126e64:	e0fffd15 	stw	r3,-12(fp)
81126e68:	e0fff017 	ldw	r3,-64(fp)
81126e6c:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
81126e70:	00800044 	movi	r2,1
81126e74:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
81126e78:	e0bff18b 	ldhu	r2,-58(fp)
81126e7c:	10800044 	addi	r2,r2,1
81126e80:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
81126e84:	00000f06 	br	81126ec4 <OSEventPendMulti+0x390>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
81126e88:	e0bff203 	ldbu	r2,-56(fp)
81126e8c:	10800114 	ori	r2,r2,4
81126e90:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
81126e94:	00000b06 	br	81126ec4 <OSEventPendMulti+0x390>
81126e98:	e0bff317 	ldw	r2,-52(fp)
81126e9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81126ea0:	e0bff417 	ldw	r2,-48(fp)
81126ea4:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
81126ea8:	e0bffd17 	ldw	r2,-12(fp)
81126eac:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
81126eb0:	e0800217 	ldw	r2,8(fp)
81126eb4:	00c00044 	movi	r3,1
81126eb8:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
81126ebc:	e0bff18b 	ldhu	r2,-58(fp)
81126ec0:	00009d06 	br	81127138 <OSEventPendMulti+0x604>
        }
        pevents++;
81126ec4:	e0bfef17 	ldw	r2,-68(fp)
81126ec8:	10800104 	addi	r2,r2,4
81126ecc:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
81126ed0:	e0bfef17 	ldw	r2,-68(fp)
81126ed4:	10800017 	ldw	r2,0(r2)
81126ed8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
81126edc:	e0bff017 	ldw	r2,-64(fp)
81126ee0:	103f7d1e 	bne	r2,zero,81126cd8 <__reset+0xfb106cd8>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
81126ee4:	e0bff103 	ldbu	r2,-60(fp)
81126ee8:	10800058 	cmpnei	r2,r2,1
81126eec:	10000a1e 	bne	r2,zero,81126f18 <OSEventPendMulti+0x3e4>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
81126ef0:	e0bffd17 	ldw	r2,-12(fp)
81126ef4:	10000015 	stw	zero,0(r2)
81126ef8:	e0bff317 	ldw	r2,-52(fp)
81126efc:	e0bff615 	stw	r2,-40(fp)
81126f00:	e0bff617 	ldw	r2,-40(fp)
81126f04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
81126f08:	e0800217 	ldw	r2,8(fp)
81126f0c:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
81126f10:	e0bff18b 	ldhu	r2,-58(fp)
81126f14:	00008806 	br	81127138 <OSEventPendMulti+0x604>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
81126f18:	d0a08417 	ldw	r2,-32240(gp)
81126f1c:	d0e08417 	ldw	r3,-32240(gp)
81126f20:	19000c03 	ldbu	r4,48(r3)
81126f24:	e0fff203 	ldbu	r3,-56(fp)
81126f28:	20c6b03a 	or	r3,r4,r3
81126f2c:	1809883a 	mov	r4,r3
81126f30:	00ffe004 	movi	r3,-128
81126f34:	20c6b03a 	or	r3,r4,r3
81126f38:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81126f3c:	d0a08417 	ldw	r2,-32240(gp)
81126f40:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
81126f44:	d0a08417 	ldw	r2,-32240(gp)
81126f48:	e0ffff0b 	ldhu	r3,-4(fp)
81126f4c:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
81126f50:	e13ffc17 	ldw	r4,-16(fp)
81126f54:	1127adc0 	call	81127adc <OS_EventTaskWaitMulti>
81126f58:	e0bff317 	ldw	r2,-52(fp)
81126f5c:	e0bff915 	stw	r2,-28(fp)
81126f60:	e0bff917 	ldw	r2,-28(fp)
81126f64:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
81126f68:	11282e00 	call	811282e0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81126f6c:	0005303a 	rdctl	r2,status
81126f70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81126f74:	e0fff717 	ldw	r3,-36(fp)
81126f78:	00bfff84 	movi	r2,-2
81126f7c:	1884703a 	and	r2,r3,r2
81126f80:	1001703a 	wrctl	status,r2
  
  return context;
81126f84:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
81126f88:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
81126f8c:	d0a08417 	ldw	r2,-32240(gp)
81126f90:	10800c43 	ldbu	r2,49(r2)
81126f94:	10803fcc 	andi	r2,r2,255
81126f98:	10000226 	beq	r2,zero,81126fa4 <OSEventPendMulti+0x470>
81126f9c:	108000a0 	cmpeqi	r2,r2,2
81126fa0:	10001826 	beq	r2,zero,81127004 <OSEventPendMulti+0x4d0>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
81126fa4:	d0a08417 	ldw	r2,-32240(gp)
81126fa8:	10800717 	ldw	r2,28(r2)
81126fac:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
81126fb0:	e0bff017 	ldw	r2,-64(fp)
81126fb4:	10000b26 	beq	r2,zero,81126fe4 <OSEventPendMulti+0x4b0>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
81126fb8:	e0bffd17 	ldw	r2,-12(fp)
81126fbc:	10c00104 	addi	r3,r2,4
81126fc0:	e0fffd15 	stw	r3,-12(fp)
81126fc4:	e0fff017 	ldw	r3,-64(fp)
81126fc8:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
81126fcc:	e0bffd17 	ldw	r2,-12(fp)
81126fd0:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
81126fd4:	e0bff18b 	ldhu	r2,-58(fp)
81126fd8:	10800044 	addi	r2,r2,1
81126fdc:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
81126fe0:	00000d06 	br	81127018 <OSEventPendMulti+0x4e4>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
81126fe4:	d0a08417 	ldw	r2,-32240(gp)
81126fe8:	00c00044 	movi	r3,1
81126fec:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81126ff0:	d0a08417 	ldw	r2,-32240(gp)
81126ff4:	e17ffc17 	ldw	r5,-16(fp)
81126ff8:	1009883a 	mov	r4,r2
81126ffc:	1127cf40 	call	81127cf4 <OS_EventTaskRemoveMulti>
             }
			 break;
81127000:	00000506 	br	81127018 <OSEventPendMulti+0x4e4>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
81127004:	d0a08417 	ldw	r2,-32240(gp)
81127008:	e17ffc17 	ldw	r5,-16(fp)
8112700c:	1009883a 	mov	r4,r2
81127010:	1127cf40 	call	81127cf4 <OS_EventTaskRemoveMulti>
             break;
81127014:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
81127018:	d0a08417 	ldw	r2,-32240(gp)
8112701c:	10800c43 	ldbu	r2,49(r2)
81127020:	10803fcc 	andi	r2,r2,255
81127024:	10000326 	beq	r2,zero,81127034 <OSEventPendMulti+0x500>
81127028:	108000a0 	cmpeqi	r2,r2,2
8112702c:	1000231e 	bne	r2,zero,811270bc <OSEventPendMulti+0x588>
81127030:	00002a06 	br	811270dc <OSEventPendMulti+0x5a8>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
81127034:	e0bff017 	ldw	r2,-64(fp)
81127038:	10800003 	ldbu	r2,0(r2)
8112703c:	10803fcc 	andi	r2,r2,255
81127040:	0080100e 	bge	zero,r2,81127084 <OSEventPendMulti+0x550>
81127044:	10c000d0 	cmplti	r3,r2,3
81127048:	1800071e 	bne	r3,zero,81127068 <OSEventPendMulti+0x534>
8112704c:	108000e0 	cmpeqi	r2,r2,3
81127050:	10000c26 	beq	r2,zero,81127084 <OSEventPendMulti+0x550>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
81127054:	e0bffe17 	ldw	r2,-8(fp)
81127058:	10c00104 	addi	r3,r2,4
8112705c:	e0fffe15 	stw	r3,-8(fp)
81127060:	10000015 	stw	zero,0(r2)
                      break;
81127064:	00001206 	br	811270b0 <OSEventPendMulti+0x57c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
81127068:	e0bffe17 	ldw	r2,-8(fp)
8112706c:	10c00104 	addi	r3,r2,4
81127070:	e0fffe15 	stw	r3,-8(fp)
81127074:	d0e08417 	ldw	r3,-32240(gp)
81127078:	18c00917 	ldw	r3,36(r3)
8112707c:	10c00015 	stw	r3,0(r2)
                      break;
81127080:	00000b06 	br	811270b0 <OSEventPendMulti+0x57c>
81127084:	e0bff317 	ldw	r2,-52(fp)
81127088:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112708c:	e0bff817 	ldw	r2,-32(fp)
81127090:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
81127094:	e0bffd17 	ldw	r2,-12(fp)
81127098:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
8112709c:	e0800217 	ldw	r2,8(fp)
811270a0:	00c00044 	movi	r3,1
811270a4:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
811270a8:	e0bff18b 	ldhu	r2,-58(fp)
811270ac:	00002206 	br	81127138 <OSEventPendMulti+0x604>
             }
            *perr = OS_ERR_NONE;
811270b0:	e0800217 	ldw	r2,8(fp)
811270b4:	10000005 	stb	zero,0(r2)
             break;
811270b8:	00001006 	br	811270fc <OSEventPendMulti+0x5c8>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
811270bc:	e0bffe17 	ldw	r2,-8(fp)
811270c0:	10c00104 	addi	r3,r2,4
811270c4:	e0fffe15 	stw	r3,-8(fp)
811270c8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
811270cc:	e0800217 	ldw	r2,8(fp)
811270d0:	00c00384 	movi	r3,14
811270d4:	10c00005 	stb	r3,0(r2)
             break;
811270d8:	00000806 	br	811270fc <OSEventPendMulti+0x5c8>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
811270dc:	e0bffe17 	ldw	r2,-8(fp)
811270e0:	10c00104 	addi	r3,r2,4
811270e4:	e0fffe15 	stw	r3,-8(fp)
811270e8:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
811270ec:	e0800217 	ldw	r2,8(fp)
811270f0:	00c00284 	movi	r3,10
811270f4:	10c00005 	stb	r3,0(r2)
             break;
811270f8:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
811270fc:	d0a08417 	ldw	r2,-32240(gp)
81127100:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
81127104:	d0a08417 	ldw	r2,-32240(gp)
81127108:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
8112710c:	d0a08417 	ldw	r2,-32240(gp)
81127110:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
81127114:	d0a08417 	ldw	r2,-32240(gp)
81127118:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
8112711c:	d0a08417 	ldw	r2,-32240(gp)
81127120:	10000915 	stw	zero,36(r2)
81127124:	e0bff317 	ldw	r2,-52(fp)
81127128:	e0bffa15 	stw	r2,-24(fp)
8112712c:	e0bffa17 	ldw	r2,-24(fp)
81127130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
81127134:	e0bff18b 	ldhu	r2,-58(fp)
}
81127138:	e037883a 	mov	sp,fp
8112713c:	dfc00117 	ldw	ra,4(sp)
81127140:	df000017 	ldw	fp,0(sp)
81127144:	dec00204 	addi	sp,sp,8
81127148:	f800283a 	ret

8112714c <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
8112714c:	defffe04 	addi	sp,sp,-8
81127150:	de00012e 	bgeu	sp,et,81127158 <OSInit+0xc>
81127154:	003b68fa 	trap	3
81127158:	dfc00115 	stw	ra,4(sp)
8112715c:	df000015 	stw	fp,0(sp)
81127160:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
81127164:	113968c0 	call	8113968c <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
81127168:	1127f540 	call	81127f54 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
8112716c:	1127fa40 	call	81127fa4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
81127170:	11281280 	call	81128128 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
81127174:	1127e6c0 	call	81127e6c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
81127178:	112a0e80 	call	8112a0e8 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
8112717c:	112aa300 	call	8112aa30 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
81127180:	112cd000 	call	8112cd00 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
81127184:	11280180 	call	81128018 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
81127188:	11280a00 	call	811280a0 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
8112718c:	11300a40 	call	811300a4 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
81127190:	11396b80 	call	811396b8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
81127194:	1128a040 	call	81128a04 <OSDebugInit>
#endif
}
81127198:	0001883a 	nop
8112719c:	e037883a 	mov	sp,fp
811271a0:	dfc00117 	ldw	ra,4(sp)
811271a4:	df000017 	ldw	fp,0(sp)
811271a8:	dec00204 	addi	sp,sp,8
811271ac:	f800283a 	ret

811271b0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
811271b0:	deffff04 	addi	sp,sp,-4
811271b4:	de00012e 	bgeu	sp,et,811271bc <OSIntEnter+0xc>
811271b8:	003b68fa 	trap	3
811271bc:	df000015 	stw	fp,0(sp)
811271c0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
811271c4:	d0a07303 	ldbu	r2,-32308(gp)
811271c8:	10803fcc 	andi	r2,r2,255
811271cc:	10800058 	cmpnei	r2,r2,1
811271d0:	1000071e 	bne	r2,zero,811271f0 <OSIntEnter+0x40>
        if (OSIntNesting < 255u) {
811271d4:	d0a08303 	ldbu	r2,-32244(gp)
811271d8:	10803fcc 	andi	r2,r2,255
811271dc:	10803fe0 	cmpeqi	r2,r2,255
811271e0:	1000031e 	bne	r2,zero,811271f0 <OSIntEnter+0x40>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
811271e4:	d0a08303 	ldbu	r2,-32244(gp)
811271e8:	10800044 	addi	r2,r2,1
811271ec:	d0a08305 	stb	r2,-32244(gp)
        }
    }
}
811271f0:	0001883a 	nop
811271f4:	e037883a 	mov	sp,fp
811271f8:	df000017 	ldw	fp,0(sp)
811271fc:	dec00104 	addi	sp,sp,4
81127200:	f800283a 	ret

81127204 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
81127204:	defffb04 	addi	sp,sp,-20
81127208:	de00012e 	bgeu	sp,et,81127210 <OSIntExit+0xc>
8112720c:	003b68fa 	trap	3
81127210:	dfc00415 	stw	ra,16(sp)
81127214:	df000315 	stw	fp,12(sp)
81127218:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112721c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
81127220:	d0a07303 	ldbu	r2,-32308(gp)
81127224:	10803fcc 	andi	r2,r2,255
81127228:	10800058 	cmpnei	r2,r2,1
8112722c:	10002f1e 	bne	r2,zero,811272ec <OSIntExit+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127230:	0005303a 	rdctl	r2,status
81127234:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127238:	e0ffff17 	ldw	r3,-4(fp)
8112723c:	00bfff84 	movi	r2,-2
81127240:	1884703a 	and	r2,r3,r2
81127244:	1001703a 	wrctl	status,r2
  
  return context;
81127248:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
8112724c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
81127250:	d0a08303 	ldbu	r2,-32244(gp)
81127254:	10803fcc 	andi	r2,r2,255
81127258:	10000326 	beq	r2,zero,81127268 <OSIntExit+0x64>
            OSIntNesting--;
8112725c:	d0a08303 	ldbu	r2,-32244(gp)
81127260:	10bfffc4 	addi	r2,r2,-1
81127264:	d0a08305 	stb	r2,-32244(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
81127268:	d0a08303 	ldbu	r2,-32244(gp)
8112726c:	10803fcc 	andi	r2,r2,255
81127270:	10001a1e 	bne	r2,zero,811272dc <OSIntExit+0xd8>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
81127274:	d0a07103 	ldbu	r2,-32316(gp)
81127278:	10803fcc 	andi	r2,r2,255
8112727c:	1000171e 	bne	r2,zero,811272dc <OSIntExit+0xd8>
                OS_SchedNew();
81127280:	11283b80 	call	811283b8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
81127284:	d0e07583 	ldbu	r3,-32298(gp)
81127288:	d0a075c3 	ldbu	r2,-32297(gp)
8112728c:	18c03fcc 	andi	r3,r3,255
81127290:	10803fcc 	andi	r2,r2,255
81127294:	18801126 	beq	r3,r2,811272dc <OSIntExit+0xd8>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
81127298:	d0a07583 	ldbu	r2,-32298(gp)
8112729c:	10c03fcc 	andi	r3,r2,255
811272a0:	00a04574 	movhi	r2,33045
811272a4:	1087c004 	addi	r2,r2,7936
811272a8:	18c7883a 	add	r3,r3,r3
811272ac:	18c7883a 	add	r3,r3,r3
811272b0:	10c5883a 	add	r2,r2,r3
811272b4:	10800017 	ldw	r2,0(r2)
811272b8:	d0a07e15 	stw	r2,-32264(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
811272bc:	d0a07e17 	ldw	r2,-32264(gp)
811272c0:	10c00e17 	ldw	r3,56(r2)
811272c4:	18c00044 	addi	r3,r3,1
811272c8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
811272cc:	d0a07817 	ldw	r2,-32288(gp)
811272d0:	10800044 	addi	r2,r2,1
811272d4:	d0a07815 	stw	r2,-32288(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
811272d8:	113934c0 	call	8113934c <OSCtxSw>
811272dc:	e0bffd17 	ldw	r2,-12(fp)
811272e0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811272e4:	e0bffe17 	ldw	r2,-8(fp)
811272e8:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
811272ec:	0001883a 	nop
811272f0:	e037883a 	mov	sp,fp
811272f4:	dfc00117 	ldw	ra,4(sp)
811272f8:	df000017 	ldw	fp,0(sp)
811272fc:	dec00204 	addi	sp,sp,8
81127300:	f800283a 	ret

81127304 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
81127304:	defffc04 	addi	sp,sp,-16
81127308:	de00012e 	bgeu	sp,et,81127310 <OSSchedLock+0xc>
8112730c:	003b68fa 	trap	3
81127310:	df000315 	stw	fp,12(sp)
81127314:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81127318:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
8112731c:	d0a07303 	ldbu	r2,-32308(gp)
81127320:	10803fcc 	andi	r2,r2,255
81127324:	10800058 	cmpnei	r2,r2,1
81127328:	1000161e 	bne	r2,zero,81127384 <OSSchedLock+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112732c:	0005303a 	rdctl	r2,status
81127330:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127334:	e0ffff17 	ldw	r3,-4(fp)
81127338:	00bfff84 	movi	r2,-2
8112733c:	1884703a 	and	r2,r3,r2
81127340:	1001703a 	wrctl	status,r2
  
  return context;
81127344:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
81127348:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
8112734c:	d0a08303 	ldbu	r2,-32244(gp)
81127350:	10803fcc 	andi	r2,r2,255
81127354:	1000071e 	bne	r2,zero,81127374 <OSSchedLock+0x70>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
81127358:	d0a07103 	ldbu	r2,-32316(gp)
8112735c:	10803fcc 	andi	r2,r2,255
81127360:	10803fe0 	cmpeqi	r2,r2,255
81127364:	1000031e 	bne	r2,zero,81127374 <OSSchedLock+0x70>
                OSLockNesting++;                 /* Increment lock nesting level                       */
81127368:	d0a07103 	ldbu	r2,-32316(gp)
8112736c:	10800044 	addi	r2,r2,1
81127370:	d0a07105 	stb	r2,-32316(gp)
81127374:	e0bffd17 	ldw	r2,-12(fp)
81127378:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112737c:	e0bffe17 	ldw	r2,-8(fp)
81127380:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
81127384:	0001883a 	nop
81127388:	e037883a 	mov	sp,fp
8112738c:	df000017 	ldw	fp,0(sp)
81127390:	dec00104 	addi	sp,sp,4
81127394:	f800283a 	ret

81127398 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
81127398:	defff804 	addi	sp,sp,-32
8112739c:	de00012e 	bgeu	sp,et,811273a4 <OSSchedUnlock+0xc>
811273a0:	003b68fa 	trap	3
811273a4:	dfc00715 	stw	ra,28(sp)
811273a8:	df000615 	stw	fp,24(sp)
811273ac:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
811273b0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
811273b4:	d0a07303 	ldbu	r2,-32308(gp)
811273b8:	10803fcc 	andi	r2,r2,255
811273bc:	10800058 	cmpnei	r2,r2,1
811273c0:	1000281e 	bne	r2,zero,81127464 <OSSchedUnlock+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811273c4:	0005303a 	rdctl	r2,status
811273c8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811273cc:	e0ffff17 	ldw	r3,-4(fp)
811273d0:	00bfff84 	movi	r2,-2
811273d4:	1884703a 	and	r2,r3,r2
811273d8:	1001703a 	wrctl	status,r2
  
  return context;
811273dc:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
811273e0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
811273e4:	d0a07103 	ldbu	r2,-32316(gp)
811273e8:	10803fcc 	andi	r2,r2,255
811273ec:	10001926 	beq	r2,zero,81127454 <OSSchedUnlock+0xbc>
            OSLockNesting--;                               /* Decrement lock nesting level             */
811273f0:	d0a07103 	ldbu	r2,-32316(gp)
811273f4:	10bfffc4 	addi	r2,r2,-1
811273f8:	d0a07105 	stb	r2,-32316(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
811273fc:	d0a07103 	ldbu	r2,-32316(gp)
81127400:	10803fcc 	andi	r2,r2,255
81127404:	10000e1e 	bne	r2,zero,81127440 <OSSchedUnlock+0xa8>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
81127408:	d0a08303 	ldbu	r2,-32244(gp)
8112740c:	10803fcc 	andi	r2,r2,255
81127410:	1000061e 	bne	r2,zero,8112742c <OSSchedUnlock+0x94>
81127414:	e0bffa17 	ldw	r2,-24(fp)
81127418:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112741c:	e0bffb17 	ldw	r2,-20(fp)
81127420:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
81127424:	11282e00 	call	811282e0 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
81127428:	00000e06 	br	81127464 <OSSchedUnlock+0xcc>
8112742c:	e0bffa17 	ldw	r2,-24(fp)
81127430:	e0bffc15 	stw	r2,-16(fp)
81127434:	e0bffc17 	ldw	r2,-16(fp)
81127438:	1001703a 	wrctl	status,r2
8112743c:	00000906 	br	81127464 <OSSchedUnlock+0xcc>
81127440:	e0bffa17 	ldw	r2,-24(fp)
81127444:	e0bffd15 	stw	r2,-12(fp)
81127448:	e0bffd17 	ldw	r2,-12(fp)
8112744c:	1001703a 	wrctl	status,r2
81127450:	00000406 	br	81127464 <OSSchedUnlock+0xcc>
81127454:	e0bffa17 	ldw	r2,-24(fp)
81127458:	e0bffe15 	stw	r2,-8(fp)
8112745c:	e0bffe17 	ldw	r2,-8(fp)
81127460:	1001703a 	wrctl	status,r2
81127464:	0001883a 	nop
81127468:	e037883a 	mov	sp,fp
8112746c:	dfc00117 	ldw	ra,4(sp)
81127470:	df000017 	ldw	fp,0(sp)
81127474:	dec00204 	addi	sp,sp,8
81127478:	f800283a 	ret

8112747c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
8112747c:	defffe04 	addi	sp,sp,-8
81127480:	de00012e 	bgeu	sp,et,81127488 <OSStart+0xc>
81127484:	003b68fa 	trap	3
81127488:	dfc00115 	stw	ra,4(sp)
8112748c:	df000015 	stw	fp,0(sp)
81127490:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
81127494:	d0a07303 	ldbu	r2,-32308(gp)
81127498:	10803fcc 	andi	r2,r2,255
8112749c:	10000f1e 	bne	r2,zero,811274dc <OSStart+0x60>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
811274a0:	11283b80 	call	811283b8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
811274a4:	d0a07583 	ldbu	r2,-32298(gp)
811274a8:	d0a075c5 	stb	r2,-32297(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
811274ac:	d0a07583 	ldbu	r2,-32298(gp)
811274b0:	10c03fcc 	andi	r3,r2,255
811274b4:	00a04574 	movhi	r2,33045
811274b8:	1087c004 	addi	r2,r2,7936
811274bc:	18c7883a 	add	r3,r3,r3
811274c0:	18c7883a 	add	r3,r3,r3
811274c4:	10c5883a 	add	r2,r2,r3
811274c8:	10800017 	ldw	r2,0(r2)
811274cc:	d0a07e15 	stw	r2,-32264(gp)
        OSTCBCur      = OSTCBHighRdy;
811274d0:	d0a07e17 	ldw	r2,-32264(gp)
811274d4:	d0a08415 	stw	r2,-32240(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
811274d8:	11393e80 	call	811393e8 <OSStartHighRdy>
    }
}
811274dc:	0001883a 	nop
811274e0:	e037883a 	mov	sp,fp
811274e4:	dfc00117 	ldw	ra,4(sp)
811274e8:	df000017 	ldw	fp,0(sp)
811274ec:	dec00204 	addi	sp,sp,8
811274f0:	f800283a 	ret

811274f4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
811274f4:	defff904 	addi	sp,sp,-28
811274f8:	de00012e 	bgeu	sp,et,81127500 <OSStatInit+0xc>
811274fc:	003b68fa 	trap	3
81127500:	dfc00615 	stw	ra,24(sp)
81127504:	df000515 	stw	fp,20(sp)
81127508:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112750c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
81127510:	01000084 	movi	r4,2
81127514:	112f01c0 	call	8112f01c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127518:	0005303a 	rdctl	r2,status
8112751c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127520:	e0fffc17 	ldw	r3,-16(fp)
81127524:	00bfff84 	movi	r2,-2
81127528:	1884703a 	and	r2,r3,r2
8112752c:	1001703a 	wrctl	status,r2
  
  return context;
81127530:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
81127534:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
81127538:	d0207415 	stw	zero,-32304(gp)
8112753c:	e0bffb17 	ldw	r2,-20(fp)
81127540:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127544:	e0bffd17 	ldw	r2,-12(fp)
81127548:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
8112754c:	01001904 	movi	r4,100
81127550:	112f01c0 	call	8112f01c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127554:	0005303a 	rdctl	r2,status
81127558:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112755c:	e0fffe17 	ldw	r3,-8(fp)
81127560:	00bfff84 	movi	r2,-2
81127564:	1884703a 	and	r2,r3,r2
81127568:	1001703a 	wrctl	status,r2
  
  return context;
8112756c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
81127570:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
81127574:	d0a07417 	ldw	r2,-32304(gp)
81127578:	d0a07a15 	stw	r2,-32280(gp)
    OSStatRdy    = OS_TRUE;
8112757c:	00800044 	movi	r2,1
81127580:	d0a08905 	stb	r2,-32220(gp)
81127584:	e0bffb17 	ldw	r2,-20(fp)
81127588:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112758c:	e0bfff17 	ldw	r2,-4(fp)
81127590:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
81127594:	0001883a 	nop
81127598:	e037883a 	mov	sp,fp
8112759c:	dfc00117 	ldw	ra,4(sp)
811275a0:	df000017 	ldw	fp,0(sp)
811275a4:	dec00204 	addi	sp,sp,8
811275a8:	f800283a 	ret

811275ac <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
811275ac:	defff704 	addi	sp,sp,-36
811275b0:	de00012e 	bgeu	sp,et,811275b8 <OSTimeTick+0xc>
811275b4:	003b68fa 	trap	3
811275b8:	dfc00815 	stw	ra,32(sp)
811275bc:	df000715 	stw	fp,28(sp)
811275c0:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811275c4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
811275c8:	11396380 	call	81139638 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811275cc:	0005303a 	rdctl	r2,status
811275d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811275d4:	e0fffd17 	ldw	r3,-12(fp)
811275d8:	00bfff84 	movi	r2,-2
811275dc:	1884703a 	and	r2,r3,r2
811275e0:	1001703a 	wrctl	status,r2
  
  return context;
811275e4:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
811275e8:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
811275ec:	d0a08617 	ldw	r2,-32232(gp)
811275f0:	10800044 	addi	r2,r2,1
811275f4:	d0a08615 	stw	r2,-32232(gp)
811275f8:	e0bffb17 	ldw	r2,-20(fp)
811275fc:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81127600:	e0bfff17 	ldw	r2,-4(fp)
81127604:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
81127608:	d0a07303 	ldbu	r2,-32308(gp)
8112760c:	10803fcc 	andi	r2,r2,255
81127610:	10800058 	cmpnei	r2,r2,1
81127614:	10006a1e 	bne	r2,zero,811277c0 <OSTimeTick+0x214>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
81127618:	d0a07703 	ldbu	r2,-32292(gp)
8112761c:	10803fcc 	andi	r2,r2,255
81127620:	10c00060 	cmpeqi	r3,r2,1
81127624:	1800061e 	bne	r3,zero,81127640 <OSTimeTick+0x94>
81127628:	10c000a0 	cmpeqi	r3,r2,2
8112762c:	1800061e 	bne	r3,zero,81127648 <OSTimeTick+0x9c>
81127630:	10000a1e 	bne	r2,zero,8112765c <OSTimeTick+0xb0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
81127634:	00800044 	movi	r2,1
81127638:	e0bffa05 	stb	r2,-24(fp)
                 break;
8112763c:	00000b06 	br	8112766c <OSTimeTick+0xc0>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
81127640:	e03ffa05 	stb	zero,-24(fp)
                 break;
81127644:	00000906 	br	8112766c <OSTimeTick+0xc0>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
81127648:	00800044 	movi	r2,1
8112764c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
81127650:	00800044 	movi	r2,1
81127654:	d0a07705 	stb	r2,-32292(gp)
                 break;
81127658:	00000406 	br	8112766c <OSTimeTick+0xc0>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
8112765c:	00800044 	movi	r2,1
81127660:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
81127664:	d0207705 	stb	zero,-32292(gp)
                 break;
81127668:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
8112766c:	e0bffa03 	ldbu	r2,-24(fp)
81127670:	10005226 	beq	r2,zero,811277bc <OSTimeTick+0x210>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
81127674:	d0a07617 	ldw	r2,-32296(gp)
81127678:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
8112767c:	00004906 	br	811277a4 <OSTimeTick+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81127680:	0005303a 	rdctl	r2,status
81127684:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81127688:	e0fffc17 	ldw	r3,-16(fp)
8112768c:	00bfff84 	movi	r2,-2
81127690:	1884703a 	and	r2,r3,r2
81127694:	1001703a 	wrctl	status,r2
  
  return context;
81127698:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
8112769c:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
811276a0:	e0bff917 	ldw	r2,-28(fp)
811276a4:	10800b8b 	ldhu	r2,46(r2)
811276a8:	10bfffcc 	andi	r2,r2,65535
811276ac:	10003626 	beq	r2,zero,81127788 <OSTimeTick+0x1dc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
811276b0:	e0bff917 	ldw	r2,-28(fp)
811276b4:	10800b8b 	ldhu	r2,46(r2)
811276b8:	10bfffc4 	addi	r2,r2,-1
811276bc:	1007883a 	mov	r3,r2
811276c0:	e0bff917 	ldw	r2,-28(fp)
811276c4:	10c00b8d 	sth	r3,46(r2)
811276c8:	e0bff917 	ldw	r2,-28(fp)
811276cc:	10800b8b 	ldhu	r2,46(r2)
811276d0:	10bfffcc 	andi	r2,r2,65535
811276d4:	10002c1e 	bne	r2,zero,81127788 <OSTimeTick+0x1dc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
811276d8:	e0bff917 	ldw	r2,-28(fp)
811276dc:	10800c03 	ldbu	r2,48(r2)
811276e0:	10803fcc 	andi	r2,r2,255
811276e4:	10800dcc 	andi	r2,r2,55
811276e8:	10000b26 	beq	r2,zero,81127718 <OSTimeTick+0x16c>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
811276ec:	e0bff917 	ldw	r2,-28(fp)
811276f0:	10c00c03 	ldbu	r3,48(r2)
811276f4:	00bff204 	movi	r2,-56
811276f8:	1884703a 	and	r2,r3,r2
811276fc:	1007883a 	mov	r3,r2
81127700:	e0bff917 	ldw	r2,-28(fp)
81127704:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
81127708:	e0bff917 	ldw	r2,-28(fp)
8112770c:	00c00044 	movi	r3,1
81127710:	10c00c45 	stb	r3,49(r2)
81127714:	00000206 	br	81127720 <OSTimeTick+0x174>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
81127718:	e0bff917 	ldw	r2,-28(fp)
8112771c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
81127720:	e0bff917 	ldw	r2,-28(fp)
81127724:	10800c03 	ldbu	r2,48(r2)
81127728:	10803fcc 	andi	r2,r2,255
8112772c:	1080020c 	andi	r2,r2,8
81127730:	1000151e 	bne	r2,zero,81127788 <OSTimeTick+0x1dc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
81127734:	e0bff917 	ldw	r2,-28(fp)
81127738:	10c00d83 	ldbu	r3,54(r2)
8112773c:	d0a08003 	ldbu	r2,-32256(gp)
81127740:	1884b03a 	or	r2,r3,r2
81127744:	d0a08005 	stb	r2,-32256(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81127748:	e0bff917 	ldw	r2,-28(fp)
8112774c:	10800d03 	ldbu	r2,52(r2)
81127750:	10c03fcc 	andi	r3,r2,255
81127754:	e0bff917 	ldw	r2,-28(fp)
81127758:	10800d03 	ldbu	r2,52(r2)
8112775c:	11003fcc 	andi	r4,r2,255
81127760:	d0a08044 	addi	r2,gp,-32255
81127764:	2085883a 	add	r2,r4,r2
81127768:	11000003 	ldbu	r4,0(r2)
8112776c:	e0bff917 	ldw	r2,-28(fp)
81127770:	10800d43 	ldbu	r2,53(r2)
81127774:	2084b03a 	or	r2,r4,r2
81127778:	1009883a 	mov	r4,r2
8112777c:	d0a08044 	addi	r2,gp,-32255
81127780:	1885883a 	add	r2,r3,r2
81127784:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
81127788:	e0bff917 	ldw	r2,-28(fp)
8112778c:	10800517 	ldw	r2,20(r2)
81127790:	e0bff915 	stw	r2,-28(fp)
81127794:	e0bffb17 	ldw	r2,-20(fp)
81127798:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112779c:	e0bffe17 	ldw	r2,-8(fp)
811277a0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
811277a4:	e0bff917 	ldw	r2,-28(fp)
811277a8:	10800c83 	ldbu	r2,50(r2)
811277ac:	10803fcc 	andi	r2,r2,255
811277b0:	10800a18 	cmpnei	r2,r2,40
811277b4:	103fb21e 	bne	r2,zero,81127680 <__reset+0xfb107680>
811277b8:	00000106 	br	811277c0 <OSTimeTick+0x214>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
811277bc:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
811277c0:	e037883a 	mov	sp,fp
811277c4:	dfc00117 	ldw	ra,4(sp)
811277c8:	df000017 	ldw	fp,0(sp)
811277cc:	dec00204 	addi	sp,sp,8
811277d0:	f800283a 	ret

811277d4 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
811277d4:	deffff04 	addi	sp,sp,-4
811277d8:	de00012e 	bgeu	sp,et,811277e0 <OSVersion+0xc>
811277dc:	003b68fa 	trap	3
811277e0:	df000015 	stw	fp,0(sp)
811277e4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
811277e8:	00804784 	movi	r2,286
}
811277ec:	e037883a 	mov	sp,fp
811277f0:	df000017 	ldw	fp,0(sp)
811277f4:	dec00104 	addi	sp,sp,4
811277f8:	f800283a 	ret

811277fc <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
811277fc:	deffff04 	addi	sp,sp,-4
81127800:	de00012e 	bgeu	sp,et,81127808 <OS_Dummy+0xc>
81127804:	003b68fa 	trap	3
81127808:	df000015 	stw	fp,0(sp)
8112780c:	d839883a 	mov	fp,sp
}
81127810:	0001883a 	nop
81127814:	e037883a 	mov	sp,fp
81127818:	df000017 	ldw	fp,0(sp)
8112781c:	dec00104 	addi	sp,sp,4
81127820:	f800283a 	ret

81127824 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
81127824:	defff804 	addi	sp,sp,-32
81127828:	de00012e 	bgeu	sp,et,81127830 <OS_EventTaskRdy+0xc>
8112782c:	003b68fa 	trap	3
81127830:	dfc00715 	stw	ra,28(sp)
81127834:	df000615 	stw	fp,24(sp)
81127838:	df000604 	addi	fp,sp,24
8112783c:	e13ffc15 	stw	r4,-16(fp)
81127840:	e17ffd15 	stw	r5,-12(fp)
81127844:	3007883a 	mov	r3,r6
81127848:	3805883a 	mov	r2,r7
8112784c:	e0fffe05 	stb	r3,-8(fp)
81127850:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
81127854:	e0bffc17 	ldw	r2,-16(fp)
81127858:	10800283 	ldbu	r2,10(r2)
8112785c:	10c03fcc 	andi	r3,r2,255
81127860:	00a04534 	movhi	r2,33044
81127864:	10b1eb04 	addi	r2,r2,-14420
81127868:	10c5883a 	add	r2,r2,r3
8112786c:	10800003 	ldbu	r2,0(r2)
81127870:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
81127874:	e0bffa03 	ldbu	r2,-24(fp)
81127878:	e0fffc17 	ldw	r3,-16(fp)
8112787c:	1885883a 	add	r2,r3,r2
81127880:	108002c4 	addi	r2,r2,11
81127884:	10800003 	ldbu	r2,0(r2)
81127888:	10c03fcc 	andi	r3,r2,255
8112788c:	00a04534 	movhi	r2,33044
81127890:	10b1eb04 	addi	r2,r2,-14420
81127894:	10c5883a 	add	r2,r2,r3
81127898:	10800003 	ldbu	r2,0(r2)
8112789c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
811278a0:	e0bffa03 	ldbu	r2,-24(fp)
811278a4:	100490fa 	slli	r2,r2,3
811278a8:	1007883a 	mov	r3,r2
811278ac:	e0bffa43 	ldbu	r2,-23(fp)
811278b0:	1885883a 	add	r2,r3,r2
811278b4:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
811278b8:	e0fffa83 	ldbu	r3,-22(fp)
811278bc:	00a04574 	movhi	r2,33045
811278c0:	1087c004 	addi	r2,r2,7936
811278c4:	18c7883a 	add	r3,r3,r3
811278c8:	18c7883a 	add	r3,r3,r3
811278cc:	10c5883a 	add	r2,r2,r3
811278d0:	10800017 	ldw	r2,0(r2)
811278d4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
811278d8:	e0bffb17 	ldw	r2,-20(fp)
811278dc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
811278e0:	e0bffb17 	ldw	r2,-20(fp)
811278e4:	e0fffd17 	ldw	r3,-12(fp)
811278e8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
811278ec:	e0bffb17 	ldw	r2,-20(fp)
811278f0:	10800c03 	ldbu	r2,48(r2)
811278f4:	1007883a 	mov	r3,r2
811278f8:	e0bffe03 	ldbu	r2,-8(fp)
811278fc:	0084303a 	nor	r2,zero,r2
81127900:	1884703a 	and	r2,r3,r2
81127904:	1007883a 	mov	r3,r2
81127908:	e0bffb17 	ldw	r2,-20(fp)
8112790c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
81127910:	e0bffb17 	ldw	r2,-20(fp)
81127914:	e0ffff03 	ldbu	r3,-4(fp)
81127918:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
8112791c:	e0bffb17 	ldw	r2,-20(fp)
81127920:	10800c03 	ldbu	r2,48(r2)
81127924:	10803fcc 	andi	r2,r2,255
81127928:	1080020c 	andi	r2,r2,8
8112792c:	1000111e 	bne	r2,zero,81127974 <OS_EventTaskRdy+0x150>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
81127930:	e0bffb17 	ldw	r2,-20(fp)
81127934:	10c00d83 	ldbu	r3,54(r2)
81127938:	d0a08003 	ldbu	r2,-32256(gp)
8112793c:	1884b03a 	or	r2,r3,r2
81127940:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
81127944:	e0fffa03 	ldbu	r3,-24(fp)
81127948:	e13ffa03 	ldbu	r4,-24(fp)
8112794c:	d0a08044 	addi	r2,gp,-32255
81127950:	2085883a 	add	r2,r4,r2
81127954:	11000003 	ldbu	r4,0(r2)
81127958:	e0bffb17 	ldw	r2,-20(fp)
8112795c:	10800d43 	ldbu	r2,53(r2)
81127960:	2084b03a 	or	r2,r4,r2
81127964:	1009883a 	mov	r4,r2
81127968:	d0a08044 	addi	r2,gp,-32255
8112796c:	1885883a 	add	r2,r3,r2
81127970:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
81127974:	e17ffc17 	ldw	r5,-16(fp)
81127978:	e13ffb17 	ldw	r4,-20(fp)
8112797c:	1127c340 	call	81127c34 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
81127980:	e0bffb17 	ldw	r2,-20(fp)
81127984:	10800817 	ldw	r2,32(r2)
81127988:	10000826 	beq	r2,zero,811279ac <OS_EventTaskRdy+0x188>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112798c:	e0bffb17 	ldw	r2,-20(fp)
81127990:	10800817 	ldw	r2,32(r2)
81127994:	100b883a 	mov	r5,r2
81127998:	e13ffb17 	ldw	r4,-20(fp)
8112799c:	1127cf40 	call	81127cf4 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
811279a0:	e0bffb17 	ldw	r2,-20(fp)
811279a4:	e0fffc17 	ldw	r3,-16(fp)
811279a8:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
811279ac:	e0bffa83 	ldbu	r2,-22(fp)
}
811279b0:	e037883a 	mov	sp,fp
811279b4:	dfc00117 	ldw	ra,4(sp)
811279b8:	df000017 	ldw	fp,0(sp)
811279bc:	dec00204 	addi	sp,sp,8
811279c0:	f800283a 	ret

811279c4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
811279c4:	defffd04 	addi	sp,sp,-12
811279c8:	de00012e 	bgeu	sp,et,811279d0 <OS_EventTaskWait+0xc>
811279cc:	003b68fa 	trap	3
811279d0:	df000215 	stw	fp,8(sp)
811279d4:	df000204 	addi	fp,sp,8
811279d8:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
811279dc:	d0a08417 	ldw	r2,-32240(gp)
811279e0:	e0ffff17 	ldw	r3,-4(fp)
811279e4:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
811279e8:	d0a08417 	ldw	r2,-32240(gp)
811279ec:	10800d03 	ldbu	r2,52(r2)
811279f0:	10803fcc 	andi	r2,r2,255
811279f4:	d0e08417 	ldw	r3,-32240(gp)
811279f8:	18c00d03 	ldbu	r3,52(r3)
811279fc:	18c03fcc 	andi	r3,r3,255
81127a00:	e13fff17 	ldw	r4,-4(fp)
81127a04:	20c7883a 	add	r3,r4,r3
81127a08:	18c002c4 	addi	r3,r3,11
81127a0c:	19000003 	ldbu	r4,0(r3)
81127a10:	d0e08417 	ldw	r3,-32240(gp)
81127a14:	18c00d43 	ldbu	r3,53(r3)
81127a18:	20c6b03a 	or	r3,r4,r3
81127a1c:	1809883a 	mov	r4,r3
81127a20:	e0ffff17 	ldw	r3,-4(fp)
81127a24:	1885883a 	add	r2,r3,r2
81127a28:	108002c4 	addi	r2,r2,11
81127a2c:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81127a30:	e0bfff17 	ldw	r2,-4(fp)
81127a34:	10c00283 	ldbu	r3,10(r2)
81127a38:	d0a08417 	ldw	r2,-32240(gp)
81127a3c:	10800d83 	ldbu	r2,54(r2)
81127a40:	1884b03a 	or	r2,r3,r2
81127a44:	1007883a 	mov	r3,r2
81127a48:	e0bfff17 	ldw	r2,-4(fp)
81127a4c:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81127a50:	d0a08417 	ldw	r2,-32240(gp)
81127a54:	10800d03 	ldbu	r2,52(r2)
81127a58:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81127a5c:	e0fffe03 	ldbu	r3,-8(fp)
81127a60:	e13ffe03 	ldbu	r4,-8(fp)
81127a64:	d0a08044 	addi	r2,gp,-32255
81127a68:	2085883a 	add	r2,r4,r2
81127a6c:	10800003 	ldbu	r2,0(r2)
81127a70:	1009883a 	mov	r4,r2
81127a74:	d0a08417 	ldw	r2,-32240(gp)
81127a78:	10800d43 	ldbu	r2,53(r2)
81127a7c:	0084303a 	nor	r2,zero,r2
81127a80:	2084703a 	and	r2,r4,r2
81127a84:	1009883a 	mov	r4,r2
81127a88:	d0a08044 	addi	r2,gp,-32255
81127a8c:	1885883a 	add	r2,r3,r2
81127a90:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81127a94:	e0fffe03 	ldbu	r3,-8(fp)
81127a98:	d0a08044 	addi	r2,gp,-32255
81127a9c:	1885883a 	add	r2,r3,r2
81127aa0:	10800003 	ldbu	r2,0(r2)
81127aa4:	10803fcc 	andi	r2,r2,255
81127aa8:	1000071e 	bne	r2,zero,81127ac8 <OS_EventTaskWait+0x104>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81127aac:	d0a08417 	ldw	r2,-32240(gp)
81127ab0:	10800d83 	ldbu	r2,54(r2)
81127ab4:	0084303a 	nor	r2,zero,r2
81127ab8:	1007883a 	mov	r3,r2
81127abc:	d0a08003 	ldbu	r2,-32256(gp)
81127ac0:	1884703a 	and	r2,r3,r2
81127ac4:	d0a08005 	stb	r2,-32256(gp)
    }
}
81127ac8:	0001883a 	nop
81127acc:	e037883a 	mov	sp,fp
81127ad0:	df000017 	ldw	fp,0(sp)
81127ad4:	dec00104 	addi	sp,sp,4
81127ad8:	f800283a 	ret

81127adc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
81127adc:	defffb04 	addi	sp,sp,-20
81127ae0:	de00012e 	bgeu	sp,et,81127ae8 <OS_EventTaskWaitMulti+0xc>
81127ae4:	003b68fa 	trap	3
81127ae8:	df000415 	stw	fp,16(sp)
81127aec:	df000404 	addi	fp,sp,16
81127af0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
81127af4:	d0a08417 	ldw	r2,-32240(gp)
81127af8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
81127afc:	d0a08417 	ldw	r2,-32240(gp)
81127b00:	e0ffff17 	ldw	r3,-4(fp)
81127b04:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
81127b08:	e0bfff17 	ldw	r2,-4(fp)
81127b0c:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
81127b10:	e0bffc17 	ldw	r2,-16(fp)
81127b14:	10800017 	ldw	r2,0(r2)
81127b18:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81127b1c:	00002006 	br	81127ba0 <OS_EventTaskWaitMulti+0xc4>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
81127b20:	d0a08417 	ldw	r2,-32240(gp)
81127b24:	10800d03 	ldbu	r2,52(r2)
81127b28:	10803fcc 	andi	r2,r2,255
81127b2c:	d0e08417 	ldw	r3,-32240(gp)
81127b30:	18c00d03 	ldbu	r3,52(r3)
81127b34:	18c03fcc 	andi	r3,r3,255
81127b38:	e13ffd17 	ldw	r4,-12(fp)
81127b3c:	20c7883a 	add	r3,r4,r3
81127b40:	18c002c4 	addi	r3,r3,11
81127b44:	19000003 	ldbu	r4,0(r3)
81127b48:	d0e08417 	ldw	r3,-32240(gp)
81127b4c:	18c00d43 	ldbu	r3,53(r3)
81127b50:	20c6b03a 	or	r3,r4,r3
81127b54:	1809883a 	mov	r4,r3
81127b58:	e0fffd17 	ldw	r3,-12(fp)
81127b5c:	1885883a 	add	r2,r3,r2
81127b60:	108002c4 	addi	r2,r2,11
81127b64:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
81127b68:	e0bffd17 	ldw	r2,-12(fp)
81127b6c:	10c00283 	ldbu	r3,10(r2)
81127b70:	d0a08417 	ldw	r2,-32240(gp)
81127b74:	10800d83 	ldbu	r2,54(r2)
81127b78:	1884b03a 	or	r2,r3,r2
81127b7c:	1007883a 	mov	r3,r2
81127b80:	e0bffd17 	ldw	r2,-12(fp)
81127b84:	10c00285 	stb	r3,10(r2)
        pevents++;
81127b88:	e0bffc17 	ldw	r2,-16(fp)
81127b8c:	10800104 	addi	r2,r2,4
81127b90:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
81127b94:	e0bffc17 	ldw	r2,-16(fp)
81127b98:	10800017 	ldw	r2,0(r2)
81127b9c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
81127ba0:	e0bffd17 	ldw	r2,-12(fp)
81127ba4:	103fde1e 	bne	r2,zero,81127b20 <__reset+0xfb107b20>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
81127ba8:	d0a08417 	ldw	r2,-32240(gp)
81127bac:	10800d03 	ldbu	r2,52(r2)
81127bb0:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
81127bb4:	e0fffe03 	ldbu	r3,-8(fp)
81127bb8:	e13ffe03 	ldbu	r4,-8(fp)
81127bbc:	d0a08044 	addi	r2,gp,-32255
81127bc0:	2085883a 	add	r2,r4,r2
81127bc4:	10800003 	ldbu	r2,0(r2)
81127bc8:	1009883a 	mov	r4,r2
81127bcc:	d0a08417 	ldw	r2,-32240(gp)
81127bd0:	10800d43 	ldbu	r2,53(r2)
81127bd4:	0084303a 	nor	r2,zero,r2
81127bd8:	2084703a 	and	r2,r4,r2
81127bdc:	1009883a 	mov	r4,r2
81127be0:	d0a08044 	addi	r2,gp,-32255
81127be4:	1885883a 	add	r2,r3,r2
81127be8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
81127bec:	e0fffe03 	ldbu	r3,-8(fp)
81127bf0:	d0a08044 	addi	r2,gp,-32255
81127bf4:	1885883a 	add	r2,r3,r2
81127bf8:	10800003 	ldbu	r2,0(r2)
81127bfc:	10803fcc 	andi	r2,r2,255
81127c00:	1000071e 	bne	r2,zero,81127c20 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
81127c04:	d0a08417 	ldw	r2,-32240(gp)
81127c08:	10800d83 	ldbu	r2,54(r2)
81127c0c:	0084303a 	nor	r2,zero,r2
81127c10:	1007883a 	mov	r3,r2
81127c14:	d0a08003 	ldbu	r2,-32256(gp)
81127c18:	1884703a 	and	r2,r3,r2
81127c1c:	d0a08005 	stb	r2,-32256(gp)
    }
}
81127c20:	0001883a 	nop
81127c24:	e037883a 	mov	sp,fp
81127c28:	df000017 	ldw	fp,0(sp)
81127c2c:	dec00104 	addi	sp,sp,4
81127c30:	f800283a 	ret

81127c34 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
81127c34:	defffc04 	addi	sp,sp,-16
81127c38:	de00012e 	bgeu	sp,et,81127c40 <OS_EventTaskRemove+0xc>
81127c3c:	003b68fa 	trap	3
81127c40:	df000315 	stw	fp,12(sp)
81127c44:	df000304 	addi	fp,sp,12
81127c48:	e13ffe15 	stw	r4,-8(fp)
81127c4c:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
81127c50:	e0bffe17 	ldw	r2,-8(fp)
81127c54:	10800d03 	ldbu	r2,52(r2)
81127c58:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
81127c5c:	e0bffd03 	ldbu	r2,-12(fp)
81127c60:	e0fffd03 	ldbu	r3,-12(fp)
81127c64:	e13fff17 	ldw	r4,-4(fp)
81127c68:	20c7883a 	add	r3,r4,r3
81127c6c:	18c002c4 	addi	r3,r3,11
81127c70:	18c00003 	ldbu	r3,0(r3)
81127c74:	1809883a 	mov	r4,r3
81127c78:	e0fffe17 	ldw	r3,-8(fp)
81127c7c:	18c00d43 	ldbu	r3,53(r3)
81127c80:	00c6303a 	nor	r3,zero,r3
81127c84:	20c6703a 	and	r3,r4,r3
81127c88:	1809883a 	mov	r4,r3
81127c8c:	e0ffff17 	ldw	r3,-4(fp)
81127c90:	1885883a 	add	r2,r3,r2
81127c94:	108002c4 	addi	r2,r2,11
81127c98:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
81127c9c:	e0bffd03 	ldbu	r2,-12(fp)
81127ca0:	e0ffff17 	ldw	r3,-4(fp)
81127ca4:	1885883a 	add	r2,r3,r2
81127ca8:	108002c4 	addi	r2,r2,11
81127cac:	10800003 	ldbu	r2,0(r2)
81127cb0:	10803fcc 	andi	r2,r2,255
81127cb4:	10000a1e 	bne	r2,zero,81127ce0 <OS_EventTaskRemove+0xac>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
81127cb8:	e0bfff17 	ldw	r2,-4(fp)
81127cbc:	10800283 	ldbu	r2,10(r2)
81127cc0:	1007883a 	mov	r3,r2
81127cc4:	e0bffe17 	ldw	r2,-8(fp)
81127cc8:	10800d83 	ldbu	r2,54(r2)
81127ccc:	0084303a 	nor	r2,zero,r2
81127cd0:	1884703a 	and	r2,r3,r2
81127cd4:	1007883a 	mov	r3,r2
81127cd8:	e0bfff17 	ldw	r2,-4(fp)
81127cdc:	10c00285 	stb	r3,10(r2)
    }
}
81127ce0:	0001883a 	nop
81127ce4:	e037883a 	mov	sp,fp
81127ce8:	df000017 	ldw	fp,0(sp)
81127cec:	dec00104 	addi	sp,sp,4
81127cf0:	f800283a 	ret

81127cf4 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
81127cf4:	defffa04 	addi	sp,sp,-24
81127cf8:	de00012e 	bgeu	sp,et,81127d00 <OS_EventTaskRemoveMulti+0xc>
81127cfc:	003b68fa 	trap	3
81127d00:	df000515 	stw	fp,20(sp)
81127d04:	df000504 	addi	fp,sp,20
81127d08:	e13ffe15 	stw	r4,-8(fp)
81127d0c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
81127d10:	e0bffe17 	ldw	r2,-8(fp)
81127d14:	10800d03 	ldbu	r2,52(r2)
81127d18:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
81127d1c:	e0bffe17 	ldw	r2,-8(fp)
81127d20:	10800d83 	ldbu	r2,54(r2)
81127d24:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
81127d28:	e0bffe17 	ldw	r2,-8(fp)
81127d2c:	10800d43 	ldbu	r2,53(r2)
81127d30:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
81127d34:	e0bfff17 	ldw	r2,-4(fp)
81127d38:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
81127d3c:	e0bffb17 	ldw	r2,-20(fp)
81127d40:	10800017 	ldw	r2,0(r2)
81127d44:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81127d48:	00002506 	br	81127de0 <OS_EventTaskRemoveMulti+0xec>
        pevent->OSEventTbl[y]  &= ~bitx;
81127d4c:	e0bffd03 	ldbu	r2,-12(fp)
81127d50:	e0fffd03 	ldbu	r3,-12(fp)
81127d54:	e13ffc17 	ldw	r4,-16(fp)
81127d58:	20c7883a 	add	r3,r4,r3
81127d5c:	18c002c4 	addi	r3,r3,11
81127d60:	18c00003 	ldbu	r3,0(r3)
81127d64:	1809883a 	mov	r4,r3
81127d68:	e0fffd83 	ldbu	r3,-10(fp)
81127d6c:	00c6303a 	nor	r3,zero,r3
81127d70:	20c6703a 	and	r3,r4,r3
81127d74:	1809883a 	mov	r4,r3
81127d78:	e0fffc17 	ldw	r3,-16(fp)
81127d7c:	1885883a 	add	r2,r3,r2
81127d80:	108002c4 	addi	r2,r2,11
81127d84:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
81127d88:	e0bffd03 	ldbu	r2,-12(fp)
81127d8c:	e0fffc17 	ldw	r3,-16(fp)
81127d90:	1885883a 	add	r2,r3,r2
81127d94:	108002c4 	addi	r2,r2,11
81127d98:	10800003 	ldbu	r2,0(r2)
81127d9c:	10803fcc 	andi	r2,r2,255
81127da0:	1000091e 	bne	r2,zero,81127dc8 <OS_EventTaskRemoveMulti+0xd4>
            pevent->OSEventGrp &= ~bity;
81127da4:	e0bffc17 	ldw	r2,-16(fp)
81127da8:	10800283 	ldbu	r2,10(r2)
81127dac:	1007883a 	mov	r3,r2
81127db0:	e0bffd43 	ldbu	r2,-11(fp)
81127db4:	0084303a 	nor	r2,zero,r2
81127db8:	1884703a 	and	r2,r3,r2
81127dbc:	1007883a 	mov	r3,r2
81127dc0:	e0bffc17 	ldw	r2,-16(fp)
81127dc4:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
81127dc8:	e0bffb17 	ldw	r2,-20(fp)
81127dcc:	10800104 	addi	r2,r2,4
81127dd0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
81127dd4:	e0bffb17 	ldw	r2,-20(fp)
81127dd8:	10800017 	ldw	r2,0(r2)
81127ddc:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
81127de0:	e0bffc17 	ldw	r2,-16(fp)
81127de4:	103fd91e 	bne	r2,zero,81127d4c <__reset+0xfb107d4c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
81127de8:	0001883a 	nop
81127dec:	e037883a 	mov	sp,fp
81127df0:	df000017 	ldw	fp,0(sp)
81127df4:	dec00104 	addi	sp,sp,4
81127df8:	f800283a 	ret

81127dfc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
81127dfc:	defffc04 	addi	sp,sp,-16
81127e00:	de00012e 	bgeu	sp,et,81127e08 <OS_EventWaitListInit+0xc>
81127e04:	003b68fa 	trap	3
81127e08:	df000315 	stw	fp,12(sp)
81127e0c:	df000304 	addi	fp,sp,12
81127e10:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
81127e14:	e0bfff17 	ldw	r2,-4(fp)
81127e18:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
81127e1c:	e0bfff17 	ldw	r2,-4(fp)
81127e20:	108002c4 	addi	r2,r2,11
81127e24:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81127e28:	e03ffe05 	stb	zero,-8(fp)
81127e2c:	00000706 	br	81127e4c <OS_EventWaitListInit+0x50>
        *ptbl++ = 0;
81127e30:	e0bffd17 	ldw	r2,-12(fp)
81127e34:	10c00044 	addi	r3,r2,1
81127e38:	e0fffd15 	stw	r3,-12(fp)
81127e3c:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
81127e40:	e0bffe03 	ldbu	r2,-8(fp)
81127e44:	10800044 	addi	r2,r2,1
81127e48:	e0bffe05 	stb	r2,-8(fp)
81127e4c:	e0bffe03 	ldbu	r2,-8(fp)
81127e50:	108001b0 	cmpltui	r2,r2,6
81127e54:	103ff61e 	bne	r2,zero,81127e30 <__reset+0xfb107e30>
        *ptbl++ = 0;
    }
}
81127e58:	0001883a 	nop
81127e5c:	e037883a 	mov	sp,fp
81127e60:	df000017 	ldw	fp,0(sp)
81127e64:	dec00104 	addi	sp,sp,4
81127e68:	f800283a 	ret

81127e6c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
81127e6c:	defffb04 	addi	sp,sp,-20
81127e70:	de00012e 	bgeu	sp,et,81127e78 <OS_InitEventList+0xc>
81127e74:	003b68fa 	trap	3
81127e78:	dfc00415 	stw	ra,16(sp)
81127e7c:	df000315 	stw	fp,12(sp)
81127e80:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
81127e84:	01430c04 	movi	r5,3120
81127e88:	01204574 	movhi	r4,33045
81127e8c:	21011e04 	addi	r4,r4,1144
81127e90:	11282140 	call	81128214 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
81127e94:	00a04574 	movhi	r2,33045
81127e98:	10811e04 	addi	r2,r2,1144
81127e9c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
81127ea0:	00a04574 	movhi	r2,33045
81127ea4:	10812b04 	addi	r2,r2,1196
81127ea8:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81127eac:	e03ffd0d 	sth	zero,-12(fp)
81127eb0:	00001306 	br	81127f00 <OS_InitEventList+0x94>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
81127eb4:	e0bffe17 	ldw	r2,-8(fp)
81127eb8:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
81127ebc:	e0bffe17 	ldw	r2,-8(fp)
81127ec0:	e0ffff17 	ldw	r3,-4(fp)
81127ec4:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
81127ec8:	e0bffe17 	ldw	r2,-8(fp)
81127ecc:	00c00fc4 	movi	r3,63
81127ed0:	10c00445 	stb	r3,17(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
81127ed4:	e0bffe17 	ldw	r2,-8(fp)
81127ed8:	10000485 	stb	zero,18(r2)
#endif
        pevent1++;
81127edc:	e0bffe17 	ldw	r2,-8(fp)
81127ee0:	10800d04 	addi	r2,r2,52
81127ee4:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
81127ee8:	e0bfff17 	ldw	r2,-4(fp)
81127eec:	10800d04 	addi	r2,r2,52
81127ef0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
81127ef4:	e0bffd0b 	ldhu	r2,-12(fp)
81127ef8:	10800044 	addi	r2,r2,1
81127efc:	e0bffd0d 	sth	r2,-12(fp)
81127f00:	e0bffd0b 	ldhu	r2,-12(fp)
81127f04:	10800ef0 	cmpltui	r2,r2,59
81127f08:	103fea1e 	bne	r2,zero,81127eb4 <__reset+0xfb107eb4>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
81127f0c:	e0bffe17 	ldw	r2,-8(fp)
81127f10:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
81127f14:	e0bffe17 	ldw	r2,-8(fp)
81127f18:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
81127f1c:	e0bffe17 	ldw	r2,-8(fp)
81127f20:	00c00fc4 	movi	r3,63
81127f24:	10c00445 	stb	r3,17(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
81127f28:	e0bffe17 	ldw	r2,-8(fp)
81127f2c:	10000485 	stb	zero,18(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
81127f30:	00a04574 	movhi	r2,33045
81127f34:	10811e04 	addi	r2,r2,1144
81127f38:	d0a08215 	stw	r2,-32248(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
81127f3c:	0001883a 	nop
81127f40:	e037883a 	mov	sp,fp
81127f44:	dfc00117 	ldw	ra,4(sp)
81127f48:	df000017 	ldw	fp,0(sp)
81127f4c:	dec00204 	addi	sp,sp,8
81127f50:	f800283a 	ret

81127f54 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
81127f54:	deffff04 	addi	sp,sp,-4
81127f58:	de00012e 	bgeu	sp,et,81127f60 <OS_InitMisc+0xc>
81127f5c:	003b68fa 	trap	3
81127f60:	df000015 	stw	fp,0(sp)
81127f64:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
81127f68:	d0208615 	stw	zero,-32232(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
81127f6c:	d0208305 	stb	zero,-32244(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
81127f70:	d0207105 	stb	zero,-32316(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
81127f74:	d0207c45 	stb	zero,-32271(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
81127f78:	d0207305 	stb	zero,-32308(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
81127f7c:	d0207815 	stw	zero,-32288(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
81127f80:	d0207415 	stw	zero,-32304(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
81127f84:	d0208a15 	stw	zero,-32216(gp)
    OSIdleCtrMax  = 0L;
81127f88:	d0207a15 	stw	zero,-32280(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
81127f8c:	d0208905 	stb	zero,-32220(gp)
#endif
}
81127f90:	0001883a 	nop
81127f94:	e037883a 	mov	sp,fp
81127f98:	df000017 	ldw	fp,0(sp)
81127f9c:	dec00104 	addi	sp,sp,4
81127fa0:	f800283a 	ret

81127fa4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
81127fa4:	defffd04 	addi	sp,sp,-12
81127fa8:	de00012e 	bgeu	sp,et,81127fb0 <OS_InitRdyList+0xc>
81127fac:	003b68fa 	trap	3
81127fb0:	df000215 	stw	fp,8(sp)
81127fb4:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
81127fb8:	d0208005 	stb	zero,-32256(gp)
    prdytbl       = &OSRdyTbl[0];
81127fbc:	d0a08044 	addi	r2,gp,-32255
81127fc0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81127fc4:	e03ffe05 	stb	zero,-8(fp)
81127fc8:	00000706 	br	81127fe8 <OS_InitRdyList+0x44>
        *prdytbl++ = 0;
81127fcc:	e0bfff17 	ldw	r2,-4(fp)
81127fd0:	10c00044 	addi	r3,r2,1
81127fd4:	e0ffff15 	stw	r3,-4(fp)
81127fd8:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
81127fdc:	e0bffe03 	ldbu	r2,-8(fp)
81127fe0:	10800044 	addi	r2,r2,1
81127fe4:	e0bffe05 	stb	r2,-8(fp)
81127fe8:	e0bffe03 	ldbu	r2,-8(fp)
81127fec:	108001b0 	cmpltui	r2,r2,6
81127ff0:	103ff61e 	bne	r2,zero,81127fcc <__reset+0xfb107fcc>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
81127ff4:	d02075c5 	stb	zero,-32297(gp)
    OSPrioHighRdy = 0;
81127ff8:	d0207585 	stb	zero,-32298(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
81127ffc:	d0207e15 	stw	zero,-32264(gp)
    OSTCBCur      = (OS_TCB *)0;
81128000:	d0208415 	stw	zero,-32240(gp)
}
81128004:	0001883a 	nop
81128008:	e037883a 	mov	sp,fp
8112800c:	df000017 	ldw	fp,0(sp)
81128010:	dec00104 	addi	sp,sp,4
81128014:	f800283a 	ret

81128018 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
81128018:	defff804 	addi	sp,sp,-32
8112801c:	de00012e 	bgeu	sp,et,81128024 <OS_InitTaskIdle+0xc>
81128020:	003b68fa 	trap	3
81128024:	dfc00715 	stw	ra,28(sp)
81128028:	df000615 	stw	fp,24(sp)
8112802c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
81128030:	008000c4 	movi	r2,3
81128034:	d8800415 	stw	r2,16(sp)
81128038:	d8000315 	stw	zero,12(sp)
8112803c:	00808004 	movi	r2,512
81128040:	d8800215 	stw	r2,8(sp)
81128044:	00a04574 	movhi	r2,33045
81128048:	10bf1e04 	addi	r2,r2,-904
8112804c:	d8800115 	stw	r2,4(sp)
81128050:	00bfffd4 	movui	r2,65535
81128054:	d8800015 	stw	r2,0(sp)
81128058:	01c00a04 	movi	r7,40
8112805c:	01a04574 	movhi	r6,33045
81128060:	31811d04 	addi	r6,r6,1140
81128064:	000b883a 	mov	r5,zero
81128068:	012044f4 	movhi	r4,33043
8112806c:	21214304 	addi	r4,r4,-31476
81128070:	112defc0 	call	8112defc <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
81128074:	e1bfff04 	addi	r6,fp,-4
81128078:	01604534 	movhi	r5,33044
8112807c:	29722b04 	addi	r5,r5,-14164
81128080:	01000a04 	movi	r4,40
81128084:	112e72c0 	call	8112e72c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
81128088:	0001883a 	nop
8112808c:	e037883a 	mov	sp,fp
81128090:	dfc00117 	ldw	ra,4(sp)
81128094:	df000017 	ldw	fp,0(sp)
81128098:	dec00204 	addi	sp,sp,8
8112809c:	f800283a 	ret

811280a0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
811280a0:	defff804 	addi	sp,sp,-32
811280a4:	de00012e 	bgeu	sp,et,811280ac <OS_InitTaskStat+0xc>
811280a8:	003b68fa 	trap	3
811280ac:	dfc00715 	stw	ra,28(sp)
811280b0:	df000615 	stw	fp,24(sp)
811280b4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
811280b8:	008000c4 	movi	r2,3
811280bc:	d8800415 	stw	r2,16(sp)
811280c0:	d8000315 	stw	zero,12(sp)
811280c4:	00808004 	movi	r2,512
811280c8:	d8800215 	stw	r2,8(sp)
811280cc:	00a04574 	movhi	r2,33045
811280d0:	10baa604 	addi	r2,r2,-5480
811280d4:	d8800115 	stw	r2,4(sp)
811280d8:	00bfff94 	movui	r2,65534
811280dc:	d8800015 	stw	r2,0(sp)
811280e0:	01c009c4 	movi	r7,39
811280e4:	01a04574 	movhi	r6,33045
811280e8:	31bca504 	addi	r6,r6,-3436
811280ec:	000b883a 	mov	r5,zero
811280f0:	012044f4 	movhi	r4,33043
811280f4:	21215c04 	addi	r4,r4,-31376
811280f8:	112defc0 	call	8112defc <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
811280fc:	e1bfff04 	addi	r6,fp,-4
81128100:	01604534 	movhi	r5,33044
81128104:	29722f04 	addi	r5,r5,-14148
81128108:	010009c4 	movi	r4,39
8112810c:	112e72c0 	call	8112e72c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
81128110:	0001883a 	nop
81128114:	e037883a 	mov	sp,fp
81128118:	dfc00117 	ldw	ra,4(sp)
8112811c:	df000017 	ldw	fp,0(sp)
81128120:	dec00204 	addi	sp,sp,8
81128124:	f800283a 	ret

81128128 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
81128128:	defffb04 	addi	sp,sp,-20
8112812c:	de00012e 	bgeu	sp,et,81128134 <OS_InitTCBList+0xc>
81128130:	003b68fa 	trap	3
81128134:	dfc00415 	stw	ra,16(sp)
81128138:	df000315 	stw	fp,12(sp)
8112813c:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
81128140:	01439604 	movi	r5,3672
81128144:	01204574 	movhi	r4,33045
81128148:	21042a04 	addi	r4,r4,4264
8112814c:	11282140 	call	81128214 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
81128150:	01402904 	movi	r5,164
81128154:	01204574 	movhi	r4,33045
81128158:	2107c004 	addi	r4,r4,7936
8112815c:	11282140 	call	81128214 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
81128160:	00a04574 	movhi	r2,33045
81128164:	10842a04 	addi	r2,r2,4264
81128168:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
8112816c:	00a04574 	movhi	r2,33045
81128170:	10844504 	addi	r2,r2,4372
81128174:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
81128178:	e03ffd05 	stb	zero,-12(fp)
8112817c:	00001106 	br	811281c4 <OS_InitTCBList+0x9c>
        ptcb1->OSTCBNext = ptcb2;
81128180:	e0bffe17 	ldw	r2,-8(fp)
81128184:	e0ffff17 	ldw	r3,-4(fp)
81128188:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
8112818c:	e0bffe17 	ldw	r2,-8(fp)
81128190:	00c00fc4 	movi	r3,63
81128194:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
81128198:	e0bffe17 	ldw	r2,-8(fp)
8112819c:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
811281a0:	e0bffe17 	ldw	r2,-8(fp)
811281a4:	10801b04 	addi	r2,r2,108
811281a8:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
811281ac:	e0bfff17 	ldw	r2,-4(fp)
811281b0:	10801b04 	addi	r2,r2,108
811281b4:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
811281b8:	e0bffd03 	ldbu	r2,-12(fp)
811281bc:	10800044 	addi	r2,r2,1
811281c0:	e0bffd05 	stb	r2,-12(fp)
811281c4:	e0bffd03 	ldbu	r2,-12(fp)
811281c8:	10800870 	cmpltui	r2,r2,33
811281cc:	103fec1e 	bne	r2,zero,81128180 <__reset+0xfb108180>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
811281d0:	e0bffe17 	ldw	r2,-8(fp)
811281d4:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
811281d8:	e0bffe17 	ldw	r2,-8(fp)
811281dc:	00c00fc4 	movi	r3,63
811281e0:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
811281e4:	e0bffe17 	ldw	r2,-8(fp)
811281e8:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
811281ec:	d0207615 	stw	zero,-32296(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
811281f0:	00a04574 	movhi	r2,33045
811281f4:	10842a04 	addi	r2,r2,4264
811281f8:	d0a07b15 	stw	r2,-32276(gp)
}
811281fc:	0001883a 	nop
81128200:	e037883a 	mov	sp,fp
81128204:	dfc00117 	ldw	ra,4(sp)
81128208:	df000017 	ldw	fp,0(sp)
8112820c:	dec00204 	addi	sp,sp,8
81128210:	f800283a 	ret

81128214 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
81128214:	defffd04 	addi	sp,sp,-12
81128218:	de00012e 	bgeu	sp,et,81128220 <OS_MemClr+0xc>
8112821c:	003b68fa 	trap	3
81128220:	df000215 	stw	fp,8(sp)
81128224:	df000204 	addi	fp,sp,8
81128228:	e13ffe15 	stw	r4,-8(fp)
8112822c:	2805883a 	mov	r2,r5
81128230:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81128234:	00000706 	br	81128254 <OS_MemClr+0x40>
        *pdest++ = (INT8U)0;
81128238:	e0bffe17 	ldw	r2,-8(fp)
8112823c:	10c00044 	addi	r3,r2,1
81128240:	e0fffe15 	stw	r3,-8(fp)
81128244:	10000005 	stb	zero,0(r2)
        size--;
81128248:	e0bfff0b 	ldhu	r2,-4(fp)
8112824c:	10bfffc4 	addi	r2,r2,-1
81128250:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
81128254:	e0bfff0b 	ldhu	r2,-4(fp)
81128258:	103ff71e 	bne	r2,zero,81128238 <__reset+0xfb108238>
        *pdest++ = (INT8U)0;
        size--;
    }
}
8112825c:	0001883a 	nop
81128260:	e037883a 	mov	sp,fp
81128264:	df000017 	ldw	fp,0(sp)
81128268:	dec00104 	addi	sp,sp,4
8112826c:	f800283a 	ret

81128270 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
81128270:	defffc04 	addi	sp,sp,-16
81128274:	de00012e 	bgeu	sp,et,8112827c <OS_MemCopy+0xc>
81128278:	003b68fa 	trap	3
8112827c:	df000315 	stw	fp,12(sp)
81128280:	df000304 	addi	fp,sp,12
81128284:	e13ffd15 	stw	r4,-12(fp)
81128288:	e17ffe15 	stw	r5,-8(fp)
8112828c:	3005883a 	mov	r2,r6
81128290:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
81128294:	00000b06 	br	811282c4 <OS_MemCopy+0x54>
        *pdest++ = *psrc++;
81128298:	e0bffd17 	ldw	r2,-12(fp)
8112829c:	10c00044 	addi	r3,r2,1
811282a0:	e0fffd15 	stw	r3,-12(fp)
811282a4:	e0fffe17 	ldw	r3,-8(fp)
811282a8:	19000044 	addi	r4,r3,1
811282ac:	e13ffe15 	stw	r4,-8(fp)
811282b0:	18c00003 	ldbu	r3,0(r3)
811282b4:	10c00005 	stb	r3,0(r2)
        size--;
811282b8:	e0bfff0b 	ldhu	r2,-4(fp)
811282bc:	10bfffc4 	addi	r2,r2,-1
811282c0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
811282c4:	e0bfff0b 	ldhu	r2,-4(fp)
811282c8:	103ff31e 	bne	r2,zero,81128298 <__reset+0xfb108298>
        *pdest++ = *psrc++;
        size--;
    }
}
811282cc:	0001883a 	nop
811282d0:	e037883a 	mov	sp,fp
811282d4:	df000017 	ldw	fp,0(sp)
811282d8:	dec00104 	addi	sp,sp,4
811282dc:	f800283a 	ret

811282e0 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
811282e0:	defffb04 	addi	sp,sp,-20
811282e4:	de00012e 	bgeu	sp,et,811282ec <OS_Sched+0xc>
811282e8:	003b68fa 	trap	3
811282ec:	dfc00415 	stw	ra,16(sp)
811282f0:	df000315 	stw	fp,12(sp)
811282f4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
811282f8:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811282fc:	0005303a 	rdctl	r2,status
81128300:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128304:	e0ffff17 	ldw	r3,-4(fp)
81128308:	00bfff84 	movi	r2,-2
8112830c:	1884703a 	and	r2,r3,r2
81128310:	1001703a 	wrctl	status,r2
  
  return context;
81128314:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
81128318:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
8112831c:	d0a08303 	ldbu	r2,-32244(gp)
81128320:	10803fcc 	andi	r2,r2,255
81128324:	10001a1e 	bne	r2,zero,81128390 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
81128328:	d0a07103 	ldbu	r2,-32316(gp)
8112832c:	10803fcc 	andi	r2,r2,255
81128330:	1000171e 	bne	r2,zero,81128390 <OS_Sched+0xb0>
            OS_SchedNew();
81128334:	11283b80 	call	811283b8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
81128338:	d0e07583 	ldbu	r3,-32298(gp)
8112833c:	d0a075c3 	ldbu	r2,-32297(gp)
81128340:	18c03fcc 	andi	r3,r3,255
81128344:	10803fcc 	andi	r2,r2,255
81128348:	18801126 	beq	r3,r2,81128390 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
8112834c:	d0a07583 	ldbu	r2,-32298(gp)
81128350:	10c03fcc 	andi	r3,r2,255
81128354:	00a04574 	movhi	r2,33045
81128358:	1087c004 	addi	r2,r2,7936
8112835c:	18c7883a 	add	r3,r3,r3
81128360:	18c7883a 	add	r3,r3,r3
81128364:	10c5883a 	add	r2,r2,r3
81128368:	10800017 	ldw	r2,0(r2)
8112836c:	d0a07e15 	stw	r2,-32264(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
81128370:	d0a07e17 	ldw	r2,-32264(gp)
81128374:	10c00e17 	ldw	r3,56(r2)
81128378:	18c00044 	addi	r3,r3,1
8112837c:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
81128380:	d0a07817 	ldw	r2,-32288(gp)
81128384:	10800044 	addi	r2,r2,1
81128388:	d0a07815 	stw	r2,-32288(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
8112838c:	113934c0 	call	8113934c <OSCtxSw>
81128390:	e0bffd17 	ldw	r2,-12(fp)
81128394:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128398:	e0bffe17 	ldw	r2,-8(fp)
8112839c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
811283a0:	0001883a 	nop
811283a4:	e037883a 	mov	sp,fp
811283a8:	dfc00117 	ldw	ra,4(sp)
811283ac:	df000017 	ldw	fp,0(sp)
811283b0:	dec00204 	addi	sp,sp,8
811283b4:	f800283a 	ret

811283b8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
811283b8:	defffe04 	addi	sp,sp,-8
811283bc:	de00012e 	bgeu	sp,et,811283c4 <OS_SchedNew+0xc>
811283c0:	003b68fa 	trap	3
811283c4:	df000115 	stw	fp,4(sp)
811283c8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
811283cc:	d0a08003 	ldbu	r2,-32256(gp)
811283d0:	10c03fcc 	andi	r3,r2,255
811283d4:	00a04534 	movhi	r2,33044
811283d8:	10b1eb04 	addi	r2,r2,-14420
811283dc:	10c5883a 	add	r2,r2,r3
811283e0:	10800003 	ldbu	r2,0(r2)
811283e4:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
811283e8:	e0bfff03 	ldbu	r2,-4(fp)
811283ec:	100490fa 	slli	r2,r2,3
811283f0:	1009883a 	mov	r4,r2
811283f4:	e0ffff03 	ldbu	r3,-4(fp)
811283f8:	d0a08044 	addi	r2,gp,-32255
811283fc:	1885883a 	add	r2,r3,r2
81128400:	10800003 	ldbu	r2,0(r2)
81128404:	10c03fcc 	andi	r3,r2,255
81128408:	00a04534 	movhi	r2,33044
8112840c:	10b1eb04 	addi	r2,r2,-14420
81128410:	10c5883a 	add	r2,r2,r3
81128414:	10800003 	ldbu	r2,0(r2)
81128418:	2085883a 	add	r2,r4,r2
8112841c:	d0a07585 	stb	r2,-32298(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
81128420:	0001883a 	nop
81128424:	e037883a 	mov	sp,fp
81128428:	df000017 	ldw	fp,0(sp)
8112842c:	dec00104 	addi	sp,sp,4
81128430:	f800283a 	ret

81128434 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
81128434:	defffc04 	addi	sp,sp,-16
81128438:	de00012e 	bgeu	sp,et,81128440 <OS_StrCopy+0xc>
8112843c:	003b68fa 	trap	3
81128440:	df000315 	stw	fp,12(sp)
81128444:	df000304 	addi	fp,sp,12
81128448:	e13ffe15 	stw	r4,-8(fp)
8112844c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
81128450:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
81128454:	00000b06 	br	81128484 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
81128458:	e0bffe17 	ldw	r2,-8(fp)
8112845c:	10c00044 	addi	r3,r2,1
81128460:	e0fffe15 	stw	r3,-8(fp)
81128464:	e0ffff17 	ldw	r3,-4(fp)
81128468:	19000044 	addi	r4,r3,1
8112846c:	e13fff15 	stw	r4,-4(fp)
81128470:	18c00003 	ldbu	r3,0(r3)
81128474:	10c00005 	stb	r3,0(r2)
        len++;
81128478:	e0bffd03 	ldbu	r2,-12(fp)
8112847c:	10800044 	addi	r2,r2,1
81128480:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
81128484:	e0bfff17 	ldw	r2,-4(fp)
81128488:	10800003 	ldbu	r2,0(r2)
8112848c:	10803fcc 	andi	r2,r2,255
81128490:	103ff11e 	bne	r2,zero,81128458 <__reset+0xfb108458>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
81128494:	e0bffe17 	ldw	r2,-8(fp)
81128498:	10000005 	stb	zero,0(r2)
    return (len);
8112849c:	e0bffd03 	ldbu	r2,-12(fp)
}
811284a0:	e037883a 	mov	sp,fp
811284a4:	df000017 	ldw	fp,0(sp)
811284a8:	dec00104 	addi	sp,sp,4
811284ac:	f800283a 	ret

811284b0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
811284b0:	defffd04 	addi	sp,sp,-12
811284b4:	de00012e 	bgeu	sp,et,811284bc <OS_StrLen+0xc>
811284b8:	003b68fa 	trap	3
811284bc:	df000215 	stw	fp,8(sp)
811284c0:	df000204 	addi	fp,sp,8
811284c4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
811284c8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
811284cc:	00000606 	br	811284e8 <OS_StrLen+0x38>
        psrc++;
811284d0:	e0bfff17 	ldw	r2,-4(fp)
811284d4:	10800044 	addi	r2,r2,1
811284d8:	e0bfff15 	stw	r2,-4(fp)
        len++;
811284dc:	e0bffe03 	ldbu	r2,-8(fp)
811284e0:	10800044 	addi	r2,r2,1
811284e4:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
811284e8:	e0bfff17 	ldw	r2,-4(fp)
811284ec:	10800003 	ldbu	r2,0(r2)
811284f0:	10803fcc 	andi	r2,r2,255
811284f4:	103ff61e 	bne	r2,zero,811284d0 <__reset+0xfb1084d0>
        psrc++;
        len++;
    }
    return (len);
811284f8:	e0bffe03 	ldbu	r2,-8(fp)
}
811284fc:	e037883a 	mov	sp,fp
81128500:	df000017 	ldw	fp,0(sp)
81128504:	dec00104 	addi	sp,sp,4
81128508:	f800283a 	ret

8112850c <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
8112850c:	defffa04 	addi	sp,sp,-24
81128510:	de00012e 	bgeu	sp,et,81128518 <OS_TaskIdle+0xc>
81128514:	003b68fa 	trap	3
81128518:	dfc00515 	stw	ra,20(sp)
8112851c:	df000415 	stw	fp,16(sp)
81128520:	df000404 	addi	fp,sp,16
81128524:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128528:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112852c:	0005303a 	rdctl	r2,status
81128530:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128534:	e0fffd17 	ldw	r3,-12(fp)
81128538:	00bfff84 	movi	r2,-2
8112853c:	1884703a 	and	r2,r3,r2
81128540:	1001703a 	wrctl	status,r2
  
  return context;
81128544:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
81128548:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
8112854c:	d0a07417 	ldw	r2,-32304(gp)
81128550:	10800044 	addi	r2,r2,1
81128554:	d0a07415 	stw	r2,-32304(gp)
81128558:	e0bffc17 	ldw	r2,-16(fp)
8112855c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128560:	e0bffe17 	ldw	r2,-8(fp)
81128564:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
81128568:	11396e00 	call	811396e0 <OSTaskIdleHook>
    }
8112856c:	003fef06 	br	8112852c <__reset+0xfb10852c>

81128570 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
81128570:	defff804 	addi	sp,sp,-32
81128574:	de00012e 	bgeu	sp,et,8112857c <OS_TaskStat+0xc>
81128578:	003b68fa 	trap	3
8112857c:	dfc00715 	stw	ra,28(sp)
81128580:	df000615 	stw	fp,24(sp)
81128584:	dc400515 	stw	r17,20(sp)
81128588:	dc000415 	stw	r16,16(sp)
8112858c:	df000604 	addi	fp,sp,24
81128590:	e13ffd15 	stw	r4,-12(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81128594:	e03ffa15 	stw	zero,-24(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
81128598:	00000206 	br	811285a4 <OS_TaskStat+0x34>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
8112859c:	01003204 	movi	r4,200
811285a0:	112f01c0 	call	8112f01c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
811285a4:	d0a08903 	ldbu	r2,-32220(gp)
811285a8:	10803fcc 	andi	r2,r2,255
811285ac:	103ffb26 	beq	r2,zero,8112859c <__reset+0xfb10859c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
811285b0:	d0e07a17 	ldw	r3,-32280(gp)
811285b4:	00947b34 	movhi	r2,20972
811285b8:	10a147c4 	addi	r2,r2,-31457
811285bc:	1888383a 	mulxuu	r4,r3,r2
811285c0:	1885383a 	mul	r2,r3,r2
811285c4:	1021883a 	mov	r16,r2
811285c8:	2023883a 	mov	r17,r4
811285cc:	8804d17a 	srli	r2,r17,5
811285d0:	d0a07a15 	stw	r2,-32280(gp)
    if (OSIdleCtrMax == 0L) {
811285d4:	d0a07a17 	ldw	r2,-32280(gp)
811285d8:	1000031e 	bne	r2,zero,811285e8 <OS_TaskStat+0x78>
        OSCPUUsage = 0;
811285dc:	d0207c05 	stb	zero,-32272(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
811285e0:	01003fc4 	movi	r4,255
811285e4:	112ec8c0 	call	8112ec8c <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811285e8:	0005303a 	rdctl	r2,status
811285ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811285f0:	e0fffb17 	ldw	r3,-20(fp)
811285f4:	00bfff84 	movi	r2,-2
811285f8:	1884703a 	and	r2,r3,r2
811285fc:	1001703a 	wrctl	status,r2
  
  return context;
81128600:	e0bffb17 	ldw	r2,-20(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
81128604:	e0bffa15 	stw	r2,-24(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
81128608:	d0a07417 	ldw	r2,-32304(gp)
8112860c:	d0a08a15 	stw	r2,-32216(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
81128610:	d0207415 	stw	zero,-32304(gp)
81128614:	e0bffa17 	ldw	r2,-24(fp)
81128618:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112861c:	e0bffc17 	ldw	r2,-16(fp)
81128620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
81128624:	d0e08a17 	ldw	r3,-32216(gp)
81128628:	d0a07a17 	ldw	r2,-32280(gp)
8112862c:	1885203a 	divu	r2,r3,r2
81128630:	1007883a 	mov	r3,r2
81128634:	00801904 	movi	r2,100
81128638:	10c5c83a 	sub	r2,r2,r3
8112863c:	d0a07c05 	stb	r2,-32272(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
81128640:	11396100 	call	81139610 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
81128644:	11286540 	call	81128654 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
81128648:	01001904 	movi	r4,100
8112864c:	112f01c0 	call	8112f01c <OSTimeDly>
    }
81128650:	003fe506 	br	811285e8 <__reset+0xfb1085e8>

81128654 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
81128654:	defffa04 	addi	sp,sp,-24
81128658:	de00012e 	bgeu	sp,et,81128660 <OS_TaskStatStkChk+0xc>
8112865c:	003b68fa 	trap	3
81128660:	dfc00515 	stw	ra,20(sp)
81128664:	df000415 	stw	fp,16(sp)
81128668:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
8112866c:	e03ffc05 	stb	zero,-16(fp)
81128670:	00002406 	br	81128704 <OS_TaskStatStkChk+0xb0>
        err = OSTaskStkChk(prio, &stk_data);
81128674:	e0bffc03 	ldbu	r2,-16(fp)
81128678:	e0fffe04 	addi	r3,fp,-8
8112867c:	180b883a 	mov	r5,r3
81128680:	1009883a 	mov	r4,r2
81128684:	112eac40 	call	8112eac4 <OSTaskStkChk>
81128688:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
8112868c:	e0bffc43 	ldbu	r2,-15(fp)
81128690:	1000191e 	bne	r2,zero,811286f8 <OS_TaskStatStkChk+0xa4>
            ptcb = OSTCBPrioTbl[prio];
81128694:	e0fffc03 	ldbu	r3,-16(fp)
81128698:	00a04574 	movhi	r2,33045
8112869c:	1087c004 	addi	r2,r2,7936
811286a0:	18c7883a 	add	r3,r3,r3
811286a4:	18c7883a 	add	r3,r3,r3
811286a8:	10c5883a 	add	r2,r2,r3
811286ac:	10800017 	ldw	r2,0(r2)
811286b0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
811286b4:	e0bffd17 	ldw	r2,-12(fp)
811286b8:	10000f26 	beq	r2,zero,811286f8 <OS_TaskStatStkChk+0xa4>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
811286bc:	e0bffd17 	ldw	r2,-12(fp)
811286c0:	10800060 	cmpeqi	r2,r2,1
811286c4:	10000c1e 	bne	r2,zero,811286f8 <OS_TaskStatStkChk+0xa4>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
811286c8:	e0bffd17 	ldw	r2,-12(fp)
811286cc:	10c00217 	ldw	r3,8(r2)
811286d0:	e0bffd17 	ldw	r2,-12(fp)
811286d4:	10800317 	ldw	r2,12(r2)
811286d8:	1085883a 	add	r2,r2,r2
811286dc:	1085883a 	add	r2,r2,r2
811286e0:	1887883a 	add	r3,r3,r2
811286e4:	e0bffd17 	ldw	r2,-12(fp)
811286e8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
811286ec:	e0ffff17 	ldw	r3,-4(fp)
811286f0:	e0bffd17 	ldw	r2,-12(fp)
811286f4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
811286f8:	e0bffc03 	ldbu	r2,-16(fp)
811286fc:	10800044 	addi	r2,r2,1
81128700:	e0bffc05 	stb	r2,-16(fp)
81128704:	e0bffc03 	ldbu	r2,-16(fp)
81128708:	10800a70 	cmpltui	r2,r2,41
8112870c:	103fd91e 	bne	r2,zero,81128674 <__reset+0xfb108674>
#endif
                }
            }
        }
    }
}
81128710:	0001883a 	nop
81128714:	e037883a 	mov	sp,fp
81128718:	dfc00117 	ldw	ra,4(sp)
8112871c:	df000017 	ldw	fp,0(sp)
81128720:	dec00204 	addi	sp,sp,8
81128724:	f800283a 	ret

81128728 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
81128728:	defff204 	addi	sp,sp,-56
8112872c:	de00012e 	bgeu	sp,et,81128734 <OS_TCBInit+0xc>
81128730:	003b68fa 	trap	3
81128734:	dfc00d15 	stw	ra,52(sp)
81128738:	df000c15 	stw	fp,48(sp)
8112873c:	df000c04 	addi	fp,sp,48
81128740:	e17ffc15 	stw	r5,-16(fp)
81128744:	e1bffd15 	stw	r6,-12(fp)
81128748:	3807883a 	mov	r3,r7
8112874c:	e0800417 	ldw	r2,16(fp)
81128750:	e13ffb05 	stb	r4,-20(fp)
81128754:	e0fffe0d 	sth	r3,-8(fp)
81128758:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112875c:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128760:	0005303a 	rdctl	r2,status
81128764:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128768:	e0fffa17 	ldw	r3,-24(fp)
8112876c:	00bfff84 	movi	r2,-2
81128770:	1884703a 	and	r2,r3,r2
81128774:	1001703a 	wrctl	status,r2
  
  return context;
81128778:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
8112877c:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
81128780:	d0a07b17 	ldw	r2,-32276(gp)
81128784:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
81128788:	e0bff617 	ldw	r2,-40(fp)
8112878c:	10009326 	beq	r2,zero,811289dc <OS_TCBInit+0x2b4>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
81128790:	e0bff617 	ldw	r2,-40(fp)
81128794:	10800517 	ldw	r2,20(r2)
81128798:	d0a07b15 	stw	r2,-32276(gp)
8112879c:	e0bff417 	ldw	r2,-48(fp)
811287a0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811287a4:	e0bff817 	ldw	r2,-32(fp)
811287a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
811287ac:	e0bff617 	ldw	r2,-40(fp)
811287b0:	e0fffc17 	ldw	r3,-16(fp)
811287b4:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
811287b8:	e0bff617 	ldw	r2,-40(fp)
811287bc:	e0fffb03 	ldbu	r3,-20(fp)
811287c0:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
811287c4:	e0bff617 	ldw	r2,-40(fp)
811287c8:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
811287cc:	e0bff617 	ldw	r2,-40(fp)
811287d0:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
811287d4:	e0bff617 	ldw	r2,-40(fp)
811287d8:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
811287dc:	e0bff617 	ldw	r2,-40(fp)
811287e0:	e0c00317 	ldw	r3,12(fp)
811287e4:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
811287e8:	e0bff617 	ldw	r2,-40(fp)
811287ec:	e0c00217 	ldw	r3,8(fp)
811287f0:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
811287f4:	e0bff617 	ldw	r2,-40(fp)
811287f8:	e0fffd17 	ldw	r3,-12(fp)
811287fc:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
81128800:	e0bff617 	ldw	r2,-40(fp)
81128804:	e0ffff0b 	ldhu	r3,-4(fp)
81128808:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
8112880c:	e0bff617 	ldw	r2,-40(fp)
81128810:	e0fffe0b 	ldhu	r3,-8(fp)
81128814:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
81128818:	e0bff617 	ldw	r2,-40(fp)
8112881c:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
81128820:	e0bffb03 	ldbu	r2,-20(fp)
81128824:	1004d0fa 	srli	r2,r2,3
81128828:	1007883a 	mov	r3,r2
8112882c:	e0bff617 	ldw	r2,-40(fp)
81128830:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
81128834:	e0bffb03 	ldbu	r2,-20(fp)
81128838:	108001cc 	andi	r2,r2,7
8112883c:	1007883a 	mov	r3,r2
81128840:	e0bff617 	ldw	r2,-40(fp)
81128844:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
81128848:	e0bff617 	ldw	r2,-40(fp)
8112884c:	10800d03 	ldbu	r2,52(r2)
81128850:	10803fcc 	andi	r2,r2,255
81128854:	00c00044 	movi	r3,1
81128858:	1884983a 	sll	r2,r3,r2
8112885c:	1007883a 	mov	r3,r2
81128860:	e0bff617 	ldw	r2,-40(fp)
81128864:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
81128868:	e0bff617 	ldw	r2,-40(fp)
8112886c:	10800cc3 	ldbu	r2,51(r2)
81128870:	10803fcc 	andi	r2,r2,255
81128874:	00c00044 	movi	r3,1
81128878:	1884983a 	sll	r2,r3,r2
8112887c:	1007883a 	mov	r3,r2
81128880:	e0bff617 	ldw	r2,-40(fp)
81128884:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
81128888:	e0bff617 	ldw	r2,-40(fp)
8112888c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
81128890:	e0bff617 	ldw	r2,-40(fp)
81128894:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
81128898:	e0bff617 	ldw	r2,-40(fp)
8112889c:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
811288a0:	e0bff617 	ldw	r2,-40(fp)
811288a4:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
811288a8:	e0bff617 	ldw	r2,-40(fp)
811288ac:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
811288b0:	e0bff617 	ldw	r2,-40(fp)
811288b4:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
811288b8:	e0bff617 	ldw	r2,-40(fp)
811288bc:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
811288c0:	e0bff617 	ldw	r2,-40(fp)
811288c4:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
811288c8:	e0bff617 	ldw	r2,-40(fp)
811288cc:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
811288d0:	e0bff617 	ldw	r2,-40(fp)
811288d4:	00c00fc4 	movi	r3,63
811288d8:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
811288dc:	e0bff617 	ldw	r2,-40(fp)
811288e0:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
811288e4:	e13ff617 	ldw	r4,-40(fp)
811288e8:	11397080 	call	81139708 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
811288ec:	e13ff617 	ldw	r4,-40(fp)
811288f0:	11395900 	call	81139590 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811288f4:	0005303a 	rdctl	r2,status
811288f8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811288fc:	e0fff517 	ldw	r3,-44(fp)
81128900:	00bfff84 	movi	r2,-2
81128904:	1884703a 	and	r2,r3,r2
81128908:	1001703a 	wrctl	status,r2
  
  return context;
8112890c:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
81128910:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
81128914:	e0fffb03 	ldbu	r3,-20(fp)
81128918:	00a04574 	movhi	r2,33045
8112891c:	1087c004 	addi	r2,r2,7936
81128920:	18c7883a 	add	r3,r3,r3
81128924:	18c7883a 	add	r3,r3,r3
81128928:	10c5883a 	add	r2,r2,r3
8112892c:	e0fff617 	ldw	r3,-40(fp)
81128930:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
81128934:	d0e07617 	ldw	r3,-32296(gp)
81128938:	e0bff617 	ldw	r2,-40(fp)
8112893c:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
81128940:	e0bff617 	ldw	r2,-40(fp)
81128944:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
81128948:	d0a07617 	ldw	r2,-32296(gp)
8112894c:	10000326 	beq	r2,zero,8112895c <OS_TCBInit+0x234>
            OSTCBList->OSTCBPrev = ptcb;
81128950:	d0a07617 	ldw	r2,-32296(gp)
81128954:	e0fff617 	ldw	r3,-40(fp)
81128958:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
8112895c:	e0bff617 	ldw	r2,-40(fp)
81128960:	d0a07615 	stw	r2,-32296(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
81128964:	e0bff617 	ldw	r2,-40(fp)
81128968:	10c00d83 	ldbu	r3,54(r2)
8112896c:	d0a08003 	ldbu	r2,-32256(gp)
81128970:	1884b03a 	or	r2,r3,r2
81128974:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
81128978:	e0bff617 	ldw	r2,-40(fp)
8112897c:	10800d03 	ldbu	r2,52(r2)
81128980:	10c03fcc 	andi	r3,r2,255
81128984:	e0bff617 	ldw	r2,-40(fp)
81128988:	10800d03 	ldbu	r2,52(r2)
8112898c:	11003fcc 	andi	r4,r2,255
81128990:	d0a08044 	addi	r2,gp,-32255
81128994:	2085883a 	add	r2,r4,r2
81128998:	11000003 	ldbu	r4,0(r2)
8112899c:	e0bff617 	ldw	r2,-40(fp)
811289a0:	10800d43 	ldbu	r2,53(r2)
811289a4:	2084b03a 	or	r2,r4,r2
811289a8:	1009883a 	mov	r4,r2
811289ac:	d0a08044 	addi	r2,gp,-32255
811289b0:	1885883a 	add	r2,r3,r2
811289b4:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
811289b8:	d0a07c43 	ldbu	r2,-32271(gp)
811289bc:	10800044 	addi	r2,r2,1
811289c0:	d0a07c45 	stb	r2,-32271(gp)
811289c4:	e0bff417 	ldw	r2,-48(fp)
811289c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811289cc:	e0bff717 	ldw	r2,-36(fp)
811289d0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
811289d4:	0005883a 	mov	r2,zero
811289d8:	00000506 	br	811289f0 <OS_TCBInit+0x2c8>
811289dc:	e0bff417 	ldw	r2,-48(fp)
811289e0:	e0bff915 	stw	r2,-28(fp)
811289e4:	e0bff917 	ldw	r2,-28(fp)
811289e8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
811289ec:	00801084 	movi	r2,66
}
811289f0:	e037883a 	mov	sp,fp
811289f4:	dfc00117 	ldw	ra,4(sp)
811289f8:	df000017 	ldw	fp,0(sp)
811289fc:	dec00204 	addi	sp,sp,8
81128a00:	f800283a 	ret

81128a04 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
81128a04:	defffe04 	addi	sp,sp,-8
81128a08:	de00012e 	bgeu	sp,et,81128a10 <OSDebugInit+0xc>
81128a0c:	003b68fa 	trap	3
81128a10:	df000115 	stw	fp,4(sp)
81128a14:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
81128a18:	d0a01704 	addi	r2,gp,-32676
81128a1c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
81128a20:	d0a01804 	addi	r2,gp,-32672
81128a24:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
81128a28:	d0a01984 	addi	r2,gp,-32666
81128a2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
81128a30:	d0a01a04 	addi	r2,gp,-32664
81128a34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
81128a38:	d0a01904 	addi	r2,gp,-32668
81128a3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
81128a40:	d0a01a84 	addi	r2,gp,-32662
81128a44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
81128a48:	d0a01b04 	addi	r2,gp,-32660
81128a4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
81128a50:	d0a01b84 	addi	r2,gp,-32658
81128a54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
81128a58:	d0a01c04 	addi	r2,gp,-32656
81128a5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
81128a60:	d0a01c84 	addi	r2,gp,-32654
81128a64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
81128a68:	d0a01d04 	addi	r2,gp,-32652
81128a6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
81128a70:	d0a01d84 	addi	r2,gp,-32650
81128a74:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
81128a78:	d0a01e04 	addi	r2,gp,-32648
81128a7c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
81128a80:	d0a01e84 	addi	r2,gp,-32646
81128a84:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
81128a88:	d0a01f04 	addi	r2,gp,-32644
81128a8c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
81128a90:	d0a01f84 	addi	r2,gp,-32642
81128a94:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
81128a98:	d0a02004 	addi	r2,gp,-32640
81128a9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
81128aa0:	d0a02084 	addi	r2,gp,-32638
81128aa4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
81128aa8:	d0a02104 	addi	r2,gp,-32636
81128aac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
81128ab0:	d0a02184 	addi	r2,gp,-32634
81128ab4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
81128ab8:	d0a02204 	addi	r2,gp,-32632
81128abc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
81128ac0:	d0a02284 	addi	r2,gp,-32630
81128ac4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
81128ac8:	d0a02304 	addi	r2,gp,-32628
81128acc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
81128ad0:	d0a02384 	addi	r2,gp,-32626
81128ad4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
81128ad8:	d0a02404 	addi	r2,gp,-32624
81128adc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
81128ae0:	d0a02484 	addi	r2,gp,-32622
81128ae4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
81128ae8:	d0a02504 	addi	r2,gp,-32620
81128aec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
81128af0:	d0a02584 	addi	r2,gp,-32618
81128af4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
81128af8:	d0a02604 	addi	r2,gp,-32616
81128afc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
81128b00:	d0a02684 	addi	r2,gp,-32614
81128b04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
81128b08:	d0a02704 	addi	r2,gp,-32612
81128b0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
81128b10:	d0a02784 	addi	r2,gp,-32610
81128b14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
81128b18:	d0a02804 	addi	r2,gp,-32608
81128b1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
81128b20:	d0a02884 	addi	r2,gp,-32606
81128b24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
81128b28:	d0a02904 	addi	r2,gp,-32604
81128b2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
81128b30:	d0a02984 	addi	r2,gp,-32602
81128b34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
81128b38:	d0a02a04 	addi	r2,gp,-32600
81128b3c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
81128b40:	d0a02a84 	addi	r2,gp,-32598
81128b44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
81128b48:	d0a02b04 	addi	r2,gp,-32596
81128b4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
81128b50:	d0a02b84 	addi	r2,gp,-32594
81128b54:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
81128b58:	d0a02c04 	addi	r2,gp,-32592
81128b5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
81128b60:	d0a02c84 	addi	r2,gp,-32590
81128b64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
81128b68:	d0a02d04 	addi	r2,gp,-32588
81128b6c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
81128b70:	d0a02d84 	addi	r2,gp,-32586
81128b74:	e0bfff15 	stw	r2,-4(fp)

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
81128b78:	00a04574 	movhi	r2,33045
81128b7c:	10b73204 	addi	r2,r2,-9016
81128b80:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTbl[0];
81128b84:	00a04574 	movhi	r2,33045
81128b88:	10b65204 	addi	r2,r2,-9912
81128b8c:	e0bfff15 	stw	r2,-4(fp)
    
    ptemp = (void *)&OSTmrEn;
81128b90:	d0a02e84 	addi	r2,gp,-32582
81128b94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgMax;
81128b98:	d0a02f04 	addi	r2,gp,-32580
81128b9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgNameSize;
81128ba0:	d0a02f84 	addi	r2,gp,-32578
81128ba4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgWheelSize;
81128ba8:	d0a03004 	addi	r2,gp,-32576
81128bac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrCfgTicksPerSec;
81128bb0:	d0a03084 	addi	r2,gp,-32574
81128bb4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrSize;
81128bb8:	d0a03104 	addi	r2,gp,-32572
81128bbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrTblSize;
81128bc0:	d0a03184 	addi	r2,gp,-32570
81128bc4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
81128bc8:	d0a03204 	addi	r2,gp,-32568
81128bcc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTmrWheelTblSize;
81128bd0:	d0a03284 	addi	r2,gp,-32566
81128bd4:	e0bfff15 	stw	r2,-4(fp)
#endif

    ptemp = (void *)&OSVersionNbr;
81128bd8:	d0a02e04 	addi	r2,gp,-32584
81128bdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
81128be0:	d0a03304 	addi	r2,gp,-32564
81128be4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
81128be8:	0001883a 	nop
81128bec:	e037883a 	mov	sp,fp
81128bf0:	df000017 	ldw	fp,0(sp)
81128bf4:	dec00104 	addi	sp,sp,4
81128bf8:	f800283a 	ret

81128bfc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
81128bfc:	defff204 	addi	sp,sp,-56
81128c00:	de00012e 	bgeu	sp,et,81128c08 <OSFlagAccept+0xc>
81128c04:	003b68fa 	trap	3
81128c08:	df000d15 	stw	fp,52(sp)
81128c0c:	df000d04 	addi	fp,sp,52
81128c10:	e13ffc15 	stw	r4,-16(fp)
81128c14:	2807883a 	mov	r3,r5
81128c18:	3005883a 	mov	r2,r6
81128c1c:	e1ffff15 	stw	r7,-4(fp)
81128c20:	e0fffd0d 	sth	r3,-12(fp)
81128c24:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81128c28:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81128c2c:	e0bfff17 	ldw	r2,-4(fp)
81128c30:	1000021e 	bne	r2,zero,81128c3c <OSFlagAccept+0x40>
        return ((OS_FLAGS)0);
81128c34:	0005883a 	mov	r2,zero
81128c38:	0000b006 	br	81128efc <OSFlagAccept+0x300>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81128c3c:	e0bffc17 	ldw	r2,-16(fp)
81128c40:	1000051e 	bne	r2,zero,81128c58 <OSFlagAccept+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81128c44:	e0bfff17 	ldw	r2,-4(fp)
81128c48:	00c01b84 	movi	r3,110
81128c4c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81128c50:	0005883a 	mov	r2,zero
81128c54:	0000a906 	br	81128efc <OSFlagAccept+0x300>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
81128c58:	e0bffc17 	ldw	r2,-16(fp)
81128c5c:	10800003 	ldbu	r2,0(r2)
81128c60:	10803fcc 	andi	r2,r2,255
81128c64:	10800160 	cmpeqi	r2,r2,5
81128c68:	1000051e 	bne	r2,zero,81128c80 <OSFlagAccept+0x84>
        *perr = OS_ERR_EVENT_TYPE;
81128c6c:	e0bfff17 	ldw	r2,-4(fp)
81128c70:	00c00044 	movi	r3,1
81128c74:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81128c78:	0005883a 	mov	r2,zero
81128c7c:	00009f06 	br	81128efc <OSFlagAccept+0x300>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
81128c80:	e0fffe03 	ldbu	r3,-8(fp)
81128c84:	00bfe004 	movi	r2,-128
81128c88:	1884703a 	and	r2,r3,r2
81128c8c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
81128c90:	e0bff503 	ldbu	r2,-44(fp)
81128c94:	10000626 	beq	r2,zero,81128cb0 <OSFlagAccept+0xb4>
        wait_type &= ~OS_FLAG_CONSUME;
81128c98:	e0bffe03 	ldbu	r2,-8(fp)
81128c9c:	10801fcc 	andi	r2,r2,127
81128ca0:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
81128ca4:	00800044 	movi	r2,1
81128ca8:	e0bff385 	stb	r2,-50(fp)
81128cac:	00000106 	br	81128cb4 <OSFlagAccept+0xb8>
    } else {
        consume    = OS_FALSE;
81128cb0:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
81128cb4:	e0bfff17 	ldw	r2,-4(fp)
81128cb8:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128cbc:	0005303a 	rdctl	r2,status
81128cc0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128cc4:	e0fffb17 	ldw	r3,-20(fp)
81128cc8:	00bfff84 	movi	r2,-2
81128ccc:	1884703a 	and	r2,r3,r2
81128cd0:	1001703a 	wrctl	status,r2
  
  return context;
81128cd4:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
81128cd8:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
81128cdc:	e0bffe03 	ldbu	r2,-8(fp)
81128ce0:	10c00060 	cmpeqi	r3,r2,1
81128ce4:	18005f1e 	bne	r3,zero,81128e64 <OSFlagAccept+0x268>
81128ce8:	10c00088 	cmpgei	r3,r2,2
81128cec:	1800021e 	bne	r3,zero,81128cf8 <OSFlagAccept+0xfc>
81128cf0:	10003f26 	beq	r2,zero,81128df0 <OSFlagAccept+0x1f4>
81128cf4:	00007706 	br	81128ed4 <OSFlagAccept+0x2d8>
81128cf8:	10c000a0 	cmpeqi	r3,r2,2
81128cfc:	1800031e 	bne	r3,zero,81128d0c <OSFlagAccept+0x110>
81128d00:	108000e0 	cmpeqi	r2,r2,3
81128d04:	10001e1e 	bne	r2,zero,81128d80 <OSFlagAccept+0x184>
81128d08:	00007206 	br	81128ed4 <OSFlagAccept+0x2d8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81128d0c:	e0bffc17 	ldw	r2,-16(fp)
81128d10:	10c0020b 	ldhu	r3,8(r2)
81128d14:	e0bffd0b 	ldhu	r2,-12(fp)
81128d18:	1884703a 	and	r2,r3,r2
81128d1c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81128d20:	e0fff30b 	ldhu	r3,-52(fp)
81128d24:	e0bffd0b 	ldhu	r2,-12(fp)
81128d28:	18800d1e 	bne	r3,r2,81128d60 <OSFlagAccept+0x164>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81128d2c:	e0bff383 	ldbu	r2,-50(fp)
81128d30:	10800058 	cmpnei	r2,r2,1
81128d34:	10000d1e 	bne	r2,zero,81128d6c <OSFlagAccept+0x170>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
81128d38:	e0bffc17 	ldw	r2,-16(fp)
81128d3c:	1080020b 	ldhu	r2,8(r2)
81128d40:	1007883a 	mov	r3,r2
81128d44:	e0bff30b 	ldhu	r2,-52(fp)
81128d48:	0084303a 	nor	r2,zero,r2
81128d4c:	1884703a 	and	r2,r3,r2
81128d50:	1007883a 	mov	r3,r2
81128d54:	e0bffc17 	ldw	r2,-16(fp)
81128d58:	10c0020d 	sth	r3,8(r2)
81128d5c:	00000306 	br	81128d6c <OSFlagAccept+0x170>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81128d60:	e0bfff17 	ldw	r2,-4(fp)
81128d64:	00c01c04 	movi	r3,112
81128d68:	10c00005 	stb	r3,0(r2)
81128d6c:	e0bff417 	ldw	r2,-48(fp)
81128d70:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128d74:	e0bff617 	ldw	r2,-40(fp)
81128d78:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81128d7c:	00005e06 	br	81128ef8 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
81128d80:	e0bffc17 	ldw	r2,-16(fp)
81128d84:	10c0020b 	ldhu	r3,8(r2)
81128d88:	e0bffd0b 	ldhu	r2,-12(fp)
81128d8c:	1884703a 	and	r2,r3,r2
81128d90:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
81128d94:	e0bff30b 	ldhu	r2,-52(fp)
81128d98:	10000d26 	beq	r2,zero,81128dd0 <OSFlagAccept+0x1d4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81128d9c:	e0bff383 	ldbu	r2,-50(fp)
81128da0:	10800058 	cmpnei	r2,r2,1
81128da4:	10000d1e 	bne	r2,zero,81128ddc <OSFlagAccept+0x1e0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81128da8:	e0bffc17 	ldw	r2,-16(fp)
81128dac:	1080020b 	ldhu	r2,8(r2)
81128db0:	1007883a 	mov	r3,r2
81128db4:	e0bff30b 	ldhu	r2,-52(fp)
81128db8:	0084303a 	nor	r2,zero,r2
81128dbc:	1884703a 	and	r2,r3,r2
81128dc0:	1007883a 	mov	r3,r2
81128dc4:	e0bffc17 	ldw	r2,-16(fp)
81128dc8:	10c0020d 	sth	r3,8(r2)
81128dcc:	00000306 	br	81128ddc <OSFlagAccept+0x1e0>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81128dd0:	e0bfff17 	ldw	r2,-4(fp)
81128dd4:	00c01c04 	movi	r3,112
81128dd8:	10c00005 	stb	r3,0(r2)
81128ddc:	e0bff417 	ldw	r2,-48(fp)
81128de0:	e0bff715 	stw	r2,-36(fp)
81128de4:	e0bff717 	ldw	r2,-36(fp)
81128de8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81128dec:	00004206 	br	81128ef8 <OSFlagAccept+0x2fc>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
81128df0:	e0bffc17 	ldw	r2,-16(fp)
81128df4:	1080020b 	ldhu	r2,8(r2)
81128df8:	0084303a 	nor	r2,zero,r2
81128dfc:	1007883a 	mov	r3,r2
81128e00:	e0bffd0b 	ldhu	r2,-12(fp)
81128e04:	1884703a 	and	r2,r3,r2
81128e08:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81128e0c:	e0fff30b 	ldhu	r3,-52(fp)
81128e10:	e0bffd0b 	ldhu	r2,-12(fp)
81128e14:	18800b1e 	bne	r3,r2,81128e44 <OSFlagAccept+0x248>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81128e18:	e0bff383 	ldbu	r2,-50(fp)
81128e1c:	10800058 	cmpnei	r2,r2,1
81128e20:	10000b1e 	bne	r2,zero,81128e50 <OSFlagAccept+0x254>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
81128e24:	e0bffc17 	ldw	r2,-16(fp)
81128e28:	10c0020b 	ldhu	r3,8(r2)
81128e2c:	e0bff30b 	ldhu	r2,-52(fp)
81128e30:	1884b03a 	or	r2,r3,r2
81128e34:	1007883a 	mov	r3,r2
81128e38:	e0bffc17 	ldw	r2,-16(fp)
81128e3c:	10c0020d 	sth	r3,8(r2)
81128e40:	00000306 	br	81128e50 <OSFlagAccept+0x254>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81128e44:	e0bfff17 	ldw	r2,-4(fp)
81128e48:	00c01c04 	movi	r3,112
81128e4c:	10c00005 	stb	r3,0(r2)
81128e50:	e0bff417 	ldw	r2,-48(fp)
81128e54:	e0bff815 	stw	r2,-32(fp)
81128e58:	e0bff817 	ldw	r2,-32(fp)
81128e5c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81128e60:	00002506 	br	81128ef8 <OSFlagAccept+0x2fc>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
81128e64:	e0bffc17 	ldw	r2,-16(fp)
81128e68:	1080020b 	ldhu	r2,8(r2)
81128e6c:	0084303a 	nor	r2,zero,r2
81128e70:	1007883a 	mov	r3,r2
81128e74:	e0bffd0b 	ldhu	r2,-12(fp)
81128e78:	1884703a 	and	r2,r3,r2
81128e7c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
81128e80:	e0bff30b 	ldhu	r2,-52(fp)
81128e84:	10000b26 	beq	r2,zero,81128eb4 <OSFlagAccept+0x2b8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81128e88:	e0bff383 	ldbu	r2,-50(fp)
81128e8c:	10800058 	cmpnei	r2,r2,1
81128e90:	10000b1e 	bne	r2,zero,81128ec0 <OSFlagAccept+0x2c4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81128e94:	e0bffc17 	ldw	r2,-16(fp)
81128e98:	10c0020b 	ldhu	r3,8(r2)
81128e9c:	e0bff30b 	ldhu	r2,-52(fp)
81128ea0:	1884b03a 	or	r2,r3,r2
81128ea4:	1007883a 	mov	r3,r2
81128ea8:	e0bffc17 	ldw	r2,-16(fp)
81128eac:	10c0020d 	sth	r3,8(r2)
81128eb0:	00000306 	br	81128ec0 <OSFlagAccept+0x2c4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
81128eb4:	e0bfff17 	ldw	r2,-4(fp)
81128eb8:	00c01c04 	movi	r3,112
81128ebc:	10c00005 	stb	r3,0(r2)
81128ec0:	e0bff417 	ldw	r2,-48(fp)
81128ec4:	e0bff915 	stw	r2,-28(fp)
81128ec8:	e0bff917 	ldw	r2,-28(fp)
81128ecc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
81128ed0:	00000906 	br	81128ef8 <OSFlagAccept+0x2fc>
81128ed4:	e0bff417 	ldw	r2,-48(fp)
81128ed8:	e0bffa15 	stw	r2,-24(fp)
81128edc:	e0bffa17 	ldw	r2,-24(fp)
81128ee0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81128ee4:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
81128ee8:	e0bfff17 	ldw	r2,-4(fp)
81128eec:	00c01bc4 	movi	r3,111
81128ef0:	10c00005 	stb	r3,0(r2)
             break;
81128ef4:	0001883a 	nop
    }
    return (flags_rdy);
81128ef8:	e0bff30b 	ldhu	r2,-52(fp)
}
81128efc:	e037883a 	mov	sp,fp
81128f00:	df000017 	ldw	fp,0(sp)
81128f04:	dec00104 	addi	sp,sp,4
81128f08:	f800283a 	ret

81128f0c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
81128f0c:	defff804 	addi	sp,sp,-32
81128f10:	de00012e 	bgeu	sp,et,81128f18 <OSFlagCreate+0xc>
81128f14:	003b68fa 	trap	3
81128f18:	df000715 	stw	fp,28(sp)
81128f1c:	df000704 	addi	fp,sp,28
81128f20:	2005883a 	mov	r2,r4
81128f24:	e17fff15 	stw	r5,-4(fp)
81128f28:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
81128f2c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
81128f30:	e0bfff17 	ldw	r2,-4(fp)
81128f34:	1000021e 	bne	r2,zero,81128f40 <OSFlagCreate+0x34>
        return ((OS_FLAG_GRP *)0);
81128f38:	0005883a 	mov	r2,zero
81128f3c:	00003306 	br	8112900c <OSFlagCreate+0x100>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
81128f40:	d0a08303 	ldbu	r2,-32244(gp)
81128f44:	10803fcc 	andi	r2,r2,255
81128f48:	10000526 	beq	r2,zero,81128f60 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
81128f4c:	e0bfff17 	ldw	r2,-4(fp)
81128f50:	00c00404 	movi	r3,16
81128f54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
81128f58:	0005883a 	mov	r2,zero
81128f5c:	00002b06 	br	8112900c <OSFlagCreate+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81128f60:	0005303a 	rdctl	r2,status
81128f64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81128f68:	e0fffd17 	ldw	r3,-12(fp)
81128f6c:	00bfff84 	movi	r2,-2
81128f70:	1884703a 	and	r2,r3,r2
81128f74:	1001703a 	wrctl	status,r2
  
  return context;
81128f78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
81128f7c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
81128f80:	d0a08817 	ldw	r2,-32224(gp)
81128f84:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
81128f88:	e0bffb17 	ldw	r2,-20(fp)
81128f8c:	10001726 	beq	r2,zero,81128fec <OSFlagCreate+0xe0>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
81128f90:	d0a08817 	ldw	r2,-32224(gp)
81128f94:	10800117 	ldw	r2,4(r2)
81128f98:	d0a08815 	stw	r2,-32224(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
81128f9c:	e0bffb17 	ldw	r2,-20(fp)
81128fa0:	00c00144 	movi	r3,5
81128fa4:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
81128fa8:	e0bffb17 	ldw	r2,-20(fp)
81128fac:	e0fffe0b 	ldhu	r3,-8(fp)
81128fb0:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
81128fb4:	e0bffb17 	ldw	r2,-20(fp)
81128fb8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
81128fbc:	e0bffb17 	ldw	r2,-20(fp)
81128fc0:	00c00fc4 	movi	r3,63
81128fc4:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81128fc8:	e0bffb17 	ldw	r2,-20(fp)
81128fcc:	100002c5 	stb	zero,11(r2)
81128fd0:	e0bff917 	ldw	r2,-28(fp)
81128fd4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81128fd8:	e0bffa17 	ldw	r2,-24(fp)
81128fdc:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
81128fe0:	e0bfff17 	ldw	r2,-4(fp)
81128fe4:	10000005 	stb	zero,0(r2)
81128fe8:	00000706 	br	81129008 <OSFlagCreate+0xfc>
81128fec:	e0bff917 	ldw	r2,-28(fp)
81128ff0:	e0bffc15 	stw	r2,-16(fp)
81128ff4:	e0bffc17 	ldw	r2,-16(fp)
81128ff8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
81128ffc:	e0bfff17 	ldw	r2,-4(fp)
81129000:	00c01c84 	movi	r3,114
81129004:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
81129008:	e0bffb17 	ldw	r2,-20(fp)
}
8112900c:	e037883a 	mov	sp,fp
81129010:	df000017 	ldw	fp,0(sp)
81129014:	dec00104 	addi	sp,sp,4
81129018:	f800283a 	ret

8112901c <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
8112901c:	defff204 	addi	sp,sp,-56
81129020:	de00012e 	bgeu	sp,et,81129028 <OSFlagDel+0xc>
81129024:	003b68fa 	trap	3
81129028:	dfc00d15 	stw	ra,52(sp)
8112902c:	df000c15 	stw	fp,48(sp)
81129030:	df000c04 	addi	fp,sp,48
81129034:	e13ffd15 	stw	r4,-12(fp)
81129038:	2805883a 	mov	r2,r5
8112903c:	e1bfff15 	stw	r6,-4(fp)
81129040:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81129044:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81129048:	e0bfff17 	ldw	r2,-4(fp)
8112904c:	1000021e 	bne	r2,zero,81129058 <OSFlagDel+0x3c>
        return (pgrp);
81129050:	e0bffd17 	ldw	r2,-12(fp)
81129054:	00008006 	br	81129258 <OSFlagDel+0x23c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81129058:	e0bffd17 	ldw	r2,-12(fp)
8112905c:	1000051e 	bne	r2,zero,81129074 <OSFlagDel+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81129060:	e0bfff17 	ldw	r2,-4(fp)
81129064:	00c01b84 	movi	r3,110
81129068:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112906c:	e0bffd17 	ldw	r2,-12(fp)
81129070:	00007906 	br	81129258 <OSFlagDel+0x23c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81129074:	d0a08303 	ldbu	r2,-32244(gp)
81129078:	10803fcc 	andi	r2,r2,255
8112907c:	10000526 	beq	r2,zero,81129094 <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
81129080:	e0bfff17 	ldw	r2,-4(fp)
81129084:	00c003c4 	movi	r3,15
81129088:	10c00005 	stb	r3,0(r2)
        return (pgrp);
8112908c:	e0bffd17 	ldw	r2,-12(fp)
81129090:	00007106 	br	81129258 <OSFlagDel+0x23c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
81129094:	e0bffd17 	ldw	r2,-12(fp)
81129098:	10800003 	ldbu	r2,0(r2)
8112909c:	10803fcc 	andi	r2,r2,255
811290a0:	10800160 	cmpeqi	r2,r2,5
811290a4:	1000051e 	bne	r2,zero,811290bc <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
811290a8:	e0bfff17 	ldw	r2,-4(fp)
811290ac:	00c00044 	movi	r3,1
811290b0:	10c00005 	stb	r3,0(r2)
        return (pgrp);
811290b4:	e0bffd17 	ldw	r2,-12(fp)
811290b8:	00006706 	br	81129258 <OSFlagDel+0x23c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811290bc:	0005303a 	rdctl	r2,status
811290c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811290c4:	e0fffc17 	ldw	r3,-16(fp)
811290c8:	00bfff84 	movi	r2,-2
811290cc:	1884703a 	and	r2,r3,r2
811290d0:	1001703a 	wrctl	status,r2
  
  return context;
811290d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
811290d8:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
811290dc:	e0bffd17 	ldw	r2,-12(fp)
811290e0:	10800117 	ldw	r2,4(r2)
811290e4:	10000326 	beq	r2,zero,811290f4 <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
811290e8:	00800044 	movi	r2,1
811290ec:	e0bff405 	stb	r2,-48(fp)
811290f0:	00000106 	br	811290f8 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
811290f4:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
811290f8:	e0bffe03 	ldbu	r2,-8(fp)
811290fc:	10000326 	beq	r2,zero,8112910c <OSFlagDel+0xf0>
81129100:	10800060 	cmpeqi	r2,r2,1
81129104:	1000231e 	bne	r2,zero,81129194 <OSFlagDel+0x178>
81129108:	00004806 	br	8112922c <OSFlagDel+0x210>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
8112910c:	e0bff403 	ldbu	r2,-48(fp)
81129110:	1000161e 	bne	r2,zero,8112916c <OSFlagDel+0x150>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
81129114:	e0bffd17 	ldw	r2,-12(fp)
81129118:	00c00fc4 	movi	r3,63
8112911c:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
81129120:	e0bffd17 	ldw	r2,-12(fp)
81129124:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
81129128:	e0bffd17 	ldw	r2,-12(fp)
8112912c:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
81129130:	d0e08817 	ldw	r3,-32224(gp)
81129134:	e0bffd17 	ldw	r2,-12(fp)
81129138:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
8112913c:	e0bffd17 	ldw	r2,-12(fp)
81129140:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
81129144:	e0bffd17 	ldw	r2,-12(fp)
81129148:	d0a08815 	stw	r2,-32224(gp)
8112914c:	e0bff717 	ldw	r2,-36(fp)
81129150:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129154:	e0bff817 	ldw	r2,-32(fp)
81129158:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
8112915c:	e0bfff17 	ldw	r2,-4(fp)
81129160:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
81129164:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
81129168:	00003a06 	br	81129254 <OSFlagDel+0x238>
8112916c:	e0bff717 	ldw	r2,-36(fp)
81129170:	e0bff915 	stw	r2,-28(fp)
81129174:	e0bff917 	ldw	r2,-28(fp)
81129178:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
8112917c:	e0bfff17 	ldw	r2,-4(fp)
81129180:	00c01244 	movi	r3,73
81129184:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
81129188:	e0bffd17 	ldw	r2,-12(fp)
8112918c:	e0bff615 	stw	r2,-40(fp)
             }
             break;
81129190:	00003006 	br	81129254 <OSFlagDel+0x238>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81129194:	e0bffd17 	ldw	r2,-12(fp)
81129198:	10800117 	ldw	r2,4(r2)
8112919c:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
811291a0:	00000606 	br	811291bc <OSFlagDel+0x1a0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
811291a4:	000b883a 	mov	r5,zero
811291a8:	e13ff517 	ldw	r4,-44(fp)
811291ac:	112a1d00 	call	8112a1d0 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
811291b0:	e0bff517 	ldw	r2,-44(fp)
811291b4:	10800017 	ldw	r2,0(r2)
811291b8:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
811291bc:	e0bff517 	ldw	r2,-44(fp)
811291c0:	103ff81e 	bne	r2,zero,811291a4 <__reset+0xfb1091a4>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
811291c4:	e0bffd17 	ldw	r2,-12(fp)
811291c8:	00c00fc4 	movi	r3,63
811291cc:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
811291d0:	e0bffd17 	ldw	r2,-12(fp)
811291d4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
811291d8:	e0bffd17 	ldw	r2,-12(fp)
811291dc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
811291e0:	d0e08817 	ldw	r3,-32224(gp)
811291e4:	e0bffd17 	ldw	r2,-12(fp)
811291e8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
811291ec:	e0bffd17 	ldw	r2,-12(fp)
811291f0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
811291f4:	e0bffd17 	ldw	r2,-12(fp)
811291f8:	d0a08815 	stw	r2,-32224(gp)
811291fc:	e0bff717 	ldw	r2,-36(fp)
81129200:	e0bffa15 	stw	r2,-24(fp)
81129204:	e0bffa17 	ldw	r2,-24(fp)
81129208:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112920c:	e0bff403 	ldbu	r2,-48(fp)
81129210:	10800058 	cmpnei	r2,r2,1
81129214:	1000011e 	bne	r2,zero,8112921c <OSFlagDel+0x200>
                 OS_Sched();                               /* Find highest priority task ready to run  */
81129218:	11282e00 	call	811282e0 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
8112921c:	e0bfff17 	ldw	r2,-4(fp)
81129220:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
81129224:	e03ff615 	stw	zero,-40(fp)
             break;
81129228:	00000a06 	br	81129254 <OSFlagDel+0x238>
8112922c:	e0bff717 	ldw	r2,-36(fp)
81129230:	e0bffb15 	stw	r2,-20(fp)
81129234:	e0bffb17 	ldw	r2,-20(fp)
81129238:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
8112923c:	e0bfff17 	ldw	r2,-4(fp)
81129240:	00c001c4 	movi	r3,7
81129244:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
81129248:	e0bffd17 	ldw	r2,-12(fp)
8112924c:	e0bff615 	stw	r2,-40(fp)
             break;
81129250:	0001883a 	nop
    }
    return (pgrp_return);
81129254:	e0bff617 	ldw	r2,-40(fp)
}
81129258:	e037883a 	mov	sp,fp
8112925c:	dfc00117 	ldw	ra,4(sp)
81129260:	df000017 	ldw	fp,0(sp)
81129264:	dec00204 	addi	sp,sp,8
81129268:	f800283a 	ret

8112926c <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112926c:	defff604 	addi	sp,sp,-40
81129270:	de00012e 	bgeu	sp,et,81129278 <OSFlagNameGet+0xc>
81129274:	003b68fa 	trap	3
81129278:	dfc00915 	stw	ra,36(sp)
8112927c:	df000815 	stw	fp,32(sp)
81129280:	df000804 	addi	fp,sp,32
81129284:	e13ffd15 	stw	r4,-12(fp)
81129288:	e17ffe15 	stw	r5,-8(fp)
8112928c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
81129290:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
81129294:	e0bfff17 	ldw	r2,-4(fp)
81129298:	1000021e 	bne	r2,zero,811292a4 <OSFlagNameGet+0x38>
        return (0);
8112929c:	0005883a 	mov	r2,zero
811292a0:	00003906 	br	81129388 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
811292a4:	e0bffd17 	ldw	r2,-12(fp)
811292a8:	1000051e 	bne	r2,zero,811292c0 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811292ac:	e0bfff17 	ldw	r2,-4(fp)
811292b0:	00c01b84 	movi	r3,110
811292b4:	10c00005 	stb	r3,0(r2)
        return (0);
811292b8:	0005883a 	mov	r2,zero
811292bc:	00003206 	br	81129388 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
811292c0:	e0bffe17 	ldw	r2,-8(fp)
811292c4:	1000051e 	bne	r2,zero,811292dc <OSFlagNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
811292c8:	e0bfff17 	ldw	r2,-4(fp)
811292cc:	00c00304 	movi	r3,12
811292d0:	10c00005 	stb	r3,0(r2)
        return (0);
811292d4:	0005883a 	mov	r2,zero
811292d8:	00002b06 	br	81129388 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811292dc:	d0a08303 	ldbu	r2,-32244(gp)
811292e0:	10803fcc 	andi	r2,r2,255
811292e4:	10000526 	beq	r2,zero,811292fc <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
811292e8:	e0bfff17 	ldw	r2,-4(fp)
811292ec:	00c00444 	movi	r3,17
811292f0:	10c00005 	stb	r3,0(r2)
        return (0);
811292f4:	0005883a 	mov	r2,zero
811292f8:	00002306 	br	81129388 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811292fc:	0005303a 	rdctl	r2,status
81129300:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129304:	e0fffc17 	ldw	r3,-16(fp)
81129308:	00bfff84 	movi	r2,-2
8112930c:	1884703a 	and	r2,r3,r2
81129310:	1001703a 	wrctl	status,r2
  
  return context;
81129314:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81129318:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
8112931c:	e0bffd17 	ldw	r2,-12(fp)
81129320:	10800003 	ldbu	r2,0(r2)
81129324:	10803fcc 	andi	r2,r2,255
81129328:	10800160 	cmpeqi	r2,r2,5
8112932c:	1000091e 	bne	r2,zero,81129354 <OSFlagNameGet+0xe8>
81129330:	e0bff817 	ldw	r2,-32(fp)
81129334:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129338:	e0bff917 	ldw	r2,-28(fp)
8112933c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
81129340:	e0bfff17 	ldw	r2,-4(fp)
81129344:	00c00044 	movi	r3,1
81129348:	10c00005 	stb	r3,0(r2)
        return (0);
8112934c:	0005883a 	mov	r2,zero
81129350:	00000d06 	br	81129388 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
81129354:	e0bffd17 	ldw	r2,-12(fp)
81129358:	10800284 	addi	r2,r2,10
8112935c:	100b883a 	mov	r5,r2
81129360:	e13ffe17 	ldw	r4,-8(fp)
81129364:	11284340 	call	81128434 <OS_StrCopy>
81129368:	e0bffb05 	stb	r2,-20(fp)
8112936c:	e0bff817 	ldw	r2,-32(fp)
81129370:	e0bffa15 	stw	r2,-24(fp)
81129374:	e0bffa17 	ldw	r2,-24(fp)
81129378:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112937c:	e0bfff17 	ldw	r2,-4(fp)
81129380:	10000005 	stb	zero,0(r2)
    return (len);
81129384:	e0bffb03 	ldbu	r2,-20(fp)
}
81129388:	e037883a 	mov	sp,fp
8112938c:	dfc00117 	ldw	ra,4(sp)
81129390:	df000017 	ldw	fp,0(sp)
81129394:	dec00204 	addi	sp,sp,8
81129398:	f800283a 	ret

8112939c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
8112939c:	defff504 	addi	sp,sp,-44
811293a0:	de00012e 	bgeu	sp,et,811293a8 <OSFlagNameSet+0xc>
811293a4:	003b68fa 	trap	3
811293a8:	dfc00a15 	stw	ra,40(sp)
811293ac:	df000915 	stw	fp,36(sp)
811293b0:	df000904 	addi	fp,sp,36
811293b4:	e13ffd15 	stw	r4,-12(fp)
811293b8:	e17ffe15 	stw	r5,-8(fp)
811293bc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
811293c0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
811293c4:	e0bfff17 	ldw	r2,-4(fp)
811293c8:	10004326 	beq	r2,zero,811294d8 <OSFlagNameSet+0x13c>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
811293cc:	e0bffd17 	ldw	r2,-12(fp)
811293d0:	1000041e 	bne	r2,zero,811293e4 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
811293d4:	e0bfff17 	ldw	r2,-4(fp)
811293d8:	00c01b84 	movi	r3,110
811293dc:	10c00005 	stb	r3,0(r2)
        return;
811293e0:	00003e06 	br	811294dc <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
811293e4:	e0bffe17 	ldw	r2,-8(fp)
811293e8:	1000041e 	bne	r2,zero,811293fc <OSFlagNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
811293ec:	e0bfff17 	ldw	r2,-4(fp)
811293f0:	00c00304 	movi	r3,12
811293f4:	10c00005 	stb	r3,0(r2)
        return;
811293f8:	00003806 	br	811294dc <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
811293fc:	d0a08303 	ldbu	r2,-32244(gp)
81129400:	10803fcc 	andi	r2,r2,255
81129404:	10000426 	beq	r2,zero,81129418 <OSFlagNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
81129408:	e0bfff17 	ldw	r2,-4(fp)
8112940c:	00c00484 	movi	r3,18
81129410:	10c00005 	stb	r3,0(r2)
        return;
81129414:	00003106 	br	811294dc <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129418:	0005303a 	rdctl	r2,status
8112941c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129420:	e0fffc17 	ldw	r3,-16(fp)
81129424:	00bfff84 	movi	r2,-2
81129428:	1884703a 	and	r2,r3,r2
8112942c:	1001703a 	wrctl	status,r2
  
  return context;
81129430:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81129434:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
81129438:	e0bffd17 	ldw	r2,-12(fp)
8112943c:	10800003 	ldbu	r2,0(r2)
81129440:	10803fcc 	andi	r2,r2,255
81129444:	10800160 	cmpeqi	r2,r2,5
81129448:	1000081e 	bne	r2,zero,8112946c <OSFlagNameSet+0xd0>
8112944c:	e0bff717 	ldw	r2,-36(fp)
81129450:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129454:	e0bff817 	ldw	r2,-32(fp)
81129458:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
8112945c:	e0bfff17 	ldw	r2,-4(fp)
81129460:	00c00044 	movi	r3,1
81129464:	10c00005 	stb	r3,0(r2)
        return;
81129468:	00001c06 	br	811294dc <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112946c:	e13ffe17 	ldw	r4,-8(fp)
81129470:	11284b00 	call	811284b0 <OS_StrLen>
81129474:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
81129478:	e0bffa03 	ldbu	r2,-24(fp)
8112947c:	10800830 	cmpltui	r2,r2,32
81129480:	1000081e 	bne	r2,zero,811294a4 <OSFlagNameSet+0x108>
81129484:	e0bff717 	ldw	r2,-36(fp)
81129488:	e0bff915 	stw	r2,-28(fp)
8112948c:	e0bff917 	ldw	r2,-28(fp)
81129490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
81129494:	e0bfff17 	ldw	r2,-4(fp)
81129498:	00c01cc4 	movi	r3,115
8112949c:	10c00005 	stb	r3,0(r2)
        return;
811294a0:	00000e06 	br	811294dc <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
811294a4:	e0bffd17 	ldw	r2,-12(fp)
811294a8:	10800284 	addi	r2,r2,10
811294ac:	e17ffe17 	ldw	r5,-8(fp)
811294b0:	1009883a 	mov	r4,r2
811294b4:	11284340 	call	81128434 <OS_StrCopy>
811294b8:	e0bff717 	ldw	r2,-36(fp)
811294bc:	e0bffb15 	stw	r2,-20(fp)
811294c0:	e0bffb17 	ldw	r2,-20(fp)
811294c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
811294c8:	e0bfff17 	ldw	r2,-4(fp)
811294cc:	10000005 	stb	zero,0(r2)
    return;
811294d0:	0001883a 	nop
811294d4:	00000106 	br	811294dc <OSFlagNameSet+0x140>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
811294d8:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
811294dc:	e037883a 	mov	sp,fp
811294e0:	dfc00117 	ldw	ra,4(sp)
811294e4:	df000017 	ldw	fp,0(sp)
811294e8:	dec00204 	addi	sp,sp,8
811294ec:	f800283a 	ret

811294f0 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
811294f0:	deffe104 	addi	sp,sp,-124
811294f4:	de00012e 	bgeu	sp,et,811294fc <OSFlagPend+0xc>
811294f8:	003b68fa 	trap	3
811294fc:	dfc01e15 	stw	ra,120(sp)
81129500:	df001d15 	stw	fp,116(sp)
81129504:	df001d04 	addi	fp,sp,116
81129508:	e13ffc15 	stw	r4,-16(fp)
8112950c:	2809883a 	mov	r4,r5
81129510:	3007883a 	mov	r3,r6
81129514:	3805883a 	mov	r2,r7
81129518:	e13ffd0d 	sth	r4,-12(fp)
8112951c:	e0fffe05 	stb	r3,-8(fp)
81129520:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81129524:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
81129528:	e0800217 	ldw	r2,8(fp)
8112952c:	1000021e 	bne	r2,zero,81129538 <OSFlagPend+0x48>
        return ((OS_FLAGS)0);
81129530:	0005883a 	mov	r2,zero
81129534:	00015906 	br	81129a9c <OSFlagPend+0x5ac>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
81129538:	e0bffc17 	ldw	r2,-16(fp)
8112953c:	1000051e 	bne	r2,zero,81129554 <OSFlagPend+0x64>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81129540:	e0800217 	ldw	r2,8(fp)
81129544:	00c01b84 	movi	r3,110
81129548:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112954c:	0005883a 	mov	r2,zero
81129550:	00015206 	br	81129a9c <OSFlagPend+0x5ac>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
81129554:	d0a08303 	ldbu	r2,-32244(gp)
81129558:	10803fcc 	andi	r2,r2,255
8112955c:	10000526 	beq	r2,zero,81129574 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
81129560:	e0800217 	ldw	r2,8(fp)
81129564:	00c00084 	movi	r3,2
81129568:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112956c:	0005883a 	mov	r2,zero
81129570:	00014a06 	br	81129a9c <OSFlagPend+0x5ac>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
81129574:	d0a07103 	ldbu	r2,-32316(gp)
81129578:	10803fcc 	andi	r2,r2,255
8112957c:	10000526 	beq	r2,zero,81129594 <OSFlagPend+0xa4>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
81129580:	e0800217 	ldw	r2,8(fp)
81129584:	00c00344 	movi	r3,13
81129588:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
8112958c:	0005883a 	mov	r2,zero
81129590:	00014206 	br	81129a9c <OSFlagPend+0x5ac>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
81129594:	e0bffc17 	ldw	r2,-16(fp)
81129598:	10800003 	ldbu	r2,0(r2)
8112959c:	10803fcc 	andi	r2,r2,255
811295a0:	10800160 	cmpeqi	r2,r2,5
811295a4:	1000051e 	bne	r2,zero,811295bc <OSFlagPend+0xcc>
        *perr = OS_ERR_EVENT_TYPE;
811295a8:	e0800217 	ldw	r2,8(fp)
811295ac:	00c00044 	movi	r3,1
811295b0:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
811295b4:	0005883a 	mov	r2,zero
811295b8:	00013806 	br	81129a9c <OSFlagPend+0x5ac>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
811295bc:	e0fffe03 	ldbu	r3,-8(fp)
811295c0:	00bfe004 	movi	r2,-128
811295c4:	1884703a 	and	r2,r3,r2
811295c8:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
811295cc:	e0bfe603 	ldbu	r2,-104(fp)
811295d0:	10000626 	beq	r2,zero,811295ec <OSFlagPend+0xfc>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
811295d4:	e0bffe03 	ldbu	r2,-8(fp)
811295d8:	10801fcc 	andi	r2,r2,127
811295dc:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
811295e0:	00800044 	movi	r2,1
811295e4:	e0bfe405 	stb	r2,-112(fp)
811295e8:	00000106 	br	811295f0 <OSFlagPend+0x100>
    } else {
        consume    = OS_FALSE;
811295ec:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811295f0:	0005303a 	rdctl	r2,status
811295f4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811295f8:	e0fff617 	ldw	r3,-40(fp)
811295fc:	00bfff84 	movi	r2,-2
81129600:	1884703a 	and	r2,r3,r2
81129604:	1001703a 	wrctl	status,r2
  
  return context;
81129608:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112960c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
81129610:	e0bffe03 	ldbu	r2,-8(fp)
81129614:	10c00060 	cmpeqi	r3,r2,1
81129618:	1800921e 	bne	r3,zero,81129864 <OSFlagPend+0x374>
8112961c:	10c00088 	cmpgei	r3,r2,2
81129620:	1800021e 	bne	r3,zero,8112962c <OSFlagPend+0x13c>
81129624:	10006126 	beq	r2,zero,811297ac <OSFlagPend+0x2bc>
81129628:	0000bb06 	br	81129918 <OSFlagPend+0x428>
8112962c:	10c000a0 	cmpeqi	r3,r2,2
81129630:	1800031e 	bne	r3,zero,81129640 <OSFlagPend+0x150>
81129634:	108000e0 	cmpeqi	r2,r2,3
81129638:	10002f1e 	bne	r2,zero,811296f8 <OSFlagPend+0x208>
8112963c:	0000b606 	br	81129918 <OSFlagPend+0x428>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
81129640:	e0bffc17 	ldw	r2,-16(fp)
81129644:	10c0020b 	ldhu	r3,8(r2)
81129648:	e0bffd0b 	ldhu	r2,-12(fp)
8112964c:	1884703a 	and	r2,r3,r2
81129650:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
81129654:	e0ffe80b 	ldhu	r3,-96(fp)
81129658:	e0bffd0b 	ldhu	r2,-12(fp)
8112965c:	1880171e 	bne	r3,r2,811296bc <OSFlagPend+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81129660:	e0bfe403 	ldbu	r2,-112(fp)
81129664:	10800058 	cmpnei	r2,r2,1
81129668:	1000091e 	bne	r2,zero,81129690 <OSFlagPend+0x1a0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
8112966c:	e0bffc17 	ldw	r2,-16(fp)
81129670:	1080020b 	ldhu	r2,8(r2)
81129674:	1007883a 	mov	r3,r2
81129678:	e0bfe80b 	ldhu	r2,-96(fp)
8112967c:	0084303a 	nor	r2,zero,r2
81129680:	1884703a 	and	r2,r3,r2
81129684:	1007883a 	mov	r3,r2
81129688:	e0bffc17 	ldw	r2,-16(fp)
8112968c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81129690:	d0a08417 	ldw	r2,-32240(gp)
81129694:	e0ffe80b 	ldhu	r3,-96(fp)
81129698:	10c00b0d 	sth	r3,44(r2)
8112969c:	e0bfe517 	ldw	r2,-108(fp)
811296a0:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811296a4:	e0bfe717 	ldw	r2,-100(fp)
811296a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
811296ac:	e0800217 	ldw	r2,8(fp)
811296b0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
811296b4:	e0bfe80b 	ldhu	r2,-96(fp)
811296b8:	0000f806 	br	81129a9c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
811296bc:	e13ffd0b 	ldhu	r4,-12(fp)
811296c0:	e17ffe03 	ldbu	r5,-8(fp)
811296c4:	e0bfff0b 	ldhu	r2,-4(fp)
811296c8:	e0fff704 	addi	r3,fp,-36
811296cc:	d8800015 	stw	r2,0(sp)
811296d0:	280f883a 	mov	r7,r5
811296d4:	200d883a 	mov	r6,r4
811296d8:	180b883a 	mov	r5,r3
811296dc:	e13ffc17 	ldw	r4,-16(fp)
811296e0:	1129f800 	call	81129f80 <OS_FlagBlock>
811296e4:	e0bfe517 	ldw	r2,-108(fp)
811296e8:	e0bfe915 	stw	r2,-92(fp)
811296ec:	e0bfe917 	ldw	r2,-92(fp)
811296f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
811296f4:	00009206 	br	81129940 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
811296f8:	e0bffc17 	ldw	r2,-16(fp)
811296fc:	10c0020b 	ldhu	r3,8(r2)
81129700:	e0bffd0b 	ldhu	r2,-12(fp)
81129704:	1884703a 	and	r2,r3,r2
81129708:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
8112970c:	e0bfe80b 	ldhu	r2,-96(fp)
81129710:	10001726 	beq	r2,zero,81129770 <OSFlagPend+0x280>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81129714:	e0bfe403 	ldbu	r2,-112(fp)
81129718:	10800058 	cmpnei	r2,r2,1
8112971c:	1000091e 	bne	r2,zero,81129744 <OSFlagPend+0x254>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
81129720:	e0bffc17 	ldw	r2,-16(fp)
81129724:	1080020b 	ldhu	r2,8(r2)
81129728:	1007883a 	mov	r3,r2
8112972c:	e0bfe80b 	ldhu	r2,-96(fp)
81129730:	0084303a 	nor	r2,zero,r2
81129734:	1884703a 	and	r2,r3,r2
81129738:	1007883a 	mov	r3,r2
8112973c:	e0bffc17 	ldw	r2,-16(fp)
81129740:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
81129744:	d0a08417 	ldw	r2,-32240(gp)
81129748:	e0ffe80b 	ldhu	r3,-96(fp)
8112974c:	10c00b0d 	sth	r3,44(r2)
81129750:	e0bfe517 	ldw	r2,-108(fp)
81129754:	e0bfea15 	stw	r2,-88(fp)
81129758:	e0bfea17 	ldw	r2,-88(fp)
8112975c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81129760:	e0800217 	ldw	r2,8(fp)
81129764:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81129768:	e0bfe80b 	ldhu	r2,-96(fp)
8112976c:	0000cb06 	br	81129a9c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81129770:	e13ffd0b 	ldhu	r4,-12(fp)
81129774:	e17ffe03 	ldbu	r5,-8(fp)
81129778:	e0bfff0b 	ldhu	r2,-4(fp)
8112977c:	e0fff704 	addi	r3,fp,-36
81129780:	d8800015 	stw	r2,0(sp)
81129784:	280f883a 	mov	r7,r5
81129788:	200d883a 	mov	r6,r4
8112978c:	180b883a 	mov	r5,r3
81129790:	e13ffc17 	ldw	r4,-16(fp)
81129794:	1129f800 	call	81129f80 <OS_FlagBlock>
81129798:	e0bfe517 	ldw	r2,-108(fp)
8112979c:	e0bfeb15 	stw	r2,-84(fp)
811297a0:	e0bfeb17 	ldw	r2,-84(fp)
811297a4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
811297a8:	00006506 	br	81129940 <OSFlagPend+0x450>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
811297ac:	e0bffc17 	ldw	r2,-16(fp)
811297b0:	1080020b 	ldhu	r2,8(r2)
811297b4:	0084303a 	nor	r2,zero,r2
811297b8:	1007883a 	mov	r3,r2
811297bc:	e0bffd0b 	ldhu	r2,-12(fp)
811297c0:	1884703a 	and	r2,r3,r2
811297c4:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
811297c8:	e0ffe80b 	ldhu	r3,-96(fp)
811297cc:	e0bffd0b 	ldhu	r2,-12(fp)
811297d0:	1880151e 	bne	r3,r2,81129828 <OSFlagPend+0x338>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
811297d4:	e0bfe403 	ldbu	r2,-112(fp)
811297d8:	10800058 	cmpnei	r2,r2,1
811297dc:	1000071e 	bne	r2,zero,811297fc <OSFlagPend+0x30c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
811297e0:	e0bffc17 	ldw	r2,-16(fp)
811297e4:	10c0020b 	ldhu	r3,8(r2)
811297e8:	e0bfe80b 	ldhu	r2,-96(fp)
811297ec:	1884b03a 	or	r2,r3,r2
811297f0:	1007883a 	mov	r3,r2
811297f4:	e0bffc17 	ldw	r2,-16(fp)
811297f8:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
811297fc:	d0a08417 	ldw	r2,-32240(gp)
81129800:	e0ffe80b 	ldhu	r3,-96(fp)
81129804:	10c00b0d 	sth	r3,44(r2)
81129808:	e0bfe517 	ldw	r2,-108(fp)
8112980c:	e0bfec15 	stw	r2,-80(fp)
81129810:	e0bfec17 	ldw	r2,-80(fp)
81129814:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
81129818:	e0800217 	ldw	r2,8(fp)
8112981c:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
81129820:	e0bfe80b 	ldhu	r2,-96(fp)
81129824:	00009d06 	br	81129a9c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
81129828:	e13ffd0b 	ldhu	r4,-12(fp)
8112982c:	e17ffe03 	ldbu	r5,-8(fp)
81129830:	e0bfff0b 	ldhu	r2,-4(fp)
81129834:	e0fff704 	addi	r3,fp,-36
81129838:	d8800015 	stw	r2,0(sp)
8112983c:	280f883a 	mov	r7,r5
81129840:	200d883a 	mov	r6,r4
81129844:	180b883a 	mov	r5,r3
81129848:	e13ffc17 	ldw	r4,-16(fp)
8112984c:	1129f800 	call	81129f80 <OS_FlagBlock>
81129850:	e0bfe517 	ldw	r2,-108(fp)
81129854:	e0bfed15 	stw	r2,-76(fp)
81129858:	e0bfed17 	ldw	r2,-76(fp)
8112985c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81129860:	00003706 	br	81129940 <OSFlagPend+0x450>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
81129864:	e0bffc17 	ldw	r2,-16(fp)
81129868:	1080020b 	ldhu	r2,8(r2)
8112986c:	0084303a 	nor	r2,zero,r2
81129870:	1007883a 	mov	r3,r2
81129874:	e0bffd0b 	ldhu	r2,-12(fp)
81129878:	1884703a 	and	r2,r3,r2
8112987c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
81129880:	e0bfe80b 	ldhu	r2,-96(fp)
81129884:	10001526 	beq	r2,zero,811298dc <OSFlagPend+0x3ec>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
81129888:	e0bfe403 	ldbu	r2,-112(fp)
8112988c:	10800058 	cmpnei	r2,r2,1
81129890:	1000071e 	bne	r2,zero,811298b0 <OSFlagPend+0x3c0>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
81129894:	e0bffc17 	ldw	r2,-16(fp)
81129898:	10c0020b 	ldhu	r3,8(r2)
8112989c:	e0bfe80b 	ldhu	r2,-96(fp)
811298a0:	1884b03a 	or	r2,r3,r2
811298a4:	1007883a 	mov	r3,r2
811298a8:	e0bffc17 	ldw	r2,-16(fp)
811298ac:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
811298b0:	d0a08417 	ldw	r2,-32240(gp)
811298b4:	e0ffe80b 	ldhu	r3,-96(fp)
811298b8:	10c00b0d 	sth	r3,44(r2)
811298bc:	e0bfe517 	ldw	r2,-108(fp)
811298c0:	e0bfee15 	stw	r2,-72(fp)
811298c4:	e0bfee17 	ldw	r2,-72(fp)
811298c8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
811298cc:	e0800217 	ldw	r2,8(fp)
811298d0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
811298d4:	e0bfe80b 	ldhu	r2,-96(fp)
811298d8:	00007006 	br	81129a9c <OSFlagPend+0x5ac>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
811298dc:	e13ffd0b 	ldhu	r4,-12(fp)
811298e0:	e17ffe03 	ldbu	r5,-8(fp)
811298e4:	e0bfff0b 	ldhu	r2,-4(fp)
811298e8:	e0fff704 	addi	r3,fp,-36
811298ec:	d8800015 	stw	r2,0(sp)
811298f0:	280f883a 	mov	r7,r5
811298f4:	200d883a 	mov	r6,r4
811298f8:	180b883a 	mov	r5,r3
811298fc:	e13ffc17 	ldw	r4,-16(fp)
81129900:	1129f800 	call	81129f80 <OS_FlagBlock>
81129904:	e0bfe517 	ldw	r2,-108(fp)
81129908:	e0bfef15 	stw	r2,-68(fp)
8112990c:	e0bfef17 	ldw	r2,-68(fp)
81129910:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
81129914:	00000a06 	br	81129940 <OSFlagPend+0x450>
81129918:	e0bfe517 	ldw	r2,-108(fp)
8112991c:	e0bff015 	stw	r2,-64(fp)
81129920:	e0bff017 	ldw	r2,-64(fp)
81129924:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
81129928:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
8112992c:	e0800217 	ldw	r2,8(fp)
81129930:	00c01bc4 	movi	r3,111
81129934:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
81129938:	e0bfe80b 	ldhu	r2,-96(fp)
8112993c:	00005706 	br	81129a9c <OSFlagPend+0x5ac>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
81129940:	11282e00 	call	811282e0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129944:	0005303a 	rdctl	r2,status
81129948:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112994c:	e0fff117 	ldw	r3,-60(fp)
81129950:	00bfff84 	movi	r2,-2
81129954:	1884703a 	and	r2,r3,r2
81129958:	1001703a 	wrctl	status,r2
  
  return context;
8112995c:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
81129960:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
81129964:	d0a08417 	ldw	r2,-32240(gp)
81129968:	10800c43 	ldbu	r2,49(r2)
8112996c:	10803fcc 	andi	r2,r2,255
81129970:	10001c26 	beq	r2,zero,811299e4 <OSFlagPend+0x4f4>
        pend_stat                = OSTCBCur->OSTCBStatPend;
81129974:	d0a08417 	ldw	r2,-32240(gp)
81129978:	10800c43 	ldbu	r2,49(r2)
8112997c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
81129980:	d0a08417 	ldw	r2,-32240(gp)
81129984:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
81129988:	e0bff704 	addi	r2,fp,-36
8112998c:	1009883a 	mov	r4,r2
81129990:	112a2cc0 	call	8112a2cc <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
81129994:	d0a08417 	ldw	r2,-32240(gp)
81129998:	10000c05 	stb	zero,48(r2)
8112999c:	e0bfe517 	ldw	r2,-108(fp)
811299a0:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811299a4:	e0bff217 	ldw	r2,-56(fp)
811299a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
811299ac:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
811299b0:	e0bff303 	ldbu	r2,-52(fp)
811299b4:	108000a0 	cmpeqi	r2,r2,2
811299b8:	10000426 	beq	r2,zero,811299cc <OSFlagPend+0x4dc>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
811299bc:	e0800217 	ldw	r2,8(fp)
811299c0:	00c00384 	movi	r3,14
811299c4:	10c00005 	stb	r3,0(r2)
                 break;
811299c8:	00000406 	br	811299dc <OSFlagPend+0x4ec>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
811299cc:	e0800217 	ldw	r2,8(fp)
811299d0:	00c00284 	movi	r3,10
811299d4:	10c00005 	stb	r3,0(r2)
                 break;
811299d8:	0001883a 	nop
        }
        return (flags_rdy);
811299dc:	e0bfe80b 	ldhu	r2,-96(fp)
811299e0:	00002e06 	br	81129a9c <OSFlagPend+0x5ac>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
811299e4:	d0a08417 	ldw	r2,-32240(gp)
811299e8:	10800b0b 	ldhu	r2,44(r2)
811299ec:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
811299f0:	e0bfe403 	ldbu	r2,-112(fp)
811299f4:	10800058 	cmpnei	r2,r2,1
811299f8:	1000211e 	bne	r2,zero,81129a80 <OSFlagPend+0x590>
        switch (wait_type) {
811299fc:	e0bffe03 	ldbu	r2,-8(fp)
81129a00:	10001616 	blt	r2,zero,81129a5c <OSFlagPend+0x56c>
81129a04:	10c00090 	cmplti	r3,r2,2
81129a08:	18000c1e 	bne	r3,zero,81129a3c <OSFlagPend+0x54c>
81129a0c:	10800108 	cmpgei	r2,r2,4
81129a10:	1000121e 	bne	r2,zero,81129a5c <OSFlagPend+0x56c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
81129a14:	e0bffc17 	ldw	r2,-16(fp)
81129a18:	1080020b 	ldhu	r2,8(r2)
81129a1c:	1007883a 	mov	r3,r2
81129a20:	e0bfe80b 	ldhu	r2,-96(fp)
81129a24:	0084303a 	nor	r2,zero,r2
81129a28:	1884703a 	and	r2,r3,r2
81129a2c:	1007883a 	mov	r3,r2
81129a30:	e0bffc17 	ldw	r2,-16(fp)
81129a34:	10c0020d 	sth	r3,8(r2)
                 break;
81129a38:	00001106 	br	81129a80 <OSFlagPend+0x590>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
81129a3c:	e0bffc17 	ldw	r2,-16(fp)
81129a40:	10c0020b 	ldhu	r3,8(r2)
81129a44:	e0bfe80b 	ldhu	r2,-96(fp)
81129a48:	1884b03a 	or	r2,r3,r2
81129a4c:	1007883a 	mov	r3,r2
81129a50:	e0bffc17 	ldw	r2,-16(fp)
81129a54:	10c0020d 	sth	r3,8(r2)
                 break;
81129a58:	00000906 	br	81129a80 <OSFlagPend+0x590>
81129a5c:	e0bfe517 	ldw	r2,-108(fp)
81129a60:	e0bff415 	stw	r2,-48(fp)
81129a64:	e0bff417 	ldw	r2,-48(fp)
81129a68:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
81129a6c:	e0800217 	ldw	r2,8(fp)
81129a70:	00c01bc4 	movi	r3,111
81129a74:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
81129a78:	0005883a 	mov	r2,zero
81129a7c:	00000706 	br	81129a9c <OSFlagPend+0x5ac>
81129a80:	e0bfe517 	ldw	r2,-108(fp)
81129a84:	e0bff515 	stw	r2,-44(fp)
81129a88:	e0bff517 	ldw	r2,-44(fp)
81129a8c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
81129a90:	e0800217 	ldw	r2,8(fp)
81129a94:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
81129a98:	e0bfe80b 	ldhu	r2,-96(fp)
}
81129a9c:	e037883a 	mov	sp,fp
81129aa0:	dfc00117 	ldw	ra,4(sp)
81129aa4:	df000017 	ldw	fp,0(sp)
81129aa8:	dec00204 	addi	sp,sp,8
81129aac:	f800283a 	ret

81129ab0 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
81129ab0:	defffb04 	addi	sp,sp,-20
81129ab4:	de00012e 	bgeu	sp,et,81129abc <OSFlagPendGetFlagsRdy+0xc>
81129ab8:	003b68fa 	trap	3
81129abc:	df000415 	stw	fp,16(sp)
81129ac0:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
81129ac4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129ac8:	0005303a 	rdctl	r2,status
81129acc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129ad0:	e0fffe17 	ldw	r3,-8(fp)
81129ad4:	00bfff84 	movi	r2,-2
81129ad8:	1884703a 	and	r2,r3,r2
81129adc:	1001703a 	wrctl	status,r2
  
  return context;
81129ae0:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
81129ae4:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
81129ae8:	d0a08417 	ldw	r2,-32240(gp)
81129aec:	10800b0b 	ldhu	r2,44(r2)
81129af0:	e0bffd0d 	sth	r2,-12(fp)
81129af4:	e0bffc17 	ldw	r2,-16(fp)
81129af8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129afc:	e0bfff17 	ldw	r2,-4(fp)
81129b00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
81129b04:	e0bffd0b 	ldhu	r2,-12(fp)
}
81129b08:	e037883a 	mov	sp,fp
81129b0c:	df000017 	ldw	fp,0(sp)
81129b10:	dec00104 	addi	sp,sp,4
81129b14:	f800283a 	ret

81129b18 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
81129b18:	deffef04 	addi	sp,sp,-68
81129b1c:	de00012e 	bgeu	sp,et,81129b24 <OSFlagPost+0xc>
81129b20:	003b68fa 	trap	3
81129b24:	dfc01015 	stw	ra,64(sp)
81129b28:	df000f15 	stw	fp,60(sp)
81129b2c:	df000f04 	addi	fp,sp,60
81129b30:	e13ffc15 	stw	r4,-16(fp)
81129b34:	2807883a 	mov	r3,r5
81129b38:	3005883a 	mov	r2,r6
81129b3c:	e1ffff15 	stw	r7,-4(fp)
81129b40:	e0fffd0d 	sth	r3,-12(fp)
81129b44:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
81129b48:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
81129b4c:	e0bfff17 	ldw	r2,-4(fp)
81129b50:	1000021e 	bne	r2,zero,81129b5c <OSFlagPost+0x44>
        return ((OS_FLAGS)0);
81129b54:	0005883a 	mov	r2,zero
81129b58:	0000d106 	br	81129ea0 <OSFlagPost+0x388>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
81129b5c:	e0bffc17 	ldw	r2,-16(fp)
81129b60:	1000051e 	bne	r2,zero,81129b78 <OSFlagPost+0x60>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81129b64:	e0bfff17 	ldw	r2,-4(fp)
81129b68:	00c01b84 	movi	r3,110
81129b6c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81129b70:	0005883a 	mov	r2,zero
81129b74:	0000ca06 	br	81129ea0 <OSFlagPost+0x388>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
81129b78:	e0bffc17 	ldw	r2,-16(fp)
81129b7c:	10800003 	ldbu	r2,0(r2)
81129b80:	10803fcc 	andi	r2,r2,255
81129b84:	10800160 	cmpeqi	r2,r2,5
81129b88:	1000051e 	bne	r2,zero,81129ba0 <OSFlagPost+0x88>
        *perr = OS_ERR_EVENT_TYPE;
81129b8c:	e0bfff17 	ldw	r2,-4(fp)
81129b90:	00c00044 	movi	r3,1
81129b94:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81129b98:	0005883a 	mov	r2,zero
81129b9c:	0000c006 	br	81129ea0 <OSFlagPost+0x388>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129ba0:	0005303a 	rdctl	r2,status
81129ba4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129ba8:	e0fffb17 	ldw	r3,-20(fp)
81129bac:	00bfff84 	movi	r2,-2
81129bb0:	1884703a 	and	r2,r3,r2
81129bb4:	1001703a 	wrctl	status,r2
  
  return context;
81129bb8:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
81129bbc:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
81129bc0:	e0bffe03 	ldbu	r2,-8(fp)
81129bc4:	10000326 	beq	r2,zero,81129bd4 <OSFlagPost+0xbc>
81129bc8:	10800060 	cmpeqi	r2,r2,1
81129bcc:	10000b1e 	bne	r2,zero,81129bfc <OSFlagPost+0xe4>
81129bd0:	00001206 	br	81129c1c <OSFlagPost+0x104>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
81129bd4:	e0bffc17 	ldw	r2,-16(fp)
81129bd8:	1080020b 	ldhu	r2,8(r2)
81129bdc:	1007883a 	mov	r3,r2
81129be0:	e0bffd0b 	ldhu	r2,-12(fp)
81129be4:	0084303a 	nor	r2,zero,r2
81129be8:	1884703a 	and	r2,r3,r2
81129bec:	1007883a 	mov	r3,r2
81129bf0:	e0bffc17 	ldw	r2,-16(fp)
81129bf4:	10c0020d 	sth	r3,8(r2)
             break;
81129bf8:	00001106 	br	81129c40 <OSFlagPost+0x128>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
81129bfc:	e0bffc17 	ldw	r2,-16(fp)
81129c00:	10c0020b 	ldhu	r3,8(r2)
81129c04:	e0bffd0b 	ldhu	r2,-12(fp)
81129c08:	1884b03a 	or	r2,r3,r2
81129c0c:	1007883a 	mov	r3,r2
81129c10:	e0bffc17 	ldw	r2,-16(fp)
81129c14:	10c0020d 	sth	r3,8(r2)
             break;
81129c18:	00000906 	br	81129c40 <OSFlagPost+0x128>
81129c1c:	e0bff317 	ldw	r2,-52(fp)
81129c20:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129c24:	e0bff417 	ldw	r2,-48(fp)
81129c28:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
81129c2c:	e0bfff17 	ldw	r2,-4(fp)
81129c30:	00c01c44 	movi	r3,113
81129c34:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
81129c38:	0005883a 	mov	r2,zero
81129c3c:	00009806 	br	81129ea0 <OSFlagPost+0x388>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
81129c40:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
81129c44:	e0bffc17 	ldw	r2,-16(fp)
81129c48:	10800117 	ldw	r2,4(r2)
81129c4c:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
81129c50:	00007706 	br	81129e30 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
81129c54:	e0bff117 	ldw	r2,-60(fp)
81129c58:	10800483 	ldbu	r2,18(r2)
81129c5c:	10803fcc 	andi	r2,r2,255
81129c60:	10c00060 	cmpeqi	r3,r2,1
81129c64:	18004a1e 	bne	r3,zero,81129d90 <OSFlagPost+0x278>
81129c68:	10c00088 	cmpgei	r3,r2,2
81129c6c:	1800021e 	bne	r3,zero,81129c78 <OSFlagPost+0x160>
81129c70:	10002f26 	beq	r2,zero,81129d30 <OSFlagPost+0x218>
81129c74:	00005b06 	br	81129de4 <OSFlagPost+0x2cc>
81129c78:	10c000a0 	cmpeqi	r3,r2,2
81129c7c:	1800031e 	bne	r3,zero,81129c8c <OSFlagPost+0x174>
81129c80:	108000e0 	cmpeqi	r2,r2,3
81129c84:	1000171e 	bne	r2,zero,81129ce4 <OSFlagPost+0x1cc>
81129c88:	00005606 	br	81129de4 <OSFlagPost+0x2cc>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81129c8c:	e0bffc17 	ldw	r2,-16(fp)
81129c90:	10c0020b 	ldhu	r3,8(r2)
81129c94:	e0bff117 	ldw	r2,-60(fp)
81129c98:	1080040b 	ldhu	r2,16(r2)
81129c9c:	1884703a 	and	r2,r3,r2
81129ca0:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81129ca4:	e0bff117 	ldw	r2,-60(fp)
81129ca8:	1080040b 	ldhu	r2,16(r2)
81129cac:	10ffffcc 	andi	r3,r2,65535
81129cb0:	e0bff60b 	ldhu	r2,-40(fp)
81129cb4:	1880541e 	bne	r3,r2,81129e08 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81129cb8:	e0bff60b 	ldhu	r2,-40(fp)
81129cbc:	100b883a 	mov	r5,r2
81129cc0:	e13ff117 	ldw	r4,-60(fp)
81129cc4:	112a1d00 	call	8112a1d0 <OS_FlagTaskRdy>
81129cc8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81129ccc:	e0bff683 	ldbu	r2,-38(fp)
81129cd0:	10800058 	cmpnei	r2,r2,1
81129cd4:	10004c1e 	bne	r2,zero,81129e08 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81129cd8:	00800044 	movi	r2,1
81129cdc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81129ce0:	00004906 	br	81129e08 <OSFlagPost+0x2f0>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81129ce4:	e0bffc17 	ldw	r2,-16(fp)
81129ce8:	10c0020b 	ldhu	r3,8(r2)
81129cec:	e0bff117 	ldw	r2,-60(fp)
81129cf0:	1080040b 	ldhu	r2,16(r2)
81129cf4:	1884703a 	and	r2,r3,r2
81129cf8:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81129cfc:	e0bff60b 	ldhu	r2,-40(fp)
81129d00:	10004326 	beq	r2,zero,81129e10 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81129d04:	e0bff60b 	ldhu	r2,-40(fp)
81129d08:	100b883a 	mov	r5,r2
81129d0c:	e13ff117 	ldw	r4,-60(fp)
81129d10:	112a1d00 	call	8112a1d0 <OS_FlagTaskRdy>
81129d14:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81129d18:	e0bff683 	ldbu	r2,-38(fp)
81129d1c:	10800058 	cmpnei	r2,r2,1
81129d20:	10003b1e 	bne	r2,zero,81129e10 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81129d24:	00800044 	movi	r2,1
81129d28:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81129d2c:	00003806 	br	81129e10 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81129d30:	e0bffc17 	ldw	r2,-16(fp)
81129d34:	1080020b 	ldhu	r2,8(r2)
81129d38:	0084303a 	nor	r2,zero,r2
81129d3c:	1007883a 	mov	r3,r2
81129d40:	e0bff117 	ldw	r2,-60(fp)
81129d44:	1080040b 	ldhu	r2,16(r2)
81129d48:	1884703a 	and	r2,r3,r2
81129d4c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
81129d50:	e0bff117 	ldw	r2,-60(fp)
81129d54:	1080040b 	ldhu	r2,16(r2)
81129d58:	10ffffcc 	andi	r3,r2,65535
81129d5c:	e0bff60b 	ldhu	r2,-40(fp)
81129d60:	18802d1e 	bne	r3,r2,81129e18 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81129d64:	e0bff60b 	ldhu	r2,-40(fp)
81129d68:	100b883a 	mov	r5,r2
81129d6c:	e13ff117 	ldw	r4,-60(fp)
81129d70:	112a1d00 	call	8112a1d0 <OS_FlagTaskRdy>
81129d74:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81129d78:	e0bff683 	ldbu	r2,-38(fp)
81129d7c:	10800058 	cmpnei	r2,r2,1
81129d80:	1000251e 	bne	r2,zero,81129e18 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81129d84:	00800044 	movi	r2,1
81129d88:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81129d8c:	00002206 	br	81129e18 <OSFlagPost+0x300>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
81129d90:	e0bffc17 	ldw	r2,-16(fp)
81129d94:	1080020b 	ldhu	r2,8(r2)
81129d98:	0084303a 	nor	r2,zero,r2
81129d9c:	1007883a 	mov	r3,r2
81129da0:	e0bff117 	ldw	r2,-60(fp)
81129da4:	1080040b 	ldhu	r2,16(r2)
81129da8:	1884703a 	and	r2,r3,r2
81129dac:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
81129db0:	e0bff60b 	ldhu	r2,-40(fp)
81129db4:	10001a26 	beq	r2,zero,81129e20 <OSFlagPost+0x308>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
81129db8:	e0bff60b 	ldhu	r2,-40(fp)
81129dbc:	100b883a 	mov	r5,r2
81129dc0:	e13ff117 	ldw	r4,-60(fp)
81129dc4:	112a1d00 	call	8112a1d0 <OS_FlagTaskRdy>
81129dc8:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
81129dcc:	e0bff683 	ldbu	r2,-38(fp)
81129dd0:	10800058 	cmpnei	r2,r2,1
81129dd4:	1000121e 	bne	r2,zero,81129e20 <OSFlagPost+0x308>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
81129dd8:	00800044 	movi	r2,1
81129ddc:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
81129de0:	00000f06 	br	81129e20 <OSFlagPost+0x308>
81129de4:	e0bff317 	ldw	r2,-52(fp)
81129de8:	e0bff515 	stw	r2,-44(fp)
81129dec:	e0bff517 	ldw	r2,-44(fp)
81129df0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
81129df4:	e0bfff17 	ldw	r2,-4(fp)
81129df8:	00c01bc4 	movi	r3,111
81129dfc:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
81129e00:	0005883a 	mov	r2,zero
81129e04:	00002606 	br	81129ea0 <OSFlagPost+0x388>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81129e08:	0001883a 	nop
81129e0c:	00000506 	br	81129e24 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81129e10:	0001883a 	nop
81129e14:	00000306 	br	81129e24 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81129e18:	0001883a 	nop
81129e1c:	00000106 	br	81129e24 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
81129e20:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
81129e24:	e0bff117 	ldw	r2,-60(fp)
81129e28:	10800017 	ldw	r2,0(r2)
81129e2c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
81129e30:	e0bff117 	ldw	r2,-60(fp)
81129e34:	103f871e 	bne	r2,zero,81129c54 <__reset+0xfb109c54>
81129e38:	e0bff317 	ldw	r2,-52(fp)
81129e3c:	e0bff715 	stw	r2,-36(fp)
81129e40:	e0bff717 	ldw	r2,-36(fp)
81129e44:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
81129e48:	e0bff203 	ldbu	r2,-56(fp)
81129e4c:	10800058 	cmpnei	r2,r2,1
81129e50:	1000011e 	bne	r2,zero,81129e58 <OSFlagPost+0x340>
        OS_Sched();
81129e54:	11282e00 	call	811282e0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129e58:	0005303a 	rdctl	r2,status
81129e5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129e60:	e0fffa17 	ldw	r3,-24(fp)
81129e64:	00bfff84 	movi	r2,-2
81129e68:	1884703a 	and	r2,r3,r2
81129e6c:	1001703a 	wrctl	status,r2
  
  return context;
81129e70:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
81129e74:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
81129e78:	e0bffc17 	ldw	r2,-16(fp)
81129e7c:	1080020b 	ldhu	r2,8(r2)
81129e80:	e0bff90d 	sth	r2,-28(fp)
81129e84:	e0bff317 	ldw	r2,-52(fp)
81129e88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129e8c:	e0bff817 	ldw	r2,-32(fp)
81129e90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
81129e94:	e0bfff17 	ldw	r2,-4(fp)
81129e98:	10000005 	stb	zero,0(r2)
    return (flags_cur);
81129e9c:	e0bff90b 	ldhu	r2,-28(fp)
}
81129ea0:	e037883a 	mov	sp,fp
81129ea4:	dfc00117 	ldw	ra,4(sp)
81129ea8:	df000017 	ldw	fp,0(sp)
81129eac:	dec00204 	addi	sp,sp,8
81129eb0:	f800283a 	ret

81129eb4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
81129eb4:	defff904 	addi	sp,sp,-28
81129eb8:	de00012e 	bgeu	sp,et,81129ec0 <OSFlagQuery+0xc>
81129ebc:	003b68fa 	trap	3
81129ec0:	df000615 	stw	fp,24(sp)
81129ec4:	df000604 	addi	fp,sp,24
81129ec8:	e13ffe15 	stw	r4,-8(fp)
81129ecc:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
81129ed0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
81129ed4:	e0bfff17 	ldw	r2,-4(fp)
81129ed8:	1000021e 	bne	r2,zero,81129ee4 <OSFlagQuery+0x30>
        return ((OS_FLAGS)0);
81129edc:	0005883a 	mov	r2,zero
81129ee0:	00002306 	br	81129f70 <OSFlagQuery+0xbc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
81129ee4:	e0bffe17 	ldw	r2,-8(fp)
81129ee8:	1000051e 	bne	r2,zero,81129f00 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
81129eec:	e0bfff17 	ldw	r2,-4(fp)
81129ef0:	00c01b84 	movi	r3,110
81129ef4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81129ef8:	0005883a 	mov	r2,zero
81129efc:	00001c06 	br	81129f70 <OSFlagQuery+0xbc>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
81129f00:	e0bffe17 	ldw	r2,-8(fp)
81129f04:	10800003 	ldbu	r2,0(r2)
81129f08:	10803fcc 	andi	r2,r2,255
81129f0c:	10800160 	cmpeqi	r2,r2,5
81129f10:	1000051e 	bne	r2,zero,81129f28 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
81129f14:	e0bfff17 	ldw	r2,-4(fp)
81129f18:	00c00044 	movi	r3,1
81129f1c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
81129f20:	0005883a 	mov	r2,zero
81129f24:	00001206 	br	81129f70 <OSFlagQuery+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81129f28:	0005303a 	rdctl	r2,status
81129f2c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81129f30:	e0fffc17 	ldw	r3,-16(fp)
81129f34:	00bfff84 	movi	r2,-2
81129f38:	1884703a 	and	r2,r3,r2
81129f3c:	1001703a 	wrctl	status,r2
  
  return context;
81129f40:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
81129f44:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
81129f48:	e0bffe17 	ldw	r2,-8(fp)
81129f4c:	1080020b 	ldhu	r2,8(r2)
81129f50:	e0bffb0d 	sth	r2,-20(fp)
81129f54:	e0bffa17 	ldw	r2,-24(fp)
81129f58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81129f5c:	e0bffd17 	ldw	r2,-12(fp)
81129f60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
81129f64:	e0bfff17 	ldw	r2,-4(fp)
81129f68:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
81129f6c:	e0bffb0b 	ldhu	r2,-20(fp)
}
81129f70:	e037883a 	mov	sp,fp
81129f74:	df000017 	ldw	fp,0(sp)
81129f78:	dec00104 	addi	sp,sp,4
81129f7c:	f800283a 	ret

81129f80 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
81129f80:	defff804 	addi	sp,sp,-32
81129f84:	de00012e 	bgeu	sp,et,81129f8c <OS_FlagBlock+0xc>
81129f88:	003b68fa 	trap	3
81129f8c:	df000715 	stw	fp,28(sp)
81129f90:	df000704 	addi	fp,sp,28
81129f94:	e13ffb15 	stw	r4,-20(fp)
81129f98:	e17ffc15 	stw	r5,-16(fp)
81129f9c:	3009883a 	mov	r4,r6
81129fa0:	3807883a 	mov	r3,r7
81129fa4:	e0800117 	ldw	r2,4(fp)
81129fa8:	e13ffd0d 	sth	r4,-12(fp)
81129fac:	e0fffe05 	stb	r3,-8(fp)
81129fb0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
81129fb4:	d0a08417 	ldw	r2,-32240(gp)
81129fb8:	d0e08417 	ldw	r3,-32240(gp)
81129fbc:	18c00c03 	ldbu	r3,48(r3)
81129fc0:	18c00814 	ori	r3,r3,32
81129fc4:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
81129fc8:	d0a08417 	ldw	r2,-32240(gp)
81129fcc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
81129fd0:	d0a08417 	ldw	r2,-32240(gp)
81129fd4:	e0ffff0b 	ldhu	r3,-4(fp)
81129fd8:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
81129fdc:	d0a08417 	ldw	r2,-32240(gp)
81129fe0:	e0fffc17 	ldw	r3,-16(fp)
81129fe4:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
81129fe8:	e0bffc17 	ldw	r2,-16(fp)
81129fec:	e0fffd0b 	ldhu	r3,-12(fp)
81129ff0:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
81129ff4:	e0bffc17 	ldw	r2,-16(fp)
81129ff8:	e0fffe03 	ldbu	r3,-8(fp)
81129ffc:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
8112a000:	d0e08417 	ldw	r3,-32240(gp)
8112a004:	e0bffc17 	ldw	r2,-16(fp)
8112a008:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
8112a00c:	e0bffb17 	ldw	r2,-20(fp)
8112a010:	10c00117 	ldw	r3,4(r2)
8112a014:	e0bffc17 	ldw	r2,-16(fp)
8112a018:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
8112a01c:	e0bffc17 	ldw	r2,-16(fp)
8112a020:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
8112a024:	e0bffc17 	ldw	r2,-16(fp)
8112a028:	e0fffb17 	ldw	r3,-20(fp)
8112a02c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
8112a030:	e0bffb17 	ldw	r2,-20(fp)
8112a034:	10800117 	ldw	r2,4(r2)
8112a038:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
8112a03c:	e0bff917 	ldw	r2,-28(fp)
8112a040:	10000326 	beq	r2,zero,8112a050 <OS_FlagBlock+0xd0>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
8112a044:	e0bff917 	ldw	r2,-28(fp)
8112a048:	e0fffc17 	ldw	r3,-16(fp)
8112a04c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
8112a050:	e0bffb17 	ldw	r2,-20(fp)
8112a054:	e0fffc17 	ldw	r3,-16(fp)
8112a058:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
8112a05c:	d0a08417 	ldw	r2,-32240(gp)
8112a060:	10800d03 	ldbu	r2,52(r2)
8112a064:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112a068:	e0fffa03 	ldbu	r3,-24(fp)
8112a06c:	e13ffa03 	ldbu	r4,-24(fp)
8112a070:	d0a08044 	addi	r2,gp,-32255
8112a074:	2085883a 	add	r2,r4,r2
8112a078:	10800003 	ldbu	r2,0(r2)
8112a07c:	1009883a 	mov	r4,r2
8112a080:	d0a08417 	ldw	r2,-32240(gp)
8112a084:	10800d43 	ldbu	r2,53(r2)
8112a088:	0084303a 	nor	r2,zero,r2
8112a08c:	2084703a 	and	r2,r4,r2
8112a090:	1009883a 	mov	r4,r2
8112a094:	d0a08044 	addi	r2,gp,-32255
8112a098:	1885883a 	add	r2,r3,r2
8112a09c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
8112a0a0:	e0fffa03 	ldbu	r3,-24(fp)
8112a0a4:	d0a08044 	addi	r2,gp,-32255
8112a0a8:	1885883a 	add	r2,r3,r2
8112a0ac:	10800003 	ldbu	r2,0(r2)
8112a0b0:	10803fcc 	andi	r2,r2,255
8112a0b4:	1000071e 	bne	r2,zero,8112a0d4 <OS_FlagBlock+0x154>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112a0b8:	d0a08417 	ldw	r2,-32240(gp)
8112a0bc:	10800d83 	ldbu	r2,54(r2)
8112a0c0:	0084303a 	nor	r2,zero,r2
8112a0c4:	1007883a 	mov	r3,r2
8112a0c8:	d0a08003 	ldbu	r2,-32256(gp)
8112a0cc:	1884703a 	and	r2,r3,r2
8112a0d0:	d0a08005 	stb	r2,-32256(gp)
    }
}
8112a0d4:	0001883a 	nop
8112a0d8:	e037883a 	mov	sp,fp
8112a0dc:	df000017 	ldw	fp,0(sp)
8112a0e0:	dec00104 	addi	sp,sp,4
8112a0e4:	f800283a 	ret

8112a0e8 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
8112a0e8:	defffb04 	addi	sp,sp,-20
8112a0ec:	de00012e 	bgeu	sp,et,8112a0f4 <OS_FlagInit+0xc>
8112a0f0:	003b68fa 	trap	3
8112a0f4:	dfc00415 	stw	ra,16(sp)
8112a0f8:	df000315 	stw	fp,12(sp)
8112a0fc:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
8112a100:	0140dc04 	movi	r5,880
8112a104:	01204574 	movhi	r4,33045
8112a108:	21365604 	addi	r4,r4,-9896
8112a10c:	11282140 	call	81128214 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
8112a110:	00a04574 	movhi	r2,33045
8112a114:	10b65604 	addi	r2,r2,-9896
8112a118:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
8112a11c:	00a04574 	movhi	r2,33045
8112a120:	10b66104 	addi	r2,r2,-9852
8112a124:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112a128:	e03ffd0d 	sth	zero,-12(fp)
8112a12c:	00001306 	br	8112a17c <OS_FlagInit+0x94>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112a130:	e0bffe17 	ldw	r2,-8(fp)
8112a134:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
8112a138:	e0bffe17 	ldw	r2,-8(fp)
8112a13c:	e0ffff17 	ldw	r3,-4(fp)
8112a140:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
8112a144:	e0bffe17 	ldw	r2,-8(fp)
8112a148:	00c00fc4 	movi	r3,63
8112a14c:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112a150:	e0bffe17 	ldw	r2,-8(fp)
8112a154:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
8112a158:	e0bffe17 	ldw	r2,-8(fp)
8112a15c:	10800b04 	addi	r2,r2,44
8112a160:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
8112a164:	e0bfff17 	ldw	r2,-4(fp)
8112a168:	10800b04 	addi	r2,r2,44
8112a16c:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
8112a170:	e0bffd0b 	ldhu	r2,-12(fp)
8112a174:	10800044 	addi	r2,r2,1
8112a178:	e0bffd0d 	sth	r2,-12(fp)
8112a17c:	e0bffd0b 	ldhu	r2,-12(fp)
8112a180:	108004f0 	cmpltui	r2,r2,19
8112a184:	103fea1e 	bne	r2,zero,8112a130 <__reset+0xfb10a130>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
8112a188:	e0bffe17 	ldw	r2,-8(fp)
8112a18c:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
8112a190:	e0bffe17 	ldw	r2,-8(fp)
8112a194:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
8112a198:	e0bffe17 	ldw	r2,-8(fp)
8112a19c:	00c00fc4 	movi	r3,63
8112a1a0:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
8112a1a4:	e0bffe17 	ldw	r2,-8(fp)
8112a1a8:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
8112a1ac:	00a04574 	movhi	r2,33045
8112a1b0:	10b65604 	addi	r2,r2,-9896
8112a1b4:	d0a08815 	stw	r2,-32224(gp)
#endif
}
8112a1b8:	0001883a 	nop
8112a1bc:	e037883a 	mov	sp,fp
8112a1c0:	dfc00117 	ldw	ra,4(sp)
8112a1c4:	df000017 	ldw	fp,0(sp)
8112a1c8:	dec00204 	addi	sp,sp,8
8112a1cc:	f800283a 	ret

8112a1d0 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
8112a1d0:	defffa04 	addi	sp,sp,-24
8112a1d4:	de00012e 	bgeu	sp,et,8112a1dc <OS_FlagTaskRdy+0xc>
8112a1d8:	003b68fa 	trap	3
8112a1dc:	dfc00515 	stw	ra,20(sp)
8112a1e0:	df000415 	stw	fp,16(sp)
8112a1e4:	df000404 	addi	fp,sp,16
8112a1e8:	e13ffe15 	stw	r4,-8(fp)
8112a1ec:	2805883a 	mov	r2,r5
8112a1f0:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
8112a1f4:	e0bffe17 	ldw	r2,-8(fp)
8112a1f8:	10800217 	ldw	r2,8(r2)
8112a1fc:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
8112a200:	e0bffd17 	ldw	r2,-12(fp)
8112a204:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
8112a208:	e0bffd17 	ldw	r2,-12(fp)
8112a20c:	e0ffff0b 	ldhu	r3,-4(fp)
8112a210:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
8112a214:	e0bffd17 	ldw	r2,-12(fp)
8112a218:	10c00c03 	ldbu	r3,48(r2)
8112a21c:	00bff7c4 	movi	r2,-33
8112a220:	1884703a 	and	r2,r3,r2
8112a224:	1007883a 	mov	r3,r2
8112a228:	e0bffd17 	ldw	r2,-12(fp)
8112a22c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
8112a230:	e0bffd17 	ldw	r2,-12(fp)
8112a234:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
8112a238:	e0bffd17 	ldw	r2,-12(fp)
8112a23c:	10800c03 	ldbu	r2,48(r2)
8112a240:	10803fcc 	andi	r2,r2,255
8112a244:	1000181e 	bne	r2,zero,8112a2a8 <OS_FlagTaskRdy+0xd8>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
8112a248:	e0bffd17 	ldw	r2,-12(fp)
8112a24c:	10c00d83 	ldbu	r3,54(r2)
8112a250:	d0a08003 	ldbu	r2,-32256(gp)
8112a254:	1884b03a 	or	r2,r3,r2
8112a258:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112a25c:	e0bffd17 	ldw	r2,-12(fp)
8112a260:	10800d03 	ldbu	r2,52(r2)
8112a264:	10c03fcc 	andi	r3,r2,255
8112a268:	e0bffd17 	ldw	r2,-12(fp)
8112a26c:	10800d03 	ldbu	r2,52(r2)
8112a270:	11003fcc 	andi	r4,r2,255
8112a274:	d0a08044 	addi	r2,gp,-32255
8112a278:	2085883a 	add	r2,r4,r2
8112a27c:	11000003 	ldbu	r4,0(r2)
8112a280:	e0bffd17 	ldw	r2,-12(fp)
8112a284:	10800d43 	ldbu	r2,53(r2)
8112a288:	2084b03a 	or	r2,r4,r2
8112a28c:	1009883a 	mov	r4,r2
8112a290:	d0a08044 	addi	r2,gp,-32255
8112a294:	1885883a 	add	r2,r3,r2
8112a298:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
8112a29c:	00800044 	movi	r2,1
8112a2a0:	e0bffc05 	stb	r2,-16(fp)
8112a2a4:	00000106 	br	8112a2ac <OS_FlagTaskRdy+0xdc>
    } else {
        sched                   = OS_FALSE;
8112a2a8:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
8112a2ac:	e13ffe17 	ldw	r4,-8(fp)
8112a2b0:	112a2cc0 	call	8112a2cc <OS_FlagUnlink>
    return (sched);
8112a2b4:	e0bffc03 	ldbu	r2,-16(fp)
}
8112a2b8:	e037883a 	mov	sp,fp
8112a2bc:	dfc00117 	ldw	ra,4(sp)
8112a2c0:	df000017 	ldw	fp,0(sp)
8112a2c4:	dec00204 	addi	sp,sp,8
8112a2c8:	f800283a 	ret

8112a2cc <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
8112a2cc:	defffa04 	addi	sp,sp,-24
8112a2d0:	de00012e 	bgeu	sp,et,8112a2d8 <OS_FlagUnlink+0xc>
8112a2d4:	003b68fa 	trap	3
8112a2d8:	df000515 	stw	fp,20(sp)
8112a2dc:	df000504 	addi	fp,sp,20
8112a2e0:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
8112a2e4:	e0bfff17 	ldw	r2,-4(fp)
8112a2e8:	10800117 	ldw	r2,4(r2)
8112a2ec:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
8112a2f0:	e0bfff17 	ldw	r2,-4(fp)
8112a2f4:	10800017 	ldw	r2,0(r2)
8112a2f8:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
8112a2fc:	e0bffb17 	ldw	r2,-20(fp)
8112a300:	10000b1e 	bne	r2,zero,8112a330 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
8112a304:	e0bfff17 	ldw	r2,-4(fp)
8112a308:	10800317 	ldw	r2,12(r2)
8112a30c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
8112a310:	e0bffd17 	ldw	r2,-12(fp)
8112a314:	e0fffc17 	ldw	r3,-16(fp)
8112a318:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
8112a31c:	e0bffc17 	ldw	r2,-16(fp)
8112a320:	10000b26 	beq	r2,zero,8112a350 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
8112a324:	e0bffc17 	ldw	r2,-16(fp)
8112a328:	10000115 	stw	zero,4(r2)
8112a32c:	00000806 	br	8112a350 <OS_FlagUnlink+0x84>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
8112a330:	e0bffb17 	ldw	r2,-20(fp)
8112a334:	e0fffc17 	ldw	r3,-16(fp)
8112a338:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
8112a33c:	e0bffc17 	ldw	r2,-16(fp)
8112a340:	10000326 	beq	r2,zero,8112a350 <OS_FlagUnlink+0x84>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
8112a344:	e0bffc17 	ldw	r2,-16(fp)
8112a348:	e0fffb17 	ldw	r3,-20(fp)
8112a34c:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
8112a350:	e0bfff17 	ldw	r2,-4(fp)
8112a354:	10800217 	ldw	r2,8(r2)
8112a358:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
8112a35c:	e0bffe17 	ldw	r2,-8(fp)
8112a360:	10000a15 	stw	zero,40(r2)
#endif
}
8112a364:	0001883a 	nop
8112a368:	e037883a 	mov	sp,fp
8112a36c:	df000017 	ldw	fp,0(sp)
8112a370:	dec00104 	addi	sp,sp,4
8112a374:	f800283a 	ret

8112a378 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
8112a378:	defff404 	addi	sp,sp,-48
8112a37c:	de00012e 	bgeu	sp,et,8112a384 <OSMemCreate+0xc>
8112a380:	003b68fa 	trap	3
8112a384:	df000b15 	stw	fp,44(sp)
8112a388:	df000b04 	addi	fp,sp,44
8112a38c:	e13ffc15 	stw	r4,-16(fp)
8112a390:	e17ffd15 	stw	r5,-12(fp)
8112a394:	e1bffe15 	stw	r6,-8(fp)
8112a398:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112a39c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112a3a0:	e0bfff17 	ldw	r2,-4(fp)
8112a3a4:	1000021e 	bne	r2,zero,8112a3b0 <OSMemCreate+0x38>
        return ((OS_MEM *)0);
8112a3a8:	0005883a 	mov	r2,zero
8112a3ac:	00006506 	br	8112a544 <OSMemCreate+0x1cc>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
8112a3b0:	e0bffc17 	ldw	r2,-16(fp)
8112a3b4:	1000051e 	bne	r2,zero,8112a3cc <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112a3b8:	e0bfff17 	ldw	r2,-4(fp)
8112a3bc:	00c01884 	movi	r3,98
8112a3c0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112a3c4:	0005883a 	mov	r2,zero
8112a3c8:	00005e06 	br	8112a544 <OSMemCreate+0x1cc>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
8112a3cc:	e0bffc17 	ldw	r2,-16(fp)
8112a3d0:	108000cc 	andi	r2,r2,3
8112a3d4:	10000526 	beq	r2,zero,8112a3ec <OSMemCreate+0x74>
        *perr = OS_ERR_MEM_INVALID_ADDR;
8112a3d8:	e0bfff17 	ldw	r2,-4(fp)
8112a3dc:	00c01884 	movi	r3,98
8112a3e0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112a3e4:	0005883a 	mov	r2,zero
8112a3e8:	00005606 	br	8112a544 <OSMemCreate+0x1cc>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
8112a3ec:	e0bffd17 	ldw	r2,-12(fp)
8112a3f0:	108000a8 	cmpgeui	r2,r2,2
8112a3f4:	1000051e 	bne	r2,zero,8112a40c <OSMemCreate+0x94>
        *perr = OS_ERR_MEM_INVALID_BLKS;
8112a3f8:	e0bfff17 	ldw	r2,-4(fp)
8112a3fc:	00c016c4 	movi	r3,91
8112a400:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112a404:	0005883a 	mov	r2,zero
8112a408:	00004e06 	br	8112a544 <OSMemCreate+0x1cc>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
8112a40c:	e0bffe17 	ldw	r2,-8(fp)
8112a410:	10800128 	cmpgeui	r2,r2,4
8112a414:	1000051e 	bne	r2,zero,8112a42c <OSMemCreate+0xb4>
        *perr = OS_ERR_MEM_INVALID_SIZE;
8112a418:	e0bfff17 	ldw	r2,-4(fp)
8112a41c:	00c01704 	movi	r3,92
8112a420:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112a424:	0005883a 	mov	r2,zero
8112a428:	00004606 	br	8112a544 <OSMemCreate+0x1cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a42c:	0005303a 	rdctl	r2,status
8112a430:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a434:	e0fffb17 	ldw	r3,-20(fp)
8112a438:	00bfff84 	movi	r2,-2
8112a43c:	1884703a 	and	r2,r3,r2
8112a440:	1001703a 	wrctl	status,r2
  
  return context;
8112a444:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112a448:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
8112a44c:	d0a07d17 	ldw	r2,-32268(gp)
8112a450:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
8112a454:	d0a07d17 	ldw	r2,-32268(gp)
8112a458:	10000326 	beq	r2,zero,8112a468 <OSMemCreate+0xf0>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
8112a45c:	d0a07d17 	ldw	r2,-32268(gp)
8112a460:	10800117 	ldw	r2,4(r2)
8112a464:	d0a07d15 	stw	r2,-32268(gp)
8112a468:	e0bff817 	ldw	r2,-32(fp)
8112a46c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a470:	e0bff917 	ldw	r2,-28(fp)
8112a474:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
8112a478:	e0bffa17 	ldw	r2,-24(fp)
8112a47c:	1000051e 	bne	r2,zero,8112a494 <OSMemCreate+0x11c>
        *perr = OS_ERR_MEM_INVALID_PART;
8112a480:	e0bfff17 	ldw	r2,-4(fp)
8112a484:	00c01684 	movi	r3,90
8112a488:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
8112a48c:	0005883a 	mov	r2,zero
8112a490:	00002c06 	br	8112a544 <OSMemCreate+0x1cc>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
8112a494:	e0bffc17 	ldw	r2,-16(fp)
8112a498:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
8112a49c:	e0fffc17 	ldw	r3,-16(fp)
8112a4a0:	e0bffe17 	ldw	r2,-8(fp)
8112a4a4:	1885883a 	add	r2,r3,r2
8112a4a8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
8112a4ac:	e03ff715 	stw	zero,-36(fp)
8112a4b0:	00000c06 	br	8112a4e4 <OSMemCreate+0x16c>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
8112a4b4:	e0bff617 	ldw	r2,-40(fp)
8112a4b8:	e0fff517 	ldw	r3,-44(fp)
8112a4bc:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
8112a4c0:	e0bff517 	ldw	r2,-44(fp)
8112a4c4:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
8112a4c8:	e0fff517 	ldw	r3,-44(fp)
8112a4cc:	e0bffe17 	ldw	r2,-8(fp)
8112a4d0:	1885883a 	add	r2,r3,r2
8112a4d4:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
8112a4d8:	e0bff717 	ldw	r2,-36(fp)
8112a4dc:	10800044 	addi	r2,r2,1
8112a4e0:	e0bff715 	stw	r2,-36(fp)
8112a4e4:	e0bffd17 	ldw	r2,-12(fp)
8112a4e8:	10bfffc4 	addi	r2,r2,-1
8112a4ec:	e0fff717 	ldw	r3,-36(fp)
8112a4f0:	18bff036 	bltu	r3,r2,8112a4b4 <__reset+0xfb10a4b4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
8112a4f4:	e0bff617 	ldw	r2,-40(fp)
8112a4f8:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
8112a4fc:	e0bffa17 	ldw	r2,-24(fp)
8112a500:	e0fffc17 	ldw	r3,-16(fp)
8112a504:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
8112a508:	e0bffa17 	ldw	r2,-24(fp)
8112a50c:	e0fffc17 	ldw	r3,-16(fp)
8112a510:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
8112a514:	e0bffa17 	ldw	r2,-24(fp)
8112a518:	e0fffd17 	ldw	r3,-12(fp)
8112a51c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
8112a520:	e0bffa17 	ldw	r2,-24(fp)
8112a524:	e0fffd17 	ldw	r3,-12(fp)
8112a528:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
8112a52c:	e0bffa17 	ldw	r2,-24(fp)
8112a530:	e0fffe17 	ldw	r3,-8(fp)
8112a534:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
8112a538:	e0bfff17 	ldw	r2,-4(fp)
8112a53c:	10000005 	stb	zero,0(r2)
    return (pmem);
8112a540:	e0bffa17 	ldw	r2,-24(fp)
}
8112a544:	e037883a 	mov	sp,fp
8112a548:	df000017 	ldw	fp,0(sp)
8112a54c:	dec00104 	addi	sp,sp,4
8112a550:	f800283a 	ret

8112a554 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
8112a554:	defff804 	addi	sp,sp,-32
8112a558:	de00012e 	bgeu	sp,et,8112a560 <OSMemGet+0xc>
8112a55c:	003b68fa 	trap	3
8112a560:	df000715 	stw	fp,28(sp)
8112a564:	df000704 	addi	fp,sp,28
8112a568:	e13ffe15 	stw	r4,-8(fp)
8112a56c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112a570:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112a574:	e0bfff17 	ldw	r2,-4(fp)
8112a578:	1000021e 	bne	r2,zero,8112a584 <OSMemGet+0x30>
        return ((void *)0);
8112a57c:	0005883a 	mov	r2,zero
8112a580:	00002e06 	br	8112a63c <OSMemGet+0xe8>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
8112a584:	e0bffe17 	ldw	r2,-8(fp)
8112a588:	1000051e 	bne	r2,zero,8112a5a0 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112a58c:	e0bfff17 	ldw	r2,-4(fp)
8112a590:	00c01804 	movi	r3,96
8112a594:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112a598:	0005883a 	mov	r2,zero
8112a59c:	00002706 	br	8112a63c <OSMemGet+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a5a0:	0005303a 	rdctl	r2,status
8112a5a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a5a8:	e0fffd17 	ldw	r3,-12(fp)
8112a5ac:	00bfff84 	movi	r2,-2
8112a5b0:	1884703a 	and	r2,r3,r2
8112a5b4:	1001703a 	wrctl	status,r2
  
  return context;
8112a5b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112a5bc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
8112a5c0:	e0bffe17 	ldw	r2,-8(fp)
8112a5c4:	10800417 	ldw	r2,16(r2)
8112a5c8:	10001426 	beq	r2,zero,8112a61c <OSMemGet+0xc8>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
8112a5cc:	e0bffe17 	ldw	r2,-8(fp)
8112a5d0:	10800117 	ldw	r2,4(r2)
8112a5d4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
8112a5d8:	e0bffb17 	ldw	r2,-20(fp)
8112a5dc:	10c00017 	ldw	r3,0(r2)
8112a5e0:	e0bffe17 	ldw	r2,-8(fp)
8112a5e4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
8112a5e8:	e0bffe17 	ldw	r2,-8(fp)
8112a5ec:	10800417 	ldw	r2,16(r2)
8112a5f0:	10ffffc4 	addi	r3,r2,-1
8112a5f4:	e0bffe17 	ldw	r2,-8(fp)
8112a5f8:	10c00415 	stw	r3,16(r2)
8112a5fc:	e0bff917 	ldw	r2,-28(fp)
8112a600:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a604:	e0bffa17 	ldw	r2,-24(fp)
8112a608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
8112a60c:	e0bfff17 	ldw	r2,-4(fp)
8112a610:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
8112a614:	e0bffb17 	ldw	r2,-20(fp)
8112a618:	00000806 	br	8112a63c <OSMemGet+0xe8>
8112a61c:	e0bff917 	ldw	r2,-28(fp)
8112a620:	e0bffc15 	stw	r2,-16(fp)
8112a624:	e0bffc17 	ldw	r2,-16(fp)
8112a628:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
8112a62c:	e0bfff17 	ldw	r2,-4(fp)
8112a630:	00c01744 	movi	r3,93
8112a634:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
8112a638:	0005883a 	mov	r2,zero
}
8112a63c:	e037883a 	mov	sp,fp
8112a640:	df000017 	ldw	fp,0(sp)
8112a644:	dec00104 	addi	sp,sp,4
8112a648:	f800283a 	ret

8112a64c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112a64c:	defff704 	addi	sp,sp,-36
8112a650:	de00012e 	bgeu	sp,et,8112a658 <OSMemNameGet+0xc>
8112a654:	003b68fa 	trap	3
8112a658:	dfc00815 	stw	ra,32(sp)
8112a65c:	df000715 	stw	fp,28(sp)
8112a660:	df000704 	addi	fp,sp,28
8112a664:	e13ffd15 	stw	r4,-12(fp)
8112a668:	e17ffe15 	stw	r5,-8(fp)
8112a66c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a670:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112a674:	e0bfff17 	ldw	r2,-4(fp)
8112a678:	1000021e 	bne	r2,zero,8112a684 <OSMemNameGet+0x38>
        return (0);
8112a67c:	0005883a 	mov	r2,zero
8112a680:	00002b06 	br	8112a730 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112a684:	e0bffd17 	ldw	r2,-12(fp)
8112a688:	1000051e 	bne	r2,zero,8112a6a0 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112a68c:	e0bfff17 	ldw	r2,-4(fp)
8112a690:	00c01804 	movi	r3,96
8112a694:	10c00005 	stb	r3,0(r2)
        return (0);
8112a698:	0005883a 	mov	r2,zero
8112a69c:	00002406 	br	8112a730 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112a6a0:	e0bffe17 	ldw	r2,-8(fp)
8112a6a4:	1000051e 	bne	r2,zero,8112a6bc <OSMemNameGet+0x70>
        *perr = OS_ERR_PNAME_NULL;
8112a6a8:	e0bfff17 	ldw	r2,-4(fp)
8112a6ac:	00c00304 	movi	r3,12
8112a6b0:	10c00005 	stb	r3,0(r2)
        return (0);
8112a6b4:	0005883a 	mov	r2,zero
8112a6b8:	00001d06 	br	8112a730 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112a6bc:	d0a08303 	ldbu	r2,-32244(gp)
8112a6c0:	10803fcc 	andi	r2,r2,255
8112a6c4:	10000526 	beq	r2,zero,8112a6dc <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
8112a6c8:	e0bfff17 	ldw	r2,-4(fp)
8112a6cc:	00c00444 	movi	r3,17
8112a6d0:	10c00005 	stb	r3,0(r2)
        return (0);
8112a6d4:	0005883a 	mov	r2,zero
8112a6d8:	00001506 	br	8112a730 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a6dc:	0005303a 	rdctl	r2,status
8112a6e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a6e4:	e0fffb17 	ldw	r3,-20(fp)
8112a6e8:	00bfff84 	movi	r2,-2
8112a6ec:	1884703a 	and	r2,r3,r2
8112a6f0:	1001703a 	wrctl	status,r2
  
  return context;
8112a6f4:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
8112a6f8:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
8112a6fc:	e0bffd17 	ldw	r2,-12(fp)
8112a700:	10800504 	addi	r2,r2,20
8112a704:	100b883a 	mov	r5,r2
8112a708:	e13ffe17 	ldw	r4,-8(fp)
8112a70c:	11284340 	call	81128434 <OS_StrCopy>
8112a710:	e0bffa05 	stb	r2,-24(fp)
8112a714:	e0bff917 	ldw	r2,-28(fp)
8112a718:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a71c:	e0bffc17 	ldw	r2,-16(fp)
8112a720:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112a724:	e0bfff17 	ldw	r2,-4(fp)
8112a728:	10000005 	stb	zero,0(r2)
    return (len);
8112a72c:	e0bffa03 	ldbu	r2,-24(fp)
}
8112a730:	e037883a 	mov	sp,fp
8112a734:	dfc00117 	ldw	ra,4(sp)
8112a738:	df000017 	ldw	fp,0(sp)
8112a73c:	dec00204 	addi	sp,sp,8
8112a740:	f800283a 	ret

8112a744 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
8112a744:	defff604 	addi	sp,sp,-40
8112a748:	de00012e 	bgeu	sp,et,8112a750 <OSMemNameSet+0xc>
8112a74c:	003b68fa 	trap	3
8112a750:	dfc00915 	stw	ra,36(sp)
8112a754:	df000815 	stw	fp,32(sp)
8112a758:	df000804 	addi	fp,sp,32
8112a75c:	e13ffd15 	stw	r4,-12(fp)
8112a760:	e17ffe15 	stw	r5,-8(fp)
8112a764:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a768:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112a76c:	e0bfff17 	ldw	r2,-4(fp)
8112a770:	10003526 	beq	r2,zero,8112a848 <OSMemNameSet+0x104>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
8112a774:	e0bffd17 	ldw	r2,-12(fp)
8112a778:	1000041e 	bne	r2,zero,8112a78c <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
8112a77c:	e0bfff17 	ldw	r2,-4(fp)
8112a780:	00c01804 	movi	r3,96
8112a784:	10c00005 	stb	r3,0(r2)
        return;
8112a788:	00003006 	br	8112a84c <OSMemNameSet+0x108>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
8112a78c:	e0bffe17 	ldw	r2,-8(fp)
8112a790:	1000041e 	bne	r2,zero,8112a7a4 <OSMemNameSet+0x60>
        *perr = OS_ERR_PNAME_NULL;
8112a794:	e0bfff17 	ldw	r2,-4(fp)
8112a798:	00c00304 	movi	r3,12
8112a79c:	10c00005 	stb	r3,0(r2)
        return;
8112a7a0:	00002a06 	br	8112a84c <OSMemNameSet+0x108>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112a7a4:	d0a08303 	ldbu	r2,-32244(gp)
8112a7a8:	10803fcc 	andi	r2,r2,255
8112a7ac:	10000426 	beq	r2,zero,8112a7c0 <OSMemNameSet+0x7c>
        *perr = OS_ERR_NAME_SET_ISR;
8112a7b0:	e0bfff17 	ldw	r2,-4(fp)
8112a7b4:	00c00484 	movi	r3,18
8112a7b8:	10c00005 	stb	r3,0(r2)
        return;
8112a7bc:	00002306 	br	8112a84c <OSMemNameSet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a7c0:	0005303a 	rdctl	r2,status
8112a7c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a7c8:	e0fffc17 	ldw	r3,-16(fp)
8112a7cc:	00bfff84 	movi	r2,-2
8112a7d0:	1884703a 	and	r2,r3,r2
8112a7d4:	1001703a 	wrctl	status,r2
  
  return context;
8112a7d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112a7dc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
8112a7e0:	e13ffe17 	ldw	r4,-8(fp)
8112a7e4:	11284b00 	call	811284b0 <OS_StrLen>
8112a7e8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
8112a7ec:	e0bffa03 	ldbu	r2,-24(fp)
8112a7f0:	10800830 	cmpltui	r2,r2,32
8112a7f4:	1000081e 	bne	r2,zero,8112a818 <OSMemNameSet+0xd4>
8112a7f8:	e0bff817 	ldw	r2,-32(fp)
8112a7fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a800:	e0bff917 	ldw	r2,-28(fp)
8112a804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
8112a808:	e0bfff17 	ldw	r2,-4(fp)
8112a80c:	00c018c4 	movi	r3,99
8112a810:	10c00005 	stb	r3,0(r2)
        return;
8112a814:	00000d06 	br	8112a84c <OSMemNameSet+0x108>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
8112a818:	e0bffd17 	ldw	r2,-12(fp)
8112a81c:	10800504 	addi	r2,r2,20
8112a820:	e17ffe17 	ldw	r5,-8(fp)
8112a824:	1009883a 	mov	r4,r2
8112a828:	11284340 	call	81128434 <OS_StrCopy>
8112a82c:	e0bff817 	ldw	r2,-32(fp)
8112a830:	e0bffb15 	stw	r2,-20(fp)
8112a834:	e0bffb17 	ldw	r2,-20(fp)
8112a838:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112a83c:	e0bfff17 	ldw	r2,-4(fp)
8112a840:	10000005 	stb	zero,0(r2)
8112a844:	00000106 	br	8112a84c <OSMemNameSet+0x108>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
8112a848:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112a84c:	e037883a 	mov	sp,fp
8112a850:	dfc00117 	ldw	ra,4(sp)
8112a854:	df000017 	ldw	fp,0(sp)
8112a858:	dec00204 	addi	sp,sp,8
8112a85c:	f800283a 	ret

8112a860 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
8112a860:	defff904 	addi	sp,sp,-28
8112a864:	de00012e 	bgeu	sp,et,8112a86c <OSMemPut+0xc>
8112a868:	003b68fa 	trap	3
8112a86c:	df000615 	stw	fp,24(sp)
8112a870:	df000604 	addi	fp,sp,24
8112a874:	e13ffe15 	stw	r4,-8(fp)
8112a878:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a87c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112a880:	e0bffe17 	ldw	r2,-8(fp)
8112a884:	1000021e 	bne	r2,zero,8112a890 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112a888:	00801804 	movi	r2,96
8112a88c:	00002806 	br	8112a930 <OSMemPut+0xd0>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
8112a890:	e0bfff17 	ldw	r2,-4(fp)
8112a894:	1000021e 	bne	r2,zero,8112a8a0 <OSMemPut+0x40>
        return (OS_ERR_MEM_INVALID_PBLK);
8112a898:	008017c4 	movi	r2,95
8112a89c:	00002406 	br	8112a930 <OSMemPut+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a8a0:	0005303a 	rdctl	r2,status
8112a8a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a8a8:	e0fffd17 	ldw	r3,-12(fp)
8112a8ac:	00bfff84 	movi	r2,-2
8112a8b0:	1884703a 	and	r2,r3,r2
8112a8b4:	1001703a 	wrctl	status,r2
  
  return context;
8112a8b8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112a8bc:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
8112a8c0:	e0bffe17 	ldw	r2,-8(fp)
8112a8c4:	10c00417 	ldw	r3,16(r2)
8112a8c8:	e0bffe17 	ldw	r2,-8(fp)
8112a8cc:	10800317 	ldw	r2,12(r2)
8112a8d0:	18800636 	bltu	r3,r2,8112a8ec <OSMemPut+0x8c>
8112a8d4:	e0bffa17 	ldw	r2,-24(fp)
8112a8d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a8dc:	e0bffb17 	ldw	r2,-20(fp)
8112a8e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
8112a8e4:	00801784 	movi	r2,94
8112a8e8:	00001106 	br	8112a930 <OSMemPut+0xd0>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
8112a8ec:	e0bffe17 	ldw	r2,-8(fp)
8112a8f0:	10c00117 	ldw	r3,4(r2)
8112a8f4:	e0bfff17 	ldw	r2,-4(fp)
8112a8f8:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
8112a8fc:	e0bffe17 	ldw	r2,-8(fp)
8112a900:	e0ffff17 	ldw	r3,-4(fp)
8112a904:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
8112a908:	e0bffe17 	ldw	r2,-8(fp)
8112a90c:	10800417 	ldw	r2,16(r2)
8112a910:	10c00044 	addi	r3,r2,1
8112a914:	e0bffe17 	ldw	r2,-8(fp)
8112a918:	10c00415 	stw	r3,16(r2)
8112a91c:	e0bffa17 	ldw	r2,-24(fp)
8112a920:	e0bffc15 	stw	r2,-16(fp)
8112a924:	e0bffc17 	ldw	r2,-16(fp)
8112a928:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
8112a92c:	0005883a 	mov	r2,zero
}
8112a930:	e037883a 	mov	sp,fp
8112a934:	df000017 	ldw	fp,0(sp)
8112a938:	dec00104 	addi	sp,sp,4
8112a93c:	f800283a 	ret

8112a940 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
8112a940:	defffa04 	addi	sp,sp,-24
8112a944:	de00012e 	bgeu	sp,et,8112a94c <OSMemQuery+0xc>
8112a948:	003b68fa 	trap	3
8112a94c:	df000515 	stw	fp,20(sp)
8112a950:	df000504 	addi	fp,sp,20
8112a954:	e13ffe15 	stw	r4,-8(fp)
8112a958:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112a95c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
8112a960:	e0bffe17 	ldw	r2,-8(fp)
8112a964:	1000021e 	bne	r2,zero,8112a970 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
8112a968:	00801804 	movi	r2,96
8112a96c:	00002c06 	br	8112aa20 <OSMemQuery+0xe0>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
8112a970:	e0bfff17 	ldw	r2,-4(fp)
8112a974:	1000021e 	bne	r2,zero,8112a980 <OSMemQuery+0x40>
        return (OS_ERR_MEM_INVALID_PDATA);
8112a978:	00801844 	movi	r2,97
8112a97c:	00002806 	br	8112aa20 <OSMemQuery+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112a980:	0005303a 	rdctl	r2,status
8112a984:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112a988:	e0fffc17 	ldw	r3,-16(fp)
8112a98c:	00bfff84 	movi	r2,-2
8112a990:	1884703a 	and	r2,r3,r2
8112a994:	1001703a 	wrctl	status,r2
  
  return context;
8112a998:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112a99c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
8112a9a0:	e0bffe17 	ldw	r2,-8(fp)
8112a9a4:	10c00017 	ldw	r3,0(r2)
8112a9a8:	e0bfff17 	ldw	r2,-4(fp)
8112a9ac:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
8112a9b0:	e0bffe17 	ldw	r2,-8(fp)
8112a9b4:	10c00117 	ldw	r3,4(r2)
8112a9b8:	e0bfff17 	ldw	r2,-4(fp)
8112a9bc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
8112a9c0:	e0bffe17 	ldw	r2,-8(fp)
8112a9c4:	10c00217 	ldw	r3,8(r2)
8112a9c8:	e0bfff17 	ldw	r2,-4(fp)
8112a9cc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
8112a9d0:	e0bffe17 	ldw	r2,-8(fp)
8112a9d4:	10c00317 	ldw	r3,12(r2)
8112a9d8:	e0bfff17 	ldw	r2,-4(fp)
8112a9dc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
8112a9e0:	e0bffe17 	ldw	r2,-8(fp)
8112a9e4:	10c00417 	ldw	r3,16(r2)
8112a9e8:	e0bfff17 	ldw	r2,-4(fp)
8112a9ec:	10c00415 	stw	r3,16(r2)
8112a9f0:	e0bffb17 	ldw	r2,-20(fp)
8112a9f4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112a9f8:	e0bffd17 	ldw	r2,-12(fp)
8112a9fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
8112aa00:	e0bfff17 	ldw	r2,-4(fp)
8112aa04:	10c00317 	ldw	r3,12(r2)
8112aa08:	e0bfff17 	ldw	r2,-4(fp)
8112aa0c:	10800417 	ldw	r2,16(r2)
8112aa10:	1887c83a 	sub	r3,r3,r2
8112aa14:	e0bfff17 	ldw	r2,-4(fp)
8112aa18:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
8112aa1c:	0005883a 	mov	r2,zero
}
8112aa20:	e037883a 	mov	sp,fp
8112aa24:	df000017 	ldw	fp,0(sp)
8112aa28:	dec00104 	addi	sp,sp,4
8112aa2c:	f800283a 	ret

8112aa30 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
8112aa30:	defffc04 	addi	sp,sp,-16
8112aa34:	de00012e 	bgeu	sp,et,8112aa3c <OS_MemInit+0xc>
8112aa38:	003b68fa 	trap	3
8112aa3c:	dfc00315 	stw	ra,12(sp)
8112aa40:	df000215 	stw	fp,8(sp)
8112aa44:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
8112aa48:	01430c04 	movi	r5,3120
8112aa4c:	01204574 	movhi	r4,33045
8112aa50:	21379a04 	addi	r4,r4,-8600
8112aa54:	11282140 	call	81128214 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
8112aa58:	00a04574 	movhi	r2,33045
8112aa5c:	10b79a04 	addi	r2,r2,-8600
8112aa60:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112aa64:	e03fff0d 	sth	zero,-4(fp)
8112aa68:	00001306 	br	8112aab8 <OS_MemInit+0x88>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
8112aa6c:	e0bfff0b 	ldhu	r2,-4(fp)
8112aa70:	10800044 	addi	r2,r2,1
8112aa74:	10c00d24 	muli	r3,r2,52
8112aa78:	00a04574 	movhi	r2,33045
8112aa7c:	10b79a04 	addi	r2,r2,-8600
8112aa80:	1887883a 	add	r3,r3,r2
8112aa84:	e0bffe17 	ldw	r2,-8(fp)
8112aa88:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
8112aa8c:	e0bffe17 	ldw	r2,-8(fp)
8112aa90:	00c00fc4 	movi	r3,63
8112aa94:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
8112aa98:	e0bffe17 	ldw	r2,-8(fp)
8112aa9c:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
8112aaa0:	e0bffe17 	ldw	r2,-8(fp)
8112aaa4:	10800d04 	addi	r2,r2,52
8112aaa8:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
8112aaac:	e0bfff0b 	ldhu	r2,-4(fp)
8112aab0:	10800044 	addi	r2,r2,1
8112aab4:	e0bfff0d 	sth	r2,-4(fp)
8112aab8:	e0bfff0b 	ldhu	r2,-4(fp)
8112aabc:	10800ef0 	cmpltui	r2,r2,59
8112aac0:	103fea1e 	bne	r2,zero,8112aa6c <__reset+0xfb10aa6c>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
8112aac4:	e0bffe17 	ldw	r2,-8(fp)
8112aac8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
8112aacc:	e0bffe17 	ldw	r2,-8(fp)
8112aad0:	00c00fc4 	movi	r3,63
8112aad4:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
8112aad8:	e0bffe17 	ldw	r2,-8(fp)
8112aadc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
8112aae0:	00a04574 	movhi	r2,33045
8112aae4:	10b79a04 	addi	r2,r2,-8600
8112aae8:	d0a07d15 	stw	r2,-32268(gp)
#endif
}
8112aaec:	0001883a 	nop
8112aaf0:	e037883a 	mov	sp,fp
8112aaf4:	dfc00117 	ldw	ra,4(sp)
8112aaf8:	df000017 	ldw	fp,0(sp)
8112aafc:	dec00204 	addi	sp,sp,8
8112ab00:	f800283a 	ret

8112ab04 <OSMutexAccept>:
*********************************************************************************************************
*/

#if OS_MUTEX_ACCEPT_EN > 0
BOOLEAN  OSMutexAccept (OS_EVENT *pevent, INT8U *perr)
{
8112ab04:	defff704 	addi	sp,sp,-36
8112ab08:	de00012e 	bgeu	sp,et,8112ab10 <OSMutexAccept+0xc>
8112ab0c:	003b68fa 	trap	3
8112ab10:	df000815 	stw	fp,32(sp)
8112ab14:	df000804 	addi	fp,sp,32
8112ab18:	e13ffe15 	stw	r4,-8(fp)
8112ab1c:	e17fff15 	stw	r5,-4(fp)
    INT8U      pip;                                    /* Priority Inheritance Priority (PIP)          */
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112ab20:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                          /* Validate 'perr'                              */
8112ab24:	e0bfff17 	ldw	r2,-4(fp)
8112ab28:	1000021e 	bne	r2,zero,8112ab34 <OSMutexAccept+0x30>
        return (OS_FALSE);
8112ab2c:	0005883a 	mov	r2,zero
8112ab30:	00005b06 	br	8112aca0 <OSMutexAccept+0x19c>
    }
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112ab34:	e0bffe17 	ldw	r2,-8(fp)
8112ab38:	1000051e 	bne	r2,zero,8112ab50 <OSMutexAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112ab3c:	e0bfff17 	ldw	r2,-4(fp)
8112ab40:	00c00104 	movi	r3,4
8112ab44:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112ab48:	0005883a 	mov	r2,zero
8112ab4c:	00005406 	br	8112aca0 <OSMutexAccept+0x19c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {  /* Validate event block type                    */
8112ab50:	e0bffe17 	ldw	r2,-8(fp)
8112ab54:	10800003 	ldbu	r2,0(r2)
8112ab58:	10803fcc 	andi	r2,r2,255
8112ab5c:	10800120 	cmpeqi	r2,r2,4
8112ab60:	1000051e 	bne	r2,zero,8112ab78 <OSMutexAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112ab64:	e0bfff17 	ldw	r2,-4(fp)
8112ab68:	00c00044 	movi	r3,1
8112ab6c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112ab70:	0005883a 	mov	r2,zero
8112ab74:	00004a06 	br	8112aca0 <OSMutexAccept+0x19c>
    }
    if (OSIntNesting > 0) {                            /* Make sure it's not called from an ISR        */
8112ab78:	d0a08303 	ldbu	r2,-32244(gp)
8112ab7c:	10803fcc 	andi	r2,r2,255
8112ab80:	10000526 	beq	r2,zero,8112ab98 <OSMutexAccept+0x94>
        *perr = OS_ERR_PEND_ISR;
8112ab84:	e0bfff17 	ldw	r2,-4(fp)
8112ab88:	00c00084 	movi	r3,2
8112ab8c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112ab90:	0005883a 	mov	r2,zero
8112ab94:	00004206 	br	8112aca0 <OSMutexAccept+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ab98:	0005303a 	rdctl	r2,status
8112ab9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112aba0:	e0fffd17 	ldw	r3,-12(fp)
8112aba4:	00bfff84 	movi	r2,-2
8112aba8:	1884703a 	and	r2,r3,r2
8112abac:	1001703a 	wrctl	status,r2
  
  return context;
8112abb0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();                               /* Get value (0 or 1) of Mutex                  */
8112abb4:	e0bff815 	stw	r2,-32(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);            /* Get PIP from mutex                           */
8112abb8:	e0bffe17 	ldw	r2,-8(fp)
8112abbc:	1080020b 	ldhu	r2,8(r2)
8112abc0:	10bfffcc 	andi	r2,r2,65535
8112abc4:	1004d23a 	srli	r2,r2,8
8112abc8:	e0bffa05 	stb	r2,-24(fp)
    if ((pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112abcc:	e0bffe17 	ldw	r2,-8(fp)
8112abd0:	1080020b 	ldhu	r2,8(r2)
8112abd4:	10bfffcc 	andi	r2,r2,65535
8112abd8:	10803fcc 	andi	r2,r2,255
8112abdc:	10803fd8 	cmpnei	r2,r2,255
8112abe0:	1000281e 	bne	r2,zero,8112ac84 <OSMutexAccept+0x180>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;   /*      Mask off LSByte (Acquire Mutex)         */
8112abe4:	e0bffe17 	ldw	r2,-8(fp)
8112abe8:	10c0020b 	ldhu	r3,8(r2)
8112abec:	00bfc004 	movi	r2,-256
8112abf0:	1884703a 	and	r2,r3,r2
8112abf4:	1007883a 	mov	r3,r2
8112abf8:	e0bffe17 	ldw	r2,-8(fp)
8112abfc:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;     /*      Save current task priority in LSByte    */
8112ac00:	e0bffe17 	ldw	r2,-8(fp)
8112ac04:	10c0020b 	ldhu	r3,8(r2)
8112ac08:	d0a08417 	ldw	r2,-32240(gp)
8112ac0c:	10800c83 	ldbu	r2,50(r2)
8112ac10:	10803fcc 	andi	r2,r2,255
8112ac14:	1884b03a 	or	r2,r3,r2
8112ac18:	1007883a 	mov	r3,r2
8112ac1c:	e0bffe17 	ldw	r2,-8(fp)
8112ac20:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;        /*      Link TCB of task owning Mutex           */
8112ac24:	d0e08417 	ldw	r3,-32240(gp)
8112ac28:	e0bffe17 	ldw	r2,-8(fp)
8112ac2c:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {              /*      PIP 'must' have a SMALLER prio ...      */
8112ac30:	d0a08417 	ldw	r2,-32240(gp)
8112ac34:	10800c83 	ldbu	r2,50(r2)
8112ac38:	10803fcc 	andi	r2,r2,255
8112ac3c:	e0fffa03 	ldbu	r3,-24(fp)
8112ac40:	18800836 	bltu	r3,r2,8112ac64 <OSMutexAccept+0x160>
8112ac44:	e0bff817 	ldw	r2,-32(fp)
8112ac48:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ac4c:	e0bff917 	ldw	r2,-28(fp)
8112ac50:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                        /*      ... than current task!                  */
            *perr = OS_ERR_PIP_LOWER;
8112ac54:	e0bfff17 	ldw	r2,-4(fp)
8112ac58:	00c01e04 	movi	r3,120
8112ac5c:	10c00005 	stb	r3,0(r2)
8112ac60:	00000606 	br	8112ac7c <OSMutexAccept+0x178>
8112ac64:	e0bff817 	ldw	r2,-32(fp)
8112ac68:	e0bffb15 	stw	r2,-20(fp)
8112ac6c:	e0bffb17 	ldw	r2,-20(fp)
8112ac70:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112ac74:	e0bfff17 	ldw	r2,-4(fp)
8112ac78:	10000005 	stb	zero,0(r2)
        }
        return (OS_TRUE);
8112ac7c:	00800044 	movi	r2,1
8112ac80:	00000706 	br	8112aca0 <OSMutexAccept+0x19c>
8112ac84:	e0bff817 	ldw	r2,-32(fp)
8112ac88:	e0bffc15 	stw	r2,-16(fp)
8112ac8c:	e0bffc17 	ldw	r2,-16(fp)
8112ac90:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112ac94:	e0bfff17 	ldw	r2,-4(fp)
8112ac98:	10000005 	stb	zero,0(r2)
    return (OS_FALSE);
8112ac9c:	0005883a 	mov	r2,zero
}
8112aca0:	e037883a 	mov	sp,fp
8112aca4:	df000017 	ldw	fp,0(sp)
8112aca8:	dec00104 	addi	sp,sp,4
8112acac:	f800283a 	ret

8112acb0 <OSMutexCreate>:
*                 to use to reduce priority inversion.
*********************************************************************************************************
*/

OS_EVENT  *OSMutexCreate (INT8U prio, INT8U *perr)
{
8112acb0:	defff604 	addi	sp,sp,-40
8112acb4:	de00012e 	bgeu	sp,et,8112acbc <OSMutexCreate+0xc>
8112acb8:	003b68fa 	trap	3
8112acbc:	dfc00915 	stw	ra,36(sp)
8112acc0:	df000815 	stw	fp,32(sp)
8112acc4:	df000804 	addi	fp,sp,32
8112acc8:	2005883a 	mov	r2,r4
8112accc:	e17fff15 	stw	r5,-4(fp)
8112acd0:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112acd4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112acd8:	e0bfff17 	ldw	r2,-4(fp)
8112acdc:	1000021e 	bne	r2,zero,8112ace8 <OSMutexCreate+0x38>
        return ((OS_EVENT *)0);
8112ace0:	0005883a 	mov	r2,zero
8112ace4:	00006106 	br	8112ae6c <OSMutexCreate+0x1bc>
    }
    if (prio >= OS_LOWEST_PRIO) {                          /* Validate PIP                             */
8112ace8:	e0bffe03 	ldbu	r2,-8(fp)
8112acec:	10800a30 	cmpltui	r2,r2,40
8112acf0:	1000051e 	bne	r2,zero,8112ad08 <OSMutexCreate+0x58>
        *perr = OS_ERR_PRIO_INVALID;
8112acf4:	e0bfff17 	ldw	r2,-4(fp)
8112acf8:	00c00a84 	movi	r3,42
8112acfc:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112ad00:	0005883a 	mov	r2,zero
8112ad04:	00005906 	br	8112ae6c <OSMutexCreate+0x1bc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112ad08:	d0a08303 	ldbu	r2,-32244(gp)
8112ad0c:	10803fcc 	andi	r2,r2,255
8112ad10:	10000526 	beq	r2,zero,8112ad28 <OSMutexCreate+0x78>
        *perr = OS_ERR_CREATE_ISR;                         /* ... can't CREATE mutex from an ISR       */
8112ad14:	e0bfff17 	ldw	r2,-4(fp)
8112ad18:	00c00404 	movi	r3,16
8112ad1c:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112ad20:	0005883a 	mov	r2,zero
8112ad24:	00005106 	br	8112ae6c <OSMutexCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ad28:	0005303a 	rdctl	r2,status
8112ad2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ad30:	e0fffd17 	ldw	r3,-12(fp)
8112ad34:	00bfff84 	movi	r2,-2
8112ad38:	1884703a 	and	r2,r3,r2
8112ad3c:	1001703a 	wrctl	status,r2
  
  return context;
8112ad40:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112ad44:	e0bff815 	stw	r2,-32(fp)
    if (OSTCBPrioTbl[prio] != (OS_TCB *)0) {               /* Mutex priority must not already exist    */
8112ad48:	e0fffe03 	ldbu	r3,-8(fp)
8112ad4c:	00a04574 	movhi	r2,33045
8112ad50:	1087c004 	addi	r2,r2,7936
8112ad54:	18c7883a 	add	r3,r3,r3
8112ad58:	18c7883a 	add	r3,r3,r3
8112ad5c:	10c5883a 	add	r2,r2,r3
8112ad60:	10800017 	ldw	r2,0(r2)
8112ad64:	10000926 	beq	r2,zero,8112ad8c <OSMutexCreate+0xdc>
8112ad68:	e0bff817 	ldw	r2,-32(fp)
8112ad6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ad70:	e0bff917 	ldw	r2,-28(fp)
8112ad74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                /* Task already exist at priority ...       */
        *perr = OS_ERR_PRIO_EXIST;                         /* ... inheritance priority                 */
8112ad78:	e0bfff17 	ldw	r2,-4(fp)
8112ad7c:	00c00a04 	movi	r3,40
8112ad80:	10c00005 	stb	r3,0(r2)
        return ((OS_EVENT *)0);
8112ad84:	0005883a 	mov	r2,zero
8112ad88:	00003806 	br	8112ae6c <OSMutexCreate+0x1bc>
    }
    OSTCBPrioTbl[prio] = OS_TCB_RESERVED;                  /* Reserve the table entry                  */
8112ad8c:	e0fffe03 	ldbu	r3,-8(fp)
8112ad90:	00a04574 	movhi	r2,33045
8112ad94:	1087c004 	addi	r2,r2,7936
8112ad98:	18c7883a 	add	r3,r3,r3
8112ad9c:	18c7883a 	add	r3,r3,r3
8112ada0:	10c5883a 	add	r2,r2,r3
8112ada4:	00c00044 	movi	r3,1
8112ada8:	10c00015 	stw	r3,0(r2)
    pevent             = OSEventFreeList;                  /* Get next free event control block        */
8112adac:	d0a08217 	ldw	r2,-32248(gp)
8112adb0:	e0bffb15 	stw	r2,-20(fp)
    if (pevent == (OS_EVENT *)0) {                         /* See if an ECB was available              */
8112adb4:	e0bffb17 	ldw	r2,-20(fp)
8112adb8:	1000101e 	bne	r2,zero,8112adfc <OSMutexCreate+0x14c>
        OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* No, Release the table entry              */
8112adbc:	e0fffe03 	ldbu	r3,-8(fp)
8112adc0:	00a04574 	movhi	r2,33045
8112adc4:	1087c004 	addi	r2,r2,7936
8112adc8:	18c7883a 	add	r3,r3,r3
8112adcc:	18c7883a 	add	r3,r3,r3
8112add0:	10c5883a 	add	r2,r2,r3
8112add4:	10000015 	stw	zero,0(r2)
8112add8:	e0bff817 	ldw	r2,-32(fp)
8112addc:	e0bffa15 	stw	r2,-24(fp)
8112ade0:	e0bffa17 	ldw	r2,-24(fp)
8112ade4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr              = OS_ERR_PEVENT_NULL;           /* No more event control blocks             */
8112ade8:	e0bfff17 	ldw	r2,-4(fp)
8112adec:	00c00104 	movi	r3,4
8112adf0:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112adf4:	e0bffb17 	ldw	r2,-20(fp)
8112adf8:	00001c06 	br	8112ae6c <OSMutexCreate+0x1bc>
    }
    OSEventFreeList        = (OS_EVENT *)OSEventFreeList->OSEventPtr;   /* Adjust the free list        */
8112adfc:	d0a08217 	ldw	r2,-32248(gp)
8112ae00:	10800117 	ldw	r2,4(r2)
8112ae04:	d0a08215 	stw	r2,-32248(gp)
8112ae08:	e0bff817 	ldw	r2,-32(fp)
8112ae0c:	e0bffc15 	stw	r2,-16(fp)
8112ae10:	e0bffc17 	ldw	r2,-16(fp)
8112ae14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    pevent->OSEventType    = OS_EVENT_TYPE_MUTEX;
8112ae18:	e0bffb17 	ldw	r2,-20(fp)
8112ae1c:	00c00104 	movi	r3,4
8112ae20:	10c00005 	stb	r3,0(r2)
    pevent->OSEventCnt     = (INT16U)((INT16U)prio << 8) | OS_MUTEX_AVAILABLE; /* Resource is avail.   */
8112ae24:	e0bffe03 	ldbu	r2,-8(fp)
8112ae28:	1004923a 	slli	r2,r2,8
8112ae2c:	10803fd4 	ori	r2,r2,255
8112ae30:	1007883a 	mov	r3,r2
8112ae34:	e0bffb17 	ldw	r2,-20(fp)
8112ae38:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr     = (void *)0;                                 /* No task owning the mutex    */
8112ae3c:	e0bffb17 	ldw	r2,-20(fp)
8112ae40:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent->OSEventName[0] = '?';
8112ae44:	e0bffb17 	ldw	r2,-20(fp)
8112ae48:	00c00fc4 	movi	r3,63
8112ae4c:	10c00445 	stb	r3,17(r2)
    pevent->OSEventName[1] = OS_ASCII_NUL;
8112ae50:	e0bffb17 	ldw	r2,-20(fp)
8112ae54:	10000485 	stb	zero,18(r2)
#endif
    OS_EventWaitListInit(pevent);
8112ae58:	e13ffb17 	ldw	r4,-20(fp)
8112ae5c:	1127dfc0 	call	81127dfc <OS_EventWaitListInit>
    *perr                  = OS_ERR_NONE;
8112ae60:	e0bfff17 	ldw	r2,-4(fp)
8112ae64:	10000005 	stb	zero,0(r2)
    return (pevent);
8112ae68:	e0bffb17 	ldw	r2,-20(fp)
}
8112ae6c:	e037883a 	mov	sp,fp
8112ae70:	dfc00117 	ldw	ra,4(sp)
8112ae74:	df000017 	ldw	fp,0(sp)
8112ae78:	dec00204 	addi	sp,sp,8
8112ae7c:	f800283a 	ret

8112ae80 <OSMutexDel>:
*********************************************************************************************************
*/

#if OS_MUTEX_DEL_EN
OS_EVENT  *OSMutexDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112ae80:	defff004 	addi	sp,sp,-64
8112ae84:	de00012e 	bgeu	sp,et,8112ae8c <OSMutexDel+0xc>
8112ae88:	003b68fa 	trap	3
8112ae8c:	dfc00f15 	stw	ra,60(sp)
8112ae90:	df000e15 	stw	fp,56(sp)
8112ae94:	df000e04 	addi	fp,sp,56
8112ae98:	e13ffd15 	stw	r4,-12(fp)
8112ae9c:	2805883a 	mov	r2,r5
8112aea0:	e1bfff15 	stw	r6,-4(fp)
8112aea4:	e0bffe05 	stb	r2,-8(fp)
    OS_EVENT  *pevent_return;
    INT8U      pip;                                        /* Priority inheritance priority            */
    INT8U      prio;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112aea8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112aeac:	e0bfff17 	ldw	r2,-4(fp)
8112aeb0:	1000021e 	bne	r2,zero,8112aebc <OSMutexDel+0x3c>
        return (pevent);
8112aeb4:	e0bffd17 	ldw	r2,-12(fp)
8112aeb8:	0000ad06 	br	8112b170 <OSMutexDel+0x2f0>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112aebc:	e0bffd17 	ldw	r2,-12(fp)
8112aec0:	1000051e 	bne	r2,zero,8112aed8 <OSMutexDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112aec4:	e0bfff17 	ldw	r2,-4(fp)
8112aec8:	00c00104 	movi	r3,4
8112aecc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112aed0:	e0bffd17 	ldw	r2,-12(fp)
8112aed4:	0000a606 	br	8112b170 <OSMutexDel+0x2f0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112aed8:	e0bffd17 	ldw	r2,-12(fp)
8112aedc:	10800003 	ldbu	r2,0(r2)
8112aee0:	10803fcc 	andi	r2,r2,255
8112aee4:	10800120 	cmpeqi	r2,r2,4
8112aee8:	1000051e 	bne	r2,zero,8112af00 <OSMutexDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112aeec:	e0bfff17 	ldw	r2,-4(fp)
8112aef0:	00c00044 	movi	r3,1
8112aef4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112aef8:	e0bffd17 	ldw	r2,-12(fp)
8112aefc:	00009c06 	br	8112b170 <OSMutexDel+0x2f0>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112af00:	d0a08303 	ldbu	r2,-32244(gp)
8112af04:	10803fcc 	andi	r2,r2,255
8112af08:	10000526 	beq	r2,zero,8112af20 <OSMutexDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112af0c:	e0bfff17 	ldw	r2,-4(fp)
8112af10:	00c003c4 	movi	r3,15
8112af14:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112af18:	e0bffd17 	ldw	r2,-12(fp)
8112af1c:	00009406 	br	8112b170 <OSMutexDel+0x2f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112af20:	0005303a 	rdctl	r2,status
8112af24:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112af28:	e0fffc17 	ldw	r3,-16(fp)
8112af2c:	00bfff84 	movi	r2,-2
8112af30:	1884703a 	and	r2,r3,r2
8112af34:	1001703a 	wrctl	status,r2
  
  return context;
8112af38:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112af3c:	e0bff415 	stw	r2,-48(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mutex        */
8112af40:	e0bffd17 	ldw	r2,-12(fp)
8112af44:	10800283 	ldbu	r2,10(r2)
8112af48:	10803fcc 	andi	r2,r2,255
8112af4c:	10000326 	beq	r2,zero,8112af5c <OSMutexDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112af50:	00800044 	movi	r2,1
8112af54:	e0bff205 	stb	r2,-56(fp)
8112af58:	00000106 	br	8112af60 <OSMutexDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112af5c:	e03ff205 	stb	zero,-56(fp)
    }
    switch (opt) {
8112af60:	e0bffe03 	ldbu	r2,-8(fp)
8112af64:	10000326 	beq	r2,zero,8112af74 <OSMutexDel+0xf4>
8112af68:	10800060 	cmpeqi	r2,r2,1
8112af6c:	10002f1e 	bne	r2,zero,8112b02c <OSMutexDel+0x1ac>
8112af70:	00007406 	br	8112b144 <OSMutexDel+0x2c4>
        case OS_DEL_NO_PEND:                               /* DELETE MUTEX ONLY IF NO TASK WAITING --- */
             if (tasks_waiting == OS_FALSE) {
8112af74:	e0bff203 	ldbu	r2,-56(fp)
8112af78:	1000221e 	bne	r2,zero,8112b004 <OSMutexDel+0x184>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112af7c:	e0bffd17 	ldw	r2,-12(fp)
8112af80:	00c00fc4 	movi	r3,63
8112af84:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112af88:	e0bffd17 	ldw	r2,-12(fp)
8112af8c:	10000485 	stb	zero,18(r2)
#endif
                 pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112af90:	e0bffd17 	ldw	r2,-12(fp)
8112af94:	1080020b 	ldhu	r2,8(r2)
8112af98:	10bfffcc 	andi	r2,r2,65535
8112af9c:	1004d23a 	srli	r2,r2,8
8112afa0:	e0bff605 	stb	r2,-40(fp)
                 OSTCBPrioTbl[pip]   = (OS_TCB *)0;        /* Free up the PIP                          */
8112afa4:	e0fff603 	ldbu	r3,-40(fp)
8112afa8:	00a04574 	movhi	r2,33045
8112afac:	1087c004 	addi	r2,r2,7936
8112afb0:	18c7883a 	add	r3,r3,r3
8112afb4:	18c7883a 	add	r3,r3,r3
8112afb8:	10c5883a 	add	r2,r2,r3
8112afbc:	10000015 	stw	zero,0(r2)
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112afc0:	e0bffd17 	ldw	r2,-12(fp)
8112afc4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
8112afc8:	d0e08217 	ldw	r3,-32248(gp)
8112afcc:	e0bffd17 	ldw	r2,-12(fp)
8112afd0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
8112afd4:	e0bffd17 	ldw	r2,-12(fp)
8112afd8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;
8112afdc:	e0bffd17 	ldw	r2,-12(fp)
8112afe0:	d0a08215 	stw	r2,-32248(gp)
8112afe4:	e0bff417 	ldw	r2,-48(fp)
8112afe8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112afec:	e0bff517 	ldw	r2,-44(fp)
8112aff0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
8112aff4:	e0bfff17 	ldw	r2,-4(fp)
8112aff8:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
8112affc:	e03ff315 	stw	zero,-52(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
8112b000:	00005a06 	br	8112b16c <OSMutexDel+0x2ec>
8112b004:	e0bff417 	ldw	r2,-48(fp)
8112b008:	e0bff715 	stw	r2,-36(fp)
8112b00c:	e0bff717 	ldw	r2,-36(fp)
8112b010:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mutex has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
8112b014:	e0bfff17 	ldw	r2,-4(fp)
8112b018:	00c01244 	movi	r3,73
8112b01c:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
8112b020:	e0bffd17 	ldw	r2,-12(fp)
8112b024:	e0bff315 	stw	r2,-52(fp)
             }
             break;
8112b028:	00005006 	br	8112b16c <OSMutexDel+0x2ec>

        case OS_DEL_ALWAYS:                                /* ALWAYS DELETE THE MUTEX ---------------- */
             pip  = (INT8U)(pevent->OSEventCnt >> 8);                     /* Get PIP of mutex          */
8112b02c:	e0bffd17 	ldw	r2,-12(fp)
8112b030:	1080020b 	ldhu	r2,8(r2)
8112b034:	10bfffcc 	andi	r2,r2,65535
8112b038:	1004d23a 	srli	r2,r2,8
8112b03c:	e0bff605 	stb	r2,-40(fp)
             prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original prio */
8112b040:	e0bffd17 	ldw	r2,-12(fp)
8112b044:	1080020b 	ldhu	r2,8(r2)
8112b048:	e0bff905 	stb	r2,-28(fp)
             ptcb = (OS_TCB *)pevent->OSEventPtr;
8112b04c:	e0bffd17 	ldw	r2,-12(fp)
8112b050:	10800117 	ldw	r2,4(r2)
8112b054:	e0bffa15 	stw	r2,-24(fp)
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
8112b058:	e0bffa17 	ldw	r2,-24(fp)
8112b05c:	10000f26 	beq	r2,zero,8112b09c <OSMutexDel+0x21c>
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
8112b060:	e0bffa17 	ldw	r2,-24(fp)
8112b064:	10800c83 	ldbu	r2,50(r2)
8112b068:	10c03fcc 	andi	r3,r2,255
8112b06c:	e0bff603 	ldbu	r2,-40(fp)
8112b070:	18800a1e 	bne	r3,r2,8112b09c <OSMutexDel+0x21c>
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
8112b074:	e0bff903 	ldbu	r2,-28(fp)
8112b078:	100b883a 	mov	r5,r2
8112b07c:	e13ffa17 	ldw	r4,-24(fp)
8112b080:	112babc0 	call	8112babc <OSMutex_RdyAtPrio>
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112b084:	00000506 	br	8112b09c <OSMutexDel+0x21c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112b088:	000f883a 	mov	r7,zero
8112b08c:	01800404 	movi	r6,16
8112b090:	000b883a 	mov	r5,zero
8112b094:	e13ffd17 	ldw	r4,-12(fp)
8112b098:	11278240 	call	81127824 <OS_EventTaskRdy>
             if (ptcb != (OS_TCB *)0) {                    /* See if any task owns the mutex           */
                 if (ptcb->OSTCBPrio == pip) {             /* See if original prio was changed         */
                     OSMutex_RdyAtPrio(ptcb, prio);        /* Yes, Restore the task's original prio    */
                 }
             }
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mutex        */
8112b09c:	e0bffd17 	ldw	r2,-12(fp)
8112b0a0:	10800283 	ldbu	r2,10(r2)
8112b0a4:	10803fcc 	andi	r2,r2,255
8112b0a8:	103ff71e 	bne	r2,zero,8112b088 <__reset+0xfb10b088>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112b0ac:	e0bffd17 	ldw	r2,-12(fp)
8112b0b0:	00c00fc4 	movi	r3,63
8112b0b4:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112b0b8:	e0bffd17 	ldw	r2,-12(fp)
8112b0bc:	10000485 	stb	zero,18(r2)
#endif
             pip                 = (INT8U)(pevent->OSEventCnt >> 8);
8112b0c0:	e0bffd17 	ldw	r2,-12(fp)
8112b0c4:	1080020b 	ldhu	r2,8(r2)
8112b0c8:	10bfffcc 	andi	r2,r2,65535
8112b0cc:	1004d23a 	srli	r2,r2,8
8112b0d0:	e0bff605 	stb	r2,-40(fp)
             OSTCBPrioTbl[pip]   = (OS_TCB *)0;            /* Free up the PIP                          */
8112b0d4:	e0fff603 	ldbu	r3,-40(fp)
8112b0d8:	00a04574 	movhi	r2,33045
8112b0dc:	1087c004 	addi	r2,r2,7936
8112b0e0:	18c7883a 	add	r3,r3,r3
8112b0e4:	18c7883a 	add	r3,r3,r3
8112b0e8:	10c5883a 	add	r2,r2,r3
8112b0ec:	10000015 	stw	zero,0(r2)
             pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
8112b0f0:	e0bffd17 	ldw	r2,-12(fp)
8112b0f4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr  = OSEventFreeList;        /* Return Event Control Block to free list  */
8112b0f8:	d0e08217 	ldw	r3,-32248(gp)
8112b0fc:	e0bffd17 	ldw	r2,-12(fp)
8112b100:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt  = 0;
8112b104:	e0bffd17 	ldw	r2,-12(fp)
8112b108:	1000020d 	sth	zero,8(r2)
             OSEventFreeList     = pevent;                 /* Get next free event control block        */
8112b10c:	e0bffd17 	ldw	r2,-12(fp)
8112b110:	d0a08215 	stw	r2,-32248(gp)
8112b114:	e0bff417 	ldw	r2,-48(fp)
8112b118:	e0bff815 	stw	r2,-32(fp)
8112b11c:	e0bff817 	ldw	r2,-32(fp)
8112b120:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112b124:	e0bff203 	ldbu	r2,-56(fp)
8112b128:	10800058 	cmpnei	r2,r2,1
8112b12c:	1000011e 	bne	r2,zero,8112b134 <OSMutexDel+0x2b4>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112b130:	11282e00 	call	811282e0 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
8112b134:	e0bfff17 	ldw	r2,-4(fp)
8112b138:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mutex has been deleted                   */
8112b13c:	e03ff315 	stw	zero,-52(fp)
             break;
8112b140:	00000a06 	br	8112b16c <OSMutexDel+0x2ec>
8112b144:	e0bff417 	ldw	r2,-48(fp)
8112b148:	e0bffb15 	stw	r2,-20(fp)
8112b14c:	e0bffb17 	ldw	r2,-20(fp)
8112b150:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
8112b154:	e0bfff17 	ldw	r2,-4(fp)
8112b158:	00c001c4 	movi	r3,7
8112b15c:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
8112b160:	e0bffd17 	ldw	r2,-12(fp)
8112b164:	e0bff315 	stw	r2,-52(fp)
             break;
8112b168:	0001883a 	nop
    }
    return (pevent_return);
8112b16c:	e0bff317 	ldw	r2,-52(fp)
}
8112b170:	e037883a 	mov	sp,fp
8112b174:	dfc00117 	ldw	ra,4(sp)
8112b178:	df000017 	ldw	fp,0(sp)
8112b17c:	dec00204 	addi	sp,sp,8
8112b180:	f800283a 	ret

8112b184 <OSMutexPend>:
*              2) You MUST NOT change the priority of the task that owns the mutex
*********************************************************************************************************
*/

void  OSMutexPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112b184:	deffee04 	addi	sp,sp,-72
8112b188:	de00012e 	bgeu	sp,et,8112b190 <OSMutexPend+0xc>
8112b18c:	003b68fa 	trap	3
8112b190:	dfc01115 	stw	ra,68(sp)
8112b194:	df001015 	stw	fp,64(sp)
8112b198:	df001004 	addi	fp,sp,64
8112b19c:	e13ffd15 	stw	r4,-12(fp)
8112b1a0:	2805883a 	mov	r2,r5
8112b1a4:	e1bfff15 	stw	r6,-4(fp)
8112b1a8:	e0bffe0d 	sth	r2,-8(fp)
    BOOLEAN    rdy;                                        /* Flag indicating task was ready           */
    OS_TCB    *ptcb;
    OS_EVENT  *pevent2;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112b1ac:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112b1b0:	e0bfff17 	ldw	r2,-4(fp)
8112b1b4:	10015626 	beq	r2,zero,8112b710 <OSMutexPend+0x58c>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112b1b8:	e0bffd17 	ldw	r2,-12(fp)
8112b1bc:	1000041e 	bne	r2,zero,8112b1d0 <OSMutexPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112b1c0:	e0bfff17 	ldw	r2,-4(fp)
8112b1c4:	00c00104 	movi	r3,4
8112b1c8:	10c00005 	stb	r3,0(r2)
        return;
8112b1cc:	00015106 	br	8112b714 <OSMutexPend+0x590>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112b1d0:	e0bffd17 	ldw	r2,-12(fp)
8112b1d4:	10800003 	ldbu	r2,0(r2)
8112b1d8:	10803fcc 	andi	r2,r2,255
8112b1dc:	10800120 	cmpeqi	r2,r2,4
8112b1e0:	1000041e 	bne	r2,zero,8112b1f4 <OSMutexPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112b1e4:	e0bfff17 	ldw	r2,-4(fp)
8112b1e8:	00c00044 	movi	r3,1
8112b1ec:	10c00005 	stb	r3,0(r2)
        return;
8112b1f0:	00014806 	br	8112b714 <OSMutexPend+0x590>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112b1f4:	d0a08303 	ldbu	r2,-32244(gp)
8112b1f8:	10803fcc 	andi	r2,r2,255
8112b1fc:	10000426 	beq	r2,zero,8112b210 <OSMutexPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
8112b200:	e0bfff17 	ldw	r2,-4(fp)
8112b204:	00c00084 	movi	r3,2
8112b208:	10c00005 	stb	r3,0(r2)
        return;
8112b20c:	00014106 	br	8112b714 <OSMutexPend+0x590>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
8112b210:	d0a07103 	ldbu	r2,-32316(gp)
8112b214:	10803fcc 	andi	r2,r2,255
8112b218:	10000426 	beq	r2,zero,8112b22c <OSMutexPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
8112b21c:	e0bfff17 	ldw	r2,-4(fp)
8112b220:	00c00344 	movi	r3,13
8112b224:	10c00005 	stb	r3,0(r2)
        return;
8112b228:	00013a06 	br	8112b714 <OSMutexPend+0x590>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b22c:	0005303a 	rdctl	r2,status
8112b230:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b234:	e0fffc17 	ldw	r3,-16(fp)
8112b238:	00bfff84 	movi	r2,-2
8112b23c:	1884703a 	and	r2,r3,r2
8112b240:	1001703a 	wrctl	status,r2
  
  return context;
8112b244:	e0bffc17 	ldw	r2,-16(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
8112b248:	e0bff115 	stw	r2,-60(fp)
    pip = (INT8U)(pevent->OSEventCnt >> 8);                /* Get PIP from mutex                       */
8112b24c:	e0bffd17 	ldw	r2,-12(fp)
8112b250:	1080020b 	ldhu	r2,8(r2)
8112b254:	10bfffcc 	andi	r2,r2,65535
8112b258:	1004d23a 	srli	r2,r2,8
8112b25c:	e0bff305 	stb	r2,-52(fp)
                                                           /* Is Mutex available?                      */
    if ((INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8) == OS_MUTEX_AVAILABLE) {
8112b260:	e0bffd17 	ldw	r2,-12(fp)
8112b264:	1080020b 	ldhu	r2,8(r2)
8112b268:	10803fcc 	andi	r2,r2,255
8112b26c:	10803fd8 	cmpnei	r2,r2,255
8112b270:	1000271e 	bne	r2,zero,8112b310 <OSMutexPend+0x18c>
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;       /* Yes, Acquire the resource                */
8112b274:	e0bffd17 	ldw	r2,-12(fp)
8112b278:	10c0020b 	ldhu	r3,8(r2)
8112b27c:	00bfc004 	movi	r2,-256
8112b280:	1884703a 	and	r2,r3,r2
8112b284:	1007883a 	mov	r3,r2
8112b288:	e0bffd17 	ldw	r2,-12(fp)
8112b28c:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= OSTCBCur->OSTCBPrio;         /*      Save priority of owning task        */
8112b290:	e0bffd17 	ldw	r2,-12(fp)
8112b294:	10c0020b 	ldhu	r3,8(r2)
8112b298:	d0a08417 	ldw	r2,-32240(gp)
8112b29c:	10800c83 	ldbu	r2,50(r2)
8112b2a0:	10803fcc 	andi	r2,r2,255
8112b2a4:	1884b03a 	or	r2,r3,r2
8112b2a8:	1007883a 	mov	r3,r2
8112b2ac:	e0bffd17 	ldw	r2,-12(fp)
8112b2b0:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = (void *)OSTCBCur;            /*      Point to owning task's OS_TCB       */
8112b2b4:	d0e08417 	ldw	r3,-32240(gp)
8112b2b8:	e0bffd17 	ldw	r2,-12(fp)
8112b2bc:	10c00115 	stw	r3,4(r2)
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
8112b2c0:	d0a08417 	ldw	r2,-32240(gp)
8112b2c4:	10800c83 	ldbu	r2,50(r2)
8112b2c8:	10803fcc 	andi	r2,r2,255
8112b2cc:	e0fff303 	ldbu	r3,-52(fp)
8112b2d0:	18800836 	bltu	r3,r2,8112b2f4 <OSMutexPend+0x170>
8112b2d4:	e0bff117 	ldw	r2,-60(fp)
8112b2d8:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b2dc:	e0bff217 	ldw	r2,-56(fp)
8112b2e0:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
8112b2e4:	e0bfff17 	ldw	r2,-4(fp)
8112b2e8:	00c01e04 	movi	r3,120
8112b2ec:	10c00005 	stb	r3,0(r2)
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
        }
        return;
8112b2f0:	00010806 	br	8112b714 <OSMutexPend+0x590>
8112b2f4:	e0bff117 	ldw	r2,-60(fp)
8112b2f8:	e0bff415 	stw	r2,-48(fp)
8112b2fc:	e0bff417 	ldw	r2,-48(fp)
8112b300:	1001703a 	wrctl	status,r2
        if (OSTCBCur->OSTCBPrio <= pip) {                  /*      PIP 'must' have a SMALLER prio ...  */
            OS_EXIT_CRITICAL();                            /*      ... than current task!              */
            *perr = OS_ERR_PIP_LOWER;
        } else {
            OS_EXIT_CRITICAL();
            *perr = OS_ERR_NONE;
8112b304:	e0bfff17 	ldw	r2,-4(fp)
8112b308:	10000005 	stb	zero,0(r2)
        }
        return;
8112b30c:	00010106 	br	8112b714 <OSMutexPend+0x590>
    }
    mprio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* No, Get priority of mutex owner   */
8112b310:	e0bffd17 	ldw	r2,-12(fp)
8112b314:	1080020b 	ldhu	r2,8(r2)
8112b318:	e0bff605 	stb	r2,-40(fp)
    ptcb  = (OS_TCB *)(pevent->OSEventPtr);                       /*     Point to TCB of mutex owner   */
8112b31c:	e0bffd17 	ldw	r2,-12(fp)
8112b320:	10800117 	ldw	r2,4(r2)
8112b324:	e0bff715 	stw	r2,-36(fp)
    if (ptcb->OSTCBPrio > pip) {                                  /*     Need to promote prio of owner?*/
8112b328:	e0bff717 	ldw	r2,-36(fp)
8112b32c:	10800c83 	ldbu	r2,50(r2)
8112b330:	10803fcc 	andi	r2,r2,255
8112b334:	e0fff303 	ldbu	r3,-52(fp)
8112b338:	1880b92e 	bgeu	r3,r2,8112b620 <OSMutexPend+0x49c>
        if (mprio > OSTCBCur->OSTCBPrio) {
8112b33c:	d0a08417 	ldw	r2,-32240(gp)
8112b340:	10800c83 	ldbu	r2,50(r2)
8112b344:	10c03fcc 	andi	r3,r2,255
8112b348:	e0bff603 	ldbu	r2,-40(fp)
8112b34c:	1880b42e 	bgeu	r3,r2,8112b620 <OSMutexPend+0x49c>
            y = ptcb->OSTCBY;
8112b350:	e0bff717 	ldw	r2,-36(fp)
8112b354:	10800d03 	ldbu	r2,52(r2)
8112b358:	e0bff805 	stb	r2,-32(fp)
            if ((OSRdyTbl[y] & ptcb->OSTCBBitX) != 0) {           /*     See if mutex owner is ready   */
8112b35c:	e0fff803 	ldbu	r3,-32(fp)
8112b360:	d0a08044 	addi	r2,gp,-32255
8112b364:	1885883a 	add	r2,r3,r2
8112b368:	10c00003 	ldbu	r3,0(r2)
8112b36c:	e0bff717 	ldw	r2,-36(fp)
8112b370:	10800d43 	ldbu	r2,53(r2)
8112b374:	1884703a 	and	r2,r3,r2
8112b378:	10803fcc 	andi	r2,r2,255
8112b37c:	10001e26 	beq	r2,zero,8112b3f8 <OSMutexPend+0x274>
                OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                  /*     Yes, Remove owner from Rdy ...*/
8112b380:	e0fff803 	ldbu	r3,-32(fp)
8112b384:	e13ff803 	ldbu	r4,-32(fp)
8112b388:	d0a08044 	addi	r2,gp,-32255
8112b38c:	2085883a 	add	r2,r4,r2
8112b390:	10800003 	ldbu	r2,0(r2)
8112b394:	1009883a 	mov	r4,r2
8112b398:	e0bff717 	ldw	r2,-36(fp)
8112b39c:	10800d43 	ldbu	r2,53(r2)
8112b3a0:	0084303a 	nor	r2,zero,r2
8112b3a4:	2084703a 	and	r2,r4,r2
8112b3a8:	1009883a 	mov	r4,r2
8112b3ac:	d0a08044 	addi	r2,gp,-32255
8112b3b0:	1885883a 	add	r2,r3,r2
8112b3b4:	11000005 	stb	r4,0(r2)
                if (OSRdyTbl[y] == 0) {                           /*          ... list at current prio */
8112b3b8:	e0fff803 	ldbu	r3,-32(fp)
8112b3bc:	d0a08044 	addi	r2,gp,-32255
8112b3c0:	1885883a 	add	r2,r3,r2
8112b3c4:	10800003 	ldbu	r2,0(r2)
8112b3c8:	10803fcc 	andi	r2,r2,255
8112b3cc:	1000071e 	bne	r2,zero,8112b3ec <OSMutexPend+0x268>
                    OSRdyGrp &= ~ptcb->OSTCBBitY;
8112b3d0:	e0bff717 	ldw	r2,-36(fp)
8112b3d4:	10800d83 	ldbu	r2,54(r2)
8112b3d8:	0084303a 	nor	r2,zero,r2
8112b3dc:	1007883a 	mov	r3,r2
8112b3e0:	d0a08003 	ldbu	r2,-32256(gp)
8112b3e4:	1884703a 	and	r2,r3,r2
8112b3e8:	d0a08005 	stb	r2,-32256(gp)
                }
                rdy = OS_TRUE;
8112b3ec:	00800044 	movi	r2,1
8112b3f0:	e0bff005 	stb	r2,-64(fp)
8112b3f4:	00002a06 	br	8112b4a0 <OSMutexPend+0x31c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112b3f8:	e0bff717 	ldw	r2,-36(fp)
8112b3fc:	10800717 	ldw	r2,28(r2)
8112b400:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {                   /* Remove from event wait list       */
8112b404:	e0bff917 	ldw	r2,-28(fp)
8112b408:	10002426 	beq	r2,zero,8112b49c <OSMutexPend+0x318>
                    if ((pevent2->OSEventTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX) == 0) {
8112b40c:	e0bff717 	ldw	r2,-36(fp)
8112b410:	10800d03 	ldbu	r2,52(r2)
8112b414:	10803fcc 	andi	r2,r2,255
8112b418:	e0fff717 	ldw	r3,-36(fp)
8112b41c:	18c00d03 	ldbu	r3,52(r3)
8112b420:	18c03fcc 	andi	r3,r3,255
8112b424:	e13ff917 	ldw	r4,-28(fp)
8112b428:	20c7883a 	add	r3,r4,r3
8112b42c:	18c002c4 	addi	r3,r3,11
8112b430:	18c00003 	ldbu	r3,0(r3)
8112b434:	1809883a 	mov	r4,r3
8112b438:	e0fff717 	ldw	r3,-36(fp)
8112b43c:	18c00d43 	ldbu	r3,53(r3)
8112b440:	00c6303a 	nor	r3,zero,r3
8112b444:	20c6703a 	and	r3,r4,r3
8112b448:	1809883a 	mov	r4,r3
8112b44c:	e0fff917 	ldw	r3,-28(fp)
8112b450:	1887883a 	add	r3,r3,r2
8112b454:	18c002c4 	addi	r3,r3,11
8112b458:	19000005 	stb	r4,0(r3)
8112b45c:	e0fff917 	ldw	r3,-28(fp)
8112b460:	1885883a 	add	r2,r3,r2
8112b464:	108002c4 	addi	r2,r2,11
8112b468:	10800003 	ldbu	r2,0(r2)
8112b46c:	10803fcc 	andi	r2,r2,255
8112b470:	10000a1e 	bne	r2,zero,8112b49c <OSMutexPend+0x318>
                        pevent2->OSEventGrp &= ~ptcb->OSTCBBitY;
8112b474:	e0bff917 	ldw	r2,-28(fp)
8112b478:	10800283 	ldbu	r2,10(r2)
8112b47c:	1007883a 	mov	r3,r2
8112b480:	e0bff717 	ldw	r2,-36(fp)
8112b484:	10800d83 	ldbu	r2,54(r2)
8112b488:	0084303a 	nor	r2,zero,r2
8112b48c:	1884703a 	and	r2,r3,r2
8112b490:	1007883a 	mov	r3,r2
8112b494:	e0bff917 	ldw	r2,-28(fp)
8112b498:	10c00285 	stb	r3,10(r2)
                    }
                }
                rdy = OS_FALSE;                            /* No                                       */
8112b49c:	e03ff005 	stb	zero,-64(fp)
            }
            ptcb->OSTCBPrio = pip;                         /* Change owner task prio to PIP            */
8112b4a0:	e0bff717 	ldw	r2,-36(fp)
8112b4a4:	e0fff303 	ldbu	r3,-52(fp)
8112b4a8:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
            ptcb->OSTCBY    = (INT8U)( ptcb->OSTCBPrio >> 3);
8112b4ac:	e0bff717 	ldw	r2,-36(fp)
8112b4b0:	10800c83 	ldbu	r2,50(r2)
8112b4b4:	10803fcc 	andi	r2,r2,255
8112b4b8:	1004d0fa 	srli	r2,r2,3
8112b4bc:	1007883a 	mov	r3,r2
8112b4c0:	e0bff717 	ldw	r2,-36(fp)
8112b4c4:	10c00d05 	stb	r3,52(r2)
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x07);
8112b4c8:	e0bff717 	ldw	r2,-36(fp)
8112b4cc:	10800c83 	ldbu	r2,50(r2)
8112b4d0:	108001cc 	andi	r2,r2,7
8112b4d4:	1007883a 	mov	r3,r2
8112b4d8:	e0bff717 	ldw	r2,-36(fp)
8112b4dc:	10c00cc5 	stb	r3,51(r2)
            ptcb->OSTCBBitY = (INT8U)(1 << ptcb->OSTCBY);
8112b4e0:	e0bff717 	ldw	r2,-36(fp)
8112b4e4:	10800d03 	ldbu	r2,52(r2)
8112b4e8:	10803fcc 	andi	r2,r2,255
8112b4ec:	00c00044 	movi	r3,1
8112b4f0:	1884983a 	sll	r2,r3,r2
8112b4f4:	1007883a 	mov	r3,r2
8112b4f8:	e0bff717 	ldw	r2,-36(fp)
8112b4fc:	10c00d85 	stb	r3,54(r2)
            ptcb->OSTCBBitX = (INT8U)(1 << ptcb->OSTCBX);
8112b500:	e0bff717 	ldw	r2,-36(fp)
8112b504:	10800cc3 	ldbu	r2,51(r2)
8112b508:	10803fcc 	andi	r2,r2,255
8112b50c:	00c00044 	movi	r3,1
8112b510:	1884983a 	sll	r2,r3,r2
8112b514:	1007883a 	mov	r3,r2
8112b518:	e0bff717 	ldw	r2,-36(fp)
8112b51c:	10c00d45 	stb	r3,53(r2)
            ptcb->OSTCBY    = (INT8U)((ptcb->OSTCBPrio >> 4) & 0xFF);
            ptcb->OSTCBX    = (INT8U)( ptcb->OSTCBPrio & 0x0F);
            ptcb->OSTCBBitY = (INT16U)(1 << ptcb->OSTCBY);
            ptcb->OSTCBBitX = (INT16U)(1 << ptcb->OSTCBX);
#endif
            if (rdy == OS_TRUE) {                          /* If task was ready at owner's priority ...*/
8112b520:	e0bff003 	ldbu	r2,-64(fp)
8112b524:	10800058 	cmpnei	r2,r2,1
8112b528:	1000161e 	bne	r2,zero,8112b584 <OSMutexPend+0x400>
                OSRdyGrp               |= ptcb->OSTCBBitY; /* ... make it ready at new priority.       */
8112b52c:	e0bff717 	ldw	r2,-36(fp)
8112b530:	10c00d83 	ldbu	r3,54(r2)
8112b534:	d0a08003 	ldbu	r2,-32256(gp)
8112b538:	1884b03a 	or	r2,r3,r2
8112b53c:	d0a08005 	stb	r2,-32256(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112b540:	e0bff717 	ldw	r2,-36(fp)
8112b544:	10800d03 	ldbu	r2,52(r2)
8112b548:	10c03fcc 	andi	r3,r2,255
8112b54c:	e0bff717 	ldw	r2,-36(fp)
8112b550:	10800d03 	ldbu	r2,52(r2)
8112b554:	11003fcc 	andi	r4,r2,255
8112b558:	d0a08044 	addi	r2,gp,-32255
8112b55c:	2085883a 	add	r2,r4,r2
8112b560:	11000003 	ldbu	r4,0(r2)
8112b564:	e0bff717 	ldw	r2,-36(fp)
8112b568:	10800d43 	ldbu	r2,53(r2)
8112b56c:	2084b03a 	or	r2,r4,r2
8112b570:	1009883a 	mov	r4,r2
8112b574:	d0a08044 	addi	r2,gp,-32255
8112b578:	1885883a 	add	r2,r3,r2
8112b57c:	11000005 	stb	r4,0(r2)
8112b580:	00001f06 	br	8112b600 <OSMutexPend+0x47c>
            } else {
                pevent2 = ptcb->OSTCBEventPtr;
8112b584:	e0bff717 	ldw	r2,-36(fp)
8112b588:	10800717 	ldw	r2,28(r2)
8112b58c:	e0bff915 	stw	r2,-28(fp)
                if (pevent2 != (OS_EVENT *)0) {            /* Add to event wait list                   */
8112b590:	e0bff917 	ldw	r2,-28(fp)
8112b594:	10001a26 	beq	r2,zero,8112b600 <OSMutexPend+0x47c>
                    pevent2->OSEventGrp               |= ptcb->OSTCBBitY;
8112b598:	e0bff917 	ldw	r2,-28(fp)
8112b59c:	10c00283 	ldbu	r3,10(r2)
8112b5a0:	e0bff717 	ldw	r2,-36(fp)
8112b5a4:	10800d83 	ldbu	r2,54(r2)
8112b5a8:	1884b03a 	or	r2,r3,r2
8112b5ac:	1007883a 	mov	r3,r2
8112b5b0:	e0bff917 	ldw	r2,-28(fp)
8112b5b4:	10c00285 	stb	r3,10(r2)
                    pevent2->OSEventTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112b5b8:	e0bff717 	ldw	r2,-36(fp)
8112b5bc:	10800d03 	ldbu	r2,52(r2)
8112b5c0:	10803fcc 	andi	r2,r2,255
8112b5c4:	e0fff717 	ldw	r3,-36(fp)
8112b5c8:	18c00d03 	ldbu	r3,52(r3)
8112b5cc:	18c03fcc 	andi	r3,r3,255
8112b5d0:	e13ff917 	ldw	r4,-28(fp)
8112b5d4:	20c7883a 	add	r3,r4,r3
8112b5d8:	18c002c4 	addi	r3,r3,11
8112b5dc:	19000003 	ldbu	r4,0(r3)
8112b5e0:	e0fff717 	ldw	r3,-36(fp)
8112b5e4:	18c00d43 	ldbu	r3,53(r3)
8112b5e8:	20c6b03a 	or	r3,r4,r3
8112b5ec:	1809883a 	mov	r4,r3
8112b5f0:	e0fff917 	ldw	r3,-28(fp)
8112b5f4:	1885883a 	add	r2,r3,r2
8112b5f8:	108002c4 	addi	r2,r2,11
8112b5fc:	11000005 	stb	r4,0(r2)
                }
            }
            OSTCBPrioTbl[pip] = ptcb;
8112b600:	e0fff303 	ldbu	r3,-52(fp)
8112b604:	00a04574 	movhi	r2,33045
8112b608:	1087c004 	addi	r2,r2,7936
8112b60c:	18c7883a 	add	r3,r3,r3
8112b610:	18c7883a 	add	r3,r3,r3
8112b614:	10c5883a 	add	r2,r2,r3
8112b618:	e0fff717 	ldw	r3,-36(fp)
8112b61c:	10c00015 	stw	r3,0(r2)
        }
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MUTEX;         /* Mutex not available, pend current task        */
8112b620:	d0a08417 	ldw	r2,-32240(gp)
8112b624:	d0e08417 	ldw	r3,-32240(gp)
8112b628:	18c00c03 	ldbu	r3,48(r3)
8112b62c:	18c00414 	ori	r3,r3,16
8112b630:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112b634:	d0a08417 	ldw	r2,-32240(gp)
8112b638:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store timeout in current task's TCB           */
8112b63c:	d0a08417 	ldw	r2,-32240(gp)
8112b640:	e0fffe0b 	ldhu	r3,-8(fp)
8112b644:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112b648:	e13ffd17 	ldw	r4,-12(fp)
8112b64c:	11279c40 	call	811279c4 <OS_EventTaskWait>
8112b650:	e0bff117 	ldw	r2,-60(fp)
8112b654:	e0bffb15 	stw	r2,-20(fp)
8112b658:	e0bffb17 	ldw	r2,-20(fp)
8112b65c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112b660:	11282e00 	call	811282e0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b664:	0005303a 	rdctl	r2,status
8112b668:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b66c:	e0fff517 	ldw	r3,-44(fp)
8112b670:	00bfff84 	movi	r2,-2
8112b674:	1884703a 	and	r2,r3,r2
8112b678:	1001703a 	wrctl	status,r2
  
  return context;
8112b67c:	e0bff517 	ldw	r2,-44(fp)
    OS_ENTER_CRITICAL();
8112b680:	e0bff115 	stw	r2,-60(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112b684:	d0a08417 	ldw	r2,-32240(gp)
8112b688:	10800c43 	ldbu	r2,49(r2)
8112b68c:	10803fcc 	andi	r2,r2,255
8112b690:	10000326 	beq	r2,zero,8112b6a0 <OSMutexPend+0x51c>
8112b694:	108000a0 	cmpeqi	r2,r2,2
8112b698:	1000041e 	bne	r2,zero,8112b6ac <OSMutexPend+0x528>
8112b69c:	00000706 	br	8112b6bc <OSMutexPend+0x538>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112b6a0:	e0bfff17 	ldw	r2,-4(fp)
8112b6a4:	10000005 	stb	zero,0(r2)
             break;
8112b6a8:	00000c06 	br	8112b6dc <OSMutexPend+0x558>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted getting mutex        */
8112b6ac:	e0bfff17 	ldw	r2,-4(fp)
8112b6b0:	00c00384 	movi	r3,14
8112b6b4:	10c00005 	stb	r3,0(r2)
             break;
8112b6b8:	00000806 	br	8112b6dc <OSMutexPend+0x558>
             
        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112b6bc:	d0a08417 	ldw	r2,-32240(gp)
8112b6c0:	e17ffd17 	ldw	r5,-12(fp)
8112b6c4:	1009883a 	mov	r4,r2
8112b6c8:	1127c340 	call	81127c34 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get mutex within TO   */
8112b6cc:	e0bfff17 	ldw	r2,-4(fp)
8112b6d0:	00c00284 	movi	r3,10
8112b6d4:	10c00005 	stb	r3,0(r2)
             break;
8112b6d8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112b6dc:	d0a08417 	ldw	r2,-32240(gp)
8112b6e0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112b6e4:	d0a08417 	ldw	r2,-32240(gp)
8112b6e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112b6ec:	d0a08417 	ldw	r2,-32240(gp)
8112b6f0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112b6f4:	d0a08417 	ldw	r2,-32240(gp)
8112b6f8:	10000815 	stw	zero,32(r2)
8112b6fc:	e0bff117 	ldw	r2,-60(fp)
8112b700:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b704:	e0bffa17 	ldw	r2,-24(fp)
8112b708:	1001703a 	wrctl	status,r2
8112b70c:	00000106 	br	8112b714 <OSMutexPend+0x590>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
        return;
8112b710:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112b714:	e037883a 	mov	sp,fp
8112b718:	dfc00117 	ldw	ra,4(sp)
8112b71c:	df000017 	ldw	fp,0(sp)
8112b720:	dec00204 	addi	sp,sp,8
8112b724:	f800283a 	ret

8112b728 <OSMutexPost>:
*                                      what tasks will be using the Mutex.
*********************************************************************************************************
*/

INT8U  OSMutexPost (OS_EVENT *pevent)
{
8112b728:	defff604 	addi	sp,sp,-40
8112b72c:	de00012e 	bgeu	sp,et,8112b734 <OSMutexPost+0xc>
8112b730:	003b68fa 	trap	3
8112b734:	dfc00915 	stw	ra,36(sp)
8112b738:	df000815 	stw	fp,32(sp)
8112b73c:	df000804 	addi	fp,sp,32
8112b740:	e13fff15 	stw	r4,-4(fp)
    INT8U      pip;                                   /* Priority inheritance priority                 */
    INT8U      prio;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112b744:	e03ff815 	stw	zero,-32(fp)
#endif



    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112b748:	d0a08303 	ldbu	r2,-32244(gp)
8112b74c:	10803fcc 	andi	r2,r2,255
8112b750:	10000226 	beq	r2,zero,8112b75c <OSMutexPost+0x34>
        return (OS_ERR_POST_ISR);                     /* ... can't POST mutex from an ISR              */
8112b754:	00800144 	movi	r2,5
8112b758:	00007606 	br	8112b934 <OSMutexPost+0x20c>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112b75c:	e0bfff17 	ldw	r2,-4(fp)
8112b760:	1000021e 	bne	r2,zero,8112b76c <OSMutexPost+0x44>
        return (OS_ERR_PEVENT_NULL);
8112b764:	00800104 	movi	r2,4
8112b768:	00007206 	br	8112b934 <OSMutexPost+0x20c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) { /* Validate event block type                     */
8112b76c:	e0bfff17 	ldw	r2,-4(fp)
8112b770:	10800003 	ldbu	r2,0(r2)
8112b774:	10803fcc 	andi	r2,r2,255
8112b778:	10800120 	cmpeqi	r2,r2,4
8112b77c:	1000021e 	bne	r2,zero,8112b788 <OSMutexPost+0x60>
        return (OS_ERR_EVENT_TYPE);
8112b780:	00800044 	movi	r2,1
8112b784:	00006b06 	br	8112b934 <OSMutexPost+0x20c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b788:	0005303a 	rdctl	r2,status
8112b78c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b790:	e0fffe17 	ldw	r3,-8(fp)
8112b794:	00bfff84 	movi	r2,-2
8112b798:	1884703a 	and	r2,r3,r2
8112b79c:	1001703a 	wrctl	status,r2
  
  return context;
8112b7a0:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112b7a4:	e0bff815 	stw	r2,-32(fp)
    pip  = (INT8U)(pevent->OSEventCnt >> 8);          /* Get priority inheritance priority of mutex    */
8112b7a8:	e0bfff17 	ldw	r2,-4(fp)
8112b7ac:	1080020b 	ldhu	r2,8(r2)
8112b7b0:	10bfffcc 	andi	r2,r2,65535
8112b7b4:	1004d23a 	srli	r2,r2,8
8112b7b8:	e0bffa05 	stb	r2,-24(fp)
    prio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);  /* Get owner's original priority      */
8112b7bc:	e0bfff17 	ldw	r2,-4(fp)
8112b7c0:	1080020b 	ldhu	r2,8(r2)
8112b7c4:	e0bffa45 	stb	r2,-23(fp)
    if (OSTCBCur != (OS_TCB *)pevent->OSEventPtr) {   /* See if posting task owns the MUTEX            */
8112b7c8:	e0bfff17 	ldw	r2,-4(fp)
8112b7cc:	10c00117 	ldw	r3,4(r2)
8112b7d0:	d0a08417 	ldw	r2,-32240(gp)
8112b7d4:	18800626 	beq	r3,r2,8112b7f0 <OSMutexPost+0xc8>
8112b7d8:	e0bff817 	ldw	r2,-32(fp)
8112b7dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112b7e0:	e0bff917 	ldw	r2,-28(fp)
8112b7e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NOT_MUTEX_OWNER);
8112b7e8:	00801904 	movi	r2,100
8112b7ec:	00005106 	br	8112b934 <OSMutexPost+0x20c>
    }
    if (OSTCBCur->OSTCBPrio == pip) {                 /* Did we have to raise current task's priority? */
8112b7f0:	d0a08417 	ldw	r2,-32240(gp)
8112b7f4:	10800c83 	ldbu	r2,50(r2)
8112b7f8:	10c03fcc 	andi	r3,r2,255
8112b7fc:	e0bffa03 	ldbu	r2,-24(fp)
8112b800:	1880051e 	bne	r3,r2,8112b818 <OSMutexPost+0xf0>
        OSMutex_RdyAtPrio(OSTCBCur, prio);            /* Restore the task's original priority          */
8112b804:	d0a08417 	ldw	r2,-32240(gp)
8112b808:	e0fffa43 	ldbu	r3,-23(fp)
8112b80c:	180b883a 	mov	r5,r3
8112b810:	1009883a 	mov	r4,r2
8112b814:	112babc0 	call	8112babc <OSMutex_RdyAtPrio>
    }
    OSTCBPrioTbl[pip] = OS_TCB_RESERVED;              /* Reserve table entry                           */
8112b818:	e0fffa03 	ldbu	r3,-24(fp)
8112b81c:	00a04574 	movhi	r2,33045
8112b820:	1087c004 	addi	r2,r2,7936
8112b824:	18c7883a 	add	r3,r3,r3
8112b828:	18c7883a 	add	r3,r3,r3
8112b82c:	10c5883a 	add	r2,r2,r3
8112b830:	00c00044 	movi	r3,1
8112b834:	10c00015 	stw	r3,0(r2)
    if (pevent->OSEventGrp != 0) {                    /* Any task waiting for the mutex?               */
8112b838:	e0bfff17 	ldw	r2,-4(fp)
8112b83c:	10800283 	ldbu	r2,10(r2)
8112b840:	10803fcc 	andi	r2,r2,255
8112b844:	10002e26 	beq	r2,zero,8112b900 <OSMutexPost+0x1d8>
                                                      /* Yes, Make HPT waiting for mutex ready         */
        prio                = OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MUTEX, OS_STAT_PEND_OK);
8112b848:	000f883a 	mov	r7,zero
8112b84c:	01800404 	movi	r6,16
8112b850:	000b883a 	mov	r5,zero
8112b854:	e13fff17 	ldw	r4,-4(fp)
8112b858:	11278240 	call	81127824 <OS_EventTaskRdy>
8112b85c:	e0bffa45 	stb	r2,-23(fp)
        pevent->OSEventCnt &= OS_MUTEX_KEEP_UPPER_8;  /*      Save priority of mutex's new owner       */
8112b860:	e0bfff17 	ldw	r2,-4(fp)
8112b864:	10c0020b 	ldhu	r3,8(r2)
8112b868:	00bfc004 	movi	r2,-256
8112b86c:	1884703a 	and	r2,r3,r2
8112b870:	1007883a 	mov	r3,r2
8112b874:	e0bfff17 	ldw	r2,-4(fp)
8112b878:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventCnt |= prio;
8112b87c:	e0bfff17 	ldw	r2,-4(fp)
8112b880:	10c0020b 	ldhu	r3,8(r2)
8112b884:	e0bffa43 	ldbu	r2,-23(fp)
8112b888:	1884b03a 	or	r2,r3,r2
8112b88c:	1007883a 	mov	r3,r2
8112b890:	e0bfff17 	ldw	r2,-4(fp)
8112b894:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr  = OSTCBPrioTbl[prio];     /*      Link to new mutex owner's OS_TCB         */
8112b898:	e0fffa43 	ldbu	r3,-23(fp)
8112b89c:	00a04574 	movhi	r2,33045
8112b8a0:	1087c004 	addi	r2,r2,7936
8112b8a4:	18c7883a 	add	r3,r3,r3
8112b8a8:	18c7883a 	add	r3,r3,r3
8112b8ac:	10c5883a 	add	r2,r2,r3
8112b8b0:	10c00017 	ldw	r3,0(r2)
8112b8b4:	e0bfff17 	ldw	r2,-4(fp)
8112b8b8:	10c00115 	stw	r3,4(r2)
        if (prio <= pip) {                            /*      PIP 'must' have a SMALLER prio ...       */
8112b8bc:	e0bffa43 	ldbu	r2,-23(fp)
8112b8c0:	e0fffa03 	ldbu	r3,-24(fp)
8112b8c4:	18800736 	bltu	r3,r2,8112b8e4 <OSMutexPost+0x1bc>
8112b8c8:	e0bff817 	ldw	r2,-32(fp)
8112b8cc:	e0bffb15 	stw	r2,-20(fp)
8112b8d0:	e0bffb17 	ldw	r2,-20(fp)
8112b8d4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();                       /*      ... than current task!                   */
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112b8d8:	11282e00 	call	811282e0 <OS_Sched>
            return (OS_ERR_PIP_LOWER);
8112b8dc:	00801e04 	movi	r2,120
8112b8e0:	00001406 	br	8112b934 <OSMutexPost+0x20c>
8112b8e4:	e0bff817 	ldw	r2,-32(fp)
8112b8e8:	e0bffc15 	stw	r2,-16(fp)
8112b8ec:	e0bffc17 	ldw	r2,-16(fp)
8112b8f0:	1001703a 	wrctl	status,r2
        } else {
            OS_EXIT_CRITICAL();
            OS_Sched();                               /*      Find highest priority task ready to run  */
8112b8f4:	11282e00 	call	811282e0 <OS_Sched>
            return (OS_ERR_NONE);
8112b8f8:	0005883a 	mov	r2,zero
8112b8fc:	00000d06 	br	8112b934 <OSMutexPost+0x20c>
        }
    }
    pevent->OSEventCnt |= OS_MUTEX_AVAILABLE;         /* No,  Mutex is now available                   */
8112b900:	e0bfff17 	ldw	r2,-4(fp)
8112b904:	1080020b 	ldhu	r2,8(r2)
8112b908:	10803fd4 	ori	r2,r2,255
8112b90c:	1007883a 	mov	r3,r2
8112b910:	e0bfff17 	ldw	r2,-4(fp)
8112b914:	10c0020d 	sth	r3,8(r2)
    pevent->OSEventPtr  = (void *)0;
8112b918:	e0bfff17 	ldw	r2,-4(fp)
8112b91c:	10000115 	stw	zero,4(r2)
8112b920:	e0bff817 	ldw	r2,-32(fp)
8112b924:	e0bffd15 	stw	r2,-12(fp)
8112b928:	e0bffd17 	ldw	r2,-12(fp)
8112b92c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112b930:	0005883a 	mov	r2,zero
}
8112b934:	e037883a 	mov	sp,fp
8112b938:	dfc00117 	ldw	ra,4(sp)
8112b93c:	df000017 	ldw	fp,0(sp)
8112b940:	dec00204 	addi	sp,sp,8
8112b944:	f800283a 	ret

8112b948 <OSMutexQuery>:
*********************************************************************************************************
*/

#if OS_MUTEX_QUERY_EN > 0
INT8U  OSMutexQuery (OS_EVENT *pevent, OS_MUTEX_DATA *p_mutex_data)
{
8112b948:	defff704 	addi	sp,sp,-36
8112b94c:	de00012e 	bgeu	sp,et,8112b954 <OSMutexQuery+0xc>
8112b950:	003b68fa 	trap	3
8112b954:	df000815 	stw	fp,32(sp)
8112b958:	df000804 	addi	fp,sp,32
8112b95c:	e13ffe15 	stw	r4,-8(fp)
8112b960:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112b964:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112b968:	d0a08303 	ldbu	r2,-32244(gp)
8112b96c:	10803fcc 	andi	r2,r2,255
8112b970:	10000226 	beq	r2,zero,8112b97c <OSMutexQuery+0x34>
        return (OS_ERR_QUERY_ISR);                         /* ... can't QUERY mutex from an ISR        */
8112b974:	00800184 	movi	r2,6
8112b978:	00004c06 	br	8112baac <OSMutexQuery+0x164>
    }
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112b97c:	e0bffe17 	ldw	r2,-8(fp)
8112b980:	1000021e 	bne	r2,zero,8112b98c <OSMutexQuery+0x44>
        return (OS_ERR_PEVENT_NULL);
8112b984:	00800104 	movi	r2,4
8112b988:	00004806 	br	8112baac <OSMutexQuery+0x164>
    }
    if (p_mutex_data == (OS_MUTEX_DATA *)0) {              /* Validate 'p_mutex_data'                  */
8112b98c:	e0bfff17 	ldw	r2,-4(fp)
8112b990:	1000021e 	bne	r2,zero,8112b99c <OSMutexQuery+0x54>
        return (OS_ERR_PDATA_NULL);
8112b994:	00800244 	movi	r2,9
8112b998:	00004406 	br	8112baac <OSMutexQuery+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MUTEX) {      /* Validate event block type                */
8112b99c:	e0bffe17 	ldw	r2,-8(fp)
8112b9a0:	10800003 	ldbu	r2,0(r2)
8112b9a4:	10803fcc 	andi	r2,r2,255
8112b9a8:	10800120 	cmpeqi	r2,r2,4
8112b9ac:	1000021e 	bne	r2,zero,8112b9b8 <OSMutexQuery+0x70>
        return (OS_ERR_EVENT_TYPE);
8112b9b0:	00800044 	movi	r2,1
8112b9b4:	00003d06 	br	8112baac <OSMutexQuery+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112b9b8:	0005303a 	rdctl	r2,status
8112b9bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112b9c0:	e0fffd17 	ldw	r3,-12(fp)
8112b9c4:	00bfff84 	movi	r2,-2
8112b9c8:	1884703a 	and	r2,r3,r2
8112b9cc:	1001703a 	wrctl	status,r2
  
  return context;
8112b9d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112b9d4:	e0bffb15 	stw	r2,-20(fp)
    p_mutex_data->OSMutexPIP  = (INT8U)(pevent->OSEventCnt >> 8);
8112b9d8:	e0bffe17 	ldw	r2,-8(fp)
8112b9dc:	1080020b 	ldhu	r2,8(r2)
8112b9e0:	10bfffcc 	andi	r2,r2,65535
8112b9e4:	1004d23a 	srli	r2,r2,8
8112b9e8:	1007883a 	mov	r3,r2
8112b9ec:	e0bfff17 	ldw	r2,-4(fp)
8112b9f0:	10c00245 	stb	r3,9(r2)
    p_mutex_data->OSOwnerPrio = (INT8U)(pevent->OSEventCnt & OS_MUTEX_KEEP_LOWER_8);
8112b9f4:	e0bffe17 	ldw	r2,-8(fp)
8112b9f8:	1080020b 	ldhu	r2,8(r2)
8112b9fc:	1007883a 	mov	r3,r2
8112ba00:	e0bfff17 	ldw	r2,-4(fp)
8112ba04:	10c00205 	stb	r3,8(r2)
    if (p_mutex_data->OSOwnerPrio == 0xFF) {
8112ba08:	e0bfff17 	ldw	r2,-4(fp)
8112ba0c:	10800203 	ldbu	r2,8(r2)
8112ba10:	10803fcc 	andi	r2,r2,255
8112ba14:	10803fd8 	cmpnei	r2,r2,255
8112ba18:	1000041e 	bne	r2,zero,8112ba2c <OSMutexQuery+0xe4>
        p_mutex_data->OSValue = OS_TRUE;
8112ba1c:	e0bfff17 	ldw	r2,-4(fp)
8112ba20:	00c00044 	movi	r3,1
8112ba24:	10c001c5 	stb	r3,7(r2)
8112ba28:	00000206 	br	8112ba34 <OSMutexQuery+0xec>
    } else {
        p_mutex_data->OSValue = OS_FALSE;
8112ba2c:	e0bfff17 	ldw	r2,-4(fp)
8112ba30:	100001c5 	stb	zero,7(r2)
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
8112ba34:	e0bffe17 	ldw	r2,-8(fp)
8112ba38:	10c00283 	ldbu	r3,10(r2)
8112ba3c:	e0bfff17 	ldw	r2,-4(fp)
8112ba40:	10c00185 	stb	r3,6(r2)
    psrc                      = &pevent->OSEventTbl[0];
8112ba44:	e0bffe17 	ldw	r2,-8(fp)
8112ba48:	108002c4 	addi	r2,r2,11
8112ba4c:	e0bff915 	stw	r2,-28(fp)
    pdest                     = &p_mutex_data->OSEventTbl[0];
8112ba50:	e0bfff17 	ldw	r2,-4(fp)
8112ba54:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ba58:	e03ff805 	stb	zero,-32(fp)
8112ba5c:	00000b06 	br	8112ba8c <OSMutexQuery+0x144>
        *pdest++ = *psrc++;
8112ba60:	e0bffa17 	ldw	r2,-24(fp)
8112ba64:	10c00044 	addi	r3,r2,1
8112ba68:	e0fffa15 	stw	r3,-24(fp)
8112ba6c:	e0fff917 	ldw	r3,-28(fp)
8112ba70:	19000044 	addi	r4,r3,1
8112ba74:	e13ff915 	stw	r4,-28(fp)
8112ba78:	18c00003 	ldbu	r3,0(r3)
8112ba7c:	10c00005 	stb	r3,0(r2)
        p_mutex_data->OSValue = OS_FALSE;
    }
    p_mutex_data->OSEventGrp  = pevent->OSEventGrp;        /* Copy wait list                           */
    psrc                      = &pevent->OSEventTbl[0];
    pdest                     = &p_mutex_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112ba80:	e0bff803 	ldbu	r2,-32(fp)
8112ba84:	10800044 	addi	r2,r2,1
8112ba88:	e0bff805 	stb	r2,-32(fp)
8112ba8c:	e0bff803 	ldbu	r2,-32(fp)
8112ba90:	108001b0 	cmpltui	r2,r2,6
8112ba94:	103ff21e 	bne	r2,zero,8112ba60 <__reset+0xfb10ba60>
8112ba98:	e0bffb17 	ldw	r2,-20(fp)
8112ba9c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112baa0:	e0bffc17 	ldw	r2,-16(fp)
8112baa4:	1001703a 	wrctl	status,r2
        *pdest++ = *psrc++;
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112baa8:	0005883a 	mov	r2,zero
}
8112baac:	e037883a 	mov	sp,fp
8112bab0:	df000017 	ldw	fp,0(sp)
8112bab4:	dec00104 	addi	sp,sp,4
8112bab8:	f800283a 	ret

8112babc <OSMutex_RdyAtPrio>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OSMutex_RdyAtPrio (OS_TCB *ptcb, INT8U prio)
{
8112babc:	defffc04 	addi	sp,sp,-16
8112bac0:	de00012e 	bgeu	sp,et,8112bac8 <OSMutex_RdyAtPrio+0xc>
8112bac4:	003b68fa 	trap	3
8112bac8:	df000315 	stw	fp,12(sp)
8112bacc:	df000304 	addi	fp,sp,12
8112bad0:	e13ffe15 	stw	r4,-8(fp)
8112bad4:	2805883a 	mov	r2,r5
8112bad8:	e0bfff05 	stb	r2,-4(fp)
    INT8U   y;


    y            =  ptcb->OSTCBY;                          /* Remove owner from ready list at 'pip'    */
8112badc:	e0bffe17 	ldw	r2,-8(fp)
8112bae0:	10800d03 	ldbu	r2,52(r2)
8112bae4:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;
8112bae8:	e0fffd03 	ldbu	r3,-12(fp)
8112baec:	e13ffd03 	ldbu	r4,-12(fp)
8112baf0:	d0a08044 	addi	r2,gp,-32255
8112baf4:	2085883a 	add	r2,r4,r2
8112baf8:	10800003 	ldbu	r2,0(r2)
8112bafc:	1009883a 	mov	r4,r2
8112bb00:	e0bffe17 	ldw	r2,-8(fp)
8112bb04:	10800d43 	ldbu	r2,53(r2)
8112bb08:	0084303a 	nor	r2,zero,r2
8112bb0c:	2084703a 	and	r2,r4,r2
8112bb10:	1009883a 	mov	r4,r2
8112bb14:	d0a08044 	addi	r2,gp,-32255
8112bb18:	1885883a 	add	r2,r3,r2
8112bb1c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112bb20:	e0fffd03 	ldbu	r3,-12(fp)
8112bb24:	d0a08044 	addi	r2,gp,-32255
8112bb28:	1885883a 	add	r2,r3,r2
8112bb2c:	10800003 	ldbu	r2,0(r2)
8112bb30:	10803fcc 	andi	r2,r2,255
8112bb34:	1000071e 	bne	r2,zero,8112bb54 <OSMutex_RdyAtPrio+0x98>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112bb38:	e0bffe17 	ldw	r2,-8(fp)
8112bb3c:	10800d83 	ldbu	r2,54(r2)
8112bb40:	0084303a 	nor	r2,zero,r2
8112bb44:	1007883a 	mov	r3,r2
8112bb48:	d0a08003 	ldbu	r2,-32256(gp)
8112bb4c:	1884703a 	and	r2,r3,r2
8112bb50:	d0a08005 	stb	r2,-32256(gp)
    }
    ptcb->OSTCBPrio         = prio;
8112bb54:	e0bffe17 	ldw	r2,-8(fp)
8112bb58:	e0ffff03 	ldbu	r3,-4(fp)
8112bb5c:	10c00c85 	stb	r3,50(r2)
#if OS_LOWEST_PRIO <= 63
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)3) & (INT8U)0x07);
8112bb60:	e0bfff03 	ldbu	r2,-4(fp)
8112bb64:	1004d0fa 	srli	r2,r2,3
8112bb68:	108001cc 	andi	r2,r2,7
8112bb6c:	1007883a 	mov	r3,r2
8112bb70:	e0bffe17 	ldw	r2,-8(fp)
8112bb74:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x07);
8112bb78:	e0bfff03 	ldbu	r2,-4(fp)
8112bb7c:	108001cc 	andi	r2,r2,7
8112bb80:	1007883a 	mov	r3,r2
8112bb84:	e0bffe17 	ldw	r2,-8(fp)
8112bb88:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY         = (INT8U)(1 << ptcb->OSTCBY);
8112bb8c:	e0bffe17 	ldw	r2,-8(fp)
8112bb90:	10800d03 	ldbu	r2,52(r2)
8112bb94:	10803fcc 	andi	r2,r2,255
8112bb98:	00c00044 	movi	r3,1
8112bb9c:	1884983a 	sll	r2,r3,r2
8112bba0:	1007883a 	mov	r3,r2
8112bba4:	e0bffe17 	ldw	r2,-8(fp)
8112bba8:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX         = (INT8U)(1 << ptcb->OSTCBX);
8112bbac:	e0bffe17 	ldw	r2,-8(fp)
8112bbb0:	10800cc3 	ldbu	r2,51(r2)
8112bbb4:	10803fcc 	andi	r2,r2,255
8112bbb8:	00c00044 	movi	r3,1
8112bbbc:	1884983a 	sll	r2,r3,r2
8112bbc0:	1007883a 	mov	r3,r2
8112bbc4:	e0bffe17 	ldw	r2,-8(fp)
8112bbc8:	10c00d45 	stb	r3,53(r2)
    ptcb->OSTCBY            = (INT8U)((prio >> (INT8U)4) & (INT8U)0x0F);
    ptcb->OSTCBX            = (INT8U) (prio & (INT8U)0x0F);
    ptcb->OSTCBBitY         = (INT16U)(1 << ptcb->OSTCBY);
    ptcb->OSTCBBitX         = (INT16U)(1 << ptcb->OSTCBX);
#endif
    OSRdyGrp               |= ptcb->OSTCBBitY;             /* Make task ready at original priority     */
8112bbcc:	e0bffe17 	ldw	r2,-8(fp)
8112bbd0:	10c00d83 	ldbu	r3,54(r2)
8112bbd4:	d0a08003 	ldbu	r2,-32256(gp)
8112bbd8:	1884b03a 	or	r2,r3,r2
8112bbdc:	d0a08005 	stb	r2,-32256(gp)
    OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112bbe0:	e0bffe17 	ldw	r2,-8(fp)
8112bbe4:	10800d03 	ldbu	r2,52(r2)
8112bbe8:	10c03fcc 	andi	r3,r2,255
8112bbec:	e0bffe17 	ldw	r2,-8(fp)
8112bbf0:	10800d03 	ldbu	r2,52(r2)
8112bbf4:	11003fcc 	andi	r4,r2,255
8112bbf8:	d0a08044 	addi	r2,gp,-32255
8112bbfc:	2085883a 	add	r2,r4,r2
8112bc00:	11000003 	ldbu	r4,0(r2)
8112bc04:	e0bffe17 	ldw	r2,-8(fp)
8112bc08:	10800d43 	ldbu	r2,53(r2)
8112bc0c:	2084b03a 	or	r2,r4,r2
8112bc10:	1009883a 	mov	r4,r2
8112bc14:	d0a08044 	addi	r2,gp,-32255
8112bc18:	1885883a 	add	r2,r3,r2
8112bc1c:	11000005 	stb	r4,0(r2)
    OSTCBPrioTbl[prio]      = ptcb;
8112bc20:	e0ffff03 	ldbu	r3,-4(fp)
8112bc24:	00a04574 	movhi	r2,33045
8112bc28:	1087c004 	addi	r2,r2,7936
8112bc2c:	18c7883a 	add	r3,r3,r3
8112bc30:	18c7883a 	add	r3,r3,r3
8112bc34:	10c5883a 	add	r2,r2,r3
8112bc38:	e0fffe17 	ldw	r3,-8(fp)
8112bc3c:	10c00015 	stw	r3,0(r2)
}
8112bc40:	0001883a 	nop
8112bc44:	e037883a 	mov	sp,fp
8112bc48:	df000017 	ldw	fp,0(sp)
8112bc4c:	dec00104 	addi	sp,sp,4
8112bc50:	f800283a 	ret

8112bc54 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
8112bc54:	defff804 	addi	sp,sp,-32
8112bc58:	de00012e 	bgeu	sp,et,8112bc60 <OSQAccept+0xc>
8112bc5c:	003b68fa 	trap	3
8112bc60:	df000715 	stw	fp,28(sp)
8112bc64:	df000704 	addi	fp,sp,28
8112bc68:	e13ffe15 	stw	r4,-8(fp)
8112bc6c:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112bc70:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112bc74:	e0bfff17 	ldw	r2,-4(fp)
8112bc78:	1000021e 	bne	r2,zero,8112bc84 <OSQAccept+0x30>
        return ((void *)0);
8112bc7c:	0005883a 	mov	r2,zero
8112bc80:	00004206 	br	8112bd8c <OSQAccept+0x138>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112bc84:	e0bffe17 	ldw	r2,-8(fp)
8112bc88:	1000051e 	bne	r2,zero,8112bca0 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112bc8c:	e0bfff17 	ldw	r2,-4(fp)
8112bc90:	00c00104 	movi	r3,4
8112bc94:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112bc98:	0005883a 	mov	r2,zero
8112bc9c:	00003b06 	br	8112bd8c <OSQAccept+0x138>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112bca0:	e0bffe17 	ldw	r2,-8(fp)
8112bca4:	10800003 	ldbu	r2,0(r2)
8112bca8:	10803fcc 	andi	r2,r2,255
8112bcac:	108000a0 	cmpeqi	r2,r2,2
8112bcb0:	1000051e 	bne	r2,zero,8112bcc8 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
8112bcb4:	e0bfff17 	ldw	r2,-4(fp)
8112bcb8:	00c00044 	movi	r3,1
8112bcbc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112bcc0:	0005883a 	mov	r2,zero
8112bcc4:	00003106 	br	8112bd8c <OSQAccept+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bcc8:	0005303a 	rdctl	r2,status
8112bccc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bcd0:	e0fffd17 	ldw	r3,-12(fp)
8112bcd4:	00bfff84 	movi	r2,-2
8112bcd8:	1884703a 	and	r2,r3,r2
8112bcdc:	1001703a 	wrctl	status,r2
  
  return context;
8112bce0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112bce4:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112bce8:	e0bffe17 	ldw	r2,-8(fp)
8112bcec:	10800117 	ldw	r2,4(r2)
8112bcf0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112bcf4:	e0bffc17 	ldw	r2,-16(fp)
8112bcf8:	1080058b 	ldhu	r2,22(r2)
8112bcfc:	10bfffcc 	andi	r2,r2,65535
8112bd00:	10001926 	beq	r2,zero,8112bd68 <OSQAccept+0x114>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112bd04:	e0bffc17 	ldw	r2,-16(fp)
8112bd08:	10800417 	ldw	r2,16(r2)
8112bd0c:	11000104 	addi	r4,r2,4
8112bd10:	e0fffc17 	ldw	r3,-16(fp)
8112bd14:	19000415 	stw	r4,16(r3)
8112bd18:	10800017 	ldw	r2,0(r2)
8112bd1c:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112bd20:	e0bffc17 	ldw	r2,-16(fp)
8112bd24:	1080058b 	ldhu	r2,22(r2)
8112bd28:	10bfffc4 	addi	r2,r2,-1
8112bd2c:	1007883a 	mov	r3,r2
8112bd30:	e0bffc17 	ldw	r2,-16(fp)
8112bd34:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112bd38:	e0bffc17 	ldw	r2,-16(fp)
8112bd3c:	10c00417 	ldw	r3,16(r2)
8112bd40:	e0bffc17 	ldw	r2,-16(fp)
8112bd44:	10800217 	ldw	r2,8(r2)
8112bd48:	1880041e 	bne	r3,r2,8112bd5c <OSQAccept+0x108>
            pq->OSQOut = pq->OSQStart;
8112bd4c:	e0bffc17 	ldw	r2,-16(fp)
8112bd50:	10c00117 	ldw	r3,4(r2)
8112bd54:	e0bffc17 	ldw	r2,-16(fp)
8112bd58:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
8112bd5c:	e0bfff17 	ldw	r2,-4(fp)
8112bd60:	10000005 	stb	zero,0(r2)
8112bd64:	00000406 	br	8112bd78 <OSQAccept+0x124>
    } else {
        *perr = OS_ERR_Q_EMPTY;
8112bd68:	e0bfff17 	ldw	r2,-4(fp)
8112bd6c:	00c007c4 	movi	r3,31
8112bd70:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
8112bd74:	e03ff915 	stw	zero,-28(fp)
8112bd78:	e0bffa17 	ldw	r2,-24(fp)
8112bd7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112bd80:	e0bffb17 	ldw	r2,-20(fp)
8112bd84:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
8112bd88:	e0bff917 	ldw	r2,-28(fp)
}
8112bd8c:	e037883a 	mov	sp,fp
8112bd90:	df000017 	ldw	fp,0(sp)
8112bd94:	dec00104 	addi	sp,sp,4
8112bd98:	f800283a 	ret

8112bd9c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
8112bd9c:	defff404 	addi	sp,sp,-48
8112bda0:	de00012e 	bgeu	sp,et,8112bda8 <OSQCreate+0xc>
8112bda4:	003b68fa 	trap	3
8112bda8:	dfc00b15 	stw	ra,44(sp)
8112bdac:	df000a15 	stw	fp,40(sp)
8112bdb0:	df000a04 	addi	fp,sp,40
8112bdb4:	e13ffe15 	stw	r4,-8(fp)
8112bdb8:	2805883a 	mov	r2,r5
8112bdbc:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112bdc0:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112bdc4:	d0a08303 	ldbu	r2,-32244(gp)
8112bdc8:	10803fcc 	andi	r2,r2,255
8112bdcc:	10000226 	beq	r2,zero,8112bdd8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
8112bdd0:	0005883a 	mov	r2,zero
8112bdd4:	00005906 	br	8112bf3c <OSQCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bdd8:	0005303a 	rdctl	r2,status
8112bddc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bde0:	e0fffd17 	ldw	r3,-12(fp)
8112bde4:	00bfff84 	movi	r2,-2
8112bde8:	1884703a 	and	r2,r3,r2
8112bdec:	1001703a 	wrctl	status,r2
  
  return context;
8112bdf0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112bdf4:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
8112bdf8:	d0a08217 	ldw	r2,-32248(gp)
8112bdfc:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
8112be00:	d0a08217 	ldw	r2,-32248(gp)
8112be04:	10000326 	beq	r2,zero,8112be14 <OSQCreate+0x78>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112be08:	d0a08217 	ldw	r2,-32248(gp)
8112be0c:	10800117 	ldw	r2,4(r2)
8112be10:	d0a08215 	stw	r2,-32248(gp)
8112be14:	e0bff717 	ldw	r2,-36(fp)
8112be18:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112be1c:	e0bff817 	ldw	r2,-32(fp)
8112be20:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
8112be24:	e0bff617 	ldw	r2,-40(fp)
8112be28:	10004326 	beq	r2,zero,8112bf38 <OSQCreate+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112be2c:	0005303a 	rdctl	r2,status
8112be30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112be34:	e0fff917 	ldw	r3,-28(fp)
8112be38:	00bfff84 	movi	r2,-2
8112be3c:	1884703a 	and	r2,r3,r2
8112be40:	1001703a 	wrctl	status,r2
  
  return context;
8112be44:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
8112be48:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
8112be4c:	d0a07f17 	ldw	r2,-32260(gp)
8112be50:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
8112be54:	e0bffb17 	ldw	r2,-20(fp)
8112be58:	10002d26 	beq	r2,zero,8112bf10 <OSQCreate+0x174>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
8112be5c:	d0a07f17 	ldw	r2,-32260(gp)
8112be60:	10800017 	ldw	r2,0(r2)
8112be64:	d0a07f15 	stw	r2,-32260(gp)
8112be68:	e0bff717 	ldw	r2,-36(fp)
8112be6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112be70:	e0bffa17 	ldw	r2,-24(fp)
8112be74:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
8112be78:	e0bffb17 	ldw	r2,-20(fp)
8112be7c:	e0fffe17 	ldw	r3,-8(fp)
8112be80:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
8112be84:	e0bfff0b 	ldhu	r2,-4(fp)
8112be88:	1085883a 	add	r2,r2,r2
8112be8c:	1085883a 	add	r2,r2,r2
8112be90:	1007883a 	mov	r3,r2
8112be94:	e0bffe17 	ldw	r2,-8(fp)
8112be98:	10c7883a 	add	r3,r2,r3
8112be9c:	e0bffb17 	ldw	r2,-20(fp)
8112bea0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
8112bea4:	e0bffb17 	ldw	r2,-20(fp)
8112bea8:	e0fffe17 	ldw	r3,-8(fp)
8112beac:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
8112beb0:	e0bffb17 	ldw	r2,-20(fp)
8112beb4:	e0fffe17 	ldw	r3,-8(fp)
8112beb8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
8112bebc:	e0bffb17 	ldw	r2,-20(fp)
8112bec0:	e0ffff0b 	ldhu	r3,-4(fp)
8112bec4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
8112bec8:	e0bffb17 	ldw	r2,-20(fp)
8112becc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
8112bed0:	e0bff617 	ldw	r2,-40(fp)
8112bed4:	00c00084 	movi	r3,2
8112bed8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
8112bedc:	e0bff617 	ldw	r2,-40(fp)
8112bee0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
8112bee4:	e0bff617 	ldw	r2,-40(fp)
8112bee8:	e0fffb17 	ldw	r3,-20(fp)
8112beec:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
8112bef0:	e0bff617 	ldw	r2,-40(fp)
8112bef4:	00c00fc4 	movi	r3,63
8112bef8:	10c00445 	stb	r3,17(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
8112befc:	e0bff617 	ldw	r2,-40(fp)
8112bf00:	10000485 	stb	zero,18(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
8112bf04:	e13ff617 	ldw	r4,-40(fp)
8112bf08:	1127dfc0 	call	81127dfc <OS_EventWaitListInit>
8112bf0c:	00000a06 	br	8112bf38 <OSQCreate+0x19c>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
8112bf10:	d0e08217 	ldw	r3,-32248(gp)
8112bf14:	e0bff617 	ldw	r2,-40(fp)
8112bf18:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
8112bf1c:	e0bff617 	ldw	r2,-40(fp)
8112bf20:	d0a08215 	stw	r2,-32248(gp)
8112bf24:	e0bff717 	ldw	r2,-36(fp)
8112bf28:	e0bffc15 	stw	r2,-16(fp)
8112bf2c:	e0bffc17 	ldw	r2,-16(fp)
8112bf30:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
8112bf34:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
8112bf38:	e0bff617 	ldw	r2,-40(fp)
}
8112bf3c:	e037883a 	mov	sp,fp
8112bf40:	dfc00117 	ldw	ra,4(sp)
8112bf44:	df000017 	ldw	fp,0(sp)
8112bf48:	dec00204 	addi	sp,sp,8
8112bf4c:	f800283a 	ret

8112bf50 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112bf50:	defff204 	addi	sp,sp,-56
8112bf54:	de00012e 	bgeu	sp,et,8112bf5c <OSQDel+0xc>
8112bf58:	003b68fa 	trap	3
8112bf5c:	dfc00d15 	stw	ra,52(sp)
8112bf60:	df000c15 	stw	fp,48(sp)
8112bf64:	df000c04 	addi	fp,sp,48
8112bf68:	e13ffd15 	stw	r4,-12(fp)
8112bf6c:	2805883a 	mov	r2,r5
8112bf70:	e1bfff15 	stw	r6,-4(fp)
8112bf74:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112bf78:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112bf7c:	e0bfff17 	ldw	r2,-4(fp)
8112bf80:	1000021e 	bne	r2,zero,8112bf8c <OSQDel+0x3c>
        return (pevent);
8112bf84:	e0bffd17 	ldw	r2,-12(fp)
8112bf88:	00008e06 	br	8112c1c4 <OSQDel+0x274>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112bf8c:	e0bffd17 	ldw	r2,-12(fp)
8112bf90:	1000051e 	bne	r2,zero,8112bfa8 <OSQDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112bf94:	e0bfff17 	ldw	r2,-4(fp)
8112bf98:	00c00104 	movi	r3,4
8112bf9c:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112bfa0:	e0bffd17 	ldw	r2,-12(fp)
8112bfa4:	00008706 	br	8112c1c4 <OSQDel+0x274>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112bfa8:	e0bffd17 	ldw	r2,-12(fp)
8112bfac:	10800003 	ldbu	r2,0(r2)
8112bfb0:	10803fcc 	andi	r2,r2,255
8112bfb4:	108000a0 	cmpeqi	r2,r2,2
8112bfb8:	1000051e 	bne	r2,zero,8112bfd0 <OSQDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112bfbc:	e0bfff17 	ldw	r2,-4(fp)
8112bfc0:	00c00044 	movi	r3,1
8112bfc4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112bfc8:	e0bffd17 	ldw	r2,-12(fp)
8112bfcc:	00007d06 	br	8112c1c4 <OSQDel+0x274>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112bfd0:	d0a08303 	ldbu	r2,-32244(gp)
8112bfd4:	10803fcc 	andi	r2,r2,255
8112bfd8:	10000526 	beq	r2,zero,8112bff0 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
8112bfdc:	e0bfff17 	ldw	r2,-4(fp)
8112bfe0:	00c003c4 	movi	r3,15
8112bfe4:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112bfe8:	e0bffd17 	ldw	r2,-12(fp)
8112bfec:	00007506 	br	8112c1c4 <OSQDel+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112bff0:	0005303a 	rdctl	r2,status
8112bff4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112bff8:	e0fffc17 	ldw	r3,-16(fp)
8112bffc:	00bfff84 	movi	r2,-2
8112c000:	1884703a 	and	r2,r3,r2
8112c004:	1001703a 	wrctl	status,r2
  
  return context;
8112c008:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c00c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
8112c010:	e0bffd17 	ldw	r2,-12(fp)
8112c014:	10800283 	ldbu	r2,10(r2)
8112c018:	10803fcc 	andi	r2,r2,255
8112c01c:	10000326 	beq	r2,zero,8112c02c <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112c020:	00800044 	movi	r2,1
8112c024:	e0bff405 	stb	r2,-48(fp)
8112c028:	00000106 	br	8112c030 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112c02c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
8112c030:	e0bffe03 	ldbu	r2,-8(fp)
8112c034:	10000326 	beq	r2,zero,8112c044 <OSQDel+0xf4>
8112c038:	10800060 	cmpeqi	r2,r2,1
8112c03c:	1000301e 	bne	r2,zero,8112c100 <OSQDel+0x1b0>
8112c040:	00005506 	br	8112c198 <OSQDel+0x248>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
8112c044:	e0bff403 	ldbu	r2,-48(fp)
8112c048:	10001e1e 	bne	r2,zero,8112c0c4 <OSQDel+0x174>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112c04c:	e0bffd17 	ldw	r2,-12(fp)
8112c050:	00c00fc4 	movi	r3,63
8112c054:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112c058:	e0bffd17 	ldw	r2,-12(fp)
8112c05c:	10000485 	stb	zero,18(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
8112c060:	e0bffd17 	ldw	r2,-12(fp)
8112c064:	10800117 	ldw	r2,4(r2)
8112c068:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
8112c06c:	d0e07f17 	ldw	r3,-32260(gp)
8112c070:	e0bff817 	ldw	r2,-32(fp)
8112c074:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
8112c078:	e0bff817 	ldw	r2,-32(fp)
8112c07c:	d0a07f15 	stw	r2,-32260(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112c080:	e0bffd17 	ldw	r2,-12(fp)
8112c084:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112c088:	d0e08217 	ldw	r3,-32248(gp)
8112c08c:	e0bffd17 	ldw	r2,-12(fp)
8112c090:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112c094:	e0bffd17 	ldw	r2,-12(fp)
8112c098:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112c09c:	e0bffd17 	ldw	r2,-12(fp)
8112c0a0:	d0a08215 	stw	r2,-32248(gp)
8112c0a4:	e0bff617 	ldw	r2,-40(fp)
8112c0a8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c0ac:	e0bff717 	ldw	r2,-36(fp)
8112c0b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112c0b4:	e0bfff17 	ldw	r2,-4(fp)
8112c0b8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
8112c0bc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112c0c0:	00003f06 	br	8112c1c0 <OSQDel+0x270>
8112c0c4:	e0bff617 	ldw	r2,-40(fp)
8112c0c8:	e0bff915 	stw	r2,-28(fp)
8112c0cc:	e0bff917 	ldw	r2,-28(fp)
8112c0d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112c0d4:	e0bfff17 	ldw	r2,-4(fp)
8112c0d8:	00c01244 	movi	r3,73
8112c0dc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112c0e0:	e0bffd17 	ldw	r2,-12(fp)
8112c0e4:	e0bff515 	stw	r2,-44(fp)
             }
             break;
8112c0e8:	00003506 	br	8112c1c0 <OSQDel+0x270>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
8112c0ec:	000f883a 	mov	r7,zero
8112c0f0:	01800104 	movi	r6,4
8112c0f4:	000b883a 	mov	r5,zero
8112c0f8:	e13ffd17 	ldw	r4,-12(fp)
8112c0fc:	11278240 	call	81127824 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
8112c100:	e0bffd17 	ldw	r2,-12(fp)
8112c104:	10800283 	ldbu	r2,10(r2)
8112c108:	10803fcc 	andi	r2,r2,255
8112c10c:	103ff71e 	bne	r2,zero,8112c0ec <__reset+0xfb10c0ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112c110:	e0bffd17 	ldw	r2,-12(fp)
8112c114:	00c00fc4 	movi	r3,63
8112c118:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112c11c:	e0bffd17 	ldw	r2,-12(fp)
8112c120:	10000485 	stb	zero,18(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
8112c124:	e0bffd17 	ldw	r2,-12(fp)
8112c128:	10800117 	ldw	r2,4(r2)
8112c12c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
8112c130:	d0e07f17 	ldw	r3,-32260(gp)
8112c134:	e0bff817 	ldw	r2,-32(fp)
8112c138:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
8112c13c:	e0bff817 	ldw	r2,-32(fp)
8112c140:	d0a07f15 	stw	r2,-32260(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112c144:	e0bffd17 	ldw	r2,-12(fp)
8112c148:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112c14c:	d0e08217 	ldw	r3,-32248(gp)
8112c150:	e0bffd17 	ldw	r2,-12(fp)
8112c154:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112c158:	e0bffd17 	ldw	r2,-12(fp)
8112c15c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112c160:	e0bffd17 	ldw	r2,-12(fp)
8112c164:	d0a08215 	stw	r2,-32248(gp)
8112c168:	e0bff617 	ldw	r2,-40(fp)
8112c16c:	e0bffa15 	stw	r2,-24(fp)
8112c170:	e0bffa17 	ldw	r2,-24(fp)
8112c174:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112c178:	e0bff403 	ldbu	r2,-48(fp)
8112c17c:	10800058 	cmpnei	r2,r2,1
8112c180:	1000011e 	bne	r2,zero,8112c188 <OSQDel+0x238>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112c184:	11282e00 	call	811282e0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112c188:	e0bfff17 	ldw	r2,-4(fp)
8112c18c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
8112c190:	e03ff515 	stw	zero,-44(fp)
             break;
8112c194:	00000a06 	br	8112c1c0 <OSQDel+0x270>
8112c198:	e0bff617 	ldw	r2,-40(fp)
8112c19c:	e0bffb15 	stw	r2,-20(fp)
8112c1a0:	e0bffb17 	ldw	r2,-20(fp)
8112c1a4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112c1a8:	e0bfff17 	ldw	r2,-4(fp)
8112c1ac:	00c001c4 	movi	r3,7
8112c1b0:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112c1b4:	e0bffd17 	ldw	r2,-12(fp)
8112c1b8:	e0bff515 	stw	r2,-44(fp)
             break;
8112c1bc:	0001883a 	nop
    }
    return (pevent_return);
8112c1c0:	e0bff517 	ldw	r2,-44(fp)
}
8112c1c4:	e037883a 	mov	sp,fp
8112c1c8:	dfc00117 	ldw	ra,4(sp)
8112c1cc:	df000017 	ldw	fp,0(sp)
8112c1d0:	dec00204 	addi	sp,sp,8
8112c1d4:	f800283a 	ret

8112c1d8 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
8112c1d8:	defffa04 	addi	sp,sp,-24
8112c1dc:	de00012e 	bgeu	sp,et,8112c1e4 <OSQFlush+0xc>
8112c1e0:	003b68fa 	trap	3
8112c1e4:	df000515 	stw	fp,20(sp)
8112c1e8:	df000504 	addi	fp,sp,20
8112c1ec:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112c1f0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112c1f4:	e0bfff17 	ldw	r2,-4(fp)
8112c1f8:	1000021e 	bne	r2,zero,8112c204 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
8112c1fc:	00800104 	movi	r2,4
8112c200:	00002106 	br	8112c288 <OSQFlush+0xb0>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112c204:	e0bfff17 	ldw	r2,-4(fp)
8112c208:	10800003 	ldbu	r2,0(r2)
8112c20c:	10803fcc 	andi	r2,r2,255
8112c210:	108000a0 	cmpeqi	r2,r2,2
8112c214:	1000021e 	bne	r2,zero,8112c220 <OSQFlush+0x48>
        return (OS_ERR_EVENT_TYPE);
8112c218:	00800044 	movi	r2,1
8112c21c:	00001a06 	br	8112c288 <OSQFlush+0xb0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c220:	0005303a 	rdctl	r2,status
8112c224:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c228:	e0fffd17 	ldw	r3,-12(fp)
8112c22c:	00bfff84 	movi	r2,-2
8112c230:	1884703a 	and	r2,r3,r2
8112c234:	1001703a 	wrctl	status,r2
  
  return context;
8112c238:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112c23c:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
8112c240:	e0bfff17 	ldw	r2,-4(fp)
8112c244:	10800117 	ldw	r2,4(r2)
8112c248:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
8112c24c:	e0bffc17 	ldw	r2,-16(fp)
8112c250:	10c00117 	ldw	r3,4(r2)
8112c254:	e0bffc17 	ldw	r2,-16(fp)
8112c258:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
8112c25c:	e0bffc17 	ldw	r2,-16(fp)
8112c260:	10c00117 	ldw	r3,4(r2)
8112c264:	e0bffc17 	ldw	r2,-16(fp)
8112c268:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
8112c26c:	e0bffc17 	ldw	r2,-16(fp)
8112c270:	1000058d 	sth	zero,22(r2)
8112c274:	e0bffb17 	ldw	r2,-20(fp)
8112c278:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c27c:	e0bffe17 	ldw	r2,-8(fp)
8112c280:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112c284:	0005883a 	mov	r2,zero
}
8112c288:	e037883a 	mov	sp,fp
8112c28c:	df000017 	ldw	fp,0(sp)
8112c290:	dec00104 	addi	sp,sp,4
8112c294:	f800283a 	ret

8112c298 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112c298:	defff304 	addi	sp,sp,-52
8112c29c:	de00012e 	bgeu	sp,et,8112c2a4 <OSQPend+0xc>
8112c2a0:	003b68fa 	trap	3
8112c2a4:	dfc00c15 	stw	ra,48(sp)
8112c2a8:	df000b15 	stw	fp,44(sp)
8112c2ac:	df000b04 	addi	fp,sp,44
8112c2b0:	e13ffd15 	stw	r4,-12(fp)
8112c2b4:	2805883a 	mov	r2,r5
8112c2b8:	e1bfff15 	stw	r6,-4(fp)
8112c2bc:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112c2c0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
8112c2c4:	e0bfff17 	ldw	r2,-4(fp)
8112c2c8:	1000021e 	bne	r2,zero,8112c2d4 <OSQPend+0x3c>
        return ((void *)0);
8112c2cc:	0005883a 	mov	r2,zero
8112c2d0:	00009106 	br	8112c518 <OSQPend+0x280>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
8112c2d4:	e0bffd17 	ldw	r2,-12(fp)
8112c2d8:	1000051e 	bne	r2,zero,8112c2f0 <OSQPend+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112c2dc:	e0bfff17 	ldw	r2,-4(fp)
8112c2e0:	00c00104 	movi	r3,4
8112c2e4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112c2e8:	0005883a 	mov	r2,zero
8112c2ec:	00008a06 	br	8112c518 <OSQPend+0x280>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
8112c2f0:	e0bffd17 	ldw	r2,-12(fp)
8112c2f4:	10800003 	ldbu	r2,0(r2)
8112c2f8:	10803fcc 	andi	r2,r2,255
8112c2fc:	108000a0 	cmpeqi	r2,r2,2
8112c300:	1000051e 	bne	r2,zero,8112c318 <OSQPend+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112c304:	e0bfff17 	ldw	r2,-4(fp)
8112c308:	00c00044 	movi	r3,1
8112c30c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112c310:	0005883a 	mov	r2,zero
8112c314:	00008006 	br	8112c518 <OSQPend+0x280>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
8112c318:	d0a08303 	ldbu	r2,-32244(gp)
8112c31c:	10803fcc 	andi	r2,r2,255
8112c320:	10000526 	beq	r2,zero,8112c338 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
8112c324:	e0bfff17 	ldw	r2,-4(fp)
8112c328:	00c00084 	movi	r3,2
8112c32c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112c330:	0005883a 	mov	r2,zero
8112c334:	00007806 	br	8112c518 <OSQPend+0x280>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
8112c338:	d0a07103 	ldbu	r2,-32316(gp)
8112c33c:	10803fcc 	andi	r2,r2,255
8112c340:	10000526 	beq	r2,zero,8112c358 <OSQPend+0xc0>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
8112c344:	e0bfff17 	ldw	r2,-4(fp)
8112c348:	00c00344 	movi	r3,13
8112c34c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
8112c350:	0005883a 	mov	r2,zero
8112c354:	00007006 	br	8112c518 <OSQPend+0x280>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c358:	0005303a 	rdctl	r2,status
8112c35c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c360:	e0fffc17 	ldw	r3,-16(fp)
8112c364:	00bfff84 	movi	r2,-2
8112c368:	1884703a 	and	r2,r3,r2
8112c36c:	1001703a 	wrctl	status,r2
  
  return context;
8112c370:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c374:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
8112c378:	e0bffd17 	ldw	r2,-12(fp)
8112c37c:	10800117 	ldw	r2,4(r2)
8112c380:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
8112c384:	e0bff817 	ldw	r2,-32(fp)
8112c388:	1080058b 	ldhu	r2,22(r2)
8112c38c:	10bfffcc 	andi	r2,r2,65535
8112c390:	10001e26 	beq	r2,zero,8112c40c <OSQPend+0x174>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
8112c394:	e0bff817 	ldw	r2,-32(fp)
8112c398:	10800417 	ldw	r2,16(r2)
8112c39c:	11000104 	addi	r4,r2,4
8112c3a0:	e0fff817 	ldw	r3,-32(fp)
8112c3a4:	19000415 	stw	r4,16(r3)
8112c3a8:	10800017 	ldw	r2,0(r2)
8112c3ac:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
8112c3b0:	e0bff817 	ldw	r2,-32(fp)
8112c3b4:	1080058b 	ldhu	r2,22(r2)
8112c3b8:	10bfffc4 	addi	r2,r2,-1
8112c3bc:	1007883a 	mov	r3,r2
8112c3c0:	e0bff817 	ldw	r2,-32(fp)
8112c3c4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
8112c3c8:	e0bff817 	ldw	r2,-32(fp)
8112c3cc:	10c00417 	ldw	r3,16(r2)
8112c3d0:	e0bff817 	ldw	r2,-32(fp)
8112c3d4:	10800217 	ldw	r2,8(r2)
8112c3d8:	1880041e 	bne	r3,r2,8112c3ec <OSQPend+0x154>
            pq->OSQOut = pq->OSQStart;
8112c3dc:	e0bff817 	ldw	r2,-32(fp)
8112c3e0:	10c00117 	ldw	r3,4(r2)
8112c3e4:	e0bff817 	ldw	r2,-32(fp)
8112c3e8:	10c00415 	stw	r3,16(r2)
8112c3ec:	e0bff617 	ldw	r2,-40(fp)
8112c3f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c3f4:	e0bff717 	ldw	r2,-36(fp)
8112c3f8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112c3fc:	e0bfff17 	ldw	r2,-4(fp)
8112c400:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
8112c404:	e0bff517 	ldw	r2,-44(fp)
8112c408:	00004306 	br	8112c518 <OSQPend+0x280>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
8112c40c:	d0a08417 	ldw	r2,-32240(gp)
8112c410:	d0e08417 	ldw	r3,-32240(gp)
8112c414:	18c00c03 	ldbu	r3,48(r3)
8112c418:	18c00114 	ori	r3,r3,4
8112c41c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112c420:	d0a08417 	ldw	r2,-32240(gp)
8112c424:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
8112c428:	d0a08417 	ldw	r2,-32240(gp)
8112c42c:	e0fffe0b 	ldhu	r3,-8(fp)
8112c430:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
8112c434:	e13ffd17 	ldw	r4,-12(fp)
8112c438:	11279c40 	call	811279c4 <OS_EventTaskWait>
8112c43c:	e0bff617 	ldw	r2,-40(fp)
8112c440:	e0bffb15 	stw	r2,-20(fp)
8112c444:	e0bffb17 	ldw	r2,-20(fp)
8112c448:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
8112c44c:	11282e00 	call	811282e0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c450:	0005303a 	rdctl	r2,status
8112c454:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c458:	e0fff917 	ldw	r3,-28(fp)
8112c45c:	00bfff84 	movi	r2,-2
8112c460:	1884703a 	and	r2,r3,r2
8112c464:	1001703a 	wrctl	status,r2
  
  return context;
8112c468:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112c46c:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112c470:	d0a08417 	ldw	r2,-32240(gp)
8112c474:	10800c43 	ldbu	r2,49(r2)
8112c478:	10803fcc 	andi	r2,r2,255
8112c47c:	10000326 	beq	r2,zero,8112c48c <OSQPend+0x1f4>
8112c480:	108000a0 	cmpeqi	r2,r2,2
8112c484:	1000071e 	bne	r2,zero,8112c4a4 <OSQPend+0x20c>
8112c488:	00000b06 	br	8112c4b8 <OSQPend+0x220>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
8112c48c:	d0a08417 	ldw	r2,-32240(gp)
8112c490:	10800917 	ldw	r2,36(r2)
8112c494:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
8112c498:	e0bfff17 	ldw	r2,-4(fp)
8112c49c:	10000005 	stb	zero,0(r2)
             break;
8112c4a0:	00000e06 	br	8112c4dc <OSQPend+0x244>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
8112c4a4:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112c4a8:	e0bfff17 	ldw	r2,-4(fp)
8112c4ac:	00c00384 	movi	r3,14
8112c4b0:	10c00005 	stb	r3,0(r2)
             break;
8112c4b4:	00000906 	br	8112c4dc <OSQPend+0x244>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
8112c4b8:	d0a08417 	ldw	r2,-32240(gp)
8112c4bc:	e17ffd17 	ldw	r5,-12(fp)
8112c4c0:	1009883a 	mov	r4,r2
8112c4c4:	1127c340 	call	81127c34 <OS_EventTaskRemove>
             pmsg = (void *)0;
8112c4c8:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112c4cc:	e0bfff17 	ldw	r2,-4(fp)
8112c4d0:	00c00284 	movi	r3,10
8112c4d4:	10c00005 	stb	r3,0(r2)
             break;
8112c4d8:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112c4dc:	d0a08417 	ldw	r2,-32240(gp)
8112c4e0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112c4e4:	d0a08417 	ldw	r2,-32240(gp)
8112c4e8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112c4ec:	d0a08417 	ldw	r2,-32240(gp)
8112c4f0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112c4f4:	d0a08417 	ldw	r2,-32240(gp)
8112c4f8:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
8112c4fc:	d0a08417 	ldw	r2,-32240(gp)
8112c500:	10000915 	stw	zero,36(r2)
8112c504:	e0bff617 	ldw	r2,-40(fp)
8112c508:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c50c:	e0bffa17 	ldw	r2,-24(fp)
8112c510:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
8112c514:	e0bff517 	ldw	r2,-44(fp)
}
8112c518:	e037883a 	mov	sp,fp
8112c51c:	dfc00117 	ldw	ra,4(sp)
8112c520:	df000017 	ldw	fp,0(sp)
8112c524:	dec00204 	addi	sp,sp,8
8112c528:	f800283a 	ret

8112c52c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112c52c:	defff604 	addi	sp,sp,-40
8112c530:	de00012e 	bgeu	sp,et,8112c538 <OSQPendAbort+0xc>
8112c534:	003b68fa 	trap	3
8112c538:	dfc00915 	stw	ra,36(sp)
8112c53c:	df000815 	stw	fp,32(sp)
8112c540:	df000804 	addi	fp,sp,32
8112c544:	e13ffd15 	stw	r4,-12(fp)
8112c548:	2805883a 	mov	r2,r5
8112c54c:	e1bfff15 	stw	r6,-4(fp)
8112c550:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112c554:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112c558:	e0bfff17 	ldw	r2,-4(fp)
8112c55c:	1000021e 	bne	r2,zero,8112c568 <OSQPendAbort+0x3c>
        return (0);
8112c560:	0005883a 	mov	r2,zero
8112c564:	00004906 	br	8112c68c <OSQPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112c568:	e0bffd17 	ldw	r2,-12(fp)
8112c56c:	1000051e 	bne	r2,zero,8112c584 <OSQPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112c570:	e0bfff17 	ldw	r2,-4(fp)
8112c574:	00c00104 	movi	r3,4
8112c578:	10c00005 	stb	r3,0(r2)
        return (0);
8112c57c:	0005883a 	mov	r2,zero
8112c580:	00004206 	br	8112c68c <OSQPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
8112c584:	e0bffd17 	ldw	r2,-12(fp)
8112c588:	10800003 	ldbu	r2,0(r2)
8112c58c:	10803fcc 	andi	r2,r2,255
8112c590:	108000a0 	cmpeqi	r2,r2,2
8112c594:	1000051e 	bne	r2,zero,8112c5ac <OSQPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112c598:	e0bfff17 	ldw	r2,-4(fp)
8112c59c:	00c00044 	movi	r3,1
8112c5a0:	10c00005 	stb	r3,0(r2)
        return (0);
8112c5a4:	0005883a 	mov	r2,zero
8112c5a8:	00003806 	br	8112c68c <OSQPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c5ac:	0005303a 	rdctl	r2,status
8112c5b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c5b4:	e0fffc17 	ldw	r3,-16(fp)
8112c5b8:	00bfff84 	movi	r2,-2
8112c5bc:	1884703a 	and	r2,r3,r2
8112c5c0:	1001703a 	wrctl	status,r2
  
  return context;
8112c5c4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c5c8:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
8112c5cc:	e0bffd17 	ldw	r2,-12(fp)
8112c5d0:	10800283 	ldbu	r2,10(r2)
8112c5d4:	10803fcc 	andi	r2,r2,255
8112c5d8:	10002526 	beq	r2,zero,8112c670 <OSQPendAbort+0x144>
        nbr_tasks = 0;
8112c5dc:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112c5e0:	e0bffe03 	ldbu	r2,-8(fp)
8112c5e4:	10800060 	cmpeqi	r2,r2,1
8112c5e8:	10000e26 	beq	r2,zero,8112c624 <OSQPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112c5ec:	00000806 	br	8112c610 <OSQPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112c5f0:	01c00084 	movi	r7,2
8112c5f4:	01800104 	movi	r6,4
8112c5f8:	000b883a 	mov	r5,zero
8112c5fc:	e13ffd17 	ldw	r4,-12(fp)
8112c600:	11278240 	call	81127824 <OS_EventTaskRdy>
                     nbr_tasks++;
8112c604:	e0bff803 	ldbu	r2,-32(fp)
8112c608:	10800044 	addi	r2,r2,1
8112c60c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
8112c610:	e0bffd17 	ldw	r2,-12(fp)
8112c614:	10800283 	ldbu	r2,10(r2)
8112c618:	10803fcc 	andi	r2,r2,255
8112c61c:	103ff41e 	bne	r2,zero,8112c5f0 <__reset+0xfb10c5f0>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112c620:	00000906 	br	8112c648 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
8112c624:	01c00084 	movi	r7,2
8112c628:	01800104 	movi	r6,4
8112c62c:	000b883a 	mov	r5,zero
8112c630:	e13ffd17 	ldw	r4,-12(fp)
8112c634:	11278240 	call	81127824 <OS_EventTaskRdy>
                 nbr_tasks++;
8112c638:	e0bff803 	ldbu	r2,-32(fp)
8112c63c:	10800044 	addi	r2,r2,1
8112c640:	e0bff805 	stb	r2,-32(fp)
                 break;
8112c644:	0001883a 	nop
8112c648:	e0bff917 	ldw	r2,-28(fp)
8112c64c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c650:	e0bffa17 	ldw	r2,-24(fp)
8112c654:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
8112c658:	11282e00 	call	811282e0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112c65c:	e0bfff17 	ldw	r2,-4(fp)
8112c660:	00c00384 	movi	r3,14
8112c664:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112c668:	e0bff803 	ldbu	r2,-32(fp)
8112c66c:	00000706 	br	8112c68c <OSQPendAbort+0x160>
8112c670:	e0bff917 	ldw	r2,-28(fp)
8112c674:	e0bffb15 	stw	r2,-20(fp)
8112c678:	e0bffb17 	ldw	r2,-20(fp)
8112c67c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112c680:	e0bfff17 	ldw	r2,-4(fp)
8112c684:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
8112c688:	0005883a 	mov	r2,zero
}
8112c68c:	e037883a 	mov	sp,fp
8112c690:	dfc00117 	ldw	ra,4(sp)
8112c694:	df000017 	ldw	fp,0(sp)
8112c698:	dec00204 	addi	sp,sp,8
8112c69c:	f800283a 	ret

8112c6a0 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
8112c6a0:	defff604 	addi	sp,sp,-40
8112c6a4:	de00012e 	bgeu	sp,et,8112c6ac <OSQPost+0xc>
8112c6a8:	003b68fa 	trap	3
8112c6ac:	dfc00915 	stw	ra,36(sp)
8112c6b0:	df000815 	stw	fp,32(sp)
8112c6b4:	df000804 	addi	fp,sp,32
8112c6b8:	e13ffe15 	stw	r4,-8(fp)
8112c6bc:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112c6c0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112c6c4:	e0bffe17 	ldw	r2,-8(fp)
8112c6c8:	1000021e 	bne	r2,zero,8112c6d4 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
8112c6cc:	00800104 	movi	r2,4
8112c6d0:	00004a06 	br	8112c7fc <OSQPost+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112c6d4:	e0bffe17 	ldw	r2,-8(fp)
8112c6d8:	10800003 	ldbu	r2,0(r2)
8112c6dc:	10803fcc 	andi	r2,r2,255
8112c6e0:	108000a0 	cmpeqi	r2,r2,2
8112c6e4:	1000021e 	bne	r2,zero,8112c6f0 <OSQPost+0x50>
        return (OS_ERR_EVENT_TYPE);
8112c6e8:	00800044 	movi	r2,1
8112c6ec:	00004306 	br	8112c7fc <OSQPost+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c6f0:	0005303a 	rdctl	r2,status
8112c6f4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c6f8:	e0fffd17 	ldw	r3,-12(fp)
8112c6fc:	00bfff84 	movi	r2,-2
8112c700:	1884703a 	and	r2,r3,r2
8112c704:	1001703a 	wrctl	status,r2
  
  return context;
8112c708:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112c70c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
8112c710:	e0bffe17 	ldw	r2,-8(fp)
8112c714:	10800283 	ldbu	r2,10(r2)
8112c718:	10803fcc 	andi	r2,r2,255
8112c71c:	10000c26 	beq	r2,zero,8112c750 <OSQPost+0xb0>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112c720:	000f883a 	mov	r7,zero
8112c724:	01800104 	movi	r6,4
8112c728:	e17fff17 	ldw	r5,-4(fp)
8112c72c:	e13ffe17 	ldw	r4,-8(fp)
8112c730:	11278240 	call	81127824 <OS_EventTaskRdy>
8112c734:	e0bff817 	ldw	r2,-32(fp)
8112c738:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c73c:	e0bff917 	ldw	r2,-28(fp)
8112c740:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
8112c744:	11282e00 	call	811282e0 <OS_Sched>
        return (OS_ERR_NONE);
8112c748:	0005883a 	mov	r2,zero
8112c74c:	00002b06 	br	8112c7fc <OSQPost+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
8112c750:	e0bffe17 	ldw	r2,-8(fp)
8112c754:	10800117 	ldw	r2,4(r2)
8112c758:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
8112c75c:	e0bffb17 	ldw	r2,-20(fp)
8112c760:	10c0058b 	ldhu	r3,22(r2)
8112c764:	e0bffb17 	ldw	r2,-20(fp)
8112c768:	1080050b 	ldhu	r2,20(r2)
8112c76c:	18ffffcc 	andi	r3,r3,65535
8112c770:	10bfffcc 	andi	r2,r2,65535
8112c774:	18800636 	bltu	r3,r2,8112c790 <OSQPost+0xf0>
8112c778:	e0bff817 	ldw	r2,-32(fp)
8112c77c:	e0bffa15 	stw	r2,-24(fp)
8112c780:	e0bffa17 	ldw	r2,-24(fp)
8112c784:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112c788:	00800784 	movi	r2,30
8112c78c:	00001b06 	br	8112c7fc <OSQPost+0x15c>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
8112c790:	e0bffb17 	ldw	r2,-20(fp)
8112c794:	10800317 	ldw	r2,12(r2)
8112c798:	11000104 	addi	r4,r2,4
8112c79c:	e0fffb17 	ldw	r3,-20(fp)
8112c7a0:	19000315 	stw	r4,12(r3)
8112c7a4:	e0ffff17 	ldw	r3,-4(fp)
8112c7a8:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
8112c7ac:	e0bffb17 	ldw	r2,-20(fp)
8112c7b0:	1080058b 	ldhu	r2,22(r2)
8112c7b4:	10800044 	addi	r2,r2,1
8112c7b8:	1007883a 	mov	r3,r2
8112c7bc:	e0bffb17 	ldw	r2,-20(fp)
8112c7c0:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
8112c7c4:	e0bffb17 	ldw	r2,-20(fp)
8112c7c8:	10c00317 	ldw	r3,12(r2)
8112c7cc:	e0bffb17 	ldw	r2,-20(fp)
8112c7d0:	10800217 	ldw	r2,8(r2)
8112c7d4:	1880041e 	bne	r3,r2,8112c7e8 <OSQPost+0x148>
        pq->OSQIn = pq->OSQStart;
8112c7d8:	e0bffb17 	ldw	r2,-20(fp)
8112c7dc:	10c00117 	ldw	r3,4(r2)
8112c7e0:	e0bffb17 	ldw	r2,-20(fp)
8112c7e4:	10c00315 	stw	r3,12(r2)
8112c7e8:	e0bff817 	ldw	r2,-32(fp)
8112c7ec:	e0bffc15 	stw	r2,-16(fp)
8112c7f0:	e0bffc17 	ldw	r2,-16(fp)
8112c7f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112c7f8:	0005883a 	mov	r2,zero
}
8112c7fc:	e037883a 	mov	sp,fp
8112c800:	dfc00117 	ldw	ra,4(sp)
8112c804:	df000017 	ldw	fp,0(sp)
8112c808:	dec00204 	addi	sp,sp,8
8112c80c:	f800283a 	ret

8112c810 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
8112c810:	defff604 	addi	sp,sp,-40
8112c814:	de00012e 	bgeu	sp,et,8112c81c <OSQPostFront+0xc>
8112c818:	003b68fa 	trap	3
8112c81c:	dfc00915 	stw	ra,36(sp)
8112c820:	df000815 	stw	fp,32(sp)
8112c824:	df000804 	addi	fp,sp,32
8112c828:	e13ffe15 	stw	r4,-8(fp)
8112c82c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112c830:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112c834:	e0bffe17 	ldw	r2,-8(fp)
8112c838:	1000021e 	bne	r2,zero,8112c844 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
8112c83c:	00800104 	movi	r2,4
8112c840:	00004c06 	br	8112c974 <OSQPostFront+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112c844:	e0bffe17 	ldw	r2,-8(fp)
8112c848:	10800003 	ldbu	r2,0(r2)
8112c84c:	10803fcc 	andi	r2,r2,255
8112c850:	108000a0 	cmpeqi	r2,r2,2
8112c854:	1000021e 	bne	r2,zero,8112c860 <OSQPostFront+0x50>
        return (OS_ERR_EVENT_TYPE);
8112c858:	00800044 	movi	r2,1
8112c85c:	00004506 	br	8112c974 <OSQPostFront+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c860:	0005303a 	rdctl	r2,status
8112c864:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c868:	e0fffd17 	ldw	r3,-12(fp)
8112c86c:	00bfff84 	movi	r2,-2
8112c870:	1884703a 	and	r2,r3,r2
8112c874:	1001703a 	wrctl	status,r2
  
  return context;
8112c878:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112c87c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
8112c880:	e0bffe17 	ldw	r2,-8(fp)
8112c884:	10800283 	ldbu	r2,10(r2)
8112c888:	10803fcc 	andi	r2,r2,255
8112c88c:	10000c26 	beq	r2,zero,8112c8c0 <OSQPostFront+0xb0>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112c890:	000f883a 	mov	r7,zero
8112c894:	01800104 	movi	r6,4
8112c898:	e17fff17 	ldw	r5,-4(fp)
8112c89c:	e13ffe17 	ldw	r4,-8(fp)
8112c8a0:	11278240 	call	81127824 <OS_EventTaskRdy>
8112c8a4:	e0bff817 	ldw	r2,-32(fp)
8112c8a8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112c8ac:	e0bff917 	ldw	r2,-28(fp)
8112c8b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
8112c8b4:	11282e00 	call	811282e0 <OS_Sched>
        return (OS_ERR_NONE);
8112c8b8:	0005883a 	mov	r2,zero
8112c8bc:	00002d06 	br	8112c974 <OSQPostFront+0x164>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112c8c0:	e0bffe17 	ldw	r2,-8(fp)
8112c8c4:	10800117 	ldw	r2,4(r2)
8112c8c8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112c8cc:	e0bffb17 	ldw	r2,-20(fp)
8112c8d0:	10c0058b 	ldhu	r3,22(r2)
8112c8d4:	e0bffb17 	ldw	r2,-20(fp)
8112c8d8:	1080050b 	ldhu	r2,20(r2)
8112c8dc:	18ffffcc 	andi	r3,r3,65535
8112c8e0:	10bfffcc 	andi	r2,r2,65535
8112c8e4:	18800636 	bltu	r3,r2,8112c900 <OSQPostFront+0xf0>
8112c8e8:	e0bff817 	ldw	r2,-32(fp)
8112c8ec:	e0bffa15 	stw	r2,-24(fp)
8112c8f0:	e0bffa17 	ldw	r2,-24(fp)
8112c8f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112c8f8:	00800784 	movi	r2,30
8112c8fc:	00001d06 	br	8112c974 <OSQPostFront+0x164>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
8112c900:	e0bffb17 	ldw	r2,-20(fp)
8112c904:	10c00417 	ldw	r3,16(r2)
8112c908:	e0bffb17 	ldw	r2,-20(fp)
8112c90c:	10800117 	ldw	r2,4(r2)
8112c910:	1880041e 	bne	r3,r2,8112c924 <OSQPostFront+0x114>
        pq->OSQOut = pq->OSQEnd;
8112c914:	e0bffb17 	ldw	r2,-20(fp)
8112c918:	10c00217 	ldw	r3,8(r2)
8112c91c:	e0bffb17 	ldw	r2,-20(fp)
8112c920:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
8112c924:	e0bffb17 	ldw	r2,-20(fp)
8112c928:	10800417 	ldw	r2,16(r2)
8112c92c:	10ffff04 	addi	r3,r2,-4
8112c930:	e0bffb17 	ldw	r2,-20(fp)
8112c934:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
8112c938:	e0bffb17 	ldw	r2,-20(fp)
8112c93c:	10800417 	ldw	r2,16(r2)
8112c940:	e0ffff17 	ldw	r3,-4(fp)
8112c944:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112c948:	e0bffb17 	ldw	r2,-20(fp)
8112c94c:	1080058b 	ldhu	r2,22(r2)
8112c950:	10800044 	addi	r2,r2,1
8112c954:	1007883a 	mov	r3,r2
8112c958:	e0bffb17 	ldw	r2,-20(fp)
8112c95c:	10c0058d 	sth	r3,22(r2)
8112c960:	e0bff817 	ldw	r2,-32(fp)
8112c964:	e0bffc15 	stw	r2,-16(fp)
8112c968:	e0bffc17 	ldw	r2,-16(fp)
8112c96c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112c970:	0005883a 	mov	r2,zero
}
8112c974:	e037883a 	mov	sp,fp
8112c978:	dfc00117 	ldw	ra,4(sp)
8112c97c:	df000017 	ldw	fp,0(sp)
8112c980:	dec00204 	addi	sp,sp,8
8112c984:	f800283a 	ret

8112c988 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
8112c988:	defff504 	addi	sp,sp,-44
8112c98c:	de00012e 	bgeu	sp,et,8112c994 <OSQPostOpt+0xc>
8112c990:	003b68fa 	trap	3
8112c994:	dfc00a15 	stw	ra,40(sp)
8112c998:	df000915 	stw	fp,36(sp)
8112c99c:	df000904 	addi	fp,sp,36
8112c9a0:	e13ffd15 	stw	r4,-12(fp)
8112c9a4:	e17ffe15 	stw	r5,-8(fp)
8112c9a8:	3005883a 	mov	r2,r6
8112c9ac:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112c9b0:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112c9b4:	e0bffd17 	ldw	r2,-12(fp)
8112c9b8:	1000021e 	bne	r2,zero,8112c9c4 <OSQPostOpt+0x3c>
        return (OS_ERR_PEVENT_NULL);
8112c9bc:	00800104 	movi	r2,4
8112c9c0:	00007106 	br	8112cb88 <OSQPostOpt+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
8112c9c4:	e0bffd17 	ldw	r2,-12(fp)
8112c9c8:	10800003 	ldbu	r2,0(r2)
8112c9cc:	10803fcc 	andi	r2,r2,255
8112c9d0:	108000a0 	cmpeqi	r2,r2,2
8112c9d4:	1000021e 	bne	r2,zero,8112c9e0 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
8112c9d8:	00800044 	movi	r2,1
8112c9dc:	00006a06 	br	8112cb88 <OSQPostOpt+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112c9e0:	0005303a 	rdctl	r2,status
8112c9e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112c9e8:	e0fffc17 	ldw	r3,-16(fp)
8112c9ec:	00bfff84 	movi	r2,-2
8112c9f0:	1884703a 	and	r2,r3,r2
8112c9f4:	1001703a 	wrctl	status,r2
  
  return context;
8112c9f8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112c9fc:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
8112ca00:	e0bffd17 	ldw	r2,-12(fp)
8112ca04:	10800283 	ldbu	r2,10(r2)
8112ca08:	10803fcc 	andi	r2,r2,255
8112ca0c:	10001d26 	beq	r2,zero,8112ca84 <OSQPostOpt+0xfc>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
8112ca10:	e0bfff03 	ldbu	r2,-4(fp)
8112ca14:	1080004c 	andi	r2,r2,1
8112ca18:	10000b26 	beq	r2,zero,8112ca48 <OSQPostOpt+0xc0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112ca1c:	00000506 	br	8112ca34 <OSQPostOpt+0xac>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112ca20:	000f883a 	mov	r7,zero
8112ca24:	01800104 	movi	r6,4
8112ca28:	e17ffe17 	ldw	r5,-8(fp)
8112ca2c:	e13ffd17 	ldw	r4,-12(fp)
8112ca30:	11278240 	call	81127824 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
8112ca34:	e0bffd17 	ldw	r2,-12(fp)
8112ca38:	10800283 	ldbu	r2,10(r2)
8112ca3c:	10803fcc 	andi	r2,r2,255
8112ca40:	103ff71e 	bne	r2,zero,8112ca20 <__reset+0xfb10ca20>
8112ca44:	00000506 	br	8112ca5c <OSQPostOpt+0xd4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
8112ca48:	000f883a 	mov	r7,zero
8112ca4c:	01800104 	movi	r6,4
8112ca50:	e17ffe17 	ldw	r5,-8(fp)
8112ca54:	e13ffd17 	ldw	r4,-12(fp)
8112ca58:	11278240 	call	81127824 <OS_EventTaskRdy>
8112ca5c:	e0bff717 	ldw	r2,-36(fp)
8112ca60:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ca64:	e0bff817 	ldw	r2,-32(fp)
8112ca68:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
8112ca6c:	e0bfff03 	ldbu	r2,-4(fp)
8112ca70:	1080010c 	andi	r2,r2,4
8112ca74:	1000011e 	bne	r2,zero,8112ca7c <OSQPostOpt+0xf4>
            OS_Sched();                               /* Find highest priority task ready to run       */
8112ca78:	11282e00 	call	811282e0 <OS_Sched>
        }
        return (OS_ERR_NONE);
8112ca7c:	0005883a 	mov	r2,zero
8112ca80:	00004106 	br	8112cb88 <OSQPostOpt+0x200>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
8112ca84:	e0bffd17 	ldw	r2,-12(fp)
8112ca88:	10800117 	ldw	r2,4(r2)
8112ca8c:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
8112ca90:	e0bffa17 	ldw	r2,-24(fp)
8112ca94:	10c0058b 	ldhu	r3,22(r2)
8112ca98:	e0bffa17 	ldw	r2,-24(fp)
8112ca9c:	1080050b 	ldhu	r2,20(r2)
8112caa0:	18ffffcc 	andi	r3,r3,65535
8112caa4:	10bfffcc 	andi	r2,r2,65535
8112caa8:	18800636 	bltu	r3,r2,8112cac4 <OSQPostOpt+0x13c>
8112caac:	e0bff717 	ldw	r2,-36(fp)
8112cab0:	e0bff915 	stw	r2,-28(fp)
8112cab4:	e0bff917 	ldw	r2,-28(fp)
8112cab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
8112cabc:	00800784 	movi	r2,30
8112cac0:	00003106 	br	8112cb88 <OSQPostOpt+0x200>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
8112cac4:	e0bfff03 	ldbu	r2,-4(fp)
8112cac8:	1080008c 	andi	r2,r2,2
8112cacc:	10001326 	beq	r2,zero,8112cb1c <OSQPostOpt+0x194>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
8112cad0:	e0bffa17 	ldw	r2,-24(fp)
8112cad4:	10c00417 	ldw	r3,16(r2)
8112cad8:	e0bffa17 	ldw	r2,-24(fp)
8112cadc:	10800117 	ldw	r2,4(r2)
8112cae0:	1880041e 	bne	r3,r2,8112caf4 <OSQPostOpt+0x16c>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
8112cae4:	e0bffa17 	ldw	r2,-24(fp)
8112cae8:	10c00217 	ldw	r3,8(r2)
8112caec:	e0bffa17 	ldw	r2,-24(fp)
8112caf0:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
8112caf4:	e0bffa17 	ldw	r2,-24(fp)
8112caf8:	10800417 	ldw	r2,16(r2)
8112cafc:	10ffff04 	addi	r3,r2,-4
8112cb00:	e0bffa17 	ldw	r2,-24(fp)
8112cb04:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
8112cb08:	e0bffa17 	ldw	r2,-24(fp)
8112cb0c:	10800417 	ldw	r2,16(r2)
8112cb10:	e0fffe17 	ldw	r3,-8(fp)
8112cb14:	10c00015 	stw	r3,0(r2)
8112cb18:	00001006 	br	8112cb5c <OSQPostOpt+0x1d4>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
8112cb1c:	e0bffa17 	ldw	r2,-24(fp)
8112cb20:	10800317 	ldw	r2,12(r2)
8112cb24:	11000104 	addi	r4,r2,4
8112cb28:	e0fffa17 	ldw	r3,-24(fp)
8112cb2c:	19000315 	stw	r4,12(r3)
8112cb30:	e0fffe17 	ldw	r3,-8(fp)
8112cb34:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
8112cb38:	e0bffa17 	ldw	r2,-24(fp)
8112cb3c:	10c00317 	ldw	r3,12(r2)
8112cb40:	e0bffa17 	ldw	r2,-24(fp)
8112cb44:	10800217 	ldw	r2,8(r2)
8112cb48:	1880041e 	bne	r3,r2,8112cb5c <OSQPostOpt+0x1d4>
            pq->OSQIn = pq->OSQStart;
8112cb4c:	e0bffa17 	ldw	r2,-24(fp)
8112cb50:	10c00117 	ldw	r3,4(r2)
8112cb54:	e0bffa17 	ldw	r2,-24(fp)
8112cb58:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
8112cb5c:	e0bffa17 	ldw	r2,-24(fp)
8112cb60:	1080058b 	ldhu	r2,22(r2)
8112cb64:	10800044 	addi	r2,r2,1
8112cb68:	1007883a 	mov	r3,r2
8112cb6c:	e0bffa17 	ldw	r2,-24(fp)
8112cb70:	10c0058d 	sth	r3,22(r2)
8112cb74:	e0bff717 	ldw	r2,-36(fp)
8112cb78:	e0bffb15 	stw	r2,-20(fp)
8112cb7c:	e0bffb17 	ldw	r2,-20(fp)
8112cb80:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112cb84:	0005883a 	mov	r2,zero
}
8112cb88:	e037883a 	mov	sp,fp
8112cb8c:	dfc00117 	ldw	ra,4(sp)
8112cb90:	df000017 	ldw	fp,0(sp)
8112cb94:	dec00204 	addi	sp,sp,8
8112cb98:	f800283a 	ret

8112cb9c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
8112cb9c:	defff604 	addi	sp,sp,-40
8112cba0:	de00012e 	bgeu	sp,et,8112cba8 <OSQQuery+0xc>
8112cba4:	003b68fa 	trap	3
8112cba8:	df000915 	stw	fp,36(sp)
8112cbac:	df000904 	addi	fp,sp,36
8112cbb0:	e13ffe15 	stw	r4,-8(fp)
8112cbb4:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112cbb8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
8112cbbc:	e0bffe17 	ldw	r2,-8(fp)
8112cbc0:	1000021e 	bne	r2,zero,8112cbcc <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112cbc4:	00800104 	movi	r2,4
8112cbc8:	00004906 	br	8112ccf0 <OSQQuery+0x154>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
8112cbcc:	e0bfff17 	ldw	r2,-4(fp)
8112cbd0:	1000021e 	bne	r2,zero,8112cbdc <OSQQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112cbd4:	00800244 	movi	r2,9
8112cbd8:	00004506 	br	8112ccf0 <OSQQuery+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
8112cbdc:	e0bffe17 	ldw	r2,-8(fp)
8112cbe0:	10800003 	ldbu	r2,0(r2)
8112cbe4:	10803fcc 	andi	r2,r2,255
8112cbe8:	108000a0 	cmpeqi	r2,r2,2
8112cbec:	1000021e 	bne	r2,zero,8112cbf8 <OSQQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112cbf0:	00800044 	movi	r2,1
8112cbf4:	00003e06 	br	8112ccf0 <OSQQuery+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cbf8:	0005303a 	rdctl	r2,status
8112cbfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cc00:	e0fffd17 	ldw	r3,-12(fp)
8112cc04:	00bfff84 	movi	r2,-2
8112cc08:	1884703a 	and	r2,r3,r2
8112cc0c:	1001703a 	wrctl	status,r2
  
  return context;
8112cc10:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112cc14:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
8112cc18:	e0bffe17 	ldw	r2,-8(fp)
8112cc1c:	10c00283 	ldbu	r3,10(r2)
8112cc20:	e0bfff17 	ldw	r2,-4(fp)
8112cc24:	10c00385 	stb	r3,14(r2)
    psrc                 = &pevent->OSEventTbl[0];
8112cc28:	e0bffe17 	ldw	r2,-8(fp)
8112cc2c:	108002c4 	addi	r2,r2,11
8112cc30:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
8112cc34:	e0bfff17 	ldw	r2,-4(fp)
8112cc38:	10800204 	addi	r2,r2,8
8112cc3c:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112cc40:	e03ff705 	stb	zero,-36(fp)
8112cc44:	00000b06 	br	8112cc74 <OSQQuery+0xd8>
        *pdest++ = *psrc++;
8112cc48:	e0bff917 	ldw	r2,-28(fp)
8112cc4c:	10c00044 	addi	r3,r2,1
8112cc50:	e0fff915 	stw	r3,-28(fp)
8112cc54:	e0fff817 	ldw	r3,-32(fp)
8112cc58:	19000044 	addi	r4,r3,1
8112cc5c:	e13ff815 	stw	r4,-32(fp)
8112cc60:	18c00003 	ldbu	r3,0(r3)
8112cc64:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112cc68:	e0bff703 	ldbu	r2,-36(fp)
8112cc6c:	10800044 	addi	r2,r2,1
8112cc70:	e0bff705 	stb	r2,-36(fp)
8112cc74:	e0bff703 	ldbu	r2,-36(fp)
8112cc78:	108001b0 	cmpltui	r2,r2,6
8112cc7c:	103ff21e 	bne	r2,zero,8112cc48 <__reset+0xfb10cc48>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
8112cc80:	e0bffe17 	ldw	r2,-8(fp)
8112cc84:	10800117 	ldw	r2,4(r2)
8112cc88:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
8112cc8c:	e0bffc17 	ldw	r2,-16(fp)
8112cc90:	1080058b 	ldhu	r2,22(r2)
8112cc94:	10bfffcc 	andi	r2,r2,65535
8112cc98:	10000626 	beq	r2,zero,8112ccb4 <OSQQuery+0x118>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
8112cc9c:	e0bffc17 	ldw	r2,-16(fp)
8112cca0:	10800417 	ldw	r2,16(r2)
8112cca4:	10c00017 	ldw	r3,0(r2)
8112cca8:	e0bfff17 	ldw	r2,-4(fp)
8112ccac:	10c00015 	stw	r3,0(r2)
8112ccb0:	00000206 	br	8112ccbc <OSQQuery+0x120>
    } else {
        p_q_data->OSMsg = (void *)0;
8112ccb4:	e0bfff17 	ldw	r2,-4(fp)
8112ccb8:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
8112ccbc:	e0bffc17 	ldw	r2,-16(fp)
8112ccc0:	10c0058b 	ldhu	r3,22(r2)
8112ccc4:	e0bfff17 	ldw	r2,-4(fp)
8112ccc8:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
8112cccc:	e0bffc17 	ldw	r2,-16(fp)
8112ccd0:	10c0050b 	ldhu	r3,20(r2)
8112ccd4:	e0bfff17 	ldw	r2,-4(fp)
8112ccd8:	10c0018d 	sth	r3,6(r2)
8112ccdc:	e0bffa17 	ldw	r2,-24(fp)
8112cce0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cce4:	e0bffb17 	ldw	r2,-20(fp)
8112cce8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112ccec:	0005883a 	mov	r2,zero
}
8112ccf0:	e037883a 	mov	sp,fp
8112ccf4:	df000017 	ldw	fp,0(sp)
8112ccf8:	dec00104 	addi	sp,sp,4
8112ccfc:	f800283a 	ret

8112cd00 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
8112cd00:	defffb04 	addi	sp,sp,-20
8112cd04:	de00012e 	bgeu	sp,et,8112cd0c <OS_QInit+0xc>
8112cd08:	003b68fa 	trap	3
8112cd0c:	dfc00415 	stw	ra,16(sp)
8112cd10:	df000315 	stw	fp,12(sp)
8112cd14:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
8112cd18:	01407804 	movi	r5,480
8112cd1c:	01204574 	movhi	r4,33045
8112cd20:	213ca604 	addi	r4,r4,-3432
8112cd24:	11282140 	call	81128214 <OS_MemClr>
    pq1 = &OSQTbl[0];
8112cd28:	00a04574 	movhi	r2,33045
8112cd2c:	10bca604 	addi	r2,r2,-3432
8112cd30:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
8112cd34:	00a04574 	movhi	r2,33045
8112cd38:	10bcac04 	addi	r2,r2,-3408
8112cd3c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112cd40:	e03ffd0d 	sth	zero,-12(fp)
8112cd44:	00000c06 	br	8112cd78 <OS_QInit+0x78>
        pq1->OSQPtr = pq2;
8112cd48:	e0bffe17 	ldw	r2,-8(fp)
8112cd4c:	e0ffff17 	ldw	r3,-4(fp)
8112cd50:	10c00015 	stw	r3,0(r2)
        pq1++;
8112cd54:	e0bffe17 	ldw	r2,-8(fp)
8112cd58:	10800604 	addi	r2,r2,24
8112cd5c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
8112cd60:	e0bfff17 	ldw	r2,-4(fp)
8112cd64:	10800604 	addi	r2,r2,24
8112cd68:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
8112cd6c:	e0bffd0b 	ldhu	r2,-12(fp)
8112cd70:	10800044 	addi	r2,r2,1
8112cd74:	e0bffd0d 	sth	r2,-12(fp)
8112cd78:	e0bffd0b 	ldhu	r2,-12(fp)
8112cd7c:	108004f0 	cmpltui	r2,r2,19
8112cd80:	103ff11e 	bne	r2,zero,8112cd48 <__reset+0xfb10cd48>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
8112cd84:	e0bffe17 	ldw	r2,-8(fp)
8112cd88:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
8112cd8c:	00a04574 	movhi	r2,33045
8112cd90:	10bca604 	addi	r2,r2,-3432
8112cd94:	d0a07f15 	stw	r2,-32260(gp)
#endif
}
8112cd98:	0001883a 	nop
8112cd9c:	e037883a 	mov	sp,fp
8112cda0:	dfc00117 	ldw	ra,4(sp)
8112cda4:	df000017 	ldw	fp,0(sp)
8112cda8:	dec00204 	addi	sp,sp,8
8112cdac:	f800283a 	ret

8112cdb0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
8112cdb0:	defffa04 	addi	sp,sp,-24
8112cdb4:	de00012e 	bgeu	sp,et,8112cdbc <OSSemAccept+0xc>
8112cdb8:	003b68fa 	trap	3
8112cdbc:	df000515 	stw	fp,20(sp)
8112cdc0:	df000504 	addi	fp,sp,20
8112cdc4:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112cdc8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112cdcc:	e0bfff17 	ldw	r2,-4(fp)
8112cdd0:	1000021e 	bne	r2,zero,8112cddc <OSSemAccept+0x2c>
        return (0);
8112cdd4:	0005883a 	mov	r2,zero
8112cdd8:	00001f06 	br	8112ce58 <OSSemAccept+0xa8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112cddc:	e0bfff17 	ldw	r2,-4(fp)
8112cde0:	10800003 	ldbu	r2,0(r2)
8112cde4:	10803fcc 	andi	r2,r2,255
8112cde8:	108000e0 	cmpeqi	r2,r2,3
8112cdec:	1000021e 	bne	r2,zero,8112cdf8 <OSSemAccept+0x48>
        return (0);
8112cdf0:	0005883a 	mov	r2,zero
8112cdf4:	00001806 	br	8112ce58 <OSSemAccept+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cdf8:	0005303a 	rdctl	r2,status
8112cdfc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ce00:	e0fffe17 	ldw	r3,-8(fp)
8112ce04:	00bfff84 	movi	r2,-2
8112ce08:	1884703a 	and	r2,r3,r2
8112ce0c:	1001703a 	wrctl	status,r2
  
  return context;
8112ce10:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112ce14:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
8112ce18:	e0bfff17 	ldw	r2,-4(fp)
8112ce1c:	1080020b 	ldhu	r2,8(r2)
8112ce20:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
8112ce24:	e0bffd0b 	ldhu	r2,-12(fp)
8112ce28:	10000626 	beq	r2,zero,8112ce44 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
8112ce2c:	e0bfff17 	ldw	r2,-4(fp)
8112ce30:	1080020b 	ldhu	r2,8(r2)
8112ce34:	10bfffc4 	addi	r2,r2,-1
8112ce38:	1007883a 	mov	r3,r2
8112ce3c:	e0bfff17 	ldw	r2,-4(fp)
8112ce40:	10c0020d 	sth	r3,8(r2)
8112ce44:	e0bffb17 	ldw	r2,-20(fp)
8112ce48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ce4c:	e0bffc17 	ldw	r2,-16(fp)
8112ce50:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
8112ce54:	e0bffd0b 	ldhu	r2,-12(fp)
}
8112ce58:	e037883a 	mov	sp,fp
8112ce5c:	df000017 	ldw	fp,0(sp)
8112ce60:	dec00104 	addi	sp,sp,4
8112ce64:	f800283a 	ret

8112ce68 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
8112ce68:	defff904 	addi	sp,sp,-28
8112ce6c:	de00012e 	bgeu	sp,et,8112ce74 <OSSemCreate+0xc>
8112ce70:	003b68fa 	trap	3
8112ce74:	dfc00615 	stw	ra,24(sp)
8112ce78:	df000515 	stw	fp,20(sp)
8112ce7c:	df000504 	addi	fp,sp,20
8112ce80:	2005883a 	mov	r2,r4
8112ce84:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112ce88:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112ce8c:	d0a08303 	ldbu	r2,-32244(gp)
8112ce90:	10803fcc 	andi	r2,r2,255
8112ce94:	10000226 	beq	r2,zero,8112cea0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
8112ce98:	0005883a 	mov	r2,zero
8112ce9c:	00002506 	br	8112cf34 <OSSemCreate+0xcc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cea0:	0005303a 	rdctl	r2,status
8112cea4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cea8:	e0fffe17 	ldw	r3,-8(fp)
8112ceac:	00bfff84 	movi	r2,-2
8112ceb0:	1884703a 	and	r2,r3,r2
8112ceb4:	1001703a 	wrctl	status,r2
  
  return context;
8112ceb8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112cebc:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
8112cec0:	d0a08217 	ldw	r2,-32248(gp)
8112cec4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
8112cec8:	d0a08217 	ldw	r2,-32248(gp)
8112cecc:	10000326 	beq	r2,zero,8112cedc <OSSemCreate+0x74>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
8112ced0:	d0a08217 	ldw	r2,-32248(gp)
8112ced4:	10800117 	ldw	r2,4(r2)
8112ced8:	d0a08215 	stw	r2,-32248(gp)
8112cedc:	e0bffb17 	ldw	r2,-20(fp)
8112cee0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112cee4:	e0bffc17 	ldw	r2,-16(fp)
8112cee8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
8112ceec:	e0bffd17 	ldw	r2,-12(fp)
8112cef0:	10000f26 	beq	r2,zero,8112cf30 <OSSemCreate+0xc8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
8112cef4:	e0bffd17 	ldw	r2,-12(fp)
8112cef8:	00c000c4 	movi	r3,3
8112cefc:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
8112cf00:	e0bffd17 	ldw	r2,-12(fp)
8112cf04:	e0ffff0b 	ldhu	r3,-4(fp)
8112cf08:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
8112cf0c:	e0bffd17 	ldw	r2,-12(fp)
8112cf10:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
8112cf14:	e0bffd17 	ldw	r2,-12(fp)
8112cf18:	00c00fc4 	movi	r3,63
8112cf1c:	10c00445 	stb	r3,17(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
8112cf20:	e0bffd17 	ldw	r2,-12(fp)
8112cf24:	10000485 	stb	zero,18(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
8112cf28:	e13ffd17 	ldw	r4,-12(fp)
8112cf2c:	1127dfc0 	call	81127dfc <OS_EventWaitListInit>
    }
    return (pevent);
8112cf30:	e0bffd17 	ldw	r2,-12(fp)
}
8112cf34:	e037883a 	mov	sp,fp
8112cf38:	dfc00117 	ldw	ra,4(sp)
8112cf3c:	df000017 	ldw	fp,0(sp)
8112cf40:	dec00204 	addi	sp,sp,8
8112cf44:	f800283a 	ret

8112cf48 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112cf48:	defff304 	addi	sp,sp,-52
8112cf4c:	de00012e 	bgeu	sp,et,8112cf54 <OSSemDel+0xc>
8112cf50:	003b68fa 	trap	3
8112cf54:	dfc00c15 	stw	ra,48(sp)
8112cf58:	df000b15 	stw	fp,44(sp)
8112cf5c:	df000b04 	addi	fp,sp,44
8112cf60:	e13ffd15 	stw	r4,-12(fp)
8112cf64:	2805883a 	mov	r2,r5
8112cf68:	e1bfff15 	stw	r6,-4(fp)
8112cf6c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112cf70:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
8112cf74:	e0bfff17 	ldw	r2,-4(fp)
8112cf78:	1000021e 	bne	r2,zero,8112cf84 <OSSemDel+0x3c>
        return (pevent);
8112cf7c:	e0bffd17 	ldw	r2,-12(fp)
8112cf80:	00007e06 	br	8112d17c <OSSemDel+0x234>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112cf84:	e0bffd17 	ldw	r2,-12(fp)
8112cf88:	1000051e 	bne	r2,zero,8112cfa0 <OSSemDel+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112cf8c:	e0bfff17 	ldw	r2,-4(fp)
8112cf90:	00c00104 	movi	r3,4
8112cf94:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112cf98:	e0bffd17 	ldw	r2,-12(fp)
8112cf9c:	00007706 	br	8112d17c <OSSemDel+0x234>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112cfa0:	e0bffd17 	ldw	r2,-12(fp)
8112cfa4:	10800003 	ldbu	r2,0(r2)
8112cfa8:	10803fcc 	andi	r2,r2,255
8112cfac:	108000e0 	cmpeqi	r2,r2,3
8112cfb0:	1000051e 	bne	r2,zero,8112cfc8 <OSSemDel+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112cfb4:	e0bfff17 	ldw	r2,-4(fp)
8112cfb8:	00c00044 	movi	r3,1
8112cfbc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112cfc0:	e0bffd17 	ldw	r2,-12(fp)
8112cfc4:	00006d06 	br	8112d17c <OSSemDel+0x234>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
8112cfc8:	d0a08303 	ldbu	r2,-32244(gp)
8112cfcc:	10803fcc 	andi	r2,r2,255
8112cfd0:	10000526 	beq	r2,zero,8112cfe8 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
8112cfd4:	e0bfff17 	ldw	r2,-4(fp)
8112cfd8:	00c003c4 	movi	r3,15
8112cfdc:	10c00005 	stb	r3,0(r2)
        return (pevent);
8112cfe0:	e0bffd17 	ldw	r2,-12(fp)
8112cfe4:	00006506 	br	8112d17c <OSSemDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112cfe8:	0005303a 	rdctl	r2,status
8112cfec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112cff0:	e0fffc17 	ldw	r3,-16(fp)
8112cff4:	00bfff84 	movi	r2,-2
8112cff8:	1884703a 	and	r2,r3,r2
8112cffc:	1001703a 	wrctl	status,r2
  
  return context;
8112d000:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d004:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
8112d008:	e0bffd17 	ldw	r2,-12(fp)
8112d00c:	10800283 	ldbu	r2,10(r2)
8112d010:	10803fcc 	andi	r2,r2,255
8112d014:	10000326 	beq	r2,zero,8112d024 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
8112d018:	00800044 	movi	r2,1
8112d01c:	e0bff505 	stb	r2,-44(fp)
8112d020:	00000106 	br	8112d028 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
8112d024:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
8112d028:	e0bffe03 	ldbu	r2,-8(fp)
8112d02c:	10000326 	beq	r2,zero,8112d03c <OSSemDel+0xf4>
8112d030:	10800060 	cmpeqi	r2,r2,1
8112d034:	1000281e 	bne	r2,zero,8112d0d8 <OSSemDel+0x190>
8112d038:	00004506 	br	8112d150 <OSSemDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
8112d03c:	e0bff503 	ldbu	r2,-44(fp)
8112d040:	1000161e 	bne	r2,zero,8112d09c <OSSemDel+0x154>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
8112d044:	e0bffd17 	ldw	r2,-12(fp)
8112d048:	00c00fc4 	movi	r3,63
8112d04c:	10c00445 	stb	r3,17(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
8112d050:	e0bffd17 	ldw	r2,-12(fp)
8112d054:	10000485 	stb	zero,18(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112d058:	e0bffd17 	ldw	r2,-12(fp)
8112d05c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
8112d060:	d0e08217 	ldw	r3,-32248(gp)
8112d064:	e0bffd17 	ldw	r2,-12(fp)
8112d068:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
8112d06c:	e0bffd17 	ldw	r2,-12(fp)
8112d070:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
8112d074:	e0bffd17 	ldw	r2,-12(fp)
8112d078:	d0a08215 	stw	r2,-32248(gp)
8112d07c:	e0bff717 	ldw	r2,-36(fp)
8112d080:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d084:	e0bff817 	ldw	r2,-32(fp)
8112d088:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
8112d08c:	e0bfff17 	ldw	r2,-4(fp)
8112d090:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
8112d094:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
8112d098:	00003706 	br	8112d178 <OSSemDel+0x230>
8112d09c:	e0bff717 	ldw	r2,-36(fp)
8112d0a0:	e0bff915 	stw	r2,-28(fp)
8112d0a4:	e0bff917 	ldw	r2,-28(fp)
8112d0a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
8112d0ac:	e0bfff17 	ldw	r2,-4(fp)
8112d0b0:	00c01244 	movi	r3,73
8112d0b4:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
8112d0b8:	e0bffd17 	ldw	r2,-12(fp)
8112d0bc:	e0bff615 	stw	r2,-40(fp)
             }
             break;
8112d0c0:	00002d06 	br	8112d178 <OSSemDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112d0c4:	000f883a 	mov	r7,zero
8112d0c8:	01800044 	movi	r6,1
8112d0cc:	000b883a 	mov	r5,zero
8112d0d0:	e13ffd17 	ldw	r4,-12(fp)
8112d0d4:	11278240 	call	81127824 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
8112d0d8:	e0bffd17 	ldw	r2,-12(fp)
8112d0dc:	10800283 	ldbu	r2,10(r2)
8112d0e0:	10803fcc 	andi	r2,r2,255
8112d0e4:	103ff71e 	bne	r2,zero,8112d0c4 <__reset+0xfb10d0c4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
8112d0e8:	e0bffd17 	ldw	r2,-12(fp)
8112d0ec:	00c00fc4 	movi	r3,63
8112d0f0:	10c00445 	stb	r3,17(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
8112d0f4:	e0bffd17 	ldw	r2,-12(fp)
8112d0f8:	10000485 	stb	zero,18(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
8112d0fc:	e0bffd17 	ldw	r2,-12(fp)
8112d100:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
8112d104:	d0e08217 	ldw	r3,-32248(gp)
8112d108:	e0bffd17 	ldw	r2,-12(fp)
8112d10c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
8112d110:	e0bffd17 	ldw	r2,-12(fp)
8112d114:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
8112d118:	e0bffd17 	ldw	r2,-12(fp)
8112d11c:	d0a08215 	stw	r2,-32248(gp)
8112d120:	e0bff717 	ldw	r2,-36(fp)
8112d124:	e0bffa15 	stw	r2,-24(fp)
8112d128:	e0bffa17 	ldw	r2,-24(fp)
8112d12c:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
8112d130:	e0bff503 	ldbu	r2,-44(fp)
8112d134:	10800058 	cmpnei	r2,r2,1
8112d138:	1000011e 	bne	r2,zero,8112d140 <OSSemDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
8112d13c:	11282e00 	call	811282e0 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
8112d140:	e0bfff17 	ldw	r2,-4(fp)
8112d144:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
8112d148:	e03ff615 	stw	zero,-40(fp)
             break;
8112d14c:	00000a06 	br	8112d178 <OSSemDel+0x230>
8112d150:	e0bff717 	ldw	r2,-36(fp)
8112d154:	e0bffb15 	stw	r2,-20(fp)
8112d158:	e0bffb17 	ldw	r2,-20(fp)
8112d15c:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
8112d160:	e0bfff17 	ldw	r2,-4(fp)
8112d164:	00c001c4 	movi	r3,7
8112d168:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
8112d16c:	e0bffd17 	ldw	r2,-12(fp)
8112d170:	e0bff615 	stw	r2,-40(fp)
             break;
8112d174:	0001883a 	nop
    }
    return (pevent_return);
8112d178:	e0bff617 	ldw	r2,-40(fp)
}
8112d17c:	e037883a 	mov	sp,fp
8112d180:	dfc00117 	ldw	ra,4(sp)
8112d184:	df000017 	ldw	fp,0(sp)
8112d188:	dec00204 	addi	sp,sp,8
8112d18c:	f800283a 	ret

8112d190 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
8112d190:	defff504 	addi	sp,sp,-44
8112d194:	de00012e 	bgeu	sp,et,8112d19c <OSSemPend+0xc>
8112d198:	003b68fa 	trap	3
8112d19c:	dfc00a15 	stw	ra,40(sp)
8112d1a0:	df000915 	stw	fp,36(sp)
8112d1a4:	df000904 	addi	fp,sp,36
8112d1a8:	e13ffd15 	stw	r4,-12(fp)
8112d1ac:	2805883a 	mov	r2,r5
8112d1b0:	e1bfff15 	stw	r6,-4(fp)
8112d1b4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d1b8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112d1bc:	e0bfff17 	ldw	r2,-4(fp)
8112d1c0:	10007226 	beq	r2,zero,8112d38c <OSSemPend+0x1fc>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112d1c4:	e0bffd17 	ldw	r2,-12(fp)
8112d1c8:	1000041e 	bne	r2,zero,8112d1dc <OSSemPend+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
8112d1cc:	e0bfff17 	ldw	r2,-4(fp)
8112d1d0:	00c00104 	movi	r3,4
8112d1d4:	10c00005 	stb	r3,0(r2)
        return;
8112d1d8:	00006d06 	br	8112d390 <OSSemPend+0x200>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112d1dc:	e0bffd17 	ldw	r2,-12(fp)
8112d1e0:	10800003 	ldbu	r2,0(r2)
8112d1e4:	10803fcc 	andi	r2,r2,255
8112d1e8:	108000e0 	cmpeqi	r2,r2,3
8112d1ec:	1000041e 	bne	r2,zero,8112d200 <OSSemPend+0x70>
        *perr = OS_ERR_EVENT_TYPE;
8112d1f0:	e0bfff17 	ldw	r2,-4(fp)
8112d1f4:	00c00044 	movi	r3,1
8112d1f8:	10c00005 	stb	r3,0(r2)
        return;
8112d1fc:	00006406 	br	8112d390 <OSSemPend+0x200>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
8112d200:	d0a08303 	ldbu	r2,-32244(gp)
8112d204:	10803fcc 	andi	r2,r2,255
8112d208:	10000426 	beq	r2,zero,8112d21c <OSSemPend+0x8c>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
8112d20c:	e0bfff17 	ldw	r2,-4(fp)
8112d210:	00c00084 	movi	r3,2
8112d214:	10c00005 	stb	r3,0(r2)
        return;
8112d218:	00005d06 	br	8112d390 <OSSemPend+0x200>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
8112d21c:	d0a07103 	ldbu	r2,-32316(gp)
8112d220:	10803fcc 	andi	r2,r2,255
8112d224:	10000426 	beq	r2,zero,8112d238 <OSSemPend+0xa8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
8112d228:	e0bfff17 	ldw	r2,-4(fp)
8112d22c:	00c00344 	movi	r3,13
8112d230:	10c00005 	stb	r3,0(r2)
        return;
8112d234:	00005606 	br	8112d390 <OSSemPend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d238:	0005303a 	rdctl	r2,status
8112d23c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d240:	e0fffc17 	ldw	r3,-16(fp)
8112d244:	00bfff84 	movi	r2,-2
8112d248:	1884703a 	and	r2,r3,r2
8112d24c:	1001703a 	wrctl	status,r2
  
  return context;
8112d250:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d254:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
8112d258:	e0bffd17 	ldw	r2,-12(fp)
8112d25c:	1080020b 	ldhu	r2,8(r2)
8112d260:	10bfffcc 	andi	r2,r2,65535
8112d264:	10000d26 	beq	r2,zero,8112d29c <OSSemPend+0x10c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
8112d268:	e0bffd17 	ldw	r2,-12(fp)
8112d26c:	1080020b 	ldhu	r2,8(r2)
8112d270:	10bfffc4 	addi	r2,r2,-1
8112d274:	1007883a 	mov	r3,r2
8112d278:	e0bffd17 	ldw	r2,-12(fp)
8112d27c:	10c0020d 	sth	r3,8(r2)
8112d280:	e0bff717 	ldw	r2,-36(fp)
8112d284:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d288:	e0bff817 	ldw	r2,-32(fp)
8112d28c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
8112d290:	e0bfff17 	ldw	r2,-4(fp)
8112d294:	10000005 	stb	zero,0(r2)
        return;
8112d298:	00003d06 	br	8112d390 <OSSemPend+0x200>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
8112d29c:	d0a08417 	ldw	r2,-32240(gp)
8112d2a0:	d0e08417 	ldw	r3,-32240(gp)
8112d2a4:	18c00c03 	ldbu	r3,48(r3)
8112d2a8:	18c00054 	ori	r3,r3,1
8112d2ac:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
8112d2b0:	d0a08417 	ldw	r2,-32240(gp)
8112d2b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
8112d2b8:	d0a08417 	ldw	r2,-32240(gp)
8112d2bc:	e0fffe0b 	ldhu	r3,-8(fp)
8112d2c0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
8112d2c4:	e13ffd17 	ldw	r4,-12(fp)
8112d2c8:	11279c40 	call	811279c4 <OS_EventTaskWait>
8112d2cc:	e0bff717 	ldw	r2,-36(fp)
8112d2d0:	e0bffb15 	stw	r2,-20(fp)
8112d2d4:	e0bffb17 	ldw	r2,-20(fp)
8112d2d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
8112d2dc:	11282e00 	call	811282e0 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d2e0:	0005303a 	rdctl	r2,status
8112d2e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d2e8:	e0fff917 	ldw	r3,-28(fp)
8112d2ec:	00bfff84 	movi	r2,-2
8112d2f0:	1884703a 	and	r2,r3,r2
8112d2f4:	1001703a 	wrctl	status,r2
  
  return context;
8112d2f8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
8112d2fc:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
8112d300:	d0a08417 	ldw	r2,-32240(gp)
8112d304:	10800c43 	ldbu	r2,49(r2)
8112d308:	10803fcc 	andi	r2,r2,255
8112d30c:	10000326 	beq	r2,zero,8112d31c <OSSemPend+0x18c>
8112d310:	108000a0 	cmpeqi	r2,r2,2
8112d314:	1000041e 	bne	r2,zero,8112d328 <OSSemPend+0x198>
8112d318:	00000706 	br	8112d338 <OSSemPend+0x1a8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
8112d31c:	e0bfff17 	ldw	r2,-4(fp)
8112d320:	10000005 	stb	zero,0(r2)
             break;
8112d324:	00000c06 	br	8112d358 <OSSemPend+0x1c8>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
8112d328:	e0bfff17 	ldw	r2,-4(fp)
8112d32c:	00c00384 	movi	r3,14
8112d330:	10c00005 	stb	r3,0(r2)
             break;
8112d334:	00000806 	br	8112d358 <OSSemPend+0x1c8>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
8112d338:	d0a08417 	ldw	r2,-32240(gp)
8112d33c:	e17ffd17 	ldw	r5,-12(fp)
8112d340:	1009883a 	mov	r4,r2
8112d344:	1127c340 	call	81127c34 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
8112d348:	e0bfff17 	ldw	r2,-4(fp)
8112d34c:	00c00284 	movi	r3,10
8112d350:	10c00005 	stb	r3,0(r2)
             break;
8112d354:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
8112d358:	d0a08417 	ldw	r2,-32240(gp)
8112d35c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
8112d360:	d0a08417 	ldw	r2,-32240(gp)
8112d364:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
8112d368:	d0a08417 	ldw	r2,-32240(gp)
8112d36c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
8112d370:	d0a08417 	ldw	r2,-32240(gp)
8112d374:	10000815 	stw	zero,32(r2)
8112d378:	e0bff717 	ldw	r2,-36(fp)
8112d37c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d380:	e0bffa17 	ldw	r2,-24(fp)
8112d384:	1001703a 	wrctl	status,r2
8112d388:	00000106 	br	8112d390 <OSSemPend+0x200>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112d38c:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
8112d390:	e037883a 	mov	sp,fp
8112d394:	dfc00117 	ldw	ra,4(sp)
8112d398:	df000017 	ldw	fp,0(sp)
8112d39c:	dec00204 	addi	sp,sp,8
8112d3a0:	f800283a 	ret

8112d3a4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
8112d3a4:	defff604 	addi	sp,sp,-40
8112d3a8:	de00012e 	bgeu	sp,et,8112d3b0 <OSSemPendAbort+0xc>
8112d3ac:	003b68fa 	trap	3
8112d3b0:	dfc00915 	stw	ra,36(sp)
8112d3b4:	df000815 	stw	fp,32(sp)
8112d3b8:	df000804 	addi	fp,sp,32
8112d3bc:	e13ffd15 	stw	r4,-12(fp)
8112d3c0:	2805883a 	mov	r2,r5
8112d3c4:	e1bfff15 	stw	r6,-4(fp)
8112d3c8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d3cc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112d3d0:	e0bfff17 	ldw	r2,-4(fp)
8112d3d4:	1000021e 	bne	r2,zero,8112d3e0 <OSSemPendAbort+0x3c>
        return (0);
8112d3d8:	0005883a 	mov	r2,zero
8112d3dc:	00004906 	br	8112d504 <OSSemPendAbort+0x160>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112d3e0:	e0bffd17 	ldw	r2,-12(fp)
8112d3e4:	1000051e 	bne	r2,zero,8112d3fc <OSSemPendAbort+0x58>
        *perr = OS_ERR_PEVENT_NULL;
8112d3e8:	e0bfff17 	ldw	r2,-4(fp)
8112d3ec:	00c00104 	movi	r3,4
8112d3f0:	10c00005 	stb	r3,0(r2)
        return (0);
8112d3f4:	0005883a 	mov	r2,zero
8112d3f8:	00004206 	br	8112d504 <OSSemPendAbort+0x160>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112d3fc:	e0bffd17 	ldw	r2,-12(fp)
8112d400:	10800003 	ldbu	r2,0(r2)
8112d404:	10803fcc 	andi	r2,r2,255
8112d408:	108000e0 	cmpeqi	r2,r2,3
8112d40c:	1000051e 	bne	r2,zero,8112d424 <OSSemPendAbort+0x80>
        *perr = OS_ERR_EVENT_TYPE;
8112d410:	e0bfff17 	ldw	r2,-4(fp)
8112d414:	00c00044 	movi	r3,1
8112d418:	10c00005 	stb	r3,0(r2)
        return (0);
8112d41c:	0005883a 	mov	r2,zero
8112d420:	00003806 	br	8112d504 <OSSemPendAbort+0x160>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d424:	0005303a 	rdctl	r2,status
8112d428:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d42c:	e0fffc17 	ldw	r3,-16(fp)
8112d430:	00bfff84 	movi	r2,-2
8112d434:	1884703a 	and	r2,r3,r2
8112d438:	1001703a 	wrctl	status,r2
  
  return context;
8112d43c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d440:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
8112d444:	e0bffd17 	ldw	r2,-12(fp)
8112d448:	10800283 	ldbu	r2,10(r2)
8112d44c:	10803fcc 	andi	r2,r2,255
8112d450:	10002526 	beq	r2,zero,8112d4e8 <OSSemPendAbort+0x144>
        nbr_tasks = 0;
8112d454:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
8112d458:	e0bffe03 	ldbu	r2,-8(fp)
8112d45c:	10800060 	cmpeqi	r2,r2,1
8112d460:	10000e26 	beq	r2,zero,8112d49c <OSSemPendAbort+0xf8>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112d464:	00000806 	br	8112d488 <OSSemPendAbort+0xe4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112d468:	01c00084 	movi	r7,2
8112d46c:	01800044 	movi	r6,1
8112d470:	000b883a 	mov	r5,zero
8112d474:	e13ffd17 	ldw	r4,-12(fp)
8112d478:	11278240 	call	81127824 <OS_EventTaskRdy>
                     nbr_tasks++;
8112d47c:	e0bff803 	ldbu	r2,-32(fp)
8112d480:	10800044 	addi	r2,r2,1
8112d484:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
8112d488:	e0bffd17 	ldw	r2,-12(fp)
8112d48c:	10800283 	ldbu	r2,10(r2)
8112d490:	10803fcc 	andi	r2,r2,255
8112d494:	103ff41e 	bne	r2,zero,8112d468 <__reset+0xfb10d468>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
8112d498:	00000906 	br	8112d4c0 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
8112d49c:	01c00084 	movi	r7,2
8112d4a0:	01800044 	movi	r6,1
8112d4a4:	000b883a 	mov	r5,zero
8112d4a8:	e13ffd17 	ldw	r4,-12(fp)
8112d4ac:	11278240 	call	81127824 <OS_EventTaskRdy>
                 nbr_tasks++;
8112d4b0:	e0bff803 	ldbu	r2,-32(fp)
8112d4b4:	10800044 	addi	r2,r2,1
8112d4b8:	e0bff805 	stb	r2,-32(fp)
                 break;
8112d4bc:	0001883a 	nop
8112d4c0:	e0bff917 	ldw	r2,-28(fp)
8112d4c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d4c8:	e0bffa17 	ldw	r2,-24(fp)
8112d4cc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112d4d0:	11282e00 	call	811282e0 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
8112d4d4:	e0bfff17 	ldw	r2,-4(fp)
8112d4d8:	00c00384 	movi	r3,14
8112d4dc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
8112d4e0:	e0bff803 	ldbu	r2,-32(fp)
8112d4e4:	00000706 	br	8112d504 <OSSemPendAbort+0x160>
8112d4e8:	e0bff917 	ldw	r2,-28(fp)
8112d4ec:	e0bffb15 	stw	r2,-20(fp)
8112d4f0:	e0bffb17 	ldw	r2,-20(fp)
8112d4f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112d4f8:	e0bfff17 	ldw	r2,-4(fp)
8112d4fc:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
8112d500:	0005883a 	mov	r2,zero
}
8112d504:	e037883a 	mov	sp,fp
8112d508:	dfc00117 	ldw	ra,4(sp)
8112d50c:	df000017 	ldw	fp,0(sp)
8112d510:	dec00204 	addi	sp,sp,8
8112d514:	f800283a 	ret

8112d518 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
8112d518:	defff804 	addi	sp,sp,-32
8112d51c:	de00012e 	bgeu	sp,et,8112d524 <OSSemPost+0xc>
8112d520:	003b68fa 	trap	3
8112d524:	dfc00715 	stw	ra,28(sp)
8112d528:	df000615 	stw	fp,24(sp)
8112d52c:	df000604 	addi	fp,sp,24
8112d530:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d534:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112d538:	e0bfff17 	ldw	r2,-4(fp)
8112d53c:	1000021e 	bne	r2,zero,8112d548 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
8112d540:	00800104 	movi	r2,4
8112d544:	00003506 	br	8112d61c <OSSemPost+0x104>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112d548:	e0bfff17 	ldw	r2,-4(fp)
8112d54c:	10800003 	ldbu	r2,0(r2)
8112d550:	10803fcc 	andi	r2,r2,255
8112d554:	108000e0 	cmpeqi	r2,r2,3
8112d558:	1000021e 	bne	r2,zero,8112d564 <OSSemPost+0x4c>
        return (OS_ERR_EVENT_TYPE);
8112d55c:	00800044 	movi	r2,1
8112d560:	00002e06 	br	8112d61c <OSSemPost+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d564:	0005303a 	rdctl	r2,status
8112d568:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d56c:	e0fffe17 	ldw	r3,-8(fp)
8112d570:	00bfff84 	movi	r2,-2
8112d574:	1884703a 	and	r2,r3,r2
8112d578:	1001703a 	wrctl	status,r2
  
  return context;
8112d57c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112d580:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
8112d584:	e0bfff17 	ldw	r2,-4(fp)
8112d588:	10800283 	ldbu	r2,10(r2)
8112d58c:	10803fcc 	andi	r2,r2,255
8112d590:	10000c26 	beq	r2,zero,8112d5c4 <OSSemPost+0xac>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
8112d594:	000f883a 	mov	r7,zero
8112d598:	01800044 	movi	r6,1
8112d59c:	000b883a 	mov	r5,zero
8112d5a0:	e13fff17 	ldw	r4,-4(fp)
8112d5a4:	11278240 	call	81127824 <OS_EventTaskRdy>
8112d5a8:	e0bffa17 	ldw	r2,-24(fp)
8112d5ac:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d5b0:	e0bffb17 	ldw	r2,-20(fp)
8112d5b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
8112d5b8:	11282e00 	call	811282e0 <OS_Sched>
        return (OS_ERR_NONE);
8112d5bc:	0005883a 	mov	r2,zero
8112d5c0:	00001606 	br	8112d61c <OSSemPost+0x104>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
8112d5c4:	e0bfff17 	ldw	r2,-4(fp)
8112d5c8:	1080020b 	ldhu	r2,8(r2)
8112d5cc:	10ffffcc 	andi	r3,r2,65535
8112d5d0:	00bfffd4 	movui	r2,65535
8112d5d4:	18800c26 	beq	r3,r2,8112d608 <OSSemPost+0xf0>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
8112d5d8:	e0bfff17 	ldw	r2,-4(fp)
8112d5dc:	1080020b 	ldhu	r2,8(r2)
8112d5e0:	10800044 	addi	r2,r2,1
8112d5e4:	1007883a 	mov	r3,r2
8112d5e8:	e0bfff17 	ldw	r2,-4(fp)
8112d5ec:	10c0020d 	sth	r3,8(r2)
8112d5f0:	e0bffa17 	ldw	r2,-24(fp)
8112d5f4:	e0bffc15 	stw	r2,-16(fp)
8112d5f8:	e0bffc17 	ldw	r2,-16(fp)
8112d5fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
8112d600:	0005883a 	mov	r2,zero
8112d604:	00000506 	br	8112d61c <OSSemPost+0x104>
8112d608:	e0bffa17 	ldw	r2,-24(fp)
8112d60c:	e0bffd15 	stw	r2,-12(fp)
8112d610:	e0bffd17 	ldw	r2,-12(fp)
8112d614:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
8112d618:	00800c84 	movi	r2,50
}
8112d61c:	e037883a 	mov	sp,fp
8112d620:	dfc00117 	ldw	ra,4(sp)
8112d624:	df000017 	ldw	fp,0(sp)
8112d628:	dec00204 	addi	sp,sp,8
8112d62c:	f800283a 	ret

8112d630 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
8112d630:	defff704 	addi	sp,sp,-36
8112d634:	de00012e 	bgeu	sp,et,8112d63c <OSSemQuery+0xc>
8112d638:	003b68fa 	trap	3
8112d63c:	df000815 	stw	fp,32(sp)
8112d640:	df000804 	addi	fp,sp,32
8112d644:	e13ffe15 	stw	r4,-8(fp)
8112d648:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
8112d64c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
8112d650:	e0bffe17 	ldw	r2,-8(fp)
8112d654:	1000021e 	bne	r2,zero,8112d660 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
8112d658:	00800104 	movi	r2,4
8112d65c:	00003606 	br	8112d738 <OSSemQuery+0x108>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
8112d660:	e0bfff17 	ldw	r2,-4(fp)
8112d664:	1000021e 	bne	r2,zero,8112d670 <OSSemQuery+0x40>
        return (OS_ERR_PDATA_NULL);
8112d668:	00800244 	movi	r2,9
8112d66c:	00003206 	br	8112d738 <OSSemQuery+0x108>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
8112d670:	e0bffe17 	ldw	r2,-8(fp)
8112d674:	10800003 	ldbu	r2,0(r2)
8112d678:	10803fcc 	andi	r2,r2,255
8112d67c:	108000e0 	cmpeqi	r2,r2,3
8112d680:	1000021e 	bne	r2,zero,8112d68c <OSSemQuery+0x5c>
        return (OS_ERR_EVENT_TYPE);
8112d684:	00800044 	movi	r2,1
8112d688:	00002b06 	br	8112d738 <OSSemQuery+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d68c:	0005303a 	rdctl	r2,status
8112d690:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d694:	e0fffd17 	ldw	r3,-12(fp)
8112d698:	00bfff84 	movi	r2,-2
8112d69c:	1884703a 	and	r2,r3,r2
8112d6a0:	1001703a 	wrctl	status,r2
  
  return context;
8112d6a4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
8112d6a8:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
8112d6ac:	e0bffe17 	ldw	r2,-8(fp)
8112d6b0:	10c00283 	ldbu	r3,10(r2)
8112d6b4:	e0bfff17 	ldw	r2,-4(fp)
8112d6b8:	10c00205 	stb	r3,8(r2)
    psrc                   = &pevent->OSEventTbl[0];
8112d6bc:	e0bffe17 	ldw	r2,-8(fp)
8112d6c0:	108002c4 	addi	r2,r2,11
8112d6c4:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
8112d6c8:	e0bfff17 	ldw	r2,-4(fp)
8112d6cc:	10800084 	addi	r2,r2,2
8112d6d0:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112d6d4:	e03ffa05 	stb	zero,-24(fp)
8112d6d8:	00000b06 	br	8112d708 <OSSemQuery+0xd8>
        *pdest++ = *psrc++;
8112d6dc:	e0bff917 	ldw	r2,-28(fp)
8112d6e0:	10c00044 	addi	r3,r2,1
8112d6e4:	e0fff915 	stw	r3,-28(fp)
8112d6e8:	e0fff817 	ldw	r3,-32(fp)
8112d6ec:	19000044 	addi	r4,r3,1
8112d6f0:	e13ff815 	stw	r4,-32(fp)
8112d6f4:	18c00003 	ldbu	r3,0(r3)
8112d6f8:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
8112d6fc:	e0bffa03 	ldbu	r2,-24(fp)
8112d700:	10800044 	addi	r2,r2,1
8112d704:	e0bffa05 	stb	r2,-24(fp)
8112d708:	e0bffa03 	ldbu	r2,-24(fp)
8112d70c:	108001b0 	cmpltui	r2,r2,6
8112d710:	103ff21e 	bne	r2,zero,8112d6dc <__reset+0xfb10d6dc>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
8112d714:	e0bffe17 	ldw	r2,-8(fp)
8112d718:	10c0020b 	ldhu	r3,8(r2)
8112d71c:	e0bfff17 	ldw	r2,-4(fp)
8112d720:	10c0000d 	sth	r3,0(r2)
8112d724:	e0bffb17 	ldw	r2,-20(fp)
8112d728:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d72c:	e0bffc17 	ldw	r2,-16(fp)
8112d730:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112d734:	0005883a 	mov	r2,zero
}
8112d738:	e037883a 	mov	sp,fp
8112d73c:	df000017 	ldw	fp,0(sp)
8112d740:	dec00104 	addi	sp,sp,4
8112d744:	f800283a 	ret

8112d748 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
8112d748:	defff904 	addi	sp,sp,-28
8112d74c:	de00012e 	bgeu	sp,et,8112d754 <OSSemSet+0xc>
8112d750:	003b68fa 	trap	3
8112d754:	df000615 	stw	fp,24(sp)
8112d758:	df000604 	addi	fp,sp,24
8112d75c:	e13ffd15 	stw	r4,-12(fp)
8112d760:	2805883a 	mov	r2,r5
8112d764:	e1bfff15 	stw	r6,-4(fp)
8112d768:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112d76c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
8112d770:	e0bfff17 	ldw	r2,-4(fp)
8112d774:	10003126 	beq	r2,zero,8112d83c <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
8112d778:	e0bffd17 	ldw	r2,-12(fp)
8112d77c:	1000041e 	bne	r2,zero,8112d790 <OSSemSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
8112d780:	e0bfff17 	ldw	r2,-4(fp)
8112d784:	00c00104 	movi	r3,4
8112d788:	10c00005 	stb	r3,0(r2)
        return;
8112d78c:	00002c06 	br	8112d840 <OSSemSet+0xf8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
8112d790:	e0bffd17 	ldw	r2,-12(fp)
8112d794:	10800003 	ldbu	r2,0(r2)
8112d798:	10803fcc 	andi	r2,r2,255
8112d79c:	108000e0 	cmpeqi	r2,r2,3
8112d7a0:	1000041e 	bne	r2,zero,8112d7b4 <OSSemSet+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
8112d7a4:	e0bfff17 	ldw	r2,-4(fp)
8112d7a8:	00c00044 	movi	r3,1
8112d7ac:	10c00005 	stb	r3,0(r2)
        return;
8112d7b0:	00002306 	br	8112d840 <OSSemSet+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d7b4:	0005303a 	rdctl	r2,status
8112d7b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d7bc:	e0fffc17 	ldw	r3,-16(fp)
8112d7c0:	00bfff84 	movi	r2,-2
8112d7c4:	1884703a 	and	r2,r3,r2
8112d7c8:	1001703a 	wrctl	status,r2
  
  return context;
8112d7cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112d7d0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
8112d7d4:	e0bfff17 	ldw	r2,-4(fp)
8112d7d8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
8112d7dc:	e0bffd17 	ldw	r2,-12(fp)
8112d7e0:	1080020b 	ldhu	r2,8(r2)
8112d7e4:	10bfffcc 	andi	r2,r2,65535
8112d7e8:	10000426 	beq	r2,zero,8112d7fc <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
8112d7ec:	e0bffd17 	ldw	r2,-12(fp)
8112d7f0:	e0fffe0b 	ldhu	r3,-8(fp)
8112d7f4:	10c0020d 	sth	r3,8(r2)
8112d7f8:	00000b06 	br	8112d828 <OSSemSet+0xe0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
8112d7fc:	e0bffd17 	ldw	r2,-12(fp)
8112d800:	10800283 	ldbu	r2,10(r2)
8112d804:	10803fcc 	andi	r2,r2,255
8112d808:	1000041e 	bne	r2,zero,8112d81c <OSSemSet+0xd4>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
8112d80c:	e0bffd17 	ldw	r2,-12(fp)
8112d810:	e0fffe0b 	ldhu	r3,-8(fp)
8112d814:	10c0020d 	sth	r3,8(r2)
8112d818:	00000306 	br	8112d828 <OSSemSet+0xe0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
8112d81c:	e0bfff17 	ldw	r2,-4(fp)
8112d820:	00c01244 	movi	r3,73
8112d824:	10c00005 	stb	r3,0(r2)
8112d828:	e0bffa17 	ldw	r2,-24(fp)
8112d82c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d830:	e0bffb17 	ldw	r2,-20(fp)
8112d834:	1001703a 	wrctl	status,r2
8112d838:	00000106 	br	8112d840 <OSSemSet+0xf8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
8112d83c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
8112d840:	e037883a 	mov	sp,fp
8112d844:	df000017 	ldw	fp,0(sp)
8112d848:	dec00104 	addi	sp,sp,4
8112d84c:	f800283a 	ret

8112d850 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
8112d850:	defff104 	addi	sp,sp,-60
8112d854:	de00012e 	bgeu	sp,et,8112d85c <OSTaskChangePrio+0xc>
8112d858:	003b68fa 	trap	3
8112d85c:	dfc00e15 	stw	ra,56(sp)
8112d860:	df000d15 	stw	fp,52(sp)
8112d864:	df000d04 	addi	fp,sp,52
8112d868:	2007883a 	mov	r3,r4
8112d86c:	2805883a 	mov	r2,r5
8112d870:	e0fffe05 	stb	r3,-8(fp)
8112d874:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
8112d878:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
8112d87c:	e0bffe03 	ldbu	r2,-8(fp)
8112d880:	10800a30 	cmpltui	r2,r2,40
8112d884:	1000051e 	bne	r2,zero,8112d89c <OSTaskChangePrio+0x4c>
        if (oldprio != OS_PRIO_SELF) {
8112d888:	e0bffe03 	ldbu	r2,-8(fp)
8112d88c:	10803fe0 	cmpeqi	r2,r2,255
8112d890:	1000021e 	bne	r2,zero,8112d89c <OSTaskChangePrio+0x4c>
            return (OS_ERR_PRIO_INVALID);
8112d894:	00800a84 	movi	r2,42
8112d898:	00012606 	br	8112dd34 <OSTaskChangePrio+0x4e4>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
8112d89c:	e0bfff03 	ldbu	r2,-4(fp)
8112d8a0:	10800a30 	cmpltui	r2,r2,40
8112d8a4:	1000021e 	bne	r2,zero,8112d8b0 <OSTaskChangePrio+0x60>
        return (OS_ERR_PRIO_INVALID);
8112d8a8:	00800a84 	movi	r2,42
8112d8ac:	00012106 	br	8112dd34 <OSTaskChangePrio+0x4e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112d8b0:	0005303a 	rdctl	r2,status
8112d8b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112d8b8:	e0fffd17 	ldw	r3,-12(fp)
8112d8bc:	00bfff84 	movi	r2,-2
8112d8c0:	1884703a 	and	r2,r3,r2
8112d8c4:	1001703a 	wrctl	status,r2
  
  return context;
8112d8c8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112d8cc:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
8112d8d0:	e0ffff03 	ldbu	r3,-4(fp)
8112d8d4:	00a04574 	movhi	r2,33045
8112d8d8:	1087c004 	addi	r2,r2,7936
8112d8dc:	18c7883a 	add	r3,r3,r3
8112d8e0:	18c7883a 	add	r3,r3,r3
8112d8e4:	10c5883a 	add	r2,r2,r3
8112d8e8:	10800017 	ldw	r2,0(r2)
8112d8ec:	10000626 	beq	r2,zero,8112d908 <OSTaskChangePrio+0xb8>
8112d8f0:	e0bff517 	ldw	r2,-44(fp)
8112d8f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112d8f8:	e0bff617 	ldw	r2,-40(fp)
8112d8fc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
8112d900:	00800a04 	movi	r2,40
8112d904:	00010b06 	br	8112dd34 <OSTaskChangePrio+0x4e4>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
8112d908:	e0bffe03 	ldbu	r2,-8(fp)
8112d90c:	10803fd8 	cmpnei	r2,r2,255
8112d910:	1000031e 	bne	r2,zero,8112d920 <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
8112d914:	d0a08417 	ldw	r2,-32240(gp)
8112d918:	10800c83 	ldbu	r2,50(r2)
8112d91c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
8112d920:	e0fffe03 	ldbu	r3,-8(fp)
8112d924:	00a04574 	movhi	r2,33045
8112d928:	1087c004 	addi	r2,r2,7936
8112d92c:	18c7883a 	add	r3,r3,r3
8112d930:	18c7883a 	add	r3,r3,r3
8112d934:	10c5883a 	add	r2,r2,r3
8112d938:	10800017 	ldw	r2,0(r2)
8112d93c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
8112d940:	e0bff817 	ldw	r2,-32(fp)
8112d944:	1000061e 	bne	r2,zero,8112d960 <OSTaskChangePrio+0x110>
8112d948:	e0bff517 	ldw	r2,-44(fp)
8112d94c:	e0bff715 	stw	r2,-36(fp)
8112d950:	e0bff717 	ldw	r2,-36(fp)
8112d954:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
8112d958:	00800a44 	movi	r2,41
8112d95c:	0000f506 	br	8112dd34 <OSTaskChangePrio+0x4e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
8112d960:	e0bff817 	ldw	r2,-32(fp)
8112d964:	10800058 	cmpnei	r2,r2,1
8112d968:	1000061e 	bne	r2,zero,8112d984 <OSTaskChangePrio+0x134>
8112d96c:	e0bff517 	ldw	r2,-44(fp)
8112d970:	e0bff915 	stw	r2,-28(fp)
8112d974:	e0bff917 	ldw	r2,-28(fp)
8112d978:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
8112d97c:	008010c4 	movi	r2,67
8112d980:	0000ec06 	br	8112dd34 <OSTaskChangePrio+0x4e4>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
8112d984:	e0bfff03 	ldbu	r2,-4(fp)
8112d988:	1004d0fa 	srli	r2,r2,3
8112d98c:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
8112d990:	e0bfff03 	ldbu	r2,-4(fp)
8112d994:	108001cc 	andi	r2,r2,7
8112d998:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
8112d99c:	e0bffb03 	ldbu	r2,-20(fp)
8112d9a0:	00c00044 	movi	r3,1
8112d9a4:	1884983a 	sll	r2,r3,r2
8112d9a8:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
8112d9ac:	e0bffb43 	ldbu	r2,-19(fp)
8112d9b0:	00c00044 	movi	r3,1
8112d9b4:	1884983a 	sll	r2,r3,r2
8112d9b8:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
8112d9bc:	e0fffe03 	ldbu	r3,-8(fp)
8112d9c0:	00a04574 	movhi	r2,33045
8112d9c4:	1087c004 	addi	r2,r2,7936
8112d9c8:	18c7883a 	add	r3,r3,r3
8112d9cc:	18c7883a 	add	r3,r3,r3
8112d9d0:	10c5883a 	add	r2,r2,r3
8112d9d4:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
8112d9d8:	e0ffff03 	ldbu	r3,-4(fp)
8112d9dc:	00a04574 	movhi	r2,33045
8112d9e0:	1087c004 	addi	r2,r2,7936
8112d9e4:	18c7883a 	add	r3,r3,r3
8112d9e8:	18c7883a 	add	r3,r3,r3
8112d9ec:	10c5883a 	add	r2,r2,r3
8112d9f0:	e0fff817 	ldw	r3,-32(fp)
8112d9f4:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
8112d9f8:	e0bff817 	ldw	r2,-32(fp)
8112d9fc:	10800d03 	ldbu	r2,52(r2)
8112da00:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
8112da04:	e0bff817 	ldw	r2,-32(fp)
8112da08:	10800d83 	ldbu	r2,54(r2)
8112da0c:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
8112da10:	e0bff817 	ldw	r2,-32(fp)
8112da14:	10800d43 	ldbu	r2,53(r2)
8112da18:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
8112da1c:	e0fffc03 	ldbu	r3,-16(fp)
8112da20:	d0a08044 	addi	r2,gp,-32255
8112da24:	1885883a 	add	r2,r3,r2
8112da28:	10c00003 	ldbu	r3,0(r2)
8112da2c:	e0bffc83 	ldbu	r2,-14(fp)
8112da30:	1884703a 	and	r2,r3,r2
8112da34:	10803fcc 	andi	r2,r2,255
8112da38:	10002826 	beq	r2,zero,8112dadc <OSTaskChangePrio+0x28c>
         OSRdyTbl[y_old] &= ~bitx_old;
8112da3c:	e0fffc03 	ldbu	r3,-16(fp)
8112da40:	e13ffc03 	ldbu	r4,-16(fp)
8112da44:	d0a08044 	addi	r2,gp,-32255
8112da48:	2085883a 	add	r2,r4,r2
8112da4c:	10800003 	ldbu	r2,0(r2)
8112da50:	1009883a 	mov	r4,r2
8112da54:	e0bffc83 	ldbu	r2,-14(fp)
8112da58:	0084303a 	nor	r2,zero,r2
8112da5c:	2084703a 	and	r2,r4,r2
8112da60:	1009883a 	mov	r4,r2
8112da64:	d0a08044 	addi	r2,gp,-32255
8112da68:	1885883a 	add	r2,r3,r2
8112da6c:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
8112da70:	e0fffc03 	ldbu	r3,-16(fp)
8112da74:	d0a08044 	addi	r2,gp,-32255
8112da78:	1885883a 	add	r2,r3,r2
8112da7c:	10800003 	ldbu	r2,0(r2)
8112da80:	10803fcc 	andi	r2,r2,255
8112da84:	1000061e 	bne	r2,zero,8112daa0 <OSTaskChangePrio+0x250>
             OSRdyGrp &= ~bity_old;
8112da88:	e0bffc43 	ldbu	r2,-15(fp)
8112da8c:	0084303a 	nor	r2,zero,r2
8112da90:	1007883a 	mov	r3,r2
8112da94:	d0a08003 	ldbu	r2,-32256(gp)
8112da98:	1884703a 	and	r2,r3,r2
8112da9c:	d0a08005 	stb	r2,-32256(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
8112daa0:	d0e08003 	ldbu	r3,-32256(gp)
8112daa4:	e0bffb83 	ldbu	r2,-18(fp)
8112daa8:	1884b03a 	or	r2,r3,r2
8112daac:	d0a08005 	stb	r2,-32256(gp)
         OSRdyTbl[y_new] |= bitx_new;
8112dab0:	e0fffb03 	ldbu	r3,-20(fp)
8112dab4:	e13ffb03 	ldbu	r4,-20(fp)
8112dab8:	d0a08044 	addi	r2,gp,-32255
8112dabc:	2085883a 	add	r2,r4,r2
8112dac0:	11000003 	ldbu	r4,0(r2)
8112dac4:	e0bffbc3 	ldbu	r2,-17(fp)
8112dac8:	2084b03a 	or	r2,r4,r2
8112dacc:	1009883a 	mov	r4,r2
8112dad0:	d0a08044 	addi	r2,gp,-32255
8112dad4:	1885883a 	add	r2,r3,r2
8112dad8:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
8112dadc:	e0bff817 	ldw	r2,-32(fp)
8112dae0:	10800717 	ldw	r2,28(r2)
8112dae4:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
8112dae8:	e0bff317 	ldw	r2,-52(fp)
8112daec:	10003326 	beq	r2,zero,8112dbbc <OSTaskChangePrio+0x36c>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
8112daf0:	e0bffc03 	ldbu	r2,-16(fp)
8112daf4:	e0fffc03 	ldbu	r3,-16(fp)
8112daf8:	e13ff317 	ldw	r4,-52(fp)
8112dafc:	20c7883a 	add	r3,r4,r3
8112db00:	18c002c4 	addi	r3,r3,11
8112db04:	18c00003 	ldbu	r3,0(r3)
8112db08:	1809883a 	mov	r4,r3
8112db0c:	e0fffc83 	ldbu	r3,-14(fp)
8112db10:	00c6303a 	nor	r3,zero,r3
8112db14:	20c6703a 	and	r3,r4,r3
8112db18:	1809883a 	mov	r4,r3
8112db1c:	e0fff317 	ldw	r3,-52(fp)
8112db20:	1885883a 	add	r2,r3,r2
8112db24:	108002c4 	addi	r2,r2,11
8112db28:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
8112db2c:	e0bffc03 	ldbu	r2,-16(fp)
8112db30:	e0fff317 	ldw	r3,-52(fp)
8112db34:	1885883a 	add	r2,r3,r2
8112db38:	108002c4 	addi	r2,r2,11
8112db3c:	10800003 	ldbu	r2,0(r2)
8112db40:	10803fcc 	andi	r2,r2,255
8112db44:	1000091e 	bne	r2,zero,8112db6c <OSTaskChangePrio+0x31c>
            pevent->OSEventGrp    &= ~bity_old;
8112db48:	e0bff317 	ldw	r2,-52(fp)
8112db4c:	10800283 	ldbu	r2,10(r2)
8112db50:	1007883a 	mov	r3,r2
8112db54:	e0bffc43 	ldbu	r2,-15(fp)
8112db58:	0084303a 	nor	r2,zero,r2
8112db5c:	1884703a 	and	r2,r3,r2
8112db60:	1007883a 	mov	r3,r2
8112db64:	e0bff317 	ldw	r2,-52(fp)
8112db68:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
8112db6c:	e0bff317 	ldw	r2,-52(fp)
8112db70:	10c00283 	ldbu	r3,10(r2)
8112db74:	e0bffb83 	ldbu	r2,-18(fp)
8112db78:	1884b03a 	or	r2,r3,r2
8112db7c:	1007883a 	mov	r3,r2
8112db80:	e0bff317 	ldw	r2,-52(fp)
8112db84:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
8112db88:	e0bffb03 	ldbu	r2,-20(fp)
8112db8c:	e0fffb03 	ldbu	r3,-20(fp)
8112db90:	e13ff317 	ldw	r4,-52(fp)
8112db94:	20c7883a 	add	r3,r4,r3
8112db98:	18c002c4 	addi	r3,r3,11
8112db9c:	19000003 	ldbu	r4,0(r3)
8112dba0:	e0fffbc3 	ldbu	r3,-17(fp)
8112dba4:	20c6b03a 	or	r3,r4,r3
8112dba8:	1809883a 	mov	r4,r3
8112dbac:	e0fff317 	ldw	r3,-52(fp)
8112dbb0:	1885883a 	add	r2,r3,r2
8112dbb4:	108002c4 	addi	r2,r2,11
8112dbb8:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
8112dbbc:	e0bff817 	ldw	r2,-32(fp)
8112dbc0:	10800817 	ldw	r2,32(r2)
8112dbc4:	10004226 	beq	r2,zero,8112dcd0 <OSTaskChangePrio+0x480>
        pevents =  ptcb->OSTCBEventMultiPtr;
8112dbc8:	e0bff817 	ldw	r2,-32(fp)
8112dbcc:	10800817 	ldw	r2,32(r2)
8112dbd0:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
8112dbd4:	e0bff417 	ldw	r2,-48(fp)
8112dbd8:	10800017 	ldw	r2,0(r2)
8112dbdc:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
8112dbe0:	00003906 	br	8112dcc8 <OSTaskChangePrio+0x478>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
8112dbe4:	e0bffc03 	ldbu	r2,-16(fp)
8112dbe8:	e0fffc03 	ldbu	r3,-16(fp)
8112dbec:	e13ff317 	ldw	r4,-52(fp)
8112dbf0:	20c7883a 	add	r3,r4,r3
8112dbf4:	18c002c4 	addi	r3,r3,11
8112dbf8:	18c00003 	ldbu	r3,0(r3)
8112dbfc:	1809883a 	mov	r4,r3
8112dc00:	e0fffc83 	ldbu	r3,-14(fp)
8112dc04:	00c6303a 	nor	r3,zero,r3
8112dc08:	20c6703a 	and	r3,r4,r3
8112dc0c:	1809883a 	mov	r4,r3
8112dc10:	e0fff317 	ldw	r3,-52(fp)
8112dc14:	1885883a 	add	r2,r3,r2
8112dc18:	108002c4 	addi	r2,r2,11
8112dc1c:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
8112dc20:	e0bffc03 	ldbu	r2,-16(fp)
8112dc24:	e0fff317 	ldw	r3,-52(fp)
8112dc28:	1885883a 	add	r2,r3,r2
8112dc2c:	108002c4 	addi	r2,r2,11
8112dc30:	10800003 	ldbu	r2,0(r2)
8112dc34:	10803fcc 	andi	r2,r2,255
8112dc38:	1000091e 	bne	r2,zero,8112dc60 <OSTaskChangePrio+0x410>
                pevent->OSEventGrp    &= ~bity_old;
8112dc3c:	e0bff317 	ldw	r2,-52(fp)
8112dc40:	10800283 	ldbu	r2,10(r2)
8112dc44:	1007883a 	mov	r3,r2
8112dc48:	e0bffc43 	ldbu	r2,-15(fp)
8112dc4c:	0084303a 	nor	r2,zero,r2
8112dc50:	1884703a 	and	r2,r3,r2
8112dc54:	1007883a 	mov	r3,r2
8112dc58:	e0bff317 	ldw	r2,-52(fp)
8112dc5c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
8112dc60:	e0bff317 	ldw	r2,-52(fp)
8112dc64:	10c00283 	ldbu	r3,10(r2)
8112dc68:	e0bffb83 	ldbu	r2,-18(fp)
8112dc6c:	1884b03a 	or	r2,r3,r2
8112dc70:	1007883a 	mov	r3,r2
8112dc74:	e0bff317 	ldw	r2,-52(fp)
8112dc78:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
8112dc7c:	e0bffb03 	ldbu	r2,-20(fp)
8112dc80:	e0fffb03 	ldbu	r3,-20(fp)
8112dc84:	e13ff317 	ldw	r4,-52(fp)
8112dc88:	20c7883a 	add	r3,r4,r3
8112dc8c:	18c002c4 	addi	r3,r3,11
8112dc90:	19000003 	ldbu	r4,0(r3)
8112dc94:	e0fffbc3 	ldbu	r3,-17(fp)
8112dc98:	20c6b03a 	or	r3,r4,r3
8112dc9c:	1809883a 	mov	r4,r3
8112dca0:	e0fff317 	ldw	r3,-52(fp)
8112dca4:	1885883a 	add	r2,r3,r2
8112dca8:	108002c4 	addi	r2,r2,11
8112dcac:	11000005 	stb	r4,0(r2)
            pevents++;
8112dcb0:	e0bff417 	ldw	r2,-48(fp)
8112dcb4:	10800104 	addi	r2,r2,4
8112dcb8:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
8112dcbc:	e0bff417 	ldw	r2,-48(fp)
8112dcc0:	10800017 	ldw	r2,0(r2)
8112dcc4:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
8112dcc8:	e0bff317 	ldw	r2,-52(fp)
8112dccc:	103fc51e 	bne	r2,zero,8112dbe4 <__reset+0xfb10dbe4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
8112dcd0:	e0bff817 	ldw	r2,-32(fp)
8112dcd4:	e0ffff03 	ldbu	r3,-4(fp)
8112dcd8:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
8112dcdc:	e0bff817 	ldw	r2,-32(fp)
8112dce0:	e0fffb03 	ldbu	r3,-20(fp)
8112dce4:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
8112dce8:	e0bff817 	ldw	r2,-32(fp)
8112dcec:	e0fffb43 	ldbu	r3,-19(fp)
8112dcf0:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
8112dcf4:	e0bff817 	ldw	r2,-32(fp)
8112dcf8:	e0fffb83 	ldbu	r3,-18(fp)
8112dcfc:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
8112dd00:	e0bff817 	ldw	r2,-32(fp)
8112dd04:	e0fffbc3 	ldbu	r3,-17(fp)
8112dd08:	10c00d45 	stb	r3,53(r2)
8112dd0c:	e0bff517 	ldw	r2,-44(fp)
8112dd10:	e0bffa15 	stw	r2,-24(fp)
8112dd14:	e0bffa17 	ldw	r2,-24(fp)
8112dd18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112dd1c:	d0a07303 	ldbu	r2,-32308(gp)
8112dd20:	10803fcc 	andi	r2,r2,255
8112dd24:	10800058 	cmpnei	r2,r2,1
8112dd28:	1000011e 	bne	r2,zero,8112dd30 <OSTaskChangePrio+0x4e0>
        OS_Sched();                                         /* Find new highest priority task          */
8112dd2c:	11282e00 	call	811282e0 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112dd30:	0005883a 	mov	r2,zero
}
8112dd34:	e037883a 	mov	sp,fp
8112dd38:	dfc00117 	ldw	ra,4(sp)
8112dd3c:	df000017 	ldw	fp,0(sp)
8112dd40:	dec00204 	addi	sp,sp,8
8112dd44:	f800283a 	ret

8112dd48 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
8112dd48:	deffee04 	addi	sp,sp,-72
8112dd4c:	de00012e 	bgeu	sp,et,8112dd54 <OSTaskCreate+0xc>
8112dd50:	003b68fa 	trap	3
8112dd54:	dfc01115 	stw	ra,68(sp)
8112dd58:	df001015 	stw	fp,64(sp)
8112dd5c:	df001004 	addi	fp,sp,64
8112dd60:	e13ffc15 	stw	r4,-16(fp)
8112dd64:	e17ffd15 	stw	r5,-12(fp)
8112dd68:	e1bffe15 	stw	r6,-8(fp)
8112dd6c:	3805883a 	mov	r2,r7
8112dd70:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112dd74:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112dd78:	e0bfff03 	ldbu	r2,-4(fp)
8112dd7c:	10800a70 	cmpltui	r2,r2,41
8112dd80:	1000021e 	bne	r2,zero,8112dd8c <OSTaskCreate+0x44>
        return (OS_ERR_PRIO_INVALID);
8112dd84:	00800a84 	movi	r2,42
8112dd88:	00005706 	br	8112dee8 <OSTaskCreate+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112dd8c:	0005303a 	rdctl	r2,status
8112dd90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112dd94:	e0fffb17 	ldw	r3,-20(fp)
8112dd98:	00bfff84 	movi	r2,-2
8112dd9c:	1884703a 	and	r2,r3,r2
8112dda0:	1001703a 	wrctl	status,r2
  
  return context;
8112dda4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112dda8:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112ddac:	d0a08303 	ldbu	r2,-32244(gp)
8112ddb0:	10803fcc 	andi	r2,r2,255
8112ddb4:	10000626 	beq	r2,zero,8112ddd0 <OSTaskCreate+0x88>
8112ddb8:	e0bff317 	ldw	r2,-52(fp)
8112ddbc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ddc0:	e0bff417 	ldw	r2,-48(fp)
8112ddc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112ddc8:	00800f04 	movi	r2,60
8112ddcc:	00004606 	br	8112dee8 <OSTaskCreate+0x1a0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112ddd0:	e0ffff03 	ldbu	r3,-4(fp)
8112ddd4:	00a04574 	movhi	r2,33045
8112ddd8:	1087c004 	addi	r2,r2,7936
8112dddc:	18c7883a 	add	r3,r3,r3
8112dde0:	18c7883a 	add	r3,r3,r3
8112dde4:	10c5883a 	add	r2,r2,r3
8112dde8:	10800017 	ldw	r2,0(r2)
8112ddec:	1000391e 	bne	r2,zero,8112ded4 <OSTaskCreate+0x18c>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112ddf0:	e0ffff03 	ldbu	r3,-4(fp)
8112ddf4:	00a04574 	movhi	r2,33045
8112ddf8:	1087c004 	addi	r2,r2,7936
8112ddfc:	18c7883a 	add	r3,r3,r3
8112de00:	18c7883a 	add	r3,r3,r3
8112de04:	10c5883a 	add	r2,r2,r3
8112de08:	00c00044 	movi	r3,1
8112de0c:	10c00015 	stw	r3,0(r2)
8112de10:	e0bff317 	ldw	r2,-52(fp)
8112de14:	e0bff515 	stw	r2,-44(fp)
8112de18:	e0bff517 	ldw	r2,-44(fp)
8112de1c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
8112de20:	000f883a 	mov	r7,zero
8112de24:	e1bffe17 	ldw	r6,-8(fp)
8112de28:	e17ffd17 	ldw	r5,-12(fp)
8112de2c:	e13ffc17 	ldw	r4,-16(fp)
8112de30:	113942c0 	call	8113942c <OSTaskStkInit>
8112de34:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
8112de38:	e0bfff03 	ldbu	r2,-4(fp)
8112de3c:	d8000215 	stw	zero,8(sp)
8112de40:	d8000115 	stw	zero,4(sp)
8112de44:	d8000015 	stw	zero,0(sp)
8112de48:	000f883a 	mov	r7,zero
8112de4c:	000d883a 	mov	r6,zero
8112de50:	e17ff717 	ldw	r5,-36(fp)
8112de54:	1009883a 	mov	r4,r2
8112de58:	11287280 	call	81128728 <OS_TCBInit>
8112de5c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
8112de60:	e0bff803 	ldbu	r2,-32(fp)
8112de64:	1000061e 	bne	r2,zero,8112de80 <OSTaskCreate+0x138>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
8112de68:	d0a07303 	ldbu	r2,-32308(gp)
8112de6c:	10803fcc 	andi	r2,r2,255
8112de70:	10800058 	cmpnei	r2,r2,1
8112de74:	1000151e 	bne	r2,zero,8112decc <OSTaskCreate+0x184>
                OS_Sched();
8112de78:	11282e00 	call	811282e0 <OS_Sched>
8112de7c:	00001306 	br	8112decc <OSTaskCreate+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112de80:	0005303a 	rdctl	r2,status
8112de84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112de88:	e0fffa17 	ldw	r3,-24(fp)
8112de8c:	00bfff84 	movi	r2,-2
8112de90:	1884703a 	and	r2,r3,r2
8112de94:	1001703a 	wrctl	status,r2
  
  return context;
8112de98:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112de9c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
8112dea0:	e0ffff03 	ldbu	r3,-4(fp)
8112dea4:	00a04574 	movhi	r2,33045
8112dea8:	1087c004 	addi	r2,r2,7936
8112deac:	18c7883a 	add	r3,r3,r3
8112deb0:	18c7883a 	add	r3,r3,r3
8112deb4:	10c5883a 	add	r2,r2,r3
8112deb8:	10000015 	stw	zero,0(r2)
8112debc:	e0bff317 	ldw	r2,-52(fp)
8112dec0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112dec4:	e0bff617 	ldw	r2,-40(fp)
8112dec8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112decc:	e0bff803 	ldbu	r2,-32(fp)
8112ded0:	00000506 	br	8112dee8 <OSTaskCreate+0x1a0>
8112ded4:	e0bff317 	ldw	r2,-52(fp)
8112ded8:	e0bff915 	stw	r2,-28(fp)
8112dedc:	e0bff917 	ldw	r2,-28(fp)
8112dee0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112dee4:	00800a04 	movi	r2,40
}
8112dee8:	e037883a 	mov	sp,fp
8112deec:	dfc00117 	ldw	ra,4(sp)
8112def0:	df000017 	ldw	fp,0(sp)
8112def4:	dec00204 	addi	sp,sp,8
8112def8:	f800283a 	ret

8112defc <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
8112defc:	deffec04 	addi	sp,sp,-80
8112df00:	de00012e 	bgeu	sp,et,8112df08 <OSTaskCreateExt+0xc>
8112df04:	003b68fa 	trap	3
8112df08:	dfc01315 	stw	ra,76(sp)
8112df0c:	df001215 	stw	fp,72(sp)
8112df10:	df001204 	addi	fp,sp,72
8112df14:	e13ffa15 	stw	r4,-24(fp)
8112df18:	e17ffb15 	stw	r5,-20(fp)
8112df1c:	e1bffc15 	stw	r6,-16(fp)
8112df20:	3809883a 	mov	r4,r7
8112df24:	e0c00217 	ldw	r3,8(fp)
8112df28:	e0800617 	ldw	r2,24(fp)
8112df2c:	e13ffd05 	stb	r4,-12(fp)
8112df30:	e0fffe0d 	sth	r3,-8(fp)
8112df34:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
8112df38:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
8112df3c:	e0bffd03 	ldbu	r2,-12(fp)
8112df40:	10800a70 	cmpltui	r2,r2,41
8112df44:	1000021e 	bne	r2,zero,8112df50 <OSTaskCreateExt+0x54>
        return (OS_ERR_PRIO_INVALID);
8112df48:	00800a84 	movi	r2,42
8112df4c:	00006106 	br	8112e0d4 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112df50:	0005303a 	rdctl	r2,status
8112df54:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112df58:	e0fff917 	ldw	r3,-28(fp)
8112df5c:	00bfff84 	movi	r2,-2
8112df60:	1884703a 	and	r2,r3,r2
8112df64:	1001703a 	wrctl	status,r2
  
  return context;
8112df68:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112df6c:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
8112df70:	d0a08303 	ldbu	r2,-32244(gp)
8112df74:	10803fcc 	andi	r2,r2,255
8112df78:	10000626 	beq	r2,zero,8112df94 <OSTaskCreateExt+0x98>
8112df7c:	e0bff117 	ldw	r2,-60(fp)
8112df80:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112df84:	e0bff217 	ldw	r2,-56(fp)
8112df88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
8112df8c:	00800f04 	movi	r2,60
8112df90:	00005006 	br	8112e0d4 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
8112df94:	e0fffd03 	ldbu	r3,-12(fp)
8112df98:	00a04574 	movhi	r2,33045
8112df9c:	1087c004 	addi	r2,r2,7936
8112dfa0:	18c7883a 	add	r3,r3,r3
8112dfa4:	18c7883a 	add	r3,r3,r3
8112dfa8:	10c5883a 	add	r2,r2,r3
8112dfac:	10800017 	ldw	r2,0(r2)
8112dfb0:	1000431e 	bne	r2,zero,8112e0c0 <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
8112dfb4:	e0fffd03 	ldbu	r3,-12(fp)
8112dfb8:	00a04574 	movhi	r2,33045
8112dfbc:	1087c004 	addi	r2,r2,7936
8112dfc0:	18c7883a 	add	r3,r3,r3
8112dfc4:	18c7883a 	add	r3,r3,r3
8112dfc8:	10c5883a 	add	r2,r2,r3
8112dfcc:	00c00044 	movi	r3,1
8112dfd0:	10c00015 	stw	r3,0(r2)
8112dfd4:	e0bff117 	ldw	r2,-60(fp)
8112dfd8:	e0bff315 	stw	r2,-52(fp)
8112dfdc:	e0bff317 	ldw	r2,-52(fp)
8112dfe0:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
8112dfe4:	e0bfff0b 	ldhu	r2,-4(fp)
8112dfe8:	100d883a 	mov	r6,r2
8112dfec:	e1400417 	ldw	r5,16(fp)
8112dff0:	e1000317 	ldw	r4,12(fp)
8112dff4:	112efa40 	call	8112efa4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
8112dff8:	e0bfff0b 	ldhu	r2,-4(fp)
8112dffc:	100f883a 	mov	r7,r2
8112e000:	e1bffc17 	ldw	r6,-16(fp)
8112e004:	e17ffb17 	ldw	r5,-20(fp)
8112e008:	e13ffa17 	ldw	r4,-24(fp)
8112e00c:	113942c0 	call	8113942c <OSTaskStkInit>
8112e010:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
8112e014:	e0fffd03 	ldbu	r3,-12(fp)
8112e018:	e13ffe0b 	ldhu	r4,-8(fp)
8112e01c:	e0bfff0b 	ldhu	r2,-4(fp)
8112e020:	d8800215 	stw	r2,8(sp)
8112e024:	e0800517 	ldw	r2,20(fp)
8112e028:	d8800115 	stw	r2,4(sp)
8112e02c:	e0800417 	ldw	r2,16(fp)
8112e030:	d8800015 	stw	r2,0(sp)
8112e034:	200f883a 	mov	r7,r4
8112e038:	e1800317 	ldw	r6,12(fp)
8112e03c:	e17ff517 	ldw	r5,-44(fp)
8112e040:	1809883a 	mov	r4,r3
8112e044:	11287280 	call	81128728 <OS_TCBInit>
8112e048:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
8112e04c:	e0bff603 	ldbu	r2,-40(fp)
8112e050:	1000061e 	bne	r2,zero,8112e06c <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
8112e054:	d0a07303 	ldbu	r2,-32308(gp)
8112e058:	10803fcc 	andi	r2,r2,255
8112e05c:	10800058 	cmpnei	r2,r2,1
8112e060:	1000151e 	bne	r2,zero,8112e0b8 <OSTaskCreateExt+0x1bc>
                OS_Sched();
8112e064:	11282e00 	call	811282e0 <OS_Sched>
8112e068:	00001306 	br	8112e0b8 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e06c:	0005303a 	rdctl	r2,status
8112e070:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e074:	e0fff817 	ldw	r3,-32(fp)
8112e078:	00bfff84 	movi	r2,-2
8112e07c:	1884703a 	and	r2,r3,r2
8112e080:	1001703a 	wrctl	status,r2
  
  return context;
8112e084:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
8112e088:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
8112e08c:	e0fffd03 	ldbu	r3,-12(fp)
8112e090:	00a04574 	movhi	r2,33045
8112e094:	1087c004 	addi	r2,r2,7936
8112e098:	18c7883a 	add	r3,r3,r3
8112e09c:	18c7883a 	add	r3,r3,r3
8112e0a0:	10c5883a 	add	r2,r2,r3
8112e0a4:	10000015 	stw	zero,0(r2)
8112e0a8:	e0bff117 	ldw	r2,-60(fp)
8112e0ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e0b0:	e0bff417 	ldw	r2,-48(fp)
8112e0b4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
8112e0b8:	e0bff603 	ldbu	r2,-40(fp)
8112e0bc:	00000506 	br	8112e0d4 <OSTaskCreateExt+0x1d8>
8112e0c0:	e0bff117 	ldw	r2,-60(fp)
8112e0c4:	e0bff715 	stw	r2,-36(fp)
8112e0c8:	e0bff717 	ldw	r2,-36(fp)
8112e0cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
8112e0d0:	00800a04 	movi	r2,40
}
8112e0d4:	e037883a 	mov	sp,fp
8112e0d8:	dfc00117 	ldw	ra,4(sp)
8112e0dc:	df000017 	ldw	fp,0(sp)
8112e0e0:	dec00204 	addi	sp,sp,8
8112e0e4:	f800283a 	ret

8112e0e8 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
8112e0e8:	defff404 	addi	sp,sp,-48
8112e0ec:	de00012e 	bgeu	sp,et,8112e0f4 <OSTaskDel+0xc>
8112e0f0:	003b68fa 	trap	3
8112e0f4:	dfc00b15 	stw	ra,44(sp)
8112e0f8:	df000a15 	stw	fp,40(sp)
8112e0fc:	df000a04 	addi	fp,sp,40
8112e100:	2005883a 	mov	r2,r4
8112e104:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
8112e108:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
8112e10c:	d0a08303 	ldbu	r2,-32244(gp)
8112e110:	10803fcc 	andi	r2,r2,255
8112e114:	10000226 	beq	r2,zero,8112e120 <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
8112e118:	00801004 	movi	r2,64
8112e11c:	0000c006 	br	8112e420 <OSTaskDel+0x338>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
8112e120:	e0bfff03 	ldbu	r2,-4(fp)
8112e124:	10800a18 	cmpnei	r2,r2,40
8112e128:	1000021e 	bne	r2,zero,8112e134 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
8112e12c:	00800f84 	movi	r2,62
8112e130:	0000bb06 	br	8112e420 <OSTaskDel+0x338>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
8112e134:	e0bfff03 	ldbu	r2,-4(fp)
8112e138:	10800a30 	cmpltui	r2,r2,40
8112e13c:	1000051e 	bne	r2,zero,8112e154 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
8112e140:	e0bfff03 	ldbu	r2,-4(fp)
8112e144:	10803fe0 	cmpeqi	r2,r2,255
8112e148:	1000021e 	bne	r2,zero,8112e154 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
8112e14c:	00800a84 	movi	r2,42
8112e150:	0000b306 	br	8112e420 <OSTaskDel+0x338>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e154:	0005303a 	rdctl	r2,status
8112e158:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e15c:	e0fffe17 	ldw	r3,-8(fp)
8112e160:	00bfff84 	movi	r2,-2
8112e164:	1884703a 	and	r2,r3,r2
8112e168:	1001703a 	wrctl	status,r2
  
  return context;
8112e16c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
8112e170:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
8112e174:	e0bfff03 	ldbu	r2,-4(fp)
8112e178:	10803fd8 	cmpnei	r2,r2,255
8112e17c:	1000031e 	bne	r2,zero,8112e18c <OSTaskDel+0xa4>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
8112e180:	d0a08417 	ldw	r2,-32240(gp)
8112e184:	10800c83 	ldbu	r2,50(r2)
8112e188:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112e18c:	e0ffff03 	ldbu	r3,-4(fp)
8112e190:	00a04574 	movhi	r2,33045
8112e194:	1087c004 	addi	r2,r2,7936
8112e198:	18c7883a 	add	r3,r3,r3
8112e19c:	18c7883a 	add	r3,r3,r3
8112e1a0:	10c5883a 	add	r2,r2,r3
8112e1a4:	10800017 	ldw	r2,0(r2)
8112e1a8:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
8112e1ac:	e0bff817 	ldw	r2,-32(fp)
8112e1b0:	1000061e 	bne	r2,zero,8112e1cc <OSTaskDel+0xe4>
8112e1b4:	e0bff617 	ldw	r2,-40(fp)
8112e1b8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e1bc:	e0bff717 	ldw	r2,-36(fp)
8112e1c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112e1c4:	008010c4 	movi	r2,67
8112e1c8:	00009506 	br	8112e420 <OSTaskDel+0x338>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
8112e1cc:	e0bff817 	ldw	r2,-32(fp)
8112e1d0:	10800058 	cmpnei	r2,r2,1
8112e1d4:	1000061e 	bne	r2,zero,8112e1f0 <OSTaskDel+0x108>
8112e1d8:	e0bff617 	ldw	r2,-40(fp)
8112e1dc:	e0bff915 	stw	r2,-28(fp)
8112e1e0:	e0bff917 	ldw	r2,-28(fp)
8112e1e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112e1e8:	00800f44 	movi	r2,61
8112e1ec:	00008c06 	br	8112e420 <OSTaskDel+0x338>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
8112e1f0:	e0bff817 	ldw	r2,-32(fp)
8112e1f4:	10800d03 	ldbu	r2,52(r2)
8112e1f8:	10c03fcc 	andi	r3,r2,255
8112e1fc:	e0bff817 	ldw	r2,-32(fp)
8112e200:	10800d03 	ldbu	r2,52(r2)
8112e204:	11003fcc 	andi	r4,r2,255
8112e208:	d0a08044 	addi	r2,gp,-32255
8112e20c:	2085883a 	add	r2,r4,r2
8112e210:	10800003 	ldbu	r2,0(r2)
8112e214:	1009883a 	mov	r4,r2
8112e218:	e0bff817 	ldw	r2,-32(fp)
8112e21c:	10800d43 	ldbu	r2,53(r2)
8112e220:	0084303a 	nor	r2,zero,r2
8112e224:	2084703a 	and	r2,r4,r2
8112e228:	1009883a 	mov	r4,r2
8112e22c:	d0a08044 	addi	r2,gp,-32255
8112e230:	1885883a 	add	r2,r3,r2
8112e234:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
8112e238:	e0bff817 	ldw	r2,-32(fp)
8112e23c:	10800d03 	ldbu	r2,52(r2)
8112e240:	10c03fcc 	andi	r3,r2,255
8112e244:	d0a08044 	addi	r2,gp,-32255
8112e248:	1885883a 	add	r2,r3,r2
8112e24c:	10800003 	ldbu	r2,0(r2)
8112e250:	10803fcc 	andi	r2,r2,255
8112e254:	1000071e 	bne	r2,zero,8112e274 <OSTaskDel+0x18c>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
8112e258:	e0bff817 	ldw	r2,-32(fp)
8112e25c:	10800d83 	ldbu	r2,54(r2)
8112e260:	0084303a 	nor	r2,zero,r2
8112e264:	1007883a 	mov	r3,r2
8112e268:	d0a08003 	ldbu	r2,-32256(gp)
8112e26c:	1884703a 	and	r2,r3,r2
8112e270:	d0a08005 	stb	r2,-32256(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
8112e274:	e0bff817 	ldw	r2,-32(fp)
8112e278:	10800717 	ldw	r2,28(r2)
8112e27c:	10000526 	beq	r2,zero,8112e294 <OSTaskDel+0x1ac>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
8112e280:	e0bff817 	ldw	r2,-32(fp)
8112e284:	10800717 	ldw	r2,28(r2)
8112e288:	100b883a 	mov	r5,r2
8112e28c:	e13ff817 	ldw	r4,-32(fp)
8112e290:	1127c340 	call	81127c34 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
8112e294:	e0bff817 	ldw	r2,-32(fp)
8112e298:	10800817 	ldw	r2,32(r2)
8112e29c:	10000526 	beq	r2,zero,8112e2b4 <OSTaskDel+0x1cc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
8112e2a0:	e0bff817 	ldw	r2,-32(fp)
8112e2a4:	10800817 	ldw	r2,32(r2)
8112e2a8:	100b883a 	mov	r5,r2
8112e2ac:	e13ff817 	ldw	r4,-32(fp)
8112e2b0:	1127cf40 	call	81127cf4 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
8112e2b4:	e0bff817 	ldw	r2,-32(fp)
8112e2b8:	10800a17 	ldw	r2,40(r2)
8112e2bc:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
8112e2c0:	e0bffb17 	ldw	r2,-20(fp)
8112e2c4:	10000226 	beq	r2,zero,8112e2d0 <OSTaskDel+0x1e8>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
8112e2c8:	e13ffb17 	ldw	r4,-20(fp)
8112e2cc:	112a2cc0 	call	8112a2cc <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
8112e2d0:	e0bff817 	ldw	r2,-32(fp)
8112e2d4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
8112e2d8:	e0bff817 	ldw	r2,-32(fp)
8112e2dc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
8112e2e0:	e0bff817 	ldw	r2,-32(fp)
8112e2e4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
8112e2e8:	d0a07103 	ldbu	r2,-32316(gp)
8112e2ec:	10803fcc 	andi	r2,r2,255
8112e2f0:	10803fe0 	cmpeqi	r2,r2,255
8112e2f4:	1000031e 	bne	r2,zero,8112e304 <OSTaskDel+0x21c>
        OSLockNesting++;
8112e2f8:	d0a07103 	ldbu	r2,-32316(gp)
8112e2fc:	10800044 	addi	r2,r2,1
8112e300:	d0a07105 	stb	r2,-32316(gp)
8112e304:	e0bff617 	ldw	r2,-40(fp)
8112e308:	e0bffd15 	stw	r2,-12(fp)
8112e30c:	e0bffd17 	ldw	r2,-12(fp)
8112e310:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
8112e314:	11277fc0 	call	811277fc <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e318:	0005303a 	rdctl	r2,status
8112e31c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e320:	e0fffa17 	ldw	r3,-24(fp)
8112e324:	00bfff84 	movi	r2,-2
8112e328:	1884703a 	and	r2,r3,r2
8112e32c:	1001703a 	wrctl	status,r2
  
  return context;
8112e330:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
8112e334:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
8112e338:	d0a07103 	ldbu	r2,-32316(gp)
8112e33c:	10803fcc 	andi	r2,r2,255
8112e340:	10000326 	beq	r2,zero,8112e350 <OSTaskDel+0x268>
        OSLockNesting--;
8112e344:	d0a07103 	ldbu	r2,-32316(gp)
8112e348:	10bfffc4 	addi	r2,r2,-1
8112e34c:	d0a07105 	stb	r2,-32316(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
8112e350:	e13ff817 	ldw	r4,-32(fp)
8112e354:	11395bc0 	call	811395bc <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
8112e358:	d0a07c43 	ldbu	r2,-32271(gp)
8112e35c:	10bfffc4 	addi	r2,r2,-1
8112e360:	d0a07c45 	stb	r2,-32271(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
8112e364:	e0ffff03 	ldbu	r3,-4(fp)
8112e368:	00a04574 	movhi	r2,33045
8112e36c:	1087c004 	addi	r2,r2,7936
8112e370:	18c7883a 	add	r3,r3,r3
8112e374:	18c7883a 	add	r3,r3,r3
8112e378:	10c5883a 	add	r2,r2,r3
8112e37c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
8112e380:	e0bff817 	ldw	r2,-32(fp)
8112e384:	10800617 	ldw	r2,24(r2)
8112e388:	1000071e 	bne	r2,zero,8112e3a8 <OSTaskDel+0x2c0>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
8112e38c:	e0bff817 	ldw	r2,-32(fp)
8112e390:	10800517 	ldw	r2,20(r2)
8112e394:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
8112e398:	e0bff817 	ldw	r2,-32(fp)
8112e39c:	10800517 	ldw	r2,20(r2)
8112e3a0:	d0a07615 	stw	r2,-32296(gp)
8112e3a4:	00000a06 	br	8112e3d0 <OSTaskDel+0x2e8>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
8112e3a8:	e0bff817 	ldw	r2,-32(fp)
8112e3ac:	10800617 	ldw	r2,24(r2)
8112e3b0:	e0fff817 	ldw	r3,-32(fp)
8112e3b4:	18c00517 	ldw	r3,20(r3)
8112e3b8:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
8112e3bc:	e0bff817 	ldw	r2,-32(fp)
8112e3c0:	10800517 	ldw	r2,20(r2)
8112e3c4:	e0fff817 	ldw	r3,-32(fp)
8112e3c8:	18c00617 	ldw	r3,24(r3)
8112e3cc:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
8112e3d0:	d0e07b17 	ldw	r3,-32276(gp)
8112e3d4:	e0bff817 	ldw	r2,-32(fp)
8112e3d8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
8112e3dc:	e0bff817 	ldw	r2,-32(fp)
8112e3e0:	d0a07b15 	stw	r2,-32276(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
8112e3e4:	e0bff817 	ldw	r2,-32(fp)
8112e3e8:	00c00fc4 	movi	r3,63
8112e3ec:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
8112e3f0:	e0bff817 	ldw	r2,-32(fp)
8112e3f4:	10001345 	stb	zero,77(r2)
8112e3f8:	e0bff617 	ldw	r2,-40(fp)
8112e3fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e400:	e0bffc17 	ldw	r2,-16(fp)
8112e404:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
8112e408:	d0a07303 	ldbu	r2,-32308(gp)
8112e40c:	10803fcc 	andi	r2,r2,255
8112e410:	10800058 	cmpnei	r2,r2,1
8112e414:	1000011e 	bne	r2,zero,8112e41c <OSTaskDel+0x334>
        OS_Sched();                                     /* Find new highest priority task              */
8112e418:	11282e00 	call	811282e0 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112e41c:	0005883a 	mov	r2,zero
}
8112e420:	e037883a 	mov	sp,fp
8112e424:	dfc00117 	ldw	ra,4(sp)
8112e428:	df000017 	ldw	fp,0(sp)
8112e42c:	dec00204 	addi	sp,sp,8
8112e430:	f800283a 	ret

8112e434 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
8112e434:	defff504 	addi	sp,sp,-44
8112e438:	de00012e 	bgeu	sp,et,8112e440 <OSTaskDelReq+0xc>
8112e43c:	003b68fa 	trap	3
8112e440:	df000a15 	stw	fp,40(sp)
8112e444:	df000a04 	addi	fp,sp,40
8112e448:	2005883a 	mov	r2,r4
8112e44c:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112e450:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
8112e454:	e0bfff03 	ldbu	r2,-4(fp)
8112e458:	10800a18 	cmpnei	r2,r2,40
8112e45c:	1000021e 	bne	r2,zero,8112e468 <OSTaskDelReq+0x34>
        return (OS_ERR_TASK_DEL_IDLE);
8112e460:	00800f84 	movi	r2,62
8112e464:	00004506 	br	8112e57c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112e468:	e0bfff03 	ldbu	r2,-4(fp)
8112e46c:	10800a30 	cmpltui	r2,r2,40
8112e470:	1000051e 	bne	r2,zero,8112e488 <OSTaskDelReq+0x54>
        if (prio != OS_PRIO_SELF) {
8112e474:	e0bfff03 	ldbu	r2,-4(fp)
8112e478:	10803fe0 	cmpeqi	r2,r2,255
8112e47c:	1000021e 	bne	r2,zero,8112e488 <OSTaskDelReq+0x54>
            return (OS_ERR_PRIO_INVALID);
8112e480:	00800a84 	movi	r2,42
8112e484:	00003d06 	br	8112e57c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
8112e488:	e0bfff03 	ldbu	r2,-4(fp)
8112e48c:	10803fd8 	cmpnei	r2,r2,255
8112e490:	1000111e 	bne	r2,zero,8112e4d8 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e494:	0005303a 	rdctl	r2,status
8112e498:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e49c:	e0fff917 	ldw	r3,-28(fp)
8112e4a0:	00bfff84 	movi	r2,-2
8112e4a4:	1884703a 	and	r2,r3,r2
8112e4a8:	1001703a 	wrctl	status,r2
  
  return context;
8112e4ac:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
8112e4b0:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
8112e4b4:	d0a08417 	ldw	r2,-32240(gp)
8112e4b8:	10800dc3 	ldbu	r2,55(r2)
8112e4bc:	e0bff805 	stb	r2,-32(fp)
8112e4c0:	e0bff617 	ldw	r2,-40(fp)
8112e4c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e4c8:	e0bffe17 	ldw	r2,-8(fp)
8112e4cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
8112e4d0:	e0bff803 	ldbu	r2,-32(fp)
8112e4d4:	00002906 	br	8112e57c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e4d8:	0005303a 	rdctl	r2,status
8112e4dc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e4e0:	e0fff717 	ldw	r3,-36(fp)
8112e4e4:	00bfff84 	movi	r2,-2
8112e4e8:	1884703a 	and	r2,r3,r2
8112e4ec:	1001703a 	wrctl	status,r2
  
  return context;
8112e4f0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
8112e4f4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112e4f8:	e0ffff03 	ldbu	r3,-4(fp)
8112e4fc:	00a04574 	movhi	r2,33045
8112e500:	1087c004 	addi	r2,r2,7936
8112e504:	18c7883a 	add	r3,r3,r3
8112e508:	18c7883a 	add	r3,r3,r3
8112e50c:	10c5883a 	add	r2,r2,r3
8112e510:	10800017 	ldw	r2,0(r2)
8112e514:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
8112e518:	e0bffb17 	ldw	r2,-20(fp)
8112e51c:	1000061e 	bne	r2,zero,8112e538 <OSTaskDelReq+0x104>
8112e520:	e0bff617 	ldw	r2,-40(fp)
8112e524:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e528:	e0bffa17 	ldw	r2,-24(fp)
8112e52c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
8112e530:	008010c4 	movi	r2,67
8112e534:	00001106 	br	8112e57c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
8112e538:	e0bffb17 	ldw	r2,-20(fp)
8112e53c:	10800058 	cmpnei	r2,r2,1
8112e540:	1000061e 	bne	r2,zero,8112e55c <OSTaskDelReq+0x128>
8112e544:	e0bff617 	ldw	r2,-40(fp)
8112e548:	e0bffc15 	stw	r2,-16(fp)
8112e54c:	e0bffc17 	ldw	r2,-16(fp)
8112e550:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
8112e554:	00800f44 	movi	r2,61
8112e558:	00000806 	br	8112e57c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
8112e55c:	e0bffb17 	ldw	r2,-20(fp)
8112e560:	00c00fc4 	movi	r3,63
8112e564:	10c00dc5 	stb	r3,55(r2)
8112e568:	e0bff617 	ldw	r2,-40(fp)
8112e56c:	e0bffd15 	stw	r2,-12(fp)
8112e570:	e0bffd17 	ldw	r2,-12(fp)
8112e574:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112e578:	0005883a 	mov	r2,zero
}
8112e57c:	e037883a 	mov	sp,fp
8112e580:	df000017 	ldw	fp,0(sp)
8112e584:	dec00104 	addi	sp,sp,4
8112e588:	f800283a 	ret

8112e58c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112e58c:	defff404 	addi	sp,sp,-48
8112e590:	de00012e 	bgeu	sp,et,8112e598 <OSTaskNameGet+0xc>
8112e594:	003b68fa 	trap	3
8112e598:	dfc00b15 	stw	ra,44(sp)
8112e59c:	df000a15 	stw	fp,40(sp)
8112e5a0:	df000a04 	addi	fp,sp,40
8112e5a4:	2005883a 	mov	r2,r4
8112e5a8:	e17ffe15 	stw	r5,-8(fp)
8112e5ac:	e1bfff15 	stw	r6,-4(fp)
8112e5b0:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
8112e5b4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
8112e5b8:	e0bfff17 	ldw	r2,-4(fp)
8112e5bc:	1000021e 	bne	r2,zero,8112e5c8 <OSTaskNameGet+0x3c>
        return (0);
8112e5c0:	0005883a 	mov	r2,zero
8112e5c4:	00005406 	br	8112e718 <OSTaskNameGet+0x18c>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
8112e5c8:	e0bffd03 	ldbu	r2,-12(fp)
8112e5cc:	10800a70 	cmpltui	r2,r2,41
8112e5d0:	1000081e 	bne	r2,zero,8112e5f4 <OSTaskNameGet+0x68>
        if (prio != OS_PRIO_SELF) {
8112e5d4:	e0bffd03 	ldbu	r2,-12(fp)
8112e5d8:	10803fe0 	cmpeqi	r2,r2,255
8112e5dc:	1000051e 	bne	r2,zero,8112e5f4 <OSTaskNameGet+0x68>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
8112e5e0:	e0bfff17 	ldw	r2,-4(fp)
8112e5e4:	00c00a84 	movi	r3,42
8112e5e8:	10c00005 	stb	r3,0(r2)
            return (0);
8112e5ec:	0005883a 	mov	r2,zero
8112e5f0:	00004906 	br	8112e718 <OSTaskNameGet+0x18c>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
8112e5f4:	e0bffe17 	ldw	r2,-8(fp)
8112e5f8:	1000051e 	bne	r2,zero,8112e610 <OSTaskNameGet+0x84>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
8112e5fc:	e0bfff17 	ldw	r2,-4(fp)
8112e600:	00c00304 	movi	r3,12
8112e604:	10c00005 	stb	r3,0(r2)
        return (0);
8112e608:	0005883a 	mov	r2,zero
8112e60c:	00004206 	br	8112e718 <OSTaskNameGet+0x18c>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
8112e610:	d0a08303 	ldbu	r2,-32244(gp)
8112e614:	10803fcc 	andi	r2,r2,255
8112e618:	10000526 	beq	r2,zero,8112e630 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
8112e61c:	e0bfff17 	ldw	r2,-4(fp)
8112e620:	00c00444 	movi	r3,17
8112e624:	10c00005 	stb	r3,0(r2)
        return (0);
8112e628:	0005883a 	mov	r2,zero
8112e62c:	00003a06 	br	8112e718 <OSTaskNameGet+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e630:	0005303a 	rdctl	r2,status
8112e634:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e638:	e0fffc17 	ldw	r3,-16(fp)
8112e63c:	00bfff84 	movi	r2,-2
8112e640:	1884703a 	and	r2,r3,r2
8112e644:	1001703a 	wrctl	status,r2
  
  return context;
8112e648:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e64c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
8112e650:	e0bffd03 	ldbu	r2,-12(fp)
8112e654:	10803fd8 	cmpnei	r2,r2,255
8112e658:	1000031e 	bne	r2,zero,8112e668 <OSTaskNameGet+0xdc>
        prio = OSTCBCur->OSTCBPrio;
8112e65c:	d0a08417 	ldw	r2,-32240(gp)
8112e660:	10800c83 	ldbu	r2,50(r2)
8112e664:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112e668:	e0fffd03 	ldbu	r3,-12(fp)
8112e66c:	00a04574 	movhi	r2,33045
8112e670:	1087c004 	addi	r2,r2,7936
8112e674:	18c7883a 	add	r3,r3,r3
8112e678:	18c7883a 	add	r3,r3,r3
8112e67c:	10c5883a 	add	r2,r2,r3
8112e680:	10800017 	ldw	r2,0(r2)
8112e684:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
8112e688:	e0bff817 	ldw	r2,-32(fp)
8112e68c:	1000091e 	bne	r2,zero,8112e6b4 <OSTaskNameGet+0x128>
8112e690:	e0bff617 	ldw	r2,-40(fp)
8112e694:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e698:	e0bff717 	ldw	r2,-36(fp)
8112e69c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112e6a0:	e0bfff17 	ldw	r2,-4(fp)
8112e6a4:	00c010c4 	movi	r3,67
8112e6a8:	10c00005 	stb	r3,0(r2)
        return (0);
8112e6ac:	0005883a 	mov	r2,zero
8112e6b0:	00001906 	br	8112e718 <OSTaskNameGet+0x18c>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
8112e6b4:	e0bff817 	ldw	r2,-32(fp)
8112e6b8:	10800058 	cmpnei	r2,r2,1
8112e6bc:	1000091e 	bne	r2,zero,8112e6e4 <OSTaskNameGet+0x158>
8112e6c0:	e0bff617 	ldw	r2,-40(fp)
8112e6c4:	e0bff915 	stw	r2,-28(fp)
8112e6c8:	e0bff917 	ldw	r2,-28(fp)
8112e6cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112e6d0:	e0bfff17 	ldw	r2,-4(fp)
8112e6d4:	00c010c4 	movi	r3,67
8112e6d8:	10c00005 	stb	r3,0(r2)
        return (0);
8112e6dc:	0005883a 	mov	r2,zero
8112e6e0:	00000d06 	br	8112e718 <OSTaskNameGet+0x18c>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
8112e6e4:	e0bff817 	ldw	r2,-32(fp)
8112e6e8:	10801304 	addi	r2,r2,76
8112e6ec:	100b883a 	mov	r5,r2
8112e6f0:	e13ffe17 	ldw	r4,-8(fp)
8112e6f4:	11284340 	call	81128434 <OS_StrCopy>
8112e6f8:	e0bffb05 	stb	r2,-20(fp)
8112e6fc:	e0bff617 	ldw	r2,-40(fp)
8112e700:	e0bffa15 	stw	r2,-24(fp)
8112e704:	e0bffa17 	ldw	r2,-24(fp)
8112e708:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112e70c:	e0bfff17 	ldw	r2,-4(fp)
8112e710:	10000005 	stb	zero,0(r2)
    return (len);
8112e714:	e0bffb03 	ldbu	r2,-20(fp)
}
8112e718:	e037883a 	mov	sp,fp
8112e71c:	dfc00117 	ldw	ra,4(sp)
8112e720:	df000017 	ldw	fp,0(sp)
8112e724:	dec00204 	addi	sp,sp,8
8112e728:	f800283a 	ret

8112e72c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
8112e72c:	defff304 	addi	sp,sp,-52
8112e730:	de00012e 	bgeu	sp,et,8112e738 <OSTaskNameSet+0xc>
8112e734:	003b68fa 	trap	3
8112e738:	dfc00c15 	stw	ra,48(sp)
8112e73c:	df000b15 	stw	fp,44(sp)
8112e740:	df000b04 	addi	fp,sp,44
8112e744:	2005883a 	mov	r2,r4
8112e748:	e17ffe15 	stw	r5,-8(fp)
8112e74c:	e1bfff15 	stw	r6,-4(fp)
8112e750:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112e754:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
8112e758:	e0bfff17 	ldw	r2,-4(fp)
8112e75c:	10005c26 	beq	r2,zero,8112e8d0 <OSTaskNameSet+0x1a4>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
8112e760:	e0bffd03 	ldbu	r2,-12(fp)
8112e764:	10800a70 	cmpltui	r2,r2,41
8112e768:	1000071e 	bne	r2,zero,8112e788 <OSTaskNameSet+0x5c>
        if (prio != OS_PRIO_SELF) {
8112e76c:	e0bffd03 	ldbu	r2,-12(fp)
8112e770:	10803fe0 	cmpeqi	r2,r2,255
8112e774:	1000041e 	bne	r2,zero,8112e788 <OSTaskNameSet+0x5c>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
8112e778:	e0bfff17 	ldw	r2,-4(fp)
8112e77c:	00c00a84 	movi	r3,42
8112e780:	10c00005 	stb	r3,0(r2)
            return;
8112e784:	00005306 	br	8112e8d4 <OSTaskNameSet+0x1a8>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
8112e788:	e0bffe17 	ldw	r2,-8(fp)
8112e78c:	1000041e 	bne	r2,zero,8112e7a0 <OSTaskNameSet+0x74>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
8112e790:	e0bfff17 	ldw	r2,-4(fp)
8112e794:	00c00304 	movi	r3,12
8112e798:	10c00005 	stb	r3,0(r2)
        return;
8112e79c:	00004d06 	br	8112e8d4 <OSTaskNameSet+0x1a8>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
8112e7a0:	d0a08303 	ldbu	r2,-32244(gp)
8112e7a4:	10803fcc 	andi	r2,r2,255
8112e7a8:	10000426 	beq	r2,zero,8112e7bc <OSTaskNameSet+0x90>
        *perr = OS_ERR_NAME_SET_ISR;
8112e7ac:	e0bfff17 	ldw	r2,-4(fp)
8112e7b0:	00c00484 	movi	r3,18
8112e7b4:	10c00005 	stb	r3,0(r2)
        return;
8112e7b8:	00004606 	br	8112e8d4 <OSTaskNameSet+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e7bc:	0005303a 	rdctl	r2,status
8112e7c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e7c4:	e0fffc17 	ldw	r3,-16(fp)
8112e7c8:	00bfff84 	movi	r2,-2
8112e7cc:	1884703a 	and	r2,r3,r2
8112e7d0:	1001703a 	wrctl	status,r2
  
  return context;
8112e7d4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
8112e7d8:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
8112e7dc:	e0bffd03 	ldbu	r2,-12(fp)
8112e7e0:	10803fd8 	cmpnei	r2,r2,255
8112e7e4:	1000031e 	bne	r2,zero,8112e7f4 <OSTaskNameSet+0xc8>
        prio = OSTCBCur->OSTCBPrio;
8112e7e8:	d0a08417 	ldw	r2,-32240(gp)
8112e7ec:	10800c83 	ldbu	r2,50(r2)
8112e7f0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112e7f4:	e0fffd03 	ldbu	r3,-12(fp)
8112e7f8:	00a04574 	movhi	r2,33045
8112e7fc:	1087c004 	addi	r2,r2,7936
8112e800:	18c7883a 	add	r3,r3,r3
8112e804:	18c7883a 	add	r3,r3,r3
8112e808:	10c5883a 	add	r2,r2,r3
8112e80c:	10800017 	ldw	r2,0(r2)
8112e810:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
8112e814:	e0bff717 	ldw	r2,-36(fp)
8112e818:	1000081e 	bne	r2,zero,8112e83c <OSTaskNameSet+0x110>
8112e81c:	e0bff517 	ldw	r2,-44(fp)
8112e820:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e824:	e0bff617 	ldw	r2,-40(fp)
8112e828:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112e82c:	e0bfff17 	ldw	r2,-4(fp)
8112e830:	00c010c4 	movi	r3,67
8112e834:	10c00005 	stb	r3,0(r2)
        return;
8112e838:	00002606 	br	8112e8d4 <OSTaskNameSet+0x1a8>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
8112e83c:	e0bff717 	ldw	r2,-36(fp)
8112e840:	10800058 	cmpnei	r2,r2,1
8112e844:	1000081e 	bne	r2,zero,8112e868 <OSTaskNameSet+0x13c>
8112e848:	e0bff517 	ldw	r2,-44(fp)
8112e84c:	e0bff815 	stw	r2,-32(fp)
8112e850:	e0bff817 	ldw	r2,-32(fp)
8112e854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
8112e858:	e0bfff17 	ldw	r2,-4(fp)
8112e85c:	00c010c4 	movi	r3,67
8112e860:	10c00005 	stb	r3,0(r2)
        return;
8112e864:	00001b06 	br	8112e8d4 <OSTaskNameSet+0x1a8>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
8112e868:	e13ffe17 	ldw	r4,-8(fp)
8112e86c:	11284b00 	call	811284b0 <OS_StrLen>
8112e870:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
8112e874:	e0bffa03 	ldbu	r2,-24(fp)
8112e878:	10800830 	cmpltui	r2,r2,32
8112e87c:	1000081e 	bne	r2,zero,8112e8a0 <OSTaskNameSet+0x174>
8112e880:	e0bff517 	ldw	r2,-44(fp)
8112e884:	e0bff915 	stw	r2,-28(fp)
8112e888:	e0bff917 	ldw	r2,-28(fp)
8112e88c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
8112e890:	e0bfff17 	ldw	r2,-4(fp)
8112e894:	00c01044 	movi	r3,65
8112e898:	10c00005 	stb	r3,0(r2)
        return;
8112e89c:	00000d06 	br	8112e8d4 <OSTaskNameSet+0x1a8>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
8112e8a0:	e0bff717 	ldw	r2,-36(fp)
8112e8a4:	10801304 	addi	r2,r2,76
8112e8a8:	e17ffe17 	ldw	r5,-8(fp)
8112e8ac:	1009883a 	mov	r4,r2
8112e8b0:	11284340 	call	81128434 <OS_StrCopy>
8112e8b4:	e0bff517 	ldw	r2,-44(fp)
8112e8b8:	e0bffb15 	stw	r2,-20(fp)
8112e8bc:	e0bffb17 	ldw	r2,-20(fp)
8112e8c0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
8112e8c4:	e0bfff17 	ldw	r2,-4(fp)
8112e8c8:	10000005 	stb	zero,0(r2)
8112e8cc:	00000106 	br	8112e8d4 <OSTaskNameSet+0x1a8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
8112e8d0:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
8112e8d4:	e037883a 	mov	sp,fp
8112e8d8:	dfc00117 	ldw	ra,4(sp)
8112e8dc:	df000017 	ldw	fp,0(sp)
8112e8e0:	dec00204 	addi	sp,sp,8
8112e8e4:	f800283a 	ret

8112e8e8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
8112e8e8:	defff404 	addi	sp,sp,-48
8112e8ec:	de00012e 	bgeu	sp,et,8112e8f4 <OSTaskResume+0xc>
8112e8f0:	003b68fa 	trap	3
8112e8f4:	dfc00b15 	stw	ra,44(sp)
8112e8f8:	df000a15 	stw	fp,40(sp)
8112e8fc:	df000a04 	addi	fp,sp,40
8112e900:	2005883a 	mov	r2,r4
8112e904:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
8112e908:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
8112e90c:	e0bfff03 	ldbu	r2,-4(fp)
8112e910:	10800a30 	cmpltui	r2,r2,40
8112e914:	1000021e 	bne	r2,zero,8112e920 <OSTaskResume+0x38>
        return (OS_ERR_PRIO_INVALID);
8112e918:	00800a84 	movi	r2,42
8112e91c:	00006406 	br	8112eab0 <OSTaskResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112e920:	0005303a 	rdctl	r2,status
8112e924:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112e928:	e0fffe17 	ldw	r3,-8(fp)
8112e92c:	00bfff84 	movi	r2,-2
8112e930:	1884703a 	and	r2,r3,r2
8112e934:	1001703a 	wrctl	status,r2
  
  return context;
8112e938:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112e93c:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
8112e940:	e0ffff03 	ldbu	r3,-4(fp)
8112e944:	00a04574 	movhi	r2,33045
8112e948:	1087c004 	addi	r2,r2,7936
8112e94c:	18c7883a 	add	r3,r3,r3
8112e950:	18c7883a 	add	r3,r3,r3
8112e954:	10c5883a 	add	r2,r2,r3
8112e958:	10800017 	ldw	r2,0(r2)
8112e95c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
8112e960:	e0bff817 	ldw	r2,-32(fp)
8112e964:	1000061e 	bne	r2,zero,8112e980 <OSTaskResume+0x98>
8112e968:	e0bff617 	ldw	r2,-40(fp)
8112e96c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112e970:	e0bff717 	ldw	r2,-36(fp)
8112e974:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
8112e978:	00801184 	movi	r2,70
8112e97c:	00004c06 	br	8112eab0 <OSTaskResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
8112e980:	e0bff817 	ldw	r2,-32(fp)
8112e984:	10800058 	cmpnei	r2,r2,1
8112e988:	1000061e 	bne	r2,zero,8112e9a4 <OSTaskResume+0xbc>
8112e98c:	e0bff617 	ldw	r2,-40(fp)
8112e990:	e0bff915 	stw	r2,-28(fp)
8112e994:	e0bff917 	ldw	r2,-28(fp)
8112e998:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112e99c:	008010c4 	movi	r2,67
8112e9a0:	00004306 	br	8112eab0 <OSTaskResume+0x1c8>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
8112e9a4:	e0bff817 	ldw	r2,-32(fp)
8112e9a8:	10800c03 	ldbu	r2,48(r2)
8112e9ac:	10803fcc 	andi	r2,r2,255
8112e9b0:	1080020c 	andi	r2,r2,8
8112e9b4:	10003926 	beq	r2,zero,8112ea9c <OSTaskResume+0x1b4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
8112e9b8:	e0bff817 	ldw	r2,-32(fp)
8112e9bc:	10c00c03 	ldbu	r3,48(r2)
8112e9c0:	00bffdc4 	movi	r2,-9
8112e9c4:	1884703a 	and	r2,r3,r2
8112e9c8:	1007883a 	mov	r3,r2
8112e9cc:	e0bff817 	ldw	r2,-32(fp)
8112e9d0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
8112e9d4:	e0bff817 	ldw	r2,-32(fp)
8112e9d8:	10800c03 	ldbu	r2,48(r2)
8112e9dc:	10803fcc 	andi	r2,r2,255
8112e9e0:	1000281e 	bne	r2,zero,8112ea84 <OSTaskResume+0x19c>
            if (ptcb->OSTCBDly == 0) {
8112e9e4:	e0bff817 	ldw	r2,-32(fp)
8112e9e8:	10800b8b 	ldhu	r2,46(r2)
8112e9ec:	10bfffcc 	andi	r2,r2,65535
8112e9f0:	10001f1e 	bne	r2,zero,8112ea70 <OSTaskResume+0x188>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
8112e9f4:	e0bff817 	ldw	r2,-32(fp)
8112e9f8:	10c00d83 	ldbu	r3,54(r2)
8112e9fc:	d0a08003 	ldbu	r2,-32256(gp)
8112ea00:	1884b03a 	or	r2,r3,r2
8112ea04:	d0a08005 	stb	r2,-32256(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112ea08:	e0bff817 	ldw	r2,-32(fp)
8112ea0c:	10800d03 	ldbu	r2,52(r2)
8112ea10:	10c03fcc 	andi	r3,r2,255
8112ea14:	e0bff817 	ldw	r2,-32(fp)
8112ea18:	10800d03 	ldbu	r2,52(r2)
8112ea1c:	11003fcc 	andi	r4,r2,255
8112ea20:	d0a08044 	addi	r2,gp,-32255
8112ea24:	2085883a 	add	r2,r4,r2
8112ea28:	11000003 	ldbu	r4,0(r2)
8112ea2c:	e0bff817 	ldw	r2,-32(fp)
8112ea30:	10800d43 	ldbu	r2,53(r2)
8112ea34:	2084b03a 	or	r2,r4,r2
8112ea38:	1009883a 	mov	r4,r2
8112ea3c:	d0a08044 	addi	r2,gp,-32255
8112ea40:	1885883a 	add	r2,r3,r2
8112ea44:	11000005 	stb	r4,0(r2)
8112ea48:	e0bff617 	ldw	r2,-40(fp)
8112ea4c:	e0bffa15 	stw	r2,-24(fp)
8112ea50:	e0bffa17 	ldw	r2,-24(fp)
8112ea54:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
8112ea58:	d0a07303 	ldbu	r2,-32308(gp)
8112ea5c:	10803fcc 	andi	r2,r2,255
8112ea60:	10800058 	cmpnei	r2,r2,1
8112ea64:	10000b1e 	bne	r2,zero,8112ea94 <OSTaskResume+0x1ac>
                    OS_Sched();                               /* Find new highest priority task        */
8112ea68:	11282e00 	call	811282e0 <OS_Sched>
8112ea6c:	00000906 	br	8112ea94 <OSTaskResume+0x1ac>
8112ea70:	e0bff617 	ldw	r2,-40(fp)
8112ea74:	e0bffb15 	stw	r2,-20(fp)
8112ea78:	e0bffb17 	ldw	r2,-20(fp)
8112ea7c:	1001703a 	wrctl	status,r2
8112ea80:	00000406 	br	8112ea94 <OSTaskResume+0x1ac>
8112ea84:	e0bff617 	ldw	r2,-40(fp)
8112ea88:	e0bffc15 	stw	r2,-16(fp)
8112ea8c:	e0bffc17 	ldw	r2,-16(fp)
8112ea90:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
8112ea94:	0005883a 	mov	r2,zero
8112ea98:	00000506 	br	8112eab0 <OSTaskResume+0x1c8>
8112ea9c:	e0bff617 	ldw	r2,-40(fp)
8112eaa0:	e0bffd15 	stw	r2,-12(fp)
8112eaa4:	e0bffd17 	ldw	r2,-12(fp)
8112eaa8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
8112eaac:	00801104 	movi	r2,68
}
8112eab0:	e037883a 	mov	sp,fp
8112eab4:	dfc00117 	ldw	ra,4(sp)
8112eab8:	df000017 	ldw	fp,0(sp)
8112eabc:	dec00204 	addi	sp,sp,8
8112eac0:	f800283a 	ret

8112eac4 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
8112eac4:	defff304 	addi	sp,sp,-52
8112eac8:	de00012e 	bgeu	sp,et,8112ead0 <OSTaskStkChk+0xc>
8112eacc:	003b68fa 	trap	3
8112ead0:	df000c15 	stw	fp,48(sp)
8112ead4:	df000c04 	addi	fp,sp,48
8112ead8:	2005883a 	mov	r2,r4
8112eadc:	e17fff15 	stw	r5,-4(fp)
8112eae0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
8112eae4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
8112eae8:	e0bffe03 	ldbu	r2,-8(fp)
8112eaec:	10800a70 	cmpltui	r2,r2,41
8112eaf0:	1000051e 	bne	r2,zero,8112eb08 <OSTaskStkChk+0x44>
        if (prio != OS_PRIO_SELF) {
8112eaf4:	e0bffe03 	ldbu	r2,-8(fp)
8112eaf8:	10803fe0 	cmpeqi	r2,r2,255
8112eafc:	1000021e 	bne	r2,zero,8112eb08 <OSTaskStkChk+0x44>
            return (OS_ERR_PRIO_INVALID);
8112eb00:	00800a84 	movi	r2,42
8112eb04:	00005d06 	br	8112ec7c <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
8112eb08:	e0bfff17 	ldw	r2,-4(fp)
8112eb0c:	1000021e 	bne	r2,zero,8112eb18 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
8112eb10:	00800244 	movi	r2,9
8112eb14:	00005906 	br	8112ec7c <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
8112eb18:	e0bfff17 	ldw	r2,-4(fp)
8112eb1c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
8112eb20:	e0bfff17 	ldw	r2,-4(fp)
8112eb24:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eb28:	0005303a 	rdctl	r2,status
8112eb2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eb30:	e0fffd17 	ldw	r3,-12(fp)
8112eb34:	00bfff84 	movi	r2,-2
8112eb38:	1884703a 	and	r2,r3,r2
8112eb3c:	1001703a 	wrctl	status,r2
  
  return context;
8112eb40:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
8112eb44:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
8112eb48:	e0bffe03 	ldbu	r2,-8(fp)
8112eb4c:	10803fd8 	cmpnei	r2,r2,255
8112eb50:	1000031e 	bne	r2,zero,8112eb60 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
8112eb54:	d0a08417 	ldw	r2,-32240(gp)
8112eb58:	10800c83 	ldbu	r2,50(r2)
8112eb5c:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112eb60:	e0fffe03 	ldbu	r3,-8(fp)
8112eb64:	00a04574 	movhi	r2,33045
8112eb68:	1087c004 	addi	r2,r2,7936
8112eb6c:	18c7883a 	add	r3,r3,r3
8112eb70:	18c7883a 	add	r3,r3,r3
8112eb74:	10c5883a 	add	r2,r2,r3
8112eb78:	10800017 	ldw	r2,0(r2)
8112eb7c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
8112eb80:	e0bff817 	ldw	r2,-32(fp)
8112eb84:	1000061e 	bne	r2,zero,8112eba0 <OSTaskStkChk+0xdc>
8112eb88:	e0bff617 	ldw	r2,-40(fp)
8112eb8c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112eb90:	e0bff717 	ldw	r2,-36(fp)
8112eb94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112eb98:	008010c4 	movi	r2,67
8112eb9c:	00003706 	br	8112ec7c <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112eba0:	e0bff817 	ldw	r2,-32(fp)
8112eba4:	10800058 	cmpnei	r2,r2,1
8112eba8:	1000061e 	bne	r2,zero,8112ebc4 <OSTaskStkChk+0x100>
8112ebac:	e0bff617 	ldw	r2,-40(fp)
8112ebb0:	e0bff915 	stw	r2,-28(fp)
8112ebb4:	e0bff917 	ldw	r2,-28(fp)
8112ebb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112ebbc:	008010c4 	movi	r2,67
8112ebc0:	00002e06 	br	8112ec7c <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
8112ebc4:	e0bff817 	ldw	r2,-32(fp)
8112ebc8:	1080040b 	ldhu	r2,16(r2)
8112ebcc:	10bfffcc 	andi	r2,r2,65535
8112ebd0:	1080004c 	andi	r2,r2,1
8112ebd4:	1000061e 	bne	r2,zero,8112ebf0 <OSTaskStkChk+0x12c>
8112ebd8:	e0bff617 	ldw	r2,-40(fp)
8112ebdc:	e0bffa15 	stw	r2,-24(fp)
8112ebe0:	e0bffa17 	ldw	r2,-24(fp)
8112ebe4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
8112ebe8:	00801144 	movi	r2,69
8112ebec:	00002306 	br	8112ec7c <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
8112ebf0:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
8112ebf4:	e0bff817 	ldw	r2,-32(fp)
8112ebf8:	10800317 	ldw	r2,12(r2)
8112ebfc:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
8112ec00:	e0bff817 	ldw	r2,-32(fp)
8112ec04:	10800217 	ldw	r2,8(r2)
8112ec08:	e0bff415 	stw	r2,-48(fp)
8112ec0c:	e0bff617 	ldw	r2,-40(fp)
8112ec10:	e0bffb15 	stw	r2,-20(fp)
8112ec14:	e0bffb17 	ldw	r2,-20(fp)
8112ec18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112ec1c:	00000306 	br	8112ec2c <OSTaskStkChk+0x168>
        nfree++;
8112ec20:	e0bff517 	ldw	r2,-44(fp)
8112ec24:	10800044 	addi	r2,r2,1
8112ec28:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
8112ec2c:	e0bff417 	ldw	r2,-48(fp)
8112ec30:	10c00104 	addi	r3,r2,4
8112ec34:	e0fff415 	stw	r3,-48(fp)
8112ec38:	10800017 	ldw	r2,0(r2)
8112ec3c:	103ff826 	beq	r2,zero,8112ec20 <__reset+0xfb10ec20>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
8112ec40:	e0bff517 	ldw	r2,-44(fp)
8112ec44:	1085883a 	add	r2,r2,r2
8112ec48:	1085883a 	add	r2,r2,r2
8112ec4c:	1007883a 	mov	r3,r2
8112ec50:	e0bfff17 	ldw	r2,-4(fp)
8112ec54:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
8112ec58:	e0fffc17 	ldw	r3,-16(fp)
8112ec5c:	e0bff517 	ldw	r2,-44(fp)
8112ec60:	1885c83a 	sub	r2,r3,r2
8112ec64:	1085883a 	add	r2,r2,r2
8112ec68:	1085883a 	add	r2,r2,r2
8112ec6c:	1007883a 	mov	r3,r2
8112ec70:	e0bfff17 	ldw	r2,-4(fp)
8112ec74:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
8112ec78:	0005883a 	mov	r2,zero
}
8112ec7c:	e037883a 	mov	sp,fp
8112ec80:	df000017 	ldw	fp,0(sp)
8112ec84:	dec00104 	addi	sp,sp,4
8112ec88:	f800283a 	ret

8112ec8c <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
8112ec8c:	defff504 	addi	sp,sp,-44
8112ec90:	de00012e 	bgeu	sp,et,8112ec98 <OSTaskSuspend+0xc>
8112ec94:	003b68fa 	trap	3
8112ec98:	dfc00a15 	stw	ra,40(sp)
8112ec9c:	df000915 	stw	fp,36(sp)
8112eca0:	df000904 	addi	fp,sp,36
8112eca4:	2005883a 	mov	r2,r4
8112eca8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ecac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
8112ecb0:	e0bfff03 	ldbu	r2,-4(fp)
8112ecb4:	10800a18 	cmpnei	r2,r2,40
8112ecb8:	1000021e 	bne	r2,zero,8112ecc4 <OSTaskSuspend+0x38>
        return (OS_ERR_TASK_SUSPEND_IDLE);
8112ecbc:	008011c4 	movi	r2,71
8112ecc0:	00006806 	br	8112ee64 <OSTaskSuspend+0x1d8>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
8112ecc4:	e0bfff03 	ldbu	r2,-4(fp)
8112ecc8:	10800a30 	cmpltui	r2,r2,40
8112eccc:	1000051e 	bne	r2,zero,8112ece4 <OSTaskSuspend+0x58>
        if (prio != OS_PRIO_SELF) {
8112ecd0:	e0bfff03 	ldbu	r2,-4(fp)
8112ecd4:	10803fe0 	cmpeqi	r2,r2,255
8112ecd8:	1000021e 	bne	r2,zero,8112ece4 <OSTaskSuspend+0x58>
            return (OS_ERR_PRIO_INVALID);
8112ecdc:	00800a84 	movi	r2,42
8112ece0:	00006006 	br	8112ee64 <OSTaskSuspend+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112ece4:	0005303a 	rdctl	r2,status
8112ece8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112ecec:	e0fffe17 	ldw	r3,-8(fp)
8112ecf0:	00bfff84 	movi	r2,-2
8112ecf4:	1884703a 	and	r2,r3,r2
8112ecf8:	1001703a 	wrctl	status,r2
  
  return context;
8112ecfc:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
8112ed00:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
8112ed04:	e0bfff03 	ldbu	r2,-4(fp)
8112ed08:	10803fd8 	cmpnei	r2,r2,255
8112ed0c:	1000061e 	bne	r2,zero,8112ed28 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
8112ed10:	d0a08417 	ldw	r2,-32240(gp)
8112ed14:	10800c83 	ldbu	r2,50(r2)
8112ed18:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
8112ed1c:	00800044 	movi	r2,1
8112ed20:	e0bff705 	stb	r2,-36(fp)
8112ed24:	00000906 	br	8112ed4c <OSTaskSuspend+0xc0>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
8112ed28:	d0a08417 	ldw	r2,-32240(gp)
8112ed2c:	10800c83 	ldbu	r2,50(r2)
8112ed30:	10c03fcc 	andi	r3,r2,255
8112ed34:	e0bfff03 	ldbu	r2,-4(fp)
8112ed38:	1880031e 	bne	r3,r2,8112ed48 <OSTaskSuspend+0xbc>
        self = OS_TRUE;
8112ed3c:	00800044 	movi	r2,1
8112ed40:	e0bff705 	stb	r2,-36(fp)
8112ed44:	00000106 	br	8112ed4c <OSTaskSuspend+0xc0>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
8112ed48:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112ed4c:	e0ffff03 	ldbu	r3,-4(fp)
8112ed50:	00a04574 	movhi	r2,33045
8112ed54:	1087c004 	addi	r2,r2,7936
8112ed58:	18c7883a 	add	r3,r3,r3
8112ed5c:	18c7883a 	add	r3,r3,r3
8112ed60:	10c5883a 	add	r2,r2,r3
8112ed64:	10800017 	ldw	r2,0(r2)
8112ed68:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
8112ed6c:	e0bffa17 	ldw	r2,-24(fp)
8112ed70:	1000061e 	bne	r2,zero,8112ed8c <OSTaskSuspend+0x100>
8112ed74:	e0bff817 	ldw	r2,-32(fp)
8112ed78:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ed7c:	e0bff917 	ldw	r2,-28(fp)
8112ed80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
8112ed84:	00801204 	movi	r2,72
8112ed88:	00003606 	br	8112ee64 <OSTaskSuspend+0x1d8>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
8112ed8c:	e0bffa17 	ldw	r2,-24(fp)
8112ed90:	10800058 	cmpnei	r2,r2,1
8112ed94:	1000061e 	bne	r2,zero,8112edb0 <OSTaskSuspend+0x124>
8112ed98:	e0bff817 	ldw	r2,-32(fp)
8112ed9c:	e0bffb15 	stw	r2,-20(fp)
8112eda0:	e0bffb17 	ldw	r2,-20(fp)
8112eda4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112eda8:	008010c4 	movi	r2,67
8112edac:	00002d06 	br	8112ee64 <OSTaskSuspend+0x1d8>
    }
    y            = ptcb->OSTCBY;
8112edb0:	e0bffa17 	ldw	r2,-24(fp)
8112edb4:	10800d03 	ldbu	r2,52(r2)
8112edb8:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
8112edbc:	e0fffd03 	ldbu	r3,-12(fp)
8112edc0:	e13ffd03 	ldbu	r4,-12(fp)
8112edc4:	d0a08044 	addi	r2,gp,-32255
8112edc8:	2085883a 	add	r2,r4,r2
8112edcc:	10800003 	ldbu	r2,0(r2)
8112edd0:	1009883a 	mov	r4,r2
8112edd4:	e0bffa17 	ldw	r2,-24(fp)
8112edd8:	10800d43 	ldbu	r2,53(r2)
8112eddc:	0084303a 	nor	r2,zero,r2
8112ede0:	2084703a 	and	r2,r4,r2
8112ede4:	1009883a 	mov	r4,r2
8112ede8:	d0a08044 	addi	r2,gp,-32255
8112edec:	1885883a 	add	r2,r3,r2
8112edf0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
8112edf4:	e0fffd03 	ldbu	r3,-12(fp)
8112edf8:	d0a08044 	addi	r2,gp,-32255
8112edfc:	1885883a 	add	r2,r3,r2
8112ee00:	10800003 	ldbu	r2,0(r2)
8112ee04:	10803fcc 	andi	r2,r2,255
8112ee08:	1000071e 	bne	r2,zero,8112ee28 <OSTaskSuspend+0x19c>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
8112ee0c:	e0bffa17 	ldw	r2,-24(fp)
8112ee10:	10800d83 	ldbu	r2,54(r2)
8112ee14:	0084303a 	nor	r2,zero,r2
8112ee18:	1007883a 	mov	r3,r2
8112ee1c:	d0a08003 	ldbu	r2,-32256(gp)
8112ee20:	1884703a 	and	r2,r3,r2
8112ee24:	d0a08005 	stb	r2,-32256(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
8112ee28:	e0bffa17 	ldw	r2,-24(fp)
8112ee2c:	10800c03 	ldbu	r2,48(r2)
8112ee30:	10800214 	ori	r2,r2,8
8112ee34:	1007883a 	mov	r3,r2
8112ee38:	e0bffa17 	ldw	r2,-24(fp)
8112ee3c:	10c00c05 	stb	r3,48(r2)
8112ee40:	e0bff817 	ldw	r2,-32(fp)
8112ee44:	e0bffc15 	stw	r2,-16(fp)
8112ee48:	e0bffc17 	ldw	r2,-16(fp)
8112ee4c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
8112ee50:	e0bff703 	ldbu	r2,-36(fp)
8112ee54:	10800058 	cmpnei	r2,r2,1
8112ee58:	1000011e 	bne	r2,zero,8112ee60 <OSTaskSuspend+0x1d4>
        OS_Sched();                                             /* Find new highest priority task      */
8112ee5c:	11282e00 	call	811282e0 <OS_Sched>
    }
    return (OS_ERR_NONE);
8112ee60:	0005883a 	mov	r2,zero
}
8112ee64:	e037883a 	mov	sp,fp
8112ee68:	dfc00117 	ldw	ra,4(sp)
8112ee6c:	df000017 	ldw	fp,0(sp)
8112ee70:	dec00204 	addi	sp,sp,8
8112ee74:	f800283a 	ret

8112ee78 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
8112ee78:	defff604 	addi	sp,sp,-40
8112ee7c:	de00012e 	bgeu	sp,et,8112ee84 <OSTaskQuery+0xc>
8112ee80:	003b68fa 	trap	3
8112ee84:	dfc00915 	stw	ra,36(sp)
8112ee88:	df000815 	stw	fp,32(sp)
8112ee8c:	df000804 	addi	fp,sp,32
8112ee90:	2005883a 	mov	r2,r4
8112ee94:	e17fff15 	stw	r5,-4(fp)
8112ee98:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112ee9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
8112eea0:	e0bffe03 	ldbu	r2,-8(fp)
8112eea4:	10800a70 	cmpltui	r2,r2,41
8112eea8:	1000051e 	bne	r2,zero,8112eec0 <OSTaskQuery+0x48>
        if (prio != OS_PRIO_SELF) {
8112eeac:	e0bffe03 	ldbu	r2,-8(fp)
8112eeb0:	10803fe0 	cmpeqi	r2,r2,255
8112eeb4:	1000021e 	bne	r2,zero,8112eec0 <OSTaskQuery+0x48>
            return (OS_ERR_PRIO_INVALID);
8112eeb8:	00800a84 	movi	r2,42
8112eebc:	00003406 	br	8112ef90 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
8112eec0:	e0bfff17 	ldw	r2,-4(fp)
8112eec4:	1000021e 	bne	r2,zero,8112eed0 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
8112eec8:	00800244 	movi	r2,9
8112eecc:	00003006 	br	8112ef90 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112eed0:	0005303a 	rdctl	r2,status
8112eed4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112eed8:	e0fffd17 	ldw	r3,-12(fp)
8112eedc:	00bfff84 	movi	r2,-2
8112eee0:	1884703a 	and	r2,r3,r2
8112eee4:	1001703a 	wrctl	status,r2
  
  return context;
8112eee8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
8112eeec:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
8112eef0:	e0bffe03 	ldbu	r2,-8(fp)
8112eef4:	10803fd8 	cmpnei	r2,r2,255
8112eef8:	1000031e 	bne	r2,zero,8112ef08 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
8112eefc:	d0a08417 	ldw	r2,-32240(gp)
8112ef00:	10800c83 	ldbu	r2,50(r2)
8112ef04:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
8112ef08:	e0fffe03 	ldbu	r3,-8(fp)
8112ef0c:	00a04574 	movhi	r2,33045
8112ef10:	1087c004 	addi	r2,r2,7936
8112ef14:	18c7883a 	add	r3,r3,r3
8112ef18:	18c7883a 	add	r3,r3,r3
8112ef1c:	10c5883a 	add	r2,r2,r3
8112ef20:	10800017 	ldw	r2,0(r2)
8112ef24:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
8112ef28:	e0bffa17 	ldw	r2,-24(fp)
8112ef2c:	1000061e 	bne	r2,zero,8112ef48 <OSTaskQuery+0xd0>
8112ef30:	e0bff817 	ldw	r2,-32(fp)
8112ef34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112ef38:	e0bff917 	ldw	r2,-28(fp)
8112ef3c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
8112ef40:	00800a44 	movi	r2,41
8112ef44:	00001206 	br	8112ef90 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
8112ef48:	e0bffa17 	ldw	r2,-24(fp)
8112ef4c:	10800058 	cmpnei	r2,r2,1
8112ef50:	1000061e 	bne	r2,zero,8112ef6c <OSTaskQuery+0xf4>
8112ef54:	e0bff817 	ldw	r2,-32(fp)
8112ef58:	e0bffb15 	stw	r2,-20(fp)
8112ef5c:	e0bffb17 	ldw	r2,-20(fp)
8112ef60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
8112ef64:	008010c4 	movi	r2,67
8112ef68:	00000906 	br	8112ef90 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
8112ef6c:	01801b04 	movi	r6,108
8112ef70:	e17ffa17 	ldw	r5,-24(fp)
8112ef74:	e13fff17 	ldw	r4,-4(fp)
8112ef78:	11282700 	call	81128270 <OS_MemCopy>
8112ef7c:	e0bff817 	ldw	r2,-32(fp)
8112ef80:	e0bffc15 	stw	r2,-16(fp)
8112ef84:	e0bffc17 	ldw	r2,-16(fp)
8112ef88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
8112ef8c:	0005883a 	mov	r2,zero
}
8112ef90:	e037883a 	mov	sp,fp
8112ef94:	dfc00117 	ldw	ra,4(sp)
8112ef98:	df000017 	ldw	fp,0(sp)
8112ef9c:	dec00204 	addi	sp,sp,8
8112efa0:	f800283a 	ret

8112efa4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
8112efa4:	defffc04 	addi	sp,sp,-16
8112efa8:	de00012e 	bgeu	sp,et,8112efb0 <OS_TaskStkClr+0xc>
8112efac:	003b68fa 	trap	3
8112efb0:	df000315 	stw	fp,12(sp)
8112efb4:	df000304 	addi	fp,sp,12
8112efb8:	e13ffd15 	stw	r4,-12(fp)
8112efbc:	e17ffe15 	stw	r5,-8(fp)
8112efc0:	3005883a 	mov	r2,r6
8112efc4:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
8112efc8:	e0bfff0b 	ldhu	r2,-4(fp)
8112efcc:	1080004c 	andi	r2,r2,1
8112efd0:	10000d26 	beq	r2,zero,8112f008 <OS_TaskStkClr+0x64>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
8112efd4:	e0bfff0b 	ldhu	r2,-4(fp)
8112efd8:	1080008c 	andi	r2,r2,2
8112efdc:	10000a26 	beq	r2,zero,8112f008 <OS_TaskStkClr+0x64>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112efe0:	00000706 	br	8112f000 <OS_TaskStkClr+0x5c>
                size--;
8112efe4:	e0bffe17 	ldw	r2,-8(fp)
8112efe8:	10bfffc4 	addi	r2,r2,-1
8112efec:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
8112eff0:	e0bffd17 	ldw	r2,-12(fp)
8112eff4:	10c00104 	addi	r3,r2,4
8112eff8:	e0fffd15 	stw	r3,-12(fp)
8112effc:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
8112f000:	e0bffe17 	ldw	r2,-8(fp)
8112f004:	103ff71e 	bne	r2,zero,8112efe4 <__reset+0xfb10efe4>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
8112f008:	0001883a 	nop
8112f00c:	e037883a 	mov	sp,fp
8112f010:	df000017 	ldw	fp,0(sp)
8112f014:	dec00104 	addi	sp,sp,4
8112f018:	f800283a 	ret

8112f01c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
8112f01c:	defff904 	addi	sp,sp,-28
8112f020:	de00012e 	bgeu	sp,et,8112f028 <OSTimeDly+0xc>
8112f024:	003b68fa 	trap	3
8112f028:	dfc00615 	stw	ra,24(sp)
8112f02c:	df000515 	stw	fp,20(sp)
8112f030:	df000504 	addi	fp,sp,20
8112f034:	2005883a 	mov	r2,r4
8112f038:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f03c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112f040:	d0a08303 	ldbu	r2,-32244(gp)
8112f044:	10803fcc 	andi	r2,r2,255
8112f048:	1000311e 	bne	r2,zero,8112f110 <OSTimeDly+0xf4>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
8112f04c:	e0bfff0b 	ldhu	r2,-4(fp)
8112f050:	10003026 	beq	r2,zero,8112f114 <OSTimeDly+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f054:	0005303a 	rdctl	r2,status
8112f058:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f05c:	e0fffe17 	ldw	r3,-8(fp)
8112f060:	00bfff84 	movi	r2,-2
8112f064:	1884703a 	and	r2,r3,r2
8112f068:	1001703a 	wrctl	status,r2
  
  return context;
8112f06c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
8112f070:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
8112f074:	d0a08417 	ldw	r2,-32240(gp)
8112f078:	10800d03 	ldbu	r2,52(r2)
8112f07c:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
8112f080:	e0fffd03 	ldbu	r3,-12(fp)
8112f084:	e13ffd03 	ldbu	r4,-12(fp)
8112f088:	d0a08044 	addi	r2,gp,-32255
8112f08c:	2085883a 	add	r2,r4,r2
8112f090:	10800003 	ldbu	r2,0(r2)
8112f094:	1009883a 	mov	r4,r2
8112f098:	d0a08417 	ldw	r2,-32240(gp)
8112f09c:	10800d43 	ldbu	r2,53(r2)
8112f0a0:	0084303a 	nor	r2,zero,r2
8112f0a4:	2084703a 	and	r2,r4,r2
8112f0a8:	1009883a 	mov	r4,r2
8112f0ac:	d0a08044 	addi	r2,gp,-32255
8112f0b0:	1885883a 	add	r2,r3,r2
8112f0b4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
8112f0b8:	e0fffd03 	ldbu	r3,-12(fp)
8112f0bc:	d0a08044 	addi	r2,gp,-32255
8112f0c0:	1885883a 	add	r2,r3,r2
8112f0c4:	10800003 	ldbu	r2,0(r2)
8112f0c8:	10803fcc 	andi	r2,r2,255
8112f0cc:	1000071e 	bne	r2,zero,8112f0ec <OSTimeDly+0xd0>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
8112f0d0:	d0a08417 	ldw	r2,-32240(gp)
8112f0d4:	10800d83 	ldbu	r2,54(r2)
8112f0d8:	0084303a 	nor	r2,zero,r2
8112f0dc:	1007883a 	mov	r3,r2
8112f0e0:	d0a08003 	ldbu	r2,-32256(gp)
8112f0e4:	1884703a 	and	r2,r3,r2
8112f0e8:	d0a08005 	stb	r2,-32256(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
8112f0ec:	d0a08417 	ldw	r2,-32240(gp)
8112f0f0:	e0ffff0b 	ldhu	r3,-4(fp)
8112f0f4:	10c00b8d 	sth	r3,46(r2)
8112f0f8:	e0bffb17 	ldw	r2,-20(fp)
8112f0fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f100:	e0bffc17 	ldw	r2,-16(fp)
8112f104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
8112f108:	11282e00 	call	811282e0 <OS_Sched>
8112f10c:	00000106 	br	8112f114 <OSTimeDly+0xf8>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
8112f110:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
8112f114:	e037883a 	mov	sp,fp
8112f118:	dfc00117 	ldw	ra,4(sp)
8112f11c:	df000017 	ldw	fp,0(sp)
8112f120:	dec00204 	addi	sp,sp,8
8112f124:	f800283a 	ret

8112f128 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
8112f128:	defff804 	addi	sp,sp,-32
8112f12c:	de00012e 	bgeu	sp,et,8112f134 <OSTimeDlyHMSM+0xc>
8112f130:	003b68fa 	trap	3
8112f134:	dfc00715 	stw	ra,28(sp)
8112f138:	df000615 	stw	fp,24(sp)
8112f13c:	df000604 	addi	fp,sp,24
8112f140:	2015883a 	mov	r10,r4
8112f144:	2809883a 	mov	r4,r5
8112f148:	3007883a 	mov	r3,r6
8112f14c:	3805883a 	mov	r2,r7
8112f150:	e2bffc05 	stb	r10,-16(fp)
8112f154:	e13ffd05 	stb	r4,-12(fp)
8112f158:	e0fffe05 	stb	r3,-8(fp)
8112f15c:	e0bfff0d 	sth	r2,-4(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
8112f160:	d0a08303 	ldbu	r2,-32244(gp)
8112f164:	10803fcc 	andi	r2,r2,255
8112f168:	10000226 	beq	r2,zero,8112f174 <OSTimeDlyHMSM+0x4c>
        return (OS_ERR_TIME_DLY_ISR);
8112f16c:	00801544 	movi	r2,85
8112f170:	00004106 	br	8112f278 <OSTimeDlyHMSM+0x150>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
8112f174:	e0bffc03 	ldbu	r2,-16(fp)
8112f178:	1000081e 	bne	r2,zero,8112f19c <OSTimeDlyHMSM+0x74>
        if (minutes == 0) {
8112f17c:	e0bffd03 	ldbu	r2,-12(fp)
8112f180:	1000061e 	bne	r2,zero,8112f19c <OSTimeDlyHMSM+0x74>
            if (seconds == 0) {
8112f184:	e0bffe03 	ldbu	r2,-8(fp)
8112f188:	1000041e 	bne	r2,zero,8112f19c <OSTimeDlyHMSM+0x74>
                if (ms == 0) {
8112f18c:	e0bfff0b 	ldhu	r2,-4(fp)
8112f190:	1000021e 	bne	r2,zero,8112f19c <OSTimeDlyHMSM+0x74>
                    return (OS_ERR_TIME_ZERO_DLY);
8112f194:	00801504 	movi	r2,84
8112f198:	00003706 	br	8112f278 <OSTimeDlyHMSM+0x150>
                }
            }
        }
    }
    if (minutes > 59) {
8112f19c:	e0bffd03 	ldbu	r2,-12(fp)
8112f1a0:	10800f30 	cmpltui	r2,r2,60
8112f1a4:	1000021e 	bne	r2,zero,8112f1b0 <OSTimeDlyHMSM+0x88>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
8112f1a8:	00801444 	movi	r2,81
8112f1ac:	00003206 	br	8112f278 <OSTimeDlyHMSM+0x150>
    }
    if (seconds > 59) {
8112f1b0:	e0bffe03 	ldbu	r2,-8(fp)
8112f1b4:	10800f30 	cmpltui	r2,r2,60
8112f1b8:	1000021e 	bne	r2,zero,8112f1c4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_SECONDS);
8112f1bc:	00801484 	movi	r2,82
8112f1c0:	00002d06 	br	8112f278 <OSTimeDlyHMSM+0x150>
    }
    if (ms > 999) {
8112f1c4:	e0bfff0b 	ldhu	r2,-4(fp)
8112f1c8:	1080fa30 	cmpltui	r2,r2,1000
8112f1cc:	1000021e 	bne	r2,zero,8112f1d8 <OSTimeDlyHMSM+0xb0>
        return (OS_ERR_TIME_INVALID_MS);
8112f1d0:	008014c4 	movi	r2,83
8112f1d4:	00002806 	br	8112f278 <OSTimeDlyHMSM+0x150>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112f1d8:	e0bffc03 	ldbu	r2,-16(fp)
8112f1dc:	10c38424 	muli	r3,r2,3600
8112f1e0:	e0bffd03 	ldbu	r2,-12(fp)
8112f1e4:	10800f24 	muli	r2,r2,60
8112f1e8:	1887883a 	add	r3,r3,r2
8112f1ec:	e0bffe03 	ldbu	r2,-8(fp)
8112f1f0:	1885883a 	add	r2,r3,r2
8112f1f4:	1100fa24 	muli	r4,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
8112f1f8:	e0bfff0b 	ldhu	r2,-4(fp)
8112f1fc:	10c0fa24 	muli	r3,r2,1000
8112f200:	008418b4 	movhi	r2,4194
8112f204:	109374c4 	addi	r2,r2,19923
8112f208:	188a383a 	mulxuu	r5,r3,r2
8112f20c:	1885383a 	mul	r2,r3,r2
8112f210:	1011883a 	mov	r8,r2
8112f214:	2813883a 	mov	r9,r5
8112f218:	4804d1ba 	srli	r2,r9,6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
8112f21c:	2085883a 	add	r2,r4,r2
8112f220:	e0bffb15 	stw	r2,-20(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
8112f224:	e0bffb17 	ldw	r2,-20(fp)
8112f228:	1004d43a 	srli	r2,r2,16
8112f22c:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
8112f230:	e0bffb17 	ldw	r2,-20(fp)
8112f234:	10bfffcc 	andi	r2,r2,65535
8112f238:	e0bffb15 	stw	r2,-20(fp)
    OSTimeDly((INT16U)ticks);
8112f23c:	e0bffb17 	ldw	r2,-20(fp)
8112f240:	10bfffcc 	andi	r2,r2,65535
8112f244:	1009883a 	mov	r4,r2
8112f248:	112f01c0 	call	8112f01c <OSTimeDly>
    while (loops > 0) {
8112f24c:	00000706 	br	8112f26c <OSTimeDlyHMSM+0x144>
        OSTimeDly((INT16U)32768u);
8112f250:	01200014 	movui	r4,32768
8112f254:	112f01c0 	call	8112f01c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
8112f258:	01200014 	movui	r4,32768
8112f25c:	112f01c0 	call	8112f01c <OSTimeDly>
        loops--;
8112f260:	e0bffa0b 	ldhu	r2,-24(fp)
8112f264:	10bfffc4 	addi	r2,r2,-1
8112f268:	e0bffa0d 	sth	r2,-24(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
8112f26c:	e0bffa0b 	ldhu	r2,-24(fp)
8112f270:	103ff71e 	bne	r2,zero,8112f250 <__reset+0xfb10f250>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
8112f274:	0005883a 	mov	r2,zero
}
8112f278:	e037883a 	mov	sp,fp
8112f27c:	dfc00117 	ldw	ra,4(sp)
8112f280:	df000017 	ldw	fp,0(sp)
8112f284:	dec00204 	addi	sp,sp,8
8112f288:	f800283a 	ret

8112f28c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
8112f28c:	defff504 	addi	sp,sp,-44
8112f290:	de00012e 	bgeu	sp,et,8112f298 <OSTimeDlyResume+0xc>
8112f294:	003b68fa 	trap	3
8112f298:	dfc00a15 	stw	ra,40(sp)
8112f29c:	df000915 	stw	fp,36(sp)
8112f2a0:	df000904 	addi	fp,sp,36
8112f2a4:	2005883a 	mov	r2,r4
8112f2a8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
8112f2ac:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
8112f2b0:	e0bfff03 	ldbu	r2,-4(fp)
8112f2b4:	10800a30 	cmpltui	r2,r2,40
8112f2b8:	1000021e 	bne	r2,zero,8112f2c4 <OSTimeDlyResume+0x38>
        return (OS_ERR_PRIO_INVALID);
8112f2bc:	00800a84 	movi	r2,42
8112f2c0:	00006406 	br	8112f454 <OSTimeDlyResume+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f2c4:	0005303a 	rdctl	r2,status
8112f2c8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f2cc:	e0fffe17 	ldw	r3,-8(fp)
8112f2d0:	00bfff84 	movi	r2,-2
8112f2d4:	1884703a 	and	r2,r3,r2
8112f2d8:	1001703a 	wrctl	status,r2
  
  return context;
8112f2dc:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
8112f2e0:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
8112f2e4:	e0ffff03 	ldbu	r3,-4(fp)
8112f2e8:	00a04574 	movhi	r2,33045
8112f2ec:	1087c004 	addi	r2,r2,7936
8112f2f0:	18c7883a 	add	r3,r3,r3
8112f2f4:	18c7883a 	add	r3,r3,r3
8112f2f8:	10c5883a 	add	r2,r2,r3
8112f2fc:	10800017 	ldw	r2,0(r2)
8112f300:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
8112f304:	e0bff917 	ldw	r2,-28(fp)
8112f308:	1000061e 	bne	r2,zero,8112f324 <OSTimeDlyResume+0x98>
8112f30c:	e0bff717 	ldw	r2,-36(fp)
8112f310:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f314:	e0bff817 	ldw	r2,-32(fp)
8112f318:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112f31c:	008010c4 	movi	r2,67
8112f320:	00004c06 	br	8112f454 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb == OS_TCB_RESERVED) {
8112f324:	e0bff917 	ldw	r2,-28(fp)
8112f328:	10800058 	cmpnei	r2,r2,1
8112f32c:	1000061e 	bne	r2,zero,8112f348 <OSTimeDlyResume+0xbc>
8112f330:	e0bff717 	ldw	r2,-36(fp)
8112f334:	e0bffa15 	stw	r2,-24(fp)
8112f338:	e0bffa17 	ldw	r2,-24(fp)
8112f33c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
8112f340:	008010c4 	movi	r2,67
8112f344:	00004306 	br	8112f454 <OSTimeDlyResume+0x1c8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
8112f348:	e0bff917 	ldw	r2,-28(fp)
8112f34c:	10800b8b 	ldhu	r2,46(r2)
8112f350:	10bfffcc 	andi	r2,r2,65535
8112f354:	1000061e 	bne	r2,zero,8112f370 <OSTimeDlyResume+0xe4>
8112f358:	e0bff717 	ldw	r2,-36(fp)
8112f35c:	e0bffb15 	stw	r2,-20(fp)
8112f360:	e0bffb17 	ldw	r2,-20(fp)
8112f364:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
8112f368:	00801404 	movi	r2,80
8112f36c:	00003906 	br	8112f454 <OSTimeDlyResume+0x1c8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
8112f370:	e0bff917 	ldw	r2,-28(fp)
8112f374:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
8112f378:	e0bff917 	ldw	r2,-28(fp)
8112f37c:	10800c03 	ldbu	r2,48(r2)
8112f380:	10803fcc 	andi	r2,r2,255
8112f384:	10800dcc 	andi	r2,r2,55
8112f388:	10000b26 	beq	r2,zero,8112f3b8 <OSTimeDlyResume+0x12c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
8112f38c:	e0bff917 	ldw	r2,-28(fp)
8112f390:	10c00c03 	ldbu	r3,48(r2)
8112f394:	00bff204 	movi	r2,-56
8112f398:	1884703a 	and	r2,r3,r2
8112f39c:	1007883a 	mov	r3,r2
8112f3a0:	e0bff917 	ldw	r2,-28(fp)
8112f3a4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
8112f3a8:	e0bff917 	ldw	r2,-28(fp)
8112f3ac:	00c00044 	movi	r3,1
8112f3b0:	10c00c45 	stb	r3,49(r2)
8112f3b4:	00000206 	br	8112f3c0 <OSTimeDlyResume+0x134>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
8112f3b8:	e0bff917 	ldw	r2,-28(fp)
8112f3bc:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
8112f3c0:	e0bff917 	ldw	r2,-28(fp)
8112f3c4:	10800c03 	ldbu	r2,48(r2)
8112f3c8:	10803fcc 	andi	r2,r2,255
8112f3cc:	1080020c 	andi	r2,r2,8
8112f3d0:	10001b1e 	bne	r2,zero,8112f440 <OSTimeDlyResume+0x1b4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
8112f3d4:	e0bff917 	ldw	r2,-28(fp)
8112f3d8:	10c00d83 	ldbu	r3,54(r2)
8112f3dc:	d0a08003 	ldbu	r2,-32256(gp)
8112f3e0:	1884b03a 	or	r2,r3,r2
8112f3e4:	d0a08005 	stb	r2,-32256(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
8112f3e8:	e0bff917 	ldw	r2,-28(fp)
8112f3ec:	10800d03 	ldbu	r2,52(r2)
8112f3f0:	10c03fcc 	andi	r3,r2,255
8112f3f4:	e0bff917 	ldw	r2,-28(fp)
8112f3f8:	10800d03 	ldbu	r2,52(r2)
8112f3fc:	11003fcc 	andi	r4,r2,255
8112f400:	d0a08044 	addi	r2,gp,-32255
8112f404:	2085883a 	add	r2,r4,r2
8112f408:	11000003 	ldbu	r4,0(r2)
8112f40c:	e0bff917 	ldw	r2,-28(fp)
8112f410:	10800d43 	ldbu	r2,53(r2)
8112f414:	2084b03a 	or	r2,r4,r2
8112f418:	1009883a 	mov	r4,r2
8112f41c:	d0a08044 	addi	r2,gp,-32255
8112f420:	1885883a 	add	r2,r3,r2
8112f424:	11000005 	stb	r4,0(r2)
8112f428:	e0bff717 	ldw	r2,-36(fp)
8112f42c:	e0bffc15 	stw	r2,-16(fp)
8112f430:	e0bffc17 	ldw	r2,-16(fp)
8112f434:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
8112f438:	11282e00 	call	811282e0 <OS_Sched>
8112f43c:	00000406 	br	8112f450 <OSTimeDlyResume+0x1c4>
8112f440:	e0bff717 	ldw	r2,-36(fp)
8112f444:	e0bffd15 	stw	r2,-12(fp)
8112f448:	e0bffd17 	ldw	r2,-12(fp)
8112f44c:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
8112f450:	0005883a 	mov	r2,zero
}
8112f454:	e037883a 	mov	sp,fp
8112f458:	dfc00117 	ldw	ra,4(sp)
8112f45c:	df000017 	ldw	fp,0(sp)
8112f460:	dec00204 	addi	sp,sp,8
8112f464:	f800283a 	ret

8112f468 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
8112f468:	defffb04 	addi	sp,sp,-20
8112f46c:	de00012e 	bgeu	sp,et,8112f474 <OSTimeGet+0xc>
8112f470:	003b68fa 	trap	3
8112f474:	df000415 	stw	fp,16(sp)
8112f478:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f47c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f480:	0005303a 	rdctl	r2,status
8112f484:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f488:	e0fffe17 	ldw	r3,-8(fp)
8112f48c:	00bfff84 	movi	r2,-2
8112f490:	1884703a 	and	r2,r3,r2
8112f494:	1001703a 	wrctl	status,r2
  
  return context;
8112f498:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
8112f49c:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
8112f4a0:	d0a08617 	ldw	r2,-32232(gp)
8112f4a4:	e0bffd15 	stw	r2,-12(fp)
8112f4a8:	e0bffc17 	ldw	r2,-16(fp)
8112f4ac:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f4b0:	e0bfff17 	ldw	r2,-4(fp)
8112f4b4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
8112f4b8:	e0bffd17 	ldw	r2,-12(fp)
}
8112f4bc:	e037883a 	mov	sp,fp
8112f4c0:	df000017 	ldw	fp,0(sp)
8112f4c4:	dec00104 	addi	sp,sp,4
8112f4c8:	f800283a 	ret

8112f4cc <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
8112f4cc:	defffb04 	addi	sp,sp,-20
8112f4d0:	de00012e 	bgeu	sp,et,8112f4d8 <OSTimeSet+0xc>
8112f4d4:	003b68fa 	trap	3
8112f4d8:	df000415 	stw	fp,16(sp)
8112f4dc:	df000404 	addi	fp,sp,16
8112f4e0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
8112f4e4:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8112f4e8:	0005303a 	rdctl	r2,status
8112f4ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8112f4f0:	e0fffd17 	ldw	r3,-12(fp)
8112f4f4:	00bfff84 	movi	r2,-2
8112f4f8:	1884703a 	and	r2,r3,r2
8112f4fc:	1001703a 	wrctl	status,r2
  
  return context;
8112f500:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
8112f504:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
8112f508:	e0bfff17 	ldw	r2,-4(fp)
8112f50c:	d0a08615 	stw	r2,-32232(gp)
8112f510:	e0bffc17 	ldw	r2,-16(fp)
8112f514:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8112f518:	e0bffe17 	ldw	r2,-8(fp)
8112f51c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
8112f520:	0001883a 	nop
8112f524:	e037883a 	mov	sp,fp
8112f528:	df000017 	ldw	fp,0(sp)
8112f52c:	dec00104 	addi	sp,sp,4
8112f530:	f800283a 	ret

8112f534 <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
8112f534:	defff804 	addi	sp,sp,-32
8112f538:	de00012e 	bgeu	sp,et,8112f540 <OSTmrCreate+0xc>
8112f53c:	003b68fa 	trap	3
8112f540:	dfc00715 	stw	ra,28(sp)
8112f544:	df000615 	stw	fp,24(sp)
8112f548:	df000604 	addi	fp,sp,24
8112f54c:	e13ffc15 	stw	r4,-16(fp)
8112f550:	e17ffd15 	stw	r5,-12(fp)
8112f554:	3005883a 	mov	r2,r6
8112f558:	e1ffff15 	stw	r7,-4(fp)
8112f55c:	e0bffe05 	stb	r2,-8(fp)
    INT8U     len;
#endif


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112f560:	e0800417 	ldw	r2,16(fp)
8112f564:	1000021e 	bne	r2,zero,8112f570 <OSTmrCreate+0x3c>
        return ((OS_TMR *)0);
8112f568:	0005883a 	mov	r2,zero
8112f56c:	00005d06 	br	8112f6e4 <OSTmrCreate+0x1b0>
    }
    switch (opt) {
8112f570:	e0bffe03 	ldbu	r2,-8(fp)
8112f574:	10c00060 	cmpeqi	r3,r2,1
8112f578:	1800091e 	bne	r3,zero,8112f5a0 <OSTmrCreate+0x6c>
8112f57c:	108000a0 	cmpeqi	r2,r2,2
8112f580:	10000e26 	beq	r2,zero,8112f5bc <OSTmrCreate+0x88>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
8112f584:	e0bffd17 	ldw	r2,-12(fp)
8112f588:	1000111e 	bne	r2,zero,8112f5d0 <OSTmrCreate+0x9c>
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
8112f58c:	e0800417 	ldw	r2,16(fp)
8112f590:	00ffe0c4 	movi	r3,-125
8112f594:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8112f598:	0005883a 	mov	r2,zero
8112f59c:	00005106 	br	8112f6e4 <OSTmrCreate+0x1b0>
             }
             break;

        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
8112f5a0:	e0bffc17 	ldw	r2,-16(fp)
8112f5a4:	10000c1e 	bne	r2,zero,8112f5d8 <OSTmrCreate+0xa4>
                 *perr = OS_ERR_TMR_INVALID_DLY;
8112f5a8:	e0800417 	ldw	r2,16(fp)
8112f5ac:	00ffe084 	movi	r3,-126
8112f5b0:	10c00005 	stb	r3,0(r2)
                 return ((OS_TMR *)0);
8112f5b4:	0005883a 	mov	r2,zero
8112f5b8:	00004a06 	br	8112f6e4 <OSTmrCreate+0x1b0>
             }
             break;

        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
8112f5bc:	e0800417 	ldw	r2,16(fp)
8112f5c0:	00ffe104 	movi	r3,-124
8112f5c4:	10c00005 	stb	r3,0(r2)
             return ((OS_TMR *)0);
8112f5c8:	0005883a 	mov	r2,zero
8112f5cc:	00004506 	br	8112f6e4 <OSTmrCreate+0x1b0>
        case OS_TMR_OPT_PERIODIC:
             if (period == 0) {
                 *perr = OS_ERR_TMR_INVALID_PERIOD;
                 return ((OS_TMR *)0);
             }
             break;
8112f5d0:	0001883a 	nop
8112f5d4:	00000106 	br	8112f5dc <OSTmrCreate+0xa8>
        case OS_TMR_OPT_ONE_SHOT:
             if (dly == 0) {
                 *perr = OS_ERR_TMR_INVALID_DLY;
                 return ((OS_TMR *)0);
             }
             break;
8112f5d8:	0001883a 	nop
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112f5dc:	d0a08303 	ldbu	r2,-32244(gp)
8112f5e0:	10803fcc 	andi	r2,r2,255
8112f5e4:	10000526 	beq	r2,zero,8112f5fc <OSTmrCreate+0xc8>
        *perr  = OS_ERR_TMR_ISR;
8112f5e8:	e0800417 	ldw	r2,16(fp)
8112f5ec:	00ffe2c4 	movi	r3,-117
8112f5f0:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
8112f5f4:	0005883a 	mov	r2,zero
8112f5f8:	00003a06 	br	8112f6e4 <OSTmrCreate+0x1b0>
    }
    OSTmr_Lock();
8112f5fc:	11304ec0 	call	811304ec <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
8112f600:	112ff8c0 	call	8112ff8c <OSTmr_Alloc>
8112f604:	e0bffa15 	stw	r2,-24(fp)
    if (ptmr == (OS_TMR *)0) {
8112f608:	e0bffa17 	ldw	r2,-24(fp)
8112f60c:	1000061e 	bne	r2,zero,8112f628 <OSTmrCreate+0xf4>
        OSTmr_Unlock();
8112f610:	11305300 	call	81130530 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
8112f614:	e0800417 	ldw	r2,16(fp)
8112f618:	00ffe184 	movi	r3,-122
8112f61c:	10c00005 	stb	r3,0(r2)
        return ((OS_TMR *)0);
8112f620:	0005883a 	mov	r2,zero
8112f624:	00002f06 	br	8112f6e4 <OSTmrCreate+0x1b0>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
8112f628:	e0bffa17 	ldw	r2,-24(fp)
8112f62c:	00c00044 	movi	r3,1
8112f630:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrDly         = dly;
8112f634:	e0bffa17 	ldw	r2,-24(fp)
8112f638:	e0fffc17 	ldw	r3,-16(fp)
8112f63c:	10c00615 	stw	r3,24(r2)
    ptmr->OSTmrPeriod      = period;
8112f640:	e0bffa17 	ldw	r2,-24(fp)
8112f644:	e0fffd17 	ldw	r3,-12(fp)
8112f648:	10c00715 	stw	r3,28(r2)
    ptmr->OSTmrOpt         = opt;
8112f64c:	e0bffa17 	ldw	r2,-24(fp)
8112f650:	e0fffe03 	ldbu	r3,-8(fp)
8112f654:	10c00c05 	stb	r3,48(r2)
    ptmr->OSTmrCallback    = callback;
8112f658:	e0bffa17 	ldw	r2,-24(fp)
8112f65c:	e0ffff17 	ldw	r3,-4(fp)
8112f660:	10c00115 	stw	r3,4(r2)
    ptmr->OSTmrCallbackArg = callback_arg;
8112f664:	e0bffa17 	ldw	r2,-24(fp)
8112f668:	e0c00217 	ldw	r3,8(fp)
8112f66c:	10c00215 	stw	r3,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
8112f670:	e0800317 	ldw	r2,12(fp)
8112f674:	10001726 	beq	r2,zero,8112f6d4 <OSTmrCreate+0x1a0>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
8112f678:	e1000317 	ldw	r4,12(fp)
8112f67c:	11284b00 	call	811284b0 <OS_StrLen>
8112f680:	e0bffb05 	stb	r2,-20(fp)
        if (len < OS_TMR_CFG_NAME_SIZE) {
8112f684:	e0bffb03 	ldbu	r2,-20(fp)
8112f688:	10800428 	cmpgeui	r2,r2,16
8112f68c:	1000061e 	bne	r2,zero,8112f6a8 <OSTmrCreate+0x174>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
8112f690:	e0bffa17 	ldw	r2,-24(fp)
8112f694:	10800804 	addi	r2,r2,32
8112f698:	e1400317 	ldw	r5,12(fp)
8112f69c:	1009883a 	mov	r4,r2
8112f6a0:	11284340 	call	81128434 <OS_StrCopy>
8112f6a4:	00000b06 	br	8112f6d4 <OSTmrCreate+0x1a0>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
8112f6a8:	e0bffa17 	ldw	r2,-24(fp)
8112f6ac:	00c008c4 	movi	r3,35
8112f6b0:	10c00805 	stb	r3,32(r2)
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
8112f6b4:	e0bffa17 	ldw	r2,-24(fp)
8112f6b8:	10000845 	stb	zero,33(r2)
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
8112f6bc:	e0800417 	ldw	r2,16(fp)
8112f6c0:	00ffe304 	movi	r3,-116
8112f6c4:	10c00005 	stb	r3,0(r2)
            OSTmr_Unlock();
8112f6c8:	11305300 	call	81130530 <OSTmr_Unlock>
            return (ptmr);
8112f6cc:	e0bffa17 	ldw	r2,-24(fp)
8112f6d0:	00000406 	br	8112f6e4 <OSTmrCreate+0x1b0>
        }
    }
#endif
    OSTmr_Unlock();
8112f6d4:	11305300 	call	81130530 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
8112f6d8:	e0800417 	ldw	r2,16(fp)
8112f6dc:	10000005 	stb	zero,0(r2)
    return (ptmr);
8112f6e0:	e0bffa17 	ldw	r2,-24(fp)
}
8112f6e4:	e037883a 	mov	sp,fp
8112f6e8:	dfc00117 	ldw	ra,4(sp)
8112f6ec:	df000017 	ldw	fp,0(sp)
8112f6f0:	dec00204 	addi	sp,sp,8
8112f6f4:	f800283a 	ret

8112f6f8 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
8112f6f8:	defffc04 	addi	sp,sp,-16
8112f6fc:	de00012e 	bgeu	sp,et,8112f704 <OSTmrDel+0xc>
8112f700:	003b68fa 	trap	3
8112f704:	dfc00315 	stw	ra,12(sp)
8112f708:	df000215 	stw	fp,8(sp)
8112f70c:	df000204 	addi	fp,sp,8
8112f710:	e13ffe15 	stw	r4,-8(fp)
8112f714:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112f718:	e0bfff17 	ldw	r2,-4(fp)
8112f71c:	1000021e 	bne	r2,zero,8112f728 <OSTmrDel+0x30>
        return (OS_FALSE);
8112f720:	0005883a 	mov	r2,zero
8112f724:	00003f06 	br	8112f824 <OSTmrDel+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8112f728:	e0bffe17 	ldw	r2,-8(fp)
8112f72c:	1000051e 	bne	r2,zero,8112f744 <OSTmrDel+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112f730:	e0bfff17 	ldw	r2,-4(fp)
8112f734:	00ffe284 	movi	r3,-118
8112f738:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f73c:	0005883a 	mov	r2,zero
8112f740:	00003806 	br	8112f824 <OSTmrDel+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
8112f744:	e0bffe17 	ldw	r2,-8(fp)
8112f748:	10800003 	ldbu	r2,0(r2)
8112f74c:	10803fcc 	andi	r2,r2,255
8112f750:	10801920 	cmpeqi	r2,r2,100
8112f754:	1000051e 	bne	r2,zero,8112f76c <OSTmrDel+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112f758:	e0bfff17 	ldw	r2,-4(fp)
8112f75c:	00ffe244 	movi	r3,-119
8112f760:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f764:	0005883a 	mov	r2,zero
8112f768:	00002e06 	br	8112f824 <OSTmrDel+0x12c>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112f76c:	d0a08303 	ldbu	r2,-32244(gp)
8112f770:	10803fcc 	andi	r2,r2,255
8112f774:	10000526 	beq	r2,zero,8112f78c <OSTmrDel+0x94>
        *perr  = OS_ERR_TMR_ISR;
8112f778:	e0bfff17 	ldw	r2,-4(fp)
8112f77c:	00ffe2c4 	movi	r3,-117
8112f780:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112f784:	0005883a 	mov	r2,zero
8112f788:	00002606 	br	8112f824 <OSTmrDel+0x12c>
    }
    OSTmr_Lock();
8112f78c:	11304ec0 	call	811304ec <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112f790:	e0bffe17 	ldw	r2,-8(fp)
8112f794:	10800c43 	ldbu	r2,49(r2)
8112f798:	10803fcc 	andi	r2,r2,255
8112f79c:	10c000c8 	cmpgei	r3,r2,3
8112f7a0:	1800031e 	bne	r3,zero,8112f7b0 <OSTmrDel+0xb8>
8112f7a4:	00800d16 	blt	zero,r2,8112f7dc <OSTmrDel+0xe4>
8112f7a8:	10001326 	beq	r2,zero,8112f7f8 <OSTmrDel+0x100>
8112f7ac:	00001806 	br	8112f810 <OSTmrDel+0x118>
8112f7b0:	108000e0 	cmpeqi	r2,r2,3
8112f7b4:	10001626 	beq	r2,zero,8112f810 <OSTmrDel+0x118>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
8112f7b8:	e13ffe17 	ldw	r4,-8(fp)
8112f7bc:	11303f00 	call	811303f0 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
8112f7c0:	e13ffe17 	ldw	r4,-8(fp)
8112f7c4:	11300000 	call	81130000 <OSTmr_Free>
             OSTmr_Unlock();
8112f7c8:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112f7cc:	e0bfff17 	ldw	r2,-4(fp)
8112f7d0:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112f7d4:	00800044 	movi	r2,1
8112f7d8:	00001206 	br	8112f824 <OSTmrDel+0x12c>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
8112f7dc:	e13ffe17 	ldw	r4,-8(fp)
8112f7e0:	11300000 	call	81130000 <OSTmr_Free>
             OSTmr_Unlock();
8112f7e4:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112f7e8:	e0bfff17 	ldw	r2,-4(fp)
8112f7ec:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112f7f0:	00800044 	movi	r2,1
8112f7f4:	00000b06 	br	8112f824 <OSTmrDel+0x12c>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
8112f7f8:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112f7fc:	e0bfff17 	ldw	r2,-4(fp)
8112f800:	00ffe1c4 	movi	r3,-121
8112f804:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112f808:	0005883a 	mov	r2,zero
8112f80c:	00000506 	br	8112f824 <OSTmrDel+0x12c>

        default:
             OSTmr_Unlock();
8112f810:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112f814:	e0bfff17 	ldw	r2,-4(fp)
8112f818:	00ffe344 	movi	r3,-115
8112f81c:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112f820:	0005883a 	mov	r2,zero
    }
}
8112f824:	e037883a 	mov	sp,fp
8112f828:	dfc00117 	ldw	ra,4(sp)
8112f82c:	df000017 	ldw	fp,0(sp)
8112f830:	dec00204 	addi	sp,sp,8
8112f834:	f800283a 	ret

8112f838 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
8112f838:	defffa04 	addi	sp,sp,-24
8112f83c:	de00012e 	bgeu	sp,et,8112f844 <OSTmrNameGet+0xc>
8112f840:	003b68fa 	trap	3
8112f844:	dfc00515 	stw	ra,20(sp)
8112f848:	df000415 	stw	fp,16(sp)
8112f84c:	df000404 	addi	fp,sp,16
8112f850:	e13ffd15 	stw	r4,-12(fp)
8112f854:	e17ffe15 	stw	r5,-8(fp)
8112f858:	e1bfff15 	stw	r6,-4(fp)
    INT8U  len;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112f85c:	e0bfff17 	ldw	r2,-4(fp)
8112f860:	1000021e 	bne	r2,zero,8112f86c <OSTmrNameGet+0x34>
        return (0);
8112f864:	0005883a 	mov	r2,zero
8112f868:	00003e06 	br	8112f964 <OSTmrNameGet+0x12c>
    }
    if (pdest == (INT8U *)0) {
8112f86c:	e0bffe17 	ldw	r2,-8(fp)
8112f870:	1000051e 	bne	r2,zero,8112f888 <OSTmrNameGet+0x50>
        *perr = OS_ERR_TMR_INVALID_DEST;
8112f874:	e0bfff17 	ldw	r2,-4(fp)
8112f878:	00ffe204 	movi	r3,-120
8112f87c:	10c00005 	stb	r3,0(r2)
        return (0);
8112f880:	0005883a 	mov	r2,zero
8112f884:	00003706 	br	8112f964 <OSTmrNameGet+0x12c>
    }
    if (ptmr == (OS_TMR *)0) {
8112f888:	e0bffd17 	ldw	r2,-12(fp)
8112f88c:	1000051e 	bne	r2,zero,8112f8a4 <OSTmrNameGet+0x6c>
        *perr = OS_ERR_TMR_INVALID;
8112f890:	e0bfff17 	ldw	r2,-4(fp)
8112f894:	00ffe284 	movi	r3,-118
8112f898:	10c00005 	stb	r3,0(r2)
        return (0);
8112f89c:	0005883a 	mov	r2,zero
8112f8a0:	00003006 	br	8112f964 <OSTmrNameGet+0x12c>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112f8a4:	e0bffd17 	ldw	r2,-12(fp)
8112f8a8:	10800003 	ldbu	r2,0(r2)
8112f8ac:	10803fcc 	andi	r2,r2,255
8112f8b0:	10801920 	cmpeqi	r2,r2,100
8112f8b4:	1000051e 	bne	r2,zero,8112f8cc <OSTmrNameGet+0x94>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112f8b8:	e0bfff17 	ldw	r2,-4(fp)
8112f8bc:	00ffe244 	movi	r3,-119
8112f8c0:	10c00005 	stb	r3,0(r2)
        return (0);
8112f8c4:	0005883a 	mov	r2,zero
8112f8c8:	00002606 	br	8112f964 <OSTmrNameGet+0x12c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112f8cc:	d0a08303 	ldbu	r2,-32244(gp)
8112f8d0:	10803fcc 	andi	r2,r2,255
8112f8d4:	10000526 	beq	r2,zero,8112f8ec <OSTmrNameGet+0xb4>
        *perr = OS_ERR_NAME_GET_ISR;
8112f8d8:	e0bfff17 	ldw	r2,-4(fp)
8112f8dc:	00c00444 	movi	r3,17
8112f8e0:	10c00005 	stb	r3,0(r2)
        return (0);
8112f8e4:	0005883a 	mov	r2,zero
8112f8e8:	00001e06 	br	8112f964 <OSTmrNameGet+0x12c>
    }
    OSTmr_Lock();
8112f8ec:	11304ec0 	call	811304ec <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112f8f0:	e0bffd17 	ldw	r2,-12(fp)
8112f8f4:	10800c43 	ldbu	r2,49(r2)
8112f8f8:	10803fcc 	andi	r2,r2,255
8112f8fc:	10000e26 	beq	r2,zero,8112f938 <OSTmrNameGet+0x100>
8112f900:	10001316 	blt	r2,zero,8112f950 <OSTmrNameGet+0x118>
8112f904:	10800108 	cmpgei	r2,r2,4
8112f908:	1000111e 	bne	r2,zero,8112f950 <OSTmrNameGet+0x118>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
8112f90c:	e0bffd17 	ldw	r2,-12(fp)
8112f910:	10800804 	addi	r2,r2,32
8112f914:	100b883a 	mov	r5,r2
8112f918:	e13ffe17 	ldw	r4,-8(fp)
8112f91c:	11284340 	call	81128434 <OS_StrCopy>
8112f920:	e0bffc05 	stb	r2,-16(fp)
             OSTmr_Unlock();
8112f924:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112f928:	e0bfff17 	ldw	r2,-4(fp)
8112f92c:	10000005 	stb	zero,0(r2)
             return (len);
8112f930:	e0bffc03 	ldbu	r2,-16(fp)
8112f934:	00000b06 	br	8112f964 <OSTmrNameGet+0x12c>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
8112f938:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112f93c:	e0bfff17 	ldw	r2,-4(fp)
8112f940:	00ffe1c4 	movi	r3,-121
8112f944:	10c00005 	stb	r3,0(r2)
             return (0);
8112f948:	0005883a 	mov	r2,zero
8112f94c:	00000506 	br	8112f964 <OSTmrNameGet+0x12c>

        default:
             OSTmr_Unlock();
8112f950:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112f954:	e0bfff17 	ldw	r2,-4(fp)
8112f958:	00ffe344 	movi	r3,-115
8112f95c:	10c00005 	stb	r3,0(r2)
             return (0);
8112f960:	0005883a 	mov	r2,zero
    }
}
8112f964:	e037883a 	mov	sp,fp
8112f968:	dfc00117 	ldw	ra,4(sp)
8112f96c:	df000017 	ldw	fp,0(sp)
8112f970:	dec00204 	addi	sp,sp,8
8112f974:	f800283a 	ret

8112f978 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
8112f978:	defffb04 	addi	sp,sp,-20
8112f97c:	de00012e 	bgeu	sp,et,8112f984 <OSTmrRemainGet+0xc>
8112f980:	003b68fa 	trap	3
8112f984:	dfc00415 	stw	ra,16(sp)
8112f988:	df000315 	stw	fp,12(sp)
8112f98c:	df000304 	addi	fp,sp,12
8112f990:	e13ffe15 	stw	r4,-8(fp)
8112f994:	e17fff15 	stw	r5,-4(fp)
    INT32U  remain;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112f998:	e0bfff17 	ldw	r2,-4(fp)
8112f99c:	1000021e 	bne	r2,zero,8112f9a8 <OSTmrRemainGet+0x30>
        return (0);
8112f9a0:	0005883a 	mov	r2,zero
8112f9a4:	00005d06 	br	8112fb1c <OSTmrRemainGet+0x1a4>
    }
    if (ptmr == (OS_TMR *)0) {
8112f9a8:	e0bffe17 	ldw	r2,-8(fp)
8112f9ac:	1000051e 	bne	r2,zero,8112f9c4 <OSTmrRemainGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112f9b0:	e0bfff17 	ldw	r2,-4(fp)
8112f9b4:	00ffe284 	movi	r3,-118
8112f9b8:	10c00005 	stb	r3,0(r2)
        return (0);
8112f9bc:	0005883a 	mov	r2,zero
8112f9c0:	00005606 	br	8112fb1c <OSTmrRemainGet+0x1a4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112f9c4:	e0bffe17 	ldw	r2,-8(fp)
8112f9c8:	10800003 	ldbu	r2,0(r2)
8112f9cc:	10803fcc 	andi	r2,r2,255
8112f9d0:	10801920 	cmpeqi	r2,r2,100
8112f9d4:	1000051e 	bne	r2,zero,8112f9ec <OSTmrRemainGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112f9d8:	e0bfff17 	ldw	r2,-4(fp)
8112f9dc:	00ffe244 	movi	r3,-119
8112f9e0:	10c00005 	stb	r3,0(r2)
        return (0);
8112f9e4:	0005883a 	mov	r2,zero
8112f9e8:	00004c06 	br	8112fb1c <OSTmrRemainGet+0x1a4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112f9ec:	d0a08303 	ldbu	r2,-32244(gp)
8112f9f0:	10803fcc 	andi	r2,r2,255
8112f9f4:	10000526 	beq	r2,zero,8112fa0c <OSTmrRemainGet+0x94>
        *perr = OS_ERR_TMR_ISR;
8112f9f8:	e0bfff17 	ldw	r2,-4(fp)
8112f9fc:	00ffe2c4 	movi	r3,-117
8112fa00:	10c00005 	stb	r3,0(r2)
        return (0);
8112fa04:	0005883a 	mov	r2,zero
8112fa08:	00004406 	br	8112fb1c <OSTmrRemainGet+0x1a4>
    }
    OSTmr_Lock();
8112fa0c:	11304ec0 	call	811304ec <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112fa10:	e0bffe17 	ldw	r2,-8(fp)
8112fa14:	10800c43 	ldbu	r2,49(r2)
8112fa18:	10803fcc 	andi	r2,r2,255
8112fa1c:	10c00060 	cmpeqi	r3,r2,1
8112fa20:	1800121e 	bne	r3,zero,8112fa6c <OSTmrRemainGet+0xf4>
8112fa24:	10c00088 	cmpgei	r3,r2,2
8112fa28:	1800021e 	bne	r3,zero,8112fa34 <OSTmrRemainGet+0xbc>
8112fa2c:	10003026 	beq	r2,zero,8112faf0 <OSTmrRemainGet+0x178>
8112fa30:	00003506 	br	8112fb08 <OSTmrRemainGet+0x190>
8112fa34:	10c000a0 	cmpeqi	r3,r2,2
8112fa38:	1800281e 	bne	r3,zero,8112fadc <OSTmrRemainGet+0x164>
8112fa3c:	108000e0 	cmpeqi	r2,r2,3
8112fa40:	10003126 	beq	r2,zero,8112fb08 <OSTmrRemainGet+0x190>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
8112fa44:	e0bffe17 	ldw	r2,-8(fp)
8112fa48:	10c00517 	ldw	r3,20(r2)
8112fa4c:	d0a08517 	ldw	r2,-32236(gp)
8112fa50:	1885c83a 	sub	r2,r3,r2
8112fa54:	e0bffd15 	stw	r2,-12(fp)
             OSTmr_Unlock();
8112fa58:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
8112fa5c:	e0bfff17 	ldw	r2,-4(fp)
8112fa60:	10000005 	stb	zero,0(r2)
             return (remain);
8112fa64:	e0bffd17 	ldw	r2,-12(fp)
8112fa68:	00002c06 	br	8112fb1c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
8112fa6c:	e0bffe17 	ldw	r2,-8(fp)
8112fa70:	10800c03 	ldbu	r2,48(r2)
8112fa74:	10803fcc 	andi	r2,r2,255
8112fa78:	108000a0 	cmpeqi	r2,r2,2
8112fa7c:	10000e26 	beq	r2,zero,8112fab8 <OSTmrRemainGet+0x140>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
8112fa80:	e0bffe17 	ldw	r2,-8(fp)
8112fa84:	10800617 	ldw	r2,24(r2)
8112fa88:	1000041e 	bne	r2,zero,8112fa9c <OSTmrRemainGet+0x124>
                          remain = ptmr->OSTmrPeriod;
8112fa8c:	e0bffe17 	ldw	r2,-8(fp)
8112fa90:	10800717 	ldw	r2,28(r2)
8112fa94:	e0bffd15 	stw	r2,-12(fp)
8112fa98:	00000306 	br	8112faa8 <OSTmrRemainGet+0x130>
                      } else {
                          remain = ptmr->OSTmrDly;
8112fa9c:	e0bffe17 	ldw	r2,-8(fp)
8112faa0:	10800617 	ldw	r2,24(r2)
8112faa4:	e0bffd15 	stw	r2,-12(fp)
                      }
                      OSTmr_Unlock();
8112faa8:	11305300 	call	81130530 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
8112faac:	e0bfff17 	ldw	r2,-4(fp)
8112fab0:	10000005 	stb	zero,0(r2)
                      break;
8112fab4:	00000706 	br	8112fad4 <OSTmrRemainGet+0x15c>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
8112fab8:	e0bffe17 	ldw	r2,-8(fp)
8112fabc:	10800617 	ldw	r2,24(r2)
8112fac0:	e0bffd15 	stw	r2,-12(fp)
                      OSTmr_Unlock();
8112fac4:	11305300 	call	81130530 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
8112fac8:	e0bfff17 	ldw	r2,-4(fp)
8112facc:	10000005 	stb	zero,0(r2)
                      break;
8112fad0:	0001883a 	nop
             }
             return (remain);
8112fad4:	e0bffd17 	ldw	r2,-12(fp)
8112fad8:	00001006 	br	8112fb1c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
8112fadc:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112fae0:	e0bfff17 	ldw	r2,-4(fp)
8112fae4:	10000005 	stb	zero,0(r2)
             return (0);
8112fae8:	0005883a 	mov	r2,zero
8112faec:	00000b06 	br	8112fb1c <OSTmrRemainGet+0x1a4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
8112faf0:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112faf4:	e0bfff17 	ldw	r2,-4(fp)
8112faf8:	00ffe1c4 	movi	r3,-121
8112fafc:	10c00005 	stb	r3,0(r2)
             return (0);
8112fb00:	0005883a 	mov	r2,zero
8112fb04:	00000506 	br	8112fb1c <OSTmrRemainGet+0x1a4>

        default:
             OSTmr_Unlock();
8112fb08:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112fb0c:	e0bfff17 	ldw	r2,-4(fp)
8112fb10:	00ffe344 	movi	r3,-115
8112fb14:	10c00005 	stb	r3,0(r2)
             return (0);
8112fb18:	0005883a 	mov	r2,zero
    }
}
8112fb1c:	e037883a 	mov	sp,fp
8112fb20:	dfc00117 	ldw	ra,4(sp)
8112fb24:	df000017 	ldw	fp,0(sp)
8112fb28:	dec00204 	addi	sp,sp,8
8112fb2c:	f800283a 	ret

8112fb30 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
8112fb30:	defffb04 	addi	sp,sp,-20
8112fb34:	de00012e 	bgeu	sp,et,8112fb3c <OSTmrStateGet+0xc>
8112fb38:	003b68fa 	trap	3
8112fb3c:	dfc00415 	stw	ra,16(sp)
8112fb40:	df000315 	stw	fp,12(sp)
8112fb44:	df000304 	addi	fp,sp,12
8112fb48:	e13ffe15 	stw	r4,-8(fp)
8112fb4c:	e17fff15 	stw	r5,-4(fp)
    INT8U  state;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {
8112fb50:	e0bfff17 	ldw	r2,-4(fp)
8112fb54:	1000021e 	bne	r2,zero,8112fb60 <OSTmrStateGet+0x30>
        return (0);
8112fb58:	0005883a 	mov	r2,zero
8112fb5c:	00002a06 	br	8112fc08 <OSTmrStateGet+0xd8>
    }
    if (ptmr == (OS_TMR *)0) {
8112fb60:	e0bffe17 	ldw	r2,-8(fp)
8112fb64:	1000051e 	bne	r2,zero,8112fb7c <OSTmrStateGet+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112fb68:	e0bfff17 	ldw	r2,-4(fp)
8112fb6c:	00ffe284 	movi	r3,-118
8112fb70:	10c00005 	stb	r3,0(r2)
        return (0);
8112fb74:	0005883a 	mov	r2,zero
8112fb78:	00002306 	br	8112fc08 <OSTmrStateGet+0xd8>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
8112fb7c:	e0bffe17 	ldw	r2,-8(fp)
8112fb80:	10800003 	ldbu	r2,0(r2)
8112fb84:	10803fcc 	andi	r2,r2,255
8112fb88:	10801920 	cmpeqi	r2,r2,100
8112fb8c:	1000051e 	bne	r2,zero,8112fba4 <OSTmrStateGet+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112fb90:	e0bfff17 	ldw	r2,-4(fp)
8112fb94:	00ffe244 	movi	r3,-119
8112fb98:	10c00005 	stb	r3,0(r2)
        return (0);
8112fb9c:	0005883a 	mov	r2,zero
8112fba0:	00001906 	br	8112fc08 <OSTmrStateGet+0xd8>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
8112fba4:	d0a08303 	ldbu	r2,-32244(gp)
8112fba8:	10803fcc 	andi	r2,r2,255
8112fbac:	10000526 	beq	r2,zero,8112fbc4 <OSTmrStateGet+0x94>
        *perr = OS_ERR_TMR_ISR;
8112fbb0:	e0bfff17 	ldw	r2,-4(fp)
8112fbb4:	00ffe2c4 	movi	r3,-117
8112fbb8:	10c00005 	stb	r3,0(r2)
        return (0);
8112fbbc:	0005883a 	mov	r2,zero
8112fbc0:	00001106 	br	8112fc08 <OSTmrStateGet+0xd8>
    }
    OSTmr_Lock();
8112fbc4:	11304ec0 	call	811304ec <OSTmr_Lock>
    state = ptmr->OSTmrState;
8112fbc8:	e0bffe17 	ldw	r2,-8(fp)
8112fbcc:	10800c43 	ldbu	r2,49(r2)
8112fbd0:	e0bffd05 	stb	r2,-12(fp)
    switch (state) {
8112fbd4:	e0bffd03 	ldbu	r2,-12(fp)
8112fbd8:	1005883a 	mov	r2,r2
8112fbdc:	10800128 	cmpgeui	r2,r2,4
8112fbe0:	1000031e 	bne	r2,zero,8112fbf0 <OSTmrStateGet+0xc0>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
8112fbe4:	e0bfff17 	ldw	r2,-4(fp)
8112fbe8:	10000005 	stb	zero,0(r2)
             break;
8112fbec:	00000406 	br	8112fc00 <OSTmrStateGet+0xd0>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
8112fbf0:	e0bfff17 	ldw	r2,-4(fp)
8112fbf4:	00ffe344 	movi	r3,-115
8112fbf8:	10c00005 	stb	r3,0(r2)
             break;
8112fbfc:	0001883a 	nop
    }
    OSTmr_Unlock();
8112fc00:	11305300 	call	81130530 <OSTmr_Unlock>
    return (state);
8112fc04:	e0bffd03 	ldbu	r2,-12(fp)
}
8112fc08:	e037883a 	mov	sp,fp
8112fc0c:	dfc00117 	ldw	ra,4(sp)
8112fc10:	df000017 	ldw	fp,0(sp)
8112fc14:	dec00204 	addi	sp,sp,8
8112fc18:	f800283a 	ret

8112fc1c <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
8112fc1c:	defffc04 	addi	sp,sp,-16
8112fc20:	de00012e 	bgeu	sp,et,8112fc28 <OSTmrStart+0xc>
8112fc24:	003b68fa 	trap	3
8112fc28:	dfc00315 	stw	ra,12(sp)
8112fc2c:	df000215 	stw	fp,8(sp)
8112fc30:	df000204 	addi	fp,sp,8
8112fc34:	e13ffe15 	stw	r4,-8(fp)
8112fc38:	e17fff15 	stw	r5,-4(fp)
#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                               /* Validate arguments                                     */
8112fc3c:	e0bfff17 	ldw	r2,-4(fp)
8112fc40:	1000021e 	bne	r2,zero,8112fc4c <OSTmrStart+0x30>
        return (OS_FALSE);
8112fc44:	0005883a 	mov	r2,zero
8112fc48:	00004106 	br	8112fd50 <OSTmrStart+0x134>
    }
    if (ptmr == (OS_TMR *)0) {
8112fc4c:	e0bffe17 	ldw	r2,-8(fp)
8112fc50:	1000051e 	bne	r2,zero,8112fc68 <OSTmrStart+0x4c>
        *perr = OS_ERR_TMR_INVALID;
8112fc54:	e0bfff17 	ldw	r2,-4(fp)
8112fc58:	00ffe284 	movi	r3,-118
8112fc5c:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112fc60:	0005883a 	mov	r2,zero
8112fc64:	00003a06 	br	8112fd50 <OSTmrStart+0x134>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
8112fc68:	e0bffe17 	ldw	r2,-8(fp)
8112fc6c:	10800003 	ldbu	r2,0(r2)
8112fc70:	10803fcc 	andi	r2,r2,255
8112fc74:	10801920 	cmpeqi	r2,r2,100
8112fc78:	1000051e 	bne	r2,zero,8112fc90 <OSTmrStart+0x74>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112fc7c:	e0bfff17 	ldw	r2,-4(fp)
8112fc80:	00ffe244 	movi	r3,-119
8112fc84:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112fc88:	0005883a 	mov	r2,zero
8112fc8c:	00003006 	br	8112fd50 <OSTmrStart+0x134>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
8112fc90:	d0a08303 	ldbu	r2,-32244(gp)
8112fc94:	10803fcc 	andi	r2,r2,255
8112fc98:	10000526 	beq	r2,zero,8112fcb0 <OSTmrStart+0x94>
        *perr  = OS_ERR_TMR_ISR;
8112fc9c:	e0bfff17 	ldw	r2,-4(fp)
8112fca0:	00ffe2c4 	movi	r3,-117
8112fca4:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112fca8:	0005883a 	mov	r2,zero
8112fcac:	00002806 	br	8112fd50 <OSTmrStart+0x134>
    }
    OSTmr_Lock();
8112fcb0:	11304ec0 	call	811304ec <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112fcb4:	e0bffe17 	ldw	r2,-8(fp)
8112fcb8:	10800c43 	ldbu	r2,49(r2)
8112fcbc:	10803fcc 	andi	r2,r2,255
8112fcc0:	10c000c8 	cmpgei	r3,r2,3
8112fcc4:	1800031e 	bne	r3,zero,8112fcd4 <OSTmrStart+0xb8>
8112fcc8:	00800e16 	blt	zero,r2,8112fd04 <OSTmrStart+0xe8>
8112fccc:	10001526 	beq	r2,zero,8112fd24 <OSTmrStart+0x108>
8112fcd0:	00001a06 	br	8112fd3c <OSTmrStart+0x120>
8112fcd4:	108000e0 	cmpeqi	r2,r2,3
8112fcd8:	10001826 	beq	r2,zero,8112fd3c <OSTmrStart+0x120>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
8112fcdc:	e13ffe17 	ldw	r4,-8(fp)
8112fce0:	11303f00 	call	811303f0 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8112fce4:	000b883a 	mov	r5,zero
8112fce8:	e13ffe17 	ldw	r4,-8(fp)
8112fcec:	11302a00 	call	811302a0 <OSTmr_Link>
             OSTmr_Unlock();
8112fcf0:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112fcf4:	e0bfff17 	ldw	r2,-4(fp)
8112fcf8:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112fcfc:	00800044 	movi	r2,1
8112fd00:	00001306 	br	8112fd50 <OSTmrStart+0x134>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
8112fd04:	000b883a 	mov	r5,zero
8112fd08:	e13ffe17 	ldw	r4,-8(fp)
8112fd0c:	11302a00 	call	811302a0 <OSTmr_Link>
             OSTmr_Unlock();
8112fd10:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
8112fd14:	e0bfff17 	ldw	r2,-4(fp)
8112fd18:	10000005 	stb	zero,0(r2)
             return (OS_TRUE);
8112fd1c:	00800044 	movi	r2,1
8112fd20:	00000b06 	br	8112fd50 <OSTmrStart+0x134>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
8112fd24:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112fd28:	e0bfff17 	ldw	r2,-4(fp)
8112fd2c:	00ffe1c4 	movi	r3,-121
8112fd30:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112fd34:	0005883a 	mov	r2,zero
8112fd38:	00000506 	br	8112fd50 <OSTmrStart+0x134>

        default:
             OSTmr_Unlock();
8112fd3c:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112fd40:	e0bfff17 	ldw	r2,-4(fp)
8112fd44:	00ffe344 	movi	r3,-115
8112fd48:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112fd4c:	0005883a 	mov	r2,zero
    }
}
8112fd50:	e037883a 	mov	sp,fp
8112fd54:	dfc00117 	ldw	ra,4(sp)
8112fd58:	df000017 	ldw	fp,0(sp)
8112fd5c:	dec00204 	addi	sp,sp,8
8112fd60:	f800283a 	ret

8112fd64 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
8112fd64:	defff904 	addi	sp,sp,-28
8112fd68:	de00012e 	bgeu	sp,et,8112fd70 <OSTmrStop+0xc>
8112fd6c:	003b68fa 	trap	3
8112fd70:	dfc00615 	stw	ra,24(sp)
8112fd74:	df000515 	stw	fp,20(sp)
8112fd78:	df000504 	addi	fp,sp,20
8112fd7c:	e13ffc15 	stw	r4,-16(fp)
8112fd80:	2805883a 	mov	r2,r5
8112fd84:	e1bffe15 	stw	r6,-8(fp)
8112fd88:	e1ffff15 	stw	r7,-4(fp)
8112fd8c:	e0bffd05 	stb	r2,-12(fp)
    OS_TMR_CALLBACK  pfnct;


#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                                     /* Validate arguments                               */
8112fd90:	e0bfff17 	ldw	r2,-4(fp)
8112fd94:	1000021e 	bne	r2,zero,8112fda0 <OSTmrStop+0x3c>
        return (OS_FALSE);
8112fd98:	0005883a 	mov	r2,zero
8112fd9c:	00006606 	br	8112ff38 <OSTmrStop+0x1d4>
    }
    if (ptmr == (OS_TMR *)0) {
8112fda0:	e0bffc17 	ldw	r2,-16(fp)
8112fda4:	1000051e 	bne	r2,zero,8112fdbc <OSTmrStop+0x58>
        *perr = OS_ERR_TMR_INVALID;
8112fda8:	e0bfff17 	ldw	r2,-4(fp)
8112fdac:	00ffe284 	movi	r3,-118
8112fdb0:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112fdb4:	0005883a 	mov	r2,zero
8112fdb8:	00005f06 	br	8112ff38 <OSTmrStop+0x1d4>
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
8112fdbc:	e0bffc17 	ldw	r2,-16(fp)
8112fdc0:	10800003 	ldbu	r2,0(r2)
8112fdc4:	10803fcc 	andi	r2,r2,255
8112fdc8:	10801920 	cmpeqi	r2,r2,100
8112fdcc:	1000051e 	bne	r2,zero,8112fde4 <OSTmrStop+0x80>
        *perr = OS_ERR_TMR_INVALID_TYPE;
8112fdd0:	e0bfff17 	ldw	r2,-4(fp)
8112fdd4:	00ffe244 	movi	r3,-119
8112fdd8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112fddc:	0005883a 	mov	r2,zero
8112fde0:	00005506 	br	8112ff38 <OSTmrStop+0x1d4>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
8112fde4:	d0a08303 	ldbu	r2,-32244(gp)
8112fde8:	10803fcc 	andi	r2,r2,255
8112fdec:	10000526 	beq	r2,zero,8112fe04 <OSTmrStop+0xa0>
        *perr  = OS_ERR_TMR_ISR;
8112fdf0:	e0bfff17 	ldw	r2,-4(fp)
8112fdf4:	00ffe2c4 	movi	r3,-117
8112fdf8:	10c00005 	stb	r3,0(r2)
        return (OS_FALSE);
8112fdfc:	0005883a 	mov	r2,zero
8112fe00:	00004d06 	br	8112ff38 <OSTmrStop+0x1d4>
    }
    OSTmr_Lock();
8112fe04:	11304ec0 	call	811304ec <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
8112fe08:	e0bffc17 	ldw	r2,-16(fp)
8112fe0c:	10800c43 	ldbu	r2,49(r2)
8112fe10:	10803fcc 	andi	r2,r2,255
8112fe14:	10c000c8 	cmpgei	r3,r2,3
8112fe18:	1800031e 	bne	r3,zero,8112fe28 <OSTmrStop+0xc4>
8112fe1c:	00803516 	blt	zero,r2,8112fef4 <OSTmrStop+0x190>
8112fe20:	10003a26 	beq	r2,zero,8112ff0c <OSTmrStop+0x1a8>
8112fe24:	00003f06 	br	8112ff24 <OSTmrStop+0x1c0>
8112fe28:	108000e0 	cmpeqi	r2,r2,3
8112fe2c:	10003d26 	beq	r2,zero,8112ff24 <OSTmrStop+0x1c0>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
8112fe30:	e13ffc17 	ldw	r4,-16(fp)
8112fe34:	11303f00 	call	811303f0 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
8112fe38:	e0bfff17 	ldw	r2,-4(fp)
8112fe3c:	10000005 	stb	zero,0(r2)
             switch (opt) {
8112fe40:	e0bffd03 	ldbu	r2,-12(fp)
8112fe44:	10c000e0 	cmpeqi	r3,r2,3
8112fe48:	1800041e 	bne	r3,zero,8112fe5c <OSTmrStop+0xf8>
8112fe4c:	10c00120 	cmpeqi	r3,r2,4
8112fe50:	1800121e 	bne	r3,zero,8112fe9c <OSTmrStop+0x138>
8112fe54:	10002326 	beq	r2,zero,8112fee4 <OSTmrStop+0x180>
8112fe58:	00001e06 	br	8112fed4 <OSTmrStop+0x170>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8112fe5c:	e0bffc17 	ldw	r2,-16(fp)
8112fe60:	10800117 	ldw	r2,4(r2)
8112fe64:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
8112fe68:	e0bffb17 	ldw	r2,-20(fp)
8112fe6c:	10000726 	beq	r2,zero,8112fe8c <OSTmrStop+0x128>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
8112fe70:	e0bffc17 	ldw	r2,-16(fp)
8112fe74:	10c00217 	ldw	r3,8(r2)
8112fe78:	e0bffb17 	ldw	r2,-20(fp)
8112fe7c:	180b883a 	mov	r5,r3
8112fe80:	e13ffc17 	ldw	r4,-16(fp)
8112fe84:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
8112fe88:	00001706 	br	8112fee8 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8112fe8c:	e0bfff17 	ldw	r2,-4(fp)
8112fe90:	00ffe3c4 	movi	r3,-113
8112fe94:	10c00005 	stb	r3,0(r2)
                      }
                      break;
8112fe98:	00001306 	br	8112fee8 <OSTmrStop+0x184>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
8112fe9c:	e0bffc17 	ldw	r2,-16(fp)
8112fea0:	10800117 	ldw	r2,4(r2)
8112fea4:	e0bffb15 	stw	r2,-20(fp)
                      if (pfnct != (OS_TMR_CALLBACK)0) {
8112fea8:	e0bffb17 	ldw	r2,-20(fp)
8112feac:	10000526 	beq	r2,zero,8112fec4 <OSTmrStop+0x160>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
8112feb0:	e0bffb17 	ldw	r2,-20(fp)
8112feb4:	e17ffe17 	ldw	r5,-8(fp)
8112feb8:	e13ffc17 	ldw	r4,-16(fp)
8112febc:	103ee83a 	callr	r2
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
8112fec0:	00000906 	br	8112fee8 <OSTmrStop+0x184>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
8112fec4:	e0bfff17 	ldw	r2,-4(fp)
8112fec8:	00ffe3c4 	movi	r3,-113
8112fecc:	10c00005 	stb	r3,0(r2)
                      }
                      break;
8112fed0:	00000506 	br	8112fee8 <OSTmrStop+0x184>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
8112fed4:	e0bfff17 	ldw	r2,-4(fp)
8112fed8:	00ffe104 	movi	r3,-124
8112fedc:	10c00005 	stb	r3,0(r2)
                     break;
8112fee0:	00000106 	br	8112fee8 <OSTmrStop+0x184>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
8112fee4:	0001883a 	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
8112fee8:	11305300 	call	81130530 <OSTmr_Unlock>
             return (OS_TRUE);
8112feec:	00800044 	movi	r2,1
8112fef0:	00001106 	br	8112ff38 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
8112fef4:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
8112fef8:	e0bfff17 	ldw	r2,-4(fp)
8112fefc:	00ffe384 	movi	r3,-114
8112ff00:	10c00005 	stb	r3,0(r2)
             return (OS_TRUE);
8112ff04:	00800044 	movi	r2,1
8112ff08:	00000b06 	br	8112ff38 <OSTmrStop+0x1d4>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
8112ff0c:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
8112ff10:	e0bfff17 	ldw	r2,-4(fp)
8112ff14:	00ffe1c4 	movi	r3,-121
8112ff18:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112ff1c:	0005883a 	mov	r2,zero
8112ff20:	00000506 	br	8112ff38 <OSTmrStop+0x1d4>

        default:
             OSTmr_Unlock();
8112ff24:	11305300 	call	81130530 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
8112ff28:	e0bfff17 	ldw	r2,-4(fp)
8112ff2c:	00ffe344 	movi	r3,-115
8112ff30:	10c00005 	stb	r3,0(r2)
             return (OS_FALSE);
8112ff34:	0005883a 	mov	r2,zero
    }
}
8112ff38:	e037883a 	mov	sp,fp
8112ff3c:	dfc00117 	ldw	ra,4(sp)
8112ff40:	df000017 	ldw	fp,0(sp)
8112ff44:	dec00204 	addi	sp,sp,8
8112ff48:	f800283a 	ret

8112ff4c <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
8112ff4c:	defffd04 	addi	sp,sp,-12
8112ff50:	de00012e 	bgeu	sp,et,8112ff58 <OSTmrSignal+0xc>
8112ff54:	003b68fa 	trap	3
8112ff58:	dfc00215 	stw	ra,8(sp)
8112ff5c:	df000115 	stw	fp,4(sp)
8112ff60:	df000104 	addi	fp,sp,4
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
8112ff64:	d0a07217 	ldw	r2,-32312(gp)
8112ff68:	1009883a 	mov	r4,r2
8112ff6c:	112d5180 	call	8112d518 <OSSemPost>
8112ff70:	e0bfff05 	stb	r2,-4(fp)
    return (err);
8112ff74:	e0bfff03 	ldbu	r2,-4(fp)
}
8112ff78:	e037883a 	mov	sp,fp
8112ff7c:	dfc00117 	ldw	ra,4(sp)
8112ff80:	df000017 	ldw	fp,0(sp)
8112ff84:	dec00204 	addi	sp,sp,8
8112ff88:	f800283a 	ret

8112ff8c <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
8112ff8c:	defffe04 	addi	sp,sp,-8
8112ff90:	de00012e 	bgeu	sp,et,8112ff98 <OSTmr_Alloc+0xc>
8112ff94:	003b68fa 	trap	3
8112ff98:	df000115 	stw	fp,4(sp)
8112ff9c:	df000104 	addi	fp,sp,4
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
8112ffa0:	d0a07017 	ldw	r2,-32320(gp)
8112ffa4:	1000021e 	bne	r2,zero,8112ffb0 <OSTmr_Alloc+0x24>
        return ((OS_TMR *)0);
8112ffa8:	0005883a 	mov	r2,zero
8112ffac:	00001006 	br	8112fff0 <OSTmr_Alloc+0x64>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
8112ffb0:	d0a07017 	ldw	r2,-32320(gp)
8112ffb4:	e0bfff15 	stw	r2,-4(fp)
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
8112ffb8:	e0bfff17 	ldw	r2,-4(fp)
8112ffbc:	10800317 	ldw	r2,12(r2)
8112ffc0:	d0a07015 	stw	r2,-32320(gp)
    ptmr->OSTmrNext = (OS_TCB *)0;
8112ffc4:	e0bfff17 	ldw	r2,-4(fp)
8112ffc8:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev = (OS_TCB *)0;
8112ffcc:	e0bfff17 	ldw	r2,-4(fp)
8112ffd0:	10000415 	stw	zero,16(r2)
    OSTmrUsed++;
8112ffd4:	d0a0750b 	ldhu	r2,-32300(gp)
8112ffd8:	10800044 	addi	r2,r2,1
8112ffdc:	d0a0750d 	sth	r2,-32300(gp)
    OSTmrFree--;
8112ffe0:	d0a0790b 	ldhu	r2,-32284(gp)
8112ffe4:	10bfffc4 	addi	r2,r2,-1
8112ffe8:	d0a0790d 	sth	r2,-32284(gp)
    return (ptmr);
8112ffec:	e0bfff17 	ldw	r2,-4(fp)
}
8112fff0:	e037883a 	mov	sp,fp
8112fff4:	df000017 	ldw	fp,0(sp)
8112fff8:	dec00104 	addi	sp,sp,4
8112fffc:	f800283a 	ret

81130000 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
81130000:	defffe04 	addi	sp,sp,-8
81130004:	de00012e 	bgeu	sp,et,8113000c <OSTmr_Free+0xc>
81130008:	003b68fa 	trap	3
8113000c:	df000115 	stw	fp,4(sp)
81130010:	df000104 	addi	fp,sp,4
81130014:	e13fff15 	stw	r4,-4(fp)
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
81130018:	e0bfff17 	ldw	r2,-4(fp)
8113001c:	10000c45 	stb	zero,49(r2)
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
81130020:	e0bfff17 	ldw	r2,-4(fp)
81130024:	10000c05 	stb	zero,48(r2)
    ptmr->OSTmrPeriod      = 0;
81130028:	e0bfff17 	ldw	r2,-4(fp)
8113002c:	10000715 	stw	zero,28(r2)
    ptmr->OSTmrMatch       = 0;
81130030:	e0bfff17 	ldw	r2,-4(fp)
81130034:	10000515 	stw	zero,20(r2)
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
81130038:	e0bfff17 	ldw	r2,-4(fp)
8113003c:	10000115 	stw	zero,4(r2)
    ptmr->OSTmrCallbackArg = (void *)0;
81130040:	e0bfff17 	ldw	r2,-4(fp)
81130044:	10000215 	stw	zero,8(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
81130048:	e0bfff17 	ldw	r2,-4(fp)
8113004c:	00c00fc4 	movi	r3,63
81130050:	10c00805 	stb	r3,32(r2)
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
81130054:	e0bfff17 	ldw	r2,-4(fp)
81130058:	10000845 	stb	zero,33(r2)
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
8113005c:	e0bfff17 	ldw	r2,-4(fp)
81130060:	10000415 	stw	zero,16(r2)
    ptmr->OSTmrNext        = OSTmrFreeList;
81130064:	d0e07017 	ldw	r3,-32320(gp)
81130068:	e0bfff17 	ldw	r2,-4(fp)
8113006c:	10c00315 	stw	r3,12(r2)
    OSTmrFreeList          = ptmr;
81130070:	e0bfff17 	ldw	r2,-4(fp)
81130074:	d0a07015 	stw	r2,-32320(gp)

    OSTmrUsed--;                                       /* Update timer object statistics                              */
81130078:	d0a0750b 	ldhu	r2,-32300(gp)
8113007c:	10bfffc4 	addi	r2,r2,-1
81130080:	d0a0750d 	sth	r2,-32300(gp)
    OSTmrFree++;
81130084:	d0a0790b 	ldhu	r2,-32284(gp)
81130088:	10800044 	addi	r2,r2,1
8113008c:	d0a0790d 	sth	r2,-32284(gp)
}
81130090:	0001883a 	nop
81130094:	e037883a 	mov	sp,fp
81130098:	df000017 	ldw	fp,0(sp)
8113009c:	dec00104 	addi	sp,sp,4
811300a0:	f800283a 	ret

811300a4 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
811300a4:	defffa04 	addi	sp,sp,-24
811300a8:	de00012e 	bgeu	sp,et,811300b0 <OSTmr_Init+0xc>
811300ac:	003b68fa 	trap	3
811300b0:	dfc00515 	stw	ra,20(sp)
811300b4:	df000415 	stw	fp,16(sp)
811300b8:	df000404 	addi	fp,sp,16
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
811300bc:	01406804 	movi	r5,416
811300c0:	01204574 	movhi	r4,33045
811300c4:	21373204 	addi	r4,r4,-9016
811300c8:	11282140 	call	81128214 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
811300cc:	01400404 	movi	r5,16
811300d0:	01204574 	movhi	r4,33045
811300d4:	21365204 	addi	r4,r4,-9912
811300d8:	11282140 	call	81128214 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
811300dc:	00a04574 	movhi	r2,33045
811300e0:	10b73204 	addi	r2,r2,-9016
811300e4:	e0bffd15 	stw	r2,-12(fp)
    ptmr2 = &OSTmrTbl[1];
811300e8:	00a04574 	movhi	r2,33045
811300ec:	10b73f04 	addi	r2,r2,-8964
811300f0:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
811300f4:	e03ffc0d 	sth	zero,-16(fp)
811300f8:	00001606 	br	81130154 <OSTmr_Init+0xb0>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
811300fc:	e0bffd17 	ldw	r2,-12(fp)
81130100:	00c01904 	movi	r3,100
81130104:	10c00005 	stb	r3,0(r2)
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
81130108:	e0bffd17 	ldw	r2,-12(fp)
8113010c:	10000c45 	stb	zero,49(r2)
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
81130110:	e0bffd17 	ldw	r2,-12(fp)
81130114:	e0fffe17 	ldw	r3,-8(fp)
81130118:	10c00315 	stw	r3,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
8113011c:	e0bffd17 	ldw	r2,-12(fp)
81130120:	00c00fc4 	movi	r3,63
81130124:	10c00805 	stb	r3,32(r2)
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81130128:	e0bffd17 	ldw	r2,-12(fp)
8113012c:	10000845 	stb	zero,33(r2)
#endif
        ptmr1++;
81130130:	e0bffd17 	ldw	r2,-12(fp)
81130134:	10800d04 	addi	r2,r2,52
81130138:	e0bffd15 	stw	r2,-12(fp)
        ptmr2++;
8113013c:	e0bffe17 	ldw	r2,-8(fp)
81130140:	10800d04 	addi	r2,r2,52
81130144:	e0bffe15 	stw	r2,-8(fp)
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
81130148:	e0bffc0b 	ldhu	r2,-16(fp)
8113014c:	10800044 	addi	r2,r2,1
81130150:	e0bffc0d 	sth	r2,-16(fp)
81130154:	e0bffc0b 	ldhu	r2,-16(fp)
81130158:	108001f0 	cmpltui	r2,r2,7
8113015c:	103fe71e 	bne	r2,zero,811300fc <__reset+0xfb1100fc>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
81130160:	e0bffd17 	ldw	r2,-12(fp)
81130164:	00c01904 	movi	r3,100
81130168:	10c00005 	stb	r3,0(r2)
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
8113016c:	e0bffd17 	ldw	r2,-12(fp)
81130170:	10000c45 	stb	zero,49(r2)
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
81130174:	e0bffd17 	ldw	r2,-12(fp)
81130178:	10000315 	stw	zero,12(r2)
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
8113017c:	e0bffd17 	ldw	r2,-12(fp)
81130180:	00c00fc4 	movi	r3,63
81130184:	10c00805 	stb	r3,32(r2)
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
81130188:	e0bffd17 	ldw	r2,-12(fp)
8113018c:	10000845 	stb	zero,33(r2)
#endif
    OSTmrTime           = 0;
81130190:	d0208515 	stw	zero,-32236(gp)
    OSTmrUsed           = 0;
81130194:	d020750d 	sth	zero,-32300(gp)
    OSTmrFree           = OS_TMR_CFG_MAX;
81130198:	00800204 	movi	r2,8
8113019c:	d0a0790d 	sth	r2,-32284(gp)
    OSTmrFreeList       = &OSTmrTbl[0];
811301a0:	00a04574 	movhi	r2,33045
811301a4:	10b73204 	addi	r2,r2,-9016
811301a8:	d0a07015 	stw	r2,-32320(gp)
    OSTmrSem            = OSSemCreate(1);
811301ac:	01000044 	movi	r4,1
811301b0:	112ce680 	call	8112ce68 <OSSemCreate>
811301b4:	d0a08715 	stw	r2,-32228(gp)
    OSTmrSemSignal      = OSSemCreate(0);
811301b8:	0009883a 	mov	r4,zero
811301bc:	112ce680 	call	8112ce68 <OSSemCreate>
811301c0:	d0a07215 	stw	r2,-32312(gp)

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
811301c4:	d0a08717 	ldw	r2,-32228(gp)
811301c8:	e0ffff04 	addi	r3,fp,-4
811301cc:	180d883a 	mov	r6,r3
811301d0:	01604534 	movhi	r5,33044
811301d4:	29723304 	addi	r5,r5,-14132
811301d8:	1009883a 	mov	r4,r2
811301dc:	11269ec0 	call	811269ec <OSEventNameSet>
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
#endif
#endif

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
811301e0:	d0a07217 	ldw	r2,-32312(gp)
811301e4:	e0ffff04 	addi	r3,fp,-4
811301e8:	180d883a 	mov	r6,r3
811301ec:	01604534 	movhi	r5,33044
811301f0:	29723804 	addi	r5,r5,-14112
811301f4:	1009883a 	mov	r4,r2
811301f8:	11269ec0 	call	811269ec <OSEventNameSet>
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
#endif
#endif

    OSTmr_InitTask();
811301fc:	11302180 	call	81130218 <OSTmr_InitTask>
}
81130200:	0001883a 	nop
81130204:	e037883a 	mov	sp,fp
81130208:	dfc00117 	ldw	ra,4(sp)
8113020c:	df000017 	ldw	fp,0(sp)
81130210:	dec00204 	addi	sp,sp,8
81130214:	f800283a 	ret

81130218 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
81130218:	defff804 	addi	sp,sp,-32
8113021c:	de00012e 	bgeu	sp,et,81130224 <OSTmr_InitTask+0xc>
81130220:	003b68fa 	trap	3
81130224:	dfc00715 	stw	ra,28(sp)
81130228:	df000615 	stw	fp,24(sp)
8113022c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
81130230:	008000c4 	movi	r2,3
81130234:	d8800415 	stw	r2,16(sp)
81130238:	d8000315 	stw	zero,12(sp)
8113023c:	00808004 	movi	r2,512
81130240:	d8800215 	stw	r2,8(sp)
81130244:	00a04574 	movhi	r2,33045
81130248:	10bd1e04 	addi	r2,r2,-2952
8113024c:	d8800115 	stw	r2,4(sp)
81130250:	00bfff54 	movui	r2,65533
81130254:	d8800015 	stw	r2,0(sp)
81130258:	01c00484 	movi	r7,18
8113025c:	01a04574 	movhi	r6,33045
81130260:	31bf1d04 	addi	r6,r6,-908
81130264:	000b883a 	mov	r5,zero
81130268:	012044f4 	movhi	r4,33043
8113026c:	21015b04 	addi	r4,r4,1388
81130270:	112defc0 	call	8112defc <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
81130274:	e1bfff04 	addi	r6,fp,-4
81130278:	01604534 	movhi	r5,33044
8113027c:	29723d04 	addi	r5,r5,-14092
81130280:	01000484 	movi	r4,18
81130284:	112e72c0 	call	8112e72c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
81130288:	0001883a 	nop
8113028c:	e037883a 	mov	sp,fp
81130290:	dfc00117 	ldw	ra,4(sp)
81130294:	df000017 	ldw	fp,0(sp)
81130298:	dec00204 	addi	sp,sp,8
8113029c:	f800283a 	ret

811302a0 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
811302a0:	defffa04 	addi	sp,sp,-24
811302a4:	de00012e 	bgeu	sp,et,811302ac <OSTmr_Link+0xc>
811302a8:	003b68fa 	trap	3
811302ac:	df000515 	stw	fp,20(sp)
811302b0:	df000504 	addi	fp,sp,20
811302b4:	e13ffe15 	stw	r4,-8(fp)
811302b8:	2805883a 	mov	r2,r5
811302bc:	e0bfff05 	stb	r2,-4(fp)
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
811302c0:	e0bffe17 	ldw	r2,-8(fp)
811302c4:	00c000c4 	movi	r3,3
811302c8:	10c00c45 	stb	r3,49(r2)
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
811302cc:	e0bfff03 	ldbu	r2,-4(fp)
811302d0:	10800058 	cmpnei	r2,r2,1
811302d4:	1000071e 	bne	r2,zero,811302f4 <OSTmr_Link+0x54>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
811302d8:	e0bffe17 	ldw	r2,-8(fp)
811302dc:	10c00717 	ldw	r3,28(r2)
811302e0:	d0a08517 	ldw	r2,-32236(gp)
811302e4:	1887883a 	add	r3,r3,r2
811302e8:	e0bffe17 	ldw	r2,-8(fp)
811302ec:	10c00515 	stw	r3,20(r2)
811302f0:	00001006 	br	81130334 <OSTmr_Link+0x94>
    } else {
        if (ptmr->OSTmrDly == 0) {
811302f4:	e0bffe17 	ldw	r2,-8(fp)
811302f8:	10800617 	ldw	r2,24(r2)
811302fc:	1000071e 	bne	r2,zero,8113031c <OSTmr_Link+0x7c>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
81130300:	e0bffe17 	ldw	r2,-8(fp)
81130304:	10c00717 	ldw	r3,28(r2)
81130308:	d0a08517 	ldw	r2,-32236(gp)
8113030c:	1887883a 	add	r3,r3,r2
81130310:	e0bffe17 	ldw	r2,-8(fp)
81130314:	10c00515 	stw	r3,20(r2)
81130318:	00000606 	br	81130334 <OSTmr_Link+0x94>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
8113031c:	e0bffe17 	ldw	r2,-8(fp)
81130320:	10c00617 	ldw	r3,24(r2)
81130324:	d0a08517 	ldw	r2,-32236(gp)
81130328:	1887883a 	add	r3,r3,r2
8113032c:	e0bffe17 	ldw	r2,-8(fp)
81130330:	10c00515 	stw	r3,20(r2)
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81130334:	e0bffe17 	ldw	r2,-8(fp)
81130338:	10800517 	ldw	r2,20(r2)
8113033c:	1080004c 	andi	r2,r2,1
81130340:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81130344:	e0bffb0b 	ldhu	r2,-20(fp)
81130348:	100690fa 	slli	r3,r2,3
8113034c:	00a04574 	movhi	r2,33045
81130350:	10b65204 	addi	r2,r2,-9912
81130354:	1885883a 	add	r2,r3,r2
81130358:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
8113035c:	e0bffc17 	ldw	r2,-16(fp)
81130360:	10800017 	ldw	r2,0(r2)
81130364:	1000091e 	bne	r2,zero,8113038c <OSTmr_Link+0xec>
        pspoke->OSTmrFirst   = ptmr;
81130368:	e0bffc17 	ldw	r2,-16(fp)
8113036c:	e0fffe17 	ldw	r3,-8(fp)
81130370:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (OS_TMR *)0;
81130374:	e0bffe17 	ldw	r2,-8(fp)
81130378:	10000315 	stw	zero,12(r2)
        pspoke->OSTmrEntries = 1;
8113037c:	e0bffc17 	ldw	r2,-16(fp)
81130380:	00c00044 	movi	r3,1
81130384:	10c0010d 	sth	r3,4(r2)
81130388:	00001206 	br	811303d4 <OSTmr_Link+0x134>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
8113038c:	e0bffc17 	ldw	r2,-16(fp)
81130390:	10800017 	ldw	r2,0(r2)
81130394:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst   = ptmr;
81130398:	e0bffc17 	ldw	r2,-16(fp)
8113039c:	e0fffe17 	ldw	r3,-8(fp)
811303a0:	10c00015 	stw	r3,0(r2)
        ptmr->OSTmrNext      = (void *)ptmr1;
811303a4:	e0bffe17 	ldw	r2,-8(fp)
811303a8:	e0fffd17 	ldw	r3,-12(fp)
811303ac:	10c00315 	stw	r3,12(r2)
        ptmr1->OSTmrPrev     = (void *)ptmr;
811303b0:	e0bffd17 	ldw	r2,-12(fp)
811303b4:	e0fffe17 	ldw	r3,-8(fp)
811303b8:	10c00415 	stw	r3,16(r2)
        pspoke->OSTmrEntries++;
811303bc:	e0bffc17 	ldw	r2,-16(fp)
811303c0:	1080010b 	ldhu	r2,4(r2)
811303c4:	10800044 	addi	r2,r2,1
811303c8:	1007883a 	mov	r3,r2
811303cc:	e0bffc17 	ldw	r2,-16(fp)
811303d0:	10c0010d 	sth	r3,4(r2)
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
811303d4:	e0bffe17 	ldw	r2,-8(fp)
811303d8:	10000415 	stw	zero,16(r2)
}
811303dc:	0001883a 	nop
811303e0:	e037883a 	mov	sp,fp
811303e4:	df000017 	ldw	fp,0(sp)
811303e8:	dec00104 	addi	sp,sp,4
811303ec:	f800283a 	ret

811303f0 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
811303f0:	defffa04 	addi	sp,sp,-24
811303f4:	de00012e 	bgeu	sp,et,811303fc <OSTmr_Unlink+0xc>
811303f8:	003b68fa 	trap	3
811303fc:	df000515 	stw	fp,20(sp)
81130400:	df000504 	addi	fp,sp,20
81130404:	e13fff15 	stw	r4,-4(fp)
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
81130408:	e0bfff17 	ldw	r2,-4(fp)
8113040c:	10800517 	ldw	r2,20(r2)
81130410:	1080004c 	andi	r2,r2,1
81130414:	e0bffb0d 	sth	r2,-20(fp)
    pspoke = &OSTmrWheelTbl[spoke];
81130418:	e0bffb0b 	ldhu	r2,-20(fp)
8113041c:	100690fa 	slli	r3,r2,3
81130420:	00a04574 	movhi	r2,33045
81130424:	10b65204 	addi	r2,r2,-9912
81130428:	1885883a 	add	r2,r3,r2
8113042c:	e0bffc15 	stw	r2,-16(fp)

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
81130430:	e0bffc17 	ldw	r2,-16(fp)
81130434:	10c00017 	ldw	r3,0(r2)
81130438:	e0bfff17 	ldw	r2,-4(fp)
8113043c:	18800b1e 	bne	r3,r2,8113046c <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
81130440:	e0bfff17 	ldw	r2,-4(fp)
81130444:	10800317 	ldw	r2,12(r2)
81130448:	e0bffd15 	stw	r2,-12(fp)
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
8113044c:	e0bffc17 	ldw	r2,-16(fp)
81130450:	e0fffd17 	ldw	r3,-12(fp)
81130454:	10c00015 	stw	r3,0(r2)
        if (ptmr1 != (OS_TMR *)0) {
81130458:	e0bffd17 	ldw	r2,-12(fp)
8113045c:	10001126 	beq	r2,zero,811304a4 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
81130460:	e0bffd17 	ldw	r2,-12(fp)
81130464:	10000415 	stw	zero,16(r2)
81130468:	00000e06 	br	811304a4 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
8113046c:	e0bfff17 	ldw	r2,-4(fp)
81130470:	10800417 	ldw	r2,16(r2)
81130474:	e0bffd15 	stw	r2,-12(fp)
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
81130478:	e0bfff17 	ldw	r2,-4(fp)
8113047c:	10800317 	ldw	r2,12(r2)
81130480:	e0bffe15 	stw	r2,-8(fp)
        ptmr1->OSTmrNext = ptmr2;
81130484:	e0bffd17 	ldw	r2,-12(fp)
81130488:	e0fffe17 	ldw	r3,-8(fp)
8113048c:	10c00315 	stw	r3,12(r2)
        if (ptmr2 != (OS_TMR *)0) {
81130490:	e0bffe17 	ldw	r2,-8(fp)
81130494:	10000326 	beq	r2,zero,811304a4 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
81130498:	e0bffe17 	ldw	r2,-8(fp)
8113049c:	e0fffd17 	ldw	r3,-12(fp)
811304a0:	10c00415 	stw	r3,16(r2)
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
811304a4:	e0bfff17 	ldw	r2,-4(fp)
811304a8:	00c00044 	movi	r3,1
811304ac:	10c00c45 	stb	r3,49(r2)
    ptmr->OSTmrNext  = (void *)0;
811304b0:	e0bfff17 	ldw	r2,-4(fp)
811304b4:	10000315 	stw	zero,12(r2)
    ptmr->OSTmrPrev  = (void *)0;
811304b8:	e0bfff17 	ldw	r2,-4(fp)
811304bc:	10000415 	stw	zero,16(r2)
    pspoke->OSTmrEntries--;
811304c0:	e0bffc17 	ldw	r2,-16(fp)
811304c4:	1080010b 	ldhu	r2,4(r2)
811304c8:	10bfffc4 	addi	r2,r2,-1
811304cc:	1007883a 	mov	r3,r2
811304d0:	e0bffc17 	ldw	r2,-16(fp)
811304d4:	10c0010d 	sth	r3,4(r2)
}
811304d8:	0001883a 	nop
811304dc:	e037883a 	mov	sp,fp
811304e0:	df000017 	ldw	fp,0(sp)
811304e4:	dec00104 	addi	sp,sp,4
811304e8:	f800283a 	ret

811304ec <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
811304ec:	defffd04 	addi	sp,sp,-12
811304f0:	de00012e 	bgeu	sp,et,811304f8 <OSTmr_Lock+0xc>
811304f4:	003b68fa 	trap	3
811304f8:	dfc00215 	stw	ra,8(sp)
811304fc:	df000115 	stw	fp,4(sp)
81130500:	df000104 	addi	fp,sp,4
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
81130504:	d0a08717 	ldw	r2,-32228(gp)
81130508:	e1bfff04 	addi	r6,fp,-4
8113050c:	000b883a 	mov	r5,zero
81130510:	1009883a 	mov	r4,r2
81130514:	112d1900 	call	8112d190 <OSSemPend>
    (void)err;
}
81130518:	0001883a 	nop
8113051c:	e037883a 	mov	sp,fp
81130520:	dfc00117 	ldw	ra,4(sp)
81130524:	df000017 	ldw	fp,0(sp)
81130528:	dec00204 	addi	sp,sp,8
8113052c:	f800283a 	ret

81130530 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
81130530:	defffe04 	addi	sp,sp,-8
81130534:	de00012e 	bgeu	sp,et,8113053c <OSTmr_Unlock+0xc>
81130538:	003b68fa 	trap	3
8113053c:	dfc00115 	stw	ra,4(sp)
81130540:	df000015 	stw	fp,0(sp)
81130544:	d839883a 	mov	fp,sp
    (void)OSSemPost(OSTmrSem);
81130548:	d0a08717 	ldw	r2,-32228(gp)
8113054c:	1009883a 	mov	r4,r2
81130550:	112d5180 	call	8112d518 <OSSemPost>
}
81130554:	0001883a 	nop
81130558:	e037883a 	mov	sp,fp
8113055c:	dfc00117 	ldw	ra,4(sp)
81130560:	df000017 	ldw	fp,0(sp)
81130564:	dec00204 	addi	sp,sp,8
81130568:	f800283a 	ret

8113056c <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
8113056c:	defff704 	addi	sp,sp,-36
81130570:	de00012e 	bgeu	sp,et,81130578 <OSTmr_Task+0xc>
81130574:	003b68fa 	trap	3
81130578:	dfc00815 	stw	ra,32(sp)
8113057c:	df000715 	stw	fp,28(sp)
81130580:	df000704 	addi	fp,sp,28
81130584:	e13fff15 	stw	r4,-4(fp)
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
81130588:	d0a07217 	ldw	r2,-32312(gp)
8113058c:	e0fffe04 	addi	r3,fp,-8
81130590:	180d883a 	mov	r6,r3
81130594:	000b883a 	mov	r5,zero
81130598:	1009883a 	mov	r4,r2
8113059c:	112d1900 	call	8112d190 <OSSemPend>
        OSTmr_Lock();
811305a0:	11304ec0 	call	811304ec <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
811305a4:	d0a08517 	ldw	r2,-32236(gp)
811305a8:	10800044 	addi	r2,r2,1
811305ac:	d0a08515 	stw	r2,-32236(gp)
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
811305b0:	d0a08517 	ldw	r2,-32236(gp)
811305b4:	1080004c 	andi	r2,r2,1
811305b8:	e0bffa0d 	sth	r2,-24(fp)
        pspoke = &OSTmrWheelTbl[spoke];
811305bc:	e0bffa0b 	ldhu	r2,-24(fp)
811305c0:	100690fa 	slli	r3,r2,3
811305c4:	00a04574 	movhi	r2,33045
811305c8:	10b65204 	addi	r2,r2,-9912
811305cc:	1885883a 	add	r2,r3,r2
811305d0:	e0bffb15 	stw	r2,-20(fp)
        ptmr   = pspoke->OSTmrFirst;
811305d4:	e0bffb17 	ldw	r2,-20(fp)
811305d8:	10800017 	ldw	r2,0(r2)
811305dc:	e0bff915 	stw	r2,-28(fp)
        while (ptmr != (OS_TMR *)0) {
811305e0:	00002206 	br	8113066c <OSTmr_Task+0x100>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
811305e4:	e0bff917 	ldw	r2,-28(fp)
811305e8:	10800317 	ldw	r2,12(r2)
811305ec:	e0bffc15 	stw	r2,-16(fp)
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
811305f0:	e0bff917 	ldw	r2,-28(fp)
811305f4:	10c00517 	ldw	r3,20(r2)
811305f8:	d0a08517 	ldw	r2,-32236(gp)
811305fc:	1880191e 	bne	r3,r2,81130664 <OSTmr_Task+0xf8>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
81130600:	e0bff917 	ldw	r2,-28(fp)
81130604:	10800117 	ldw	r2,4(r2)
81130608:	e0bffd15 	stw	r2,-12(fp)
                if (pfnct != (OS_TMR_CALLBACK)0) {
8113060c:	e0bffd17 	ldw	r2,-12(fp)
81130610:	10000626 	beq	r2,zero,8113062c <OSTmr_Task+0xc0>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
81130614:	e0bff917 	ldw	r2,-28(fp)
81130618:	10c00217 	ldw	r3,8(r2)
8113061c:	e0bffd17 	ldw	r2,-12(fp)
81130620:	180b883a 	mov	r5,r3
81130624:	e13ff917 	ldw	r4,-28(fp)
81130628:	103ee83a 	callr	r2
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
8113062c:	e13ff917 	ldw	r4,-28(fp)
81130630:	11303f00 	call	811303f0 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
81130634:	e0bff917 	ldw	r2,-28(fp)
81130638:	10800c03 	ldbu	r2,48(r2)
8113063c:	10803fcc 	andi	r2,r2,255
81130640:	10800098 	cmpnei	r2,r2,2
81130644:	1000041e 	bne	r2,zero,81130658 <OSTmr_Task+0xec>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
81130648:	01400044 	movi	r5,1
8113064c:	e13ff917 	ldw	r4,-28(fp)
81130650:	11302a00 	call	811302a0 <OSTmr_Link>
81130654:	00000306 	br	81130664 <OSTmr_Task+0xf8>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
81130658:	e0bff917 	ldw	r2,-28(fp)
8113065c:	00c00084 	movi	r3,2
81130660:	10c00c45 	stb	r3,49(r2)
                }
            }
            ptmr = ptmr_next;
81130664:	e0bffc17 	ldw	r2,-16(fp)
81130668:	e0bff915 	stw	r2,-28(fp)
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
8113066c:	e0bff917 	ldw	r2,-28(fp)
81130670:	103fdc1e 	bne	r2,zero,811305e4 <__reset+0xfb1105e4>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
81130674:	11305300 	call	81130530 <OSTmr_Unlock>
    }
81130678:	003fc306 	br	81130588 <__reset+0xfb110588>

8113067c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
8113067c:	defffd04 	addi	sp,sp,-12
81130680:	de00012e 	bgeu	sp,et,81130688 <alt_dev_reg+0xc>
81130684:	003b68fa 	trap	3
81130688:	dfc00215 	stw	ra,8(sp)
8113068c:	df000115 	stw	fp,4(sp)
81130690:	df000104 	addi	fp,sp,4
81130694:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
81130698:	d1600d04 	addi	r5,gp,-32716
8113069c:	e13fff17 	ldw	r4,-4(fp)
811306a0:	11388880 	call	81138888 <alt_dev_llist_insert>
}
811306a4:	e037883a 	mov	sp,fp
811306a8:	dfc00117 	ldw	ra,4(sp)
811306ac:	df000017 	ldw	fp,0(sp)
811306b0:	dec00204 	addi	sp,sp,8
811306b4:	f800283a 	ret

811306b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
811306b8:	defffd04 	addi	sp,sp,-12
811306bc:	de00012e 	bgeu	sp,et,811306c4 <alt_irq_init+0xc>
811306c0:	003b68fa 	trap	3
811306c4:	dfc00215 	stw	ra,8(sp)
811306c8:	df000115 	stw	fp,4(sp)
811306cc:	df000104 	addi	fp,sp,4
811306d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
811306d4:	11393200 	call	81139320 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
811306d8:	00800044 	movi	r2,1
811306dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
811306e0:	0001883a 	nop
811306e4:	e037883a 	mov	sp,fp
811306e8:	dfc00117 	ldw	ra,4(sp)
811306ec:	df000017 	ldw	fp,0(sp)
811306f0:	dec00204 	addi	sp,sp,8
811306f4:	f800283a 	ret

811306f8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
811306f8:	defffe04 	addi	sp,sp,-8
811306fc:	de00012e 	bgeu	sp,et,81130704 <alt_sys_init+0xc>
81130700:	003b68fa 	trap	3
81130704:	dfc00115 	stw	ra,4(sp)
81130708:	df000015 	stw	fp,0(sp)
8113070c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1MS, timer_1ms);
81130710:	01c0fa04 	movi	r7,1000
81130714:	01800304 	movi	r6,12
81130718:	000b883a 	mov	r5,zero
8113071c:	01200034 	movhi	r4,32768
81130720:	21022004 	addi	r4,r4,2176
81130724:	11359bc0 	call	811359bc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1US, timer_1us);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
81130728:	018002c4 	movi	r6,11
8113072c:	000b883a 	mov	r5,zero
81130730:	01204534 	movhi	r4,33044
81130734:	21357f04 	addi	r4,r4,-10756
81130738:	1134d3c0 	call	81134d3c <altera_avalon_jtag_uart_init>
8113073c:	01204534 	movhi	r4,33044
81130740:	21357504 	addi	r4,r4,-10796
81130744:	113067c0 	call	8113067c <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
81130748:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( RS232_UART, rs232_uart);
8113074c:	018003c4 	movi	r6,15
81130750:	000b883a 	mov	r5,zero
81130754:	01204534 	movhi	r4,33044
81130758:	21399a04 	addi	r4,r4,-6552
8113075c:	1135b680 	call	81135b68 <altera_avalon_uart_init>
81130760:	01204534 	movhi	r4,33044
81130764:	21399004 	addi	r4,r4,-6592
81130768:	113067c0 	call	8113067c <alt_dev_reg>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M1, dma_DDR_M1);
8113076c:	00a04534 	movhi	r2,33044
81130770:	10b9c404 	addi	r2,r2,-6384
81130774:	10c00717 	ldw	r3,28(r2)
81130778:	00a04534 	movhi	r2,33044
8113077c:	10b9c404 	addi	r2,r2,-6384
81130780:	10800817 	ldw	r2,32(r2)
81130784:	100d883a 	mov	r6,r2
81130788:	180b883a 	mov	r5,r3
8113078c:	01204534 	movhi	r4,33044
81130790:	2139c404 	addi	r4,r4,-6384
81130794:	11383f00 	call	811383f0 <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( DMA_DDR_M2, dma_DDR_M2);
81130798:	00a04534 	movhi	r2,33044
8113079c:	10b9dd04 	addi	r2,r2,-6284
811307a0:	10c00717 	ldw	r3,28(r2)
811307a4:	00a04534 	movhi	r2,33044
811307a8:	10b9dd04 	addi	r2,r2,-6284
811307ac:	10800817 	ldw	r2,32(r2)
811307b0:	100d883a 	mov	r6,r2
811307b4:	180b883a 	mov	r5,r3
811307b8:	01204534 	movhi	r4,33044
811307bc:	2139dd04 	addi	r4,r4,-6284
811307c0:	11383f00 	call	811383f0 <alt_msgdma_init>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
811307c4:	01204534 	movhi	r4,33044
811307c8:	2139f604 	addi	r4,r4,-6184
811307cc:	113067c0 	call	8113067c <alt_dev_reg>
}
811307d0:	0001883a 	nop
811307d4:	e037883a 	mov	sp,fp
811307d8:	dfc00117 	ldw	ra,4(sp)
811307dc:	df000017 	ldw	fp,0(sp)
811307e0:	dec00204 	addi	sp,sp,8
811307e4:	f800283a 	ret

811307e8 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
811307e8:	defffa04 	addi	sp,sp,-24
811307ec:	de00012e 	bgeu	sp,et,811307f4 <Write_Sector_Data+0xc>
811307f0:	003b68fa 	trap	3
811307f4:	dfc00515 	stw	ra,20(sp)
811307f8:	df000415 	stw	fp,16(sp)
811307fc:	df000404 	addi	fp,sp,16
81130800:	e13ffe15 	stw	r4,-8(fp)
81130804:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81130808:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
8113080c:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
81130810:	10001e26 	beq	r2,zero,8113088c <Write_Sector_Data+0xa4>
    {
        short int reg_state = 0xff;
81130814:	00803fc4 	movi	r2,255
81130818:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
8113081c:	d0a09117 	ldw	r2,-32188(gp)
81130820:	e13ffe17 	ldw	r4,-8(fp)
81130824:	e0ffff17 	ldw	r3,-4(fp)
81130828:	20c7883a 	add	r3,r4,r3
8113082c:	1806927a 	slli	r3,r3,9
81130830:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
81130834:	d0a09017 	ldw	r2,-32192(gp)
81130838:	00c00604 	movi	r3,24
8113083c:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81130840:	d0a08d17 	ldw	r2,-32204(gp)
81130844:	1080002b 	ldhuio	r2,0(r2)
81130848:	10bfffcc 	andi	r2,r2,65535
8113084c:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
81130850:	e0bffd0b 	ldhu	r2,-12(fp)
81130854:	10bfffcc 	andi	r2,r2,65535
81130858:	1080010c 	andi	r2,r2,4
8113085c:	103ff81e 	bne	r2,zero,81130840 <__reset+0xfb110840>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
81130860:	e0bffd0b 	ldhu	r2,-12(fp)
81130864:	10bfffcc 	andi	r2,r2,65535
81130868:	1080040c 	andi	r2,r2,16
8113086c:	1000071e 	bne	r2,zero,8113088c <Write_Sector_Data+0xa4>
        {
            result = true;
81130870:	00800044 	movi	r2,1
81130874:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
81130878:	d0209615 	stw	zero,-32168(gp)
            current_sector_index = sector_index+partition_offset;
8113087c:	e0fffe17 	ldw	r3,-8(fp)
81130880:	e0bfff17 	ldw	r2,-4(fp)
81130884:	1885883a 	add	r2,r3,r2
81130888:	d0a09715 	stw	r2,-32164(gp)
        }
    }
    return result;
8113088c:	e0bffc17 	ldw	r2,-16(fp)
}
81130890:	e037883a 	mov	sp,fp
81130894:	dfc00117 	ldw	ra,4(sp)
81130898:	df000017 	ldw	fp,0(sp)
8113089c:	dec00204 	addi	sp,sp,8
811308a0:	f800283a 	ret

811308a4 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
811308a4:	defffd04 	addi	sp,sp,-12
811308a8:	de00012e 	bgeu	sp,et,811308b0 <Save_Modified_Sector+0xc>
811308ac:	003b68fa 	trap	3
811308b0:	dfc00215 	stw	ra,8(sp)
811308b4:	df000115 	stw	fp,4(sp)
811308b8:	df000104 	addi	fp,sp,4
    bool result = true;
811308bc:	00800044 	movi	r2,1
811308c0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
811308c4:	d0a09617 	ldw	r2,-32168(gp)
811308c8:	10000526 	beq	r2,zero,811308e0 <Save_Modified_Sector+0x3c>
    {
        result = Write_Sector_Data(current_sector_index, 0);
811308cc:	d0a09717 	ldw	r2,-32164(gp)
811308d0:	000b883a 	mov	r5,zero
811308d4:	1009883a 	mov	r4,r2
811308d8:	11307e80 	call	811307e8 <Write_Sector_Data>
811308dc:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
811308e0:	e0bfff17 	ldw	r2,-4(fp)
}
811308e4:	e037883a 	mov	sp,fp
811308e8:	dfc00117 	ldw	ra,4(sp)
811308ec:	df000017 	ldw	fp,0(sp)
811308f0:	dec00204 	addi	sp,sp,8
811308f4:	f800283a 	ret

811308f8 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
811308f8:	defffa04 	addi	sp,sp,-24
811308fc:	de00012e 	bgeu	sp,et,81130904 <Read_Sector_Data+0xc>
81130900:	003b68fa 	trap	3
81130904:	dfc00515 	stw	ra,20(sp)
81130908:	df000415 	stw	fp,16(sp)
8113090c:	df000404 	addi	fp,sp,16
81130910:	e13ffe15 	stw	r4,-8(fp)
81130914:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
81130918:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
8113091c:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
81130920:	10002726 	beq	r2,zero,811309c0 <Read_Sector_Data+0xc8>
	{
		short int reg_state = 0xff;
81130924:	00803fc4 	movi	r2,255
81130928:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
8113092c:	d0a09617 	ldw	r2,-32168(gp)
81130930:	10000726 	beq	r2,zero,81130950 <Read_Sector_Data+0x58>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
81130934:	d0a09717 	ldw	r2,-32164(gp)
81130938:	000b883a 	mov	r5,zero
8113093c:	1009883a 	mov	r4,r2
81130940:	11307e80 	call	811307e8 <Write_Sector_Data>
81130944:	1000021e 	bne	r2,zero,81130950 <Read_Sector_Data+0x58>
            {
                return false;
81130948:	0005883a 	mov	r2,zero
8113094c:	00001d06 	br	811309c4 <Read_Sector_Data+0xcc>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
81130950:	d0a09117 	ldw	r2,-32188(gp)
81130954:	e13ffe17 	ldw	r4,-8(fp)
81130958:	e0ffff17 	ldw	r3,-4(fp)
8113095c:	20c7883a 	add	r3,r4,r3
81130960:	1806927a 	slli	r3,r3,9
81130964:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
81130968:	d0a09017 	ldw	r2,-32192(gp)
8113096c:	00c00444 	movi	r3,17
81130970:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
81130974:	d0a08d17 	ldw	r2,-32204(gp)
81130978:	1080002b 	ldhuio	r2,0(r2)
8113097c:	10bfffcc 	andi	r2,r2,65535
81130980:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
81130984:	e0bffd0b 	ldhu	r2,-12(fp)
81130988:	10bfffcc 	andi	r2,r2,65535
8113098c:	1080010c 	andi	r2,r2,4
81130990:	103ff81e 	bne	r2,zero,81130974 <__reset+0xfb110974>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
81130994:	e0bffd0b 	ldhu	r2,-12(fp)
81130998:	10bfffcc 	andi	r2,r2,65535
8113099c:	1080040c 	andi	r2,r2,16
811309a0:	1000071e 	bne	r2,zero,811309c0 <Read_Sector_Data+0xc8>
		{
			result = true;
811309a4:	00800044 	movi	r2,1
811309a8:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
811309ac:	d0209615 	stw	zero,-32168(gp)
            current_sector_index = sector_index+partition_offset;
811309b0:	e0fffe17 	ldw	r3,-8(fp)
811309b4:	e0bfff17 	ldw	r2,-4(fp)
811309b8:	1885883a 	add	r2,r3,r2
811309bc:	d0a09715 	stw	r2,-32164(gp)
		}
	}
	return result;
811309c0:	e0bffc17 	ldw	r2,-16(fp)
}
811309c4:	e037883a 	mov	sp,fp
811309c8:	dfc00117 	ldw	ra,4(sp)
811309cc:	df000017 	ldw	fp,0(sp)
811309d0:	dec00204 	addi	sp,sp,8
811309d4:	f800283a 	ret

811309d8 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
811309d8:	defffb04 	addi	sp,sp,-20
811309dc:	de00012e 	bgeu	sp,et,811309e4 <get_cluster_flag+0xc>
811309e0:	003b68fa 	trap	3
811309e4:	dfc00415 	stw	ra,16(sp)
811309e8:	df000315 	stw	fp,12(sp)
811309ec:	df000304 	addi	fp,sp,12
811309f0:	e13ffe15 	stw	r4,-8(fp)
811309f4:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
811309f8:	e0bffe17 	ldw	r2,-8(fp)
811309fc:	1004d23a 	srli	r2,r2,8
81130a00:	d0e09317 	ldw	r3,-32180(gp)
81130a04:	10c5883a 	add	r2,r2,r3
81130a08:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
81130a0c:	00a04574 	movhi	r2,33045
81130a10:	1087ee04 	addi	r2,r2,8120
81130a14:	10801117 	ldw	r2,68(r2)
81130a18:	e0fffd17 	ldw	r3,-12(fp)
81130a1c:	1885883a 	add	r2,r3,r2
81130a20:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
81130a24:	d0a09717 	ldw	r2,-32164(gp)
81130a28:	e0fffd17 	ldw	r3,-12(fp)
81130a2c:	18800726 	beq	r3,r2,81130a4c <get_cluster_flag+0x74>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81130a30:	e0bffd17 	ldw	r2,-12(fp)
81130a34:	000b883a 	mov	r5,zero
81130a38:	1009883a 	mov	r4,r2
81130a3c:	11308f80 	call	811308f8 <Read_Sector_Data>
81130a40:	1000021e 	bne	r2,zero,81130a4c <get_cluster_flag+0x74>
        {
            return false;
81130a44:	0005883a 	mov	r2,zero
81130a48:	00000d06 	br	81130a80 <get_cluster_flag+0xa8>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
81130a4c:	e0bffe17 	ldw	r2,-8(fp)
81130a50:	10803fcc 	andi	r2,r2,255
81130a54:	1085883a 	add	r2,r2,r2
81130a58:	1007883a 	mov	r3,r2
81130a5c:	d0a09517 	ldw	r2,-32172(gp)
81130a60:	10800a17 	ldw	r2,40(r2)
81130a64:	1885883a 	add	r2,r3,r2
81130a68:	1080002b 	ldhuio	r2,0(r2)
81130a6c:	10bfffcc 	andi	r2,r2,65535
81130a70:	1007883a 	mov	r3,r2
81130a74:	e0bfff17 	ldw	r2,-4(fp)
81130a78:	10c0000d 	sth	r3,0(r2)
    return true;
81130a7c:	00800044 	movi	r2,1
}
81130a80:	e037883a 	mov	sp,fp
81130a84:	dfc00117 	ldw	ra,4(sp)
81130a88:	df000017 	ldw	fp,0(sp)
81130a8c:	dec00204 	addi	sp,sp,8
81130a90:	f800283a 	ret

81130a94 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
81130a94:	defffa04 	addi	sp,sp,-24
81130a98:	de00012e 	bgeu	sp,et,81130aa0 <mark_cluster+0xc>
81130a9c:	003b68fa 	trap	3
81130aa0:	dfc00515 	stw	ra,20(sp)
81130aa4:	df000415 	stw	fp,16(sp)
81130aa8:	df000404 	addi	fp,sp,16
81130aac:	e13ffd15 	stw	r4,-12(fp)
81130ab0:	2805883a 	mov	r2,r5
81130ab4:	e1bfff15 	stw	r6,-4(fp)
81130ab8:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
81130abc:	e0bffd17 	ldw	r2,-12(fp)
81130ac0:	1004d23a 	srli	r2,r2,8
81130ac4:	d0e09317 	ldw	r3,-32180(gp)
81130ac8:	10c5883a 	add	r2,r2,r3
81130acc:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
81130ad0:	e0bfff17 	ldw	r2,-4(fp)
81130ad4:	10000726 	beq	r2,zero,81130af4 <mark_cluster+0x60>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
81130ad8:	00a04574 	movhi	r2,33045
81130adc:	1087ee04 	addi	r2,r2,8120
81130ae0:	10801117 	ldw	r2,68(r2)
81130ae4:	e0fffc17 	ldw	r3,-16(fp)
81130ae8:	1885883a 	add	r2,r3,r2
81130aec:	e0bffc15 	stw	r2,-16(fp)
81130af0:	00000606 	br	81130b0c <mark_cluster+0x78>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
81130af4:	00a04574 	movhi	r2,33045
81130af8:	1087ee04 	addi	r2,r2,8120
81130afc:	10801217 	ldw	r2,72(r2)
81130b00:	e0fffc17 	ldw	r3,-16(fp)
81130b04:	1885883a 	add	r2,r3,r2
81130b08:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
81130b0c:	d0a09717 	ldw	r2,-32164(gp)
81130b10:	e0fffc17 	ldw	r3,-16(fp)
81130b14:	18800726 	beq	r3,r2,81130b34 <mark_cluster+0xa0>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
81130b18:	e0bffc17 	ldw	r2,-16(fp)
81130b1c:	000b883a 	mov	r5,zero
81130b20:	1009883a 	mov	r4,r2
81130b24:	11308f80 	call	811308f8 <Read_Sector_Data>
81130b28:	1000021e 	bne	r2,zero,81130b34 <mark_cluster+0xa0>
        {
            return false;
81130b2c:	0005883a 	mov	r2,zero
81130b30:	00000d06 	br	81130b68 <mark_cluster+0xd4>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
81130b34:	e0bffd17 	ldw	r2,-12(fp)
81130b38:	10803fcc 	andi	r2,r2,255
81130b3c:	1085883a 	add	r2,r2,r2
81130b40:	1007883a 	mov	r3,r2
81130b44:	d0a09517 	ldw	r2,-32172(gp)
81130b48:	10800a17 	ldw	r2,40(r2)
81130b4c:	1885883a 	add	r2,r3,r2
81130b50:	1007883a 	mov	r3,r2
81130b54:	e0bffe0f 	ldh	r2,-8(fp)
81130b58:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
81130b5c:	00800044 	movi	r2,1
81130b60:	d0a09615 	stw	r2,-32168(gp)
    return true;
81130b64:	00800044 	movi	r2,1
}
81130b68:	e037883a 	mov	sp,fp
81130b6c:	dfc00117 	ldw	ra,4(sp)
81130b70:	df000017 	ldw	fp,0(sp)
81130b74:	dec00204 	addi	sp,sp,8
81130b78:	f800283a 	ret

81130b7c <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
81130b7c:	defff704 	addi	sp,sp,-36
81130b80:	de00012e 	bgeu	sp,et,81130b88 <Check_for_Master_Boot_Record+0xc>
81130b84:	003b68fa 	trap	3
81130b88:	dfc00815 	stw	ra,32(sp)
81130b8c:	df000715 	stw	fp,28(sp)
81130b90:	df000704 	addi	fp,sp,28
	bool result = false;
81130b94:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
81130b98:	000b883a 	mov	r5,zero
81130b9c:	0009883a 	mov	r4,zero
81130ba0:	11308f80 	call	811308f8 <Read_Sector_Data>
81130ba4:	10005a26 	beq	r2,zero,81130d10 <Check_for_Master_Boot_Record+0x194>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
81130ba8:	d0a09517 	ldw	r2,-32172(gp)
81130bac:	10800a17 	ldw	r2,40(r2)
81130bb0:	10807f84 	addi	r2,r2,510
81130bb4:	1080002b 	ldhuio	r2,0(r2)
81130bb8:	10bfffcc 	andi	r2,r2,65535
81130bbc:	10bfffcc 	andi	r2,r2,65535
81130bc0:	10a0001c 	xori	r2,r2,32768
81130bc4:	10a00004 	addi	r2,r2,-32768
81130bc8:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
81130bcc:	e0bffb17 	ldw	r2,-20(fp)
81130bd0:	10ffffcc 	andi	r3,r2,65535
81130bd4:	00aa9554 	movui	r2,43605
81130bd8:	18804d1e 	bne	r3,r2,81130d10 <Check_for_Master_Boot_Record+0x194>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81130bdc:	e03ffa15 	stw	zero,-24(fp)
81130be0:	00004806 	br	81130d04 <Check_for_Master_Boot_Record+0x188>
			{
				int partition_data_offset = (index * 16) + 0x01be;
81130be4:	e0bffa17 	ldw	r2,-24(fp)
81130be8:	1004913a 	slli	r2,r2,4
81130bec:	10806f84 	addi	r2,r2,446
81130bf0:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
81130bf4:	d0a09517 	ldw	r2,-32172(gp)
81130bf8:	10c00a17 	ldw	r3,40(r2)
81130bfc:	e0bffc17 	ldw	r2,-16(fp)
81130c00:	1885883a 	add	r2,r3,r2
81130c04:	10800104 	addi	r2,r2,4
81130c08:	10800023 	ldbuio	r2,0(r2)
81130c0c:	10803fcc 	andi	r2,r2,255
81130c10:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
81130c14:	e0bffd07 	ldb	r2,-12(fp)
81130c18:	10800060 	cmpeqi	r2,r2,1
81130c1c:	1000091e 	bne	r2,zero,81130c44 <Check_for_Master_Boot_Record+0xc8>
81130c20:	e0bffd07 	ldb	r2,-12(fp)
81130c24:	10800120 	cmpeqi	r2,r2,4
81130c28:	1000061e 	bne	r2,zero,81130c44 <Check_for_Master_Boot_Record+0xc8>
81130c2c:	e0bffd07 	ldb	r2,-12(fp)
81130c30:	108001a0 	cmpeqi	r2,r2,6
81130c34:	1000031e 	bne	r2,zero,81130c44 <Check_for_Master_Boot_Record+0xc8>
81130c38:	e0bffd07 	ldb	r2,-12(fp)
81130c3c:	10800398 	cmpnei	r2,r2,14
81130c40:	10002d1e 	bne	r2,zero,81130cf8 <Check_for_Master_Boot_Record+0x17c>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
81130c44:	d0a09517 	ldw	r2,-32172(gp)
81130c48:	10c00a17 	ldw	r3,40(r2)
81130c4c:	e0bffc17 	ldw	r2,-16(fp)
81130c50:	1885883a 	add	r2,r3,r2
81130c54:	10800284 	addi	r2,r2,10
81130c58:	1080002b 	ldhuio	r2,0(r2)
81130c5c:	10bfffcc 	andi	r2,r2,65535
81130c60:	1006943a 	slli	r3,r2,16
81130c64:	d0a09517 	ldw	r2,-32172(gp)
81130c68:	11000a17 	ldw	r4,40(r2)
81130c6c:	e0bffc17 	ldw	r2,-16(fp)
81130c70:	2085883a 	add	r2,r4,r2
81130c74:	10800204 	addi	r2,r2,8
81130c78:	1080002b 	ldhuio	r2,0(r2)
81130c7c:	10bfffcc 	andi	r2,r2,65535
81130c80:	10bfffcc 	andi	r2,r2,65535
81130c84:	1884b03a 	or	r2,r3,r2
81130c88:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
81130c8c:	d0a09517 	ldw	r2,-32172(gp)
81130c90:	10c00a17 	ldw	r3,40(r2)
81130c94:	e0bffc17 	ldw	r2,-16(fp)
81130c98:	1885883a 	add	r2,r3,r2
81130c9c:	10800384 	addi	r2,r2,14
81130ca0:	1080002b 	ldhuio	r2,0(r2)
81130ca4:	10bfffcc 	andi	r2,r2,65535
81130ca8:	1006943a 	slli	r3,r2,16
81130cac:	d0a09517 	ldw	r2,-32172(gp)
81130cb0:	11000a17 	ldw	r4,40(r2)
81130cb4:	e0bffc17 	ldw	r2,-16(fp)
81130cb8:	2085883a 	add	r2,r4,r2
81130cbc:	10800304 	addi	r2,r2,12
81130cc0:	1080002b 	ldhuio	r2,0(r2)
81130cc4:	10bfffcc 	andi	r2,r2,65535
81130cc8:	10bfffcc 	andi	r2,r2,65535
81130ccc:	1884b03a 	or	r2,r3,r2
81130cd0:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
81130cd4:	e0bfff17 	ldw	r2,-4(fp)
81130cd8:	0080070e 	bge	zero,r2,81130cf8 <Check_for_Master_Boot_Record+0x17c>
					{
						result = true;
81130cdc:	00800044 	movi	r2,1
81130ce0:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
81130ce4:	e0bfff17 	ldw	r2,-4(fp)
81130ce8:	d0a09415 	stw	r2,-32176(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
81130cec:	e0bffe17 	ldw	r2,-8(fp)
81130cf0:	d0a09315 	stw	r2,-32180(gp)
						break;
81130cf4:	00000606 	br	81130d10 <Check_for_Master_Boot_Record+0x194>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
81130cf8:	e0bffa17 	ldw	r2,-24(fp)
81130cfc:	10800044 	addi	r2,r2,1
81130d00:	e0bffa15 	stw	r2,-24(fp)
81130d04:	e0bffa17 	ldw	r2,-24(fp)
81130d08:	10800110 	cmplti	r2,r2,4
81130d0c:	103fb51e 	bne	r2,zero,81130be4 <__reset+0xfb110be4>
				}
			}
		}
	}

	return result;
81130d10:	e0bff917 	ldw	r2,-28(fp)
}
81130d14:	e037883a 	mov	sp,fp
81130d18:	dfc00117 	ldw	ra,4(sp)
81130d1c:	df000017 	ldw	fp,0(sp)
81130d20:	dec00204 	addi	sp,sp,8
81130d24:	f800283a 	ret

81130d28 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
81130d28:	defff804 	addi	sp,sp,-32
81130d2c:	de00012e 	bgeu	sp,et,81130d34 <Read_File_Record_At_Offset+0xc>
81130d30:	003b68fa 	trap	3
81130d34:	dfc00715 	stw	ra,28(sp)
81130d38:	df000615 	stw	fp,24(sp)
81130d3c:	df000604 	addi	fp,sp,24
81130d40:	e13ffc15 	stw	r4,-16(fp)
81130d44:	e17ffd15 	stw	r5,-12(fp)
81130d48:	e1bffe15 	stw	r6,-8(fp)
81130d4c:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
81130d50:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81130d54:	e0bffc17 	ldw	r2,-16(fp)
81130d58:	108007cc 	andi	r2,r2,31
81130d5c:	10008d1e 	bne	r2,zero,81130f94 <Read_File_Record_At_Offset+0x26c>
81130d60:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
81130d64:	10008b26 	beq	r2,zero,81130f94 <Read_File_Record_At_Offset+0x26c>
81130d68:	d0a08c17 	ldw	r2,-32208(gp)
81130d6c:	10008926 	beq	r2,zero,81130f94 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81130d70:	e03ffb15 	stw	zero,-20(fp)
81130d74:	00001106 	br	81130dbc <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
81130d78:	e0fffc17 	ldw	r3,-16(fp)
81130d7c:	e0bffb17 	ldw	r2,-20(fp)
81130d80:	1885883a 	add	r2,r3,r2
81130d84:	1007883a 	mov	r3,r2
81130d88:	d0a09517 	ldw	r2,-32172(gp)
81130d8c:	10800a17 	ldw	r2,40(r2)
81130d90:	1885883a 	add	r2,r3,r2
81130d94:	10800023 	ldbuio	r2,0(r2)
81130d98:	10803fcc 	andi	r2,r2,255
81130d9c:	1009883a 	mov	r4,r2
81130da0:	e0fffd17 	ldw	r3,-12(fp)
81130da4:	e0bffb17 	ldw	r2,-20(fp)
81130da8:	1885883a 	add	r2,r3,r2
81130dac:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
81130db0:	e0bffb17 	ldw	r2,-20(fp)
81130db4:	10800044 	addi	r2,r2,1
81130db8:	e0bffb15 	stw	r2,-20(fp)
81130dbc:	e0bffb17 	ldw	r2,-20(fp)
81130dc0:	10800210 	cmplti	r2,r2,8
81130dc4:	103fec1e 	bne	r2,zero,81130d78 <__reset+0xfb110d78>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81130dc8:	e03ffb15 	stw	zero,-20(fp)
81130dcc:	00001306 	br	81130e1c <Read_File_Record_At_Offset+0xf4>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
81130dd0:	e0fffc17 	ldw	r3,-16(fp)
81130dd4:	e0bffb17 	ldw	r2,-20(fp)
81130dd8:	1885883a 	add	r2,r3,r2
81130ddc:	1007883a 	mov	r3,r2
81130de0:	d0a09517 	ldw	r2,-32172(gp)
81130de4:	10800a17 	ldw	r2,40(r2)
81130de8:	1885883a 	add	r2,r3,r2
81130dec:	10800204 	addi	r2,r2,8
81130df0:	10800023 	ldbuio	r2,0(r2)
81130df4:	10803fcc 	andi	r2,r2,255
81130df8:	1009883a 	mov	r4,r2
81130dfc:	e0fffd17 	ldw	r3,-12(fp)
81130e00:	e0bffb17 	ldw	r2,-20(fp)
81130e04:	1885883a 	add	r2,r3,r2
81130e08:	10800204 	addi	r2,r2,8
81130e0c:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
81130e10:	e0bffb17 	ldw	r2,-20(fp)
81130e14:	10800044 	addi	r2,r2,1
81130e18:	e0bffb15 	stw	r2,-20(fp)
81130e1c:	e0bffb17 	ldw	r2,-20(fp)
81130e20:	108000d0 	cmplti	r2,r2,3
81130e24:	103fea1e 	bne	r2,zero,81130dd0 <__reset+0xfb110dd0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
81130e28:	d0a09517 	ldw	r2,-32172(gp)
81130e2c:	10c00a17 	ldw	r3,40(r2)
81130e30:	e0bffc17 	ldw	r2,-16(fp)
81130e34:	1885883a 	add	r2,r3,r2
81130e38:	108002c4 	addi	r2,r2,11
81130e3c:	10800023 	ldbuio	r2,0(r2)
81130e40:	10803fcc 	andi	r2,r2,255
81130e44:	1007883a 	mov	r3,r2
81130e48:	e0bffd17 	ldw	r2,-12(fp)
81130e4c:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
81130e50:	d0a09517 	ldw	r2,-32172(gp)
81130e54:	10c00a17 	ldw	r3,40(r2)
81130e58:	e0bffc17 	ldw	r2,-16(fp)
81130e5c:	1885883a 	add	r2,r3,r2
81130e60:	10800384 	addi	r2,r2,14
81130e64:	1080002b 	ldhuio	r2,0(r2)
81130e68:	10bfffcc 	andi	r2,r2,65535
81130e6c:	1007883a 	mov	r3,r2
81130e70:	e0bffd17 	ldw	r2,-12(fp)
81130e74:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
81130e78:	d0a09517 	ldw	r2,-32172(gp)
81130e7c:	10c00a17 	ldw	r3,40(r2)
81130e80:	e0bffc17 	ldw	r2,-16(fp)
81130e84:	1885883a 	add	r2,r3,r2
81130e88:	10800404 	addi	r2,r2,16
81130e8c:	1080002b 	ldhuio	r2,0(r2)
81130e90:	10bfffcc 	andi	r2,r2,65535
81130e94:	1007883a 	mov	r3,r2
81130e98:	e0bffd17 	ldw	r2,-12(fp)
81130e9c:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
81130ea0:	d0a09517 	ldw	r2,-32172(gp)
81130ea4:	10c00a17 	ldw	r3,40(r2)
81130ea8:	e0bffc17 	ldw	r2,-16(fp)
81130eac:	1885883a 	add	r2,r3,r2
81130eb0:	10800484 	addi	r2,r2,18
81130eb4:	1080002b 	ldhuio	r2,0(r2)
81130eb8:	10bfffcc 	andi	r2,r2,65535
81130ebc:	1007883a 	mov	r3,r2
81130ec0:	e0bffd17 	ldw	r2,-12(fp)
81130ec4:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
81130ec8:	d0a09517 	ldw	r2,-32172(gp)
81130ecc:	10c00a17 	ldw	r3,40(r2)
81130ed0:	e0bffc17 	ldw	r2,-16(fp)
81130ed4:	1885883a 	add	r2,r3,r2
81130ed8:	10800584 	addi	r2,r2,22
81130edc:	1080002b 	ldhuio	r2,0(r2)
81130ee0:	10bfffcc 	andi	r2,r2,65535
81130ee4:	1007883a 	mov	r3,r2
81130ee8:	e0bffd17 	ldw	r2,-12(fp)
81130eec:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
81130ef0:	d0a09517 	ldw	r2,-32172(gp)
81130ef4:	10c00a17 	ldw	r3,40(r2)
81130ef8:	e0bffc17 	ldw	r2,-16(fp)
81130efc:	1885883a 	add	r2,r3,r2
81130f00:	10800604 	addi	r2,r2,24
81130f04:	1080002b 	ldhuio	r2,0(r2)
81130f08:	10bfffcc 	andi	r2,r2,65535
81130f0c:	1007883a 	mov	r3,r2
81130f10:	e0bffd17 	ldw	r2,-12(fp)
81130f14:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
81130f18:	d0a09517 	ldw	r2,-32172(gp)
81130f1c:	10c00a17 	ldw	r3,40(r2)
81130f20:	e0bffc17 	ldw	r2,-16(fp)
81130f24:	1885883a 	add	r2,r3,r2
81130f28:	10800684 	addi	r2,r2,26
81130f2c:	1080002b 	ldhuio	r2,0(r2)
81130f30:	10bfffcc 	andi	r2,r2,65535
81130f34:	1007883a 	mov	r3,r2
81130f38:	e0bffd17 	ldw	r2,-12(fp)
81130f3c:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
81130f40:	d0a09517 	ldw	r2,-32172(gp)
81130f44:	10c00a17 	ldw	r3,40(r2)
81130f48:	e0bffc17 	ldw	r2,-16(fp)
81130f4c:	1885883a 	add	r2,r3,r2
81130f50:	10800704 	addi	r2,r2,28
81130f54:	10800037 	ldwio	r2,0(r2)
81130f58:	1007883a 	mov	r3,r2
81130f5c:	e0bffd17 	ldw	r2,-12(fp)
81130f60:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
81130f64:	e0bffd17 	ldw	r2,-12(fp)
81130f68:	e0fffe17 	ldw	r3,-8(fp)
81130f6c:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
81130f70:	e0bffd17 	ldw	r2,-12(fp)
81130f74:	e0ffff17 	ldw	r3,-4(fp)
81130f78:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
81130f7c:	e0bffc17 	ldw	r2,-16(fp)
81130f80:	1007883a 	mov	r3,r2
81130f84:	e0bffd17 	ldw	r2,-12(fp)
81130f88:	10c00c0d 	sth	r3,48(r2)
		result = true;
81130f8c:	00800044 	movi	r2,1
81130f90:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
81130f94:	e0bffa17 	ldw	r2,-24(fp)
}
81130f98:	e037883a 	mov	sp,fp
81130f9c:	dfc00117 	ldw	ra,4(sp)
81130fa0:	df000017 	ldw	fp,0(sp)
81130fa4:	dec00204 	addi	sp,sp,8
81130fa8:	f800283a 	ret

81130fac <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
81130fac:	defff904 	addi	sp,sp,-28
81130fb0:	de00012e 	bgeu	sp,et,81130fb8 <Write_File_Record_At_Offset+0xc>
81130fb4:	003b68fa 	trap	3
81130fb8:	dfc00615 	stw	ra,24(sp)
81130fbc:	df000515 	stw	fp,20(sp)
81130fc0:	df000504 	addi	fp,sp,20
81130fc4:	e13ffe15 	stw	r4,-8(fp)
81130fc8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
81130fcc:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81130fd0:	e0bffe17 	ldw	r2,-8(fp)
81130fd4:	108007cc 	andi	r2,r2,31
81130fd8:	1000931e 	bne	r2,zero,81131228 <Write_File_Record_At_Offset+0x27c>
81130fdc:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
81130fe0:	10009126 	beq	r2,zero,81131228 <Write_File_Record_At_Offset+0x27c>
81130fe4:	d0a08c17 	ldw	r2,-32208(gp)
81130fe8:	10008f26 	beq	r2,zero,81131228 <Write_File_Record_At_Offset+0x27c>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81130fec:	e03ffc15 	stw	zero,-16(fp)
81130ff0:	00001f06 	br	81131070 <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
81130ff4:	e0bffc17 	ldw	r2,-16(fp)
81130ff8:	10800044 	addi	r2,r2,1
81130ffc:	e0ffff17 	ldw	r3,-4(fp)
81131000:	1885883a 	add	r2,r3,r2
81131004:	10800003 	ldbu	r2,0(r2)
81131008:	10803fcc 	andi	r2,r2,255
8113100c:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
81131010:	e0bffd0f 	ldh	r2,-12(fp)
81131014:	1004923a 	slli	r2,r2,8
81131018:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
8113101c:	e0ffff17 	ldw	r3,-4(fp)
81131020:	e0bffc17 	ldw	r2,-16(fp)
81131024:	1885883a 	add	r2,r3,r2
81131028:	10800003 	ldbu	r2,0(r2)
8113102c:	10c03fcc 	andi	r3,r2,255
81131030:	e0bffd0b 	ldhu	r2,-12(fp)
81131034:	1884b03a 	or	r2,r3,r2
81131038:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
8113103c:	e0fffe17 	ldw	r3,-8(fp)
81131040:	e0bffc17 	ldw	r2,-16(fp)
81131044:	1885883a 	add	r2,r3,r2
81131048:	1007883a 	mov	r3,r2
8113104c:	d0a09517 	ldw	r2,-32172(gp)
81131050:	10800a17 	ldw	r2,40(r2)
81131054:	1885883a 	add	r2,r3,r2
81131058:	1007883a 	mov	r3,r2
8113105c:	e0bffd0f 	ldh	r2,-12(fp)
81131060:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
81131064:	e0bffc17 	ldw	r2,-16(fp)
81131068:	10800084 	addi	r2,r2,2
8113106c:	e0bffc15 	stw	r2,-16(fp)
81131070:	e0bffc17 	ldw	r2,-16(fp)
81131074:	10800210 	cmplti	r2,r2,8
81131078:	103fde1e 	bne	r2,zero,81130ff4 <__reset+0xfb110ff4>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
8113107c:	e03ffc15 	stw	zero,-16(fp)
81131080:	00001306 	br	811310d0 <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
81131084:	e0fffe17 	ldw	r3,-8(fp)
81131088:	e0bffc17 	ldw	r2,-16(fp)
8113108c:	1885883a 	add	r2,r3,r2
81131090:	1007883a 	mov	r3,r2
81131094:	d0a09517 	ldw	r2,-32172(gp)
81131098:	10800a17 	ldw	r2,40(r2)
8113109c:	1885883a 	add	r2,r3,r2
811310a0:	10800204 	addi	r2,r2,8
811310a4:	1009883a 	mov	r4,r2
811310a8:	e0ffff17 	ldw	r3,-4(fp)
811310ac:	e0bffc17 	ldw	r2,-16(fp)
811310b0:	1885883a 	add	r2,r3,r2
811310b4:	10800204 	addi	r2,r2,8
811310b8:	10800003 	ldbu	r2,0(r2)
811310bc:	10803fcc 	andi	r2,r2,255
811310c0:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
811310c4:	e0bffc17 	ldw	r2,-16(fp)
811310c8:	10800044 	addi	r2,r2,1
811310cc:	e0bffc15 	stw	r2,-16(fp)
811310d0:	e0bffc17 	ldw	r2,-16(fp)
811310d4:	108000d0 	cmplti	r2,r2,3
811310d8:	103fea1e 	bne	r2,zero,81131084 <__reset+0xfb111084>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
811310dc:	d0a09517 	ldw	r2,-32172(gp)
811310e0:	10c00a17 	ldw	r3,40(r2)
811310e4:	e0bffe17 	ldw	r2,-8(fp)
811310e8:	1885883a 	add	r2,r3,r2
811310ec:	108002c4 	addi	r2,r2,11
811310f0:	1007883a 	mov	r3,r2
811310f4:	e0bfff17 	ldw	r2,-4(fp)
811310f8:	108002c3 	ldbu	r2,11(r2)
811310fc:	10803fcc 	andi	r2,r2,255
81131100:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
81131104:	d0a09517 	ldw	r2,-32172(gp)
81131108:	10c00a17 	ldw	r3,40(r2)
8113110c:	e0bffe17 	ldw	r2,-8(fp)
81131110:	1885883a 	add	r2,r3,r2
81131114:	10800384 	addi	r2,r2,14
81131118:	1007883a 	mov	r3,r2
8113111c:	e0bfff17 	ldw	r2,-4(fp)
81131120:	1080030b 	ldhu	r2,12(r2)
81131124:	10bfffcc 	andi	r2,r2,65535
81131128:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
8113112c:	d0a09517 	ldw	r2,-32172(gp)
81131130:	10c00a17 	ldw	r3,40(r2)
81131134:	e0bffe17 	ldw	r2,-8(fp)
81131138:	1885883a 	add	r2,r3,r2
8113113c:	10800404 	addi	r2,r2,16
81131140:	1007883a 	mov	r3,r2
81131144:	e0bfff17 	ldw	r2,-4(fp)
81131148:	1080038b 	ldhu	r2,14(r2)
8113114c:	10bfffcc 	andi	r2,r2,65535
81131150:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
81131154:	d0a09517 	ldw	r2,-32172(gp)
81131158:	10c00a17 	ldw	r3,40(r2)
8113115c:	e0bffe17 	ldw	r2,-8(fp)
81131160:	1885883a 	add	r2,r3,r2
81131164:	10800484 	addi	r2,r2,18
81131168:	1007883a 	mov	r3,r2
8113116c:	e0bfff17 	ldw	r2,-4(fp)
81131170:	1080040b 	ldhu	r2,16(r2)
81131174:	10bfffcc 	andi	r2,r2,65535
81131178:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
8113117c:	d0a09517 	ldw	r2,-32172(gp)
81131180:	10c00a17 	ldw	r3,40(r2)
81131184:	e0bffe17 	ldw	r2,-8(fp)
81131188:	1885883a 	add	r2,r3,r2
8113118c:	10800584 	addi	r2,r2,22
81131190:	1007883a 	mov	r3,r2
81131194:	e0bfff17 	ldw	r2,-4(fp)
81131198:	1080048b 	ldhu	r2,18(r2)
8113119c:	10bfffcc 	andi	r2,r2,65535
811311a0:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
811311a4:	d0a09517 	ldw	r2,-32172(gp)
811311a8:	10c00a17 	ldw	r3,40(r2)
811311ac:	e0bffe17 	ldw	r2,-8(fp)
811311b0:	1885883a 	add	r2,r3,r2
811311b4:	10800604 	addi	r2,r2,24
811311b8:	1007883a 	mov	r3,r2
811311bc:	e0bfff17 	ldw	r2,-4(fp)
811311c0:	1080050b 	ldhu	r2,20(r2)
811311c4:	10bfffcc 	andi	r2,r2,65535
811311c8:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
811311cc:	d0a09517 	ldw	r2,-32172(gp)
811311d0:	10c00a17 	ldw	r3,40(r2)
811311d4:	e0bffe17 	ldw	r2,-8(fp)
811311d8:	1885883a 	add	r2,r3,r2
811311dc:	10800684 	addi	r2,r2,26
811311e0:	1007883a 	mov	r3,r2
811311e4:	e0bfff17 	ldw	r2,-4(fp)
811311e8:	1080058b 	ldhu	r2,22(r2)
811311ec:	10bfffcc 	andi	r2,r2,65535
811311f0:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
811311f4:	d0a09517 	ldw	r2,-32172(gp)
811311f8:	10c00a17 	ldw	r3,40(r2)
811311fc:	e0bffe17 	ldw	r2,-8(fp)
81131200:	1885883a 	add	r2,r3,r2
81131204:	10800704 	addi	r2,r2,28
81131208:	1007883a 	mov	r3,r2
8113120c:	e0bfff17 	ldw	r2,-4(fp)
81131210:	10800617 	ldw	r2,24(r2)
81131214:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
81131218:	00800044 	movi	r2,1
8113121c:	d0a09615 	stw	r2,-32168(gp)
        result = true;
81131220:	00800044 	movi	r2,1
81131224:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
81131228:	e0bffb17 	ldw	r2,-20(fp)
}
8113122c:	e037883a 	mov	sp,fp
81131230:	dfc00117 	ldw	ra,4(sp)
81131234:	df000017 	ldw	fp,0(sp)
81131238:	dec00204 	addi	sp,sp,8
8113123c:	f800283a 	ret

81131240 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
81131240:	defff904 	addi	sp,sp,-28
81131244:	de00012e 	bgeu	sp,et,8113124c <Check_for_DOS_FAT+0xc>
81131248:	003b68fa 	trap	3
8113124c:	dfc00615 	stw	ra,24(sp)
81131250:	df000515 	stw	fp,20(sp)
81131254:	df000504 	addi	fp,sp,20
81131258:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
8113125c:	e03ffb15 	stw	zero,-20(fp)
	int counter = 0;
81131260:	e03ffc15 	stw	zero,-16(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
81131264:	e17fff17 	ldw	r5,-4(fp)
81131268:	0009883a 	mov	r4,zero
8113126c:	11308f80 	call	811308f8 <Read_Sector_Data>
81131270:	e0bffb15 	stw	r2,-20(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
81131274:	d0a09517 	ldw	r2,-32172(gp)
81131278:	10800a17 	ldw	r2,40(r2)
8113127c:	10807f84 	addi	r2,r2,510
81131280:	1080002b 	ldhuio	r2,0(r2)
81131284:	10bfffcc 	andi	r2,r2,65535
81131288:	e0bffe0d 	sth	r2,-8(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
8113128c:	e0bffe0f 	ldh	r2,-8(fp)
81131290:	10ffffcc 	andi	r3,r2,65535
81131294:	00aa9554 	movui	r2,43605
81131298:	1881841e 	bne	r3,r2,811318ac <Check_for_DOS_FAT+0x66c>
8113129c:	e0bffb17 	ldw	r2,-20(fp)
811312a0:	10018226 	beq	r2,zero,811318ac <Check_for_DOS_FAT+0x66c>
	{
		int num_clusters = 0;
811312a4:	e03ffd15 	stw	zero,-12(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
811312a8:	d0a09517 	ldw	r2,-32172(gp)
811312ac:	10800a17 	ldw	r2,40(r2)
811312b0:	10800023 	ldbuio	r2,0(r2)
811312b4:	10803fcc 	andi	r2,r2,255
811312b8:	1007883a 	mov	r3,r2
811312bc:	00a04574 	movhi	r2,33045
811312c0:	1087ee04 	addi	r2,r2,8120
811312c4:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
811312c8:	d0a09517 	ldw	r2,-32172(gp)
811312cc:	10800a17 	ldw	r2,40(r2)
811312d0:	10800044 	addi	r2,r2,1
811312d4:	10800023 	ldbuio	r2,0(r2)
811312d8:	10803fcc 	andi	r2,r2,255
811312dc:	1007883a 	mov	r3,r2
811312e0:	00a04574 	movhi	r2,33045
811312e4:	1087ee04 	addi	r2,r2,8120
811312e8:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
811312ec:	d0a09517 	ldw	r2,-32172(gp)
811312f0:	10800a17 	ldw	r2,40(r2)
811312f4:	10800084 	addi	r2,r2,2
811312f8:	10800023 	ldbuio	r2,0(r2)
811312fc:	10803fcc 	andi	r2,r2,255
81131300:	1007883a 	mov	r3,r2
81131304:	00a04574 	movhi	r2,33045
81131308:	1087ee04 	addi	r2,r2,8120
8113130c:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
81131310:	e03ffc15 	stw	zero,-16(fp)
81131314:	00001106 	br	8113135c <Check_for_DOS_FAT+0x11c>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
81131318:	d0a09517 	ldw	r2,-32172(gp)
8113131c:	10c00a17 	ldw	r3,40(r2)
81131320:	e0bffc17 	ldw	r2,-16(fp)
81131324:	1885883a 	add	r2,r3,r2
81131328:	108000c4 	addi	r2,r2,3
8113132c:	10800023 	ldbuio	r2,0(r2)
81131330:	10803fcc 	andi	r2,r2,255
81131334:	1009883a 	mov	r4,r2
81131338:	00a04574 	movhi	r2,33045
8113133c:	1087ee04 	addi	r2,r2,8120
81131340:	e0fffc17 	ldw	r3,-16(fp)
81131344:	10c5883a 	add	r2,r2,r3
81131348:	108000c4 	addi	r2,r2,3
8113134c:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
81131350:	e0bffc17 	ldw	r2,-16(fp)
81131354:	10800044 	addi	r2,r2,1
81131358:	e0bffc15 	stw	r2,-16(fp)
8113135c:	e0bffc17 	ldw	r2,-16(fp)
81131360:	10800210 	cmplti	r2,r2,8
81131364:	103fec1e 	bne	r2,zero,81131318 <__reset+0xfb111318>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
81131368:	d0a09517 	ldw	r2,-32172(gp)
8113136c:	10800a17 	ldw	r2,40(r2)
81131370:	10800304 	addi	r2,r2,12
81131374:	10800023 	ldbuio	r2,0(r2)
81131378:	10803fcc 	andi	r2,r2,255
8113137c:	1004923a 	slli	r2,r2,8
81131380:	1007883a 	mov	r3,r2
81131384:	d0a09517 	ldw	r2,-32172(gp)
81131388:	10800a17 	ldw	r2,40(r2)
8113138c:	108002c4 	addi	r2,r2,11
81131390:	10800023 	ldbuio	r2,0(r2)
81131394:	10803fcc 	andi	r2,r2,255
81131398:	10803fcc 	andi	r2,r2,255
8113139c:	1080201c 	xori	r2,r2,128
811313a0:	10bfe004 	addi	r2,r2,-128
811313a4:	1884b03a 	or	r2,r3,r2
811313a8:	1007883a 	mov	r3,r2
811313ac:	00a04574 	movhi	r2,33045
811313b0:	1087ee04 	addi	r2,r2,8120
811313b4:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
811313b8:	d0a09517 	ldw	r2,-32172(gp)
811313bc:	10800a17 	ldw	r2,40(r2)
811313c0:	10800344 	addi	r2,r2,13
811313c4:	10800023 	ldbuio	r2,0(r2)
811313c8:	10803fcc 	andi	r2,r2,255
811313cc:	1007883a 	mov	r3,r2
811313d0:	00a04574 	movhi	r2,33045
811313d4:	1087ee04 	addi	r2,r2,8120
811313d8:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
811313dc:	d0a09517 	ldw	r2,-32172(gp)
811313e0:	10800a17 	ldw	r2,40(r2)
811313e4:	10800384 	addi	r2,r2,14
811313e8:	1080002b 	ldhuio	r2,0(r2)
811313ec:	10bfffcc 	andi	r2,r2,65535
811313f0:	1007883a 	mov	r3,r2
811313f4:	00a04574 	movhi	r2,33045
811313f8:	1087ee04 	addi	r2,r2,8120
811313fc:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
81131400:	d0a09517 	ldw	r2,-32172(gp)
81131404:	10800a17 	ldw	r2,40(r2)
81131408:	10800404 	addi	r2,r2,16
8113140c:	10800023 	ldbuio	r2,0(r2)
81131410:	10803fcc 	andi	r2,r2,255
81131414:	1007883a 	mov	r3,r2
81131418:	00a04574 	movhi	r2,33045
8113141c:	1087ee04 	addi	r2,r2,8120
81131420:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
81131424:	d0a09517 	ldw	r2,-32172(gp)
81131428:	10800a17 	ldw	r2,40(r2)
8113142c:	10800484 	addi	r2,r2,18
81131430:	10800023 	ldbuio	r2,0(r2)
81131434:	10803fcc 	andi	r2,r2,255
81131438:	1004923a 	slli	r2,r2,8
8113143c:	1007883a 	mov	r3,r2
81131440:	d0a09517 	ldw	r2,-32172(gp)
81131444:	10800a17 	ldw	r2,40(r2)
81131448:	10800444 	addi	r2,r2,17
8113144c:	10800023 	ldbuio	r2,0(r2)
81131450:	10803fcc 	andi	r2,r2,255
81131454:	10803fcc 	andi	r2,r2,255
81131458:	1884b03a 	or	r2,r3,r2
8113145c:	1007883a 	mov	r3,r2
81131460:	00a04574 	movhi	r2,33045
81131464:	1087ee04 	addi	r2,r2,8120
81131468:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
8113146c:	d0a09517 	ldw	r2,-32172(gp)
81131470:	10800a17 	ldw	r2,40(r2)
81131474:	10800504 	addi	r2,r2,20
81131478:	10800023 	ldbuio	r2,0(r2)
8113147c:	10803fcc 	andi	r2,r2,255
81131480:	1004923a 	slli	r2,r2,8
81131484:	1007883a 	mov	r3,r2
81131488:	d0a09517 	ldw	r2,-32172(gp)
8113148c:	10800a17 	ldw	r2,40(r2)
81131490:	108004c4 	addi	r2,r2,19
81131494:	10800023 	ldbuio	r2,0(r2)
81131498:	10803fcc 	andi	r2,r2,255
8113149c:	10803fcc 	andi	r2,r2,255
811314a0:	1884b03a 	or	r2,r3,r2
811314a4:	1007883a 	mov	r3,r2
811314a8:	00a04574 	movhi	r2,33045
811314ac:	1087ee04 	addi	r2,r2,8120
811314b0:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
811314b4:	d0a09517 	ldw	r2,-32172(gp)
811314b8:	10800a17 	ldw	r2,40(r2)
811314bc:	10800544 	addi	r2,r2,21
811314c0:	10800023 	ldbuio	r2,0(r2)
811314c4:	10803fcc 	andi	r2,r2,255
811314c8:	1007883a 	mov	r3,r2
811314cc:	00a04574 	movhi	r2,33045
811314d0:	1087ee04 	addi	r2,r2,8120
811314d4:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
811314d8:	d0a09517 	ldw	r2,-32172(gp)
811314dc:	10800a17 	ldw	r2,40(r2)
811314e0:	10800584 	addi	r2,r2,22
811314e4:	1080002b 	ldhuio	r2,0(r2)
811314e8:	10bfffcc 	andi	r2,r2,65535
811314ec:	1007883a 	mov	r3,r2
811314f0:	00a04574 	movhi	r2,33045
811314f4:	1087ee04 	addi	r2,r2,8120
811314f8:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
811314fc:	d0a09517 	ldw	r2,-32172(gp)
81131500:	10800a17 	ldw	r2,40(r2)
81131504:	10800604 	addi	r2,r2,24
81131508:	1080002b 	ldhuio	r2,0(r2)
8113150c:	10bfffcc 	andi	r2,r2,65535
81131510:	1007883a 	mov	r3,r2
81131514:	00a04574 	movhi	r2,33045
81131518:	1087ee04 	addi	r2,r2,8120
8113151c:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
81131520:	d0a09517 	ldw	r2,-32172(gp)
81131524:	10800a17 	ldw	r2,40(r2)
81131528:	10800684 	addi	r2,r2,26
8113152c:	1080002b 	ldhuio	r2,0(r2)
81131530:	10bfffcc 	andi	r2,r2,65535
81131534:	1007883a 	mov	r3,r2
81131538:	00a04574 	movhi	r2,33045
8113153c:	1087ee04 	addi	r2,r2,8120
81131540:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
81131544:	d0a09517 	ldw	r2,-32172(gp)
81131548:	10800a17 	ldw	r2,40(r2)
8113154c:	10800704 	addi	r2,r2,28
81131550:	10800037 	ldwio	r2,0(r2)
81131554:	1007883a 	mov	r3,r2
81131558:	00a04574 	movhi	r2,33045
8113155c:	1087ee04 	addi	r2,r2,8120
81131560:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
81131564:	d0a09517 	ldw	r2,-32172(gp)
81131568:	10800a17 	ldw	r2,40(r2)
8113156c:	10800804 	addi	r2,r2,32
81131570:	10800037 	ldwio	r2,0(r2)
81131574:	1007883a 	mov	r3,r2
81131578:	00a04574 	movhi	r2,33045
8113157c:	1087ee04 	addi	r2,r2,8120
81131580:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
81131584:	d0a09517 	ldw	r2,-32172(gp)
81131588:	10800a17 	ldw	r2,40(r2)
8113158c:	10800904 	addi	r2,r2,36
81131590:	10800023 	ldbuio	r2,0(r2)
81131594:	10803fcc 	andi	r2,r2,255
81131598:	1007883a 	mov	r3,r2
8113159c:	00a04574 	movhi	r2,33045
811315a0:	1087ee04 	addi	r2,r2,8120
811315a4:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
811315a8:	d0a09517 	ldw	r2,-32172(gp)
811315ac:	10800a17 	ldw	r2,40(r2)
811315b0:	10800944 	addi	r2,r2,37
811315b4:	10800023 	ldbuio	r2,0(r2)
811315b8:	10803fcc 	andi	r2,r2,255
811315bc:	1007883a 	mov	r3,r2
811315c0:	00a04574 	movhi	r2,33045
811315c4:	1087ee04 	addi	r2,r2,8120
811315c8:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
811315cc:	d0a09517 	ldw	r2,-32172(gp)
811315d0:	10800a17 	ldw	r2,40(r2)
811315d4:	10800984 	addi	r2,r2,38
811315d8:	10800023 	ldbuio	r2,0(r2)
811315dc:	10803fcc 	andi	r2,r2,255
811315e0:	1007883a 	mov	r3,r2
811315e4:	00a04574 	movhi	r2,33045
811315e8:	1087ee04 	addi	r2,r2,8120
811315ec:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
811315f0:	00a04574 	movhi	r2,33045
811315f4:	1087ee04 	addi	r2,r2,8120
811315f8:	1080040b 	ldhu	r2,16(r2)
811315fc:	10ffffcc 	andi	r3,r2,65535
81131600:	00a04574 	movhi	r2,33045
81131604:	1087ee04 	addi	r2,r2,8120
81131608:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
8113160c:	00a04574 	movhi	r2,33045
81131610:	1087ee04 	addi	r2,r2,8120
81131614:	10c01117 	ldw	r3,68(r2)
81131618:	00a04574 	movhi	r2,33045
8113161c:	1087ee04 	addi	r2,r2,8120
81131620:	1080068b 	ldhu	r2,26(r2)
81131624:	10bfffcc 	andi	r2,r2,65535
81131628:	1887883a 	add	r3,r3,r2
8113162c:	00a04574 	movhi	r2,33045
81131630:	1087ee04 	addi	r2,r2,8120
81131634:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
81131638:	00a04574 	movhi	r2,33045
8113163c:	1087ee04 	addi	r2,r2,8120
81131640:	10c01217 	ldw	r3,72(r2)
81131644:	00a04574 	movhi	r2,33045
81131648:	1087ee04 	addi	r2,r2,8120
8113164c:	1080068b 	ldhu	r2,26(r2)
81131650:	10bfffcc 	andi	r2,r2,65535
81131654:	1887883a 	add	r3,r3,r2
81131658:	00a04574 	movhi	r2,33045
8113165c:	1087ee04 	addi	r2,r2,8120
81131660:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
81131664:	00a04574 	movhi	r2,33045
81131668:	1087ee04 	addi	r2,r2,8120
8113166c:	10c01317 	ldw	r3,76(r2)
81131670:	00a04574 	movhi	r2,33045
81131674:	1087ee04 	addi	r2,r2,8120
81131678:	1080050b 	ldhu	r2,20(r2)
8113167c:	10bfffcc 	andi	r2,r2,65535
81131680:	1008917a 	slli	r4,r2,5
81131684:	00a04574 	movhi	r2,33045
81131688:	1087ee04 	addi	r2,r2,8120
8113168c:	1080030b 	ldhu	r2,12(r2)
81131690:	10bfffcc 	andi	r2,r2,65535
81131694:	2085283a 	div	r2,r4,r2
81131698:	1887883a 	add	r3,r3,r2
8113169c:	00a04574 	movhi	r2,33045
811316a0:	1087ee04 	addi	r2,r2,8120
811316a4:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
811316a8:	00a04574 	movhi	r2,33045
811316ac:	1087ee04 	addi	r2,r2,8120
811316b0:	1080058b 	ldhu	r2,22(r2)
811316b4:	10bfffcc 	andi	r2,r2,65535
811316b8:	10000b26 	beq	r2,zero,811316e8 <Check_for_DOS_FAT+0x4a8>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
811316bc:	00a04574 	movhi	r2,33045
811316c0:	1087ee04 	addi	r2,r2,8120
811316c4:	1080058b 	ldhu	r2,22(r2)
811316c8:	10ffffcc 	andi	r3,r2,65535
811316cc:	00a04574 	movhi	r2,33045
811316d0:	1087ee04 	addi	r2,r2,8120
811316d4:	10800383 	ldbu	r2,14(r2)
811316d8:	10803fcc 	andi	r2,r2,255
811316dc:	1885283a 	div	r2,r3,r2
811316e0:	e0bffd15 	stw	r2,-12(fp)
811316e4:	00000906 	br	8113170c <Check_for_DOS_FAT+0x4cc>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
811316e8:	00a04574 	movhi	r2,33045
811316ec:	1087ee04 	addi	r2,r2,8120
811316f0:	10c00917 	ldw	r3,36(r2)
811316f4:	00a04574 	movhi	r2,33045
811316f8:	1087ee04 	addi	r2,r2,8120
811316fc:	10800383 	ldbu	r2,14(r2)
81131700:	10803fcc 	andi	r2,r2,255
81131704:	1885203a 	divu	r2,r3,r2
81131708:	e0bffd15 	stw	r2,-12(fp)
		}
		if (num_clusters < 4087)
8113170c:	e0bffd17 	ldw	r2,-12(fp)
81131710:	1083fdc8 	cmpgei	r2,r2,4087
81131714:	1000051e 	bne	r2,zero,8113172c <Check_for_DOS_FAT+0x4ec>
		{
			boot_sector_data.bits_for_cluster_index = 12;
81131718:	00a04574 	movhi	r2,33045
8113171c:	1087ee04 	addi	r2,r2,8120
81131720:	00c00304 	movi	r3,12
81131724:	10c01085 	stb	r3,66(r2)
81131728:	00000c06 	br	8113175c <Check_for_DOS_FAT+0x51c>
		}
		else if (num_clusters <= 65517)
8113172c:	e0bffd17 	ldw	r2,-12(fp)
81131730:	00fffb54 	movui	r3,65517
81131734:	18800516 	blt	r3,r2,8113174c <Check_for_DOS_FAT+0x50c>
		{
			boot_sector_data.bits_for_cluster_index = 16;
81131738:	00a04574 	movhi	r2,33045
8113173c:	1087ee04 	addi	r2,r2,8120
81131740:	00c00404 	movi	r3,16
81131744:	10c01085 	stb	r3,66(r2)
81131748:	00000406 	br	8113175c <Check_for_DOS_FAT+0x51c>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
8113174c:	00a04574 	movhi	r2,33045
81131750:	1087ee04 	addi	r2,r2,8120
81131754:	00c00804 	movi	r3,32
81131758:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
8113175c:	e03ffc15 	stw	zero,-16(fp)
81131760:	00001106 	br	811317a8 <Check_for_DOS_FAT+0x568>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
81131764:	d0a09517 	ldw	r2,-32172(gp)
81131768:	10c00a17 	ldw	r3,40(r2)
8113176c:	e0bffc17 	ldw	r2,-16(fp)
81131770:	1885883a 	add	r2,r3,r2
81131774:	108009c4 	addi	r2,r2,39
81131778:	10800023 	ldbuio	r2,0(r2)
8113177c:	10803fcc 	andi	r2,r2,255
81131780:	1009883a 	mov	r4,r2
81131784:	00a04574 	movhi	r2,33045
81131788:	1087ee04 	addi	r2,r2,8120
8113178c:	e0fffc17 	ldw	r3,-16(fp)
81131790:	10c5883a 	add	r2,r2,r3
81131794:	10800ac4 	addi	r2,r2,43
81131798:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
8113179c:	e0bffc17 	ldw	r2,-16(fp)
811317a0:	10800044 	addi	r2,r2,1
811317a4:	e0bffc15 	stw	r2,-16(fp)
811317a8:	e0bffc17 	ldw	r2,-16(fp)
811317ac:	10800110 	cmplti	r2,r2,4
811317b0:	103fec1e 	bne	r2,zero,81131764 <__reset+0xfb111764>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811317b4:	e03ffc15 	stw	zero,-16(fp)
811317b8:	00001106 	br	81131800 <Check_for_DOS_FAT+0x5c0>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
811317bc:	d0a09517 	ldw	r2,-32172(gp)
811317c0:	10c00a17 	ldw	r3,40(r2)
811317c4:	e0bffc17 	ldw	r2,-16(fp)
811317c8:	1885883a 	add	r2,r3,r2
811317cc:	10800ac4 	addi	r2,r2,43
811317d0:	10800023 	ldbuio	r2,0(r2)
811317d4:	10803fcc 	andi	r2,r2,255
811317d8:	1009883a 	mov	r4,r2
811317dc:	00a04574 	movhi	r2,33045
811317e0:	1087ee04 	addi	r2,r2,8120
811317e4:	e0fffc17 	ldw	r3,-16(fp)
811317e8:	10c5883a 	add	r2,r2,r3
811317ec:	10800bc4 	addi	r2,r2,47
811317f0:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
811317f4:	e0bffc17 	ldw	r2,-16(fp)
811317f8:	10800044 	addi	r2,r2,1
811317fc:	e0bffc15 	stw	r2,-16(fp)
81131800:	e0bffc17 	ldw	r2,-16(fp)
81131804:	108002d0 	cmplti	r2,r2,11
81131808:	103fec1e 	bne	r2,zero,811317bc <__reset+0xfb1117bc>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8113180c:	e03ffc15 	stw	zero,-16(fp)
81131810:	00001106 	br	81131858 <Check_for_DOS_FAT+0x618>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
81131814:	d0a09517 	ldw	r2,-32172(gp)
81131818:	10c00a17 	ldw	r3,40(r2)
8113181c:	e0bffc17 	ldw	r2,-16(fp)
81131820:	1885883a 	add	r2,r3,r2
81131824:	10800d84 	addi	r2,r2,54
81131828:	10800023 	ldbuio	r2,0(r2)
8113182c:	10803fcc 	andi	r2,r2,255
81131830:	1009883a 	mov	r4,r2
81131834:	00a04574 	movhi	r2,33045
81131838:	1087ee04 	addi	r2,r2,8120
8113183c:	e0fffc17 	ldw	r3,-16(fp)
81131840:	10c5883a 	add	r2,r2,r3
81131844:	10800e84 	addi	r2,r2,58
81131848:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
8113184c:	e0bffc17 	ldw	r2,-16(fp)
81131850:	10800044 	addi	r2,r2,1
81131854:	e0bffc15 	stw	r2,-16(fp)
81131858:	e0bffc17 	ldw	r2,-16(fp)
8113185c:	10800210 	cmplti	r2,r2,8
81131860:	103fec1e 	bne	r2,zero,81131814 <__reset+0xfb111814>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81131864:	e03ffc15 	stw	zero,-16(fp)
81131868:	00000a06 	br	81131894 <Check_for_DOS_FAT+0x654>
		{
			active_files[counter].in_use = false;
8113186c:	00a04574 	movhi	r2,33045
81131870:	10880304 	addi	r2,r2,8204
81131874:	e0fffc17 	ldw	r3,-16(fp)
81131878:	180691ba 	slli	r3,r3,6
8113187c:	10c5883a 	add	r2,r2,r3
81131880:	10800f04 	addi	r2,r2,60
81131884:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
81131888:	e0bffc17 	ldw	r2,-16(fp)
8113188c:	10800044 	addi	r2,r2,1
81131890:	e0bffc15 	stw	r2,-16(fp)
81131894:	e0bffc17 	ldw	r2,-16(fp)
81131898:	10800510 	cmplti	r2,r2,20
8113189c:	103ff31e 	bne	r2,zero,8113186c <__reset+0xfb11186c>
		{
			active_files[counter].in_use = false;
		}
		result = true;
811318a0:	00800044 	movi	r2,1
811318a4:	e0bffb15 	stw	r2,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
811318a8:	00000106 	br	811318b0 <Check_for_DOS_FAT+0x670>
		}
		result = true;
	}
    else
    {
        result = false;
811318ac:	e03ffb15 	stw	zero,-20(fp)
    }
	return result;
811318b0:	e0bffb17 	ldw	r2,-20(fp)
}
811318b4:	e037883a 	mov	sp,fp
811318b8:	dfc00117 	ldw	ra,4(sp)
811318bc:	df000017 	ldw	fp,0(sp)
811318c0:	dec00204 	addi	sp,sp,8
811318c4:	f800283a 	ret

811318c8 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
811318c8:	defffc04 	addi	sp,sp,-16
811318cc:	de00012e 	bgeu	sp,et,811318d4 <Look_for_FAT16+0xc>
811318d0:	003b68fa 	trap	3
811318d4:	dfc00315 	stw	ra,12(sp)
811318d8:	df000215 	stw	fp,8(sp)
811318dc:	df000204 	addi	fp,sp,8
	bool result = false;
811318e0:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
811318e4:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
811318e8:	10002e26 	beq	r2,zero,811319a4 <Look_for_FAT16+0xdc>
	{
		short int csd_file_format = *CSD_register_w0;
811318ec:	d0a08f17 	ldw	r2,-32196(gp)
811318f0:	1080000b 	ldhu	r2,0(r2)
811318f4:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
811318f8:	d0209315 	stw	zero,-32180(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
811318fc:	d0209415 	stw	zero,-32176(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
81131900:	e0bfff0f 	ldh	r2,-4(fp)
81131904:	10002716 	blt	r2,zero,811319a4 <Look_for_FAT16+0xdc>
81131908:	e0bfff0b 	ldhu	r2,-4(fp)
8113190c:	10bfffcc 	andi	r2,r2,65535
81131910:	1083000c 	andi	r2,r2,3072
81131914:	10830020 	cmpeqi	r2,r2,3072
81131918:	1000221e 	bne	r2,zero,811319a4 <Look_for_FAT16+0xdc>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
8113191c:	e0bfff0b 	ldhu	r2,-4(fp)
81131920:	10bfffcc 	andi	r2,r2,65535
81131924:	1083000c 	andi	r2,r2,3072
81131928:	10810018 	cmpnei	r2,r2,1024
8113192c:	1000031e 	bne	r2,zero,8113193c <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
81131930:	0009883a 	mov	r4,zero
81131934:	11312400 	call	81131240 <Check_for_DOS_FAT>
81131938:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
8113193c:	e0bfff0b 	ldhu	r2,-4(fp)
81131940:	10bfffcc 	andi	r2,r2,65535
81131944:	1083000c 	andi	r2,r2,3072
81131948:	1000061e 	bne	r2,zero,81131964 <Look_for_FAT16+0x9c>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
8113194c:	1130b7c0 	call	81130b7c <Check_for_Master_Boot_Record>
81131950:	10000426 	beq	r2,zero,81131964 <Look_for_FAT16+0x9c>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
81131954:	d0a09317 	ldw	r2,-32180(gp)
81131958:	1009883a 	mov	r4,r2
8113195c:	11312400 	call	81131240 <Check_for_DOS_FAT>
81131960:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
81131964:	e0bffe17 	ldw	r2,-8(fp)
81131968:	10800058 	cmpnei	r2,r2,1
8113196c:	10000d1e 	bne	r2,zero,811319a4 <Look_for_FAT16+0xdc>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
81131970:	00a04574 	movhi	r2,33045
81131974:	1087ee04 	addi	r2,r2,8120
81131978:	10801083 	ldbu	r2,66(r2)
8113197c:	10803fcc 	andi	r2,r2,255
81131980:	10800420 	cmpeqi	r2,r2,16
81131984:	1000021e 	bne	r2,zero,81131990 <Look_for_FAT16+0xc8>
				{
					result = false;
81131988:	e03ffe15 	stw	zero,-8(fp)
8113198c:	00000506 	br	811319a4 <Look_for_FAT16+0xdc>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
81131990:	00a04574 	movhi	r2,33045
81131994:	1087ee04 	addi	r2,r2,8120
81131998:	1080058b 	ldhu	r2,22(r2)
8113199c:	10bfffcc 	andi	r2,r2,65535
811319a0:	d0a09415 	stw	r2,-32176(gp)
				}
			}
		}
	}
	return result;
811319a4:	e0bffe17 	ldw	r2,-8(fp)
}
811319a8:	e037883a 	mov	sp,fp
811319ac:	dfc00117 	ldw	ra,4(sp)
811319b0:	df000017 	ldw	fp,0(sp)
811319b4:	dec00204 	addi	sp,sp,8
811319b8:	f800283a 	ret

811319bc <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
811319bc:	defffb04 	addi	sp,sp,-20
811319c0:	de00012e 	bgeu	sp,et,811319c8 <filename_to_upper_case+0xc>
811319c4:	003b68fa 	trap	3
811319c8:	dfc00415 	stw	ra,16(sp)
811319cc:	df000315 	stw	fp,12(sp)
811319d0:	df000304 	addi	fp,sp,12
811319d4:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
811319d8:	e13fff17 	ldw	r4,-4(fp)
811319dc:	11117c80 	call	811117c8 <strlen>
811319e0:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
811319e4:	e03ffd15 	stw	zero,-12(fp)
811319e8:	00001e06 	br	81131a64 <filename_to_upper_case+0xa8>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
811319ec:	e0bffd17 	ldw	r2,-12(fp)
811319f0:	e0ffff17 	ldw	r3,-4(fp)
811319f4:	1885883a 	add	r2,r3,r2
811319f8:	10800003 	ldbu	r2,0(r2)
811319fc:	10803fcc 	andi	r2,r2,255
81131a00:	1080201c 	xori	r2,r2,128
81131a04:	10bfe004 	addi	r2,r2,-128
81131a08:	10801850 	cmplti	r2,r2,97
81131a0c:	1000121e 	bne	r2,zero,81131a58 <filename_to_upper_case+0x9c>
81131a10:	e0bffd17 	ldw	r2,-12(fp)
81131a14:	e0ffff17 	ldw	r3,-4(fp)
81131a18:	1885883a 	add	r2,r3,r2
81131a1c:	10800003 	ldbu	r2,0(r2)
81131a20:	10803fcc 	andi	r2,r2,255
81131a24:	1080201c 	xori	r2,r2,128
81131a28:	10bfe004 	addi	r2,r2,-128
81131a2c:	10801ec8 	cmpgei	r2,r2,123
81131a30:	1000091e 	bne	r2,zero,81131a58 <filename_to_upper_case+0x9c>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
81131a34:	e0bffd17 	ldw	r2,-12(fp)
81131a38:	e0ffff17 	ldw	r3,-4(fp)
81131a3c:	1885883a 	add	r2,r3,r2
81131a40:	e0fffd17 	ldw	r3,-12(fp)
81131a44:	e13fff17 	ldw	r4,-4(fp)
81131a48:	20c7883a 	add	r3,r4,r3
81131a4c:	18c00003 	ldbu	r3,0(r3)
81131a50:	18fff804 	addi	r3,r3,-32
81131a54:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
81131a58:	e0bffd17 	ldw	r2,-12(fp)
81131a5c:	10800044 	addi	r2,r2,1
81131a60:	e0bffd15 	stw	r2,-12(fp)
81131a64:	e0fffd17 	ldw	r3,-12(fp)
81131a68:	e0bffe17 	ldw	r2,-8(fp)
81131a6c:	18bfdf16 	blt	r3,r2,811319ec <__reset+0xfb1119ec>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
81131a70:	0001883a 	nop
81131a74:	e037883a 	mov	sp,fp
81131a78:	dfc00117 	ldw	ra,4(sp)
81131a7c:	df000017 	ldw	fp,0(sp)
81131a80:	dec00204 	addi	sp,sp,8
81131a84:	f800283a 	ret

81131a88 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
81131a88:	defff804 	addi	sp,sp,-32
81131a8c:	de00012e 	bgeu	sp,et,81131a94 <check_file_name_for_FAT16_compliance+0xc>
81131a90:	003b68fa 	trap	3
81131a94:	dfc00715 	stw	ra,28(sp)
81131a98:	df000615 	stw	fp,24(sp)
81131a9c:	df000604 	addi	fp,sp,24
81131aa0:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
81131aa4:	e13fff17 	ldw	r4,-4(fp)
81131aa8:	11117c80 	call	811117c8 <strlen>
81131aac:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
81131ab0:	00bfffc4 	movi	r2,-1
81131ab4:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
81131ab8:	00bfffc4 	movi	r2,-1
81131abc:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
81131ac0:	00800044 	movi	r2,1
81131ac4:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
81131ac8:	e03ffa15 	stw	zero,-24(fp)
81131acc:	00006d06 	br	81131c84 <check_file_name_for_FAT16_compliance+0x1fc>
    {
        if ((file_name[index] == ' ') ||
81131ad0:	e0bffa17 	ldw	r2,-24(fp)
81131ad4:	e0ffff17 	ldw	r3,-4(fp)
81131ad8:	1885883a 	add	r2,r3,r2
81131adc:	10800003 	ldbu	r2,0(r2)
81131ae0:	10803fcc 	andi	r2,r2,255
81131ae4:	1080201c 	xori	r2,r2,128
81131ae8:	10bfe004 	addi	r2,r2,-128
81131aec:	10800820 	cmpeqi	r2,r2,32
81131af0:	10003e1e 	bne	r2,zero,81131bec <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81131af4:	e0bffa17 	ldw	r2,-24(fp)
81131af8:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
81131afc:	e0bffb17 	ldw	r2,-20(fp)
81131b00:	1880121e 	bne	r3,r2,81131b4c <check_file_name_for_FAT16_compliance+0xc4>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81131b04:	e0bffa17 	ldw	r2,-24(fp)
81131b08:	e0ffff17 	ldw	r3,-4(fp)
81131b0c:	1885883a 	add	r2,r3,r2
81131b10:	10800003 	ldbu	r2,0(r2)
81131b14:	10803fcc 	andi	r2,r2,255
81131b18:	1080201c 	xori	r2,r2,128
81131b1c:	10bfe004 	addi	r2,r2,-128
81131b20:	10801720 	cmpeqi	r2,r2,92
81131b24:	1000311e 	bne	r2,zero,81131bec <check_file_name_for_FAT16_compliance+0x164>
81131b28:	e0bffa17 	ldw	r2,-24(fp)
81131b2c:	e0ffff17 	ldw	r3,-4(fp)
81131b30:	1885883a 	add	r2,r3,r2
81131b34:	10800003 	ldbu	r2,0(r2)
81131b38:	10803fcc 	andi	r2,r2,255
81131b3c:	1080201c 	xori	r2,r2,128
81131b40:	10bfe004 	addi	r2,r2,-128
81131b44:	10800be0 	cmpeqi	r2,r2,47
81131b48:	1000281e 	bne	r2,zero,81131bec <check_file_name_for_FAT16_compliance+0x164>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81131b4c:	e0fffa17 	ldw	r3,-24(fp)
81131b50:	e0bffc17 	ldw	r2,-16(fp)
81131b54:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
81131b58:	10800258 	cmpnei	r2,r2,9
81131b5c:	1000091e 	bne	r2,zero,81131b84 <check_file_name_for_FAT16_compliance+0xfc>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
81131b60:	e0bffa17 	ldw	r2,-24(fp)
81131b64:	e0ffff17 	ldw	r3,-4(fp)
81131b68:	1885883a 	add	r2,r3,r2
81131b6c:	10800003 	ldbu	r2,0(r2)
81131b70:	10803fcc 	andi	r2,r2,255
81131b74:	1080201c 	xori	r2,r2,128
81131b78:	10bfe004 	addi	r2,r2,-128
81131b7c:	10800b98 	cmpnei	r2,r2,46
81131b80:	10001a1e 	bne	r2,zero,81131bec <check_file_name_for_FAT16_compliance+0x164>
81131b84:	e0fffb17 	ldw	r3,-20(fp)
81131b88:	e0bffc17 	ldw	r2,-16(fp)
81131b8c:	18801926 	beq	r3,r2,81131bf4 <check_file_name_for_FAT16_compliance+0x16c>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81131b90:	e0fffa17 	ldw	r3,-24(fp)
81131b94:	e0bffc17 	ldw	r2,-16(fp)
81131b98:	1885c83a 	sub	r2,r3,r2
81131b9c:	10800110 	cmplti	r2,r2,4
81131ba0:	1000141e 	bne	r2,zero,81131bf4 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81131ba4:	e0bffa17 	ldw	r2,-24(fp)
81131ba8:	e0ffff17 	ldw	r3,-4(fp)
81131bac:	1885883a 	add	r2,r3,r2
81131bb0:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
81131bb4:	10803fcc 	andi	r2,r2,255
81131bb8:	1080201c 	xori	r2,r2,128
81131bbc:	10bfe004 	addi	r2,r2,-128
81131bc0:	10801720 	cmpeqi	r2,r2,92
81131bc4:	10000b1e 	bne	r2,zero,81131bf4 <check_file_name_for_FAT16_compliance+0x16c>
             (file_name[index] != '\\') && (file_name[index] != '/'))
81131bc8:	e0bffa17 	ldw	r2,-24(fp)
81131bcc:	e0ffff17 	ldw	r3,-4(fp)
81131bd0:	1885883a 	add	r2,r3,r2
81131bd4:	10800003 	ldbu	r2,0(r2)
81131bd8:	10803fcc 	andi	r2,r2,255
81131bdc:	1080201c 	xori	r2,r2,128
81131be0:	10bfe004 	addi	r2,r2,-128
81131be4:	10800be0 	cmpeqi	r2,r2,47
81131be8:	1000021e 	bne	r2,zero,81131bf4 <check_file_name_for_FAT16_compliance+0x16c>
           )
        {
            result = false;
81131bec:	e03ffd15 	stw	zero,-12(fp)
            break;
81131bf0:	00002706 	br	81131c90 <check_file_name_for_FAT16_compliance+0x208>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
81131bf4:	e0bffa17 	ldw	r2,-24(fp)
81131bf8:	e0ffff17 	ldw	r3,-4(fp)
81131bfc:	1885883a 	add	r2,r3,r2
81131c00:	10800003 	ldbu	r2,0(r2)
81131c04:	10803fcc 	andi	r2,r2,255
81131c08:	1080201c 	xori	r2,r2,128
81131c0c:	10bfe004 	addi	r2,r2,-128
81131c10:	10801720 	cmpeqi	r2,r2,92
81131c14:	1000091e 	bne	r2,zero,81131c3c <check_file_name_for_FAT16_compliance+0x1b4>
81131c18:	e0bffa17 	ldw	r2,-24(fp)
81131c1c:	e0ffff17 	ldw	r3,-4(fp)
81131c20:	1885883a 	add	r2,r3,r2
81131c24:	10800003 	ldbu	r2,0(r2)
81131c28:	10803fcc 	andi	r2,r2,255
81131c2c:	1080201c 	xori	r2,r2,128
81131c30:	10bfe004 	addi	r2,r2,-128
81131c34:	10800bd8 	cmpnei	r2,r2,47
81131c38:	1000041e 	bne	r2,zero,81131c4c <check_file_name_for_FAT16_compliance+0x1c4>
        {
            last_period = index;
81131c3c:	e0bffa17 	ldw	r2,-24(fp)
81131c40:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
81131c44:	e0bffa17 	ldw	r2,-24(fp)
81131c48:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
81131c4c:	e0bffa17 	ldw	r2,-24(fp)
81131c50:	e0ffff17 	ldw	r3,-4(fp)
81131c54:	1885883a 	add	r2,r3,r2
81131c58:	10800003 	ldbu	r2,0(r2)
81131c5c:	10803fcc 	andi	r2,r2,255
81131c60:	1080201c 	xori	r2,r2,128
81131c64:	10bfe004 	addi	r2,r2,-128
81131c68:	10800b98 	cmpnei	r2,r2,46
81131c6c:	1000021e 	bne	r2,zero,81131c78 <check_file_name_for_FAT16_compliance+0x1f0>
        {
            last_period = index;
81131c70:	e0bffa17 	ldw	r2,-24(fp)
81131c74:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
81131c78:	e0bffa17 	ldw	r2,-24(fp)
81131c7c:	10800044 	addi	r2,r2,1
81131c80:	e0bffa15 	stw	r2,-24(fp)
81131c84:	e0fffa17 	ldw	r3,-24(fp)
81131c88:	e0bffe17 	ldw	r2,-8(fp)
81131c8c:	18bf9016 	blt	r3,r2,81131ad0 <__reset+0xfb111ad0>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
81131c90:	e0bffe17 	ldw	r2,-8(fp)
81131c94:	10bfffc4 	addi	r2,r2,-1
81131c98:	e0ffff17 	ldw	r3,-4(fp)
81131c9c:	1885883a 	add	r2,r3,r2
81131ca0:	10800003 	ldbu	r2,0(r2)
81131ca4:	10803fcc 	andi	r2,r2,255
81131ca8:	1080201c 	xori	r2,r2,128
81131cac:	10bfe004 	addi	r2,r2,-128
81131cb0:	10801720 	cmpeqi	r2,r2,92
81131cb4:	10000a1e 	bne	r2,zero,81131ce0 <check_file_name_for_FAT16_compliance+0x258>
81131cb8:	e0bffe17 	ldw	r2,-8(fp)
81131cbc:	10bfffc4 	addi	r2,r2,-1
81131cc0:	e0ffff17 	ldw	r3,-4(fp)
81131cc4:	1885883a 	add	r2,r3,r2
81131cc8:	10800003 	ldbu	r2,0(r2)
81131ccc:	10803fcc 	andi	r2,r2,255
81131cd0:	1080201c 	xori	r2,r2,128
81131cd4:	10bfe004 	addi	r2,r2,-128
81131cd8:	10800bd8 	cmpnei	r2,r2,47
81131cdc:	1000011e 	bne	r2,zero,81131ce4 <check_file_name_for_FAT16_compliance+0x25c>
    {
        result = false;
81131ce0:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
81131ce4:	e0bffd17 	ldw	r2,-12(fp)
}
81131ce8:	e037883a 	mov	sp,fp
81131cec:	dfc00117 	ldw	ra,4(sp)
81131cf0:	df000017 	ldw	fp,0(sp)
81131cf4:	dec00204 	addi	sp,sp,8
81131cf8:	f800283a 	ret

81131cfc <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
81131cfc:	defffb04 	addi	sp,sp,-20
81131d00:	de00012e 	bgeu	sp,et,81131d08 <get_dir_divider_location+0xc>
81131d04:	003b68fa 	trap	3
81131d08:	dfc00415 	stw	ra,16(sp)
81131d0c:	df000315 	stw	fp,12(sp)
81131d10:	df000304 	addi	fp,sp,12
81131d14:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
81131d18:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
81131d1c:	e13fff17 	ldw	r4,-4(fp)
81131d20:	11117c80 	call	811117c8 <strlen>
81131d24:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
81131d28:	e03ffd15 	stw	zero,-12(fp)
81131d2c:	00001506 	br	81131d84 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
81131d30:	e0bffd17 	ldw	r2,-12(fp)
81131d34:	e0ffff17 	ldw	r3,-4(fp)
81131d38:	1885883a 	add	r2,r3,r2
81131d3c:	10800003 	ldbu	r2,0(r2)
81131d40:	10803fcc 	andi	r2,r2,255
81131d44:	1080201c 	xori	r2,r2,128
81131d48:	10bfe004 	addi	r2,r2,-128
81131d4c:	10801720 	cmpeqi	r2,r2,92
81131d50:	10000f1e 	bne	r2,zero,81131d90 <get_dir_divider_location+0x94>
81131d54:	e0bffd17 	ldw	r2,-12(fp)
81131d58:	e0ffff17 	ldw	r3,-4(fp)
81131d5c:	1885883a 	add	r2,r3,r2
81131d60:	10800003 	ldbu	r2,0(r2)
81131d64:	10803fcc 	andi	r2,r2,255
81131d68:	1080201c 	xori	r2,r2,128
81131d6c:	10bfe004 	addi	r2,r2,-128
81131d70:	10800be0 	cmpeqi	r2,r2,47
81131d74:	1000061e 	bne	r2,zero,81131d90 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
81131d78:	e0bffd17 	ldw	r2,-12(fp)
81131d7c:	10800044 	addi	r2,r2,1
81131d80:	e0bffd15 	stw	r2,-12(fp)
81131d84:	e0fffd17 	ldw	r3,-12(fp)
81131d88:	e0bffe17 	ldw	r2,-8(fp)
81131d8c:	18bfe816 	blt	r3,r2,81131d30 <__reset+0xfb111d30>
        {
            break;
        }
    }
    
    if (index == length)
81131d90:	e0fffd17 	ldw	r3,-12(fp)
81131d94:	e0bffe17 	ldw	r2,-8(fp)
81131d98:	1880021e 	bne	r3,r2,81131da4 <get_dir_divider_location+0xa8>
    {
        index = -1;
81131d9c:	00bfffc4 	movi	r2,-1
81131da0:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
81131da4:	e0bffd17 	ldw	r2,-12(fp)
}
81131da8:	e037883a 	mov	sp,fp
81131dac:	dfc00117 	ldw	ra,4(sp)
81131db0:	df000017 	ldw	fp,0(sp)
81131db4:	dec00204 	addi	sp,sp,8
81131db8:	f800283a 	ret

81131dbc <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
81131dbc:	defffa04 	addi	sp,sp,-24
81131dc0:	de00012e 	bgeu	sp,et,81131dc8 <match_file_record_to_name_ext+0xc>
81131dc4:	003b68fa 	trap	3
81131dc8:	df000515 	stw	fp,20(sp)
81131dcc:	df000504 	addi	fp,sp,20
81131dd0:	e13ffd15 	stw	r4,-12(fp)
81131dd4:	e17ffe15 	stw	r5,-8(fp)
81131dd8:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
81131ddc:	00800044 	movi	r2,1
81131de0:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
81131de4:	e03ffc15 	stw	zero,-16(fp)
81131de8:	00004606 	br	81131f04 <match_file_record_to_name_ext+0x148>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
81131dec:	e0fffd17 	ldw	r3,-12(fp)
81131df0:	e0bffc17 	ldw	r2,-16(fp)
81131df4:	1885883a 	add	r2,r3,r2
81131df8:	10800003 	ldbu	r2,0(r2)
81131dfc:	10803fcc 	andi	r2,r2,255
81131e00:	10801870 	cmpltui	r2,r2,97
81131e04:	1000101e 	bne	r2,zero,81131e48 <match_file_record_to_name_ext+0x8c>
81131e08:	e0fffd17 	ldw	r3,-12(fp)
81131e0c:	e0bffc17 	ldw	r2,-16(fp)
81131e10:	1885883a 	add	r2,r3,r2
81131e14:	10800003 	ldbu	r2,0(r2)
81131e18:	10803fcc 	andi	r2,r2,255
81131e1c:	10801ee8 	cmpgeui	r2,r2,123
81131e20:	1000091e 	bne	r2,zero,81131e48 <match_file_record_to_name_ext+0x8c>
81131e24:	e0fffd17 	ldw	r3,-12(fp)
81131e28:	e0bffc17 	ldw	r2,-16(fp)
81131e2c:	1885883a 	add	r2,r3,r2
81131e30:	10800003 	ldbu	r2,0(r2)
81131e34:	10bff804 	addi	r2,r2,-32
81131e38:	10c03fcc 	andi	r3,r2,255
81131e3c:	18c0201c 	xori	r3,r3,128
81131e40:	18ffe004 	addi	r3,r3,-128
81131e44:	00000706 	br	81131e64 <match_file_record_to_name_ext+0xa8>
81131e48:	e0fffd17 	ldw	r3,-12(fp)
81131e4c:	e0bffc17 	ldw	r2,-16(fp)
81131e50:	1885883a 	add	r2,r3,r2
81131e54:	10800003 	ldbu	r2,0(r2)
81131e58:	10c03fcc 	andi	r3,r2,255
81131e5c:	18c0201c 	xori	r3,r3,128
81131e60:	18ffe004 	addi	r3,r3,-128
81131e64:	e0bffc17 	ldw	r2,-16(fp)
81131e68:	e13ffe17 	ldw	r4,-8(fp)
81131e6c:	2085883a 	add	r2,r4,r2
81131e70:	10800003 	ldbu	r2,0(r2)
81131e74:	10803fcc 	andi	r2,r2,255
81131e78:	1080201c 	xori	r2,r2,128
81131e7c:	10bfe004 	addi	r2,r2,-128
81131e80:	10801850 	cmplti	r2,r2,97
81131e84:	1000121e 	bne	r2,zero,81131ed0 <match_file_record_to_name_ext+0x114>
81131e88:	e0bffc17 	ldw	r2,-16(fp)
81131e8c:	e13ffe17 	ldw	r4,-8(fp)
81131e90:	2085883a 	add	r2,r4,r2
81131e94:	10800003 	ldbu	r2,0(r2)
81131e98:	10803fcc 	andi	r2,r2,255
81131e9c:	1080201c 	xori	r2,r2,128
81131ea0:	10bfe004 	addi	r2,r2,-128
81131ea4:	10801ec8 	cmpgei	r2,r2,123
81131ea8:	1000091e 	bne	r2,zero,81131ed0 <match_file_record_to_name_ext+0x114>
81131eac:	e0bffc17 	ldw	r2,-16(fp)
81131eb0:	e13ffe17 	ldw	r4,-8(fp)
81131eb4:	2085883a 	add	r2,r4,r2
81131eb8:	10800003 	ldbu	r2,0(r2)
81131ebc:	10bff804 	addi	r2,r2,-32
81131ec0:	10803fcc 	andi	r2,r2,255
81131ec4:	1080201c 	xori	r2,r2,128
81131ec8:	10bfe004 	addi	r2,r2,-128
81131ecc:	00000706 	br	81131eec <match_file_record_to_name_ext+0x130>
81131ed0:	e0bffc17 	ldw	r2,-16(fp)
81131ed4:	e13ffe17 	ldw	r4,-8(fp)
81131ed8:	2085883a 	add	r2,r4,r2
81131edc:	10800003 	ldbu	r2,0(r2)
81131ee0:	10803fcc 	andi	r2,r2,255
81131ee4:	1080201c 	xori	r2,r2,128
81131ee8:	10bfe004 	addi	r2,r2,-128
81131eec:	18800226 	beq	r3,r2,81131ef8 <match_file_record_to_name_ext+0x13c>
        {
            match = false;
81131ef0:	e03ffb15 	stw	zero,-20(fp)
			break;
81131ef4:	00000606 	br	81131f10 <match_file_record_to_name_ext+0x154>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
81131ef8:	e0bffc17 	ldw	r2,-16(fp)
81131efc:	10800044 	addi	r2,r2,1
81131f00:	e0bffc15 	stw	r2,-16(fp)
81131f04:	e0bffc17 	ldw	r2,-16(fp)
81131f08:	10800210 	cmplti	r2,r2,8
81131f0c:	103fb71e 	bne	r2,zero,81131dec <__reset+0xfb111dec>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81131f10:	e03ffc15 	stw	zero,-16(fp)
81131f14:	00004a06 	br	81132040 <match_file_record_to_name_ext+0x284>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
81131f18:	e0fffd17 	ldw	r3,-12(fp)
81131f1c:	e0bffc17 	ldw	r2,-16(fp)
81131f20:	1885883a 	add	r2,r3,r2
81131f24:	10800204 	addi	r2,r2,8
81131f28:	10800003 	ldbu	r2,0(r2)
81131f2c:	10803fcc 	andi	r2,r2,255
81131f30:	10801870 	cmpltui	r2,r2,97
81131f34:	1000121e 	bne	r2,zero,81131f80 <match_file_record_to_name_ext+0x1c4>
81131f38:	e0fffd17 	ldw	r3,-12(fp)
81131f3c:	e0bffc17 	ldw	r2,-16(fp)
81131f40:	1885883a 	add	r2,r3,r2
81131f44:	10800204 	addi	r2,r2,8
81131f48:	10800003 	ldbu	r2,0(r2)
81131f4c:	10803fcc 	andi	r2,r2,255
81131f50:	10801ee8 	cmpgeui	r2,r2,123
81131f54:	10000a1e 	bne	r2,zero,81131f80 <match_file_record_to_name_ext+0x1c4>
81131f58:	e0fffd17 	ldw	r3,-12(fp)
81131f5c:	e0bffc17 	ldw	r2,-16(fp)
81131f60:	1885883a 	add	r2,r3,r2
81131f64:	10800204 	addi	r2,r2,8
81131f68:	10800003 	ldbu	r2,0(r2)
81131f6c:	10bff804 	addi	r2,r2,-32
81131f70:	10c03fcc 	andi	r3,r2,255
81131f74:	18c0201c 	xori	r3,r3,128
81131f78:	18ffe004 	addi	r3,r3,-128
81131f7c:	00000806 	br	81131fa0 <match_file_record_to_name_ext+0x1e4>
81131f80:	e0fffd17 	ldw	r3,-12(fp)
81131f84:	e0bffc17 	ldw	r2,-16(fp)
81131f88:	1885883a 	add	r2,r3,r2
81131f8c:	10800204 	addi	r2,r2,8
81131f90:	10800003 	ldbu	r2,0(r2)
81131f94:	10c03fcc 	andi	r3,r2,255
81131f98:	18c0201c 	xori	r3,r3,128
81131f9c:	18ffe004 	addi	r3,r3,-128
81131fa0:	e0bffc17 	ldw	r2,-16(fp)
81131fa4:	e13fff17 	ldw	r4,-4(fp)
81131fa8:	2085883a 	add	r2,r4,r2
81131fac:	10800003 	ldbu	r2,0(r2)
81131fb0:	10803fcc 	andi	r2,r2,255
81131fb4:	1080201c 	xori	r2,r2,128
81131fb8:	10bfe004 	addi	r2,r2,-128
81131fbc:	10801850 	cmplti	r2,r2,97
81131fc0:	1000121e 	bne	r2,zero,8113200c <match_file_record_to_name_ext+0x250>
81131fc4:	e0bffc17 	ldw	r2,-16(fp)
81131fc8:	e13fff17 	ldw	r4,-4(fp)
81131fcc:	2085883a 	add	r2,r4,r2
81131fd0:	10800003 	ldbu	r2,0(r2)
81131fd4:	10803fcc 	andi	r2,r2,255
81131fd8:	1080201c 	xori	r2,r2,128
81131fdc:	10bfe004 	addi	r2,r2,-128
81131fe0:	10801ec8 	cmpgei	r2,r2,123
81131fe4:	1000091e 	bne	r2,zero,8113200c <match_file_record_to_name_ext+0x250>
81131fe8:	e0bffc17 	ldw	r2,-16(fp)
81131fec:	e13fff17 	ldw	r4,-4(fp)
81131ff0:	2085883a 	add	r2,r4,r2
81131ff4:	10800003 	ldbu	r2,0(r2)
81131ff8:	10bff804 	addi	r2,r2,-32
81131ffc:	10803fcc 	andi	r2,r2,255
81132000:	1080201c 	xori	r2,r2,128
81132004:	10bfe004 	addi	r2,r2,-128
81132008:	00000706 	br	81132028 <match_file_record_to_name_ext+0x26c>
8113200c:	e0bffc17 	ldw	r2,-16(fp)
81132010:	e13fff17 	ldw	r4,-4(fp)
81132014:	2085883a 	add	r2,r4,r2
81132018:	10800003 	ldbu	r2,0(r2)
8113201c:	10803fcc 	andi	r2,r2,255
81132020:	1080201c 	xori	r2,r2,128
81132024:	10bfe004 	addi	r2,r2,-128
81132028:	18800226 	beq	r3,r2,81132034 <match_file_record_to_name_ext+0x278>
        {
            match = false;
8113202c:	e03ffb15 	stw	zero,-20(fp)
			break;
81132030:	00000606 	br	8113204c <match_file_record_to_name_ext+0x290>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
81132034:	e0bffc17 	ldw	r2,-16(fp)
81132038:	10800044 	addi	r2,r2,1
8113203c:	e0bffc15 	stw	r2,-16(fp)
81132040:	e0bffc17 	ldw	r2,-16(fp)
81132044:	108000d0 	cmplti	r2,r2,3
81132048:	103fb31e 	bne	r2,zero,81131f18 <__reset+0xfb111f18>
        {
            match = false;
			break;
        }
    }
	return match;
8113204c:	e0bffb17 	ldw	r2,-20(fp)
}
81132050:	e037883a 	mov	sp,fp
81132054:	df000017 	ldw	fp,0(sp)
81132058:	dec00104 	addi	sp,sp,4
8113205c:	f800283a 	ret

81132060 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
81132060:	deffe704 	addi	sp,sp,-100
81132064:	de00012e 	bgeu	sp,et,8113206c <get_home_directory_cluster_for_file+0xc>
81132068:	003b68fa 	trap	3
8113206c:	dfc01815 	stw	ra,96(sp)
81132070:	df001715 	stw	fp,92(sp)
81132074:	df001704 	addi	fp,sp,92
81132078:	e13ffd15 	stw	r4,-12(fp)
8113207c:	e17ffe15 	stw	r5,-8(fp)
81132080:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
81132084:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
81132088:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
8113208c:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
81132090:	e13ffd17 	ldw	r4,-12(fp)
81132094:	1131cfc0 	call	81131cfc <get_dir_divider_location>
81132098:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
8113209c:	00012f06 	br	8113255c <get_home_directory_cluster_for_file+0x4fc>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
811320a0:	00800804 	movi	r2,32
811320a4:	e0bff905 	stb	r2,-28(fp)
811320a8:	00800804 	movi	r2,32
811320ac:	e0bff945 	stb	r2,-27(fp)
811320b0:	00800804 	movi	r2,32
811320b4:	e0bff985 	stb	r2,-26(fp)
811320b8:	00800804 	movi	r2,32
811320bc:	e0bff9c5 	stb	r2,-25(fp)
811320c0:	00800804 	movi	r2,32
811320c4:	e0bffa05 	stb	r2,-24(fp)
811320c8:	00800804 	movi	r2,32
811320cc:	e0bffa45 	stb	r2,-23(fp)
811320d0:	00800804 	movi	r2,32
811320d4:	e0bffa85 	stb	r2,-22(fp)
811320d8:	00800804 	movi	r2,32
811320dc:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
811320e0:	00800804 	movi	r2,32
811320e4:	e0bffb05 	stb	r2,-20(fp)
811320e8:	00800804 	movi	r2,32
811320ec:	e0bffb45 	stb	r2,-19(fp)
811320f0:	00800804 	movi	r2,32
811320f4:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
811320f8:	00bfffc4 	movi	r2,-1
811320fc:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
81132100:	e0bfea17 	ldw	r2,-88(fp)
81132104:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
81132108:	e03fec15 	stw	zero,-80(fp)
8113210c:	00002d06 	br	811321c4 <get_home_directory_cluster_for_file+0x164>
        {
            if (file_name[index+start_location] == '.')
81132110:	e0ffec17 	ldw	r3,-80(fp)
81132114:	e0bfed17 	ldw	r2,-76(fp)
81132118:	1885883a 	add	r2,r3,r2
8113211c:	1007883a 	mov	r3,r2
81132120:	e0bffd17 	ldw	r2,-12(fp)
81132124:	10c5883a 	add	r2,r2,r3
81132128:	10800003 	ldbu	r2,0(r2)
8113212c:	10803fcc 	andi	r2,r2,255
81132130:	1080201c 	xori	r2,r2,128
81132134:	10bfe004 	addi	r2,r2,-128
81132138:	10800b98 	cmpnei	r2,r2,46
8113213c:	1000031e 	bne	r2,zero,8113214c <get_home_directory_cluster_for_file+0xec>
            {
                ext_index = index;
81132140:	e0bfec17 	ldw	r2,-80(fp)
81132144:	e0bfee15 	stw	r2,-72(fp)
81132148:	00001b06 	br	811321b8 <get_home_directory_cluster_for_file+0x158>
            }
            else if (ext_index < 0)
8113214c:	e0bfee17 	ldw	r2,-72(fp)
81132150:	10000c0e 	bge	r2,zero,81132184 <get_home_directory_cluster_for_file+0x124>
            {
                name[index] = file_name[index+start_location];
81132154:	e0ffec17 	ldw	r3,-80(fp)
81132158:	e0bfed17 	ldw	r2,-76(fp)
8113215c:	1885883a 	add	r2,r3,r2
81132160:	1007883a 	mov	r3,r2
81132164:	e0bffd17 	ldw	r2,-12(fp)
81132168:	10c5883a 	add	r2,r2,r3
8113216c:	10c00003 	ldbu	r3,0(r2)
81132170:	e13ff904 	addi	r4,fp,-28
81132174:	e0bfec17 	ldw	r2,-80(fp)
81132178:	2085883a 	add	r2,r4,r2
8113217c:	10c00005 	stb	r3,0(r2)
81132180:	00000d06 	br	811321b8 <get_home_directory_cluster_for_file+0x158>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
81132184:	e0ffec17 	ldw	r3,-80(fp)
81132188:	e0bfee17 	ldw	r2,-72(fp)
8113218c:	1885c83a 	sub	r2,r3,r2
81132190:	e13fec17 	ldw	r4,-80(fp)
81132194:	e0ffed17 	ldw	r3,-76(fp)
81132198:	20c7883a 	add	r3,r4,r3
8113219c:	1809883a 	mov	r4,r3
811321a0:	e0fffd17 	ldw	r3,-12(fp)
811321a4:	1907883a 	add	r3,r3,r4
811321a8:	18c00003 	ldbu	r3,0(r3)
811321ac:	e13ffb04 	addi	r4,fp,-20
811321b0:	2085883a 	add	r2,r4,r2
811321b4:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
811321b8:	e0bfec17 	ldw	r2,-80(fp)
811321bc:	10800044 	addi	r2,r2,1
811321c0:	e0bfec15 	stw	r2,-80(fp)
811321c4:	e0ffec17 	ldw	r3,-80(fp)
811321c8:	e0bfeb17 	ldw	r2,-84(fp)
811321cc:	18bfd016 	blt	r3,r2,81132110 <__reset+0xfb112110>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
811321d0:	e0bfea17 	ldw	r2,-88(fp)
811321d4:	10005c1e 	bne	r2,zero,81132348 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
811321d8:	00a04574 	movhi	r2,33045
811321dc:	1087ee04 	addi	r2,r2,8120
811321e0:	1080050b 	ldhu	r2,20(r2)
811321e4:	10bfffcc 	andi	r2,r2,65535
811321e8:	1006917a 	slli	r3,r2,5
811321ec:	00a04574 	movhi	r2,33045
811321f0:	1087ee04 	addi	r2,r2,8120
811321f4:	1080030b 	ldhu	r2,12(r2)
811321f8:	10bfffcc 	andi	r2,r2,65535
811321fc:	1885283a 	div	r2,r3,r2
81132200:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81132204:	e03ff015 	stw	zero,-64(fp)
81132208:	00003b06 	br	811322f8 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
8113220c:	00a04574 	movhi	r2,33045
81132210:	1087ee04 	addi	r2,r2,8120
81132214:	10c01317 	ldw	r3,76(r2)
81132218:	e0bff017 	ldw	r2,-64(fp)
8113221c:	1885883a 	add	r2,r3,r2
81132220:	1007883a 	mov	r3,r2
81132224:	d0a09317 	ldw	r2,-32180(gp)
81132228:	100b883a 	mov	r5,r2
8113222c:	1809883a 	mov	r4,r3
81132230:	11308f80 	call	811308f8 <Read_Sector_Data>
81132234:	10003426 	beq	r2,zero,81132308 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81132238:	e03ff115 	stw	zero,-60(fp)
8113223c:	00002506 	br	811322d4 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
81132240:	e0bff117 	ldw	r2,-60(fp)
81132244:	1004917a 	slli	r2,r2,5
81132248:	e0fff017 	ldw	r3,-64(fp)
8113224c:	180f883a 	mov	r7,r3
81132250:	000d883a 	mov	r6,zero
81132254:	e17fff17 	ldw	r5,-4(fp)
81132258:	1009883a 	mov	r4,r2
8113225c:	1130d280 	call	81130d28 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
81132260:	e0bfff17 	ldw	r2,-4(fp)
81132264:	10800003 	ldbu	r2,0(r2)
81132268:	10803fcc 	andi	r2,r2,255
8113226c:	10803960 	cmpeqi	r2,r2,229
81132270:	1000151e 	bne	r2,zero,811322c8 <get_home_directory_cluster_for_file+0x268>
81132274:	e0bfff17 	ldw	r2,-4(fp)
81132278:	10800003 	ldbu	r2,0(r2)
8113227c:	10803fcc 	andi	r2,r2,255
81132280:	10001126 	beq	r2,zero,811322c8 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81132284:	e0fffb04 	addi	r3,fp,-20
81132288:	e0bff904 	addi	r2,fp,-28
8113228c:	180d883a 	mov	r6,r3
81132290:	100b883a 	mov	r5,r2
81132294:	e13fff17 	ldw	r4,-4(fp)
81132298:	1131dbc0 	call	81131dbc <match_file_record_to_name_ext>
8113229c:	e0bff815 	stw	r2,-32(fp)
                            if (match)
811322a0:	e0bff817 	ldw	r2,-32(fp)
811322a4:	10000826 	beq	r2,zero,811322c8 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
811322a8:	e0bfff17 	ldw	r2,-4(fp)
811322ac:	1080058b 	ldhu	r2,22(r2)
811322b0:	10bfffcc 	andi	r2,r2,65535
811322b4:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
811322b8:	e0bfff17 	ldw	r2,-4(fp)
811322bc:	00c00044 	movi	r3,1
811322c0:	10c00a15 	stw	r3,40(r2)
                                break;
811322c4:	00000606 	br	811322e0 <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811322c8:	e0bff117 	ldw	r2,-60(fp)
811322cc:	10800044 	addi	r2,r2,1
811322d0:	e0bff115 	stw	r2,-60(fp)
811322d4:	e0bff117 	ldw	r2,-60(fp)
811322d8:	10800410 	cmplti	r2,r2,16
811322dc:	103fd81e 	bne	r2,zero,81132240 <__reset+0xfb112240>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
811322e0:	e0ffef17 	ldw	r3,-68(fp)
811322e4:	e0bfea17 	ldw	r2,-88(fp)
811322e8:	1880091e 	bne	r3,r2,81132310 <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
811322ec:	e0bff017 	ldw	r2,-64(fp)
811322f0:	10800044 	addi	r2,r2,1
811322f4:	e0bff015 	stw	r2,-64(fp)
811322f8:	e0fff017 	ldw	r3,-64(fp)
811322fc:	e0bff717 	ldw	r2,-36(fp)
81132300:	18bfc216 	blt	r3,r2,8113220c <__reset+0xfb11220c>
81132304:	00000306 	br	81132314 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
81132308:	0001883a 	nop
8113230c:	00000106 	br	81132314 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
81132310:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
81132314:	e0ffef17 	ldw	r3,-68(fp)
81132318:	e0bfea17 	ldw	r2,-88(fp)
8113231c:	18800826 	beq	r3,r2,81132340 <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
81132320:	e0bfef17 	ldw	r2,-68(fp)
81132324:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81132328:	e0ffed17 	ldw	r3,-76(fp)
8113232c:	e0bfeb17 	ldw	r2,-84(fp)
81132330:	1885883a 	add	r2,r3,r2
81132334:	10800044 	addi	r2,r2,1
81132338:	e0bfed15 	stw	r2,-76(fp)
8113233c:	00007d06 	br	81132534 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
81132340:	0005883a 	mov	r2,zero
81132344:	00009106 	br	8113258c <get_home_directory_cluster_for_file+0x52c>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
81132348:	e0bfea17 	ldw	r2,-88(fp)
8113234c:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81132350:	e0bff417 	ldw	r2,-48(fp)
81132354:	10ffff84 	addi	r3,r2,-2
81132358:	00a04574 	movhi	r2,33045
8113235c:	1087ee04 	addi	r2,r2,8120
81132360:	10800383 	ldbu	r2,14(r2)
81132364:	10803fcc 	andi	r2,r2,255
81132368:	1885383a 	mul	r2,r3,r2
8113236c:	1007883a 	mov	r3,r2
81132370:	00a04574 	movhi	r2,33045
81132374:	1087ee04 	addi	r2,r2,8120
81132378:	10801417 	ldw	r2,80(r2)
8113237c:	1885883a 	add	r2,r3,r2
81132380:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81132384:	e03ff215 	stw	zero,-56(fp)
81132388:	00003606 	br	81132464 <get_home_directory_cluster_for_file+0x404>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
8113238c:	e0fff217 	ldw	r3,-56(fp)
81132390:	e0bff517 	ldw	r2,-44(fp)
81132394:	1885883a 	add	r2,r3,r2
81132398:	d0e09317 	ldw	r3,-32180(gp)
8113239c:	180b883a 	mov	r5,r3
811323a0:	1009883a 	mov	r4,r2
811323a4:	11308f80 	call	811308f8 <Read_Sector_Data>
811323a8:	10003526 	beq	r2,zero,81132480 <get_home_directory_cluster_for_file+0x420>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
811323ac:	e03ff315 	stw	zero,-52(fp)
811323b0:	00002306 	br	81132440 <get_home_directory_cluster_for_file+0x3e0>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811323b4:	e0bff317 	ldw	r2,-52(fp)
811323b8:	1004917a 	slli	r2,r2,5
811323bc:	e0fff417 	ldw	r3,-48(fp)
811323c0:	e13ff217 	ldw	r4,-56(fp)
811323c4:	200f883a 	mov	r7,r4
811323c8:	180d883a 	mov	r6,r3
811323cc:	e17fff17 	ldw	r5,-4(fp)
811323d0:	1009883a 	mov	r4,r2
811323d4:	1130d280 	call	81130d28 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811323d8:	e0bfff17 	ldw	r2,-4(fp)
811323dc:	10800003 	ldbu	r2,0(r2)
811323e0:	10803fcc 	andi	r2,r2,255
811323e4:	10803960 	cmpeqi	r2,r2,229
811323e8:	1000121e 	bne	r2,zero,81132434 <get_home_directory_cluster_for_file+0x3d4>
811323ec:	e0bfff17 	ldw	r2,-4(fp)
811323f0:	10800003 	ldbu	r2,0(r2)
811323f4:	10803fcc 	andi	r2,r2,255
811323f8:	10000e26 	beq	r2,zero,81132434 <get_home_directory_cluster_for_file+0x3d4>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
811323fc:	e0fffb04 	addi	r3,fp,-20
81132400:	e0bff904 	addi	r2,fp,-28
81132404:	180d883a 	mov	r6,r3
81132408:	100b883a 	mov	r5,r2
8113240c:	e13fff17 	ldw	r4,-4(fp)
81132410:	1131dbc0 	call	81131dbc <match_file_record_to_name_ext>
81132414:	e0bff615 	stw	r2,-40(fp)
                                if (match)
81132418:	e0bff617 	ldw	r2,-40(fp)
8113241c:	10000526 	beq	r2,zero,81132434 <get_home_directory_cluster_for_file+0x3d4>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
81132420:	e0bfff17 	ldw	r2,-4(fp)
81132424:	1080058b 	ldhu	r2,22(r2)
81132428:	10bfffcc 	andi	r2,r2,65535
8113242c:	e0bfef15 	stw	r2,-68(fp)
                                    break;
81132430:	00000606 	br	8113244c <get_home_directory_cluster_for_file+0x3ec>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
81132434:	e0bff317 	ldw	r2,-52(fp)
81132438:	10800044 	addi	r2,r2,1
8113243c:	e0bff315 	stw	r2,-52(fp)
81132440:	e0bff317 	ldw	r2,-52(fp)
81132444:	10800410 	cmplti	r2,r2,16
81132448:	103fda1e 	bne	r2,zero,811323b4 <__reset+0xfb1123b4>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
8113244c:	e0ffef17 	ldw	r3,-68(fp)
81132450:	e0bfea17 	ldw	r2,-88(fp)
81132454:	18800c1e 	bne	r3,r2,81132488 <get_home_directory_cluster_for_file+0x428>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81132458:	e0bff217 	ldw	r2,-56(fp)
8113245c:	10800044 	addi	r2,r2,1
81132460:	e0bff215 	stw	r2,-56(fp)
81132464:	00a04574 	movhi	r2,33045
81132468:	1087ee04 	addi	r2,r2,8120
8113246c:	10800383 	ldbu	r2,14(r2)
81132470:	10803fcc 	andi	r2,r2,255
81132474:	e0fff217 	ldw	r3,-56(fp)
81132478:	18bfc416 	blt	r3,r2,8113238c <__reset+0xfb11238c>
8113247c:	00000306 	br	8113248c <get_home_directory_cluster_for_file+0x42c>
                            }
                        }
                    }
                    else
                    {
                        break;
81132480:	0001883a 	nop
81132484:	00000106 	br	8113248c <get_home_directory_cluster_for_file+0x42c>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
81132488:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
8113248c:	e0ffef17 	ldw	r3,-68(fp)
81132490:	e0bfea17 	ldw	r2,-88(fp)
81132494:	1880141e 	bne	r3,r2,811324e8 <get_home_directory_cluster_for_file+0x488>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
81132498:	e0bfef17 	ldw	r2,-68(fp)
8113249c:	e0fffc04 	addi	r3,fp,-16
811324a0:	180b883a 	mov	r5,r3
811324a4:	1009883a 	mov	r4,r2
811324a8:	11309d80 	call	811309d8 <get_cluster_flag>
811324ac:	10000c26 	beq	r2,zero,811324e0 <get_home_directory_cluster_for_file+0x480>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
811324b0:	e0bffc0b 	ldhu	r2,-16(fp)
811324b4:	10bfffcc 	andi	r2,r2,65535
811324b8:	10fffe0c 	andi	r3,r2,65528
811324bc:	00bffe14 	movui	r2,65528
811324c0:	1880021e 	bne	r3,r2,811324cc <get_home_directory_cluster_for_file+0x46c>
						{
							return false;
811324c4:	0005883a 	mov	r2,zero
811324c8:	00003006 	br	8113258c <get_home_directory_cluster_for_file+0x52c>
						}
						new_cluster = (next_cluster & 0x0000fff8);
811324cc:	e0bffc0b 	ldhu	r2,-16(fp)
811324d0:	10bfffcc 	andi	r2,r2,65535
811324d4:	10bffe0c 	andi	r2,r2,65528
811324d8:	e0bfef15 	stw	r2,-68(fp)
811324dc:	00000206 	br	811324e8 <get_home_directory_cluster_for_file+0x488>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
811324e0:	0005883a 	mov	r2,zero
811324e4:	00002906 	br	8113258c <get_home_directory_cluster_for_file+0x52c>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
811324e8:	e0bff417 	ldw	r2,-48(fp)
811324ec:	00fffdd4 	movui	r3,65527
811324f0:	18800316 	blt	r3,r2,81132500 <get_home_directory_cluster_for_file+0x4a0>
811324f4:	e0ffef17 	ldw	r3,-68(fp)
811324f8:	e0bfea17 	ldw	r2,-88(fp)
811324fc:	18bf9426 	beq	r3,r2,81132350 <__reset+0xfb112350>
            if (new_cluster != home_dir_cluster)
81132500:	e0ffef17 	ldw	r3,-68(fp)
81132504:	e0bfea17 	ldw	r2,-88(fp)
81132508:	18800826 	beq	r3,r2,8113252c <get_home_directory_cluster_for_file+0x4cc>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
8113250c:	e0bfef17 	ldw	r2,-68(fp)
81132510:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
81132514:	e0ffed17 	ldw	r3,-76(fp)
81132518:	e0bfeb17 	ldw	r2,-84(fp)
8113251c:	1885883a 	add	r2,r3,r2
81132520:	10800044 	addi	r2,r2,1
81132524:	e0bfed15 	stw	r2,-76(fp)
81132528:	00000206 	br	81132534 <get_home_directory_cluster_for_file+0x4d4>
            }
            else
            {
                // Directory path is invalid. 
                return false;
8113252c:	0005883a 	mov	r2,zero
81132530:	00001606 	br	8113258c <get_home_directory_cluster_for_file+0x52c>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
81132534:	e0bfed17 	ldw	r2,-76(fp)
81132538:	e0fffd17 	ldw	r3,-12(fp)
8113253c:	1885883a 	add	r2,r3,r2
81132540:	1009883a 	mov	r4,r2
81132544:	1131cfc0 	call	81131cfc <get_dir_divider_location>
81132548:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
8113254c:	e0bfeb17 	ldw	r2,-84(fp)
81132550:	1000020e 	bge	r2,zero,8113255c <get_home_directory_cluster_for_file+0x4fc>
        {
            // Directory has been located.
            result = true;
81132554:	00800044 	movi	r2,1
81132558:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
8113255c:	e0bfeb17 	ldw	r2,-84(fp)
81132560:	00becf16 	blt	zero,r2,811320a0 <__reset+0xfb1120a0>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
81132564:	e0bffe17 	ldw	r2,-8(fp)
81132568:	e0ffea17 	ldw	r3,-88(fp)
8113256c:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
81132570:	e0bfea17 	ldw	r2,-88(fp)
81132574:	1000041e 	bne	r2,zero,81132588 <get_home_directory_cluster_for_file+0x528>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
81132578:	e0bfff17 	ldw	r2,-4(fp)
8113257c:	10000a15 	stw	zero,40(r2)
		result = true;
81132580:	00800044 	movi	r2,1
81132584:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
81132588:	e0bfe917 	ldw	r2,-92(fp)
}
8113258c:	e037883a 	mov	sp,fp
81132590:	dfc00117 	ldw	ra,4(sp)
81132594:	df000017 	ldw	fp,0(sp)
81132598:	dec00204 	addi	sp,sp,8
8113259c:	f800283a 	ret

811325a0 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
811325a0:	deffe804 	addi	sp,sp,-96
811325a4:	de00012e 	bgeu	sp,et,811325ac <find_file_in_directory+0xc>
811325a8:	003b68fa 	trap	3
811325ac:	dfc01715 	stw	ra,92(sp)
811325b0:	df001615 	stw	fp,88(sp)
811325b4:	df001604 	addi	fp,sp,88
811325b8:	e13ffd15 	stw	r4,-12(fp)
811325bc:	e17ffe15 	stw	r5,-8(fp)
811325c0:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
811325c4:	e13ffe17 	ldw	r4,-8(fp)
811325c8:	1131cfc0 	call	81131cfc <get_dir_divider_location>
811325cc:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
811325d0:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
811325d4:	00800804 	movi	r2,32
811325d8:	e0bff905 	stb	r2,-28(fp)
811325dc:	00800804 	movi	r2,32
811325e0:	e0bff945 	stb	r2,-27(fp)
811325e4:	00800804 	movi	r2,32
811325e8:	e0bff985 	stb	r2,-26(fp)
811325ec:	00800804 	movi	r2,32
811325f0:	e0bff9c5 	stb	r2,-25(fp)
811325f4:	00800804 	movi	r2,32
811325f8:	e0bffa05 	stb	r2,-24(fp)
811325fc:	00800804 	movi	r2,32
81132600:	e0bffa45 	stb	r2,-23(fp)
81132604:	00800804 	movi	r2,32
81132608:	e0bffa85 	stb	r2,-22(fp)
8113260c:	00800804 	movi	r2,32
81132610:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
81132614:	00800804 	movi	r2,32
81132618:	e0bffb05 	stb	r2,-20(fp)
8113261c:	00800804 	movi	r2,32
81132620:	e0bffb45 	stb	r2,-19(fp)
81132624:	00800804 	movi	r2,32
81132628:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
8113262c:	00bfffc4 	movi	r2,-1
81132630:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
81132634:	e0bffd17 	ldw	r2,-12(fp)
81132638:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
8113263c:	e13ffe17 	ldw	r4,-8(fp)
81132640:	11117c80 	call	811117c8 <strlen>
81132644:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
81132648:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
8113264c:	00000b06 	br	8113267c <find_file_in_directory+0xdc>
    {
        last_dir_separator = last_dir_separator+location+1;
81132650:	e0ffeb17 	ldw	r3,-84(fp)
81132654:	e0bfea17 	ldw	r2,-88(fp)
81132658:	1885883a 	add	r2,r3,r2
8113265c:	10800044 	addi	r2,r2,1
81132660:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
81132664:	e0bfeb17 	ldw	r2,-84(fp)
81132668:	e0fffe17 	ldw	r3,-8(fp)
8113266c:	1885883a 	add	r2,r3,r2
81132670:	1009883a 	mov	r4,r2
81132674:	1131cfc0 	call	81131cfc <get_dir_divider_location>
81132678:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
8113267c:	e0bfea17 	ldw	r2,-88(fp)
81132680:	00bff316 	blt	zero,r2,81132650 <__reset+0xfb112650>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81132684:	e0bfeb17 	ldw	r2,-84(fp)
81132688:	e0bfee15 	stw	r2,-72(fp)
8113268c:	00002706 	br	8113272c <find_file_in_directory+0x18c>
    {
        if (file_name[index] == '.')
81132690:	e0bfee17 	ldw	r2,-72(fp)
81132694:	e0fffe17 	ldw	r3,-8(fp)
81132698:	1885883a 	add	r2,r3,r2
8113269c:	10800003 	ldbu	r2,0(r2)
811326a0:	10803fcc 	andi	r2,r2,255
811326a4:	1080201c 	xori	r2,r2,128
811326a8:	10bfe004 	addi	r2,r2,-128
811326ac:	10800b98 	cmpnei	r2,r2,46
811326b0:	1000031e 	bne	r2,zero,811326c0 <find_file_in_directory+0x120>
        {
            ext_index = index;
811326b4:	e0bfee17 	ldw	r2,-72(fp)
811326b8:	e0bfec15 	stw	r2,-80(fp)
811326bc:	00001806 	br	81132720 <find_file_in_directory+0x180>
        }
        else if (ext_index < 0)
811326c0:	e0bfec17 	ldw	r2,-80(fp)
811326c4:	10000b0e 	bge	r2,zero,811326f4 <find_file_in_directory+0x154>
        {
            name[index-last_dir_separator] = file_name[index];
811326c8:	e0ffee17 	ldw	r3,-72(fp)
811326cc:	e0bfeb17 	ldw	r2,-84(fp)
811326d0:	1885c83a 	sub	r2,r3,r2
811326d4:	e0ffee17 	ldw	r3,-72(fp)
811326d8:	e13ffe17 	ldw	r4,-8(fp)
811326dc:	20c7883a 	add	r3,r4,r3
811326e0:	18c00003 	ldbu	r3,0(r3)
811326e4:	e13ff904 	addi	r4,fp,-28
811326e8:	2085883a 	add	r2,r4,r2
811326ec:	10c00005 	stb	r3,0(r2)
811326f0:	00000b06 	br	81132720 <find_file_in_directory+0x180>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
811326f4:	e0ffee17 	ldw	r3,-72(fp)
811326f8:	e0bfec17 	ldw	r2,-80(fp)
811326fc:	1885c83a 	sub	r2,r3,r2
81132700:	10bfffc4 	addi	r2,r2,-1
81132704:	e0ffee17 	ldw	r3,-72(fp)
81132708:	e13ffe17 	ldw	r4,-8(fp)
8113270c:	20c7883a 	add	r3,r4,r3
81132710:	18c00003 	ldbu	r3,0(r3)
81132714:	e13ffb04 	addi	r4,fp,-20
81132718:	2085883a 	add	r2,r4,r2
8113271c:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
81132720:	e0bfee17 	ldw	r2,-72(fp)
81132724:	10800044 	addi	r2,r2,1
81132728:	e0bfee15 	stw	r2,-72(fp)
8113272c:	e0ffee17 	ldw	r3,-72(fp)
81132730:	e0bff417 	ldw	r2,-48(fp)
81132734:	18bfd616 	blt	r3,r2,81132690 <__reset+0xfb112690>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
81132738:	e0bffd17 	ldw	r2,-12(fp)
8113273c:	1000461e 	bne	r2,zero,81132858 <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81132740:	00a04574 	movhi	r2,33045
81132744:	1087ee04 	addi	r2,r2,8120
81132748:	1080050b 	ldhu	r2,20(r2)
8113274c:	10bfffcc 	andi	r2,r2,65535
81132750:	1006917a 	slli	r3,r2,5
81132754:	00a04574 	movhi	r2,33045
81132758:	1087ee04 	addi	r2,r2,8120
8113275c:	1080030b 	ldhu	r2,12(r2)
81132760:	10bfffcc 	andi	r2,r2,65535
81132764:	1885283a 	div	r2,r3,r2
81132768:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113276c:	e03ff015 	stw	zero,-64(fp)
81132770:	00003506 	br	81132848 <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81132774:	00a04574 	movhi	r2,33045
81132778:	1087ee04 	addi	r2,r2,8120
8113277c:	10c01317 	ldw	r3,76(r2)
81132780:	e0bff017 	ldw	r2,-64(fp)
81132784:	1885883a 	add	r2,r3,r2
81132788:	1007883a 	mov	r3,r2
8113278c:	d0a09317 	ldw	r2,-32180(gp)
81132790:	100b883a 	mov	r5,r2
81132794:	1809883a 	mov	r4,r3
81132798:	11308f80 	call	811308f8 <Read_Sector_Data>
8113279c:	10009626 	beq	r2,zero,811329f8 <find_file_in_directory+0x458>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
811327a0:	e03ff115 	stw	zero,-60(fp)
811327a4:	00002006 	br	81132828 <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
811327a8:	e0bff117 	ldw	r2,-60(fp)
811327ac:	1004917a 	slli	r2,r2,5
811327b0:	e0fff017 	ldw	r3,-64(fp)
811327b4:	180f883a 	mov	r7,r3
811327b8:	000d883a 	mov	r6,zero
811327bc:	e17fff17 	ldw	r5,-4(fp)
811327c0:	1009883a 	mov	r4,r2
811327c4:	1130d280 	call	81130d28 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811327c8:	e0bfff17 	ldw	r2,-4(fp)
811327cc:	10800003 	ldbu	r2,0(r2)
811327d0:	10803fcc 	andi	r2,r2,255
811327d4:	10803960 	cmpeqi	r2,r2,229
811327d8:	1000101e 	bne	r2,zero,8113281c <find_file_in_directory+0x27c>
811327dc:	e0bfff17 	ldw	r2,-4(fp)
811327e0:	10800003 	ldbu	r2,0(r2)
811327e4:	10803fcc 	andi	r2,r2,255
811327e8:	10000c26 	beq	r2,zero,8113281c <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
811327ec:	e0fffb04 	addi	r3,fp,-20
811327f0:	e0bff904 	addi	r2,fp,-28
811327f4:	180d883a 	mov	r6,r3
811327f8:	100b883a 	mov	r5,r2
811327fc:	e13fff17 	ldw	r4,-4(fp)
81132800:	1131dbc0 	call	81131dbc <match_file_record_to_name_ext>
81132804:	e0bff815 	stw	r2,-32(fp)

                        if (match)
81132808:	e0bff817 	ldw	r2,-32(fp)
8113280c:	10000326 	beq	r2,zero,8113281c <find_file_in_directory+0x27c>
                        {
                            result = true;
81132810:	00800044 	movi	r2,1
81132814:	e0bfef15 	stw	r2,-68(fp)
                            break;
81132818:	00000606 	br	81132834 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
8113281c:	e0bff117 	ldw	r2,-60(fp)
81132820:	10800044 	addi	r2,r2,1
81132824:	e0bff115 	stw	r2,-60(fp)
81132828:	e0bff117 	ldw	r2,-60(fp)
8113282c:	10800410 	cmplti	r2,r2,16
81132830:	103fdd1e 	bne	r2,zero,811327a8 <__reset+0xfb1127a8>
            }
            else
            {
                break;
            }
            if (result)
81132834:	e0bfef17 	ldw	r2,-68(fp)
81132838:	1000711e 	bne	r2,zero,81132a00 <find_file_in_directory+0x460>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
8113283c:	e0bff017 	ldw	r2,-64(fp)
81132840:	10800044 	addi	r2,r2,1
81132844:	e0bff015 	stw	r2,-64(fp)
81132848:	e0fff017 	ldw	r3,-64(fp)
8113284c:	e0bff717 	ldw	r2,-36(fp)
81132850:	18bfc816 	blt	r3,r2,81132774 <__reset+0xfb112774>
81132854:	00006b06 	br	81132a04 <find_file_in_directory+0x464>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81132858:	e0bfed17 	ldw	r2,-76(fp)
8113285c:	10ffff84 	addi	r3,r2,-2
81132860:	00a04574 	movhi	r2,33045
81132864:	1087ee04 	addi	r2,r2,8120
81132868:	10800383 	ldbu	r2,14(r2)
8113286c:	10803fcc 	andi	r2,r2,255
81132870:	1885383a 	mul	r2,r3,r2
81132874:	1007883a 	mov	r3,r2
81132878:	00a04574 	movhi	r2,33045
8113287c:	1087ee04 	addi	r2,r2,8120
81132880:	10801417 	ldw	r2,80(r2)
81132884:	1885883a 	add	r2,r3,r2
81132888:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
8113288c:	e03ff215 	stw	zero,-56(fp)
81132890:	00003306 	br	81132960 <find_file_in_directory+0x3c0>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81132894:	e0fff217 	ldw	r3,-56(fp)
81132898:	e0bff517 	ldw	r2,-44(fp)
8113289c:	1885883a 	add	r2,r3,r2
811328a0:	d0e09317 	ldw	r3,-32180(gp)
811328a4:	180b883a 	mov	r5,r3
811328a8:	1009883a 	mov	r4,r2
811328ac:	11308f80 	call	811308f8 <Read_Sector_Data>
811328b0:	10003226 	beq	r2,zero,8113297c <find_file_in_directory+0x3dc>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
811328b4:	e03ff315 	stw	zero,-52(fp)
811328b8:	00002106 	br	81132940 <find_file_in_directory+0x3a0>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
811328bc:	e0bff317 	ldw	r2,-52(fp)
811328c0:	1004917a 	slli	r2,r2,5
811328c4:	e0ffed17 	ldw	r3,-76(fp)
811328c8:	e13ff217 	ldw	r4,-56(fp)
811328cc:	200f883a 	mov	r7,r4
811328d0:	180d883a 	mov	r6,r3
811328d4:	e17fff17 	ldw	r5,-4(fp)
811328d8:	1009883a 	mov	r4,r2
811328dc:	1130d280 	call	81130d28 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
811328e0:	e0bfff17 	ldw	r2,-4(fp)
811328e4:	10800003 	ldbu	r2,0(r2)
811328e8:	10803fcc 	andi	r2,r2,255
811328ec:	10803960 	cmpeqi	r2,r2,229
811328f0:	1000101e 	bne	r2,zero,81132934 <find_file_in_directory+0x394>
811328f4:	e0bfff17 	ldw	r2,-4(fp)
811328f8:	10800003 	ldbu	r2,0(r2)
811328fc:	10803fcc 	andi	r2,r2,255
81132900:	10000c26 	beq	r2,zero,81132934 <find_file_in_directory+0x394>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
81132904:	e0fffb04 	addi	r3,fp,-20
81132908:	e0bff904 	addi	r2,fp,-28
8113290c:	180d883a 	mov	r6,r3
81132910:	100b883a 	mov	r5,r2
81132914:	e13fff17 	ldw	r4,-4(fp)
81132918:	1131dbc0 	call	81131dbc <match_file_record_to_name_ext>
8113291c:	e0bff615 	stw	r2,-40(fp)

                            if (match)
81132920:	e0bff617 	ldw	r2,-40(fp)
81132924:	10000326 	beq	r2,zero,81132934 <find_file_in_directory+0x394>
                            {                               
                                result = true;
81132928:	00800044 	movi	r2,1
8113292c:	e0bfef15 	stw	r2,-68(fp)
                                break;
81132930:	00000606 	br	8113294c <find_file_in_directory+0x3ac>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
81132934:	e0bff317 	ldw	r2,-52(fp)
81132938:	10800044 	addi	r2,r2,1
8113293c:	e0bff315 	stw	r2,-52(fp)
81132940:	e0bff317 	ldw	r2,-52(fp)
81132944:	10800410 	cmplti	r2,r2,16
81132948:	103fdc1e 	bne	r2,zero,811328bc <__reset+0xfb1128bc>
                }
                else
                {
                    break;
                }
                if (result)
8113294c:	e0bfef17 	ldw	r2,-68(fp)
81132950:	10000c1e 	bne	r2,zero,81132984 <find_file_in_directory+0x3e4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81132954:	e0bff217 	ldw	r2,-56(fp)
81132958:	10800044 	addi	r2,r2,1
8113295c:	e0bff215 	stw	r2,-56(fp)
81132960:	00a04574 	movhi	r2,33045
81132964:	1087ee04 	addi	r2,r2,8120
81132968:	10800383 	ldbu	r2,14(r2)
8113296c:	10803fcc 	andi	r2,r2,255
81132970:	e0fff217 	ldw	r3,-56(fp)
81132974:	18bfc716 	blt	r3,r2,81132894 <__reset+0xfb112894>
81132978:	00000306 	br	81132988 <find_file_in_directory+0x3e8>
                        }
                    }
                }
                else
                {
                    break;
8113297c:	0001883a 	nop
81132980:	00000106 	br	81132988 <find_file_in_directory+0x3e8>
                }
                if (result)
                {
                    break;
81132984:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
81132988:	e0bfef17 	ldw	r2,-68(fp)
8113298c:	1000141e 	bne	r2,zero,811329e0 <find_file_in_directory+0x440>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
81132990:	e0bfed17 	ldw	r2,-76(fp)
81132994:	e0fffc04 	addi	r3,fp,-16
81132998:	180b883a 	mov	r5,r3
8113299c:	1009883a 	mov	r4,r2
811329a0:	11309d80 	call	811309d8 <get_cluster_flag>
811329a4:	10000c26 	beq	r2,zero,811329d8 <find_file_in_directory+0x438>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
811329a8:	e0bffc0b 	ldhu	r2,-16(fp)
811329ac:	10bfffcc 	andi	r2,r2,65535
811329b0:	10fffe0c 	andi	r3,r2,65528
811329b4:	00bffe14 	movui	r2,65528
811329b8:	1880021e 	bne	r3,r2,811329c4 <find_file_in_directory+0x424>
					{
						return false;
811329bc:	0005883a 	mov	r2,zero
811329c0:	00001106 	br	81132a08 <find_file_in_directory+0x468>
					}
					cluster = (new_cluster & 0x0000fff8);
811329c4:	e0bffc0b 	ldhu	r2,-16(fp)
811329c8:	10bfffcc 	andi	r2,r2,65535
811329cc:	10bffe0c 	andi	r2,r2,65528
811329d0:	e0bfed15 	stw	r2,-76(fp)
811329d4:	00000206 	br	811329e0 <find_file_in_directory+0x440>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
811329d8:	0005883a 	mov	r2,zero
811329dc:	00000a06 	br	81132a08 <find_file_in_directory+0x468>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
811329e0:	e0bfed17 	ldw	r2,-76(fp)
811329e4:	00fffdd4 	movui	r3,65527
811329e8:	18800616 	blt	r3,r2,81132a04 <find_file_in_directory+0x464>
811329ec:	e0bfef17 	ldw	r2,-68(fp)
811329f0:	103f9926 	beq	r2,zero,81132858 <__reset+0xfb112858>
811329f4:	00000306 	br	81132a04 <find_file_in_directory+0x464>
                    }
                }
            }
            else
            {
                break;
811329f8:	0001883a 	nop
811329fc:	00000106 	br	81132a04 <find_file_in_directory+0x464>
            }
            if (result)
            {
                break;
81132a00:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
81132a04:	e0bfef17 	ldw	r2,-68(fp)
}
81132a08:	e037883a 	mov	sp,fp
81132a0c:	dfc00117 	ldw	ra,4(sp)
81132a10:	df000017 	ldw	fp,0(sp)
81132a14:	dec00204 	addi	sp,sp,8
81132a18:	f800283a 	ret

81132a1c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
81132a1c:	defff504 	addi	sp,sp,-44
81132a20:	de00012e 	bgeu	sp,et,81132a28 <find_first_empty_cluster+0xc>
81132a24:	003b68fa 	trap	3
81132a28:	dfc00a15 	stw	ra,40(sp)
81132a2c:	df000915 	stw	fp,36(sp)
81132a30:	df000904 	addi	fp,sp,36
81132a34:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
81132a38:	00a04574 	movhi	r2,33045
81132a3c:	1087ee04 	addi	r2,r2,8120
81132a40:	10801117 	ldw	r2,68(r2)
81132a44:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
81132a48:	00800084 	movi	r2,2
81132a4c:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
81132a50:	00bfffc4 	movi	r2,-1
81132a54:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
81132a58:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
81132a5c:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
81132a60:	00a04574 	movhi	r2,33045
81132a64:	1087ee04 	addi	r2,r2,8120
81132a68:	10801417 	ldw	r2,80(r2)
81132a6c:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
81132a70:	00a04574 	movhi	r2,33045
81132a74:	1087ee04 	addi	r2,r2,8120
81132a78:	1080058b 	ldhu	r2,22(r2)
81132a7c:	10bfffcc 	andi	r2,r2,65535
81132a80:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
81132a84:	00a04574 	movhi	r2,33045
81132a88:	1087ee04 	addi	r2,r2,8120
81132a8c:	10800917 	ldw	r2,36(r2)
81132a90:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
81132a94:	e0bffd17 	ldw	r2,-12(fp)
81132a98:	e0fffe17 	ldw	r3,-8(fp)
81132a9c:	18800b2e 	bgeu	r3,r2,81132acc <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81132aa0:	e0fffd17 	ldw	r3,-12(fp)
81132aa4:	e0bffc17 	ldw	r2,-16(fp)
81132aa8:	1887c83a 	sub	r3,r3,r2
81132aac:	00a04574 	movhi	r2,33045
81132ab0:	1087ee04 	addi	r2,r2,8120
81132ab4:	10800383 	ldbu	r2,14(r2)
81132ab8:	10803fcc 	andi	r2,r2,255
81132abc:	1885203a 	divu	r2,r3,r2
81132ac0:	10800044 	addi	r2,r2,1
81132ac4:	e0bffb15 	stw	r2,-20(fp)
81132ac8:	00002a06 	br	81132b74 <find_first_empty_cluster+0x158>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
81132acc:	e0fffe17 	ldw	r3,-8(fp)
81132ad0:	e0bffc17 	ldw	r2,-16(fp)
81132ad4:	1887c83a 	sub	r3,r3,r2
81132ad8:	00a04574 	movhi	r2,33045
81132adc:	1087ee04 	addi	r2,r2,8120
81132ae0:	10800383 	ldbu	r2,14(r2)
81132ae4:	10803fcc 	andi	r2,r2,255
81132ae8:	1885203a 	divu	r2,r3,r2
81132aec:	10800044 	addi	r2,r2,1
81132af0:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81132af4:	00001f06 	br	81132b74 <find_first_empty_cluster+0x158>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
81132af8:	e0bff717 	ldw	r2,-36(fp)
81132afc:	d0e09317 	ldw	r3,-32180(gp)
81132b00:	180b883a 	mov	r5,r3
81132b04:	1009883a 	mov	r4,r2
81132b08:	11308f80 	call	811308f8 <Read_Sector_Data>
81132b0c:	10001426 	beq	r2,zero,81132b60 <find_first_empty_cluster+0x144>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
81132b10:	e0bff817 	ldw	r2,-32(fp)
81132b14:	10803fcc 	andi	r2,r2,255
81132b18:	1085883a 	add	r2,r2,r2
81132b1c:	1007883a 	mov	r3,r2
81132b20:	d0a09517 	ldw	r2,-32172(gp)
81132b24:	10800a17 	ldw	r2,40(r2)
81132b28:	1885883a 	add	r2,r3,r2
81132b2c:	1080002b 	ldhuio	r2,0(r2)
81132b30:	10bfffcc 	andi	r2,r2,65535
81132b34:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
81132b38:	e0bff90f 	ldh	r2,-28(fp)
81132b3c:	10000726 	beq	r2,zero,81132b5c <find_first_empty_cluster+0x140>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
81132b40:	e0bff817 	ldw	r2,-32(fp)
81132b44:	10800044 	addi	r2,r2,1
81132b48:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
81132b4c:	e0bff817 	ldw	r2,-32(fp)
81132b50:	10803fcc 	andi	r2,r2,255
81132b54:	103fee1e 	bne	r2,zero,81132b10 <__reset+0xfb112b10>
81132b58:	00000106 	br	81132b60 <find_first_empty_cluster+0x144>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
81132b5c:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
81132b60:	e0bff90f 	ldh	r2,-28(fp)
81132b64:	10000926 	beq	r2,zero,81132b8c <find_first_empty_cluster+0x170>
        {
            break;
        }
        sector++;
81132b68:	e0bff717 	ldw	r2,-36(fp)
81132b6c:	10800044 	addi	r2,r2,1
81132b70:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
81132b74:	00a04574 	movhi	r2,33045
81132b78:	1087ee04 	addi	r2,r2,8120
81132b7c:	10c01217 	ldw	r3,72(r2)
81132b80:	e0bff717 	ldw	r2,-36(fp)
81132b84:	18bfdc1e 	bne	r3,r2,81132af8 <__reset+0xfb112af8>
81132b88:	00000106 	br	81132b90 <find_first_empty_cluster+0x174>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
81132b8c:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
81132b90:	e0bff90f 	ldh	r2,-28(fp)
81132b94:	1000081e 	bne	r2,zero,81132bb8 <find_first_empty_cluster+0x19c>
81132b98:	e0bff90f 	ldh	r2,-28(fp)
81132b9c:	e0fffb17 	ldw	r3,-20(fp)
81132ba0:	18800536 	bltu	r3,r2,81132bb8 <find_first_empty_cluster+0x19c>
    {
        *cluster_number = cluster_index;
81132ba4:	e0bfff17 	ldw	r2,-4(fp)
81132ba8:	e0fff817 	ldw	r3,-32(fp)
81132bac:	10c00015 	stw	r3,0(r2)
		result = true;
81132bb0:	00800044 	movi	r2,1
81132bb4:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
81132bb8:	e0bffa17 	ldw	r2,-24(fp)
}
81132bbc:	e037883a 	mov	sp,fp
81132bc0:	dfc00117 	ldw	ra,4(sp)
81132bc4:	df000017 	ldw	fp,0(sp)
81132bc8:	dec00204 	addi	sp,sp,8
81132bcc:	f800283a 	ret

81132bd0 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
81132bd0:	defff604 	addi	sp,sp,-40
81132bd4:	de00012e 	bgeu	sp,et,81132bdc <find_first_empty_record_in_a_subdirectory+0xc>
81132bd8:	003b68fa 	trap	3
81132bdc:	dfc00915 	stw	ra,36(sp)
81132be0:	df000815 	stw	fp,32(sp)
81132be4:	df000804 	addi	fp,sp,32
81132be8:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
81132bec:	00bfffc4 	movi	r2,-1
81132bf0:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
81132bf4:	e0bfff17 	ldw	r2,-4(fp)
81132bf8:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
81132bfc:	e0bff917 	ldw	r2,-28(fp)
81132c00:	10ffff84 	addi	r3,r2,-2
81132c04:	00a04574 	movhi	r2,33045
81132c08:	1087ee04 	addi	r2,r2,8120
81132c0c:	10800383 	ldbu	r2,14(r2)
81132c10:	10803fcc 	andi	r2,r2,255
81132c14:	1885383a 	mul	r2,r3,r2
81132c18:	1007883a 	mov	r3,r2
81132c1c:	00a04574 	movhi	r2,33045
81132c20:	1087ee04 	addi	r2,r2,8120
81132c24:	10801417 	ldw	r2,80(r2)
81132c28:	1885883a 	add	r2,r3,r2
81132c2c:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81132c30:	e03ffa15 	stw	zero,-24(fp)
81132c34:	00002c06 	br	81132ce8 <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81132c38:	e0fffa17 	ldw	r3,-24(fp)
81132c3c:	e0bffc17 	ldw	r2,-16(fp)
81132c40:	1885883a 	add	r2,r3,r2
81132c44:	d0e09317 	ldw	r3,-32180(gp)
81132c48:	180b883a 	mov	r5,r3
81132c4c:	1009883a 	mov	r4,r2
81132c50:	11308f80 	call	811308f8 <Read_Sector_Data>
81132c54:	10002b26 	beq	r2,zero,81132d04 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81132c58:	e03ffb15 	stw	zero,-20(fp)
81132c5c:	00001c06 	br	81132cd0 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81132c60:	e0bffb17 	ldw	r2,-20(fp)
81132c64:	1004917a 	slli	r2,r2,5
81132c68:	1007883a 	mov	r3,r2
81132c6c:	d0a09517 	ldw	r2,-32172(gp)
81132c70:	10800a17 	ldw	r2,40(r2)
81132c74:	1885883a 	add	r2,r3,r2
81132c78:	10800023 	ldbuio	r2,0(r2)
81132c7c:	10803fcc 	andi	r2,r2,255
81132c80:	10803fcc 	andi	r2,r2,255
81132c84:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
81132c88:	e0bffd0b 	ldhu	r2,-12(fp)
81132c8c:	10803960 	cmpeqi	r2,r2,229
81132c90:	1000021e 	bne	r2,zero,81132c9c <find_first_empty_record_in_a_subdirectory+0xcc>
81132c94:	e0bffd0b 	ldhu	r2,-12(fp)
81132c98:	10000a1e 	bne	r2,zero,81132cc4 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
81132c9c:	e0bffa17 	ldw	r2,-24(fp)
81132ca0:	1006913a 	slli	r3,r2,4
81132ca4:	e0bffb17 	ldw	r2,-20(fp)
81132ca8:	1885883a 	add	r2,r3,r2
81132cac:	1006943a 	slli	r3,r2,16
81132cb0:	e0bff917 	ldw	r2,-28(fp)
81132cb4:	1884b03a 	or	r2,r3,r2
81132cb8:	e0bff815 	stw	r2,-32(fp)
                        return result;
81132cbc:	e0bff817 	ldw	r2,-32(fp)
81132cc0:	00005306 	br	81132e10 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
81132cc4:	e0bffb17 	ldw	r2,-20(fp)
81132cc8:	10800044 	addi	r2,r2,1
81132ccc:	e0bffb15 	stw	r2,-20(fp)
81132cd0:	e0bffb17 	ldw	r2,-20(fp)
81132cd4:	10800410 	cmplti	r2,r2,16
81132cd8:	103fe11e 	bne	r2,zero,81132c60 <__reset+0xfb112c60>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81132cdc:	e0bffa17 	ldw	r2,-24(fp)
81132ce0:	10800044 	addi	r2,r2,1
81132ce4:	e0bffa15 	stw	r2,-24(fp)
81132ce8:	00a04574 	movhi	r2,33045
81132cec:	1087ee04 	addi	r2,r2,8120
81132cf0:	10800383 	ldbu	r2,14(r2)
81132cf4:	10803fcc 	andi	r2,r2,255
81132cf8:	e0fffa17 	ldw	r3,-24(fp)
81132cfc:	18bfce16 	blt	r3,r2,81132c38 <__reset+0xfb112c38>
81132d00:	00000106 	br	81132d08 <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
81132d04:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
81132d08:	e0bff817 	ldw	r2,-32(fp)
81132d0c:	1000390e 	bge	r2,zero,81132df4 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
81132d10:	e0bff917 	ldw	r2,-28(fp)
81132d14:	e0fffd84 	addi	r3,fp,-10
81132d18:	180b883a 	mov	r5,r3
81132d1c:	1009883a 	mov	r4,r2
81132d20:	11309d80 	call	811309d8 <get_cluster_flag>
81132d24:	10003126 	beq	r2,zero,81132dec <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81132d28:	e0bffd8b 	ldhu	r2,-10(fp)
81132d2c:	10bfffcc 	andi	r2,r2,65535
81132d30:	10fffe0c 	andi	r3,r2,65528
81132d34:	00bffe14 	movui	r2,65528
81132d38:	18802e1e 	bne	r3,r2,81132df4 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
81132d3c:	e0bffe04 	addi	r2,fp,-8
81132d40:	1009883a 	mov	r4,r2
81132d44:	1132a1c0 	call	81132a1c <find_first_empty_cluster>
81132d48:	10002326 	beq	r2,zero,81132dd8 <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81132d4c:	e0bff917 	ldw	r2,-28(fp)
81132d50:	e0fffe17 	ldw	r3,-8(fp)
81132d54:	18ffffcc 	andi	r3,r3,65535
81132d58:	18e0001c 	xori	r3,r3,32768
81132d5c:	18e00004 	addi	r3,r3,-32768
81132d60:	01800044 	movi	r6,1
81132d64:	180b883a 	mov	r5,r3
81132d68:	1009883a 	mov	r4,r2
81132d6c:	1130a940 	call	81130a94 <mark_cluster>
81132d70:	10001926 	beq	r2,zero,81132dd8 <find_first_empty_record_in_a_subdirectory+0x208>
81132d74:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81132d78:	01800044 	movi	r6,1
81132d7c:	017fffc4 	movi	r5,-1
81132d80:	1009883a 	mov	r4,r2
81132d84:	1130a940 	call	81130a94 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
81132d88:	10001326 	beq	r2,zero,81132dd8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81132d8c:	e0bff917 	ldw	r2,-28(fp)
81132d90:	e0fffe17 	ldw	r3,-8(fp)
81132d94:	18ffffcc 	andi	r3,r3,65535
81132d98:	18e0001c 	xori	r3,r3,32768
81132d9c:	18e00004 	addi	r3,r3,-32768
81132da0:	000d883a 	mov	r6,zero
81132da4:	180b883a 	mov	r5,r3
81132da8:	1009883a 	mov	r4,r2
81132dac:	1130a940 	call	81130a94 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
81132db0:	10000926 	beq	r2,zero,81132dd8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81132db4:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
81132db8:	000d883a 	mov	r6,zero
81132dbc:	017fffc4 	movi	r5,-1
81132dc0:	1009883a 	mov	r4,r2
81132dc4:	1130a940 	call	81130a94 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
81132dc8:	10000326 	beq	r2,zero,81132dd8 <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
81132dcc:	11308a40 	call	811308a4 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
81132dd0:	e0bffe17 	ldw	r2,-8(fp)
81132dd4:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
81132dd8:	e0bffd8b 	ldhu	r2,-10(fp)
81132ddc:	10bfffcc 	andi	r2,r2,65535
81132de0:	10bffe0c 	andi	r2,r2,65528
81132de4:	e0bff915 	stw	r2,-28(fp)
81132de8:	00000206 	br	81132df4 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
81132dec:	00bfffc4 	movi	r2,-1
81132df0:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
81132df4:	e0bff917 	ldw	r2,-28(fp)
81132df8:	00fffdd4 	movui	r3,65527
81132dfc:	18800316 	blt	r3,r2,81132e0c <find_first_empty_record_in_a_subdirectory+0x23c>
81132e00:	e0bff817 	ldw	r2,-32(fp)
81132e04:	10bfffe0 	cmpeqi	r2,r2,-1
81132e08:	103f7c1e 	bne	r2,zero,81132bfc <__reset+0xfb112bfc>
    return result; 
81132e0c:	e0bff817 	ldw	r2,-32(fp)
}
81132e10:	e037883a 	mov	sp,fp
81132e14:	dfc00117 	ldw	ra,4(sp)
81132e18:	df000017 	ldw	fp,0(sp)
81132e1c:	dec00204 	addi	sp,sp,8
81132e20:	f800283a 	ret

81132e24 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
81132e24:	defff904 	addi	sp,sp,-28
81132e28:	de00012e 	bgeu	sp,et,81132e30 <find_first_empty_record_in_root_directory+0xc>
81132e2c:	003b68fa 	trap	3
81132e30:	dfc00615 	stw	ra,24(sp)
81132e34:	df000515 	stw	fp,20(sp)
81132e38:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81132e3c:	00a04574 	movhi	r2,33045
81132e40:	1087ee04 	addi	r2,r2,8120
81132e44:	1080050b 	ldhu	r2,20(r2)
81132e48:	10bfffcc 	andi	r2,r2,65535
81132e4c:	1006917a 	slli	r3,r2,5
81132e50:	00a04574 	movhi	r2,33045
81132e54:	1087ee04 	addi	r2,r2,8120
81132e58:	1080030b 	ldhu	r2,12(r2)
81132e5c:	10bfffcc 	andi	r2,r2,65535
81132e60:	1885283a 	div	r2,r3,r2
81132e64:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
81132e68:	00bfffc4 	movi	r2,-1
81132e6c:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81132e70:	e03ffb15 	stw	zero,-20(fp)
81132e74:	00002d06 	br	81132f2c <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
81132e78:	00a04574 	movhi	r2,33045
81132e7c:	1087ee04 	addi	r2,r2,8120
81132e80:	10c01317 	ldw	r3,76(r2)
81132e84:	e0bffb17 	ldw	r2,-20(fp)
81132e88:	1885883a 	add	r2,r3,r2
81132e8c:	1007883a 	mov	r3,r2
81132e90:	d0a09317 	ldw	r2,-32180(gp)
81132e94:	100b883a 	mov	r5,r2
81132e98:	1809883a 	mov	r4,r3
81132e9c:	11308f80 	call	811308f8 <Read_Sector_Data>
81132ea0:	10002626 	beq	r2,zero,81132f3c <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81132ea4:	e03ffc15 	stw	zero,-16(fp)
81132ea8:	00001a06 	br	81132f14 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
81132eac:	e0bffc17 	ldw	r2,-16(fp)
81132eb0:	1004917a 	slli	r2,r2,5
81132eb4:	1007883a 	mov	r3,r2
81132eb8:	d0a09517 	ldw	r2,-32172(gp)
81132ebc:	10800a17 	ldw	r2,40(r2)
81132ec0:	1885883a 	add	r2,r3,r2
81132ec4:	10800023 	ldbuio	r2,0(r2)
81132ec8:	10803fcc 	andi	r2,r2,255
81132ecc:	10803fcc 	andi	r2,r2,255
81132ed0:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
81132ed4:	e0bfff0b 	ldhu	r2,-4(fp)
81132ed8:	10803960 	cmpeqi	r2,r2,229
81132edc:	1000021e 	bne	r2,zero,81132ee8 <find_first_empty_record_in_root_directory+0xc4>
81132ee0:	e0bfff0b 	ldhu	r2,-4(fp)
81132ee4:	1000081e 	bne	r2,zero,81132f08 <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
81132ee8:	e0bffb17 	ldw	r2,-20(fp)
81132eec:	1006913a 	slli	r3,r2,4
81132ef0:	e0bffc17 	ldw	r2,-16(fp)
81132ef4:	1885883a 	add	r2,r3,r2
81132ef8:	1004943a 	slli	r2,r2,16
81132efc:	e0bffe15 	stw	r2,-8(fp)
                    return result;
81132f00:	e0bffe17 	ldw	r2,-8(fp)
81132f04:	00000f06 	br	81132f44 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
81132f08:	e0bffc17 	ldw	r2,-16(fp)
81132f0c:	10800044 	addi	r2,r2,1
81132f10:	e0bffc15 	stw	r2,-16(fp)
81132f14:	e0bffc17 	ldw	r2,-16(fp)
81132f18:	10800410 	cmplti	r2,r2,16
81132f1c:	103fe31e 	bne	r2,zero,81132eac <__reset+0xfb112eac>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
81132f20:	e0bffb17 	ldw	r2,-20(fp)
81132f24:	10800044 	addi	r2,r2,1
81132f28:	e0bffb15 	stw	r2,-20(fp)
81132f2c:	e0fffb17 	ldw	r3,-20(fp)
81132f30:	e0bffd17 	ldw	r2,-12(fp)
81132f34:	18bfd016 	blt	r3,r2,81132e78 <__reset+0xfb112e78>
81132f38:	00000106 	br	81132f40 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
81132f3c:	0001883a 	nop
        }
    }
    return result;
81132f40:	e0bffe17 	ldw	r2,-8(fp)
}
81132f44:	e037883a 	mov	sp,fp
81132f48:	dfc00117 	ldw	ra,4(sp)
81132f4c:	df000017 	ldw	fp,0(sp)
81132f50:	dec00204 	addi	sp,sp,8
81132f54:	f800283a 	ret

81132f58 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
81132f58:	defffa04 	addi	sp,sp,-24
81132f5c:	de00012e 	bgeu	sp,et,81132f64 <convert_filename_to_name_extension+0xc>
81132f60:	003b68fa 	trap	3
81132f64:	df000515 	stw	fp,20(sp)
81132f68:	df000504 	addi	fp,sp,20
81132f6c:	e13ffd15 	stw	r4,-12(fp)
81132f70:	e17ffe15 	stw	r5,-8(fp)
81132f74:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
81132f78:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
81132f7c:	e03ffb15 	stw	zero,-20(fp)
81132f80:	00002506 	br	81133018 <convert_filename_to_name_extension+0xc0>
    {
        if (filename[local] != '.')
81132f84:	e0bffc17 	ldw	r2,-16(fp)
81132f88:	e0fffd17 	ldw	r3,-12(fp)
81132f8c:	1885883a 	add	r2,r3,r2
81132f90:	10800003 	ldbu	r2,0(r2)
81132f94:	10803fcc 	andi	r2,r2,255
81132f98:	1080201c 	xori	r2,r2,128
81132f9c:	10bfe004 	addi	r2,r2,-128
81132fa0:	10800ba0 	cmpeqi	r2,r2,46
81132fa4:	1000141e 	bne	r2,zero,81132ff8 <convert_filename_to_name_extension+0xa0>
        {
            name[counter] = filename[local];
81132fa8:	e0bffb17 	ldw	r2,-20(fp)
81132fac:	e0fffe17 	ldw	r3,-8(fp)
81132fb0:	1885883a 	add	r2,r3,r2
81132fb4:	e0fffc17 	ldw	r3,-16(fp)
81132fb8:	e13ffd17 	ldw	r4,-12(fp)
81132fbc:	20c7883a 	add	r3,r4,r3
81132fc0:	18c00003 	ldbu	r3,0(r3)
81132fc4:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
81132fc8:	e0bffc17 	ldw	r2,-16(fp)
81132fcc:	e0fffd17 	ldw	r3,-12(fp)
81132fd0:	1885883a 	add	r2,r3,r2
81132fd4:	10800003 	ldbu	r2,0(r2)
81132fd8:	10803fcc 	andi	r2,r2,255
81132fdc:	1080201c 	xori	r2,r2,128
81132fe0:	10bfe004 	addi	r2,r2,-128
81132fe4:	10000926 	beq	r2,zero,8113300c <convert_filename_to_name_extension+0xb4>
81132fe8:	e0bffc17 	ldw	r2,-16(fp)
81132fec:	10800044 	addi	r2,r2,1
81132ff0:	e0bffc15 	stw	r2,-16(fp)
81132ff4:	00000506 	br	8113300c <convert_filename_to_name_extension+0xb4>
        }
        else
        {
            name[counter] = ' ';
81132ff8:	e0bffb17 	ldw	r2,-20(fp)
81132ffc:	e0fffe17 	ldw	r3,-8(fp)
81133000:	1885883a 	add	r2,r3,r2
81133004:	00c00804 	movi	r3,32
81133008:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
8113300c:	e0bffb17 	ldw	r2,-20(fp)
81133010:	10800044 	addi	r2,r2,1
81133014:	e0bffb15 	stw	r2,-20(fp)
81133018:	e0bffb17 	ldw	r2,-20(fp)
8113301c:	10800210 	cmplti	r2,r2,8
81133020:	103fd81e 	bne	r2,zero,81132f84 <__reset+0xfb112f84>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
81133024:	e0bffc17 	ldw	r2,-16(fp)
81133028:	e0fffd17 	ldw	r3,-12(fp)
8113302c:	1885883a 	add	r2,r3,r2
81133030:	10800003 	ldbu	r2,0(r2)
81133034:	10803fcc 	andi	r2,r2,255
81133038:	1080201c 	xori	r2,r2,128
8113303c:	10bfe004 	addi	r2,r2,-128
81133040:	10800b98 	cmpnei	r2,r2,46
81133044:	1000031e 	bne	r2,zero,81133054 <convert_filename_to_name_extension+0xfc>
81133048:	e0bffc17 	ldw	r2,-16(fp)
8113304c:	10800044 	addi	r2,r2,1
81133050:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
81133054:	e03ffb15 	stw	zero,-20(fp)
81133058:	00001c06 	br	811330cc <convert_filename_to_name_extension+0x174>
    {
        if (filename[local] != 0)
8113305c:	e0bffc17 	ldw	r2,-16(fp)
81133060:	e0fffd17 	ldw	r3,-12(fp)
81133064:	1885883a 	add	r2,r3,r2
81133068:	10800003 	ldbu	r2,0(r2)
8113306c:	10803fcc 	andi	r2,r2,255
81133070:	1080201c 	xori	r2,r2,128
81133074:	10bfe004 	addi	r2,r2,-128
81133078:	10000c26 	beq	r2,zero,811330ac <convert_filename_to_name_extension+0x154>
        {
            extension[counter] = filename[local];
8113307c:	e0bffb17 	ldw	r2,-20(fp)
81133080:	e0ffff17 	ldw	r3,-4(fp)
81133084:	1885883a 	add	r2,r3,r2
81133088:	e0fffc17 	ldw	r3,-16(fp)
8113308c:	e13ffd17 	ldw	r4,-12(fp)
81133090:	20c7883a 	add	r3,r4,r3
81133094:	18c00003 	ldbu	r3,0(r3)
81133098:	10c00005 	stb	r3,0(r2)
            local++;
8113309c:	e0bffc17 	ldw	r2,-16(fp)
811330a0:	10800044 	addi	r2,r2,1
811330a4:	e0bffc15 	stw	r2,-16(fp)
811330a8:	00000506 	br	811330c0 <convert_filename_to_name_extension+0x168>
        }
        else
        {
            extension[counter] = ' ';
811330ac:	e0bffb17 	ldw	r2,-20(fp)
811330b0:	e0ffff17 	ldw	r3,-4(fp)
811330b4:	1885883a 	add	r2,r3,r2
811330b8:	00c00804 	movi	r3,32
811330bc:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
811330c0:	e0bffb17 	ldw	r2,-20(fp)
811330c4:	10800044 	addi	r2,r2,1
811330c8:	e0bffb15 	stw	r2,-20(fp)
811330cc:	e0bffb17 	ldw	r2,-20(fp)
811330d0:	108000d0 	cmplti	r2,r2,3
811330d4:	103fe11e 	bne	r2,zero,8113305c <__reset+0xfb11305c>
        {
            extension[counter] = ' ';
        }
    }

}
811330d8:	0001883a 	nop
811330dc:	e037883a 	mov	sp,fp
811330e0:	df000017 	ldw	fp,0(sp)
811330e4:	dec00104 	addi	sp,sp,4
811330e8:	f800283a 	ret

811330ec <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
811330ec:	defff504 	addi	sp,sp,-44
811330f0:	de00012e 	bgeu	sp,et,811330f8 <create_file+0xc>
811330f4:	003b68fa 	trap	3
811330f8:	dfc00a15 	stw	ra,40(sp)
811330fc:	df000915 	stw	fp,36(sp)
81133100:	df000904 	addi	fp,sp,36
81133104:	e13ffd15 	stw	r4,-12(fp)
81133108:	e17ffe15 	stw	r5,-8(fp)
8113310c:	e1bfff15 	stw	r6,-4(fp)
    unsigned int cluster_number;
    bool result = false;
81133110:	e03ff715 	stw	zero,-36(fp)
    
    if (find_first_empty_cluster(&cluster_number))
81133114:	e0bffc04 	addi	r2,fp,-16
81133118:	1009883a 	mov	r4,r2
8113311c:	1132a1c0 	call	81132a1c <find_first_empty_cluster>
81133120:	1000a026 	beq	r2,zero,811333a4 <create_file+0x2b8>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
81133124:	e0bfff17 	ldw	r2,-4(fp)
81133128:	10800a17 	ldw	r2,40(r2)
8113312c:	1000031e 	bne	r2,zero,8113313c <create_file+0x50>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
81133130:	1132e240 	call	81132e24 <find_first_empty_record_in_root_directory>
81133134:	e0bff815 	stw	r2,-32(fp)
81133138:	00000606 	br	81133154 <create_file+0x68>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
8113313c:	e0bfff17 	ldw	r2,-4(fp)
81133140:	1080058b 	ldhu	r2,22(r2)
81133144:	10bfffcc 	andi	r2,r2,65535
81133148:	1009883a 	mov	r4,r2
8113314c:	1132bd00 	call	81132bd0 <find_first_empty_record_in_a_subdirectory>
81133150:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
81133154:	e0bff817 	ldw	r2,-32(fp)
81133158:	10009216 	blt	r2,zero,811333a4 <create_file+0x2b8>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
8113315c:	e13ffd17 	ldw	r4,-12(fp)
81133160:	1131cfc0 	call	81131cfc <get_dir_divider_location>
81133164:	e0bff915 	stw	r2,-28(fp)
            int last_dir_separator = 0;
81133168:	e03ffa15 	stw	zero,-24(fp)

            // Skip through all directory separators.
            while (location > 0)
8113316c:	00000b06 	br	8113319c <create_file+0xb0>
            {
                last_dir_separator = last_dir_separator+location+1;
81133170:	e0fffa17 	ldw	r3,-24(fp)
81133174:	e0bff917 	ldw	r2,-28(fp)
81133178:	1885883a 	add	r2,r3,r2
8113317c:	10800044 	addi	r2,r2,1
81133180:	e0bffa15 	stw	r2,-24(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
81133184:	e0bffa17 	ldw	r2,-24(fp)
81133188:	e0fffd17 	ldw	r3,-12(fp)
8113318c:	1885883a 	add	r2,r3,r2
81133190:	1009883a 	mov	r4,r2
81133194:	1131cfc0 	call	81131cfc <get_dir_divider_location>
81133198:	e0bff915 	stw	r2,-28(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
8113319c:	e0bff917 	ldw	r2,-28(fp)
811331a0:	00bff316 	blt	zero,r2,81133170 <__reset+0xfb113170>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
811331a4:	e0bffa17 	ldw	r2,-24(fp)
811331a8:	e0fffd17 	ldw	r3,-12(fp)
811331ac:	1887883a 	add	r3,r3,r2
811331b0:	e13ffe17 	ldw	r4,-8(fp)
811331b4:	e0bffe17 	ldw	r2,-8(fp)
811331b8:	10800204 	addi	r2,r2,8
811331bc:	100d883a 	mov	r6,r2
811331c0:	200b883a 	mov	r5,r4
811331c4:	1809883a 	mov	r4,r3
811331c8:	1132f580 	call	81132f58 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
811331cc:	e0bffe17 	ldw	r2,-8(fp)
811331d0:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
811331d4:	e0bffe17 	ldw	r2,-8(fp)
811331d8:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
811331dc:	e0bffe17 	ldw	r2,-8(fp)
811331e0:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
811331e4:	e0bffe17 	ldw	r2,-8(fp)
811331e8:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
811331ec:	e0bffe17 	ldw	r2,-8(fp)
811331f0:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
811331f4:	e0bffe17 	ldw	r2,-8(fp)
811331f8:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
811331fc:	e0bffc17 	ldw	r2,-16(fp)
81133200:	1007883a 	mov	r3,r2
81133204:	e0bffe17 	ldw	r2,-8(fp)
81133208:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
8113320c:	e0bffe17 	ldw	r2,-8(fp)
81133210:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
81133214:	e0fffc17 	ldw	r3,-16(fp)
81133218:	e0bffe17 	ldw	r2,-8(fp)
8113321c:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
81133220:	e0bffe17 	ldw	r2,-8(fp)
81133224:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
81133228:	e0bffe17 	ldw	r2,-8(fp)
8113322c:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
81133230:	e0bff817 	ldw	r2,-32(fp)
81133234:	10ffffcc 	andi	r3,r2,65535
81133238:	e0bffe17 	ldw	r2,-8(fp)
8113323c:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
81133240:	e0bff817 	ldw	r2,-32(fp)
81133244:	1004d43a 	srli	r2,r2,16
81133248:	1000010e 	bge	r2,zero,81133250 <create_file+0x164>
8113324c:	108003c4 	addi	r2,r2,15
81133250:	1005d13a 	srai	r2,r2,4
81133254:	1007883a 	mov	r3,r2
81133258:	e0bffe17 	ldw	r2,-8(fp)
8113325c:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
81133260:	e0bff817 	ldw	r2,-32(fp)
81133264:	1004d43a 	srli	r2,r2,16
81133268:	1007883a 	mov	r3,r2
8113326c:	00a00034 	movhi	r2,32768
81133270:	108003c4 	addi	r2,r2,15
81133274:	1884703a 	and	r2,r3,r2
81133278:	1000040e 	bge	r2,zero,8113328c <create_file+0x1a0>
8113327c:	10bfffc4 	addi	r2,r2,-1
81133280:	00fffc04 	movi	r3,-16
81133284:	10c4b03a 	or	r2,r2,r3
81133288:	10800044 	addi	r2,r2,1
8113328c:	1004917a 	slli	r2,r2,5
81133290:	1007883a 	mov	r3,r2
81133294:	e0bffe17 	ldw	r2,-8(fp)
81133298:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
8113329c:	e0bfff17 	ldw	r2,-4(fp)
811332a0:	1080058b 	ldhu	r2,22(r2)
811332a4:	10ffffcc 	andi	r3,r2,65535
811332a8:	e0bffe17 	ldw	r2,-8(fp)
811332ac:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
811332b0:	e0bffe17 	ldw	r2,-8(fp)
811332b4:	00c00044 	movi	r3,1
811332b8:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
811332bc:	e0bffe17 	ldw	r2,-8(fp)
811332c0:	00c00044 	movi	r3,1
811332c4:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
811332c8:	e0bffe17 	ldw	r2,-8(fp)
811332cc:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
811332d0:	1000071e 	bne	r2,zero,811332f0 <create_file+0x204>
811332d4:	00a04574 	movhi	r2,33045
811332d8:	1087ee04 	addi	r2,r2,8120
811332dc:	10c01317 	ldw	r3,76(r2)
811332e0:	e0bffe17 	ldw	r2,-8(fp)
811332e4:	10800b17 	ldw	r2,44(r2)
811332e8:	1885883a 	add	r2,r3,r2
811332ec:	00000f06 	br	8113332c <create_file+0x240>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
811332f0:	00a04574 	movhi	r2,33045
811332f4:	1087ee04 	addi	r2,r2,8120
811332f8:	10c01417 	ldw	r3,80(r2)
811332fc:	e0bffe17 	ldw	r2,-8(fp)
81133300:	10800a17 	ldw	r2,40(r2)
81133304:	113fff84 	addi	r4,r2,-2
81133308:	00a04574 	movhi	r2,33045
8113330c:	1087ee04 	addi	r2,r2,8120
81133310:	10800383 	ldbu	r2,14(r2)
81133314:	10803fcc 	andi	r2,r2,255
81133318:	2085383a 	mul	r2,r4,r2
8113331c:	1887883a 	add	r3,r3,r2
                                     file_record->file_record_sector_in_cluster);
81133320:	e0bffe17 	ldw	r2,-8(fp)
81133324:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
81133328:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
8113332c:	e0bffb15 	stw	r2,-20(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
81133330:	e0bffb17 	ldw	r2,-20(fp)
81133334:	d0e09317 	ldw	r3,-32180(gp)
81133338:	180b883a 	mov	r5,r3
8113333c:	1009883a 	mov	r4,r2
81133340:	11308f80 	call	811308f8 <Read_Sector_Data>
81133344:	10001726 	beq	r2,zero,811333a4 <create_file+0x2b8>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
81133348:	e0bffe17 	ldw	r2,-8(fp)
8113334c:	10800c0b 	ldhu	r2,48(r2)
81133350:	10bfffcc 	andi	r2,r2,65535
81133354:	10a0001c 	xori	r2,r2,32768
81133358:	10a00004 	addi	r2,r2,-32768
8113335c:	e17ffe17 	ldw	r5,-8(fp)
81133360:	1009883a 	mov	r4,r2
81133364:	1130fac0 	call	81130fac <Write_File_Record_At_Offset>
81133368:	10000e26 	beq	r2,zero,811333a4 <create_file+0x2b8>
                {
                    Save_Modified_Sector();
8113336c:	11308a40 	call	811308a4 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
81133370:	e0bffc17 	ldw	r2,-16(fp)
81133374:	01800044 	movi	r6,1
81133378:	017fffc4 	movi	r5,-1
8113337c:	1009883a 	mov	r4,r2
81133380:	1130a940 	call	81130a94 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
81133384:	e0bffc17 	ldw	r2,-16(fp)
81133388:	000d883a 	mov	r6,zero
8113338c:	017fffc4 	movi	r5,-1
81133390:	1009883a 	mov	r4,r2
81133394:	1130a940 	call	81130a94 <mark_cluster>
81133398:	10000226 	beq	r2,zero,811333a4 <create_file+0x2b8>
                    {
                        result = true;
8113339c:	00800044 	movi	r2,1
811333a0:	e0bff715 	stw	r2,-36(fp)
                }
            }
        }

    }
    return result;           
811333a4:	e0bff717 	ldw	r2,-36(fp)
}
811333a8:	e037883a 	mov	sp,fp
811333ac:	dfc00117 	ldw	ra,4(sp)
811333b0:	df000017 	ldw	fp,0(sp)
811333b4:	dec00204 	addi	sp,sp,8
811333b8:	f800283a 	ret

811333bc <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
811333bc:	defffb04 	addi	sp,sp,-20
811333c0:	de00012e 	bgeu	sp,et,811333c8 <copy_file_record_name_to_string+0xc>
811333c4:	003b68fa 	trap	3
811333c8:	df000415 	stw	fp,16(sp)
811333cc:	df000404 	addi	fp,sp,16
811333d0:	e13ffe15 	stw	r4,-8(fp)
811333d4:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
811333d8:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
811333dc:	e03ffc15 	stw	zero,-16(fp)
811333e0:	00001506 	br	81133438 <copy_file_record_name_to_string+0x7c>
	{
		if (file_record->name[index] != ' ')
811333e4:	e0fffe17 	ldw	r3,-8(fp)
811333e8:	e0bffc17 	ldw	r2,-16(fp)
811333ec:	1885883a 	add	r2,r3,r2
811333f0:	10800003 	ldbu	r2,0(r2)
811333f4:	10803fcc 	andi	r2,r2,255
811333f8:	10800820 	cmpeqi	r2,r2,32
811333fc:	10000b1e 	bne	r2,zero,8113342c <copy_file_record_name_to_string+0x70>
		{
			file_name[flength] = file_record->name[index];
81133400:	e0bffd17 	ldw	r2,-12(fp)
81133404:	e0ffff17 	ldw	r3,-4(fp)
81133408:	1885883a 	add	r2,r3,r2
8113340c:	e13ffe17 	ldw	r4,-8(fp)
81133410:	e0fffc17 	ldw	r3,-16(fp)
81133414:	20c7883a 	add	r3,r4,r3
81133418:	18c00003 	ldbu	r3,0(r3)
8113341c:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
81133420:	e0bffd17 	ldw	r2,-12(fp)
81133424:	10800044 	addi	r2,r2,1
81133428:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
8113342c:	e0bffc17 	ldw	r2,-16(fp)
81133430:	10800044 	addi	r2,r2,1
81133434:	e0bffc15 	stw	r2,-16(fp)
81133438:	e0bffc17 	ldw	r2,-16(fp)
8113343c:	10800210 	cmplti	r2,r2,8
81133440:	103fe81e 	bne	r2,zero,811333e4 <__reset+0xfb1133e4>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
81133444:	e0bffe17 	ldw	r2,-8(fp)
81133448:	10800203 	ldbu	r2,8(r2)
8113344c:	10803fcc 	andi	r2,r2,255
81133450:	10800820 	cmpeqi	r2,r2,32
81133454:	1000241e 	bne	r2,zero,811334e8 <copy_file_record_name_to_string+0x12c>
	{
		file_name[flength] = '.';
81133458:	e0bffd17 	ldw	r2,-12(fp)
8113345c:	e0ffff17 	ldw	r3,-4(fp)
81133460:	1885883a 	add	r2,r3,r2
81133464:	00c00b84 	movi	r3,46
81133468:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
8113346c:	e0bffd17 	ldw	r2,-12(fp)
81133470:	10800044 	addi	r2,r2,1
81133474:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
81133478:	e03ffc15 	stw	zero,-16(fp)
8113347c:	00001706 	br	811334dc <copy_file_record_name_to_string+0x120>
		{
			if (file_record->extension[index] != ' ')
81133480:	e0fffe17 	ldw	r3,-8(fp)
81133484:	e0bffc17 	ldw	r2,-16(fp)
81133488:	1885883a 	add	r2,r3,r2
8113348c:	10800204 	addi	r2,r2,8
81133490:	10800003 	ldbu	r2,0(r2)
81133494:	10803fcc 	andi	r2,r2,255
81133498:	10800820 	cmpeqi	r2,r2,32
8113349c:	10000c1e 	bne	r2,zero,811334d0 <copy_file_record_name_to_string+0x114>
			{
				file_name[flength] = file_record->extension[index];
811334a0:	e0bffd17 	ldw	r2,-12(fp)
811334a4:	e0ffff17 	ldw	r3,-4(fp)
811334a8:	1885883a 	add	r2,r3,r2
811334ac:	e13ffe17 	ldw	r4,-8(fp)
811334b0:	e0fffc17 	ldw	r3,-16(fp)
811334b4:	20c7883a 	add	r3,r4,r3
811334b8:	18c00204 	addi	r3,r3,8
811334bc:	18c00003 	ldbu	r3,0(r3)
811334c0:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
811334c4:	e0bffd17 	ldw	r2,-12(fp)
811334c8:	10800044 	addi	r2,r2,1
811334cc:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
811334d0:	e0bffc17 	ldw	r2,-16(fp)
811334d4:	10800044 	addi	r2,r2,1
811334d8:	e0bffc15 	stw	r2,-16(fp)
811334dc:	e0bffc17 	ldw	r2,-16(fp)
811334e0:	108000d0 	cmplti	r2,r2,3
811334e4:	103fe61e 	bne	r2,zero,81133480 <__reset+0xfb113480>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
811334e8:	e0bffd17 	ldw	r2,-12(fp)
811334ec:	e0ffff17 	ldw	r3,-4(fp)
811334f0:	1885883a 	add	r2,r3,r2
811334f4:	10000005 	stb	zero,0(r2)
}
811334f8:	0001883a 	nop
811334fc:	e037883a 	mov	sp,fp
81133500:	df000017 	ldw	fp,0(sp)
81133504:	dec00104 	addi	sp,sp,4
81133508:	f800283a 	ret

8113350c <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
8113350c:	defffc04 	addi	sp,sp,-16
81133510:	de00012e 	bgeu	sp,et,81133518 <alt_up_sd_card_open_dev+0xc>
81133514:	003b68fa 	trap	3
81133518:	dfc00315 	stw	ra,12(sp)
8113351c:	df000215 	stw	fp,8(sp)
81133520:	df000204 	addi	fp,sp,8
81133524:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
81133528:	d1600d04 	addi	r5,gp,-32716
8113352c:	e13fff17 	ldw	r4,-4(fp)
81133530:	1138a040 	call	81138a04 <alt_find_dev>
81133534:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
81133538:	e0bffe17 	ldw	r2,-8(fp)
8113353c:	10001e26 	beq	r2,zero,811335b8 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
81133540:	e0bffe17 	ldw	r2,-8(fp)
81133544:	10800a17 	ldw	r2,40(r2)
81133548:	10808d04 	addi	r2,r2,564
8113354c:	d0a08d15 	stw	r2,-32204(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
81133550:	e0bffe17 	ldw	r2,-8(fp)
81133554:	10800a17 	ldw	r2,40(r2)
81133558:	10808904 	addi	r2,r2,548
8113355c:	d0a08e15 	stw	r2,-32200(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
81133560:	e0bffe17 	ldw	r2,-8(fp)
81133564:	10800a17 	ldw	r2,40(r2)
81133568:	10808404 	addi	r2,r2,528
8113356c:	d0a08f15 	stw	r2,-32196(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
81133570:	e0bffe17 	ldw	r2,-8(fp)
81133574:	10800a17 	ldw	r2,40(r2)
81133578:	10808c04 	addi	r2,r2,560
8113357c:	d0a09015 	stw	r2,-32192(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
81133580:	e0bffe17 	ldw	r2,-8(fp)
81133584:	10800a17 	ldw	r2,40(r2)
81133588:	10808b04 	addi	r2,r2,556
8113358c:	d0a09115 	stw	r2,-32188(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
81133590:	e0bffe17 	ldw	r2,-8(fp)
81133594:	10800a17 	ldw	r2,40(r2)
81133598:	d0a09215 	stw	r2,-32184(gp)
		device_pointer = dev;
8113359c:	e0bffe17 	ldw	r2,-8(fp)
811335a0:	d0a09515 	stw	r2,-32172(gp)
		initialized = false;
811335a4:	d0208b15 	stw	zero,-32212(gp)
		is_sd_card_formated_as_FAT16 = false;
811335a8:	d0208c15 	stw	zero,-32208(gp)
		search_data.valid = false;
811335ac:	00a04574 	movhi	r2,33045
811335b0:	1087e904 	addi	r2,r2,8100
811335b4:	10000415 	stw	zero,16(r2)
	}
	return dev;
811335b8:	e0bffe17 	ldw	r2,-8(fp)
}
811335bc:	e037883a 	mov	sp,fp
811335c0:	dfc00117 	ldw	ra,4(sp)
811335c4:	df000017 	ldw	fp,0(sp)
811335c8:	dec00204 	addi	sp,sp,8
811335cc:	f800283a 	ret

811335d0 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
811335d0:	defffd04 	addi	sp,sp,-12
811335d4:	de00012e 	bgeu	sp,et,811335dc <alt_up_sd_card_is_Present+0xc>
811335d8:	003b68fa 	trap	3
811335dc:	df000215 	stw	fp,8(sp)
811335e0:	df000204 	addi	fp,sp,8
    bool result = false;
811335e4:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
811335e8:	d0a09517 	ldw	r2,-32172(gp)
811335ec:	10000826 	beq	r2,zero,81133610 <alt_up_sd_card_is_Present+0x40>
811335f0:	d0a08d17 	ldw	r2,-32204(gp)
811335f4:	1080002b 	ldhuio	r2,0(r2)
811335f8:	10bfffcc 	andi	r2,r2,65535
811335fc:	1080008c 	andi	r2,r2,2
81133600:	10000326 	beq	r2,zero,81133610 <alt_up_sd_card_is_Present+0x40>
    {
        result = true;
81133604:	00800044 	movi	r2,1
81133608:	e0bffe15 	stw	r2,-8(fp)
8113360c:	00001e06 	br	81133688 <alt_up_sd_card_is_Present+0xb8>
    }
	else if (initialized == true)
81133610:	d0a08b17 	ldw	r2,-32212(gp)
81133614:	10800058 	cmpnei	r2,r2,1
81133618:	10001b1e 	bne	r2,zero,81133688 <alt_up_sd_card_is_Present+0xb8>
	{
		int index;

		initialized = false;
8113361c:	d0208b15 	stw	zero,-32212(gp)
		search_data.valid = false;
81133620:	00a04574 	movhi	r2,33045
81133624:	1087e904 	addi	r2,r2,8100
81133628:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
8113362c:	d0208c15 	stw	zero,-32208(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
81133630:	e03fff15 	stw	zero,-4(fp)
81133634:	00001106 	br	8113367c <alt_up_sd_card_is_Present+0xac>
		{
			active_files[index].in_use = false;
81133638:	00a04574 	movhi	r2,33045
8113363c:	10880304 	addi	r2,r2,8204
81133640:	e0ffff17 	ldw	r3,-4(fp)
81133644:	180691ba 	slli	r3,r3,6
81133648:	10c5883a 	add	r2,r2,r3
8113364c:	10800f04 	addi	r2,r2,60
81133650:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
81133654:	00a04574 	movhi	r2,33045
81133658:	10880304 	addi	r2,r2,8204
8113365c:	e0ffff17 	ldw	r3,-4(fp)
81133660:	180691ba 	slli	r3,r3,6
81133664:	10c5883a 	add	r2,r2,r3
81133668:	10800e04 	addi	r2,r2,56
8113366c:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
81133670:	e0bfff17 	ldw	r2,-4(fp)
81133674:	10800044 	addi	r2,r2,1
81133678:	e0bfff15 	stw	r2,-4(fp)
8113367c:	e0bfff17 	ldw	r2,-4(fp)
81133680:	10800510 	cmplti	r2,r2,20
81133684:	103fec1e 	bne	r2,zero,81133638 <__reset+0xfb113638>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
81133688:	e0bffe17 	ldw	r2,-8(fp)
}
8113368c:	e037883a 	mov	sp,fp
81133690:	df000017 	ldw	fp,0(sp)
81133694:	dec00104 	addi	sp,sp,4
81133698:	f800283a 	ret

8113369c <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
8113369c:	defffd04 	addi	sp,sp,-12
811336a0:	de00012e 	bgeu	sp,et,811336a8 <alt_up_sd_card_is_FAT16+0xc>
811336a4:	003b68fa 	trap	3
811336a8:	dfc00215 	stw	ra,8(sp)
811336ac:	df000115 	stw	fp,4(sp)
811336b0:	df000104 	addi	fp,sp,4
	bool result = false;
811336b4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
811336b8:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
811336bc:	10000c26 	beq	r2,zero,811336f0 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
811336c0:	d0a08b17 	ldw	r2,-32212(gp)
811336c4:	1000071e 	bne	r2,zero,811336e4 <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
811336c8:	11318c80 	call	811318c8 <Look_for_FAT16>
811336cc:	d0a08c15 	stw	r2,-32208(gp)
			initialized = is_sd_card_formated_as_FAT16;
811336d0:	d0a08c17 	ldw	r2,-32208(gp)
811336d4:	d0a08b15 	stw	r2,-32212(gp)
			search_data.valid = false;
811336d8:	00a04574 	movhi	r2,33045
811336dc:	1087e904 	addi	r2,r2,8100
811336e0:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
811336e4:	d0a08c17 	ldw	r2,-32208(gp)
811336e8:	e0bfff15 	stw	r2,-4(fp)
811336ec:	00000206 	br	811336f8 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
811336f0:	d0208b15 	stw	zero,-32212(gp)
		is_sd_card_formated_as_FAT16 = false;
811336f4:	d0208c15 	stw	zero,-32208(gp)
	}

	return result;
811336f8:	e0bfff17 	ldw	r2,-4(fp)
}
811336fc:	e037883a 	mov	sp,fp
81133700:	dfc00117 	ldw	ra,4(sp)
81133704:	df000017 	ldw	fp,0(sp)
81133708:	dec00204 	addi	sp,sp,8
8113370c:	f800283a 	ret

81133710 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
81133710:	deffea04 	addi	sp,sp,-88
81133714:	de00012e 	bgeu	sp,et,8113371c <alt_up_sd_card_find_first+0xc>
81133718:	003b68fa 	trap	3
8113371c:	dfc01515 	stw	ra,84(sp)
81133720:	df001415 	stw	fp,80(sp)
81133724:	df001404 	addi	fp,sp,80
81133728:	e13ffe15 	stw	r4,-8(fp)
8113372c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
81133730:	00800084 	movi	r2,2
81133734:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81133738:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
8113373c:	10002426 	beq	r2,zero,811337d0 <alt_up_sd_card_find_first+0xc0>
81133740:	d0a08c17 	ldw	r2,-32208(gp)
81133744:	10002226 	beq	r2,zero,811337d0 <alt_up_sd_card_find_first+0xc0>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
81133748:	e0ffee04 	addi	r3,fp,-72
8113374c:	e0bfed04 	addi	r2,fp,-76
81133750:	180d883a 	mov	r6,r3
81133754:	100b883a 	mov	r5,r2
81133758:	e13ffe17 	ldw	r4,-8(fp)
8113375c:	11320600 	call	81132060 <get_home_directory_cluster_for_file>
81133760:	10001926 	beq	r2,zero,811337c8 <alt_up_sd_card_find_first+0xb8>
		{
			search_data.directory_root_cluster = home_directory_cluster;
81133764:	e0bfed17 	ldw	r2,-76(fp)
81133768:	1007883a 	mov	r3,r2
8113376c:	00a04574 	movhi	r2,33045
81133770:	1087e904 	addi	r2,r2,8100
81133774:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
81133778:	e0bfed17 	ldw	r2,-76(fp)
8113377c:	1007883a 	mov	r3,r2
81133780:	00a04574 	movhi	r2,33045
81133784:	1087e904 	addi	r2,r2,8100
81133788:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
8113378c:	00a04574 	movhi	r2,33045
81133790:	1087e904 	addi	r2,r2,8100
81133794:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
81133798:	00a04574 	movhi	r2,33045
8113379c:	1087e904 	addi	r2,r2,8100
811337a0:	00ffffc4 	movi	r3,-1
811337a4:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
811337a8:	00a04574 	movhi	r2,33045
811337ac:	1087e904 	addi	r2,r2,8100
811337b0:	00c00044 	movi	r3,1
811337b4:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
811337b8:	e13fff17 	ldw	r4,-4(fp)
811337bc:	11337e80 	call	811337e8 <alt_up_sd_card_find_next>
811337c0:	e0bfec0d 	sth	r2,-80(fp)
811337c4:	00000206 	br	811337d0 <alt_up_sd_card_find_first+0xc0>
		}
		else
		{
			result = 1;
811337c8:	00800044 	movi	r2,1
811337cc:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
811337d0:	e0bfec0b 	ldhu	r2,-80(fp)
}
811337d4:	e037883a 	mov	sp,fp
811337d8:	dfc00117 	ldw	ra,4(sp)
811337dc:	df000017 	ldw	fp,0(sp)
811337e0:	dec00204 	addi	sp,sp,8
811337e4:	f800283a 	ret

811337e8 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
811337e8:	deffe404 	addi	sp,sp,-112
811337ec:	de00012e 	bgeu	sp,et,811337f4 <alt_up_sd_card_find_next+0xc>
811337f0:	003b68fa 	trap	3
811337f4:	dfc01b15 	stw	ra,108(sp)
811337f8:	df001a15 	stw	fp,104(sp)
811337fc:	df001a04 	addi	fp,sp,104
81133800:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
81133804:	00800084 	movi	r2,2
81133808:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
8113380c:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
81133810:	1000df26 	beq	r2,zero,81133b90 <alt_up_sd_card_find_next+0x3a8>
81133814:	d0a08c17 	ldw	r2,-32208(gp)
81133818:	1000dd26 	beq	r2,zero,81133b90 <alt_up_sd_card_find_next+0x3a8>
	{
		if (search_data.valid)
8113381c:	00a04574 	movhi	r2,33045
81133820:	1087e904 	addi	r2,r2,8100
81133824:	10800417 	ldw	r2,16(r2)
81133828:	1000d726 	beq	r2,zero,81133b88 <alt_up_sd_card_find_next+0x3a0>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
8113382c:	00a04574 	movhi	r2,33045
81133830:	1087e904 	addi	r2,r2,8100
81133834:	10800117 	ldw	r2,4(r2)
81133838:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
8113383c:	e0bfe717 	ldw	r2,-100(fp)
81133840:	1000561e 	bne	r2,zero,8113399c <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
81133844:	00a04574 	movhi	r2,33045
81133848:	1087ee04 	addi	r2,r2,8120
8113384c:	1080050b 	ldhu	r2,20(r2)
81133850:	10bfffcc 	andi	r2,r2,65535
81133854:	1006917a 	slli	r3,r2,5
81133858:	00a04574 	movhi	r2,33045
8113385c:	1087ee04 	addi	r2,r2,8120
81133860:	1080030b 	ldhu	r2,12(r2)
81133864:	10bfffcc 	andi	r2,r2,65535
81133868:	1885283a 	div	r2,r3,r2
8113386c:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
81133870:	00a04574 	movhi	r2,33045
81133874:	1087e904 	addi	r2,r2,8100
81133878:	10800217 	ldw	r2,8(r2)
8113387c:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
81133880:	00a04574 	movhi	r2,33045
81133884:	1087e904 	addi	r2,r2,8100
81133888:	1080030b 	ldhu	r2,12(r2)
8113388c:	10bfffcc 	andi	r2,r2,65535
81133890:	10a0001c 	xori	r2,r2,32768
81133894:	10a00004 	addi	r2,r2,-32768
81133898:	10800044 	addi	r2,r2,1
8113389c:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
811338a0:	00003606 	br	8113397c <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
811338a4:	00a04574 	movhi	r2,33045
811338a8:	1087ee04 	addi	r2,r2,8120
811338ac:	10c01317 	ldw	r3,76(r2)
811338b0:	e0bfe817 	ldw	r2,-96(fp)
811338b4:	1885883a 	add	r2,r3,r2
811338b8:	1007883a 	mov	r3,r2
811338bc:	d0a09317 	ldw	r2,-32180(gp)
811338c0:	100b883a 	mov	r5,r2
811338c4:	1809883a 	mov	r4,r3
811338c8:	11308f80 	call	811308f8 <Read_Sector_Data>
811338cc:	10002f26 	beq	r2,zero,8113398c <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
811338d0:	00002306 	br	81133960 <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
811338d4:	e0bfe917 	ldw	r2,-92(fp)
811338d8:	1004917a 	slli	r2,r2,5
811338dc:	e13fe817 	ldw	r4,-96(fp)
811338e0:	e0ffef04 	addi	r3,fp,-68
811338e4:	200f883a 	mov	r7,r4
811338e8:	000d883a 	mov	r6,zero
811338ec:	180b883a 	mov	r5,r3
811338f0:	1009883a 	mov	r4,r2
811338f4:	1130d280 	call	81130d28 <Read_File_Record_At_Offset>
811338f8:	10001626 	beq	r2,zero,81133954 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
811338fc:	e0bfef03 	ldbu	r2,-68(fp)
81133900:	10803fcc 	andi	r2,r2,255
81133904:	10001326 	beq	r2,zero,81133954 <alt_up_sd_card_find_next+0x16c>
81133908:	e0bfef03 	ldbu	r2,-68(fp)
8113390c:	10803fcc 	andi	r2,r2,255
81133910:	10803960 	cmpeqi	r2,r2,229
81133914:	10000f1e 	bne	r2,zero,81133954 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
81133918:	e0bfe917 	ldw	r2,-92(fp)
8113391c:	1007883a 	mov	r3,r2
81133920:	00a04574 	movhi	r2,33045
81133924:	1087e904 	addi	r2,r2,8100
81133928:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
8113392c:	e0ffe817 	ldw	r3,-96(fp)
81133930:	00a04574 	movhi	r2,33045
81133934:	1087e904 	addi	r2,r2,8100
81133938:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
8113393c:	e0bfef04 	addi	r2,fp,-68
81133940:	e17fff17 	ldw	r5,-4(fp)
81133944:	1009883a 	mov	r4,r2
81133948:	11333bc0 	call	811333bc <copy_file_record_name_to_string>
									return 0;
8113394c:	0005883a 	mov	r2,zero
81133950:	00009006 	br	81133b94 <alt_up_sd_card_find_next+0x3ac>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
81133954:	e0bfe917 	ldw	r2,-92(fp)
81133958:	10800044 	addi	r2,r2,1
8113395c:	e0bfe915 	stw	r2,-92(fp)
81133960:	e0bfe917 	ldw	r2,-92(fp)
81133964:	10800410 	cmplti	r2,r2,16
81133968:	103fda1e 	bne	r2,zero,811338d4 <__reset+0xfb1138d4>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
8113396c:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
81133970:	e0bfe817 	ldw	r2,-96(fp)
81133974:	10800044 	addi	r2,r2,1
81133978:	e0bfe815 	stw	r2,-96(fp)
8113397c:	e0ffe817 	ldw	r3,-96(fp)
81133980:	e0bfec17 	ldw	r2,-80(fp)
81133984:	18bfc716 	blt	r3,r2,811338a4 <__reset+0xfb1138a4>
81133988:	00000106 	br	81133990 <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
8113398c:	0001883a 	nop
					}
				}
				result = -1;
81133990:	00bfffc4 	movi	r2,-1
81133994:	e0bfe60d 	sth	r2,-104(fp)
81133998:	00007d06 	br	81133b90 <alt_up_sd_card_find_next+0x3a8>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
8113399c:	00a04574 	movhi	r2,33045
811339a0:	1087e904 	addi	r2,r2,8100
811339a4:	1080030b 	ldhu	r2,12(r2)
811339a8:	10bfffcc 	andi	r2,r2,65535
811339ac:	10a0001c 	xori	r2,r2,32768
811339b0:	10a00004 	addi	r2,r2,-32768
811339b4:	10800044 	addi	r2,r2,1
811339b8:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
811339bc:	e0bfe717 	ldw	r2,-100(fp)
811339c0:	10ffff84 	addi	r3,r2,-2
811339c4:	00a04574 	movhi	r2,33045
811339c8:	1087ee04 	addi	r2,r2,8120
811339cc:	10800383 	ldbu	r2,14(r2)
811339d0:	10803fcc 	andi	r2,r2,255
811339d4:	1885383a 	mul	r2,r3,r2
811339d8:	1007883a 	mov	r3,r2
811339dc:	00a04574 	movhi	r2,33045
811339e0:	1087ee04 	addi	r2,r2,8120
811339e4:	10801417 	ldw	r2,80(r2)
811339e8:	1885883a 	add	r2,r3,r2
811339ec:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
811339f0:	00a04574 	movhi	r2,33045
811339f4:	1087e904 	addi	r2,r2,8100
811339f8:	10800217 	ldw	r2,8(r2)
811339fc:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81133a00:	00003806 	br	81133ae4 <alt_up_sd_card_find_next+0x2fc>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
81133a04:	e0ffeb17 	ldw	r3,-84(fp)
81133a08:	e0bfed17 	ldw	r2,-76(fp)
81133a0c:	1885883a 	add	r2,r3,r2
81133a10:	d0e09317 	ldw	r3,-32180(gp)
81133a14:	180b883a 	mov	r5,r3
81133a18:	1009883a 	mov	r4,r2
81133a1c:	11308f80 	call	811308f8 <Read_Sector_Data>
81133a20:	10003726 	beq	r2,zero,81133b00 <alt_up_sd_card_find_next+0x318>
						{        
							for (; file_counter < 16; file_counter++)
81133a24:	00002806 	br	81133ac8 <alt_up_sd_card_find_next+0x2e0>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
81133a28:	e0bfea17 	ldw	r2,-88(fp)
81133a2c:	1004917a 	slli	r2,r2,5
81133a30:	e13fe717 	ldw	r4,-100(fp)
81133a34:	e17feb17 	ldw	r5,-84(fp)
81133a38:	e0ffef04 	addi	r3,fp,-68
81133a3c:	280f883a 	mov	r7,r5
81133a40:	200d883a 	mov	r6,r4
81133a44:	180b883a 	mov	r5,r3
81133a48:	1009883a 	mov	r4,r2
81133a4c:	1130d280 	call	81130d28 <Read_File_Record_At_Offset>
81133a50:	10001a26 	beq	r2,zero,81133abc <alt_up_sd_card_find_next+0x2d4>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
81133a54:	e0bfef03 	ldbu	r2,-68(fp)
81133a58:	10803fcc 	andi	r2,r2,255
81133a5c:	10001726 	beq	r2,zero,81133abc <alt_up_sd_card_find_next+0x2d4>
81133a60:	e0bfef03 	ldbu	r2,-68(fp)
81133a64:	10803fcc 	andi	r2,r2,255
81133a68:	10803960 	cmpeqi	r2,r2,229
81133a6c:	1000131e 	bne	r2,zero,81133abc <alt_up_sd_card_find_next+0x2d4>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
81133a70:	e0ffe717 	ldw	r3,-100(fp)
81133a74:	00a04574 	movhi	r2,33045
81133a78:	1087e904 	addi	r2,r2,8100
81133a7c:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
81133a80:	e0bfea17 	ldw	r2,-88(fp)
81133a84:	1007883a 	mov	r3,r2
81133a88:	00a04574 	movhi	r2,33045
81133a8c:	1087e904 	addi	r2,r2,8100
81133a90:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
81133a94:	e0ffeb17 	ldw	r3,-84(fp)
81133a98:	00a04574 	movhi	r2,33045
81133a9c:	1087e904 	addi	r2,r2,8100
81133aa0:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
81133aa4:	e0bfef04 	addi	r2,fp,-68
81133aa8:	e17fff17 	ldw	r5,-4(fp)
81133aac:	1009883a 	mov	r4,r2
81133ab0:	11333bc0 	call	811333bc <copy_file_record_name_to_string>
										return 0;
81133ab4:	0005883a 	mov	r2,zero
81133ab8:	00003606 	br	81133b94 <alt_up_sd_card_find_next+0x3ac>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
81133abc:	e0bfea17 	ldw	r2,-88(fp)
81133ac0:	10800044 	addi	r2,r2,1
81133ac4:	e0bfea15 	stw	r2,-88(fp)
81133ac8:	e0bfea17 	ldw	r2,-88(fp)
81133acc:	10800410 	cmplti	r2,r2,16
81133ad0:	103fd51e 	bne	r2,zero,81133a28 <__reset+0xfb113a28>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
81133ad4:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
81133ad8:	e0bfeb17 	ldw	r2,-84(fp)
81133adc:	10800044 	addi	r2,r2,1
81133ae0:	e0bfeb15 	stw	r2,-84(fp)
81133ae4:	00a04574 	movhi	r2,33045
81133ae8:	1087ee04 	addi	r2,r2,8120
81133aec:	10800383 	ldbu	r2,14(r2)
81133af0:	10803fcc 	andi	r2,r2,255
81133af4:	e0ffeb17 	ldw	r3,-84(fp)
81133af8:	18bfc216 	blt	r3,r2,81133a04 <__reset+0xfb113a04>
81133afc:	00000106 	br	81133b04 <alt_up_sd_card_find_next+0x31c>
							}
							file_counter = 0;
						}
						else
						{
							break;
81133b00:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
81133b04:	00a04574 	movhi	r2,33045
81133b08:	1087ee04 	addi	r2,r2,8120
81133b0c:	10800383 	ldbu	r2,14(r2)
81133b10:	10803fcc 	andi	r2,r2,255
81133b14:	e0ffeb17 	ldw	r3,-84(fp)
81133b18:	18801716 	blt	r3,r2,81133b78 <alt_up_sd_card_find_next+0x390>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
81133b1c:	e0bfe717 	ldw	r2,-100(fp)
81133b20:	e0ffee04 	addi	r3,fp,-72
81133b24:	180b883a 	mov	r5,r3
81133b28:	1009883a 	mov	r4,r2
81133b2c:	11309d80 	call	811309d8 <get_cluster_flag>
81133b30:	10000f26 	beq	r2,zero,81133b70 <alt_up_sd_card_find_next+0x388>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
81133b34:	e0bfee0b 	ldhu	r2,-72(fp)
81133b38:	10bfffcc 	andi	r2,r2,65535
81133b3c:	10fffe0c 	andi	r3,r2,65528
81133b40:	00bffe14 	movui	r2,65528
81133b44:	1880051e 	bne	r3,r2,81133b5c <alt_up_sd_card_find_next+0x374>
							{
								result = -1;
81133b48:	00bfffc4 	movi	r2,-1
81133b4c:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
81133b50:	00a04574 	movhi	r2,33045
81133b54:	1087e904 	addi	r2,r2,8100
81133b58:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
81133b5c:	e0bfee0b 	ldhu	r2,-72(fp)
81133b60:	10bfffcc 	andi	r2,r2,65535
81133b64:	10bffe0c 	andi	r2,r2,65528
81133b68:	e0bfe715 	stw	r2,-100(fp)
81133b6c:	00000206 	br	81133b78 <alt_up_sd_card_find_next+0x390>
						}
						else
						{
							// Error encountered.                 
							result = -1;
81133b70:	00bfffc4 	movi	r2,-1
81133b74:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
81133b78:	e0bfe717 	ldw	r2,-100(fp)
81133b7c:	00fffdd4 	movui	r3,65527
81133b80:	18bf8e0e 	bge	r3,r2,811339bc <__reset+0xfb1139bc>
81133b84:	00000206 	br	81133b90 <alt_up_sd_card_find_next+0x3a8>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
81133b88:	008000c4 	movi	r2,3
81133b8c:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
81133b90:	e0bfe60b 	ldhu	r2,-104(fp)
}
81133b94:	e037883a 	mov	sp,fp
81133b98:	dfc00117 	ldw	ra,4(sp)
81133b9c:	df000017 	ldw	fp,0(sp)
81133ba0:	dec00204 	addi	sp,sp,8
81133ba4:	f800283a 	ret

81133ba8 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
81133ba8:	deffe904 	addi	sp,sp,-92
81133bac:	de00012e 	bgeu	sp,et,81133bb4 <alt_up_sd_card_fopen+0xc>
81133bb0:	003b68fa 	trap	3
81133bb4:	dfc01615 	stw	ra,88(sp)
81133bb8:	df001515 	stw	fp,84(sp)
81133bbc:	df001504 	addi	fp,sp,84
81133bc0:	e13ffe15 	stw	r4,-8(fp)
81133bc4:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
81133bc8:	00bfffc4 	movi	r2,-1
81133bcc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81133bd0:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
81133bd4:	1000cf26 	beq	r2,zero,81133f14 <alt_up_sd_card_fopen+0x36c>
81133bd8:	d0a08c17 	ldw	r2,-32208(gp)
81133bdc:	1000cd26 	beq	r2,zero,81133f14 <alt_up_sd_card_fopen+0x36c>
	{
        unsigned int home_directory_cluster = 0;
81133be0:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
81133be4:	e13ffe17 	ldw	r4,-8(fp)
81133be8:	11319bc0 	call	811319bc <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
81133bec:	e13ffe17 	ldw	r4,-8(fp)
81133bf0:	1131a880 	call	81131a88 <check_file_name_for_FAT16_compliance>
81133bf4:	1000c726 	beq	r2,zero,81133f14 <alt_up_sd_card_fopen+0x36c>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
81133bf8:	e0ffee04 	addi	r3,fp,-72
81133bfc:	e0bfed04 	addi	r2,fp,-76
81133c00:	180d883a 	mov	r6,r3
81133c04:	100b883a 	mov	r5,r2
81133c08:	e13ffe17 	ldw	r4,-8(fp)
81133c0c:	11320600 	call	81132060 <get_home_directory_cluster_for_file>
81133c10:	1000021e 	bne	r2,zero,81133c1c <alt_up_sd_card_fopen+0x74>
            {
                return file_record_index;
81133c14:	e0bfeb0b 	ldhu	r2,-84(fp)
81133c18:	0000bf06 	br	81133f18 <alt_up_sd_card_fopen+0x370>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81133c1c:	e03fec15 	stw	zero,-80(fp)
81133c20:	00000e06 	br	81133c5c <alt_up_sd_card_fopen+0xb4>
    		{
    			if (active_files[index].in_use == false)
81133c24:	00a04574 	movhi	r2,33045
81133c28:	10880304 	addi	r2,r2,8204
81133c2c:	e0ffec17 	ldw	r3,-80(fp)
81133c30:	180691ba 	slli	r3,r3,6
81133c34:	10c5883a 	add	r2,r2,r3
81133c38:	10800f04 	addi	r2,r2,60
81133c3c:	10800017 	ldw	r2,0(r2)
81133c40:	1000031e 	bne	r2,zero,81133c50 <alt_up_sd_card_fopen+0xa8>
    			{
    				file_record_index = index;
81133c44:	e0bfec17 	ldw	r2,-80(fp)
81133c48:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
81133c4c:	00000606 	br	81133c68 <alt_up_sd_card_fopen+0xc0>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
81133c50:	e0bfec17 	ldw	r2,-80(fp)
81133c54:	10800044 	addi	r2,r2,1
81133c58:	e0bfec15 	stw	r2,-80(fp)
81133c5c:	e0bfec17 	ldw	r2,-80(fp)
81133c60:	10800510 	cmplti	r2,r2,20
81133c64:	103fef1e 	bne	r2,zero,81133c24 <__reset+0xfb113c24>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
81133c68:	e0bfeb0f 	ldh	r2,-84(fp)
81133c6c:	1000a916 	blt	r2,zero,81133f14 <alt_up_sd_card_fopen+0x36c>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
81133c70:	e0bfed17 	ldw	r2,-76(fp)
81133c74:	1009883a 	mov	r4,r2
81133c78:	e0bfeb0f 	ldh	r2,-84(fp)
81133c7c:	100691ba 	slli	r3,r2,6
81133c80:	00a04574 	movhi	r2,33045
81133c84:	10880304 	addi	r2,r2,8204
81133c88:	1885883a 	add	r2,r3,r2
81133c8c:	100d883a 	mov	r6,r2
81133c90:	e17ffe17 	ldw	r5,-8(fp)
81133c94:	11325a00 	call	811325a0 <find_file_in_directory>
81133c98:	10007b26 	beq	r2,zero,81133e88 <alt_up_sd_card_fopen+0x2e0>
                {
                    if (create)
81133c9c:	e0bfff17 	ldw	r2,-4(fp)
81133ca0:	10000226 	beq	r2,zero,81133cac <alt_up_sd_card_fopen+0x104>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
81133ca4:	00bfffc4 	movi	r2,-1
81133ca8:	00009b06 	br	81133f18 <alt_up_sd_card_fopen+0x370>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
81133cac:	e13feb0f 	ldh	r4,-84(fp)
81133cb0:	e0ffeb0f 	ldh	r3,-84(fp)
81133cb4:	00a04574 	movhi	r2,33045
81133cb8:	10880304 	addi	r2,r2,8204
81133cbc:	180691ba 	slli	r3,r3,6
81133cc0:	10c5883a 	add	r2,r2,r3
81133cc4:	10800584 	addi	r2,r2,22
81133cc8:	1080000b 	ldhu	r2,0(r2)
81133ccc:	10ffffcc 	andi	r3,r2,65535
81133cd0:	00a04574 	movhi	r2,33045
81133cd4:	10880304 	addi	r2,r2,8204
81133cd8:	200891ba 	slli	r4,r4,6
81133cdc:	1105883a 	add	r2,r2,r4
81133ce0:	10800704 	addi	r2,r2,28
81133ce4:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
81133ce8:	e0ffeb0f 	ldh	r3,-84(fp)
81133cec:	00a04574 	movhi	r2,33045
81133cf0:	10880304 	addi	r2,r2,8204
81133cf4:	180691ba 	slli	r3,r3,6
81133cf8:	10c5883a 	add	r2,r2,r3
81133cfc:	10800804 	addi	r2,r2,32
81133d00:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
81133d04:	e0ffeb0f 	ldh	r3,-84(fp)
81133d08:	00a04574 	movhi	r2,33045
81133d0c:	10880304 	addi	r2,r2,8204
81133d10:	180691ba 	slli	r3,r3,6
81133d14:	10c5883a 	add	r2,r2,r3
81133d18:	10800904 	addi	r2,r2,36
81133d1c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
81133d20:	e0ffeb0f 	ldh	r3,-84(fp)
81133d24:	00a04574 	movhi	r2,33045
81133d28:	10880304 	addi	r2,r2,8204
81133d2c:	180691ba 	slli	r3,r3,6
81133d30:	10c5883a 	add	r2,r2,r3
81133d34:	10800f04 	addi	r2,r2,60
81133d38:	00c00044 	movi	r3,1
81133d3c:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
81133d40:	e0ffeb0f 	ldh	r3,-84(fp)
81133d44:	00a04574 	movhi	r2,33045
81133d48:	10880304 	addi	r2,r2,8204
81133d4c:	180691ba 	slli	r3,r3,6
81133d50:	10c5883a 	add	r2,r2,r3
81133d54:	10800e04 	addi	r2,r2,56
81133d58:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81133d5c:	e03fec15 	stw	zero,-80(fp)
81133d60:	00004506 	br	81133e78 <alt_up_sd_card_fopen+0x2d0>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
81133d64:	e0ffeb0f 	ldh	r3,-84(fp)
81133d68:	e0bfec17 	ldw	r2,-80(fp)
81133d6c:	18803f26 	beq	r3,r2,81133e6c <alt_up_sd_card_fopen+0x2c4>
81133d70:	00a04574 	movhi	r2,33045
81133d74:	10880304 	addi	r2,r2,8204
81133d78:	e0ffec17 	ldw	r3,-80(fp)
81133d7c:	180691ba 	slli	r3,r3,6
81133d80:	10c5883a 	add	r2,r2,r3
81133d84:	10800f04 	addi	r2,r2,60
81133d88:	10800017 	ldw	r2,0(r2)
81133d8c:	10800058 	cmpnei	r2,r2,1
81133d90:	1000361e 	bne	r2,zero,81133e6c <alt_up_sd_card_fopen+0x2c4>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81133d94:	e0ffeb0f 	ldh	r3,-84(fp)
81133d98:	00a04574 	movhi	r2,33045
81133d9c:	10880304 	addi	r2,r2,8204
81133da0:	180691ba 	slli	r3,r3,6
81133da4:	10c5883a 	add	r2,r2,r3
81133da8:	10800a04 	addi	r2,r2,40
81133dac:	10c00017 	ldw	r3,0(r2)
81133db0:	00a04574 	movhi	r2,33045
81133db4:	10880304 	addi	r2,r2,8204
81133db8:	e13fec17 	ldw	r4,-80(fp)
81133dbc:	200891ba 	slli	r4,r4,6
81133dc0:	1105883a 	add	r2,r2,r4
81133dc4:	10800a04 	addi	r2,r2,40
81133dc8:	10800017 	ldw	r2,0(r2)
81133dcc:	1880271e 	bne	r3,r2,81133e6c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81133dd0:	e0ffeb0f 	ldh	r3,-84(fp)
81133dd4:	00a04574 	movhi	r2,33045
81133dd8:	10880304 	addi	r2,r2,8204
81133ddc:	180691ba 	slli	r3,r3,6
81133de0:	10c5883a 	add	r2,r2,r3
81133de4:	10800b04 	addi	r2,r2,44
81133de8:	10c00017 	ldw	r3,0(r2)
81133dec:	00a04574 	movhi	r2,33045
81133df0:	10880304 	addi	r2,r2,8204
81133df4:	e13fec17 	ldw	r4,-80(fp)
81133df8:	200891ba 	slli	r4,r4,6
81133dfc:	1105883a 	add	r2,r2,r4
81133e00:	10800b04 	addi	r2,r2,44
81133e04:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
81133e08:	1880181e 	bne	r3,r2,81133e6c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
81133e0c:	e0ffeb0f 	ldh	r3,-84(fp)
81133e10:	00a04574 	movhi	r2,33045
81133e14:	10880304 	addi	r2,r2,8204
81133e18:	180691ba 	slli	r3,r3,6
81133e1c:	10c5883a 	add	r2,r2,r3
81133e20:	10800c04 	addi	r2,r2,48
81133e24:	1100000b 	ldhu	r4,0(r2)
81133e28:	00a04574 	movhi	r2,33045
81133e2c:	10880304 	addi	r2,r2,8204
81133e30:	e0ffec17 	ldw	r3,-80(fp)
81133e34:	180691ba 	slli	r3,r3,6
81133e38:	10c5883a 	add	r2,r2,r3
81133e3c:	10800c04 	addi	r2,r2,48
81133e40:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
81133e44:	20ffffcc 	andi	r3,r4,65535
81133e48:	18e0001c 	xori	r3,r3,32768
81133e4c:	18e00004 	addi	r3,r3,-32768
81133e50:	10bfffcc 	andi	r2,r2,65535
81133e54:	10a0001c 	xori	r2,r2,32768
81133e58:	10a00004 	addi	r2,r2,-32768
81133e5c:	1880031e 	bne	r3,r2,81133e6c <alt_up_sd_card_fopen+0x2c4>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
81133e60:	00bfff84 	movi	r2,-2
81133e64:	e0bfeb0d 	sth	r2,-84(fp)
								break;
81133e68:	00002a06 	br	81133f14 <alt_up_sd_card_fopen+0x36c>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
81133e6c:	e0bfec17 	ldw	r2,-80(fp)
81133e70:	10800044 	addi	r2,r2,1
81133e74:	e0bfec15 	stw	r2,-80(fp)
81133e78:	e0bfec17 	ldw	r2,-80(fp)
81133e7c:	10800510 	cmplti	r2,r2,20
81133e80:	103fb81e 	bne	r2,zero,81133d64 <__reset+0xfb113d64>
81133e84:	00002306 	br	81133f14 <alt_up_sd_card_fopen+0x36c>
							}
						}
					}

                }
                else if (create)
81133e88:	e0bfff17 	ldw	r2,-4(fp)
81133e8c:	10001f26 	beq	r2,zero,81133f0c <alt_up_sd_card_fopen+0x364>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
81133e90:	e0bfeb0f 	ldh	r2,-84(fp)
81133e94:	100691ba 	slli	r3,r2,6
81133e98:	00a04574 	movhi	r2,33045
81133e9c:	10880304 	addi	r2,r2,8204
81133ea0:	1885883a 	add	r2,r3,r2
81133ea4:	e0ffee04 	addi	r3,fp,-72
81133ea8:	180d883a 	mov	r6,r3
81133eac:	100b883a 	mov	r5,r2
81133eb0:	e13ffe17 	ldw	r4,-8(fp)
81133eb4:	11330ec0 	call	811330ec <create_file>
81133eb8:	10001126 	beq	r2,zero,81133f00 <alt_up_sd_card_fopen+0x358>
                    {
                        active_files[file_record_index].in_use = true;
81133ebc:	e0ffeb0f 	ldh	r3,-84(fp)
81133ec0:	00a04574 	movhi	r2,33045
81133ec4:	10880304 	addi	r2,r2,8204
81133ec8:	180691ba 	slli	r3,r3,6
81133ecc:	10c5883a 	add	r2,r2,r3
81133ed0:	10800f04 	addi	r2,r2,60
81133ed4:	00c00044 	movi	r3,1
81133ed8:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
81133edc:	e0ffeb0f 	ldh	r3,-84(fp)
81133ee0:	00a04574 	movhi	r2,33045
81133ee4:	10880304 	addi	r2,r2,8204
81133ee8:	180691ba 	slli	r3,r3,6
81133eec:	10c5883a 	add	r2,r2,r3
81133ef0:	10800e04 	addi	r2,r2,56
81133ef4:	00c00044 	movi	r3,1
81133ef8:	10c00015 	stw	r3,0(r2)
81133efc:	00000506 	br	81133f14 <alt_up_sd_card_fopen+0x36c>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
81133f00:	00bfffc4 	movi	r2,-1
81133f04:	e0bfeb0d 	sth	r2,-84(fp)
81133f08:	00000206 	br	81133f14 <alt_up_sd_card_fopen+0x36c>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
81133f0c:	00bfffc4 	movi	r2,-1
81133f10:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
81133f14:	e0bfeb0b 	ldhu	r2,-84(fp)
}
81133f18:	e037883a 	mov	sp,fp
81133f1c:	dfc00117 	ldw	ra,4(sp)
81133f20:	df000017 	ldw	fp,0(sp)
81133f24:	dec00204 	addi	sp,sp,8
81133f28:	f800283a 	ret

81133f2c <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81133f2c:	defffd04 	addi	sp,sp,-12
81133f30:	de00012e 	bgeu	sp,et,81133f38 <alt_up_sd_card_set_attributes+0xc>
81133f34:	003b68fa 	trap	3
81133f38:	df000215 	stw	fp,8(sp)
81133f3c:	df000204 	addi	fp,sp,8
81133f40:	2007883a 	mov	r3,r4
81133f44:	2805883a 	mov	r2,r5
81133f48:	e0fffe0d 	sth	r3,-8(fp)
81133f4c:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81133f50:	e0bffe0f 	ldh	r2,-8(fp)
81133f54:	10001416 	blt	r2,zero,81133fa8 <alt_up_sd_card_set_attributes+0x7c>
81133f58:	e0bffe0f 	ldh	r2,-8(fp)
81133f5c:	10800508 	cmpgei	r2,r2,20
81133f60:	1000111e 	bne	r2,zero,81133fa8 <alt_up_sd_card_set_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81133f64:	e0fffe0f 	ldh	r3,-8(fp)
81133f68:	00a04574 	movhi	r2,33045
81133f6c:	10880304 	addi	r2,r2,8204
81133f70:	180691ba 	slli	r3,r3,6
81133f74:	10c5883a 	add	r2,r2,r3
81133f78:	10800f04 	addi	r2,r2,60
81133f7c:	10800017 	ldw	r2,0(r2)
81133f80:	10000926 	beq	r2,zero,81133fa8 <alt_up_sd_card_set_attributes+0x7c>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
81133f84:	e0fffe0f 	ldh	r3,-8(fp)
81133f88:	e0bfff0b 	ldhu	r2,-4(fp)
81133f8c:	1009883a 	mov	r4,r2
81133f90:	00a04574 	movhi	r2,33045
81133f94:	10880304 	addi	r2,r2,8204
81133f98:	180691ba 	slli	r3,r3,6
81133f9c:	10c5883a 	add	r2,r2,r3
81133fa0:	108002c4 	addi	r2,r2,11
81133fa4:	11000005 	stb	r4,0(r2)
        }
    }
}
81133fa8:	0001883a 	nop
81133fac:	e037883a 	mov	sp,fp
81133fb0:	df000017 	ldw	fp,0(sp)
81133fb4:	dec00104 	addi	sp,sp,4
81133fb8:	f800283a 	ret

81133fbc <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
81133fbc:	defffd04 	addi	sp,sp,-12
81133fc0:	de00012e 	bgeu	sp,et,81133fc8 <alt_up_sd_card_get_attributes+0xc>
81133fc4:	003b68fa 	trap	3
81133fc8:	df000215 	stw	fp,8(sp)
81133fcc:	df000204 	addi	fp,sp,8
81133fd0:	2005883a 	mov	r2,r4
81133fd4:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
81133fd8:	00bfffc4 	movi	r2,-1
81133fdc:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81133fe0:	e0bfff0f 	ldh	r2,-4(fp)
81133fe4:	10001416 	blt	r2,zero,81134038 <alt_up_sd_card_get_attributes+0x7c>
81133fe8:	e0bfff0f 	ldh	r2,-4(fp)
81133fec:	10800508 	cmpgei	r2,r2,20
81133ff0:	1000111e 	bne	r2,zero,81134038 <alt_up_sd_card_get_attributes+0x7c>
    {
        if (active_files[file_handle].in_use)
81133ff4:	e0ffff0f 	ldh	r3,-4(fp)
81133ff8:	00a04574 	movhi	r2,33045
81133ffc:	10880304 	addi	r2,r2,8204
81134000:	180691ba 	slli	r3,r3,6
81134004:	10c5883a 	add	r2,r2,r3
81134008:	10800f04 	addi	r2,r2,60
8113400c:	10800017 	ldw	r2,0(r2)
81134010:	10000926 	beq	r2,zero,81134038 <alt_up_sd_card_get_attributes+0x7c>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
81134014:	e0ffff0f 	ldh	r3,-4(fp)
81134018:	00a04574 	movhi	r2,33045
8113401c:	10880304 	addi	r2,r2,8204
81134020:	180691ba 	slli	r3,r3,6
81134024:	10c5883a 	add	r2,r2,r3
81134028:	108002c4 	addi	r2,r2,11
8113402c:	10800003 	ldbu	r2,0(r2)
81134030:	10803fcc 	andi	r2,r2,255
81134034:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
81134038:	e0bffe0b 	ldhu	r2,-8(fp)
}
8113403c:	e037883a 	mov	sp,fp
81134040:	df000017 	ldw	fp,0(sp)
81134044:	dec00104 	addi	sp,sp,4
81134048:	f800283a 	ret

8113404c <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
8113404c:	defffa04 	addi	sp,sp,-24
81134050:	de00012e 	bgeu	sp,et,81134058 <alt_up_sd_card_read+0xc>
81134054:	003b68fa 	trap	3
81134058:	dfc00515 	stw	ra,20(sp)
8113405c:	df000415 	stw	fp,16(sp)
81134060:	df000404 	addi	fp,sp,16
81134064:	2005883a 	mov	r2,r4
81134068:	e0bfff0d 	sth	r2,-4(fp)
    short int ch = -1;
8113406c:	00bfffc4 	movi	r2,-1
81134070:	e0bffc0d 	sth	r2,-16(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
81134074:	e0bfff0f 	ldh	r2,-4(fp)
81134078:	1000ce16 	blt	r2,zero,811343b4 <alt_up_sd_card_read+0x368>
8113407c:	e0bfff0f 	ldh	r2,-4(fp)
81134080:	10800508 	cmpgei	r2,r2,20
81134084:	1000cb1e 	bne	r2,zero,811343b4 <alt_up_sd_card_read+0x368>
    {
        if (active_files[file_handle].in_use)
81134088:	e0ffff0f 	ldh	r3,-4(fp)
8113408c:	00a04574 	movhi	r2,33045
81134090:	10880304 	addi	r2,r2,8204
81134094:	180691ba 	slli	r3,r3,6
81134098:	10c5883a 	add	r2,r2,r3
8113409c:	10800f04 	addi	r2,r2,60
811340a0:	10800017 	ldw	r2,0(r2)
811340a4:	1000c326 	beq	r2,zero,811343b4 <alt_up_sd_card_read+0x368>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
811340a8:	e0ffff0f 	ldh	r3,-4(fp)
811340ac:	00a04574 	movhi	r2,33045
811340b0:	10880304 	addi	r2,r2,8204
811340b4:	180691ba 	slli	r3,r3,6
811340b8:	10c5883a 	add	r2,r2,r3
811340bc:	10800904 	addi	r2,r2,36
811340c0:	10c00017 	ldw	r3,0(r2)
811340c4:	e13fff0f 	ldh	r4,-4(fp)
811340c8:	00a04574 	movhi	r2,33045
811340cc:	10880304 	addi	r2,r2,8204
811340d0:	200891ba 	slli	r4,r4,6
811340d4:	1105883a 	add	r2,r2,r4
811340d8:	10800604 	addi	r2,r2,24
811340dc:	10800017 	ldw	r2,0(r2)
811340e0:	1880b42e 	bgeu	r3,r2,811343b4 <alt_up_sd_card_read+0x368>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811340e4:	00a04574 	movhi	r2,33045
811340e8:	1087ee04 	addi	r2,r2,8120
811340ec:	10c01417 	ldw	r3,80(r2)
811340f0:	e13fff0f 	ldh	r4,-4(fp)
811340f4:	00a04574 	movhi	r2,33045
811340f8:	10880304 	addi	r2,r2,8204
811340fc:	200891ba 	slli	r4,r4,6
81134100:	1105883a 	add	r2,r2,r4
81134104:	10800704 	addi	r2,r2,28
81134108:	10800017 	ldw	r2,0(r2)
8113410c:	113fff84 	addi	r4,r2,-2
81134110:	00a04574 	movhi	r2,33045
81134114:	1087ee04 	addi	r2,r2,8120
81134118:	10800383 	ldbu	r2,14(r2)
8113411c:	10803fcc 	andi	r2,r2,255
81134120:	2085383a 	mul	r2,r4,r2
81134124:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;
81134128:	e13fff0f 	ldh	r4,-4(fp)
8113412c:	00a04574 	movhi	r2,33045
81134130:	10880304 	addi	r2,r2,8204
81134134:	200891ba 	slli	r4,r4,6
81134138:	1105883a 	add	r2,r2,r4
8113413c:	10800804 	addi	r2,r2,32
81134140:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81134144:	1885883a 	add	r2,r3,r2
81134148:	e0bffd15 	stw	r2,-12(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
8113414c:	e0ffff0f 	ldh	r3,-4(fp)
81134150:	00a04574 	movhi	r2,33045
81134154:	10880304 	addi	r2,r2,8204
81134158:	180691ba 	slli	r3,r3,6
8113415c:	10c5883a 	add	r2,r2,r3
81134160:	10800904 	addi	r2,r2,36
81134164:	10800017 	ldw	r2,0(r2)
81134168:	10006826 	beq	r2,zero,8113430c <alt_up_sd_card_read+0x2c0>
8113416c:	e0ffff0f 	ldh	r3,-4(fp)
81134170:	00a04574 	movhi	r2,33045
81134174:	10880304 	addi	r2,r2,8204
81134178:	180691ba 	slli	r3,r3,6
8113417c:	10c5883a 	add	r2,r2,r3
81134180:	10800904 	addi	r2,r2,36
81134184:	10800017 	ldw	r2,0(r2)
81134188:	10807fcc 	andi	r2,r2,511
8113418c:	10005f1e 	bne	r2,zero,8113430c <alt_up_sd_card_read+0x2c0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81134190:	e0ffff0f 	ldh	r3,-4(fp)
81134194:	00a04574 	movhi	r2,33045
81134198:	10880304 	addi	r2,r2,8204
8113419c:	180691ba 	slli	r3,r3,6
811341a0:	10c5883a 	add	r2,r2,r3
811341a4:	10800804 	addi	r2,r2,32
811341a8:	10c00017 	ldw	r3,0(r2)
811341ac:	00a04574 	movhi	r2,33045
811341b0:	1087ee04 	addi	r2,r2,8120
811341b4:	10800383 	ldbu	r2,14(r2)
811341b8:	10803fcc 	andi	r2,r2,255
811341bc:	10bfffc4 	addi	r2,r2,-1
811341c0:	1880401e 	bne	r3,r2,811342c4 <alt_up_sd_card_read+0x278>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
811341c4:	e0ffff0f 	ldh	r3,-4(fp)
811341c8:	00a04574 	movhi	r2,33045
811341cc:	10880304 	addi	r2,r2,8204
811341d0:	180691ba 	slli	r3,r3,6
811341d4:	10c5883a 	add	r2,r2,r3
811341d8:	10800704 	addi	r2,r2,28
811341dc:	10800017 	ldw	r2,0(r2)
811341e0:	e0fffe04 	addi	r3,fp,-8
811341e4:	180b883a 	mov	r5,r3
811341e8:	1009883a 	mov	r4,r2
811341ec:	11309d80 	call	811309d8 <get_cluster_flag>
811341f0:	10003226 	beq	r2,zero,811342bc <alt_up_sd_card_read+0x270>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
811341f4:	e0bffe0b 	ldhu	r2,-8(fp)
811341f8:	10bfffcc 	andi	r2,r2,65535
811341fc:	10fffe0c 	andi	r3,r2,65528
81134200:	00bffe14 	movui	r2,65528
81134204:	1880021e 	bne	r3,r2,81134210 <alt_up_sd_card_read+0x1c4>
                            {
                                /* End of file */
                                return -1;
81134208:	00bfffc4 	movi	r2,-1
8113420c:	00006a06 	br	811343b8 <alt_up_sd_card_read+0x36c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
81134210:	e13fff0f 	ldh	r4,-4(fp)
81134214:	e0bffe0b 	ldhu	r2,-8(fp)
81134218:	10ffffcc 	andi	r3,r2,65535
8113421c:	00a04574 	movhi	r2,33045
81134220:	10880304 	addi	r2,r2,8204
81134224:	200891ba 	slli	r4,r4,6
81134228:	1105883a 	add	r2,r2,r4
8113422c:	10800704 	addi	r2,r2,28
81134230:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
81134234:	e0ffff0f 	ldh	r3,-4(fp)
81134238:	00a04574 	movhi	r2,33045
8113423c:	10880304 	addi	r2,r2,8204
81134240:	180691ba 	slli	r3,r3,6
81134244:	10c5883a 	add	r2,r2,r3
81134248:	10800804 	addi	r2,r2,32
8113424c:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81134250:	00a04574 	movhi	r2,33045
81134254:	1087ee04 	addi	r2,r2,8120
81134258:	10c01417 	ldw	r3,80(r2)
8113425c:	e13fff0f 	ldh	r4,-4(fp)
81134260:	00a04574 	movhi	r2,33045
81134264:	10880304 	addi	r2,r2,8204
81134268:	200891ba 	slli	r4,r4,6
8113426c:	1105883a 	add	r2,r2,r4
81134270:	10800704 	addi	r2,r2,28
81134274:	10800017 	ldw	r2,0(r2)
81134278:	113fff84 	addi	r4,r2,-2
8113427c:	00a04574 	movhi	r2,33045
81134280:	1087ee04 	addi	r2,r2,8120
81134284:	10800383 	ldbu	r2,14(r2)
81134288:	10803fcc 	andi	r2,r2,255
8113428c:	2085383a 	mul	r2,r4,r2
81134290:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
81134294:	e13fff0f 	ldh	r4,-4(fp)
81134298:	00a04574 	movhi	r2,33045
8113429c:	10880304 	addi	r2,r2,8204
811342a0:	200891ba 	slli	r4,r4,6
811342a4:	1105883a 	add	r2,r2,r4
811342a8:	10800804 	addi	r2,r2,32
811342ac:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811342b0:	1885883a 	add	r2,r3,r2
811342b4:	e0bffd15 	stw	r2,-12(fp)
811342b8:	00001406 	br	8113430c <alt_up_sd_card_read+0x2c0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
811342bc:	00bfff84 	movi	r2,-2
811342c0:	00003d06 	br	811343b8 <alt_up_sd_card_read+0x36c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
811342c4:	e13fff0f 	ldh	r4,-4(fp)
811342c8:	e0ffff0f 	ldh	r3,-4(fp)
811342cc:	00a04574 	movhi	r2,33045
811342d0:	10880304 	addi	r2,r2,8204
811342d4:	180691ba 	slli	r3,r3,6
811342d8:	10c5883a 	add	r2,r2,r3
811342dc:	10800804 	addi	r2,r2,32
811342e0:	10800017 	ldw	r2,0(r2)
811342e4:	10c00044 	addi	r3,r2,1
811342e8:	00a04574 	movhi	r2,33045
811342ec:	10880304 	addi	r2,r2,8204
811342f0:	200891ba 	slli	r4,r4,6
811342f4:	1105883a 	add	r2,r2,r4
811342f8:	10800804 	addi	r2,r2,32
811342fc:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81134300:	e0bffd17 	ldw	r2,-12(fp)
81134304:	10800044 	addi	r2,r2,1
81134308:	e0bffd15 	stw	r2,-12(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
8113430c:	d0e09317 	ldw	r3,-32180(gp)
81134310:	e0bffd17 	ldw	r2,-12(fp)
81134314:	1885883a 	add	r2,r3,r2
81134318:	1007883a 	mov	r3,r2
8113431c:	d0a09717 	ldw	r2,-32164(gp)
81134320:	18800726 	beq	r3,r2,81134340 <alt_up_sd_card_read+0x2f4>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
81134324:	d0a09317 	ldw	r2,-32180(gp)
81134328:	100b883a 	mov	r5,r2
8113432c:	e13ffd17 	ldw	r4,-12(fp)
81134330:	11308f80 	call	811308f8 <Read_Sector_Data>
81134334:	1000021e 	bne	r2,zero,81134340 <alt_up_sd_card_read+0x2f4>
                    {
						return -2;
81134338:	00bfff84 	movi	r2,-2
8113433c:	00001e06 	br	811343b8 <alt_up_sd_card_read+0x36c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
81134340:	d0e09217 	ldw	r3,-32184(gp)
81134344:	e13fff0f 	ldh	r4,-4(fp)
81134348:	00a04574 	movhi	r2,33045
8113434c:	10880304 	addi	r2,r2,8204
81134350:	200891ba 	slli	r4,r4,6
81134354:	1105883a 	add	r2,r2,r4
81134358:	10800904 	addi	r2,r2,36
8113435c:	10800017 	ldw	r2,0(r2)
81134360:	10807fcc 	andi	r2,r2,511
81134364:	1885883a 	add	r2,r3,r2
81134368:	10800023 	ldbuio	r2,0(r2)
8113436c:	10803fcc 	andi	r2,r2,255
81134370:	10803fcc 	andi	r2,r2,255
81134374:	e0bffc0d 	sth	r2,-16(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
81134378:	e13fff0f 	ldh	r4,-4(fp)
8113437c:	e0ffff0f 	ldh	r3,-4(fp)
81134380:	00a04574 	movhi	r2,33045
81134384:	10880304 	addi	r2,r2,8204
81134388:	180691ba 	slli	r3,r3,6
8113438c:	10c5883a 	add	r2,r2,r3
81134390:	10800904 	addi	r2,r2,36
81134394:	10800017 	ldw	r2,0(r2)
81134398:	10c00044 	addi	r3,r2,1
8113439c:	00a04574 	movhi	r2,33045
811343a0:	10880304 	addi	r2,r2,8204
811343a4:	200891ba 	slli	r4,r4,6
811343a8:	1105883a 	add	r2,r2,r4
811343ac:	10800904 	addi	r2,r2,36
811343b0:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
811343b4:	e0bffc0b 	ldhu	r2,-16(fp)
}
811343b8:	e037883a 	mov	sp,fp
811343bc:	dfc00117 	ldw	ra,4(sp)
811343c0:	df000017 	ldw	fp,0(sp)
811343c4:	dec00204 	addi	sp,sp,8
811343c8:	f800283a 	ret

811343cc <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
811343cc:	defff804 	addi	sp,sp,-32
811343d0:	de00012e 	bgeu	sp,et,811343d8 <alt_up_sd_card_write+0xc>
811343d4:	003b68fa 	trap	3
811343d8:	dfc00715 	stw	ra,28(sp)
811343dc:	df000615 	stw	fp,24(sp)
811343e0:	df000604 	addi	fp,sp,24
811343e4:	2007883a 	mov	r3,r4
811343e8:	2805883a 	mov	r2,r5
811343ec:	e0fffe0d 	sth	r3,-8(fp)
811343f0:	e0bfff05 	stb	r2,-4(fp)
    bool result = false;
811343f4:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
811343f8:	e0bffe0f 	ldh	r2,-8(fp)
811343fc:	10017716 	blt	r2,zero,811349dc <alt_up_sd_card_write+0x610>
81134400:	e0bffe0f 	ldh	r2,-8(fp)
81134404:	10800508 	cmpgei	r2,r2,20
81134408:	1001741e 	bne	r2,zero,811349dc <alt_up_sd_card_write+0x610>
    {
        if (active_files[file_handle].in_use)
8113440c:	e0fffe0f 	ldh	r3,-8(fp)
81134410:	00a04574 	movhi	r2,33045
81134414:	10880304 	addi	r2,r2,8204
81134418:	180691ba 	slli	r3,r3,6
8113441c:	10c5883a 	add	r2,r2,r3
81134420:	10800f04 	addi	r2,r2,60
81134424:	10800017 	ldw	r2,0(r2)
81134428:	10016c26 	beq	r2,zero,811349dc <alt_up_sd_card_write+0x610>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113442c:	00a04574 	movhi	r2,33045
81134430:	1087ee04 	addi	r2,r2,8120
81134434:	10c01417 	ldw	r3,80(r2)
81134438:	e13ffe0f 	ldh	r4,-8(fp)
8113443c:	00a04574 	movhi	r2,33045
81134440:	10880304 	addi	r2,r2,8204
81134444:	200891ba 	slli	r4,r4,6
81134448:	1105883a 	add	r2,r2,r4
8113444c:	10800704 	addi	r2,r2,28
81134450:	10800017 	ldw	r2,0(r2)
81134454:	113fff84 	addi	r4,r2,-2
81134458:	00a04574 	movhi	r2,33045
8113445c:	1087ee04 	addi	r2,r2,8120
81134460:	10800383 	ldbu	r2,14(r2)
81134464:	10803fcc 	andi	r2,r2,255
81134468:	2085383a 	mul	r2,r4,r2
8113446c:	1887883a 	add	r3,r3,r2
                              active_files[file_handle].current_sector_in_cluster;
81134470:	e13ffe0f 	ldh	r4,-8(fp)
81134474:	00a04574 	movhi	r2,33045
81134478:	10880304 	addi	r2,r2,8204
8113447c:	200891ba 	slli	r4,r4,6
81134480:	1105883a 	add	r2,r2,r4
81134484:	10800804 	addi	r2,r2,32
81134488:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
8113448c:	1885883a 	add	r2,r3,r2
81134490:	e0bffb15 	stw	r2,-20(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
81134494:	e0fffe0f 	ldh	r3,-8(fp)
81134498:	00a04574 	movhi	r2,33045
8113449c:	10880304 	addi	r2,r2,8204
811344a0:	180691ba 	slli	r3,r3,6
811344a4:	10c5883a 	add	r2,r2,r3
811344a8:	10800904 	addi	r2,r2,36
811344ac:	10c00017 	ldw	r3,0(r2)
811344b0:	00a04574 	movhi	r2,33045
811344b4:	1087ee04 	addi	r2,r2,8120
811344b8:	1080030b 	ldhu	r2,12(r2)
811344bc:	10bfffcc 	andi	r2,r2,65535
811344c0:	1889203a 	divu	r4,r3,r2
811344c4:	2085383a 	mul	r2,r4,r2
811344c8:	1885c83a 	sub	r2,r3,r2
811344cc:	e0bffc0d 	sth	r2,-16(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
811344d0:	e0fffe0f 	ldh	r3,-8(fp)
811344d4:	00a04574 	movhi	r2,33045
811344d8:	10880304 	addi	r2,r2,8204
811344dc:	180691ba 	slli	r3,r3,6
811344e0:	10c5883a 	add	r2,r2,r3
811344e4:	10800904 	addi	r2,r2,36
811344e8:	10c00017 	ldw	r3,0(r2)
811344ec:	e13ffe0f 	ldh	r4,-8(fp)
811344f0:	00a04574 	movhi	r2,33045
811344f4:	10880304 	addi	r2,r2,8204
811344f8:	200891ba 	slli	r4,r4,6
811344fc:	1105883a 	add	r2,r2,r4
81134500:	10800604 	addi	r2,r2,24
81134504:	10800017 	ldw	r2,0(r2)
81134508:	1880672e 	bgeu	r3,r2,811346a8 <alt_up_sd_card_write+0x2dc>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
8113450c:	e0fffe0f 	ldh	r3,-8(fp)
81134510:	00a04574 	movhi	r2,33045
81134514:	10880304 	addi	r2,r2,8204
81134518:	180691ba 	slli	r3,r3,6
8113451c:	10c5883a 	add	r2,r2,r3
81134520:	10800904 	addi	r2,r2,36
81134524:	10800017 	ldw	r2,0(r2)
81134528:	1000e126 	beq	r2,zero,811348b0 <alt_up_sd_card_write+0x4e4>
8113452c:	e0bffc0f 	ldh	r2,-16(fp)
81134530:	1000df1e 	bne	r2,zero,811348b0 <alt_up_sd_card_write+0x4e4>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
81134534:	e0fffe0f 	ldh	r3,-8(fp)
81134538:	00a04574 	movhi	r2,33045
8113453c:	10880304 	addi	r2,r2,8204
81134540:	180691ba 	slli	r3,r3,6
81134544:	10c5883a 	add	r2,r2,r3
81134548:	10800804 	addi	r2,r2,32
8113454c:	10c00017 	ldw	r3,0(r2)
81134550:	00a04574 	movhi	r2,33045
81134554:	1087ee04 	addi	r2,r2,8120
81134558:	10800383 	ldbu	r2,14(r2)
8113455c:	10803fcc 	andi	r2,r2,255
81134560:	10bfffc4 	addi	r2,r2,-1
81134564:	18803d1e 	bne	r3,r2,8113465c <alt_up_sd_card_write+0x290>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
81134568:	e0fffe0f 	ldh	r3,-8(fp)
8113456c:	00a04574 	movhi	r2,33045
81134570:	10880304 	addi	r2,r2,8204
81134574:	180691ba 	slli	r3,r3,6
81134578:	10c5883a 	add	r2,r2,r3
8113457c:	10800704 	addi	r2,r2,28
81134580:	10800017 	ldw	r2,0(r2)
81134584:	e0fffc84 	addi	r3,fp,-14
81134588:	180b883a 	mov	r5,r3
8113458c:	1009883a 	mov	r4,r2
81134590:	11309d80 	call	811309d8 <get_cluster_flag>
81134594:	10002f26 	beq	r2,zero,81134654 <alt_up_sd_card_write+0x288>
                        {
                            if (next_cluster < 0x0000fff8)
81134598:	e0bffc8b 	ldhu	r2,-14(fp)
8113459c:	10bfffcc 	andi	r2,r2,65535
811345a0:	10bffe28 	cmpgeui	r2,r2,65528
811345a4:	1000c21e 	bne	r2,zero,811348b0 <alt_up_sd_card_write+0x4e4>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
811345a8:	e13ffe0f 	ldh	r4,-8(fp)
811345ac:	e0bffc8b 	ldhu	r2,-14(fp)
811345b0:	10ffffcc 	andi	r3,r2,65535
811345b4:	00a04574 	movhi	r2,33045
811345b8:	10880304 	addi	r2,r2,8204
811345bc:	200891ba 	slli	r4,r4,6
811345c0:	1105883a 	add	r2,r2,r4
811345c4:	10800704 	addi	r2,r2,28
811345c8:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
811345cc:	e0fffe0f 	ldh	r3,-8(fp)
811345d0:	00a04574 	movhi	r2,33045
811345d4:	10880304 	addi	r2,r2,8204
811345d8:	180691ba 	slli	r3,r3,6
811345dc:	10c5883a 	add	r2,r2,r3
811345e0:	10800804 	addi	r2,r2,32
811345e4:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811345e8:	00a04574 	movhi	r2,33045
811345ec:	1087ee04 	addi	r2,r2,8120
811345f0:	10c01417 	ldw	r3,80(r2)
811345f4:	e13ffe0f 	ldh	r4,-8(fp)
811345f8:	00a04574 	movhi	r2,33045
811345fc:	10880304 	addi	r2,r2,8204
81134600:	200891ba 	slli	r4,r4,6
81134604:	1105883a 	add	r2,r2,r4
81134608:	10800704 	addi	r2,r2,28
8113460c:	10800017 	ldw	r2,0(r2)
81134610:	113fff84 	addi	r4,r2,-2
81134614:	00a04574 	movhi	r2,33045
81134618:	1087ee04 	addi	r2,r2,8120
8113461c:	10800383 	ldbu	r2,14(r2)
81134620:	10803fcc 	andi	r2,r2,255
81134624:	2085383a 	mul	r2,r4,r2
81134628:	1887883a 	add	r3,r3,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
8113462c:	e13ffe0f 	ldh	r4,-8(fp)
81134630:	00a04574 	movhi	r2,33045
81134634:	10880304 	addi	r2,r2,8204
81134638:	200891ba 	slli	r4,r4,6
8113463c:	1105883a 	add	r2,r2,r4
81134640:	10800804 	addi	r2,r2,32
81134644:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81134648:	1885883a 	add	r2,r3,r2
8113464c:	e0bffb15 	stw	r2,-20(fp)
81134650:	00009706 	br	811348b0 <alt_up_sd_card_write+0x4e4>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
81134654:	0005883a 	mov	r2,zero
81134658:	0000e106 	br	811349e0 <alt_up_sd_card_write+0x614>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
8113465c:	e13ffe0f 	ldh	r4,-8(fp)
81134660:	e0fffe0f 	ldh	r3,-8(fp)
81134664:	00a04574 	movhi	r2,33045
81134668:	10880304 	addi	r2,r2,8204
8113466c:	180691ba 	slli	r3,r3,6
81134670:	10c5883a 	add	r2,r2,r3
81134674:	10800804 	addi	r2,r2,32
81134678:	10800017 	ldw	r2,0(r2)
8113467c:	10c00044 	addi	r3,r2,1
81134680:	00a04574 	movhi	r2,33045
81134684:	10880304 	addi	r2,r2,8204
81134688:	200891ba 	slli	r4,r4,6
8113468c:	1105883a 	add	r2,r2,r4
81134690:	10800804 	addi	r2,r2,32
81134694:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
81134698:	e0bffb17 	ldw	r2,-20(fp)
8113469c:	10800044 	addi	r2,r2,1
811346a0:	e0bffb15 	stw	r2,-20(fp)
811346a4:	00008206 	br	811348b0 <alt_up_sd_card_write+0x4e4>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
811346a8:	e0fffe0f 	ldh	r3,-8(fp)
811346ac:	00a04574 	movhi	r2,33045
811346b0:	10880304 	addi	r2,r2,8204
811346b4:	180691ba 	slli	r3,r3,6
811346b8:	10c5883a 	add	r2,r2,r3
811346bc:	10800904 	addi	r2,r2,36
811346c0:	10800017 	ldw	r2,0(r2)
811346c4:	10007a26 	beq	r2,zero,811348b0 <alt_up_sd_card_write+0x4e4>
811346c8:	e0bffc0f 	ldh	r2,-16(fp)
811346cc:	1000781e 	bne	r2,zero,811348b0 <alt_up_sd_card_write+0x4e4>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
811346d0:	e0fffe0f 	ldh	r3,-8(fp)
811346d4:	00a04574 	movhi	r2,33045
811346d8:	10880304 	addi	r2,r2,8204
811346dc:	180691ba 	slli	r3,r3,6
811346e0:	10c5883a 	add	r2,r2,r3
811346e4:	10800804 	addi	r2,r2,32
811346e8:	10c00017 	ldw	r3,0(r2)
811346ec:	00a04574 	movhi	r2,33045
811346f0:	1087ee04 	addi	r2,r2,8120
811346f4:	10800383 	ldbu	r2,14(r2)
811346f8:	10803fcc 	andi	r2,r2,255
811346fc:	10bfffc4 	addi	r2,r2,-1
81134700:	18803e1e 	bne	r3,r2,811347fc <alt_up_sd_card_write+0x430>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
81134704:	e0bffd04 	addi	r2,fp,-12
81134708:	1009883a 	mov	r4,r2
8113470c:	1132a1c0 	call	81132a1c <find_first_empty_cluster>
81134710:	10003826 	beq	r2,zero,811347f4 <alt_up_sd_card_write+0x428>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
81134714:	e0fffe0f 	ldh	r3,-8(fp)
81134718:	00a04574 	movhi	r2,33045
8113471c:	10880304 	addi	r2,r2,8204
81134720:	180691ba 	slli	r3,r3,6
81134724:	10c5883a 	add	r2,r2,r3
81134728:	10800704 	addi	r2,r2,28
8113472c:	10800017 	ldw	r2,0(r2)
81134730:	e0fffd17 	ldw	r3,-12(fp)
81134734:	18ffffcc 	andi	r3,r3,65535
81134738:	18e0001c 	xori	r3,r3,32768
8113473c:	18e00004 	addi	r3,r3,-32768
81134740:	01800044 	movi	r6,1
81134744:	180b883a 	mov	r5,r3
81134748:	1009883a 	mov	r4,r2
8113474c:	1130a940 	call	81130a94 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
81134750:	e0bffd17 	ldw	r2,-12(fp)
81134754:	01800044 	movi	r6,1
81134758:	017fffc4 	movi	r5,-1
8113475c:	1009883a 	mov	r4,r2
81134760:	1130a940 	call	81130a94 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
81134764:	e0fffe0f 	ldh	r3,-8(fp)
81134768:	00a04574 	movhi	r2,33045
8113476c:	10880304 	addi	r2,r2,8204
81134770:	180691ba 	slli	r3,r3,6
81134774:	10c5883a 	add	r2,r2,r3
81134778:	10800704 	addi	r2,r2,28
8113477c:	10800017 	ldw	r2,0(r2)
81134780:	e0fffd17 	ldw	r3,-12(fp)
81134784:	18ffffcc 	andi	r3,r3,65535
81134788:	18e0001c 	xori	r3,r3,32768
8113478c:	18e00004 	addi	r3,r3,-32768
81134790:	000d883a 	mov	r6,zero
81134794:	180b883a 	mov	r5,r3
81134798:	1009883a 	mov	r4,r2
8113479c:	1130a940 	call	81130a94 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
811347a0:	e0bffd17 	ldw	r2,-12(fp)
811347a4:	000d883a 	mov	r6,zero
811347a8:	017fffc4 	movi	r5,-1
811347ac:	1009883a 	mov	r4,r2
811347b0:	1130a940 	call	81130a94 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
811347b4:	e13ffe0f 	ldh	r4,-8(fp)
811347b8:	e0fffd17 	ldw	r3,-12(fp)
811347bc:	00a04574 	movhi	r2,33045
811347c0:	10880304 	addi	r2,r2,8204
811347c4:	200891ba 	slli	r4,r4,6
811347c8:	1105883a 	add	r2,r2,r4
811347cc:	10800704 	addi	r2,r2,28
811347d0:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
811347d4:	e0fffe0f 	ldh	r3,-8(fp)
811347d8:	00a04574 	movhi	r2,33045
811347dc:	10880304 	addi	r2,r2,8204
811347e0:	180691ba 	slli	r3,r3,6
811347e4:	10c5883a 	add	r2,r2,r3
811347e8:	10800804 	addi	r2,r2,32
811347ec:	10000015 	stw	zero,0(r2)
811347f0:	00001506 	br	81134848 <alt_up_sd_card_write+0x47c>
						}
						else
						{
							return false;
811347f4:	0005883a 	mov	r2,zero
811347f8:	00007906 	br	811349e0 <alt_up_sd_card_write+0x614>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
811347fc:	e13ffe0f 	ldh	r4,-8(fp)
81134800:	e0fffe0f 	ldh	r3,-8(fp)
81134804:	00a04574 	movhi	r2,33045
81134808:	10880304 	addi	r2,r2,8204
8113480c:	180691ba 	slli	r3,r3,6
81134810:	10c5883a 	add	r2,r2,r3
81134814:	10800904 	addi	r2,r2,36
81134818:	10c00017 	ldw	r3,0(r2)
8113481c:	00a04574 	movhi	r2,33045
81134820:	1087ee04 	addi	r2,r2,8120
81134824:	1080030b 	ldhu	r2,12(r2)
81134828:	10bfffcc 	andi	r2,r2,65535
8113482c:	1887203a 	divu	r3,r3,r2
81134830:	00a04574 	movhi	r2,33045
81134834:	10880304 	addi	r2,r2,8204
81134838:	200891ba 	slli	r4,r4,6
8113483c:	1105883a 	add	r2,r2,r4
81134840:	10800804 	addi	r2,r2,32
81134844:	10c00015 	stw	r3,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
81134848:	00a04574 	movhi	r2,33045
8113484c:	1087ee04 	addi	r2,r2,8120
81134850:	10c01417 	ldw	r3,80(r2)
81134854:	e13ffe0f 	ldh	r4,-8(fp)
81134858:	00a04574 	movhi	r2,33045
8113485c:	10880304 	addi	r2,r2,8204
81134860:	200891ba 	slli	r4,r4,6
81134864:	1105883a 	add	r2,r2,r4
81134868:	10800704 	addi	r2,r2,28
8113486c:	10800017 	ldw	r2,0(r2)
81134870:	113fff84 	addi	r4,r2,-2
81134874:	00a04574 	movhi	r2,33045
81134878:	1087ee04 	addi	r2,r2,8120
8113487c:	10800383 	ldbu	r2,14(r2)
81134880:	10803fcc 	andi	r2,r2,255
81134884:	2085383a 	mul	r2,r4,r2
81134888:	1887883a 	add	r3,r3,r2
                          active_files[file_handle].current_sector_in_cluster;
8113488c:	e13ffe0f 	ldh	r4,-8(fp)
81134890:	00a04574 	movhi	r2,33045
81134894:	10880304 	addi	r2,r2,8204
81134898:	200891ba 	slli	r4,r4,6
8113489c:	1105883a 	add	r2,r2,r4
811348a0:	10800804 	addi	r2,r2,32
811348a4:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
811348a8:	1885883a 	add	r2,r3,r2
811348ac:	e0bffb15 	stw	r2,-20(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
811348b0:	d0e09317 	ldw	r3,-32180(gp)
811348b4:	e0bffb17 	ldw	r2,-20(fp)
811348b8:	1885883a 	add	r2,r3,r2
811348bc:	1007883a 	mov	r3,r2
811348c0:	d0a09717 	ldw	r2,-32164(gp)
811348c4:	18800726 	beq	r3,r2,811348e4 <alt_up_sd_card_write+0x518>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
811348c8:	d0a09317 	ldw	r2,-32180(gp)
811348cc:	100b883a 	mov	r5,r2
811348d0:	e13ffb17 	ldw	r4,-20(fp)
811348d4:	11308f80 	call	811308f8 <Read_Sector_Data>
811348d8:	1000021e 	bne	r2,zero,811348e4 <alt_up_sd_card_write+0x518>
                {
					return false;
811348dc:	0005883a 	mov	r2,zero
811348e0:	00003f06 	br	811349e0 <alt_up_sd_card_write+0x614>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
811348e4:	d0e09217 	ldw	r3,-32184(gp)
811348e8:	e0bffc0f 	ldh	r2,-16(fp)
811348ec:	1885883a 	add	r2,r3,r2
811348f0:	e0ffff07 	ldb	r3,-4(fp)
811348f4:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
811348f8:	e13ffe0f 	ldh	r4,-8(fp)
811348fc:	e0fffe0f 	ldh	r3,-8(fp)
81134900:	00a04574 	movhi	r2,33045
81134904:	10880304 	addi	r2,r2,8204
81134908:	180691ba 	slli	r3,r3,6
8113490c:	10c5883a 	add	r2,r2,r3
81134910:	10800904 	addi	r2,r2,36
81134914:	10800017 	ldw	r2,0(r2)
81134918:	10c00044 	addi	r3,r2,1
8113491c:	00a04574 	movhi	r2,33045
81134920:	10880304 	addi	r2,r2,8204
81134924:	200891ba 	slli	r4,r4,6
81134928:	1105883a 	add	r2,r2,r4
8113492c:	10800904 	addi	r2,r2,36
81134930:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
81134934:	e0fffe0f 	ldh	r3,-8(fp)
81134938:	00a04574 	movhi	r2,33045
8113493c:	10880304 	addi	r2,r2,8204
81134940:	180691ba 	slli	r3,r3,6
81134944:	10c5883a 	add	r2,r2,r3
81134948:	10800904 	addi	r2,r2,36
8113494c:	10c00017 	ldw	r3,0(r2)
81134950:	e13ffe0f 	ldh	r4,-8(fp)
81134954:	00a04574 	movhi	r2,33045
81134958:	10880304 	addi	r2,r2,8204
8113495c:	200891ba 	slli	r4,r4,6
81134960:	1105883a 	add	r2,r2,r4
81134964:	10800604 	addi	r2,r2,24
81134968:	10800017 	ldw	r2,0(r2)
8113496c:	18801736 	bltu	r3,r2,811349cc <alt_up_sd_card_write+0x600>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
81134970:	e13ffe0f 	ldh	r4,-8(fp)
81134974:	e0fffe0f 	ldh	r3,-8(fp)
81134978:	00a04574 	movhi	r2,33045
8113497c:	10880304 	addi	r2,r2,8204
81134980:	180691ba 	slli	r3,r3,6
81134984:	10c5883a 	add	r2,r2,r3
81134988:	10800604 	addi	r2,r2,24
8113498c:	10800017 	ldw	r2,0(r2)
81134990:	10c00044 	addi	r3,r2,1
81134994:	00a04574 	movhi	r2,33045
81134998:	10880304 	addi	r2,r2,8204
8113499c:	200891ba 	slli	r4,r4,6
811349a0:	1105883a 	add	r2,r2,r4
811349a4:	10800604 	addi	r2,r2,24
811349a8:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
811349ac:	e0fffe0f 	ldh	r3,-8(fp)
811349b0:	00a04574 	movhi	r2,33045
811349b4:	10880304 	addi	r2,r2,8204
811349b8:	180691ba 	slli	r3,r3,6
811349bc:	10c5883a 	add	r2,r2,r3
811349c0:	10800e04 	addi	r2,r2,56
811349c4:	00c00044 	movi	r3,1
811349c8:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
811349cc:	00800044 	movi	r2,1
811349d0:	d0a09615 	stw	r2,-32168(gp)
			result = true;
811349d4:	00800044 	movi	r2,1
811349d8:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
811349dc:	e0bffa17 	ldw	r2,-24(fp)
}
811349e0:	e037883a 	mov	sp,fp
811349e4:	dfc00117 	ldw	ra,4(sp)
811349e8:	df000017 	ldw	fp,0(sp)
811349ec:	dec00204 	addi	sp,sp,8
811349f0:	f800283a 	ret

811349f4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
811349f4:	defffb04 	addi	sp,sp,-20
811349f8:	de00012e 	bgeu	sp,et,81134a00 <alt_up_sd_card_fclose+0xc>
811349fc:	003b68fa 	trap	3
81134a00:	dfc00415 	stw	ra,16(sp)
81134a04:	df000315 	stw	fp,12(sp)
81134a08:	df000304 	addi	fp,sp,12
81134a0c:	2005883a 	mov	r2,r4
81134a10:	e0bfff0d 	sth	r2,-4(fp)
    bool result = false;
81134a14:	e03ffd15 	stw	zero,-12(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
81134a18:	11335d00 	call	811335d0 <alt_up_sd_card_is_Present>
81134a1c:	10006026 	beq	r2,zero,81134ba0 <alt_up_sd_card_fclose+0x1ac>
81134a20:	d0a08c17 	ldw	r2,-32208(gp)
81134a24:	10005e26 	beq	r2,zero,81134ba0 <alt_up_sd_card_fclose+0x1ac>
    {
        if (active_files[file_handle].in_use) 
81134a28:	e0ffff0f 	ldh	r3,-4(fp)
81134a2c:	00a04574 	movhi	r2,33045
81134a30:	10880304 	addi	r2,r2,8204
81134a34:	180691ba 	slli	r3,r3,6
81134a38:	10c5883a 	add	r2,r2,r3
81134a3c:	10800f04 	addi	r2,r2,60
81134a40:	10800017 	ldw	r2,0(r2)
81134a44:	10005626 	beq	r2,zero,81134ba0 <alt_up_sd_card_fclose+0x1ac>
        {
			if (active_files[file_handle].modified)
81134a48:	e0ffff0f 	ldh	r3,-4(fp)
81134a4c:	00a04574 	movhi	r2,33045
81134a50:	10880304 	addi	r2,r2,8204
81134a54:	180691ba 	slli	r3,r3,6
81134a58:	10c5883a 	add	r2,r2,r3
81134a5c:	10800e04 	addi	r2,r2,56
81134a60:	10800017 	ldw	r2,0(r2)
81134a64:	10004526 	beq	r2,zero,81134b7c <alt_up_sd_card_fclose+0x188>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
81134a68:	e0ffff0f 	ldh	r3,-4(fp)
81134a6c:	00a04574 	movhi	r2,33045
81134a70:	10880304 	addi	r2,r2,8204
81134a74:	180691ba 	slli	r3,r3,6
81134a78:	10c5883a 	add	r2,r2,r3
81134a7c:	10800b04 	addi	r2,r2,44
81134a80:	10800017 	ldw	r2,0(r2)
81134a84:	e0bffe15 	stw	r2,-8(fp)
				if (active_files[file_handle].file_record_cluster == 0)
81134a88:	e0ffff0f 	ldh	r3,-4(fp)
81134a8c:	00a04574 	movhi	r2,33045
81134a90:	10880304 	addi	r2,r2,8204
81134a94:	180691ba 	slli	r3,r3,6
81134a98:	10c5883a 	add	r2,r2,r3
81134a9c:	10800a04 	addi	r2,r2,40
81134aa0:	10800017 	ldw	r2,0(r2)
81134aa4:	1000071e 	bne	r2,zero,81134ac4 <alt_up_sd_card_fclose+0xd0>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
81134aa8:	00a04574 	movhi	r2,33045
81134aac:	1087ee04 	addi	r2,r2,8120
81134ab0:	10801317 	ldw	r2,76(r2)
81134ab4:	e0fffe17 	ldw	r3,-8(fp)
81134ab8:	1885883a 	add	r2,r3,r2
81134abc:	e0bffe15 	stw	r2,-8(fp)
81134ac0:	00001406 	br	81134b14 <alt_up_sd_card_fclose+0x120>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81134ac4:	00a04574 	movhi	r2,33045
81134ac8:	1087ee04 	addi	r2,r2,8120
81134acc:	10c01417 	ldw	r3,80(r2)
81134ad0:	e0bffe17 	ldw	r2,-8(fp)
81134ad4:	1887883a 	add	r3,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
81134ad8:	e13fff0f 	ldh	r4,-4(fp)
81134adc:	00a04574 	movhi	r2,33045
81134ae0:	10880304 	addi	r2,r2,8204
81134ae4:	200891ba 	slli	r4,r4,6
81134ae8:	1105883a 	add	r2,r2,r4
81134aec:	10800a04 	addi	r2,r2,40
81134af0:	10800017 	ldw	r2,0(r2)
81134af4:	113fff84 	addi	r4,r2,-2
81134af8:	00a04574 	movhi	r2,33045
81134afc:	1087ee04 	addi	r2,r2,8120
81134b00:	10800383 	ldbu	r2,14(r2)
81134b04:	10803fcc 	andi	r2,r2,255
81134b08:	2085383a 	mul	r2,r4,r2
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
81134b0c:	1885883a 	add	r2,r3,r2
81134b10:	e0bffe15 	stw	r2,-8(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
81134b14:	e0bffe17 	ldw	r2,-8(fp)
81134b18:	d0e09317 	ldw	r3,-32180(gp)
81134b1c:	180b883a 	mov	r5,r3
81134b20:	1009883a 	mov	r4,r2
81134b24:	11308f80 	call	811308f8 <Read_Sector_Data>
81134b28:	10001426 	beq	r2,zero,81134b7c <alt_up_sd_card_fclose+0x188>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
81134b2c:	e0ffff0f 	ldh	r3,-4(fp)
81134b30:	00a04574 	movhi	r2,33045
81134b34:	10880304 	addi	r2,r2,8204
81134b38:	180691ba 	slli	r3,r3,6
81134b3c:	10c5883a 	add	r2,r2,r3
81134b40:	10800c04 	addi	r2,r2,48
81134b44:	1080000b 	ldhu	r2,0(r2)
81134b48:	113fffcc 	andi	r4,r2,65535
81134b4c:	2120001c 	xori	r4,r4,32768
81134b50:	21200004 	addi	r4,r4,-32768
81134b54:	e0bfff0f 	ldh	r2,-4(fp)
81134b58:	100691ba 	slli	r3,r2,6
81134b5c:	00a04574 	movhi	r2,33045
81134b60:	10880304 	addi	r2,r2,8204
81134b64:	1885883a 	add	r2,r3,r2
81134b68:	100b883a 	mov	r5,r2
81134b6c:	1130fac0 	call	81130fac <Write_File_Record_At_Offset>
81134b70:	10000226 	beq	r2,zero,81134b7c <alt_up_sd_card_fclose+0x188>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
81134b74:	11308a40 	call	811308a4 <Save_Modified_Sector>
81134b78:	e0bffd15 	stw	r2,-12(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
81134b7c:	e0ffff0f 	ldh	r3,-4(fp)
81134b80:	00a04574 	movhi	r2,33045
81134b84:	10880304 	addi	r2,r2,8204
81134b88:	180691ba 	slli	r3,r3,6
81134b8c:	10c5883a 	add	r2,r2,r3
81134b90:	10800f04 	addi	r2,r2,60
81134b94:	10000015 	stw	zero,0(r2)
			result = true;
81134b98:	00800044 	movi	r2,1
81134b9c:	e0bffd15 	stw	r2,-12(fp)
        }
    }
    
    return result;
81134ba0:	e0bffd17 	ldw	r2,-12(fp)
}
81134ba4:	e037883a 	mov	sp,fp
81134ba8:	dfc00117 	ldw	ra,4(sp)
81134bac:	df000017 	ldw	fp,0(sp)
81134bb0:	dec00204 	addi	sp,sp,8
81134bb4:	f800283a 	ret

81134bb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81134bb8:	defffa04 	addi	sp,sp,-24
81134bbc:	de00012e 	bgeu	sp,et,81134bc4 <altera_avalon_jtag_uart_read_fd+0xc>
81134bc0:	003b68fa 	trap	3
81134bc4:	dfc00515 	stw	ra,20(sp)
81134bc8:	df000415 	stw	fp,16(sp)
81134bcc:	df000404 	addi	fp,sp,16
81134bd0:	e13ffd15 	stw	r4,-12(fp)
81134bd4:	e17ffe15 	stw	r5,-8(fp)
81134bd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81134bdc:	e0bffd17 	ldw	r2,-12(fp)
81134be0:	10800017 	ldw	r2,0(r2)
81134be4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
81134be8:	e0bffc17 	ldw	r2,-16(fp)
81134bec:	10c00a04 	addi	r3,r2,40
81134bf0:	e0bffd17 	ldw	r2,-12(fp)
81134bf4:	10800217 	ldw	r2,8(r2)
81134bf8:	100f883a 	mov	r7,r2
81134bfc:	e1bfff17 	ldw	r6,-4(fp)
81134c00:	e17ffe17 	ldw	r5,-8(fp)
81134c04:	1809883a 	mov	r4,r3
81134c08:	11353ac0 	call	811353ac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
81134c0c:	e037883a 	mov	sp,fp
81134c10:	dfc00117 	ldw	ra,4(sp)
81134c14:	df000017 	ldw	fp,0(sp)
81134c18:	dec00204 	addi	sp,sp,8
81134c1c:	f800283a 	ret

81134c20 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81134c20:	defffa04 	addi	sp,sp,-24
81134c24:	de00012e 	bgeu	sp,et,81134c2c <altera_avalon_jtag_uart_write_fd+0xc>
81134c28:	003b68fa 	trap	3
81134c2c:	dfc00515 	stw	ra,20(sp)
81134c30:	df000415 	stw	fp,16(sp)
81134c34:	df000404 	addi	fp,sp,16
81134c38:	e13ffd15 	stw	r4,-12(fp)
81134c3c:	e17ffe15 	stw	r5,-8(fp)
81134c40:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81134c44:	e0bffd17 	ldw	r2,-12(fp)
81134c48:	10800017 	ldw	r2,0(r2)
81134c4c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
81134c50:	e0bffc17 	ldw	r2,-16(fp)
81134c54:	10c00a04 	addi	r3,r2,40
81134c58:	e0bffd17 	ldw	r2,-12(fp)
81134c5c:	10800217 	ldw	r2,8(r2)
81134c60:	100f883a 	mov	r7,r2
81134c64:	e1bfff17 	ldw	r6,-4(fp)
81134c68:	e17ffe17 	ldw	r5,-8(fp)
81134c6c:	1809883a 	mov	r4,r3
81134c70:	11356700 	call	81135670 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
81134c74:	e037883a 	mov	sp,fp
81134c78:	dfc00117 	ldw	ra,4(sp)
81134c7c:	df000017 	ldw	fp,0(sp)
81134c80:	dec00204 	addi	sp,sp,8
81134c84:	f800283a 	ret

81134c88 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
81134c88:	defffc04 	addi	sp,sp,-16
81134c8c:	de00012e 	bgeu	sp,et,81134c94 <altera_avalon_jtag_uart_close_fd+0xc>
81134c90:	003b68fa 	trap	3
81134c94:	dfc00315 	stw	ra,12(sp)
81134c98:	df000215 	stw	fp,8(sp)
81134c9c:	df000204 	addi	fp,sp,8
81134ca0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
81134ca4:	e0bfff17 	ldw	r2,-4(fp)
81134ca8:	10800017 	ldw	r2,0(r2)
81134cac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
81134cb0:	e0bffe17 	ldw	r2,-8(fp)
81134cb4:	10c00a04 	addi	r3,r2,40
81134cb8:	e0bfff17 	ldw	r2,-4(fp)
81134cbc:	10800217 	ldw	r2,8(r2)
81134cc0:	100b883a 	mov	r5,r2
81134cc4:	1809883a 	mov	r4,r3
81134cc8:	11352440 	call	81135244 <altera_avalon_jtag_uart_close>
}
81134ccc:	e037883a 	mov	sp,fp
81134cd0:	dfc00117 	ldw	ra,4(sp)
81134cd4:	df000017 	ldw	fp,0(sp)
81134cd8:	dec00204 	addi	sp,sp,8
81134cdc:	f800283a 	ret

81134ce0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
81134ce0:	defffa04 	addi	sp,sp,-24
81134ce4:	de00012e 	bgeu	sp,et,81134cec <altera_avalon_jtag_uart_ioctl_fd+0xc>
81134ce8:	003b68fa 	trap	3
81134cec:	dfc00515 	stw	ra,20(sp)
81134cf0:	df000415 	stw	fp,16(sp)
81134cf4:	df000404 	addi	fp,sp,16
81134cf8:	e13ffd15 	stw	r4,-12(fp)
81134cfc:	e17ffe15 	stw	r5,-8(fp)
81134d00:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
81134d04:	e0bffd17 	ldw	r2,-12(fp)
81134d08:	10800017 	ldw	r2,0(r2)
81134d0c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
81134d10:	e0bffc17 	ldw	r2,-16(fp)
81134d14:	10800a04 	addi	r2,r2,40
81134d18:	e1bfff17 	ldw	r6,-4(fp)
81134d1c:	e17ffe17 	ldw	r5,-8(fp)
81134d20:	1009883a 	mov	r4,r2
81134d24:	11352b40 	call	811352b4 <altera_avalon_jtag_uart_ioctl>
}
81134d28:	e037883a 	mov	sp,fp
81134d2c:	dfc00117 	ldw	ra,4(sp)
81134d30:	df000017 	ldw	fp,0(sp)
81134d34:	dec00204 	addi	sp,sp,8
81134d38:	f800283a 	ret

81134d3c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
81134d3c:	defff104 	addi	sp,sp,-60
81134d40:	de00012e 	bgeu	sp,et,81134d48 <altera_avalon_jtag_uart_init+0xc>
81134d44:	003b68fa 	trap	3
81134d48:	dfc00e15 	stw	ra,56(sp)
81134d4c:	df000d15 	stw	fp,52(sp)
81134d50:	df000d04 	addi	fp,sp,52
81134d54:	e13ff915 	stw	r4,-28(fp)
81134d58:	e17ffa15 	stw	r5,-24(fp)
81134d5c:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
81134d60:	e0bff917 	ldw	r2,-28(fp)
81134d64:	10800c04 	addi	r2,r2,48
81134d68:	e0bff415 	stw	r2,-48(fp)
81134d6c:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81134d70:	e0bff80b 	ldhu	r2,-32(fp)
81134d74:	e0fff884 	addi	r3,fp,-30
81134d78:	180b883a 	mov	r5,r3
81134d7c:	1009883a 	mov	r4,r2
81134d80:	1128f0c0 	call	81128f0c <OSFlagCreate>
81134d84:	1007883a 	mov	r3,r2
81134d88:	e0bff417 	ldw	r2,-48(fp)
81134d8c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
81134d90:	e0bff917 	ldw	r2,-28(fp)
81134d94:	10800a04 	addi	r2,r2,40
81134d98:	e0bff515 	stw	r2,-44(fp)
81134d9c:	00800044 	movi	r2,1
81134da0:	e0bff78d 	sth	r2,-34(fp)
81134da4:	e0bff78b 	ldhu	r2,-34(fp)
81134da8:	1009883a 	mov	r4,r2
81134dac:	112ce680 	call	8112ce68 <OSSemCreate>
81134db0:	1007883a 	mov	r3,r2
81134db4:	e0bff517 	ldw	r2,-44(fp)
81134db8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
81134dbc:	e0bff917 	ldw	r2,-28(fp)
81134dc0:	10800b04 	addi	r2,r2,44
81134dc4:	e0bff615 	stw	r2,-40(fp)
81134dc8:	00800044 	movi	r2,1
81134dcc:	e0bff70d 	sth	r2,-36(fp)
81134dd0:	e0bff70b 	ldhu	r2,-36(fp)
81134dd4:	1009883a 	mov	r4,r2
81134dd8:	112ce680 	call	8112ce68 <OSSemCreate>
81134ddc:	1007883a 	mov	r3,r2
81134de0:	e0bff617 	ldw	r2,-40(fp)
81134de4:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81134de8:	e0bff917 	ldw	r2,-28(fp)
81134dec:	00c00044 	movi	r3,1
81134df0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
81134df4:	e0bff917 	ldw	r2,-28(fp)
81134df8:	10800017 	ldw	r2,0(r2)
81134dfc:	10800104 	addi	r2,r2,4
81134e00:	1007883a 	mov	r3,r2
81134e04:	e0bff917 	ldw	r2,-28(fp)
81134e08:	10800817 	ldw	r2,32(r2)
81134e0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
81134e10:	e0bffa17 	ldw	r2,-24(fp)
81134e14:	e0fffb17 	ldw	r3,-20(fp)
81134e18:	d8000015 	stw	zero,0(sp)
81134e1c:	e1fff917 	ldw	r7,-28(fp)
81134e20:	01a044f4 	movhi	r6,33043
81134e24:	3193a304 	addi	r6,r6,20108
81134e28:	180b883a 	mov	r5,r3
81134e2c:	1009883a 	mov	r4,r2
81134e30:	1138c900 	call	81138c90 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
81134e34:	e0bff917 	ldw	r2,-28(fp)
81134e38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
81134e3c:	e0bff917 	ldw	r2,-28(fp)
81134e40:	10800204 	addi	r2,r2,8
81134e44:	d0e06a17 	ldw	r3,-32344(gp)
81134e48:	e1fff917 	ldw	r7,-28(fp)
81134e4c:	01a044f4 	movhi	r6,33043
81134e50:	31944e04 	addi	r6,r6,20792
81134e54:	180b883a 	mov	r5,r3
81134e58:	1009883a 	mov	r4,r2
81134e5c:	11387100 	call	81138710 <alt_alarm_start>
81134e60:	1000040e 	bge	r2,zero,81134e74 <altera_avalon_jtag_uart_init+0x138>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
81134e64:	e0fff917 	ldw	r3,-28(fp)
81134e68:	00a00034 	movhi	r2,32768
81134e6c:	10bfffc4 	addi	r2,r2,-1
81134e70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
81134e74:	0001883a 	nop
81134e78:	e037883a 	mov	sp,fp
81134e7c:	dfc00117 	ldw	ra,4(sp)
81134e80:	df000017 	ldw	fp,0(sp)
81134e84:	dec00204 	addi	sp,sp,8
81134e88:	f800283a 	ret

81134e8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
81134e8c:	defff204 	addi	sp,sp,-56
81134e90:	de00012e 	bgeu	sp,et,81134e98 <altera_avalon_jtag_uart_irq+0xc>
81134e94:	003b68fa 	trap	3
81134e98:	dfc00d15 	stw	ra,52(sp)
81134e9c:	df000c15 	stw	fp,48(sp)
81134ea0:	df000c04 	addi	fp,sp,48
81134ea4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
81134ea8:	e0bfff17 	ldw	r2,-4(fp)
81134eac:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
81134eb0:	e0bff617 	ldw	r2,-40(fp)
81134eb4:	10800017 	ldw	r2,0(r2)
81134eb8:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81134ebc:	e0bff717 	ldw	r2,-36(fp)
81134ec0:	10800104 	addi	r2,r2,4
81134ec4:	10800037 	ldwio	r2,0(r2)
81134ec8:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
81134ecc:	e0bff817 	ldw	r2,-32(fp)
81134ed0:	1080c00c 	andi	r2,r2,768
81134ed4:	10009126 	beq	r2,zero,8113511c <altera_avalon_jtag_uart_irq+0x290>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
81134ed8:	e0bff817 	ldw	r2,-32(fp)
81134edc:	1080400c 	andi	r2,r2,256
81134ee0:	10004726 	beq	r2,zero,81135000 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
81134ee4:	00800074 	movhi	r2,1
81134ee8:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81134eec:	e0bff617 	ldw	r2,-40(fp)
81134ef0:	10800d17 	ldw	r2,52(r2)
81134ef4:	10800044 	addi	r2,r2,1
81134ef8:	1081ffcc 	andi	r2,r2,2047
81134efc:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
81134f00:	e0bff617 	ldw	r2,-40(fp)
81134f04:	10c00e17 	ldw	r3,56(r2)
81134f08:	e0bff917 	ldw	r2,-28(fp)
81134f0c:	18802726 	beq	r3,r2,81134fac <altera_avalon_jtag_uart_irq+0x120>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
81134f10:	e0bff717 	ldw	r2,-36(fp)
81134f14:	10800037 	ldwio	r2,0(r2)
81134f18:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
81134f1c:	e0bff417 	ldw	r2,-48(fp)
81134f20:	10a0000c 	andi	r2,r2,32768
81134f24:	10002326 	beq	r2,zero,81134fb4 <altera_avalon_jtag_uart_irq+0x128>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
81134f28:	e0bff617 	ldw	r2,-40(fp)
81134f2c:	10800d17 	ldw	r2,52(r2)
81134f30:	e0fff417 	ldw	r3,-48(fp)
81134f34:	1809883a 	mov	r4,r3
81134f38:	e0fff617 	ldw	r3,-40(fp)
81134f3c:	1885883a 	add	r2,r3,r2
81134f40:	10801104 	addi	r2,r2,68
81134f44:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81134f48:	e0bff617 	ldw	r2,-40(fp)
81134f4c:	10800d17 	ldw	r2,52(r2)
81134f50:	10800044 	addi	r2,r2,1
81134f54:	10c1ffcc 	andi	r3,r2,2047
81134f58:	e0bff617 	ldw	r2,-40(fp)
81134f5c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
81134f60:	e0bff617 	ldw	r2,-40(fp)
81134f64:	10800c17 	ldw	r2,48(r2)
81134f68:	e0bffb15 	stw	r2,-20(fp)
81134f6c:	00800044 	movi	r2,1
81134f70:	e0bffc0d 	sth	r2,-16(fp)
81134f74:	00800044 	movi	r2,1
81134f78:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81134f7c:	d0a07303 	ldbu	r2,-32308(gp)
81134f80:	10803fcc 	andi	r2,r2,255
81134f84:	103fd926 	beq	r2,zero,81134eec <__reset+0xfb114eec>
  {
    OSFlagPost (group, flags, opt, &err);
81134f88:	e0bffc0b 	ldhu	r2,-16(fp)
81134f8c:	e0fffc83 	ldbu	r3,-14(fp)
81134f90:	e13ffdc4 	addi	r4,fp,-9
81134f94:	200f883a 	mov	r7,r4
81134f98:	180d883a 	mov	r6,r3
81134f9c:	100b883a 	mov	r5,r2
81134fa0:	e13ffb17 	ldw	r4,-20(fp)
81134fa4:	1129b180 	call	81129b18 <OSFlagPost>
      }
81134fa8:	003fd006 	br	81134eec <__reset+0xfb114eec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
81134fac:	0001883a 	nop
81134fb0:	00000106 	br	81134fb8 <altera_avalon_jtag_uart_irq+0x12c>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
81134fb4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
81134fb8:	e0bff417 	ldw	r2,-48(fp)
81134fbc:	10bfffec 	andhi	r2,r2,65535
81134fc0:	10000f26 	beq	r2,zero,81135000 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
81134fc4:	e0bff617 	ldw	r2,-40(fp)
81134fc8:	10c00817 	ldw	r3,32(r2)
81134fcc:	00bfff84 	movi	r2,-2
81134fd0:	1886703a 	and	r3,r3,r2
81134fd4:	e0bff617 	ldw	r2,-40(fp)
81134fd8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
81134fdc:	e0bff717 	ldw	r2,-36(fp)
81134fe0:	10800104 	addi	r2,r2,4
81134fe4:	1007883a 	mov	r3,r2
81134fe8:	e0bff617 	ldw	r2,-40(fp)
81134fec:	10800817 	ldw	r2,32(r2)
81134ff0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
81134ff4:	e0bff717 	ldw	r2,-36(fp)
81134ff8:	10800104 	addi	r2,r2,4
81134ffc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
81135000:	e0bff817 	ldw	r2,-32(fp)
81135004:	1080800c 	andi	r2,r2,512
81135008:	103fac26 	beq	r2,zero,81134ebc <__reset+0xfb114ebc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
8113500c:	e0bff817 	ldw	r2,-32(fp)
81135010:	1004d43a 	srli	r2,r2,16
81135014:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
81135018:	00002606 	br	811350b4 <altera_avalon_jtag_uart_irq+0x228>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
8113501c:	e0bff717 	ldw	r2,-36(fp)
81135020:	e0fff617 	ldw	r3,-40(fp)
81135024:	18c01017 	ldw	r3,64(r3)
81135028:	e13ff617 	ldw	r4,-40(fp)
8113502c:	20c7883a 	add	r3,r4,r3
81135030:	18c21104 	addi	r3,r3,2116
81135034:	18c00003 	ldbu	r3,0(r3)
81135038:	18c03fcc 	andi	r3,r3,255
8113503c:	18c0201c 	xori	r3,r3,128
81135040:	18ffe004 	addi	r3,r3,-128
81135044:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81135048:	e0bff617 	ldw	r2,-40(fp)
8113504c:	10801017 	ldw	r2,64(r2)
81135050:	10800044 	addi	r2,r2,1
81135054:	10c1ffcc 	andi	r3,r2,2047
81135058:	e0bff617 	ldw	r2,-40(fp)
8113505c:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
81135060:	e0bff617 	ldw	r2,-40(fp)
81135064:	10800c17 	ldw	r2,48(r2)
81135068:	e0bffa15 	stw	r2,-24(fp)
8113506c:	00800084 	movi	r2,2
81135070:	e0bffd0d 	sth	r2,-12(fp)
81135074:	00800044 	movi	r2,1
81135078:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
8113507c:	d0a07303 	ldbu	r2,-32308(gp)
81135080:	10803fcc 	andi	r2,r2,255
81135084:	10000826 	beq	r2,zero,811350a8 <altera_avalon_jtag_uart_irq+0x21c>
  {
    OSFlagPost (group, flags, opt, &err);
81135088:	e0bffd0b 	ldhu	r2,-12(fp)
8113508c:	e0fffd83 	ldbu	r3,-10(fp)
81135090:	e13ffe04 	addi	r4,fp,-8
81135094:	200f883a 	mov	r7,r4
81135098:	180d883a 	mov	r6,r3
8113509c:	100b883a 	mov	r5,r2
811350a0:	e13ffa17 	ldw	r4,-24(fp)
811350a4:	1129b180 	call	81129b18 <OSFlagPost>

        space--;
811350a8:	e0bff517 	ldw	r2,-44(fp)
811350ac:	10bfffc4 	addi	r2,r2,-1
811350b0:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
811350b4:	e0bff517 	ldw	r2,-44(fp)
811350b8:	10000526 	beq	r2,zero,811350d0 <altera_avalon_jtag_uart_irq+0x244>
811350bc:	e0bff617 	ldw	r2,-40(fp)
811350c0:	10c01017 	ldw	r3,64(r2)
811350c4:	e0bff617 	ldw	r2,-40(fp)
811350c8:	10800f17 	ldw	r2,60(r2)
811350cc:	18bfd31e 	bne	r3,r2,8113501c <__reset+0xfb11501c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
811350d0:	e0bff517 	ldw	r2,-44(fp)
811350d4:	103f7926 	beq	r2,zero,81134ebc <__reset+0xfb114ebc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811350d8:	e0bff617 	ldw	r2,-40(fp)
811350dc:	10c00817 	ldw	r3,32(r2)
811350e0:	00bfff44 	movi	r2,-3
811350e4:	1886703a 	and	r3,r3,r2
811350e8:	e0bff617 	ldw	r2,-40(fp)
811350ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811350f0:	e0bff617 	ldw	r2,-40(fp)
811350f4:	10800017 	ldw	r2,0(r2)
811350f8:	10800104 	addi	r2,r2,4
811350fc:	1007883a 	mov	r3,r2
81135100:	e0bff617 	ldw	r2,-40(fp)
81135104:	10800817 	ldw	r2,32(r2)
81135108:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
8113510c:	e0bff717 	ldw	r2,-36(fp)
81135110:	10800104 	addi	r2,r2,4
81135114:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
81135118:	003f6806 	br	81134ebc <__reset+0xfb114ebc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
8113511c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
81135120:	0001883a 	nop
81135124:	e037883a 	mov	sp,fp
81135128:	dfc00117 	ldw	ra,4(sp)
8113512c:	df000017 	ldw	fp,0(sp)
81135130:	dec00204 	addi	sp,sp,8
81135134:	f800283a 	ret

81135138 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
81135138:	defff904 	addi	sp,sp,-28
8113513c:	de00012e 	bgeu	sp,et,81135144 <altera_avalon_jtag_uart_timeout+0xc>
81135140:	003b68fa 	trap	3
81135144:	dfc00615 	stw	ra,24(sp)
81135148:	df000515 	stw	fp,20(sp)
8113514c:	df000504 	addi	fp,sp,20
81135150:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
81135154:	e0bfff17 	ldw	r2,-4(fp)
81135158:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
8113515c:	e0bffb17 	ldw	r2,-20(fp)
81135160:	10800017 	ldw	r2,0(r2)
81135164:	10800104 	addi	r2,r2,4
81135168:	10800037 	ldwio	r2,0(r2)
8113516c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
81135170:	e0bffc17 	ldw	r2,-16(fp)
81135174:	1081000c 	andi	r2,r2,1024
81135178:	10000b26 	beq	r2,zero,811351a8 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
8113517c:	e0bffb17 	ldw	r2,-20(fp)
81135180:	10800017 	ldw	r2,0(r2)
81135184:	10800104 	addi	r2,r2,4
81135188:	1007883a 	mov	r3,r2
8113518c:	e0bffb17 	ldw	r2,-20(fp)
81135190:	10800817 	ldw	r2,32(r2)
81135194:	10810014 	ori	r2,r2,1024
81135198:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
8113519c:	e0bffb17 	ldw	r2,-20(fp)
811351a0:	10000915 	stw	zero,36(r2)
811351a4:	00002106 	br	8113522c <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
811351a8:	e0bffb17 	ldw	r2,-20(fp)
811351ac:	10c00917 	ldw	r3,36(r2)
811351b0:	00a00034 	movhi	r2,32768
811351b4:	10bfff04 	addi	r2,r2,-4
811351b8:	10c01c36 	bltu	r2,r3,8113522c <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
811351bc:	e0bffb17 	ldw	r2,-20(fp)
811351c0:	10800917 	ldw	r2,36(r2)
811351c4:	10c00044 	addi	r3,r2,1
811351c8:	e0bffb17 	ldw	r2,-20(fp)
811351cc:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
811351d0:	e0bffb17 	ldw	r2,-20(fp)
811351d4:	10c00917 	ldw	r3,36(r2)
811351d8:	e0bffb17 	ldw	r2,-20(fp)
811351dc:	10800117 	ldw	r2,4(r2)
811351e0:	18801236 	bltu	r3,r2,8113522c <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
811351e4:	e0bffb17 	ldw	r2,-20(fp)
811351e8:	10800c17 	ldw	r2,48(r2)
811351ec:	e0bffd15 	stw	r2,-12(fp)
811351f0:	00800104 	movi	r2,4
811351f4:	e0bffe0d 	sth	r2,-8(fp)
811351f8:	00800044 	movi	r2,1
811351fc:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81135200:	d0a07303 	ldbu	r2,-32308(gp)
81135204:	10803fcc 	andi	r2,r2,255
81135208:	10000826 	beq	r2,zero,8113522c <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
8113520c:	e0bffe0b 	ldhu	r2,-8(fp)
81135210:	e0fffe83 	ldbu	r3,-6(fp)
81135214:	e13ffec4 	addi	r4,fp,-5
81135218:	200f883a 	mov	r7,r4
8113521c:	180d883a 	mov	r6,r3
81135220:	100b883a 	mov	r5,r2
81135224:	e13ffd17 	ldw	r4,-12(fp)
81135228:	1129b180 	call	81129b18 <OSFlagPost>
8113522c:	d0a06a17 	ldw	r2,-32344(gp)
    }
  }

  return alt_ticks_per_second();
}
81135230:	e037883a 	mov	sp,fp
81135234:	dfc00117 	ldw	ra,4(sp)
81135238:	df000017 	ldw	fp,0(sp)
8113523c:	dec00204 	addi	sp,sp,8
81135240:	f800283a 	ret

81135244 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
81135244:	defffd04 	addi	sp,sp,-12
81135248:	de00012e 	bgeu	sp,et,81135250 <altera_avalon_jtag_uart_close+0xc>
8113524c:	003b68fa 	trap	3
81135250:	df000215 	stw	fp,8(sp)
81135254:	df000204 	addi	fp,sp,8
81135258:	e13ffe15 	stw	r4,-8(fp)
8113525c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81135260:	00000506 	br	81135278 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81135264:	e0bfff17 	ldw	r2,-4(fp)
81135268:	1090000c 	andi	r2,r2,16384
8113526c:	10000226 	beq	r2,zero,81135278 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
81135270:	00bffd44 	movi	r2,-11
81135274:	00000b06 	br	811352a4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
81135278:	e0bffe17 	ldw	r2,-8(fp)
8113527c:	10c01017 	ldw	r3,64(r2)
81135280:	e0bffe17 	ldw	r2,-8(fp)
81135284:	10800f17 	ldw	r2,60(r2)
81135288:	18800526 	beq	r3,r2,811352a0 <altera_avalon_jtag_uart_close+0x5c>
8113528c:	e0bffe17 	ldw	r2,-8(fp)
81135290:	10c00917 	ldw	r3,36(r2)
81135294:	e0bffe17 	ldw	r2,-8(fp)
81135298:	10800117 	ldw	r2,4(r2)
8113529c:	18bff136 	bltu	r3,r2,81135264 <__reset+0xfb115264>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
811352a0:	0005883a 	mov	r2,zero
}
811352a4:	e037883a 	mov	sp,fp
811352a8:	df000017 	ldw	fp,0(sp)
811352ac:	dec00104 	addi	sp,sp,4
811352b0:	f800283a 	ret

811352b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
811352b4:	defffa04 	addi	sp,sp,-24
811352b8:	de00012e 	bgeu	sp,et,811352c0 <altera_avalon_jtag_uart_ioctl+0xc>
811352bc:	003b68fa 	trap	3
811352c0:	df000515 	stw	fp,20(sp)
811352c4:	df000504 	addi	fp,sp,20
811352c8:	e13ffd15 	stw	r4,-12(fp)
811352cc:	e17ffe15 	stw	r5,-8(fp)
811352d0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
811352d4:	00bff9c4 	movi	r2,-25
811352d8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
811352dc:	e0bffe17 	ldw	r2,-8(fp)
811352e0:	10da8060 	cmpeqi	r3,r2,27137
811352e4:	1800031e 	bne	r3,zero,811352f4 <altera_avalon_jtag_uart_ioctl+0x40>
811352e8:	109a80a0 	cmpeqi	r2,r2,27138
811352ec:	1000181e 	bne	r2,zero,81135350 <altera_avalon_jtag_uart_ioctl+0x9c>
      rc = 0;
    }
    break;

  default:
    break;
811352f0:	00002906 	br	81135398 <altera_avalon_jtag_uart_ioctl+0xe4>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
811352f4:	e0bffd17 	ldw	r2,-12(fp)
811352f8:	10c00117 	ldw	r3,4(r2)
811352fc:	00a00034 	movhi	r2,32768
81135300:	10bfffc4 	addi	r2,r2,-1
81135304:	18802126 	beq	r3,r2,8113538c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
81135308:	e0bfff17 	ldw	r2,-4(fp)
8113530c:	10800017 	ldw	r2,0(r2)
81135310:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
81135314:	e0bffc17 	ldw	r2,-16(fp)
81135318:	10800090 	cmplti	r2,r2,2
8113531c:	1000061e 	bne	r2,zero,81135338 <altera_avalon_jtag_uart_ioctl+0x84>
81135320:	e0fffc17 	ldw	r3,-16(fp)
81135324:	00a00034 	movhi	r2,32768
81135328:	10bfffc4 	addi	r2,r2,-1
8113532c:	18800226 	beq	r3,r2,81135338 <altera_avalon_jtag_uart_ioctl+0x84>
81135330:	e0bffc17 	ldw	r2,-16(fp)
81135334:	00000206 	br	81135340 <altera_avalon_jtag_uart_ioctl+0x8c>
81135338:	00a00034 	movhi	r2,32768
8113533c:	10bfff84 	addi	r2,r2,-2
81135340:	e0fffd17 	ldw	r3,-12(fp)
81135344:	18800115 	stw	r2,4(r3)
      rc = 0;
81135348:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
8113534c:	00000f06 	br	8113538c <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
81135350:	e0bffd17 	ldw	r2,-12(fp)
81135354:	10c00117 	ldw	r3,4(r2)
81135358:	00a00034 	movhi	r2,32768
8113535c:	10bfffc4 	addi	r2,r2,-1
81135360:	18800c26 	beq	r3,r2,81135394 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
81135364:	e0bffd17 	ldw	r2,-12(fp)
81135368:	10c00917 	ldw	r3,36(r2)
8113536c:	e0bffd17 	ldw	r2,-12(fp)
81135370:	10800117 	ldw	r2,4(r2)
81135374:	1885803a 	cmpltu	r2,r3,r2
81135378:	10c03fcc 	andi	r3,r2,255
8113537c:	e0bfff17 	ldw	r2,-4(fp)
81135380:	10c00015 	stw	r3,0(r2)
      rc = 0;
81135384:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
81135388:	00000206 	br	81135394 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
8113538c:	0001883a 	nop
81135390:	00000106 	br	81135398 <altera_avalon_jtag_uart_ioctl+0xe4>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
81135394:	0001883a 	nop

  default:
    break;
  }

  return rc;
81135398:	e0bffb17 	ldw	r2,-20(fp)
}
8113539c:	e037883a 	mov	sp,fp
811353a0:	df000017 	ldw	fp,0(sp)
811353a4:	dec00104 	addi	sp,sp,4
811353a8:	f800283a 	ret

811353ac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
811353ac:	deffed04 	addi	sp,sp,-76
811353b0:	de00012e 	bgeu	sp,et,811353b8 <altera_avalon_jtag_uart_read+0xc>
811353b4:	003b68fa 	trap	3
811353b8:	dfc01215 	stw	ra,72(sp)
811353bc:	df001115 	stw	fp,68(sp)
811353c0:	df001104 	addi	fp,sp,68
811353c4:	e13ffc15 	stw	r4,-16(fp)
811353c8:	e17ffd15 	stw	r5,-12(fp)
811353cc:	e1bffe15 	stw	r6,-8(fp)
811353d0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
811353d4:	e0bffd17 	ldw	r2,-12(fp)
811353d8:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
811353dc:	e0bffc17 	ldw	r2,-16(fp)
811353e0:	10800a17 	ldw	r2,40(r2)
811353e4:	e0bff815 	stw	r2,-32(fp)
811353e8:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
811353ec:	e0bff90b 	ldhu	r2,-28(fp)
811353f0:	e0fffb04 	addi	r3,fp,-20
811353f4:	180d883a 	mov	r6,r3
811353f8:	100b883a 	mov	r5,r2
811353fc:	e13ff817 	ldw	r4,-32(fp)
81135400:	112d1900 	call	8112d190 <OSSemPend>

  while (space > 0)
81135404:	00006106 	br	8113558c <altera_avalon_jtag_uart_read+0x1e0>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
81135408:	e0bffc17 	ldw	r2,-16(fp)
8113540c:	10800d17 	ldw	r2,52(r2)
81135410:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
81135414:	e0bffc17 	ldw	r2,-16(fp)
81135418:	10800e17 	ldw	r2,56(r2)
8113541c:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
81135420:	e0fff317 	ldw	r3,-52(fp)
81135424:	e0bff417 	ldw	r2,-48(fp)
81135428:	18800536 	bltu	r3,r2,81135440 <altera_avalon_jtag_uart_read+0x94>
        n = in - out;
8113542c:	e0fff317 	ldw	r3,-52(fp)
81135430:	e0bff417 	ldw	r2,-48(fp)
81135434:	1885c83a 	sub	r2,r3,r2
81135438:	e0bff115 	stw	r2,-60(fp)
8113543c:	00000406 	br	81135450 <altera_avalon_jtag_uart_read+0xa4>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
81135440:	00c20004 	movi	r3,2048
81135444:	e0bff417 	ldw	r2,-48(fp)
81135448:	1885c83a 	sub	r2,r3,r2
8113544c:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81135450:	e0bff117 	ldw	r2,-60(fp)
81135454:	10001e26 	beq	r2,zero,811354d0 <altera_avalon_jtag_uart_read+0x124>
        break; /* No more data available */

      if (n > space)
81135458:	e0fffe17 	ldw	r3,-8(fp)
8113545c:	e0bff117 	ldw	r2,-60(fp)
81135460:	1880022e 	bgeu	r3,r2,8113546c <altera_avalon_jtag_uart_read+0xc0>
        n = space;
81135464:	e0bffe17 	ldw	r2,-8(fp)
81135468:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
8113546c:	e0bffc17 	ldw	r2,-16(fp)
81135470:	10c01104 	addi	r3,r2,68
81135474:	e0bff417 	ldw	r2,-48(fp)
81135478:	1885883a 	add	r2,r3,r2
8113547c:	e1bff117 	ldw	r6,-60(fp)
81135480:	100b883a 	mov	r5,r2
81135484:	e13ff017 	ldw	r4,-64(fp)
81135488:	1110e4c0 	call	81110e4c <memcpy>
      ptr   += n;
8113548c:	e0fff017 	ldw	r3,-64(fp)
81135490:	e0bff117 	ldw	r2,-60(fp)
81135494:	1885883a 	add	r2,r3,r2
81135498:	e0bff015 	stw	r2,-64(fp)
      space -= n;
8113549c:	e0fffe17 	ldw	r3,-8(fp)
811354a0:	e0bff117 	ldw	r2,-60(fp)
811354a4:	1885c83a 	sub	r2,r3,r2
811354a8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
811354ac:	e0fff417 	ldw	r3,-48(fp)
811354b0:	e0bff117 	ldw	r2,-60(fp)
811354b4:	1885883a 	add	r2,r3,r2
811354b8:	10c1ffcc 	andi	r3,r2,2047
811354bc:	e0bffc17 	ldw	r2,-16(fp)
811354c0:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
811354c4:	e0bffe17 	ldw	r2,-8(fp)
811354c8:	00bfcf16 	blt	zero,r2,81135408 <__reset+0xfb115408>
811354cc:	00000106 	br	811354d4 <altera_avalon_jtag_uart_read+0x128>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
811354d0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
811354d4:	e0fff017 	ldw	r3,-64(fp)
811354d8:	e0bffd17 	ldw	r2,-12(fp)
811354dc:	18802e1e 	bne	r3,r2,81135598 <altera_avalon_jtag_uart_read+0x1ec>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
811354e0:	e0bfff17 	ldw	r2,-4(fp)
811354e4:	1090000c 	andi	r2,r2,16384
811354e8:	10002d1e 	bne	r2,zero,811355a0 <altera_avalon_jtag_uart_read+0x1f4>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
811354ec:	d0a07303 	ldbu	r2,-32308(gp)
811354f0:	10803fcc 	andi	r2,r2,255
811354f4:	10800058 	cmpnei	r2,r2,1
811354f8:	1000161e 	bne	r2,zero,81135554 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
811354fc:	e0bffc17 	ldw	r2,-16(fp)
81135500:	10800c17 	ldw	r2,48(r2)
81135504:	e0bff215 	stw	r2,-56(fp)
81135508:	00800144 	movi	r2,5
8113550c:	e0bff98d 	sth	r2,-26(fp)
81135510:	00bfe0c4 	movi	r2,-125
81135514:	e0bffa05 	stb	r2,-24(fp)
81135518:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
8113551c:	d0a07303 	ldbu	r2,-32308(gp)
81135520:	10803fcc 	andi	r2,r2,255
81135524:	10001526 	beq	r2,zero,8113557c <altera_avalon_jtag_uart_read+0x1d0>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
81135528:	e0fff98b 	ldhu	r3,-26(fp)
8113552c:	e13ffa03 	ldbu	r4,-24(fp)
81135530:	e17ffa8b 	ldhu	r5,-22(fp)
81135534:	e0bffb44 	addi	r2,fp,-19
81135538:	d8800015 	stw	r2,0(sp)
8113553c:	280f883a 	mov	r7,r5
81135540:	200d883a 	mov	r6,r4
81135544:	180b883a 	mov	r5,r3
81135548:	e13ff217 	ldw	r4,-56(fp)
8113554c:	11294f00 	call	811294f0 <OSFlagPend>
81135550:	00000a06 	br	8113557c <altera_avalon_jtag_uart_read+0x1d0>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
81135554:	0001883a 	nop
81135558:	e0bffc17 	ldw	r2,-16(fp)
8113555c:	10c00d17 	ldw	r3,52(r2)
81135560:	e0bff317 	ldw	r2,-52(fp)
81135564:	1880051e 	bne	r3,r2,8113557c <altera_avalon_jtag_uart_read+0x1d0>
81135568:	e0bffc17 	ldw	r2,-16(fp)
8113556c:	10c00917 	ldw	r3,36(r2)
81135570:	e0bffc17 	ldw	r2,-16(fp)
81135574:	10800117 	ldw	r2,4(r2)
81135578:	18bff736 	bltu	r3,r2,81135558 <__reset+0xfb115558>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
8113557c:	e0bffc17 	ldw	r2,-16(fp)
81135580:	10c00d17 	ldw	r3,52(r2)
81135584:	e0bff317 	ldw	r2,-52(fp)
81135588:	18800726 	beq	r3,r2,811355a8 <altera_avalon_jtag_uart_read+0x1fc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
8113558c:	e0bffe17 	ldw	r2,-8(fp)
81135590:	00bf9d16 	blt	zero,r2,81135408 <__reset+0xfb115408>
81135594:	00000506 	br	811355ac <altera_avalon_jtag_uart_read+0x200>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
81135598:	0001883a 	nop
8113559c:	00000306 	br	811355ac <altera_avalon_jtag_uart_read+0x200>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
811355a0:	0001883a 	nop
811355a4:	00000106 	br	811355ac <altera_avalon_jtag_uart_read+0x200>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
811355a8:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
811355ac:	e0bffc17 	ldw	r2,-16(fp)
811355b0:	10800a17 	ldw	r2,40(r2)
811355b4:	1009883a 	mov	r4,r2
811355b8:	112d5180 	call	8112d518 <OSSemPost>

  if (ptr != buffer)
811355bc:	e0fff017 	ldw	r3,-64(fp)
811355c0:	e0bffd17 	ldw	r2,-12(fp)
811355c4:	18801826 	beq	r3,r2,81135628 <altera_avalon_jtag_uart_read+0x27c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811355c8:	0005303a 	rdctl	r2,status
811355cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811355d0:	e0fff717 	ldw	r3,-36(fp)
811355d4:	00bfff84 	movi	r2,-2
811355d8:	1884703a 	and	r2,r3,r2
811355dc:	1001703a 	wrctl	status,r2
  
  return context;
811355e0:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
811355e4:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
811355e8:	e0bffc17 	ldw	r2,-16(fp)
811355ec:	10800817 	ldw	r2,32(r2)
811355f0:	10c00054 	ori	r3,r2,1
811355f4:	e0bffc17 	ldw	r2,-16(fp)
811355f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811355fc:	e0bffc17 	ldw	r2,-16(fp)
81135600:	10800017 	ldw	r2,0(r2)
81135604:	10800104 	addi	r2,r2,4
81135608:	1007883a 	mov	r3,r2
8113560c:	e0bffc17 	ldw	r2,-16(fp)
81135610:	10800817 	ldw	r2,32(r2)
81135614:	18800035 	stwio	r2,0(r3)
81135618:	e0bff617 	ldw	r2,-40(fp)
8113561c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135620:	e0bff517 	ldw	r2,-44(fp)
81135624:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
81135628:	e0fff017 	ldw	r3,-64(fp)
8113562c:	e0bffd17 	ldw	r2,-12(fp)
81135630:	18800426 	beq	r3,r2,81135644 <altera_avalon_jtag_uart_read+0x298>
    return ptr - buffer;
81135634:	e0fff017 	ldw	r3,-64(fp)
81135638:	e0bffd17 	ldw	r2,-12(fp)
8113563c:	1885c83a 	sub	r2,r3,r2
81135640:	00000606 	br	8113565c <altera_avalon_jtag_uart_read+0x2b0>
  else if (flags & O_NONBLOCK)
81135644:	e0bfff17 	ldw	r2,-4(fp)
81135648:	1090000c 	andi	r2,r2,16384
8113564c:	10000226 	beq	r2,zero,81135658 <altera_avalon_jtag_uart_read+0x2ac>
    return -EWOULDBLOCK;
81135650:	00bffd44 	movi	r2,-11
81135654:	00000106 	br	8113565c <altera_avalon_jtag_uart_read+0x2b0>
  else
    return -EIO;
81135658:	00bffec4 	movi	r2,-5
}
8113565c:	e037883a 	mov	sp,fp
81135660:	dfc00117 	ldw	ra,4(sp)
81135664:	df000017 	ldw	fp,0(sp)
81135668:	dec00204 	addi	sp,sp,8
8113566c:	f800283a 	ret

81135670 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
81135670:	deffed04 	addi	sp,sp,-76
81135674:	de00012e 	bgeu	sp,et,8113567c <altera_avalon_jtag_uart_write+0xc>
81135678:	003b68fa 	trap	3
8113567c:	dfc01215 	stw	ra,72(sp)
81135680:	df001115 	stw	fp,68(sp)
81135684:	df001104 	addi	fp,sp,68
81135688:	e13ffc15 	stw	r4,-16(fp)
8113568c:	e17ffd15 	stw	r5,-12(fp)
81135690:	e1bffe15 	stw	r6,-8(fp)
81135694:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
81135698:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
8113569c:	e0bffd17 	ldw	r2,-12(fp)
811356a0:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
811356a4:	e0bffc17 	ldw	r2,-16(fp)
811356a8:	10800b17 	ldw	r2,44(r2)
811356ac:	e0bff815 	stw	r2,-32(fp)
811356b0:	e03ff90d 	sth	zero,-28(fp)
811356b4:	e0bff90b 	ldhu	r2,-28(fp)
811356b8:	e0fffb44 	addi	r3,fp,-19
811356bc:	180d883a 	mov	r6,r3
811356c0:	100b883a 	mov	r5,r2
811356c4:	e13ff817 	ldw	r4,-32(fp)
811356c8:	112d1900 	call	8112d190 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
811356cc:	00003706 	br	811357ac <altera_avalon_jtag_uart_write+0x13c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
811356d0:	e0bffc17 	ldw	r2,-16(fp)
811356d4:	10800f17 	ldw	r2,60(r2)
811356d8:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
811356dc:	e0bffc17 	ldw	r2,-16(fp)
811356e0:	10801017 	ldw	r2,64(r2)
811356e4:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
811356e8:	e0fff417 	ldw	r3,-48(fp)
811356ec:	e0bff017 	ldw	r2,-64(fp)
811356f0:	1880062e 	bgeu	r3,r2,8113570c <altera_avalon_jtag_uart_write+0x9c>
        n = out - 1 - in;
811356f4:	e0fff017 	ldw	r3,-64(fp)
811356f8:	e0bff417 	ldw	r2,-48(fp)
811356fc:	1885c83a 	sub	r2,r3,r2
81135700:	10bfffc4 	addi	r2,r2,-1
81135704:	e0bff115 	stw	r2,-60(fp)
81135708:	00000b06 	br	81135738 <altera_avalon_jtag_uart_write+0xc8>
      else if (out > 0)
8113570c:	e0bff017 	ldw	r2,-64(fp)
81135710:	10000526 	beq	r2,zero,81135728 <altera_avalon_jtag_uart_write+0xb8>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
81135714:	00c20004 	movi	r3,2048
81135718:	e0bff417 	ldw	r2,-48(fp)
8113571c:	1885c83a 	sub	r2,r3,r2
81135720:	e0bff115 	stw	r2,-60(fp)
81135724:	00000406 	br	81135738 <altera_avalon_jtag_uart_write+0xc8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
81135728:	00c1ffc4 	movi	r3,2047
8113572c:	e0bff417 	ldw	r2,-48(fp)
81135730:	1885c83a 	sub	r2,r3,r2
81135734:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
81135738:	e0bff117 	ldw	r2,-60(fp)
8113573c:	10001e26 	beq	r2,zero,811357b8 <altera_avalon_jtag_uart_write+0x148>
        break;

      if (n > count)
81135740:	e0fffe17 	ldw	r3,-8(fp)
81135744:	e0bff117 	ldw	r2,-60(fp)
81135748:	1880022e 	bgeu	r3,r2,81135754 <altera_avalon_jtag_uart_write+0xe4>
        n = count;
8113574c:	e0bffe17 	ldw	r2,-8(fp)
81135750:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
81135754:	e0bffc17 	ldw	r2,-16(fp)
81135758:	10c21104 	addi	r3,r2,2116
8113575c:	e0bff417 	ldw	r2,-48(fp)
81135760:	1885883a 	add	r2,r3,r2
81135764:	e1bff117 	ldw	r6,-60(fp)
81135768:	e17ffd17 	ldw	r5,-12(fp)
8113576c:	1009883a 	mov	r4,r2
81135770:	1110e4c0 	call	81110e4c <memcpy>
      ptr   += n;
81135774:	e0fffd17 	ldw	r3,-12(fp)
81135778:	e0bff117 	ldw	r2,-60(fp)
8113577c:	1885883a 	add	r2,r3,r2
81135780:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
81135784:	e0fffe17 	ldw	r3,-8(fp)
81135788:	e0bff117 	ldw	r2,-60(fp)
8113578c:	1885c83a 	sub	r2,r3,r2
81135790:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
81135794:	e0fff417 	ldw	r3,-48(fp)
81135798:	e0bff117 	ldw	r2,-60(fp)
8113579c:	1885883a 	add	r2,r3,r2
811357a0:	10c1ffcc 	andi	r3,r2,2047
811357a4:	e0bffc17 	ldw	r2,-16(fp)
811357a8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
811357ac:	e0bffe17 	ldw	r2,-8(fp)
811357b0:	00bfc716 	blt	zero,r2,811356d0 <__reset+0xfb1156d0>
811357b4:	00000106 	br	811357bc <altera_avalon_jtag_uart_write+0x14c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
811357b8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811357bc:	0005303a 	rdctl	r2,status
811357c0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811357c4:	e0fff717 	ldw	r3,-36(fp)
811357c8:	00bfff84 	movi	r2,-2
811357cc:	1884703a 	and	r2,r3,r2
811357d0:	1001703a 	wrctl	status,r2
  
  return context;
811357d4:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
811357d8:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
811357dc:	e0bffc17 	ldw	r2,-16(fp)
811357e0:	10800817 	ldw	r2,32(r2)
811357e4:	10c00094 	ori	r3,r2,2
811357e8:	e0bffc17 	ldw	r2,-16(fp)
811357ec:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
811357f0:	e0bffc17 	ldw	r2,-16(fp)
811357f4:	10800017 	ldw	r2,0(r2)
811357f8:	10800104 	addi	r2,r2,4
811357fc:	1007883a 	mov	r3,r2
81135800:	e0bffc17 	ldw	r2,-16(fp)
81135804:	10800817 	ldw	r2,32(r2)
81135808:	18800035 	stwio	r2,0(r3)
8113580c:	e0bff617 	ldw	r2,-40(fp)
81135810:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81135814:	e0bff317 	ldw	r2,-52(fp)
81135818:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
8113581c:	e0bffe17 	ldw	r2,-8(fp)
81135820:	00802a0e 	bge	zero,r2,811358cc <altera_avalon_jtag_uart_write+0x25c>
    {
      if (flags & O_NONBLOCK)
81135824:	e0bfff17 	ldw	r2,-4(fp)
81135828:	1090000c 	andi	r2,r2,16384
8113582c:	10002a1e 	bne	r2,zero,811358d8 <altera_avalon_jtag_uart_write+0x268>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
81135830:	d0a07303 	ldbu	r2,-32308(gp)
81135834:	10803fcc 	andi	r2,r2,255
81135838:	10800058 	cmpnei	r2,r2,1
8113583c:	1000161e 	bne	r2,zero,81135898 <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
81135840:	e0bffc17 	ldw	r2,-16(fp)
81135844:	10800c17 	ldw	r2,48(r2)
81135848:	e0bff515 	stw	r2,-44(fp)
8113584c:	00800184 	movi	r2,6
81135850:	e0bff98d 	sth	r2,-26(fp)
81135854:	00bfe0c4 	movi	r2,-125
81135858:	e0bffa05 	stb	r2,-24(fp)
8113585c:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81135860:	d0a07303 	ldbu	r2,-32308(gp)
81135864:	10803fcc 	andi	r2,r2,255
81135868:	10001526 	beq	r2,zero,811358c0 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
8113586c:	e0fff98b 	ldhu	r3,-26(fp)
81135870:	e13ffa03 	ldbu	r4,-24(fp)
81135874:	e17ffa8b 	ldhu	r5,-22(fp)
81135878:	e0bffb04 	addi	r2,fp,-20
8113587c:	d8800015 	stw	r2,0(sp)
81135880:	280f883a 	mov	r7,r5
81135884:	200d883a 	mov	r6,r4
81135888:	180b883a 	mov	r5,r3
8113588c:	e13ff517 	ldw	r4,-44(fp)
81135890:	11294f00 	call	811294f0 <OSFlagPend>
81135894:	00000a06 	br	811358c0 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
81135898:	0001883a 	nop
8113589c:	e0bffc17 	ldw	r2,-16(fp)
811358a0:	10c01017 	ldw	r3,64(r2)
811358a4:	e0bff017 	ldw	r2,-64(fp)
811358a8:	1880051e 	bne	r3,r2,811358c0 <altera_avalon_jtag_uart_write+0x250>
811358ac:	e0bffc17 	ldw	r2,-16(fp)
811358b0:	10c00917 	ldw	r3,36(r2)
811358b4:	e0bffc17 	ldw	r2,-16(fp)
811358b8:	10800117 	ldw	r2,4(r2)
811358bc:	18bff736 	bltu	r3,r2,8113589c <__reset+0xfb11589c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
811358c0:	e0bffc17 	ldw	r2,-16(fp)
811358c4:	10800917 	ldw	r2,36(r2)
811358c8:	1000051e 	bne	r2,zero,811358e0 <altera_avalon_jtag_uart_write+0x270>
         break;
    }
  }
  while (count > 0);
811358cc:	e0bffe17 	ldw	r2,-8(fp)
811358d0:	00bfb616 	blt	zero,r2,811357ac <__reset+0xfb1157ac>
811358d4:	00000306 	br	811358e4 <altera_avalon_jtag_uart_write+0x274>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
811358d8:	0001883a 	nop
811358dc:	00000106 	br	811358e4 <altera_avalon_jtag_uart_write+0x274>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
811358e0:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
811358e4:	e0bffc17 	ldw	r2,-16(fp)
811358e8:	10800b17 	ldw	r2,44(r2)
811358ec:	1009883a 	mov	r4,r2
811358f0:	112d5180 	call	8112d518 <OSSemPost>

  if (ptr != start)
811358f4:	e0fffd17 	ldw	r3,-12(fp)
811358f8:	e0bff217 	ldw	r2,-56(fp)
811358fc:	18800426 	beq	r3,r2,81135910 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
81135900:	e0fffd17 	ldw	r3,-12(fp)
81135904:	e0bff217 	ldw	r2,-56(fp)
81135908:	1885c83a 	sub	r2,r3,r2
8113590c:	00000606 	br	81135928 <altera_avalon_jtag_uart_write+0x2b8>
  else if (flags & O_NONBLOCK)
81135910:	e0bfff17 	ldw	r2,-4(fp)
81135914:	1090000c 	andi	r2,r2,16384
81135918:	10000226 	beq	r2,zero,81135924 <altera_avalon_jtag_uart_write+0x2b4>
    return -EWOULDBLOCK;
8113591c:	00bffd44 	movi	r2,-11
81135920:	00000106 	br	81135928 <altera_avalon_jtag_uart_write+0x2b8>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
81135924:	00bffec4 	movi	r2,-5
}
81135928:	e037883a 	mov	sp,fp
8113592c:	dfc00117 	ldw	ra,4(sp)
81135930:	df000017 	ldw	fp,0(sp)
81135934:	dec00204 	addi	sp,sp,8
81135938:	f800283a 	ret

8113593c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
8113593c:	defffa04 	addi	sp,sp,-24
81135940:	de00012e 	bgeu	sp,et,81135948 <alt_avalon_timer_sc_irq+0xc>
81135944:	003b68fa 	trap	3
81135948:	dfc00515 	stw	ra,20(sp)
8113594c:	df000415 	stw	fp,16(sp)
81135950:	df000404 	addi	fp,sp,16
81135954:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
81135958:	0007883a 	mov	r3,zero
8113595c:	e0bfff17 	ldw	r2,-4(fp)
81135960:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
81135964:	e0bfff17 	ldw	r2,-4(fp)
81135968:	10800104 	addi	r2,r2,4
8113596c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81135970:	0005303a 	rdctl	r2,status
81135974:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81135978:	e0fffd17 	ldw	r3,-12(fp)
8113597c:	00bfff84 	movi	r2,-2
81135980:	1884703a 	and	r2,r3,r2
81135984:	1001703a 	wrctl	status,r2
  
  return context;
81135988:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
8113598c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
81135990:	11262040 	call	81126204 <alt_tick>
81135994:	e0bffc17 	ldw	r2,-16(fp)
81135998:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113599c:	e0bffe17 	ldw	r2,-8(fp)
811359a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
811359a4:	0001883a 	nop
811359a8:	e037883a 	mov	sp,fp
811359ac:	dfc00117 	ldw	ra,4(sp)
811359b0:	df000017 	ldw	fp,0(sp)
811359b4:	dec00204 	addi	sp,sp,8
811359b8:	f800283a 	ret

811359bc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
811359bc:	defff804 	addi	sp,sp,-32
811359c0:	de00012e 	bgeu	sp,et,811359c8 <alt_avalon_timer_sc_init+0xc>
811359c4:	003b68fa 	trap	3
811359c8:	dfc00715 	stw	ra,28(sp)
811359cc:	df000615 	stw	fp,24(sp)
811359d0:	df000604 	addi	fp,sp,24
811359d4:	e13ffc15 	stw	r4,-16(fp)
811359d8:	e17ffd15 	stw	r5,-12(fp)
811359dc:	e1bffe15 	stw	r6,-8(fp)
811359e0:	e1ffff15 	stw	r7,-4(fp)
811359e4:	e0bfff17 	ldw	r2,-4(fp)
811359e8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
811359ec:	d0a06a17 	ldw	r2,-32344(gp)
811359f0:	1000021e 	bne	r2,zero,811359fc <alt_avalon_timer_sc_init+0x40>
  {
    _alt_tick_rate = nticks;
811359f4:	e0bffb17 	ldw	r2,-20(fp)
811359f8:	d0a06a15 	stw	r2,-32344(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
811359fc:	e0bffc17 	ldw	r2,-16(fp)
81135a00:	10800104 	addi	r2,r2,4
81135a04:	00c001c4 	movi	r3,7
81135a08:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
81135a0c:	d8000015 	stw	zero,0(sp)
81135a10:	e1fffc17 	ldw	r7,-16(fp)
81135a14:	01a044f4 	movhi	r6,33043
81135a18:	31964f04 	addi	r6,r6,22844
81135a1c:	e17ffe17 	ldw	r5,-8(fp)
81135a20:	e13ffd17 	ldw	r4,-12(fp)
81135a24:	1138c900 	call	81138c90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
81135a28:	0001883a 	nop
81135a2c:	e037883a 	mov	sp,fp
81135a30:	dfc00117 	ldw	ra,4(sp)
81135a34:	df000017 	ldw	fp,0(sp)
81135a38:	dec00204 	addi	sp,sp,8
81135a3c:	f800283a 	ret

81135a40 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
81135a40:	defffa04 	addi	sp,sp,-24
81135a44:	de00012e 	bgeu	sp,et,81135a4c <altera_avalon_uart_read_fd+0xc>
81135a48:	003b68fa 	trap	3
81135a4c:	dfc00515 	stw	ra,20(sp)
81135a50:	df000415 	stw	fp,16(sp)
81135a54:	df000404 	addi	fp,sp,16
81135a58:	e13ffd15 	stw	r4,-12(fp)
81135a5c:	e17ffe15 	stw	r5,-8(fp)
81135a60:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81135a64:	e0bffd17 	ldw	r2,-12(fp)
81135a68:	10800017 	ldw	r2,0(r2)
81135a6c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
81135a70:	e0bffc17 	ldw	r2,-16(fp)
81135a74:	10c00a04 	addi	r3,r2,40
81135a78:	e0bffd17 	ldw	r2,-12(fp)
81135a7c:	10800217 	ldw	r2,8(r2)
81135a80:	100f883a 	mov	r7,r2
81135a84:	e1bfff17 	ldw	r6,-4(fp)
81135a88:	e17ffe17 	ldw	r5,-8(fp)
81135a8c:	1809883a 	mov	r4,r3
81135a90:	11361000 	call	81136100 <altera_avalon_uart_read>
      fd->fd_flags);
}
81135a94:	e037883a 	mov	sp,fp
81135a98:	dfc00117 	ldw	ra,4(sp)
81135a9c:	df000017 	ldw	fp,0(sp)
81135aa0:	dec00204 	addi	sp,sp,8
81135aa4:	f800283a 	ret

81135aa8 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
81135aa8:	defffa04 	addi	sp,sp,-24
81135aac:	de00012e 	bgeu	sp,et,81135ab4 <altera_avalon_uart_write_fd+0xc>
81135ab0:	003b68fa 	trap	3
81135ab4:	dfc00515 	stw	ra,20(sp)
81135ab8:	df000415 	stw	fp,16(sp)
81135abc:	df000404 	addi	fp,sp,16
81135ac0:	e13ffd15 	stw	r4,-12(fp)
81135ac4:	e17ffe15 	stw	r5,-8(fp)
81135ac8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81135acc:	e0bffd17 	ldw	r2,-12(fp)
81135ad0:	10800017 	ldw	r2,0(r2)
81135ad4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
81135ad8:	e0bffc17 	ldw	r2,-16(fp)
81135adc:	10c00a04 	addi	r3,r2,40
81135ae0:	e0bffd17 	ldw	r2,-12(fp)
81135ae4:	10800217 	ldw	r2,8(r2)
81135ae8:	100f883a 	mov	r7,r2
81135aec:	e1bfff17 	ldw	r6,-4(fp)
81135af0:	e17ffe17 	ldw	r5,-8(fp)
81135af4:	1809883a 	mov	r4,r3
81135af8:	11363b40 	call	811363b4 <altera_avalon_uart_write>
      fd->fd_flags);
}
81135afc:	e037883a 	mov	sp,fp
81135b00:	dfc00117 	ldw	ra,4(sp)
81135b04:	df000017 	ldw	fp,0(sp)
81135b08:	dec00204 	addi	sp,sp,8
81135b0c:	f800283a 	ret

81135b10 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
81135b10:	defffc04 	addi	sp,sp,-16
81135b14:	de00012e 	bgeu	sp,et,81135b1c <altera_avalon_uart_close_fd+0xc>
81135b18:	003b68fa 	trap	3
81135b1c:	dfc00315 	stw	ra,12(sp)
81135b20:	df000215 	stw	fp,8(sp)
81135b24:	df000204 	addi	fp,sp,8
81135b28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
81135b2c:	e0bfff17 	ldw	r2,-4(fp)
81135b30:	10800017 	ldw	r2,0(r2)
81135b34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
81135b38:	e0bffe17 	ldw	r2,-8(fp)
81135b3c:	10c00a04 	addi	r3,r2,40
81135b40:	e0bfff17 	ldw	r2,-4(fp)
81135b44:	10800217 	ldw	r2,8(r2)
81135b48:	100b883a 	mov	r5,r2
81135b4c:	1809883a 	mov	r4,r3
81135b50:	11360600 	call	81136060 <altera_avalon_uart_close>
}
81135b54:	e037883a 	mov	sp,fp
81135b58:	dfc00117 	ldw	ra,4(sp)
81135b5c:	df000017 	ldw	fp,0(sp)
81135b60:	dec00204 	addi	sp,sp,8
81135b64:	f800283a 	ret

81135b68 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
81135b68:	defff304 	addi	sp,sp,-52
81135b6c:	de00012e 	bgeu	sp,et,81135b74 <altera_avalon_uart_init+0xc>
81135b70:	003b68fa 	trap	3
81135b74:	dfc00c15 	stw	ra,48(sp)
81135b78:	df000b15 	stw	fp,44(sp)
81135b7c:	df000b04 	addi	fp,sp,44
81135b80:	e13ffd15 	stw	r4,-12(fp)
81135b84:	e17ffe15 	stw	r5,-8(fp)
81135b88:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
81135b8c:	e0bffd17 	ldw	r2,-12(fp)
81135b90:	10800017 	ldw	r2,0(r2)
81135b94:	e0bff615 	stw	r2,-40(fp)
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81135b98:	e0bffd17 	ldw	r2,-12(fp)
81135b9c:	10800704 	addi	r2,r2,28
81135ba0:	e0bffa15 	stw	r2,-24(fp)
81135ba4:	e03ffb0d 	sth	zero,-20(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
81135ba8:	e0bffb0b 	ldhu	r2,-20(fp)
81135bac:	e0fffc84 	addi	r3,fp,-14
81135bb0:	180b883a 	mov	r5,r3
81135bb4:	1009883a 	mov	r4,r2
81135bb8:	1128f0c0 	call	81128f0c <OSFlagCreate>
81135bbc:	1007883a 	mov	r3,r2
81135bc0:	e0bffa17 	ldw	r2,-24(fp)
81135bc4:	10c00015 	stw	r3,0(r2)
  return err;
81135bc8:	e0bffc83 	ldbu	r2,-14(fp)
81135bcc:	10803fcc 	andi	r2,r2,255
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81135bd0:	1000241e 	bne	r2,zero,81135c64 <altera_avalon_uart_init+0xfc>
81135bd4:	e0bffd17 	ldw	r2,-12(fp)
81135bd8:	10800804 	addi	r2,r2,32
81135bdc:	e0bff715 	stw	r2,-36(fp)
81135be0:	00800044 	movi	r2,1
81135be4:	e0bffb8d 	sth	r2,-18(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81135be8:	e0bffb8b 	ldhu	r2,-18(fp)
81135bec:	1009883a 	mov	r4,r2
81135bf0:	112ce680 	call	8112ce68 <OSSemCreate>
81135bf4:	1007883a 	mov	r3,r2
81135bf8:	e0bff717 	ldw	r2,-36(fp)
81135bfc:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81135c00:	e0bff717 	ldw	r2,-36(fp)
81135c04:	10800017 	ldw	r2,0(r2)
81135c08:	10000226 	beq	r2,zero,81135c14 <altera_avalon_uart_init+0xac>
81135c0c:	0005883a 	mov	r2,zero
81135c10:	00000106 	br	81135c18 <altera_avalon_uart_init+0xb0>
81135c14:	00bfffc4 	movi	r2,-1
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81135c18:	1000121e 	bne	r2,zero,81135c64 <altera_avalon_uart_init+0xfc>
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);
81135c1c:	e0bffd17 	ldw	r2,-12(fp)
81135c20:	10800904 	addi	r2,r2,36
81135c24:	e0bff815 	stw	r2,-32(fp)
81135c28:	00800044 	movi	r2,1
81135c2c:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81135c30:	e0bffc0b 	ldhu	r2,-16(fp)
81135c34:	1009883a 	mov	r4,r2
81135c38:	112ce680 	call	8112ce68 <OSSemCreate>
81135c3c:	1007883a 	mov	r3,r2
81135c40:	e0bff817 	ldw	r2,-32(fp)
81135c44:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
81135c48:	e0bff817 	ldw	r2,-32(fp)
81135c4c:	10800017 	ldw	r2,0(r2)
81135c50:	10000226 	beq	r2,zero,81135c5c <altera_avalon_uart_init+0xf4>
81135c54:	0005883a 	mov	r2,zero
81135c58:	00000106 	br	81135c60 <altera_avalon_uart_init+0xf8>
81135c5c:	00bfffc4 	movi	r2,-1
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
81135c60:	10000226 	beq	r2,zero,81135c6c <altera_avalon_uart_init+0x104>
81135c64:	00800044 	movi	r2,1
81135c68:	00000106 	br	81135c70 <altera_avalon_uart_init+0x108>
81135c6c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
81135c70:	e0bff915 	stw	r2,-28(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
81135c74:	e0bff917 	ldw	r2,-28(fp)
81135c78:	10000f1e 	bne	r2,zero,81135cb8 <altera_avalon_uart_init+0x150>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
81135c7c:	e0bffd17 	ldw	r2,-12(fp)
81135c80:	00c32004 	movi	r3,3200
81135c84:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
81135c88:	e0bff617 	ldw	r2,-40(fp)
81135c8c:	10800304 	addi	r2,r2,12
81135c90:	e0fffd17 	ldw	r3,-12(fp)
81135c94:	18c00117 	ldw	r3,4(r3)
81135c98:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
81135c9c:	d8000015 	stw	zero,0(sp)
81135ca0:	e1fffd17 	ldw	r7,-12(fp)
81135ca4:	01a044f4 	movhi	r6,33043
81135ca8:	31973404 	addi	r6,r6,23760
81135cac:	e17fff17 	ldw	r5,-4(fp)
81135cb0:	e13ffe17 	ldw	r4,-8(fp)
81135cb4:	1138c900 	call	81138c90 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
81135cb8:	0001883a 	nop
81135cbc:	e037883a 	mov	sp,fp
81135cc0:	dfc00117 	ldw	ra,4(sp)
81135cc4:	df000017 	ldw	fp,0(sp)
81135cc8:	dec00204 	addi	sp,sp,8
81135ccc:	f800283a 	ret

81135cd0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
81135cd0:	defffa04 	addi	sp,sp,-24
81135cd4:	de00012e 	bgeu	sp,et,81135cdc <altera_avalon_uart_irq+0xc>
81135cd8:	003b68fa 	trap	3
81135cdc:	dfc00515 	stw	ra,20(sp)
81135ce0:	df000415 	stw	fp,16(sp)
81135ce4:	df000404 	addi	fp,sp,16
81135ce8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
81135cec:	e0bfff17 	ldw	r2,-4(fp)
81135cf0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
81135cf4:	e0bffc17 	ldw	r2,-16(fp)
81135cf8:	10800017 	ldw	r2,0(r2)
81135cfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
81135d00:	e0bffd17 	ldw	r2,-12(fp)
81135d04:	10800204 	addi	r2,r2,8
81135d08:	10800037 	ldwio	r2,0(r2)
81135d0c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
81135d10:	e0bffd17 	ldw	r2,-12(fp)
81135d14:	10800204 	addi	r2,r2,8
81135d18:	0007883a 	mov	r3,zero
81135d1c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
81135d20:	e0bffd17 	ldw	r2,-12(fp)
81135d24:	10800204 	addi	r2,r2,8
81135d28:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
81135d2c:	e0bffe17 	ldw	r2,-8(fp)
81135d30:	1080200c 	andi	r2,r2,128
81135d34:	10000326 	beq	r2,zero,81135d44 <altera_avalon_uart_irq+0x74>
  {
    altera_avalon_uart_rxirq(sp, status);
81135d38:	e17ffe17 	ldw	r5,-8(fp)
81135d3c:	e13ffc17 	ldw	r4,-16(fp)
81135d40:	1135d740 	call	81135d74 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
81135d44:	e0bffe17 	ldw	r2,-8(fp)
81135d48:	1081100c 	andi	r2,r2,1088
81135d4c:	10000326 	beq	r2,zero,81135d5c <altera_avalon_uart_irq+0x8c>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
81135d50:	e17ffe17 	ldw	r5,-8(fp)
81135d54:	e13ffc17 	ldw	r4,-16(fp)
81135d58:	1135eb40 	call	81135eb4 <altera_avalon_uart_txirq>
  }
  

}
81135d5c:	0001883a 	nop
81135d60:	e037883a 	mov	sp,fp
81135d64:	dfc00117 	ldw	ra,4(sp)
81135d68:	df000017 	ldw	fp,0(sp)
81135d6c:	dec00204 	addi	sp,sp,8
81135d70:	f800283a 	ret

81135d74 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81135d74:	defff904 	addi	sp,sp,-28
81135d78:	de00012e 	bgeu	sp,et,81135d80 <altera_avalon_uart_rxirq+0xc>
81135d7c:	003b68fa 	trap	3
81135d80:	dfc00615 	stw	ra,24(sp)
81135d84:	df000515 	stw	fp,20(sp)
81135d88:	df000504 	addi	fp,sp,20
81135d8c:	e13ffe15 	stw	r4,-8(fp)
81135d90:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
81135d94:	e0bfff17 	ldw	r2,-4(fp)
81135d98:	108000cc 	andi	r2,r2,3
81135d9c:	10003f1e 	bne	r2,zero,81135e9c <altera_avalon_uart_rxirq+0x128>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
81135da0:	e0bffe17 	ldw	r2,-8(fp)
81135da4:	10c00317 	ldw	r3,12(r2)
81135da8:	e0bffe17 	ldw	r2,-8(fp)
81135dac:	10800217 	ldw	r2,8(r2)
81135db0:	1880121e 	bne	r3,r2,81135dfc <altera_avalon_uart_rxirq+0x88>
  {
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
81135db4:	e0bffe17 	ldw	r2,-8(fp)
81135db8:	10800717 	ldw	r2,28(r2)
81135dbc:	e0bffc15 	stw	r2,-16(fp)
81135dc0:	00800044 	movi	r2,1
81135dc4:	e0bffd0d 	sth	r2,-12(fp)
81135dc8:	00800044 	movi	r2,1
81135dcc:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81135dd0:	d0a07303 	ldbu	r2,-32308(gp)
81135dd4:	10803fcc 	andi	r2,r2,255
81135dd8:	10000826 	beq	r2,zero,81135dfc <altera_avalon_uart_rxirq+0x88>
  {
    OSFlagPost (group, flags, opt, &err);
81135ddc:	e0bffd0b 	ldhu	r2,-12(fp)
81135de0:	e0fffd83 	ldbu	r3,-10(fp)
81135de4:	e13ffdc4 	addi	r4,fp,-9
81135de8:	200f883a 	mov	r7,r4
81135dec:	180d883a 	mov	r6,r3
81135df0:	100b883a 	mov	r5,r2
81135df4:	e13ffc17 	ldw	r4,-16(fp)
81135df8:	1129b180 	call	81129b18 <OSFlagPost>
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81135dfc:	e0bffe17 	ldw	r2,-8(fp)
81135e00:	10800317 	ldw	r2,12(r2)
81135e04:	10800044 	addi	r2,r2,1
81135e08:	10800fcc 	andi	r2,r2,63
81135e0c:	e0bffb15 	stw	r2,-20(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
81135e10:	e0bffe17 	ldw	r2,-8(fp)
81135e14:	10800317 	ldw	r2,12(r2)
81135e18:	e0fffe17 	ldw	r3,-8(fp)
81135e1c:	18c00017 	ldw	r3,0(r3)
81135e20:	18c00037 	ldwio	r3,0(r3)
81135e24:	1809883a 	mov	r4,r3
81135e28:	e0fffe17 	ldw	r3,-8(fp)
81135e2c:	1885883a 	add	r2,r3,r2
81135e30:	10800a04 	addi	r2,r2,40
81135e34:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
81135e38:	e0bffe17 	ldw	r2,-8(fp)
81135e3c:	e0fffb17 	ldw	r3,-20(fp)
81135e40:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
81135e44:	e0bffe17 	ldw	r2,-8(fp)
81135e48:	10800317 	ldw	r2,12(r2)
81135e4c:	10800044 	addi	r2,r2,1
81135e50:	10800fcc 	andi	r2,r2,63
81135e54:	e0bffb15 	stw	r2,-20(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
81135e58:	e0bffe17 	ldw	r2,-8(fp)
81135e5c:	10c00217 	ldw	r3,8(r2)
81135e60:	e0bffb17 	ldw	r2,-20(fp)
81135e64:	18800e1e 	bne	r3,r2,81135ea0 <altera_avalon_uart_rxirq+0x12c>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
81135e68:	e0bffe17 	ldw	r2,-8(fp)
81135e6c:	10c00117 	ldw	r3,4(r2)
81135e70:	00bfdfc4 	movi	r2,-129
81135e74:	1886703a 	and	r3,r3,r2
81135e78:	e0bffe17 	ldw	r2,-8(fp)
81135e7c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
81135e80:	e0bffe17 	ldw	r2,-8(fp)
81135e84:	10800017 	ldw	r2,0(r2)
81135e88:	10800304 	addi	r2,r2,12
81135e8c:	e0fffe17 	ldw	r3,-8(fp)
81135e90:	18c00117 	ldw	r3,4(r3)
81135e94:	10c00035 	stwio	r3,0(r2)
81135e98:	00000106 	br	81135ea0 <altera_avalon_uart_rxirq+0x12c>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
81135e9c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
81135ea0:	e037883a 	mov	sp,fp
81135ea4:	dfc00117 	ldw	ra,4(sp)
81135ea8:	df000017 	ldw	fp,0(sp)
81135eac:	dec00204 	addi	sp,sp,8
81135eb0:	f800283a 	ret

81135eb4 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
81135eb4:	defffa04 	addi	sp,sp,-24
81135eb8:	de00012e 	bgeu	sp,et,81135ec0 <altera_avalon_uart_txirq+0xc>
81135ebc:	003b68fa 	trap	3
81135ec0:	dfc00515 	stw	ra,20(sp)
81135ec4:	df000415 	stw	fp,16(sp)
81135ec8:	df000404 	addi	fp,sp,16
81135ecc:	e13ffe15 	stw	r4,-8(fp)
81135ed0:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
81135ed4:	e0bffe17 	ldw	r2,-8(fp)
81135ed8:	10c00417 	ldw	r3,16(r2)
81135edc:	e0bffe17 	ldw	r2,-8(fp)
81135ee0:	10800517 	ldw	r2,20(r2)
81135ee4:	18804726 	beq	r3,r2,81136004 <altera_avalon_uart_txirq+0x150>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81135ee8:	e0bffe17 	ldw	r2,-8(fp)
81135eec:	10800617 	ldw	r2,24(r2)
81135ef0:	1080008c 	andi	r2,r2,2
81135ef4:	10000326 	beq	r2,zero,81135f04 <altera_avalon_uart_txirq+0x50>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81135ef8:	e0bfff17 	ldw	r2,-4(fp)
81135efc:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
81135f00:	10003226 	beq	r2,zero,81135fcc <altera_avalon_uart_txirq+0x118>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
81135f04:	e0bffe17 	ldw	r2,-8(fp)
81135f08:	10c00417 	ldw	r3,16(r2)
81135f0c:	e0bffe17 	ldw	r2,-8(fp)
81135f10:	10800517 	ldw	r2,20(r2)
81135f14:	10800044 	addi	r2,r2,1
81135f18:	10800fcc 	andi	r2,r2,63
81135f1c:	1880121e 	bne	r3,r2,81135f68 <altera_avalon_uart_txirq+0xb4>
      { 
        ALT_FLAG_POST (sp->events, 
81135f20:	e0bffe17 	ldw	r2,-8(fp)
81135f24:	10800717 	ldw	r2,28(r2)
81135f28:	e0bffc15 	stw	r2,-16(fp)
81135f2c:	00800084 	movi	r2,2
81135f30:	e0bffd0d 	sth	r2,-12(fp)
81135f34:	00800044 	movi	r2,1
81135f38:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
81135f3c:	d0a07303 	ldbu	r2,-32308(gp)
81135f40:	10803fcc 	andi	r2,r2,255
81135f44:	10000826 	beq	r2,zero,81135f68 <altera_avalon_uart_txirq+0xb4>
  {
    OSFlagPost (group, flags, opt, &err);
81135f48:	e0bffd0b 	ldhu	r2,-12(fp)
81135f4c:	e0fffd83 	ldbu	r3,-10(fp)
81135f50:	e13ffdc4 	addi	r4,fp,-9
81135f54:	200f883a 	mov	r7,r4
81135f58:	180d883a 	mov	r6,r3
81135f5c:	100b883a 	mov	r5,r2
81135f60:	e13ffc17 	ldw	r4,-16(fp)
81135f64:	1129b180 	call	81129b18 <OSFlagPost>
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
81135f68:	e0bffe17 	ldw	r2,-8(fp)
81135f6c:	10800017 	ldw	r2,0(r2)
81135f70:	10800104 	addi	r2,r2,4
81135f74:	e0fffe17 	ldw	r3,-8(fp)
81135f78:	18c00417 	ldw	r3,16(r3)
81135f7c:	e13ffe17 	ldw	r4,-8(fp)
81135f80:	20c7883a 	add	r3,r4,r3
81135f84:	18c01a04 	addi	r3,r3,104
81135f88:	18c00003 	ldbu	r3,0(r3)
81135f8c:	18c03fcc 	andi	r3,r3,255
81135f90:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
81135f94:	e0bffe17 	ldw	r2,-8(fp)
81135f98:	10800417 	ldw	r2,16(r2)
81135f9c:	10800044 	addi	r2,r2,1
81135fa0:	e0fffe17 	ldw	r3,-8(fp)
81135fa4:	18800415 	stw	r2,16(r3)
81135fa8:	10c00fcc 	andi	r3,r2,63
81135fac:	e0bffe17 	ldw	r2,-8(fp)
81135fb0:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81135fb4:	e0bffe17 	ldw	r2,-8(fp)
81135fb8:	10800117 	ldw	r2,4(r2)
81135fbc:	10c01014 	ori	r3,r2,64
81135fc0:	e0bffe17 	ldw	r2,-8(fp)
81135fc4:	10c00115 	stw	r3,4(r2)
81135fc8:	00000e06 	br	81136004 <altera_avalon_uart_txirq+0x150>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
81135fcc:	e0bffe17 	ldw	r2,-8(fp)
81135fd0:	10800017 	ldw	r2,0(r2)
81135fd4:	10800204 	addi	r2,r2,8
81135fd8:	10800037 	ldwio	r2,0(r2)
81135fdc:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
81135fe0:	e0bfff17 	ldw	r2,-4(fp)
81135fe4:	1082000c 	andi	r2,r2,2048
81135fe8:	1000061e 	bne	r2,zero,81136004 <altera_avalon_uart_txirq+0x150>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
81135fec:	e0bffe17 	ldw	r2,-8(fp)
81135ff0:	10c00117 	ldw	r3,4(r2)
81135ff4:	00bfefc4 	movi	r2,-65
81135ff8:	1886703a 	and	r3,r3,r2
81135ffc:	e0bffe17 	ldw	r2,-8(fp)
81136000:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
81136004:	e0bffe17 	ldw	r2,-8(fp)
81136008:	10c00417 	ldw	r3,16(r2)
8113600c:	e0bffe17 	ldw	r2,-8(fp)
81136010:	10800517 	ldw	r2,20(r2)
81136014:	1880061e 	bne	r3,r2,81136030 <altera_avalon_uart_txirq+0x17c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81136018:	e0bffe17 	ldw	r2,-8(fp)
8113601c:	10c00117 	ldw	r3,4(r2)
81136020:	00beefc4 	movi	r2,-1089
81136024:	1886703a 	and	r3,r3,r2
81136028:	e0bffe17 	ldw	r2,-8(fp)
8113602c:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81136030:	e0bffe17 	ldw	r2,-8(fp)
81136034:	10800017 	ldw	r2,0(r2)
81136038:	10800304 	addi	r2,r2,12
8113603c:	e0fffe17 	ldw	r3,-8(fp)
81136040:	18c00117 	ldw	r3,4(r3)
81136044:	10c00035 	stwio	r3,0(r2)
}
81136048:	0001883a 	nop
8113604c:	e037883a 	mov	sp,fp
81136050:	dfc00117 	ldw	ra,4(sp)
81136054:	df000017 	ldw	fp,0(sp)
81136058:	dec00204 	addi	sp,sp,8
8113605c:	f800283a 	ret

81136060 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
81136060:	defffd04 	addi	sp,sp,-12
81136064:	de00012e 	bgeu	sp,et,8113606c <altera_avalon_uart_close+0xc>
81136068:	003b68fa 	trap	3
8113606c:	df000215 	stw	fp,8(sp)
81136070:	df000204 	addi	fp,sp,8
81136074:	e13ffe15 	stw	r4,-8(fp)
81136078:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
8113607c:	00000506 	br	81136094 <altera_avalon_uart_close+0x34>
    if (flags & O_NONBLOCK) {
81136080:	e0bfff17 	ldw	r2,-4(fp)
81136084:	1090000c 	andi	r2,r2,16384
81136088:	10000226 	beq	r2,zero,81136094 <altera_avalon_uart_close+0x34>
      return -EWOULDBLOCK; 
8113608c:	00bffd44 	movi	r2,-11
81136090:	00000606 	br	811360ac <altera_avalon_uart_close+0x4c>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
81136094:	e0bffe17 	ldw	r2,-8(fp)
81136098:	10c00417 	ldw	r3,16(r2)
8113609c:	e0bffe17 	ldw	r2,-8(fp)
811360a0:	10800517 	ldw	r2,20(r2)
811360a4:	18bff61e 	bne	r3,r2,81136080 <__reset+0xfb116080>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
811360a8:	0005883a 	mov	r2,zero
}
811360ac:	e037883a 	mov	sp,fp
811360b0:	df000017 	ldw	fp,0(sp)
811360b4:	dec00104 	addi	sp,sp,4
811360b8:	f800283a 	ret

811360bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811360bc:	defffe04 	addi	sp,sp,-8
811360c0:	de00012e 	bgeu	sp,et,811360c8 <alt_get_errno+0xc>
811360c4:	003b68fa 	trap	3
811360c8:	dfc00115 	stw	ra,4(sp)
811360cc:	df000015 	stw	fp,0(sp)
811360d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
811360d4:	d0a01017 	ldw	r2,-32704(gp)
811360d8:	10000326 	beq	r2,zero,811360e8 <alt_get_errno+0x2c>
811360dc:	d0a01017 	ldw	r2,-32704(gp)
811360e0:	103ee83a 	callr	r2
811360e4:	00000106 	br	811360ec <alt_get_errno+0x30>
811360e8:	d0a05e04 	addi	r2,gp,-32392
}
811360ec:	e037883a 	mov	sp,fp
811360f0:	dfc00117 	ldw	ra,4(sp)
811360f4:	df000017 	ldw	fp,0(sp)
811360f8:	dec00204 	addi	sp,sp,8
811360fc:	f800283a 	ret

81136100 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
81136100:	deffec04 	addi	sp,sp,-80
81136104:	de00012e 	bgeu	sp,et,8113610c <altera_avalon_uart_read+0xc>
81136108:	003b68fa 	trap	3
8113610c:	dfc01315 	stw	ra,76(sp)
81136110:	df001215 	stw	fp,72(sp)
81136114:	df001204 	addi	fp,sp,72
81136118:	e13ffc15 	stw	r4,-16(fp)
8113611c:	e17ffd15 	stw	r5,-12(fp)
81136120:	e1bffe15 	stw	r6,-8(fp)
81136124:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
81136128:	e03fef05 	stb	zero,-68(fp)
  int             count = 0;
8113612c:	e03ff015 	stw	zero,-64(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
81136130:	e0bfff17 	ldw	r2,-4(fp)
81136134:	1090000c 	andi	r2,r2,16384
81136138:	1005003a 	cmpeq	r2,r2,zero
8113613c:	10803fcc 	andi	r2,r2,255
81136140:	e0bff115 	stw	r2,-60(fp)
  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (sp->read_lock, 0);
81136144:	e0bffc17 	ldw	r2,-16(fp)
81136148:	10800817 	ldw	r2,32(r2)
8113614c:	e0bff815 	stw	r2,-32(fp)
81136150:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81136154:	e0bff90b 	ldhu	r2,-28(fp)
81136158:	e0fffb44 	addi	r3,fp,-19
8113615c:	180d883a 	mov	r6,r3
81136160:	100b883a 	mov	r5,r2
81136164:	e13ff817 	ldw	r4,-32(fp)
81136168:	112d1900 	call	8112d190 <OSSemPend>
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
8113616c:	00001306 	br	811361bc <altera_avalon_uart_read+0xbc>
    {
      count++;
81136170:	e0bff017 	ldw	r2,-64(fp)
81136174:	10800044 	addi	r2,r2,1
81136178:	e0bff015 	stw	r2,-64(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
8113617c:	e0bffd17 	ldw	r2,-12(fp)
81136180:	10c00044 	addi	r3,r2,1
81136184:	e0fffd15 	stw	r3,-12(fp)
81136188:	e0fffc17 	ldw	r3,-16(fp)
8113618c:	18c00217 	ldw	r3,8(r3)
81136190:	e13ffc17 	ldw	r4,-16(fp)
81136194:	20c7883a 	add	r3,r4,r3
81136198:	18c00a04 	addi	r3,r3,40
8113619c:	18c00003 	ldbu	r3,0(r3)
811361a0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
811361a4:	e0bffc17 	ldw	r2,-16(fp)
811361a8:	10800217 	ldw	r2,8(r2)
811361ac:	10800044 	addi	r2,r2,1
811361b0:	10c00fcc 	andi	r3,r2,63
811361b4:	e0bffc17 	ldw	r2,-16(fp)
811361b8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
811361bc:	e0fff017 	ldw	r3,-64(fp)
811361c0:	e0bffe17 	ldw	r2,-8(fp)
811361c4:	1880050e 	bge	r3,r2,811361dc <altera_avalon_uart_read+0xdc>
811361c8:	e0bffc17 	ldw	r2,-16(fp)
811361cc:	10c00217 	ldw	r3,8(r2)
811361d0:	e0bffc17 	ldw	r2,-16(fp)
811361d4:	10800317 	ldw	r2,12(r2)
811361d8:	18bfe51e 	bne	r3,r2,81136170 <__reset+0xfb116170>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
811361dc:	e0bff017 	ldw	r2,-64(fp)
811361e0:	10003a1e 	bne	r2,zero,811362cc <altera_avalon_uart_read+0x1cc>
811361e4:	e0bffc17 	ldw	r2,-16(fp)
811361e8:	10c00217 	ldw	r3,8(r2)
811361ec:	e0bffc17 	ldw	r2,-16(fp)
811361f0:	10800317 	ldw	r2,12(r2)
811361f4:	1880351e 	bne	r3,r2,811362cc <altera_avalon_uart_read+0x1cc>
    {
      if (!block)
811361f8:	e0bff117 	ldw	r2,-60(fp)
811361fc:	1000071e 	bne	r2,zero,8113621c <altera_avalon_uart_read+0x11c>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
81136200:	11360bc0 	call	811360bc <alt_get_errno>
81136204:	1007883a 	mov	r3,r2
81136208:	008002c4 	movi	r2,11
8113620c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
81136210:	00800044 	movi	r2,1
81136214:	e0bfef05 	stb	r2,-68(fp)
        break;
81136218:	00003006 	br	811362dc <altera_avalon_uart_read+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113621c:	0005303a 	rdctl	r2,status
81136220:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136224:	e0fff517 	ldw	r3,-44(fp)
81136228:	00bfff84 	movi	r2,-2
8113622c:	1884703a 	and	r2,r3,r2
81136230:	1001703a 	wrctl	status,r2
  
  return context;
81136234:	e0bff517 	ldw	r2,-44(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
81136238:	e0bff415 	stw	r2,-48(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113623c:	e0bffc17 	ldw	r2,-16(fp)
81136240:	10800117 	ldw	r2,4(r2)
81136244:	10c02014 	ori	r3,r2,128
81136248:	e0bffc17 	ldw	r2,-16(fp)
8113624c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81136250:	e0bffc17 	ldw	r2,-16(fp)
81136254:	10800017 	ldw	r2,0(r2)
81136258:	10800304 	addi	r2,r2,12
8113625c:	e0fffc17 	ldw	r3,-16(fp)
81136260:	18c00117 	ldw	r3,4(r3)
81136264:	10c00035 	stwio	r3,0(r2)
81136268:	e0bff417 	ldw	r2,-48(fp)
8113626c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136270:	e0bff617 	ldw	r2,-40(fp)
81136274:	1001703a 	wrctl	status,r2
        * flag set in the interrupt service routine. This avoids wasting CPU
        * cycles waiting in this thread, when we could be doing something more 
        * profitable elsewhere.
        */

       ALT_FLAG_PEND (sp->events, 
81136278:	e0bffc17 	ldw	r2,-16(fp)
8113627c:	10800717 	ldw	r2,28(r2)
81136280:	e0bff215 	stw	r2,-56(fp)
81136284:	00800044 	movi	r2,1
81136288:	e0bff98d 	sth	r2,-26(fp)
8113628c:	00bfe0c4 	movi	r2,-125
81136290:	e0bffa05 	stb	r2,-24(fp)
81136294:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
81136298:	d0a07303 	ldbu	r2,-32308(gp)
8113629c:	10803fcc 	andi	r2,r2,255
811362a0:	10000a26 	beq	r2,zero,811362cc <altera_avalon_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
811362a4:	e0fff98b 	ldhu	r3,-26(fp)
811362a8:	e13ffa03 	ldbu	r4,-24(fp)
811362ac:	e17ffa8b 	ldhu	r5,-22(fp)
811362b0:	e0bffb04 	addi	r2,fp,-20
811362b4:	d8800015 	stw	r2,0(sp)
811362b8:	280f883a 	mov	r7,r5
811362bc:	200d883a 	mov	r6,r4
811362c0:	180b883a 	mov	r5,r3
811362c4:	e13ff217 	ldw	r4,-56(fp)
811362c8:	11294f00 	call	811294f0 <OSFlagPend>
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
811362cc:	e0bff017 	ldw	r2,-64(fp)
811362d0:	1000021e 	bne	r2,zero,811362dc <altera_avalon_uart_read+0x1dc>
811362d4:	e0bffe17 	ldw	r2,-8(fp)
811362d8:	103fb81e 	bne	r2,zero,811361bc <__reset+0xfb1161bc>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
811362dc:	e0bffc17 	ldw	r2,-16(fp)
811362e0:	10800817 	ldw	r2,32(r2)
811362e4:	1009883a 	mov	r4,r2
811362e8:	112d5180 	call	8112d518 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811362ec:	0005303a 	rdctl	r2,status
811362f0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811362f4:	e0fff717 	ldw	r3,-36(fp)
811362f8:	00bfff84 	movi	r2,-2
811362fc:	1884703a 	and	r2,r3,r2
81136300:	1001703a 	wrctl	status,r2
  
  return context;
81136304:	e0bff717 	ldw	r2,-36(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
81136308:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
8113630c:	e0bffc17 	ldw	r2,-16(fp)
81136310:	10800117 	ldw	r2,4(r2)
81136314:	10c02014 	ori	r3,r2,128
81136318:	e0bffc17 	ldw	r2,-16(fp)
8113631c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81136320:	e0bffc17 	ldw	r2,-16(fp)
81136324:	10800017 	ldw	r2,0(r2)
81136328:	10800304 	addi	r2,r2,12
8113632c:	e0fffc17 	ldw	r3,-16(fp)
81136330:	18c00117 	ldw	r3,4(r3)
81136334:	10c00035 	stwio	r3,0(r2)
81136338:	e0bff417 	ldw	r2,-48(fp)
8113633c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136340:	e0bff317 	ldw	r2,-52(fp)
81136344:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
81136348:	e0bfef03 	ldbu	r2,-68(fp)
8113634c:	10000226 	beq	r2,zero,81136358 <altera_avalon_uart_read+0x258>
    return -EWOULDBLOCK;
81136350:	00bffd44 	movi	r2,-11
81136354:	00000106 	br	8113635c <altera_avalon_uart_read+0x25c>
  }
  else {
    return count;
81136358:	e0bff017 	ldw	r2,-64(fp)
  }
}
8113635c:	e037883a 	mov	sp,fp
81136360:	dfc00117 	ldw	ra,4(sp)
81136364:	df000017 	ldw	fp,0(sp)
81136368:	dec00204 	addi	sp,sp,8
8113636c:	f800283a 	ret

81136370 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81136370:	defffe04 	addi	sp,sp,-8
81136374:	de00012e 	bgeu	sp,et,8113637c <alt_get_errno+0xc>
81136378:	003b68fa 	trap	3
8113637c:	dfc00115 	stw	ra,4(sp)
81136380:	df000015 	stw	fp,0(sp)
81136384:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
81136388:	d0a01017 	ldw	r2,-32704(gp)
8113638c:	10000326 	beq	r2,zero,8113639c <alt_get_errno+0x2c>
81136390:	d0a01017 	ldw	r2,-32704(gp)
81136394:	103ee83a 	callr	r2
81136398:	00000106 	br	811363a0 <alt_get_errno+0x30>
8113639c:	d0a05e04 	addi	r2,gp,-32392
}
811363a0:	e037883a 	mov	sp,fp
811363a4:	dfc00117 	ldw	ra,4(sp)
811363a8:	df000017 	ldw	fp,0(sp)
811363ac:	dec00204 	addi	sp,sp,8
811363b0:	f800283a 	ret

811363b4 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
811363b4:	deffec04 	addi	sp,sp,-80
811363b8:	de00012e 	bgeu	sp,et,811363c0 <altera_avalon_uart_write+0xc>
811363bc:	003b68fa 	trap	3
811363c0:	dfc01315 	stw	ra,76(sp)
811363c4:	df001215 	stw	fp,72(sp)
811363c8:	df001204 	addi	fp,sp,72
811363cc:	e13ffc15 	stw	r4,-16(fp)
811363d0:	e17ffd15 	stw	r5,-12(fp)
811363d4:	e1bffe15 	stw	r6,-8(fp)
811363d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
811363dc:	e0bffe17 	ldw	r2,-8(fp)
811363e0:	e0bfef15 	stw	r2,-68(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
811363e4:	e0bfff17 	ldw	r2,-4(fp)
811363e8:	1090000c 	andi	r2,r2,16384
811363ec:	e0bff015 	stw	r2,-64(fp)
  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */

  ALT_SEM_PEND (sp->write_lock, 0);
811363f0:	e0bffc17 	ldw	r2,-16(fp)
811363f4:	10800917 	ldw	r2,36(r2)
811363f8:	e0bff815 	stw	r2,-32(fp)
811363fc:	e03ff90d 	sth	zero,-28(fp)
81136400:	e0bff90b 	ldhu	r2,-28(fp)
81136404:	e0fffb44 	addi	r3,fp,-19
81136408:	180d883a 	mov	r6,r3
8113640c:	100b883a 	mov	r5,r2
81136410:	e13ff817 	ldw	r4,-32(fp)
81136414:	112d1900 	call	8112d190 <OSSemPend>
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81136418:	00005106 	br	81136560 <altera_avalon_uart_write+0x1ac>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
8113641c:	e0bffc17 	ldw	r2,-16(fp)
81136420:	10800517 	ldw	r2,20(r2)
81136424:	10800044 	addi	r2,r2,1
81136428:	10800fcc 	andi	r2,r2,63
8113642c:	e0bff215 	stw	r2,-56(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
81136430:	e0bffc17 	ldw	r2,-16(fp)
81136434:	10c00417 	ldw	r3,16(r2)
81136438:	e0bff217 	ldw	r2,-56(fp)
8113643c:	1880371e 	bne	r3,r2,8113651c <altera_avalon_uart_write+0x168>
    {
      if (no_block)
81136440:	e0bff017 	ldw	r2,-64(fp)
81136444:	10000526 	beq	r2,zero,8113645c <altera_avalon_uart_write+0xa8>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
81136448:	11363700 	call	81136370 <alt_get_errno>
8113644c:	1007883a 	mov	r3,r2
81136450:	008002c4 	movi	r2,11
81136454:	18800015 	stw	r2,0(r3)
        break;
81136458:	00004306 	br	81136568 <altera_avalon_uart_write+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
8113645c:	0005303a 	rdctl	r2,status
81136460:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136464:	e0fff517 	ldw	r3,-44(fp)
81136468:	00bfff84 	movi	r2,-2
8113646c:	1884703a 	and	r2,r3,r2
81136470:	1001703a 	wrctl	status,r2
  
  return context;
81136474:	e0bff517 	ldw	r2,-44(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
81136478:	e0bff415 	stw	r2,-48(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
8113647c:	e0bffc17 	ldw	r2,-16(fp)
81136480:	10800117 	ldw	r2,4(r2)
81136484:	10c11014 	ori	r3,r2,1088
81136488:	e0bffc17 	ldw	r2,-16(fp)
8113648c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
81136490:	e0bffc17 	ldw	r2,-16(fp)
81136494:	10800017 	ldw	r2,0(r2)
81136498:	10800304 	addi	r2,r2,12
8113649c:	e0fffc17 	ldw	r3,-16(fp)
811364a0:	18c00117 	ldw	r3,4(r3)
811364a4:	10c00035 	stwio	r3,0(r2)
811364a8:	e0bff417 	ldw	r2,-48(fp)
811364ac:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811364b0:	e0bff117 	ldw	r2,-60(fp)
811364b4:	1001703a 	wrctl	status,r2
           * flag set in the interrupt service routine. This avoids wasting CPU
           * cycles waiting in this thread, when we could be doing something
           * more profitable elsewhere.
           */

          ALT_FLAG_PEND (sp->events, 
811364b8:	e0bffc17 	ldw	r2,-16(fp)
811364bc:	10800717 	ldw	r2,28(r2)
811364c0:	e0bff315 	stw	r2,-52(fp)
811364c4:	00800084 	movi	r2,2
811364c8:	e0bff98d 	sth	r2,-26(fp)
811364cc:	00bfe0c4 	movi	r2,-125
811364d0:	e0bffa05 	stb	r2,-24(fp)
811364d4:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
811364d8:	d0a07303 	ldbu	r2,-32308(gp)
811364dc:	10803fcc 	andi	r2,r2,255
811364e0:	10000a26 	beq	r2,zero,8113650c <altera_avalon_uart_write+0x158>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
811364e4:	e0fff98b 	ldhu	r3,-26(fp)
811364e8:	e13ffa03 	ldbu	r4,-24(fp)
811364ec:	e17ffa8b 	ldhu	r5,-22(fp)
811364f0:	e0bffb04 	addi	r2,fp,-20
811364f4:	d8800015 	stw	r2,0(sp)
811364f8:	280f883a 	mov	r7,r5
811364fc:	200d883a 	mov	r6,r4
81136500:	180b883a 	mov	r5,r3
81136504:	e13ff317 	ldw	r4,-52(fp)
81136508:	11294f00 	call	811294f0 <OSFlagPend>
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
8113650c:	e0bffc17 	ldw	r2,-16(fp)
81136510:	10c00417 	ldw	r3,16(r2)
81136514:	e0bff217 	ldw	r2,-56(fp)
81136518:	18bfe726 	beq	r3,r2,811364b8 <__reset+0xfb1164b8>
      }
    }

    count--;
8113651c:	e0bfef17 	ldw	r2,-68(fp)
81136520:	10bfffc4 	addi	r2,r2,-1
81136524:	e0bfef15 	stw	r2,-68(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
81136528:	e0bffc17 	ldw	r2,-16(fp)
8113652c:	10c00517 	ldw	r3,20(r2)
81136530:	e0bffd17 	ldw	r2,-12(fp)
81136534:	11000044 	addi	r4,r2,1
81136538:	e13ffd15 	stw	r4,-12(fp)
8113653c:	10800003 	ldbu	r2,0(r2)
81136540:	1009883a 	mov	r4,r2
81136544:	e0bffc17 	ldw	r2,-16(fp)
81136548:	10c5883a 	add	r2,r2,r3
8113654c:	10801a04 	addi	r2,r2,104
81136550:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
81136554:	e0bffc17 	ldw	r2,-16(fp)
81136558:	e0fff217 	ldw	r3,-56(fp)
8113655c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
81136560:	e0bfef17 	ldw	r2,-68(fp)
81136564:	103fad1e 	bne	r2,zero,8113641c <__reset+0xfb11641c>
  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);
81136568:	e0bffc17 	ldw	r2,-16(fp)
8113656c:	10800917 	ldw	r2,36(r2)
81136570:	1009883a 	mov	r4,r2
81136574:	112d5180 	call	8112d518 <OSSemPost>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136578:	0005303a 	rdctl	r2,status
8113657c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136580:	e0fff717 	ldw	r3,-36(fp)
81136584:	00bfff84 	movi	r2,-2
81136588:	1884703a 	and	r2,r3,r2
8113658c:	1001703a 	wrctl	status,r2
  
  return context;
81136590:	e0bff717 	ldw	r2,-36(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
81136594:	e0bff415 	stw	r2,-48(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
81136598:	e0bffc17 	ldw	r2,-16(fp)
8113659c:	10800117 	ldw	r2,4(r2)
811365a0:	10c11014 	ori	r3,r2,1088
811365a4:	e0bffc17 	ldw	r2,-16(fp)
811365a8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
811365ac:	e0bffc17 	ldw	r2,-16(fp)
811365b0:	10800017 	ldw	r2,0(r2)
811365b4:	10800304 	addi	r2,r2,12
811365b8:	e0fffc17 	ldw	r3,-16(fp)
811365bc:	18c00117 	ldw	r3,4(r3)
811365c0:	10c00035 	stwio	r3,0(r2)
811365c4:	e0bff417 	ldw	r2,-48(fp)
811365c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811365cc:	e0bff617 	ldw	r2,-40(fp)
811365d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
811365d4:	e0fffe17 	ldw	r3,-8(fp)
811365d8:	e0bfef17 	ldw	r2,-68(fp)
811365dc:	1885c83a 	sub	r2,r3,r2
}
811365e0:	e037883a 	mov	sp,fp
811365e4:	dfc00117 	ldw	ra,4(sp)
811365e8:	df000017 	ldw	fp,0(sp)
811365ec:	dec00204 	addi	sp,sp,8
811365f0:	f800283a 	ret

811365f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
811365f4:	defffe04 	addi	sp,sp,-8
811365f8:	de00012e 	bgeu	sp,et,81136600 <alt_get_errno+0xc>
811365fc:	003b68fa 	trap	3
81136600:	dfc00115 	stw	ra,4(sp)
81136604:	df000015 	stw	fp,0(sp)
81136608:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113660c:	d0a01017 	ldw	r2,-32704(gp)
81136610:	10000326 	beq	r2,zero,81136620 <alt_get_errno+0x2c>
81136614:	d0a01017 	ldw	r2,-32704(gp)
81136618:	103ee83a 	callr	r2
8113661c:	00000106 	br	81136624 <alt_get_errno+0x30>
81136620:	d0a05e04 	addi	r2,gp,-32392
}
81136624:	e037883a 	mov	sp,fp
81136628:	dfc00117 	ldw	ra,4(sp)
8113662c:	df000017 	ldw	fp,0(sp)
81136630:	dec00204 	addi	sp,sp,8
81136634:	f800283a 	ret

81136638 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
81136638:	defffc04 	addi	sp,sp,-16
8113663c:	de00012e 	bgeu	sp,et,81136644 <alt_msgdma_write_standard_descriptor+0xc>
81136640:	003b68fa 	trap	3
81136644:	df000315 	stw	fp,12(sp)
81136648:	df000304 	addi	fp,sp,12
8113664c:	e13ffd15 	stw	r4,-12(fp)
81136650:	e17ffe15 	stw	r5,-8(fp)
81136654:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
81136658:	e0bffd17 	ldw	r2,-12(fp)
8113665c:	10800037 	ldwio	r2,0(r2)
81136660:	1080010c 	andi	r2,r2,4
81136664:	10000226 	beq	r2,zero,81136670 <alt_msgdma_write_standard_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
81136668:	00bff904 	movi	r2,-28
8113666c:	00001506 	br	811366c4 <alt_msgdma_write_standard_descriptor+0x8c>
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
81136670:	e0bfff17 	ldw	r2,-4(fp)
81136674:	10800017 	ldw	r2,0(r2)
81136678:	1007883a 	mov	r3,r2
8113667c:	e0bffe17 	ldw	r2,-8(fp)
81136680:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
81136684:	e0bffe17 	ldw	r2,-8(fp)
81136688:	10800104 	addi	r2,r2,4
8113668c:	e0ffff17 	ldw	r3,-4(fp)
81136690:	18c00117 	ldw	r3,4(r3)
81136694:	10c00035 	stwio	r3,0(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
81136698:	e0bffe17 	ldw	r2,-8(fp)
8113669c:	10800204 	addi	r2,r2,8
811366a0:	e0ffff17 	ldw	r3,-4(fp)
811366a4:	18c00217 	ldw	r3,8(r3)
811366a8:	10c00035 	stwio	r3,0(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
811366ac:	e0bffe17 	ldw	r2,-8(fp)
811366b0:	10800304 	addi	r2,r2,12
811366b4:	e0ffff17 	ldw	r3,-4(fp)
811366b8:	18c00317 	ldw	r3,12(r3)
811366bc:	10c00035 	stwio	r3,0(r2)
		descriptor->control);
        return 0;
811366c0:	0005883a 	mov	r2,zero
}
811366c4:	e037883a 	mov	sp,fp
811366c8:	df000017 	ldw	fp,0(sp)
811366cc:	dec00104 	addi	sp,sp,4
811366d0:	f800283a 	ret

811366d4 <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
811366d4:	defffc04 	addi	sp,sp,-16
811366d8:	de00012e 	bgeu	sp,et,811366e0 <alt_msgdma_write_extended_descriptor+0xc>
811366dc:	003b68fa 	trap	3
811366e0:	df000315 	stw	fp,12(sp)
811366e4:	df000304 	addi	fp,sp,12
811366e8:	e13ffd15 	stw	r4,-12(fp)
811366ec:	e17ffe15 	stw	r5,-8(fp)
811366f0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
811366f4:	e0bffd17 	ldw	r2,-12(fp)
811366f8:	10800037 	ldwio	r2,0(r2)
811366fc:	1080010c 	andi	r2,r2,4
81136700:	10000226 	beq	r2,zero,8113670c <alt_msgdma_write_extended_descriptor+0x38>
    	ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
81136704:	00bff904 	movi	r2,-28
81136708:	00003b06 	br	811367f8 <alt_msgdma_write_extended_descriptor+0x124>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
8113670c:	e0bfff17 	ldw	r2,-4(fp)
81136710:	10800017 	ldw	r2,0(r2)
81136714:	1007883a 	mov	r3,r2
81136718:	e0bffe17 	ldw	r2,-8(fp)
8113671c:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
81136720:	e0bffe17 	ldw	r2,-8(fp)
81136724:	10800104 	addi	r2,r2,4
81136728:	e0ffff17 	ldw	r3,-4(fp)
8113672c:	18c00117 	ldw	r3,4(r3)
81136730:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
81136734:	e0bffe17 	ldw	r2,-8(fp)
81136738:	10800204 	addi	r2,r2,8
8113673c:	e0ffff17 	ldw	r3,-4(fp)
81136740:	18c00217 	ldw	r3,8(r3)
81136744:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
81136748:	e0bffe17 	ldw	r2,-8(fp)
8113674c:	10800304 	addi	r2,r2,12
81136750:	e0ffff17 	ldw	r3,-4(fp)
81136754:	18c0030b 	ldhu	r3,12(r3)
81136758:	18ffffcc 	andi	r3,r3,65535
8113675c:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
81136760:	e0bffe17 	ldw	r2,-8(fp)
81136764:	10800384 	addi	r2,r2,14
81136768:	e0ffff17 	ldw	r3,-4(fp)
8113676c:	18c00383 	ldbu	r3,14(r3)
81136770:	18c03fcc 	andi	r3,r3,255
81136774:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
81136778:	e0bffe17 	ldw	r2,-8(fp)
8113677c:	108003c4 	addi	r2,r2,15
81136780:	e0ffff17 	ldw	r3,-4(fp)
81136784:	18c003c3 	ldbu	r3,15(r3)
81136788:	18c03fcc 	andi	r3,r3,255
8113678c:	10c00025 	stbio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
81136790:	e0bffe17 	ldw	r2,-8(fp)
81136794:	10800404 	addi	r2,r2,16
81136798:	e0ffff17 	ldw	r3,-4(fp)
8113679c:	18c0040b 	ldhu	r3,16(r3)
811367a0:	18ffffcc 	andi	r3,r3,65535
811367a4:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
811367a8:	e0bffe17 	ldw	r2,-8(fp)
811367ac:	10800484 	addi	r2,r2,18
811367b0:	e0ffff17 	ldw	r3,-4(fp)
811367b4:	18c0048b 	ldhu	r3,18(r3)
811367b8:	18ffffcc 	andi	r3,r3,65535
811367bc:	10c0002d 	sthio	r3,0(r2)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
811367c0:	e0bffe17 	ldw	r2,-8(fp)
811367c4:	10800504 	addi	r2,r2,20
811367c8:	0007883a 	mov	r3,zero
811367cc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
811367d0:	e0bffe17 	ldw	r2,-8(fp)
811367d4:	10800604 	addi	r2,r2,24
811367d8:	0007883a 	mov	r3,zero
811367dc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
811367e0:	e0bffe17 	ldw	r2,-8(fp)
811367e4:	10800704 	addi	r2,r2,28
811367e8:	e0ffff17 	ldw	r3,-4(fp)
811367ec:	18c00717 	ldw	r3,28(r3)
811367f0:	10c00035 	stwio	r3,0(r2)
		descriptor_base, 
    	descriptor->control);
    return 0;
811367f4:	0005883a 	mov	r2,zero
}
811367f8:	e037883a 	mov	sp,fp
811367fc:	df000017 	ldw	fp,0(sp)
81136800:	dec00104 	addi	sp,sp,4
81136804:	f800283a 	ret

81136808 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
81136808:	defff804 	addi	sp,sp,-32
8113680c:	de00012e 	bgeu	sp,et,81136814 <alt_msgdma_irq+0xc>
81136810:	003b68fa 	trap	3
81136814:	dfc00715 	stw	ra,28(sp)
81136818:	df000615 	stw	fp,24(sp)
8113681c:	df000604 	addi	fp,sp,24
81136820:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
81136824:	e0bfff17 	ldw	r2,-4(fp)
81136828:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
8113682c:	e0bffa17 	ldw	r2,-24(fp)
81136830:	10801783 	ldbu	r2,94(r2)
81136834:	10803fcc 	andi	r2,r2,255
81136838:	10001126 	beq	r2,zero,81136880 <alt_msgdma_irq+0x78>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
8113683c:	e0bffa17 	ldw	r2,-24(fp)
81136840:	10800617 	ldw	r2,24(r2)
81136844:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
81136848:	1007883a 	mov	r3,r2
8113684c:	00bffdc4 	movi	r2,-9
81136850:	1884703a 	and	r2,r3,r2
81136854:	e0bffb15 	stw	r2,-20(fp)
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
81136858:	e0bffa17 	ldw	r2,-24(fp)
8113685c:	10800617 	ldw	r2,24(r2)
81136860:	e0fffb17 	ldw	r3,-20(fp)
81136864:	10c00035 	stwio	r3,0(r2)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
81136868:	e0bffa17 	ldw	r2,-24(fp)
8113686c:	10800617 	ldw	r2,24(r2)
81136870:	10800404 	addi	r2,r2,16
81136874:	00c00044 	movi	r3,1
81136878:	10c00035 	stwio	r3,0(r2)
8113687c:	00001106 	br	811368c4 <alt_msgdma_irq+0xbc>
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
81136880:	e0bffa17 	ldw	r2,-24(fp)
81136884:	10800317 	ldw	r2,12(r2)
81136888:	10800104 	addi	r2,r2,4
8113688c:	10800037 	ldwio	r2,0(r2)
81136890:	1007883a 	mov	r3,r2
81136894:	00bffbc4 	movi	r2,-17
81136898:	1884703a 	and	r2,r3,r2
8113689c:	e0bffb15 	stw	r2,-20(fp)
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
811368a0:	e0bffa17 	ldw	r2,-24(fp)
811368a4:	10800317 	ldw	r2,12(r2)
811368a8:	10800104 	addi	r2,r2,4
811368ac:	e0fffb17 	ldw	r3,-20(fp)
811368b0:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
811368b4:	e0bffa17 	ldw	r2,-24(fp)
811368b8:	10800317 	ldw	r2,12(r2)
811368bc:	00c08004 	movi	r3,512
811368c0:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
811368c4:	e0bffa17 	ldw	r2,-24(fp)
811368c8:	10800b17 	ldw	r2,44(r2)
811368cc:	10001226 	beq	r2,zero,81136918 <alt_msgdma_irq+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811368d0:	0005303a 	rdctl	r2,status
811368d4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811368d8:	e0fffd17 	ldw	r3,-12(fp)
811368dc:	00bfff84 	movi	r2,-2
811368e0:	1884703a 	and	r2,r3,r2
811368e4:	1001703a 	wrctl	status,r2
  
  return context;
811368e8:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
811368ec:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
811368f0:	e0bffa17 	ldw	r2,-24(fp)
811368f4:	10800b17 	ldw	r2,44(r2)
811368f8:	e0fffa17 	ldw	r3,-24(fp)
811368fc:	18c00c17 	ldw	r3,48(r3)
81136900:	1809883a 	mov	r4,r3
81136904:	103ee83a 	callr	r2
81136908:	e0bffc17 	ldw	r2,-16(fp)
8113690c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136910:	e0bffe17 	ldw	r2,-8(fp)
81136914:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
81136918:	e0bffa17 	ldw	r2,-24(fp)
8113691c:	10801783 	ldbu	r2,94(r2)
81136920:	10803fcc 	andi	r2,r2,255
81136924:	10000a26 	beq	r2,zero,81136950 <alt_msgdma_irq+0x148>
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
81136928:	e0bffa17 	ldw	r2,-24(fp)
8113692c:	10800617 	ldw	r2,24(r2)
81136930:	10800037 	ldwio	r2,0(r2)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81136934:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
81136938:	e0bffb15 	stw	r2,-20(fp)
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
8113693c:	e0bffa17 	ldw	r2,-24(fp)
81136940:	10800617 	ldw	r2,24(r2)
81136944:	e0fffb17 	ldw	r3,-20(fp)
81136948:	10c00035 	stwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
8113694c:	00000c06 	br	81136980 <alt_msgdma_irq+0x178>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81136950:	e0bffa17 	ldw	r2,-24(fp)
81136954:	10800317 	ldw	r2,12(r2)
81136958:	10800104 	addi	r2,r2,4
8113695c:	10800037 	ldwio	r2,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
81136960:	10800414 	ori	r2,r2,16
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
81136964:	e0bffb15 	stw	r2,-20(fp)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
81136968:	e0bffa17 	ldw	r2,-24(fp)
8113696c:	10800317 	ldw	r2,12(r2)
81136970:	10800104 	addi	r2,r2,4
81136974:	e0fffb17 	ldw	r3,-20(fp)
81136978:	10c00035 	stwio	r3,0(r2)
    }

    return;
8113697c:	0001883a 	nop
}
81136980:	e037883a 	mov	sp,fp
81136984:	dfc00117 	ldw	ra,4(sp)
81136988:	df000017 	ldw	fp,0(sp)
8113698c:	dec00204 	addi	sp,sp,8
81136990:	f800283a 	ret

81136994 <alt_msgdma_construct_standard_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81136994:	defffb04 	addi	sp,sp,-20
81136998:	de00012e 	bgeu	sp,et,811369a0 <alt_msgdma_construct_standard_descriptor+0xc>
8113699c:	003b68fa 	trap	3
811369a0:	df000415 	stw	fp,16(sp)
811369a4:	df000404 	addi	fp,sp,16
811369a8:	e13ffc15 	stw	r4,-16(fp)
811369ac:	e17ffd15 	stw	r5,-12(fp)
811369b0:	e1bffe15 	stw	r6,-8(fp)
811369b4:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
811369b8:	e0bffc17 	ldw	r2,-16(fp)
811369bc:	10c01217 	ldw	r3,72(r2)
811369c0:	e0800117 	ldw	r2,4(fp)
811369c4:	18800436 	bltu	r3,r2,811369d8 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
811369c8:	e0bffc17 	ldw	r2,-16(fp)
811369cc:	10801703 	ldbu	r2,92(r2)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
811369d0:	10803fcc 	andi	r2,r2,255
811369d4:	10000226 	beq	r2,zero,811369e0 <alt_msgdma_construct_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
811369d8:	00bffa84 	movi	r2,-22
811369dc:	00000e06 	br	81136a18 <alt_msgdma_construct_standard_descriptor+0x84>
    }
    descriptor->read_address = read_address;
811369e0:	e0bffd17 	ldw	r2,-12(fp)
811369e4:	e0fffe17 	ldw	r3,-8(fp)
811369e8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
811369ec:	e0bffd17 	ldw	r2,-12(fp)
811369f0:	e0ffff17 	ldw	r3,-4(fp)
811369f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
811369f8:	e0bffd17 	ldw	r2,-12(fp)
811369fc:	e0c00117 	ldw	r3,4(fp)
81136a00:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81136a04:	e0800217 	ldw	r2,8(fp)
81136a08:	10e00034 	orhi	r3,r2,32768
81136a0c:	e0bffd17 	ldw	r2,-12(fp)
81136a10:	10c00315 	stw	r3,12(r2)
    
    return 0;
81136a14:	0005883a 	mov	r2,zero
}
81136a18:	e037883a 	mov	sp,fp
81136a1c:	df000017 	ldw	fp,0(sp)
81136a20:	dec00104 	addi	sp,sp,4
81136a24:	f800283a 	ret

81136a28 <alt_msgdma_construct_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81136a28:	defff604 	addi	sp,sp,-40
81136a2c:	de00012e 	bgeu	sp,et,81136a34 <alt_msgdma_construct_extended_descriptor+0xc>
81136a30:	003b68fa 	trap	3
81136a34:	df000915 	stw	fp,36(sp)
81136a38:	df000904 	addi	fp,sp,36
81136a3c:	e13ff715 	stw	r4,-36(fp)
81136a40:	e17ff815 	stw	r5,-32(fp)
81136a44:	e1bff915 	stw	r6,-28(fp)
81136a48:	e1fffa15 	stw	r7,-24(fp)
81136a4c:	e1800317 	ldw	r6,12(fp)
81136a50:	e1400417 	ldw	r5,16(fp)
81136a54:	e1000517 	ldw	r4,20(fp)
81136a58:	e0c00617 	ldw	r3,24(fp)
81136a5c:	e0800717 	ldw	r2,28(fp)
81136a60:	e1bffb0d 	sth	r6,-20(fp)
81136a64:	e17ffc05 	stb	r5,-16(fp)
81136a68:	e13ffd05 	stb	r4,-12(fp)
81136a6c:	e0fffe0d 	sth	r3,-8(fp)
81136a70:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
81136a74:	e0bff717 	ldw	r2,-36(fp)
81136a78:	10c01217 	ldw	r3,72(r2)
81136a7c:	e0800117 	ldw	r2,4(fp)
81136a80:	18801936 	bltu	r3,r2,81136ae8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
81136a84:	e13ff717 	ldw	r4,-36(fp)
81136a88:	20801317 	ldw	r2,76(r4)
81136a8c:	20c01417 	ldw	r3,80(r4)
81136a90:	e13ffe0b 	ldhu	r4,-8(fp)
81136a94:	213fffcc 	andi	r4,r4,65535
81136a98:	2015883a 	mov	r10,r4
81136a9c:	0017883a 	mov	r11,zero
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
81136aa0:	1ac01136 	bltu	r3,r11,81136ae8 <alt_msgdma_construct_extended_descriptor+0xc0>
81136aa4:	58c0011e 	bne	r11,r3,81136aac <alt_msgdma_construct_extended_descriptor+0x84>
81136aa8:	12800f36 	bltu	r2,r10,81136ae8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81136aac:	e13ff717 	ldw	r4,-36(fp)
81136ab0:	20801317 	ldw	r2,76(r4)
81136ab4:	20c01417 	ldw	r3,80(r4)
81136ab8:	e13fff0b 	ldhu	r4,-4(fp)
81136abc:	213fffcc 	andi	r4,r4,65535
81136ac0:	2011883a 	mov	r8,r4
81136ac4:	0013883a 	mov	r9,zero
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81136ac8:	1a400736 	bltu	r3,r9,81136ae8 <alt_msgdma_construct_extended_descriptor+0xc0>
81136acc:	48c0011e 	bne	r9,r3,81136ad4 <alt_msgdma_construct_extended_descriptor+0xac>
81136ad0:	12000536 	bltu	r2,r8,81136ae8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81136ad4:	e0bff717 	ldw	r2,-36(fp)
81136ad8:	10801703 	ldbu	r2,92(r2)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
81136adc:	10803fcc 	andi	r2,r2,255
81136ae0:	10800060 	cmpeqi	r2,r2,1
81136ae4:	1000021e 	bne	r2,zero,81136af0 <alt_msgdma_construct_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81136ae8:	00bffa84 	movi	r2,-22
81136aec:	00002106 	br	81136b74 <alt_msgdma_construct_extended_descriptor+0x14c>
    }
    
    descriptor->read_address_low = read_address;
81136af0:	e0bff817 	ldw	r2,-32(fp)
81136af4:	e0fff917 	ldw	r3,-28(fp)
81136af8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
81136afc:	e0bff817 	ldw	r2,-32(fp)
81136b00:	e0fffa17 	ldw	r3,-24(fp)
81136b04:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81136b08:	e0bff817 	ldw	r2,-32(fp)
81136b0c:	e0c00117 	ldw	r3,4(fp)
81136b10:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
81136b14:	e0bff817 	ldw	r2,-32(fp)
81136b18:	e0fffb0b 	ldhu	r3,-20(fp)
81136b1c:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
81136b20:	e0bff817 	ldw	r2,-32(fp)
81136b24:	e0fffc03 	ldbu	r3,-16(fp)
81136b28:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
81136b2c:	e0bff817 	ldw	r2,-32(fp)
81136b30:	e0fffd03 	ldbu	r3,-12(fp)
81136b34:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
81136b38:	e0bff817 	ldw	r2,-32(fp)
81136b3c:	e0fffe0b 	ldhu	r3,-8(fp)
81136b40:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
81136b44:	e0bff817 	ldw	r2,-32(fp)
81136b48:	e0ffff0b 	ldhu	r3,-4(fp)
81136b4c:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
81136b50:	e0bff817 	ldw	r2,-32(fp)
81136b54:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
81136b58:	e0bff817 	ldw	r2,-32(fp)
81136b5c:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81136b60:	e0800217 	ldw	r2,8(fp)
81136b64:	10e00034 	orhi	r3,r2,32768
81136b68:	e0bff817 	ldw	r2,-32(fp)
81136b6c:	10c00715 	stw	r3,28(r2)

  return 0 ;
81136b70:	0005883a 	mov	r2,zero

}
81136b74:	e037883a 	mov	sp,fp
81136b78:	df000017 	ldw	fp,0(sp)
81136b7c:	dec00104 	addi	sp,sp,4
81136b80:	f800283a 	ret

81136b84 <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81136b84:	deffee04 	addi	sp,sp,-72
81136b88:	de00012e 	bgeu	sp,et,81136b90 <alt_msgdma_descriptor_async_transfer+0xc>
81136b8c:	003b68fa 	trap	3
81136b90:	dfc01115 	stw	ra,68(sp)
81136b94:	df001015 	stw	fp,64(sp)
81136b98:	df001004 	addi	fp,sp,64
81136b9c:	e13ffd15 	stw	r4,-12(fp)
81136ba0:	e17ffe15 	stw	r5,-8(fp)
81136ba4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
81136ba8:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
81136bac:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
81136bb0:	e03ff00d 	sth	zero,-64(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136bb4:	e0bffd17 	ldw	r2,-12(fp)
81136bb8:	10800317 	ldw	r2,12(r2)
81136bbc:	10800204 	addi	r2,r2,8
81136bc0:	10800037 	ldwio	r2,0(r2)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81136bc4:	10bfffcc 	andi	r2,r2,65535
81136bc8:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136bcc:	e0bffd17 	ldw	r2,-12(fp)
81136bd0:	10800317 	ldw	r2,12(r2)
81136bd4:	10800204 	addi	r2,r2,8
81136bd8:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81136bdc:	1004d43a 	srli	r2,r2,16
81136be0:	e0bff415 	stw	r2,-48(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81136be4:	e0bffd17 	ldw	r2,-12(fp)
81136be8:	10800917 	ldw	r2,36(r2)
81136bec:	e0fff417 	ldw	r3,-48(fp)
81136bf0:	1880042e 	bgeu	r3,r2,81136c04 <alt_msgdma_descriptor_async_transfer+0x80>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81136bf4:	e0bffd17 	ldw	r2,-12(fp)
81136bf8:	10800917 	ldw	r2,36(r2)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81136bfc:	e0fff317 	ldw	r3,-52(fp)
81136c00:	18800236 	bltu	r3,r2,81136c0c <alt_msgdma_descriptor_async_transfer+0x88>
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
81136c04:	00bff904 	movi	r2,-28
81136c08:	0000a906 	br	81136eb0 <alt_msgdma_descriptor_async_transfer+0x32c>
	
	/*
	* When running in a multi threaded environment, obtain the "regs_lock"
	* semaphore. This ensures that accessing registers is thread-safe.
	*/
	ALT_SEM_PEND (dev->regs_lock, 0);
81136c0c:	e0bffd17 	ldw	r2,-12(fp)
81136c10:	10801817 	ldw	r2,96(r2)
81136c14:	e0bff615 	stw	r2,-40(fp)
81136c18:	e03ffc0d 	sth	zero,-16(fp)
81136c1c:	e0bffc0b 	ldhu	r2,-16(fp)
81136c20:	e0fffc84 	addi	r3,fp,-14
81136c24:	180d883a 	mov	r6,r3
81136c28:	100b883a 	mov	r5,r2
81136c2c:	e13ff617 	ldw	r4,-40(fp)
81136c30:	112d1900 	call	8112d190 <OSSemPend>
	
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81136c34:	00800804 	movi	r2,32
81136c38:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136c3c:	0005303a 	rdctl	r2,status
81136c40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136c44:	e0fff717 	ldw	r3,-36(fp)
81136c48:	00bfff84 	movi	r2,-2
81136c4c:	1884703a 	and	r2,r3,r2
81136c50:	1001703a 	wrctl	status,r2
  
  return context;
81136c54:	e0bff717 	ldw	r2,-36(fp)
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81136c58:	e0bff215 	stw	r2,-56(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81136c5c:	e0bffd17 	ldw	r2,-12(fp)
81136c60:	10800317 	ldw	r2,12(r2)
81136c64:	10800104 	addi	r2,r2,4
81136c68:	e0fff117 	ldw	r3,-60(fp)
81136c6c:	10c00035 	stwio	r3,0(r2)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
81136c70:	e0bffd17 	ldw	r2,-12(fp)
81136c74:	10800317 	ldw	r2,12(r2)
81136c78:	e0fffd17 	ldw	r3,-12(fp)
81136c7c:	18c00317 	ldw	r3,12(r3)
81136c80:	18c00037 	ldwio	r3,0(r3)
81136c84:	10c00035 	stwio	r3,0(r2)
81136c88:	e0bff217 	ldw	r2,-56(fp)
81136c8c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136c90:	e0bffb17 	ldw	r2,-20(fp)
81136c94:	1001703a 	wrctl	status,r2
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81136c98:	e0bffe17 	ldw	r2,-8(fp)
81136c9c:	10001e26 	beq	r2,zero,81136d18 <alt_msgdma_descriptor_async_transfer+0x194>
81136ca0:	e0bfff17 	ldw	r2,-4(fp)
81136ca4:	10001c1e 	bne	r2,zero,81136d18 <alt_msgdma_descriptor_async_transfer+0x194>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81136ca8:	00001106 	br	81136cf0 <alt_msgdma_descriptor_async_transfer+0x16c>
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81136cac:	01000044 	movi	r4,1
81136cb0:	11254440 	call	81125444 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81136cb4:	e0bff00b 	ldhu	r2,-64(fp)
81136cb8:	1084e230 	cmpltui	r2,r2,5000
81136cbc:	1000091e 	bne	r2,zero,81136ce4 <alt_msgdma_descriptor_async_transfer+0x160>
            {
                alt_printf("time out after 5 msec while waiting" 
81136cc0:	01204534 	movhi	r4,33044
81136cc4:	21326504 	addi	r4,r4,-13932
81136cc8:	11390a80 	call	811390a8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81136ccc:	e0bffd17 	ldw	r2,-12(fp)
81136cd0:	10801817 	ldw	r2,96(r2)
81136cd4:	1009883a 	mov	r4,r2
81136cd8:	112d5180 	call	8112d518 <OSSemPost>
				
                return -ETIME;
81136cdc:	00bff084 	movi	r2,-62
81136ce0:	00007306 	br	81136eb0 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81136ce4:	e0bff00b 	ldhu	r2,-64(fp)
81136ce8:	10800044 	addi	r2,r2,1
81136cec:	e0bff00d 	sth	r2,-64(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81136cf0:	e0bffd17 	ldw	r2,-12(fp)
81136cf4:	10c00317 	ldw	r3,12(r2)
81136cf8:	e0bffd17 	ldw	r2,-12(fp)
81136cfc:	10800417 	ldw	r2,16(r2)
81136d00:	e1bffe17 	ldw	r6,-8(fp)
81136d04:	100b883a 	mov	r5,r2
81136d08:	1809883a 	mov	r4,r3
81136d0c:	11366380 	call	81136638 <alt_msgdma_write_standard_descriptor>
81136d10:	103fe61e 	bne	r2,zero,81136cac <__reset+0xfb116cac>
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
81136d14:	00002706 	br	81136db4 <alt_msgdma_descriptor_async_transfer+0x230>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81136d18:	e0bffe17 	ldw	r2,-8(fp)
81136d1c:	10001f1e 	bne	r2,zero,81136d9c <alt_msgdma_descriptor_async_transfer+0x218>
81136d20:	e0bfff17 	ldw	r2,-4(fp)
81136d24:	10001d26 	beq	r2,zero,81136d9c <alt_msgdma_descriptor_async_transfer+0x218>
    {
        counter = 0; /* reset counter */
81136d28:	e03ff00d 	sth	zero,-64(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81136d2c:	00001106 	br	81136d74 <alt_msgdma_descriptor_async_transfer+0x1f0>
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
81136d30:	01000044 	movi	r4,1
81136d34:	11254440 	call	81125444 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81136d38:	e0bff00b 	ldhu	r2,-64(fp)
81136d3c:	1084e230 	cmpltui	r2,r2,5000
81136d40:	1000091e 	bne	r2,zero,81136d68 <alt_msgdma_descriptor_async_transfer+0x1e4>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
81136d44:	01204534 	movhi	r4,33044
81136d48:	21327b04 	addi	r4,r4,-13844
81136d4c:	11390a80 	call	811390a8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81136d50:	e0bffd17 	ldw	r2,-12(fp)
81136d54:	10801817 	ldw	r2,96(r2)
81136d58:	1009883a 	mov	r4,r2
81136d5c:	112d5180 	call	8112d518 <OSSemPost>
				
                return -ETIME;
81136d60:	00bff084 	movi	r2,-62
81136d64:	00005206 	br	81136eb0 <alt_msgdma_descriptor_async_transfer+0x32c>
            }
            counter++; 
81136d68:	e0bff00b 	ldhu	r2,-64(fp)
81136d6c:	10800044 	addi	r2,r2,1
81136d70:	e0bff00d 	sth	r2,-64(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
81136d74:	e0bffd17 	ldw	r2,-12(fp)
81136d78:	10c00317 	ldw	r3,12(r2)
81136d7c:	e0bffd17 	ldw	r2,-12(fp)
81136d80:	10800417 	ldw	r2,16(r2)
81136d84:	e1bfff17 	ldw	r6,-4(fp)
81136d88:	100b883a 	mov	r5,r2
81136d8c:	1809883a 	mov	r4,r3
81136d90:	11366d40 	call	811366d4 <alt_msgdma_write_extended_descriptor>
81136d94:	103fe61e 	bne	r2,zero,81136d30 <__reset+0xfb116d30>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81136d98:	00000606 	br	81136db4 <alt_msgdma_descriptor_async_transfer+0x230>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81136d9c:	e0bffd17 	ldw	r2,-12(fp)
81136da0:	10801817 	ldw	r2,96(r2)
81136da4:	1009883a 	mov	r4,r2
81136da8:	112d5180 	call	8112d518 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81136dac:	00bfffc4 	movi	r2,-1
81136db0:	00003f06 	br	81136eb0 <alt_msgdma_descriptor_async_transfer+0x32c>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
81136db4:	e0bffd17 	ldw	r2,-12(fp)
81136db8:	10800b17 	ldw	r2,44(r2)
81136dbc:	10001c26 	beq	r2,zero,81136e30 <alt_msgdma_descriptor_async_transfer+0x2ac>
    {

        control |= (dev->control |
81136dc0:	e0bffd17 	ldw	r2,-12(fp)
81136dc4:	10c00d17 	ldw	r3,52(r2)
81136dc8:	e0bff117 	ldw	r2,-60(fp)
81136dcc:	1884b03a 	or	r2,r3,r2
81136dd0:	10800514 	ori	r2,r2,20
81136dd4:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81136dd8:	e0fff117 	ldw	r3,-60(fp)
81136ddc:	00bff7c4 	movi	r2,-33
81136de0:	1884703a 	and	r2,r3,r2
81136de4:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136de8:	0005303a 	rdctl	r2,status
81136dec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136df0:	e0fff917 	ldw	r3,-28(fp)
81136df4:	00bfff84 	movi	r2,-2
81136df8:	1884703a 	and	r2,r3,r2
81136dfc:	1001703a 	wrctl	status,r2
  
  return context;
81136e00:	e0bff917 	ldw	r2,-28(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
81136e04:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81136e08:	e0bffd17 	ldw	r2,-12(fp)
81136e0c:	10800317 	ldw	r2,12(r2)
81136e10:	10800104 	addi	r2,r2,4
81136e14:	e0fff117 	ldw	r3,-60(fp)
81136e18:	10c00035 	stwio	r3,0(r2)
81136e1c:	e0bff217 	ldw	r2,-56(fp)
81136e20:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136e24:	e0bff517 	ldw	r2,-44(fp)
81136e28:	1001703a 	wrctl	status,r2
81136e2c:	00001b06 	br	81136e9c <alt_msgdma_descriptor_async_transfer+0x318>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
81136e30:	e0bffd17 	ldw	r2,-12(fp)
81136e34:	10c00d17 	ldw	r3,52(r2)
81136e38:	e0bff117 	ldw	r2,-60(fp)
81136e3c:	1884b03a 	or	r2,r3,r2
81136e40:	10800114 	ori	r2,r2,4
81136e44:	e0bff115 	stw	r2,-60(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
81136e48:	e0fff117 	ldw	r3,-60(fp)
81136e4c:	00bff3c4 	movi	r2,-49
81136e50:	1884703a 	and	r2,r3,r2
81136e54:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136e58:	0005303a 	rdctl	r2,status
81136e5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136e60:	e0fffa17 	ldw	r3,-24(fp)
81136e64:	00bfff84 	movi	r2,-2
81136e68:	1884703a 	and	r2,r3,r2
81136e6c:	1001703a 	wrctl	status,r2
  
  return context;
81136e70:	e0bffa17 	ldw	r2,-24(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
81136e74:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81136e78:	e0bffd17 	ldw	r2,-12(fp)
81136e7c:	10800317 	ldw	r2,12(r2)
81136e80:	10800104 	addi	r2,r2,4
81136e84:	e0fff117 	ldw	r3,-60(fp)
81136e88:	10c00035 	stwio	r3,0(r2)
81136e8c:	e0bff217 	ldw	r2,-56(fp)
81136e90:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81136e94:	e0bff817 	ldw	r2,-32(fp)
81136e98:	1001703a 	wrctl	status,r2

    /*
	 * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
81136e9c:	e0bffd17 	ldw	r2,-12(fp)
81136ea0:	10801817 	ldw	r2,96(r2)
81136ea4:	1009883a 	mov	r4,r2
81136ea8:	112d5180 	call	8112d518 <OSSemPost>
    
    return 0;
81136eac:	0005883a 	mov	r2,zero
}
81136eb0:	e037883a 	mov	sp,fp
81136eb4:	dfc00117 	ldw	ra,4(sp)
81136eb8:	df000017 	ldw	fp,0(sp)
81136ebc:	dec00204 	addi	sp,sp,8
81136ec0:	f800283a 	ret

81136ec4 <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
	alt_msgdma_dev *dev, 
	alt_msgdma_standard_descriptor *standard_desc, 
	alt_msgdma_extended_descriptor *extended_desc)
{
81136ec4:	deffee04 	addi	sp,sp,-72
81136ec8:	de00012e 	bgeu	sp,et,81136ed0 <alt_msgdma_descriptor_sync_transfer+0xc>
81136ecc:	003b68fa 	trap	3
81136ed0:	dfc01115 	stw	ra,68(sp)
81136ed4:	df001015 	stw	fp,64(sp)
81136ed8:	df001004 	addi	fp,sp,64
81136edc:	e13ffd15 	stw	r4,-12(fp)
81136ee0:	e17ffe15 	stw	r5,-8(fp)
81136ee4:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
81136ee8:	e03ff415 	stw	zero,-48(fp)
    alt_irq_context context=0;
81136eec:	e03ff515 	stw	zero,-44(fp)
    alt_u32 csr_status = 0;
81136ef0:	e03ff015 	stw	zero,-64(fp)
    alt_u16 counter = 0;
81136ef4:	e03ff10d 	sth	zero,-60(fp)
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136ef8:	e0bffd17 	ldw	r2,-12(fp)
81136efc:	10800317 	ldw	r2,12(r2)
81136f00:	10800204 	addi	r2,r2,8
81136f04:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
81136f08:	10bfffcc 	andi	r2,r2,65535
81136f0c:	e0bff215 	stw	r2,-56(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136f10:	e0bffd17 	ldw	r2,-12(fp)
81136f14:	10800317 	ldw	r2,12(r2)
81136f18:	10800204 	addi	r2,r2,8
81136f1c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
81136f20:	1004d43a 	srli	r2,r2,16
81136f24:	e0bff315 	stw	r2,-52(fp)
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
81136f28:	00807804 	movi	r2,480
81136f2c:	e0bff615 	stw	r2,-40(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81136f30:	00001906 	br	81136f98 <alt_msgdma_descriptor_sync_transfer+0xd4>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
81136f34:	01000044 	movi	r4,1
81136f38:	11254440 	call	81125444 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
81136f3c:	e0bff10b 	ldhu	r2,-60(fp)
81136f40:	1084e230 	cmpltui	r2,r2,5000
81136f44:	1000051e 	bne	r2,zero,81136f5c <alt_msgdma_descriptor_sync_transfer+0x98>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
81136f48:	01204534 	movhi	r4,33044
81136f4c:	21329104 	addi	r4,r4,-13756
81136f50:	11390a80 	call	811390a8 <alt_printf>
				" for storing descriptor\n");
            return -ETIME;
81136f54:	00bff084 	movi	r2,-62
81136f58:	0000d706 	br	811372b8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;  
81136f5c:	e0bff10b 	ldhu	r2,-60(fp)
81136f60:	10800044 	addi	r2,r2,1
81136f64:	e0bff10d 	sth	r2,-60(fp)
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136f68:	e0bffd17 	ldw	r2,-12(fp)
81136f6c:	10800317 	ldw	r2,12(r2)
81136f70:	10800204 	addi	r2,r2,8
81136f74:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
81136f78:	10bfffcc 	andi	r2,r2,65535
81136f7c:	e0bff215 	stw	r2,-56(fp)
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
81136f80:	e0bffd17 	ldw	r2,-12(fp)
81136f84:	10800317 	ldw	r2,12(r2)
81136f88:	10800204 	addi	r2,r2,8
81136f8c:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
81136f90:	1004d43a 	srli	r2,r2,16
81136f94:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81136f98:	e0bffd17 	ldw	r2,-12(fp)
81136f9c:	10800917 	ldw	r2,36(r2)
81136fa0:	e0fff317 	ldw	r3,-52(fp)
81136fa4:	18bfe32e 	bgeu	r3,r2,81136f34 <__reset+0xfb116f34>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
81136fa8:	e0bffd17 	ldw	r2,-12(fp)
81136fac:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
81136fb0:	e0fff217 	ldw	r3,-56(fp)
81136fb4:	18bfdf2e 	bgeu	r3,r2,81136f34 <__reset+0xfb116f34>

     /*
     * When running in a multi threaded environment, obtain the "regs_lock"
     * semaphore. This ensures that accessing registers is thread-safe.
     */
	ALT_SEM_PEND (dev->regs_lock, 0);
81136fb8:	e0bffd17 	ldw	r2,-12(fp)
81136fbc:	10801817 	ldw	r2,96(r2)
81136fc0:	e0bff815 	stw	r2,-32(fp)
81136fc4:	e03ffc0d 	sth	zero,-16(fp)
81136fc8:	e0bffc0b 	ldhu	r2,-16(fp)
81136fcc:	e0fffc84 	addi	r3,fp,-14
81136fd0:	180d883a 	mov	r6,r3
81136fd4:	100b883a 	mov	r5,r2
81136fd8:	e13ff817 	ldw	r4,-32(fp)
81136fdc:	112d1900 	call	8112d190 <OSSemPend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81136fe0:	0005303a 	rdctl	r2,status
81136fe4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81136fe8:	e0fffb17 	ldw	r3,-20(fp)
81136fec:	00bfff84 	movi	r2,-2
81136ff0:	1884703a 	and	r2,r3,r2
81136ff4:	1001703a 	wrctl	status,r2
  
  return context;
81136ff8:	e0bffb17 	ldw	r2,-20(fp)
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
81136ffc:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
81137000:	e0bffd17 	ldw	r2,-12(fp)
81137004:	10800317 	ldw	r2,12(r2)
81137008:	10800104 	addi	r2,r2,4
8113700c:	00c00804 	movi	r3,32
81137010:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
81137014:	e0bffd17 	ldw	r2,-12(fp)
81137018:	10800317 	ldw	r2,12(r2)
8113701c:	e0fffd17 	ldw	r3,-12(fp)
81137020:	18c00317 	ldw	r3,12(r3)
81137024:	18c00037 	ldwio	r3,0(r3)
81137028:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
8113702c:	e0bffe17 	ldw	r2,-8(fp)
81137030:	10001f26 	beq	r2,zero,811370b0 <alt_msgdma_descriptor_sync_transfer+0x1ec>
81137034:	e0bfff17 	ldw	r2,-4(fp)
81137038:	10001d1e 	bne	r2,zero,811370b0 <alt_msgdma_descriptor_sync_transfer+0x1ec>
    {
        counter = 0; /* reset counter */
8113703c:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81137040:	00001106 	br	81137088 <alt_msgdma_descriptor_sync_transfer+0x1c4>
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
81137044:	01000044 	movi	r4,1
81137048:	11254440 	call	81125444 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
8113704c:	e0bff10b 	ldhu	r2,-60(fp)
81137050:	1084e230 	cmpltui	r2,r2,5000
81137054:	1000091e 	bne	r2,zero,8113707c <alt_msgdma_descriptor_sync_transfer+0x1b8>
            {
                alt_printf("time out after 5 msec while writing standard" 
81137058:	01204534 	movhi	r4,33044
8113705c:	2132a504 	addi	r4,r4,-13676
81137060:	11390a80 	call	811390a8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
81137064:	e0bffd17 	ldw	r2,-12(fp)
81137068:	10801817 	ldw	r2,96(r2)
8113706c:	1009883a 	mov	r4,r2
81137070:	112d5180 	call	8112d518 <OSSemPost>
				
                return -ETIME;
81137074:	00bff084 	movi	r2,-62
81137078:	00008f06 	br	811372b8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;    
8113707c:	e0bff10b 	ldhu	r2,-60(fp)
81137080:	10800044 	addi	r2,r2,1
81137084:	e0bff10d 	sth	r2,-60(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
81137088:	e0bffd17 	ldw	r2,-12(fp)
8113708c:	10c00317 	ldw	r3,12(r2)
81137090:	e0bffd17 	ldw	r2,-12(fp)
81137094:	10800417 	ldw	r2,16(r2)
81137098:	e1bffe17 	ldw	r6,-8(fp)
8113709c:	100b883a 	mov	r5,r2
811370a0:	1809883a 	mov	r4,r3
811370a4:	11366380 	call	81136638 <alt_msgdma_write_standard_descriptor>
811370a8:	103fe61e 	bne	r2,zero,81137044 <__reset+0xfb117044>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
811370ac:	00002706 	br	8113714c <alt_msgdma_descriptor_sync_transfer+0x288>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
811370b0:	e0bffe17 	ldw	r2,-8(fp)
811370b4:	10001f1e 	bne	r2,zero,81137134 <alt_msgdma_descriptor_sync_transfer+0x270>
811370b8:	e0bfff17 	ldw	r2,-4(fp)
811370bc:	10001d26 	beq	r2,zero,81137134 <alt_msgdma_descriptor_sync_transfer+0x270>
    {
        counter = 0; /* reset counter */
811370c0:	e03ff10d 	sth	zero,-60(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
811370c4:	00001106 	br	8113710c <alt_msgdma_descriptor_sync_transfer+0x248>
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
811370c8:	01000044 	movi	r4,1
811370cc:	11254440 	call	81125444 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811370d0:	e0bff10b 	ldhu	r2,-60(fp)
811370d4:	1084e230 	cmpltui	r2,r2,5000
811370d8:	1000091e 	bne	r2,zero,81137100 <alt_msgdma_descriptor_sync_transfer+0x23c>
            {
                alt_printf("time out after 5 msec while writing extended" 
811370dc:	01204534 	movhi	r4,33044
811370e0:	2132b604 	addi	r4,r4,-13608
811370e4:	11390a80 	call	811390a8 <alt_printf>
				/*
				* Now that access to the registers is complete, release the 
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
811370e8:	e0bffd17 	ldw	r2,-12(fp)
811370ec:	10801817 	ldw	r2,96(r2)
811370f0:	1009883a 	mov	r4,r2
811370f4:	112d5180 	call	8112d518 <OSSemPost>
				
                return -ETIME;
811370f8:	00bff084 	movi	r2,-62
811370fc:	00006e06 	br	811372b8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
            }
            counter++;
81137100:	e0bff10b 	ldhu	r2,-60(fp)
81137104:	10800044 	addi	r2,r2,1
81137108:	e0bff10d 	sth	r2,-60(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
8113710c:	e0bffd17 	ldw	r2,-12(fp)
81137110:	10c00317 	ldw	r3,12(r2)
81137114:	e0bffd17 	ldw	r2,-12(fp)
81137118:	10800417 	ldw	r2,16(r2)
8113711c:	e1bfff17 	ldw	r6,-4(fp)
81137120:	100b883a 	mov	r5,r2
81137124:	1809883a 	mov	r4,r3
81137128:	11366d40 	call	811366d4 <alt_msgdma_write_extended_descriptor>
8113712c:	103fe61e 	bne	r2,zero,811370c8 <__reset+0xfb1170c8>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
81137130:	00000606 	br	8113714c <alt_msgdma_descriptor_sync_transfer+0x288>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81137134:	e0bffd17 	ldw	r2,-12(fp)
81137138:	10801817 	ldw	r2,96(r2)
8113713c:	1009883a 	mov	r4,r2
81137140:	112d5180 	call	8112d518 <OSSemPost>
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
81137144:	00bfffc4 	movi	r2,-1
81137148:	00005b06 	br	811372b8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
8113714c:	e0bffd17 	ldw	r2,-12(fp)
81137150:	10800317 	ldw	r2,12(r2)
81137154:	10800104 	addi	r2,r2,4
81137158:	e0fffd17 	ldw	r3,-12(fp)
8113715c:	19000d17 	ldw	r4,52(r3)
81137160:	00fff2c4 	movi	r3,-53
81137164:	20c6703a 	and	r3,r4,r3
81137168:	18c00114 	ori	r3,r3,4
8113716c:	10c00035 	stwio	r3,0(r2)
81137170:	e0bff517 	ldw	r2,-44(fp)
81137174:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81137178:	e0bff717 	ldw	r2,-36(fp)
8113717c:	1001703a 	wrctl	status,r2
		(~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
		(~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
81137180:	e03ff10d 	sth	zero,-60(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
81137184:	e0bffd17 	ldw	r2,-12(fp)
81137188:	10800317 	ldw	r2,12(r2)
8113718c:	10800037 	ldwio	r2,0(r2)
81137190:	e0bff015 	stw	r2,-64(fp)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
81137194:	00001506 	br	811371ec <alt_msgdma_descriptor_sync_transfer+0x328>
    {
        alt_busy_sleep(1); /* delay 1us */
81137198:	01000044 	movi	r4,1
8113719c:	11254440 	call	81125444 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
811371a0:	e0bff10b 	ldhu	r2,-60(fp)
811371a4:	1084e230 	cmpltui	r2,r2,5000
811371a8:	1000091e 	bne	r2,zero,811371d0 <alt_msgdma_descriptor_sync_transfer+0x30c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
811371ac:	01204534 	movhi	r4,33044
811371b0:	2132c704 	addi	r4,r4,-13540
811371b4:	11390a80 	call	811390a8 <alt_printf>
			
			/*
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
811371b8:	e0bffd17 	ldw	r2,-12(fp)
811371bc:	10801817 	ldw	r2,96(r2)
811371c0:	1009883a 	mov	r4,r2
811371c4:	112d5180 	call	8112d518 <OSSemPost>
			
            return -ETIME;
811371c8:	00bff084 	movi	r2,-62
811371cc:	00003a06 	br	811372b8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
        }
        counter++;
811371d0:	e0bff10b 	ldhu	r2,-60(fp)
811371d4:	10800044 	addi	r2,r2,1
811371d8:	e0bff10d 	sth	r2,-60(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
811371dc:	e0bffd17 	ldw	r2,-12(fp)
811371e0:	10800317 	ldw	r2,12(r2)
811371e4:	10800037 	ldwio	r2,0(r2)
811371e8:	e0bff015 	stw	r2,-64(fp)
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
811371ec:	e0fff017 	ldw	r3,-64(fp)
811371f0:	e0bff617 	ldw	r2,-40(fp)
811371f4:	1884703a 	and	r2,r3,r2
811371f8:	1000031e 	bne	r2,zero,81137208 <alt_msgdma_descriptor_sync_transfer+0x344>
811371fc:	e0bff017 	ldw	r2,-64(fp)
81137200:	1080004c 	andi	r2,r2,1
81137204:	103fe41e 	bne	r2,zero,81137198 <__reset+0xfb117198>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
81137208:	e0fff017 	ldw	r3,-64(fp)
8113720c:	e0bff617 	ldw	r2,-40(fp)
81137210:	1884703a 	and	r2,r3,r2
81137214:	10000626 	beq	r2,zero,81137230 <alt_msgdma_descriptor_sync_transfer+0x36c>
    {
		/*
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
81137218:	e0bffd17 	ldw	r2,-12(fp)
8113721c:	10801817 	ldw	r2,96(r2)
81137220:	1009883a 	mov	r4,r2
81137224:	112d5180 	call	8112d518 <OSSemPost>
		
        return error;
81137228:	e0bff617 	ldw	r2,-40(fp)
8113722c:	00002206 	br	811372b8 <alt_msgdma_descriptor_sync_transfer+0x3f4>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
81137230:	e0bffd17 	ldw	r2,-12(fp)
81137234:	10800317 	ldw	r2,12(r2)
81137238:	10800104 	addi	r2,r2,4
8113723c:	10800037 	ldwio	r2,0(r2)
81137240:	10800814 	ori	r2,r2,32
81137244:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81137248:	0005303a 	rdctl	r2,status
8113724c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81137250:	e0fffa17 	ldw	r3,-24(fp)
81137254:	00bfff84 	movi	r2,-2
81137258:	1884703a 	and	r2,r3,r2
8113725c:	1001703a 	wrctl	status,r2
  
  return context;
81137260:	e0bffa17 	ldw	r2,-24(fp)
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
81137264:	e0bff515 	stw	r2,-44(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
81137268:	e0bffd17 	ldw	r2,-12(fp)
8113726c:	10800317 	ldw	r2,12(r2)
81137270:	10800104 	addi	r2,r2,4
81137274:	e0fff417 	ldw	r3,-48(fp)
81137278:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
8113727c:	e0bffd17 	ldw	r2,-12(fp)
81137280:	10800317 	ldw	r2,12(r2)
81137284:	e0fffd17 	ldw	r3,-12(fp)
81137288:	18c00317 	ldw	r3,12(r3)
8113728c:	18c00037 	ldwio	r3,0(r3)
81137290:	10c00035 	stwio	r3,0(r2)
81137294:	e0bff517 	ldw	r2,-44(fp)
81137298:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113729c:	e0bff917 	ldw	r2,-28(fp)
811372a0:	1001703a 	wrctl	status,r2

	/*
	* Now that access to the registers is complete, release the registers
	* semaphore so that other threads can access the registers.
	*/
    ALT_SEM_POST (dev->regs_lock);
811372a4:	e0bffd17 	ldw	r2,-12(fp)
811372a8:	10801817 	ldw	r2,96(r2)
811372ac:	1009883a 	mov	r4,r2
811372b0:	112d5180 	call	8112d518 <OSSemPost>
    
    return 0;
811372b4:	0005883a 	mov	r2,zero

}
811372b8:	e037883a 	mov	sp,fp
811372bc:	dfc00117 	ldw	ra,4(sp)
811372c0:	df000017 	ldw	fp,0(sp)
811372c4:	dec00204 	addi	sp,sp,8
811372c8:	f800283a 	ret

811372cc <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
811372cc:	defff804 	addi	sp,sp,-32
811372d0:	de00012e 	bgeu	sp,et,811372d8 <alt_msgdma_construct_standard_st_to_mm_descriptor+0xc>
811372d4:	003b68fa 	trap	3
811372d8:	dfc00715 	stw	ra,28(sp)
811372dc:	df000615 	stw	fp,24(sp)
811372e0:	df000604 	addi	fp,sp,24
811372e4:	e13ffc15 	stw	r4,-16(fp)
811372e8:	e17ffd15 	stw	r5,-12(fp)
811372ec:	e1bffe15 	stw	r6,-8(fp)
811372f0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
811372f4:	e0800217 	ldw	r2,8(fp)
811372f8:	d8800115 	stw	r2,4(sp)
811372fc:	e0bfff17 	ldw	r2,-4(fp)
81137300:	d8800015 	stw	r2,0(sp)
81137304:	e1fffe17 	ldw	r7,-8(fp)
81137308:	000d883a 	mov	r6,zero
8113730c:	e17ffd17 	ldw	r5,-12(fp)
81137310:	e13ffc17 	ldw	r4,-16(fp)
81137314:	11369940 	call	81136994 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
81137318:	e037883a 	mov	sp,fp
8113731c:	dfc00117 	ldw	ra,4(sp)
81137320:	df000017 	ldw	fp,0(sp)
81137324:	dec00204 	addi	sp,sp,8
81137328:	f800283a 	ret

8113732c <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address,
	alt_u32 length,
	alt_u32 control)
{
8113732c:	defff804 	addi	sp,sp,-32
81137330:	de00012e 	bgeu	sp,et,81137338 <alt_msgdma_construct_standard_mm_to_st_descriptor+0xc>
81137334:	003b68fa 	trap	3
81137338:	dfc00715 	stw	ra,28(sp)
8113733c:	df000615 	stw	fp,24(sp)
81137340:	df000604 	addi	fp,sp,24
81137344:	e13ffc15 	stw	r4,-16(fp)
81137348:	e17ffd15 	stw	r5,-12(fp)
8113734c:	e1bffe15 	stw	r6,-8(fp)
81137350:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
81137354:	e0800217 	ldw	r2,8(fp)
81137358:	d8800115 	stw	r2,4(sp)
8113735c:	e0bfff17 	ldw	r2,-4(fp)
81137360:	d8800015 	stw	r2,0(sp)
81137364:	000f883a 	mov	r7,zero
81137368:	e1bffe17 	ldw	r6,-8(fp)
8113736c:	e17ffd17 	ldw	r5,-12(fp)
81137370:	e13ffc17 	ldw	r4,-16(fp)
81137374:	11369940 	call	81136994 <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
81137378:	e037883a 	mov	sp,fp
8113737c:	dfc00117 	ldw	ra,4(sp)
81137380:	df000017 	ldw	fp,0(sp)
81137384:	dec00204 	addi	sp,sp,8
81137388:	f800283a 	ret

8113738c <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
8113738c:	defff804 	addi	sp,sp,-32
81137390:	de00012e 	bgeu	sp,et,81137398 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0xc>
81137394:	003b68fa 	trap	3
81137398:	dfc00715 	stw	ra,28(sp)
8113739c:	df000615 	stw	fp,24(sp)
811373a0:	df000604 	addi	fp,sp,24
811373a4:	e13ffc15 	stw	r4,-16(fp)
811373a8:	e17ffd15 	stw	r5,-12(fp)
811373ac:	e1bffe15 	stw	r6,-8(fp)
811373b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
811373b4:	e0800317 	ldw	r2,12(fp)
811373b8:	d8800115 	stw	r2,4(sp)
811373bc:	e0800217 	ldw	r2,8(fp)
811373c0:	d8800015 	stw	r2,0(sp)
811373c4:	e1ffff17 	ldw	r7,-4(fp)
811373c8:	e1bffe17 	ldw	r6,-8(fp)
811373cc:	e17ffd17 	ldw	r5,-12(fp)
811373d0:	e13ffc17 	ldw	r4,-16(fp)
811373d4:	11369940 	call	81136994 <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
811373d8:	e037883a 	mov	sp,fp
811373dc:	dfc00117 	ldw	ra,4(sp)
811373e0:	df000017 	ldw	fp,0(sp)
811373e4:	dec00204 	addi	sp,sp,8
811373e8:	f800283a 	ret

811373ec <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
811373ec:	defff004 	addi	sp,sp,-64
811373f0:	de00012e 	bgeu	sp,et,811373f8 <alt_msgdma_construct_extended_st_to_mm_descriptor+0xc>
811373f4:	003b68fa 	trap	3
811373f8:	dfc00f15 	stw	ra,60(sp)
811373fc:	df000e15 	stw	fp,56(sp)
81137400:	df000e04 	addi	fp,sp,56
81137404:	e13ff915 	stw	r4,-28(fp)
81137408:	e17ffa15 	stw	r5,-24(fp)
8113740c:	e1bffb15 	stw	r6,-20(fp)
81137410:	e1fffc15 	stw	r7,-16(fp)
81137414:	e1000317 	ldw	r4,12(fp)
81137418:	e0c00417 	ldw	r3,16(fp)
8113741c:	e0800517 	ldw	r2,20(fp)
81137420:	e13ffd0d 	sth	r4,-12(fp)
81137424:	e0fffe05 	stb	r3,-8(fp)
81137428:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113742c:	e0bffd0b 	ldhu	r2,-12(fp)
81137430:	e0fffe03 	ldbu	r3,-8(fp)
81137434:	e13fff0b 	ldhu	r4,-4(fp)
81137438:	d9000615 	stw	r4,24(sp)
8113743c:	d8000515 	stw	zero,20(sp)
81137440:	d8c00415 	stw	r3,16(sp)
81137444:	d8000315 	stw	zero,12(sp)
81137448:	d8800215 	stw	r2,8(sp)
8113744c:	e0800217 	ldw	r2,8(fp)
81137450:	d8800115 	stw	r2,4(sp)
81137454:	e0bffc17 	ldw	r2,-16(fp)
81137458:	d8800015 	stw	r2,0(sp)
8113745c:	e1fffb17 	ldw	r7,-20(fp)
81137460:	000d883a 	mov	r6,zero
81137464:	e17ffa17 	ldw	r5,-24(fp)
81137468:	e13ff917 	ldw	r4,-28(fp)
8113746c:	1136a280 	call	81136a28 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
81137470:	e037883a 	mov	sp,fp
81137474:	dfc00117 	ldw	ra,4(sp)
81137478:	df000017 	ldw	fp,0(sp)
8113747c:	dec00204 	addi	sp,sp,8
81137480:	f800283a 	ret

81137484 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
81137484:	defff004 	addi	sp,sp,-64
81137488:	de00012e 	bgeu	sp,et,81137490 <alt_msgdma_construct_extended_mm_to_st_descriptor+0xc>
8113748c:	003b68fa 	trap	3
81137490:	dfc00f15 	stw	ra,60(sp)
81137494:	df000e15 	stw	fp,56(sp)
81137498:	df000e04 	addi	fp,sp,56
8113749c:	e13ff915 	stw	r4,-28(fp)
811374a0:	e17ffa15 	stw	r5,-24(fp)
811374a4:	e1bffb15 	stw	r6,-20(fp)
811374a8:	e1fffc15 	stw	r7,-16(fp)
811374ac:	e1000317 	ldw	r4,12(fp)
811374b0:	e0c00417 	ldw	r3,16(fp)
811374b4:	e0800517 	ldw	r2,20(fp)
811374b8:	e13ffd0d 	sth	r4,-12(fp)
811374bc:	e0fffe05 	stb	r3,-8(fp)
811374c0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
811374c4:	e0bffd0b 	ldhu	r2,-12(fp)
811374c8:	e0fffe03 	ldbu	r3,-8(fp)
811374cc:	e13fff0b 	ldhu	r4,-4(fp)
811374d0:	d8000615 	stw	zero,24(sp)
811374d4:	d9000515 	stw	r4,20(sp)
811374d8:	d8000415 	stw	zero,16(sp)
811374dc:	d8c00315 	stw	r3,12(sp)
811374e0:	d8800215 	stw	r2,8(sp)
811374e4:	e0800217 	ldw	r2,8(fp)
811374e8:	d8800115 	stw	r2,4(sp)
811374ec:	e0bffc17 	ldw	r2,-16(fp)
811374f0:	d8800015 	stw	r2,0(sp)
811374f4:	000f883a 	mov	r7,zero
811374f8:	e1bffb17 	ldw	r6,-20(fp)
811374fc:	e17ffa17 	ldw	r5,-24(fp)
81137500:	e13ff917 	ldw	r4,-28(fp)
81137504:	1136a280 	call	81136a28 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
81137508:	e037883a 	mov	sp,fp
8113750c:	dfc00117 	ldw	ra,4(sp)
81137510:	df000017 	ldw	fp,0(sp)
81137514:	dec00204 	addi	sp,sp,8
81137518:	f800283a 	ret

8113751c <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
8113751c:	deffee04 	addi	sp,sp,-72
81137520:	de00012e 	bgeu	sp,et,81137528 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0xc>
81137524:	003b68fa 	trap	3
81137528:	dfc01115 	stw	ra,68(sp)
8113752c:	df001015 	stw	fp,64(sp)
81137530:	df001004 	addi	fp,sp,64
81137534:	e13ff715 	stw	r4,-36(fp)
81137538:	e17ff815 	stw	r5,-32(fp)
8113753c:	e1bff915 	stw	r6,-28(fp)
81137540:	e1fffa15 	stw	r7,-24(fp)
81137544:	e1800417 	ldw	r6,16(fp)
81137548:	e1400517 	ldw	r5,20(fp)
8113754c:	e1000617 	ldw	r4,24(fp)
81137550:	e0c00717 	ldw	r3,28(fp)
81137554:	e0800817 	ldw	r2,32(fp)
81137558:	e1bffb0d 	sth	r6,-20(fp)
8113755c:	e17ffc05 	stb	r5,-16(fp)
81137560:	e13ffd05 	stb	r4,-12(fp)
81137564:	e0fffe0d 	sth	r3,-8(fp)
81137568:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
8113756c:	e0bffb0b 	ldhu	r2,-20(fp)
81137570:	e0fffc03 	ldbu	r3,-16(fp)
81137574:	e13ffd03 	ldbu	r4,-12(fp)
81137578:	e17ffe0b 	ldhu	r5,-8(fp)
8113757c:	e1bfff0b 	ldhu	r6,-4(fp)
81137580:	d9800615 	stw	r6,24(sp)
81137584:	d9400515 	stw	r5,20(sp)
81137588:	d9000415 	stw	r4,16(sp)
8113758c:	d8c00315 	stw	r3,12(sp)
81137590:	d8800215 	stw	r2,8(sp)
81137594:	e0800317 	ldw	r2,12(fp)
81137598:	d8800115 	stw	r2,4(sp)
8113759c:	e0800217 	ldw	r2,8(fp)
811375a0:	d8800015 	stw	r2,0(sp)
811375a4:	e1fffa17 	ldw	r7,-24(fp)
811375a8:	e1bff917 	ldw	r6,-28(fp)
811375ac:	e17ff817 	ldw	r5,-32(fp)
811375b0:	e13ff717 	ldw	r4,-36(fp)
811375b4:	1136a280 	call	81136a28 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
811375b8:	e037883a 	mov	sp,fp
811375bc:	dfc00117 	ldw	ra,4(sp)
811375c0:	df000017 	ldw	fp,0(sp)
811375c4:	dec00204 	addi	sp,sp,8
811375c8:	f800283a 	ret

811375cc <alt_msgdma_construct_prefetcher_standard_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
811375cc:	defffb04 	addi	sp,sp,-20
811375d0:	de00012e 	bgeu	sp,et,811375d8 <alt_msgdma_construct_prefetcher_standard_descriptor+0xc>
811375d4:	003b68fa 	trap	3
811375d8:	df000415 	stw	fp,16(sp)
811375dc:	df000404 	addi	fp,sp,16
811375e0:	e13ffc15 	stw	r4,-16(fp)
811375e4:	e17ffd15 	stw	r5,-12(fp)
811375e8:	e1bffe15 	stw	r6,-8(fp)
811375ec:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
811375f0:	e0bffc17 	ldw	r2,-16(fp)
811375f4:	10c01217 	ldw	r3,72(r2)
811375f8:	e0800117 	ldw	r2,4(fp)
811375fc:	18800436 	bltu	r3,r2,81137610 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
81137600:	e0bffc17 	ldw	r2,-16(fp)
81137604:	10801703 	ldbu	r2,92(r2)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
81137608:	10803fcc 	andi	r2,r2,255
8113760c:	10000226 	beq	r2,zero,81137618 <alt_msgdma_construct_prefetcher_standard_descriptor+0x4c>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
81137610:	00bffa84 	movi	r2,-22
81137614:	00001406 	br	81137668 <alt_msgdma_construct_prefetcher_standard_descriptor+0x9c>
    }
    descriptor->read_address = read_address;
81137618:	e0bffd17 	ldw	r2,-12(fp)
8113761c:	e0fffe17 	ldw	r3,-8(fp)
81137620:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
81137624:	e0bffd17 	ldw	r2,-12(fp)
81137628:	e0ffff17 	ldw	r3,-4(fp)
8113762c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81137630:	e0bffd17 	ldw	r2,-12(fp)
81137634:	e0c00117 	ldw	r3,4(fp)
81137638:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
8113763c:	e0fffd17 	ldw	r3,-12(fp)
81137640:	e0bffd17 	ldw	r2,-12(fp)
81137644:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
81137648:	e0c00217 	ldw	r3,8(fp)
8113764c:	00900034 	movhi	r2,16384
81137650:	10bfffc4 	addi	r2,r2,-1
81137654:	1884703a 	and	r2,r3,r2
81137658:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
8113765c:	e0bffd17 	ldw	r2,-12(fp)
81137660:	10c00715 	stw	r3,28(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
81137664:	0005883a 	mov	r2,zero
}
81137668:	e037883a 	mov	sp,fp
8113766c:	df000017 	ldw	fp,0(sp)
81137670:	dec00104 	addi	sp,sp,4
81137674:	f800283a 	ret

81137678 <alt_msgdma_construct_prefetcher_extended_descriptor>:
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81137678:	defff404 	addi	sp,sp,-48
8113767c:	de00012e 	bgeu	sp,et,81137684 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc>
81137680:	003b68fa 	trap	3
81137684:	df000b15 	stw	fp,44(sp)
81137688:	df000b04 	addi	fp,sp,44
8113768c:	e13ff715 	stw	r4,-36(fp)
81137690:	e17ff815 	stw	r5,-32(fp)
81137694:	e1bff915 	stw	r6,-28(fp)
81137698:	e1fffa15 	stw	r7,-24(fp)
8113769c:	e1800517 	ldw	r6,20(fp)
811376a0:	e1400617 	ldw	r5,24(fp)
811376a4:	e1000717 	ldw	r4,28(fp)
811376a8:	e0c00817 	ldw	r3,32(fp)
811376ac:	e0800917 	ldw	r2,36(fp)
811376b0:	e1bffb0d 	sth	r6,-20(fp)
811376b4:	e17ffc05 	stb	r5,-16(fp)
811376b8:	e13ffd05 	stb	r4,-12(fp)
811376bc:	e0fffe0d 	sth	r3,-8(fp)
811376c0:	e0bfff0d 	sth	r2,-4(fp)
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811376c4:	e0bff717 	ldw	r2,-36(fp)
811376c8:	10c01217 	ldw	r3,72(r2)
811376cc:	e0800317 	ldw	r2,12(fp)
811376d0:	18801936 	bltu	r3,r2,81137738 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
811376d4:	e13ff717 	ldw	r4,-36(fp)
811376d8:	20801317 	ldw	r2,76(r4)
811376dc:	20c01417 	ldw	r3,80(r4)
811376e0:	e13ffe0b 	ldhu	r4,-8(fp)
811376e4:	213fffcc 	andi	r4,r4,65535
811376e8:	2015883a 	mov	r10,r4
811376ec:	0017883a 	mov	r11,zero
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
811376f0:	1ac01136 	bltu	r3,r11,81137738 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
811376f4:	58c0011e 	bne	r11,r3,811376fc <alt_msgdma_construct_prefetcher_extended_descriptor+0x84>
811376f8:	12800f36 	bltu	r2,r10,81137738 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
811376fc:	e13ff717 	ldw	r4,-36(fp)
81137700:	20801317 	ldw	r2,76(r4)
81137704:	20c01417 	ldw	r3,80(r4)
81137708:	e13fff0b 	ldhu	r4,-4(fp)
8113770c:	213fffcc 	andi	r4,r4,65535
81137710:	2011883a 	mov	r8,r4
81137714:	0013883a 	mov	r9,zero
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
81137718:	1a400736 	bltu	r3,r9,81137738 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
8113771c:	48c0011e 	bne	r9,r3,81137724 <alt_msgdma_construct_prefetcher_extended_descriptor+0xac>
81137720:	12000536 	bltu	r2,r8,81137738 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
81137724:	e0bff717 	ldw	r2,-36(fp)
81137728:	10801703 	ldbu	r2,92(r2)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
8113772c:	10803fcc 	andi	r2,r2,255
81137730:	10800060 	cmpeqi	r2,r2,1
81137734:	1000021e 	bne	r2,zero,81137740 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc8>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
81137738:	00bffa84 	movi	r2,-22
8113773c:	00003106 	br	81137804 <alt_msgdma_construct_prefetcher_extended_descriptor+0x18c>
    }
    
    descriptor->read_address_high = read_address_high;
81137740:	e0bff817 	ldw	r2,-32(fp)
81137744:	e0fff917 	ldw	r3,-28(fp)
81137748:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
8113774c:	e0bff817 	ldw	r2,-32(fp)
81137750:	e0fffa17 	ldw	r3,-24(fp)
81137754:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
81137758:	e0bff817 	ldw	r2,-32(fp)
8113775c:	e0c00117 	ldw	r3,4(fp)
81137760:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
81137764:	e0bff817 	ldw	r2,-32(fp)
81137768:	e0c00217 	ldw	r3,8(fp)
8113776c:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
81137770:	e0bff817 	ldw	r2,-32(fp)
81137774:	e0c00317 	ldw	r3,12(fp)
81137778:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
8113777c:	e0bff817 	ldw	r2,-32(fp)
81137780:	e0fffb0b 	ldhu	r3,-20(fp)
81137784:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
81137788:	e0bff817 	ldw	r2,-32(fp)
8113778c:	e0fffc03 	ldbu	r3,-16(fp)
81137790:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
81137794:	e0bff817 	ldw	r2,-32(fp)
81137798:	e0fffd03 	ldbu	r3,-12(fp)
8113779c:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
811377a0:	e0bff817 	ldw	r2,-32(fp)
811377a4:	e0fffe0b 	ldhu	r3,-8(fp)
811377a8:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
811377ac:	e0bff817 	ldw	r2,-32(fp)
811377b0:	e0ffff0b 	ldhu	r3,-4(fp)
811377b4:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
811377b8:	e0bff817 	ldw	r2,-32(fp)
811377bc:	1019883a 	mov	r12,r2
811377c0:	001b883a 	mov	r13,zero
811377c4:	e33ff515 	stw	r12,-44(fp)
811377c8:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
811377cc:	e0fff517 	ldw	r3,-44(fp)
811377d0:	e0bff817 	ldw	r2,-32(fp)
811377d4:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
811377d8:	e0fff617 	ldw	r3,-40(fp)
811377dc:	e0bff817 	ldw	r2,-32(fp)
811377e0:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
811377e4:	e0c00417 	ldw	r3,16(fp)
811377e8:	00900034 	movhi	r2,16384
811377ec:	10bfffc4 	addi	r2,r2,-1
811377f0:	1884703a 	and	r2,r3,r2
811377f4:	10e00034 	orhi	r3,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
811377f8:	e0bff817 	ldw	r2,-32(fp)
811377fc:	10c00f15 	stw	r3,60(r2)
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
81137800:	0005883a 	mov	r2,zero
}
81137804:	e037883a 	mov	sp,fp
81137808:	df000017 	ldw	fp,0(sp)
8113780c:	dec00104 	addi	sp,sp,4
81137810:	f800283a 	ret

81137814 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
81137814:	defff804 	addi	sp,sp,-32
81137818:	de00012e 	bgeu	sp,et,81137820 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0xc>
8113781c:	003b68fa 	trap	3
81137820:	dfc00715 	stw	ra,28(sp)
81137824:	df000615 	stw	fp,24(sp)
81137828:	df000604 	addi	fp,sp,24
8113782c:	e13ffc15 	stw	r4,-16(fp)
81137830:	e17ffd15 	stw	r5,-12(fp)
81137834:	e1bffe15 	stw	r6,-8(fp)
81137838:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113783c:	e0800317 	ldw	r2,12(fp)
81137840:	d8800115 	stw	r2,4(sp)
81137844:	e0800217 	ldw	r2,8(fp)
81137848:	d8800015 	stw	r2,0(sp)
8113784c:	e1ffff17 	ldw	r7,-4(fp)
81137850:	e1bffe17 	ldw	r6,-8(fp)
81137854:	e17ffd17 	ldw	r5,-12(fp)
81137858:	e13ffc17 	ldw	r4,-16(fp)
8113785c:	11375cc0 	call	811375cc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, write_address, length, control);
}
81137860:	e037883a 	mov	sp,fp
81137864:	dfc00117 	ldw	ra,4(sp)
81137868:	df000017 	ldw	fp,0(sp)
8113786c:	dec00204 	addi	sp,sp,8
81137870:	f800283a 	ret

81137874 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
81137874:	defff804 	addi	sp,sp,-32
81137878:	de00012e 	bgeu	sp,et,81137880 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0xc>
8113787c:	003b68fa 	trap	3
81137880:	dfc00715 	stw	ra,28(sp)
81137884:	df000615 	stw	fp,24(sp)
81137888:	df000604 	addi	fp,sp,24
8113788c:	e13ffc15 	stw	r4,-16(fp)
81137890:	e17ffd15 	stw	r5,-12(fp)
81137894:	e1bffe15 	stw	r6,-8(fp)
81137898:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
8113789c:	e0800217 	ldw	r2,8(fp)
811378a0:	d8800115 	stw	r2,4(sp)
811378a4:	e0bfff17 	ldw	r2,-4(fp)
811378a8:	d8800015 	stw	r2,0(sp)
811378ac:	e1fffe17 	ldw	r7,-8(fp)
811378b0:	000d883a 	mov	r6,zero
811378b4:	e17ffd17 	ldw	r5,-12(fp)
811378b8:	e13ffc17 	ldw	r4,-16(fp)
811378bc:	11375cc0 	call	811375cc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		0, write_address, length, control);
}
811378c0:	e037883a 	mov	sp,fp
811378c4:	dfc00117 	ldw	ra,4(sp)
811378c8:	df000017 	ldw	fp,0(sp)
811378cc:	dec00204 	addi	sp,sp,8
811378d0:	f800283a 	ret

811378d4 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *descriptor, 
	alt_u32 read_address, 
	alt_u32 length, 
	alt_u32 control)
{
811378d4:	defff804 	addi	sp,sp,-32
811378d8:	de00012e 	bgeu	sp,et,811378e0 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0xc>
811378dc:	003b68fa 	trap	3
811378e0:	dfc00715 	stw	ra,28(sp)
811378e4:	df000615 	stw	fp,24(sp)
811378e8:	df000604 	addi	fp,sp,24
811378ec:	e13ffc15 	stw	r4,-16(fp)
811378f0:	e17ffd15 	stw	r5,-12(fp)
811378f4:	e1bffe15 	stw	r6,-8(fp)
811378f8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
811378fc:	e0800217 	ldw	r2,8(fp)
81137900:	d8800115 	stw	r2,4(sp)
81137904:	e0bfff17 	ldw	r2,-4(fp)
81137908:	d8800015 	stw	r2,0(sp)
8113790c:	000f883a 	mov	r7,zero
81137910:	e1bffe17 	ldw	r6,-8(fp)
81137914:	e17ffd17 	ldw	r5,-12(fp)
81137918:	e13ffc17 	ldw	r4,-16(fp)
8113791c:	11375cc0 	call	811375cc <alt_msgdma_construct_prefetcher_standard_descriptor>
    		read_address, 0, length, control);
}
81137920:	e037883a 	mov	sp,fp
81137924:	dfc00117 	ldw	ra,4(sp)
81137928:	df000017 	ldw	fp,0(sp)
8113792c:	dec00204 	addi	sp,sp,8
81137930:	f800283a 	ret

81137934 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
81137934:	deffee04 	addi	sp,sp,-72
81137938:	de00012e 	bgeu	sp,et,81137940 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0xc>
8113793c:	003b68fa 	trap	3
81137940:	dfc01115 	stw	ra,68(sp)
81137944:	df001015 	stw	fp,64(sp)
81137948:	df001004 	addi	fp,sp,64
8113794c:	e13ff915 	stw	r4,-28(fp)
81137950:	e17ffa15 	stw	r5,-24(fp)
81137954:	e1bffb15 	stw	r6,-20(fp)
81137958:	e1fffc15 	stw	r7,-16(fp)
8113795c:	e1000417 	ldw	r4,16(fp)
81137960:	e0c00517 	ldw	r3,20(fp)
81137964:	e0800617 	ldw	r2,24(fp)
81137968:	e13ffd0d 	sth	r4,-12(fp)
8113796c:	e0fffe05 	stb	r3,-8(fp)
81137970:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
81137974:	e0bffd0b 	ldhu	r2,-12(fp)
81137978:	e0fffe03 	ldbu	r3,-8(fp)
8113797c:	e13fff0b 	ldhu	r4,-4(fp)
81137980:	d9000815 	stw	r4,32(sp)
81137984:	d8000715 	stw	zero,28(sp)
81137988:	d8c00615 	stw	r3,24(sp)
8113798c:	d8000515 	stw	zero,20(sp)
81137990:	d8800415 	stw	r2,16(sp)
81137994:	e0800317 	ldw	r2,12(fp)
81137998:	d8800315 	stw	r2,12(sp)
8113799c:	e0800217 	ldw	r2,8(fp)
811379a0:	d8800215 	stw	r2,8(sp)
811379a4:	e0bffc17 	ldw	r2,-16(fp)
811379a8:	d8800115 	stw	r2,4(sp)
811379ac:	e0bffb17 	ldw	r2,-20(fp)
811379b0:	d8800015 	stw	r2,0(sp)
811379b4:	000f883a 	mov	r7,zero
811379b8:	000d883a 	mov	r6,zero
811379bc:	e17ffa17 	ldw	r5,-24(fp)
811379c0:	e13ff917 	ldw	r4,-28(fp)
811379c4:	11376780 	call	81137678 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
811379c8:	e037883a 	mov	sp,fp
811379cc:	dfc00117 	ldw	ra,4(sp)
811379d0:	df000017 	ldw	fp,0(sp)
811379d4:	dec00204 	addi	sp,sp,8
811379d8:	f800283a 	ret

811379dc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
811379dc:	deffee04 	addi	sp,sp,-72
811379e0:	de00012e 	bgeu	sp,et,811379e8 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0xc>
811379e4:	003b68fa 	trap	3
811379e8:	dfc01115 	stw	ra,68(sp)
811379ec:	df001015 	stw	fp,64(sp)
811379f0:	df001004 	addi	fp,sp,64
811379f4:	e13ff915 	stw	r4,-28(fp)
811379f8:	e17ffa15 	stw	r5,-24(fp)
811379fc:	e1bffb15 	stw	r6,-20(fp)
81137a00:	e1fffc15 	stw	r7,-16(fp)
81137a04:	e1000417 	ldw	r4,16(fp)
81137a08:	e0c00517 	ldw	r3,20(fp)
81137a0c:	e0800617 	ldw	r2,24(fp)
81137a10:	e13ffd0d 	sth	r4,-12(fp)
81137a14:	e0fffe05 	stb	r3,-8(fp)
81137a18:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81137a1c:	e0bffd0b 	ldhu	r2,-12(fp)
81137a20:	e0fffe03 	ldbu	r3,-8(fp)
81137a24:	e13fff0b 	ldhu	r4,-4(fp)
81137a28:	d8000815 	stw	zero,32(sp)
81137a2c:	d9000715 	stw	r4,28(sp)
81137a30:	d8000615 	stw	zero,24(sp)
81137a34:	d8c00515 	stw	r3,20(sp)
81137a38:	d8800415 	stw	r2,16(sp)
81137a3c:	e0800317 	ldw	r2,12(fp)
81137a40:	d8800315 	stw	r2,12(sp)
81137a44:	e0800217 	ldw	r2,8(fp)
81137a48:	d8800215 	stw	r2,8(sp)
81137a4c:	d8000115 	stw	zero,4(sp)
81137a50:	d8000015 	stw	zero,0(sp)
81137a54:	e1fffc17 	ldw	r7,-16(fp)
81137a58:	e1bffb17 	ldw	r6,-20(fp)
81137a5c:	e17ffa17 	ldw	r5,-24(fp)
81137a60:	e13ff917 	ldw	r4,-28(fp)
81137a64:	11376780 	call	81137678 <alt_msgdma_construct_prefetcher_extended_descriptor>
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
81137a68:	e037883a 	mov	sp,fp
81137a6c:	dfc00117 	ldw	ra,4(sp)
81137a70:	df000017 	ldw	fp,0(sp)
81137a74:	dec00204 	addi	sp,sp,8
81137a78:	f800283a 	ret

81137a7c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
81137a7c:	deffec04 	addi	sp,sp,-80
81137a80:	de00012e 	bgeu	sp,et,81137a88 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xc>
81137a84:	003b68fa 	trap	3
81137a88:	dfc01315 	stw	ra,76(sp)
81137a8c:	df001215 	stw	fp,72(sp)
81137a90:	df001204 	addi	fp,sp,72
81137a94:	e13ff715 	stw	r4,-36(fp)
81137a98:	e17ff815 	stw	r5,-32(fp)
81137a9c:	e1bff915 	stw	r6,-28(fp)
81137aa0:	e1fffa15 	stw	r7,-24(fp)
81137aa4:	e1800617 	ldw	r6,24(fp)
81137aa8:	e1400717 	ldw	r5,28(fp)
81137aac:	e1000817 	ldw	r4,32(fp)
81137ab0:	e0c00917 	ldw	r3,36(fp)
81137ab4:	e0800a17 	ldw	r2,40(fp)
81137ab8:	e1bffb0d 	sth	r6,-20(fp)
81137abc:	e17ffc05 	stb	r5,-16(fp)
81137ac0:	e13ffd05 	stb	r4,-12(fp)
81137ac4:	e0fffe0d 	sth	r3,-8(fp)
81137ac8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
81137acc:	e0bffb0b 	ldhu	r2,-20(fp)
81137ad0:	e0fffc03 	ldbu	r3,-16(fp)
81137ad4:	e13ffd03 	ldbu	r4,-12(fp)
81137ad8:	e17ffe0b 	ldhu	r5,-8(fp)
81137adc:	e1bfff0b 	ldhu	r6,-4(fp)
81137ae0:	d9800815 	stw	r6,32(sp)
81137ae4:	d9400715 	stw	r5,28(sp)
81137ae8:	d9000615 	stw	r4,24(sp)
81137aec:	d8c00515 	stw	r3,20(sp)
81137af0:	d8800415 	stw	r2,16(sp)
81137af4:	e0800517 	ldw	r2,20(fp)
81137af8:	d8800315 	stw	r2,12(sp)
81137afc:	e0800417 	ldw	r2,16(fp)
81137b00:	d8800215 	stw	r2,8(sp)
81137b04:	e0800317 	ldw	r2,12(fp)
81137b08:	d8800115 	stw	r2,4(sp)
81137b0c:	e0800217 	ldw	r2,8(fp)
81137b10:	d8800015 	stw	r2,0(sp)
81137b14:	e1fffa17 	ldw	r7,-24(fp)
81137b18:	e1bff917 	ldw	r6,-28(fp)
81137b1c:	e17ff817 	ldw	r5,-32(fp)
81137b20:	e13ff717 	ldw	r4,-36(fp)
81137b24:	11376780 	call	81137678 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
81137b28:	e037883a 	mov	sp,fp
81137b2c:	dfc00117 	ldw	ra,4(sp)
81137b30:	df000017 	ldw	fp,0(sp)
81137b34:	dec00204 	addi	sp,sp,8
81137b38:	f800283a 	ret

81137b3c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
81137b3c:	defffc04 	addi	sp,sp,-16
81137b40:	de00012e 	bgeu	sp,et,81137b48 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xc>
81137b44:	003b68fa 	trap	3
81137b48:	df000315 	stw	fp,12(sp)
81137b4c:	df000304 	addi	fp,sp,12
81137b50:	e13ffe15 	stw	r4,-8(fp)
81137b54:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
81137b58:	e0bfff17 	ldw	r2,-4(fp)
81137b5c:	1000021e 	bne	r2,zero,81137b68 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81137b60:	00bffa84 	movi	r2,-22
81137b64:	00002f06 	br	81137c24 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
81137b68:	e0bfff17 	ldw	r2,-4(fp)
81137b6c:	10c00317 	ldw	r3,12(r2)
81137b70:	e0bfff17 	ldw	r2,-4(fp)
81137b74:	18800226 	beq	r3,r2,81137b80 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x44>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81137b78:	00bffa84 	movi	r2,-22
81137b7c:	00002906 	br	81137c24 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == NULL)
81137b80:	e0bffe17 	ldw	r2,-8(fp)
81137b84:	10800017 	ldw	r2,0(r2)
81137b88:	1000051e 	bne	r2,zero,81137ba0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x64>
	{
		*list = descriptor;  /* make this root-node if list is empty */
81137b8c:	e0bffe17 	ldw	r2,-8(fp)
81137b90:	e0ffff17 	ldw	r3,-4(fp)
81137b94:	10c00015 	stw	r3,0(r2)
		return 0;  /* successfully added */
81137b98:	0005883a 	mov	r2,zero
81137b9c:	00002106 	br	81137c24 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	if (*list == descriptor)
81137ba0:	e0bffe17 	ldw	r2,-8(fp)
81137ba4:	10c00017 	ldw	r3,0(r2)
81137ba8:	e0bfff17 	ldw	r2,-4(fp)
81137bac:	1880021e 	bne	r3,r2,81137bb8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x7c>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81137bb0:	00bffa84 	movi	r2,-22
81137bb4:	00001b06 	br	81137c24 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81137bb8:	e0bffe17 	ldw	r2,-8(fp)
81137bbc:	10800017 	ldw	r2,0(r2)
81137bc0:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81137bc4:	00000906 	br	81137bec <alt_msgdma_prefetcher_add_standard_desc_to_list+0xb0>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
81137bc8:	e0bffd17 	ldw	r2,-12(fp)
81137bcc:	10c00317 	ldw	r3,12(r2)
81137bd0:	e0bfff17 	ldw	r2,-4(fp)
81137bd4:	1880021e 	bne	r3,r2,81137be0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa4>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81137bd8:	00bffa84 	movi	r2,-22
81137bdc:	00001106 	br	81137c24 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81137be0:	e0bffd17 	ldw	r2,-12(fp)
81137be4:	10800317 	ldw	r2,12(r2)
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
81137be8:	e0bffd15 	stw	r2,-12(fp)
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
81137bec:	e0bffd17 	ldw	r2,-12(fp)
81137bf0:	10800317 	ldw	r2,12(r2)
81137bf4:	e0fffe17 	ldw	r3,-8(fp)
81137bf8:	18c00017 	ldw	r3,0(r3)
81137bfc:	10fff21e 	bne	r2,r3,81137bc8 <__reset+0xfb117bc8>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
81137c00:	e0ffff17 	ldw	r3,-4(fp)
81137c04:	e0bffd17 	ldw	r2,-12(fp)
81137c08:	10c00315 	stw	r3,12(r2)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
81137c0c:	e0bffe17 	ldw	r2,-8(fp)
81137c10:	10800017 	ldw	r2,0(r2)
81137c14:	1007883a 	mov	r3,r2
81137c18:	e0bfff17 	ldw	r2,-4(fp)
81137c1c:	10c00315 	stw	r3,12(r2)
	return 0; /* successfully added */
81137c20:	0005883a 	mov	r2,zero
}
81137c24:	e037883a 	mov	sp,fp
81137c28:	df000017 	ldw	fp,0(sp)
81137c2c:	dec00104 	addi	sp,sp,4
81137c30:	f800283a 	ret

81137c34 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
	alt_msgdma_prefetcher_extended_descriptor** list,
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
81137c34:	defff804 	addi	sp,sp,-32
81137c38:	de00012e 	bgeu	sp,et,81137c40 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xc>
81137c3c:	003b68fa 	trap	3
81137c40:	df000715 	stw	fp,28(sp)
81137c44:	df000704 	addi	fp,sp,28
81137c48:	e13ffe15 	stw	r4,-8(fp)
81137c4c:	e17fff15 	stw	r5,-4(fp)
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
81137c50:	e13fff17 	ldw	r4,-4(fp)
81137c54:	2000021e 	bne	r4,zero,81137c60 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x2c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
81137c58:	00bffa84 	movi	r2,-22
81137c5c:	00005906 	br	81137dc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
81137c60:	e13fff17 	ldw	r4,-4(fp)
81137c64:	2015883a 	mov	r10,r4
81137c68:	0017883a 	mov	r11,zero
81137c6c:	e2bffc15 	stw	r10,-16(fp)
81137c70:	e2fffd15 	stw	r11,-12(fp)
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81137c74:	e13fff17 	ldw	r4,-4(fp)
81137c78:	21400317 	ldw	r5,12(r4)
81137c7c:	e13ffc17 	ldw	r4,-16(fp)
81137c80:	29000626 	beq	r5,r4,81137c9c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
81137c84:	e13fff17 	ldw	r4,-4(fp)
81137c88:	21400b17 	ldw	r5,44(r4)
81137c8c:	e13ffd17 	ldw	r4,-12(fp)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
81137c90:	29000226 	beq	r5,r4,81137c9c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x68>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
81137c94:	00bffa84 	movi	r2,-22
81137c98:	00004a06 	br	81137dc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	if (*list == NULL)
81137c9c:	e13ffe17 	ldw	r4,-8(fp)
81137ca0:	21000017 	ldw	r4,0(r4)
81137ca4:	2000051e 	bne	r4,zero,81137cbc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x88>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
81137ca8:	e0bffe17 	ldw	r2,-8(fp)
81137cac:	e0ffff17 	ldw	r3,-4(fp)
81137cb0:	10c00015 	stw	r3,0(r2)
		return 0;
81137cb4:	0005883a 	mov	r2,zero
81137cb8:	00004206 	br	81137dc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	if (*list == descriptor)
81137cbc:	e13ffe17 	ldw	r4,-8(fp)
81137cc0:	21400017 	ldw	r5,0(r4)
81137cc4:	e13fff17 	ldw	r4,-4(fp)
81137cc8:	2900021e 	bne	r5,r4,81137cd4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xa0>
	{
		return -EINVAL;  /* this descriptor cannot already be root-node */
81137ccc:	00bffa84 	movi	r2,-22
81137cd0:	00003c06 	br	81137dc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
81137cd4:	e13ffe17 	ldw	r4,-8(fp)
81137cd8:	21000017 	ldw	r4,0(r4)
81137cdc:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
81137ce0:	e13ffe17 	ldw	r4,-8(fp)
81137ce4:	21000017 	ldw	r4,0(r4)
81137ce8:	2011883a 	mov	r8,r4
81137cec:	0013883a 	mov	r9,zero
81137cf0:	e23ffa15 	stw	r8,-24(fp)
81137cf4:	e27ffb15 	stw	r9,-20(fp)
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81137cf8:	00001806 	br	81137d5c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x128>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
81137cfc:	e13fff17 	ldw	r4,-4(fp)
81137d00:	200d883a 	mov	r6,r4
81137d04:	000f883a 	mov	r7,zero
81137d08:	e1bffc15 	stw	r6,-16(fp)
81137d0c:	e1fffd15 	stw	r7,-12(fp)
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
81137d10:	e13ff917 	ldw	r4,-28(fp)
81137d14:	21400317 	ldw	r5,12(r4)
81137d18:	e13ffc17 	ldw	r4,-16(fp)
81137d1c:	2900061e 	bne	r5,r4,81137d38 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
81137d20:	e13ff917 	ldw	r4,-28(fp)
81137d24:	21400b17 	ldw	r5,44(r4)
81137d28:	e13ffd17 	ldw	r4,-12(fp)
81137d2c:	2900021e 	bne	r5,r4,81137d38 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x104>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
81137d30:	00bffa84 	movi	r2,-22
81137d34:	00002306 	br	81137dc4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x190>
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81137d38:	e13ff917 	ldw	r4,-28(fp)
81137d3c:	21000317 	ldw	r4,12(r4)
81137d40:	e13ffc15 	stw	r4,-16(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81137d44:	e13ff917 	ldw	r4,-28(fp)
81137d48:	21000b17 	ldw	r4,44(r4)
81137d4c:	e13ffd15 	stw	r4,-12(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81137d50:	e13ffc17 	ldw	r4,-16(fp)
81137d54:	e17ffd17 	ldw	r5,-12(fp)
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81137d58:	e13ff915 	stw	r4,-28(fp)
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81137d5c:	e13ff917 	ldw	r4,-28(fp)
81137d60:	21400317 	ldw	r5,12(r4)
81137d64:	e13ffa17 	ldw	r4,-24(fp)
81137d68:	29000426 	beq	r5,r4,81137d7c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x148>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81137d6c:	e13ff917 	ldw	r4,-28(fp)
81137d70:	21400b17 	ldw	r5,44(r4)
81137d74:	e13ffb17 	ldw	r4,-20(fp)
81137d78:	293fe01e 	bne	r5,r4,81137cfc <__reset+0xfb117cfc>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
81137d7c:	e13fff17 	ldw	r4,-4(fp)
81137d80:	2005883a 	mov	r2,r4
81137d84:	0007883a 	mov	r3,zero
81137d88:	e0bffc15 	stw	r2,-16(fp)
81137d8c:	e0fffd15 	stw	r3,-12(fp)
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
81137d90:	e0fffc17 	ldw	r3,-16(fp)
81137d94:	e0bff917 	ldw	r2,-28(fp)
81137d98:	10c00315 	stw	r3,12(r2)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
81137d9c:	e0fffd17 	ldw	r3,-12(fp)
81137da0:	e0bff917 	ldw	r2,-28(fp)
81137da4:	10c00b15 	stw	r3,44(r2)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
81137da8:	e0fffa17 	ldw	r3,-24(fp)
81137dac:	e0bfff17 	ldw	r2,-4(fp)
81137db0:	10c00315 	stw	r3,12(r2)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
81137db4:	e0fffb17 	ldw	r3,-20(fp)
81137db8:	e0bfff17 	ldw	r2,-4(fp)
81137dbc:	10c00b15 	stw	r3,44(r2)
	return 0;
81137dc0:	0005883a 	mov	r2,zero
}
81137dc4:	e037883a 	mov	sp,fp
81137dc8:	df000017 	ldw	fp,0(sp)
81137dcc:	dec00104 	addi	sp,sp,4
81137dd0:	f800283a 	ret

81137dd4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
81137dd4:	defffc04 	addi	sp,sp,-16
81137dd8:	de00012e 	bgeu	sp,et,81137de0 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xc>
81137ddc:	003b68fa 	trap	3
81137de0:	df000315 	stw	fp,12(sp)
81137de4:	df000304 	addi	fp,sp,12
81137de8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81137dec:	e03ffe15 	stw	zero,-8(fp)
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
81137df0:	e0bfff17 	ldw	r2,-4(fp)
81137df4:	1000021e 	bne	r2,zero,81137e00 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
81137df8:	00bffa84 	movi	r2,-22
81137dfc:	00001906 	br	81137e64 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x90>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81137e00:	e0bfff17 	ldw	r2,-4(fp)
81137e04:	e0bffd15 	stw	r2,-12(fp)
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81137e08:	00000a06 	br	81137e34 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x60>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
81137e0c:	e0bffd17 	ldw	r2,-12(fp)
81137e10:	10800717 	ldw	r2,28(r2)
81137e14:	e0bffe15 	stw	r2,-8(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81137e18:	e0bffe17 	ldw	r2,-8(fp)
81137e1c:	10d00034 	orhi	r3,r2,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81137e20:	e0bffd17 	ldw	r2,-12(fp)
81137e24:	10c00715 	stw	r3,28(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
81137e28:	e0bffd17 	ldw	r2,-12(fp)
81137e2c:	10800317 	ldw	r2,12(r2)
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
81137e30:	e0bffd15 	stw	r2,-12(fp)
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
81137e34:	e0bffd17 	ldw	r2,-12(fp)
81137e38:	10c00317 	ldw	r3,12(r2)
81137e3c:	e0bfff17 	ldw	r2,-4(fp)
81137e40:	18bff21e 	bne	r3,r2,81137e0c <__reset+0xfb117e0c>
		/* go to next node in list */
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
81137e44:	e0bffd17 	ldw	r2,-12(fp)
81137e48:	10800717 	ldw	r2,28(r2)
81137e4c:	e0bffe15 	stw	r2,-8(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81137e50:	e0bffe17 	ldw	r2,-8(fp)
81137e54:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81137e58:	e0bffd17 	ldw	r2,-12(fp)
81137e5c:	10c00715 	stw	r3,28(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
81137e60:	0005883a 	mov	r2,zero
}
81137e64:	e037883a 	mov	sp,fp
81137e68:	df000017 	ldw	fp,0(sp)
81137e6c:	dec00104 	addi	sp,sp,4
81137e70:	f800283a 	ret

81137e74 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 * prefetcher since if used the create descriptor APIs the set_by_hw bits are
 * still set to SW owned. 
 */
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
	alt_msgdma_prefetcher_extended_descriptor *list)
{
81137e74:	defff804 	addi	sp,sp,-32
81137e78:	de00012e 	bgeu	sp,et,81137e80 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xc>
81137e7c:	003b68fa 	trap	3
81137e80:	df000715 	stw	fp,28(sp)
81137e84:	df000704 	addi	fp,sp,28
81137e88:	e13fff15 	stw	r4,-4(fp)
	alt_u32 descriptor_control_field = 0;
81137e8c:	e03ffa15 	stw	zero,-24(fp)
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
81137e90:	e13fff17 	ldw	r4,-4(fp)
81137e94:	2000021e 	bne	r4,zero,81137ea0 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x2c>
	{
		return -EINVAL;  /* this list cannot be empty */
81137e98:	00bffa84 	movi	r2,-22
81137e9c:	00002806 	br	81137f40 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xcc>
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
81137ea0:	e13fff17 	ldw	r4,-4(fp)
81137ea4:	e13ff915 	stw	r4,-28(fp)
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
81137ea8:	e13fff17 	ldw	r4,-4(fp)
81137eac:	2005883a 	mov	r2,r4
81137eb0:	0007883a 	mov	r3,zero
81137eb4:	e0bffb15 	stw	r2,-20(fp)
81137eb8:	e0fffc15 	stw	r3,-16(fp)

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81137ebc:	00001006 	br	81137f00 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x8c>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
81137ec0:	e0bff917 	ldw	r2,-28(fp)
81137ec4:	10800f17 	ldw	r2,60(r2)
81137ec8:	e0bffa15 	stw	r2,-24(fp)
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81137ecc:	e0bffa17 	ldw	r2,-24(fp)
81137ed0:	10d00034 	orhi	r3,r2,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
81137ed4:	e0bff917 	ldw	r2,-28(fp)
81137ed8:	10c00f15 	stw	r3,60(r2)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
81137edc:	e0bff917 	ldw	r2,-28(fp)
81137ee0:	10800317 	ldw	r2,12(r2)
81137ee4:	e0bffd15 	stw	r2,-12(fp)
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
81137ee8:	e0bff917 	ldw	r2,-28(fp)
81137eec:	10800b17 	ldw	r2,44(r2)
81137ef0:	e0bffe15 	stw	r2,-8(fp)
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
81137ef4:	e0bffd17 	ldw	r2,-12(fp)
81137ef8:	e0fffe17 	ldw	r3,-8(fp)
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
81137efc:	e0bff915 	stw	r2,-28(fp)
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
81137f00:	e0bff917 	ldw	r2,-28(fp)
81137f04:	10c00317 	ldw	r3,12(r2)
81137f08:	e0bffb17 	ldw	r2,-20(fp)
81137f0c:	18800426 	beq	r3,r2,81137f20 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xac>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
81137f10:	e0bff917 	ldw	r2,-28(fp)
81137f14:	10c00b17 	ldw	r3,44(r2)
81137f18:	e0bffc17 	ldw	r2,-16(fp)
81137f1c:	18bfe81e 	bne	r3,r2,81137ec0 <__reset+0xfb117ec0>
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
81137f20:	e0bff917 	ldw	r2,-28(fp)
81137f24:	10800f17 	ldw	r2,60(r2)
81137f28:	e0bffa15 	stw	r2,-24(fp)
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
81137f2c:	e0bffa17 	ldw	r2,-24(fp)
81137f30:	10d00034 	orhi	r3,r2,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
81137f34:	e0bff917 	ldw	r2,-28(fp)
81137f38:	10c00f15 	stw	r3,60(r2)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
81137f3c:	0005883a 	mov	r2,zero
}
81137f40:	e037883a 	mov	sp,fp
81137f44:	df000017 	ldw	fp,0(sp)
81137f48:	dec00104 	addi	sp,sp,4
81137f4c:	f800283a 	ret

81137f50 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
81137f50:	deffeb04 	addi	sp,sp,-84
81137f54:	de00012e 	bgeu	sp,et,81137f5c <alt_msgdma_start_prefetcher_with_list_addr+0xc>
81137f58:	003b68fa 	trap	3
81137f5c:	dfc01415 	stw	ra,80(sp)
81137f60:	df001315 	stw	fp,76(sp)
81137f64:	df001304 	addi	fp,sp,76
81137f68:	e13ffb15 	stw	r4,-20(fp)
81137f6c:	e17ffc15 	stw	r5,-16(fp)
81137f70:	e1bffd15 	stw	r6,-12(fp)
81137f74:	3807883a 	mov	r3,r7
81137f78:	e0800217 	ldw	r2,8(fp)
81137f7c:	e0fffe05 	stb	r3,-8(fp)
81137f80:	e0bfff05 	stb	r2,-4(fp)
	alt_u32 prefetcher_ctl = 0;
81137f84:	e03fed15 	stw	zero,-76(fp)
	alt_u32 dispatcher_ctl = 0;
81137f88:	e03fee15 	stw	zero,-72(fp)
	alt_irq_context context = 0;
81137f8c:	e03fef15 	stw	zero,-68(fp)
	
	/* use helper struct to get easy access to hi/low address */
	msgdma_addr64 root_node_addr;
	root_node_addr.u64 = list_addr;  
81137f90:	e0bffc17 	ldw	r2,-16(fp)
81137f94:	e0bff815 	stw	r2,-32(fp)
81137f98:	e0bffd17 	ldw	r2,-12(fp)
81137f9c:	e0bff915 	stw	r2,-28(fp)
	
	/*
	 * When running in a multi threaded environment, obtain the "regs_lock"
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
81137fa0:	e0bffb17 	ldw	r2,-20(fp)
81137fa4:	10801817 	ldw	r2,96(r2)
81137fa8:	e0bff615 	stw	r2,-40(fp)
81137fac:	e03ff70d 	sth	zero,-36(fp)
81137fb0:	e0bff70b 	ldhu	r2,-36(fp)
81137fb4:	e0fffa04 	addi	r3,fp,-24
81137fb8:	180d883a 	mov	r6,r3
81137fbc:	100b883a 	mov	r5,r2
81137fc0:	e13ff617 	ldw	r4,-40(fp)
81137fc4:	112d1900 	call	8112d190 <OSSemPend>
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
81137fc8:	e0bffb17 	ldw	r2,-20(fp)
81137fcc:	10800617 	ldw	r2,24(r2)
81137fd0:	10800037 	ldwio	r2,0(r2)
81137fd4:	e0bfed15 	stw	r2,-76(fp)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
81137fd8:	e0bfed17 	ldw	r2,-76(fp)
81137fdc:	1080004c 	andi	r2,r2,1
81137fe0:	10000626 	beq	r2,zero,81137ffc <alt_msgdma_start_prefetcher_with_list_addr+0xac>
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
81137fe4:	e0bffb17 	ldw	r2,-20(fp)
81137fe8:	10801817 	ldw	r2,96(r2)
81137fec:	1009883a 	mov	r4,r2
81137ff0:	112d5180 	call	8112d518 <OSSemPost>
		return -EBUSY;
81137ff4:	00bffc04 	movi	r2,-16
81137ff8:	00009606 	br	81138254 <alt_msgdma_start_prefetcher_with_list_addr+0x304>
	}
		
	/* Stop the msgdma dispatcher from issuing more descriptors to the
	   read or write masters  */
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
81137ffc:	00800804 	movi	r2,32
81138000:	e0bfee15 	stw	r2,-72(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138004:	0005303a 	rdctl	r2,status
81138008:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
8113800c:	e0fff217 	ldw	r3,-56(fp)
81138010:	00bfff84 	movi	r2,-2
81138014:	1884703a 	and	r2,r3,r2
81138018:	1001703a 	wrctl	status,r2
  
  return context;
8113801c:	e0bff217 	ldw	r2,-56(fp)
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
81138020:	e0bfef15 	stw	r2,-68(fp)
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81138024:	e0bffb17 	ldw	r2,-20(fp)
81138028:	10800317 	ldw	r2,12(r2)
8113802c:	10800104 	addi	r2,r2,4
81138030:	e0ffee17 	ldw	r3,-72(fp)
81138034:	10c00035 	stwio	r3,0(r2)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
81138038:	e0bffb17 	ldw	r2,-20(fp)
8113803c:	10800317 	ldw	r2,12(r2)
81138040:	e0fffb17 	ldw	r3,-20(fp)
81138044:	18c00317 	ldw	r3,12(r3)
81138048:	18c00037 	ldwio	r3,0(r3)
8113804c:	10c00035 	stwio	r3,0(r2)
81138050:	e0bfef17 	ldw	r2,-68(fp)
81138054:	e0bff015 	stw	r2,-64(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138058:	e0bff017 	ldw	r2,-64(fp)
8113805c:	1001703a 	wrctl	status,r2
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
81138060:	e0bffb17 	ldw	r2,-20(fp)
81138064:	10800b17 	ldw	r2,44(r2)
81138068:	10002326 	beq	r2,zero,811380f8 <alt_msgdma_start_prefetcher_with_list_addr+0x1a8>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
8113806c:	e0bffb17 	ldw	r2,-20(fp)
81138070:	10c00d17 	ldw	r3,52(r2)
81138074:	e0bfee17 	ldw	r2,-72(fp)
81138078:	1884b03a 	or	r2,r3,r2
8113807c:	10800514 	ori	r2,r2,20
81138080:	e0bfee15 	stw	r2,-72(fp)
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
81138084:	e0ffee17 	ldw	r3,-72(fp)
81138088:	00bff7c4 	movi	r2,-33
8113808c:	1884703a 	and	r2,r3,r2
81138090:	e0bfee15 	stw	r2,-72(fp)
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
81138094:	e0bfed17 	ldw	r2,-76(fp)
81138098:	10800214 	ori	r2,r2,8
8113809c:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
811380a0:	0005303a 	rdctl	r2,status
811380a4:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
811380a8:	e0fff417 	ldw	r3,-48(fp)
811380ac:	00bfff84 	movi	r2,-2
811380b0:	1884703a 	and	r2,r3,r2
811380b4:	1001703a 	wrctl	status,r2
  
  return context;
811380b8:	e0bff417 	ldw	r2,-48(fp)
	    /* making sure the read-modify-write below can't be pre-empted */
	    context = alt_irq_disable_all(); 
811380bc:	e0bfef15 	stw	r2,-68(fp)
	    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
811380c0:	e0bffb17 	ldw	r2,-20(fp)
811380c4:	10800317 	ldw	r2,12(r2)
811380c8:	10800104 	addi	r2,r2,4
811380cc:	e0ffee17 	ldw	r3,-72(fp)
811380d0:	10c00035 	stwio	r3,0(r2)
		IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
811380d4:	e0bffb17 	ldw	r2,-20(fp)
811380d8:	10800617 	ldw	r2,24(r2)
811380dc:	e0ffed17 	ldw	r3,-76(fp)
811380e0:	10c00035 	stwio	r3,0(r2)
811380e4:	e0bfef17 	ldw	r2,-68(fp)
811380e8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
811380ec:	e0bff117 	ldw	r2,-60(fp)
811380f0:	1001703a 	wrctl	status,r2
811380f4:	00002306 	br	81138184 <alt_msgdma_start_prefetcher_with_list_addr+0x234>
	  *   - Stop on an error with any particular descriptor
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
811380f8:	e0bffb17 	ldw	r2,-20(fp)
811380fc:	10c00d17 	ldw	r3,52(r2)
81138100:	e0bfee17 	ldw	r2,-72(fp)
81138104:	1884b03a 	or	r2,r3,r2
81138108:	10800114 	ori	r2,r2,4
8113810c:	e0bfee15 	stw	r2,-72(fp)
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
81138110:	e0ffee17 	ldw	r3,-72(fp)
81138114:	00bff3c4 	movi	r2,-49
81138118:	1884703a 	and	r2,r3,r2
8113811c:	e0bfee15 	stw	r2,-72(fp)
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
81138120:	e0ffed17 	ldw	r3,-76(fp)
81138124:	00bffdc4 	movi	r2,-9
81138128:	1884703a 	and	r2,r3,r2
8113812c:	e0bfed15 	stw	r2,-76(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138130:	0005303a 	rdctl	r2,status
81138134:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138138:	e0fff517 	ldw	r3,-44(fp)
8113813c:	00bfff84 	movi	r2,-2
81138140:	1884703a 	and	r2,r3,r2
81138144:	1001703a 	wrctl	status,r2
  
  return context;
81138148:	e0bff517 	ldw	r2,-44(fp)
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
8113814c:	e0bfef15 	stw	r2,-68(fp)
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
81138150:	e0bffb17 	ldw	r2,-20(fp)
81138154:	10800317 	ldw	r2,12(r2)
81138158:	10800104 	addi	r2,r2,4
8113815c:	e0ffee17 	ldw	r3,-72(fp)
81138160:	10c00035 	stwio	r3,0(r2)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81138164:	e0bffb17 	ldw	r2,-20(fp)
81138168:	10800617 	ldw	r2,24(r2)
8113816c:	e0ffed17 	ldw	r3,-76(fp)
81138170:	10c00035 	stwio	r3,0(r2)
81138174:	e0bfef17 	ldw	r2,-68(fp)
81138178:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
8113817c:	e0bff317 	ldw	r2,-52(fp)
81138180:	1001703a 	wrctl	status,r2
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
81138184:	e0bffb17 	ldw	r2,-20(fp)
81138188:	10800617 	ldw	r2,24(r2)
8113818c:	10800104 	addi	r2,r2,4
81138190:	e0fff817 	ldw	r3,-32(fp)
81138194:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
81138198:	e0bffb17 	ldw	r2,-20(fp)
8113819c:	10800617 	ldw	r2,24(r2)
811381a0:	10800204 	addi	r2,r2,8
811381a4:	e0fff917 	ldw	r3,-28(fp)
811381a8:	10c00035 	stwio	r3,0(r2)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
811381ac:	e0bffe03 	ldbu	r2,-8(fp)
811381b0:	10000426 	beq	r2,zero,811381c4 <alt_msgdma_start_prefetcher_with_list_addr+0x274>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
811381b4:	e0bfed17 	ldw	r2,-76(fp)
811381b8:	10800414 	ori	r2,r2,16
811381bc:	e0bfed15 	stw	r2,-76(fp)
811381c0:	00000406 	br	811381d4 <alt_msgdma_start_prefetcher_with_list_addr+0x284>
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
811381c4:	e0ffed17 	ldw	r3,-76(fp)
811381c8:	00bffbc4 	movi	r2,-17
811381cc:	1884703a 	and	r2,r3,r2
811381d0:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set poll-en */
	 if (poll_en){
811381d4:	e0bfff03 	ldbu	r2,-4(fp)
811381d8:	10000e26 	beq	r2,zero,81138214 <alt_msgdma_start_prefetcher_with_list_addr+0x2c4>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
811381dc:	e0bfed17 	ldw	r2,-76(fp)
811381e0:	10800094 	ori	r2,r2,2
811381e4:	e0bfed15 	stw	r2,-76(fp)
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811381e8:	e0bffb17 	ldw	r2,-20(fp)
811381ec:	10800617 	ldw	r2,24(r2)
811381f0:	10800304 	addi	r2,r2,12
811381f4:	10800037 	ldwio	r2,0(r2)
811381f8:	10000a1e 	bne	r2,zero,81138224 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
811381fc:	e0bffb17 	ldw	r2,-20(fp)
81138200:	10800617 	ldw	r2,24(r2)
81138204:	10800304 	addi	r2,r2,12
81138208:	00c03fc4 	movi	r3,255
8113820c:	10c00035 	stwio	r3,0(r2)
81138210:	00000406 	br	81138224 <alt_msgdma_start_prefetcher_with_list_addr+0x2d4>
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
81138214:	e0ffed17 	ldw	r3,-76(fp)
81138218:	00bfff44 	movi	r2,-3
8113821c:	1884703a 	and	r2,r3,r2
81138220:	e0bfed15 	stw	r2,-76(fp)
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
81138224:	e0bfed17 	ldw	r2,-76(fp)
81138228:	10800054 	ori	r2,r2,1
8113822c:	e0bfed15 	stw	r2,-76(fp)
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
81138230:	e0bffb17 	ldw	r2,-20(fp)
81138234:	10800617 	ldw	r2,24(r2)
81138238:	e0ffed17 	ldw	r3,-76(fp)
8113823c:	10c00035 	stwio	r3,0(r2)
	 
	 /*
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
81138240:	e0bffb17 	ldw	r2,-20(fp)
81138244:	10801817 	ldw	r2,96(r2)
81138248:	1009883a 	mov	r4,r2
8113824c:	112d5180 	call	8112d518 <OSSemPost>
	 
	 return 0;
81138250:	0005883a 	mov	r2,zero
}
81138254:	e037883a 	mov	sp,fp
81138258:	dfc00117 	ldw	ra,4(sp)
8113825c:	df000017 	ldw	fp,0(sp)
81138260:	dec00204 	addi	sp,sp,8
81138264:	f800283a 	ret

81138268 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_start_prefetcher_with_std_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
81138268:	defff704 	addi	sp,sp,-36
8113826c:	de00012e 	bgeu	sp,et,81138274 <alt_msgdma_start_prefetcher_with_std_desc_list+0xc>
81138270:	003b68fa 	trap	3
81138274:	dfc00815 	stw	ra,32(sp)
81138278:	df000715 	stw	fp,28(sp)
8113827c:	dc400615 	stw	r17,24(sp)
81138280:	dc000515 	stw	r16,20(sp)
81138284:	df000704 	addi	fp,sp,28
81138288:	e13ffa15 	stw	r4,-24(fp)
8113828c:	e17ffb15 	stw	r5,-20(fp)
81138290:	3007883a 	mov	r3,r6
81138294:	3805883a 	mov	r2,r7
81138298:	e0fffc05 	stb	r3,-16(fp)
8113829c:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
811382a0:	e13ffb17 	ldw	r4,-20(fp)
811382a4:	1137dd40 	call	81137dd4 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
811382a8:	10000226 	beq	r2,zero,811382b4 <alt_msgdma_start_prefetcher_with_std_desc_list+0x4c>
		return -EINVAL;
811382ac:	00bffa84 	movi	r2,-22
811382b0:	00000b06 	br	811382e0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x78>
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
811382b4:	e0bffb17 	ldw	r2,-20(fp)
811382b8:	1021883a 	mov	r16,r2
811382bc:	0023883a 	mov	r17,zero
811382c0:	e0fffc03 	ldbu	r3,-16(fp)
811382c4:	e0bffd03 	ldbu	r2,-12(fp)
811382c8:	d8800015 	stw	r2,0(sp)
811382cc:	180f883a 	mov	r7,r3
811382d0:	800b883a 	mov	r5,r16
811382d4:	880d883a 	mov	r6,r17
811382d8:	e13ffa17 	ldw	r4,-24(fp)
811382dc:	1137f500 	call	81137f50 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
811382e0:	e6fffe04 	addi	sp,fp,-8
811382e4:	dfc00317 	ldw	ra,12(sp)
811382e8:	df000217 	ldw	fp,8(sp)
811382ec:	dc400117 	ldw	r17,4(sp)
811382f0:	dc000017 	ldw	r16,0(sp)
811382f4:	dec00404 	addi	sp,sp,16
811382f8:	f800283a 	ret

811382fc <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
811382fc:	defff704 	addi	sp,sp,-36
81138300:	de00012e 	bgeu	sp,et,81138308 <alt_msgdma_start_prefetcher_with_extd_desc_list+0xc>
81138304:	003b68fa 	trap	3
81138308:	dfc00815 	stw	ra,32(sp)
8113830c:	df000715 	stw	fp,28(sp)
81138310:	dc400615 	stw	r17,24(sp)
81138314:	dc000515 	stw	r16,20(sp)
81138318:	df000704 	addi	fp,sp,28
8113831c:	e13ffa15 	stw	r4,-24(fp)
81138320:	e17ffb15 	stw	r5,-20(fp)
81138324:	3007883a 	mov	r3,r6
81138328:	3805883a 	mov	r2,r7
8113832c:	e0fffc05 	stb	r3,-16(fp)
81138330:	e0bffd05 	stb	r2,-12(fp)
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
81138334:	e13ffb17 	ldw	r4,-20(fp)
81138338:	1137e740 	call	81137e74 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
8113833c:	10000226 	beq	r2,zero,81138348 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x4c>
		return -EINVAL;
81138340:	00bffa84 	movi	r2,-22
81138344:	00000b06 	br	81138374 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x78>
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
81138348:	e0bffb17 	ldw	r2,-20(fp)
8113834c:	1021883a 	mov	r16,r2
81138350:	0023883a 	mov	r17,zero
81138354:	e0fffc03 	ldbu	r3,-16(fp)
81138358:	e0bffd03 	ldbu	r2,-12(fp)
8113835c:	d8800015 	stw	r2,0(sp)
81138360:	180f883a 	mov	r7,r3
81138364:	800b883a 	mov	r5,r16
81138368:	880d883a 	mov	r6,r17
8113836c:	e13ffa17 	ldw	r4,-24(fp)
81138370:	1137f500 	call	81137f50 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
81138374:	e6fffe04 	addi	sp,fp,-8
81138378:	dfc00317 	ldw	ra,12(sp)
8113837c:	df000217 	ldw	fp,8(sp)
81138380:	dc400117 	ldw	r17,4(sp)
81138384:	dc000017 	ldw	r16,0(sp)
81138388:	dec00404 	addi	sp,sp,16
8113838c:	f800283a 	ret

81138390 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
81138390:	defffc04 	addi	sp,sp,-16
81138394:	de00012e 	bgeu	sp,et,8113839c <alt_msgdma_open+0xc>
81138398:	003b68fa 	trap	3
8113839c:	dfc00315 	stw	ra,12(sp)
811383a0:	df000215 	stw	fp,8(sp)
811383a4:	df000204 	addi	fp,sp,8
811383a8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
811383ac:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
811383b0:	d1603404 	addi	r5,gp,-32560
811383b4:	e13fff17 	ldw	r4,-4(fp)
811383b8:	1138a040 	call	81138a04 <alt_find_dev>
811383bc:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
811383c0:	e0bffe17 	ldw	r2,-8(fp)
811383c4:	1000041e 	bne	r2,zero,811383d8 <alt_msgdma_open+0x48>
    {
        ALT_ERRNO = ENODEV;
811383c8:	11365f40 	call	811365f4 <alt_get_errno>
811383cc:	1007883a 	mov	r3,r2
811383d0:	008004c4 	movi	r2,19
811383d4:	18800015 	stw	r2,0(r3)
    }

    return dev;
811383d8:	e0bffe17 	ldw	r2,-8(fp)
}
811383dc:	e037883a 	mov	sp,fp
811383e0:	dfc00117 	ldw	ra,4(sp)
811383e4:	df000017 	ldw	fp,0(sp)
811383e8:	dec00204 	addi	sp,sp,8
811383ec:	f800283a 	ret

811383f0 <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
811383f0:	defff604 	addi	sp,sp,-40
811383f4:	de00012e 	bgeu	sp,et,811383fc <alt_msgdma_init+0xc>
811383f8:	003b68fa 	trap	3
811383fc:	dfc00915 	stw	ra,36(sp)
81138400:	df000815 	stw	fp,32(sp)
81138404:	df000804 	addi	fp,sp,32
81138408:	e13ffd15 	stw	r4,-12(fp)
8113840c:	e17ffe15 	stw	r5,-8(fp)
81138410:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
81138414:	e0bffd17 	ldw	r2,-12(fp)
81138418:	10801783 	ldbu	r2,94(r2)
8113841c:	10803fcc 	andi	r2,r2,255
81138420:	10000b26 	beq	r2,zero,81138450 <alt_msgdma_init+0x60>
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
81138424:	e0bffd17 	ldw	r2,-12(fp)
81138428:	10800617 	ldw	r2,24(r2)
8113842c:	00c00104 	movi	r3,4
81138430:	10c00035 	stwio	r3,0(r2)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
81138434:	0001883a 	nop
81138438:	e0bffd17 	ldw	r2,-12(fp)
8113843c:	10800617 	ldw	r2,24(r2)
81138440:	10800037 	ldwio	r2,0(r2)
81138444:	1080010c 	andi	r2,r2,4
81138448:	1005d0ba 	srai	r2,r2,2
8113844c:	103ffa1e 	bne	r2,zero,81138438 <__reset+0xfb118438>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
81138450:	e0bffd17 	ldw	r2,-12(fp)
81138454:	10800317 	ldw	r2,12(r2)
81138458:	10800104 	addi	r2,r2,4
8113845c:	00c00084 	movi	r3,2
81138460:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81138464:	0001883a 	nop
81138468:	e0bffd17 	ldw	r2,-12(fp)
8113846c:	10800317 	ldw	r2,12(r2)
81138470:	10800037 	ldwio	r2,0(r2)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
81138474:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
81138478:	103ffb1e 	bne	r2,zero,81138468 <__reset+0xfb118468>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
8113847c:	e0bffd17 	ldw	r2,-12(fp)
81138480:	10800317 	ldw	r2,12(r2)
81138484:	10800104 	addi	r2,r2,4
81138488:	10800037 	ldwio	r2,0(r2)
8113848c:	1007883a 	mov	r3,r2
81138490:	00bffbc4 	movi	r2,-17
81138494:	1884703a 	and	r2,r3,r2
81138498:	e0bff915 	stw	r2,-28(fp)
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
8113849c:	e0bff917 	ldw	r2,-28(fp)
811384a0:	10800814 	ori	r2,r2,32
811384a4:	e0bff915 	stw	r2,-28(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
811384a8:	e0bffd17 	ldw	r2,-12(fp)
811384ac:	10800317 	ldw	r2,12(r2)
811384b0:	10800104 	addi	r2,r2,4
811384b4:	e0fff917 	ldw	r3,-28(fp)
811384b8:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
811384bc:	e0bffd17 	ldw	r2,-12(fp)
811384c0:	10800317 	ldw	r2,12(r2)
811384c4:	e0fffd17 	ldw	r3,-12(fp)
811384c8:	18c00317 	ldw	r3,12(r3)
811384cc:	18c00037 	ldwio	r3,0(r3)
811384d0:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
811384d4:	e0bffd17 	ldw	r2,-12(fp)
811384d8:	10801783 	ldbu	r2,94(r2)
811384dc:	10803fcc 	andi	r2,r2,255
811384e0:	10000826 	beq	r2,zero,81138504 <alt_msgdma_init+0x114>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
811384e4:	e0bffd17 	ldw	r2,-12(fp)
811384e8:	10800617 	ldw	r2,24(r2)
811384ec:	10800404 	addi	r2,r2,16
811384f0:	e0fffd17 	ldw	r3,-12(fp)
811384f4:	18c00617 	ldw	r3,24(r3)
811384f8:	18c00404 	addi	r3,r3,16
811384fc:	18c00037 	ldwio	r3,0(r3)
81138500:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
81138504:	d1603404 	addi	r5,gp,-32560
81138508:	e13ffd17 	ldw	r4,-12(fp)
8113850c:	11388880 	call	81138888 <alt_dev_llist_insert>

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
81138510:	e0bffd17 	ldw	r2,-12(fp)
81138514:	10801804 	addi	r2,r2,96
81138518:	e0bffb15 	stw	r2,-20(fp)
8113851c:	00800044 	movi	r2,1
81138520:	e0bffc0d 	sth	r2,-16(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
81138524:	e0bffc0b 	ldhu	r2,-16(fp)
81138528:	1009883a 	mov	r4,r2
8113852c:	112ce680 	call	8112ce68 <OSSemCreate>
81138530:	1007883a 	mov	r3,r2
81138534:	e0bffb17 	ldw	r2,-20(fp)
81138538:	10c00015 	stw	r3,0(r2)
  return *sem ? 0 : -1;
8113853c:	e0bffb17 	ldw	r2,-20(fp)
81138540:	10800017 	ldw	r2,0(r2)
81138544:	10000226 	beq	r2,zero,81138550 <alt_msgdma_init+0x160>
81138548:	0005883a 	mov	r2,zero
8113854c:	00000106 	br	81138554 <alt_msgdma_init+0x164>
81138550:	00bfffc4 	movi	r2,-1
81138554:	e0bffa15 	stw	r2,-24(fp)
            
    if (!error)
81138558:	e0bffa17 	ldw	r2,-24(fp)
8113855c:	1000081e 	bne	r2,zero,81138580 <alt_msgdma_init+0x190>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
81138560:	d8000015 	stw	zero,0(sp)
81138564:	e1fffd17 	ldw	r7,-12(fp)
81138568:	01a044f4 	movhi	r6,33043
8113856c:	319a0204 	addi	r6,r6,26632
81138570:	e17fff17 	ldw	r5,-4(fp)
81138574:	e13ffe17 	ldw	r4,-8(fp)
81138578:	1138c900 	call	81138c90 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
8113857c:	00000406 	br	81138590 <alt_msgdma_init+0x1a0>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
81138580:	01204534 	movhi	r4,33044
81138584:	2132d904 	addi	r4,r4,-13468
81138588:	11390a80 	call	811390a8 <alt_printf>
    }
    
    return;
8113858c:	0001883a 	nop

}
81138590:	e037883a 	mov	sp,fp
81138594:	dfc00117 	ldw	ra,4(sp)
81138598:	df000017 	ldw	fp,0(sp)
8113859c:	dec00204 	addi	sp,sp,8
811385a0:	f800283a 	ret

811385a4 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
811385a4:	defffb04 	addi	sp,sp,-20
811385a8:	de00012e 	bgeu	sp,et,811385b0 <alt_msgdma_register_callback+0xc>
811385ac:	003b68fa 	trap	3
811385b0:	df000415 	stw	fp,16(sp)
811385b4:	df000404 	addi	fp,sp,16
811385b8:	e13ffc15 	stw	r4,-16(fp)
811385bc:	e17ffd15 	stw	r5,-12(fp)
811385c0:	e1bffe15 	stw	r6,-8(fp)
811385c4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
811385c8:	e0bffc17 	ldw	r2,-16(fp)
811385cc:	e0fffd17 	ldw	r3,-12(fp)
811385d0:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
811385d4:	e0bffc17 	ldw	r2,-16(fp)
811385d8:	e0ffff17 	ldw	r3,-4(fp)
811385dc:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
811385e0:	e0bffc17 	ldw	r2,-16(fp)
811385e4:	e0fffe17 	ldw	r3,-8(fp)
811385e8:	10c00d15 	stw	r3,52(r2)

    return ;
811385ec:	0001883a 	nop
}
811385f0:	e037883a 	mov	sp,fp
811385f4:	df000017 	ldw	fp,0(sp)
811385f8:	dec00104 	addi	sp,sp,4
811385fc:	f800283a 	ret

81138600 <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81138600:	defffc04 	addi	sp,sp,-16
81138604:	de00012e 	bgeu	sp,et,8113860c <alt_msgdma_standard_descriptor_async_transfer+0xc>
81138608:	003b68fa 	trap	3
8113860c:	dfc00315 	stw	ra,12(sp)
81138610:	df000215 	stw	fp,8(sp)
81138614:	df000204 	addi	fp,sp,8
81138618:	e13ffe15 	stw	r4,-8(fp)
8113861c:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
81138620:	000d883a 	mov	r6,zero
81138624:	e17fff17 	ldw	r5,-4(fp)
81138628:	e13ffe17 	ldw	r4,-8(fp)
8113862c:	1136b840 	call	81136b84 <alt_msgdma_descriptor_async_transfer>

}
81138630:	e037883a 	mov	sp,fp
81138634:	dfc00117 	ldw	ra,4(sp)
81138638:	df000017 	ldw	fp,0(sp)
8113863c:	dec00204 	addi	sp,sp,8
81138640:	f800283a 	ret

81138644 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
81138644:	defffc04 	addi	sp,sp,-16
81138648:	de00012e 	bgeu	sp,et,81138650 <alt_msgdma_extended_descriptor_async_transfer+0xc>
8113864c:	003b68fa 	trap	3
81138650:	dfc00315 	stw	ra,12(sp)
81138654:	df000215 	stw	fp,8(sp)
81138658:	df000204 	addi	fp,sp,8
8113865c:	e13ffe15 	stw	r4,-8(fp)
81138660:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
81138664:	e1bfff17 	ldw	r6,-4(fp)
81138668:	000b883a 	mov	r5,zero
8113866c:	e13ffe17 	ldw	r4,-8(fp)
81138670:	1136b840 	call	81136b84 <alt_msgdma_descriptor_async_transfer>
}
81138674:	e037883a 	mov	sp,fp
81138678:	dfc00117 	ldw	ra,4(sp)
8113867c:	df000017 	ldw	fp,0(sp)
81138680:	dec00204 	addi	sp,sp,8
81138684:	f800283a 	ret

81138688 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
81138688:	defffc04 	addi	sp,sp,-16
8113868c:	de00012e 	bgeu	sp,et,81138694 <alt_msgdma_standard_descriptor_sync_transfer+0xc>
81138690:	003b68fa 	trap	3
81138694:	dfc00315 	stw	ra,12(sp)
81138698:	df000215 	stw	fp,8(sp)
8113869c:	df000204 	addi	fp,sp,8
811386a0:	e13ffe15 	stw	r4,-8(fp)
811386a4:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
811386a8:	000d883a 	mov	r6,zero
811386ac:	e17fff17 	ldw	r5,-4(fp)
811386b0:	e13ffe17 	ldw	r4,-8(fp)
811386b4:	1136ec40 	call	81136ec4 <alt_msgdma_descriptor_sync_transfer>
}
811386b8:	e037883a 	mov	sp,fp
811386bc:	dfc00117 	ldw	ra,4(sp)
811386c0:	df000017 	ldw	fp,0(sp)
811386c4:	dec00204 	addi	sp,sp,8
811386c8:	f800283a 	ret

811386cc <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
811386cc:	defffc04 	addi	sp,sp,-16
811386d0:	de00012e 	bgeu	sp,et,811386d8 <alt_msgdma_extended_descriptor_sync_transfer+0xc>
811386d4:	003b68fa 	trap	3
811386d8:	dfc00315 	stw	ra,12(sp)
811386dc:	df000215 	stw	fp,8(sp)
811386e0:	df000204 	addi	fp,sp,8
811386e4:	e13ffe15 	stw	r4,-8(fp)
811386e8:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
811386ec:	e1bfff17 	ldw	r6,-4(fp)
811386f0:	000b883a 	mov	r5,zero
811386f4:	e13ffe17 	ldw	r4,-8(fp)
811386f8:	1136ec40 	call	81136ec4 <alt_msgdma_descriptor_sync_transfer>
}
811386fc:	e037883a 	mov	sp,fp
81138700:	dfc00117 	ldw	ra,4(sp)
81138704:	df000017 	ldw	fp,0(sp)
81138708:	dec00204 	addi	sp,sp,8
8113870c:	f800283a 	ret

81138710 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
81138710:	defff504 	addi	sp,sp,-44
81138714:	de00012e 	bgeu	sp,et,8113871c <alt_alarm_start+0xc>
81138718:	003b68fa 	trap	3
8113871c:	df000a15 	stw	fp,40(sp)
81138720:	df000a04 	addi	fp,sp,40
81138724:	e13ffc15 	stw	r4,-16(fp)
81138728:	e17ffd15 	stw	r5,-12(fp)
8113872c:	e1bffe15 	stw	r6,-8(fp)
81138730:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
81138734:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
81138738:	d0a06a17 	ldw	r2,-32344(gp)
  
  if (alt_ticks_per_second ())
8113873c:	10003c26 	beq	r2,zero,81138830 <alt_alarm_start+0x120>
  {
    if (alarm)
81138740:	e0bffc17 	ldw	r2,-16(fp)
81138744:	10003826 	beq	r2,zero,81138828 <alt_alarm_start+0x118>
    {
      alarm->callback = callback;
81138748:	e0bffc17 	ldw	r2,-16(fp)
8113874c:	e0fffe17 	ldw	r3,-8(fp)
81138750:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
81138754:	e0bffc17 	ldw	r2,-16(fp)
81138758:	e0ffff17 	ldw	r3,-4(fp)
8113875c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138760:	0005303a 	rdctl	r2,status
81138764:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138768:	e0fff917 	ldw	r3,-28(fp)
8113876c:	00bfff84 	movi	r2,-2
81138770:	1884703a 	and	r2,r3,r2
81138774:	1001703a 	wrctl	status,r2
  
  return context;
81138778:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
8113877c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
81138780:	d0a06b17 	ldw	r2,-32340(gp)
      
      current_nticks = alt_nticks();
81138784:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
81138788:	e0fffd17 	ldw	r3,-12(fp)
8113878c:	e0bff617 	ldw	r2,-40(fp)
81138790:	1885883a 	add	r2,r3,r2
81138794:	10c00044 	addi	r3,r2,1
81138798:	e0bffc17 	ldw	r2,-16(fp)
8113879c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
811387a0:	e0bffc17 	ldw	r2,-16(fp)
811387a4:	10c00217 	ldw	r3,8(r2)
811387a8:	e0bff617 	ldw	r2,-40(fp)
811387ac:	1880042e 	bgeu	r3,r2,811387c0 <alt_alarm_start+0xb0>
      {
        alarm->rollover = 1;
811387b0:	e0bffc17 	ldw	r2,-16(fp)
811387b4:	00c00044 	movi	r3,1
811387b8:	10c00405 	stb	r3,16(r2)
811387bc:	00000206 	br	811387c8 <alt_alarm_start+0xb8>
      }
      else
      {
        alarm->rollover = 0;
811387c0:	e0bffc17 	ldw	r2,-16(fp)
811387c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
811387c8:	e0bffc17 	ldw	r2,-16(fp)
811387cc:	d0e01304 	addi	r3,gp,-32692
811387d0:	e0fffa15 	stw	r3,-24(fp)
811387d4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811387d8:	e0bffb17 	ldw	r2,-20(fp)
811387dc:	e0fffa17 	ldw	r3,-24(fp)
811387e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
811387e4:	e0bffa17 	ldw	r2,-24(fp)
811387e8:	10c00017 	ldw	r3,0(r2)
811387ec:	e0bffb17 	ldw	r2,-20(fp)
811387f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
811387f4:	e0bffa17 	ldw	r2,-24(fp)
811387f8:	10800017 	ldw	r2,0(r2)
811387fc:	e0fffb17 	ldw	r3,-20(fp)
81138800:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81138804:	e0bffa17 	ldw	r2,-24(fp)
81138808:	e0fffb17 	ldw	r3,-20(fp)
8113880c:	10c00015 	stw	r3,0(r2)
81138810:	e0bff817 	ldw	r2,-32(fp)
81138814:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138818:	e0bff717 	ldw	r2,-36(fp)
8113881c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
81138820:	0005883a 	mov	r2,zero
81138824:	00000306 	br	81138834 <alt_alarm_start+0x124>
    }
    else
    {
      return -EINVAL;
81138828:	00bffa84 	movi	r2,-22
8113882c:	00000106 	br	81138834 <alt_alarm_start+0x124>
    }
  }
  else
  {
    return -ENOTSUP;
81138830:	00bfde84 	movi	r2,-134
  }
}
81138834:	e037883a 	mov	sp,fp
81138838:	df000017 	ldw	fp,0(sp)
8113883c:	dec00104 	addi	sp,sp,4
81138840:	f800283a 	ret

81138844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
81138844:	defffe04 	addi	sp,sp,-8
81138848:	de00012e 	bgeu	sp,et,81138850 <alt_get_errno+0xc>
8113884c:	003b68fa 	trap	3
81138850:	dfc00115 	stw	ra,4(sp)
81138854:	df000015 	stw	fp,0(sp)
81138858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
8113885c:	d0a01017 	ldw	r2,-32704(gp)
81138860:	10000326 	beq	r2,zero,81138870 <alt_get_errno+0x2c>
81138864:	d0a01017 	ldw	r2,-32704(gp)
81138868:	103ee83a 	callr	r2
8113886c:	00000106 	br	81138874 <alt_get_errno+0x30>
81138870:	d0a05e04 	addi	r2,gp,-32392
}
81138874:	e037883a 	mov	sp,fp
81138878:	dfc00117 	ldw	ra,4(sp)
8113887c:	df000017 	ldw	fp,0(sp)
81138880:	dec00204 	addi	sp,sp,8
81138884:	f800283a 	ret

81138888 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
81138888:	defffa04 	addi	sp,sp,-24
8113888c:	de00012e 	bgeu	sp,et,81138894 <alt_dev_llist_insert+0xc>
81138890:	003b68fa 	trap	3
81138894:	dfc00515 	stw	ra,20(sp)
81138898:	df000415 	stw	fp,16(sp)
8113889c:	df000404 	addi	fp,sp,16
811388a0:	e13ffe15 	stw	r4,-8(fp)
811388a4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
811388a8:	e0bffe17 	ldw	r2,-8(fp)
811388ac:	10000326 	beq	r2,zero,811388bc <alt_dev_llist_insert+0x34>
811388b0:	e0bffe17 	ldw	r2,-8(fp)
811388b4:	10800217 	ldw	r2,8(r2)
811388b8:	1000061e 	bne	r2,zero,811388d4 <alt_dev_llist_insert+0x4c>
  {
    ALT_ERRNO = EINVAL;
811388bc:	11388440 	call	81138844 <alt_get_errno>
811388c0:	1007883a 	mov	r3,r2
811388c4:	00800584 	movi	r2,22
811388c8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
811388cc:	00bffa84 	movi	r2,-22
811388d0:	00001306 	br	81138920 <alt_dev_llist_insert+0x98>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
811388d4:	e0bffe17 	ldw	r2,-8(fp)
811388d8:	e0ffff17 	ldw	r3,-4(fp)
811388dc:	e0fffc15 	stw	r3,-16(fp)
811388e0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
811388e4:	e0bffd17 	ldw	r2,-12(fp)
811388e8:	e0fffc17 	ldw	r3,-16(fp)
811388ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
811388f0:	e0bffc17 	ldw	r2,-16(fp)
811388f4:	10c00017 	ldw	r3,0(r2)
811388f8:	e0bffd17 	ldw	r2,-12(fp)
811388fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
81138900:	e0bffc17 	ldw	r2,-16(fp)
81138904:	10800017 	ldw	r2,0(r2)
81138908:	e0fffd17 	ldw	r3,-12(fp)
8113890c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
81138910:	e0bffc17 	ldw	r2,-16(fp)
81138914:	e0fffd17 	ldw	r3,-12(fp)
81138918:	10c00015 	stw	r3,0(r2)

  return 0;  
8113891c:	0005883a 	mov	r2,zero
}
81138920:	e037883a 	mov	sp,fp
81138924:	dfc00117 	ldw	ra,4(sp)
81138928:	df000017 	ldw	fp,0(sp)
8113892c:	dec00204 	addi	sp,sp,8
81138930:	f800283a 	ret

81138934 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
81138934:	defffd04 	addi	sp,sp,-12
81138938:	de00012e 	bgeu	sp,et,81138940 <_do_ctors+0xc>
8113893c:	003b68fa 	trap	3
81138940:	dfc00215 	stw	ra,8(sp)
81138944:	df000115 	stw	fp,4(sp)
81138948:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
8113894c:	00a04534 	movhi	r2,33044
81138950:	10a74004 	addi	r2,r2,-25344
81138954:	e0bfff15 	stw	r2,-4(fp)
81138958:	00000606 	br	81138974 <_do_ctors+0x40>
        (*ctor) (); 
8113895c:	e0bfff17 	ldw	r2,-4(fp)
81138960:	10800017 	ldw	r2,0(r2)
81138964:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
81138968:	e0bfff17 	ldw	r2,-4(fp)
8113896c:	10bfff04 	addi	r2,r2,-4
81138970:	e0bfff15 	stw	r2,-4(fp)
81138974:	e0ffff17 	ldw	r3,-4(fp)
81138978:	00a04534 	movhi	r2,33044
8113897c:	10a74104 	addi	r2,r2,-25340
81138980:	18bff62e 	bgeu	r3,r2,8113895c <__reset+0xfb11895c>
        (*ctor) (); 
}
81138984:	0001883a 	nop
81138988:	e037883a 	mov	sp,fp
8113898c:	dfc00117 	ldw	ra,4(sp)
81138990:	df000017 	ldw	fp,0(sp)
81138994:	dec00204 	addi	sp,sp,8
81138998:	f800283a 	ret

8113899c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
8113899c:	defffd04 	addi	sp,sp,-12
811389a0:	de00012e 	bgeu	sp,et,811389a8 <_do_dtors+0xc>
811389a4:	003b68fa 	trap	3
811389a8:	dfc00215 	stw	ra,8(sp)
811389ac:	df000115 	stw	fp,4(sp)
811389b0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811389b4:	00a04534 	movhi	r2,33044
811389b8:	10a74004 	addi	r2,r2,-25344
811389bc:	e0bfff15 	stw	r2,-4(fp)
811389c0:	00000606 	br	811389dc <_do_dtors+0x40>
        (*dtor) (); 
811389c4:	e0bfff17 	ldw	r2,-4(fp)
811389c8:	10800017 	ldw	r2,0(r2)
811389cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
811389d0:	e0bfff17 	ldw	r2,-4(fp)
811389d4:	10bfff04 	addi	r2,r2,-4
811389d8:	e0bfff15 	stw	r2,-4(fp)
811389dc:	e0ffff17 	ldw	r3,-4(fp)
811389e0:	00a04534 	movhi	r2,33044
811389e4:	10a74104 	addi	r2,r2,-25340
811389e8:	18bff62e 	bgeu	r3,r2,811389c4 <__reset+0xfb1189c4>
        (*dtor) (); 
}
811389ec:	0001883a 	nop
811389f0:	e037883a 	mov	sp,fp
811389f4:	dfc00117 	ldw	ra,4(sp)
811389f8:	df000017 	ldw	fp,0(sp)
811389fc:	dec00204 	addi	sp,sp,8
81138a00:	f800283a 	ret

81138a04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
81138a04:	defffa04 	addi	sp,sp,-24
81138a08:	de00012e 	bgeu	sp,et,81138a10 <alt_find_dev+0xc>
81138a0c:	003b68fa 	trap	3
81138a10:	dfc00515 	stw	ra,20(sp)
81138a14:	df000415 	stw	fp,16(sp)
81138a18:	df000404 	addi	fp,sp,16
81138a1c:	e13ffe15 	stw	r4,-8(fp)
81138a20:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
81138a24:	e0bfff17 	ldw	r2,-4(fp)
81138a28:	10800017 	ldw	r2,0(r2)
81138a2c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
81138a30:	e13ffe17 	ldw	r4,-8(fp)
81138a34:	11117c80 	call	811117c8 <strlen>
81138a38:	10800044 	addi	r2,r2,1
81138a3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81138a40:	00000d06 	br	81138a78 <alt_find_dev+0x74>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
81138a44:	e0bffc17 	ldw	r2,-16(fp)
81138a48:	10800217 	ldw	r2,8(r2)
81138a4c:	e0fffd17 	ldw	r3,-12(fp)
81138a50:	180d883a 	mov	r6,r3
81138a54:	e17ffe17 	ldw	r5,-8(fp)
81138a58:	1009883a 	mov	r4,r2
81138a5c:	113982c0 	call	8113982c <memcmp>
81138a60:	1000021e 	bne	r2,zero,81138a6c <alt_find_dev+0x68>
    {
      /* match found */

      return next;
81138a64:	e0bffc17 	ldw	r2,-16(fp)
81138a68:	00000706 	br	81138a88 <alt_find_dev+0x84>
    }
    next = (alt_dev*) next->llist.next;
81138a6c:	e0bffc17 	ldw	r2,-16(fp)
81138a70:	10800017 	ldw	r2,0(r2)
81138a74:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
81138a78:	e0fffc17 	ldw	r3,-16(fp)
81138a7c:	e0bfff17 	ldw	r2,-4(fp)
81138a80:	18bff01e 	bne	r3,r2,81138a44 <__reset+0xfb118a44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
81138a84:	0005883a 	mov	r2,zero
}
81138a88:	e037883a 	mov	sp,fp
81138a8c:	dfc00117 	ldw	ra,4(sp)
81138a90:	df000017 	ldw	fp,0(sp)
81138a94:	dec00204 	addi	sp,sp,8
81138a98:	f800283a 	ret

81138a9c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
81138a9c:	defffb04 	addi	sp,sp,-20
81138aa0:	de00012e 	bgeu	sp,et,81138aa8 <alt_find_file+0xc>
81138aa4:	003b68fa 	trap	3
81138aa8:	dfc00415 	stw	ra,16(sp)
81138aac:	df000315 	stw	fp,12(sp)
81138ab0:	df000304 	addi	fp,sp,12
81138ab4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
81138ab8:	d0a00b17 	ldw	r2,-32724(gp)
81138abc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81138ac0:	00003106 	br	81138b88 <alt_find_file+0xec>
  {
    len = strlen(next->name);
81138ac4:	e0bffd17 	ldw	r2,-12(fp)
81138ac8:	10800217 	ldw	r2,8(r2)
81138acc:	1009883a 	mov	r4,r2
81138ad0:	11117c80 	call	811117c8 <strlen>
81138ad4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
81138ad8:	e0bffd17 	ldw	r2,-12(fp)
81138adc:	10c00217 	ldw	r3,8(r2)
81138ae0:	e0bffe17 	ldw	r2,-8(fp)
81138ae4:	10bfffc4 	addi	r2,r2,-1
81138ae8:	1885883a 	add	r2,r3,r2
81138aec:	10800003 	ldbu	r2,0(r2)
81138af0:	10803fcc 	andi	r2,r2,255
81138af4:	1080201c 	xori	r2,r2,128
81138af8:	10bfe004 	addi	r2,r2,-128
81138afc:	10800bd8 	cmpnei	r2,r2,47
81138b00:	1000031e 	bne	r2,zero,81138b10 <alt_find_file+0x74>
    {
      len -= 1;
81138b04:	e0bffe17 	ldw	r2,-8(fp)
81138b08:	10bfffc4 	addi	r2,r2,-1
81138b0c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81138b10:	e0bffe17 	ldw	r2,-8(fp)
81138b14:	e0ffff17 	ldw	r3,-4(fp)
81138b18:	1885883a 	add	r2,r3,r2
81138b1c:	10800003 	ldbu	r2,0(r2)
81138b20:	10803fcc 	andi	r2,r2,255
81138b24:	1080201c 	xori	r2,r2,128
81138b28:	10bfe004 	addi	r2,r2,-128
81138b2c:	10800be0 	cmpeqi	r2,r2,47
81138b30:	1000081e 	bne	r2,zero,81138b54 <alt_find_file+0xb8>
81138b34:	e0bffe17 	ldw	r2,-8(fp)
81138b38:	e0ffff17 	ldw	r3,-4(fp)
81138b3c:	1885883a 	add	r2,r3,r2
81138b40:	10800003 	ldbu	r2,0(r2)
81138b44:	10803fcc 	andi	r2,r2,255
81138b48:	1080201c 	xori	r2,r2,128
81138b4c:	10bfe004 	addi	r2,r2,-128
81138b50:	10000a1e 	bne	r2,zero,81138b7c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
81138b54:	e0bffd17 	ldw	r2,-12(fp)
81138b58:	10800217 	ldw	r2,8(r2)
81138b5c:	e0fffe17 	ldw	r3,-8(fp)
81138b60:	180d883a 	mov	r6,r3
81138b64:	e17fff17 	ldw	r5,-4(fp)
81138b68:	1009883a 	mov	r4,r2
81138b6c:	113982c0 	call	8113982c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
81138b70:	1000021e 	bne	r2,zero,81138b7c <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
81138b74:	e0bffd17 	ldw	r2,-12(fp)
81138b78:	00000706 	br	81138b98 <alt_find_file+0xfc>
    }
    next = (alt_dev*) next->llist.next;
81138b7c:	e0bffd17 	ldw	r2,-12(fp)
81138b80:	10800017 	ldw	r2,0(r2)
81138b84:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
81138b88:	e0fffd17 	ldw	r3,-12(fp)
81138b8c:	d0a00b04 	addi	r2,gp,-32724
81138b90:	18bfcc1e 	bne	r3,r2,81138ac4 <__reset+0xfb118ac4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
81138b94:	0005883a 	mov	r2,zero
}
81138b98:	e037883a 	mov	sp,fp
81138b9c:	dfc00117 	ldw	ra,4(sp)
81138ba0:	df000017 	ldw	fp,0(sp)
81138ba4:	dec00204 	addi	sp,sp,8
81138ba8:	f800283a 	ret

81138bac <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
81138bac:	defff904 	addi	sp,sp,-28
81138bb0:	de00012e 	bgeu	sp,et,81138bb8 <alt_get_fd+0xc>
81138bb4:	003b68fa 	trap	3
81138bb8:	dfc00615 	stw	ra,24(sp)
81138bbc:	df000515 	stw	fp,20(sp)
81138bc0:	df000504 	addi	fp,sp,20
81138bc4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
81138bc8:	00bffa04 	movi	r2,-24
81138bcc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
81138bd0:	d0a06517 	ldw	r2,-32364(gp)
81138bd4:	e0bffd15 	stw	r2,-12(fp)
81138bd8:	e03ffe0d 	sth	zero,-8(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
81138bdc:	e0bffe0b 	ldhu	r2,-8(fp)
81138be0:	e0fffe84 	addi	r3,fp,-6
81138be4:	180d883a 	mov	r6,r3
81138be8:	100b883a 	mov	r5,r2
81138bec:	e13ffd17 	ldw	r4,-12(fp)
81138bf0:	112d1900 	call	8112d190 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81138bf4:	e03ffb15 	stw	zero,-20(fp)
81138bf8:	00001906 	br	81138c60 <alt_get_fd+0xb4>
  {
    if (!alt_fd_list[i].dev)
81138bfc:	00a04534 	movhi	r2,33044
81138c00:	10b51504 	addi	r2,r2,-11180
81138c04:	e0fffb17 	ldw	r3,-20(fp)
81138c08:	18c00324 	muli	r3,r3,12
81138c0c:	10c5883a 	add	r2,r2,r3
81138c10:	10800017 	ldw	r2,0(r2)
81138c14:	10000f1e 	bne	r2,zero,81138c54 <alt_get_fd+0xa8>
    {
      alt_fd_list[i].dev = dev;
81138c18:	00a04534 	movhi	r2,33044
81138c1c:	10b51504 	addi	r2,r2,-11180
81138c20:	e0fffb17 	ldw	r3,-20(fp)
81138c24:	18c00324 	muli	r3,r3,12
81138c28:	10c5883a 	add	r2,r2,r3
81138c2c:	e0ffff17 	ldw	r3,-4(fp)
81138c30:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
81138c34:	d0e00f17 	ldw	r3,-32708(gp)
81138c38:	e0bffb17 	ldw	r2,-20(fp)
81138c3c:	1880020e 	bge	r3,r2,81138c48 <alt_get_fd+0x9c>
      {
        alt_max_fd = i;
81138c40:	e0bffb17 	ldw	r2,-20(fp)
81138c44:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
81138c48:	e0bffb17 	ldw	r2,-20(fp)
81138c4c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
81138c50:	00000606 	br	81138c6c <alt_get_fd+0xc0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
81138c54:	e0bffb17 	ldw	r2,-20(fp)
81138c58:	10800044 	addi	r2,r2,1
81138c5c:	e0bffb15 	stw	r2,-20(fp)
81138c60:	e0bffb17 	ldw	r2,-20(fp)
81138c64:	10800810 	cmplti	r2,r2,32
81138c68:	103fe41e 	bne	r2,zero,81138bfc <__reset+0xfb118bfc>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
81138c6c:	d0a06517 	ldw	r2,-32364(gp)
81138c70:	1009883a 	mov	r4,r2
81138c74:	112d5180 	call	8112d518 <OSSemPost>

  return rc;
81138c78:	e0bffc17 	ldw	r2,-16(fp)
}
81138c7c:	e037883a 	mov	sp,fp
81138c80:	dfc00117 	ldw	ra,4(sp)
81138c84:	df000017 	ldw	fp,0(sp)
81138c88:	dec00204 	addi	sp,sp,8
81138c8c:	f800283a 	ret

81138c90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81138c90:	defff904 	addi	sp,sp,-28
81138c94:	de00012e 	bgeu	sp,et,81138c9c <alt_ic_isr_register+0xc>
81138c98:	003b68fa 	trap	3
81138c9c:	dfc00615 	stw	ra,24(sp)
81138ca0:	df000515 	stw	fp,20(sp)
81138ca4:	df000504 	addi	fp,sp,20
81138ca8:	e13ffc15 	stw	r4,-16(fp)
81138cac:	e17ffd15 	stw	r5,-12(fp)
81138cb0:	e1bffe15 	stw	r6,-8(fp)
81138cb4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
81138cb8:	e0800217 	ldw	r2,8(fp)
81138cbc:	d8800015 	stw	r2,0(sp)
81138cc0:	e1ffff17 	ldw	r7,-4(fp)
81138cc4:	e1bffe17 	ldw	r6,-8(fp)
81138cc8:	e17ffd17 	ldw	r5,-12(fp)
81138ccc:	e13ffc17 	ldw	r4,-16(fp)
81138cd0:	1138e600 	call	81138e60 <alt_iic_isr_register>
}  
81138cd4:	e037883a 	mov	sp,fp
81138cd8:	dfc00117 	ldw	ra,4(sp)
81138cdc:	df000017 	ldw	fp,0(sp)
81138ce0:	dec00204 	addi	sp,sp,8
81138ce4:	f800283a 	ret

81138ce8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
81138ce8:	defff904 	addi	sp,sp,-28
81138cec:	de00012e 	bgeu	sp,et,81138cf4 <alt_ic_irq_enable+0xc>
81138cf0:	003b68fa 	trap	3
81138cf4:	df000615 	stw	fp,24(sp)
81138cf8:	df000604 	addi	fp,sp,24
81138cfc:	e13ffe15 	stw	r4,-8(fp)
81138d00:	e17fff15 	stw	r5,-4(fp)
81138d04:	e0bfff17 	ldw	r2,-4(fp)
81138d08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138d0c:	0005303a 	rdctl	r2,status
81138d10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138d14:	e0fffb17 	ldw	r3,-20(fp)
81138d18:	00bfff84 	movi	r2,-2
81138d1c:	1884703a 	and	r2,r3,r2
81138d20:	1001703a 	wrctl	status,r2
  
  return context;
81138d24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81138d28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
81138d2c:	00c00044 	movi	r3,1
81138d30:	e0bffa17 	ldw	r2,-24(fp)
81138d34:	1884983a 	sll	r2,r3,r2
81138d38:	1007883a 	mov	r3,r2
81138d3c:	d0a06617 	ldw	r2,-32360(gp)
81138d40:	1884b03a 	or	r2,r3,r2
81138d44:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81138d48:	d0a06617 	ldw	r2,-32360(gp)
81138d4c:	100170fa 	wrctl	ienable,r2
81138d50:	e0bffc17 	ldw	r2,-16(fp)
81138d54:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138d58:	e0bffd17 	ldw	r2,-12(fp)
81138d5c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81138d60:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
81138d64:	0001883a 	nop
}
81138d68:	e037883a 	mov	sp,fp
81138d6c:	df000017 	ldw	fp,0(sp)
81138d70:	dec00104 	addi	sp,sp,4
81138d74:	f800283a 	ret

81138d78 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
81138d78:	defff904 	addi	sp,sp,-28
81138d7c:	de00012e 	bgeu	sp,et,81138d84 <alt_ic_irq_disable+0xc>
81138d80:	003b68fa 	trap	3
81138d84:	df000615 	stw	fp,24(sp)
81138d88:	df000604 	addi	fp,sp,24
81138d8c:	e13ffe15 	stw	r4,-8(fp)
81138d90:	e17fff15 	stw	r5,-4(fp)
81138d94:	e0bfff17 	ldw	r2,-4(fp)
81138d98:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138d9c:	0005303a 	rdctl	r2,status
81138da0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138da4:	e0fffb17 	ldw	r3,-20(fp)
81138da8:	00bfff84 	movi	r2,-2
81138dac:	1884703a 	and	r2,r3,r2
81138db0:	1001703a 	wrctl	status,r2
  
  return context;
81138db4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
81138db8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
81138dbc:	00c00044 	movi	r3,1
81138dc0:	e0bffa17 	ldw	r2,-24(fp)
81138dc4:	1884983a 	sll	r2,r3,r2
81138dc8:	0084303a 	nor	r2,zero,r2
81138dcc:	1007883a 	mov	r3,r2
81138dd0:	d0a06617 	ldw	r2,-32360(gp)
81138dd4:	1884703a 	and	r2,r3,r2
81138dd8:	d0a06615 	stw	r2,-32360(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
81138ddc:	d0a06617 	ldw	r2,-32360(gp)
81138de0:	100170fa 	wrctl	ienable,r2
81138de4:	e0bffc17 	ldw	r2,-16(fp)
81138de8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138dec:	e0bffd17 	ldw	r2,-12(fp)
81138df0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
81138df4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
81138df8:	0001883a 	nop
}
81138dfc:	e037883a 	mov	sp,fp
81138e00:	df000017 	ldw	fp,0(sp)
81138e04:	dec00104 	addi	sp,sp,4
81138e08:	f800283a 	ret

81138e0c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
81138e0c:	defffc04 	addi	sp,sp,-16
81138e10:	de00012e 	bgeu	sp,et,81138e18 <alt_ic_irq_enabled+0xc>
81138e14:	003b68fa 	trap	3
81138e18:	df000315 	stw	fp,12(sp)
81138e1c:	df000304 	addi	fp,sp,12
81138e20:	e13ffe15 	stw	r4,-8(fp)
81138e24:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
81138e28:	000530fa 	rdctl	r2,ienable
81138e2c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
81138e30:	00c00044 	movi	r3,1
81138e34:	e0bfff17 	ldw	r2,-4(fp)
81138e38:	1884983a 	sll	r2,r3,r2
81138e3c:	1007883a 	mov	r3,r2
81138e40:	e0bffd17 	ldw	r2,-12(fp)
81138e44:	1884703a 	and	r2,r3,r2
81138e48:	1004c03a 	cmpne	r2,r2,zero
81138e4c:	10803fcc 	andi	r2,r2,255
}
81138e50:	e037883a 	mov	sp,fp
81138e54:	df000017 	ldw	fp,0(sp)
81138e58:	dec00104 	addi	sp,sp,4
81138e5c:	f800283a 	ret

81138e60 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
81138e60:	defff504 	addi	sp,sp,-44
81138e64:	de00012e 	bgeu	sp,et,81138e6c <alt_iic_isr_register+0xc>
81138e68:	003b68fa 	trap	3
81138e6c:	dfc00a15 	stw	ra,40(sp)
81138e70:	df000915 	stw	fp,36(sp)
81138e74:	df000904 	addi	fp,sp,36
81138e78:	e13ffc15 	stw	r4,-16(fp)
81138e7c:	e17ffd15 	stw	r5,-12(fp)
81138e80:	e1bffe15 	stw	r6,-8(fp)
81138e84:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
81138e88:	00bffa84 	movi	r2,-22
81138e8c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
81138e90:	e0bffd17 	ldw	r2,-12(fp)
81138e94:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
81138e98:	e0bff817 	ldw	r2,-32(fp)
81138e9c:	10800808 	cmpgei	r2,r2,32
81138ea0:	1000271e 	bne	r2,zero,81138f40 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
81138ea4:	0005303a 	rdctl	r2,status
81138ea8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
81138eac:	e0fffb17 	ldw	r3,-20(fp)
81138eb0:	00bfff84 	movi	r2,-2
81138eb4:	1884703a 	and	r2,r3,r2
81138eb8:	1001703a 	wrctl	status,r2
  
  return context;
81138ebc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
81138ec0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
81138ec4:	00a04574 	movhi	r2,33045
81138ec8:	10894304 	addi	r2,r2,9484
81138ecc:	e0fff817 	ldw	r3,-32(fp)
81138ed0:	180690fa 	slli	r3,r3,3
81138ed4:	10c5883a 	add	r2,r2,r3
81138ed8:	e0fffe17 	ldw	r3,-8(fp)
81138edc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
81138ee0:	00a04574 	movhi	r2,33045
81138ee4:	10894304 	addi	r2,r2,9484
81138ee8:	e0fff817 	ldw	r3,-32(fp)
81138eec:	180690fa 	slli	r3,r3,3
81138ef0:	10c5883a 	add	r2,r2,r3
81138ef4:	10800104 	addi	r2,r2,4
81138ef8:	e0ffff17 	ldw	r3,-4(fp)
81138efc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
81138f00:	e0bffe17 	ldw	r2,-8(fp)
81138f04:	10000526 	beq	r2,zero,81138f1c <alt_iic_isr_register+0xbc>
81138f08:	e0bff817 	ldw	r2,-32(fp)
81138f0c:	100b883a 	mov	r5,r2
81138f10:	e13ffc17 	ldw	r4,-16(fp)
81138f14:	1138ce80 	call	81138ce8 <alt_ic_irq_enable>
81138f18:	00000406 	br	81138f2c <alt_iic_isr_register+0xcc>
81138f1c:	e0bff817 	ldw	r2,-32(fp)
81138f20:	100b883a 	mov	r5,r2
81138f24:	e13ffc17 	ldw	r4,-16(fp)
81138f28:	1138d780 	call	81138d78 <alt_ic_irq_disable>
81138f2c:	e0bff715 	stw	r2,-36(fp)
81138f30:	e0bffa17 	ldw	r2,-24(fp)
81138f34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
81138f38:	e0bff917 	ldw	r2,-28(fp)
81138f3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
81138f40:	e0bff717 	ldw	r2,-36(fp)
}
81138f44:	e037883a 	mov	sp,fp
81138f48:	dfc00117 	ldw	ra,4(sp)
81138f4c:	df000017 	ldw	fp,0(sp)
81138f50:	dec00204 	addi	sp,sp,8
81138f54:	f800283a 	ret

81138f58 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
81138f58:	defff904 	addi	sp,sp,-28
81138f5c:	de00012e 	bgeu	sp,et,81138f64 <alt_open_fd+0xc>
81138f60:	003b68fa 	trap	3
81138f64:	dfc00615 	stw	ra,24(sp)
81138f68:	df000515 	stw	fp,20(sp)
81138f6c:	df000504 	addi	fp,sp,20
81138f70:	e13ffc15 	stw	r4,-16(fp)
81138f74:	e17ffd15 	stw	r5,-12(fp)
81138f78:	e1bffe15 	stw	r6,-8(fp)
81138f7c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
81138f80:	e1bfff17 	ldw	r6,-4(fp)
81138f84:	e17ffe17 	ldw	r5,-8(fp)
81138f88:	e13ffd17 	ldw	r4,-12(fp)
81138f8c:	1125d540 	call	81125d54 <open>
81138f90:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
81138f94:	e0bffb17 	ldw	r2,-20(fp)
81138f98:	10001c16 	blt	r2,zero,8113900c <alt_open_fd+0xb4>
  {
    fd->dev      = alt_fd_list[old].dev;
81138f9c:	00a04534 	movhi	r2,33044
81138fa0:	10b51504 	addi	r2,r2,-11180
81138fa4:	e0fffb17 	ldw	r3,-20(fp)
81138fa8:	18c00324 	muli	r3,r3,12
81138fac:	10c5883a 	add	r2,r2,r3
81138fb0:	10c00017 	ldw	r3,0(r2)
81138fb4:	e0bffc17 	ldw	r2,-16(fp)
81138fb8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
81138fbc:	00a04534 	movhi	r2,33044
81138fc0:	10b51504 	addi	r2,r2,-11180
81138fc4:	e0fffb17 	ldw	r3,-20(fp)
81138fc8:	18c00324 	muli	r3,r3,12
81138fcc:	10c5883a 	add	r2,r2,r3
81138fd0:	10800104 	addi	r2,r2,4
81138fd4:	10c00017 	ldw	r3,0(r2)
81138fd8:	e0bffc17 	ldw	r2,-16(fp)
81138fdc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
81138fe0:	00a04534 	movhi	r2,33044
81138fe4:	10b51504 	addi	r2,r2,-11180
81138fe8:	e0fffb17 	ldw	r3,-20(fp)
81138fec:	18c00324 	muli	r3,r3,12
81138ff0:	10c5883a 	add	r2,r2,r3
81138ff4:	10800204 	addi	r2,r2,8
81138ff8:	10c00017 	ldw	r3,0(r2)
81138ffc:	e0bffc17 	ldw	r2,-16(fp)
81139000:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
81139004:	e13ffb17 	ldw	r4,-20(fp)
81139008:	1125ff80 	call	81125ff8 <alt_release_fd>
  }
} 
8113900c:	0001883a 	nop
81139010:	e037883a 	mov	sp,fp
81139014:	dfc00117 	ldw	ra,4(sp)
81139018:	df000017 	ldw	fp,0(sp)
8113901c:	dec00204 	addi	sp,sp,8
81139020:	f800283a 	ret

81139024 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
81139024:	defffb04 	addi	sp,sp,-20
81139028:	de00012e 	bgeu	sp,et,81139030 <alt_io_redirect+0xc>
8113902c:	003b68fa 	trap	3
81139030:	dfc00415 	stw	ra,16(sp)
81139034:	df000315 	stw	fp,12(sp)
81139038:	df000304 	addi	fp,sp,12
8113903c:	e13ffd15 	stw	r4,-12(fp)
81139040:	e17ffe15 	stw	r5,-8(fp)
81139044:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
81139048:	01c07fc4 	movi	r7,511
8113904c:	01800044 	movi	r6,1
81139050:	e17ffd17 	ldw	r5,-12(fp)
81139054:	01204534 	movhi	r4,33044
81139058:	21351804 	addi	r4,r4,-11168
8113905c:	1138f580 	call	81138f58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
81139060:	01c07fc4 	movi	r7,511
81139064:	000d883a 	mov	r6,zero
81139068:	e17ffe17 	ldw	r5,-8(fp)
8113906c:	01204534 	movhi	r4,33044
81139070:	21351504 	addi	r4,r4,-11180
81139074:	1138f580 	call	81138f58 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
81139078:	01c07fc4 	movi	r7,511
8113907c:	01800044 	movi	r6,1
81139080:	e17fff17 	ldw	r5,-4(fp)
81139084:	01204534 	movhi	r4,33044
81139088:	21351b04 	addi	r4,r4,-11156
8113908c:	1138f580 	call	81138f58 <alt_open_fd>
}  
81139090:	0001883a 	nop
81139094:	e037883a 	mov	sp,fp
81139098:	dfc00117 	ldw	ra,4(sp)
8113909c:	df000017 	ldw	fp,0(sp)
811390a0:	dec00204 	addi	sp,sp,8
811390a4:	f800283a 	ret

811390a8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
811390a8:	defff204 	addi	sp,sp,-56
811390ac:	de00012e 	bgeu	sp,et,811390b4 <alt_printf+0xc>
811390b0:	003b68fa 	trap	3
811390b4:	dfc00a15 	stw	ra,40(sp)
811390b8:	df000915 	stw	fp,36(sp)
811390bc:	df000904 	addi	fp,sp,36
811390c0:	e13fff15 	stw	r4,-4(fp)
811390c4:	e1400215 	stw	r5,8(fp)
811390c8:	e1800315 	stw	r6,12(fp)
811390cc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
811390d0:	e0800204 	addi	r2,fp,8
811390d4:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
811390d8:	e0bfff17 	ldw	r2,-4(fp)
811390dc:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
811390e0:	00006f06 	br	811392a0 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
811390e4:	e0bff807 	ldb	r2,-32(fp)
811390e8:	10800960 	cmpeqi	r2,r2,37
811390ec:	1000041e 	bne	r2,zero,81139100 <alt_printf+0x58>
        {
            alt_putchar(c);
811390f0:	e0bff807 	ldb	r2,-32(fp)
811390f4:	1009883a 	mov	r4,r2
811390f8:	11392dc0 	call	811392dc <alt_putchar>
811390fc:	00006806 	br	811392a0 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
81139100:	e0bff717 	ldw	r2,-36(fp)
81139104:	10c00044 	addi	r3,r2,1
81139108:	e0fff715 	stw	r3,-36(fp)
8113910c:	10800003 	ldbu	r2,0(r2)
81139110:	e0bff805 	stb	r2,-32(fp)
81139114:	e0bff807 	ldb	r2,-32(fp)
81139118:	10006926 	beq	r2,zero,811392c0 <alt_printf+0x218>
            {
                if (c == '%')
8113911c:	e0bff807 	ldb	r2,-32(fp)
81139120:	10800958 	cmpnei	r2,r2,37
81139124:	1000041e 	bne	r2,zero,81139138 <alt_printf+0x90>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
81139128:	e0bff807 	ldb	r2,-32(fp)
8113912c:	1009883a 	mov	r4,r2
81139130:	11392dc0 	call	811392dc <alt_putchar>
81139134:	00005a06 	br	811392a0 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
81139138:	e0bff807 	ldb	r2,-32(fp)
8113913c:	108018d8 	cmpnei	r2,r2,99
81139140:	1000081e 	bne	r2,zero,81139164 <alt_printf+0xbc>
                {
                    int v = va_arg(args, int);
81139144:	e0bffe17 	ldw	r2,-8(fp)
81139148:	10c00104 	addi	r3,r2,4
8113914c:	e0fffe15 	stw	r3,-8(fp)
81139150:	10800017 	ldw	r2,0(r2)
81139154:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
81139158:	e13ffd17 	ldw	r4,-12(fp)
8113915c:	11392dc0 	call	811392dc <alt_putchar>
81139160:	00004f06 	br	811392a0 <alt_printf+0x1f8>
                }
                else if (c == 'x')
81139164:	e0bff807 	ldb	r2,-32(fp)
81139168:	10801e18 	cmpnei	r2,r2,120
8113916c:	1000341e 	bne	r2,zero,81139240 <alt_printf+0x198>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
81139170:	e0bffe17 	ldw	r2,-8(fp)
81139174:	10c00104 	addi	r3,r2,4
81139178:	e0fffe15 	stw	r3,-8(fp)
8113917c:	10800017 	ldw	r2,0(r2)
81139180:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
81139184:	e0bffb17 	ldw	r2,-20(fp)
81139188:	1000031e 	bne	r2,zero,81139198 <alt_printf+0xf0>
                    {
                        alt_putchar('0');
8113918c:	01000c04 	movi	r4,48
81139190:	11392dc0 	call	811392dc <alt_putchar>
                        continue;
81139194:	00004206 	br	811392a0 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
81139198:	00800704 	movi	r2,28
8113919c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
811391a0:	00000306 	br	811391b0 <alt_printf+0x108>
                        digit_shift -= 4;
811391a4:	e0bff917 	ldw	r2,-28(fp)
811391a8:	10bfff04 	addi	r2,r2,-4
811391ac:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
811391b0:	00c003c4 	movi	r3,15
811391b4:	e0bff917 	ldw	r2,-28(fp)
811391b8:	1884983a 	sll	r2,r3,r2
811391bc:	1007883a 	mov	r3,r2
811391c0:	e0bffb17 	ldw	r2,-20(fp)
811391c4:	1884703a 	and	r2,r3,r2
811391c8:	103ff626 	beq	r2,zero,811391a4 <__reset+0xfb1191a4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
811391cc:	00001906 	br	81139234 <alt_printf+0x18c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
811391d0:	00c003c4 	movi	r3,15
811391d4:	e0bff917 	ldw	r2,-28(fp)
811391d8:	1884983a 	sll	r2,r3,r2
811391dc:	1007883a 	mov	r3,r2
811391e0:	e0bffb17 	ldw	r2,-20(fp)
811391e4:	1886703a 	and	r3,r3,r2
811391e8:	e0bff917 	ldw	r2,-28(fp)
811391ec:	1884d83a 	srl	r2,r3,r2
811391f0:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
811391f4:	e0bffc17 	ldw	r2,-16(fp)
811391f8:	108002a8 	cmpgeui	r2,r2,10
811391fc:	1000041e 	bne	r2,zero,81139210 <alt_printf+0x168>
                            c = '0' + digit;
81139200:	e0bffc17 	ldw	r2,-16(fp)
81139204:	10800c04 	addi	r2,r2,48
81139208:	e0bff805 	stb	r2,-32(fp)
8113920c:	00000306 	br	8113921c <alt_printf+0x174>
                        else
                            c = 'a' + digit - 10;
81139210:	e0bffc17 	ldw	r2,-16(fp)
81139214:	108015c4 	addi	r2,r2,87
81139218:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
8113921c:	e0bff807 	ldb	r2,-32(fp)
81139220:	1009883a 	mov	r4,r2
81139224:	11392dc0 	call	811392dc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
81139228:	e0bff917 	ldw	r2,-28(fp)
8113922c:	10bfff04 	addi	r2,r2,-4
81139230:	e0bff915 	stw	r2,-28(fp)
81139234:	e0bff917 	ldw	r2,-28(fp)
81139238:	103fe50e 	bge	r2,zero,811391d0 <__reset+0xfb1191d0>
8113923c:	00001806 	br	811392a0 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
81139240:	e0bff807 	ldb	r2,-32(fp)
81139244:	10801cd8 	cmpnei	r2,r2,115
81139248:	1000151e 	bne	r2,zero,811392a0 <alt_printf+0x1f8>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
8113924c:	e0bffe17 	ldw	r2,-8(fp)
81139250:	10c00104 	addi	r3,r2,4
81139254:	e0fffe15 	stw	r3,-8(fp)
81139258:	10800017 	ldw	r2,0(r2)
8113925c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
81139260:	00000906 	br	81139288 <alt_printf+0x1e0>
                      alt_putchar(*s++);
81139264:	e0bffa17 	ldw	r2,-24(fp)
81139268:	10c00044 	addi	r3,r2,1
8113926c:	e0fffa15 	stw	r3,-24(fp)
81139270:	10800003 	ldbu	r2,0(r2)
81139274:	10803fcc 	andi	r2,r2,255
81139278:	1080201c 	xori	r2,r2,128
8113927c:	10bfe004 	addi	r2,r2,-128
81139280:	1009883a 	mov	r4,r2
81139284:	11392dc0 	call	811392dc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
81139288:	e0bffa17 	ldw	r2,-24(fp)
8113928c:	10800003 	ldbu	r2,0(r2)
81139290:	10803fcc 	andi	r2,r2,255
81139294:	1080201c 	xori	r2,r2,128
81139298:	10bfe004 	addi	r2,r2,-128
8113929c:	103ff11e 	bne	r2,zero,81139264 <__reset+0xfb119264>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
811392a0:	e0bff717 	ldw	r2,-36(fp)
811392a4:	10c00044 	addi	r3,r2,1
811392a8:	e0fff715 	stw	r3,-36(fp)
811392ac:	10800003 	ldbu	r2,0(r2)
811392b0:	e0bff805 	stb	r2,-32(fp)
811392b4:	e0bff807 	ldb	r2,-32(fp)
811392b8:	103f8a1e 	bne	r2,zero,811390e4 <__reset+0xfb1190e4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
811392bc:	00000106 	br	811392c4 <alt_printf+0x21c>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
811392c0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
811392c4:	0001883a 	nop
811392c8:	e037883a 	mov	sp,fp
811392cc:	dfc00117 	ldw	ra,4(sp)
811392d0:	df000017 	ldw	fp,0(sp)
811392d4:	dec00504 	addi	sp,sp,20
811392d8:	f800283a 	ret

811392dc <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
811392dc:	defffd04 	addi	sp,sp,-12
811392e0:	de00012e 	bgeu	sp,et,811392e8 <alt_putchar+0xc>
811392e4:	003b68fa 	trap	3
811392e8:	dfc00215 	stw	ra,8(sp)
811392ec:	df000115 	stw	fp,4(sp)
811392f0:	df000104 	addi	fp,sp,4
811392f4:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
811392f8:	d0a00517 	ldw	r2,-32748(gp)
811392fc:	10800217 	ldw	r2,8(r2)
81139300:	100b883a 	mov	r5,r2
81139304:	e13fff17 	ldw	r4,-4(fp)
81139308:	11399500 	call	81139950 <putc>
#endif
#endif
}
8113930c:	e037883a 	mov	sp,fp
81139310:	dfc00117 	ldw	ra,4(sp)
81139314:	df000017 	ldw	fp,0(sp)
81139318:	dec00204 	addi	sp,sp,8
8113931c:	f800283a 	ret

81139320 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
81139320:	deffff04 	addi	sp,sp,-4
81139324:	de00012e 	bgeu	sp,et,8113932c <altera_nios2_gen2_irq_init+0xc>
81139328:	003b68fa 	trap	3
8113932c:	df000015 	stw	fp,0(sp)
81139330:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
81139334:	000170fa 	wrctl	ienable,zero
}
81139338:	0001883a 	nop
8113933c:	e037883a 	mov	sp,fp
81139340:	df000017 	ldw	fp,0(sp)
81139344:	dec00104 	addi	sp,sp,4
81139348:	f800283a 	ret

8113934c <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
8113934c:	defff504 	addi	sp,sp,-44

#ifdef ALT_STACK_CHECK

      bltu  sp, et, .Lstack_overflow
81139350:	de002436 	bltu	sp,et,811393e4 <OSCtxSw+0x98>

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
81139354:	d0e00517 	ldw	r3,-32748(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
81139358:	d1208417 	ldw	r4,-32240(gp)

      stw ra,  0(sp)
8113935c:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
81139360:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
81139364:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
81139368:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
8113936c:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
81139370:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
81139374:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
81139378:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
8113937c:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
81139380:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
81139384:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
81139388:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
8113938c:	11395e80 	call	811395e8 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
81139390:	d1207e17 	ldw	r4,-32264(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
81139394:	d1607587 	ldb	r5,-32298(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
81139398:	d1208415 	stw	r4,-32240(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
8113939c:	d16075c5 	stb	r5,-32297(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
811393a0:	26c00017 	ldw	sp,0(r4)
      
#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      ldw et, 8(r4)                  /* load the new stack limit */
811393a4:	26000217 	ldw	et,8(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
811393a8:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
811393ac:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
811393b0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
811393b4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
811393b8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
811393bc:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
811393c0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
811393c4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
811393c8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
811393cc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
811393d0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
811393d4:	d0e00515 	stw	r3,-32748(gp)

#endif /* OS_THREAD_SAFE_NEWLIB */

#if defined(ALT_STACK_CHECK) && (OS_TASK_CREATE_EXT_EN > 0)

      stw et, %gprel(alt_stack_limit_value)(gp)
811393d8:	d6200015 	stw	et,-32768(gp)

#endif

      addi sp, sp, 44
811393dc:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
811393e0:	f800283a 	ret

#ifdef ALT_STACK_CHECK

.Lstack_overflow:
        break 3
811393e4:	003da0fa 	break	3

811393e8 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
811393e8:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
811393ec:	047fff84 	movi	r17,-2
      and   r18, r18, r17
811393f0:	9464703a 	and	r18,r18,r17
      wrctl status, r18
811393f4:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
811393f8:	11395e80 	call	811395e8 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
811393fc:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
81139400:	d4a07305 	stb	r18,-32308(gp)

      /*
       * start execution of the new task.
       */

      br 9b
81139404:	003fe206 	br	81139390 <__reset+0xfb119390>

81139408 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
81139408:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
8113940c:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
81139410:	10800054 	ori	r2,r2,1
      wrctl status, r2
81139414:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
81139418:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
8113941c:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
81139420:	dec00204 	addi	sp,sp,8

      callr r2
81139424:	103ee83a 	callr	r2

      nop
81139428:	0001883a 	nop

8113942c <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
8113942c:	defff704 	addi	sp,sp,-36
81139430:	de00012e 	bgeu	sp,et,81139438 <OSTaskStkInit+0xc>
81139434:	003b68fa 	trap	3
81139438:	dfc00815 	stw	ra,32(sp)
8113943c:	df000715 	stw	fp,28(sp)
81139440:	df000704 	addi	fp,sp,28
81139444:	e13ffc15 	stw	r4,-16(fp)
81139448:	e17ffd15 	stw	r5,-12(fp)
8113944c:	e1bffe15 	stw	r6,-8(fp)
81139450:	3805883a 	mov	r2,r7
81139454:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
81139458:	e0fffe17 	ldw	r3,-8(fp)
8113945c:	00bfff04 	movi	r2,-4
81139460:	1884703a 	and	r2,r3,r2
81139464:	10bef704 	addi	r2,r2,-1060
81139468:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
8113946c:	01810904 	movi	r6,1060
81139470:	000b883a 	mov	r5,zero
81139474:	e13ff917 	ldw	r4,-28(fp)
81139478:	1110f9c0 	call	81110f9c <memset>
8113947c:	e0bff917 	ldw	r2,-28(fp)
81139480:	10c0bb04 	addi	r3,r2,748
81139484:	e0bff917 	ldw	r2,-28(fp)
81139488:	10c00115 	stw	r3,4(r2)
8113948c:	e0bff917 	ldw	r2,-28(fp)
81139490:	10c0d504 	addi	r3,r2,852
81139494:	e0bff917 	ldw	r2,-28(fp)
81139498:	10c00215 	stw	r3,8(r2)
8113949c:	e0bff917 	ldw	r2,-28(fp)
811394a0:	10c0ef04 	addi	r3,r2,956
811394a4:	e0bff917 	ldw	r2,-28(fp)
811394a8:	10c00315 	stw	r3,12(r2)
811394ac:	e0fff917 	ldw	r3,-28(fp)
811394b0:	00a04534 	movhi	r2,33044
811394b4:	10b2e104 	addi	r2,r2,-13436
811394b8:	18800d15 	stw	r2,52(r3)
811394bc:	e0bff917 	ldw	r2,-28(fp)
811394c0:	00c00044 	movi	r3,1
811394c4:	10c02915 	stw	r3,164(r2)
811394c8:	10002a15 	stw	zero,168(r2)
811394cc:	e0bff917 	ldw	r2,-28(fp)
811394d0:	00ccc384 	movi	r3,13070
811394d4:	10c02b0d 	sth	r3,172(r2)
811394d8:	e0bff917 	ldw	r2,-28(fp)
811394dc:	00eaf344 	movi	r3,-21555
811394e0:	10c02b8d 	sth	r3,174(r2)
811394e4:	e0bff917 	ldw	r2,-28(fp)
811394e8:	00c48d04 	movi	r3,4660
811394ec:	10c02c0d 	sth	r3,176(r2)
811394f0:	e0bff917 	ldw	r2,-28(fp)
811394f4:	00f99b44 	movi	r3,-6547
811394f8:	10c02c8d 	sth	r3,178(r2)
811394fc:	e0bff917 	ldw	r2,-28(fp)
81139500:	00f7bb04 	movi	r3,-8468
81139504:	10c02d0d 	sth	r3,180(r2)
81139508:	e0bff917 	ldw	r2,-28(fp)
8113950c:	00c00144 	movi	r3,5
81139510:	10c02d8d 	sth	r3,182(r2)
81139514:	e0bff917 	ldw	r2,-28(fp)
81139518:	00c002c4 	movi	r3,11
8113951c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
81139520:	e0bff917 	ldw	r2,-28(fp)
81139524:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
81139528:	e0bffa17 	ldw	r2,-24(fp)
8113952c:	10bff304 	addi	r2,r2,-52
81139530:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
81139534:	e0bffb17 	ldw	r2,-20(fp)
81139538:	10800c04 	addi	r2,r2,48
8113953c:	e0fffc17 	ldw	r3,-16(fp)
81139540:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
81139544:	e0bffb17 	ldw	r2,-20(fp)
81139548:	10800b04 	addi	r2,r2,44
8113954c:	e0fffd17 	ldw	r3,-12(fp)
81139550:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
81139554:	e0bffb17 	ldw	r2,-20(fp)
81139558:	10800a04 	addi	r2,r2,40
8113955c:	e0fff917 	ldw	r3,-28(fp)
81139560:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
81139564:	00a04534 	movhi	r2,33044
81139568:	10a50204 	addi	r2,r2,-27640
8113956c:	10c00104 	addi	r3,r2,4
81139570:	e0bffb17 	ldw	r2,-20(fp)
81139574:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
81139578:	e0bffb17 	ldw	r2,-20(fp)
}
8113957c:	e037883a 	mov	sp,fp
81139580:	dfc00117 	ldw	ra,4(sp)
81139584:	df000017 	ldw	fp,0(sp)
81139588:	dec00204 	addi	sp,sp,8
8113958c:	f800283a 	ret

81139590 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
81139590:	defffe04 	addi	sp,sp,-8
81139594:	de00012e 	bgeu	sp,et,8113959c <OSTaskCreateHook+0xc>
81139598:	003b68fa 	trap	3
8113959c:	df000115 	stw	fp,4(sp)
811395a0:	df000104 	addi	fp,sp,4
811395a4:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
811395a8:	0001883a 	nop
811395ac:	e037883a 	mov	sp,fp
811395b0:	df000017 	ldw	fp,0(sp)
811395b4:	dec00104 	addi	sp,sp,4
811395b8:	f800283a 	ret

811395bc <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
811395bc:	defffe04 	addi	sp,sp,-8
811395c0:	de00012e 	bgeu	sp,et,811395c8 <OSTaskDelHook+0xc>
811395c4:	003b68fa 	trap	3
811395c8:	df000115 	stw	fp,4(sp)
811395cc:	df000104 	addi	fp,sp,4
811395d0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
811395d4:	0001883a 	nop
811395d8:	e037883a 	mov	sp,fp
811395dc:	df000017 	ldw	fp,0(sp)
811395e0:	dec00104 	addi	sp,sp,4
811395e4:	f800283a 	ret

811395e8 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
811395e8:	deffff04 	addi	sp,sp,-4
811395ec:	de00012e 	bgeu	sp,et,811395f4 <OSTaskSwHook+0xc>
811395f0:	003b68fa 	trap	3
811395f4:	df000015 	stw	fp,0(sp)
811395f8:	d839883a 	mov	fp,sp
}
811395fc:	0001883a 	nop
81139600:	e037883a 	mov	sp,fp
81139604:	df000017 	ldw	fp,0(sp)
81139608:	dec00104 	addi	sp,sp,4
8113960c:	f800283a 	ret

81139610 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
81139610:	deffff04 	addi	sp,sp,-4
81139614:	de00012e 	bgeu	sp,et,8113961c <OSTaskStatHook+0xc>
81139618:	003b68fa 	trap	3
8113961c:	df000015 	stw	fp,0(sp)
81139620:	d839883a 	mov	fp,sp
}
81139624:	0001883a 	nop
81139628:	e037883a 	mov	sp,fp
8113962c:	df000017 	ldw	fp,0(sp)
81139630:	dec00104 	addi	sp,sp,4
81139634:	f800283a 	ret

81139638 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
81139638:	defffe04 	addi	sp,sp,-8
8113963c:	de00012e 	bgeu	sp,et,81139644 <OSTimeTickHook+0xc>
81139640:	003b68fa 	trap	3
81139644:	dfc00115 	stw	ra,4(sp)
81139648:	df000015 	stw	fp,0(sp)
8113964c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr++;
81139650:	d0a0980b 	ldhu	r2,-32160(gp)
81139654:	10800044 	addi	r2,r2,1
81139658:	d0a0980d 	sth	r2,-32160(gp)
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
8113965c:	d0a0980b 	ldhu	r2,-32160(gp)
81139660:	10bfffcc 	andi	r2,r2,65535
81139664:	10803230 	cmpltui	r2,r2,200
81139668:	1000021e 	bne	r2,zero,81139674 <OSTimeTickHook+0x3c>
        OSTmrCtr = 0;
8113966c:	d020980d 	sth	zero,-32160(gp)
        OSTmrSignal();
81139670:	112ff4c0 	call	8112ff4c <OSTmrSignal>
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
81139674:	0001883a 	nop
81139678:	e037883a 	mov	sp,fp
8113967c:	dfc00117 	ldw	ra,4(sp)
81139680:	df000017 	ldw	fp,0(sp)
81139684:	dec00204 	addi	sp,sp,8
81139688:	f800283a 	ret

8113968c <OSInitHookBegin>:

void OSInitHookBegin(void)
{
8113968c:	deffff04 	addi	sp,sp,-4
81139690:	de00012e 	bgeu	sp,et,81139698 <OSInitHookBegin+0xc>
81139694:	003b68fa 	trap	3
81139698:	df000015 	stw	fp,0(sp)
8113969c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
811396a0:	d020980d 	sth	zero,-32160(gp)
#endif
}
811396a4:	0001883a 	nop
811396a8:	e037883a 	mov	sp,fp
811396ac:	df000017 	ldw	fp,0(sp)
811396b0:	dec00104 	addi	sp,sp,4
811396b4:	f800283a 	ret

811396b8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
811396b8:	deffff04 	addi	sp,sp,-4
811396bc:	de00012e 	bgeu	sp,et,811396c4 <OSInitHookEnd+0xc>
811396c0:	003b68fa 	trap	3
811396c4:	df000015 	stw	fp,0(sp)
811396c8:	d839883a 	mov	fp,sp
}
811396cc:	0001883a 	nop
811396d0:	e037883a 	mov	sp,fp
811396d4:	df000017 	ldw	fp,0(sp)
811396d8:	dec00104 	addi	sp,sp,4
811396dc:	f800283a 	ret

811396e0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
811396e0:	deffff04 	addi	sp,sp,-4
811396e4:	de00012e 	bgeu	sp,et,811396ec <OSTaskIdleHook+0xc>
811396e8:	003b68fa 	trap	3
811396ec:	df000015 	stw	fp,0(sp)
811396f0:	d839883a 	mov	fp,sp
}
811396f4:	0001883a 	nop
811396f8:	e037883a 	mov	sp,fp
811396fc:	df000017 	ldw	fp,0(sp)
81139700:	dec00104 	addi	sp,sp,4
81139704:	f800283a 	ret

81139708 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
81139708:	defffe04 	addi	sp,sp,-8
8113970c:	de00012e 	bgeu	sp,et,81139714 <OSTCBInitHook+0xc>
81139710:	003b68fa 	trap	3
81139714:	df000115 	stw	fp,4(sp)
81139718:	df000104 	addi	fp,sp,4
8113971c:	e13fff15 	stw	r4,-4(fp)
}
81139720:	0001883a 	nop
81139724:	e037883a 	mov	sp,fp
81139728:	df000017 	ldw	fp,0(sp)
8113972c:	dec00104 	addi	sp,sp,4
81139730:	f800283a 	ret

81139734 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
81139734:	defffe04 	addi	sp,sp,-8
81139738:	de00012e 	bgeu	sp,et,81139740 <alt_exception_cause_generated_bad_addr+0xc>
8113973c:	003b68fa 	trap	3
81139740:	df000115 	stw	fp,4(sp)
81139744:	df000104 	addi	fp,sp,4
81139748:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
8113974c:	e0bfff17 	ldw	r2,-4(fp)
81139750:	10bffe84 	addi	r2,r2,-6
81139754:	10c00428 	cmpgeui	r3,r2,16
81139758:	18001a1e 	bne	r3,zero,811397c4 <alt_exception_cause_generated_bad_addr+0x90>
8113975c:	100690ba 	slli	r3,r2,2
81139760:	00a04534 	movhi	r2,33044
81139764:	10a5dd04 	addi	r2,r2,-26764
81139768:	1885883a 	add	r2,r3,r2
8113976c:	10800017 	ldw	r2,0(r2)
81139770:	1000683a 	jmp	r2
81139774:	811397b4 	orhi	r4,r16,20062
81139778:	811397b4 	orhi	r4,r16,20062
8113977c:	811397c4 	addi	r4,r16,20063
81139780:	811397c4 	addi	r4,r16,20063
81139784:	811397c4 	addi	r4,r16,20063
81139788:	811397b4 	orhi	r4,r16,20062
8113978c:	811397bc 	xorhi	r4,r16,20062
81139790:	811397c4 	addi	r4,r16,20063
81139794:	811397b4 	orhi	r4,r16,20062
81139798:	811397b4 	orhi	r4,r16,20062
8113979c:	811397c4 	addi	r4,r16,20063
811397a0:	811397b4 	orhi	r4,r16,20062
811397a4:	811397bc 	xorhi	r4,r16,20062
811397a8:	811397c4 	addi	r4,r16,20063
811397ac:	811397c4 	addi	r4,r16,20063
811397b0:	811397b4 	orhi	r4,r16,20062
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
811397b4:	00800044 	movi	r2,1
811397b8:	00000306 	br	811397c8 <alt_exception_cause_generated_bad_addr+0x94>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
811397bc:	0005883a 	mov	r2,zero
811397c0:	00000106 	br	811397c8 <alt_exception_cause_generated_bad_addr+0x94>

  default:
    return 0;
811397c4:	0005883a 	mov	r2,zero
  }
}
811397c8:	e037883a 	mov	sp,fp
811397cc:	df000017 	ldw	fp,0(sp)
811397d0:	dec00104 	addi	sp,sp,4
811397d4:	f800283a 	ret

811397d8 <atexit>:
811397d8:	200b883a 	mov	r5,r4
811397dc:	000f883a 	mov	r7,zero
811397e0:	000d883a 	mov	r6,zero
811397e4:	0009883a 	mov	r4,zero
811397e8:	1139a201 	jmpi	81139a20 <__register_exitproc>

811397ec <exit>:
811397ec:	defffe04 	addi	sp,sp,-8
811397f0:	000b883a 	mov	r5,zero
811397f4:	de00012e 	bgeu	sp,et,811397fc <exit+0x10>
811397f8:	003b68fa 	trap	3
811397fc:	dc000015 	stw	r16,0(sp)
81139800:	dfc00115 	stw	ra,4(sp)
81139804:	2021883a 	mov	r16,r4
81139808:	1139b400 	call	81139b40 <__call_exitprocs>
8113980c:	00a04534 	movhi	r2,33044
81139810:	10ba0504 	addi	r2,r2,-6124
81139814:	11000017 	ldw	r4,0(r2)
81139818:	20800f17 	ldw	r2,60(r4)
8113981c:	10000126 	beq	r2,zero,81139824 <exit+0x38>
81139820:	103ee83a 	callr	r2
81139824:	8009883a 	mov	r4,r16
81139828:	1139cc80 	call	81139cc8 <_exit>

8113982c <memcmp>:
8113982c:	01c000c4 	movi	r7,3
81139830:	3980192e 	bgeu	r7,r6,81139898 <memcmp+0x6c>
81139834:	2144b03a 	or	r2,r4,r5
81139838:	11c4703a 	and	r2,r2,r7
8113983c:	10000f26 	beq	r2,zero,8113987c <memcmp+0x50>
81139840:	20800003 	ldbu	r2,0(r4)
81139844:	28c00003 	ldbu	r3,0(r5)
81139848:	10c0151e 	bne	r2,r3,811398a0 <memcmp+0x74>
8113984c:	31bfff84 	addi	r6,r6,-2
81139850:	01ffffc4 	movi	r7,-1
81139854:	00000406 	br	81139868 <memcmp+0x3c>
81139858:	20800003 	ldbu	r2,0(r4)
8113985c:	28c00003 	ldbu	r3,0(r5)
81139860:	31bfffc4 	addi	r6,r6,-1
81139864:	10c00e1e 	bne	r2,r3,811398a0 <memcmp+0x74>
81139868:	21000044 	addi	r4,r4,1
8113986c:	29400044 	addi	r5,r5,1
81139870:	31fff91e 	bne	r6,r7,81139858 <__reset+0xfb119858>
81139874:	0005883a 	mov	r2,zero
81139878:	f800283a 	ret
8113987c:	20c00017 	ldw	r3,0(r4)
81139880:	28800017 	ldw	r2,0(r5)
81139884:	18bfee1e 	bne	r3,r2,81139840 <__reset+0xfb119840>
81139888:	31bfff04 	addi	r6,r6,-4
8113988c:	21000104 	addi	r4,r4,4
81139890:	29400104 	addi	r5,r5,4
81139894:	39bff936 	bltu	r7,r6,8113987c <__reset+0xfb11987c>
81139898:	303fe91e 	bne	r6,zero,81139840 <__reset+0xfb119840>
8113989c:	003ff506 	br	81139874 <__reset+0xfb119874>
811398a0:	10c5c83a 	sub	r2,r2,r3
811398a4:	f800283a 	ret

811398a8 <_putc_r>:
811398a8:	defffc04 	addi	sp,sp,-16
811398ac:	de00012e 	bgeu	sp,et,811398b4 <_putc_r+0xc>
811398b0:	003b68fa 	trap	3
811398b4:	dc000215 	stw	r16,8(sp)
811398b8:	dfc00315 	stw	ra,12(sp)
811398bc:	2021883a 	mov	r16,r4
811398c0:	20000226 	beq	r4,zero,811398cc <_putc_r+0x24>
811398c4:	20800e17 	ldw	r2,56(r4)
811398c8:	10001b26 	beq	r2,zero,81139938 <_putc_r+0x90>
811398cc:	30800217 	ldw	r2,8(r6)
811398d0:	10bfffc4 	addi	r2,r2,-1
811398d4:	30800215 	stw	r2,8(r6)
811398d8:	10000a16 	blt	r2,zero,81139904 <_putc_r+0x5c>
811398dc:	30800017 	ldw	r2,0(r6)
811398e0:	11400005 	stb	r5,0(r2)
811398e4:	30800017 	ldw	r2,0(r6)
811398e8:	10c00044 	addi	r3,r2,1
811398ec:	30c00015 	stw	r3,0(r6)
811398f0:	10800003 	ldbu	r2,0(r2)
811398f4:	dfc00317 	ldw	ra,12(sp)
811398f8:	dc000217 	ldw	r16,8(sp)
811398fc:	dec00404 	addi	sp,sp,16
81139900:	f800283a 	ret
81139904:	30c00617 	ldw	r3,24(r6)
81139908:	10c00616 	blt	r2,r3,81139924 <_putc_r+0x7c>
8113990c:	30800017 	ldw	r2,0(r6)
81139910:	00c00284 	movi	r3,10
81139914:	11400005 	stb	r5,0(r2)
81139918:	30800017 	ldw	r2,0(r6)
8113991c:	11400003 	ldbu	r5,0(r2)
81139920:	28fff11e 	bne	r5,r3,811398e8 <__reset+0xfb1198e8>
81139924:	8009883a 	mov	r4,r16
81139928:	dfc00317 	ldw	ra,12(sp)
8113992c:	dc000217 	ldw	r16,8(sp)
81139930:	dec00404 	addi	sp,sp,16
81139934:	11222e41 	jmpi	811222e4 <__swbuf_r>
81139938:	d9400015 	stw	r5,0(sp)
8113993c:	d9800115 	stw	r6,4(sp)
81139940:	11198f80 	call	811198f8 <__sinit>
81139944:	d9800117 	ldw	r6,4(sp)
81139948:	d9400017 	ldw	r5,0(sp)
8113994c:	003fdf06 	br	811398cc <__reset+0xfb1198cc>

81139950 <putc>:
81139950:	00a04534 	movhi	r2,33044
81139954:	defffc04 	addi	sp,sp,-16
81139958:	10ba0604 	addi	r2,r2,-6120
8113995c:	de00012e 	bgeu	sp,et,81139964 <putc+0x14>
81139960:	003b68fa 	trap	3
81139964:	dc000115 	stw	r16,4(sp)
81139968:	14000017 	ldw	r16,0(r2)
8113996c:	dc400215 	stw	r17,8(sp)
81139970:	dfc00315 	stw	ra,12(sp)
81139974:	2023883a 	mov	r17,r4
81139978:	80000226 	beq	r16,zero,81139984 <putc+0x34>
8113997c:	80800e17 	ldw	r2,56(r16)
81139980:	10001a26 	beq	r2,zero,811399ec <putc+0x9c>
81139984:	28800217 	ldw	r2,8(r5)
81139988:	10bfffc4 	addi	r2,r2,-1
8113998c:	28800215 	stw	r2,8(r5)
81139990:	10000b16 	blt	r2,zero,811399c0 <putc+0x70>
81139994:	28800017 	ldw	r2,0(r5)
81139998:	14400005 	stb	r17,0(r2)
8113999c:	28800017 	ldw	r2,0(r5)
811399a0:	10c00044 	addi	r3,r2,1
811399a4:	28c00015 	stw	r3,0(r5)
811399a8:	10800003 	ldbu	r2,0(r2)
811399ac:	dfc00317 	ldw	ra,12(sp)
811399b0:	dc400217 	ldw	r17,8(sp)
811399b4:	dc000117 	ldw	r16,4(sp)
811399b8:	dec00404 	addi	sp,sp,16
811399bc:	f800283a 	ret
811399c0:	28c00617 	ldw	r3,24(r5)
811399c4:	10c00e16 	blt	r2,r3,81139a00 <putc+0xb0>
811399c8:	28800017 	ldw	r2,0(r5)
811399cc:	01000284 	movi	r4,10
811399d0:	14400005 	stb	r17,0(r2)
811399d4:	28800017 	ldw	r2,0(r5)
811399d8:	10c00003 	ldbu	r3,0(r2)
811399dc:	193ff01e 	bne	r3,r4,811399a0 <__reset+0xfb1199a0>
811399e0:	280d883a 	mov	r6,r5
811399e4:	180b883a 	mov	r5,r3
811399e8:	00000706 	br	81139a08 <putc+0xb8>
811399ec:	8009883a 	mov	r4,r16
811399f0:	d9400015 	stw	r5,0(sp)
811399f4:	11198f80 	call	811198f8 <__sinit>
811399f8:	d9400017 	ldw	r5,0(sp)
811399fc:	003fe106 	br	81139984 <__reset+0xfb119984>
81139a00:	280d883a 	mov	r6,r5
81139a04:	880b883a 	mov	r5,r17
81139a08:	8009883a 	mov	r4,r16
81139a0c:	dfc00317 	ldw	ra,12(sp)
81139a10:	dc400217 	ldw	r17,8(sp)
81139a14:	dc000117 	ldw	r16,4(sp)
81139a18:	dec00404 	addi	sp,sp,16
81139a1c:	11222e41 	jmpi	811222e4 <__swbuf_r>

81139a20 <__register_exitproc>:
81139a20:	defffa04 	addi	sp,sp,-24
81139a24:	de00012e 	bgeu	sp,et,81139a2c <__register_exitproc+0xc>
81139a28:	003b68fa 	trap	3
81139a2c:	dc000315 	stw	r16,12(sp)
81139a30:	04204534 	movhi	r16,33044
81139a34:	843a0504 	addi	r16,r16,-6124
81139a38:	80c00017 	ldw	r3,0(r16)
81139a3c:	dc400415 	stw	r17,16(sp)
81139a40:	dfc00515 	stw	ra,20(sp)
81139a44:	18805217 	ldw	r2,328(r3)
81139a48:	2023883a 	mov	r17,r4
81139a4c:	10003726 	beq	r2,zero,81139b2c <__register_exitproc+0x10c>
81139a50:	10c00117 	ldw	r3,4(r2)
81139a54:	010007c4 	movi	r4,31
81139a58:	20c00e16 	blt	r4,r3,81139a94 <__register_exitproc+0x74>
81139a5c:	1a000044 	addi	r8,r3,1
81139a60:	8800221e 	bne	r17,zero,81139aec <__register_exitproc+0xcc>
81139a64:	18c00084 	addi	r3,r3,2
81139a68:	18c7883a 	add	r3,r3,r3
81139a6c:	18c7883a 	add	r3,r3,r3
81139a70:	12000115 	stw	r8,4(r2)
81139a74:	10c7883a 	add	r3,r2,r3
81139a78:	19400015 	stw	r5,0(r3)
81139a7c:	0005883a 	mov	r2,zero
81139a80:	dfc00517 	ldw	ra,20(sp)
81139a84:	dc400417 	ldw	r17,16(sp)
81139a88:	dc000317 	ldw	r16,12(sp)
81139a8c:	dec00604 	addi	sp,sp,24
81139a90:	f800283a 	ret
81139a94:	00800034 	movhi	r2,0
81139a98:	10800004 	addi	r2,r2,0
81139a9c:	10002626 	beq	r2,zero,81139b38 <__register_exitproc+0x118>
81139aa0:	01006404 	movi	r4,400
81139aa4:	d9400015 	stw	r5,0(sp)
81139aa8:	d9800115 	stw	r6,4(sp)
81139aac:	d9c00215 	stw	r7,8(sp)
81139ab0:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
81139ab4:	d9400017 	ldw	r5,0(sp)
81139ab8:	d9800117 	ldw	r6,4(sp)
81139abc:	d9c00217 	ldw	r7,8(sp)
81139ac0:	10001d26 	beq	r2,zero,81139b38 <__register_exitproc+0x118>
81139ac4:	81000017 	ldw	r4,0(r16)
81139ac8:	10000115 	stw	zero,4(r2)
81139acc:	02000044 	movi	r8,1
81139ad0:	22405217 	ldw	r9,328(r4)
81139ad4:	0007883a 	mov	r3,zero
81139ad8:	12400015 	stw	r9,0(r2)
81139adc:	20805215 	stw	r2,328(r4)
81139ae0:	10006215 	stw	zero,392(r2)
81139ae4:	10006315 	stw	zero,396(r2)
81139ae8:	883fde26 	beq	r17,zero,81139a64 <__reset+0xfb119a64>
81139aec:	18c9883a 	add	r4,r3,r3
81139af0:	2109883a 	add	r4,r4,r4
81139af4:	1109883a 	add	r4,r2,r4
81139af8:	21802215 	stw	r6,136(r4)
81139afc:	01800044 	movi	r6,1
81139b00:	12406217 	ldw	r9,392(r2)
81139b04:	30cc983a 	sll	r6,r6,r3
81139b08:	4992b03a 	or	r9,r9,r6
81139b0c:	12406215 	stw	r9,392(r2)
81139b10:	21c04215 	stw	r7,264(r4)
81139b14:	01000084 	movi	r4,2
81139b18:	893fd21e 	bne	r17,r4,81139a64 <__reset+0xfb119a64>
81139b1c:	11006317 	ldw	r4,396(r2)
81139b20:	218cb03a 	or	r6,r4,r6
81139b24:	11806315 	stw	r6,396(r2)
81139b28:	003fce06 	br	81139a64 <__reset+0xfb119a64>
81139b2c:	18805304 	addi	r2,r3,332
81139b30:	18805215 	stw	r2,328(r3)
81139b34:	003fc606 	br	81139a50 <__reset+0xfb119a50>
81139b38:	00bfffc4 	movi	r2,-1
81139b3c:	003fd006 	br	81139a80 <__reset+0xfb119a80>

81139b40 <__call_exitprocs>:
81139b40:	defff504 	addi	sp,sp,-44
81139b44:	de00012e 	bgeu	sp,et,81139b4c <__call_exitprocs+0xc>
81139b48:	003b68fa 	trap	3
81139b4c:	df000915 	stw	fp,36(sp)
81139b50:	dd400615 	stw	r21,24(sp)
81139b54:	dc800315 	stw	r18,12(sp)
81139b58:	dfc00a15 	stw	ra,40(sp)
81139b5c:	ddc00815 	stw	r23,32(sp)
81139b60:	dd800715 	stw	r22,28(sp)
81139b64:	dd000515 	stw	r20,20(sp)
81139b68:	dcc00415 	stw	r19,16(sp)
81139b6c:	dc400215 	stw	r17,8(sp)
81139b70:	dc000115 	stw	r16,4(sp)
81139b74:	d9000015 	stw	r4,0(sp)
81139b78:	2839883a 	mov	fp,r5
81139b7c:	04800044 	movi	r18,1
81139b80:	057fffc4 	movi	r21,-1
81139b84:	00a04534 	movhi	r2,33044
81139b88:	10ba0504 	addi	r2,r2,-6124
81139b8c:	12000017 	ldw	r8,0(r2)
81139b90:	45005217 	ldw	r20,328(r8)
81139b94:	44c05204 	addi	r19,r8,328
81139b98:	a0001c26 	beq	r20,zero,81139c0c <__call_exitprocs+0xcc>
81139b9c:	a0800117 	ldw	r2,4(r20)
81139ba0:	15ffffc4 	addi	r23,r2,-1
81139ba4:	b8000d16 	blt	r23,zero,81139bdc <__call_exitprocs+0x9c>
81139ba8:	14000044 	addi	r16,r2,1
81139bac:	8421883a 	add	r16,r16,r16
81139bb0:	8421883a 	add	r16,r16,r16
81139bb4:	84402004 	addi	r17,r16,128
81139bb8:	a463883a 	add	r17,r20,r17
81139bbc:	a421883a 	add	r16,r20,r16
81139bc0:	e0001e26 	beq	fp,zero,81139c3c <__call_exitprocs+0xfc>
81139bc4:	80804017 	ldw	r2,256(r16)
81139bc8:	e0801c26 	beq	fp,r2,81139c3c <__call_exitprocs+0xfc>
81139bcc:	bdffffc4 	addi	r23,r23,-1
81139bd0:	843fff04 	addi	r16,r16,-4
81139bd4:	8c7fff04 	addi	r17,r17,-4
81139bd8:	bd7ff91e 	bne	r23,r21,81139bc0 <__reset+0xfb119bc0>
81139bdc:	00800034 	movhi	r2,0
81139be0:	10800004 	addi	r2,r2,0
81139be4:	10000926 	beq	r2,zero,81139c0c <__call_exitprocs+0xcc>
81139be8:	a0800117 	ldw	r2,4(r20)
81139bec:	1000301e 	bne	r2,zero,81139cb0 <__call_exitprocs+0x170>
81139bf0:	a0800017 	ldw	r2,0(r20)
81139bf4:	10003226 	beq	r2,zero,81139cc0 <__call_exitprocs+0x180>
81139bf8:	a009883a 	mov	r4,r20
81139bfc:	98800015 	stw	r2,0(r19)
81139c00:	00000000 	call	80000000 <OSCtxSw_SWITCH_PC+0x7fffffbc>
81139c04:	9d000017 	ldw	r20,0(r19)
81139c08:	a03fe41e 	bne	r20,zero,81139b9c <__reset+0xfb119b9c>
81139c0c:	dfc00a17 	ldw	ra,40(sp)
81139c10:	df000917 	ldw	fp,36(sp)
81139c14:	ddc00817 	ldw	r23,32(sp)
81139c18:	dd800717 	ldw	r22,28(sp)
81139c1c:	dd400617 	ldw	r21,24(sp)
81139c20:	dd000517 	ldw	r20,20(sp)
81139c24:	dcc00417 	ldw	r19,16(sp)
81139c28:	dc800317 	ldw	r18,12(sp)
81139c2c:	dc400217 	ldw	r17,8(sp)
81139c30:	dc000117 	ldw	r16,4(sp)
81139c34:	dec00b04 	addi	sp,sp,44
81139c38:	f800283a 	ret
81139c3c:	a0800117 	ldw	r2,4(r20)
81139c40:	80c00017 	ldw	r3,0(r16)
81139c44:	10bfffc4 	addi	r2,r2,-1
81139c48:	15c01426 	beq	r2,r23,81139c9c <__call_exitprocs+0x15c>
81139c4c:	80000015 	stw	zero,0(r16)
81139c50:	183fde26 	beq	r3,zero,81139bcc <__reset+0xfb119bcc>
81139c54:	95c8983a 	sll	r4,r18,r23
81139c58:	a0806217 	ldw	r2,392(r20)
81139c5c:	a5800117 	ldw	r22,4(r20)
81139c60:	2084703a 	and	r2,r4,r2
81139c64:	10000b26 	beq	r2,zero,81139c94 <__call_exitprocs+0x154>
81139c68:	a0806317 	ldw	r2,396(r20)
81139c6c:	2088703a 	and	r4,r4,r2
81139c70:	20000c1e 	bne	r4,zero,81139ca4 <__call_exitprocs+0x164>
81139c74:	89400017 	ldw	r5,0(r17)
81139c78:	d9000017 	ldw	r4,0(sp)
81139c7c:	183ee83a 	callr	r3
81139c80:	a0800117 	ldw	r2,4(r20)
81139c84:	15bfbf1e 	bne	r2,r22,81139b84 <__reset+0xfb119b84>
81139c88:	98800017 	ldw	r2,0(r19)
81139c8c:	153fcf26 	beq	r2,r20,81139bcc <__reset+0xfb119bcc>
81139c90:	003fbc06 	br	81139b84 <__reset+0xfb119b84>
81139c94:	183ee83a 	callr	r3
81139c98:	003ff906 	br	81139c80 <__reset+0xfb119c80>
81139c9c:	a5c00115 	stw	r23,4(r20)
81139ca0:	003feb06 	br	81139c50 <__reset+0xfb119c50>
81139ca4:	89000017 	ldw	r4,0(r17)
81139ca8:	183ee83a 	callr	r3
81139cac:	003ff406 	br	81139c80 <__reset+0xfb119c80>
81139cb0:	a0800017 	ldw	r2,0(r20)
81139cb4:	a027883a 	mov	r19,r20
81139cb8:	1029883a 	mov	r20,r2
81139cbc:	003fb606 	br	81139b98 <__reset+0xfb119b98>
81139cc0:	0005883a 	mov	r2,zero
81139cc4:	003ffb06 	br	81139cb4 <__reset+0xfb119cb4>

81139cc8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
81139cc8:	defffd04 	addi	sp,sp,-12
81139ccc:	de00012e 	bgeu	sp,et,81139cd4 <_exit+0xc>
81139cd0:	003b68fa 	trap	3
81139cd4:	df000215 	stw	fp,8(sp)
81139cd8:	df000204 	addi	fp,sp,8
81139cdc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
81139ce0:	d0207305 	stb	zero,-32308(gp)
81139ce4:	e0bfff17 	ldw	r2,-4(fp)
81139ce8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
81139cec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
81139cf0:	10000226 	beq	r2,zero,81139cfc <_exit+0x34>
    ALT_SIM_FAIL();
81139cf4:	002af070 	cmpltui	zero,zero,43969
81139cf8:	00000106 	br	81139d00 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
81139cfc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
81139d00:	003fff06 	br	81139d00 <__reset+0xfb119d00>
